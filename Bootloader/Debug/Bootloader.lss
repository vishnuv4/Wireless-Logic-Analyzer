
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c99c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000094  20000000  0000c99c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c00  20000094  0000ca30  00020094  2**2
                  ALLOC
  3 .stack        00002004  20000c94  0000d630  00020094  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004aab9  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005c91  00000000  00000000  0006abce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005995  00000000  00000000  0007085f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001040  00000000  00000000  000761f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e30  00000000  00000000  00077234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020e36  00000000  00000000  00078064  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018572  00000000  00000000  00098e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093ce1  00000000  00000000  000b140c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003c1c  00000000  00000000  001450f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 2c 00 20 79 6b 00 00 71 6c 00 00 71 6c 00 00     .,. yk..ql..ql..
	...
      2c:	71 6c 00 00 00 00 00 00 00 00 00 00 71 6c 00 00     ql..........ql..
      3c:	e5 01 00 00 71 6c 00 00 71 6c 00 00 71 6c 00 00     ....ql..ql..ql..
      4c:	71 6c 00 00 71 6c 00 00 71 6c 00 00 71 6c 00 00     ql..ql..ql..ql..
      5c:	71 6c 00 00 71 6c 00 00 05 3e 00 00 1d 3e 00 00     ql..ql...>...>..
      6c:	35 3e 00 00 4d 3e 00 00 65 3e 00 00 7d 3e 00 00     5>..M>..e>..}>..
      7c:	71 6c 00 00 71 6c 00 00 71 6c 00 00 71 6c 00 00     ql..ql..ql..ql..
      8c:	71 6c 00 00 71 6c 00 00 00 00 00 00 00 00 00 00     ql..ql..........
      9c:	71 6c 00 00 71 6c 00 00 71 6c 00 00 71 6c 00 00     ql..ql..ql..ql..
      ac:	71 6c 00 00 00 00 00 00                             ql......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000094 	.word	0x20000094
      d4:	00000000 	.word	0x00000000
      d8:	0000c99c 	.word	0x0000c99c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000098 	.word	0x20000098
     108:	0000c99c 	.word	0x0000c99c
     10c:	0000c99c 	.word	0x0000c99c
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	0000672d 	.word	0x0000672d
     190:	20000000 	.word	0x20000000
     194:	0000b1cd 	.word	0x0000b1cd
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <GetSystick>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/
uint32_t GetSystick(void)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	af00      	add	r7, sp, #0
	return ul_tickcount;
     1d4:	4b02      	ldr	r3, [pc, #8]	; (1e0 <GetSystick+0x10>)
     1d6:	681b      	ldr	r3, [r3, #0]
}
     1d8:	0018      	movs	r0, r3
     1da:	46bd      	mov	sp, r7
     1dc:	bd80      	pop	{r7, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	200000b0 	.word	0x200000b0

000001e4 <SysTick_Handler>:
 *
 * Note:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	af00      	add	r7, sp, #0
	
	ul_tickcount++;
     1e8:	4b03      	ldr	r3, [pc, #12]	; (1f8 <SysTick_Handler+0x14>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	1c5a      	adds	r2, r3, #1
     1ee:	4b02      	ldr	r3, [pc, #8]	; (1f8 <SysTick_Handler+0x14>)
     1f0:	601a      	str	r2, [r3, #0]
}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	46bd      	mov	sp, r7
     1f6:	bd80      	pop	{r7, pc}
     1f8:	200000b0 	.word	0x200000b0

000001fc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
     202:	0002      	movs	r2, r0
     204:	1dfb      	adds	r3, r7, #7
     206:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     208:	230f      	movs	r3, #15
     20a:	18fb      	adds	r3, r7, r3
     20c:	1dfa      	adds	r2, r7, #7
     20e:	7812      	ldrb	r2, [r2, #0]
     210:	09d2      	lsrs	r2, r2, #7
     212:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     214:	230e      	movs	r3, #14
     216:	18fb      	adds	r3, r7, r3
     218:	1dfa      	adds	r2, r7, #7
     21a:	7812      	ldrb	r2, [r2, #0]
     21c:	0952      	lsrs	r2, r2, #5
     21e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     220:	4b0d      	ldr	r3, [pc, #52]	; (258 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     222:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     224:	230f      	movs	r3, #15
     226:	18fb      	adds	r3, r7, r3
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	2b00      	cmp	r3, #0
     22c:	d10f      	bne.n	24e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     22e:	230f      	movs	r3, #15
     230:	18fb      	adds	r3, r7, r3
     232:	781b      	ldrb	r3, [r3, #0]
     234:	009b      	lsls	r3, r3, #2
     236:	2210      	movs	r2, #16
     238:	4694      	mov	ip, r2
     23a:	44bc      	add	ip, r7
     23c:	4463      	add	r3, ip
     23e:	3b08      	subs	r3, #8
     240:	681a      	ldr	r2, [r3, #0]
     242:	230e      	movs	r3, #14
     244:	18fb      	adds	r3, r7, r3
     246:	781b      	ldrb	r3, [r3, #0]
     248:	01db      	lsls	r3, r3, #7
     24a:	18d3      	adds	r3, r2, r3
     24c:	e000      	b.n	250 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     24e:	2300      	movs	r3, #0
	}
}
     250:	0018      	movs	r0, r3
     252:	46bd      	mov	sp, r7
     254:	b004      	add	sp, #16
     256:	bd80      	pop	{r7, pc}
     258:	41004400 	.word	0x41004400

0000025c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	0002      	movs	r2, r0
     264:	1dfb      	adds	r3, r7, #7
     266:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     268:	1dfb      	adds	r3, r7, #7
     26a:	781b      	ldrb	r3, [r3, #0]
     26c:	0018      	movs	r0, r3
     26e:	4b03      	ldr	r3, [pc, #12]	; (27c <port_get_group_from_gpio_pin+0x20>)
     270:	4798      	blx	r3
     272:	0003      	movs	r3, r0
}
     274:	0018      	movs	r0, r3
     276:	46bd      	mov	sp, r7
     278:	b002      	add	sp, #8
     27a:	bd80      	pop	{r7, pc}
     27c:	000001fd 	.word	0x000001fd

00000280 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     280:	b580      	push	{r7, lr}
     282:	b082      	sub	sp, #8
     284:	af00      	add	r7, sp, #0
     286:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	2200      	movs	r2, #0
     28c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     28e:	687b      	ldr	r3, [r7, #4]
     290:	2201      	movs	r2, #1
     292:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     294:	687b      	ldr	r3, [r7, #4]
     296:	2200      	movs	r2, #0
     298:	709a      	strb	r2, [r3, #2]
}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	46bd      	mov	sp, r7
     29e:	b002      	add	sp, #8
     2a0:	bd80      	pop	{r7, pc}
	...

000002a4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	0002      	movs	r2, r0
     2ac:	1dfb      	adds	r3, r7, #7
     2ae:	701a      	strb	r2, [r3, #0]
     2b0:	1dbb      	adds	r3, r7, #6
     2b2:	1c0a      	adds	r2, r1, #0
     2b4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     2b6:	1dfb      	adds	r3, r7, #7
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	0018      	movs	r0, r3
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <port_pin_set_output_level+0x50>)
     2be:	4798      	blx	r3
     2c0:	0003      	movs	r3, r0
     2c2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	221f      	movs	r2, #31
     2ca:	4013      	ands	r3, r2
     2cc:	2201      	movs	r2, #1
     2ce:	409a      	lsls	r2, r3
     2d0:	0013      	movs	r3, r2
     2d2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2d4:	1dbb      	adds	r3, r7, #6
     2d6:	781b      	ldrb	r3, [r3, #0]
     2d8:	2b00      	cmp	r3, #0
     2da:	d003      	beq.n	2e4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2dc:	68fb      	ldr	r3, [r7, #12]
     2de:	68ba      	ldr	r2, [r7, #8]
     2e0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     2e2:	e002      	b.n	2ea <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	68ba      	ldr	r2, [r7, #8]
     2e8:	615a      	str	r2, [r3, #20]
}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	46bd      	mov	sp, r7
     2ee:	b004      	add	sp, #16
     2f0:	bd80      	pop	{r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	0000025d 	.word	0x0000025d

000002f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     2fe:	1d3b      	adds	r3, r7, #4
     300:	0018      	movs	r0, r3
     302:	4b12      	ldr	r3, [pc, #72]	; (34c <system_board_init+0x54>)
     304:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     306:	1d3b      	adds	r3, r7, #4
     308:	2201      	movs	r2, #1
     30a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     30c:	1d3b      	adds	r3, r7, #4
     30e:	0019      	movs	r1, r3
     310:	2017      	movs	r0, #23
     312:	4b0f      	ldr	r3, [pc, #60]	; (350 <system_board_init+0x58>)
     314:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     316:	2101      	movs	r1, #1
     318:	2017      	movs	r0, #23
     31a:	4b0e      	ldr	r3, [pc, #56]	; (354 <system_board_init+0x5c>)
     31c:	4798      	blx	r3
	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     31e:	1d3b      	adds	r3, r7, #4
     320:	2201      	movs	r2, #1
     322:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA07, &pin_conf);
     324:	1d3b      	adds	r3, r7, #4
     326:	0019      	movs	r1, r3
     328:	2007      	movs	r0, #7
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <system_board_init+0x58>)
     32c:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     32e:	1d3b      	adds	r3, r7, #4
     330:	2200      	movs	r2, #0
     332:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     334:	1d3b      	adds	r3, r7, #4
     336:	2201      	movs	r2, #1
     338:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     33a:	1d3b      	adds	r3, r7, #4
     33c:	0019      	movs	r1, r3
     33e:	2037      	movs	r0, #55	; 0x37
     340:	4b03      	ldr	r3, [pc, #12]	; (350 <system_board_init+0x58>)
     342:	4798      	blx	r3
	
	
}
     344:	46c0      	nop			; (mov r8, r8)
     346:	46bd      	mov	sp, r7
     348:	b002      	add	sp, #8
     34a:	bd80      	pop	{r7, pc}
     34c:	00000281 	.word	0x00000281
     350:	00003235 	.word	0x00003235
     354:	000002a5 	.word	0x000002a5

00000358 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
     358:	b580      	push	{r7, lr}
     35a:	b082      	sub	sp, #8
     35c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     35e:	4b07      	ldr	r3, [pc, #28]	; (37c <nvm_is_ready+0x24>)
     360:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     362:	687b      	ldr	r3, [r7, #4]
     364:	7d1b      	ldrb	r3, [r3, #20]
     366:	b2db      	uxtb	r3, r3
     368:	001a      	movs	r2, r3
     36a:	2301      	movs	r3, #1
     36c:	4013      	ands	r3, r2
     36e:	1e5a      	subs	r2, r3, #1
     370:	4193      	sbcs	r3, r2
     372:	b2db      	uxtb	r3, r3
}
     374:	0018      	movs	r0, r3
     376:	46bd      	mov	sp, r7
     378:	b002      	add	sp, #8
     37a:	bd80      	pop	{r7, pc}
     37c:	41004000 	.word	0x41004000

00000380 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     380:	b580      	push	{r7, lr}
     382:	b082      	sub	sp, #8
     384:	af00      	add	r7, sp, #0
     386:	0002      	movs	r2, r0
     388:	6039      	str	r1, [r7, #0]
     38a:	1dfb      	adds	r3, r7, #7
     38c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     38e:	1dfb      	adds	r3, r7, #7
     390:	781b      	ldrb	r3, [r3, #0]
     392:	2b01      	cmp	r3, #1
     394:	d00a      	beq.n	3ac <system_apb_clock_set_mask+0x2c>
     396:	2b02      	cmp	r3, #2
     398:	d00f      	beq.n	3ba <system_apb_clock_set_mask+0x3a>
     39a:	2b00      	cmp	r3, #0
     39c:	d114      	bne.n	3c8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     39e:	4b0e      	ldr	r3, [pc, #56]	; (3d8 <system_apb_clock_set_mask+0x58>)
     3a0:	4a0d      	ldr	r2, [pc, #52]	; (3d8 <system_apb_clock_set_mask+0x58>)
     3a2:	6991      	ldr	r1, [r2, #24]
     3a4:	683a      	ldr	r2, [r7, #0]
     3a6:	430a      	orrs	r2, r1
     3a8:	619a      	str	r2, [r3, #24]
			break;
     3aa:	e00f      	b.n	3cc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     3ac:	4b0a      	ldr	r3, [pc, #40]	; (3d8 <system_apb_clock_set_mask+0x58>)
     3ae:	4a0a      	ldr	r2, [pc, #40]	; (3d8 <system_apb_clock_set_mask+0x58>)
     3b0:	69d1      	ldr	r1, [r2, #28]
     3b2:	683a      	ldr	r2, [r7, #0]
     3b4:	430a      	orrs	r2, r1
     3b6:	61da      	str	r2, [r3, #28]
			break;
     3b8:	e008      	b.n	3cc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     3ba:	4b07      	ldr	r3, [pc, #28]	; (3d8 <system_apb_clock_set_mask+0x58>)
     3bc:	4a06      	ldr	r2, [pc, #24]	; (3d8 <system_apb_clock_set_mask+0x58>)
     3be:	6a11      	ldr	r1, [r2, #32]
     3c0:	683a      	ldr	r2, [r7, #0]
     3c2:	430a      	orrs	r2, r1
     3c4:	621a      	str	r2, [r3, #32]
			break;
     3c6:	e001      	b.n	3cc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     3c8:	2317      	movs	r3, #23
     3ca:	e000      	b.n	3ce <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     3cc:	2300      	movs	r3, #0
}
     3ce:	0018      	movs	r0, r3
     3d0:	46bd      	mov	sp, r7
     3d2:	b002      	add	sp, #8
     3d4:	bd80      	pop	{r7, pc}
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	40000400 	.word	0x40000400

000003dc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     3dc:	b580      	push	{r7, lr}
     3de:	b084      	sub	sp, #16
     3e0:	af00      	add	r7, sp, #0
     3e2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     3e4:	4b2f      	ldr	r3, [pc, #188]	; (4a4 <nvm_set_config+0xc8>)
     3e6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
     3e8:	2104      	movs	r1, #4
     3ea:	2001      	movs	r0, #1
     3ec:	4b2e      	ldr	r3, [pc, #184]	; (4a8 <nvm_set_config+0xcc>)
     3ee:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     3f0:	68fb      	ldr	r3, [r7, #12]
     3f2:	2220      	movs	r2, #32
     3f4:	32ff      	adds	r2, #255	; 0xff
     3f6:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     3f8:	4b2c      	ldr	r3, [pc, #176]	; (4ac <nvm_set_config+0xd0>)
     3fa:	4798      	blx	r3
     3fc:	0003      	movs	r3, r0
     3fe:	001a      	movs	r2, r3
     400:	2301      	movs	r3, #1
     402:	4053      	eors	r3, r2
     404:	b2db      	uxtb	r3, r3
     406:	2b00      	cmp	r3, #0
     408:	d001      	beq.n	40e <nvm_set_config+0x32>
		return STATUS_BUSY;
     40a:	2305      	movs	r3, #5
     40c:	e045      	b.n	49a <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     40e:	687b      	ldr	r3, [r7, #4]
     410:	781b      	ldrb	r3, [r3, #0]
     412:	021b      	lsls	r3, r3, #8
     414:	001a      	movs	r2, r3
     416:	23c0      	movs	r3, #192	; 0xc0
     418:	009b      	lsls	r3, r3, #2
     41a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     41c:	687b      	ldr	r3, [r7, #4]
     41e:	785b      	ldrb	r3, [r3, #1]
     420:	01db      	lsls	r3, r3, #7
     422:	0019      	movs	r1, r3
     424:	23ff      	movs	r3, #255	; 0xff
     426:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     428:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     42a:	687b      	ldr	r3, [r7, #4]
     42c:	789b      	ldrb	r3, [r3, #2]
     42e:	005b      	lsls	r3, r3, #1
     430:	0019      	movs	r1, r3
     432:	231e      	movs	r3, #30
     434:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     436:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     438:	687b      	ldr	r3, [r7, #4]
     43a:	78db      	ldrb	r3, [r3, #3]
     43c:	049b      	lsls	r3, r3, #18
     43e:	0019      	movs	r1, r3
     440:	2380      	movs	r3, #128	; 0x80
     442:	02db      	lsls	r3, r3, #11
     444:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     446:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     448:	687b      	ldr	r3, [r7, #4]
     44a:	791b      	ldrb	r3, [r3, #4]
     44c:	041b      	lsls	r3, r3, #16
     44e:	0019      	movs	r1, r3
     450:	23c0      	movs	r3, #192	; 0xc0
     452:	029b      	lsls	r3, r3, #10
     454:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     456:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
     458:	68fb      	ldr	r3, [r7, #12]
     45a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     45c:	68fb      	ldr	r3, [r7, #12]
     45e:	689b      	ldr	r3, [r3, #8]
     460:	035b      	lsls	r3, r3, #13
     462:	0f5b      	lsrs	r3, r3, #29
     464:	b2db      	uxtb	r3, r3
     466:	001a      	movs	r2, r3
     468:	2308      	movs	r3, #8
     46a:	4093      	lsls	r3, r2
     46c:	b29a      	uxth	r2, r3
     46e:	4b10      	ldr	r3, [pc, #64]	; (4b0 <nvm_set_config+0xd4>)
     470:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     472:	68fb      	ldr	r3, [r7, #12]
     474:	689b      	ldr	r3, [r3, #8]
     476:	b29a      	uxth	r2, r3
     478:	4b0d      	ldr	r3, [pc, #52]	; (4b0 <nvm_set_config+0xd4>)
     47a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     47c:	687b      	ldr	r3, [r7, #4]
     47e:	785a      	ldrb	r2, [r3, #1]
     480:	4b0b      	ldr	r3, [pc, #44]	; (4b0 <nvm_set_config+0xd4>)
     482:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     484:	68fb      	ldr	r3, [r7, #12]
     486:	8b1b      	ldrh	r3, [r3, #24]
     488:	b29b      	uxth	r3, r3
     48a:	001a      	movs	r2, r3
     48c:	2380      	movs	r3, #128	; 0x80
     48e:	005b      	lsls	r3, r3, #1
     490:	4013      	ands	r3, r2
     492:	d001      	beq.n	498 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
     494:	2310      	movs	r3, #16
     496:	e000      	b.n	49a <nvm_set_config+0xbe>
	}

	return STATUS_OK;
     498:	2300      	movs	r3, #0
}
     49a:	0018      	movs	r0, r3
     49c:	46bd      	mov	sp, r7
     49e:	b004      	add	sp, #16
     4a0:	bd80      	pop	{r7, pc}
     4a2:	46c0      	nop			; (mov r8, r8)
     4a4:	41004000 	.word	0x41004000
     4a8:	00000381 	.word	0x00000381
     4ac:	00000359 	.word	0x00000359
     4b0:	200000b4 	.word	0x200000b4

000004b4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     4b4:	b580      	push	{r7, lr}
     4b6:	b086      	sub	sp, #24
     4b8:	af00      	add	r7, sp, #0
     4ba:	60b9      	str	r1, [r7, #8]
     4bc:	607a      	str	r2, [r7, #4]
     4be:	230f      	movs	r3, #15
     4c0:	18fb      	adds	r3, r7, r3
     4c2:	1c02      	adds	r2, r0, #0
     4c4:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     4c6:	4b3a      	ldr	r3, [pc, #232]	; (5b0 <nvm_execute_command+0xfc>)
     4c8:	881b      	ldrh	r3, [r3, #0]
     4ca:	001a      	movs	r2, r3
     4cc:	4b38      	ldr	r3, [pc, #224]	; (5b0 <nvm_execute_command+0xfc>)
     4ce:	885b      	ldrh	r3, [r3, #2]
     4d0:	435a      	muls	r2, r3
     4d2:	68bb      	ldr	r3, [r7, #8]
     4d4:	429a      	cmp	r2, r3
     4d6:	d209      	bcs.n	4ec <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     4d8:	68bb      	ldr	r3, [r7, #8]
     4da:	4a36      	ldr	r2, [pc, #216]	; (5b4 <nvm_execute_command+0x100>)
     4dc:	4293      	cmp	r3, r2
     4de:	d903      	bls.n	4e8 <nvm_execute_command+0x34>
     4e0:	68bb      	ldr	r3, [r7, #8]
     4e2:	4a35      	ldr	r2, [pc, #212]	; (5b8 <nvm_execute_command+0x104>)
     4e4:	4293      	cmp	r3, r2
     4e6:	d901      	bls.n	4ec <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     4e8:	2318      	movs	r3, #24
     4ea:	e05c      	b.n	5a6 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     4ec:	4b33      	ldr	r3, [pc, #204]	; (5bc <nvm_execute_command+0x108>)
     4ee:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     4f0:	697b      	ldr	r3, [r7, #20]
     4f2:	685b      	ldr	r3, [r3, #4]
     4f4:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     4f6:	693b      	ldr	r3, [r7, #16]
     4f8:	2280      	movs	r2, #128	; 0x80
     4fa:	02d2      	lsls	r2, r2, #11
     4fc:	431a      	orrs	r2, r3
     4fe:	697b      	ldr	r3, [r7, #20]
     500:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     502:	697b      	ldr	r3, [r7, #20]
     504:	2220      	movs	r2, #32
     506:	32ff      	adds	r2, #255	; 0xff
     508:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     50a:	4b2d      	ldr	r3, [pc, #180]	; (5c0 <nvm_execute_command+0x10c>)
     50c:	4798      	blx	r3
     50e:	0003      	movs	r3, r0
     510:	001a      	movs	r2, r3
     512:	2301      	movs	r3, #1
     514:	4053      	eors	r3, r2
     516:	b2db      	uxtb	r3, r3
     518:	2b00      	cmp	r3, #0
     51a:	d004      	beq.n	526 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     51c:	697b      	ldr	r3, [r7, #20]
     51e:	693a      	ldr	r2, [r7, #16]
     520:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
     522:	2305      	movs	r3, #5
     524:	e03f      	b.n	5a6 <nvm_execute_command+0xf2>
	}

	switch (command) {
     526:	230f      	movs	r3, #15
     528:	18fb      	adds	r3, r7, r3
     52a:	781b      	ldrb	r3, [r3, #0]
     52c:	2b45      	cmp	r3, #69	; 0x45
     52e:	d81d      	bhi.n	56c <nvm_execute_command+0xb8>
     530:	009a      	lsls	r2, r3, #2
     532:	4b24      	ldr	r3, [pc, #144]	; (5c4 <nvm_execute_command+0x110>)
     534:	18d3      	adds	r3, r2, r3
     536:	681b      	ldr	r3, [r3, #0]
     538:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     53a:	697b      	ldr	r3, [r7, #20]
     53c:	8b1b      	ldrh	r3, [r3, #24]
     53e:	b29b      	uxth	r3, r3
     540:	001a      	movs	r2, r3
     542:	2380      	movs	r3, #128	; 0x80
     544:	005b      	lsls	r3, r3, #1
     546:	4013      	ands	r3, r2
     548:	d004      	beq.n	554 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
     54a:	697b      	ldr	r3, [r7, #20]
     54c:	693a      	ldr	r2, [r7, #16]
     54e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
     550:	2310      	movs	r3, #16
     552:	e028      	b.n	5a6 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     554:	68bb      	ldr	r3, [r7, #8]
     556:	089b      	lsrs	r3, r3, #2
     558:	005a      	lsls	r2, r3, #1
     55a:	697b      	ldr	r3, [r7, #20]
     55c:	61da      	str	r2, [r3, #28]
			break;
     55e:	e00b      	b.n	578 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     560:	68bb      	ldr	r3, [r7, #8]
     562:	089b      	lsrs	r3, r3, #2
     564:	005a      	lsls	r2, r3, #1
     566:	697b      	ldr	r3, [r7, #20]
     568:	61da      	str	r2, [r3, #28]
			break;
     56a:	e005      	b.n	578 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
     56c:	697b      	ldr	r3, [r7, #20]
     56e:	693a      	ldr	r2, [r7, #16]
     570:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     572:	2317      	movs	r3, #23
     574:	e017      	b.n	5a6 <nvm_execute_command+0xf2>
			break;
     576:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     578:	230f      	movs	r3, #15
     57a:	18fb      	adds	r3, r7, r3
     57c:	781b      	ldrb	r3, [r3, #0]
     57e:	b29b      	uxth	r3, r3
     580:	4a11      	ldr	r2, [pc, #68]	; (5c8 <nvm_execute_command+0x114>)
     582:	4313      	orrs	r3, r2
     584:	b29a      	uxth	r2, r3
     586:	697b      	ldr	r3, [r7, #20]
     588:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	4b0c      	ldr	r3, [pc, #48]	; (5c0 <nvm_execute_command+0x10c>)
     58e:	4798      	blx	r3
     590:	0003      	movs	r3, r0
     592:	001a      	movs	r2, r3
     594:	2301      	movs	r3, #1
     596:	4053      	eors	r3, r2
     598:	b2db      	uxtb	r3, r3
     59a:	2b00      	cmp	r3, #0
     59c:	d1f6      	bne.n	58c <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
     59e:	697b      	ldr	r3, [r7, #20]
     5a0:	693a      	ldr	r2, [r7, #16]
     5a2:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     5a4:	2300      	movs	r3, #0
}
     5a6:	0018      	movs	r0, r3
     5a8:	46bd      	mov	sp, r7
     5aa:	b006      	add	sp, #24
     5ac:	bd80      	pop	{r7, pc}
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	200000b4 	.word	0x200000b4
     5b4:	00803fff 	.word	0x00803fff
     5b8:	00806000 	.word	0x00806000
     5bc:	41004000 	.word	0x41004000
     5c0:	00000359 	.word	0x00000359
     5c4:	0000bd44 	.word	0x0000bd44
     5c8:	ffffa500 	.word	0xffffa500

000005cc <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     5cc:	b580      	push	{r7, lr}
     5ce:	b088      	sub	sp, #32
     5d0:	af00      	add	r7, sp, #0
     5d2:	60f8      	str	r0, [r7, #12]
     5d4:	60b9      	str	r1, [r7, #8]
     5d6:	1dbb      	adds	r3, r7, #6
     5d8:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     5da:	4b4a      	ldr	r3, [pc, #296]	; (704 <nvm_write_buffer+0x138>)
     5dc:	881b      	ldrh	r3, [r3, #0]
     5de:	001a      	movs	r2, r3
     5e0:	4b48      	ldr	r3, [pc, #288]	; (704 <nvm_write_buffer+0x138>)
     5e2:	885b      	ldrh	r3, [r3, #2]
     5e4:	435a      	muls	r2, r3
	if (destination_address >
     5e6:	68fb      	ldr	r3, [r7, #12]
     5e8:	429a      	cmp	r2, r3
     5ea:	d201      	bcs.n	5f0 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     5ec:	2318      	movs	r3, #24
     5ee:	e084      	b.n	6fa <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     5f0:	4b44      	ldr	r3, [pc, #272]	; (704 <nvm_write_buffer+0x138>)
     5f2:	881b      	ldrh	r3, [r3, #0]
     5f4:	3b01      	subs	r3, #1
     5f6:	001a      	movs	r2, r3
     5f8:	68fb      	ldr	r3, [r7, #12]
     5fa:	4013      	ands	r3, r2
     5fc:	d001      	beq.n	602 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
     5fe:	2318      	movs	r3, #24
     600:	e07b      	b.n	6fa <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
     602:	4b40      	ldr	r3, [pc, #256]	; (704 <nvm_write_buffer+0x138>)
     604:	881b      	ldrh	r3, [r3, #0]
     606:	1dba      	adds	r2, r7, #6
     608:	8812      	ldrh	r2, [r2, #0]
     60a:	429a      	cmp	r2, r3
     60c:	d901      	bls.n	612 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
     60e:	2317      	movs	r3, #23
     610:	e073      	b.n	6fa <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     612:	4b3d      	ldr	r3, [pc, #244]	; (708 <nvm_write_buffer+0x13c>)
     614:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     616:	4b3d      	ldr	r3, [pc, #244]	; (70c <nvm_write_buffer+0x140>)
     618:	4798      	blx	r3
     61a:	0003      	movs	r3, r0
     61c:	001a      	movs	r2, r3
     61e:	2301      	movs	r3, #1
     620:	4053      	eors	r3, r2
     622:	b2db      	uxtb	r3, r3
     624:	2b00      	cmp	r3, #0
     626:	d001      	beq.n	62c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
     628:	2305      	movs	r3, #5
     62a:	e066      	b.n	6fa <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     62c:	697b      	ldr	r3, [r7, #20]
     62e:	4a38      	ldr	r2, [pc, #224]	; (710 <nvm_write_buffer+0x144>)
     630:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
     632:	46c0      	nop			; (mov r8, r8)
     634:	4b35      	ldr	r3, [pc, #212]	; (70c <nvm_write_buffer+0x140>)
     636:	4798      	blx	r3
     638:	0003      	movs	r3, r0
     63a:	001a      	movs	r2, r3
     63c:	2301      	movs	r3, #1
     63e:	4053      	eors	r3, r2
     640:	b2db      	uxtb	r3, r3
     642:	2b00      	cmp	r3, #0
     644:	d1f6      	bne.n	634 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     646:	697b      	ldr	r3, [r7, #20]
     648:	2220      	movs	r2, #32
     64a:	32ff      	adds	r2, #255	; 0xff
     64c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
     64e:	68fb      	ldr	r3, [r7, #12]
     650:	085b      	lsrs	r3, r3, #1
     652:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     654:	231a      	movs	r3, #26
     656:	18fb      	adds	r3, r7, r3
     658:	2200      	movs	r2, #0
     65a:	801a      	strh	r2, [r3, #0]
     65c:	e032      	b.n	6c4 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
     65e:	231a      	movs	r3, #26
     660:	18fb      	adds	r3, r7, r3
     662:	881b      	ldrh	r3, [r3, #0]
     664:	68ba      	ldr	r2, [r7, #8]
     666:	18d3      	adds	r3, r2, r3
     668:	781a      	ldrb	r2, [r3, #0]
     66a:	2318      	movs	r3, #24
     66c:	18fb      	adds	r3, r7, r3
     66e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
     670:	231a      	movs	r3, #26
     672:	18fb      	adds	r3, r7, r3
     674:	881a      	ldrh	r2, [r3, #0]
     676:	1dbb      	adds	r3, r7, #6
     678:	881b      	ldrh	r3, [r3, #0]
     67a:	3b01      	subs	r3, #1
     67c:	429a      	cmp	r2, r3
     67e:	da11      	bge.n	6a4 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
     680:	231a      	movs	r3, #26
     682:	18fb      	adds	r3, r7, r3
     684:	881b      	ldrh	r3, [r3, #0]
     686:	3301      	adds	r3, #1
     688:	68ba      	ldr	r2, [r7, #8]
     68a:	18d3      	adds	r3, r2, r3
     68c:	781b      	ldrb	r3, [r3, #0]
     68e:	021b      	lsls	r3, r3, #8
     690:	b21a      	sxth	r2, r3
     692:	2318      	movs	r3, #24
     694:	18fb      	adds	r3, r7, r3
     696:	2100      	movs	r1, #0
     698:	5e5b      	ldrsh	r3, [r3, r1]
     69a:	4313      	orrs	r3, r2
     69c:	b21a      	sxth	r2, r3
     69e:	2318      	movs	r3, #24
     6a0:	18fb      	adds	r3, r7, r3
     6a2:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
     6a4:	69fb      	ldr	r3, [r7, #28]
     6a6:	1c5a      	adds	r2, r3, #1
     6a8:	61fa      	str	r2, [r7, #28]
     6aa:	005b      	lsls	r3, r3, #1
     6ac:	001a      	movs	r2, r3
     6ae:	2318      	movs	r3, #24
     6b0:	18fb      	adds	r3, r7, r3
     6b2:	881b      	ldrh	r3, [r3, #0]
     6b4:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     6b6:	231a      	movs	r3, #26
     6b8:	18fb      	adds	r3, r7, r3
     6ba:	221a      	movs	r2, #26
     6bc:	18ba      	adds	r2, r7, r2
     6be:	8812      	ldrh	r2, [r2, #0]
     6c0:	3202      	adds	r2, #2
     6c2:	801a      	strh	r2, [r3, #0]
     6c4:	231a      	movs	r3, #26
     6c6:	18fa      	adds	r2, r7, r3
     6c8:	1dbb      	adds	r3, r7, #6
     6ca:	8812      	ldrh	r2, [r2, #0]
     6cc:	881b      	ldrh	r3, [r3, #0]
     6ce:	429a      	cmp	r2, r3
     6d0:	d3c5      	bcc.n	65e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     6d2:	4b0c      	ldr	r3, [pc, #48]	; (704 <nvm_write_buffer+0x138>)
     6d4:	791b      	ldrb	r3, [r3, #4]
     6d6:	2201      	movs	r2, #1
     6d8:	4053      	eors	r3, r2
     6da:	b2db      	uxtb	r3, r3
     6dc:	2b00      	cmp	r3, #0
     6de:	d00b      	beq.n	6f8 <nvm_write_buffer+0x12c>
     6e0:	1dbb      	adds	r3, r7, #6
     6e2:	881b      	ldrh	r3, [r3, #0]
     6e4:	2b3f      	cmp	r3, #63	; 0x3f
     6e6:	d807      	bhi.n	6f8 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     6e8:	68fb      	ldr	r3, [r7, #12]
     6ea:	2200      	movs	r2, #0
     6ec:	0019      	movs	r1, r3
     6ee:	2004      	movs	r0, #4
     6f0:	4b08      	ldr	r3, [pc, #32]	; (714 <nvm_write_buffer+0x148>)
     6f2:	4798      	blx	r3
     6f4:	0003      	movs	r3, r0
     6f6:	e000      	b.n	6fa <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
     6f8:	2300      	movs	r3, #0
}
     6fa:	0018      	movs	r0, r3
     6fc:	46bd      	mov	sp, r7
     6fe:	b008      	add	sp, #32
     700:	bd80      	pop	{r7, pc}
     702:	46c0      	nop			; (mov r8, r8)
     704:	200000b4 	.word	0x200000b4
     708:	41004000 	.word	0x41004000
     70c:	00000359 	.word	0x00000359
     710:	ffffa544 	.word	0xffffa544
     714:	000004b5 	.word	0x000004b5

00000718 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
     718:	b580      	push	{r7, lr}
     71a:	b084      	sub	sp, #16
     71c:	af00      	add	r7, sp, #0
     71e:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     720:	4b23      	ldr	r3, [pc, #140]	; (7b0 <nvm_erase_row+0x98>)
     722:	881b      	ldrh	r3, [r3, #0]
     724:	001a      	movs	r2, r3
     726:	4b22      	ldr	r3, [pc, #136]	; (7b0 <nvm_erase_row+0x98>)
     728:	885b      	ldrh	r3, [r3, #2]
     72a:	435a      	muls	r2, r3
	if (row_address >
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	429a      	cmp	r2, r3
     730:	d201      	bcs.n	736 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     732:	2318      	movs	r3, #24
     734:	e037      	b.n	7a6 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     736:	4b1e      	ldr	r3, [pc, #120]	; (7b0 <nvm_erase_row+0x98>)
     738:	881b      	ldrh	r3, [r3, #0]
     73a:	009b      	lsls	r3, r3, #2
     73c:	3b01      	subs	r3, #1
     73e:	001a      	movs	r2, r3
     740:	687b      	ldr	r3, [r7, #4]
     742:	4013      	ands	r3, r2
     744:	d001      	beq.n	74a <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
     746:	2318      	movs	r3, #24
     748:	e02d      	b.n	7a6 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     74a:	4b1a      	ldr	r3, [pc, #104]	; (7b4 <nvm_erase_row+0x9c>)
     74c:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     74e:	4b1a      	ldr	r3, [pc, #104]	; (7b8 <nvm_erase_row+0xa0>)
     750:	4798      	blx	r3
     752:	0003      	movs	r3, r0
     754:	001a      	movs	r2, r3
     756:	2301      	movs	r3, #1
     758:	4053      	eors	r3, r2
     75a:	b2db      	uxtb	r3, r3
     75c:	2b00      	cmp	r3, #0
     75e:	d001      	beq.n	764 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
     760:	2305      	movs	r3, #5
     762:	e020      	b.n	7a6 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     764:	68fb      	ldr	r3, [r7, #12]
     766:	2220      	movs	r2, #32
     768:	32ff      	adds	r2, #255	; 0xff
     76a:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	089b      	lsrs	r3, r3, #2
     770:	005a      	lsls	r2, r3, #1
     772:	68fb      	ldr	r3, [r7, #12]
     774:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     776:	68fb      	ldr	r3, [r7, #12]
     778:	4a10      	ldr	r2, [pc, #64]	; (7bc <nvm_erase_row+0xa4>)
     77a:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
     77c:	46c0      	nop			; (mov r8, r8)
     77e:	4b0e      	ldr	r3, [pc, #56]	; (7b8 <nvm_erase_row+0xa0>)
     780:	4798      	blx	r3
     782:	0003      	movs	r3, r0
     784:	001a      	movs	r2, r3
     786:	2301      	movs	r3, #1
     788:	4053      	eors	r3, r2
     78a:	b2db      	uxtb	r3, r3
     78c:	2b00      	cmp	r3, #0
     78e:	d1f6      	bne.n	77e <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     790:	68fb      	ldr	r3, [r7, #12]
     792:	8b1b      	ldrh	r3, [r3, #24]
     794:	b29b      	uxth	r3, r3
     796:	b2db      	uxtb	r3, r3
     798:	001a      	movs	r2, r3
     79a:	231c      	movs	r3, #28
     79c:	4013      	ands	r3, r2
     79e:	d001      	beq.n	7a4 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
     7a0:	2304      	movs	r3, #4
     7a2:	e000      	b.n	7a6 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
     7a4:	2300      	movs	r3, #0
}
     7a6:	0018      	movs	r0, r3
     7a8:	46bd      	mov	sp, r7
     7aa:	b004      	add	sp, #16
     7ac:	bd80      	pop	{r7, pc}
     7ae:	46c0      	nop			; (mov r8, r8)
     7b0:	200000b4 	.word	0x200000b4
     7b4:	41004000 	.word	0x41004000
     7b8:	00000359 	.word	0x00000359
     7bc:	ffffa502 	.word	0xffffa502

000007c0 <SdCard_Initiate>:
* @return		Returns CTRL_GOOD if the SDS card was mounted incorrectly - other status otherwise
* @note         
*****************************************************************************/

Ctrl_status SdCard_Initiate(void)
{
     7c0:	b590      	push	{r4, r7, lr}
     7c2:	b083      	sub	sp, #12
     7c4:	af00      	add	r7, sp, #0
	Ctrl_status status;
	uint32_t timeStart = GetSystick();
     7c6:	4b16      	ldr	r3, [pc, #88]	; (820 <SdCard_Initiate+0x60>)
     7c8:	4798      	blx	r3
     7ca:	0003      	movs	r3, r0
     7cc:	603b      	str	r3, [r7, #0]

/* Wait card present and ready */
do {
	status = sd_mmc_test_unit_ready(0);
     7ce:	1dfc      	adds	r4, r7, #7
     7d0:	2000      	movs	r0, #0
     7d2:	4b14      	ldr	r3, [pc, #80]	; (824 <SdCard_Initiate+0x64>)
     7d4:	4798      	blx	r3
     7d6:	0003      	movs	r3, r0
     7d8:	7023      	strb	r3, [r4, #0]
	if (CTRL_FAIL == status) {
     7da:	1dfb      	adds	r3, r7, #7
     7dc:	781b      	ldrb	r3, [r3, #0]
     7de:	2b01      	cmp	r3, #1
     7e0:	d106      	bne.n	7f0 <SdCard_Initiate+0x30>
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	2000      	movs	r0, #0
     7e6:	4b10      	ldr	r3, [pc, #64]	; (828 <SdCard_Initiate+0x68>)
     7e8:	4798      	blx	r3
     7ea:	0003      	movs	r3, r0
     7ec:	2b02      	cmp	r3, #2
     7ee:	d1f9      	bne.n	7e4 <SdCard_Initiate+0x24>
		}
	}

	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     7f0:	4b0b      	ldr	r3, [pc, #44]	; (820 <SdCard_Initiate+0x60>)
     7f2:	4798      	blx	r3
     7f4:	0002      	movs	r2, r0
     7f6:	683b      	ldr	r3, [r7, #0]
     7f8:	1ad2      	subs	r2, r2, r3
     7fa:	23fa      	movs	r3, #250	; 0xfa
     7fc:	005b      	lsls	r3, r3, #1
     7fe:	429a      	cmp	r2, r3
     800:	d903      	bls.n	80a <SdCard_Initiate+0x4a>
	{
		status = CTRL_FAIL;
     802:	1dfb      	adds	r3, r7, #7
     804:	2201      	movs	r2, #1
     806:	701a      	strb	r2, [r3, #0]
		break;
     808:	e003      	b.n	812 <SdCard_Initiate+0x52>
	}
} while (CTRL_GOOD != status );
     80a:	1dfb      	adds	r3, r7, #7
     80c:	781b      	ldrb	r3, [r3, #0]
     80e:	2b00      	cmp	r3, #0
     810:	d1dd      	bne.n	7ce <SdCard_Initiate+0xe>

return status;
     812:	1dfb      	adds	r3, r7, #7
     814:	781b      	ldrb	r3, [r3, #0]
}
     816:	0018      	movs	r0, r3
     818:	46bd      	mov	sp, r7
     81a:	b003      	add	sp, #12
     81c:	bd90      	pop	{r4, r7, pc}
     81e:	46c0      	nop			; (mov r8, r8)
     820:	000001d1 	.word	0x000001d1
     824:	00002069 	.word	0x00002069
     828:	00001bdd 	.word	0x00001bdd

0000082c <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     82c:	b580      	push	{r7, lr}
     82e:	b082      	sub	sp, #8
     830:	af00      	add	r7, sp, #0
     832:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
     834:	687b      	ldr	r3, [r7, #4]
     836:	7c1b      	ldrb	r3, [r3, #16]
     838:	2b00      	cmp	r3, #0
     83a:	d00b      	beq.n	854 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     83c:	687b      	ldr	r3, [r7, #4]
     83e:	689b      	ldr	r3, [r3, #8]
     840:	1c5a      	adds	r2, r3, #1
     842:	687b      	ldr	r3, [r7, #4]
     844:	68d9      	ldr	r1, [r3, #12]
     846:	4b10      	ldr	r3, [pc, #64]	; (888 <advance_pointer+0x5c>)
     848:	0010      	movs	r0, r2
     84a:	4798      	blx	r3
     84c:	000b      	movs	r3, r1
     84e:	001a      	movs	r2, r3
     850:	687b      	ldr	r3, [r7, #4]
     852:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     854:	687b      	ldr	r3, [r7, #4]
     856:	685b      	ldr	r3, [r3, #4]
     858:	1c5a      	adds	r2, r3, #1
     85a:	687b      	ldr	r3, [r7, #4]
     85c:	68d9      	ldr	r1, [r3, #12]
     85e:	4b0a      	ldr	r3, [pc, #40]	; (888 <advance_pointer+0x5c>)
     860:	0010      	movs	r0, r2
     862:	4798      	blx	r3
     864:	000b      	movs	r3, r1
     866:	001a      	movs	r2, r3
     868:	687b      	ldr	r3, [r7, #4]
     86a:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     86c:	687b      	ldr	r3, [r7, #4]
     86e:	685a      	ldr	r2, [r3, #4]
     870:	687b      	ldr	r3, [r7, #4]
     872:	689b      	ldr	r3, [r3, #8]
     874:	1ad3      	subs	r3, r2, r3
     876:	425a      	negs	r2, r3
     878:	4153      	adcs	r3, r2
     87a:	b2da      	uxtb	r2, r3
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	741a      	strb	r2, [r3, #16]
 }
     880:	46c0      	nop			; (mov r8, r8)
     882:	46bd      	mov	sp, r7
     884:	b002      	add	sp, #8
     886:	bd80      	pop	{r7, pc}
     888:	0000b2d9 	.word	0x0000b2d9

0000088c <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
     88c:	b580      	push	{r7, lr}
     88e:	b082      	sub	sp, #8
     890:	af00      	add	r7, sp, #0
     892:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
     894:	687b      	ldr	r3, [r7, #4]
     896:	2200      	movs	r2, #0
     898:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     89a:	687b      	ldr	r3, [r7, #4]
     89c:	689b      	ldr	r3, [r3, #8]
     89e:	1c5a      	adds	r2, r3, #1
     8a0:	687b      	ldr	r3, [r7, #4]
     8a2:	68d9      	ldr	r1, [r3, #12]
     8a4:	4b05      	ldr	r3, [pc, #20]	; (8bc <retreat_pointer+0x30>)
     8a6:	0010      	movs	r0, r2
     8a8:	4798      	blx	r3
     8aa:	000b      	movs	r3, r1
     8ac:	001a      	movs	r2, r3
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	609a      	str	r2, [r3, #8]
 }
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	46bd      	mov	sp, r7
     8b6:	b002      	add	sp, #8
     8b8:	bd80      	pop	{r7, pc}
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	0000b2d9 	.word	0x0000b2d9

000008c0 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     8c0:	b580      	push	{r7, lr}
     8c2:	b084      	sub	sp, #16
     8c4:	af00      	add	r7, sp, #0
     8c6:	6078      	str	r0, [r7, #4]
     8c8:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     8ca:	2014      	movs	r0, #20
     8cc:	4b09      	ldr	r3, [pc, #36]	; (8f4 <circular_buf_init+0x34>)
     8ce:	4798      	blx	r3
     8d0:	0003      	movs	r3, r0
     8d2:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     8d4:	68fb      	ldr	r3, [r7, #12]
     8d6:	687a      	ldr	r2, [r7, #4]
     8d8:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
     8da:	68fb      	ldr	r3, [r7, #12]
     8dc:	683a      	ldr	r2, [r7, #0]
     8de:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
     8e0:	68fb      	ldr	r3, [r7, #12]
     8e2:	0018      	movs	r0, r3
     8e4:	4b04      	ldr	r3, [pc, #16]	; (8f8 <circular_buf_init+0x38>)
     8e6:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
     8e8:	68fb      	ldr	r3, [r7, #12]
 }
     8ea:	0018      	movs	r0, r3
     8ec:	46bd      	mov	sp, r7
     8ee:	b004      	add	sp, #16
     8f0:	bd80      	pop	{r7, pc}
     8f2:	46c0      	nop			; (mov r8, r8)
     8f4:	0000b555 	.word	0x0000b555
     8f8:	000008fd 	.word	0x000008fd

000008fc <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
     8fc:	b580      	push	{r7, lr}
     8fe:	b082      	sub	sp, #8
     900:	af00      	add	r7, sp, #0
     902:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
     904:	687b      	ldr	r3, [r7, #4]
     906:	2200      	movs	r2, #0
     908:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
     90a:	687b      	ldr	r3, [r7, #4]
     90c:	2200      	movs	r2, #0
     90e:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
     910:	687b      	ldr	r3, [r7, #4]
     912:	2200      	movs	r2, #0
     914:	741a      	strb	r2, [r3, #16]
 }
     916:	46c0      	nop			; (mov r8, r8)
     918:	46bd      	mov	sp, r7
     91a:	b002      	add	sp, #8
     91c:	bd80      	pop	{r7, pc}
	...

00000920 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     920:	b580      	push	{r7, lr}
     922:	b082      	sub	sp, #8
     924:	af00      	add	r7, sp, #0
     926:	6078      	str	r0, [r7, #4]
     928:	000a      	movs	r2, r1
     92a:	1cfb      	adds	r3, r7, #3
     92c:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     92e:	687b      	ldr	r3, [r7, #4]
     930:	681a      	ldr	r2, [r3, #0]
     932:	687b      	ldr	r3, [r7, #4]
     934:	685b      	ldr	r3, [r3, #4]
     936:	18d3      	adds	r3, r2, r3
     938:	1cfa      	adds	r2, r7, #3
     93a:	7812      	ldrb	r2, [r2, #0]
     93c:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
     93e:	687b      	ldr	r3, [r7, #4]
     940:	0018      	movs	r0, r3
     942:	4b03      	ldr	r3, [pc, #12]	; (950 <circular_buf_put+0x30>)
     944:	4798      	blx	r3
 }
     946:	46c0      	nop			; (mov r8, r8)
     948:	46bd      	mov	sp, r7
     94a:	b002      	add	sp, #8
     94c:	bd80      	pop	{r7, pc}
     94e:	46c0      	nop			; (mov r8, r8)
     950:	0000082d 	.word	0x0000082d

00000954 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
     954:	b580      	push	{r7, lr}
     956:	b084      	sub	sp, #16
     958:	af00      	add	r7, sp, #0
     95a:	6078      	str	r0, [r7, #4]
     95c:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
     95e:	2301      	movs	r3, #1
     960:	425b      	negs	r3, r3
     962:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
     964:	687b      	ldr	r3, [r7, #4]
     966:	0018      	movs	r0, r3
     968:	4b0d      	ldr	r3, [pc, #52]	; (9a0 <circular_buf_get+0x4c>)
     96a:	4798      	blx	r3
     96c:	0003      	movs	r3, r0
     96e:	001a      	movs	r2, r3
     970:	2301      	movs	r3, #1
     972:	4053      	eors	r3, r2
     974:	b2db      	uxtb	r3, r3
     976:	2b00      	cmp	r3, #0
     978:	d00d      	beq.n	996 <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
     97a:	687b      	ldr	r3, [r7, #4]
     97c:	681a      	ldr	r2, [r3, #0]
     97e:	687b      	ldr	r3, [r7, #4]
     980:	689b      	ldr	r3, [r3, #8]
     982:	18d3      	adds	r3, r2, r3
     984:	781a      	ldrb	r2, [r3, #0]
     986:	683b      	ldr	r3, [r7, #0]
     988:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
     98a:	687b      	ldr	r3, [r7, #4]
     98c:	0018      	movs	r0, r3
     98e:	4b05      	ldr	r3, [pc, #20]	; (9a4 <circular_buf_get+0x50>)
     990:	4798      	blx	r3

		 r = 0;
     992:	2300      	movs	r3, #0
     994:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
     996:	68fb      	ldr	r3, [r7, #12]
 }
     998:	0018      	movs	r0, r3
     99a:	46bd      	mov	sp, r7
     99c:	b004      	add	sp, #16
     99e:	bd80      	pop	{r7, pc}
     9a0:	000009a9 	.word	0x000009a9
     9a4:	0000088d 	.word	0x0000088d

000009a8 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
     9a8:	b580      	push	{r7, lr}
     9aa:	b082      	sub	sp, #8
     9ac:	af00      	add	r7, sp, #0
     9ae:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     9b0:	687b      	ldr	r3, [r7, #4]
     9b2:	7c1b      	ldrb	r3, [r3, #16]
     9b4:	2201      	movs	r2, #1
     9b6:	4053      	eors	r3, r2
     9b8:	b2db      	uxtb	r3, r3
     9ba:	2b00      	cmp	r3, #0
     9bc:	d007      	beq.n	9ce <circular_buf_empty+0x26>
     9be:	687b      	ldr	r3, [r7, #4]
     9c0:	685a      	ldr	r2, [r3, #4]
     9c2:	687b      	ldr	r3, [r7, #4]
     9c4:	689b      	ldr	r3, [r3, #8]
     9c6:	429a      	cmp	r2, r3
     9c8:	d101      	bne.n	9ce <circular_buf_empty+0x26>
     9ca:	2301      	movs	r3, #1
     9cc:	e000      	b.n	9d0 <circular_buf_empty+0x28>
     9ce:	2300      	movs	r3, #0
     9d0:	1c1a      	adds	r2, r3, #0
     9d2:	2301      	movs	r3, #1
     9d4:	4013      	ands	r3, r2
     9d6:	b2db      	uxtb	r3, r3
 }
     9d8:	0018      	movs	r0, r3
     9da:	46bd      	mov	sp, r7
     9dc:	b002      	add	sp, #8
     9de:	bd80      	pop	{r7, pc}

000009e0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     9e0:	b580      	push	{r7, lr}
     9e2:	b082      	sub	sp, #8
     9e4:	af00      	add	r7, sp, #0
     9e6:	0002      	movs	r2, r0
     9e8:	1dfb      	adds	r3, r7, #7
     9ea:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     9ec:	4b06      	ldr	r3, [pc, #24]	; (a08 <system_interrupt_enable+0x28>)
     9ee:	1dfa      	adds	r2, r7, #7
     9f0:	7812      	ldrb	r2, [r2, #0]
     9f2:	0011      	movs	r1, r2
     9f4:	221f      	movs	r2, #31
     9f6:	400a      	ands	r2, r1
     9f8:	2101      	movs	r1, #1
     9fa:	4091      	lsls	r1, r2
     9fc:	000a      	movs	r2, r1
     9fe:	601a      	str	r2, [r3, #0]
}
     a00:	46c0      	nop			; (mov r8, r8)
     a02:	46bd      	mov	sp, r7
     a04:	b002      	add	sp, #8
     a06:	bd80      	pop	{r7, pc}
     a08:	e000e100 	.word	0xe000e100

00000a0c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     a0c:	b580      	push	{r7, lr}
     a0e:	b082      	sub	sp, #8
     a10:	af00      	add	r7, sp, #0
     a12:	0002      	movs	r2, r0
     a14:	1dfb      	adds	r3, r7, #7
     a16:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     a18:	4a07      	ldr	r2, [pc, #28]	; (a38 <system_interrupt_disable+0x2c>)
     a1a:	1dfb      	adds	r3, r7, #7
     a1c:	781b      	ldrb	r3, [r3, #0]
     a1e:	0019      	movs	r1, r3
     a20:	231f      	movs	r3, #31
     a22:	400b      	ands	r3, r1
     a24:	2101      	movs	r1, #1
     a26:	4099      	lsls	r1, r3
     a28:	000b      	movs	r3, r1
     a2a:	0019      	movs	r1, r3
     a2c:	2380      	movs	r3, #128	; 0x80
     a2e:	50d1      	str	r1, [r2, r3]
}
     a30:	46c0      	nop			; (mov r8, r8)
     a32:	46bd      	mov	sp, r7
     a34:	b002      	add	sp, #8
     a36:	bd80      	pop	{r7, pc}
     a38:	e000e100 	.word	0xe000e100

00000a3c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     a3c:	b580      	push	{r7, lr}
     a3e:	b084      	sub	sp, #16
     a40:	af00      	add	r7, sp, #0
     a42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	681b      	ldr	r3, [r3, #0]
     a48:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a4a:	68fb      	ldr	r3, [r7, #12]
     a4c:	69db      	ldr	r3, [r3, #28]
     a4e:	1e5a      	subs	r2, r3, #1
     a50:	4193      	sbcs	r3, r2
     a52:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     a54:	0018      	movs	r0, r3
     a56:	46bd      	mov	sp, r7
     a58:	b004      	add	sp, #16
     a5a:	bd80      	pop	{r7, pc}

00000a5c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     a5c:	b580      	push	{r7, lr}
     a5e:	b082      	sub	sp, #8
     a60:	af00      	add	r7, sp, #0
     a62:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     a64:	46c0      	nop			; (mov r8, r8)
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	0018      	movs	r0, r3
     a6a:	4b04      	ldr	r3, [pc, #16]	; (a7c <_usart_wait_for_sync+0x20>)
     a6c:	4798      	blx	r3
     a6e:	1e03      	subs	r3, r0, #0
     a70:	d1f9      	bne.n	a66 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	46bd      	mov	sp, r7
     a76:	b002      	add	sp, #8
     a78:	bd80      	pop	{r7, pc}
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	00000a3d 	.word	0x00000a3d

00000a80 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     a80:	b580      	push	{r7, lr}
     a82:	b082      	sub	sp, #8
     a84:	af00      	add	r7, sp, #0
     a86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     a88:	687b      	ldr	r3, [r7, #4]
     a8a:	2280      	movs	r2, #128	; 0x80
     a8c:	05d2      	lsls	r2, r2, #23
     a8e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     a90:	687b      	ldr	r3, [r7, #4]
     a92:	2200      	movs	r2, #0
     a94:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     a96:	687b      	ldr	r3, [r7, #4]
     a98:	22ff      	movs	r2, #255	; 0xff
     a9a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     a9c:	687b      	ldr	r3, [r7, #4]
     a9e:	2200      	movs	r2, #0
     aa0:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     aa2:	687b      	ldr	r3, [r7, #4]
     aa4:	2200      	movs	r2, #0
     aa6:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     aa8:	687b      	ldr	r3, [r7, #4]
     aaa:	2296      	movs	r2, #150	; 0x96
     aac:	0192      	lsls	r2, r2, #6
     aae:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     ab0:	687b      	ldr	r3, [r7, #4]
     ab2:	2224      	movs	r2, #36	; 0x24
     ab4:	2101      	movs	r1, #1
     ab6:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     ab8:	687b      	ldr	r3, [r7, #4]
     aba:	2225      	movs	r2, #37	; 0x25
     abc:	2101      	movs	r1, #1
     abe:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     ac0:	687b      	ldr	r3, [r7, #4]
     ac2:	2226      	movs	r2, #38	; 0x26
     ac4:	2100      	movs	r1, #0
     ac6:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     ac8:	687b      	ldr	r3, [r7, #4]
     aca:	2227      	movs	r2, #39	; 0x27
     acc:	2100      	movs	r1, #0
     ace:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     ad0:	687b      	ldr	r3, [r7, #4]
     ad2:	2200      	movs	r2, #0
     ad4:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	2288      	movs	r2, #136	; 0x88
     ada:	0352      	lsls	r2, r2, #13
     adc:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	222c      	movs	r2, #44	; 0x2c
     ae2:	2100      	movs	r1, #0
     ae4:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     ae6:	687b      	ldr	r3, [r7, #4]
     ae8:	222d      	movs	r2, #45	; 0x2d
     aea:	2100      	movs	r1, #0
     aec:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     aee:	687b      	ldr	r3, [r7, #4]
     af0:	2200      	movs	r2, #0
     af2:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     af4:	687b      	ldr	r3, [r7, #4]
     af6:	2200      	movs	r2, #0
     af8:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     afa:	687b      	ldr	r3, [r7, #4]
     afc:	2200      	movs	r2, #0
     afe:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     b00:	687b      	ldr	r3, [r7, #4]
     b02:	2200      	movs	r2, #0
     b04:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	2200      	movs	r2, #0
     b0a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     b0c:	687b      	ldr	r3, [r7, #4]
     b0e:	2200      	movs	r2, #0
     b10:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     b12:	687b      	ldr	r3, [r7, #4]
     b14:	2200      	movs	r2, #0
     b16:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     b18:	687b      	ldr	r3, [r7, #4]
     b1a:	2200      	movs	r2, #0
     b1c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     b1e:	687b      	ldr	r3, [r7, #4]
     b20:	2200      	movs	r2, #0
     b22:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     b24:	687b      	ldr	r3, [r7, #4]
     b26:	2200      	movs	r2, #0
     b28:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     b2a:	687b      	ldr	r3, [r7, #4]
     b2c:	2213      	movs	r2, #19
     b2e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     b30:	687b      	ldr	r3, [r7, #4]
     b32:	2200      	movs	r2, #0
     b34:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	46bd      	mov	sp, r7
     b3a:	b002      	add	sp, #8
     b3c:	bd80      	pop	{r7, pc}
	...

00000b40 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     b40:	b580      	push	{r7, lr}
     b42:	b084      	sub	sp, #16
     b44:	af00      	add	r7, sp, #0
     b46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b48:	687b      	ldr	r3, [r7, #4]
     b4a:	681b      	ldr	r3, [r3, #0]
     b4c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     b4e:	687b      	ldr	r3, [r7, #4]
     b50:	681b      	ldr	r3, [r3, #0]
     b52:	0018      	movs	r0, r3
     b54:	4b09      	ldr	r3, [pc, #36]	; (b7c <usart_enable+0x3c>)
     b56:	4798      	blx	r3
     b58:	0003      	movs	r3, r0
     b5a:	0018      	movs	r0, r3
     b5c:	4b08      	ldr	r3, [pc, #32]	; (b80 <usart_enable+0x40>)
     b5e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     b60:	687b      	ldr	r3, [r7, #4]
     b62:	0018      	movs	r0, r3
     b64:	4b07      	ldr	r3, [pc, #28]	; (b84 <usart_enable+0x44>)
     b66:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     b68:	68fb      	ldr	r3, [r7, #12]
     b6a:	681b      	ldr	r3, [r3, #0]
     b6c:	2202      	movs	r2, #2
     b6e:	431a      	orrs	r2, r3
     b70:	68fb      	ldr	r3, [r7, #12]
     b72:	601a      	str	r2, [r3, #0]
}
     b74:	46c0      	nop			; (mov r8, r8)
     b76:	46bd      	mov	sp, r7
     b78:	b004      	add	sp, #16
     b7a:	bd80      	pop	{r7, pc}
     b7c:	00003dc1 	.word	0x00003dc1
     b80:	000009e1 	.word	0x000009e1
     b84:	00000a5d 	.word	0x00000a5d

00000b88 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
     b88:	b580      	push	{r7, lr}
     b8a:	b084      	sub	sp, #16
     b8c:	af00      	add	r7, sp, #0
     b8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b90:	687b      	ldr	r3, [r7, #4]
     b92:	681b      	ldr	r3, [r3, #0]
     b94:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     b96:	687b      	ldr	r3, [r7, #4]
     b98:	681b      	ldr	r3, [r3, #0]
     b9a:	0018      	movs	r0, r3
     b9c:	4b0a      	ldr	r3, [pc, #40]	; (bc8 <usart_disable+0x40>)
     b9e:	4798      	blx	r3
     ba0:	0003      	movs	r3, r0
     ba2:	0018      	movs	r0, r3
     ba4:	4b09      	ldr	r3, [pc, #36]	; (bcc <usart_disable+0x44>)
     ba6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     ba8:	687b      	ldr	r3, [r7, #4]
     baa:	0018      	movs	r0, r3
     bac:	4b08      	ldr	r3, [pc, #32]	; (bd0 <usart_disable+0x48>)
     bae:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     bb0:	68fb      	ldr	r3, [r7, #12]
     bb2:	681b      	ldr	r3, [r3, #0]
     bb4:	2202      	movs	r2, #2
     bb6:	4393      	bics	r3, r2
     bb8:	001a      	movs	r2, r3
     bba:	68fb      	ldr	r3, [r7, #12]
     bbc:	601a      	str	r2, [r3, #0]
}
     bbe:	46c0      	nop			; (mov r8, r8)
     bc0:	46bd      	mov	sp, r7
     bc2:	b004      	add	sp, #16
     bc4:	bd80      	pop	{r7, pc}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	00003dc1 	.word	0x00003dc1
     bcc:	00000a0d 	.word	0x00000a0d
     bd0:	00000a5d 	.word	0x00000a5d

00000bd4 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     bd4:	b580      	push	{r7, lr}
     bd6:	b082      	sub	sp, #8
     bd8:	af00      	add	r7, sp, #0
     bda:	6078      	str	r0, [r7, #4]
     bdc:	000a      	movs	r2, r1
     bde:	1cfb      	adds	r3, r7, #3
     be0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     be2:	687b      	ldr	r3, [r7, #4]
     be4:	2231      	movs	r2, #49	; 0x31
     be6:	5c9b      	ldrb	r3, [r3, r2]
     be8:	b25a      	sxtb	r2, r3
     bea:	1cfb      	adds	r3, r7, #3
     bec:	781b      	ldrb	r3, [r3, #0]
     bee:	2101      	movs	r1, #1
     bf0:	4099      	lsls	r1, r3
     bf2:	000b      	movs	r3, r1
     bf4:	b25b      	sxtb	r3, r3
     bf6:	4313      	orrs	r3, r2
     bf8:	b25b      	sxtb	r3, r3
     bfa:	b2d9      	uxtb	r1, r3
     bfc:	687b      	ldr	r3, [r7, #4]
     bfe:	2231      	movs	r2, #49	; 0x31
     c00:	5499      	strb	r1, [r3, r2]

}
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	46bd      	mov	sp, r7
     c06:	b002      	add	sp, #8
     c08:	bd80      	pop	{r7, pc}
	...

00000c0c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     c0c:	b580      	push	{r7, lr}
     c0e:	b082      	sub	sp, #8
     c10:	af00      	add	r7, sp, #0
     c12:	6078      	str	r0, [r7, #4]
     c14:	000a      	movs	r2, r1
     c16:	1cfb      	adds	r3, r7, #3
     c18:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	1cfb      	adds	r3, r7, #3
     c1e:	781b      	ldrb	r3, [r3, #0]
     c20:	b29a      	uxth	r2, r3
     c22:	687b      	ldr	r3, [r7, #4]
     c24:	0011      	movs	r1, r2
     c26:	0018      	movs	r0, r3
     c28:	4b04      	ldr	r3, [pc, #16]	; (c3c <usart_serial_putchar+0x30>)
     c2a:	4798      	blx	r3
     c2c:	1e03      	subs	r3, r0, #0
     c2e:	d1f5      	bne.n	c1c <usart_serial_putchar+0x10>

	return STATUS_OK;
     c30:	2300      	movs	r3, #0
}
     c32:	0018      	movs	r0, r3
     c34:	46bd      	mov	sp, r7
     c36:	b002      	add	sp, #8
     c38:	bd80      	pop	{r7, pc}
     c3a:	46c0      	nop			; (mov r8, r8)
     c3c:	000054d9 	.word	0x000054d9

00000c40 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     c40:	b580      	push	{r7, lr}
     c42:	b084      	sub	sp, #16
     c44:	af00      	add	r7, sp, #0
     c46:	6078      	str	r0, [r7, #4]
     c48:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     c4a:	230e      	movs	r3, #14
     c4c:	18fb      	adds	r3, r7, r3
     c4e:	2200      	movs	r2, #0
     c50:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	230e      	movs	r3, #14
     c56:	18fa      	adds	r2, r7, r3
     c58:	687b      	ldr	r3, [r7, #4]
     c5a:	0011      	movs	r1, r2
     c5c:	0018      	movs	r0, r3
     c5e:	4b07      	ldr	r3, [pc, #28]	; (c7c <usart_serial_getchar+0x3c>)
     c60:	4798      	blx	r3
     c62:	1e03      	subs	r3, r0, #0
     c64:	d1f6      	bne.n	c54 <usart_serial_getchar+0x14>

	*c = temp;
     c66:	230e      	movs	r3, #14
     c68:	18fb      	adds	r3, r7, r3
     c6a:	881b      	ldrh	r3, [r3, #0]
     c6c:	b2da      	uxtb	r2, r3
     c6e:	683b      	ldr	r3, [r7, #0]
     c70:	701a      	strb	r2, [r3, #0]
}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	46bd      	mov	sp, r7
     c76:	b004      	add	sp, #16
     c78:	bd80      	pop	{r7, pc}
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	0000553d 	.word	0x0000553d

00000c80 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     c80:	b580      	push	{r7, lr}
     c82:	b084      	sub	sp, #16
     c84:	af00      	add	r7, sp, #0
     c86:	60f8      	str	r0, [r7, #12]
     c88:	60b9      	str	r1, [r7, #8]
     c8a:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     c8c:	4b0d      	ldr	r3, [pc, #52]	; (cc4 <stdio_serial_init+0x44>)
     c8e:	68fa      	ldr	r2, [r7, #12]
     c90:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     c92:	4b0d      	ldr	r3, [pc, #52]	; (cc8 <stdio_serial_init+0x48>)
     c94:	4a0d      	ldr	r2, [pc, #52]	; (ccc <stdio_serial_init+0x4c>)
     c96:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     c98:	4b0d      	ldr	r3, [pc, #52]	; (cd0 <stdio_serial_init+0x50>)
     c9a:	4a0e      	ldr	r2, [pc, #56]	; (cd4 <stdio_serial_init+0x54>)
     c9c:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     c9e:	4b0e      	ldr	r3, [pc, #56]	; (cd8 <stdio_serial_init+0x58>)
     ca0:	681b      	ldr	r3, [r3, #0]
     ca2:	689b      	ldr	r3, [r3, #8]
     ca4:	2100      	movs	r1, #0
     ca6:	0018      	movs	r0, r3
     ca8:	4b0c      	ldr	r3, [pc, #48]	; (cdc <stdio_serial_init+0x5c>)
     caa:	4798      	blx	r3
	setbuf(stdin, NULL);
     cac:	4b0a      	ldr	r3, [pc, #40]	; (cd8 <stdio_serial_init+0x58>)
     cae:	681b      	ldr	r3, [r3, #0]
     cb0:	685b      	ldr	r3, [r3, #4]
     cb2:	2100      	movs	r1, #0
     cb4:	0018      	movs	r0, r3
     cb6:	4b09      	ldr	r3, [pc, #36]	; (cdc <stdio_serial_init+0x5c>)
     cb8:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	46bd      	mov	sp, r7
     cbe:	b004      	add	sp, #16
     cc0:	bd80      	pop	{r7, pc}
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	200009f8 	.word	0x200009f8
     cc8:	200009f4 	.word	0x200009f4
     ccc:	00000c0d 	.word	0x00000c0d
     cd0:	200009f0 	.word	0x200009f0
     cd4:	00000c41 	.word	0x00000c41
     cd8:	20000030 	.word	0x20000030
     cdc:	0000b701 	.word	0x0000b701

00000ce0 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @details		Initializes the UART - sets up the SERCOM to act as UART and registers the callbacks for
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 *****************************************************************************/
void InitializeSerialConsole() {
     ce0:	b580      	push	{r7, lr}
     ce2:	af00      	add	r7, sp, #0

    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *) rxCharacterBuffer, RX_BUFFER_SIZE);
     ce4:	2380      	movs	r3, #128	; 0x80
     ce6:	00da      	lsls	r2, r3, #3
     ce8:	4b0f      	ldr	r3, [pc, #60]	; (d28 <InitializeSerialConsole+0x48>)
     cea:	0011      	movs	r1, r2
     cec:	0018      	movs	r0, r3
     cee:	4b0f      	ldr	r3, [pc, #60]	; (d2c <InitializeSerialConsole+0x4c>)
     cf0:	4798      	blx	r3
     cf2:	0002      	movs	r2, r0
     cf4:	4b0e      	ldr	r3, [pc, #56]	; (d30 <InitializeSerialConsole+0x50>)
     cf6:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *) txCharacterBuffer, TX_BUFFER_SIZE);
     cf8:	2380      	movs	r3, #128	; 0x80
     cfa:	00da      	lsls	r2, r3, #3
     cfc:	4b0d      	ldr	r3, [pc, #52]	; (d34 <InitializeSerialConsole+0x54>)
     cfe:	0011      	movs	r1, r2
     d00:	0018      	movs	r0, r3
     d02:	4b0a      	ldr	r3, [pc, #40]	; (d2c <InitializeSerialConsole+0x4c>)
     d04:	4798      	blx	r3
     d06:	0002      	movs	r2, r0
     d08:	4b0b      	ldr	r3, [pc, #44]	; (d38 <InitializeSerialConsole+0x58>)
     d0a:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
     d0c:	4b0b      	ldr	r3, [pc, #44]	; (d3c <InitializeSerialConsole+0x5c>)
     d0e:	4798      	blx	r3
    configure_usart_callbacks();
     d10:	4b0b      	ldr	r3, [pc, #44]	; (d40 <InitializeSerialConsole+0x60>)
     d12:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *) &latestRx, 1);   // Kicks off constant reading of characters
     d14:	490b      	ldr	r1, [pc, #44]	; (d44 <InitializeSerialConsole+0x64>)
     d16:	4b0c      	ldr	r3, [pc, #48]	; (d48 <InitializeSerialConsole+0x68>)
     d18:	2201      	movs	r2, #1
     d1a:	0018      	movs	r0, r3
     d1c:	4b0b      	ldr	r3, [pc, #44]	; (d4c <InitializeSerialConsole+0x6c>)
     d1e:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
     d20:	46c0      	nop			; (mov r8, r8)
     d22:	46bd      	mov	sp, r7
     d24:	bd80      	pop	{r7, pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	200005c8 	.word	0x200005c8
     d2c:	000008c1 	.word	0x000008c1
     d30:	200001c0 	.word	0x200001c0
     d34:	200001c8 	.word	0x200001c8
     d38:	200009cc 	.word	0x200009cc
     d3c:	00000e15 	.word	0x00000e15
     d40:	00000e9d 	.word	0x00000e9d
     d44:	200001c4 	.word	0x200001c4
     d48:	2000018c 	.word	0x2000018c
     d4c:	000057f9 	.word	0x000057f9

00000d50 <DeinitializeSerialConsole>:

/**
 * @fn			void DeinitializeSerialConsole(void)
 *****************************************************************************/
void DeinitializeSerialConsole() { usart_disable(&usart_instance); }
     d50:	b580      	push	{r7, lr}
     d52:	af00      	add	r7, sp, #0
     d54:	4b03      	ldr	r3, [pc, #12]	; (d64 <DeinitializeSerialConsole+0x14>)
     d56:	0018      	movs	r0, r3
     d58:	4b03      	ldr	r3, [pc, #12]	; (d68 <DeinitializeSerialConsole+0x18>)
     d5a:	4798      	blx	r3
     d5c:	46c0      	nop			; (mov r8, r8)
     d5e:	46bd      	mov	sp, r7
     d60:	bd80      	pop	{r7, pc}
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	2000018c 	.word	0x2000018c
     d68:	00000b89 	.word	0x00000b89

00000d6c <SerialConsoleWriteString>:
 * @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the
 *				text send to the uart
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
 * @note		Use to send a string of characters to the user via UART
 *****************************************************************************/
void SerialConsoleWriteString(char *string) {
     d6c:	b580      	push	{r7, lr}
     d6e:	b084      	sub	sp, #16
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
    if (string != NULL) {
     d74:	687b      	ldr	r3, [r7, #4]
     d76:	2b00      	cmp	r3, #0
     d78:	d02a      	beq.n	dd0 <SerialConsoleWriteString+0x64>
        for (size_t iter = 0; iter < strlen(string); iter++) {
     d7a:	2300      	movs	r3, #0
     d7c:	60fb      	str	r3, [r7, #12]
     d7e:	e00b      	b.n	d98 <SerialConsoleWriteString+0x2c>
            circular_buf_put(cbufTx, string[iter]);
     d80:	4b15      	ldr	r3, [pc, #84]	; (dd8 <SerialConsoleWriteString+0x6c>)
     d82:	6818      	ldr	r0, [r3, #0]
     d84:	687a      	ldr	r2, [r7, #4]
     d86:	68fb      	ldr	r3, [r7, #12]
     d88:	18d3      	adds	r3, r2, r3
     d8a:	781b      	ldrb	r3, [r3, #0]
     d8c:	0019      	movs	r1, r3
     d8e:	4b13      	ldr	r3, [pc, #76]	; (ddc <SerialConsoleWriteString+0x70>)
     d90:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
     d92:	68fb      	ldr	r3, [r7, #12]
     d94:	3301      	adds	r3, #1
     d96:	60fb      	str	r3, [r7, #12]
     d98:	687b      	ldr	r3, [r7, #4]
     d9a:	0018      	movs	r0, r3
     d9c:	4b10      	ldr	r3, [pc, #64]	; (de0 <SerialConsoleWriteString+0x74>)
     d9e:	4798      	blx	r3
     da0:	0002      	movs	r2, r0
     da2:	68fb      	ldr	r3, [r7, #12]
     da4:	429a      	cmp	r2, r3
     da6:	d8eb      	bhi.n	d80 <SerialConsoleWriteString+0x14>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
     da8:	4b0e      	ldr	r3, [pc, #56]	; (de4 <SerialConsoleWriteString+0x78>)
     daa:	2101      	movs	r1, #1
     dac:	0018      	movs	r0, r3
     dae:	4b0e      	ldr	r3, [pc, #56]	; (de8 <SerialConsoleWriteString+0x7c>)
     db0:	4798      	blx	r3
     db2:	1e03      	subs	r3, r0, #0
     db4:	d10c      	bne.n	dd0 <SerialConsoleWriteString+0x64>
            circular_buf_get(cbufTx, (uint8_t *) &latestTx);   // Perform only if the SERCOM TX is free (not busy)
     db6:	4b08      	ldr	r3, [pc, #32]	; (dd8 <SerialConsoleWriteString+0x6c>)
     db8:	681b      	ldr	r3, [r3, #0]
     dba:	4a0c      	ldr	r2, [pc, #48]	; (dec <SerialConsoleWriteString+0x80>)
     dbc:	0011      	movs	r1, r2
     dbe:	0018      	movs	r0, r3
     dc0:	4b0b      	ldr	r3, [pc, #44]	; (df0 <SerialConsoleWriteString+0x84>)
     dc2:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
     dc4:	4909      	ldr	r1, [pc, #36]	; (dec <SerialConsoleWriteString+0x80>)
     dc6:	4b07      	ldr	r3, [pc, #28]	; (de4 <SerialConsoleWriteString+0x78>)
     dc8:	2201      	movs	r2, #1
     dca:	0018      	movs	r0, r3
     dcc:	4b09      	ldr	r3, [pc, #36]	; (df4 <SerialConsoleWriteString+0x88>)
     dce:	4798      	blx	r3
        }
    }
}
     dd0:	46c0      	nop			; (mov r8, r8)
     dd2:	46bd      	mov	sp, r7
     dd4:	b004      	add	sp, #16
     dd6:	bd80      	pop	{r7, pc}
     dd8:	200009cc 	.word	0x200009cc
     ddc:	00000921 	.word	0x00000921
     de0:	0000b86d 	.word	0x0000b86d
     de4:	2000018c 	.word	0x2000018c
     de8:	00005841 	.word	0x00005841
     dec:	200009c8 	.word	0x200009c8
     df0:	00000955 	.word	0x00000955
     df4:	000057b1 	.word	0x000057b1

00000df8 <LogMessage>:
/**
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 *****************************************************************************/
void LogMessage(enum eDebugLogLevels level, const char *format, ...){};
     df8:	b40e      	push	{r1, r2, r3}
     dfa:	b580      	push	{r7, lr}
     dfc:	b083      	sub	sp, #12
     dfe:	af00      	add	r7, sp, #0
     e00:	0002      	movs	r2, r0
     e02:	1dfb      	adds	r3, r7, #7
     e04:	701a      	strb	r2, [r3, #0]
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	46bd      	mov	sp, r7
     e0a:	b003      	add	sp, #12
     e0c:	bc80      	pop	{r7}
     e0e:	bc08      	pop	{r3}
     e10:	b003      	add	sp, #12
     e12:	4718      	bx	r3

00000e14 <configure_usart>:
/**
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 *****************************************************************************/
static void configure_usart(void) {
     e14:	b580      	push	{r7, lr}
     e16:	b090      	sub	sp, #64	; 0x40
     e18:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
     e1a:	003b      	movs	r3, r7
     e1c:	0018      	movs	r0, r3
     e1e:	4b17      	ldr	r3, [pc, #92]	; (e7c <configure_usart+0x68>)
     e20:	4798      	blx	r3

    config_usart.baudrate = 115200;
     e22:	003b      	movs	r3, r7
     e24:	22e1      	movs	r2, #225	; 0xe1
     e26:	0252      	lsls	r2, r2, #9
     e28:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     e2a:	003b      	movs	r3, r7
     e2c:	22c4      	movs	r2, #196	; 0xc4
     e2e:	0392      	lsls	r2, r2, #14
     e30:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     e32:	003b      	movs	r3, r7
     e34:	2201      	movs	r2, #1
     e36:	4252      	negs	r2, r2
     e38:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     e3a:	003b      	movs	r3, r7
     e3c:	2201      	movs	r2, #1
     e3e:	4252      	negs	r2, r2
     e40:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     e42:	003b      	movs	r3, r7
     e44:	4a0e      	ldr	r2, [pc, #56]	; (e80 <configure_usart+0x6c>)
     e46:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     e48:	003b      	movs	r3, r7
     e4a:	4a0e      	ldr	r2, [pc, #56]	; (e84 <configure_usart+0x70>)
     e4c:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	003a      	movs	r2, r7
     e52:	490d      	ldr	r1, [pc, #52]	; (e88 <configure_usart+0x74>)
     e54:	4b0d      	ldr	r3, [pc, #52]	; (e8c <configure_usart+0x78>)
     e56:	0018      	movs	r0, r3
     e58:	4b0d      	ldr	r3, [pc, #52]	; (e90 <configure_usart+0x7c>)
     e5a:	4798      	blx	r3
     e5c:	1e03      	subs	r3, r0, #0
     e5e:	d1f7      	bne.n	e50 <configure_usart+0x3c>
    }
    stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
     e60:	003a      	movs	r2, r7
     e62:	4909      	ldr	r1, [pc, #36]	; (e88 <configure_usart+0x74>)
     e64:	4b09      	ldr	r3, [pc, #36]	; (e8c <configure_usart+0x78>)
     e66:	0018      	movs	r0, r3
     e68:	4b0a      	ldr	r3, [pc, #40]	; (e94 <configure_usart+0x80>)
     e6a:	4798      	blx	r3
    usart_enable(&usart_instance);
     e6c:	4b07      	ldr	r3, [pc, #28]	; (e8c <configure_usart+0x78>)
     e6e:	0018      	movs	r0, r3
     e70:	4b09      	ldr	r3, [pc, #36]	; (e98 <configure_usart+0x84>)
     e72:	4798      	blx	r3
}
     e74:	46c0      	nop			; (mov r8, r8)
     e76:	46bd      	mov	sp, r7
     e78:	b010      	add	sp, #64	; 0x40
     e7a:	bd80      	pop	{r7, pc}
     e7c:	00000a81 	.word	0x00000a81
     e80:	002a0003 	.word	0x002a0003
     e84:	002b0003 	.word	0x002b0003
     e88:	42001800 	.word	0x42001800
     e8c:	2000018c 	.word	0x2000018c
     e90:	00005265 	.word	0x00005265
     e94:	00000c81 	.word	0x00000c81
     e98:	00000b41 	.word	0x00000b41

00000e9c <configure_usart_callbacks>:
/**
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 *****************************************************************************/
static void configure_usart_callbacks(void) {
     e9c:	b580      	push	{r7, lr}
     e9e:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
     ea0:	490c      	ldr	r1, [pc, #48]	; (ed4 <configure_usart_callbacks+0x38>)
     ea2:	4b0d      	ldr	r3, [pc, #52]	; (ed8 <configure_usart_callbacks+0x3c>)
     ea4:	2200      	movs	r2, #0
     ea6:	0018      	movs	r0, r3
     ea8:	4b0c      	ldr	r3, [pc, #48]	; (edc <configure_usart_callbacks+0x40>)
     eaa:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     eac:	490c      	ldr	r1, [pc, #48]	; (ee0 <configure_usart_callbacks+0x44>)
     eae:	4b0a      	ldr	r3, [pc, #40]	; (ed8 <configure_usart_callbacks+0x3c>)
     eb0:	2201      	movs	r2, #1
     eb2:	0018      	movs	r0, r3
     eb4:	4b09      	ldr	r3, [pc, #36]	; (edc <configure_usart_callbacks+0x40>)
     eb6:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
     eb8:	4b07      	ldr	r3, [pc, #28]	; (ed8 <configure_usart_callbacks+0x3c>)
     eba:	2100      	movs	r1, #0
     ebc:	0018      	movs	r0, r3
     ebe:	4b09      	ldr	r3, [pc, #36]	; (ee4 <configure_usart_callbacks+0x48>)
     ec0:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
     ec2:	4b05      	ldr	r3, [pc, #20]	; (ed8 <configure_usart_callbacks+0x3c>)
     ec4:	2101      	movs	r1, #1
     ec6:	0018      	movs	r0, r3
     ec8:	4b06      	ldr	r3, [pc, #24]	; (ee4 <configure_usart_callbacks+0x48>)
     eca:	4798      	blx	r3
}
     ecc:	46c0      	nop			; (mov r8, r8)
     ece:	46bd      	mov	sp, r7
     ed0:	bd80      	pop	{r7, pc}
     ed2:	46c0      	nop			; (mov r8, r8)
     ed4:	00000ef9 	.word	0x00000ef9
     ed8:	2000018c 	.word	0x2000018c
     edc:	00005769 	.word	0x00005769
     ee0:	00000ee9 	.word	0x00000ee9
     ee4:	00000bd5 	.word	0x00000bd5

00000ee8 <usart_read_callback>:
/**
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 *****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module) {}
     ee8:	b580      	push	{r7, lr}
     eea:	b082      	sub	sp, #8
     eec:	af00      	add	r7, sp, #0
     eee:	6078      	str	r0, [r7, #4]
     ef0:	46c0      	nop			; (mov r8, r8)
     ef2:	46bd      	mov	sp, r7
     ef4:	b002      	add	sp, #8
     ef6:	bd80      	pop	{r7, pc}

00000ef8 <usart_write_callback>:
/**
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 *****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module) {
     ef8:	b580      	push	{r7, lr}
     efa:	b082      	sub	sp, #8
     efc:	af00      	add	r7, sp, #0
     efe:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *) &latestTx) != -1)   // Only continue if there are more characters to send
     f00:	4b09      	ldr	r3, [pc, #36]	; (f28 <usart_write_callback+0x30>)
     f02:	681b      	ldr	r3, [r3, #0]
     f04:	4a09      	ldr	r2, [pc, #36]	; (f2c <usart_write_callback+0x34>)
     f06:	0011      	movs	r1, r2
     f08:	0018      	movs	r0, r3
     f0a:	4b09      	ldr	r3, [pc, #36]	; (f30 <usart_write_callback+0x38>)
     f0c:	4798      	blx	r3
     f0e:	0003      	movs	r3, r0
     f10:	3301      	adds	r3, #1
     f12:	d005      	beq.n	f20 <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
     f14:	4905      	ldr	r1, [pc, #20]	; (f2c <usart_write_callback+0x34>)
     f16:	4b07      	ldr	r3, [pc, #28]	; (f34 <usart_write_callback+0x3c>)
     f18:	2201      	movs	r2, #1
     f1a:	0018      	movs	r0, r3
     f1c:	4b06      	ldr	r3, [pc, #24]	; (f38 <usart_write_callback+0x40>)
     f1e:	4798      	blx	r3
    }
}
     f20:	46c0      	nop			; (mov r8, r8)
     f22:	46bd      	mov	sp, r7
     f24:	b002      	add	sp, #8
     f26:	bd80      	pop	{r7, pc}
     f28:	200009cc 	.word	0x200009cc
     f2c:	200009c8 	.word	0x200009c8
     f30:	00000955 	.word	0x00000955
     f34:	2000018c 	.word	0x2000018c
     f38:	000057b1 	.word	0x000057b1

00000f3c <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
     f3c:	b590      	push	{r4, r7, lr}
     f3e:	b087      	sub	sp, #28
     f40:	af00      	add	r7, sp, #0
     f42:	60f8      	str	r0, [r7, #12]
     f44:	000c      	movs	r4, r1
     f46:	0010      	movs	r0, r2
     f48:	0019      	movs	r1, r3
     f4a:	230a      	movs	r3, #10
     f4c:	18fb      	adds	r3, r7, r3
     f4e:	1c22      	adds	r2, r4, #0
     f50:	801a      	strh	r2, [r3, #0]
     f52:	2308      	movs	r3, #8
     f54:	18fb      	adds	r3, r7, r3
     f56:	1c02      	adds	r2, r0, #0
     f58:	801a      	strh	r2, [r3, #0]
     f5a:	1dfb      	adds	r3, r7, #7
     f5c:	1c0a      	adds	r2, r1, #0
     f5e:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     f60:	230a      	movs	r3, #10
     f62:	18fb      	adds	r3, r7, r3
     f64:	881a      	ldrh	r2, [r3, #0]
     f66:	2308      	movs	r3, #8
     f68:	18fb      	adds	r3, r7, r3
     f6a:	881b      	ldrh	r3, [r3, #0]
     f6c:	1ad3      	subs	r3, r2, r3
     f6e:	3307      	adds	r3, #7
     f70:	2b00      	cmp	r3, #0
     f72:	da00      	bge.n	f76 <SDMMC_UNSTUFF_BITS+0x3a>
     f74:	3307      	adds	r3, #7
     f76:	10db      	asrs	r3, r3, #3
     f78:	3b01      	subs	r3, #1
     f7a:	68fa      	ldr	r2, [r7, #12]
     f7c:	18d3      	adds	r3, r2, r3
     f7e:	781b      	ldrb	r3, [r3, #0]
     f80:	0019      	movs	r1, r3
     f82:	2308      	movs	r3, #8
     f84:	18fb      	adds	r3, r7, r3
     f86:	881b      	ldrh	r3, [r3, #0]
     f88:	2207      	movs	r2, #7
     f8a:	4013      	ands	r3, r2
     f8c:	4119      	asrs	r1, r3
     f8e:	000b      	movs	r3, r1
     f90:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
     f92:	2308      	movs	r3, #8
     f94:	18fb      	adds	r3, r7, r3
     f96:	881b      	ldrh	r3, [r3, #0]
     f98:	2207      	movs	r2, #7
     f9a:	401a      	ands	r2, r3
     f9c:	1dfb      	adds	r3, r7, #7
     f9e:	781b      	ldrb	r3, [r3, #0]
     fa0:	18d3      	adds	r3, r2, r3
     fa2:	2b08      	cmp	r3, #8
     fa4:	dd1c      	ble.n	fe0 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     fa6:	230a      	movs	r3, #10
     fa8:	18fb      	adds	r3, r7, r3
     faa:	881a      	ldrh	r2, [r3, #0]
     fac:	2308      	movs	r3, #8
     fae:	18fb      	adds	r3, r7, r3
     fb0:	881b      	ldrh	r3, [r3, #0]
     fb2:	1ad3      	subs	r3, r2, r3
     fb4:	3307      	adds	r3, #7
     fb6:	2b00      	cmp	r3, #0
     fb8:	da00      	bge.n	fbc <SDMMC_UNSTUFF_BITS+0x80>
     fba:	3307      	adds	r3, #7
     fbc:	10db      	asrs	r3, r3, #3
     fbe:	3b02      	subs	r3, #2
     fc0:	68fa      	ldr	r2, [r7, #12]
     fc2:	18d3      	adds	r3, r2, r3
     fc4:	781b      	ldrb	r3, [r3, #0]
     fc6:	0019      	movs	r1, r3
     fc8:	2308      	movs	r3, #8
     fca:	18fb      	adds	r3, r7, r3
     fcc:	881b      	ldrh	r3, [r3, #0]
     fce:	2207      	movs	r2, #7
     fd0:	4013      	ands	r3, r2
     fd2:	2208      	movs	r2, #8
     fd4:	1ad3      	subs	r3, r2, r3
     fd6:	4099      	lsls	r1, r3
     fd8:	000b      	movs	r3, r1
     fda:	697a      	ldr	r2, [r7, #20]
     fdc:	4313      	orrs	r3, r2
     fde:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
     fe0:	2308      	movs	r3, #8
     fe2:	18fb      	adds	r3, r7, r3
     fe4:	881b      	ldrh	r3, [r3, #0]
     fe6:	2207      	movs	r2, #7
     fe8:	401a      	ands	r2, r3
     fea:	1dfb      	adds	r3, r7, #7
     fec:	781b      	ldrb	r3, [r3, #0]
     fee:	18d3      	adds	r3, r2, r3
     ff0:	2b10      	cmp	r3, #16
     ff2:	dd1c      	ble.n	102e <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     ff4:	230a      	movs	r3, #10
     ff6:	18fb      	adds	r3, r7, r3
     ff8:	881a      	ldrh	r2, [r3, #0]
     ffa:	2308      	movs	r3, #8
     ffc:	18fb      	adds	r3, r7, r3
     ffe:	881b      	ldrh	r3, [r3, #0]
    1000:	1ad3      	subs	r3, r2, r3
    1002:	3307      	adds	r3, #7
    1004:	2b00      	cmp	r3, #0
    1006:	da00      	bge.n	100a <SDMMC_UNSTUFF_BITS+0xce>
    1008:	3307      	adds	r3, #7
    100a:	10db      	asrs	r3, r3, #3
    100c:	3b03      	subs	r3, #3
    100e:	68fa      	ldr	r2, [r7, #12]
    1010:	18d3      	adds	r3, r2, r3
    1012:	781b      	ldrb	r3, [r3, #0]
    1014:	0019      	movs	r1, r3
    1016:	2308      	movs	r3, #8
    1018:	18fb      	adds	r3, r7, r3
    101a:	881b      	ldrh	r3, [r3, #0]
    101c:	2207      	movs	r2, #7
    101e:	4013      	ands	r3, r2
    1020:	2210      	movs	r2, #16
    1022:	1ad3      	subs	r3, r2, r3
    1024:	4099      	lsls	r1, r3
    1026:	000b      	movs	r3, r1
    1028:	697a      	ldr	r2, [r7, #20]
    102a:	4313      	orrs	r3, r2
    102c:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    102e:	2308      	movs	r3, #8
    1030:	18fb      	adds	r3, r7, r3
    1032:	881b      	ldrh	r3, [r3, #0]
    1034:	2207      	movs	r2, #7
    1036:	401a      	ands	r2, r3
    1038:	1dfb      	adds	r3, r7, #7
    103a:	781b      	ldrb	r3, [r3, #0]
    103c:	18d3      	adds	r3, r2, r3
    103e:	2b10      	cmp	r3, #16
    1040:	dd1c      	ble.n	107c <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    1042:	230a      	movs	r3, #10
    1044:	18fb      	adds	r3, r7, r3
    1046:	881a      	ldrh	r2, [r3, #0]
    1048:	2308      	movs	r3, #8
    104a:	18fb      	adds	r3, r7, r3
    104c:	881b      	ldrh	r3, [r3, #0]
    104e:	1ad3      	subs	r3, r2, r3
    1050:	3307      	adds	r3, #7
    1052:	2b00      	cmp	r3, #0
    1054:	da00      	bge.n	1058 <SDMMC_UNSTUFF_BITS+0x11c>
    1056:	3307      	adds	r3, #7
    1058:	10db      	asrs	r3, r3, #3
    105a:	3b03      	subs	r3, #3
    105c:	68fa      	ldr	r2, [r7, #12]
    105e:	18d3      	adds	r3, r2, r3
    1060:	781b      	ldrb	r3, [r3, #0]
    1062:	0019      	movs	r1, r3
    1064:	2308      	movs	r3, #8
    1066:	18fb      	adds	r3, r7, r3
    1068:	881b      	ldrh	r3, [r3, #0]
    106a:	2207      	movs	r2, #7
    106c:	4013      	ands	r3, r2
    106e:	2210      	movs	r2, #16
    1070:	1ad3      	subs	r3, r2, r3
    1072:	4099      	lsls	r1, r3
    1074:	000b      	movs	r3, r1
    1076:	697a      	ldr	r2, [r7, #20]
    1078:	4313      	orrs	r3, r2
    107a:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
    107c:	1dfb      	adds	r3, r7, #7
    107e:	781b      	ldrb	r3, [r3, #0]
    1080:	2201      	movs	r2, #1
    1082:	409a      	lsls	r2, r3
    1084:	0013      	movs	r3, r2
    1086:	1e5a      	subs	r2, r3, #1
    1088:	697b      	ldr	r3, [r7, #20]
    108a:	4013      	ands	r3, r2
    108c:	617b      	str	r3, [r7, #20]
	return value;
    108e:	697b      	ldr	r3, [r7, #20]
}
    1090:	0018      	movs	r0, r3
    1092:	46bd      	mov	sp, r7
    1094:	b007      	add	sp, #28
    1096:	bd90      	pop	{r4, r7, pc}

00001098 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
    1098:	b580      	push	{r7, lr}
    109a:	b082      	sub	sp, #8
    109c:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    109e:	4b23      	ldr	r3, [pc, #140]	; (112c <mmc_spi_op_cond+0x94>)
    10a0:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    10a2:	4b23      	ldr	r3, [pc, #140]	; (1130 <mmc_spi_op_cond+0x98>)
    10a4:	2100      	movs	r1, #0
    10a6:	0018      	movs	r0, r3
    10a8:	4b22      	ldr	r3, [pc, #136]	; (1134 <mmc_spi_op_cond+0x9c>)
    10aa:	4798      	blx	r3
    10ac:	0003      	movs	r3, r0
    10ae:	001a      	movs	r2, r3
    10b0:	2301      	movs	r3, #1
    10b2:	4053      	eors	r3, r2
    10b4:	b2db      	uxtb	r3, r3
    10b6:	2b00      	cmp	r3, #0
    10b8:	d001      	beq.n	10be <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
    10ba:	2300      	movs	r3, #0
    10bc:	e031      	b.n	1122 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
    10be:	4b1e      	ldr	r3, [pc, #120]	; (1138 <mmc_spi_op_cond+0xa0>)
    10c0:	4798      	blx	r3
    10c2:	0003      	movs	r3, r0
    10c4:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
    10c6:	683b      	ldr	r3, [r7, #0]
    10c8:	2201      	movs	r2, #1
    10ca:	4013      	ands	r3, r2
    10cc:	d006      	beq.n	10dc <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
    10ce:	687b      	ldr	r3, [r7, #4]
    10d0:	1e5a      	subs	r2, r3, #1
    10d2:	607a      	str	r2, [r7, #4]
    10d4:	2b00      	cmp	r3, #0
    10d6:	d1e4      	bne.n	10a2 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
    10d8:	2300      	movs	r3, #0
    10da:	e022      	b.n	1122 <mmc_spi_op_cond+0x8a>
			break;
    10dc:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    10de:	4b17      	ldr	r3, [pc, #92]	; (113c <mmc_spi_op_cond+0xa4>)
    10e0:	2100      	movs	r1, #0
    10e2:	0018      	movs	r0, r3
    10e4:	4b13      	ldr	r3, [pc, #76]	; (1134 <mmc_spi_op_cond+0x9c>)
    10e6:	4798      	blx	r3
    10e8:	0003      	movs	r3, r0
    10ea:	001a      	movs	r2, r3
    10ec:	2301      	movs	r3, #1
    10ee:	4053      	eors	r3, r2
    10f0:	b2db      	uxtb	r3, r3
    10f2:	2b00      	cmp	r3, #0
    10f4:	d001      	beq.n	10fa <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    10f6:	2300      	movs	r3, #0
    10f8:	e013      	b.n	1122 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    10fa:	4b0f      	ldr	r3, [pc, #60]	; (1138 <mmc_spi_op_cond+0xa0>)
    10fc:	4798      	blx	r3
    10fe:	0002      	movs	r2, r0
    1100:	23c0      	movs	r3, #192	; 0xc0
    1102:	05db      	lsls	r3, r3, #23
    1104:	401a      	ands	r2, r3
    1106:	2380      	movs	r3, #128	; 0x80
    1108:	05db      	lsls	r3, r3, #23
    110a:	429a      	cmp	r2, r3
    110c:	d108      	bne.n	1120 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
    110e:	4b0c      	ldr	r3, [pc, #48]	; (1140 <mmc_spi_op_cond+0xa8>)
    1110:	681a      	ldr	r2, [r3, #0]
    1112:	4b0b      	ldr	r3, [pc, #44]	; (1140 <mmc_spi_op_cond+0xa8>)
    1114:	681b      	ldr	r3, [r3, #0]
    1116:	7adb      	ldrb	r3, [r3, #11]
    1118:	2108      	movs	r1, #8
    111a:	430b      	orrs	r3, r1
    111c:	b2db      	uxtb	r3, r3
    111e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    1120:	2301      	movs	r3, #1
}
    1122:	0018      	movs	r0, r3
    1124:	46bd      	mov	sp, r7
    1126:	b002      	add	sp, #8
    1128:	bd80      	pop	{r7, pc}
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	00001bee 	.word	0x00001bee
    1130:	00001101 	.word	0x00001101
    1134:	00002b31 	.word	0x00002b31
    1138:	00002d71 	.word	0x00002d71
    113c:	0000053a 	.word	0x0000053a
    1140:	200000e0 	.word	0x200000e0

00001144 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
    1144:	b580      	push	{r7, lr}
    1146:	b086      	sub	sp, #24
    1148:	af00      	add	r7, sp, #0
    114a:	0002      	movs	r2, r0
    114c:	1dfb      	adds	r3, r7, #7
    114e:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    1150:	4b2e      	ldr	r3, [pc, #184]	; (120c <sd_spi_op_cond+0xc8>)
    1152:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    1154:	4b2e      	ldr	r3, [pc, #184]	; (1210 <sd_spi_op_cond+0xcc>)
    1156:	2100      	movs	r1, #0
    1158:	0018      	movs	r0, r3
    115a:	4b2e      	ldr	r3, [pc, #184]	; (1214 <sd_spi_op_cond+0xd0>)
    115c:	4798      	blx	r3
    115e:	0003      	movs	r3, r0
    1160:	001a      	movs	r2, r3
    1162:	2301      	movs	r3, #1
    1164:	4053      	eors	r3, r2
    1166:	b2db      	uxtb	r3, r3
    1168:	2b00      	cmp	r3, #0
    116a:	d001      	beq.n	1170 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
    116c:	2300      	movs	r3, #0
    116e:	e048      	b.n	1202 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
    1170:	2300      	movs	r3, #0
    1172:	617b      	str	r3, [r7, #20]
		if (v2) {
    1174:	1dfb      	adds	r3, r7, #7
    1176:	781b      	ldrb	r3, [r3, #0]
    1178:	2b00      	cmp	r3, #0
    117a:	d004      	beq.n	1186 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
    117c:	697b      	ldr	r3, [r7, #20]
    117e:	2280      	movs	r2, #128	; 0x80
    1180:	05d2      	lsls	r2, r2, #23
    1182:	4313      	orrs	r3, r2
    1184:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    1186:	697b      	ldr	r3, [r7, #20]
    1188:	4a23      	ldr	r2, [pc, #140]	; (1218 <sd_spi_op_cond+0xd4>)
    118a:	0019      	movs	r1, r3
    118c:	0010      	movs	r0, r2
    118e:	4b21      	ldr	r3, [pc, #132]	; (1214 <sd_spi_op_cond+0xd0>)
    1190:	4798      	blx	r3
    1192:	0003      	movs	r3, r0
    1194:	001a      	movs	r2, r3
    1196:	2301      	movs	r3, #1
    1198:	4053      	eors	r3, r2
    119a:	b2db      	uxtb	r3, r3
    119c:	2b00      	cmp	r3, #0
    119e:	d001      	beq.n	11a4 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
    11a0:	2300      	movs	r3, #0
    11a2:	e02e      	b.n	1202 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
    11a4:	4b1d      	ldr	r3, [pc, #116]	; (121c <sd_spi_op_cond+0xd8>)
    11a6:	4798      	blx	r3
    11a8:	0003      	movs	r3, r0
    11aa:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
    11ac:	68fb      	ldr	r3, [r7, #12]
    11ae:	2201      	movs	r2, #1
    11b0:	4013      	ands	r3, r2
    11b2:	d006      	beq.n	11c2 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
    11b4:	693b      	ldr	r3, [r7, #16]
    11b6:	1e5a      	subs	r2, r3, #1
    11b8:	613a      	str	r2, [r7, #16]
    11ba:	2b00      	cmp	r3, #0
    11bc:	d1ca      	bne.n	1154 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
    11be:	2300      	movs	r3, #0
    11c0:	e01f      	b.n	1202 <sd_spi_op_cond+0xbe>
			break;
    11c2:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    11c4:	4b16      	ldr	r3, [pc, #88]	; (1220 <sd_spi_op_cond+0xdc>)
    11c6:	2100      	movs	r1, #0
    11c8:	0018      	movs	r0, r3
    11ca:	4b12      	ldr	r3, [pc, #72]	; (1214 <sd_spi_op_cond+0xd0>)
    11cc:	4798      	blx	r3
    11ce:	0003      	movs	r3, r0
    11d0:	001a      	movs	r2, r3
    11d2:	2301      	movs	r3, #1
    11d4:	4053      	eors	r3, r2
    11d6:	b2db      	uxtb	r3, r3
    11d8:	2b00      	cmp	r3, #0
    11da:	d001      	beq.n	11e0 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    11dc:	2300      	movs	r3, #0
    11de:	e010      	b.n	1202 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
    11e0:	4b0e      	ldr	r3, [pc, #56]	; (121c <sd_spi_op_cond+0xd8>)
    11e2:	4798      	blx	r3
    11e4:	0002      	movs	r2, r0
    11e6:	2380      	movs	r3, #128	; 0x80
    11e8:	05db      	lsls	r3, r3, #23
    11ea:	4013      	ands	r3, r2
    11ec:	d008      	beq.n	1200 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
    11ee:	4b0d      	ldr	r3, [pc, #52]	; (1224 <sd_spi_op_cond+0xe0>)
    11f0:	681a      	ldr	r2, [r3, #0]
    11f2:	4b0c      	ldr	r3, [pc, #48]	; (1224 <sd_spi_op_cond+0xe0>)
    11f4:	681b      	ldr	r3, [r3, #0]
    11f6:	7adb      	ldrb	r3, [r3, #11]
    11f8:	2108      	movs	r1, #8
    11fa:	430b      	orrs	r3, r1
    11fc:	b2db      	uxtb	r3, r3
    11fe:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    1200:	2301      	movs	r3, #1
}
    1202:	0018      	movs	r0, r3
    1204:	46bd      	mov	sp, r7
    1206:	b006      	add	sp, #24
    1208:	bd80      	pop	{r7, pc}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	00001bee 	.word	0x00001bee
    1210:	00001137 	.word	0x00001137
    1214:	00002b31 	.word	0x00002b31
    1218:	00001129 	.word	0x00001129
    121c:	00002d71 	.word	0x00002d71
    1220:	0000053a 	.word	0x0000053a
    1224:	200000e0 	.word	0x200000e0

00001228 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    1228:	b580      	push	{r7, lr}
    122a:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    122c:	2301      	movs	r3, #1
}
    122e:	0018      	movs	r0, r3
    1230:	46bd      	mov	sp, r7
    1232:	bd80      	pop	{r7, pc}

00001234 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    1234:	b580      	push	{r7, lr}
    1236:	b084      	sub	sp, #16
    1238:	af00      	add	r7, sp, #0
    123a:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    123c:	687b      	ldr	r3, [r7, #4]
    123e:	2200      	movs	r2, #0
    1240:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    1242:	23d5      	movs	r3, #213	; 0xd5
    1244:	005b      	lsls	r3, r3, #1
    1246:	4a14      	ldr	r2, [pc, #80]	; (1298 <sd_cmd8+0x64>)
    1248:	0019      	movs	r1, r3
    124a:	0010      	movs	r0, r2
    124c:	4b13      	ldr	r3, [pc, #76]	; (129c <sd_cmd8+0x68>)
    124e:	4798      	blx	r3
    1250:	0003      	movs	r3, r0
    1252:	001a      	movs	r2, r3
    1254:	2301      	movs	r3, #1
    1256:	4053      	eors	r3, r2
    1258:	b2db      	uxtb	r3, r3
    125a:	2b00      	cmp	r3, #0
    125c:	d001      	beq.n	1262 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    125e:	2301      	movs	r3, #1
    1260:	e015      	b.n	128e <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    1262:	4b0f      	ldr	r3, [pc, #60]	; (12a0 <sd_cmd8+0x6c>)
    1264:	4798      	blx	r3
    1266:	0003      	movs	r3, r0
    1268:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    126a:	68fb      	ldr	r3, [r7, #12]
    126c:	3301      	adds	r3, #1
    126e:	d101      	bne.n	1274 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    1270:	2301      	movs	r3, #1
    1272:	e00c      	b.n	128e <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    1274:	68fb      	ldr	r3, [r7, #12]
    1276:	051b      	lsls	r3, r3, #20
    1278:	0d1a      	lsrs	r2, r3, #20
    127a:	23d5      	movs	r3, #213	; 0xd5
    127c:	005b      	lsls	r3, r3, #1
    127e:	429a      	cmp	r2, r3
    1280:	d001      	beq.n	1286 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    1282:	2300      	movs	r3, #0
    1284:	e003      	b.n	128e <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    1286:	687b      	ldr	r3, [r7, #4]
    1288:	2201      	movs	r2, #1
    128a:	701a      	strb	r2, [r3, #0]
	return true;
    128c:	2301      	movs	r3, #1
}
    128e:	0018      	movs	r0, r3
    1290:	46bd      	mov	sp, r7
    1292:	b004      	add	sp, #16
    1294:	bd80      	pop	{r7, pc}
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	00005508 	.word	0x00005508
    129c:	00002b31 	.word	0x00002b31
    12a0:	00002d71 	.word	0x00002d71

000012a4 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    12a4:	b590      	push	{r4, r7, lr}
    12a6:	b089      	sub	sp, #36	; 0x24
    12a8:	af02      	add	r7, sp, #8
    12aa:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    12ac:	2380      	movs	r3, #128	; 0x80
    12ae:	009a      	lsls	r2, r3, #2
    12b0:	4841      	ldr	r0, [pc, #260]	; (13b8 <mmc_cmd8+0x114>)
    12b2:	2300      	movs	r3, #0
    12b4:	9300      	str	r3, [sp, #0]
    12b6:	2301      	movs	r3, #1
    12b8:	2100      	movs	r1, #0
    12ba:	4c40      	ldr	r4, [pc, #256]	; (13bc <mmc_cmd8+0x118>)
    12bc:	47a0      	blx	r4
    12be:	0003      	movs	r3, r0
    12c0:	001a      	movs	r2, r3
    12c2:	2301      	movs	r3, #1
    12c4:	4053      	eors	r3, r2
    12c6:	b2db      	uxtb	r3, r3
    12c8:	2b00      	cmp	r3, #0
    12ca:	d001      	beq.n	12d0 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    12cc:	2300      	movs	r3, #0
    12ce:	e06e      	b.n	13ae <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    12d0:	2316      	movs	r3, #22
    12d2:	18fb      	adds	r3, r7, r3
    12d4:	2200      	movs	r2, #0
    12d6:	801a      	strh	r2, [r3, #0]
    12d8:	e014      	b.n	1304 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    12da:	2310      	movs	r3, #16
    12dc:	18fb      	adds	r3, r7, r3
    12de:	0018      	movs	r0, r3
    12e0:	4b37      	ldr	r3, [pc, #220]	; (13c0 <mmc_cmd8+0x11c>)
    12e2:	4798      	blx	r3
    12e4:	0003      	movs	r3, r0
    12e6:	001a      	movs	r2, r3
    12e8:	2301      	movs	r3, #1
    12ea:	4053      	eors	r3, r2
    12ec:	b2db      	uxtb	r3, r3
    12ee:	2b00      	cmp	r3, #0
    12f0:	d001      	beq.n	12f6 <mmc_cmd8+0x52>
			return false;
    12f2:	2300      	movs	r3, #0
    12f4:	e05b      	b.n	13ae <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    12f6:	2316      	movs	r3, #22
    12f8:	18fb      	adds	r3, r7, r3
    12fa:	881a      	ldrh	r2, [r3, #0]
    12fc:	2316      	movs	r3, #22
    12fe:	18fb      	adds	r3, r7, r3
    1300:	3201      	adds	r2, #1
    1302:	801a      	strh	r2, [r3, #0]
    1304:	2316      	movs	r3, #22
    1306:	18fb      	adds	r3, r7, r3
    1308:	881b      	ldrh	r3, [r3, #0]
    130a:	2b31      	cmp	r3, #49	; 0x31
    130c:	d9e5      	bls.n	12da <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    130e:	693b      	ldr	r3, [r7, #16]
    1310:	b2db      	uxtb	r3, r3
    1312:	2202      	movs	r2, #2
    1314:	4013      	ands	r3, r2
    1316:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    131c:	4b29      	ldr	r3, [pc, #164]	; (13c4 <mmc_cmd8+0x120>)
    131e:	681b      	ldr	r3, [r3, #0]
    1320:	330e      	adds	r3, #14
    1322:	0018      	movs	r0, r3
    1324:	230c      	movs	r3, #12
    1326:	223e      	movs	r2, #62	; 0x3e
    1328:	2180      	movs	r1, #128	; 0x80
    132a:	4c27      	ldr	r4, [pc, #156]	; (13c8 <mmc_cmd8+0x124>)
    132c:	47a0      	blx	r4
    132e:	0002      	movs	r2, r0
    1330:	4b26      	ldr	r3, [pc, #152]	; (13cc <mmc_cmd8+0x128>)
    1332:	429a      	cmp	r2, r3
    1334:	d135      	bne.n	13a2 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    1336:	e014      	b.n	1362 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    1338:	230c      	movs	r3, #12
    133a:	18fb      	adds	r3, r7, r3
    133c:	0018      	movs	r0, r3
    133e:	4b20      	ldr	r3, [pc, #128]	; (13c0 <mmc_cmd8+0x11c>)
    1340:	4798      	blx	r3
    1342:	0003      	movs	r3, r0
    1344:	001a      	movs	r2, r3
    1346:	2301      	movs	r3, #1
    1348:	4053      	eors	r3, r2
    134a:	b2db      	uxtb	r3, r3
    134c:	2b00      	cmp	r3, #0
    134e:	d001      	beq.n	1354 <mmc_cmd8+0xb0>
				return false;
    1350:	2300      	movs	r3, #0
    1352:	e02c      	b.n	13ae <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    1354:	2316      	movs	r3, #22
    1356:	18fb      	adds	r3, r7, r3
    1358:	881a      	ldrh	r2, [r3, #0]
    135a:	2316      	movs	r3, #22
    135c:	18fb      	adds	r3, r7, r3
    135e:	3201      	adds	r2, #1
    1360:	801a      	strh	r2, [r3, #0]
    1362:	2316      	movs	r3, #22
    1364:	18fb      	adds	r3, r7, r3
    1366:	881b      	ldrh	r3, [r3, #0]
    1368:	2b35      	cmp	r3, #53	; 0x35
    136a:	d9e5      	bls.n	1338 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    136c:	4b15      	ldr	r3, [pc, #84]	; (13c4 <mmc_cmd8+0x120>)
    136e:	681b      	ldr	r3, [r3, #0]
    1370:	68fa      	ldr	r2, [r7, #12]
    1372:	0852      	lsrs	r2, r2, #1
    1374:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    1376:	e014      	b.n	13a2 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    1378:	230c      	movs	r3, #12
    137a:	18fb      	adds	r3, r7, r3
    137c:	0018      	movs	r0, r3
    137e:	4b10      	ldr	r3, [pc, #64]	; (13c0 <mmc_cmd8+0x11c>)
    1380:	4798      	blx	r3
    1382:	0003      	movs	r3, r0
    1384:	001a      	movs	r2, r3
    1386:	2301      	movs	r3, #1
    1388:	4053      	eors	r3, r2
    138a:	b2db      	uxtb	r3, r3
    138c:	2b00      	cmp	r3, #0
    138e:	d001      	beq.n	1394 <mmc_cmd8+0xf0>
			return false;
    1390:	2300      	movs	r3, #0
    1392:	e00c      	b.n	13ae <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    1394:	2316      	movs	r3, #22
    1396:	18fb      	adds	r3, r7, r3
    1398:	881a      	ldrh	r2, [r3, #0]
    139a:	2316      	movs	r3, #22
    139c:	18fb      	adds	r3, r7, r3
    139e:	3201      	adds	r2, #1
    13a0:	801a      	strh	r2, [r3, #0]
    13a2:	2316      	movs	r3, #22
    13a4:	18fb      	adds	r3, r7, r3
    13a6:	881b      	ldrh	r3, [r3, #0]
    13a8:	2b7f      	cmp	r3, #127	; 0x7f
    13aa:	d9e5      	bls.n	1378 <mmc_cmd8+0xd4>
		}
	}
	return true;
    13ac:	2301      	movs	r3, #1
}
    13ae:	0018      	movs	r0, r3
    13b0:	46bd      	mov	sp, r7
    13b2:	b007      	add	sp, #28
    13b4:	bd90      	pop	{r4, r7, pc}
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	00081108 	.word	0x00081108
    13bc:	00002b59 	.word	0x00002b59
    13c0:	00002d85 	.word	0x00002d85
    13c4:	200000e0 	.word	0x200000e0
    13c8:	00000f3d 	.word	0x00000f3d
    13cc:	00000fff 	.word	0x00000fff

000013d0 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    13d0:	b590      	push	{r4, r7, lr}
    13d2:	b083      	sub	sp, #12
    13d4:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    13d6:	4b15      	ldr	r3, [pc, #84]	; (142c <sd_mmc_cmd9_spi+0x5c>)
    13d8:	681b      	ldr	r3, [r3, #0]
    13da:	891b      	ldrh	r3, [r3, #8]
    13dc:	0419      	lsls	r1, r3, #16
    13de:	4814      	ldr	r0, [pc, #80]	; (1430 <sd_mmc_cmd9_spi+0x60>)
    13e0:	2301      	movs	r3, #1
    13e2:	9300      	str	r3, [sp, #0]
    13e4:	2301      	movs	r3, #1
    13e6:	2210      	movs	r2, #16
    13e8:	4c12      	ldr	r4, [pc, #72]	; (1434 <sd_mmc_cmd9_spi+0x64>)
    13ea:	47a0      	blx	r4
    13ec:	0003      	movs	r3, r0
    13ee:	001a      	movs	r2, r3
    13f0:	2301      	movs	r3, #1
    13f2:	4053      	eors	r3, r2
    13f4:	b2db      	uxtb	r3, r3
    13f6:	2b00      	cmp	r3, #0
    13f8:	d001      	beq.n	13fe <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    13fa:	2300      	movs	r3, #0
    13fc:	e012      	b.n	1424 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    13fe:	4b0b      	ldr	r3, [pc, #44]	; (142c <sd_mmc_cmd9_spi+0x5c>)
    1400:	681b      	ldr	r3, [r3, #0]
    1402:	330e      	adds	r3, #14
    1404:	2101      	movs	r1, #1
    1406:	0018      	movs	r0, r3
    1408:	4b0b      	ldr	r3, [pc, #44]	; (1438 <sd_mmc_cmd9_spi+0x68>)
    140a:	4798      	blx	r3
    140c:	0003      	movs	r3, r0
    140e:	001a      	movs	r2, r3
    1410:	2301      	movs	r3, #1
    1412:	4053      	eors	r3, r2
    1414:	b2db      	uxtb	r3, r3
    1416:	2b00      	cmp	r3, #0
    1418:	d001      	beq.n	141e <sd_mmc_cmd9_spi+0x4e>
		return false;
    141a:	2300      	movs	r3, #0
    141c:	e002      	b.n	1424 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    141e:	4b07      	ldr	r3, [pc, #28]	; (143c <sd_mmc_cmd9_spi+0x6c>)
    1420:	4798      	blx	r3
    1422:	0003      	movs	r3, r0
}
    1424:	0018      	movs	r0, r3
    1426:	46bd      	mov	sp, r7
    1428:	b001      	add	sp, #4
    142a:	bd90      	pop	{r4, r7, pc}
    142c:	200000e0 	.word	0x200000e0
    1430:	00081109 	.word	0x00081109
    1434:	00002b59 	.word	0x00002b59
    1438:	00002e29 	.word	0x00002e29
    143c:	00002ecd 	.word	0x00002ecd

00001440 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    1440:	b5b0      	push	{r4, r5, r7, lr}
    1442:	b084      	sub	sp, #16
    1444:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    1446:	4b45      	ldr	r3, [pc, #276]	; (155c <mmc_decode_csd+0x11c>)
    1448:	681b      	ldr	r3, [r3, #0]
    144a:	330e      	adds	r3, #14
    144c:	0018      	movs	r0, r3
    144e:	2304      	movs	r3, #4
    1450:	227a      	movs	r2, #122	; 0x7a
    1452:	2180      	movs	r1, #128	; 0x80
    1454:	4c42      	ldr	r4, [pc, #264]	; (1560 <mmc_decode_csd+0x120>)
    1456:	47a0      	blx	r4
    1458:	0003      	movs	r3, r0
    145a:	2b02      	cmp	r3, #2
    145c:	d011      	beq.n	1482 <mmc_decode_csd+0x42>
    145e:	d802      	bhi.n	1466 <mmc_decode_csd+0x26>
    1460:	2b01      	cmp	r3, #1
    1462:	d009      	beq.n	1478 <mmc_decode_csd+0x38>
    1464:	e003      	b.n	146e <mmc_decode_csd+0x2e>
    1466:	2b03      	cmp	r3, #3
    1468:	d010      	beq.n	148c <mmc_decode_csd+0x4c>
    146a:	2b04      	cmp	r3, #4
    146c:	d013      	beq.n	1496 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    146e:	4b3b      	ldr	r3, [pc, #236]	; (155c <mmc_decode_csd+0x11c>)
    1470:	681b      	ldr	r3, [r3, #0]
    1472:	2212      	movs	r2, #18
    1474:	731a      	strb	r2, [r3, #12]
		break;
    1476:	e013      	b.n	14a0 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    1478:	4b38      	ldr	r3, [pc, #224]	; (155c <mmc_decode_csd+0x11c>)
    147a:	681b      	ldr	r3, [r3, #0]
    147c:	2214      	movs	r2, #20
    147e:	731a      	strb	r2, [r3, #12]
		break;
    1480:	e00e      	b.n	14a0 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    1482:	4b36      	ldr	r3, [pc, #216]	; (155c <mmc_decode_csd+0x11c>)
    1484:	681b      	ldr	r3, [r3, #0]
    1486:	2222      	movs	r2, #34	; 0x22
    1488:	731a      	strb	r2, [r3, #12]
		break;
    148a:	e009      	b.n	14a0 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    148c:	4b33      	ldr	r3, [pc, #204]	; (155c <mmc_decode_csd+0x11c>)
    148e:	681b      	ldr	r3, [r3, #0]
    1490:	2230      	movs	r2, #48	; 0x30
    1492:	731a      	strb	r2, [r3, #12]
		break;
    1494:	e004      	b.n	14a0 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    1496:	4b31      	ldr	r3, [pc, #196]	; (155c <mmc_decode_csd+0x11c>)
    1498:	681b      	ldr	r3, [r3, #0]
    149a:	2240      	movs	r2, #64	; 0x40
    149c:	731a      	strb	r2, [r3, #12]
		break;
    149e:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    14a0:	4b2e      	ldr	r3, [pc, #184]	; (155c <mmc_decode_csd+0x11c>)
    14a2:	681b      	ldr	r3, [r3, #0]
    14a4:	330e      	adds	r3, #14
    14a6:	0018      	movs	r0, r3
    14a8:	2308      	movs	r3, #8
    14aa:	2260      	movs	r2, #96	; 0x60
    14ac:	2180      	movs	r1, #128	; 0x80
    14ae:	4c2c      	ldr	r4, [pc, #176]	; (1560 <mmc_decode_csd+0x120>)
    14b0:	47a0      	blx	r4
    14b2:	0003      	movs	r3, r0
    14b4:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    14b6:	68fb      	ldr	r3, [r7, #12]
    14b8:	2207      	movs	r2, #7
    14ba:	401a      	ands	r2, r3
    14bc:	4b29      	ldr	r3, [pc, #164]	; (1564 <mmc_decode_csd+0x124>)
    14be:	0092      	lsls	r2, r2, #2
    14c0:	58d3      	ldr	r3, [r2, r3]
    14c2:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    14c4:	68fb      	ldr	r3, [r7, #12]
    14c6:	08db      	lsrs	r3, r3, #3
    14c8:	220f      	movs	r2, #15
    14ca:	401a      	ands	r2, r3
    14cc:	4b26      	ldr	r3, [pc, #152]	; (1568 <mmc_decode_csd+0x128>)
    14ce:	0092      	lsls	r2, r2, #2
    14d0:	58d3      	ldr	r3, [r2, r3]
    14d2:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    14d4:	4b21      	ldr	r3, [pc, #132]	; (155c <mmc_decode_csd+0x11c>)
    14d6:	681b      	ldr	r3, [r3, #0]
    14d8:	68ba      	ldr	r2, [r7, #8]
    14da:	6879      	ldr	r1, [r7, #4]
    14dc:	434a      	muls	r2, r1
    14de:	21fa      	movs	r1, #250	; 0xfa
    14e0:	0089      	lsls	r1, r1, #2
    14e2:	434a      	muls	r2, r1
    14e4:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    14e6:	4b1d      	ldr	r3, [pc, #116]	; (155c <mmc_decode_csd+0x11c>)
    14e8:	681b      	ldr	r3, [r3, #0]
    14ea:	330e      	adds	r3, #14
    14ec:	0018      	movs	r0, r3
    14ee:	230c      	movs	r3, #12
    14f0:	223e      	movs	r2, #62	; 0x3e
    14f2:	2180      	movs	r1, #128	; 0x80
    14f4:	4c1a      	ldr	r4, [pc, #104]	; (1560 <mmc_decode_csd+0x120>)
    14f6:	47a0      	blx	r4
    14f8:	0002      	movs	r2, r0
    14fa:	4b1c      	ldr	r3, [pc, #112]	; (156c <mmc_decode_csd+0x12c>)
    14fc:	429a      	cmp	r2, r3
    14fe:	d028      	beq.n	1552 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    1500:	4b16      	ldr	r3, [pc, #88]	; (155c <mmc_decode_csd+0x11c>)
    1502:	681b      	ldr	r3, [r3, #0]
    1504:	330e      	adds	r3, #14
    1506:	0018      	movs	r0, r3
    1508:	230c      	movs	r3, #12
    150a:	223e      	movs	r2, #62	; 0x3e
    150c:	2180      	movs	r1, #128	; 0x80
    150e:	4c14      	ldr	r4, [pc, #80]	; (1560 <mmc_decode_csd+0x120>)
    1510:	47a0      	blx	r4
    1512:	0003      	movs	r3, r0
    1514:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    1516:	4b11      	ldr	r3, [pc, #68]	; (155c <mmc_decode_csd+0x11c>)
    1518:	681b      	ldr	r3, [r3, #0]
    151a:	330e      	adds	r3, #14
    151c:	0018      	movs	r0, r3
    151e:	2303      	movs	r3, #3
    1520:	222f      	movs	r2, #47	; 0x2f
    1522:	2180      	movs	r1, #128	; 0x80
    1524:	4d0e      	ldr	r5, [pc, #56]	; (1560 <mmc_decode_csd+0x120>)
    1526:	47a8      	blx	r5
    1528:	0003      	movs	r3, r0
    152a:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    152c:	409c      	lsls	r4, r3
    152e:	0023      	movs	r3, r4
    1530:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    1532:	4b0a      	ldr	r3, [pc, #40]	; (155c <mmc_decode_csd+0x11c>)
    1534:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    1536:	4b09      	ldr	r3, [pc, #36]	; (155c <mmc_decode_csd+0x11c>)
    1538:	681b      	ldr	r3, [r3, #0]
    153a:	330e      	adds	r3, #14
    153c:	0018      	movs	r0, r3
    153e:	2304      	movs	r3, #4
    1540:	2250      	movs	r2, #80	; 0x50
    1542:	2180      	movs	r1, #128	; 0x80
    1544:	4d06      	ldr	r5, [pc, #24]	; (1560 <mmc_decode_csd+0x120>)
    1546:	47a8      	blx	r5
    1548:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    154a:	683b      	ldr	r3, [r7, #0]
    154c:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    154e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    1550:	6063      	str	r3, [r4, #4]
	}
}
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	46bd      	mov	sp, r7
    1556:	b004      	add	sp, #16
    1558:	bdb0      	pop	{r4, r5, r7, pc}
    155a:	46c0      	nop			; (mov r8, r8)
    155c:	200000e0 	.word	0x200000e0
    1560:	00000f3d 	.word	0x00000f3d
    1564:	0000be5c 	.word	0x0000be5c
    1568:	0000beb8 	.word	0x0000beb8
    156c:	00000fff 	.word	0x00000fff

00001570 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    1570:	b5b0      	push	{r4, r5, r7, lr}
    1572:	b084      	sub	sp, #16
    1574:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    1576:	4b35      	ldr	r3, [pc, #212]	; (164c <sd_decode_csd+0xdc>)
    1578:	681b      	ldr	r3, [r3, #0]
    157a:	330e      	adds	r3, #14
    157c:	0018      	movs	r0, r3
    157e:	2308      	movs	r3, #8
    1580:	2260      	movs	r2, #96	; 0x60
    1582:	2180      	movs	r1, #128	; 0x80
    1584:	4c32      	ldr	r4, [pc, #200]	; (1650 <sd_decode_csd+0xe0>)
    1586:	47a0      	blx	r4
    1588:	0003      	movs	r3, r0
    158a:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    158c:	68fb      	ldr	r3, [r7, #12]
    158e:	2207      	movs	r2, #7
    1590:	401a      	ands	r2, r3
    1592:	4b30      	ldr	r3, [pc, #192]	; (1654 <sd_decode_csd+0xe4>)
    1594:	0092      	lsls	r2, r2, #2
    1596:	58d3      	ldr	r3, [r2, r3]
    1598:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    159a:	68fb      	ldr	r3, [r7, #12]
    159c:	08db      	lsrs	r3, r3, #3
    159e:	220f      	movs	r2, #15
    15a0:	401a      	ands	r2, r3
    15a2:	4b2d      	ldr	r3, [pc, #180]	; (1658 <sd_decode_csd+0xe8>)
    15a4:	0092      	lsls	r2, r2, #2
    15a6:	58d3      	ldr	r3, [r2, r3]
    15a8:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    15aa:	4b28      	ldr	r3, [pc, #160]	; (164c <sd_decode_csd+0xdc>)
    15ac:	681b      	ldr	r3, [r3, #0]
    15ae:	68ba      	ldr	r2, [r7, #8]
    15b0:	6879      	ldr	r1, [r7, #4]
    15b2:	434a      	muls	r2, r1
    15b4:	21fa      	movs	r1, #250	; 0xfa
    15b6:	0089      	lsls	r1, r1, #2
    15b8:	434a      	muls	r2, r1
    15ba:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    15bc:	4b23      	ldr	r3, [pc, #140]	; (164c <sd_decode_csd+0xdc>)
    15be:	681b      	ldr	r3, [r3, #0]
    15c0:	330e      	adds	r3, #14
    15c2:	0018      	movs	r0, r3
    15c4:	2302      	movs	r3, #2
    15c6:	227e      	movs	r2, #126	; 0x7e
    15c8:	2180      	movs	r1, #128	; 0x80
    15ca:	4c21      	ldr	r4, [pc, #132]	; (1650 <sd_decode_csd+0xe0>)
    15cc:	47a0      	blx	r4
    15ce:	1e03      	subs	r3, r0, #0
    15d0:	d00f      	beq.n	15f2 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    15d2:	4b1e      	ldr	r3, [pc, #120]	; (164c <sd_decode_csd+0xdc>)
    15d4:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    15d6:	4b1d      	ldr	r3, [pc, #116]	; (164c <sd_decode_csd+0xdc>)
    15d8:	681b      	ldr	r3, [r3, #0]
    15da:	330e      	adds	r3, #14
    15dc:	0018      	movs	r0, r3
    15de:	2316      	movs	r3, #22
    15e0:	2230      	movs	r2, #48	; 0x30
    15e2:	2180      	movs	r1, #128	; 0x80
    15e4:	4d1a      	ldr	r5, [pc, #104]	; (1650 <sd_decode_csd+0xe0>)
    15e6:	47a8      	blx	r5
    15e8:	0003      	movs	r3, r0
				* 512;
    15ea:	3301      	adds	r3, #1
    15ec:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    15ee:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    15f0:	e028      	b.n	1644 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    15f2:	4b16      	ldr	r3, [pc, #88]	; (164c <sd_decode_csd+0xdc>)
    15f4:	681b      	ldr	r3, [r3, #0]
    15f6:	330e      	adds	r3, #14
    15f8:	0018      	movs	r0, r3
    15fa:	230c      	movs	r3, #12
    15fc:	223e      	movs	r2, #62	; 0x3e
    15fe:	2180      	movs	r1, #128	; 0x80
    1600:	4c13      	ldr	r4, [pc, #76]	; (1650 <sd_decode_csd+0xe0>)
    1602:	47a0      	blx	r4
    1604:	0003      	movs	r3, r0
    1606:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    1608:	4b10      	ldr	r3, [pc, #64]	; (164c <sd_decode_csd+0xdc>)
    160a:	681b      	ldr	r3, [r3, #0]
    160c:	330e      	adds	r3, #14
    160e:	0018      	movs	r0, r3
    1610:	2303      	movs	r3, #3
    1612:	222f      	movs	r2, #47	; 0x2f
    1614:	2180      	movs	r1, #128	; 0x80
    1616:	4d0e      	ldr	r5, [pc, #56]	; (1650 <sd_decode_csd+0xe0>)
    1618:	47a8      	blx	r5
    161a:	0003      	movs	r3, r0
    161c:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    161e:	409c      	lsls	r4, r3
    1620:	0023      	movs	r3, r4
    1622:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    1624:	4b09      	ldr	r3, [pc, #36]	; (164c <sd_decode_csd+0xdc>)
    1626:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    1628:	4b08      	ldr	r3, [pc, #32]	; (164c <sd_decode_csd+0xdc>)
    162a:	681b      	ldr	r3, [r3, #0]
    162c:	330e      	adds	r3, #14
    162e:	0018      	movs	r0, r3
    1630:	2304      	movs	r3, #4
    1632:	2250      	movs	r2, #80	; 0x50
    1634:	2180      	movs	r1, #128	; 0x80
    1636:	4d06      	ldr	r5, [pc, #24]	; (1650 <sd_decode_csd+0xe0>)
    1638:	47a8      	blx	r5
    163a:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    163c:	683b      	ldr	r3, [r7, #0]
    163e:	4093      	lsls	r3, r2
				/ 1024;
    1640:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    1642:	6063      	str	r3, [r4, #4]
}
    1644:	46c0      	nop			; (mov r8, r8)
    1646:	46bd      	mov	sp, r7
    1648:	b004      	add	sp, #16
    164a:	bdb0      	pop	{r4, r5, r7, pc}
    164c:	200000e0 	.word	0x200000e0
    1650:	00000f3d 	.word	0x00000f3d
    1654:	0000be5c 	.word	0x0000be5c
    1658:	0000be78 	.word	0x0000be78

0000165c <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    165c:	b580      	push	{r7, lr}
    165e:	b082      	sub	sp, #8
    1660:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    1662:	4b11      	ldr	r3, [pc, #68]	; (16a8 <sd_mmc_cmd13+0x4c>)
    1664:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    1666:	4b11      	ldr	r3, [pc, #68]	; (16ac <sd_mmc_cmd13+0x50>)
    1668:	2100      	movs	r1, #0
    166a:	0018      	movs	r0, r3
    166c:	4b10      	ldr	r3, [pc, #64]	; (16b0 <sd_mmc_cmd13+0x54>)
    166e:	4798      	blx	r3
    1670:	0003      	movs	r3, r0
    1672:	001a      	movs	r2, r3
    1674:	2301      	movs	r3, #1
    1676:	4053      	eors	r3, r2
    1678:	b2db      	uxtb	r3, r3
    167a:	2b00      	cmp	r3, #0
    167c:	d001      	beq.n	1682 <sd_mmc_cmd13+0x26>
				return false;
    167e:	2300      	movs	r3, #0
    1680:	e00e      	b.n	16a0 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    1682:	4b0c      	ldr	r3, [pc, #48]	; (16b4 <sd_mmc_cmd13+0x58>)
    1684:	4798      	blx	r3
    1686:	0002      	movs	r2, r0
    1688:	23ff      	movs	r3, #255	; 0xff
    168a:	4013      	ands	r3, r2
    168c:	d006      	beq.n	169c <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    168e:	687b      	ldr	r3, [r7, #4]
    1690:	1e5a      	subs	r2, r3, #1
    1692:	607a      	str	r2, [r7, #4]
    1694:	2b00      	cmp	r3, #0
    1696:	d1e6      	bne.n	1666 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    1698:	2300      	movs	r3, #0
    169a:	e001      	b.n	16a0 <sd_mmc_cmd13+0x44>
				break;
    169c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    169e:	2301      	movs	r3, #1
}
    16a0:	0018      	movs	r0, r3
    16a2:	46bd      	mov	sp, r7
    16a4:	b002      	add	sp, #8
    16a6:	bd80      	pop	{r7, pc}
    16a8:	00030d40 	.word	0x00030d40
    16ac:	00001b0d 	.word	0x00001b0d
    16b0:	00002b31 	.word	0x00002b31
    16b4:	00002d71 	.word	0x00002d71

000016b8 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    16b8:	b590      	push	{r4, r7, lr}
    16ba:	b085      	sub	sp, #20
    16bc:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    16be:	4b38      	ldr	r3, [pc, #224]	; (17a0 <sd_acmd51+0xe8>)
    16c0:	681b      	ldr	r3, [r3, #0]
    16c2:	891b      	ldrh	r3, [r3, #8]
    16c4:	041b      	lsls	r3, r3, #16
    16c6:	4a37      	ldr	r2, [pc, #220]	; (17a4 <sd_acmd51+0xec>)
    16c8:	0019      	movs	r1, r3
    16ca:	0010      	movs	r0, r2
    16cc:	4b36      	ldr	r3, [pc, #216]	; (17a8 <sd_acmd51+0xf0>)
    16ce:	4798      	blx	r3
    16d0:	0003      	movs	r3, r0
    16d2:	001a      	movs	r2, r3
    16d4:	2301      	movs	r3, #1
    16d6:	4053      	eors	r3, r2
    16d8:	b2db      	uxtb	r3, r3
    16da:	2b00      	cmp	r3, #0
    16dc:	d001      	beq.n	16e2 <sd_acmd51+0x2a>
		return false;
    16de:	2300      	movs	r3, #0
    16e0:	e059      	b.n	1796 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    16e2:	4832      	ldr	r0, [pc, #200]	; (17ac <sd_acmd51+0xf4>)
    16e4:	2301      	movs	r3, #1
    16e6:	9300      	str	r3, [sp, #0]
    16e8:	2301      	movs	r3, #1
    16ea:	2208      	movs	r2, #8
    16ec:	2100      	movs	r1, #0
    16ee:	4c30      	ldr	r4, [pc, #192]	; (17b0 <sd_acmd51+0xf8>)
    16f0:	47a0      	blx	r4
    16f2:	0003      	movs	r3, r0
    16f4:	001a      	movs	r2, r3
    16f6:	2301      	movs	r3, #1
    16f8:	4053      	eors	r3, r2
    16fa:	b2db      	uxtb	r3, r3
    16fc:	2b00      	cmp	r3, #0
    16fe:	d001      	beq.n	1704 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    1700:	2300      	movs	r3, #0
    1702:	e048      	b.n	1796 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    1704:	003b      	movs	r3, r7
    1706:	2101      	movs	r1, #1
    1708:	0018      	movs	r0, r3
    170a:	4b2a      	ldr	r3, [pc, #168]	; (17b4 <sd_acmd51+0xfc>)
    170c:	4798      	blx	r3
    170e:	0003      	movs	r3, r0
    1710:	001a      	movs	r2, r3
    1712:	2301      	movs	r3, #1
    1714:	4053      	eors	r3, r2
    1716:	b2db      	uxtb	r3, r3
    1718:	2b00      	cmp	r3, #0
    171a:	d001      	beq.n	1720 <sd_acmd51+0x68>
		return false;
    171c:	2300      	movs	r3, #0
    171e:	e03a      	b.n	1796 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    1720:	4b25      	ldr	r3, [pc, #148]	; (17b8 <sd_acmd51+0x100>)
    1722:	4798      	blx	r3
    1724:	0003      	movs	r3, r0
    1726:	001a      	movs	r2, r3
    1728:	2301      	movs	r3, #1
    172a:	4053      	eors	r3, r2
    172c:	b2db      	uxtb	r3, r3
    172e:	2b00      	cmp	r3, #0
    1730:	d001      	beq.n	1736 <sd_acmd51+0x7e>
		return false;
    1732:	2300      	movs	r3, #0
    1734:	e02f      	b.n	1796 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    1736:	0038      	movs	r0, r7
    1738:	2304      	movs	r3, #4
    173a:	2238      	movs	r2, #56	; 0x38
    173c:	2140      	movs	r1, #64	; 0x40
    173e:	4c1f      	ldr	r4, [pc, #124]	; (17bc <sd_acmd51+0x104>)
    1740:	47a0      	blx	r4
    1742:	0003      	movs	r3, r0
    1744:	2b01      	cmp	r3, #1
    1746:	d008      	beq.n	175a <sd_acmd51+0xa2>
    1748:	d302      	bcc.n	1750 <sd_acmd51+0x98>
    174a:	2b02      	cmp	r3, #2
    174c:	d00a      	beq.n	1764 <sd_acmd51+0xac>
    174e:	e01c      	b.n	178a <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    1750:	4b13      	ldr	r3, [pc, #76]	; (17a0 <sd_acmd51+0xe8>)
    1752:	681b      	ldr	r3, [r3, #0]
    1754:	2210      	movs	r2, #16
    1756:	731a      	strb	r2, [r3, #12]
		break;
    1758:	e01c      	b.n	1794 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    175a:	4b11      	ldr	r3, [pc, #68]	; (17a0 <sd_acmd51+0xe8>)
    175c:	681b      	ldr	r3, [r3, #0]
    175e:	221a      	movs	r2, #26
    1760:	731a      	strb	r2, [r3, #12]
		break;
    1762:	e017      	b.n	1794 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    1764:	0038      	movs	r0, r7
    1766:	2301      	movs	r3, #1
    1768:	222f      	movs	r2, #47	; 0x2f
    176a:	2140      	movs	r1, #64	; 0x40
    176c:	4c13      	ldr	r4, [pc, #76]	; (17bc <sd_acmd51+0x104>)
    176e:	47a0      	blx	r4
    1770:	0003      	movs	r3, r0
    1772:	2b01      	cmp	r3, #1
    1774:	d104      	bne.n	1780 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    1776:	4b0a      	ldr	r3, [pc, #40]	; (17a0 <sd_acmd51+0xe8>)
    1778:	681b      	ldr	r3, [r3, #0]
    177a:	2230      	movs	r2, #48	; 0x30
    177c:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    177e:	e009      	b.n	1794 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    1780:	4b07      	ldr	r3, [pc, #28]	; (17a0 <sd_acmd51+0xe8>)
    1782:	681b      	ldr	r3, [r3, #0]
    1784:	2220      	movs	r2, #32
    1786:	731a      	strb	r2, [r3, #12]
		break;
    1788:	e004      	b.n	1794 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    178a:	4b05      	ldr	r3, [pc, #20]	; (17a0 <sd_acmd51+0xe8>)
    178c:	681b      	ldr	r3, [r3, #0]
    178e:	2210      	movs	r2, #16
    1790:	731a      	strb	r2, [r3, #12]
		break;
    1792:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    1794:	2301      	movs	r3, #1
}
    1796:	0018      	movs	r0, r3
    1798:	46bd      	mov	sp, r7
    179a:	b003      	add	sp, #12
    179c:	bd90      	pop	{r4, r7, pc}
    179e:	46c0      	nop			; (mov r8, r8)
    17a0:	200000e0 	.word	0x200000e0
    17a4:	00001137 	.word	0x00001137
    17a8:	00002b31 	.word	0x00002b31
    17ac:	00081133 	.word	0x00081133
    17b0:	00002b59 	.word	0x00002b59
    17b4:	00002e29 	.word	0x00002e29
    17b8:	00002ecd 	.word	0x00002ecd
    17bc:	00000f3d 	.word	0x00000f3d

000017c0 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    17c0:	b580      	push	{r7, lr}
    17c2:	b082      	sub	sp, #8
    17c4:	af00      	add	r7, sp, #0
    17c6:	0002      	movs	r2, r0
    17c8:	1dfb      	adds	r3, r7, #7
    17ca:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    17cc:	1dfb      	adds	r3, r7, #7
    17ce:	781b      	ldrb	r3, [r3, #0]
    17d0:	2b00      	cmp	r3, #0
    17d2:	d001      	beq.n	17d8 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    17d4:	2304      	movs	r3, #4
    17d6:	e047      	b.n	1868 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    17d8:	1dfb      	adds	r3, r7, #7
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	4a24      	ldr	r2, [pc, #144]	; (1870 <sd_mmc_select_slot+0xb0>)
    17de:	015b      	lsls	r3, r3, #5
    17e0:	18d3      	adds	r3, r2, r3
    17e2:	330a      	adds	r3, #10
    17e4:	781b      	ldrb	r3, [r3, #0]
    17e6:	2b04      	cmp	r3, #4
    17e8:	d008      	beq.n	17fc <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    17ea:	1dfb      	adds	r3, r7, #7
    17ec:	781b      	ldrb	r3, [r3, #0]
    17ee:	4a20      	ldr	r2, [pc, #128]	; (1870 <sd_mmc_select_slot+0xb0>)
    17f0:	015b      	lsls	r3, r3, #5
    17f2:	18d3      	adds	r3, r2, r3
    17f4:	330a      	adds	r3, #10
    17f6:	781b      	ldrb	r3, [r3, #0]
    17f8:	2b03      	cmp	r3, #3
    17fa:	d11d      	bne.n	1838 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    17fc:	1dfb      	adds	r3, r7, #7
    17fe:	781b      	ldrb	r3, [r3, #0]
    1800:	4a1b      	ldr	r2, [pc, #108]	; (1870 <sd_mmc_select_slot+0xb0>)
    1802:	015b      	lsls	r3, r3, #5
    1804:	18d3      	adds	r3, r2, r3
    1806:	330a      	adds	r3, #10
    1808:	2202      	movs	r2, #2
    180a:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    180c:	1dfb      	adds	r3, r7, #7
    180e:	781a      	ldrb	r2, [r3, #0]
    1810:	4b17      	ldr	r3, [pc, #92]	; (1870 <sd_mmc_select_slot+0xb0>)
    1812:	0152      	lsls	r2, r2, #5
    1814:	4917      	ldr	r1, [pc, #92]	; (1874 <sd_mmc_select_slot+0xb4>)
    1816:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    1818:	1dfb      	adds	r3, r7, #7
    181a:	781b      	ldrb	r3, [r3, #0]
    181c:	4a14      	ldr	r2, [pc, #80]	; (1870 <sd_mmc_select_slot+0xb0>)
    181e:	015b      	lsls	r3, r3, #5
    1820:	18d3      	adds	r3, r2, r3
    1822:	330d      	adds	r3, #13
    1824:	2201      	movs	r2, #1
    1826:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    1828:	1dfb      	adds	r3, r7, #7
    182a:	781b      	ldrb	r3, [r3, #0]
    182c:	4a10      	ldr	r2, [pc, #64]	; (1870 <sd_mmc_select_slot+0xb0>)
    182e:	015b      	lsls	r3, r3, #5
    1830:	18d3      	adds	r3, r2, r3
    1832:	331e      	adds	r3, #30
    1834:	2200      	movs	r2, #0
    1836:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    1838:	4b0f      	ldr	r3, [pc, #60]	; (1878 <sd_mmc_select_slot+0xb8>)
    183a:	1dfa      	adds	r2, r7, #7
    183c:	7812      	ldrb	r2, [r2, #0]
    183e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    1840:	1dfb      	adds	r3, r7, #7
    1842:	781b      	ldrb	r3, [r3, #0]
    1844:	015a      	lsls	r2, r3, #5
    1846:	4b0a      	ldr	r3, [pc, #40]	; (1870 <sd_mmc_select_slot+0xb0>)
    1848:	18d2      	adds	r2, r2, r3
    184a:	4b0c      	ldr	r3, [pc, #48]	; (187c <sd_mmc_select_slot+0xbc>)
    184c:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    184e:	4b0c      	ldr	r3, [pc, #48]	; (1880 <sd_mmc_select_slot+0xc0>)
    1850:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    1852:	1dfb      	adds	r3, r7, #7
    1854:	781b      	ldrb	r3, [r3, #0]
    1856:	4a06      	ldr	r2, [pc, #24]	; (1870 <sd_mmc_select_slot+0xb0>)
    1858:	015b      	lsls	r3, r3, #5
    185a:	18d3      	adds	r3, r2, r3
    185c:	330a      	adds	r3, #10
    185e:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    1860:	3b02      	subs	r3, #2
    1862:	425a      	negs	r2, r3
    1864:	4153      	adcs	r3, r2
    1866:	b2db      	uxtb	r3, r3
}
    1868:	0018      	movs	r0, r3
    186a:	46bd      	mov	sp, r7
    186c:	b002      	add	sp, #8
    186e:	bd80      	pop	{r7, pc}
    1870:	200000bc 	.word	0x200000bc
    1874:	00061a80 	.word	0x00061a80
    1878:	200000dc 	.word	0x200000dc
    187c:	200000e0 	.word	0x200000e0
    1880:	00001885 	.word	0x00001885

00001884 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    1884:	b5b0      	push	{r4, r5, r7, lr}
    1886:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1888:	4b09      	ldr	r3, [pc, #36]	; (18b0 <sd_mmc_configure_slot+0x2c>)
    188a:	7818      	ldrb	r0, [r3, #0]
    188c:	4b09      	ldr	r3, [pc, #36]	; (18b4 <sd_mmc_configure_slot+0x30>)
    188e:	681b      	ldr	r3, [r3, #0]
    1890:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    1892:	4b08      	ldr	r3, [pc, #32]	; (18b4 <sd_mmc_configure_slot+0x30>)
    1894:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1896:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    1898:	4b06      	ldr	r3, [pc, #24]	; (18b4 <sd_mmc_configure_slot+0x30>)
    189a:	681b      	ldr	r3, [r3, #0]
    189c:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    189e:	1e5c      	subs	r4, r3, #1
    18a0:	41a3      	sbcs	r3, r4
    18a2:	b2db      	uxtb	r3, r3
    18a4:	4c04      	ldr	r4, [pc, #16]	; (18b8 <sd_mmc_configure_slot+0x34>)
    18a6:	47a0      	blx	r4
}
    18a8:	46c0      	nop			; (mov r8, r8)
    18aa:	46bd      	mov	sp, r7
    18ac:	bdb0      	pop	{r4, r5, r7, pc}
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	200000dc 	.word	0x200000dc
    18b4:	200000e0 	.word	0x200000e0
    18b8:	00002a19 	.word	0x00002a19

000018bc <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    18bc:	b580      	push	{r7, lr}
    18be:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    18c0:	4b05      	ldr	r3, [pc, #20]	; (18d8 <sd_mmc_deselect_slot+0x1c>)
    18c2:	781b      	ldrb	r3, [r3, #0]
    18c4:	2b00      	cmp	r3, #0
    18c6:	d104      	bne.n	18d2 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    18c8:	4b03      	ldr	r3, [pc, #12]	; (18d8 <sd_mmc_deselect_slot+0x1c>)
    18ca:	781b      	ldrb	r3, [r3, #0]
    18cc:	0018      	movs	r0, r3
    18ce:	4b03      	ldr	r3, [pc, #12]	; (18dc <sd_mmc_deselect_slot+0x20>)
    18d0:	4798      	blx	r3
	}
}
    18d2:	46c0      	nop			; (mov r8, r8)
    18d4:	46bd      	mov	sp, r7
    18d6:	bd80      	pop	{r7, pc}
    18d8:	200000dc 	.word	0x200000dc
    18dc:	00002aa1 	.word	0x00002aa1

000018e0 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    18e0:	b580      	push	{r7, lr}
    18e2:	b082      	sub	sp, #8
    18e4:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    18e6:	1dfb      	adds	r3, r7, #7
    18e8:	2200      	movs	r2, #0
    18ea:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    18ec:	4b59      	ldr	r3, [pc, #356]	; (1a54 <sd_mmc_spi_card_init+0x174>)
    18ee:	681b      	ldr	r3, [r3, #0]
    18f0:	2201      	movs	r2, #1
    18f2:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    18f4:	4b57      	ldr	r3, [pc, #348]	; (1a54 <sd_mmc_spi_card_init+0x174>)
    18f6:	681b      	ldr	r3, [r3, #0]
    18f8:	2200      	movs	r2, #0
    18fa:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    18fc:	4b55      	ldr	r3, [pc, #340]	; (1a54 <sd_mmc_spi_card_init+0x174>)
    18fe:	681b      	ldr	r3, [r3, #0]
    1900:	2200      	movs	r2, #0
    1902:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    1904:	4b54      	ldr	r3, [pc, #336]	; (1a58 <sd_mmc_spi_card_init+0x178>)
    1906:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1908:	2388      	movs	r3, #136	; 0x88
    190a:	015b      	lsls	r3, r3, #5
    190c:	2100      	movs	r1, #0
    190e:	0018      	movs	r0, r3
    1910:	4b52      	ldr	r3, [pc, #328]	; (1a5c <sd_mmc_spi_card_init+0x17c>)
    1912:	4798      	blx	r3
    1914:	0003      	movs	r3, r0
    1916:	001a      	movs	r2, r3
    1918:	2301      	movs	r3, #1
    191a:	4053      	eors	r3, r2
    191c:	b2db      	uxtb	r3, r3
    191e:	2b00      	cmp	r3, #0
    1920:	d001      	beq.n	1926 <sd_mmc_spi_card_init+0x46>
		return false;
    1922:	2300      	movs	r3, #0
    1924:	e092      	b.n	1a4c <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    1926:	1dfb      	adds	r3, r7, #7
    1928:	0018      	movs	r0, r3
    192a:	4b4d      	ldr	r3, [pc, #308]	; (1a60 <sd_mmc_spi_card_init+0x180>)
    192c:	4798      	blx	r3
    192e:	0003      	movs	r3, r0
    1930:	001a      	movs	r2, r3
    1932:	2301      	movs	r3, #1
    1934:	4053      	eors	r3, r2
    1936:	b2db      	uxtb	r3, r3
    1938:	2b00      	cmp	r3, #0
    193a:	d001      	beq.n	1940 <sd_mmc_spi_card_init+0x60>
		return false;
    193c:	2300      	movs	r3, #0
    193e:	e085      	b.n	1a4c <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    1940:	4b48      	ldr	r3, [pc, #288]	; (1a64 <sd_mmc_spi_card_init+0x184>)
    1942:	4798      	blx	r3
    1944:	0003      	movs	r3, r0
    1946:	001a      	movs	r2, r3
    1948:	2301      	movs	r3, #1
    194a:	4053      	eors	r3, r2
    194c:	b2db      	uxtb	r3, r3
    194e:	2b00      	cmp	r3, #0
    1950:	d001      	beq.n	1956 <sd_mmc_spi_card_init+0x76>
		return false;
    1952:	2300      	movs	r3, #0
    1954:	e07a      	b.n	1a4c <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1956:	4b3f      	ldr	r3, [pc, #252]	; (1a54 <sd_mmc_spi_card_init+0x174>)
    1958:	681b      	ldr	r3, [r3, #0]
    195a:	7adb      	ldrb	r3, [r3, #11]
    195c:	001a      	movs	r2, r3
    195e:	2301      	movs	r3, #1
    1960:	4013      	ands	r3, r2
    1962:	d021      	beq.n	19a8 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    1964:	1dfb      	adds	r3, r7, #7
    1966:	781b      	ldrb	r3, [r3, #0]
    1968:	0018      	movs	r0, r3
    196a:	4b3f      	ldr	r3, [pc, #252]	; (1a68 <sd_mmc_spi_card_init+0x188>)
    196c:	4798      	blx	r3
    196e:	0003      	movs	r3, r0
    1970:	001a      	movs	r2, r3
    1972:	2301      	movs	r3, #1
    1974:	4053      	eors	r3, r2
    1976:	b2db      	uxtb	r3, r3
    1978:	2b00      	cmp	r3, #0
    197a:	d007      	beq.n	198c <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    197c:	4b35      	ldr	r3, [pc, #212]	; (1a54 <sd_mmc_spi_card_init+0x174>)
    197e:	681b      	ldr	r3, [r3, #0]
    1980:	2202      	movs	r2, #2
    1982:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    1984:	4b39      	ldr	r3, [pc, #228]	; (1a6c <sd_mmc_spi_card_init+0x18c>)
    1986:	4798      	blx	r3
    1988:	0003      	movs	r3, r0
    198a:	e05f      	b.n	1a4c <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    198c:	4b38      	ldr	r3, [pc, #224]	; (1a70 <sd_mmc_spi_card_init+0x190>)
    198e:	2100      	movs	r1, #0
    1990:	0018      	movs	r0, r3
    1992:	4b32      	ldr	r3, [pc, #200]	; (1a5c <sd_mmc_spi_card_init+0x17c>)
    1994:	4798      	blx	r3
    1996:	0003      	movs	r3, r0
    1998:	001a      	movs	r2, r3
    199a:	2301      	movs	r3, #1
    199c:	4053      	eors	r3, r2
    199e:	b2db      	uxtb	r3, r3
    19a0:	2b00      	cmp	r3, #0
    19a2:	d001      	beq.n	19a8 <sd_mmc_spi_card_init+0xc8>
			return false;
    19a4:	2300      	movs	r3, #0
    19a6:	e051      	b.n	1a4c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    19a8:	4b2a      	ldr	r3, [pc, #168]	; (1a54 <sd_mmc_spi_card_init+0x174>)
    19aa:	681b      	ldr	r3, [r3, #0]
    19ac:	7adb      	ldrb	r3, [r3, #11]
    19ae:	001a      	movs	r2, r3
    19b0:	2301      	movs	r3, #1
    19b2:	4013      	ands	r3, r2
    19b4:	d017      	beq.n	19e6 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    19b6:	4b2f      	ldr	r3, [pc, #188]	; (1a74 <sd_mmc_spi_card_init+0x194>)
    19b8:	4798      	blx	r3
    19ba:	0003      	movs	r3, r0
    19bc:	001a      	movs	r2, r3
    19be:	2301      	movs	r3, #1
    19c0:	4053      	eors	r3, r2
    19c2:	b2db      	uxtb	r3, r3
    19c4:	2b00      	cmp	r3, #0
    19c6:	d001      	beq.n	19cc <sd_mmc_spi_card_init+0xec>
			return false;
    19c8:	2300      	movs	r3, #0
    19ca:	e03f      	b.n	1a4c <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    19cc:	4b2a      	ldr	r3, [pc, #168]	; (1a78 <sd_mmc_spi_card_init+0x198>)
    19ce:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    19d0:	4b2a      	ldr	r3, [pc, #168]	; (1a7c <sd_mmc_spi_card_init+0x19c>)
    19d2:	4798      	blx	r3
    19d4:	0003      	movs	r3, r0
    19d6:	001a      	movs	r2, r3
    19d8:	2301      	movs	r3, #1
    19da:	4053      	eors	r3, r2
    19dc:	b2db      	uxtb	r3, r3
    19de:	2b00      	cmp	r3, #0
    19e0:	d001      	beq.n	19e6 <sd_mmc_spi_card_init+0x106>
			return false;
    19e2:	2300      	movs	r3, #0
    19e4:	e032      	b.n	1a4c <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    19e6:	4b1b      	ldr	r3, [pc, #108]	; (1a54 <sd_mmc_spi_card_init+0x174>)
    19e8:	681b      	ldr	r3, [r3, #0]
    19ea:	7adb      	ldrb	r3, [r3, #11]
    19ec:	001a      	movs	r2, r3
    19ee:	2301      	movs	r3, #1
    19f0:	4013      	ands	r3, r2
    19f2:	d016      	beq.n	1a22 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    19f4:	4b17      	ldr	r3, [pc, #92]	; (1a54 <sd_mmc_spi_card_init+0x174>)
    19f6:	681b      	ldr	r3, [r3, #0]
    19f8:	7adb      	ldrb	r3, [r3, #11]
    19fa:	001a      	movs	r2, r3
    19fc:	2308      	movs	r3, #8
    19fe:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1a00:	d10f      	bne.n	1a22 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1a02:	2380      	movs	r3, #128	; 0x80
    1a04:	009b      	lsls	r3, r3, #2
    1a06:	4a1e      	ldr	r2, [pc, #120]	; (1a80 <sd_mmc_spi_card_init+0x1a0>)
    1a08:	0019      	movs	r1, r3
    1a0a:	0010      	movs	r0, r2
    1a0c:	4b13      	ldr	r3, [pc, #76]	; (1a5c <sd_mmc_spi_card_init+0x17c>)
    1a0e:	4798      	blx	r3
    1a10:	0003      	movs	r3, r0
    1a12:	001a      	movs	r2, r3
    1a14:	2301      	movs	r3, #1
    1a16:	4053      	eors	r3, r2
    1a18:	b2db      	uxtb	r3, r3
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d001      	beq.n	1a22 <sd_mmc_spi_card_init+0x142>
			return false;
    1a1e:	2300      	movs	r3, #0
    1a20:	e014      	b.n	1a4c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1a22:	4b0c      	ldr	r3, [pc, #48]	; (1a54 <sd_mmc_spi_card_init+0x174>)
    1a24:	681b      	ldr	r3, [r3, #0]
    1a26:	7adb      	ldrb	r3, [r3, #11]
    1a28:	001a      	movs	r2, r3
    1a2a:	2301      	movs	r3, #1
    1a2c:	4013      	ands	r3, r2
    1a2e:	d00a      	beq.n	1a46 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    1a30:	4b14      	ldr	r3, [pc, #80]	; (1a84 <sd_mmc_spi_card_init+0x1a4>)
    1a32:	4798      	blx	r3
    1a34:	0003      	movs	r3, r0
    1a36:	001a      	movs	r2, r3
    1a38:	2301      	movs	r3, #1
    1a3a:	4053      	eors	r3, r2
    1a3c:	b2db      	uxtb	r3, r3
    1a3e:	2b00      	cmp	r3, #0
    1a40:	d001      	beq.n	1a46 <sd_mmc_spi_card_init+0x166>
			return false;
    1a42:	2300      	movs	r3, #0
    1a44:	e002      	b.n	1a4c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1a46:	4b10      	ldr	r3, [pc, #64]	; (1a88 <sd_mmc_spi_card_init+0x1a8>)
    1a48:	4798      	blx	r3
	return true;
    1a4a:	2301      	movs	r3, #1
}
    1a4c:	0018      	movs	r0, r3
    1a4e:	46bd      	mov	sp, r7
    1a50:	b002      	add	sp, #8
    1a52:	bd80      	pop	{r7, pc}
    1a54:	200000e0 	.word	0x200000e0
    1a58:	00002ae5 	.word	0x00002ae5
    1a5c:	00002b31 	.word	0x00002b31
    1a60:	00001235 	.word	0x00001235
    1a64:	00001229 	.word	0x00001229
    1a68:	00001145 	.word	0x00001145
    1a6c:	00001a8d 	.word	0x00001a8d
    1a70:	0000113b 	.word	0x0000113b
    1a74:	000013d1 	.word	0x000013d1
    1a78:	00001571 	.word	0x00001571
    1a7c:	000016b9 	.word	0x000016b9
    1a80:	00001110 	.word	0x00001110
    1a84:	0000165d 	.word	0x0000165d
    1a88:	00001885 	.word	0x00001885

00001a8c <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	b082      	sub	sp, #8
    1a90:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1a92:	2388      	movs	r3, #136	; 0x88
    1a94:	015b      	lsls	r3, r3, #5
    1a96:	2100      	movs	r1, #0
    1a98:	0018      	movs	r0, r3
    1a9a:	4b32      	ldr	r3, [pc, #200]	; (1b64 <sd_mmc_spi_install_mmc+0xd8>)
    1a9c:	4798      	blx	r3
    1a9e:	0003      	movs	r3, r0
    1aa0:	001a      	movs	r2, r3
    1aa2:	2301      	movs	r3, #1
    1aa4:	4053      	eors	r3, r2
    1aa6:	b2db      	uxtb	r3, r3
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	d001      	beq.n	1ab0 <sd_mmc_spi_install_mmc+0x24>
		return false;
    1aac:	2300      	movs	r3, #0
    1aae:	e055      	b.n	1b5c <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    1ab0:	4b2d      	ldr	r3, [pc, #180]	; (1b68 <sd_mmc_spi_install_mmc+0xdc>)
    1ab2:	4798      	blx	r3
    1ab4:	0003      	movs	r3, r0
    1ab6:	001a      	movs	r2, r3
    1ab8:	2301      	movs	r3, #1
    1aba:	4053      	eors	r3, r2
    1abc:	b2db      	uxtb	r3, r3
    1abe:	2b00      	cmp	r3, #0
    1ac0:	d001      	beq.n	1ac6 <sd_mmc_spi_install_mmc+0x3a>
		return false;
    1ac2:	2300      	movs	r3, #0
    1ac4:	e04a      	b.n	1b5c <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1ac6:	4b29      	ldr	r3, [pc, #164]	; (1b6c <sd_mmc_spi_install_mmc+0xe0>)
    1ac8:	2100      	movs	r1, #0
    1aca:	0018      	movs	r0, r3
    1acc:	4b25      	ldr	r3, [pc, #148]	; (1b64 <sd_mmc_spi_install_mmc+0xd8>)
    1ace:	4798      	blx	r3
    1ad0:	0003      	movs	r3, r0
    1ad2:	001a      	movs	r2, r3
    1ad4:	2301      	movs	r3, #1
    1ad6:	4053      	eors	r3, r2
    1ad8:	b2db      	uxtb	r3, r3
    1ada:	2b00      	cmp	r3, #0
    1adc:	d001      	beq.n	1ae2 <sd_mmc_spi_install_mmc+0x56>
		return false;
    1ade:	2300      	movs	r3, #0
    1ae0:	e03c      	b.n	1b5c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    1ae2:	4b23      	ldr	r3, [pc, #140]	; (1b70 <sd_mmc_spi_install_mmc+0xe4>)
    1ae4:	4798      	blx	r3
    1ae6:	0003      	movs	r3, r0
    1ae8:	001a      	movs	r2, r3
    1aea:	2301      	movs	r3, #1
    1aec:	4053      	eors	r3, r2
    1aee:	b2db      	uxtb	r3, r3
    1af0:	2b00      	cmp	r3, #0
    1af2:	d001      	beq.n	1af8 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    1af4:	2300      	movs	r3, #0
    1af6:	e031      	b.n	1b5c <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    1af8:	4b1e      	ldr	r3, [pc, #120]	; (1b74 <sd_mmc_spi_install_mmc+0xe8>)
    1afa:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    1afc:	4b1e      	ldr	r3, [pc, #120]	; (1b78 <sd_mmc_spi_install_mmc+0xec>)
    1afe:	681b      	ldr	r3, [r3, #0]
    1b00:	7b1b      	ldrb	r3, [r3, #12]
    1b02:	2b3f      	cmp	r3, #63	; 0x3f
    1b04:	d90c      	bls.n	1b20 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    1b06:	1dfb      	adds	r3, r7, #7
    1b08:	0018      	movs	r0, r3
    1b0a:	4b1c      	ldr	r3, [pc, #112]	; (1b7c <sd_mmc_spi_install_mmc+0xf0>)
    1b0c:	4798      	blx	r3
    1b0e:	0003      	movs	r3, r0
    1b10:	001a      	movs	r2, r3
    1b12:	2301      	movs	r3, #1
    1b14:	4053      	eors	r3, r2
    1b16:	b2db      	uxtb	r3, r3
    1b18:	2b00      	cmp	r3, #0
    1b1a:	d001      	beq.n	1b20 <sd_mmc_spi_install_mmc+0x94>
			return false;
    1b1c:	2300      	movs	r3, #0
    1b1e:	e01d      	b.n	1b5c <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1b20:	2380      	movs	r3, #128	; 0x80
    1b22:	009b      	lsls	r3, r3, #2
    1b24:	4a16      	ldr	r2, [pc, #88]	; (1b80 <sd_mmc_spi_install_mmc+0xf4>)
    1b26:	0019      	movs	r1, r3
    1b28:	0010      	movs	r0, r2
    1b2a:	4b0e      	ldr	r3, [pc, #56]	; (1b64 <sd_mmc_spi_install_mmc+0xd8>)
    1b2c:	4798      	blx	r3
    1b2e:	0003      	movs	r3, r0
    1b30:	001a      	movs	r2, r3
    1b32:	2301      	movs	r3, #1
    1b34:	4053      	eors	r3, r2
    1b36:	b2db      	uxtb	r3, r3
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d001      	beq.n	1b40 <sd_mmc_spi_install_mmc+0xb4>
		return false;
    1b3c:	2300      	movs	r3, #0
    1b3e:	e00d      	b.n	1b5c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    1b40:	4b10      	ldr	r3, [pc, #64]	; (1b84 <sd_mmc_spi_install_mmc+0xf8>)
    1b42:	4798      	blx	r3
    1b44:	0003      	movs	r3, r0
    1b46:	001a      	movs	r2, r3
    1b48:	2301      	movs	r3, #1
    1b4a:	4053      	eors	r3, r2
    1b4c:	b2db      	uxtb	r3, r3
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d001      	beq.n	1b56 <sd_mmc_spi_install_mmc+0xca>
		return false;
    1b52:	2300      	movs	r3, #0
    1b54:	e002      	b.n	1b5c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1b56:	4b0c      	ldr	r3, [pc, #48]	; (1b88 <sd_mmc_spi_install_mmc+0xfc>)
    1b58:	4798      	blx	r3
	return true;
    1b5a:	2301      	movs	r3, #1
}
    1b5c:	0018      	movs	r0, r3
    1b5e:	46bd      	mov	sp, r7
    1b60:	b002      	add	sp, #8
    1b62:	bd80      	pop	{r7, pc}
    1b64:	00002b31 	.word	0x00002b31
    1b68:	00001099 	.word	0x00001099
    1b6c:	0000113b 	.word	0x0000113b
    1b70:	000013d1 	.word	0x000013d1
    1b74:	00001441 	.word	0x00001441
    1b78:	200000e0 	.word	0x200000e0
    1b7c:	000012a5 	.word	0x000012a5
    1b80:	00001110 	.word	0x00001110
    1b84:	0000165d 	.word	0x0000165d
    1b88:	00001885 	.word	0x00001885

00001b8c <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
    1b8c:	b580      	push	{r7, lr}
    1b8e:	b082      	sub	sp, #8
    1b90:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1b92:	1dfb      	adds	r3, r7, #7
    1b94:	2200      	movs	r2, #0
    1b96:	701a      	strb	r2, [r3, #0]
    1b98:	e00c      	b.n	1bb4 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    1b9a:	1dfb      	adds	r3, r7, #7
    1b9c:	781b      	ldrb	r3, [r3, #0]
    1b9e:	4a0c      	ldr	r2, [pc, #48]	; (1bd0 <sd_mmc_init+0x44>)
    1ba0:	015b      	lsls	r3, r3, #5
    1ba2:	18d3      	adds	r3, r2, r3
    1ba4:	330a      	adds	r3, #10
    1ba6:	2204      	movs	r2, #4
    1ba8:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1baa:	1dfb      	adds	r3, r7, #7
    1bac:	781a      	ldrb	r2, [r3, #0]
    1bae:	1dfb      	adds	r3, r7, #7
    1bb0:	3201      	adds	r2, #1
    1bb2:	701a      	strb	r2, [r3, #0]
    1bb4:	1dfb      	adds	r3, r7, #7
    1bb6:	781b      	ldrb	r3, [r3, #0]
    1bb8:	2b00      	cmp	r3, #0
    1bba:	d0ee      	beq.n	1b9a <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    1bbc:	4b05      	ldr	r3, [pc, #20]	; (1bd4 <sd_mmc_init+0x48>)
    1bbe:	22ff      	movs	r2, #255	; 0xff
    1bc0:	701a      	strb	r2, [r3, #0]
	driver_init();
    1bc2:	4b05      	ldr	r3, [pc, #20]	; (1bd8 <sd_mmc_init+0x4c>)
    1bc4:	4798      	blx	r3
}
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	46bd      	mov	sp, r7
    1bca:	b002      	add	sp, #8
    1bcc:	bd80      	pop	{r7, pc}
    1bce:	46c0      	nop			; (mov r8, r8)
    1bd0:	200000bc 	.word	0x200000bc
    1bd4:	200000dc 	.word	0x200000dc
    1bd8:	00002951 	.word	0x00002951

00001bdc <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    1bdc:	b590      	push	{r4, r7, lr}
    1bde:	b085      	sub	sp, #20
    1be0:	af00      	add	r7, sp, #0
    1be2:	0002      	movs	r2, r0
    1be4:	1dfb      	adds	r3, r7, #7
    1be6:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1be8:	230f      	movs	r3, #15
    1bea:	18fc      	adds	r4, r7, r3
    1bec:	1dfb      	adds	r3, r7, #7
    1bee:	781b      	ldrb	r3, [r3, #0]
    1bf0:	0018      	movs	r0, r3
    1bf2:	4b13      	ldr	r3, [pc, #76]	; (1c40 <sd_mmc_check+0x64>)
    1bf4:	4798      	blx	r3
    1bf6:	0003      	movs	r3, r0
    1bf8:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    1bfa:	230f      	movs	r3, #15
    1bfc:	18fb      	adds	r3, r7, r3
    1bfe:	781b      	ldrb	r3, [r3, #0]
    1c00:	2b01      	cmp	r3, #1
    1c02:	d005      	beq.n	1c10 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    1c04:	4b0f      	ldr	r3, [pc, #60]	; (1c44 <sd_mmc_check+0x68>)
    1c06:	4798      	blx	r3
		return sd_mmc_err;
    1c08:	230f      	movs	r3, #15
    1c0a:	18fb      	adds	r3, r7, r3
    1c0c:	781b      	ldrb	r3, [r3, #0]
    1c0e:	e012      	b.n	1c36 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    1c10:	4b0d      	ldr	r3, [pc, #52]	; (1c48 <sd_mmc_check+0x6c>)
    1c12:	4798      	blx	r3
    1c14:	1e03      	subs	r3, r0, #0
    1c16:	d007      	beq.n	1c28 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    1c18:	4b0c      	ldr	r3, [pc, #48]	; (1c4c <sd_mmc_check+0x70>)
    1c1a:	681b      	ldr	r3, [r3, #0]
    1c1c:	2200      	movs	r2, #0
    1c1e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    1c20:	4b08      	ldr	r3, [pc, #32]	; (1c44 <sd_mmc_check+0x68>)
    1c22:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    1c24:	2301      	movs	r3, #1
    1c26:	e006      	b.n	1c36 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    1c28:	4b08      	ldr	r3, [pc, #32]	; (1c4c <sd_mmc_check+0x70>)
    1c2a:	681b      	ldr	r3, [r3, #0]
    1c2c:	2203      	movs	r2, #3
    1c2e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    1c30:	4b04      	ldr	r3, [pc, #16]	; (1c44 <sd_mmc_check+0x68>)
    1c32:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    1c34:	2303      	movs	r3, #3
}
    1c36:	0018      	movs	r0, r3
    1c38:	46bd      	mov	sp, r7
    1c3a:	b005      	add	sp, #20
    1c3c:	bd90      	pop	{r4, r7, pc}
    1c3e:	46c0      	nop			; (mov r8, r8)
    1c40:	000017c1 	.word	0x000017c1
    1c44:	000018bd 	.word	0x000018bd
    1c48:	000018e1 	.word	0x000018e1
    1c4c:	200000e0 	.word	0x200000e0

00001c50 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    1c50:	b580      	push	{r7, lr}
    1c52:	b082      	sub	sp, #8
    1c54:	af00      	add	r7, sp, #0
    1c56:	0002      	movs	r2, r0
    1c58:	1dfb      	adds	r3, r7, #7
    1c5a:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1c5c:	1dfb      	adds	r3, r7, #7
    1c5e:	781b      	ldrb	r3, [r3, #0]
    1c60:	0018      	movs	r0, r3
    1c62:	4b07      	ldr	r3, [pc, #28]	; (1c80 <sd_mmc_get_type+0x30>)
    1c64:	4798      	blx	r3
    1c66:	1e03      	subs	r3, r0, #0
    1c68:	d001      	beq.n	1c6e <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    1c6a:	2300      	movs	r3, #0
    1c6c:	e004      	b.n	1c78 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    1c6e:	4b05      	ldr	r3, [pc, #20]	; (1c84 <sd_mmc_get_type+0x34>)
    1c70:	4798      	blx	r3
	return sd_mmc_card->type;
    1c72:	4b05      	ldr	r3, [pc, #20]	; (1c88 <sd_mmc_get_type+0x38>)
    1c74:	681b      	ldr	r3, [r3, #0]
    1c76:	7adb      	ldrb	r3, [r3, #11]
}
    1c78:	0018      	movs	r0, r3
    1c7a:	46bd      	mov	sp, r7
    1c7c:	b002      	add	sp, #8
    1c7e:	bd80      	pop	{r7, pc}
    1c80:	000017c1 	.word	0x000017c1
    1c84:	000018bd 	.word	0x000018bd
    1c88:	200000e0 	.word	0x200000e0

00001c8c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    1c8c:	b580      	push	{r7, lr}
    1c8e:	b082      	sub	sp, #8
    1c90:	af00      	add	r7, sp, #0
    1c92:	0002      	movs	r2, r0
    1c94:	1dfb      	adds	r3, r7, #7
    1c96:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1c98:	1dfb      	adds	r3, r7, #7
    1c9a:	781b      	ldrb	r3, [r3, #0]
    1c9c:	0018      	movs	r0, r3
    1c9e:	4b07      	ldr	r3, [pc, #28]	; (1cbc <sd_mmc_get_capacity+0x30>)
    1ca0:	4798      	blx	r3
    1ca2:	1e03      	subs	r3, r0, #0
    1ca4:	d001      	beq.n	1caa <sd_mmc_get_capacity+0x1e>
		return 0;
    1ca6:	2300      	movs	r3, #0
    1ca8:	e004      	b.n	1cb4 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    1caa:	4b05      	ldr	r3, [pc, #20]	; (1cc0 <sd_mmc_get_capacity+0x34>)
    1cac:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1cae:	4b05      	ldr	r3, [pc, #20]	; (1cc4 <sd_mmc_get_capacity+0x38>)
    1cb0:	681b      	ldr	r3, [r3, #0]
    1cb2:	685b      	ldr	r3, [r3, #4]
}
    1cb4:	0018      	movs	r0, r3
    1cb6:	46bd      	mov	sp, r7
    1cb8:	b002      	add	sp, #8
    1cba:	bd80      	pop	{r7, pc}
    1cbc:	000017c1 	.word	0x000017c1
    1cc0:	000018bd 	.word	0x000018bd
    1cc4:	200000e0 	.word	0x200000e0

00001cc8 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    1cc8:	b580      	push	{r7, lr}
    1cca:	b082      	sub	sp, #8
    1ccc:	af00      	add	r7, sp, #0
    1cce:	0002      	movs	r2, r0
    1cd0:	1dfb      	adds	r3, r7, #7
    1cd2:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    1cd4:	2300      	movs	r3, #0
}
    1cd6:	0018      	movs	r0, r3
    1cd8:	46bd      	mov	sp, r7
    1cda:	b002      	add	sp, #8
    1cdc:	bd80      	pop	{r7, pc}
	...

00001ce0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1ce0:	b590      	push	{r4, r7, lr}
    1ce2:	b089      	sub	sp, #36	; 0x24
    1ce4:	af02      	add	r7, sp, #8
    1ce6:	6039      	str	r1, [r7, #0]
    1ce8:	0011      	movs	r1, r2
    1cea:	1dfb      	adds	r3, r7, #7
    1cec:	1c02      	adds	r2, r0, #0
    1cee:	701a      	strb	r2, [r3, #0]
    1cf0:	1d3b      	adds	r3, r7, #4
    1cf2:	1c0a      	adds	r2, r1, #0
    1cf4:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1cf6:	230f      	movs	r3, #15
    1cf8:	18fc      	adds	r4, r7, r3
    1cfa:	1dfb      	adds	r3, r7, #7
    1cfc:	781b      	ldrb	r3, [r3, #0]
    1cfe:	0018      	movs	r0, r3
    1d00:	4b29      	ldr	r3, [pc, #164]	; (1da8 <sd_mmc_init_read_blocks+0xc8>)
    1d02:	4798      	blx	r3
    1d04:	0003      	movs	r3, r0
    1d06:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1d08:	230f      	movs	r3, #15
    1d0a:	18fb      	adds	r3, r7, r3
    1d0c:	781b      	ldrb	r3, [r3, #0]
    1d0e:	2b00      	cmp	r3, #0
    1d10:	d003      	beq.n	1d1a <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    1d12:	230f      	movs	r3, #15
    1d14:	18fb      	adds	r3, r7, r3
    1d16:	781b      	ldrb	r3, [r3, #0]
    1d18:	e041      	b.n	1d9e <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    1d1a:	4b24      	ldr	r3, [pc, #144]	; (1dac <sd_mmc_init_read_blocks+0xcc>)
    1d1c:	4798      	blx	r3
    1d1e:	0003      	movs	r3, r0
    1d20:	001a      	movs	r2, r3
    1d22:	2301      	movs	r3, #1
    1d24:	4053      	eors	r3, r2
    1d26:	b2db      	uxtb	r3, r3
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d003      	beq.n	1d34 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    1d2c:	4b20      	ldr	r3, [pc, #128]	; (1db0 <sd_mmc_init_read_blocks+0xd0>)
    1d2e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1d30:	2305      	movs	r3, #5
    1d32:	e034      	b.n	1d9e <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
    1d34:	1d3b      	adds	r3, r7, #4
    1d36:	881b      	ldrh	r3, [r3, #0]
    1d38:	2b01      	cmp	r3, #1
    1d3a:	d902      	bls.n	1d42 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    1d3c:	4b1d      	ldr	r3, [pc, #116]	; (1db4 <sd_mmc_init_read_blocks+0xd4>)
    1d3e:	617b      	str	r3, [r7, #20]
    1d40:	e001      	b.n	1d46 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    1d42:	4b1d      	ldr	r3, [pc, #116]	; (1db8 <sd_mmc_init_read_blocks+0xd8>)
    1d44:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1d46:	4b1d      	ldr	r3, [pc, #116]	; (1dbc <sd_mmc_init_read_blocks+0xdc>)
    1d48:	681b      	ldr	r3, [r3, #0]
    1d4a:	7adb      	ldrb	r3, [r3, #11]
    1d4c:	001a      	movs	r2, r3
    1d4e:	2308      	movs	r3, #8
    1d50:	4013      	ands	r3, r2
    1d52:	d002      	beq.n	1d5a <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    1d54:	683b      	ldr	r3, [r7, #0]
    1d56:	613b      	str	r3, [r7, #16]
    1d58:	e002      	b.n	1d60 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1d5a:	683b      	ldr	r3, [r7, #0]
    1d5c:	025b      	lsls	r3, r3, #9
    1d5e:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1d60:	1d3b      	adds	r3, r7, #4
    1d62:	881c      	ldrh	r4, [r3, #0]
    1d64:	2380      	movs	r3, #128	; 0x80
    1d66:	009a      	lsls	r2, r3, #2
    1d68:	6939      	ldr	r1, [r7, #16]
    1d6a:	6978      	ldr	r0, [r7, #20]
    1d6c:	2301      	movs	r3, #1
    1d6e:	9300      	str	r3, [sp, #0]
    1d70:	0023      	movs	r3, r4
    1d72:	4c13      	ldr	r4, [pc, #76]	; (1dc0 <sd_mmc_init_read_blocks+0xe0>)
    1d74:	47a0      	blx	r4
    1d76:	0003      	movs	r3, r0
    1d78:	001a      	movs	r2, r3
    1d7a:	2301      	movs	r3, #1
    1d7c:	4053      	eors	r3, r2
    1d7e:	b2db      	uxtb	r3, r3
    1d80:	2b00      	cmp	r3, #0
    1d82:	d003      	beq.n	1d8c <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    1d84:	4b0a      	ldr	r3, [pc, #40]	; (1db0 <sd_mmc_init_read_blocks+0xd0>)
    1d86:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1d88:	2305      	movs	r3, #5
    1d8a:	e008      	b.n	1d9e <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1d8c:	4b0d      	ldr	r3, [pc, #52]	; (1dc4 <sd_mmc_init_read_blocks+0xe4>)
    1d8e:	1d3a      	adds	r2, r7, #4
    1d90:	8812      	ldrh	r2, [r2, #0]
    1d92:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1d94:	4b0c      	ldr	r3, [pc, #48]	; (1dc8 <sd_mmc_init_read_blocks+0xe8>)
    1d96:	1d3a      	adds	r2, r7, #4
    1d98:	8812      	ldrh	r2, [r2, #0]
    1d9a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1d9c:	2300      	movs	r3, #0
}
    1d9e:	0018      	movs	r0, r3
    1da0:	46bd      	mov	sp, r7
    1da2:	b007      	add	sp, #28
    1da4:	bd90      	pop	{r4, r7, pc}
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	000017c1 	.word	0x000017c1
    1dac:	0000165d 	.word	0x0000165d
    1db0:	000018bd 	.word	0x000018bd
    1db4:	00101112 	.word	0x00101112
    1db8:	00081111 	.word	0x00081111
    1dbc:	200000e0 	.word	0x200000e0
    1dc0:	00002b59 	.word	0x00002b59
    1dc4:	200000e6 	.word	0x200000e6
    1dc8:	200000e4 	.word	0x200000e4

00001dcc <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    1dcc:	b580      	push	{r7, lr}
    1dce:	b082      	sub	sp, #8
    1dd0:	af00      	add	r7, sp, #0
    1dd2:	6078      	str	r0, [r7, #4]
    1dd4:	000a      	movs	r2, r1
    1dd6:	1cbb      	adds	r3, r7, #2
    1dd8:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    1dda:	1cbb      	adds	r3, r7, #2
    1ddc:	881a      	ldrh	r2, [r3, #0]
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	0011      	movs	r1, r2
    1de2:	0018      	movs	r0, r3
    1de4:	4b0d      	ldr	r3, [pc, #52]	; (1e1c <sd_mmc_start_read_blocks+0x50>)
    1de6:	4798      	blx	r3
    1de8:	0003      	movs	r3, r0
    1dea:	001a      	movs	r2, r3
    1dec:	2301      	movs	r3, #1
    1dee:	4053      	eors	r3, r2
    1df0:	b2db      	uxtb	r3, r3
    1df2:	2b00      	cmp	r3, #0
    1df4:	d004      	beq.n	1e00 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    1df6:	4b0a      	ldr	r3, [pc, #40]	; (1e20 <sd_mmc_start_read_blocks+0x54>)
    1df8:	2200      	movs	r2, #0
    1dfa:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1dfc:	2305      	movs	r3, #5
    1dfe:	e008      	b.n	1e12 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    1e00:	4b07      	ldr	r3, [pc, #28]	; (1e20 <sd_mmc_start_read_blocks+0x54>)
    1e02:	881a      	ldrh	r2, [r3, #0]
    1e04:	1cbb      	adds	r3, r7, #2
    1e06:	881b      	ldrh	r3, [r3, #0]
    1e08:	1ad3      	subs	r3, r2, r3
    1e0a:	b29a      	uxth	r2, r3
    1e0c:	4b04      	ldr	r3, [pc, #16]	; (1e20 <sd_mmc_start_read_blocks+0x54>)
    1e0e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1e10:	2300      	movs	r3, #0
}
    1e12:	0018      	movs	r0, r3
    1e14:	46bd      	mov	sp, r7
    1e16:	b002      	add	sp, #8
    1e18:	bd80      	pop	{r7, pc}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	00002e29 	.word	0x00002e29
    1e20:	200000e6 	.word	0x200000e6

00001e24 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    1e24:	b580      	push	{r7, lr}
    1e26:	b082      	sub	sp, #8
    1e28:	af00      	add	r7, sp, #0
    1e2a:	0002      	movs	r2, r0
    1e2c:	1dfb      	adds	r3, r7, #7
    1e2e:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    1e30:	4b1c      	ldr	r3, [pc, #112]	; (1ea4 <sd_mmc_wait_end_of_read_blocks+0x80>)
    1e32:	4798      	blx	r3
    1e34:	0003      	movs	r3, r0
    1e36:	001a      	movs	r2, r3
    1e38:	2301      	movs	r3, #1
    1e3a:	4053      	eors	r3, r2
    1e3c:	b2db      	uxtb	r3, r3
    1e3e:	2b00      	cmp	r3, #0
    1e40:	d001      	beq.n	1e46 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    1e42:	2305      	movs	r3, #5
    1e44:	e029      	b.n	1e9a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    1e46:	1dfb      	adds	r3, r7, #7
    1e48:	781b      	ldrb	r3, [r3, #0]
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	d003      	beq.n	1e56 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    1e4e:	4b16      	ldr	r3, [pc, #88]	; (1ea8 <sd_mmc_wait_end_of_read_blocks+0x84>)
    1e50:	2200      	movs	r2, #0
    1e52:	801a      	strh	r2, [r3, #0]
    1e54:	e005      	b.n	1e62 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    1e56:	4b14      	ldr	r3, [pc, #80]	; (1ea8 <sd_mmc_wait_end_of_read_blocks+0x84>)
    1e58:	881b      	ldrh	r3, [r3, #0]
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	d001      	beq.n	1e62 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    1e5e:	2300      	movs	r3, #0
    1e60:	e01b      	b.n	1e9a <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1e62:	4b12      	ldr	r3, [pc, #72]	; (1eac <sd_mmc_wait_end_of_read_blocks+0x88>)
    1e64:	881b      	ldrh	r3, [r3, #0]
    1e66:	2b01      	cmp	r3, #1
    1e68:	d103      	bne.n	1e72 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    1e6a:	4b11      	ldr	r3, [pc, #68]	; (1eb0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    1e6c:	4798      	blx	r3
		return SD_MMC_OK;
    1e6e:	2300      	movs	r3, #0
    1e70:	e013      	b.n	1e9a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1e72:	4b10      	ldr	r3, [pc, #64]	; (1eb4 <sd_mmc_wait_end_of_read_blocks+0x90>)
    1e74:	2100      	movs	r1, #0
    1e76:	0018      	movs	r0, r3
    1e78:	4b0f      	ldr	r3, [pc, #60]	; (1eb8 <sd_mmc_wait_end_of_read_blocks+0x94>)
    1e7a:	4798      	blx	r3
    1e7c:	0003      	movs	r3, r0
    1e7e:	001a      	movs	r2, r3
    1e80:	2301      	movs	r3, #1
    1e82:	4053      	eors	r3, r2
    1e84:	b2db      	uxtb	r3, r3
    1e86:	2b00      	cmp	r3, #0
    1e88:	d004      	beq.n	1e94 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    1e8a:	4b0a      	ldr	r3, [pc, #40]	; (1eb4 <sd_mmc_wait_end_of_read_blocks+0x90>)
    1e8c:	2100      	movs	r1, #0
    1e8e:	0018      	movs	r0, r3
    1e90:	4b09      	ldr	r3, [pc, #36]	; (1eb8 <sd_mmc_wait_end_of_read_blocks+0x94>)
    1e92:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    1e94:	4b06      	ldr	r3, [pc, #24]	; (1eb0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    1e96:	4798      	blx	r3
	return SD_MMC_OK;
    1e98:	2300      	movs	r3, #0
}
    1e9a:	0018      	movs	r0, r3
    1e9c:	46bd      	mov	sp, r7
    1e9e:	b002      	add	sp, #8
    1ea0:	bd80      	pop	{r7, pc}
    1ea2:	46c0      	nop			; (mov r8, r8)
    1ea4:	00002ecd 	.word	0x00002ecd
    1ea8:	200000e6 	.word	0x200000e6
    1eac:	200000e4 	.word	0x200000e4
    1eb0:	000018bd 	.word	0x000018bd
    1eb4:	0000310c 	.word	0x0000310c
    1eb8:	00002b31 	.word	0x00002b31

00001ebc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1ebc:	b590      	push	{r4, r7, lr}
    1ebe:	b089      	sub	sp, #36	; 0x24
    1ec0:	af02      	add	r7, sp, #8
    1ec2:	6039      	str	r1, [r7, #0]
    1ec4:	0011      	movs	r1, r2
    1ec6:	1dfb      	adds	r3, r7, #7
    1ec8:	1c02      	adds	r2, r0, #0
    1eca:	701a      	strb	r2, [r3, #0]
    1ecc:	1d3b      	adds	r3, r7, #4
    1ece:	1c0a      	adds	r2, r1, #0
    1ed0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1ed2:	230f      	movs	r3, #15
    1ed4:	18fc      	adds	r4, r7, r3
    1ed6:	1dfb      	adds	r3, r7, #7
    1ed8:	781b      	ldrb	r3, [r3, #0]
    1eda:	0018      	movs	r0, r3
    1edc:	4b28      	ldr	r3, [pc, #160]	; (1f80 <sd_mmc_init_write_blocks+0xc4>)
    1ede:	4798      	blx	r3
    1ee0:	0003      	movs	r3, r0
    1ee2:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1ee4:	230f      	movs	r3, #15
    1ee6:	18fb      	adds	r3, r7, r3
    1ee8:	781b      	ldrb	r3, [r3, #0]
    1eea:	2b00      	cmp	r3, #0
    1eec:	d003      	beq.n	1ef6 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    1eee:	230f      	movs	r3, #15
    1ef0:	18fb      	adds	r3, r7, r3
    1ef2:	781b      	ldrb	r3, [r3, #0]
    1ef4:	e03f      	b.n	1f76 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    1ef6:	1dfb      	adds	r3, r7, #7
    1ef8:	781b      	ldrb	r3, [r3, #0]
    1efa:	0018      	movs	r0, r3
    1efc:	4b21      	ldr	r3, [pc, #132]	; (1f84 <sd_mmc_init_write_blocks+0xc8>)
    1efe:	4798      	blx	r3
    1f00:	1e03      	subs	r3, r0, #0
    1f02:	d003      	beq.n	1f0c <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    1f04:	4b20      	ldr	r3, [pc, #128]	; (1f88 <sd_mmc_init_write_blocks+0xcc>)
    1f06:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    1f08:	2307      	movs	r3, #7
    1f0a:	e034      	b.n	1f76 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    1f0c:	1d3b      	adds	r3, r7, #4
    1f0e:	881b      	ldrh	r3, [r3, #0]
    1f10:	2b01      	cmp	r3, #1
    1f12:	d902      	bls.n	1f1a <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    1f14:	4b1d      	ldr	r3, [pc, #116]	; (1f8c <sd_mmc_init_write_blocks+0xd0>)
    1f16:	617b      	str	r3, [r7, #20]
    1f18:	e001      	b.n	1f1e <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    1f1a:	4b1d      	ldr	r3, [pc, #116]	; (1f90 <sd_mmc_init_write_blocks+0xd4>)
    1f1c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1f1e:	4b1d      	ldr	r3, [pc, #116]	; (1f94 <sd_mmc_init_write_blocks+0xd8>)
    1f20:	681b      	ldr	r3, [r3, #0]
    1f22:	7adb      	ldrb	r3, [r3, #11]
    1f24:	001a      	movs	r2, r3
    1f26:	2308      	movs	r3, #8
    1f28:	4013      	ands	r3, r2
    1f2a:	d002      	beq.n	1f32 <sd_mmc_init_write_blocks+0x76>
		arg = start;
    1f2c:	683b      	ldr	r3, [r7, #0]
    1f2e:	613b      	str	r3, [r7, #16]
    1f30:	e002      	b.n	1f38 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1f32:	683b      	ldr	r3, [r7, #0]
    1f34:	025b      	lsls	r3, r3, #9
    1f36:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1f38:	1d3b      	adds	r3, r7, #4
    1f3a:	881c      	ldrh	r4, [r3, #0]
    1f3c:	2380      	movs	r3, #128	; 0x80
    1f3e:	009a      	lsls	r2, r3, #2
    1f40:	6939      	ldr	r1, [r7, #16]
    1f42:	6978      	ldr	r0, [r7, #20]
    1f44:	2301      	movs	r3, #1
    1f46:	9300      	str	r3, [sp, #0]
    1f48:	0023      	movs	r3, r4
    1f4a:	4c13      	ldr	r4, [pc, #76]	; (1f98 <sd_mmc_init_write_blocks+0xdc>)
    1f4c:	47a0      	blx	r4
    1f4e:	0003      	movs	r3, r0
    1f50:	001a      	movs	r2, r3
    1f52:	2301      	movs	r3, #1
    1f54:	4053      	eors	r3, r2
    1f56:	b2db      	uxtb	r3, r3
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d003      	beq.n	1f64 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    1f5c:	4b0a      	ldr	r3, [pc, #40]	; (1f88 <sd_mmc_init_write_blocks+0xcc>)
    1f5e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1f60:	2305      	movs	r3, #5
    1f62:	e008      	b.n	1f76 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1f64:	4b0d      	ldr	r3, [pc, #52]	; (1f9c <sd_mmc_init_write_blocks+0xe0>)
    1f66:	1d3a      	adds	r2, r7, #4
    1f68:	8812      	ldrh	r2, [r2, #0]
    1f6a:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1f6c:	4b0c      	ldr	r3, [pc, #48]	; (1fa0 <sd_mmc_init_write_blocks+0xe4>)
    1f6e:	1d3a      	adds	r2, r7, #4
    1f70:	8812      	ldrh	r2, [r2, #0]
    1f72:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1f74:	2300      	movs	r3, #0
}
    1f76:	0018      	movs	r0, r3
    1f78:	46bd      	mov	sp, r7
    1f7a:	b007      	add	sp, #28
    1f7c:	bd90      	pop	{r4, r7, pc}
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	000017c1 	.word	0x000017c1
    1f84:	00001cc9 	.word	0x00001cc9
    1f88:	000018bd 	.word	0x000018bd
    1f8c:	00109119 	.word	0x00109119
    1f90:	00089118 	.word	0x00089118
    1f94:	200000e0 	.word	0x200000e0
    1f98:	00002b59 	.word	0x00002b59
    1f9c:	200000e6 	.word	0x200000e6
    1fa0:	200000e4 	.word	0x200000e4

00001fa4 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1fa4:	b580      	push	{r7, lr}
    1fa6:	b082      	sub	sp, #8
    1fa8:	af00      	add	r7, sp, #0
    1faa:	6078      	str	r0, [r7, #4]
    1fac:	000a      	movs	r2, r1
    1fae:	1cbb      	adds	r3, r7, #2
    1fb0:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    1fb2:	1cbb      	adds	r3, r7, #2
    1fb4:	881a      	ldrh	r2, [r3, #0]
    1fb6:	687b      	ldr	r3, [r7, #4]
    1fb8:	0011      	movs	r1, r2
    1fba:	0018      	movs	r0, r3
    1fbc:	4b0d      	ldr	r3, [pc, #52]	; (1ff4 <sd_mmc_start_write_blocks+0x50>)
    1fbe:	4798      	blx	r3
    1fc0:	0003      	movs	r3, r0
    1fc2:	001a      	movs	r2, r3
    1fc4:	2301      	movs	r3, #1
    1fc6:	4053      	eors	r3, r2
    1fc8:	b2db      	uxtb	r3, r3
    1fca:	2b00      	cmp	r3, #0
    1fcc:	d004      	beq.n	1fd8 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    1fce:	4b0a      	ldr	r3, [pc, #40]	; (1ff8 <sd_mmc_start_write_blocks+0x54>)
    1fd0:	2200      	movs	r2, #0
    1fd2:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1fd4:	2305      	movs	r3, #5
    1fd6:	e008      	b.n	1fea <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    1fd8:	4b07      	ldr	r3, [pc, #28]	; (1ff8 <sd_mmc_start_write_blocks+0x54>)
    1fda:	881a      	ldrh	r2, [r3, #0]
    1fdc:	1cbb      	adds	r3, r7, #2
    1fde:	881b      	ldrh	r3, [r3, #0]
    1fe0:	1ad3      	subs	r3, r2, r3
    1fe2:	b29a      	uxth	r2, r3
    1fe4:	4b04      	ldr	r3, [pc, #16]	; (1ff8 <sd_mmc_start_write_blocks+0x54>)
    1fe6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1fe8:	2300      	movs	r3, #0
}
    1fea:	0018      	movs	r0, r3
    1fec:	46bd      	mov	sp, r7
    1fee:	b002      	add	sp, #8
    1ff0:	bd80      	pop	{r7, pc}
    1ff2:	46c0      	nop			; (mov r8, r8)
    1ff4:	00002ed9 	.word	0x00002ed9
    1ff8:	200000e6 	.word	0x200000e6

00001ffc <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    1ffc:	b580      	push	{r7, lr}
    1ffe:	b082      	sub	sp, #8
    2000:	af00      	add	r7, sp, #0
    2002:	0002      	movs	r2, r0
    2004:	1dfb      	adds	r3, r7, #7
    2006:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    2008:	4b13      	ldr	r3, [pc, #76]	; (2058 <STACK_SIZE+0x58>)
    200a:	4798      	blx	r3
    200c:	0003      	movs	r3, r0
    200e:	001a      	movs	r2, r3
    2010:	2301      	movs	r3, #1
    2012:	4053      	eors	r3, r2
    2014:	b2db      	uxtb	r3, r3
    2016:	2b00      	cmp	r3, #0
    2018:	d001      	beq.n	201e <STACK_SIZE+0x1e>
		return SD_MMC_ERR_COMM;
    201a:	2305      	movs	r3, #5
    201c:	e018      	b.n	2050 <STACK_SIZE+0x50>
	}
	if (abort) {
    201e:	1dfb      	adds	r3, r7, #7
    2020:	781b      	ldrb	r3, [r3, #0]
    2022:	2b00      	cmp	r3, #0
    2024:	d003      	beq.n	202e <STACK_SIZE+0x2e>
		sd_mmc_nb_block_remaining = 0;
    2026:	4b0d      	ldr	r3, [pc, #52]	; (205c <STACK_SIZE+0x5c>)
    2028:	2200      	movs	r2, #0
    202a:	801a      	strh	r2, [r3, #0]
    202c:	e005      	b.n	203a <STACK_SIZE+0x3a>
	} else if (sd_mmc_nb_block_remaining) {
    202e:	4b0b      	ldr	r3, [pc, #44]	; (205c <STACK_SIZE+0x5c>)
    2030:	881b      	ldrh	r3, [r3, #0]
    2032:	2b00      	cmp	r3, #0
    2034:	d001      	beq.n	203a <STACK_SIZE+0x3a>
		return SD_MMC_OK;
    2036:	2300      	movs	r3, #0
    2038:	e00a      	b.n	2050 <STACK_SIZE+0x50>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    203a:	4b09      	ldr	r3, [pc, #36]	; (2060 <STACK_SIZE+0x60>)
    203c:	881b      	ldrh	r3, [r3, #0]
    203e:	2b01      	cmp	r3, #1
    2040:	d103      	bne.n	204a <STACK_SIZE+0x4a>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    2042:	4b08      	ldr	r3, [pc, #32]	; (2064 <STACK_SIZE+0x64>)
    2044:	4798      	blx	r3
		return SD_MMC_OK;
    2046:	2300      	movs	r3, #0
    2048:	e002      	b.n	2050 <STACK_SIZE+0x50>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    204a:	4b06      	ldr	r3, [pc, #24]	; (2064 <STACK_SIZE+0x64>)
    204c:	4798      	blx	r3
	return SD_MMC_OK;
    204e:	2300      	movs	r3, #0
}
    2050:	0018      	movs	r0, r3
    2052:	46bd      	mov	sp, r7
    2054:	b002      	add	sp, #8
    2056:	bd80      	pop	{r7, pc}
    2058:	00002f99 	.word	0x00002f99
    205c:	200000e6 	.word	0x200000e6
    2060:	200000e4 	.word	0x200000e4
    2064:	000018bd 	.word	0x000018bd

00002068 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    2068:	b580      	push	{r7, lr}
    206a:	b082      	sub	sp, #8
    206c:	af00      	add	r7, sp, #0
    206e:	0002      	movs	r2, r0
    2070:	1dfb      	adds	r3, r7, #7
    2072:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    2074:	1dfb      	adds	r3, r7, #7
    2076:	781b      	ldrb	r3, [r3, #0]
    2078:	0018      	movs	r0, r3
    207a:	4b16      	ldr	r3, [pc, #88]	; (20d4 <sd_mmc_test_unit_ready+0x6c>)
    207c:	4798      	blx	r3
    207e:	0003      	movs	r3, r0
    2080:	2b01      	cmp	r3, #1
    2082:	d019      	beq.n	20b8 <sd_mmc_test_unit_ready+0x50>
    2084:	2b02      	cmp	r3, #2
    2086:	d019      	beq.n	20bc <sd_mmc_test_unit_ready+0x54>
    2088:	2b00      	cmp	r3, #0
    208a:	d11e      	bne.n	20ca <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    208c:	1dfb      	adds	r3, r7, #7
    208e:	781b      	ldrb	r3, [r3, #0]
    2090:	4a11      	ldr	r2, [pc, #68]	; (20d8 <sd_mmc_test_unit_ready+0x70>)
    2092:	5cd3      	ldrb	r3, [r2, r3]
    2094:	2b00      	cmp	r3, #0
    2096:	d001      	beq.n	209c <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    2098:	2302      	movs	r3, #2
    209a:	e017      	b.n	20cc <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    209c:	1dfb      	adds	r3, r7, #7
    209e:	781b      	ldrb	r3, [r3, #0]
    20a0:	0018      	movs	r0, r3
    20a2:	4b0e      	ldr	r3, [pc, #56]	; (20dc <sd_mmc_test_unit_ready+0x74>)
    20a4:	4798      	blx	r3
    20a6:	0003      	movs	r3, r0
    20a8:	001a      	movs	r2, r3
    20aa:	2303      	movs	r3, #3
    20ac:	4013      	ands	r3, r2
    20ae:	d001      	beq.n	20b4 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    20b0:	2300      	movs	r3, #0
    20b2:	e00b      	b.n	20cc <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    20b4:	2302      	movs	r3, #2
    20b6:	e009      	b.n	20cc <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    20b8:	2303      	movs	r3, #3
    20ba:	e007      	b.n	20cc <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    20bc:	1dfb      	adds	r3, r7, #7
    20be:	781b      	ldrb	r3, [r3, #0]
    20c0:	4a05      	ldr	r2, [pc, #20]	; (20d8 <sd_mmc_test_unit_ready+0x70>)
    20c2:	2100      	movs	r1, #0
    20c4:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    20c6:	2302      	movs	r3, #2
    20c8:	e000      	b.n	20cc <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    20ca:	2301      	movs	r3, #1
	}
}
    20cc:	0018      	movs	r0, r3
    20ce:	46bd      	mov	sp, r7
    20d0:	b002      	add	sp, #8
    20d2:	bd80      	pop	{r7, pc}
    20d4:	00001bdd 	.word	0x00001bdd
    20d8:	200000e8 	.word	0x200000e8
    20dc:	00001c51 	.word	0x00001c51

000020e0 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    20e0:	b580      	push	{r7, lr}
    20e2:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    20e4:	2000      	movs	r0, #0
    20e6:	4b03      	ldr	r3, [pc, #12]	; (20f4 <sd_mmc_test_unit_ready_0+0x14>)
    20e8:	4798      	blx	r3
    20ea:	0003      	movs	r3, r0
}
    20ec:	0018      	movs	r0, r3
    20ee:	46bd      	mov	sp, r7
    20f0:	bd80      	pop	{r7, pc}
    20f2:	46c0      	nop			; (mov r8, r8)
    20f4:	00002069 	.word	0x00002069

000020f8 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    20f8:	b580      	push	{r7, lr}
    20fa:	b082      	sub	sp, #8
    20fc:	af00      	add	r7, sp, #0
    20fe:	0002      	movs	r2, r0
    2100:	6039      	str	r1, [r7, #0]
    2102:	1dfb      	adds	r3, r7, #7
    2104:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    2106:	1dfb      	adds	r3, r7, #7
    2108:	781b      	ldrb	r3, [r3, #0]
    210a:	0018      	movs	r0, r3
    210c:	4b08      	ldr	r3, [pc, #32]	; (2130 <sd_mmc_read_capacity+0x38>)
    210e:	4798      	blx	r3
    2110:	0003      	movs	r3, r0
    2112:	005b      	lsls	r3, r3, #1
    2114:	1e5a      	subs	r2, r3, #1
    2116:	683b      	ldr	r3, [r7, #0]
    2118:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    211a:	1dfb      	adds	r3, r7, #7
    211c:	781b      	ldrb	r3, [r3, #0]
    211e:	0018      	movs	r0, r3
    2120:	4b04      	ldr	r3, [pc, #16]	; (2134 <sd_mmc_read_capacity+0x3c>)
    2122:	4798      	blx	r3
    2124:	0003      	movs	r3, r0
}
    2126:	0018      	movs	r0, r3
    2128:	46bd      	mov	sp, r7
    212a:	b002      	add	sp, #8
    212c:	bd80      	pop	{r7, pc}
    212e:	46c0      	nop			; (mov r8, r8)
    2130:	00001c8d 	.word	0x00001c8d
    2134:	00002069 	.word	0x00002069

00002138 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    2138:	b580      	push	{r7, lr}
    213a:	b082      	sub	sp, #8
    213c:	af00      	add	r7, sp, #0
    213e:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    2140:	687b      	ldr	r3, [r7, #4]
    2142:	0019      	movs	r1, r3
    2144:	2000      	movs	r0, #0
    2146:	4b03      	ldr	r3, [pc, #12]	; (2154 <sd_mmc_read_capacity_0+0x1c>)
    2148:	4798      	blx	r3
    214a:	0003      	movs	r3, r0
}
    214c:	0018      	movs	r0, r3
    214e:	46bd      	mov	sp, r7
    2150:	b002      	add	sp, #8
    2152:	bd80      	pop	{r7, pc}
    2154:	000020f9 	.word	0x000020f9

00002158 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    2158:	b580      	push	{r7, lr}
    215a:	b082      	sub	sp, #8
    215c:	af00      	add	r7, sp, #0
    215e:	0002      	movs	r2, r0
    2160:	1dfb      	adds	r3, r7, #7
    2162:	701a      	strb	r2, [r3, #0]
    2164:	1dbb      	adds	r3, r7, #6
    2166:	1c0a      	adds	r2, r1, #0
    2168:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    216a:	1dfb      	adds	r3, r7, #7
    216c:	781b      	ldrb	r3, [r3, #0]
    216e:	4a04      	ldr	r2, [pc, #16]	; (2180 <sd_mmc_unload+0x28>)
    2170:	1db9      	adds	r1, r7, #6
    2172:	7809      	ldrb	r1, [r1, #0]
    2174:	54d1      	strb	r1, [r2, r3]
	return true;
    2176:	2301      	movs	r3, #1
}
    2178:	0018      	movs	r0, r3
    217a:	46bd      	mov	sp, r7
    217c:	b002      	add	sp, #8
    217e:	bd80      	pop	{r7, pc}
    2180:	200000e8 	.word	0x200000e8

00002184 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    2184:	b580      	push	{r7, lr}
    2186:	b082      	sub	sp, #8
    2188:	af00      	add	r7, sp, #0
    218a:	0002      	movs	r2, r0
    218c:	1dfb      	adds	r3, r7, #7
    218e:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    2190:	1dfb      	adds	r3, r7, #7
    2192:	781b      	ldrb	r3, [r3, #0]
    2194:	0019      	movs	r1, r3
    2196:	2000      	movs	r0, #0
    2198:	4b03      	ldr	r3, [pc, #12]	; (21a8 <sd_mmc_unload_0+0x24>)
    219a:	4798      	blx	r3
    219c:	0003      	movs	r3, r0
}
    219e:	0018      	movs	r0, r3
    21a0:	46bd      	mov	sp, r7
    21a2:	b002      	add	sp, #8
    21a4:	bd80      	pop	{r7, pc}
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	00002159 	.word	0x00002159

000021ac <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    21ac:	b580      	push	{r7, lr}
    21ae:	b082      	sub	sp, #8
    21b0:	af00      	add	r7, sp, #0
    21b2:	0002      	movs	r2, r0
    21b4:	1dfb      	adds	r3, r7, #7
    21b6:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    21b8:	1dfb      	adds	r3, r7, #7
    21ba:	781b      	ldrb	r3, [r3, #0]
    21bc:	0018      	movs	r0, r3
    21be:	4b03      	ldr	r3, [pc, #12]	; (21cc <sd_mmc_wr_protect+0x20>)
    21c0:	4798      	blx	r3
    21c2:	0003      	movs	r3, r0
}
    21c4:	0018      	movs	r0, r3
    21c6:	46bd      	mov	sp, r7
    21c8:	b002      	add	sp, #8
    21ca:	bd80      	pop	{r7, pc}
    21cc:	00001cc9 	.word	0x00001cc9

000021d0 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    21d0:	b580      	push	{r7, lr}
    21d2:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    21d4:	2000      	movs	r0, #0
    21d6:	4b03      	ldr	r3, [pc, #12]	; (21e4 <sd_mmc_wr_protect_0+0x14>)
    21d8:	4798      	blx	r3
    21da:	0003      	movs	r3, r0
}
    21dc:	0018      	movs	r0, r3
    21de:	46bd      	mov	sp, r7
    21e0:	bd80      	pop	{r7, pc}
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	000021ad 	.word	0x000021ad

000021e8 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    21e8:	b580      	push	{r7, lr}
    21ea:	b082      	sub	sp, #8
    21ec:	af00      	add	r7, sp, #0
    21ee:	0002      	movs	r2, r0
    21f0:	1dfb      	adds	r3, r7, #7
    21f2:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    21f4:	2301      	movs	r3, #1
}
    21f6:	0018      	movs	r0, r3
    21f8:	46bd      	mov	sp, r7
    21fa:	b002      	add	sp, #8
    21fc:	bd80      	pop	{r7, pc}
	...

00002200 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    2200:	b580      	push	{r7, lr}
    2202:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    2204:	2000      	movs	r0, #0
    2206:	4b03      	ldr	r3, [pc, #12]	; (2214 <sd_mmc_removal_0+0x14>)
    2208:	4798      	blx	r3
    220a:	0003      	movs	r3, r0
}
    220c:	0018      	movs	r0, r3
    220e:	46bd      	mov	sp, r7
    2210:	bd80      	pop	{r7, pc}
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	000021e9 	.word	0x000021e9

00002218 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    2218:	b580      	push	{r7, lr}
    221a:	b084      	sub	sp, #16
    221c:	af00      	add	r7, sp, #0
    221e:	60b9      	str	r1, [r7, #8]
    2220:	607a      	str	r2, [r7, #4]
    2222:	230f      	movs	r3, #15
    2224:	18fb      	adds	r3, r7, r3
    2226:	1c02      	adds	r2, r0, #0
    2228:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    222a:	68b9      	ldr	r1, [r7, #8]
    222c:	230f      	movs	r3, #15
    222e:	18fb      	adds	r3, r7, r3
    2230:	781b      	ldrb	r3, [r3, #0]
    2232:	2201      	movs	r2, #1
    2234:	0018      	movs	r0, r3
    2236:	4b10      	ldr	r3, [pc, #64]	; (2278 <sd_mmc_mem_2_ram+0x60>)
    2238:	4798      	blx	r3
    223a:	1e03      	subs	r3, r0, #0
    223c:	d005      	beq.n	224a <sd_mmc_mem_2_ram+0x32>
    223e:	2b02      	cmp	r3, #2
    2240:	d101      	bne.n	2246 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    2242:	2302      	movs	r3, #2
    2244:	e013      	b.n	226e <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    2246:	2301      	movs	r3, #1
    2248:	e011      	b.n	226e <sd_mmc_mem_2_ram+0x56>
		break;
    224a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    224c:	687b      	ldr	r3, [r7, #4]
    224e:	2101      	movs	r1, #1
    2250:	0018      	movs	r0, r3
    2252:	4b0a      	ldr	r3, [pc, #40]	; (227c <sd_mmc_mem_2_ram+0x64>)
    2254:	4798      	blx	r3
    2256:	1e03      	subs	r3, r0, #0
    2258:	d001      	beq.n	225e <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    225a:	2301      	movs	r3, #1
    225c:	e007      	b.n	226e <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    225e:	2000      	movs	r0, #0
    2260:	4b07      	ldr	r3, [pc, #28]	; (2280 <sd_mmc_mem_2_ram+0x68>)
    2262:	4798      	blx	r3
    2264:	1e03      	subs	r3, r0, #0
    2266:	d001      	beq.n	226c <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    2268:	2301      	movs	r3, #1
    226a:	e000      	b.n	226e <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    226c:	2300      	movs	r3, #0
}
    226e:	0018      	movs	r0, r3
    2270:	46bd      	mov	sp, r7
    2272:	b004      	add	sp, #16
    2274:	bd80      	pop	{r7, pc}
    2276:	46c0      	nop			; (mov r8, r8)
    2278:	00001ce1 	.word	0x00001ce1
    227c:	00001dcd 	.word	0x00001dcd
    2280:	00001e25 	.word	0x00001e25

00002284 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    2284:	b580      	push	{r7, lr}
    2286:	b082      	sub	sp, #8
    2288:	af00      	add	r7, sp, #0
    228a:	6078      	str	r0, [r7, #4]
    228c:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    228e:	683a      	ldr	r2, [r7, #0]
    2290:	687b      	ldr	r3, [r7, #4]
    2292:	0019      	movs	r1, r3
    2294:	2000      	movs	r0, #0
    2296:	4b03      	ldr	r3, [pc, #12]	; (22a4 <sd_mmc_mem_2_ram_0+0x20>)
    2298:	4798      	blx	r3
    229a:	0003      	movs	r3, r0
}
    229c:	0018      	movs	r0, r3
    229e:	46bd      	mov	sp, r7
    22a0:	b002      	add	sp, #8
    22a2:	bd80      	pop	{r7, pc}
    22a4:	00002219 	.word	0x00002219

000022a8 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    22a8:	b580      	push	{r7, lr}
    22aa:	b084      	sub	sp, #16
    22ac:	af00      	add	r7, sp, #0
    22ae:	60b9      	str	r1, [r7, #8]
    22b0:	607a      	str	r2, [r7, #4]
    22b2:	230f      	movs	r3, #15
    22b4:	18fb      	adds	r3, r7, r3
    22b6:	1c02      	adds	r2, r0, #0
    22b8:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    22ba:	68b9      	ldr	r1, [r7, #8]
    22bc:	230f      	movs	r3, #15
    22be:	18fb      	adds	r3, r7, r3
    22c0:	781b      	ldrb	r3, [r3, #0]
    22c2:	2201      	movs	r2, #1
    22c4:	0018      	movs	r0, r3
    22c6:	4b10      	ldr	r3, [pc, #64]	; (2308 <sd_mmc_ram_2_mem+0x60>)
    22c8:	4798      	blx	r3
    22ca:	1e03      	subs	r3, r0, #0
    22cc:	d005      	beq.n	22da <sd_mmc_ram_2_mem+0x32>
    22ce:	2b02      	cmp	r3, #2
    22d0:	d101      	bne.n	22d6 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    22d2:	2302      	movs	r3, #2
    22d4:	e013      	b.n	22fe <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    22d6:	2301      	movs	r3, #1
    22d8:	e011      	b.n	22fe <sd_mmc_ram_2_mem+0x56>
		break;
    22da:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    22dc:	687b      	ldr	r3, [r7, #4]
    22de:	2101      	movs	r1, #1
    22e0:	0018      	movs	r0, r3
    22e2:	4b0a      	ldr	r3, [pc, #40]	; (230c <sd_mmc_ram_2_mem+0x64>)
    22e4:	4798      	blx	r3
    22e6:	1e03      	subs	r3, r0, #0
    22e8:	d001      	beq.n	22ee <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    22ea:	2301      	movs	r3, #1
    22ec:	e007      	b.n	22fe <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    22ee:	2000      	movs	r0, #0
    22f0:	4b07      	ldr	r3, [pc, #28]	; (2310 <sd_mmc_ram_2_mem+0x68>)
    22f2:	4798      	blx	r3
    22f4:	1e03      	subs	r3, r0, #0
    22f6:	d001      	beq.n	22fc <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    22f8:	2301      	movs	r3, #1
    22fa:	e000      	b.n	22fe <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    22fc:	2300      	movs	r3, #0
}
    22fe:	0018      	movs	r0, r3
    2300:	46bd      	mov	sp, r7
    2302:	b004      	add	sp, #16
    2304:	bd80      	pop	{r7, pc}
    2306:	46c0      	nop			; (mov r8, r8)
    2308:	00001ebd 	.word	0x00001ebd
    230c:	00001fa5 	.word	0x00001fa5
    2310:	00001ffd 	.word	0x00001ffd

00002314 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    2314:	b580      	push	{r7, lr}
    2316:	b082      	sub	sp, #8
    2318:	af00      	add	r7, sp, #0
    231a:	6078      	str	r0, [r7, #4]
    231c:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    231e:	683a      	ldr	r2, [r7, #0]
    2320:	687b      	ldr	r3, [r7, #4]
    2322:	0019      	movs	r1, r3
    2324:	2000      	movs	r0, #0
    2326:	4b03      	ldr	r3, [pc, #12]	; (2334 <sd_mmc_ram_2_mem_0+0x20>)
    2328:	4798      	blx	r3
    232a:	0003      	movs	r3, r0
}
    232c:	0018      	movs	r0, r3
    232e:	46bd      	mov	sp, r7
    2330:	b002      	add	sp, #8
    2332:	bd80      	pop	{r7, pc}
    2334:	000022a9 	.word	0x000022a9

00002338 <system_pinmux_get_group_from_gpio_pin>:
{
    2338:	b580      	push	{r7, lr}
    233a:	b084      	sub	sp, #16
    233c:	af00      	add	r7, sp, #0
    233e:	0002      	movs	r2, r0
    2340:	1dfb      	adds	r3, r7, #7
    2342:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2344:	230f      	movs	r3, #15
    2346:	18fb      	adds	r3, r7, r3
    2348:	1dfa      	adds	r2, r7, #7
    234a:	7812      	ldrb	r2, [r2, #0]
    234c:	09d2      	lsrs	r2, r2, #7
    234e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2350:	230e      	movs	r3, #14
    2352:	18fb      	adds	r3, r7, r3
    2354:	1dfa      	adds	r2, r7, #7
    2356:	7812      	ldrb	r2, [r2, #0]
    2358:	0952      	lsrs	r2, r2, #5
    235a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    235c:	4b0d      	ldr	r3, [pc, #52]	; (2394 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    235e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    2360:	230f      	movs	r3, #15
    2362:	18fb      	adds	r3, r7, r3
    2364:	781b      	ldrb	r3, [r3, #0]
    2366:	2b00      	cmp	r3, #0
    2368:	d10f      	bne.n	238a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    236a:	230f      	movs	r3, #15
    236c:	18fb      	adds	r3, r7, r3
    236e:	781b      	ldrb	r3, [r3, #0]
    2370:	009b      	lsls	r3, r3, #2
    2372:	2210      	movs	r2, #16
    2374:	4694      	mov	ip, r2
    2376:	44bc      	add	ip, r7
    2378:	4463      	add	r3, ip
    237a:	3b08      	subs	r3, #8
    237c:	681a      	ldr	r2, [r3, #0]
    237e:	230e      	movs	r3, #14
    2380:	18fb      	adds	r3, r7, r3
    2382:	781b      	ldrb	r3, [r3, #0]
    2384:	01db      	lsls	r3, r3, #7
    2386:	18d3      	adds	r3, r2, r3
    2388:	e000      	b.n	238c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    238a:	2300      	movs	r3, #0
}
    238c:	0018      	movs	r0, r3
    238e:	46bd      	mov	sp, r7
    2390:	b004      	add	sp, #16
    2392:	bd80      	pop	{r7, pc}
    2394:	41004400 	.word	0x41004400

00002398 <port_get_group_from_gpio_pin>:
{
    2398:	b580      	push	{r7, lr}
    239a:	b082      	sub	sp, #8
    239c:	af00      	add	r7, sp, #0
    239e:	0002      	movs	r2, r0
    23a0:	1dfb      	adds	r3, r7, #7
    23a2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    23a4:	1dfb      	adds	r3, r7, #7
    23a6:	781b      	ldrb	r3, [r3, #0]
    23a8:	0018      	movs	r0, r3
    23aa:	4b03      	ldr	r3, [pc, #12]	; (23b8 <port_get_group_from_gpio_pin+0x20>)
    23ac:	4798      	blx	r3
    23ae:	0003      	movs	r3, r0
}
    23b0:	0018      	movs	r0, r3
    23b2:	46bd      	mov	sp, r7
    23b4:	b002      	add	sp, #8
    23b6:	bd80      	pop	{r7, pc}
    23b8:	00002339 	.word	0x00002339

000023bc <port_get_config_defaults>:
{
    23bc:	b580      	push	{r7, lr}
    23be:	b082      	sub	sp, #8
    23c0:	af00      	add	r7, sp, #0
    23c2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    23c4:	687b      	ldr	r3, [r7, #4]
    23c6:	2200      	movs	r2, #0
    23c8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    23ca:	687b      	ldr	r3, [r7, #4]
    23cc:	2201      	movs	r2, #1
    23ce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    23d0:	687b      	ldr	r3, [r7, #4]
    23d2:	2200      	movs	r2, #0
    23d4:	709a      	strb	r2, [r3, #2]
}
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	46bd      	mov	sp, r7
    23da:	b002      	add	sp, #8
    23dc:	bd80      	pop	{r7, pc}
	...

000023e0 <port_pin_set_output_level>:
{
    23e0:	b580      	push	{r7, lr}
    23e2:	b084      	sub	sp, #16
    23e4:	af00      	add	r7, sp, #0
    23e6:	0002      	movs	r2, r0
    23e8:	1dfb      	adds	r3, r7, #7
    23ea:	701a      	strb	r2, [r3, #0]
    23ec:	1dbb      	adds	r3, r7, #6
    23ee:	1c0a      	adds	r2, r1, #0
    23f0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    23f2:	1dfb      	adds	r3, r7, #7
    23f4:	781b      	ldrb	r3, [r3, #0]
    23f6:	0018      	movs	r0, r3
    23f8:	4b0d      	ldr	r3, [pc, #52]	; (2430 <port_pin_set_output_level+0x50>)
    23fa:	4798      	blx	r3
    23fc:	0003      	movs	r3, r0
    23fe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2400:	1dfb      	adds	r3, r7, #7
    2402:	781b      	ldrb	r3, [r3, #0]
    2404:	221f      	movs	r2, #31
    2406:	4013      	ands	r3, r2
    2408:	2201      	movs	r2, #1
    240a:	409a      	lsls	r2, r3
    240c:	0013      	movs	r3, r2
    240e:	60bb      	str	r3, [r7, #8]
	if (level) {
    2410:	1dbb      	adds	r3, r7, #6
    2412:	781b      	ldrb	r3, [r3, #0]
    2414:	2b00      	cmp	r3, #0
    2416:	d003      	beq.n	2420 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2418:	68fb      	ldr	r3, [r7, #12]
    241a:	68ba      	ldr	r2, [r7, #8]
    241c:	619a      	str	r2, [r3, #24]
}
    241e:	e002      	b.n	2426 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2420:	68fb      	ldr	r3, [r7, #12]
    2422:	68ba      	ldr	r2, [r7, #8]
    2424:	615a      	str	r2, [r3, #20]
}
    2426:	46c0      	nop			; (mov r8, r8)
    2428:	46bd      	mov	sp, r7
    242a:	b004      	add	sp, #16
    242c:	bd80      	pop	{r7, pc}
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	00002399 	.word	0x00002399

00002434 <system_interrupt_enable>:
{
    2434:	b580      	push	{r7, lr}
    2436:	b082      	sub	sp, #8
    2438:	af00      	add	r7, sp, #0
    243a:	0002      	movs	r2, r0
    243c:	1dfb      	adds	r3, r7, #7
    243e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2440:	4b06      	ldr	r3, [pc, #24]	; (245c <system_interrupt_enable+0x28>)
    2442:	1dfa      	adds	r2, r7, #7
    2444:	7812      	ldrb	r2, [r2, #0]
    2446:	0011      	movs	r1, r2
    2448:	221f      	movs	r2, #31
    244a:	400a      	ands	r2, r1
    244c:	2101      	movs	r1, #1
    244e:	4091      	lsls	r1, r2
    2450:	000a      	movs	r2, r1
    2452:	601a      	str	r2, [r3, #0]
}
    2454:	46c0      	nop			; (mov r8, r8)
    2456:	46bd      	mov	sp, r7
    2458:	b002      	add	sp, #8
    245a:	bd80      	pop	{r7, pc}
    245c:	e000e100 	.word	0xe000e100

00002460 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    2460:	b580      	push	{r7, lr}
    2462:	b084      	sub	sp, #16
    2464:	af00      	add	r7, sp, #0
    2466:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2468:	687b      	ldr	r3, [r7, #4]
    246a:	681b      	ldr	r3, [r3, #0]
    246c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    246e:	68fb      	ldr	r3, [r7, #12]
    2470:	69db      	ldr	r3, [r3, #28]
    2472:	1e5a      	subs	r2, r3, #1
    2474:	4193      	sbcs	r3, r2
    2476:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    2478:	0018      	movs	r0, r3
    247a:	46bd      	mov	sp, r7
    247c:	b004      	add	sp, #16
    247e:	bd80      	pop	{r7, pc}

00002480 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2480:	b580      	push	{r7, lr}
    2482:	b082      	sub	sp, #8
    2484:	af00      	add	r7, sp, #0
    2486:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2488:	687b      	ldr	r3, [r7, #4]
    248a:	2201      	movs	r2, #1
    248c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    248e:	687b      	ldr	r3, [r7, #4]
    2490:	2200      	movs	r2, #0
    2492:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2494:	687b      	ldr	r3, [r7, #4]
    2496:	2200      	movs	r2, #0
    2498:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    249a:	687b      	ldr	r3, [r7, #4]
    249c:	22c0      	movs	r2, #192	; 0xc0
    249e:	0392      	lsls	r2, r2, #14
    24a0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    24a2:	687b      	ldr	r3, [r7, #4]
    24a4:	2200      	movs	r2, #0
    24a6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    24a8:	687b      	ldr	r3, [r7, #4]
    24aa:	2200      	movs	r2, #0
    24ac:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    24ae:	687b      	ldr	r3, [r7, #4]
    24b0:	2201      	movs	r2, #1
    24b2:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	2201      	movs	r2, #1
    24b8:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    24ba:	687b      	ldr	r3, [r7, #4]
    24bc:	2200      	movs	r2, #0
    24be:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    24c0:	687b      	ldr	r3, [r7, #4]
    24c2:	2224      	movs	r2, #36	; 0x24
    24c4:	2100      	movs	r1, #0
    24c6:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    24c8:	687b      	ldr	r3, [r7, #4]
    24ca:	3318      	adds	r3, #24
    24cc:	220c      	movs	r2, #12
    24ce:	2100      	movs	r1, #0
    24d0:	0018      	movs	r0, r3
    24d2:	4b0a      	ldr	r3, [pc, #40]	; (24fc <spi_get_config_defaults+0x7c>)
    24d4:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	4a09      	ldr	r2, [pc, #36]	; (2500 <spi_get_config_defaults+0x80>)
    24da:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	2200      	movs	r2, #0
    24e0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    24e2:	687b      	ldr	r3, [r7, #4]
    24e4:	2200      	movs	r2, #0
    24e6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    24e8:	687b      	ldr	r3, [r7, #4]
    24ea:	2200      	movs	r2, #0
    24ec:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    24ee:	687b      	ldr	r3, [r7, #4]
    24f0:	2200      	movs	r2, #0
    24f2:	635a      	str	r2, [r3, #52]	; 0x34

};
    24f4:	46c0      	nop			; (mov r8, r8)
    24f6:	46bd      	mov	sp, r7
    24f8:	b002      	add	sp, #8
    24fa:	bd80      	pop	{r7, pc}
    24fc:	0000b57b 	.word	0x0000b57b
    2500:	000186a0 	.word	0x000186a0

00002504 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    2504:	b580      	push	{r7, lr}
    2506:	b082      	sub	sp, #8
    2508:	af00      	add	r7, sp, #0
    250a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    250c:	687b      	ldr	r3, [r7, #4]
    250e:	220a      	movs	r2, #10
    2510:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    2512:	687b      	ldr	r3, [r7, #4]
    2514:	2200      	movs	r2, #0
    2516:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	2200      	movs	r2, #0
    251c:	709a      	strb	r2, [r3, #2]
}
    251e:	46c0      	nop			; (mov r8, r8)
    2520:	46bd      	mov	sp, r7
    2522:	b002      	add	sp, #8
    2524:	bd80      	pop	{r7, pc}
	...

00002528 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    2528:	b580      	push	{r7, lr}
    252a:	b084      	sub	sp, #16
    252c:	af00      	add	r7, sp, #0
    252e:	6078      	str	r0, [r7, #4]
    2530:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    2532:	683b      	ldr	r3, [r7, #0]
    2534:	781a      	ldrb	r2, [r3, #0]
    2536:	687b      	ldr	r3, [r7, #4]
    2538:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    253a:	683b      	ldr	r3, [r7, #0]
    253c:	785a      	ldrb	r2, [r3, #1]
    253e:	687b      	ldr	r3, [r7, #4]
    2540:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    2542:	683b      	ldr	r3, [r7, #0]
    2544:	789a      	ldrb	r2, [r3, #2]
    2546:	687b      	ldr	r3, [r7, #4]
    2548:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    254a:	230c      	movs	r3, #12
    254c:	18fb      	adds	r3, r7, r3
    254e:	0018      	movs	r0, r3
    2550:	4b0b      	ldr	r3, [pc, #44]	; (2580 <spi_attach_slave+0x58>)
    2552:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2554:	230c      	movs	r3, #12
    2556:	18fb      	adds	r3, r7, r3
    2558:	2201      	movs	r2, #1
    255a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    255c:	687b      	ldr	r3, [r7, #4]
    255e:	781b      	ldrb	r3, [r3, #0]
    2560:	220c      	movs	r2, #12
    2562:	18ba      	adds	r2, r7, r2
    2564:	0011      	movs	r1, r2
    2566:	0018      	movs	r0, r3
    2568:	4b06      	ldr	r3, [pc, #24]	; (2584 <spi_attach_slave+0x5c>)
    256a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    256c:	687b      	ldr	r3, [r7, #4]
    256e:	781b      	ldrb	r3, [r3, #0]
    2570:	2101      	movs	r1, #1
    2572:	0018      	movs	r0, r3
    2574:	4b04      	ldr	r3, [pc, #16]	; (2588 <spi_attach_slave+0x60>)
    2576:	4798      	blx	r3
}
    2578:	46c0      	nop			; (mov r8, r8)
    257a:	46bd      	mov	sp, r7
    257c:	b004      	add	sp, #16
    257e:	bd80      	pop	{r7, pc}
    2580:	000023bd 	.word	0x000023bd
    2584:	00003235 	.word	0x00003235
    2588:	000023e1 	.word	0x000023e1

0000258c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    258c:	b580      	push	{r7, lr}
    258e:	b084      	sub	sp, #16
    2590:	af00      	add	r7, sp, #0
    2592:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2594:	687b      	ldr	r3, [r7, #4]
    2596:	681b      	ldr	r3, [r3, #0]
    2598:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    259a:	687b      	ldr	r3, [r7, #4]
    259c:	681b      	ldr	r3, [r3, #0]
    259e:	0018      	movs	r0, r3
    25a0:	4b0b      	ldr	r3, [pc, #44]	; (25d0 <spi_enable+0x44>)
    25a2:	4798      	blx	r3
    25a4:	0003      	movs	r3, r0
    25a6:	0018      	movs	r0, r3
    25a8:	4b0a      	ldr	r3, [pc, #40]	; (25d4 <spi_enable+0x48>)
    25aa:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    25ac:	46c0      	nop			; (mov r8, r8)
    25ae:	687b      	ldr	r3, [r7, #4]
    25b0:	0018      	movs	r0, r3
    25b2:	4b09      	ldr	r3, [pc, #36]	; (25d8 <spi_enable+0x4c>)
    25b4:	4798      	blx	r3
    25b6:	1e03      	subs	r3, r0, #0
    25b8:	d1f9      	bne.n	25ae <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    25ba:	68fb      	ldr	r3, [r7, #12]
    25bc:	681b      	ldr	r3, [r3, #0]
    25be:	2202      	movs	r2, #2
    25c0:	431a      	orrs	r2, r3
    25c2:	68fb      	ldr	r3, [r7, #12]
    25c4:	601a      	str	r2, [r3, #0]
}
    25c6:	46c0      	nop			; (mov r8, r8)
    25c8:	46bd      	mov	sp, r7
    25ca:	b004      	add	sp, #16
    25cc:	bd80      	pop	{r7, pc}
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	00003dc1 	.word	0x00003dc1
    25d4:	00002435 	.word	0x00002435
    25d8:	00002461 	.word	0x00002461

000025dc <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    25dc:	b580      	push	{r7, lr}
    25de:	b084      	sub	sp, #16
    25e0:	af00      	add	r7, sp, #0
    25e2:	6078      	str	r0, [r7, #4]
    25e4:	000a      	movs	r2, r1
    25e6:	1cfb      	adds	r3, r7, #3
    25e8:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    25ea:	230f      	movs	r3, #15
    25ec:	18fb      	adds	r3, r7, r3
    25ee:	2200      	movs	r2, #0
    25f0:	701a      	strb	r2, [r3, #0]
	while (size--) {
    25f2:	e038      	b.n	2666 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    25f4:	687b      	ldr	r3, [r7, #4]
    25f6:	1c5a      	adds	r2, r3, #1
    25f8:	607a      	str	r2, [r7, #4]
    25fa:	220e      	movs	r2, #14
    25fc:	18ba      	adds	r2, r7, r2
    25fe:	781b      	ldrb	r3, [r3, #0]
    2600:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    2602:	230d      	movs	r3, #13
    2604:	18fb      	adds	r3, r7, r3
    2606:	2200      	movs	r2, #0
    2608:	701a      	strb	r2, [r3, #0]
    260a:	e027      	b.n	265c <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    260c:	230f      	movs	r3, #15
    260e:	18fa      	adds	r2, r7, r3
    2610:	230f      	movs	r3, #15
    2612:	18fb      	adds	r3, r7, r3
    2614:	781b      	ldrb	r3, [r3, #0]
    2616:	18db      	adds	r3, r3, r3
    2618:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    261a:	230e      	movs	r3, #14
    261c:	18fa      	adds	r2, r7, r3
    261e:	230f      	movs	r3, #15
    2620:	18fb      	adds	r3, r7, r3
    2622:	7812      	ldrb	r2, [r2, #0]
    2624:	781b      	ldrb	r3, [r3, #0]
    2626:	4053      	eors	r3, r2
    2628:	b2db      	uxtb	r3, r3
    262a:	b25b      	sxtb	r3, r3
    262c:	2b00      	cmp	r3, #0
    262e:	da07      	bge.n	2640 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    2630:	230f      	movs	r3, #15
    2632:	18fb      	adds	r3, r7, r3
    2634:	220f      	movs	r2, #15
    2636:	18ba      	adds	r2, r7, r2
    2638:	7812      	ldrb	r2, [r2, #0]
    263a:	2109      	movs	r1, #9
    263c:	404a      	eors	r2, r1
    263e:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    2640:	230e      	movs	r3, #14
    2642:	18fa      	adds	r2, r7, r3
    2644:	230e      	movs	r3, #14
    2646:	18fb      	adds	r3, r7, r3
    2648:	781b      	ldrb	r3, [r3, #0]
    264a:	18db      	adds	r3, r3, r3
    264c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    264e:	230d      	movs	r3, #13
    2650:	18fb      	adds	r3, r7, r3
    2652:	781a      	ldrb	r2, [r3, #0]
    2654:	230d      	movs	r3, #13
    2656:	18fb      	adds	r3, r7, r3
    2658:	3201      	adds	r2, #1
    265a:	701a      	strb	r2, [r3, #0]
    265c:	230d      	movs	r3, #13
    265e:	18fb      	adds	r3, r7, r3
    2660:	781b      	ldrb	r3, [r3, #0]
    2662:	2b07      	cmp	r3, #7
    2664:	d9d2      	bls.n	260c <sd_mmc_spi_crc7+0x30>
	while (size--) {
    2666:	1cfb      	adds	r3, r7, #3
    2668:	781b      	ldrb	r3, [r3, #0]
    266a:	1cfa      	adds	r2, r7, #3
    266c:	1e59      	subs	r1, r3, #1
    266e:	7011      	strb	r1, [r2, #0]
    2670:	2b00      	cmp	r3, #0
    2672:	d1bf      	bne.n	25f4 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    2674:	230f      	movs	r3, #15
    2676:	18fb      	adds	r3, r7, r3
    2678:	781b      	ldrb	r3, [r3, #0]
    267a:	005b      	lsls	r3, r3, #1
    267c:	b25b      	sxtb	r3, r3
    267e:	2201      	movs	r2, #1
    2680:	4313      	orrs	r3, r2
    2682:	b25a      	sxtb	r2, r3
    2684:	230f      	movs	r3, #15
    2686:	18fb      	adds	r3, r7, r3
    2688:	701a      	strb	r2, [r3, #0]
	return crc;
    268a:	230f      	movs	r3, #15
    268c:	18fb      	adds	r3, r7, r3
    268e:	781b      	ldrb	r3, [r3, #0]
}
    2690:	0018      	movs	r0, r3
    2692:	46bd      	mov	sp, r7
    2694:	b004      	add	sp, #16
    2696:	bd80      	pop	{r7, pc}

00002698 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    2698:	b590      	push	{r4, r7, lr}
    269a:	b083      	sub	sp, #12
    269c:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    269e:	1c7b      	adds	r3, r7, #1
    26a0:	22ff      	movs	r2, #255	; 0xff
    26a2:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    26a4:	1cbb      	adds	r3, r7, #2
    26a6:	22ff      	movs	r2, #255	; 0xff
    26a8:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    26aa:	1cbb      	adds	r3, r7, #2
    26ac:	881b      	ldrh	r3, [r3, #0]
    26ae:	1c79      	adds	r1, r7, #1
    26b0:	4811      	ldr	r0, [pc, #68]	; (26f8 <sd_mmc_spi_wait_busy+0x60>)
    26b2:	2201      	movs	r2, #1
    26b4:	4c11      	ldr	r4, [pc, #68]	; (26fc <sd_mmc_spi_wait_busy+0x64>)
    26b6:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    26b8:	4b11      	ldr	r3, [pc, #68]	; (2700 <sd_mmc_spi_wait_busy+0x68>)
    26ba:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    26bc:	1cbb      	adds	r3, r7, #2
    26be:	881b      	ldrh	r3, [r3, #0]
    26c0:	1c79      	adds	r1, r7, #1
    26c2:	480d      	ldr	r0, [pc, #52]	; (26f8 <sd_mmc_spi_wait_busy+0x60>)
    26c4:	2201      	movs	r2, #1
    26c6:	4c0d      	ldr	r4, [pc, #52]	; (26fc <sd_mmc_spi_wait_busy+0x64>)
    26c8:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    26ca:	1cbb      	adds	r3, r7, #2
    26cc:	881b      	ldrh	r3, [r3, #0]
    26ce:	1c79      	adds	r1, r7, #1
    26d0:	4809      	ldr	r0, [pc, #36]	; (26f8 <sd_mmc_spi_wait_busy+0x60>)
    26d2:	2201      	movs	r2, #1
    26d4:	4c09      	ldr	r4, [pc, #36]	; (26fc <sd_mmc_spi_wait_busy+0x64>)
    26d6:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    26d8:	687b      	ldr	r3, [r7, #4]
    26da:	1e5a      	subs	r2, r3, #1
    26dc:	607a      	str	r2, [r7, #4]
    26de:	2b00      	cmp	r3, #0
    26e0:	d101      	bne.n	26e6 <sd_mmc_spi_wait_busy+0x4e>
			return false;
    26e2:	2300      	movs	r3, #0
    26e4:	e004      	b.n	26f0 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    26e6:	1c7b      	adds	r3, r7, #1
    26e8:	781b      	ldrb	r3, [r3, #0]
    26ea:	2bff      	cmp	r3, #255	; 0xff
    26ec:	d1ed      	bne.n	26ca <sd_mmc_spi_wait_busy+0x32>
	return true;
    26ee:	2301      	movs	r3, #1
}
    26f0:	0018      	movs	r0, r3
    26f2:	46bd      	mov	sp, r7
    26f4:	b003      	add	sp, #12
    26f6:	bd90      	pop	{r4, r7, pc}
    26f8:	200000ec 	.word	0x200000ec
    26fc:	00004741 	.word	0x00004741
    2700:	00030d40 	.word	0x00030d40

00002704 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    2704:	b590      	push	{r4, r7, lr}
    2706:	b083      	sub	sp, #12
    2708:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    270a:	1cbb      	adds	r3, r7, #2
    270c:	22ff      	movs	r2, #255	; 0xff
    270e:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    2710:	1c7b      	adds	r3, r7, #1
    2712:	2200      	movs	r2, #0
    2714:	701a      	strb	r2, [r3, #0]
	i = 500000;
    2716:	4b18      	ldr	r3, [pc, #96]	; (2778 <sd_mmc_spi_start_read_block+0x74>)
    2718:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    271a:	687b      	ldr	r3, [r7, #4]
    271c:	1e5a      	subs	r2, r3, #1
    271e:	607a      	str	r2, [r7, #4]
    2720:	2b00      	cmp	r3, #0
    2722:	d104      	bne.n	272e <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    2724:	4b15      	ldr	r3, [pc, #84]	; (277c <sd_mmc_spi_start_read_block+0x78>)
    2726:	2204      	movs	r2, #4
    2728:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    272a:	2300      	movs	r3, #0
    272c:	e020      	b.n	2770 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    272e:	1cbb      	adds	r3, r7, #2
    2730:	881b      	ldrh	r3, [r3, #0]
    2732:	1c79      	adds	r1, r7, #1
    2734:	4812      	ldr	r0, [pc, #72]	; (2780 <sd_mmc_spi_start_read_block+0x7c>)
    2736:	2201      	movs	r2, #1
    2738:	4c12      	ldr	r4, [pc, #72]	; (2784 <sd_mmc_spi_start_read_block+0x80>)
    273a:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    273c:	1c7b      	adds	r3, r7, #1
    273e:	781b      	ldrb	r3, [r3, #0]
    2740:	001a      	movs	r2, r3
    2742:	23f0      	movs	r3, #240	; 0xf0
    2744:	4013      	ands	r3, r2
    2746:	d10e      	bne.n	2766 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    2748:	1c7b      	adds	r3, r7, #1
    274a:	781b      	ldrb	r3, [r3, #0]
    274c:	001a      	movs	r2, r3
    274e:	2307      	movs	r3, #7
    2750:	4013      	ands	r3, r2
    2752:	d003      	beq.n	275c <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    2754:	4b09      	ldr	r3, [pc, #36]	; (277c <sd_mmc_spi_start_read_block+0x78>)
    2756:	2207      	movs	r2, #7
    2758:	701a      	strb	r2, [r3, #0]
    275a:	e002      	b.n	2762 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    275c:	4b07      	ldr	r3, [pc, #28]	; (277c <sd_mmc_spi_start_read_block+0x78>)
    275e:	220b      	movs	r2, #11
    2760:	701a      	strb	r2, [r3, #0]
			}
			return false;
    2762:	2300      	movs	r3, #0
    2764:	e004      	b.n	2770 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    2766:	1c7b      	adds	r3, r7, #1
    2768:	781b      	ldrb	r3, [r3, #0]
    276a:	2bfe      	cmp	r3, #254	; 0xfe
    276c:	d1d5      	bne.n	271a <sd_mmc_spi_start_read_block+0x16>

	return true;
    276e:	2301      	movs	r3, #1
}
    2770:	0018      	movs	r0, r3
    2772:	46bd      	mov	sp, r7
    2774:	b003      	add	sp, #12
    2776:	bd90      	pop	{r4, r7, pc}
    2778:	0007a120 	.word	0x0007a120
    277c:	2000012f 	.word	0x2000012f
    2780:	200000ec 	.word	0x200000ec
    2784:	00004741 	.word	0x00004741

00002788 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    2788:	b590      	push	{r4, r7, lr}
    278a:	b083      	sub	sp, #12
    278c:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    278e:	1dbb      	adds	r3, r7, #6
    2790:	22ff      	movs	r2, #255	; 0xff
    2792:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    2794:	1dbb      	adds	r3, r7, #6
    2796:	881b      	ldrh	r3, [r3, #0]
    2798:	1d39      	adds	r1, r7, #4
    279a:	4804      	ldr	r0, [pc, #16]	; (27ac <sd_mmc_spi_stop_read_block+0x24>)
    279c:	2202      	movs	r2, #2
    279e:	4c04      	ldr	r4, [pc, #16]	; (27b0 <sd_mmc_spi_stop_read_block+0x28>)
    27a0:	47a0      	blx	r4
			dummy);
}
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	46bd      	mov	sp, r7
    27a6:	b003      	add	sp, #12
    27a8:	bd90      	pop	{r4, r7, pc}
    27aa:	46c0      	nop			; (mov r8, r8)
    27ac:	200000ec 	.word	0x200000ec
    27b0:	00004741 	.word	0x00004741

000027b4 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    27b4:	b580      	push	{r7, lr}
    27b6:	b082      	sub	sp, #8
    27b8:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    27ba:	1dfb      	adds	r3, r7, #7
    27bc:	22ff      	movs	r2, #255	; 0xff
    27be:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    27c0:	1df9      	adds	r1, r7, #7
    27c2:	4b0d      	ldr	r3, [pc, #52]	; (27f8 <sd_mmc_spi_start_write_block+0x44>)
    27c4:	2201      	movs	r2, #1
    27c6:	0018      	movs	r0, r3
    27c8:	4b0c      	ldr	r3, [pc, #48]	; (27fc <sd_mmc_spi_start_write_block+0x48>)
    27ca:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    27cc:	4b0c      	ldr	r3, [pc, #48]	; (2800 <sd_mmc_spi_start_write_block+0x4c>)
    27ce:	881b      	ldrh	r3, [r3, #0]
    27d0:	2b01      	cmp	r3, #1
    27d2:	d103      	bne.n	27dc <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    27d4:	1dbb      	adds	r3, r7, #6
    27d6:	22fe      	movs	r2, #254	; 0xfe
    27d8:	701a      	strb	r2, [r3, #0]
    27da:	e002      	b.n	27e2 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    27dc:	1dbb      	adds	r3, r7, #6
    27de:	22fc      	movs	r2, #252	; 0xfc
    27e0:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    27e2:	1db9      	adds	r1, r7, #6
    27e4:	4b04      	ldr	r3, [pc, #16]	; (27f8 <sd_mmc_spi_start_write_block+0x44>)
    27e6:	2201      	movs	r2, #1
    27e8:	0018      	movs	r0, r3
    27ea:	4b04      	ldr	r3, [pc, #16]	; (27fc <sd_mmc_spi_start_write_block+0x48>)
    27ec:	4798      	blx	r3
}
    27ee:	46c0      	nop			; (mov r8, r8)
    27f0:	46bd      	mov	sp, r7
    27f2:	b002      	add	sp, #8
    27f4:	bd80      	pop	{r7, pc}
    27f6:	46c0      	nop			; (mov r8, r8)
    27f8:	200000ec 	.word	0x200000ec
    27fc:	00004965 	.word	0x00004965
    2800:	2000013a 	.word	0x2000013a

00002804 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    2804:	b590      	push	{r4, r7, lr}
    2806:	b083      	sub	sp, #12
    2808:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    280a:	1dbb      	adds	r3, r7, #6
    280c:	22ff      	movs	r2, #255	; 0xff
    280e:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    2810:	1cbb      	adds	r3, r7, #2
    2812:	2201      	movs	r2, #1
    2814:	4252      	negs	r2, r2
    2816:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    2818:	1cb9      	adds	r1, r7, #2
    281a:	4b1b      	ldr	r3, [pc, #108]	; (2888 <sd_mmc_spi_stop_write_block+0x84>)
    281c:	2202      	movs	r2, #2
    281e:	0018      	movs	r0, r3
    2820:	4b1a      	ldr	r3, [pc, #104]	; (288c <sd_mmc_spi_stop_write_block+0x88>)
    2822:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    2824:	1dbb      	adds	r3, r7, #6
    2826:	881b      	ldrh	r3, [r3, #0]
    2828:	1d79      	adds	r1, r7, #5
    282a:	4817      	ldr	r0, [pc, #92]	; (2888 <sd_mmc_spi_stop_write_block+0x84>)
    282c:	2201      	movs	r2, #1
    282e:	4c18      	ldr	r4, [pc, #96]	; (2890 <sd_mmc_spi_stop_write_block+0x8c>)
    2830:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    2832:	1d7b      	adds	r3, r7, #5
    2834:	781b      	ldrb	r3, [r3, #0]
    2836:	001a      	movs	r2, r3
    2838:	2310      	movs	r3, #16
    283a:	4013      	ands	r3, r2
    283c:	d105      	bne.n	284a <sd_mmc_spi_stop_write_block+0x46>
    283e:	1d7b      	adds	r3, r7, #5
    2840:	781b      	ldrb	r3, [r3, #0]
    2842:	001a      	movs	r2, r3
    2844:	2301      	movs	r3, #1
    2846:	4013      	ands	r3, r2
    2848:	d104      	bne.n	2854 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    284a:	4b12      	ldr	r3, [pc, #72]	; (2894 <sd_mmc_spi_stop_write_block+0x90>)
    284c:	2201      	movs	r2, #1
    284e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    2850:	2300      	movs	r3, #0
    2852:	e014      	b.n	287e <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    2854:	1d7b      	adds	r3, r7, #5
    2856:	781b      	ldrb	r3, [r3, #0]
    2858:	001a      	movs	r2, r3
    285a:	231e      	movs	r3, #30
    285c:	4013      	ands	r3, r2
    285e:	2b04      	cmp	r3, #4
    2860:	d00b      	beq.n	287a <sd_mmc_spi_stop_write_block+0x76>
    2862:	2b0a      	cmp	r3, #10
    2864:	d104      	bne.n	2870 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    2866:	4b0b      	ldr	r3, [pc, #44]	; (2894 <sd_mmc_spi_stop_write_block+0x90>)
    2868:	2208      	movs	r2, #8
    286a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    286c:	2300      	movs	r3, #0
    286e:	e006      	b.n	287e <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    2870:	4b08      	ldr	r3, [pc, #32]	; (2894 <sd_mmc_spi_stop_write_block+0x90>)
    2872:	220a      	movs	r2, #10
    2874:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    2876:	2300      	movs	r3, #0
    2878:	e001      	b.n	287e <sd_mmc_spi_stop_write_block+0x7a>
		break;
    287a:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    287c:	2301      	movs	r3, #1
}
    287e:	0018      	movs	r0, r3
    2880:	46bd      	mov	sp, r7
    2882:	b003      	add	sp, #12
    2884:	bd90      	pop	{r4, r7, pc}
    2886:	46c0      	nop			; (mov r8, r8)
    2888:	200000ec 	.word	0x200000ec
    288c:	00004965 	.word	0x00004965
    2890:	00004741 	.word	0x00004741
    2894:	2000012f 	.word	0x2000012f

00002898 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    2898:	b590      	push	{r4, r7, lr}
    289a:	b083      	sub	sp, #12
    289c:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    289e:	4b1d      	ldr	r3, [pc, #116]	; (2914 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    28a0:	881b      	ldrh	r3, [r3, #0]
    28a2:	2b01      	cmp	r3, #1
    28a4:	d101      	bne.n	28aa <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    28a6:	2301      	movs	r3, #1
    28a8:	e030      	b.n	290c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    28aa:	4b1a      	ldr	r3, [pc, #104]	; (2914 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    28ac:	881b      	ldrh	r3, [r3, #0]
    28ae:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    28b0:	4b19      	ldr	r3, [pc, #100]	; (2918 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    28b2:	681a      	ldr	r2, [r3, #0]
    28b4:	4b19      	ldr	r3, [pc, #100]	; (291c <sd_mmc_spi_stop_multiwrite_block+0x84>)
    28b6:	881b      	ldrh	r3, [r3, #0]
    28b8:	0019      	movs	r1, r3
    28ba:	4b19      	ldr	r3, [pc, #100]	; (2920 <sd_mmc_spi_stop_multiwrite_block+0x88>)
    28bc:	0010      	movs	r0, r2
    28be:	4798      	blx	r3
    28c0:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    28c2:	429c      	cmp	r4, r3
    28c4:	d901      	bls.n	28ca <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    28c6:	2301      	movs	r3, #1
    28c8:	e020      	b.n	290c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    28ca:	1dfb      	adds	r3, r7, #7
    28cc:	22ff      	movs	r2, #255	; 0xff
    28ce:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    28d0:	1df9      	adds	r1, r7, #7
    28d2:	4b14      	ldr	r3, [pc, #80]	; (2924 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    28d4:	2201      	movs	r2, #1
    28d6:	0018      	movs	r0, r3
    28d8:	4b13      	ldr	r3, [pc, #76]	; (2928 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    28da:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    28dc:	1dfb      	adds	r3, r7, #7
    28de:	22fd      	movs	r2, #253	; 0xfd
    28e0:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    28e2:	1df9      	adds	r1, r7, #7
    28e4:	4b0f      	ldr	r3, [pc, #60]	; (2924 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    28e6:	2201      	movs	r2, #1
    28e8:	0018      	movs	r0, r3
    28ea:	4b0f      	ldr	r3, [pc, #60]	; (2928 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    28ec:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    28ee:	4b0f      	ldr	r3, [pc, #60]	; (292c <sd_mmc_spi_stop_multiwrite_block+0x94>)
    28f0:	4798      	blx	r3
    28f2:	0003      	movs	r3, r0
    28f4:	001a      	movs	r2, r3
    28f6:	2301      	movs	r3, #1
    28f8:	4053      	eors	r3, r2
    28fa:	b2db      	uxtb	r3, r3
    28fc:	2b00      	cmp	r3, #0
    28fe:	d004      	beq.n	290a <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2900:	4b0b      	ldr	r3, [pc, #44]	; (2930 <sd_mmc_spi_stop_multiwrite_block+0x98>)
    2902:	2205      	movs	r2, #5
    2904:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    2906:	2300      	movs	r3, #0
    2908:	e000      	b.n	290c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    290a:	2301      	movs	r3, #1
}
    290c:	0018      	movs	r0, r3
    290e:	46bd      	mov	sp, r7
    2910:	b003      	add	sp, #12
    2912:	bd90      	pop	{r4, r7, pc}
    2914:	2000013a 	.word	0x2000013a
    2918:	20000134 	.word	0x20000134
    291c:	20000138 	.word	0x20000138
    2920:	0000b1cd 	.word	0x0000b1cd
    2924:	200000ec 	.word	0x200000ec
    2928:	00004965 	.word	0x00004965
    292c:	00002699 	.word	0x00002699
    2930:	2000012f 	.word	0x2000012f

00002934 <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    2934:	b580      	push	{r7, lr}
    2936:	af00      	add	r7, sp, #0
	spi_reset(&sd_mmc_master);
    2938:	4b03      	ldr	r3, [pc, #12]	; (2948 <sd_mmc_deinit+0x14>)
    293a:	0018      	movs	r0, r3
    293c:	4b03      	ldr	r3, [pc, #12]	; (294c <sd_mmc_deinit+0x18>)
    293e:	4798      	blx	r3
}
    2940:	46c0      	nop			; (mov r8, r8)
    2942:	46bd      	mov	sp, r7
    2944:	bd80      	pop	{r7, pc}
    2946:	46c0      	nop			; (mov r8, r8)
    2948:	200000ec 	.word	0x200000ec
    294c:	00004299 	.word	0x00004299

00002950 <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    2950:	b580      	push	{r7, lr}
    2952:	b090      	sub	sp, #64	; 0x40
    2954:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2956:	4b1f      	ldr	r3, [pc, #124]	; (29d4 <sd_mmc_spi_init+0x84>)
    2958:	2200      	movs	r2, #0
    295a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    295c:	233c      	movs	r3, #60	; 0x3c
    295e:	18fb      	adds	r3, r7, r3
    2960:	0018      	movs	r0, r3
    2962:	4b1d      	ldr	r3, [pc, #116]	; (29d8 <sd_mmc_spi_init+0x88>)
    2964:	4798      	blx	r3
	//pin_conf.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    2966:	1d3b      	adds	r3, r7, #4
    2968:	0018      	movs	r0, r3
    296a:	4b1c      	ldr	r3, [pc, #112]	; (29dc <sd_mmc_spi_init+0x8c>)
    296c:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    296e:	1d3b      	adds	r3, r7, #4
    2970:	2280      	movs	r2, #128	; 0x80
    2972:	0252      	lsls	r2, r2, #9
    2974:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    2976:	1d3b      	adds	r3, r7, #4
    2978:	4a19      	ldr	r2, [pc, #100]	; (29e0 <sd_mmc_spi_init+0x90>)
    297a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    297c:	1d3b      	adds	r3, r7, #4
    297e:	4a19      	ldr	r2, [pc, #100]	; (29e4 <sd_mmc_spi_init+0x94>)
    2980:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    2982:	1d3b      	adds	r3, r7, #4
    2984:	4a18      	ldr	r2, [pc, #96]	; (29e8 <sd_mmc_spi_init+0x98>)
    2986:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    2988:	1d3b      	adds	r3, r7, #4
    298a:	4a18      	ldr	r2, [pc, #96]	; (29ec <sd_mmc_spi_init+0x9c>)
    298c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    298e:	1d3b      	adds	r3, r7, #4
    2990:	2224      	movs	r2, #36	; 0x24
    2992:	2100      	movs	r1, #0
    2994:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    2996:	1d3b      	adds	r3, r7, #4
    2998:	4a15      	ldr	r2, [pc, #84]	; (29f0 <sd_mmc_spi_init+0xa0>)
    299a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    299c:	1d3a      	adds	r2, r7, #4
    299e:	4915      	ldr	r1, [pc, #84]	; (29f4 <sd_mmc_spi_init+0xa4>)
    29a0:	4b15      	ldr	r3, [pc, #84]	; (29f8 <sd_mmc_spi_init+0xa8>)
    29a2:	0018      	movs	r0, r3
    29a4:	4b15      	ldr	r3, [pc, #84]	; (29fc <sd_mmc_spi_init+0xac>)
    29a6:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    29a8:	4b13      	ldr	r3, [pc, #76]	; (29f8 <sd_mmc_spi_init+0xa8>)
    29aa:	0018      	movs	r0, r3
    29ac:	4b14      	ldr	r3, [pc, #80]	; (2a00 <sd_mmc_spi_init+0xb0>)
    29ae:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    29b0:	4b14      	ldr	r3, [pc, #80]	; (2a04 <sd_mmc_spi_init+0xb4>)
    29b2:	0018      	movs	r0, r3
    29b4:	4b14      	ldr	r3, [pc, #80]	; (2a08 <sd_mmc_spi_init+0xb8>)
    29b6:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    29b8:	4b14      	ldr	r3, [pc, #80]	; (2a0c <sd_mmc_spi_init+0xbc>)
    29ba:	781a      	ldrb	r2, [r3, #0]
    29bc:	4b11      	ldr	r3, [pc, #68]	; (2a04 <sd_mmc_spi_init+0xb4>)
    29be:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    29c0:	4a10      	ldr	r2, [pc, #64]	; (2a04 <sd_mmc_spi_init+0xb4>)
    29c2:	4b13      	ldr	r3, [pc, #76]	; (2a10 <sd_mmc_spi_init+0xc0>)
    29c4:	0011      	movs	r1, r2
    29c6:	0018      	movs	r0, r3
    29c8:	4b12      	ldr	r3, [pc, #72]	; (2a14 <sd_mmc_spi_init+0xc4>)
    29ca:	4798      	blx	r3
}
    29cc:	46c0      	nop			; (mov r8, r8)
    29ce:	46bd      	mov	sp, r7
    29d0:	b010      	add	sp, #64	; 0x40
    29d2:	bd80      	pop	{r7, pc}
    29d4:	2000012f 	.word	0x2000012f
    29d8:	000023bd 	.word	0x000023bd
    29dc:	00002481 	.word	0x00002481
    29e0:	00100002 	.word	0x00100002
    29e4:	00110002 	.word	0x00110002
    29e8:	00120002 	.word	0x00120002
    29ec:	00130002 	.word	0x00130002
    29f0:	00061a80 	.word	0x00061a80
    29f4:	42000c00 	.word	0x42000c00
    29f8:	200000ec 	.word	0x200000ec
    29fc:	000045b1 	.word	0x000045b1
    2a00:	0000258d 	.word	0x0000258d
    2a04:	2000012c 	.word	0x2000012c
    2a08:	00002505 	.word	0x00002505
    2a0c:	20000008 	.word	0x20000008
    2a10:	20000128 	.word	0x20000128
    2a14:	00002529 	.word	0x00002529

00002a18 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    2a18:	b590      	push	{r4, r7, lr}
    2a1a:	b083      	sub	sp, #12
    2a1c:	af00      	add	r7, sp, #0
    2a1e:	0004      	movs	r4, r0
    2a20:	6039      	str	r1, [r7, #0]
    2a22:	0010      	movs	r0, r2
    2a24:	0019      	movs	r1, r3
    2a26:	1dfb      	adds	r3, r7, #7
    2a28:	1c22      	adds	r2, r4, #0
    2a2a:	701a      	strb	r2, [r3, #0]
    2a2c:	1dbb      	adds	r3, r7, #6
    2a2e:	1c02      	adds	r2, r0, #0
    2a30:	701a      	strb	r2, [r3, #0]
    2a32:	1d7b      	adds	r3, r7, #5
    2a34:	1c0a      	adds	r2, r1, #0
    2a36:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2a38:	4b13      	ldr	r3, [pc, #76]	; (2a88 <sd_mmc_spi_select_device+0x70>)
    2a3a:	2200      	movs	r2, #0
    2a3c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    2a3e:	683b      	ldr	r3, [r7, #0]
    2a40:	4a12      	ldr	r2, [pc, #72]	; (2a8c <sd_mmc_spi_select_device+0x74>)
    2a42:	4293      	cmp	r3, r2
    2a44:	d907      	bls.n	2a56 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    2a46:	4b11      	ldr	r3, [pc, #68]	; (2a8c <sd_mmc_spi_select_device+0x74>)
    2a48:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2a4a:	e004      	b.n	2a56 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    2a4c:	683b      	ldr	r3, [r7, #0]
    2a4e:	08db      	lsrs	r3, r3, #3
    2a50:	683a      	ldr	r2, [r7, #0]
    2a52:	1ad3      	subs	r3, r2, r3
    2a54:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2a56:	683a      	ldr	r2, [r7, #0]
    2a58:	4b0d      	ldr	r3, [pc, #52]	; (2a90 <sd_mmc_spi_select_device+0x78>)
    2a5a:	0011      	movs	r1, r2
    2a5c:	0018      	movs	r0, r3
    2a5e:	4b0d      	ldr	r3, [pc, #52]	; (2a94 <sd_mmc_spi_select_device+0x7c>)
    2a60:	4798      	blx	r3
    2a62:	0003      	movs	r3, r0
    2a64:	2b17      	cmp	r3, #23
    2a66:	d0f1      	beq.n	2a4c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    2a68:	1dfb      	adds	r3, r7, #7
    2a6a:	781a      	ldrb	r2, [r3, #0]
    2a6c:	0013      	movs	r3, r2
    2a6e:	005b      	lsls	r3, r3, #1
    2a70:	189b      	adds	r3, r3, r2
    2a72:	4a09      	ldr	r2, [pc, #36]	; (2a98 <sd_mmc_spi_select_device+0x80>)
    2a74:	1899      	adds	r1, r3, r2
    2a76:	4b06      	ldr	r3, [pc, #24]	; (2a90 <sd_mmc_spi_select_device+0x78>)
    2a78:	2201      	movs	r2, #1
    2a7a:	0018      	movs	r0, r3
    2a7c:	4b07      	ldr	r3, [pc, #28]	; (2a9c <sd_mmc_spi_select_device+0x84>)
    2a7e:	4798      	blx	r3
}
    2a80:	46c0      	nop			; (mov r8, r8)
    2a82:	46bd      	mov	sp, r7
    2a84:	b003      	add	sp, #12
    2a86:	bd90      	pop	{r4, r7, pc}
    2a88:	2000012f 	.word	0x2000012f
    2a8c:	00989680 	.word	0x00989680
    2a90:	200000ec 	.word	0x200000ec
    2a94:	000042d9 	.word	0x000042d9
    2a98:	20000128 	.word	0x20000128
    2a9c:	00004875 	.word	0x00004875

00002aa0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    2aa0:	b580      	push	{r7, lr}
    2aa2:	b082      	sub	sp, #8
    2aa4:	af00      	add	r7, sp, #0
    2aa6:	0002      	movs	r2, r0
    2aa8:	1dfb      	adds	r3, r7, #7
    2aaa:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2aac:	4b09      	ldr	r3, [pc, #36]	; (2ad4 <sd_mmc_spi_deselect_device+0x34>)
    2aae:	2200      	movs	r2, #0
    2ab0:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    2ab2:	1dfb      	adds	r3, r7, #7
    2ab4:	781a      	ldrb	r2, [r3, #0]
    2ab6:	0013      	movs	r3, r2
    2ab8:	005b      	lsls	r3, r3, #1
    2aba:	189b      	adds	r3, r3, r2
    2abc:	4a06      	ldr	r2, [pc, #24]	; (2ad8 <sd_mmc_spi_deselect_device+0x38>)
    2abe:	1899      	adds	r1, r3, r2
    2ac0:	4b06      	ldr	r3, [pc, #24]	; (2adc <sd_mmc_spi_deselect_device+0x3c>)
    2ac2:	2200      	movs	r2, #0
    2ac4:	0018      	movs	r0, r3
    2ac6:	4b06      	ldr	r3, [pc, #24]	; (2ae0 <sd_mmc_spi_deselect_device+0x40>)
    2ac8:	4798      	blx	r3
}
    2aca:	46c0      	nop			; (mov r8, r8)
    2acc:	46bd      	mov	sp, r7
    2ace:	b002      	add	sp, #8
    2ad0:	bd80      	pop	{r7, pc}
    2ad2:	46c0      	nop			; (mov r8, r8)
    2ad4:	2000012f 	.word	0x2000012f
    2ad8:	20000128 	.word	0x20000128
    2adc:	200000ec 	.word	0x200000ec
    2ae0:	00004875 	.word	0x00004875

00002ae4 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    2ae4:	b580      	push	{r7, lr}
    2ae6:	b082      	sub	sp, #8
    2ae8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    2aea:	1dbb      	adds	r3, r7, #6
    2aec:	22ff      	movs	r2, #255	; 0xff
    2aee:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2af0:	4b0c      	ldr	r3, [pc, #48]	; (2b24 <sd_mmc_spi_send_clock+0x40>)
    2af2:	2200      	movs	r2, #0
    2af4:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    2af6:	1dfb      	adds	r3, r7, #7
    2af8:	2200      	movs	r2, #0
    2afa:	701a      	strb	r2, [r3, #0]
    2afc:	e00a      	b.n	2b14 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    2afe:	1db9      	adds	r1, r7, #6
    2b00:	4b09      	ldr	r3, [pc, #36]	; (2b28 <sd_mmc_spi_send_clock+0x44>)
    2b02:	2201      	movs	r2, #1
    2b04:	0018      	movs	r0, r3
    2b06:	4b09      	ldr	r3, [pc, #36]	; (2b2c <sd_mmc_spi_send_clock+0x48>)
    2b08:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    2b0a:	1dfb      	adds	r3, r7, #7
    2b0c:	781a      	ldrb	r2, [r3, #0]
    2b0e:	1dfb      	adds	r3, r7, #7
    2b10:	3201      	adds	r2, #1
    2b12:	701a      	strb	r2, [r3, #0]
    2b14:	1dfb      	adds	r3, r7, #7
    2b16:	781b      	ldrb	r3, [r3, #0]
    2b18:	2b09      	cmp	r3, #9
    2b1a:	d9f0      	bls.n	2afe <sd_mmc_spi_send_clock+0x1a>
	}
}
    2b1c:	46c0      	nop			; (mov r8, r8)
    2b1e:	46bd      	mov	sp, r7
    2b20:	b002      	add	sp, #8
    2b22:	bd80      	pop	{r7, pc}
    2b24:	2000012f 	.word	0x2000012f
    2b28:	200000ec 	.word	0x200000ec
    2b2c:	00004965 	.word	0x00004965

00002b30 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    2b30:	b590      	push	{r4, r7, lr}
    2b32:	b085      	sub	sp, #20
    2b34:	af02      	add	r7, sp, #8
    2b36:	6078      	str	r0, [r7, #4]
    2b38:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    2b3a:	6839      	ldr	r1, [r7, #0]
    2b3c:	6878      	ldr	r0, [r7, #4]
    2b3e:	2300      	movs	r3, #0
    2b40:	9300      	str	r3, [sp, #0]
    2b42:	2300      	movs	r3, #0
    2b44:	2200      	movs	r2, #0
    2b46:	4c03      	ldr	r4, [pc, #12]	; (2b54 <sd_mmc_spi_send_cmd+0x24>)
    2b48:	47a0      	blx	r4
    2b4a:	0003      	movs	r3, r0
}
    2b4c:	0018      	movs	r0, r3
    2b4e:	46bd      	mov	sp, r7
    2b50:	b003      	add	sp, #12
    2b52:	bd90      	pop	{r4, r7, pc}
    2b54:	00002b59 	.word	0x00002b59

00002b58 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    2b58:	b590      	push	{r4, r7, lr}
    2b5a:	b089      	sub	sp, #36	; 0x24
    2b5c:	af00      	add	r7, sp, #0
    2b5e:	60f8      	str	r0, [r7, #12]
    2b60:	60b9      	str	r1, [r7, #8]
    2b62:	0019      	movs	r1, r3
    2b64:	1dbb      	adds	r3, r7, #6
    2b66:	801a      	strh	r2, [r3, #0]
    2b68:	1d3b      	adds	r3, r7, #4
    2b6a:	1c0a      	adds	r2, r1, #0
    2b6c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    2b6e:	231b      	movs	r3, #27
    2b70:	18fb      	adds	r3, r7, r3
    2b72:	22ff      	movs	r2, #255	; 0xff
    2b74:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    2b76:	231c      	movs	r3, #28
    2b78:	18fb      	adds	r3, r7, r3
    2b7a:	22ff      	movs	r2, #255	; 0xff
    2b7c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2b7e:	4b72      	ldr	r3, [pc, #456]	; (2d48 <sd_mmc_spi_adtc_start+0x1f0>)
    2b80:	2200      	movs	r2, #0
    2b82:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    2b84:	68fb      	ldr	r3, [r7, #12]
    2b86:	b2db      	uxtb	r3, r3
    2b88:	223f      	movs	r2, #63	; 0x3f
    2b8a:	4013      	ands	r3, r2
    2b8c:	b2db      	uxtb	r3, r3
    2b8e:	2240      	movs	r2, #64	; 0x40
    2b90:	4313      	orrs	r3, r2
    2b92:	b2da      	uxtb	r2, r3
    2b94:	2314      	movs	r3, #20
    2b96:	18fb      	adds	r3, r7, r3
    2b98:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    2b9a:	68bb      	ldr	r3, [r7, #8]
    2b9c:	0e1b      	lsrs	r3, r3, #24
    2b9e:	b2da      	uxtb	r2, r3
    2ba0:	2314      	movs	r3, #20
    2ba2:	18fb      	adds	r3, r7, r3
    2ba4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    2ba6:	68bb      	ldr	r3, [r7, #8]
    2ba8:	0c1b      	lsrs	r3, r3, #16
    2baa:	b2da      	uxtb	r2, r3
    2bac:	2314      	movs	r3, #20
    2bae:	18fb      	adds	r3, r7, r3
    2bb0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    2bb2:	68bb      	ldr	r3, [r7, #8]
    2bb4:	0a1b      	lsrs	r3, r3, #8
    2bb6:	b2da      	uxtb	r2, r3
    2bb8:	2314      	movs	r3, #20
    2bba:	18fb      	adds	r3, r7, r3
    2bbc:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    2bbe:	68bb      	ldr	r3, [r7, #8]
    2bc0:	b2da      	uxtb	r2, r3
    2bc2:	2314      	movs	r3, #20
    2bc4:	18fb      	adds	r3, r7, r3
    2bc6:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    2bc8:	2314      	movs	r3, #20
    2bca:	18fb      	adds	r3, r7, r3
    2bcc:	2105      	movs	r1, #5
    2bce:	0018      	movs	r0, r3
    2bd0:	4b5e      	ldr	r3, [pc, #376]	; (2d4c <sd_mmc_spi_adtc_start+0x1f4>)
    2bd2:	4798      	blx	r3
    2bd4:	0003      	movs	r3, r0
    2bd6:	001a      	movs	r2, r3
    2bd8:	2314      	movs	r3, #20
    2bda:	18fb      	adds	r3, r7, r3
    2bdc:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    2bde:	231b      	movs	r3, #27
    2be0:	18f9      	adds	r1, r7, r3
    2be2:	4b5b      	ldr	r3, [pc, #364]	; (2d50 <sd_mmc_spi_adtc_start+0x1f8>)
    2be4:	2201      	movs	r2, #1
    2be6:	0018      	movs	r0, r3
    2be8:	4b5a      	ldr	r3, [pc, #360]	; (2d54 <sd_mmc_spi_adtc_start+0x1fc>)
    2bea:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    2bec:	2314      	movs	r3, #20
    2bee:	18f9      	adds	r1, r7, r3
    2bf0:	4b57      	ldr	r3, [pc, #348]	; (2d50 <sd_mmc_spi_adtc_start+0x1f8>)
    2bf2:	2206      	movs	r2, #6
    2bf4:	0018      	movs	r0, r3
    2bf6:	4b57      	ldr	r3, [pc, #348]	; (2d54 <sd_mmc_spi_adtc_start+0x1fc>)
    2bf8:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    2bfa:	2313      	movs	r3, #19
    2bfc:	18fb      	adds	r3, r7, r3
    2bfe:	22ff      	movs	r2, #255	; 0xff
    2c00:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2c02:	231c      	movs	r3, #28
    2c04:	18fb      	adds	r3, r7, r3
    2c06:	881b      	ldrh	r3, [r3, #0]
    2c08:	2213      	movs	r2, #19
    2c0a:	18b9      	adds	r1, r7, r2
    2c0c:	4850      	ldr	r0, [pc, #320]	; (2d50 <sd_mmc_spi_adtc_start+0x1f8>)
    2c0e:	2201      	movs	r2, #1
    2c10:	4c51      	ldr	r4, [pc, #324]	; (2d58 <sd_mmc_spi_adtc_start+0x200>)
    2c12:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    2c14:	231f      	movs	r3, #31
    2c16:	18fb      	adds	r3, r7, r3
    2c18:	2207      	movs	r2, #7
    2c1a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2c1c:	231c      	movs	r3, #28
    2c1e:	18fb      	adds	r3, r7, r3
    2c20:	881b      	ldrh	r3, [r3, #0]
    2c22:	2213      	movs	r2, #19
    2c24:	18b9      	adds	r1, r7, r2
    2c26:	484a      	ldr	r0, [pc, #296]	; (2d50 <sd_mmc_spi_adtc_start+0x1f8>)
    2c28:	2201      	movs	r2, #1
    2c2a:	4c4b      	ldr	r4, [pc, #300]	; (2d58 <sd_mmc_spi_adtc_start+0x200>)
    2c2c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    2c2e:	2313      	movs	r3, #19
    2c30:	18fb      	adds	r3, r7, r3
    2c32:	781b      	ldrb	r3, [r3, #0]
    2c34:	b25b      	sxtb	r3, r3
    2c36:	2b00      	cmp	r3, #0
    2c38:	da10      	bge.n	2c5c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    2c3a:	231f      	movs	r3, #31
    2c3c:	18fb      	adds	r3, r7, r3
    2c3e:	221f      	movs	r2, #31
    2c40:	18ba      	adds	r2, r7, r2
    2c42:	7812      	ldrb	r2, [r2, #0]
    2c44:	3a01      	subs	r2, #1
    2c46:	701a      	strb	r2, [r3, #0]
    2c48:	231f      	movs	r3, #31
    2c4a:	18fb      	adds	r3, r7, r3
    2c4c:	781b      	ldrb	r3, [r3, #0]
    2c4e:	2b00      	cmp	r3, #0
    2c50:	d1e4      	bne.n	2c1c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    2c52:	4b3d      	ldr	r3, [pc, #244]	; (2d48 <sd_mmc_spi_adtc_start+0x1f0>)
    2c54:	2202      	movs	r2, #2
    2c56:	701a      	strb	r2, [r3, #0]
			return false;
    2c58:	2300      	movs	r3, #0
    2c5a:	e070      	b.n	2d3e <sd_mmc_spi_adtc_start+0x1e6>
			break;
    2c5c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    2c5e:	2313      	movs	r3, #19
    2c60:	18fb      	adds	r3, r7, r3
    2c62:	781b      	ldrb	r3, [r3, #0]
    2c64:	001a      	movs	r2, r3
    2c66:	4b3d      	ldr	r3, [pc, #244]	; (2d5c <sd_mmc_spi_adtc_start+0x204>)
    2c68:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    2c6a:	2313      	movs	r3, #19
    2c6c:	18fb      	adds	r3, r7, r3
    2c6e:	781b      	ldrb	r3, [r3, #0]
    2c70:	001a      	movs	r2, r3
    2c72:	2308      	movs	r3, #8
    2c74:	4013      	ands	r3, r2
    2c76:	d004      	beq.n	2c82 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    2c78:	4b33      	ldr	r3, [pc, #204]	; (2d48 <sd_mmc_spi_adtc_start+0x1f0>)
    2c7a:	2206      	movs	r2, #6
    2c7c:	701a      	strb	r2, [r3, #0]
		return false;
    2c7e:	2300      	movs	r3, #0
    2c80:	e05d      	b.n	2d3e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    2c82:	2313      	movs	r3, #19
    2c84:	18fb      	adds	r3, r7, r3
    2c86:	781b      	ldrb	r3, [r3, #0]
    2c88:	001a      	movs	r2, r3
    2c8a:	2304      	movs	r3, #4
    2c8c:	4013      	ands	r3, r2
    2c8e:	d004      	beq.n	2c9a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    2c90:	4b2d      	ldr	r3, [pc, #180]	; (2d48 <sd_mmc_spi_adtc_start+0x1f0>)
    2c92:	2209      	movs	r2, #9
    2c94:	701a      	strb	r2, [r3, #0]
		return false;
    2c96:	2300      	movs	r3, #0
    2c98:	e051      	b.n	2d3e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    2c9a:	2313      	movs	r3, #19
    2c9c:	18fb      	adds	r3, r7, r3
    2c9e:	781b      	ldrb	r3, [r3, #0]
    2ca0:	001a      	movs	r2, r3
    2ca2:	2301      	movs	r3, #1
    2ca4:	439a      	bics	r2, r3
    2ca6:	1e13      	subs	r3, r2, #0
    2ca8:	d004      	beq.n	2cb4 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2caa:	4b27      	ldr	r3, [pc, #156]	; (2d48 <sd_mmc_spi_adtc_start+0x1f0>)
    2cac:	2201      	movs	r2, #1
    2cae:	701a      	strb	r2, [r3, #0]
		return false;
    2cb0:	2300      	movs	r3, #0
    2cb2:	e044      	b.n	2d3e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    2cb4:	68fa      	ldr	r2, [r7, #12]
    2cb6:	2380      	movs	r3, #128	; 0x80
    2cb8:	019b      	lsls	r3, r3, #6
    2cba:	4013      	ands	r3, r2
    2cbc:	d00d      	beq.n	2cda <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    2cbe:	4b28      	ldr	r3, [pc, #160]	; (2d60 <sd_mmc_spi_adtc_start+0x208>)
    2cc0:	4798      	blx	r3
    2cc2:	0003      	movs	r3, r0
    2cc4:	001a      	movs	r2, r3
    2cc6:	2301      	movs	r3, #1
    2cc8:	4053      	eors	r3, r2
    2cca:	b2db      	uxtb	r3, r3
    2ccc:	2b00      	cmp	r3, #0
    2cce:	d004      	beq.n	2cda <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    2cd0:	4b1d      	ldr	r3, [pc, #116]	; (2d48 <sd_mmc_spi_adtc_start+0x1f0>)
    2cd2:	2203      	movs	r2, #3
    2cd4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    2cd6:	2300      	movs	r3, #0
    2cd8:	e031      	b.n	2d3e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    2cda:	68fa      	ldr	r2, [r7, #12]
    2cdc:	2380      	movs	r3, #128	; 0x80
    2cde:	009b      	lsls	r3, r3, #2
    2ce0:	4013      	ands	r3, r2
    2ce2:	d00e      	beq.n	2d02 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    2ce4:	4b1d      	ldr	r3, [pc, #116]	; (2d5c <sd_mmc_spi_adtc_start+0x204>)
    2ce6:	2200      	movs	r2, #0
    2ce8:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    2cea:	231c      	movs	r3, #28
    2cec:	18fb      	adds	r3, r7, r3
    2cee:	881b      	ldrh	r3, [r3, #0]
    2cf0:	491a      	ldr	r1, [pc, #104]	; (2d5c <sd_mmc_spi_adtc_start+0x204>)
    2cf2:	4817      	ldr	r0, [pc, #92]	; (2d50 <sd_mmc_spi_adtc_start+0x1f8>)
    2cf4:	2201      	movs	r2, #1
    2cf6:	4c18      	ldr	r4, [pc, #96]	; (2d58 <sd_mmc_spi_adtc_start+0x200>)
    2cf8:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    2cfa:	4b18      	ldr	r3, [pc, #96]	; (2d5c <sd_mmc_spi_adtc_start+0x204>)
    2cfc:	681a      	ldr	r2, [r3, #0]
    2cfe:	4b17      	ldr	r3, [pc, #92]	; (2d5c <sd_mmc_spi_adtc_start+0x204>)
    2d00:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    2d02:	68fa      	ldr	r2, [r7, #12]
    2d04:	2380      	movs	r3, #128	; 0x80
    2d06:	00db      	lsls	r3, r3, #3
    2d08:	4013      	ands	r3, r2
    2d0a:	d00c      	beq.n	2d26 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    2d0c:	231c      	movs	r3, #28
    2d0e:	18fb      	adds	r3, r7, r3
    2d10:	881b      	ldrh	r3, [r3, #0]
    2d12:	4912      	ldr	r1, [pc, #72]	; (2d5c <sd_mmc_spi_adtc_start+0x204>)
    2d14:	480e      	ldr	r0, [pc, #56]	; (2d50 <sd_mmc_spi_adtc_start+0x1f8>)
    2d16:	2204      	movs	r2, #4
    2d18:	4c0f      	ldr	r4, [pc, #60]	; (2d58 <sd_mmc_spi_adtc_start+0x200>)
    2d1a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    2d1c:	4b0f      	ldr	r3, [pc, #60]	; (2d5c <sd_mmc_spi_adtc_start+0x204>)
    2d1e:	681b      	ldr	r3, [r3, #0]
    2d20:	ba1a      	rev	r2, r3
    2d22:	4b0e      	ldr	r3, [pc, #56]	; (2d5c <sd_mmc_spi_adtc_start+0x204>)
    2d24:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    2d26:	4b0f      	ldr	r3, [pc, #60]	; (2d64 <sd_mmc_spi_adtc_start+0x20c>)
    2d28:	1dba      	adds	r2, r7, #6
    2d2a:	8812      	ldrh	r2, [r2, #0]
    2d2c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    2d2e:	4b0e      	ldr	r3, [pc, #56]	; (2d68 <sd_mmc_spi_adtc_start+0x210>)
    2d30:	1d3a      	adds	r2, r7, #4
    2d32:	8812      	ldrh	r2, [r2, #0]
    2d34:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    2d36:	4b0d      	ldr	r3, [pc, #52]	; (2d6c <sd_mmc_spi_adtc_start+0x214>)
    2d38:	2200      	movs	r2, #0
    2d3a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    2d3c:	2301      	movs	r3, #1
}
    2d3e:	0018      	movs	r0, r3
    2d40:	46bd      	mov	sp, r7
    2d42:	b009      	add	sp, #36	; 0x24
    2d44:	bd90      	pop	{r4, r7, pc}
    2d46:	46c0      	nop			; (mov r8, r8)
    2d48:	2000012f 	.word	0x2000012f
    2d4c:	000025dd 	.word	0x000025dd
    2d50:	200000ec 	.word	0x200000ec
    2d54:	00004965 	.word	0x00004965
    2d58:	00004741 	.word	0x00004741
    2d5c:	20000130 	.word	0x20000130
    2d60:	00002699 	.word	0x00002699
    2d64:	20000138 	.word	0x20000138
    2d68:	2000013a 	.word	0x2000013a
    2d6c:	20000134 	.word	0x20000134

00002d70 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    2d70:	b580      	push	{r7, lr}
    2d72:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    2d74:	4b02      	ldr	r3, [pc, #8]	; (2d80 <sd_mmc_spi_get_response+0x10>)
    2d76:	681b      	ldr	r3, [r3, #0]
}
    2d78:	0018      	movs	r0, r3
    2d7a:	46bd      	mov	sp, r7
    2d7c:	bd80      	pop	{r7, pc}
    2d7e:	46c0      	nop			; (mov r8, r8)
    2d80:	20000130 	.word	0x20000130

00002d84 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    2d84:	b590      	push	{r4, r7, lr}
    2d86:	b085      	sub	sp, #20
    2d88:	af00      	add	r7, sp, #0
    2d8a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    2d8c:	230e      	movs	r3, #14
    2d8e:	18fb      	adds	r3, r7, r3
    2d90:	22ff      	movs	r2, #255	; 0xff
    2d92:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2d94:	4b1c      	ldr	r3, [pc, #112]	; (2e08 <sd_mmc_spi_read_word+0x84>)
    2d96:	2200      	movs	r2, #0
    2d98:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    2d9a:	4b1c      	ldr	r3, [pc, #112]	; (2e0c <sd_mmc_spi_read_word+0x88>)
    2d9c:	681a      	ldr	r2, [r3, #0]
    2d9e:	4b1c      	ldr	r3, [pc, #112]	; (2e10 <sd_mmc_spi_read_word+0x8c>)
    2da0:	881b      	ldrh	r3, [r3, #0]
    2da2:	0019      	movs	r1, r3
    2da4:	4b1b      	ldr	r3, [pc, #108]	; (2e14 <sd_mmc_spi_read_word+0x90>)
    2da6:	0010      	movs	r0, r2
    2da8:	4798      	blx	r3
    2daa:	1e0b      	subs	r3, r1, #0
    2dac:	d10a      	bne.n	2dc4 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    2dae:	4b1a      	ldr	r3, [pc, #104]	; (2e18 <sd_mmc_spi_read_word+0x94>)
    2db0:	4798      	blx	r3
    2db2:	0003      	movs	r3, r0
    2db4:	001a      	movs	r2, r3
    2db6:	2301      	movs	r3, #1
    2db8:	4053      	eors	r3, r2
    2dba:	b2db      	uxtb	r3, r3
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d001      	beq.n	2dc4 <sd_mmc_spi_read_word+0x40>
			return false;
    2dc0:	2300      	movs	r3, #0
    2dc2:	e01d      	b.n	2e00 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    2dc4:	230e      	movs	r3, #14
    2dc6:	18fb      	adds	r3, r7, r3
    2dc8:	881b      	ldrh	r3, [r3, #0]
    2dca:	1d39      	adds	r1, r7, #4
    2dcc:	4813      	ldr	r0, [pc, #76]	; (2e1c <sd_mmc_spi_read_word+0x98>)
    2dce:	2204      	movs	r2, #4
    2dd0:	4c13      	ldr	r4, [pc, #76]	; (2e20 <sd_mmc_spi_read_word+0x9c>)
    2dd2:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    2dd4:	687b      	ldr	r3, [r7, #4]
    2dd6:	687a      	ldr	r2, [r7, #4]
    2dd8:	6812      	ldr	r2, [r2, #0]
    2dda:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    2ddc:	4b0b      	ldr	r3, [pc, #44]	; (2e0c <sd_mmc_spi_read_word+0x88>)
    2dde:	681b      	ldr	r3, [r3, #0]
    2de0:	1d1a      	adds	r2, r3, #4
    2de2:	4b0a      	ldr	r3, [pc, #40]	; (2e0c <sd_mmc_spi_read_word+0x88>)
    2de4:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    2de6:	4b09      	ldr	r3, [pc, #36]	; (2e0c <sd_mmc_spi_read_word+0x88>)
    2de8:	681a      	ldr	r2, [r3, #0]
    2dea:	4b09      	ldr	r3, [pc, #36]	; (2e10 <sd_mmc_spi_read_word+0x8c>)
    2dec:	881b      	ldrh	r3, [r3, #0]
    2dee:	0019      	movs	r1, r3
    2df0:	4b08      	ldr	r3, [pc, #32]	; (2e14 <sd_mmc_spi_read_word+0x90>)
    2df2:	0010      	movs	r0, r2
    2df4:	4798      	blx	r3
    2df6:	1e0b      	subs	r3, r1, #0
    2df8:	d101      	bne.n	2dfe <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    2dfa:	4b0a      	ldr	r3, [pc, #40]	; (2e24 <sd_mmc_spi_read_word+0xa0>)
    2dfc:	4798      	blx	r3
	}
	return true;
    2dfe:	2301      	movs	r3, #1
}
    2e00:	0018      	movs	r0, r3
    2e02:	46bd      	mov	sp, r7
    2e04:	b005      	add	sp, #20
    2e06:	bd90      	pop	{r4, r7, pc}
    2e08:	2000012f 	.word	0x2000012f
    2e0c:	20000134 	.word	0x20000134
    2e10:	20000138 	.word	0x20000138
    2e14:	0000b2d9 	.word	0x0000b2d9
    2e18:	00002705 	.word	0x00002705
    2e1c:	200000ec 	.word	0x200000ec
    2e20:	00004741 	.word	0x00004741
    2e24:	00002789 	.word	0x00002789

00002e28 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    2e28:	b590      	push	{r4, r7, lr}
    2e2a:	b085      	sub	sp, #20
    2e2c:	af00      	add	r7, sp, #0
    2e2e:	6078      	str	r0, [r7, #4]
    2e30:	000a      	movs	r2, r1
    2e32:	1cbb      	adds	r3, r7, #2
    2e34:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    2e36:	230a      	movs	r3, #10
    2e38:	18fb      	adds	r3, r7, r3
    2e3a:	22ff      	movs	r2, #255	; 0xff
    2e3c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2e3e:	4b1c      	ldr	r3, [pc, #112]	; (2eb0 <sd_mmc_spi_start_read_blocks+0x88>)
    2e40:	2200      	movs	r2, #0
    2e42:	701a      	strb	r2, [r3, #0]
	pos = 0;
    2e44:	2300      	movs	r3, #0
    2e46:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    2e48:	e025      	b.n	2e96 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    2e4a:	4b1a      	ldr	r3, [pc, #104]	; (2eb4 <sd_mmc_spi_start_read_blocks+0x8c>)
    2e4c:	4798      	blx	r3
    2e4e:	0003      	movs	r3, r0
    2e50:	001a      	movs	r2, r3
    2e52:	2301      	movs	r3, #1
    2e54:	4053      	eors	r3, r2
    2e56:	b2db      	uxtb	r3, r3
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d001      	beq.n	2e60 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    2e5c:	2300      	movs	r3, #0
    2e5e:	e022      	b.n	2ea6 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    2e60:	687a      	ldr	r2, [r7, #4]
    2e62:	68fb      	ldr	r3, [r7, #12]
    2e64:	18d1      	adds	r1, r2, r3
    2e66:	4b14      	ldr	r3, [pc, #80]	; (2eb8 <sd_mmc_spi_start_read_blocks+0x90>)
    2e68:	881a      	ldrh	r2, [r3, #0]
    2e6a:	230a      	movs	r3, #10
    2e6c:	18fb      	adds	r3, r7, r3
    2e6e:	881b      	ldrh	r3, [r3, #0]
    2e70:	4812      	ldr	r0, [pc, #72]	; (2ebc <sd_mmc_spi_start_read_blocks+0x94>)
    2e72:	4c13      	ldr	r4, [pc, #76]	; (2ec0 <sd_mmc_spi_start_read_blocks+0x98>)
    2e74:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    2e76:	4b10      	ldr	r3, [pc, #64]	; (2eb8 <sd_mmc_spi_start_read_blocks+0x90>)
    2e78:	881b      	ldrh	r3, [r3, #0]
    2e7a:	001a      	movs	r2, r3
    2e7c:	68fb      	ldr	r3, [r7, #12]
    2e7e:	189b      	adds	r3, r3, r2
    2e80:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    2e82:	4b0d      	ldr	r3, [pc, #52]	; (2eb8 <sd_mmc_spi_start_read_blocks+0x90>)
    2e84:	881b      	ldrh	r3, [r3, #0]
    2e86:	001a      	movs	r2, r3
    2e88:	4b0e      	ldr	r3, [pc, #56]	; (2ec4 <sd_mmc_spi_start_read_blocks+0x9c>)
    2e8a:	681b      	ldr	r3, [r3, #0]
    2e8c:	18d2      	adds	r2, r2, r3
    2e8e:	4b0d      	ldr	r3, [pc, #52]	; (2ec4 <sd_mmc_spi_start_read_blocks+0x9c>)
    2e90:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    2e92:	4b0d      	ldr	r3, [pc, #52]	; (2ec8 <sd_mmc_spi_start_read_blocks+0xa0>)
    2e94:	4798      	blx	r3
	while (nb_block--) {
    2e96:	1cbb      	adds	r3, r7, #2
    2e98:	881b      	ldrh	r3, [r3, #0]
    2e9a:	1cba      	adds	r2, r7, #2
    2e9c:	1e59      	subs	r1, r3, #1
    2e9e:	8011      	strh	r1, [r2, #0]
    2ea0:	2b00      	cmp	r3, #0
    2ea2:	d1d2      	bne.n	2e4a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    2ea4:	2301      	movs	r3, #1
}
    2ea6:	0018      	movs	r0, r3
    2ea8:	46bd      	mov	sp, r7
    2eaa:	b005      	add	sp, #20
    2eac:	bd90      	pop	{r4, r7, pc}
    2eae:	46c0      	nop			; (mov r8, r8)
    2eb0:	2000012f 	.word	0x2000012f
    2eb4:	00002705 	.word	0x00002705
    2eb8:	20000138 	.word	0x20000138
    2ebc:	200000ec 	.word	0x200000ec
    2ec0:	00004741 	.word	0x00004741
    2ec4:	20000134 	.word	0x20000134
    2ec8:	00002789 	.word	0x00002789

00002ecc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    2ecc:	b580      	push	{r7, lr}
    2ece:	af00      	add	r7, sp, #0
	return true;
    2ed0:	2301      	movs	r3, #1
}
    2ed2:	0018      	movs	r0, r3
    2ed4:	46bd      	mov	sp, r7
    2ed6:	bd80      	pop	{r7, pc}

00002ed8 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    2ed8:	b580      	push	{r7, lr}
    2eda:	b084      	sub	sp, #16
    2edc:	af00      	add	r7, sp, #0
    2ede:	6078      	str	r0, [r7, #4]
    2ee0:	000a      	movs	r2, r1
    2ee2:	1cbb      	adds	r3, r7, #2
    2ee4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2ee6:	4b24      	ldr	r3, [pc, #144]	; (2f78 <sd_mmc_spi_start_write_blocks+0xa0>)
    2ee8:	2200      	movs	r2, #0
    2eea:	701a      	strb	r2, [r3, #0]
	pos = 0;
    2eec:	2300      	movs	r3, #0
    2eee:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    2ef0:	e035      	b.n	2f5e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    2ef2:	4b22      	ldr	r3, [pc, #136]	; (2f7c <sd_mmc_spi_start_write_blocks+0xa4>)
    2ef4:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    2ef6:	687a      	ldr	r2, [r7, #4]
    2ef8:	68fb      	ldr	r3, [r7, #12]
    2efa:	18d1      	adds	r1, r2, r3
    2efc:	4b20      	ldr	r3, [pc, #128]	; (2f80 <sd_mmc_spi_start_write_blocks+0xa8>)
    2efe:	881a      	ldrh	r2, [r3, #0]
    2f00:	4b20      	ldr	r3, [pc, #128]	; (2f84 <sd_mmc_spi_start_write_blocks+0xac>)
    2f02:	0018      	movs	r0, r3
    2f04:	4b20      	ldr	r3, [pc, #128]	; (2f88 <sd_mmc_spi_start_write_blocks+0xb0>)
    2f06:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    2f08:	4b1d      	ldr	r3, [pc, #116]	; (2f80 <sd_mmc_spi_start_write_blocks+0xa8>)
    2f0a:	881b      	ldrh	r3, [r3, #0]
    2f0c:	001a      	movs	r2, r3
    2f0e:	68fb      	ldr	r3, [r7, #12]
    2f10:	189b      	adds	r3, r3, r2
    2f12:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    2f14:	4b1a      	ldr	r3, [pc, #104]	; (2f80 <sd_mmc_spi_start_write_blocks+0xa8>)
    2f16:	881b      	ldrh	r3, [r3, #0]
    2f18:	001a      	movs	r2, r3
    2f1a:	4b1c      	ldr	r3, [pc, #112]	; (2f8c <sd_mmc_spi_start_write_blocks+0xb4>)
    2f1c:	681b      	ldr	r3, [r3, #0]
    2f1e:	18d2      	adds	r2, r2, r3
    2f20:	4b1a      	ldr	r3, [pc, #104]	; (2f8c <sd_mmc_spi_start_write_blocks+0xb4>)
    2f22:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    2f24:	4b1a      	ldr	r3, [pc, #104]	; (2f90 <sd_mmc_spi_start_write_blocks+0xb8>)
    2f26:	4798      	blx	r3
    2f28:	0003      	movs	r3, r0
    2f2a:	001a      	movs	r2, r3
    2f2c:	2301      	movs	r3, #1
    2f2e:	4053      	eors	r3, r2
    2f30:	b2db      	uxtb	r3, r3
    2f32:	2b00      	cmp	r3, #0
    2f34:	d001      	beq.n	2f3a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    2f36:	2300      	movs	r3, #0
    2f38:	e019      	b.n	2f6e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    2f3a:	1cbb      	adds	r3, r7, #2
    2f3c:	881b      	ldrh	r3, [r3, #0]
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d00d      	beq.n	2f5e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    2f42:	4b14      	ldr	r3, [pc, #80]	; (2f94 <sd_mmc_spi_start_write_blocks+0xbc>)
    2f44:	4798      	blx	r3
    2f46:	0003      	movs	r3, r0
    2f48:	001a      	movs	r2, r3
    2f4a:	2301      	movs	r3, #1
    2f4c:	4053      	eors	r3, r2
    2f4e:	b2db      	uxtb	r3, r3
    2f50:	2b00      	cmp	r3, #0
    2f52:	d004      	beq.n	2f5e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2f54:	4b08      	ldr	r3, [pc, #32]	; (2f78 <sd_mmc_spi_start_write_blocks+0xa0>)
    2f56:	2205      	movs	r2, #5
    2f58:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    2f5a:	2300      	movs	r3, #0
    2f5c:	e007      	b.n	2f6e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    2f5e:	1cbb      	adds	r3, r7, #2
    2f60:	881b      	ldrh	r3, [r3, #0]
    2f62:	1cba      	adds	r2, r7, #2
    2f64:	1e59      	subs	r1, r3, #1
    2f66:	8011      	strh	r1, [r2, #0]
    2f68:	2b00      	cmp	r3, #0
    2f6a:	d1c2      	bne.n	2ef2 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    2f6c:	2301      	movs	r3, #1
}
    2f6e:	0018      	movs	r0, r3
    2f70:	46bd      	mov	sp, r7
    2f72:	b004      	add	sp, #16
    2f74:	bd80      	pop	{r7, pc}
    2f76:	46c0      	nop			; (mov r8, r8)
    2f78:	2000012f 	.word	0x2000012f
    2f7c:	000027b5 	.word	0x000027b5
    2f80:	20000138 	.word	0x20000138
    2f84:	200000ec 	.word	0x200000ec
    2f88:	00004965 	.word	0x00004965
    2f8c:	20000134 	.word	0x20000134
    2f90:	00002805 	.word	0x00002805
    2f94:	00002699 	.word	0x00002699

00002f98 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    2f98:	b580      	push	{r7, lr}
    2f9a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    2f9c:	4b09      	ldr	r3, [pc, #36]	; (2fc4 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    2f9e:	4798      	blx	r3
    2fa0:	0003      	movs	r3, r0
    2fa2:	001a      	movs	r2, r3
    2fa4:	2301      	movs	r3, #1
    2fa6:	4053      	eors	r3, r2
    2fa8:	b2db      	uxtb	r3, r3
    2faa:	2b00      	cmp	r3, #0
    2fac:	d004      	beq.n	2fb8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2fae:	4b06      	ldr	r3, [pc, #24]	; (2fc8 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    2fb0:	2205      	movs	r2, #5
    2fb2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    2fb4:	2300      	movs	r3, #0
    2fb6:	e002      	b.n	2fbe <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    2fb8:	4b04      	ldr	r3, [pc, #16]	; (2fcc <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    2fba:	4798      	blx	r3
    2fbc:	0003      	movs	r3, r0
}
    2fbe:	0018      	movs	r0, r3
    2fc0:	46bd      	mov	sp, r7
    2fc2:	bd80      	pop	{r7, pc}
    2fc4:	00002699 	.word	0x00002699
    2fc8:	2000012f 	.word	0x2000012f
    2fcc:	00002899 	.word	0x00002899

00002fd0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    2fd0:	b580      	push	{r7, lr}
    2fd2:	b084      	sub	sp, #16
    2fd4:	af00      	add	r7, sp, #0
    2fd6:	0002      	movs	r2, r0
    2fd8:	1dfb      	adds	r3, r7, #7
    2fda:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    2fdc:	1dfb      	adds	r3, r7, #7
    2fde:	781b      	ldrb	r3, [r3, #0]
    2fe0:	2b00      	cmp	r3, #0
    2fe2:	d108      	bne.n	2ff6 <mem_test_unit_ready+0x26>
    2fe4:	1dfb      	adds	r3, r7, #7
    2fe6:	781a      	ldrb	r2, [r3, #0]
    2fe8:	4b08      	ldr	r3, [pc, #32]	; (300c <mem_test_unit_ready+0x3c>)
    2fea:	0152      	lsls	r2, r2, #5
    2fec:	58d3      	ldr	r3, [r2, r3]
    2fee:	4798      	blx	r3
    2ff0:	0003      	movs	r3, r0
    2ff2:	001a      	movs	r2, r3
    2ff4:	e000      	b.n	2ff8 <mem_test_unit_ready+0x28>
    2ff6:	2201      	movs	r2, #1
  status =
    2ff8:	230f      	movs	r3, #15
    2ffa:	18fb      	adds	r3, r7, r3
    2ffc:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    2ffe:	230f      	movs	r3, #15
    3000:	18fb      	adds	r3, r7, r3
    3002:	781b      	ldrb	r3, [r3, #0]
}
    3004:	0018      	movs	r0, r3
    3006:	46bd      	mov	sp, r7
    3008:	b004      	add	sp, #16
    300a:	bd80      	pop	{r7, pc}
    300c:	0000bf10 	.word	0x0000bf10

00003010 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    3010:	b580      	push	{r7, lr}
    3012:	b084      	sub	sp, #16
    3014:	af00      	add	r7, sp, #0
    3016:	0002      	movs	r2, r0
    3018:	6039      	str	r1, [r7, #0]
    301a:	1dfb      	adds	r3, r7, #7
    301c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    301e:	1dfb      	adds	r3, r7, #7
    3020:	781b      	ldrb	r3, [r3, #0]
    3022:	2b00      	cmp	r3, #0
    3024:	d10c      	bne.n	3040 <mem_read_capacity+0x30>
    3026:	1dfb      	adds	r3, r7, #7
    3028:	781b      	ldrb	r3, [r3, #0]
    302a:	4a0b      	ldr	r2, [pc, #44]	; (3058 <mem_read_capacity+0x48>)
    302c:	015b      	lsls	r3, r3, #5
    302e:	18d3      	adds	r3, r2, r3
    3030:	3304      	adds	r3, #4
    3032:	681b      	ldr	r3, [r3, #0]
    3034:	683a      	ldr	r2, [r7, #0]
    3036:	0010      	movs	r0, r2
    3038:	4798      	blx	r3
    303a:	0003      	movs	r3, r0
    303c:	001a      	movs	r2, r3
    303e:	e000      	b.n	3042 <mem_read_capacity+0x32>
    3040:	2201      	movs	r2, #1
  status =
    3042:	230f      	movs	r3, #15
    3044:	18fb      	adds	r3, r7, r3
    3046:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    3048:	230f      	movs	r3, #15
    304a:	18fb      	adds	r3, r7, r3
    304c:	781b      	ldrb	r3, [r3, #0]
}
    304e:	0018      	movs	r0, r3
    3050:	46bd      	mov	sp, r7
    3052:	b004      	add	sp, #16
    3054:	bd80      	pop	{r7, pc}
    3056:	46c0      	nop			; (mov r8, r8)
    3058:	0000bf10 	.word	0x0000bf10

0000305c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    305c:	b580      	push	{r7, lr}
    305e:	b084      	sub	sp, #16
    3060:	af00      	add	r7, sp, #0
    3062:	0002      	movs	r2, r0
    3064:	1dfb      	adds	r3, r7, #7
    3066:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    3068:	1dfb      	adds	r3, r7, #7
    306a:	781b      	ldrb	r3, [r3, #0]
    306c:	425a      	negs	r2, r3
    306e:	4153      	adcs	r3, r2
    3070:	b2da      	uxtb	r2, r3
  sector_size =
    3072:	230f      	movs	r3, #15
    3074:	18fb      	adds	r3, r7, r3
    3076:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    3078:	230f      	movs	r3, #15
    307a:	18fb      	adds	r3, r7, r3
    307c:	781b      	ldrb	r3, [r3, #0]
}
    307e:	0018      	movs	r0, r3
    3080:	46bd      	mov	sp, r7
    3082:	b004      	add	sp, #16
    3084:	bd80      	pop	{r7, pc}
	...

00003088 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    3088:	b580      	push	{r7, lr}
    308a:	b084      	sub	sp, #16
    308c:	af00      	add	r7, sp, #0
    308e:	0002      	movs	r2, r0
    3090:	1dfb      	adds	r3, r7, #7
    3092:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    3094:	1dfb      	adds	r3, r7, #7
    3096:	781b      	ldrb	r3, [r3, #0]
    3098:	2b00      	cmp	r3, #0
    309a:	d109      	bne.n	30b0 <mem_wr_protect+0x28>
    309c:	1dfb      	adds	r3, r7, #7
    309e:	781b      	ldrb	r3, [r3, #0]
    30a0:	4a0a      	ldr	r2, [pc, #40]	; (30cc <mem_wr_protect+0x44>)
    30a2:	015b      	lsls	r3, r3, #5
    30a4:	18d3      	adds	r3, r2, r3
    30a6:	330c      	adds	r3, #12
    30a8:	681b      	ldr	r3, [r3, #0]
    30aa:	4798      	blx	r3
    30ac:	1e03      	subs	r3, r0, #0
    30ae:	d001      	beq.n	30b4 <mem_wr_protect+0x2c>
    30b0:	2201      	movs	r2, #1
    30b2:	e000      	b.n	30b6 <mem_wr_protect+0x2e>
    30b4:	2200      	movs	r2, #0
  wr_protect =
    30b6:	230f      	movs	r3, #15
    30b8:	18fb      	adds	r3, r7, r3
    30ba:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    30bc:	230f      	movs	r3, #15
    30be:	18fb      	adds	r3, r7, r3
    30c0:	781b      	ldrb	r3, [r3, #0]
}
    30c2:	0018      	movs	r0, r3
    30c4:	46bd      	mov	sp, r7
    30c6:	b004      	add	sp, #16
    30c8:	bd80      	pop	{r7, pc}
    30ca:	46c0      	nop			; (mov r8, r8)
    30cc:	0000bf10 	.word	0x0000bf10

000030d0 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    30d0:	b580      	push	{r7, lr}
    30d2:	b086      	sub	sp, #24
    30d4:	af00      	add	r7, sp, #0
    30d6:	60b9      	str	r1, [r7, #8]
    30d8:	607a      	str	r2, [r7, #4]
    30da:	230f      	movs	r3, #15
    30dc:	18fb      	adds	r3, r7, r3
    30de:	1c02      	adds	r2, r0, #0
    30e0:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    30e2:	230f      	movs	r3, #15
    30e4:	18fb      	adds	r3, r7, r3
    30e6:	781b      	ldrb	r3, [r3, #0]
    30e8:	2b00      	cmp	r3, #0
    30ea:	d10e      	bne.n	310a <memory_2_ram+0x3a>
    30ec:	230f      	movs	r3, #15
    30ee:	18fb      	adds	r3, r7, r3
    30f0:	781b      	ldrb	r3, [r3, #0]
    30f2:	4a0b      	ldr	r2, [pc, #44]	; (3120 <memory_2_ram+0x50>)
    30f4:	015b      	lsls	r3, r3, #5
    30f6:	18d3      	adds	r3, r2, r3
    30f8:	3314      	adds	r3, #20
    30fa:	681b      	ldr	r3, [r3, #0]
    30fc:	6879      	ldr	r1, [r7, #4]
    30fe:	68ba      	ldr	r2, [r7, #8]
    3100:	0010      	movs	r0, r2
    3102:	4798      	blx	r3
    3104:	0003      	movs	r3, r0
    3106:	001a      	movs	r2, r3
    3108:	e000      	b.n	310c <memory_2_ram+0x3c>
    310a:	2201      	movs	r2, #1
  status =
    310c:	2317      	movs	r3, #23
    310e:	18fb      	adds	r3, r7, r3
    3110:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
    3112:	2317      	movs	r3, #23
    3114:	18fb      	adds	r3, r7, r3
    3116:	781b      	ldrb	r3, [r3, #0]
}
    3118:	0018      	movs	r0, r3
    311a:	46bd      	mov	sp, r7
    311c:	b006      	add	sp, #24
    311e:	bd80      	pop	{r7, pc}
    3120:	0000bf10 	.word	0x0000bf10

00003124 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    3124:	b580      	push	{r7, lr}
    3126:	b086      	sub	sp, #24
    3128:	af00      	add	r7, sp, #0
    312a:	60b9      	str	r1, [r7, #8]
    312c:	607a      	str	r2, [r7, #4]
    312e:	230f      	movs	r3, #15
    3130:	18fb      	adds	r3, r7, r3
    3132:	1c02      	adds	r2, r0, #0
    3134:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    3136:	230f      	movs	r3, #15
    3138:	18fb      	adds	r3, r7, r3
    313a:	781b      	ldrb	r3, [r3, #0]
    313c:	2b00      	cmp	r3, #0
    313e:	d10e      	bne.n	315e <ram_2_memory+0x3a>
    3140:	230f      	movs	r3, #15
    3142:	18fb      	adds	r3, r7, r3
    3144:	781b      	ldrb	r3, [r3, #0]
    3146:	4a0b      	ldr	r2, [pc, #44]	; (3174 <ram_2_memory+0x50>)
    3148:	015b      	lsls	r3, r3, #5
    314a:	18d3      	adds	r3, r2, r3
    314c:	3318      	adds	r3, #24
    314e:	681b      	ldr	r3, [r3, #0]
    3150:	6879      	ldr	r1, [r7, #4]
    3152:	68ba      	ldr	r2, [r7, #8]
    3154:	0010      	movs	r0, r2
    3156:	4798      	blx	r3
    3158:	0003      	movs	r3, r0
    315a:	001a      	movs	r2, r3
    315c:	e000      	b.n	3160 <ram_2_memory+0x3c>
    315e:	2201      	movs	r2, #1
  status =
    3160:	2317      	movs	r3, #23
    3162:	18fb      	adds	r3, r7, r3
    3164:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
    3166:	2317      	movs	r3, #23
    3168:	18fb      	adds	r3, r7, r3
    316a:	781b      	ldrb	r3, [r3, #0]
}
    316c:	0018      	movs	r0, r3
    316e:	46bd      	mov	sp, r7
    3170:	b006      	add	sp, #24
    3172:	bd80      	pop	{r7, pc}
    3174:	0000bf10 	.word	0x0000bf10

00003178 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3178:	b580      	push	{r7, lr}
    317a:	b082      	sub	sp, #8
    317c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    317e:	4b10      	ldr	r3, [pc, #64]	; (31c0 <cpu_irq_enter_critical+0x48>)
    3180:	681b      	ldr	r3, [r3, #0]
    3182:	2b00      	cmp	r3, #0
    3184:	d112      	bne.n	31ac <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3186:	f3ef 8310 	mrs	r3, PRIMASK
    318a:	607b      	str	r3, [r7, #4]
  return(result);
    318c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    318e:	2b00      	cmp	r3, #0
    3190:	d109      	bne.n	31a6 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    3192:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3194:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3198:	4b0a      	ldr	r3, [pc, #40]	; (31c4 <cpu_irq_enter_critical+0x4c>)
    319a:	2200      	movs	r2, #0
    319c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    319e:	4b0a      	ldr	r3, [pc, #40]	; (31c8 <cpu_irq_enter_critical+0x50>)
    31a0:	2201      	movs	r2, #1
    31a2:	701a      	strb	r2, [r3, #0]
    31a4:	e002      	b.n	31ac <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    31a6:	4b08      	ldr	r3, [pc, #32]	; (31c8 <cpu_irq_enter_critical+0x50>)
    31a8:	2200      	movs	r2, #0
    31aa:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    31ac:	4b04      	ldr	r3, [pc, #16]	; (31c0 <cpu_irq_enter_critical+0x48>)
    31ae:	681b      	ldr	r3, [r3, #0]
    31b0:	1c5a      	adds	r2, r3, #1
    31b2:	4b03      	ldr	r3, [pc, #12]	; (31c0 <cpu_irq_enter_critical+0x48>)
    31b4:	601a      	str	r2, [r3, #0]
}
    31b6:	46c0      	nop			; (mov r8, r8)
    31b8:	46bd      	mov	sp, r7
    31ba:	b002      	add	sp, #8
    31bc:	bd80      	pop	{r7, pc}
    31be:	46c0      	nop			; (mov r8, r8)
    31c0:	2000013c 	.word	0x2000013c
    31c4:	20000009 	.word	0x20000009
    31c8:	20000140 	.word	0x20000140

000031cc <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    31cc:	b580      	push	{r7, lr}
    31ce:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    31d0:	4b0b      	ldr	r3, [pc, #44]	; (3200 <cpu_irq_leave_critical+0x34>)
    31d2:	681b      	ldr	r3, [r3, #0]
    31d4:	1e5a      	subs	r2, r3, #1
    31d6:	4b0a      	ldr	r3, [pc, #40]	; (3200 <cpu_irq_leave_critical+0x34>)
    31d8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    31da:	4b09      	ldr	r3, [pc, #36]	; (3200 <cpu_irq_leave_critical+0x34>)
    31dc:	681b      	ldr	r3, [r3, #0]
    31de:	2b00      	cmp	r3, #0
    31e0:	d10a      	bne.n	31f8 <cpu_irq_leave_critical+0x2c>
    31e2:	4b08      	ldr	r3, [pc, #32]	; (3204 <cpu_irq_leave_critical+0x38>)
    31e4:	781b      	ldrb	r3, [r3, #0]
    31e6:	b2db      	uxtb	r3, r3
    31e8:	2b00      	cmp	r3, #0
    31ea:	d005      	beq.n	31f8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    31ec:	4b06      	ldr	r3, [pc, #24]	; (3208 <cpu_irq_leave_critical+0x3c>)
    31ee:	2201      	movs	r2, #1
    31f0:	701a      	strb	r2, [r3, #0]
    31f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    31f6:	b662      	cpsie	i
	}
}
    31f8:	46c0      	nop			; (mov r8, r8)
    31fa:	46bd      	mov	sp, r7
    31fc:	bd80      	pop	{r7, pc}
    31fe:	46c0      	nop			; (mov r8, r8)
    3200:	2000013c 	.word	0x2000013c
    3204:	20000140 	.word	0x20000140
    3208:	20000009 	.word	0x20000009

0000320c <system_pinmux_get_config_defaults>:
{
    320c:	b580      	push	{r7, lr}
    320e:	b082      	sub	sp, #8
    3210:	af00      	add	r7, sp, #0
    3212:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	2280      	movs	r2, #128	; 0x80
    3218:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    321a:	687b      	ldr	r3, [r7, #4]
    321c:	2200      	movs	r2, #0
    321e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3220:	687b      	ldr	r3, [r7, #4]
    3222:	2201      	movs	r2, #1
    3224:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3226:	687b      	ldr	r3, [r7, #4]
    3228:	2200      	movs	r2, #0
    322a:	70da      	strb	r2, [r3, #3]
}
    322c:	46c0      	nop			; (mov r8, r8)
    322e:	46bd      	mov	sp, r7
    3230:	b002      	add	sp, #8
    3232:	bd80      	pop	{r7, pc}

00003234 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3234:	b580      	push	{r7, lr}
    3236:	b084      	sub	sp, #16
    3238:	af00      	add	r7, sp, #0
    323a:	0002      	movs	r2, r0
    323c:	6039      	str	r1, [r7, #0]
    323e:	1dfb      	adds	r3, r7, #7
    3240:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    3242:	230c      	movs	r3, #12
    3244:	18fb      	adds	r3, r7, r3
    3246:	0018      	movs	r0, r3
    3248:	4b10      	ldr	r3, [pc, #64]	; (328c <port_pin_set_config+0x58>)
    324a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    324c:	230c      	movs	r3, #12
    324e:	18fb      	adds	r3, r7, r3
    3250:	2280      	movs	r2, #128	; 0x80
    3252:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3254:	683b      	ldr	r3, [r7, #0]
    3256:	781a      	ldrb	r2, [r3, #0]
    3258:	230c      	movs	r3, #12
    325a:	18fb      	adds	r3, r7, r3
    325c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    325e:	683b      	ldr	r3, [r7, #0]
    3260:	785a      	ldrb	r2, [r3, #1]
    3262:	230c      	movs	r3, #12
    3264:	18fb      	adds	r3, r7, r3
    3266:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3268:	683b      	ldr	r3, [r7, #0]
    326a:	789a      	ldrb	r2, [r3, #2]
    326c:	230c      	movs	r3, #12
    326e:	18fb      	adds	r3, r7, r3
    3270:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3272:	230c      	movs	r3, #12
    3274:	18fa      	adds	r2, r7, r3
    3276:	1dfb      	adds	r3, r7, #7
    3278:	781b      	ldrb	r3, [r3, #0]
    327a:	0011      	movs	r1, r2
    327c:	0018      	movs	r0, r3
    327e:	4b04      	ldr	r3, [pc, #16]	; (3290 <port_pin_set_config+0x5c>)
    3280:	4798      	blx	r3
}
    3282:	46c0      	nop			; (mov r8, r8)
    3284:	46bd      	mov	sp, r7
    3286:	b004      	add	sp, #16
    3288:	bd80      	pop	{r7, pc}
    328a:	46c0      	nop			; (mov r8, r8)
    328c:	0000320d 	.word	0x0000320d
    3290:	00006af1 	.word	0x00006af1

00003294 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3294:	b580      	push	{r7, lr}
    3296:	b082      	sub	sp, #8
    3298:	af00      	add	r7, sp, #0
    329a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    329c:	687b      	ldr	r3, [r7, #4]
    329e:	2200      	movs	r2, #0
    32a0:	701a      	strb	r2, [r3, #0]
}
    32a2:	46c0      	nop			; (mov r8, r8)
    32a4:	46bd      	mov	sp, r7
    32a6:	b002      	add	sp, #8
    32a8:	bd80      	pop	{r7, pc}
	...

000032ac <system_apb_clock_set_mask>:
{
    32ac:	b580      	push	{r7, lr}
    32ae:	b082      	sub	sp, #8
    32b0:	af00      	add	r7, sp, #0
    32b2:	0002      	movs	r2, r0
    32b4:	6039      	str	r1, [r7, #0]
    32b6:	1dfb      	adds	r3, r7, #7
    32b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    32ba:	1dfb      	adds	r3, r7, #7
    32bc:	781b      	ldrb	r3, [r3, #0]
    32be:	2b01      	cmp	r3, #1
    32c0:	d00a      	beq.n	32d8 <system_apb_clock_set_mask+0x2c>
    32c2:	2b02      	cmp	r3, #2
    32c4:	d00f      	beq.n	32e6 <system_apb_clock_set_mask+0x3a>
    32c6:	2b00      	cmp	r3, #0
    32c8:	d114      	bne.n	32f4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    32ca:	4b0e      	ldr	r3, [pc, #56]	; (3304 <system_apb_clock_set_mask+0x58>)
    32cc:	4a0d      	ldr	r2, [pc, #52]	; (3304 <system_apb_clock_set_mask+0x58>)
    32ce:	6991      	ldr	r1, [r2, #24]
    32d0:	683a      	ldr	r2, [r7, #0]
    32d2:	430a      	orrs	r2, r1
    32d4:	619a      	str	r2, [r3, #24]
			break;
    32d6:	e00f      	b.n	32f8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    32d8:	4b0a      	ldr	r3, [pc, #40]	; (3304 <system_apb_clock_set_mask+0x58>)
    32da:	4a0a      	ldr	r2, [pc, #40]	; (3304 <system_apb_clock_set_mask+0x58>)
    32dc:	69d1      	ldr	r1, [r2, #28]
    32de:	683a      	ldr	r2, [r7, #0]
    32e0:	430a      	orrs	r2, r1
    32e2:	61da      	str	r2, [r3, #28]
			break;
    32e4:	e008      	b.n	32f8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    32e6:	4b07      	ldr	r3, [pc, #28]	; (3304 <system_apb_clock_set_mask+0x58>)
    32e8:	4a06      	ldr	r2, [pc, #24]	; (3304 <system_apb_clock_set_mask+0x58>)
    32ea:	6a11      	ldr	r1, [r2, #32]
    32ec:	683a      	ldr	r2, [r7, #0]
    32ee:	430a      	orrs	r2, r1
    32f0:	621a      	str	r2, [r3, #32]
			break;
    32f2:	e001      	b.n	32f8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    32f4:	2317      	movs	r3, #23
    32f6:	e000      	b.n	32fa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    32f8:	2300      	movs	r3, #0
}
    32fa:	0018      	movs	r0, r3
    32fc:	46bd      	mov	sp, r7
    32fe:	b002      	add	sp, #8
    3300:	bd80      	pop	{r7, pc}
    3302:	46c0      	nop			; (mov r8, r8)
    3304:	40000400 	.word	0x40000400

00003308 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    3308:	b580      	push	{r7, lr}
    330a:	b084      	sub	sp, #16
    330c:	af00      	add	r7, sp, #0
    330e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3310:	687b      	ldr	r3, [r7, #4]
    3312:	681b      	ldr	r3, [r3, #0]
    3314:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    3316:	68fb      	ldr	r3, [r7, #12]
    3318:	7a9b      	ldrb	r3, [r3, #10]
    331a:	b2db      	uxtb	r3, r3
    331c:	b25b      	sxtb	r3, r3
    331e:	2b00      	cmp	r3, #0
    3320:	da01      	bge.n	3326 <rtc_calendar_is_syncing+0x1e>
                return true;
    3322:	2301      	movs	r3, #1
    3324:	e000      	b.n	3328 <rtc_calendar_is_syncing+0x20>
        }

        return false;
    3326:	2300      	movs	r3, #0
}
    3328:	0018      	movs	r0, r3
    332a:	46bd      	mov	sp, r7
    332c:	b004      	add	sp, #16
    332e:	bd80      	pop	{r7, pc}

00003330 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    3330:	b580      	push	{r7, lr}
    3332:	b084      	sub	sp, #16
    3334:	af00      	add	r7, sp, #0
    3336:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3338:	687b      	ldr	r3, [r7, #4]
    333a:	681b      	ldr	r3, [r3, #0]
    333c:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    333e:	46c0      	nop			; (mov r8, r8)
    3340:	687b      	ldr	r3, [r7, #4]
    3342:	0018      	movs	r0, r3
    3344:	4b07      	ldr	r3, [pc, #28]	; (3364 <rtc_calendar_enable+0x34>)
    3346:	4798      	blx	r3
    3348:	1e03      	subs	r3, r0, #0
    334a:	d1f9      	bne.n	3340 <rtc_calendar_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    334c:	68fb      	ldr	r3, [r7, #12]
    334e:	881b      	ldrh	r3, [r3, #0]
    3350:	b29b      	uxth	r3, r3
    3352:	2202      	movs	r2, #2
    3354:	4313      	orrs	r3, r2
    3356:	b29a      	uxth	r2, r3
    3358:	68fb      	ldr	r3, [r7, #12]
    335a:	801a      	strh	r2, [r3, #0]
}
    335c:	46c0      	nop			; (mov r8, r8)
    335e:	46bd      	mov	sp, r7
    3360:	b004      	add	sp, #16
    3362:	bd80      	pop	{r7, pc}
    3364:	00003309 	.word	0x00003309

00003368 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    3368:	b580      	push	{r7, lr}
    336a:	b084      	sub	sp, #16
    336c:	af00      	add	r7, sp, #0
    336e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3370:	687b      	ldr	r3, [r7, #4]
    3372:	681b      	ldr	r3, [r3, #0]
    3374:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    3376:	46c0      	nop			; (mov r8, r8)
    3378:	687b      	ldr	r3, [r7, #4]
    337a:	0018      	movs	r0, r3
    337c:	4b0a      	ldr	r3, [pc, #40]	; (33a8 <rtc_calendar_disable+0x40>)
    337e:	4798      	blx	r3
    3380:	1e03      	subs	r3, r0, #0
    3382:	d1f9      	bne.n	3378 <rtc_calendar_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    3384:	68fb      	ldr	r3, [r7, #12]
    3386:	22c1      	movs	r2, #193	; 0xc1
    3388:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    338a:	68fb      	ldr	r3, [r7, #12]
    338c:	22c1      	movs	r2, #193	; 0xc1
    338e:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    3390:	68fb      	ldr	r3, [r7, #12]
    3392:	881b      	ldrh	r3, [r3, #0]
    3394:	b29b      	uxth	r3, r3
    3396:	2202      	movs	r2, #2
    3398:	4393      	bics	r3, r2
    339a:	b29a      	uxth	r2, r3
    339c:	68fb      	ldr	r3, [r7, #12]
    339e:	801a      	strh	r2, [r3, #0]
}
    33a0:	46c0      	nop			; (mov r8, r8)
    33a2:	46bd      	mov	sp, r7
    33a4:	b004      	add	sp, #16
    33a6:	bd80      	pop	{r7, pc}
    33a8:	00003309 	.word	0x00003309

000033ac <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    33ac:	b580      	push	{r7, lr}
    33ae:	b084      	sub	sp, #16
    33b0:	af00      	add	r7, sp, #0
    33b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    33b4:	687b      	ldr	r3, [r7, #4]
    33b6:	681b      	ldr	r3, [r3, #0]
    33b8:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    33ba:	687b      	ldr	r3, [r7, #4]
    33bc:	0018      	movs	r0, r3
    33be:	4b0a      	ldr	r3, [pc, #40]	; (33e8 <rtc_calendar_reset+0x3c>)
    33c0:	4798      	blx	r3
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    33c2:	46c0      	nop			; (mov r8, r8)
    33c4:	687b      	ldr	r3, [r7, #4]
    33c6:	0018      	movs	r0, r3
    33c8:	4b08      	ldr	r3, [pc, #32]	; (33ec <rtc_calendar_reset+0x40>)
    33ca:	4798      	blx	r3
    33cc:	1e03      	subs	r3, r0, #0
    33ce:	d1f9      	bne.n	33c4 <rtc_calendar_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    33d0:	68fb      	ldr	r3, [r7, #12]
    33d2:	881b      	ldrh	r3, [r3, #0]
    33d4:	b29b      	uxth	r3, r3
    33d6:	2201      	movs	r2, #1
    33d8:	4313      	orrs	r3, r2
    33da:	b29a      	uxth	r2, r3
    33dc:	68fb      	ldr	r3, [r7, #12]
    33de:	801a      	strh	r2, [r3, #0]
}
    33e0:	46c0      	nop			; (mov r8, r8)
    33e2:	46bd      	mov	sp, r7
    33e4:	b004      	add	sp, #16
    33e6:	bd80      	pop	{r7, pc}
    33e8:	00003369 	.word	0x00003369
    33ec:	00003309 	.word	0x00003309

000033f0 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    33f0:	b580      	push	{r7, lr}
    33f2:	b084      	sub	sp, #16
    33f4:	af00      	add	r7, sp, #0
    33f6:	6078      	str	r0, [r7, #4]
    33f8:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    33fa:	683b      	ldr	r3, [r7, #0]
    33fc:	88db      	ldrh	r3, [r3, #6]
    33fe:	001a      	movs	r2, r3
    3400:	687b      	ldr	r3, [r7, #4]
    3402:	88db      	ldrh	r3, [r3, #6]
    3404:	1ad3      	subs	r3, r2, r3
    3406:	069b      	lsls	r3, r3, #26
    3408:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    340a:	683b      	ldr	r3, [r7, #0]
    340c:	795b      	ldrb	r3, [r3, #5]
    340e:	059b      	lsls	r3, r3, #22
    3410:	001a      	movs	r2, r3
    3412:	68fb      	ldr	r3, [r7, #12]
    3414:	4313      	orrs	r3, r2
    3416:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    3418:	683b      	ldr	r3, [r7, #0]
    341a:	791b      	ldrb	r3, [r3, #4]
    341c:	045b      	lsls	r3, r3, #17
    341e:	001a      	movs	r2, r3
    3420:	68fb      	ldr	r3, [r7, #12]
    3422:	4313      	orrs	r3, r2
    3424:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    3426:	683b      	ldr	r3, [r7, #0]
    3428:	789b      	ldrb	r3, [r3, #2]
    342a:	031b      	lsls	r3, r3, #12
    342c:	001a      	movs	r2, r3
    342e:	68fb      	ldr	r3, [r7, #12]
    3430:	4313      	orrs	r3, r2
    3432:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    3434:	687b      	ldr	r3, [r7, #4]
    3436:	791b      	ldrb	r3, [r3, #4]
    3438:	2201      	movs	r2, #1
    343a:	4053      	eors	r3, r2
    343c:	b2db      	uxtb	r3, r3
    343e:	2b00      	cmp	r3, #0
    3440:	d008      	beq.n	3454 <rtc_calendar_time_to_register_value+0x64>
    3442:	683b      	ldr	r3, [r7, #0]
    3444:	78db      	ldrb	r3, [r3, #3]
    3446:	2b00      	cmp	r3, #0
    3448:	d004      	beq.n	3454 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    344a:	68fb      	ldr	r3, [r7, #12]
    344c:	2280      	movs	r2, #128	; 0x80
    344e:	0252      	lsls	r2, r2, #9
    3450:	4313      	orrs	r3, r2
    3452:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    3454:	683b      	ldr	r3, [r7, #0]
    3456:	785b      	ldrb	r3, [r3, #1]
    3458:	019b      	lsls	r3, r3, #6
    345a:	001a      	movs	r2, r3
    345c:	68fb      	ldr	r3, [r7, #12]
    345e:	4313      	orrs	r3, r2
    3460:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    3462:	683b      	ldr	r3, [r7, #0]
    3464:	781b      	ldrb	r3, [r3, #0]
    3466:	001a      	movs	r2, r3
    3468:	68fb      	ldr	r3, [r7, #12]
    346a:	4313      	orrs	r3, r2
    346c:	60fb      	str	r3, [r7, #12]

	return register_value;
    346e:	68fb      	ldr	r3, [r7, #12]
}
    3470:	0018      	movs	r0, r3
    3472:	46bd      	mov	sp, r7
    3474:	b004      	add	sp, #16
    3476:	bd80      	pop	{r7, pc}

00003478 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    3478:	b580      	push	{r7, lr}
    347a:	b084      	sub	sp, #16
    347c:	af00      	add	r7, sp, #0
    347e:	60f8      	str	r0, [r7, #12]
    3480:	60b9      	str	r1, [r7, #8]
    3482:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    3484:	68bb      	ldr	r3, [r7, #8]
    3486:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    3488:	b29a      	uxth	r2, r3
    348a:	68fb      	ldr	r3, [r7, #12]
    348c:	88db      	ldrh	r3, [r3, #6]
    348e:	18d3      	adds	r3, r2, r3
    3490:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    3492:	687b      	ldr	r3, [r7, #4]
    3494:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    3496:	68bb      	ldr	r3, [r7, #8]
    3498:	0d9b      	lsrs	r3, r3, #22
    349a:	b2db      	uxtb	r3, r3
    349c:	220f      	movs	r2, #15
    349e:	4013      	ands	r3, r2
    34a0:	b2da      	uxtb	r2, r3
    34a2:	687b      	ldr	r3, [r7, #4]
    34a4:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    34a6:	68bb      	ldr	r3, [r7, #8]
    34a8:	0c5b      	lsrs	r3, r3, #17
    34aa:	b2db      	uxtb	r3, r3
    34ac:	221f      	movs	r2, #31
    34ae:	4013      	ands	r3, r2
    34b0:	b2da      	uxtb	r2, r3
    34b2:	687b      	ldr	r3, [r7, #4]
    34b4:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    34b6:	68fb      	ldr	r3, [r7, #12]
    34b8:	791b      	ldrb	r3, [r3, #4]
    34ba:	2b00      	cmp	r3, #0
    34bc:	d008      	beq.n	34d0 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    34be:	68bb      	ldr	r3, [r7, #8]
    34c0:	0b1b      	lsrs	r3, r3, #12
    34c2:	b2db      	uxtb	r3, r3
    34c4:	221f      	movs	r2, #31
    34c6:	4013      	ands	r3, r2
    34c8:	b2da      	uxtb	r2, r3
    34ca:	687b      	ldr	r3, [r7, #4]
    34cc:	709a      	strb	r2, [r3, #2]
    34ce:	e010      	b.n	34f2 <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    34d0:	68bb      	ldr	r3, [r7, #8]
    34d2:	0b1b      	lsrs	r3, r3, #12
    34d4:	b2db      	uxtb	r3, r3
    34d6:	220f      	movs	r2, #15
    34d8:	4013      	ands	r3, r2
    34da:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
    34dc:	687b      	ldr	r3, [r7, #4]
    34de:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    34e0:	68ba      	ldr	r2, [r7, #8]
    34e2:	2380      	movs	r3, #128	; 0x80
    34e4:	025b      	lsls	r3, r3, #9
    34e6:	4013      	ands	r3, r2
    34e8:	1e5a      	subs	r2, r3, #1
    34ea:	4193      	sbcs	r3, r2
    34ec:	b2da      	uxtb	r2, r3
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    34f2:	68bb      	ldr	r3, [r7, #8]
    34f4:	099b      	lsrs	r3, r3, #6
    34f6:	b2db      	uxtb	r3, r3
    34f8:	223f      	movs	r2, #63	; 0x3f
    34fa:	4013      	ands	r3, r2
    34fc:	b2da      	uxtb	r2, r3
    34fe:	687b      	ldr	r3, [r7, #4]
    3500:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    3502:	68bb      	ldr	r3, [r7, #8]
    3504:	b2db      	uxtb	r3, r3
    3506:	223f      	movs	r2, #63	; 0x3f
    3508:	4013      	ands	r3, r2
    350a:	b2da      	uxtb	r2, r3
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    3510:	46c0      	nop			; (mov r8, r8)
    3512:	46bd      	mov	sp, r7
    3514:	b004      	add	sp, #16
    3516:	bd80      	pop	{r7, pc}

00003518 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    3518:	b580      	push	{r7, lr}
    351a:	b084      	sub	sp, #16
    351c:	af00      	add	r7, sp, #0
    351e:	6078      	str	r0, [r7, #4]
    3520:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3522:	687b      	ldr	r3, [r7, #4]
    3524:	681b      	ldr	r3, [r3, #0]
    3526:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    3528:	683b      	ldr	r3, [r7, #0]
    352a:	881a      	ldrh	r2, [r3, #0]
    352c:	230e      	movs	r3, #14
    352e:	18fb      	adds	r3, r7, r3
    3530:	2108      	movs	r1, #8
    3532:	430a      	orrs	r2, r1
    3534:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    3536:	683b      	ldr	r3, [r7, #0]
    3538:	791b      	ldrb	r3, [r3, #4]
    353a:	2201      	movs	r2, #1
    353c:	4053      	eors	r3, r2
    353e:	b2db      	uxtb	r3, r3
    3540:	2b00      	cmp	r3, #0
    3542:	d007      	beq.n	3554 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    3544:	230e      	movs	r3, #14
    3546:	18fb      	adds	r3, r7, r3
    3548:	220e      	movs	r2, #14
    354a:	18ba      	adds	r2, r7, r2
    354c:	8812      	ldrh	r2, [r2, #0]
    354e:	2140      	movs	r1, #64	; 0x40
    3550:	430a      	orrs	r2, r1
    3552:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    3554:	683b      	ldr	r3, [r7, #0]
    3556:	789b      	ldrb	r3, [r3, #2]
    3558:	2b00      	cmp	r3, #0
    355a:	d007      	beq.n	356c <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    355c:	230e      	movs	r3, #14
    355e:	18fb      	adds	r3, r7, r3
    3560:	220e      	movs	r2, #14
    3562:	18ba      	adds	r2, r7, r2
    3564:	8812      	ldrh	r2, [r2, #0]
    3566:	2180      	movs	r1, #128	; 0x80
    3568:	430a      	orrs	r2, r1
    356a:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    356c:	68bb      	ldr	r3, [r7, #8]
    356e:	220e      	movs	r2, #14
    3570:	18ba      	adds	r2, r7, r2
    3572:	8812      	ldrh	r2, [r2, #0]
    3574:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    3576:	683b      	ldr	r3, [r7, #0]
    3578:	78db      	ldrb	r3, [r3, #3]
    357a:	2b00      	cmp	r3, #0
    357c:	d008      	beq.n	3590 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    357e:	68bb      	ldr	r3, [r7, #8]
    3580:	885b      	ldrh	r3, [r3, #2]
    3582:	b29b      	uxth	r3, r3
    3584:	2280      	movs	r2, #128	; 0x80
    3586:	01d2      	lsls	r2, r2, #7
    3588:	4313      	orrs	r3, r2
    358a:	b29a      	uxth	r2, r3
    358c:	68bb      	ldr	r3, [r7, #8]
    358e:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    3590:	230d      	movs	r3, #13
    3592:	18fb      	adds	r3, r7, r3
    3594:	2200      	movs	r2, #0
    3596:	701a      	strb	r2, [r3, #0]
    3598:	e017      	b.n	35ca <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    359a:	230d      	movs	r3, #13
    359c:	18fb      	adds	r3, r7, r3
    359e:	781a      	ldrb	r2, [r3, #0]
    35a0:	0013      	movs	r3, r2
    35a2:	009b      	lsls	r3, r3, #2
    35a4:	189b      	adds	r3, r3, r2
    35a6:	005b      	lsls	r3, r3, #1
    35a8:	3308      	adds	r3, #8
    35aa:	683a      	ldr	r2, [r7, #0]
    35ac:	18d1      	adds	r1, r2, r3
    35ae:	230d      	movs	r3, #13
    35b0:	18fb      	adds	r3, r7, r3
    35b2:	781a      	ldrb	r2, [r3, #0]
    35b4:	687b      	ldr	r3, [r7, #4]
    35b6:	0018      	movs	r0, r3
    35b8:	4b08      	ldr	r3, [pc, #32]	; (35dc <_rtc_calendar_set_config+0xc4>)
    35ba:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    35bc:	230d      	movs	r3, #13
    35be:	18fb      	adds	r3, r7, r3
    35c0:	781a      	ldrb	r2, [r3, #0]
    35c2:	230d      	movs	r3, #13
    35c4:	18fb      	adds	r3, r7, r3
    35c6:	3201      	adds	r2, #1
    35c8:	701a      	strb	r2, [r3, #0]
    35ca:	230d      	movs	r3, #13
    35cc:	18fb      	adds	r3, r7, r3
    35ce:	781b      	ldrb	r3, [r3, #0]
    35d0:	2b00      	cmp	r3, #0
    35d2:	d0e2      	beq.n	359a <_rtc_calendar_set_config+0x82>
	}
}
    35d4:	46c0      	nop			; (mov r8, r8)
    35d6:	46bd      	mov	sp, r7
    35d8:	b004      	add	sp, #16
    35da:	bd80      	pop	{r7, pc}
    35dc:	00003701 	.word	0x00003701

000035e0 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    35e0:	b580      	push	{r7, lr}
    35e2:	b086      	sub	sp, #24
    35e4:	af00      	add	r7, sp, #0
    35e6:	60f8      	str	r0, [r7, #12]
    35e8:	60b9      	str	r1, [r7, #8]
    35ea:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    35ec:	68fb      	ldr	r3, [r7, #12]
    35ee:	68ba      	ldr	r2, [r7, #8]
    35f0:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    35f2:	2120      	movs	r1, #32
    35f4:	2000      	movs	r0, #0
    35f6:	4b18      	ldr	r3, [pc, #96]	; (3658 <rtc_calendar_init+0x78>)
    35f8:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    35fa:	2314      	movs	r3, #20
    35fc:	18fb      	adds	r3, r7, r3
    35fe:	0018      	movs	r0, r3
    3600:	4b16      	ldr	r3, [pc, #88]	; (365c <rtc_calendar_init+0x7c>)
    3602:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    3604:	2314      	movs	r3, #20
    3606:	18fb      	adds	r3, r7, r3
    3608:	2202      	movs	r2, #2
    360a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    360c:	2314      	movs	r3, #20
    360e:	18fb      	adds	r3, r7, r3
    3610:	0019      	movs	r1, r3
    3612:	2004      	movs	r0, #4
    3614:	4b12      	ldr	r3, [pc, #72]	; (3660 <rtc_calendar_init+0x80>)
    3616:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    3618:	2004      	movs	r0, #4
    361a:	4b12      	ldr	r3, [pc, #72]	; (3664 <rtc_calendar_init+0x84>)
    361c:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    361e:	68fb      	ldr	r3, [r7, #12]
    3620:	0018      	movs	r0, r3
    3622:	4b11      	ldr	r3, [pc, #68]	; (3668 <rtc_calendar_init+0x88>)
    3624:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    3626:	687b      	ldr	r3, [r7, #4]
    3628:	791a      	ldrb	r2, [r3, #4]
    362a:	68fb      	ldr	r3, [r7, #12]
    362c:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    362e:	687b      	ldr	r3, [r7, #4]
    3630:	78da      	ldrb	r2, [r3, #3]
    3632:	68fb      	ldr	r3, [r7, #12]
    3634:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    3636:	687b      	ldr	r3, [r7, #4]
    3638:	88da      	ldrh	r2, [r3, #6]
    363a:	68fb      	ldr	r3, [r7, #12]
    363c:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    363e:	4b0b      	ldr	r3, [pc, #44]	; (366c <rtc_calendar_init+0x8c>)
    3640:	68fa      	ldr	r2, [r7, #12]
    3642:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    3644:	687a      	ldr	r2, [r7, #4]
    3646:	68fb      	ldr	r3, [r7, #12]
    3648:	0011      	movs	r1, r2
    364a:	0018      	movs	r0, r3
    364c:	4b08      	ldr	r3, [pc, #32]	; (3670 <rtc_calendar_init+0x90>)
    364e:	4798      	blx	r3
}
    3650:	46c0      	nop			; (mov r8, r8)
    3652:	46bd      	mov	sp, r7
    3654:	b006      	add	sp, #24
    3656:	bd80      	pop	{r7, pc}
    3658:	000032ad 	.word	0x000032ad
    365c:	00003295 	.word	0x00003295
    3660:	00006805 	.word	0x00006805
    3664:	00006849 	.word	0x00006849
    3668:	000033ad 	.word	0x000033ad
    366c:	200009d0 	.word	0x200009d0
    3670:	00003519 	.word	0x00003519

00003674 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    3674:	b580      	push	{r7, lr}
    3676:	b084      	sub	sp, #16
    3678:	af00      	add	r7, sp, #0
    367a:	6078      	str	r0, [r7, #4]
    367c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    367e:	687b      	ldr	r3, [r7, #4]
    3680:	681b      	ldr	r3, [r3, #0]
    3682:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    3684:	687b      	ldr	r3, [r7, #4]
    3686:	795b      	ldrb	r3, [r3, #5]
    3688:	2201      	movs	r2, #1
    368a:	4053      	eors	r3, r2
    368c:	b2db      	uxtb	r3, r3
    368e:	2b00      	cmp	r3, #0
    3690:	d00a      	beq.n	36a8 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    3692:	68fb      	ldr	r3, [r7, #12]
    3694:	4a16      	ldr	r2, [pc, #88]	; (36f0 <rtc_calendar_get_time+0x7c>)
    3696:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
    3698:	46c0      	nop			; (mov r8, r8)
    369a:	687b      	ldr	r3, [r7, #4]
    369c:	0018      	movs	r0, r3
    369e:	4b15      	ldr	r3, [pc, #84]	; (36f4 <rtc_calendar_get_time+0x80>)
    36a0:	4798      	blx	r3
    36a2:	1e03      	subs	r3, r0, #0
    36a4:	d1f9      	bne.n	369a <rtc_calendar_get_time+0x26>
    36a6:	e016      	b.n	36d6 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    36a8:	68fb      	ldr	r3, [r7, #12]
    36aa:	885b      	ldrh	r3, [r3, #2]
    36ac:	b29b      	uxth	r3, r3
    36ae:	001a      	movs	r2, r3
    36b0:	2380      	movs	r3, #128	; 0x80
    36b2:	01db      	lsls	r3, r3, #7
    36b4:	4013      	ands	r3, r2
    36b6:	d10e      	bne.n	36d6 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    36b8:	68fb      	ldr	r3, [r7, #12]
    36ba:	885b      	ldrh	r3, [r3, #2]
    36bc:	b29b      	uxth	r3, r3
    36be:	4a0e      	ldr	r2, [pc, #56]	; (36f8 <rtc_calendar_get_time+0x84>)
    36c0:	4313      	orrs	r3, r2
    36c2:	b29a      	uxth	r2, r3
    36c4:	68fb      	ldr	r3, [r7, #12]
    36c6:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
    36c8:	46c0      	nop			; (mov r8, r8)
    36ca:	687b      	ldr	r3, [r7, #4]
    36cc:	0018      	movs	r0, r3
    36ce:	4b09      	ldr	r3, [pc, #36]	; (36f4 <rtc_calendar_get_time+0x80>)
    36d0:	4798      	blx	r3
    36d2:	1e03      	subs	r3, r0, #0
    36d4:	d1f9      	bne.n	36ca <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    36d6:	68fb      	ldr	r3, [r7, #12]
    36d8:	691b      	ldr	r3, [r3, #16]
    36da:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    36dc:	683a      	ldr	r2, [r7, #0]
    36de:	68b9      	ldr	r1, [r7, #8]
    36e0:	687b      	ldr	r3, [r7, #4]
    36e2:	0018      	movs	r0, r3
    36e4:	4b05      	ldr	r3, [pc, #20]	; (36fc <rtc_calendar_get_time+0x88>)
    36e6:	4798      	blx	r3
}
    36e8:	46c0      	nop			; (mov r8, r8)
    36ea:	46bd      	mov	sp, r7
    36ec:	b004      	add	sp, #16
    36ee:	bd80      	pop	{r7, pc}
    36f0:	ffff8000 	.word	0xffff8000
    36f4:	00003309 	.word	0x00003309
    36f8:	ffffc000 	.word	0xffffc000
    36fc:	00003479 	.word	0x00003479

00003700 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    3700:	b580      	push	{r7, lr}
    3702:	b086      	sub	sp, #24
    3704:	af00      	add	r7, sp, #0
    3706:	60f8      	str	r0, [r7, #12]
    3708:	60b9      	str	r1, [r7, #8]
    370a:	1dfb      	adds	r3, r7, #7
    370c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    370e:	68fb      	ldr	r3, [r7, #12]
    3710:	681b      	ldr	r3, [r3, #0]
    3712:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    3714:	1dfb      	adds	r3, r7, #7
    3716:	781b      	ldrb	r3, [r3, #0]
    3718:	2b01      	cmp	r3, #1
    371a:	d901      	bls.n	3720 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
    371c:	2317      	movs	r3, #23
    371e:	e021      	b.n	3764 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    3720:	68ba      	ldr	r2, [r7, #8]
    3722:	68fb      	ldr	r3, [r7, #12]
    3724:	0011      	movs	r1, r2
    3726:	0018      	movs	r0, r3
    3728:	4b10      	ldr	r3, [pc, #64]	; (376c <rtc_calendar_set_alarm+0x6c>)
    372a:	4798      	blx	r3
    372c:	0003      	movs	r3, r0
    372e:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    3730:	46c0      	nop			; (mov r8, r8)
    3732:	68fb      	ldr	r3, [r7, #12]
    3734:	0018      	movs	r0, r3
    3736:	4b0e      	ldr	r3, [pc, #56]	; (3770 <rtc_calendar_set_alarm+0x70>)
    3738:	4798      	blx	r3
    373a:	1e03      	subs	r3, r0, #0
    373c:	d1f9      	bne.n	3732 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    373e:	1dfb      	adds	r3, r7, #7
    3740:	781a      	ldrb	r2, [r3, #0]
    3742:	697b      	ldr	r3, [r7, #20]
    3744:	3203      	adds	r2, #3
    3746:	00d2      	lsls	r2, r2, #3
    3748:	6939      	ldr	r1, [r7, #16]
    374a:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    374c:	1dfb      	adds	r3, r7, #7
    374e:	781b      	ldrb	r3, [r3, #0]
    3750:	68ba      	ldr	r2, [r7, #8]
    3752:	7a11      	ldrb	r1, [r2, #8]
    3754:	697a      	ldr	r2, [r7, #20]
    3756:	3303      	adds	r3, #3
    3758:	00db      	lsls	r3, r3, #3
    375a:	18d3      	adds	r3, r2, r3
    375c:	3304      	adds	r3, #4
    375e:	1c0a      	adds	r2, r1, #0
    3760:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    3762:	2300      	movs	r3, #0
}
    3764:	0018      	movs	r0, r3
    3766:	46bd      	mov	sp, r7
    3768:	b006      	add	sp, #24
    376a:	bd80      	pop	{r7, pc}
    376c:	000033f1 	.word	0x000033f1
    3770:	00003309 	.word	0x00003309

00003774 <system_gclk_chan_get_config_defaults>:
{
    3774:	b580      	push	{r7, lr}
    3776:	b082      	sub	sp, #8
    3778:	af00      	add	r7, sp, #0
    377a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    377c:	687b      	ldr	r3, [r7, #4]
    377e:	2200      	movs	r2, #0
    3780:	701a      	strb	r2, [r3, #0]
}
    3782:	46c0      	nop			; (mov r8, r8)
    3784:	46bd      	mov	sp, r7
    3786:	b002      	add	sp, #8
    3788:	bd80      	pop	{r7, pc}

0000378a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    378a:	b5f0      	push	{r4, r5, r6, r7, lr}
    378c:	b08d      	sub	sp, #52	; 0x34
    378e:	af00      	add	r7, sp, #0
    3790:	60b8      	str	r0, [r7, #8]
    3792:	60f9      	str	r1, [r7, #12]
    3794:	603a      	str	r2, [r7, #0]
    3796:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3798:	2300      	movs	r3, #0
    379a:	2400      	movs	r4, #0
    379c:	623b      	str	r3, [r7, #32]
    379e:	627c      	str	r4, [r7, #36]	; 0x24
    37a0:	2300      	movs	r3, #0
    37a2:	2400      	movs	r4, #0
    37a4:	61bb      	str	r3, [r7, #24]
    37a6:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    37a8:	233f      	movs	r3, #63	; 0x3f
    37aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    37ac:	e053      	b.n	3856 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    37ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37b0:	3b20      	subs	r3, #32
    37b2:	2b00      	cmp	r3, #0
    37b4:	db04      	blt.n	37c0 <long_division+0x36>
    37b6:	2201      	movs	r2, #1
    37b8:	409a      	lsls	r2, r3
    37ba:	0013      	movs	r3, r2
    37bc:	617b      	str	r3, [r7, #20]
    37be:	e00b      	b.n	37d8 <long_division+0x4e>
    37c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37c2:	2220      	movs	r2, #32
    37c4:	1ad3      	subs	r3, r2, r3
    37c6:	2201      	movs	r2, #1
    37c8:	40da      	lsrs	r2, r3
    37ca:	0013      	movs	r3, r2
    37cc:	2100      	movs	r1, #0
    37ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    37d0:	4091      	lsls	r1, r2
    37d2:	000a      	movs	r2, r1
    37d4:	4313      	orrs	r3, r2
    37d6:	617b      	str	r3, [r7, #20]
    37d8:	2201      	movs	r2, #1
    37da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37dc:	409a      	lsls	r2, r3
    37de:	0013      	movs	r3, r2
    37e0:	613b      	str	r3, [r7, #16]

		r = r << 1;
    37e2:	69bb      	ldr	r3, [r7, #24]
    37e4:	69fc      	ldr	r4, [r7, #28]
    37e6:	18db      	adds	r3, r3, r3
    37e8:	4164      	adcs	r4, r4
    37ea:	61bb      	str	r3, [r7, #24]
    37ec:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    37ee:	68bb      	ldr	r3, [r7, #8]
    37f0:	693a      	ldr	r2, [r7, #16]
    37f2:	401a      	ands	r2, r3
    37f4:	0015      	movs	r5, r2
    37f6:	68fb      	ldr	r3, [r7, #12]
    37f8:	697a      	ldr	r2, [r7, #20]
    37fa:	401a      	ands	r2, r3
    37fc:	0016      	movs	r6, r2
    37fe:	002b      	movs	r3, r5
    3800:	4333      	orrs	r3, r6
    3802:	d007      	beq.n	3814 <long_division+0x8a>
			r |= 0x01;
    3804:	69bb      	ldr	r3, [r7, #24]
    3806:	2201      	movs	r2, #1
    3808:	4313      	orrs	r3, r2
    380a:	61bb      	str	r3, [r7, #24]
    380c:	69fb      	ldr	r3, [r7, #28]
    380e:	2200      	movs	r2, #0
    3810:	4313      	orrs	r3, r2
    3812:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    3814:	687a      	ldr	r2, [r7, #4]
    3816:	69fb      	ldr	r3, [r7, #28]
    3818:	429a      	cmp	r2, r3
    381a:	d819      	bhi.n	3850 <long_division+0xc6>
    381c:	687a      	ldr	r2, [r7, #4]
    381e:	69fb      	ldr	r3, [r7, #28]
    3820:	429a      	cmp	r2, r3
    3822:	d103      	bne.n	382c <long_division+0xa2>
    3824:	683a      	ldr	r2, [r7, #0]
    3826:	69bb      	ldr	r3, [r7, #24]
    3828:	429a      	cmp	r2, r3
    382a:	d811      	bhi.n	3850 <long_division+0xc6>
			r = r - d;
    382c:	69b9      	ldr	r1, [r7, #24]
    382e:	69fa      	ldr	r2, [r7, #28]
    3830:	683b      	ldr	r3, [r7, #0]
    3832:	687c      	ldr	r4, [r7, #4]
    3834:	1ac9      	subs	r1, r1, r3
    3836:	41a2      	sbcs	r2, r4
    3838:	000b      	movs	r3, r1
    383a:	0014      	movs	r4, r2
    383c:	61bb      	str	r3, [r7, #24]
    383e:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    3840:	6a3a      	ldr	r2, [r7, #32]
    3842:	693b      	ldr	r3, [r7, #16]
    3844:	4313      	orrs	r3, r2
    3846:	623b      	str	r3, [r7, #32]
    3848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    384a:	697b      	ldr	r3, [r7, #20]
    384c:	4313      	orrs	r3, r2
    384e:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    3850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3852:	3b01      	subs	r3, #1
    3854:	62fb      	str	r3, [r7, #44]	; 0x2c
    3856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3858:	2b00      	cmp	r3, #0
    385a:	daa8      	bge.n	37ae <long_division+0x24>
		}
	}

	return q;
    385c:	6a3b      	ldr	r3, [r7, #32]
    385e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    3860:	0018      	movs	r0, r3
    3862:	0021      	movs	r1, r4
    3864:	46bd      	mov	sp, r7
    3866:	b00d      	add	sp, #52	; 0x34
    3868:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000386a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    386a:	b580      	push	{r7, lr}
    386c:	b086      	sub	sp, #24
    386e:	af00      	add	r7, sp, #0
    3870:	60f8      	str	r0, [r7, #12]
    3872:	60b9      	str	r1, [r7, #8]
    3874:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3876:	2316      	movs	r3, #22
    3878:	18fb      	adds	r3, r7, r3
    387a:	2200      	movs	r2, #0
    387c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    387e:	68bb      	ldr	r3, [r7, #8]
    3880:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3882:	68bb      	ldr	r3, [r7, #8]
    3884:	085a      	lsrs	r2, r3, #1
    3886:	68fb      	ldr	r3, [r7, #12]
    3888:	429a      	cmp	r2, r3
    388a:	d201      	bcs.n	3890 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    388c:	2340      	movs	r3, #64	; 0x40
    388e:	e026      	b.n	38de <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    3890:	68bb      	ldr	r3, [r7, #8]
    3892:	085b      	lsrs	r3, r3, #1
    3894:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3896:	e00a      	b.n	38ae <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3898:	693a      	ldr	r2, [r7, #16]
    389a:	68fb      	ldr	r3, [r7, #12]
    389c:	1ad3      	subs	r3, r2, r3
    389e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    38a0:	2316      	movs	r3, #22
    38a2:	18fb      	adds	r3, r7, r3
    38a4:	881a      	ldrh	r2, [r3, #0]
    38a6:	2316      	movs	r3, #22
    38a8:	18fb      	adds	r3, r7, r3
    38aa:	3201      	adds	r2, #1
    38ac:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    38ae:	693a      	ldr	r2, [r7, #16]
    38b0:	68fb      	ldr	r3, [r7, #12]
    38b2:	429a      	cmp	r2, r3
    38b4:	d2f0      	bcs.n	3898 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    38b6:	2316      	movs	r3, #22
    38b8:	18fb      	adds	r3, r7, r3
    38ba:	2216      	movs	r2, #22
    38bc:	18ba      	adds	r2, r7, r2
    38be:	8812      	ldrh	r2, [r2, #0]
    38c0:	3a01      	subs	r2, #1
    38c2:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    38c4:	2316      	movs	r3, #22
    38c6:	18fb      	adds	r3, r7, r3
    38c8:	881b      	ldrh	r3, [r3, #0]
    38ca:	2bff      	cmp	r3, #255	; 0xff
    38cc:	d901      	bls.n	38d2 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    38ce:	2340      	movs	r3, #64	; 0x40
    38d0:	e005      	b.n	38de <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    38d2:	687b      	ldr	r3, [r7, #4]
    38d4:	2216      	movs	r2, #22
    38d6:	18ba      	adds	r2, r7, r2
    38d8:	8812      	ldrh	r2, [r2, #0]
    38da:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    38dc:	2300      	movs	r3, #0
	}
}
    38de:	0018      	movs	r0, r3
    38e0:	46bd      	mov	sp, r7
    38e2:	b006      	add	sp, #24
    38e4:	bd80      	pop	{r7, pc}
	...

000038e8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    38e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ea:	b0a1      	sub	sp, #132	; 0x84
    38ec:	af00      	add	r7, sp, #0
    38ee:	64f8      	str	r0, [r7, #76]	; 0x4c
    38f0:	64b9      	str	r1, [r7, #72]	; 0x48
    38f2:	647a      	str	r2, [r7, #68]	; 0x44
    38f4:	2243      	movs	r2, #67	; 0x43
    38f6:	18ba      	adds	r2, r7, r2
    38f8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    38fa:	2300      	movs	r3, #0
    38fc:	2400      	movs	r4, #0
    38fe:	673b      	str	r3, [r7, #112]	; 0x70
    3900:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    3902:	2300      	movs	r3, #0
    3904:	2400      	movs	r4, #0
    3906:	66bb      	str	r3, [r7, #104]	; 0x68
    3908:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    390a:	2300      	movs	r3, #0
    390c:	2400      	movs	r4, #0
    390e:	67bb      	str	r3, [r7, #120]	; 0x78
    3910:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    3912:	2300      	movs	r3, #0
    3914:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3916:	2358      	movs	r3, #88	; 0x58
    3918:	2240      	movs	r2, #64	; 0x40
    391a:	4694      	mov	ip, r2
    391c:	44bc      	add	ip, r7
    391e:	4463      	add	r3, ip
    3920:	781a      	ldrb	r2, [r3, #0]
    3922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3924:	435a      	muls	r2, r3
    3926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3928:	429a      	cmp	r2, r3
    392a:	d901      	bls.n	3930 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    392c:	2340      	movs	r3, #64	; 0x40
    392e:	e0b3      	b.n	3a98 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3930:	2343      	movs	r3, #67	; 0x43
    3932:	18fb      	adds	r3, r7, r3
    3934:	781b      	ldrb	r3, [r3, #0]
    3936:	2b00      	cmp	r3, #0
    3938:	d13d      	bne.n	39b6 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    393a:	2358      	movs	r3, #88	; 0x58
    393c:	2240      	movs	r2, #64	; 0x40
    393e:	4694      	mov	ip, r2
    3940:	44bc      	add	ip, r7
    3942:	4463      	add	r3, ip
    3944:	781b      	ldrb	r3, [r3, #0]
    3946:	b2db      	uxtb	r3, r3
    3948:	613b      	str	r3, [r7, #16]
    394a:	2300      	movs	r3, #0
    394c:	617b      	str	r3, [r7, #20]
    394e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3950:	60bb      	str	r3, [r7, #8]
    3952:	2300      	movs	r3, #0
    3954:	60fb      	str	r3, [r7, #12]
    3956:	4c52      	ldr	r4, [pc, #328]	; (3aa0 <_sercom_get_async_baud_val+0x1b8>)
    3958:	68ba      	ldr	r2, [r7, #8]
    395a:	68fb      	ldr	r3, [r7, #12]
    395c:	6938      	ldr	r0, [r7, #16]
    395e:	6979      	ldr	r1, [r7, #20]
    3960:	47a0      	blx	r4
    3962:	0003      	movs	r3, r0
    3964:	000c      	movs	r4, r1
    3966:	001b      	movs	r3, r3
    3968:	65fb      	str	r3, [r7, #92]	; 0x5c
    396a:	2300      	movs	r3, #0
    396c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    396e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3970:	603b      	str	r3, [r7, #0]
    3972:	2300      	movs	r3, #0
    3974:	607b      	str	r3, [r7, #4]
    3976:	6db8      	ldr	r0, [r7, #88]	; 0x58
    3978:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    397a:	683a      	ldr	r2, [r7, #0]
    397c:	687b      	ldr	r3, [r7, #4]
    397e:	4c49      	ldr	r4, [pc, #292]	; (3aa4 <_sercom_get_async_baud_val+0x1bc>)
    3980:	47a0      	blx	r4
    3982:	0003      	movs	r3, r0
    3984:	000c      	movs	r4, r1
    3986:	673b      	str	r3, [r7, #112]	; 0x70
    3988:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    398a:	2100      	movs	r1, #0
    398c:	2201      	movs	r2, #1
    398e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3990:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    3992:	1ac9      	subs	r1, r1, r3
    3994:	41a2      	sbcs	r2, r4
    3996:	000b      	movs	r3, r1
    3998:	0014      	movs	r4, r2
    399a:	66bb      	str	r3, [r7, #104]	; 0x68
    399c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    399e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    39a0:	0c1b      	lsrs	r3, r3, #16
    39a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    39a4:	0416      	lsls	r6, r2, #16
    39a6:	431e      	orrs	r6, r3
    39a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    39aa:	041d      	lsls	r5, r3, #16
    39ac:	0033      	movs	r3, r6
    39ae:	67bb      	str	r3, [r7, #120]	; 0x78
    39b0:	2300      	movs	r3, #0
    39b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    39b4:	e06a      	b.n	3a8c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    39b6:	2343      	movs	r3, #67	; 0x43
    39b8:	18fb      	adds	r3, r7, r3
    39ba:	781b      	ldrb	r3, [r3, #0]
    39bc:	2b01      	cmp	r3, #1
    39be:	d165      	bne.n	3a8c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    39c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    39c2:	633b      	str	r3, [r7, #48]	; 0x30
    39c4:	2300      	movs	r3, #0
    39c6:	637b      	str	r3, [r7, #52]	; 0x34
    39c8:	2358      	movs	r3, #88	; 0x58
    39ca:	2240      	movs	r2, #64	; 0x40
    39cc:	4694      	mov	ip, r2
    39ce:	44bc      	add	ip, r7
    39d0:	4463      	add	r3, ip
    39d2:	781b      	ldrb	r3, [r3, #0]
    39d4:	b2db      	uxtb	r3, r3
    39d6:	62bb      	str	r3, [r7, #40]	; 0x28
    39d8:	2300      	movs	r3, #0
    39da:	62fb      	str	r3, [r7, #44]	; 0x2c
    39dc:	4c30      	ldr	r4, [pc, #192]	; (3aa0 <_sercom_get_async_baud_val+0x1b8>)
    39de:	6aba      	ldr	r2, [r7, #40]	; 0x28
    39e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    39e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    39e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    39e6:	47a0      	blx	r4
    39e8:	0003      	movs	r3, r0
    39ea:	000c      	movs	r4, r1
    39ec:	65bb      	str	r3, [r7, #88]	; 0x58
    39ee:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    39f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    39f2:	623b      	str	r3, [r7, #32]
    39f4:	2300      	movs	r3, #0
    39f6:	627b      	str	r3, [r7, #36]	; 0x24
    39f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    39fa:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    39fc:	001a      	movs	r2, r3
    39fe:	0023      	movs	r3, r4
    3a00:	6a38      	ldr	r0, [r7, #32]
    3a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3a04:	4c27      	ldr	r4, [pc, #156]	; (3aa4 <_sercom_get_async_baud_val+0x1bc>)
    3a06:	47a0      	blx	r4
    3a08:	0003      	movs	r3, r0
    3a0a:	000c      	movs	r4, r1
    3a0c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    3a0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    3a10:	2380      	movs	r3, #128	; 0x80
    3a12:	019b      	lsls	r3, r3, #6
    3a14:	429a      	cmp	r2, r3
    3a16:	d901      	bls.n	3a1c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3a18:	2340      	movs	r3, #64	; 0x40
    3a1a:	e03d      	b.n	3a98 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    3a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a1e:	61bb      	str	r3, [r7, #24]
    3a20:	2300      	movs	r3, #0
    3a22:	61fb      	str	r3, [r7, #28]
    3a24:	69b9      	ldr	r1, [r7, #24]
    3a26:	69fa      	ldr	r2, [r7, #28]
    3a28:	000b      	movs	r3, r1
    3a2a:	0f5b      	lsrs	r3, r3, #29
    3a2c:	0010      	movs	r0, r2
    3a2e:	00c0      	lsls	r0, r0, #3
    3a30:	63f8      	str	r0, [r7, #60]	; 0x3c
    3a32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3a34:	4318      	orrs	r0, r3
    3a36:	63f8      	str	r0, [r7, #60]	; 0x3c
    3a38:	000b      	movs	r3, r1
    3a3a:	00db      	lsls	r3, r3, #3
    3a3c:	63bb      	str	r3, [r7, #56]	; 0x38
    3a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3a40:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3a42:	001a      	movs	r2, r3
    3a44:	0023      	movs	r3, r4
    3a46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3a48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3a4a:	4c16      	ldr	r4, [pc, #88]	; (3aa4 <_sercom_get_async_baud_val+0x1bc>)
    3a4c:	47a0      	blx	r4
    3a4e:	0003      	movs	r3, r0
    3a50:	000c      	movs	r4, r1
    3a52:	65bb      	str	r3, [r7, #88]	; 0x58
    3a54:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    3a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3a58:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3a5a:	b2d9      	uxtb	r1, r3
    3a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3a5e:	b2db      	uxtb	r3, r3
    3a60:	00db      	lsls	r3, r3, #3
    3a62:	b2da      	uxtb	r2, r3
    3a64:	2317      	movs	r3, #23
    3a66:	2040      	movs	r0, #64	; 0x40
    3a68:	4684      	mov	ip, r0
    3a6a:	44bc      	add	ip, r7
    3a6c:	4463      	add	r3, ip
    3a6e:	1a8a      	subs	r2, r1, r2
    3a70:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    3a72:	2317      	movs	r3, #23
    3a74:	2240      	movs	r2, #64	; 0x40
    3a76:	4694      	mov	ip, r2
    3a78:	44bc      	add	ip, r7
    3a7a:	4463      	add	r3, ip
    3a7c:	781b      	ldrb	r3, [r3, #0]
    3a7e:	035b      	lsls	r3, r3, #13
    3a80:	001a      	movs	r2, r3
    3a82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3a84:	4313      	orrs	r3, r2
    3a86:	67bb      	str	r3, [r7, #120]	; 0x78
    3a88:	2300      	movs	r3, #0
    3a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    3a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3a8e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    3a90:	b29a      	uxth	r2, r3
    3a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3a94:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    3a96:	2300      	movs	r3, #0
}
    3a98:	0018      	movs	r0, r3
    3a9a:	46bd      	mov	sp, r7
    3a9c:	b021      	add	sp, #132	; 0x84
    3a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3aa0:	0000b4b9 	.word	0x0000b4b9
    3aa4:	0000378b 	.word	0x0000378b

00003aa8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3aa8:	b580      	push	{r7, lr}
    3aaa:	b084      	sub	sp, #16
    3aac:	af00      	add	r7, sp, #0
    3aae:	0002      	movs	r2, r0
    3ab0:	1dfb      	adds	r3, r7, #7
    3ab2:	701a      	strb	r2, [r3, #0]
    3ab4:	1dbb      	adds	r3, r7, #6
    3ab6:	1c0a      	adds	r2, r1, #0
    3ab8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3aba:	4b1a      	ldr	r3, [pc, #104]	; (3b24 <sercom_set_gclk_generator+0x7c>)
    3abc:	781b      	ldrb	r3, [r3, #0]
    3abe:	2201      	movs	r2, #1
    3ac0:	4053      	eors	r3, r2
    3ac2:	b2db      	uxtb	r3, r3
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	d103      	bne.n	3ad0 <sercom_set_gclk_generator+0x28>
    3ac8:	1dbb      	adds	r3, r7, #6
    3aca:	781b      	ldrb	r3, [r3, #0]
    3acc:	2b00      	cmp	r3, #0
    3ace:	d01b      	beq.n	3b08 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3ad0:	230c      	movs	r3, #12
    3ad2:	18fb      	adds	r3, r7, r3
    3ad4:	0018      	movs	r0, r3
    3ad6:	4b14      	ldr	r3, [pc, #80]	; (3b28 <sercom_set_gclk_generator+0x80>)
    3ad8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3ada:	230c      	movs	r3, #12
    3adc:	18fb      	adds	r3, r7, r3
    3ade:	1dfa      	adds	r2, r7, #7
    3ae0:	7812      	ldrb	r2, [r2, #0]
    3ae2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3ae4:	230c      	movs	r3, #12
    3ae6:	18fb      	adds	r3, r7, r3
    3ae8:	0019      	movs	r1, r3
    3aea:	2013      	movs	r0, #19
    3aec:	4b0f      	ldr	r3, [pc, #60]	; (3b2c <sercom_set_gclk_generator+0x84>)
    3aee:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3af0:	2013      	movs	r0, #19
    3af2:	4b0f      	ldr	r3, [pc, #60]	; (3b30 <sercom_set_gclk_generator+0x88>)
    3af4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3af6:	4b0b      	ldr	r3, [pc, #44]	; (3b24 <sercom_set_gclk_generator+0x7c>)
    3af8:	1dfa      	adds	r2, r7, #7
    3afa:	7812      	ldrb	r2, [r2, #0]
    3afc:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3afe:	4b09      	ldr	r3, [pc, #36]	; (3b24 <sercom_set_gclk_generator+0x7c>)
    3b00:	2201      	movs	r2, #1
    3b02:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3b04:	2300      	movs	r3, #0
    3b06:	e008      	b.n	3b1a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3b08:	4b06      	ldr	r3, [pc, #24]	; (3b24 <sercom_set_gclk_generator+0x7c>)
    3b0a:	785b      	ldrb	r3, [r3, #1]
    3b0c:	1dfa      	adds	r2, r7, #7
    3b0e:	7812      	ldrb	r2, [r2, #0]
    3b10:	429a      	cmp	r2, r3
    3b12:	d101      	bne.n	3b18 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3b14:	2300      	movs	r3, #0
    3b16:	e000      	b.n	3b1a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3b18:	231d      	movs	r3, #29
}
    3b1a:	0018      	movs	r0, r3
    3b1c:	46bd      	mov	sp, r7
    3b1e:	b004      	add	sp, #16
    3b20:	bd80      	pop	{r7, pc}
    3b22:	46c0      	nop			; (mov r8, r8)
    3b24:	20000144 	.word	0x20000144
    3b28:	00003775 	.word	0x00003775
    3b2c:	00006805 	.word	0x00006805
    3b30:	00006849 	.word	0x00006849

00003b34 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3b34:	b580      	push	{r7, lr}
    3b36:	b082      	sub	sp, #8
    3b38:	af00      	add	r7, sp, #0
    3b3a:	6078      	str	r0, [r7, #4]
    3b3c:	000a      	movs	r2, r1
    3b3e:	1cfb      	adds	r3, r7, #3
    3b40:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3b42:	687b      	ldr	r3, [r7, #4]
    3b44:	4a4d      	ldr	r2, [pc, #308]	; (3c7c <_sercom_get_default_pad+0x148>)
    3b46:	4293      	cmp	r3, r2
    3b48:	d03f      	beq.n	3bca <_sercom_get_default_pad+0x96>
    3b4a:	4a4c      	ldr	r2, [pc, #304]	; (3c7c <_sercom_get_default_pad+0x148>)
    3b4c:	4293      	cmp	r3, r2
    3b4e:	d806      	bhi.n	3b5e <_sercom_get_default_pad+0x2a>
    3b50:	4a4b      	ldr	r2, [pc, #300]	; (3c80 <_sercom_get_default_pad+0x14c>)
    3b52:	4293      	cmp	r3, r2
    3b54:	d00f      	beq.n	3b76 <_sercom_get_default_pad+0x42>
    3b56:	4a4b      	ldr	r2, [pc, #300]	; (3c84 <_sercom_get_default_pad+0x150>)
    3b58:	4293      	cmp	r3, r2
    3b5a:	d021      	beq.n	3ba0 <_sercom_get_default_pad+0x6c>
    3b5c:	e089      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3b5e:	4a4a      	ldr	r2, [pc, #296]	; (3c88 <_sercom_get_default_pad+0x154>)
    3b60:	4293      	cmp	r3, r2
    3b62:	d100      	bne.n	3b66 <_sercom_get_default_pad+0x32>
    3b64:	e05b      	b.n	3c1e <_sercom_get_default_pad+0xea>
    3b66:	4a49      	ldr	r2, [pc, #292]	; (3c8c <_sercom_get_default_pad+0x158>)
    3b68:	4293      	cmp	r3, r2
    3b6a:	d100      	bne.n	3b6e <_sercom_get_default_pad+0x3a>
    3b6c:	e06c      	b.n	3c48 <_sercom_get_default_pad+0x114>
    3b6e:	4a48      	ldr	r2, [pc, #288]	; (3c90 <_sercom_get_default_pad+0x15c>)
    3b70:	4293      	cmp	r3, r2
    3b72:	d03f      	beq.n	3bf4 <_sercom_get_default_pad+0xc0>
    3b74:	e07d      	b.n	3c72 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3b76:	1cfb      	adds	r3, r7, #3
    3b78:	781b      	ldrb	r3, [r3, #0]
    3b7a:	2b01      	cmp	r3, #1
    3b7c:	d00a      	beq.n	3b94 <_sercom_get_default_pad+0x60>
    3b7e:	dc02      	bgt.n	3b86 <_sercom_get_default_pad+0x52>
    3b80:	2b00      	cmp	r3, #0
    3b82:	d005      	beq.n	3b90 <_sercom_get_default_pad+0x5c>
    3b84:	e075      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3b86:	2b02      	cmp	r3, #2
    3b88:	d006      	beq.n	3b98 <_sercom_get_default_pad+0x64>
    3b8a:	2b03      	cmp	r3, #3
    3b8c:	d006      	beq.n	3b9c <_sercom_get_default_pad+0x68>
    3b8e:	e070      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3b90:	4b40      	ldr	r3, [pc, #256]	; (3c94 <_sercom_get_default_pad+0x160>)
    3b92:	e06f      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3b94:	4b40      	ldr	r3, [pc, #256]	; (3c98 <_sercom_get_default_pad+0x164>)
    3b96:	e06d      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3b98:	4b40      	ldr	r3, [pc, #256]	; (3c9c <_sercom_get_default_pad+0x168>)
    3b9a:	e06b      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3b9c:	4b40      	ldr	r3, [pc, #256]	; (3ca0 <_sercom_get_default_pad+0x16c>)
    3b9e:	e069      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3ba0:	1cfb      	adds	r3, r7, #3
    3ba2:	781b      	ldrb	r3, [r3, #0]
    3ba4:	2b01      	cmp	r3, #1
    3ba6:	d00a      	beq.n	3bbe <_sercom_get_default_pad+0x8a>
    3ba8:	dc02      	bgt.n	3bb0 <_sercom_get_default_pad+0x7c>
    3baa:	2b00      	cmp	r3, #0
    3bac:	d005      	beq.n	3bba <_sercom_get_default_pad+0x86>
    3bae:	e060      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3bb0:	2b02      	cmp	r3, #2
    3bb2:	d006      	beq.n	3bc2 <_sercom_get_default_pad+0x8e>
    3bb4:	2b03      	cmp	r3, #3
    3bb6:	d006      	beq.n	3bc6 <_sercom_get_default_pad+0x92>
    3bb8:	e05b      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3bba:	2303      	movs	r3, #3
    3bbc:	e05a      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3bbe:	4b39      	ldr	r3, [pc, #228]	; (3ca4 <_sercom_get_default_pad+0x170>)
    3bc0:	e058      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3bc2:	4b39      	ldr	r3, [pc, #228]	; (3ca8 <_sercom_get_default_pad+0x174>)
    3bc4:	e056      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3bc6:	4b39      	ldr	r3, [pc, #228]	; (3cac <_sercom_get_default_pad+0x178>)
    3bc8:	e054      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3bca:	1cfb      	adds	r3, r7, #3
    3bcc:	781b      	ldrb	r3, [r3, #0]
    3bce:	2b01      	cmp	r3, #1
    3bd0:	d00a      	beq.n	3be8 <_sercom_get_default_pad+0xb4>
    3bd2:	dc02      	bgt.n	3bda <_sercom_get_default_pad+0xa6>
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	d005      	beq.n	3be4 <_sercom_get_default_pad+0xb0>
    3bd8:	e04b      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3bda:	2b02      	cmp	r3, #2
    3bdc:	d006      	beq.n	3bec <_sercom_get_default_pad+0xb8>
    3bde:	2b03      	cmp	r3, #3
    3be0:	d006      	beq.n	3bf0 <_sercom_get_default_pad+0xbc>
    3be2:	e046      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3be4:	4b32      	ldr	r3, [pc, #200]	; (3cb0 <_sercom_get_default_pad+0x17c>)
    3be6:	e045      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3be8:	4b32      	ldr	r3, [pc, #200]	; (3cb4 <_sercom_get_default_pad+0x180>)
    3bea:	e043      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3bec:	4b32      	ldr	r3, [pc, #200]	; (3cb8 <_sercom_get_default_pad+0x184>)
    3bee:	e041      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3bf0:	4b32      	ldr	r3, [pc, #200]	; (3cbc <_sercom_get_default_pad+0x188>)
    3bf2:	e03f      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3bf4:	1cfb      	adds	r3, r7, #3
    3bf6:	781b      	ldrb	r3, [r3, #0]
    3bf8:	2b01      	cmp	r3, #1
    3bfa:	d00a      	beq.n	3c12 <_sercom_get_default_pad+0xde>
    3bfc:	dc02      	bgt.n	3c04 <_sercom_get_default_pad+0xd0>
    3bfe:	2b00      	cmp	r3, #0
    3c00:	d005      	beq.n	3c0e <_sercom_get_default_pad+0xda>
    3c02:	e036      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3c04:	2b02      	cmp	r3, #2
    3c06:	d006      	beq.n	3c16 <_sercom_get_default_pad+0xe2>
    3c08:	2b03      	cmp	r3, #3
    3c0a:	d006      	beq.n	3c1a <_sercom_get_default_pad+0xe6>
    3c0c:	e031      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3c0e:	4b2c      	ldr	r3, [pc, #176]	; (3cc0 <_sercom_get_default_pad+0x18c>)
    3c10:	e030      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c12:	4b2c      	ldr	r3, [pc, #176]	; (3cc4 <_sercom_get_default_pad+0x190>)
    3c14:	e02e      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c16:	4b2c      	ldr	r3, [pc, #176]	; (3cc8 <_sercom_get_default_pad+0x194>)
    3c18:	e02c      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c1a:	4b2c      	ldr	r3, [pc, #176]	; (3ccc <_sercom_get_default_pad+0x198>)
    3c1c:	e02a      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c1e:	1cfb      	adds	r3, r7, #3
    3c20:	781b      	ldrb	r3, [r3, #0]
    3c22:	2b01      	cmp	r3, #1
    3c24:	d00a      	beq.n	3c3c <_sercom_get_default_pad+0x108>
    3c26:	dc02      	bgt.n	3c2e <_sercom_get_default_pad+0xfa>
    3c28:	2b00      	cmp	r3, #0
    3c2a:	d005      	beq.n	3c38 <_sercom_get_default_pad+0x104>
    3c2c:	e021      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3c2e:	2b02      	cmp	r3, #2
    3c30:	d006      	beq.n	3c40 <_sercom_get_default_pad+0x10c>
    3c32:	2b03      	cmp	r3, #3
    3c34:	d006      	beq.n	3c44 <_sercom_get_default_pad+0x110>
    3c36:	e01c      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3c38:	4b25      	ldr	r3, [pc, #148]	; (3cd0 <_sercom_get_default_pad+0x19c>)
    3c3a:	e01b      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c3c:	4b25      	ldr	r3, [pc, #148]	; (3cd4 <_sercom_get_default_pad+0x1a0>)
    3c3e:	e019      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c40:	4b25      	ldr	r3, [pc, #148]	; (3cd8 <_sercom_get_default_pad+0x1a4>)
    3c42:	e017      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c44:	4b25      	ldr	r3, [pc, #148]	; (3cdc <_sercom_get_default_pad+0x1a8>)
    3c46:	e015      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c48:	1cfb      	adds	r3, r7, #3
    3c4a:	781b      	ldrb	r3, [r3, #0]
    3c4c:	2b01      	cmp	r3, #1
    3c4e:	d00a      	beq.n	3c66 <_sercom_get_default_pad+0x132>
    3c50:	dc02      	bgt.n	3c58 <_sercom_get_default_pad+0x124>
    3c52:	2b00      	cmp	r3, #0
    3c54:	d005      	beq.n	3c62 <_sercom_get_default_pad+0x12e>
    3c56:	e00c      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3c58:	2b02      	cmp	r3, #2
    3c5a:	d006      	beq.n	3c6a <_sercom_get_default_pad+0x136>
    3c5c:	2b03      	cmp	r3, #3
    3c5e:	d006      	beq.n	3c6e <_sercom_get_default_pad+0x13a>
    3c60:	e007      	b.n	3c72 <_sercom_get_default_pad+0x13e>
    3c62:	4b1f      	ldr	r3, [pc, #124]	; (3ce0 <_sercom_get_default_pad+0x1ac>)
    3c64:	e006      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c66:	4b1f      	ldr	r3, [pc, #124]	; (3ce4 <_sercom_get_default_pad+0x1b0>)
    3c68:	e004      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c6a:	4b1f      	ldr	r3, [pc, #124]	; (3ce8 <_sercom_get_default_pad+0x1b4>)
    3c6c:	e002      	b.n	3c74 <_sercom_get_default_pad+0x140>
    3c6e:	4b1f      	ldr	r3, [pc, #124]	; (3cec <_sercom_get_default_pad+0x1b8>)
    3c70:	e000      	b.n	3c74 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3c72:	2300      	movs	r3, #0
}
    3c74:	0018      	movs	r0, r3
    3c76:	46bd      	mov	sp, r7
    3c78:	b002      	add	sp, #8
    3c7a:	bd80      	pop	{r7, pc}
    3c7c:	42001000 	.word	0x42001000
    3c80:	42000800 	.word	0x42000800
    3c84:	42000c00 	.word	0x42000c00
    3c88:	42001800 	.word	0x42001800
    3c8c:	42001c00 	.word	0x42001c00
    3c90:	42001400 	.word	0x42001400
    3c94:	00040003 	.word	0x00040003
    3c98:	00050003 	.word	0x00050003
    3c9c:	00060003 	.word	0x00060003
    3ca0:	00070003 	.word	0x00070003
    3ca4:	00010003 	.word	0x00010003
    3ca8:	001e0003 	.word	0x001e0003
    3cac:	001f0003 	.word	0x001f0003
    3cb0:	00080003 	.word	0x00080003
    3cb4:	00090003 	.word	0x00090003
    3cb8:	000a0003 	.word	0x000a0003
    3cbc:	000b0003 	.word	0x000b0003
    3cc0:	00100003 	.word	0x00100003
    3cc4:	00110003 	.word	0x00110003
    3cc8:	00120003 	.word	0x00120003
    3ccc:	00130003 	.word	0x00130003
    3cd0:	000c0003 	.word	0x000c0003
    3cd4:	000d0003 	.word	0x000d0003
    3cd8:	000e0003 	.word	0x000e0003
    3cdc:	000f0003 	.word	0x000f0003
    3ce0:	00160003 	.word	0x00160003
    3ce4:	00170003 	.word	0x00170003
    3ce8:	00180003 	.word	0x00180003
    3cec:	00190003 	.word	0x00190003

00003cf0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3cf0:	b590      	push	{r4, r7, lr}
    3cf2:	b08b      	sub	sp, #44	; 0x2c
    3cf4:	af00      	add	r7, sp, #0
    3cf6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3cf8:	230c      	movs	r3, #12
    3cfa:	18fb      	adds	r3, r7, r3
    3cfc:	4a0f      	ldr	r2, [pc, #60]	; (3d3c <_sercom_get_sercom_inst_index+0x4c>)
    3cfe:	ca13      	ldmia	r2!, {r0, r1, r4}
    3d00:	c313      	stmia	r3!, {r0, r1, r4}
    3d02:	ca13      	ldmia	r2!, {r0, r1, r4}
    3d04:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3d06:	2300      	movs	r3, #0
    3d08:	627b      	str	r3, [r7, #36]	; 0x24
    3d0a:	e00e      	b.n	3d2a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3d0c:	230c      	movs	r3, #12
    3d0e:	18fb      	adds	r3, r7, r3
    3d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3d12:	0092      	lsls	r2, r2, #2
    3d14:	58d3      	ldr	r3, [r2, r3]
    3d16:	001a      	movs	r2, r3
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	429a      	cmp	r2, r3
    3d1c:	d102      	bne.n	3d24 <_sercom_get_sercom_inst_index+0x34>
			return i;
    3d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d20:	b2db      	uxtb	r3, r3
    3d22:	e006      	b.n	3d32 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d26:	3301      	adds	r3, #1
    3d28:	627b      	str	r3, [r7, #36]	; 0x24
    3d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d2c:	2b05      	cmp	r3, #5
    3d2e:	d9ed      	bls.n	3d0c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3d30:	2300      	movs	r3, #0
}
    3d32:	0018      	movs	r0, r3
    3d34:	46bd      	mov	sp, r7
    3d36:	b00b      	add	sp, #44	; 0x2c
    3d38:	bd90      	pop	{r4, r7, pc}
    3d3a:	46c0      	nop			; (mov r8, r8)
    3d3c:	0000bf30 	.word	0x0000bf30

00003d40 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3d40:	b580      	push	{r7, lr}
    3d42:	b082      	sub	sp, #8
    3d44:	af00      	add	r7, sp, #0
    3d46:	0002      	movs	r2, r0
    3d48:	1dfb      	adds	r3, r7, #7
    3d4a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3d4c:	46c0      	nop			; (mov r8, r8)
    3d4e:	46bd      	mov	sp, r7
    3d50:	b002      	add	sp, #8
    3d52:	bd80      	pop	{r7, pc}

00003d54 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3d54:	b580      	push	{r7, lr}
    3d56:	b084      	sub	sp, #16
    3d58:	af00      	add	r7, sp, #0
    3d5a:	0002      	movs	r2, r0
    3d5c:	6039      	str	r1, [r7, #0]
    3d5e:	1dfb      	adds	r3, r7, #7
    3d60:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3d62:	4b13      	ldr	r3, [pc, #76]	; (3db0 <_sercom_set_handler+0x5c>)
    3d64:	781b      	ldrb	r3, [r3, #0]
    3d66:	2201      	movs	r2, #1
    3d68:	4053      	eors	r3, r2
    3d6a:	b2db      	uxtb	r3, r3
    3d6c:	2b00      	cmp	r3, #0
    3d6e:	d015      	beq.n	3d9c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3d70:	2300      	movs	r3, #0
    3d72:	60fb      	str	r3, [r7, #12]
    3d74:	e00c      	b.n	3d90 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3d76:	4b0f      	ldr	r3, [pc, #60]	; (3db4 <_sercom_set_handler+0x60>)
    3d78:	68fa      	ldr	r2, [r7, #12]
    3d7a:	0092      	lsls	r2, r2, #2
    3d7c:	490e      	ldr	r1, [pc, #56]	; (3db8 <_sercom_set_handler+0x64>)
    3d7e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3d80:	4b0e      	ldr	r3, [pc, #56]	; (3dbc <_sercom_set_handler+0x68>)
    3d82:	68fa      	ldr	r2, [r7, #12]
    3d84:	0092      	lsls	r2, r2, #2
    3d86:	2100      	movs	r1, #0
    3d88:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3d8a:	68fb      	ldr	r3, [r7, #12]
    3d8c:	3301      	adds	r3, #1
    3d8e:	60fb      	str	r3, [r7, #12]
    3d90:	68fb      	ldr	r3, [r7, #12]
    3d92:	2b05      	cmp	r3, #5
    3d94:	d9ef      	bls.n	3d76 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    3d96:	4b06      	ldr	r3, [pc, #24]	; (3db0 <_sercom_set_handler+0x5c>)
    3d98:	2201      	movs	r2, #1
    3d9a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3d9c:	1dfb      	adds	r3, r7, #7
    3d9e:	781a      	ldrb	r2, [r3, #0]
    3da0:	4b04      	ldr	r3, [pc, #16]	; (3db4 <_sercom_set_handler+0x60>)
    3da2:	0092      	lsls	r2, r2, #2
    3da4:	6839      	ldr	r1, [r7, #0]
    3da6:	50d1      	str	r1, [r2, r3]
}
    3da8:	46c0      	nop			; (mov r8, r8)
    3daa:	46bd      	mov	sp, r7
    3dac:	b004      	add	sp, #16
    3dae:	bd80      	pop	{r7, pc}
    3db0:	20000146 	.word	0x20000146
    3db4:	20000148 	.word	0x20000148
    3db8:	00003d41 	.word	0x00003d41
    3dbc:	200009d4 	.word	0x200009d4

00003dc0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3dc0:	b590      	push	{r4, r7, lr}
    3dc2:	b085      	sub	sp, #20
    3dc4:	af00      	add	r7, sp, #0
    3dc6:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3dc8:	2308      	movs	r3, #8
    3dca:	18fb      	adds	r3, r7, r3
    3dcc:	4a0b      	ldr	r2, [pc, #44]	; (3dfc <_sercom_get_interrupt_vector+0x3c>)
    3dce:	6811      	ldr	r1, [r2, #0]
    3dd0:	6019      	str	r1, [r3, #0]
    3dd2:	8892      	ldrh	r2, [r2, #4]
    3dd4:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3dd6:	230f      	movs	r3, #15
    3dd8:	18fc      	adds	r4, r7, r3
    3dda:	687b      	ldr	r3, [r7, #4]
    3ddc:	0018      	movs	r0, r3
    3dde:	4b08      	ldr	r3, [pc, #32]	; (3e00 <_sercom_get_interrupt_vector+0x40>)
    3de0:	4798      	blx	r3
    3de2:	0003      	movs	r3, r0
    3de4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3de6:	230f      	movs	r3, #15
    3de8:	18fb      	adds	r3, r7, r3
    3dea:	781b      	ldrb	r3, [r3, #0]
    3dec:	2208      	movs	r2, #8
    3dee:	18ba      	adds	r2, r7, r2
    3df0:	5cd3      	ldrb	r3, [r2, r3]
    3df2:	b25b      	sxtb	r3, r3
}
    3df4:	0018      	movs	r0, r3
    3df6:	46bd      	mov	sp, r7
    3df8:	b005      	add	sp, #20
    3dfa:	bd90      	pop	{r4, r7, pc}
    3dfc:	0000bf48 	.word	0x0000bf48
    3e00:	00003cf1 	.word	0x00003cf1

00003e04 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3e04:	b580      	push	{r7, lr}
    3e06:	af00      	add	r7, sp, #0
    3e08:	4b03      	ldr	r3, [pc, #12]	; (3e18 <SERCOM0_Handler+0x14>)
    3e0a:	681b      	ldr	r3, [r3, #0]
    3e0c:	2000      	movs	r0, #0
    3e0e:	4798      	blx	r3
    3e10:	46c0      	nop			; (mov r8, r8)
    3e12:	46bd      	mov	sp, r7
    3e14:	bd80      	pop	{r7, pc}
    3e16:	46c0      	nop			; (mov r8, r8)
    3e18:	20000148 	.word	0x20000148

00003e1c <SERCOM1_Handler>:
    3e1c:	b580      	push	{r7, lr}
    3e1e:	af00      	add	r7, sp, #0
    3e20:	4b03      	ldr	r3, [pc, #12]	; (3e30 <SERCOM1_Handler+0x14>)
    3e22:	685b      	ldr	r3, [r3, #4]
    3e24:	2001      	movs	r0, #1
    3e26:	4798      	blx	r3
    3e28:	46c0      	nop			; (mov r8, r8)
    3e2a:	46bd      	mov	sp, r7
    3e2c:	bd80      	pop	{r7, pc}
    3e2e:	46c0      	nop			; (mov r8, r8)
    3e30:	20000148 	.word	0x20000148

00003e34 <SERCOM2_Handler>:
    3e34:	b580      	push	{r7, lr}
    3e36:	af00      	add	r7, sp, #0
    3e38:	4b03      	ldr	r3, [pc, #12]	; (3e48 <SERCOM2_Handler+0x14>)
    3e3a:	689b      	ldr	r3, [r3, #8]
    3e3c:	2002      	movs	r0, #2
    3e3e:	4798      	blx	r3
    3e40:	46c0      	nop			; (mov r8, r8)
    3e42:	46bd      	mov	sp, r7
    3e44:	bd80      	pop	{r7, pc}
    3e46:	46c0      	nop			; (mov r8, r8)
    3e48:	20000148 	.word	0x20000148

00003e4c <SERCOM3_Handler>:
    3e4c:	b580      	push	{r7, lr}
    3e4e:	af00      	add	r7, sp, #0
    3e50:	4b03      	ldr	r3, [pc, #12]	; (3e60 <SERCOM3_Handler+0x14>)
    3e52:	68db      	ldr	r3, [r3, #12]
    3e54:	2003      	movs	r0, #3
    3e56:	4798      	blx	r3
    3e58:	46c0      	nop			; (mov r8, r8)
    3e5a:	46bd      	mov	sp, r7
    3e5c:	bd80      	pop	{r7, pc}
    3e5e:	46c0      	nop			; (mov r8, r8)
    3e60:	20000148 	.word	0x20000148

00003e64 <SERCOM4_Handler>:
    3e64:	b580      	push	{r7, lr}
    3e66:	af00      	add	r7, sp, #0
    3e68:	4b03      	ldr	r3, [pc, #12]	; (3e78 <SERCOM4_Handler+0x14>)
    3e6a:	691b      	ldr	r3, [r3, #16]
    3e6c:	2004      	movs	r0, #4
    3e6e:	4798      	blx	r3
    3e70:	46c0      	nop			; (mov r8, r8)
    3e72:	46bd      	mov	sp, r7
    3e74:	bd80      	pop	{r7, pc}
    3e76:	46c0      	nop			; (mov r8, r8)
    3e78:	20000148 	.word	0x20000148

00003e7c <SERCOM5_Handler>:
    3e7c:	b580      	push	{r7, lr}
    3e7e:	af00      	add	r7, sp, #0
    3e80:	4b03      	ldr	r3, [pc, #12]	; (3e90 <SERCOM5_Handler+0x14>)
    3e82:	695b      	ldr	r3, [r3, #20]
    3e84:	2005      	movs	r0, #5
    3e86:	4798      	blx	r3
    3e88:	46c0      	nop			; (mov r8, r8)
    3e8a:	46bd      	mov	sp, r7
    3e8c:	bd80      	pop	{r7, pc}
    3e8e:	46c0      	nop			; (mov r8, r8)
    3e90:	20000148 	.word	0x20000148

00003e94 <system_pinmux_get_config_defaults>:
{
    3e94:	b580      	push	{r7, lr}
    3e96:	b082      	sub	sp, #8
    3e98:	af00      	add	r7, sp, #0
    3e9a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	2280      	movs	r2, #128	; 0x80
    3ea0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3ea2:	687b      	ldr	r3, [r7, #4]
    3ea4:	2200      	movs	r2, #0
    3ea6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3ea8:	687b      	ldr	r3, [r7, #4]
    3eaa:	2201      	movs	r2, #1
    3eac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3eae:	687b      	ldr	r3, [r7, #4]
    3eb0:	2200      	movs	r2, #0
    3eb2:	70da      	strb	r2, [r3, #3]
}
    3eb4:	46c0      	nop			; (mov r8, r8)
    3eb6:	46bd      	mov	sp, r7
    3eb8:	b002      	add	sp, #8
    3eba:	bd80      	pop	{r7, pc}

00003ebc <system_pinmux_get_group_from_gpio_pin>:
{
    3ebc:	b580      	push	{r7, lr}
    3ebe:	b084      	sub	sp, #16
    3ec0:	af00      	add	r7, sp, #0
    3ec2:	0002      	movs	r2, r0
    3ec4:	1dfb      	adds	r3, r7, #7
    3ec6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3ec8:	230f      	movs	r3, #15
    3eca:	18fb      	adds	r3, r7, r3
    3ecc:	1dfa      	adds	r2, r7, #7
    3ece:	7812      	ldrb	r2, [r2, #0]
    3ed0:	09d2      	lsrs	r2, r2, #7
    3ed2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3ed4:	230e      	movs	r3, #14
    3ed6:	18fb      	adds	r3, r7, r3
    3ed8:	1dfa      	adds	r2, r7, #7
    3eda:	7812      	ldrb	r2, [r2, #0]
    3edc:	0952      	lsrs	r2, r2, #5
    3ede:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3ee0:	4b0d      	ldr	r3, [pc, #52]	; (3f18 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3ee2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3ee4:	230f      	movs	r3, #15
    3ee6:	18fb      	adds	r3, r7, r3
    3ee8:	781b      	ldrb	r3, [r3, #0]
    3eea:	2b00      	cmp	r3, #0
    3eec:	d10f      	bne.n	3f0e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3eee:	230f      	movs	r3, #15
    3ef0:	18fb      	adds	r3, r7, r3
    3ef2:	781b      	ldrb	r3, [r3, #0]
    3ef4:	009b      	lsls	r3, r3, #2
    3ef6:	2210      	movs	r2, #16
    3ef8:	4694      	mov	ip, r2
    3efa:	44bc      	add	ip, r7
    3efc:	4463      	add	r3, ip
    3efe:	3b08      	subs	r3, #8
    3f00:	681a      	ldr	r2, [r3, #0]
    3f02:	230e      	movs	r3, #14
    3f04:	18fb      	adds	r3, r7, r3
    3f06:	781b      	ldrb	r3, [r3, #0]
    3f08:	01db      	lsls	r3, r3, #7
    3f0a:	18d3      	adds	r3, r2, r3
    3f0c:	e000      	b.n	3f10 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3f0e:	2300      	movs	r3, #0
}
    3f10:	0018      	movs	r0, r3
    3f12:	46bd      	mov	sp, r7
    3f14:	b004      	add	sp, #16
    3f16:	bd80      	pop	{r7, pc}
    3f18:	41004400 	.word	0x41004400

00003f1c <port_get_group_from_gpio_pin>:
{
    3f1c:	b580      	push	{r7, lr}
    3f1e:	b082      	sub	sp, #8
    3f20:	af00      	add	r7, sp, #0
    3f22:	0002      	movs	r2, r0
    3f24:	1dfb      	adds	r3, r7, #7
    3f26:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3f28:	1dfb      	adds	r3, r7, #7
    3f2a:	781b      	ldrb	r3, [r3, #0]
    3f2c:	0018      	movs	r0, r3
    3f2e:	4b03      	ldr	r3, [pc, #12]	; (3f3c <port_get_group_from_gpio_pin+0x20>)
    3f30:	4798      	blx	r3
    3f32:	0003      	movs	r3, r0
}
    3f34:	0018      	movs	r0, r3
    3f36:	46bd      	mov	sp, r7
    3f38:	b002      	add	sp, #8
    3f3a:	bd80      	pop	{r7, pc}
    3f3c:	00003ebd 	.word	0x00003ebd

00003f40 <port_pin_set_output_level>:
{
    3f40:	b580      	push	{r7, lr}
    3f42:	b084      	sub	sp, #16
    3f44:	af00      	add	r7, sp, #0
    3f46:	0002      	movs	r2, r0
    3f48:	1dfb      	adds	r3, r7, #7
    3f4a:	701a      	strb	r2, [r3, #0]
    3f4c:	1dbb      	adds	r3, r7, #6
    3f4e:	1c0a      	adds	r2, r1, #0
    3f50:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3f52:	1dfb      	adds	r3, r7, #7
    3f54:	781b      	ldrb	r3, [r3, #0]
    3f56:	0018      	movs	r0, r3
    3f58:	4b0d      	ldr	r3, [pc, #52]	; (3f90 <port_pin_set_output_level+0x50>)
    3f5a:	4798      	blx	r3
    3f5c:	0003      	movs	r3, r0
    3f5e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3f60:	1dfb      	adds	r3, r7, #7
    3f62:	781b      	ldrb	r3, [r3, #0]
    3f64:	221f      	movs	r2, #31
    3f66:	4013      	ands	r3, r2
    3f68:	2201      	movs	r2, #1
    3f6a:	409a      	lsls	r2, r3
    3f6c:	0013      	movs	r3, r2
    3f6e:	60bb      	str	r3, [r7, #8]
	if (level) {
    3f70:	1dbb      	adds	r3, r7, #6
    3f72:	781b      	ldrb	r3, [r3, #0]
    3f74:	2b00      	cmp	r3, #0
    3f76:	d003      	beq.n	3f80 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3f78:	68fb      	ldr	r3, [r7, #12]
    3f7a:	68ba      	ldr	r2, [r7, #8]
    3f7c:	619a      	str	r2, [r3, #24]
}
    3f7e:	e002      	b.n	3f86 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3f80:	68fb      	ldr	r3, [r7, #12]
    3f82:	68ba      	ldr	r2, [r7, #8]
    3f84:	615a      	str	r2, [r3, #20]
}
    3f86:	46c0      	nop			; (mov r8, r8)
    3f88:	46bd      	mov	sp, r7
    3f8a:	b004      	add	sp, #16
    3f8c:	bd80      	pop	{r7, pc}
    3f8e:	46c0      	nop			; (mov r8, r8)
    3f90:	00003f1d 	.word	0x00003f1d

00003f94 <system_gclk_chan_get_config_defaults>:
{
    3f94:	b580      	push	{r7, lr}
    3f96:	b082      	sub	sp, #8
    3f98:	af00      	add	r7, sp, #0
    3f9a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	2200      	movs	r2, #0
    3fa0:	701a      	strb	r2, [r3, #0]
}
    3fa2:	46c0      	nop			; (mov r8, r8)
    3fa4:	46bd      	mov	sp, r7
    3fa6:	b002      	add	sp, #8
    3fa8:	bd80      	pop	{r7, pc}
	...

00003fac <system_apb_clock_set_mask>:
{
    3fac:	b580      	push	{r7, lr}
    3fae:	b082      	sub	sp, #8
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	0002      	movs	r2, r0
    3fb4:	6039      	str	r1, [r7, #0]
    3fb6:	1dfb      	adds	r3, r7, #7
    3fb8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3fba:	1dfb      	adds	r3, r7, #7
    3fbc:	781b      	ldrb	r3, [r3, #0]
    3fbe:	2b01      	cmp	r3, #1
    3fc0:	d00a      	beq.n	3fd8 <system_apb_clock_set_mask+0x2c>
    3fc2:	2b02      	cmp	r3, #2
    3fc4:	d00f      	beq.n	3fe6 <system_apb_clock_set_mask+0x3a>
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	d114      	bne.n	3ff4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3fca:	4b0e      	ldr	r3, [pc, #56]	; (4004 <system_apb_clock_set_mask+0x58>)
    3fcc:	4a0d      	ldr	r2, [pc, #52]	; (4004 <system_apb_clock_set_mask+0x58>)
    3fce:	6991      	ldr	r1, [r2, #24]
    3fd0:	683a      	ldr	r2, [r7, #0]
    3fd2:	430a      	orrs	r2, r1
    3fd4:	619a      	str	r2, [r3, #24]
			break;
    3fd6:	e00f      	b.n	3ff8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3fd8:	4b0a      	ldr	r3, [pc, #40]	; (4004 <system_apb_clock_set_mask+0x58>)
    3fda:	4a0a      	ldr	r2, [pc, #40]	; (4004 <system_apb_clock_set_mask+0x58>)
    3fdc:	69d1      	ldr	r1, [r2, #28]
    3fde:	683a      	ldr	r2, [r7, #0]
    3fe0:	430a      	orrs	r2, r1
    3fe2:	61da      	str	r2, [r3, #28]
			break;
    3fe4:	e008      	b.n	3ff8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3fe6:	4b07      	ldr	r3, [pc, #28]	; (4004 <system_apb_clock_set_mask+0x58>)
    3fe8:	4a06      	ldr	r2, [pc, #24]	; (4004 <system_apb_clock_set_mask+0x58>)
    3fea:	6a11      	ldr	r1, [r2, #32]
    3fec:	683a      	ldr	r2, [r7, #0]
    3fee:	430a      	orrs	r2, r1
    3ff0:	621a      	str	r2, [r3, #32]
			break;
    3ff2:	e001      	b.n	3ff8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3ff4:	2317      	movs	r3, #23
    3ff6:	e000      	b.n	3ffa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3ff8:	2300      	movs	r3, #0
}
    3ffa:	0018      	movs	r0, r3
    3ffc:	46bd      	mov	sp, r7
    3ffe:	b002      	add	sp, #8
    4000:	bd80      	pop	{r7, pc}
    4002:	46c0      	nop			; (mov r8, r8)
    4004:	40000400 	.word	0x40000400

00004008 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    4008:	b580      	push	{r7, lr}
    400a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    400c:	4b05      	ldr	r3, [pc, #20]	; (4024 <system_is_debugger_present+0x1c>)
    400e:	789b      	ldrb	r3, [r3, #2]
    4010:	b2db      	uxtb	r3, r3
    4012:	001a      	movs	r2, r3
    4014:	2302      	movs	r3, #2
    4016:	4013      	ands	r3, r2
    4018:	1e5a      	subs	r2, r3, #1
    401a:	4193      	sbcs	r3, r2
    401c:	b2db      	uxtb	r3, r3
}
    401e:	0018      	movs	r0, r3
    4020:	46bd      	mov	sp, r7
    4022:	bd80      	pop	{r7, pc}
    4024:	41002000 	.word	0x41002000

00004028 <system_interrupt_enable>:
{
    4028:	b580      	push	{r7, lr}
    402a:	b082      	sub	sp, #8
    402c:	af00      	add	r7, sp, #0
    402e:	0002      	movs	r2, r0
    4030:	1dfb      	adds	r3, r7, #7
    4032:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4034:	4b06      	ldr	r3, [pc, #24]	; (4050 <system_interrupt_enable+0x28>)
    4036:	1dfa      	adds	r2, r7, #7
    4038:	7812      	ldrb	r2, [r2, #0]
    403a:	0011      	movs	r1, r2
    403c:	221f      	movs	r2, #31
    403e:	400a      	ands	r2, r1
    4040:	2101      	movs	r1, #1
    4042:	4091      	lsls	r1, r2
    4044:	000a      	movs	r2, r1
    4046:	601a      	str	r2, [r3, #0]
}
    4048:	46c0      	nop			; (mov r8, r8)
    404a:	46bd      	mov	sp, r7
    404c:	b002      	add	sp, #8
    404e:	bd80      	pop	{r7, pc}
    4050:	e000e100 	.word	0xe000e100

00004054 <system_interrupt_disable>:
{
    4054:	b580      	push	{r7, lr}
    4056:	b082      	sub	sp, #8
    4058:	af00      	add	r7, sp, #0
    405a:	0002      	movs	r2, r0
    405c:	1dfb      	adds	r3, r7, #7
    405e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4060:	4a07      	ldr	r2, [pc, #28]	; (4080 <system_interrupt_disable+0x2c>)
    4062:	1dfb      	adds	r3, r7, #7
    4064:	781b      	ldrb	r3, [r3, #0]
    4066:	0019      	movs	r1, r3
    4068:	231f      	movs	r3, #31
    406a:	400b      	ands	r3, r1
    406c:	2101      	movs	r1, #1
    406e:	4099      	lsls	r1, r3
    4070:	000b      	movs	r3, r1
    4072:	0019      	movs	r1, r3
    4074:	2380      	movs	r3, #128	; 0x80
    4076:	50d1      	str	r1, [r2, r3]
}
    4078:	46c0      	nop			; (mov r8, r8)
    407a:	46bd      	mov	sp, r7
    407c:	b002      	add	sp, #8
    407e:	bd80      	pop	{r7, pc}
    4080:	e000e100 	.word	0xe000e100

00004084 <spi_is_syncing>:
{
    4084:	b580      	push	{r7, lr}
    4086:	b084      	sub	sp, #16
    4088:	af00      	add	r7, sp, #0
    408a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    408c:	687b      	ldr	r3, [r7, #4]
    408e:	681b      	ldr	r3, [r3, #0]
    4090:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    4092:	68fb      	ldr	r3, [r7, #12]
    4094:	69db      	ldr	r3, [r3, #28]
    4096:	1e5a      	subs	r2, r3, #1
    4098:	4193      	sbcs	r3, r2
    409a:	b2db      	uxtb	r3, r3
}
    409c:	0018      	movs	r0, r3
    409e:	46bd      	mov	sp, r7
    40a0:	b004      	add	sp, #16
    40a2:	bd80      	pop	{r7, pc}

000040a4 <spi_enable>:
{
    40a4:	b580      	push	{r7, lr}
    40a6:	b084      	sub	sp, #16
    40a8:	af00      	add	r7, sp, #0
    40aa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    40ac:	687b      	ldr	r3, [r7, #4]
    40ae:	681b      	ldr	r3, [r3, #0]
    40b0:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	681b      	ldr	r3, [r3, #0]
    40b6:	0018      	movs	r0, r3
    40b8:	4b0b      	ldr	r3, [pc, #44]	; (40e8 <spi_enable+0x44>)
    40ba:	4798      	blx	r3
    40bc:	0003      	movs	r3, r0
    40be:	0018      	movs	r0, r3
    40c0:	4b0a      	ldr	r3, [pc, #40]	; (40ec <spi_enable+0x48>)
    40c2:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    40c4:	46c0      	nop			; (mov r8, r8)
    40c6:	687b      	ldr	r3, [r7, #4]
    40c8:	0018      	movs	r0, r3
    40ca:	4b09      	ldr	r3, [pc, #36]	; (40f0 <spi_enable+0x4c>)
    40cc:	4798      	blx	r3
    40ce:	1e03      	subs	r3, r0, #0
    40d0:	d1f9      	bne.n	40c6 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    40d2:	68fb      	ldr	r3, [r7, #12]
    40d4:	681b      	ldr	r3, [r3, #0]
    40d6:	2202      	movs	r2, #2
    40d8:	431a      	orrs	r2, r3
    40da:	68fb      	ldr	r3, [r7, #12]
    40dc:	601a      	str	r2, [r3, #0]
}
    40de:	46c0      	nop			; (mov r8, r8)
    40e0:	46bd      	mov	sp, r7
    40e2:	b004      	add	sp, #16
    40e4:	bd80      	pop	{r7, pc}
    40e6:	46c0      	nop			; (mov r8, r8)
    40e8:	00003dc1 	.word	0x00003dc1
    40ec:	00004029 	.word	0x00004029
    40f0:	00004085 	.word	0x00004085

000040f4 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    40f4:	b580      	push	{r7, lr}
    40f6:	b084      	sub	sp, #16
    40f8:	af00      	add	r7, sp, #0
    40fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    40fc:	687b      	ldr	r3, [r7, #4]
    40fe:	681b      	ldr	r3, [r3, #0]
    4100:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    4102:	687b      	ldr	r3, [r7, #4]
    4104:	681b      	ldr	r3, [r3, #0]
    4106:	0018      	movs	r0, r3
    4108:	4b0e      	ldr	r3, [pc, #56]	; (4144 <spi_disable+0x50>)
    410a:	4798      	blx	r3
    410c:	0003      	movs	r3, r0
    410e:	0018      	movs	r0, r3
    4110:	4b0d      	ldr	r3, [pc, #52]	; (4148 <spi_disable+0x54>)
    4112:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    4114:	46c0      	nop			; (mov r8, r8)
    4116:	687b      	ldr	r3, [r7, #4]
    4118:	0018      	movs	r0, r3
    411a:	4b0c      	ldr	r3, [pc, #48]	; (414c <spi_disable+0x58>)
    411c:	4798      	blx	r3
    411e:	1e03      	subs	r3, r0, #0
    4120:	d1f9      	bne.n	4116 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    4122:	68fb      	ldr	r3, [r7, #12]
    4124:	228f      	movs	r2, #143	; 0x8f
    4126:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4128:	68fb      	ldr	r3, [r7, #12]
    412a:	228f      	movs	r2, #143	; 0x8f
    412c:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    412e:	68fb      	ldr	r3, [r7, #12]
    4130:	681b      	ldr	r3, [r3, #0]
    4132:	2202      	movs	r2, #2
    4134:	4393      	bics	r3, r2
    4136:	001a      	movs	r2, r3
    4138:	68fb      	ldr	r3, [r7, #12]
    413a:	601a      	str	r2, [r3, #0]
}
    413c:	46c0      	nop			; (mov r8, r8)
    413e:	46bd      	mov	sp, r7
    4140:	b004      	add	sp, #16
    4142:	bd80      	pop	{r7, pc}
    4144:	00003dc1 	.word	0x00003dc1
    4148:	00004055 	.word	0x00004055
    414c:	00004085 	.word	0x00004085

00004150 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    4150:	b580      	push	{r7, lr}
    4152:	b084      	sub	sp, #16
    4154:	af00      	add	r7, sp, #0
    4156:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4158:	687b      	ldr	r3, [r7, #4]
    415a:	681b      	ldr	r3, [r3, #0]
    415c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    415e:	68fb      	ldr	r3, [r7, #12]
    4160:	7e1b      	ldrb	r3, [r3, #24]
    4162:	b2db      	uxtb	r3, r3
    4164:	001a      	movs	r2, r3
    4166:	2302      	movs	r3, #2
    4168:	4013      	ands	r3, r2
    416a:	1e5a      	subs	r2, r3, #1
    416c:	4193      	sbcs	r3, r2
    416e:	b2db      	uxtb	r3, r3
}
    4170:	0018      	movs	r0, r3
    4172:	46bd      	mov	sp, r7
    4174:	b004      	add	sp, #16
    4176:	bd80      	pop	{r7, pc}

00004178 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    4178:	b580      	push	{r7, lr}
    417a:	b084      	sub	sp, #16
    417c:	af00      	add	r7, sp, #0
    417e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	681b      	ldr	r3, [r3, #0]
    4184:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4186:	68fb      	ldr	r3, [r7, #12]
    4188:	7e1b      	ldrb	r3, [r3, #24]
    418a:	b2db      	uxtb	r3, r3
    418c:	001a      	movs	r2, r3
    418e:	2301      	movs	r3, #1
    4190:	4013      	ands	r3, r2
    4192:	1e5a      	subs	r2, r3, #1
    4194:	4193      	sbcs	r3, r2
    4196:	b2db      	uxtb	r3, r3
}
    4198:	0018      	movs	r0, r3
    419a:	46bd      	mov	sp, r7
    419c:	b004      	add	sp, #16
    419e:	bd80      	pop	{r7, pc}

000041a0 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    41a0:	b580      	push	{r7, lr}
    41a2:	b084      	sub	sp, #16
    41a4:	af00      	add	r7, sp, #0
    41a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	681b      	ldr	r3, [r3, #0]
    41ac:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    41ae:	68fb      	ldr	r3, [r7, #12]
    41b0:	7e1b      	ldrb	r3, [r3, #24]
    41b2:	b2db      	uxtb	r3, r3
    41b4:	001a      	movs	r2, r3
    41b6:	2304      	movs	r3, #4
    41b8:	4013      	ands	r3, r2
    41ba:	1e5a      	subs	r2, r3, #1
    41bc:	4193      	sbcs	r3, r2
    41be:	b2db      	uxtb	r3, r3
}
    41c0:	0018      	movs	r0, r3
    41c2:	46bd      	mov	sp, r7
    41c4:	b004      	add	sp, #16
    41c6:	bd80      	pop	{r7, pc}

000041c8 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    41c8:	b580      	push	{r7, lr}
    41ca:	b084      	sub	sp, #16
    41cc:	af00      	add	r7, sp, #0
    41ce:	6078      	str	r0, [r7, #4]
    41d0:	000a      	movs	r2, r1
    41d2:	1cbb      	adds	r3, r7, #2
    41d4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    41d6:	687b      	ldr	r3, [r7, #4]
    41d8:	681b      	ldr	r3, [r3, #0]
    41da:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    41dc:	687b      	ldr	r3, [r7, #4]
    41de:	0018      	movs	r0, r3
    41e0:	4b0a      	ldr	r3, [pc, #40]	; (420c <spi_write+0x44>)
    41e2:	4798      	blx	r3
    41e4:	0003      	movs	r3, r0
    41e6:	001a      	movs	r2, r3
    41e8:	2301      	movs	r3, #1
    41ea:	4053      	eors	r3, r2
    41ec:	b2db      	uxtb	r3, r3
    41ee:	2b00      	cmp	r3, #0
    41f0:	d001      	beq.n	41f6 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    41f2:	2305      	movs	r3, #5
    41f4:	e006      	b.n	4204 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    41f6:	1cbb      	adds	r3, r7, #2
    41f8:	881b      	ldrh	r3, [r3, #0]
    41fa:	05db      	lsls	r3, r3, #23
    41fc:	0dda      	lsrs	r2, r3, #23
    41fe:	68fb      	ldr	r3, [r7, #12]
    4200:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    4202:	2300      	movs	r3, #0
}
    4204:	0018      	movs	r0, r3
    4206:	46bd      	mov	sp, r7
    4208:	b004      	add	sp, #16
    420a:	bd80      	pop	{r7, pc}
    420c:	00004179 	.word	0x00004179

00004210 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    4210:	b580      	push	{r7, lr}
    4212:	b084      	sub	sp, #16
    4214:	af00      	add	r7, sp, #0
    4216:	6078      	str	r0, [r7, #4]
    4218:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    421a:	687b      	ldr	r3, [r7, #4]
    421c:	681b      	ldr	r3, [r3, #0]
    421e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4220:	687b      	ldr	r3, [r7, #4]
    4222:	0018      	movs	r0, r3
    4224:	4b1b      	ldr	r3, [pc, #108]	; (4294 <spi_read+0x84>)
    4226:	4798      	blx	r3
    4228:	0003      	movs	r3, r0
    422a:	001a      	movs	r2, r3
    422c:	2301      	movs	r3, #1
    422e:	4053      	eors	r3, r2
    4230:	b2db      	uxtb	r3, r3
    4232:	2b00      	cmp	r3, #0
    4234:	d001      	beq.n	423a <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    4236:	2310      	movs	r3, #16
    4238:	e027      	b.n	428a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    423a:	230f      	movs	r3, #15
    423c:	18fb      	adds	r3, r7, r3
    423e:	2200      	movs	r2, #0
    4240:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4242:	68bb      	ldr	r3, [r7, #8]
    4244:	8b5b      	ldrh	r3, [r3, #26]
    4246:	b29b      	uxth	r3, r3
    4248:	001a      	movs	r2, r3
    424a:	2304      	movs	r3, #4
    424c:	4013      	ands	r3, r2
    424e:	d006      	beq.n	425e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    4250:	230f      	movs	r3, #15
    4252:	18fb      	adds	r3, r7, r3
    4254:	221e      	movs	r2, #30
    4256:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4258:	68bb      	ldr	r3, [r7, #8]
    425a:	2204      	movs	r2, #4
    425c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    425e:	687b      	ldr	r3, [r7, #4]
    4260:	799b      	ldrb	r3, [r3, #6]
    4262:	2b01      	cmp	r3, #1
    4264:	d108      	bne.n	4278 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4266:	68bb      	ldr	r3, [r7, #8]
    4268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    426a:	b29b      	uxth	r3, r3
    426c:	05db      	lsls	r3, r3, #23
    426e:	0ddb      	lsrs	r3, r3, #23
    4270:	b29a      	uxth	r2, r3
    4272:	683b      	ldr	r3, [r7, #0]
    4274:	801a      	strh	r2, [r3, #0]
    4276:	e005      	b.n	4284 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4278:	68bb      	ldr	r3, [r7, #8]
    427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    427c:	b2db      	uxtb	r3, r3
    427e:	b29a      	uxth	r2, r3
    4280:	683b      	ldr	r3, [r7, #0]
    4282:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    4284:	230f      	movs	r3, #15
    4286:	18fb      	adds	r3, r7, r3
    4288:	781b      	ldrb	r3, [r3, #0]
}
    428a:	0018      	movs	r0, r3
    428c:	46bd      	mov	sp, r7
    428e:	b004      	add	sp, #16
    4290:	bd80      	pop	{r7, pc}
    4292:	46c0      	nop			; (mov r8, r8)
    4294:	000041a1 	.word	0x000041a1

00004298 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    4298:	b580      	push	{r7, lr}
    429a:	b084      	sub	sp, #16
    429c:	af00      	add	r7, sp, #0
    429e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    42a0:	687b      	ldr	r3, [r7, #4]
    42a2:	681b      	ldr	r3, [r3, #0]
    42a4:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
    42a6:	687b      	ldr	r3, [r7, #4]
    42a8:	0018      	movs	r0, r3
    42aa:	4b09      	ldr	r3, [pc, #36]	; (42d0 <spi_reset+0x38>)
    42ac:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    42ae:	46c0      	nop			; (mov r8, r8)
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	0018      	movs	r0, r3
    42b4:	4b07      	ldr	r3, [pc, #28]	; (42d4 <spi_reset+0x3c>)
    42b6:	4798      	blx	r3
    42b8:	1e03      	subs	r3, r0, #0
    42ba:	d1f9      	bne.n	42b0 <spi_reset+0x18>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    42bc:	68fb      	ldr	r3, [r7, #12]
    42be:	681b      	ldr	r3, [r3, #0]
    42c0:	2201      	movs	r2, #1
    42c2:	431a      	orrs	r2, r3
    42c4:	68fb      	ldr	r3, [r7, #12]
    42c6:	601a      	str	r2, [r3, #0]
}
    42c8:	46c0      	nop			; (mov r8, r8)
    42ca:	46bd      	mov	sp, r7
    42cc:	b004      	add	sp, #16
    42ce:	bd80      	pop	{r7, pc}
    42d0:	000040f5 	.word	0x000040f5
    42d4:	00004085 	.word	0x00004085

000042d8 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    42d8:	b590      	push	{r4, r7, lr}
    42da:	b089      	sub	sp, #36	; 0x24
    42dc:	af00      	add	r7, sp, #0
    42de:	6078      	str	r0, [r7, #4]
    42e0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    42e2:	230c      	movs	r3, #12
    42e4:	18fb      	adds	r3, r7, r3
    42e6:	2200      	movs	r2, #0
    42e8:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    42ea:	687b      	ldr	r3, [r7, #4]
    42ec:	681b      	ldr	r3, [r3, #0]
    42ee:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
    42f0:	687b      	ldr	r3, [r7, #4]
    42f2:	0018      	movs	r0, r3
    42f4:	4b24      	ldr	r3, [pc, #144]	; (4388 <spi_set_baudrate+0xb0>)
    42f6:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    42f8:	46c0      	nop			; (mov r8, r8)
    42fa:	687b      	ldr	r3, [r7, #4]
    42fc:	0018      	movs	r0, r3
    42fe:	4b23      	ldr	r3, [pc, #140]	; (438c <spi_set_baudrate+0xb4>)
    4300:	4798      	blx	r3
    4302:	1e03      	subs	r3, r0, #0
    4304:	d1f9      	bne.n	42fa <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4306:	687b      	ldr	r3, [r7, #4]
    4308:	681b      	ldr	r3, [r3, #0]
    430a:	0018      	movs	r0, r3
    430c:	4b20      	ldr	r3, [pc, #128]	; (4390 <spi_set_baudrate+0xb8>)
    430e:	4798      	blx	r3
    4310:	0003      	movs	r3, r0
    4312:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4314:	69bb      	ldr	r3, [r7, #24]
    4316:	3314      	adds	r3, #20
    4318:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    431a:	697b      	ldr	r3, [r7, #20]
    431c:	b2db      	uxtb	r3, r3
    431e:	0018      	movs	r0, r3
    4320:	4b1c      	ldr	r3, [pc, #112]	; (4394 <spi_set_baudrate+0xbc>)
    4322:	4798      	blx	r3
    4324:	0003      	movs	r3, r0
    4326:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    4328:	230f      	movs	r3, #15
    432a:	18fc      	adds	r4, r7, r3
    432c:	230c      	movs	r3, #12
    432e:	18fa      	adds	r2, r7, r3
    4330:	6939      	ldr	r1, [r7, #16]
    4332:	683b      	ldr	r3, [r7, #0]
    4334:	0018      	movs	r0, r3
    4336:	4b18      	ldr	r3, [pc, #96]	; (4398 <spi_set_baudrate+0xc0>)
    4338:	4798      	blx	r3
    433a:	0003      	movs	r3, r0
    433c:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    433e:	230f      	movs	r3, #15
    4340:	18fb      	adds	r3, r7, r3
    4342:	781b      	ldrb	r3, [r3, #0]
    4344:	2b00      	cmp	r3, #0
    4346:	d001      	beq.n	434c <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    4348:	2317      	movs	r3, #23
    434a:	e018      	b.n	437e <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
    434c:	230c      	movs	r3, #12
    434e:	18fb      	adds	r3, r7, r3
    4350:	881b      	ldrh	r3, [r3, #0]
    4352:	b2da      	uxtb	r2, r3
    4354:	69fb      	ldr	r3, [r7, #28]
    4356:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
    4358:	46c0      	nop			; (mov r8, r8)
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	0018      	movs	r0, r3
    435e:	4b0b      	ldr	r3, [pc, #44]	; (438c <spi_set_baudrate+0xb4>)
    4360:	4798      	blx	r3
    4362:	1e03      	subs	r3, r0, #0
    4364:	d1f9      	bne.n	435a <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
    4366:	687b      	ldr	r3, [r7, #4]
    4368:	0018      	movs	r0, r3
    436a:	4b0c      	ldr	r3, [pc, #48]	; (439c <spi_set_baudrate+0xc4>)
    436c:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    436e:	46c0      	nop			; (mov r8, r8)
    4370:	687b      	ldr	r3, [r7, #4]
    4372:	0018      	movs	r0, r3
    4374:	4b05      	ldr	r3, [pc, #20]	; (438c <spi_set_baudrate+0xb4>)
    4376:	4798      	blx	r3
    4378:	1e03      	subs	r3, r0, #0
    437a:	d1f9      	bne.n	4370 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
    437c:	2300      	movs	r3, #0
}
    437e:	0018      	movs	r0, r3
    4380:	46bd      	mov	sp, r7
    4382:	b009      	add	sp, #36	; 0x24
    4384:	bd90      	pop	{r4, r7, pc}
    4386:	46c0      	nop			; (mov r8, r8)
    4388:	000040f5 	.word	0x000040f5
    438c:	00004085 	.word	0x00004085
    4390:	00003cf1 	.word	0x00003cf1
    4394:	00006929 	.word	0x00006929
    4398:	0000386b 	.word	0x0000386b
    439c:	000040a5 	.word	0x000040a5

000043a0 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    43a0:	b590      	push	{r4, r7, lr}
    43a2:	b093      	sub	sp, #76	; 0x4c
    43a4:	af00      	add	r7, sp, #0
    43a6:	6078      	str	r0, [r7, #4]
    43a8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43aa:	687b      	ldr	r3, [r7, #4]
    43ac:	681b      	ldr	r3, [r3, #0]
    43ae:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	681b      	ldr	r3, [r3, #0]
    43b4:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    43b6:	231c      	movs	r3, #28
    43b8:	18fb      	adds	r3, r7, r3
    43ba:	0018      	movs	r0, r3
    43bc:	4b75      	ldr	r3, [pc, #468]	; (4594 <_spi_set_config+0x1f4>)
    43be:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    43c0:	231c      	movs	r3, #28
    43c2:	18fb      	adds	r3, r7, r3
    43c4:	2200      	movs	r2, #0
    43c6:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    43c8:	683b      	ldr	r3, [r7, #0]
    43ca:	781b      	ldrb	r3, [r3, #0]
    43cc:	2b00      	cmp	r3, #0
    43ce:	d103      	bne.n	43d8 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    43d0:	231c      	movs	r3, #28
    43d2:	18fb      	adds	r3, r7, r3
    43d4:	2200      	movs	r2, #0
    43d6:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    43d8:	683b      	ldr	r3, [r7, #0]
    43da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    43dc:	230c      	movs	r3, #12
    43de:	18fb      	adds	r3, r7, r3
    43e0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    43e2:	683b      	ldr	r3, [r7, #0]
    43e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    43e6:	230c      	movs	r3, #12
    43e8:	18fb      	adds	r3, r7, r3
    43ea:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    43ec:	683b      	ldr	r3, [r7, #0]
    43ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    43f0:	230c      	movs	r3, #12
    43f2:	18fb      	adds	r3, r7, r3
    43f4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    43f6:	683b      	ldr	r3, [r7, #0]
    43f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    43fa:	230c      	movs	r3, #12
    43fc:	18fb      	adds	r3, r7, r3
    43fe:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4400:	2347      	movs	r3, #71	; 0x47
    4402:	18fb      	adds	r3, r7, r3
    4404:	2200      	movs	r2, #0
    4406:	701a      	strb	r2, [r3, #0]
    4408:	e02c      	b.n	4464 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    440a:	2347      	movs	r3, #71	; 0x47
    440c:	18fb      	adds	r3, r7, r3
    440e:	781a      	ldrb	r2, [r3, #0]
    4410:	230c      	movs	r3, #12
    4412:	18fb      	adds	r3, r7, r3
    4414:	0092      	lsls	r2, r2, #2
    4416:	58d3      	ldr	r3, [r2, r3]
    4418:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    441a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    441c:	2b00      	cmp	r3, #0
    441e:	d109      	bne.n	4434 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4420:	2347      	movs	r3, #71	; 0x47
    4422:	18fb      	adds	r3, r7, r3
    4424:	781a      	ldrb	r2, [r3, #0]
    4426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4428:	0011      	movs	r1, r2
    442a:	0018      	movs	r0, r3
    442c:	4b5a      	ldr	r3, [pc, #360]	; (4598 <_spi_set_config+0x1f8>)
    442e:	4798      	blx	r3
    4430:	0003      	movs	r3, r0
    4432:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4436:	3301      	adds	r3, #1
    4438:	d00d      	beq.n	4456 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    443a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    443c:	b2da      	uxtb	r2, r3
    443e:	231c      	movs	r3, #28
    4440:	18fb      	adds	r3, r7, r3
    4442:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4446:	0c1b      	lsrs	r3, r3, #16
    4448:	b2db      	uxtb	r3, r3
    444a:	221c      	movs	r2, #28
    444c:	18ba      	adds	r2, r7, r2
    444e:	0011      	movs	r1, r2
    4450:	0018      	movs	r0, r3
    4452:	4b52      	ldr	r3, [pc, #328]	; (459c <_spi_set_config+0x1fc>)
    4454:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    4456:	2347      	movs	r3, #71	; 0x47
    4458:	18fb      	adds	r3, r7, r3
    445a:	781a      	ldrb	r2, [r3, #0]
    445c:	2347      	movs	r3, #71	; 0x47
    445e:	18fb      	adds	r3, r7, r3
    4460:	3201      	adds	r2, #1
    4462:	701a      	strb	r2, [r3, #0]
    4464:	2347      	movs	r3, #71	; 0x47
    4466:	18fb      	adds	r3, r7, r3
    4468:	781b      	ldrb	r3, [r3, #0]
    446a:	2b03      	cmp	r3, #3
    446c:	d9cd      	bls.n	440a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    446e:	683b      	ldr	r3, [r7, #0]
    4470:	781a      	ldrb	r2, [r3, #0]
    4472:	687b      	ldr	r3, [r7, #4]
    4474:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    4476:	683b      	ldr	r3, [r7, #0]
    4478:	7c1a      	ldrb	r2, [r3, #16]
    447a:	687b      	ldr	r3, [r7, #4]
    447c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    447e:	683b      	ldr	r3, [r7, #0]
    4480:	7c9a      	ldrb	r2, [r3, #18]
    4482:	687b      	ldr	r3, [r7, #4]
    4484:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    4486:	683b      	ldr	r3, [r7, #0]
    4488:	7d1a      	ldrb	r2, [r3, #20]
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    448e:	230a      	movs	r3, #10
    4490:	18fb      	adds	r3, r7, r3
    4492:	2200      	movs	r2, #0
    4494:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    4496:	2300      	movs	r3, #0
    4498:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    449a:	2300      	movs	r3, #0
    449c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    449e:	683b      	ldr	r3, [r7, #0]
    44a0:	781b      	ldrb	r3, [r3, #0]
    44a2:	2b01      	cmp	r3, #1
    44a4:	d129      	bne.n	44fa <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    44a6:	687b      	ldr	r3, [r7, #4]
    44a8:	681b      	ldr	r3, [r3, #0]
    44aa:	0018      	movs	r0, r3
    44ac:	4b3c      	ldr	r3, [pc, #240]	; (45a0 <_spi_set_config+0x200>)
    44ae:	4798      	blx	r3
    44b0:	0003      	movs	r3, r0
    44b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    44b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    44b6:	3314      	adds	r3, #20
    44b8:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    44ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    44bc:	b2db      	uxtb	r3, r3
    44be:	0018      	movs	r0, r3
    44c0:	4b38      	ldr	r3, [pc, #224]	; (45a4 <_spi_set_config+0x204>)
    44c2:	4798      	blx	r3
    44c4:	0003      	movs	r3, r0
    44c6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    44c8:	683b      	ldr	r3, [r7, #0]
    44ca:	699b      	ldr	r3, [r3, #24]
    44cc:	2223      	movs	r2, #35	; 0x23
    44ce:	18bc      	adds	r4, r7, r2
    44d0:	220a      	movs	r2, #10
    44d2:	18ba      	adds	r2, r7, r2
    44d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    44d6:	0018      	movs	r0, r3
    44d8:	4b33      	ldr	r3, [pc, #204]	; (45a8 <_spi_set_config+0x208>)
    44da:	4798      	blx	r3
    44dc:	0003      	movs	r3, r0
    44de:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    44e0:	2323      	movs	r3, #35	; 0x23
    44e2:	18fb      	adds	r3, r7, r3
    44e4:	781b      	ldrb	r3, [r3, #0]
    44e6:	2b00      	cmp	r3, #0
    44e8:	d001      	beq.n	44ee <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    44ea:	2317      	movs	r3, #23
    44ec:	e04e      	b.n	458c <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    44ee:	230a      	movs	r3, #10
    44f0:	18fb      	adds	r3, r7, r3
    44f2:	881b      	ldrh	r3, [r3, #0]
    44f4:	b2da      	uxtb	r2, r3
    44f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    44f8:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    44fa:	683b      	ldr	r3, [r7, #0]
    44fc:	685b      	ldr	r3, [r3, #4]
    44fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4500:	4313      	orrs	r3, r2
    4502:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    4504:	683b      	ldr	r3, [r7, #0]
    4506:	689b      	ldr	r3, [r3, #8]
    4508:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    450a:	4313      	orrs	r3, r2
    450c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    450e:	683b      	ldr	r3, [r7, #0]
    4510:	68db      	ldr	r3, [r3, #12]
    4512:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4514:	4313      	orrs	r3, r2
    4516:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    4518:	683b      	ldr	r3, [r7, #0]
    451a:	7c1b      	ldrb	r3, [r3, #16]
    451c:	001a      	movs	r2, r3
    451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4520:	4313      	orrs	r3, r2
    4522:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4524:	683b      	ldr	r3, [r7, #0]
    4526:	7c5b      	ldrb	r3, [r3, #17]
    4528:	2b00      	cmp	r3, #0
    452a:	d103      	bne.n	4534 <_spi_set_config+0x194>
    452c:	4b1f      	ldr	r3, [pc, #124]	; (45ac <_spi_set_config+0x20c>)
    452e:	4798      	blx	r3
    4530:	1e03      	subs	r3, r0, #0
    4532:	d003      	beq.n	453c <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4536:	2280      	movs	r2, #128	; 0x80
    4538:	4313      	orrs	r3, r2
    453a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    453c:	683b      	ldr	r3, [r7, #0]
    453e:	7c9b      	ldrb	r3, [r3, #18]
    4540:	2b00      	cmp	r3, #0
    4542:	d004      	beq.n	454e <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4546:	2280      	movs	r2, #128	; 0x80
    4548:	0292      	lsls	r2, r2, #10
    454a:	4313      	orrs	r3, r2
    454c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    454e:	683b      	ldr	r3, [r7, #0]
    4550:	7cdb      	ldrb	r3, [r3, #19]
    4552:	2b00      	cmp	r3, #0
    4554:	d004      	beq.n	4560 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4558:	2280      	movs	r2, #128	; 0x80
    455a:	0092      	lsls	r2, r2, #2
    455c:	4313      	orrs	r3, r2
    455e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    4560:	683b      	ldr	r3, [r7, #0]
    4562:	7d1b      	ldrb	r3, [r3, #20]
    4564:	2b00      	cmp	r3, #0
    4566:	d004      	beq.n	4572 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    456a:	2280      	movs	r2, #128	; 0x80
    456c:	0192      	lsls	r2, r2, #6
    456e:	4313      	orrs	r3, r2
    4570:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    4572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4574:	681a      	ldr	r2, [r3, #0]
    4576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4578:	431a      	orrs	r2, r3
    457a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    457c:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    457e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4580:	685a      	ldr	r2, [r3, #4]
    4582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4584:	431a      	orrs	r2, r3
    4586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4588:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    458a:	2300      	movs	r3, #0
}
    458c:	0018      	movs	r0, r3
    458e:	46bd      	mov	sp, r7
    4590:	b013      	add	sp, #76	; 0x4c
    4592:	bd90      	pop	{r4, r7, pc}
    4594:	00003e95 	.word	0x00003e95
    4598:	00003b35 	.word	0x00003b35
    459c:	00006af1 	.word	0x00006af1
    45a0:	00003cf1 	.word	0x00003cf1
    45a4:	00006929 	.word	0x00006929
    45a8:	0000386b 	.word	0x0000386b
    45ac:	00004009 	.word	0x00004009

000045b0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    45b0:	b590      	push	{r4, r7, lr}
    45b2:	b08b      	sub	sp, #44	; 0x2c
    45b4:	af00      	add	r7, sp, #0
    45b6:	60f8      	str	r0, [r7, #12]
    45b8:	60b9      	str	r1, [r7, #8]
    45ba:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    45bc:	68fb      	ldr	r3, [r7, #12]
    45be:	68ba      	ldr	r2, [r7, #8]
    45c0:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    45c2:	68fb      	ldr	r3, [r7, #12]
    45c4:	681b      	ldr	r3, [r3, #0]
    45c6:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    45c8:	6a3b      	ldr	r3, [r7, #32]
    45ca:	681b      	ldr	r3, [r3, #0]
    45cc:	2202      	movs	r2, #2
    45ce:	4013      	ands	r3, r2
    45d0:	d001      	beq.n	45d6 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    45d2:	231c      	movs	r3, #28
    45d4:	e09c      	b.n	4710 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    45d6:	6a3b      	ldr	r3, [r7, #32]
    45d8:	681b      	ldr	r3, [r3, #0]
    45da:	2201      	movs	r2, #1
    45dc:	4013      	ands	r3, r2
    45de:	d001      	beq.n	45e4 <spi_init+0x34>
		return STATUS_BUSY;
    45e0:	2305      	movs	r3, #5
    45e2:	e095      	b.n	4710 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    45e4:	68fb      	ldr	r3, [r7, #12]
    45e6:	681b      	ldr	r3, [r3, #0]
    45e8:	0018      	movs	r0, r3
    45ea:	4b4b      	ldr	r3, [pc, #300]	; (4718 <spi_init+0x168>)
    45ec:	4798      	blx	r3
    45ee:	0003      	movs	r3, r0
    45f0:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    45f2:	69fb      	ldr	r3, [r7, #28]
    45f4:	3302      	adds	r3, #2
    45f6:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    45f8:	69fb      	ldr	r3, [r7, #28]
    45fa:	3314      	adds	r3, #20
    45fc:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    45fe:	2201      	movs	r2, #1
    4600:	69bb      	ldr	r3, [r7, #24]
    4602:	409a      	lsls	r2, r3
    4604:	0013      	movs	r3, r2
    4606:	0019      	movs	r1, r3
    4608:	2002      	movs	r0, #2
    460a:	4b44      	ldr	r3, [pc, #272]	; (471c <spi_init+0x16c>)
    460c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    460e:	2310      	movs	r3, #16
    4610:	18fb      	adds	r3, r7, r3
    4612:	0018      	movs	r0, r3
    4614:	4b42      	ldr	r3, [pc, #264]	; (4720 <spi_init+0x170>)
    4616:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4618:	687b      	ldr	r3, [r7, #4]
    461a:	2224      	movs	r2, #36	; 0x24
    461c:	5c9a      	ldrb	r2, [r3, r2]
    461e:	2310      	movs	r3, #16
    4620:	18fb      	adds	r3, r7, r3
    4622:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4624:	697b      	ldr	r3, [r7, #20]
    4626:	b2db      	uxtb	r3, r3
    4628:	2210      	movs	r2, #16
    462a:	18ba      	adds	r2, r7, r2
    462c:	0011      	movs	r1, r2
    462e:	0018      	movs	r0, r3
    4630:	4b3c      	ldr	r3, [pc, #240]	; (4724 <spi_init+0x174>)
    4632:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4634:	697b      	ldr	r3, [r7, #20]
    4636:	b2db      	uxtb	r3, r3
    4638:	0018      	movs	r0, r3
    463a:	4b3b      	ldr	r3, [pc, #236]	; (4728 <spi_init+0x178>)
    463c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    463e:	687b      	ldr	r3, [r7, #4]
    4640:	2224      	movs	r2, #36	; 0x24
    4642:	5c9b      	ldrb	r3, [r3, r2]
    4644:	2100      	movs	r1, #0
    4646:	0018      	movs	r0, r3
    4648:	4b38      	ldr	r3, [pc, #224]	; (472c <spi_init+0x17c>)
    464a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    464c:	687b      	ldr	r3, [r7, #4]
    464e:	781b      	ldrb	r3, [r3, #0]
    4650:	2b01      	cmp	r3, #1
    4652:	d105      	bne.n	4660 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4654:	6a3b      	ldr	r3, [r7, #32]
    4656:	681b      	ldr	r3, [r3, #0]
    4658:	220c      	movs	r2, #12
    465a:	431a      	orrs	r2, r3
    465c:	6a3b      	ldr	r3, [r7, #32]
    465e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4660:	2327      	movs	r3, #39	; 0x27
    4662:	18fb      	adds	r3, r7, r3
    4664:	2200      	movs	r2, #0
    4666:	701a      	strb	r2, [r3, #0]
    4668:	e010      	b.n	468c <spi_init+0xdc>
		module->callback[i]        = NULL;
    466a:	2327      	movs	r3, #39	; 0x27
    466c:	18fb      	adds	r3, r7, r3
    466e:	781b      	ldrb	r3, [r3, #0]
    4670:	68fa      	ldr	r2, [r7, #12]
    4672:	3302      	adds	r3, #2
    4674:	009b      	lsls	r3, r3, #2
    4676:	18d3      	adds	r3, r2, r3
    4678:	3304      	adds	r3, #4
    467a:	2200      	movs	r2, #0
    467c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    467e:	2327      	movs	r3, #39	; 0x27
    4680:	18fb      	adds	r3, r7, r3
    4682:	781a      	ldrb	r2, [r3, #0]
    4684:	2327      	movs	r3, #39	; 0x27
    4686:	18fb      	adds	r3, r7, r3
    4688:	3201      	adds	r2, #1
    468a:	701a      	strb	r2, [r3, #0]
    468c:	2327      	movs	r3, #39	; 0x27
    468e:	18fb      	adds	r3, r7, r3
    4690:	781b      	ldrb	r3, [r3, #0]
    4692:	2b06      	cmp	r3, #6
    4694:	d9e9      	bls.n	466a <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    4696:	68fb      	ldr	r3, [r7, #12]
    4698:	2200      	movs	r2, #0
    469a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    469c:	68fb      	ldr	r3, [r7, #12]
    469e:	2200      	movs	r2, #0
    46a0:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    46a2:	68fb      	ldr	r3, [r7, #12]
    46a4:	2200      	movs	r2, #0
    46a6:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    46a8:	68fb      	ldr	r3, [r7, #12]
    46aa:	2200      	movs	r2, #0
    46ac:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    46ae:	68fb      	ldr	r3, [r7, #12]
    46b0:	2236      	movs	r2, #54	; 0x36
    46b2:	2100      	movs	r1, #0
    46b4:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    46b6:	68fb      	ldr	r3, [r7, #12]
    46b8:	2237      	movs	r2, #55	; 0x37
    46ba:	2100      	movs	r1, #0
    46bc:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    46be:	68fb      	ldr	r3, [r7, #12]
    46c0:	2238      	movs	r2, #56	; 0x38
    46c2:	2100      	movs	r1, #0
    46c4:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    46c6:	68fb      	ldr	r3, [r7, #12]
    46c8:	2203      	movs	r2, #3
    46ca:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    46cc:	68fb      	ldr	r3, [r7, #12]
    46ce:	2200      	movs	r2, #0
    46d0:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    46d2:	68fb      	ldr	r3, [r7, #12]
    46d4:	681b      	ldr	r3, [r3, #0]
    46d6:	2213      	movs	r2, #19
    46d8:	18bc      	adds	r4, r7, r2
    46da:	0018      	movs	r0, r3
    46dc:	4b0e      	ldr	r3, [pc, #56]	; (4718 <spi_init+0x168>)
    46de:	4798      	blx	r3
    46e0:	0003      	movs	r3, r0
    46e2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    46e4:	4a12      	ldr	r2, [pc, #72]	; (4730 <spi_init+0x180>)
    46e6:	2313      	movs	r3, #19
    46e8:	18fb      	adds	r3, r7, r3
    46ea:	781b      	ldrb	r3, [r3, #0]
    46ec:	0011      	movs	r1, r2
    46ee:	0018      	movs	r0, r3
    46f0:	4b10      	ldr	r3, [pc, #64]	; (4734 <spi_init+0x184>)
    46f2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    46f4:	2313      	movs	r3, #19
    46f6:	18fb      	adds	r3, r7, r3
    46f8:	781a      	ldrb	r2, [r3, #0]
    46fa:	4b0f      	ldr	r3, [pc, #60]	; (4738 <spi_init+0x188>)
    46fc:	0092      	lsls	r2, r2, #2
    46fe:	68f9      	ldr	r1, [r7, #12]
    4700:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    4702:	687a      	ldr	r2, [r7, #4]
    4704:	68fb      	ldr	r3, [r7, #12]
    4706:	0011      	movs	r1, r2
    4708:	0018      	movs	r0, r3
    470a:	4b0c      	ldr	r3, [pc, #48]	; (473c <spi_init+0x18c>)
    470c:	4798      	blx	r3
    470e:	0003      	movs	r3, r0
}
    4710:	0018      	movs	r0, r3
    4712:	46bd      	mov	sp, r7
    4714:	b00b      	add	sp, #44	; 0x2c
    4716:	bd90      	pop	{r4, r7, pc}
    4718:	00003cf1 	.word	0x00003cf1
    471c:	00003fad 	.word	0x00003fad
    4720:	00003f95 	.word	0x00003f95
    4724:	00006805 	.word	0x00006805
    4728:	00006849 	.word	0x00006849
    472c:	00003aa9 	.word	0x00003aa9
    4730:	00004c09 	.word	0x00004c09
    4734:	00003d55 	.word	0x00003d55
    4738:	200009d4 	.word	0x200009d4
    473c:	000043a1 	.word	0x000043a1

00004740 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    4740:	b590      	push	{r4, r7, lr}
    4742:	b087      	sub	sp, #28
    4744:	af00      	add	r7, sp, #0
    4746:	60f8      	str	r0, [r7, #12]
    4748:	60b9      	str	r1, [r7, #8]
    474a:	0019      	movs	r1, r3
    474c:	1dbb      	adds	r3, r7, #6
    474e:	801a      	strh	r2, [r3, #0]
    4750:	1d3b      	adds	r3, r7, #4
    4752:	1c0a      	adds	r2, r1, #0
    4754:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4756:	68fb      	ldr	r3, [r7, #12]
    4758:	2238      	movs	r2, #56	; 0x38
    475a:	5c9b      	ldrb	r3, [r3, r2]
    475c:	b2db      	uxtb	r3, r3
    475e:	2b05      	cmp	r3, #5
    4760:	d101      	bne.n	4766 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4762:	2305      	movs	r3, #5
    4764:	e07a      	b.n	485c <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    4766:	1dbb      	adds	r3, r7, #6
    4768:	881b      	ldrh	r3, [r3, #0]
    476a:	2b00      	cmp	r3, #0
    476c:	d101      	bne.n	4772 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    476e:	2317      	movs	r3, #23
    4770:	e074      	b.n	485c <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    4772:	68fb      	ldr	r3, [r7, #12]
    4774:	79db      	ldrb	r3, [r3, #7]
    4776:	2201      	movs	r2, #1
    4778:	4053      	eors	r3, r2
    477a:	b2db      	uxtb	r3, r3
    477c:	2b00      	cmp	r3, #0
    477e:	d001      	beq.n	4784 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    4780:	231c      	movs	r3, #28
    4782:	e06b      	b.n	485c <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    4784:	2316      	movs	r3, #22
    4786:	18fb      	adds	r3, r7, r3
    4788:	2200      	movs	r2, #0
    478a:	801a      	strh	r2, [r3, #0]

	while (length--) {
    478c:	e05e      	b.n	484c <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    478e:	68fb      	ldr	r3, [r7, #12]
    4790:	795b      	ldrb	r3, [r3, #5]
    4792:	2b01      	cmp	r3, #1
    4794:	d112      	bne.n	47bc <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    4796:	46c0      	nop			; (mov r8, r8)
    4798:	68fb      	ldr	r3, [r7, #12]
    479a:	0018      	movs	r0, r3
    479c:	4b31      	ldr	r3, [pc, #196]	; (4864 <spi_read_buffer_wait+0x124>)
    479e:	4798      	blx	r3
    47a0:	0003      	movs	r3, r0
    47a2:	001a      	movs	r2, r3
    47a4:	2301      	movs	r3, #1
    47a6:	4053      	eors	r3, r2
    47a8:	b2db      	uxtb	r3, r3
    47aa:	2b00      	cmp	r3, #0
    47ac:	d1f4      	bne.n	4798 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    47ae:	1d3b      	adds	r3, r7, #4
    47b0:	881a      	ldrh	r2, [r3, #0]
    47b2:	68fb      	ldr	r3, [r7, #12]
    47b4:	0011      	movs	r1, r2
    47b6:	0018      	movs	r0, r3
    47b8:	4b2b      	ldr	r3, [pc, #172]	; (4868 <spi_read_buffer_wait+0x128>)
    47ba:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    47bc:	46c0      	nop			; (mov r8, r8)
    47be:	68fb      	ldr	r3, [r7, #12]
    47c0:	0018      	movs	r0, r3
    47c2:	4b2a      	ldr	r3, [pc, #168]	; (486c <spi_read_buffer_wait+0x12c>)
    47c4:	4798      	blx	r3
    47c6:	0003      	movs	r3, r0
    47c8:	001a      	movs	r2, r3
    47ca:	2301      	movs	r3, #1
    47cc:	4053      	eors	r3, r2
    47ce:	b2db      	uxtb	r3, r3
    47d0:	2b00      	cmp	r3, #0
    47d2:	d1f4      	bne.n	47be <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    47d4:	2312      	movs	r3, #18
    47d6:	18fb      	adds	r3, r7, r3
    47d8:	2200      	movs	r2, #0
    47da:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    47dc:	2315      	movs	r3, #21
    47de:	18fc      	adds	r4, r7, r3
    47e0:	2312      	movs	r3, #18
    47e2:	18fa      	adds	r2, r7, r3
    47e4:	68fb      	ldr	r3, [r7, #12]
    47e6:	0011      	movs	r1, r2
    47e8:	0018      	movs	r0, r3
    47ea:	4b21      	ldr	r3, [pc, #132]	; (4870 <spi_read_buffer_wait+0x130>)
    47ec:	4798      	blx	r3
    47ee:	0003      	movs	r3, r0
    47f0:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    47f2:	2315      	movs	r3, #21
    47f4:	18fb      	adds	r3, r7, r3
    47f6:	781b      	ldrb	r3, [r3, #0]
    47f8:	2b00      	cmp	r3, #0
    47fa:	d003      	beq.n	4804 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    47fc:	2315      	movs	r3, #21
    47fe:	18fb      	adds	r3, r7, r3
    4800:	781b      	ldrb	r3, [r3, #0]
    4802:	e02b      	b.n	485c <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    4804:	2316      	movs	r3, #22
    4806:	18fb      	adds	r3, r7, r3
    4808:	881b      	ldrh	r3, [r3, #0]
    480a:	2216      	movs	r2, #22
    480c:	18ba      	adds	r2, r7, r2
    480e:	1c59      	adds	r1, r3, #1
    4810:	8011      	strh	r1, [r2, #0]
    4812:	001a      	movs	r2, r3
    4814:	68bb      	ldr	r3, [r7, #8]
    4816:	189b      	adds	r3, r3, r2
    4818:	2212      	movs	r2, #18
    481a:	18ba      	adds	r2, r7, r2
    481c:	8812      	ldrh	r2, [r2, #0]
    481e:	b2d2      	uxtb	r2, r2
    4820:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4822:	68fb      	ldr	r3, [r7, #12]
    4824:	799b      	ldrb	r3, [r3, #6]
    4826:	2b01      	cmp	r3, #1
    4828:	d110      	bne.n	484c <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    482a:	2316      	movs	r3, #22
    482c:	18fb      	adds	r3, r7, r3
    482e:	881b      	ldrh	r3, [r3, #0]
    4830:	2216      	movs	r2, #22
    4832:	18ba      	adds	r2, r7, r2
    4834:	1c59      	adds	r1, r3, #1
    4836:	8011      	strh	r1, [r2, #0]
    4838:	001a      	movs	r2, r3
    483a:	68bb      	ldr	r3, [r7, #8]
    483c:	189b      	adds	r3, r3, r2
    483e:	2212      	movs	r2, #18
    4840:	18ba      	adds	r2, r7, r2
    4842:	8812      	ldrh	r2, [r2, #0]
    4844:	0a12      	lsrs	r2, r2, #8
    4846:	b292      	uxth	r2, r2
    4848:	b2d2      	uxtb	r2, r2
    484a:	701a      	strb	r2, [r3, #0]
	while (length--) {
    484c:	1dbb      	adds	r3, r7, #6
    484e:	881b      	ldrh	r3, [r3, #0]
    4850:	1dba      	adds	r2, r7, #6
    4852:	1e59      	subs	r1, r3, #1
    4854:	8011      	strh	r1, [r2, #0]
    4856:	2b00      	cmp	r3, #0
    4858:	d199      	bne.n	478e <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    485a:	2300      	movs	r3, #0
}
    485c:	0018      	movs	r0, r3
    485e:	46bd      	mov	sp, r7
    4860:	b007      	add	sp, #28
    4862:	bd90      	pop	{r4, r7, pc}
    4864:	00004179 	.word	0x00004179
    4868:	000041c9 	.word	0x000041c9
    486c:	000041a1 	.word	0x000041a1
    4870:	00004211 	.word	0x00004211

00004874 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4874:	b580      	push	{r7, lr}
    4876:	b086      	sub	sp, #24
    4878:	af00      	add	r7, sp, #0
    487a:	60f8      	str	r0, [r7, #12]
    487c:	60b9      	str	r1, [r7, #8]
    487e:	1dfb      	adds	r3, r7, #7
    4880:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4882:	68fb      	ldr	r3, [r7, #12]
    4884:	795b      	ldrb	r3, [r3, #5]
    4886:	2b01      	cmp	r3, #1
    4888:	d001      	beq.n	488e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    488a:	2315      	movs	r3, #21
    488c:	e05c      	b.n	4948 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    488e:	68fb      	ldr	r3, [r7, #12]
    4890:	7a1b      	ldrb	r3, [r3, #8]
    4892:	2201      	movs	r2, #1
    4894:	4053      	eors	r3, r2
    4896:	b2db      	uxtb	r3, r3
    4898:	2b00      	cmp	r3, #0
    489a:	d054      	beq.n	4946 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    489c:	1dfb      	adds	r3, r7, #7
    489e:	781b      	ldrb	r3, [r3, #0]
    48a0:	2b00      	cmp	r3, #0
    48a2:	d04a      	beq.n	493a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    48a4:	68bb      	ldr	r3, [r7, #8]
    48a6:	785b      	ldrb	r3, [r3, #1]
    48a8:	2b00      	cmp	r3, #0
    48aa:	d03f      	beq.n	492c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    48ac:	68fb      	ldr	r3, [r7, #12]
    48ae:	0018      	movs	r0, r3
    48b0:	4b27      	ldr	r3, [pc, #156]	; (4950 <spi_select_slave+0xdc>)
    48b2:	4798      	blx	r3
    48b4:	0003      	movs	r3, r0
    48b6:	001a      	movs	r2, r3
    48b8:	2301      	movs	r3, #1
    48ba:	4053      	eors	r3, r2
    48bc:	b2db      	uxtb	r3, r3
    48be:	2b00      	cmp	r3, #0
    48c0:	d007      	beq.n	48d2 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    48c2:	68bb      	ldr	r3, [r7, #8]
    48c4:	781b      	ldrb	r3, [r3, #0]
    48c6:	2101      	movs	r1, #1
    48c8:	0018      	movs	r0, r3
    48ca:	4b22      	ldr	r3, [pc, #136]	; (4954 <spi_select_slave+0xe0>)
    48cc:	4798      	blx	r3
					return STATUS_BUSY;
    48ce:	2305      	movs	r3, #5
    48d0:	e03a      	b.n	4948 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    48d2:	68bb      	ldr	r3, [r7, #8]
    48d4:	781b      	ldrb	r3, [r3, #0]
    48d6:	2100      	movs	r1, #0
    48d8:	0018      	movs	r0, r3
    48da:	4b1e      	ldr	r3, [pc, #120]	; (4954 <spi_select_slave+0xe0>)
    48dc:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    48de:	68bb      	ldr	r3, [r7, #8]
    48e0:	789b      	ldrb	r3, [r3, #2]
    48e2:	b29a      	uxth	r2, r3
    48e4:	68fb      	ldr	r3, [r7, #12]
    48e6:	0011      	movs	r1, r2
    48e8:	0018      	movs	r0, r3
    48ea:	4b1b      	ldr	r3, [pc, #108]	; (4958 <spi_select_slave+0xe4>)
    48ec:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    48ee:	68fb      	ldr	r3, [r7, #12]
    48f0:	79db      	ldrb	r3, [r3, #7]
    48f2:	2201      	movs	r2, #1
    48f4:	4053      	eors	r3, r2
    48f6:	b2db      	uxtb	r3, r3
    48f8:	2b00      	cmp	r3, #0
    48fa:	d024      	beq.n	4946 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    48fc:	46c0      	nop			; (mov r8, r8)
    48fe:	68fb      	ldr	r3, [r7, #12]
    4900:	0018      	movs	r0, r3
    4902:	4b16      	ldr	r3, [pc, #88]	; (495c <spi_select_slave+0xe8>)
    4904:	4798      	blx	r3
    4906:	0003      	movs	r3, r0
    4908:	001a      	movs	r2, r3
    490a:	2301      	movs	r3, #1
    490c:	4053      	eors	r3, r2
    490e:	b2db      	uxtb	r3, r3
    4910:	2b00      	cmp	r3, #0
    4912:	d1f4      	bne.n	48fe <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    4914:	2316      	movs	r3, #22
    4916:	18fb      	adds	r3, r7, r3
    4918:	2200      	movs	r2, #0
    491a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    491c:	2316      	movs	r3, #22
    491e:	18fa      	adds	r2, r7, r3
    4920:	68fb      	ldr	r3, [r7, #12]
    4922:	0011      	movs	r1, r2
    4924:	0018      	movs	r0, r3
    4926:	4b0e      	ldr	r3, [pc, #56]	; (4960 <spi_select_slave+0xec>)
    4928:	4798      	blx	r3
    492a:	e00c      	b.n	4946 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    492c:	68bb      	ldr	r3, [r7, #8]
    492e:	781b      	ldrb	r3, [r3, #0]
    4930:	2100      	movs	r1, #0
    4932:	0018      	movs	r0, r3
    4934:	4b07      	ldr	r3, [pc, #28]	; (4954 <spi_select_slave+0xe0>)
    4936:	4798      	blx	r3
    4938:	e005      	b.n	4946 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    493a:	68bb      	ldr	r3, [r7, #8]
    493c:	781b      	ldrb	r3, [r3, #0]
    493e:	2101      	movs	r1, #1
    4940:	0018      	movs	r0, r3
    4942:	4b04      	ldr	r3, [pc, #16]	; (4954 <spi_select_slave+0xe0>)
    4944:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    4946:	2300      	movs	r3, #0
}
    4948:	0018      	movs	r0, r3
    494a:	46bd      	mov	sp, r7
    494c:	b006      	add	sp, #24
    494e:	bd80      	pop	{r7, pc}
    4950:	00004179 	.word	0x00004179
    4954:	00003f41 	.word	0x00003f41
    4958:	000041c9 	.word	0x000041c9
    495c:	000041a1 	.word	0x000041a1
    4960:	00004211 	.word	0x00004211

00004964 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    4964:	b580      	push	{r7, lr}
    4966:	b086      	sub	sp, #24
    4968:	af00      	add	r7, sp, #0
    496a:	60f8      	str	r0, [r7, #12]
    496c:	60b9      	str	r1, [r7, #8]
    496e:	1dbb      	adds	r3, r7, #6
    4970:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4972:	68fb      	ldr	r3, [r7, #12]
    4974:	2238      	movs	r2, #56	; 0x38
    4976:	5c9b      	ldrb	r3, [r3, r2]
    4978:	b2db      	uxtb	r3, r3
    497a:	2b05      	cmp	r3, #5
    497c:	d101      	bne.n	4982 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    497e:	2305      	movs	r3, #5
    4980:	e087      	b.n	4a92 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    4982:	1dbb      	adds	r3, r7, #6
    4984:	881b      	ldrh	r3, [r3, #0]
    4986:	2b00      	cmp	r3, #0
    4988:	d101      	bne.n	498e <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    498a:	2317      	movs	r3, #23
    498c:	e081      	b.n	4a92 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    498e:	2316      	movs	r3, #22
    4990:	18fb      	adds	r3, r7, r3
    4992:	2200      	movs	r2, #0
    4994:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    4996:	2314      	movs	r3, #20
    4998:	18fb      	adds	r3, r7, r3
    499a:	1dba      	adds	r2, r7, #6
    499c:	8812      	ldrh	r2, [r2, #0]
    499e:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    49a0:	e05f      	b.n	4a62 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    49a2:	46c0      	nop			; (mov r8, r8)
    49a4:	68fb      	ldr	r3, [r7, #12]
    49a6:	0018      	movs	r0, r3
    49a8:	4b3c      	ldr	r3, [pc, #240]	; (4a9c <spi_write_buffer_wait+0x138>)
    49aa:	4798      	blx	r3
    49ac:	0003      	movs	r3, r0
    49ae:	001a      	movs	r2, r3
    49b0:	2301      	movs	r3, #1
    49b2:	4053      	eors	r3, r2
    49b4:	b2db      	uxtb	r3, r3
    49b6:	2b00      	cmp	r3, #0
    49b8:	d1f4      	bne.n	49a4 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    49ba:	2316      	movs	r3, #22
    49bc:	18fb      	adds	r3, r7, r3
    49be:	881b      	ldrh	r3, [r3, #0]
    49c0:	2216      	movs	r2, #22
    49c2:	18ba      	adds	r2, r7, r2
    49c4:	1c59      	adds	r1, r3, #1
    49c6:	8011      	strh	r1, [r2, #0]
    49c8:	001a      	movs	r2, r3
    49ca:	68bb      	ldr	r3, [r7, #8]
    49cc:	189b      	adds	r3, r3, r2
    49ce:	781a      	ldrb	r2, [r3, #0]
    49d0:	2312      	movs	r3, #18
    49d2:	18fb      	adds	r3, r7, r3
    49d4:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    49d6:	68fb      	ldr	r3, [r7, #12]
    49d8:	799b      	ldrb	r3, [r3, #6]
    49da:	2b01      	cmp	r3, #1
    49dc:	d115      	bne.n	4a0a <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    49de:	2316      	movs	r3, #22
    49e0:	18fb      	adds	r3, r7, r3
    49e2:	881b      	ldrh	r3, [r3, #0]
    49e4:	2216      	movs	r2, #22
    49e6:	18ba      	adds	r2, r7, r2
    49e8:	1c59      	adds	r1, r3, #1
    49ea:	8011      	strh	r1, [r2, #0]
    49ec:	001a      	movs	r2, r3
    49ee:	68bb      	ldr	r3, [r7, #8]
    49f0:	189b      	adds	r3, r3, r2
    49f2:	781b      	ldrb	r3, [r3, #0]
    49f4:	021b      	lsls	r3, r3, #8
    49f6:	b21a      	sxth	r2, r3
    49f8:	2312      	movs	r3, #18
    49fa:	18fb      	adds	r3, r7, r3
    49fc:	2100      	movs	r1, #0
    49fe:	5e5b      	ldrsh	r3, [r3, r1]
    4a00:	4313      	orrs	r3, r2
    4a02:	b21a      	sxth	r2, r3
    4a04:	2312      	movs	r3, #18
    4a06:	18fb      	adds	r3, r7, r3
    4a08:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    4a0a:	2312      	movs	r3, #18
    4a0c:	18fb      	adds	r3, r7, r3
    4a0e:	881a      	ldrh	r2, [r3, #0]
    4a10:	68fb      	ldr	r3, [r7, #12]
    4a12:	0011      	movs	r1, r2
    4a14:	0018      	movs	r0, r3
    4a16:	4b22      	ldr	r3, [pc, #136]	; (4aa0 <spi_write_buffer_wait+0x13c>)
    4a18:	4798      	blx	r3

		if (module->receiver_enabled) {
    4a1a:	68fb      	ldr	r3, [r7, #12]
    4a1c:	79db      	ldrb	r3, [r3, #7]
    4a1e:	2214      	movs	r2, #20
    4a20:	18ba      	adds	r2, r7, r2
    4a22:	2114      	movs	r1, #20
    4a24:	1879      	adds	r1, r7, r1
    4a26:	8809      	ldrh	r1, [r1, #0]
    4a28:	8011      	strh	r1, [r2, #0]
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	d019      	beq.n	4a62 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    4a2e:	46c0      	nop			; (mov r8, r8)
    4a30:	68fb      	ldr	r3, [r7, #12]
    4a32:	0018      	movs	r0, r3
    4a34:	4b1b      	ldr	r3, [pc, #108]	; (4aa4 <spi_write_buffer_wait+0x140>)
    4a36:	4798      	blx	r3
    4a38:	0003      	movs	r3, r0
    4a3a:	001a      	movs	r2, r3
    4a3c:	2301      	movs	r3, #1
    4a3e:	4053      	eors	r3, r2
    4a40:	b2db      	uxtb	r3, r3
    4a42:	2b00      	cmp	r3, #0
    4a44:	d1f4      	bne.n	4a30 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    4a46:	2310      	movs	r3, #16
    4a48:	18fa      	adds	r2, r7, r3
    4a4a:	68fb      	ldr	r3, [r7, #12]
    4a4c:	0011      	movs	r1, r2
    4a4e:	0018      	movs	r0, r3
    4a50:	4b15      	ldr	r3, [pc, #84]	; (4aa8 <spi_write_buffer_wait+0x144>)
    4a52:	4798      	blx	r3
			flush_length--;
    4a54:	2314      	movs	r3, #20
    4a56:	18fb      	adds	r3, r7, r3
    4a58:	881a      	ldrh	r2, [r3, #0]
    4a5a:	2314      	movs	r3, #20
    4a5c:	18fb      	adds	r3, r7, r3
    4a5e:	3a01      	subs	r2, #1
    4a60:	801a      	strh	r2, [r3, #0]
	while (length--) {
    4a62:	1dbb      	adds	r3, r7, #6
    4a64:	881b      	ldrh	r3, [r3, #0]
    4a66:	1dba      	adds	r2, r7, #6
    4a68:	1e59      	subs	r1, r3, #1
    4a6a:	8011      	strh	r1, [r2, #0]
    4a6c:	2b00      	cmp	r3, #0
    4a6e:	d198      	bne.n	49a2 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    4a70:	68fb      	ldr	r3, [r7, #12]
    4a72:	795b      	ldrb	r3, [r3, #5]
    4a74:	2b01      	cmp	r3, #1
    4a76:	d10b      	bne.n	4a90 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    4a78:	46c0      	nop			; (mov r8, r8)
    4a7a:	68fb      	ldr	r3, [r7, #12]
    4a7c:	0018      	movs	r0, r3
    4a7e:	4b0b      	ldr	r3, [pc, #44]	; (4aac <spi_write_buffer_wait+0x148>)
    4a80:	4798      	blx	r3
    4a82:	0003      	movs	r3, r0
    4a84:	001a      	movs	r2, r3
    4a86:	2301      	movs	r3, #1
    4a88:	4053      	eors	r3, r2
    4a8a:	b2db      	uxtb	r3, r3
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d1f4      	bne.n	4a7a <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    4a90:	2300      	movs	r3, #0
}
    4a92:	0018      	movs	r0, r3
    4a94:	46bd      	mov	sp, r7
    4a96:	b006      	add	sp, #24
    4a98:	bd80      	pop	{r7, pc}
    4a9a:	46c0      	nop			; (mov r8, r8)
    4a9c:	00004179 	.word	0x00004179
    4aa0:	000041c9 	.word	0x000041c9
    4aa4:	000041a1 	.word	0x000041a1
    4aa8:	00004211 	.word	0x00004211
    4aac:	00004151 	.word	0x00004151

00004ab0 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    4ab0:	b580      	push	{r7, lr}
    4ab2:	b084      	sub	sp, #16
    4ab4:	af00      	add	r7, sp, #0
    4ab6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4ab8:	687b      	ldr	r3, [r7, #4]
    4aba:	681b      	ldr	r3, [r3, #0]
    4abc:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4abe:	687b      	ldr	r3, [r7, #4]
    4ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4ac2:	781b      	ldrb	r3, [r3, #0]
    4ac4:	b2da      	uxtb	r2, r3
    4ac6:	230e      	movs	r3, #14
    4ac8:	18fb      	adds	r3, r7, r3
    4aca:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    4acc:	687b      	ldr	r3, [r7, #4]
    4ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4ad0:	1c5a      	adds	r2, r3, #1
    4ad2:	687b      	ldr	r3, [r7, #4]
    4ad4:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4ad6:	687b      	ldr	r3, [r7, #4]
    4ad8:	799b      	ldrb	r3, [r3, #6]
    4ada:	2b01      	cmp	r3, #1
    4adc:	d113      	bne.n	4b06 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4ade:	687b      	ldr	r3, [r7, #4]
    4ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4ae2:	781b      	ldrb	r3, [r3, #0]
    4ae4:	b2db      	uxtb	r3, r3
    4ae6:	021b      	lsls	r3, r3, #8
    4ae8:	b21a      	sxth	r2, r3
    4aea:	230e      	movs	r3, #14
    4aec:	18fb      	adds	r3, r7, r3
    4aee:	2100      	movs	r1, #0
    4af0:	5e5b      	ldrsh	r3, [r3, r1]
    4af2:	4313      	orrs	r3, r2
    4af4:	b21a      	sxth	r2, r3
    4af6:	230e      	movs	r3, #14
    4af8:	18fb      	adds	r3, r7, r3
    4afa:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    4afc:	687b      	ldr	r3, [r7, #4]
    4afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b00:	1c5a      	adds	r2, r3, #1
    4b02:	687b      	ldr	r3, [r7, #4]
    4b04:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4b06:	230e      	movs	r3, #14
    4b08:	18fb      	adds	r3, r7, r3
    4b0a:	881b      	ldrh	r3, [r3, #0]
    4b0c:	05db      	lsls	r3, r3, #23
    4b0e:	0dda      	lsrs	r2, r3, #23
    4b10:	68bb      	ldr	r3, [r7, #8]
    4b12:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    4b14:	687b      	ldr	r3, [r7, #4]
    4b16:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4b18:	b29b      	uxth	r3, r3
    4b1a:	3b01      	subs	r3, #1
    4b1c:	b29a      	uxth	r2, r3
    4b1e:	687b      	ldr	r3, [r7, #4]
    4b20:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4b22:	46c0      	nop			; (mov r8, r8)
    4b24:	46bd      	mov	sp, r7
    4b26:	b004      	add	sp, #16
    4b28:	bd80      	pop	{r7, pc}
	...

00004b2c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    4b2c:	b580      	push	{r7, lr}
    4b2e:	b084      	sub	sp, #16
    4b30:	af00      	add	r7, sp, #0
    4b32:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4b34:	687b      	ldr	r3, [r7, #4]
    4b36:	681b      	ldr	r3, [r3, #0]
    4b38:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    4b3a:	4b08      	ldr	r3, [pc, #32]	; (4b5c <_spi_write_dummy+0x30>)
    4b3c:	881b      	ldrh	r3, [r3, #0]
    4b3e:	001a      	movs	r2, r3
    4b40:	68fb      	ldr	r3, [r7, #12]
    4b42:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4b44:	687b      	ldr	r3, [r7, #4]
    4b46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4b48:	b29b      	uxth	r3, r3
    4b4a:	3b01      	subs	r3, #1
    4b4c:	b29a      	uxth	r2, r3
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4b52:	46c0      	nop			; (mov r8, r8)
    4b54:	46bd      	mov	sp, r7
    4b56:	b004      	add	sp, #16
    4b58:	bd80      	pop	{r7, pc}
    4b5a:	46c0      	nop			; (mov r8, r8)
    4b5c:	200009ec 	.word	0x200009ec

00004b60 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    4b60:	b580      	push	{r7, lr}
    4b62:	b084      	sub	sp, #16
    4b64:	af00      	add	r7, sp, #0
    4b66:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	681b      	ldr	r3, [r3, #0]
    4b6c:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    4b6e:	230a      	movs	r3, #10
    4b70:	18fb      	adds	r3, r7, r3
    4b72:	2200      	movs	r2, #0
    4b74:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    4b76:	68fb      	ldr	r3, [r7, #12]
    4b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b7a:	230a      	movs	r3, #10
    4b7c:	18fb      	adds	r3, r7, r3
    4b7e:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4b80:	687b      	ldr	r3, [r7, #4]
    4b82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4b84:	b29b      	uxth	r3, r3
    4b86:	3b01      	subs	r3, #1
    4b88:	b29a      	uxth	r2, r3
    4b8a:	687b      	ldr	r3, [r7, #4]
    4b8c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4b8e:	46c0      	nop			; (mov r8, r8)
    4b90:	46bd      	mov	sp, r7
    4b92:	b004      	add	sp, #16
    4b94:	bd80      	pop	{r7, pc}

00004b96 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    4b96:	b580      	push	{r7, lr}
    4b98:	b084      	sub	sp, #16
    4b9a:	af00      	add	r7, sp, #0
    4b9c:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4b9e:	687b      	ldr	r3, [r7, #4]
    4ba0:	681b      	ldr	r3, [r3, #0]
    4ba2:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4ba4:	68fb      	ldr	r3, [r7, #12]
    4ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ba8:	b29a      	uxth	r2, r3
    4baa:	230a      	movs	r3, #10
    4bac:	18fb      	adds	r3, r7, r3
    4bae:	05d2      	lsls	r2, r2, #23
    4bb0:	0dd2      	lsrs	r2, r2, #23
    4bb2:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    4bb4:	687b      	ldr	r3, [r7, #4]
    4bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4bb8:	220a      	movs	r2, #10
    4bba:	18ba      	adds	r2, r7, r2
    4bbc:	8812      	ldrh	r2, [r2, #0]
    4bbe:	b2d2      	uxtb	r2, r2
    4bc0:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    4bc2:	687b      	ldr	r3, [r7, #4]
    4bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4bc6:	1c5a      	adds	r2, r3, #1
    4bc8:	687b      	ldr	r3, [r7, #4]
    4bca:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	799b      	ldrb	r3, [r3, #6]
    4bd0:	2b01      	cmp	r3, #1
    4bd2:	d10d      	bne.n	4bf0 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4bd4:	687b      	ldr	r3, [r7, #4]
    4bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4bd8:	220a      	movs	r2, #10
    4bda:	18ba      	adds	r2, r7, r2
    4bdc:	8812      	ldrh	r2, [r2, #0]
    4bde:	0a12      	lsrs	r2, r2, #8
    4be0:	b292      	uxth	r2, r2
    4be2:	b2d2      	uxtb	r2, r2
    4be4:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    4be6:	687b      	ldr	r3, [r7, #4]
    4be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4bea:	1c5a      	adds	r2, r3, #1
    4bec:	687b      	ldr	r3, [r7, #4]
    4bee:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    4bf0:	687b      	ldr	r3, [r7, #4]
    4bf2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4bf4:	b29b      	uxth	r3, r3
    4bf6:	3b01      	subs	r3, #1
    4bf8:	b29a      	uxth	r2, r3
    4bfa:	687b      	ldr	r3, [r7, #4]
    4bfc:	861a      	strh	r2, [r3, #48]	; 0x30
}
    4bfe:	46c0      	nop			; (mov r8, r8)
    4c00:	46bd      	mov	sp, r7
    4c02:	b004      	add	sp, #16
    4c04:	bd80      	pop	{r7, pc}
	...

00004c08 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4c08:	b580      	push	{r7, lr}
    4c0a:	b086      	sub	sp, #24
    4c0c:	af00      	add	r7, sp, #0
    4c0e:	0002      	movs	r2, r0
    4c10:	1dfb      	adds	r3, r7, #7
    4c12:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    4c14:	1dfb      	adds	r3, r7, #7
    4c16:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    4c18:	4b96      	ldr	r3, [pc, #600]	; (4e74 <_spi_interrupt_handler+0x26c>)
    4c1a:	0092      	lsls	r2, r2, #2
    4c1c:	58d3      	ldr	r3, [r2, r3]
    4c1e:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4c20:	697b      	ldr	r3, [r7, #20]
    4c22:	681b      	ldr	r3, [r3, #0]
    4c24:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4c26:	697b      	ldr	r3, [r7, #20]
    4c28:	2237      	movs	r2, #55	; 0x37
    4c2a:	5c9a      	ldrb	r2, [r3, r2]
    4c2c:	697b      	ldr	r3, [r7, #20]
    4c2e:	2136      	movs	r1, #54	; 0x36
    4c30:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    4c32:	230f      	movs	r3, #15
    4c34:	18fb      	adds	r3, r7, r3
    4c36:	400a      	ands	r2, r1
    4c38:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4c3a:	693b      	ldr	r3, [r7, #16]
    4c3c:	7e1b      	ldrb	r3, [r3, #24]
    4c3e:	b2da      	uxtb	r2, r3
    4c40:	230c      	movs	r3, #12
    4c42:	18fb      	adds	r3, r7, r3
    4c44:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    4c46:	693b      	ldr	r3, [r7, #16]
    4c48:	7d9b      	ldrb	r3, [r3, #22]
    4c4a:	b2db      	uxtb	r3, r3
    4c4c:	b29a      	uxth	r2, r3
    4c4e:	230c      	movs	r3, #12
    4c50:	18fb      	adds	r3, r7, r3
    4c52:	210c      	movs	r1, #12
    4c54:	1879      	adds	r1, r7, r1
    4c56:	8809      	ldrh	r1, [r1, #0]
    4c58:	400a      	ands	r2, r1
    4c5a:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4c5c:	230c      	movs	r3, #12
    4c5e:	18fb      	adds	r3, r7, r3
    4c60:	881b      	ldrh	r3, [r3, #0]
    4c62:	2201      	movs	r2, #1
    4c64:	4013      	ands	r3, r2
    4c66:	d038      	beq.n	4cda <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4c68:	697b      	ldr	r3, [r7, #20]
    4c6a:	795b      	ldrb	r3, [r3, #5]
    4c6c:	2b01      	cmp	r3, #1
    4c6e:	d110      	bne.n	4c92 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    4c70:	697b      	ldr	r3, [r7, #20]
    4c72:	7a5b      	ldrb	r3, [r3, #9]
    4c74:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4c76:	2b00      	cmp	r3, #0
    4c78:	d10b      	bne.n	4c92 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    4c7a:	697b      	ldr	r3, [r7, #20]
    4c7c:	0018      	movs	r0, r3
    4c7e:	4b7e      	ldr	r3, [pc, #504]	; (4e78 <_spi_interrupt_handler+0x270>)
    4c80:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    4c82:	697b      	ldr	r3, [r7, #20]
    4c84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4c86:	b29b      	uxth	r3, r3
    4c88:	2b00      	cmp	r3, #0
    4c8a:	d102      	bne.n	4c92 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4c8c:	693b      	ldr	r3, [r7, #16]
    4c8e:	2201      	movs	r2, #1
    4c90:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    4c92:	697b      	ldr	r3, [r7, #20]
    4c94:	795b      	ldrb	r3, [r3, #5]
		if (0
    4c96:	2b01      	cmp	r3, #1
    4c98:	d11f      	bne.n	4cda <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    4c9a:	697b      	ldr	r3, [r7, #20]
    4c9c:	7a5b      	ldrb	r3, [r3, #9]
    4c9e:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    4ca0:	2b00      	cmp	r3, #0
    4ca2:	d01a      	beq.n	4cda <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    4ca4:	697b      	ldr	r3, [r7, #20]
    4ca6:	0018      	movs	r0, r3
    4ca8:	4b74      	ldr	r3, [pc, #464]	; (4e7c <_spi_interrupt_handler+0x274>)
    4caa:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    4cac:	697b      	ldr	r3, [r7, #20]
    4cae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4cb0:	b29b      	uxth	r3, r3
    4cb2:	2b00      	cmp	r3, #0
    4cb4:	d111      	bne.n	4cda <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4cb6:	693b      	ldr	r3, [r7, #16]
    4cb8:	2201      	movs	r2, #1
    4cba:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    4cbc:	697b      	ldr	r3, [r7, #20]
    4cbe:	7a5b      	ldrb	r3, [r3, #9]
    4cc0:	b2db      	uxtb	r3, r3
    4cc2:	2b01      	cmp	r3, #1
    4cc4:	d109      	bne.n	4cda <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    4cc6:	697b      	ldr	r3, [r7, #20]
    4cc8:	79db      	ldrb	r3, [r3, #7]
    4cca:	2201      	movs	r2, #1
    4ccc:	4053      	eors	r3, r2
    4cce:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    4cd0:	2b00      	cmp	r3, #0
    4cd2:	d002      	beq.n	4cda <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4cd4:	693b      	ldr	r3, [r7, #16]
    4cd6:	2202      	movs	r2, #2
    4cd8:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4cda:	230c      	movs	r3, #12
    4cdc:	18fb      	adds	r3, r7, r3
    4cde:	881b      	ldrh	r3, [r3, #0]
    4ce0:	2204      	movs	r2, #4
    4ce2:	4013      	ands	r3, r2
    4ce4:	d100      	bne.n	4ce8 <_spi_interrupt_handler+0xe0>
    4ce6:	e07e      	b.n	4de6 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4ce8:	693b      	ldr	r3, [r7, #16]
    4cea:	8b5b      	ldrh	r3, [r3, #26]
    4cec:	b29b      	uxth	r3, r3
    4cee:	001a      	movs	r2, r3
    4cf0:	2304      	movs	r3, #4
    4cf2:	4013      	ands	r3, r2
    4cf4:	d022      	beq.n	4d3c <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4cf6:	697b      	ldr	r3, [r7, #20]
    4cf8:	7a5b      	ldrb	r3, [r3, #9]
    4cfa:	b2db      	uxtb	r3, r3
    4cfc:	2b01      	cmp	r3, #1
    4cfe:	d014      	beq.n	4d2a <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4d00:	697b      	ldr	r3, [r7, #20]
    4d02:	2238      	movs	r2, #56	; 0x38
    4d04:	211e      	movs	r1, #30
    4d06:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4d08:	697b      	ldr	r3, [r7, #20]
    4d0a:	2203      	movs	r2, #3
    4d0c:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4d0e:	693b      	ldr	r3, [r7, #16]
    4d10:	2205      	movs	r2, #5
    4d12:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4d14:	230f      	movs	r3, #15
    4d16:	18fb      	adds	r3, r7, r3
    4d18:	781b      	ldrb	r3, [r3, #0]
    4d1a:	2208      	movs	r2, #8
    4d1c:	4013      	ands	r3, r2
    4d1e:	d004      	beq.n	4d2a <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4d20:	697b      	ldr	r3, [r7, #20]
    4d22:	699b      	ldr	r3, [r3, #24]
    4d24:	697a      	ldr	r2, [r7, #20]
    4d26:	0010      	movs	r0, r2
    4d28:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4d2a:	693b      	ldr	r3, [r7, #16]
    4d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4d2e:	230a      	movs	r3, #10
    4d30:	18fb      	adds	r3, r7, r3
    4d32:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4d34:	693b      	ldr	r3, [r7, #16]
    4d36:	2204      	movs	r2, #4
    4d38:	835a      	strh	r2, [r3, #26]
    4d3a:	e054      	b.n	4de6 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    4d3c:	697b      	ldr	r3, [r7, #20]
    4d3e:	7a5b      	ldrb	r3, [r3, #9]
    4d40:	b2db      	uxtb	r3, r3
    4d42:	2b01      	cmp	r3, #1
    4d44:	d11e      	bne.n	4d84 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    4d46:	697b      	ldr	r3, [r7, #20]
    4d48:	0018      	movs	r0, r3
    4d4a:	4b4d      	ldr	r3, [pc, #308]	; (4e80 <_spi_interrupt_handler+0x278>)
    4d4c:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    4d4e:	697b      	ldr	r3, [r7, #20]
    4d50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4d52:	b29b      	uxth	r3, r3
    4d54:	2b00      	cmp	r3, #0
    4d56:	d146      	bne.n	4de6 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4d58:	693b      	ldr	r3, [r7, #16]
    4d5a:	2204      	movs	r2, #4
    4d5c:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    4d5e:	697b      	ldr	r3, [r7, #20]
    4d60:	2238      	movs	r2, #56	; 0x38
    4d62:	2100      	movs	r1, #0
    4d64:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    4d66:	697b      	ldr	r3, [r7, #20]
    4d68:	2203      	movs	r2, #3
    4d6a:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    4d6c:	230f      	movs	r3, #15
    4d6e:	18fb      	adds	r3, r7, r3
    4d70:	781b      	ldrb	r3, [r3, #0]
    4d72:	2201      	movs	r2, #1
    4d74:	4013      	ands	r3, r2
    4d76:	d036      	beq.n	4de6 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4d78:	697b      	ldr	r3, [r7, #20]
    4d7a:	68db      	ldr	r3, [r3, #12]
    4d7c:	697a      	ldr	r2, [r7, #20]
    4d7e:	0010      	movs	r0, r2
    4d80:	4798      	blx	r3
    4d82:	e030      	b.n	4de6 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    4d84:	697b      	ldr	r3, [r7, #20]
    4d86:	0018      	movs	r0, r3
    4d88:	4b3e      	ldr	r3, [pc, #248]	; (4e84 <_spi_interrupt_handler+0x27c>)
    4d8a:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    4d8c:	697b      	ldr	r3, [r7, #20]
    4d8e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4d90:	b29b      	uxth	r3, r3
    4d92:	2b00      	cmp	r3, #0
    4d94:	d127      	bne.n	4de6 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    4d96:	697b      	ldr	r3, [r7, #20]
    4d98:	2238      	movs	r2, #56	; 0x38
    4d9a:	2100      	movs	r1, #0
    4d9c:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4d9e:	693b      	ldr	r3, [r7, #16]
    4da0:	2204      	movs	r2, #4
    4da2:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4da4:	697b      	ldr	r3, [r7, #20]
    4da6:	7a5b      	ldrb	r3, [r3, #9]
    4da8:	b2db      	uxtb	r3, r3
    4daa:	2b02      	cmp	r3, #2
    4dac:	d10b      	bne.n	4dc6 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4dae:	230f      	movs	r3, #15
    4db0:	18fb      	adds	r3, r7, r3
    4db2:	781b      	ldrb	r3, [r3, #0]
    4db4:	2204      	movs	r2, #4
    4db6:	4013      	ands	r3, r2
    4db8:	d015      	beq.n	4de6 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4dba:	697b      	ldr	r3, [r7, #20]
    4dbc:	695b      	ldr	r3, [r3, #20]
    4dbe:	697a      	ldr	r2, [r7, #20]
    4dc0:	0010      	movs	r0, r2
    4dc2:	4798      	blx	r3
    4dc4:	e00f      	b.n	4de6 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    4dc6:	697b      	ldr	r3, [r7, #20]
    4dc8:	7a5b      	ldrb	r3, [r3, #9]
    4dca:	b2db      	uxtb	r3, r3
    4dcc:	2b00      	cmp	r3, #0
    4dce:	d10a      	bne.n	4de6 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4dd0:	230f      	movs	r3, #15
    4dd2:	18fb      	adds	r3, r7, r3
    4dd4:	781b      	ldrb	r3, [r3, #0]
    4dd6:	2202      	movs	r2, #2
    4dd8:	4013      	ands	r3, r2
    4dda:	d004      	beq.n	4de6 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4ddc:	697b      	ldr	r3, [r7, #20]
    4dde:	691b      	ldr	r3, [r3, #16]
    4de0:	697a      	ldr	r2, [r7, #20]
    4de2:	0010      	movs	r0, r2
    4de4:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4de6:	230c      	movs	r3, #12
    4de8:	18fb      	adds	r3, r7, r3
    4dea:	881b      	ldrh	r3, [r3, #0]
    4dec:	2202      	movs	r2, #2
    4dee:	4013      	ands	r3, r2
    4df0:	d024      	beq.n	4e3c <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4df2:	697b      	ldr	r3, [r7, #20]
    4df4:	795b      	ldrb	r3, [r3, #5]
    4df6:	2b01      	cmp	r3, #1
    4df8:	d120      	bne.n	4e3c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4dfa:	697b      	ldr	r3, [r7, #20]
    4dfc:	7a5b      	ldrb	r3, [r3, #9]
    4dfe:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4e00:	2b01      	cmp	r3, #1
    4e02:	d11b      	bne.n	4e3c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4e04:	697b      	ldr	r3, [r7, #20]
    4e06:	79db      	ldrb	r3, [r3, #7]
    4e08:	2201      	movs	r2, #1
    4e0a:	4053      	eors	r3, r2
    4e0c:	b2db      	uxtb	r3, r3
    4e0e:	2b00      	cmp	r3, #0
    4e10:	d014      	beq.n	4e3c <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4e12:	693b      	ldr	r3, [r7, #16]
    4e14:	2202      	movs	r2, #2
    4e16:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    4e18:	697b      	ldr	r3, [r7, #20]
    4e1a:	2203      	movs	r2, #3
    4e1c:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    4e1e:	697b      	ldr	r3, [r7, #20]
    4e20:	2238      	movs	r2, #56	; 0x38
    4e22:	2100      	movs	r1, #0
    4e24:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4e26:	230f      	movs	r3, #15
    4e28:	18fb      	adds	r3, r7, r3
    4e2a:	781b      	ldrb	r3, [r3, #0]
    4e2c:	2201      	movs	r2, #1
    4e2e:	4013      	ands	r3, r2
    4e30:	d004      	beq.n	4e3c <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4e32:	697b      	ldr	r3, [r7, #20]
    4e34:	68db      	ldr	r3, [r3, #12]
    4e36:	697a      	ldr	r2, [r7, #20]
    4e38:	0010      	movs	r0, r2
    4e3a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4e3c:	230c      	movs	r3, #12
    4e3e:	18fb      	adds	r3, r7, r3
    4e40:	881b      	ldrh	r3, [r3, #0]
    4e42:	2280      	movs	r2, #128	; 0x80
    4e44:	4013      	ands	r3, r2
    4e46:	d010      	beq.n	4e6a <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4e48:	693b      	ldr	r3, [r7, #16]
    4e4a:	2280      	movs	r2, #128	; 0x80
    4e4c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4e4e:	693b      	ldr	r3, [r7, #16]
    4e50:	2280      	movs	r2, #128	; 0x80
    4e52:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4e54:	230f      	movs	r3, #15
    4e56:	18fb      	adds	r3, r7, r3
    4e58:	781b      	ldrb	r3, [r3, #0]
    4e5a:	2240      	movs	r2, #64	; 0x40
    4e5c:	4013      	ands	r3, r2
    4e5e:	d004      	beq.n	4e6a <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4e60:	697b      	ldr	r3, [r7, #20]
    4e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4e64:	697a      	ldr	r2, [r7, #20]
    4e66:	0010      	movs	r0, r2
    4e68:	4798      	blx	r3
		}
	}
#  endif
}
    4e6a:	46c0      	nop			; (mov r8, r8)
    4e6c:	46bd      	mov	sp, r7
    4e6e:	b006      	add	sp, #24
    4e70:	bd80      	pop	{r7, pc}
    4e72:	46c0      	nop			; (mov r8, r8)
    4e74:	200009d4 	.word	0x200009d4
    4e78:	00004b2d 	.word	0x00004b2d
    4e7c:	00004ab1 	.word	0x00004ab1
    4e80:	00004b61 	.word	0x00004b61
    4e84:	00004b97 	.word	0x00004b97

00004e88 <system_gclk_chan_get_config_defaults>:
{
    4e88:	b580      	push	{r7, lr}
    4e8a:	b082      	sub	sp, #8
    4e8c:	af00      	add	r7, sp, #0
    4e8e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4e90:	687b      	ldr	r3, [r7, #4]
    4e92:	2200      	movs	r2, #0
    4e94:	701a      	strb	r2, [r3, #0]
}
    4e96:	46c0      	nop			; (mov r8, r8)
    4e98:	46bd      	mov	sp, r7
    4e9a:	b002      	add	sp, #8
    4e9c:	bd80      	pop	{r7, pc}
	...

00004ea0 <system_apb_clock_set_mask>:
{
    4ea0:	b580      	push	{r7, lr}
    4ea2:	b082      	sub	sp, #8
    4ea4:	af00      	add	r7, sp, #0
    4ea6:	0002      	movs	r2, r0
    4ea8:	6039      	str	r1, [r7, #0]
    4eaa:	1dfb      	adds	r3, r7, #7
    4eac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4eae:	1dfb      	adds	r3, r7, #7
    4eb0:	781b      	ldrb	r3, [r3, #0]
    4eb2:	2b01      	cmp	r3, #1
    4eb4:	d00a      	beq.n	4ecc <system_apb_clock_set_mask+0x2c>
    4eb6:	2b02      	cmp	r3, #2
    4eb8:	d00f      	beq.n	4eda <system_apb_clock_set_mask+0x3a>
    4eba:	2b00      	cmp	r3, #0
    4ebc:	d114      	bne.n	4ee8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4ebe:	4b0e      	ldr	r3, [pc, #56]	; (4ef8 <system_apb_clock_set_mask+0x58>)
    4ec0:	4a0d      	ldr	r2, [pc, #52]	; (4ef8 <system_apb_clock_set_mask+0x58>)
    4ec2:	6991      	ldr	r1, [r2, #24]
    4ec4:	683a      	ldr	r2, [r7, #0]
    4ec6:	430a      	orrs	r2, r1
    4ec8:	619a      	str	r2, [r3, #24]
			break;
    4eca:	e00f      	b.n	4eec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4ecc:	4b0a      	ldr	r3, [pc, #40]	; (4ef8 <system_apb_clock_set_mask+0x58>)
    4ece:	4a0a      	ldr	r2, [pc, #40]	; (4ef8 <system_apb_clock_set_mask+0x58>)
    4ed0:	69d1      	ldr	r1, [r2, #28]
    4ed2:	683a      	ldr	r2, [r7, #0]
    4ed4:	430a      	orrs	r2, r1
    4ed6:	61da      	str	r2, [r3, #28]
			break;
    4ed8:	e008      	b.n	4eec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4eda:	4b07      	ldr	r3, [pc, #28]	; (4ef8 <system_apb_clock_set_mask+0x58>)
    4edc:	4a06      	ldr	r2, [pc, #24]	; (4ef8 <system_apb_clock_set_mask+0x58>)
    4ede:	6a11      	ldr	r1, [r2, #32]
    4ee0:	683a      	ldr	r2, [r7, #0]
    4ee2:	430a      	orrs	r2, r1
    4ee4:	621a      	str	r2, [r3, #32]
			break;
    4ee6:	e001      	b.n	4eec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4ee8:	2317      	movs	r3, #23
    4eea:	e000      	b.n	4eee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4eec:	2300      	movs	r3, #0
}
    4eee:	0018      	movs	r0, r3
    4ef0:	46bd      	mov	sp, r7
    4ef2:	b002      	add	sp, #8
    4ef4:	bd80      	pop	{r7, pc}
    4ef6:	46c0      	nop			; (mov r8, r8)
    4ef8:	40000400 	.word	0x40000400

00004efc <system_pinmux_get_config_defaults>:
{
    4efc:	b580      	push	{r7, lr}
    4efe:	b082      	sub	sp, #8
    4f00:	af00      	add	r7, sp, #0
    4f02:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4f04:	687b      	ldr	r3, [r7, #4]
    4f06:	2280      	movs	r2, #128	; 0x80
    4f08:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4f0a:	687b      	ldr	r3, [r7, #4]
    4f0c:	2200      	movs	r2, #0
    4f0e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4f10:	687b      	ldr	r3, [r7, #4]
    4f12:	2201      	movs	r2, #1
    4f14:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4f16:	687b      	ldr	r3, [r7, #4]
    4f18:	2200      	movs	r2, #0
    4f1a:	70da      	strb	r2, [r3, #3]
}
    4f1c:	46c0      	nop			; (mov r8, r8)
    4f1e:	46bd      	mov	sp, r7
    4f20:	b002      	add	sp, #8
    4f22:	bd80      	pop	{r7, pc}

00004f24 <system_is_debugger_present>:
{
    4f24:	b580      	push	{r7, lr}
    4f26:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4f28:	4b05      	ldr	r3, [pc, #20]	; (4f40 <system_is_debugger_present+0x1c>)
    4f2a:	789b      	ldrb	r3, [r3, #2]
    4f2c:	b2db      	uxtb	r3, r3
    4f2e:	001a      	movs	r2, r3
    4f30:	2302      	movs	r3, #2
    4f32:	4013      	ands	r3, r2
    4f34:	1e5a      	subs	r2, r3, #1
    4f36:	4193      	sbcs	r3, r2
    4f38:	b2db      	uxtb	r3, r3
}
    4f3a:	0018      	movs	r0, r3
    4f3c:	46bd      	mov	sp, r7
    4f3e:	bd80      	pop	{r7, pc}
    4f40:	41002000 	.word	0x41002000

00004f44 <usart_is_syncing>:
{
    4f44:	b580      	push	{r7, lr}
    4f46:	b084      	sub	sp, #16
    4f48:	af00      	add	r7, sp, #0
    4f4a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4f4c:	687b      	ldr	r3, [r7, #4]
    4f4e:	681b      	ldr	r3, [r3, #0]
    4f50:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    4f52:	68fb      	ldr	r3, [r7, #12]
    4f54:	69db      	ldr	r3, [r3, #28]
    4f56:	1e5a      	subs	r2, r3, #1
    4f58:	4193      	sbcs	r3, r2
    4f5a:	b2db      	uxtb	r3, r3
}
    4f5c:	0018      	movs	r0, r3
    4f5e:	46bd      	mov	sp, r7
    4f60:	b004      	add	sp, #16
    4f62:	bd80      	pop	{r7, pc}

00004f64 <_usart_wait_for_sync>:
{
    4f64:	b580      	push	{r7, lr}
    4f66:	b082      	sub	sp, #8
    4f68:	af00      	add	r7, sp, #0
    4f6a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    4f6c:	46c0      	nop			; (mov r8, r8)
    4f6e:	687b      	ldr	r3, [r7, #4]
    4f70:	0018      	movs	r0, r3
    4f72:	4b04      	ldr	r3, [pc, #16]	; (4f84 <_usart_wait_for_sync+0x20>)
    4f74:	4798      	blx	r3
    4f76:	1e03      	subs	r3, r0, #0
    4f78:	d1f9      	bne.n	4f6e <_usart_wait_for_sync+0xa>
}
    4f7a:	46c0      	nop			; (mov r8, r8)
    4f7c:	46bd      	mov	sp, r7
    4f7e:	b002      	add	sp, #8
    4f80:	bd80      	pop	{r7, pc}
    4f82:	46c0      	nop			; (mov r8, r8)
    4f84:	00004f45 	.word	0x00004f45

00004f88 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    4f88:	b5b0      	push	{r4, r5, r7, lr}
    4f8a:	b08c      	sub	sp, #48	; 0x30
    4f8c:	af02      	add	r7, sp, #8
    4f8e:	6078      	str	r0, [r7, #4]
    4f90:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4f92:	687b      	ldr	r3, [r7, #4]
    4f94:	681b      	ldr	r3, [r3, #0]
    4f96:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4f98:	687b      	ldr	r3, [r7, #4]
    4f9a:	681b      	ldr	r3, [r3, #0]
    4f9c:	0018      	movs	r0, r3
    4f9e:	4bab      	ldr	r3, [pc, #684]	; (524c <_usart_set_config+0x2c4>)
    4fa0:	4798      	blx	r3
    4fa2:	0003      	movs	r3, r0
    4fa4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4fa6:	697b      	ldr	r3, [r7, #20]
    4fa8:	3314      	adds	r3, #20
    4faa:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    4fac:	2300      	movs	r3, #0
    4fae:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    4fb0:	2300      	movs	r3, #0
    4fb2:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    4fb4:	230a      	movs	r3, #10
    4fb6:	18fb      	adds	r3, r7, r3
    4fb8:	2200      	movs	r2, #0
    4fba:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4fbc:	231f      	movs	r3, #31
    4fbe:	18fb      	adds	r3, r7, r3
    4fc0:	2200      	movs	r2, #0
    4fc2:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4fc4:	231e      	movs	r3, #30
    4fc6:	18fb      	adds	r3, r7, r3
    4fc8:	2210      	movs	r2, #16
    4fca:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    4fcc:	683b      	ldr	r3, [r7, #0]
    4fce:	8a1b      	ldrh	r3, [r3, #16]
    4fd0:	2280      	movs	r2, #128	; 0x80
    4fd2:	01d2      	lsls	r2, r2, #7
    4fd4:	4293      	cmp	r3, r2
    4fd6:	d01c      	beq.n	5012 <_usart_set_config+0x8a>
    4fd8:	2280      	movs	r2, #128	; 0x80
    4fda:	01d2      	lsls	r2, r2, #7
    4fdc:	4293      	cmp	r3, r2
    4fde:	dc06      	bgt.n	4fee <_usart_set_config+0x66>
    4fe0:	2b00      	cmp	r3, #0
    4fe2:	d00d      	beq.n	5000 <_usart_set_config+0x78>
    4fe4:	2280      	movs	r2, #128	; 0x80
    4fe6:	0192      	lsls	r2, r2, #6
    4fe8:	4293      	cmp	r3, r2
    4fea:	d024      	beq.n	5036 <_usart_set_config+0xae>
    4fec:	e035      	b.n	505a <_usart_set_config+0xd2>
    4fee:	22c0      	movs	r2, #192	; 0xc0
    4ff0:	01d2      	lsls	r2, r2, #7
    4ff2:	4293      	cmp	r3, r2
    4ff4:	d028      	beq.n	5048 <_usart_set_config+0xc0>
    4ff6:	2280      	movs	r2, #128	; 0x80
    4ff8:	0212      	lsls	r2, r2, #8
    4ffa:	4293      	cmp	r3, r2
    4ffc:	d012      	beq.n	5024 <_usart_set_config+0x9c>
    4ffe:	e02c      	b.n	505a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5000:	231f      	movs	r3, #31
    5002:	18fb      	adds	r3, r7, r3
    5004:	2200      	movs	r2, #0
    5006:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5008:	231e      	movs	r3, #30
    500a:	18fb      	adds	r3, r7, r3
    500c:	2210      	movs	r2, #16
    500e:	701a      	strb	r2, [r3, #0]
			break;
    5010:	e023      	b.n	505a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5012:	231f      	movs	r3, #31
    5014:	18fb      	adds	r3, r7, r3
    5016:	2200      	movs	r2, #0
    5018:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    501a:	231e      	movs	r3, #30
    501c:	18fb      	adds	r3, r7, r3
    501e:	2208      	movs	r2, #8
    5020:	701a      	strb	r2, [r3, #0]
			break;
    5022:	e01a      	b.n	505a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5024:	231f      	movs	r3, #31
    5026:	18fb      	adds	r3, r7, r3
    5028:	2200      	movs	r2, #0
    502a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    502c:	231e      	movs	r3, #30
    502e:	18fb      	adds	r3, r7, r3
    5030:	2203      	movs	r2, #3
    5032:	701a      	strb	r2, [r3, #0]
			break;
    5034:	e011      	b.n	505a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5036:	231f      	movs	r3, #31
    5038:	18fb      	adds	r3, r7, r3
    503a:	2201      	movs	r2, #1
    503c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    503e:	231e      	movs	r3, #30
    5040:	18fb      	adds	r3, r7, r3
    5042:	2210      	movs	r2, #16
    5044:	701a      	strb	r2, [r3, #0]
			break;
    5046:	e008      	b.n	505a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5048:	231f      	movs	r3, #31
    504a:	18fb      	adds	r3, r7, r3
    504c:	2201      	movs	r2, #1
    504e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5050:	231e      	movs	r3, #30
    5052:	18fb      	adds	r3, r7, r3
    5054:	2208      	movs	r2, #8
    5056:	701a      	strb	r2, [r3, #0]
			break;
    5058:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    505a:	683b      	ldr	r3, [r7, #0]
    505c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    505e:	683b      	ldr	r3, [r7, #0]
    5060:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    5062:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5064:	683b      	ldr	r3, [r7, #0]
    5066:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    5068:	4313      	orrs	r3, r2
		config->sample_rate |
    506a:	683a      	ldr	r2, [r7, #0]
    506c:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    506e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5070:	683a      	ldr	r2, [r7, #0]
    5072:	7e12      	ldrb	r2, [r2, #24]
    5074:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    5076:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5078:	683a      	ldr	r2, [r7, #0]
    507a:	2126      	movs	r1, #38	; 0x26
    507c:	5c52      	ldrb	r2, [r2, r1]
    507e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    5080:	4313      	orrs	r3, r2
    5082:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    5084:	231d      	movs	r3, #29
    5086:	18fb      	adds	r3, r7, r3
    5088:	2200      	movs	r2, #0
    508a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    508c:	683b      	ldr	r3, [r7, #0]
    508e:	685b      	ldr	r3, [r3, #4]
    5090:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    5092:	68fb      	ldr	r3, [r7, #12]
    5094:	2b00      	cmp	r3, #0
    5096:	d01e      	beq.n	50d6 <_usart_set_config+0x14e>
    5098:	2280      	movs	r2, #128	; 0x80
    509a:	0552      	lsls	r2, r2, #21
    509c:	4293      	cmp	r3, r2
    509e:	d14f      	bne.n	5140 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    50a0:	683b      	ldr	r3, [r7, #0]
    50a2:	2227      	movs	r2, #39	; 0x27
    50a4:	5c9b      	ldrb	r3, [r3, r2]
    50a6:	2201      	movs	r2, #1
    50a8:	4053      	eors	r3, r2
    50aa:	b2db      	uxtb	r3, r3
    50ac:	2b00      	cmp	r3, #0
    50ae:	d046      	beq.n	513e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    50b0:	683b      	ldr	r3, [r7, #0]
    50b2:	6a1d      	ldr	r5, [r3, #32]
    50b4:	693b      	ldr	r3, [r7, #16]
    50b6:	b2db      	uxtb	r3, r3
    50b8:	0018      	movs	r0, r3
    50ba:	4b65      	ldr	r3, [pc, #404]	; (5250 <_usart_set_config+0x2c8>)
    50bc:	4798      	blx	r3
    50be:	0001      	movs	r1, r0
    50c0:	231d      	movs	r3, #29
    50c2:	18fc      	adds	r4, r7, r3
    50c4:	230a      	movs	r3, #10
    50c6:	18fb      	adds	r3, r7, r3
    50c8:	001a      	movs	r2, r3
    50ca:	0028      	movs	r0, r5
    50cc:	4b61      	ldr	r3, [pc, #388]	; (5254 <_usart_set_config+0x2cc>)
    50ce:	4798      	blx	r3
    50d0:	0003      	movs	r3, r0
    50d2:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    50d4:	e033      	b.n	513e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    50d6:	683b      	ldr	r3, [r7, #0]
    50d8:	2227      	movs	r2, #39	; 0x27
    50da:	5c9b      	ldrb	r3, [r3, r2]
    50dc:	2b00      	cmp	r3, #0
    50de:	d014      	beq.n	510a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    50e0:	683b      	ldr	r3, [r7, #0]
    50e2:	6a18      	ldr	r0, [r3, #32]
    50e4:	683b      	ldr	r3, [r7, #0]
    50e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    50e8:	231d      	movs	r3, #29
    50ea:	18fc      	adds	r4, r7, r3
    50ec:	231f      	movs	r3, #31
    50ee:	18fb      	adds	r3, r7, r3
    50f0:	781d      	ldrb	r5, [r3, #0]
    50f2:	230a      	movs	r3, #10
    50f4:	18fa      	adds	r2, r7, r3
    50f6:	231e      	movs	r3, #30
    50f8:	18fb      	adds	r3, r7, r3
    50fa:	781b      	ldrb	r3, [r3, #0]
    50fc:	9300      	str	r3, [sp, #0]
    50fe:	002b      	movs	r3, r5
    5100:	4d55      	ldr	r5, [pc, #340]	; (5258 <_usart_set_config+0x2d0>)
    5102:	47a8      	blx	r5
    5104:	0003      	movs	r3, r0
    5106:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5108:	e01a      	b.n	5140 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    510a:	683b      	ldr	r3, [r7, #0]
    510c:	6a1d      	ldr	r5, [r3, #32]
    510e:	693b      	ldr	r3, [r7, #16]
    5110:	b2db      	uxtb	r3, r3
    5112:	0018      	movs	r0, r3
    5114:	4b4e      	ldr	r3, [pc, #312]	; (5250 <_usart_set_config+0x2c8>)
    5116:	4798      	blx	r3
				status_code =
    5118:	231d      	movs	r3, #29
    511a:	18fc      	adds	r4, r7, r3
    511c:	231f      	movs	r3, #31
    511e:	18fb      	adds	r3, r7, r3
    5120:	7819      	ldrb	r1, [r3, #0]
    5122:	230a      	movs	r3, #10
    5124:	18fa      	adds	r2, r7, r3
    5126:	231e      	movs	r3, #30
    5128:	18fb      	adds	r3, r7, r3
    512a:	781b      	ldrb	r3, [r3, #0]
    512c:	9300      	str	r3, [sp, #0]
    512e:	000b      	movs	r3, r1
    5130:	0001      	movs	r1, r0
    5132:	0028      	movs	r0, r5
    5134:	4d48      	ldr	r5, [pc, #288]	; (5258 <_usart_set_config+0x2d0>)
    5136:	47a8      	blx	r5
    5138:	0003      	movs	r3, r0
    513a:	7023      	strb	r3, [r4, #0]
			break;
    513c:	e000      	b.n	5140 <_usart_set_config+0x1b8>
			break;
    513e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    5140:	231d      	movs	r3, #29
    5142:	18fb      	adds	r3, r7, r3
    5144:	781b      	ldrb	r3, [r3, #0]
    5146:	2b00      	cmp	r3, #0
    5148:	d003      	beq.n	5152 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    514a:	231d      	movs	r3, #29
    514c:	18fb      	adds	r3, r7, r3
    514e:	781b      	ldrb	r3, [r3, #0]
    5150:	e077      	b.n	5242 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    5152:	683b      	ldr	r3, [r7, #0]
    5154:	7e5b      	ldrb	r3, [r3, #25]
    5156:	2b00      	cmp	r3, #0
    5158:	d003      	beq.n	5162 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    515a:	683b      	ldr	r3, [r7, #0]
    515c:	7e9a      	ldrb	r2, [r3, #26]
    515e:	69bb      	ldr	r3, [r7, #24]
    5160:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5162:	687b      	ldr	r3, [r7, #4]
    5164:	0018      	movs	r0, r3
    5166:	4b3d      	ldr	r3, [pc, #244]	; (525c <_usart_set_config+0x2d4>)
    5168:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    516a:	230a      	movs	r3, #10
    516c:	18fb      	adds	r3, r7, r3
    516e:	881a      	ldrh	r2, [r3, #0]
    5170:	69bb      	ldr	r3, [r7, #24]
    5172:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    5174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5176:	68fb      	ldr	r3, [r7, #12]
    5178:	4313      	orrs	r3, r2
    517a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    517c:	683b      	ldr	r3, [r7, #0]
    517e:	2227      	movs	r2, #39	; 0x27
    5180:	5c9b      	ldrb	r3, [r3, r2]
    5182:	2201      	movs	r2, #1
    5184:	4053      	eors	r3, r2
    5186:	b2db      	uxtb	r3, r3
    5188:	2b00      	cmp	r3, #0
    518a:	d003      	beq.n	5194 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    518e:	2204      	movs	r2, #4
    5190:	4313      	orrs	r3, r2
    5192:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5194:	683b      	ldr	r3, [r7, #0]
    5196:	7e5b      	ldrb	r3, [r3, #25]
    5198:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    519a:	683b      	ldr	r3, [r7, #0]
    519c:	7f1b      	ldrb	r3, [r3, #28]
    519e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    51a0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    51a2:	683b      	ldr	r3, [r7, #0]
    51a4:	7f5b      	ldrb	r3, [r3, #29]
    51a6:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    51a8:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    51aa:	683b      	ldr	r3, [r7, #0]
    51ac:	2124      	movs	r1, #36	; 0x24
    51ae:	5c5b      	ldrb	r3, [r3, r1]
    51b0:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    51b2:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    51b4:	683b      	ldr	r3, [r7, #0]
    51b6:	2125      	movs	r1, #37	; 0x25
    51b8:	5c5b      	ldrb	r3, [r3, r1]
    51ba:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    51bc:	4313      	orrs	r3, r2
	ctrlb =  
    51be:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    51c0:	683b      	ldr	r3, [r7, #0]
    51c2:	7a9b      	ldrb	r3, [r3, #10]
    51c4:	001a      	movs	r2, r3
    51c6:	6a3b      	ldr	r3, [r7, #32]
    51c8:	4313      	orrs	r3, r2
    51ca:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    51cc:	683b      	ldr	r3, [r7, #0]
    51ce:	7adb      	ldrb	r3, [r3, #11]
    51d0:	001a      	movs	r2, r3
    51d2:	6a3b      	ldr	r3, [r7, #32]
    51d4:	4313      	orrs	r3, r2
    51d6:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    51d8:	683b      	ldr	r3, [r7, #0]
    51da:	891b      	ldrh	r3, [r3, #8]
    51dc:	2bff      	cmp	r3, #255	; 0xff
    51de:	d00b      	beq.n	51f8 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    51e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    51e2:	2280      	movs	r2, #128	; 0x80
    51e4:	0452      	lsls	r2, r2, #17
    51e6:	4313      	orrs	r3, r2
    51e8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    51ea:	683b      	ldr	r3, [r7, #0]
    51ec:	891b      	ldrh	r3, [r3, #8]
    51ee:	001a      	movs	r2, r3
    51f0:	6a3b      	ldr	r3, [r7, #32]
    51f2:	4313      	orrs	r3, r2
    51f4:	623b      	str	r3, [r7, #32]
    51f6:	e008      	b.n	520a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    51f8:	683b      	ldr	r3, [r7, #0]
    51fa:	7edb      	ldrb	r3, [r3, #27]
    51fc:	2b00      	cmp	r3, #0
    51fe:	d004      	beq.n	520a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5202:	2280      	movs	r2, #128	; 0x80
    5204:	04d2      	lsls	r2, r2, #19
    5206:	4313      	orrs	r3, r2
    5208:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    520a:	683b      	ldr	r3, [r7, #0]
    520c:	222c      	movs	r2, #44	; 0x2c
    520e:	5c9b      	ldrb	r3, [r3, r2]
    5210:	2b00      	cmp	r3, #0
    5212:	d103      	bne.n	521c <_usart_set_config+0x294>
    5214:	4b12      	ldr	r3, [pc, #72]	; (5260 <_usart_set_config+0x2d8>)
    5216:	4798      	blx	r3
    5218:	1e03      	subs	r3, r0, #0
    521a:	d003      	beq.n	5224 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    521e:	2280      	movs	r2, #128	; 0x80
    5220:	4313      	orrs	r3, r2
    5222:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5224:	687b      	ldr	r3, [r7, #4]
    5226:	0018      	movs	r0, r3
    5228:	4b0c      	ldr	r3, [pc, #48]	; (525c <_usart_set_config+0x2d4>)
    522a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    522c:	69bb      	ldr	r3, [r7, #24]
    522e:	6a3a      	ldr	r2, [r7, #32]
    5230:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5232:	687b      	ldr	r3, [r7, #4]
    5234:	0018      	movs	r0, r3
    5236:	4b09      	ldr	r3, [pc, #36]	; (525c <_usart_set_config+0x2d4>)
    5238:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    523a:	69bb      	ldr	r3, [r7, #24]
    523c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    523e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    5240:	2300      	movs	r3, #0
}
    5242:	0018      	movs	r0, r3
    5244:	46bd      	mov	sp, r7
    5246:	b00a      	add	sp, #40	; 0x28
    5248:	bdb0      	pop	{r4, r5, r7, pc}
    524a:	46c0      	nop			; (mov r8, r8)
    524c:	00003cf1 	.word	0x00003cf1
    5250:	00006929 	.word	0x00006929
    5254:	0000386b 	.word	0x0000386b
    5258:	000038e9 	.word	0x000038e9
    525c:	00004f65 	.word	0x00004f65
    5260:	00004f25 	.word	0x00004f25

00005264 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5264:	b590      	push	{r4, r7, lr}
    5266:	b093      	sub	sp, #76	; 0x4c
    5268:	af00      	add	r7, sp, #0
    526a:	60f8      	str	r0, [r7, #12]
    526c:	60b9      	str	r1, [r7, #8]
    526e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    5270:	233b      	movs	r3, #59	; 0x3b
    5272:	18fb      	adds	r3, r7, r3
    5274:	2200      	movs	r2, #0
    5276:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5278:	68fb      	ldr	r3, [r7, #12]
    527a:	68ba      	ldr	r2, [r7, #8]
    527c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    527e:	68fb      	ldr	r3, [r7, #12]
    5280:	681b      	ldr	r3, [r3, #0]
    5282:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5284:	68fb      	ldr	r3, [r7, #12]
    5286:	681b      	ldr	r3, [r3, #0]
    5288:	0018      	movs	r0, r3
    528a:	4b86      	ldr	r3, [pc, #536]	; (54a4 <usart_init+0x240>)
    528c:	4798      	blx	r3
    528e:	0003      	movs	r3, r0
    5290:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5294:	3302      	adds	r3, #2
    5296:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    529a:	3314      	adds	r3, #20
    529c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    529e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52a0:	681b      	ldr	r3, [r3, #0]
    52a2:	2201      	movs	r2, #1
    52a4:	4013      	ands	r3, r2
    52a6:	d001      	beq.n	52ac <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    52a8:	2305      	movs	r3, #5
    52aa:	e0f6      	b.n	549a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    52ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52ae:	681b      	ldr	r3, [r3, #0]
    52b0:	2202      	movs	r2, #2
    52b2:	4013      	ands	r3, r2
    52b4:	d001      	beq.n	52ba <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    52b6:	231c      	movs	r3, #28
    52b8:	e0ef      	b.n	549a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    52ba:	2201      	movs	r2, #1
    52bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    52be:	409a      	lsls	r2, r3
    52c0:	0013      	movs	r3, r2
    52c2:	0019      	movs	r1, r3
    52c4:	2002      	movs	r0, #2
    52c6:	4b78      	ldr	r3, [pc, #480]	; (54a8 <usart_init+0x244>)
    52c8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    52ca:	2324      	movs	r3, #36	; 0x24
    52cc:	18fb      	adds	r3, r7, r3
    52ce:	0018      	movs	r0, r3
    52d0:	4b76      	ldr	r3, [pc, #472]	; (54ac <usart_init+0x248>)
    52d2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    52d4:	687b      	ldr	r3, [r7, #4]
    52d6:	222d      	movs	r2, #45	; 0x2d
    52d8:	5c9a      	ldrb	r2, [r3, r2]
    52da:	2324      	movs	r3, #36	; 0x24
    52dc:	18fb      	adds	r3, r7, r3
    52de:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    52e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    52e2:	b2db      	uxtb	r3, r3
    52e4:	2224      	movs	r2, #36	; 0x24
    52e6:	18ba      	adds	r2, r7, r2
    52e8:	0011      	movs	r1, r2
    52ea:	0018      	movs	r0, r3
    52ec:	4b70      	ldr	r3, [pc, #448]	; (54b0 <usart_init+0x24c>)
    52ee:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    52f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    52f2:	b2db      	uxtb	r3, r3
    52f4:	0018      	movs	r0, r3
    52f6:	4b6f      	ldr	r3, [pc, #444]	; (54b4 <usart_init+0x250>)
    52f8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    52fa:	687b      	ldr	r3, [r7, #4]
    52fc:	222d      	movs	r2, #45	; 0x2d
    52fe:	5c9b      	ldrb	r3, [r3, r2]
    5300:	2100      	movs	r1, #0
    5302:	0018      	movs	r0, r3
    5304:	4b6c      	ldr	r3, [pc, #432]	; (54b8 <usart_init+0x254>)
    5306:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    5308:	687b      	ldr	r3, [r7, #4]
    530a:	7ada      	ldrb	r2, [r3, #11]
    530c:	68fb      	ldr	r3, [r7, #12]
    530e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    5310:	687b      	ldr	r3, [r7, #4]
    5312:	2224      	movs	r2, #36	; 0x24
    5314:	5c9a      	ldrb	r2, [r3, r2]
    5316:	68fb      	ldr	r3, [r7, #12]
    5318:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    531a:	687b      	ldr	r3, [r7, #4]
    531c:	2225      	movs	r2, #37	; 0x25
    531e:	5c9a      	ldrb	r2, [r3, r2]
    5320:	68fb      	ldr	r3, [r7, #12]
    5322:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    5324:	687b      	ldr	r3, [r7, #4]
    5326:	7eda      	ldrb	r2, [r3, #27]
    5328:	68fb      	ldr	r3, [r7, #12]
    532a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    532c:	687b      	ldr	r3, [r7, #4]
    532e:	7f1a      	ldrb	r2, [r3, #28]
    5330:	68fb      	ldr	r3, [r7, #12]
    5332:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    5334:	233b      	movs	r3, #59	; 0x3b
    5336:	18fc      	adds	r4, r7, r3
    5338:	687a      	ldr	r2, [r7, #4]
    533a:	68fb      	ldr	r3, [r7, #12]
    533c:	0011      	movs	r1, r2
    533e:	0018      	movs	r0, r3
    5340:	4b5e      	ldr	r3, [pc, #376]	; (54bc <usart_init+0x258>)
    5342:	4798      	blx	r3
    5344:	0003      	movs	r3, r0
    5346:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    5348:	233b      	movs	r3, #59	; 0x3b
    534a:	18fb      	adds	r3, r7, r3
    534c:	781b      	ldrb	r3, [r3, #0]
    534e:	2b00      	cmp	r3, #0
    5350:	d003      	beq.n	535a <usart_init+0xf6>
		return status_code;
    5352:	233b      	movs	r3, #59	; 0x3b
    5354:	18fb      	adds	r3, r7, r3
    5356:	781b      	ldrb	r3, [r3, #0]
    5358:	e09f      	b.n	549a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    535a:	2320      	movs	r3, #32
    535c:	18fb      	adds	r3, r7, r3
    535e:	0018      	movs	r0, r3
    5360:	4b57      	ldr	r3, [pc, #348]	; (54c0 <usart_init+0x25c>)
    5362:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5364:	2320      	movs	r3, #32
    5366:	18fb      	adds	r3, r7, r3
    5368:	2200      	movs	r2, #0
    536a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    536c:	2320      	movs	r3, #32
    536e:	18fb      	adds	r3, r7, r3
    5370:	2200      	movs	r2, #0
    5372:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    5374:	687b      	ldr	r3, [r7, #4]
    5376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    5378:	2310      	movs	r3, #16
    537a:	18fb      	adds	r3, r7, r3
    537c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    537e:	687b      	ldr	r3, [r7, #4]
    5380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    5382:	2310      	movs	r3, #16
    5384:	18fb      	adds	r3, r7, r3
    5386:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    5388:	687b      	ldr	r3, [r7, #4]
    538a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    538c:	2310      	movs	r3, #16
    538e:	18fb      	adds	r3, r7, r3
    5390:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    5392:	687b      	ldr	r3, [r7, #4]
    5394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    5396:	2310      	movs	r3, #16
    5398:	18fb      	adds	r3, r7, r3
    539a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    539c:	2347      	movs	r3, #71	; 0x47
    539e:	18fb      	adds	r3, r7, r3
    53a0:	2200      	movs	r2, #0
    53a2:	701a      	strb	r2, [r3, #0]
    53a4:	e02c      	b.n	5400 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    53a6:	2347      	movs	r3, #71	; 0x47
    53a8:	18fb      	adds	r3, r7, r3
    53aa:	781a      	ldrb	r2, [r3, #0]
    53ac:	2310      	movs	r3, #16
    53ae:	18fb      	adds	r3, r7, r3
    53b0:	0092      	lsls	r2, r2, #2
    53b2:	58d3      	ldr	r3, [r2, r3]
    53b4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    53b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    53b8:	2b00      	cmp	r3, #0
    53ba:	d109      	bne.n	53d0 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    53bc:	2347      	movs	r3, #71	; 0x47
    53be:	18fb      	adds	r3, r7, r3
    53c0:	781a      	ldrb	r2, [r3, #0]
    53c2:	68bb      	ldr	r3, [r7, #8]
    53c4:	0011      	movs	r1, r2
    53c6:	0018      	movs	r0, r3
    53c8:	4b3e      	ldr	r3, [pc, #248]	; (54c4 <usart_init+0x260>)
    53ca:	4798      	blx	r3
    53cc:	0003      	movs	r3, r0
    53ce:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    53d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    53d2:	3301      	adds	r3, #1
    53d4:	d00d      	beq.n	53f2 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    53d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    53d8:	b2da      	uxtb	r2, r3
    53da:	2320      	movs	r3, #32
    53dc:	18fb      	adds	r3, r7, r3
    53de:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    53e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    53e2:	0c1b      	lsrs	r3, r3, #16
    53e4:	b2db      	uxtb	r3, r3
    53e6:	2220      	movs	r2, #32
    53e8:	18ba      	adds	r2, r7, r2
    53ea:	0011      	movs	r1, r2
    53ec:	0018      	movs	r0, r3
    53ee:	4b36      	ldr	r3, [pc, #216]	; (54c8 <usart_init+0x264>)
    53f0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    53f2:	2347      	movs	r3, #71	; 0x47
    53f4:	18fb      	adds	r3, r7, r3
    53f6:	781a      	ldrb	r2, [r3, #0]
    53f8:	2347      	movs	r3, #71	; 0x47
    53fa:	18fb      	adds	r3, r7, r3
    53fc:	3201      	adds	r2, #1
    53fe:	701a      	strb	r2, [r3, #0]
    5400:	2347      	movs	r3, #71	; 0x47
    5402:	18fb      	adds	r3, r7, r3
    5404:	781b      	ldrb	r3, [r3, #0]
    5406:	2b03      	cmp	r3, #3
    5408:	d9cd      	bls.n	53a6 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    540a:	2300      	movs	r3, #0
    540c:	63fb      	str	r3, [r7, #60]	; 0x3c
    540e:	e00a      	b.n	5426 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    5410:	68fa      	ldr	r2, [r7, #12]
    5412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5414:	3302      	adds	r3, #2
    5416:	009b      	lsls	r3, r3, #2
    5418:	18d3      	adds	r3, r2, r3
    541a:	3304      	adds	r3, #4
    541c:	2200      	movs	r2, #0
    541e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5422:	3301      	adds	r3, #1
    5424:	63fb      	str	r3, [r7, #60]	; 0x3c
    5426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5428:	2b05      	cmp	r3, #5
    542a:	d9f1      	bls.n	5410 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    542c:	68fb      	ldr	r3, [r7, #12]
    542e:	2200      	movs	r2, #0
    5430:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5432:	68fb      	ldr	r3, [r7, #12]
    5434:	2200      	movs	r2, #0
    5436:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5438:	68fb      	ldr	r3, [r7, #12]
    543a:	2200      	movs	r2, #0
    543c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    543e:	68fb      	ldr	r3, [r7, #12]
    5440:	2200      	movs	r2, #0
    5442:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5444:	68fb      	ldr	r3, [r7, #12]
    5446:	2230      	movs	r2, #48	; 0x30
    5448:	2100      	movs	r1, #0
    544a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    544c:	68fb      	ldr	r3, [r7, #12]
    544e:	2231      	movs	r2, #49	; 0x31
    5450:	2100      	movs	r1, #0
    5452:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    5454:	68fb      	ldr	r3, [r7, #12]
    5456:	2232      	movs	r2, #50	; 0x32
    5458:	2100      	movs	r1, #0
    545a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    545c:	68fb      	ldr	r3, [r7, #12]
    545e:	2233      	movs	r2, #51	; 0x33
    5460:	2100      	movs	r1, #0
    5462:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5464:	68fb      	ldr	r3, [r7, #12]
    5466:	681b      	ldr	r3, [r3, #0]
    5468:	2227      	movs	r2, #39	; 0x27
    546a:	18bc      	adds	r4, r7, r2
    546c:	0018      	movs	r0, r3
    546e:	4b0d      	ldr	r3, [pc, #52]	; (54a4 <usart_init+0x240>)
    5470:	4798      	blx	r3
    5472:	0003      	movs	r3, r0
    5474:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5476:	4a15      	ldr	r2, [pc, #84]	; (54cc <usart_init+0x268>)
    5478:	2327      	movs	r3, #39	; 0x27
    547a:	18fb      	adds	r3, r7, r3
    547c:	781b      	ldrb	r3, [r3, #0]
    547e:	0011      	movs	r1, r2
    5480:	0018      	movs	r0, r3
    5482:	4b13      	ldr	r3, [pc, #76]	; (54d0 <usart_init+0x26c>)
    5484:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5486:	2327      	movs	r3, #39	; 0x27
    5488:	18fb      	adds	r3, r7, r3
    548a:	781a      	ldrb	r2, [r3, #0]
    548c:	4b11      	ldr	r3, [pc, #68]	; (54d4 <usart_init+0x270>)
    548e:	0092      	lsls	r2, r2, #2
    5490:	68f9      	ldr	r1, [r7, #12]
    5492:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    5494:	233b      	movs	r3, #59	; 0x3b
    5496:	18fb      	adds	r3, r7, r3
    5498:	781b      	ldrb	r3, [r3, #0]
}
    549a:	0018      	movs	r0, r3
    549c:	46bd      	mov	sp, r7
    549e:	b013      	add	sp, #76	; 0x4c
    54a0:	bd90      	pop	{r4, r7, pc}
    54a2:	46c0      	nop			; (mov r8, r8)
    54a4:	00003cf1 	.word	0x00003cf1
    54a8:	00004ea1 	.word	0x00004ea1
    54ac:	00004e89 	.word	0x00004e89
    54b0:	00006805 	.word	0x00006805
    54b4:	00006849 	.word	0x00006849
    54b8:	00003aa9 	.word	0x00003aa9
    54bc:	00004f89 	.word	0x00004f89
    54c0:	00004efd 	.word	0x00004efd
    54c4:	00003b35 	.word	0x00003b35
    54c8:	00006af1 	.word	0x00006af1
    54cc:	00005891 	.word	0x00005891
    54d0:	00003d55 	.word	0x00003d55
    54d4:	200009d4 	.word	0x200009d4

000054d8 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    54d8:	b580      	push	{r7, lr}
    54da:	b084      	sub	sp, #16
    54dc:	af00      	add	r7, sp, #0
    54de:	6078      	str	r0, [r7, #4]
    54e0:	000a      	movs	r2, r1
    54e2:	1cbb      	adds	r3, r7, #2
    54e4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    54e6:	687b      	ldr	r3, [r7, #4]
    54e8:	681b      	ldr	r3, [r3, #0]
    54ea:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    54ec:	687b      	ldr	r3, [r7, #4]
    54ee:	79db      	ldrb	r3, [r3, #7]
    54f0:	2201      	movs	r2, #1
    54f2:	4053      	eors	r3, r2
    54f4:	b2db      	uxtb	r3, r3
    54f6:	2b00      	cmp	r3, #0
    54f8:	d001      	beq.n	54fe <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    54fa:	231c      	movs	r3, #28
    54fc:	e017      	b.n	552e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    54fe:	687b      	ldr	r3, [r7, #4]
    5500:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5502:	b29b      	uxth	r3, r3
    5504:	2b00      	cmp	r3, #0
    5506:	d001      	beq.n	550c <usart_write_wait+0x34>
		return STATUS_BUSY;
    5508:	2305      	movs	r3, #5
    550a:	e010      	b.n	552e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    550c:	687b      	ldr	r3, [r7, #4]
    550e:	0018      	movs	r0, r3
    5510:	4b09      	ldr	r3, [pc, #36]	; (5538 <usart_write_wait+0x60>)
    5512:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    5514:	68fb      	ldr	r3, [r7, #12]
    5516:	1cba      	adds	r2, r7, #2
    5518:	8812      	ldrh	r2, [r2, #0]
    551a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    551c:	46c0      	nop			; (mov r8, r8)
    551e:	68fb      	ldr	r3, [r7, #12]
    5520:	7e1b      	ldrb	r3, [r3, #24]
    5522:	b2db      	uxtb	r3, r3
    5524:	001a      	movs	r2, r3
    5526:	2302      	movs	r3, #2
    5528:	4013      	ands	r3, r2
    552a:	d0f8      	beq.n	551e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    552c:	2300      	movs	r3, #0
}
    552e:	0018      	movs	r0, r3
    5530:	46bd      	mov	sp, r7
    5532:	b004      	add	sp, #16
    5534:	bd80      	pop	{r7, pc}
    5536:	46c0      	nop			; (mov r8, r8)
    5538:	00004f65 	.word	0x00004f65

0000553c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    553c:	b580      	push	{r7, lr}
    553e:	b084      	sub	sp, #16
    5540:	af00      	add	r7, sp, #0
    5542:	6078      	str	r0, [r7, #4]
    5544:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5546:	687b      	ldr	r3, [r7, #4]
    5548:	681b      	ldr	r3, [r3, #0]
    554a:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    554c:	687b      	ldr	r3, [r7, #4]
    554e:	799b      	ldrb	r3, [r3, #6]
    5550:	2201      	movs	r2, #1
    5552:	4053      	eors	r3, r2
    5554:	b2db      	uxtb	r3, r3
    5556:	2b00      	cmp	r3, #0
    5558:	d001      	beq.n	555e <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    555a:	231c      	movs	r3, #28
    555c:	e05e      	b.n	561c <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    555e:	687b      	ldr	r3, [r7, #4]
    5560:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5562:	b29b      	uxth	r3, r3
    5564:	2b00      	cmp	r3, #0
    5566:	d001      	beq.n	556c <usart_read_wait+0x30>
		return STATUS_BUSY;
    5568:	2305      	movs	r3, #5
    556a:	e057      	b.n	561c <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    556c:	68fb      	ldr	r3, [r7, #12]
    556e:	7e1b      	ldrb	r3, [r3, #24]
    5570:	b2db      	uxtb	r3, r3
    5572:	001a      	movs	r2, r3
    5574:	2304      	movs	r3, #4
    5576:	4013      	ands	r3, r2
    5578:	d101      	bne.n	557e <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    557a:	2305      	movs	r3, #5
    557c:	e04e      	b.n	561c <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    557e:	687b      	ldr	r3, [r7, #4]
    5580:	0018      	movs	r0, r3
    5582:	4b28      	ldr	r3, [pc, #160]	; (5624 <usart_read_wait+0xe8>)
    5584:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5586:	68fb      	ldr	r3, [r7, #12]
    5588:	8b5b      	ldrh	r3, [r3, #26]
    558a:	b29b      	uxth	r3, r3
    558c:	b2da      	uxtb	r2, r3
    558e:	230b      	movs	r3, #11
    5590:	18fb      	adds	r3, r7, r3
    5592:	213f      	movs	r1, #63	; 0x3f
    5594:	400a      	ands	r2, r1
    5596:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    5598:	230b      	movs	r3, #11
    559a:	18fb      	adds	r3, r7, r3
    559c:	781b      	ldrb	r3, [r3, #0]
    559e:	2b00      	cmp	r3, #0
    55a0:	d036      	beq.n	5610 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    55a2:	230b      	movs	r3, #11
    55a4:	18fb      	adds	r3, r7, r3
    55a6:	781b      	ldrb	r3, [r3, #0]
    55a8:	2202      	movs	r2, #2
    55aa:	4013      	ands	r3, r2
    55ac:	d004      	beq.n	55b8 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    55ae:	68fb      	ldr	r3, [r7, #12]
    55b0:	2202      	movs	r2, #2
    55b2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    55b4:	231a      	movs	r3, #26
    55b6:	e031      	b.n	561c <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    55b8:	230b      	movs	r3, #11
    55ba:	18fb      	adds	r3, r7, r3
    55bc:	781b      	ldrb	r3, [r3, #0]
    55be:	2204      	movs	r2, #4
    55c0:	4013      	ands	r3, r2
    55c2:	d004      	beq.n	55ce <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    55c4:	68fb      	ldr	r3, [r7, #12]
    55c6:	2204      	movs	r2, #4
    55c8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    55ca:	231e      	movs	r3, #30
    55cc:	e026      	b.n	561c <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    55ce:	230b      	movs	r3, #11
    55d0:	18fb      	adds	r3, r7, r3
    55d2:	781b      	ldrb	r3, [r3, #0]
    55d4:	2201      	movs	r2, #1
    55d6:	4013      	ands	r3, r2
    55d8:	d004      	beq.n	55e4 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    55da:	68fb      	ldr	r3, [r7, #12]
    55dc:	2201      	movs	r2, #1
    55de:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    55e0:	2313      	movs	r3, #19
    55e2:	e01b      	b.n	561c <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    55e4:	230b      	movs	r3, #11
    55e6:	18fb      	adds	r3, r7, r3
    55e8:	781b      	ldrb	r3, [r3, #0]
    55ea:	2210      	movs	r2, #16
    55ec:	4013      	ands	r3, r2
    55ee:	d004      	beq.n	55fa <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    55f0:	68fb      	ldr	r3, [r7, #12]
    55f2:	2210      	movs	r2, #16
    55f4:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    55f6:	2342      	movs	r3, #66	; 0x42
    55f8:	e010      	b.n	561c <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    55fa:	230b      	movs	r3, #11
    55fc:	18fb      	adds	r3, r7, r3
    55fe:	781b      	ldrb	r3, [r3, #0]
    5600:	2220      	movs	r2, #32
    5602:	4013      	ands	r3, r2
    5604:	d004      	beq.n	5610 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5606:	68fb      	ldr	r3, [r7, #12]
    5608:	2220      	movs	r2, #32
    560a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    560c:	2341      	movs	r3, #65	; 0x41
    560e:	e005      	b.n	561c <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    5610:	68fb      	ldr	r3, [r7, #12]
    5612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5614:	b29a      	uxth	r2, r3
    5616:	683b      	ldr	r3, [r7, #0]
    5618:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    561a:	2300      	movs	r3, #0
}
    561c:	0018      	movs	r0, r3
    561e:	46bd      	mov	sp, r7
    5620:	b004      	add	sp, #16
    5622:	bd80      	pop	{r7, pc}
    5624:	00004f65 	.word	0x00004f65

00005628 <system_interrupt_enter_critical_section>:
{
    5628:	b580      	push	{r7, lr}
    562a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    562c:	4b02      	ldr	r3, [pc, #8]	; (5638 <system_interrupt_enter_critical_section+0x10>)
    562e:	4798      	blx	r3
}
    5630:	46c0      	nop			; (mov r8, r8)
    5632:	46bd      	mov	sp, r7
    5634:	bd80      	pop	{r7, pc}
    5636:	46c0      	nop			; (mov r8, r8)
    5638:	00003179 	.word	0x00003179

0000563c <system_interrupt_leave_critical_section>:
{
    563c:	b580      	push	{r7, lr}
    563e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5640:	4b02      	ldr	r3, [pc, #8]	; (564c <system_interrupt_leave_critical_section+0x10>)
    5642:	4798      	blx	r3
}
    5644:	46c0      	nop			; (mov r8, r8)
    5646:	46bd      	mov	sp, r7
    5648:	bd80      	pop	{r7, pc}
    564a:	46c0      	nop			; (mov r8, r8)
    564c:	000031cd 	.word	0x000031cd

00005650 <usart_is_syncing>:
{
    5650:	b580      	push	{r7, lr}
    5652:	b084      	sub	sp, #16
    5654:	af00      	add	r7, sp, #0
    5656:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5658:	687b      	ldr	r3, [r7, #4]
    565a:	681b      	ldr	r3, [r3, #0]
    565c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    565e:	68fb      	ldr	r3, [r7, #12]
    5660:	69db      	ldr	r3, [r3, #28]
    5662:	1e5a      	subs	r2, r3, #1
    5664:	4193      	sbcs	r3, r2
    5666:	b2db      	uxtb	r3, r3
}
    5668:	0018      	movs	r0, r3
    566a:	46bd      	mov	sp, r7
    566c:	b004      	add	sp, #16
    566e:	bd80      	pop	{r7, pc}

00005670 <_usart_wait_for_sync>:
{
    5670:	b580      	push	{r7, lr}
    5672:	b082      	sub	sp, #8
    5674:	af00      	add	r7, sp, #0
    5676:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    5678:	46c0      	nop			; (mov r8, r8)
    567a:	687b      	ldr	r3, [r7, #4]
    567c:	0018      	movs	r0, r3
    567e:	4b04      	ldr	r3, [pc, #16]	; (5690 <_usart_wait_for_sync+0x20>)
    5680:	4798      	blx	r3
    5682:	1e03      	subs	r3, r0, #0
    5684:	d1f9      	bne.n	567a <_usart_wait_for_sync+0xa>
}
    5686:	46c0      	nop			; (mov r8, r8)
    5688:	46bd      	mov	sp, r7
    568a:	b002      	add	sp, #8
    568c:	bd80      	pop	{r7, pc}
    568e:	46c0      	nop			; (mov r8, r8)
    5690:	00005651 	.word	0x00005651

00005694 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5694:	b580      	push	{r7, lr}
    5696:	b086      	sub	sp, #24
    5698:	af00      	add	r7, sp, #0
    569a:	60f8      	str	r0, [r7, #12]
    569c:	60b9      	str	r1, [r7, #8]
    569e:	1dbb      	adds	r3, r7, #6
    56a0:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    56a2:	68fb      	ldr	r3, [r7, #12]
    56a4:	681b      	ldr	r3, [r3, #0]
    56a6:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    56a8:	4b0f      	ldr	r3, [pc, #60]	; (56e8 <_usart_write_buffer+0x54>)
    56aa:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    56ac:	68fb      	ldr	r3, [r7, #12]
    56ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    56b0:	b29b      	uxth	r3, r3
    56b2:	2b00      	cmp	r3, #0
    56b4:	d003      	beq.n	56be <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    56b6:	4b0d      	ldr	r3, [pc, #52]	; (56ec <_usart_write_buffer+0x58>)
    56b8:	4798      	blx	r3
		return STATUS_BUSY;
    56ba:	2305      	movs	r3, #5
    56bc:	e010      	b.n	56e0 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    56be:	68fb      	ldr	r3, [r7, #12]
    56c0:	1dba      	adds	r2, r7, #6
    56c2:	8812      	ldrh	r2, [r2, #0]
    56c4:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    56c6:	4b09      	ldr	r3, [pc, #36]	; (56ec <_usart_write_buffer+0x58>)
    56c8:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    56ca:	68fb      	ldr	r3, [r7, #12]
    56cc:	68ba      	ldr	r2, [r7, #8]
    56ce:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    56d0:	68fb      	ldr	r3, [r7, #12]
    56d2:	2233      	movs	r2, #51	; 0x33
    56d4:	2105      	movs	r1, #5
    56d6:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    56d8:	697b      	ldr	r3, [r7, #20]
    56da:	2201      	movs	r2, #1
    56dc:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    56de:	2300      	movs	r3, #0
}
    56e0:	0018      	movs	r0, r3
    56e2:	46bd      	mov	sp, r7
    56e4:	b006      	add	sp, #24
    56e6:	bd80      	pop	{r7, pc}
    56e8:	00005629 	.word	0x00005629
    56ec:	0000563d 	.word	0x0000563d

000056f0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    56f0:	b580      	push	{r7, lr}
    56f2:	b086      	sub	sp, #24
    56f4:	af00      	add	r7, sp, #0
    56f6:	60f8      	str	r0, [r7, #12]
    56f8:	60b9      	str	r1, [r7, #8]
    56fa:	1dbb      	adds	r3, r7, #6
    56fc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    56fe:	68fb      	ldr	r3, [r7, #12]
    5700:	681b      	ldr	r3, [r3, #0]
    5702:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5704:	4b16      	ldr	r3, [pc, #88]	; (5760 <_usart_read_buffer+0x70>)
    5706:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    5708:	68fb      	ldr	r3, [r7, #12]
    570a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    570c:	b29b      	uxth	r3, r3
    570e:	2b00      	cmp	r3, #0
    5710:	d003      	beq.n	571a <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    5712:	4b14      	ldr	r3, [pc, #80]	; (5764 <_usart_read_buffer+0x74>)
    5714:	4798      	blx	r3
		return STATUS_BUSY;
    5716:	2305      	movs	r3, #5
    5718:	e01e      	b.n	5758 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    571a:	68fb      	ldr	r3, [r7, #12]
    571c:	1dba      	adds	r2, r7, #6
    571e:	8812      	ldrh	r2, [r2, #0]
    5720:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    5722:	4b10      	ldr	r3, [pc, #64]	; (5764 <_usart_read_buffer+0x74>)
    5724:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    5726:	68fb      	ldr	r3, [r7, #12]
    5728:	68ba      	ldr	r2, [r7, #8]
    572a:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    572c:	68fb      	ldr	r3, [r7, #12]
    572e:	2232      	movs	r2, #50	; 0x32
    5730:	2105      	movs	r1, #5
    5732:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    5734:	697b      	ldr	r3, [r7, #20]
    5736:	2204      	movs	r2, #4
    5738:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    573a:	68fb      	ldr	r3, [r7, #12]
    573c:	7a1b      	ldrb	r3, [r3, #8]
    573e:	2b00      	cmp	r3, #0
    5740:	d002      	beq.n	5748 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    5742:	697b      	ldr	r3, [r7, #20]
    5744:	2220      	movs	r2, #32
    5746:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    5748:	68fb      	ldr	r3, [r7, #12]
    574a:	7a5b      	ldrb	r3, [r3, #9]
    574c:	2b00      	cmp	r3, #0
    574e:	d002      	beq.n	5756 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    5750:	697b      	ldr	r3, [r7, #20]
    5752:	2208      	movs	r2, #8
    5754:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    5756:	2300      	movs	r3, #0
}
    5758:	0018      	movs	r0, r3
    575a:	46bd      	mov	sp, r7
    575c:	b006      	add	sp, #24
    575e:	bd80      	pop	{r7, pc}
    5760:	00005629 	.word	0x00005629
    5764:	0000563d 	.word	0x0000563d

00005768 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    5768:	b580      	push	{r7, lr}
    576a:	b084      	sub	sp, #16
    576c:	af00      	add	r7, sp, #0
    576e:	60f8      	str	r0, [r7, #12]
    5770:	60b9      	str	r1, [r7, #8]
    5772:	1dfb      	adds	r3, r7, #7
    5774:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5776:	1dfb      	adds	r3, r7, #7
    5778:	781b      	ldrb	r3, [r3, #0]
    577a:	68fa      	ldr	r2, [r7, #12]
    577c:	3302      	adds	r3, #2
    577e:	009b      	lsls	r3, r3, #2
    5780:	18d3      	adds	r3, r2, r3
    5782:	3304      	adds	r3, #4
    5784:	68ba      	ldr	r2, [r7, #8]
    5786:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    5788:	68fb      	ldr	r3, [r7, #12]
    578a:	2230      	movs	r2, #48	; 0x30
    578c:	5c9b      	ldrb	r3, [r3, r2]
    578e:	b25a      	sxtb	r2, r3
    5790:	1dfb      	adds	r3, r7, #7
    5792:	781b      	ldrb	r3, [r3, #0]
    5794:	2101      	movs	r1, #1
    5796:	4099      	lsls	r1, r3
    5798:	000b      	movs	r3, r1
    579a:	b25b      	sxtb	r3, r3
    579c:	4313      	orrs	r3, r2
    579e:	b25b      	sxtb	r3, r3
    57a0:	b2d9      	uxtb	r1, r3
    57a2:	68fb      	ldr	r3, [r7, #12]
    57a4:	2230      	movs	r2, #48	; 0x30
    57a6:	5499      	strb	r1, [r3, r2]
}
    57a8:	46c0      	nop			; (mov r8, r8)
    57aa:	46bd      	mov	sp, r7
    57ac:	b004      	add	sp, #16
    57ae:	bd80      	pop	{r7, pc}

000057b0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    57b0:	b580      	push	{r7, lr}
    57b2:	b084      	sub	sp, #16
    57b4:	af00      	add	r7, sp, #0
    57b6:	60f8      	str	r0, [r7, #12]
    57b8:	60b9      	str	r1, [r7, #8]
    57ba:	1dbb      	adds	r3, r7, #6
    57bc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    57be:	1dbb      	adds	r3, r7, #6
    57c0:	881b      	ldrh	r3, [r3, #0]
    57c2:	2b00      	cmp	r3, #0
    57c4:	d101      	bne.n	57ca <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    57c6:	2317      	movs	r3, #23
    57c8:	e010      	b.n	57ec <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    57ca:	68fb      	ldr	r3, [r7, #12]
    57cc:	79db      	ldrb	r3, [r3, #7]
    57ce:	2201      	movs	r2, #1
    57d0:	4053      	eors	r3, r2
    57d2:	b2db      	uxtb	r3, r3
    57d4:	2b00      	cmp	r3, #0
    57d6:	d001      	beq.n	57dc <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    57d8:	231c      	movs	r3, #28
    57da:	e007      	b.n	57ec <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    57dc:	1dbb      	adds	r3, r7, #6
    57de:	881a      	ldrh	r2, [r3, #0]
    57e0:	68b9      	ldr	r1, [r7, #8]
    57e2:	68fb      	ldr	r3, [r7, #12]
    57e4:	0018      	movs	r0, r3
    57e6:	4b03      	ldr	r3, [pc, #12]	; (57f4 <usart_write_buffer_job+0x44>)
    57e8:	4798      	blx	r3
    57ea:	0003      	movs	r3, r0
}
    57ec:	0018      	movs	r0, r3
    57ee:	46bd      	mov	sp, r7
    57f0:	b004      	add	sp, #16
    57f2:	bd80      	pop	{r7, pc}
    57f4:	00005695 	.word	0x00005695

000057f8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    57f8:	b580      	push	{r7, lr}
    57fa:	b084      	sub	sp, #16
    57fc:	af00      	add	r7, sp, #0
    57fe:	60f8      	str	r0, [r7, #12]
    5800:	60b9      	str	r1, [r7, #8]
    5802:	1dbb      	adds	r3, r7, #6
    5804:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    5806:	1dbb      	adds	r3, r7, #6
    5808:	881b      	ldrh	r3, [r3, #0]
    580a:	2b00      	cmp	r3, #0
    580c:	d101      	bne.n	5812 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    580e:	2317      	movs	r3, #23
    5810:	e010      	b.n	5834 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5812:	68fb      	ldr	r3, [r7, #12]
    5814:	799b      	ldrb	r3, [r3, #6]
    5816:	2201      	movs	r2, #1
    5818:	4053      	eors	r3, r2
    581a:	b2db      	uxtb	r3, r3
    581c:	2b00      	cmp	r3, #0
    581e:	d001      	beq.n	5824 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5820:	231c      	movs	r3, #28
    5822:	e007      	b.n	5834 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    5824:	1dbb      	adds	r3, r7, #6
    5826:	881a      	ldrh	r2, [r3, #0]
    5828:	68b9      	ldr	r1, [r7, #8]
    582a:	68fb      	ldr	r3, [r7, #12]
    582c:	0018      	movs	r0, r3
    582e:	4b03      	ldr	r3, [pc, #12]	; (583c <usart_read_buffer_job+0x44>)
    5830:	4798      	blx	r3
    5832:	0003      	movs	r3, r0
}
    5834:	0018      	movs	r0, r3
    5836:	46bd      	mov	sp, r7
    5838:	b004      	add	sp, #16
    583a:	bd80      	pop	{r7, pc}
    583c:	000056f1 	.word	0x000056f1

00005840 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    5840:	b580      	push	{r7, lr}
    5842:	b084      	sub	sp, #16
    5844:	af00      	add	r7, sp, #0
    5846:	6078      	str	r0, [r7, #4]
    5848:	000a      	movs	r2, r1
    584a:	1cfb      	adds	r3, r7, #3
    584c:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    584e:	1cfb      	adds	r3, r7, #3
    5850:	781b      	ldrb	r3, [r3, #0]
    5852:	2b00      	cmp	r3, #0
    5854:	d002      	beq.n	585c <usart_get_job_status+0x1c>
    5856:	2b01      	cmp	r3, #1
    5858:	d007      	beq.n	586a <usart_get_job_status+0x2a>
    585a:	e00d      	b.n	5878 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    585c:	230f      	movs	r3, #15
    585e:	18fb      	adds	r3, r7, r3
    5860:	687a      	ldr	r2, [r7, #4]
    5862:	2132      	movs	r1, #50	; 0x32
    5864:	5c52      	ldrb	r2, [r2, r1]
    5866:	701a      	strb	r2, [r3, #0]
			break;
    5868:	e00b      	b.n	5882 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    586a:	230f      	movs	r3, #15
    586c:	18fb      	adds	r3, r7, r3
    586e:	687a      	ldr	r2, [r7, #4]
    5870:	2133      	movs	r1, #51	; 0x33
    5872:	5c52      	ldrb	r2, [r2, r1]
    5874:	701a      	strb	r2, [r3, #0]
			break;
    5876:	e004      	b.n	5882 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    5878:	230f      	movs	r3, #15
    587a:	18fb      	adds	r3, r7, r3
    587c:	2217      	movs	r2, #23
    587e:	701a      	strb	r2, [r3, #0]
			break;
    5880:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    5882:	230f      	movs	r3, #15
    5884:	18fb      	adds	r3, r7, r3
    5886:	781b      	ldrb	r3, [r3, #0]
}
    5888:	0018      	movs	r0, r3
    588a:	46bd      	mov	sp, r7
    588c:	b004      	add	sp, #16
    588e:	bd80      	pop	{r7, pc}

00005890 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5890:	b580      	push	{r7, lr}
    5892:	b088      	sub	sp, #32
    5894:	af00      	add	r7, sp, #0
    5896:	0002      	movs	r2, r0
    5898:	1dfb      	adds	r3, r7, #7
    589a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    589c:	1dfb      	adds	r3, r7, #7
    589e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    58a0:	4ba3      	ldr	r3, [pc, #652]	; (5b30 <_usart_interrupt_handler+0x2a0>)
    58a2:	0092      	lsls	r2, r2, #2
    58a4:	58d3      	ldr	r3, [r2, r3]
    58a6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    58a8:	69bb      	ldr	r3, [r7, #24]
    58aa:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    58ac:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    58ae:	69bb      	ldr	r3, [r7, #24]
    58b0:	0018      	movs	r0, r3
    58b2:	4ba0      	ldr	r3, [pc, #640]	; (5b34 <_usart_interrupt_handler+0x2a4>)
    58b4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    58b6:	697b      	ldr	r3, [r7, #20]
    58b8:	7e1b      	ldrb	r3, [r3, #24]
    58ba:	b2da      	uxtb	r2, r3
    58bc:	2312      	movs	r3, #18
    58be:	18fb      	adds	r3, r7, r3
    58c0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    58c2:	697b      	ldr	r3, [r7, #20]
    58c4:	7d9b      	ldrb	r3, [r3, #22]
    58c6:	b2db      	uxtb	r3, r3
    58c8:	b29a      	uxth	r2, r3
    58ca:	2312      	movs	r3, #18
    58cc:	18fb      	adds	r3, r7, r3
    58ce:	2112      	movs	r1, #18
    58d0:	1879      	adds	r1, r7, r1
    58d2:	8809      	ldrh	r1, [r1, #0]
    58d4:	400a      	ands	r2, r1
    58d6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    58d8:	69bb      	ldr	r3, [r7, #24]
    58da:	2230      	movs	r2, #48	; 0x30
    58dc:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    58de:	69ba      	ldr	r2, [r7, #24]
    58e0:	2131      	movs	r1, #49	; 0x31
    58e2:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    58e4:	4013      	ands	r3, r2
    58e6:	b2da      	uxtb	r2, r3
    58e8:	2310      	movs	r3, #16
    58ea:	18fb      	adds	r3, r7, r3
    58ec:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    58ee:	2312      	movs	r3, #18
    58f0:	18fb      	adds	r3, r7, r3
    58f2:	881b      	ldrh	r3, [r3, #0]
    58f4:	2201      	movs	r2, #1
    58f6:	4013      	ands	r3, r2
    58f8:	d044      	beq.n	5984 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    58fa:	69bb      	ldr	r3, [r7, #24]
    58fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    58fe:	b29b      	uxth	r3, r3
    5900:	2b00      	cmp	r3, #0
    5902:	d03c      	beq.n	597e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5904:	69bb      	ldr	r3, [r7, #24]
    5906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5908:	781b      	ldrb	r3, [r3, #0]
    590a:	b2da      	uxtb	r2, r3
    590c:	231c      	movs	r3, #28
    590e:	18fb      	adds	r3, r7, r3
    5910:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5912:	69bb      	ldr	r3, [r7, #24]
    5914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5916:	1c5a      	adds	r2, r3, #1
    5918:	69bb      	ldr	r3, [r7, #24]
    591a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    591c:	69bb      	ldr	r3, [r7, #24]
    591e:	795b      	ldrb	r3, [r3, #5]
    5920:	2b01      	cmp	r3, #1
    5922:	d113      	bne.n	594c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5924:	69bb      	ldr	r3, [r7, #24]
    5926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5928:	781b      	ldrb	r3, [r3, #0]
    592a:	b2db      	uxtb	r3, r3
    592c:	021b      	lsls	r3, r3, #8
    592e:	b21a      	sxth	r2, r3
    5930:	231c      	movs	r3, #28
    5932:	18fb      	adds	r3, r7, r3
    5934:	2100      	movs	r1, #0
    5936:	5e5b      	ldrsh	r3, [r3, r1]
    5938:	4313      	orrs	r3, r2
    593a:	b21a      	sxth	r2, r3
    593c:	231c      	movs	r3, #28
    593e:	18fb      	adds	r3, r7, r3
    5940:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    5942:	69bb      	ldr	r3, [r7, #24]
    5944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5946:	1c5a      	adds	r2, r3, #1
    5948:	69bb      	ldr	r3, [r7, #24]
    594a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    594c:	231c      	movs	r3, #28
    594e:	18fb      	adds	r3, r7, r3
    5950:	881b      	ldrh	r3, [r3, #0]
    5952:	05db      	lsls	r3, r3, #23
    5954:	0ddb      	lsrs	r3, r3, #23
    5956:	b29a      	uxth	r2, r3
    5958:	697b      	ldr	r3, [r7, #20]
    595a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    595c:	69bb      	ldr	r3, [r7, #24]
    595e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5960:	b29b      	uxth	r3, r3
    5962:	3b01      	subs	r3, #1
    5964:	b29b      	uxth	r3, r3
    5966:	69ba      	ldr	r2, [r7, #24]
    5968:	1c19      	adds	r1, r3, #0
    596a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    596c:	2b00      	cmp	r3, #0
    596e:	d109      	bne.n	5984 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5970:	697b      	ldr	r3, [r7, #20]
    5972:	2201      	movs	r2, #1
    5974:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5976:	697b      	ldr	r3, [r7, #20]
    5978:	2202      	movs	r2, #2
    597a:	759a      	strb	r2, [r3, #22]
    597c:	e002      	b.n	5984 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    597e:	697b      	ldr	r3, [r7, #20]
    5980:	2201      	movs	r2, #1
    5982:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5984:	2312      	movs	r3, #18
    5986:	18fb      	adds	r3, r7, r3
    5988:	881b      	ldrh	r3, [r3, #0]
    598a:	2202      	movs	r2, #2
    598c:	4013      	ands	r3, r2
    598e:	d011      	beq.n	59b4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5990:	697b      	ldr	r3, [r7, #20]
    5992:	2202      	movs	r2, #2
    5994:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    5996:	69bb      	ldr	r3, [r7, #24]
    5998:	2233      	movs	r2, #51	; 0x33
    599a:	2100      	movs	r1, #0
    599c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    599e:	2310      	movs	r3, #16
    59a0:	18fb      	adds	r3, r7, r3
    59a2:	881b      	ldrh	r3, [r3, #0]
    59a4:	2201      	movs	r2, #1
    59a6:	4013      	ands	r3, r2
    59a8:	d004      	beq.n	59b4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    59aa:	69bb      	ldr	r3, [r7, #24]
    59ac:	68db      	ldr	r3, [r3, #12]
    59ae:	69ba      	ldr	r2, [r7, #24]
    59b0:	0010      	movs	r0, r2
    59b2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    59b4:	2312      	movs	r3, #18
    59b6:	18fb      	adds	r3, r7, r3
    59b8:	881b      	ldrh	r3, [r3, #0]
    59ba:	2204      	movs	r2, #4
    59bc:	4013      	ands	r3, r2
    59be:	d100      	bne.n	59c2 <_usart_interrupt_handler+0x132>
    59c0:	e0bd      	b.n	5b3e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    59c2:	69bb      	ldr	r3, [r7, #24]
    59c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    59c6:	b29b      	uxth	r3, r3
    59c8:	2b00      	cmp	r3, #0
    59ca:	d100      	bne.n	59ce <_usart_interrupt_handler+0x13e>
    59cc:	e0b4      	b.n	5b38 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    59ce:	697b      	ldr	r3, [r7, #20]
    59d0:	8b5b      	ldrh	r3, [r3, #26]
    59d2:	b29b      	uxth	r3, r3
    59d4:	b2da      	uxtb	r2, r3
    59d6:	231f      	movs	r3, #31
    59d8:	18fb      	adds	r3, r7, r3
    59da:	213f      	movs	r1, #63	; 0x3f
    59dc:	400a      	ands	r2, r1
    59de:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    59e0:	231f      	movs	r3, #31
    59e2:	18fb      	adds	r3, r7, r3
    59e4:	781b      	ldrb	r3, [r3, #0]
    59e6:	2208      	movs	r2, #8
    59e8:	4013      	ands	r3, r2
    59ea:	d007      	beq.n	59fc <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    59ec:	231f      	movs	r3, #31
    59ee:	18fb      	adds	r3, r7, r3
    59f0:	221f      	movs	r2, #31
    59f2:	18ba      	adds	r2, r7, r2
    59f4:	7812      	ldrb	r2, [r2, #0]
    59f6:	2108      	movs	r1, #8
    59f8:	438a      	bics	r2, r1
    59fa:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    59fc:	231f      	movs	r3, #31
    59fe:	18fb      	adds	r3, r7, r3
    5a00:	781b      	ldrb	r3, [r3, #0]
    5a02:	2b00      	cmp	r3, #0
    5a04:	d050      	beq.n	5aa8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5a06:	231f      	movs	r3, #31
    5a08:	18fb      	adds	r3, r7, r3
    5a0a:	781b      	ldrb	r3, [r3, #0]
    5a0c:	2202      	movs	r2, #2
    5a0e:	4013      	ands	r3, r2
    5a10:	d007      	beq.n	5a22 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5a12:	69bb      	ldr	r3, [r7, #24]
    5a14:	2232      	movs	r2, #50	; 0x32
    5a16:	211a      	movs	r1, #26
    5a18:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5a1a:	697b      	ldr	r3, [r7, #20]
    5a1c:	2202      	movs	r2, #2
    5a1e:	835a      	strh	r2, [r3, #26]
    5a20:	e036      	b.n	5a90 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5a22:	231f      	movs	r3, #31
    5a24:	18fb      	adds	r3, r7, r3
    5a26:	781b      	ldrb	r3, [r3, #0]
    5a28:	2204      	movs	r2, #4
    5a2a:	4013      	ands	r3, r2
    5a2c:	d007      	beq.n	5a3e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5a2e:	69bb      	ldr	r3, [r7, #24]
    5a30:	2232      	movs	r2, #50	; 0x32
    5a32:	211e      	movs	r1, #30
    5a34:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5a36:	697b      	ldr	r3, [r7, #20]
    5a38:	2204      	movs	r2, #4
    5a3a:	835a      	strh	r2, [r3, #26]
    5a3c:	e028      	b.n	5a90 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5a3e:	231f      	movs	r3, #31
    5a40:	18fb      	adds	r3, r7, r3
    5a42:	781b      	ldrb	r3, [r3, #0]
    5a44:	2201      	movs	r2, #1
    5a46:	4013      	ands	r3, r2
    5a48:	d007      	beq.n	5a5a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    5a4a:	69bb      	ldr	r3, [r7, #24]
    5a4c:	2232      	movs	r2, #50	; 0x32
    5a4e:	2113      	movs	r1, #19
    5a50:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5a52:	697b      	ldr	r3, [r7, #20]
    5a54:	2201      	movs	r2, #1
    5a56:	835a      	strh	r2, [r3, #26]
    5a58:	e01a      	b.n	5a90 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5a5a:	231f      	movs	r3, #31
    5a5c:	18fb      	adds	r3, r7, r3
    5a5e:	781b      	ldrb	r3, [r3, #0]
    5a60:	2210      	movs	r2, #16
    5a62:	4013      	ands	r3, r2
    5a64:	d007      	beq.n	5a76 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    5a66:	69bb      	ldr	r3, [r7, #24]
    5a68:	2232      	movs	r2, #50	; 0x32
    5a6a:	2142      	movs	r1, #66	; 0x42
    5a6c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5a6e:	697b      	ldr	r3, [r7, #20]
    5a70:	2210      	movs	r2, #16
    5a72:	835a      	strh	r2, [r3, #26]
    5a74:	e00c      	b.n	5a90 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5a76:	231f      	movs	r3, #31
    5a78:	18fb      	adds	r3, r7, r3
    5a7a:	781b      	ldrb	r3, [r3, #0]
    5a7c:	2220      	movs	r2, #32
    5a7e:	4013      	ands	r3, r2
    5a80:	d006      	beq.n	5a90 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5a82:	69bb      	ldr	r3, [r7, #24]
    5a84:	2232      	movs	r2, #50	; 0x32
    5a86:	2141      	movs	r1, #65	; 0x41
    5a88:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5a8a:	697b      	ldr	r3, [r7, #20]
    5a8c:	2220      	movs	r2, #32
    5a8e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    5a90:	2310      	movs	r3, #16
    5a92:	18fb      	adds	r3, r7, r3
    5a94:	881b      	ldrh	r3, [r3, #0]
    5a96:	2204      	movs	r2, #4
    5a98:	4013      	ands	r3, r2
				if (callback_status
    5a9a:	d050      	beq.n	5b3e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5a9c:	69bb      	ldr	r3, [r7, #24]
    5a9e:	695b      	ldr	r3, [r3, #20]
    5aa0:	69ba      	ldr	r2, [r7, #24]
    5aa2:	0010      	movs	r0, r2
    5aa4:	4798      	blx	r3
    5aa6:	e04a      	b.n	5b3e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5aa8:	697b      	ldr	r3, [r7, #20]
    5aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5aac:	b29a      	uxth	r2, r3
    5aae:	230e      	movs	r3, #14
    5ab0:	18fb      	adds	r3, r7, r3
    5ab2:	05d2      	lsls	r2, r2, #23
    5ab4:	0dd2      	lsrs	r2, r2, #23
    5ab6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5ab8:	69bb      	ldr	r3, [r7, #24]
    5aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5abc:	220e      	movs	r2, #14
    5abe:	18ba      	adds	r2, r7, r2
    5ac0:	8812      	ldrh	r2, [r2, #0]
    5ac2:	b2d2      	uxtb	r2, r2
    5ac4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5ac6:	69bb      	ldr	r3, [r7, #24]
    5ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5aca:	1c5a      	adds	r2, r3, #1
    5acc:	69bb      	ldr	r3, [r7, #24]
    5ace:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5ad0:	69bb      	ldr	r3, [r7, #24]
    5ad2:	795b      	ldrb	r3, [r3, #5]
    5ad4:	2b01      	cmp	r3, #1
    5ad6:	d10d      	bne.n	5af4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5ad8:	69bb      	ldr	r3, [r7, #24]
    5ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5adc:	220e      	movs	r2, #14
    5ade:	18ba      	adds	r2, r7, r2
    5ae0:	8812      	ldrh	r2, [r2, #0]
    5ae2:	0a12      	lsrs	r2, r2, #8
    5ae4:	b292      	uxth	r2, r2
    5ae6:	b2d2      	uxtb	r2, r2
    5ae8:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    5aea:	69bb      	ldr	r3, [r7, #24]
    5aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5aee:	1c5a      	adds	r2, r3, #1
    5af0:	69bb      	ldr	r3, [r7, #24]
    5af2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5af4:	69bb      	ldr	r3, [r7, #24]
    5af6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5af8:	b29b      	uxth	r3, r3
    5afa:	3b01      	subs	r3, #1
    5afc:	b29b      	uxth	r3, r3
    5afe:	69ba      	ldr	r2, [r7, #24]
    5b00:	1c19      	adds	r1, r3, #0
    5b02:	8591      	strh	r1, [r2, #44]	; 0x2c
    5b04:	2b00      	cmp	r3, #0
    5b06:	d11a      	bne.n	5b3e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5b08:	697b      	ldr	r3, [r7, #20]
    5b0a:	2204      	movs	r2, #4
    5b0c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    5b0e:	69bb      	ldr	r3, [r7, #24]
    5b10:	2232      	movs	r2, #50	; 0x32
    5b12:	2100      	movs	r1, #0
    5b14:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    5b16:	2310      	movs	r3, #16
    5b18:	18fb      	adds	r3, r7, r3
    5b1a:	881b      	ldrh	r3, [r3, #0]
    5b1c:	2202      	movs	r2, #2
    5b1e:	4013      	ands	r3, r2
					if (callback_status
    5b20:	d00d      	beq.n	5b3e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5b22:	69bb      	ldr	r3, [r7, #24]
    5b24:	691b      	ldr	r3, [r3, #16]
    5b26:	69ba      	ldr	r2, [r7, #24]
    5b28:	0010      	movs	r0, r2
    5b2a:	4798      	blx	r3
    5b2c:	e007      	b.n	5b3e <_usart_interrupt_handler+0x2ae>
    5b2e:	46c0      	nop			; (mov r8, r8)
    5b30:	200009d4 	.word	0x200009d4
    5b34:	00005671 	.word	0x00005671
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5b38:	697b      	ldr	r3, [r7, #20]
    5b3a:	2204      	movs	r2, #4
    5b3c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5b3e:	2312      	movs	r3, #18
    5b40:	18fb      	adds	r3, r7, r3
    5b42:	881b      	ldrh	r3, [r3, #0]
    5b44:	2210      	movs	r2, #16
    5b46:	4013      	ands	r3, r2
    5b48:	d010      	beq.n	5b6c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5b4a:	697b      	ldr	r3, [r7, #20]
    5b4c:	2210      	movs	r2, #16
    5b4e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5b50:	697b      	ldr	r3, [r7, #20]
    5b52:	2210      	movs	r2, #16
    5b54:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5b56:	2310      	movs	r3, #16
    5b58:	18fb      	adds	r3, r7, r3
    5b5a:	881b      	ldrh	r3, [r3, #0]
    5b5c:	2210      	movs	r2, #16
    5b5e:	4013      	ands	r3, r2
    5b60:	d004      	beq.n	5b6c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5b62:	69bb      	ldr	r3, [r7, #24]
    5b64:	69db      	ldr	r3, [r3, #28]
    5b66:	69ba      	ldr	r2, [r7, #24]
    5b68:	0010      	movs	r0, r2
    5b6a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5b6c:	2312      	movs	r3, #18
    5b6e:	18fb      	adds	r3, r7, r3
    5b70:	881b      	ldrh	r3, [r3, #0]
    5b72:	2220      	movs	r2, #32
    5b74:	4013      	ands	r3, r2
    5b76:	d010      	beq.n	5b9a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5b78:	697b      	ldr	r3, [r7, #20]
    5b7a:	2220      	movs	r2, #32
    5b7c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5b7e:	697b      	ldr	r3, [r7, #20]
    5b80:	2220      	movs	r2, #32
    5b82:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5b84:	2310      	movs	r3, #16
    5b86:	18fb      	adds	r3, r7, r3
    5b88:	881b      	ldrh	r3, [r3, #0]
    5b8a:	2208      	movs	r2, #8
    5b8c:	4013      	ands	r3, r2
    5b8e:	d004      	beq.n	5b9a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5b90:	69bb      	ldr	r3, [r7, #24]
    5b92:	699b      	ldr	r3, [r3, #24]
    5b94:	69ba      	ldr	r2, [r7, #24]
    5b96:	0010      	movs	r0, r2
    5b98:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5b9a:	2312      	movs	r3, #18
    5b9c:	18fb      	adds	r3, r7, r3
    5b9e:	881b      	ldrh	r3, [r3, #0]
    5ba0:	2208      	movs	r2, #8
    5ba2:	4013      	ands	r3, r2
    5ba4:	d010      	beq.n	5bc8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5ba6:	697b      	ldr	r3, [r7, #20]
    5ba8:	2208      	movs	r2, #8
    5baa:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5bac:	697b      	ldr	r3, [r7, #20]
    5bae:	2208      	movs	r2, #8
    5bb0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5bb2:	2310      	movs	r3, #16
    5bb4:	18fb      	adds	r3, r7, r3
    5bb6:	881b      	ldrh	r3, [r3, #0]
    5bb8:	2220      	movs	r2, #32
    5bba:	4013      	ands	r3, r2
    5bbc:	d004      	beq.n	5bc8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5bbe:	69bb      	ldr	r3, [r7, #24]
    5bc0:	6a1b      	ldr	r3, [r3, #32]
    5bc2:	69ba      	ldr	r2, [r7, #24]
    5bc4:	0010      	movs	r0, r2
    5bc6:	4798      	blx	r3
		}
	}
#endif
}
    5bc8:	46c0      	nop			; (mov r8, r8)
    5bca:	46bd      	mov	sp, r7
    5bcc:	b008      	add	sp, #32
    5bce:	bd80      	pop	{r7, pc}

00005bd0 <system_gclk_gen_get_config_defaults>:
{
    5bd0:	b580      	push	{r7, lr}
    5bd2:	b082      	sub	sp, #8
    5bd4:	af00      	add	r7, sp, #0
    5bd6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    5bd8:	687b      	ldr	r3, [r7, #4]
    5bda:	2201      	movs	r2, #1
    5bdc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    5bde:	687b      	ldr	r3, [r7, #4]
    5be0:	2200      	movs	r2, #0
    5be2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5be4:	687b      	ldr	r3, [r7, #4]
    5be6:	2206      	movs	r2, #6
    5be8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    5bea:	687b      	ldr	r3, [r7, #4]
    5bec:	2200      	movs	r2, #0
    5bee:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5bf0:	687b      	ldr	r3, [r7, #4]
    5bf2:	2200      	movs	r2, #0
    5bf4:	725a      	strb	r2, [r3, #9]
}
    5bf6:	46c0      	nop			; (mov r8, r8)
    5bf8:	46bd      	mov	sp, r7
    5bfa:	b002      	add	sp, #8
    5bfc:	bd80      	pop	{r7, pc}

00005bfe <system_gclk_chan_get_config_defaults>:
{
    5bfe:	b580      	push	{r7, lr}
    5c00:	b082      	sub	sp, #8
    5c02:	af00      	add	r7, sp, #0
    5c04:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5c06:	687b      	ldr	r3, [r7, #4]
    5c08:	2200      	movs	r2, #0
    5c0a:	701a      	strb	r2, [r3, #0]
}
    5c0c:	46c0      	nop			; (mov r8, r8)
    5c0e:	46bd      	mov	sp, r7
    5c10:	b002      	add	sp, #8
    5c12:	bd80      	pop	{r7, pc}

00005c14 <system_clock_source_xosc32k_get_config_defaults>:
{
    5c14:	b580      	push	{r7, lr}
    5c16:	b082      	sub	sp, #8
    5c18:	af00      	add	r7, sp, #0
    5c1a:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5c1c:	687b      	ldr	r3, [r7, #4]
    5c1e:	2200      	movs	r2, #0
    5c20:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    5c22:	687b      	ldr	r3, [r7, #4]
    5c24:	2204      	movs	r2, #4
    5c26:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    5c28:	687b      	ldr	r3, [r7, #4]
    5c2a:	2200      	movs	r2, #0
    5c2c:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    5c2e:	687b      	ldr	r3, [r7, #4]
    5c30:	2280      	movs	r2, #128	; 0x80
    5c32:	0212      	lsls	r2, r2, #8
    5c34:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    5c36:	687b      	ldr	r3, [r7, #4]
    5c38:	2200      	movs	r2, #0
    5c3a:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    5c3c:	687b      	ldr	r3, [r7, #4]
    5c3e:	2201      	movs	r2, #1
    5c40:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    5c42:	687b      	ldr	r3, [r7, #4]
    5c44:	2200      	movs	r2, #0
    5c46:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	2201      	movs	r2, #1
    5c4c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    5c4e:	687b      	ldr	r3, [r7, #4]
    5c50:	2200      	movs	r2, #0
    5c52:	739a      	strb	r2, [r3, #14]
}
    5c54:	46c0      	nop			; (mov r8, r8)
    5c56:	46bd      	mov	sp, r7
    5c58:	b002      	add	sp, #8
    5c5a:	bd80      	pop	{r7, pc}

00005c5c <system_clock_source_osc8m_get_config_defaults>:
{
    5c5c:	b580      	push	{r7, lr}
    5c5e:	b082      	sub	sp, #8
    5c60:	af00      	add	r7, sp, #0
    5c62:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5c64:	687b      	ldr	r3, [r7, #4]
    5c66:	2203      	movs	r2, #3
    5c68:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5c6a:	687b      	ldr	r3, [r7, #4]
    5c6c:	2200      	movs	r2, #0
    5c6e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5c70:	687b      	ldr	r3, [r7, #4]
    5c72:	2201      	movs	r2, #1
    5c74:	709a      	strb	r2, [r3, #2]
}
    5c76:	46c0      	nop			; (mov r8, r8)
    5c78:	46bd      	mov	sp, r7
    5c7a:	b002      	add	sp, #8
    5c7c:	bd80      	pop	{r7, pc}

00005c7e <system_clock_source_dfll_get_config_defaults>:
{
    5c7e:	b580      	push	{r7, lr}
    5c80:	b082      	sub	sp, #8
    5c82:	af00      	add	r7, sp, #0
    5c84:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5c86:	687b      	ldr	r3, [r7, #4]
    5c88:	2200      	movs	r2, #0
    5c8a:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5c8c:	687b      	ldr	r3, [r7, #4]
    5c8e:	2200      	movs	r2, #0
    5c90:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	2200      	movs	r2, #0
    5c96:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5c98:	687b      	ldr	r3, [r7, #4]
    5c9a:	2200      	movs	r2, #0
    5c9c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5c9e:	687b      	ldr	r3, [r7, #4]
    5ca0:	2200      	movs	r2, #0
    5ca2:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5ca4:	687b      	ldr	r3, [r7, #4]
    5ca6:	2201      	movs	r2, #1
    5ca8:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    5caa:	687b      	ldr	r3, [r7, #4]
    5cac:	2207      	movs	r2, #7
    5cae:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5cb0:	687b      	ldr	r3, [r7, #4]
    5cb2:	223f      	movs	r2, #63	; 0x3f
    5cb4:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    5cb6:	687b      	ldr	r3, [r7, #4]
    5cb8:	2201      	movs	r2, #1
    5cba:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    5cbc:	687b      	ldr	r3, [r7, #4]
    5cbe:	2201      	movs	r2, #1
    5cc0:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5cc2:	687b      	ldr	r3, [r7, #4]
    5cc4:	2206      	movs	r2, #6
    5cc6:	821a      	strh	r2, [r3, #16]
}
    5cc8:	46c0      	nop			; (mov r8, r8)
    5cca:	46bd      	mov	sp, r7
    5ccc:	b002      	add	sp, #8
    5cce:	bd80      	pop	{r7, pc}

00005cd0 <system_cpu_clock_set_divider>:
{
    5cd0:	b580      	push	{r7, lr}
    5cd2:	b082      	sub	sp, #8
    5cd4:	af00      	add	r7, sp, #0
    5cd6:	0002      	movs	r2, r0
    5cd8:	1dfb      	adds	r3, r7, #7
    5cda:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    5cdc:	4a03      	ldr	r2, [pc, #12]	; (5cec <system_cpu_clock_set_divider+0x1c>)
    5cde:	1dfb      	adds	r3, r7, #7
    5ce0:	781b      	ldrb	r3, [r3, #0]
    5ce2:	7213      	strb	r3, [r2, #8]
}
    5ce4:	46c0      	nop			; (mov r8, r8)
    5ce6:	46bd      	mov	sp, r7
    5ce8:	b002      	add	sp, #8
    5cea:	bd80      	pop	{r7, pc}
    5cec:	40000400 	.word	0x40000400

00005cf0 <system_apb_clock_set_divider>:
{
    5cf0:	b580      	push	{r7, lr}
    5cf2:	b082      	sub	sp, #8
    5cf4:	af00      	add	r7, sp, #0
    5cf6:	0002      	movs	r2, r0
    5cf8:	1dfb      	adds	r3, r7, #7
    5cfa:	701a      	strb	r2, [r3, #0]
    5cfc:	1dbb      	adds	r3, r7, #6
    5cfe:	1c0a      	adds	r2, r1, #0
    5d00:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5d02:	1dfb      	adds	r3, r7, #7
    5d04:	781b      	ldrb	r3, [r3, #0]
    5d06:	2b01      	cmp	r3, #1
    5d08:	d008      	beq.n	5d1c <system_apb_clock_set_divider+0x2c>
    5d0a:	2b02      	cmp	r3, #2
    5d0c:	d00b      	beq.n	5d26 <system_apb_clock_set_divider+0x36>
    5d0e:	2b00      	cmp	r3, #0
    5d10:	d10e      	bne.n	5d30 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    5d12:	4a0b      	ldr	r2, [pc, #44]	; (5d40 <system_apb_clock_set_divider+0x50>)
    5d14:	1dbb      	adds	r3, r7, #6
    5d16:	781b      	ldrb	r3, [r3, #0]
    5d18:	7253      	strb	r3, [r2, #9]
			break;
    5d1a:	e00b      	b.n	5d34 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    5d1c:	4a08      	ldr	r2, [pc, #32]	; (5d40 <system_apb_clock_set_divider+0x50>)
    5d1e:	1dbb      	adds	r3, r7, #6
    5d20:	781b      	ldrb	r3, [r3, #0]
    5d22:	7293      	strb	r3, [r2, #10]
			break;
    5d24:	e006      	b.n	5d34 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    5d26:	4a06      	ldr	r2, [pc, #24]	; (5d40 <system_apb_clock_set_divider+0x50>)
    5d28:	1dbb      	adds	r3, r7, #6
    5d2a:	781b      	ldrb	r3, [r3, #0]
    5d2c:	72d3      	strb	r3, [r2, #11]
			break;
    5d2e:	e001      	b.n	5d34 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    5d30:	2317      	movs	r3, #23
    5d32:	e000      	b.n	5d36 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    5d34:	2300      	movs	r3, #0
}
    5d36:	0018      	movs	r0, r3
    5d38:	46bd      	mov	sp, r7
    5d3a:	b002      	add	sp, #8
    5d3c:	bd80      	pop	{r7, pc}
    5d3e:	46c0      	nop			; (mov r8, r8)
    5d40:	40000400 	.word	0x40000400

00005d44 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5d44:	b580      	push	{r7, lr}
    5d46:	b082      	sub	sp, #8
    5d48:	af00      	add	r7, sp, #0
    5d4a:	0002      	movs	r2, r0
    5d4c:	1dfb      	adds	r3, r7, #7
    5d4e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5d50:	4a08      	ldr	r2, [pc, #32]	; (5d74 <system_flash_set_waitstates+0x30>)
    5d52:	1dfb      	adds	r3, r7, #7
    5d54:	781b      	ldrb	r3, [r3, #0]
    5d56:	210f      	movs	r1, #15
    5d58:	400b      	ands	r3, r1
    5d5a:	b2d9      	uxtb	r1, r3
    5d5c:	6853      	ldr	r3, [r2, #4]
    5d5e:	200f      	movs	r0, #15
    5d60:	4001      	ands	r1, r0
    5d62:	0049      	lsls	r1, r1, #1
    5d64:	201e      	movs	r0, #30
    5d66:	4383      	bics	r3, r0
    5d68:	430b      	orrs	r3, r1
    5d6a:	6053      	str	r3, [r2, #4]
}
    5d6c:	46c0      	nop			; (mov r8, r8)
    5d6e:	46bd      	mov	sp, r7
    5d70:	b002      	add	sp, #8
    5d72:	bd80      	pop	{r7, pc}
    5d74:	41004000 	.word	0x41004000

00005d78 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5d78:	b580      	push	{r7, lr}
    5d7a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5d7c:	46c0      	nop			; (mov r8, r8)
    5d7e:	4b04      	ldr	r3, [pc, #16]	; (5d90 <_system_dfll_wait_for_sync+0x18>)
    5d80:	68db      	ldr	r3, [r3, #12]
    5d82:	2210      	movs	r2, #16
    5d84:	4013      	ands	r3, r2
    5d86:	d0fa      	beq.n	5d7e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    5d88:	46c0      	nop			; (mov r8, r8)
    5d8a:	46bd      	mov	sp, r7
    5d8c:	bd80      	pop	{r7, pc}
    5d8e:	46c0      	nop			; (mov r8, r8)
    5d90:	40000800 	.word	0x40000800

00005d94 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    5d94:	b580      	push	{r7, lr}
    5d96:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5d98:	4b0c      	ldr	r3, [pc, #48]	; (5dcc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5d9a:	2202      	movs	r2, #2
    5d9c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5d9e:	4b0c      	ldr	r3, [pc, #48]	; (5dd0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5da0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5da2:	4a0a      	ldr	r2, [pc, #40]	; (5dcc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5da4:	4b0b      	ldr	r3, [pc, #44]	; (5dd4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5da6:	689b      	ldr	r3, [r3, #8]
    5da8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5daa:	4a08      	ldr	r2, [pc, #32]	; (5dcc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5dac:	4b09      	ldr	r3, [pc, #36]	; (5dd4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5dae:	685b      	ldr	r3, [r3, #4]
    5db0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    5db2:	4b06      	ldr	r3, [pc, #24]	; (5dcc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5db4:	2200      	movs	r2, #0
    5db6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5db8:	4b05      	ldr	r3, [pc, #20]	; (5dd0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5dba:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5dbc:	4a03      	ldr	r2, [pc, #12]	; (5dcc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5dbe:	4b05      	ldr	r3, [pc, #20]	; (5dd4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5dc0:	681b      	ldr	r3, [r3, #0]
    5dc2:	b29b      	uxth	r3, r3
    5dc4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    5dc6:	46c0      	nop			; (mov r8, r8)
    5dc8:	46bd      	mov	sp, r7
    5dca:	bd80      	pop	{r7, pc}
    5dcc:	40000800 	.word	0x40000800
    5dd0:	00005d79 	.word	0x00005d79
    5dd4:	20000160 	.word	0x20000160

00005dd8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5dd8:	b580      	push	{r7, lr}
    5dda:	b082      	sub	sp, #8
    5ddc:	af00      	add	r7, sp, #0
    5dde:	0002      	movs	r2, r0
    5de0:	1dfb      	adds	r3, r7, #7
    5de2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5de4:	1dfb      	adds	r3, r7, #7
    5de6:	781b      	ldrb	r3, [r3, #0]
    5de8:	2b08      	cmp	r3, #8
    5dea:	d841      	bhi.n	5e70 <system_clock_source_get_hz+0x98>
    5dec:	009a      	lsls	r2, r3, #2
    5dee:	4b23      	ldr	r3, [pc, #140]	; (5e7c <system_clock_source_get_hz+0xa4>)
    5df0:	18d3      	adds	r3, r2, r3
    5df2:	681b      	ldr	r3, [r3, #0]
    5df4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    5df6:	4b22      	ldr	r3, [pc, #136]	; (5e80 <system_clock_source_get_hz+0xa8>)
    5df8:	691b      	ldr	r3, [r3, #16]
    5dfa:	e03a      	b.n	5e72 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5dfc:	4b21      	ldr	r3, [pc, #132]	; (5e84 <system_clock_source_get_hz+0xac>)
    5dfe:	6a1b      	ldr	r3, [r3, #32]
    5e00:	059b      	lsls	r3, r3, #22
    5e02:	0f9b      	lsrs	r3, r3, #30
    5e04:	b2db      	uxtb	r3, r3
    5e06:	001a      	movs	r2, r3
    5e08:	4b1f      	ldr	r3, [pc, #124]	; (5e88 <system_clock_source_get_hz+0xb0>)
    5e0a:	40d3      	lsrs	r3, r2
    5e0c:	e031      	b.n	5e72 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5e0e:	2380      	movs	r3, #128	; 0x80
    5e10:	021b      	lsls	r3, r3, #8
    5e12:	e02e      	b.n	5e72 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    5e14:	2380      	movs	r3, #128	; 0x80
    5e16:	021b      	lsls	r3, r3, #8
    5e18:	e02b      	b.n	5e72 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5e1a:	4b19      	ldr	r3, [pc, #100]	; (5e80 <system_clock_source_get_hz+0xa8>)
    5e1c:	695b      	ldr	r3, [r3, #20]
    5e1e:	e028      	b.n	5e72 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5e20:	4b17      	ldr	r3, [pc, #92]	; (5e80 <system_clock_source_get_hz+0xa8>)
    5e22:	681b      	ldr	r3, [r3, #0]
    5e24:	2202      	movs	r2, #2
    5e26:	4013      	ands	r3, r2
    5e28:	d101      	bne.n	5e2e <system_clock_source_get_hz+0x56>
			return 0;
    5e2a:	2300      	movs	r3, #0
    5e2c:	e021      	b.n	5e72 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    5e2e:	4b17      	ldr	r3, [pc, #92]	; (5e8c <system_clock_source_get_hz+0xb4>)
    5e30:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    5e32:	4b13      	ldr	r3, [pc, #76]	; (5e80 <system_clock_source_get_hz+0xa8>)
    5e34:	681b      	ldr	r3, [r3, #0]
    5e36:	2224      	movs	r2, #36	; 0x24
    5e38:	4013      	ands	r3, r2
    5e3a:	2b04      	cmp	r3, #4
    5e3c:	d109      	bne.n	5e52 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5e3e:	2000      	movs	r0, #0
    5e40:	4b13      	ldr	r3, [pc, #76]	; (5e90 <system_clock_source_get_hz+0xb8>)
    5e42:	4798      	blx	r3
    5e44:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    5e46:	4b0e      	ldr	r3, [pc, #56]	; (5e80 <system_clock_source_get_hz+0xa8>)
    5e48:	689b      	ldr	r3, [r3, #8]
    5e4a:	041b      	lsls	r3, r3, #16
    5e4c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5e4e:	4353      	muls	r3, r2
    5e50:	e00f      	b.n	5e72 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    5e52:	4b10      	ldr	r3, [pc, #64]	; (5e94 <system_clock_source_get_hz+0xbc>)
    5e54:	e00d      	b.n	5e72 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5e56:	4a0b      	ldr	r2, [pc, #44]	; (5e84 <system_clock_source_get_hz+0xac>)
    5e58:	2350      	movs	r3, #80	; 0x50
    5e5a:	5cd3      	ldrb	r3, [r2, r3]
    5e5c:	b2db      	uxtb	r3, r3
    5e5e:	001a      	movs	r2, r3
    5e60:	2304      	movs	r3, #4
    5e62:	4013      	ands	r3, r2
    5e64:	d101      	bne.n	5e6a <system_clock_source_get_hz+0x92>
			return 0;
    5e66:	2300      	movs	r3, #0
    5e68:	e003      	b.n	5e72 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    5e6a:	4b05      	ldr	r3, [pc, #20]	; (5e80 <system_clock_source_get_hz+0xa8>)
    5e6c:	68db      	ldr	r3, [r3, #12]
    5e6e:	e000      	b.n	5e72 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    5e70:	2300      	movs	r3, #0
	}
}
    5e72:	0018      	movs	r0, r3
    5e74:	46bd      	mov	sp, r7
    5e76:	b002      	add	sp, #8
    5e78:	bd80      	pop	{r7, pc}
    5e7a:	46c0      	nop			; (mov r8, r8)
    5e7c:	0000bf50 	.word	0x0000bf50
    5e80:	20000160 	.word	0x20000160
    5e84:	40000800 	.word	0x40000800
    5e88:	007a1200 	.word	0x007a1200
    5e8c:	00005d79 	.word	0x00005d79
    5e90:	00006929 	.word	0x00006929
    5e94:	02dc6c00 	.word	0x02dc6c00

00005e98 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5e98:	b580      	push	{r7, lr}
    5e9a:	b084      	sub	sp, #16
    5e9c:	af00      	add	r7, sp, #0
    5e9e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5ea0:	4b1a      	ldr	r3, [pc, #104]	; (5f0c <system_clock_source_osc8m_set_config+0x74>)
    5ea2:	6a1b      	ldr	r3, [r3, #32]
    5ea4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5ea6:	687b      	ldr	r3, [r7, #4]
    5ea8:	781b      	ldrb	r3, [r3, #0]
    5eaa:	1c1a      	adds	r2, r3, #0
    5eac:	2303      	movs	r3, #3
    5eae:	4013      	ands	r3, r2
    5eb0:	b2da      	uxtb	r2, r3
    5eb2:	230d      	movs	r3, #13
    5eb4:	18fb      	adds	r3, r7, r3
    5eb6:	2103      	movs	r1, #3
    5eb8:	400a      	ands	r2, r1
    5eba:	0010      	movs	r0, r2
    5ebc:	781a      	ldrb	r2, [r3, #0]
    5ebe:	2103      	movs	r1, #3
    5ec0:	438a      	bics	r2, r1
    5ec2:	1c11      	adds	r1, r2, #0
    5ec4:	1c02      	adds	r2, r0, #0
    5ec6:	430a      	orrs	r2, r1
    5ec8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5eca:	687b      	ldr	r3, [r7, #4]
    5ecc:	789a      	ldrb	r2, [r3, #2]
    5ece:	230c      	movs	r3, #12
    5ed0:	18fb      	adds	r3, r7, r3
    5ed2:	01d0      	lsls	r0, r2, #7
    5ed4:	781a      	ldrb	r2, [r3, #0]
    5ed6:	217f      	movs	r1, #127	; 0x7f
    5ed8:	400a      	ands	r2, r1
    5eda:	1c11      	adds	r1, r2, #0
    5edc:	1c02      	adds	r2, r0, #0
    5ede:	430a      	orrs	r2, r1
    5ee0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5ee2:	687b      	ldr	r3, [r7, #4]
    5ee4:	785a      	ldrb	r2, [r3, #1]
    5ee6:	230c      	movs	r3, #12
    5ee8:	18fb      	adds	r3, r7, r3
    5eea:	2101      	movs	r1, #1
    5eec:	400a      	ands	r2, r1
    5eee:	0190      	lsls	r0, r2, #6
    5ef0:	781a      	ldrb	r2, [r3, #0]
    5ef2:	2140      	movs	r1, #64	; 0x40
    5ef4:	438a      	bics	r2, r1
    5ef6:	1c11      	adds	r1, r2, #0
    5ef8:	1c02      	adds	r2, r0, #0
    5efa:	430a      	orrs	r2, r1
    5efc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    5efe:	4b03      	ldr	r3, [pc, #12]	; (5f0c <system_clock_source_osc8m_set_config+0x74>)
    5f00:	68fa      	ldr	r2, [r7, #12]
    5f02:	621a      	str	r2, [r3, #32]
}
    5f04:	46c0      	nop			; (mov r8, r8)
    5f06:	46bd      	mov	sp, r7
    5f08:	b004      	add	sp, #16
    5f0a:	bd80      	pop	{r7, pc}
    5f0c:	40000800 	.word	0x40000800

00005f10 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5f10:	b580      	push	{r7, lr}
    5f12:	b084      	sub	sp, #16
    5f14:	af00      	add	r7, sp, #0
    5f16:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5f18:	4a43      	ldr	r2, [pc, #268]	; (6028 <system_clock_source_xosc32k_set_config+0x118>)
    5f1a:	230c      	movs	r3, #12
    5f1c:	18fb      	adds	r3, r7, r3
    5f1e:	8a92      	ldrh	r2, [r2, #20]
    5f20:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    5f22:	687b      	ldr	r3, [r7, #4]
    5f24:	785b      	ldrb	r3, [r3, #1]
    5f26:	1c1a      	adds	r2, r3, #0
    5f28:	2307      	movs	r3, #7
    5f2a:	4013      	ands	r3, r2
    5f2c:	b2da      	uxtb	r2, r3
    5f2e:	230c      	movs	r3, #12
    5f30:	18fb      	adds	r3, r7, r3
    5f32:	2107      	movs	r1, #7
    5f34:	400a      	ands	r2, r1
    5f36:	0010      	movs	r0, r2
    5f38:	785a      	ldrb	r2, [r3, #1]
    5f3a:	2107      	movs	r1, #7
    5f3c:	438a      	bics	r2, r1
    5f3e:	1c11      	adds	r1, r2, #0
    5f40:	1c02      	adds	r2, r0, #0
    5f42:	430a      	orrs	r2, r1
    5f44:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5f46:	687b      	ldr	r3, [r7, #4]
    5f48:	781b      	ldrb	r3, [r3, #0]
    5f4a:	2b00      	cmp	r3, #0
    5f4c:	d106      	bne.n	5f5c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    5f4e:	230c      	movs	r3, #12
    5f50:	18fb      	adds	r3, r7, r3
    5f52:	781a      	ldrb	r2, [r3, #0]
    5f54:	2104      	movs	r1, #4
    5f56:	430a      	orrs	r2, r1
    5f58:	701a      	strb	r2, [r3, #0]
    5f5a:	e005      	b.n	5f68 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    5f5c:	230c      	movs	r3, #12
    5f5e:	18fb      	adds	r3, r7, r3
    5f60:	781a      	ldrb	r2, [r3, #0]
    5f62:	2104      	movs	r1, #4
    5f64:	438a      	bics	r2, r1
    5f66:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5f68:	687b      	ldr	r3, [r7, #4]
    5f6a:	789a      	ldrb	r2, [r3, #2]
    5f6c:	230c      	movs	r3, #12
    5f6e:	18fb      	adds	r3, r7, r3
    5f70:	2101      	movs	r1, #1
    5f72:	400a      	ands	r2, r1
    5f74:	0150      	lsls	r0, r2, #5
    5f76:	781a      	ldrb	r2, [r3, #0]
    5f78:	2120      	movs	r1, #32
    5f7a:	438a      	bics	r2, r1
    5f7c:	1c11      	adds	r1, r2, #0
    5f7e:	1c02      	adds	r2, r0, #0
    5f80:	430a      	orrs	r2, r1
    5f82:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    5f84:	687b      	ldr	r3, [r7, #4]
    5f86:	78da      	ldrb	r2, [r3, #3]
    5f88:	230c      	movs	r3, #12
    5f8a:	18fb      	adds	r3, r7, r3
    5f8c:	2101      	movs	r1, #1
    5f8e:	400a      	ands	r2, r1
    5f90:	0110      	lsls	r0, r2, #4
    5f92:	781a      	ldrb	r2, [r3, #0]
    5f94:	2110      	movs	r1, #16
    5f96:	438a      	bics	r2, r1
    5f98:	1c11      	adds	r1, r2, #0
    5f9a:	1c02      	adds	r2, r0, #0
    5f9c:	430a      	orrs	r2, r1
    5f9e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    5fa0:	687b      	ldr	r3, [r7, #4]
    5fa2:	791a      	ldrb	r2, [r3, #4]
    5fa4:	230c      	movs	r3, #12
    5fa6:	18fb      	adds	r3, r7, r3
    5fa8:	2101      	movs	r1, #1
    5faa:	400a      	ands	r2, r1
    5fac:	00d0      	lsls	r0, r2, #3
    5fae:	781a      	ldrb	r2, [r3, #0]
    5fb0:	2108      	movs	r1, #8
    5fb2:	438a      	bics	r2, r1
    5fb4:	1c11      	adds	r1, r2, #0
    5fb6:	1c02      	adds	r2, r0, #0
    5fb8:	430a      	orrs	r2, r1
    5fba:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    5fbc:	687b      	ldr	r3, [r7, #4]
    5fbe:	7b5a      	ldrb	r2, [r3, #13]
    5fc0:	230c      	movs	r3, #12
    5fc2:	18fb      	adds	r3, r7, r3
    5fc4:	01d0      	lsls	r0, r2, #7
    5fc6:	781a      	ldrb	r2, [r3, #0]
    5fc8:	217f      	movs	r1, #127	; 0x7f
    5fca:	400a      	ands	r2, r1
    5fcc:	1c11      	adds	r1, r2, #0
    5fce:	1c02      	adds	r2, r0, #0
    5fd0:	430a      	orrs	r2, r1
    5fd2:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5fd4:	687b      	ldr	r3, [r7, #4]
    5fd6:	7b1a      	ldrb	r2, [r3, #12]
    5fd8:	230c      	movs	r3, #12
    5fda:	18fb      	adds	r3, r7, r3
    5fdc:	2101      	movs	r1, #1
    5fde:	400a      	ands	r2, r1
    5fe0:	0190      	lsls	r0, r2, #6
    5fe2:	781a      	ldrb	r2, [r3, #0]
    5fe4:	2140      	movs	r1, #64	; 0x40
    5fe6:	438a      	bics	r2, r1
    5fe8:	1c11      	adds	r1, r2, #0
    5fea:	1c02      	adds	r2, r0, #0
    5fec:	430a      	orrs	r2, r1
    5fee:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    5ff0:	687b      	ldr	r3, [r7, #4]
    5ff2:	7b9a      	ldrb	r2, [r3, #14]
    5ff4:	230c      	movs	r3, #12
    5ff6:	18fb      	adds	r3, r7, r3
    5ff8:	2101      	movs	r1, #1
    5ffa:	400a      	ands	r2, r1
    5ffc:	0110      	lsls	r0, r2, #4
    5ffe:	785a      	ldrb	r2, [r3, #1]
    6000:	2110      	movs	r1, #16
    6002:	438a      	bics	r2, r1
    6004:	1c11      	adds	r1, r2, #0
    6006:	1c02      	adds	r2, r0, #0
    6008:	430a      	orrs	r2, r1
    600a:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    600c:	687b      	ldr	r3, [r7, #4]
    600e:	689a      	ldr	r2, [r3, #8]
    6010:	4b06      	ldr	r3, [pc, #24]	; (602c <system_clock_source_xosc32k_set_config+0x11c>)
    6012:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    6014:	4a04      	ldr	r2, [pc, #16]	; (6028 <system_clock_source_xosc32k_set_config+0x118>)
    6016:	230c      	movs	r3, #12
    6018:	18fb      	adds	r3, r7, r3
    601a:	881b      	ldrh	r3, [r3, #0]
    601c:	8293      	strh	r3, [r2, #20]
}
    601e:	46c0      	nop			; (mov r8, r8)
    6020:	46bd      	mov	sp, r7
    6022:	b004      	add	sp, #16
    6024:	bd80      	pop	{r7, pc}
    6026:	46c0      	nop			; (mov r8, r8)
    6028:	40000800 	.word	0x40000800
    602c:	20000160 	.word	0x20000160

00006030 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    6030:	b580      	push	{r7, lr}
    6032:	b082      	sub	sp, #8
    6034:	af00      	add	r7, sp, #0
    6036:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	7a1b      	ldrb	r3, [r3, #8]
    603c:	029b      	lsls	r3, r3, #10
    603e:	041b      	lsls	r3, r3, #16
    6040:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    6042:	687b      	ldr	r3, [r7, #4]
    6044:	895b      	ldrh	r3, [r3, #10]
    6046:	059b      	lsls	r3, r3, #22
    6048:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    604a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    604c:	4b2a      	ldr	r3, [pc, #168]	; (60f8 <system_clock_source_dfll_set_config+0xc8>)
    604e:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    6050:	687b      	ldr	r3, [r7, #4]
    6052:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    6054:	687b      	ldr	r3, [r7, #4]
    6056:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    6058:	4313      	orrs	r3, r2
    605a:	b2db      	uxtb	r3, r3
    605c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    605e:	687b      	ldr	r3, [r7, #4]
    6060:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    6062:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    6064:	687a      	ldr	r2, [r7, #4]
    6066:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    6068:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    606a:	687b      	ldr	r3, [r7, #4]
    606c:	785b      	ldrb	r3, [r3, #1]
    606e:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    6070:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    6072:	4b21      	ldr	r3, [pc, #132]	; (60f8 <system_clock_source_dfll_set_config+0xc8>)
    6074:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    6076:	687b      	ldr	r3, [r7, #4]
    6078:	781b      	ldrb	r3, [r3, #0]
    607a:	2b04      	cmp	r3, #4
    607c:	d116      	bne.n	60ac <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    607e:	687b      	ldr	r3, [r7, #4]
    6080:	7b1b      	ldrb	r3, [r3, #12]
    6082:	069b      	lsls	r3, r3, #26
    6084:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6086:	687b      	ldr	r3, [r7, #4]
    6088:	89db      	ldrh	r3, [r3, #14]
    608a:	041b      	lsls	r3, r3, #16
    608c:	0019      	movs	r1, r3
    608e:	4b1b      	ldr	r3, [pc, #108]	; (60fc <system_clock_source_dfll_set_config+0xcc>)
    6090:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6092:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    6094:	687a      	ldr	r2, [r7, #4]
    6096:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6098:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    609a:	4b17      	ldr	r3, [pc, #92]	; (60f8 <system_clock_source_dfll_set_config+0xc8>)
    609c:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    609e:	4b16      	ldr	r3, [pc, #88]	; (60f8 <system_clock_source_dfll_set_config+0xc8>)
    60a0:	681b      	ldr	r3, [r3, #0]
    60a2:	687a      	ldr	r2, [r7, #4]
    60a4:	7812      	ldrb	r2, [r2, #0]
    60a6:	431a      	orrs	r2, r3
    60a8:	4b13      	ldr	r3, [pc, #76]	; (60f8 <system_clock_source_dfll_set_config+0xc8>)
    60aa:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    60ac:	687b      	ldr	r3, [r7, #4]
    60ae:	781b      	ldrb	r3, [r3, #0]
    60b0:	2b20      	cmp	r3, #32
    60b2:	d11c      	bne.n	60ee <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    60b4:	687b      	ldr	r3, [r7, #4]
    60b6:	7b1b      	ldrb	r3, [r3, #12]
    60b8:	069b      	lsls	r3, r3, #26
    60ba:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    60bc:	687b      	ldr	r3, [r7, #4]
    60be:	89db      	ldrh	r3, [r3, #14]
    60c0:	041b      	lsls	r3, r3, #16
    60c2:	0019      	movs	r1, r3
    60c4:	4b0d      	ldr	r3, [pc, #52]	; (60fc <system_clock_source_dfll_set_config+0xcc>)
    60c6:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    60c8:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    60ca:	687a      	ldr	r2, [r7, #4]
    60cc:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    60ce:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    60d0:	4b09      	ldr	r3, [pc, #36]	; (60f8 <system_clock_source_dfll_set_config+0xc8>)
    60d2:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    60d4:	4b08      	ldr	r3, [pc, #32]	; (60f8 <system_clock_source_dfll_set_config+0xc8>)
    60d6:	681b      	ldr	r3, [r3, #0]
    60d8:	687a      	ldr	r2, [r7, #4]
    60da:	7812      	ldrb	r2, [r2, #0]
    60dc:	2104      	movs	r1, #4
    60de:	430a      	orrs	r2, r1
    60e0:	b2d2      	uxtb	r2, r2
    60e2:	4313      	orrs	r3, r2
    60e4:	2280      	movs	r2, #128	; 0x80
    60e6:	00d2      	lsls	r2, r2, #3
    60e8:	431a      	orrs	r2, r3
    60ea:	4b03      	ldr	r3, [pc, #12]	; (60f8 <system_clock_source_dfll_set_config+0xc8>)
    60ec:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    60ee:	46c0      	nop			; (mov r8, r8)
    60f0:	46bd      	mov	sp, r7
    60f2:	b002      	add	sp, #8
    60f4:	bd80      	pop	{r7, pc}
    60f6:	46c0      	nop			; (mov r8, r8)
    60f8:	20000160 	.word	0x20000160
    60fc:	03ff0000 	.word	0x03ff0000

00006100 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    6100:	b580      	push	{r7, lr}
    6102:	b082      	sub	sp, #8
    6104:	af00      	add	r7, sp, #0
    6106:	0002      	movs	r2, r0
    6108:	1dfb      	adds	r3, r7, #7
    610a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    610c:	1dfb      	adds	r3, r7, #7
    610e:	781b      	ldrb	r3, [r3, #0]
    6110:	2b08      	cmp	r3, #8
    6112:	d83b      	bhi.n	618c <system_clock_source_enable+0x8c>
    6114:	009a      	lsls	r2, r3, #2
    6116:	4b21      	ldr	r3, [pc, #132]	; (619c <system_clock_source_enable+0x9c>)
    6118:	18d3      	adds	r3, r2, r3
    611a:	681b      	ldr	r3, [r3, #0]
    611c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    611e:	4b20      	ldr	r3, [pc, #128]	; (61a0 <system_clock_source_enable+0xa0>)
    6120:	4a1f      	ldr	r2, [pc, #124]	; (61a0 <system_clock_source_enable+0xa0>)
    6122:	6a12      	ldr	r2, [r2, #32]
    6124:	2102      	movs	r1, #2
    6126:	430a      	orrs	r2, r1
    6128:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    612a:	2300      	movs	r3, #0
    612c:	e031      	b.n	6192 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    612e:	4b1c      	ldr	r3, [pc, #112]	; (61a0 <system_clock_source_enable+0xa0>)
    6130:	4a1b      	ldr	r2, [pc, #108]	; (61a0 <system_clock_source_enable+0xa0>)
    6132:	6992      	ldr	r2, [r2, #24]
    6134:	2102      	movs	r1, #2
    6136:	430a      	orrs	r2, r1
    6138:	619a      	str	r2, [r3, #24]
		break;
    613a:	e029      	b.n	6190 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    613c:	4a18      	ldr	r2, [pc, #96]	; (61a0 <system_clock_source_enable+0xa0>)
    613e:	4b18      	ldr	r3, [pc, #96]	; (61a0 <system_clock_source_enable+0xa0>)
    6140:	8a1b      	ldrh	r3, [r3, #16]
    6142:	b29b      	uxth	r3, r3
    6144:	2102      	movs	r1, #2
    6146:	430b      	orrs	r3, r1
    6148:	b29b      	uxth	r3, r3
    614a:	8213      	strh	r3, [r2, #16]
		break;
    614c:	e020      	b.n	6190 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    614e:	4a14      	ldr	r2, [pc, #80]	; (61a0 <system_clock_source_enable+0xa0>)
    6150:	4b13      	ldr	r3, [pc, #76]	; (61a0 <system_clock_source_enable+0xa0>)
    6152:	8a9b      	ldrh	r3, [r3, #20]
    6154:	b29b      	uxth	r3, r3
    6156:	2102      	movs	r1, #2
    6158:	430b      	orrs	r3, r1
    615a:	b29b      	uxth	r3, r3
    615c:	8293      	strh	r3, [r2, #20]
		break;
    615e:	e017      	b.n	6190 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    6160:	4b10      	ldr	r3, [pc, #64]	; (61a4 <system_clock_source_enable+0xa4>)
    6162:	681b      	ldr	r3, [r3, #0]
    6164:	2202      	movs	r2, #2
    6166:	431a      	orrs	r2, r3
    6168:	4b0e      	ldr	r3, [pc, #56]	; (61a4 <system_clock_source_enable+0xa4>)
    616a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    616c:	4b0e      	ldr	r3, [pc, #56]	; (61a8 <system_clock_source_enable+0xa8>)
    616e:	4798      	blx	r3
		break;
    6170:	e00e      	b.n	6190 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    6172:	4a0b      	ldr	r2, [pc, #44]	; (61a0 <system_clock_source_enable+0xa0>)
    6174:	490a      	ldr	r1, [pc, #40]	; (61a0 <system_clock_source_enable+0xa0>)
    6176:	2344      	movs	r3, #68	; 0x44
    6178:	5ccb      	ldrb	r3, [r1, r3]
    617a:	b2db      	uxtb	r3, r3
    617c:	2102      	movs	r1, #2
    617e:	430b      	orrs	r3, r1
    6180:	b2d9      	uxtb	r1, r3
    6182:	2344      	movs	r3, #68	; 0x44
    6184:	54d1      	strb	r1, [r2, r3]
		break;
    6186:	e003      	b.n	6190 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    6188:	2300      	movs	r3, #0
    618a:	e002      	b.n	6192 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    618c:	2317      	movs	r3, #23
    618e:	e000      	b.n	6192 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    6190:	2300      	movs	r3, #0
}
    6192:	0018      	movs	r0, r3
    6194:	46bd      	mov	sp, r7
    6196:	b002      	add	sp, #8
    6198:	bd80      	pop	{r7, pc}
    619a:	46c0      	nop			; (mov r8, r8)
    619c:	0000bf74 	.word	0x0000bf74
    61a0:	40000800 	.word	0x40000800
    61a4:	20000160 	.word	0x20000160
    61a8:	00005d95 	.word	0x00005d95

000061ac <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    61ac:	b580      	push	{r7, lr}
    61ae:	b084      	sub	sp, #16
    61b0:	af00      	add	r7, sp, #0
    61b2:	0002      	movs	r2, r0
    61b4:	1dfb      	adds	r3, r7, #7
    61b6:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    61b8:	2300      	movs	r3, #0
    61ba:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    61bc:	1dfb      	adds	r3, r7, #7
    61be:	781b      	ldrb	r3, [r3, #0]
    61c0:	2b08      	cmp	r3, #8
    61c2:	d821      	bhi.n	6208 <system_clock_source_is_ready+0x5c>
    61c4:	009a      	lsls	r2, r3, #2
    61c6:	4b18      	ldr	r3, [pc, #96]	; (6228 <system_clock_source_is_ready+0x7c>)
    61c8:	18d3      	adds	r3, r2, r3
    61ca:	681b      	ldr	r3, [r3, #0]
    61cc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    61ce:	2308      	movs	r3, #8
    61d0:	60fb      	str	r3, [r7, #12]
		break;
    61d2:	e01b      	b.n	620c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    61d4:	2304      	movs	r3, #4
    61d6:	60fb      	str	r3, [r7, #12]
		break;
    61d8:	e018      	b.n	620c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    61da:	2301      	movs	r3, #1
    61dc:	60fb      	str	r3, [r7, #12]
		break;
    61de:	e015      	b.n	620c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    61e0:	2302      	movs	r3, #2
    61e2:	60fb      	str	r3, [r7, #12]
		break;
    61e4:	e012      	b.n	620c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    61e6:	23d0      	movs	r3, #208	; 0xd0
    61e8:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    61ea:	e00f      	b.n	620c <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    61ec:	4a0f      	ldr	r2, [pc, #60]	; (622c <system_clock_source_is_ready+0x80>)
    61ee:	2350      	movs	r3, #80	; 0x50
    61f0:	5cd3      	ldrb	r3, [r2, r3]
    61f2:	b2db      	uxtb	r3, r3
    61f4:	001a      	movs	r2, r3
    61f6:	2303      	movs	r3, #3
    61f8:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    61fa:	3b03      	subs	r3, #3
    61fc:	425a      	negs	r2, r3
    61fe:	4153      	adcs	r3, r2
    6200:	b2db      	uxtb	r3, r3
    6202:	e00c      	b.n	621e <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    6204:	2301      	movs	r3, #1
    6206:	e00a      	b.n	621e <system_clock_source_is_ready+0x72>

	default:
		return false;
    6208:	2300      	movs	r3, #0
    620a:	e008      	b.n	621e <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    620c:	4b07      	ldr	r3, [pc, #28]	; (622c <system_clock_source_is_ready+0x80>)
    620e:	68db      	ldr	r3, [r3, #12]
    6210:	68fa      	ldr	r2, [r7, #12]
    6212:	401a      	ands	r2, r3
    6214:	68fb      	ldr	r3, [r7, #12]
    6216:	1ad3      	subs	r3, r2, r3
    6218:	425a      	negs	r2, r3
    621a:	4153      	adcs	r3, r2
    621c:	b2db      	uxtb	r3, r3
}
    621e:	0018      	movs	r0, r3
    6220:	46bd      	mov	sp, r7
    6222:	b004      	add	sp, #16
    6224:	bd80      	pop	{r7, pc}
    6226:	46c0      	nop			; (mov r8, r8)
    6228:	0000bf98 	.word	0x0000bf98
    622c:	40000800 	.word	0x40000800

00006230 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    6230:	b580      	push	{r7, lr}
    6232:	b082      	sub	sp, #8
    6234:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    6236:	003b      	movs	r3, r7
    6238:	2202      	movs	r2, #2
    623a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    623c:	2300      	movs	r3, #0
    623e:	607b      	str	r3, [r7, #4]
    6240:	e009      	b.n	6256 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    6242:	687b      	ldr	r3, [r7, #4]
    6244:	b2db      	uxtb	r3, r3
    6246:	003a      	movs	r2, r7
    6248:	0011      	movs	r1, r2
    624a:	0018      	movs	r0, r3
    624c:	4b05      	ldr	r3, [pc, #20]	; (6264 <_switch_peripheral_gclk+0x34>)
    624e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6250:	687b      	ldr	r3, [r7, #4]
    6252:	3301      	adds	r3, #1
    6254:	607b      	str	r3, [r7, #4]
    6256:	687b      	ldr	r3, [r7, #4]
    6258:	2b24      	cmp	r3, #36	; 0x24
    625a:	d9f2      	bls.n	6242 <_switch_peripheral_gclk+0x12>
	}
}
    625c:	46c0      	nop			; (mov r8, r8)
    625e:	46bd      	mov	sp, r7
    6260:	b002      	add	sp, #8
    6262:	bd80      	pop	{r7, pc}
    6264:	00006805 	.word	0x00006805

00006268 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6268:	b580      	push	{r7, lr}
    626a:	b0aa      	sub	sp, #168	; 0xa8
    626c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    626e:	4b85      	ldr	r3, [pc, #532]	; (6484 <system_clock_init+0x21c>)
    6270:	22c2      	movs	r2, #194	; 0xc2
    6272:	00d2      	lsls	r2, r2, #3
    6274:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    6276:	2002      	movs	r0, #2
    6278:	4b83      	ldr	r3, [pc, #524]	; (6488 <system_clock_init+0x220>)
    627a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    627c:	4b83      	ldr	r3, [pc, #524]	; (648c <system_clock_init+0x224>)
    627e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    6280:	2394      	movs	r3, #148	; 0x94
    6282:	18fb      	adds	r3, r7, r3
    6284:	0018      	movs	r0, r3
    6286:	4b82      	ldr	r3, [pc, #520]	; (6490 <system_clock_init+0x228>)
    6288:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    628a:	2394      	movs	r3, #148	; 0x94
    628c:	18fb      	adds	r3, r7, r3
    628e:	2280      	movs	r2, #128	; 0x80
    6290:	0212      	lsls	r2, r2, #8
    6292:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    6294:	2394      	movs	r3, #148	; 0x94
    6296:	18fb      	adds	r3, r7, r3
    6298:	2200      	movs	r2, #0
    629a:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    629c:	2394      	movs	r3, #148	; 0x94
    629e:	18fb      	adds	r3, r7, r3
    62a0:	2206      	movs	r2, #6
    62a2:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    62a4:	2394      	movs	r3, #148	; 0x94
    62a6:	18fb      	adds	r3, r7, r3
    62a8:	2200      	movs	r2, #0
    62aa:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    62ac:	2394      	movs	r3, #148	; 0x94
    62ae:	18fb      	adds	r3, r7, r3
    62b0:	2200      	movs	r2, #0
    62b2:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    62b4:	2394      	movs	r3, #148	; 0x94
    62b6:	18fb      	adds	r3, r7, r3
    62b8:	2201      	movs	r2, #1
    62ba:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    62bc:	2394      	movs	r3, #148	; 0x94
    62be:	18fb      	adds	r3, r7, r3
    62c0:	2200      	movs	r2, #0
    62c2:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    62c4:	2394      	movs	r3, #148	; 0x94
    62c6:	18fb      	adds	r3, r7, r3
    62c8:	2201      	movs	r2, #1
    62ca:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    62cc:	2394      	movs	r3, #148	; 0x94
    62ce:	18fb      	adds	r3, r7, r3
    62d0:	0018      	movs	r0, r3
    62d2:	4b70      	ldr	r3, [pc, #448]	; (6494 <system_clock_init+0x22c>)
    62d4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    62d6:	2005      	movs	r0, #5
    62d8:	4b6f      	ldr	r3, [pc, #444]	; (6498 <system_clock_init+0x230>)
    62da:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    62dc:	46c0      	nop			; (mov r8, r8)
    62de:	2005      	movs	r0, #5
    62e0:	4b6e      	ldr	r3, [pc, #440]	; (649c <system_clock_init+0x234>)
    62e2:	4798      	blx	r3
    62e4:	0003      	movs	r3, r0
    62e6:	001a      	movs	r2, r3
    62e8:	2301      	movs	r3, #1
    62ea:	4053      	eors	r3, r2
    62ec:	b2db      	uxtb	r3, r3
    62ee:	2b00      	cmp	r3, #0
    62f0:	d1f5      	bne.n	62de <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    62f2:	2380      	movs	r3, #128	; 0x80
    62f4:	18fb      	adds	r3, r7, r3
    62f6:	0018      	movs	r0, r3
    62f8:	4b69      	ldr	r3, [pc, #420]	; (64a0 <system_clock_init+0x238>)
    62fa:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    62fc:	2380      	movs	r3, #128	; 0x80
    62fe:	18fb      	adds	r3, r7, r3
    6300:	2204      	movs	r2, #4
    6302:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    6304:	2380      	movs	r3, #128	; 0x80
    6306:	18fb      	adds	r3, r7, r3
    6308:	2200      	movs	r2, #0
    630a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    630c:	4b65      	ldr	r3, [pc, #404]	; (64a4 <system_clock_init+0x23c>)
    630e:	681b      	ldr	r3, [r3, #0]
    6310:	0e9b      	lsrs	r3, r3, #26
    6312:	22a4      	movs	r2, #164	; 0xa4
    6314:	18ba      	adds	r2, r7, r2
    6316:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    6318:	23a4      	movs	r3, #164	; 0xa4
    631a:	18fb      	adds	r3, r7, r3
    631c:	681b      	ldr	r3, [r3, #0]
    631e:	2b3f      	cmp	r3, #63	; 0x3f
    6320:	d103      	bne.n	632a <system_clock_init+0xc2>
		coarse = 0x1f;
    6322:	231f      	movs	r3, #31
    6324:	22a4      	movs	r2, #164	; 0xa4
    6326:	18ba      	adds	r2, r7, r2
    6328:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    632a:	23a4      	movs	r3, #164	; 0xa4
    632c:	18fb      	adds	r3, r7, r3
    632e:	681b      	ldr	r3, [r3, #0]
    6330:	b2da      	uxtb	r2, r3
    6332:	2380      	movs	r3, #128	; 0x80
    6334:	18fb      	adds	r3, r7, r3
    6336:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6338:	2380      	movs	r3, #128	; 0x80
    633a:	18fb      	adds	r3, r7, r3
    633c:	2200      	movs	r2, #0
    633e:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6340:	2380      	movs	r3, #128	; 0x80
    6342:	18fb      	adds	r3, r7, r3
    6344:	2200      	movs	r2, #0
    6346:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6348:	2380      	movs	r3, #128	; 0x80
    634a:	18fb      	adds	r3, r7, r3
    634c:	2200      	movs	r2, #0
    634e:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6350:	2380      	movs	r3, #128	; 0x80
    6352:	18fb      	adds	r3, r7, r3
    6354:	2200      	movs	r2, #0
    6356:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    6358:	2380      	movs	r3, #128	; 0x80
    635a:	18fb      	adds	r3, r7, r3
    635c:	22b7      	movs	r2, #183	; 0xb7
    635e:	00d2      	lsls	r2, r2, #3
    6360:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    6362:	2380      	movs	r3, #128	; 0x80
    6364:	18fb      	adds	r3, r7, r3
    6366:	2203      	movs	r2, #3
    6368:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    636a:	2380      	movs	r3, #128	; 0x80
    636c:	18fb      	adds	r3, r7, r3
    636e:	221f      	movs	r2, #31
    6370:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    6372:	2380      	movs	r3, #128	; 0x80
    6374:	18fb      	adds	r3, r7, r3
    6376:	0018      	movs	r0, r3
    6378:	4b4b      	ldr	r3, [pc, #300]	; (64a8 <system_clock_init+0x240>)
    637a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    637c:	237c      	movs	r3, #124	; 0x7c
    637e:	18fb      	adds	r3, r7, r3
    6380:	0018      	movs	r0, r3
    6382:	4b4a      	ldr	r3, [pc, #296]	; (64ac <system_clock_init+0x244>)
    6384:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    6386:	237c      	movs	r3, #124	; 0x7c
    6388:	18fb      	adds	r3, r7, r3
    638a:	2200      	movs	r2, #0
    638c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    638e:	237c      	movs	r3, #124	; 0x7c
    6390:	18fb      	adds	r3, r7, r3
    6392:	2201      	movs	r2, #1
    6394:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    6396:	237c      	movs	r3, #124	; 0x7c
    6398:	18fb      	adds	r3, r7, r3
    639a:	2201      	movs	r2, #1
    639c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    639e:	237c      	movs	r3, #124	; 0x7c
    63a0:	18fb      	adds	r3, r7, r3
    63a2:	0018      	movs	r0, r3
    63a4:	4b42      	ldr	r3, [pc, #264]	; (64b0 <system_clock_init+0x248>)
    63a6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    63a8:	2006      	movs	r0, #6
    63aa:	4b3b      	ldr	r3, [pc, #236]	; (6498 <system_clock_init+0x230>)
    63ac:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    63ae:	4b41      	ldr	r3, [pc, #260]	; (64b4 <system_clock_init+0x24c>)
    63b0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    63b2:	2364      	movs	r3, #100	; 0x64
    63b4:	18fb      	adds	r3, r7, r3
    63b6:	0018      	movs	r0, r3
    63b8:	4b3f      	ldr	r3, [pc, #252]	; (64b8 <system_clock_init+0x250>)
    63ba:	4798      	blx	r3
    63bc:	2364      	movs	r3, #100	; 0x64
    63be:	18fb      	adds	r3, r7, r3
    63c0:	2205      	movs	r2, #5
    63c2:	701a      	strb	r2, [r3, #0]
    63c4:	2364      	movs	r3, #100	; 0x64
    63c6:	18fb      	adds	r3, r7, r3
    63c8:	2201      	movs	r2, #1
    63ca:	605a      	str	r2, [r3, #4]
    63cc:	2364      	movs	r3, #100	; 0x64
    63ce:	18fb      	adds	r3, r7, r3
    63d0:	2200      	movs	r2, #0
    63d2:	721a      	strb	r2, [r3, #8]
    63d4:	2364      	movs	r3, #100	; 0x64
    63d6:	18fb      	adds	r3, r7, r3
    63d8:	2200      	movs	r2, #0
    63da:	725a      	strb	r2, [r3, #9]
    63dc:	2364      	movs	r3, #100	; 0x64
    63de:	18fb      	adds	r3, r7, r3
    63e0:	0019      	movs	r1, r3
    63e2:	2001      	movs	r0, #1
    63e4:	4b35      	ldr	r3, [pc, #212]	; (64bc <system_clock_init+0x254>)
    63e6:	4798      	blx	r3
    63e8:	2001      	movs	r0, #1
    63ea:	4b35      	ldr	r3, [pc, #212]	; (64c0 <system_clock_init+0x258>)
    63ec:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    63ee:	230c      	movs	r3, #12
    63f0:	18fb      	adds	r3, r7, r3
    63f2:	0018      	movs	r0, r3
    63f4:	4b33      	ldr	r3, [pc, #204]	; (64c4 <system_clock_init+0x25c>)
    63f6:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    63f8:	230c      	movs	r3, #12
    63fa:	18fb      	adds	r3, r7, r3
    63fc:	2201      	movs	r2, #1
    63fe:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    6400:	230c      	movs	r3, #12
    6402:	18fb      	adds	r3, r7, r3
    6404:	0019      	movs	r1, r3
    6406:	2000      	movs	r0, #0
    6408:	4b2f      	ldr	r3, [pc, #188]	; (64c8 <system_clock_init+0x260>)
    640a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    640c:	2000      	movs	r0, #0
    640e:	4b2f      	ldr	r3, [pc, #188]	; (64cc <system_clock_init+0x264>)
    6410:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    6412:	2007      	movs	r0, #7
    6414:	4b20      	ldr	r3, [pc, #128]	; (6498 <system_clock_init+0x230>)
    6416:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6418:	46c0      	nop			; (mov r8, r8)
    641a:	2007      	movs	r0, #7
    641c:	4b1f      	ldr	r3, [pc, #124]	; (649c <system_clock_init+0x234>)
    641e:	4798      	blx	r3
    6420:	0003      	movs	r3, r0
    6422:	001a      	movs	r2, r3
    6424:	2301      	movs	r3, #1
    6426:	4053      	eors	r3, r2
    6428:	b2db      	uxtb	r3, r3
    642a:	2b00      	cmp	r3, #0
    642c:	d1f5      	bne.n	641a <system_clock_init+0x1b2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    642e:	2000      	movs	r0, #0
    6430:	4b27      	ldr	r3, [pc, #156]	; (64d0 <system_clock_init+0x268>)
    6432:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    6434:	2100      	movs	r1, #0
    6436:	2000      	movs	r0, #0
    6438:	4b26      	ldr	r3, [pc, #152]	; (64d4 <system_clock_init+0x26c>)
    643a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    643c:	2100      	movs	r1, #0
    643e:	2001      	movs	r0, #1
    6440:	4b24      	ldr	r3, [pc, #144]	; (64d4 <system_clock_init+0x26c>)
    6442:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    6444:	2100      	movs	r1, #0
    6446:	2002      	movs	r0, #2
    6448:	4b22      	ldr	r3, [pc, #136]	; (64d4 <system_clock_init+0x26c>)
    644a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    644c:	003b      	movs	r3, r7
    644e:	0018      	movs	r0, r3
    6450:	4b19      	ldr	r3, [pc, #100]	; (64b8 <system_clock_init+0x250>)
    6452:	4798      	blx	r3
    6454:	003b      	movs	r3, r7
    6456:	2207      	movs	r2, #7
    6458:	701a      	strb	r2, [r3, #0]
    645a:	003b      	movs	r3, r7
    645c:	2201      	movs	r2, #1
    645e:	605a      	str	r2, [r3, #4]
    6460:	003b      	movs	r3, r7
    6462:	2201      	movs	r2, #1
    6464:	721a      	strb	r2, [r3, #8]
    6466:	003b      	movs	r3, r7
    6468:	2200      	movs	r2, #0
    646a:	725a      	strb	r2, [r3, #9]
    646c:	003b      	movs	r3, r7
    646e:	0019      	movs	r1, r3
    6470:	2000      	movs	r0, #0
    6472:	4b12      	ldr	r3, [pc, #72]	; (64bc <system_clock_init+0x254>)
    6474:	4798      	blx	r3
    6476:	2000      	movs	r0, #0
    6478:	4b11      	ldr	r3, [pc, #68]	; (64c0 <system_clock_init+0x258>)
    647a:	4798      	blx	r3
#endif
}
    647c:	46c0      	nop			; (mov r8, r8)
    647e:	46bd      	mov	sp, r7
    6480:	b02a      	add	sp, #168	; 0xa8
    6482:	bd80      	pop	{r7, pc}
    6484:	40000800 	.word	0x40000800
    6488:	00005d45 	.word	0x00005d45
    648c:	00006231 	.word	0x00006231
    6490:	00005c15 	.word	0x00005c15
    6494:	00005f11 	.word	0x00005f11
    6498:	00006101 	.word	0x00006101
    649c:	000061ad 	.word	0x000061ad
    64a0:	00005c7f 	.word	0x00005c7f
    64a4:	00806024 	.word	0x00806024
    64a8:	00006031 	.word	0x00006031
    64ac:	00005c5d 	.word	0x00005c5d
    64b0:	00005e99 	.word	0x00005e99
    64b4:	0000657d 	.word	0x0000657d
    64b8:	00005bd1 	.word	0x00005bd1
    64bc:	000065ad 	.word	0x000065ad
    64c0:	000066d1 	.word	0x000066d1
    64c4:	00005bff 	.word	0x00005bff
    64c8:	00006805 	.word	0x00006805
    64cc:	00006849 	.word	0x00006849
    64d0:	00005cd1 	.word	0x00005cd1
    64d4:	00005cf1 	.word	0x00005cf1

000064d8 <system_apb_clock_set_mask>:
{
    64d8:	b580      	push	{r7, lr}
    64da:	b082      	sub	sp, #8
    64dc:	af00      	add	r7, sp, #0
    64de:	0002      	movs	r2, r0
    64e0:	6039      	str	r1, [r7, #0]
    64e2:	1dfb      	adds	r3, r7, #7
    64e4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    64e6:	1dfb      	adds	r3, r7, #7
    64e8:	781b      	ldrb	r3, [r3, #0]
    64ea:	2b01      	cmp	r3, #1
    64ec:	d00a      	beq.n	6504 <system_apb_clock_set_mask+0x2c>
    64ee:	2b02      	cmp	r3, #2
    64f0:	d00f      	beq.n	6512 <system_apb_clock_set_mask+0x3a>
    64f2:	2b00      	cmp	r3, #0
    64f4:	d114      	bne.n	6520 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    64f6:	4b0e      	ldr	r3, [pc, #56]	; (6530 <system_apb_clock_set_mask+0x58>)
    64f8:	4a0d      	ldr	r2, [pc, #52]	; (6530 <system_apb_clock_set_mask+0x58>)
    64fa:	6991      	ldr	r1, [r2, #24]
    64fc:	683a      	ldr	r2, [r7, #0]
    64fe:	430a      	orrs	r2, r1
    6500:	619a      	str	r2, [r3, #24]
			break;
    6502:	e00f      	b.n	6524 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6504:	4b0a      	ldr	r3, [pc, #40]	; (6530 <system_apb_clock_set_mask+0x58>)
    6506:	4a0a      	ldr	r2, [pc, #40]	; (6530 <system_apb_clock_set_mask+0x58>)
    6508:	69d1      	ldr	r1, [r2, #28]
    650a:	683a      	ldr	r2, [r7, #0]
    650c:	430a      	orrs	r2, r1
    650e:	61da      	str	r2, [r3, #28]
			break;
    6510:	e008      	b.n	6524 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6512:	4b07      	ldr	r3, [pc, #28]	; (6530 <system_apb_clock_set_mask+0x58>)
    6514:	4a06      	ldr	r2, [pc, #24]	; (6530 <system_apb_clock_set_mask+0x58>)
    6516:	6a11      	ldr	r1, [r2, #32]
    6518:	683a      	ldr	r2, [r7, #0]
    651a:	430a      	orrs	r2, r1
    651c:	621a      	str	r2, [r3, #32]
			break;
    651e:	e001      	b.n	6524 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6520:	2317      	movs	r3, #23
    6522:	e000      	b.n	6526 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6524:	2300      	movs	r3, #0
}
    6526:	0018      	movs	r0, r3
    6528:	46bd      	mov	sp, r7
    652a:	b002      	add	sp, #8
    652c:	bd80      	pop	{r7, pc}
    652e:	46c0      	nop			; (mov r8, r8)
    6530:	40000400 	.word	0x40000400

00006534 <system_interrupt_enter_critical_section>:
{
    6534:	b580      	push	{r7, lr}
    6536:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6538:	4b02      	ldr	r3, [pc, #8]	; (6544 <system_interrupt_enter_critical_section+0x10>)
    653a:	4798      	blx	r3
}
    653c:	46c0      	nop			; (mov r8, r8)
    653e:	46bd      	mov	sp, r7
    6540:	bd80      	pop	{r7, pc}
    6542:	46c0      	nop			; (mov r8, r8)
    6544:	00003179 	.word	0x00003179

00006548 <system_interrupt_leave_critical_section>:
{
    6548:	b580      	push	{r7, lr}
    654a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    654c:	4b02      	ldr	r3, [pc, #8]	; (6558 <system_interrupt_leave_critical_section+0x10>)
    654e:	4798      	blx	r3
}
    6550:	46c0      	nop			; (mov r8, r8)
    6552:	46bd      	mov	sp, r7
    6554:	bd80      	pop	{r7, pc}
    6556:	46c0      	nop			; (mov r8, r8)
    6558:	000031cd 	.word	0x000031cd

0000655c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    655c:	b580      	push	{r7, lr}
    655e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6560:	4b05      	ldr	r3, [pc, #20]	; (6578 <system_gclk_is_syncing+0x1c>)
    6562:	785b      	ldrb	r3, [r3, #1]
    6564:	b2db      	uxtb	r3, r3
    6566:	b25b      	sxtb	r3, r3
    6568:	2b00      	cmp	r3, #0
    656a:	da01      	bge.n	6570 <system_gclk_is_syncing+0x14>
		return true;
    656c:	2301      	movs	r3, #1
    656e:	e000      	b.n	6572 <system_gclk_is_syncing+0x16>
	}

	return false;
    6570:	2300      	movs	r3, #0
}
    6572:	0018      	movs	r0, r3
    6574:	46bd      	mov	sp, r7
    6576:	bd80      	pop	{r7, pc}
    6578:	40000c00 	.word	0x40000c00

0000657c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    657c:	b580      	push	{r7, lr}
    657e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    6580:	2108      	movs	r1, #8
    6582:	2000      	movs	r0, #0
    6584:	4b07      	ldr	r3, [pc, #28]	; (65a4 <system_gclk_init+0x28>)
    6586:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6588:	4b07      	ldr	r3, [pc, #28]	; (65a8 <system_gclk_init+0x2c>)
    658a:	2201      	movs	r2, #1
    658c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    658e:	46c0      	nop			; (mov r8, r8)
    6590:	4b05      	ldr	r3, [pc, #20]	; (65a8 <system_gclk_init+0x2c>)
    6592:	781b      	ldrb	r3, [r3, #0]
    6594:	b2db      	uxtb	r3, r3
    6596:	001a      	movs	r2, r3
    6598:	2301      	movs	r3, #1
    659a:	4013      	ands	r3, r2
    659c:	d1f8      	bne.n	6590 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    659e:	46c0      	nop			; (mov r8, r8)
    65a0:	46bd      	mov	sp, r7
    65a2:	bd80      	pop	{r7, pc}
    65a4:	000064d9 	.word	0x000064d9
    65a8:	40000c00 	.word	0x40000c00

000065ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    65ac:	b580      	push	{r7, lr}
    65ae:	b086      	sub	sp, #24
    65b0:	af00      	add	r7, sp, #0
    65b2:	0002      	movs	r2, r0
    65b4:	6039      	str	r1, [r7, #0]
    65b6:	1dfb      	adds	r3, r7, #7
    65b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    65ba:	1dfb      	adds	r3, r7, #7
    65bc:	781b      	ldrb	r3, [r3, #0]
    65be:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    65c0:	1dfb      	adds	r3, r7, #7
    65c2:	781b      	ldrb	r3, [r3, #0]
    65c4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    65c6:	683b      	ldr	r3, [r7, #0]
    65c8:	781b      	ldrb	r3, [r3, #0]
    65ca:	021b      	lsls	r3, r3, #8
    65cc:	001a      	movs	r2, r3
    65ce:	697b      	ldr	r3, [r7, #20]
    65d0:	4313      	orrs	r3, r2
    65d2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    65d4:	683b      	ldr	r3, [r7, #0]
    65d6:	785b      	ldrb	r3, [r3, #1]
    65d8:	2b00      	cmp	r3, #0
    65da:	d004      	beq.n	65e6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    65dc:	697b      	ldr	r3, [r7, #20]
    65de:	2280      	movs	r2, #128	; 0x80
    65e0:	02d2      	lsls	r2, r2, #11
    65e2:	4313      	orrs	r3, r2
    65e4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    65e6:	683b      	ldr	r3, [r7, #0]
    65e8:	7a5b      	ldrb	r3, [r3, #9]
    65ea:	2b00      	cmp	r3, #0
    65ec:	d004      	beq.n	65f8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    65ee:	697b      	ldr	r3, [r7, #20]
    65f0:	2280      	movs	r2, #128	; 0x80
    65f2:	0312      	lsls	r2, r2, #12
    65f4:	4313      	orrs	r3, r2
    65f6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    65f8:	683b      	ldr	r3, [r7, #0]
    65fa:	685b      	ldr	r3, [r3, #4]
    65fc:	2b01      	cmp	r3, #1
    65fe:	d92c      	bls.n	665a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6600:	683b      	ldr	r3, [r7, #0]
    6602:	685a      	ldr	r2, [r3, #4]
    6604:	683b      	ldr	r3, [r7, #0]
    6606:	685b      	ldr	r3, [r3, #4]
    6608:	3b01      	subs	r3, #1
    660a:	4013      	ands	r3, r2
    660c:	d11a      	bne.n	6644 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    660e:	2300      	movs	r3, #0
    6610:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6612:	2302      	movs	r3, #2
    6614:	60bb      	str	r3, [r7, #8]
    6616:	e005      	b.n	6624 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    6618:	68fb      	ldr	r3, [r7, #12]
    661a:	3301      	adds	r3, #1
    661c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    661e:	68bb      	ldr	r3, [r7, #8]
    6620:	005b      	lsls	r3, r3, #1
    6622:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    6624:	683b      	ldr	r3, [r7, #0]
    6626:	685a      	ldr	r2, [r3, #4]
    6628:	68bb      	ldr	r3, [r7, #8]
    662a:	429a      	cmp	r2, r3
    662c:	d8f4      	bhi.n	6618 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    662e:	68fb      	ldr	r3, [r7, #12]
    6630:	021b      	lsls	r3, r3, #8
    6632:	693a      	ldr	r2, [r7, #16]
    6634:	4313      	orrs	r3, r2
    6636:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6638:	697b      	ldr	r3, [r7, #20]
    663a:	2280      	movs	r2, #128	; 0x80
    663c:	0352      	lsls	r2, r2, #13
    663e:	4313      	orrs	r3, r2
    6640:	617b      	str	r3, [r7, #20]
    6642:	e00a      	b.n	665a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6644:	683b      	ldr	r3, [r7, #0]
    6646:	685b      	ldr	r3, [r3, #4]
    6648:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    664a:	693a      	ldr	r2, [r7, #16]
    664c:	4313      	orrs	r3, r2
    664e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6650:	697b      	ldr	r3, [r7, #20]
    6652:	2280      	movs	r2, #128	; 0x80
    6654:	0292      	lsls	r2, r2, #10
    6656:	4313      	orrs	r3, r2
    6658:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    665a:	683b      	ldr	r3, [r7, #0]
    665c:	7a1b      	ldrb	r3, [r3, #8]
    665e:	2b00      	cmp	r3, #0
    6660:	d004      	beq.n	666c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6662:	697b      	ldr	r3, [r7, #20]
    6664:	2280      	movs	r2, #128	; 0x80
    6666:	0392      	lsls	r2, r2, #14
    6668:	4313      	orrs	r3, r2
    666a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    666c:	46c0      	nop			; (mov r8, r8)
    666e:	4b13      	ldr	r3, [pc, #76]	; (66bc <system_gclk_gen_set_config+0x110>)
    6670:	4798      	blx	r3
    6672:	1e03      	subs	r3, r0, #0
    6674:	d1fb      	bne.n	666e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6676:	4b12      	ldr	r3, [pc, #72]	; (66c0 <system_gclk_gen_set_config+0x114>)
    6678:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    667a:	4a12      	ldr	r2, [pc, #72]	; (66c4 <system_gclk_gen_set_config+0x118>)
    667c:	1dfb      	adds	r3, r7, #7
    667e:	781b      	ldrb	r3, [r3, #0]
    6680:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6682:	46c0      	nop			; (mov r8, r8)
    6684:	4b0d      	ldr	r3, [pc, #52]	; (66bc <system_gclk_gen_set_config+0x110>)
    6686:	4798      	blx	r3
    6688:	1e03      	subs	r3, r0, #0
    668a:	d1fb      	bne.n	6684 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    668c:	4b0e      	ldr	r3, [pc, #56]	; (66c8 <system_gclk_gen_set_config+0x11c>)
    668e:	693a      	ldr	r2, [r7, #16]
    6690:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    6692:	46c0      	nop			; (mov r8, r8)
    6694:	4b09      	ldr	r3, [pc, #36]	; (66bc <system_gclk_gen_set_config+0x110>)
    6696:	4798      	blx	r3
    6698:	1e03      	subs	r3, r0, #0
    669a:	d1fb      	bne.n	6694 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    669c:	4b0a      	ldr	r3, [pc, #40]	; (66c8 <system_gclk_gen_set_config+0x11c>)
    669e:	4a0a      	ldr	r2, [pc, #40]	; (66c8 <system_gclk_gen_set_config+0x11c>)
    66a0:	6851      	ldr	r1, [r2, #4]
    66a2:	2280      	movs	r2, #128	; 0x80
    66a4:	0252      	lsls	r2, r2, #9
    66a6:	4011      	ands	r1, r2
    66a8:	697a      	ldr	r2, [r7, #20]
    66aa:	430a      	orrs	r2, r1
    66ac:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    66ae:	4b07      	ldr	r3, [pc, #28]	; (66cc <system_gclk_gen_set_config+0x120>)
    66b0:	4798      	blx	r3
}
    66b2:	46c0      	nop			; (mov r8, r8)
    66b4:	46bd      	mov	sp, r7
    66b6:	b006      	add	sp, #24
    66b8:	bd80      	pop	{r7, pc}
    66ba:	46c0      	nop			; (mov r8, r8)
    66bc:	0000655d 	.word	0x0000655d
    66c0:	00006535 	.word	0x00006535
    66c4:	40000c08 	.word	0x40000c08
    66c8:	40000c00 	.word	0x40000c00
    66cc:	00006549 	.word	0x00006549

000066d0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    66d0:	b580      	push	{r7, lr}
    66d2:	b082      	sub	sp, #8
    66d4:	af00      	add	r7, sp, #0
    66d6:	0002      	movs	r2, r0
    66d8:	1dfb      	adds	r3, r7, #7
    66da:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    66dc:	46c0      	nop			; (mov r8, r8)
    66de:	4b0e      	ldr	r3, [pc, #56]	; (6718 <system_gclk_gen_enable+0x48>)
    66e0:	4798      	blx	r3
    66e2:	1e03      	subs	r3, r0, #0
    66e4:	d1fb      	bne.n	66de <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    66e6:	4b0d      	ldr	r3, [pc, #52]	; (671c <system_gclk_gen_enable+0x4c>)
    66e8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    66ea:	4a0d      	ldr	r2, [pc, #52]	; (6720 <system_gclk_gen_enable+0x50>)
    66ec:	1dfb      	adds	r3, r7, #7
    66ee:	781b      	ldrb	r3, [r3, #0]
    66f0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    66f2:	46c0      	nop			; (mov r8, r8)
    66f4:	4b08      	ldr	r3, [pc, #32]	; (6718 <system_gclk_gen_enable+0x48>)
    66f6:	4798      	blx	r3
    66f8:	1e03      	subs	r3, r0, #0
    66fa:	d1fb      	bne.n	66f4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    66fc:	4b09      	ldr	r3, [pc, #36]	; (6724 <system_gclk_gen_enable+0x54>)
    66fe:	4a09      	ldr	r2, [pc, #36]	; (6724 <system_gclk_gen_enable+0x54>)
    6700:	6852      	ldr	r2, [r2, #4]
    6702:	2180      	movs	r1, #128	; 0x80
    6704:	0249      	lsls	r1, r1, #9
    6706:	430a      	orrs	r2, r1
    6708:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    670a:	4b07      	ldr	r3, [pc, #28]	; (6728 <system_gclk_gen_enable+0x58>)
    670c:	4798      	blx	r3
}
    670e:	46c0      	nop			; (mov r8, r8)
    6710:	46bd      	mov	sp, r7
    6712:	b002      	add	sp, #8
    6714:	bd80      	pop	{r7, pc}
    6716:	46c0      	nop			; (mov r8, r8)
    6718:	0000655d 	.word	0x0000655d
    671c:	00006535 	.word	0x00006535
    6720:	40000c04 	.word	0x40000c04
    6724:	40000c00 	.word	0x40000c00
    6728:	00006549 	.word	0x00006549

0000672c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    672c:	b580      	push	{r7, lr}
    672e:	b086      	sub	sp, #24
    6730:	af00      	add	r7, sp, #0
    6732:	0002      	movs	r2, r0
    6734:	1dfb      	adds	r3, r7, #7
    6736:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6738:	46c0      	nop			; (mov r8, r8)
    673a:	4b2a      	ldr	r3, [pc, #168]	; (67e4 <system_gclk_gen_get_hz+0xb8>)
    673c:	4798      	blx	r3
    673e:	1e03      	subs	r3, r0, #0
    6740:	d1fb      	bne.n	673a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6742:	4b29      	ldr	r3, [pc, #164]	; (67e8 <system_gclk_gen_get_hz+0xbc>)
    6744:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6746:	4a29      	ldr	r2, [pc, #164]	; (67ec <system_gclk_gen_get_hz+0xc0>)
    6748:	1dfb      	adds	r3, r7, #7
    674a:	781b      	ldrb	r3, [r3, #0]
    674c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    674e:	46c0      	nop			; (mov r8, r8)
    6750:	4b24      	ldr	r3, [pc, #144]	; (67e4 <system_gclk_gen_get_hz+0xb8>)
    6752:	4798      	blx	r3
    6754:	1e03      	subs	r3, r0, #0
    6756:	d1fb      	bne.n	6750 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6758:	4b25      	ldr	r3, [pc, #148]	; (67f0 <system_gclk_gen_get_hz+0xc4>)
    675a:	685b      	ldr	r3, [r3, #4]
    675c:	04db      	lsls	r3, r3, #19
    675e:	0edb      	lsrs	r3, r3, #27
    6760:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6762:	0018      	movs	r0, r3
    6764:	4b23      	ldr	r3, [pc, #140]	; (67f4 <system_gclk_gen_get_hz+0xc8>)
    6766:	4798      	blx	r3
    6768:	0003      	movs	r3, r0
    676a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    676c:	4a1f      	ldr	r2, [pc, #124]	; (67ec <system_gclk_gen_get_hz+0xc0>)
    676e:	1dfb      	adds	r3, r7, #7
    6770:	781b      	ldrb	r3, [r3, #0]
    6772:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6774:	4b1e      	ldr	r3, [pc, #120]	; (67f0 <system_gclk_gen_get_hz+0xc4>)
    6776:	685b      	ldr	r3, [r3, #4]
    6778:	02db      	lsls	r3, r3, #11
    677a:	0fdb      	lsrs	r3, r3, #31
    677c:	b2da      	uxtb	r2, r3
    677e:	2313      	movs	r3, #19
    6780:	18fb      	adds	r3, r7, r3
    6782:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6784:	4a1c      	ldr	r2, [pc, #112]	; (67f8 <system_gclk_gen_get_hz+0xcc>)
    6786:	1dfb      	adds	r3, r7, #7
    6788:	781b      	ldrb	r3, [r3, #0]
    678a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    678c:	46c0      	nop			; (mov r8, r8)
    678e:	4b15      	ldr	r3, [pc, #84]	; (67e4 <system_gclk_gen_get_hz+0xb8>)
    6790:	4798      	blx	r3
    6792:	1e03      	subs	r3, r0, #0
    6794:	d1fb      	bne.n	678e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6796:	4b16      	ldr	r3, [pc, #88]	; (67f0 <system_gclk_gen_get_hz+0xc4>)
    6798:	689b      	ldr	r3, [r3, #8]
    679a:	021b      	lsls	r3, r3, #8
    679c:	0c1b      	lsrs	r3, r3, #16
    679e:	b29b      	uxth	r3, r3
    67a0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    67a2:	4b16      	ldr	r3, [pc, #88]	; (67fc <system_gclk_gen_get_hz+0xd0>)
    67a4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    67a6:	2313      	movs	r3, #19
    67a8:	18fb      	adds	r3, r7, r3
    67aa:	781b      	ldrb	r3, [r3, #0]
    67ac:	2b00      	cmp	r3, #0
    67ae:	d109      	bne.n	67c4 <system_gclk_gen_get_hz+0x98>
    67b0:	68fb      	ldr	r3, [r7, #12]
    67b2:	2b01      	cmp	r3, #1
    67b4:	d906      	bls.n	67c4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    67b6:	4b12      	ldr	r3, [pc, #72]	; (6800 <system_gclk_gen_get_hz+0xd4>)
    67b8:	68f9      	ldr	r1, [r7, #12]
    67ba:	6978      	ldr	r0, [r7, #20]
    67bc:	4798      	blx	r3
    67be:	0003      	movs	r3, r0
    67c0:	617b      	str	r3, [r7, #20]
    67c2:	e00a      	b.n	67da <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    67c4:	2313      	movs	r3, #19
    67c6:	18fb      	adds	r3, r7, r3
    67c8:	781b      	ldrb	r3, [r3, #0]
    67ca:	2b00      	cmp	r3, #0
    67cc:	d005      	beq.n	67da <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    67ce:	68fb      	ldr	r3, [r7, #12]
    67d0:	3301      	adds	r3, #1
    67d2:	697a      	ldr	r2, [r7, #20]
    67d4:	40da      	lsrs	r2, r3
    67d6:	0013      	movs	r3, r2
    67d8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    67da:	697b      	ldr	r3, [r7, #20]
}
    67dc:	0018      	movs	r0, r3
    67de:	46bd      	mov	sp, r7
    67e0:	b006      	add	sp, #24
    67e2:	bd80      	pop	{r7, pc}
    67e4:	0000655d 	.word	0x0000655d
    67e8:	00006535 	.word	0x00006535
    67ec:	40000c04 	.word	0x40000c04
    67f0:	40000c00 	.word	0x40000c00
    67f4:	00005dd9 	.word	0x00005dd9
    67f8:	40000c08 	.word	0x40000c08
    67fc:	00006549 	.word	0x00006549
    6800:	0000b1cd 	.word	0x0000b1cd

00006804 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6804:	b580      	push	{r7, lr}
    6806:	b084      	sub	sp, #16
    6808:	af00      	add	r7, sp, #0
    680a:	0002      	movs	r2, r0
    680c:	6039      	str	r1, [r7, #0]
    680e:	1dfb      	adds	r3, r7, #7
    6810:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    6812:	1dfb      	adds	r3, r7, #7
    6814:	781b      	ldrb	r3, [r3, #0]
    6816:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6818:	683b      	ldr	r3, [r7, #0]
    681a:	781b      	ldrb	r3, [r3, #0]
    681c:	021b      	lsls	r3, r3, #8
    681e:	001a      	movs	r2, r3
    6820:	68fb      	ldr	r3, [r7, #12]
    6822:	4313      	orrs	r3, r2
    6824:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6826:	1dfb      	adds	r3, r7, #7
    6828:	781b      	ldrb	r3, [r3, #0]
    682a:	0018      	movs	r0, r3
    682c:	4b04      	ldr	r3, [pc, #16]	; (6840 <system_gclk_chan_set_config+0x3c>)
    682e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6830:	4b04      	ldr	r3, [pc, #16]	; (6844 <system_gclk_chan_set_config+0x40>)
    6832:	68fa      	ldr	r2, [r7, #12]
    6834:	b292      	uxth	r2, r2
    6836:	805a      	strh	r2, [r3, #2]
}
    6838:	46c0      	nop			; (mov r8, r8)
    683a:	46bd      	mov	sp, r7
    683c:	b004      	add	sp, #16
    683e:	bd80      	pop	{r7, pc}
    6840:	00006891 	.word	0x00006891
    6844:	40000c00 	.word	0x40000c00

00006848 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6848:	b580      	push	{r7, lr}
    684a:	b082      	sub	sp, #8
    684c:	af00      	add	r7, sp, #0
    684e:	0002      	movs	r2, r0
    6850:	1dfb      	adds	r3, r7, #7
    6852:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6854:	4b0a      	ldr	r3, [pc, #40]	; (6880 <system_gclk_chan_enable+0x38>)
    6856:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6858:	4a0a      	ldr	r2, [pc, #40]	; (6884 <system_gclk_chan_enable+0x3c>)
    685a:	1dfb      	adds	r3, r7, #7
    685c:	781b      	ldrb	r3, [r3, #0]
    685e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6860:	4909      	ldr	r1, [pc, #36]	; (6888 <system_gclk_chan_enable+0x40>)
    6862:	4b09      	ldr	r3, [pc, #36]	; (6888 <system_gclk_chan_enable+0x40>)
    6864:	885b      	ldrh	r3, [r3, #2]
    6866:	b29b      	uxth	r3, r3
    6868:	2280      	movs	r2, #128	; 0x80
    686a:	01d2      	lsls	r2, r2, #7
    686c:	4313      	orrs	r3, r2
    686e:	b29b      	uxth	r3, r3
    6870:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    6872:	4b06      	ldr	r3, [pc, #24]	; (688c <system_gclk_chan_enable+0x44>)
    6874:	4798      	blx	r3
}
    6876:	46c0      	nop			; (mov r8, r8)
    6878:	46bd      	mov	sp, r7
    687a:	b002      	add	sp, #8
    687c:	bd80      	pop	{r7, pc}
    687e:	46c0      	nop			; (mov r8, r8)
    6880:	00006535 	.word	0x00006535
    6884:	40000c02 	.word	0x40000c02
    6888:	40000c00 	.word	0x40000c00
    688c:	00006549 	.word	0x00006549

00006890 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6890:	b580      	push	{r7, lr}
    6892:	b084      	sub	sp, #16
    6894:	af00      	add	r7, sp, #0
    6896:	0002      	movs	r2, r0
    6898:	1dfb      	adds	r3, r7, #7
    689a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    689c:	4b1c      	ldr	r3, [pc, #112]	; (6910 <system_gclk_chan_disable+0x80>)
    689e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    68a0:	4a1c      	ldr	r2, [pc, #112]	; (6914 <system_gclk_chan_disable+0x84>)
    68a2:	1dfb      	adds	r3, r7, #7
    68a4:	781b      	ldrb	r3, [r3, #0]
    68a6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    68a8:	4b1b      	ldr	r3, [pc, #108]	; (6918 <system_gclk_chan_disable+0x88>)
    68aa:	885b      	ldrh	r3, [r3, #2]
    68ac:	051b      	lsls	r3, r3, #20
    68ae:	0f1b      	lsrs	r3, r3, #28
    68b0:	b2db      	uxtb	r3, r3
    68b2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    68b4:	4a18      	ldr	r2, [pc, #96]	; (6918 <system_gclk_chan_disable+0x88>)
    68b6:	8853      	ldrh	r3, [r2, #2]
    68b8:	4918      	ldr	r1, [pc, #96]	; (691c <system_gclk_chan_disable+0x8c>)
    68ba:	400b      	ands	r3, r1
    68bc:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    68be:	4a16      	ldr	r2, [pc, #88]	; (6918 <system_gclk_chan_disable+0x88>)
    68c0:	4b15      	ldr	r3, [pc, #84]	; (6918 <system_gclk_chan_disable+0x88>)
    68c2:	885b      	ldrh	r3, [r3, #2]
    68c4:	b29b      	uxth	r3, r3
    68c6:	4916      	ldr	r1, [pc, #88]	; (6920 <system_gclk_chan_disable+0x90>)
    68c8:	400b      	ands	r3, r1
    68ca:	b29b      	uxth	r3, r3
    68cc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    68ce:	46c0      	nop			; (mov r8, r8)
    68d0:	4b11      	ldr	r3, [pc, #68]	; (6918 <system_gclk_chan_disable+0x88>)
    68d2:	885b      	ldrh	r3, [r3, #2]
    68d4:	b29b      	uxth	r3, r3
    68d6:	001a      	movs	r2, r3
    68d8:	2380      	movs	r3, #128	; 0x80
    68da:	01db      	lsls	r3, r3, #7
    68dc:	4013      	ands	r3, r2
    68de:	d1f7      	bne.n	68d0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    68e0:	4a0d      	ldr	r2, [pc, #52]	; (6918 <system_gclk_chan_disable+0x88>)
    68e2:	68fb      	ldr	r3, [r7, #12]
    68e4:	b2db      	uxtb	r3, r3
    68e6:	1c19      	adds	r1, r3, #0
    68e8:	230f      	movs	r3, #15
    68ea:	400b      	ands	r3, r1
    68ec:	b2d9      	uxtb	r1, r3
    68ee:	8853      	ldrh	r3, [r2, #2]
    68f0:	1c08      	adds	r0, r1, #0
    68f2:	210f      	movs	r1, #15
    68f4:	4001      	ands	r1, r0
    68f6:	0208      	lsls	r0, r1, #8
    68f8:	4908      	ldr	r1, [pc, #32]	; (691c <system_gclk_chan_disable+0x8c>)
    68fa:	400b      	ands	r3, r1
    68fc:	1c19      	adds	r1, r3, #0
    68fe:	1c03      	adds	r3, r0, #0
    6900:	430b      	orrs	r3, r1
    6902:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    6904:	4b07      	ldr	r3, [pc, #28]	; (6924 <system_gclk_chan_disable+0x94>)
    6906:	4798      	blx	r3
}
    6908:	46c0      	nop			; (mov r8, r8)
    690a:	46bd      	mov	sp, r7
    690c:	b004      	add	sp, #16
    690e:	bd80      	pop	{r7, pc}
    6910:	00006535 	.word	0x00006535
    6914:	40000c02 	.word	0x40000c02
    6918:	40000c00 	.word	0x40000c00
    691c:	fffff0ff 	.word	0xfffff0ff
    6920:	ffffbfff 	.word	0xffffbfff
    6924:	00006549 	.word	0x00006549

00006928 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6928:	b580      	push	{r7, lr}
    692a:	b084      	sub	sp, #16
    692c:	af00      	add	r7, sp, #0
    692e:	0002      	movs	r2, r0
    6930:	1dfb      	adds	r3, r7, #7
    6932:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6934:	4b0d      	ldr	r3, [pc, #52]	; (696c <system_gclk_chan_get_hz+0x44>)
    6936:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6938:	4a0d      	ldr	r2, [pc, #52]	; (6970 <system_gclk_chan_get_hz+0x48>)
    693a:	1dfb      	adds	r3, r7, #7
    693c:	781b      	ldrb	r3, [r3, #0]
    693e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6940:	4b0c      	ldr	r3, [pc, #48]	; (6974 <system_gclk_chan_get_hz+0x4c>)
    6942:	885b      	ldrh	r3, [r3, #2]
    6944:	051b      	lsls	r3, r3, #20
    6946:	0f1b      	lsrs	r3, r3, #28
    6948:	b2da      	uxtb	r2, r3
    694a:	230f      	movs	r3, #15
    694c:	18fb      	adds	r3, r7, r3
    694e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6950:	4b09      	ldr	r3, [pc, #36]	; (6978 <system_gclk_chan_get_hz+0x50>)
    6952:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6954:	230f      	movs	r3, #15
    6956:	18fb      	adds	r3, r7, r3
    6958:	781b      	ldrb	r3, [r3, #0]
    695a:	0018      	movs	r0, r3
    695c:	4b07      	ldr	r3, [pc, #28]	; (697c <system_gclk_chan_get_hz+0x54>)
    695e:	4798      	blx	r3
    6960:	0003      	movs	r3, r0
}
    6962:	0018      	movs	r0, r3
    6964:	46bd      	mov	sp, r7
    6966:	b004      	add	sp, #16
    6968:	bd80      	pop	{r7, pc}
    696a:	46c0      	nop			; (mov r8, r8)
    696c:	00006535 	.word	0x00006535
    6970:	40000c02 	.word	0x40000c02
    6974:	40000c00 	.word	0x40000c00
    6978:	00006549 	.word	0x00006549
    697c:	0000672d 	.word	0x0000672d

00006980 <system_pinmux_get_group_from_gpio_pin>:
{
    6980:	b580      	push	{r7, lr}
    6982:	b084      	sub	sp, #16
    6984:	af00      	add	r7, sp, #0
    6986:	0002      	movs	r2, r0
    6988:	1dfb      	adds	r3, r7, #7
    698a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    698c:	230f      	movs	r3, #15
    698e:	18fb      	adds	r3, r7, r3
    6990:	1dfa      	adds	r2, r7, #7
    6992:	7812      	ldrb	r2, [r2, #0]
    6994:	09d2      	lsrs	r2, r2, #7
    6996:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6998:	230e      	movs	r3, #14
    699a:	18fb      	adds	r3, r7, r3
    699c:	1dfa      	adds	r2, r7, #7
    699e:	7812      	ldrb	r2, [r2, #0]
    69a0:	0952      	lsrs	r2, r2, #5
    69a2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    69a4:	4b0d      	ldr	r3, [pc, #52]	; (69dc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    69a6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    69a8:	230f      	movs	r3, #15
    69aa:	18fb      	adds	r3, r7, r3
    69ac:	781b      	ldrb	r3, [r3, #0]
    69ae:	2b00      	cmp	r3, #0
    69b0:	d10f      	bne.n	69d2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    69b2:	230f      	movs	r3, #15
    69b4:	18fb      	adds	r3, r7, r3
    69b6:	781b      	ldrb	r3, [r3, #0]
    69b8:	009b      	lsls	r3, r3, #2
    69ba:	2210      	movs	r2, #16
    69bc:	4694      	mov	ip, r2
    69be:	44bc      	add	ip, r7
    69c0:	4463      	add	r3, ip
    69c2:	3b08      	subs	r3, #8
    69c4:	681a      	ldr	r2, [r3, #0]
    69c6:	230e      	movs	r3, #14
    69c8:	18fb      	adds	r3, r7, r3
    69ca:	781b      	ldrb	r3, [r3, #0]
    69cc:	01db      	lsls	r3, r3, #7
    69ce:	18d3      	adds	r3, r2, r3
    69d0:	e000      	b.n	69d4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    69d2:	2300      	movs	r3, #0
}
    69d4:	0018      	movs	r0, r3
    69d6:	46bd      	mov	sp, r7
    69d8:	b004      	add	sp, #16
    69da:	bd80      	pop	{r7, pc}
    69dc:	41004400 	.word	0x41004400

000069e0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    69e0:	b580      	push	{r7, lr}
    69e2:	b088      	sub	sp, #32
    69e4:	af00      	add	r7, sp, #0
    69e6:	60f8      	str	r0, [r7, #12]
    69e8:	60b9      	str	r1, [r7, #8]
    69ea:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    69ec:	2300      	movs	r3, #0
    69ee:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    69f0:	687b      	ldr	r3, [r7, #4]
    69f2:	78db      	ldrb	r3, [r3, #3]
    69f4:	2201      	movs	r2, #1
    69f6:	4053      	eors	r3, r2
    69f8:	b2db      	uxtb	r3, r3
    69fa:	2b00      	cmp	r3, #0
    69fc:	d035      	beq.n	6a6a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    69fe:	687b      	ldr	r3, [r7, #4]
    6a00:	781b      	ldrb	r3, [r3, #0]
    6a02:	2b80      	cmp	r3, #128	; 0x80
    6a04:	d00b      	beq.n	6a1e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6a06:	69fb      	ldr	r3, [r7, #28]
    6a08:	2280      	movs	r2, #128	; 0x80
    6a0a:	0252      	lsls	r2, r2, #9
    6a0c:	4313      	orrs	r3, r2
    6a0e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6a10:	687b      	ldr	r3, [r7, #4]
    6a12:	781b      	ldrb	r3, [r3, #0]
    6a14:	061b      	lsls	r3, r3, #24
    6a16:	001a      	movs	r2, r3
    6a18:	69fb      	ldr	r3, [r7, #28]
    6a1a:	4313      	orrs	r3, r2
    6a1c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6a1e:	687b      	ldr	r3, [r7, #4]
    6a20:	785b      	ldrb	r3, [r3, #1]
    6a22:	2b00      	cmp	r3, #0
    6a24:	d003      	beq.n	6a2e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6a26:	687b      	ldr	r3, [r7, #4]
    6a28:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6a2a:	2b02      	cmp	r3, #2
    6a2c:	d110      	bne.n	6a50 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6a2e:	69fb      	ldr	r3, [r7, #28]
    6a30:	2280      	movs	r2, #128	; 0x80
    6a32:	0292      	lsls	r2, r2, #10
    6a34:	4313      	orrs	r3, r2
    6a36:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6a38:	687b      	ldr	r3, [r7, #4]
    6a3a:	789b      	ldrb	r3, [r3, #2]
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d004      	beq.n	6a4a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6a40:	69fb      	ldr	r3, [r7, #28]
    6a42:	2280      	movs	r2, #128	; 0x80
    6a44:	02d2      	lsls	r2, r2, #11
    6a46:	4313      	orrs	r3, r2
    6a48:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6a4a:	68fb      	ldr	r3, [r7, #12]
    6a4c:	68ba      	ldr	r2, [r7, #8]
    6a4e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6a50:	687b      	ldr	r3, [r7, #4]
    6a52:	785b      	ldrb	r3, [r3, #1]
    6a54:	2b01      	cmp	r3, #1
    6a56:	d003      	beq.n	6a60 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6a58:	687b      	ldr	r3, [r7, #4]
    6a5a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6a5c:	2b02      	cmp	r3, #2
    6a5e:	d107      	bne.n	6a70 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6a60:	69fb      	ldr	r3, [r7, #28]
    6a62:	4a22      	ldr	r2, [pc, #136]	; (6aec <_system_pinmux_config+0x10c>)
    6a64:	4013      	ands	r3, r2
    6a66:	61fb      	str	r3, [r7, #28]
    6a68:	e002      	b.n	6a70 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    6a6a:	68fb      	ldr	r3, [r7, #12]
    6a6c:	68ba      	ldr	r2, [r7, #8]
    6a6e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6a70:	68bb      	ldr	r3, [r7, #8]
    6a72:	041b      	lsls	r3, r3, #16
    6a74:	0c1b      	lsrs	r3, r3, #16
    6a76:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6a78:	68bb      	ldr	r3, [r7, #8]
    6a7a:	0c1b      	lsrs	r3, r3, #16
    6a7c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6a7e:	69ba      	ldr	r2, [r7, #24]
    6a80:	69fb      	ldr	r3, [r7, #28]
    6a82:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6a84:	22a0      	movs	r2, #160	; 0xa0
    6a86:	05d2      	lsls	r2, r2, #23
    6a88:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6a8a:	68fb      	ldr	r3, [r7, #12]
    6a8c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6a8e:	697a      	ldr	r2, [r7, #20]
    6a90:	69fb      	ldr	r3, [r7, #28]
    6a92:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6a94:	22d0      	movs	r2, #208	; 0xd0
    6a96:	0612      	lsls	r2, r2, #24
    6a98:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6a9a:	68fb      	ldr	r3, [r7, #12]
    6a9c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6a9e:	687b      	ldr	r3, [r7, #4]
    6aa0:	78db      	ldrb	r3, [r3, #3]
    6aa2:	2201      	movs	r2, #1
    6aa4:	4053      	eors	r3, r2
    6aa6:	b2db      	uxtb	r3, r3
    6aa8:	2b00      	cmp	r3, #0
    6aaa:	d01a      	beq.n	6ae2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6aac:	69fa      	ldr	r2, [r7, #28]
    6aae:	2380      	movs	r3, #128	; 0x80
    6ab0:	02db      	lsls	r3, r3, #11
    6ab2:	4013      	ands	r3, r2
    6ab4:	d00a      	beq.n	6acc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6ab6:	687b      	ldr	r3, [r7, #4]
    6ab8:	789b      	ldrb	r3, [r3, #2]
    6aba:	2b01      	cmp	r3, #1
    6abc:	d103      	bne.n	6ac6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    6abe:	68fb      	ldr	r3, [r7, #12]
    6ac0:	68ba      	ldr	r2, [r7, #8]
    6ac2:	619a      	str	r2, [r3, #24]
    6ac4:	e002      	b.n	6acc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    6ac6:	68fb      	ldr	r3, [r7, #12]
    6ac8:	68ba      	ldr	r2, [r7, #8]
    6aca:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6acc:	687b      	ldr	r3, [r7, #4]
    6ace:	785b      	ldrb	r3, [r3, #1]
    6ad0:	2b01      	cmp	r3, #1
    6ad2:	d003      	beq.n	6adc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6ad4:	687b      	ldr	r3, [r7, #4]
    6ad6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6ad8:	2b02      	cmp	r3, #2
    6ada:	d102      	bne.n	6ae2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6adc:	68fb      	ldr	r3, [r7, #12]
    6ade:	68ba      	ldr	r2, [r7, #8]
    6ae0:	609a      	str	r2, [r3, #8]
		}
	}
}
    6ae2:	46c0      	nop			; (mov r8, r8)
    6ae4:	46bd      	mov	sp, r7
    6ae6:	b008      	add	sp, #32
    6ae8:	bd80      	pop	{r7, pc}
    6aea:	46c0      	nop			; (mov r8, r8)
    6aec:	fffbffff 	.word	0xfffbffff

00006af0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6af0:	b580      	push	{r7, lr}
    6af2:	b084      	sub	sp, #16
    6af4:	af00      	add	r7, sp, #0
    6af6:	0002      	movs	r2, r0
    6af8:	6039      	str	r1, [r7, #0]
    6afa:	1dfb      	adds	r3, r7, #7
    6afc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6afe:	1dfb      	adds	r3, r7, #7
    6b00:	781b      	ldrb	r3, [r3, #0]
    6b02:	0018      	movs	r0, r3
    6b04:	4b0a      	ldr	r3, [pc, #40]	; (6b30 <system_pinmux_pin_set_config+0x40>)
    6b06:	4798      	blx	r3
    6b08:	0003      	movs	r3, r0
    6b0a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6b0c:	1dfb      	adds	r3, r7, #7
    6b0e:	781b      	ldrb	r3, [r3, #0]
    6b10:	221f      	movs	r2, #31
    6b12:	4013      	ands	r3, r2
    6b14:	2201      	movs	r2, #1
    6b16:	409a      	lsls	r2, r3
    6b18:	0013      	movs	r3, r2
    6b1a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6b1c:	683a      	ldr	r2, [r7, #0]
    6b1e:	68b9      	ldr	r1, [r7, #8]
    6b20:	68fb      	ldr	r3, [r7, #12]
    6b22:	0018      	movs	r0, r3
    6b24:	4b03      	ldr	r3, [pc, #12]	; (6b34 <system_pinmux_pin_set_config+0x44>)
    6b26:	4798      	blx	r3
}
    6b28:	46c0      	nop			; (mov r8, r8)
    6b2a:	46bd      	mov	sp, r7
    6b2c:	b004      	add	sp, #16
    6b2e:	bd80      	pop	{r7, pc}
    6b30:	00006981 	.word	0x00006981
    6b34:	000069e1 	.word	0x000069e1

00006b38 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6b38:	b580      	push	{r7, lr}
    6b3a:	af00      	add	r7, sp, #0
	return;
    6b3c:	46c0      	nop			; (mov r8, r8)
}
    6b3e:	46bd      	mov	sp, r7
    6b40:	bd80      	pop	{r7, pc}
	...

00006b44 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6b44:	b580      	push	{r7, lr}
    6b46:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6b48:	4b06      	ldr	r3, [pc, #24]	; (6b64 <system_init+0x20>)
    6b4a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6b4c:	4b06      	ldr	r3, [pc, #24]	; (6b68 <system_init+0x24>)
    6b4e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6b50:	4b06      	ldr	r3, [pc, #24]	; (6b6c <system_init+0x28>)
    6b52:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6b54:	4b06      	ldr	r3, [pc, #24]	; (6b70 <system_init+0x2c>)
    6b56:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6b58:	4b06      	ldr	r3, [pc, #24]	; (6b74 <system_init+0x30>)
    6b5a:	4798      	blx	r3
}
    6b5c:	46c0      	nop			; (mov r8, r8)
    6b5e:	46bd      	mov	sp, r7
    6b60:	bd80      	pop	{r7, pc}
    6b62:	46c0      	nop			; (mov r8, r8)
    6b64:	00006269 	.word	0x00006269
    6b68:	000002f9 	.word	0x000002f9
    6b6c:	00006b39 	.word	0x00006b39
    6b70:	00006b39 	.word	0x00006b39
    6b74:	00006b39 	.word	0x00006b39

00006b78 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6b78:	b580      	push	{r7, lr}
    6b7a:	b082      	sub	sp, #8
    6b7c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    6b7e:	4b2f      	ldr	r3, [pc, #188]	; (6c3c <Reset_Handler+0xc4>)
    6b80:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6b82:	4b2f      	ldr	r3, [pc, #188]	; (6c40 <Reset_Handler+0xc8>)
    6b84:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6b86:	687a      	ldr	r2, [r7, #4]
    6b88:	683b      	ldr	r3, [r7, #0]
    6b8a:	429a      	cmp	r2, r3
    6b8c:	d00c      	beq.n	6ba8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6b8e:	e007      	b.n	6ba0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6b90:	683b      	ldr	r3, [r7, #0]
    6b92:	1d1a      	adds	r2, r3, #4
    6b94:	603a      	str	r2, [r7, #0]
    6b96:	687a      	ldr	r2, [r7, #4]
    6b98:	1d11      	adds	r1, r2, #4
    6b9a:	6079      	str	r1, [r7, #4]
    6b9c:	6812      	ldr	r2, [r2, #0]
    6b9e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    6ba0:	683a      	ldr	r2, [r7, #0]
    6ba2:	4b28      	ldr	r3, [pc, #160]	; (6c44 <Reset_Handler+0xcc>)
    6ba4:	429a      	cmp	r2, r3
    6ba6:	d3f3      	bcc.n	6b90 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6ba8:	4b27      	ldr	r3, [pc, #156]	; (6c48 <Reset_Handler+0xd0>)
    6baa:	603b      	str	r3, [r7, #0]
    6bac:	e004      	b.n	6bb8 <Reset_Handler+0x40>
                *pDest++ = 0;
    6bae:	683b      	ldr	r3, [r7, #0]
    6bb0:	1d1a      	adds	r2, r3, #4
    6bb2:	603a      	str	r2, [r7, #0]
    6bb4:	2200      	movs	r2, #0
    6bb6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    6bb8:	683a      	ldr	r2, [r7, #0]
    6bba:	4b24      	ldr	r3, [pc, #144]	; (6c4c <Reset_Handler+0xd4>)
    6bbc:	429a      	cmp	r2, r3
    6bbe:	d3f6      	bcc.n	6bae <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6bc0:	4b23      	ldr	r3, [pc, #140]	; (6c50 <Reset_Handler+0xd8>)
    6bc2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6bc4:	4b23      	ldr	r3, [pc, #140]	; (6c54 <Reset_Handler+0xdc>)
    6bc6:	687a      	ldr	r2, [r7, #4]
    6bc8:	21ff      	movs	r1, #255	; 0xff
    6bca:	438a      	bics	r2, r1
    6bcc:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6bce:	4a22      	ldr	r2, [pc, #136]	; (6c58 <Reset_Handler+0xe0>)
    6bd0:	2390      	movs	r3, #144	; 0x90
    6bd2:	005b      	lsls	r3, r3, #1
    6bd4:	2102      	movs	r1, #2
    6bd6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6bd8:	4a20      	ldr	r2, [pc, #128]	; (6c5c <Reset_Handler+0xe4>)
    6bda:	78d3      	ldrb	r3, [r2, #3]
    6bdc:	2103      	movs	r1, #3
    6bde:	438b      	bics	r3, r1
    6be0:	1c19      	adds	r1, r3, #0
    6be2:	2302      	movs	r3, #2
    6be4:	430b      	orrs	r3, r1
    6be6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6be8:	4a1c      	ldr	r2, [pc, #112]	; (6c5c <Reset_Handler+0xe4>)
    6bea:	78d3      	ldrb	r3, [r2, #3]
    6bec:	210c      	movs	r1, #12
    6bee:	438b      	bics	r3, r1
    6bf0:	1c19      	adds	r1, r3, #0
    6bf2:	2308      	movs	r3, #8
    6bf4:	430b      	orrs	r3, r1
    6bf6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    6bf8:	4a19      	ldr	r2, [pc, #100]	; (6c60 <Reset_Handler+0xe8>)
    6bfa:	7b93      	ldrb	r3, [r2, #14]
    6bfc:	2130      	movs	r1, #48	; 0x30
    6bfe:	438b      	bics	r3, r1
    6c00:	1c19      	adds	r1, r3, #0
    6c02:	2320      	movs	r3, #32
    6c04:	430b      	orrs	r3, r1
    6c06:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6c08:	4a15      	ldr	r2, [pc, #84]	; (6c60 <Reset_Handler+0xe8>)
    6c0a:	7b93      	ldrb	r3, [r2, #14]
    6c0c:	210c      	movs	r1, #12
    6c0e:	438b      	bics	r3, r1
    6c10:	1c19      	adds	r1, r3, #0
    6c12:	2308      	movs	r3, #8
    6c14:	430b      	orrs	r3, r1
    6c16:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6c18:	4a11      	ldr	r2, [pc, #68]	; (6c60 <Reset_Handler+0xe8>)
    6c1a:	7b93      	ldrb	r3, [r2, #14]
    6c1c:	2103      	movs	r1, #3
    6c1e:	438b      	bics	r3, r1
    6c20:	1c19      	adds	r1, r3, #0
    6c22:	2302      	movs	r3, #2
    6c24:	430b      	orrs	r3, r1
    6c26:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    6c28:	4a0e      	ldr	r2, [pc, #56]	; (6c64 <Reset_Handler+0xec>)
    6c2a:	6853      	ldr	r3, [r2, #4]
    6c2c:	2180      	movs	r1, #128	; 0x80
    6c2e:	430b      	orrs	r3, r1
    6c30:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6c32:	4b0d      	ldr	r3, [pc, #52]	; (6c68 <Reset_Handler+0xf0>)
    6c34:	4798      	blx	r3

        /* Branch to main function */
        main();
    6c36:	4b0d      	ldr	r3, [pc, #52]	; (6c6c <Reset_Handler+0xf4>)
    6c38:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6c3a:	e7fe      	b.n	6c3a <Reset_Handler+0xc2>
    6c3c:	0000c99c 	.word	0x0000c99c
    6c40:	20000000 	.word	0x20000000
    6c44:	20000094 	.word	0x20000094
    6c48:	20000094 	.word	0x20000094
    6c4c:	20000c94 	.word	0x20000c94
    6c50:	00000000 	.word	0x00000000
    6c54:	e000ed00 	.word	0xe000ed00
    6c58:	41007000 	.word	0x41007000
    6c5c:	41005000 	.word	0x41005000
    6c60:	41004800 	.word	0x41004800
    6c64:	41004000 	.word	0x41004000
    6c68:	0000b50d 	.word	0x0000b50d
    6c6c:	0000aa55 	.word	0x0000aa55

00006c70 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6c70:	b580      	push	{r7, lr}
    6c72:	af00      	add	r7, sp, #0
        while (1) {
    6c74:	e7fe      	b.n	6c74 <Dummy_Handler+0x4>
	...

00006c78 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6c78:	b580      	push	{r7, lr}
    6c7a:	b086      	sub	sp, #24
    6c7c:	af00      	add	r7, sp, #0
    6c7e:	60f8      	str	r0, [r7, #12]
    6c80:	60b9      	str	r1, [r7, #8]
    6c82:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6c84:	2300      	movs	r3, #0
    6c86:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    6c88:	68fb      	ldr	r3, [r7, #12]
    6c8a:	2b00      	cmp	r3, #0
    6c8c:	d012      	beq.n	6cb4 <_read+0x3c>
		return -1;
    6c8e:	2301      	movs	r3, #1
    6c90:	425b      	negs	r3, r3
    6c92:	e013      	b.n	6cbc <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    6c94:	4b0b      	ldr	r3, [pc, #44]	; (6cc4 <_read+0x4c>)
    6c96:	681a      	ldr	r2, [r3, #0]
    6c98:	4b0b      	ldr	r3, [pc, #44]	; (6cc8 <_read+0x50>)
    6c9a:	681b      	ldr	r3, [r3, #0]
    6c9c:	68b9      	ldr	r1, [r7, #8]
    6c9e:	0018      	movs	r0, r3
    6ca0:	4790      	blx	r2
		ptr++;
    6ca2:	68bb      	ldr	r3, [r7, #8]
    6ca4:	3301      	adds	r3, #1
    6ca6:	60bb      	str	r3, [r7, #8]
		nChars++;
    6ca8:	697b      	ldr	r3, [r7, #20]
    6caa:	3301      	adds	r3, #1
    6cac:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    6cae:	687b      	ldr	r3, [r7, #4]
    6cb0:	3b01      	subs	r3, #1
    6cb2:	607b      	str	r3, [r7, #4]
    6cb4:	687b      	ldr	r3, [r7, #4]
    6cb6:	2b00      	cmp	r3, #0
    6cb8:	dcec      	bgt.n	6c94 <_read+0x1c>
	}
	return nChars;
    6cba:	697b      	ldr	r3, [r7, #20]
}
    6cbc:	0018      	movs	r0, r3
    6cbe:	46bd      	mov	sp, r7
    6cc0:	b006      	add	sp, #24
    6cc2:	bd80      	pop	{r7, pc}
    6cc4:	200009f0 	.word	0x200009f0
    6cc8:	200009f8 	.word	0x200009f8

00006ccc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6ccc:	b580      	push	{r7, lr}
    6cce:	b086      	sub	sp, #24
    6cd0:	af00      	add	r7, sp, #0
    6cd2:	60f8      	str	r0, [r7, #12]
    6cd4:	60b9      	str	r1, [r7, #8]
    6cd6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6cd8:	2300      	movs	r3, #0
    6cda:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    6cdc:	68fb      	ldr	r3, [r7, #12]
    6cde:	2b01      	cmp	r3, #1
    6ce0:	d01d      	beq.n	6d1e <_write+0x52>
    6ce2:	68fb      	ldr	r3, [r7, #12]
    6ce4:	2b02      	cmp	r3, #2
    6ce6:	d01a      	beq.n	6d1e <_write+0x52>
    6ce8:	68fb      	ldr	r3, [r7, #12]
    6cea:	2b03      	cmp	r3, #3
    6cec:	d017      	beq.n	6d1e <_write+0x52>
		return -1;
    6cee:	2301      	movs	r3, #1
    6cf0:	425b      	negs	r3, r3
    6cf2:	e018      	b.n	6d26 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6cf4:	4b0e      	ldr	r3, [pc, #56]	; (6d30 <_write+0x64>)
    6cf6:	681a      	ldr	r2, [r3, #0]
    6cf8:	4b0e      	ldr	r3, [pc, #56]	; (6d34 <_write+0x68>)
    6cfa:	6818      	ldr	r0, [r3, #0]
    6cfc:	68bb      	ldr	r3, [r7, #8]
    6cfe:	1c59      	adds	r1, r3, #1
    6d00:	60b9      	str	r1, [r7, #8]
    6d02:	781b      	ldrb	r3, [r3, #0]
    6d04:	0019      	movs	r1, r3
    6d06:	4790      	blx	r2
    6d08:	1e03      	subs	r3, r0, #0
    6d0a:	da02      	bge.n	6d12 <_write+0x46>
			return -1;
    6d0c:	2301      	movs	r3, #1
    6d0e:	425b      	negs	r3, r3
    6d10:	e009      	b.n	6d26 <_write+0x5a>
		}
		++nChars;
    6d12:	697b      	ldr	r3, [r7, #20]
    6d14:	3301      	adds	r3, #1
    6d16:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    6d18:	687b      	ldr	r3, [r7, #4]
    6d1a:	3b01      	subs	r3, #1
    6d1c:	607b      	str	r3, [r7, #4]
    6d1e:	687b      	ldr	r3, [r7, #4]
    6d20:	2b00      	cmp	r3, #0
    6d22:	d1e7      	bne.n	6cf4 <_write+0x28>
	}
	return nChars;
    6d24:	697b      	ldr	r3, [r7, #20]
}
    6d26:	0018      	movs	r0, r3
    6d28:	46bd      	mov	sp, r7
    6d2a:	b006      	add	sp, #24
    6d2c:	bd80      	pop	{r7, pc}
    6d2e:	46c0      	nop			; (mov r8, r8)
    6d30:	200009f4 	.word	0x200009f4
    6d34:	200009f8 	.word	0x200009f8

00006d38 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6d38:	b580      	push	{r7, lr}
    6d3a:	b084      	sub	sp, #16
    6d3c:	af00      	add	r7, sp, #0
    6d3e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6d40:	4b0a      	ldr	r3, [pc, #40]	; (6d6c <_sbrk+0x34>)
    6d42:	681b      	ldr	r3, [r3, #0]
    6d44:	2b00      	cmp	r3, #0
    6d46:	d102      	bne.n	6d4e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    6d48:	4b08      	ldr	r3, [pc, #32]	; (6d6c <_sbrk+0x34>)
    6d4a:	4a09      	ldr	r2, [pc, #36]	; (6d70 <_sbrk+0x38>)
    6d4c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6d4e:	4b07      	ldr	r3, [pc, #28]	; (6d6c <_sbrk+0x34>)
    6d50:	681b      	ldr	r3, [r3, #0]
    6d52:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6d54:	4b05      	ldr	r3, [pc, #20]	; (6d6c <_sbrk+0x34>)
    6d56:	681a      	ldr	r2, [r3, #0]
    6d58:	687b      	ldr	r3, [r7, #4]
    6d5a:	18d2      	adds	r2, r2, r3
    6d5c:	4b03      	ldr	r3, [pc, #12]	; (6d6c <_sbrk+0x34>)
    6d5e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    6d60:	68fb      	ldr	r3, [r7, #12]
}
    6d62:	0018      	movs	r0, r3
    6d64:	46bd      	mov	sp, r7
    6d66:	b004      	add	sp, #16
    6d68:	bd80      	pop	{r7, pc}
    6d6a:	46c0      	nop			; (mov r8, r8)
    6d6c:	20000178 	.word	0x20000178
    6d70:	20002c98 	.word	0x20002c98

00006d74 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6d74:	b580      	push	{r7, lr}
    6d76:	b082      	sub	sp, #8
    6d78:	af00      	add	r7, sp, #0
    6d7a:	6078      	str	r0, [r7, #4]
	return -1;
    6d7c:	2301      	movs	r3, #1
    6d7e:	425b      	negs	r3, r3
}
    6d80:	0018      	movs	r0, r3
    6d82:	46bd      	mov	sp, r7
    6d84:	b002      	add	sp, #8
    6d86:	bd80      	pop	{r7, pc}

00006d88 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    6d88:	b580      	push	{r7, lr}
    6d8a:	b082      	sub	sp, #8
    6d8c:	af00      	add	r7, sp, #0
    6d8e:	6078      	str	r0, [r7, #4]
    6d90:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    6d92:	683b      	ldr	r3, [r7, #0]
    6d94:	2280      	movs	r2, #128	; 0x80
    6d96:	0192      	lsls	r2, r2, #6
    6d98:	605a      	str	r2, [r3, #4]

	return 0;
    6d9a:	2300      	movs	r3, #0
}
    6d9c:	0018      	movs	r0, r3
    6d9e:	46bd      	mov	sp, r7
    6da0:	b002      	add	sp, #8
    6da2:	bd80      	pop	{r7, pc}

00006da4 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
    6da4:	b580      	push	{r7, lr}
    6da6:	b084      	sub	sp, #16
    6da8:	af00      	add	r7, sp, #0
    6daa:	60f8      	str	r0, [r7, #12]
    6dac:	60b9      	str	r1, [r7, #8]
    6dae:	607a      	str	r2, [r7, #4]
	return 0;
    6db0:	2300      	movs	r3, #0
}
    6db2:	0018      	movs	r0, r3
    6db4:	46bd      	mov	sp, r7
    6db6:	b004      	add	sp, #16
    6db8:	bd80      	pop	{r7, pc}

00006dba <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    6dba:	b580      	push	{r7, lr}
    6dbc:	b082      	sub	sp, #8
    6dbe:	af00      	add	r7, sp, #0
    6dc0:	6078      	str	r0, [r7, #4]
	time->second = 0;
    6dc2:	687b      	ldr	r3, [r7, #4]
    6dc4:	2200      	movs	r2, #0
    6dc6:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    6dc8:	687b      	ldr	r3, [r7, #4]
    6dca:	2200      	movs	r2, #0
    6dcc:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    6dce:	687b      	ldr	r3, [r7, #4]
    6dd0:	2200      	movs	r2, #0
    6dd2:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    6dd4:	687b      	ldr	r3, [r7, #4]
    6dd6:	2200      	movs	r2, #0
    6dd8:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    6dda:	687b      	ldr	r3, [r7, #4]
    6ddc:	2201      	movs	r2, #1
    6dde:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    6de0:	687b      	ldr	r3, [r7, #4]
    6de2:	2201      	movs	r2, #1
    6de4:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    6de6:	687b      	ldr	r3, [r7, #4]
    6de8:	22fa      	movs	r2, #250	; 0xfa
    6dea:	00d2      	lsls	r2, r2, #3
    6dec:	80da      	strh	r2, [r3, #6]
}
    6dee:	46c0      	nop			; (mov r8, r8)
    6df0:	46bd      	mov	sp, r7
    6df2:	b002      	add	sp, #8
    6df4:	bd80      	pop	{r7, pc}
	...

00006df8 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    6df8:	b580      	push	{r7, lr}
    6dfa:	b086      	sub	sp, #24
    6dfc:	af00      	add	r7, sp, #0
    6dfe:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    6e00:	230c      	movs	r3, #12
    6e02:	18fb      	adds	r3, r7, r3
    6e04:	0018      	movs	r0, r3
    6e06:	4b23      	ldr	r3, [pc, #140]	; (6e94 <rtc_calendar_get_config_defaults+0x9c>)
    6e08:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    6e0a:	687b      	ldr	r3, [r7, #4]
    6e0c:	22a0      	movs	r2, #160	; 0xa0
    6e0e:	0112      	lsls	r2, r2, #4
    6e10:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    6e12:	687b      	ldr	r3, [r7, #4]
    6e14:	2200      	movs	r2, #0
    6e16:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    6e18:	687b      	ldr	r3, [r7, #4]
    6e1a:	2200      	movs	r2, #0
    6e1c:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    6e1e:	687b      	ldr	r3, [r7, #4]
    6e20:	2200      	movs	r2, #0
    6e22:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    6e24:	687b      	ldr	r3, [r7, #4]
    6e26:	22fa      	movs	r2, #250	; 0xfa
    6e28:	00d2      	lsls	r2, r2, #3
    6e2a:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    6e2c:	2317      	movs	r3, #23
    6e2e:	18fb      	adds	r3, r7, r3
    6e30:	2200      	movs	r2, #0
    6e32:	701a      	strb	r2, [r3, #0]
    6e34:	e025      	b.n	6e82 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
    6e36:	2317      	movs	r3, #23
    6e38:	18fb      	adds	r3, r7, r3
    6e3a:	781a      	ldrb	r2, [r3, #0]
    6e3c:	6879      	ldr	r1, [r7, #4]
    6e3e:	2008      	movs	r0, #8
    6e40:	0013      	movs	r3, r2
    6e42:	009b      	lsls	r3, r3, #2
    6e44:	189b      	adds	r3, r3, r2
    6e46:	005b      	lsls	r3, r3, #1
    6e48:	18cb      	adds	r3, r1, r3
    6e4a:	181a      	adds	r2, r3, r0
    6e4c:	230c      	movs	r3, #12
    6e4e:	18fb      	adds	r3, r7, r3
    6e50:	0010      	movs	r0, r2
    6e52:	0019      	movs	r1, r3
    6e54:	2308      	movs	r3, #8
    6e56:	001a      	movs	r2, r3
    6e58:	4b0f      	ldr	r3, [pc, #60]	; (6e98 <rtc_calendar_get_config_defaults+0xa0>)
    6e5a:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    6e5c:	2317      	movs	r3, #23
    6e5e:	18fb      	adds	r3, r7, r3
    6e60:	781a      	ldrb	r2, [r3, #0]
    6e62:	6879      	ldr	r1, [r7, #4]
    6e64:	0013      	movs	r3, r2
    6e66:	009b      	lsls	r3, r3, #2
    6e68:	189b      	adds	r3, r3, r2
    6e6a:	005b      	lsls	r3, r3, #1
    6e6c:	18cb      	adds	r3, r1, r3
    6e6e:	3310      	adds	r3, #16
    6e70:	2206      	movs	r2, #6
    6e72:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    6e74:	2317      	movs	r3, #23
    6e76:	18fb      	adds	r3, r7, r3
    6e78:	781a      	ldrb	r2, [r3, #0]
    6e7a:	2317      	movs	r3, #23
    6e7c:	18fb      	adds	r3, r7, r3
    6e7e:	3201      	adds	r2, #1
    6e80:	701a      	strb	r2, [r3, #0]
    6e82:	2317      	movs	r3, #23
    6e84:	18fb      	adds	r3, r7, r3
    6e86:	781b      	ldrb	r3, [r3, #0]
    6e88:	2b00      	cmp	r3, #0
    6e8a:	d0d4      	beq.n	6e36 <rtc_calendar_get_config_defaults+0x3e>
	}
}
    6e8c:	46c0      	nop			; (mov r8, r8)
    6e8e:	46bd      	mov	sp, r7
    6e90:	b006      	add	sp, #24
    6e92:	bd80      	pop	{r7, pc}
    6e94:	00006dbb 	.word	0x00006dbb
    6e98:	0000b569 	.word	0x0000b569

00006e9c <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
    6e9c:	b580      	push	{r7, lr}
    6e9e:	b088      	sub	sp, #32
    6ea0:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    6ea2:	230c      	movs	r3, #12
    6ea4:	18fb      	adds	r3, r7, r3
    6ea6:	0018      	movs	r0, r3
    6ea8:	4b1a      	ldr	r3, [pc, #104]	; (6f14 <configure_rtc_calendar+0x78>)
    6eaa:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
    6eac:	1d3b      	adds	r3, r7, #4
    6eae:	0018      	movs	r0, r3
    6eb0:	4b19      	ldr	r3, [pc, #100]	; (6f18 <configure_rtc_calendar+0x7c>)
    6eb2:	4798      	blx	r3
	init_time.year   = 2014;
    6eb4:	1d3b      	adds	r3, r7, #4
    6eb6:	4a19      	ldr	r2, [pc, #100]	; (6f1c <configure_rtc_calendar+0x80>)
    6eb8:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
    6eba:	1d3b      	adds	r3, r7, #4
    6ebc:	2201      	movs	r2, #1
    6ebe:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
    6ec0:	1d3b      	adds	r3, r7, #4
    6ec2:	2201      	movs	r2, #1
    6ec4:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
    6ec6:	1d3b      	adds	r3, r7, #4
    6ec8:	2200      	movs	r2, #0
    6eca:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
    6ecc:	1d3b      	adds	r3, r7, #4
    6ece:	2200      	movs	r2, #0
    6ed0:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
    6ed2:	1d3b      	adds	r3, r7, #4
    6ed4:	2204      	movs	r2, #4
    6ed6:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
    6ed8:	230c      	movs	r3, #12
    6eda:	18fb      	adds	r3, r7, r3
    6edc:	2201      	movs	r2, #1
    6ede:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    6ee0:	230c      	movs	r3, #12
    6ee2:	18fb      	adds	r3, r7, r3
    6ee4:	1d3a      	adds	r2, r7, #4
    6ee6:	3308      	adds	r3, #8
    6ee8:	ca03      	ldmia	r2!, {r0, r1}
    6eea:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    6eec:	230c      	movs	r3, #12
    6eee:	18fb      	adds	r3, r7, r3
    6ef0:	2206      	movs	r2, #6
    6ef2:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    6ef4:	230c      	movs	r3, #12
    6ef6:	18fa      	adds	r2, r7, r3
    6ef8:	4909      	ldr	r1, [pc, #36]	; (6f20 <configure_rtc_calendar+0x84>)
    6efa:	4b0a      	ldr	r3, [pc, #40]	; (6f24 <configure_rtc_calendar+0x88>)
    6efc:	0018      	movs	r0, r3
    6efe:	4b0a      	ldr	r3, [pc, #40]	; (6f28 <configure_rtc_calendar+0x8c>)
    6f00:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
    6f02:	4b08      	ldr	r3, [pc, #32]	; (6f24 <configure_rtc_calendar+0x88>)
    6f04:	0018      	movs	r0, r3
    6f06:	4b09      	ldr	r3, [pc, #36]	; (6f2c <configure_rtc_calendar+0x90>)
    6f08:	4798      	blx	r3
}
    6f0a:	46c0      	nop			; (mov r8, r8)
    6f0c:	46bd      	mov	sp, r7
    6f0e:	b008      	add	sp, #32
    6f10:	bd80      	pop	{r7, pc}
    6f12:	46c0      	nop			; (mov r8, r8)
    6f14:	00006df9 	.word	0x00006df9
    6f18:	00006dbb 	.word	0x00006dbb
    6f1c:	000007de 	.word	0x000007de
    6f20:	40001400 	.word	0x40001400
    6f24:	200009fc 	.word	0x200009fc
    6f28:	000035e1 	.word	0x000035e1
    6f2c:	00003331 	.word	0x00003331

00006f30 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    6f30:	b590      	push	{r4, r7, lr}
    6f32:	b085      	sub	sp, #20
    6f34:	af00      	add	r7, sp, #0
    6f36:	0002      	movs	r2, r0
    6f38:	1dfb      	adds	r3, r7, #7
    6f3a:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
    6f3c:	4b1a      	ldr	r3, [pc, #104]	; (6fa8 <disk_initialize+0x78>)
    6f3e:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    6f40:	1dfb      	adds	r3, r7, #7
    6f42:	781b      	ldrb	r3, [r3, #0]
    6f44:	2b01      	cmp	r3, #1
    6f46:	d901      	bls.n	6f4c <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    6f48:	2301      	movs	r3, #1
    6f4a:	e029      	b.n	6fa0 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    6f4c:	2300      	movs	r3, #0
    6f4e:	60fb      	str	r3, [r7, #12]
    6f50:	e010      	b.n	6f74 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
    6f52:	230b      	movs	r3, #11
    6f54:	18fc      	adds	r4, r7, r3
    6f56:	1dfb      	adds	r3, r7, #7
    6f58:	781b      	ldrb	r3, [r3, #0]
    6f5a:	0018      	movs	r0, r3
    6f5c:	4b13      	ldr	r3, [pc, #76]	; (6fac <disk_initialize+0x7c>)
    6f5e:	4798      	blx	r3
    6f60:	0003      	movs	r3, r0
    6f62:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
    6f64:	230b      	movs	r3, #11
    6f66:	18fb      	adds	r3, r7, r3
    6f68:	781b      	ldrb	r3, [r3, #0]
    6f6a:	2b03      	cmp	r3, #3
    6f6c:	d106      	bne.n	6f7c <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
    6f6e:	68fb      	ldr	r3, [r7, #12]
    6f70:	3301      	adds	r3, #1
    6f72:	60fb      	str	r3, [r7, #12]
    6f74:	68fb      	ldr	r3, [r7, #12]
    6f76:	2b01      	cmp	r3, #1
    6f78:	ddeb      	ble.n	6f52 <disk_initialize+0x22>
    6f7a:	e000      	b.n	6f7e <disk_initialize+0x4e>
			break;
    6f7c:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
    6f7e:	230b      	movs	r3, #11
    6f80:	18fb      	adds	r3, r7, r3
    6f82:	781b      	ldrb	r3, [r3, #0]
    6f84:	2b00      	cmp	r3, #0
    6f86:	d001      	beq.n	6f8c <disk_initialize+0x5c>
		return STA_NOINIT;
    6f88:	2301      	movs	r3, #1
    6f8a:	e009      	b.n	6fa0 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    6f8c:	1dfb      	adds	r3, r7, #7
    6f8e:	781b      	ldrb	r3, [r3, #0]
    6f90:	0018      	movs	r0, r3
    6f92:	4b07      	ldr	r3, [pc, #28]	; (6fb0 <disk_initialize+0x80>)
    6f94:	4798      	blx	r3
    6f96:	1e03      	subs	r3, r0, #0
    6f98:	d001      	beq.n	6f9e <disk_initialize+0x6e>
		return STA_PROTECT;
    6f9a:	2304      	movs	r3, #4
    6f9c:	e000      	b.n	6fa0 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
    6f9e:	2300      	movs	r3, #0
}
    6fa0:	0018      	movs	r0, r3
    6fa2:	46bd      	mov	sp, r7
    6fa4:	b005      	add	sp, #20
    6fa6:	bd90      	pop	{r4, r7, pc}
    6fa8:	00006e9d 	.word	0x00006e9d
    6fac:	00002fd1 	.word	0x00002fd1
    6fb0:	00003089 	.word	0x00003089

00006fb4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    6fb4:	b580      	push	{r7, lr}
    6fb6:	b082      	sub	sp, #8
    6fb8:	af00      	add	r7, sp, #0
    6fba:	0002      	movs	r2, r0
    6fbc:	1dfb      	adds	r3, r7, #7
    6fbe:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
    6fc0:	1dfb      	adds	r3, r7, #7
    6fc2:	781b      	ldrb	r3, [r3, #0]
    6fc4:	0018      	movs	r0, r3
    6fc6:	4b08      	ldr	r3, [pc, #32]	; (6fe8 <disk_status+0x34>)
    6fc8:	4798      	blx	r3
    6fca:	1e03      	subs	r3, r0, #0
    6fcc:	d002      	beq.n	6fd4 <disk_status+0x20>
    6fce:	2b02      	cmp	r3, #2
    6fd0:	d002      	beq.n	6fd8 <disk_status+0x24>
    6fd2:	e003      	b.n	6fdc <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
    6fd4:	2300      	movs	r3, #0
    6fd6:	e002      	b.n	6fde <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    6fd8:	2303      	movs	r3, #3
    6fda:	e000      	b.n	6fde <disk_status+0x2a>
	default:
		return STA_NOINIT;
    6fdc:	2301      	movs	r3, #1
	}
}
    6fde:	0018      	movs	r0, r3
    6fe0:	46bd      	mov	sp, r7
    6fe2:	b002      	add	sp, #8
    6fe4:	bd80      	pop	{r7, pc}
    6fe6:	46c0      	nop			; (mov r8, r8)
    6fe8:	00002fd1 	.word	0x00002fd1

00006fec <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    6fec:	b590      	push	{r4, r7, lr}
    6fee:	b089      	sub	sp, #36	; 0x24
    6ff0:	af00      	add	r7, sp, #0
    6ff2:	60b9      	str	r1, [r7, #8]
    6ff4:	607a      	str	r2, [r7, #4]
    6ff6:	0019      	movs	r1, r3
    6ff8:	230f      	movs	r3, #15
    6ffa:	18fb      	adds	r3, r7, r3
    6ffc:	1c02      	adds	r2, r0, #0
    6ffe:	701a      	strb	r2, [r3, #0]
    7000:	230e      	movs	r3, #14
    7002:	18fb      	adds	r3, r7, r3
    7004:	1c0a      	adds	r2, r1, #0
    7006:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    7008:	231b      	movs	r3, #27
    700a:	18fc      	adds	r4, r7, r3
    700c:	230f      	movs	r3, #15
    700e:	18fb      	adds	r3, r7, r3
    7010:	781b      	ldrb	r3, [r3, #0]
    7012:	0018      	movs	r0, r3
    7014:	4b28      	ldr	r3, [pc, #160]	; (70b8 <disk_read+0xcc>)
    7016:	4798      	blx	r3
    7018:	0003      	movs	r3, r0
    701a:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    701c:	231b      	movs	r3, #27
    701e:	18fb      	adds	r3, r7, r3
    7020:	781b      	ldrb	r3, [r3, #0]
    7022:	2b00      	cmp	r3, #0
    7024:	d101      	bne.n	702a <disk_read+0x3e>
		return RES_ERROR;
    7026:	2301      	movs	r3, #1
    7028:	e042      	b.n	70b0 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    702a:	2314      	movs	r3, #20
    702c:	18fa      	adds	r2, r7, r3
    702e:	230f      	movs	r3, #15
    7030:	18fb      	adds	r3, r7, r3
    7032:	781b      	ldrb	r3, [r3, #0]
    7034:	0011      	movs	r1, r2
    7036:	0018      	movs	r0, r3
    7038:	4b20      	ldr	r3, [pc, #128]	; (70bc <disk_read+0xd0>)
    703a:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    703c:	230e      	movs	r3, #14
    703e:	18fb      	adds	r3, r7, r3
    7040:	781b      	ldrb	r3, [r3, #0]
    7042:	221b      	movs	r2, #27
    7044:	18ba      	adds	r2, r7, r2
    7046:	7812      	ldrb	r2, [r2, #0]
    7048:	4353      	muls	r3, r2
    704a:	001a      	movs	r2, r3
    704c:	687b      	ldr	r3, [r7, #4]
    704e:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    7050:	697b      	ldr	r3, [r7, #20]
    7052:	3301      	adds	r3, #1
    7054:	211b      	movs	r1, #27
    7056:	1879      	adds	r1, r7, r1
    7058:	7809      	ldrb	r1, [r1, #0]
    705a:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    705c:	429a      	cmp	r2, r3
    705e:	d901      	bls.n	7064 <disk_read+0x78>
		return RES_PARERR;
    7060:	2304      	movs	r3, #4
    7062:	e025      	b.n	70b0 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    7064:	2300      	movs	r3, #0
    7066:	61fb      	str	r3, [r7, #28]
    7068:	e01b      	b.n	70a2 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    706a:	231b      	movs	r3, #27
    706c:	18fb      	adds	r3, r7, r3
    706e:	781b      	ldrb	r3, [r3, #0]
    7070:	69fa      	ldr	r2, [r7, #28]
    7072:	435a      	muls	r2, r3
    7074:	687b      	ldr	r3, [r7, #4]
    7076:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    7078:	231b      	movs	r3, #27
    707a:	18fb      	adds	r3, r7, r3
    707c:	781b      	ldrb	r3, [r3, #0]
    707e:	69fa      	ldr	r2, [r7, #28]
    7080:	4353      	muls	r3, r2
    7082:	025b      	lsls	r3, r3, #9
    7084:	68ba      	ldr	r2, [r7, #8]
    7086:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    7088:	230f      	movs	r3, #15
    708a:	18fb      	adds	r3, r7, r3
    708c:	781b      	ldrb	r3, [r3, #0]
    708e:	0018      	movs	r0, r3
    7090:	4b0b      	ldr	r3, [pc, #44]	; (70c0 <disk_read+0xd4>)
    7092:	4798      	blx	r3
    7094:	1e03      	subs	r3, r0, #0
    7096:	d001      	beq.n	709c <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    7098:	2301      	movs	r3, #1
    709a:	e009      	b.n	70b0 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
    709c:	69fb      	ldr	r3, [r7, #28]
    709e:	3301      	adds	r3, #1
    70a0:	61fb      	str	r3, [r7, #28]
    70a2:	230e      	movs	r3, #14
    70a4:	18fb      	adds	r3, r7, r3
    70a6:	781a      	ldrb	r2, [r3, #0]
    70a8:	69fb      	ldr	r3, [r7, #28]
    70aa:	429a      	cmp	r2, r3
    70ac:	d8dd      	bhi.n	706a <disk_read+0x7e>
		}
	}

	return RES_OK;
    70ae:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    70b0:	0018      	movs	r0, r3
    70b2:	46bd      	mov	sp, r7
    70b4:	b009      	add	sp, #36	; 0x24
    70b6:	bd90      	pop	{r4, r7, pc}
    70b8:	0000305d 	.word	0x0000305d
    70bc:	00003011 	.word	0x00003011
    70c0:	000030d1 	.word	0x000030d1

000070c4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    70c4:	b590      	push	{r4, r7, lr}
    70c6:	b089      	sub	sp, #36	; 0x24
    70c8:	af00      	add	r7, sp, #0
    70ca:	60b9      	str	r1, [r7, #8]
    70cc:	607a      	str	r2, [r7, #4]
    70ce:	0019      	movs	r1, r3
    70d0:	230f      	movs	r3, #15
    70d2:	18fb      	adds	r3, r7, r3
    70d4:	1c02      	adds	r2, r0, #0
    70d6:	701a      	strb	r2, [r3, #0]
    70d8:	230e      	movs	r3, #14
    70da:	18fb      	adds	r3, r7, r3
    70dc:	1c0a      	adds	r2, r1, #0
    70de:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    70e0:	231b      	movs	r3, #27
    70e2:	18fc      	adds	r4, r7, r3
    70e4:	230f      	movs	r3, #15
    70e6:	18fb      	adds	r3, r7, r3
    70e8:	781b      	ldrb	r3, [r3, #0]
    70ea:	0018      	movs	r0, r3
    70ec:	4b28      	ldr	r3, [pc, #160]	; (7190 <disk_write+0xcc>)
    70ee:	4798      	blx	r3
    70f0:	0003      	movs	r3, r0
    70f2:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    70f4:	231b      	movs	r3, #27
    70f6:	18fb      	adds	r3, r7, r3
    70f8:	781b      	ldrb	r3, [r3, #0]
    70fa:	2b00      	cmp	r3, #0
    70fc:	d101      	bne.n	7102 <disk_write+0x3e>
		return RES_ERROR;
    70fe:	2301      	movs	r3, #1
    7100:	e042      	b.n	7188 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    7102:	2314      	movs	r3, #20
    7104:	18fa      	adds	r2, r7, r3
    7106:	230f      	movs	r3, #15
    7108:	18fb      	adds	r3, r7, r3
    710a:	781b      	ldrb	r3, [r3, #0]
    710c:	0011      	movs	r1, r2
    710e:	0018      	movs	r0, r3
    7110:	4b20      	ldr	r3, [pc, #128]	; (7194 <disk_write+0xd0>)
    7112:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    7114:	230e      	movs	r3, #14
    7116:	18fb      	adds	r3, r7, r3
    7118:	781b      	ldrb	r3, [r3, #0]
    711a:	221b      	movs	r2, #27
    711c:	18ba      	adds	r2, r7, r2
    711e:	7812      	ldrb	r2, [r2, #0]
    7120:	4353      	muls	r3, r2
    7122:	001a      	movs	r2, r3
    7124:	687b      	ldr	r3, [r7, #4]
    7126:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    7128:	697b      	ldr	r3, [r7, #20]
    712a:	3301      	adds	r3, #1
    712c:	211b      	movs	r1, #27
    712e:	1879      	adds	r1, r7, r1
    7130:	7809      	ldrb	r1, [r1, #0]
    7132:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    7134:	429a      	cmp	r2, r3
    7136:	d901      	bls.n	713c <disk_write+0x78>
		return RES_PARERR;
    7138:	2304      	movs	r3, #4
    713a:	e025      	b.n	7188 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    713c:	2300      	movs	r3, #0
    713e:	61fb      	str	r3, [r7, #28]
    7140:	e01b      	b.n	717a <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    7142:	231b      	movs	r3, #27
    7144:	18fb      	adds	r3, r7, r3
    7146:	781b      	ldrb	r3, [r3, #0]
    7148:	69fa      	ldr	r2, [r7, #28]
    714a:	435a      	muls	r2, r3
    714c:	687b      	ldr	r3, [r7, #4]
    714e:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    7150:	231b      	movs	r3, #27
    7152:	18fb      	adds	r3, r7, r3
    7154:	781b      	ldrb	r3, [r3, #0]
    7156:	69fa      	ldr	r2, [r7, #28]
    7158:	4353      	muls	r3, r2
    715a:	025b      	lsls	r3, r3, #9
    715c:	68ba      	ldr	r2, [r7, #8]
    715e:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    7160:	230f      	movs	r3, #15
    7162:	18fb      	adds	r3, r7, r3
    7164:	781b      	ldrb	r3, [r3, #0]
    7166:	0018      	movs	r0, r3
    7168:	4b0b      	ldr	r3, [pc, #44]	; (7198 <disk_write+0xd4>)
    716a:	4798      	blx	r3
    716c:	1e03      	subs	r3, r0, #0
    716e:	d001      	beq.n	7174 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    7170:	2301      	movs	r3, #1
    7172:	e009      	b.n	7188 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
    7174:	69fb      	ldr	r3, [r7, #28]
    7176:	3301      	adds	r3, #1
    7178:	61fb      	str	r3, [r7, #28]
    717a:	230e      	movs	r3, #14
    717c:	18fb      	adds	r3, r7, r3
    717e:	781a      	ldrb	r2, [r3, #0]
    7180:	69fb      	ldr	r3, [r7, #28]
    7182:	429a      	cmp	r2, r3
    7184:	d8dd      	bhi.n	7142 <disk_write+0x7e>
		}
	}

	return RES_OK;
    7186:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    7188:	0018      	movs	r0, r3
    718a:	46bd      	mov	sp, r7
    718c:	b009      	add	sp, #36	; 0x24
    718e:	bd90      	pop	{r4, r7, pc}
    7190:	0000305d 	.word	0x0000305d
    7194:	00003011 	.word	0x00003011
    7198:	00003125 	.word	0x00003125

0000719c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    719c:	b590      	push	{r4, r7, lr}
    719e:	b085      	sub	sp, #20
    71a0:	af00      	add	r7, sp, #0
    71a2:	603a      	str	r2, [r7, #0]
    71a4:	1dfb      	adds	r3, r7, #7
    71a6:	1c02      	adds	r2, r0, #0
    71a8:	701a      	strb	r2, [r3, #0]
    71aa:	1dbb      	adds	r3, r7, #6
    71ac:	1c0a      	adds	r2, r1, #0
    71ae:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
    71b0:	230f      	movs	r3, #15
    71b2:	18fb      	adds	r3, r7, r3
    71b4:	2204      	movs	r2, #4
    71b6:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
    71b8:	1dbb      	adds	r3, r7, #6
    71ba:	781b      	ldrb	r3, [r3, #0]
    71bc:	2b01      	cmp	r3, #1
    71be:	d00f      	beq.n	71e0 <disk_ioctl+0x44>
    71c0:	dc02      	bgt.n	71c8 <disk_ioctl+0x2c>
    71c2:	2b00      	cmp	r3, #0
    71c4:	d044      	beq.n	7250 <disk_ioctl+0xb4>
    71c6:	e054      	b.n	7272 <disk_ioctl+0xd6>
    71c8:	2b02      	cmp	r3, #2
    71ca:	d01a      	beq.n	7202 <disk_ioctl+0x66>
    71cc:	2b03      	cmp	r3, #3
    71ce:	d150      	bne.n	7272 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    71d0:	683b      	ldr	r3, [r7, #0]
    71d2:	2201      	movs	r2, #1
    71d4:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    71d6:	230f      	movs	r3, #15
    71d8:	18fb      	adds	r3, r7, r3
    71da:	2200      	movs	r2, #0
    71dc:	701a      	strb	r2, [r3, #0]
		break;
    71de:	e04c      	b.n	727a <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    71e0:	2308      	movs	r3, #8
    71e2:	18fa      	adds	r2, r7, r3
    71e4:	1dfb      	adds	r3, r7, #7
    71e6:	781b      	ldrb	r3, [r3, #0]
    71e8:	0011      	movs	r1, r2
    71ea:	0018      	movs	r0, r3
    71ec:	4b26      	ldr	r3, [pc, #152]	; (7288 <disk_ioctl+0xec>)
    71ee:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    71f0:	68bb      	ldr	r3, [r7, #8]
    71f2:	1c5a      	adds	r2, r3, #1
    71f4:	683b      	ldr	r3, [r7, #0]
    71f6:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    71f8:	230f      	movs	r3, #15
    71fa:	18fb      	adds	r3, r7, r3
    71fc:	2200      	movs	r2, #0
    71fe:	701a      	strb	r2, [r3, #0]
	}
	break;
    7200:	e03b      	b.n	727a <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    7202:	230e      	movs	r3, #14
    7204:	18fc      	adds	r4, r7, r3
    7206:	1dfb      	adds	r3, r7, #7
    7208:	781b      	ldrb	r3, [r3, #0]
    720a:	0018      	movs	r0, r3
    720c:	4b1f      	ldr	r3, [pc, #124]	; (728c <disk_ioctl+0xf0>)
    720e:	4798      	blx	r3
    7210:	0003      	movs	r3, r0
    7212:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    7214:	230e      	movs	r3, #14
    7216:	18fb      	adds	r3, r7, r3
    7218:	781b      	ldrb	r3, [r3, #0]
    721a:	2b01      	cmp	r3, #1
    721c:	d010      	beq.n	7240 <disk_ioctl+0xa4>
    721e:	230e      	movs	r3, #14
    7220:	18fb      	adds	r3, r7, r3
    7222:	781b      	ldrb	r3, [r3, #0]
    7224:	2b02      	cmp	r3, #2
    7226:	d00b      	beq.n	7240 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    7228:	230e      	movs	r3, #14
    722a:	18fb      	adds	r3, r7, r3
    722c:	781b      	ldrb	r3, [r3, #0]
    722e:	2b04      	cmp	r3, #4
    7230:	d006      	beq.n	7240 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    7232:	230e      	movs	r3, #14
    7234:	18fb      	adds	r3, r7, r3
    7236:	781b      	ldrb	r3, [r3, #0]
    7238:	2b08      	cmp	r3, #8
    723a:	d001      	beq.n	7240 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    723c:	2301      	movs	r3, #1
    723e:	e01f      	b.n	7280 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    7240:	683b      	ldr	r3, [r7, #0]
    7242:	2200      	movs	r2, #0
    7244:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    7246:	230f      	movs	r3, #15
    7248:	18fb      	adds	r3, r7, r3
    724a:	2200      	movs	r2, #0
    724c:	701a      	strb	r2, [r3, #0]
	}
	break;
    724e:	e014      	b.n	727a <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    7250:	1dfb      	adds	r3, r7, #7
    7252:	781b      	ldrb	r3, [r3, #0]
    7254:	0018      	movs	r0, r3
    7256:	4b0e      	ldr	r3, [pc, #56]	; (7290 <disk_ioctl+0xf4>)
    7258:	4798      	blx	r3
    725a:	1e03      	subs	r3, r0, #0
    725c:	d104      	bne.n	7268 <disk_ioctl+0xcc>
			res = RES_OK;
    725e:	230f      	movs	r3, #15
    7260:	18fb      	adds	r3, r7, r3
    7262:	2200      	movs	r2, #0
    7264:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
    7266:	e008      	b.n	727a <disk_ioctl+0xde>
			res = RES_NOTRDY;
    7268:	230f      	movs	r3, #15
    726a:	18fb      	adds	r3, r7, r3
    726c:	2203      	movs	r2, #3
    726e:	701a      	strb	r2, [r3, #0]
		break;
    7270:	e003      	b.n	727a <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
    7272:	230f      	movs	r3, #15
    7274:	18fb      	adds	r3, r7, r3
    7276:	2204      	movs	r2, #4
    7278:	701a      	strb	r2, [r3, #0]
	}

	return res;
    727a:	230f      	movs	r3, #15
    727c:	18fb      	adds	r3, r7, r3
    727e:	781b      	ldrb	r3, [r3, #0]
}
    7280:	0018      	movs	r0, r3
    7282:	46bd      	mov	sp, r7
    7284:	b005      	add	sp, #20
    7286:	bd90      	pop	{r4, r7, pc}
    7288:	00003011 	.word	0x00003011
    728c:	0000305d 	.word	0x0000305d
    7290:	00002fd1 	.word	0x00002fd1

00007294 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    7294:	b580      	push	{r7, lr}
    7296:	b084      	sub	sp, #16
    7298:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    729a:	1d3a      	adds	r2, r7, #4
    729c:	4b12      	ldr	r3, [pc, #72]	; (72e8 <get_fattime+0x54>)
    729e:	0011      	movs	r1, r2
    72a0:	0018      	movs	r0, r3
    72a2:	4b12      	ldr	r3, [pc, #72]	; (72ec <get_fattime+0x58>)
    72a4:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
    72a6:	1d3b      	adds	r3, r7, #4
    72a8:	88db      	ldrh	r3, [r3, #6]
    72aa:	4a11      	ldr	r2, [pc, #68]	; (72f0 <get_fattime+0x5c>)
    72ac:	4694      	mov	ip, r2
    72ae:	4463      	add	r3, ip
    72b0:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
    72b2:	1d3b      	adds	r3, r7, #4
    72b4:	795b      	ldrb	r3, [r3, #5]
    72b6:	055b      	lsls	r3, r3, #21
    72b8:	431a      	orrs	r2, r3
			| (current_time.day << 16)
    72ba:	1d3b      	adds	r3, r7, #4
    72bc:	791b      	ldrb	r3, [r3, #4]
    72be:	041b      	lsls	r3, r3, #16
    72c0:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
    72c2:	1d3b      	adds	r3, r7, #4
    72c4:	789b      	ldrb	r3, [r3, #2]
    72c6:	02db      	lsls	r3, r3, #11
    72c8:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
    72ca:	1d3b      	adds	r3, r7, #4
    72cc:	785b      	ldrb	r3, [r3, #1]
    72ce:	015b      	lsls	r3, r3, #5
    72d0:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
    72d2:	1d3a      	adds	r2, r7, #4
    72d4:	7812      	ldrb	r2, [r2, #0]
    72d6:	0852      	lsrs	r2, r2, #1
    72d8:	b2d2      	uxtb	r2, r2
    72da:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
    72dc:	60fb      	str	r3, [r7, #12]

	return ul_time;
    72de:	68fb      	ldr	r3, [r7, #12]
}
    72e0:	0018      	movs	r0, r3
    72e2:	46bd      	mov	sp, r7
    72e4:	b004      	add	sp, #16
    72e6:	bd80      	pop	{r7, pc}
    72e8:	200009fc 	.word	0x200009fc
    72ec:	00003675 	.word	0x00003675
    72f0:	fffff844 	.word	0xfffff844

000072f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    72f4:	b580      	push	{r7, lr}
    72f6:	b086      	sub	sp, #24
    72f8:	af00      	add	r7, sp, #0
    72fa:	60f8      	str	r0, [r7, #12]
    72fc:	60b9      	str	r1, [r7, #8]
    72fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    7300:	68fb      	ldr	r3, [r7, #12]
    7302:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    7304:	68bb      	ldr	r3, [r7, #8]
    7306:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    7308:	e007      	b.n	731a <mem_cpy+0x26>
		*d++ = *s++;
    730a:	697b      	ldr	r3, [r7, #20]
    730c:	1c5a      	adds	r2, r3, #1
    730e:	617a      	str	r2, [r7, #20]
    7310:	693a      	ldr	r2, [r7, #16]
    7312:	1c51      	adds	r1, r2, #1
    7314:	6139      	str	r1, [r7, #16]
    7316:	7812      	ldrb	r2, [r2, #0]
    7318:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    731a:	687b      	ldr	r3, [r7, #4]
    731c:	1e5a      	subs	r2, r3, #1
    731e:	607a      	str	r2, [r7, #4]
    7320:	2b00      	cmp	r3, #0
    7322:	d1f2      	bne.n	730a <mem_cpy+0x16>
}
    7324:	46c0      	nop			; (mov r8, r8)
    7326:	46bd      	mov	sp, r7
    7328:	b006      	add	sp, #24
    732a:	bd80      	pop	{r7, pc}

0000732c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    732c:	b580      	push	{r7, lr}
    732e:	b086      	sub	sp, #24
    7330:	af00      	add	r7, sp, #0
    7332:	60f8      	str	r0, [r7, #12]
    7334:	60b9      	str	r1, [r7, #8]
    7336:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    7338:	68fb      	ldr	r3, [r7, #12]
    733a:	617b      	str	r3, [r7, #20]

	while (cnt--)
    733c:	e005      	b.n	734a <mem_set+0x1e>
		*d++ = (BYTE)val;
    733e:	697b      	ldr	r3, [r7, #20]
    7340:	1c5a      	adds	r2, r3, #1
    7342:	617a      	str	r2, [r7, #20]
    7344:	68ba      	ldr	r2, [r7, #8]
    7346:	b2d2      	uxtb	r2, r2
    7348:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    734a:	687b      	ldr	r3, [r7, #4]
    734c:	1e5a      	subs	r2, r3, #1
    734e:	607a      	str	r2, [r7, #4]
    7350:	2b00      	cmp	r3, #0
    7352:	d1f4      	bne.n	733e <mem_set+0x12>
}
    7354:	46c0      	nop			; (mov r8, r8)
    7356:	46bd      	mov	sp, r7
    7358:	b006      	add	sp, #24
    735a:	bd80      	pop	{r7, pc}

0000735c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    735c:	b580      	push	{r7, lr}
    735e:	b088      	sub	sp, #32
    7360:	af00      	add	r7, sp, #0
    7362:	60f8      	str	r0, [r7, #12]
    7364:	60b9      	str	r1, [r7, #8]
    7366:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    7368:	68fb      	ldr	r3, [r7, #12]
    736a:	61fb      	str	r3, [r7, #28]
    736c:	68bb      	ldr	r3, [r7, #8]
    736e:	61bb      	str	r3, [r7, #24]
	int r = 0;
    7370:	2300      	movs	r3, #0
    7372:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    7374:	46c0      	nop			; (mov r8, r8)
    7376:	687b      	ldr	r3, [r7, #4]
    7378:	1e5a      	subs	r2, r3, #1
    737a:	607a      	str	r2, [r7, #4]
    737c:	2b00      	cmp	r3, #0
    737e:	d00d      	beq.n	739c <mem_cmp+0x40>
    7380:	69fb      	ldr	r3, [r7, #28]
    7382:	1c5a      	adds	r2, r3, #1
    7384:	61fa      	str	r2, [r7, #28]
    7386:	781b      	ldrb	r3, [r3, #0]
    7388:	0019      	movs	r1, r3
    738a:	69bb      	ldr	r3, [r7, #24]
    738c:	1c5a      	adds	r2, r3, #1
    738e:	61ba      	str	r2, [r7, #24]
    7390:	781b      	ldrb	r3, [r3, #0]
    7392:	1acb      	subs	r3, r1, r3
    7394:	617b      	str	r3, [r7, #20]
    7396:	697b      	ldr	r3, [r7, #20]
    7398:	2b00      	cmp	r3, #0
    739a:	d0ec      	beq.n	7376 <mem_cmp+0x1a>
	return r;
    739c:	697b      	ldr	r3, [r7, #20]
}
    739e:	0018      	movs	r0, r3
    73a0:	46bd      	mov	sp, r7
    73a2:	b008      	add	sp, #32
    73a4:	bd80      	pop	{r7, pc}

000073a6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    73a6:	b580      	push	{r7, lr}
    73a8:	b082      	sub	sp, #8
    73aa:	af00      	add	r7, sp, #0
    73ac:	6078      	str	r0, [r7, #4]
    73ae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    73b0:	e002      	b.n	73b8 <chk_chr+0x12>
    73b2:	687b      	ldr	r3, [r7, #4]
    73b4:	3301      	adds	r3, #1
    73b6:	607b      	str	r3, [r7, #4]
    73b8:	687b      	ldr	r3, [r7, #4]
    73ba:	781b      	ldrb	r3, [r3, #0]
    73bc:	2b00      	cmp	r3, #0
    73be:	d005      	beq.n	73cc <chk_chr+0x26>
    73c0:	687b      	ldr	r3, [r7, #4]
    73c2:	781b      	ldrb	r3, [r3, #0]
    73c4:	001a      	movs	r2, r3
    73c6:	683b      	ldr	r3, [r7, #0]
    73c8:	429a      	cmp	r2, r3
    73ca:	d1f2      	bne.n	73b2 <chk_chr+0xc>
	return *str;
    73cc:	687b      	ldr	r3, [r7, #4]
    73ce:	781b      	ldrb	r3, [r3, #0]
}
    73d0:	0018      	movs	r0, r3
    73d2:	46bd      	mov	sp, r7
    73d4:	b002      	add	sp, #8
    73d6:	bd80      	pop	{r7, pc}

000073d8 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    73d8:	b590      	push	{r4, r7, lr}
    73da:	b085      	sub	sp, #20
    73dc:	af00      	add	r7, sp, #0
    73de:	6078      	str	r0, [r7, #4]
    73e0:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
    73e2:	687b      	ldr	r3, [r7, #4]
    73e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    73e6:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
    73e8:	68fa      	ldr	r2, [r7, #12]
    73ea:	683b      	ldr	r3, [r7, #0]
    73ec:	429a      	cmp	r2, r3
    73ee:	d04e      	beq.n	748e <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    73f0:	687b      	ldr	r3, [r7, #4]
    73f2:	791b      	ldrb	r3, [r3, #4]
    73f4:	2b00      	cmp	r3, #0
    73f6:	d037      	beq.n	7468 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    73f8:	687b      	ldr	r3, [r7, #4]
    73fa:	7858      	ldrb	r0, [r3, #1]
    73fc:	687b      	ldr	r3, [r7, #4]
    73fe:	3330      	adds	r3, #48	; 0x30
    7400:	0019      	movs	r1, r3
    7402:	68fa      	ldr	r2, [r7, #12]
    7404:	2301      	movs	r3, #1
    7406:	4c24      	ldr	r4, [pc, #144]	; (7498 <move_window+0xc0>)
    7408:	47a0      	blx	r4
    740a:	1e03      	subs	r3, r0, #0
    740c:	d001      	beq.n	7412 <move_window+0x3a>
				return FR_DISK_ERR;
    740e:	2301      	movs	r3, #1
    7410:	e03e      	b.n	7490 <move_window+0xb8>
			fs->wflag = 0;
    7412:	687b      	ldr	r3, [r7, #4]
    7414:	2200      	movs	r2, #0
    7416:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    7418:	687b      	ldr	r3, [r7, #4]
    741a:	6a1a      	ldr	r2, [r3, #32]
    741c:	687b      	ldr	r3, [r7, #4]
    741e:	69db      	ldr	r3, [r3, #28]
    7420:	18d2      	adds	r2, r2, r3
    7422:	68fb      	ldr	r3, [r7, #12]
    7424:	429a      	cmp	r2, r3
    7426:	d91f      	bls.n	7468 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    7428:	230b      	movs	r3, #11
    742a:	18fb      	adds	r3, r7, r3
    742c:	687a      	ldr	r2, [r7, #4]
    742e:	78d2      	ldrb	r2, [r2, #3]
    7430:	701a      	strb	r2, [r3, #0]
    7432:	e014      	b.n	745e <move_window+0x86>
					wsect += fs->fsize;
    7434:	687b      	ldr	r3, [r7, #4]
    7436:	69db      	ldr	r3, [r3, #28]
    7438:	68fa      	ldr	r2, [r7, #12]
    743a:	18d3      	adds	r3, r2, r3
    743c:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
    743e:	687b      	ldr	r3, [r7, #4]
    7440:	7858      	ldrb	r0, [r3, #1]
    7442:	687b      	ldr	r3, [r7, #4]
    7444:	3330      	adds	r3, #48	; 0x30
    7446:	0019      	movs	r1, r3
    7448:	68fa      	ldr	r2, [r7, #12]
    744a:	2301      	movs	r3, #1
    744c:	4c12      	ldr	r4, [pc, #72]	; (7498 <move_window+0xc0>)
    744e:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    7450:	230b      	movs	r3, #11
    7452:	18fb      	adds	r3, r7, r3
    7454:	781a      	ldrb	r2, [r3, #0]
    7456:	230b      	movs	r3, #11
    7458:	18fb      	adds	r3, r7, r3
    745a:	3a01      	subs	r2, #1
    745c:	701a      	strb	r2, [r3, #0]
    745e:	230b      	movs	r3, #11
    7460:	18fb      	adds	r3, r7, r3
    7462:	781b      	ldrb	r3, [r3, #0]
    7464:	2b01      	cmp	r3, #1
    7466:	d8e5      	bhi.n	7434 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
    7468:	683b      	ldr	r3, [r7, #0]
    746a:	2b00      	cmp	r3, #0
    746c:	d00f      	beq.n	748e <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    746e:	687b      	ldr	r3, [r7, #4]
    7470:	7858      	ldrb	r0, [r3, #1]
    7472:	687b      	ldr	r3, [r7, #4]
    7474:	3330      	adds	r3, #48	; 0x30
    7476:	0019      	movs	r1, r3
    7478:	683a      	ldr	r2, [r7, #0]
    747a:	2301      	movs	r3, #1
    747c:	4c07      	ldr	r4, [pc, #28]	; (749c <move_window+0xc4>)
    747e:	47a0      	blx	r4
    7480:	1e03      	subs	r3, r0, #0
    7482:	d001      	beq.n	7488 <move_window+0xb0>
				return FR_DISK_ERR;
    7484:	2301      	movs	r3, #1
    7486:	e003      	b.n	7490 <move_window+0xb8>
			fs->winsect = sector;
    7488:	687b      	ldr	r3, [r7, #4]
    748a:	683a      	ldr	r2, [r7, #0]
    748c:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
    748e:	2300      	movs	r3, #0
}
    7490:	0018      	movs	r0, r3
    7492:	46bd      	mov	sp, r7
    7494:	b005      	add	sp, #20
    7496:	bd90      	pop	{r4, r7, pc}
    7498:	000070c5 	.word	0x000070c5
    749c:	00006fed 	.word	0x00006fed

000074a0 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    74a0:	b590      	push	{r4, r7, lr}
    74a2:	b085      	sub	sp, #20
    74a4:	af00      	add	r7, sp, #0
    74a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
    74a8:	230f      	movs	r3, #15
    74aa:	18fc      	adds	r4, r7, r3
    74ac:	687b      	ldr	r3, [r7, #4]
    74ae:	2100      	movs	r1, #0
    74b0:	0018      	movs	r0, r3
    74b2:	4b52      	ldr	r3, [pc, #328]	; (75fc <sync+0x15c>)
    74b4:	4798      	blx	r3
    74b6:	0003      	movs	r3, r0
    74b8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    74ba:	230f      	movs	r3, #15
    74bc:	18fb      	adds	r3, r7, r3
    74be:	781b      	ldrb	r3, [r3, #0]
    74c0:	2b00      	cmp	r3, #0
    74c2:	d000      	beq.n	74c6 <sync+0x26>
    74c4:	e093      	b.n	75ee <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    74c6:	687b      	ldr	r3, [r7, #4]
    74c8:	781b      	ldrb	r3, [r3, #0]
    74ca:	2b03      	cmp	r3, #3
    74cc:	d000      	beq.n	74d0 <sync+0x30>
    74ce:	e081      	b.n	75d4 <sync+0x134>
    74d0:	687b      	ldr	r3, [r7, #4]
    74d2:	795b      	ldrb	r3, [r3, #5]
    74d4:	2b00      	cmp	r3, #0
    74d6:	d07d      	beq.n	75d4 <sync+0x134>
			fs->winsect = 0;
    74d8:	687b      	ldr	r3, [r7, #4]
    74da:	2200      	movs	r2, #0
    74dc:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    74de:	687b      	ldr	r3, [r7, #4]
    74e0:	3330      	adds	r3, #48	; 0x30
    74e2:	0018      	movs	r0, r3
    74e4:	2380      	movs	r3, #128	; 0x80
    74e6:	009b      	lsls	r3, r3, #2
    74e8:	001a      	movs	r2, r3
    74ea:	2100      	movs	r1, #0
    74ec:	4b44      	ldr	r3, [pc, #272]	; (7600 <sync+0x160>)
    74ee:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    74f0:	687b      	ldr	r3, [r7, #4]
    74f2:	4a44      	ldr	r2, [pc, #272]	; (7604 <sync+0x164>)
    74f4:	2155      	movs	r1, #85	; 0x55
    74f6:	5499      	strb	r1, [r3, r2]
    74f8:	687b      	ldr	r3, [r7, #4]
    74fa:	4a43      	ldr	r2, [pc, #268]	; (7608 <sync+0x168>)
    74fc:	21aa      	movs	r1, #170	; 0xaa
    74fe:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    7500:	687b      	ldr	r3, [r7, #4]
    7502:	2230      	movs	r2, #48	; 0x30
    7504:	2152      	movs	r1, #82	; 0x52
    7506:	5499      	strb	r1, [r3, r2]
    7508:	687b      	ldr	r3, [r7, #4]
    750a:	2231      	movs	r2, #49	; 0x31
    750c:	2152      	movs	r1, #82	; 0x52
    750e:	5499      	strb	r1, [r3, r2]
    7510:	687b      	ldr	r3, [r7, #4]
    7512:	2232      	movs	r2, #50	; 0x32
    7514:	2161      	movs	r1, #97	; 0x61
    7516:	5499      	strb	r1, [r3, r2]
    7518:	687b      	ldr	r3, [r7, #4]
    751a:	2233      	movs	r2, #51	; 0x33
    751c:	2141      	movs	r1, #65	; 0x41
    751e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    7520:	687a      	ldr	r2, [r7, #4]
    7522:	2385      	movs	r3, #133	; 0x85
    7524:	009b      	lsls	r3, r3, #2
    7526:	2172      	movs	r1, #114	; 0x72
    7528:	54d1      	strb	r1, [r2, r3]
    752a:	687b      	ldr	r3, [r7, #4]
    752c:	4a37      	ldr	r2, [pc, #220]	; (760c <sync+0x16c>)
    752e:	2172      	movs	r1, #114	; 0x72
    7530:	5499      	strb	r1, [r3, r2]
    7532:	687b      	ldr	r3, [r7, #4]
    7534:	4a36      	ldr	r2, [pc, #216]	; (7610 <sync+0x170>)
    7536:	2141      	movs	r1, #65	; 0x41
    7538:	5499      	strb	r1, [r3, r2]
    753a:	687b      	ldr	r3, [r7, #4]
    753c:	4a35      	ldr	r2, [pc, #212]	; (7614 <sync+0x174>)
    753e:	2161      	movs	r1, #97	; 0x61
    7540:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    7542:	687b      	ldr	r3, [r7, #4]
    7544:	691b      	ldr	r3, [r3, #16]
    7546:	b2d9      	uxtb	r1, r3
    7548:	687a      	ldr	r2, [r7, #4]
    754a:	2386      	movs	r3, #134	; 0x86
    754c:	009b      	lsls	r3, r3, #2
    754e:	54d1      	strb	r1, [r2, r3]
    7550:	687b      	ldr	r3, [r7, #4]
    7552:	691b      	ldr	r3, [r3, #16]
    7554:	b29b      	uxth	r3, r3
    7556:	0a1b      	lsrs	r3, r3, #8
    7558:	b29b      	uxth	r3, r3
    755a:	b2d9      	uxtb	r1, r3
    755c:	687b      	ldr	r3, [r7, #4]
    755e:	4a2e      	ldr	r2, [pc, #184]	; (7618 <sync+0x178>)
    7560:	5499      	strb	r1, [r3, r2]
    7562:	687b      	ldr	r3, [r7, #4]
    7564:	691b      	ldr	r3, [r3, #16]
    7566:	0c1b      	lsrs	r3, r3, #16
    7568:	b2d9      	uxtb	r1, r3
    756a:	687b      	ldr	r3, [r7, #4]
    756c:	4a2b      	ldr	r2, [pc, #172]	; (761c <sync+0x17c>)
    756e:	5499      	strb	r1, [r3, r2]
    7570:	687b      	ldr	r3, [r7, #4]
    7572:	691b      	ldr	r3, [r3, #16]
    7574:	0e1b      	lsrs	r3, r3, #24
    7576:	b2d9      	uxtb	r1, r3
    7578:	687b      	ldr	r3, [r7, #4]
    757a:	4a29      	ldr	r2, [pc, #164]	; (7620 <sync+0x180>)
    757c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    757e:	687b      	ldr	r3, [r7, #4]
    7580:	68db      	ldr	r3, [r3, #12]
    7582:	b2d9      	uxtb	r1, r3
    7584:	687a      	ldr	r2, [r7, #4]
    7586:	2387      	movs	r3, #135	; 0x87
    7588:	009b      	lsls	r3, r3, #2
    758a:	54d1      	strb	r1, [r2, r3]
    758c:	687b      	ldr	r3, [r7, #4]
    758e:	68db      	ldr	r3, [r3, #12]
    7590:	b29b      	uxth	r3, r3
    7592:	0a1b      	lsrs	r3, r3, #8
    7594:	b29b      	uxth	r3, r3
    7596:	b2d9      	uxtb	r1, r3
    7598:	687b      	ldr	r3, [r7, #4]
    759a:	4a22      	ldr	r2, [pc, #136]	; (7624 <sync+0x184>)
    759c:	5499      	strb	r1, [r3, r2]
    759e:	687b      	ldr	r3, [r7, #4]
    75a0:	68db      	ldr	r3, [r3, #12]
    75a2:	0c1b      	lsrs	r3, r3, #16
    75a4:	b2d9      	uxtb	r1, r3
    75a6:	687b      	ldr	r3, [r7, #4]
    75a8:	4a1f      	ldr	r2, [pc, #124]	; (7628 <sync+0x188>)
    75aa:	5499      	strb	r1, [r3, r2]
    75ac:	687b      	ldr	r3, [r7, #4]
    75ae:	68db      	ldr	r3, [r3, #12]
    75b0:	0e1b      	lsrs	r3, r3, #24
    75b2:	b2d9      	uxtb	r1, r3
    75b4:	687b      	ldr	r3, [r7, #4]
    75b6:	4a1d      	ldr	r2, [pc, #116]	; (762c <sync+0x18c>)
    75b8:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    75ba:	687b      	ldr	r3, [r7, #4]
    75bc:	7858      	ldrb	r0, [r3, #1]
    75be:	687b      	ldr	r3, [r7, #4]
    75c0:	3330      	adds	r3, #48	; 0x30
    75c2:	0019      	movs	r1, r3
    75c4:	687b      	ldr	r3, [r7, #4]
    75c6:	695a      	ldr	r2, [r3, #20]
    75c8:	2301      	movs	r3, #1
    75ca:	4c19      	ldr	r4, [pc, #100]	; (7630 <sync+0x190>)
    75cc:	47a0      	blx	r4
			fs->fsi_flag = 0;
    75ce:	687b      	ldr	r3, [r7, #4]
    75d0:	2200      	movs	r2, #0
    75d2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    75d4:	687b      	ldr	r3, [r7, #4]
    75d6:	785b      	ldrb	r3, [r3, #1]
    75d8:	2200      	movs	r2, #0
    75da:	2100      	movs	r1, #0
    75dc:	0018      	movs	r0, r3
    75de:	4b15      	ldr	r3, [pc, #84]	; (7634 <sync+0x194>)
    75e0:	4798      	blx	r3
    75e2:	1e03      	subs	r3, r0, #0
    75e4:	d003      	beq.n	75ee <sync+0x14e>
			res = FR_DISK_ERR;
    75e6:	230f      	movs	r3, #15
    75e8:	18fb      	adds	r3, r7, r3
    75ea:	2201      	movs	r2, #1
    75ec:	701a      	strb	r2, [r3, #0]
	}

	return res;
    75ee:	230f      	movs	r3, #15
    75f0:	18fb      	adds	r3, r7, r3
    75f2:	781b      	ldrb	r3, [r3, #0]
}
    75f4:	0018      	movs	r0, r3
    75f6:	46bd      	mov	sp, r7
    75f8:	b005      	add	sp, #20
    75fa:	bd90      	pop	{r4, r7, pc}
    75fc:	000073d9 	.word	0x000073d9
    7600:	0000732d 	.word	0x0000732d
    7604:	0000022e 	.word	0x0000022e
    7608:	0000022f 	.word	0x0000022f
    760c:	00000215 	.word	0x00000215
    7610:	00000216 	.word	0x00000216
    7614:	00000217 	.word	0x00000217
    7618:	00000219 	.word	0x00000219
    761c:	0000021a 	.word	0x0000021a
    7620:	0000021b 	.word	0x0000021b
    7624:	0000021d 	.word	0x0000021d
    7628:	0000021e 	.word	0x0000021e
    762c:	0000021f 	.word	0x0000021f
    7630:	000070c5 	.word	0x000070c5
    7634:	0000719d 	.word	0x0000719d

00007638 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    7638:	b580      	push	{r7, lr}
    763a:	b082      	sub	sp, #8
    763c:	af00      	add	r7, sp, #0
    763e:	6078      	str	r0, [r7, #4]
    7640:	6039      	str	r1, [r7, #0]
	clst -= 2;
    7642:	683b      	ldr	r3, [r7, #0]
    7644:	3b02      	subs	r3, #2
    7646:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    7648:	687b      	ldr	r3, [r7, #4]
    764a:	699b      	ldr	r3, [r3, #24]
    764c:	1e9a      	subs	r2, r3, #2
    764e:	683b      	ldr	r3, [r7, #0]
    7650:	429a      	cmp	r2, r3
    7652:	d801      	bhi.n	7658 <clust2sect+0x20>
    7654:	2300      	movs	r3, #0
    7656:	e007      	b.n	7668 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
    7658:	687b      	ldr	r3, [r7, #4]
    765a:	789b      	ldrb	r3, [r3, #2]
    765c:	001a      	movs	r2, r3
    765e:	683b      	ldr	r3, [r7, #0]
    7660:	435a      	muls	r2, r3
    7662:	687b      	ldr	r3, [r7, #4]
    7664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7666:	18d3      	adds	r3, r2, r3
}
    7668:	0018      	movs	r0, r3
    766a:	46bd      	mov	sp, r7
    766c:	b002      	add	sp, #8
    766e:	bd80      	pop	{r7, pc}

00007670 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    7670:	b580      	push	{r7, lr}
    7672:	b086      	sub	sp, #24
    7674:	af00      	add	r7, sp, #0
    7676:	6078      	str	r0, [r7, #4]
    7678:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    767a:	683b      	ldr	r3, [r7, #0]
    767c:	2b01      	cmp	r3, #1
    767e:	d904      	bls.n	768a <get_fat+0x1a>
    7680:	687b      	ldr	r3, [r7, #4]
    7682:	699a      	ldr	r2, [r3, #24]
    7684:	683b      	ldr	r3, [r7, #0]
    7686:	429a      	cmp	r2, r3
    7688:	d801      	bhi.n	768e <get_fat+0x1e>
		return 1;
    768a:	2301      	movs	r3, #1
    768c:	e09f      	b.n	77ce <get_fat+0x15e>

	switch (fs->fs_type) {
    768e:	687b      	ldr	r3, [r7, #4]
    7690:	781b      	ldrb	r3, [r3, #0]
    7692:	2b02      	cmp	r3, #2
    7694:	d048      	beq.n	7728 <get_fat+0xb8>
    7696:	2b03      	cmp	r3, #3
    7698:	d067      	beq.n	776a <get_fat+0xfa>
    769a:	2b01      	cmp	r3, #1
    769c:	d000      	beq.n	76a0 <get_fat+0x30>
    769e:	e094      	b.n	77ca <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    76a0:	683b      	ldr	r3, [r7, #0]
    76a2:	617b      	str	r3, [r7, #20]
    76a4:	697b      	ldr	r3, [r7, #20]
    76a6:	085b      	lsrs	r3, r3, #1
    76a8:	697a      	ldr	r2, [r7, #20]
    76aa:	18d3      	adds	r3, r2, r3
    76ac:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    76ae:	687b      	ldr	r3, [r7, #4]
    76b0:	6a1a      	ldr	r2, [r3, #32]
    76b2:	697b      	ldr	r3, [r7, #20]
    76b4:	0a5b      	lsrs	r3, r3, #9
    76b6:	18d2      	adds	r2, r2, r3
    76b8:	687b      	ldr	r3, [r7, #4]
    76ba:	0011      	movs	r1, r2
    76bc:	0018      	movs	r0, r3
    76be:	4b46      	ldr	r3, [pc, #280]	; (77d8 <get_fat+0x168>)
    76c0:	4798      	blx	r3
    76c2:	1e03      	subs	r3, r0, #0
    76c4:	d000      	beq.n	76c8 <get_fat+0x58>
    76c6:	e079      	b.n	77bc <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
    76c8:	697b      	ldr	r3, [r7, #20]
    76ca:	05db      	lsls	r3, r3, #23
    76cc:	0ddb      	lsrs	r3, r3, #23
    76ce:	687a      	ldr	r2, [r7, #4]
    76d0:	2130      	movs	r1, #48	; 0x30
    76d2:	18d3      	adds	r3, r2, r3
    76d4:	185b      	adds	r3, r3, r1
    76d6:	781b      	ldrb	r3, [r3, #0]
    76d8:	613b      	str	r3, [r7, #16]
    76da:	697b      	ldr	r3, [r7, #20]
    76dc:	3301      	adds	r3, #1
    76de:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    76e0:	687b      	ldr	r3, [r7, #4]
    76e2:	6a1a      	ldr	r2, [r3, #32]
    76e4:	697b      	ldr	r3, [r7, #20]
    76e6:	0a5b      	lsrs	r3, r3, #9
    76e8:	18d2      	adds	r2, r2, r3
    76ea:	687b      	ldr	r3, [r7, #4]
    76ec:	0011      	movs	r1, r2
    76ee:	0018      	movs	r0, r3
    76f0:	4b39      	ldr	r3, [pc, #228]	; (77d8 <get_fat+0x168>)
    76f2:	4798      	blx	r3
    76f4:	1e03      	subs	r3, r0, #0
    76f6:	d163      	bne.n	77c0 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
    76f8:	697b      	ldr	r3, [r7, #20]
    76fa:	05db      	lsls	r3, r3, #23
    76fc:	0ddb      	lsrs	r3, r3, #23
    76fe:	687a      	ldr	r2, [r7, #4]
    7700:	2130      	movs	r1, #48	; 0x30
    7702:	18d3      	adds	r3, r2, r3
    7704:	185b      	adds	r3, r3, r1
    7706:	781b      	ldrb	r3, [r3, #0]
    7708:	021b      	lsls	r3, r3, #8
    770a:	001a      	movs	r2, r3
    770c:	693b      	ldr	r3, [r7, #16]
    770e:	4313      	orrs	r3, r2
    7710:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    7712:	683b      	ldr	r3, [r7, #0]
    7714:	2201      	movs	r2, #1
    7716:	4013      	ands	r3, r2
    7718:	d002      	beq.n	7720 <get_fat+0xb0>
    771a:	693b      	ldr	r3, [r7, #16]
    771c:	091b      	lsrs	r3, r3, #4
    771e:	e056      	b.n	77ce <get_fat+0x15e>
    7720:	693b      	ldr	r3, [r7, #16]
    7722:	051b      	lsls	r3, r3, #20
    7724:	0d1b      	lsrs	r3, r3, #20
    7726:	e052      	b.n	77ce <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7728:	687b      	ldr	r3, [r7, #4]
    772a:	6a1a      	ldr	r2, [r3, #32]
    772c:	683b      	ldr	r3, [r7, #0]
    772e:	0a1b      	lsrs	r3, r3, #8
    7730:	18d2      	adds	r2, r2, r3
    7732:	687b      	ldr	r3, [r7, #4]
    7734:	0011      	movs	r1, r2
    7736:	0018      	movs	r0, r3
    7738:	4b27      	ldr	r3, [pc, #156]	; (77d8 <get_fat+0x168>)
    773a:	4798      	blx	r3
    773c:	1e03      	subs	r3, r0, #0
    773e:	d141      	bne.n	77c4 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
    7740:	683b      	ldr	r3, [r7, #0]
    7742:	005a      	lsls	r2, r3, #1
    7744:	23ff      	movs	r3, #255	; 0xff
    7746:	005b      	lsls	r3, r3, #1
    7748:	4013      	ands	r3, r2
    774a:	3330      	adds	r3, #48	; 0x30
    774c:	687a      	ldr	r2, [r7, #4]
    774e:	18d3      	adds	r3, r2, r3
    7750:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
    7752:	68fb      	ldr	r3, [r7, #12]
    7754:	3301      	adds	r3, #1
    7756:	781b      	ldrb	r3, [r3, #0]
    7758:	021b      	lsls	r3, r3, #8
    775a:	b21a      	sxth	r2, r3
    775c:	68fb      	ldr	r3, [r7, #12]
    775e:	781b      	ldrb	r3, [r3, #0]
    7760:	b21b      	sxth	r3, r3
    7762:	4313      	orrs	r3, r2
    7764:	b21b      	sxth	r3, r3
    7766:	b29b      	uxth	r3, r3
    7768:	e031      	b.n	77ce <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    776a:	687b      	ldr	r3, [r7, #4]
    776c:	6a1a      	ldr	r2, [r3, #32]
    776e:	683b      	ldr	r3, [r7, #0]
    7770:	09db      	lsrs	r3, r3, #7
    7772:	18d2      	adds	r2, r2, r3
    7774:	687b      	ldr	r3, [r7, #4]
    7776:	0011      	movs	r1, r2
    7778:	0018      	movs	r0, r3
    777a:	4b17      	ldr	r3, [pc, #92]	; (77d8 <get_fat+0x168>)
    777c:	4798      	blx	r3
    777e:	1e03      	subs	r3, r0, #0
    7780:	d122      	bne.n	77c8 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
    7782:	683b      	ldr	r3, [r7, #0]
    7784:	009a      	lsls	r2, r3, #2
    7786:	23fe      	movs	r3, #254	; 0xfe
    7788:	005b      	lsls	r3, r3, #1
    778a:	4013      	ands	r3, r2
    778c:	3330      	adds	r3, #48	; 0x30
    778e:	687a      	ldr	r2, [r7, #4]
    7790:	18d3      	adds	r3, r2, r3
    7792:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
    7794:	68fb      	ldr	r3, [r7, #12]
    7796:	3303      	adds	r3, #3
    7798:	781b      	ldrb	r3, [r3, #0]
    779a:	061a      	lsls	r2, r3, #24
    779c:	68fb      	ldr	r3, [r7, #12]
    779e:	3302      	adds	r3, #2
    77a0:	781b      	ldrb	r3, [r3, #0]
    77a2:	041b      	lsls	r3, r3, #16
    77a4:	4313      	orrs	r3, r2
    77a6:	68fa      	ldr	r2, [r7, #12]
    77a8:	3201      	adds	r2, #1
    77aa:	7812      	ldrb	r2, [r2, #0]
    77ac:	0212      	lsls	r2, r2, #8
    77ae:	4313      	orrs	r3, r2
    77b0:	68fa      	ldr	r2, [r7, #12]
    77b2:	7812      	ldrb	r2, [r2, #0]
    77b4:	4313      	orrs	r3, r2
    77b6:	011b      	lsls	r3, r3, #4
    77b8:	091b      	lsrs	r3, r3, #4
    77ba:	e008      	b.n	77ce <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    77bc:	46c0      	nop			; (mov r8, r8)
    77be:	e004      	b.n	77ca <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    77c0:	46c0      	nop			; (mov r8, r8)
    77c2:	e002      	b.n	77ca <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    77c4:	46c0      	nop			; (mov r8, r8)
    77c6:	e000      	b.n	77ca <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    77c8:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    77ca:	2301      	movs	r3, #1
    77cc:	425b      	negs	r3, r3
}
    77ce:	0018      	movs	r0, r3
    77d0:	46bd      	mov	sp, r7
    77d2:	b006      	add	sp, #24
    77d4:	bd80      	pop	{r7, pc}
    77d6:	46c0      	nop			; (mov r8, r8)
    77d8:	000073d9 	.word	0x000073d9

000077dc <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    77dc:	b590      	push	{r4, r7, lr}
    77de:	b089      	sub	sp, #36	; 0x24
    77e0:	af00      	add	r7, sp, #0
    77e2:	60f8      	str	r0, [r7, #12]
    77e4:	60b9      	str	r1, [r7, #8]
    77e6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    77e8:	68bb      	ldr	r3, [r7, #8]
    77ea:	2b01      	cmp	r3, #1
    77ec:	d904      	bls.n	77f8 <put_fat+0x1c>
    77ee:	68fb      	ldr	r3, [r7, #12]
    77f0:	699a      	ldr	r2, [r3, #24]
    77f2:	68bb      	ldr	r3, [r7, #8]
    77f4:	429a      	cmp	r2, r3
    77f6:	d804      	bhi.n	7802 <put_fat+0x26>
		res = FR_INT_ERR;
    77f8:	231f      	movs	r3, #31
    77fa:	18fb      	adds	r3, r7, r3
    77fc:	2202      	movs	r2, #2
    77fe:	701a      	strb	r2, [r3, #0]
    7800:	e100      	b.n	7a04 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
    7802:	68fb      	ldr	r3, [r7, #12]
    7804:	781b      	ldrb	r3, [r3, #0]
    7806:	2b02      	cmp	r3, #2
    7808:	d100      	bne.n	780c <put_fat+0x30>
    780a:	e078      	b.n	78fe <put_fat+0x122>
    780c:	2b03      	cmp	r3, #3
    780e:	d100      	bne.n	7812 <put_fat+0x36>
    7810:	e09e      	b.n	7950 <put_fat+0x174>
    7812:	2b01      	cmp	r3, #1
    7814:	d000      	beq.n	7818 <put_fat+0x3c>
    7816:	e0e6      	b.n	79e6 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    7818:	68bb      	ldr	r3, [r7, #8]
    781a:	61bb      	str	r3, [r7, #24]
    781c:	69bb      	ldr	r3, [r7, #24]
    781e:	085b      	lsrs	r3, r3, #1
    7820:	69ba      	ldr	r2, [r7, #24]
    7822:	18d3      	adds	r3, r2, r3
    7824:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7826:	68fb      	ldr	r3, [r7, #12]
    7828:	6a1a      	ldr	r2, [r3, #32]
    782a:	69bb      	ldr	r3, [r7, #24]
    782c:	0a5b      	lsrs	r3, r3, #9
    782e:	18d2      	adds	r2, r2, r3
    7830:	231f      	movs	r3, #31
    7832:	18fc      	adds	r4, r7, r3
    7834:	68fb      	ldr	r3, [r7, #12]
    7836:	0011      	movs	r1, r2
    7838:	0018      	movs	r0, r3
    783a:	4b76      	ldr	r3, [pc, #472]	; (7a14 <put_fat+0x238>)
    783c:	4798      	blx	r3
    783e:	0003      	movs	r3, r0
    7840:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7842:	231f      	movs	r3, #31
    7844:	18fb      	adds	r3, r7, r3
    7846:	781b      	ldrb	r3, [r3, #0]
    7848:	2b00      	cmp	r3, #0
    784a:	d000      	beq.n	784e <put_fat+0x72>
    784c:	e0d0      	b.n	79f0 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
    784e:	69bb      	ldr	r3, [r7, #24]
    7850:	05db      	lsls	r3, r3, #23
    7852:	0ddb      	lsrs	r3, r3, #23
    7854:	3330      	adds	r3, #48	; 0x30
    7856:	68fa      	ldr	r2, [r7, #12]
    7858:	18d3      	adds	r3, r2, r3
    785a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    785c:	68bb      	ldr	r3, [r7, #8]
    785e:	2201      	movs	r2, #1
    7860:	4013      	ands	r3, r2
    7862:	d00d      	beq.n	7880 <put_fat+0xa4>
    7864:	697b      	ldr	r3, [r7, #20]
    7866:	781b      	ldrb	r3, [r3, #0]
    7868:	b25b      	sxtb	r3, r3
    786a:	220f      	movs	r2, #15
    786c:	4013      	ands	r3, r2
    786e:	b25a      	sxtb	r2, r3
    7870:	687b      	ldr	r3, [r7, #4]
    7872:	b2db      	uxtb	r3, r3
    7874:	011b      	lsls	r3, r3, #4
    7876:	b25b      	sxtb	r3, r3
    7878:	4313      	orrs	r3, r2
    787a:	b25b      	sxtb	r3, r3
    787c:	b2db      	uxtb	r3, r3
    787e:	e001      	b.n	7884 <put_fat+0xa8>
    7880:	687b      	ldr	r3, [r7, #4]
    7882:	b2db      	uxtb	r3, r3
    7884:	697a      	ldr	r2, [r7, #20]
    7886:	7013      	strb	r3, [r2, #0]
			bc++;
    7888:	69bb      	ldr	r3, [r7, #24]
    788a:	3301      	adds	r3, #1
    788c:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
    788e:	68fb      	ldr	r3, [r7, #12]
    7890:	2201      	movs	r2, #1
    7892:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7894:	68fb      	ldr	r3, [r7, #12]
    7896:	6a1a      	ldr	r2, [r3, #32]
    7898:	69bb      	ldr	r3, [r7, #24]
    789a:	0a5b      	lsrs	r3, r3, #9
    789c:	18d2      	adds	r2, r2, r3
    789e:	231f      	movs	r3, #31
    78a0:	18fc      	adds	r4, r7, r3
    78a2:	68fb      	ldr	r3, [r7, #12]
    78a4:	0011      	movs	r1, r2
    78a6:	0018      	movs	r0, r3
    78a8:	4b5a      	ldr	r3, [pc, #360]	; (7a14 <put_fat+0x238>)
    78aa:	4798      	blx	r3
    78ac:	0003      	movs	r3, r0
    78ae:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    78b0:	231f      	movs	r3, #31
    78b2:	18fb      	adds	r3, r7, r3
    78b4:	781b      	ldrb	r3, [r3, #0]
    78b6:	2b00      	cmp	r3, #0
    78b8:	d000      	beq.n	78bc <put_fat+0xe0>
    78ba:	e09b      	b.n	79f4 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
    78bc:	69bb      	ldr	r3, [r7, #24]
    78be:	05db      	lsls	r3, r3, #23
    78c0:	0ddb      	lsrs	r3, r3, #23
    78c2:	3330      	adds	r3, #48	; 0x30
    78c4:	68fa      	ldr	r2, [r7, #12]
    78c6:	18d3      	adds	r3, r2, r3
    78c8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    78ca:	68bb      	ldr	r3, [r7, #8]
    78cc:	2201      	movs	r2, #1
    78ce:	4013      	ands	r3, r2
    78d0:	d003      	beq.n	78da <put_fat+0xfe>
    78d2:	687b      	ldr	r3, [r7, #4]
    78d4:	091b      	lsrs	r3, r3, #4
    78d6:	b2db      	uxtb	r3, r3
    78d8:	e00e      	b.n	78f8 <put_fat+0x11c>
    78da:	697b      	ldr	r3, [r7, #20]
    78dc:	781b      	ldrb	r3, [r3, #0]
    78de:	b25b      	sxtb	r3, r3
    78e0:	220f      	movs	r2, #15
    78e2:	4393      	bics	r3, r2
    78e4:	b25a      	sxtb	r2, r3
    78e6:	687b      	ldr	r3, [r7, #4]
    78e8:	0a1b      	lsrs	r3, r3, #8
    78ea:	b25b      	sxtb	r3, r3
    78ec:	210f      	movs	r1, #15
    78ee:	400b      	ands	r3, r1
    78f0:	b25b      	sxtb	r3, r3
    78f2:	4313      	orrs	r3, r2
    78f4:	b25b      	sxtb	r3, r3
    78f6:	b2db      	uxtb	r3, r3
    78f8:	697a      	ldr	r2, [r7, #20]
    78fa:	7013      	strb	r3, [r2, #0]
			break;
    78fc:	e07f      	b.n	79fe <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    78fe:	68fb      	ldr	r3, [r7, #12]
    7900:	6a1a      	ldr	r2, [r3, #32]
    7902:	68bb      	ldr	r3, [r7, #8]
    7904:	0a1b      	lsrs	r3, r3, #8
    7906:	18d2      	adds	r2, r2, r3
    7908:	231f      	movs	r3, #31
    790a:	18fc      	adds	r4, r7, r3
    790c:	68fb      	ldr	r3, [r7, #12]
    790e:	0011      	movs	r1, r2
    7910:	0018      	movs	r0, r3
    7912:	4b40      	ldr	r3, [pc, #256]	; (7a14 <put_fat+0x238>)
    7914:	4798      	blx	r3
    7916:	0003      	movs	r3, r0
    7918:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    791a:	231f      	movs	r3, #31
    791c:	18fb      	adds	r3, r7, r3
    791e:	781b      	ldrb	r3, [r3, #0]
    7920:	2b00      	cmp	r3, #0
    7922:	d169      	bne.n	79f8 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
    7924:	68bb      	ldr	r3, [r7, #8]
    7926:	005a      	lsls	r2, r3, #1
    7928:	23ff      	movs	r3, #255	; 0xff
    792a:	005b      	lsls	r3, r3, #1
    792c:	4013      	ands	r3, r2
    792e:	3330      	adds	r3, #48	; 0x30
    7930:	68fa      	ldr	r2, [r7, #12]
    7932:	18d3      	adds	r3, r2, r3
    7934:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
    7936:	687b      	ldr	r3, [r7, #4]
    7938:	b2da      	uxtb	r2, r3
    793a:	697b      	ldr	r3, [r7, #20]
    793c:	701a      	strb	r2, [r3, #0]
    793e:	697b      	ldr	r3, [r7, #20]
    7940:	3301      	adds	r3, #1
    7942:	687a      	ldr	r2, [r7, #4]
    7944:	b292      	uxth	r2, r2
    7946:	0a12      	lsrs	r2, r2, #8
    7948:	b292      	uxth	r2, r2
    794a:	b2d2      	uxtb	r2, r2
    794c:	701a      	strb	r2, [r3, #0]
			break;
    794e:	e056      	b.n	79fe <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    7950:	68fb      	ldr	r3, [r7, #12]
    7952:	6a1a      	ldr	r2, [r3, #32]
    7954:	68bb      	ldr	r3, [r7, #8]
    7956:	09db      	lsrs	r3, r3, #7
    7958:	18d2      	adds	r2, r2, r3
    795a:	231f      	movs	r3, #31
    795c:	18fc      	adds	r4, r7, r3
    795e:	68fb      	ldr	r3, [r7, #12]
    7960:	0011      	movs	r1, r2
    7962:	0018      	movs	r0, r3
    7964:	4b2b      	ldr	r3, [pc, #172]	; (7a14 <put_fat+0x238>)
    7966:	4798      	blx	r3
    7968:	0003      	movs	r3, r0
    796a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    796c:	231f      	movs	r3, #31
    796e:	18fb      	adds	r3, r7, r3
    7970:	781b      	ldrb	r3, [r3, #0]
    7972:	2b00      	cmp	r3, #0
    7974:	d142      	bne.n	79fc <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
    7976:	68bb      	ldr	r3, [r7, #8]
    7978:	009a      	lsls	r2, r3, #2
    797a:	23fe      	movs	r3, #254	; 0xfe
    797c:	005b      	lsls	r3, r3, #1
    797e:	4013      	ands	r3, r2
    7980:	3330      	adds	r3, #48	; 0x30
    7982:	68fa      	ldr	r2, [r7, #12]
    7984:	18d3      	adds	r3, r2, r3
    7986:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
    7988:	697b      	ldr	r3, [r7, #20]
    798a:	3303      	adds	r3, #3
    798c:	781b      	ldrb	r3, [r3, #0]
    798e:	061a      	lsls	r2, r3, #24
    7990:	697b      	ldr	r3, [r7, #20]
    7992:	3302      	adds	r3, #2
    7994:	781b      	ldrb	r3, [r3, #0]
    7996:	041b      	lsls	r3, r3, #16
    7998:	4313      	orrs	r3, r2
    799a:	697a      	ldr	r2, [r7, #20]
    799c:	3201      	adds	r2, #1
    799e:	7812      	ldrb	r2, [r2, #0]
    79a0:	0212      	lsls	r2, r2, #8
    79a2:	4313      	orrs	r3, r2
    79a4:	697a      	ldr	r2, [r7, #20]
    79a6:	7812      	ldrb	r2, [r2, #0]
    79a8:	4313      	orrs	r3, r2
    79aa:	0f1b      	lsrs	r3, r3, #28
    79ac:	071b      	lsls	r3, r3, #28
    79ae:	687a      	ldr	r2, [r7, #4]
    79b0:	4313      	orrs	r3, r2
    79b2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
    79b4:	687b      	ldr	r3, [r7, #4]
    79b6:	b2da      	uxtb	r2, r3
    79b8:	697b      	ldr	r3, [r7, #20]
    79ba:	701a      	strb	r2, [r3, #0]
    79bc:	697b      	ldr	r3, [r7, #20]
    79be:	3301      	adds	r3, #1
    79c0:	687a      	ldr	r2, [r7, #4]
    79c2:	b292      	uxth	r2, r2
    79c4:	0a12      	lsrs	r2, r2, #8
    79c6:	b292      	uxth	r2, r2
    79c8:	b2d2      	uxtb	r2, r2
    79ca:	701a      	strb	r2, [r3, #0]
    79cc:	697b      	ldr	r3, [r7, #20]
    79ce:	3302      	adds	r3, #2
    79d0:	687a      	ldr	r2, [r7, #4]
    79d2:	0c12      	lsrs	r2, r2, #16
    79d4:	b2d2      	uxtb	r2, r2
    79d6:	701a      	strb	r2, [r3, #0]
    79d8:	697b      	ldr	r3, [r7, #20]
    79da:	3303      	adds	r3, #3
    79dc:	687a      	ldr	r2, [r7, #4]
    79de:	0e12      	lsrs	r2, r2, #24
    79e0:	b2d2      	uxtb	r2, r2
    79e2:	701a      	strb	r2, [r3, #0]
			break;
    79e4:	e00b      	b.n	79fe <put_fat+0x222>

		default :
			res = FR_INT_ERR;
    79e6:	231f      	movs	r3, #31
    79e8:	18fb      	adds	r3, r7, r3
    79ea:	2202      	movs	r2, #2
    79ec:	701a      	strb	r2, [r3, #0]
    79ee:	e006      	b.n	79fe <put_fat+0x222>
			if (res != FR_OK) break;
    79f0:	46c0      	nop			; (mov r8, r8)
    79f2:	e004      	b.n	79fe <put_fat+0x222>
			if (res != FR_OK) break;
    79f4:	46c0      	nop			; (mov r8, r8)
    79f6:	e002      	b.n	79fe <put_fat+0x222>
			if (res != FR_OK) break;
    79f8:	46c0      	nop			; (mov r8, r8)
    79fa:	e000      	b.n	79fe <put_fat+0x222>
			if (res != FR_OK) break;
    79fc:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
    79fe:	68fb      	ldr	r3, [r7, #12]
    7a00:	2201      	movs	r2, #1
    7a02:	711a      	strb	r2, [r3, #4]
	}

	return res;
    7a04:	231f      	movs	r3, #31
    7a06:	18fb      	adds	r3, r7, r3
    7a08:	781b      	ldrb	r3, [r3, #0]
}
    7a0a:	0018      	movs	r0, r3
    7a0c:	46bd      	mov	sp, r7
    7a0e:	b009      	add	sp, #36	; 0x24
    7a10:	bd90      	pop	{r4, r7, pc}
    7a12:	46c0      	nop			; (mov r8, r8)
    7a14:	000073d9 	.word	0x000073d9

00007a18 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    7a18:	b590      	push	{r4, r7, lr}
    7a1a:	b085      	sub	sp, #20
    7a1c:	af00      	add	r7, sp, #0
    7a1e:	6078      	str	r0, [r7, #4]
    7a20:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7a22:	683b      	ldr	r3, [r7, #0]
    7a24:	2b01      	cmp	r3, #1
    7a26:	d904      	bls.n	7a32 <remove_chain+0x1a>
    7a28:	687b      	ldr	r3, [r7, #4]
    7a2a:	699a      	ldr	r2, [r3, #24]
    7a2c:	683b      	ldr	r3, [r7, #0]
    7a2e:	429a      	cmp	r2, r3
    7a30:	d804      	bhi.n	7a3c <remove_chain+0x24>
		res = FR_INT_ERR;
    7a32:	230f      	movs	r3, #15
    7a34:	18fb      	adds	r3, r7, r3
    7a36:	2202      	movs	r2, #2
    7a38:	701a      	strb	r2, [r3, #0]
    7a3a:	e045      	b.n	7ac8 <remove_chain+0xb0>

	} else {
		res = FR_OK;
    7a3c:	230f      	movs	r3, #15
    7a3e:	18fb      	adds	r3, r7, r3
    7a40:	2200      	movs	r2, #0
    7a42:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7a44:	e037      	b.n	7ab6 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7a46:	683a      	ldr	r2, [r7, #0]
    7a48:	687b      	ldr	r3, [r7, #4]
    7a4a:	0011      	movs	r1, r2
    7a4c:	0018      	movs	r0, r3
    7a4e:	4b22      	ldr	r3, [pc, #136]	; (7ad8 <remove_chain+0xc0>)
    7a50:	4798      	blx	r3
    7a52:	0003      	movs	r3, r0
    7a54:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
    7a56:	68bb      	ldr	r3, [r7, #8]
    7a58:	2b00      	cmp	r3, #0
    7a5a:	d032      	beq.n	7ac2 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7a5c:	68bb      	ldr	r3, [r7, #8]
    7a5e:	2b01      	cmp	r3, #1
    7a60:	d104      	bne.n	7a6c <remove_chain+0x54>
    7a62:	230f      	movs	r3, #15
    7a64:	18fb      	adds	r3, r7, r3
    7a66:	2202      	movs	r2, #2
    7a68:	701a      	strb	r2, [r3, #0]
    7a6a:	e02d      	b.n	7ac8 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7a6c:	68bb      	ldr	r3, [r7, #8]
    7a6e:	3301      	adds	r3, #1
    7a70:	d104      	bne.n	7a7c <remove_chain+0x64>
    7a72:	230f      	movs	r3, #15
    7a74:	18fb      	adds	r3, r7, r3
    7a76:	2201      	movs	r2, #1
    7a78:	701a      	strb	r2, [r3, #0]
    7a7a:	e025      	b.n	7ac8 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7a7c:	230f      	movs	r3, #15
    7a7e:	18fc      	adds	r4, r7, r3
    7a80:	6839      	ldr	r1, [r7, #0]
    7a82:	687b      	ldr	r3, [r7, #4]
    7a84:	2200      	movs	r2, #0
    7a86:	0018      	movs	r0, r3
    7a88:	4b14      	ldr	r3, [pc, #80]	; (7adc <remove_chain+0xc4>)
    7a8a:	4798      	blx	r3
    7a8c:	0003      	movs	r3, r0
    7a8e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7a90:	230f      	movs	r3, #15
    7a92:	18fb      	adds	r3, r7, r3
    7a94:	781b      	ldrb	r3, [r3, #0]
    7a96:	2b00      	cmp	r3, #0
    7a98:	d115      	bne.n	7ac6 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    7a9a:	687b      	ldr	r3, [r7, #4]
    7a9c:	691b      	ldr	r3, [r3, #16]
    7a9e:	3301      	adds	r3, #1
    7aa0:	d007      	beq.n	7ab2 <remove_chain+0x9a>
				fs->free_clust++;
    7aa2:	687b      	ldr	r3, [r7, #4]
    7aa4:	691b      	ldr	r3, [r3, #16]
    7aa6:	1c5a      	adds	r2, r3, #1
    7aa8:	687b      	ldr	r3, [r7, #4]
    7aaa:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
    7aac:	687b      	ldr	r3, [r7, #4]
    7aae:	2201      	movs	r2, #1
    7ab0:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    7ab2:	68bb      	ldr	r3, [r7, #8]
    7ab4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7ab6:	687b      	ldr	r3, [r7, #4]
    7ab8:	699a      	ldr	r2, [r3, #24]
    7aba:	683b      	ldr	r3, [r7, #0]
    7abc:	429a      	cmp	r2, r3
    7abe:	d8c2      	bhi.n	7a46 <remove_chain+0x2e>
    7ac0:	e002      	b.n	7ac8 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
    7ac2:	46c0      	nop			; (mov r8, r8)
    7ac4:	e000      	b.n	7ac8 <remove_chain+0xb0>
			if (res != FR_OK) break;
    7ac6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    7ac8:	230f      	movs	r3, #15
    7aca:	18fb      	adds	r3, r7, r3
    7acc:	781b      	ldrb	r3, [r3, #0]
}
    7ace:	0018      	movs	r0, r3
    7ad0:	46bd      	mov	sp, r7
    7ad2:	b005      	add	sp, #20
    7ad4:	bd90      	pop	{r4, r7, pc}
    7ad6:	46c0      	nop			; (mov r8, r8)
    7ad8:	00007671 	.word	0x00007671
    7adc:	000077dd 	.word	0x000077dd

00007ae0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    7ae0:	b590      	push	{r4, r7, lr}
    7ae2:	b087      	sub	sp, #28
    7ae4:	af00      	add	r7, sp, #0
    7ae6:	6078      	str	r0, [r7, #4]
    7ae8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    7aea:	683b      	ldr	r3, [r7, #0]
    7aec:	2b00      	cmp	r3, #0
    7aee:	d10d      	bne.n	7b0c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
    7af0:	687b      	ldr	r3, [r7, #4]
    7af2:	68db      	ldr	r3, [r3, #12]
    7af4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    7af6:	693b      	ldr	r3, [r7, #16]
    7af8:	2b00      	cmp	r3, #0
    7afa:	d004      	beq.n	7b06 <create_chain+0x26>
    7afc:	687b      	ldr	r3, [r7, #4]
    7afe:	699a      	ldr	r2, [r3, #24]
    7b00:	693b      	ldr	r3, [r7, #16]
    7b02:	429a      	cmp	r2, r3
    7b04:	d818      	bhi.n	7b38 <create_chain+0x58>
    7b06:	2301      	movs	r3, #1
    7b08:	613b      	str	r3, [r7, #16]
    7b0a:	e015      	b.n	7b38 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7b0c:	683a      	ldr	r2, [r7, #0]
    7b0e:	687b      	ldr	r3, [r7, #4]
    7b10:	0011      	movs	r1, r2
    7b12:	0018      	movs	r0, r3
    7b14:	4b3e      	ldr	r3, [pc, #248]	; (7c10 <create_chain+0x130>)
    7b16:	4798      	blx	r3
    7b18:	0003      	movs	r3, r0
    7b1a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7b1c:	68bb      	ldr	r3, [r7, #8]
    7b1e:	2b01      	cmp	r3, #1
    7b20:	d801      	bhi.n	7b26 <create_chain+0x46>
    7b22:	2301      	movs	r3, #1
    7b24:	e070      	b.n	7c08 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    7b26:	687b      	ldr	r3, [r7, #4]
    7b28:	699a      	ldr	r2, [r3, #24]
    7b2a:	68bb      	ldr	r3, [r7, #8]
    7b2c:	429a      	cmp	r2, r3
    7b2e:	d901      	bls.n	7b34 <create_chain+0x54>
    7b30:	68bb      	ldr	r3, [r7, #8]
    7b32:	e069      	b.n	7c08 <create_chain+0x128>
		scl = clst;
    7b34:	683b      	ldr	r3, [r7, #0]
    7b36:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
    7b38:	693b      	ldr	r3, [r7, #16]
    7b3a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
    7b3c:	697b      	ldr	r3, [r7, #20]
    7b3e:	3301      	adds	r3, #1
    7b40:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    7b42:	687b      	ldr	r3, [r7, #4]
    7b44:	699a      	ldr	r2, [r3, #24]
    7b46:	697b      	ldr	r3, [r7, #20]
    7b48:	429a      	cmp	r2, r3
    7b4a:	d807      	bhi.n	7b5c <create_chain+0x7c>
			ncl = 2;
    7b4c:	2302      	movs	r3, #2
    7b4e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
    7b50:	697a      	ldr	r2, [r7, #20]
    7b52:	693b      	ldr	r3, [r7, #16]
    7b54:	429a      	cmp	r2, r3
    7b56:	d901      	bls.n	7b5c <create_chain+0x7c>
    7b58:	2300      	movs	r3, #0
    7b5a:	e055      	b.n	7c08 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    7b5c:	697a      	ldr	r2, [r7, #20]
    7b5e:	687b      	ldr	r3, [r7, #4]
    7b60:	0011      	movs	r1, r2
    7b62:	0018      	movs	r0, r3
    7b64:	4b2a      	ldr	r3, [pc, #168]	; (7c10 <create_chain+0x130>)
    7b66:	4798      	blx	r3
    7b68:	0003      	movs	r3, r0
    7b6a:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
    7b6c:	68bb      	ldr	r3, [r7, #8]
    7b6e:	2b00      	cmp	r3, #0
    7b70:	d00d      	beq.n	7b8e <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    7b72:	68bb      	ldr	r3, [r7, #8]
    7b74:	3301      	adds	r3, #1
    7b76:	d002      	beq.n	7b7e <create_chain+0x9e>
    7b78:	68bb      	ldr	r3, [r7, #8]
    7b7a:	2b01      	cmp	r3, #1
    7b7c:	d101      	bne.n	7b82 <create_chain+0xa2>
			return cs;
    7b7e:	68bb      	ldr	r3, [r7, #8]
    7b80:	e042      	b.n	7c08 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
    7b82:	697a      	ldr	r2, [r7, #20]
    7b84:	693b      	ldr	r3, [r7, #16]
    7b86:	429a      	cmp	r2, r3
    7b88:	d1d8      	bne.n	7b3c <create_chain+0x5c>
    7b8a:	2300      	movs	r3, #0
    7b8c:	e03c      	b.n	7c08 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
    7b8e:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    7b90:	230f      	movs	r3, #15
    7b92:	18fc      	adds	r4, r7, r3
    7b94:	4a1f      	ldr	r2, [pc, #124]	; (7c14 <create_chain+0x134>)
    7b96:	6979      	ldr	r1, [r7, #20]
    7b98:	687b      	ldr	r3, [r7, #4]
    7b9a:	0018      	movs	r0, r3
    7b9c:	4b1e      	ldr	r3, [pc, #120]	; (7c18 <create_chain+0x138>)
    7b9e:	4798      	blx	r3
    7ba0:	0003      	movs	r3, r0
    7ba2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
    7ba4:	230f      	movs	r3, #15
    7ba6:	18fb      	adds	r3, r7, r3
    7ba8:	781b      	ldrb	r3, [r3, #0]
    7baa:	2b00      	cmp	r3, #0
    7bac:	d10c      	bne.n	7bc8 <create_chain+0xe8>
    7bae:	683b      	ldr	r3, [r7, #0]
    7bb0:	2b00      	cmp	r3, #0
    7bb2:	d009      	beq.n	7bc8 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    7bb4:	230f      	movs	r3, #15
    7bb6:	18fc      	adds	r4, r7, r3
    7bb8:	697a      	ldr	r2, [r7, #20]
    7bba:	6839      	ldr	r1, [r7, #0]
    7bbc:	687b      	ldr	r3, [r7, #4]
    7bbe:	0018      	movs	r0, r3
    7bc0:	4b15      	ldr	r3, [pc, #84]	; (7c18 <create_chain+0x138>)
    7bc2:	4798      	blx	r3
    7bc4:	0003      	movs	r3, r0
    7bc6:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
    7bc8:	230f      	movs	r3, #15
    7bca:	18fb      	adds	r3, r7, r3
    7bcc:	781b      	ldrb	r3, [r3, #0]
    7bce:	2b00      	cmp	r3, #0
    7bd0:	d10f      	bne.n	7bf2 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
    7bd2:	687b      	ldr	r3, [r7, #4]
    7bd4:	697a      	ldr	r2, [r7, #20]
    7bd6:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    7bd8:	687b      	ldr	r3, [r7, #4]
    7bda:	691b      	ldr	r3, [r3, #16]
    7bdc:	3301      	adds	r3, #1
    7bde:	d012      	beq.n	7c06 <create_chain+0x126>
			fs->free_clust--;
    7be0:	687b      	ldr	r3, [r7, #4]
    7be2:	691b      	ldr	r3, [r3, #16]
    7be4:	1e5a      	subs	r2, r3, #1
    7be6:	687b      	ldr	r3, [r7, #4]
    7be8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
    7bea:	687b      	ldr	r3, [r7, #4]
    7bec:	2201      	movs	r2, #1
    7bee:	715a      	strb	r2, [r3, #5]
    7bf0:	e009      	b.n	7c06 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    7bf2:	230f      	movs	r3, #15
    7bf4:	18fb      	adds	r3, r7, r3
    7bf6:	781b      	ldrb	r3, [r3, #0]
    7bf8:	2b01      	cmp	r3, #1
    7bfa:	d102      	bne.n	7c02 <create_chain+0x122>
    7bfc:	2301      	movs	r3, #1
    7bfe:	425b      	negs	r3, r3
    7c00:	e000      	b.n	7c04 <create_chain+0x124>
    7c02:	2301      	movs	r3, #1
    7c04:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
    7c06:	697b      	ldr	r3, [r7, #20]
}
    7c08:	0018      	movs	r0, r3
    7c0a:	46bd      	mov	sp, r7
    7c0c:	b007      	add	sp, #28
    7c0e:	bd90      	pop	{r4, r7, pc}
    7c10:	00007671 	.word	0x00007671
    7c14:	0fffffff 	.word	0x0fffffff
    7c18:	000077dd 	.word	0x000077dd

00007c1c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    7c1c:	b580      	push	{r7, lr}
    7c1e:	b084      	sub	sp, #16
    7c20:	af00      	add	r7, sp, #0
    7c22:	6078      	str	r0, [r7, #4]
    7c24:	000a      	movs	r2, r1
    7c26:	1cbb      	adds	r3, r7, #2
    7c28:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
    7c2a:	687b      	ldr	r3, [r7, #4]
    7c2c:	1cba      	adds	r2, r7, #2
    7c2e:	8812      	ldrh	r2, [r2, #0]
    7c30:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
    7c32:	687b      	ldr	r3, [r7, #4]
    7c34:	689b      	ldr	r3, [r3, #8]
    7c36:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    7c38:	68fb      	ldr	r3, [r7, #12]
    7c3a:	2b01      	cmp	r3, #1
    7c3c:	d005      	beq.n	7c4a <dir_sdi+0x2e>
    7c3e:	687b      	ldr	r3, [r7, #4]
    7c40:	681b      	ldr	r3, [r3, #0]
    7c42:	699a      	ldr	r2, [r3, #24]
    7c44:	68fb      	ldr	r3, [r7, #12]
    7c46:	429a      	cmp	r2, r3
    7c48:	d801      	bhi.n	7c4e <dir_sdi+0x32>
		return FR_INT_ERR;
    7c4a:	2302      	movs	r3, #2
    7c4c:	e075      	b.n	7d3a <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    7c4e:	68fb      	ldr	r3, [r7, #12]
    7c50:	2b00      	cmp	r3, #0
    7c52:	d108      	bne.n	7c66 <dir_sdi+0x4a>
    7c54:	687b      	ldr	r3, [r7, #4]
    7c56:	681b      	ldr	r3, [r3, #0]
    7c58:	781b      	ldrb	r3, [r3, #0]
    7c5a:	2b03      	cmp	r3, #3
    7c5c:	d103      	bne.n	7c66 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
    7c5e:	687b      	ldr	r3, [r7, #4]
    7c60:	681b      	ldr	r3, [r3, #0]
    7c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7c64:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    7c66:	68fb      	ldr	r3, [r7, #12]
    7c68:	2b00      	cmp	r3, #0
    7c6a:	d116      	bne.n	7c9a <dir_sdi+0x7e>
		dj->clust = clst;
    7c6c:	687b      	ldr	r3, [r7, #4]
    7c6e:	68fa      	ldr	r2, [r7, #12]
    7c70:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7c72:	687b      	ldr	r3, [r7, #4]
    7c74:	681b      	ldr	r3, [r3, #0]
    7c76:	891b      	ldrh	r3, [r3, #8]
    7c78:	1cba      	adds	r2, r7, #2
    7c7a:	8812      	ldrh	r2, [r2, #0]
    7c7c:	429a      	cmp	r2, r3
    7c7e:	d301      	bcc.n	7c84 <dir_sdi+0x68>
			return FR_INT_ERR;
    7c80:	2302      	movs	r3, #2
    7c82:	e05a      	b.n	7d3a <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7c84:	687b      	ldr	r3, [r7, #4]
    7c86:	681b      	ldr	r3, [r3, #0]
    7c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7c8a:	1cba      	adds	r2, r7, #2
    7c8c:	8812      	ldrh	r2, [r2, #0]
    7c8e:	0912      	lsrs	r2, r2, #4
    7c90:	b292      	uxth	r2, r2
    7c92:	189a      	adds	r2, r3, r2
    7c94:	687b      	ldr	r3, [r7, #4]
    7c96:	611a      	str	r2, [r3, #16]
    7c98:	e042      	b.n	7d20 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    7c9a:	687b      	ldr	r3, [r7, #4]
    7c9c:	681b      	ldr	r3, [r3, #0]
    7c9e:	789b      	ldrb	r3, [r3, #2]
    7ca0:	b29a      	uxth	r2, r3
    7ca2:	230a      	movs	r3, #10
    7ca4:	18fb      	adds	r3, r7, r3
    7ca6:	0112      	lsls	r2, r2, #4
    7ca8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7caa:	e020      	b.n	7cee <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    7cac:	687b      	ldr	r3, [r7, #4]
    7cae:	681b      	ldr	r3, [r3, #0]
    7cb0:	68fa      	ldr	r2, [r7, #12]
    7cb2:	0011      	movs	r1, r2
    7cb4:	0018      	movs	r0, r3
    7cb6:	4b23      	ldr	r3, [pc, #140]	; (7d44 <dir_sdi+0x128>)
    7cb8:	4798      	blx	r3
    7cba:	0003      	movs	r3, r0
    7cbc:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7cbe:	68fb      	ldr	r3, [r7, #12]
    7cc0:	3301      	adds	r3, #1
    7cc2:	d101      	bne.n	7cc8 <dir_sdi+0xac>
    7cc4:	2301      	movs	r3, #1
    7cc6:	e038      	b.n	7d3a <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    7cc8:	68fb      	ldr	r3, [r7, #12]
    7cca:	2b01      	cmp	r3, #1
    7ccc:	d905      	bls.n	7cda <dir_sdi+0xbe>
    7cce:	687b      	ldr	r3, [r7, #4]
    7cd0:	681b      	ldr	r3, [r3, #0]
    7cd2:	699a      	ldr	r2, [r3, #24]
    7cd4:	68fb      	ldr	r3, [r7, #12]
    7cd6:	429a      	cmp	r2, r3
    7cd8:	d801      	bhi.n	7cde <dir_sdi+0xc2>
				return FR_INT_ERR;
    7cda:	2302      	movs	r3, #2
    7cdc:	e02d      	b.n	7d3a <dir_sdi+0x11e>
			idx -= ic;
    7cde:	1cbb      	adds	r3, r7, #2
    7ce0:	1cb9      	adds	r1, r7, #2
    7ce2:	220a      	movs	r2, #10
    7ce4:	18ba      	adds	r2, r7, r2
    7ce6:	8809      	ldrh	r1, [r1, #0]
    7ce8:	8812      	ldrh	r2, [r2, #0]
    7cea:	1a8a      	subs	r2, r1, r2
    7cec:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7cee:	1cba      	adds	r2, r7, #2
    7cf0:	230a      	movs	r3, #10
    7cf2:	18fb      	adds	r3, r7, r3
    7cf4:	8812      	ldrh	r2, [r2, #0]
    7cf6:	881b      	ldrh	r3, [r3, #0]
    7cf8:	429a      	cmp	r2, r3
    7cfa:	d2d7      	bcs.n	7cac <dir_sdi+0x90>
		}
		dj->clust = clst;
    7cfc:	687b      	ldr	r3, [r7, #4]
    7cfe:	68fa      	ldr	r2, [r7, #12]
    7d00:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7d02:	687b      	ldr	r3, [r7, #4]
    7d04:	681b      	ldr	r3, [r3, #0]
    7d06:	68fa      	ldr	r2, [r7, #12]
    7d08:	0011      	movs	r1, r2
    7d0a:	0018      	movs	r0, r3
    7d0c:	4b0e      	ldr	r3, [pc, #56]	; (7d48 <dir_sdi+0x12c>)
    7d0e:	4798      	blx	r3
    7d10:	0002      	movs	r2, r0
    7d12:	1cbb      	adds	r3, r7, #2
    7d14:	881b      	ldrh	r3, [r3, #0]
    7d16:	091b      	lsrs	r3, r3, #4
    7d18:	b29b      	uxth	r3, r3
    7d1a:	18d2      	adds	r2, r2, r3
    7d1c:	687b      	ldr	r3, [r7, #4]
    7d1e:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    7d20:	687b      	ldr	r3, [r7, #4]
    7d22:	681b      	ldr	r3, [r3, #0]
    7d24:	3330      	adds	r3, #48	; 0x30
    7d26:	001a      	movs	r2, r3
    7d28:	1cbb      	adds	r3, r7, #2
    7d2a:	881b      	ldrh	r3, [r3, #0]
    7d2c:	210f      	movs	r1, #15
    7d2e:	400b      	ands	r3, r1
    7d30:	015b      	lsls	r3, r3, #5
    7d32:	18d2      	adds	r2, r2, r3
    7d34:	687b      	ldr	r3, [r7, #4]
    7d36:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
    7d38:	2300      	movs	r3, #0
}
    7d3a:	0018      	movs	r0, r3
    7d3c:	46bd      	mov	sp, r7
    7d3e:	b004      	add	sp, #16
    7d40:	bd80      	pop	{r7, pc}
    7d42:	46c0      	nop			; (mov r8, r8)
    7d44:	00007671 	.word	0x00007671
    7d48:	00007639 	.word	0x00007639

00007d4c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    7d4c:	b590      	push	{r4, r7, lr}
    7d4e:	b085      	sub	sp, #20
    7d50:	af00      	add	r7, sp, #0
    7d52:	6078      	str	r0, [r7, #4]
    7d54:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    7d56:	687b      	ldr	r3, [r7, #4]
    7d58:	88da      	ldrh	r2, [r3, #6]
    7d5a:	2308      	movs	r3, #8
    7d5c:	18fb      	adds	r3, r7, r3
    7d5e:	3201      	adds	r2, #1
    7d60:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7d62:	2308      	movs	r3, #8
    7d64:	18fb      	adds	r3, r7, r3
    7d66:	881b      	ldrh	r3, [r3, #0]
    7d68:	2b00      	cmp	r3, #0
    7d6a:	d003      	beq.n	7d74 <dir_next+0x28>
    7d6c:	687b      	ldr	r3, [r7, #4]
    7d6e:	691b      	ldr	r3, [r3, #16]
    7d70:	2b00      	cmp	r3, #0
    7d72:	d101      	bne.n	7d78 <dir_next+0x2c>
		return FR_NO_FILE;
    7d74:	2304      	movs	r3, #4
    7d76:	e0d2      	b.n	7f1e <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    7d78:	2308      	movs	r3, #8
    7d7a:	18fb      	adds	r3, r7, r3
    7d7c:	881b      	ldrh	r3, [r3, #0]
    7d7e:	220f      	movs	r2, #15
    7d80:	4013      	ands	r3, r2
    7d82:	b29b      	uxth	r3, r3
    7d84:	2b00      	cmp	r3, #0
    7d86:	d000      	beq.n	7d8a <dir_next+0x3e>
    7d88:	e0b6      	b.n	7ef8 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
    7d8a:	687b      	ldr	r3, [r7, #4]
    7d8c:	691b      	ldr	r3, [r3, #16]
    7d8e:	1c5a      	adds	r2, r3, #1
    7d90:	687b      	ldr	r3, [r7, #4]
    7d92:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
    7d94:	687b      	ldr	r3, [r7, #4]
    7d96:	68db      	ldr	r3, [r3, #12]
    7d98:	2b00      	cmp	r3, #0
    7d9a:	d10a      	bne.n	7db2 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    7d9c:	687b      	ldr	r3, [r7, #4]
    7d9e:	681b      	ldr	r3, [r3, #0]
    7da0:	891b      	ldrh	r3, [r3, #8]
    7da2:	2208      	movs	r2, #8
    7da4:	18ba      	adds	r2, r7, r2
    7da6:	8812      	ldrh	r2, [r2, #0]
    7da8:	429a      	cmp	r2, r3
    7daa:	d200      	bcs.n	7dae <dir_next+0x62>
    7dac:	e0a4      	b.n	7ef8 <dir_next+0x1ac>
				return FR_NO_FILE;
    7dae:	2304      	movs	r3, #4
    7db0:	e0b5      	b.n	7f1e <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    7db2:	2308      	movs	r3, #8
    7db4:	18fb      	adds	r3, r7, r3
    7db6:	881b      	ldrh	r3, [r3, #0]
    7db8:	091b      	lsrs	r3, r3, #4
    7dba:	b29b      	uxth	r3, r3
    7dbc:	001a      	movs	r2, r3
    7dbe:	687b      	ldr	r3, [r7, #4]
    7dc0:	681b      	ldr	r3, [r3, #0]
    7dc2:	789b      	ldrb	r3, [r3, #2]
    7dc4:	3b01      	subs	r3, #1
    7dc6:	4013      	ands	r3, r2
    7dc8:	d000      	beq.n	7dcc <dir_next+0x80>
    7dca:	e095      	b.n	7ef8 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    7dcc:	687b      	ldr	r3, [r7, #4]
    7dce:	681a      	ldr	r2, [r3, #0]
    7dd0:	687b      	ldr	r3, [r7, #4]
    7dd2:	68db      	ldr	r3, [r3, #12]
    7dd4:	0019      	movs	r1, r3
    7dd6:	0010      	movs	r0, r2
    7dd8:	4b53      	ldr	r3, [pc, #332]	; (7f28 <dir_next+0x1dc>)
    7dda:	4798      	blx	r3
    7ddc:	0003      	movs	r3, r0
    7dde:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
    7de0:	68fb      	ldr	r3, [r7, #12]
    7de2:	2b01      	cmp	r3, #1
    7de4:	d801      	bhi.n	7dea <dir_next+0x9e>
    7de6:	2302      	movs	r3, #2
    7de8:	e099      	b.n	7f1e <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7dea:	68fb      	ldr	r3, [r7, #12]
    7dec:	3301      	adds	r3, #1
    7dee:	d101      	bne.n	7df4 <dir_next+0xa8>
    7df0:	2301      	movs	r3, #1
    7df2:	e094      	b.n	7f1e <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    7df4:	687b      	ldr	r3, [r7, #4]
    7df6:	681b      	ldr	r3, [r3, #0]
    7df8:	699a      	ldr	r2, [r3, #24]
    7dfa:	68fb      	ldr	r3, [r7, #12]
    7dfc:	429a      	cmp	r2, r3
    7dfe:	d900      	bls.n	7e02 <dir_next+0xb6>
    7e00:	e06d      	b.n	7ede <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    7e02:	683b      	ldr	r3, [r7, #0]
    7e04:	2b00      	cmp	r3, #0
    7e06:	d101      	bne.n	7e0c <dir_next+0xc0>
    7e08:	2304      	movs	r3, #4
    7e0a:	e088      	b.n	7f1e <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    7e0c:	687b      	ldr	r3, [r7, #4]
    7e0e:	681a      	ldr	r2, [r3, #0]
    7e10:	687b      	ldr	r3, [r7, #4]
    7e12:	68db      	ldr	r3, [r3, #12]
    7e14:	0019      	movs	r1, r3
    7e16:	0010      	movs	r0, r2
    7e18:	4b44      	ldr	r3, [pc, #272]	; (7f2c <dir_next+0x1e0>)
    7e1a:	4798      	blx	r3
    7e1c:	0003      	movs	r3, r0
    7e1e:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    7e20:	68fb      	ldr	r3, [r7, #12]
    7e22:	2b00      	cmp	r3, #0
    7e24:	d101      	bne.n	7e2a <dir_next+0xde>
    7e26:	2307      	movs	r3, #7
    7e28:	e079      	b.n	7f1e <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
    7e2a:	68fb      	ldr	r3, [r7, #12]
    7e2c:	2b01      	cmp	r3, #1
    7e2e:	d101      	bne.n	7e34 <dir_next+0xe8>
    7e30:	2302      	movs	r3, #2
    7e32:	e074      	b.n	7f1e <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7e34:	68fb      	ldr	r3, [r7, #12]
    7e36:	3301      	adds	r3, #1
    7e38:	d101      	bne.n	7e3e <dir_next+0xf2>
    7e3a:	2301      	movs	r3, #1
    7e3c:	e06f      	b.n	7f1e <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    7e3e:	687b      	ldr	r3, [r7, #4]
    7e40:	681b      	ldr	r3, [r3, #0]
    7e42:	2100      	movs	r1, #0
    7e44:	0018      	movs	r0, r3
    7e46:	4b3a      	ldr	r3, [pc, #232]	; (7f30 <dir_next+0x1e4>)
    7e48:	4798      	blx	r3
    7e4a:	1e03      	subs	r3, r0, #0
    7e4c:	d001      	beq.n	7e52 <dir_next+0x106>
    7e4e:	2301      	movs	r3, #1
    7e50:	e065      	b.n	7f1e <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    7e52:	687b      	ldr	r3, [r7, #4]
    7e54:	681b      	ldr	r3, [r3, #0]
    7e56:	3330      	adds	r3, #48	; 0x30
    7e58:	0018      	movs	r0, r3
    7e5a:	2380      	movs	r3, #128	; 0x80
    7e5c:	009b      	lsls	r3, r3, #2
    7e5e:	001a      	movs	r2, r3
    7e60:	2100      	movs	r1, #0
    7e62:	4b34      	ldr	r3, [pc, #208]	; (7f34 <dir_next+0x1e8>)
    7e64:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    7e66:	687b      	ldr	r3, [r7, #4]
    7e68:	681c      	ldr	r4, [r3, #0]
    7e6a:	687b      	ldr	r3, [r7, #4]
    7e6c:	681b      	ldr	r3, [r3, #0]
    7e6e:	68fa      	ldr	r2, [r7, #12]
    7e70:	0011      	movs	r1, r2
    7e72:	0018      	movs	r0, r3
    7e74:	4b30      	ldr	r3, [pc, #192]	; (7f38 <dir_next+0x1ec>)
    7e76:	4798      	blx	r3
    7e78:	0003      	movs	r3, r0
    7e7a:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7e7c:	230b      	movs	r3, #11
    7e7e:	18fb      	adds	r3, r7, r3
    7e80:	2200      	movs	r2, #0
    7e82:	701a      	strb	r2, [r3, #0]
    7e84:	e019      	b.n	7eba <dir_next+0x16e>
						dj->fs->wflag = 1;
    7e86:	687b      	ldr	r3, [r7, #4]
    7e88:	681b      	ldr	r3, [r3, #0]
    7e8a:	2201      	movs	r2, #1
    7e8c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    7e8e:	687b      	ldr	r3, [r7, #4]
    7e90:	681b      	ldr	r3, [r3, #0]
    7e92:	2100      	movs	r1, #0
    7e94:	0018      	movs	r0, r3
    7e96:	4b26      	ldr	r3, [pc, #152]	; (7f30 <dir_next+0x1e4>)
    7e98:	4798      	blx	r3
    7e9a:	1e03      	subs	r3, r0, #0
    7e9c:	d001      	beq.n	7ea2 <dir_next+0x156>
    7e9e:	2301      	movs	r3, #1
    7ea0:	e03d      	b.n	7f1e <dir_next+0x1d2>
						dj->fs->winsect++;
    7ea2:	687b      	ldr	r3, [r7, #4]
    7ea4:	681b      	ldr	r3, [r3, #0]
    7ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7ea8:	3201      	adds	r2, #1
    7eaa:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7eac:	230b      	movs	r3, #11
    7eae:	18fb      	adds	r3, r7, r3
    7eb0:	781a      	ldrb	r2, [r3, #0]
    7eb2:	230b      	movs	r3, #11
    7eb4:	18fb      	adds	r3, r7, r3
    7eb6:	3201      	adds	r2, #1
    7eb8:	701a      	strb	r2, [r3, #0]
    7eba:	687b      	ldr	r3, [r7, #4]
    7ebc:	681b      	ldr	r3, [r3, #0]
    7ebe:	789b      	ldrb	r3, [r3, #2]
    7ec0:	220b      	movs	r2, #11
    7ec2:	18ba      	adds	r2, r7, r2
    7ec4:	7812      	ldrb	r2, [r2, #0]
    7ec6:	429a      	cmp	r2, r3
    7ec8:	d3dd      	bcc.n	7e86 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    7eca:	687b      	ldr	r3, [r7, #4]
    7ecc:	681b      	ldr	r3, [r3, #0]
    7ece:	687a      	ldr	r2, [r7, #4]
    7ed0:	6812      	ldr	r2, [r2, #0]
    7ed2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    7ed4:	220b      	movs	r2, #11
    7ed6:	18ba      	adds	r2, r7, r2
    7ed8:	7812      	ldrb	r2, [r2, #0]
    7eda:	1a8a      	subs	r2, r1, r2
    7edc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    7ede:	687b      	ldr	r3, [r7, #4]
    7ee0:	68fa      	ldr	r2, [r7, #12]
    7ee2:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
    7ee4:	687b      	ldr	r3, [r7, #4]
    7ee6:	681b      	ldr	r3, [r3, #0]
    7ee8:	68fa      	ldr	r2, [r7, #12]
    7eea:	0011      	movs	r1, r2
    7eec:	0018      	movs	r0, r3
    7eee:	4b12      	ldr	r3, [pc, #72]	; (7f38 <dir_next+0x1ec>)
    7ef0:	4798      	blx	r3
    7ef2:	0002      	movs	r2, r0
    7ef4:	687b      	ldr	r3, [r7, #4]
    7ef6:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
    7ef8:	687b      	ldr	r3, [r7, #4]
    7efa:	2208      	movs	r2, #8
    7efc:	18ba      	adds	r2, r7, r2
    7efe:	8812      	ldrh	r2, [r2, #0]
    7f00:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    7f02:	687b      	ldr	r3, [r7, #4]
    7f04:	681b      	ldr	r3, [r3, #0]
    7f06:	3330      	adds	r3, #48	; 0x30
    7f08:	001a      	movs	r2, r3
    7f0a:	2308      	movs	r3, #8
    7f0c:	18fb      	adds	r3, r7, r3
    7f0e:	881b      	ldrh	r3, [r3, #0]
    7f10:	210f      	movs	r1, #15
    7f12:	400b      	ands	r3, r1
    7f14:	015b      	lsls	r3, r3, #5
    7f16:	18d2      	adds	r2, r2, r3
    7f18:	687b      	ldr	r3, [r7, #4]
    7f1a:	615a      	str	r2, [r3, #20]

	return FR_OK;
    7f1c:	2300      	movs	r3, #0
}
    7f1e:	0018      	movs	r0, r3
    7f20:	46bd      	mov	sp, r7
    7f22:	b005      	add	sp, #20
    7f24:	bd90      	pop	{r4, r7, pc}
    7f26:	46c0      	nop			; (mov r8, r8)
    7f28:	00007671 	.word	0x00007671
    7f2c:	00007ae1 	.word	0x00007ae1
    7f30:	000073d9 	.word	0x000073d9
    7f34:	0000732d 	.word	0x0000732d
    7f38:	00007639 	.word	0x00007639

00007f3c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
    7f3c:	b590      	push	{r4, r7, lr}
    7f3e:	b087      	sub	sp, #28
    7f40:	af00      	add	r7, sp, #0
    7f42:	6078      	str	r0, [r7, #4]
    7f44:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    7f46:	683b      	ldr	r3, [r7, #0]
    7f48:	781b      	ldrb	r3, [r3, #0]
    7f4a:	001a      	movs	r2, r3
    7f4c:	2340      	movs	r3, #64	; 0x40
    7f4e:	439a      	bics	r2, r3
    7f50:	0013      	movs	r3, r2
    7f52:	1e5a      	subs	r2, r3, #1
    7f54:	0013      	movs	r3, r2
    7f56:	005b      	lsls	r3, r3, #1
    7f58:	189b      	adds	r3, r3, r2
    7f5a:	009b      	lsls	r3, r3, #2
    7f5c:	189b      	adds	r3, r3, r2
    7f5e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
    7f60:	2300      	movs	r3, #0
    7f62:	613b      	str	r3, [r7, #16]
    7f64:	230e      	movs	r3, #14
    7f66:	18fb      	adds	r3, r7, r3
    7f68:	2201      	movs	r2, #1
    7f6a:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    7f6c:	4a31      	ldr	r2, [pc, #196]	; (8034 <cmp_lfn+0xf8>)
    7f6e:	693b      	ldr	r3, [r7, #16]
    7f70:	18d3      	adds	r3, r2, r3
    7f72:	781b      	ldrb	r3, [r3, #0]
    7f74:	3301      	adds	r3, #1
    7f76:	683a      	ldr	r2, [r7, #0]
    7f78:	18d3      	adds	r3, r2, r3
    7f7a:	781b      	ldrb	r3, [r3, #0]
    7f7c:	021b      	lsls	r3, r3, #8
    7f7e:	b21a      	sxth	r2, r3
    7f80:	492c      	ldr	r1, [pc, #176]	; (8034 <cmp_lfn+0xf8>)
    7f82:	693b      	ldr	r3, [r7, #16]
    7f84:	18cb      	adds	r3, r1, r3
    7f86:	781b      	ldrb	r3, [r3, #0]
    7f88:	0019      	movs	r1, r3
    7f8a:	683b      	ldr	r3, [r7, #0]
    7f8c:	185b      	adds	r3, r3, r1
    7f8e:	781b      	ldrb	r3, [r3, #0]
    7f90:	b21b      	sxth	r3, r3
    7f92:	4313      	orrs	r3, r2
    7f94:	b21a      	sxth	r2, r3
    7f96:	230c      	movs	r3, #12
    7f98:	18fb      	adds	r3, r7, r3
    7f9a:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    7f9c:	230e      	movs	r3, #14
    7f9e:	18fb      	adds	r3, r7, r3
    7fa0:	881b      	ldrh	r3, [r3, #0]
    7fa2:	2b00      	cmp	r3, #0
    7fa4:	d01f      	beq.n	7fe6 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    7fa6:	230e      	movs	r3, #14
    7fa8:	18fc      	adds	r4, r7, r3
    7faa:	230c      	movs	r3, #12
    7fac:	18fb      	adds	r3, r7, r3
    7fae:	881b      	ldrh	r3, [r3, #0]
    7fb0:	0018      	movs	r0, r3
    7fb2:	4b21      	ldr	r3, [pc, #132]	; (8038 <cmp_lfn+0xfc>)
    7fb4:	4798      	blx	r3
    7fb6:	0003      	movs	r3, r0
    7fb8:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    7fba:	697b      	ldr	r3, [r7, #20]
    7fbc:	2bfe      	cmp	r3, #254	; 0xfe
    7fbe:	d810      	bhi.n	7fe2 <cmp_lfn+0xa6>
    7fc0:	697b      	ldr	r3, [r7, #20]
    7fc2:	1c5a      	adds	r2, r3, #1
    7fc4:	617a      	str	r2, [r7, #20]
    7fc6:	005b      	lsls	r3, r3, #1
    7fc8:	687a      	ldr	r2, [r7, #4]
    7fca:	18d3      	adds	r3, r2, r3
    7fcc:	881b      	ldrh	r3, [r3, #0]
    7fce:	0018      	movs	r0, r3
    7fd0:	4b19      	ldr	r3, [pc, #100]	; (8038 <cmp_lfn+0xfc>)
    7fd2:	4798      	blx	r3
    7fd4:	0003      	movs	r3, r0
    7fd6:	001a      	movs	r2, r3
    7fd8:	230e      	movs	r3, #14
    7fda:	18fb      	adds	r3, r7, r3
    7fdc:	881b      	ldrh	r3, [r3, #0]
    7fde:	4293      	cmp	r3, r2
    7fe0:	d009      	beq.n	7ff6 <cmp_lfn+0xba>
				return 0;				/* Not matched */
    7fe2:	2300      	movs	r3, #0
    7fe4:	e022      	b.n	802c <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
    7fe6:	230c      	movs	r3, #12
    7fe8:	18fb      	adds	r3, r7, r3
    7fea:	881b      	ldrh	r3, [r3, #0]
    7fec:	4a13      	ldr	r2, [pc, #76]	; (803c <cmp_lfn+0x100>)
    7fee:	4293      	cmp	r3, r2
    7ff0:	d001      	beq.n	7ff6 <cmp_lfn+0xba>
    7ff2:	2300      	movs	r3, #0
    7ff4:	e01a      	b.n	802c <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    7ff6:	693b      	ldr	r3, [r7, #16]
    7ff8:	3301      	adds	r3, #1
    7ffa:	613b      	str	r3, [r7, #16]
    7ffc:	693b      	ldr	r3, [r7, #16]
    7ffe:	2b0c      	cmp	r3, #12
    8000:	d9b4      	bls.n	7f6c <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    8002:	683b      	ldr	r3, [r7, #0]
    8004:	781b      	ldrb	r3, [r3, #0]
    8006:	001a      	movs	r2, r3
    8008:	2340      	movs	r3, #64	; 0x40
    800a:	4013      	ands	r3, r2
    800c:	d00d      	beq.n	802a <cmp_lfn+0xee>
    800e:	230e      	movs	r3, #14
    8010:	18fb      	adds	r3, r7, r3
    8012:	881b      	ldrh	r3, [r3, #0]
    8014:	2b00      	cmp	r3, #0
    8016:	d008      	beq.n	802a <cmp_lfn+0xee>
    8018:	697b      	ldr	r3, [r7, #20]
    801a:	005b      	lsls	r3, r3, #1
    801c:	687a      	ldr	r2, [r7, #4]
    801e:	18d3      	adds	r3, r2, r3
    8020:	881b      	ldrh	r3, [r3, #0]
    8022:	2b00      	cmp	r3, #0
    8024:	d001      	beq.n	802a <cmp_lfn+0xee>
		return 0;
    8026:	2300      	movs	r3, #0
    8028:	e000      	b.n	802c <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
    802a:	2301      	movs	r3, #1
}
    802c:	0018      	movs	r0, r3
    802e:	46bd      	mov	sp, r7
    8030:	b007      	add	sp, #28
    8032:	bd90      	pop	{r4, r7, pc}
    8034:	0000bfbc 	.word	0x0000bfbc
    8038:	0000a8f9 	.word	0x0000a8f9
    803c:	0000ffff 	.word	0x0000ffff

00008040 <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE *dir			/* Pointer to the directory entry */
)
{
    8040:	b580      	push	{r7, lr}
    8042:	b086      	sub	sp, #24
    8044:	af00      	add	r7, sp, #0
    8046:	6078      	str	r0, [r7, #4]
    8048:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    804a:	683b      	ldr	r3, [r7, #0]
    804c:	781b      	ldrb	r3, [r3, #0]
    804e:	001a      	movs	r2, r3
    8050:	233f      	movs	r3, #63	; 0x3f
    8052:	4013      	ands	r3, r2
    8054:	1e5a      	subs	r2, r3, #1
    8056:	0013      	movs	r3, r2
    8058:	005b      	lsls	r3, r3, #1
    805a:	189b      	adds	r3, r3, r2
    805c:	009b      	lsls	r3, r3, #2
    805e:	189b      	adds	r3, r3, r2
    8060:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
    8062:	2300      	movs	r3, #0
    8064:	613b      	str	r3, [r7, #16]
    8066:	230e      	movs	r3, #14
    8068:	18fb      	adds	r3, r7, r3
    806a:	2201      	movs	r2, #1
    806c:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    806e:	4a2b      	ldr	r2, [pc, #172]	; (811c <pick_lfn+0xdc>)
    8070:	693b      	ldr	r3, [r7, #16]
    8072:	18d3      	adds	r3, r2, r3
    8074:	781b      	ldrb	r3, [r3, #0]
    8076:	3301      	adds	r3, #1
    8078:	683a      	ldr	r2, [r7, #0]
    807a:	18d3      	adds	r3, r2, r3
    807c:	781b      	ldrb	r3, [r3, #0]
    807e:	021b      	lsls	r3, r3, #8
    8080:	b21a      	sxth	r2, r3
    8082:	4926      	ldr	r1, [pc, #152]	; (811c <pick_lfn+0xdc>)
    8084:	693b      	ldr	r3, [r7, #16]
    8086:	18cb      	adds	r3, r1, r3
    8088:	781b      	ldrb	r3, [r3, #0]
    808a:	0019      	movs	r1, r3
    808c:	683b      	ldr	r3, [r7, #0]
    808e:	185b      	adds	r3, r3, r1
    8090:	781b      	ldrb	r3, [r3, #0]
    8092:	b21b      	sxth	r3, r3
    8094:	4313      	orrs	r3, r2
    8096:	b21a      	sxth	r2, r3
    8098:	230c      	movs	r3, #12
    809a:	18fb      	adds	r3, r7, r3
    809c:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    809e:	230e      	movs	r3, #14
    80a0:	18fb      	adds	r3, r7, r3
    80a2:	881b      	ldrh	r3, [r3, #0]
    80a4:	2b00      	cmp	r3, #0
    80a6:	d015      	beq.n	80d4 <pick_lfn+0x94>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    80a8:	697b      	ldr	r3, [r7, #20]
    80aa:	2bfe      	cmp	r3, #254	; 0xfe
    80ac:	d901      	bls.n	80b2 <pick_lfn+0x72>
    80ae:	2300      	movs	r3, #0
    80b0:	e030      	b.n	8114 <pick_lfn+0xd4>
			lfnbuf[i++] = wc = uc;			/* Store it */
    80b2:	697b      	ldr	r3, [r7, #20]
    80b4:	1c5a      	adds	r2, r3, #1
    80b6:	617a      	str	r2, [r7, #20]
    80b8:	005b      	lsls	r3, r3, #1
    80ba:	687a      	ldr	r2, [r7, #4]
    80bc:	18d3      	adds	r3, r2, r3
    80be:	220e      	movs	r2, #14
    80c0:	18ba      	adds	r2, r7, r2
    80c2:	210c      	movs	r1, #12
    80c4:	1879      	adds	r1, r7, r1
    80c6:	8809      	ldrh	r1, [r1, #0]
    80c8:	8011      	strh	r1, [r2, #0]
    80ca:	220e      	movs	r2, #14
    80cc:	18ba      	adds	r2, r7, r2
    80ce:	8812      	ldrh	r2, [r2, #0]
    80d0:	801a      	strh	r2, [r3, #0]
    80d2:	e007      	b.n	80e4 <pick_lfn+0xa4>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
    80d4:	230c      	movs	r3, #12
    80d6:	18fb      	adds	r3, r7, r3
    80d8:	881b      	ldrh	r3, [r3, #0]
    80da:	4a11      	ldr	r2, [pc, #68]	; (8120 <pick_lfn+0xe0>)
    80dc:	4293      	cmp	r3, r2
    80de:	d001      	beq.n	80e4 <pick_lfn+0xa4>
    80e0:	2300      	movs	r3, #0
    80e2:	e017      	b.n	8114 <pick_lfn+0xd4>
		}
	} while (++s < 13);						/* Read all character in the entry */
    80e4:	693b      	ldr	r3, [r7, #16]
    80e6:	3301      	adds	r3, #1
    80e8:	613b      	str	r3, [r7, #16]
    80ea:	693b      	ldr	r3, [r7, #16]
    80ec:	2b0c      	cmp	r3, #12
    80ee:	d9be      	bls.n	806e <pick_lfn+0x2e>

	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
    80f0:	683b      	ldr	r3, [r7, #0]
    80f2:	781b      	ldrb	r3, [r3, #0]
    80f4:	001a      	movs	r2, r3
    80f6:	2340      	movs	r3, #64	; 0x40
    80f8:	4013      	ands	r3, r2
    80fa:	d00a      	beq.n	8112 <pick_lfn+0xd2>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
    80fc:	697b      	ldr	r3, [r7, #20]
    80fe:	2bfe      	cmp	r3, #254	; 0xfe
    8100:	d901      	bls.n	8106 <pick_lfn+0xc6>
    8102:	2300      	movs	r3, #0
    8104:	e006      	b.n	8114 <pick_lfn+0xd4>
		lfnbuf[i] = 0;
    8106:	697b      	ldr	r3, [r7, #20]
    8108:	005b      	lsls	r3, r3, #1
    810a:	687a      	ldr	r2, [r7, #4]
    810c:	18d3      	adds	r3, r2, r3
    810e:	2200      	movs	r2, #0
    8110:	801a      	strh	r2, [r3, #0]
	}

	return 1;
    8112:	2301      	movs	r3, #1
}
    8114:	0018      	movs	r0, r3
    8116:	46bd      	mov	sp, r7
    8118:	b006      	add	sp, #24
    811a:	bd80      	pop	{r7, pc}
    811c:	0000bfbc 	.word	0x0000bfbc
    8120:	0000ffff 	.word	0x0000ffff

00008124 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
    8124:	b580      	push	{r7, lr}
    8126:	b088      	sub	sp, #32
    8128:	af00      	add	r7, sp, #0
    812a:	60f8      	str	r0, [r7, #12]
    812c:	60b9      	str	r1, [r7, #8]
    812e:	0019      	movs	r1, r3
    8130:	1dfb      	adds	r3, r7, #7
    8132:	701a      	strb	r2, [r3, #0]
    8134:	1dbb      	adds	r3, r7, #6
    8136:	1c0a      	adds	r2, r1, #0
    8138:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
    813a:	68bb      	ldr	r3, [r7, #8]
    813c:	330d      	adds	r3, #13
    813e:	1dba      	adds	r2, r7, #6
    8140:	7812      	ldrb	r2, [r2, #0]
    8142:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    8144:	68bb      	ldr	r3, [r7, #8]
    8146:	330b      	adds	r3, #11
    8148:	220f      	movs	r2, #15
    814a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
    814c:	68bb      	ldr	r3, [r7, #8]
    814e:	330c      	adds	r3, #12
    8150:	2200      	movs	r2, #0
    8152:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    8154:	68bb      	ldr	r3, [r7, #8]
    8156:	331a      	adds	r3, #26
    8158:	2200      	movs	r2, #0
    815a:	701a      	strb	r2, [r3, #0]
    815c:	68bb      	ldr	r3, [r7, #8]
    815e:	331b      	adds	r3, #27
    8160:	2200      	movs	r2, #0
    8162:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    8164:	1dfb      	adds	r3, r7, #7
    8166:	781b      	ldrb	r3, [r3, #0]
    8168:	1e5a      	subs	r2, r3, #1
    816a:	0013      	movs	r3, r2
    816c:	005b      	lsls	r3, r3, #1
    816e:	189b      	adds	r3, r3, r2
    8170:	009b      	lsls	r3, r3, #2
    8172:	189b      	adds	r3, r3, r2
    8174:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
    8176:	2316      	movs	r3, #22
    8178:	18fb      	adds	r3, r7, r3
    817a:	2200      	movs	r2, #0
    817c:	801a      	strh	r2, [r3, #0]
    817e:	2300      	movs	r3, #0
    8180:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    8182:	2316      	movs	r3, #22
    8184:	18fb      	adds	r3, r7, r3
    8186:	881b      	ldrh	r3, [r3, #0]
    8188:	4a28      	ldr	r2, [pc, #160]	; (822c <fit_lfn+0x108>)
    818a:	4293      	cmp	r3, r2
    818c:	d009      	beq.n	81a2 <fit_lfn+0x7e>
    818e:	69fb      	ldr	r3, [r7, #28]
    8190:	1c5a      	adds	r2, r3, #1
    8192:	61fa      	str	r2, [r7, #28]
    8194:	005b      	lsls	r3, r3, #1
    8196:	68fa      	ldr	r2, [r7, #12]
    8198:	18d2      	adds	r2, r2, r3
    819a:	2316      	movs	r3, #22
    819c:	18fb      	adds	r3, r7, r3
    819e:	8812      	ldrh	r2, [r2, #0]
    81a0:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    81a2:	4a23      	ldr	r2, [pc, #140]	; (8230 <fit_lfn+0x10c>)
    81a4:	69bb      	ldr	r3, [r7, #24]
    81a6:	18d3      	adds	r3, r2, r3
    81a8:	781b      	ldrb	r3, [r3, #0]
    81aa:	001a      	movs	r2, r3
    81ac:	68bb      	ldr	r3, [r7, #8]
    81ae:	189b      	adds	r3, r3, r2
    81b0:	2216      	movs	r2, #22
    81b2:	18ba      	adds	r2, r7, r2
    81b4:	8812      	ldrh	r2, [r2, #0]
    81b6:	b2d2      	uxtb	r2, r2
    81b8:	701a      	strb	r2, [r3, #0]
    81ba:	4a1d      	ldr	r2, [pc, #116]	; (8230 <fit_lfn+0x10c>)
    81bc:	69bb      	ldr	r3, [r7, #24]
    81be:	18d3      	adds	r3, r2, r3
    81c0:	781b      	ldrb	r3, [r3, #0]
    81c2:	3301      	adds	r3, #1
    81c4:	68ba      	ldr	r2, [r7, #8]
    81c6:	18d3      	adds	r3, r2, r3
    81c8:	2216      	movs	r2, #22
    81ca:	18ba      	adds	r2, r7, r2
    81cc:	8812      	ldrh	r2, [r2, #0]
    81ce:	0a12      	lsrs	r2, r2, #8
    81d0:	b292      	uxth	r2, r2
    81d2:	b2d2      	uxtb	r2, r2
    81d4:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    81d6:	2316      	movs	r3, #22
    81d8:	18fb      	adds	r3, r7, r3
    81da:	881b      	ldrh	r3, [r3, #0]
    81dc:	2b00      	cmp	r3, #0
    81de:	d104      	bne.n	81ea <fit_lfn+0xc6>
    81e0:	2316      	movs	r3, #22
    81e2:	18fb      	adds	r3, r7, r3
    81e4:	2201      	movs	r2, #1
    81e6:	4252      	negs	r2, r2
    81e8:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
    81ea:	69bb      	ldr	r3, [r7, #24]
    81ec:	3301      	adds	r3, #1
    81ee:	61bb      	str	r3, [r7, #24]
    81f0:	69bb      	ldr	r3, [r7, #24]
    81f2:	2b0c      	cmp	r3, #12
    81f4:	d9c5      	bls.n	8182 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    81f6:	2316      	movs	r3, #22
    81f8:	18fb      	adds	r3, r7, r3
    81fa:	881b      	ldrh	r3, [r3, #0]
    81fc:	4a0b      	ldr	r2, [pc, #44]	; (822c <fit_lfn+0x108>)
    81fe:	4293      	cmp	r3, r2
    8200:	d006      	beq.n	8210 <fit_lfn+0xec>
    8202:	69fb      	ldr	r3, [r7, #28]
    8204:	005b      	lsls	r3, r3, #1
    8206:	68fa      	ldr	r2, [r7, #12]
    8208:	18d3      	adds	r3, r2, r3
    820a:	881b      	ldrh	r3, [r3, #0]
    820c:	2b00      	cmp	r3, #0
    820e:	d105      	bne.n	821c <fit_lfn+0xf8>
    8210:	1dfb      	adds	r3, r7, #7
    8212:	1dfa      	adds	r2, r7, #7
    8214:	7812      	ldrb	r2, [r2, #0]
    8216:	2140      	movs	r1, #64	; 0x40
    8218:	430a      	orrs	r2, r1
    821a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    821c:	68bb      	ldr	r3, [r7, #8]
    821e:	1dfa      	adds	r2, r7, #7
    8220:	7812      	ldrb	r2, [r2, #0]
    8222:	701a      	strb	r2, [r3, #0]
}
    8224:	46c0      	nop			; (mov r8, r8)
    8226:	46bd      	mov	sp, r7
    8228:	b008      	add	sp, #32
    822a:	bd80      	pop	{r7, pc}
    822c:	0000ffff 	.word	0x0000ffff
    8230:	0000bfbc 	.word	0x0000bfbc

00008234 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
    8234:	b580      	push	{r7, lr}
    8236:	b08a      	sub	sp, #40	; 0x28
    8238:	af00      	add	r7, sp, #0
    823a:	60f8      	str	r0, [r7, #12]
    823c:	60b9      	str	r1, [r7, #8]
    823e:	607a      	str	r2, [r7, #4]
    8240:	001a      	movs	r2, r3
    8242:	1cbb      	adds	r3, r7, #2
    8244:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
    8246:	68b9      	ldr	r1, [r7, #8]
    8248:	68fb      	ldr	r3, [r7, #12]
    824a:	220b      	movs	r2, #11
    824c:	0018      	movs	r0, r3
    824e:	4b38      	ldr	r3, [pc, #224]	; (8330 <gen_numname+0xfc>)
    8250:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    8252:	1cbb      	adds	r3, r7, #2
    8254:	881b      	ldrh	r3, [r3, #0]
    8256:	2b05      	cmp	r3, #5
    8258:	d911      	bls.n	827e <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    825a:	1cbb      	adds	r3, r7, #2
    825c:	881b      	ldrh	r3, [r3, #0]
    825e:	b29a      	uxth	r2, r3
    8260:	0852      	lsrs	r2, r2, #1
    8262:	03db      	lsls	r3, r3, #15
    8264:	4313      	orrs	r3, r2
    8266:	b299      	uxth	r1, r3
    8268:	687b      	ldr	r3, [r7, #4]
    826a:	1c9a      	adds	r2, r3, #2
    826c:	607a      	str	r2, [r7, #4]
    826e:	881a      	ldrh	r2, [r3, #0]
    8270:	1cbb      	adds	r3, r7, #2
    8272:	188a      	adds	r2, r1, r2
    8274:	801a      	strh	r2, [r3, #0]
    8276:	687b      	ldr	r3, [r7, #4]
    8278:	881b      	ldrh	r3, [r3, #0]
    827a:	2b00      	cmp	r3, #0
    827c:	d1ed      	bne.n	825a <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
    827e:	2307      	movs	r3, #7
    8280:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
    8282:	1cbb      	adds	r3, r7, #2
    8284:	881b      	ldrh	r3, [r3, #0]
    8286:	b2db      	uxtb	r3, r3
    8288:	220f      	movs	r2, #15
    828a:	4013      	ands	r3, r2
    828c:	b2da      	uxtb	r2, r3
    828e:	2327      	movs	r3, #39	; 0x27
    8290:	18fb      	adds	r3, r7, r3
    8292:	3230      	adds	r2, #48	; 0x30
    8294:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
    8296:	2327      	movs	r3, #39	; 0x27
    8298:	18fb      	adds	r3, r7, r3
    829a:	781b      	ldrb	r3, [r3, #0]
    829c:	2b39      	cmp	r3, #57	; 0x39
    829e:	d906      	bls.n	82ae <gen_numname+0x7a>
    82a0:	2327      	movs	r3, #39	; 0x27
    82a2:	18fb      	adds	r3, r7, r3
    82a4:	2227      	movs	r2, #39	; 0x27
    82a6:	18ba      	adds	r2, r7, r2
    82a8:	7812      	ldrb	r2, [r2, #0]
    82aa:	3207      	adds	r2, #7
    82ac:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
    82ae:	6a3b      	ldr	r3, [r7, #32]
    82b0:	1e5a      	subs	r2, r3, #1
    82b2:	623a      	str	r2, [r7, #32]
    82b4:	2214      	movs	r2, #20
    82b6:	18ba      	adds	r2, r7, r2
    82b8:	2127      	movs	r1, #39	; 0x27
    82ba:	1879      	adds	r1, r7, r1
    82bc:	7809      	ldrb	r1, [r1, #0]
    82be:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
    82c0:	1cbb      	adds	r3, r7, #2
    82c2:	1cba      	adds	r2, r7, #2
    82c4:	8812      	ldrh	r2, [r2, #0]
    82c6:	0912      	lsrs	r2, r2, #4
    82c8:	801a      	strh	r2, [r3, #0]
	} while (seq);
    82ca:	1cbb      	adds	r3, r7, #2
    82cc:	881b      	ldrh	r3, [r3, #0]
    82ce:	2b00      	cmp	r3, #0
    82d0:	d1d7      	bne.n	8282 <gen_numname+0x4e>
	ns[i] = '~';
    82d2:	2314      	movs	r3, #20
    82d4:	18fa      	adds	r2, r7, r3
    82d6:	6a3b      	ldr	r3, [r7, #32]
    82d8:	18d3      	adds	r3, r2, r3
    82da:	227e      	movs	r2, #126	; 0x7e
    82dc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    82de:	2300      	movs	r3, #0
    82e0:	61fb      	str	r3, [r7, #28]
    82e2:	e002      	b.n	82ea <gen_numname+0xb6>
    82e4:	69fb      	ldr	r3, [r7, #28]
    82e6:	3301      	adds	r3, #1
    82e8:	61fb      	str	r3, [r7, #28]
    82ea:	69fa      	ldr	r2, [r7, #28]
    82ec:	6a3b      	ldr	r3, [r7, #32]
    82ee:	429a      	cmp	r2, r3
    82f0:	d205      	bcs.n	82fe <gen_numname+0xca>
    82f2:	68fa      	ldr	r2, [r7, #12]
    82f4:	69fb      	ldr	r3, [r7, #28]
    82f6:	18d3      	adds	r3, r2, r3
    82f8:	781b      	ldrb	r3, [r3, #0]
    82fa:	2b20      	cmp	r3, #32
    82fc:	d1f2      	bne.n	82e4 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    82fe:	69fb      	ldr	r3, [r7, #28]
    8300:	1c5a      	adds	r2, r3, #1
    8302:	61fa      	str	r2, [r7, #28]
    8304:	68fa      	ldr	r2, [r7, #12]
    8306:	18d2      	adds	r2, r2, r3
    8308:	6a3b      	ldr	r3, [r7, #32]
    830a:	2b07      	cmp	r3, #7
    830c:	d806      	bhi.n	831c <gen_numname+0xe8>
    830e:	6a3b      	ldr	r3, [r7, #32]
    8310:	1c59      	adds	r1, r3, #1
    8312:	6239      	str	r1, [r7, #32]
    8314:	2114      	movs	r1, #20
    8316:	1879      	adds	r1, r7, r1
    8318:	5ccb      	ldrb	r3, [r1, r3]
    831a:	e000      	b.n	831e <gen_numname+0xea>
    831c:	2320      	movs	r3, #32
    831e:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    8320:	69fb      	ldr	r3, [r7, #28]
    8322:	2b07      	cmp	r3, #7
    8324:	d9eb      	bls.n	82fe <gen_numname+0xca>
}
    8326:	46c0      	nop			; (mov r8, r8)
    8328:	46bd      	mov	sp, r7
    832a:	b00a      	add	sp, #40	; 0x28
    832c:	bd80      	pop	{r7, pc}
    832e:	46c0      	nop			; (mov r8, r8)
    8330:	000072f5 	.word	0x000072f5

00008334 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    8334:	b580      	push	{r7, lr}
    8336:	b084      	sub	sp, #16
    8338:	af00      	add	r7, sp, #0
    833a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
    833c:	230f      	movs	r3, #15
    833e:	18fb      	adds	r3, r7, r3
    8340:	2200      	movs	r2, #0
    8342:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
    8344:	230b      	movs	r3, #11
    8346:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    8348:	230f      	movs	r3, #15
    834a:	18fb      	adds	r3, r7, r3
    834c:	781b      	ldrb	r3, [r3, #0]
    834e:	b2da      	uxtb	r2, r3
    8350:	0852      	lsrs	r2, r2, #1
    8352:	01db      	lsls	r3, r3, #7
    8354:	4313      	orrs	r3, r2
    8356:	b2d9      	uxtb	r1, r3
    8358:	687b      	ldr	r3, [r7, #4]
    835a:	1c5a      	adds	r2, r3, #1
    835c:	607a      	str	r2, [r7, #4]
    835e:	781a      	ldrb	r2, [r3, #0]
    8360:	230f      	movs	r3, #15
    8362:	18fb      	adds	r3, r7, r3
    8364:	188a      	adds	r2, r1, r2
    8366:	701a      	strb	r2, [r3, #0]
    8368:	68bb      	ldr	r3, [r7, #8]
    836a:	3b01      	subs	r3, #1
    836c:	60bb      	str	r3, [r7, #8]
    836e:	68bb      	ldr	r3, [r7, #8]
    8370:	2b00      	cmp	r3, #0
    8372:	d1e9      	bne.n	8348 <sum_sfn+0x14>
	return sum;
    8374:	230f      	movs	r3, #15
    8376:	18fb      	adds	r3, r7, r3
    8378:	781b      	ldrb	r3, [r3, #0]
}
    837a:	0018      	movs	r0, r3
    837c:	46bd      	mov	sp, r7
    837e:	b004      	add	sp, #16
    8380:	bd80      	pop	{r7, pc}
	...

00008384 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    8384:	b590      	push	{r4, r7, lr}
    8386:	b087      	sub	sp, #28
    8388:	af00      	add	r7, sp, #0
    838a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    838c:	2317      	movs	r3, #23
    838e:	18fc      	adds	r4, r7, r3
    8390:	687b      	ldr	r3, [r7, #4]
    8392:	2100      	movs	r1, #0
    8394:	0018      	movs	r0, r3
    8396:	4b74      	ldr	r3, [pc, #464]	; (8568 <dir_find+0x1e4>)
    8398:	4798      	blx	r3
    839a:	0003      	movs	r3, r0
    839c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    839e:	2317      	movs	r3, #23
    83a0:	18fb      	adds	r3, r7, r3
    83a2:	781b      	ldrb	r3, [r3, #0]
    83a4:	2b00      	cmp	r3, #0
    83a6:	d003      	beq.n	83b0 <dir_find+0x2c>
    83a8:	2317      	movs	r3, #23
    83aa:	18fb      	adds	r3, r7, r3
    83ac:	781b      	ldrb	r3, [r3, #0]
    83ae:	e0d6      	b.n	855e <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
    83b0:	2314      	movs	r3, #20
    83b2:	18fb      	adds	r3, r7, r3
    83b4:	22ff      	movs	r2, #255	; 0xff
    83b6:	701a      	strb	r2, [r3, #0]
    83b8:	2315      	movs	r3, #21
    83ba:	18fb      	adds	r3, r7, r3
    83bc:	2214      	movs	r2, #20
    83be:	18ba      	adds	r2, r7, r2
    83c0:	7812      	ldrb	r2, [r2, #0]
    83c2:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    83c4:	687b      	ldr	r3, [r7, #4]
    83c6:	681a      	ldr	r2, [r3, #0]
    83c8:	687b      	ldr	r3, [r7, #4]
    83ca:	691b      	ldr	r3, [r3, #16]
    83cc:	2117      	movs	r1, #23
    83ce:	187c      	adds	r4, r7, r1
    83d0:	0019      	movs	r1, r3
    83d2:	0010      	movs	r0, r2
    83d4:	4b65      	ldr	r3, [pc, #404]	; (856c <dir_find+0x1e8>)
    83d6:	4798      	blx	r3
    83d8:	0003      	movs	r3, r0
    83da:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    83dc:	2317      	movs	r3, #23
    83de:	18fb      	adds	r3, r7, r3
    83e0:	781b      	ldrb	r3, [r3, #0]
    83e2:	2b00      	cmp	r3, #0
    83e4:	d000      	beq.n	83e8 <dir_find+0x64>
    83e6:	e0b2      	b.n	854e <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    83e8:	687b      	ldr	r3, [r7, #4]
    83ea:	695b      	ldr	r3, [r3, #20]
    83ec:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    83ee:	2316      	movs	r3, #22
    83f0:	18fb      	adds	r3, r7, r3
    83f2:	693a      	ldr	r2, [r7, #16]
    83f4:	7812      	ldrb	r2, [r2, #0]
    83f6:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    83f8:	2316      	movs	r3, #22
    83fa:	18fb      	adds	r3, r7, r3
    83fc:	781b      	ldrb	r3, [r3, #0]
    83fe:	2b00      	cmp	r3, #0
    8400:	d104      	bne.n	840c <dir_find+0x88>
    8402:	2317      	movs	r3, #23
    8404:	18fb      	adds	r3, r7, r3
    8406:	2204      	movs	r2, #4
    8408:	701a      	strb	r2, [r3, #0]
    840a:	e0a5      	b.n	8558 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    840c:	693b      	ldr	r3, [r7, #16]
    840e:	330b      	adds	r3, #11
    8410:	781a      	ldrb	r2, [r3, #0]
    8412:	230f      	movs	r3, #15
    8414:	18fb      	adds	r3, r7, r3
    8416:	213f      	movs	r1, #63	; 0x3f
    8418:	400a      	ands	r2, r1
    841a:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    841c:	2316      	movs	r3, #22
    841e:	18fb      	adds	r3, r7, r3
    8420:	781b      	ldrb	r3, [r3, #0]
    8422:	2be5      	cmp	r3, #229	; 0xe5
    8424:	d00a      	beq.n	843c <dir_find+0xb8>
    8426:	230f      	movs	r3, #15
    8428:	18fb      	adds	r3, r7, r3
    842a:	781b      	ldrb	r3, [r3, #0]
    842c:	2208      	movs	r2, #8
    842e:	4013      	ands	r3, r2
    8430:	d009      	beq.n	8446 <dir_find+0xc2>
    8432:	230f      	movs	r3, #15
    8434:	18fb      	adds	r3, r7, r3
    8436:	781b      	ldrb	r3, [r3, #0]
    8438:	2b0f      	cmp	r3, #15
    843a:	d004      	beq.n	8446 <dir_find+0xc2>
			ord = 0xFF;
    843c:	2315      	movs	r3, #21
    843e:	18fb      	adds	r3, r7, r3
    8440:	22ff      	movs	r2, #255	; 0xff
    8442:	701a      	strb	r2, [r3, #0]
    8444:	e073      	b.n	852e <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    8446:	230f      	movs	r3, #15
    8448:	18fb      	adds	r3, r7, r3
    844a:	781b      	ldrb	r3, [r3, #0]
    844c:	2b0f      	cmp	r3, #15
    844e:	d145      	bne.n	84dc <dir_find+0x158>
				if (dj->lfn) {
    8450:	687b      	ldr	r3, [r7, #4]
    8452:	69db      	ldr	r3, [r3, #28]
    8454:	2b00      	cmp	r3, #0
    8456:	d100      	bne.n	845a <dir_find+0xd6>
    8458:	e069      	b.n	852e <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    845a:	2316      	movs	r3, #22
    845c:	18fb      	adds	r3, r7, r3
    845e:	781b      	ldrb	r3, [r3, #0]
    8460:	2240      	movs	r2, #64	; 0x40
    8462:	4013      	ands	r3, r2
    8464:	d016      	beq.n	8494 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
    8466:	2314      	movs	r3, #20
    8468:	18fb      	adds	r3, r7, r3
    846a:	693a      	ldr	r2, [r7, #16]
    846c:	7b52      	ldrb	r2, [r2, #13]
    846e:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
    8470:	2316      	movs	r3, #22
    8472:	18fb      	adds	r3, r7, r3
    8474:	2216      	movs	r2, #22
    8476:	18ba      	adds	r2, r7, r2
    8478:	7812      	ldrb	r2, [r2, #0]
    847a:	2140      	movs	r1, #64	; 0x40
    847c:	438a      	bics	r2, r1
    847e:	701a      	strb	r2, [r3, #0]
    8480:	2315      	movs	r3, #21
    8482:	18fb      	adds	r3, r7, r3
    8484:	2216      	movs	r2, #22
    8486:	18ba      	adds	r2, r7, r2
    8488:	7812      	ldrb	r2, [r2, #0]
    848a:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
    848c:	687b      	ldr	r3, [r7, #4]
    848e:	88da      	ldrh	r2, [r3, #6]
    8490:	687b      	ldr	r3, [r7, #4]
    8492:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    8494:	2316      	movs	r3, #22
    8496:	18fa      	adds	r2, r7, r3
    8498:	2315      	movs	r3, #21
    849a:	18fb      	adds	r3, r7, r3
    849c:	7812      	ldrb	r2, [r2, #0]
    849e:	781b      	ldrb	r3, [r3, #0]
    84a0:	429a      	cmp	r2, r3
    84a2:	d116      	bne.n	84d2 <dir_find+0x14e>
    84a4:	693b      	ldr	r3, [r7, #16]
    84a6:	330d      	adds	r3, #13
    84a8:	781b      	ldrb	r3, [r3, #0]
    84aa:	2214      	movs	r2, #20
    84ac:	18ba      	adds	r2, r7, r2
    84ae:	7812      	ldrb	r2, [r2, #0]
    84b0:	429a      	cmp	r2, r3
    84b2:	d10e      	bne.n	84d2 <dir_find+0x14e>
    84b4:	687b      	ldr	r3, [r7, #4]
    84b6:	69db      	ldr	r3, [r3, #28]
    84b8:	693a      	ldr	r2, [r7, #16]
    84ba:	0011      	movs	r1, r2
    84bc:	0018      	movs	r0, r3
    84be:	4b2c      	ldr	r3, [pc, #176]	; (8570 <dir_find+0x1ec>)
    84c0:	4798      	blx	r3
    84c2:	1e03      	subs	r3, r0, #0
    84c4:	d005      	beq.n	84d2 <dir_find+0x14e>
    84c6:	2315      	movs	r3, #21
    84c8:	18fb      	adds	r3, r7, r3
    84ca:	781b      	ldrb	r3, [r3, #0]
    84cc:	3b01      	subs	r3, #1
    84ce:	b2da      	uxtb	r2, r3
    84d0:	e000      	b.n	84d4 <dir_find+0x150>
    84d2:	22ff      	movs	r2, #255	; 0xff
    84d4:	2315      	movs	r3, #21
    84d6:	18fb      	adds	r3, r7, r3
    84d8:	701a      	strb	r2, [r3, #0]
    84da:	e028      	b.n	852e <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    84dc:	2315      	movs	r3, #21
    84de:	18fb      	adds	r3, r7, r3
    84e0:	781b      	ldrb	r3, [r3, #0]
    84e2:	2b00      	cmp	r3, #0
    84e4:	d10a      	bne.n	84fc <dir_find+0x178>
    84e6:	693b      	ldr	r3, [r7, #16]
    84e8:	0018      	movs	r0, r3
    84ea:	4b22      	ldr	r3, [pc, #136]	; (8574 <dir_find+0x1f0>)
    84ec:	4798      	blx	r3
    84ee:	0003      	movs	r3, r0
    84f0:	001a      	movs	r2, r3
    84f2:	2314      	movs	r3, #20
    84f4:	18fb      	adds	r3, r7, r3
    84f6:	781b      	ldrb	r3, [r3, #0]
    84f8:	4293      	cmp	r3, r2
    84fa:	d02a      	beq.n	8552 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    84fc:	2315      	movs	r3, #21
    84fe:	18fb      	adds	r3, r7, r3
    8500:	22ff      	movs	r2, #255	; 0xff
    8502:	701a      	strb	r2, [r3, #0]
    8504:	687b      	ldr	r3, [r7, #4]
    8506:	2201      	movs	r2, #1
    8508:	4252      	negs	r2, r2
    850a:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    850c:	687b      	ldr	r3, [r7, #4]
    850e:	699b      	ldr	r3, [r3, #24]
    8510:	330b      	adds	r3, #11
    8512:	781b      	ldrb	r3, [r3, #0]
    8514:	001a      	movs	r2, r3
    8516:	2301      	movs	r3, #1
    8518:	4013      	ands	r3, r2
    851a:	d108      	bne.n	852e <dir_find+0x1aa>
    851c:	687b      	ldr	r3, [r7, #4]
    851e:	6999      	ldr	r1, [r3, #24]
    8520:	693b      	ldr	r3, [r7, #16]
    8522:	220b      	movs	r2, #11
    8524:	0018      	movs	r0, r3
    8526:	4b14      	ldr	r3, [pc, #80]	; (8578 <dir_find+0x1f4>)
    8528:	4798      	blx	r3
    852a:	1e03      	subs	r3, r0, #0
    852c:	d013      	beq.n	8556 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    852e:	2317      	movs	r3, #23
    8530:	18fc      	adds	r4, r7, r3
    8532:	687b      	ldr	r3, [r7, #4]
    8534:	2100      	movs	r1, #0
    8536:	0018      	movs	r0, r3
    8538:	4b10      	ldr	r3, [pc, #64]	; (857c <dir_find+0x1f8>)
    853a:	4798      	blx	r3
    853c:	0003      	movs	r3, r0
    853e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    8540:	2317      	movs	r3, #23
    8542:	18fb      	adds	r3, r7, r3
    8544:	781b      	ldrb	r3, [r3, #0]
    8546:	2b00      	cmp	r3, #0
    8548:	d100      	bne.n	854c <dir_find+0x1c8>
    854a:	e73b      	b.n	83c4 <dir_find+0x40>
    854c:	e004      	b.n	8558 <dir_find+0x1d4>
		if (res != FR_OK) break;
    854e:	46c0      	nop			; (mov r8, r8)
    8550:	e002      	b.n	8558 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    8552:	46c0      	nop			; (mov r8, r8)
    8554:	e000      	b.n	8558 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    8556:	46c0      	nop			; (mov r8, r8)

	return res;
    8558:	2317      	movs	r3, #23
    855a:	18fb      	adds	r3, r7, r3
    855c:	781b      	ldrb	r3, [r3, #0]
}
    855e:	0018      	movs	r0, r3
    8560:	46bd      	mov	sp, r7
    8562:	b007      	add	sp, #28
    8564:	bd90      	pop	{r4, r7, pc}
    8566:	46c0      	nop			; (mov r8, r8)
    8568:	00007c1d 	.word	0x00007c1d
    856c:	000073d9 	.word	0x000073d9
    8570:	00007f3d 	.word	0x00007f3d
    8574:	00008335 	.word	0x00008335
    8578:	0000735d 	.word	0x0000735d
    857c:	00007d4d 	.word	0x00007d4d

00008580 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    8580:	b590      	push	{r4, r7, lr}
    8582:	b087      	sub	sp, #28
    8584:	af00      	add	r7, sp, #0
    8586:	6078      	str	r0, [r7, #4]
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
    8588:	2315      	movs	r3, #21
    858a:	18fb      	adds	r3, r7, r3
    858c:	22ff      	movs	r2, #255	; 0xff
    858e:	701a      	strb	r2, [r3, #0]
    8590:	2314      	movs	r3, #20
    8592:	18fb      	adds	r3, r7, r3
    8594:	22ff      	movs	r2, #255	; 0xff
    8596:	701a      	strb	r2, [r3, #0]
#endif

	res = FR_NO_FILE;
    8598:	2317      	movs	r3, #23
    859a:	18fb      	adds	r3, r7, r3
    859c:	2204      	movs	r2, #4
    859e:	701a      	strb	r2, [r3, #0]
	while (dj->sect) {
    85a0:	e0ae      	b.n	8700 <dir_read+0x180>
		res = move_window(dj->fs, dj->sect);
    85a2:	687b      	ldr	r3, [r7, #4]
    85a4:	681a      	ldr	r2, [r3, #0]
    85a6:	687b      	ldr	r3, [r7, #4]
    85a8:	691b      	ldr	r3, [r3, #16]
    85aa:	2117      	movs	r1, #23
    85ac:	187c      	adds	r4, r7, r1
    85ae:	0019      	movs	r1, r3
    85b0:	0010      	movs	r0, r2
    85b2:	4b60      	ldr	r3, [pc, #384]	; (8734 <dir_read+0x1b4>)
    85b4:	4798      	blx	r3
    85b6:	0003      	movs	r3, r0
    85b8:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    85ba:	2317      	movs	r3, #23
    85bc:	18fb      	adds	r3, r7, r3
    85be:	781b      	ldrb	r3, [r3, #0]
    85c0:	2b00      	cmp	r3, #0
    85c2:	d000      	beq.n	85c6 <dir_read+0x46>
    85c4:	e0a2      	b.n	870c <dir_read+0x18c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    85c6:	687b      	ldr	r3, [r7, #4]
    85c8:	695b      	ldr	r3, [r3, #20]
    85ca:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    85cc:	2316      	movs	r3, #22
    85ce:	18fb      	adds	r3, r7, r3
    85d0:	693a      	ldr	r2, [r7, #16]
    85d2:	7812      	ldrb	r2, [r2, #0]
    85d4:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    85d6:	2316      	movs	r3, #22
    85d8:	18fb      	adds	r3, r7, r3
    85da:	781b      	ldrb	r3, [r3, #0]
    85dc:	2b00      	cmp	r3, #0
    85de:	d104      	bne.n	85ea <dir_read+0x6a>
    85e0:	2317      	movs	r3, #23
    85e2:	18fb      	adds	r3, r7, r3
    85e4:	2204      	movs	r2, #4
    85e6:	701a      	strb	r2, [r3, #0]
    85e8:	e095      	b.n	8716 <dir_read+0x196>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    85ea:	693b      	ldr	r3, [r7, #16]
    85ec:	330b      	adds	r3, #11
    85ee:	781a      	ldrb	r2, [r3, #0]
    85f0:	230f      	movs	r3, #15
    85f2:	18fb      	adds	r3, r7, r3
    85f4:	213f      	movs	r1, #63	; 0x3f
    85f6:	400a      	ands	r2, r1
    85f8:	701a      	strb	r2, [r3, #0]
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    85fa:	2316      	movs	r3, #22
    85fc:	18fb      	adds	r3, r7, r3
    85fe:	781b      	ldrb	r3, [r3, #0]
    8600:	2be5      	cmp	r3, #229	; 0xe5
    8602:	d00f      	beq.n	8624 <dir_read+0xa4>
    8604:	2316      	movs	r3, #22
    8606:	18fb      	adds	r3, r7, r3
    8608:	781b      	ldrb	r3, [r3, #0]
    860a:	2b2e      	cmp	r3, #46	; 0x2e
    860c:	d00a      	beq.n	8624 <dir_read+0xa4>
    860e:	230f      	movs	r3, #15
    8610:	18fb      	adds	r3, r7, r3
    8612:	781b      	ldrb	r3, [r3, #0]
    8614:	2208      	movs	r2, #8
    8616:	4013      	ands	r3, r2
    8618:	d009      	beq.n	862e <dir_read+0xae>
    861a:	230f      	movs	r3, #15
    861c:	18fb      	adds	r3, r7, r3
    861e:	781b      	ldrb	r3, [r3, #0]
    8620:	2b0f      	cmp	r3, #15
    8622:	d004      	beq.n	862e <dir_read+0xae>
			ord = 0xFF;
    8624:	2315      	movs	r3, #21
    8626:	18fb      	adds	r3, r7, r3
    8628:	22ff      	movs	r2, #255	; 0xff
    862a:	701a      	strb	r2, [r3, #0]
    862c:	e05a      	b.n	86e4 <dir_read+0x164>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    862e:	230f      	movs	r3, #15
    8630:	18fb      	adds	r3, r7, r3
    8632:	781b      	ldrb	r3, [r3, #0]
    8634:	2b0f      	cmp	r3, #15
    8636:	d140      	bne.n	86ba <dir_read+0x13a>
				if (c & LLE) {			/* Is it start of LFN sequence? */
    8638:	2316      	movs	r3, #22
    863a:	18fb      	adds	r3, r7, r3
    863c:	781b      	ldrb	r3, [r3, #0]
    863e:	2240      	movs	r2, #64	; 0x40
    8640:	4013      	ands	r3, r2
    8642:	d016      	beq.n	8672 <dir_read+0xf2>
					sum = dir[LDIR_Chksum];
    8644:	2314      	movs	r3, #20
    8646:	18fb      	adds	r3, r7, r3
    8648:	693a      	ldr	r2, [r7, #16]
    864a:	7b52      	ldrb	r2, [r2, #13]
    864c:	701a      	strb	r2, [r3, #0]
					c &= ~LLE; ord = c;
    864e:	2316      	movs	r3, #22
    8650:	18fb      	adds	r3, r7, r3
    8652:	2216      	movs	r2, #22
    8654:	18ba      	adds	r2, r7, r2
    8656:	7812      	ldrb	r2, [r2, #0]
    8658:	2140      	movs	r1, #64	; 0x40
    865a:	438a      	bics	r2, r1
    865c:	701a      	strb	r2, [r3, #0]
    865e:	2315      	movs	r3, #21
    8660:	18fb      	adds	r3, r7, r3
    8662:	2216      	movs	r2, #22
    8664:	18ba      	adds	r2, r7, r2
    8666:	7812      	ldrb	r2, [r2, #0]
    8668:	701a      	strb	r2, [r3, #0]
					dj->lfn_idx = dj->index;
    866a:	687b      	ldr	r3, [r7, #4]
    866c:	88da      	ldrh	r2, [r3, #6]
    866e:	687b      	ldr	r3, [r7, #4]
    8670:	841a      	strh	r2, [r3, #32]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    8672:	2316      	movs	r3, #22
    8674:	18fa      	adds	r2, r7, r3
    8676:	2315      	movs	r3, #21
    8678:	18fb      	adds	r3, r7, r3
    867a:	7812      	ldrb	r2, [r2, #0]
    867c:	781b      	ldrb	r3, [r3, #0]
    867e:	429a      	cmp	r2, r3
    8680:	d116      	bne.n	86b0 <dir_read+0x130>
    8682:	693b      	ldr	r3, [r7, #16]
    8684:	330d      	adds	r3, #13
    8686:	781b      	ldrb	r3, [r3, #0]
    8688:	2214      	movs	r2, #20
    868a:	18ba      	adds	r2, r7, r2
    868c:	7812      	ldrb	r2, [r2, #0]
    868e:	429a      	cmp	r2, r3
    8690:	d10e      	bne.n	86b0 <dir_read+0x130>
    8692:	687b      	ldr	r3, [r7, #4]
    8694:	69db      	ldr	r3, [r3, #28]
    8696:	693a      	ldr	r2, [r7, #16]
    8698:	0011      	movs	r1, r2
    869a:	0018      	movs	r0, r3
    869c:	4b26      	ldr	r3, [pc, #152]	; (8738 <dir_read+0x1b8>)
    869e:	4798      	blx	r3
    86a0:	1e03      	subs	r3, r0, #0
    86a2:	d005      	beq.n	86b0 <dir_read+0x130>
    86a4:	2315      	movs	r3, #21
    86a6:	18fb      	adds	r3, r7, r3
    86a8:	781b      	ldrb	r3, [r3, #0]
    86aa:	3b01      	subs	r3, #1
    86ac:	b2da      	uxtb	r2, r3
    86ae:	e000      	b.n	86b2 <dir_read+0x132>
    86b0:	22ff      	movs	r2, #255	; 0xff
    86b2:	2315      	movs	r3, #21
    86b4:	18fb      	adds	r3, r7, r3
    86b6:	701a      	strb	r2, [r3, #0]
    86b8:	e014      	b.n	86e4 <dir_read+0x164>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    86ba:	2315      	movs	r3, #21
    86bc:	18fb      	adds	r3, r7, r3
    86be:	781b      	ldrb	r3, [r3, #0]
    86c0:	2b00      	cmp	r3, #0
    86c2:	d10a      	bne.n	86da <dir_read+0x15a>
    86c4:	693b      	ldr	r3, [r7, #16]
    86c6:	0018      	movs	r0, r3
    86c8:	4b1c      	ldr	r3, [pc, #112]	; (873c <dir_read+0x1bc>)
    86ca:	4798      	blx	r3
    86cc:	0003      	movs	r3, r0
    86ce:	001a      	movs	r2, r3
    86d0:	2314      	movs	r3, #20
    86d2:	18fb      	adds	r3, r7, r3
    86d4:	781b      	ldrb	r3, [r3, #0]
    86d6:	4293      	cmp	r3, r2
    86d8:	d01a      	beq.n	8710 <dir_read+0x190>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
    86da:	687b      	ldr	r3, [r7, #4]
    86dc:	2201      	movs	r2, #1
    86de:	4252      	negs	r2, r2
    86e0:	841a      	strh	r2, [r3, #32]
				break;
    86e2:	e015      	b.n	8710 <dir_read+0x190>
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    86e4:	2317      	movs	r3, #23
    86e6:	18fc      	adds	r4, r7, r3
    86e8:	687b      	ldr	r3, [r7, #4]
    86ea:	2100      	movs	r1, #0
    86ec:	0018      	movs	r0, r3
    86ee:	4b14      	ldr	r3, [pc, #80]	; (8740 <dir_read+0x1c0>)
    86f0:	4798      	blx	r3
    86f2:	0003      	movs	r3, r0
    86f4:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    86f6:	2317      	movs	r3, #23
    86f8:	18fb      	adds	r3, r7, r3
    86fa:	781b      	ldrb	r3, [r3, #0]
    86fc:	2b00      	cmp	r3, #0
    86fe:	d109      	bne.n	8714 <dir_read+0x194>
	while (dj->sect) {
    8700:	687b      	ldr	r3, [r7, #4]
    8702:	691b      	ldr	r3, [r3, #16]
    8704:	2b00      	cmp	r3, #0
    8706:	d000      	beq.n	870a <dir_read+0x18a>
    8708:	e74b      	b.n	85a2 <dir_read+0x22>
    870a:	e004      	b.n	8716 <dir_read+0x196>
		if (res != FR_OK) break;
    870c:	46c0      	nop			; (mov r8, r8)
    870e:	e002      	b.n	8716 <dir_read+0x196>
				break;
    8710:	46c0      	nop			; (mov r8, r8)
    8712:	e000      	b.n	8716 <dir_read+0x196>
		if (res != FR_OK) break;
    8714:	46c0      	nop			; (mov r8, r8)
	}

	if (res != FR_OK) dj->sect = 0;
    8716:	2317      	movs	r3, #23
    8718:	18fb      	adds	r3, r7, r3
    871a:	781b      	ldrb	r3, [r3, #0]
    871c:	2b00      	cmp	r3, #0
    871e:	d002      	beq.n	8726 <dir_read+0x1a6>
    8720:	687b      	ldr	r3, [r7, #4]
    8722:	2200      	movs	r2, #0
    8724:	611a      	str	r2, [r3, #16]

	return res;
    8726:	2317      	movs	r3, #23
    8728:	18fb      	adds	r3, r7, r3
    872a:	781b      	ldrb	r3, [r3, #0]
}
    872c:	0018      	movs	r0, r3
    872e:	46bd      	mov	sp, r7
    8730:	b007      	add	sp, #28
    8732:	bd90      	pop	{r4, r7, pc}
    8734:	000073d9 	.word	0x000073d9
    8738:	00008041 	.word	0x00008041
    873c:	00008335 	.word	0x00008335
    8740:	00007d4d 	.word	0x00007d4d

00008744 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    8744:	b590      	push	{r4, r7, lr}
    8746:	b08d      	sub	sp, #52	; 0x34
    8748:	af00      	add	r7, sp, #0
    874a:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    874c:	687b      	ldr	r3, [r7, #4]
    874e:	699b      	ldr	r3, [r3, #24]
    8750:	627b      	str	r3, [r7, #36]	; 0x24
    8752:	687b      	ldr	r3, [r7, #4]
    8754:	69db      	ldr	r3, [r3, #28]
    8756:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
    8758:	6a79      	ldr	r1, [r7, #36]	; 0x24
    875a:	230c      	movs	r3, #12
    875c:	18fb      	adds	r3, r7, r3
    875e:	220c      	movs	r2, #12
    8760:	0018      	movs	r0, r3
    8762:	4bc8      	ldr	r3, [pc, #800]	; (8a84 <dir_register+0x340>)
    8764:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    8766:	230c      	movs	r3, #12
    8768:	18fb      	adds	r3, r7, r3
    876a:	7adb      	ldrb	r3, [r3, #11]
    876c:	001a      	movs	r2, r3
    876e:	2301      	movs	r3, #1
    8770:	4013      	ands	r3, r2
    8772:	d048      	beq.n	8806 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    8774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8776:	330b      	adds	r3, #11
    8778:	2200      	movs	r2, #0
    877a:	701a      	strb	r2, [r3, #0]
    877c:	687b      	ldr	r3, [r7, #4]
    877e:	2200      	movs	r2, #0
    8780:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
    8782:	232c      	movs	r3, #44	; 0x2c
    8784:	18fb      	adds	r3, r7, r3
    8786:	2201      	movs	r2, #1
    8788:	801a      	strh	r2, [r3, #0]
    878a:	e01c      	b.n	87c6 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
    878c:	232c      	movs	r3, #44	; 0x2c
    878e:	18fb      	adds	r3, r7, r3
    8790:	881b      	ldrh	r3, [r3, #0]
    8792:	6a3a      	ldr	r2, [r7, #32]
    8794:	210c      	movs	r1, #12
    8796:	1879      	adds	r1, r7, r1
    8798:	6a78      	ldr	r0, [r7, #36]	; 0x24
    879a:	4cbb      	ldr	r4, [pc, #748]	; (8a88 <dir_register+0x344>)
    879c:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    879e:	232f      	movs	r3, #47	; 0x2f
    87a0:	18fc      	adds	r4, r7, r3
    87a2:	687b      	ldr	r3, [r7, #4]
    87a4:	0018      	movs	r0, r3
    87a6:	4bb9      	ldr	r3, [pc, #740]	; (8a8c <dir_register+0x348>)
    87a8:	4798      	blx	r3
    87aa:	0003      	movs	r3, r0
    87ac:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    87ae:	232f      	movs	r3, #47	; 0x2f
    87b0:	18fb      	adds	r3, r7, r3
    87b2:	781b      	ldrb	r3, [r3, #0]
    87b4:	2b00      	cmp	r3, #0
    87b6:	d10c      	bne.n	87d2 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
    87b8:	232c      	movs	r3, #44	; 0x2c
    87ba:	18fb      	adds	r3, r7, r3
    87bc:	881a      	ldrh	r2, [r3, #0]
    87be:	232c      	movs	r3, #44	; 0x2c
    87c0:	18fb      	adds	r3, r7, r3
    87c2:	3201      	adds	r2, #1
    87c4:	801a      	strh	r2, [r3, #0]
    87c6:	232c      	movs	r3, #44	; 0x2c
    87c8:	18fb      	adds	r3, r7, r3
    87ca:	881b      	ldrh	r3, [r3, #0]
    87cc:	2b63      	cmp	r3, #99	; 0x63
    87ce:	d9dd      	bls.n	878c <dir_register+0x48>
    87d0:	e000      	b.n	87d4 <dir_register+0x90>
			if (res != FR_OK) break;
    87d2:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    87d4:	232c      	movs	r3, #44	; 0x2c
    87d6:	18fb      	adds	r3, r7, r3
    87d8:	881b      	ldrh	r3, [r3, #0]
    87da:	2b64      	cmp	r3, #100	; 0x64
    87dc:	d101      	bne.n	87e2 <dir_register+0x9e>
    87de:	2307      	movs	r3, #7
    87e0:	e14c      	b.n	8a7c <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    87e2:	232f      	movs	r3, #47	; 0x2f
    87e4:	18fb      	adds	r3, r7, r3
    87e6:	781b      	ldrb	r3, [r3, #0]
    87e8:	2b04      	cmp	r3, #4
    87ea:	d003      	beq.n	87f4 <dir_register+0xb0>
    87ec:	232f      	movs	r3, #47	; 0x2f
    87ee:	18fb      	adds	r3, r7, r3
    87f0:	781b      	ldrb	r3, [r3, #0]
    87f2:	e143      	b.n	8a7c <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    87f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    87f6:	330b      	adds	r3, #11
    87f8:	220c      	movs	r2, #12
    87fa:	18ba      	adds	r2, r7, r2
    87fc:	7ad2      	ldrb	r2, [r2, #11]
    87fe:	701a      	strb	r2, [r3, #0]
    8800:	687b      	ldr	r3, [r7, #4]
    8802:	6a3a      	ldr	r2, [r7, #32]
    8804:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    8806:	230c      	movs	r3, #12
    8808:	18fb      	adds	r3, r7, r3
    880a:	7adb      	ldrb	r3, [r3, #11]
    880c:	001a      	movs	r2, r3
    880e:	2302      	movs	r3, #2
    8810:	4013      	ands	r3, r2
    8812:	d023      	beq.n	885c <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
    8814:	232a      	movs	r3, #42	; 0x2a
    8816:	18fb      	adds	r3, r7, r3
    8818:	2200      	movs	r2, #0
    881a:	801a      	strh	r2, [r3, #0]
    881c:	e006      	b.n	882c <dir_register+0xe8>
    881e:	232a      	movs	r3, #42	; 0x2a
    8820:	18fb      	adds	r3, r7, r3
    8822:	881a      	ldrh	r2, [r3, #0]
    8824:	232a      	movs	r3, #42	; 0x2a
    8826:	18fb      	adds	r3, r7, r3
    8828:	3201      	adds	r2, #1
    882a:	801a      	strh	r2, [r3, #0]
    882c:	232a      	movs	r3, #42	; 0x2a
    882e:	18fb      	adds	r3, r7, r3
    8830:	881b      	ldrh	r3, [r3, #0]
    8832:	005b      	lsls	r3, r3, #1
    8834:	6a3a      	ldr	r2, [r7, #32]
    8836:	18d3      	adds	r3, r2, r3
    8838:	881b      	ldrh	r3, [r3, #0]
    883a:	2b00      	cmp	r3, #0
    883c:	d1ef      	bne.n	881e <dir_register+0xda>
		ne = (ne + 25) / 13;
    883e:	232a      	movs	r3, #42	; 0x2a
    8840:	18fb      	adds	r3, r7, r3
    8842:	881b      	ldrh	r3, [r3, #0]
    8844:	3319      	adds	r3, #25
    8846:	001a      	movs	r2, r3
    8848:	4b91      	ldr	r3, [pc, #580]	; (8a90 <dir_register+0x34c>)
    884a:	210d      	movs	r1, #13
    884c:	0010      	movs	r0, r2
    884e:	4798      	blx	r3
    8850:	0003      	movs	r3, r0
    8852:	001a      	movs	r2, r3
    8854:	232a      	movs	r3, #42	; 0x2a
    8856:	18fb      	adds	r3, r7, r3
    8858:	801a      	strh	r2, [r3, #0]
    885a:	e003      	b.n	8864 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
    885c:	232a      	movs	r3, #42	; 0x2a
    885e:	18fb      	adds	r3, r7, r3
    8860:	2201      	movs	r2, #1
    8862:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    8864:	232f      	movs	r3, #47	; 0x2f
    8866:	18fc      	adds	r4, r7, r3
    8868:	687b      	ldr	r3, [r7, #4]
    886a:	2100      	movs	r1, #0
    886c:	0018      	movs	r0, r3
    886e:	4b89      	ldr	r3, [pc, #548]	; (8a94 <dir_register+0x350>)
    8870:	4798      	blx	r3
    8872:	0003      	movs	r3, r0
    8874:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    8876:	232f      	movs	r3, #47	; 0x2f
    8878:	18fb      	adds	r3, r7, r3
    887a:	781b      	ldrb	r3, [r3, #0]
    887c:	2b00      	cmp	r3, #0
    887e:	d003      	beq.n	8888 <dir_register+0x144>
    8880:	232f      	movs	r3, #47	; 0x2f
    8882:	18fb      	adds	r3, r7, r3
    8884:	781b      	ldrb	r3, [r3, #0]
    8886:	e0f9      	b.n	8a7c <dir_register+0x338>
	n = is = 0;
    8888:	2328      	movs	r3, #40	; 0x28
    888a:	18fb      	adds	r3, r7, r3
    888c:	2200      	movs	r2, #0
    888e:	801a      	strh	r2, [r3, #0]
    8890:	232c      	movs	r3, #44	; 0x2c
    8892:	18fb      	adds	r3, r7, r3
    8894:	2228      	movs	r2, #40	; 0x28
    8896:	18ba      	adds	r2, r7, r2
    8898:	8812      	ldrh	r2, [r2, #0]
    889a:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
    889c:	687b      	ldr	r3, [r7, #4]
    889e:	681a      	ldr	r2, [r3, #0]
    88a0:	687b      	ldr	r3, [r7, #4]
    88a2:	691b      	ldr	r3, [r3, #16]
    88a4:	212f      	movs	r1, #47	; 0x2f
    88a6:	187c      	adds	r4, r7, r1
    88a8:	0019      	movs	r1, r3
    88aa:	0010      	movs	r0, r2
    88ac:	4b7a      	ldr	r3, [pc, #488]	; (8a98 <dir_register+0x354>)
    88ae:	4798      	blx	r3
    88b0:	0003      	movs	r3, r0
    88b2:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    88b4:	232f      	movs	r3, #47	; 0x2f
    88b6:	18fb      	adds	r3, r7, r3
    88b8:	781b      	ldrb	r3, [r3, #0]
    88ba:	2b00      	cmp	r3, #0
    88bc:	d13c      	bne.n	8938 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
    88be:	687b      	ldr	r3, [r7, #4]
    88c0:	695a      	ldr	r2, [r3, #20]
    88c2:	231f      	movs	r3, #31
    88c4:	18fb      	adds	r3, r7, r3
    88c6:	7812      	ldrb	r2, [r2, #0]
    88c8:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    88ca:	231f      	movs	r3, #31
    88cc:	18fb      	adds	r3, r7, r3
    88ce:	781b      	ldrb	r3, [r3, #0]
    88d0:	2be5      	cmp	r3, #229	; 0xe5
    88d2:	d004      	beq.n	88de <dir_register+0x19a>
    88d4:	231f      	movs	r3, #31
    88d6:	18fb      	adds	r3, r7, r3
    88d8:	781b      	ldrb	r3, [r3, #0]
    88da:	2b00      	cmp	r3, #0
    88dc:	d119      	bne.n	8912 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    88de:	232c      	movs	r3, #44	; 0x2c
    88e0:	18fb      	adds	r3, r7, r3
    88e2:	881b      	ldrh	r3, [r3, #0]
    88e4:	2b00      	cmp	r3, #0
    88e6:	d104      	bne.n	88f2 <dir_register+0x1ae>
    88e8:	2328      	movs	r3, #40	; 0x28
    88ea:	18fb      	adds	r3, r7, r3
    88ec:	687a      	ldr	r2, [r7, #4]
    88ee:	88d2      	ldrh	r2, [r2, #6]
    88f0:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    88f2:	232c      	movs	r3, #44	; 0x2c
    88f4:	18fb      	adds	r3, r7, r3
    88f6:	222c      	movs	r2, #44	; 0x2c
    88f8:	18ba      	adds	r2, r7, r2
    88fa:	8812      	ldrh	r2, [r2, #0]
    88fc:	3201      	adds	r2, #1
    88fe:	801a      	strh	r2, [r3, #0]
    8900:	232c      	movs	r3, #44	; 0x2c
    8902:	18fa      	adds	r2, r7, r3
    8904:	232a      	movs	r3, #42	; 0x2a
    8906:	18fb      	adds	r3, r7, r3
    8908:	8812      	ldrh	r2, [r2, #0]
    890a:	881b      	ldrh	r3, [r3, #0]
    890c:	429a      	cmp	r2, r3
    890e:	d104      	bne.n	891a <dir_register+0x1d6>
    8910:	e013      	b.n	893a <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
    8912:	232c      	movs	r3, #44	; 0x2c
    8914:	18fb      	adds	r3, r7, r3
    8916:	2200      	movs	r2, #0
    8918:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    891a:	232f      	movs	r3, #47	; 0x2f
    891c:	18fc      	adds	r4, r7, r3
    891e:	687b      	ldr	r3, [r7, #4]
    8920:	2101      	movs	r1, #1
    8922:	0018      	movs	r0, r3
    8924:	4b5d      	ldr	r3, [pc, #372]	; (8a9c <dir_register+0x358>)
    8926:	4798      	blx	r3
    8928:	0003      	movs	r3, r0
    892a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    892c:	232f      	movs	r3, #47	; 0x2f
    892e:	18fb      	adds	r3, r7, r3
    8930:	781b      	ldrb	r3, [r3, #0]
    8932:	2b00      	cmp	r3, #0
    8934:	d0b2      	beq.n	889c <dir_register+0x158>
    8936:	e000      	b.n	893a <dir_register+0x1f6>
		if (res != FR_OK) break;
    8938:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    893a:	232f      	movs	r3, #47	; 0x2f
    893c:	18fb      	adds	r3, r7, r3
    893e:	781b      	ldrb	r3, [r3, #0]
    8940:	2b00      	cmp	r3, #0
    8942:	d163      	bne.n	8a0c <dir_register+0x2c8>
    8944:	232a      	movs	r3, #42	; 0x2a
    8946:	18fb      	adds	r3, r7, r3
    8948:	881b      	ldrh	r3, [r3, #0]
    894a:	2b01      	cmp	r3, #1
    894c:	d95e      	bls.n	8a0c <dir_register+0x2c8>
		res = dir_sdi(dj, is);
    894e:	232f      	movs	r3, #47	; 0x2f
    8950:	18fc      	adds	r4, r7, r3
    8952:	2328      	movs	r3, #40	; 0x28
    8954:	18fb      	adds	r3, r7, r3
    8956:	881a      	ldrh	r2, [r3, #0]
    8958:	687b      	ldr	r3, [r7, #4]
    895a:	0011      	movs	r1, r2
    895c:	0018      	movs	r0, r3
    895e:	4b4d      	ldr	r3, [pc, #308]	; (8a94 <dir_register+0x350>)
    8960:	4798      	blx	r3
    8962:	0003      	movs	r3, r0
    8964:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8966:	232f      	movs	r3, #47	; 0x2f
    8968:	18fb      	adds	r3, r7, r3
    896a:	781b      	ldrb	r3, [r3, #0]
    896c:	2b00      	cmp	r3, #0
    896e:	d14d      	bne.n	8a0c <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    8970:	687b      	ldr	r3, [r7, #4]
    8972:	699b      	ldr	r3, [r3, #24]
    8974:	221e      	movs	r2, #30
    8976:	18bc      	adds	r4, r7, r2
    8978:	0018      	movs	r0, r3
    897a:	4b49      	ldr	r3, [pc, #292]	; (8aa0 <dir_register+0x35c>)
    897c:	4798      	blx	r3
    897e:	0003      	movs	r3, r0
    8980:	7023      	strb	r3, [r4, #0]
			ne--;
    8982:	232a      	movs	r3, #42	; 0x2a
    8984:	18fb      	adds	r3, r7, r3
    8986:	881a      	ldrh	r2, [r3, #0]
    8988:	232a      	movs	r3, #42	; 0x2a
    898a:	18fb      	adds	r3, r7, r3
    898c:	3a01      	subs	r2, #1
    898e:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
    8990:	687b      	ldr	r3, [r7, #4]
    8992:	681a      	ldr	r2, [r3, #0]
    8994:	687b      	ldr	r3, [r7, #4]
    8996:	691b      	ldr	r3, [r3, #16]
    8998:	212f      	movs	r1, #47	; 0x2f
    899a:	187c      	adds	r4, r7, r1
    899c:	0019      	movs	r1, r3
    899e:	0010      	movs	r0, r2
    89a0:	4b3d      	ldr	r3, [pc, #244]	; (8a98 <dir_register+0x354>)
    89a2:	4798      	blx	r3
    89a4:	0003      	movs	r3, r0
    89a6:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
    89a8:	232f      	movs	r3, #47	; 0x2f
    89aa:	18fb      	adds	r3, r7, r3
    89ac:	781b      	ldrb	r3, [r3, #0]
    89ae:	2b00      	cmp	r3, #0
    89b0:	d12b      	bne.n	8a0a <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    89b2:	687b      	ldr	r3, [r7, #4]
    89b4:	69d8      	ldr	r0, [r3, #28]
    89b6:	687b      	ldr	r3, [r7, #4]
    89b8:	6959      	ldr	r1, [r3, #20]
    89ba:	232a      	movs	r3, #42	; 0x2a
    89bc:	18fb      	adds	r3, r7, r3
    89be:	881b      	ldrh	r3, [r3, #0]
    89c0:	b2da      	uxtb	r2, r3
    89c2:	231e      	movs	r3, #30
    89c4:	18fb      	adds	r3, r7, r3
    89c6:	781b      	ldrb	r3, [r3, #0]
    89c8:	4c36      	ldr	r4, [pc, #216]	; (8aa4 <dir_register+0x360>)
    89ca:	47a0      	blx	r4
				dj->fs->wflag = 1;
    89cc:	687b      	ldr	r3, [r7, #4]
    89ce:	681b      	ldr	r3, [r3, #0]
    89d0:	2201      	movs	r2, #1
    89d2:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
    89d4:	232f      	movs	r3, #47	; 0x2f
    89d6:	18fc      	adds	r4, r7, r3
    89d8:	687b      	ldr	r3, [r7, #4]
    89da:	2100      	movs	r1, #0
    89dc:	0018      	movs	r0, r3
    89de:	4b2f      	ldr	r3, [pc, #188]	; (8a9c <dir_register+0x358>)
    89e0:	4798      	blx	r3
    89e2:	0003      	movs	r3, r0
    89e4:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
    89e6:	232f      	movs	r3, #47	; 0x2f
    89e8:	18fb      	adds	r3, r7, r3
    89ea:	781b      	ldrb	r3, [r3, #0]
    89ec:	2b00      	cmp	r3, #0
    89ee:	d10d      	bne.n	8a0c <dir_register+0x2c8>
    89f0:	232a      	movs	r3, #42	; 0x2a
    89f2:	18fb      	adds	r3, r7, r3
    89f4:	222a      	movs	r2, #42	; 0x2a
    89f6:	18ba      	adds	r2, r7, r2
    89f8:	8812      	ldrh	r2, [r2, #0]
    89fa:	3a01      	subs	r2, #1
    89fc:	801a      	strh	r2, [r3, #0]
    89fe:	232a      	movs	r3, #42	; 0x2a
    8a00:	18fb      	adds	r3, r7, r3
    8a02:	881b      	ldrh	r3, [r3, #0]
    8a04:	2b00      	cmp	r3, #0
    8a06:	d1c3      	bne.n	8990 <dir_register+0x24c>
    8a08:	e000      	b.n	8a0c <dir_register+0x2c8>
				if (res != FR_OK) break;
    8a0a:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    8a0c:	232f      	movs	r3, #47	; 0x2f
    8a0e:	18fb      	adds	r3, r7, r3
    8a10:	781b      	ldrb	r3, [r3, #0]
    8a12:	2b00      	cmp	r3, #0
    8a14:	d12f      	bne.n	8a76 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
    8a16:	687b      	ldr	r3, [r7, #4]
    8a18:	681a      	ldr	r2, [r3, #0]
    8a1a:	687b      	ldr	r3, [r7, #4]
    8a1c:	691b      	ldr	r3, [r3, #16]
    8a1e:	212f      	movs	r1, #47	; 0x2f
    8a20:	187c      	adds	r4, r7, r1
    8a22:	0019      	movs	r1, r3
    8a24:	0010      	movs	r0, r2
    8a26:	4b1c      	ldr	r3, [pc, #112]	; (8a98 <dir_register+0x354>)
    8a28:	4798      	blx	r3
    8a2a:	0003      	movs	r3, r0
    8a2c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8a2e:	232f      	movs	r3, #47	; 0x2f
    8a30:	18fb      	adds	r3, r7, r3
    8a32:	781b      	ldrb	r3, [r3, #0]
    8a34:	2b00      	cmp	r3, #0
    8a36:	d11e      	bne.n	8a76 <dir_register+0x332>
			dir = dj->dir;
    8a38:	687b      	ldr	r3, [r7, #4]
    8a3a:	695b      	ldr	r3, [r3, #20]
    8a3c:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    8a3e:	69bb      	ldr	r3, [r7, #24]
    8a40:	2220      	movs	r2, #32
    8a42:	2100      	movs	r1, #0
    8a44:	0018      	movs	r0, r3
    8a46:	4b18      	ldr	r3, [pc, #96]	; (8aa8 <dir_register+0x364>)
    8a48:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    8a4a:	687b      	ldr	r3, [r7, #4]
    8a4c:	6999      	ldr	r1, [r3, #24]
    8a4e:	69bb      	ldr	r3, [r7, #24]
    8a50:	220b      	movs	r2, #11
    8a52:	0018      	movs	r0, r3
    8a54:	4b0b      	ldr	r3, [pc, #44]	; (8a84 <dir_register+0x340>)
    8a56:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    8a58:	69bb      	ldr	r3, [r7, #24]
    8a5a:	330c      	adds	r3, #12
    8a5c:	001a      	movs	r2, r3
    8a5e:	687b      	ldr	r3, [r7, #4]
    8a60:	699b      	ldr	r3, [r3, #24]
    8a62:	330b      	adds	r3, #11
    8a64:	781b      	ldrb	r3, [r3, #0]
    8a66:	2118      	movs	r1, #24
    8a68:	400b      	ands	r3, r1
    8a6a:	b2db      	uxtb	r3, r3
    8a6c:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
    8a6e:	687b      	ldr	r3, [r7, #4]
    8a70:	681b      	ldr	r3, [r3, #0]
    8a72:	2201      	movs	r2, #1
    8a74:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
    8a76:	232f      	movs	r3, #47	; 0x2f
    8a78:	18fb      	adds	r3, r7, r3
    8a7a:	781b      	ldrb	r3, [r3, #0]
}
    8a7c:	0018      	movs	r0, r3
    8a7e:	46bd      	mov	sp, r7
    8a80:	b00d      	add	sp, #52	; 0x34
    8a82:	bd90      	pop	{r4, r7, pc}
    8a84:	000072f5 	.word	0x000072f5
    8a88:	00008235 	.word	0x00008235
    8a8c:	00008385 	.word	0x00008385
    8a90:	0000b2e1 	.word	0x0000b2e1
    8a94:	00007c1d 	.word	0x00007c1d
    8a98:	000073d9 	.word	0x000073d9
    8a9c:	00007d4d 	.word	0x00007d4d
    8aa0:	00008335 	.word	0x00008335
    8aa4:	00008125 	.word	0x00008125
    8aa8:	0000732d 	.word	0x0000732d

00008aac <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    8aac:	b590      	push	{r4, r7, lr}
    8aae:	b085      	sub	sp, #20
    8ab0:	af00      	add	r7, sp, #0
    8ab2:	6078      	str	r0, [r7, #4]
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
    8ab4:	230c      	movs	r3, #12
    8ab6:	18fb      	adds	r3, r7, r3
    8ab8:	687a      	ldr	r2, [r7, #4]
    8aba:	88d2      	ldrh	r2, [r2, #6]
    8abc:	801a      	strh	r2, [r3, #0]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    8abe:	687b      	ldr	r3, [r7, #4]
    8ac0:	8c1b      	ldrh	r3, [r3, #32]
    8ac2:	4a2c      	ldr	r2, [pc, #176]	; (8b74 <dir_remove+0xc8>)
    8ac4:	4293      	cmp	r3, r2
    8ac6:	d002      	beq.n	8ace <dir_remove+0x22>
    8ac8:	687b      	ldr	r3, [r7, #4]
    8aca:	8c1b      	ldrh	r3, [r3, #32]
    8acc:	e002      	b.n	8ad4 <dir_remove+0x28>
    8ace:	230c      	movs	r3, #12
    8ad0:	18fb      	adds	r3, r7, r3
    8ad2:	881b      	ldrh	r3, [r3, #0]
    8ad4:	220f      	movs	r2, #15
    8ad6:	18bc      	adds	r4, r7, r2
    8ad8:	687a      	ldr	r2, [r7, #4]
    8ada:	0019      	movs	r1, r3
    8adc:	0010      	movs	r0, r2
    8ade:	4b26      	ldr	r3, [pc, #152]	; (8b78 <dir_remove+0xcc>)
    8ae0:	4798      	blx	r3
    8ae2:	0003      	movs	r3, r0
    8ae4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    8ae6:	230f      	movs	r3, #15
    8ae8:	18fb      	adds	r3, r7, r3
    8aea:	781b      	ldrb	r3, [r3, #0]
    8aec:	2b00      	cmp	r3, #0
    8aee:	d13a      	bne.n	8b66 <dir_remove+0xba>
		do {
			res = move_window(dj->fs, dj->sect);
    8af0:	687b      	ldr	r3, [r7, #4]
    8af2:	681a      	ldr	r2, [r3, #0]
    8af4:	687b      	ldr	r3, [r7, #4]
    8af6:	691b      	ldr	r3, [r3, #16]
    8af8:	210f      	movs	r1, #15
    8afa:	187c      	adds	r4, r7, r1
    8afc:	0019      	movs	r1, r3
    8afe:	0010      	movs	r0, r2
    8b00:	4b1e      	ldr	r3, [pc, #120]	; (8b7c <dir_remove+0xd0>)
    8b02:	4798      	blx	r3
    8b04:	0003      	movs	r3, r0
    8b06:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    8b08:	230f      	movs	r3, #15
    8b0a:	18fb      	adds	r3, r7, r3
    8b0c:	781b      	ldrb	r3, [r3, #0]
    8b0e:	2b00      	cmp	r3, #0
    8b10:	d11d      	bne.n	8b4e <dir_remove+0xa2>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    8b12:	687b      	ldr	r3, [r7, #4]
    8b14:	695b      	ldr	r3, [r3, #20]
    8b16:	22e5      	movs	r2, #229	; 0xe5
    8b18:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
    8b1a:	687b      	ldr	r3, [r7, #4]
    8b1c:	681b      	ldr	r3, [r3, #0]
    8b1e:	2201      	movs	r2, #1
    8b20:	711a      	strb	r2, [r3, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8b22:	687b      	ldr	r3, [r7, #4]
    8b24:	88db      	ldrh	r3, [r3, #6]
    8b26:	220c      	movs	r2, #12
    8b28:	18ba      	adds	r2, r7, r2
    8b2a:	8812      	ldrh	r2, [r2, #0]
    8b2c:	429a      	cmp	r2, r3
    8b2e:	d910      	bls.n	8b52 <dir_remove+0xa6>
			res = dir_next(dj, 0);		/* Next entry */
    8b30:	230f      	movs	r3, #15
    8b32:	18fc      	adds	r4, r7, r3
    8b34:	687b      	ldr	r3, [r7, #4]
    8b36:	2100      	movs	r1, #0
    8b38:	0018      	movs	r0, r3
    8b3a:	4b11      	ldr	r3, [pc, #68]	; (8b80 <dir_remove+0xd4>)
    8b3c:	4798      	blx	r3
    8b3e:	0003      	movs	r3, r0
    8b40:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
    8b42:	230f      	movs	r3, #15
    8b44:	18fb      	adds	r3, r7, r3
    8b46:	781b      	ldrb	r3, [r3, #0]
    8b48:	2b00      	cmp	r3, #0
    8b4a:	d0d1      	beq.n	8af0 <dir_remove+0x44>
    8b4c:	e002      	b.n	8b54 <dir_remove+0xa8>
			if (res != FR_OK) break;
    8b4e:	46c0      	nop			; (mov r8, r8)
    8b50:	e000      	b.n	8b54 <dir_remove+0xa8>
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8b52:	46c0      	nop			; (mov r8, r8)
		if (res == FR_NO_FILE) res = FR_INT_ERR;
    8b54:	230f      	movs	r3, #15
    8b56:	18fb      	adds	r3, r7, r3
    8b58:	781b      	ldrb	r3, [r3, #0]
    8b5a:	2b04      	cmp	r3, #4
    8b5c:	d103      	bne.n	8b66 <dir_remove+0xba>
    8b5e:	230f      	movs	r3, #15
    8b60:	18fb      	adds	r3, r7, r3
    8b62:	2202      	movs	r2, #2
    8b64:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
		}
	}
#endif

	return res;
    8b66:	230f      	movs	r3, #15
    8b68:	18fb      	adds	r3, r7, r3
    8b6a:	781b      	ldrb	r3, [r3, #0]
}
    8b6c:	0018      	movs	r0, r3
    8b6e:	46bd      	mov	sp, r7
    8b70:	b005      	add	sp, #20
    8b72:	bd90      	pop	{r4, r7, pc}
    8b74:	0000ffff 	.word	0x0000ffff
    8b78:	00007c1d 	.word	0x00007c1d
    8b7c:	000073d9 	.word	0x000073d9
    8b80:	00007d4d 	.word	0x00007d4d

00008b84 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    8b84:	b590      	push	{r4, r7, lr}
    8b86:	b08b      	sub	sp, #44	; 0x2c
    8b88:	af00      	add	r7, sp, #0
    8b8a:	6078      	str	r0, [r7, #4]
    8b8c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    8b8e:	683b      	ldr	r3, [r7, #0]
    8b90:	681b      	ldr	r3, [r3, #0]
    8b92:	613b      	str	r3, [r7, #16]
    8b94:	e002      	b.n	8b9c <create_name+0x18>
    8b96:	693b      	ldr	r3, [r7, #16]
    8b98:	3301      	adds	r3, #1
    8b9a:	613b      	str	r3, [r7, #16]
    8b9c:	693b      	ldr	r3, [r7, #16]
    8b9e:	781b      	ldrb	r3, [r3, #0]
    8ba0:	2b2f      	cmp	r3, #47	; 0x2f
    8ba2:	d0f8      	beq.n	8b96 <create_name+0x12>
    8ba4:	693b      	ldr	r3, [r7, #16]
    8ba6:	781b      	ldrb	r3, [r3, #0]
    8ba8:	2b5c      	cmp	r3, #92	; 0x5c
    8baa:	d0f4      	beq.n	8b96 <create_name+0x12>
	lfn = dj->lfn;
    8bac:	687b      	ldr	r3, [r7, #4]
    8bae:	69db      	ldr	r3, [r3, #28]
    8bb0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
    8bb2:	2300      	movs	r3, #0
    8bb4:	617b      	str	r3, [r7, #20]
    8bb6:	697b      	ldr	r3, [r7, #20]
    8bb8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
    8bba:	69bb      	ldr	r3, [r7, #24]
    8bbc:	1c5a      	adds	r2, r3, #1
    8bbe:	61ba      	str	r2, [r7, #24]
    8bc0:	693a      	ldr	r2, [r7, #16]
    8bc2:	18d3      	adds	r3, r2, r3
    8bc4:	781a      	ldrb	r2, [r3, #0]
    8bc6:	2324      	movs	r3, #36	; 0x24
    8bc8:	18fb      	adds	r3, r7, r3
    8bca:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    8bcc:	2324      	movs	r3, #36	; 0x24
    8bce:	18fb      	adds	r3, r7, r3
    8bd0:	881b      	ldrh	r3, [r3, #0]
    8bd2:	2b1f      	cmp	r3, #31
    8bd4:	d944      	bls.n	8c60 <create_name+0xdc>
    8bd6:	2324      	movs	r3, #36	; 0x24
    8bd8:	18fb      	adds	r3, r7, r3
    8bda:	881b      	ldrh	r3, [r3, #0]
    8bdc:	2b2f      	cmp	r3, #47	; 0x2f
    8bde:	d03f      	beq.n	8c60 <create_name+0xdc>
    8be0:	2324      	movs	r3, #36	; 0x24
    8be2:	18fb      	adds	r3, r7, r3
    8be4:	881b      	ldrh	r3, [r3, #0]
    8be6:	2b5c      	cmp	r3, #92	; 0x5c
    8be8:	d03a      	beq.n	8c60 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
    8bea:	697b      	ldr	r3, [r7, #20]
    8bec:	2bfe      	cmp	r3, #254	; 0xfe
    8bee:	d901      	bls.n	8bf4 <create_name+0x70>
			return FR_INVALID_NAME;
    8bf0:	2306      	movs	r3, #6
    8bf2:	e1e7      	b.n	8fc4 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
    8bf4:	2324      	movs	r3, #36	; 0x24
    8bf6:	18fb      	adds	r3, r7, r3
    8bf8:	2224      	movs	r2, #36	; 0x24
    8bfa:	18ba      	adds	r2, r7, r2
    8bfc:	8812      	ldrh	r2, [r2, #0]
    8bfe:	21ff      	movs	r1, #255	; 0xff
    8c00:	400a      	ands	r2, r1
    8c02:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    8c04:	2324      	movs	r3, #36	; 0x24
    8c06:	18fc      	adds	r4, r7, r3
    8c08:	2324      	movs	r3, #36	; 0x24
    8c0a:	18fb      	adds	r3, r7, r3
    8c0c:	881b      	ldrh	r3, [r3, #0]
    8c0e:	2101      	movs	r1, #1
    8c10:	0018      	movs	r0, r3
    8c12:	4bba      	ldr	r3, [pc, #744]	; (8efc <create_name+0x378>)
    8c14:	4798      	blx	r3
    8c16:	0003      	movs	r3, r0
    8c18:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    8c1a:	2324      	movs	r3, #36	; 0x24
    8c1c:	18fb      	adds	r3, r7, r3
    8c1e:	881b      	ldrh	r3, [r3, #0]
    8c20:	2b00      	cmp	r3, #0
    8c22:	d101      	bne.n	8c28 <create_name+0xa4>
    8c24:	2306      	movs	r3, #6
    8c26:	e1cd      	b.n	8fc4 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    8c28:	2324      	movs	r3, #36	; 0x24
    8c2a:	18fb      	adds	r3, r7, r3
    8c2c:	881b      	ldrh	r3, [r3, #0]
    8c2e:	2b7f      	cmp	r3, #127	; 0x7f
    8c30:	d80b      	bhi.n	8c4a <create_name+0xc6>
    8c32:	2324      	movs	r3, #36	; 0x24
    8c34:	18fb      	adds	r3, r7, r3
    8c36:	881a      	ldrh	r2, [r3, #0]
    8c38:	4bb1      	ldr	r3, [pc, #708]	; (8f00 <create_name+0x37c>)
    8c3a:	0011      	movs	r1, r2
    8c3c:	0018      	movs	r0, r3
    8c3e:	4bb1      	ldr	r3, [pc, #708]	; (8f04 <create_name+0x380>)
    8c40:	4798      	blx	r3
    8c42:	1e03      	subs	r3, r0, #0
    8c44:	d001      	beq.n	8c4a <create_name+0xc6>
			return FR_INVALID_NAME;
    8c46:	2306      	movs	r3, #6
    8c48:	e1bc      	b.n	8fc4 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
    8c4a:	697b      	ldr	r3, [r7, #20]
    8c4c:	1c5a      	adds	r2, r3, #1
    8c4e:	617a      	str	r2, [r7, #20]
    8c50:	005b      	lsls	r3, r3, #1
    8c52:	68fa      	ldr	r2, [r7, #12]
    8c54:	18d3      	adds	r3, r2, r3
    8c56:	2224      	movs	r2, #36	; 0x24
    8c58:	18ba      	adds	r2, r7, r2
    8c5a:	8812      	ldrh	r2, [r2, #0]
    8c5c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
    8c5e:	e7ac      	b.n	8bba <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
    8c60:	693a      	ldr	r2, [r7, #16]
    8c62:	69bb      	ldr	r3, [r7, #24]
    8c64:	18d2      	adds	r2, r2, r3
    8c66:	683b      	ldr	r3, [r7, #0]
    8c68:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    8c6a:	2324      	movs	r3, #36	; 0x24
    8c6c:	18fb      	adds	r3, r7, r3
    8c6e:	881b      	ldrh	r3, [r3, #0]
    8c70:	2b1f      	cmp	r3, #31
    8c72:	d801      	bhi.n	8c78 <create_name+0xf4>
    8c74:	2204      	movs	r2, #4
    8c76:	e000      	b.n	8c7a <create_name+0xf6>
    8c78:	2200      	movs	r2, #0
    8c7a:	2326      	movs	r3, #38	; 0x26
    8c7c:	18fb      	adds	r3, r7, r3
    8c7e:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
    8c80:	e017      	b.n	8cb2 <create_name+0x12e>
		w = lfn[di-1];
    8c82:	697b      	ldr	r3, [r7, #20]
    8c84:	4aa0      	ldr	r2, [pc, #640]	; (8f08 <create_name+0x384>)
    8c86:	4694      	mov	ip, r2
    8c88:	4463      	add	r3, ip
    8c8a:	005b      	lsls	r3, r3, #1
    8c8c:	68fa      	ldr	r2, [r7, #12]
    8c8e:	18d2      	adds	r2, r2, r3
    8c90:	2324      	movs	r3, #36	; 0x24
    8c92:	18fb      	adds	r3, r7, r3
    8c94:	8812      	ldrh	r2, [r2, #0]
    8c96:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    8c98:	2324      	movs	r3, #36	; 0x24
    8c9a:	18fb      	adds	r3, r7, r3
    8c9c:	881b      	ldrh	r3, [r3, #0]
    8c9e:	2b20      	cmp	r3, #32
    8ca0:	d004      	beq.n	8cac <create_name+0x128>
    8ca2:	2324      	movs	r3, #36	; 0x24
    8ca4:	18fb      	adds	r3, r7, r3
    8ca6:	881b      	ldrh	r3, [r3, #0]
    8ca8:	2b2e      	cmp	r3, #46	; 0x2e
    8caa:	d106      	bne.n	8cba <create_name+0x136>
		di--;
    8cac:	697b      	ldr	r3, [r7, #20]
    8cae:	3b01      	subs	r3, #1
    8cb0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
    8cb2:	697b      	ldr	r3, [r7, #20]
    8cb4:	2b00      	cmp	r3, #0
    8cb6:	d1e4      	bne.n	8c82 <create_name+0xfe>
    8cb8:	e000      	b.n	8cbc <create_name+0x138>
		if (w != ' ' && w != '.') break;
    8cba:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    8cbc:	697b      	ldr	r3, [r7, #20]
    8cbe:	2b00      	cmp	r3, #0
    8cc0:	d101      	bne.n	8cc6 <create_name+0x142>
    8cc2:	2306      	movs	r3, #6
    8cc4:	e17e      	b.n	8fc4 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
    8cc6:	697b      	ldr	r3, [r7, #20]
    8cc8:	005b      	lsls	r3, r3, #1
    8cca:	68fa      	ldr	r2, [r7, #12]
    8ccc:	18d3      	adds	r3, r2, r3
    8cce:	2200      	movs	r2, #0
    8cd0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
    8cd2:	687b      	ldr	r3, [r7, #4]
    8cd4:	699b      	ldr	r3, [r3, #24]
    8cd6:	220b      	movs	r2, #11
    8cd8:	2120      	movs	r1, #32
    8cda:	0018      	movs	r0, r3
    8cdc:	4b8b      	ldr	r3, [pc, #556]	; (8f0c <create_name+0x388>)
    8cde:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    8ce0:	2300      	movs	r3, #0
    8ce2:	61bb      	str	r3, [r7, #24]
    8ce4:	e002      	b.n	8cec <create_name+0x168>
    8ce6:	69bb      	ldr	r3, [r7, #24]
    8ce8:	3301      	adds	r3, #1
    8cea:	61bb      	str	r3, [r7, #24]
    8cec:	69bb      	ldr	r3, [r7, #24]
    8cee:	005b      	lsls	r3, r3, #1
    8cf0:	68fa      	ldr	r2, [r7, #12]
    8cf2:	18d3      	adds	r3, r2, r3
    8cf4:	881b      	ldrh	r3, [r3, #0]
    8cf6:	2b20      	cmp	r3, #32
    8cf8:	d0f5      	beq.n	8ce6 <create_name+0x162>
    8cfa:	69bb      	ldr	r3, [r7, #24]
    8cfc:	005b      	lsls	r3, r3, #1
    8cfe:	68fa      	ldr	r2, [r7, #12]
    8d00:	18d3      	adds	r3, r2, r3
    8d02:	881b      	ldrh	r3, [r3, #0]
    8d04:	2b2e      	cmp	r3, #46	; 0x2e
    8d06:	d0ee      	beq.n	8ce6 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
    8d08:	69bb      	ldr	r3, [r7, #24]
    8d0a:	2b00      	cmp	r3, #0
    8d0c:	d00b      	beq.n	8d26 <create_name+0x1a2>
    8d0e:	2326      	movs	r3, #38	; 0x26
    8d10:	18fb      	adds	r3, r7, r3
    8d12:	2226      	movs	r2, #38	; 0x26
    8d14:	18ba      	adds	r2, r7, r2
    8d16:	7812      	ldrb	r2, [r2, #0]
    8d18:	2103      	movs	r1, #3
    8d1a:	430a      	orrs	r2, r1
    8d1c:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    8d1e:	e002      	b.n	8d26 <create_name+0x1a2>
    8d20:	697b      	ldr	r3, [r7, #20]
    8d22:	3b01      	subs	r3, #1
    8d24:	617b      	str	r3, [r7, #20]
    8d26:	697b      	ldr	r3, [r7, #20]
    8d28:	2b00      	cmp	r3, #0
    8d2a:	d009      	beq.n	8d40 <create_name+0x1bc>
    8d2c:	697b      	ldr	r3, [r7, #20]
    8d2e:	4a76      	ldr	r2, [pc, #472]	; (8f08 <create_name+0x384>)
    8d30:	4694      	mov	ip, r2
    8d32:	4463      	add	r3, ip
    8d34:	005b      	lsls	r3, r3, #1
    8d36:	68fa      	ldr	r2, [r7, #12]
    8d38:	18d3      	adds	r3, r2, r3
    8d3a:	881b      	ldrh	r3, [r3, #0]
    8d3c:	2b2e      	cmp	r3, #46	; 0x2e
    8d3e:	d1ef      	bne.n	8d20 <create_name+0x19c>

	b = i = 0; ni = 8;
    8d40:	2300      	movs	r3, #0
    8d42:	623b      	str	r3, [r7, #32]
    8d44:	2327      	movs	r3, #39	; 0x27
    8d46:	18fb      	adds	r3, r7, r3
    8d48:	2200      	movs	r2, #0
    8d4a:	701a      	strb	r2, [r3, #0]
    8d4c:	2308      	movs	r3, #8
    8d4e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    8d50:	69bb      	ldr	r3, [r7, #24]
    8d52:	1c5a      	adds	r2, r3, #1
    8d54:	61ba      	str	r2, [r7, #24]
    8d56:	005b      	lsls	r3, r3, #1
    8d58:	68fa      	ldr	r2, [r7, #12]
    8d5a:	18d2      	adds	r2, r2, r3
    8d5c:	2324      	movs	r3, #36	; 0x24
    8d5e:	18fb      	adds	r3, r7, r3
    8d60:	8812      	ldrh	r2, [r2, #0]
    8d62:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
    8d64:	2324      	movs	r3, #36	; 0x24
    8d66:	18fb      	adds	r3, r7, r3
    8d68:	881b      	ldrh	r3, [r3, #0]
    8d6a:	2b00      	cmp	r3, #0
    8d6c:	d100      	bne.n	8d70 <create_name+0x1ec>
    8d6e:	e0c3      	b.n	8ef8 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    8d70:	2324      	movs	r3, #36	; 0x24
    8d72:	18fb      	adds	r3, r7, r3
    8d74:	881b      	ldrh	r3, [r3, #0]
    8d76:	2b20      	cmp	r3, #32
    8d78:	d008      	beq.n	8d8c <create_name+0x208>
    8d7a:	2324      	movs	r3, #36	; 0x24
    8d7c:	18fb      	adds	r3, r7, r3
    8d7e:	881b      	ldrh	r3, [r3, #0]
    8d80:	2b2e      	cmp	r3, #46	; 0x2e
    8d82:	d10c      	bne.n	8d9e <create_name+0x21a>
    8d84:	69ba      	ldr	r2, [r7, #24]
    8d86:	697b      	ldr	r3, [r7, #20]
    8d88:	429a      	cmp	r2, r3
    8d8a:	d008      	beq.n	8d9e <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
    8d8c:	2326      	movs	r3, #38	; 0x26
    8d8e:	18fb      	adds	r3, r7, r3
    8d90:	2226      	movs	r2, #38	; 0x26
    8d92:	18ba      	adds	r2, r7, r2
    8d94:	7812      	ldrb	r2, [r2, #0]
    8d96:	2103      	movs	r1, #3
    8d98:	430a      	orrs	r2, r1
    8d9a:	701a      	strb	r2, [r3, #0]
    8d9c:	e0ab      	b.n	8ef6 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
    8d9e:	6a3a      	ldr	r2, [r7, #32]
    8da0:	69fb      	ldr	r3, [r7, #28]
    8da2:	429a      	cmp	r2, r3
    8da4:	d203      	bcs.n	8dae <create_name+0x22a>
    8da6:	69ba      	ldr	r2, [r7, #24]
    8da8:	697b      	ldr	r3, [r7, #20]
    8daa:	429a      	cmp	r2, r3
    8dac:	d12a      	bne.n	8e04 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
    8dae:	69fb      	ldr	r3, [r7, #28]
    8db0:	2b0b      	cmp	r3, #11
    8db2:	d108      	bne.n	8dc6 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
    8db4:	2326      	movs	r3, #38	; 0x26
    8db6:	18fb      	adds	r3, r7, r3
    8db8:	2226      	movs	r2, #38	; 0x26
    8dba:	18ba      	adds	r2, r7, r2
    8dbc:	7812      	ldrb	r2, [r2, #0]
    8dbe:	2103      	movs	r1, #3
    8dc0:	430a      	orrs	r2, r1
    8dc2:	701a      	strb	r2, [r3, #0]
    8dc4:	e0a9      	b.n	8f1a <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    8dc6:	69ba      	ldr	r2, [r7, #24]
    8dc8:	697b      	ldr	r3, [r7, #20]
    8dca:	429a      	cmp	r2, r3
    8dcc:	d007      	beq.n	8dde <create_name+0x25a>
    8dce:	2326      	movs	r3, #38	; 0x26
    8dd0:	18fb      	adds	r3, r7, r3
    8dd2:	2226      	movs	r2, #38	; 0x26
    8dd4:	18ba      	adds	r2, r7, r2
    8dd6:	7812      	ldrb	r2, [r2, #0]
    8dd8:	2103      	movs	r1, #3
    8dda:	430a      	orrs	r2, r1
    8ddc:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
    8dde:	69ba      	ldr	r2, [r7, #24]
    8de0:	697b      	ldr	r3, [r7, #20]
    8de2:	429a      	cmp	r2, r3
    8de4:	d900      	bls.n	8de8 <create_name+0x264>
    8de6:	e097      	b.n	8f18 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
    8de8:	697b      	ldr	r3, [r7, #20]
    8dea:	61bb      	str	r3, [r7, #24]
    8dec:	2308      	movs	r3, #8
    8dee:	623b      	str	r3, [r7, #32]
    8df0:	230b      	movs	r3, #11
    8df2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
    8df4:	2327      	movs	r3, #39	; 0x27
    8df6:	18fb      	adds	r3, r7, r3
    8df8:	2227      	movs	r2, #39	; 0x27
    8dfa:	18ba      	adds	r2, r7, r2
    8dfc:	7812      	ldrb	r2, [r2, #0]
    8dfe:	0092      	lsls	r2, r2, #2
    8e00:	701a      	strb	r2, [r3, #0]
    8e02:	e078      	b.n	8ef6 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
    8e04:	2324      	movs	r3, #36	; 0x24
    8e06:	18fb      	adds	r3, r7, r3
    8e08:	881b      	ldrh	r3, [r3, #0]
    8e0a:	2b7f      	cmp	r3, #127	; 0x7f
    8e0c:	d920      	bls.n	8e50 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    8e0e:	2324      	movs	r3, #36	; 0x24
    8e10:	18fc      	adds	r4, r7, r3
    8e12:	2324      	movs	r3, #36	; 0x24
    8e14:	18fb      	adds	r3, r7, r3
    8e16:	881b      	ldrh	r3, [r3, #0]
    8e18:	2100      	movs	r1, #0
    8e1a:	0018      	movs	r0, r3
    8e1c:	4b37      	ldr	r3, [pc, #220]	; (8efc <create_name+0x378>)
    8e1e:	4798      	blx	r3
    8e20:	0003      	movs	r3, r0
    8e22:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    8e24:	2324      	movs	r3, #36	; 0x24
    8e26:	18fb      	adds	r3, r7, r3
    8e28:	881b      	ldrh	r3, [r3, #0]
    8e2a:	2b00      	cmp	r3, #0
    8e2c:	d008      	beq.n	8e40 <create_name+0x2bc>
    8e2e:	2324      	movs	r3, #36	; 0x24
    8e30:	18fb      	adds	r3, r7, r3
    8e32:	881b      	ldrh	r3, [r3, #0]
    8e34:	3b80      	subs	r3, #128	; 0x80
    8e36:	4a36      	ldr	r2, [pc, #216]	; (8f10 <create_name+0x38c>)
    8e38:	5cd2      	ldrb	r2, [r2, r3]
    8e3a:	2324      	movs	r3, #36	; 0x24
    8e3c:	18fb      	adds	r3, r7, r3
    8e3e:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    8e40:	2326      	movs	r3, #38	; 0x26
    8e42:	18fb      	adds	r3, r7, r3
    8e44:	2226      	movs	r2, #38	; 0x26
    8e46:	18ba      	adds	r2, r7, r2
    8e48:	7812      	ldrb	r2, [r2, #0]
    8e4a:	2102      	movs	r1, #2
    8e4c:	430a      	orrs	r2, r1
    8e4e:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    8e50:	2324      	movs	r3, #36	; 0x24
    8e52:	18fb      	adds	r3, r7, r3
    8e54:	881b      	ldrh	r3, [r3, #0]
    8e56:	2b00      	cmp	r3, #0
    8e58:	d009      	beq.n	8e6e <create_name+0x2ea>
    8e5a:	2324      	movs	r3, #36	; 0x24
    8e5c:	18fb      	adds	r3, r7, r3
    8e5e:	881a      	ldrh	r2, [r3, #0]
    8e60:	4b2c      	ldr	r3, [pc, #176]	; (8f14 <create_name+0x390>)
    8e62:	0011      	movs	r1, r2
    8e64:	0018      	movs	r0, r3
    8e66:	4b27      	ldr	r3, [pc, #156]	; (8f04 <create_name+0x380>)
    8e68:	4798      	blx	r3
    8e6a:	1e03      	subs	r3, r0, #0
    8e6c:	d00c      	beq.n	8e88 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    8e6e:	2324      	movs	r3, #36	; 0x24
    8e70:	18fb      	adds	r3, r7, r3
    8e72:	225f      	movs	r2, #95	; 0x5f
    8e74:	801a      	strh	r2, [r3, #0]
    8e76:	2326      	movs	r3, #38	; 0x26
    8e78:	18fb      	adds	r3, r7, r3
    8e7a:	2226      	movs	r2, #38	; 0x26
    8e7c:	18ba      	adds	r2, r7, r2
    8e7e:	7812      	ldrb	r2, [r2, #0]
    8e80:	2103      	movs	r1, #3
    8e82:	430a      	orrs	r2, r1
    8e84:	701a      	strb	r2, [r3, #0]
    8e86:	e02b      	b.n	8ee0 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
    8e88:	2324      	movs	r3, #36	; 0x24
    8e8a:	18fb      	adds	r3, r7, r3
    8e8c:	881b      	ldrh	r3, [r3, #0]
    8e8e:	2b40      	cmp	r3, #64	; 0x40
    8e90:	d90d      	bls.n	8eae <create_name+0x32a>
    8e92:	2324      	movs	r3, #36	; 0x24
    8e94:	18fb      	adds	r3, r7, r3
    8e96:	881b      	ldrh	r3, [r3, #0]
    8e98:	2b5a      	cmp	r3, #90	; 0x5a
    8e9a:	d808      	bhi.n	8eae <create_name+0x32a>
					b |= 2;
    8e9c:	2327      	movs	r3, #39	; 0x27
    8e9e:	18fb      	adds	r3, r7, r3
    8ea0:	2227      	movs	r2, #39	; 0x27
    8ea2:	18ba      	adds	r2, r7, r2
    8ea4:	7812      	ldrb	r2, [r2, #0]
    8ea6:	2102      	movs	r1, #2
    8ea8:	430a      	orrs	r2, r1
    8eaa:	701a      	strb	r2, [r3, #0]
    8eac:	e018      	b.n	8ee0 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
    8eae:	2324      	movs	r3, #36	; 0x24
    8eb0:	18fb      	adds	r3, r7, r3
    8eb2:	881b      	ldrh	r3, [r3, #0]
    8eb4:	2b60      	cmp	r3, #96	; 0x60
    8eb6:	d913      	bls.n	8ee0 <create_name+0x35c>
    8eb8:	2324      	movs	r3, #36	; 0x24
    8eba:	18fb      	adds	r3, r7, r3
    8ebc:	881b      	ldrh	r3, [r3, #0]
    8ebe:	2b7a      	cmp	r3, #122	; 0x7a
    8ec0:	d80e      	bhi.n	8ee0 <create_name+0x35c>
						b |= 1; w -= 0x20;
    8ec2:	2327      	movs	r3, #39	; 0x27
    8ec4:	18fb      	adds	r3, r7, r3
    8ec6:	2227      	movs	r2, #39	; 0x27
    8ec8:	18ba      	adds	r2, r7, r2
    8eca:	7812      	ldrb	r2, [r2, #0]
    8ecc:	2101      	movs	r1, #1
    8ece:	430a      	orrs	r2, r1
    8ed0:	701a      	strb	r2, [r3, #0]
    8ed2:	2324      	movs	r3, #36	; 0x24
    8ed4:	18fb      	adds	r3, r7, r3
    8ed6:	2224      	movs	r2, #36	; 0x24
    8ed8:	18ba      	adds	r2, r7, r2
    8eda:	8812      	ldrh	r2, [r2, #0]
    8edc:	3a20      	subs	r2, #32
    8ede:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
    8ee0:	687b      	ldr	r3, [r7, #4]
    8ee2:	699a      	ldr	r2, [r3, #24]
    8ee4:	6a3b      	ldr	r3, [r7, #32]
    8ee6:	1c59      	adds	r1, r3, #1
    8ee8:	6239      	str	r1, [r7, #32]
    8eea:	18d3      	adds	r3, r2, r3
    8eec:	2224      	movs	r2, #36	; 0x24
    8eee:	18ba      	adds	r2, r7, r2
    8ef0:	8812      	ldrh	r2, [r2, #0]
    8ef2:	b2d2      	uxtb	r2, r2
    8ef4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
    8ef6:	e72b      	b.n	8d50 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
    8ef8:	46c0      	nop			; (mov r8, r8)
    8efa:	e00e      	b.n	8f1a <create_name+0x396>
    8efc:	0000a84d 	.word	0x0000a84d
    8f00:	0000bfcc 	.word	0x0000bfcc
    8f04:	000073a7 	.word	0x000073a7
    8f08:	7fffffff 	.word	0x7fffffff
    8f0c:	0000732d 	.word	0x0000732d
    8f10:	0000c014 	.word	0x0000c014
    8f14:	0000bfd8 	.word	0x0000bfd8
			if (si > di) break;			/* No extension */
    8f18:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    8f1a:	687b      	ldr	r3, [r7, #4]
    8f1c:	699b      	ldr	r3, [r3, #24]
    8f1e:	781b      	ldrb	r3, [r3, #0]
    8f20:	2be5      	cmp	r3, #229	; 0xe5
    8f22:	d103      	bne.n	8f2c <create_name+0x3a8>
    8f24:	687b      	ldr	r3, [r7, #4]
    8f26:	699b      	ldr	r3, [r3, #24]
    8f28:	2205      	movs	r2, #5
    8f2a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
    8f2c:	69fb      	ldr	r3, [r7, #28]
    8f2e:	2b08      	cmp	r3, #8
    8f30:	d106      	bne.n	8f40 <create_name+0x3bc>
    8f32:	2327      	movs	r3, #39	; 0x27
    8f34:	18fb      	adds	r3, r7, r3
    8f36:	2227      	movs	r2, #39	; 0x27
    8f38:	18ba      	adds	r2, r7, r2
    8f3a:	7812      	ldrb	r2, [r2, #0]
    8f3c:	0092      	lsls	r2, r2, #2
    8f3e:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    8f40:	2327      	movs	r3, #39	; 0x27
    8f42:	18fb      	adds	r3, r7, r3
    8f44:	781b      	ldrb	r3, [r3, #0]
    8f46:	220c      	movs	r2, #12
    8f48:	4013      	ands	r3, r2
    8f4a:	2b0c      	cmp	r3, #12
    8f4c:	d006      	beq.n	8f5c <create_name+0x3d8>
    8f4e:	2327      	movs	r3, #39	; 0x27
    8f50:	18fb      	adds	r3, r7, r3
    8f52:	781b      	ldrb	r3, [r3, #0]
    8f54:	2203      	movs	r2, #3
    8f56:	4013      	ands	r3, r2
    8f58:	2b03      	cmp	r3, #3
    8f5a:	d107      	bne.n	8f6c <create_name+0x3e8>
		cf |= NS_LFN;
    8f5c:	2326      	movs	r3, #38	; 0x26
    8f5e:	18fb      	adds	r3, r7, r3
    8f60:	2226      	movs	r2, #38	; 0x26
    8f62:	18ba      	adds	r2, r7, r2
    8f64:	7812      	ldrb	r2, [r2, #0]
    8f66:	2102      	movs	r1, #2
    8f68:	430a      	orrs	r2, r1
    8f6a:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    8f6c:	2326      	movs	r3, #38	; 0x26
    8f6e:	18fb      	adds	r3, r7, r3
    8f70:	781b      	ldrb	r3, [r3, #0]
    8f72:	2202      	movs	r2, #2
    8f74:	4013      	ands	r3, r2
    8f76:	d11d      	bne.n	8fb4 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    8f78:	2327      	movs	r3, #39	; 0x27
    8f7a:	18fb      	adds	r3, r7, r3
    8f7c:	781b      	ldrb	r3, [r3, #0]
    8f7e:	2203      	movs	r2, #3
    8f80:	4013      	ands	r3, r2
    8f82:	2b01      	cmp	r3, #1
    8f84:	d107      	bne.n	8f96 <create_name+0x412>
    8f86:	2326      	movs	r3, #38	; 0x26
    8f88:	18fb      	adds	r3, r7, r3
    8f8a:	2226      	movs	r2, #38	; 0x26
    8f8c:	18ba      	adds	r2, r7, r2
    8f8e:	7812      	ldrb	r2, [r2, #0]
    8f90:	2110      	movs	r1, #16
    8f92:	430a      	orrs	r2, r1
    8f94:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    8f96:	2327      	movs	r3, #39	; 0x27
    8f98:	18fb      	adds	r3, r7, r3
    8f9a:	781b      	ldrb	r3, [r3, #0]
    8f9c:	220c      	movs	r2, #12
    8f9e:	4013      	ands	r3, r2
    8fa0:	2b04      	cmp	r3, #4
    8fa2:	d107      	bne.n	8fb4 <create_name+0x430>
    8fa4:	2326      	movs	r3, #38	; 0x26
    8fa6:	18fb      	adds	r3, r7, r3
    8fa8:	2226      	movs	r2, #38	; 0x26
    8faa:	18ba      	adds	r2, r7, r2
    8fac:	7812      	ldrb	r2, [r2, #0]
    8fae:	2108      	movs	r1, #8
    8fb0:	430a      	orrs	r2, r1
    8fb2:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
    8fb4:	687b      	ldr	r3, [r7, #4]
    8fb6:	699b      	ldr	r3, [r3, #24]
    8fb8:	330b      	adds	r3, #11
    8fba:	2226      	movs	r2, #38	; 0x26
    8fbc:	18ba      	adds	r2, r7, r2
    8fbe:	7812      	ldrb	r2, [r2, #0]
    8fc0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
    8fc2:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
    8fc4:	0018      	movs	r0, r3
    8fc6:	46bd      	mov	sp, r7
    8fc8:	b00b      	add	sp, #44	; 0x2c
    8fca:	bd90      	pop	{r4, r7, pc}

00008fcc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    8fcc:	b590      	push	{r4, r7, lr}
    8fce:	b085      	sub	sp, #20
    8fd0:	af00      	add	r7, sp, #0
    8fd2:	6078      	str	r0, [r7, #4]
    8fd4:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    8fd6:	683b      	ldr	r3, [r7, #0]
    8fd8:	781b      	ldrb	r3, [r3, #0]
    8fda:	2b2f      	cmp	r3, #47	; 0x2f
    8fdc:	d003      	beq.n	8fe6 <follow_path+0x1a>
    8fde:	683b      	ldr	r3, [r7, #0]
    8fe0:	781b      	ldrb	r3, [r3, #0]
    8fe2:	2b5c      	cmp	r3, #92	; 0x5c
    8fe4:	d102      	bne.n	8fec <follow_path+0x20>
		path++;
    8fe6:	683b      	ldr	r3, [r7, #0]
    8fe8:	3301      	adds	r3, #1
    8fea:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
    8fec:	687b      	ldr	r3, [r7, #4]
    8fee:	2200      	movs	r2, #0
    8ff0:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    8ff2:	683b      	ldr	r3, [r7, #0]
    8ff4:	781b      	ldrb	r3, [r3, #0]
    8ff6:	2b1f      	cmp	r3, #31
    8ff8:	d80c      	bhi.n	9014 <follow_path+0x48>
		res = dir_sdi(dj, 0);
    8ffa:	230f      	movs	r3, #15
    8ffc:	18fc      	adds	r4, r7, r3
    8ffe:	687b      	ldr	r3, [r7, #4]
    9000:	2100      	movs	r1, #0
    9002:	0018      	movs	r0, r3
    9004:	4b3c      	ldr	r3, [pc, #240]	; (90f8 <follow_path+0x12c>)
    9006:	4798      	blx	r3
    9008:	0003      	movs	r3, r0
    900a:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
    900c:	687b      	ldr	r3, [r7, #4]
    900e:	2200      	movs	r2, #0
    9010:	615a      	str	r2, [r3, #20]
    9012:	e06a      	b.n	90ea <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    9014:	230f      	movs	r3, #15
    9016:	18fc      	adds	r4, r7, r3
    9018:	003a      	movs	r2, r7
    901a:	687b      	ldr	r3, [r7, #4]
    901c:	0011      	movs	r1, r2
    901e:	0018      	movs	r0, r3
    9020:	4b36      	ldr	r3, [pc, #216]	; (90fc <follow_path+0x130>)
    9022:	4798      	blx	r3
    9024:	0003      	movs	r3, r0
    9026:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    9028:	230f      	movs	r3, #15
    902a:	18fb      	adds	r3, r7, r3
    902c:	781b      	ldrb	r3, [r3, #0]
    902e:	2b00      	cmp	r3, #0
    9030:	d154      	bne.n	90dc <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
    9032:	230f      	movs	r3, #15
    9034:	18fc      	adds	r4, r7, r3
    9036:	687b      	ldr	r3, [r7, #4]
    9038:	0018      	movs	r0, r3
    903a:	4b31      	ldr	r3, [pc, #196]	; (9100 <follow_path+0x134>)
    903c:	4798      	blx	r3
    903e:	0003      	movs	r3, r0
    9040:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
    9042:	687b      	ldr	r3, [r7, #4]
    9044:	699a      	ldr	r2, [r3, #24]
    9046:	230e      	movs	r3, #14
    9048:	18fb      	adds	r3, r7, r3
    904a:	7ad2      	ldrb	r2, [r2, #11]
    904c:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
    904e:	230f      	movs	r3, #15
    9050:	18fb      	adds	r3, r7, r3
    9052:	781b      	ldrb	r3, [r3, #0]
    9054:	2b00      	cmp	r3, #0
    9056:	d00f      	beq.n	9078 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    9058:	230f      	movs	r3, #15
    905a:	18fb      	adds	r3, r7, r3
    905c:	781b      	ldrb	r3, [r3, #0]
    905e:	2b04      	cmp	r3, #4
    9060:	d13e      	bne.n	90e0 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    9062:	230e      	movs	r3, #14
    9064:	18fb      	adds	r3, r7, r3
    9066:	781b      	ldrb	r3, [r3, #0]
    9068:	2204      	movs	r2, #4
    906a:	4013      	ands	r3, r2
    906c:	d13a      	bne.n	90e4 <follow_path+0x118>
    906e:	230f      	movs	r3, #15
    9070:	18fb      	adds	r3, r7, r3
    9072:	2205      	movs	r2, #5
    9074:	701a      	strb	r2, [r3, #0]
				}
				break;
    9076:	e035      	b.n	90e4 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    9078:	230e      	movs	r3, #14
    907a:	18fb      	adds	r3, r7, r3
    907c:	781b      	ldrb	r3, [r3, #0]
    907e:	2204      	movs	r2, #4
    9080:	4013      	ands	r3, r2
    9082:	d131      	bne.n	90e8 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    9084:	687b      	ldr	r3, [r7, #4]
    9086:	695b      	ldr	r3, [r3, #20]
    9088:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    908a:	68bb      	ldr	r3, [r7, #8]
    908c:	330b      	adds	r3, #11
    908e:	781b      	ldrb	r3, [r3, #0]
    9090:	001a      	movs	r2, r3
    9092:	2310      	movs	r3, #16
    9094:	4013      	ands	r3, r2
    9096:	d104      	bne.n	90a2 <follow_path+0xd6>
				res = FR_NO_PATH; break;
    9098:	230f      	movs	r3, #15
    909a:	18fb      	adds	r3, r7, r3
    909c:	2205      	movs	r2, #5
    909e:	701a      	strb	r2, [r3, #0]
    90a0:	e023      	b.n	90ea <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
    90a2:	68bb      	ldr	r3, [r7, #8]
    90a4:	3315      	adds	r3, #21
    90a6:	781b      	ldrb	r3, [r3, #0]
    90a8:	021b      	lsls	r3, r3, #8
    90aa:	b21a      	sxth	r2, r3
    90ac:	68bb      	ldr	r3, [r7, #8]
    90ae:	3314      	adds	r3, #20
    90b0:	781b      	ldrb	r3, [r3, #0]
    90b2:	b21b      	sxth	r3, r3
    90b4:	4313      	orrs	r3, r2
    90b6:	b21b      	sxth	r3, r3
    90b8:	b29b      	uxth	r3, r3
    90ba:	041b      	lsls	r3, r3, #16
    90bc:	68ba      	ldr	r2, [r7, #8]
    90be:	321b      	adds	r2, #27
    90c0:	7812      	ldrb	r2, [r2, #0]
    90c2:	0212      	lsls	r2, r2, #8
    90c4:	b211      	sxth	r1, r2
    90c6:	68ba      	ldr	r2, [r7, #8]
    90c8:	321a      	adds	r2, #26
    90ca:	7812      	ldrb	r2, [r2, #0]
    90cc:	b212      	sxth	r2, r2
    90ce:	430a      	orrs	r2, r1
    90d0:	b212      	sxth	r2, r2
    90d2:	b292      	uxth	r2, r2
    90d4:	431a      	orrs	r2, r3
    90d6:	687b      	ldr	r3, [r7, #4]
    90d8:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
    90da:	e79b      	b.n	9014 <follow_path+0x48>
			if (res != FR_OK) break;
    90dc:	46c0      	nop			; (mov r8, r8)
    90de:	e004      	b.n	90ea <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    90e0:	46c0      	nop			; (mov r8, r8)
    90e2:	e002      	b.n	90ea <follow_path+0x11e>
				break;
    90e4:	46c0      	nop			; (mov r8, r8)
    90e6:	e000      	b.n	90ea <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    90e8:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    90ea:	230f      	movs	r3, #15
    90ec:	18fb      	adds	r3, r7, r3
    90ee:	781b      	ldrb	r3, [r3, #0]
}
    90f0:	0018      	movs	r0, r3
    90f2:	46bd      	mov	sp, r7
    90f4:	b005      	add	sp, #20
    90f6:	bd90      	pop	{r4, r7, pc}
    90f8:	00007c1d 	.word	0x00007c1d
    90fc:	00008b85 	.word	0x00008b85
    9100:	00008385 	.word	0x00008385

00009104 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    9104:	b590      	push	{r4, r7, lr}
    9106:	b083      	sub	sp, #12
    9108:	af00      	add	r7, sp, #0
    910a:	6078      	str	r0, [r7, #4]
    910c:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    910e:	687b      	ldr	r3, [r7, #4]
    9110:	7858      	ldrb	r0, [r3, #1]
    9112:	687b      	ldr	r3, [r7, #4]
    9114:	3330      	adds	r3, #48	; 0x30
    9116:	0019      	movs	r1, r3
    9118:	683a      	ldr	r2, [r7, #0]
    911a:	2301      	movs	r3, #1
    911c:	4c2a      	ldr	r4, [pc, #168]	; (91c8 <check_fs+0xc4>)
    911e:	47a0      	blx	r4
    9120:	1e03      	subs	r3, r0, #0
    9122:	d001      	beq.n	9128 <check_fs+0x24>
		return 3;
    9124:	2303      	movs	r3, #3
    9126:	e04b      	b.n	91c0 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    9128:	687b      	ldr	r3, [r7, #4]
    912a:	4a28      	ldr	r2, [pc, #160]	; (91cc <check_fs+0xc8>)
    912c:	4694      	mov	ip, r2
    912e:	4463      	add	r3, ip
    9130:	3301      	adds	r3, #1
    9132:	781b      	ldrb	r3, [r3, #0]
    9134:	021b      	lsls	r3, r3, #8
    9136:	b21a      	sxth	r2, r3
    9138:	687b      	ldr	r3, [r7, #4]
    913a:	4924      	ldr	r1, [pc, #144]	; (91cc <check_fs+0xc8>)
    913c:	5c5b      	ldrb	r3, [r3, r1]
    913e:	b21b      	sxth	r3, r3
    9140:	4313      	orrs	r3, r2
    9142:	b21b      	sxth	r3, r3
    9144:	4a22      	ldr	r2, [pc, #136]	; (91d0 <check_fs+0xcc>)
    9146:	4293      	cmp	r3, r2
    9148:	d001      	beq.n	914e <check_fs+0x4a>
		return 2;
    914a:	2302      	movs	r3, #2
    914c:	e038      	b.n	91c0 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    914e:	687b      	ldr	r3, [r7, #4]
    9150:	3366      	adds	r3, #102	; 0x66
    9152:	3303      	adds	r3, #3
    9154:	781b      	ldrb	r3, [r3, #0]
    9156:	061a      	lsls	r2, r3, #24
    9158:	687b      	ldr	r3, [r7, #4]
    915a:	3366      	adds	r3, #102	; 0x66
    915c:	3302      	adds	r3, #2
    915e:	781b      	ldrb	r3, [r3, #0]
    9160:	041b      	lsls	r3, r3, #16
    9162:	4313      	orrs	r3, r2
    9164:	687a      	ldr	r2, [r7, #4]
    9166:	3266      	adds	r2, #102	; 0x66
    9168:	3201      	adds	r2, #1
    916a:	7812      	ldrb	r2, [r2, #0]
    916c:	0212      	lsls	r2, r2, #8
    916e:	4313      	orrs	r3, r2
    9170:	687a      	ldr	r2, [r7, #4]
    9172:	2166      	movs	r1, #102	; 0x66
    9174:	5c52      	ldrb	r2, [r2, r1]
    9176:	4313      	orrs	r3, r2
    9178:	021b      	lsls	r3, r3, #8
    917a:	0a1b      	lsrs	r3, r3, #8
    917c:	4a15      	ldr	r2, [pc, #84]	; (91d4 <check_fs+0xd0>)
    917e:	4293      	cmp	r3, r2
    9180:	d101      	bne.n	9186 <check_fs+0x82>
		return 0;
    9182:	2300      	movs	r3, #0
    9184:	e01c      	b.n	91c0 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    9186:	687b      	ldr	r3, [r7, #4]
    9188:	3382      	adds	r3, #130	; 0x82
    918a:	3303      	adds	r3, #3
    918c:	781b      	ldrb	r3, [r3, #0]
    918e:	061a      	lsls	r2, r3, #24
    9190:	687b      	ldr	r3, [r7, #4]
    9192:	3382      	adds	r3, #130	; 0x82
    9194:	3302      	adds	r3, #2
    9196:	781b      	ldrb	r3, [r3, #0]
    9198:	041b      	lsls	r3, r3, #16
    919a:	4313      	orrs	r3, r2
    919c:	687a      	ldr	r2, [r7, #4]
    919e:	3282      	adds	r2, #130	; 0x82
    91a0:	3201      	adds	r2, #1
    91a2:	7812      	ldrb	r2, [r2, #0]
    91a4:	0212      	lsls	r2, r2, #8
    91a6:	4313      	orrs	r3, r2
    91a8:	687a      	ldr	r2, [r7, #4]
    91aa:	2182      	movs	r1, #130	; 0x82
    91ac:	5c52      	ldrb	r2, [r2, r1]
    91ae:	4313      	orrs	r3, r2
    91b0:	021b      	lsls	r3, r3, #8
    91b2:	0a1b      	lsrs	r3, r3, #8
    91b4:	4a07      	ldr	r2, [pc, #28]	; (91d4 <check_fs+0xd0>)
    91b6:	4293      	cmp	r3, r2
    91b8:	d101      	bne.n	91be <check_fs+0xba>
		return 0;
    91ba:	2300      	movs	r3, #0
    91bc:	e000      	b.n	91c0 <check_fs+0xbc>

	return 1;
    91be:	2301      	movs	r3, #1
}
    91c0:	0018      	movs	r0, r3
    91c2:	46bd      	mov	sp, r7
    91c4:	b003      	add	sp, #12
    91c6:	bd90      	pop	{r4, r7, pc}
    91c8:	00006fed 	.word	0x00006fed
    91cc:	0000022e 	.word	0x0000022e
    91d0:	ffffaa55 	.word	0xffffaa55
    91d4:	00544146 	.word	0x00544146

000091d8 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    91d8:	b590      	push	{r4, r7, lr}
    91da:	b093      	sub	sp, #76	; 0x4c
    91dc:	af00      	add	r7, sp, #0
    91de:	60f8      	str	r0, [r7, #12]
    91e0:	60b9      	str	r1, [r7, #8]
    91e2:	1dfb      	adds	r3, r7, #7
    91e4:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    91e6:	68fb      	ldr	r3, [r7, #12]
    91e8:	681b      	ldr	r3, [r3, #0]
    91ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    91ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    91ee:	781b      	ldrb	r3, [r3, #0]
    91f0:	3b30      	subs	r3, #48	; 0x30
    91f2:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    91f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    91f6:	2b09      	cmp	r3, #9
    91f8:	d80b      	bhi.n	9212 <chk_mounted+0x3a>
    91fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    91fc:	3301      	adds	r3, #1
    91fe:	781b      	ldrb	r3, [r3, #0]
    9200:	2b3a      	cmp	r3, #58	; 0x3a
    9202:	d106      	bne.n	9212 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
    9204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9206:	3302      	adds	r3, #2
    9208:	62fb      	str	r3, [r7, #44]	; 0x2c
    920a:	68fb      	ldr	r3, [r7, #12]
    920c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    920e:	601a      	str	r2, [r3, #0]
    9210:	e001      	b.n	9216 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    9212:	2300      	movs	r3, #0
    9214:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    9216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9218:	2b00      	cmp	r3, #0
    921a:	d001      	beq.n	9220 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
    921c:	230b      	movs	r3, #11
    921e:	e2af      	b.n	9780 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    9220:	4bc5      	ldr	r3, [pc, #788]	; (9538 <chk_mounted+0x360>)
    9222:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9224:	0092      	lsls	r2, r2, #2
    9226:	58d3      	ldr	r3, [r2, r3]
    9228:	62bb      	str	r3, [r7, #40]	; 0x28
    922a:	68bb      	ldr	r3, [r7, #8]
    922c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    922e:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    9230:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9232:	2b00      	cmp	r3, #0
    9234:	d101      	bne.n	923a <chk_mounted+0x62>
    9236:	230c      	movs	r3, #12
    9238:	e2a2      	b.n	9780 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    923c:	781b      	ldrb	r3, [r3, #0]
    923e:	2b00      	cmp	r3, #0
    9240:	d01c      	beq.n	927c <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
    9242:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9244:	785b      	ldrb	r3, [r3, #1]
    9246:	2227      	movs	r2, #39	; 0x27
    9248:	18bc      	adds	r4, r7, r2
    924a:	0018      	movs	r0, r3
    924c:	4bbb      	ldr	r3, [pc, #748]	; (953c <chk_mounted+0x364>)
    924e:	4798      	blx	r3
    9250:	0003      	movs	r3, r0
    9252:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    9254:	2327      	movs	r3, #39	; 0x27
    9256:	18fb      	adds	r3, r7, r3
    9258:	781b      	ldrb	r3, [r3, #0]
    925a:	2201      	movs	r2, #1
    925c:	4013      	ands	r3, r2
    925e:	d10d      	bne.n	927c <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    9260:	1dfb      	adds	r3, r7, #7
    9262:	781b      	ldrb	r3, [r3, #0]
    9264:	2b00      	cmp	r3, #0
    9266:	d007      	beq.n	9278 <chk_mounted+0xa0>
    9268:	2327      	movs	r3, #39	; 0x27
    926a:	18fb      	adds	r3, r7, r3
    926c:	781b      	ldrb	r3, [r3, #0]
    926e:	2204      	movs	r2, #4
    9270:	4013      	ands	r3, r2
    9272:	d001      	beq.n	9278 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
    9274:	230a      	movs	r3, #10
    9276:	e283      	b.n	9780 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
    9278:	2300      	movs	r3, #0
    927a:	e281      	b.n	9780 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    927c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    927e:	2200      	movs	r2, #0
    9280:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    9282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9284:	b2da      	uxtb	r2, r3
    9286:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9288:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    928c:	785b      	ldrb	r3, [r3, #1]
    928e:	2227      	movs	r2, #39	; 0x27
    9290:	18bc      	adds	r4, r7, r2
    9292:	0018      	movs	r0, r3
    9294:	4baa      	ldr	r3, [pc, #680]	; (9540 <chk_mounted+0x368>)
    9296:	4798      	blx	r3
    9298:	0003      	movs	r3, r0
    929a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    929c:	2327      	movs	r3, #39	; 0x27
    929e:	18fb      	adds	r3, r7, r3
    92a0:	781b      	ldrb	r3, [r3, #0]
    92a2:	2201      	movs	r2, #1
    92a4:	4013      	ands	r3, r2
    92a6:	d001      	beq.n	92ac <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    92a8:	2303      	movs	r3, #3
    92aa:	e269      	b.n	9780 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    92ac:	1dfb      	adds	r3, r7, #7
    92ae:	781b      	ldrb	r3, [r3, #0]
    92b0:	2b00      	cmp	r3, #0
    92b2:	d007      	beq.n	92c4 <chk_mounted+0xec>
    92b4:	2327      	movs	r3, #39	; 0x27
    92b6:	18fb      	adds	r3, r7, r3
    92b8:	781b      	ldrb	r3, [r3, #0]
    92ba:	2204      	movs	r2, #4
    92bc:	4013      	ands	r3, r2
    92be:	d001      	beq.n	92c4 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
    92c0:	230a      	movs	r3, #10
    92c2:	e25d      	b.n	9780 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    92c4:	2300      	movs	r3, #0
    92c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    92c8:	2347      	movs	r3, #71	; 0x47
    92ca:	18fc      	adds	r4, r7, r3
    92cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    92ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    92d0:	0011      	movs	r1, r2
    92d2:	0018      	movs	r0, r3
    92d4:	4b9b      	ldr	r3, [pc, #620]	; (9544 <chk_mounted+0x36c>)
    92d6:	4798      	blx	r3
    92d8:	0003      	movs	r3, r0
    92da:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    92dc:	2347      	movs	r3, #71	; 0x47
    92de:	18fb      	adds	r3, r7, r3
    92e0:	781b      	ldrb	r3, [r3, #0]
    92e2:	2b01      	cmp	r3, #1
    92e4:	d13b      	bne.n	935e <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    92e6:	2346      	movs	r3, #70	; 0x46
    92e8:	18fb      	adds	r3, r7, r3
    92ea:	2200      	movs	r2, #0
    92ec:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
    92ee:	2346      	movs	r3, #70	; 0x46
    92f0:	18fb      	adds	r3, r7, r3
    92f2:	781b      	ldrb	r3, [r3, #0]
    92f4:	2b00      	cmp	r3, #0
    92f6:	d006      	beq.n	9306 <chk_mounted+0x12e>
    92f8:	2346      	movs	r3, #70	; 0x46
    92fa:	18fb      	adds	r3, r7, r3
    92fc:	781a      	ldrb	r2, [r3, #0]
    92fe:	2346      	movs	r3, #70	; 0x46
    9300:	18fb      	adds	r3, r7, r3
    9302:	3a01      	subs	r2, #1
    9304:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    9306:	2346      	movs	r3, #70	; 0x46
    9308:	18fb      	adds	r3, r7, r3
    930a:	781b      	ldrb	r3, [r3, #0]
    930c:	011b      	lsls	r3, r3, #4
    930e:	33bf      	adds	r3, #191	; 0xbf
    9310:	33ff      	adds	r3, #255	; 0xff
    9312:	3330      	adds	r3, #48	; 0x30
    9314:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9316:	18d3      	adds	r3, r2, r3
    9318:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
    931a:	6a3b      	ldr	r3, [r7, #32]
    931c:	3304      	adds	r3, #4
    931e:	781b      	ldrb	r3, [r3, #0]
    9320:	2b00      	cmp	r3, #0
    9322:	d01c      	beq.n	935e <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    9324:	6a3b      	ldr	r3, [r7, #32]
    9326:	330b      	adds	r3, #11
    9328:	781b      	ldrb	r3, [r3, #0]
    932a:	061a      	lsls	r2, r3, #24
    932c:	6a3b      	ldr	r3, [r7, #32]
    932e:	330a      	adds	r3, #10
    9330:	781b      	ldrb	r3, [r3, #0]
    9332:	041b      	lsls	r3, r3, #16
    9334:	4313      	orrs	r3, r2
    9336:	6a3a      	ldr	r2, [r7, #32]
    9338:	3209      	adds	r2, #9
    933a:	7812      	ldrb	r2, [r2, #0]
    933c:	0212      	lsls	r2, r2, #8
    933e:	4313      	orrs	r3, r2
    9340:	6a3a      	ldr	r2, [r7, #32]
    9342:	3208      	adds	r2, #8
    9344:	7812      	ldrb	r2, [r2, #0]
    9346:	4313      	orrs	r3, r2
    9348:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
    934a:	2347      	movs	r3, #71	; 0x47
    934c:	18fc      	adds	r4, r7, r3
    934e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9350:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9352:	0011      	movs	r1, r2
    9354:	0018      	movs	r0, r3
    9356:	4b7b      	ldr	r3, [pc, #492]	; (9544 <chk_mounted+0x36c>)
    9358:	4798      	blx	r3
    935a:	0003      	movs	r3, r0
    935c:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    935e:	2347      	movs	r3, #71	; 0x47
    9360:	18fb      	adds	r3, r7, r3
    9362:	781b      	ldrb	r3, [r3, #0]
    9364:	2b03      	cmp	r3, #3
    9366:	d101      	bne.n	936c <chk_mounted+0x194>
    9368:	2301      	movs	r3, #1
    936a:	e209      	b.n	9780 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    936c:	2347      	movs	r3, #71	; 0x47
    936e:	18fb      	adds	r3, r7, r3
    9370:	781b      	ldrb	r3, [r3, #0]
    9372:	2b00      	cmp	r3, #0
    9374:	d001      	beq.n	937a <chk_mounted+0x1a2>
    9376:	230d      	movs	r3, #13
    9378:	e202      	b.n	9780 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    937c:	223c      	movs	r2, #60	; 0x3c
    937e:	5c9b      	ldrb	r3, [r3, r2]
    9380:	021b      	lsls	r3, r3, #8
    9382:	b21a      	sxth	r2, r3
    9384:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9386:	213b      	movs	r1, #59	; 0x3b
    9388:	5c5b      	ldrb	r3, [r3, r1]
    938a:	b21b      	sxth	r3, r3
    938c:	4313      	orrs	r3, r2
    938e:	b21a      	sxth	r2, r3
    9390:	2380      	movs	r3, #128	; 0x80
    9392:	009b      	lsls	r3, r3, #2
    9394:	429a      	cmp	r2, r3
    9396:	d001      	beq.n	939c <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
    9398:	230d      	movs	r3, #13
    939a:	e1f1      	b.n	9780 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    939e:	2247      	movs	r2, #71	; 0x47
    93a0:	5c9b      	ldrb	r3, [r3, r2]
    93a2:	021b      	lsls	r3, r3, #8
    93a4:	b21a      	sxth	r2, r3
    93a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93a8:	2146      	movs	r1, #70	; 0x46
    93aa:	5c5b      	ldrb	r3, [r3, r1]
    93ac:	b21b      	sxth	r3, r3
    93ae:	4313      	orrs	r3, r2
    93b0:	b21b      	sxth	r3, r3
    93b2:	b29b      	uxth	r3, r3
    93b4:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    93b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    93b8:	2b00      	cmp	r3, #0
    93ba:	d112      	bne.n	93e2 <chk_mounted+0x20a>
    93bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93be:	2257      	movs	r2, #87	; 0x57
    93c0:	5c9b      	ldrb	r3, [r3, r2]
    93c2:	061a      	lsls	r2, r3, #24
    93c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93c6:	2156      	movs	r1, #86	; 0x56
    93c8:	5c5b      	ldrb	r3, [r3, r1]
    93ca:	041b      	lsls	r3, r3, #16
    93cc:	4313      	orrs	r3, r2
    93ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
    93d0:	2155      	movs	r1, #85	; 0x55
    93d2:	5c52      	ldrb	r2, [r2, r1]
    93d4:	0212      	lsls	r2, r2, #8
    93d6:	4313      	orrs	r3, r2
    93d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    93da:	2154      	movs	r1, #84	; 0x54
    93dc:	5c52      	ldrb	r2, [r2, r1]
    93de:	4313      	orrs	r3, r2
    93e0:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
    93e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    93e6:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    93e8:	231f      	movs	r3, #31
    93ea:	18fb      	adds	r3, r7, r3
    93ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
    93ee:	2140      	movs	r1, #64	; 0x40
    93f0:	5c52      	ldrb	r2, [r2, r1]
    93f2:	701a      	strb	r2, [r3, #0]
    93f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93f6:	221f      	movs	r2, #31
    93f8:	18ba      	adds	r2, r7, r2
    93fa:	7812      	ldrb	r2, [r2, #0]
    93fc:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    93fe:	231f      	movs	r3, #31
    9400:	18fb      	adds	r3, r7, r3
    9402:	781b      	ldrb	r3, [r3, #0]
    9404:	2b01      	cmp	r3, #1
    9406:	d006      	beq.n	9416 <chk_mounted+0x23e>
    9408:	231f      	movs	r3, #31
    940a:	18fb      	adds	r3, r7, r3
    940c:	781b      	ldrb	r3, [r3, #0]
    940e:	2b02      	cmp	r3, #2
    9410:	d001      	beq.n	9416 <chk_mounted+0x23e>
    9412:	230d      	movs	r3, #13
    9414:	e1b4      	b.n	9780 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
    9416:	231f      	movs	r3, #31
    9418:	18fb      	adds	r3, r7, r3
    941a:	781a      	ldrb	r2, [r3, #0]
    941c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    941e:	4353      	muls	r3, r2
    9420:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    9422:	231f      	movs	r3, #31
    9424:	18fb      	adds	r3, r7, r3
    9426:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9428:	213d      	movs	r1, #61	; 0x3d
    942a:	5c52      	ldrb	r2, [r2, r1]
    942c:	701a      	strb	r2, [r3, #0]
    942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9430:	221f      	movs	r2, #31
    9432:	18ba      	adds	r2, r7, r2
    9434:	7812      	ldrb	r2, [r2, #0]
    9436:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    9438:	231f      	movs	r3, #31
    943a:	18fb      	adds	r3, r7, r3
    943c:	781b      	ldrb	r3, [r3, #0]
    943e:	2b00      	cmp	r3, #0
    9440:	d008      	beq.n	9454 <chk_mounted+0x27c>
    9442:	231f      	movs	r3, #31
    9444:	18fb      	adds	r3, r7, r3
    9446:	781b      	ldrb	r3, [r3, #0]
    9448:	221f      	movs	r2, #31
    944a:	18ba      	adds	r2, r7, r2
    944c:	7812      	ldrb	r2, [r2, #0]
    944e:	3a01      	subs	r2, #1
    9450:	4013      	ands	r3, r2
    9452:	d001      	beq.n	9458 <chk_mounted+0x280>
    9454:	230d      	movs	r3, #13
    9456:	e193      	b.n	9780 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    9458:	6abb      	ldr	r3, [r7, #40]	; 0x28
    945a:	2242      	movs	r2, #66	; 0x42
    945c:	5c9b      	ldrb	r3, [r3, r2]
    945e:	021b      	lsls	r3, r3, #8
    9460:	b21a      	sxth	r2, r3
    9462:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9464:	2141      	movs	r1, #65	; 0x41
    9466:	5c5b      	ldrb	r3, [r3, r1]
    9468:	b21b      	sxth	r3, r3
    946a:	4313      	orrs	r3, r2
    946c:	b21b      	sxth	r3, r3
    946e:	b29a      	uxth	r2, r3
    9470:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9472:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    9474:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9476:	891b      	ldrh	r3, [r3, #8]
    9478:	220f      	movs	r2, #15
    947a:	4013      	ands	r3, r2
    947c:	b29b      	uxth	r3, r3
    947e:	2b00      	cmp	r3, #0
    9480:	d001      	beq.n	9486 <chk_mounted+0x2ae>
    9482:	230d      	movs	r3, #13
    9484:	e17c      	b.n	9780 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    9486:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9488:	2244      	movs	r2, #68	; 0x44
    948a:	5c9b      	ldrb	r3, [r3, r2]
    948c:	021b      	lsls	r3, r3, #8
    948e:	b21a      	sxth	r2, r3
    9490:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9492:	2143      	movs	r1, #67	; 0x43
    9494:	5c5b      	ldrb	r3, [r3, r1]
    9496:	b21b      	sxth	r3, r3
    9498:	4313      	orrs	r3, r2
    949a:	b21b      	sxth	r3, r3
    949c:	b29b      	uxth	r3, r3
    949e:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    94a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    94a2:	2b00      	cmp	r3, #0
    94a4:	d112      	bne.n	94cc <chk_mounted+0x2f4>
    94a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94a8:	2253      	movs	r2, #83	; 0x53
    94aa:	5c9b      	ldrb	r3, [r3, r2]
    94ac:	061a      	lsls	r2, r3, #24
    94ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94b0:	2152      	movs	r1, #82	; 0x52
    94b2:	5c5b      	ldrb	r3, [r3, r1]
    94b4:	041b      	lsls	r3, r3, #16
    94b6:	4313      	orrs	r3, r2
    94b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    94ba:	2151      	movs	r1, #81	; 0x51
    94bc:	5c52      	ldrb	r2, [r2, r1]
    94be:	0212      	lsls	r2, r2, #8
    94c0:	4313      	orrs	r3, r2
    94c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    94c4:	2150      	movs	r1, #80	; 0x50
    94c6:	5c52      	ldrb	r2, [r2, r1]
    94c8:	4313      	orrs	r3, r2
    94ca:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    94cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94ce:	223f      	movs	r2, #63	; 0x3f
    94d0:	5c9b      	ldrb	r3, [r3, r2]
    94d2:	021b      	lsls	r3, r3, #8
    94d4:	b21a      	sxth	r2, r3
    94d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94d8:	213e      	movs	r1, #62	; 0x3e
    94da:	5c5b      	ldrb	r3, [r3, r1]
    94dc:	b21b      	sxth	r3, r3
    94de:	4313      	orrs	r3, r2
    94e0:	b21a      	sxth	r2, r3
    94e2:	231c      	movs	r3, #28
    94e4:	18fb      	adds	r3, r7, r3
    94e6:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    94e8:	231c      	movs	r3, #28
    94ea:	18fb      	adds	r3, r7, r3
    94ec:	881b      	ldrh	r3, [r3, #0]
    94ee:	2b00      	cmp	r3, #0
    94f0:	d101      	bne.n	94f6 <chk_mounted+0x31e>
    94f2:	230d      	movs	r3, #13
    94f4:	e144      	b.n	9780 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    94f6:	231c      	movs	r3, #28
    94f8:	18fb      	adds	r3, r7, r3
    94fa:	881a      	ldrh	r2, [r3, #0]
    94fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    94fe:	18d3      	adds	r3, r2, r3
    9500:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9502:	8912      	ldrh	r2, [r2, #8]
    9504:	0912      	lsrs	r2, r2, #4
    9506:	b292      	uxth	r2, r2
    9508:	189b      	adds	r3, r3, r2
    950a:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    950c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    950e:	69bb      	ldr	r3, [r7, #24]
    9510:	429a      	cmp	r2, r3
    9512:	d201      	bcs.n	9518 <chk_mounted+0x340>
    9514:	230d      	movs	r3, #13
    9516:	e133      	b.n	9780 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    9518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    951a:	69bb      	ldr	r3, [r7, #24]
    951c:	1ad2      	subs	r2, r2, r3
    951e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9520:	789b      	ldrb	r3, [r3, #2]
    9522:	0019      	movs	r1, r3
    9524:	4b08      	ldr	r3, [pc, #32]	; (9548 <chk_mounted+0x370>)
    9526:	0010      	movs	r0, r2
    9528:	4798      	blx	r3
    952a:	0003      	movs	r3, r0
    952c:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    952e:	697b      	ldr	r3, [r7, #20]
    9530:	2b00      	cmp	r3, #0
    9532:	d10b      	bne.n	954c <chk_mounted+0x374>
    9534:	230d      	movs	r3, #13
    9536:	e123      	b.n	9780 <chk_mounted+0x5a8>
    9538:	2000017c 	.word	0x2000017c
    953c:	00006fb5 	.word	0x00006fb5
    9540:	00006f31 	.word	0x00006f31
    9544:	00009105 	.word	0x00009105
    9548:	0000b1cd 	.word	0x0000b1cd
	fmt = FS_FAT12;
    954c:	2347      	movs	r3, #71	; 0x47
    954e:	18fb      	adds	r3, r7, r3
    9550:	2201      	movs	r2, #1
    9552:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    9554:	697b      	ldr	r3, [r7, #20]
    9556:	4a8c      	ldr	r2, [pc, #560]	; (9788 <chk_mounted+0x5b0>)
    9558:	4293      	cmp	r3, r2
    955a:	d903      	bls.n	9564 <chk_mounted+0x38c>
    955c:	2347      	movs	r3, #71	; 0x47
    955e:	18fb      	adds	r3, r7, r3
    9560:	2202      	movs	r2, #2
    9562:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    9564:	697b      	ldr	r3, [r7, #20]
    9566:	4a89      	ldr	r2, [pc, #548]	; (978c <chk_mounted+0x5b4>)
    9568:	4293      	cmp	r3, r2
    956a:	d903      	bls.n	9574 <chk_mounted+0x39c>
    956c:	2347      	movs	r3, #71	; 0x47
    956e:	18fb      	adds	r3, r7, r3
    9570:	2203      	movs	r2, #3
    9572:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    9574:	697b      	ldr	r3, [r7, #20]
    9576:	1c9a      	adds	r2, r3, #2
    9578:	6abb      	ldr	r3, [r7, #40]	; 0x28
    957a:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    957c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    957e:	69bb      	ldr	r3, [r7, #24]
    9580:	18d2      	adds	r2, r2, r3
    9582:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9584:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    9586:	231c      	movs	r3, #28
    9588:	18fb      	adds	r3, r7, r3
    958a:	881a      	ldrh	r2, [r3, #0]
    958c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    958e:	18d2      	adds	r2, r2, r3
    9590:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9592:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
    9594:	2347      	movs	r3, #71	; 0x47
    9596:	18fb      	adds	r3, r7, r3
    9598:	781b      	ldrb	r3, [r3, #0]
    959a:	2b03      	cmp	r3, #3
    959c:	d11e      	bne.n	95dc <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95a0:	891b      	ldrh	r3, [r3, #8]
    95a2:	2b00      	cmp	r3, #0
    95a4:	d001      	beq.n	95aa <chk_mounted+0x3d2>
    95a6:	230d      	movs	r3, #13
    95a8:	e0ea      	b.n	9780 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    95aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95ac:	225f      	movs	r2, #95	; 0x5f
    95ae:	5c9b      	ldrb	r3, [r3, r2]
    95b0:	061a      	lsls	r2, r3, #24
    95b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95b4:	215e      	movs	r1, #94	; 0x5e
    95b6:	5c5b      	ldrb	r3, [r3, r1]
    95b8:	041b      	lsls	r3, r3, #16
    95ba:	4313      	orrs	r3, r2
    95bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    95be:	215d      	movs	r1, #93	; 0x5d
    95c0:	5c52      	ldrb	r2, [r2, r1]
    95c2:	0212      	lsls	r2, r2, #8
    95c4:	4313      	orrs	r3, r2
    95c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    95c8:	215c      	movs	r1, #92	; 0x5c
    95ca:	5c52      	ldrb	r2, [r2, r1]
    95cc:	431a      	orrs	r2, r3
    95ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95d0:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    95d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95d4:	699b      	ldr	r3, [r3, #24]
    95d6:	009b      	lsls	r3, r3, #2
    95d8:	633b      	str	r3, [r7, #48]	; 0x30
    95da:	e020      	b.n	961e <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    95dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95de:	891b      	ldrh	r3, [r3, #8]
    95e0:	2b00      	cmp	r3, #0
    95e2:	d101      	bne.n	95e8 <chk_mounted+0x410>
    95e4:	230d      	movs	r3, #13
    95e6:	e0cb      	b.n	9780 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    95e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95ea:	6a1a      	ldr	r2, [r3, #32]
    95ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    95ee:	18d2      	adds	r2, r2, r3
    95f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95f2:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    95f4:	2347      	movs	r3, #71	; 0x47
    95f6:	18fb      	adds	r3, r7, r3
    95f8:	781b      	ldrb	r3, [r3, #0]
    95fa:	2b02      	cmp	r3, #2
    95fc:	d103      	bne.n	9606 <chk_mounted+0x42e>
    95fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9600:	699b      	ldr	r3, [r3, #24]
    9602:	005b      	lsls	r3, r3, #1
    9604:	e00a      	b.n	961c <chk_mounted+0x444>
    9606:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9608:	699a      	ldr	r2, [r3, #24]
    960a:	0013      	movs	r3, r2
    960c:	005b      	lsls	r3, r3, #1
    960e:	189b      	adds	r3, r3, r2
    9610:	085a      	lsrs	r2, r3, #1
    9612:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9614:	699b      	ldr	r3, [r3, #24]
    9616:	2101      	movs	r1, #1
    9618:	400b      	ands	r3, r1
    961a:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    961c:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9620:	69da      	ldr	r2, [r3, #28]
    9622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9624:	495a      	ldr	r1, [pc, #360]	; (9790 <chk_mounted+0x5b8>)
    9626:	468c      	mov	ip, r1
    9628:	4463      	add	r3, ip
    962a:	0a5b      	lsrs	r3, r3, #9
    962c:	429a      	cmp	r2, r3
    962e:	d201      	bcs.n	9634 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
    9630:	230d      	movs	r3, #13
    9632:	e0a5      	b.n	9780 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    9634:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9636:	2201      	movs	r2, #1
    9638:	4252      	negs	r2, r2
    963a:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
    963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    963e:	2200      	movs	r2, #0
    9640:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    9642:	2347      	movs	r3, #71	; 0x47
    9644:	18fb      	adds	r3, r7, r3
    9646:	781b      	ldrb	r3, [r3, #0]
    9648:	2b03      	cmp	r3, #3
    964a:	d000      	beq.n	964e <chk_mounted+0x476>
    964c:	e082      	b.n	9754 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
    964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9650:	2200      	movs	r2, #0
    9652:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    9654:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9656:	2261      	movs	r2, #97	; 0x61
    9658:	5c9b      	ldrb	r3, [r3, r2]
    965a:	021b      	lsls	r3, r3, #8
    965c:	b21a      	sxth	r2, r3
    965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9660:	2160      	movs	r1, #96	; 0x60
    9662:	5c5b      	ldrb	r3, [r3, r1]
    9664:	b21b      	sxth	r3, r3
    9666:	4313      	orrs	r3, r2
    9668:	b21b      	sxth	r3, r3
    966a:	b29b      	uxth	r3, r3
    966c:	001a      	movs	r2, r3
    966e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9670:	18d2      	adds	r2, r2, r3
    9672:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9674:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    9676:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9678:	7858      	ldrb	r0, [r3, #1]
    967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    967c:	3330      	adds	r3, #48	; 0x30
    967e:	0019      	movs	r1, r3
    9680:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9682:	695a      	ldr	r2, [r3, #20]
    9684:	2301      	movs	r3, #1
    9686:	4c43      	ldr	r4, [pc, #268]	; (9794 <chk_mounted+0x5bc>)
    9688:	47a0      	blx	r4
    968a:	1e03      	subs	r3, r0, #0
    968c:	d162      	bne.n	9754 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9690:	4a41      	ldr	r2, [pc, #260]	; (9798 <chk_mounted+0x5c0>)
    9692:	5c9b      	ldrb	r3, [r3, r2]
    9694:	021b      	lsls	r3, r3, #8
    9696:	b21a      	sxth	r2, r3
    9698:	6abb      	ldr	r3, [r7, #40]	; 0x28
    969a:	4940      	ldr	r1, [pc, #256]	; (979c <chk_mounted+0x5c4>)
    969c:	5c5b      	ldrb	r3, [r3, r1]
    969e:	b21b      	sxth	r3, r3
    96a0:	4313      	orrs	r3, r2
    96a2:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    96a4:	4a3e      	ldr	r2, [pc, #248]	; (97a0 <chk_mounted+0x5c8>)
    96a6:	4293      	cmp	r3, r2
    96a8:	d154      	bne.n	9754 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    96aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96ac:	2233      	movs	r2, #51	; 0x33
    96ae:	5c9b      	ldrb	r3, [r3, r2]
    96b0:	061a      	lsls	r2, r3, #24
    96b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96b4:	2132      	movs	r1, #50	; 0x32
    96b6:	5c5b      	ldrb	r3, [r3, r1]
    96b8:	041b      	lsls	r3, r3, #16
    96ba:	4313      	orrs	r3, r2
    96bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    96be:	2131      	movs	r1, #49	; 0x31
    96c0:	5c52      	ldrb	r2, [r2, r1]
    96c2:	0212      	lsls	r2, r2, #8
    96c4:	4313      	orrs	r3, r2
    96c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    96c8:	2130      	movs	r1, #48	; 0x30
    96ca:	5c52      	ldrb	r2, [r2, r1]
    96cc:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    96ce:	4a35      	ldr	r2, [pc, #212]	; (97a4 <chk_mounted+0x5cc>)
    96d0:	4293      	cmp	r3, r2
    96d2:	d13f      	bne.n	9754 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    96d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96d6:	4a34      	ldr	r2, [pc, #208]	; (97a8 <chk_mounted+0x5d0>)
    96d8:	5c9b      	ldrb	r3, [r3, r2]
    96da:	061a      	lsls	r2, r3, #24
    96dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96de:	4933      	ldr	r1, [pc, #204]	; (97ac <chk_mounted+0x5d4>)
    96e0:	5c5b      	ldrb	r3, [r3, r1]
    96e2:	041b      	lsls	r3, r3, #16
    96e4:	4313      	orrs	r3, r2
    96e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    96e8:	4931      	ldr	r1, [pc, #196]	; (97b0 <chk_mounted+0x5d8>)
    96ea:	5c52      	ldrb	r2, [r2, r1]
    96ec:	0212      	lsls	r2, r2, #8
    96ee:	4313      	orrs	r3, r2
    96f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    96f2:	2285      	movs	r2, #133	; 0x85
    96f4:	0092      	lsls	r2, r2, #2
    96f6:	5c8a      	ldrb	r2, [r1, r2]
    96f8:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    96fa:	4a2e      	ldr	r2, [pc, #184]	; (97b4 <chk_mounted+0x5dc>)
    96fc:	4293      	cmp	r3, r2
    96fe:	d129      	bne.n	9754 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    9700:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9702:	4a2d      	ldr	r2, [pc, #180]	; (97b8 <chk_mounted+0x5e0>)
    9704:	5c9b      	ldrb	r3, [r3, r2]
    9706:	061a      	lsls	r2, r3, #24
    9708:	6abb      	ldr	r3, [r7, #40]	; 0x28
    970a:	492c      	ldr	r1, [pc, #176]	; (97bc <chk_mounted+0x5e4>)
    970c:	5c5b      	ldrb	r3, [r3, r1]
    970e:	041b      	lsls	r3, r3, #16
    9710:	4313      	orrs	r3, r2
    9712:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9714:	492a      	ldr	r1, [pc, #168]	; (97c0 <chk_mounted+0x5e8>)
    9716:	5c52      	ldrb	r2, [r2, r1]
    9718:	0212      	lsls	r2, r2, #8
    971a:	4313      	orrs	r3, r2
    971c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    971e:	2287      	movs	r2, #135	; 0x87
    9720:	0092      	lsls	r2, r2, #2
    9722:	5c8a      	ldrb	r2, [r1, r2]
    9724:	431a      	orrs	r2, r3
    9726:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9728:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    972a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    972c:	4a25      	ldr	r2, [pc, #148]	; (97c4 <chk_mounted+0x5ec>)
    972e:	5c9b      	ldrb	r3, [r3, r2]
    9730:	061a      	lsls	r2, r3, #24
    9732:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9734:	4924      	ldr	r1, [pc, #144]	; (97c8 <chk_mounted+0x5f0>)
    9736:	5c5b      	ldrb	r3, [r3, r1]
    9738:	041b      	lsls	r3, r3, #16
    973a:	4313      	orrs	r3, r2
    973c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    973e:	4923      	ldr	r1, [pc, #140]	; (97cc <chk_mounted+0x5f4>)
    9740:	5c52      	ldrb	r2, [r2, r1]
    9742:	0212      	lsls	r2, r2, #8
    9744:	4313      	orrs	r3, r2
    9746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9748:	2286      	movs	r2, #134	; 0x86
    974a:	0092      	lsls	r2, r2, #2
    974c:	5c8a      	ldrb	r2, [r1, r2]
    974e:	431a      	orrs	r2, r3
    9750:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9752:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    9754:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9756:	2247      	movs	r2, #71	; 0x47
    9758:	18ba      	adds	r2, r7, r2
    975a:	7812      	ldrb	r2, [r2, #0]
    975c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    975e:	4b1c      	ldr	r3, [pc, #112]	; (97d0 <chk_mounted+0x5f8>)
    9760:	881b      	ldrh	r3, [r3, #0]
    9762:	3301      	adds	r3, #1
    9764:	b29a      	uxth	r2, r3
    9766:	4b1a      	ldr	r3, [pc, #104]	; (97d0 <chk_mounted+0x5f8>)
    9768:	801a      	strh	r2, [r3, #0]
    976a:	4b19      	ldr	r3, [pc, #100]	; (97d0 <chk_mounted+0x5f8>)
    976c:	881a      	ldrh	r2, [r3, #0]
    976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9770:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    9772:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9774:	2200      	movs	r2, #0
    9776:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
    9778:	6abb      	ldr	r3, [r7, #40]	; 0x28
    977a:	2200      	movs	r2, #0
    977c:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    977e:	2300      	movs	r3, #0
}
    9780:	0018      	movs	r0, r3
    9782:	46bd      	mov	sp, r7
    9784:	b013      	add	sp, #76	; 0x4c
    9786:	bd90      	pop	{r4, r7, pc}
    9788:	00000ff5 	.word	0x00000ff5
    978c:	0000fff5 	.word	0x0000fff5
    9790:	000001ff 	.word	0x000001ff
    9794:	00006fed 	.word	0x00006fed
    9798:	0000022f 	.word	0x0000022f
    979c:	0000022e 	.word	0x0000022e
    97a0:	ffffaa55 	.word	0xffffaa55
    97a4:	41615252 	.word	0x41615252
    97a8:	00000217 	.word	0x00000217
    97ac:	00000216 	.word	0x00000216
    97b0:	00000215 	.word	0x00000215
    97b4:	61417272 	.word	0x61417272
    97b8:	0000021f 	.word	0x0000021f
    97bc:	0000021e 	.word	0x0000021e
    97c0:	0000021d 	.word	0x0000021d
    97c4:	0000021b 	.word	0x0000021b
    97c8:	0000021a 	.word	0x0000021a
    97cc:	00000219 	.word	0x00000219
    97d0:	20000180 	.word	0x20000180

000097d4 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    97d4:	b580      	push	{r7, lr}
    97d6:	b082      	sub	sp, #8
    97d8:	af00      	add	r7, sp, #0
    97da:	6078      	str	r0, [r7, #4]
    97dc:	000a      	movs	r2, r1
    97de:	1cbb      	adds	r3, r7, #2
    97e0:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
    97e2:	687b      	ldr	r3, [r7, #4]
    97e4:	2b00      	cmp	r3, #0
    97e6:	d009      	beq.n	97fc <validate+0x28>
    97e8:	687b      	ldr	r3, [r7, #4]
    97ea:	781b      	ldrb	r3, [r3, #0]
    97ec:	2b00      	cmp	r3, #0
    97ee:	d005      	beq.n	97fc <validate+0x28>
    97f0:	687b      	ldr	r3, [r7, #4]
    97f2:	88db      	ldrh	r3, [r3, #6]
    97f4:	1cba      	adds	r2, r7, #2
    97f6:	8812      	ldrh	r2, [r2, #0]
    97f8:	429a      	cmp	r2, r3
    97fa:	d001      	beq.n	9800 <validate+0x2c>
		return FR_INVALID_OBJECT;
    97fc:	2309      	movs	r3, #9
    97fe:	e00c      	b.n	981a <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    9800:	687b      	ldr	r3, [r7, #4]
    9802:	785b      	ldrb	r3, [r3, #1]
    9804:	0018      	movs	r0, r3
    9806:	4b07      	ldr	r3, [pc, #28]	; (9824 <validate+0x50>)
    9808:	4798      	blx	r3
    980a:	0003      	movs	r3, r0
    980c:	001a      	movs	r2, r3
    980e:	2301      	movs	r3, #1
    9810:	4013      	ands	r3, r2
    9812:	d001      	beq.n	9818 <validate+0x44>
		return FR_NOT_READY;
    9814:	2303      	movs	r3, #3
    9816:	e000      	b.n	981a <validate+0x46>

	return FR_OK;
    9818:	2300      	movs	r3, #0
}
    981a:	0018      	movs	r0, r3
    981c:	46bd      	mov	sp, r7
    981e:	b002      	add	sp, #8
    9820:	bd80      	pop	{r7, pc}
    9822:	46c0      	nop			; (mov r8, r8)
    9824:	00006fb5 	.word	0x00006fb5

00009828 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    9828:	b580      	push	{r7, lr}
    982a:	b084      	sub	sp, #16
    982c:	af00      	add	r7, sp, #0
    982e:	0002      	movs	r2, r0
    9830:	6039      	str	r1, [r7, #0]
    9832:	1dfb      	adds	r3, r7, #7
    9834:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    9836:	1dfb      	adds	r3, r7, #7
    9838:	781b      	ldrb	r3, [r3, #0]
    983a:	2b00      	cmp	r3, #0
    983c:	d001      	beq.n	9842 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
    983e:	230b      	movs	r3, #11
    9840:	e018      	b.n	9874 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
    9842:	1dfb      	adds	r3, r7, #7
    9844:	781a      	ldrb	r2, [r3, #0]
    9846:	4b0d      	ldr	r3, [pc, #52]	; (987c <f_mount+0x54>)
    9848:	0092      	lsls	r2, r2, #2
    984a:	58d3      	ldr	r3, [r2, r3]
    984c:	60fb      	str	r3, [r7, #12]

	if (rfs) {
    984e:	68fb      	ldr	r3, [r7, #12]
    9850:	2b00      	cmp	r3, #0
    9852:	d002      	beq.n	985a <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    9854:	68fb      	ldr	r3, [r7, #12]
    9856:	2200      	movs	r2, #0
    9858:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    985a:	683b      	ldr	r3, [r7, #0]
    985c:	2b00      	cmp	r3, #0
    985e:	d002      	beq.n	9866 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
    9860:	683b      	ldr	r3, [r7, #0]
    9862:	2200      	movs	r2, #0
    9864:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    9866:	1dfb      	adds	r3, r7, #7
    9868:	781a      	ldrb	r2, [r3, #0]
    986a:	4b04      	ldr	r3, [pc, #16]	; (987c <f_mount+0x54>)
    986c:	0092      	lsls	r2, r2, #2
    986e:	6839      	ldr	r1, [r7, #0]
    9870:	50d1      	str	r1, [r2, r3]

	return FR_OK;
    9872:	2300      	movs	r3, #0
}
    9874:	0018      	movs	r0, r3
    9876:	46bd      	mov	sp, r7
    9878:	b004      	add	sp, #16
    987a:	bd80      	pop	{r7, pc}
    987c:	2000017c 	.word	0x2000017c

00009880 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    9880:	b590      	push	{r4, r7, lr}
    9882:	4ce5      	ldr	r4, [pc, #916]	; (9c18 <f_open+0x398>)
    9884:	44a5      	add	sp, r4
    9886:	af00      	add	r7, sp, #0
    9888:	60f8      	str	r0, [r7, #12]
    988a:	60b9      	str	r1, [r7, #8]
    988c:	4be3      	ldr	r3, [pc, #908]	; (9c1c <f_open+0x39c>)
    988e:	2194      	movs	r1, #148	; 0x94
    9890:	0089      	lsls	r1, r1, #2
    9892:	468c      	mov	ip, r1
    9894:	44bc      	add	ip, r7
    9896:	4463      	add	r3, ip
    9898:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    989a:	68fb      	ldr	r3, [r7, #12]
    989c:	2200      	movs	r2, #0
    989e:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    98a0:	4bde      	ldr	r3, [pc, #888]	; (9c1c <f_open+0x39c>)
    98a2:	2294      	movs	r2, #148	; 0x94
    98a4:	0092      	lsls	r2, r2, #2
    98a6:	4694      	mov	ip, r2
    98a8:	44bc      	add	ip, r7
    98aa:	4463      	add	r3, ip
    98ac:	4adb      	ldr	r2, [pc, #876]	; (9c1c <f_open+0x39c>)
    98ae:	2194      	movs	r1, #148	; 0x94
    98b0:	0089      	lsls	r1, r1, #2
    98b2:	468c      	mov	ip, r1
    98b4:	44bc      	add	ip, r7
    98b6:	4462      	add	r2, ip
    98b8:	7812      	ldrb	r2, [r2, #0]
    98ba:	211f      	movs	r1, #31
    98bc:	400a      	ands	r2, r1
    98be:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    98c0:	4bd6      	ldr	r3, [pc, #856]	; (9c1c <f_open+0x39c>)
    98c2:	2294      	movs	r2, #148	; 0x94
    98c4:	0092      	lsls	r2, r2, #2
    98c6:	4694      	mov	ip, r2
    98c8:	44bc      	add	ip, r7
    98ca:	4463      	add	r3, ip
    98cc:	781b      	ldrb	r3, [r3, #0]
    98ce:	2201      	movs	r2, #1
    98d0:	4393      	bics	r3, r2
    98d2:	b2da      	uxtb	r2, r3
    98d4:	4bd2      	ldr	r3, [pc, #840]	; (9c20 <f_open+0x3a0>)
    98d6:	18fc      	adds	r4, r7, r3
    98d8:	2387      	movs	r3, #135	; 0x87
    98da:	009b      	lsls	r3, r3, #2
    98dc:	18f9      	adds	r1, r7, r3
    98de:	2308      	movs	r3, #8
    98e0:	18fb      	adds	r3, r7, r3
    98e2:	0018      	movs	r0, r3
    98e4:	4bcf      	ldr	r3, [pc, #828]	; (9c24 <f_open+0x3a4>)
    98e6:	4798      	blx	r3
    98e8:	0003      	movs	r3, r0
    98ea:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    98ec:	2387      	movs	r3, #135	; 0x87
    98ee:	009b      	lsls	r3, r3, #2
    98f0:	18fb      	adds	r3, r7, r3
    98f2:	2284      	movs	r2, #132	; 0x84
    98f4:	0092      	lsls	r2, r2, #2
    98f6:	18ba      	adds	r2, r7, r2
    98f8:	619a      	str	r2, [r3, #24]
    98fa:	2387      	movs	r3, #135	; 0x87
    98fc:	009b      	lsls	r3, r3, #2
    98fe:	18fb      	adds	r3, r7, r3
    9900:	2210      	movs	r2, #16
    9902:	18ba      	adds	r2, r7, r2
    9904:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
    9906:	4bc6      	ldr	r3, [pc, #792]	; (9c20 <f_open+0x3a0>)
    9908:	18fb      	adds	r3, r7, r3
    990a:	781b      	ldrb	r3, [r3, #0]
    990c:	2b00      	cmp	r3, #0
    990e:	d10b      	bne.n	9928 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
    9910:	68ba      	ldr	r2, [r7, #8]
    9912:	4bc3      	ldr	r3, [pc, #780]	; (9c20 <f_open+0x3a0>)
    9914:	18fc      	adds	r4, r7, r3
    9916:	2387      	movs	r3, #135	; 0x87
    9918:	009b      	lsls	r3, r3, #2
    991a:	18fb      	adds	r3, r7, r3
    991c:	0011      	movs	r1, r2
    991e:	0018      	movs	r0, r3
    9920:	4bc1      	ldr	r3, [pc, #772]	; (9c28 <f_open+0x3a8>)
    9922:	4798      	blx	r3
    9924:	0003      	movs	r3, r0
    9926:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
    9928:	2387      	movs	r3, #135	; 0x87
    992a:	009b      	lsls	r3, r3, #2
    992c:	18fb      	adds	r3, r7, r3
    992e:	695b      	ldr	r3, [r3, #20]
    9930:	2292      	movs	r2, #146	; 0x92
    9932:	0092      	lsls	r2, r2, #2
    9934:	18ba      	adds	r2, r7, r2
    9936:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    9938:	4bb9      	ldr	r3, [pc, #740]	; (9c20 <f_open+0x3a0>)
    993a:	18fb      	adds	r3, r7, r3
    993c:	781b      	ldrb	r3, [r3, #0]
    993e:	2b00      	cmp	r3, #0
    9940:	d109      	bne.n	9956 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
    9942:	2392      	movs	r3, #146	; 0x92
    9944:	009b      	lsls	r3, r3, #2
    9946:	18fb      	adds	r3, r7, r3
    9948:	681b      	ldr	r3, [r3, #0]
    994a:	2b00      	cmp	r3, #0
    994c:	d103      	bne.n	9956 <f_open+0xd6>
			res = FR_INVALID_NAME;
    994e:	4bb4      	ldr	r3, [pc, #720]	; (9c20 <f_open+0x3a0>)
    9950:	18fb      	adds	r3, r7, r3
    9952:	2206      	movs	r2, #6
    9954:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    9956:	4bb1      	ldr	r3, [pc, #708]	; (9c1c <f_open+0x39c>)
    9958:	2294      	movs	r2, #148	; 0x94
    995a:	0092      	lsls	r2, r2, #2
    995c:	4694      	mov	ip, r2
    995e:	44bc      	add	ip, r7
    9960:	4463      	add	r3, ip
    9962:	781b      	ldrb	r3, [r3, #0]
    9964:	221c      	movs	r2, #28
    9966:	4013      	ands	r3, r2
    9968:	d100      	bne.n	996c <f_open+0xec>
    996a:	e141      	b.n	9bf0 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    996c:	4bac      	ldr	r3, [pc, #688]	; (9c20 <f_open+0x3a0>)
    996e:	18fb      	adds	r3, r7, r3
    9970:	781b      	ldrb	r3, [r3, #0]
    9972:	2b00      	cmp	r3, #0
    9974:	d027      	beq.n	99c6 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    9976:	4baa      	ldr	r3, [pc, #680]	; (9c20 <f_open+0x3a0>)
    9978:	18fb      	adds	r3, r7, r3
    997a:	781b      	ldrb	r3, [r3, #0]
    997c:	2b04      	cmp	r3, #4
    997e:	d109      	bne.n	9994 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    9980:	4ba7      	ldr	r3, [pc, #668]	; (9c20 <f_open+0x3a0>)
    9982:	18fc      	adds	r4, r7, r3
    9984:	2387      	movs	r3, #135	; 0x87
    9986:	009b      	lsls	r3, r3, #2
    9988:	18fb      	adds	r3, r7, r3
    998a:	0018      	movs	r0, r3
    998c:	4ba7      	ldr	r3, [pc, #668]	; (9c2c <f_open+0x3ac>)
    998e:	4798      	blx	r3
    9990:	0003      	movs	r3, r0
    9992:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    9994:	4ba1      	ldr	r3, [pc, #644]	; (9c1c <f_open+0x39c>)
    9996:	2294      	movs	r2, #148	; 0x94
    9998:	0092      	lsls	r2, r2, #2
    999a:	4694      	mov	ip, r2
    999c:	44bc      	add	ip, r7
    999e:	4463      	add	r3, ip
    99a0:	4a9e      	ldr	r2, [pc, #632]	; (9c1c <f_open+0x39c>)
    99a2:	2194      	movs	r1, #148	; 0x94
    99a4:	0089      	lsls	r1, r1, #2
    99a6:	468c      	mov	ip, r1
    99a8:	44bc      	add	ip, r7
    99aa:	4462      	add	r2, ip
    99ac:	7812      	ldrb	r2, [r2, #0]
    99ae:	2108      	movs	r1, #8
    99b0:	430a      	orrs	r2, r1
    99b2:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
    99b4:	2387      	movs	r3, #135	; 0x87
    99b6:	009b      	lsls	r3, r3, #2
    99b8:	18fb      	adds	r3, r7, r3
    99ba:	695b      	ldr	r3, [r3, #20]
    99bc:	2292      	movs	r2, #146	; 0x92
    99be:	0092      	lsls	r2, r2, #2
    99c0:	18ba      	adds	r2, r7, r2
    99c2:	6013      	str	r3, [r2, #0]
    99c4:	e01c      	b.n	9a00 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    99c6:	2392      	movs	r3, #146	; 0x92
    99c8:	009b      	lsls	r3, r3, #2
    99ca:	18fb      	adds	r3, r7, r3
    99cc:	681b      	ldr	r3, [r3, #0]
    99ce:	330b      	adds	r3, #11
    99d0:	781b      	ldrb	r3, [r3, #0]
    99d2:	001a      	movs	r2, r3
    99d4:	2311      	movs	r3, #17
    99d6:	4013      	ands	r3, r2
    99d8:	d004      	beq.n	99e4 <f_open+0x164>
				res = FR_DENIED;
    99da:	4b91      	ldr	r3, [pc, #580]	; (9c20 <f_open+0x3a0>)
    99dc:	18fb      	adds	r3, r7, r3
    99de:	2207      	movs	r2, #7
    99e0:	701a      	strb	r2, [r3, #0]
    99e2:	e00d      	b.n	9a00 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    99e4:	4b8d      	ldr	r3, [pc, #564]	; (9c1c <f_open+0x39c>)
    99e6:	2294      	movs	r2, #148	; 0x94
    99e8:	0092      	lsls	r2, r2, #2
    99ea:	4694      	mov	ip, r2
    99ec:	44bc      	add	ip, r7
    99ee:	4463      	add	r3, ip
    99f0:	781b      	ldrb	r3, [r3, #0]
    99f2:	2204      	movs	r2, #4
    99f4:	4013      	ands	r3, r2
    99f6:	d003      	beq.n	9a00 <f_open+0x180>
					res = FR_EXIST;
    99f8:	4b89      	ldr	r3, [pc, #548]	; (9c20 <f_open+0x3a0>)
    99fa:	18fb      	adds	r3, r7, r3
    99fc:	2208      	movs	r2, #8
    99fe:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    9a00:	4b87      	ldr	r3, [pc, #540]	; (9c20 <f_open+0x3a0>)
    9a02:	18fb      	adds	r3, r7, r3
    9a04:	781b      	ldrb	r3, [r3, #0]
    9a06:	2b00      	cmp	r3, #0
    9a08:	d000      	beq.n	9a0c <f_open+0x18c>
    9a0a:	e12f      	b.n	9c6c <f_open+0x3ec>
    9a0c:	4b83      	ldr	r3, [pc, #524]	; (9c1c <f_open+0x39c>)
    9a0e:	2294      	movs	r2, #148	; 0x94
    9a10:	0092      	lsls	r2, r2, #2
    9a12:	4694      	mov	ip, r2
    9a14:	44bc      	add	ip, r7
    9a16:	4463      	add	r3, ip
    9a18:	781b      	ldrb	r3, [r3, #0]
    9a1a:	2208      	movs	r2, #8
    9a1c:	4013      	ands	r3, r2
    9a1e:	d100      	bne.n	9a22 <f_open+0x1a2>
    9a20:	e124      	b.n	9c6c <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
    9a22:	4b83      	ldr	r3, [pc, #524]	; (9c30 <f_open+0x3b0>)
    9a24:	4798      	blx	r3
    9a26:	0003      	movs	r3, r0
    9a28:	2291      	movs	r2, #145	; 0x91
    9a2a:	0092      	lsls	r2, r2, #2
    9a2c:	18ba      	adds	r2, r7, r2
    9a2e:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
    9a30:	2392      	movs	r3, #146	; 0x92
    9a32:	009b      	lsls	r3, r3, #2
    9a34:	18fb      	adds	r3, r7, r3
    9a36:	681b      	ldr	r3, [r3, #0]
    9a38:	330e      	adds	r3, #14
    9a3a:	2291      	movs	r2, #145	; 0x91
    9a3c:	0092      	lsls	r2, r2, #2
    9a3e:	18ba      	adds	r2, r7, r2
    9a40:	6812      	ldr	r2, [r2, #0]
    9a42:	b2d2      	uxtb	r2, r2
    9a44:	701a      	strb	r2, [r3, #0]
    9a46:	2392      	movs	r3, #146	; 0x92
    9a48:	009b      	lsls	r3, r3, #2
    9a4a:	18fb      	adds	r3, r7, r3
    9a4c:	681b      	ldr	r3, [r3, #0]
    9a4e:	330f      	adds	r3, #15
    9a50:	2291      	movs	r2, #145	; 0x91
    9a52:	0092      	lsls	r2, r2, #2
    9a54:	18ba      	adds	r2, r7, r2
    9a56:	6812      	ldr	r2, [r2, #0]
    9a58:	b292      	uxth	r2, r2
    9a5a:	0a12      	lsrs	r2, r2, #8
    9a5c:	b292      	uxth	r2, r2
    9a5e:	b2d2      	uxtb	r2, r2
    9a60:	701a      	strb	r2, [r3, #0]
    9a62:	2392      	movs	r3, #146	; 0x92
    9a64:	009b      	lsls	r3, r3, #2
    9a66:	18fb      	adds	r3, r7, r3
    9a68:	681b      	ldr	r3, [r3, #0]
    9a6a:	3310      	adds	r3, #16
    9a6c:	2291      	movs	r2, #145	; 0x91
    9a6e:	0092      	lsls	r2, r2, #2
    9a70:	18ba      	adds	r2, r7, r2
    9a72:	6812      	ldr	r2, [r2, #0]
    9a74:	0c12      	lsrs	r2, r2, #16
    9a76:	b2d2      	uxtb	r2, r2
    9a78:	701a      	strb	r2, [r3, #0]
    9a7a:	2392      	movs	r3, #146	; 0x92
    9a7c:	009b      	lsls	r3, r3, #2
    9a7e:	18fb      	adds	r3, r7, r3
    9a80:	681b      	ldr	r3, [r3, #0]
    9a82:	3311      	adds	r3, #17
    9a84:	2291      	movs	r2, #145	; 0x91
    9a86:	0092      	lsls	r2, r2, #2
    9a88:	18ba      	adds	r2, r7, r2
    9a8a:	6812      	ldr	r2, [r2, #0]
    9a8c:	0e12      	lsrs	r2, r2, #24
    9a8e:	b2d2      	uxtb	r2, r2
    9a90:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    9a92:	2392      	movs	r3, #146	; 0x92
    9a94:	009b      	lsls	r3, r3, #2
    9a96:	18fb      	adds	r3, r7, r3
    9a98:	681b      	ldr	r3, [r3, #0]
    9a9a:	330b      	adds	r3, #11
    9a9c:	2200      	movs	r2, #0
    9a9e:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    9aa0:	2392      	movs	r3, #146	; 0x92
    9aa2:	009b      	lsls	r3, r3, #2
    9aa4:	18fb      	adds	r3, r7, r3
    9aa6:	681b      	ldr	r3, [r3, #0]
    9aa8:	331c      	adds	r3, #28
    9aaa:	2200      	movs	r2, #0
    9aac:	701a      	strb	r2, [r3, #0]
    9aae:	2392      	movs	r3, #146	; 0x92
    9ab0:	009b      	lsls	r3, r3, #2
    9ab2:	18fb      	adds	r3, r7, r3
    9ab4:	681b      	ldr	r3, [r3, #0]
    9ab6:	331d      	adds	r3, #29
    9ab8:	2200      	movs	r2, #0
    9aba:	701a      	strb	r2, [r3, #0]
    9abc:	2392      	movs	r3, #146	; 0x92
    9abe:	009b      	lsls	r3, r3, #2
    9ac0:	18fb      	adds	r3, r7, r3
    9ac2:	681b      	ldr	r3, [r3, #0]
    9ac4:	331e      	adds	r3, #30
    9ac6:	2200      	movs	r2, #0
    9ac8:	701a      	strb	r2, [r3, #0]
    9aca:	2392      	movs	r3, #146	; 0x92
    9acc:	009b      	lsls	r3, r3, #2
    9ace:	18fb      	adds	r3, r7, r3
    9ad0:	681b      	ldr	r3, [r3, #0]
    9ad2:	331f      	adds	r3, #31
    9ad4:	2200      	movs	r2, #0
    9ad6:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
    9ad8:	2392      	movs	r3, #146	; 0x92
    9ada:	009b      	lsls	r3, r3, #2
    9adc:	18fb      	adds	r3, r7, r3
    9ade:	681b      	ldr	r3, [r3, #0]
    9ae0:	3315      	adds	r3, #21
    9ae2:	781b      	ldrb	r3, [r3, #0]
    9ae4:	021b      	lsls	r3, r3, #8
    9ae6:	b21a      	sxth	r2, r3
    9ae8:	2392      	movs	r3, #146	; 0x92
    9aea:	009b      	lsls	r3, r3, #2
    9aec:	18fb      	adds	r3, r7, r3
    9aee:	681b      	ldr	r3, [r3, #0]
    9af0:	3314      	adds	r3, #20
    9af2:	781b      	ldrb	r3, [r3, #0]
    9af4:	b21b      	sxth	r3, r3
    9af6:	4313      	orrs	r3, r2
    9af8:	b21b      	sxth	r3, r3
    9afa:	b29b      	uxth	r3, r3
    9afc:	041b      	lsls	r3, r3, #16
    9afe:	2292      	movs	r2, #146	; 0x92
    9b00:	0092      	lsls	r2, r2, #2
    9b02:	18ba      	adds	r2, r7, r2
    9b04:	6812      	ldr	r2, [r2, #0]
    9b06:	321b      	adds	r2, #27
    9b08:	7812      	ldrb	r2, [r2, #0]
    9b0a:	0212      	lsls	r2, r2, #8
    9b0c:	b211      	sxth	r1, r2
    9b0e:	2292      	movs	r2, #146	; 0x92
    9b10:	0092      	lsls	r2, r2, #2
    9b12:	18ba      	adds	r2, r7, r2
    9b14:	6812      	ldr	r2, [r2, #0]
    9b16:	321a      	adds	r2, #26
    9b18:	7812      	ldrb	r2, [r2, #0]
    9b1a:	b212      	sxth	r2, r2
    9b1c:	430a      	orrs	r2, r1
    9b1e:	b212      	sxth	r2, r2
    9b20:	b292      	uxth	r2, r2
    9b22:	4313      	orrs	r3, r2
    9b24:	2290      	movs	r2, #144	; 0x90
    9b26:	0092      	lsls	r2, r2, #2
    9b28:	18ba      	adds	r2, r7, r2
    9b2a:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
    9b2c:	2392      	movs	r3, #146	; 0x92
    9b2e:	009b      	lsls	r3, r3, #2
    9b30:	18fb      	adds	r3, r7, r3
    9b32:	681b      	ldr	r3, [r3, #0]
    9b34:	331a      	adds	r3, #26
    9b36:	2200      	movs	r2, #0
    9b38:	701a      	strb	r2, [r3, #0]
    9b3a:	2392      	movs	r3, #146	; 0x92
    9b3c:	009b      	lsls	r3, r3, #2
    9b3e:	18fb      	adds	r3, r7, r3
    9b40:	681b      	ldr	r3, [r3, #0]
    9b42:	331b      	adds	r3, #27
    9b44:	2200      	movs	r2, #0
    9b46:	701a      	strb	r2, [r3, #0]
    9b48:	2392      	movs	r3, #146	; 0x92
    9b4a:	009b      	lsls	r3, r3, #2
    9b4c:	18fb      	adds	r3, r7, r3
    9b4e:	681b      	ldr	r3, [r3, #0]
    9b50:	3314      	adds	r3, #20
    9b52:	2200      	movs	r2, #0
    9b54:	701a      	strb	r2, [r3, #0]
    9b56:	2392      	movs	r3, #146	; 0x92
    9b58:	009b      	lsls	r3, r3, #2
    9b5a:	18fb      	adds	r3, r7, r3
    9b5c:	681b      	ldr	r3, [r3, #0]
    9b5e:	3315      	adds	r3, #21
    9b60:	2200      	movs	r2, #0
    9b62:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
    9b64:	2387      	movs	r3, #135	; 0x87
    9b66:	009b      	lsls	r3, r3, #2
    9b68:	18fb      	adds	r3, r7, r3
    9b6a:	681b      	ldr	r3, [r3, #0]
    9b6c:	2201      	movs	r2, #1
    9b6e:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    9b70:	2390      	movs	r3, #144	; 0x90
    9b72:	009b      	lsls	r3, r3, #2
    9b74:	18fb      	adds	r3, r7, r3
    9b76:	681b      	ldr	r3, [r3, #0]
    9b78:	2b00      	cmp	r3, #0
    9b7a:	d100      	bne.n	9b7e <f_open+0x2fe>
    9b7c:	e076      	b.n	9c6c <f_open+0x3ec>
				dw = dj.fs->winsect;
    9b7e:	2387      	movs	r3, #135	; 0x87
    9b80:	009b      	lsls	r3, r3, #2
    9b82:	18fb      	adds	r3, r7, r3
    9b84:	681b      	ldr	r3, [r3, #0]
    9b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9b88:	2291      	movs	r2, #145	; 0x91
    9b8a:	0092      	lsls	r2, r2, #2
    9b8c:	18ba      	adds	r2, r7, r2
    9b8e:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
    9b90:	2387      	movs	r3, #135	; 0x87
    9b92:	009b      	lsls	r3, r3, #2
    9b94:	18fb      	adds	r3, r7, r3
    9b96:	681b      	ldr	r3, [r3, #0]
    9b98:	4a21      	ldr	r2, [pc, #132]	; (9c20 <f_open+0x3a0>)
    9b9a:	18bc      	adds	r4, r7, r2
    9b9c:	2290      	movs	r2, #144	; 0x90
    9b9e:	0092      	lsls	r2, r2, #2
    9ba0:	18ba      	adds	r2, r7, r2
    9ba2:	6812      	ldr	r2, [r2, #0]
    9ba4:	0011      	movs	r1, r2
    9ba6:	0018      	movs	r0, r3
    9ba8:	4b22      	ldr	r3, [pc, #136]	; (9c34 <f_open+0x3b4>)
    9baa:	4798      	blx	r3
    9bac:	0003      	movs	r3, r0
    9bae:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    9bb0:	4b1b      	ldr	r3, [pc, #108]	; (9c20 <f_open+0x3a0>)
    9bb2:	18fb      	adds	r3, r7, r3
    9bb4:	781b      	ldrb	r3, [r3, #0]
    9bb6:	2b00      	cmp	r3, #0
    9bb8:	d158      	bne.n	9c6c <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    9bba:	2387      	movs	r3, #135	; 0x87
    9bbc:	009b      	lsls	r3, r3, #2
    9bbe:	18fb      	adds	r3, r7, r3
    9bc0:	681b      	ldr	r3, [r3, #0]
    9bc2:	2290      	movs	r2, #144	; 0x90
    9bc4:	0092      	lsls	r2, r2, #2
    9bc6:	18ba      	adds	r2, r7, r2
    9bc8:	6812      	ldr	r2, [r2, #0]
    9bca:	3a01      	subs	r2, #1
    9bcc:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
    9bce:	2387      	movs	r3, #135	; 0x87
    9bd0:	009b      	lsls	r3, r3, #2
    9bd2:	18fb      	adds	r3, r7, r3
    9bd4:	681b      	ldr	r3, [r3, #0]
    9bd6:	4a12      	ldr	r2, [pc, #72]	; (9c20 <f_open+0x3a0>)
    9bd8:	18bc      	adds	r4, r7, r2
    9bda:	2291      	movs	r2, #145	; 0x91
    9bdc:	0092      	lsls	r2, r2, #2
    9bde:	18ba      	adds	r2, r7, r2
    9be0:	6812      	ldr	r2, [r2, #0]
    9be2:	0011      	movs	r1, r2
    9be4:	0018      	movs	r0, r3
    9be6:	4b14      	ldr	r3, [pc, #80]	; (9c38 <f_open+0x3b8>)
    9be8:	4798      	blx	r3
    9bea:	0003      	movs	r3, r0
    9bec:	7023      	strb	r3, [r4, #0]
    9bee:	e03d      	b.n	9c6c <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    9bf0:	4b0b      	ldr	r3, [pc, #44]	; (9c20 <f_open+0x3a0>)
    9bf2:	18fb      	adds	r3, r7, r3
    9bf4:	781b      	ldrb	r3, [r3, #0]
    9bf6:	2b00      	cmp	r3, #0
    9bf8:	d138      	bne.n	9c6c <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    9bfa:	2392      	movs	r3, #146	; 0x92
    9bfc:	009b      	lsls	r3, r3, #2
    9bfe:	18fb      	adds	r3, r7, r3
    9c00:	681b      	ldr	r3, [r3, #0]
    9c02:	330b      	adds	r3, #11
    9c04:	781b      	ldrb	r3, [r3, #0]
    9c06:	001a      	movs	r2, r3
    9c08:	2310      	movs	r3, #16
    9c0a:	4013      	ands	r3, r2
    9c0c:	d016      	beq.n	9c3c <f_open+0x3bc>
				res = FR_NO_FILE;
    9c0e:	4b04      	ldr	r3, [pc, #16]	; (9c20 <f_open+0x3a0>)
    9c10:	18fb      	adds	r3, r7, r3
    9c12:	2204      	movs	r2, #4
    9c14:	701a      	strb	r2, [r3, #0]
    9c16:	e029      	b.n	9c6c <f_open+0x3ec>
    9c18:	fffffdac 	.word	0xfffffdac
    9c1c:	fffffdb7 	.word	0xfffffdb7
    9c20:	0000024f 	.word	0x0000024f
    9c24:	000091d9 	.word	0x000091d9
    9c28:	00008fcd 	.word	0x00008fcd
    9c2c:	00008745 	.word	0x00008745
    9c30:	00007295 	.word	0x00007295
    9c34:	00007a19 	.word	0x00007a19
    9c38:	000073d9 	.word	0x000073d9
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    9c3c:	4b5a      	ldr	r3, [pc, #360]	; (9da8 <f_open+0x528>)
    9c3e:	2294      	movs	r2, #148	; 0x94
    9c40:	0092      	lsls	r2, r2, #2
    9c42:	4694      	mov	ip, r2
    9c44:	44bc      	add	ip, r7
    9c46:	4463      	add	r3, ip
    9c48:	781b      	ldrb	r3, [r3, #0]
    9c4a:	2202      	movs	r2, #2
    9c4c:	4013      	ands	r3, r2
    9c4e:	d00d      	beq.n	9c6c <f_open+0x3ec>
    9c50:	2392      	movs	r3, #146	; 0x92
    9c52:	009b      	lsls	r3, r3, #2
    9c54:	18fb      	adds	r3, r7, r3
    9c56:	681b      	ldr	r3, [r3, #0]
    9c58:	330b      	adds	r3, #11
    9c5a:	781b      	ldrb	r3, [r3, #0]
    9c5c:	001a      	movs	r2, r3
    9c5e:	2301      	movs	r3, #1
    9c60:	4013      	ands	r3, r2
    9c62:	d003      	beq.n	9c6c <f_open+0x3ec>
					res = FR_DENIED;
    9c64:	4b51      	ldr	r3, [pc, #324]	; (9dac <f_open+0x52c>)
    9c66:	18fb      	adds	r3, r7, r3
    9c68:	2207      	movs	r2, #7
    9c6a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
    9c6c:	4b4f      	ldr	r3, [pc, #316]	; (9dac <f_open+0x52c>)
    9c6e:	18fb      	adds	r3, r7, r3
    9c70:	781b      	ldrb	r3, [r3, #0]
    9c72:	2b00      	cmp	r3, #0
    9c74:	d126      	bne.n	9cc4 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    9c76:	4b4c      	ldr	r3, [pc, #304]	; (9da8 <f_open+0x528>)
    9c78:	2294      	movs	r2, #148	; 0x94
    9c7a:	0092      	lsls	r2, r2, #2
    9c7c:	4694      	mov	ip, r2
    9c7e:	44bc      	add	ip, r7
    9c80:	4463      	add	r3, ip
    9c82:	781b      	ldrb	r3, [r3, #0]
    9c84:	2208      	movs	r2, #8
    9c86:	4013      	ands	r3, r2
    9c88:	d00f      	beq.n	9caa <f_open+0x42a>
			mode |= FA__WRITTEN;
    9c8a:	4b47      	ldr	r3, [pc, #284]	; (9da8 <f_open+0x528>)
    9c8c:	2294      	movs	r2, #148	; 0x94
    9c8e:	0092      	lsls	r2, r2, #2
    9c90:	4694      	mov	ip, r2
    9c92:	44bc      	add	ip, r7
    9c94:	4463      	add	r3, ip
    9c96:	4a44      	ldr	r2, [pc, #272]	; (9da8 <f_open+0x528>)
    9c98:	2194      	movs	r1, #148	; 0x94
    9c9a:	0089      	lsls	r1, r1, #2
    9c9c:	468c      	mov	ip, r1
    9c9e:	44bc      	add	ip, r7
    9ca0:	4462      	add	r2, ip
    9ca2:	7812      	ldrb	r2, [r2, #0]
    9ca4:	2120      	movs	r1, #32
    9ca6:	430a      	orrs	r2, r1
    9ca8:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    9caa:	2387      	movs	r3, #135	; 0x87
    9cac:	009b      	lsls	r3, r3, #2
    9cae:	18fb      	adds	r3, r7, r3
    9cb0:	681b      	ldr	r3, [r3, #0]
    9cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9cb4:	68fb      	ldr	r3, [r7, #12]
    9cb6:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
    9cb8:	68fb      	ldr	r3, [r7, #12]
    9cba:	2292      	movs	r2, #146	; 0x92
    9cbc:	0092      	lsls	r2, r2, #2
    9cbe:	18ba      	adds	r2, r7, r2
    9cc0:	6812      	ldr	r2, [r2, #0]
    9cc2:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    9cc4:	4b39      	ldr	r3, [pc, #228]	; (9dac <f_open+0x52c>)
    9cc6:	18fb      	adds	r3, r7, r3
    9cc8:	781b      	ldrb	r3, [r3, #0]
    9cca:	2b00      	cmp	r3, #0
    9ccc:	d163      	bne.n	9d96 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
    9cce:	68fb      	ldr	r3, [r7, #12]
    9cd0:	4a35      	ldr	r2, [pc, #212]	; (9da8 <f_open+0x528>)
    9cd2:	2194      	movs	r1, #148	; 0x94
    9cd4:	0089      	lsls	r1, r1, #2
    9cd6:	468c      	mov	ip, r1
    9cd8:	44bc      	add	ip, r7
    9cda:	4462      	add	r2, ip
    9cdc:	7812      	ldrb	r2, [r2, #0]
    9cde:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    9ce0:	2392      	movs	r3, #146	; 0x92
    9ce2:	009b      	lsls	r3, r3, #2
    9ce4:	18fb      	adds	r3, r7, r3
    9ce6:	681b      	ldr	r3, [r3, #0]
    9ce8:	3315      	adds	r3, #21
    9cea:	781b      	ldrb	r3, [r3, #0]
    9cec:	021b      	lsls	r3, r3, #8
    9cee:	b21a      	sxth	r2, r3
    9cf0:	2392      	movs	r3, #146	; 0x92
    9cf2:	009b      	lsls	r3, r3, #2
    9cf4:	18fb      	adds	r3, r7, r3
    9cf6:	681b      	ldr	r3, [r3, #0]
    9cf8:	3314      	adds	r3, #20
    9cfa:	781b      	ldrb	r3, [r3, #0]
    9cfc:	b21b      	sxth	r3, r3
    9cfe:	4313      	orrs	r3, r2
    9d00:	b21b      	sxth	r3, r3
    9d02:	b29b      	uxth	r3, r3
    9d04:	041b      	lsls	r3, r3, #16
    9d06:	2292      	movs	r2, #146	; 0x92
    9d08:	0092      	lsls	r2, r2, #2
    9d0a:	18ba      	adds	r2, r7, r2
    9d0c:	6812      	ldr	r2, [r2, #0]
    9d0e:	321b      	adds	r2, #27
    9d10:	7812      	ldrb	r2, [r2, #0]
    9d12:	0212      	lsls	r2, r2, #8
    9d14:	b211      	sxth	r1, r2
    9d16:	2292      	movs	r2, #146	; 0x92
    9d18:	0092      	lsls	r2, r2, #2
    9d1a:	18ba      	adds	r2, r7, r2
    9d1c:	6812      	ldr	r2, [r2, #0]
    9d1e:	321a      	adds	r2, #26
    9d20:	7812      	ldrb	r2, [r2, #0]
    9d22:	b212      	sxth	r2, r2
    9d24:	430a      	orrs	r2, r1
    9d26:	b212      	sxth	r2, r2
    9d28:	b292      	uxth	r2, r2
    9d2a:	431a      	orrs	r2, r3
    9d2c:	68fb      	ldr	r3, [r7, #12]
    9d2e:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    9d30:	2392      	movs	r3, #146	; 0x92
    9d32:	009b      	lsls	r3, r3, #2
    9d34:	18fb      	adds	r3, r7, r3
    9d36:	681b      	ldr	r3, [r3, #0]
    9d38:	331f      	adds	r3, #31
    9d3a:	781b      	ldrb	r3, [r3, #0]
    9d3c:	061a      	lsls	r2, r3, #24
    9d3e:	2392      	movs	r3, #146	; 0x92
    9d40:	009b      	lsls	r3, r3, #2
    9d42:	18fb      	adds	r3, r7, r3
    9d44:	681b      	ldr	r3, [r3, #0]
    9d46:	331e      	adds	r3, #30
    9d48:	781b      	ldrb	r3, [r3, #0]
    9d4a:	041b      	lsls	r3, r3, #16
    9d4c:	4313      	orrs	r3, r2
    9d4e:	2292      	movs	r2, #146	; 0x92
    9d50:	0092      	lsls	r2, r2, #2
    9d52:	18ba      	adds	r2, r7, r2
    9d54:	6812      	ldr	r2, [r2, #0]
    9d56:	321d      	adds	r2, #29
    9d58:	7812      	ldrb	r2, [r2, #0]
    9d5a:	0212      	lsls	r2, r2, #8
    9d5c:	4313      	orrs	r3, r2
    9d5e:	2292      	movs	r2, #146	; 0x92
    9d60:	0092      	lsls	r2, r2, #2
    9d62:	18ba      	adds	r2, r7, r2
    9d64:	6812      	ldr	r2, [r2, #0]
    9d66:	321c      	adds	r2, #28
    9d68:	7812      	ldrb	r2, [r2, #0]
    9d6a:	431a      	orrs	r2, r3
    9d6c:	68fb      	ldr	r3, [r7, #12]
    9d6e:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
    9d70:	68fb      	ldr	r3, [r7, #12]
    9d72:	2200      	movs	r2, #0
    9d74:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
    9d76:	68fb      	ldr	r3, [r7, #12]
    9d78:	2200      	movs	r2, #0
    9d7a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    9d7c:	2387      	movs	r3, #135	; 0x87
    9d7e:	009b      	lsls	r3, r3, #2
    9d80:	18fb      	adds	r3, r7, r3
    9d82:	681a      	ldr	r2, [r3, #0]
    9d84:	68fb      	ldr	r3, [r7, #12]
    9d86:	601a      	str	r2, [r3, #0]
    9d88:	2387      	movs	r3, #135	; 0x87
    9d8a:	009b      	lsls	r3, r3, #2
    9d8c:	18fb      	adds	r3, r7, r3
    9d8e:	681b      	ldr	r3, [r3, #0]
    9d90:	88da      	ldrh	r2, [r3, #6]
    9d92:	68fb      	ldr	r3, [r7, #12]
    9d94:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
    9d96:	4b05      	ldr	r3, [pc, #20]	; (9dac <f_open+0x52c>)
    9d98:	18fb      	adds	r3, r7, r3
    9d9a:	781b      	ldrb	r3, [r3, #0]
}
    9d9c:	0018      	movs	r0, r3
    9d9e:	46bd      	mov	sp, r7
    9da0:	2395      	movs	r3, #149	; 0x95
    9da2:	009b      	lsls	r3, r3, #2
    9da4:	449d      	add	sp, r3
    9da6:	bd90      	pop	{r4, r7, pc}
    9da8:	fffffdb7 	.word	0xfffffdb7
    9dac:	0000024f 	.word	0x0000024f

00009db0 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    9db0:	b590      	push	{r4, r7, lr}
    9db2:	b08d      	sub	sp, #52	; 0x34
    9db4:	af00      	add	r7, sp, #0
    9db6:	60f8      	str	r0, [r7, #12]
    9db8:	60b9      	str	r1, [r7, #8]
    9dba:	607a      	str	r2, [r7, #4]
    9dbc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    9dbe:	68bb      	ldr	r3, [r7, #8]
    9dc0:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Initialize byte counter */
    9dc2:	683b      	ldr	r3, [r7, #0]
    9dc4:	2200      	movs	r2, #0
    9dc6:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    9dc8:	68fb      	ldr	r3, [r7, #12]
    9dca:	681a      	ldr	r2, [r3, #0]
    9dcc:	68fb      	ldr	r3, [r7, #12]
    9dce:	889b      	ldrh	r3, [r3, #4]
    9dd0:	211f      	movs	r1, #31
    9dd2:	187c      	adds	r4, r7, r1
    9dd4:	0019      	movs	r1, r3
    9dd6:	0010      	movs	r0, r2
    9dd8:	4b96      	ldr	r3, [pc, #600]	; (a034 <f_read+0x284>)
    9dda:	4798      	blx	r3
    9ddc:	0003      	movs	r3, r0
    9dde:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    9de0:	231f      	movs	r3, #31
    9de2:	18fb      	adds	r3, r7, r3
    9de4:	781b      	ldrb	r3, [r3, #0]
    9de6:	2b00      	cmp	r3, #0
    9de8:	d003      	beq.n	9df2 <f_read+0x42>
    9dea:	231f      	movs	r3, #31
    9dec:	18fb      	adds	r3, r7, r3
    9dee:	781b      	ldrb	r3, [r3, #0]
    9df0:	e11b      	b.n	a02a <f_read+0x27a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    9df2:	68fb      	ldr	r3, [r7, #12]
    9df4:	799b      	ldrb	r3, [r3, #6]
    9df6:	b25b      	sxtb	r3, r3
    9df8:	2b00      	cmp	r3, #0
    9dfa:	da01      	bge.n	9e00 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    9dfc:	2302      	movs	r3, #2
    9dfe:	e114      	b.n	a02a <f_read+0x27a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    9e00:	68fb      	ldr	r3, [r7, #12]
    9e02:	799b      	ldrb	r3, [r3, #6]
    9e04:	001a      	movs	r2, r3
    9e06:	2301      	movs	r3, #1
    9e08:	4013      	ands	r3, r2
    9e0a:	d101      	bne.n	9e10 <f_read+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    9e0c:	2307      	movs	r3, #7
    9e0e:	e10c      	b.n	a02a <f_read+0x27a>
	remain = fp->fsize - fp->fptr;
    9e10:	68fb      	ldr	r3, [r7, #12]
    9e12:	68da      	ldr	r2, [r3, #12]
    9e14:	68fb      	ldr	r3, [r7, #12]
    9e16:	689b      	ldr	r3, [r3, #8]
    9e18:	1ad3      	subs	r3, r2, r3
    9e1a:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    9e1c:	687a      	ldr	r2, [r7, #4]
    9e1e:	69bb      	ldr	r3, [r7, #24]
    9e20:	429a      	cmp	r2, r3
    9e22:	d800      	bhi.n	9e26 <f_read+0x76>
    9e24:	e0fc      	b.n	a020 <f_read+0x270>
    9e26:	69bb      	ldr	r3, [r7, #24]
    9e28:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
    9e2a:	e0f9      	b.n	a020 <f_read+0x270>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    9e2c:	68fb      	ldr	r3, [r7, #12]
    9e2e:	689b      	ldr	r3, [r3, #8]
    9e30:	05db      	lsls	r3, r3, #23
    9e32:	0ddb      	lsrs	r3, r3, #23
    9e34:	d000      	beq.n	9e38 <f_read+0x88>
    9e36:	e0b0      	b.n	9f9a <f_read+0x1ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    9e38:	68fb      	ldr	r3, [r7, #12]
    9e3a:	689b      	ldr	r3, [r3, #8]
    9e3c:	0a5b      	lsrs	r3, r3, #9
    9e3e:	b2da      	uxtb	r2, r3
    9e40:	68fb      	ldr	r3, [r7, #12]
    9e42:	681b      	ldr	r3, [r3, #0]
    9e44:	789b      	ldrb	r3, [r3, #2]
    9e46:	3b01      	subs	r3, #1
    9e48:	b2d9      	uxtb	r1, r3
    9e4a:	2317      	movs	r3, #23
    9e4c:	18fb      	adds	r3, r7, r3
    9e4e:	400a      	ands	r2, r1
    9e50:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
    9e52:	2317      	movs	r3, #23
    9e54:	18fb      	adds	r3, r7, r3
    9e56:	781b      	ldrb	r3, [r3, #0]
    9e58:	2b00      	cmp	r3, #0
    9e5a:	d12e      	bne.n	9eba <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
    9e5c:	68fb      	ldr	r3, [r7, #12]
    9e5e:	689b      	ldr	r3, [r3, #8]
    9e60:	2b00      	cmp	r3, #0
    9e62:	d103      	bne.n	9e6c <f_read+0xbc>
					clst = fp->sclust;			/* Follow from the origin */
    9e64:	68fb      	ldr	r3, [r7, #12]
    9e66:	691b      	ldr	r3, [r3, #16]
    9e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    9e6a:	e009      	b.n	9e80 <f_read+0xd0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    9e6c:	68fb      	ldr	r3, [r7, #12]
    9e6e:	681a      	ldr	r2, [r3, #0]
    9e70:	68fb      	ldr	r3, [r7, #12]
    9e72:	695b      	ldr	r3, [r3, #20]
    9e74:	0019      	movs	r1, r3
    9e76:	0010      	movs	r0, r2
    9e78:	4b6f      	ldr	r3, [pc, #444]	; (a038 <f_read+0x288>)
    9e7a:	4798      	blx	r3
    9e7c:	0003      	movs	r3, r0
    9e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    9e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9e82:	2b01      	cmp	r3, #1
    9e84:	d809      	bhi.n	9e9a <f_read+0xea>
    9e86:	68fb      	ldr	r3, [r7, #12]
    9e88:	799b      	ldrb	r3, [r3, #6]
    9e8a:	2280      	movs	r2, #128	; 0x80
    9e8c:	4252      	negs	r2, r2
    9e8e:	4313      	orrs	r3, r2
    9e90:	b2da      	uxtb	r2, r3
    9e92:	68fb      	ldr	r3, [r7, #12]
    9e94:	719a      	strb	r2, [r3, #6]
    9e96:	2302      	movs	r3, #2
    9e98:	e0c7      	b.n	a02a <f_read+0x27a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    9e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9e9c:	3301      	adds	r3, #1
    9e9e:	d109      	bne.n	9eb4 <f_read+0x104>
    9ea0:	68fb      	ldr	r3, [r7, #12]
    9ea2:	799b      	ldrb	r3, [r3, #6]
    9ea4:	2280      	movs	r2, #128	; 0x80
    9ea6:	4252      	negs	r2, r2
    9ea8:	4313      	orrs	r3, r2
    9eaa:	b2da      	uxtb	r2, r3
    9eac:	68fb      	ldr	r3, [r7, #12]
    9eae:	719a      	strb	r2, [r3, #6]
    9eb0:	2301      	movs	r3, #1
    9eb2:	e0ba      	b.n	a02a <f_read+0x27a>
				fp->clust = clst;				/* Update current cluster */
    9eb4:	68fb      	ldr	r3, [r7, #12]
    9eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9eb8:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    9eba:	68fb      	ldr	r3, [r7, #12]
    9ebc:	681a      	ldr	r2, [r3, #0]
    9ebe:	68fb      	ldr	r3, [r7, #12]
    9ec0:	695b      	ldr	r3, [r3, #20]
    9ec2:	0019      	movs	r1, r3
    9ec4:	0010      	movs	r0, r2
    9ec6:	4b5d      	ldr	r3, [pc, #372]	; (a03c <f_read+0x28c>)
    9ec8:	4798      	blx	r3
    9eca:	0003      	movs	r3, r0
    9ecc:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    9ece:	693b      	ldr	r3, [r7, #16]
    9ed0:	2b00      	cmp	r3, #0
    9ed2:	d109      	bne.n	9ee8 <f_read+0x138>
    9ed4:	68fb      	ldr	r3, [r7, #12]
    9ed6:	799b      	ldrb	r3, [r3, #6]
    9ed8:	2280      	movs	r2, #128	; 0x80
    9eda:	4252      	negs	r2, r2
    9edc:	4313      	orrs	r3, r2
    9ede:	b2da      	uxtb	r2, r3
    9ee0:	68fb      	ldr	r3, [r7, #12]
    9ee2:	719a      	strb	r2, [r3, #6]
    9ee4:	2302      	movs	r3, #2
    9ee6:	e0a0      	b.n	a02a <f_read+0x27a>
			sect += csect;
    9ee8:	2317      	movs	r3, #23
    9eea:	18fb      	adds	r3, r7, r3
    9eec:	781b      	ldrb	r3, [r3, #0]
    9eee:	693a      	ldr	r2, [r7, #16]
    9ef0:	18d3      	adds	r3, r2, r3
    9ef2:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    9ef4:	687b      	ldr	r3, [r7, #4]
    9ef6:	0a5b      	lsrs	r3, r3, #9
    9ef8:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
    9efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9efc:	2b00      	cmp	r3, #0
    9efe:	d049      	beq.n	9f94 <f_read+0x1e4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    9f00:	2317      	movs	r3, #23
    9f02:	18fb      	adds	r3, r7, r3
    9f04:	781a      	ldrb	r2, [r3, #0]
    9f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f08:	18d2      	adds	r2, r2, r3
    9f0a:	68fb      	ldr	r3, [r7, #12]
    9f0c:	681b      	ldr	r3, [r3, #0]
    9f0e:	789b      	ldrb	r3, [r3, #2]
    9f10:	429a      	cmp	r2, r3
    9f12:	d908      	bls.n	9f26 <f_read+0x176>
					cc = fp->fs->csize - csect;
    9f14:	68fb      	ldr	r3, [r7, #12]
    9f16:	681b      	ldr	r3, [r3, #0]
    9f18:	789b      	ldrb	r3, [r3, #2]
    9f1a:	001a      	movs	r2, r3
    9f1c:	2317      	movs	r3, #23
    9f1e:	18fb      	adds	r3, r7, r3
    9f20:	781b      	ldrb	r3, [r3, #0]
    9f22:	1ad3      	subs	r3, r2, r3
    9f24:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    9f26:	68fb      	ldr	r3, [r7, #12]
    9f28:	681b      	ldr	r3, [r3, #0]
    9f2a:	7858      	ldrb	r0, [r3, #1]
    9f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f2e:	b2db      	uxtb	r3, r3
    9f30:	693a      	ldr	r2, [r7, #16]
    9f32:	6a39      	ldr	r1, [r7, #32]
    9f34:	4c42      	ldr	r4, [pc, #264]	; (a040 <f_read+0x290>)
    9f36:	47a0      	blx	r4
    9f38:	1e03      	subs	r3, r0, #0
    9f3a:	d009      	beq.n	9f50 <f_read+0x1a0>
					ABORT(fp->fs, FR_DISK_ERR);
    9f3c:	68fb      	ldr	r3, [r7, #12]
    9f3e:	799b      	ldrb	r3, [r3, #6]
    9f40:	2280      	movs	r2, #128	; 0x80
    9f42:	4252      	negs	r2, r2
    9f44:	4313      	orrs	r3, r2
    9f46:	b2da      	uxtb	r2, r3
    9f48:	68fb      	ldr	r3, [r7, #12]
    9f4a:	719a      	strb	r2, [r3, #6]
    9f4c:	2301      	movs	r3, #1
    9f4e:	e06c      	b.n	a02a <f_read+0x27a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    9f50:	68fb      	ldr	r3, [r7, #12]
    9f52:	681b      	ldr	r3, [r3, #0]
    9f54:	791b      	ldrb	r3, [r3, #4]
    9f56:	2b00      	cmp	r3, #0
    9f58:	d018      	beq.n	9f8c <f_read+0x1dc>
    9f5a:	68fb      	ldr	r3, [r7, #12]
    9f5c:	681b      	ldr	r3, [r3, #0]
    9f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9f60:	693b      	ldr	r3, [r7, #16]
    9f62:	1ad2      	subs	r2, r2, r3
    9f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f66:	429a      	cmp	r2, r3
    9f68:	d210      	bcs.n	9f8c <f_read+0x1dc>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    9f6a:	68fb      	ldr	r3, [r7, #12]
    9f6c:	681b      	ldr	r3, [r3, #0]
    9f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9f70:	693b      	ldr	r3, [r7, #16]
    9f72:	1ad3      	subs	r3, r2, r3
    9f74:	025b      	lsls	r3, r3, #9
    9f76:	6a3a      	ldr	r2, [r7, #32]
    9f78:	18d0      	adds	r0, r2, r3
    9f7a:	68fb      	ldr	r3, [r7, #12]
    9f7c:	681b      	ldr	r3, [r3, #0]
    9f7e:	3330      	adds	r3, #48	; 0x30
    9f80:	0019      	movs	r1, r3
    9f82:	2380      	movs	r3, #128	; 0x80
    9f84:	009b      	lsls	r3, r3, #2
    9f86:	001a      	movs	r2, r3
    9f88:	4b2e      	ldr	r3, [pc, #184]	; (a044 <f_read+0x294>)
    9f8a:	4798      	blx	r3
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    9f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f8e:	025b      	lsls	r3, r3, #9
    9f90:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
    9f92:	e031      	b.n	9ff8 <f_read+0x248>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    9f94:	68fb      	ldr	r3, [r7, #12]
    9f96:	693a      	ldr	r2, [r7, #16]
    9f98:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    9f9a:	68fb      	ldr	r3, [r7, #12]
    9f9c:	689b      	ldr	r3, [r3, #8]
    9f9e:	05db      	lsls	r3, r3, #23
    9fa0:	0ddb      	lsrs	r3, r3, #23
    9fa2:	2280      	movs	r2, #128	; 0x80
    9fa4:	0092      	lsls	r2, r2, #2
    9fa6:	1ad3      	subs	r3, r2, r3
    9fa8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
    9faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9fac:	687b      	ldr	r3, [r7, #4]
    9fae:	429a      	cmp	r2, r3
    9fb0:	d901      	bls.n	9fb6 <f_read+0x206>
    9fb2:	687b      	ldr	r3, [r7, #4]
    9fb4:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    9fb6:	68fb      	ldr	r3, [r7, #12]
    9fb8:	681a      	ldr	r2, [r3, #0]
    9fba:	68fb      	ldr	r3, [r7, #12]
    9fbc:	699b      	ldr	r3, [r3, #24]
    9fbe:	0019      	movs	r1, r3
    9fc0:	0010      	movs	r0, r2
    9fc2:	4b21      	ldr	r3, [pc, #132]	; (a048 <f_read+0x298>)
    9fc4:	4798      	blx	r3
    9fc6:	1e03      	subs	r3, r0, #0
    9fc8:	d009      	beq.n	9fde <f_read+0x22e>
			ABORT(fp->fs, FR_DISK_ERR);
    9fca:	68fb      	ldr	r3, [r7, #12]
    9fcc:	799b      	ldrb	r3, [r3, #6]
    9fce:	2280      	movs	r2, #128	; 0x80
    9fd0:	4252      	negs	r2, r2
    9fd2:	4313      	orrs	r3, r2
    9fd4:	b2da      	uxtb	r2, r3
    9fd6:	68fb      	ldr	r3, [r7, #12]
    9fd8:	719a      	strb	r2, [r3, #6]
    9fda:	2301      	movs	r3, #1
    9fdc:	e025      	b.n	a02a <f_read+0x27a>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    9fde:	68fb      	ldr	r3, [r7, #12]
    9fe0:	681a      	ldr	r2, [r3, #0]
    9fe2:	68fb      	ldr	r3, [r7, #12]
    9fe4:	689b      	ldr	r3, [r3, #8]
    9fe6:	05db      	lsls	r3, r3, #23
    9fe8:	0ddb      	lsrs	r3, r3, #23
    9fea:	3330      	adds	r3, #48	; 0x30
    9fec:	18d1      	adds	r1, r2, r3
    9fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9ff0:	6a3b      	ldr	r3, [r7, #32]
    9ff2:	0018      	movs	r0, r3
    9ff4:	4b13      	ldr	r3, [pc, #76]	; (a044 <f_read+0x294>)
    9ff6:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    9ff8:	6a3a      	ldr	r2, [r7, #32]
    9ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9ffc:	18d3      	adds	r3, r2, r3
    9ffe:	623b      	str	r3, [r7, #32]
    a000:	68fb      	ldr	r3, [r7, #12]
    a002:	689a      	ldr	r2, [r3, #8]
    a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a006:	18d2      	adds	r2, r2, r3
    a008:	68fb      	ldr	r3, [r7, #12]
    a00a:	609a      	str	r2, [r3, #8]
    a00c:	683b      	ldr	r3, [r7, #0]
    a00e:	681a      	ldr	r2, [r3, #0]
    a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a012:	18d2      	adds	r2, r2, r3
    a014:	683b      	ldr	r3, [r7, #0]
    a016:	601a      	str	r2, [r3, #0]
    a018:	687a      	ldr	r2, [r7, #4]
    a01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a01c:	1ad3      	subs	r3, r2, r3
    a01e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
    a020:	687b      	ldr	r3, [r7, #4]
    a022:	2b00      	cmp	r3, #0
    a024:	d000      	beq.n	a028 <f_read+0x278>
    a026:	e701      	b.n	9e2c <f_read+0x7c>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
    a028:	2300      	movs	r3, #0
}
    a02a:	0018      	movs	r0, r3
    a02c:	46bd      	mov	sp, r7
    a02e:	b00d      	add	sp, #52	; 0x34
    a030:	bd90      	pop	{r4, r7, pc}
    a032:	46c0      	nop			; (mov r8, r8)
    a034:	000097d5 	.word	0x000097d5
    a038:	00007671 	.word	0x00007671
    a03c:	00007639 	.word	0x00007639
    a040:	00006fed 	.word	0x00006fed
    a044:	000072f5 	.word	0x000072f5
    a048:	000073d9 	.word	0x000073d9

0000a04c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    a04c:	b590      	push	{r4, r7, lr}
    a04e:	b08b      	sub	sp, #44	; 0x2c
    a050:	af00      	add	r7, sp, #0
    a052:	60f8      	str	r0, [r7, #12]
    a054:	60b9      	str	r1, [r7, #8]
    a056:	607a      	str	r2, [r7, #4]
    a058:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    a05a:	68bb      	ldr	r3, [r7, #8]
    a05c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    a05e:	683b      	ldr	r3, [r7, #0]
    a060:	2200      	movs	r2, #0
    a062:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    a064:	68fb      	ldr	r3, [r7, #12]
    a066:	681a      	ldr	r2, [r3, #0]
    a068:	68fb      	ldr	r3, [r7, #12]
    a06a:	889b      	ldrh	r3, [r3, #4]
    a06c:	2117      	movs	r1, #23
    a06e:	187c      	adds	r4, r7, r1
    a070:	0019      	movs	r1, r3
    a072:	0010      	movs	r0, r2
    a074:	4bc3      	ldr	r3, [pc, #780]	; (a384 <f_write+0x338>)
    a076:	4798      	blx	r3
    a078:	0003      	movs	r3, r0
    a07a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a07c:	2317      	movs	r3, #23
    a07e:	18fb      	adds	r3, r7, r3
    a080:	781b      	ldrb	r3, [r3, #0]
    a082:	2b00      	cmp	r3, #0
    a084:	d003      	beq.n	a08e <f_write+0x42>
    a086:	2317      	movs	r3, #23
    a088:	18fb      	adds	r3, r7, r3
    a08a:	781b      	ldrb	r3, [r3, #0]
    a08c:	e176      	b.n	a37c <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    a08e:	68fb      	ldr	r3, [r7, #12]
    a090:	799b      	ldrb	r3, [r3, #6]
    a092:	b25b      	sxtb	r3, r3
    a094:	2b00      	cmp	r3, #0
    a096:	da01      	bge.n	a09c <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    a098:	2302      	movs	r3, #2
    a09a:	e16f      	b.n	a37c <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    a09c:	68fb      	ldr	r3, [r7, #12]
    a09e:	799b      	ldrb	r3, [r3, #6]
    a0a0:	001a      	movs	r2, r3
    a0a2:	2302      	movs	r3, #2
    a0a4:	4013      	ands	r3, r2
    a0a6:	d101      	bne.n	a0ac <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    a0a8:	2307      	movs	r3, #7
    a0aa:	e167      	b.n	a37c <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    a0ac:	68fb      	ldr	r3, [r7, #12]
    a0ae:	68da      	ldr	r2, [r3, #12]
    a0b0:	687b      	ldr	r3, [r7, #4]
    a0b2:	18d2      	adds	r2, r2, r3
    a0b4:	68fb      	ldr	r3, [r7, #12]
    a0b6:	68db      	ldr	r3, [r3, #12]
    a0b8:	429a      	cmp	r2, r3
    a0ba:	d300      	bcc.n	a0be <f_write+0x72>
    a0bc:	e146      	b.n	a34c <f_write+0x300>
    a0be:	2300      	movs	r3, #0
    a0c0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
    a0c2:	e143      	b.n	a34c <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    a0c4:	68fb      	ldr	r3, [r7, #12]
    a0c6:	689b      	ldr	r3, [r3, #8]
    a0c8:	05db      	lsls	r3, r3, #23
    a0ca:	0ddb      	lsrs	r3, r3, #23
    a0cc:	d000      	beq.n	a0d0 <f_write+0x84>
    a0ce:	e0f6      	b.n	a2be <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    a0d0:	68fb      	ldr	r3, [r7, #12]
    a0d2:	689b      	ldr	r3, [r3, #8]
    a0d4:	0a5b      	lsrs	r3, r3, #9
    a0d6:	b2da      	uxtb	r2, r3
    a0d8:	68fb      	ldr	r3, [r7, #12]
    a0da:	681b      	ldr	r3, [r3, #0]
    a0dc:	789b      	ldrb	r3, [r3, #2]
    a0de:	3b01      	subs	r3, #1
    a0e0:	b2d9      	uxtb	r1, r3
    a0e2:	2316      	movs	r3, #22
    a0e4:	18fb      	adds	r3, r7, r3
    a0e6:	400a      	ands	r2, r1
    a0e8:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
    a0ea:	2316      	movs	r3, #22
    a0ec:	18fb      	adds	r3, r7, r3
    a0ee:	781b      	ldrb	r3, [r3, #0]
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	d140      	bne.n	a176 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    a0f4:	68fb      	ldr	r3, [r7, #12]
    a0f6:	689b      	ldr	r3, [r3, #8]
    a0f8:	2b00      	cmp	r3, #0
    a0fa:	d111      	bne.n	a120 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    a0fc:	68fb      	ldr	r3, [r7, #12]
    a0fe:	691b      	ldr	r3, [r3, #16]
    a100:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
    a102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a104:	2b00      	cmp	r3, #0
    a106:	d115      	bne.n	a134 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    a108:	68fb      	ldr	r3, [r7, #12]
    a10a:	681b      	ldr	r3, [r3, #0]
    a10c:	2100      	movs	r1, #0
    a10e:	0018      	movs	r0, r3
    a110:	4b9d      	ldr	r3, [pc, #628]	; (a388 <f_write+0x33c>)
    a112:	4798      	blx	r3
    a114:	0003      	movs	r3, r0
    a116:	627b      	str	r3, [r7, #36]	; 0x24
    a118:	68fb      	ldr	r3, [r7, #12]
    a11a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a11c:	611a      	str	r2, [r3, #16]
    a11e:	e009      	b.n	a134 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    a120:	68fb      	ldr	r3, [r7, #12]
    a122:	681a      	ldr	r2, [r3, #0]
    a124:	68fb      	ldr	r3, [r7, #12]
    a126:	695b      	ldr	r3, [r3, #20]
    a128:	0019      	movs	r1, r3
    a12a:	0010      	movs	r0, r2
    a12c:	4b96      	ldr	r3, [pc, #600]	; (a388 <f_write+0x33c>)
    a12e:	4798      	blx	r3
    a130:	0003      	movs	r3, r0
    a132:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a136:	2b00      	cmp	r3, #0
    a138:	d100      	bne.n	a13c <f_write+0xf0>
    a13a:	e10c      	b.n	a356 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a13e:	2b01      	cmp	r3, #1
    a140:	d109      	bne.n	a156 <f_write+0x10a>
    a142:	68fb      	ldr	r3, [r7, #12]
    a144:	799b      	ldrb	r3, [r3, #6]
    a146:	2280      	movs	r2, #128	; 0x80
    a148:	4252      	negs	r2, r2
    a14a:	4313      	orrs	r3, r2
    a14c:	b2da      	uxtb	r2, r3
    a14e:	68fb      	ldr	r3, [r7, #12]
    a150:	719a      	strb	r2, [r3, #6]
    a152:	2302      	movs	r3, #2
    a154:	e112      	b.n	a37c <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a158:	3301      	adds	r3, #1
    a15a:	d109      	bne.n	a170 <f_write+0x124>
    a15c:	68fb      	ldr	r3, [r7, #12]
    a15e:	799b      	ldrb	r3, [r3, #6]
    a160:	2280      	movs	r2, #128	; 0x80
    a162:	4252      	negs	r2, r2
    a164:	4313      	orrs	r3, r2
    a166:	b2da      	uxtb	r2, r3
    a168:	68fb      	ldr	r3, [r7, #12]
    a16a:	719a      	strb	r2, [r3, #6]
    a16c:	2301      	movs	r3, #1
    a16e:	e105      	b.n	a37c <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
    a170:	68fb      	ldr	r3, [r7, #12]
    a172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a174:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    a176:	68fb      	ldr	r3, [r7, #12]
    a178:	681b      	ldr	r3, [r3, #0]
    a17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a17c:	68fb      	ldr	r3, [r7, #12]
    a17e:	699b      	ldr	r3, [r3, #24]
    a180:	429a      	cmp	r2, r3
    a182:	d111      	bne.n	a1a8 <f_write+0x15c>
    a184:	68fb      	ldr	r3, [r7, #12]
    a186:	681b      	ldr	r3, [r3, #0]
    a188:	2100      	movs	r1, #0
    a18a:	0018      	movs	r0, r3
    a18c:	4b7f      	ldr	r3, [pc, #508]	; (a38c <f_write+0x340>)
    a18e:	4798      	blx	r3
    a190:	1e03      	subs	r3, r0, #0
    a192:	d009      	beq.n	a1a8 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    a194:	68fb      	ldr	r3, [r7, #12]
    a196:	799b      	ldrb	r3, [r3, #6]
    a198:	2280      	movs	r2, #128	; 0x80
    a19a:	4252      	negs	r2, r2
    a19c:	4313      	orrs	r3, r2
    a19e:	b2da      	uxtb	r2, r3
    a1a0:	68fb      	ldr	r3, [r7, #12]
    a1a2:	719a      	strb	r2, [r3, #6]
    a1a4:	2301      	movs	r3, #1
    a1a6:	e0e9      	b.n	a37c <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    a1a8:	68fb      	ldr	r3, [r7, #12]
    a1aa:	681a      	ldr	r2, [r3, #0]
    a1ac:	68fb      	ldr	r3, [r7, #12]
    a1ae:	695b      	ldr	r3, [r3, #20]
    a1b0:	0019      	movs	r1, r3
    a1b2:	0010      	movs	r0, r2
    a1b4:	4b76      	ldr	r3, [pc, #472]	; (a390 <f_write+0x344>)
    a1b6:	4798      	blx	r3
    a1b8:	0003      	movs	r3, r0
    a1ba:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    a1bc:	693b      	ldr	r3, [r7, #16]
    a1be:	2b00      	cmp	r3, #0
    a1c0:	d109      	bne.n	a1d6 <f_write+0x18a>
    a1c2:	68fb      	ldr	r3, [r7, #12]
    a1c4:	799b      	ldrb	r3, [r3, #6]
    a1c6:	2280      	movs	r2, #128	; 0x80
    a1c8:	4252      	negs	r2, r2
    a1ca:	4313      	orrs	r3, r2
    a1cc:	b2da      	uxtb	r2, r3
    a1ce:	68fb      	ldr	r3, [r7, #12]
    a1d0:	719a      	strb	r2, [r3, #6]
    a1d2:	2302      	movs	r3, #2
    a1d4:	e0d2      	b.n	a37c <f_write+0x330>
			sect += csect;
    a1d6:	2316      	movs	r3, #22
    a1d8:	18fb      	adds	r3, r7, r3
    a1da:	781b      	ldrb	r3, [r3, #0]
    a1dc:	693a      	ldr	r2, [r7, #16]
    a1de:	18d3      	adds	r3, r2, r3
    a1e0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    a1e2:	687b      	ldr	r3, [r7, #4]
    a1e4:	0a5b      	lsrs	r3, r3, #9
    a1e6:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
    a1e8:	69fb      	ldr	r3, [r7, #28]
    a1ea:	2b00      	cmp	r3, #0
    a1ec:	d048      	beq.n	a280 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a1ee:	2316      	movs	r3, #22
    a1f0:	18fb      	adds	r3, r7, r3
    a1f2:	781a      	ldrb	r2, [r3, #0]
    a1f4:	69fb      	ldr	r3, [r7, #28]
    a1f6:	18d2      	adds	r2, r2, r3
    a1f8:	68fb      	ldr	r3, [r7, #12]
    a1fa:	681b      	ldr	r3, [r3, #0]
    a1fc:	789b      	ldrb	r3, [r3, #2]
    a1fe:	429a      	cmp	r2, r3
    a200:	d908      	bls.n	a214 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
    a202:	68fb      	ldr	r3, [r7, #12]
    a204:	681b      	ldr	r3, [r3, #0]
    a206:	789b      	ldrb	r3, [r3, #2]
    a208:	001a      	movs	r2, r3
    a20a:	2316      	movs	r3, #22
    a20c:	18fb      	adds	r3, r7, r3
    a20e:	781b      	ldrb	r3, [r3, #0]
    a210:	1ad3      	subs	r3, r2, r3
    a212:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    a214:	68fb      	ldr	r3, [r7, #12]
    a216:	681b      	ldr	r3, [r3, #0]
    a218:	7858      	ldrb	r0, [r3, #1]
    a21a:	69fb      	ldr	r3, [r7, #28]
    a21c:	b2db      	uxtb	r3, r3
    a21e:	693a      	ldr	r2, [r7, #16]
    a220:	69b9      	ldr	r1, [r7, #24]
    a222:	4c5c      	ldr	r4, [pc, #368]	; (a394 <f_write+0x348>)
    a224:	47a0      	blx	r4
    a226:	1e03      	subs	r3, r0, #0
    a228:	d009      	beq.n	a23e <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
    a22a:	68fb      	ldr	r3, [r7, #12]
    a22c:	799b      	ldrb	r3, [r3, #6]
    a22e:	2280      	movs	r2, #128	; 0x80
    a230:	4252      	negs	r2, r2
    a232:	4313      	orrs	r3, r2
    a234:	b2da      	uxtb	r2, r3
    a236:	68fb      	ldr	r3, [r7, #12]
    a238:	719a      	strb	r2, [r3, #6]
    a23a:	2301      	movs	r3, #1
    a23c:	e09e      	b.n	a37c <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    a23e:	68fb      	ldr	r3, [r7, #12]
    a240:	681b      	ldr	r3, [r3, #0]
    a242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a244:	693b      	ldr	r3, [r7, #16]
    a246:	1ad2      	subs	r2, r2, r3
    a248:	69fb      	ldr	r3, [r7, #28]
    a24a:	429a      	cmp	r2, r3
    a24c:	d214      	bcs.n	a278 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    a24e:	68fb      	ldr	r3, [r7, #12]
    a250:	681b      	ldr	r3, [r3, #0]
    a252:	3330      	adds	r3, #48	; 0x30
    a254:	0018      	movs	r0, r3
    a256:	68fb      	ldr	r3, [r7, #12]
    a258:	681b      	ldr	r3, [r3, #0]
    a25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a25c:	693b      	ldr	r3, [r7, #16]
    a25e:	1ad3      	subs	r3, r2, r3
    a260:	025b      	lsls	r3, r3, #9
    a262:	69ba      	ldr	r2, [r7, #24]
    a264:	18d1      	adds	r1, r2, r3
    a266:	2380      	movs	r3, #128	; 0x80
    a268:	009b      	lsls	r3, r3, #2
    a26a:	001a      	movs	r2, r3
    a26c:	4b4a      	ldr	r3, [pc, #296]	; (a398 <f_write+0x34c>)
    a26e:	4798      	blx	r3
					fp->fs->wflag = 0;
    a270:	68fb      	ldr	r3, [r7, #12]
    a272:	681b      	ldr	r3, [r3, #0]
    a274:	2200      	movs	r2, #0
    a276:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    a278:	69fb      	ldr	r3, [r7, #28]
    a27a:	025b      	lsls	r3, r3, #9
    a27c:	623b      	str	r3, [r7, #32]
				continue;
    a27e:	e051      	b.n	a324 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    a280:	68fb      	ldr	r3, [r7, #12]
    a282:	689a      	ldr	r2, [r3, #8]
    a284:	68fb      	ldr	r3, [r7, #12]
    a286:	68db      	ldr	r3, [r3, #12]
    a288:	429a      	cmp	r2, r3
    a28a:	d315      	bcc.n	a2b8 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    a28c:	68fb      	ldr	r3, [r7, #12]
    a28e:	681b      	ldr	r3, [r3, #0]
    a290:	2100      	movs	r1, #0
    a292:	0018      	movs	r0, r3
    a294:	4b3d      	ldr	r3, [pc, #244]	; (a38c <f_write+0x340>)
    a296:	4798      	blx	r3
    a298:	1e03      	subs	r3, r0, #0
    a29a:	d009      	beq.n	a2b0 <f_write+0x264>
    a29c:	68fb      	ldr	r3, [r7, #12]
    a29e:	799b      	ldrb	r3, [r3, #6]
    a2a0:	2280      	movs	r2, #128	; 0x80
    a2a2:	4252      	negs	r2, r2
    a2a4:	4313      	orrs	r3, r2
    a2a6:	b2da      	uxtb	r2, r3
    a2a8:	68fb      	ldr	r3, [r7, #12]
    a2aa:	719a      	strb	r2, [r3, #6]
    a2ac:	2301      	movs	r3, #1
    a2ae:	e065      	b.n	a37c <f_write+0x330>
				fp->fs->winsect = sect;
    a2b0:	68fb      	ldr	r3, [r7, #12]
    a2b2:	681b      	ldr	r3, [r3, #0]
    a2b4:	693a      	ldr	r2, [r7, #16]
    a2b6:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a2b8:	68fb      	ldr	r3, [r7, #12]
    a2ba:	693a      	ldr	r2, [r7, #16]
    a2bc:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    a2be:	68fb      	ldr	r3, [r7, #12]
    a2c0:	689b      	ldr	r3, [r3, #8]
    a2c2:	05db      	lsls	r3, r3, #23
    a2c4:	0ddb      	lsrs	r3, r3, #23
    a2c6:	2280      	movs	r2, #128	; 0x80
    a2c8:	0092      	lsls	r2, r2, #2
    a2ca:	1ad3      	subs	r3, r2, r3
    a2cc:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
    a2ce:	6a3a      	ldr	r2, [r7, #32]
    a2d0:	687b      	ldr	r3, [r7, #4]
    a2d2:	429a      	cmp	r2, r3
    a2d4:	d901      	bls.n	a2da <f_write+0x28e>
    a2d6:	687b      	ldr	r3, [r7, #4]
    a2d8:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    a2da:	68fb      	ldr	r3, [r7, #12]
    a2dc:	681a      	ldr	r2, [r3, #0]
    a2de:	68fb      	ldr	r3, [r7, #12]
    a2e0:	699b      	ldr	r3, [r3, #24]
    a2e2:	0019      	movs	r1, r3
    a2e4:	0010      	movs	r0, r2
    a2e6:	4b29      	ldr	r3, [pc, #164]	; (a38c <f_write+0x340>)
    a2e8:	4798      	blx	r3
    a2ea:	1e03      	subs	r3, r0, #0
    a2ec:	d009      	beq.n	a302 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
    a2ee:	68fb      	ldr	r3, [r7, #12]
    a2f0:	799b      	ldrb	r3, [r3, #6]
    a2f2:	2280      	movs	r2, #128	; 0x80
    a2f4:	4252      	negs	r2, r2
    a2f6:	4313      	orrs	r3, r2
    a2f8:	b2da      	uxtb	r2, r3
    a2fa:	68fb      	ldr	r3, [r7, #12]
    a2fc:	719a      	strb	r2, [r3, #6]
    a2fe:	2301      	movs	r3, #1
    a300:	e03c      	b.n	a37c <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    a302:	68fb      	ldr	r3, [r7, #12]
    a304:	681a      	ldr	r2, [r3, #0]
    a306:	68fb      	ldr	r3, [r7, #12]
    a308:	689b      	ldr	r3, [r3, #8]
    a30a:	05db      	lsls	r3, r3, #23
    a30c:	0ddb      	lsrs	r3, r3, #23
    a30e:	3330      	adds	r3, #48	; 0x30
    a310:	18d3      	adds	r3, r2, r3
    a312:	6a3a      	ldr	r2, [r7, #32]
    a314:	69b9      	ldr	r1, [r7, #24]
    a316:	0018      	movs	r0, r3
    a318:	4b1f      	ldr	r3, [pc, #124]	; (a398 <f_write+0x34c>)
    a31a:	4798      	blx	r3
		fp->fs->wflag = 1;
    a31c:	68fb      	ldr	r3, [r7, #12]
    a31e:	681b      	ldr	r3, [r3, #0]
    a320:	2201      	movs	r2, #1
    a322:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    a324:	69ba      	ldr	r2, [r7, #24]
    a326:	6a3b      	ldr	r3, [r7, #32]
    a328:	18d3      	adds	r3, r2, r3
    a32a:	61bb      	str	r3, [r7, #24]
    a32c:	68fb      	ldr	r3, [r7, #12]
    a32e:	689a      	ldr	r2, [r3, #8]
    a330:	6a3b      	ldr	r3, [r7, #32]
    a332:	18d2      	adds	r2, r2, r3
    a334:	68fb      	ldr	r3, [r7, #12]
    a336:	609a      	str	r2, [r3, #8]
    a338:	683b      	ldr	r3, [r7, #0]
    a33a:	681a      	ldr	r2, [r3, #0]
    a33c:	6a3b      	ldr	r3, [r7, #32]
    a33e:	18d2      	adds	r2, r2, r3
    a340:	683b      	ldr	r3, [r7, #0]
    a342:	601a      	str	r2, [r3, #0]
    a344:	687a      	ldr	r2, [r7, #4]
    a346:	6a3b      	ldr	r3, [r7, #32]
    a348:	1ad3      	subs	r3, r2, r3
    a34a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
    a34c:	687b      	ldr	r3, [r7, #4]
    a34e:	2b00      	cmp	r3, #0
    a350:	d000      	beq.n	a354 <f_write+0x308>
    a352:	e6b7      	b.n	a0c4 <f_write+0x78>
    a354:	e000      	b.n	a358 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a356:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    a358:	68fb      	ldr	r3, [r7, #12]
    a35a:	689a      	ldr	r2, [r3, #8]
    a35c:	68fb      	ldr	r3, [r7, #12]
    a35e:	68db      	ldr	r3, [r3, #12]
    a360:	429a      	cmp	r2, r3
    a362:	d903      	bls.n	a36c <f_write+0x320>
    a364:	68fb      	ldr	r3, [r7, #12]
    a366:	689a      	ldr	r2, [r3, #8]
    a368:	68fb      	ldr	r3, [r7, #12]
    a36a:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    a36c:	68fb      	ldr	r3, [r7, #12]
    a36e:	799b      	ldrb	r3, [r3, #6]
    a370:	2220      	movs	r2, #32
    a372:	4313      	orrs	r3, r2
    a374:	b2da      	uxtb	r2, r3
    a376:	68fb      	ldr	r3, [r7, #12]
    a378:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
    a37a:	2300      	movs	r3, #0
}
    a37c:	0018      	movs	r0, r3
    a37e:	46bd      	mov	sp, r7
    a380:	b00b      	add	sp, #44	; 0x2c
    a382:	bd90      	pop	{r4, r7, pc}
    a384:	000097d5 	.word	0x000097d5
    a388:	00007ae1 	.word	0x00007ae1
    a38c:	000073d9 	.word	0x000073d9
    a390:	00007639 	.word	0x00007639
    a394:	000070c5 	.word	0x000070c5
    a398:	000072f5 	.word	0x000072f5

0000a39c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    a39c:	b590      	push	{r4, r7, lr}
    a39e:	b087      	sub	sp, #28
    a3a0:	af00      	add	r7, sp, #0
    a3a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    a3a4:	687b      	ldr	r3, [r7, #4]
    a3a6:	681a      	ldr	r2, [r3, #0]
    a3a8:	687b      	ldr	r3, [r7, #4]
    a3aa:	889b      	ldrh	r3, [r3, #4]
    a3ac:	2117      	movs	r1, #23
    a3ae:	187c      	adds	r4, r7, r1
    a3b0:	0019      	movs	r1, r3
    a3b2:	0010      	movs	r0, r2
    a3b4:	4b55      	ldr	r3, [pc, #340]	; (a50c <f_sync+0x170>)
    a3b6:	4798      	blx	r3
    a3b8:	0003      	movs	r3, r0
    a3ba:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a3bc:	2317      	movs	r3, #23
    a3be:	18fb      	adds	r3, r7, r3
    a3c0:	781b      	ldrb	r3, [r3, #0]
    a3c2:	2b00      	cmp	r3, #0
    a3c4:	d000      	beq.n	a3c8 <f_sync+0x2c>
    a3c6:	e09a      	b.n	a4fe <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    a3c8:	687b      	ldr	r3, [r7, #4]
    a3ca:	799b      	ldrb	r3, [r3, #6]
    a3cc:	001a      	movs	r2, r3
    a3ce:	2320      	movs	r3, #32
    a3d0:	4013      	ands	r3, r2
    a3d2:	d100      	bne.n	a3d6 <f_sync+0x3a>
    a3d4:	e093      	b.n	a4fe <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    a3d6:	687b      	ldr	r3, [r7, #4]
    a3d8:	681a      	ldr	r2, [r3, #0]
    a3da:	687b      	ldr	r3, [r7, #4]
    a3dc:	69db      	ldr	r3, [r3, #28]
    a3de:	2117      	movs	r1, #23
    a3e0:	187c      	adds	r4, r7, r1
    a3e2:	0019      	movs	r1, r3
    a3e4:	0010      	movs	r0, r2
    a3e6:	4b4a      	ldr	r3, [pc, #296]	; (a510 <f_sync+0x174>)
    a3e8:	4798      	blx	r3
    a3ea:	0003      	movs	r3, r0
    a3ec:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
    a3ee:	2317      	movs	r3, #23
    a3f0:	18fb      	adds	r3, r7, r3
    a3f2:	781b      	ldrb	r3, [r3, #0]
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	d000      	beq.n	a3fa <f_sync+0x5e>
    a3f8:	e081      	b.n	a4fe <f_sync+0x162>
				dir = fp->dir_ptr;
    a3fa:	687b      	ldr	r3, [r7, #4]
    a3fc:	6a1b      	ldr	r3, [r3, #32]
    a3fe:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    a400:	693b      	ldr	r3, [r7, #16]
    a402:	330b      	adds	r3, #11
    a404:	693a      	ldr	r2, [r7, #16]
    a406:	320b      	adds	r2, #11
    a408:	7812      	ldrb	r2, [r2, #0]
    a40a:	2120      	movs	r1, #32
    a40c:	430a      	orrs	r2, r1
    a40e:	b2d2      	uxtb	r2, r2
    a410:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    a412:	693b      	ldr	r3, [r7, #16]
    a414:	331c      	adds	r3, #28
    a416:	001a      	movs	r2, r3
    a418:	687b      	ldr	r3, [r7, #4]
    a41a:	68db      	ldr	r3, [r3, #12]
    a41c:	b2db      	uxtb	r3, r3
    a41e:	7013      	strb	r3, [r2, #0]
    a420:	693b      	ldr	r3, [r7, #16]
    a422:	331d      	adds	r3, #29
    a424:	001a      	movs	r2, r3
    a426:	687b      	ldr	r3, [r7, #4]
    a428:	68db      	ldr	r3, [r3, #12]
    a42a:	b29b      	uxth	r3, r3
    a42c:	0a1b      	lsrs	r3, r3, #8
    a42e:	b29b      	uxth	r3, r3
    a430:	b2db      	uxtb	r3, r3
    a432:	7013      	strb	r3, [r2, #0]
    a434:	693b      	ldr	r3, [r7, #16]
    a436:	331e      	adds	r3, #30
    a438:	001a      	movs	r2, r3
    a43a:	687b      	ldr	r3, [r7, #4]
    a43c:	68db      	ldr	r3, [r3, #12]
    a43e:	0c1b      	lsrs	r3, r3, #16
    a440:	b2db      	uxtb	r3, r3
    a442:	7013      	strb	r3, [r2, #0]
    a444:	693b      	ldr	r3, [r7, #16]
    a446:	331f      	adds	r3, #31
    a448:	001a      	movs	r2, r3
    a44a:	687b      	ldr	r3, [r7, #4]
    a44c:	68db      	ldr	r3, [r3, #12]
    a44e:	0e1b      	lsrs	r3, r3, #24
    a450:	b2db      	uxtb	r3, r3
    a452:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    a454:	693b      	ldr	r3, [r7, #16]
    a456:	331a      	adds	r3, #26
    a458:	001a      	movs	r2, r3
    a45a:	687b      	ldr	r3, [r7, #4]
    a45c:	691b      	ldr	r3, [r3, #16]
    a45e:	b2db      	uxtb	r3, r3
    a460:	7013      	strb	r3, [r2, #0]
    a462:	693b      	ldr	r3, [r7, #16]
    a464:	331b      	adds	r3, #27
    a466:	001a      	movs	r2, r3
    a468:	687b      	ldr	r3, [r7, #4]
    a46a:	691b      	ldr	r3, [r3, #16]
    a46c:	b29b      	uxth	r3, r3
    a46e:	0a1b      	lsrs	r3, r3, #8
    a470:	b29b      	uxth	r3, r3
    a472:	b2db      	uxtb	r3, r3
    a474:	7013      	strb	r3, [r2, #0]
    a476:	693b      	ldr	r3, [r7, #16]
    a478:	3314      	adds	r3, #20
    a47a:	001a      	movs	r2, r3
    a47c:	687b      	ldr	r3, [r7, #4]
    a47e:	691b      	ldr	r3, [r3, #16]
    a480:	0c1b      	lsrs	r3, r3, #16
    a482:	b2db      	uxtb	r3, r3
    a484:	7013      	strb	r3, [r2, #0]
    a486:	693b      	ldr	r3, [r7, #16]
    a488:	3315      	adds	r3, #21
    a48a:	001a      	movs	r2, r3
    a48c:	687b      	ldr	r3, [r7, #4]
    a48e:	691b      	ldr	r3, [r3, #16]
    a490:	0c1b      	lsrs	r3, r3, #16
    a492:	b29b      	uxth	r3, r3
    a494:	0a1b      	lsrs	r3, r3, #8
    a496:	b29b      	uxth	r3, r3
    a498:	b2db      	uxtb	r3, r3
    a49a:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
    a49c:	4b1d      	ldr	r3, [pc, #116]	; (a514 <f_sync+0x178>)
    a49e:	4798      	blx	r3
    a4a0:	0003      	movs	r3, r0
    a4a2:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
    a4a4:	693b      	ldr	r3, [r7, #16]
    a4a6:	3316      	adds	r3, #22
    a4a8:	68fa      	ldr	r2, [r7, #12]
    a4aa:	b2d2      	uxtb	r2, r2
    a4ac:	701a      	strb	r2, [r3, #0]
    a4ae:	693b      	ldr	r3, [r7, #16]
    a4b0:	3317      	adds	r3, #23
    a4b2:	68fa      	ldr	r2, [r7, #12]
    a4b4:	b292      	uxth	r2, r2
    a4b6:	0a12      	lsrs	r2, r2, #8
    a4b8:	b292      	uxth	r2, r2
    a4ba:	b2d2      	uxtb	r2, r2
    a4bc:	701a      	strb	r2, [r3, #0]
    a4be:	693b      	ldr	r3, [r7, #16]
    a4c0:	3318      	adds	r3, #24
    a4c2:	68fa      	ldr	r2, [r7, #12]
    a4c4:	0c12      	lsrs	r2, r2, #16
    a4c6:	b2d2      	uxtb	r2, r2
    a4c8:	701a      	strb	r2, [r3, #0]
    a4ca:	693b      	ldr	r3, [r7, #16]
    a4cc:	3319      	adds	r3, #25
    a4ce:	68fa      	ldr	r2, [r7, #12]
    a4d0:	0e12      	lsrs	r2, r2, #24
    a4d2:	b2d2      	uxtb	r2, r2
    a4d4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
    a4d6:	687b      	ldr	r3, [r7, #4]
    a4d8:	799b      	ldrb	r3, [r3, #6]
    a4da:	2220      	movs	r2, #32
    a4dc:	4393      	bics	r3, r2
    a4de:	b2da      	uxtb	r2, r3
    a4e0:	687b      	ldr	r3, [r7, #4]
    a4e2:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
    a4e4:	687b      	ldr	r3, [r7, #4]
    a4e6:	681b      	ldr	r3, [r3, #0]
    a4e8:	2201      	movs	r2, #1
    a4ea:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
    a4ec:	687b      	ldr	r3, [r7, #4]
    a4ee:	681b      	ldr	r3, [r3, #0]
    a4f0:	2217      	movs	r2, #23
    a4f2:	18bc      	adds	r4, r7, r2
    a4f4:	0018      	movs	r0, r3
    a4f6:	4b08      	ldr	r3, [pc, #32]	; (a518 <f_sync+0x17c>)
    a4f8:	4798      	blx	r3
    a4fa:	0003      	movs	r3, r0
    a4fc:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
    a4fe:	2317      	movs	r3, #23
    a500:	18fb      	adds	r3, r7, r3
    a502:	781b      	ldrb	r3, [r3, #0]
}
    a504:	0018      	movs	r0, r3
    a506:	46bd      	mov	sp, r7
    a508:	b007      	add	sp, #28
    a50a:	bd90      	pop	{r4, r7, pc}
    a50c:	000097d5 	.word	0x000097d5
    a510:	000073d9 	.word	0x000073d9
    a514:	00007295 	.word	0x00007295
    a518:	000074a1 	.word	0x000074a1

0000a51c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    a51c:	b590      	push	{r4, r7, lr}
    a51e:	b085      	sub	sp, #20
    a520:	af00      	add	r7, sp, #0
    a522:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    a524:	230f      	movs	r3, #15
    a526:	18fc      	adds	r4, r7, r3
    a528:	687b      	ldr	r3, [r7, #4]
    a52a:	0018      	movs	r0, r3
    a52c:	4b09      	ldr	r3, [pc, #36]	; (a554 <f_close+0x38>)
    a52e:	4798      	blx	r3
    a530:	0003      	movs	r3, r0
    a532:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    a534:	230f      	movs	r3, #15
    a536:	18fb      	adds	r3, r7, r3
    a538:	781b      	ldrb	r3, [r3, #0]
    a53a:	2b00      	cmp	r3, #0
    a53c:	d102      	bne.n	a544 <f_close+0x28>
    a53e:	687b      	ldr	r3, [r7, #4]
    a540:	2200      	movs	r2, #0
    a542:	601a      	str	r2, [r3, #0]
	return res;
    a544:	230f      	movs	r3, #15
    a546:	18fb      	adds	r3, r7, r3
    a548:	781b      	ldrb	r3, [r3, #0]
#endif
}
    a54a:	0018      	movs	r0, r3
    a54c:	46bd      	mov	sp, r7
    a54e:	b005      	add	sp, #20
    a550:	bd90      	pop	{r4, r7, pc}
    a552:	46c0      	nop			; (mov r8, r8)
    a554:	0000a39d 	.word	0x0000a39d

0000a558 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    a558:	b590      	push	{r4, r7, lr}
    a55a:	4c8d      	ldr	r4, [pc, #564]	; (a790 <f_unlink+0x238>)
    a55c:	44a5      	add	sp, r4
    a55e:	af00      	add	r7, sp, #0
    a560:	6078      	str	r0, [r7, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    a562:	4b8c      	ldr	r3, [pc, #560]	; (a794 <f_unlink+0x23c>)
    a564:	18fc      	adds	r4, r7, r3
    a566:	238e      	movs	r3, #142	; 0x8e
    a568:	009b      	lsls	r3, r3, #2
    a56a:	18f9      	adds	r1, r7, r3
    a56c:	1d3b      	adds	r3, r7, #4
    a56e:	2201      	movs	r2, #1
    a570:	0018      	movs	r0, r3
    a572:	4b89      	ldr	r3, [pc, #548]	; (a798 <f_unlink+0x240>)
    a574:	4798      	blx	r3
    a576:	0003      	movs	r3, r0
    a578:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a57a:	4b86      	ldr	r3, [pc, #536]	; (a794 <f_unlink+0x23c>)
    a57c:	18fb      	adds	r3, r7, r3
    a57e:	781b      	ldrb	r3, [r3, #0]
    a580:	2b00      	cmp	r3, #0
    a582:	d000      	beq.n	a586 <f_unlink+0x2e>
    a584:	e0fb      	b.n	a77e <f_unlink+0x226>
		INIT_BUF(dj);
    a586:	238e      	movs	r3, #142	; 0x8e
    a588:	009b      	lsls	r3, r3, #2
    a58a:	18fb      	adds	r3, r7, r3
    a58c:	2282      	movs	r2, #130	; 0x82
    a58e:	0092      	lsls	r2, r2, #2
    a590:	18ba      	adds	r2, r7, r2
    a592:	619a      	str	r2, [r3, #24]
    a594:	238e      	movs	r3, #142	; 0x8e
    a596:	009b      	lsls	r3, r3, #2
    a598:	18fb      	adds	r3, r7, r3
    a59a:	2208      	movs	r2, #8
    a59c:	18ba      	adds	r2, r7, r2
    a59e:	61da      	str	r2, [r3, #28]
		res = follow_path(&dj, path);		/* Follow the file path */
    a5a0:	687a      	ldr	r2, [r7, #4]
    a5a2:	4b7c      	ldr	r3, [pc, #496]	; (a794 <f_unlink+0x23c>)
    a5a4:	18fc      	adds	r4, r7, r3
    a5a6:	238e      	movs	r3, #142	; 0x8e
    a5a8:	009b      	lsls	r3, r3, #2
    a5aa:	18fb      	adds	r3, r7, r3
    a5ac:	0011      	movs	r1, r2
    a5ae:	0018      	movs	r0, r3
    a5b0:	4b7a      	ldr	r3, [pc, #488]	; (a79c <f_unlink+0x244>)
    a5b2:	4798      	blx	r3
    a5b4:	0003      	movs	r3, r0
    a5b6:	7023      	strb	r3, [r4, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    a5b8:	4b76      	ldr	r3, [pc, #472]	; (a794 <f_unlink+0x23c>)
    a5ba:	18fb      	adds	r3, r7, r3
    a5bc:	781b      	ldrb	r3, [r3, #0]
    a5be:	2b00      	cmp	r3, #0
    a5c0:	d000      	beq.n	a5c4 <f_unlink+0x6c>
    a5c2:	e0dc      	b.n	a77e <f_unlink+0x226>
			dir = dj.dir;
    a5c4:	238e      	movs	r3, #142	; 0x8e
    a5c6:	009b      	lsls	r3, r3, #2
    a5c8:	18fb      	adds	r3, r7, r3
    a5ca:	695b      	ldr	r3, [r3, #20]
    a5cc:	2298      	movs	r2, #152	; 0x98
    a5ce:	0092      	lsls	r2, r2, #2
    a5d0:	18ba      	adds	r2, r7, r2
    a5d2:	6013      	str	r3, [r2, #0]
			if (!dir) {
    a5d4:	2398      	movs	r3, #152	; 0x98
    a5d6:	009b      	lsls	r3, r3, #2
    a5d8:	18fb      	adds	r3, r7, r3
    a5da:	681b      	ldr	r3, [r3, #0]
    a5dc:	2b00      	cmp	r3, #0
    a5de:	d104      	bne.n	a5ea <f_unlink+0x92>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    a5e0:	4b6c      	ldr	r3, [pc, #432]	; (a794 <f_unlink+0x23c>)
    a5e2:	18fb      	adds	r3, r7, r3
    a5e4:	2206      	movs	r2, #6
    a5e6:	701a      	strb	r2, [r3, #0]
    a5e8:	e00d      	b.n	a606 <f_unlink+0xae>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    a5ea:	2398      	movs	r3, #152	; 0x98
    a5ec:	009b      	lsls	r3, r3, #2
    a5ee:	18fb      	adds	r3, r7, r3
    a5f0:	681b      	ldr	r3, [r3, #0]
    a5f2:	330b      	adds	r3, #11
    a5f4:	781b      	ldrb	r3, [r3, #0]
    a5f6:	001a      	movs	r2, r3
    a5f8:	2301      	movs	r3, #1
    a5fa:	4013      	ands	r3, r2
    a5fc:	d003      	beq.n	a606 <f_unlink+0xae>
					res = FR_DENIED;		/* Cannot remove R/O object */
    a5fe:	4b65      	ldr	r3, [pc, #404]	; (a794 <f_unlink+0x23c>)
    a600:	18fb      	adds	r3, r7, r3
    a602:	2207      	movs	r2, #7
    a604:	701a      	strb	r2, [r3, #0]
			}
			dclst = LD_CLUST(dir);
    a606:	2398      	movs	r3, #152	; 0x98
    a608:	009b      	lsls	r3, r3, #2
    a60a:	18fb      	adds	r3, r7, r3
    a60c:	681b      	ldr	r3, [r3, #0]
    a60e:	3315      	adds	r3, #21
    a610:	781b      	ldrb	r3, [r3, #0]
    a612:	021b      	lsls	r3, r3, #8
    a614:	b21a      	sxth	r2, r3
    a616:	2398      	movs	r3, #152	; 0x98
    a618:	009b      	lsls	r3, r3, #2
    a61a:	18fb      	adds	r3, r7, r3
    a61c:	681b      	ldr	r3, [r3, #0]
    a61e:	3314      	adds	r3, #20
    a620:	781b      	ldrb	r3, [r3, #0]
    a622:	b21b      	sxth	r3, r3
    a624:	4313      	orrs	r3, r2
    a626:	b21b      	sxth	r3, r3
    a628:	b29b      	uxth	r3, r3
    a62a:	041b      	lsls	r3, r3, #16
    a62c:	2298      	movs	r2, #152	; 0x98
    a62e:	0092      	lsls	r2, r2, #2
    a630:	18ba      	adds	r2, r7, r2
    a632:	6812      	ldr	r2, [r2, #0]
    a634:	321b      	adds	r2, #27
    a636:	7812      	ldrb	r2, [r2, #0]
    a638:	0212      	lsls	r2, r2, #8
    a63a:	b211      	sxth	r1, r2
    a63c:	2298      	movs	r2, #152	; 0x98
    a63e:	0092      	lsls	r2, r2, #2
    a640:	18ba      	adds	r2, r7, r2
    a642:	6812      	ldr	r2, [r2, #0]
    a644:	321a      	adds	r2, #26
    a646:	7812      	ldrb	r2, [r2, #0]
    a648:	b212      	sxth	r2, r2
    a64a:	430a      	orrs	r2, r1
    a64c:	b212      	sxth	r2, r2
    a64e:	b292      	uxth	r2, r2
    a650:	4313      	orrs	r3, r2
    a652:	2297      	movs	r2, #151	; 0x97
    a654:	0092      	lsls	r2, r2, #2
    a656:	18ba      	adds	r2, r7, r2
    a658:	6013      	str	r3, [r2, #0]
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    a65a:	4b4e      	ldr	r3, [pc, #312]	; (a794 <f_unlink+0x23c>)
    a65c:	18fb      	adds	r3, r7, r3
    a65e:	781b      	ldrb	r3, [r3, #0]
    a660:	2b00      	cmp	r3, #0
    a662:	d152      	bne.n	a70a <f_unlink+0x1b2>
    a664:	2398      	movs	r3, #152	; 0x98
    a666:	009b      	lsls	r3, r3, #2
    a668:	18fb      	adds	r3, r7, r3
    a66a:	681b      	ldr	r3, [r3, #0]
    a66c:	330b      	adds	r3, #11
    a66e:	781b      	ldrb	r3, [r3, #0]
    a670:	001a      	movs	r2, r3
    a672:	2310      	movs	r3, #16
    a674:	4013      	ands	r3, r2
    a676:	d048      	beq.n	a70a <f_unlink+0x1b2>
				if (dclst < 2) {
    a678:	2397      	movs	r3, #151	; 0x97
    a67a:	009b      	lsls	r3, r3, #2
    a67c:	18fb      	adds	r3, r7, r3
    a67e:	681b      	ldr	r3, [r3, #0]
    a680:	2b01      	cmp	r3, #1
    a682:	d804      	bhi.n	a68e <f_unlink+0x136>
					res = FR_INT_ERR;
    a684:	4b43      	ldr	r3, [pc, #268]	; (a794 <f_unlink+0x23c>)
    a686:	18fb      	adds	r3, r7, r3
    a688:	2202      	movs	r2, #2
    a68a:	701a      	strb	r2, [r3, #0]
    a68c:	e03d      	b.n	a70a <f_unlink+0x1b2>
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    a68e:	238e      	movs	r3, #142	; 0x8e
    a690:	009b      	lsls	r3, r3, #2
    a692:	18f9      	adds	r1, r7, r3
    a694:	2385      	movs	r3, #133	; 0x85
    a696:	009b      	lsls	r3, r3, #2
    a698:	18fb      	adds	r3, r7, r3
    a69a:	2224      	movs	r2, #36	; 0x24
    a69c:	0018      	movs	r0, r3
    a69e:	4b40      	ldr	r3, [pc, #256]	; (a7a0 <f_unlink+0x248>)
    a6a0:	4798      	blx	r3
					sdj.sclust = dclst;
    a6a2:	2385      	movs	r3, #133	; 0x85
    a6a4:	009b      	lsls	r3, r3, #2
    a6a6:	18fb      	adds	r3, r7, r3
    a6a8:	2297      	movs	r2, #151	; 0x97
    a6aa:	0092      	lsls	r2, r2, #2
    a6ac:	18ba      	adds	r2, r7, r2
    a6ae:	6812      	ldr	r2, [r2, #0]
    a6b0:	609a      	str	r2, [r3, #8]
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    a6b2:	4b38      	ldr	r3, [pc, #224]	; (a794 <f_unlink+0x23c>)
    a6b4:	18fc      	adds	r4, r7, r3
    a6b6:	2385      	movs	r3, #133	; 0x85
    a6b8:	009b      	lsls	r3, r3, #2
    a6ba:	18fb      	adds	r3, r7, r3
    a6bc:	2102      	movs	r1, #2
    a6be:	0018      	movs	r0, r3
    a6c0:	4b38      	ldr	r3, [pc, #224]	; (a7a4 <f_unlink+0x24c>)
    a6c2:	4798      	blx	r3
    a6c4:	0003      	movs	r3, r0
    a6c6:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
    a6c8:	4b32      	ldr	r3, [pc, #200]	; (a794 <f_unlink+0x23c>)
    a6ca:	18fb      	adds	r3, r7, r3
    a6cc:	781b      	ldrb	r3, [r3, #0]
    a6ce:	2b00      	cmp	r3, #0
    a6d0:	d11b      	bne.n	a70a <f_unlink+0x1b2>
						res = dir_read(&sdj);
    a6d2:	4b30      	ldr	r3, [pc, #192]	; (a794 <f_unlink+0x23c>)
    a6d4:	18fc      	adds	r4, r7, r3
    a6d6:	2385      	movs	r3, #133	; 0x85
    a6d8:	009b      	lsls	r3, r3, #2
    a6da:	18fb      	adds	r3, r7, r3
    a6dc:	0018      	movs	r0, r3
    a6de:	4b32      	ldr	r3, [pc, #200]	; (a7a8 <f_unlink+0x250>)
    a6e0:	4798      	blx	r3
    a6e2:	0003      	movs	r3, r0
    a6e4:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK			/* Not empty dir */
    a6e6:	4b2b      	ldr	r3, [pc, #172]	; (a794 <f_unlink+0x23c>)
    a6e8:	18fb      	adds	r3, r7, r3
    a6ea:	781b      	ldrb	r3, [r3, #0]
    a6ec:	2b00      	cmp	r3, #0
    a6ee:	d103      	bne.n	a6f8 <f_unlink+0x1a0>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
    a6f0:	4b28      	ldr	r3, [pc, #160]	; (a794 <f_unlink+0x23c>)
    a6f2:	18fb      	adds	r3, r7, r3
    a6f4:	2207      	movs	r2, #7
    a6f6:	701a      	strb	r2, [r3, #0]
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    a6f8:	4b26      	ldr	r3, [pc, #152]	; (a794 <f_unlink+0x23c>)
    a6fa:	18fb      	adds	r3, r7, r3
    a6fc:	781b      	ldrb	r3, [r3, #0]
    a6fe:	2b04      	cmp	r3, #4
    a700:	d103      	bne.n	a70a <f_unlink+0x1b2>
    a702:	4b24      	ldr	r3, [pc, #144]	; (a794 <f_unlink+0x23c>)
    a704:	18fb      	adds	r3, r7, r3
    a706:	2200      	movs	r2, #0
    a708:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (res == FR_OK) {
    a70a:	4b22      	ldr	r3, [pc, #136]	; (a794 <f_unlink+0x23c>)
    a70c:	18fb      	adds	r3, r7, r3
    a70e:	781b      	ldrb	r3, [r3, #0]
    a710:	2b00      	cmp	r3, #0
    a712:	d134      	bne.n	a77e <f_unlink+0x226>
				res = dir_remove(&dj);		/* Remove the directory entry */
    a714:	4b1f      	ldr	r3, [pc, #124]	; (a794 <f_unlink+0x23c>)
    a716:	18fc      	adds	r4, r7, r3
    a718:	238e      	movs	r3, #142	; 0x8e
    a71a:	009b      	lsls	r3, r3, #2
    a71c:	18fb      	adds	r3, r7, r3
    a71e:	0018      	movs	r0, r3
    a720:	4b22      	ldr	r3, [pc, #136]	; (a7ac <f_unlink+0x254>)
    a722:	4798      	blx	r3
    a724:	0003      	movs	r3, r0
    a726:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    a728:	4b1a      	ldr	r3, [pc, #104]	; (a794 <f_unlink+0x23c>)
    a72a:	18fb      	adds	r3, r7, r3
    a72c:	781b      	ldrb	r3, [r3, #0]
    a72e:	2b00      	cmp	r3, #0
    a730:	d125      	bne.n	a77e <f_unlink+0x226>
					if (dclst)				/* Remove the cluster chain if exist */
    a732:	2397      	movs	r3, #151	; 0x97
    a734:	009b      	lsls	r3, r3, #2
    a736:	18fb      	adds	r3, r7, r3
    a738:	681b      	ldr	r3, [r3, #0]
    a73a:	2b00      	cmp	r3, #0
    a73c:	d00f      	beq.n	a75e <f_unlink+0x206>
						res = remove_chain(dj.fs, dclst);
    a73e:	238e      	movs	r3, #142	; 0x8e
    a740:	009b      	lsls	r3, r3, #2
    a742:	18fb      	adds	r3, r7, r3
    a744:	681b      	ldr	r3, [r3, #0]
    a746:	4a13      	ldr	r2, [pc, #76]	; (a794 <f_unlink+0x23c>)
    a748:	18bc      	adds	r4, r7, r2
    a74a:	2297      	movs	r2, #151	; 0x97
    a74c:	0092      	lsls	r2, r2, #2
    a74e:	18ba      	adds	r2, r7, r2
    a750:	6812      	ldr	r2, [r2, #0]
    a752:	0011      	movs	r1, r2
    a754:	0018      	movs	r0, r3
    a756:	4b16      	ldr	r3, [pc, #88]	; (a7b0 <f_unlink+0x258>)
    a758:	4798      	blx	r3
    a75a:	0003      	movs	r3, r0
    a75c:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) res = sync(dj.fs);
    a75e:	4b0d      	ldr	r3, [pc, #52]	; (a794 <f_unlink+0x23c>)
    a760:	18fb      	adds	r3, r7, r3
    a762:	781b      	ldrb	r3, [r3, #0]
    a764:	2b00      	cmp	r3, #0
    a766:	d10a      	bne.n	a77e <f_unlink+0x226>
    a768:	238e      	movs	r3, #142	; 0x8e
    a76a:	009b      	lsls	r3, r3, #2
    a76c:	18fb      	adds	r3, r7, r3
    a76e:	681b      	ldr	r3, [r3, #0]
    a770:	4a08      	ldr	r2, [pc, #32]	; (a794 <f_unlink+0x23c>)
    a772:	18bc      	adds	r4, r7, r2
    a774:	0018      	movs	r0, r3
    a776:	4b0f      	ldr	r3, [pc, #60]	; (a7b4 <f_unlink+0x25c>)
    a778:	4798      	blx	r3
    a77a:	0003      	movs	r3, r0
    a77c:	7023      	strb	r3, [r4, #0]
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
    a77e:	4b05      	ldr	r3, [pc, #20]	; (a794 <f_unlink+0x23c>)
    a780:	18fb      	adds	r3, r7, r3
    a782:	781b      	ldrb	r3, [r3, #0]
}
    a784:	0018      	movs	r0, r3
    a786:	46bd      	mov	sp, r7
    a788:	239b      	movs	r3, #155	; 0x9b
    a78a:	009b      	lsls	r3, r3, #2
    a78c:	449d      	add	sp, r3
    a78e:	bd90      	pop	{r4, r7, pc}
    a790:	fffffd94 	.word	0xfffffd94
    a794:	00000267 	.word	0x00000267
    a798:	000091d9 	.word	0x000091d9
    a79c:	00008fcd 	.word	0x00008fcd
    a7a0:	000072f5 	.word	0x000072f5
    a7a4:	00007c1d 	.word	0x00007c1d
    a7a8:	00008581 	.word	0x00008581
    a7ac:	00008aad 	.word	0x00008aad
    a7b0:	00007a19 	.word	0x00007a19
    a7b4:	000074a1 	.word	0x000074a1

0000a7b8 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    a7b8:	b590      	push	{r4, r7, lr}
    a7ba:	b087      	sub	sp, #28
    a7bc:	af00      	add	r7, sp, #0
    a7be:	0002      	movs	r2, r0
    a7c0:	6039      	str	r1, [r7, #0]
    a7c2:	1dfb      	adds	r3, r7, #7
    a7c4:	701a      	strb	r2, [r3, #0]
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    a7c6:	230c      	movs	r3, #12
    a7c8:	18fb      	adds	r3, r7, r3
    a7ca:	1dfa      	adds	r2, r7, #7
    a7cc:	7812      	ldrb	r2, [r2, #0]
    a7ce:	701a      	strb	r2, [r3, #0]
	btw = 1;
    a7d0:	2301      	movs	r3, #1
    a7d2:	617b      	str	r3, [r7, #20]
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    a7d4:	2310      	movs	r3, #16
    a7d6:	18fb      	adds	r3, r7, r3
    a7d8:	697a      	ldr	r2, [r7, #20]
    a7da:	210c      	movs	r1, #12
    a7dc:	1879      	adds	r1, r7, r1
    a7de:	6838      	ldr	r0, [r7, #0]
    a7e0:	4c06      	ldr	r4, [pc, #24]	; (a7fc <f_putc+0x44>)
    a7e2:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    a7e4:	693a      	ldr	r2, [r7, #16]
    a7e6:	697b      	ldr	r3, [r7, #20]
    a7e8:	429a      	cmp	r2, r3
    a7ea:	d101      	bne.n	a7f0 <f_putc+0x38>
    a7ec:	2301      	movs	r3, #1
    a7ee:	e001      	b.n	a7f4 <f_putc+0x3c>
    a7f0:	2301      	movs	r3, #1
    a7f2:	425b      	negs	r3, r3
}
    a7f4:	0018      	movs	r0, r3
    a7f6:	46bd      	mov	sp, r7
    a7f8:	b007      	add	sp, #28
    a7fa:	bd90      	pop	{r4, r7, pc}
    a7fc:	0000a04d 	.word	0x0000a04d

0000a800 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    a800:	b580      	push	{r7, lr}
    a802:	b084      	sub	sp, #16
    a804:	af00      	add	r7, sp, #0
    a806:	6078      	str	r0, [r7, #4]
    a808:	6039      	str	r1, [r7, #0]
	int n;


	for (n = 0; *str; str++, n++) {
    a80a:	2300      	movs	r3, #0
    a80c:	60fb      	str	r3, [r7, #12]
    a80e:	e012      	b.n	a836 <f_puts+0x36>
		if (f_putc(*str, fil) == EOF) return EOF;
    a810:	687b      	ldr	r3, [r7, #4]
    a812:	781b      	ldrb	r3, [r3, #0]
    a814:	683a      	ldr	r2, [r7, #0]
    a816:	0011      	movs	r1, r2
    a818:	0018      	movs	r0, r3
    a81a:	4b0b      	ldr	r3, [pc, #44]	; (a848 <f_puts+0x48>)
    a81c:	4798      	blx	r3
    a81e:	0003      	movs	r3, r0
    a820:	3301      	adds	r3, #1
    a822:	d102      	bne.n	a82a <f_puts+0x2a>
    a824:	2301      	movs	r3, #1
    a826:	425b      	negs	r3, r3
    a828:	e00a      	b.n	a840 <f_puts+0x40>
	for (n = 0; *str; str++, n++) {
    a82a:	687b      	ldr	r3, [r7, #4]
    a82c:	3301      	adds	r3, #1
    a82e:	607b      	str	r3, [r7, #4]
    a830:	68fb      	ldr	r3, [r7, #12]
    a832:	3301      	adds	r3, #1
    a834:	60fb      	str	r3, [r7, #12]
    a836:	687b      	ldr	r3, [r7, #4]
    a838:	781b      	ldrb	r3, [r3, #0]
    a83a:	2b00      	cmp	r3, #0
    a83c:	d1e8      	bne.n	a810 <f_puts+0x10>
	}
	return n;
    a83e:	68fb      	ldr	r3, [r7, #12]
}
    a840:	0018      	movs	r0, r3
    a842:	46bd      	mov	sp, r7
    a844:	b004      	add	sp, #16
    a846:	bd80      	pop	{r7, pc}
    a848:	0000a7b9 	.word	0x0000a7b9

0000a84c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    a84c:	b580      	push	{r7, lr}
    a84e:	b084      	sub	sp, #16
    a850:	af00      	add	r7, sp, #0
    a852:	0002      	movs	r2, r0
    a854:	6039      	str	r1, [r7, #0]
    a856:	1dbb      	adds	r3, r7, #6
    a858:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
    a85a:	1dbb      	adds	r3, r7, #6
    a85c:	881b      	ldrh	r3, [r3, #0]
    a85e:	2b7f      	cmp	r3, #127	; 0x7f
    a860:	d805      	bhi.n	a86e <ff_convert+0x22>
		c = src;
    a862:	230e      	movs	r3, #14
    a864:	18fb      	adds	r3, r7, r3
    a866:	1dba      	adds	r2, r7, #6
    a868:	8812      	ldrh	r2, [r2, #0]
    a86a:	801a      	strh	r2, [r3, #0]
    a86c:	e03a      	b.n	a8e4 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    a86e:	683b      	ldr	r3, [r7, #0]
    a870:	2b00      	cmp	r3, #0
    a872:	d010      	beq.n	a896 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    a874:	1dbb      	adds	r3, r7, #6
    a876:	881b      	ldrh	r3, [r3, #0]
    a878:	2bff      	cmp	r3, #255	; 0xff
    a87a:	d807      	bhi.n	a88c <ff_convert+0x40>
    a87c:	1dbb      	adds	r3, r7, #6
    a87e:	881b      	ldrh	r3, [r3, #0]
    a880:	3b80      	subs	r3, #128	; 0x80
    a882:	001a      	movs	r2, r3
    a884:	4b1b      	ldr	r3, [pc, #108]	; (a8f4 <ff_convert+0xa8>)
    a886:	0052      	lsls	r2, r2, #1
    a888:	5ad2      	ldrh	r2, [r2, r3]
    a88a:	e000      	b.n	a88e <ff_convert+0x42>
    a88c:	2200      	movs	r2, #0
    a88e:	230e      	movs	r3, #14
    a890:	18fb      	adds	r3, r7, r3
    a892:	801a      	strh	r2, [r3, #0]
    a894:	e026      	b.n	a8e4 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    a896:	230e      	movs	r3, #14
    a898:	18fb      	adds	r3, r7, r3
    a89a:	2200      	movs	r2, #0
    a89c:	801a      	strh	r2, [r3, #0]
    a89e:	e010      	b.n	a8c2 <ff_convert+0x76>
				if (src == Tbl[c]) break;
    a8a0:	230e      	movs	r3, #14
    a8a2:	18fb      	adds	r3, r7, r3
    a8a4:	881a      	ldrh	r2, [r3, #0]
    a8a6:	4b13      	ldr	r3, [pc, #76]	; (a8f4 <ff_convert+0xa8>)
    a8a8:	0052      	lsls	r2, r2, #1
    a8aa:	5ad3      	ldrh	r3, [r2, r3]
    a8ac:	1dba      	adds	r2, r7, #6
    a8ae:	8812      	ldrh	r2, [r2, #0]
    a8b0:	429a      	cmp	r2, r3
    a8b2:	d00c      	beq.n	a8ce <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
    a8b4:	230e      	movs	r3, #14
    a8b6:	18fb      	adds	r3, r7, r3
    a8b8:	881a      	ldrh	r2, [r3, #0]
    a8ba:	230e      	movs	r3, #14
    a8bc:	18fb      	adds	r3, r7, r3
    a8be:	3201      	adds	r2, #1
    a8c0:	801a      	strh	r2, [r3, #0]
    a8c2:	230e      	movs	r3, #14
    a8c4:	18fb      	adds	r3, r7, r3
    a8c6:	881b      	ldrh	r3, [r3, #0]
    a8c8:	2b7f      	cmp	r3, #127	; 0x7f
    a8ca:	d9e9      	bls.n	a8a0 <ff_convert+0x54>
    a8cc:	e000      	b.n	a8d0 <ff_convert+0x84>
				if (src == Tbl[c]) break;
    a8ce:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
    a8d0:	230e      	movs	r3, #14
    a8d2:	18fb      	adds	r3, r7, r3
    a8d4:	881b      	ldrh	r3, [r3, #0]
    a8d6:	3380      	adds	r3, #128	; 0x80
    a8d8:	b29a      	uxth	r2, r3
    a8da:	230e      	movs	r3, #14
    a8dc:	18fb      	adds	r3, r7, r3
    a8de:	21ff      	movs	r1, #255	; 0xff
    a8e0:	400a      	ands	r2, r1
    a8e2:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
    a8e4:	230e      	movs	r3, #14
    a8e6:	18fb      	adds	r3, r7, r3
    a8e8:	881b      	ldrh	r3, [r3, #0]
}
    a8ea:	0018      	movs	r0, r3
    a8ec:	46bd      	mov	sp, r7
    a8ee:	b004      	add	sp, #16
    a8f0:	bd80      	pop	{r7, pc}
    a8f2:	46c0      	nop			; (mov r8, r8)
    a8f4:	0000c094 	.word	0x0000c094

0000a8f8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
    a8f8:	b580      	push	{r7, lr}
    a8fa:	b084      	sub	sp, #16
    a8fc:	af00      	add	r7, sp, #0
    a8fe:	0002      	movs	r2, r0
    a900:	1dbb      	adds	r3, r7, #6
    a902:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    a904:	2300      	movs	r3, #0
    a906:	60fb      	str	r3, [r7, #12]
    a908:	e002      	b.n	a910 <ff_wtoupper+0x18>
    a90a:	68fb      	ldr	r3, [r7, #12]
    a90c:	3301      	adds	r3, #1
    a90e:	60fb      	str	r3, [r7, #12]
    a910:	4b0f      	ldr	r3, [pc, #60]	; (a950 <ff_wtoupper+0x58>)
    a912:	68fa      	ldr	r2, [r7, #12]
    a914:	0052      	lsls	r2, r2, #1
    a916:	5ad3      	ldrh	r3, [r2, r3]
    a918:	2b00      	cmp	r3, #0
    a91a:	d007      	beq.n	a92c <ff_wtoupper+0x34>
    a91c:	4b0c      	ldr	r3, [pc, #48]	; (a950 <ff_wtoupper+0x58>)
    a91e:	68fa      	ldr	r2, [r7, #12]
    a920:	0052      	lsls	r2, r2, #1
    a922:	5ad3      	ldrh	r3, [r2, r3]
    a924:	1dba      	adds	r2, r7, #6
    a926:	8812      	ldrh	r2, [r2, #0]
    a928:	429a      	cmp	r2, r3
    a92a:	d1ee      	bne.n	a90a <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    a92c:	4b08      	ldr	r3, [pc, #32]	; (a950 <ff_wtoupper+0x58>)
    a92e:	68fa      	ldr	r2, [r7, #12]
    a930:	0052      	lsls	r2, r2, #1
    a932:	5ad3      	ldrh	r3, [r2, r3]
    a934:	2b00      	cmp	r3, #0
    a936:	d004      	beq.n	a942 <ff_wtoupper+0x4a>
    a938:	4b06      	ldr	r3, [pc, #24]	; (a954 <ff_wtoupper+0x5c>)
    a93a:	68fa      	ldr	r2, [r7, #12]
    a93c:	0052      	lsls	r2, r2, #1
    a93e:	5ad3      	ldrh	r3, [r2, r3]
    a940:	e001      	b.n	a946 <ff_wtoupper+0x4e>
    a942:	1dbb      	adds	r3, r7, #6
    a944:	881b      	ldrh	r3, [r3, #0]
}
    a946:	0018      	movs	r0, r3
    a948:	46bd      	mov	sp, r7
    a94a:	b004      	add	sp, #16
    a94c:	bd80      	pop	{r7, pc}
    a94e:	46c0      	nop			; (mov r8, r8)
    a950:	0000c194 	.word	0x0000c194
    a954:	0000c374 	.word	0x0000c374

0000a958 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    a958:	b580      	push	{r7, lr}
    a95a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    a95c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    a960:	4b02      	ldr	r3, [pc, #8]	; (a96c <NVIC_SystemReset+0x14>)
    a962:	4a03      	ldr	r2, [pc, #12]	; (a970 <NVIC_SystemReset+0x18>)
    a964:	60da      	str	r2, [r3, #12]
    a966:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    a96a:	e7fe      	b.n	a96a <NVIC_SystemReset+0x12>
    a96c:	e000ed00 	.word	0xe000ed00
    a970:	05fa0004 	.word	0x05fa0004

0000a974 <system_apb_clock_set_mask>:
{
    a974:	b580      	push	{r7, lr}
    a976:	b082      	sub	sp, #8
    a978:	af00      	add	r7, sp, #0
    a97a:	0002      	movs	r2, r0
    a97c:	6039      	str	r1, [r7, #0]
    a97e:	1dfb      	adds	r3, r7, #7
    a980:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a982:	1dfb      	adds	r3, r7, #7
    a984:	781b      	ldrb	r3, [r3, #0]
    a986:	2b01      	cmp	r3, #1
    a988:	d00a      	beq.n	a9a0 <system_apb_clock_set_mask+0x2c>
    a98a:	2b02      	cmp	r3, #2
    a98c:	d00f      	beq.n	a9ae <system_apb_clock_set_mask+0x3a>
    a98e:	2b00      	cmp	r3, #0
    a990:	d114      	bne.n	a9bc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    a992:	4b0e      	ldr	r3, [pc, #56]	; (a9cc <system_apb_clock_set_mask+0x58>)
    a994:	4a0d      	ldr	r2, [pc, #52]	; (a9cc <system_apb_clock_set_mask+0x58>)
    a996:	6991      	ldr	r1, [r2, #24]
    a998:	683a      	ldr	r2, [r7, #0]
    a99a:	430a      	orrs	r2, r1
    a99c:	619a      	str	r2, [r3, #24]
			break;
    a99e:	e00f      	b.n	a9c0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    a9a0:	4b0a      	ldr	r3, [pc, #40]	; (a9cc <system_apb_clock_set_mask+0x58>)
    a9a2:	4a0a      	ldr	r2, [pc, #40]	; (a9cc <system_apb_clock_set_mask+0x58>)
    a9a4:	69d1      	ldr	r1, [r2, #28]
    a9a6:	683a      	ldr	r2, [r7, #0]
    a9a8:	430a      	orrs	r2, r1
    a9aa:	61da      	str	r2, [r3, #28]
			break;
    a9ac:	e008      	b.n	a9c0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    a9ae:	4b07      	ldr	r3, [pc, #28]	; (a9cc <system_apb_clock_set_mask+0x58>)
    a9b0:	4a06      	ldr	r2, [pc, #24]	; (a9cc <system_apb_clock_set_mask+0x58>)
    a9b2:	6a11      	ldr	r1, [r2, #32]
    a9b4:	683a      	ldr	r2, [r7, #0]
    a9b6:	430a      	orrs	r2, r1
    a9b8:	621a      	str	r2, [r3, #32]
			break;
    a9ba:	e001      	b.n	a9c0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    a9bc:	2317      	movs	r3, #23
    a9be:	e000      	b.n	a9c2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    a9c0:	2300      	movs	r3, #0
}
    a9c2:	0018      	movs	r0, r3
    a9c4:	46bd      	mov	sp, r7
    a9c6:	b002      	add	sp, #8
    a9c8:	bd80      	pop	{r7, pc}
    a9ca:	46c0      	nop			; (mov r8, r8)
    a9cc:	40000400 	.word	0x40000400

0000a9d0 <nvm_get_config_defaults>:
{
    a9d0:	b580      	push	{r7, lr}
    a9d2:	b082      	sub	sp, #8
    a9d4:	af00      	add	r7, sp, #0
    a9d6:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    a9d8:	687b      	ldr	r3, [r7, #4]
    a9da:	2200      	movs	r2, #0
    a9dc:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    a9de:	687b      	ldr	r3, [r7, #4]
    a9e0:	2201      	movs	r2, #1
    a9e2:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    a9e4:	4b08      	ldr	r3, [pc, #32]	; (aa08 <nvm_get_config_defaults+0x38>)
    a9e6:	685b      	ldr	r3, [r3, #4]
    a9e8:	06db      	lsls	r3, r3, #27
    a9ea:	0f1b      	lsrs	r3, r3, #28
    a9ec:	b2db      	uxtb	r3, r3
    a9ee:	001a      	movs	r2, r3
    a9f0:	687b      	ldr	r3, [r7, #4]
    a9f2:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    a9f4:	687b      	ldr	r3, [r7, #4]
    a9f6:	2200      	movs	r2, #0
    a9f8:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    a9fa:	687b      	ldr	r3, [r7, #4]
    a9fc:	2200      	movs	r2, #0
    a9fe:	711a      	strb	r2, [r3, #4]
}
    aa00:	46c0      	nop			; (mov r8, r8)
    aa02:	46bd      	mov	sp, r7
    aa04:	b002      	add	sp, #8
    aa06:	bd80      	pop	{r7, pc}
    aa08:	41004000 	.word	0x41004000

0000aa0c <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    aa0c:	b580      	push	{r7, lr}
    aa0e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    aa10:	4b02      	ldr	r3, [pc, #8]	; (aa1c <system_reset+0x10>)
    aa12:	4798      	blx	r3
}
    aa14:	46c0      	nop			; (mov r8, r8)
    aa16:	46bd      	mov	sp, r7
    aa18:	bd80      	pop	{r7, pc}
    aa1a:	46c0      	nop			; (mov r8, r8)
    aa1c:	0000a959 	.word	0x0000a959

0000aa20 <system_interrupt_enable_global>:
{
    aa20:	b580      	push	{r7, lr}
    aa22:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    aa24:	4b04      	ldr	r3, [pc, #16]	; (aa38 <system_interrupt_enable_global+0x18>)
    aa26:	2201      	movs	r2, #1
    aa28:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    aa2a:	f3bf 8f5f 	dmb	sy
    aa2e:	b662      	cpsie	i
}
    aa30:	46c0      	nop			; (mov r8, r8)
    aa32:	46bd      	mov	sp, r7
    aa34:	bd80      	pop	{r7, pc}
    aa36:	46c0      	nop			; (mov r8, r8)
    aa38:	20000009 	.word	0x20000009

0000aa3c <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    aa3c:	b580      	push	{r7, lr}
    aa3e:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    aa40:	2102      	movs	r1, #2
    aa42:	2001      	movs	r0, #1
    aa44:	4b02      	ldr	r3, [pc, #8]	; (aa50 <dsu_crc32_init+0x14>)
    aa46:	4798      	blx	r3
#endif

}
    aa48:	46c0      	nop			; (mov r8, r8)
    aa4a:	46bd      	mov	sp, r7
    aa4c:	bd80      	pop	{r7, pc}
    aa4e:	46c0      	nop			; (mov r8, r8)
    aa50:	0000a975 	.word	0x0000a975

0000aa54 <main>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/

int main(void) {
    aa54:	b5b0      	push	{r4, r5, r7, lr}
    aa56:	b0b0      	sub	sp, #192	; 0xc0
    aa58:	af00      	add	r7, sp, #0

    /*1.) INIT SYSTEM PERIPHERALS INITIALIZATION*/
    system_init();
    aa5a:	4bd2      	ldr	r3, [pc, #840]	; (ada4 <main+0x350>)
    aa5c:	4798      	blx	r3
    delay_init();
    aa5e:	4bd2      	ldr	r3, [pc, #840]	; (ada8 <main+0x354>)
    aa60:	4798      	blx	r3
    InitializeSerialConsole();
    aa62:	4bd2      	ldr	r3, [pc, #840]	; (adac <main+0x358>)
    aa64:	4798      	blx	r3
    system_interrupt_enable_global();
    aa66:	4bd2      	ldr	r3, [pc, #840]	; (adb0 <main+0x35c>)
    aa68:	4798      	blx	r3

    /* Initialize SD MMC stack */
    sd_mmc_init();
    aa6a:	4bd2      	ldr	r3, [pc, #840]	; (adb4 <main+0x360>)
    aa6c:	4798      	blx	r3

    // Initialize the NVM driver
    configure_nvm();
    aa6e:	4bd2      	ldr	r3, [pc, #840]	; (adb8 <main+0x364>)
    aa70:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
    aa72:	4bd2      	ldr	r3, [pc, #840]	; (adbc <main+0x368>)
    aa74:	2201      	movs	r2, #1
    aa76:	701a      	strb	r2, [r3, #0]
    aa78:	f3bf 8f5f 	dmb	sy
    aa7c:	b662      	cpsie	i

    // Configure CRC32
    dsu_crc32_init();
    aa7e:	4bd0      	ldr	r3, [pc, #832]	; (adc0 <main+0x36c>)
    aa80:	4798      	blx	r3

    SerialConsoleWriteString("ESE5160 - ENTER BOOTLOADER");   // Order to add string to TX Buffer
    aa82:	4bd0      	ldr	r3, [pc, #832]	; (adc4 <main+0x370>)
    aa84:	0018      	movs	r0, r3
    aa86:	4bd0      	ldr	r3, [pc, #832]	; (adc8 <main+0x374>)
    aa88:	4798      	blx	r3

    /*2.) STARTS SIMPLE SD CARD MOUNTING AND TEST!*/

    // EXAMPLE CODE ON MOUNTING THE SD CARD AND WRITING TO A FILE
    // See function inside to see how to open a file
    SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    aa8a:	4bd0      	ldr	r3, [pc, #832]	; (adcc <main+0x378>)
    aa8c:	0018      	movs	r0, r3
    aa8e:	4bce      	ldr	r3, [pc, #824]	; (adc8 <main+0x374>)
    aa90:	4798      	blx	r3

    if (StartFilesystemAndTest() == false) {
    aa92:	4bcf      	ldr	r3, [pc, #828]	; (add0 <main+0x37c>)
    aa94:	4798      	blx	r3
    aa96:	0003      	movs	r3, r0
    aa98:	001a      	movs	r2, r3
    aa9a:	2301      	movs	r3, #1
    aa9c:	4053      	eors	r3, r2
    aa9e:	b2db      	uxtb	r3, r3
    aaa0:	2b00      	cmp	r3, #0
    aaa2:	d00a      	beq.n	aaba <main+0x66>
        SerialConsoleWriteString("SD CARD failed! Check your connections. System will restart in 5 seconds...");
    aaa4:	4bcb      	ldr	r3, [pc, #812]	; (add4 <main+0x380>)
    aaa6:	0018      	movs	r0, r3
    aaa8:	4bc7      	ldr	r3, [pc, #796]	; (adc8 <main+0x374>)
    aaaa:	4798      	blx	r3
        delay_cycles_ms(5000);
    aaac:	4bca      	ldr	r3, [pc, #808]	; (add8 <main+0x384>)
    aaae:	0018      	movs	r0, r3
    aab0:	4bca      	ldr	r3, [pc, #808]	; (addc <main+0x388>)
    aab2:	4798      	blx	r3
        system_reset();
    aab4:	4bca      	ldr	r3, [pc, #808]	; (ade0 <main+0x38c>)
    aab6:	4798      	blx	r3
    aab8:	e003      	b.n	aac2 <main+0x6e>
    } else {
        SerialConsoleWriteString("SD CARD mount success! Filesystem also mounted. \r\n");
    aaba:	4bca      	ldr	r3, [pc, #808]	; (ade4 <main+0x390>)
    aabc:	0018      	movs	r0, r3
    aabe:	4bc2      	ldr	r3, [pc, #776]	; (adc8 <main+0x374>)
    aac0:	4798      	blx	r3
    /*3.) STARTS BOOTLOADER HERE!*/
	
	int flashEraseStatus;	// Status variable
	
	//Constant strings with the names of files
	char flagA[10] = "FlagA.txt";
    aac2:	2384      	movs	r3, #132	; 0x84
    aac4:	18fb      	adds	r3, r7, r3
    aac6:	4ac8      	ldr	r2, [pc, #800]	; (ade8 <main+0x394>)
    aac8:	ca03      	ldmia	r2!, {r0, r1}
    aaca:	c303      	stmia	r3!, {r0, r1}
    aacc:	8812      	ldrh	r2, [r2, #0]
    aace:	801a      	strh	r2, [r3, #0]
	char flagB[10] = "FlagB.txt";
    aad0:	2378      	movs	r3, #120	; 0x78
    aad2:	18fb      	adds	r3, r7, r3
    aad4:	4ac5      	ldr	r2, [pc, #788]	; (adec <main+0x398>)
    aad6:	ca03      	ldmia	r2!, {r0, r1}
    aad8:	c303      	stmia	r3!, {r0, r1}
    aada:	8812      	ldrh	r2, [r2, #0]
    aadc:	801a      	strh	r2, [r3, #0]
	char testA[10] = "TestA.bin";
    aade:	236c      	movs	r3, #108	; 0x6c
    aae0:	18fb      	adds	r3, r7, r3
    aae2:	4ac3      	ldr	r2, [pc, #780]	; (adf0 <main+0x39c>)
    aae4:	ca03      	ldmia	r2!, {r0, r1}
    aae6:	c303      	stmia	r3!, {r0, r1}
    aae8:	8812      	ldrh	r2, [r2, #0]
    aaea:	801a      	strh	r2, [r3, #0]
	char testB[10] = "TestB.bin";
    aaec:	2360      	movs	r3, #96	; 0x60
    aaee:	18fb      	adds	r3, r7, r3
    aaf0:	4ac0      	ldr	r2, [pc, #768]	; (adf4 <main+0x3a0>)
    aaf2:	ca03      	ldmia	r2!, {r0, r1}
    aaf4:	c303      	stmia	r3!, {r0, r1}
    aaf6:	8812      	ldrh	r2, [r2, #0]
    aaf8:	801a      	strh	r2, [r3, #0]
	
	// Check which flag file (FlagA.txt or FlagB.txt) is present in the SD card
	// Set a variable called firmwareFlag appropriately
	int firmwareFlag = 0;
    aafa:	2300      	movs	r3, #0
    aafc:	22b8      	movs	r2, #184	; 0xb8
    aafe:	18ba      	adds	r2, r7, r2
    ab00:	6013      	str	r3, [r2, #0]
	FRESULT fileFlagStatus;
	fileFlagStatus = f_open(&file_object, flagA, FA_OPEN_EXISTING);
    ab02:	23a3      	movs	r3, #163	; 0xa3
    ab04:	18fc      	adds	r4, r7, r3
    ab06:	2384      	movs	r3, #132	; 0x84
    ab08:	18f9      	adds	r1, r7, r3
    ab0a:	4bbb      	ldr	r3, [pc, #748]	; (adf8 <main+0x3a4>)
    ab0c:	2200      	movs	r2, #0
    ab0e:	0018      	movs	r0, r3
    ab10:	4bba      	ldr	r3, [pc, #744]	; (adfc <main+0x3a8>)
    ab12:	4798      	blx	r3
    ab14:	0003      	movs	r3, r0
    ab16:	7023      	strb	r3, [r4, #0]
	if(fileFlagStatus == FR_OK && firmwareFlag == 0)
    ab18:	23a3      	movs	r3, #163	; 0xa3
    ab1a:	18fb      	adds	r3, r7, r3
    ab1c:	781b      	ldrb	r3, [r3, #0]
    ab1e:	2b00      	cmp	r3, #0
    ab20:	d10c      	bne.n	ab3c <main+0xe8>
    ab22:	23b8      	movs	r3, #184	; 0xb8
    ab24:	18fb      	adds	r3, r7, r3
    ab26:	681b      	ldr	r3, [r3, #0]
    ab28:	2b00      	cmp	r3, #0
    ab2a:	d107      	bne.n	ab3c <main+0xe8>
	{
		firmwareFlag = 1;
    ab2c:	2301      	movs	r3, #1
    ab2e:	22b8      	movs	r2, #184	; 0xb8
    ab30:	18ba      	adds	r2, r7, r2
    ab32:	6013      	str	r3, [r2, #0]
		SerialConsoleWriteString("FlagA.txt found. Flashing firmware TestA.bin\r\n");
    ab34:	4bb2      	ldr	r3, [pc, #712]	; (ae00 <main+0x3ac>)
    ab36:	0018      	movs	r0, r3
    ab38:	4ba3      	ldr	r3, [pc, #652]	; (adc8 <main+0x374>)
    ab3a:	4798      	blx	r3
		
	}
	
	fileFlagStatus = f_open(&file_object, flagB, FA_OPEN_EXISTING);
    ab3c:	23a3      	movs	r3, #163	; 0xa3
    ab3e:	18fc      	adds	r4, r7, r3
    ab40:	2378      	movs	r3, #120	; 0x78
    ab42:	18f9      	adds	r1, r7, r3
    ab44:	4bac      	ldr	r3, [pc, #688]	; (adf8 <main+0x3a4>)
    ab46:	2200      	movs	r2, #0
    ab48:	0018      	movs	r0, r3
    ab4a:	4bac      	ldr	r3, [pc, #688]	; (adfc <main+0x3a8>)
    ab4c:	4798      	blx	r3
    ab4e:	0003      	movs	r3, r0
    ab50:	7023      	strb	r3, [r4, #0]
	if(fileFlagStatus == FR_OK && firmwareFlag == 0)
    ab52:	23a3      	movs	r3, #163	; 0xa3
    ab54:	18fb      	adds	r3, r7, r3
    ab56:	781b      	ldrb	r3, [r3, #0]
    ab58:	2b00      	cmp	r3, #0
    ab5a:	d10c      	bne.n	ab76 <main+0x122>
    ab5c:	23b8      	movs	r3, #184	; 0xb8
    ab5e:	18fb      	adds	r3, r7, r3
    ab60:	681b      	ldr	r3, [r3, #0]
    ab62:	2b00      	cmp	r3, #0
    ab64:	d107      	bne.n	ab76 <main+0x122>
	{
		firmwareFlag = 2;
    ab66:	2302      	movs	r3, #2
    ab68:	22b8      	movs	r2, #184	; 0xb8
    ab6a:	18ba      	adds	r2, r7, r2
    ab6c:	6013      	str	r3, [r2, #0]
		SerialConsoleWriteString("FlagB.txt found. Flashing firmware TestB.bin\r\n");
    ab6e:	4ba5      	ldr	r3, [pc, #660]	; (ae04 <main+0x3b0>)
    ab70:	0018      	movs	r0, r3
    ab72:	4b95      	ldr	r3, [pc, #596]	; (adc8 <main+0x374>)
    ab74:	4798      	blx	r3
	}
	f_close(&file_object);
    ab76:	4ba0      	ldr	r3, [pc, #640]	; (adf8 <main+0x3a4>)
    ab78:	0018      	movs	r0, r3
    ab7a:	4ba3      	ldr	r3, [pc, #652]	; (ae08 <main+0x3b4>)
    ab7c:	4798      	blx	r3
	
	if(firmwareFlag != 0)
    ab7e:	23b8      	movs	r3, #184	; 0xb8
    ab80:	18fb      	adds	r3, r7, r3
    ab82:	681b      	ldr	r3, [r3, #0]
    ab84:	2b00      	cmp	r3, #0
    ab86:	d100      	bne.n	ab8a <main+0x136>
    ab88:	e172      	b.n	ae70 <main+0x41c>
	{
		// Erase the flash and check if it has been erased.
		// Runs in a do-while loop until all flash has been erased successfully
		do 
		{
			for(int i=0; i<128; i++)
    ab8a:	2300      	movs	r3, #0
    ab8c:	22b4      	movs	r2, #180	; 0xb4
    ab8e:	18ba      	adds	r2, r7, r2
    ab90:	6013      	str	r3, [r2, #0]
    ab92:	e027      	b.n	abe4 <main+0x190>
			{
				int status = nvm_erase_row(APP_START_ADDRESS + i*256);
    ab94:	23b4      	movs	r3, #180	; 0xb4
    ab96:	18fb      	adds	r3, r7, r3
    ab98:	681b      	ldr	r3, [r3, #0]
    ab9a:	021b      	lsls	r3, r3, #8
    ab9c:	2290      	movs	r2, #144	; 0x90
    ab9e:	0252      	lsls	r2, r2, #9
    aba0:	4694      	mov	ip, r2
    aba2:	4463      	add	r3, ip
    aba4:	0018      	movs	r0, r3
    aba6:	4b99      	ldr	r3, [pc, #612]	; (ae0c <main+0x3b8>)
    aba8:	4798      	blx	r3
    abaa:	0003      	movs	r3, r0
    abac:	229c      	movs	r2, #156	; 0x9c
    abae:	18ba      	adds	r2, r7, r2
    abb0:	6013      	str	r3, [r2, #0]
				if(status != STATUS_OK)
    abb2:	239c      	movs	r3, #156	; 0x9c
    abb4:	18fb      	adds	r3, r7, r3
    abb6:	681b      	ldr	r3, [r3, #0]
    abb8:	2b00      	cmp	r3, #0
    abba:	d008      	beq.n	abce <main+0x17a>
				{
					SerialConsoleWriteString("Erase error\r\n");
    abbc:	4b94      	ldr	r3, [pc, #592]	; (ae10 <main+0x3bc>)
    abbe:	0018      	movs	r0, r3
    abc0:	4b81      	ldr	r3, [pc, #516]	; (adc8 <main+0x374>)
    abc2:	4798      	blx	r3
					flashEraseStatus = STATUS_ERR_BAD_DATA;
    abc4:	2313      	movs	r3, #19
    abc6:	22bc      	movs	r2, #188	; 0xbc
    abc8:	18ba      	adds	r2, r7, r2
    abca:	6013      	str	r3, [r2, #0]
    abcc:	e003      	b.n	abd6 <main+0x182>
				}
				else
				{
					flashEraseStatus = STATUS_OK;
    abce:	2300      	movs	r3, #0
    abd0:	22bc      	movs	r2, #188	; 0xbc
    abd2:	18ba      	adds	r2, r7, r2
    abd4:	6013      	str	r3, [r2, #0]
			for(int i=0; i<128; i++)
    abd6:	23b4      	movs	r3, #180	; 0xb4
    abd8:	18fb      	adds	r3, r7, r3
    abda:	681b      	ldr	r3, [r3, #0]
    abdc:	3301      	adds	r3, #1
    abde:	22b4      	movs	r2, #180	; 0xb4
    abe0:	18ba      	adds	r2, r7, r2
    abe2:	6013      	str	r3, [r2, #0]
    abe4:	23b4      	movs	r3, #180	; 0xb4
    abe6:	18fb      	adds	r3, r7, r3
    abe8:	681b      	ldr	r3, [r3, #0]
    abea:	2b7f      	cmp	r3, #127	; 0x7f
    abec:	ddd2      	ble.n	ab94 <main+0x140>
				}
			}
		
			if(status == STATUS_OK){
    abee:	4b89      	ldr	r3, [pc, #548]	; (ae14 <main+0x3c0>)
    abf0:	781b      	ldrb	r3, [r3, #0]
    abf2:	2b00      	cmp	r3, #0
    abf4:	d103      	bne.n	abfe <main+0x1aa>
				SerialConsoleWriteString("Flash erased. Checking..\r\n");
    abf6:	4b88      	ldr	r3, [pc, #544]	; (ae18 <main+0x3c4>)
    abf8:	0018      	movs	r0, r3
    abfa:	4b73      	ldr	r3, [pc, #460]	; (adc8 <main+0x374>)
    abfc:	4798      	blx	r3
			}
		
			if(flashEraseStatus == STATUS_OK)
    abfe:	23bc      	movs	r3, #188	; 0xbc
    ac00:	18fb      	adds	r3, r7, r3
    ac02:	681b      	ldr	r3, [r3, #0]
    ac04:	2b00      	cmp	r3, #0
    ac06:	d129      	bne.n	ac5c <main+0x208>
			{
				for(int i=0; i<128*256; i++)
    ac08:	2300      	movs	r3, #0
    ac0a:	22b0      	movs	r2, #176	; 0xb0
    ac0c:	18ba      	adds	r2, r7, r2
    ac0e:	6013      	str	r3, [r2, #0]
    ac10:	e01e      	b.n	ac50 <main+0x1fc>
				{
					char *flash_char = (char*) (APP_START_ADDRESS+i);
    ac12:	23b0      	movs	r3, #176	; 0xb0
    ac14:	18fb      	adds	r3, r7, r3
    ac16:	681b      	ldr	r3, [r3, #0]
    ac18:	2290      	movs	r2, #144	; 0x90
    ac1a:	0252      	lsls	r2, r2, #9
    ac1c:	4694      	mov	ip, r2
    ac1e:	4463      	add	r3, ip
    ac20:	2298      	movs	r2, #152	; 0x98
    ac22:	18ba      	adds	r2, r7, r2
    ac24:	6013      	str	r3, [r2, #0]
					if(*flash_char != 0xFF)
    ac26:	2398      	movs	r3, #152	; 0x98
    ac28:	18fb      	adds	r3, r7, r3
    ac2a:	681b      	ldr	r3, [r3, #0]
    ac2c:	781b      	ldrb	r3, [r3, #0]
    ac2e:	2bff      	cmp	r3, #255	; 0xff
    ac30:	d007      	beq.n	ac42 <main+0x1ee>
					{
						SerialConsoleWriteString("Flash not erased successfully, rerunning flash\r\n");
    ac32:	4b7a      	ldr	r3, [pc, #488]	; (ae1c <main+0x3c8>)
    ac34:	0018      	movs	r0, r3
    ac36:	4b64      	ldr	r3, [pc, #400]	; (adc8 <main+0x374>)
    ac38:	4798      	blx	r3
						flashEraseStatus = STATUS_ERR;
    ac3a:	2301      	movs	r3, #1
    ac3c:	22bc      	movs	r2, #188	; 0xbc
    ac3e:	18ba      	adds	r2, r7, r2
    ac40:	6013      	str	r3, [r2, #0]
				for(int i=0; i<128*256; i++)
    ac42:	23b0      	movs	r3, #176	; 0xb0
    ac44:	18fb      	adds	r3, r7, r3
    ac46:	681b      	ldr	r3, [r3, #0]
    ac48:	3301      	adds	r3, #1
    ac4a:	22b0      	movs	r2, #176	; 0xb0
    ac4c:	18ba      	adds	r2, r7, r2
    ac4e:	6013      	str	r3, [r2, #0]
    ac50:	23b0      	movs	r3, #176	; 0xb0
    ac52:	18fb      	adds	r3, r7, r3
    ac54:	681b      	ldr	r3, [r3, #0]
    ac56:	4a72      	ldr	r2, [pc, #456]	; (ae20 <main+0x3cc>)
    ac58:	4293      	cmp	r3, r2
    ac5a:	ddda      	ble.n	ac12 <main+0x1be>
					}
				}
			}
		} while (flashEraseStatus != STATUS_OK);
    ac5c:	23bc      	movs	r3, #188	; 0xbc
    ac5e:	18fb      	adds	r3, r7, r3
    ac60:	681b      	ldr	r3, [r3, #0]
    ac62:	2b00      	cmp	r3, #0
    ac64:	d191      	bne.n	ab8a <main+0x136>
	
		SerialConsoleWriteString("Flash erased successfully.\r\n");
    ac66:	4b6f      	ldr	r3, [pc, #444]	; (ae24 <main+0x3d0>)
    ac68:	0018      	movs	r0, r3
    ac6a:	4b57      	ldr	r3, [pc, #348]	; (adc8 <main+0x374>)
    ac6c:	4798      	blx	r3
	
		if(firmwareFlag == 0)
    ac6e:	23b8      	movs	r3, #184	; 0xb8
    ac70:	18fb      	adds	r3, r7, r3
    ac72:	681b      	ldr	r3, [r3, #0]
    ac74:	2b00      	cmp	r3, #0
    ac76:	d103      	bne.n	ac80 <main+0x22c>
		{
			SerialConsoleWriteString("Neither flag found\r\n");
    ac78:	4b6b      	ldr	r3, [pc, #428]	; (ae28 <main+0x3d4>)
    ac7a:	0018      	movs	r0, r3
    ac7c:	4b52      	ldr	r3, [pc, #328]	; (adc8 <main+0x374>)
    ac7e:	4798      	blx	r3
	
		uint8_t readbuffer[64];
		UINT bytesToRead;
		UINT bytesRead;
		DWORD filesize;
		unsigned int pageNumber = 0;
    ac80:	2300      	movs	r3, #0
    ac82:	22a8      	movs	r2, #168	; 0xa8
    ac84:	18ba      	adds	r2, r7, r2
    ac86:	6013      	str	r3, [r2, #0]
		FRESULT fileStatus;
	
		if(firmwareFlag == 1)
    ac88:	23b8      	movs	r3, #184	; 0xb8
    ac8a:	18fb      	adds	r3, r7, r3
    ac8c:	681b      	ldr	r3, [r3, #0]
    ac8e:	2b01      	cmp	r3, #1
    ac90:	d10b      	bne.n	acaa <main+0x256>
		{
			fileStatus = f_open(&file_object, testA, FA_READ);
    ac92:	2397      	movs	r3, #151	; 0x97
    ac94:	18fc      	adds	r4, r7, r3
    ac96:	236c      	movs	r3, #108	; 0x6c
    ac98:	18f9      	adds	r1, r7, r3
    ac9a:	4b57      	ldr	r3, [pc, #348]	; (adf8 <main+0x3a4>)
    ac9c:	2201      	movs	r2, #1
    ac9e:	0018      	movs	r0, r3
    aca0:	4b56      	ldr	r3, [pc, #344]	; (adfc <main+0x3a8>)
    aca2:	4798      	blx	r3
    aca4:	0003      	movs	r3, r0
    aca6:	7023      	strb	r3, [r4, #0]
    aca8:	e00a      	b.n	acc0 <main+0x26c>
		}
		else
		{
			fileStatus = f_open(&file_object, testB, FA_READ);
    acaa:	2397      	movs	r3, #151	; 0x97
    acac:	18fc      	adds	r4, r7, r3
    acae:	2360      	movs	r3, #96	; 0x60
    acb0:	18f9      	adds	r1, r7, r3
    acb2:	4b51      	ldr	r3, [pc, #324]	; (adf8 <main+0x3a4>)
    acb4:	2201      	movs	r2, #1
    acb6:	0018      	movs	r0, r3
    acb8:	4b50      	ldr	r3, [pc, #320]	; (adfc <main+0x3a8>)
    acba:	4798      	blx	r3
    acbc:	0003      	movs	r3, r0
    acbe:	7023      	strb	r3, [r4, #0]
		}
		filesize = f_size(&file_object);
    acc0:	4b4d      	ldr	r3, [pc, #308]	; (adf8 <main+0x3a4>)
    acc2:	68db      	ldr	r3, [r3, #12]
    acc4:	2290      	movs	r2, #144	; 0x90
    acc6:	18ba      	adds	r2, r7, r2
    acc8:	6013      	str	r3, [r2, #0]
		bytesToRead = 64;
    acca:	2340      	movs	r3, #64	; 0x40
    accc:	22ac      	movs	r2, #172	; 0xac
    acce:	18ba      	adds	r2, r7, r2
    acd0:	6013      	str	r3, [r2, #0]
		bytesRead = 0;
    acd2:	2300      	movs	r3, #0
    acd4:	65fb      	str	r3, [r7, #92]	; 0x5c
		UINT totalBytesRead = 0;
    acd6:	2300      	movs	r3, #0
    acd8:	22a4      	movs	r2, #164	; 0xa4
    acda:	18ba      	adds	r2, r7, r2
    acdc:	6013      	str	r3, [r2, #0]
	
		char consoleBuf[25];
	
		// While there are still bytes to be read, read from file and write to NVM
		while(totalBytesRead < filesize)
    acde:	e049      	b.n	ad74 <main+0x320>
		{
			FRESULT res = f_read(&file_object, readbuffer, bytesToRead, &bytesRead);
    ace0:	238f      	movs	r3, #143	; 0x8f
    ace2:	18fc      	adds	r4, r7, r3
    ace4:	235c      	movs	r3, #92	; 0x5c
    ace6:	18fb      	adds	r3, r7, r3
    ace8:	22ac      	movs	r2, #172	; 0xac
    acea:	18ba      	adds	r2, r7, r2
    acec:	6812      	ldr	r2, [r2, #0]
    acee:	0039      	movs	r1, r7
    acf0:	4841      	ldr	r0, [pc, #260]	; (adf8 <main+0x3a4>)
    acf2:	4d4e      	ldr	r5, [pc, #312]	; (ae2c <main+0x3d8>)
    acf4:	47a8      	blx	r5
    acf6:	0003      	movs	r3, r0
    acf8:	7023      	strb	r3, [r4, #0]
			if(res != FR_OK)
    acfa:	238f      	movs	r3, #143	; 0x8f
    acfc:	18fb      	adds	r3, r7, r3
    acfe:	781b      	ldrb	r3, [r3, #0]
    ad00:	2b00      	cmp	r3, #0
    ad02:	d004      	beq.n	ad0e <main+0x2ba>
			{
				SerialConsoleWriteString("Error in reading file\r\n");
    ad04:	4b4a      	ldr	r3, [pc, #296]	; (ae30 <main+0x3dc>)
    ad06:	0018      	movs	r0, r3
    ad08:	4b2f      	ldr	r3, [pc, #188]	; (adc8 <main+0x374>)
    ad0a:	4798      	blx	r3
				break;
    ad0c:	e03a      	b.n	ad84 <main+0x330>
			}
			nvm_write_buffer(APP_START_ADDRESS+(pageNumber*64), readbuffer, 64);
    ad0e:	23a8      	movs	r3, #168	; 0xa8
    ad10:	18fb      	adds	r3, r7, r3
    ad12:	681b      	ldr	r3, [r3, #0]
    ad14:	2290      	movs	r2, #144	; 0x90
    ad16:	00d2      	lsls	r2, r2, #3
    ad18:	4694      	mov	ip, r2
    ad1a:	4463      	add	r3, ip
    ad1c:	019b      	lsls	r3, r3, #6
    ad1e:	0039      	movs	r1, r7
    ad20:	2240      	movs	r2, #64	; 0x40
    ad22:	0018      	movs	r0, r3
    ad24:	4b43      	ldr	r3, [pc, #268]	; (ae34 <main+0x3e0>)
    ad26:	4798      	blx	r3
			pageNumber+=1;
    ad28:	23a8      	movs	r3, #168	; 0xa8
    ad2a:	18fb      	adds	r3, r7, r3
    ad2c:	681b      	ldr	r3, [r3, #0]
    ad2e:	3301      	adds	r3, #1
    ad30:	22a8      	movs	r2, #168	; 0xa8
    ad32:	18ba      	adds	r2, r7, r2
    ad34:	6013      	str	r3, [r2, #0]
			totalBytesRead += bytesRead;
    ad36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    ad38:	22a4      	movs	r2, #164	; 0xa4
    ad3a:	18ba      	adds	r2, r7, r2
    ad3c:	6812      	ldr	r2, [r2, #0]
    ad3e:	18d3      	adds	r3, r2, r3
    ad40:	22a4      	movs	r2, #164	; 0xa4
    ad42:	18ba      	adds	r2, r7, r2
    ad44:	6013      	str	r3, [r2, #0]
			if(filesize - totalBytesRead < 64)
    ad46:	2390      	movs	r3, #144	; 0x90
    ad48:	18fb      	adds	r3, r7, r3
    ad4a:	681a      	ldr	r2, [r3, #0]
    ad4c:	23a4      	movs	r3, #164	; 0xa4
    ad4e:	18fb      	adds	r3, r7, r3
    ad50:	681b      	ldr	r3, [r3, #0]
    ad52:	1ad3      	subs	r3, r2, r3
    ad54:	2b3f      	cmp	r3, #63	; 0x3f
    ad56:	d809      	bhi.n	ad6c <main+0x318>
			{
				bytesToRead = filesize - totalBytesRead;
    ad58:	2390      	movs	r3, #144	; 0x90
    ad5a:	18fb      	adds	r3, r7, r3
    ad5c:	681a      	ldr	r2, [r3, #0]
    ad5e:	23a4      	movs	r3, #164	; 0xa4
    ad60:	18fb      	adds	r3, r7, r3
    ad62:	681b      	ldr	r3, [r3, #0]
    ad64:	1ad3      	subs	r3, r2, r3
    ad66:	22ac      	movs	r2, #172	; 0xac
    ad68:	18ba      	adds	r2, r7, r2
    ad6a:	6013      	str	r3, [r2, #0]
			}
			SerialConsoleWriteString("Wrote 1 page into NVM\r\n");
    ad6c:	4b32      	ldr	r3, [pc, #200]	; (ae38 <main+0x3e4>)
    ad6e:	0018      	movs	r0, r3
    ad70:	4b15      	ldr	r3, [pc, #84]	; (adc8 <main+0x374>)
    ad72:	4798      	blx	r3
		while(totalBytesRead < filesize)
    ad74:	23a4      	movs	r3, #164	; 0xa4
    ad76:	18fb      	adds	r3, r7, r3
    ad78:	681a      	ldr	r2, [r3, #0]
    ad7a:	2390      	movs	r3, #144	; 0x90
    ad7c:	18fb      	adds	r3, r7, r3
    ad7e:	681b      	ldr	r3, [r3, #0]
    ad80:	429a      	cmp	r2, r3
    ad82:	d3ad      	bcc.n	ace0 <main+0x28c>
		}
	
		// Delete the flag file because the other one would have been written.
		if(firmwareFlag == 1)
    ad84:	23b8      	movs	r3, #184	; 0xb8
    ad86:	18fb      	adds	r3, r7, r3
    ad88:	681b      	ldr	r3, [r3, #0]
    ad8a:	2b01      	cmp	r3, #1
    ad8c:	d15a      	bne.n	ae44 <main+0x3f0>
		{
			f_unlink(flagA);
    ad8e:	2384      	movs	r3, #132	; 0x84
    ad90:	18fb      	adds	r3, r7, r3
    ad92:	0018      	movs	r0, r3
    ad94:	4b29      	ldr	r3, [pc, #164]	; (ae3c <main+0x3e8>)
    ad96:	4798      	blx	r3
			SerialConsoleWriteString("FlagA.txt deleted.\r\n");
    ad98:	4b29      	ldr	r3, [pc, #164]	; (ae40 <main+0x3ec>)
    ad9a:	0018      	movs	r0, r3
    ad9c:	4b0a      	ldr	r3, [pc, #40]	; (adc8 <main+0x374>)
    ad9e:	4798      	blx	r3
    ada0:	e05e      	b.n	ae60 <main+0x40c>
    ada2:	46c0      	nop			; (mov r8, r8)
    ada4:	00006b45 	.word	0x00006b45
    ada8:	00000149 	.word	0x00000149
    adac:	00000ce1 	.word	0x00000ce1
    adb0:	0000aa21 	.word	0x0000aa21
    adb4:	00001b8d 	.word	0x00001b8d
    adb8:	0000b1a1 	.word	0x0000b1a1
    adbc:	20000009 	.word	0x20000009
    adc0:	0000aa3d 	.word	0x0000aa3d
    adc4:	0000c554 	.word	0x0000c554
    adc8:	00000d6d 	.word	0x00000d6d
    adcc:	0000c570 	.word	0x0000c570
    add0:	0000aec1 	.word	0x0000aec1
    add4:	0000c598 	.word	0x0000c598
    add8:	00001388 	.word	0x00001388
    addc:	000001a1 	.word	0x000001a1
    ade0:	0000aa0d 	.word	0x0000aa0d
    ade4:	0000c5e4 	.word	0x0000c5e4
    ade8:	0000c798 	.word	0x0000c798
    adec:	0000c7a4 	.word	0x0000c7a4
    adf0:	0000c7b0 	.word	0x0000c7b0
    adf4:	0000c7bc 	.word	0x0000c7bc
    adf8:	20000c34 	.word	0x20000c34
    adfc:	00009881 	.word	0x00009881
    ae00:	0000c618 	.word	0x0000c618
    ae04:	0000c648 	.word	0x0000c648
    ae08:	0000a51d 	.word	0x0000a51d
    ae0c:	00000719 	.word	0x00000719
    ae10:	0000c678 	.word	0x0000c678
    ae14:	20000c8d 	.word	0x20000c8d
    ae18:	0000c688 	.word	0x0000c688
    ae1c:	0000c6a4 	.word	0x0000c6a4
    ae20:	00007fff 	.word	0x00007fff
    ae24:	0000c6d8 	.word	0x0000c6d8
    ae28:	0000c6f8 	.word	0x0000c6f8
    ae2c:	00009db1 	.word	0x00009db1
    ae30:	0000c710 	.word	0x0000c710
    ae34:	000005cd 	.word	0x000005cd
    ae38:	0000c728 	.word	0x0000c728
    ae3c:	0000a559 	.word	0x0000a559
    ae40:	0000c740 	.word	0x0000c740
		}
		else if (firmwareFlag == 2)
    ae44:	23b8      	movs	r3, #184	; 0xb8
    ae46:	18fb      	adds	r3, r7, r3
    ae48:	681b      	ldr	r3, [r3, #0]
    ae4a:	2b02      	cmp	r3, #2
    ae4c:	d108      	bne.n	ae60 <main+0x40c>
		{
			f_unlink(flagB);
    ae4e:	2378      	movs	r3, #120	; 0x78
    ae50:	18fb      	adds	r3, r7, r3
    ae52:	0018      	movs	r0, r3
    ae54:	4b0f      	ldr	r3, [pc, #60]	; (ae94 <main+0x440>)
    ae56:	4798      	blx	r3
			SerialConsoleWriteString("FlagB.txt deleted.\r\n");
    ae58:	4b0f      	ldr	r3, [pc, #60]	; (ae98 <main+0x444>)
    ae5a:	0018      	movs	r0, r3
    ae5c:	4b0f      	ldr	r3, [pc, #60]	; (ae9c <main+0x448>)
    ae5e:	4798      	blx	r3
		}
	
		f_close(&file_object);
    ae60:	4b0f      	ldr	r3, [pc, #60]	; (aea0 <main+0x44c>)
    ae62:	0018      	movs	r0, r3
    ae64:	4b0f      	ldr	r3, [pc, #60]	; (aea4 <main+0x450>)
    ae66:	4798      	blx	r3
	
		SerialConsoleWriteString("Closed File");
    ae68:	4b0f      	ldr	r3, [pc, #60]	; (aea8 <main+0x454>)
    ae6a:	0018      	movs	r0, r3
    ae6c:	4b0b      	ldr	r3, [pc, #44]	; (ae9c <main+0x448>)
    ae6e:	4798      	blx	r3
		}
	
    /* END BOOTLOADER HERE!*/

    // 4.) DEINITIALIZE HW AND JUMP TO MAIN APPLICATION!
    SerialConsoleWriteString("ESE5160 - EXIT BOOTLOADER");   // Order to add string to TX Buffer
    ae70:	4b0e      	ldr	r3, [pc, #56]	; (aeac <main+0x458>)
    ae72:	0018      	movs	r0, r3
    ae74:	4b09      	ldr	r3, [pc, #36]	; (ae9c <main+0x448>)
    ae76:	4798      	blx	r3
    delay_cycles_ms(100);                                    // Delay to allow print
    ae78:	2064      	movs	r0, #100	; 0x64
    ae7a:	4b0d      	ldr	r3, [pc, #52]	; (aeb0 <main+0x45c>)
    ae7c:	4798      	blx	r3

    // Deinitialize HW - deinitialize started HW here!
    DeinitializeSerialConsole();   // Deinitializes UART
    ae7e:	4b0d      	ldr	r3, [pc, #52]	; (aeb4 <main+0x460>)
    ae80:	4798      	blx	r3
    sd_mmc_deinit();               // Deinitialize SD CARD
    ae82:	4b0d      	ldr	r3, [pc, #52]	; (aeb8 <main+0x464>)
    ae84:	4798      	blx	r3

    // Jump to application
    jumpToApplication();
    ae86:	4b0d      	ldr	r3, [pc, #52]	; (aebc <main+0x468>)
    ae88:	4798      	blx	r3
    ae8a:	2300      	movs	r3, #0

    // Should not reach here! The device should have jumped to the main FW.
}
    ae8c:	0018      	movs	r0, r3
    ae8e:	46bd      	mov	sp, r7
    ae90:	b030      	add	sp, #192	; 0xc0
    ae92:	bdb0      	pop	{r4, r5, r7, pc}
    ae94:	0000a559 	.word	0x0000a559
    ae98:	0000c758 	.word	0x0000c758
    ae9c:	00000d6d 	.word	0x00000d6d
    aea0:	20000c34 	.word	0x20000c34
    aea4:	0000a51d 	.word	0x0000a51d
    aea8:	0000c770 	.word	0x0000c770
    aeac:	0000c77c 	.word	0x0000c77c
    aeb0:	000001a1 	.word	0x000001a1
    aeb4:	00000d51 	.word	0x00000d51
    aeb8:	00002935 	.word	0x00002935
    aebc:	0000b169 	.word	0x0000b169

0000aec0 <StartFilesystemAndTest>:
 * @brief        Starts the filesystem and tests it. Sets the filesystem to the global variable fs
 * @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
 *				before performing the jump!
 * @return       Returns true is SD card and file system test passed. False otherwise.
 ******************************************************************************/
static bool StartFilesystemAndTest(void) {
    aec0:	b590      	push	{r4, r7, lr}
    aec2:	b0c5      	sub	sp, #276	; 0x114
    aec4:	af00      	add	r7, sp, #0
    bool sdCardPass = true;
    aec6:	2310      	movs	r3, #16
    aec8:	33ff      	adds	r3, #255	; 0xff
    aeca:	18fb      	adds	r3, r7, r3
    aecc:	2201      	movs	r2, #1
    aece:	701a      	strb	r2, [r3, #0]
    uint8_t binbuff[256];

    // Before we begin - fill buffer for binary write test
    // Fill binbuff with values 0x00 - 0xFF
    for (int i = 0; i < 256; i++) {
    aed0:	2300      	movs	r3, #0
    aed2:	2284      	movs	r2, #132	; 0x84
    aed4:	0052      	lsls	r2, r2, #1
    aed6:	18ba      	adds	r2, r7, r2
    aed8:	6013      	str	r3, [r2, #0]
    aeda:	e019      	b.n	af10 <StartFilesystemAndTest+0x50>
        binbuff[i] = i;
    aedc:	2384      	movs	r3, #132	; 0x84
    aede:	005b      	lsls	r3, r3, #1
    aee0:	18fb      	adds	r3, r7, r3
    aee2:	681b      	ldr	r3, [r3, #0]
    aee4:	b2d9      	uxtb	r1, r3
    aee6:	4b84      	ldr	r3, [pc, #528]	; (b0f8 <StartFilesystemAndTest+0x238>)
    aee8:	2288      	movs	r2, #136	; 0x88
    aeea:	0052      	lsls	r2, r2, #1
    aeec:	18ba      	adds	r2, r7, r2
    aeee:	18d2      	adds	r2, r2, r3
    aef0:	2384      	movs	r3, #132	; 0x84
    aef2:	005b      	lsls	r3, r3, #1
    aef4:	18fb      	adds	r3, r7, r3
    aef6:	681b      	ldr	r3, [r3, #0]
    aef8:	18d3      	adds	r3, r2, r3
    aefa:	1c0a      	adds	r2, r1, #0
    aefc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 256; i++) {
    aefe:	2384      	movs	r3, #132	; 0x84
    af00:	005b      	lsls	r3, r3, #1
    af02:	18fb      	adds	r3, r7, r3
    af04:	681b      	ldr	r3, [r3, #0]
    af06:	3301      	adds	r3, #1
    af08:	2284      	movs	r2, #132	; 0x84
    af0a:	0052      	lsls	r2, r2, #1
    af0c:	18ba      	adds	r2, r7, r2
    af0e:	6013      	str	r3, [r2, #0]
    af10:	2384      	movs	r3, #132	; 0x84
    af12:	005b      	lsls	r3, r3, #1
    af14:	18fb      	adds	r3, r7, r3
    af16:	681b      	ldr	r3, [r3, #0]
    af18:	2bff      	cmp	r3, #255	; 0xff
    af1a:	dddf      	ble.n	aedc <StartFilesystemAndTest+0x1c>
    }

    // MOUNT SD CARD
    Ctrl_status sdStatus = SdCard_Initiate();
    af1c:	2308      	movs	r3, #8
    af1e:	33ff      	adds	r3, #255	; 0xff
    af20:	18fc      	adds	r4, r7, r3
    af22:	4b76      	ldr	r3, [pc, #472]	; (b0fc <StartFilesystemAndTest+0x23c>)
    af24:	4798      	blx	r3
    af26:	0003      	movs	r3, r0
    af28:	7023      	strb	r3, [r4, #0]
    if (sdStatus == CTRL_GOOD)   // If the SD card is good we continue mounting the system!
    af2a:	2308      	movs	r3, #8
    af2c:	33ff      	adds	r3, #255	; 0xff
    af2e:	18fb      	adds	r3, r7, r3
    af30:	781b      	ldrb	r3, [r3, #0]
    af32:	2b00      	cmp	r3, #0
    af34:	d000      	beq.n	af38 <StartFilesystemAndTest+0x78>
    af36:	e0ce      	b.n	b0d6 <StartFilesystemAndTest+0x216>
    {
        SerialConsoleWriteString("SD Card initiated correctly!\n\r");
    af38:	4b71      	ldr	r3, [pc, #452]	; (b100 <StartFilesystemAndTest+0x240>)
    af3a:	0018      	movs	r0, r3
    af3c:	4b71      	ldr	r3, [pc, #452]	; (b104 <StartFilesystemAndTest+0x244>)
    af3e:	4798      	blx	r3

        // Attempt to mount a FAT file system on the SD Card using FATFS
        SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    af40:	4b71      	ldr	r3, [pc, #452]	; (b108 <StartFilesystemAndTest+0x248>)
    af42:	0018      	movs	r0, r3
    af44:	4b6f      	ldr	r3, [pc, #444]	; (b104 <StartFilesystemAndTest+0x244>)
    af46:	4798      	blx	r3
        memset(&fs, 0, sizeof(FATFS));
    af48:	238c      	movs	r3, #140	; 0x8c
    af4a:	009a      	lsls	r2, r3, #2
    af4c:	4b6f      	ldr	r3, [pc, #444]	; (b10c <StartFilesystemAndTest+0x24c>)
    af4e:	2100      	movs	r1, #0
    af50:	0018      	movs	r0, r3
    af52:	4b6f      	ldr	r3, [pc, #444]	; (b110 <StartFilesystemAndTest+0x250>)
    af54:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);   // Order FATFS Mount
    af56:	4b6d      	ldr	r3, [pc, #436]	; (b10c <StartFilesystemAndTest+0x24c>)
    af58:	0019      	movs	r1, r3
    af5a:	2000      	movs	r0, #0
    af5c:	4b6d      	ldr	r3, [pc, #436]	; (b114 <StartFilesystemAndTest+0x254>)
    af5e:	4798      	blx	r3
    af60:	0003      	movs	r3, r0
    af62:	001a      	movs	r2, r3
    af64:	4b6c      	ldr	r3, [pc, #432]	; (b118 <StartFilesystemAndTest+0x258>)
    af66:	701a      	strb	r2, [r3, #0]
        if (FR_INVALID_DRIVE == res) {
    af68:	4b6b      	ldr	r3, [pc, #428]	; (b118 <StartFilesystemAndTest+0x258>)
    af6a:	781b      	ldrb	r3, [r3, #0]
    af6c:	2b0b      	cmp	r3, #11
    af6e:	d10d      	bne.n	af8c <StartFilesystemAndTest+0xcc>
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    af70:	4b69      	ldr	r3, [pc, #420]	; (b118 <StartFilesystemAndTest+0x258>)
    af72:	781b      	ldrb	r3, [r3, #0]
    af74:	001a      	movs	r2, r3
    af76:	4b69      	ldr	r3, [pc, #420]	; (b11c <StartFilesystemAndTest+0x25c>)
    af78:	0019      	movs	r1, r3
    af7a:	2000      	movs	r0, #0
    af7c:	4b68      	ldr	r3, [pc, #416]	; (b120 <StartFilesystemAndTest+0x260>)
    af7e:	4798      	blx	r3
            sdCardPass = false;
    af80:	2310      	movs	r3, #16
    af82:	33ff      	adds	r3, #255	; 0xff
    af84:	18fb      	adds	r3, r7, r3
    af86:	2200      	movs	r2, #0
    af88:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    af8a:	e09f      	b.n	b0cc <StartFilesystemAndTest+0x20c>
        }
        SerialConsoleWriteString("[OK]\r\n");
    af8c:	4b65      	ldr	r3, [pc, #404]	; (b124 <StartFilesystemAndTest+0x264>)
    af8e:	0018      	movs	r0, r3
    af90:	4b5c      	ldr	r3, [pc, #368]	; (b104 <StartFilesystemAndTest+0x244>)
    af92:	4798      	blx	r3

        // Create and open a file
        SerialConsoleWriteString("Create a file (f_open)...\r\n");
    af94:	4b64      	ldr	r3, [pc, #400]	; (b128 <StartFilesystemAndTest+0x268>)
    af96:	0018      	movs	r0, r3
    af98:	4b5a      	ldr	r3, [pc, #360]	; (b104 <StartFilesystemAndTest+0x244>)
    af9a:	4798      	blx	r3

        test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    af9c:	4b63      	ldr	r3, [pc, #396]	; (b12c <StartFilesystemAndTest+0x26c>)
    af9e:	2230      	movs	r2, #48	; 0x30
    afa0:	701a      	strb	r2, [r3, #0]
        res = f_open(&file_object, (char const *) test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    afa2:	4962      	ldr	r1, [pc, #392]	; (b12c <StartFilesystemAndTest+0x26c>)
    afa4:	4b62      	ldr	r3, [pc, #392]	; (b130 <StartFilesystemAndTest+0x270>)
    afa6:	220a      	movs	r2, #10
    afa8:	0018      	movs	r0, r3
    afaa:	4b62      	ldr	r3, [pc, #392]	; (b134 <StartFilesystemAndTest+0x274>)
    afac:	4798      	blx	r3
    afae:	0003      	movs	r3, r0
    afb0:	001a      	movs	r2, r3
    afb2:	4b59      	ldr	r3, [pc, #356]	; (b118 <StartFilesystemAndTest+0x258>)
    afb4:	701a      	strb	r2, [r3, #0]

        if (res != FR_OK) {
    afb6:	4b58      	ldr	r3, [pc, #352]	; (b118 <StartFilesystemAndTest+0x258>)
    afb8:	781b      	ldrb	r3, [r3, #0]
    afba:	2b00      	cmp	r3, #0
    afbc:	d00d      	beq.n	afda <StartFilesystemAndTest+0x11a>
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    afbe:	4b56      	ldr	r3, [pc, #344]	; (b118 <StartFilesystemAndTest+0x258>)
    afc0:	781b      	ldrb	r3, [r3, #0]
    afc2:	001a      	movs	r2, r3
    afc4:	4b55      	ldr	r3, [pc, #340]	; (b11c <StartFilesystemAndTest+0x25c>)
    afc6:	0019      	movs	r1, r3
    afc8:	2000      	movs	r0, #0
    afca:	4b55      	ldr	r3, [pc, #340]	; (b120 <StartFilesystemAndTest+0x260>)
    afcc:	4798      	blx	r3
            sdCardPass = false;
    afce:	2310      	movs	r3, #16
    afd0:	33ff      	adds	r3, #255	; 0xff
    afd2:	18fb      	adds	r3, r7, r3
    afd4:	2200      	movs	r2, #0
    afd6:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    afd8:	e078      	b.n	b0cc <StartFilesystemAndTest+0x20c>
        }

        SerialConsoleWriteString("[OK]\r\n");
    afda:	4b52      	ldr	r3, [pc, #328]	; (b124 <StartFilesystemAndTest+0x264>)
    afdc:	0018      	movs	r0, r3
    afde:	4b49      	ldr	r3, [pc, #292]	; (b104 <StartFilesystemAndTest+0x244>)
    afe0:	4798      	blx	r3

        // Write to a file
        SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    afe2:	4b55      	ldr	r3, [pc, #340]	; (b138 <StartFilesystemAndTest+0x278>)
    afe4:	0018      	movs	r0, r3
    afe6:	4b47      	ldr	r3, [pc, #284]	; (b104 <StartFilesystemAndTest+0x244>)
    afe8:	4798      	blx	r3

        if (0 == f_puts("Test SD/MMC stack\n", &file_object)) {
    afea:	4a51      	ldr	r2, [pc, #324]	; (b130 <StartFilesystemAndTest+0x270>)
    afec:	4b53      	ldr	r3, [pc, #332]	; (b13c <StartFilesystemAndTest+0x27c>)
    afee:	0011      	movs	r1, r2
    aff0:	0018      	movs	r0, r3
    aff2:	4b53      	ldr	r3, [pc, #332]	; (b140 <StartFilesystemAndTest+0x280>)
    aff4:	4798      	blx	r3
    aff6:	1e03      	subs	r3, r0, #0
    aff8:	d10e      	bne.n	b018 <StartFilesystemAndTest+0x158>
            f_close(&file_object);
    affa:	4b4d      	ldr	r3, [pc, #308]	; (b130 <StartFilesystemAndTest+0x270>)
    affc:	0018      	movs	r0, r3
    affe:	4b51      	ldr	r3, [pc, #324]	; (b144 <StartFilesystemAndTest+0x284>)
    b000:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL]\r\n");
    b002:	4b51      	ldr	r3, [pc, #324]	; (b148 <StartFilesystemAndTest+0x288>)
    b004:	0019      	movs	r1, r3
    b006:	2000      	movs	r0, #0
    b008:	4b45      	ldr	r3, [pc, #276]	; (b120 <StartFilesystemAndTest+0x260>)
    b00a:	4798      	blx	r3
            sdCardPass = false;
    b00c:	2310      	movs	r3, #16
    b00e:	33ff      	adds	r3, #255	; 0xff
    b010:	18fb      	adds	r3, r7, r3
    b012:	2200      	movs	r2, #0
    b014:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    b016:	e059      	b.n	b0cc <StartFilesystemAndTest+0x20c>
        }

        SerialConsoleWriteString("[OK]\r\n");
    b018:	4b42      	ldr	r3, [pc, #264]	; (b124 <StartFilesystemAndTest+0x264>)
    b01a:	0018      	movs	r0, r3
    b01c:	4b39      	ldr	r3, [pc, #228]	; (b104 <StartFilesystemAndTest+0x244>)
    b01e:	4798      	blx	r3
        f_close(&file_object);   // Close file
    b020:	4b43      	ldr	r3, [pc, #268]	; (b130 <StartFilesystemAndTest+0x270>)
    b022:	0018      	movs	r0, r3
    b024:	4b47      	ldr	r3, [pc, #284]	; (b144 <StartFilesystemAndTest+0x284>)
    b026:	4798      	blx	r3
        SerialConsoleWriteString("Test is successful.\n\r");
    b028:	4b48      	ldr	r3, [pc, #288]	; (b14c <StartFilesystemAndTest+0x28c>)
    b02a:	0018      	movs	r0, r3
    b02c:	4b35      	ldr	r3, [pc, #212]	; (b104 <StartFilesystemAndTest+0x244>)
    b02e:	4798      	blx	r3

        // Write binary file
        // Read SD Card File
        test_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b030:	4b47      	ldr	r3, [pc, #284]	; (b150 <StartFilesystemAndTest+0x290>)
    b032:	2230      	movs	r2, #48	; 0x30
    b034:	701a      	strb	r2, [r3, #0]
        res = f_open(&file_object, (char const *) test_bin_file, FA_WRITE | FA_CREATE_ALWAYS);
    b036:	4946      	ldr	r1, [pc, #280]	; (b150 <StartFilesystemAndTest+0x290>)
    b038:	4b3d      	ldr	r3, [pc, #244]	; (b130 <StartFilesystemAndTest+0x270>)
    b03a:	220a      	movs	r2, #10
    b03c:	0018      	movs	r0, r3
    b03e:	4b3d      	ldr	r3, [pc, #244]	; (b134 <StartFilesystemAndTest+0x274>)
    b040:	4798      	blx	r3
    b042:	0003      	movs	r3, r0
    b044:	001a      	movs	r2, r3
    b046:	4b34      	ldr	r3, [pc, #208]	; (b118 <StartFilesystemAndTest+0x258>)
    b048:	701a      	strb	r2, [r3, #0]

        if (res != FR_OK) {
    b04a:	4b33      	ldr	r3, [pc, #204]	; (b118 <StartFilesystemAndTest+0x258>)
    b04c:	781b      	ldrb	r3, [r3, #0]
    b04e:	2b00      	cmp	r3, #0
    b050:	d011      	beq.n	b076 <StartFilesystemAndTest+0x1b6>
            SerialConsoleWriteString("Could not open binary file!\r\n");
    b052:	4b40      	ldr	r3, [pc, #256]	; (b154 <StartFilesystemAndTest+0x294>)
    b054:	0018      	movs	r0, r3
    b056:	4b2b      	ldr	r3, [pc, #172]	; (b104 <StartFilesystemAndTest+0x244>)
    b058:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    b05a:	4b2f      	ldr	r3, [pc, #188]	; (b118 <StartFilesystemAndTest+0x258>)
    b05c:	781b      	ldrb	r3, [r3, #0]
    b05e:	001a      	movs	r2, r3
    b060:	4b2e      	ldr	r3, [pc, #184]	; (b11c <StartFilesystemAndTest+0x25c>)
    b062:	0019      	movs	r1, r3
    b064:	2000      	movs	r0, #0
    b066:	4b2e      	ldr	r3, [pc, #184]	; (b120 <StartFilesystemAndTest+0x260>)
    b068:	4798      	blx	r3
            sdCardPass = false;
    b06a:	2310      	movs	r3, #16
    b06c:	33ff      	adds	r3, #255	; 0xff
    b06e:	18fb      	adds	r3, r7, r3
    b070:	2200      	movs	r2, #0
    b072:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    b074:	e02a      	b.n	b0cc <StartFilesystemAndTest+0x20c>
        }

        // Write to a binaryfile
        SerialConsoleWriteString("Write to test file (f_write)...\r\n");
    b076:	4b38      	ldr	r3, [pc, #224]	; (b158 <StartFilesystemAndTest+0x298>)
    b078:	0018      	movs	r0, r3
    b07a:	4b22      	ldr	r3, [pc, #136]	; (b104 <StartFilesystemAndTest+0x244>)
    b07c:	4798      	blx	r3
        uint32_t varWrite = 0;
    b07e:	2300      	movs	r3, #0
    b080:	603b      	str	r3, [r7, #0]
        if (0 != f_write(&file_object, binbuff, 256, &varWrite)) {
    b082:	003c      	movs	r4, r7
    b084:	2380      	movs	r3, #128	; 0x80
    b086:	005a      	lsls	r2, r3, #1
    b088:	1d39      	adds	r1, r7, #4
    b08a:	4829      	ldr	r0, [pc, #164]	; (b130 <StartFilesystemAndTest+0x270>)
    b08c:	0023      	movs	r3, r4
    b08e:	4c33      	ldr	r4, [pc, #204]	; (b15c <StartFilesystemAndTest+0x29c>)
    b090:	47a0      	blx	r4
    b092:	1e03      	subs	r3, r0, #0
    b094:	d00e      	beq.n	b0b4 <StartFilesystemAndTest+0x1f4>
            f_close(&file_object);
    b096:	4b26      	ldr	r3, [pc, #152]	; (b130 <StartFilesystemAndTest+0x270>)
    b098:	0018      	movs	r0, r3
    b09a:	4b2a      	ldr	r3, [pc, #168]	; (b144 <StartFilesystemAndTest+0x284>)
    b09c:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL]\r\n");
    b09e:	4b2a      	ldr	r3, [pc, #168]	; (b148 <StartFilesystemAndTest+0x288>)
    b0a0:	0019      	movs	r1, r3
    b0a2:	2000      	movs	r0, #0
    b0a4:	4b1e      	ldr	r3, [pc, #120]	; (b120 <StartFilesystemAndTest+0x260>)
    b0a6:	4798      	blx	r3
            sdCardPass = false;
    b0a8:	2310      	movs	r3, #16
    b0aa:	33ff      	adds	r3, #255	; 0xff
    b0ac:	18fb      	adds	r3, r7, r3
    b0ae:	2200      	movs	r2, #0
    b0b0:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    b0b2:	e00b      	b.n	b0cc <StartFilesystemAndTest+0x20c>
        }

        SerialConsoleWriteString("[OK]\r\n");
    b0b4:	4b1b      	ldr	r3, [pc, #108]	; (b124 <StartFilesystemAndTest+0x264>)
    b0b6:	0018      	movs	r0, r3
    b0b8:	4b12      	ldr	r3, [pc, #72]	; (b104 <StartFilesystemAndTest+0x244>)
    b0ba:	4798      	blx	r3
        f_close(&file_object);   // Close file
    b0bc:	4b1c      	ldr	r3, [pc, #112]	; (b130 <StartFilesystemAndTest+0x270>)
    b0be:	0018      	movs	r0, r3
    b0c0:	4b20      	ldr	r3, [pc, #128]	; (b144 <StartFilesystemAndTest+0x284>)
    b0c2:	4798      	blx	r3
        SerialConsoleWriteString("Test is successful.\n\r");
    b0c4:	4b21      	ldr	r3, [pc, #132]	; (b14c <StartFilesystemAndTest+0x28c>)
    b0c6:	0018      	movs	r0, r3
    b0c8:	4b0e      	ldr	r3, [pc, #56]	; (b104 <StartFilesystemAndTest+0x244>)
    b0ca:	4798      	blx	r3

    main_end_of_test:
        SerialConsoleWriteString("End of Test.\n\r");
    b0cc:	4b24      	ldr	r3, [pc, #144]	; (b160 <StartFilesystemAndTest+0x2a0>)
    b0ce:	0018      	movs	r0, r3
    b0d0:	4b0c      	ldr	r3, [pc, #48]	; (b104 <StartFilesystemAndTest+0x244>)
    b0d2:	4798      	blx	r3
    b0d4:	e008      	b.n	b0e8 <StartFilesystemAndTest+0x228>

    } else {
        SerialConsoleWriteString("SD Card failed initiation! Check connections!\n\r");
    b0d6:	4b23      	ldr	r3, [pc, #140]	; (b164 <StartFilesystemAndTest+0x2a4>)
    b0d8:	0018      	movs	r0, r3
    b0da:	4b0a      	ldr	r3, [pc, #40]	; (b104 <StartFilesystemAndTest+0x244>)
    b0dc:	4798      	blx	r3
        sdCardPass = false;
    b0de:	2310      	movs	r3, #16
    b0e0:	33ff      	adds	r3, #255	; 0xff
    b0e2:	18fb      	adds	r3, r7, r3
    b0e4:	2200      	movs	r2, #0
    b0e6:	701a      	strb	r2, [r3, #0]
    }

    return sdCardPass;
    b0e8:	2310      	movs	r3, #16
    b0ea:	33ff      	adds	r3, #255	; 0xff
    b0ec:	18fb      	adds	r3, r7, r3
    b0ee:	781b      	ldrb	r3, [r3, #0]
}
    b0f0:	0018      	movs	r0, r3
    b0f2:	46bd      	mov	sp, r7
    b0f4:	b045      	add	sp, #276	; 0x114
    b0f6:	bd90      	pop	{r4, r7, pc}
    b0f8:	fffffef4 	.word	0xfffffef4
    b0fc:	000007c1 	.word	0x000007c1
    b100:	0000c7c8 	.word	0x0000c7c8
    b104:	00000d6d 	.word	0x00000d6d
    b108:	0000c7e8 	.word	0x0000c7e8
    b10c:	20000a04 	.word	0x20000a04
    b110:	0000b57b 	.word	0x0000b57b
    b114:	00009829 	.word	0x00009829
    b118:	20000c8c 	.word	0x20000c8c
    b11c:	0000c804 	.word	0x0000c804
    b120:	00000df9 	.word	0x00000df9
    b124:	0000c814 	.word	0x0000c814
    b128:	0000c81c 	.word	0x0000c81c
    b12c:	2000000c 	.word	0x2000000c
    b130:	20000c34 	.word	0x20000c34
    b134:	00009881 	.word	0x00009881
    b138:	0000c838 	.word	0x0000c838
    b13c:	0000c85c 	.word	0x0000c85c
    b140:	0000a801 	.word	0x0000a801
    b144:	0000a51d 	.word	0x0000a51d
    b148:	0000c870 	.word	0x0000c870
    b14c:	0000c87c 	.word	0x0000c87c
    b150:	20000020 	.word	0x20000020
    b154:	0000c894 	.word	0x0000c894
    b158:	0000c8b4 	.word	0x0000c8b4
    b15c:	0000a04d 	.word	0x0000a04d
    b160:	0000c8d8 	.word	0x0000c8d8
    b164:	0000c8e8 	.word	0x0000c8e8

0000b168 <jumpToApplication>:
 * @brief        Jumps to main application
 * @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
 *				before performing the jump!
 * @return
 ******************************************************************************/
static void jumpToApplication(void) {
    b168:	b580      	push	{r7, lr}
    b16a:	b082      	sub	sp, #8
    b16c:	af00      	add	r7, sp, #0
    // Function pointer to application section
    void (*applicationCodeEntry)(void);

    // Rebase stack pointer
    __set_MSP(*(uint32_t *) APP_START_ADDRESS);
    b16e:	2390      	movs	r3, #144	; 0x90
    b170:	025b      	lsls	r3, r3, #9
    b172:	681b      	ldr	r3, [r3, #0]
    b174:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    b176:	683b      	ldr	r3, [r7, #0]
    b178:	f383 8808 	msr	MSP, r3

    // Rebase vector table
    SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    b17c:	4b06      	ldr	r3, [pc, #24]	; (b198 <jumpToApplication+0x30>)
    b17e:	2290      	movs	r2, #144	; 0x90
    b180:	0252      	lsls	r2, r2, #9
    b182:	609a      	str	r2, [r3, #8]

    // Set pointer to application section
    applicationCodeEntry = (void (*)(void))(unsigned *) (*(unsigned *) (APP_START_RESET_VEC_ADDRESS));
    b184:	4b05      	ldr	r3, [pc, #20]	; (b19c <jumpToApplication+0x34>)
    b186:	681b      	ldr	r3, [r3, #0]
    b188:	607b      	str	r3, [r7, #4]

    // Jump to application. By calling applicationCodeEntry() as a function we move the PC to the point in memory pointed by applicationCodeEntry,
    // which should be the start of the main FW.
    applicationCodeEntry();
    b18a:	687b      	ldr	r3, [r7, #4]
    b18c:	4798      	blx	r3
}
    b18e:	46c0      	nop			; (mov r8, r8)
    b190:	46bd      	mov	sp, r7
    b192:	b002      	add	sp, #8
    b194:	bd80      	pop	{r7, pc}
    b196:	46c0      	nop			; (mov r8, r8)
    b198:	e000ed00 	.word	0xe000ed00
    b19c:	00012004 	.word	0x00012004

0000b1a0 <configure_nvm>:
 * function      static void configure_nvm(void)
 * @brief        Configures the NVM driver
 * @details
 * @return
 ******************************************************************************/
static void configure_nvm(void) {
    b1a0:	b580      	push	{r7, lr}
    b1a2:	b082      	sub	sp, #8
    b1a4:	af00      	add	r7, sp, #0
    struct nvm_config config_nvm;
    nvm_get_config_defaults(&config_nvm);
    b1a6:	003b      	movs	r3, r7
    b1a8:	0018      	movs	r0, r3
    b1aa:	4b06      	ldr	r3, [pc, #24]	; (b1c4 <configure_nvm+0x24>)
    b1ac:	4798      	blx	r3
    config_nvm.manual_page_write = false;
    b1ae:	003b      	movs	r3, r7
    b1b0:	2200      	movs	r2, #0
    b1b2:	705a      	strb	r2, [r3, #1]
    nvm_set_config(&config_nvm);
    b1b4:	003b      	movs	r3, r7
    b1b6:	0018      	movs	r0, r3
    b1b8:	4b03      	ldr	r3, [pc, #12]	; (b1c8 <configure_nvm+0x28>)
    b1ba:	4798      	blx	r3
}
    b1bc:	46c0      	nop			; (mov r8, r8)
    b1be:	46bd      	mov	sp, r7
    b1c0:	b002      	add	sp, #8
    b1c2:	bd80      	pop	{r7, pc}
    b1c4:	0000a9d1 	.word	0x0000a9d1
    b1c8:	000003dd 	.word	0x000003dd

0000b1cc <__udivsi3>:
    b1cc:	2200      	movs	r2, #0
    b1ce:	0843      	lsrs	r3, r0, #1
    b1d0:	428b      	cmp	r3, r1
    b1d2:	d374      	bcc.n	b2be <__udivsi3+0xf2>
    b1d4:	0903      	lsrs	r3, r0, #4
    b1d6:	428b      	cmp	r3, r1
    b1d8:	d35f      	bcc.n	b29a <__udivsi3+0xce>
    b1da:	0a03      	lsrs	r3, r0, #8
    b1dc:	428b      	cmp	r3, r1
    b1de:	d344      	bcc.n	b26a <__udivsi3+0x9e>
    b1e0:	0b03      	lsrs	r3, r0, #12
    b1e2:	428b      	cmp	r3, r1
    b1e4:	d328      	bcc.n	b238 <__udivsi3+0x6c>
    b1e6:	0c03      	lsrs	r3, r0, #16
    b1e8:	428b      	cmp	r3, r1
    b1ea:	d30d      	bcc.n	b208 <__udivsi3+0x3c>
    b1ec:	22ff      	movs	r2, #255	; 0xff
    b1ee:	0209      	lsls	r1, r1, #8
    b1f0:	ba12      	rev	r2, r2
    b1f2:	0c03      	lsrs	r3, r0, #16
    b1f4:	428b      	cmp	r3, r1
    b1f6:	d302      	bcc.n	b1fe <__udivsi3+0x32>
    b1f8:	1212      	asrs	r2, r2, #8
    b1fa:	0209      	lsls	r1, r1, #8
    b1fc:	d065      	beq.n	b2ca <__udivsi3+0xfe>
    b1fe:	0b03      	lsrs	r3, r0, #12
    b200:	428b      	cmp	r3, r1
    b202:	d319      	bcc.n	b238 <__udivsi3+0x6c>
    b204:	e000      	b.n	b208 <__udivsi3+0x3c>
    b206:	0a09      	lsrs	r1, r1, #8
    b208:	0bc3      	lsrs	r3, r0, #15
    b20a:	428b      	cmp	r3, r1
    b20c:	d301      	bcc.n	b212 <__udivsi3+0x46>
    b20e:	03cb      	lsls	r3, r1, #15
    b210:	1ac0      	subs	r0, r0, r3
    b212:	4152      	adcs	r2, r2
    b214:	0b83      	lsrs	r3, r0, #14
    b216:	428b      	cmp	r3, r1
    b218:	d301      	bcc.n	b21e <__udivsi3+0x52>
    b21a:	038b      	lsls	r3, r1, #14
    b21c:	1ac0      	subs	r0, r0, r3
    b21e:	4152      	adcs	r2, r2
    b220:	0b43      	lsrs	r3, r0, #13
    b222:	428b      	cmp	r3, r1
    b224:	d301      	bcc.n	b22a <__udivsi3+0x5e>
    b226:	034b      	lsls	r3, r1, #13
    b228:	1ac0      	subs	r0, r0, r3
    b22a:	4152      	adcs	r2, r2
    b22c:	0b03      	lsrs	r3, r0, #12
    b22e:	428b      	cmp	r3, r1
    b230:	d301      	bcc.n	b236 <__udivsi3+0x6a>
    b232:	030b      	lsls	r3, r1, #12
    b234:	1ac0      	subs	r0, r0, r3
    b236:	4152      	adcs	r2, r2
    b238:	0ac3      	lsrs	r3, r0, #11
    b23a:	428b      	cmp	r3, r1
    b23c:	d301      	bcc.n	b242 <__udivsi3+0x76>
    b23e:	02cb      	lsls	r3, r1, #11
    b240:	1ac0      	subs	r0, r0, r3
    b242:	4152      	adcs	r2, r2
    b244:	0a83      	lsrs	r3, r0, #10
    b246:	428b      	cmp	r3, r1
    b248:	d301      	bcc.n	b24e <__udivsi3+0x82>
    b24a:	028b      	lsls	r3, r1, #10
    b24c:	1ac0      	subs	r0, r0, r3
    b24e:	4152      	adcs	r2, r2
    b250:	0a43      	lsrs	r3, r0, #9
    b252:	428b      	cmp	r3, r1
    b254:	d301      	bcc.n	b25a <__udivsi3+0x8e>
    b256:	024b      	lsls	r3, r1, #9
    b258:	1ac0      	subs	r0, r0, r3
    b25a:	4152      	adcs	r2, r2
    b25c:	0a03      	lsrs	r3, r0, #8
    b25e:	428b      	cmp	r3, r1
    b260:	d301      	bcc.n	b266 <__udivsi3+0x9a>
    b262:	020b      	lsls	r3, r1, #8
    b264:	1ac0      	subs	r0, r0, r3
    b266:	4152      	adcs	r2, r2
    b268:	d2cd      	bcs.n	b206 <__udivsi3+0x3a>
    b26a:	09c3      	lsrs	r3, r0, #7
    b26c:	428b      	cmp	r3, r1
    b26e:	d301      	bcc.n	b274 <__udivsi3+0xa8>
    b270:	01cb      	lsls	r3, r1, #7
    b272:	1ac0      	subs	r0, r0, r3
    b274:	4152      	adcs	r2, r2
    b276:	0983      	lsrs	r3, r0, #6
    b278:	428b      	cmp	r3, r1
    b27a:	d301      	bcc.n	b280 <__udivsi3+0xb4>
    b27c:	018b      	lsls	r3, r1, #6
    b27e:	1ac0      	subs	r0, r0, r3
    b280:	4152      	adcs	r2, r2
    b282:	0943      	lsrs	r3, r0, #5
    b284:	428b      	cmp	r3, r1
    b286:	d301      	bcc.n	b28c <__udivsi3+0xc0>
    b288:	014b      	lsls	r3, r1, #5
    b28a:	1ac0      	subs	r0, r0, r3
    b28c:	4152      	adcs	r2, r2
    b28e:	0903      	lsrs	r3, r0, #4
    b290:	428b      	cmp	r3, r1
    b292:	d301      	bcc.n	b298 <__udivsi3+0xcc>
    b294:	010b      	lsls	r3, r1, #4
    b296:	1ac0      	subs	r0, r0, r3
    b298:	4152      	adcs	r2, r2
    b29a:	08c3      	lsrs	r3, r0, #3
    b29c:	428b      	cmp	r3, r1
    b29e:	d301      	bcc.n	b2a4 <__udivsi3+0xd8>
    b2a0:	00cb      	lsls	r3, r1, #3
    b2a2:	1ac0      	subs	r0, r0, r3
    b2a4:	4152      	adcs	r2, r2
    b2a6:	0883      	lsrs	r3, r0, #2
    b2a8:	428b      	cmp	r3, r1
    b2aa:	d301      	bcc.n	b2b0 <__udivsi3+0xe4>
    b2ac:	008b      	lsls	r3, r1, #2
    b2ae:	1ac0      	subs	r0, r0, r3
    b2b0:	4152      	adcs	r2, r2
    b2b2:	0843      	lsrs	r3, r0, #1
    b2b4:	428b      	cmp	r3, r1
    b2b6:	d301      	bcc.n	b2bc <__udivsi3+0xf0>
    b2b8:	004b      	lsls	r3, r1, #1
    b2ba:	1ac0      	subs	r0, r0, r3
    b2bc:	4152      	adcs	r2, r2
    b2be:	1a41      	subs	r1, r0, r1
    b2c0:	d200      	bcs.n	b2c4 <__udivsi3+0xf8>
    b2c2:	4601      	mov	r1, r0
    b2c4:	4152      	adcs	r2, r2
    b2c6:	4610      	mov	r0, r2
    b2c8:	4770      	bx	lr
    b2ca:	e7ff      	b.n	b2cc <__udivsi3+0x100>
    b2cc:	b501      	push	{r0, lr}
    b2ce:	2000      	movs	r0, #0
    b2d0:	f000 f8f0 	bl	b4b4 <__aeabi_idiv0>
    b2d4:	bd02      	pop	{r1, pc}
    b2d6:	46c0      	nop			; (mov r8, r8)

0000b2d8 <__aeabi_uidivmod>:
    b2d8:	2900      	cmp	r1, #0
    b2da:	d0f7      	beq.n	b2cc <__udivsi3+0x100>
    b2dc:	e776      	b.n	b1cc <__udivsi3>
    b2de:	4770      	bx	lr

0000b2e0 <__divsi3>:
    b2e0:	4603      	mov	r3, r0
    b2e2:	430b      	orrs	r3, r1
    b2e4:	d47f      	bmi.n	b3e6 <__divsi3+0x106>
    b2e6:	2200      	movs	r2, #0
    b2e8:	0843      	lsrs	r3, r0, #1
    b2ea:	428b      	cmp	r3, r1
    b2ec:	d374      	bcc.n	b3d8 <__divsi3+0xf8>
    b2ee:	0903      	lsrs	r3, r0, #4
    b2f0:	428b      	cmp	r3, r1
    b2f2:	d35f      	bcc.n	b3b4 <__divsi3+0xd4>
    b2f4:	0a03      	lsrs	r3, r0, #8
    b2f6:	428b      	cmp	r3, r1
    b2f8:	d344      	bcc.n	b384 <__divsi3+0xa4>
    b2fa:	0b03      	lsrs	r3, r0, #12
    b2fc:	428b      	cmp	r3, r1
    b2fe:	d328      	bcc.n	b352 <__divsi3+0x72>
    b300:	0c03      	lsrs	r3, r0, #16
    b302:	428b      	cmp	r3, r1
    b304:	d30d      	bcc.n	b322 <__divsi3+0x42>
    b306:	22ff      	movs	r2, #255	; 0xff
    b308:	0209      	lsls	r1, r1, #8
    b30a:	ba12      	rev	r2, r2
    b30c:	0c03      	lsrs	r3, r0, #16
    b30e:	428b      	cmp	r3, r1
    b310:	d302      	bcc.n	b318 <__divsi3+0x38>
    b312:	1212      	asrs	r2, r2, #8
    b314:	0209      	lsls	r1, r1, #8
    b316:	d065      	beq.n	b3e4 <__divsi3+0x104>
    b318:	0b03      	lsrs	r3, r0, #12
    b31a:	428b      	cmp	r3, r1
    b31c:	d319      	bcc.n	b352 <__divsi3+0x72>
    b31e:	e000      	b.n	b322 <__divsi3+0x42>
    b320:	0a09      	lsrs	r1, r1, #8
    b322:	0bc3      	lsrs	r3, r0, #15
    b324:	428b      	cmp	r3, r1
    b326:	d301      	bcc.n	b32c <__divsi3+0x4c>
    b328:	03cb      	lsls	r3, r1, #15
    b32a:	1ac0      	subs	r0, r0, r3
    b32c:	4152      	adcs	r2, r2
    b32e:	0b83      	lsrs	r3, r0, #14
    b330:	428b      	cmp	r3, r1
    b332:	d301      	bcc.n	b338 <__divsi3+0x58>
    b334:	038b      	lsls	r3, r1, #14
    b336:	1ac0      	subs	r0, r0, r3
    b338:	4152      	adcs	r2, r2
    b33a:	0b43      	lsrs	r3, r0, #13
    b33c:	428b      	cmp	r3, r1
    b33e:	d301      	bcc.n	b344 <__divsi3+0x64>
    b340:	034b      	lsls	r3, r1, #13
    b342:	1ac0      	subs	r0, r0, r3
    b344:	4152      	adcs	r2, r2
    b346:	0b03      	lsrs	r3, r0, #12
    b348:	428b      	cmp	r3, r1
    b34a:	d301      	bcc.n	b350 <__divsi3+0x70>
    b34c:	030b      	lsls	r3, r1, #12
    b34e:	1ac0      	subs	r0, r0, r3
    b350:	4152      	adcs	r2, r2
    b352:	0ac3      	lsrs	r3, r0, #11
    b354:	428b      	cmp	r3, r1
    b356:	d301      	bcc.n	b35c <__divsi3+0x7c>
    b358:	02cb      	lsls	r3, r1, #11
    b35a:	1ac0      	subs	r0, r0, r3
    b35c:	4152      	adcs	r2, r2
    b35e:	0a83      	lsrs	r3, r0, #10
    b360:	428b      	cmp	r3, r1
    b362:	d301      	bcc.n	b368 <__divsi3+0x88>
    b364:	028b      	lsls	r3, r1, #10
    b366:	1ac0      	subs	r0, r0, r3
    b368:	4152      	adcs	r2, r2
    b36a:	0a43      	lsrs	r3, r0, #9
    b36c:	428b      	cmp	r3, r1
    b36e:	d301      	bcc.n	b374 <__divsi3+0x94>
    b370:	024b      	lsls	r3, r1, #9
    b372:	1ac0      	subs	r0, r0, r3
    b374:	4152      	adcs	r2, r2
    b376:	0a03      	lsrs	r3, r0, #8
    b378:	428b      	cmp	r3, r1
    b37a:	d301      	bcc.n	b380 <__divsi3+0xa0>
    b37c:	020b      	lsls	r3, r1, #8
    b37e:	1ac0      	subs	r0, r0, r3
    b380:	4152      	adcs	r2, r2
    b382:	d2cd      	bcs.n	b320 <__divsi3+0x40>
    b384:	09c3      	lsrs	r3, r0, #7
    b386:	428b      	cmp	r3, r1
    b388:	d301      	bcc.n	b38e <__divsi3+0xae>
    b38a:	01cb      	lsls	r3, r1, #7
    b38c:	1ac0      	subs	r0, r0, r3
    b38e:	4152      	adcs	r2, r2
    b390:	0983      	lsrs	r3, r0, #6
    b392:	428b      	cmp	r3, r1
    b394:	d301      	bcc.n	b39a <__divsi3+0xba>
    b396:	018b      	lsls	r3, r1, #6
    b398:	1ac0      	subs	r0, r0, r3
    b39a:	4152      	adcs	r2, r2
    b39c:	0943      	lsrs	r3, r0, #5
    b39e:	428b      	cmp	r3, r1
    b3a0:	d301      	bcc.n	b3a6 <__divsi3+0xc6>
    b3a2:	014b      	lsls	r3, r1, #5
    b3a4:	1ac0      	subs	r0, r0, r3
    b3a6:	4152      	adcs	r2, r2
    b3a8:	0903      	lsrs	r3, r0, #4
    b3aa:	428b      	cmp	r3, r1
    b3ac:	d301      	bcc.n	b3b2 <__divsi3+0xd2>
    b3ae:	010b      	lsls	r3, r1, #4
    b3b0:	1ac0      	subs	r0, r0, r3
    b3b2:	4152      	adcs	r2, r2
    b3b4:	08c3      	lsrs	r3, r0, #3
    b3b6:	428b      	cmp	r3, r1
    b3b8:	d301      	bcc.n	b3be <__divsi3+0xde>
    b3ba:	00cb      	lsls	r3, r1, #3
    b3bc:	1ac0      	subs	r0, r0, r3
    b3be:	4152      	adcs	r2, r2
    b3c0:	0883      	lsrs	r3, r0, #2
    b3c2:	428b      	cmp	r3, r1
    b3c4:	d301      	bcc.n	b3ca <__divsi3+0xea>
    b3c6:	008b      	lsls	r3, r1, #2
    b3c8:	1ac0      	subs	r0, r0, r3
    b3ca:	4152      	adcs	r2, r2
    b3cc:	0843      	lsrs	r3, r0, #1
    b3ce:	428b      	cmp	r3, r1
    b3d0:	d301      	bcc.n	b3d6 <__divsi3+0xf6>
    b3d2:	004b      	lsls	r3, r1, #1
    b3d4:	1ac0      	subs	r0, r0, r3
    b3d6:	4152      	adcs	r2, r2
    b3d8:	1a41      	subs	r1, r0, r1
    b3da:	d200      	bcs.n	b3de <__divsi3+0xfe>
    b3dc:	4601      	mov	r1, r0
    b3de:	4152      	adcs	r2, r2
    b3e0:	4610      	mov	r0, r2
    b3e2:	4770      	bx	lr
    b3e4:	e05d      	b.n	b4a2 <__divsi3+0x1c2>
    b3e6:	0fca      	lsrs	r2, r1, #31
    b3e8:	d000      	beq.n	b3ec <__divsi3+0x10c>
    b3ea:	4249      	negs	r1, r1
    b3ec:	1003      	asrs	r3, r0, #32
    b3ee:	d300      	bcc.n	b3f2 <__divsi3+0x112>
    b3f0:	4240      	negs	r0, r0
    b3f2:	4053      	eors	r3, r2
    b3f4:	2200      	movs	r2, #0
    b3f6:	469c      	mov	ip, r3
    b3f8:	0903      	lsrs	r3, r0, #4
    b3fa:	428b      	cmp	r3, r1
    b3fc:	d32d      	bcc.n	b45a <__divsi3+0x17a>
    b3fe:	0a03      	lsrs	r3, r0, #8
    b400:	428b      	cmp	r3, r1
    b402:	d312      	bcc.n	b42a <__divsi3+0x14a>
    b404:	22fc      	movs	r2, #252	; 0xfc
    b406:	0189      	lsls	r1, r1, #6
    b408:	ba12      	rev	r2, r2
    b40a:	0a03      	lsrs	r3, r0, #8
    b40c:	428b      	cmp	r3, r1
    b40e:	d30c      	bcc.n	b42a <__divsi3+0x14a>
    b410:	0189      	lsls	r1, r1, #6
    b412:	1192      	asrs	r2, r2, #6
    b414:	428b      	cmp	r3, r1
    b416:	d308      	bcc.n	b42a <__divsi3+0x14a>
    b418:	0189      	lsls	r1, r1, #6
    b41a:	1192      	asrs	r2, r2, #6
    b41c:	428b      	cmp	r3, r1
    b41e:	d304      	bcc.n	b42a <__divsi3+0x14a>
    b420:	0189      	lsls	r1, r1, #6
    b422:	d03a      	beq.n	b49a <__divsi3+0x1ba>
    b424:	1192      	asrs	r2, r2, #6
    b426:	e000      	b.n	b42a <__divsi3+0x14a>
    b428:	0989      	lsrs	r1, r1, #6
    b42a:	09c3      	lsrs	r3, r0, #7
    b42c:	428b      	cmp	r3, r1
    b42e:	d301      	bcc.n	b434 <__divsi3+0x154>
    b430:	01cb      	lsls	r3, r1, #7
    b432:	1ac0      	subs	r0, r0, r3
    b434:	4152      	adcs	r2, r2
    b436:	0983      	lsrs	r3, r0, #6
    b438:	428b      	cmp	r3, r1
    b43a:	d301      	bcc.n	b440 <__divsi3+0x160>
    b43c:	018b      	lsls	r3, r1, #6
    b43e:	1ac0      	subs	r0, r0, r3
    b440:	4152      	adcs	r2, r2
    b442:	0943      	lsrs	r3, r0, #5
    b444:	428b      	cmp	r3, r1
    b446:	d301      	bcc.n	b44c <__divsi3+0x16c>
    b448:	014b      	lsls	r3, r1, #5
    b44a:	1ac0      	subs	r0, r0, r3
    b44c:	4152      	adcs	r2, r2
    b44e:	0903      	lsrs	r3, r0, #4
    b450:	428b      	cmp	r3, r1
    b452:	d301      	bcc.n	b458 <__divsi3+0x178>
    b454:	010b      	lsls	r3, r1, #4
    b456:	1ac0      	subs	r0, r0, r3
    b458:	4152      	adcs	r2, r2
    b45a:	08c3      	lsrs	r3, r0, #3
    b45c:	428b      	cmp	r3, r1
    b45e:	d301      	bcc.n	b464 <__divsi3+0x184>
    b460:	00cb      	lsls	r3, r1, #3
    b462:	1ac0      	subs	r0, r0, r3
    b464:	4152      	adcs	r2, r2
    b466:	0883      	lsrs	r3, r0, #2
    b468:	428b      	cmp	r3, r1
    b46a:	d301      	bcc.n	b470 <__divsi3+0x190>
    b46c:	008b      	lsls	r3, r1, #2
    b46e:	1ac0      	subs	r0, r0, r3
    b470:	4152      	adcs	r2, r2
    b472:	d2d9      	bcs.n	b428 <__divsi3+0x148>
    b474:	0843      	lsrs	r3, r0, #1
    b476:	428b      	cmp	r3, r1
    b478:	d301      	bcc.n	b47e <__divsi3+0x19e>
    b47a:	004b      	lsls	r3, r1, #1
    b47c:	1ac0      	subs	r0, r0, r3
    b47e:	4152      	adcs	r2, r2
    b480:	1a41      	subs	r1, r0, r1
    b482:	d200      	bcs.n	b486 <__divsi3+0x1a6>
    b484:	4601      	mov	r1, r0
    b486:	4663      	mov	r3, ip
    b488:	4152      	adcs	r2, r2
    b48a:	105b      	asrs	r3, r3, #1
    b48c:	4610      	mov	r0, r2
    b48e:	d301      	bcc.n	b494 <__divsi3+0x1b4>
    b490:	4240      	negs	r0, r0
    b492:	2b00      	cmp	r3, #0
    b494:	d500      	bpl.n	b498 <__divsi3+0x1b8>
    b496:	4249      	negs	r1, r1
    b498:	4770      	bx	lr
    b49a:	4663      	mov	r3, ip
    b49c:	105b      	asrs	r3, r3, #1
    b49e:	d300      	bcc.n	b4a2 <__divsi3+0x1c2>
    b4a0:	4240      	negs	r0, r0
    b4a2:	b501      	push	{r0, lr}
    b4a4:	2000      	movs	r0, #0
    b4a6:	f000 f805 	bl	b4b4 <__aeabi_idiv0>
    b4aa:	bd02      	pop	{r1, pc}

0000b4ac <__aeabi_idivmod>:
    b4ac:	2900      	cmp	r1, #0
    b4ae:	d0f8      	beq.n	b4a2 <__divsi3+0x1c2>
    b4b0:	e716      	b.n	b2e0 <__divsi3>
    b4b2:	4770      	bx	lr

0000b4b4 <__aeabi_idiv0>:
    b4b4:	4770      	bx	lr
    b4b6:	46c0      	nop			; (mov r8, r8)

0000b4b8 <__aeabi_lmul>:
    b4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4ba:	46ce      	mov	lr, r9
    b4bc:	4647      	mov	r7, r8
    b4be:	0415      	lsls	r5, r2, #16
    b4c0:	0c2d      	lsrs	r5, r5, #16
    b4c2:	002e      	movs	r6, r5
    b4c4:	b580      	push	{r7, lr}
    b4c6:	0407      	lsls	r7, r0, #16
    b4c8:	0c14      	lsrs	r4, r2, #16
    b4ca:	0c3f      	lsrs	r7, r7, #16
    b4cc:	4699      	mov	r9, r3
    b4ce:	0c03      	lsrs	r3, r0, #16
    b4d0:	437e      	muls	r6, r7
    b4d2:	435d      	muls	r5, r3
    b4d4:	4367      	muls	r7, r4
    b4d6:	4363      	muls	r3, r4
    b4d8:	197f      	adds	r7, r7, r5
    b4da:	0c34      	lsrs	r4, r6, #16
    b4dc:	19e4      	adds	r4, r4, r7
    b4de:	469c      	mov	ip, r3
    b4e0:	42a5      	cmp	r5, r4
    b4e2:	d903      	bls.n	b4ec <__aeabi_lmul+0x34>
    b4e4:	2380      	movs	r3, #128	; 0x80
    b4e6:	025b      	lsls	r3, r3, #9
    b4e8:	4698      	mov	r8, r3
    b4ea:	44c4      	add	ip, r8
    b4ec:	464b      	mov	r3, r9
    b4ee:	4351      	muls	r1, r2
    b4f0:	4343      	muls	r3, r0
    b4f2:	0436      	lsls	r6, r6, #16
    b4f4:	0c36      	lsrs	r6, r6, #16
    b4f6:	0c25      	lsrs	r5, r4, #16
    b4f8:	0424      	lsls	r4, r4, #16
    b4fa:	4465      	add	r5, ip
    b4fc:	19a4      	adds	r4, r4, r6
    b4fe:	1859      	adds	r1, r3, r1
    b500:	1949      	adds	r1, r1, r5
    b502:	0020      	movs	r0, r4
    b504:	bc0c      	pop	{r2, r3}
    b506:	4690      	mov	r8, r2
    b508:	4699      	mov	r9, r3
    b50a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b50c <__libc_init_array>:
    b50c:	b570      	push	{r4, r5, r6, lr}
    b50e:	2600      	movs	r6, #0
    b510:	4d0c      	ldr	r5, [pc, #48]	; (b544 <__libc_init_array+0x38>)
    b512:	4c0d      	ldr	r4, [pc, #52]	; (b548 <__libc_init_array+0x3c>)
    b514:	1b64      	subs	r4, r4, r5
    b516:	10a4      	asrs	r4, r4, #2
    b518:	42a6      	cmp	r6, r4
    b51a:	d109      	bne.n	b530 <__libc_init_array+0x24>
    b51c:	2600      	movs	r6, #0
    b51e:	f001 fa2d 	bl	c97c <_init>
    b522:	4d0a      	ldr	r5, [pc, #40]	; (b54c <__libc_init_array+0x40>)
    b524:	4c0a      	ldr	r4, [pc, #40]	; (b550 <__libc_init_array+0x44>)
    b526:	1b64      	subs	r4, r4, r5
    b528:	10a4      	asrs	r4, r4, #2
    b52a:	42a6      	cmp	r6, r4
    b52c:	d105      	bne.n	b53a <__libc_init_array+0x2e>
    b52e:	bd70      	pop	{r4, r5, r6, pc}
    b530:	00b3      	lsls	r3, r6, #2
    b532:	58eb      	ldr	r3, [r5, r3]
    b534:	4798      	blx	r3
    b536:	3601      	adds	r6, #1
    b538:	e7ee      	b.n	b518 <__libc_init_array+0xc>
    b53a:	00b3      	lsls	r3, r6, #2
    b53c:	58eb      	ldr	r3, [r5, r3]
    b53e:	4798      	blx	r3
    b540:	3601      	adds	r6, #1
    b542:	e7f2      	b.n	b52a <__libc_init_array+0x1e>
    b544:	0000c988 	.word	0x0000c988
    b548:	0000c988 	.word	0x0000c988
    b54c:	0000c988 	.word	0x0000c988
    b550:	0000c98c 	.word	0x0000c98c

0000b554 <malloc>:
    b554:	b510      	push	{r4, lr}
    b556:	4b03      	ldr	r3, [pc, #12]	; (b564 <malloc+0x10>)
    b558:	0001      	movs	r1, r0
    b55a:	6818      	ldr	r0, [r3, #0]
    b55c:	f000 f860 	bl	b620 <_malloc_r>
    b560:	bd10      	pop	{r4, pc}
    b562:	46c0      	nop			; (mov r8, r8)
    b564:	20000030 	.word	0x20000030

0000b568 <memcpy>:
    b568:	2300      	movs	r3, #0
    b56a:	b510      	push	{r4, lr}
    b56c:	429a      	cmp	r2, r3
    b56e:	d100      	bne.n	b572 <memcpy+0xa>
    b570:	bd10      	pop	{r4, pc}
    b572:	5ccc      	ldrb	r4, [r1, r3]
    b574:	54c4      	strb	r4, [r0, r3]
    b576:	3301      	adds	r3, #1
    b578:	e7f8      	b.n	b56c <memcpy+0x4>

0000b57a <memset>:
    b57a:	0003      	movs	r3, r0
    b57c:	1882      	adds	r2, r0, r2
    b57e:	4293      	cmp	r3, r2
    b580:	d100      	bne.n	b584 <memset+0xa>
    b582:	4770      	bx	lr
    b584:	7019      	strb	r1, [r3, #0]
    b586:	3301      	adds	r3, #1
    b588:	e7f9      	b.n	b57e <memset+0x4>
	...

0000b58c <_free_r>:
    b58c:	b570      	push	{r4, r5, r6, lr}
    b58e:	0005      	movs	r5, r0
    b590:	2900      	cmp	r1, #0
    b592:	d010      	beq.n	b5b6 <_free_r+0x2a>
    b594:	1f0c      	subs	r4, r1, #4
    b596:	6823      	ldr	r3, [r4, #0]
    b598:	2b00      	cmp	r3, #0
    b59a:	da00      	bge.n	b59e <_free_r+0x12>
    b59c:	18e4      	adds	r4, r4, r3
    b59e:	0028      	movs	r0, r5
    b5a0:	f000 fb22 	bl	bbe8 <__malloc_lock>
    b5a4:	4a1d      	ldr	r2, [pc, #116]	; (b61c <_free_r+0x90>)
    b5a6:	6813      	ldr	r3, [r2, #0]
    b5a8:	2b00      	cmp	r3, #0
    b5aa:	d105      	bne.n	b5b8 <_free_r+0x2c>
    b5ac:	6063      	str	r3, [r4, #4]
    b5ae:	6014      	str	r4, [r2, #0]
    b5b0:	0028      	movs	r0, r5
    b5b2:	f000 fb1a 	bl	bbea <__malloc_unlock>
    b5b6:	bd70      	pop	{r4, r5, r6, pc}
    b5b8:	42a3      	cmp	r3, r4
    b5ba:	d909      	bls.n	b5d0 <_free_r+0x44>
    b5bc:	6821      	ldr	r1, [r4, #0]
    b5be:	1860      	adds	r0, r4, r1
    b5c0:	4283      	cmp	r3, r0
    b5c2:	d1f3      	bne.n	b5ac <_free_r+0x20>
    b5c4:	6818      	ldr	r0, [r3, #0]
    b5c6:	685b      	ldr	r3, [r3, #4]
    b5c8:	1841      	adds	r1, r0, r1
    b5ca:	6021      	str	r1, [r4, #0]
    b5cc:	e7ee      	b.n	b5ac <_free_r+0x20>
    b5ce:	0013      	movs	r3, r2
    b5d0:	685a      	ldr	r2, [r3, #4]
    b5d2:	2a00      	cmp	r2, #0
    b5d4:	d001      	beq.n	b5da <_free_r+0x4e>
    b5d6:	42a2      	cmp	r2, r4
    b5d8:	d9f9      	bls.n	b5ce <_free_r+0x42>
    b5da:	6819      	ldr	r1, [r3, #0]
    b5dc:	1858      	adds	r0, r3, r1
    b5de:	42a0      	cmp	r0, r4
    b5e0:	d10b      	bne.n	b5fa <_free_r+0x6e>
    b5e2:	6820      	ldr	r0, [r4, #0]
    b5e4:	1809      	adds	r1, r1, r0
    b5e6:	1858      	adds	r0, r3, r1
    b5e8:	6019      	str	r1, [r3, #0]
    b5ea:	4282      	cmp	r2, r0
    b5ec:	d1e0      	bne.n	b5b0 <_free_r+0x24>
    b5ee:	6810      	ldr	r0, [r2, #0]
    b5f0:	6852      	ldr	r2, [r2, #4]
    b5f2:	1841      	adds	r1, r0, r1
    b5f4:	6019      	str	r1, [r3, #0]
    b5f6:	605a      	str	r2, [r3, #4]
    b5f8:	e7da      	b.n	b5b0 <_free_r+0x24>
    b5fa:	42a0      	cmp	r0, r4
    b5fc:	d902      	bls.n	b604 <_free_r+0x78>
    b5fe:	230c      	movs	r3, #12
    b600:	602b      	str	r3, [r5, #0]
    b602:	e7d5      	b.n	b5b0 <_free_r+0x24>
    b604:	6821      	ldr	r1, [r4, #0]
    b606:	1860      	adds	r0, r4, r1
    b608:	4282      	cmp	r2, r0
    b60a:	d103      	bne.n	b614 <_free_r+0x88>
    b60c:	6810      	ldr	r0, [r2, #0]
    b60e:	6852      	ldr	r2, [r2, #4]
    b610:	1841      	adds	r1, r0, r1
    b612:	6021      	str	r1, [r4, #0]
    b614:	6062      	str	r2, [r4, #4]
    b616:	605c      	str	r4, [r3, #4]
    b618:	e7ca      	b.n	b5b0 <_free_r+0x24>
    b61a:	46c0      	nop			; (mov r8, r8)
    b61c:	20000184 	.word	0x20000184

0000b620 <_malloc_r>:
    b620:	2303      	movs	r3, #3
    b622:	b570      	push	{r4, r5, r6, lr}
    b624:	1ccd      	adds	r5, r1, #3
    b626:	439d      	bics	r5, r3
    b628:	3508      	adds	r5, #8
    b62a:	0006      	movs	r6, r0
    b62c:	2d0c      	cmp	r5, #12
    b62e:	d21e      	bcs.n	b66e <_malloc_r+0x4e>
    b630:	250c      	movs	r5, #12
    b632:	42a9      	cmp	r1, r5
    b634:	d81d      	bhi.n	b672 <_malloc_r+0x52>
    b636:	0030      	movs	r0, r6
    b638:	f000 fad6 	bl	bbe8 <__malloc_lock>
    b63c:	4a25      	ldr	r2, [pc, #148]	; (b6d4 <_malloc_r+0xb4>)
    b63e:	6814      	ldr	r4, [r2, #0]
    b640:	0021      	movs	r1, r4
    b642:	2900      	cmp	r1, #0
    b644:	d119      	bne.n	b67a <_malloc_r+0x5a>
    b646:	4c24      	ldr	r4, [pc, #144]	; (b6d8 <_malloc_r+0xb8>)
    b648:	6823      	ldr	r3, [r4, #0]
    b64a:	2b00      	cmp	r3, #0
    b64c:	d103      	bne.n	b656 <_malloc_r+0x36>
    b64e:	0030      	movs	r0, r6
    b650:	f000 f844 	bl	b6dc <_sbrk_r>
    b654:	6020      	str	r0, [r4, #0]
    b656:	0029      	movs	r1, r5
    b658:	0030      	movs	r0, r6
    b65a:	f000 f83f 	bl	b6dc <_sbrk_r>
    b65e:	1c43      	adds	r3, r0, #1
    b660:	d12c      	bne.n	b6bc <_malloc_r+0x9c>
    b662:	230c      	movs	r3, #12
    b664:	0030      	movs	r0, r6
    b666:	6033      	str	r3, [r6, #0]
    b668:	f000 fabf 	bl	bbea <__malloc_unlock>
    b66c:	e003      	b.n	b676 <_malloc_r+0x56>
    b66e:	2d00      	cmp	r5, #0
    b670:	dadf      	bge.n	b632 <_malloc_r+0x12>
    b672:	230c      	movs	r3, #12
    b674:	6033      	str	r3, [r6, #0]
    b676:	2000      	movs	r0, #0
    b678:	bd70      	pop	{r4, r5, r6, pc}
    b67a:	680b      	ldr	r3, [r1, #0]
    b67c:	1b5b      	subs	r3, r3, r5
    b67e:	d41a      	bmi.n	b6b6 <_malloc_r+0x96>
    b680:	2b0b      	cmp	r3, #11
    b682:	d903      	bls.n	b68c <_malloc_r+0x6c>
    b684:	600b      	str	r3, [r1, #0]
    b686:	18cc      	adds	r4, r1, r3
    b688:	6025      	str	r5, [r4, #0]
    b68a:	e003      	b.n	b694 <_malloc_r+0x74>
    b68c:	428c      	cmp	r4, r1
    b68e:	d10e      	bne.n	b6ae <_malloc_r+0x8e>
    b690:	6863      	ldr	r3, [r4, #4]
    b692:	6013      	str	r3, [r2, #0]
    b694:	0030      	movs	r0, r6
    b696:	f000 faa8 	bl	bbea <__malloc_unlock>
    b69a:	0020      	movs	r0, r4
    b69c:	2207      	movs	r2, #7
    b69e:	300b      	adds	r0, #11
    b6a0:	1d23      	adds	r3, r4, #4
    b6a2:	4390      	bics	r0, r2
    b6a4:	1ac3      	subs	r3, r0, r3
    b6a6:	d0e7      	beq.n	b678 <_malloc_r+0x58>
    b6a8:	425a      	negs	r2, r3
    b6aa:	50e2      	str	r2, [r4, r3]
    b6ac:	e7e4      	b.n	b678 <_malloc_r+0x58>
    b6ae:	684b      	ldr	r3, [r1, #4]
    b6b0:	6063      	str	r3, [r4, #4]
    b6b2:	000c      	movs	r4, r1
    b6b4:	e7ee      	b.n	b694 <_malloc_r+0x74>
    b6b6:	000c      	movs	r4, r1
    b6b8:	6849      	ldr	r1, [r1, #4]
    b6ba:	e7c2      	b.n	b642 <_malloc_r+0x22>
    b6bc:	2303      	movs	r3, #3
    b6be:	1cc4      	adds	r4, r0, #3
    b6c0:	439c      	bics	r4, r3
    b6c2:	42a0      	cmp	r0, r4
    b6c4:	d0e0      	beq.n	b688 <_malloc_r+0x68>
    b6c6:	1a21      	subs	r1, r4, r0
    b6c8:	0030      	movs	r0, r6
    b6ca:	f000 f807 	bl	b6dc <_sbrk_r>
    b6ce:	1c43      	adds	r3, r0, #1
    b6d0:	d1da      	bne.n	b688 <_malloc_r+0x68>
    b6d2:	e7c6      	b.n	b662 <_malloc_r+0x42>
    b6d4:	20000184 	.word	0x20000184
    b6d8:	20000188 	.word	0x20000188

0000b6dc <_sbrk_r>:
    b6dc:	2300      	movs	r3, #0
    b6de:	b570      	push	{r4, r5, r6, lr}
    b6e0:	4c06      	ldr	r4, [pc, #24]	; (b6fc <_sbrk_r+0x20>)
    b6e2:	0005      	movs	r5, r0
    b6e4:	0008      	movs	r0, r1
    b6e6:	6023      	str	r3, [r4, #0]
    b6e8:	f7fb fb26 	bl	6d38 <_sbrk>
    b6ec:	1c43      	adds	r3, r0, #1
    b6ee:	d103      	bne.n	b6f8 <_sbrk_r+0x1c>
    b6f0:	6823      	ldr	r3, [r4, #0]
    b6f2:	2b00      	cmp	r3, #0
    b6f4:	d000      	beq.n	b6f8 <_sbrk_r+0x1c>
    b6f6:	602b      	str	r3, [r5, #0]
    b6f8:	bd70      	pop	{r4, r5, r6, pc}
    b6fa:	46c0      	nop			; (mov r8, r8)
    b6fc:	20000c90 	.word	0x20000c90

0000b700 <setbuf>:
    b700:	424a      	negs	r2, r1
    b702:	414a      	adcs	r2, r1
    b704:	2380      	movs	r3, #128	; 0x80
    b706:	b510      	push	{r4, lr}
    b708:	0052      	lsls	r2, r2, #1
    b70a:	00db      	lsls	r3, r3, #3
    b70c:	f000 f802 	bl	b714 <setvbuf>
    b710:	bd10      	pop	{r4, pc}
	...

0000b714 <setvbuf>:
    b714:	b5f0      	push	{r4, r5, r6, r7, lr}
    b716:	001d      	movs	r5, r3
    b718:	4b4f      	ldr	r3, [pc, #316]	; (b858 <setvbuf+0x144>)
    b71a:	b085      	sub	sp, #20
    b71c:	681e      	ldr	r6, [r3, #0]
    b71e:	0004      	movs	r4, r0
    b720:	000f      	movs	r7, r1
    b722:	9200      	str	r2, [sp, #0]
    b724:	2e00      	cmp	r6, #0
    b726:	d005      	beq.n	b734 <setvbuf+0x20>
    b728:	69b3      	ldr	r3, [r6, #24]
    b72a:	2b00      	cmp	r3, #0
    b72c:	d102      	bne.n	b734 <setvbuf+0x20>
    b72e:	0030      	movs	r0, r6
    b730:	f000 f99c 	bl	ba6c <__sinit>
    b734:	4b49      	ldr	r3, [pc, #292]	; (b85c <setvbuf+0x148>)
    b736:	429c      	cmp	r4, r3
    b738:	d150      	bne.n	b7dc <setvbuf+0xc8>
    b73a:	6874      	ldr	r4, [r6, #4]
    b73c:	9b00      	ldr	r3, [sp, #0]
    b73e:	2b02      	cmp	r3, #2
    b740:	d005      	beq.n	b74e <setvbuf+0x3a>
    b742:	2b01      	cmp	r3, #1
    b744:	d900      	bls.n	b748 <setvbuf+0x34>
    b746:	e084      	b.n	b852 <setvbuf+0x13e>
    b748:	2d00      	cmp	r5, #0
    b74a:	da00      	bge.n	b74e <setvbuf+0x3a>
    b74c:	e081      	b.n	b852 <setvbuf+0x13e>
    b74e:	0021      	movs	r1, r4
    b750:	0030      	movs	r0, r6
    b752:	f000 f91d 	bl	b990 <_fflush_r>
    b756:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b758:	2900      	cmp	r1, #0
    b75a:	d008      	beq.n	b76e <setvbuf+0x5a>
    b75c:	0023      	movs	r3, r4
    b75e:	3344      	adds	r3, #68	; 0x44
    b760:	4299      	cmp	r1, r3
    b762:	d002      	beq.n	b76a <setvbuf+0x56>
    b764:	0030      	movs	r0, r6
    b766:	f7ff ff11 	bl	b58c <_free_r>
    b76a:	2300      	movs	r3, #0
    b76c:	6363      	str	r3, [r4, #52]	; 0x34
    b76e:	2300      	movs	r3, #0
    b770:	61a3      	str	r3, [r4, #24]
    b772:	6063      	str	r3, [r4, #4]
    b774:	89a3      	ldrh	r3, [r4, #12]
    b776:	061b      	lsls	r3, r3, #24
    b778:	d503      	bpl.n	b782 <setvbuf+0x6e>
    b77a:	6921      	ldr	r1, [r4, #16]
    b77c:	0030      	movs	r0, r6
    b77e:	f7ff ff05 	bl	b58c <_free_r>
    b782:	89a3      	ldrh	r3, [r4, #12]
    b784:	4a36      	ldr	r2, [pc, #216]	; (b860 <setvbuf+0x14c>)
    b786:	4013      	ands	r3, r2
    b788:	81a3      	strh	r3, [r4, #12]
    b78a:	9b00      	ldr	r3, [sp, #0]
    b78c:	2b02      	cmp	r3, #2
    b78e:	d05a      	beq.n	b846 <setvbuf+0x132>
    b790:	ab03      	add	r3, sp, #12
    b792:	aa02      	add	r2, sp, #8
    b794:	0021      	movs	r1, r4
    b796:	0030      	movs	r0, r6
    b798:	f000 f9fe 	bl	bb98 <__swhatbuf_r>
    b79c:	89a3      	ldrh	r3, [r4, #12]
    b79e:	4318      	orrs	r0, r3
    b7a0:	81a0      	strh	r0, [r4, #12]
    b7a2:	2d00      	cmp	r5, #0
    b7a4:	d124      	bne.n	b7f0 <setvbuf+0xdc>
    b7a6:	9d02      	ldr	r5, [sp, #8]
    b7a8:	0028      	movs	r0, r5
    b7aa:	f7ff fed3 	bl	b554 <malloc>
    b7ae:	9501      	str	r5, [sp, #4]
    b7b0:	1e07      	subs	r7, r0, #0
    b7b2:	d142      	bne.n	b83a <setvbuf+0x126>
    b7b4:	9b02      	ldr	r3, [sp, #8]
    b7b6:	9301      	str	r3, [sp, #4]
    b7b8:	42ab      	cmp	r3, r5
    b7ba:	d139      	bne.n	b830 <setvbuf+0x11c>
    b7bc:	2001      	movs	r0, #1
    b7be:	4240      	negs	r0, r0
    b7c0:	2302      	movs	r3, #2
    b7c2:	89a2      	ldrh	r2, [r4, #12]
    b7c4:	4313      	orrs	r3, r2
    b7c6:	81a3      	strh	r3, [r4, #12]
    b7c8:	2300      	movs	r3, #0
    b7ca:	60a3      	str	r3, [r4, #8]
    b7cc:	0023      	movs	r3, r4
    b7ce:	3347      	adds	r3, #71	; 0x47
    b7d0:	6023      	str	r3, [r4, #0]
    b7d2:	6123      	str	r3, [r4, #16]
    b7d4:	2301      	movs	r3, #1
    b7d6:	6163      	str	r3, [r4, #20]
    b7d8:	b005      	add	sp, #20
    b7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b7dc:	4b21      	ldr	r3, [pc, #132]	; (b864 <setvbuf+0x150>)
    b7de:	429c      	cmp	r4, r3
    b7e0:	d101      	bne.n	b7e6 <setvbuf+0xd2>
    b7e2:	68b4      	ldr	r4, [r6, #8]
    b7e4:	e7aa      	b.n	b73c <setvbuf+0x28>
    b7e6:	4b20      	ldr	r3, [pc, #128]	; (b868 <setvbuf+0x154>)
    b7e8:	429c      	cmp	r4, r3
    b7ea:	d1a7      	bne.n	b73c <setvbuf+0x28>
    b7ec:	68f4      	ldr	r4, [r6, #12]
    b7ee:	e7a5      	b.n	b73c <setvbuf+0x28>
    b7f0:	2f00      	cmp	r7, #0
    b7f2:	d0d9      	beq.n	b7a8 <setvbuf+0x94>
    b7f4:	69b3      	ldr	r3, [r6, #24]
    b7f6:	2b00      	cmp	r3, #0
    b7f8:	d102      	bne.n	b800 <setvbuf+0xec>
    b7fa:	0030      	movs	r0, r6
    b7fc:	f000 f936 	bl	ba6c <__sinit>
    b800:	9b00      	ldr	r3, [sp, #0]
    b802:	2b01      	cmp	r3, #1
    b804:	d103      	bne.n	b80e <setvbuf+0xfa>
    b806:	89a3      	ldrh	r3, [r4, #12]
    b808:	9a00      	ldr	r2, [sp, #0]
    b80a:	431a      	orrs	r2, r3
    b80c:	81a2      	strh	r2, [r4, #12]
    b80e:	2008      	movs	r0, #8
    b810:	89a3      	ldrh	r3, [r4, #12]
    b812:	6027      	str	r7, [r4, #0]
    b814:	6127      	str	r7, [r4, #16]
    b816:	6165      	str	r5, [r4, #20]
    b818:	4018      	ands	r0, r3
    b81a:	d018      	beq.n	b84e <setvbuf+0x13a>
    b81c:	2001      	movs	r0, #1
    b81e:	4018      	ands	r0, r3
    b820:	2300      	movs	r3, #0
    b822:	4298      	cmp	r0, r3
    b824:	d011      	beq.n	b84a <setvbuf+0x136>
    b826:	426d      	negs	r5, r5
    b828:	60a3      	str	r3, [r4, #8]
    b82a:	61a5      	str	r5, [r4, #24]
    b82c:	0018      	movs	r0, r3
    b82e:	e7d3      	b.n	b7d8 <setvbuf+0xc4>
    b830:	9801      	ldr	r0, [sp, #4]
    b832:	f7ff fe8f 	bl	b554 <malloc>
    b836:	1e07      	subs	r7, r0, #0
    b838:	d0c0      	beq.n	b7bc <setvbuf+0xa8>
    b83a:	2380      	movs	r3, #128	; 0x80
    b83c:	89a2      	ldrh	r2, [r4, #12]
    b83e:	9d01      	ldr	r5, [sp, #4]
    b840:	4313      	orrs	r3, r2
    b842:	81a3      	strh	r3, [r4, #12]
    b844:	e7d6      	b.n	b7f4 <setvbuf+0xe0>
    b846:	2000      	movs	r0, #0
    b848:	e7ba      	b.n	b7c0 <setvbuf+0xac>
    b84a:	60a5      	str	r5, [r4, #8]
    b84c:	e7c4      	b.n	b7d8 <setvbuf+0xc4>
    b84e:	60a0      	str	r0, [r4, #8]
    b850:	e7c2      	b.n	b7d8 <setvbuf+0xc4>
    b852:	2001      	movs	r0, #1
    b854:	4240      	negs	r0, r0
    b856:	e7bf      	b.n	b7d8 <setvbuf+0xc4>
    b858:	20000030 	.word	0x20000030
    b85c:	0000c93c 	.word	0x0000c93c
    b860:	fffff35c 	.word	0xfffff35c
    b864:	0000c95c 	.word	0x0000c95c
    b868:	0000c91c 	.word	0x0000c91c

0000b86c <strlen>:
    b86c:	2300      	movs	r3, #0
    b86e:	5cc2      	ldrb	r2, [r0, r3]
    b870:	3301      	adds	r3, #1
    b872:	2a00      	cmp	r2, #0
    b874:	d1fb      	bne.n	b86e <strlen+0x2>
    b876:	1e58      	subs	r0, r3, #1
    b878:	4770      	bx	lr
	...

0000b87c <__sflush_r>:
    b87c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b87e:	898a      	ldrh	r2, [r1, #12]
    b880:	0005      	movs	r5, r0
    b882:	000c      	movs	r4, r1
    b884:	0713      	lsls	r3, r2, #28
    b886:	d460      	bmi.n	b94a <__sflush_r+0xce>
    b888:	684b      	ldr	r3, [r1, #4]
    b88a:	2b00      	cmp	r3, #0
    b88c:	dc04      	bgt.n	b898 <__sflush_r+0x1c>
    b88e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    b890:	2b00      	cmp	r3, #0
    b892:	dc01      	bgt.n	b898 <__sflush_r+0x1c>
    b894:	2000      	movs	r0, #0
    b896:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b898:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    b89a:	2f00      	cmp	r7, #0
    b89c:	d0fa      	beq.n	b894 <__sflush_r+0x18>
    b89e:	2300      	movs	r3, #0
    b8a0:	682e      	ldr	r6, [r5, #0]
    b8a2:	602b      	str	r3, [r5, #0]
    b8a4:	2380      	movs	r3, #128	; 0x80
    b8a6:	015b      	lsls	r3, r3, #5
    b8a8:	401a      	ands	r2, r3
    b8aa:	d034      	beq.n	b916 <__sflush_r+0x9a>
    b8ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
    b8ae:	89a3      	ldrh	r3, [r4, #12]
    b8b0:	075b      	lsls	r3, r3, #29
    b8b2:	d506      	bpl.n	b8c2 <__sflush_r+0x46>
    b8b4:	6863      	ldr	r3, [r4, #4]
    b8b6:	1ac0      	subs	r0, r0, r3
    b8b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b8ba:	2b00      	cmp	r3, #0
    b8bc:	d001      	beq.n	b8c2 <__sflush_r+0x46>
    b8be:	6c23      	ldr	r3, [r4, #64]	; 0x40
    b8c0:	1ac0      	subs	r0, r0, r3
    b8c2:	0002      	movs	r2, r0
    b8c4:	6a21      	ldr	r1, [r4, #32]
    b8c6:	2300      	movs	r3, #0
    b8c8:	0028      	movs	r0, r5
    b8ca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    b8cc:	47b8      	blx	r7
    b8ce:	89a1      	ldrh	r1, [r4, #12]
    b8d0:	1c43      	adds	r3, r0, #1
    b8d2:	d106      	bne.n	b8e2 <__sflush_r+0x66>
    b8d4:	682b      	ldr	r3, [r5, #0]
    b8d6:	2b1d      	cmp	r3, #29
    b8d8:	d831      	bhi.n	b93e <__sflush_r+0xc2>
    b8da:	4a2c      	ldr	r2, [pc, #176]	; (b98c <__sflush_r+0x110>)
    b8dc:	40da      	lsrs	r2, r3
    b8de:	07d3      	lsls	r3, r2, #31
    b8e0:	d52d      	bpl.n	b93e <__sflush_r+0xc2>
    b8e2:	2300      	movs	r3, #0
    b8e4:	6063      	str	r3, [r4, #4]
    b8e6:	6923      	ldr	r3, [r4, #16]
    b8e8:	6023      	str	r3, [r4, #0]
    b8ea:	04cb      	lsls	r3, r1, #19
    b8ec:	d505      	bpl.n	b8fa <__sflush_r+0x7e>
    b8ee:	1c43      	adds	r3, r0, #1
    b8f0:	d102      	bne.n	b8f8 <__sflush_r+0x7c>
    b8f2:	682b      	ldr	r3, [r5, #0]
    b8f4:	2b00      	cmp	r3, #0
    b8f6:	d100      	bne.n	b8fa <__sflush_r+0x7e>
    b8f8:	6560      	str	r0, [r4, #84]	; 0x54
    b8fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b8fc:	602e      	str	r6, [r5, #0]
    b8fe:	2900      	cmp	r1, #0
    b900:	d0c8      	beq.n	b894 <__sflush_r+0x18>
    b902:	0023      	movs	r3, r4
    b904:	3344      	adds	r3, #68	; 0x44
    b906:	4299      	cmp	r1, r3
    b908:	d002      	beq.n	b910 <__sflush_r+0x94>
    b90a:	0028      	movs	r0, r5
    b90c:	f7ff fe3e 	bl	b58c <_free_r>
    b910:	2000      	movs	r0, #0
    b912:	6360      	str	r0, [r4, #52]	; 0x34
    b914:	e7bf      	b.n	b896 <__sflush_r+0x1a>
    b916:	2301      	movs	r3, #1
    b918:	6a21      	ldr	r1, [r4, #32]
    b91a:	0028      	movs	r0, r5
    b91c:	47b8      	blx	r7
    b91e:	1c43      	adds	r3, r0, #1
    b920:	d1c5      	bne.n	b8ae <__sflush_r+0x32>
    b922:	682b      	ldr	r3, [r5, #0]
    b924:	2b00      	cmp	r3, #0
    b926:	d0c2      	beq.n	b8ae <__sflush_r+0x32>
    b928:	2b1d      	cmp	r3, #29
    b92a:	d001      	beq.n	b930 <__sflush_r+0xb4>
    b92c:	2b16      	cmp	r3, #22
    b92e:	d101      	bne.n	b934 <__sflush_r+0xb8>
    b930:	602e      	str	r6, [r5, #0]
    b932:	e7af      	b.n	b894 <__sflush_r+0x18>
    b934:	2340      	movs	r3, #64	; 0x40
    b936:	89a2      	ldrh	r2, [r4, #12]
    b938:	4313      	orrs	r3, r2
    b93a:	81a3      	strh	r3, [r4, #12]
    b93c:	e7ab      	b.n	b896 <__sflush_r+0x1a>
    b93e:	2340      	movs	r3, #64	; 0x40
    b940:	430b      	orrs	r3, r1
    b942:	2001      	movs	r0, #1
    b944:	81a3      	strh	r3, [r4, #12]
    b946:	4240      	negs	r0, r0
    b948:	e7a5      	b.n	b896 <__sflush_r+0x1a>
    b94a:	690f      	ldr	r7, [r1, #16]
    b94c:	2f00      	cmp	r7, #0
    b94e:	d0a1      	beq.n	b894 <__sflush_r+0x18>
    b950:	680b      	ldr	r3, [r1, #0]
    b952:	600f      	str	r7, [r1, #0]
    b954:	1bdb      	subs	r3, r3, r7
    b956:	9301      	str	r3, [sp, #4]
    b958:	2300      	movs	r3, #0
    b95a:	0792      	lsls	r2, r2, #30
    b95c:	d100      	bne.n	b960 <__sflush_r+0xe4>
    b95e:	694b      	ldr	r3, [r1, #20]
    b960:	60a3      	str	r3, [r4, #8]
    b962:	9b01      	ldr	r3, [sp, #4]
    b964:	2b00      	cmp	r3, #0
    b966:	dc00      	bgt.n	b96a <__sflush_r+0xee>
    b968:	e794      	b.n	b894 <__sflush_r+0x18>
    b96a:	9b01      	ldr	r3, [sp, #4]
    b96c:	003a      	movs	r2, r7
    b96e:	6a21      	ldr	r1, [r4, #32]
    b970:	0028      	movs	r0, r5
    b972:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    b974:	47b0      	blx	r6
    b976:	2800      	cmp	r0, #0
    b978:	dc03      	bgt.n	b982 <__sflush_r+0x106>
    b97a:	2340      	movs	r3, #64	; 0x40
    b97c:	89a2      	ldrh	r2, [r4, #12]
    b97e:	4313      	orrs	r3, r2
    b980:	e7df      	b.n	b942 <__sflush_r+0xc6>
    b982:	9b01      	ldr	r3, [sp, #4]
    b984:	183f      	adds	r7, r7, r0
    b986:	1a1b      	subs	r3, r3, r0
    b988:	9301      	str	r3, [sp, #4]
    b98a:	e7ea      	b.n	b962 <__sflush_r+0xe6>
    b98c:	20400001 	.word	0x20400001

0000b990 <_fflush_r>:
    b990:	690b      	ldr	r3, [r1, #16]
    b992:	b570      	push	{r4, r5, r6, lr}
    b994:	0005      	movs	r5, r0
    b996:	000c      	movs	r4, r1
    b998:	2b00      	cmp	r3, #0
    b99a:	d101      	bne.n	b9a0 <_fflush_r+0x10>
    b99c:	2000      	movs	r0, #0
    b99e:	bd70      	pop	{r4, r5, r6, pc}
    b9a0:	2800      	cmp	r0, #0
    b9a2:	d004      	beq.n	b9ae <_fflush_r+0x1e>
    b9a4:	6983      	ldr	r3, [r0, #24]
    b9a6:	2b00      	cmp	r3, #0
    b9a8:	d101      	bne.n	b9ae <_fflush_r+0x1e>
    b9aa:	f000 f85f 	bl	ba6c <__sinit>
    b9ae:	4b0b      	ldr	r3, [pc, #44]	; (b9dc <_fflush_r+0x4c>)
    b9b0:	429c      	cmp	r4, r3
    b9b2:	d109      	bne.n	b9c8 <_fflush_r+0x38>
    b9b4:	686c      	ldr	r4, [r5, #4]
    b9b6:	220c      	movs	r2, #12
    b9b8:	5ea3      	ldrsh	r3, [r4, r2]
    b9ba:	2b00      	cmp	r3, #0
    b9bc:	d0ee      	beq.n	b99c <_fflush_r+0xc>
    b9be:	0021      	movs	r1, r4
    b9c0:	0028      	movs	r0, r5
    b9c2:	f7ff ff5b 	bl	b87c <__sflush_r>
    b9c6:	e7ea      	b.n	b99e <_fflush_r+0xe>
    b9c8:	4b05      	ldr	r3, [pc, #20]	; (b9e0 <_fflush_r+0x50>)
    b9ca:	429c      	cmp	r4, r3
    b9cc:	d101      	bne.n	b9d2 <_fflush_r+0x42>
    b9ce:	68ac      	ldr	r4, [r5, #8]
    b9d0:	e7f1      	b.n	b9b6 <_fflush_r+0x26>
    b9d2:	4b04      	ldr	r3, [pc, #16]	; (b9e4 <_fflush_r+0x54>)
    b9d4:	429c      	cmp	r4, r3
    b9d6:	d1ee      	bne.n	b9b6 <_fflush_r+0x26>
    b9d8:	68ec      	ldr	r4, [r5, #12]
    b9da:	e7ec      	b.n	b9b6 <_fflush_r+0x26>
    b9dc:	0000c93c 	.word	0x0000c93c
    b9e0:	0000c95c 	.word	0x0000c95c
    b9e4:	0000c91c 	.word	0x0000c91c

0000b9e8 <_cleanup_r>:
    b9e8:	b510      	push	{r4, lr}
    b9ea:	4902      	ldr	r1, [pc, #8]	; (b9f4 <_cleanup_r+0xc>)
    b9ec:	f000 f8b2 	bl	bb54 <_fwalk_reent>
    b9f0:	bd10      	pop	{r4, pc}
    b9f2:	46c0      	nop			; (mov r8, r8)
    b9f4:	0000b991 	.word	0x0000b991

0000b9f8 <std.isra.0>:
    b9f8:	2300      	movs	r3, #0
    b9fa:	b510      	push	{r4, lr}
    b9fc:	0004      	movs	r4, r0
    b9fe:	6003      	str	r3, [r0, #0]
    ba00:	6043      	str	r3, [r0, #4]
    ba02:	6083      	str	r3, [r0, #8]
    ba04:	8181      	strh	r1, [r0, #12]
    ba06:	6643      	str	r3, [r0, #100]	; 0x64
    ba08:	81c2      	strh	r2, [r0, #14]
    ba0a:	6103      	str	r3, [r0, #16]
    ba0c:	6143      	str	r3, [r0, #20]
    ba0e:	6183      	str	r3, [r0, #24]
    ba10:	0019      	movs	r1, r3
    ba12:	2208      	movs	r2, #8
    ba14:	305c      	adds	r0, #92	; 0x5c
    ba16:	f7ff fdb0 	bl	b57a <memset>
    ba1a:	4b05      	ldr	r3, [pc, #20]	; (ba30 <std.isra.0+0x38>)
    ba1c:	6224      	str	r4, [r4, #32]
    ba1e:	6263      	str	r3, [r4, #36]	; 0x24
    ba20:	4b04      	ldr	r3, [pc, #16]	; (ba34 <std.isra.0+0x3c>)
    ba22:	62a3      	str	r3, [r4, #40]	; 0x28
    ba24:	4b04      	ldr	r3, [pc, #16]	; (ba38 <std.isra.0+0x40>)
    ba26:	62e3      	str	r3, [r4, #44]	; 0x2c
    ba28:	4b04      	ldr	r3, [pc, #16]	; (ba3c <std.isra.0+0x44>)
    ba2a:	6323      	str	r3, [r4, #48]	; 0x30
    ba2c:	bd10      	pop	{r4, pc}
    ba2e:	46c0      	nop			; (mov r8, r8)
    ba30:	0000bbed 	.word	0x0000bbed
    ba34:	0000bc15 	.word	0x0000bc15
    ba38:	0000bc4d 	.word	0x0000bc4d
    ba3c:	0000bc79 	.word	0x0000bc79

0000ba40 <__sfmoreglue>:
    ba40:	b570      	push	{r4, r5, r6, lr}
    ba42:	2568      	movs	r5, #104	; 0x68
    ba44:	1e4a      	subs	r2, r1, #1
    ba46:	4355      	muls	r5, r2
    ba48:	000e      	movs	r6, r1
    ba4a:	0029      	movs	r1, r5
    ba4c:	3174      	adds	r1, #116	; 0x74
    ba4e:	f7ff fde7 	bl	b620 <_malloc_r>
    ba52:	1e04      	subs	r4, r0, #0
    ba54:	d008      	beq.n	ba68 <__sfmoreglue+0x28>
    ba56:	2100      	movs	r1, #0
    ba58:	002a      	movs	r2, r5
    ba5a:	6001      	str	r1, [r0, #0]
    ba5c:	6046      	str	r6, [r0, #4]
    ba5e:	300c      	adds	r0, #12
    ba60:	60a0      	str	r0, [r4, #8]
    ba62:	3268      	adds	r2, #104	; 0x68
    ba64:	f7ff fd89 	bl	b57a <memset>
    ba68:	0020      	movs	r0, r4
    ba6a:	bd70      	pop	{r4, r5, r6, pc}

0000ba6c <__sinit>:
    ba6c:	6983      	ldr	r3, [r0, #24]
    ba6e:	b513      	push	{r0, r1, r4, lr}
    ba70:	0004      	movs	r4, r0
    ba72:	2b00      	cmp	r3, #0
    ba74:	d128      	bne.n	bac8 <__sinit+0x5c>
    ba76:	6483      	str	r3, [r0, #72]	; 0x48
    ba78:	64c3      	str	r3, [r0, #76]	; 0x4c
    ba7a:	6503      	str	r3, [r0, #80]	; 0x50
    ba7c:	4b13      	ldr	r3, [pc, #76]	; (bacc <__sinit+0x60>)
    ba7e:	4a14      	ldr	r2, [pc, #80]	; (bad0 <__sinit+0x64>)
    ba80:	681b      	ldr	r3, [r3, #0]
    ba82:	6282      	str	r2, [r0, #40]	; 0x28
    ba84:	9301      	str	r3, [sp, #4]
    ba86:	4298      	cmp	r0, r3
    ba88:	d101      	bne.n	ba8e <__sinit+0x22>
    ba8a:	2301      	movs	r3, #1
    ba8c:	6183      	str	r3, [r0, #24]
    ba8e:	0020      	movs	r0, r4
    ba90:	f000 f820 	bl	bad4 <__sfp>
    ba94:	6060      	str	r0, [r4, #4]
    ba96:	0020      	movs	r0, r4
    ba98:	f000 f81c 	bl	bad4 <__sfp>
    ba9c:	60a0      	str	r0, [r4, #8]
    ba9e:	0020      	movs	r0, r4
    baa0:	f000 f818 	bl	bad4 <__sfp>
    baa4:	2200      	movs	r2, #0
    baa6:	60e0      	str	r0, [r4, #12]
    baa8:	2104      	movs	r1, #4
    baaa:	6860      	ldr	r0, [r4, #4]
    baac:	f7ff ffa4 	bl	b9f8 <std.isra.0>
    bab0:	2201      	movs	r2, #1
    bab2:	2109      	movs	r1, #9
    bab4:	68a0      	ldr	r0, [r4, #8]
    bab6:	f7ff ff9f 	bl	b9f8 <std.isra.0>
    baba:	2202      	movs	r2, #2
    babc:	2112      	movs	r1, #18
    babe:	68e0      	ldr	r0, [r4, #12]
    bac0:	f7ff ff9a 	bl	b9f8 <std.isra.0>
    bac4:	2301      	movs	r3, #1
    bac6:	61a3      	str	r3, [r4, #24]
    bac8:	bd13      	pop	{r0, r1, r4, pc}
    baca:	46c0      	nop			; (mov r8, r8)
    bacc:	0000c918 	.word	0x0000c918
    bad0:	0000b9e9 	.word	0x0000b9e9

0000bad4 <__sfp>:
    bad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bad6:	4b1e      	ldr	r3, [pc, #120]	; (bb50 <__sfp+0x7c>)
    bad8:	0007      	movs	r7, r0
    bada:	681e      	ldr	r6, [r3, #0]
    badc:	69b3      	ldr	r3, [r6, #24]
    bade:	2b00      	cmp	r3, #0
    bae0:	d102      	bne.n	bae8 <__sfp+0x14>
    bae2:	0030      	movs	r0, r6
    bae4:	f7ff ffc2 	bl	ba6c <__sinit>
    bae8:	3648      	adds	r6, #72	; 0x48
    baea:	68b4      	ldr	r4, [r6, #8]
    baec:	6873      	ldr	r3, [r6, #4]
    baee:	3b01      	subs	r3, #1
    baf0:	d504      	bpl.n	bafc <__sfp+0x28>
    baf2:	6833      	ldr	r3, [r6, #0]
    baf4:	2b00      	cmp	r3, #0
    baf6:	d007      	beq.n	bb08 <__sfp+0x34>
    baf8:	6836      	ldr	r6, [r6, #0]
    bafa:	e7f6      	b.n	baea <__sfp+0x16>
    bafc:	220c      	movs	r2, #12
    bafe:	5ea5      	ldrsh	r5, [r4, r2]
    bb00:	2d00      	cmp	r5, #0
    bb02:	d00d      	beq.n	bb20 <__sfp+0x4c>
    bb04:	3468      	adds	r4, #104	; 0x68
    bb06:	e7f2      	b.n	baee <__sfp+0x1a>
    bb08:	2104      	movs	r1, #4
    bb0a:	0038      	movs	r0, r7
    bb0c:	f7ff ff98 	bl	ba40 <__sfmoreglue>
    bb10:	6030      	str	r0, [r6, #0]
    bb12:	2800      	cmp	r0, #0
    bb14:	d1f0      	bne.n	baf8 <__sfp+0x24>
    bb16:	230c      	movs	r3, #12
    bb18:	0004      	movs	r4, r0
    bb1a:	603b      	str	r3, [r7, #0]
    bb1c:	0020      	movs	r0, r4
    bb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb20:	2301      	movs	r3, #1
    bb22:	0020      	movs	r0, r4
    bb24:	425b      	negs	r3, r3
    bb26:	81e3      	strh	r3, [r4, #14]
    bb28:	3302      	adds	r3, #2
    bb2a:	81a3      	strh	r3, [r4, #12]
    bb2c:	6665      	str	r5, [r4, #100]	; 0x64
    bb2e:	6025      	str	r5, [r4, #0]
    bb30:	60a5      	str	r5, [r4, #8]
    bb32:	6065      	str	r5, [r4, #4]
    bb34:	6125      	str	r5, [r4, #16]
    bb36:	6165      	str	r5, [r4, #20]
    bb38:	61a5      	str	r5, [r4, #24]
    bb3a:	2208      	movs	r2, #8
    bb3c:	0029      	movs	r1, r5
    bb3e:	305c      	adds	r0, #92	; 0x5c
    bb40:	f7ff fd1b 	bl	b57a <memset>
    bb44:	6365      	str	r5, [r4, #52]	; 0x34
    bb46:	63a5      	str	r5, [r4, #56]	; 0x38
    bb48:	64a5      	str	r5, [r4, #72]	; 0x48
    bb4a:	64e5      	str	r5, [r4, #76]	; 0x4c
    bb4c:	e7e6      	b.n	bb1c <__sfp+0x48>
    bb4e:	46c0      	nop			; (mov r8, r8)
    bb50:	0000c918 	.word	0x0000c918

0000bb54 <_fwalk_reent>:
    bb54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bb56:	0004      	movs	r4, r0
    bb58:	0007      	movs	r7, r0
    bb5a:	2600      	movs	r6, #0
    bb5c:	9101      	str	r1, [sp, #4]
    bb5e:	3448      	adds	r4, #72	; 0x48
    bb60:	2c00      	cmp	r4, #0
    bb62:	d101      	bne.n	bb68 <_fwalk_reent+0x14>
    bb64:	0030      	movs	r0, r6
    bb66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bb68:	6863      	ldr	r3, [r4, #4]
    bb6a:	68a5      	ldr	r5, [r4, #8]
    bb6c:	9300      	str	r3, [sp, #0]
    bb6e:	9b00      	ldr	r3, [sp, #0]
    bb70:	3b01      	subs	r3, #1
    bb72:	9300      	str	r3, [sp, #0]
    bb74:	d501      	bpl.n	bb7a <_fwalk_reent+0x26>
    bb76:	6824      	ldr	r4, [r4, #0]
    bb78:	e7f2      	b.n	bb60 <_fwalk_reent+0xc>
    bb7a:	89ab      	ldrh	r3, [r5, #12]
    bb7c:	2b01      	cmp	r3, #1
    bb7e:	d908      	bls.n	bb92 <_fwalk_reent+0x3e>
    bb80:	220e      	movs	r2, #14
    bb82:	5eab      	ldrsh	r3, [r5, r2]
    bb84:	3301      	adds	r3, #1
    bb86:	d004      	beq.n	bb92 <_fwalk_reent+0x3e>
    bb88:	0029      	movs	r1, r5
    bb8a:	0038      	movs	r0, r7
    bb8c:	9b01      	ldr	r3, [sp, #4]
    bb8e:	4798      	blx	r3
    bb90:	4306      	orrs	r6, r0
    bb92:	3568      	adds	r5, #104	; 0x68
    bb94:	e7eb      	b.n	bb6e <_fwalk_reent+0x1a>
	...

0000bb98 <__swhatbuf_r>:
    bb98:	b570      	push	{r4, r5, r6, lr}
    bb9a:	000e      	movs	r6, r1
    bb9c:	001d      	movs	r5, r3
    bb9e:	230e      	movs	r3, #14
    bba0:	5ec9      	ldrsh	r1, [r1, r3]
    bba2:	b090      	sub	sp, #64	; 0x40
    bba4:	0014      	movs	r4, r2
    bba6:	2900      	cmp	r1, #0
    bba8:	da07      	bge.n	bbba <__swhatbuf_r+0x22>
    bbaa:	2300      	movs	r3, #0
    bbac:	602b      	str	r3, [r5, #0]
    bbae:	89b3      	ldrh	r3, [r6, #12]
    bbb0:	061b      	lsls	r3, r3, #24
    bbb2:	d411      	bmi.n	bbd8 <__swhatbuf_r+0x40>
    bbb4:	2380      	movs	r3, #128	; 0x80
    bbb6:	00db      	lsls	r3, r3, #3
    bbb8:	e00f      	b.n	bbda <__swhatbuf_r+0x42>
    bbba:	aa01      	add	r2, sp, #4
    bbbc:	f000 f888 	bl	bcd0 <_fstat_r>
    bbc0:	2800      	cmp	r0, #0
    bbc2:	dbf2      	blt.n	bbaa <__swhatbuf_r+0x12>
    bbc4:	22f0      	movs	r2, #240	; 0xf0
    bbc6:	9b02      	ldr	r3, [sp, #8]
    bbc8:	0212      	lsls	r2, r2, #8
    bbca:	4013      	ands	r3, r2
    bbcc:	4a05      	ldr	r2, [pc, #20]	; (bbe4 <__swhatbuf_r+0x4c>)
    bbce:	189b      	adds	r3, r3, r2
    bbd0:	425a      	negs	r2, r3
    bbd2:	4153      	adcs	r3, r2
    bbd4:	602b      	str	r3, [r5, #0]
    bbd6:	e7ed      	b.n	bbb4 <__swhatbuf_r+0x1c>
    bbd8:	2340      	movs	r3, #64	; 0x40
    bbda:	2000      	movs	r0, #0
    bbdc:	6023      	str	r3, [r4, #0]
    bbde:	b010      	add	sp, #64	; 0x40
    bbe0:	bd70      	pop	{r4, r5, r6, pc}
    bbe2:	46c0      	nop			; (mov r8, r8)
    bbe4:	ffffe000 	.word	0xffffe000

0000bbe8 <__malloc_lock>:
    bbe8:	4770      	bx	lr

0000bbea <__malloc_unlock>:
    bbea:	4770      	bx	lr

0000bbec <__sread>:
    bbec:	b570      	push	{r4, r5, r6, lr}
    bbee:	000c      	movs	r4, r1
    bbf0:	250e      	movs	r5, #14
    bbf2:	5f49      	ldrsh	r1, [r1, r5]
    bbf4:	f000 f892 	bl	bd1c <_read_r>
    bbf8:	2800      	cmp	r0, #0
    bbfa:	db03      	blt.n	bc04 <__sread+0x18>
    bbfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bbfe:	181b      	adds	r3, r3, r0
    bc00:	6563      	str	r3, [r4, #84]	; 0x54
    bc02:	bd70      	pop	{r4, r5, r6, pc}
    bc04:	89a3      	ldrh	r3, [r4, #12]
    bc06:	4a02      	ldr	r2, [pc, #8]	; (bc10 <__sread+0x24>)
    bc08:	4013      	ands	r3, r2
    bc0a:	81a3      	strh	r3, [r4, #12]
    bc0c:	e7f9      	b.n	bc02 <__sread+0x16>
    bc0e:	46c0      	nop			; (mov r8, r8)
    bc10:	ffffefff 	.word	0xffffefff

0000bc14 <__swrite>:
    bc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc16:	001f      	movs	r7, r3
    bc18:	898b      	ldrh	r3, [r1, #12]
    bc1a:	0005      	movs	r5, r0
    bc1c:	000c      	movs	r4, r1
    bc1e:	0016      	movs	r6, r2
    bc20:	05db      	lsls	r3, r3, #23
    bc22:	d505      	bpl.n	bc30 <__swrite+0x1c>
    bc24:	230e      	movs	r3, #14
    bc26:	5ec9      	ldrsh	r1, [r1, r3]
    bc28:	2200      	movs	r2, #0
    bc2a:	2302      	movs	r3, #2
    bc2c:	f000 f862 	bl	bcf4 <_lseek_r>
    bc30:	89a3      	ldrh	r3, [r4, #12]
    bc32:	4a05      	ldr	r2, [pc, #20]	; (bc48 <__swrite+0x34>)
    bc34:	0028      	movs	r0, r5
    bc36:	4013      	ands	r3, r2
    bc38:	81a3      	strh	r3, [r4, #12]
    bc3a:	0032      	movs	r2, r6
    bc3c:	230e      	movs	r3, #14
    bc3e:	5ee1      	ldrsh	r1, [r4, r3]
    bc40:	003b      	movs	r3, r7
    bc42:	f000 f81f 	bl	bc84 <_write_r>
    bc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc48:	ffffefff 	.word	0xffffefff

0000bc4c <__sseek>:
    bc4c:	b570      	push	{r4, r5, r6, lr}
    bc4e:	000c      	movs	r4, r1
    bc50:	250e      	movs	r5, #14
    bc52:	5f49      	ldrsh	r1, [r1, r5]
    bc54:	f000 f84e 	bl	bcf4 <_lseek_r>
    bc58:	89a3      	ldrh	r3, [r4, #12]
    bc5a:	1c42      	adds	r2, r0, #1
    bc5c:	d103      	bne.n	bc66 <__sseek+0x1a>
    bc5e:	4a05      	ldr	r2, [pc, #20]	; (bc74 <__sseek+0x28>)
    bc60:	4013      	ands	r3, r2
    bc62:	81a3      	strh	r3, [r4, #12]
    bc64:	bd70      	pop	{r4, r5, r6, pc}
    bc66:	2280      	movs	r2, #128	; 0x80
    bc68:	0152      	lsls	r2, r2, #5
    bc6a:	4313      	orrs	r3, r2
    bc6c:	81a3      	strh	r3, [r4, #12]
    bc6e:	6560      	str	r0, [r4, #84]	; 0x54
    bc70:	e7f8      	b.n	bc64 <__sseek+0x18>
    bc72:	46c0      	nop			; (mov r8, r8)
    bc74:	ffffefff 	.word	0xffffefff

0000bc78 <__sclose>:
    bc78:	b510      	push	{r4, lr}
    bc7a:	230e      	movs	r3, #14
    bc7c:	5ec9      	ldrsh	r1, [r1, r3]
    bc7e:	f000 f815 	bl	bcac <_close_r>
    bc82:	bd10      	pop	{r4, pc}

0000bc84 <_write_r>:
    bc84:	b570      	push	{r4, r5, r6, lr}
    bc86:	0005      	movs	r5, r0
    bc88:	0008      	movs	r0, r1
    bc8a:	0011      	movs	r1, r2
    bc8c:	2200      	movs	r2, #0
    bc8e:	4c06      	ldr	r4, [pc, #24]	; (bca8 <_write_r+0x24>)
    bc90:	6022      	str	r2, [r4, #0]
    bc92:	001a      	movs	r2, r3
    bc94:	f7fb f81a 	bl	6ccc <_write>
    bc98:	1c43      	adds	r3, r0, #1
    bc9a:	d103      	bne.n	bca4 <_write_r+0x20>
    bc9c:	6823      	ldr	r3, [r4, #0]
    bc9e:	2b00      	cmp	r3, #0
    bca0:	d000      	beq.n	bca4 <_write_r+0x20>
    bca2:	602b      	str	r3, [r5, #0]
    bca4:	bd70      	pop	{r4, r5, r6, pc}
    bca6:	46c0      	nop			; (mov r8, r8)
    bca8:	20000c90 	.word	0x20000c90

0000bcac <_close_r>:
    bcac:	2300      	movs	r3, #0
    bcae:	b570      	push	{r4, r5, r6, lr}
    bcb0:	4c06      	ldr	r4, [pc, #24]	; (bccc <_close_r+0x20>)
    bcb2:	0005      	movs	r5, r0
    bcb4:	0008      	movs	r0, r1
    bcb6:	6023      	str	r3, [r4, #0]
    bcb8:	f7fb f85c 	bl	6d74 <_close>
    bcbc:	1c43      	adds	r3, r0, #1
    bcbe:	d103      	bne.n	bcc8 <_close_r+0x1c>
    bcc0:	6823      	ldr	r3, [r4, #0]
    bcc2:	2b00      	cmp	r3, #0
    bcc4:	d000      	beq.n	bcc8 <_close_r+0x1c>
    bcc6:	602b      	str	r3, [r5, #0]
    bcc8:	bd70      	pop	{r4, r5, r6, pc}
    bcca:	46c0      	nop			; (mov r8, r8)
    bccc:	20000c90 	.word	0x20000c90

0000bcd0 <_fstat_r>:
    bcd0:	2300      	movs	r3, #0
    bcd2:	b570      	push	{r4, r5, r6, lr}
    bcd4:	4c06      	ldr	r4, [pc, #24]	; (bcf0 <_fstat_r+0x20>)
    bcd6:	0005      	movs	r5, r0
    bcd8:	0008      	movs	r0, r1
    bcda:	0011      	movs	r1, r2
    bcdc:	6023      	str	r3, [r4, #0]
    bcde:	f7fb f853 	bl	6d88 <_fstat>
    bce2:	1c43      	adds	r3, r0, #1
    bce4:	d103      	bne.n	bcee <_fstat_r+0x1e>
    bce6:	6823      	ldr	r3, [r4, #0]
    bce8:	2b00      	cmp	r3, #0
    bcea:	d000      	beq.n	bcee <_fstat_r+0x1e>
    bcec:	602b      	str	r3, [r5, #0]
    bcee:	bd70      	pop	{r4, r5, r6, pc}
    bcf0:	20000c90 	.word	0x20000c90

0000bcf4 <_lseek_r>:
    bcf4:	b570      	push	{r4, r5, r6, lr}
    bcf6:	0005      	movs	r5, r0
    bcf8:	0008      	movs	r0, r1
    bcfa:	0011      	movs	r1, r2
    bcfc:	2200      	movs	r2, #0
    bcfe:	4c06      	ldr	r4, [pc, #24]	; (bd18 <_lseek_r+0x24>)
    bd00:	6022      	str	r2, [r4, #0]
    bd02:	001a      	movs	r2, r3
    bd04:	f7fb f84e 	bl	6da4 <_lseek>
    bd08:	1c43      	adds	r3, r0, #1
    bd0a:	d103      	bne.n	bd14 <_lseek_r+0x20>
    bd0c:	6823      	ldr	r3, [r4, #0]
    bd0e:	2b00      	cmp	r3, #0
    bd10:	d000      	beq.n	bd14 <_lseek_r+0x20>
    bd12:	602b      	str	r3, [r5, #0]
    bd14:	bd70      	pop	{r4, r5, r6, pc}
    bd16:	46c0      	nop			; (mov r8, r8)
    bd18:	20000c90 	.word	0x20000c90

0000bd1c <_read_r>:
    bd1c:	b570      	push	{r4, r5, r6, lr}
    bd1e:	0005      	movs	r5, r0
    bd20:	0008      	movs	r0, r1
    bd22:	0011      	movs	r1, r2
    bd24:	2200      	movs	r2, #0
    bd26:	4c06      	ldr	r4, [pc, #24]	; (bd40 <_read_r+0x24>)
    bd28:	6022      	str	r2, [r4, #0]
    bd2a:	001a      	movs	r2, r3
    bd2c:	f7fa ffa4 	bl	6c78 <_read>
    bd30:	1c43      	adds	r3, r0, #1
    bd32:	d103      	bne.n	bd3c <_read_r+0x20>
    bd34:	6823      	ldr	r3, [r4, #0]
    bd36:	2b00      	cmp	r3, #0
    bd38:	d000      	beq.n	bd3c <_read_r+0x20>
    bd3a:	602b      	str	r3, [r5, #0]
    bd3c:	bd70      	pop	{r4, r5, r6, pc}
    bd3e:	46c0      	nop			; (mov r8, r8)
    bd40:	20000c90 	.word	0x20000c90
    bd44:	0000056c 	.word	0x0000056c
    bd48:	0000056c 	.word	0x0000056c
    bd4c:	00000560 	.word	0x00000560
    bd50:	0000056c 	.word	0x0000056c
    bd54:	00000560 	.word	0x00000560
    bd58:	0000053a 	.word	0x0000053a
    bd5c:	0000053a 	.word	0x0000053a
    bd60:	0000056c 	.word	0x0000056c
    bd64:	0000056c 	.word	0x0000056c
    bd68:	0000056c 	.word	0x0000056c
    bd6c:	0000056c 	.word	0x0000056c
    bd70:	0000056c 	.word	0x0000056c
    bd74:	0000056c 	.word	0x0000056c
    bd78:	0000056c 	.word	0x0000056c
    bd7c:	0000056c 	.word	0x0000056c
    bd80:	0000056c 	.word	0x0000056c
    bd84:	0000056c 	.word	0x0000056c
    bd88:	0000056c 	.word	0x0000056c
    bd8c:	0000056c 	.word	0x0000056c
    bd90:	0000056c 	.word	0x0000056c
    bd94:	0000056c 	.word	0x0000056c
    bd98:	0000056c 	.word	0x0000056c
    bd9c:	0000056c 	.word	0x0000056c
    bda0:	0000056c 	.word	0x0000056c
    bda4:	0000056c 	.word	0x0000056c
    bda8:	0000056c 	.word	0x0000056c
    bdac:	0000056c 	.word	0x0000056c
    bdb0:	0000056c 	.word	0x0000056c
    bdb4:	0000056c 	.word	0x0000056c
    bdb8:	0000056c 	.word	0x0000056c
    bdbc:	0000056c 	.word	0x0000056c
    bdc0:	0000056c 	.word	0x0000056c
    bdc4:	0000056c 	.word	0x0000056c
    bdc8:	0000056c 	.word	0x0000056c
    bdcc:	0000056c 	.word	0x0000056c
    bdd0:	0000056c 	.word	0x0000056c
    bdd4:	0000056c 	.word	0x0000056c
    bdd8:	0000056c 	.word	0x0000056c
    bddc:	0000056c 	.word	0x0000056c
    bde0:	0000056c 	.word	0x0000056c
    bde4:	0000056c 	.word	0x0000056c
    bde8:	0000056c 	.word	0x0000056c
    bdec:	0000056c 	.word	0x0000056c
    bdf0:	0000056c 	.word	0x0000056c
    bdf4:	0000056c 	.word	0x0000056c
    bdf8:	0000056c 	.word	0x0000056c
    bdfc:	0000056c 	.word	0x0000056c
    be00:	0000056c 	.word	0x0000056c
    be04:	0000056c 	.word	0x0000056c
    be08:	0000056c 	.word	0x0000056c
    be0c:	0000056c 	.word	0x0000056c
    be10:	0000056c 	.word	0x0000056c
    be14:	0000056c 	.word	0x0000056c
    be18:	0000056c 	.word	0x0000056c
    be1c:	0000056c 	.word	0x0000056c
    be20:	0000056c 	.word	0x0000056c
    be24:	0000056c 	.word	0x0000056c
    be28:	0000056c 	.word	0x0000056c
    be2c:	0000056c 	.word	0x0000056c
    be30:	0000056c 	.word	0x0000056c
    be34:	0000056c 	.word	0x0000056c
    be38:	0000056c 	.word	0x0000056c
    be3c:	0000056c 	.word	0x0000056c
    be40:	0000056c 	.word	0x0000056c
    be44:	00000560 	.word	0x00000560
    be48:	00000560 	.word	0x00000560
    be4c:	00000576 	.word	0x00000576
    be50:	00000576 	.word	0x00000576
    be54:	00000576 	.word	0x00000576
    be58:	00000576 	.word	0x00000576

0000be5c <sd_mmc_trans_units>:
    be5c:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000be78 <sd_trans_multipliers>:
    be78:	00000000 0000000a 0000000c 0000000d     ................
    be88:	0000000f 00000014 00000019 0000001e     ................
    be98:	00000023 00000028 0000002d 00000032     #...(...-...2...
    bea8:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000beb8 <mmc_trans_multipliers>:
    beb8:	00000000 0000000a 0000000c 0000000d     ................
    bec8:	0000000f 00000014 0000001a 0000001e     ................
    bed8:	00000023 00000028 0000002d 00000034     #...(...-...4...
    bee8:	00000037 0000003c 00000046 00000050     7...<...F...P...
    bef8:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
    bf08:	22302074 00000000                       t 0"....

0000bf10 <lun_desc>:
    bf10:	000020e1 00002139 00002185 000021d1     . ..9!...!...!..
    bf20:	00002201 00002285 00002315 0000bef8     ."..."...#......
    bf30:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    bf40:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
    bf50:	00005df6 00005e70 00005e70 00005e14     .]..p^..p^...^..
    bf60:	00005e0e 00005e1a 00005dfc 00005e20     .^...^...].. ^..
    bf70:	00005e56 0000613c 0000618c 0000618c     V^..<a...a...a..
    bf80:	00006188 0000612e 0000614e 0000611e     .a...a..Na...a..
    bf90:	00006160 00006172 000061da 00006208     `a..ra...a...b..
    bfa0:	00006208 00006204 000061d4 000061e0     .b...b...a...a..
    bfb0:	000061ce 000061e6 000061ec              .a...a...a..

0000bfbc <LfnOfs>:
    bfbc:	07050301 12100e09 1c181614 0000001e     ................
    bfcc:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    bfdc:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
    bfec:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
    bffc:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
    c00c:	20205441 00202020                       AT     .

0000c014 <excvt.4558>:
    c014:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    c024:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    c034:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    c044:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    c054:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    c064:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    c074:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    c084:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0000c094 <Tbl>:
    c094:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    c0a4:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    c0b4:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    c0c4:	00d600ff 00f800dc 00d800a3 019200d7     ................
    c0d4:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    c0e4:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    c0f4:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    c104:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    c114:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    c124:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    c134:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    c144:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    c154:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    c164:	00da00de 00d900db 00dd00fd 00b400af     ................
    c174:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    c184:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0000c194 <tbl_lower.4308>:
    c194:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    c1a4:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    c1b4:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    c1c4:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    c1d4:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    c1e4:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    c1f4:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    c204:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    c214:	01050103 01090107 010d010b 0111010f     ................
    c224:	01150113 01190117 011d011b 0121011f     ..............!.
    c234:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    c244:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    c254:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    c264:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    c274:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    c284:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    c294:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    c2a4:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    c2b4:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    c2c4:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    c2d4:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    c2e4:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    c2f4:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    c304:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    c314:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    c324:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    c334:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    c344:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    c354:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    c364:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0000c374 <tbl_upper.4309>:
    c374:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    c384:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    c394:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    c3a4:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    c3b4:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    c3c4:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    c3d4:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    c3e4:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    c3f4:	01040102 01080106 010c010a 0110010e     ................
    c404:	01140112 01180116 011c011a 0120011e     .............. .
    c414:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    c424:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    c434:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    c444:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    c454:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    c464:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    c474:	03940393 03960395 03980397 039a0399     ................
    c484:	039c039b 039e039d 03a0039f 03a303a1     ................
    c494:	03a503a4 03a703a6 03a903a8 041003aa     ................
    c4a4:	04120411 04140413 04160415 04180417     ................
    c4b4:	041a0419 041c041b 041e041d 0420041f     .............. .
    c4c4:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    c4d4:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    c4e4:	04030402 04050404 04070406 04090408     ................
    c4f4:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    c504:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    c514:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    c524:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    c534:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    c544:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    c554:	35455345 20303631 4e45202d 20524554     ESE5160 - ENTER 
    c564:	544f4f42 44414f4c 00005245 2d0d0a0c     BOOTLOADER.....-
    c574:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    c584:	6c706d61 6e6f2065 74614620 2d207346     ample on FatFs -
    c594:	000d0a2d 43204453 20445241 6c696166     -...SD CARD fail
    c5a4:	20216465 63656843 6f79206b 63207275     ed! Check your c
    c5b4:	656e6e6f 6f697463 202e736e 74737953     onnections. Syst
    c5c4:	77206d65 206c6c69 74736572 20747261     em will restart 
    c5d4:	35206e69 63657320 73646e6f 002e2e2e     in 5 seconds....
    c5e4:	43204453 20445241 6e756f6d 75732074     SD CARD mount su
    c5f4:	73656363 46202173 73656c69 65747379     ccess! Filesyste
    c604:	6c61206d 6d206f73 746e756f 202e6465     m also mounted. 
    c614:	00000a0d 67616c46 78742e41 6f662074     ....FlagA.txt fo
    c624:	2e646e75 616c4620 6e696873 69662067     und. Flashing fi
    c634:	61776d72 54206572 41747365 6e69622e     rmware TestA.bin
    c644:	00000a0d 67616c46 78742e42 6f662074     ....FlagB.txt fo
    c654:	2e646e75 616c4620 6e696873 69662067     und. Flashing fi
    c664:	61776d72 54206572 42747365 6e69622e     rmware TestB.bin
    c674:	00000a0d 73617245 72652065 0d726f72     ....Erase error.
    c684:	0000000a 73616c46 72652068 64657361     ....Flash erased
    c694:	6843202e 696b6365 2e2e676e 00000a0d     . Checking......
    c6a4:	73616c46 6f6e2068 72652074 64657361     Flash not erased
    c6b4:	63757320 73736563 6c6c7566 72202c79      successfully, r
    c6c4:	6e757265 676e696e 616c6620 0a0d6873     erunning flash..
    c6d4:	00000000 73616c46 72652068 64657361     ....Flash erased
    c6e4:	63757320 73736563 6c6c7566 0a0d2e79      successfully...
    c6f4:	00000000 7469654e 20726568 67616c66     ....Neither flag
    c704:	756f6620 0a0d646e 00000000 6f727245      found......Erro
    c714:	6e692072 61657220 676e6964 6c696620     r in reading fil
    c724:	000a0d65 746f7257 20312065 65676170     e...Wrote 1 page
    c734:	746e6920 564e206f 000a0d4d 67616c46      into NVM...Flag
    c744:	78742e41 65642074 6574656c 0a0d2e64     A.txt deleted...
    c754:	00000000 67616c46 78742e42 65642074     ....FlagB.txt de
    c764:	6574656c 0a0d2e64 00000000 736f6c43     leted.......Clos
    c774:	46206465 00656c69 35455345 20303631     ed File.ESE5160 
    c784:	5845202d 42205449 4c544f4f 4544414f     - EXIT BOOTLOADE
    c794:	00000052 67616c46 78742e41 00000074     R...FlagA.txt...
    c7a4:	67616c46 78742e42 00000074 74736554     FlagB.txt...Test
    c7b4:	69622e41 0000006e 74736554 69622e42     A.bin...TestB.bi
    c7c4:	0000006e 43204453 20647261 74696e69     n...SD Card init
    c7d4:	65746169 6f632064 63657272 21796c74     iated correctly!
    c7e4:	00000d0a 6e756f4d 69642074 28206b73     ....Mount disk (
    c7f4:	6f6d5f66 29746e75 0d2e2e2e 0000000a     f_mount)........
    c804:	4941465b 72205d4c 25207365 000a0d64     [FAIL] res %d...
    c814:	5d4b4f5b 00000a0d 61657243 61206574     [OK]....Create a
    c824:	6c696620 66282065 65706f5f 2e2e296e      file (f_open)..
    c834:	000a0d2e 74697257 6f742065 73657420     ....Write to tes
    c844:	69662074 2820656c 75705f66 2e297374     t file (f_puts).
    c854:	0a0d2e2e 00000000 74736554 2f445320     ........Test SD/
    c864:	20434d4d 63617473 00000a6b 4941465b     MMC stack...[FAI
    c874:	0a0d5d4c 00000000 74736554 20736920     L]......Test is 
    c884:	63637573 66737365 0a2e6c75 0000000d     successful......
    c894:	6c756f43 6f6e2064 706f2074 62206e65     Could not open b
    c8a4:	72616e69 69662079 0d21656c 0000000a     inary file!.....
    c8b4:	74697257 6f742065 73657420 69662074     Write to test fi
    c8c4:	2820656c 72775f66 29657469 0d2e2e2e     le (f_write)....
    c8d4:	0000000a 20646e45 5420666f 2e747365     ....End of Test.
    c8e4:	00000d0a 43204453 20647261 6c696166     ....SD Card fail
    c8f4:	69206465 6974696e 6f697461 4320216e     ed initiation! C
    c904:	6b636568 6e6f6320 7463656e 736e6f69     heck connections
    c914:	000d0a21                                !...

0000c918 <_global_impure_ptr>:
    c918:	20000034                                4.. 

0000c91c <__sf_fake_stderr>:
	...

0000c93c <__sf_fake_stdin>:
	...

0000c95c <__sf_fake_stdout>:
	...

0000c97c <_init>:
    c97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c97e:	46c0      	nop			; (mov r8, r8)
    c980:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c982:	bc08      	pop	{r3}
    c984:	469e      	mov	lr, r3
    c986:	4770      	bx	lr

0000c988 <__init_array_start>:
    c988:	000000dd 	.word	0x000000dd

0000c98c <_fini>:
    c98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c98e:	46c0      	nop			; (mov r8, r8)
    c990:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c992:	bc08      	pop	{r3}
    c994:	469e      	mov	lr, r3
    c996:	4770      	bx	lr

0000c998 <__fini_array_start>:
    c998:	000000b5 	.word	0x000000b5
