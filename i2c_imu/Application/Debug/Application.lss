
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00027394  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002ec  20000000  00027394  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000057a8  200002f0  00027690  000402f0  2**4
                  ALLOC
  3 .stack        00002000  20005a98  0002ce38  000402f0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000402ec  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00040314  2**0
                  CONTENTS, READONLY
  6 .debug_info   00102ba6  00000000  00000000  0004036d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000fc43  00000000  00000000  00142f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000119af  00000000  00000000  00152b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000030c8  00000000  00000000  00164505  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002d50  00000000  00000000  001675cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002856a  00000000  00000000  0016a31d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000512d3  00000000  00000000  00192887  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000b869a  00000000  00000000  001e3b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000b668  00000000  00000000  0029c1f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
	16,
	26,
	Font16x26
};

char* Font_GetStringSize(char* str, FontSize_t* SizeStruct, FontDef_t* Font) {
       0:	98 7a 00 20 ed 73 01 00 e5 74 01 00 e5 74 01 00     .z. .s...t...t..
	...
	/* Fill settings */
	SizeStruct->Height = Font->FontHeight;
	SizeStruct->Length = Font->FontWidth * strlen(str);
      2c:	7d 65 00 00 00 00 00 00 00 00 00 00 a1 66 00 00     }e...........f..

	/* Return pointer */
	return str;
}
      3c:	e9 66 00 00 e5 74 01 00 e5 74 01 00 e5 74 01 00     .f...t...t...t..
      4c:	3d 35 01 00 69 2a 01 00 e5 74 01 00 4d 07 00 00     =5..i*...t..M...
      5c:	e5 74 01 00 91 08 00 00 e1 3b 01 00 f9 3b 01 00     .t.......;...;..
      6c:	11 3c 01 00 29 3c 01 00 41 3c 01 00 59 3c 01 00     .<..)<..A<..Y<..
      7c:	35 73 01 00 49 73 01 00 5d 73 01 00 69 42 00 00     5s..Is..]s..iB..
      8c:	7d 42 00 00 91 42 00 00 00 00 00 00 00 00 00 00     }B...B..........
      9c:	d5 05 00 00 e5 74 01 00 11 07 00 00 e5 74 01 00     .....t.......t..
      ac:	e5 74 01 00 00 00 00 00                             .t......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200002f0 	.word	0x200002f0
      d4:	00000000 	.word	0x00000000
      d8:	00027394 	.word	0x00027394

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200002f4 	.word	0x200002f4
     108:	00027394 	.word	0x00027394
     10c:	00027394 	.word	0x00027394
     110:	00000000 	.word	0x00000000

00000114 <SSD1306_WRITECOMMAND>:
	uint8_t Initialized;
} SSD1306_t;

static SSD1306_t SSD1306;

static void SSD1306_WRITECOMMAND(uint8_t command) {
     114:	b580      	push	{r7, lr}
     116:	b086      	sub	sp, #24
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	I2C_Data data = {
     120:	2308      	movs	r3, #8
     122:	18fb      	adds	r3, r7, r3
     124:	223d      	movs	r2, #61	; 0x3d
     126:	701a      	strb	r2, [r3, #0]
     128:	2308      	movs	r3, #8
     12a:	18fb      	adds	r3, r7, r3
     12c:	1dfa      	adds	r2, r7, #7
     12e:	605a      	str	r2, [r3, #4]
     130:	2308      	movs	r3, #8
     132:	18fb      	adds	r3, r7, r3
     134:	2200      	movs	r2, #0
     136:	609a      	str	r2, [r3, #8]
     138:	2308      	movs	r3, #8
     13a:	18fb      	adds	r3, r7, r3
     13c:	2200      	movs	r2, #0
     13e:	819a      	strh	r2, [r3, #12]
     140:	2308      	movs	r3, #8
     142:	18fb      	adds	r3, r7, r3
     144:	2201      	movs	r2, #1
     146:	81da      	strh	r2, [r3, #14]
		.lenOut = 1,
		.msgIn = NULL,
		.lenIn = 0
	};

	SerialConsoleWriteString("Writing command to SSD1306.\n");
     148:	4b11      	ldr	r3, [pc, #68]	; (190 <SSD1306_WRITECOMMAND+0x7c>)
     14a:	0018      	movs	r0, r3
     14c:	4b11      	ldr	r3, [pc, #68]	; (194 <SSD1306_WRITECOMMAND+0x80>)
     14e:	4798      	blx	r3
	if (I2cGetMutex(portMAX_DELAY) == ERROR_NONE) {
     150:	2301      	movs	r3, #1
     152:	425b      	negs	r3, r3
     154:	0018      	movs	r0, r3
     156:	4b10      	ldr	r3, [pc, #64]	; (198 <SSD1306_WRITECOMMAND+0x84>)
     158:	4798      	blx	r3
     15a:	1e03      	subs	r3, r0, #0
     15c:	d110      	bne.n	180 <SSD1306_WRITECOMMAND+0x6c>
		if (I2cWriteDataWait(&data, portMAX_DELAY) != ERROR_NONE) {
     15e:	2301      	movs	r3, #1
     160:	425a      	negs	r2, r3
     162:	2308      	movs	r3, #8
     164:	18fb      	adds	r3, r7, r3
     166:	0011      	movs	r1, r2
     168:	0018      	movs	r0, r3
     16a:	4b0c      	ldr	r3, [pc, #48]	; (19c <SSD1306_WRITECOMMAND+0x88>)
     16c:	4798      	blx	r3
     16e:	1e03      	subs	r3, r0, #0
     170:	d003      	beq.n	17a <SSD1306_WRITECOMMAND+0x66>
			SerialConsoleWriteString("Error writing command to SSD1306.\n");
     172:	4b0b      	ldr	r3, [pc, #44]	; (1a0 <SSD1306_WRITECOMMAND+0x8c>)
     174:	0018      	movs	r0, r3
     176:	4b07      	ldr	r3, [pc, #28]	; (194 <SSD1306_WRITECOMMAND+0x80>)
     178:	4798      	blx	r3
		}
		I2cFreeMutex();
     17a:	4b0a      	ldr	r3, [pc, #40]	; (1a4 <SSD1306_WRITECOMMAND+0x90>)
     17c:	4798      	blx	r3
		} else {
		SerialConsoleWriteString("Failed to get I2C mutex for command write.\n");
	}
}
     17e:	e003      	b.n	188 <SSD1306_WRITECOMMAND+0x74>
		SerialConsoleWriteString("Failed to get I2C mutex for command write.\n");
     180:	4b09      	ldr	r3, [pc, #36]	; (1a8 <SSD1306_WRITECOMMAND+0x94>)
     182:	0018      	movs	r0, r3
     184:	4b03      	ldr	r3, [pc, #12]	; (194 <SSD1306_WRITECOMMAND+0x80>)
     186:	4798      	blx	r3
}
     188:	46c0      	nop			; (mov r8, r8)
     18a:	46bd      	mov	sp, r7
     18c:	b006      	add	sp, #24
     18e:	bd80      	pop	{r7, pc}
     190:	00022168 	.word	0x00022168
     194:	0000a289 	.word	0x0000a289
     198:	00001c89 	.word	0x00001c89
     19c:	00001d19 	.word	0x00001d19
     1a0:	00022188 	.word	0x00022188
     1a4:	00001c51 	.word	0x00001c51
     1a8:	000221ac 	.word	0x000221ac

000001ac <SSD1306_Init>:

uint8_t SSD1306_Init(void) {
     1ac:	b580      	push	{r7, lr}
     1ae:	af00      	add	r7, sp, #0
	SerialConsoleWriteString("Initializing SSD1306.\n");
     1b0:	4b08      	ldr	r3, [pc, #32]	; (1d4 <SSD1306_Init+0x28>)
     1b2:	0018      	movs	r0, r3
     1b4:	4b08      	ldr	r3, [pc, #32]	; (1d8 <SSD1306_Init+0x2c>)
     1b6:	4798      	blx	r3
	SSD1306_WRITECOMMAND(0xAE); // Display off
     1b8:	20ae      	movs	r0, #174	; 0xae
     1ba:	4b08      	ldr	r3, [pc, #32]	; (1dc <SSD1306_Init+0x30>)
     1bc:	4798      	blx	r3
	// Initialization sequence
	SSD1306_WRITECOMMAND(0xAF); // Display on
     1be:	20af      	movs	r0, #175	; 0xaf
     1c0:	4b06      	ldr	r3, [pc, #24]	; (1dc <SSD1306_Init+0x30>)
     1c2:	4798      	blx	r3
	SSD1306.Initialized = 1;
     1c4:	4b06      	ldr	r3, [pc, #24]	; (1e0 <SSD1306_Init+0x34>)
     1c6:	2201      	movs	r2, #1
     1c8:	715a      	strb	r2, [r3, #5]
	return 1;
     1ca:	2301      	movs	r3, #1
}
     1cc:	0018      	movs	r0, r3
     1ce:	46bd      	mov	sp, r7
     1d0:	bd80      	pop	{r7, pc}
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	000221d8 	.word	0x000221d8
     1d8:	0000a289 	.word	0x0000a289
     1dc:	00000115 	.word	0x00000115
     1e0:	2000070c 	.word	0x2000070c

000001e4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
     1e4:	b580      	push	{r7, lr}
     1e6:	b086      	sub	sp, #24
     1e8:	af00      	add	r7, sp, #0
	SerialConsoleWriteString("Updating SSD1306 screen.\n");
     1ea:	4b2b      	ldr	r3, [pc, #172]	; (298 <SSD1306_UpdateScreen+0xb4>)
     1ec:	0018      	movs	r0, r3
     1ee:	4b2b      	ldr	r3, [pc, #172]	; (29c <SSD1306_UpdateScreen+0xb8>)
     1f0:	4798      	blx	r3
	for (uint8_t m = 0; m < 8; m++) {
     1f2:	2317      	movs	r3, #23
     1f4:	18fb      	adds	r3, r7, r3
     1f6:	2200      	movs	r2, #0
     1f8:	701a      	strb	r2, [r3, #0]
     1fa:	e043      	b.n	284 <SSD1306_UpdateScreen+0xa0>
		SSD1306_WRITECOMMAND(0xB0 + m);
     1fc:	2317      	movs	r3, #23
     1fe:	18fb      	adds	r3, r7, r3
     200:	781b      	ldrb	r3, [r3, #0]
     202:	3b50      	subs	r3, #80	; 0x50
     204:	b2db      	uxtb	r3, r3
     206:	0018      	movs	r0, r3
     208:	4b25      	ldr	r3, [pc, #148]	; (2a0 <SSD1306_UpdateScreen+0xbc>)
     20a:	4798      	blx	r3
		SSD1306_WRITECOMMAND(0x00);
     20c:	2000      	movs	r0, #0
     20e:	4b24      	ldr	r3, [pc, #144]	; (2a0 <SSD1306_UpdateScreen+0xbc>)
     210:	4798      	blx	r3
		SSD1306_WRITECOMMAND(0x10);
     212:	2010      	movs	r0, #16
     214:	4b22      	ldr	r3, [pc, #136]	; (2a0 <SSD1306_UpdateScreen+0xbc>)
     216:	4798      	blx	r3

		I2C_Data data = {
     218:	1d3b      	adds	r3, r7, #4
     21a:	223d      	movs	r2, #61	; 0x3d
     21c:	701a      	strb	r2, [r3, #0]
			.address = SSD1306_I2C_ADDR,
			.msgOut = &SSD1306_Buffer[SSD1306_WIDTH * m],
     21e:	2317      	movs	r3, #23
     220:	18fb      	adds	r3, r7, r3
     222:	781b      	ldrb	r3, [r3, #0]
     224:	01da      	lsls	r2, r3, #7
     226:	4b1f      	ldr	r3, [pc, #124]	; (2a4 <SSD1306_UpdateScreen+0xc0>)
     228:	18d2      	adds	r2, r2, r3
		I2C_Data data = {
     22a:	1d3b      	adds	r3, r7, #4
     22c:	605a      	str	r2, [r3, #4]
     22e:	1d3b      	adds	r3, r7, #4
     230:	2200      	movs	r2, #0
     232:	609a      	str	r2, [r3, #8]
     234:	1d3b      	adds	r3, r7, #4
     236:	2200      	movs	r2, #0
     238:	819a      	strh	r2, [r3, #12]
     23a:	1d3b      	adds	r3, r7, #4
     23c:	2280      	movs	r2, #128	; 0x80
     23e:	81da      	strh	r2, [r3, #14]
			.lenOut = SSD1306_WIDTH,
			.msgIn = NULL,
			.lenIn = 0
		};

		if (I2cGetMutex(portMAX_DELAY) == ERROR_NONE) {
     240:	2301      	movs	r3, #1
     242:	425b      	negs	r3, r3
     244:	0018      	movs	r0, r3
     246:	4b18      	ldr	r3, [pc, #96]	; (2a8 <SSD1306_UpdateScreen+0xc4>)
     248:	4798      	blx	r3
     24a:	1e03      	subs	r3, r0, #0
     24c:	d10f      	bne.n	26e <SSD1306_UpdateScreen+0x8a>
			if (I2cWriteDataWait(&data, portMAX_DELAY) != ERROR_NONE) {
     24e:	2301      	movs	r3, #1
     250:	425a      	negs	r2, r3
     252:	1d3b      	adds	r3, r7, #4
     254:	0011      	movs	r1, r2
     256:	0018      	movs	r0, r3
     258:	4b14      	ldr	r3, [pc, #80]	; (2ac <SSD1306_UpdateScreen+0xc8>)
     25a:	4798      	blx	r3
     25c:	1e03      	subs	r3, r0, #0
     25e:	d003      	beq.n	268 <SSD1306_UpdateScreen+0x84>
				SerialConsoleWriteString("Error updating screen buffer.\n");
     260:	4b13      	ldr	r3, [pc, #76]	; (2b0 <SSD1306_UpdateScreen+0xcc>)
     262:	0018      	movs	r0, r3
     264:	4b0d      	ldr	r3, [pc, #52]	; (29c <SSD1306_UpdateScreen+0xb8>)
     266:	4798      	blx	r3
			}
			I2cFreeMutex();
     268:	4b12      	ldr	r3, [pc, #72]	; (2b4 <SSD1306_UpdateScreen+0xd0>)
     26a:	4798      	blx	r3
     26c:	e003      	b.n	276 <SSD1306_UpdateScreen+0x92>
			} else {
			SerialConsoleWriteString("Failed to get I2C mutex for screen update.\n");
     26e:	4b12      	ldr	r3, [pc, #72]	; (2b8 <SSD1306_UpdateScreen+0xd4>)
     270:	0018      	movs	r0, r3
     272:	4b0a      	ldr	r3, [pc, #40]	; (29c <SSD1306_UpdateScreen+0xb8>)
     274:	4798      	blx	r3
	for (uint8_t m = 0; m < 8; m++) {
     276:	2317      	movs	r3, #23
     278:	18fb      	adds	r3, r7, r3
     27a:	781a      	ldrb	r2, [r3, #0]
     27c:	2317      	movs	r3, #23
     27e:	18fb      	adds	r3, r7, r3
     280:	3201      	adds	r2, #1
     282:	701a      	strb	r2, [r3, #0]
     284:	2317      	movs	r3, #23
     286:	18fb      	adds	r3, r7, r3
     288:	781b      	ldrb	r3, [r3, #0]
     28a:	2b07      	cmp	r3, #7
     28c:	d9b6      	bls.n	1fc <SSD1306_UpdateScreen+0x18>
		}
	}
}
     28e:	46c0      	nop			; (mov r8, r8)
     290:	46bd      	mov	sp, r7
     292:	b006      	add	sp, #24
     294:	bd80      	pop	{r7, pc}
     296:	46c0      	nop			; (mov r8, r8)
     298:	000221f0 	.word	0x000221f0
     29c:	0000a289 	.word	0x0000a289
     2a0:	00000115 	.word	0x00000115
     2a4:	2000030c 	.word	0x2000030c
     2a8:	00001c89 	.word	0x00001c89
     2ac:	00001d19 	.word	0x00001d19
     2b0:	0002220c 	.word	0x0002220c
     2b4:	00001c51 	.word	0x00001c51
     2b8:	0002222c 	.word	0x0002222c

000002bc <SSD1306_Fill>:

void SSD1306_Fill(SSD1306_COLOR_t color) {
     2bc:	b580      	push	{r7, lr}
     2be:	b082      	sub	sp, #8
     2c0:	af00      	add	r7, sp, #0
     2c2:	0002      	movs	r2, r0
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	701a      	strb	r2, [r3, #0]
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
     2c8:	1dfb      	adds	r3, r7, #7
     2ca:	781b      	ldrb	r3, [r3, #0]
     2cc:	2b00      	cmp	r3, #0
     2ce:	d101      	bne.n	2d4 <SSD1306_Fill+0x18>
     2d0:	2100      	movs	r1, #0
     2d2:	e000      	b.n	2d6 <SSD1306_Fill+0x1a>
     2d4:	21ff      	movs	r1, #255	; 0xff
     2d6:	2380      	movs	r3, #128	; 0x80
     2d8:	00da      	lsls	r2, r3, #3
     2da:	4b06      	ldr	r3, [pc, #24]	; (2f4 <SSD1306_Fill+0x38>)
     2dc:	0018      	movs	r0, r3
     2de:	4b06      	ldr	r3, [pc, #24]	; (2f8 <SSD1306_Fill+0x3c>)
     2e0:	4798      	blx	r3
	SerialConsoleWriteString("Screen buffer filled.\n");
     2e2:	4b06      	ldr	r3, [pc, #24]	; (2fc <SSD1306_Fill+0x40>)
     2e4:	0018      	movs	r0, r3
     2e6:	4b06      	ldr	r3, [pc, #24]	; (300 <SSD1306_Fill+0x44>)
     2e8:	4798      	blx	r3
}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	46bd      	mov	sp, r7
     2ee:	b002      	add	sp, #8
     2f0:	bd80      	pop	{r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	2000030c 	.word	0x2000030c
     2f8:	00020d8b 	.word	0x00020d8b
     2fc:	00022258 	.word	0x00022258
     300:	0000a289 	.word	0x0000a289

00000304 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
     304:	b580      	push	{r7, lr}
     306:	b082      	sub	sp, #8
     308:	af00      	add	r7, sp, #0
     30a:	0002      	movs	r2, r0
     30c:	1dbb      	adds	r3, r7, #6
     30e:	801a      	strh	r2, [r3, #0]
     310:	1d3b      	adds	r3, r7, #4
     312:	1c0a      	adds	r2, r1, #0
     314:	801a      	strh	r2, [r3, #0]
	SerialConsoleWriteString("Setting cursor position.\n");
     316:	4b0e      	ldr	r3, [pc, #56]	; (350 <SSD1306_GotoXY+0x4c>)
     318:	0018      	movs	r0, r3
     31a:	4b0e      	ldr	r3, [pc, #56]	; (354 <SSD1306_GotoXY+0x50>)
     31c:	4798      	blx	r3
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
     31e:	1dbb      	adds	r3, r7, #6
     320:	881b      	ldrh	r3, [r3, #0]
     322:	2b7f      	cmp	r3, #127	; 0x7f
     324:	d803      	bhi.n	32e <SSD1306_GotoXY+0x2a>
     326:	1d3b      	adds	r3, r7, #4
     328:	881b      	ldrh	r3, [r3, #0]
     32a:	2b3f      	cmp	r3, #63	; 0x3f
     32c:	d904      	bls.n	338 <SSD1306_GotoXY+0x34>
		SerialConsoleWriteString("Error: Cursor position out of bounds.\n");
     32e:	4b0a      	ldr	r3, [pc, #40]	; (358 <SSD1306_GotoXY+0x54>)
     330:	0018      	movs	r0, r3
     332:	4b08      	ldr	r3, [pc, #32]	; (354 <SSD1306_GotoXY+0x50>)
     334:	4798      	blx	r3
		return;
     336:	e007      	b.n	348 <SSD1306_GotoXY+0x44>
	}
	SSD1306.CurrentX = x;
     338:	4b08      	ldr	r3, [pc, #32]	; (35c <SSD1306_GotoXY+0x58>)
     33a:	1dba      	adds	r2, r7, #6
     33c:	8812      	ldrh	r2, [r2, #0]
     33e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
     340:	4b06      	ldr	r3, [pc, #24]	; (35c <SSD1306_GotoXY+0x58>)
     342:	1d3a      	adds	r2, r7, #4
     344:	8812      	ldrh	r2, [r2, #0]
     346:	805a      	strh	r2, [r3, #2]
}
     348:	46bd      	mov	sp, r7
     34a:	b002      	add	sp, #8
     34c:	bd80      	pop	{r7, pc}
     34e:	46c0      	nop			; (mov r8, r8)
     350:	00022270 	.word	0x00022270
     354:	0000a289 	.word	0x0000a289
     358:	0002228c 	.word	0x0002228c
     35c:	2000070c 	.word	0x2000070c

00000360 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
     360:	b580      	push	{r7, lr}
     362:	b082      	sub	sp, #8
     364:	af00      	add	r7, sp, #0
     366:	6039      	str	r1, [r7, #0]
     368:	0011      	movs	r1, r2
     36a:	1dfb      	adds	r3, r7, #7
     36c:	1c02      	adds	r2, r0, #0
     36e:	701a      	strb	r2, [r3, #0]
     370:	1dbb      	adds	r3, r7, #6
     372:	1c0a      	adds	r2, r1, #0
     374:	701a      	strb	r2, [r3, #0]
	// Implement character drawing based on current position and font
	SerialConsoleWriteString("Putting character on screen.\n");
     376:	4b05      	ldr	r3, [pc, #20]	; (38c <SSD1306_Putc+0x2c>)
     378:	0018      	movs	r0, r3
     37a:	4b05      	ldr	r3, [pc, #20]	; (390 <SSD1306_Putc+0x30>)
     37c:	4798      	blx	r3
	return ch; // Return the character written for compatibility
     37e:	1dfb      	adds	r3, r7, #7
     380:	781b      	ldrb	r3, [r3, #0]
}
     382:	0018      	movs	r0, r3
     384:	46bd      	mov	sp, r7
     386:	b002      	add	sp, #8
     388:	bd80      	pop	{r7, pc}
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	000222b4 	.word	0x000222b4
     390:	0000a289 	.word	0x0000a289

00000394 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
     394:	b580      	push	{r7, lr}
     396:	b084      	sub	sp, #16
     398:	af00      	add	r7, sp, #0
     39a:	60f8      	str	r0, [r7, #12]
     39c:	60b9      	str	r1, [r7, #8]
     39e:	1dfb      	adds	r3, r7, #7
     3a0:	701a      	strb	r2, [r3, #0]
	SerialConsoleWriteString("Writing string to screen.\n");
     3a2:	4b13      	ldr	r3, [pc, #76]	; (3f0 <SSD1306_Puts+0x5c>)
     3a4:	0018      	movs	r0, r3
     3a6:	4b13      	ldr	r3, [pc, #76]	; (3f4 <SSD1306_Puts+0x60>)
     3a8:	4798      	blx	r3
	while (*str) {
     3aa:	e017      	b.n	3dc <SSD1306_Puts+0x48>
		if (SSD1306_Putc(*str, Font, color) != *str) {
     3ac:	68fb      	ldr	r3, [r7, #12]
     3ae:	7818      	ldrb	r0, [r3, #0]
     3b0:	1dfb      	adds	r3, r7, #7
     3b2:	781a      	ldrb	r2, [r3, #0]
     3b4:	68bb      	ldr	r3, [r7, #8]
     3b6:	0019      	movs	r1, r3
     3b8:	4b0f      	ldr	r3, [pc, #60]	; (3f8 <SSD1306_Puts+0x64>)
     3ba:	4798      	blx	r3
     3bc:	0003      	movs	r3, r0
     3be:	001a      	movs	r2, r3
     3c0:	68fb      	ldr	r3, [r7, #12]
     3c2:	781b      	ldrb	r3, [r3, #0]
     3c4:	429a      	cmp	r2, r3
     3c6:	d006      	beq.n	3d6 <SSD1306_Puts+0x42>
			SerialConsoleWriteString("Failed to put character.\n");
     3c8:	4b0c      	ldr	r3, [pc, #48]	; (3fc <SSD1306_Puts+0x68>)
     3ca:	0018      	movs	r0, r3
     3cc:	4b09      	ldr	r3, [pc, #36]	; (3f4 <SSD1306_Puts+0x60>)
     3ce:	4798      	blx	r3
			return *str;
     3d0:	68fb      	ldr	r3, [r7, #12]
     3d2:	781b      	ldrb	r3, [r3, #0]
     3d4:	e007      	b.n	3e6 <SSD1306_Puts+0x52>
		}
		str++;
     3d6:	68fb      	ldr	r3, [r7, #12]
     3d8:	3301      	adds	r3, #1
     3da:	60fb      	str	r3, [r7, #12]
	while (*str) {
     3dc:	68fb      	ldr	r3, [r7, #12]
     3de:	781b      	ldrb	r3, [r3, #0]
     3e0:	2b00      	cmp	r3, #0
     3e2:	d1e3      	bne.n	3ac <SSD1306_Puts+0x18>
	}
	return 0; // Return 0 on success
     3e4:	2300      	movs	r3, #0
}
     3e6:	0018      	movs	r0, r3
     3e8:	46bd      	mov	sp, r7
     3ea:	b004      	add	sp, #16
     3ec:	bd80      	pop	{r7, pc}
     3ee:	46c0      	nop			; (mov r8, r8)
     3f0:	000222d4 	.word	0x000222d4
     3f4:	0000a289 	.word	0x0000a289
     3f8:	00000361 	.word	0x00000361
     3fc:	000222f0 	.word	0x000222f0

00000400 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     400:	b580      	push	{r7, lr}
     402:	b084      	sub	sp, #16
     404:	af00      	add	r7, sp, #0
     406:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     408:	687b      	ldr	r3, [r7, #4]
     40a:	681b      	ldr	r3, [r3, #0]
     40c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     40e:	68fb      	ldr	r3, [r7, #12]
     410:	7e5b      	ldrb	r3, [r3, #25]
     412:	b2db      	uxtb	r3, r3
     414:	b25b      	sxtb	r3, r3
     416:	2b00      	cmp	r3, #0
     418:	da01      	bge.n	41e <adc_is_syncing+0x1e>
		return true;
     41a:	2301      	movs	r3, #1
     41c:	e000      	b.n	420 <adc_is_syncing+0x20>
	}

	return false;
     41e:	2300      	movs	r3, #0
}
     420:	0018      	movs	r0, r3
     422:	46bd      	mov	sp, r7
     424:	b004      	add	sp, #16
     426:	bd80      	pop	{r7, pc}

00000428 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     428:	b580      	push	{r7, lr}
     42a:	b084      	sub	sp, #16
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     430:	687b      	ldr	r3, [r7, #4]
     432:	681b      	ldr	r3, [r3, #0]
     434:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     436:	46c0      	nop			; (mov r8, r8)
     438:	687b      	ldr	r3, [r7, #4]
     43a:	0018      	movs	r0, r3
     43c:	4b0b      	ldr	r3, [pc, #44]	; (46c <adc_start_conversion+0x44>)
     43e:	4798      	blx	r3
     440:	1e03      	subs	r3, r0, #0
     442:	d1f9      	bne.n	438 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     444:	68fb      	ldr	r3, [r7, #12]
     446:	7b1b      	ldrb	r3, [r3, #12]
     448:	b2db      	uxtb	r3, r3
     44a:	2202      	movs	r2, #2
     44c:	4313      	orrs	r3, r2
     44e:	b2da      	uxtb	r2, r3
     450:	68fb      	ldr	r3, [r7, #12]
     452:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     454:	46c0      	nop			; (mov r8, r8)
     456:	687b      	ldr	r3, [r7, #4]
     458:	0018      	movs	r0, r3
     45a:	4b04      	ldr	r3, [pc, #16]	; (46c <adc_start_conversion+0x44>)
     45c:	4798      	blx	r3
     45e:	1e03      	subs	r3, r0, #0
     460:	d1f9      	bne.n	456 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     462:	46c0      	nop			; (mov r8, r8)
     464:	46bd      	mov	sp, r7
     466:	b004      	add	sp, #16
     468:	bd80      	pop	{r7, pc}
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	00000401 	.word	0x00000401

00000470 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     470:	b580      	push	{r7, lr}
     472:	b084      	sub	sp, #16
     474:	af00      	add	r7, sp, #0
     476:	6078      	str	r0, [r7, #4]
     478:	000a      	movs	r2, r1
     47a:	1cfb      	adds	r3, r7, #3
     47c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     47e:	687b      	ldr	r3, [r7, #4]
     480:	681b      	ldr	r3, [r3, #0]
     482:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     484:	68fb      	ldr	r3, [r7, #12]
     486:	1cfa      	adds	r2, r7, #3
     488:	7812      	ldrb	r2, [r2, #0]
     48a:	759a      	strb	r2, [r3, #22]
}
     48c:	46c0      	nop			; (mov r8, r8)
     48e:	46bd      	mov	sp, r7
     490:	b004      	add	sp, #16
     492:	bd80      	pop	{r7, pc}

00000494 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     494:	b580      	push	{r7, lr}
     496:	b084      	sub	sp, #16
     498:	af00      	add	r7, sp, #0
     49a:	0002      	movs	r2, r0
     49c:	1dfb      	adds	r3, r7, #7
     49e:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     4a0:	1dfb      	adds	r3, r7, #7
     4a2:	781a      	ldrb	r2, [r3, #0]
     4a4:	4b47      	ldr	r3, [pc, #284]	; (5c4 <_adc_interrupt_handler+0x130>)
     4a6:	0092      	lsls	r2, r2, #2
     4a8:	58d3      	ldr	r3, [r2, r3]
     4aa:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     4ac:	68fb      	ldr	r3, [r7, #12]
     4ae:	681b      	ldr	r3, [r3, #0]
     4b0:	7e1b      	ldrb	r3, [r3, #24]
     4b2:	b2da      	uxtb	r2, r3
     4b4:	68fb      	ldr	r3, [r7, #12]
     4b6:	681b      	ldr	r3, [r3, #0]
     4b8:	7ddb      	ldrb	r3, [r3, #23]
     4ba:	b2db      	uxtb	r3, r3
     4bc:	4013      	ands	r3, r2
     4be:	b2db      	uxtb	r3, r3
     4c0:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     4c2:	68bb      	ldr	r3, [r7, #8]
     4c4:	2201      	movs	r2, #1
     4c6:	4013      	ands	r3, r2
     4c8:	d045      	beq.n	556 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     4ca:	68fb      	ldr	r3, [r7, #12]
     4cc:	681b      	ldr	r3, [r3, #0]
     4ce:	2201      	movs	r2, #1
     4d0:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	68fb      	ldr	r3, [r7, #12]
     4d6:	0018      	movs	r0, r3
     4d8:	4b3b      	ldr	r3, [pc, #236]	; (5c8 <_adc_interrupt_handler+0x134>)
     4da:	4798      	blx	r3
     4dc:	1e03      	subs	r3, r0, #0
     4de:	d1f9      	bne.n	4d4 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     4e0:	68fb      	ldr	r3, [r7, #12]
     4e2:	695b      	ldr	r3, [r3, #20]
     4e4:	1c99      	adds	r1, r3, #2
     4e6:	68fa      	ldr	r2, [r7, #12]
     4e8:	6151      	str	r1, [r2, #20]
     4ea:	68fa      	ldr	r2, [r7, #12]
     4ec:	6812      	ldr	r2, [r2, #0]
     4ee:	8b52      	ldrh	r2, [r2, #26]
     4f0:	b292      	uxth	r2, r2
     4f2:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
     4f4:	68fb      	ldr	r3, [r7, #12]
     4f6:	8b1b      	ldrh	r3, [r3, #24]
     4f8:	b29b      	uxth	r3, r3
     4fa:	3b01      	subs	r3, #1
     4fc:	b29b      	uxth	r3, r3
     4fe:	68fa      	ldr	r2, [r7, #12]
     500:	1c19      	adds	r1, r3, #0
     502:	8311      	strh	r1, [r2, #24]
     504:	2b00      	cmp	r3, #0
     506:	d008      	beq.n	51a <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	7f5b      	ldrb	r3, [r3, #29]
     50c:	2b00      	cmp	r3, #0
     50e:	d022      	beq.n	556 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
     510:	68fb      	ldr	r3, [r7, #12]
     512:	0018      	movs	r0, r3
     514:	4b2d      	ldr	r3, [pc, #180]	; (5cc <_adc_interrupt_handler+0x138>)
     516:	4798      	blx	r3
     518:	e01d      	b.n	556 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     51a:	68fb      	ldr	r3, [r7, #12]
     51c:	2101      	movs	r1, #1
     51e:	0018      	movs	r0, r3
     520:	4b2b      	ldr	r3, [pc, #172]	; (5d0 <_adc_interrupt_handler+0x13c>)
     522:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
     524:	68fb      	ldr	r3, [r7, #12]
     526:	7f1b      	ldrb	r3, [r3, #28]
     528:	b2db      	uxtb	r3, r3
     52a:	2b05      	cmp	r3, #5
     52c:	d113      	bne.n	556 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
     52e:	68fb      	ldr	r3, [r7, #12]
     530:	2200      	movs	r2, #0
     532:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
     534:	68fb      	ldr	r3, [r7, #12]
     536:	7edb      	ldrb	r3, [r3, #27]
     538:	001a      	movs	r2, r3
     53a:	2301      	movs	r3, #1
     53c:	4013      	ands	r3, r2
     53e:	d00a      	beq.n	556 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
     540:	68fb      	ldr	r3, [r7, #12]
     542:	7e9b      	ldrb	r3, [r3, #26]
     544:	001a      	movs	r2, r3
     546:	2301      	movs	r3, #1
     548:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     54a:	d004      	beq.n	556 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     54c:	68fb      	ldr	r3, [r7, #12]
     54e:	689b      	ldr	r3, [r3, #8]
     550:	68fa      	ldr	r2, [r7, #12]
     552:	0010      	movs	r0, r2
     554:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     556:	68bb      	ldr	r3, [r7, #8]
     558:	2204      	movs	r2, #4
     55a:	4013      	ands	r3, r2
     55c:	d014      	beq.n	588 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     55e:	68fb      	ldr	r3, [r7, #12]
     560:	681b      	ldr	r3, [r3, #0]
     562:	2204      	movs	r2, #4
     564:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     566:	68fb      	ldr	r3, [r7, #12]
     568:	7edb      	ldrb	r3, [r3, #27]
     56a:	001a      	movs	r2, r3
     56c:	2302      	movs	r3, #2
     56e:	4013      	ands	r3, r2
     570:	d00a      	beq.n	588 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     572:	68fb      	ldr	r3, [r7, #12]
     574:	7e9b      	ldrb	r3, [r3, #26]
     576:	001a      	movs	r2, r3
     578:	2302      	movs	r3, #2
     57a:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     57c:	d004      	beq.n	588 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     57e:	68fb      	ldr	r3, [r7, #12]
     580:	68db      	ldr	r3, [r3, #12]
     582:	68fa      	ldr	r2, [r7, #12]
     584:	0010      	movs	r0, r2
     586:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     588:	68bb      	ldr	r3, [r7, #8]
     58a:	2202      	movs	r2, #2
     58c:	4013      	ands	r3, r2
     58e:	d014      	beq.n	5ba <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     590:	68fb      	ldr	r3, [r7, #12]
     592:	681b      	ldr	r3, [r3, #0]
     594:	2202      	movs	r2, #2
     596:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     598:	68fb      	ldr	r3, [r7, #12]
     59a:	7edb      	ldrb	r3, [r3, #27]
     59c:	001a      	movs	r2, r3
     59e:	2304      	movs	r3, #4
     5a0:	4013      	ands	r3, r2
     5a2:	d00a      	beq.n	5ba <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     5a4:	68fb      	ldr	r3, [r7, #12]
     5a6:	7e9b      	ldrb	r3, [r3, #26]
     5a8:	001a      	movs	r2, r3
     5aa:	2304      	movs	r3, #4
     5ac:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     5ae:	d004      	beq.n	5ba <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     5b0:	68fb      	ldr	r3, [r7, #12]
     5b2:	691b      	ldr	r3, [r3, #16]
     5b4:	68fa      	ldr	r2, [r7, #12]
     5b6:	0010      	movs	r0, r2
     5b8:	4798      	blx	r3
		}
	}
}
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	46bd      	mov	sp, r7
     5be:	b004      	add	sp, #16
     5c0:	bd80      	pop	{r7, pc}
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	200045ac 	.word	0x200045ac
     5c8:	00000401 	.word	0x00000401
     5cc:	00000429 	.word	0x00000429
     5d0:	00000471 	.word	0x00000471

000005d4 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     5d4:	b580      	push	{r7, lr}
     5d6:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     5d8:	2000      	movs	r0, #0
     5da:	4b02      	ldr	r3, [pc, #8]	; (5e4 <ADC_Handler+0x10>)
     5dc:	4798      	blx	r3
}
     5de:	46c0      	nop			; (mov r8, r8)
     5e0:	46bd      	mov	sp, r7
     5e2:	bd80      	pop	{r7, pc}
     5e4:	00000495 	.word	0x00000495

000005e8 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     5e8:	b580      	push	{r7, lr}
     5ea:	b082      	sub	sp, #8
     5ec:	af00      	add	r7, sp, #0
     5ee:	0002      	movs	r2, r0
     5f0:	1dfb      	adds	r3, r7, #7
     5f2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     5f4:	4a07      	ldr	r2, [pc, #28]	; (614 <system_interrupt_disable+0x2c>)
     5f6:	1dfb      	adds	r3, r7, #7
     5f8:	781b      	ldrb	r3, [r3, #0]
     5fa:	0019      	movs	r1, r3
     5fc:	231f      	movs	r3, #31
     5fe:	400b      	ands	r3, r1
     600:	2101      	movs	r1, #1
     602:	4099      	lsls	r1, r3
     604:	000b      	movs	r3, r1
     606:	0019      	movs	r1, r3
     608:	2380      	movs	r3, #128	; 0x80
     60a:	50d1      	str	r1, [r2, r3]
}
     60c:	46c0      	nop			; (mov r8, r8)
     60e:	46bd      	mov	sp, r7
     610:	b002      	add	sp, #8
     612:	bd80      	pop	{r7, pc}
     614:	e000e100 	.word	0xe000e100

00000618 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
     618:	b580      	push	{r7, lr}
     61a:	b084      	sub	sp, #16
     61c:	af00      	add	r7, sp, #0
     61e:	0002      	movs	r2, r0
     620:	1dfb      	adds	r3, r7, #7
     622:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
     624:	1dfb      	adds	r3, r7, #7
     626:	781a      	ldrb	r2, [r3, #0]
     628:	4b37      	ldr	r3, [pc, #220]	; (708 <_dac_interrupt_handler+0xf0>)
     62a:	0092      	lsls	r2, r2, #2
     62c:	58d3      	ldr	r3, [r2, r3]
     62e:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
     630:	68fb      	ldr	r3, [r7, #12]
     632:	681b      	ldr	r3, [r3, #0]
     634:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
     636:	68bb      	ldr	r3, [r7, #8]
     638:	799b      	ldrb	r3, [r3, #6]
     63a:	b2db      	uxtb	r3, r3
     63c:	001a      	movs	r2, r3
     63e:	2301      	movs	r3, #1
     640:	4013      	ands	r3, r2
     642:	d00e      	beq.n	662 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
     644:	68bb      	ldr	r3, [r7, #8]
     646:	2201      	movs	r2, #1
     648:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
     64a:	68fb      	ldr	r3, [r7, #12]
     64c:	3314      	adds	r3, #20
     64e:	2b00      	cmp	r3, #0
     650:	d007      	beq.n	662 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
     652:	68fb      	ldr	r3, [r7, #12]
     654:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
     656:	2b00      	cmp	r3, #0
     658:	d003      	beq.n	662 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
     65a:	68fb      	ldr	r3, [r7, #12]
     65c:	699b      	ldr	r3, [r3, #24]
     65e:	2000      	movs	r0, #0
     660:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
     662:	68bb      	ldr	r3, [r7, #8]
     664:	799b      	ldrb	r3, [r3, #6]
     666:	b2db      	uxtb	r3, r3
     668:	001a      	movs	r2, r3
     66a:	2302      	movs	r3, #2
     66c:	4013      	ands	r3, r2
     66e:	d047      	beq.n	700 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     670:	68bb      	ldr	r3, [r7, #8]
     672:	2202      	movs	r2, #2
     674:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
     676:	68fb      	ldr	r3, [r7, #12]
     678:	899b      	ldrh	r3, [r3, #12]
     67a:	b29b      	uxth	r3, r3
     67c:	2b00      	cmp	r3, #0
     67e:	d033      	beq.n	6e8 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
     680:	68fb      	ldr	r3, [r7, #12]
     682:	689a      	ldr	r2, [r3, #8]
     684:	68fb      	ldr	r3, [r7, #12]
     686:	89db      	ldrh	r3, [r3, #14]
     688:	b29b      	uxth	r3, r3
     68a:	1c59      	adds	r1, r3, #1
     68c:	b288      	uxth	r0, r1
     68e:	68f9      	ldr	r1, [r7, #12]
     690:	81c8      	strh	r0, [r1, #14]
     692:	005b      	lsls	r3, r3, #1
     694:	18d3      	adds	r3, r2, r3
     696:	881b      	ldrh	r3, [r3, #0]
     698:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
     69a:	68bb      	ldr	r3, [r7, #8]
     69c:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
     69e:	68fb      	ldr	r3, [r7, #12]
     6a0:	899b      	ldrh	r3, [r3, #12]
     6a2:	b29b      	uxth	r3, r3
     6a4:	3b01      	subs	r3, #1
     6a6:	b29a      	uxth	r2, r3
     6a8:	68fb      	ldr	r3, [r7, #12]
     6aa:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
     6ac:	68fb      	ldr	r3, [r7, #12]
     6ae:	899b      	ldrh	r3, [r3, #12]
     6b0:	b29b      	uxth	r3, r3
     6b2:	2b00      	cmp	r3, #0
     6b4:	d118      	bne.n	6e8 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
     6b6:	68fb      	ldr	r3, [r7, #12]
     6b8:	2220      	movs	r2, #32
     6ba:	2100      	movs	r1, #0
     6bc:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
     6be:	68bb      	ldr	r3, [r7, #8]
     6c0:	2202      	movs	r2, #2
     6c2:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     6c4:	68bb      	ldr	r3, [r7, #8]
     6c6:	2202      	movs	r2, #2
     6c8:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
     6ca:	2019      	movs	r0, #25
     6cc:	4b0f      	ldr	r3, [pc, #60]	; (70c <_dac_interrupt_handler+0xf4>)
     6ce:	4798      	blx	r3

				if ((module->callback) &&
     6d0:	68fb      	ldr	r3, [r7, #12]
     6d2:	3314      	adds	r3, #20
     6d4:	2b00      	cmp	r3, #0
     6d6:	d007      	beq.n	6e8 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
     6d8:	68fb      	ldr	r3, [r7, #12]
     6da:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
     6dc:	2b00      	cmp	r3, #0
     6de:	d003      	beq.n	6e8 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
     6e0:	68fb      	ldr	r3, [r7, #12]
     6e2:	69db      	ldr	r3, [r3, #28]
     6e4:	2000      	movs	r0, #0
     6e6:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
     6e8:	68fb      	ldr	r3, [r7, #12]
     6ea:	3314      	adds	r3, #20
     6ec:	2b00      	cmp	r3, #0
     6ee:	d007      	beq.n	700 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
     6f0:	68fb      	ldr	r3, [r7, #12]
     6f2:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
     6f4:	2b00      	cmp	r3, #0
     6f6:	d003      	beq.n	700 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
     6f8:	68fb      	ldr	r3, [r7, #12]
     6fa:	695b      	ldr	r3, [r3, #20]
     6fc:	2000      	movs	r0, #0
     6fe:	4798      	blx	r3
		}
	}
}
     700:	46c0      	nop			; (mov r8, r8)
     702:	46bd      	mov	sp, r7
     704:	b004      	add	sp, #16
     706:	bd80      	pop	{r7, pc}
     708:	200045b0 	.word	0x200045b0
     70c:	000005e9 	.word	0x000005e9

00000710 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
     710:	b580      	push	{r7, lr}
     712:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
     714:	2000      	movs	r0, #0
     716:	4b02      	ldr	r3, [pc, #8]	; (720 <DAC_Handler+0x10>)
     718:	4798      	blx	r3
}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	46bd      	mov	sp, r7
     71e:	bd80      	pop	{r7, pc}
     720:	00000619 	.word	0x00000619

00000724 <system_interrupt_enter_critical_section>:
{
     724:	b580      	push	{r7, lr}
     726:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     728:	4b02      	ldr	r3, [pc, #8]	; (734 <system_interrupt_enter_critical_section+0x10>)
     72a:	4798      	blx	r3
}
     72c:	46c0      	nop			; (mov r8, r8)
     72e:	46bd      	mov	sp, r7
     730:	bd80      	pop	{r7, pc}
     732:	46c0      	nop			; (mov r8, r8)
     734:	000126c9 	.word	0x000126c9

00000738 <system_interrupt_leave_critical_section>:
{
     738:	b580      	push	{r7, lr}
     73a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     73c:	4b02      	ldr	r3, [pc, #8]	; (748 <system_interrupt_leave_critical_section+0x10>)
     73e:	4798      	blx	r3
}
     740:	46c0      	nop			; (mov r8, r8)
     742:	46bd      	mov	sp, r7
     744:	bd80      	pop	{r7, pc}
     746:	46c0      	nop			; (mov r8, r8)
     748:	0001271d 	.word	0x0001271d

0000074c <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     74c:	b580      	push	{r7, lr}
     74e:	b086      	sub	sp, #24
     750:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
     752:	4b49      	ldr	r3, [pc, #292]	; (878 <DMAC_Handler+0x12c>)
     754:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     756:	4b49      	ldr	r3, [pc, #292]	; (87c <DMAC_Handler+0x130>)
     758:	8c1b      	ldrh	r3, [r3, #32]
     75a:	b29b      	uxth	r3, r3
     75c:	b2da      	uxtb	r2, r3
     75e:	2317      	movs	r3, #23
     760:	18fb      	adds	r3, r7, r3
     762:	210f      	movs	r1, #15
     764:	400a      	ands	r2, r1
     766:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     768:	2317      	movs	r3, #23
     76a:	18fb      	adds	r3, r7, r3
     76c:	781a      	ldrb	r2, [r3, #0]
     76e:	4b44      	ldr	r3, [pc, #272]	; (880 <DMAC_Handler+0x134>)
     770:	0092      	lsls	r2, r2, #2
     772:	58d3      	ldr	r3, [r2, r3]
     774:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     776:	4a41      	ldr	r2, [pc, #260]	; (87c <DMAC_Handler+0x130>)
     778:	693b      	ldr	r3, [r7, #16]
     77a:	781b      	ldrb	r3, [r3, #0]
     77c:	210f      	movs	r1, #15
     77e:	400b      	ands	r3, r1
     780:	b2d9      	uxtb	r1, r3
     782:	233f      	movs	r3, #63	; 0x3f
     784:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
     786:	493d      	ldr	r1, [pc, #244]	; (87c <DMAC_Handler+0x130>)
     788:	230f      	movs	r3, #15
     78a:	18fb      	adds	r3, r7, r3
     78c:	224e      	movs	r2, #78	; 0x4e
     78e:	5c8a      	ldrb	r2, [r1, r2]
     790:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     792:	693b      	ldr	r3, [r7, #16]
     794:	781b      	ldrb	r3, [r3, #0]
     796:	4a3b      	ldr	r2, [pc, #236]	; (884 <DMAC_Handler+0x138>)
     798:	011b      	lsls	r3, r3, #4
     79a:	18d3      	adds	r3, r2, r3
     79c:	3302      	adds	r3, #2
     79e:	881b      	ldrh	r3, [r3, #0]
     7a0:	b29b      	uxth	r3, r3
     7a2:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     7a4:	693b      	ldr	r3, [r7, #16]
     7a6:	781b      	ldrb	r3, [r3, #0]
     7a8:	4a37      	ldr	r2, [pc, #220]	; (888 <DMAC_Handler+0x13c>)
     7aa:	011b      	lsls	r3, r3, #4
     7ac:	18d3      	adds	r3, r2, r3
     7ae:	3302      	adds	r3, #2
     7b0:	881b      	ldrh	r3, [r3, #0]
     7b2:	b29b      	uxth	r3, r3
     7b4:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
     7b6:	68ba      	ldr	r2, [r7, #8]
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	1ad2      	subs	r2, r2, r3
     7bc:	693b      	ldr	r3, [r7, #16]
     7be:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     7c0:	230f      	movs	r3, #15
     7c2:	18fb      	adds	r3, r7, r3
     7c4:	781b      	ldrb	r3, [r3, #0]
     7c6:	2201      	movs	r2, #1
     7c8:	4013      	ands	r3, r2
     7ca:	d016      	beq.n	7fa <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     7cc:	4a2b      	ldr	r2, [pc, #172]	; (87c <DMAC_Handler+0x130>)
     7ce:	234e      	movs	r3, #78	; 0x4e
     7d0:	2101      	movs	r1, #1
     7d2:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     7d4:	693b      	ldr	r3, [r7, #16]
     7d6:	2210      	movs	r2, #16
     7d8:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     7da:	693b      	ldr	r3, [r7, #16]
     7dc:	7c1b      	ldrb	r3, [r3, #16]
     7de:	001a      	movs	r2, r3
     7e0:	2301      	movs	r3, #1
     7e2:	4013      	ands	r3, r2
     7e4:	d042      	beq.n	86c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     7e6:	693b      	ldr	r3, [r7, #16]
     7e8:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     7ea:	2b00      	cmp	r3, #0
     7ec:	d03e      	beq.n	86c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     7ee:	693b      	ldr	r3, [r7, #16]
     7f0:	685b      	ldr	r3, [r3, #4]
     7f2:	693a      	ldr	r2, [r7, #16]
     7f4:	0010      	movs	r0, r2
     7f6:	4798      	blx	r3
     7f8:	e038      	b.n	86c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     7fa:	230f      	movs	r3, #15
     7fc:	18fb      	adds	r3, r7, r3
     7fe:	781b      	ldrb	r3, [r3, #0]
     800:	2202      	movs	r2, #2
     802:	4013      	ands	r3, r2
     804:	d016      	beq.n	834 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     806:	4a1d      	ldr	r2, [pc, #116]	; (87c <DMAC_Handler+0x130>)
     808:	234e      	movs	r3, #78	; 0x4e
     80a:	2102      	movs	r1, #2
     80c:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
     80e:	693b      	ldr	r3, [r7, #16]
     810:	2200      	movs	r2, #0
     812:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     814:	693b      	ldr	r3, [r7, #16]
     816:	7c1b      	ldrb	r3, [r3, #16]
     818:	001a      	movs	r2, r3
     81a:	2302      	movs	r3, #2
     81c:	4013      	ands	r3, r2
     81e:	d025      	beq.n	86c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     820:	693b      	ldr	r3, [r7, #16]
     822:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     824:	2b00      	cmp	r3, #0
     826:	d021      	beq.n	86c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     828:	693b      	ldr	r3, [r7, #16]
     82a:	689b      	ldr	r3, [r3, #8]
     82c:	693a      	ldr	r2, [r7, #16]
     82e:	0010      	movs	r0, r2
     830:	4798      	blx	r3
     832:	e01b      	b.n	86c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     834:	230f      	movs	r3, #15
     836:	18fb      	adds	r3, r7, r3
     838:	781b      	ldrb	r3, [r3, #0]
     83a:	2204      	movs	r2, #4
     83c:	4013      	ands	r3, r2
     83e:	d015      	beq.n	86c <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     840:	4a0e      	ldr	r2, [pc, #56]	; (87c <DMAC_Handler+0x130>)
     842:	234e      	movs	r3, #78	; 0x4e
     844:	2104      	movs	r1, #4
     846:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
     848:	693b      	ldr	r3, [r7, #16]
     84a:	2206      	movs	r2, #6
     84c:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     84e:	693b      	ldr	r3, [r7, #16]
     850:	7c1b      	ldrb	r3, [r3, #16]
     852:	001a      	movs	r2, r3
     854:	2304      	movs	r3, #4
     856:	4013      	ands	r3, r2
     858:	d008      	beq.n	86c <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     85a:	693b      	ldr	r3, [r7, #16]
     85c:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     85e:	2b00      	cmp	r3, #0
     860:	d004      	beq.n	86c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     862:	693b      	ldr	r3, [r7, #16]
     864:	68db      	ldr	r3, [r3, #12]
     866:	693a      	ldr	r2, [r7, #16]
     868:	0010      	movs	r0, r2
     86a:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
     86c:	4b07      	ldr	r3, [pc, #28]	; (88c <DMAC_Handler+0x140>)
     86e:	4798      	blx	r3
}
     870:	46c0      	nop			; (mov r8, r8)
     872:	46bd      	mov	sp, r7
     874:	b006      	add	sp, #24
     876:	bd80      	pop	{r7, pc}
     878:	00000725 	.word	0x00000725
     87c:	41004800 	.word	0x41004800
     880:	20000770 	.word	0x20000770
     884:	200045c0 	.word	0x200045c0
     888:	20000720 	.word	0x20000720
     88c:	00000739 	.word	0x00000739

00000890 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     890:	b580      	push	{r7, lr}
     892:	b082      	sub	sp, #8
     894:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
     896:	4b15      	ldr	r3, [pc, #84]	; (8ec <EVSYS_Handler+0x5c>)
     898:	691b      	ldr	r3, [r3, #16]
     89a:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     89c:	4b14      	ldr	r3, [pc, #80]	; (8f0 <EVSYS_Handler+0x60>)
     89e:	699b      	ldr	r3, [r3, #24]
     8a0:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
     8a2:	4b12      	ldr	r3, [pc, #72]	; (8ec <EVSYS_Handler+0x5c>)
     8a4:	689a      	ldr	r2, [r3, #8]
     8a6:	683b      	ldr	r3, [r7, #0]
     8a8:	431a      	orrs	r2, r3
     8aa:	4b10      	ldr	r3, [pc, #64]	; (8ec <EVSYS_Handler+0x5c>)
     8ac:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     8ae:	4b10      	ldr	r3, [pc, #64]	; (8f0 <EVSYS_Handler+0x60>)
     8b0:	4a10      	ldr	r2, [pc, #64]	; (8f4 <EVSYS_Handler+0x64>)
     8b2:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     8b4:	e008      	b.n	8c8 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
     8b6:	687b      	ldr	r3, [r7, #4]
     8b8:	685a      	ldr	r2, [r3, #4]
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	681b      	ldr	r3, [r3, #0]
     8be:	0018      	movs	r0, r3
     8c0:	4790      	blx	r2
		current_hook = current_hook->next;
     8c2:	687b      	ldr	r3, [r7, #4]
     8c4:	689b      	ldr	r3, [r3, #8]
     8c6:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
     8c8:	687b      	ldr	r3, [r7, #4]
     8ca:	2b00      	cmp	r3, #0
     8cc:	d1f3      	bne.n	8b6 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     8ce:	4b07      	ldr	r3, [pc, #28]	; (8ec <EVSYS_Handler+0x5c>)
     8d0:	68db      	ldr	r3, [r3, #12]
     8d2:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
     8d4:	4b05      	ldr	r3, [pc, #20]	; (8ec <EVSYS_Handler+0x5c>)
     8d6:	689b      	ldr	r3, [r3, #8]
     8d8:	683a      	ldr	r2, [r7, #0]
     8da:	43d2      	mvns	r2, r2
     8dc:	401a      	ands	r2, r3
     8de:	4b03      	ldr	r3, [pc, #12]	; (8ec <EVSYS_Handler+0x5c>)
     8e0:	609a      	str	r2, [r3, #8]
}
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	46bd      	mov	sp, r7
     8e6:	b002      	add	sp, #8
     8e8:	bd80      	pop	{r7, pc}
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	20000000 	.word	0x20000000
     8f0:	42000400 	.word	0x42000400
     8f4:	0f0fffff 	.word	0x0f0fffff

000008f8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     8f8:	b580      	push	{r7, lr}
     8fa:	b082      	sub	sp, #8
     8fc:	af00      	add	r7, sp, #0
     8fe:	0002      	movs	r2, r0
     900:	6039      	str	r1, [r7, #0]
     902:	1dfb      	adds	r3, r7, #7
     904:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     906:	1dfb      	adds	r3, r7, #7
     908:	781b      	ldrb	r3, [r3, #0]
     90a:	2b01      	cmp	r3, #1
     90c:	d00a      	beq.n	924 <system_apb_clock_set_mask+0x2c>
     90e:	2b02      	cmp	r3, #2
     910:	d00f      	beq.n	932 <system_apb_clock_set_mask+0x3a>
     912:	2b00      	cmp	r3, #0
     914:	d114      	bne.n	940 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     916:	4b0e      	ldr	r3, [pc, #56]	; (950 <system_apb_clock_set_mask+0x58>)
     918:	4a0d      	ldr	r2, [pc, #52]	; (950 <system_apb_clock_set_mask+0x58>)
     91a:	6991      	ldr	r1, [r2, #24]
     91c:	683a      	ldr	r2, [r7, #0]
     91e:	430a      	orrs	r2, r1
     920:	619a      	str	r2, [r3, #24]
			break;
     922:	e00f      	b.n	944 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     924:	4b0a      	ldr	r3, [pc, #40]	; (950 <system_apb_clock_set_mask+0x58>)
     926:	4a0a      	ldr	r2, [pc, #40]	; (950 <system_apb_clock_set_mask+0x58>)
     928:	69d1      	ldr	r1, [r2, #28]
     92a:	683a      	ldr	r2, [r7, #0]
     92c:	430a      	orrs	r2, r1
     92e:	61da      	str	r2, [r3, #28]
			break;
     930:	e008      	b.n	944 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     932:	4b07      	ldr	r3, [pc, #28]	; (950 <system_apb_clock_set_mask+0x58>)
     934:	4a06      	ldr	r2, [pc, #24]	; (950 <system_apb_clock_set_mask+0x58>)
     936:	6a11      	ldr	r1, [r2, #32]
     938:	683a      	ldr	r2, [r7, #0]
     93a:	430a      	orrs	r2, r1
     93c:	621a      	str	r2, [r3, #32]
			break;
     93e:	e001      	b.n	944 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     940:	2317      	movs	r3, #23
     942:	e000      	b.n	946 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     944:	2300      	movs	r3, #0
}
     946:	0018      	movs	r0, r3
     948:	46bd      	mov	sp, r7
     94a:	b002      	add	sp, #8
     94c:	bd80      	pop	{r7, pc}
     94e:	46c0      	nop			; (mov r8, r8)
     950:	40000400 	.word	0x40000400

00000954 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
     954:	b580      	push	{r7, lr}
     956:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
     958:	2102      	movs	r1, #2
     95a:	2002      	movs	r0, #2
     95c:	4b07      	ldr	r3, [pc, #28]	; (97c <_system_events_init+0x28>)
     95e:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     960:	4b07      	ldr	r3, [pc, #28]	; (980 <_system_events_init+0x2c>)
     962:	2201      	movs	r2, #1
     964:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     966:	46c0      	nop			; (mov r8, r8)
     968:	4b05      	ldr	r3, [pc, #20]	; (980 <_system_events_init+0x2c>)
     96a:	781b      	ldrb	r3, [r3, #0]
     96c:	b2db      	uxtb	r3, r3
     96e:	001a      	movs	r2, r3
     970:	2301      	movs	r3, #1
     972:	4013      	ands	r3, r2
     974:	d1f8      	bne.n	968 <_system_events_init+0x14>
	}
}
     976:	46c0      	nop			; (mov r8, r8)
     978:	46bd      	mov	sp, r7
     97a:	bd80      	pop	{r7, pc}
     97c:	000008f9 	.word	0x000008f9
     980:	42000400 	.word	0x42000400

00000984 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     984:	b580      	push	{r7, lr}
     986:	b084      	sub	sp, #16
     988:	af00      	add	r7, sp, #0
     98a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     98c:	687b      	ldr	r3, [r7, #4]
     98e:	681b      	ldr	r3, [r3, #0]
     990:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     992:	68fb      	ldr	r3, [r7, #12]
     994:	69db      	ldr	r3, [r3, #28]
     996:	2207      	movs	r2, #7
     998:	4013      	ands	r3, r2
     99a:	1e5a      	subs	r2, r3, #1
     99c:	4193      	sbcs	r3, r2
     99e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     9a0:	0018      	movs	r0, r3
     9a2:	46bd      	mov	sp, r7
     9a4:	b004      	add	sp, #16
     9a6:	bd80      	pop	{r7, pc}

000009a8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     9a8:	b580      	push	{r7, lr}
     9aa:	b082      	sub	sp, #8
     9ac:	af00      	add	r7, sp, #0
     9ae:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     9b0:	46c0      	nop			; (mov r8, r8)
     9b2:	687b      	ldr	r3, [r7, #4]
     9b4:	0018      	movs	r0, r3
     9b6:	4b04      	ldr	r3, [pc, #16]	; (9c8 <_i2c_master_wait_for_sync+0x20>)
     9b8:	4798      	blx	r3
     9ba:	1e03      	subs	r3, r0, #0
     9bc:	d1f9      	bne.n	9b2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     9be:	46c0      	nop			; (mov r8, r8)
     9c0:	46bd      	mov	sp, r7
     9c2:	b002      	add	sp, #8
     9c4:	bd80      	pop	{r7, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	00000985 	.word	0x00000985

000009cc <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     9cc:	b580      	push	{r7, lr}
     9ce:	b084      	sub	sp, #16
     9d0:	af00      	add	r7, sp, #0
     9d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	681b      	ldr	r3, [r3, #0]
     9d8:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     9da:	68fb      	ldr	r3, [r7, #12]
     9dc:	681b      	ldr	r3, [r3, #0]
     9de:	011b      	lsls	r3, r3, #4
     9e0:	0fdb      	lsrs	r3, r3, #31
     9e2:	b2db      	uxtb	r3, r3
     9e4:	001a      	movs	r2, r3
     9e6:	230b      	movs	r3, #11
     9e8:	18fb      	adds	r3, r7, r3
     9ea:	1e51      	subs	r1, r2, #1
     9ec:	418a      	sbcs	r2, r1
     9ee:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     9f0:	2308      	movs	r3, #8
     9f2:	18fb      	adds	r3, r7, r3
     9f4:	687a      	ldr	r2, [r7, #4]
     9f6:	8b52      	ldrh	r2, [r2, #26]
     9f8:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
     9fa:	687b      	ldr	r3, [r7, #4]
     9fc:	8b9b      	ldrh	r3, [r3, #28]
     9fe:	b29a      	uxth	r2, r3
     a00:	2308      	movs	r3, #8
     a02:	18fb      	adds	r3, r7, r3
     a04:	2108      	movs	r1, #8
     a06:	1879      	adds	r1, r7, r1
     a08:	8809      	ldrh	r1, [r1, #0]
     a0a:	1a8a      	subs	r2, r1, r2
     a0c:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
     a0e:	687b      	ldr	r3, [r7, #4]
     a10:	8b9b      	ldrh	r3, [r3, #28]
     a12:	b29b      	uxth	r3, r3
     a14:	3b01      	subs	r3, #1
     a16:	b29a      	uxth	r2, r3
     a18:	687b      	ldr	r3, [r7, #4]
     a1a:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
     a1c:	230b      	movs	r3, #11
     a1e:	18fb      	adds	r3, r7, r3
     a20:	781b      	ldrb	r3, [r3, #0]
     a22:	2b00      	cmp	r3, #0
     a24:	d010      	beq.n	a48 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
     a26:	687b      	ldr	r3, [r7, #4]
     a28:	7adb      	ldrb	r3, [r3, #11]
     a2a:	2b00      	cmp	r3, #0
     a2c:	d01c      	beq.n	a68 <_i2c_master_read+0x9c>
     a2e:	687b      	ldr	r3, [r7, #4]
     a30:	8b9b      	ldrh	r3, [r3, #28]
     a32:	b29b      	uxth	r3, r3
     a34:	2b01      	cmp	r3, #1
     a36:	d117      	bne.n	a68 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     a38:	68fb      	ldr	r3, [r7, #12]
     a3a:	685b      	ldr	r3, [r3, #4]
     a3c:	2280      	movs	r2, #128	; 0x80
     a3e:	02d2      	lsls	r2, r2, #11
     a40:	431a      	orrs	r2, r3
     a42:	68fb      	ldr	r3, [r7, #12]
     a44:	605a      	str	r2, [r3, #4]
     a46:	e00f      	b.n	a68 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
     a48:	687b      	ldr	r3, [r7, #4]
     a4a:	7adb      	ldrb	r3, [r3, #11]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00b      	beq.n	a68 <_i2c_master_read+0x9c>
     a50:	687b      	ldr	r3, [r7, #4]
     a52:	8b9b      	ldrh	r3, [r3, #28]
     a54:	b29b      	uxth	r3, r3
     a56:	2b00      	cmp	r3, #0
     a58:	d106      	bne.n	a68 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     a5a:	68fb      	ldr	r3, [r7, #12]
     a5c:	685b      	ldr	r3, [r3, #4]
     a5e:	2280      	movs	r2, #128	; 0x80
     a60:	02d2      	lsls	r2, r2, #11
     a62:	431a      	orrs	r2, r3
     a64:	68fb      	ldr	r3, [r7, #12]
     a66:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
     a68:	687b      	ldr	r3, [r7, #4]
     a6a:	8b9b      	ldrh	r3, [r3, #28]
     a6c:	b29b      	uxth	r3, r3
     a6e:	2b00      	cmp	r3, #0
     a70:	d10e      	bne.n	a90 <_i2c_master_read+0xc4>
		if (module->send_stop) {
     a72:	687b      	ldr	r3, [r7, #4]
     a74:	7a9b      	ldrb	r3, [r3, #10]
     a76:	2b00      	cmp	r3, #0
     a78:	d00a      	beq.n	a90 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     a7a:	687b      	ldr	r3, [r7, #4]
     a7c:	0018      	movs	r0, r3
     a7e:	4b0e      	ldr	r3, [pc, #56]	; (ab8 <_i2c_master_read+0xec>)
     a80:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a82:	68fb      	ldr	r3, [r7, #12]
     a84:	685b      	ldr	r3, [r3, #4]
     a86:	22c0      	movs	r2, #192	; 0xc0
     a88:	0292      	lsls	r2, r2, #10
     a8a:	431a      	orrs	r2, r3
     a8c:	68fb      	ldr	r3, [r7, #12]
     a8e:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     a90:	687b      	ldr	r3, [r7, #4]
     a92:	0018      	movs	r0, r3
     a94:	4b08      	ldr	r3, [pc, #32]	; (ab8 <_i2c_master_read+0xec>)
     a96:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     a98:	687b      	ldr	r3, [r7, #4]
     a9a:	6a1a      	ldr	r2, [r3, #32]
     a9c:	2308      	movs	r3, #8
     a9e:	18fb      	adds	r3, r7, r3
     aa0:	881b      	ldrh	r3, [r3, #0]
     aa2:	18d3      	adds	r3, r2, r3
     aa4:	68fa      	ldr	r2, [r7, #12]
     aa6:	2128      	movs	r1, #40	; 0x28
     aa8:	5c52      	ldrb	r2, [r2, r1]
     aaa:	b2d2      	uxtb	r2, r2
     aac:	701a      	strb	r2, [r3, #0]
}
     aae:	46c0      	nop			; (mov r8, r8)
     ab0:	46bd      	mov	sp, r7
     ab2:	b004      	add	sp, #16
     ab4:	bd80      	pop	{r7, pc}
     ab6:	46c0      	nop			; (mov r8, r8)
     ab8:	000009a9 	.word	0x000009a9

00000abc <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     abc:	b580      	push	{r7, lr}
     abe:	b084      	sub	sp, #16
     ac0:	af00      	add	r7, sp, #0
     ac2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ac4:	687b      	ldr	r3, [r7, #4]
     ac6:	681b      	ldr	r3, [r3, #0]
     ac8:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     aca:	68fb      	ldr	r3, [r7, #12]
     acc:	8b5b      	ldrh	r3, [r3, #26]
     ace:	b29b      	uxth	r3, r3
     ad0:	001a      	movs	r2, r3
     ad2:	2304      	movs	r3, #4
     ad4:	4013      	ands	r3, r2
     ad6:	d004      	beq.n	ae2 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     ad8:	687b      	ldr	r3, [r7, #4]
     ada:	2225      	movs	r2, #37	; 0x25
     adc:	211e      	movs	r1, #30
     ade:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
     ae0:	e024      	b.n	b2c <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
     ae2:	230a      	movs	r3, #10
     ae4:	18fb      	adds	r3, r7, r3
     ae6:	687a      	ldr	r2, [r7, #4]
     ae8:	8b52      	ldrh	r2, [r2, #26]
     aea:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
     aec:	687b      	ldr	r3, [r7, #4]
     aee:	8b9b      	ldrh	r3, [r3, #28]
     af0:	b29a      	uxth	r2, r3
     af2:	230a      	movs	r3, #10
     af4:	18fb      	adds	r3, r7, r3
     af6:	210a      	movs	r1, #10
     af8:	1879      	adds	r1, r7, r1
     afa:	8809      	ldrh	r1, [r1, #0]
     afc:	1a8a      	subs	r2, r1, r2
     afe:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
     b00:	687b      	ldr	r3, [r7, #4]
     b02:	8b9b      	ldrh	r3, [r3, #28]
     b04:	b29b      	uxth	r3, r3
     b06:	3b01      	subs	r3, #1
     b08:	b29a      	uxth	r2, r3
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	0018      	movs	r0, r3
     b12:	4b08      	ldr	r3, [pc, #32]	; (b34 <_i2c_master_write+0x78>)
     b14:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     b16:	687b      	ldr	r3, [r7, #4]
     b18:	6a1a      	ldr	r2, [r3, #32]
     b1a:	230a      	movs	r3, #10
     b1c:	18fb      	adds	r3, r7, r3
     b1e:	881b      	ldrh	r3, [r3, #0]
     b20:	18d3      	adds	r3, r2, r3
     b22:	781b      	ldrb	r3, [r3, #0]
     b24:	b2d9      	uxtb	r1, r3
     b26:	68fb      	ldr	r3, [r7, #12]
     b28:	2228      	movs	r2, #40	; 0x28
     b2a:	5499      	strb	r1, [r3, r2]
}
     b2c:	46bd      	mov	sp, r7
     b2e:	b004      	add	sp, #16
     b30:	bd80      	pop	{r7, pc}
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	000009a9 	.word	0x000009a9

00000b38 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
     b38:	b580      	push	{r7, lr}
     b3a:	b084      	sub	sp, #16
     b3c:	af00      	add	r7, sp, #0
     b3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b40:	687b      	ldr	r3, [r7, #4]
     b42:	681b      	ldr	r3, [r3, #0]
     b44:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     b46:	68fb      	ldr	r3, [r7, #12]
     b48:	7e1b      	ldrb	r3, [r3, #24]
     b4a:	b2db      	uxtb	r3, r3
     b4c:	001a      	movs	r2, r3
     b4e:	2301      	movs	r3, #1
     b50:	4013      	ands	r3, r2
     b52:	d02b      	beq.n	bac <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     b54:	68fb      	ldr	r3, [r7, #12]
     b56:	2201      	movs	r2, #1
     b58:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     b5a:	68fb      	ldr	r3, [r7, #12]
     b5c:	8b5b      	ldrh	r3, [r3, #26]
     b5e:	b29b      	uxth	r3, r3
     b60:	001a      	movs	r2, r3
     b62:	2302      	movs	r3, #2
     b64:	4013      	ands	r3, r2
     b66:	d004      	beq.n	b72 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
     b68:	687b      	ldr	r3, [r7, #4]
     b6a:	2225      	movs	r2, #37	; 0x25
     b6c:	2141      	movs	r1, #65	; 0x41
     b6e:	5499      	strb	r1, [r3, r2]
     b70:	e01c      	b.n	bac <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     b72:	68fb      	ldr	r3, [r7, #12]
     b74:	8b5b      	ldrh	r3, [r3, #26]
     b76:	b29b      	uxth	r3, r3
     b78:	001a      	movs	r2, r3
     b7a:	2304      	movs	r3, #4
     b7c:	4013      	ands	r3, r2
     b7e:	d015      	beq.n	bac <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	2225      	movs	r2, #37	; 0x25
     b84:	2118      	movs	r1, #24
     b86:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
     b88:	687b      	ldr	r3, [r7, #4]
     b8a:	2200      	movs	r2, #0
     b8c:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
     b8e:	687b      	ldr	r3, [r7, #4]
     b90:	7a9b      	ldrb	r3, [r3, #10]
     b92:	2b00      	cmp	r3, #0
     b94:	d00a      	beq.n	bac <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
     b96:	687b      	ldr	r3, [r7, #4]
     b98:	0018      	movs	r0, r3
     b9a:	4b13      	ldr	r3, [pc, #76]	; (be8 <_i2c_master_async_address_response+0xb0>)
     b9c:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b9e:	68fb      	ldr	r3, [r7, #12]
     ba0:	685b      	ldr	r3, [r3, #4]
     ba2:	22c0      	movs	r2, #192	; 0xc0
     ba4:	0292      	lsls	r2, r2, #10
     ba6:	431a      	orrs	r2, r3
     ba8:	68fb      	ldr	r3, [r7, #12]
     baa:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
     bac:	687b      	ldr	r3, [r7, #4]
     bae:	8b9b      	ldrh	r3, [r3, #28]
     bb0:	b29a      	uxth	r2, r3
     bb2:	687b      	ldr	r3, [r7, #4]
     bb4:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
     bb6:	687b      	ldr	r3, [r7, #4]
     bb8:	2225      	movs	r2, #37	; 0x25
     bba:	5c9b      	ldrb	r3, [r3, r2]
     bbc:	b2db      	uxtb	r3, r3
     bbe:	2b05      	cmp	r3, #5
     bc0:	d10e      	bne.n	be0 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	2224      	movs	r2, #36	; 0x24
     bc6:	5c9b      	ldrb	r3, [r3, r2]
     bc8:	b2db      	uxtb	r3, r3
     bca:	2b00      	cmp	r3, #0
     bcc:	d104      	bne.n	bd8 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	0018      	movs	r0, r3
     bd2:	4b06      	ldr	r3, [pc, #24]	; (bec <_i2c_master_async_address_response+0xb4>)
     bd4:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
     bd6:	e003      	b.n	be0 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
     bd8:	687b      	ldr	r3, [r7, #4]
     bda:	0018      	movs	r0, r3
     bdc:	4b04      	ldr	r3, [pc, #16]	; (bf0 <_i2c_master_async_address_response+0xb8>)
     bde:	4798      	blx	r3
}
     be0:	46c0      	nop			; (mov r8, r8)
     be2:	46bd      	mov	sp, r7
     be4:	b004      	add	sp, #16
     be6:	bd80      	pop	{r7, pc}
     be8:	000009a9 	.word	0x000009a9
     bec:	00000abd 	.word	0x00000abd
     bf0:	000009cd 	.word	0x000009cd

00000bf4 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
     bf4:	b580      	push	{r7, lr}
     bf6:	b084      	sub	sp, #16
     bf8:	af00      	add	r7, sp, #0
     bfa:	60f8      	str	r0, [r7, #12]
     bfc:	60b9      	str	r1, [r7, #8]
     bfe:	1dfb      	adds	r3, r7, #7
     c00:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
     c02:	1dfb      	adds	r3, r7, #7
     c04:	781b      	ldrb	r3, [r3, #0]
     c06:	68fa      	ldr	r2, [r7, #12]
     c08:	3302      	adds	r3, #2
     c0a:	009b      	lsls	r3, r3, #2
     c0c:	18d3      	adds	r3, r2, r3
     c0e:	3304      	adds	r3, #4
     c10:	68ba      	ldr	r2, [r7, #8]
     c12:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
     c14:	68fb      	ldr	r3, [r7, #12]
     c16:	7e1b      	ldrb	r3, [r3, #24]
     c18:	b2db      	uxtb	r3, r3
     c1a:	b25a      	sxtb	r2, r3
     c1c:	1dfb      	adds	r3, r7, #7
     c1e:	781b      	ldrb	r3, [r3, #0]
     c20:	2101      	movs	r1, #1
     c22:	4099      	lsls	r1, r3
     c24:	000b      	movs	r3, r1
     c26:	b25b      	sxtb	r3, r3
     c28:	4313      	orrs	r3, r2
     c2a:	b25b      	sxtb	r3, r3
     c2c:	b2da      	uxtb	r2, r3
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	761a      	strb	r2, [r3, #24]
}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	46bd      	mov	sp, r7
     c36:	b004      	add	sp, #16
     c38:	bd80      	pop	{r7, pc}
	...

00000c3c <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     c3c:	b590      	push	{r4, r7, lr}
     c3e:	b087      	sub	sp, #28
     c40:	af00      	add	r7, sp, #0
     c42:	6078      	str	r0, [r7, #4]
     c44:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c46:	687b      	ldr	r3, [r7, #4]
     c48:	681b      	ldr	r3, [r3, #0]
     c4a:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
     c4c:	683b      	ldr	r3, [r7, #0]
     c4e:	685a      	ldr	r2, [r3, #4]
     c50:	687b      	ldr	r3, [r7, #4]
     c52:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
     c54:	683b      	ldr	r3, [r7, #0]
     c56:	885a      	ldrh	r2, [r3, #2]
     c58:	687b      	ldr	r3, [r7, #4]
     c5a:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     c5c:	687b      	ldr	r3, [r7, #4]
     c5e:	2224      	movs	r2, #36	; 0x24
     c60:	2101      	movs	r1, #1
     c62:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
     c64:	687b      	ldr	r3, [r7, #4]
     c66:	2225      	movs	r2, #37	; 0x25
     c68:	2105      	movs	r1, #5
     c6a:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     c6c:	693b      	ldr	r3, [r7, #16]
     c6e:	681b      	ldr	r3, [r3, #0]
     c70:	011b      	lsls	r3, r3, #4
     c72:	0fdb      	lsrs	r3, r3, #31
     c74:	b2db      	uxtb	r3, r3
     c76:	001a      	movs	r2, r3
     c78:	230f      	movs	r3, #15
     c7a:	18fb      	adds	r3, r7, r3
     c7c:	1e51      	subs	r1, r2, #1
     c7e:	418a      	sbcs	r2, r1
     c80:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     c82:	683b      	ldr	r3, [r7, #0]
     c84:	7a5b      	ldrb	r3, [r3, #9]
     c86:	2b00      	cmp	r3, #0
     c88:	d006      	beq.n	c98 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     c8a:	683b      	ldr	r3, [r7, #0]
     c8c:	7a9a      	ldrb	r2, [r3, #10]
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	0011      	movs	r1, r2
     c92:	0018      	movs	r0, r3
     c94:	4b3b      	ldr	r3, [pc, #236]	; (d84 <_i2c_master_read_packet+0x148>)
     c96:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     c98:	230f      	movs	r3, #15
     c9a:	18fb      	adds	r3, r7, r3
     c9c:	781b      	ldrb	r3, [r3, #0]
     c9e:	2b00      	cmp	r3, #0
     ca0:	d00b      	beq.n	cba <_i2c_master_read_packet+0x7e>
     ca2:	683b      	ldr	r3, [r7, #0]
     ca4:	885b      	ldrh	r3, [r3, #2]
     ca6:	2b01      	cmp	r3, #1
     ca8:	d107      	bne.n	cba <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     caa:	693b      	ldr	r3, [r7, #16]
     cac:	685b      	ldr	r3, [r3, #4]
     cae:	2280      	movs	r2, #128	; 0x80
     cb0:	02d2      	lsls	r2, r2, #11
     cb2:	431a      	orrs	r2, r3
     cb4:	693b      	ldr	r3, [r7, #16]
     cb6:	605a      	str	r2, [r3, #4]
     cb8:	e005      	b.n	cc6 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     cba:	693b      	ldr	r3, [r7, #16]
     cbc:	685b      	ldr	r3, [r3, #4]
     cbe:	4a32      	ldr	r2, [pc, #200]	; (d88 <_i2c_master_read_packet+0x14c>)
     cc0:	401a      	ands	r2, r3
     cc2:	693b      	ldr	r3, [r7, #16]
     cc4:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
     cc6:	683b      	ldr	r3, [r7, #0]
     cc8:	7a1b      	ldrb	r3, [r3, #8]
     cca:	2b00      	cmp	r3, #0
     ccc:	d045      	beq.n	d5a <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     cce:	683b      	ldr	r3, [r7, #0]
     cd0:	881b      	ldrh	r3, [r3, #0]
     cd2:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     cd4:	683b      	ldr	r3, [r7, #0]
     cd6:	7a5b      	ldrb	r3, [r3, #9]
     cd8:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     cda:	4313      	orrs	r3, r2
     cdc:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     cde:	2380      	movs	r3, #128	; 0x80
     ce0:	021b      	lsls	r3, r3, #8
     ce2:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
     ce4:	693b      	ldr	r3, [r7, #16]
     ce6:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     ce8:	2317      	movs	r3, #23
     cea:	18fc      	adds	r4, r7, r3
     cec:	687b      	ldr	r3, [r7, #4]
     cee:	0018      	movs	r0, r3
     cf0:	4b26      	ldr	r3, [pc, #152]	; (d8c <_i2c_master_read_packet+0x150>)
     cf2:	4798      	blx	r3
     cf4:	0003      	movs	r3, r0
     cf6:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     cf8:	693b      	ldr	r3, [r7, #16]
     cfa:	685b      	ldr	r3, [r3, #4]
     cfc:	4a22      	ldr	r2, [pc, #136]	; (d88 <_i2c_master_read_packet+0x14c>)
     cfe:	401a      	ands	r2, r3
     d00:	693b      	ldr	r3, [r7, #16]
     d02:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     d04:	2317      	movs	r3, #23
     d06:	18fb      	adds	r3, r7, r3
     d08:	781b      	ldrb	r3, [r3, #0]
     d0a:	2b00      	cmp	r3, #0
     d0c:	d107      	bne.n	d1e <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
     d0e:	2317      	movs	r3, #23
     d10:	18fc      	adds	r4, r7, r3
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	0018      	movs	r0, r3
     d16:	4b1e      	ldr	r3, [pc, #120]	; (d90 <_i2c_master_read_packet+0x154>)
     d18:	4798      	blx	r3
     d1a:	0003      	movs	r3, r0
     d1c:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
     d1e:	2317      	movs	r3, #23
     d20:	18fb      	adds	r3, r7, r3
     d22:	781b      	ldrb	r3, [r3, #0]
     d24:	2b00      	cmp	r3, #0
     d26:	d114      	bne.n	d52 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
     d28:	693b      	ldr	r3, [r7, #16]
     d2a:	2203      	movs	r2, #3
     d2c:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     d2e:	683b      	ldr	r3, [r7, #0]
     d30:	881b      	ldrh	r3, [r3, #0]
     d32:	0a1b      	lsrs	r3, r3, #8
     d34:	b29b      	uxth	r3, r3
     d36:	2278      	movs	r2, #120	; 0x78
     d38:	4313      	orrs	r3, r2
     d3a:	b29b      	uxth	r3, r3
     d3c:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     d3e:	683b      	ldr	r3, [r7, #0]
     d40:	7a5b      	ldrb	r3, [r3, #9]
     d42:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     d44:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     d46:	2201      	movs	r2, #1
     d48:	4313      	orrs	r3, r2
     d4a:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     d4c:	693b      	ldr	r3, [r7, #16]
     d4e:	625a      	str	r2, [r3, #36]	; 0x24
     d50:	e012      	b.n	d78 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
     d52:	2317      	movs	r3, #23
     d54:	18fb      	adds	r3, r7, r3
     d56:	781b      	ldrb	r3, [r3, #0]
     d58:	e00f      	b.n	d7a <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
     d5a:	693b      	ldr	r3, [r7, #16]
     d5c:	2203      	movs	r2, #3
     d5e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     d60:	683b      	ldr	r3, [r7, #0]
     d62:	881b      	ldrh	r3, [r3, #0]
     d64:	005b      	lsls	r3, r3, #1
     d66:	2201      	movs	r2, #1
     d68:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     d6a:	683b      	ldr	r3, [r7, #0]
     d6c:	7a5b      	ldrb	r3, [r3, #9]
     d6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     d70:	4313      	orrs	r3, r2
     d72:	001a      	movs	r2, r3
     d74:	693b      	ldr	r3, [r7, #16]
     d76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
     d78:	2300      	movs	r3, #0
}
     d7a:	0018      	movs	r0, r3
     d7c:	46bd      	mov	sp, r7
     d7e:	b007      	add	sp, #28
     d80:	bd90      	pop	{r4, r7, pc}
     d82:	46c0      	nop			; (mov r8, r8)
     d84:	00004215 	.word	0x00004215
     d88:	fffbffff 	.word	0xfffbffff
     d8c:	000041b7 	.word	0x000041b7
     d90:	00004159 	.word	0x00004159

00000d94 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     d94:	b580      	push	{r7, lr}
     d96:	b082      	sub	sp, #8
     d98:	af00      	add	r7, sp, #0
     d9a:	6078      	str	r0, [r7, #4]
     d9c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     d9e:	687b      	ldr	r3, [r7, #4]
     da0:	8b9b      	ldrh	r3, [r3, #28]
     da2:	b29b      	uxth	r3, r3
     da4:	2b00      	cmp	r3, #0
     da6:	d001      	beq.n	dac <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
     da8:	2305      	movs	r3, #5
     daa:	e00c      	b.n	dc6 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
     dac:	687b      	ldr	r3, [r7, #4]
     dae:	2201      	movs	r2, #1
     db0:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     db2:	687b      	ldr	r3, [r7, #4]
     db4:	2201      	movs	r2, #1
     db6:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
     db8:	683a      	ldr	r2, [r7, #0]
     dba:	687b      	ldr	r3, [r7, #4]
     dbc:	0011      	movs	r1, r2
     dbe:	0018      	movs	r0, r3
     dc0:	4b03      	ldr	r3, [pc, #12]	; (dd0 <i2c_master_read_packet_job+0x3c>)
     dc2:	4798      	blx	r3
     dc4:	0003      	movs	r3, r0
}
     dc6:	0018      	movs	r0, r3
     dc8:	46bd      	mov	sp, r7
     dca:	b002      	add	sp, #8
     dcc:	bd80      	pop	{r7, pc}
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	00000c3d 	.word	0x00000c3d

00000dd4 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     dd4:	b580      	push	{r7, lr}
     dd6:	b084      	sub	sp, #16
     dd8:	af00      	add	r7, sp, #0
     dda:	6078      	str	r0, [r7, #4]
     ddc:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	681b      	ldr	r3, [r3, #0]
     de2:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     de4:	683b      	ldr	r3, [r7, #0]
     de6:	7a5b      	ldrb	r3, [r3, #9]
     de8:	2b00      	cmp	r3, #0
     dea:	d006      	beq.n	dfa <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     dec:	683b      	ldr	r3, [r7, #0]
     dee:	7a9a      	ldrb	r2, [r3, #10]
     df0:	687b      	ldr	r3, [r7, #4]
     df2:	0011      	movs	r1, r2
     df4:	0018      	movs	r0, r3
     df6:	4b1e      	ldr	r3, [pc, #120]	; (e70 <_i2c_master_write_packet+0x9c>)
     df8:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     dfa:	68fb      	ldr	r3, [r7, #12]
     dfc:	685b      	ldr	r3, [r3, #4]
     dfe:	4a1d      	ldr	r2, [pc, #116]	; (e74 <_i2c_master_write_packet+0xa0>)
     e00:	401a      	ands	r2, r3
     e02:	68fb      	ldr	r3, [r7, #12]
     e04:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     e06:	683b      	ldr	r3, [r7, #0]
     e08:	685a      	ldr	r2, [r3, #4]
     e0a:	687b      	ldr	r3, [r7, #4]
     e0c:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
     e0e:	683b      	ldr	r3, [r7, #0]
     e10:	885a      	ldrh	r2, [r3, #2]
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	2224      	movs	r2, #36	; 0x24
     e1a:	2100      	movs	r1, #0
     e1c:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	2225      	movs	r2, #37	; 0x25
     e22:	2105      	movs	r1, #5
     e24:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     e26:	68fb      	ldr	r3, [r7, #12]
     e28:	2203      	movs	r2, #3
     e2a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     e2c:	683b      	ldr	r3, [r7, #0]
     e2e:	7a1b      	ldrb	r3, [r3, #8]
     e30:	2b00      	cmp	r3, #0
     e32:	d00d      	beq.n	e50 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     e34:	683b      	ldr	r3, [r7, #0]
     e36:	881b      	ldrh	r3, [r3, #0]
     e38:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     e3a:	683b      	ldr	r3, [r7, #0]
     e3c:	7a5b      	ldrb	r3, [r3, #9]
     e3e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     e40:	4313      	orrs	r3, r2
     e42:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     e44:	2380      	movs	r3, #128	; 0x80
     e46:	021b      	lsls	r3, r3, #8
     e48:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     e4a:	68fb      	ldr	r3, [r7, #12]
     e4c:	625a      	str	r2, [r3, #36]	; 0x24
     e4e:	e009      	b.n	e64 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     e50:	683b      	ldr	r3, [r7, #0]
     e52:	881b      	ldrh	r3, [r3, #0]
     e54:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     e56:	683b      	ldr	r3, [r7, #0]
     e58:	7a5b      	ldrb	r3, [r3, #9]
     e5a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     e5c:	4313      	orrs	r3, r2
     e5e:	001a      	movs	r2, r3
     e60:	68fb      	ldr	r3, [r7, #12]
     e62:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
     e64:	2300      	movs	r3, #0
}
     e66:	0018      	movs	r0, r3
     e68:	46bd      	mov	sp, r7
     e6a:	b004      	add	sp, #16
     e6c:	bd80      	pop	{r7, pc}
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	00004215 	.word	0x00004215
     e74:	fffbffff 	.word	0xfffbffff

00000e78 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     e78:	b580      	push	{r7, lr}
     e7a:	b082      	sub	sp, #8
     e7c:	af00      	add	r7, sp, #0
     e7e:	6078      	str	r0, [r7, #4]
     e80:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     e82:	687b      	ldr	r3, [r7, #4]
     e84:	8b9b      	ldrh	r3, [r3, #28]
     e86:	b29b      	uxth	r3, r3
     e88:	2b00      	cmp	r3, #0
     e8a:	d001      	beq.n	e90 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
     e8c:	2305      	movs	r3, #5
     e8e:	e00c      	b.n	eaa <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
     e90:	687b      	ldr	r3, [r7, #4]
     e92:	2201      	movs	r2, #1
     e94:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     e96:	687b      	ldr	r3, [r7, #4]
     e98:	2201      	movs	r2, #1
     e9a:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
     e9c:	683a      	ldr	r2, [r7, #0]
     e9e:	687b      	ldr	r3, [r7, #4]
     ea0:	0011      	movs	r1, r2
     ea2:	0018      	movs	r0, r3
     ea4:	4b03      	ldr	r3, [pc, #12]	; (eb4 <i2c_master_write_packet_job+0x3c>)
     ea6:	4798      	blx	r3
     ea8:	0003      	movs	r3, r0
}
     eaa:	0018      	movs	r0, r3
     eac:	46bd      	mov	sp, r7
     eae:	b002      	add	sp, #8
     eb0:	bd80      	pop	{r7, pc}
     eb2:	46c0      	nop			; (mov r8, r8)
     eb4:	00000dd5 	.word	0x00000dd5

00000eb8 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     eb8:	b580      	push	{r7, lr}
     eba:	b086      	sub	sp, #24
     ebc:	af00      	add	r7, sp, #0
     ebe:	0002      	movs	r2, r0
     ec0:	1dfb      	adds	r3, r7, #7
     ec2:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
     ec4:	1dfb      	adds	r3, r7, #7
     ec6:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
     ec8:	4b93      	ldr	r3, [pc, #588]	; (1118 <_i2c_master_interrupt_handler+0x260>)
     eca:	0092      	lsls	r2, r2, #2
     ecc:	58d3      	ldr	r3, [r2, r3]
     ece:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ed0:	697b      	ldr	r3, [r7, #20]
     ed2:	681b      	ldr	r3, [r3, #0]
     ed4:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     ed6:	693b      	ldr	r3, [r7, #16]
     ed8:	681b      	ldr	r3, [r3, #0]
     eda:	011b      	lsls	r3, r3, #4
     edc:	0fdb      	lsrs	r3, r3, #31
     ede:	b2db      	uxtb	r3, r3
     ee0:	001a      	movs	r2, r3
     ee2:	230f      	movs	r3, #15
     ee4:	18fb      	adds	r3, r7, r3
     ee6:	1e51      	subs	r1, r2, #1
     ee8:	418a      	sbcs	r2, r1
     eea:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     eec:	230e      	movs	r3, #14
     eee:	18fb      	adds	r3, r7, r3
     ef0:	697a      	ldr	r2, [r7, #20]
     ef2:	7e52      	ldrb	r2, [r2, #25]
     ef4:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     ef6:	697b      	ldr	r3, [r7, #20]
     ef8:	7e1b      	ldrb	r3, [r3, #24]
     efa:	b2da      	uxtb	r2, r3
     efc:	230e      	movs	r3, #14
     efe:	18fb      	adds	r3, r7, r3
     f00:	210e      	movs	r1, #14
     f02:	1879      	adds	r1, r7, r1
     f04:	7809      	ldrb	r1, [r1, #0]
     f06:	400a      	ands	r2, r1
     f08:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     f0a:	697b      	ldr	r3, [r7, #20]
     f0c:	8b5b      	ldrh	r3, [r3, #26]
     f0e:	b29b      	uxth	r3, r3
     f10:	2b00      	cmp	r3, #0
     f12:	d109      	bne.n	f28 <_i2c_master_interrupt_handler+0x70>
     f14:	697b      	ldr	r3, [r7, #20]
     f16:	8b9b      	ldrh	r3, [r3, #28]
     f18:	b29b      	uxth	r3, r3
     f1a:	2b00      	cmp	r3, #0
     f1c:	d004      	beq.n	f28 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
     f1e:	697b      	ldr	r3, [r7, #20]
     f20:	0018      	movs	r0, r3
     f22:	4b7e      	ldr	r3, [pc, #504]	; (111c <_i2c_master_interrupt_handler+0x264>)
     f24:	4798      	blx	r3
     f26:	e070      	b.n	100a <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     f28:	697b      	ldr	r3, [r7, #20]
     f2a:	8b5b      	ldrh	r3, [r3, #26]
     f2c:	b29b      	uxth	r3, r3
     f2e:	2b00      	cmp	r3, #0
     f30:	d039      	beq.n	fa6 <_i2c_master_interrupt_handler+0xee>
     f32:	697b      	ldr	r3, [r7, #20]
     f34:	8b9b      	ldrh	r3, [r3, #28]
     f36:	b29b      	uxth	r3, r3
     f38:	2b00      	cmp	r3, #0
     f3a:	d134      	bne.n	fa6 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
     f3c:	697b      	ldr	r3, [r7, #20]
     f3e:	2225      	movs	r2, #37	; 0x25
     f40:	5c9b      	ldrb	r3, [r3, r2]
     f42:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     f44:	2b05      	cmp	r3, #5
     f46:	d12e      	bne.n	fa6 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     f48:	697b      	ldr	r3, [r7, #20]
     f4a:	2224      	movs	r2, #36	; 0x24
     f4c:	5c9b      	ldrb	r3, [r3, r2]
     f4e:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
     f50:	2b00      	cmp	r3, #0
     f52:	d128      	bne.n	fa6 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     f54:	693b      	ldr	r3, [r7, #16]
     f56:	2203      	movs	r2, #3
     f58:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     f5a:	697b      	ldr	r3, [r7, #20]
     f5c:	2200      	movs	r2, #0
     f5e:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
     f60:	697b      	ldr	r3, [r7, #20]
     f62:	2225      	movs	r2, #37	; 0x25
     f64:	2100      	movs	r1, #0
     f66:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
     f68:	697b      	ldr	r3, [r7, #20]
     f6a:	7a9b      	ldrb	r3, [r3, #10]
     f6c:	2b00      	cmp	r3, #0
     f6e:	d00b      	beq.n	f88 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     f70:	697b      	ldr	r3, [r7, #20]
     f72:	0018      	movs	r0, r3
     f74:	4b6a      	ldr	r3, [pc, #424]	; (1120 <_i2c_master_interrupt_handler+0x268>)
     f76:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f78:	693b      	ldr	r3, [r7, #16]
     f7a:	685b      	ldr	r3, [r3, #4]
     f7c:	22c0      	movs	r2, #192	; 0xc0
     f7e:	0292      	lsls	r2, r2, #10
     f80:	431a      	orrs	r2, r3
     f82:	693b      	ldr	r3, [r7, #16]
     f84:	605a      	str	r2, [r3, #4]
     f86:	e002      	b.n	f8e <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     f88:	693b      	ldr	r3, [r7, #16]
     f8a:	2201      	movs	r2, #1
     f8c:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     f8e:	230e      	movs	r3, #14
     f90:	18fb      	adds	r3, r7, r3
     f92:	781b      	ldrb	r3, [r3, #0]
     f94:	2201      	movs	r2, #1
     f96:	4013      	ands	r3, r2
     f98:	d037      	beq.n	100a <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     f9a:	697b      	ldr	r3, [r7, #20]
     f9c:	68db      	ldr	r3, [r3, #12]
     f9e:	697a      	ldr	r2, [r7, #20]
     fa0:	0010      	movs	r0, r2
     fa2:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     fa4:	e031      	b.n	100a <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     fa6:	697b      	ldr	r3, [r7, #20]
     fa8:	8b5b      	ldrh	r3, [r3, #26]
     faa:	b29b      	uxth	r3, r3
     fac:	2b00      	cmp	r3, #0
     fae:	d02c      	beq.n	100a <_i2c_master_interrupt_handler+0x152>
     fb0:	697b      	ldr	r3, [r7, #20]
     fb2:	8b9b      	ldrh	r3, [r3, #28]
     fb4:	b29b      	uxth	r3, r3
     fb6:	2b00      	cmp	r3, #0
     fb8:	d027      	beq.n	100a <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     fba:	693b      	ldr	r3, [r7, #16]
     fbc:	8b5b      	ldrh	r3, [r3, #26]
     fbe:	b29b      	uxth	r3, r3
     fc0:	001a      	movs	r2, r3
     fc2:	2320      	movs	r3, #32
     fc4:	4013      	ands	r3, r2
     fc6:	d111      	bne.n	fec <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     fc8:	230f      	movs	r3, #15
     fca:	18fb      	adds	r3, r7, r3
     fcc:	781b      	ldrb	r3, [r3, #0]
     fce:	2201      	movs	r2, #1
     fd0:	4053      	eors	r3, r2
     fd2:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     fd4:	2b00      	cmp	r3, #0
     fd6:	d104      	bne.n	fe2 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     fd8:	697b      	ldr	r3, [r7, #20]
     fda:	8b9b      	ldrh	r3, [r3, #28]
     fdc:	b29b      	uxth	r3, r3
     fde:	2b01      	cmp	r3, #1
     fe0:	d004      	beq.n	fec <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
     fe2:	697b      	ldr	r3, [r7, #20]
     fe4:	2225      	movs	r2, #37	; 0x25
     fe6:	2141      	movs	r1, #65	; 0x41
     fe8:	5499      	strb	r1, [r3, r2]
     fea:	e00e      	b.n	100a <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     fec:	697b      	ldr	r3, [r7, #20]
     fee:	2224      	movs	r2, #36	; 0x24
     ff0:	5c9b      	ldrb	r3, [r3, r2]
     ff2:	b2db      	uxtb	r3, r3
     ff4:	2b00      	cmp	r3, #0
     ff6:	d104      	bne.n	1002 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
     ff8:	697b      	ldr	r3, [r7, #20]
     ffa:	0018      	movs	r0, r3
     ffc:	4b49      	ldr	r3, [pc, #292]	; (1124 <_i2c_master_interrupt_handler+0x26c>)
     ffe:	4798      	blx	r3
    1000:	e003      	b.n	100a <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    1002:	697b      	ldr	r3, [r7, #20]
    1004:	0018      	movs	r0, r3
    1006:	4b48      	ldr	r3, [pc, #288]	; (1128 <_i2c_master_interrupt_handler+0x270>)
    1008:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    100a:	697b      	ldr	r3, [r7, #20]
    100c:	8b5b      	ldrh	r3, [r3, #26]
    100e:	b29b      	uxth	r3, r3
    1010:	2b00      	cmp	r3, #0
    1012:	d047      	beq.n	10a4 <_i2c_master_interrupt_handler+0x1ec>
    1014:	697b      	ldr	r3, [r7, #20]
    1016:	8b9b      	ldrh	r3, [r3, #28]
    1018:	b29b      	uxth	r3, r3
    101a:	2b00      	cmp	r3, #0
    101c:	d142      	bne.n	10a4 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    101e:	697b      	ldr	r3, [r7, #20]
    1020:	2225      	movs	r2, #37	; 0x25
    1022:	5c9b      	ldrb	r3, [r3, r2]
    1024:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1026:	2b05      	cmp	r3, #5
    1028:	d13c      	bne.n	10a4 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    102a:	697b      	ldr	r3, [r7, #20]
    102c:	2224      	movs	r2, #36	; 0x24
    102e:	5c9b      	ldrb	r3, [r3, r2]
    1030:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    1032:	2b01      	cmp	r3, #1
    1034:	d136      	bne.n	10a4 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1036:	693b      	ldr	r3, [r7, #16]
    1038:	7e1b      	ldrb	r3, [r3, #24]
    103a:	b2db      	uxtb	r3, r3
    103c:	001a      	movs	r2, r3
    103e:	2302      	movs	r3, #2
    1040:	4013      	ands	r3, r2
    1042:	d002      	beq.n	104a <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1044:	693b      	ldr	r3, [r7, #16]
    1046:	2202      	movs	r2, #2
    1048:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    104a:	693b      	ldr	r3, [r7, #16]
    104c:	2203      	movs	r2, #3
    104e:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    1050:	697b      	ldr	r3, [r7, #20]
    1052:	2200      	movs	r2, #0
    1054:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1056:	697b      	ldr	r3, [r7, #20]
    1058:	2225      	movs	r2, #37	; 0x25
    105a:	2100      	movs	r1, #0
    105c:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    105e:	230e      	movs	r3, #14
    1060:	18fb      	adds	r3, r7, r3
    1062:	781b      	ldrb	r3, [r3, #0]
    1064:	2202      	movs	r2, #2
    1066:	4013      	ands	r3, r2
    1068:	d00b      	beq.n	1082 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    106a:	697b      	ldr	r3, [r7, #20]
    106c:	2224      	movs	r2, #36	; 0x24
    106e:	5c9b      	ldrb	r3, [r3, r2]
    1070:	b2db      	uxtb	r3, r3
    1072:	2b01      	cmp	r3, #1
    1074:	d105      	bne.n	1082 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1076:	697b      	ldr	r3, [r7, #20]
    1078:	691b      	ldr	r3, [r3, #16]
    107a:	697a      	ldr	r2, [r7, #20]
    107c:	0010      	movs	r0, r2
    107e:	4798      	blx	r3
    1080:	e010      	b.n	10a4 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1082:	230e      	movs	r3, #14
    1084:	18fb      	adds	r3, r7, r3
    1086:	781b      	ldrb	r3, [r3, #0]
    1088:	2201      	movs	r2, #1
    108a:	4013      	ands	r3, r2
    108c:	d00a      	beq.n	10a4 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    108e:	697b      	ldr	r3, [r7, #20]
    1090:	2224      	movs	r2, #36	; 0x24
    1092:	5c9b      	ldrb	r3, [r3, r2]
    1094:	b2db      	uxtb	r3, r3
    1096:	2b00      	cmp	r3, #0
    1098:	d104      	bne.n	10a4 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    109a:	697b      	ldr	r3, [r7, #20]
    109c:	68db      	ldr	r3, [r3, #12]
    109e:	697a      	ldr	r2, [r7, #20]
    10a0:	0010      	movs	r0, r2
    10a2:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    10a4:	697b      	ldr	r3, [r7, #20]
    10a6:	2225      	movs	r2, #37	; 0x25
    10a8:	5c9b      	ldrb	r3, [r3, r2]
    10aa:	b2db      	uxtb	r3, r3
    10ac:	2b05      	cmp	r3, #5
    10ae:	d02e      	beq.n	110e <_i2c_master_interrupt_handler+0x256>
    10b0:	697b      	ldr	r3, [r7, #20]
    10b2:	2225      	movs	r2, #37	; 0x25
    10b4:	5c9b      	ldrb	r3, [r3, r2]
    10b6:	b2db      	uxtb	r3, r3
    10b8:	2b00      	cmp	r3, #0
    10ba:	d028      	beq.n	110e <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    10bc:	693b      	ldr	r3, [r7, #16]
    10be:	2203      	movs	r2, #3
    10c0:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    10c2:	697b      	ldr	r3, [r7, #20]
    10c4:	2200      	movs	r2, #0
    10c6:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    10c8:	697b      	ldr	r3, [r7, #20]
    10ca:	2200      	movs	r2, #0
    10cc:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    10ce:	697b      	ldr	r3, [r7, #20]
    10d0:	2225      	movs	r2, #37	; 0x25
    10d2:	5c9b      	ldrb	r3, [r3, r2]
    10d4:	b2db      	uxtb	r3, r3
    10d6:	2b41      	cmp	r3, #65	; 0x41
    10d8:	d00e      	beq.n	10f8 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    10da:	697b      	ldr	r3, [r7, #20]
    10dc:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    10de:	2b00      	cmp	r3, #0
    10e0:	d00a      	beq.n	10f8 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    10e2:	697b      	ldr	r3, [r7, #20]
    10e4:	0018      	movs	r0, r3
    10e6:	4b0e      	ldr	r3, [pc, #56]	; (1120 <_i2c_master_interrupt_handler+0x268>)
    10e8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    10ea:	693b      	ldr	r3, [r7, #16]
    10ec:	685b      	ldr	r3, [r3, #4]
    10ee:	22e0      	movs	r2, #224	; 0xe0
    10f0:	02d2      	lsls	r2, r2, #11
    10f2:	431a      	orrs	r2, r3
    10f4:	693b      	ldr	r3, [r7, #16]
    10f6:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    10f8:	230e      	movs	r3, #14
    10fa:	18fb      	adds	r3, r7, r3
    10fc:	781b      	ldrb	r3, [r3, #0]
    10fe:	2204      	movs	r2, #4
    1100:	4013      	ands	r3, r2
    1102:	d004      	beq.n	110e <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1104:	697b      	ldr	r3, [r7, #20]
    1106:	695b      	ldr	r3, [r3, #20]
    1108:	697a      	ldr	r2, [r7, #20]
    110a:	0010      	movs	r0, r2
    110c:	4798      	blx	r3
		}
	}
}
    110e:	46c0      	nop			; (mov r8, r8)
    1110:	46bd      	mov	sp, r7
    1112:	b006      	add	sp, #24
    1114:	bd80      	pop	{r7, pc}
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	20005a0c 	.word	0x20005a0c
    111c:	00000b39 	.word	0x00000b39
    1120:	000009a9 	.word	0x000009a9
    1124:	00000abd 	.word	0x00000abd
    1128:	000009cd 	.word	0x000009cd

0000112c <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    112c:	b580      	push	{r7, lr}
    112e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    1130:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    1134:	4b02      	ldr	r3, [pc, #8]	; (1140 <NVIC_SystemReset+0x14>)
    1136:	4a03      	ldr	r2, [pc, #12]	; (1144 <NVIC_SystemReset+0x18>)
    1138:	60da      	str	r2, [r3, #12]
    113a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    113e:	e7fe      	b.n	113e <NVIC_SystemReset+0x12>
    1140:	e000ed00 	.word	0xe000ed00
    1144:	05fa0004 	.word	0x05fa0004

00001148 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    1148:	b580      	push	{r7, lr}
    114a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    114c:	4b02      	ldr	r3, [pc, #8]	; (1158 <system_reset+0x10>)
    114e:	4798      	blx	r3
}
    1150:	46c0      	nop			; (mov r8, r8)
    1152:	46bd      	mov	sp, r7
    1154:	bd80      	pop	{r7, pc}
    1156:	46c0      	nop			; (mov r8, r8)
    1158:	0000112d 	.word	0x0000112d

0000115c <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
    115c:	b580      	push	{r7, lr}
    115e:	b086      	sub	sp, #24
    1160:	af00      	add	r7, sp, #0
    1162:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
    1164:	4b98      	ldr	r3, [pc, #608]	; (13c8 <vCommandConsoleTask+0x26c>)
    1166:	0018      	movs	r0, r3
    1168:	4b98      	ldr	r3, [pc, #608]	; (13cc <vCommandConsoleTask+0x270>)
    116a:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
    116c:	4b98      	ldr	r3, [pc, #608]	; (13d0 <vCommandConsoleTask+0x274>)
    116e:	0018      	movs	r0, r3
    1170:	4b96      	ldr	r3, [pc, #600]	; (13cc <vCommandConsoleTask+0x270>)
    1172:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
    1174:	4b97      	ldr	r3, [pc, #604]	; (13d4 <vCommandConsoleTask+0x278>)
    1176:	0018      	movs	r0, r3
    1178:	4b94      	ldr	r3, [pc, #592]	; (13cc <vCommandConsoleTask+0x270>)
    117a:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xI2cScan);
    117c:	4b96      	ldr	r3, [pc, #600]	; (13d8 <vCommandConsoleTask+0x27c>)
    117e:	0018      	movs	r0, r3
    1180:	4b92      	ldr	r3, [pc, #584]	; (13cc <vCommandConsoleTask+0x270>)
    1182:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xVersion);
    1184:	4b95      	ldr	r3, [pc, #596]	; (13dc <vCommandConsoleTask+0x280>)
    1186:	0018      	movs	r0, r3
    1188:	4b90      	ldr	r3, [pc, #576]	; (13cc <vCommandConsoleTask+0x270>)
    118a:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xTicks);
    118c:	4b94      	ldr	r3, [pc, #592]	; (13e0 <vCommandConsoleTask+0x284>)
    118e:	0018      	movs	r0, r3
    1190:	4b8e      	ldr	r3, [pc, #568]	; (13cc <vCommandConsoleTask+0x270>)
    1192:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
    1194:	2317      	movs	r3, #23
    1196:	18fb      	adds	r3, r7, r3
    1198:	2200      	movs	r2, #0
    119a:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
    119c:	4b91      	ldr	r3, [pc, #580]	; (13e4 <vCommandConsoleTask+0x288>)
    119e:	0018      	movs	r0, r3
    11a0:	4b91      	ldr	r3, [pc, #580]	; (13e8 <vCommandConsoleTask+0x28c>)
    11a2:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
    11a4:	2203      	movs	r2, #3
    11a6:	2100      	movs	r1, #0
    11a8:	2001      	movs	r0, #1
    11aa:	4b90      	ldr	r3, [pc, #576]	; (13ec <vCommandConsoleTask+0x290>)
    11ac:	4798      	blx	r3
    11ae:	0002      	movs	r2, r0
    11b0:	4b8f      	ldr	r3, [pc, #572]	; (13f0 <vCommandConsoleTask+0x294>)
    11b2:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
    11b4:	4b8e      	ldr	r3, [pc, #568]	; (13f0 <vCommandConsoleTask+0x294>)
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	2b00      	cmp	r3, #0
    11ba:	d107      	bne.n	11cc <vCommandConsoleTask+0x70>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
    11bc:	4b8d      	ldr	r3, [pc, #564]	; (13f4 <vCommandConsoleTask+0x298>)
    11be:	0019      	movs	r1, r3
    11c0:	2003      	movs	r0, #3
    11c2:	4b8d      	ldr	r3, [pc, #564]	; (13f8 <vCommandConsoleTask+0x29c>)
    11c4:	4798      	blx	r3
        vTaskSuspend(NULL);
    11c6:	2000      	movs	r0, #0
    11c8:	4b8c      	ldr	r3, [pc, #560]	; (13fc <vCommandConsoleTask+0x2a0>)
    11ca:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
    11cc:	230c      	movs	r3, #12
    11ce:	18fb      	adds	r3, r7, r3
    11d0:	0018      	movs	r0, r3
    11d2:	4b8b      	ldr	r3, [pc, #556]	; (1400 <vCommandConsoleTask+0x2a4>)
    11d4:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
    11d6:	230c      	movs	r3, #12
    11d8:	18fb      	adds	r3, r7, r3
    11da:	781b      	ldrb	r3, [r3, #0]
    11dc:	2b0a      	cmp	r3, #10
    11de:	d004      	beq.n	11ea <vCommandConsoleTask+0x8e>
    11e0:	230c      	movs	r3, #12
    11e2:	18fb      	adds	r3, r7, r3
    11e4:	781b      	ldrb	r3, [r3, #0]
    11e6:	2b0d      	cmp	r3, #13
    11e8:	d137      	bne.n	125a <vCommandConsoleTask+0xfe>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
    11ea:	4b86      	ldr	r3, [pc, #536]	; (1404 <vCommandConsoleTask+0x2a8>)
    11ec:	0018      	movs	r0, r3
    11ee:	4b7e      	ldr	r3, [pc, #504]	; (13e8 <vCommandConsoleTask+0x28c>)
    11f0:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
    11f2:	4b85      	ldr	r3, [pc, #532]	; (1408 <vCommandConsoleTask+0x2ac>)
    11f4:	2200      	movs	r2, #0
    11f6:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
    11f8:	4b84      	ldr	r3, [pc, #528]	; (140c <vCommandConsoleTask+0x2b0>)
    11fa:	2200      	movs	r2, #0
    11fc:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
    11fe:	4984      	ldr	r1, [pc, #528]	; (1410 <vCommandConsoleTask+0x2b4>)
    1200:	4b84      	ldr	r3, [pc, #528]	; (1414 <vCommandConsoleTask+0x2b8>)
    1202:	2231      	movs	r2, #49	; 0x31
    1204:	0018      	movs	r0, r3
    1206:	4b84      	ldr	r3, [pc, #528]	; (1418 <vCommandConsoleTask+0x2bc>)
    1208:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
    120a:	4b82      	ldr	r3, [pc, #520]	; (1414 <vCommandConsoleTask+0x2b8>)
    120c:	2231      	movs	r2, #49	; 0x31
    120e:	2100      	movs	r1, #0
    1210:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
    1212:	4982      	ldr	r1, [pc, #520]	; (141c <vCommandConsoleTask+0x2c0>)
    1214:	4b7e      	ldr	r3, [pc, #504]	; (1410 <vCommandConsoleTask+0x2b4>)
    1216:	2264      	movs	r2, #100	; 0x64
    1218:	0018      	movs	r0, r3
    121a:	4b81      	ldr	r3, [pc, #516]	; (1420 <vCommandConsoleTask+0x2c4>)
    121c:	4798      	blx	r3
    121e:	0003      	movs	r3, r0
    1220:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
    1222:	4b7e      	ldr	r3, [pc, #504]	; (141c <vCommandConsoleTask+0x2c0>)
    1224:	2263      	movs	r2, #99	; 0x63
    1226:	2100      	movs	r1, #0
    1228:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
    122a:	4b7c      	ldr	r3, [pc, #496]	; (141c <vCommandConsoleTask+0x2c0>)
    122c:	0018      	movs	r0, r3
    122e:	4b6e      	ldr	r3, [pc, #440]	; (13e8 <vCommandConsoleTask+0x28c>)
    1230:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
    1232:	693b      	ldr	r3, [r7, #16]
    1234:	2b00      	cmp	r3, #0
    1236:	d1ec      	bne.n	1212 <vCommandConsoleTask+0xb6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
    1238:	2317      	movs	r3, #23
    123a:	18fb      	adds	r3, r7, r3
    123c:	2200      	movs	r2, #0
    123e:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
    1240:	4b73      	ldr	r3, [pc, #460]	; (1410 <vCommandConsoleTask+0x2b4>)
    1242:	2232      	movs	r2, #50	; 0x32
    1244:	2100      	movs	r1, #0
    1246:	0018      	movs	r0, r3
    1248:	4b76      	ldr	r3, [pc, #472]	; (1424 <vCommandConsoleTask+0x2c8>)
    124a:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
    124c:	4b73      	ldr	r3, [pc, #460]	; (141c <vCommandConsoleTask+0x2c0>)
    124e:	2264      	movs	r2, #100	; 0x64
    1250:	2100      	movs	r1, #0
    1252:	0018      	movs	r0, r3
    1254:	4b73      	ldr	r3, [pc, #460]	; (1424 <vCommandConsoleTask+0x2c8>)
    1256:	4798      	blx	r3
    1258:	e0b5      	b.n	13c6 <vCommandConsoleTask+0x26a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
    125a:	4b6b      	ldr	r3, [pc, #428]	; (1408 <vCommandConsoleTask+0x2ac>)
    125c:	781b      	ldrb	r3, [r3, #0]
    125e:	2b00      	cmp	r3, #0
    1260:	d059      	beq.n	1316 <vCommandConsoleTask+0x1ba>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
    1262:	4b6a      	ldr	r3, [pc, #424]	; (140c <vCommandConsoleTask+0x2b0>)
    1264:	781b      	ldrb	r3, [r3, #0]
    1266:	2b03      	cmp	r3, #3
    1268:	d80c      	bhi.n	1284 <vCommandConsoleTask+0x128>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
    126a:	4b68      	ldr	r3, [pc, #416]	; (140c <vCommandConsoleTask+0x2b0>)
    126c:	781b      	ldrb	r3, [r3, #0]
    126e:	1c5a      	adds	r2, r3, #1
    1270:	b2d1      	uxtb	r1, r2
    1272:	4a66      	ldr	r2, [pc, #408]	; (140c <vCommandConsoleTask+0x2b0>)
    1274:	7011      	strb	r1, [r2, #0]
    1276:	001a      	movs	r2, r3
    1278:	230c      	movs	r3, #12
    127a:	18fb      	adds	r3, r7, r3
    127c:	7819      	ldrb	r1, [r3, #0]
    127e:	4b6a      	ldr	r3, [pc, #424]	; (1428 <vCommandConsoleTask+0x2cc>)
    1280:	5499      	strb	r1, [r3, r2]
    1282:	e005      	b.n	1290 <vCommandConsoleTask+0x134>
                } else {
                    isEscapeCode = false;
    1284:	4b60      	ldr	r3, [pc, #384]	; (1408 <vCommandConsoleTask+0x2ac>)
    1286:	2200      	movs	r2, #0
    1288:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
    128a:	4b60      	ldr	r3, [pc, #384]	; (140c <vCommandConsoleTask+0x2b0>)
    128c:	2200      	movs	r2, #0
    128e:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
    1290:	4b5e      	ldr	r3, [pc, #376]	; (140c <vCommandConsoleTask+0x2b0>)
    1292:	781b      	ldrb	r3, [r3, #0]
    1294:	2b01      	cmp	r3, #1
    1296:	d999      	bls.n	11cc <vCommandConsoleTask+0x70>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
    1298:	4a64      	ldr	r2, [pc, #400]	; (142c <vCommandConsoleTask+0x2d0>)
    129a:	4b63      	ldr	r3, [pc, #396]	; (1428 <vCommandConsoleTask+0x2cc>)
    129c:	0011      	movs	r1, r2
    129e:	0018      	movs	r0, r3
    12a0:	4b63      	ldr	r3, [pc, #396]	; (1430 <vCommandConsoleTask+0x2d4>)
    12a2:	4798      	blx	r3
    12a4:	1e03      	subs	r3, r0, #0
    12a6:	d02f      	beq.n	1308 <vCommandConsoleTask+0x1ac>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
    12a8:	4962      	ldr	r1, [pc, #392]	; (1434 <vCommandConsoleTask+0x2d8>)
    12aa:	4b59      	ldr	r3, [pc, #356]	; (1410 <vCommandConsoleTask+0x2b4>)
    12ac:	221b      	movs	r2, #27
    12ae:	0018      	movs	r0, r3
    12b0:	4b61      	ldr	r3, [pc, #388]	; (1438 <vCommandConsoleTask+0x2dc>)
    12b2:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
    12b4:	4b56      	ldr	r3, [pc, #344]	; (1410 <vCommandConsoleTask+0x2b4>)
    12b6:	0018      	movs	r0, r3
    12b8:	4b4b      	ldr	r3, [pc, #300]	; (13e8 <vCommandConsoleTask+0x28c>)
    12ba:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
    12bc:	2317      	movs	r3, #23
    12be:	18fb      	adds	r3, r7, r3
    12c0:	2200      	movs	r2, #0
    12c2:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
    12c4:	4b52      	ldr	r3, [pc, #328]	; (1410 <vCommandConsoleTask+0x2b4>)
    12c6:	2232      	movs	r2, #50	; 0x32
    12c8:	2100      	movs	r1, #0
    12ca:	0018      	movs	r0, r3
    12cc:	4b55      	ldr	r3, [pc, #340]	; (1424 <vCommandConsoleTask+0x2c8>)
    12ce:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
    12d0:	4950      	ldr	r1, [pc, #320]	; (1414 <vCommandConsoleTask+0x2b8>)
    12d2:	4b4f      	ldr	r3, [pc, #316]	; (1410 <vCommandConsoleTask+0x2b4>)
    12d4:	2231      	movs	r2, #49	; 0x31
    12d6:	0018      	movs	r0, r3
    12d8:	4b4f      	ldr	r3, [pc, #316]	; (1418 <vCommandConsoleTask+0x2bc>)
    12da:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
    12dc:	4b4c      	ldr	r3, [pc, #304]	; (1410 <vCommandConsoleTask+0x2b4>)
    12de:	0018      	movs	r0, r3
    12e0:	4b56      	ldr	r3, [pc, #344]	; (143c <vCommandConsoleTask+0x2e0>)
    12e2:	4798      	blx	r3
    12e4:	0003      	movs	r3, r0
    12e6:	2b30      	cmp	r3, #48	; 0x30
    12e8:	d806      	bhi.n	12f8 <vCommandConsoleTask+0x19c>
    12ea:	4b4a      	ldr	r3, [pc, #296]	; (1414 <vCommandConsoleTask+0x2b8>)
    12ec:	0018      	movs	r0, r3
    12ee:	4b53      	ldr	r3, [pc, #332]	; (143c <vCommandConsoleTask+0x2e0>)
    12f0:	4798      	blx	r3
    12f2:	0003      	movs	r3, r0
    12f4:	b2da      	uxtb	r2, r3
    12f6:	e000      	b.n	12fa <vCommandConsoleTask+0x19e>
    12f8:	2231      	movs	r2, #49	; 0x31
    12fa:	2317      	movs	r3, #23
    12fc:	18fb      	adds	r3, r7, r3
    12fe:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
    1300:	4b43      	ldr	r3, [pc, #268]	; (1410 <vCommandConsoleTask+0x2b4>)
    1302:	0018      	movs	r0, r3
    1304:	4b38      	ldr	r3, [pc, #224]	; (13e8 <vCommandConsoleTask+0x28c>)
    1306:	4798      	blx	r3
                    }

                    isEscapeCode = false;
    1308:	4b3f      	ldr	r3, [pc, #252]	; (1408 <vCommandConsoleTask+0x2ac>)
    130a:	2200      	movs	r2, #0
    130c:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
    130e:	4b3f      	ldr	r3, [pc, #252]	; (140c <vCommandConsoleTask+0x2b0>)
    1310:	2200      	movs	r2, #0
    1312:	701a      	strb	r2, [r3, #0]
    1314:	e75a      	b.n	11cc <vCommandConsoleTask+0x70>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
    1316:	230c      	movs	r3, #12
    1318:	18fb      	adds	r3, r7, r3
    131a:	781b      	ldrb	r3, [r3, #0]
    131c:	2b0d      	cmp	r3, #13
    131e:	d100      	bne.n	1322 <vCommandConsoleTask+0x1c6>
    1320:	e754      	b.n	11cc <vCommandConsoleTask+0x70>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    1322:	230c      	movs	r3, #12
    1324:	18fb      	adds	r3, r7, r3
    1326:	781b      	ldrb	r3, [r3, #0]
    1328:	2b08      	cmp	r3, #8
    132a:	d004      	beq.n	1336 <vCommandConsoleTask+0x1da>
    132c:	230c      	movs	r3, #12
    132e:	18fb      	adds	r3, r7, r3
    1330:	781b      	ldrb	r3, [r3, #0]
    1332:	2b7f      	cmp	r3, #127	; 0x7f
    1334:	d11c      	bne.n	1370 <vCommandConsoleTask+0x214>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
    1336:	2308      	movs	r3, #8
    1338:	18fb      	adds	r3, r7, r3
    133a:	4a41      	ldr	r2, [pc, #260]	; (1440 <vCommandConsoleTask+0x2e4>)
    133c:	6812      	ldr	r2, [r2, #0]
    133e:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
    1340:	2308      	movs	r3, #8
    1342:	18fb      	adds	r3, r7, r3
    1344:	0018      	movs	r0, r3
    1346:	4b28      	ldr	r3, [pc, #160]	; (13e8 <vCommandConsoleTask+0x28c>)
    1348:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
    134a:	2317      	movs	r3, #23
    134c:	18fb      	adds	r3, r7, r3
    134e:	781b      	ldrb	r3, [r3, #0]
    1350:	2b00      	cmp	r3, #0
    1352:	d037      	beq.n	13c4 <vCommandConsoleTask+0x268>
                    cInputIndex--;
    1354:	2317      	movs	r3, #23
    1356:	18fb      	adds	r3, r7, r3
    1358:	781a      	ldrb	r2, [r3, #0]
    135a:	2317      	movs	r3, #23
    135c:	18fb      	adds	r3, r7, r3
    135e:	3a01      	subs	r2, #1
    1360:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
    1362:	2317      	movs	r3, #23
    1364:	18fb      	adds	r3, r7, r3
    1366:	781b      	ldrb	r3, [r3, #0]
    1368:	4a29      	ldr	r2, [pc, #164]	; (1410 <vCommandConsoleTask+0x2b4>)
    136a:	2100      	movs	r1, #0
    136c:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    136e:	e029      	b.n	13c4 <vCommandConsoleTask+0x268>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
    1370:	230c      	movs	r3, #12
    1372:	18fb      	adds	r3, r7, r3
    1374:	781b      	ldrb	r3, [r3, #0]
    1376:	2b1b      	cmp	r3, #27
    1378:	d106      	bne.n	1388 <vCommandConsoleTask+0x22c>
                isEscapeCode = true;  // Next characters will be code arguments
    137a:	4b23      	ldr	r3, [pc, #140]	; (1408 <vCommandConsoleTask+0x2ac>)
    137c:	2201      	movs	r2, #1
    137e:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
    1380:	4b22      	ldr	r3, [pc, #136]	; (140c <vCommandConsoleTask+0x2b0>)
    1382:	2200      	movs	r2, #0
    1384:	701a      	strb	r2, [r3, #0]
    1386:	e721      	b.n	11cc <vCommandConsoleTask+0x70>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
    1388:	2317      	movs	r3, #23
    138a:	18fb      	adds	r3, r7, r3
    138c:	781b      	ldrb	r3, [r3, #0]
    138e:	2b31      	cmp	r3, #49	; 0x31
    1390:	d80e      	bhi.n	13b0 <vCommandConsoleTask+0x254>
                    pcInputString[cInputIndex] = cRxedChar[0];
    1392:	2317      	movs	r3, #23
    1394:	18fb      	adds	r3, r7, r3
    1396:	781b      	ldrb	r3, [r3, #0]
    1398:	220c      	movs	r2, #12
    139a:	18ba      	adds	r2, r7, r2
    139c:	7811      	ldrb	r1, [r2, #0]
    139e:	4a1c      	ldr	r2, [pc, #112]	; (1410 <vCommandConsoleTask+0x2b4>)
    13a0:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
    13a2:	2317      	movs	r3, #23
    13a4:	18fb      	adds	r3, r7, r3
    13a6:	781a      	ldrb	r2, [r3, #0]
    13a8:	2317      	movs	r3, #23
    13aa:	18fb      	adds	r3, r7, r3
    13ac:	3201      	adds	r2, #1
    13ae:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
    13b0:	230c      	movs	r3, #12
    13b2:	18fb      	adds	r3, r7, r3
    13b4:	2200      	movs	r2, #0
    13b6:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
    13b8:	230c      	movs	r3, #12
    13ba:	18fb      	adds	r3, r7, r3
    13bc:	0018      	movs	r0, r3
    13be:	4b0a      	ldr	r3, [pc, #40]	; (13e8 <vCommandConsoleTask+0x28c>)
    13c0:	4798      	blx	r3
    13c2:	e703      	b.n	11cc <vCommandConsoleTask+0x70>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    13c4:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
    13c6:	e701      	b.n	11cc <vCommandConsoleTask+0x70>
    13c8:	00022538 	.word	0x00022538
    13cc:	0000435d 	.word	0x0000435d
    13d0:	00022588 	.word	0x00022588
    13d4:	00022548 	.word	0x00022548
    13d8:	00022558 	.word	0x00022558
    13dc:	00022568 	.word	0x00022568
    13e0:	00022578 	.word	0x00022578
    13e4:	0002230c 	.word	0x0002230c
    13e8:	0000a289 	.word	0x0000a289
    13ec:	00006929 	.word	0x00006929
    13f0:	20004610 	.word	0x20004610
    13f4:	00022468 	.word	0x00022468
    13f8:	0000a375 	.word	0x0000a375
    13fc:	00008715 	.word	0x00008715
    1400:	00001445 	.word	0x00001445
    1404:	00022488 	.word	0x00022488
    1408:	20000794 	.word	0x20000794
    140c:	20000795 	.word	0x20000795
    1410:	200007cc 	.word	0x200007cc
    1414:	20000798 	.word	0x20000798
    1418:	00021173 	.word	0x00021173
    141c:	20000800 	.word	0x20000800
    1420:	000043cd 	.word	0x000043cd
    1424:	00020d8b 	.word	0x00020d8b
    1428:	20000864 	.word	0x20000864
    142c:	0002248c 	.word	0x0002248c
    1430:	0002108d 	.word	0x0002108d
    1434:	00022490 	.word	0x00022490
    1438:	00021049 	.word	0x00021049
    143c:	00021143 	.word	0x00021143
    1440:	00022498 	.word	0x00022498

00001444 <FreeRTOS_read>:
* @details		STUDENTS TO COMPLETE.
* @note
*****************************************************************************/
extern cbuf_handle_t cbufRx;   ///< Circular buffer handler for receiving characters from the Serial Interface
static void FreeRTOS_read(char *character)
{
    1444:	b580      	push	{r7, lr}
    1446:	b082      	sub	sp, #8
    1448:	af00      	add	r7, sp, #0
    144a:	6078      	str	r0, [r7, #4]
	if(xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY) == pdTRUE)
    144c:	4b09      	ldr	r3, [pc, #36]	; (1474 <FreeRTOS_read+0x30>)
    144e:	681a      	ldr	r2, [r3, #0]
    1450:	2301      	movs	r3, #1
    1452:	425b      	negs	r3, r3
    1454:	0019      	movs	r1, r3
    1456:	0010      	movs	r0, r2
    1458:	4b07      	ldr	r3, [pc, #28]	; (1478 <FreeRTOS_read+0x34>)
    145a:	4798      	blx	r3
    145c:	0003      	movs	r3, r0
    145e:	2b01      	cmp	r3, #1
    1460:	d103      	bne.n	146a <FreeRTOS_read+0x26>
		SerialConsoleReadCharacter(character);
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	0018      	movs	r0, r3
    1466:	4b05      	ldr	r3, [pc, #20]	; (147c <FreeRTOS_read+0x38>)
    1468:	4798      	blx	r3
}
    146a:	46c0      	nop			; (mov r8, r8)
    146c:	46bd      	mov	sp, r7
    146e:	b002      	add	sp, #8
    1470:	bd80      	pop	{r7, pc}
    1472:	46c0      	nop			; (mov r8, r8)
    1474:	20004610 	.word	0x20004610
    1478:	000078e1 	.word	0x000078e1
    147c:	0000a325 	.word	0x0000a325

00001480 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
    1480:	b580      	push	{r7, lr}
    1482:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
    1484:	4b0a      	ldr	r3, [pc, #40]	; (14b0 <CliCharReadySemaphoreGiveFromISR+0x30>)
    1486:	2200      	movs	r2, #0
    1488:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
    148a:	4b0a      	ldr	r3, [pc, #40]	; (14b4 <CliCharReadySemaphoreGiveFromISR+0x34>)
    148c:	681b      	ldr	r3, [r3, #0]
    148e:	4a08      	ldr	r2, [pc, #32]	; (14b0 <CliCharReadySemaphoreGiveFromISR+0x30>)
    1490:	0011      	movs	r1, r2
    1492:	0018      	movs	r0, r3
    1494:	4b08      	ldr	r3, [pc, #32]	; (14b8 <CliCharReadySemaphoreGiveFromISR+0x38>)
    1496:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    1498:	4b05      	ldr	r3, [pc, #20]	; (14b0 <CliCharReadySemaphoreGiveFromISR+0x30>)
    149a:	681b      	ldr	r3, [r3, #0]
    149c:	2b00      	cmp	r3, #0
    149e:	d003      	beq.n	14a8 <CliCharReadySemaphoreGiveFromISR+0x28>
    14a0:	4b06      	ldr	r3, [pc, #24]	; (14bc <CliCharReadySemaphoreGiveFromISR+0x3c>)
    14a2:	2280      	movs	r2, #128	; 0x80
    14a4:	0552      	lsls	r2, r2, #21
    14a6:	601a      	str	r2, [r3, #0]
}
    14a8:	46c0      	nop			; (mov r8, r8)
    14aa:	46bd      	mov	sp, r7
    14ac:	bd80      	pop	{r7, pc}
    14ae:	46c0      	nop			; (mov r8, r8)
    14b0:	20000868 	.word	0x20000868
    14b4:	20004610 	.word	0x20004610
    14b8:	00007259 	.word	0x00007259
    14bc:	e000ed04 	.word	0xe000ed04

000014c0 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    14c0:	b590      	push	{r4, r7, lr}
    14c2:	b087      	sub	sp, #28
    14c4:	af00      	add	r7, sp, #0
    14c6:	60f8      	str	r0, [r7, #12]
    14c8:	60b9      	str	r1, [r7, #8]
    14ca:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
    14cc:	2317      	movs	r3, #23
    14ce:	18fb      	adds	r3, r7, r3
    14d0:	221b      	movs	r2, #27
    14d2:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
    14d4:	2317      	movs	r3, #23
    14d6:	18fb      	adds	r3, r7, r3
    14d8:	781b      	ldrb	r3, [r3, #0]
    14da:	4a08      	ldr	r2, [pc, #32]	; (14fc <xCliClearTerminalScreen+0x3c>)
    14dc:	4808      	ldr	r0, [pc, #32]	; (1500 <xCliClearTerminalScreen+0x40>)
    14de:	210f      	movs	r1, #15
    14e0:	4c08      	ldr	r4, [pc, #32]	; (1504 <xCliClearTerminalScreen+0x44>)
    14e2:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
    14e4:	4a06      	ldr	r2, [pc, #24]	; (1500 <xCliClearTerminalScreen+0x40>)
    14e6:	68b9      	ldr	r1, [r7, #8]
    14e8:	68fb      	ldr	r3, [r7, #12]
    14ea:	0018      	movs	r0, r3
    14ec:	4b05      	ldr	r3, [pc, #20]	; (1504 <xCliClearTerminalScreen+0x44>)
    14ee:	4798      	blx	r3
    return pdFALSE;
    14f0:	2300      	movs	r3, #0
}
    14f2:	0018      	movs	r0, r3
    14f4:	46bd      	mov	sp, r7
    14f6:	b007      	add	sp, #28
    14f8:	bd90      	pop	{r4, r7, pc}
    14fa:	46c0      	nop			; (mov r8, r8)
    14fc:	0002249c 	.word	0x0002249c
    1500:	20000784 	.word	0x20000784
    1504:	00020fe5 	.word	0x00020fe5

00001508 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    1508:	b580      	push	{r7, lr}
    150a:	b084      	sub	sp, #16
    150c:	af00      	add	r7, sp, #0
    150e:	60f8      	str	r0, [r7, #12]
    1510:	60b9      	str	r1, [r7, #8]
    1512:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
    1514:	2002      	movs	r0, #2
    1516:	4b03      	ldr	r3, [pc, #12]	; (1524 <CLI_OTAU+0x1c>)
    1518:	4798      	blx	r3

    return pdFALSE;
    151a:	2300      	movs	r3, #0
}
    151c:	0018      	movs	r0, r3
    151e:	46bd      	mov	sp, r7
    1520:	b004      	add	sp, #16
    1522:	bd80      	pop	{r7, pc}
    1524:	000039c5 	.word	0x000039c5

00001528 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    1528:	b580      	push	{r7, lr}
    152a:	b084      	sub	sp, #16
    152c:	af00      	add	r7, sp, #0
    152e:	60f8      	str	r0, [r7, #12]
    1530:	60b9      	str	r1, [r7, #8]
    1532:	607a      	str	r2, [r7, #4]
    system_reset();
    1534:	4b03      	ldr	r3, [pc, #12]	; (1544 <CLI_ResetDevice+0x1c>)
    1536:	4798      	blx	r3
    return pdFALSE;
    1538:	2300      	movs	r3, #0
}
    153a:	0018      	movs	r0, r3
    153c:	46bd      	mov	sp, r7
    153e:	b004      	add	sp, #16
    1540:	bd80      	pop	{r7, pc}
    1542:	46c0      	nop			; (mov r8, r8)
    1544:	00001149 	.word	0x00001149

00001548 <CLI_version>:
 * @param    p_cli
 * @param    argc
 * @param    argv
 ******************************************************************************/
BaseType_t CLI_version(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    1548:	b580      	push	{r7, lr}
    154a:	b084      	sub	sp, #16
    154c:	af00      	add	r7, sp, #0
    154e:	60f8      	str	r0, [r7, #12]
    1550:	60b9      	str	r1, [r7, #8]
    1552:	607a      	str	r2, [r7, #4]
	SerialConsoleWriteString("\r\nVersion Number: ");
    1554:	4b08      	ldr	r3, [pc, #32]	; (1578 <CLI_version+0x30>)
    1556:	0018      	movs	r0, r3
    1558:	4b08      	ldr	r3, [pc, #32]	; (157c <CLI_version+0x34>)
    155a:	4798      	blx	r3
	SerialConsoleWriteString(VERSION_NUMBER);
    155c:	4b08      	ldr	r3, [pc, #32]	; (1580 <CLI_version+0x38>)
    155e:	0018      	movs	r0, r3
    1560:	4b06      	ldr	r3, [pc, #24]	; (157c <CLI_version+0x34>)
    1562:	4798      	blx	r3
	SerialConsoleWriteString("\r\n\r\n");
    1564:	4b07      	ldr	r3, [pc, #28]	; (1584 <CLI_version+0x3c>)
    1566:	0018      	movs	r0, r3
    1568:	4b04      	ldr	r3, [pc, #16]	; (157c <CLI_version+0x34>)
    156a:	4798      	blx	r3
	return pdFALSE;
    156c:	2300      	movs	r3, #0
}
    156e:	0018      	movs	r0, r3
    1570:	46bd      	mov	sp, r7
    1572:	b004      	add	sp, #16
    1574:	bd80      	pop	{r7, pc}
    1576:	46c0      	nop			; (mov r8, r8)
    1578:	000224a4 	.word	0x000224a4
    157c:	0000a289 	.word	0x0000a289
    1580:	000224b8 	.word	0x000224b8
    1584:	000224c4 	.word	0x000224c4

00001588 <CLI_ticks>:
 * @param    p_cli
 * @param    argc
 * @param    argv
 ******************************************************************************/
BaseType_t CLI_ticks(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    1588:	b580      	push	{r7, lr}
    158a:	b086      	sub	sp, #24
    158c:	af00      	add	r7, sp, #0
    158e:	60f8      	str	r0, [r7, #12]
    1590:	60b9      	str	r1, [r7, #8]
    1592:	607a      	str	r2, [r7, #4]
	TickType_t ticks;
	ticks = xTaskGetTickCount();
    1594:	4b0b      	ldr	r3, [pc, #44]	; (15c4 <CLI_ticks+0x3c>)
    1596:	4798      	blx	r3
    1598:	0003      	movs	r3, r0
    159a:	617b      	str	r3, [r7, #20]
	SerialConsoleWriteString("\r\nTicks since start of scheduler: ");
    159c:	4b0a      	ldr	r3, [pc, #40]	; (15c8 <CLI_ticks+0x40>)
    159e:	0018      	movs	r0, r3
    15a0:	4b0a      	ldr	r3, [pc, #40]	; (15cc <CLI_ticks+0x44>)
    15a2:	4798      	blx	r3
	sprintf(bufCli, "%lu\r\n", ticks);
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	490a      	ldr	r1, [pc, #40]	; (15d0 <CLI_ticks+0x48>)
    15a8:	4b0a      	ldr	r3, [pc, #40]	; (15d4 <CLI_ticks+0x4c>)
    15aa:	0018      	movs	r0, r3
    15ac:	4b0a      	ldr	r3, [pc, #40]	; (15d8 <CLI_ticks+0x50>)
    15ae:	4798      	blx	r3
	SerialConsoleWriteString(bufCli);
    15b0:	4b08      	ldr	r3, [pc, #32]	; (15d4 <CLI_ticks+0x4c>)
    15b2:	0018      	movs	r0, r3
    15b4:	4b05      	ldr	r3, [pc, #20]	; (15cc <CLI_ticks+0x44>)
    15b6:	4798      	blx	r3
	return pdFALSE;
    15b8:	2300      	movs	r3, #0
}
    15ba:	0018      	movs	r0, r3
    15bc:	46bd      	mov	sp, r7
    15be:	b006      	add	sp, #24
    15c0:	bd80      	pop	{r7, pc}
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	00008a7d 	.word	0x00008a7d
    15c8:	000224cc 	.word	0x000224cc
    15cc:	0000a289 	.word	0x0000a289
    15d0:	000224f0 	.word	0x000224f0
    15d4:	20000784 	.word	0x20000784
    15d8:	00021049 	.word	0x00021049

000015dc <CLI_i2cScan>:
 * @param    p_cli
 * @param    argc
 * @param    argv
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    15dc:	b590      	push	{r4, r7, lr}
    15de:	b08f      	sub	sp, #60	; 0x3c
    15e0:	af00      	add	r7, sp, #0
    15e2:	60f8      	str	r0, [r7, #12]
    15e4:	60b9      	str	r1, [r7, #8]
    15e6:	607a      	str	r2, [r7, #4]
    I2C_Data i2cDevice;
    uint8_t address;
    // Send 0 command byte
    uint8_t dataOut[2] = {0, 0};
    15e8:	2318      	movs	r3, #24
    15ea:	18fb      	adds	r3, r7, r3
    15ec:	2200      	movs	r2, #0
    15ee:	701a      	strb	r2, [r3, #0]
    15f0:	2318      	movs	r3, #24
    15f2:	18fb      	adds	r3, r7, r3
    15f4:	2200      	movs	r2, #0
    15f6:	705a      	strb	r2, [r3, #1]
    uint8_t dataIn[2];
    dataOut[0] = 0;
    15f8:	2318      	movs	r3, #24
    15fa:	18fb      	adds	r3, r7, r3
    15fc:	2200      	movs	r2, #0
    15fe:	701a      	strb	r2, [r3, #0]
    dataOut[1] = 0;
    1600:	2318      	movs	r3, #24
    1602:	18fb      	adds	r3, r7, r3
    1604:	2200      	movs	r2, #0
    1606:	705a      	strb	r2, [r3, #1]
    i2cDevice.address = 0;
    1608:	231c      	movs	r3, #28
    160a:	18fb      	adds	r3, r7, r3
    160c:	2200      	movs	r2, #0
    160e:	701a      	strb	r2, [r3, #0]
    i2cDevice.msgIn = (uint8_t *)&dataIn[0];
    1610:	231c      	movs	r3, #28
    1612:	18fb      	adds	r3, r7, r3
    1614:	2214      	movs	r2, #20
    1616:	18ba      	adds	r2, r7, r2
    1618:	609a      	str	r2, [r3, #8]
    i2cDevice.lenOut = 1;
    161a:	231c      	movs	r3, #28
    161c:	18fb      	adds	r3, r7, r3
    161e:	2201      	movs	r2, #1
    1620:	81da      	strh	r2, [r3, #14]
    i2cDevice.msgOut = (const uint8_t *)&dataOut[0];
    1622:	231c      	movs	r3, #28
    1624:	18fb      	adds	r3, r7, r3
    1626:	2218      	movs	r2, #24
    1628:	18ba      	adds	r2, r7, r2
    162a:	605a      	str	r2, [r3, #4]
    i2cDevice.lenIn = 1;
    162c:	231c      	movs	r3, #28
    162e:	18fb      	adds	r3, r7, r3
    1630:	2201      	movs	r2, #1
    1632:	819a      	strh	r2, [r3, #12]

    SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
    1634:	4b2c      	ldr	r3, [pc, #176]	; (16e8 <CLI_i2cScan+0x10c>)
    1636:	0018      	movs	r0, r3
    1638:	4b2c      	ldr	r3, [pc, #176]	; (16ec <CLI_i2cScan+0x110>)
    163a:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
    163c:	2300      	movs	r3, #0
    163e:	637b      	str	r3, [r7, #52]	; 0x34
    1640:	e046      	b.n	16d0 <CLI_i2cScan+0xf4>
        snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
    1642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1644:	4a2a      	ldr	r2, [pc, #168]	; (16f0 <CLI_i2cScan+0x114>)
    1646:	482b      	ldr	r0, [pc, #172]	; (16f4 <CLI_i2cScan+0x118>)
    1648:	210f      	movs	r1, #15
    164a:	4c2b      	ldr	r4, [pc, #172]	; (16f8 <CLI_i2cScan+0x11c>)
    164c:	47a0      	blx	r4
        SerialConsoleWriteString(bufCli);
    164e:	4b29      	ldr	r3, [pc, #164]	; (16f4 <CLI_i2cScan+0x118>)
    1650:	0018      	movs	r0, r3
    1652:	4b26      	ldr	r3, [pc, #152]	; (16ec <CLI_i2cScan+0x110>)
    1654:	4798      	blx	r3

        for (int j = 0; j < 16; j++) {
    1656:	2300      	movs	r3, #0
    1658:	633b      	str	r3, [r7, #48]	; 0x30
    165a:	e02f      	b.n	16bc <CLI_i2cScan+0xe0>
            i2cDevice.address = (i + j) << 1;
    165c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    165e:	b2da      	uxtb	r2, r3
    1660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1662:	b2db      	uxtb	r3, r3
    1664:	18d3      	adds	r3, r2, r3
    1666:	b2db      	uxtb	r3, r3
    1668:	18db      	adds	r3, r3, r3
    166a:	b2da      	uxtb	r2, r3
    166c:	231c      	movs	r3, #28
    166e:	18fb      	adds	r3, r7, r3
    1670:	701a      	strb	r2, [r3, #0]

            int32_t ret = I2cWriteDataWait(&i2cDevice, 100);
    1672:	231c      	movs	r3, #28
    1674:	18fb      	adds	r3, r7, r3
    1676:	2164      	movs	r1, #100	; 0x64
    1678:	0018      	movs	r0, r3
    167a:	4b20      	ldr	r3, [pc, #128]	; (16fc <CLI_i2cScan+0x120>)
    167c:	4798      	blx	r3
    167e:	0003      	movs	r3, r0
    1680:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (ret == 0) {
    1682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1684:	2b00      	cmp	r3, #0
    1686:	d10c      	bne.n	16a2 <CLI_i2cScan+0xc6>
                snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cDevice.address);
    1688:	231c      	movs	r3, #28
    168a:	18fb      	adds	r3, r7, r3
    168c:	781b      	ldrb	r3, [r3, #0]
    168e:	4a18      	ldr	r2, [pc, #96]	; (16f0 <CLI_i2cScan+0x114>)
    1690:	4818      	ldr	r0, [pc, #96]	; (16f4 <CLI_i2cScan+0x118>)
    1692:	210f      	movs	r1, #15
    1694:	4c18      	ldr	r4, [pc, #96]	; (16f8 <CLI_i2cScan+0x11c>)
    1696:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
    1698:	4b16      	ldr	r3, [pc, #88]	; (16f4 <CLI_i2cScan+0x118>)
    169a:	0018      	movs	r0, r3
    169c:	4b13      	ldr	r3, [pc, #76]	; (16ec <CLI_i2cScan+0x110>)
    169e:	4798      	blx	r3
    16a0:	e009      	b.n	16b6 <CLI_i2cScan+0xda>
            } else {
                snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
    16a2:	4b14      	ldr	r3, [pc, #80]	; (16f4 <CLI_i2cScan+0x118>)
    16a4:	4a16      	ldr	r2, [pc, #88]	; (1700 <CLI_i2cScan+0x124>)
    16a6:	8811      	ldrh	r1, [r2, #0]
    16a8:	8019      	strh	r1, [r3, #0]
    16aa:	7892      	ldrb	r2, [r2, #2]
    16ac:	709a      	strb	r2, [r3, #2]
                SerialConsoleWriteString(bufCli);
    16ae:	4b11      	ldr	r3, [pc, #68]	; (16f4 <CLI_i2cScan+0x118>)
    16b0:	0018      	movs	r0, r3
    16b2:	4b0e      	ldr	r3, [pc, #56]	; (16ec <CLI_i2cScan+0x110>)
    16b4:	4798      	blx	r3
        for (int j = 0; j < 16; j++) {
    16b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    16b8:	3301      	adds	r3, #1
    16ba:	633b      	str	r3, [r7, #48]	; 0x30
    16bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    16be:	2b0f      	cmp	r3, #15
    16c0:	ddcc      	ble.n	165c <CLI_i2cScan+0x80>
            }
        }
        SerialConsoleWriteString("\r\n");
    16c2:	4b10      	ldr	r3, [pc, #64]	; (1704 <CLI_i2cScan+0x128>)
    16c4:	0018      	movs	r0, r3
    16c6:	4b09      	ldr	r3, [pc, #36]	; (16ec <CLI_i2cScan+0x110>)
    16c8:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
    16ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16cc:	3310      	adds	r3, #16
    16ce:	637b      	str	r3, [r7, #52]	; 0x34
    16d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16d2:	2b7f      	cmp	r3, #127	; 0x7f
    16d4:	ddb5      	ble.n	1642 <CLI_i2cScan+0x66>
    }
    SerialConsoleWriteString("\r\n");
    16d6:	4b0b      	ldr	r3, [pc, #44]	; (1704 <CLI_i2cScan+0x128>)
    16d8:	0018      	movs	r0, r3
    16da:	4b04      	ldr	r3, [pc, #16]	; (16ec <CLI_i2cScan+0x110>)
    16dc:	4798      	blx	r3
    return pdFALSE;
    16de:	2300      	movs	r3, #0
}
    16e0:	0018      	movs	r0, r3
    16e2:	46bd      	mov	sp, r7
    16e4:	b00f      	add	sp, #60	; 0x3c
    16e6:	bd90      	pop	{r4, r7, pc}
    16e8:	000224f8 	.word	0x000224f8
    16ec:	0000a289 	.word	0x0000a289
    16f0:	0002252c 	.word	0x0002252c
    16f4:	20000784 	.word	0x20000784
    16f8:	00020fe5 	.word	0x00020fe5
    16fc:	00001d19 	.word	0x00001d19
    1700:	00022534 	.word	0x00022534
    1704:	00022488 	.word	0x00022488

00001708 <system_interrupt_enable>:
{
    1708:	b580      	push	{r7, lr}
    170a:	b082      	sub	sp, #8
    170c:	af00      	add	r7, sp, #0
    170e:	0002      	movs	r2, r0
    1710:	1dfb      	adds	r3, r7, #7
    1712:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1714:	4b06      	ldr	r3, [pc, #24]	; (1730 <system_interrupt_enable+0x28>)
    1716:	1dfa      	adds	r2, r7, #7
    1718:	7812      	ldrb	r2, [r2, #0]
    171a:	0011      	movs	r1, r2
    171c:	221f      	movs	r2, #31
    171e:	400a      	ands	r2, r1
    1720:	2101      	movs	r1, #1
    1722:	4091      	lsls	r1, r2
    1724:	000a      	movs	r2, r1
    1726:	601a      	str	r2, [r3, #0]
}
    1728:	46c0      	nop			; (mov r8, r8)
    172a:	46bd      	mov	sp, r7
    172c:	b002      	add	sp, #8
    172e:	bd80      	pop	{r7, pc}
    1730:	e000e100 	.word	0xe000e100

00001734 <i2c_master_is_syncing>:
{
    1734:	b580      	push	{r7, lr}
    1736:	b084      	sub	sp, #16
    1738:	af00      	add	r7, sp, #0
    173a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    173c:	687b      	ldr	r3, [r7, #4]
    173e:	681b      	ldr	r3, [r3, #0]
    1740:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1742:	68fb      	ldr	r3, [r7, #12]
    1744:	69db      	ldr	r3, [r3, #28]
    1746:	2207      	movs	r2, #7
    1748:	4013      	ands	r3, r2
    174a:	1e5a      	subs	r2, r3, #1
    174c:	4193      	sbcs	r3, r2
    174e:	b2db      	uxtb	r3, r3
}
    1750:	0018      	movs	r0, r3
    1752:	46bd      	mov	sp, r7
    1754:	b004      	add	sp, #16
    1756:	bd80      	pop	{r7, pc}

00001758 <_i2c_master_wait_for_sync>:
{
    1758:	b580      	push	{r7, lr}
    175a:	b082      	sub	sp, #8
    175c:	af00      	add	r7, sp, #0
    175e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    1760:	46c0      	nop			; (mov r8, r8)
    1762:	687b      	ldr	r3, [r7, #4]
    1764:	0018      	movs	r0, r3
    1766:	4b04      	ldr	r3, [pc, #16]	; (1778 <_i2c_master_wait_for_sync+0x20>)
    1768:	4798      	blx	r3
    176a:	1e03      	subs	r3, r0, #0
    176c:	d1f9      	bne.n	1762 <_i2c_master_wait_for_sync+0xa>
}
    176e:	46c0      	nop			; (mov r8, r8)
    1770:	46bd      	mov	sp, r7
    1772:	b002      	add	sp, #8
    1774:	bd80      	pop	{r7, pc}
    1776:	46c0      	nop			; (mov r8, r8)
    1778:	00001735 	.word	0x00001735

0000177c <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    177c:	b580      	push	{r7, lr}
    177e:	b082      	sub	sp, #8
    1780:	af00      	add	r7, sp, #0
    1782:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1784:	687b      	ldr	r3, [r7, #4]
    1786:	2264      	movs	r2, #100	; 0x64
    1788:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    178a:	687b      	ldr	r3, [r7, #4]
    178c:	4a1b      	ldr	r2, [pc, #108]	; (17fc <i2c_master_get_config_defaults+0x80>)
    178e:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1790:	687b      	ldr	r3, [r7, #4]
    1792:	2200      	movs	r2, #0
    1794:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1796:	687b      	ldr	r3, [r7, #4]
    1798:	2200      	movs	r2, #0
    179a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    179c:	687b      	ldr	r3, [r7, #4]
    179e:	2200      	movs	r2, #0
    17a0:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    17a2:	687b      	ldr	r3, [r7, #4]
    17a4:	2280      	movs	r2, #128	; 0x80
    17a6:	0392      	lsls	r2, r2, #14
    17a8:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    17aa:	687b      	ldr	r3, [r7, #4]
    17ac:	2201      	movs	r2, #1
    17ae:	4252      	negs	r2, r2
    17b0:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	2201      	movs	r2, #1
    17b6:	4252      	negs	r2, r2
    17b8:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    17ba:	687b      	ldr	r3, [r7, #4]
    17bc:	2200      	movs	r2, #0
    17be:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    17c0:	687b      	ldr	r3, [r7, #4]
    17c2:	2200      	movs	r2, #0
    17c4:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    17c6:	687b      	ldr	r3, [r7, #4]
    17c8:	2224      	movs	r2, #36	; 0x24
    17ca:	2100      	movs	r1, #0
    17cc:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    17ce:	687b      	ldr	r3, [r7, #4]
    17d0:	2200      	movs	r2, #0
    17d2:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	222c      	movs	r2, #44	; 0x2c
    17d8:	2100      	movs	r1, #0
    17da:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    17dc:	687b      	ldr	r3, [r7, #4]
    17de:	222d      	movs	r2, #45	; 0x2d
    17e0:	2100      	movs	r1, #0
    17e2:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    17e4:	687b      	ldr	r3, [r7, #4]
    17e6:	222e      	movs	r2, #46	; 0x2e
    17e8:	2100      	movs	r1, #0
    17ea:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    17ec:	687b      	ldr	r3, [r7, #4]
    17ee:	22d7      	movs	r2, #215	; 0xd7
    17f0:	861a      	strh	r2, [r3, #48]	; 0x30
}
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	46bd      	mov	sp, r7
    17f6:	b002      	add	sp, #8
    17f8:	bd80      	pop	{r7, pc}
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	00000d48 	.word	0x00000d48

00001800 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    1800:	b580      	push	{r7, lr}
    1802:	b084      	sub	sp, #16
    1804:	af00      	add	r7, sp, #0
    1806:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1808:	687b      	ldr	r3, [r7, #4]
    180a:	681b      	ldr	r3, [r3, #0]
    180c:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    180e:	2300      	movs	r3, #0
    1810:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    1812:	687b      	ldr	r3, [r7, #4]
    1814:	0018      	movs	r0, r3
    1816:	4b14      	ldr	r3, [pc, #80]	; (1868 <i2c_master_enable+0x68>)
    1818:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    181a:	68bb      	ldr	r3, [r7, #8]
    181c:	681b      	ldr	r3, [r3, #0]
    181e:	2202      	movs	r2, #2
    1820:	431a      	orrs	r2, r3
    1822:	68bb      	ldr	r3, [r7, #8]
    1824:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1826:	687b      	ldr	r3, [r7, #4]
    1828:	681b      	ldr	r3, [r3, #0]
    182a:	0018      	movs	r0, r3
    182c:	4b0f      	ldr	r3, [pc, #60]	; (186c <i2c_master_enable+0x6c>)
    182e:	4798      	blx	r3
    1830:	0003      	movs	r3, r0
    1832:	0018      	movs	r0, r3
    1834:	4b0e      	ldr	r3, [pc, #56]	; (1870 <i2c_master_enable+0x70>)
    1836:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1838:	e00c      	b.n	1854 <i2c_master_enable+0x54>
		timeout_counter++;
    183a:	68fb      	ldr	r3, [r7, #12]
    183c:	3301      	adds	r3, #1
    183e:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1840:	687b      	ldr	r3, [r7, #4]
    1842:	88db      	ldrh	r3, [r3, #6]
    1844:	001a      	movs	r2, r3
    1846:	68fb      	ldr	r3, [r7, #12]
    1848:	429a      	cmp	r2, r3
    184a:	d803      	bhi.n	1854 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    184c:	68bb      	ldr	r3, [r7, #8]
    184e:	2210      	movs	r2, #16
    1850:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    1852:	e006      	b.n	1862 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1854:	68bb      	ldr	r3, [r7, #8]
    1856:	8b5b      	ldrh	r3, [r3, #26]
    1858:	b29b      	uxth	r3, r3
    185a:	001a      	movs	r2, r3
    185c:	2310      	movs	r3, #16
    185e:	4013      	ands	r3, r2
    1860:	d0eb      	beq.n	183a <i2c_master_enable+0x3a>
		}
	}
}
    1862:	46bd      	mov	sp, r7
    1864:	b004      	add	sp, #16
    1866:	bd80      	pop	{r7, pc}
    1868:	00001759 	.word	0x00001759
    186c:	00013b9d 	.word	0x00013b9d
    1870:	00001709 	.word	0x00001709

00001874 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    1874:	b580      	push	{r7, lr}
    1876:	b082      	sub	sp, #8
    1878:	af00      	add	r7, sp, #0
    187a:	6078      	str	r0, [r7, #4]
    187c:	000a      	movs	r2, r1
    187e:	1cfb      	adds	r3, r7, #3
    1880:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    1882:	687b      	ldr	r3, [r7, #4]
    1884:	7e5b      	ldrb	r3, [r3, #25]
    1886:	b2db      	uxtb	r3, r3
    1888:	b25a      	sxtb	r2, r3
    188a:	1cfb      	adds	r3, r7, #3
    188c:	781b      	ldrb	r3, [r3, #0]
    188e:	2101      	movs	r1, #1
    1890:	4099      	lsls	r1, r3
    1892:	000b      	movs	r3, r1
    1894:	b25b      	sxtb	r3, r3
    1896:	4313      	orrs	r3, r2
    1898:	b25b      	sxtb	r3, r3
    189a:	b2da      	uxtb	r2, r3
    189c:	687b      	ldr	r3, [r7, #4]
    189e:	765a      	strb	r2, [r3, #25]
}
    18a0:	46c0      	nop			; (mov r8, r8)
    18a2:	46bd      	mov	sp, r7
    18a4:	b002      	add	sp, #8
    18a6:	bd80      	pop	{r7, pc}

000018a8 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
* Forward Declarations
******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
    18a8:	b590      	push	{r4, r7, lr}
    18aa:	b091      	sub	sp, #68	; 0x44
    18ac:	af00      	add	r7, sp, #0
	int32_t error = STATUS_OK;
    18ae:	2300      	movs	r3, #0
    18b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	status_code_genare_t errCodeAsf = STATUS_OK;
    18b2:	233a      	movs	r3, #58	; 0x3a
    18b4:	18fb      	adds	r3, r7, r3
    18b6:	2200      	movs	r2, #0
    18b8:	701a      	strb	r2, [r3, #0]
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    18ba:	1d3b      	adds	r3, r7, #4
    18bc:	0018      	movs	r0, r3
    18be:	4b21      	ldr	r3, [pc, #132]	; (1944 <I2cDriverConfigureSensorBus+0x9c>)
    18c0:	4798      	blx	r3
	
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    18c2:	1d3b      	adds	r3, r7, #4
    18c4:	4a20      	ldr	r2, [pc, #128]	; (1948 <I2cDriverConfigureSensorBus+0xa0>)
    18c6:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    18c8:	1d3b      	adds	r3, r7, #4
    18ca:	4a20      	ldr	r2, [pc, #128]	; (194c <I2cDriverConfigureSensorBus+0xa4>)
    18cc:	621a      	str	r2, [r3, #32]
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 10000;
    18ce:	1d3b      	adds	r3, r7, #4
    18d0:	4a1f      	ldr	r2, [pc, #124]	; (1950 <I2cDriverConfigureSensorBus+0xa8>)
    18d2:	82da      	strh	r2, [r3, #22]
	/* Initialize and enable device with config. Try three times to initialize */
	
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
    18d4:	233b      	movs	r3, #59	; 0x3b
    18d6:	18fb      	adds	r3, r7, r3
    18d8:	2203      	movs	r2, #3
    18da:	701a      	strb	r2, [r3, #0]
    18dc:	e01e      	b.n	191c <I2cDriverConfigureSensorBus+0x74>
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
    18de:	233a      	movs	r3, #58	; 0x3a
    18e0:	18fc      	adds	r4, r7, r3
    18e2:	1d3a      	adds	r2, r7, #4
    18e4:	491b      	ldr	r1, [pc, #108]	; (1954 <I2cDriverConfigureSensorBus+0xac>)
    18e6:	4b1c      	ldr	r3, [pc, #112]	; (1958 <I2cDriverConfigureSensorBus+0xb0>)
    18e8:	0018      	movs	r0, r3
    18ea:	4b1c      	ldr	r3, [pc, #112]	; (195c <I2cDriverConfigureSensorBus+0xb4>)
    18ec:	4798      	blx	r3
    18ee:	0003      	movs	r3, r0
    18f0:	7023      	strb	r3, [r4, #0]
		if(STATUS_OK == errCodeAsf){
    18f2:	233a      	movs	r3, #58	; 0x3a
    18f4:	18fb      	adds	r3, r7, r3
    18f6:	781b      	ldrb	r3, [r3, #0]
    18f8:	2b00      	cmp	r3, #0
    18fa:	d104      	bne.n	1906 <I2cDriverConfigureSensorBus+0x5e>
			error = errCodeAsf;
    18fc:	233a      	movs	r3, #58	; 0x3a
    18fe:	18fb      	adds	r3, r7, r3
    1900:	781b      	ldrb	r3, [r3, #0]
    1902:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
    1904:	e00f      	b.n	1926 <I2cDriverConfigureSensorBus+0x7e>
			}else{
			i2c_master_reset(&i2cSensorBusInstance);
    1906:	4b14      	ldr	r3, [pc, #80]	; (1958 <I2cDriverConfigureSensorBus+0xb0>)
    1908:	0018      	movs	r0, r3
    190a:	4b15      	ldr	r3, [pc, #84]	; (1960 <I2cDriverConfigureSensorBus+0xb8>)
    190c:	4798      	blx	r3
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
    190e:	233b      	movs	r3, #59	; 0x3b
    1910:	18fb      	adds	r3, r7, r3
    1912:	781a      	ldrb	r2, [r3, #0]
    1914:	233b      	movs	r3, #59	; 0x3b
    1916:	18fb      	adds	r3, r7, r3
    1918:	3a01      	subs	r2, #1
    191a:	701a      	strb	r2, [r3, #0]
    191c:	233b      	movs	r3, #59	; 0x3b
    191e:	18fb      	adds	r3, r7, r3
    1920:	781b      	ldrb	r3, [r3, #0]
    1922:	2b00      	cmp	r3, #0
    1924:	d1db      	bne.n	18de <I2cDriverConfigureSensorBus+0x36>
		}
	}
	
	if(STATUS_OK != error) goto exit;
    1926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1928:	2b00      	cmp	r3, #0
    192a:	d104      	bne.n	1936 <I2cDriverConfigureSensorBus+0x8e>
	
	i2c_master_enable(&i2cSensorBusInstance);
    192c:	4b0a      	ldr	r3, [pc, #40]	; (1958 <I2cDriverConfigureSensorBus+0xb0>)
    192e:	0018      	movs	r0, r3
    1930:	4b0c      	ldr	r3, [pc, #48]	; (1964 <I2cDriverConfigureSensorBus+0xbc>)
    1932:	4798      	blx	r3
    1934:	e000      	b.n	1938 <I2cDriverConfigureSensorBus+0x90>
	if(STATUS_OK != error) goto exit;
    1936:	46c0      	nop			; (mov r8, r8)
	
	exit:
	return error;
    1938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    193a:	0018      	movs	r0, r3
    193c:	46bd      	mov	sp, r7
    193e:	b011      	add	sp, #68	; 0x44
    1940:	bd90      	pop	{r4, r7, pc}
    1942:	46c0      	nop			; (mov r8, r8)
    1944:	0000177d 	.word	0x0000177d
    1948:	00080002 	.word	0x00080002
    194c:	00090002 	.word	0x00090002
    1950:	00002710 	.word	0x00002710
    1954:	42000800 	.word	0x42000800
    1958:	20004618 	.word	0x20004618
    195c:	00003fbd 	.word	0x00003fbd
    1960:	000040f1 	.word	0x000040f1
    1964:	00001801 	.word	0x00001801

00001968 <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
    1968:	b580      	push	{r7, lr}
    196a:	b084      	sub	sp, #16
    196c:	af00      	add	r7, sp, #0
    196e:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
    1970:	4b0e      	ldr	r3, [pc, #56]	; (19ac <I2cSensorsTxComplete+0x44>)
    1972:	2200      	movs	r2, #0
    1974:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.rxDoneFlag = true;			
    1976:	4b0d      	ldr	r3, [pc, #52]	; (19ac <I2cSensorsTxComplete+0x44>)
    1978:	2201      	movs	r2, #1
    197a:	609a      	str	r2, [r3, #8]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    197c:	2300      	movs	r3, #0
    197e:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    1980:	4b0b      	ldr	r3, [pc, #44]	; (19b0 <I2cSensorsTxComplete+0x48>)
    1982:	681b      	ldr	r3, [r3, #0]
    1984:	220c      	movs	r2, #12
    1986:	18ba      	adds	r2, r7, r2
    1988:	0011      	movs	r1, r2
    198a:	0018      	movs	r0, r3
    198c:	4b09      	ldr	r3, [pc, #36]	; (19b4 <I2cSensorsTxComplete+0x4c>)
    198e:	4798      	blx	r3
	sensorTransmitError = false;
    1990:	4b09      	ldr	r3, [pc, #36]	; (19b8 <I2cSensorsTxComplete+0x50>)
    1992:	2200      	movs	r2, #0
    1994:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    1996:	68fb      	ldr	r3, [r7, #12]
    1998:	2b00      	cmp	r3, #0
    199a:	d003      	beq.n	19a4 <I2cSensorsTxComplete+0x3c>
    199c:	4b07      	ldr	r3, [pc, #28]	; (19bc <I2cSensorsTxComplete+0x54>)
    199e:	2280      	movs	r2, #128	; 0x80
    19a0:	0552      	lsls	r2, r2, #21
    19a2:	601a      	str	r2, [r3, #0]
}
    19a4:	46c0      	nop			; (mov r8, r8)
    19a6:	46bd      	mov	sp, r7
    19a8:	b004      	add	sp, #16
    19aa:	bd80      	pop	{r7, pc}
    19ac:	20000870 	.word	0x20000870
    19b0:	20004640 	.word	0x20004640
    19b4:	00007259 	.word	0x00007259
    19b8:	2000086c 	.word	0x2000086c
    19bc:	e000ed04 	.word	0xe000ed04

000019c0 <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
    19c0:	b580      	push	{r7, lr}
    19c2:	b084      	sub	sp, #16
    19c4:	af00      	add	r7, sp, #0
    19c6:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
    19c8:	4b0e      	ldr	r3, [pc, #56]	; (1a04 <I2cSensorsRxComplete+0x44>)
    19ca:	2200      	movs	r2, #0
    19cc:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.rxDoneFlag = true;
    19ce:	4b0d      	ldr	r3, [pc, #52]	; (1a04 <I2cSensorsRxComplete+0x44>)
    19d0:	2201      	movs	r2, #1
    19d2:	609a      	str	r2, [r3, #8]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    19d4:	2300      	movs	r3, #0
    19d6:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    19d8:	4b0b      	ldr	r3, [pc, #44]	; (1a08 <I2cSensorsRxComplete+0x48>)
    19da:	681b      	ldr	r3, [r3, #0]
    19dc:	220c      	movs	r2, #12
    19de:	18ba      	adds	r2, r7, r2
    19e0:	0011      	movs	r1, r2
    19e2:	0018      	movs	r0, r3
    19e4:	4b09      	ldr	r3, [pc, #36]	; (1a0c <I2cSensorsRxComplete+0x4c>)
    19e6:	4798      	blx	r3
	sensorTransmitError = false;
    19e8:	4b09      	ldr	r3, [pc, #36]	; (1a10 <I2cSensorsRxComplete+0x50>)
    19ea:	2200      	movs	r2, #0
    19ec:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    19ee:	68fb      	ldr	r3, [r7, #12]
    19f0:	2b00      	cmp	r3, #0
    19f2:	d003      	beq.n	19fc <I2cSensorsRxComplete+0x3c>
    19f4:	4b07      	ldr	r3, [pc, #28]	; (1a14 <I2cSensorsRxComplete+0x54>)
    19f6:	2280      	movs	r2, #128	; 0x80
    19f8:	0552      	lsls	r2, r2, #21
    19fa:	601a      	str	r2, [r3, #0]
}
    19fc:	46c0      	nop			; (mov r8, r8)
    19fe:	46bd      	mov	sp, r7
    1a00:	b004      	add	sp, #16
    1a02:	bd80      	pop	{r7, pc}
    1a04:	20000870 	.word	0x20000870
    1a08:	20004640 	.word	0x20004640
    1a0c:	00007259 	.word	0x00007259
    1a10:	2000086c 	.word	0x2000086c
    1a14:	e000ed04 	.word	0xe000ed04

00001a18 <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
    1a18:	b580      	push	{r7, lr}
    1a1a:	b084      	sub	sp, #16
    1a1c:	af00      	add	r7, sp, #0
    1a1e:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
    1a20:	4b0e      	ldr	r3, [pc, #56]	; (1a5c <I2cSensorsError+0x44>)
    1a22:	2200      	movs	r2, #0
    1a24:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.txDoneFlag = true;
    1a26:	4b0d      	ldr	r3, [pc, #52]	; (1a5c <I2cSensorsError+0x44>)
    1a28:	2201      	movs	r2, #1
    1a2a:	605a      	str	r2, [r3, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    1a2c:	2300      	movs	r3, #0
    1a2e:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    1a30:	4b0b      	ldr	r3, [pc, #44]	; (1a60 <I2cSensorsError+0x48>)
    1a32:	681b      	ldr	r3, [r3, #0]
    1a34:	220c      	movs	r2, #12
    1a36:	18ba      	adds	r2, r7, r2
    1a38:	0011      	movs	r1, r2
    1a3a:	0018      	movs	r0, r3
    1a3c:	4b09      	ldr	r3, [pc, #36]	; (1a64 <I2cSensorsError+0x4c>)
    1a3e:	4798      	blx	r3
	sensorTransmitError = false;
    1a40:	4b09      	ldr	r3, [pc, #36]	; (1a68 <I2cSensorsError+0x50>)
    1a42:	2200      	movs	r2, #0
    1a44:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    1a46:	68fb      	ldr	r3, [r7, #12]
    1a48:	2b00      	cmp	r3, #0
    1a4a:	d003      	beq.n	1a54 <I2cSensorsError+0x3c>
    1a4c:	4b07      	ldr	r3, [pc, #28]	; (1a6c <I2cSensorsError+0x54>)
    1a4e:	2280      	movs	r2, #128	; 0x80
    1a50:	0552      	lsls	r2, r2, #21
    1a52:	601a      	str	r2, [r3, #0]
}
    1a54:	46c0      	nop			; (mov r8, r8)
    1a56:	46bd      	mov	sp, r7
    1a58:	b004      	add	sp, #16
    1a5a:	bd80      	pop	{r7, pc}
    1a5c:	20000870 	.word	0x20000870
    1a60:	20004640 	.word	0x20004640
    1a64:	00007259 	.word	0x00007259
    1a68:	2000086c 	.word	0x2000086c
    1a6c:	e000ed04 	.word	0xe000ed04

00001a70 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
    1a70:	b580      	push	{r7, lr}
    1a72:	af00      	add	r7, sp, #0
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    1a74:	4911      	ldr	r1, [pc, #68]	; (1abc <I2cDriverRegisterSensorBusCallbacks+0x4c>)
    1a76:	4b12      	ldr	r3, [pc, #72]	; (1ac0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1a78:	2200      	movs	r2, #0
    1a7a:	0018      	movs	r0, r3
    1a7c:	4b11      	ldr	r3, [pc, #68]	; (1ac4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
    1a7e:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    1a80:	4b0f      	ldr	r3, [pc, #60]	; (1ac0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1a82:	2100      	movs	r1, #0
    1a84:	0018      	movs	r0, r3
    1a86:	4b10      	ldr	r3, [pc, #64]	; (1ac8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
    1a88:	4798      	blx	r3
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
    1a8a:	4910      	ldr	r1, [pc, #64]	; (1acc <I2cDriverRegisterSensorBusCallbacks+0x5c>)
    1a8c:	4b0c      	ldr	r3, [pc, #48]	; (1ac0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1a8e:	2201      	movs	r2, #1
    1a90:	0018      	movs	r0, r3
    1a92:	4b0c      	ldr	r3, [pc, #48]	; (1ac4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
    1a94:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
    1a96:	4b0a      	ldr	r3, [pc, #40]	; (1ac0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1a98:	2101      	movs	r1, #1
    1a9a:	0018      	movs	r0, r3
    1a9c:	4b0a      	ldr	r3, [pc, #40]	; (1ac8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
    1a9e:	4798      	blx	r3
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
    1aa0:	490b      	ldr	r1, [pc, #44]	; (1ad0 <I2cDriverRegisterSensorBusCallbacks+0x60>)
    1aa2:	4b07      	ldr	r3, [pc, #28]	; (1ac0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1aa4:	2202      	movs	r2, #2
    1aa6:	0018      	movs	r0, r3
    1aa8:	4b06      	ldr	r3, [pc, #24]	; (1ac4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
    1aaa:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
    1aac:	4b04      	ldr	r3, [pc, #16]	; (1ac0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1aae:	2102      	movs	r1, #2
    1ab0:	0018      	movs	r0, r3
    1ab2:	4b05      	ldr	r3, [pc, #20]	; (1ac8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
    1ab4:	4798      	blx	r3
}
    1ab6:	46c0      	nop			; (mov r8, r8)
    1ab8:	46bd      	mov	sp, r7
    1aba:	bd80      	pop	{r7, pc}
    1abc:	00001969 	.word	0x00001969
    1ac0:	20004618 	.word	0x20004618
    1ac4:	00000bf5 	.word	0x00000bf5
    1ac8:	00001875 	.word	0x00001875
    1acc:	000019c1 	.word	0x000019c1
    1ad0:	00001a19 	.word	0x00001a19

00001ad4 <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
    1ad4:	b580      	push	{r7, lr}
    1ad6:	b082      	sub	sp, #8
    1ad8:	af00      	add	r7, sp, #0
	
	int32_t error = STATUS_OK;
    1ada:	2300      	movs	r3, #0
    1adc:	607b      	str	r3, [r7, #4]


	error = I2cDriverConfigureSensorBus();
    1ade:	4b14      	ldr	r3, [pc, #80]	; (1b30 <I2cInitializeDriver+0x5c>)
    1ae0:	4798      	blx	r3
    1ae2:	0003      	movs	r3, r0
    1ae4:	607b      	str	r3, [r7, #4]
	if(STATUS_OK != error) goto exit;
    1ae6:	687b      	ldr	r3, [r7, #4]
    1ae8:	2b00      	cmp	r3, #0
    1aea:	d11a      	bne.n	1b22 <I2cInitializeDriver+0x4e>
	
	I2cDriverRegisterSensorBusCallbacks();
    1aec:	4b11      	ldr	r3, [pc, #68]	; (1b34 <I2cInitializeDriver+0x60>)
    1aee:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
    1af0:	2001      	movs	r0, #1
    1af2:	4b11      	ldr	r3, [pc, #68]	; (1b38 <I2cInitializeDriver+0x64>)
    1af4:	4798      	blx	r3
    1af6:	0002      	movs	r2, r0
    1af8:	4b10      	ldr	r3, [pc, #64]	; (1b3c <I2cInitializeDriver+0x68>)
    1afa:	601a      	str	r2, [r3, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
    1afc:	2203      	movs	r2, #3
    1afe:	2100      	movs	r1, #0
    1b00:	2001      	movs	r0, #1
    1b02:	4b0f      	ldr	r3, [pc, #60]	; (1b40 <I2cInitializeDriver+0x6c>)
    1b04:	4798      	blx	r3
    1b06:	0002      	movs	r2, r0
    1b08:	4b0e      	ldr	r3, [pc, #56]	; (1b44 <I2cInitializeDriver+0x70>)
    1b0a:	601a      	str	r2, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
    1b0c:	4b0b      	ldr	r3, [pc, #44]	; (1b3c <I2cInitializeDriver+0x68>)
    1b0e:	681b      	ldr	r3, [r3, #0]
    1b10:	2b00      	cmp	r3, #0
    1b12:	d003      	beq.n	1b1c <I2cInitializeDriver+0x48>
    1b14:	4b0b      	ldr	r3, [pc, #44]	; (1b44 <I2cInitializeDriver+0x70>)
    1b16:	681b      	ldr	r3, [r3, #0]
    1b18:	2b00      	cmp	r3, #0
    1b1a:	d103      	bne.n	1b24 <I2cInitializeDriver+0x50>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
    1b1c:	2306      	movs	r3, #6
    1b1e:	607b      	str	r3, [r7, #4]
		goto exit;
    1b20:	e000      	b.n	1b24 <I2cInitializeDriver+0x50>
	if(STATUS_OK != error) goto exit;
    1b22:	46c0      	nop			; (mov r8, r8)
	}

	exit:
	return error;		
    1b24:	687b      	ldr	r3, [r7, #4]
}
    1b26:	0018      	movs	r0, r3
    1b28:	46bd      	mov	sp, r7
    1b2a:	b002      	add	sp, #8
    1b2c:	bd80      	pop	{r7, pc}
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	000018a9 	.word	0x000018a9
    1b34:	00001a71 	.word	0x00001a71
    1b38:	00006b91 	.word	0x00006b91
    1b3c:	20004614 	.word	0x20004614
    1b40:	00006929 	.word	0x00006929
    1b44:	20004640 	.word	0x20004640

00001b48 <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
    1b48:	b590      	push	{r4, r7, lr}
    1b4a:	b089      	sub	sp, #36	; 0x24
    1b4c:	af00      	add	r7, sp, #0
    1b4e:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
    1b50:	2300      	movs	r3, #0
    1b52:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
    1b54:	2300      	movs	r3, #0
    1b56:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
    1b58:	2300      	movs	r3, #0
    1b5a:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
    1b5c:	2300      	movs	r3, #0
    1b5e:	613b      	str	r3, [r7, #16]
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
    1b60:	687b      	ldr	r3, [r7, #4]
    1b62:	2b00      	cmp	r3, #0
    1b64:	d003      	beq.n	1b6e <I2cWriteData+0x26>
    1b66:	687b      	ldr	r3, [r7, #4]
    1b68:	685b      	ldr	r3, [r3, #4]
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	d103      	bne.n	1b76 <I2cWriteData+0x2e>
		error = ERR_INVALID_ARG;
    1b6e:	2308      	movs	r3, #8
    1b70:	425b      	negs	r3, r3
    1b72:	61fb      	str	r3, [r7, #28]
		goto exit;
    1b74:	e01f      	b.n	1bb6 <I2cWriteData+0x6e>
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
    1b76:	687b      	ldr	r3, [r7, #4]
    1b78:	781b      	ldrb	r3, [r3, #0]
    1b7a:	b29a      	uxth	r2, r3
    1b7c:	4b10      	ldr	r3, [pc, #64]	; (1bc0 <I2cWriteData+0x78>)
    1b7e:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	685a      	ldr	r2, [r3, #4]
    1b84:	4b0e      	ldr	r3, [pc, #56]	; (1bc0 <I2cWriteData+0x78>)
    1b86:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenOut;
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	89da      	ldrh	r2, [r3, #14]
    1b8c:	4b0c      	ldr	r3, [pc, #48]	; (1bc0 <I2cWriteData+0x78>)
    1b8e:	805a      	strh	r2, [r3, #2]
	
	//Write

	 hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    1b90:	230f      	movs	r3, #15
    1b92:	18fc      	adds	r4, r7, r3
    1b94:	4a0a      	ldr	r2, [pc, #40]	; (1bc0 <I2cWriteData+0x78>)
    1b96:	4b0b      	ldr	r3, [pc, #44]	; (1bc4 <I2cWriteData+0x7c>)
    1b98:	0011      	movs	r1, r2
    1b9a:	0018      	movs	r0, r3
    1b9c:	4b0a      	ldr	r3, [pc, #40]	; (1bc8 <I2cWriteData+0x80>)
    1b9e:	4798      	blx	r3
    1ba0:	0003      	movs	r3, r0
    1ba2:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
    1ba4:	230f      	movs	r3, #15
    1ba6:	18fb      	adds	r3, r7, r3
    1ba8:	781b      	ldrb	r3, [r3, #0]
    1baa:	2b00      	cmp	r3, #0
    1bac:	d003      	beq.n	1bb6 <I2cWriteData+0x6e>
	{
		error = ERROR_IO;
    1bae:	2306      	movs	r3, #6
    1bb0:	425b      	negs	r3, r3
    1bb2:	61fb      	str	r3, [r7, #28]
		goto exit;
    1bb4:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
    1bb6:	69fb      	ldr	r3, [r7, #28]
}
    1bb8:	0018      	movs	r0, r3
    1bba:	46bd      	mov	sp, r7
    1bbc:	b009      	add	sp, #36	; 0x24
    1bbe:	bd90      	pop	{r4, r7, pc}
    1bc0:	20004644 	.word	0x20004644
    1bc4:	20004618 	.word	0x20004618
    1bc8:	00000e79 	.word	0x00000e79

00001bcc <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
    1bcc:	b590      	push	{r4, r7, lr}
    1bce:	b089      	sub	sp, #36	; 0x24
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
    1bd4:	2300      	movs	r3, #0
    1bd6:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
    1bd8:	2300      	movs	r3, #0
    1bda:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
    1bdc:	2300      	movs	r3, #0
    1bde:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
    1be0:	2300      	movs	r3, #0
    1be2:	613b      	str	r3, [r7, #16]
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
    1be4:	687b      	ldr	r3, [r7, #4]
    1be6:	2b00      	cmp	r3, #0
    1be8:	d003      	beq.n	1bf2 <I2cReadData+0x26>
    1bea:	687b      	ldr	r3, [r7, #4]
    1bec:	685b      	ldr	r3, [r3, #4]
    1bee:	2b00      	cmp	r3, #0
    1bf0:	d103      	bne.n	1bfa <I2cReadData+0x2e>
		error = ERR_INVALID_ARG;
    1bf2:	2308      	movs	r3, #8
    1bf4:	425b      	negs	r3, r3
    1bf6:	61fb      	str	r3, [r7, #28]
		goto exit;
    1bf8:	e01f      	b.n	1c3a <I2cReadData+0x6e>
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
    1bfa:	687b      	ldr	r3, [r7, #4]
    1bfc:	781b      	ldrb	r3, [r3, #0]
    1bfe:	b29a      	uxth	r2, r3
    1c00:	4b10      	ldr	r3, [pc, #64]	; (1c44 <I2cReadData+0x78>)
    1c02:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = data->msgIn;
    1c04:	687b      	ldr	r3, [r7, #4]
    1c06:	689a      	ldr	r2, [r3, #8]
    1c08:	4b0e      	ldr	r3, [pc, #56]	; (1c44 <I2cReadData+0x78>)
    1c0a:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenIn;
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	899a      	ldrh	r2, [r3, #12]
    1c10:	4b0c      	ldr	r3, [pc, #48]	; (1c44 <I2cReadData+0x78>)
    1c12:	805a      	strh	r2, [r3, #2]
	
	//Read
	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    1c14:	230f      	movs	r3, #15
    1c16:	18fc      	adds	r4, r7, r3
    1c18:	4a0a      	ldr	r2, [pc, #40]	; (1c44 <I2cReadData+0x78>)
    1c1a:	4b0b      	ldr	r3, [pc, #44]	; (1c48 <I2cReadData+0x7c>)
    1c1c:	0011      	movs	r1, r2
    1c1e:	0018      	movs	r0, r3
    1c20:	4b0a      	ldr	r3, [pc, #40]	; (1c4c <I2cReadData+0x80>)
    1c22:	4798      	blx	r3
    1c24:	0003      	movs	r3, r0
    1c26:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
    1c28:	230f      	movs	r3, #15
    1c2a:	18fb      	adds	r3, r7, r3
    1c2c:	781b      	ldrb	r3, [r3, #0]
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d003      	beq.n	1c3a <I2cReadData+0x6e>
	{
		error = ERROR_IO;
    1c32:	2306      	movs	r3, #6
    1c34:	425b      	negs	r3, r3
    1c36:	61fb      	str	r3, [r7, #28]
		goto exit;
    1c38:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
    1c3a:	69fb      	ldr	r3, [r7, #28]
}
    1c3c:	0018      	movs	r0, r3
    1c3e:	46bd      	mov	sp, r7
    1c40:	b009      	add	sp, #36	; 0x24
    1c42:	bd90      	pop	{r4, r7, pc}
    1c44:	20004644 	.word	0x20004644
    1c48:	20004618 	.word	0x20004618
    1c4c:	00000d95 	.word	0x00000d95

00001c50 <I2cFreeMutex>:
 * @details     
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (ERROR_NONE) if the bus is ready, (ERROR_NOT_INITIALIZED) if it is busy.
 * @note        STUDENTS TO FILL OUT!
 *****************************************************************************/
int32_t I2cFreeMutex(void){
    1c50:	b590      	push	{r4, r7, lr}
    1c52:	b083      	sub	sp, #12
    1c54:	af00      	add	r7, sp, #0
	
	int32_t error = ERROR_NONE;
    1c56:	2300      	movs	r3, #0
    1c58:	607b      	str	r3, [r7, #4]
	
	//students to fill out. Check what the function has to return
	if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE)
    1c5a:	4b09      	ldr	r3, [pc, #36]	; (1c80 <I2cFreeMutex+0x30>)
    1c5c:	6818      	ldr	r0, [r3, #0]
    1c5e:	2300      	movs	r3, #0
    1c60:	2200      	movs	r2, #0
    1c62:	2100      	movs	r1, #0
    1c64:	4c07      	ldr	r4, [pc, #28]	; (1c84 <I2cFreeMutex+0x34>)
    1c66:	47a0      	blx	r4
    1c68:	0003      	movs	r3, r0
    1c6a:	2b01      	cmp	r3, #1
    1c6c:	d002      	beq.n	1c74 <I2cFreeMutex+0x24>
		error = ERROR_NOT_INITIALIZED;
    1c6e:	2314      	movs	r3, #20
    1c70:	425b      	negs	r3, r3
    1c72:	607b      	str	r3, [r7, #4]
	
	return error;
    1c74:	687b      	ldr	r3, [r7, #4]
}
    1c76:	0018      	movs	r0, r3
    1c78:	46bd      	mov	sp, r7
    1c7a:	b003      	add	sp, #12
    1c7c:	bd90      	pop	{r4, r7, pc}
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	20004614 	.word	0x20004614
    1c84:	00006bd1 	.word	0x00006bd1

00001c88 <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (ERROR_NONE) if we got the mutex, (ERROR_NOT_READY) if we time out before we got it
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
    1c88:	b580      	push	{r7, lr}
    1c8a:	b084      	sub	sp, #16
    1c8c:	af00      	add	r7, sp, #0
    1c8e:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
    1c90:	2300      	movs	r3, #0
    1c92:	60fb      	str	r3, [r7, #12]
	//students to fill out. Check what the function has to return
	
	if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE)
    1c94:	4b08      	ldr	r3, [pc, #32]	; (1cb8 <I2cGetMutex+0x30>)
    1c96:	681b      	ldr	r3, [r3, #0]
    1c98:	687a      	ldr	r2, [r7, #4]
    1c9a:	0011      	movs	r1, r2
    1c9c:	0018      	movs	r0, r3
    1c9e:	4b07      	ldr	r3, [pc, #28]	; (1cbc <I2cGetMutex+0x34>)
    1ca0:	4798      	blx	r3
    1ca2:	0003      	movs	r3, r0
    1ca4:	2b01      	cmp	r3, #1
    1ca6:	d002      	beq.n	1cae <I2cGetMutex+0x26>
		error = ERROR_NOT_READY;
    1ca8:	231d      	movs	r3, #29
    1caa:	425b      	negs	r3, r3
    1cac:	60fb      	str	r3, [r7, #12]
		
	return error;
    1cae:	68fb      	ldr	r3, [r7, #12]
}
    1cb0:	0018      	movs	r0, r3
    1cb2:	46bd      	mov	sp, r7
    1cb4:	b004      	add	sp, #16
    1cb6:	bd80      	pop	{r7, pc}
    1cb8:	20004614 	.word	0x20004614
    1cbc:	000078e1 	.word	0x000078e1

00001cc0 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle){
    1cc0:	b580      	push	{r7, lr}
    1cc2:	b084      	sub	sp, #16
    1cc4:	af00      	add	r7, sp, #0
    1cc6:	6078      	str	r0, [r7, #4]
	int32_t error = ERROR_NONE;
    1cc8:	2300      	movs	r3, #0
    1cca:	60fb      	str	r3, [r7, #12]
	*handle = sensorI2cSemaphoreHandle;
    1ccc:	4b04      	ldr	r3, [pc, #16]	; (1ce0 <I2cGetSemaphoreHandle+0x20>)
    1cce:	681a      	ldr	r2, [r3, #0]
    1cd0:	687b      	ldr	r3, [r7, #4]
    1cd2:	601a      	str	r2, [r3, #0]
	return error;
    1cd4:	68fb      	ldr	r3, [r7, #12]
}
    1cd6:	0018      	movs	r0, r3
    1cd8:	46bd      	mov	sp, r7
    1cda:	b004      	add	sp, #16
    1cdc:	bd80      	pop	{r7, pc}
    1cde:	46c0      	nop			; (mov r8, r8)
    1ce0:	20004640 	.word	0x20004640

00001ce4 <I2cGetTaskErrorStatus>:
 * @brief       Sets the error state of the latest I2C bus transaction for a given I2C data, which holds which physical I2C bus we are using.
 * @details     This error flag is set to indicate when a I2C transaction has failed on a given I2C bus (encapsulated in the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
 static uint8_t I2cGetTaskErrorStatus(void){
    1ce4:	b580      	push	{r7, lr}
    1ce6:	af00      	add	r7, sp, #0
	 return sensorTransmitError;
    1ce8:	4b02      	ldr	r3, [pc, #8]	; (1cf4 <I2cGetTaskErrorStatus+0x10>)
    1cea:	781b      	ldrb	r3, [r3, #0]
 }
    1cec:	0018      	movs	r0, r3
    1cee:	46bd      	mov	sp, r7
    1cf0:	bd80      	pop	{r7, pc}
    1cf2:	46c0      	nop			; (mov r8, r8)
    1cf4:	2000086c 	.word	0x2000086c

00001cf8 <I2cSetTaskErrorStatus>:
 * @details     This error flag is set to indicate when a I2C transaction has failed on a given I2C bus (encapsulated in the I2C data structure).
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
 static void I2cSetTaskErrorStatus(uint8_t value){
    1cf8:	b580      	push	{r7, lr}
    1cfa:	b082      	sub	sp, #8
    1cfc:	af00      	add	r7, sp, #0
    1cfe:	0002      	movs	r2, r0
    1d00:	1dfb      	adds	r3, r7, #7
    1d02:	701a      	strb	r2, [r3, #0]
	sensorTransmitError = value;
    1d04:	4b03      	ldr	r3, [pc, #12]	; (1d14 <I2cSetTaskErrorStatus+0x1c>)
    1d06:	1dfa      	adds	r2, r7, #7
    1d08:	7812      	ldrb	r2, [r2, #0]
    1d0a:	701a      	strb	r2, [r3, #0]
 }
    1d0c:	46c0      	nop			; (mov r8, r8)
    1d0e:	46bd      	mov	sp, r7
    1d10:	b002      	add	sp, #8
    1d12:	bd80      	pop	{r7, pc}
    1d14:	2000086c 	.word	0x2000086c

00001d18 <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
    1d18:	b580      	push	{r7, lr}
    1d1a:	b084      	sub	sp, #16
    1d1c:	af00      	add	r7, sp, #0
    1d1e:	6078      	str	r0, [r7, #4]
    1d20:	6039      	str	r1, [r7, #0]

	int32_t error = ERROR_NONE;
    1d22:	2300      	movs	r3, #0
    1d24:	60fb      	str	r3, [r7, #12]
	SemaphoreHandle_t semHandle = NULL;
    1d26:	2300      	movs	r3, #0
    1d28:	60bb      	str	r3, [r7, #8]

	//---0. Get Mutex
	error = I2cGetMutex(xMaxBlockTime);
    1d2a:	683b      	ldr	r3, [r7, #0]
    1d2c:	0018      	movs	r0, r3
    1d2e:	4b27      	ldr	r3, [pc, #156]	; (1dcc <I2cWriteDataWait+0xb4>)
    1d30:	4798      	blx	r3
    1d32:	0003      	movs	r3, r0
    1d34:	60fb      	str	r3, [r7, #12]
	//error=0;
	if(ERROR_NONE != error) goto exit;
    1d36:	68fb      	ldr	r3, [r7, #12]
    1d38:	2b00      	cmp	r3, #0
    1d3a:	d138      	bne.n	1dae <I2cWriteDataWait+0x96>

	//---1. Get Semaphore Handle
	error = I2cGetSemaphoreHandle(&semHandle);
    1d3c:	2308      	movs	r3, #8
    1d3e:	18fb      	adds	r3, r7, r3
    1d40:	0018      	movs	r0, r3
    1d42:	4b23      	ldr	r3, [pc, #140]	; (1dd0 <I2cWriteDataWait+0xb8>)
    1d44:	4798      	blx	r3
    1d46:	0003      	movs	r3, r0
    1d48:	60fb      	str	r3, [r7, #12]
	if(ERROR_NONE != error) goto exit;
    1d4a:	68fb      	ldr	r3, [r7, #12]
    1d4c:	2b00      	cmp	r3, #0
    1d4e:	d130      	bne.n	1db2 <I2cWriteDataWait+0x9a>

	//---2. Initiate sending data
	error = I2cWriteData(data);
    1d50:	687b      	ldr	r3, [r7, #4]
    1d52:	0018      	movs	r0, r3
    1d54:	4b1f      	ldr	r3, [pc, #124]	; (1dd4 <I2cWriteDataWait+0xbc>)
    1d56:	4798      	blx	r3
    1d58:	0003      	movs	r3, r0
    1d5a:	60fb      	str	r3, [r7, #12]
	if (ERROR_NONE != error){
    1d5c:	68fb      	ldr	r3, [r7, #12]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d12a      	bne.n	1db8 <I2cWriteDataWait+0xa0>
		goto exitError0;
	}

	//---2. Wait for binary semaphore to tell us that we are done!
	if( xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE ){
    1d62:	68bb      	ldr	r3, [r7, #8]
    1d64:	683a      	ldr	r2, [r7, #0]
    1d66:	0011      	movs	r1, r2
    1d68:	0018      	movs	r0, r3
    1d6a:	4b1b      	ldr	r3, [pc, #108]	; (1dd8 <I2cWriteDataWait+0xc0>)
    1d6c:	4798      	blx	r3
    1d6e:	0003      	movs	r3, r0
    1d70:	2b01      	cmp	r3, #1
    1d72:	d111      	bne.n	1d98 <I2cWriteDataWait+0x80>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if(I2cGetTaskErrorStatus()){
    1d74:	4b19      	ldr	r3, [pc, #100]	; (1ddc <I2cWriteDataWait+0xc4>)
    1d76:	4798      	blx	r3
    1d78:	1e03      	subs	r3, r0, #0
    1d7a:	d011      	beq.n	1da0 <I2cWriteDataWait+0x88>
			I2cSetTaskErrorStatus(false);
    1d7c:	2000      	movs	r0, #0
    1d7e:	4b18      	ldr	r3, [pc, #96]	; (1de0 <I2cWriteDataWait+0xc8>)
    1d80:	4798      	blx	r3
			if(error != ERROR_NONE){
    1d82:	68fb      	ldr	r3, [r7, #12]
    1d84:	2b00      	cmp	r3, #0
    1d86:	d003      	beq.n	1d90 <I2cWriteDataWait+0x78>
    			error = ERROR_I2C_HANG_RESET;
    1d88:	2321      	movs	r3, #33	; 0x21
    1d8a:	425b      	negs	r3, r3
    1d8c:	60fb      	str	r3, [r7, #12]
    		}else{
    			error = ERROR_ABORTED;
			}
			goto exitError0;
    1d8e:	e014      	b.n	1dba <I2cWriteDataWait+0xa2>
    			error = ERROR_ABORTED;
    1d90:	2303      	movs	r3, #3
    1d92:	425b      	negs	r3, r3
    1d94:	60fb      	str	r3, [r7, #12]
			goto exitError0;
    1d96:	e010      	b.n	1dba <I2cWriteDataWait+0xa2>
		}
	} else{
		/* The call to ulTaskNotifyTake() timed out. */
		error = ERR_TIMEOUT;
    1d98:	2303      	movs	r3, #3
    1d9a:	425b      	negs	r3, r3
    1d9c:	60fb      	str	r3, [r7, #12]
		goto exitError0;
    1d9e:	e00c      	b.n	1dba <I2cWriteDataWait+0xa2>
	}

	//---8. Release Mutex
	error |= I2cFreeMutex();
    1da0:	4b10      	ldr	r3, [pc, #64]	; (1de4 <I2cWriteDataWait+0xcc>)
    1da2:	4798      	blx	r3
    1da4:	0002      	movs	r2, r0
    1da6:	68fb      	ldr	r3, [r7, #12]
    1da8:	4313      	orrs	r3, r2
    1daa:	60fb      	str	r3, [r7, #12]
    1dac:	e002      	b.n	1db4 <I2cWriteDataWait+0x9c>
	if(ERROR_NONE != error) goto exit;
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	e000      	b.n	1db4 <I2cWriteDataWait+0x9c>
	if(ERROR_NONE != error) goto exit;
    1db2:	46c0      	nop			; (mov r8, r8)

exit:
return error;
    1db4:	68fb      	ldr	r3, [r7, #12]
    1db6:	e005      	b.n	1dc4 <I2cWriteDataWait+0xac>
		goto exitError0;
    1db8:	46c0      	nop			; (mov r8, r8)

exitError0:
error = I2cFreeMutex();
    1dba:	4b0a      	ldr	r3, [pc, #40]	; (1de4 <I2cWriteDataWait+0xcc>)
    1dbc:	4798      	blx	r3
    1dbe:	0003      	movs	r3, r0
    1dc0:	60fb      	str	r3, [r7, #12]

return error;
    1dc2:	68fb      	ldr	r3, [r7, #12]

}
    1dc4:	0018      	movs	r0, r3
    1dc6:	46bd      	mov	sp, r7
    1dc8:	b004      	add	sp, #16
    1dca:	bd80      	pop	{r7, pc}
    1dcc:	00001c89 	.word	0x00001c89
    1dd0:	00001cc1 	.word	0x00001cc1
    1dd4:	00001b49 	.word	0x00001b49
    1dd8:	000078e1 	.word	0x000078e1
    1ddc:	00001ce5 	.word	0x00001ce5
    1de0:	00001cf9 	.word	0x00001cf9
    1de4:	00001c51 	.word	0x00001c51

00001de8 <I2cReadDataWait>:
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
				students to fill!
 *****************************************************************************/
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime) {
    1de8:	b580      	push	{r7, lr}
    1dea:	b086      	sub	sp, #24
    1dec:	af00      	add	r7, sp, #0
    1dee:	60f8      	str	r0, [r7, #12]
    1df0:	60b9      	str	r1, [r7, #8]
    1df2:	607a      	str	r2, [r7, #4]
	
	int32_t error = ERROR_NONE;
    1df4:	2300      	movs	r3, #0
    1df6:	617b      	str	r3, [r7, #20]
	SemaphoreHandle_t semHandle = NULL;
    1df8:	2300      	movs	r3, #0
    1dfa:	613b      	str	r3, [r7, #16]
	
	//---0. Get Mutex
	error = I2cGetMutex(xMaxBlockTime);
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	0018      	movs	r0, r3
    1e00:	4b3a      	ldr	r3, [pc, #232]	; (1eec <I2cReadDataWait+0x104>)
    1e02:	4798      	blx	r3
    1e04:	0003      	movs	r3, r0
    1e06:	617b      	str	r3, [r7, #20]
	if(ERROR_NONE != error) goto exit;
    1e08:	697b      	ldr	r3, [r7, #20]
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d15e      	bne.n	1ecc <I2cReadDataWait+0xe4>
	
	//---1. Get Semaphore Handle
	error = I2cGetSemaphoreHandle(&semHandle);
    1e0e:	2310      	movs	r3, #16
    1e10:	18fb      	adds	r3, r7, r3
    1e12:	0018      	movs	r0, r3
    1e14:	4b36      	ldr	r3, [pc, #216]	; (1ef0 <I2cReadDataWait+0x108>)
    1e16:	4798      	blx	r3
    1e18:	0003      	movs	r3, r0
    1e1a:	617b      	str	r3, [r7, #20]
	if (ERROR_NONE != error) goto exit;
    1e1c:	697b      	ldr	r3, [r7, #20]
    1e1e:	2b00      	cmp	r3, #0
    1e20:	d156      	bne.n	1ed0 <I2cReadDataWait+0xe8>
	
	//---2. Initiate sending data
	error = I2cWriteData(data);
    1e22:	68fb      	ldr	r3, [r7, #12]
    1e24:	0018      	movs	r0, r3
    1e26:	4b33      	ldr	r3, [pc, #204]	; (1ef4 <I2cReadDataWait+0x10c>)
    1e28:	4798      	blx	r3
    1e2a:	0003      	movs	r3, r0
    1e2c:	617b      	str	r3, [r7, #20]
	if (ERROR_NONE != error){
    1e2e:	697b      	ldr	r3, [r7, #20]
    1e30:	2b00      	cmp	r3, #0
    1e32:	d150      	bne.n	1ed6 <I2cReadDataWait+0xee>
		goto exitError0;
	}
	
	//---2. Wait for binary semaphore to tell us that we are done!
	if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    1e34:	693b      	ldr	r3, [r7, #16]
    1e36:	687a      	ldr	r2, [r7, #4]
    1e38:	0011      	movs	r1, r2
    1e3a:	0018      	movs	r0, r3
    1e3c:	4b2e      	ldr	r3, [pc, #184]	; (1ef8 <I2cReadDataWait+0x110>)
    1e3e:	4798      	blx	r3
    1e40:	0003      	movs	r3, r0
    1e42:	2b01      	cmp	r3, #1
    1e44:	d118      	bne.n	1e78 <I2cReadDataWait+0x90>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if (I2cGetTaskErrorStatus()) {
    1e46:	4b2d      	ldr	r3, [pc, #180]	; (1efc <I2cReadDataWait+0x114>)
    1e48:	4798      	blx	r3
    1e4a:	1e03      	subs	r3, r0, #0
    1e4c:	d006      	beq.n	1e5c <I2cReadDataWait+0x74>
			I2cSetTaskErrorStatus(false);
    1e4e:	2000      	movs	r0, #0
    1e50:	4b2b      	ldr	r3, [pc, #172]	; (1f00 <I2cReadDataWait+0x118>)
    1e52:	4798      	blx	r3
			error = ERROR_ABORTED;
    1e54:	2303      	movs	r3, #3
    1e56:	425b      	negs	r3, r3
    1e58:	617b      	str	r3, [r7, #20]
			goto exitError0;
    1e5a:	e03d      	b.n	1ed8 <I2cReadDataWait+0xf0>
		}
		vTaskDelay(delay);
    1e5c:	68bb      	ldr	r3, [r7, #8]
    1e5e:	0018      	movs	r0, r3
    1e60:	4b28      	ldr	r3, [pc, #160]	; (1f04 <I2cReadDataWait+0x11c>)
    1e62:	4798      	blx	r3
		error = ERR_TIMEOUT;
		goto exitError0;
	}
	
	//---6. Initiate Read data //TIP: SEE "I2cReadData", which is analogous to "I2cWriteData"
	error = I2cReadData(data);
    1e64:	68fb      	ldr	r3, [r7, #12]
    1e66:	0018      	movs	r0, r3
    1e68:	4b27      	ldr	r3, [pc, #156]	; (1f08 <I2cReadDataWait+0x120>)
    1e6a:	4798      	blx	r3
    1e6c:	0003      	movs	r3, r0
    1e6e:	617b      	str	r3, [r7, #20]
	if (ERROR_NONE != error){
    1e70:	697b      	ldr	r3, [r7, #20]
    1e72:	2b00      	cmp	r3, #0
    1e74:	d004      	beq.n	1e80 <I2cReadDataWait+0x98>
		goto exitError0;
    1e76:	e02f      	b.n	1ed8 <I2cReadDataWait+0xf0>
		error = ERR_TIMEOUT;
    1e78:	2303      	movs	r3, #3
    1e7a:	425b      	negs	r3, r3
    1e7c:	617b      	str	r3, [r7, #20]
		goto exitError0;
    1e7e:	e02b      	b.n	1ed8 <I2cReadDataWait+0xf0>
	}
	
	//---7. Wait for notification
	
	//---2. Wait for binary semaphore to tell us that we are done!
	if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE ) {
    1e80:	693b      	ldr	r3, [r7, #16]
    1e82:	687a      	ldr	r2, [r7, #4]
    1e84:	0011      	movs	r1, r2
    1e86:	0018      	movs	r0, r3
    1e88:	4b1b      	ldr	r3, [pc, #108]	; (1ef8 <I2cReadDataWait+0x110>)
    1e8a:	4798      	blx	r3
    1e8c:	0003      	movs	r3, r0
    1e8e:	2b01      	cmp	r3, #1
    1e90:	d111      	bne.n	1eb6 <I2cReadDataWait+0xce>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if (I2cGetTaskErrorStatus()) {
    1e92:	4b1a      	ldr	r3, [pc, #104]	; (1efc <I2cReadDataWait+0x114>)
    1e94:	4798      	blx	r3
    1e96:	1e03      	subs	r3, r0, #0
    1e98:	d011      	beq.n	1ebe <I2cReadDataWait+0xd6>
			I2cSetTaskErrorStatus(false);
    1e9a:	2000      	movs	r0, #0
    1e9c:	4b18      	ldr	r3, [pc, #96]	; (1f00 <I2cReadDataWait+0x118>)
    1e9e:	4798      	blx	r3
			if(error != ERROR_NONE){
    1ea0:	697b      	ldr	r3, [r7, #20]
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	d003      	beq.n	1eae <I2cReadDataWait+0xc6>
				error = ERROR_I2C_HANG_RESET;
    1ea6:	2321      	movs	r3, #33	; 0x21
    1ea8:	425b      	negs	r3, r3
    1eaa:	617b      	str	r3, [r7, #20]
				} else{
				error = ERROR_ABORTED;
			}
			goto exitError0;
    1eac:	e014      	b.n	1ed8 <I2cReadDataWait+0xf0>
				error = ERROR_ABORTED;
    1eae:	2303      	movs	r3, #3
    1eb0:	425b      	negs	r3, r3
    1eb2:	617b      	str	r3, [r7, #20]
			goto exitError0;
    1eb4:	e010      	b.n	1ed8 <I2cReadDataWait+0xf0>
		}
	} else {
		/* The call to ulTaskNotifyTake() timed out. */
		error = ERR_TIMEOUT;
    1eb6:	2303      	movs	r3, #3
    1eb8:	425b      	negs	r3, r3
    1eba:	617b      	str	r3, [r7, #20]
		goto exitError0;
    1ebc:	e00c      	b.n	1ed8 <I2cReadDataWait+0xf0>
	}

	//---8. Release Mutex
	error |= I2cFreeMutex();
    1ebe:	4b13      	ldr	r3, [pc, #76]	; (1f0c <I2cReadDataWait+0x124>)
    1ec0:	4798      	blx	r3
    1ec2:	0002      	movs	r2, r0
    1ec4:	697b      	ldr	r3, [r7, #20]
    1ec6:	4313      	orrs	r3, r2
    1ec8:	617b      	str	r3, [r7, #20]
    1eca:	e002      	b.n	1ed2 <I2cReadDataWait+0xea>
	if(ERROR_NONE != error) goto exit;
    1ecc:	46c0      	nop			; (mov r8, r8)
    1ece:	e000      	b.n	1ed2 <I2cReadDataWait+0xea>
	if (ERROR_NONE != error) goto exit;
    1ed0:	46c0      	nop			; (mov r8, r8)

	exit:
	return error;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	e005      	b.n	1ee2 <I2cReadDataWait+0xfa>
		goto exitError0;
    1ed6:	46c0      	nop			; (mov r8, r8)

	exitError0:
	error = I2cFreeMutex();
    1ed8:	4b0c      	ldr	r3, [pc, #48]	; (1f0c <I2cReadDataWait+0x124>)
    1eda:	4798      	blx	r3
    1edc:	0003      	movs	r3, r0
    1ede:	617b      	str	r3, [r7, #20]

	return error;
    1ee0:	697b      	ldr	r3, [r7, #20]
    1ee2:	0018      	movs	r0, r3
    1ee4:	46bd      	mov	sp, r7
    1ee6:	b006      	add	sp, #24
    1ee8:	bd80      	pop	{r7, pc}
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	00001c89 	.word	0x00001c89
    1ef0:	00001cc1 	.word	0x00001cc1
    1ef4:	00001b49 	.word	0x00001b49
    1ef8:	000078e1 	.word	0x000078e1
    1efc:	00001ce5 	.word	0x00001ce5
    1f00:	00001cf9 	.word	0x00001cf9
    1f04:	00008635 	.word	0x00008635
    1f08:	00001bcd 	.word	0x00001bcd
    1f0c:	00001c51 	.word	0x00001c51

00001f10 <decToBcd>:
char buff[20]; // Buffer for serial output
TIME time;     // Instance for storing time
I2C_Data i2cData;

// Decimal to BCD conversion
uint8_t decToBcd(int val) {
    1f10:	b590      	push	{r4, r7, lr}
    1f12:	b083      	sub	sp, #12
    1f14:	af00      	add	r7, sp, #0
    1f16:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val / 10 * 16) + (val % 10));
    1f18:	687a      	ldr	r2, [r7, #4]
    1f1a:	4b0a      	ldr	r3, [pc, #40]	; (1f44 <decToBcd+0x34>)
    1f1c:	210a      	movs	r1, #10
    1f1e:	0010      	movs	r0, r2
    1f20:	4798      	blx	r3
    1f22:	0003      	movs	r3, r0
    1f24:	b2db      	uxtb	r3, r3
    1f26:	011b      	lsls	r3, r3, #4
    1f28:	b2dc      	uxtb	r4, r3
    1f2a:	687a      	ldr	r2, [r7, #4]
    1f2c:	4b06      	ldr	r3, [pc, #24]	; (1f48 <decToBcd+0x38>)
    1f2e:	210a      	movs	r1, #10
    1f30:	0010      	movs	r0, r2
    1f32:	4798      	blx	r3
    1f34:	000b      	movs	r3, r1
    1f36:	b2db      	uxtb	r3, r3
    1f38:	18e3      	adds	r3, r4, r3
    1f3a:	b2db      	uxtb	r3, r3
}
    1f3c:	0018      	movs	r0, r3
    1f3e:	46bd      	mov	sp, r7
    1f40:	b003      	add	sp, #12
    1f42:	bd90      	pop	{r4, r7, pc}
    1f44:	0001f1e5 	.word	0x0001f1e5
    1f48:	0001f3b1 	.word	0x0001f3b1

00001f4c <bcdToDec>:

// BCD to Decimal conversion
int bcdToDec(uint8_t val) {
    1f4c:	b580      	push	{r7, lr}
    1f4e:	b082      	sub	sp, #8
    1f50:	af00      	add	r7, sp, #0
    1f52:	0002      	movs	r2, r0
    1f54:	1dfb      	adds	r3, r7, #7
    1f56:	701a      	strb	r2, [r3, #0]
	return ((val >> 4) * 10) + (val & 0x0F);
    1f58:	1dfb      	adds	r3, r7, #7
    1f5a:	781b      	ldrb	r3, [r3, #0]
    1f5c:	091b      	lsrs	r3, r3, #4
    1f5e:	b2db      	uxtb	r3, r3
    1f60:	001a      	movs	r2, r3
    1f62:	0013      	movs	r3, r2
    1f64:	009b      	lsls	r3, r3, #2
    1f66:	189b      	adds	r3, r3, r2
    1f68:	005b      	lsls	r3, r3, #1
    1f6a:	0019      	movs	r1, r3
    1f6c:	1dfb      	adds	r3, r7, #7
    1f6e:	781b      	ldrb	r3, [r3, #0]
    1f70:	220f      	movs	r2, #15
    1f72:	4013      	ands	r3, r2
    1f74:	18cb      	adds	r3, r1, r3
}
    1f76:	0018      	movs	r0, r3
    1f78:	46bd      	mov	sp, r7
    1f7a:	b002      	add	sp, #8
    1f7c:	bd80      	pop	{r7, pc}
	...

00001f80 <SetTime>:

// Function to set time on the RTC
void SetTime(uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year) {
    1f80:	b5b0      	push	{r4, r5, r7, lr}
    1f82:	b088      	sub	sp, #32
    1f84:	af00      	add	r7, sp, #0
    1f86:	0005      	movs	r5, r0
    1f88:	000c      	movs	r4, r1
    1f8a:	0010      	movs	r0, r2
    1f8c:	0019      	movs	r1, r3
    1f8e:	1dfb      	adds	r3, r7, #7
    1f90:	1c2a      	adds	r2, r5, #0
    1f92:	701a      	strb	r2, [r3, #0]
    1f94:	1dbb      	adds	r3, r7, #6
    1f96:	1c22      	adds	r2, r4, #0
    1f98:	701a      	strb	r2, [r3, #0]
    1f9a:	1d7b      	adds	r3, r7, #5
    1f9c:	1c02      	adds	r2, r0, #0
    1f9e:	701a      	strb	r2, [r3, #0]
    1fa0:	1d3b      	adds	r3, r7, #4
    1fa2:	1c0a      	adds	r2, r1, #0
    1fa4:	701a      	strb	r2, [r3, #0]
	uint8_t data_to_write[] = {
		decToBcd(sec),
    1fa6:	1dfb      	adds	r3, r7, #7
    1fa8:	781b      	ldrb	r3, [r3, #0]
    1faa:	0018      	movs	r0, r3
    1fac:	4b3a      	ldr	r3, [pc, #232]	; (2098 <STACK_SIZE+0x98>)
    1fae:	4798      	blx	r3
    1fb0:	0003      	movs	r3, r0
    1fb2:	001a      	movs	r2, r3
	uint8_t data_to_write[] = {
    1fb4:	2318      	movs	r3, #24
    1fb6:	18fb      	adds	r3, r7, r3
    1fb8:	701a      	strb	r2, [r3, #0]
		decToBcd(min),
    1fba:	1dbb      	adds	r3, r7, #6
    1fbc:	781b      	ldrb	r3, [r3, #0]
    1fbe:	0018      	movs	r0, r3
    1fc0:	4b35      	ldr	r3, [pc, #212]	; (2098 <STACK_SIZE+0x98>)
    1fc2:	4798      	blx	r3
    1fc4:	0003      	movs	r3, r0
    1fc6:	001a      	movs	r2, r3
	uint8_t data_to_write[] = {
    1fc8:	2318      	movs	r3, #24
    1fca:	18fb      	adds	r3, r7, r3
    1fcc:	705a      	strb	r2, [r3, #1]
		decToBcd(hour),
    1fce:	1d7b      	adds	r3, r7, #5
    1fd0:	781b      	ldrb	r3, [r3, #0]
    1fd2:	0018      	movs	r0, r3
    1fd4:	4b30      	ldr	r3, [pc, #192]	; (2098 <STACK_SIZE+0x98>)
    1fd6:	4798      	blx	r3
    1fd8:	0003      	movs	r3, r0
    1fda:	001a      	movs	r2, r3
	uint8_t data_to_write[] = {
    1fdc:	2318      	movs	r3, #24
    1fde:	18fb      	adds	r3, r7, r3
    1fe0:	709a      	strb	r2, [r3, #2]
		decToBcd(dow),
    1fe2:	1d3b      	adds	r3, r7, #4
    1fe4:	781b      	ldrb	r3, [r3, #0]
    1fe6:	0018      	movs	r0, r3
    1fe8:	4b2b      	ldr	r3, [pc, #172]	; (2098 <STACK_SIZE+0x98>)
    1fea:	4798      	blx	r3
    1fec:	0003      	movs	r3, r0
    1fee:	001a      	movs	r2, r3
	uint8_t data_to_write[] = {
    1ff0:	2318      	movs	r3, #24
    1ff2:	18fb      	adds	r3, r7, r3
    1ff4:	70da      	strb	r2, [r3, #3]
		decToBcd(dom),
    1ff6:	2330      	movs	r3, #48	; 0x30
    1ff8:	18fb      	adds	r3, r7, r3
    1ffa:	781b      	ldrb	r3, [r3, #0]
    1ffc:	0018      	movs	r0, r3
    1ffe:	4b26      	ldr	r3, [pc, #152]	; (2098 <STACK_SIZE+0x98>)
    2000:	4798      	blx	r3
    2002:	0003      	movs	r3, r0
    2004:	001a      	movs	r2, r3
	uint8_t data_to_write[] = {
    2006:	2318      	movs	r3, #24
    2008:	18fb      	adds	r3, r7, r3
    200a:	711a      	strb	r2, [r3, #4]
		decToBcd(month),
    200c:	2334      	movs	r3, #52	; 0x34
    200e:	18fb      	adds	r3, r7, r3
    2010:	781b      	ldrb	r3, [r3, #0]
    2012:	0018      	movs	r0, r3
    2014:	4b20      	ldr	r3, [pc, #128]	; (2098 <STACK_SIZE+0x98>)
    2016:	4798      	blx	r3
    2018:	0003      	movs	r3, r0
    201a:	001a      	movs	r2, r3
	uint8_t data_to_write[] = {
    201c:	2318      	movs	r3, #24
    201e:	18fb      	adds	r3, r7, r3
    2020:	715a      	strb	r2, [r3, #5]
		decToBcd(year)
    2022:	2338      	movs	r3, #56	; 0x38
    2024:	18fb      	adds	r3, r7, r3
    2026:	781b      	ldrb	r3, [r3, #0]
    2028:	0018      	movs	r0, r3
    202a:	4b1b      	ldr	r3, [pc, #108]	; (2098 <STACK_SIZE+0x98>)
    202c:	4798      	blx	r3
    202e:	0003      	movs	r3, r0
    2030:	001a      	movs	r2, r3
	uint8_t data_to_write[] = {
    2032:	2318      	movs	r3, #24
    2034:	18fb      	adds	r3, r7, r3
    2036:	719a      	strb	r2, [r3, #6]
	};
	
	struct I2C_Data data = {
    2038:	2308      	movs	r3, #8
    203a:	18fb      	adds	r3, r7, r3
    203c:	2268      	movs	r2, #104	; 0x68
    203e:	701a      	strb	r2, [r3, #0]
    2040:	2308      	movs	r3, #8
    2042:	18fb      	adds	r3, r7, r3
    2044:	2218      	movs	r2, #24
    2046:	18ba      	adds	r2, r7, r2
    2048:	605a      	str	r2, [r3, #4]
    204a:	2308      	movs	r3, #8
    204c:	18fb      	adds	r3, r7, r3
    204e:	4a13      	ldr	r2, [pc, #76]	; (209c <STACK_SIZE+0x9c>)
    2050:	609a      	str	r2, [r3, #8]
    2052:	2308      	movs	r3, #8
    2054:	18fb      	adds	r3, r7, r3
    2056:	2200      	movs	r2, #0
    2058:	819a      	strh	r2, [r3, #12]
    205a:	2308      	movs	r3, #8
    205c:	18fb      	adds	r3, r7, r3
    205e:	2207      	movs	r2, #7
    2060:	81da      	strh	r2, [r3, #14]
		.lenIn = 0,
		.lenOut = 7,
	};

	// Write time data to RTC
	enum status_code status = I2cWriteData(&data);
    2062:	2308      	movs	r3, #8
    2064:	18fb      	adds	r3, r7, r3
    2066:	0018      	movs	r0, r3
    2068:	4b0d      	ldr	r3, [pc, #52]	; (20a0 <STACK_SIZE+0xa0>)
    206a:	4798      	blx	r3
    206c:	0002      	movs	r2, r0
    206e:	231f      	movs	r3, #31
    2070:	18fb      	adds	r3, r7, r3
    2072:	701a      	strb	r2, [r3, #0]
	if (status == STATUS_OK) {
    2074:	231f      	movs	r3, #31
    2076:	18fb      	adds	r3, r7, r3
    2078:	781b      	ldrb	r3, [r3, #0]
    207a:	2b00      	cmp	r3, #0
    207c:	d104      	bne.n	2088 <STACK_SIZE+0x88>
		SerialConsoleWriteString("Time successfully written.\r\n");
    207e:	4b09      	ldr	r3, [pc, #36]	; (20a4 <STACK_SIZE+0xa4>)
    2080:	0018      	movs	r0, r3
    2082:	4b09      	ldr	r3, [pc, #36]	; (20a8 <STACK_SIZE+0xa8>)
    2084:	4798      	blx	r3
		} else {
		SerialConsoleWriteString("Error writing time.\r\n");
	}
}
    2086:	e003      	b.n	2090 <STACK_SIZE+0x90>
		SerialConsoleWriteString("Error writing time.\r\n");
    2088:	4b08      	ldr	r3, [pc, #32]	; (20ac <STACK_SIZE+0xac>)
    208a:	0018      	movs	r0, r3
    208c:	4b06      	ldr	r3, [pc, #24]	; (20a8 <STACK_SIZE+0xa8>)
    208e:	4798      	blx	r3
}
    2090:	46c0      	nop			; (mov r8, r8)
    2092:	46bd      	mov	sp, r7
    2094:	b008      	add	sp, #32
    2096:	bdb0      	pop	{r4, r5, r7, pc}
    2098:	00001f11 	.word	0x00001f11
    209c:	200046a4 	.word	0x200046a4
    20a0:	00001b49 	.word	0x00001b49
    20a4:	000232f4 	.word	0x000232f4
    20a8:	0000a289 	.word	0x0000a289
    20ac:	00023314 	.word	0x00023314

000020b0 <GetTime>:
void GetTime(TIME *current_time) {
    20b0:	b580      	push	{r7, lr}
    20b2:	b086      	sub	sp, #24
    20b4:	af00      	add	r7, sp, #0
    20b6:	6078      	str	r0, [r7, #4]
	uint8_t reg_address = 0x00;
    20b8:	2313      	movs	r3, #19
    20ba:	18fb      	adds	r3, r7, r3
    20bc:	2200      	movs	r2, #0
    20be:	701a      	strb	r2, [r3, #0]
	uint8_t received_time[7];

	i2cData.address = I2C_SLAVE_ADDR;
    20c0:	4b39      	ldr	r3, [pc, #228]	; (21a8 <GetTime+0xf8>)
    20c2:	2268      	movs	r2, #104	; 0x68
    20c4:	701a      	strb	r2, [r3, #0]
	i2cData.msgOut = &reg_address;
    20c6:	4b38      	ldr	r3, [pc, #224]	; (21a8 <GetTime+0xf8>)
    20c8:	2213      	movs	r2, #19
    20ca:	18ba      	adds	r2, r7, r2
    20cc:	605a      	str	r2, [r3, #4]
	i2cData.lenOut = 1;
    20ce:	4b36      	ldr	r3, [pc, #216]	; (21a8 <GetTime+0xf8>)
    20d0:	2201      	movs	r2, #1
    20d2:	81da      	strh	r2, [r3, #14]
	i2cData.msgIn = received_time;
    20d4:	4b34      	ldr	r3, [pc, #208]	; (21a8 <GetTime+0xf8>)
    20d6:	220c      	movs	r2, #12
    20d8:	18ba      	adds	r2, r7, r2
    20da:	609a      	str	r2, [r3, #8]
	i2cData.lenIn = 7;
    20dc:	4b32      	ldr	r3, [pc, #200]	; (21a8 <GetTime+0xf8>)
    20de:	2207      	movs	r2, #7
    20e0:	819a      	strh	r2, [r3, #12]

	int32_t status = I2cReadDataWait(&i2cData, 500, 1000);
    20e2:	23fa      	movs	r3, #250	; 0xfa
    20e4:	009a      	lsls	r2, r3, #2
    20e6:	23fa      	movs	r3, #250	; 0xfa
    20e8:	0059      	lsls	r1, r3, #1
    20ea:	4b2f      	ldr	r3, [pc, #188]	; (21a8 <GetTime+0xf8>)
    20ec:	0018      	movs	r0, r3
    20ee:	4b2f      	ldr	r3, [pc, #188]	; (21ac <GetTime+0xfc>)
    20f0:	4798      	blx	r3
    20f2:	0003      	movs	r3, r0
    20f4:	617b      	str	r3, [r7, #20]
	if (status == ERROR_NONE) {
    20f6:	697b      	ldr	r3, [r7, #20]
    20f8:	2b00      	cmp	r3, #0
    20fa:	d14c      	bne.n	2196 <GetTime+0xe6>
		current_time->seconds = bcdToDec(received_time[0]);
    20fc:	230c      	movs	r3, #12
    20fe:	18fb      	adds	r3, r7, r3
    2100:	781b      	ldrb	r3, [r3, #0]
    2102:	0018      	movs	r0, r3
    2104:	4b2a      	ldr	r3, [pc, #168]	; (21b0 <GetTime+0x100>)
    2106:	4798      	blx	r3
    2108:	0003      	movs	r3, r0
    210a:	b2da      	uxtb	r2, r3
    210c:	687b      	ldr	r3, [r7, #4]
    210e:	701a      	strb	r2, [r3, #0]
		current_time->minutes = bcdToDec(received_time[1]);
    2110:	230c      	movs	r3, #12
    2112:	18fb      	adds	r3, r7, r3
    2114:	785b      	ldrb	r3, [r3, #1]
    2116:	0018      	movs	r0, r3
    2118:	4b25      	ldr	r3, [pc, #148]	; (21b0 <GetTime+0x100>)
    211a:	4798      	blx	r3
    211c:	0003      	movs	r3, r0
    211e:	b2da      	uxtb	r2, r3
    2120:	687b      	ldr	r3, [r7, #4]
    2122:	705a      	strb	r2, [r3, #1]
		current_time->hour = bcdToDec(received_time[2]);
    2124:	230c      	movs	r3, #12
    2126:	18fb      	adds	r3, r7, r3
    2128:	789b      	ldrb	r3, [r3, #2]
    212a:	0018      	movs	r0, r3
    212c:	4b20      	ldr	r3, [pc, #128]	; (21b0 <GetTime+0x100>)
    212e:	4798      	blx	r3
    2130:	0003      	movs	r3, r0
    2132:	b2da      	uxtb	r2, r3
    2134:	687b      	ldr	r3, [r7, #4]
    2136:	709a      	strb	r2, [r3, #2]
		current_time->dayofweek = bcdToDec(received_time[3]);
    2138:	230c      	movs	r3, #12
    213a:	18fb      	adds	r3, r7, r3
    213c:	78db      	ldrb	r3, [r3, #3]
    213e:	0018      	movs	r0, r3
    2140:	4b1b      	ldr	r3, [pc, #108]	; (21b0 <GetTime+0x100>)
    2142:	4798      	blx	r3
    2144:	0003      	movs	r3, r0
    2146:	b2da      	uxtb	r2, r3
    2148:	687b      	ldr	r3, [r7, #4]
    214a:	70da      	strb	r2, [r3, #3]
		current_time->dayofmonth = bcdToDec(received_time[4]);
    214c:	230c      	movs	r3, #12
    214e:	18fb      	adds	r3, r7, r3
    2150:	791b      	ldrb	r3, [r3, #4]
    2152:	0018      	movs	r0, r3
    2154:	4b16      	ldr	r3, [pc, #88]	; (21b0 <GetTime+0x100>)
    2156:	4798      	blx	r3
    2158:	0003      	movs	r3, r0
    215a:	b2da      	uxtb	r2, r3
    215c:	687b      	ldr	r3, [r7, #4]
    215e:	711a      	strb	r2, [r3, #4]
		current_time->month = bcdToDec(received_time[5]); // Directly read month, no century manipulation
    2160:	230c      	movs	r3, #12
    2162:	18fb      	adds	r3, r7, r3
    2164:	795b      	ldrb	r3, [r3, #5]
    2166:	0018      	movs	r0, r3
    2168:	4b11      	ldr	r3, [pc, #68]	; (21b0 <GetTime+0x100>)
    216a:	4798      	blx	r3
    216c:	0003      	movs	r3, r0
    216e:	b2da      	uxtb	r2, r3
    2170:	687b      	ldr	r3, [r7, #4]
    2172:	715a      	strb	r2, [r3, #5]
		current_time->year = bcdToDec(received_time[6]) + 2000; // Directly adding 2000 for simplicity
    2174:	230c      	movs	r3, #12
    2176:	18fb      	adds	r3, r7, r3
    2178:	799b      	ldrb	r3, [r3, #6]
    217a:	0018      	movs	r0, r3
    217c:	4b0c      	ldr	r3, [pc, #48]	; (21b0 <GetTime+0x100>)
    217e:	4798      	blx	r3
    2180:	0003      	movs	r3, r0
    2182:	b2db      	uxtb	r3, r3
    2184:	3b30      	subs	r3, #48	; 0x30
    2186:	b2da      	uxtb	r2, r3
    2188:	687b      	ldr	r3, [r7, #4]
    218a:	719a      	strb	r2, [r3, #6]
		SerialConsoleWriteString("Time read successfully.\r\n");
    218c:	4b09      	ldr	r3, [pc, #36]	; (21b4 <GetTime+0x104>)
    218e:	0018      	movs	r0, r3
    2190:	4b09      	ldr	r3, [pc, #36]	; (21b8 <GetTime+0x108>)
    2192:	4798      	blx	r3
		} else {
		SerialConsoleWriteString("Error reading time.\r\n");
	}
}
    2194:	e003      	b.n	219e <GetTime+0xee>
		SerialConsoleWriteString("Error reading time.\r\n");
    2196:	4b09      	ldr	r3, [pc, #36]	; (21bc <GetTime+0x10c>)
    2198:	0018      	movs	r0, r3
    219a:	4b07      	ldr	r3, [pc, #28]	; (21b8 <GetTime+0x108>)
    219c:	4798      	blx	r3
}
    219e:	46c0      	nop			; (mov r8, r8)
    21a0:	46bd      	mov	sp, r7
    21a2:	b006      	add	sp, #24
    21a4:	bd80      	pop	{r7, pc}
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	2000468c 	.word	0x2000468c
    21ac:	00001de9 	.word	0x00001de9
    21b0:	00001f4d 	.word	0x00001f4d
    21b4:	0002332c 	.word	0x0002332c
    21b8:	0000a289 	.word	0x0000a289
    21bc:	00023348 	.word	0x00023348

000021c0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    21c0:	b580      	push	{r7, lr}
    21c2:	b084      	sub	sp, #16
    21c4:	af00      	add	r7, sp, #0
    21c6:	0002      	movs	r2, r0
    21c8:	1dfb      	adds	r3, r7, #7
    21ca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    21cc:	230f      	movs	r3, #15
    21ce:	18fb      	adds	r3, r7, r3
    21d0:	1dfa      	adds	r2, r7, #7
    21d2:	7812      	ldrb	r2, [r2, #0]
    21d4:	09d2      	lsrs	r2, r2, #7
    21d6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    21d8:	230e      	movs	r3, #14
    21da:	18fb      	adds	r3, r7, r3
    21dc:	1dfa      	adds	r2, r7, #7
    21de:	7812      	ldrb	r2, [r2, #0]
    21e0:	0952      	lsrs	r2, r2, #5
    21e2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    21e4:	4b0d      	ldr	r3, [pc, #52]	; (221c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    21e6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    21e8:	230f      	movs	r3, #15
    21ea:	18fb      	adds	r3, r7, r3
    21ec:	781b      	ldrb	r3, [r3, #0]
    21ee:	2b00      	cmp	r3, #0
    21f0:	d10f      	bne.n	2212 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    21f2:	230f      	movs	r3, #15
    21f4:	18fb      	adds	r3, r7, r3
    21f6:	781b      	ldrb	r3, [r3, #0]
    21f8:	009b      	lsls	r3, r3, #2
    21fa:	2210      	movs	r2, #16
    21fc:	4694      	mov	ip, r2
    21fe:	44bc      	add	ip, r7
    2200:	4463      	add	r3, ip
    2202:	3b08      	subs	r3, #8
    2204:	681a      	ldr	r2, [r3, #0]
    2206:	230e      	movs	r3, #14
    2208:	18fb      	adds	r3, r7, r3
    220a:	781b      	ldrb	r3, [r3, #0]
    220c:	01db      	lsls	r3, r3, #7
    220e:	18d3      	adds	r3, r2, r3
    2210:	e000      	b.n	2214 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2212:	2300      	movs	r3, #0
	}
}
    2214:	0018      	movs	r0, r3
    2216:	46bd      	mov	sp, r7
    2218:	b004      	add	sp, #16
    221a:	bd80      	pop	{r7, pc}
    221c:	41004400 	.word	0x41004400

00002220 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2220:	b580      	push	{r7, lr}
    2222:	b082      	sub	sp, #8
    2224:	af00      	add	r7, sp, #0
    2226:	0002      	movs	r2, r0
    2228:	1dfb      	adds	r3, r7, #7
    222a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    222c:	1dfb      	adds	r3, r7, #7
    222e:	781b      	ldrb	r3, [r3, #0]
    2230:	0018      	movs	r0, r3
    2232:	4b03      	ldr	r3, [pc, #12]	; (2240 <port_get_group_from_gpio_pin+0x20>)
    2234:	4798      	blx	r3
    2236:	0003      	movs	r3, r0
}
    2238:	0018      	movs	r0, r3
    223a:	46bd      	mov	sp, r7
    223c:	b002      	add	sp, #8
    223e:	bd80      	pop	{r7, pc}
    2240:	000021c1 	.word	0x000021c1

00002244 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2244:	b580      	push	{r7, lr}
    2246:	b084      	sub	sp, #16
    2248:	af00      	add	r7, sp, #0
    224a:	0002      	movs	r2, r0
    224c:	1dfb      	adds	r3, r7, #7
    224e:	701a      	strb	r2, [r3, #0]
    2250:	1dbb      	adds	r3, r7, #6
    2252:	1c0a      	adds	r2, r1, #0
    2254:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2256:	1dfb      	adds	r3, r7, #7
    2258:	781b      	ldrb	r3, [r3, #0]
    225a:	0018      	movs	r0, r3
    225c:	4b0d      	ldr	r3, [pc, #52]	; (2294 <port_pin_set_output_level+0x50>)
    225e:	4798      	blx	r3
    2260:	0003      	movs	r3, r0
    2262:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2264:	1dfb      	adds	r3, r7, #7
    2266:	781b      	ldrb	r3, [r3, #0]
    2268:	221f      	movs	r2, #31
    226a:	4013      	ands	r3, r2
    226c:	2201      	movs	r2, #1
    226e:	409a      	lsls	r2, r3
    2270:	0013      	movs	r3, r2
    2272:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2274:	1dbb      	adds	r3, r7, #6
    2276:	781b      	ldrb	r3, [r3, #0]
    2278:	2b00      	cmp	r3, #0
    227a:	d003      	beq.n	2284 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    227c:	68fb      	ldr	r3, [r7, #12]
    227e:	68ba      	ldr	r2, [r7, #8]
    2280:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    2282:	e002      	b.n	228a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2284:	68fb      	ldr	r3, [r7, #12]
    2286:	68ba      	ldr	r2, [r7, #8]
    2288:	615a      	str	r2, [r3, #20]
}
    228a:	46c0      	nop			; (mov r8, r8)
    228c:	46bd      	mov	sp, r7
    228e:	b004      	add	sp, #16
    2290:	bd80      	pop	{r7, pc}
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	00002221 	.word	0x00002221

00002298 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
    2298:	b580      	push	{r7, lr}
    229a:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
    229c:	4b02      	ldr	r3, [pc, #8]	; (22a8 <init_state+0x10>)
    229e:	2200      	movs	r2, #0
    22a0:	701a      	strb	r2, [r3, #0]
}
    22a2:	46c0      	nop			; (mov r8, r8)
    22a4:	46bd      	mov	sp, r7
    22a6:	bd80      	pop	{r7, pc}
    22a8:	20000899 	.word	0x20000899

000022ac <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
    22ac:	b580      	push	{r7, lr}
    22ae:	b082      	sub	sp, #8
    22b0:	af00      	add	r7, sp, #0
    22b2:	0002      	movs	r2, r0
    22b4:	1dfb      	adds	r3, r7, #7
    22b6:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
    22b8:	1dfb      	adds	r3, r7, #7
    22ba:	781b      	ldrb	r3, [r3, #0]
    22bc:	b25b      	sxtb	r3, r3
    22be:	43db      	mvns	r3, r3
    22c0:	b25b      	sxtb	r3, r3
    22c2:	4a06      	ldr	r2, [pc, #24]	; (22dc <clear_state+0x30>)
    22c4:	7812      	ldrb	r2, [r2, #0]
    22c6:	b252      	sxtb	r2, r2
    22c8:	4013      	ands	r3, r2
    22ca:	b25b      	sxtb	r3, r3
    22cc:	b2da      	uxtb	r2, r3
    22ce:	4b03      	ldr	r3, [pc, #12]	; (22dc <clear_state+0x30>)
    22d0:	701a      	strb	r2, [r3, #0]
}
    22d2:	46c0      	nop			; (mov r8, r8)
    22d4:	46bd      	mov	sp, r7
    22d6:	b002      	add	sp, #8
    22d8:	bd80      	pop	{r7, pc}
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	20000899 	.word	0x20000899

000022e0 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
    22e0:	b580      	push	{r7, lr}
    22e2:	b082      	sub	sp, #8
    22e4:	af00      	add	r7, sp, #0
    22e6:	0002      	movs	r2, r0
    22e8:	1dfb      	adds	r3, r7, #7
    22ea:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
    22ec:	4b05      	ldr	r3, [pc, #20]	; (2304 <add_state+0x24>)
    22ee:	781a      	ldrb	r2, [r3, #0]
    22f0:	1dfb      	adds	r3, r7, #7
    22f2:	781b      	ldrb	r3, [r3, #0]
    22f4:	4313      	orrs	r3, r2
    22f6:	b2da      	uxtb	r2, r3
    22f8:	4b02      	ldr	r3, [pc, #8]	; (2304 <add_state+0x24>)
    22fa:	701a      	strb	r2, [r3, #0]
}
    22fc:	46c0      	nop			; (mov r8, r8)
    22fe:	46bd      	mov	sp, r7
    2300:	b002      	add	sp, #8
    2302:	bd80      	pop	{r7, pc}
    2304:	20000899 	.word	0x20000899

00002308 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
    2308:	b580      	push	{r7, lr}
    230a:	b082      	sub	sp, #8
    230c:	af00      	add	r7, sp, #0
    230e:	0002      	movs	r2, r0
    2310:	1dfb      	adds	r3, r7, #7
    2312:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
    2314:	4b06      	ldr	r3, [pc, #24]	; (2330 <is_state_set+0x28>)
    2316:	781b      	ldrb	r3, [r3, #0]
    2318:	1dfa      	adds	r2, r7, #7
    231a:	7812      	ldrb	r2, [r2, #0]
    231c:	4013      	ands	r3, r2
    231e:	b2db      	uxtb	r3, r3
    2320:	1e5a      	subs	r2, r3, #1
    2322:	4193      	sbcs	r3, r2
    2324:	b2db      	uxtb	r3, r3
}
    2326:	0018      	movs	r0, r3
    2328:	46bd      	mov	sp, r7
    232a:	b002      	add	sp, #8
    232c:	bd80      	pop	{r7, pc}
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	20000899 	.word	0x20000899

00002334 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
    2334:	b590      	push	{r4, r7, lr}
    2336:	b085      	sub	sp, #20
    2338:	af00      	add	r7, sp, #0
    233a:	6078      	str	r0, [r7, #4]
    233c:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	2b00      	cmp	r3, #0
    2342:	d002      	beq.n	234a <is_exist_file+0x16>
    2344:	683b      	ldr	r3, [r7, #0]
    2346:	2b00      	cmp	r3, #0
    2348:	d101      	bne.n	234e <is_exist_file+0x1a>
        return false;
    234a:	2300      	movs	r3, #0
    234c:	e013      	b.n	2376 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    234e:	230f      	movs	r3, #15
    2350:	18fc      	adds	r4, r7, r3
    2352:	6839      	ldr	r1, [r7, #0]
    2354:	4b0a      	ldr	r3, [pc, #40]	; (2380 <is_exist_file+0x4c>)
    2356:	2200      	movs	r2, #0
    2358:	0018      	movs	r0, r3
    235a:	4b0a      	ldr	r3, [pc, #40]	; (2384 <is_exist_file+0x50>)
    235c:	4798      	blx	r3
    235e:	0003      	movs	r3, r0
    2360:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
    2362:	4b07      	ldr	r3, [pc, #28]	; (2380 <is_exist_file+0x4c>)
    2364:	0018      	movs	r0, r3
    2366:	4b08      	ldr	r3, [pc, #32]	; (2388 <is_exist_file+0x54>)
    2368:	4798      	blx	r3
    return (ret == FR_OK);
    236a:	230f      	movs	r3, #15
    236c:	18fb      	adds	r3, r7, r3
    236e:	781b      	ldrb	r3, [r3, #0]
    2370:	425a      	negs	r2, r3
    2372:	4153      	adcs	r3, r2
    2374:	b2db      	uxtb	r3, r3
}
    2376:	0018      	movs	r0, r3
    2378:	46bd      	mov	sp, r7
    237a:	b005      	add	sp, #20
    237c:	bd90      	pop	{r4, r7, pc}
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	20000acc 	.word	0x20000acc
    2384:	00019e21 	.word	0x00019e21
    2388:	0001a821 	.word	0x0001a821

0000238c <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
    238c:	b580      	push	{r7, lr}
    238e:	b09e      	sub	sp, #120	; 0x78
    2390:	af00      	add	r7, sp, #0
    2392:	60f8      	str	r0, [r7, #12]
    2394:	60b9      	str	r1, [r7, #8]
    2396:	1dfb      	adds	r3, r7, #7
    2398:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
    239a:	2376      	movs	r3, #118	; 0x76
    239c:	18fb      	adds	r3, r7, r3
    239e:	2201      	movs	r2, #1
    23a0:	801a      	strh	r2, [r3, #0]
    23a2:	2374      	movs	r3, #116	; 0x74
    23a4:	18fb      	adds	r3, r7, r3
    23a6:	2200      	movs	r2, #0
    23a8:	801a      	strh	r2, [r3, #0]
    23aa:	236e      	movs	r3, #110	; 0x6e
    23ac:	18fb      	adds	r3, r7, r3
    23ae:	2200      	movs	r2, #0
    23b0:	801a      	strh	r2, [r3, #0]
    23b2:	2372      	movs	r3, #114	; 0x72
    23b4:	18fb      	adds	r3, r7, r3
    23b6:	2200      	movs	r2, #0
    23b8:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
    23ba:	2324      	movs	r3, #36	; 0x24
    23bc:	18fb      	adds	r3, r7, r3
    23be:	0018      	movs	r0, r3
    23c0:	2341      	movs	r3, #65	; 0x41
    23c2:	001a      	movs	r2, r3
    23c4:	2100      	movs	r1, #0
    23c6:	4b92      	ldr	r3, [pc, #584]	; (2610 <rename_to_unique+0x284>)
    23c8:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
    23ca:	2318      	movs	r3, #24
    23cc:	18fb      	adds	r3, r7, r3
    23ce:	0018      	movs	r0, r3
    23d0:	2309      	movs	r3, #9
    23d2:	001a      	movs	r2, r3
    23d4:	2100      	movs	r1, #0
    23d6:	4b8e      	ldr	r3, [pc, #568]	; (2610 <rename_to_unique+0x284>)
    23d8:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
    23da:	2314      	movs	r3, #20
    23dc:	18fb      	adds	r3, r7, r3
    23de:	2200      	movs	r2, #0
    23e0:	601a      	str	r2, [r3, #0]
    char *p = NULL;
    23e2:	2300      	movs	r3, #0
    23e4:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
    23e6:	2371      	movs	r3, #113	; 0x71
    23e8:	18fb      	adds	r3, r7, r3
    23ea:	2200      	movs	r2, #0
    23ec:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
    23ee:	68bb      	ldr	r3, [r7, #8]
    23f0:	2b00      	cmp	r3, #0
    23f2:	d101      	bne.n	23f8 <rename_to_unique+0x6c>
        return false;
    23f4:	2300      	movs	r3, #0
    23f6:	e106      	b.n	2606 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
    23f8:	68ba      	ldr	r2, [r7, #8]
    23fa:	68fb      	ldr	r3, [r7, #12]
    23fc:	0011      	movs	r1, r2
    23fe:	0018      	movs	r0, r3
    2400:	4b84      	ldr	r3, [pc, #528]	; (2614 <rename_to_unique+0x288>)
    2402:	4798      	blx	r3
    2404:	0003      	movs	r3, r0
    2406:	001a      	movs	r2, r3
    2408:	2301      	movs	r3, #1
    240a:	4053      	eors	r3, r2
    240c:	b2db      	uxtb	r3, r3
    240e:	2b00      	cmp	r3, #0
    2410:	d001      	beq.n	2416 <rename_to_unique+0x8a>
        return true;
    2412:	2301      	movs	r3, #1
    2414:	e0f7      	b.n	2606 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    2416:	68bb      	ldr	r3, [r7, #8]
    2418:	0018      	movs	r0, r3
    241a:	4b7f      	ldr	r3, [pc, #508]	; (2618 <rename_to_unique+0x28c>)
    241c:	4798      	blx	r3
    241e:	0003      	movs	r3, r0
    2420:	2b40      	cmp	r3, #64	; 0x40
    2422:	d901      	bls.n	2428 <rename_to_unique+0x9c>
        return false;
    2424:	2300      	movs	r3, #0
    2426:	e0ee      	b.n	2606 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
    2428:	68bb      	ldr	r3, [r7, #8]
    242a:	212e      	movs	r1, #46	; 0x2e
    242c:	0018      	movs	r0, r3
    242e:	4b7b      	ldr	r3, [pc, #492]	; (261c <rename_to_unique+0x290>)
    2430:	4798      	blx	r3
    2432:	0003      	movs	r3, r0
    2434:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
    2436:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2438:	2b00      	cmp	r3, #0
    243a:	d052      	beq.n	24e2 <rename_to_unique+0x156>
        ext_len = strlen(p);
    243c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    243e:	0018      	movs	r0, r3
    2440:	4b75      	ldr	r3, [pc, #468]	; (2618 <rename_to_unique+0x28c>)
    2442:	4798      	blx	r3
    2444:	0002      	movs	r2, r0
    2446:	236e      	movs	r3, #110	; 0x6e
    2448:	18fb      	adds	r3, r7, r3
    244a:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
    244c:	236e      	movs	r3, #110	; 0x6e
    244e:	18fb      	adds	r3, r7, r3
    2450:	881b      	ldrh	r3, [r3, #0]
    2452:	2b07      	cmp	r3, #7
    2454:	d837      	bhi.n	24c6 <rename_to_unique+0x13a>
            valid_ext = true;
    2456:	2371      	movs	r3, #113	; 0x71
    2458:	18fb      	adds	r3, r7, r3
    245a:	2201      	movs	r2, #1
    245c:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
    245e:	6eba      	ldr	r2, [r7, #104]	; 0x68
    2460:	2318      	movs	r3, #24
    2462:	18fb      	adds	r3, r7, r3
    2464:	0011      	movs	r1, r2
    2466:	0018      	movs	r0, r3
    2468:	4b6d      	ldr	r3, [pc, #436]	; (2620 <rename_to_unique+0x294>)
    246a:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
    246c:	68bb      	ldr	r3, [r7, #8]
    246e:	0018      	movs	r0, r3
    2470:	4b69      	ldr	r3, [pc, #420]	; (2618 <rename_to_unique+0x28c>)
    2472:	4798      	blx	r3
    2474:	0002      	movs	r2, r0
    2476:	236e      	movs	r3, #110	; 0x6e
    2478:	18fb      	adds	r3, r7, r3
    247a:	881b      	ldrh	r3, [r3, #0]
    247c:	1ad3      	subs	r3, r2, r3
    247e:	2b3c      	cmp	r3, #60	; 0x3c
    2480:	d911      	bls.n	24a6 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
    2482:	2374      	movs	r3, #116	; 0x74
    2484:	18fb      	adds	r3, r7, r3
    2486:	226e      	movs	r2, #110	; 0x6e
    2488:	18ba      	adds	r2, r7, r2
    248a:	8812      	ldrh	r2, [r2, #0]
    248c:	213c      	movs	r1, #60	; 0x3c
    248e:	1a8a      	subs	r2, r1, r2
    2490:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
    2492:	2374      	movs	r3, #116	; 0x74
    2494:	18fb      	adds	r3, r7, r3
    2496:	881a      	ldrh	r2, [r3, #0]
    2498:	68b9      	ldr	r1, [r7, #8]
    249a:	2324      	movs	r3, #36	; 0x24
    249c:	18fb      	adds	r3, r7, r3
    249e:	0018      	movs	r0, r3
    24a0:	4b60      	ldr	r3, [pc, #384]	; (2624 <rename_to_unique+0x298>)
    24a2:	4798      	blx	r3
    24a4:	e02a      	b.n	24fc <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
    24a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
    24a8:	68bb      	ldr	r3, [r7, #8]
    24aa:	1ad2      	subs	r2, r2, r3
    24ac:	2374      	movs	r3, #116	; 0x74
    24ae:	18fb      	adds	r3, r7, r3
    24b0:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
    24b2:	2374      	movs	r3, #116	; 0x74
    24b4:	18fb      	adds	r3, r7, r3
    24b6:	881a      	ldrh	r2, [r3, #0]
    24b8:	68b9      	ldr	r1, [r7, #8]
    24ba:	2324      	movs	r3, #36	; 0x24
    24bc:	18fb      	adds	r3, r7, r3
    24be:	0018      	movs	r0, r3
    24c0:	4b58      	ldr	r3, [pc, #352]	; (2624 <rename_to_unique+0x298>)
    24c2:	4798      	blx	r3
    24c4:	e01a      	b.n	24fc <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    24c6:	2374      	movs	r3, #116	; 0x74
    24c8:	18fb      	adds	r3, r7, r3
    24ca:	223c      	movs	r2, #60	; 0x3c
    24cc:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
    24ce:	2374      	movs	r3, #116	; 0x74
    24d0:	18fb      	adds	r3, r7, r3
    24d2:	881a      	ldrh	r2, [r3, #0]
    24d4:	68b9      	ldr	r1, [r7, #8]
    24d6:	2324      	movs	r3, #36	; 0x24
    24d8:	18fb      	adds	r3, r7, r3
    24da:	0018      	movs	r0, r3
    24dc:	4b51      	ldr	r3, [pc, #324]	; (2624 <rename_to_unique+0x298>)
    24de:	4798      	blx	r3
    24e0:	e00c      	b.n	24fc <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    24e2:	2374      	movs	r3, #116	; 0x74
    24e4:	18fb      	adds	r3, r7, r3
    24e6:	223c      	movs	r2, #60	; 0x3c
    24e8:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
    24ea:	2374      	movs	r3, #116	; 0x74
    24ec:	18fb      	adds	r3, r7, r3
    24ee:	881a      	ldrh	r2, [r3, #0]
    24f0:	68b9      	ldr	r1, [r7, #8]
    24f2:	2324      	movs	r3, #36	; 0x24
    24f4:	18fb      	adds	r3, r7, r3
    24f6:	0018      	movs	r0, r3
    24f8:	4b4a      	ldr	r3, [pc, #296]	; (2624 <rename_to_unique+0x298>)
    24fa:	4798      	blx	r3
    }

    name[name_len++] = '-';
    24fc:	2374      	movs	r3, #116	; 0x74
    24fe:	18fb      	adds	r3, r7, r3
    2500:	881b      	ldrh	r3, [r3, #0]
    2502:	2274      	movs	r2, #116	; 0x74
    2504:	18ba      	adds	r2, r7, r2
    2506:	1c59      	adds	r1, r3, #1
    2508:	8011      	strh	r1, [r2, #0]
    250a:	001a      	movs	r2, r3
    250c:	2324      	movs	r3, #36	; 0x24
    250e:	18fb      	adds	r3, r7, r3
    2510:	212d      	movs	r1, #45	; 0x2d
    2512:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
    2514:	2376      	movs	r3, #118	; 0x76
    2516:	18fb      	adds	r3, r7, r3
    2518:	2200      	movs	r2, #0
    251a:	801a      	strh	r2, [r3, #0]
    251c:	2372      	movs	r3, #114	; 0x72
    251e:	18fb      	adds	r3, r7, r3
    2520:	2201      	movs	r2, #1
    2522:	801a      	strh	r2, [r3, #0]
    2524:	e010      	b.n	2548 <rename_to_unique+0x1bc>
        count *= 10;
    2526:	2372      	movs	r3, #114	; 0x72
    2528:	18fa      	adds	r2, r7, r3
    252a:	2372      	movs	r3, #114	; 0x72
    252c:	18fb      	adds	r3, r7, r3
    252e:	881b      	ldrh	r3, [r3, #0]
    2530:	1c19      	adds	r1, r3, #0
    2532:	0089      	lsls	r1, r1, #2
    2534:	18cb      	adds	r3, r1, r3
    2536:	18db      	adds	r3, r3, r3
    2538:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
    253a:	2376      	movs	r3, #118	; 0x76
    253c:	18fb      	adds	r3, r7, r3
    253e:	881a      	ldrh	r2, [r3, #0]
    2540:	2376      	movs	r3, #118	; 0x76
    2542:	18fb      	adds	r3, r7, r3
    2544:	3201      	adds	r2, #1
    2546:	801a      	strh	r2, [r3, #0]
    2548:	2376      	movs	r3, #118	; 0x76
    254a:	18fb      	adds	r3, r7, r3
    254c:	881b      	ldrh	r3, [r3, #0]
    254e:	2b02      	cmp	r3, #2
    2550:	d9e9      	bls.n	2526 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
    2552:	2376      	movs	r3, #118	; 0x76
    2554:	18fb      	adds	r3, r7, r3
    2556:	2201      	movs	r2, #1
    2558:	801a      	strh	r2, [r3, #0]
    255a:	e04b      	b.n	25f4 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
    255c:	2376      	movs	r3, #118	; 0x76
    255e:	18fb      	adds	r3, r7, r3
    2560:	881a      	ldrh	r2, [r3, #0]
    2562:	4931      	ldr	r1, [pc, #196]	; (2628 <rename_to_unique+0x29c>)
    2564:	2314      	movs	r3, #20
    2566:	18fb      	adds	r3, r7, r3
    2568:	0018      	movs	r0, r3
    256a:	4b30      	ldr	r3, [pc, #192]	; (262c <rename_to_unique+0x2a0>)
    256c:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
    256e:	2374      	movs	r3, #116	; 0x74
    2570:	18fb      	adds	r3, r7, r3
    2572:	881b      	ldrh	r3, [r3, #0]
    2574:	2224      	movs	r2, #36	; 0x24
    2576:	18ba      	adds	r2, r7, r2
    2578:	18d3      	adds	r3, r2, r3
    257a:	2214      	movs	r2, #20
    257c:	18b9      	adds	r1, r7, r2
    257e:	2203      	movs	r2, #3
    2580:	0018      	movs	r0, r3
    2582:	4b28      	ldr	r3, [pc, #160]	; (2624 <rename_to_unique+0x298>)
    2584:	4798      	blx	r3
        if (valid_ext) {
    2586:	2371      	movs	r3, #113	; 0x71
    2588:	18fb      	adds	r3, r7, r3
    258a:	781b      	ldrb	r3, [r3, #0]
    258c:	2b00      	cmp	r3, #0
    258e:	d00c      	beq.n	25aa <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
    2590:	2374      	movs	r3, #116	; 0x74
    2592:	18fb      	adds	r3, r7, r3
    2594:	881b      	ldrh	r3, [r3, #0]
    2596:	3303      	adds	r3, #3
    2598:	2224      	movs	r2, #36	; 0x24
    259a:	18ba      	adds	r2, r7, r2
    259c:	18d3      	adds	r3, r2, r3
    259e:	2218      	movs	r2, #24
    25a0:	18ba      	adds	r2, r7, r2
    25a2:	0011      	movs	r1, r2
    25a4:	0018      	movs	r0, r3
    25a6:	4b1e      	ldr	r3, [pc, #120]	; (2620 <rename_to_unique+0x294>)
    25a8:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
    25aa:	2324      	movs	r3, #36	; 0x24
    25ac:	18fa      	adds	r2, r7, r3
    25ae:	68fb      	ldr	r3, [r7, #12]
    25b0:	0011      	movs	r1, r2
    25b2:	0018      	movs	r0, r3
    25b4:	4b17      	ldr	r3, [pc, #92]	; (2614 <rename_to_unique+0x288>)
    25b6:	4798      	blx	r3
    25b8:	0003      	movs	r3, r0
    25ba:	001a      	movs	r2, r3
    25bc:	2301      	movs	r3, #1
    25be:	4053      	eors	r3, r2
    25c0:	b2db      	uxtb	r3, r3
    25c2:	2b00      	cmp	r3, #0
    25c4:	d00f      	beq.n	25e6 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
    25c6:	1dfb      	adds	r3, r7, #7
    25c8:	781a      	ldrb	r2, [r3, #0]
    25ca:	68bb      	ldr	r3, [r7, #8]
    25cc:	2100      	movs	r1, #0
    25ce:	0018      	movs	r0, r3
    25d0:	4b0f      	ldr	r3, [pc, #60]	; (2610 <rename_to_unique+0x284>)
    25d2:	4798      	blx	r3
            strcpy(file_path_name, name);
    25d4:	2324      	movs	r3, #36	; 0x24
    25d6:	18fa      	adds	r2, r7, r3
    25d8:	68bb      	ldr	r3, [r7, #8]
    25da:	0011      	movs	r1, r2
    25dc:	0018      	movs	r0, r3
    25de:	4b10      	ldr	r3, [pc, #64]	; (2620 <rename_to_unique+0x294>)
    25e0:	4798      	blx	r3
            return true;
    25e2:	2301      	movs	r3, #1
    25e4:	e00f      	b.n	2606 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
    25e6:	2376      	movs	r3, #118	; 0x76
    25e8:	18fb      	adds	r3, r7, r3
    25ea:	881a      	ldrh	r2, [r3, #0]
    25ec:	2376      	movs	r3, #118	; 0x76
    25ee:	18fb      	adds	r3, r7, r3
    25f0:	3201      	adds	r2, #1
    25f2:	801a      	strh	r2, [r3, #0]
    25f4:	2376      	movs	r3, #118	; 0x76
    25f6:	18fa      	adds	r2, r7, r3
    25f8:	2372      	movs	r3, #114	; 0x72
    25fa:	18fb      	adds	r3, r7, r3
    25fc:	8812      	ldrh	r2, [r2, #0]
    25fe:	881b      	ldrh	r3, [r3, #0]
    2600:	429a      	cmp	r2, r3
    2602:	d3ab      	bcc.n	255c <rename_to_unique+0x1d0>
        }
    }
    return false;
    2604:	2300      	movs	r3, #0
}
    2606:	0018      	movs	r0, r3
    2608:	46bd      	mov	sp, r7
    260a:	b01e      	add	sp, #120	; 0x78
    260c:	bd80      	pop	{r7, pc}
    260e:	46c0      	nop			; (mov r8, r8)
    2610:	00020d8b 	.word	0x00020d8b
    2614:	00002335 	.word	0x00002335
    2618:	00021143 	.word	0x00021143
    261c:	0002119d 	.word	0x0002119d
    2620:	000210f7 	.word	0x000210f7
    2624:	00021173 	.word	0x00021173
    2628:	00023374 	.word	0x00023374
    262c:	00021049 	.word	0x00021049

00002630 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
    2630:	b590      	push	{r4, r7, lr}
    2632:	b085      	sub	sp, #20
    2634:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
    2636:	2001      	movs	r0, #1
    2638:	4b23      	ldr	r3, [pc, #140]	; (26c8 <start_download+0x98>)
    263a:	4798      	blx	r3
    263c:	0003      	movs	r3, r0
    263e:	001a      	movs	r2, r3
    2640:	2301      	movs	r3, #1
    2642:	4053      	eors	r3, r2
    2644:	b2db      	uxtb	r3, r3
    2646:	2b00      	cmp	r3, #0
    2648:	d005      	beq.n	2656 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
    264a:	4b20      	ldr	r3, [pc, #128]	; (26cc <start_download+0x9c>)
    264c:	0019      	movs	r1, r3
    264e:	2001      	movs	r0, #1
    2650:	4b1f      	ldr	r3, [pc, #124]	; (26d0 <start_download+0xa0>)
    2652:	4798      	blx	r3
        return;
    2654:	e034      	b.n	26c0 <start_download+0x90>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
    2656:	2002      	movs	r0, #2
    2658:	4b1b      	ldr	r3, [pc, #108]	; (26c8 <start_download+0x98>)
    265a:	4798      	blx	r3
    265c:	0003      	movs	r3, r0
    265e:	001a      	movs	r2, r3
    2660:	2301      	movs	r3, #1
    2662:	4053      	eors	r3, r2
    2664:	b2db      	uxtb	r3, r3
    2666:	2b00      	cmp	r3, #0
    2668:	d005      	beq.n	2676 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
    266a:	4b1a      	ldr	r3, [pc, #104]	; (26d4 <start_download+0xa4>)
    266c:	0019      	movs	r1, r3
    266e:	2001      	movs	r0, #1
    2670:	4b17      	ldr	r3, [pc, #92]	; (26d0 <start_download+0xa0>)
    2672:	4798      	blx	r3
        return;
    2674:	e024      	b.n	26c0 <start_download+0x90>
    }

    if (is_state_set(GET_REQUESTED)) {
    2676:	2004      	movs	r0, #4
    2678:	4b13      	ldr	r3, [pc, #76]	; (26c8 <start_download+0x98>)
    267a:	4798      	blx	r3
    267c:	1e03      	subs	r3, r0, #0
    267e:	d005      	beq.n	268c <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
    2680:	4b15      	ldr	r3, [pc, #84]	; (26d8 <start_download+0xa8>)
    2682:	0019      	movs	r1, r3
    2684:	2001      	movs	r0, #1
    2686:	4b12      	ldr	r3, [pc, #72]	; (26d0 <start_download+0xa0>)
    2688:	4798      	blx	r3
        return;
    268a:	e019      	b.n	26c0 <start_download+0x90>
    }

    if (is_state_set(DOWNLOADING)) {
    268c:	2008      	movs	r0, #8
    268e:	4b0e      	ldr	r3, [pc, #56]	; (26c8 <start_download+0x98>)
    2690:	4798      	blx	r3
    2692:	1e03      	subs	r3, r0, #0
    2694:	d005      	beq.n	26a2 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
    2696:	4b11      	ldr	r3, [pc, #68]	; (26dc <start_download+0xac>)
    2698:	0019      	movs	r1, r3
    269a:	2001      	movs	r0, #1
    269c:	4b0c      	ldr	r3, [pc, #48]	; (26d0 <start_download+0xa0>)
    269e:	4798      	blx	r3
        return;
    26a0:	e00e      	b.n	26c0 <start_download+0x90>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
    26a2:	4b0f      	ldr	r3, [pc, #60]	; (26e0 <start_download+0xb0>)
    26a4:	0019      	movs	r1, r3
    26a6:	2001      	movs	r0, #1
    26a8:	4b09      	ldr	r3, [pc, #36]	; (26d0 <start_download+0xa0>)
    26aa:	4798      	blx	r3
    int http_req_status = http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    26ac:	490d      	ldr	r1, [pc, #52]	; (26e4 <start_download+0xb4>)
    26ae:	480e      	ldr	r0, [pc, #56]	; (26e8 <start_download+0xb8>)
    26b0:	2300      	movs	r3, #0
    26b2:	9300      	str	r3, [sp, #0]
    26b4:	2300      	movs	r3, #0
    26b6:	2201      	movs	r2, #1
    26b8:	4c0c      	ldr	r4, [pc, #48]	; (26ec <start_download+0xbc>)
    26ba:	47a0      	blx	r4
    26bc:	0003      	movs	r3, r0
    26be:	607b      	str	r3, [r7, #4]
}
    26c0:	46bd      	mov	sp, r7
    26c2:	b003      	add	sp, #12
    26c4:	bd90      	pop	{r4, r7, pc}
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	00002309 	.word	0x00002309
    26cc:	0002337c 	.word	0x0002337c
    26d0:	0000a375 	.word	0x0000a375
    26d4:	000233a8 	.word	0x000233a8
    26d8:	000233d4 	.word	0x000233d4
    26dc:	00023400 	.word	0x00023400
    26e0:	0002342c 	.word	0x0002342c
    26e4:	00023458 	.word	0x00023458
    26e8:	2000470c 	.word	0x2000470c
    26ec:	0001d475 	.word	0x0001d475

000026f0 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
    26f0:	b5b0      	push	{r4, r5, r7, lr}
    26f2:	b086      	sub	sp, #24
    26f4:	af00      	add	r7, sp, #0
    26f6:	6078      	str	r0, [r7, #4]
    26f8:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
    26fa:	687b      	ldr	r3, [r7, #4]
    26fc:	2b00      	cmp	r3, #0
    26fe:	d002      	beq.n	2706 <store_file_packet+0x16>
    2700:	683b      	ldr	r3, [r7, #0]
    2702:	2b00      	cmp	r3, #0
    2704:	d105      	bne.n	2712 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
    2706:	4b58      	ldr	r3, [pc, #352]	; (2868 <store_file_packet+0x178>)
    2708:	0019      	movs	r1, r3
    270a:	2001      	movs	r0, #1
    270c:	4b57      	ldr	r3, [pc, #348]	; (286c <store_file_packet+0x17c>)
    270e:	4798      	blx	r3
        return;
    2710:	e0a6      	b.n	2860 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
    2712:	2008      	movs	r0, #8
    2714:	4b56      	ldr	r3, [pc, #344]	; (2870 <store_file_packet+0x180>)
    2716:	4798      	blx	r3
    2718:	0003      	movs	r3, r0
    271a:	001a      	movs	r2, r3
    271c:	2301      	movs	r3, #1
    271e:	4053      	eors	r3, r2
    2720:	b2db      	uxtb	r3, r3
    2722:	2b00      	cmp	r3, #0
    2724:	d055      	beq.n	27d2 <store_file_packet+0xe2>
        char *cp = NULL;
    2726:	2300      	movs	r3, #0
    2728:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    272a:	4b52      	ldr	r3, [pc, #328]	; (2874 <store_file_packet+0x184>)
    272c:	2230      	movs	r2, #48	; 0x30
    272e:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
    2730:	4b50      	ldr	r3, [pc, #320]	; (2874 <store_file_packet+0x184>)
    2732:	223a      	movs	r2, #58	; 0x3a
    2734:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
    2736:	4b50      	ldr	r3, [pc, #320]	; (2878 <store_file_packet+0x188>)
    2738:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
    273a:	e002      	b.n	2742 <store_file_packet+0x52>
            cp--;
    273c:	697b      	ldr	r3, [r7, #20]
    273e:	3b01      	subs	r3, #1
    2740:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
    2742:	697b      	ldr	r3, [r7, #20]
    2744:	781b      	ldrb	r3, [r3, #0]
    2746:	2b2f      	cmp	r3, #47	; 0x2f
    2748:	d1f8      	bne.n	273c <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
    274a:	697b      	ldr	r3, [r7, #20]
    274c:	0018      	movs	r0, r3
    274e:	4b4b      	ldr	r3, [pc, #300]	; (287c <store_file_packet+0x18c>)
    2750:	4798      	blx	r3
    2752:	0003      	movs	r3, r0
    2754:	2b01      	cmp	r3, #1
    2756:	d924      	bls.n	27a2 <store_file_packet+0xb2>
            cp++;
    2758:	697b      	ldr	r3, [r7, #20]
    275a:	3301      	adds	r3, #1
    275c:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
    275e:	697a      	ldr	r2, [r7, #20]
    2760:	4b47      	ldr	r3, [pc, #284]	; (2880 <store_file_packet+0x190>)
    2762:	0011      	movs	r1, r2
    2764:	0018      	movs	r0, r3
    2766:	4b47      	ldr	r3, [pc, #284]	; (2884 <store_file_packet+0x194>)
    2768:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
    276a:	4942      	ldr	r1, [pc, #264]	; (2874 <store_file_packet+0x184>)
    276c:	4b46      	ldr	r3, [pc, #280]	; (2888 <store_file_packet+0x198>)
    276e:	2240      	movs	r2, #64	; 0x40
    2770:	0018      	movs	r0, r3
    2772:	4b46      	ldr	r3, [pc, #280]	; (288c <store_file_packet+0x19c>)
    2774:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
    2776:	4a3f      	ldr	r2, [pc, #252]	; (2874 <store_file_packet+0x184>)
    2778:	4b45      	ldr	r3, [pc, #276]	; (2890 <store_file_packet+0x1a0>)
    277a:	0019      	movs	r1, r3
    277c:	2001      	movs	r0, #1
    277e:	4b3b      	ldr	r3, [pc, #236]	; (286c <store_file_packet+0x17c>)
    2780:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    2782:	2313      	movs	r3, #19
    2784:	18fc      	adds	r4, r7, r3
    2786:	493b      	ldr	r1, [pc, #236]	; (2874 <store_file_packet+0x184>)
    2788:	4b3f      	ldr	r3, [pc, #252]	; (2888 <store_file_packet+0x198>)
    278a:	220a      	movs	r2, #10
    278c:	0018      	movs	r0, r3
    278e:	4b41      	ldr	r3, [pc, #260]	; (2894 <store_file_packet+0x1a4>)
    2790:	4798      	blx	r3
    2792:	0003      	movs	r3, r0
    2794:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
    2796:	2313      	movs	r3, #19
    2798:	18fb      	adds	r3, r7, r3
    279a:	781b      	ldrb	r3, [r3, #0]
    279c:	2b00      	cmp	r3, #0
    279e:	d012      	beq.n	27c6 <store_file_packet+0xd6>
    27a0:	e008      	b.n	27b4 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
    27a2:	4b3d      	ldr	r3, [pc, #244]	; (2898 <store_file_packet+0x1a8>)
    27a4:	0019      	movs	r1, r3
    27a6:	2001      	movs	r0, #1
    27a8:	4b30      	ldr	r3, [pc, #192]	; (286c <store_file_packet+0x17c>)
    27aa:	4798      	blx	r3
            add_state(CANCELED);
    27ac:	2020      	movs	r0, #32
    27ae:	4b3b      	ldr	r3, [pc, #236]	; (289c <store_file_packet+0x1ac>)
    27b0:	4798      	blx	r3
            return;
    27b2:	e055      	b.n	2860 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
    27b4:	2313      	movs	r3, #19
    27b6:	18fb      	adds	r3, r7, r3
    27b8:	781a      	ldrb	r2, [r3, #0]
    27ba:	4b39      	ldr	r3, [pc, #228]	; (28a0 <store_file_packet+0x1b0>)
    27bc:	0019      	movs	r1, r3
    27be:	2001      	movs	r0, #1
    27c0:	4b2a      	ldr	r3, [pc, #168]	; (286c <store_file_packet+0x17c>)
    27c2:	4798      	blx	r3
            return;
    27c4:	e04c      	b.n	2860 <store_file_packet+0x170>
        }

        received_file_size = 0;
    27c6:	4b37      	ldr	r3, [pc, #220]	; (28a4 <store_file_packet+0x1b4>)
    27c8:	2200      	movs	r2, #0
    27ca:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
    27cc:	2008      	movs	r0, #8
    27ce:	4b33      	ldr	r3, [pc, #204]	; (289c <store_file_packet+0x1ac>)
    27d0:	4798      	blx	r3
    }

    if (data != NULL) {
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	2b00      	cmp	r3, #0
    27d6:	d043      	beq.n	2860 <store_file_packet+0x170>
        UINT wsize = 0;
    27d8:	2300      	movs	r3, #0
    27da:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
    27dc:	2313      	movs	r3, #19
    27de:	18fc      	adds	r4, r7, r3
    27e0:	230c      	movs	r3, #12
    27e2:	18fb      	adds	r3, r7, r3
    27e4:	683a      	ldr	r2, [r7, #0]
    27e6:	6879      	ldr	r1, [r7, #4]
    27e8:	4827      	ldr	r0, [pc, #156]	; (2888 <store_file_packet+0x198>)
    27ea:	4d2f      	ldr	r5, [pc, #188]	; (28a8 <store_file_packet+0x1b8>)
    27ec:	47a8      	blx	r5
    27ee:	0003      	movs	r3, r0
    27f0:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
    27f2:	2313      	movs	r3, #19
    27f4:	18fb      	adds	r3, r7, r3
    27f6:	781b      	ldrb	r3, [r3, #0]
    27f8:	2b00      	cmp	r3, #0
    27fa:	d00c      	beq.n	2816 <store_file_packet+0x126>
            f_close(&file_object);
    27fc:	4b22      	ldr	r3, [pc, #136]	; (2888 <store_file_packet+0x198>)
    27fe:	0018      	movs	r0, r3
    2800:	4b2a      	ldr	r3, [pc, #168]	; (28ac <store_file_packet+0x1bc>)
    2802:	4798      	blx	r3
            add_state(CANCELED);
    2804:	2020      	movs	r0, #32
    2806:	4b25      	ldr	r3, [pc, #148]	; (289c <store_file_packet+0x1ac>)
    2808:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
    280a:	4b29      	ldr	r3, [pc, #164]	; (28b0 <store_file_packet+0x1c0>)
    280c:	0019      	movs	r1, r3
    280e:	2001      	movs	r0, #1
    2810:	4b16      	ldr	r3, [pc, #88]	; (286c <store_file_packet+0x17c>)
    2812:	4798      	blx	r3
            return;
    2814:	e024      	b.n	2860 <store_file_packet+0x170>
        }

        received_file_size += wsize;
    2816:	4b23      	ldr	r3, [pc, #140]	; (28a4 <store_file_packet+0x1b4>)
    2818:	681a      	ldr	r2, [r3, #0]
    281a:	68fb      	ldr	r3, [r7, #12]
    281c:	18d2      	adds	r2, r2, r3
    281e:	4b21      	ldr	r3, [pc, #132]	; (28a4 <store_file_packet+0x1b4>)
    2820:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    2822:	4b20      	ldr	r3, [pc, #128]	; (28a4 <store_file_packet+0x1b4>)
    2824:	681a      	ldr	r2, [r3, #0]
    2826:	4b23      	ldr	r3, [pc, #140]	; (28b4 <store_file_packet+0x1c4>)
    2828:	681b      	ldr	r3, [r3, #0]
    282a:	4923      	ldr	r1, [pc, #140]	; (28b8 <store_file_packet+0x1c8>)
    282c:	2001      	movs	r0, #1
    282e:	4c0f      	ldr	r4, [pc, #60]	; (286c <store_file_packet+0x17c>)
    2830:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
    2832:	4b1c      	ldr	r3, [pc, #112]	; (28a4 <store_file_packet+0x1b4>)
    2834:	681a      	ldr	r2, [r3, #0]
    2836:	4b1f      	ldr	r3, [pc, #124]	; (28b4 <store_file_packet+0x1c4>)
    2838:	681b      	ldr	r3, [r3, #0]
    283a:	429a      	cmp	r2, r3
    283c:	d310      	bcc.n	2860 <store_file_packet+0x170>
            f_close(&file_object);
    283e:	4b12      	ldr	r3, [pc, #72]	; (2888 <store_file_packet+0x198>)
    2840:	0018      	movs	r0, r3
    2842:	4b1a      	ldr	r3, [pc, #104]	; (28ac <store_file_packet+0x1bc>)
    2844:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
    2846:	4b1d      	ldr	r3, [pc, #116]	; (28bc <store_file_packet+0x1cc>)
    2848:	0019      	movs	r1, r3
    284a:	2001      	movs	r0, #1
    284c:	4b07      	ldr	r3, [pc, #28]	; (286c <store_file_packet+0x17c>)
    284e:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
    2850:	2100      	movs	r1, #0
    2852:	2017      	movs	r0, #23
    2854:	4b1a      	ldr	r3, [pc, #104]	; (28c0 <store_file_packet+0x1d0>)
    2856:	4798      	blx	r3
            add_state(COMPLETED);
    2858:	2010      	movs	r0, #16
    285a:	4b10      	ldr	r3, [pc, #64]	; (289c <store_file_packet+0x1ac>)
    285c:	4798      	blx	r3
            return;
    285e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    2860:	46bd      	mov	sp, r7
    2862:	b006      	add	sp, #24
    2864:	bdb0      	pop	{r4, r5, r7, pc}
    2866:	46c0      	nop			; (mov r8, r8)
    2868:	00023478 	.word	0x00023478
    286c:	0000a375 	.word	0x0000a375
    2870:	00002309 	.word	0x00002309
    2874:	200000a0 	.word	0x200000a0
    2878:	00023475 	.word	0x00023475
    287c:	00021143 	.word	0x00021143
    2880:	200000a2 	.word	0x200000a2
    2884:	000210f7 	.word	0x000210f7
    2888:	20000acc 	.word	0x20000acc
    288c:	0000238d 	.word	0x0000238d
    2890:	000234dc 	.word	0x000234dc
    2894:	00019e21 	.word	0x00019e21
    2898:	0002349c 	.word	0x0002349c
    289c:	000022e1 	.word	0x000022e1
    28a0:	00023504 	.word	0x00023504
    28a4:	20000af4 	.word	0x20000af4
    28a8:	0001a351 	.word	0x0001a351
    28ac:	0001a821 	.word	0x0001a821
    28b0:	00023538 	.word	0x00023538
    28b4:	20000af0 	.word	0x20000af0
    28b8:	00023574 	.word	0x00023574
    28bc:	000235a8 	.word	0x000235a8
    28c0:	00002245 	.word	0x00002245

000028c4 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
    28c4:	b590      	push	{r4, r7, lr}
    28c6:	b085      	sub	sp, #20
    28c8:	af00      	add	r7, sp, #0
    28ca:	60f8      	str	r0, [r7, #12]
    28cc:	60b9      	str	r1, [r7, #8]
    28ce:	607a      	str	r2, [r7, #4]
    switch (type) {
    28d0:	68bb      	ldr	r3, [r7, #8]
    28d2:	2b04      	cmp	r3, #4
    28d4:	d900      	bls.n	28d8 <http_client_callback+0x14>
    28d6:	e077      	b.n	29c8 <http_client_callback+0x104>
    28d8:	68bb      	ldr	r3, [r7, #8]
    28da:	009a      	lsls	r2, r3, #2
    28dc:	4b3c      	ldr	r3, [pc, #240]	; (29d0 <http_client_callback+0x10c>)
    28de:	18d3      	adds	r3, r2, r3
    28e0:	681b      	ldr	r3, [r3, #0]
    28e2:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
    28e4:	4b3b      	ldr	r3, [pc, #236]	; (29d4 <http_client_callback+0x110>)
    28e6:	0019      	movs	r1, r3
    28e8:	2001      	movs	r0, #1
    28ea:	4b3b      	ldr	r3, [pc, #236]	; (29d8 <http_client_callback+0x114>)
    28ec:	4798      	blx	r3
            break;
    28ee:	e06b      	b.n	29c8 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
    28f0:	4b3a      	ldr	r3, [pc, #232]	; (29dc <http_client_callback+0x118>)
    28f2:	0019      	movs	r1, r3
    28f4:	2001      	movs	r0, #1
    28f6:	4b38      	ldr	r3, [pc, #224]	; (29d8 <http_client_callback+0x114>)
    28f8:	4798      	blx	r3
            add_state(GET_REQUESTED);
    28fa:	2004      	movs	r0, #4
    28fc:	4b38      	ldr	r3, [pc, #224]	; (29e0 <http_client_callback+0x11c>)
    28fe:	4798      	blx	r3
            break;
    2900:	e062      	b.n	29c8 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
    2902:	687b      	ldr	r3, [r7, #4]
    2904:	881b      	ldrh	r3, [r3, #0]
    2906:	001a      	movs	r2, r3
    2908:	687b      	ldr	r3, [r7, #4]
    290a:	685b      	ldr	r3, [r3, #4]
    290c:	4935      	ldr	r1, [pc, #212]	; (29e4 <http_client_callback+0x120>)
    290e:	2001      	movs	r0, #1
    2910:	4c31      	ldr	r4, [pc, #196]	; (29d8 <http_client_callback+0x114>)
    2912:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
    2914:	687b      	ldr	r3, [r7, #4]
    2916:	881b      	ldrh	r3, [r3, #0]
    2918:	2bc8      	cmp	r3, #200	; 0xc8
    291a:	d10d      	bne.n	2938 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
    291c:	687b      	ldr	r3, [r7, #4]
    291e:	685a      	ldr	r2, [r3, #4]
    2920:	4b31      	ldr	r3, [pc, #196]	; (29e8 <http_client_callback+0x124>)
    2922:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
    2924:	4b31      	ldr	r3, [pc, #196]	; (29ec <http_client_callback+0x128>)
    2926:	2200      	movs	r2, #0
    2928:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    292a:	687b      	ldr	r3, [r7, #4]
    292c:	685a      	ldr	r2, [r3, #4]
    292e:	2380      	movs	r3, #128	; 0x80
    2930:	009b      	lsls	r3, r3, #2
    2932:	429a      	cmp	r2, r3
    2934:	d843      	bhi.n	29be <http_client_callback+0xfa>
    2936:	e003      	b.n	2940 <http_client_callback+0x7c>
                add_state(CANCELED);
    2938:	2020      	movs	r0, #32
    293a:	4b29      	ldr	r3, [pc, #164]	; (29e0 <http_client_callback+0x11c>)
    293c:	4798      	blx	r3
                return;
    293e:	e043      	b.n	29c8 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	689a      	ldr	r2, [r3, #8]
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	685b      	ldr	r3, [r3, #4]
    2948:	0019      	movs	r1, r3
    294a:	0010      	movs	r0, r2
    294c:	4b28      	ldr	r3, [pc, #160]	; (29f0 <http_client_callback+0x12c>)
    294e:	4798      	blx	r3
                add_state(COMPLETED);
    2950:	2010      	movs	r0, #16
    2952:	4b23      	ldr	r3, [pc, #140]	; (29e0 <http_client_callback+0x11c>)
    2954:	4798      	blx	r3
            }
            break;
    2956:	e032      	b.n	29be <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	685a      	ldr	r2, [r3, #4]
    295c:	687b      	ldr	r3, [r7, #4]
    295e:	681b      	ldr	r3, [r3, #0]
    2960:	0019      	movs	r1, r3
    2962:	0010      	movs	r0, r2
    2964:	4b22      	ldr	r3, [pc, #136]	; (29f0 <http_client_callback+0x12c>)
    2966:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
    2968:	687b      	ldr	r3, [r7, #4]
    296a:	7a1b      	ldrb	r3, [r3, #8]
    296c:	2b00      	cmp	r3, #0
    296e:	d028      	beq.n	29c2 <http_client_callback+0xfe>
                add_state(COMPLETED);
    2970:	2010      	movs	r0, #16
    2972:	4b1b      	ldr	r3, [pc, #108]	; (29e0 <http_client_callback+0x11c>)
    2974:	4798      	blx	r3
            }

            break;
    2976:	e024      	b.n	29c2 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	681a      	ldr	r2, [r3, #0]
    297c:	4b1d      	ldr	r3, [pc, #116]	; (29f4 <http_client_callback+0x130>)
    297e:	0019      	movs	r1, r3
    2980:	2001      	movs	r0, #1
    2982:	4b15      	ldr	r3, [pc, #84]	; (29d8 <http_client_callback+0x114>)
    2984:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
    2986:	687b      	ldr	r3, [r7, #4]
    2988:	681b      	ldr	r3, [r3, #0]
    298a:	330b      	adds	r3, #11
    298c:	d11b      	bne.n	29c6 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
    298e:	2008      	movs	r0, #8
    2990:	4b19      	ldr	r3, [pc, #100]	; (29f8 <http_client_callback+0x134>)
    2992:	4798      	blx	r3
    2994:	1e03      	subs	r3, r0, #0
    2996:	d006      	beq.n	29a6 <http_client_callback+0xe2>
                    f_close(&file_object);
    2998:	4b18      	ldr	r3, [pc, #96]	; (29fc <http_client_callback+0x138>)
    299a:	0018      	movs	r0, r3
    299c:	4b18      	ldr	r3, [pc, #96]	; (2a00 <http_client_callback+0x13c>)
    299e:	4798      	blx	r3
                    clear_state(DOWNLOADING);
    29a0:	2008      	movs	r0, #8
    29a2:	4b18      	ldr	r3, [pc, #96]	; (2a04 <http_client_callback+0x140>)
    29a4:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
    29a6:	2004      	movs	r0, #4
    29a8:	4b13      	ldr	r3, [pc, #76]	; (29f8 <http_client_callback+0x134>)
    29aa:	4798      	blx	r3
    29ac:	1e03      	subs	r3, r0, #0
    29ae:	d002      	beq.n	29b6 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
    29b0:	2004      	movs	r0, #4
    29b2:	4b14      	ldr	r3, [pc, #80]	; (2a04 <http_client_callback+0x140>)
    29b4:	4798      	blx	r3
                }

                start_download();
    29b6:	4b14      	ldr	r3, [pc, #80]	; (2a08 <http_client_callback+0x144>)
    29b8:	4798      	blx	r3
            }

            break;
    29ba:	46c0      	nop			; (mov r8, r8)
    29bc:	e003      	b.n	29c6 <http_client_callback+0x102>
            break;
    29be:	46c0      	nop			; (mov r8, r8)
    29c0:	e002      	b.n	29c8 <http_client_callback+0x104>
            break;
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	e000      	b.n	29c8 <http_client_callback+0x104>
            break;
    29c6:	46c0      	nop			; (mov r8, r8)
    }
}
    29c8:	46bd      	mov	sp, r7
    29ca:	b005      	add	sp, #20
    29cc:	bd90      	pop	{r4, r7, pc}
    29ce:	46c0      	nop			; (mov r8, r8)
    29d0:	00023ce8 	.word	0x00023ce8
    29d4:	000235dc 	.word	0x000235dc
    29d8:	0000a375 	.word	0x0000a375
    29dc:	00023614 	.word	0x00023614
    29e0:	000022e1 	.word	0x000022e1
    29e4:	00023640 	.word	0x00023640
    29e8:	20000af0 	.word	0x20000af0
    29ec:	20000af4 	.word	0x20000af4
    29f0:	000026f1 	.word	0x000026f1
    29f4:	0002367c 	.word	0x0002367c
    29f8:	00002309 	.word	0x00002309
    29fc:	20000acc 	.word	0x20000acc
    2a00:	0001a821 	.word	0x0001a821
    2a04:	000022ad 	.word	0x000022ad
    2a08:	00002631 	.word	0x00002631

00002a0c <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    2a0c:	b580      	push	{r7, lr}
    2a0e:	b082      	sub	sp, #8
    2a10:	af00      	add	r7, sp, #0
    2a12:	603a      	str	r2, [r7, #0]
    2a14:	1dfb      	adds	r3, r7, #7
    2a16:	1c02      	adds	r2, r0, #0
    2a18:	701a      	strb	r2, [r3, #0]
    2a1a:	1dbb      	adds	r3, r7, #6
    2a1c:	1c0a      	adds	r2, r1, #0
    2a1e:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
    2a20:	683a      	ldr	r2, [r7, #0]
    2a22:	1dbb      	adds	r3, r7, #6
    2a24:	7819      	ldrb	r1, [r3, #0]
    2a26:	1dfb      	adds	r3, r7, #7
    2a28:	781b      	ldrb	r3, [r3, #0]
    2a2a:	b25b      	sxtb	r3, r3
    2a2c:	0018      	movs	r0, r3
    2a2e:	4b03      	ldr	r3, [pc, #12]	; (2a3c <socket_cb+0x30>)
    2a30:	4798      	blx	r3
}
    2a32:	46c0      	nop			; (mov r8, r8)
    2a34:	46bd      	mov	sp, r7
    2a36:	b002      	add	sp, #8
    2a38:	bd80      	pop	{r7, pc}
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	0001d185 	.word	0x0001d185

00002a40 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    2a40:	b5b0      	push	{r4, r5, r7, lr}
    2a42:	b086      	sub	sp, #24
    2a44:	af04      	add	r7, sp, #16
    2a46:	6078      	str	r0, [r7, #4]
    2a48:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
    2a4a:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
    2a4c:	22ff      	movs	r2, #255	; 0xff
    2a4e:	4013      	ands	r3, r2
    2a50:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
    2a52:	683b      	ldr	r3, [r7, #0]
    2a54:	0a1b      	lsrs	r3, r3, #8
    2a56:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
    2a58:	23ff      	movs	r3, #255	; 0xff
    2a5a:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
    2a5c:	683a      	ldr	r2, [r7, #0]
    2a5e:	0c12      	lsrs	r2, r2, #16
    2a60:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
    2a62:	22ff      	movs	r2, #255	; 0xff
    2a64:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
    2a66:	6839      	ldr	r1, [r7, #0]
    2a68:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
    2a6a:	000d      	movs	r5, r1
    2a6c:	6878      	ldr	r0, [r7, #4]
    2a6e:	4909      	ldr	r1, [pc, #36]	; (2a94 <resolve_cb+0x54>)
    2a70:	9502      	str	r5, [sp, #8]
    2a72:	9201      	str	r2, [sp, #4]
    2a74:	9300      	str	r3, [sp, #0]
    2a76:	0023      	movs	r3, r4
    2a78:	0002      	movs	r2, r0
    2a7a:	2001      	movs	r0, #1
    2a7c:	4c06      	ldr	r4, [pc, #24]	; (2a98 <resolve_cb+0x58>)
    2a7e:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    2a80:	683a      	ldr	r2, [r7, #0]
    2a82:	687b      	ldr	r3, [r7, #4]
    2a84:	0011      	movs	r1, r2
    2a86:	0018      	movs	r0, r3
    2a88:	4b04      	ldr	r3, [pc, #16]	; (2a9c <resolve_cb+0x5c>)
    2a8a:	4798      	blx	r3
}
    2a8c:	46c0      	nop			; (mov r8, r8)
    2a8e:	46bd      	mov	sp, r7
    2a90:	b002      	add	sp, #8
    2a92:	bdb0      	pop	{r4, r5, r7, pc}
    2a94:	000236ac 	.word	0x000236ac
    2a98:	0000a375 	.word	0x0000a375
    2a9c:	0001d2e9 	.word	0x0001d2e9

00002aa0 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    2aa0:	b590      	push	{r4, r7, lr}
    2aa2:	b087      	sub	sp, #28
    2aa4:	af02      	add	r7, sp, #8
    2aa6:	0002      	movs	r2, r0
    2aa8:	6039      	str	r1, [r7, #0]
    2aaa:	1dfb      	adds	r3, r7, #7
    2aac:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
    2aae:	1dfb      	adds	r3, r7, #7
    2ab0:	781b      	ldrb	r3, [r3, #0]
    2ab2:	2b2c      	cmp	r3, #44	; 0x2c
    2ab4:	d002      	beq.n	2abc <wifi_cb+0x1c>
    2ab6:	2b32      	cmp	r3, #50	; 0x32
    2ab8:	d03d      	beq.n	2b36 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
    2aba:	e06f      	b.n	2b9c <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    2abc:	683b      	ldr	r3, [r7, #0]
    2abe:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    2ac0:	68fb      	ldr	r3, [r7, #12]
    2ac2:	781b      	ldrb	r3, [r3, #0]
    2ac4:	2b01      	cmp	r3, #1
    2ac6:	d107      	bne.n	2ad8 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
    2ac8:	4b36      	ldr	r3, [pc, #216]	; (2ba4 <wifi_cb+0x104>)
    2aca:	0019      	movs	r1, r3
    2acc:	2001      	movs	r0, #1
    2ace:	4b36      	ldr	r3, [pc, #216]	; (2ba8 <wifi_cb+0x108>)
    2ad0:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
    2ad2:	4b36      	ldr	r3, [pc, #216]	; (2bac <wifi_cb+0x10c>)
    2ad4:	4798      	blx	r3
            break;
    2ad6:	e05e      	b.n	2b96 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    2ad8:	68fb      	ldr	r3, [r7, #12]
    2ada:	781b      	ldrb	r3, [r3, #0]
    2adc:	2b00      	cmp	r3, #0
    2ade:	d15a      	bne.n	2b96 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    2ae0:	4b33      	ldr	r3, [pc, #204]	; (2bb0 <wifi_cb+0x110>)
    2ae2:	0019      	movs	r1, r3
    2ae4:	2001      	movs	r0, #1
    2ae6:	4b30      	ldr	r3, [pc, #192]	; (2ba8 <wifi_cb+0x108>)
    2ae8:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
    2aea:	2002      	movs	r0, #2
    2aec:	4b31      	ldr	r3, [pc, #196]	; (2bb4 <wifi_cb+0x114>)
    2aee:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
    2af0:	2008      	movs	r0, #8
    2af2:	4b31      	ldr	r3, [pc, #196]	; (2bb8 <wifi_cb+0x118>)
    2af4:	4798      	blx	r3
    2af6:	1e03      	subs	r3, r0, #0
    2af8:	d006      	beq.n	2b08 <wifi_cb+0x68>
                    f_close(&file_object);
    2afa:	4b30      	ldr	r3, [pc, #192]	; (2bbc <wifi_cb+0x11c>)
    2afc:	0018      	movs	r0, r3
    2afe:	4b30      	ldr	r3, [pc, #192]	; (2bc0 <wifi_cb+0x120>)
    2b00:	4798      	blx	r3
                    clear_state(DOWNLOADING);
    2b02:	2008      	movs	r0, #8
    2b04:	4b2b      	ldr	r3, [pc, #172]	; (2bb4 <wifi_cb+0x114>)
    2b06:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
    2b08:	2004      	movs	r0, #4
    2b0a:	4b2b      	ldr	r3, [pc, #172]	; (2bb8 <wifi_cb+0x118>)
    2b0c:	4798      	blx	r3
    2b0e:	1e03      	subs	r3, r0, #0
    2b10:	d002      	beq.n	2b18 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
    2b12:	2004      	movs	r0, #4
    2b14:	4b27      	ldr	r3, [pc, #156]	; (2bb4 <wifi_cb+0x114>)
    2b16:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
    2b18:	4b2a      	ldr	r3, [pc, #168]	; (2bc4 <wifi_cb+0x124>)
    2b1a:	2101      	movs	r1, #1
    2b1c:	0018      	movs	r0, r3
    2b1e:	4b2a      	ldr	r3, [pc, #168]	; (2bc8 <wifi_cb+0x128>)
    2b20:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    2b22:	4a2a      	ldr	r2, [pc, #168]	; (2bcc <wifi_cb+0x12c>)
    2b24:	482a      	ldr	r0, [pc, #168]	; (2bd0 <wifi_cb+0x130>)
    2b26:	23ff      	movs	r3, #255	; 0xff
    2b28:	9300      	str	r3, [sp, #0]
    2b2a:	0013      	movs	r3, r2
    2b2c:	2202      	movs	r2, #2
    2b2e:	210d      	movs	r1, #13
    2b30:	4c28      	ldr	r4, [pc, #160]	; (2bd4 <wifi_cb+0x134>)
    2b32:	47a0      	blx	r4
            break;
    2b34:	e02f      	b.n	2b96 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    2b36:	683b      	ldr	r3, [r7, #0]
    2b38:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    2b3a:	68bb      	ldr	r3, [r7, #8]
    2b3c:	781b      	ldrb	r3, [r3, #0]
    2b3e:	0018      	movs	r0, r3
    2b40:	68bb      	ldr	r3, [r7, #8]
    2b42:	3301      	adds	r3, #1
    2b44:	781b      	ldrb	r3, [r3, #0]
    2b46:	001c      	movs	r4, r3
    2b48:	68bb      	ldr	r3, [r7, #8]
    2b4a:	3302      	adds	r3, #2
    2b4c:	781b      	ldrb	r3, [r3, #0]
    2b4e:	001a      	movs	r2, r3
    2b50:	68bb      	ldr	r3, [r7, #8]
    2b52:	3303      	adds	r3, #3
    2b54:	781b      	ldrb	r3, [r3, #0]
    2b56:	4920      	ldr	r1, [pc, #128]	; (2bd8 <wifi_cb+0x138>)
    2b58:	9301      	str	r3, [sp, #4]
    2b5a:	9200      	str	r2, [sp, #0]
    2b5c:	0023      	movs	r3, r4
    2b5e:	0002      	movs	r2, r0
    2b60:	2001      	movs	r0, #1
    2b62:	4c11      	ldr	r4, [pc, #68]	; (2ba8 <wifi_cb+0x108>)
    2b64:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
    2b66:	2002      	movs	r0, #2
    2b68:	4b1c      	ldr	r3, [pc, #112]	; (2bdc <wifi_cb+0x13c>)
    2b6a:	4798      	blx	r3
            if (do_download_flag == 1) {
    2b6c:	4b1c      	ldr	r3, [pc, #112]	; (2be0 <wifi_cb+0x140>)
    2b6e:	781b      	ldrb	r3, [r3, #0]
    2b70:	2b01      	cmp	r3, #1
    2b72:	d102      	bne.n	2b7a <wifi_cb+0xda>
                start_download();
    2b74:	4b1b      	ldr	r3, [pc, #108]	; (2be4 <wifi_cb+0x144>)
    2b76:	4798      	blx	r3
        } break;
    2b78:	e00f      	b.n	2b9a <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
    2b7a:	4a1b      	ldr	r2, [pc, #108]	; (2be8 <wifi_cb+0x148>)
    2b7c:	4b11      	ldr	r3, [pc, #68]	; (2bc4 <wifi_cb+0x124>)
    2b7e:	0011      	movs	r1, r2
    2b80:	0018      	movs	r0, r3
    2b82:	4b1a      	ldr	r3, [pc, #104]	; (2bec <wifi_cb+0x14c>)
    2b84:	4798      	blx	r3
    2b86:	1e03      	subs	r3, r0, #0
    2b88:	d007      	beq.n	2b9a <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    2b8a:	4b19      	ldr	r3, [pc, #100]	; (2bf0 <wifi_cb+0x150>)
    2b8c:	0019      	movs	r1, r3
    2b8e:	2001      	movs	r0, #1
    2b90:	4b05      	ldr	r3, [pc, #20]	; (2ba8 <wifi_cb+0x108>)
    2b92:	4798      	blx	r3
        } break;
    2b94:	e001      	b.n	2b9a <wifi_cb+0xfa>
            break;
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	e000      	b.n	2b9c <wifi_cb+0xfc>
        } break;
    2b9a:	46c0      	nop			; (mov r8, r8)
    }
}
    2b9c:	46c0      	nop			; (mov r8, r8)
    2b9e:	46bd      	mov	sp, r7
    2ba0:	b005      	add	sp, #20
    2ba2:	bd90      	pop	{r4, r7, pc}
    2ba4:	000236dc 	.word	0x000236dc
    2ba8:	0000a375 	.word	0x0000a375
    2bac:	0000e955 	.word	0x0000e955
    2bb0:	000236fc 	.word	0x000236fc
    2bb4:	000022ad 	.word	0x000022ad
    2bb8:	00002309 	.word	0x00002309
    2bbc:	20000acc 	.word	0x20000acc
    2bc0:	0001a821 	.word	0x0001a821
    2bc4:	20000af8 	.word	0x20000af8
    2bc8:	0001be31 	.word	0x0001be31
    2bcc:	00023720 	.word	0x00023720
    2bd0:	00023734 	.word	0x00023734
    2bd4:	0000e481 	.word	0x0000e481
    2bd8:	00023744 	.word	0x00023744
    2bdc:	000022e1 	.word	0x000022e1
    2be0:	20000898 	.word	0x20000898
    2be4:	00002631 	.word	0x00002631
    2be8:	00023360 	.word	0x00023360
    2bec:	0001bcfd 	.word	0x0001bcfd
    2bf0:	0002376c 	.word	0x0002376c

00002bf4 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
    2bf4:	b590      	push	{r4, r7, lr}
    2bf6:	b083      	sub	sp, #12
    2bf8:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
    2bfa:	4b29      	ldr	r3, [pc, #164]	; (2ca0 <init_storage+0xac>)
    2bfc:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
    2bfe:	4b29      	ldr	r3, [pc, #164]	; (2ca4 <init_storage+0xb0>)
    2c00:	0019      	movs	r1, r3
    2c02:	2001      	movs	r0, #1
    2c04:	4b28      	ldr	r3, [pc, #160]	; (2ca8 <init_storage+0xb4>)
    2c06:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
    2c08:	1dfc      	adds	r4, r7, #7
    2c0a:	2000      	movs	r0, #0
    2c0c:	4b27      	ldr	r3, [pc, #156]	; (2cac <init_storage+0xb8>)
    2c0e:	4798      	blx	r3
    2c10:	0003      	movs	r3, r0
    2c12:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
    2c14:	1dfb      	adds	r3, r7, #7
    2c16:	781b      	ldrb	r3, [r3, #0]
    2c18:	2b01      	cmp	r3, #1
    2c1a:	d110      	bne.n	2c3e <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
    2c1c:	4b24      	ldr	r3, [pc, #144]	; (2cb0 <init_storage+0xbc>)
    2c1e:	0019      	movs	r1, r3
    2c20:	2001      	movs	r0, #1
    2c22:	4b21      	ldr	r3, [pc, #132]	; (2ca8 <init_storage+0xb4>)
    2c24:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
    2c26:	4b23      	ldr	r3, [pc, #140]	; (2cb4 <init_storage+0xc0>)
    2c28:	0019      	movs	r1, r3
    2c2a:	2001      	movs	r0, #1
    2c2c:	4b1e      	ldr	r3, [pc, #120]	; (2ca8 <init_storage+0xb4>)
    2c2e:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    2c30:	46c0      	nop			; (mov r8, r8)
    2c32:	2000      	movs	r0, #0
    2c34:	4b20      	ldr	r3, [pc, #128]	; (2cb8 <init_storage+0xc4>)
    2c36:	4798      	blx	r3
    2c38:	0003      	movs	r3, r0
    2c3a:	2b02      	cmp	r3, #2
    2c3c:	d1f9      	bne.n	2c32 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
    2c3e:	1dfb      	adds	r3, r7, #7
    2c40:	781b      	ldrb	r3, [r3, #0]
    2c42:	2b00      	cmp	r3, #0
    2c44:	d1e0      	bne.n	2c08 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
    2c46:	4b1d      	ldr	r3, [pc, #116]	; (2cbc <init_storage+0xc8>)
    2c48:	0019      	movs	r1, r3
    2c4a:	2001      	movs	r0, #1
    2c4c:	4b16      	ldr	r3, [pc, #88]	; (2ca8 <init_storage+0xb4>)
    2c4e:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
    2c50:	238c      	movs	r3, #140	; 0x8c
    2c52:	009a      	lsls	r2, r3, #2
    2c54:	4b1a      	ldr	r3, [pc, #104]	; (2cc0 <init_storage+0xcc>)
    2c56:	2100      	movs	r1, #0
    2c58:	0018      	movs	r0, r3
    2c5a:	4b1a      	ldr	r3, [pc, #104]	; (2cc4 <init_storage+0xd0>)
    2c5c:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
    2c5e:	1dbc      	adds	r4, r7, #6
    2c60:	4b17      	ldr	r3, [pc, #92]	; (2cc0 <init_storage+0xcc>)
    2c62:	0019      	movs	r1, r3
    2c64:	2000      	movs	r0, #0
    2c66:	4b18      	ldr	r3, [pc, #96]	; (2cc8 <init_storage+0xd4>)
    2c68:	4798      	blx	r3
    2c6a:	0003      	movs	r3, r0
    2c6c:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
    2c6e:	1dbb      	adds	r3, r7, #6
    2c70:	781b      	ldrb	r3, [r3, #0]
    2c72:	2b0b      	cmp	r3, #11
    2c74:	d107      	bne.n	2c86 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
    2c76:	1dbb      	adds	r3, r7, #6
    2c78:	781a      	ldrb	r2, [r3, #0]
    2c7a:	4b14      	ldr	r3, [pc, #80]	; (2ccc <init_storage+0xd8>)
    2c7c:	0019      	movs	r1, r3
    2c7e:	2001      	movs	r0, #1
    2c80:	4b09      	ldr	r3, [pc, #36]	; (2ca8 <init_storage+0xb4>)
    2c82:	4798      	blx	r3
            return;
    2c84:	e008      	b.n	2c98 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
    2c86:	4b12      	ldr	r3, [pc, #72]	; (2cd0 <init_storage+0xdc>)
    2c88:	0019      	movs	r1, r3
    2c8a:	2001      	movs	r0, #1
    2c8c:	4b06      	ldr	r3, [pc, #24]	; (2ca8 <init_storage+0xb4>)
    2c8e:	4798      	blx	r3
        add_state(STORAGE_READY);
    2c90:	2001      	movs	r0, #1
    2c92:	4b10      	ldr	r3, [pc, #64]	; (2cd4 <init_storage+0xe0>)
    2c94:	4798      	blx	r3
        return;
    2c96:	46c0      	nop			; (mov r8, r8)
    }
}
    2c98:	46bd      	mov	sp, r7
    2c9a:	b003      	add	sp, #12
    2c9c:	bd90      	pop	{r4, r7, pc}
    2c9e:	46c0      	nop			; (mov r8, r8)
    2ca0:	0000b18d 	.word	0x0000b18d
    2ca4:	00023790 	.word	0x00023790
    2ca8:	0000a375 	.word	0x0000a375
    2cac:	0000b669 	.word	0x0000b669
    2cb0:	000237c8 	.word	0x000237c8
    2cb4:	000237f0 	.word	0x000237f0
    2cb8:	0000b1dd 	.word	0x0000b1dd
    2cbc:	00023824 	.word	0x00023824
    2cc0:	2000089c 	.word	0x2000089c
    2cc4:	00020d8b 	.word	0x00020d8b
    2cc8:	00019dc9 	.word	0x00019dc9
    2ccc:	00023848 	.word	0x00023848
    2cd0:	00023878 	.word	0x00023878
    2cd4:	000022e1 	.word	0x000022e1

00002cd8 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
    2cd8:	b580      	push	{r7, lr}
    2cda:	b082      	sub	sp, #8
    2cdc:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
    2cde:	1d3b      	adds	r3, r7, #4
    2ce0:	0018      	movs	r0, r3
    2ce2:	4b08      	ldr	r3, [pc, #32]	; (2d04 <configure_timer+0x2c>)
    2ce4:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
    2ce6:	1d3a      	adds	r2, r7, #4
    2ce8:	4b07      	ldr	r3, [pc, #28]	; (2d08 <configure_timer+0x30>)
    2cea:	0011      	movs	r1, r2
    2cec:	0018      	movs	r0, r3
    2cee:	4b07      	ldr	r3, [pc, #28]	; (2d0c <configure_timer+0x34>)
    2cf0:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
    2cf2:	4b05      	ldr	r3, [pc, #20]	; (2d08 <configure_timer+0x30>)
    2cf4:	0018      	movs	r0, r3
    2cf6:	4b06      	ldr	r3, [pc, #24]	; (2d10 <configure_timer+0x38>)
    2cf8:	4798      	blx	r3
}
    2cfa:	46c0      	nop			; (mov r8, r8)
    2cfc:	46bd      	mov	sp, r7
    2cfe:	b002      	add	sp, #8
    2d00:	bd80      	pop	{r7, pc}
    2d02:	46c0      	nop			; (mov r8, r8)
    2d04:	0001e919 	.word	0x0001e919
    2d08:	200046b4 	.word	0x200046b4
    2d0c:	0001e93d 	.word	0x0001e93d
    2d10:	0001ea29 	.word	0x0001ea29

00002d14 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
    2d14:	b580      	push	{r7, lr}
    2d16:	b088      	sub	sp, #32
    2d18:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
    2d1a:	003b      	movs	r3, r7
    2d1c:	0018      	movs	r0, r3
    2d1e:	4b16      	ldr	r3, [pc, #88]	; (2d78 <configure_http_client+0x64>)
    2d20:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    2d22:	003b      	movs	r3, r7
    2d24:	2280      	movs	r2, #128	; 0x80
    2d26:	0092      	lsls	r2, r2, #2
    2d28:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
    2d2a:	003b      	movs	r3, r7
    2d2c:	4a13      	ldr	r2, [pc, #76]	; (2d7c <configure_http_client+0x68>)
    2d2e:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
    2d30:	003b      	movs	r3, r7
    2d32:	22bc      	movs	r2, #188	; 0xbc
    2d34:	32ff      	adds	r2, #255	; 0xff
    2d36:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
    2d38:	003b      	movs	r3, r7
    2d3a:	2201      	movs	r2, #1
    2d3c:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
    2d3e:	003a      	movs	r2, r7
    2d40:	4b0f      	ldr	r3, [pc, #60]	; (2d80 <configure_http_client+0x6c>)
    2d42:	0011      	movs	r1, r2
    2d44:	0018      	movs	r0, r3
    2d46:	4b0f      	ldr	r3, [pc, #60]	; (2d84 <configure_http_client+0x70>)
    2d48:	4798      	blx	r3
    2d4a:	0003      	movs	r3, r0
    2d4c:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
    2d4e:	69fb      	ldr	r3, [r7, #28]
    2d50:	2b00      	cmp	r3, #0
    2d52:	da06      	bge.n	2d62 <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    2d54:	69fa      	ldr	r2, [r7, #28]
    2d56:	4b0c      	ldr	r3, [pc, #48]	; (2d88 <configure_http_client+0x74>)
    2d58:	0019      	movs	r1, r3
    2d5a:	2001      	movs	r0, #1
    2d5c:	4b0b      	ldr	r3, [pc, #44]	; (2d8c <configure_http_client+0x78>)
    2d5e:	4798      	blx	r3
        while (1) {
    2d60:	e7fe      	b.n	2d60 <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
    2d62:	4a0b      	ldr	r2, [pc, #44]	; (2d90 <configure_http_client+0x7c>)
    2d64:	4b06      	ldr	r3, [pc, #24]	; (2d80 <configure_http_client+0x6c>)
    2d66:	0011      	movs	r1, r2
    2d68:	0018      	movs	r0, r3
    2d6a:	4b0a      	ldr	r3, [pc, #40]	; (2d94 <configure_http_client+0x80>)
    2d6c:	4798      	blx	r3
}
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	46bd      	mov	sp, r7
    2d72:	b008      	add	sp, #32
    2d74:	bd80      	pop	{r7, pc}
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	0001cfad 	.word	0x0001cfad
    2d7c:	200046b4 	.word	0x200046b4
    2d80:	2000470c 	.word	0x2000470c
    2d84:	0001cff9 	.word	0x0001cff9
    2d88:	0002389c 	.word	0x0002389c
    2d8c:	0000a375 	.word	0x0000a375
    2d90:	000028c5 	.word	0x000028c5
    2d94:	0001d0e5 	.word	0x0001d0e5

00002d98 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    2d98:	b580      	push	{r7, lr}
    2d9a:	b082      	sub	sp, #8
    2d9c:	af00      	add	r7, sp, #0
    2d9e:	603a      	str	r2, [r7, #0]
    2da0:	1dfb      	adds	r3, r7, #7
    2da2:	1c02      	adds	r2, r0, #0
    2da4:	701a      	strb	r2, [r3, #0]
    2da6:	1dbb      	adds	r3, r7, #6
    2da8:	1c0a      	adds	r2, r1, #0
    2daa:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
    2dac:	683a      	ldr	r2, [r7, #0]
    2dae:	1dbb      	adds	r3, r7, #6
    2db0:	7819      	ldrb	r1, [r3, #0]
    2db2:	1dfb      	adds	r3, r7, #7
    2db4:	781b      	ldrb	r3, [r3, #0]
    2db6:	b25b      	sxtb	r3, r3
    2db8:	0018      	movs	r0, r3
    2dba:	4b03      	ldr	r3, [pc, #12]	; (2dc8 <socket_event_handler+0x30>)
    2dbc:	4798      	blx	r3
}
    2dbe:	46c0      	nop			; (mov r8, r8)
    2dc0:	46bd      	mov	sp, r7
    2dc2:	b002      	add	sp, #8
    2dc4:	bd80      	pop	{r7, pc}
    2dc6:	46c0      	nop			; (mov r8, r8)
    2dc8:	0001bca5 	.word	0x0001bca5

00002dcc <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    2dcc:	b580      	push	{r7, lr}
    2dce:	b082      	sub	sp, #8
    2dd0:	af00      	add	r7, sp, #0
    2dd2:	6078      	str	r0, [r7, #4]
    2dd4:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
    2dd6:	683a      	ldr	r2, [r7, #0]
    2dd8:	687b      	ldr	r3, [r7, #4]
    2dda:	0011      	movs	r1, r2
    2ddc:	0018      	movs	r0, r3
    2dde:	4b03      	ldr	r3, [pc, #12]	; (2dec <socket_resolve_handler+0x20>)
    2de0:	4798      	blx	r3
}
    2de2:	46c0      	nop			; (mov r8, r8)
    2de4:	46bd      	mov	sp, r7
    2de6:	b002      	add	sp, #8
    2de8:	bd80      	pop	{r7, pc}
    2dea:	46c0      	nop			; (mov r8, r8)
    2dec:	0001bcd9 	.word	0x0001bcd9

00002df0 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
    2df0:	b590      	push	{r4, r7, lr}
    2df2:	b089      	sub	sp, #36	; 0x24
    2df4:	af02      	add	r7, sp, #8
    2df6:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
    2df8:	2310      	movs	r3, #16
    2dfa:	18fb      	adds	r3, r7, r3
    2dfc:	2200      	movs	r2, #0
    2dfe:	701a      	strb	r2, [r3, #0]
    2e00:	2310      	movs	r3, #16
    2e02:	18fb      	adds	r3, r7, r3
    2e04:	2200      	movs	r2, #0
    2e06:	705a      	strb	r2, [r3, #1]
    2e08:	2310      	movs	r3, #16
    2e0a:	18fb      	adds	r3, r7, r3
    2e0c:	2200      	movs	r2, #0
    2e0e:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    2e10:	687b      	ldr	r3, [r7, #4]
    2e12:	685b      	ldr	r3, [r3, #4]
    2e14:	685a      	ldr	r2, [r3, #4]
    2e16:	687b      	ldr	r3, [r7, #4]
    2e18:	685b      	ldr	r3, [r3, #4]
    2e1a:	689b      	ldr	r3, [r3, #8]
    2e1c:	4924      	ldr	r1, [pc, #144]	; (2eb0 <SubscribeHandlerLedTopic+0xc0>)
    2e1e:	2001      	movs	r0, #1
    2e20:	4c24      	ldr	r4, [pc, #144]	; (2eb4 <SubscribeHandlerLedTopic+0xc4>)
    2e22:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
    2e24:	687b      	ldr	r3, [r7, #4]
    2e26:	681b      	ldr	r3, [r3, #0]
    2e28:	689b      	ldr	r3, [r3, #8]
    2e2a:	4923      	ldr	r1, [pc, #140]	; (2eb8 <SubscribeHandlerLedTopic+0xc8>)
    2e2c:	2204      	movs	r2, #4
    2e2e:	0018      	movs	r0, r3
    2e30:	4b22      	ldr	r3, [pc, #136]	; (2ebc <SubscribeHandlerLedTopic+0xcc>)
    2e32:	4798      	blx	r3
    2e34:	1e03      	subs	r3, r0, #0
    2e36:	d137      	bne.n	2ea8 <SubscribeHandlerLedTopic+0xb8>
        char *p = (char *)&msgData->message->payload[4];
    2e38:	687b      	ldr	r3, [r7, #4]
    2e3a:	681b      	ldr	r3, [r3, #0]
    2e3c:	689b      	ldr	r3, [r3, #8]
    2e3e:	3304      	adds	r3, #4
    2e40:	60fb      	str	r3, [r7, #12]
        int nb = 0;
    2e42:	2300      	movs	r3, #0
    2e44:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
    2e46:	e015      	b.n	2e74 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
    2e48:	697c      	ldr	r4, [r7, #20]
    2e4a:	1c63      	adds	r3, r4, #1
    2e4c:	617b      	str	r3, [r7, #20]
    2e4e:	68fb      	ldr	r3, [r7, #12]
    2e50:	220c      	movs	r2, #12
    2e52:	18b9      	adds	r1, r7, r2
    2e54:	220a      	movs	r2, #10
    2e56:	0018      	movs	r0, r3
    2e58:	4b19      	ldr	r3, [pc, #100]	; (2ec0 <SubscribeHandlerLedTopic+0xd0>)
    2e5a:	4798      	blx	r3
    2e5c:	0003      	movs	r3, r0
    2e5e:	b2da      	uxtb	r2, r3
    2e60:	2310      	movs	r3, #16
    2e62:	18fb      	adds	r3, r7, r3
    2e64:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
    2e66:	68fb      	ldr	r3, [r7, #12]
    2e68:	781b      	ldrb	r3, [r3, #0]
    2e6a:	2b2c      	cmp	r3, #44	; 0x2c
    2e6c:	d10a      	bne.n	2e84 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
    2e6e:	68fb      	ldr	r3, [r7, #12]
    2e70:	3301      	adds	r3, #1
    2e72:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
    2e74:	697b      	ldr	r3, [r7, #20]
    2e76:	2b02      	cmp	r3, #2
    2e78:	dc05      	bgt.n	2e86 <SubscribeHandlerLedTopic+0x96>
    2e7a:	68fb      	ldr	r3, [r7, #12]
    2e7c:	781b      	ldrb	r3, [r3, #0]
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d1e2      	bne.n	2e48 <SubscribeHandlerLedTopic+0x58>
    2e82:	e000      	b.n	2e86 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
    2e84:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
    2e86:	2310      	movs	r3, #16
    2e88:	18fb      	adds	r3, r7, r3
    2e8a:	781b      	ldrb	r3, [r3, #0]
    2e8c:	001a      	movs	r2, r3
    2e8e:	2310      	movs	r3, #16
    2e90:	18fb      	adds	r3, r7, r3
    2e92:	785b      	ldrb	r3, [r3, #1]
    2e94:	0018      	movs	r0, r3
    2e96:	2310      	movs	r3, #16
    2e98:	18fb      	adds	r3, r7, r3
    2e9a:	789b      	ldrb	r3, [r3, #2]
    2e9c:	4909      	ldr	r1, [pc, #36]	; (2ec4 <SubscribeHandlerLedTopic+0xd4>)
    2e9e:	9300      	str	r3, [sp, #0]
    2ea0:	0003      	movs	r3, r0
    2ea2:	2001      	movs	r0, #1
    2ea4:	4c03      	ldr	r4, [pc, #12]	; (2eb4 <SubscribeHandlerLedTopic+0xc4>)
    2ea6:	47a0      	blx	r4
    }
}
    2ea8:	46c0      	nop			; (mov r8, r8)
    2eaa:	46bd      	mov	sp, r7
    2eac:	b007      	add	sp, #28
    2eae:	bd90      	pop	{r4, r7, pc}
    2eb0:	000238e4 	.word	0x000238e4
    2eb4:	0000a375 	.word	0x0000a375
    2eb8:	000238ec 	.word	0x000238ec
    2ebc:	00021151 	.word	0x00021151
    2ec0:	000212fd 	.word	0x000212fd
    2ec4:	000238f4 	.word	0x000238f4

00002ec8 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
    2ec8:	b590      	push	{r4, r7, lr}
    2eca:	b08b      	sub	sp, #44	; 0x2c
    2ecc:	af00      	add	r7, sp, #0
    2ece:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
    2ed0:	230c      	movs	r3, #12
    2ed2:	18fb      	adds	r3, r7, r3
    2ed4:	2214      	movs	r2, #20
    2ed6:	21ff      	movs	r1, #255	; 0xff
    2ed8:	0018      	movs	r0, r3
    2eda:	4b41      	ldr	r3, [pc, #260]	; (2fe0 <SubscribeHandlerGameTopic+0x118>)
    2edc:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
    2ede:	687b      	ldr	r3, [r7, #4]
    2ee0:	681b      	ldr	r3, [r3, #0]
    2ee2:	689b      	ldr	r3, [r3, #8]
    2ee4:	493f      	ldr	r1, [pc, #252]	; (2fe4 <SubscribeHandlerGameTopic+0x11c>)
    2ee6:	2209      	movs	r2, #9
    2ee8:	0018      	movs	r0, r3
    2eea:	4b3f      	ldr	r3, [pc, #252]	; (2fe8 <SubscribeHandlerGameTopic+0x120>)
    2eec:	4798      	blx	r3
    2eee:	1e03      	subs	r3, r0, #0
    2ef0:	d159      	bne.n	2fa6 <SubscribeHandlerGameTopic+0xde>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
    2ef2:	4b3e      	ldr	r3, [pc, #248]	; (2fec <SubscribeHandlerGameTopic+0x124>)
    2ef4:	0019      	movs	r1, r3
    2ef6:	2001      	movs	r0, #1
    2ef8:	4b3d      	ldr	r3, [pc, #244]	; (2ff0 <SubscribeHandlerGameTopic+0x128>)
    2efa:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    2efc:	687b      	ldr	r3, [r7, #4]
    2efe:	685b      	ldr	r3, [r3, #4]
    2f00:	685a      	ldr	r2, [r3, #4]
    2f02:	687b      	ldr	r3, [r7, #4]
    2f04:	685b      	ldr	r3, [r3, #4]
    2f06:	689b      	ldr	r3, [r3, #8]
    2f08:	493a      	ldr	r1, [pc, #232]	; (2ff4 <SubscribeHandlerGameTopic+0x12c>)
    2f0a:	2001      	movs	r0, #1
    2f0c:	4c38      	ldr	r4, [pc, #224]	; (2ff0 <SubscribeHandlerGameTopic+0x128>)
    2f0e:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    2f10:	687b      	ldr	r3, [r7, #4]
    2f12:	681b      	ldr	r3, [r3, #0]
    2f14:	68da      	ldr	r2, [r3, #12]
    2f16:	687b      	ldr	r3, [r7, #4]
    2f18:	681b      	ldr	r3, [r3, #0]
    2f1a:	689b      	ldr	r3, [r3, #8]
    2f1c:	4936      	ldr	r1, [pc, #216]	; (2ff8 <SubscribeHandlerGameTopic+0x130>)
    2f1e:	2001      	movs	r0, #1
    2f20:	4c33      	ldr	r4, [pc, #204]	; (2ff0 <SubscribeHandlerGameTopic+0x128>)
    2f22:	47a0      	blx	r4

        int nb = 0;
    2f24:	2300      	movs	r3, #0
    2f26:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
    2f28:	687b      	ldr	r3, [r7, #4]
    2f2a:	681b      	ldr	r3, [r3, #0]
    2f2c:	689b      	ldr	r3, [r3, #8]
    2f2e:	3309      	adds	r3, #9
    2f30:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
    2f32:	e015      	b.n	2f60 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
    2f34:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    2f36:	1c63      	adds	r3, r4, #1
    2f38:	627b      	str	r3, [r7, #36]	; 0x24
    2f3a:	68bb      	ldr	r3, [r7, #8]
    2f3c:	2208      	movs	r2, #8
    2f3e:	18b9      	adds	r1, r7, r2
    2f40:	220a      	movs	r2, #10
    2f42:	0018      	movs	r0, r3
    2f44:	4b2d      	ldr	r3, [pc, #180]	; (2ffc <SubscribeHandlerGameTopic+0x134>)
    2f46:	4798      	blx	r3
    2f48:	0003      	movs	r3, r0
    2f4a:	b2da      	uxtb	r2, r3
    2f4c:	230c      	movs	r3, #12
    2f4e:	18fb      	adds	r3, r7, r3
    2f50:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
    2f52:	68bb      	ldr	r3, [r7, #8]
    2f54:	781b      	ldrb	r3, [r3, #0]
    2f56:	2b2c      	cmp	r3, #44	; 0x2c
    2f58:	d10a      	bne.n	2f70 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
    2f5a:	68bb      	ldr	r3, [r7, #8]
    2f5c:	3301      	adds	r3, #1
    2f5e:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
    2f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f62:	2b13      	cmp	r3, #19
    2f64:	dc05      	bgt.n	2f72 <SubscribeHandlerGameTopic+0xaa>
    2f66:	68bb      	ldr	r3, [r7, #8]
    2f68:	781b      	ldrb	r3, [r3, #0]
    2f6a:	2b00      	cmp	r3, #0
    2f6c:	d1e2      	bne.n	2f34 <SubscribeHandlerGameTopic+0x6c>
    2f6e:	e000      	b.n	2f72 <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
    2f70:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
    2f72:	4b23      	ldr	r3, [pc, #140]	; (3000 <SubscribeHandlerGameTopic+0x138>)
    2f74:	0019      	movs	r1, r3
    2f76:	2001      	movs	r0, #1
    2f78:	4b1d      	ldr	r3, [pc, #116]	; (2ff0 <SubscribeHandlerGameTopic+0x128>)
    2f7a:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
    2f7c:	2300      	movs	r3, #0
    2f7e:	623b      	str	r3, [r7, #32]
    2f80:	e00d      	b.n	2f9e <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
    2f82:	230c      	movs	r3, #12
    2f84:	18fa      	adds	r2, r7, r3
    2f86:	6a3b      	ldr	r3, [r7, #32]
    2f88:	18d3      	adds	r3, r2, r3
    2f8a:	781b      	ldrb	r3, [r3, #0]
    2f8c:	001a      	movs	r2, r3
    2f8e:	4b1d      	ldr	r3, [pc, #116]	; (3004 <SubscribeHandlerGameTopic+0x13c>)
    2f90:	0019      	movs	r1, r3
    2f92:	2001      	movs	r0, #1
    2f94:	4b16      	ldr	r3, [pc, #88]	; (2ff0 <SubscribeHandlerGameTopic+0x128>)
    2f96:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
    2f98:	6a3b      	ldr	r3, [r7, #32]
    2f9a:	3301      	adds	r3, #1
    2f9c:	623b      	str	r3, [r7, #32]
    2f9e:	6a3b      	ldr	r3, [r7, #32]
    2fa0:	2b13      	cmp	r3, #19
    2fa2:	ddee      	ble.n	2f82 <SubscribeHandlerGameTopic+0xba>
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
    2fa4:	e018      	b.n	2fd8 <SubscribeHandlerGameTopic+0x110>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
    2fa6:	4b18      	ldr	r3, [pc, #96]	; (3008 <SubscribeHandlerGameTopic+0x140>)
    2fa8:	0019      	movs	r1, r3
    2faa:	2001      	movs	r0, #1
    2fac:	4b10      	ldr	r3, [pc, #64]	; (2ff0 <SubscribeHandlerGameTopic+0x128>)
    2fae:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    2fb0:	687b      	ldr	r3, [r7, #4]
    2fb2:	685b      	ldr	r3, [r3, #4]
    2fb4:	685a      	ldr	r2, [r3, #4]
    2fb6:	687b      	ldr	r3, [r7, #4]
    2fb8:	685b      	ldr	r3, [r3, #4]
    2fba:	689b      	ldr	r3, [r3, #8]
    2fbc:	490d      	ldr	r1, [pc, #52]	; (2ff4 <SubscribeHandlerGameTopic+0x12c>)
    2fbe:	2001      	movs	r0, #1
    2fc0:	4c0b      	ldr	r4, [pc, #44]	; (2ff0 <SubscribeHandlerGameTopic+0x128>)
    2fc2:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    2fc4:	687b      	ldr	r3, [r7, #4]
    2fc6:	681b      	ldr	r3, [r3, #0]
    2fc8:	68da      	ldr	r2, [r3, #12]
    2fca:	687b      	ldr	r3, [r7, #4]
    2fcc:	681b      	ldr	r3, [r3, #0]
    2fce:	689b      	ldr	r3, [r3, #8]
    2fd0:	4909      	ldr	r1, [pc, #36]	; (2ff8 <SubscribeHandlerGameTopic+0x130>)
    2fd2:	2001      	movs	r0, #1
    2fd4:	4c06      	ldr	r4, [pc, #24]	; (2ff0 <SubscribeHandlerGameTopic+0x128>)
    2fd6:	47a0      	blx	r4
}
    2fd8:	46c0      	nop			; (mov r8, r8)
    2fda:	46bd      	mov	sp, r7
    2fdc:	b00b      	add	sp, #44	; 0x2c
    2fde:	bd90      	pop	{r4, r7, pc}
    2fe0:	00020d8b 	.word	0x00020d8b
    2fe4:	00023908 	.word	0x00023908
    2fe8:	00021151 	.word	0x00021151
    2fec:	00023914 	.word	0x00023914
    2ff0:	0000a375 	.word	0x0000a375
    2ff4:	000238e4 	.word	0x000238e4
    2ff8:	00023930 	.word	0x00023930
    2ffc:	000212fd 	.word	0x000212fd
    3000:	00023938 	.word	0x00023938
    3004:	0002394c 	.word	0x0002394c
    3008:	00023950 	.word	0x00023950

0000300c <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
    300c:	b590      	push	{r4, r7, lr}
    300e:	b083      	sub	sp, #12
    3010:	af00      	add	r7, sp, #0
    3012:	6078      	str	r0, [r7, #4]
    LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
    3014:	4b09      	ldr	r3, [pc, #36]	; (303c <SubscribeHandlerImuTopic+0x30>)
    3016:	0019      	movs	r1, r3
    3018:	2001      	movs	r0, #1
    301a:	4b09      	ldr	r3, [pc, #36]	; (3040 <SubscribeHandlerImuTopic+0x34>)
    301c:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    301e:	687b      	ldr	r3, [r7, #4]
    3020:	685b      	ldr	r3, [r3, #4]
    3022:	685a      	ldr	r2, [r3, #4]
    3024:	687b      	ldr	r3, [r7, #4]
    3026:	685b      	ldr	r3, [r3, #4]
    3028:	689b      	ldr	r3, [r3, #8]
    302a:	4906      	ldr	r1, [pc, #24]	; (3044 <SubscribeHandlerImuTopic+0x38>)
    302c:	2001      	movs	r0, #1
    302e:	4c04      	ldr	r4, [pc, #16]	; (3040 <SubscribeHandlerImuTopic+0x34>)
    3030:	47a0      	blx	r4
}
    3032:	46c0      	nop			; (mov r8, r8)
    3034:	46bd      	mov	sp, r7
    3036:	b003      	add	sp, #12
    3038:	bd90      	pop	{r4, r7, pc}
    303a:	46c0      	nop			; (mov r8, r8)
    303c:	00023980 	.word	0x00023980
    3040:	0000a375 	.word	0x0000a375
    3044:	000238e4 	.word	0x000238e4

00003048 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    3048:	b590      	push	{r4, r7, lr}
    304a:	b08b      	sub	sp, #44	; 0x2c
    304c:	af06      	add	r7, sp, #24
    304e:	60f8      	str	r0, [r7, #12]
    3050:	60b9      	str	r1, [r7, #8]
    3052:	607a      	str	r2, [r7, #4]
    switch (type) {
    3054:	68bb      	ldr	r3, [r7, #8]
    3056:	2b01      	cmp	r3, #1
    3058:	d03b      	beq.n	30d2 <mqtt_callback+0x8a>
    305a:	2b05      	cmp	r3, #5
    305c:	d05e      	beq.n	311c <mqtt_callback+0xd4>
    305e:	2b00      	cmp	r3, #0
    3060:	d000      	beq.n	3064 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
    3062:	e061      	b.n	3128 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
    3064:	687b      	ldr	r3, [r7, #4]
    3066:	681b      	ldr	r3, [r3, #0]
    3068:	2b00      	cmp	r3, #0
    306a:	db25      	blt.n	30b8 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
    306c:	4b30      	ldr	r3, [pc, #192]	; (3130 <mqtt_callback+0xe8>)
    306e:	0019      	movs	r1, r3
    3070:	2001      	movs	r0, #1
    3072:	4b30      	ldr	r3, [pc, #192]	; (3134 <mqtt_callback+0xec>)
    3074:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
    3076:	4930      	ldr	r1, [pc, #192]	; (3138 <mqtt_callback+0xf0>)
    3078:	4a30      	ldr	r2, [pc, #192]	; (313c <mqtt_callback+0xf4>)
    307a:	68f8      	ldr	r0, [r7, #12]
    307c:	2300      	movs	r3, #0
    307e:	9305      	str	r3, [sp, #20]
    3080:	2300      	movs	r3, #0
    3082:	9304      	str	r3, [sp, #16]
    3084:	2300      	movs	r3, #0
    3086:	9303      	str	r3, [sp, #12]
    3088:	2300      	movs	r3, #0
    308a:	9302      	str	r3, [sp, #8]
    308c:	2300      	movs	r3, #0
    308e:	9301      	str	r3, [sp, #4]
    3090:	4b2a      	ldr	r3, [pc, #168]	; (313c <mqtt_callback+0xf4>)
    3092:	9300      	str	r3, [sp, #0]
    3094:	000b      	movs	r3, r1
    3096:	2101      	movs	r1, #1
    3098:	4c29      	ldr	r4, [pc, #164]	; (3140 <mqtt_callback+0xf8>)
    309a:	47a0      	blx	r4
    309c:	1e03      	subs	r3, r0, #0
    309e:	d005      	beq.n	30ac <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
    30a0:	4b28      	ldr	r3, [pc, #160]	; (3144 <mqtt_callback+0xfc>)
    30a2:	0019      	movs	r1, r3
    30a4:	2001      	movs	r0, #1
    30a6:	4b23      	ldr	r3, [pc, #140]	; (3134 <mqtt_callback+0xec>)
    30a8:	4798      	blx	r3
        } break;
    30aa:	e03d      	b.n	3128 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
    30ac:	4b26      	ldr	r3, [pc, #152]	; (3148 <mqtt_callback+0x100>)
    30ae:	0019      	movs	r1, r3
    30b0:	2001      	movs	r0, #1
    30b2:	4b20      	ldr	r3, [pc, #128]	; (3134 <mqtt_callback+0xec>)
    30b4:	4798      	blx	r3
        } break;
    30b6:	e037      	b.n	3128 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    30b8:	4a24      	ldr	r2, [pc, #144]	; (314c <mqtt_callback+0x104>)
    30ba:	4b25      	ldr	r3, [pc, #148]	; (3150 <mqtt_callback+0x108>)
    30bc:	0019      	movs	r1, r3
    30be:	2001      	movs	r0, #1
    30c0:	4b1c      	ldr	r3, [pc, #112]	; (3134 <mqtt_callback+0xec>)
    30c2:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    30c4:	4a21      	ldr	r2, [pc, #132]	; (314c <mqtt_callback+0x104>)
    30c6:	68fb      	ldr	r3, [r7, #12]
    30c8:	0011      	movs	r1, r2
    30ca:	0018      	movs	r0, r3
    30cc:	4b21      	ldr	r3, [pc, #132]	; (3154 <mqtt_callback+0x10c>)
    30ce:	4798      	blx	r3
        } break;
    30d0:	e02a      	b.n	3128 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    30d2:	687b      	ldr	r3, [r7, #4]
    30d4:	781b      	ldrb	r3, [r3, #0]
    30d6:	2b00      	cmp	r3, #0
    30d8:	d117      	bne.n	310a <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
    30da:	4b1f      	ldr	r3, [pc, #124]	; (3158 <mqtt_callback+0x110>)
    30dc:	491f      	ldr	r1, [pc, #124]	; (315c <mqtt_callback+0x114>)
    30de:	68f8      	ldr	r0, [r7, #12]
    30e0:	2202      	movs	r2, #2
    30e2:	4c1f      	ldr	r4, [pc, #124]	; (3160 <mqtt_callback+0x118>)
    30e4:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
    30e6:	4b1f      	ldr	r3, [pc, #124]	; (3164 <mqtt_callback+0x11c>)
    30e8:	491f      	ldr	r1, [pc, #124]	; (3168 <mqtt_callback+0x120>)
    30ea:	68f8      	ldr	r0, [r7, #12]
    30ec:	2202      	movs	r2, #2
    30ee:	4c1c      	ldr	r4, [pc, #112]	; (3160 <mqtt_callback+0x118>)
    30f0:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
    30f2:	4b1e      	ldr	r3, [pc, #120]	; (316c <mqtt_callback+0x124>)
    30f4:	491e      	ldr	r1, [pc, #120]	; (3170 <mqtt_callback+0x128>)
    30f6:	68f8      	ldr	r0, [r7, #12]
    30f8:	2202      	movs	r2, #2
    30fa:	4c19      	ldr	r4, [pc, #100]	; (3160 <mqtt_callback+0x118>)
    30fc:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
    30fe:	4b1d      	ldr	r3, [pc, #116]	; (3174 <mqtt_callback+0x12c>)
    3100:	0019      	movs	r1, r3
    3102:	2001      	movs	r0, #1
    3104:	4b0b      	ldr	r3, [pc, #44]	; (3134 <mqtt_callback+0xec>)
    3106:	4798      	blx	r3
            break;
    3108:	e00e      	b.n	3128 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
    310a:	687b      	ldr	r3, [r7, #4]
    310c:	781b      	ldrb	r3, [r3, #0]
    310e:	001a      	movs	r2, r3
    3110:	4b19      	ldr	r3, [pc, #100]	; (3178 <mqtt_callback+0x130>)
    3112:	0019      	movs	r1, r3
    3114:	2001      	movs	r0, #1
    3116:	4b07      	ldr	r3, [pc, #28]	; (3134 <mqtt_callback+0xec>)
    3118:	4798      	blx	r3
            break;
    311a:	e005      	b.n	3128 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
    311c:	4b17      	ldr	r3, [pc, #92]	; (317c <mqtt_callback+0x134>)
    311e:	0019      	movs	r1, r3
    3120:	2001      	movs	r0, #1
    3122:	4b04      	ldr	r3, [pc, #16]	; (3134 <mqtt_callback+0xec>)
    3124:	4798      	blx	r3
            break;
    3126:	46c0      	nop			; (mov r8, r8)
}
    3128:	46c0      	nop			; (mov r8, r8)
    312a:	46bd      	mov	sp, r7
    312c:	b005      	add	sp, #20
    312e:	bd90      	pop	{r4, r7, pc}
    3130:	000239e4 	.word	0x000239e4
    3134:	0000a375 	.word	0x0000a375
    3138:	00023a00 	.word	0x00023a00
    313c:	00023a10 	.word	0x00023a10
    3140:	0001bd45 	.word	0x0001bd45
    3144:	00023a1c 	.word	0x00023a1c
    3148:	00023a44 	.word	0x00023a44
    314c:	00023360 	.word	0x00023360
    3150:	00023a60 	.word	0x00023a60
    3154:	0001bcfd 	.word	0x0001bcfd
    3158:	00002ec9 	.word	0x00002ec9
    315c:	00023a98 	.word	0x00023a98
    3160:	0001bee5 	.word	0x0001bee5
    3164:	00002df1 	.word	0x00002df1
    3168:	000239c0 	.word	0x000239c0
    316c:	0000300d 	.word	0x0000300d
    3170:	00023aac 	.word	0x00023aac
    3174:	00023ac0 	.word	0x00023ac0
    3178:	00023ad4 	.word	0x00023ad4
    317c:	00023b08 	.word	0x00023b08

00003180 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
    3180:	b580      	push	{r7, lr}
    3182:	b088      	sub	sp, #32
    3184:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
    3186:	1d3b      	adds	r3, r7, #4
    3188:	0018      	movs	r0, r3
    318a:	4b1f      	ldr	r3, [pc, #124]	; (3208 <configure_mqtt+0x88>)
    318c:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
    318e:	1d3b      	adds	r3, r7, #4
    3190:	4a1e      	ldr	r2, [pc, #120]	; (320c <configure_mqtt+0x8c>)
    3192:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    3194:	1d3b      	adds	r3, r7, #4
    3196:	2280      	movs	r2, #128	; 0x80
    3198:	0092      	lsls	r2, r2, #2
    319a:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
    319c:	1d3b      	adds	r3, r7, #4
    319e:	4a1c      	ldr	r2, [pc, #112]	; (3210 <configure_mqtt+0x90>)
    31a0:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    31a2:	1d3b      	adds	r3, r7, #4
    31a4:	2280      	movs	r2, #128	; 0x80
    31a6:	0092      	lsls	r2, r2, #2
    31a8:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
    31aa:	1d3b      	adds	r3, r7, #4
    31ac:	4a19      	ldr	r2, [pc, #100]	; (3214 <configure_mqtt+0x94>)
    31ae:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
    31b0:	1d3b      	adds	r3, r7, #4
    31b2:	4a19      	ldr	r2, [pc, #100]	; (3218 <configure_mqtt+0x98>)
    31b4:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
    31b6:	1d3a      	adds	r2, r7, #4
    31b8:	4b18      	ldr	r3, [pc, #96]	; (321c <configure_mqtt+0x9c>)
    31ba:	0011      	movs	r1, r2
    31bc:	0018      	movs	r0, r3
    31be:	4b18      	ldr	r3, [pc, #96]	; (3220 <configure_mqtt+0xa0>)
    31c0:	4798      	blx	r3
    31c2:	0003      	movs	r3, r0
    31c4:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
    31c6:	69fb      	ldr	r3, [r7, #28]
    31c8:	2b00      	cmp	r3, #0
    31ca:	da06      	bge.n	31da <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
    31cc:	69fa      	ldr	r2, [r7, #28]
    31ce:	4b15      	ldr	r3, [pc, #84]	; (3224 <configure_mqtt+0xa4>)
    31d0:	0019      	movs	r1, r3
    31d2:	2001      	movs	r0, #1
    31d4:	4b14      	ldr	r3, [pc, #80]	; (3228 <configure_mqtt+0xa8>)
    31d6:	4798      	blx	r3
        while (1) {
    31d8:	e7fe      	b.n	31d8 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    31da:	4a14      	ldr	r2, [pc, #80]	; (322c <configure_mqtt+0xac>)
    31dc:	4b0f      	ldr	r3, [pc, #60]	; (321c <configure_mqtt+0x9c>)
    31de:	0011      	movs	r1, r2
    31e0:	0018      	movs	r0, r3
    31e2:	4b13      	ldr	r3, [pc, #76]	; (3230 <configure_mqtt+0xb0>)
    31e4:	4798      	blx	r3
    31e6:	0003      	movs	r3, r0
    31e8:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
    31ea:	69fb      	ldr	r3, [r7, #28]
    31ec:	2b00      	cmp	r3, #0
    31ee:	da06      	bge.n	31fe <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
    31f0:	69fa      	ldr	r2, [r7, #28]
    31f2:	4b10      	ldr	r3, [pc, #64]	; (3234 <configure_mqtt+0xb4>)
    31f4:	0019      	movs	r1, r3
    31f6:	2001      	movs	r0, #1
    31f8:	4b0b      	ldr	r3, [pc, #44]	; (3228 <configure_mqtt+0xa8>)
    31fa:	4798      	blx	r3
        while (1) {
    31fc:	e7fe      	b.n	31fc <configure_mqtt+0x7c>
        }
    }
}
    31fe:	46c0      	nop			; (mov r8, r8)
    3200:	46bd      	mov	sp, r7
    3202:	b008      	add	sp, #32
    3204:	bd80      	pop	{r7, pc}
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	0001bc3d 	.word	0x0001bc3d
    320c:	20000b30 	.word	0x20000b30
    3210:	20000d30 	.word	0x20000d30
    3214:	0000075b 	.word	0x0000075b
    3218:	00001770 	.word	0x00001770
    321c:	20000af8 	.word	0x20000af8
    3220:	0001bb8d 	.word	0x0001bb8d
    3224:	00023b1c 	.word	0x00023b1c
    3228:	0000a375 	.word	0x0000a375
    322c:	00003049 	.word	0x00003049
    3230:	0001bc7d 	.word	0x0001bc7d
    3234:	00023b50 	.word	0x00023b50

00003238 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
    3238:	b580      	push	{r7, lr}
    323a:	b084      	sub	sp, #16
    323c:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
    323e:	1d3b      	adds	r3, r7, #4
    3240:	0018      	movs	r0, r3
    3242:	4b0b      	ldr	r3, [pc, #44]	; (3270 <configure_extint_channel+0x38>)
    3244:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
    3246:	1d3b      	adds	r3, r7, #4
    3248:	2237      	movs	r2, #55	; 0x37
    324a:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
    324c:	1d3b      	adds	r3, r7, #4
    324e:	2200      	movs	r2, #0
    3250:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3252:	1d3b      	adds	r3, r7, #4
    3254:	2201      	movs	r2, #1
    3256:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    3258:	1d3b      	adds	r3, r7, #4
    325a:	2202      	movs	r2, #2
    325c:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    325e:	1d3b      	adds	r3, r7, #4
    3260:	0019      	movs	r1, r3
    3262:	2007      	movs	r0, #7
    3264:	4b03      	ldr	r3, [pc, #12]	; (3274 <configure_extint_channel+0x3c>)
    3266:	4798      	blx	r3
}
    3268:	46c0      	nop			; (mov r8, r8)
    326a:	46bd      	mov	sp, r7
    326c:	b004      	add	sp, #16
    326e:	bd80      	pop	{r7, pc}
    3270:	00012d75 	.word	0x00012d75
    3274:	00012da9 	.word	0x00012da9

00003278 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
    3278:	b580      	push	{r7, lr}
    327a:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    327c:	4b06      	ldr	r3, [pc, #24]	; (3298 <configure_extint_callbacks+0x20>)
    327e:	2200      	movs	r2, #0
    3280:	2107      	movs	r1, #7
    3282:	0018      	movs	r0, r3
    3284:	4b05      	ldr	r3, [pc, #20]	; (329c <configure_extint_callbacks+0x24>)
    3286:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3288:	2100      	movs	r1, #0
    328a:	2007      	movs	r0, #7
    328c:	4b04      	ldr	r3, [pc, #16]	; (32a0 <configure_extint_callbacks+0x28>)
    328e:	4798      	blx	r3
}
    3290:	46c0      	nop			; (mov r8, r8)
    3292:	46bd      	mov	sp, r7
    3294:	bd80      	pop	{r7, pc}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	000032a5 	.word	0x000032a5
    329c:	00012975 	.word	0x00012975
    32a0:	000129d9 	.word	0x000129d9

000032a4 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
    32a4:	b5b0      	push	{r4, r5, r7, lr}
    32a6:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
    32a8:	4b0c      	ldr	r3, [pc, #48]	; (32dc <extint_detection_callback+0x38>)
    32aa:	681b      	ldr	r3, [r3, #0]
    32ac:	1c5a      	adds	r2, r3, #1
    32ae:	4b0b      	ldr	r3, [pc, #44]	; (32dc <extint_detection_callback+0x38>)
    32b0:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
    32b2:	4b0a      	ldr	r3, [pc, #40]	; (32dc <extint_detection_callback+0x38>)
    32b4:	681b      	ldr	r3, [r3, #0]
    32b6:	2b28      	cmp	r3, #40	; 0x28
    32b8:	d902      	bls.n	32c0 <extint_detection_callback+0x1c>
    32ba:	4b08      	ldr	r3, [pc, #32]	; (32dc <extint_detection_callback+0x38>)
    32bc:	2201      	movs	r2, #1
    32be:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
    32c0:	4b06      	ldr	r3, [pc, #24]	; (32dc <extint_detection_callback+0x38>)
    32c2:	681b      	ldr	r3, [r3, #0]
    32c4:	4a06      	ldr	r2, [pc, #24]	; (32e0 <extint_detection_callback+0x3c>)
    32c6:	4807      	ldr	r0, [pc, #28]	; (32e4 <extint_detection_callback+0x40>)
    32c8:	213f      	movs	r1, #63	; 0x3f
    32ca:	4c07      	ldr	r4, [pc, #28]	; (32e8 <extint_detection_callback+0x44>)
    32cc:	47a0      	blx	r4
    isPressed = true;
    32ce:	4b07      	ldr	r3, [pc, #28]	; (32ec <extint_detection_callback+0x48>)
    32d0:	2201      	movs	r2, #1
    32d2:	701a      	strb	r2, [r3, #0]
    // Published in the Wifi thread main loop
}
    32d4:	46c0      	nop			; (mov r8, r8)
    32d6:	46bd      	mov	sp, r7
    32d8:	bdb0      	pop	{r4, r5, r7, pc}
    32da:	46c0      	nop			; (mov r8, r8)
    32dc:	2000009c 	.word	0x2000009c
    32e0:	00023b84 	.word	0x00023b84
    32e4:	2000005c 	.word	0x2000005c
    32e8:	00020fe5 	.word	0x00020fe5
    32ec:	20000f30 	.word	0x20000f30

000032f0 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
    32f0:	b580      	push	{r7, lr}
    32f2:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
    32f4:	4a15      	ldr	r2, [pc, #84]	; (334c <HTTP_DownloadFileInit+0x5c>)
    32f6:	4b16      	ldr	r3, [pc, #88]	; (3350 <HTTP_DownloadFileInit+0x60>)
    32f8:	0011      	movs	r1, r2
    32fa:	0018      	movs	r0, r3
    32fc:	4b15      	ldr	r3, [pc, #84]	; (3354 <HTTP_DownloadFileInit+0x64>)
    32fe:	4798      	blx	r3
    3300:	1e03      	subs	r3, r0, #0
    3302:	d008      	beq.n	3316 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    3304:	4b14      	ldr	r3, [pc, #80]	; (3358 <HTTP_DownloadFileInit+0x68>)
    3306:	0019      	movs	r1, r3
    3308:	2001      	movs	r0, #1
    330a:	4b14      	ldr	r3, [pc, #80]	; (335c <HTTP_DownloadFileInit+0x6c>)
    330c:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
    330e:	e002      	b.n	3316 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
    3310:	2000      	movs	r0, #0
    3312:	4b13      	ldr	r3, [pc, #76]	; (3360 <HTTP_DownloadFileInit+0x70>)
    3314:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
    3316:	4b0e      	ldr	r3, [pc, #56]	; (3350 <HTTP_DownloadFileInit+0x60>)
    3318:	2234      	movs	r2, #52	; 0x34
    331a:	5c9b      	ldrb	r3, [r3, r2]
    331c:	2b00      	cmp	r3, #0
    331e:	d1f7      	bne.n	3310 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
    3320:	4b10      	ldr	r3, [pc, #64]	; (3364 <HTTP_DownloadFileInit+0x74>)
    3322:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
    3324:	4b10      	ldr	r3, [pc, #64]	; (3368 <HTTP_DownloadFileInit+0x78>)
    3326:	2201      	movs	r2, #1
    3328:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
    332a:	4a10      	ldr	r2, [pc, #64]	; (336c <HTTP_DownloadFileInit+0x7c>)
    332c:	4b10      	ldr	r3, [pc, #64]	; (3370 <HTTP_DownloadFileInit+0x80>)
    332e:	0011      	movs	r1, r2
    3330:	0018      	movs	r0, r3
    3332:	4b10      	ldr	r3, [pc, #64]	; (3374 <HTTP_DownloadFileInit+0x84>)
    3334:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
    3336:	4b10      	ldr	r3, [pc, #64]	; (3378 <HTTP_DownloadFileInit+0x88>)
    3338:	4798      	blx	r3

    start_download();
    333a:	4b10      	ldr	r3, [pc, #64]	; (337c <HTTP_DownloadFileInit+0x8c>)
    333c:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
    333e:	4b10      	ldr	r3, [pc, #64]	; (3380 <HTTP_DownloadFileInit+0x90>)
    3340:	2203      	movs	r2, #3
    3342:	701a      	strb	r2, [r3, #0]
}
    3344:	46c0      	nop			; (mov r8, r8)
    3346:	46bd      	mov	sp, r7
    3348:	bd80      	pop	{r7, pc}
    334a:	46c0      	nop			; (mov r8, r8)
    334c:	00023360 	.word	0x00023360
    3350:	20000af8 	.word	0x20000af8
    3354:	0001be31 	.word	0x0001be31
    3358:	0002376c 	.word	0x0002376c
    335c:	0000a375 	.word	0x0000a375
    3360:	0000e465 	.word	0x0000e465
    3364:	00011a21 	.word	0x00011a21
    3368:	20000898 	.word	0x20000898
    336c:	00002a41 	.word	0x00002a41
    3370:	00002a0d 	.word	0x00002a0d
    3374:	00011a69 	.word	0x00011a69
    3378:	000119d1 	.word	0x000119d1
    337c:	00002631 	.word	0x00002631
    3380:	20000884 	.word	0x20000884

00003384 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
    3384:	b590      	push	{r4, r7, lr}
    3386:	b085      	sub	sp, #20
    3388:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    338a:	e009      	b.n	33a0 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
    338c:	2000      	movs	r0, #0
    338e:	4b2a      	ldr	r3, [pc, #168]	; (3438 <HTTP_DownloadFileTransaction+0xb4>)
    3390:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
    3392:	4b2a      	ldr	r3, [pc, #168]	; (343c <HTTP_DownloadFileTransaction+0xb8>)
    3394:	0018      	movs	r0, r3
    3396:	4b2a      	ldr	r3, [pc, #168]	; (3440 <HTTP_DownloadFileTransaction+0xbc>)
    3398:	4798      	blx	r3
        vTaskDelay(5);
    339a:	2005      	movs	r0, #5
    339c:	4b29      	ldr	r3, [pc, #164]	; (3444 <HTTP_DownloadFileTransaction+0xc0>)
    339e:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    33a0:	2010      	movs	r0, #16
    33a2:	4b29      	ldr	r3, [pc, #164]	; (3448 <HTTP_DownloadFileTransaction+0xc4>)
    33a4:	4798      	blx	r3
    33a6:	0003      	movs	r3, r0
    33a8:	001a      	movs	r2, r3
    33aa:	2301      	movs	r3, #1
    33ac:	4053      	eors	r3, r2
    33ae:	b2db      	uxtb	r3, r3
    33b0:	2b00      	cmp	r3, #0
    33b2:	d009      	beq.n	33c8 <HTTP_DownloadFileTransaction+0x44>
    33b4:	2020      	movs	r0, #32
    33b6:	4b24      	ldr	r3, [pc, #144]	; (3448 <HTTP_DownloadFileTransaction+0xc4>)
    33b8:	4798      	blx	r3
    33ba:	0003      	movs	r3, r0
    33bc:	001a      	movs	r2, r3
    33be:	2301      	movs	r3, #1
    33c0:	4053      	eors	r3, r2
    33c2:	b2db      	uxtb	r3, r3
    33c4:	2b00      	cmp	r3, #0
    33c6:	d1e1      	bne.n	338c <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
    33c8:	4b20      	ldr	r3, [pc, #128]	; (344c <HTTP_DownloadFileTransaction+0xc8>)
    33ca:	4798      	blx	r3
    vTaskDelay(1000);
    33cc:	23fa      	movs	r3, #250	; 0xfa
    33ce:	009b      	lsls	r3, r3, #2
    33d0:	0018      	movs	r0, r3
    33d2:	4b1c      	ldr	r3, [pc, #112]	; (3444 <HTTP_DownloadFileTransaction+0xc0>)
    33d4:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
    33d6:	4b1e      	ldr	r3, [pc, #120]	; (3450 <HTTP_DownloadFileTransaction+0xcc>)
    33d8:	2200      	movs	r2, #0
    33da:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
    33dc:	003b      	movs	r3, r7
    33de:	4a1d      	ldr	r2, [pc, #116]	; (3454 <HTTP_DownloadFileTransaction+0xd0>)
    33e0:	ca13      	ldmia	r2!, {r0, r1, r4}
    33e2:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    33e4:	003b      	movs	r3, r7
    33e6:	2230      	movs	r2, #48	; 0x30
    33e8:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    33ea:	230f      	movs	r3, #15
    33ec:	18fc      	adds	r4, r7, r3
    33ee:	0039      	movs	r1, r7
    33f0:	4b19      	ldr	r3, [pc, #100]	; (3458 <HTTP_DownloadFileTransaction+0xd4>)
    33f2:	220a      	movs	r2, #10
    33f4:	0018      	movs	r0, r3
    33f6:	4b19      	ldr	r3, [pc, #100]	; (345c <HTTP_DownloadFileTransaction+0xd8>)
    33f8:	4798      	blx	r3
    33fa:	0003      	movs	r3, r0
    33fc:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
    33fe:	230f      	movs	r3, #15
    3400:	18fb      	adds	r3, r7, r3
    3402:	781b      	ldrb	r3, [r3, #0]
    3404:	2b00      	cmp	r3, #0
    3406:	d008      	beq.n	341a <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    3408:	230f      	movs	r3, #15
    340a:	18fb      	adds	r3, r7, r3
    340c:	781a      	ldrb	r2, [r3, #0]
    340e:	4b14      	ldr	r3, [pc, #80]	; (3460 <HTTP_DownloadFileTransaction+0xdc>)
    3410:	0019      	movs	r1, r3
    3412:	2000      	movs	r0, #0
    3414:	4b13      	ldr	r3, [pc, #76]	; (3464 <HTTP_DownloadFileTransaction+0xe0>)
    3416:	4798      	blx	r3
    3418:	e003      	b.n	3422 <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
    341a:	4b13      	ldr	r3, [pc, #76]	; (3468 <HTTP_DownloadFileTransaction+0xe4>)
    341c:	0018      	movs	r0, r3
    341e:	4b13      	ldr	r3, [pc, #76]	; (346c <HTTP_DownloadFileTransaction+0xe8>)
    3420:	4798      	blx	r3
    }

    f_close(&file_object);
    3422:	4b0d      	ldr	r3, [pc, #52]	; (3458 <HTTP_DownloadFileTransaction+0xd4>)
    3424:	0018      	movs	r0, r3
    3426:	4b12      	ldr	r3, [pc, #72]	; (3470 <HTTP_DownloadFileTransaction+0xec>)
    3428:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
    342a:	4b12      	ldr	r3, [pc, #72]	; (3474 <HTTP_DownloadFileTransaction+0xf0>)
    342c:	2200      	movs	r2, #0
    342e:	701a      	strb	r2, [r3, #0]
}
    3430:	46c0      	nop			; (mov r8, r8)
    3432:	46bd      	mov	sp, r7
    3434:	b005      	add	sp, #20
    3436:	bd90      	pop	{r4, r7, pc}
    3438:	0000e465 	.word	0x0000e465
    343c:	200046b4 	.word	0x200046b4
    3440:	0001eb59 	.word	0x0001eb59
    3444:	00008635 	.word	0x00008635
    3448:	00002309 	.word	0x00002309
    344c:	00011a21 	.word	0x00011a21
    3450:	20000898 	.word	0x20000898
    3454:	00023bbc 	.word	0x00023bbc
    3458:	20000acc 	.word	0x20000acc
    345c:	00019e21 	.word	0x00019e21
    3460:	00023b98 	.word	0x00023b98
    3464:	0000a375 	.word	0x0000a375
    3468:	00023ba8 	.word	0x00023ba8
    346c:	0000a289 	.word	0x0000a289
    3470:	0001a821 	.word	0x0001a821
    3474:	20000884 	.word	0x20000884

00003478 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
    3478:	b580      	push	{r7, lr}
    347a:	af00      	add	r7, sp, #0
    socketDeinit();
    347c:	4b18      	ldr	r3, [pc, #96]	; (34e0 <MQTT_InitRoutine+0x68>)
    347e:	4798      	blx	r3
    configure_mqtt();
    3480:	4b18      	ldr	r3, [pc, #96]	; (34e4 <MQTT_InitRoutine+0x6c>)
    3482:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
    3484:	4a18      	ldr	r2, [pc, #96]	; (34e8 <MQTT_InitRoutine+0x70>)
    3486:	4b19      	ldr	r3, [pc, #100]	; (34ec <MQTT_InitRoutine+0x74>)
    3488:	0011      	movs	r1, r2
    348a:	0018      	movs	r0, r3
    348c:	4b18      	ldr	r3, [pc, #96]	; (34f0 <MQTT_InitRoutine+0x78>)
    348e:	4798      	blx	r3
    socketInit();
    3490:	4b18      	ldr	r3, [pc, #96]	; (34f4 <MQTT_InitRoutine+0x7c>)
    3492:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
    3494:	4b18      	ldr	r3, [pc, #96]	; (34f8 <MQTT_InitRoutine+0x80>)
    3496:	2234      	movs	r2, #52	; 0x34
    3498:	5c9b      	ldrb	r3, [r3, r2]
    349a:	2201      	movs	r2, #1
    349c:	4053      	eors	r3, r2
    349e:	b2db      	uxtb	r3, r3
    34a0:	2b00      	cmp	r3, #0
    34a2:	d00c      	beq.n	34be <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
    34a4:	4a15      	ldr	r2, [pc, #84]	; (34fc <MQTT_InitRoutine+0x84>)
    34a6:	4b14      	ldr	r3, [pc, #80]	; (34f8 <MQTT_InitRoutine+0x80>)
    34a8:	0011      	movs	r1, r2
    34aa:	0018      	movs	r0, r3
    34ac:	4b14      	ldr	r3, [pc, #80]	; (3500 <MQTT_InitRoutine+0x88>)
    34ae:	4798      	blx	r3
    34b0:	1e03      	subs	r3, r0, #0
    34b2:	d004      	beq.n	34be <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    34b4:	4b13      	ldr	r3, [pc, #76]	; (3504 <MQTT_InitRoutine+0x8c>)
    34b6:	0019      	movs	r1, r3
    34b8:	2001      	movs	r0, #1
    34ba:	4b13      	ldr	r3, [pc, #76]	; (3508 <MQTT_InitRoutine+0x90>)
    34bc:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
    34be:	4b0e      	ldr	r3, [pc, #56]	; (34f8 <MQTT_InitRoutine+0x80>)
    34c0:	2234      	movs	r2, #52	; 0x34
    34c2:	5c9b      	ldrb	r3, [r3, r2]
    34c4:	2b00      	cmp	r3, #0
    34c6:	d004      	beq.n	34d2 <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
    34c8:	4b10      	ldr	r3, [pc, #64]	; (350c <MQTT_InitRoutine+0x94>)
    34ca:	0019      	movs	r1, r3
    34cc:	2001      	movs	r0, #1
    34ce:	4b0e      	ldr	r3, [pc, #56]	; (3508 <MQTT_InitRoutine+0x90>)
    34d0:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
    34d2:	4b0f      	ldr	r3, [pc, #60]	; (3510 <MQTT_InitRoutine+0x98>)
    34d4:	2201      	movs	r2, #1
    34d6:	701a      	strb	r2, [r3, #0]
}
    34d8:	46c0      	nop			; (mov r8, r8)
    34da:	46bd      	mov	sp, r7
    34dc:	bd80      	pop	{r7, pc}
    34de:	46c0      	nop			; (mov r8, r8)
    34e0:	00011a21 	.word	0x00011a21
    34e4:	00003181 	.word	0x00003181
    34e8:	00002dcd 	.word	0x00002dcd
    34ec:	00002d99 	.word	0x00002d99
    34f0:	00011a69 	.word	0x00011a69
    34f4:	000119d1 	.word	0x000119d1
    34f8:	20000af8 	.word	0x20000af8
    34fc:	00023360 	.word	0x00023360
    3500:	0001bcfd 	.word	0x0001bcfd
    3504:	0002376c 	.word	0x0002376c
    3508:	0000a375 	.word	0x0000a375
    350c:	00023bc8 	.word	0x00023bc8
    3510:	20000884 	.word	0x20000884

00003514 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
    3514:	b580      	push	{r7, lr}
    3516:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
    3518:	2000      	movs	r0, #0
    351a:	4b0b      	ldr	r3, [pc, #44]	; (3548 <MQTT_HandleTransactions+0x34>)
    351c:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
    351e:	4b0b      	ldr	r3, [pc, #44]	; (354c <MQTT_HandleTransactions+0x38>)
    3520:	0018      	movs	r0, r3
    3522:	4b0b      	ldr	r3, [pc, #44]	; (3550 <MQTT_HandleTransactions+0x3c>)
    3524:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
    3526:	4b0b      	ldr	r3, [pc, #44]	; (3554 <MQTT_HandleTransactions+0x40>)
    3528:	4798      	blx	r3
    MQTT_HandleImuMessages();
    352a:	4b0b      	ldr	r3, [pc, #44]	; (3558 <MQTT_HandleTransactions+0x44>)
    352c:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
    352e:	4b0b      	ldr	r3, [pc, #44]	; (355c <MQTT_HandleTransactions+0x48>)
    3530:	2234      	movs	r2, #52	; 0x34
    3532:	5c9b      	ldrb	r3, [r3, r2]
    3534:	2b00      	cmp	r3, #0
    3536:	d004      	beq.n	3542 <MQTT_HandleTransactions+0x2e>
    3538:	4b08      	ldr	r3, [pc, #32]	; (355c <MQTT_HandleTransactions+0x48>)
    353a:	2164      	movs	r1, #100	; 0x64
    353c:	0018      	movs	r0, r3
    353e:	4b08      	ldr	r3, [pc, #32]	; (3560 <MQTT_HandleTransactions+0x4c>)
    3540:	4798      	blx	r3
}
    3542:	46c0      	nop			; (mov r8, r8)
    3544:	46bd      	mov	sp, r7
    3546:	bd80      	pop	{r7, pc}
    3548:	0000e465 	.word	0x0000e465
    354c:	200046b4 	.word	0x200046b4
    3550:	0001eb59 	.word	0x0001eb59
    3554:	000035f1 	.word	0x000035f1
    3558:	00003565 	.word	0x00003565
    355c:	20000af8 	.word	0x20000af8
    3560:	0001bf2d 	.word	0x0001bf2d

00003564 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
    3564:	b590      	push	{r4, r7, lr}
    3566:	b085      	sub	sp, #20
    3568:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
    356a:	4b18      	ldr	r3, [pc, #96]	; (35cc <MQTT_HandleImuMessages+0x68>)
    356c:	681b      	ldr	r3, [r3, #0]
    356e:	0039      	movs	r1, r7
    3570:	2200      	movs	r2, #0
    3572:	0018      	movs	r0, r3
    3574:	4b16      	ldr	r3, [pc, #88]	; (35d0 <MQTT_HandleImuMessages+0x6c>)
    3576:	4798      	blx	r3
    3578:	0003      	movs	r3, r0
    357a:	2b01      	cmp	r3, #1
    357c:	d121      	bne.n	35c2 <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
    357e:	003b      	movs	r3, r7
    3580:	2200      	movs	r2, #0
    3582:	5e9b      	ldrsh	r3, [r3, r2]
    3584:	001c      	movs	r4, r3
    3586:	003b      	movs	r3, r7
    3588:	2202      	movs	r2, #2
    358a:	5e9b      	ldrsh	r3, [r3, r2]
    358c:	0019      	movs	r1, r3
    358e:	003b      	movs	r3, r7
    3590:	2204      	movs	r2, #4
    3592:	5e9b      	ldrsh	r3, [r3, r2]
    3594:	4a0f      	ldr	r2, [pc, #60]	; (35d4 <MQTT_HandleImuMessages+0x70>)
    3596:	4810      	ldr	r0, [pc, #64]	; (35d8 <MQTT_HandleImuMessages+0x74>)
    3598:	9301      	str	r3, [sp, #4]
    359a:	9100      	str	r1, [sp, #0]
    359c:	0023      	movs	r3, r4
    359e:	213f      	movs	r1, #63	; 0x3f
    35a0:	4c0e      	ldr	r4, [pc, #56]	; (35dc <MQTT_HandleImuMessages+0x78>)
    35a2:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
    35a4:	4b0c      	ldr	r3, [pc, #48]	; (35d8 <MQTT_HandleImuMessages+0x74>)
    35a6:	0018      	movs	r0, r3
    35a8:	4b0d      	ldr	r3, [pc, #52]	; (35e0 <MQTT_HandleImuMessages+0x7c>)
    35aa:	4798      	blx	r3
    35ac:	0004      	movs	r4, r0
    35ae:	4a0a      	ldr	r2, [pc, #40]	; (35d8 <MQTT_HandleImuMessages+0x74>)
    35b0:	490c      	ldr	r1, [pc, #48]	; (35e4 <MQTT_HandleImuMessages+0x80>)
    35b2:	480d      	ldr	r0, [pc, #52]	; (35e8 <MQTT_HandleImuMessages+0x84>)
    35b4:	2300      	movs	r3, #0
    35b6:	9301      	str	r3, [sp, #4]
    35b8:	2301      	movs	r3, #1
    35ba:	9300      	str	r3, [sp, #0]
    35bc:	0023      	movs	r3, r4
    35be:	4c0b      	ldr	r4, [pc, #44]	; (35ec <MQTT_HandleImuMessages+0x88>)
    35c0:	47a0      	blx	r4
    }
}
    35c2:	46c0      	nop			; (mov r8, r8)
    35c4:	46bd      	mov	sp, r7
    35c6:	b003      	add	sp, #12
    35c8:	bd90      	pop	{r4, r7, pc}
    35ca:	46c0      	nop			; (mov r8, r8)
    35cc:	20000890 	.word	0x20000890
    35d0:	00007489 	.word	0x00007489
    35d4:	00023be4 	.word	0x00023be4
    35d8:	2000001c 	.word	0x2000001c
    35dc:	00020fe5 	.word	0x00020fe5
    35e0:	00021143 	.word	0x00021143
    35e4:	00023aac 	.word	0x00023aac
    35e8:	20000af8 	.word	0x20000af8
    35ec:	0001be79 	.word	0x0001be79

000035f0 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
    35f0:	b590      	push	{r4, r7, lr}
    35f2:	b08b      	sub	sp, #44	; 0x2c
    35f4:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
    35f6:	4b39      	ldr	r3, [pc, #228]	; (36dc <MQTT_HandleGameMessages+0xec>)
    35f8:	681b      	ldr	r3, [r3, #0]
    35fa:	2208      	movs	r2, #8
    35fc:	18b9      	adds	r1, r7, r2
    35fe:	2200      	movs	r2, #0
    3600:	0018      	movs	r0, r3
    3602:	4b37      	ldr	r3, [pc, #220]	; (36e0 <MQTT_HandleGameMessages+0xf0>)
    3604:	4798      	blx	r3
    3606:	0003      	movs	r3, r0
    3608:	2b01      	cmp	r3, #1
    360a:	d163      	bne.n	36d4 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
    360c:	4b35      	ldr	r3, [pc, #212]	; (36e4 <MQTT_HandleGameMessages+0xf4>)
    360e:	4a36      	ldr	r2, [pc, #216]	; (36e8 <MQTT_HandleGameMessages+0xf8>)
    3610:	ca03      	ldmia	r2!, {r0, r1}
    3612:	c303      	stmia	r3!, {r0, r1}
    3614:	8812      	ldrh	r2, [r2, #0]
    3616:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
    3618:	2300      	movs	r3, #0
    361a:	61fb      	str	r3, [r7, #28]
    361c:	e02d      	b.n	367a <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
    361e:	2308      	movs	r3, #8
    3620:	18fa      	adds	r2, r7, r3
    3622:	69fb      	ldr	r3, [r7, #28]
    3624:	18d3      	adds	r3, r2, r3
    3626:	781b      	ldrb	r3, [r3, #0]
    3628:	2bff      	cmp	r3, #255	; 0xff
    362a:	d02a      	beq.n	3682 <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
    362c:	2308      	movs	r3, #8
    362e:	18fa      	adds	r2, r7, r3
    3630:	69fb      	ldr	r3, [r7, #28]
    3632:	18d3      	adds	r3, r2, r3
    3634:	781b      	ldrb	r3, [r3, #0]
    3636:	4a2d      	ldr	r2, [pc, #180]	; (36ec <MQTT_HandleGameMessages+0xfc>)
    3638:	0038      	movs	r0, r7
    363a:	2103      	movs	r1, #3
    363c:	4c2c      	ldr	r4, [pc, #176]	; (36f0 <MQTT_HandleGameMessages+0x100>)
    363e:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
    3640:	003a      	movs	r2, r7
    3642:	4b28      	ldr	r3, [pc, #160]	; (36e4 <MQTT_HandleGameMessages+0xf4>)
    3644:	0011      	movs	r1, r2
    3646:	0018      	movs	r0, r3
    3648:	4b2a      	ldr	r3, [pc, #168]	; (36f4 <MQTT_HandleGameMessages+0x104>)
    364a:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
    364c:	69fb      	ldr	r3, [r7, #28]
    364e:	3301      	adds	r3, #1
    3650:	2208      	movs	r2, #8
    3652:	18ba      	adds	r2, r7, r2
    3654:	5cd3      	ldrb	r3, [r2, r3]
    3656:	2bff      	cmp	r3, #255	; 0xff
    3658:	d00c      	beq.n	3674 <MQTT_HandleGameMessages+0x84>
    365a:	69fb      	ldr	r3, [r7, #28]
    365c:	3301      	adds	r3, #1
    365e:	2b13      	cmp	r3, #19
    3660:	dc08      	bgt.n	3674 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
    3662:	003b      	movs	r3, r7
    3664:	222c      	movs	r2, #44	; 0x2c
    3666:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
    3668:	003a      	movs	r2, r7
    366a:	4b1e      	ldr	r3, [pc, #120]	; (36e4 <MQTT_HandleGameMessages+0xf4>)
    366c:	0011      	movs	r1, r2
    366e:	0018      	movs	r0, r3
    3670:	4b20      	ldr	r3, [pc, #128]	; (36f4 <MQTT_HandleGameMessages+0x104>)
    3672:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
    3674:	69fb      	ldr	r3, [r7, #28]
    3676:	3301      	adds	r3, #1
    3678:	61fb      	str	r3, [r7, #28]
    367a:	69fb      	ldr	r3, [r7, #28]
    367c:	2b13      	cmp	r3, #19
    367e:	ddce      	ble.n	361e <MQTT_HandleGameMessages+0x2e>
    3680:	e000      	b.n	3684 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
    3682:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
    3684:	4b17      	ldr	r3, [pc, #92]	; (36e4 <MQTT_HandleGameMessages+0xf4>)
    3686:	0018      	movs	r0, r3
    3688:	4b1b      	ldr	r3, [pc, #108]	; (36f8 <MQTT_HandleGameMessages+0x108>)
    368a:	4798      	blx	r3
    368c:	0003      	movs	r3, r0
    368e:	001a      	movs	r2, r3
    3690:	4b14      	ldr	r3, [pc, #80]	; (36e4 <MQTT_HandleGameMessages+0xf4>)
    3692:	18d2      	adds	r2, r2, r3
    3694:	4b19      	ldr	r3, [pc, #100]	; (36fc <MQTT_HandleGameMessages+0x10c>)
    3696:	0010      	movs	r0, r2
    3698:	0019      	movs	r1, r3
    369a:	2303      	movs	r3, #3
    369c:	001a      	movs	r2, r3
    369e:	4b18      	ldr	r3, [pc, #96]	; (3700 <MQTT_HandleGameMessages+0x110>)
    36a0:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
    36a2:	4b10      	ldr	r3, [pc, #64]	; (36e4 <MQTT_HandleGameMessages+0xf4>)
    36a4:	0019      	movs	r1, r3
    36a6:	2001      	movs	r0, #1
    36a8:	4b16      	ldr	r3, [pc, #88]	; (3704 <MQTT_HandleGameMessages+0x114>)
    36aa:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
    36ac:	4b16      	ldr	r3, [pc, #88]	; (3708 <MQTT_HandleGameMessages+0x118>)
    36ae:	0019      	movs	r1, r3
    36b0:	2001      	movs	r0, #1
    36b2:	4b14      	ldr	r3, [pc, #80]	; (3704 <MQTT_HandleGameMessages+0x114>)
    36b4:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
    36b6:	4b0b      	ldr	r3, [pc, #44]	; (36e4 <MQTT_HandleGameMessages+0xf4>)
    36b8:	0018      	movs	r0, r3
    36ba:	4b0f      	ldr	r3, [pc, #60]	; (36f8 <MQTT_HandleGameMessages+0x108>)
    36bc:	4798      	blx	r3
    36be:	0004      	movs	r4, r0
    36c0:	4a08      	ldr	r2, [pc, #32]	; (36e4 <MQTT_HandleGameMessages+0xf4>)
    36c2:	4912      	ldr	r1, [pc, #72]	; (370c <MQTT_HandleGameMessages+0x11c>)
    36c4:	4812      	ldr	r0, [pc, #72]	; (3710 <MQTT_HandleGameMessages+0x120>)
    36c6:	2300      	movs	r3, #0
    36c8:	9301      	str	r3, [sp, #4]
    36ca:	2301      	movs	r3, #1
    36cc:	9300      	str	r3, [sp, #0]
    36ce:	0023      	movs	r3, r4
    36d0:	4c10      	ldr	r4, [pc, #64]	; (3714 <MQTT_HandleGameMessages+0x124>)
    36d2:	47a0      	blx	r4
    }
}
    36d4:	46c0      	nop			; (mov r8, r8)
    36d6:	46bd      	mov	sp, r7
    36d8:	b009      	add	sp, #36	; 0x24
    36da:	bd90      	pop	{r4, r7, pc}
    36dc:	2000088c 	.word	0x2000088c
    36e0:	00007489 	.word	0x00007489
    36e4:	2000001c 	.word	0x2000001c
    36e8:	00023908 	.word	0x00023908
    36ec:	00023c08 	.word	0x00023c08
    36f0:	00020fe5 	.word	0x00020fe5
    36f4:	000210c9 	.word	0x000210c9
    36f8:	00021143 	.word	0x00021143
    36fc:	00023c0c 	.word	0x00023c0c
    3700:	00020d55 	.word	0x00020d55
    3704:	0000a375 	.word	0x0000a375
    3708:	00023c10 	.word	0x00023c10
    370c:	00023c14 	.word	0x00023c14
    3710:	20000af8 	.word	0x20000af8
    3714:	0001be79 	.word	0x0001be79

00003718 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
    3718:	b590      	push	{r4, r7, lr}
    371a:	b08d      	sub	sp, #52	; 0x34
    371c:	af02      	add	r7, sp, #8
    371e:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
    3720:	2064      	movs	r0, #100	; 0x64
    3722:	4b79      	ldr	r3, [pc, #484]	; (3908 <vWifiTask+0x1f0>)
    3724:	4798      	blx	r3
    init_state();
    3726:	4b79      	ldr	r3, [pc, #484]	; (390c <vWifiTask+0x1f4>)
    3728:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
    372a:	2200      	movs	r2, #0
    372c:	2104      	movs	r1, #4
    372e:	2005      	movs	r0, #5
    3730:	4b77      	ldr	r3, [pc, #476]	; (3910 <vWifiTask+0x1f8>)
    3732:	4798      	blx	r3
    3734:	0002      	movs	r2, r0
    3736:	4b77      	ldr	r3, [pc, #476]	; (3914 <vWifiTask+0x1fc>)
    3738:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
    373a:	2200      	movs	r2, #0
    373c:	2106      	movs	r1, #6
    373e:	2005      	movs	r0, #5
    3740:	4b73      	ldr	r3, [pc, #460]	; (3910 <vWifiTask+0x1f8>)
    3742:	4798      	blx	r3
    3744:	0002      	movs	r2, r0
    3746:	4b74      	ldr	r3, [pc, #464]	; (3918 <vWifiTask+0x200>)
    3748:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
    374a:	2200      	movs	r2, #0
    374c:	2114      	movs	r1, #20
    374e:	2002      	movs	r0, #2
    3750:	4b6f      	ldr	r3, [pc, #444]	; (3910 <vWifiTask+0x1f8>)
    3752:	4798      	blx	r3
    3754:	0002      	movs	r2, r0
    3756:	4b71      	ldr	r3, [pc, #452]	; (391c <vWifiTask+0x204>)
    3758:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
    375a:	2200      	movs	r2, #0
    375c:	2102      	movs	r1, #2
    375e:	2005      	movs	r0, #5
    3760:	4b6b      	ldr	r3, [pc, #428]	; (3910 <vWifiTask+0x1f8>)
    3762:	4798      	blx	r3
    3764:	0002      	movs	r2, r0
    3766:	4b6e      	ldr	r3, [pc, #440]	; (3920 <vWifiTask+0x208>)
    3768:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
    376a:	4b6a      	ldr	r3, [pc, #424]	; (3914 <vWifiTask+0x1fc>)
    376c:	681b      	ldr	r3, [r3, #0]
    376e:	2b00      	cmp	r3, #0
    3770:	d00b      	beq.n	378a <vWifiTask+0x72>
    3772:	4b69      	ldr	r3, [pc, #420]	; (3918 <vWifiTask+0x200>)
    3774:	681b      	ldr	r3, [r3, #0]
    3776:	2b00      	cmp	r3, #0
    3778:	d007      	beq.n	378a <vWifiTask+0x72>
    377a:	4b68      	ldr	r3, [pc, #416]	; (391c <vWifiTask+0x204>)
    377c:	681b      	ldr	r3, [r3, #0]
    377e:	2b00      	cmp	r3, #0
    3780:	d003      	beq.n	378a <vWifiTask+0x72>
    3782:	4b67      	ldr	r3, [pc, #412]	; (3920 <vWifiTask+0x208>)
    3784:	681b      	ldr	r3, [r3, #0]
    3786:	2b00      	cmp	r3, #0
    3788:	d103      	bne.n	3792 <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
    378a:	4b66      	ldr	r3, [pc, #408]	; (3924 <vWifiTask+0x20c>)
    378c:	0018      	movs	r0, r3
    378e:	4b66      	ldr	r3, [pc, #408]	; (3928 <vWifiTask+0x210>)
    3790:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
    3792:	4b66      	ldr	r3, [pc, #408]	; (392c <vWifiTask+0x214>)
    3794:	0018      	movs	r0, r3
    3796:	4b64      	ldr	r3, [pc, #400]	; (3928 <vWifiTask+0x210>)
    3798:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
    379a:	4b65      	ldr	r3, [pc, #404]	; (3930 <vWifiTask+0x218>)
    379c:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
    379e:	4b65      	ldr	r3, [pc, #404]	; (3934 <vWifiTask+0x21c>)
    37a0:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
    37a2:	4b65      	ldr	r3, [pc, #404]	; (3938 <vWifiTask+0x220>)
    37a4:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
    37a6:	4b65      	ldr	r3, [pc, #404]	; (393c <vWifiTask+0x224>)
    37a8:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
    37aa:	4b65      	ldr	r3, [pc, #404]	; (3940 <vWifiTask+0x228>)
    37ac:	4798      	blx	r3
    configure_extint_callbacks();
    37ae:	4b65      	ldr	r3, [pc, #404]	; (3944 <vWifiTask+0x22c>)
    37b0:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    37b2:	230c      	movs	r3, #12
    37b4:	18fb      	adds	r3, r7, r3
    37b6:	2218      	movs	r2, #24
    37b8:	2100      	movs	r1, #0
    37ba:	0018      	movs	r0, r3
    37bc:	4b62      	ldr	r3, [pc, #392]	; (3948 <vWifiTask+0x230>)
    37be:	4798      	blx	r3

    nm_bsp_init();
    37c0:	4b62      	ldr	r3, [pc, #392]	; (394c <vWifiTask+0x234>)
    37c2:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
    37c4:	230c      	movs	r3, #12
    37c6:	18fb      	adds	r3, r7, r3
    37c8:	4a61      	ldr	r2, [pc, #388]	; (3950 <vWifiTask+0x238>)
    37ca:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
    37cc:	2327      	movs	r3, #39	; 0x27
    37ce:	18fc      	adds	r4, r7, r3
    37d0:	230c      	movs	r3, #12
    37d2:	18fb      	adds	r3, r7, r3
    37d4:	0018      	movs	r0, r3
    37d6:	4b5f      	ldr	r3, [pc, #380]	; (3954 <vWifiTask+0x23c>)
    37d8:	4798      	blx	r3
    37da:	0003      	movs	r3, r0
    37dc:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
    37de:	2327      	movs	r3, #39	; 0x27
    37e0:	18fb      	adds	r3, r7, r3
    37e2:	781b      	ldrb	r3, [r3, #0]
    37e4:	b25b      	sxtb	r3, r3
    37e6:	2b00      	cmp	r3, #0
    37e8:	d009      	beq.n	37fe <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
    37ea:	2327      	movs	r3, #39	; 0x27
    37ec:	18fb      	adds	r3, r7, r3
    37ee:	2200      	movs	r2, #0
    37f0:	569a      	ldrsb	r2, [r3, r2]
    37f2:	4b59      	ldr	r3, [pc, #356]	; (3958 <vWifiTask+0x240>)
    37f4:	0019      	movs	r1, r3
    37f6:	2001      	movs	r0, #1
    37f8:	4b58      	ldr	r3, [pc, #352]	; (395c <vWifiTask+0x244>)
    37fa:	4798      	blx	r3
        while (1) {
    37fc:	e7fe      	b.n	37fc <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    37fe:	4a58      	ldr	r2, [pc, #352]	; (3960 <vWifiTask+0x248>)
    3800:	4b58      	ldr	r3, [pc, #352]	; (3964 <vWifiTask+0x24c>)
    3802:	0019      	movs	r1, r3
    3804:	2001      	movs	r0, #1
    3806:	4b55      	ldr	r3, [pc, #340]	; (395c <vWifiTask+0x244>)
    3808:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
    380a:	4b57      	ldr	r3, [pc, #348]	; (3968 <vWifiTask+0x250>)
    380c:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
    380e:	4a57      	ldr	r2, [pc, #348]	; (396c <vWifiTask+0x254>)
    3810:	4b57      	ldr	r3, [pc, #348]	; (3970 <vWifiTask+0x258>)
    3812:	0011      	movs	r1, r2
    3814:	0018      	movs	r0, r3
    3816:	4b57      	ldr	r3, [pc, #348]	; (3974 <vWifiTask+0x25c>)
    3818:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    381a:	4a57      	ldr	r2, [pc, #348]	; (3978 <vWifiTask+0x260>)
    381c:	4850      	ldr	r0, [pc, #320]	; (3960 <vWifiTask+0x248>)
    381e:	23ff      	movs	r3, #255	; 0xff
    3820:	9300      	str	r3, [sp, #0]
    3822:	0013      	movs	r3, r2
    3824:	2202      	movs	r2, #2
    3826:	210d      	movs	r1, #13
    3828:	4c54      	ldr	r4, [pc, #336]	; (397c <vWifiTask+0x264>)
    382a:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
    382c:	e006      	b.n	383c <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
    382e:	2000      	movs	r0, #0
    3830:	4b53      	ldr	r3, [pc, #332]	; (3980 <vWifiTask+0x268>)
    3832:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
    3834:	4b53      	ldr	r3, [pc, #332]	; (3984 <vWifiTask+0x26c>)
    3836:	0018      	movs	r0, r3
    3838:	4b53      	ldr	r3, [pc, #332]	; (3988 <vWifiTask+0x270>)
    383a:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
    383c:	2002      	movs	r0, #2
    383e:	4b53      	ldr	r3, [pc, #332]	; (398c <vWifiTask+0x274>)
    3840:	4798      	blx	r3
    3842:	0003      	movs	r3, r0
    3844:	001a      	movs	r2, r3
    3846:	2301      	movs	r3, #1
    3848:	4053      	eors	r3, r2
    384a:	b2db      	uxtb	r3, r3
    384c:	2b00      	cmp	r3, #0
    384e:	d1ee      	bne.n	382e <vWifiTask+0x116>
    }

    vTaskDelay(1000);
    3850:	23fa      	movs	r3, #250	; 0xfa
    3852:	009b      	lsls	r3, r3, #2
    3854:	0018      	movs	r0, r3
    3856:	4b2c      	ldr	r3, [pc, #176]	; (3908 <vWifiTask+0x1f0>)
    3858:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
    385a:	4b4d      	ldr	r3, [pc, #308]	; (3990 <vWifiTask+0x278>)
    385c:	2201      	movs	r2, #1
    385e:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
    3860:	4b4b      	ldr	r3, [pc, #300]	; (3990 <vWifiTask+0x278>)
    3862:	781b      	ldrb	r3, [r3, #0]
    3864:	b25b      	sxtb	r3, r3
    3866:	2b01      	cmp	r3, #1
    3868:	d00b      	beq.n	3882 <vWifiTask+0x16a>
    386a:	dc02      	bgt.n	3872 <vWifiTask+0x15a>
    386c:	2b00      	cmp	r3, #0
    386e:	d005      	beq.n	387c <vWifiTask+0x164>
    3870:	e010      	b.n	3894 <vWifiTask+0x17c>
    3872:	2b02      	cmp	r3, #2
    3874:	d008      	beq.n	3888 <vWifiTask+0x170>
    3876:	2b03      	cmp	r3, #3
    3878:	d009      	beq.n	388e <vWifiTask+0x176>
    387a:	e00b      	b.n	3894 <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
    387c:	4b45      	ldr	r3, [pc, #276]	; (3994 <vWifiTask+0x27c>)
    387e:	4798      	blx	r3

                break;
    3880:	e00c      	b.n	389c <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
    3882:	4b45      	ldr	r3, [pc, #276]	; (3998 <vWifiTask+0x280>)
    3884:	4798      	blx	r3
                break;
    3886:	e009      	b.n	389c <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
    3888:	4b44      	ldr	r3, [pc, #272]	; (399c <vWifiTask+0x284>)
    388a:	4798      	blx	r3
                break;
    388c:	e006      	b.n	389c <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
    388e:	4b44      	ldr	r3, [pc, #272]	; (39a0 <vWifiTask+0x288>)
    3890:	4798      	blx	r3
                break;
    3892:	e003      	b.n	389c <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
    3894:	4b3e      	ldr	r3, [pc, #248]	; (3990 <vWifiTask+0x278>)
    3896:	2200      	movs	r2, #0
    3898:	701a      	strb	r2, [r3, #0]
                break;
    389a:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
    389c:	230b      	movs	r3, #11
    389e:	18fb      	adds	r3, r7, r3
    38a0:	2200      	movs	r2, #0
    38a2:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
    38a4:	4b1b      	ldr	r3, [pc, #108]	; (3914 <vWifiTask+0x1fc>)
    38a6:	681b      	ldr	r3, [r3, #0]
    38a8:	220b      	movs	r2, #11
    38aa:	18b9      	adds	r1, r7, r2
    38ac:	2200      	movs	r2, #0
    38ae:	0018      	movs	r0, r3
    38b0:	4b3c      	ldr	r3, [pc, #240]	; (39a4 <vWifiTask+0x28c>)
    38b2:	4798      	blx	r3
    38b4:	0003      	movs	r3, r0
    38b6:	2b01      	cmp	r3, #1
    38b8:	d105      	bne.n	38c6 <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
    38ba:	230b      	movs	r3, #11
    38bc:	18fb      	adds	r3, r7, r3
    38be:	781b      	ldrb	r3, [r3, #0]
    38c0:	b25a      	sxtb	r2, r3
    38c2:	4b33      	ldr	r3, [pc, #204]	; (3990 <vWifiTask+0x278>)
    38c4:	701a      	strb	r2, [r3, #0]
        }

        // Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if (isPressed) {
    38c6:	4b38      	ldr	r3, [pc, #224]	; (39a8 <vWifiTask+0x290>)
    38c8:	781b      	ldrb	r3, [r3, #0]
    38ca:	b2db      	uxtb	r3, r3
    38cc:	2b00      	cmp	r3, #0
    38ce:	d017      	beq.n	3900 <vWifiTask+0x1e8>
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
    38d0:	4b36      	ldr	r3, [pc, #216]	; (39ac <vWifiTask+0x294>)
    38d2:	0018      	movs	r0, r3
    38d4:	4b36      	ldr	r3, [pc, #216]	; (39b0 <vWifiTask+0x298>)
    38d6:	4798      	blx	r3
    38d8:	0004      	movs	r4, r0
    38da:	4a34      	ldr	r2, [pc, #208]	; (39ac <vWifiTask+0x294>)
    38dc:	4935      	ldr	r1, [pc, #212]	; (39b4 <vWifiTask+0x29c>)
    38de:	4836      	ldr	r0, [pc, #216]	; (39b8 <vWifiTask+0x2a0>)
    38e0:	2300      	movs	r3, #0
    38e2:	9301      	str	r3, [sp, #4]
    38e4:	2301      	movs	r3, #1
    38e6:	9300      	str	r3, [sp, #0]
    38e8:	0023      	movs	r3, r4
    38ea:	4c34      	ldr	r4, [pc, #208]	; (39bc <vWifiTask+0x2a4>)
    38ec:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
    38ee:	4a2f      	ldr	r2, [pc, #188]	; (39ac <vWifiTask+0x294>)
    38f0:	4b33      	ldr	r3, [pc, #204]	; (39c0 <vWifiTask+0x2a8>)
    38f2:	0019      	movs	r1, r3
    38f4:	2001      	movs	r0, #1
    38f6:	4b19      	ldr	r3, [pc, #100]	; (395c <vWifiTask+0x244>)
    38f8:	4798      	blx	r3
            isPressed = false;
    38fa:	4b2b      	ldr	r3, [pc, #172]	; (39a8 <vWifiTask+0x290>)
    38fc:	2200      	movs	r2, #0
    38fe:	701a      	strb	r2, [r3, #0]
        }

        vTaskDelay(100);
    3900:	2064      	movs	r0, #100	; 0x64
    3902:	4b01      	ldr	r3, [pc, #4]	; (3908 <vWifiTask+0x1f0>)
    3904:	4798      	blx	r3
    while (1) {
    3906:	e7ab      	b.n	3860 <vWifiTask+0x148>
    3908:	00008635 	.word	0x00008635
    390c:	00002299 	.word	0x00002299
    3910:	00006929 	.word	0x00006929
    3914:	20000888 	.word	0x20000888
    3918:	20000890 	.word	0x20000890
    391c:	2000088c 	.word	0x2000088c
    3920:	20000894 	.word	0x20000894
    3924:	00023c28 	.word	0x00023c28
    3928:	0000a289 	.word	0x0000a289
    392c:	00023c50 	.word	0x00023c50
    3930:	00002cd9 	.word	0x00002cd9
    3934:	00002d15 	.word	0x00002d15
    3938:	00003181 	.word	0x00003181
    393c:	00002bf5 	.word	0x00002bf5
    3940:	00003239 	.word	0x00003239
    3944:	00003279 	.word	0x00003279
    3948:	00020d8b 	.word	0x00020d8b
    394c:	0000c799 	.word	0x0000c799
    3950:	00002aa1 	.word	0x00002aa1
    3954:	0000e271 	.word	0x0000e271
    3958:	00023c6c 	.word	0x00023c6c
    395c:	0000a375 	.word	0x0000a375
    3960:	00023734 	.word	0x00023734
    3964:	00023c98 	.word	0x00023c98
    3968:	000119d1 	.word	0x000119d1
    396c:	00002dcd 	.word	0x00002dcd
    3970:	00002d99 	.word	0x00002d99
    3974:	00011a69 	.word	0x00011a69
    3978:	00023720 	.word	0x00023720
    397c:	0000e481 	.word	0x0000e481
    3980:	0000e465 	.word	0x0000e465
    3984:	200046b4 	.word	0x200046b4
    3988:	0001eb59 	.word	0x0001eb59
    398c:	00002309 	.word	0x00002309
    3990:	20000884 	.word	0x20000884
    3994:	00003479 	.word	0x00003479
    3998:	00003515 	.word	0x00003515
    399c:	000032f1 	.word	0x000032f1
    39a0:	00003385 	.word	0x00003385
    39a4:	00007489 	.word	0x00007489
    39a8:	20000f30 	.word	0x20000f30
    39ac:	2000005c 	.word	0x2000005c
    39b0:	00021143 	.word	0x00021143
    39b4:	00023cbc 	.word	0x00023cbc
    39b8:	20000af8 	.word	0x20000af8
    39bc:	0001be79 	.word	0x0001be79
    39c0:	00023cd8 	.word	0x00023cd8

000039c4 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
    39c4:	b590      	push	{r4, r7, lr}
    39c6:	b083      	sub	sp, #12
    39c8:	af00      	add	r7, sp, #0
    39ca:	0002      	movs	r2, r0
    39cc:	1dfb      	adds	r3, r7, #7
    39ce:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
    39d0:	1dfb      	adds	r3, r7, #7
    39d2:	781b      	ldrb	r3, [r3, #0]
    39d4:	2b03      	cmp	r3, #3
    39d6:	d806      	bhi.n	39e6 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
    39d8:	4b05      	ldr	r3, [pc, #20]	; (39f0 <WifiHandlerSetState+0x2c>)
    39da:	6818      	ldr	r0, [r3, #0]
    39dc:	1df9      	adds	r1, r7, #7
    39de:	2300      	movs	r3, #0
    39e0:	220a      	movs	r2, #10
    39e2:	4c04      	ldr	r4, [pc, #16]	; (39f4 <WifiHandlerSetState+0x30>)
    39e4:	47a0      	blx	r4
    }
}
    39e6:	46c0      	nop			; (mov r8, r8)
    39e8:	46bd      	mov	sp, r7
    39ea:	b003      	add	sp, #12
    39ec:	bd90      	pop	{r4, r7, pc}
    39ee:	46c0      	nop			; (mov r8, r8)
    39f0:	20000888 	.word	0x20000888
    39f4:	00006bd1 	.word	0x00006bd1

000039f8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    39f8:	b580      	push	{r7, lr}
    39fa:	b082      	sub	sp, #8
    39fc:	af00      	add	r7, sp, #0
    39fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3a00:	687b      	ldr	r3, [r7, #4]
    3a02:	2200      	movs	r2, #0
    3a04:	701a      	strb	r2, [r3, #0]
}
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	46bd      	mov	sp, r7
    3a0a:	b002      	add	sp, #8
    3a0c:	bd80      	pop	{r7, pc}
	...

00003a10 <system_apb_clock_set_mask>:
{
    3a10:	b580      	push	{r7, lr}
    3a12:	b082      	sub	sp, #8
    3a14:	af00      	add	r7, sp, #0
    3a16:	0002      	movs	r2, r0
    3a18:	6039      	str	r1, [r7, #0]
    3a1a:	1dfb      	adds	r3, r7, #7
    3a1c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3a1e:	1dfb      	adds	r3, r7, #7
    3a20:	781b      	ldrb	r3, [r3, #0]
    3a22:	2b01      	cmp	r3, #1
    3a24:	d00a      	beq.n	3a3c <system_apb_clock_set_mask+0x2c>
    3a26:	2b02      	cmp	r3, #2
    3a28:	d00f      	beq.n	3a4a <system_apb_clock_set_mask+0x3a>
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	d114      	bne.n	3a58 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3a2e:	4b0e      	ldr	r3, [pc, #56]	; (3a68 <system_apb_clock_set_mask+0x58>)
    3a30:	4a0d      	ldr	r2, [pc, #52]	; (3a68 <system_apb_clock_set_mask+0x58>)
    3a32:	6991      	ldr	r1, [r2, #24]
    3a34:	683a      	ldr	r2, [r7, #0]
    3a36:	430a      	orrs	r2, r1
    3a38:	619a      	str	r2, [r3, #24]
			break;
    3a3a:	e00f      	b.n	3a5c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3a3c:	4b0a      	ldr	r3, [pc, #40]	; (3a68 <system_apb_clock_set_mask+0x58>)
    3a3e:	4a0a      	ldr	r2, [pc, #40]	; (3a68 <system_apb_clock_set_mask+0x58>)
    3a40:	69d1      	ldr	r1, [r2, #28]
    3a42:	683a      	ldr	r2, [r7, #0]
    3a44:	430a      	orrs	r2, r1
    3a46:	61da      	str	r2, [r3, #28]
			break;
    3a48:	e008      	b.n	3a5c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3a4a:	4b07      	ldr	r3, [pc, #28]	; (3a68 <system_apb_clock_set_mask+0x58>)
    3a4c:	4a06      	ldr	r2, [pc, #24]	; (3a68 <system_apb_clock_set_mask+0x58>)
    3a4e:	6a11      	ldr	r1, [r2, #32]
    3a50:	683a      	ldr	r2, [r7, #0]
    3a52:	430a      	orrs	r2, r1
    3a54:	621a      	str	r2, [r3, #32]
			break;
    3a56:	e001      	b.n	3a5c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3a58:	2317      	movs	r3, #23
    3a5a:	e000      	b.n	3a5e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3a5c:	2300      	movs	r3, #0
}
    3a5e:	0018      	movs	r0, r3
    3a60:	46bd      	mov	sp, r7
    3a62:	b002      	add	sp, #8
    3a64:	bd80      	pop	{r7, pc}
    3a66:	46c0      	nop			; (mov r8, r8)
    3a68:	40000400 	.word	0x40000400

00003a6c <system_pinmux_get_config_defaults>:
{
    3a6c:	b580      	push	{r7, lr}
    3a6e:	b082      	sub	sp, #8
    3a70:	af00      	add	r7, sp, #0
    3a72:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3a74:	687b      	ldr	r3, [r7, #4]
    3a76:	2280      	movs	r2, #128	; 0x80
    3a78:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3a7a:	687b      	ldr	r3, [r7, #4]
    3a7c:	2200      	movs	r2, #0
    3a7e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3a80:	687b      	ldr	r3, [r7, #4]
    3a82:	2201      	movs	r2, #1
    3a84:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3a86:	687b      	ldr	r3, [r7, #4]
    3a88:	2200      	movs	r2, #0
    3a8a:	70da      	strb	r2, [r3, #3]
}
    3a8c:	46c0      	nop			; (mov r8, r8)
    3a8e:	46bd      	mov	sp, r7
    3a90:	b002      	add	sp, #8
    3a92:	bd80      	pop	{r7, pc}

00003a94 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    3a94:	b580      	push	{r7, lr}
    3a96:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3a98:	4b05      	ldr	r3, [pc, #20]	; (3ab0 <system_is_debugger_present+0x1c>)
    3a9a:	789b      	ldrb	r3, [r3, #2]
    3a9c:	b2db      	uxtb	r3, r3
    3a9e:	001a      	movs	r2, r3
    3aa0:	2302      	movs	r3, #2
    3aa2:	4013      	ands	r3, r2
    3aa4:	1e5a      	subs	r2, r3, #1
    3aa6:	4193      	sbcs	r3, r2
    3aa8:	b2db      	uxtb	r3, r3
}
    3aaa:	0018      	movs	r0, r3
    3aac:	46bd      	mov	sp, r7
    3aae:	bd80      	pop	{r7, pc}
    3ab0:	41002000 	.word	0x41002000

00003ab4 <system_interrupt_enter_critical_section>:
{
    3ab4:	b580      	push	{r7, lr}
    3ab6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    3ab8:	4b02      	ldr	r3, [pc, #8]	; (3ac4 <system_interrupt_enter_critical_section+0x10>)
    3aba:	4798      	blx	r3
}
    3abc:	46c0      	nop			; (mov r8, r8)
    3abe:	46bd      	mov	sp, r7
    3ac0:	bd80      	pop	{r7, pc}
    3ac2:	46c0      	nop			; (mov r8, r8)
    3ac4:	000126c9 	.word	0x000126c9

00003ac8 <system_interrupt_leave_critical_section>:
{
    3ac8:	b580      	push	{r7, lr}
    3aca:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    3acc:	4b02      	ldr	r3, [pc, #8]	; (3ad8 <system_interrupt_leave_critical_section+0x10>)
    3ace:	4798      	blx	r3
}
    3ad0:	46c0      	nop			; (mov r8, r8)
    3ad2:	46bd      	mov	sp, r7
    3ad4:	bd80      	pop	{r7, pc}
    3ad6:	46c0      	nop			; (mov r8, r8)
    3ad8:	0001271d 	.word	0x0001271d

00003adc <system_interrupt_disable>:
{
    3adc:	b580      	push	{r7, lr}
    3ade:	b082      	sub	sp, #8
    3ae0:	af00      	add	r7, sp, #0
    3ae2:	0002      	movs	r2, r0
    3ae4:	1dfb      	adds	r3, r7, #7
    3ae6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3ae8:	4a07      	ldr	r2, [pc, #28]	; (3b08 <system_interrupt_disable+0x2c>)
    3aea:	1dfb      	adds	r3, r7, #7
    3aec:	781b      	ldrb	r3, [r3, #0]
    3aee:	0019      	movs	r1, r3
    3af0:	231f      	movs	r3, #31
    3af2:	400b      	ands	r3, r1
    3af4:	2101      	movs	r1, #1
    3af6:	4099      	lsls	r1, r3
    3af8:	000b      	movs	r3, r1
    3afa:	0019      	movs	r1, r3
    3afc:	2380      	movs	r3, #128	; 0x80
    3afe:	50d1      	str	r1, [r2, r3]
}
    3b00:	46c0      	nop			; (mov r8, r8)
    3b02:	46bd      	mov	sp, r7
    3b04:	b002      	add	sp, #8
    3b06:	bd80      	pop	{r7, pc}
    3b08:	e000e100 	.word	0xe000e100

00003b0c <i2c_master_is_syncing>:
{
    3b0c:	b580      	push	{r7, lr}
    3b0e:	b084      	sub	sp, #16
    3b10:	af00      	add	r7, sp, #0
    3b12:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3b14:	687b      	ldr	r3, [r7, #4]
    3b16:	681b      	ldr	r3, [r3, #0]
    3b18:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3b1a:	68fb      	ldr	r3, [r7, #12]
    3b1c:	69db      	ldr	r3, [r3, #28]
    3b1e:	2207      	movs	r2, #7
    3b20:	4013      	ands	r3, r2
    3b22:	1e5a      	subs	r2, r3, #1
    3b24:	4193      	sbcs	r3, r2
    3b26:	b2db      	uxtb	r3, r3
}
    3b28:	0018      	movs	r0, r3
    3b2a:	46bd      	mov	sp, r7
    3b2c:	b004      	add	sp, #16
    3b2e:	bd80      	pop	{r7, pc}

00003b30 <_i2c_master_wait_for_sync>:
{
    3b30:	b580      	push	{r7, lr}
    3b32:	b082      	sub	sp, #8
    3b34:	af00      	add	r7, sp, #0
    3b36:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    3b38:	46c0      	nop			; (mov r8, r8)
    3b3a:	687b      	ldr	r3, [r7, #4]
    3b3c:	0018      	movs	r0, r3
    3b3e:	4b04      	ldr	r3, [pc, #16]	; (3b50 <_i2c_master_wait_for_sync+0x20>)
    3b40:	4798      	blx	r3
    3b42:	1e03      	subs	r3, r0, #0
    3b44:	d1f9      	bne.n	3b3a <_i2c_master_wait_for_sync+0xa>
}
    3b46:	46c0      	nop			; (mov r8, r8)
    3b48:	46bd      	mov	sp, r7
    3b4a:	b002      	add	sp, #8
    3b4c:	bd80      	pop	{r7, pc}
    3b4e:	46c0      	nop			; (mov r8, r8)
    3b50:	00003b0d 	.word	0x00003b0d

00003b54 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    3b54:	b580      	push	{r7, lr}
    3b56:	b084      	sub	sp, #16
    3b58:	af00      	add	r7, sp, #0
    3b5a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3b5c:	687b      	ldr	r3, [r7, #4]
    3b5e:	681b      	ldr	r3, [r3, #0]
    3b60:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3b62:	687b      	ldr	r3, [r7, #4]
    3b64:	681b      	ldr	r3, [r3, #0]
    3b66:	0018      	movs	r0, r3
    3b68:	4b0d      	ldr	r3, [pc, #52]	; (3ba0 <i2c_master_disable+0x4c>)
    3b6a:	4798      	blx	r3
    3b6c:	0003      	movs	r3, r0
    3b6e:	0018      	movs	r0, r3
    3b70:	4b0c      	ldr	r3, [pc, #48]	; (3ba4 <i2c_master_disable+0x50>)
    3b72:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    3b74:	687b      	ldr	r3, [r7, #4]
    3b76:	0018      	movs	r0, r3
    3b78:	4b0b      	ldr	r3, [pc, #44]	; (3ba8 <i2c_master_disable+0x54>)
    3b7a:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    3b7c:	68fb      	ldr	r3, [r7, #12]
    3b7e:	2283      	movs	r2, #131	; 0x83
    3b80:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    3b82:	68fb      	ldr	r3, [r7, #12]
    3b84:	2283      	movs	r2, #131	; 0x83
    3b86:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    3b88:	68fb      	ldr	r3, [r7, #12]
    3b8a:	681b      	ldr	r3, [r3, #0]
    3b8c:	2202      	movs	r2, #2
    3b8e:	4393      	bics	r3, r2
    3b90:	001a      	movs	r2, r3
    3b92:	68fb      	ldr	r3, [r7, #12]
    3b94:	601a      	str	r2, [r3, #0]

}
    3b96:	46c0      	nop			; (mov r8, r8)
    3b98:	46bd      	mov	sp, r7
    3b9a:	b004      	add	sp, #16
    3b9c:	bd80      	pop	{r7, pc}
    3b9e:	46c0      	nop			; (mov r8, r8)
    3ba0:	00013b9d 	.word	0x00013b9d
    3ba4:	00003add 	.word	0x00003add
    3ba8:	00003b31 	.word	0x00003b31

00003bac <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    3bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bae:	b097      	sub	sp, #92	; 0x5c
    3bb0:	af00      	add	r7, sp, #0
    3bb2:	6178      	str	r0, [r7, #20]
    3bb4:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    3bb6:	2300      	movs	r3, #0
    3bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    3bba:	2300      	movs	r3, #0
    3bbc:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    3bbe:	2300      	movs	r3, #0
    3bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    3bc2:	233b      	movs	r3, #59	; 0x3b
    3bc4:	2210      	movs	r2, #16
    3bc6:	4694      	mov	ip, r2
    3bc8:	44bc      	add	ip, r7
    3bca:	4463      	add	r3, ip
    3bcc:	2200      	movs	r2, #0
    3bce:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3bd0:	697b      	ldr	r3, [r7, #20]
    3bd2:	681b      	ldr	r3, [r3, #0]
    3bd4:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    3bd6:	697b      	ldr	r3, [r7, #20]
    3bd8:	681b      	ldr	r3, [r3, #0]
    3bda:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    3bdc:	2323      	movs	r3, #35	; 0x23
    3bde:	2210      	movs	r2, #16
    3be0:	18ba      	adds	r2, r7, r2
    3be2:	18d4      	adds	r4, r2, r3
    3be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3be6:	0018      	movs	r0, r3
    3be8:	4bc0      	ldr	r3, [pc, #768]	; (3eec <_i2c_master_set_config+0x340>)
    3bea:	4798      	blx	r3
    3bec:	0003      	movs	r3, r0
    3bee:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    3bf0:	230c      	movs	r3, #12
    3bf2:	2210      	movs	r2, #16
    3bf4:	4694      	mov	ip, r2
    3bf6:	44bc      	add	ip, r7
    3bf8:	4463      	add	r3, ip
    3bfa:	0018      	movs	r0, r3
    3bfc:	4bbc      	ldr	r3, [pc, #752]	; (3ef0 <_i2c_master_set_config+0x344>)
    3bfe:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    3c00:	693b      	ldr	r3, [r7, #16]
    3c02:	69db      	ldr	r3, [r3, #28]
    3c04:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    3c06:	693b      	ldr	r3, [r7, #16]
    3c08:	6a1b      	ldr	r3, [r3, #32]
    3c0a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    3c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3c0e:	2b00      	cmp	r3, #0
    3c10:	d106      	bne.n	3c20 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    3c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3c14:	2100      	movs	r1, #0
    3c16:	0018      	movs	r0, r3
    3c18:	4bb6      	ldr	r3, [pc, #728]	; (3ef4 <_i2c_master_set_config+0x348>)
    3c1a:	4798      	blx	r3
    3c1c:	0003      	movs	r3, r0
    3c1e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    3c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3c22:	b2da      	uxtb	r2, r3
    3c24:	230c      	movs	r3, #12
    3c26:	2110      	movs	r1, #16
    3c28:	468c      	mov	ip, r1
    3c2a:	44bc      	add	ip, r7
    3c2c:	4463      	add	r3, ip
    3c2e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3c30:	230c      	movs	r3, #12
    3c32:	2210      	movs	r2, #16
    3c34:	4694      	mov	ip, r2
    3c36:	44bc      	add	ip, r7
    3c38:	4463      	add	r3, ip
    3c3a:	2202      	movs	r2, #2
    3c3c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    3c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3c40:	0c1b      	lsrs	r3, r3, #16
    3c42:	b2db      	uxtb	r3, r3
    3c44:	220c      	movs	r2, #12
    3c46:	2110      	movs	r1, #16
    3c48:	468c      	mov	ip, r1
    3c4a:	44bc      	add	ip, r7
    3c4c:	4462      	add	r2, ip
    3c4e:	0011      	movs	r1, r2
    3c50:	0018      	movs	r0, r3
    3c52:	4ba9      	ldr	r3, [pc, #676]	; (3ef8 <_i2c_master_set_config+0x34c>)
    3c54:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    3c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3c58:	2b00      	cmp	r3, #0
    3c5a:	d106      	bne.n	3c6a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    3c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3c5e:	2101      	movs	r1, #1
    3c60:	0018      	movs	r0, r3
    3c62:	4ba4      	ldr	r3, [pc, #656]	; (3ef4 <_i2c_master_set_config+0x348>)
    3c64:	4798      	blx	r3
    3c66:	0003      	movs	r3, r0
    3c68:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    3c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3c6c:	b2da      	uxtb	r2, r3
    3c6e:	230c      	movs	r3, #12
    3c70:	2110      	movs	r1, #16
    3c72:	468c      	mov	ip, r1
    3c74:	44bc      	add	ip, r7
    3c76:	4463      	add	r3, ip
    3c78:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3c7a:	230c      	movs	r3, #12
    3c7c:	2210      	movs	r2, #16
    3c7e:	4694      	mov	ip, r2
    3c80:	44bc      	add	ip, r7
    3c82:	4463      	add	r3, ip
    3c84:	2202      	movs	r2, #2
    3c86:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    3c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3c8a:	0c1b      	lsrs	r3, r3, #16
    3c8c:	b2db      	uxtb	r3, r3
    3c8e:	220c      	movs	r2, #12
    3c90:	2110      	movs	r1, #16
    3c92:	468c      	mov	ip, r1
    3c94:	44bc      	add	ip, r7
    3c96:	4462      	add	r2, ip
    3c98:	0011      	movs	r1, r2
    3c9a:	0018      	movs	r0, r3
    3c9c:	4b96      	ldr	r3, [pc, #600]	; (3ef8 <_i2c_master_set_config+0x34c>)
    3c9e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    3ca0:	693b      	ldr	r3, [r7, #16]
    3ca2:	8a9a      	ldrh	r2, [r3, #20]
    3ca4:	697b      	ldr	r3, [r7, #20]
    3ca6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    3ca8:	693b      	ldr	r3, [r7, #16]
    3caa:	8ada      	ldrh	r2, [r3, #22]
    3cac:	697b      	ldr	r3, [r7, #20]
    3cae:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3cb0:	693b      	ldr	r3, [r7, #16]
    3cb2:	7e1b      	ldrb	r3, [r3, #24]
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	d103      	bne.n	3cc0 <_i2c_master_set_config+0x114>
    3cb8:	4b90      	ldr	r3, [pc, #576]	; (3efc <_i2c_master_set_config+0x350>)
    3cba:	4798      	blx	r3
    3cbc:	1e03      	subs	r3, r0, #0
    3cbe:	d002      	beq.n	3cc6 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3cc0:	2380      	movs	r3, #128	; 0x80
    3cc2:	657b      	str	r3, [r7, #84]	; 0x54
    3cc4:	e001      	b.n	3cca <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    3cc6:	2300      	movs	r3, #0
    3cc8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    3cca:	693b      	ldr	r3, [r7, #16]
    3ccc:	691b      	ldr	r3, [r3, #16]
    3cce:	2b00      	cmp	r3, #0
    3cd0:	d004      	beq.n	3cdc <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    3cd2:	693b      	ldr	r3, [r7, #16]
    3cd4:	691b      	ldr	r3, [r3, #16]
    3cd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3cd8:	4313      	orrs	r3, r2
    3cda:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    3cdc:	693b      	ldr	r3, [r7, #16]
    3cde:	689b      	ldr	r3, [r3, #8]
    3ce0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3ce2:	4313      	orrs	r3, r2
    3ce4:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    3ce6:	693b      	ldr	r3, [r7, #16]
    3ce8:	2224      	movs	r2, #36	; 0x24
    3cea:	5c9b      	ldrb	r3, [r3, r2]
    3cec:	2b00      	cmp	r3, #0
    3cee:	d004      	beq.n	3cfa <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    3cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3cf2:	2280      	movs	r2, #128	; 0x80
    3cf4:	05d2      	lsls	r2, r2, #23
    3cf6:	4313      	orrs	r3, r2
    3cf8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    3cfa:	693b      	ldr	r3, [r7, #16]
    3cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d004      	beq.n	3d0c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    3d02:	693b      	ldr	r3, [r7, #16]
    3d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3d08:	4313      	orrs	r3, r2
    3d0a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    3d0c:	693b      	ldr	r3, [r7, #16]
    3d0e:	222c      	movs	r2, #44	; 0x2c
    3d10:	5c9b      	ldrb	r3, [r3, r2]
    3d12:	2b00      	cmp	r3, #0
    3d14:	d105      	bne.n	3d22 <_i2c_master_set_config+0x176>
    3d16:	693b      	ldr	r3, [r7, #16]
    3d18:	689a      	ldr	r2, [r3, #8]
    3d1a:	2380      	movs	r3, #128	; 0x80
    3d1c:	049b      	lsls	r3, r3, #18
    3d1e:	429a      	cmp	r2, r3
    3d20:	d104      	bne.n	3d2c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    3d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d24:	2280      	movs	r2, #128	; 0x80
    3d26:	0512      	lsls	r2, r2, #20
    3d28:	4313      	orrs	r3, r2
    3d2a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    3d2c:	693b      	ldr	r3, [r7, #16]
    3d2e:	222d      	movs	r2, #45	; 0x2d
    3d30:	5c9b      	ldrb	r3, [r3, r2]
    3d32:	2b00      	cmp	r3, #0
    3d34:	d004      	beq.n	3d40 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    3d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d38:	2280      	movs	r2, #128	; 0x80
    3d3a:	0412      	lsls	r2, r2, #16
    3d3c:	4313      	orrs	r3, r2
    3d3e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    3d40:	693b      	ldr	r3, [r7, #16]
    3d42:	222e      	movs	r2, #46	; 0x2e
    3d44:	5c9b      	ldrb	r3, [r3, r2]
    3d46:	2b00      	cmp	r3, #0
    3d48:	d004      	beq.n	3d54 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    3d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d4c:	2280      	movs	r2, #128	; 0x80
    3d4e:	03d2      	lsls	r2, r2, #15
    3d50:	4313      	orrs	r3, r2
    3d52:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    3d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d56:	681a      	ldr	r2, [r3, #0]
    3d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3d5a:	431a      	orrs	r2, r3
    3d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d5e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    3d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d62:	2280      	movs	r2, #128	; 0x80
    3d64:	0052      	lsls	r2, r2, #1
    3d66:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    3d68:	2323      	movs	r3, #35	; 0x23
    3d6a:	2210      	movs	r2, #16
    3d6c:	4694      	mov	ip, r2
    3d6e:	44bc      	add	ip, r7
    3d70:	4463      	add	r3, ip
    3d72:	781b      	ldrb	r3, [r3, #0]
    3d74:	3314      	adds	r3, #20
    3d76:	b2db      	uxtb	r3, r3
    3d78:	0018      	movs	r0, r3
    3d7a:	4b61      	ldr	r3, [pc, #388]	; (3f00 <_i2c_master_set_config+0x354>)
    3d7c:	4798      	blx	r3
    3d7e:	0003      	movs	r3, r0
    3d80:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    3d82:	693b      	ldr	r3, [r7, #16]
    3d84:	681b      	ldr	r3, [r3, #0]
    3d86:	22fa      	movs	r2, #250	; 0xfa
    3d88:	0092      	lsls	r2, r2, #2
    3d8a:	4353      	muls	r3, r2
    3d8c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    3d8e:	693b      	ldr	r3, [r7, #16]
    3d90:	685b      	ldr	r3, [r3, #4]
    3d92:	22fa      	movs	r2, #250	; 0xfa
    3d94:	0092      	lsls	r2, r2, #2
    3d96:	4353      	muls	r3, r2
    3d98:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    3d9a:	693b      	ldr	r3, [r7, #16]
    3d9c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3d9e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    3da0:	4b58      	ldr	r3, [pc, #352]	; (3f04 <_i2c_master_set_config+0x358>)
    3da2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3da4:	4798      	blx	r3
    3da6:	0005      	movs	r5, r0
    3da8:	000e      	movs	r6, r1
    3daa:	4b56      	ldr	r3, [pc, #344]	; (3f04 <_i2c_master_set_config+0x358>)
    3dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3dae:	4798      	blx	r3
    3db0:	60b8      	str	r0, [r7, #8]
    3db2:	60f9      	str	r1, [r7, #12]
    3db4:	4b53      	ldr	r3, [pc, #332]	; (3f04 <_i2c_master_set_config+0x358>)
    3db6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3db8:	4798      	blx	r3
    3dba:	4c53      	ldr	r4, [pc, #332]	; (3f08 <_i2c_master_set_config+0x35c>)
    3dbc:	4a53      	ldr	r2, [pc, #332]	; (3f0c <_i2c_master_set_config+0x360>)
    3dbe:	4b54      	ldr	r3, [pc, #336]	; (3f10 <_i2c_master_set_config+0x364>)
    3dc0:	47a0      	blx	r4
    3dc2:	0003      	movs	r3, r0
    3dc4:	000c      	movs	r4, r1
    3dc6:	603b      	str	r3, [r7, #0]
    3dc8:	607c      	str	r4, [r7, #4]
    3dca:	4b4e      	ldr	r3, [pc, #312]	; (3f04 <_i2c_master_set_config+0x358>)
    3dcc:	6a38      	ldr	r0, [r7, #32]
    3dce:	4798      	blx	r3
    3dd0:	0002      	movs	r2, r0
    3dd2:	000b      	movs	r3, r1
    3dd4:	4c4c      	ldr	r4, [pc, #304]	; (3f08 <_i2c_master_set_config+0x35c>)
    3dd6:	6838      	ldr	r0, [r7, #0]
    3dd8:	6879      	ldr	r1, [r7, #4]
    3dda:	47a0      	blx	r4
    3ddc:	0003      	movs	r3, r0
    3dde:	000c      	movs	r4, r1
    3de0:	0018      	movs	r0, r3
    3de2:	0021      	movs	r1, r4
    3de4:	4c4b      	ldr	r4, [pc, #300]	; (3f14 <_i2c_master_set_config+0x368>)
    3de6:	2200      	movs	r2, #0
    3de8:	4b4b      	ldr	r3, [pc, #300]	; (3f18 <_i2c_master_set_config+0x36c>)
    3dea:	47a0      	blx	r4
    3dec:	0003      	movs	r3, r0
    3dee:	000c      	movs	r4, r1
    3df0:	001a      	movs	r2, r3
    3df2:	0023      	movs	r3, r4
    3df4:	4c44      	ldr	r4, [pc, #272]	; (3f08 <_i2c_master_set_config+0x35c>)
    3df6:	68b8      	ldr	r0, [r7, #8]
    3df8:	68f9      	ldr	r1, [r7, #12]
    3dfa:	47a0      	blx	r4
    3dfc:	0003      	movs	r3, r0
    3dfe:	000c      	movs	r4, r1
    3e00:	001a      	movs	r2, r3
    3e02:	0023      	movs	r3, r4
    3e04:	4c45      	ldr	r4, [pc, #276]	; (3f1c <_i2c_master_set_config+0x370>)
    3e06:	0028      	movs	r0, r5
    3e08:	0031      	movs	r1, r6
    3e0a:	47a0      	blx	r4
    3e0c:	0003      	movs	r3, r0
    3e0e:	000c      	movs	r4, r1
    3e10:	001d      	movs	r5, r3
    3e12:	0026      	movs	r6, r4
    3e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e16:	005a      	lsls	r2, r3, #1
    3e18:	4b3a      	ldr	r3, [pc, #232]	; (3f04 <_i2c_master_set_config+0x358>)
    3e1a:	0010      	movs	r0, r2
    3e1c:	4798      	blx	r3
    3e1e:	0002      	movs	r2, r0
    3e20:	000b      	movs	r3, r1
    3e22:	4c3c      	ldr	r4, [pc, #240]	; (3f14 <_i2c_master_set_config+0x368>)
    3e24:	0028      	movs	r0, r5
    3e26:	0031      	movs	r1, r6
    3e28:	47a0      	blx	r4
    3e2a:	0003      	movs	r3, r0
    3e2c:	000c      	movs	r4, r1
    3e2e:	0018      	movs	r0, r3
    3e30:	0021      	movs	r1, r4
    3e32:	4c3a      	ldr	r4, [pc, #232]	; (3f1c <_i2c_master_set_config+0x370>)
    3e34:	2200      	movs	r2, #0
    3e36:	4b3a      	ldr	r3, [pc, #232]	; (3f20 <_i2c_master_set_config+0x374>)
    3e38:	47a0      	blx	r4
    3e3a:	0003      	movs	r3, r0
    3e3c:	000c      	movs	r4, r1
    3e3e:	001d      	movs	r5, r3
    3e40:	0026      	movs	r6, r4
    3e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e44:	005a      	lsls	r2, r3, #1
    3e46:	4b2f      	ldr	r3, [pc, #188]	; (3f04 <_i2c_master_set_config+0x358>)
    3e48:	0010      	movs	r0, r2
    3e4a:	4798      	blx	r3
    3e4c:	0002      	movs	r2, r0
    3e4e:	000b      	movs	r3, r1
    3e50:	4c34      	ldr	r4, [pc, #208]	; (3f24 <_i2c_master_set_config+0x378>)
    3e52:	0028      	movs	r0, r5
    3e54:	0031      	movs	r1, r6
    3e56:	47a0      	blx	r4
    3e58:	0003      	movs	r3, r0
    3e5a:	000c      	movs	r4, r1
    3e5c:	0019      	movs	r1, r3
    3e5e:	0022      	movs	r2, r4
    3e60:	4b31      	ldr	r3, [pc, #196]	; (3f28 <_i2c_master_set_config+0x37c>)
    3e62:	0008      	movs	r0, r1
    3e64:	0011      	movs	r1, r2
    3e66:	4798      	blx	r3
    3e68:	0003      	movs	r3, r0
    3e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    3e6c:	693b      	ldr	r3, [r7, #16]
    3e6e:	689a      	ldr	r2, [r3, #8]
    3e70:	2380      	movs	r3, #128	; 0x80
    3e72:	049b      	lsls	r3, r3, #18
    3e74:	429a      	cmp	r2, r3
    3e76:	d16a      	bne.n	3f4e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    3e78:	4b22      	ldr	r3, [pc, #136]	; (3f04 <_i2c_master_set_config+0x358>)
    3e7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3e7c:	4798      	blx	r3
    3e7e:	4c25      	ldr	r4, [pc, #148]	; (3f14 <_i2c_master_set_config+0x368>)
    3e80:	0002      	movs	r2, r0
    3e82:	000b      	movs	r3, r1
    3e84:	47a0      	blx	r4
    3e86:	0003      	movs	r3, r0
    3e88:	000c      	movs	r4, r1
    3e8a:	001d      	movs	r5, r3
    3e8c:	0026      	movs	r6, r4
    3e8e:	4b1d      	ldr	r3, [pc, #116]	; (3f04 <_i2c_master_set_config+0x358>)
    3e90:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3e92:	4798      	blx	r3
    3e94:	4c1c      	ldr	r4, [pc, #112]	; (3f08 <_i2c_master_set_config+0x35c>)
    3e96:	2200      	movs	r2, #0
    3e98:	4b24      	ldr	r3, [pc, #144]	; (3f2c <_i2c_master_set_config+0x380>)
    3e9a:	47a0      	blx	r4
    3e9c:	0003      	movs	r3, r0
    3e9e:	000c      	movs	r4, r1
    3ea0:	001a      	movs	r2, r3
    3ea2:	0023      	movs	r3, r4
    3ea4:	4c1f      	ldr	r4, [pc, #124]	; (3f24 <_i2c_master_set_config+0x378>)
    3ea6:	0028      	movs	r0, r5
    3ea8:	0031      	movs	r1, r6
    3eaa:	47a0      	blx	r4
    3eac:	0003      	movs	r3, r0
    3eae:	000c      	movs	r4, r1
    3eb0:	0018      	movs	r0, r3
    3eb2:	0021      	movs	r1, r4
    3eb4:	4c19      	ldr	r4, [pc, #100]	; (3f1c <_i2c_master_set_config+0x370>)
    3eb6:	2200      	movs	r2, #0
    3eb8:	4b19      	ldr	r3, [pc, #100]	; (3f20 <_i2c_master_set_config+0x374>)
    3eba:	47a0      	blx	r4
    3ebc:	0003      	movs	r3, r0
    3ebe:	000c      	movs	r4, r1
    3ec0:	0019      	movs	r1, r3
    3ec2:	0022      	movs	r2, r4
    3ec4:	4b18      	ldr	r3, [pc, #96]	; (3f28 <_i2c_master_set_config+0x37c>)
    3ec6:	0008      	movs	r0, r1
    3ec8:	0011      	movs	r1, r2
    3eca:	4798      	blx	r3
    3ecc:	0003      	movs	r3, r0
    3ece:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    3ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3ed2:	2b00      	cmp	r3, #0
    3ed4:	d02e      	beq.n	3f34 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    3ed6:	4b16      	ldr	r3, [pc, #88]	; (3f30 <_i2c_master_set_config+0x384>)
    3ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3eda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3edc:	4798      	blx	r3
    3ede:	0003      	movs	r3, r0
    3ee0:	1e9a      	subs	r2, r3, #2
    3ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3ee4:	1ad3      	subs	r3, r2, r3
    3ee6:	653b      	str	r3, [r7, #80]	; 0x50
    3ee8:	e031      	b.n	3f4e <_i2c_master_set_config+0x3a2>
    3eea:	46c0      	nop			; (mov r8, r8)
    3eec:	00013acd 	.word	0x00013acd
    3ef0:	00003a6d 	.word	0x00003a6d
    3ef4:	00013911 	.word	0x00013911
    3ef8:	000166bd 	.word	0x000166bd
    3efc:	00003a95 	.word	0x00003a95
    3f00:	00016481 	.word	0x00016481
    3f04:	00020c2d 	.word	0x00020c2d
    3f08:	00020099 	.word	0x00020099
    3f0c:	e826d695 	.word	0xe826d695
    3f10:	3e112e0b 	.word	0x3e112e0b
    3f14:	0001f411 	.word	0x0001f411
    3f18:	40240000 	.word	0x40240000
    3f1c:	00020599 	.word	0x00020599
    3f20:	3ff00000 	.word	0x3ff00000
    3f24:	0001fa31 	.word	0x0001fa31
    3f28:	00020bc5 	.word	0x00020bc5
    3f2c:	40080000 	.word	0x40080000
    3f30:	0001f0d1 	.word	0x0001f0d1
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    3f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f36:	005a      	lsls	r2, r3, #1
    3f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3f3a:	18d3      	adds	r3, r2, r3
    3f3c:	1e5a      	subs	r2, r3, #1
    3f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f40:	0059      	lsls	r1, r3, #1
    3f42:	4b1d      	ldr	r3, [pc, #116]	; (3fb8 <_i2c_master_set_config+0x40c>)
    3f44:	0010      	movs	r0, r2
    3f46:	4798      	blx	r3
    3f48:	0003      	movs	r3, r0
    3f4a:	3b01      	subs	r3, #1
    3f4c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f50:	2bff      	cmp	r3, #255	; 0xff
    3f52:	dc08      	bgt.n	3f66 <_i2c_master_set_config+0x3ba>
    3f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f56:	2b00      	cmp	r3, #0
    3f58:	db05      	blt.n	3f66 <_i2c_master_set_config+0x3ba>
    3f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3f5c:	2bff      	cmp	r3, #255	; 0xff
    3f5e:	dc02      	bgt.n	3f66 <_i2c_master_set_config+0x3ba>
    3f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3f62:	2b00      	cmp	r3, #0
    3f64:	da06      	bge.n	3f74 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3f66:	233b      	movs	r3, #59	; 0x3b
    3f68:	2210      	movs	r2, #16
    3f6a:	4694      	mov	ip, r2
    3f6c:	44bc      	add	ip, r7
    3f6e:	4463      	add	r3, ip
    3f70:	2240      	movs	r2, #64	; 0x40
    3f72:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    3f74:	233b      	movs	r3, #59	; 0x3b
    3f76:	2210      	movs	r2, #16
    3f78:	4694      	mov	ip, r2
    3f7a:	44bc      	add	ip, r7
    3f7c:	4463      	add	r3, ip
    3f7e:	781b      	ldrb	r3, [r3, #0]
    3f80:	2b40      	cmp	r3, #64	; 0x40
    3f82:	d00e      	beq.n	3fa2 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f86:	22ff      	movs	r2, #255	; 0xff
    3f88:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    3f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3f8c:	041b      	lsls	r3, r3, #16
    3f8e:	0019      	movs	r1, r3
    3f90:	23ff      	movs	r3, #255	; 0xff
    3f92:	041b      	lsls	r3, r3, #16
    3f94:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3f96:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    3f98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3f9a:	0612      	lsls	r2, r2, #24
    3f9c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3fa0:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    3fa2:	233b      	movs	r3, #59	; 0x3b
    3fa4:	2210      	movs	r2, #16
    3fa6:	4694      	mov	ip, r2
    3fa8:	44bc      	add	ip, r7
    3faa:	4463      	add	r3, ip
    3fac:	781b      	ldrb	r3, [r3, #0]
}
    3fae:	0018      	movs	r0, r3
    3fb0:	46bd      	mov	sp, r7
    3fb2:	b017      	add	sp, #92	; 0x5c
    3fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fb6:	46c0      	nop			; (mov r8, r8)
    3fb8:	0001f0d1 	.word	0x0001f0d1

00003fbc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    3fbc:	b590      	push	{r4, r7, lr}
    3fbe:	b08b      	sub	sp, #44	; 0x2c
    3fc0:	af00      	add	r7, sp, #0
    3fc2:	60f8      	str	r0, [r7, #12]
    3fc4:	60b9      	str	r1, [r7, #8]
    3fc6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    3fc8:	68fb      	ldr	r3, [r7, #12]
    3fca:	68ba      	ldr	r2, [r7, #8]
    3fcc:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3fce:	68fb      	ldr	r3, [r7, #12]
    3fd0:	681b      	ldr	r3, [r3, #0]
    3fd2:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3fd4:	68fb      	ldr	r3, [r7, #12]
    3fd6:	681b      	ldr	r3, [r3, #0]
    3fd8:	0018      	movs	r0, r3
    3fda:	4b3b      	ldr	r3, [pc, #236]	; (40c8 <i2c_master_init+0x10c>)
    3fdc:	4798      	blx	r3
    3fde:	0003      	movs	r3, r0
    3fe0:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3fe2:	6a3b      	ldr	r3, [r7, #32]
    3fe4:	3302      	adds	r3, #2
    3fe6:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3fe8:	6a3b      	ldr	r3, [r7, #32]
    3fea:	3314      	adds	r3, #20
    3fec:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3fee:	2201      	movs	r2, #1
    3ff0:	69fb      	ldr	r3, [r7, #28]
    3ff2:	409a      	lsls	r2, r3
    3ff4:	0013      	movs	r3, r2
    3ff6:	0019      	movs	r1, r3
    3ff8:	2002      	movs	r0, #2
    3ffa:	4b34      	ldr	r3, [pc, #208]	; (40cc <i2c_master_init+0x110>)
    3ffc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3ffe:	2314      	movs	r3, #20
    4000:	18fb      	adds	r3, r7, r3
    4002:	0018      	movs	r0, r3
    4004:	4b32      	ldr	r3, [pc, #200]	; (40d0 <i2c_master_init+0x114>)
    4006:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4008:	687b      	ldr	r3, [r7, #4]
    400a:	7b1a      	ldrb	r2, [r3, #12]
    400c:	2314      	movs	r3, #20
    400e:	18fb      	adds	r3, r7, r3
    4010:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4012:	69bb      	ldr	r3, [r7, #24]
    4014:	b2db      	uxtb	r3, r3
    4016:	2214      	movs	r2, #20
    4018:	18ba      	adds	r2, r7, r2
    401a:	0011      	movs	r1, r2
    401c:	0018      	movs	r0, r3
    401e:	4b2d      	ldr	r3, [pc, #180]	; (40d4 <i2c_master_init+0x118>)
    4020:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4022:	69bb      	ldr	r3, [r7, #24]
    4024:	b2db      	uxtb	r3, r3
    4026:	0018      	movs	r0, r3
    4028:	4b2b      	ldr	r3, [pc, #172]	; (40d8 <i2c_master_init+0x11c>)
    402a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    402c:	687b      	ldr	r3, [r7, #4]
    402e:	7b1b      	ldrb	r3, [r3, #12]
    4030:	2100      	movs	r1, #0
    4032:	0018      	movs	r0, r3
    4034:	4b29      	ldr	r3, [pc, #164]	; (40dc <i2c_master_init+0x120>)
    4036:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    403a:	681b      	ldr	r3, [r3, #0]
    403c:	2202      	movs	r2, #2
    403e:	4013      	ands	r3, r2
    4040:	d001      	beq.n	4046 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    4042:	231c      	movs	r3, #28
    4044:	e03b      	b.n	40be <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    4046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4048:	681b      	ldr	r3, [r3, #0]
    404a:	2201      	movs	r2, #1
    404c:	4013      	ands	r3, r2
    404e:	d001      	beq.n	4054 <i2c_master_init+0x98>
		return STATUS_BUSY;
    4050:	2305      	movs	r3, #5
    4052:	e034      	b.n	40be <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4054:	68fb      	ldr	r3, [r7, #12]
    4056:	681b      	ldr	r3, [r3, #0]
    4058:	2217      	movs	r2, #23
    405a:	18bc      	adds	r4, r7, r2
    405c:	0018      	movs	r0, r3
    405e:	4b1a      	ldr	r3, [pc, #104]	; (40c8 <i2c_master_init+0x10c>)
    4060:	4798      	blx	r3
    4062:	0003      	movs	r3, r0
    4064:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    4066:	4a1e      	ldr	r2, [pc, #120]	; (40e0 <i2c_master_init+0x124>)
    4068:	2317      	movs	r3, #23
    406a:	18fb      	adds	r3, r7, r3
    406c:	781b      	ldrb	r3, [r3, #0]
    406e:	0011      	movs	r1, r2
    4070:	0018      	movs	r0, r3
    4072:	4b1c      	ldr	r3, [pc, #112]	; (40e4 <i2c_master_init+0x128>)
    4074:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4076:	2317      	movs	r3, #23
    4078:	18fb      	adds	r3, r7, r3
    407a:	781a      	ldrb	r2, [r3, #0]
    407c:	4b1a      	ldr	r3, [pc, #104]	; (40e8 <i2c_master_init+0x12c>)
    407e:	0092      	lsls	r2, r2, #2
    4080:	68f9      	ldr	r1, [r7, #12]
    4082:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    4084:	68fb      	ldr	r3, [r7, #12]
    4086:	2200      	movs	r2, #0
    4088:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    408a:	68fb      	ldr	r3, [r7, #12]
    408c:	2200      	movs	r2, #0
    408e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    4090:	68fb      	ldr	r3, [r7, #12]
    4092:	2200      	movs	r2, #0
    4094:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    4096:	68fb      	ldr	r3, [r7, #12]
    4098:	2200      	movs	r2, #0
    409a:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    409c:	68fb      	ldr	r3, [r7, #12]
    409e:	2225      	movs	r2, #37	; 0x25
    40a0:	2100      	movs	r1, #0
    40a2:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    40a4:	68fb      	ldr	r3, [r7, #12]
    40a6:	2200      	movs	r2, #0
    40a8:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    40aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40ac:	2214      	movs	r2, #20
    40ae:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    40b0:	687a      	ldr	r2, [r7, #4]
    40b2:	68fb      	ldr	r3, [r7, #12]
    40b4:	0011      	movs	r1, r2
    40b6:	0018      	movs	r0, r3
    40b8:	4b0c      	ldr	r3, [pc, #48]	; (40ec <i2c_master_init+0x130>)
    40ba:	4798      	blx	r3
    40bc:	0003      	movs	r3, r0
}
    40be:	0018      	movs	r0, r3
    40c0:	46bd      	mov	sp, r7
    40c2:	b00b      	add	sp, #44	; 0x2c
    40c4:	bd90      	pop	{r4, r7, pc}
    40c6:	46c0      	nop			; (mov r8, r8)
    40c8:	00013acd 	.word	0x00013acd
    40cc:	00003a11 	.word	0x00003a11
    40d0:	000039f9 	.word	0x000039f9
    40d4:	0001635d 	.word	0x0001635d
    40d8:	000163a1 	.word	0x000163a1
    40dc:	00013885 	.word	0x00013885
    40e0:	00000eb9 	.word	0x00000eb9
    40e4:	00013b31 	.word	0x00013b31
    40e8:	20005a0c 	.word	0x20005a0c
    40ec:	00003bad 	.word	0x00003bad

000040f0 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    40f0:	b580      	push	{r7, lr}
    40f2:	b084      	sub	sp, #16
    40f4:	af00      	add	r7, sp, #0
    40f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    40f8:	687b      	ldr	r3, [r7, #4]
    40fa:	681b      	ldr	r3, [r3, #0]
    40fc:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    40fe:	687b      	ldr	r3, [r7, #4]
    4100:	0018      	movs	r0, r3
    4102:	4b0f      	ldr	r3, [pc, #60]	; (4140 <i2c_master_reset+0x50>)
    4104:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	0018      	movs	r0, r3
    410a:	4b0e      	ldr	r3, [pc, #56]	; (4144 <i2c_master_reset+0x54>)
    410c:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
    410e:	4b0e      	ldr	r3, [pc, #56]	; (4148 <i2c_master_reset+0x58>)
    4110:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    4112:	687b      	ldr	r3, [r7, #4]
    4114:	681b      	ldr	r3, [r3, #0]
    4116:	0018      	movs	r0, r3
    4118:	4b0c      	ldr	r3, [pc, #48]	; (414c <i2c_master_reset+0x5c>)
    411a:	4798      	blx	r3
    411c:	0003      	movs	r3, r0
    411e:	0018      	movs	r0, r3
    4120:	4b0b      	ldr	r3, [pc, #44]	; (4150 <i2c_master_reset+0x60>)
    4122:	4798      	blx	r3
	system_interrupt_leave_critical_section();
    4124:	4b0b      	ldr	r3, [pc, #44]	; (4154 <i2c_master_reset+0x64>)
    4126:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    4128:	687b      	ldr	r3, [r7, #4]
    412a:	0018      	movs	r0, r3
    412c:	4b04      	ldr	r3, [pc, #16]	; (4140 <i2c_master_reset+0x50>)
    412e:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    4130:	68fb      	ldr	r3, [r7, #12]
    4132:	2201      	movs	r2, #1
    4134:	601a      	str	r2, [r3, #0]
}
    4136:	46c0      	nop			; (mov r8, r8)
    4138:	46bd      	mov	sp, r7
    413a:	b004      	add	sp, #16
    413c:	bd80      	pop	{r7, pc}
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	00003b31 	.word	0x00003b31
    4144:	00003b55 	.word	0x00003b55
    4148:	00003ab5 	.word	0x00003ab5
    414c:	00013b9d 	.word	0x00013b9d
    4150:	000164d9 	.word	0x000164d9
    4154:	00003ac9 	.word	0x00003ac9

00004158 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    4158:	b580      	push	{r7, lr}
    415a:	b084      	sub	sp, #16
    415c:	af00      	add	r7, sp, #0
    415e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4160:	687b      	ldr	r3, [r7, #4]
    4162:	681b      	ldr	r3, [r3, #0]
    4164:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    4166:	68fb      	ldr	r3, [r7, #12]
    4168:	7e1b      	ldrb	r3, [r3, #24]
    416a:	b2db      	uxtb	r3, r3
    416c:	001a      	movs	r2, r3
    416e:	2302      	movs	r3, #2
    4170:	4013      	ands	r3, r2
    4172:	d00b      	beq.n	418c <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    4174:	68fb      	ldr	r3, [r7, #12]
    4176:	2202      	movs	r2, #2
    4178:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    417a:	68fb      	ldr	r3, [r7, #12]
    417c:	8b5b      	ldrh	r3, [r3, #26]
    417e:	b29b      	uxth	r3, r3
    4180:	001a      	movs	r2, r3
    4182:	2302      	movs	r3, #2
    4184:	4013      	ands	r3, r2
    4186:	d011      	beq.n	41ac <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    4188:	2341      	movs	r3, #65	; 0x41
    418a:	e010      	b.n	41ae <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    418c:	68fb      	ldr	r3, [r7, #12]
    418e:	8b5b      	ldrh	r3, [r3, #26]
    4190:	b29b      	uxth	r3, r3
    4192:	001a      	movs	r2, r3
    4194:	2304      	movs	r3, #4
    4196:	4013      	ands	r3, r2
    4198:	d008      	beq.n	41ac <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    419a:	68fb      	ldr	r3, [r7, #12]
    419c:	685b      	ldr	r3, [r3, #4]
    419e:	22c0      	movs	r2, #192	; 0xc0
    41a0:	0292      	lsls	r2, r2, #10
    41a2:	431a      	orrs	r2, r3
    41a4:	68fb      	ldr	r3, [r7, #12]
    41a6:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    41a8:	2318      	movs	r3, #24
    41aa:	e000      	b.n	41ae <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    41ac:	2300      	movs	r3, #0
}
    41ae:	0018      	movs	r0, r3
    41b0:	46bd      	mov	sp, r7
    41b2:	b004      	add	sp, #16
    41b4:	bd80      	pop	{r7, pc}

000041b6 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    41b6:	b580      	push	{r7, lr}
    41b8:	b084      	sub	sp, #16
    41ba:	af00      	add	r7, sp, #0
    41bc:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    41be:	687b      	ldr	r3, [r7, #4]
    41c0:	681b      	ldr	r3, [r3, #0]
    41c2:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    41c4:	230e      	movs	r3, #14
    41c6:	18fb      	adds	r3, r7, r3
    41c8:	2200      	movs	r2, #0
    41ca:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    41cc:	e00f      	b.n	41ee <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    41ce:	230e      	movs	r3, #14
    41d0:	18fb      	adds	r3, r7, r3
    41d2:	220e      	movs	r2, #14
    41d4:	18ba      	adds	r2, r7, r2
    41d6:	8812      	ldrh	r2, [r2, #0]
    41d8:	3201      	adds	r2, #1
    41da:	801a      	strh	r2, [r3, #0]
    41dc:	687b      	ldr	r3, [r7, #4]
    41de:	891b      	ldrh	r3, [r3, #8]
    41e0:	220e      	movs	r2, #14
    41e2:	18ba      	adds	r2, r7, r2
    41e4:	8812      	ldrh	r2, [r2, #0]
    41e6:	429a      	cmp	r2, r3
    41e8:	d301      	bcc.n	41ee <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    41ea:	2312      	movs	r3, #18
    41ec:	e00e      	b.n	420c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    41ee:	68bb      	ldr	r3, [r7, #8]
    41f0:	7e1b      	ldrb	r3, [r3, #24]
    41f2:	b2db      	uxtb	r3, r3
    41f4:	001a      	movs	r2, r3
    41f6:	2301      	movs	r3, #1
    41f8:	4013      	ands	r3, r2
    41fa:	d106      	bne.n	420a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    41fc:	68bb      	ldr	r3, [r7, #8]
    41fe:	7e1b      	ldrb	r3, [r3, #24]
    4200:	b2db      	uxtb	r3, r3
    4202:	001a      	movs	r2, r3
    4204:	2302      	movs	r3, #2
    4206:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    4208:	d0e1      	beq.n	41ce <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    420a:	2300      	movs	r3, #0
}
    420c:	0018      	movs	r0, r3
    420e:	46bd      	mov	sp, r7
    4210:	b004      	add	sp, #16
    4212:	bd80      	pop	{r7, pc}

00004214 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    4214:	b590      	push	{r4, r7, lr}
    4216:	b085      	sub	sp, #20
    4218:	af00      	add	r7, sp, #0
    421a:	6078      	str	r0, [r7, #4]
    421c:	000a      	movs	r2, r1
    421e:	1cfb      	adds	r3, r7, #3
    4220:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4222:	687b      	ldr	r3, [r7, #4]
    4224:	681b      	ldr	r3, [r3, #0]
    4226:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    4228:	68fb      	ldr	r3, [r7, #12]
    422a:	685b      	ldr	r3, [r3, #4]
    422c:	2280      	movs	r2, #128	; 0x80
    422e:	02d2      	lsls	r2, r2, #11
    4230:	431a      	orrs	r2, r3
    4232:	68fb      	ldr	r3, [r7, #12]
    4234:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    4236:	1cfb      	adds	r3, r7, #3
    4238:	781a      	ldrb	r2, [r3, #0]
    423a:	68fb      	ldr	r3, [r7, #12]
    423c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    423e:	230b      	movs	r3, #11
    4240:	18fc      	adds	r4, r7, r3
    4242:	687b      	ldr	r3, [r7, #4]
    4244:	0018      	movs	r0, r3
    4246:	4b07      	ldr	r3, [pc, #28]	; (4264 <_i2c_master_send_hs_master_code+0x50>)
    4248:	4798      	blx	r3
    424a:	0003      	movs	r3, r0
    424c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    424e:	68fb      	ldr	r3, [r7, #12]
    4250:	2201      	movs	r2, #1
    4252:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    4254:	230b      	movs	r3, #11
    4256:	18fb      	adds	r3, r7, r3
    4258:	781b      	ldrb	r3, [r3, #0]
}
    425a:	0018      	movs	r0, r3
    425c:	46bd      	mov	sp, r7
    425e:	b005      	add	sp, #20
    4260:	bd90      	pop	{r4, r7, pc}
    4262:	46c0      	nop			; (mov r8, r8)
    4264:	000041b7 	.word	0x000041b7

00004268 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    4268:	b580      	push	{r7, lr}
    426a:	af00      	add	r7, sp, #0
    426c:	2000      	movs	r0, #0
    426e:	4b02      	ldr	r3, [pc, #8]	; (4278 <TC3_Handler+0x10>)
    4270:	4798      	blx	r3
    4272:	46c0      	nop			; (mov r8, r8)
    4274:	46bd      	mov	sp, r7
    4276:	bd80      	pop	{r7, pc}
    4278:	000042a5 	.word	0x000042a5

0000427c <TC4_Handler>:
    427c:	b580      	push	{r7, lr}
    427e:	af00      	add	r7, sp, #0
    4280:	2001      	movs	r0, #1
    4282:	4b02      	ldr	r3, [pc, #8]	; (428c <TC4_Handler+0x10>)
    4284:	4798      	blx	r3
    4286:	46c0      	nop			; (mov r8, r8)
    4288:	46bd      	mov	sp, r7
    428a:	bd80      	pop	{r7, pc}
    428c:	000042a5 	.word	0x000042a5

00004290 <TC5_Handler>:
    4290:	b580      	push	{r7, lr}
    4292:	af00      	add	r7, sp, #0
    4294:	2002      	movs	r0, #2
    4296:	4b02      	ldr	r3, [pc, #8]	; (42a0 <TC5_Handler+0x10>)
    4298:	4798      	blx	r3
    429a:	46c0      	nop			; (mov r8, r8)
    429c:	46bd      	mov	sp, r7
    429e:	bd80      	pop	{r7, pc}
    42a0:	000042a5 	.word	0x000042a5

000042a4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    42a4:	b580      	push	{r7, lr}
    42a6:	b084      	sub	sp, #16
    42a8:	af00      	add	r7, sp, #0
    42aa:	0002      	movs	r2, r0
    42ac:	1dfb      	adds	r3, r7, #7
    42ae:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    42b0:	1dfb      	adds	r3, r7, #7
    42b2:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    42b4:	4b28      	ldr	r3, [pc, #160]	; (4358 <_tc_interrupt_handler+0xb4>)
    42b6:	0092      	lsls	r2, r2, #2
    42b8:	58d3      	ldr	r3, [r2, r3]
    42ba:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    42bc:	68fb      	ldr	r3, [r7, #12]
    42be:	681b      	ldr	r3, [r3, #0]
    42c0:	7b9b      	ldrb	r3, [r3, #14]
    42c2:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    42c4:	68fa      	ldr	r2, [r7, #12]
    42c6:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    42c8:	4013      	ands	r3, r2
    42ca:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    42cc:	68fb      	ldr	r3, [r7, #12]
    42ce:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    42d0:	230b      	movs	r3, #11
    42d2:	18fb      	adds	r3, r7, r3
    42d4:	400a      	ands	r2, r1
    42d6:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    42d8:	230b      	movs	r3, #11
    42da:	18fb      	adds	r3, r7, r3
    42dc:	781b      	ldrb	r3, [r3, #0]
    42de:	2201      	movs	r2, #1
    42e0:	4013      	ands	r3, r2
    42e2:	d008      	beq.n	42f6 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    42e4:	68fb      	ldr	r3, [r7, #12]
    42e6:	689b      	ldr	r3, [r3, #8]
    42e8:	68fa      	ldr	r2, [r7, #12]
    42ea:	0010      	movs	r0, r2
    42ec:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    42ee:	68fb      	ldr	r3, [r7, #12]
    42f0:	681b      	ldr	r3, [r3, #0]
    42f2:	2201      	movs	r2, #1
    42f4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    42f6:	230b      	movs	r3, #11
    42f8:	18fb      	adds	r3, r7, r3
    42fa:	781b      	ldrb	r3, [r3, #0]
    42fc:	2202      	movs	r2, #2
    42fe:	4013      	ands	r3, r2
    4300:	d008      	beq.n	4314 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    4302:	68fb      	ldr	r3, [r7, #12]
    4304:	68db      	ldr	r3, [r3, #12]
    4306:	68fa      	ldr	r2, [r7, #12]
    4308:	0010      	movs	r0, r2
    430a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    430c:	68fb      	ldr	r3, [r7, #12]
    430e:	681b      	ldr	r3, [r3, #0]
    4310:	2202      	movs	r2, #2
    4312:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    4314:	230b      	movs	r3, #11
    4316:	18fb      	adds	r3, r7, r3
    4318:	781b      	ldrb	r3, [r3, #0]
    431a:	2210      	movs	r2, #16
    431c:	4013      	ands	r3, r2
    431e:	d008      	beq.n	4332 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    4320:	68fb      	ldr	r3, [r7, #12]
    4322:	691b      	ldr	r3, [r3, #16]
    4324:	68fa      	ldr	r2, [r7, #12]
    4326:	0010      	movs	r0, r2
    4328:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    432a:	68fb      	ldr	r3, [r7, #12]
    432c:	681b      	ldr	r3, [r3, #0]
    432e:	2210      	movs	r2, #16
    4330:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    4332:	230b      	movs	r3, #11
    4334:	18fb      	adds	r3, r7, r3
    4336:	781b      	ldrb	r3, [r3, #0]
    4338:	2220      	movs	r2, #32
    433a:	4013      	ands	r3, r2
    433c:	d008      	beq.n	4350 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    433e:	68fb      	ldr	r3, [r7, #12]
    4340:	695b      	ldr	r3, [r3, #20]
    4342:	68fa      	ldr	r2, [r7, #12]
    4344:	0010      	movs	r0, r2
    4346:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    4348:	68fb      	ldr	r3, [r7, #12]
    434a:	681b      	ldr	r3, [r3, #0]
    434c:	2220      	movs	r2, #32
    434e:	739a      	strb	r2, [r3, #14]
	}
}
    4350:	46c0      	nop			; (mov r8, r8)
    4352:	46bd      	mov	sp, r7
    4354:	b004      	add	sp, #16
    4356:	bd80      	pop	{r7, pc}
    4358:	200047f4 	.word	0x200047f4

0000435c <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
    435c:	b580      	push	{r7, lr}
    435e:	b084      	sub	sp, #16
    4360:	af00      	add	r7, sp, #0
    4362:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
    4364:	2300      	movs	r3, #0
    4366:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
    4368:	687b      	ldr	r3, [r7, #4]
    436a:	2b00      	cmp	r3, #0
    436c:	d101      	bne.n	4372 <FreeRTOS_CLIRegisterCommand+0x16>
    436e:	b672      	cpsid	i
    4370:	e7fe      	b.n	4370 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
    4372:	2008      	movs	r0, #8
    4374:	4b11      	ldr	r3, [pc, #68]	; (43bc <FreeRTOS_CLIRegisterCommand+0x60>)
    4376:	4798      	blx	r3
    4378:	0003      	movs	r3, r0
    437a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
    437c:	68bb      	ldr	r3, [r7, #8]
    437e:	2b00      	cmp	r3, #0
    4380:	d101      	bne.n	4386 <FreeRTOS_CLIRegisterCommand+0x2a>
    4382:	b672      	cpsid	i
    4384:	e7fe      	b.n	4384 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
    4386:	68bb      	ldr	r3, [r7, #8]
    4388:	2b00      	cmp	r3, #0
    438a:	d012      	beq.n	43b2 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
    438c:	4b0c      	ldr	r3, [pc, #48]	; (43c0 <FreeRTOS_CLIRegisterCommand+0x64>)
    438e:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
    4390:	68bb      	ldr	r3, [r7, #8]
    4392:	687a      	ldr	r2, [r7, #4]
    4394:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
    4396:	68bb      	ldr	r3, [r7, #8]
    4398:	2200      	movs	r2, #0
    439a:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
    439c:	4b09      	ldr	r3, [pc, #36]	; (43c4 <FreeRTOS_CLIRegisterCommand+0x68>)
    439e:	681b      	ldr	r3, [r3, #0]
    43a0:	68ba      	ldr	r2, [r7, #8]
    43a2:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
    43a4:	4b07      	ldr	r3, [pc, #28]	; (43c4 <FreeRTOS_CLIRegisterCommand+0x68>)
    43a6:	68ba      	ldr	r2, [r7, #8]
    43a8:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
    43aa:	4b07      	ldr	r3, [pc, #28]	; (43c8 <FreeRTOS_CLIRegisterCommand+0x6c>)
    43ac:	4798      	blx	r3

		xReturn = pdPASS;
    43ae:	2301      	movs	r3, #1
    43b0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    43b2:	68fb      	ldr	r3, [r7, #12]
}
    43b4:	0018      	movs	r0, r3
    43b6:	46bd      	mov	sp, r7
    43b8:	b004      	add	sp, #16
    43ba:	bd80      	pop	{r7, pc}
    43bc:	00006771 	.word	0x00006771
    43c0:	00006639 	.word	0x00006639
    43c4:	200000ec 	.word	0x200000ec
    43c8:	0000665d 	.word	0x0000665d

000043cc <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
    43cc:	b580      	push	{r7, lr}
    43ce:	b088      	sub	sp, #32
    43d0:	af00      	add	r7, sp, #0
    43d2:	60f8      	str	r0, [r7, #12]
    43d4:	60b9      	str	r1, [r7, #8]
    43d6:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
    43d8:	2301      	movs	r3, #1
    43da:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
    43dc:	4b3d      	ldr	r3, [pc, #244]	; (44d4 <FreeRTOS_CLIProcessCommand+0x108>)
    43de:	681b      	ldr	r3, [r3, #0]
    43e0:	2b00      	cmp	r3, #0
    43e2:	d144      	bne.n	446e <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    43e4:	4b3b      	ldr	r3, [pc, #236]	; (44d4 <FreeRTOS_CLIProcessCommand+0x108>)
    43e6:	4a3c      	ldr	r2, [pc, #240]	; (44d8 <FreeRTOS_CLIProcessCommand+0x10c>)
    43e8:	601a      	str	r2, [r3, #0]
    43ea:	e03a      	b.n	4462 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
    43ec:	4b39      	ldr	r3, [pc, #228]	; (44d4 <FreeRTOS_CLIProcessCommand+0x108>)
    43ee:	681b      	ldr	r3, [r3, #0]
    43f0:	681b      	ldr	r3, [r3, #0]
    43f2:	681b      	ldr	r3, [r3, #0]
    43f4:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    43f6:	69bb      	ldr	r3, [r7, #24]
    43f8:	0018      	movs	r0, r3
    43fa:	4b38      	ldr	r3, [pc, #224]	; (44dc <FreeRTOS_CLIProcessCommand+0x110>)
    43fc:	4798      	blx	r3
    43fe:	0003      	movs	r3, r0
    4400:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    4402:	68fa      	ldr	r2, [r7, #12]
    4404:	697b      	ldr	r3, [r7, #20]
    4406:	18d3      	adds	r3, r2, r3
    4408:	781b      	ldrb	r3, [r3, #0]
    440a:	2b20      	cmp	r3, #32
    440c:	d005      	beq.n	441a <FreeRTOS_CLIProcessCommand+0x4e>
    440e:	68fa      	ldr	r2, [r7, #12]
    4410:	697b      	ldr	r3, [r7, #20]
    4412:	18d3      	adds	r3, r2, r3
    4414:	781b      	ldrb	r3, [r3, #0]
    4416:	2b00      	cmp	r3, #0
    4418:	d11e      	bne.n	4458 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    441a:	697a      	ldr	r2, [r7, #20]
    441c:	69b9      	ldr	r1, [r7, #24]
    441e:	68fb      	ldr	r3, [r7, #12]
    4420:	0018      	movs	r0, r3
    4422:	4b2f      	ldr	r3, [pc, #188]	; (44e0 <FreeRTOS_CLIProcessCommand+0x114>)
    4424:	4798      	blx	r3
    4426:	1e03      	subs	r3, r0, #0
    4428:	d116      	bne.n	4458 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
    442a:	4b2a      	ldr	r3, [pc, #168]	; (44d4 <FreeRTOS_CLIProcessCommand+0x108>)
    442c:	681b      	ldr	r3, [r3, #0]
    442e:	681b      	ldr	r3, [r3, #0]
    4430:	7b1b      	ldrb	r3, [r3, #12]
    4432:	b25b      	sxtb	r3, r3
    4434:	2b00      	cmp	r3, #0
    4436:	db19      	blt.n	446c <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
    4438:	68fb      	ldr	r3, [r7, #12]
    443a:	0018      	movs	r0, r3
    443c:	4b29      	ldr	r3, [pc, #164]	; (44e4 <FreeRTOS_CLIProcessCommand+0x118>)
    443e:	4798      	blx	r3
    4440:	0003      	movs	r3, r0
    4442:	001a      	movs	r2, r3
    4444:	4b23      	ldr	r3, [pc, #140]	; (44d4 <FreeRTOS_CLIProcessCommand+0x108>)
    4446:	681b      	ldr	r3, [r3, #0]
    4448:	681b      	ldr	r3, [r3, #0]
    444a:	7b1b      	ldrb	r3, [r3, #12]
    444c:	b25b      	sxtb	r3, r3
    444e:	429a      	cmp	r2, r3
    4450:	d00c      	beq.n	446c <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
    4452:	2300      	movs	r3, #0
    4454:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
    4456:	e009      	b.n	446c <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    4458:	4b1e      	ldr	r3, [pc, #120]	; (44d4 <FreeRTOS_CLIProcessCommand+0x108>)
    445a:	681b      	ldr	r3, [r3, #0]
    445c:	685a      	ldr	r2, [r3, #4]
    445e:	4b1d      	ldr	r3, [pc, #116]	; (44d4 <FreeRTOS_CLIProcessCommand+0x108>)
    4460:	601a      	str	r2, [r3, #0]
    4462:	4b1c      	ldr	r3, [pc, #112]	; (44d4 <FreeRTOS_CLIProcessCommand+0x108>)
    4464:	681b      	ldr	r3, [r3, #0]
    4466:	2b00      	cmp	r3, #0
    4468:	d1c0      	bne.n	43ec <FreeRTOS_CLIProcessCommand+0x20>
    446a:	e000      	b.n	446e <FreeRTOS_CLIProcessCommand+0xa2>
					break;
    446c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    446e:	4b19      	ldr	r3, [pc, #100]	; (44d4 <FreeRTOS_CLIProcessCommand+0x108>)
    4470:	681b      	ldr	r3, [r3, #0]
    4472:	2b00      	cmp	r3, #0
    4474:	d00c      	beq.n	4490 <FreeRTOS_CLIProcessCommand+0xc4>
    4476:	69fb      	ldr	r3, [r7, #28]
    4478:	2b00      	cmp	r3, #0
    447a:	d109      	bne.n	4490 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    447c:	687a      	ldr	r2, [r7, #4]
    447e:	491a      	ldr	r1, [pc, #104]	; (44e8 <FreeRTOS_CLIProcessCommand+0x11c>)
    4480:	68bb      	ldr	r3, [r7, #8]
    4482:	0018      	movs	r0, r3
    4484:	4b19      	ldr	r3, [pc, #100]	; (44ec <FreeRTOS_CLIProcessCommand+0x120>)
    4486:	4798      	blx	r3
		pxCommand = NULL;
    4488:	4b12      	ldr	r3, [pc, #72]	; (44d4 <FreeRTOS_CLIProcessCommand+0x108>)
    448a:	2200      	movs	r2, #0
    448c:	601a      	str	r2, [r3, #0]
    448e:	e01c      	b.n	44ca <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
    4490:	4b10      	ldr	r3, [pc, #64]	; (44d4 <FreeRTOS_CLIProcessCommand+0x108>)
    4492:	681b      	ldr	r3, [r3, #0]
    4494:	2b00      	cmp	r3, #0
    4496:	d010      	beq.n	44ba <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
    4498:	4b0e      	ldr	r3, [pc, #56]	; (44d4 <FreeRTOS_CLIProcessCommand+0x108>)
    449a:	681b      	ldr	r3, [r3, #0]
    449c:	681b      	ldr	r3, [r3, #0]
    449e:	689b      	ldr	r3, [r3, #8]
    44a0:	68fa      	ldr	r2, [r7, #12]
    44a2:	6879      	ldr	r1, [r7, #4]
    44a4:	68b8      	ldr	r0, [r7, #8]
    44a6:	4798      	blx	r3
    44a8:	0003      	movs	r3, r0
    44aa:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
    44ac:	69fb      	ldr	r3, [r7, #28]
    44ae:	2b00      	cmp	r3, #0
    44b0:	d10b      	bne.n	44ca <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
    44b2:	4b08      	ldr	r3, [pc, #32]	; (44d4 <FreeRTOS_CLIProcessCommand+0x108>)
    44b4:	2200      	movs	r2, #0
    44b6:	601a      	str	r2, [r3, #0]
    44b8:	e007      	b.n	44ca <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    44ba:	687a      	ldr	r2, [r7, #4]
    44bc:	490c      	ldr	r1, [pc, #48]	; (44f0 <FreeRTOS_CLIProcessCommand+0x124>)
    44be:	68bb      	ldr	r3, [r7, #8]
    44c0:	0018      	movs	r0, r3
    44c2:	4b0a      	ldr	r3, [pc, #40]	; (44ec <FreeRTOS_CLIProcessCommand+0x120>)
    44c4:	4798      	blx	r3
		xReturn = pdFALSE;
    44c6:	2300      	movs	r3, #0
    44c8:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
    44ca:	69fb      	ldr	r3, [r7, #28]
}
    44cc:	0018      	movs	r0, r3
    44ce:	46bd      	mov	sp, r7
    44d0:	b008      	add	sp, #32
    44d2:	bd80      	pop	{r7, pc}
    44d4:	20000f34 	.word	0x20000f34
    44d8:	200000e4 	.word	0x200000e4
    44dc:	00021143 	.word	0x00021143
    44e0:	00021151 	.word	0x00021151
    44e4:	00004555 	.word	0x00004555
    44e8:	00023d34 	.word	0x00023d34
    44ec:	00021173 	.word	0x00021173
    44f0:	00023d8c 	.word	0x00023d8c

000044f4 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
    44f4:	b580      	push	{r7, lr}
    44f6:	b086      	sub	sp, #24
    44f8:	af00      	add	r7, sp, #0
    44fa:	60f8      	str	r0, [r7, #12]
    44fc:	60b9      	str	r1, [r7, #8]
    44fe:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
    4500:	4b11      	ldr	r3, [pc, #68]	; (4548 <prvHelpCommand+0x54>)
    4502:	681b      	ldr	r3, [r3, #0]
    4504:	2b00      	cmp	r3, #0
    4506:	d102      	bne.n	450e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
    4508:	4b0f      	ldr	r3, [pc, #60]	; (4548 <prvHelpCommand+0x54>)
    450a:	4a10      	ldr	r2, [pc, #64]	; (454c <prvHelpCommand+0x58>)
    450c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
    450e:	4b0e      	ldr	r3, [pc, #56]	; (4548 <prvHelpCommand+0x54>)
    4510:	681b      	ldr	r3, [r3, #0]
    4512:	681b      	ldr	r3, [r3, #0]
    4514:	6859      	ldr	r1, [r3, #4]
    4516:	68ba      	ldr	r2, [r7, #8]
    4518:	68fb      	ldr	r3, [r7, #12]
    451a:	0018      	movs	r0, r3
    451c:	4b0c      	ldr	r3, [pc, #48]	; (4550 <prvHelpCommand+0x5c>)
    451e:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
    4520:	4b09      	ldr	r3, [pc, #36]	; (4548 <prvHelpCommand+0x54>)
    4522:	681b      	ldr	r3, [r3, #0]
    4524:	685a      	ldr	r2, [r3, #4]
    4526:	4b08      	ldr	r3, [pc, #32]	; (4548 <prvHelpCommand+0x54>)
    4528:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
    452a:	4b07      	ldr	r3, [pc, #28]	; (4548 <prvHelpCommand+0x54>)
    452c:	681b      	ldr	r3, [r3, #0]
    452e:	2b00      	cmp	r3, #0
    4530:	d102      	bne.n	4538 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
    4532:	2300      	movs	r3, #0
    4534:	617b      	str	r3, [r7, #20]
    4536:	e001      	b.n	453c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
    4538:	2301      	movs	r3, #1
    453a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
    453c:	697b      	ldr	r3, [r7, #20]
}
    453e:	0018      	movs	r0, r3
    4540:	46bd      	mov	sp, r7
    4542:	b006      	add	sp, #24
    4544:	bd80      	pop	{r7, pc}
    4546:	46c0      	nop			; (mov r8, r8)
    4548:	20000f38 	.word	0x20000f38
    454c:	200000e4 	.word	0x200000e4
    4550:	00021173 	.word	0x00021173

00004554 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
    4554:	b580      	push	{r7, lr}
    4556:	b084      	sub	sp, #16
    4558:	af00      	add	r7, sp, #0
    455a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
    455c:	230f      	movs	r3, #15
    455e:	18fb      	adds	r3, r7, r3
    4560:	2200      	movs	r2, #0
    4562:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
    4564:	2300      	movs	r3, #0
    4566:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
    4568:	e018      	b.n	459c <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
    456a:	687b      	ldr	r3, [r7, #4]
    456c:	781b      	ldrb	r3, [r3, #0]
    456e:	2b20      	cmp	r3, #32
    4570:	d10f      	bne.n	4592 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
    4572:	68bb      	ldr	r3, [r7, #8]
    4574:	2b01      	cmp	r3, #1
    4576:	d00e      	beq.n	4596 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
    4578:	230f      	movs	r3, #15
    457a:	18fb      	adds	r3, r7, r3
    457c:	781b      	ldrb	r3, [r3, #0]
    457e:	b25b      	sxtb	r3, r3
    4580:	b2db      	uxtb	r3, r3
    4582:	3301      	adds	r3, #1
    4584:	b2da      	uxtb	r2, r3
    4586:	230f      	movs	r3, #15
    4588:	18fb      	adds	r3, r7, r3
    458a:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
    458c:	2301      	movs	r3, #1
    458e:	60bb      	str	r3, [r7, #8]
    4590:	e001      	b.n	4596 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
    4592:	2300      	movs	r3, #0
    4594:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
    4596:	687b      	ldr	r3, [r7, #4]
    4598:	3301      	adds	r3, #1
    459a:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
    459c:	687b      	ldr	r3, [r7, #4]
    459e:	781b      	ldrb	r3, [r3, #0]
    45a0:	2b00      	cmp	r3, #0
    45a2:	d1e2      	bne.n	456a <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
    45a4:	68bb      	ldr	r3, [r7, #8]
    45a6:	2b01      	cmp	r3, #1
    45a8:	d109      	bne.n	45be <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
    45aa:	230f      	movs	r3, #15
    45ac:	18fb      	adds	r3, r7, r3
    45ae:	781b      	ldrb	r3, [r3, #0]
    45b0:	b25b      	sxtb	r3, r3
    45b2:	b2db      	uxtb	r3, r3
    45b4:	3b01      	subs	r3, #1
    45b6:	b2da      	uxtb	r2, r3
    45b8:	230f      	movs	r3, #15
    45ba:	18fb      	adds	r3, r7, r3
    45bc:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
    45be:	230f      	movs	r3, #15
    45c0:	18fb      	adds	r3, r7, r3
    45c2:	781b      	ldrb	r3, [r3, #0]
    45c4:	b25b      	sxtb	r3, r3
}
    45c6:	0018      	movs	r0, r3
    45c8:	46bd      	mov	sp, r7
    45ca:	b004      	add	sp, #16
    45cc:	bd80      	pop	{r7, pc}
	...

000045d0 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
    45d0:	b580      	push	{r7, lr}
    45d2:	b082      	sub	sp, #8
    45d4:	af00      	add	r7, sp, #0
    45d6:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
    45d8:	687b      	ldr	r3, [r7, #4]
    45da:	0018      	movs	r0, r3
    45dc:	4b03      	ldr	r3, [pc, #12]	; (45ec <prvTraceGetQueueNumber+0x1c>)
    45de:	4798      	blx	r3
    45e0:	0003      	movs	r3, r0
}
    45e2:	0018      	movs	r0, r3
    45e4:	46bd      	mov	sp, r7
    45e6:	b002      	add	sp, #8
    45e8:	bd80      	pop	{r7, pc}
    45ea:	46c0      	nop			; (mov r8, r8)
    45ec:	00007d99 	.word	0x00007d99

000045f0 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
    45f0:	b580      	push	{r7, lr}
    45f2:	b082      	sub	sp, #8
    45f4:	af00      	add	r7, sp, #0
    45f6:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
    45f8:	687b      	ldr	r3, [r7, #4]
    45fa:	0018      	movs	r0, r3
    45fc:	4b03      	ldr	r3, [pc, #12]	; (460c <prvTraceGetQueueType+0x1c>)
    45fe:	4798      	blx	r3
    4600:	0003      	movs	r3, r0
}
    4602:	0018      	movs	r0, r3
    4604:	46bd      	mov	sp, r7
    4606:	b002      	add	sp, #8
    4608:	bd80      	pop	{r7, pc}
    460a:	46c0      	nop			; (mov r8, r8)
    460c:	00007dc5 	.word	0x00007dc5

00004610 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
    4610:	b580      	push	{r7, lr}
    4612:	b082      	sub	sp, #8
    4614:	af00      	add	r7, sp, #0
    4616:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
    4618:	687b      	ldr	r3, [r7, #4]
    461a:	0018      	movs	r0, r3
    461c:	4b03      	ldr	r3, [pc, #12]	; (462c <prvTraceGetTaskNumberLow16+0x1c>)
    461e:	4798      	blx	r3
    4620:	0003      	movs	r3, r0
    4622:	b29b      	uxth	r3, r3
}
    4624:	0018      	movs	r0, r3
    4626:	46bd      	mov	sp, r7
    4628:	b002      	add	sp, #8
    462a:	bd80      	pop	{r7, pc}
    462c:	000090f5 	.word	0x000090f5

00004630 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
    4630:	b580      	push	{r7, lr}
    4632:	b082      	sub	sp, #8
    4634:	af00      	add	r7, sp, #0
    4636:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
    4638:	687b      	ldr	r3, [r7, #4]
    463a:	0018      	movs	r0, r3
    463c:	4b04      	ldr	r3, [pc, #16]	; (4650 <prvTraceGetTaskNumberHigh16+0x20>)
    463e:	4798      	blx	r3
    4640:	0003      	movs	r3, r0
    4642:	0c1b      	lsrs	r3, r3, #16
    4644:	b29b      	uxth	r3, r3
}
    4646:	0018      	movs	r0, r3
    4648:	46bd      	mov	sp, r7
    464a:	b002      	add	sp, #8
    464c:	bd80      	pop	{r7, pc}
    464e:	46c0      	nop			; (mov r8, r8)
    4650:	000090f5 	.word	0x000090f5

00004654 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
    4654:	b580      	push	{r7, lr}
    4656:	b082      	sub	sp, #8
    4658:	af00      	add	r7, sp, #0
    465a:	6078      	str	r0, [r7, #4]
    465c:	000a      	movs	r2, r1
    465e:	1cbb      	adds	r3, r7, #2
    4660:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
    4662:	687b      	ldr	r3, [r7, #4]
    4664:	0018      	movs	r0, r3
    4666:	4b08      	ldr	r3, [pc, #32]	; (4688 <prvTraceSetTaskNumberLow16+0x34>)
    4668:	4798      	blx	r3
    466a:	0003      	movs	r3, r0
    466c:	0c1b      	lsrs	r3, r3, #16
    466e:	041a      	lsls	r2, r3, #16
    4670:	1cbb      	adds	r3, r7, #2
    4672:	881b      	ldrh	r3, [r3, #0]
    4674:	431a      	orrs	r2, r3
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	0011      	movs	r1, r2
    467a:	0018      	movs	r0, r3
    467c:	4b03      	ldr	r3, [pc, #12]	; (468c <prvTraceSetTaskNumberLow16+0x38>)
    467e:	4798      	blx	r3
}
    4680:	46c0      	nop			; (mov r8, r8)
    4682:	46bd      	mov	sp, r7
    4684:	b002      	add	sp, #8
    4686:	bd80      	pop	{r7, pc}
    4688:	000090f5 	.word	0x000090f5
    468c:	0000911d 	.word	0x0000911d

00004690 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
    4690:	b580      	push	{r7, lr}
    4692:	b082      	sub	sp, #8
    4694:	af00      	add	r7, sp, #0
    4696:	6078      	str	r0, [r7, #4]
    4698:	000a      	movs	r2, r1
    469a:	1cbb      	adds	r3, r7, #2
    469c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
    469e:	687b      	ldr	r3, [r7, #4]
    46a0:	0018      	movs	r0, r3
    46a2:	4b09      	ldr	r3, [pc, #36]	; (46c8 <prvTraceSetTaskNumberHigh16+0x38>)
    46a4:	4798      	blx	r3
    46a6:	0003      	movs	r3, r0
    46a8:	041b      	lsls	r3, r3, #16
    46aa:	0c1a      	lsrs	r2, r3, #16
    46ac:	1cbb      	adds	r3, r7, #2
    46ae:	881b      	ldrh	r3, [r3, #0]
    46b0:	041b      	lsls	r3, r3, #16
    46b2:	431a      	orrs	r2, r3
    46b4:	687b      	ldr	r3, [r7, #4]
    46b6:	0011      	movs	r1, r2
    46b8:	0018      	movs	r0, r3
    46ba:	4b04      	ldr	r3, [pc, #16]	; (46cc <prvTraceSetTaskNumberHigh16+0x3c>)
    46bc:	4798      	blx	r3
}
    46be:	46c0      	nop			; (mov r8, r8)
    46c0:	46bd      	mov	sp, r7
    46c2:	b002      	add	sp, #8
    46c4:	bd80      	pop	{r7, pc}
    46c6:	46c0      	nop			; (mov r8, r8)
    46c8:	000090f5 	.word	0x000090f5
    46cc:	0000911d 	.word	0x0000911d

000046d0 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
    46d0:	b580      	push	{r7, lr}
    46d2:	b082      	sub	sp, #8
    46d4:	af00      	add	r7, sp, #0
    46d6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
    46d8:	687b      	ldr	r3, [r7, #4]
    46da:	0018      	movs	r0, r3
    46dc:	4b03      	ldr	r3, [pc, #12]	; (46ec <prvTraceGetQueueNumberLow16+0x1c>)
    46de:	4798      	blx	r3
    46e0:	0003      	movs	r3, r0
    46e2:	b29b      	uxth	r3, r3
}
    46e4:	0018      	movs	r0, r3
    46e6:	46bd      	mov	sp, r7
    46e8:	b002      	add	sp, #8
    46ea:	bd80      	pop	{r7, pc}
    46ec:	000045d1 	.word	0x000045d1

000046f0 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
    46f0:	b580      	push	{r7, lr}
    46f2:	b082      	sub	sp, #8
    46f4:	af00      	add	r7, sp, #0
    46f6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
    46f8:	687b      	ldr	r3, [r7, #4]
    46fa:	0018      	movs	r0, r3
    46fc:	4b04      	ldr	r3, [pc, #16]	; (4710 <prvTraceGetQueueNumberHigh16+0x20>)
    46fe:	4798      	blx	r3
    4700:	0003      	movs	r3, r0
    4702:	0c1b      	lsrs	r3, r3, #16
    4704:	b29b      	uxth	r3, r3
}
    4706:	0018      	movs	r0, r3
    4708:	46bd      	mov	sp, r7
    470a:	b002      	add	sp, #8
    470c:	bd80      	pop	{r7, pc}
    470e:	46c0      	nop			; (mov r8, r8)
    4710:	000045d1 	.word	0x000045d1

00004714 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
    4714:	b580      	push	{r7, lr}
    4716:	b082      	sub	sp, #8
    4718:	af00      	add	r7, sp, #0
    471a:	6078      	str	r0, [r7, #4]
    471c:	000a      	movs	r2, r1
    471e:	1cbb      	adds	r3, r7, #2
    4720:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
    4722:	687b      	ldr	r3, [r7, #4]
    4724:	0018      	movs	r0, r3
    4726:	4b08      	ldr	r3, [pc, #32]	; (4748 <prvTraceSetQueueNumberLow16+0x34>)
    4728:	4798      	blx	r3
    472a:	0003      	movs	r3, r0
    472c:	0c1b      	lsrs	r3, r3, #16
    472e:	041a      	lsls	r2, r3, #16
    4730:	1cbb      	adds	r3, r7, #2
    4732:	881b      	ldrh	r3, [r3, #0]
    4734:	431a      	orrs	r2, r3
    4736:	687b      	ldr	r3, [r7, #4]
    4738:	0011      	movs	r1, r2
    473a:	0018      	movs	r0, r3
    473c:	4b03      	ldr	r3, [pc, #12]	; (474c <prvTraceSetQueueNumberLow16+0x38>)
    473e:	4798      	blx	r3
}
    4740:	46c0      	nop			; (mov r8, r8)
    4742:	46bd      	mov	sp, r7
    4744:	b002      	add	sp, #8
    4746:	bd80      	pop	{r7, pc}
    4748:	000045d1 	.word	0x000045d1
    474c:	00007dad 	.word	0x00007dad

00004750 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
    4750:	b580      	push	{r7, lr}
    4752:	b082      	sub	sp, #8
    4754:	af00      	add	r7, sp, #0
    4756:	6078      	str	r0, [r7, #4]
    4758:	000a      	movs	r2, r1
    475a:	1cbb      	adds	r3, r7, #2
    475c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
    475e:	687b      	ldr	r3, [r7, #4]
    4760:	0018      	movs	r0, r3
    4762:	4b09      	ldr	r3, [pc, #36]	; (4788 <prvTraceSetQueueNumberHigh16+0x38>)
    4764:	4798      	blx	r3
    4766:	0003      	movs	r3, r0
    4768:	041b      	lsls	r3, r3, #16
    476a:	0c1a      	lsrs	r2, r3, #16
    476c:	1cbb      	adds	r3, r7, #2
    476e:	881b      	ldrh	r3, [r3, #0]
    4770:	041b      	lsls	r3, r3, #16
    4772:	431a      	orrs	r2, r3
    4774:	687b      	ldr	r3, [r7, #4]
    4776:	0011      	movs	r1, r2
    4778:	0018      	movs	r0, r3
    477a:	4b04      	ldr	r3, [pc, #16]	; (478c <prvTraceSetQueueNumberHigh16+0x3c>)
    477c:	4798      	blx	r3
}
    477e:	46c0      	nop			; (mov r8, r8)
    4780:	46bd      	mov	sp, r7
    4782:	b002      	add	sp, #8
    4784:	bd80      	pop	{r7, pc}
    4786:	46c0      	nop			; (mov r8, r8)
    4788:	000045d1 	.word	0x000045d1
    478c:	00007dad 	.word	0x00007dad

00004790 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
    4790:	b580      	push	{r7, lr}
    4792:	b084      	sub	sp, #16
    4794:	af00      	add	r7, sp, #0
    4796:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
    4798:	2300      	movs	r3, #0
    479a:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
    479c:	2300      	movs	r3, #0
    479e:	60bb      	str	r3, [r7, #8]
    47a0:	e018      	b.n	47d4 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
    47a2:	4b14      	ldr	r3, [pc, #80]	; (47f4 <prvAddTaskToStackMonitor+0x64>)
    47a4:	68ba      	ldr	r2, [r7, #8]
    47a6:	00d2      	lsls	r2, r2, #3
    47a8:	58d3      	ldr	r3, [r2, r3]
    47aa:	2b00      	cmp	r3, #0
    47ac:	d10f      	bne.n	47ce <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
    47ae:	4b11      	ldr	r3, [pc, #68]	; (47f4 <prvAddTaskToStackMonitor+0x64>)
    47b0:	68ba      	ldr	r2, [r7, #8]
    47b2:	00d2      	lsls	r2, r2, #3
    47b4:	6879      	ldr	r1, [r7, #4]
    47b6:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
    47b8:	4a0e      	ldr	r2, [pc, #56]	; (47f4 <prvAddTaskToStackMonitor+0x64>)
    47ba:	68bb      	ldr	r3, [r7, #8]
    47bc:	00db      	lsls	r3, r3, #3
    47be:	18d3      	adds	r3, r2, r3
    47c0:	3304      	adds	r3, #4
    47c2:	2201      	movs	r2, #1
    47c4:	4252      	negs	r2, r2
    47c6:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
    47c8:	2301      	movs	r3, #1
    47ca:	60fb      	str	r3, [r7, #12]
			break;
    47cc:	e005      	b.n	47da <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
    47ce:	68bb      	ldr	r3, [r7, #8]
    47d0:	3301      	adds	r3, #1
    47d2:	60bb      	str	r3, [r7, #8]
    47d4:	68bb      	ldr	r3, [r7, #8]
    47d6:	2b09      	cmp	r3, #9
    47d8:	dde3      	ble.n	47a2 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
    47da:	68fb      	ldr	r3, [r7, #12]
    47dc:	2b00      	cmp	r3, #0
    47de:	d104      	bne.n	47ea <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
    47e0:	4b05      	ldr	r3, [pc, #20]	; (47f8 <prvAddTaskToStackMonitor+0x68>)
    47e2:	681b      	ldr	r3, [r3, #0]
    47e4:	1c5a      	adds	r2, r3, #1
    47e6:	4b04      	ldr	r3, [pc, #16]	; (47f8 <prvAddTaskToStackMonitor+0x68>)
    47e8:	601a      	str	r2, [r3, #0]
	}
}
    47ea:	46c0      	nop			; (mov r8, r8)
    47ec:	46bd      	mov	sp, r7
    47ee:	b004      	add	sp, #16
    47f0:	bd80      	pop	{r7, pc}
    47f2:	46c0      	nop			; (mov r8, r8)
    47f4:	20000f40 	.word	0x20000f40
    47f8:	20000f90 	.word	0x20000f90

000047fc <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
    47fc:	b590      	push	{r4, r7, lr}
    47fe:	b085      	sub	sp, #20
    4800:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
    4802:	2300      	movs	r3, #0
    4804:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
    4806:	4b2b      	ldr	r3, [pc, #172]	; (48b4 <prvReportStackUsage+0xb8>)
    4808:	681b      	ldr	r3, [r3, #0]
    480a:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
    480c:	4b29      	ldr	r3, [pc, #164]	; (48b4 <prvReportStackUsage+0xb8>)
    480e:	681a      	ldr	r2, [r3, #0]
    4810:	4b29      	ldr	r3, [pc, #164]	; (48b8 <prvReportStackUsage+0xbc>)
    4812:	00d2      	lsls	r2, r2, #3
    4814:	58d3      	ldr	r3, [r2, r3]
    4816:	2b00      	cmp	r3, #0
    4818:	d035      	beq.n	4886 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
    481a:	4b26      	ldr	r3, [pc, #152]	; (48b4 <prvReportStackUsage+0xb8>)
    481c:	681a      	ldr	r2, [r3, #0]
    481e:	4b26      	ldr	r3, [pc, #152]	; (48b8 <prvReportStackUsage+0xbc>)
    4820:	00d2      	lsls	r2, r2, #3
    4822:	58d3      	ldr	r3, [r2, r3]
    4824:	0018      	movs	r0, r3
    4826:	4b25      	ldr	r3, [pc, #148]	; (48bc <prvReportStackUsage+0xc0>)
    4828:	4798      	blx	r3
    482a:	0003      	movs	r3, r0
    482c:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
    482e:	4b21      	ldr	r3, [pc, #132]	; (48b4 <prvReportStackUsage+0xb8>)
    4830:	681b      	ldr	r3, [r3, #0]
    4832:	4a21      	ldr	r2, [pc, #132]	; (48b8 <prvReportStackUsage+0xbc>)
    4834:	00db      	lsls	r3, r3, #3
    4836:	18d3      	adds	r3, r2, r3
    4838:	3304      	adds	r3, #4
    483a:	681a      	ldr	r2, [r3, #0]
    483c:	687b      	ldr	r3, [r7, #4]
    483e:	429a      	cmp	r2, r3
    4840:	d907      	bls.n	4852 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
    4842:	4b1c      	ldr	r3, [pc, #112]	; (48b4 <prvReportStackUsage+0xb8>)
    4844:	681b      	ldr	r3, [r3, #0]
    4846:	4a1c      	ldr	r2, [pc, #112]	; (48b8 <prvReportStackUsage+0xbc>)
    4848:	00db      	lsls	r3, r3, #3
    484a:	18d3      	adds	r3, r2, r3
    484c:	3304      	adds	r3, #4
    484e:	687a      	ldr	r2, [r7, #4]
    4850:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
    4852:	4b18      	ldr	r3, [pc, #96]	; (48b4 <prvReportStackUsage+0xb8>)
    4854:	681a      	ldr	r2, [r3, #0]
    4856:	4b18      	ldr	r3, [pc, #96]	; (48b8 <prvReportStackUsage+0xbc>)
    4858:	00d2      	lsls	r2, r2, #3
    485a:	58d3      	ldr	r3, [r2, r3]
    485c:	0018      	movs	r0, r3
    485e:	4b18      	ldr	r3, [pc, #96]	; (48c0 <prvReportStackUsage+0xc4>)
    4860:	4798      	blx	r3
    4862:	0003      	movs	r3, r0
    4864:	b2db      	uxtb	r3, r3
    4866:	0019      	movs	r1, r3
    4868:	4b12      	ldr	r3, [pc, #72]	; (48b4 <prvReportStackUsage+0xb8>)
    486a:	681b      	ldr	r3, [r3, #0]
    486c:	4a12      	ldr	r2, [pc, #72]	; (48b8 <prvReportStackUsage+0xbc>)
    486e:	00db      	lsls	r3, r3, #3
    4870:	18d3      	adds	r3, r2, r3
    4872:	3304      	adds	r3, #4
    4874:	681b      	ldr	r3, [r3, #0]
    4876:	000a      	movs	r2, r1
    4878:	2103      	movs	r1, #3
    487a:	20ea      	movs	r0, #234	; 0xea
    487c:	4c11      	ldr	r4, [pc, #68]	; (48c4 <prvReportStackUsage+0xc8>)
    487e:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
    4880:	68fb      	ldr	r3, [r7, #12]
    4882:	3301      	adds	r3, #1
    4884:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
    4886:	4b0b      	ldr	r3, [pc, #44]	; (48b4 <prvReportStackUsage+0xb8>)
    4888:	681b      	ldr	r3, [r3, #0]
    488a:	1c5a      	adds	r2, r3, #1
    488c:	4b0e      	ldr	r3, [pc, #56]	; (48c8 <prvReportStackUsage+0xcc>)
    488e:	210a      	movs	r1, #10
    4890:	0010      	movs	r0, r2
    4892:	4798      	blx	r3
    4894:	000b      	movs	r3, r1
    4896:	001a      	movs	r2, r3
    4898:	4b06      	ldr	r3, [pc, #24]	; (48b4 <prvReportStackUsage+0xb8>)
    489a:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
    489c:	68fb      	ldr	r3, [r7, #12]
    489e:	2b00      	cmp	r3, #0
    48a0:	dc04      	bgt.n	48ac <prvReportStackUsage+0xb0>
    48a2:	4b04      	ldr	r3, [pc, #16]	; (48b4 <prvReportStackUsage+0xb8>)
    48a4:	681a      	ldr	r2, [r3, #0]
    48a6:	68bb      	ldr	r3, [r7, #8]
    48a8:	429a      	cmp	r2, r3
    48aa:	d1af      	bne.n	480c <prvReportStackUsage+0x10>
}
    48ac:	46c0      	nop			; (mov r8, r8)
    48ae:	46bd      	mov	sp, r7
    48b0:	b005      	add	sp, #20
    48b2:	bd90      	pop	{r4, r7, pc}
    48b4:	20000f94 	.word	0x20000f94
    48b8:	20000f40 	.word	0x20000f40
    48bc:	00009295 	.word	0x00009295
    48c0:	00004611 	.word	0x00004611
    48c4:	00005159 	.word	0x00005159
    48c8:	0001f3b1 	.word	0x0001f3b1

000048cc <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
    48cc:	b580      	push	{r7, lr}
    48ce:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
    48d0:	4b02      	ldr	r3, [pc, #8]	; (48dc <prvTraceGetCurrentTaskHandle+0x10>)
    48d2:	4798      	blx	r3
    48d4:	0003      	movs	r3, r0
}
    48d6:	0018      	movs	r0, r3
    48d8:	46bd      	mov	sp, r7
    48da:	bd80      	pop	{r7, pc}
    48dc:	00009341 	.word	0x00009341

000048e0 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
    48e0:	b590      	push	{r4, r7, lr}
    48e2:	b085      	sub	sp, #20
    48e4:	af02      	add	r7, sp, #8
    48e6:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
    48e8:	4b14      	ldr	r3, [pc, #80]	; (493c <vTraceEnable+0x5c>)
    48ea:	4798      	blx	r3

	if (startOption == TRC_START)
    48ec:	687b      	ldr	r3, [r7, #4]
    48ee:	2b01      	cmp	r3, #1
    48f0:	d102      	bne.n	48f8 <vTraceEnable+0x18>
	{
		vTraceStart();
    48f2:	4b13      	ldr	r3, [pc, #76]	; (4940 <vTraceEnable+0x60>)
    48f4:	4798      	blx	r3
    48f6:	e00e      	b.n	4916 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
    48f8:	687b      	ldr	r3, [r7, #4]
    48fa:	2b02      	cmp	r3, #2
    48fc:	d104      	bne.n	4908 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
    48fe:	4b11      	ldr	r3, [pc, #68]	; (4944 <vTraceEnable+0x64>)
    4900:	0018      	movs	r0, r3
    4902:	4b11      	ldr	r3, [pc, #68]	; (4948 <vTraceEnable+0x68>)
    4904:	4798      	blx	r3
    4906:	e006      	b.n	4916 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
    4908:	687b      	ldr	r3, [r7, #4]
    490a:	2b00      	cmp	r3, #0
    490c:	d003      	beq.n	4916 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
    490e:	4b0f      	ldr	r3, [pc, #60]	; (494c <vTraceEnable+0x6c>)
    4910:	0018      	movs	r0, r3
    4912:	4b0d      	ldr	r3, [pc, #52]	; (4948 <vTraceEnable+0x68>)
    4914:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
    4916:	4b0e      	ldr	r3, [pc, #56]	; (4950 <vTraceEnable+0x70>)
    4918:	681b      	ldr	r3, [r3, #0]
    491a:	2b00      	cmp	r3, #0
    491c:	d109      	bne.n	4932 <vTraceEnable+0x52>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
    491e:	490d      	ldr	r1, [pc, #52]	; (4954 <vTraceEnable+0x74>)
    4920:	480d      	ldr	r0, [pc, #52]	; (4958 <vTraceEnable+0x78>)
    4922:	4b0b      	ldr	r3, [pc, #44]	; (4950 <vTraceEnable+0x70>)
    4924:	9301      	str	r3, [sp, #4]
    4926:	2304      	movs	r3, #4
    4928:	9300      	str	r3, [sp, #0]
    492a:	2300      	movs	r3, #0
    492c:	22c8      	movs	r2, #200	; 0xc8
    492e:	4c0b      	ldr	r4, [pc, #44]	; (495c <vTraceEnable+0x7c>)
    4930:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
    4932:	46c0      	nop			; (mov r8, r8)
    4934:	46bd      	mov	sp, r7
    4936:	b003      	add	sp, #12
    4938:	bd90      	pop	{r4, r7, pc}
    493a:	46c0      	nop			; (mov r8, r8)
    493c:	00005825 	.word	0x00005825
    4940:	00004d7d 	.word	0x00004d7d
    4944:	00023dec 	.word	0x00023dec
    4948:	00005ecd 	.word	0x00005ecd
    494c:	00023e2c 	.word	0x00023e2c
    4950:	20000f3c 	.word	0x20000f3c
    4954:	00023e60 	.word	0x00023e60
    4958:	00004961 	.word	0x00004961
    495c:	00008299 	.word	0x00008299

00004960 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
    4960:	b580      	push	{r7, lr}
    4962:	b082      	sub	sp, #8
    4964:	af00      	add	r7, sp, #0
    4966:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
    4968:	4b04      	ldr	r3, [pc, #16]	; (497c <TzCtrl+0x1c>)
    496a:	4798      	blx	r3
    496c:	1e03      	subs	r3, r0, #0
    496e:	d001      	beq.n	4974 <TzCtrl+0x14>
		{
			prvReportStackUsage();
    4970:	4b03      	ldr	r3, [pc, #12]	; (4980 <TzCtrl+0x20>)
    4972:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
    4974:	2004      	movs	r0, #4
    4976:	4b03      	ldr	r3, [pc, #12]	; (4984 <TzCtrl+0x24>)
    4978:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
    497a:	e7f5      	b.n	4968 <TzCtrl+0x8>
    497c:	00004dc1 	.word	0x00004dc1
    4980:	000047fd 	.word	0x000047fd
    4984:	00008635 	.word	0x00008635

00004988 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    4988:	b580      	push	{r7, lr}
    498a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    498c:	4b60      	ldr	r3, [pc, #384]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    498e:	681b      	ldr	r3, [r3, #0]
    4990:	2209      	movs	r2, #9
    4992:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
    4994:	4b5e      	ldr	r3, [pc, #376]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4996:	681b      	ldr	r3, [r3, #0]
    4998:	2264      	movs	r2, #100	; 0x64
    499a:	210a      	movs	r1, #10
    499c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
    499e:	4b5c      	ldr	r3, [pc, #368]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    49a0:	681b      	ldr	r3, [r3, #0]
    49a2:	2265      	movs	r2, #101	; 0x65
    49a4:	210a      	movs	r1, #10
    49a6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
    49a8:	4b59      	ldr	r3, [pc, #356]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    49aa:	681b      	ldr	r3, [r3, #0]
    49ac:	2266      	movs	r2, #102	; 0x66
    49ae:	210a      	movs	r1, #10
    49b0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
    49b2:	4b57      	ldr	r3, [pc, #348]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    49b4:	681b      	ldr	r3, [r3, #0]
    49b6:	2267      	movs	r2, #103	; 0x67
    49b8:	210f      	movs	r1, #15
    49ba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
    49bc:	4b54      	ldr	r3, [pc, #336]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    49be:	681b      	ldr	r3, [r3, #0]
    49c0:	2268      	movs	r2, #104	; 0x68
    49c2:	2105      	movs	r1, #5
    49c4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
    49c6:	4b52      	ldr	r3, [pc, #328]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    49c8:	681b      	ldr	r3, [r3, #0]
    49ca:	2269      	movs	r2, #105	; 0x69
    49cc:	2105      	movs	r1, #5
    49ce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
    49d0:	4b4f      	ldr	r3, [pc, #316]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    49d2:	681b      	ldr	r3, [r3, #0]
    49d4:	226a      	movs	r2, #106	; 0x6a
    49d6:	2105      	movs	r1, #5
    49d8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
    49da:	4b4d      	ldr	r3, [pc, #308]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    49dc:	681b      	ldr	r3, [r3, #0]
    49de:	226b      	movs	r2, #107	; 0x6b
    49e0:	2105      	movs	r1, #5
    49e2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
    49e4:	4b4a      	ldr	r3, [pc, #296]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    49e6:	681b      	ldr	r3, [r3, #0]
    49e8:	226c      	movs	r2, #108	; 0x6c
    49ea:	2105      	movs	r1, #5
    49ec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
    49ee:	4b48      	ldr	r3, [pc, #288]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    49f0:	681b      	ldr	r3, [r3, #0]
    49f2:	2270      	movs	r2, #112	; 0x70
    49f4:	210f      	movs	r1, #15
    49f6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
    49f8:	4b45      	ldr	r3, [pc, #276]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    49fa:	681b      	ldr	r3, [r3, #0]
    49fc:	2271      	movs	r2, #113	; 0x71
    49fe:	210f      	movs	r1, #15
    4a00:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
    4a02:	4b43      	ldr	r3, [pc, #268]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a04:	681b      	ldr	r3, [r3, #0]
    4a06:	2272      	movs	r2, #114	; 0x72
    4a08:	210f      	movs	r1, #15
    4a0a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
    4a0c:	4b40      	ldr	r3, [pc, #256]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a0e:	681b      	ldr	r3, [r3, #0]
    4a10:	2273      	movs	r2, #115	; 0x73
    4a12:	210f      	movs	r1, #15
    4a14:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
    4a16:	4b3e      	ldr	r3, [pc, #248]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a18:	681b      	ldr	r3, [r3, #0]
    4a1a:	2274      	movs	r2, #116	; 0x74
    4a1c:	210f      	movs	r1, #15
    4a1e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
    4a20:	4b3b      	ldr	r3, [pc, #236]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a22:	681b      	ldr	r3, [r3, #0]
    4a24:	2275      	movs	r2, #117	; 0x75
    4a26:	210f      	movs	r1, #15
    4a28:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
    4a2a:	4b39      	ldr	r3, [pc, #228]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a2c:	681b      	ldr	r3, [r3, #0]
    4a2e:	2276      	movs	r2, #118	; 0x76
    4a30:	210f      	movs	r1, #15
    4a32:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
    4a34:	4b36      	ldr	r3, [pc, #216]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a36:	681b      	ldr	r3, [r3, #0]
    4a38:	2277      	movs	r2, #119	; 0x77
    4a3a:	210f      	movs	r1, #15
    4a3c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
    4a3e:	4b34      	ldr	r3, [pc, #208]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a40:	681b      	ldr	r3, [r3, #0]
    4a42:	2278      	movs	r2, #120	; 0x78
    4a44:	210f      	movs	r1, #15
    4a46:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    4a48:	4b31      	ldr	r3, [pc, #196]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a4a:	681b      	ldr	r3, [r3, #0]
    4a4c:	227c      	movs	r2, #124	; 0x7c
    4a4e:	2110      	movs	r1, #16
    4a50:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    4a52:	4b2f      	ldr	r3, [pc, #188]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a54:	681b      	ldr	r3, [r3, #0]
    4a56:	227d      	movs	r2, #125	; 0x7d
    4a58:	2110      	movs	r1, #16
    4a5a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    4a5c:	4b2c      	ldr	r3, [pc, #176]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a5e:	681b      	ldr	r3, [r3, #0]
    4a60:	227e      	movs	r2, #126	; 0x7e
    4a62:	2110      	movs	r1, #16
    4a64:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    4a66:	4b2a      	ldr	r3, [pc, #168]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a68:	681b      	ldr	r3, [r3, #0]
    4a6a:	227f      	movs	r2, #127	; 0x7f
    4a6c:	2113      	movs	r1, #19
    4a6e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    4a70:	4b27      	ldr	r3, [pc, #156]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a72:	681b      	ldr	r3, [r3, #0]
    4a74:	2280      	movs	r2, #128	; 0x80
    4a76:	2111      	movs	r1, #17
    4a78:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    4a7a:	4b25      	ldr	r3, [pc, #148]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a7c:	681b      	ldr	r3, [r3, #0]
    4a7e:	2281      	movs	r2, #129	; 0x81
    4a80:	2110      	movs	r1, #16
    4a82:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    4a84:	4b22      	ldr	r3, [pc, #136]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a86:	681b      	ldr	r3, [r3, #0]
    4a88:	2282      	movs	r2, #130	; 0x82
    4a8a:	2113      	movs	r1, #19
    4a8c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
    4a8e:	4b20      	ldr	r3, [pc, #128]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a90:	681b      	ldr	r3, [r3, #0]
    4a92:	2283      	movs	r2, #131	; 0x83
    4a94:	2113      	movs	r1, #19
    4a96:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
    4a98:	4b1d      	ldr	r3, [pc, #116]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4a9a:	681b      	ldr	r3, [r3, #0]
    4a9c:	2284      	movs	r2, #132	; 0x84
    4a9e:	2113      	movs	r1, #19
    4aa0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    4aa2:	4b1b      	ldr	r3, [pc, #108]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4aa4:	681b      	ldr	r3, [r3, #0]
    4aa6:	2288      	movs	r2, #136	; 0x88
    4aa8:	2100      	movs	r1, #0
    4aaa:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    4aac:	4b18      	ldr	r3, [pc, #96]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4aae:	681b      	ldr	r3, [r3, #0]
    4ab0:	228a      	movs	r2, #138	; 0x8a
    4ab2:	21a0      	movs	r1, #160	; 0xa0
    4ab4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    4ab6:	4b16      	ldr	r3, [pc, #88]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4ab8:	681b      	ldr	r3, [r3, #0]
    4aba:	228c      	movs	r2, #140	; 0x8c
    4abc:	21a0      	movs	r1, #160	; 0xa0
    4abe:	0049      	lsls	r1, r1, #1
    4ac0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    4ac2:	4b13      	ldr	r3, [pc, #76]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4ac4:	681b      	ldr	r3, [r3, #0]
    4ac6:	228e      	movs	r2, #142	; 0x8e
    4ac8:	21f0      	movs	r1, #240	; 0xf0
    4aca:	0049      	lsls	r1, r1, #1
    4acc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    4ace:	4b10      	ldr	r3, [pc, #64]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4ad0:	681b      	ldr	r3, [r3, #0]
    4ad2:	2290      	movs	r2, #144	; 0x90
    4ad4:	490f      	ldr	r1, [pc, #60]	; (4b14 <vTraceInitObjectPropertyTable+0x18c>)
    4ad6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    4ad8:	4b0d      	ldr	r3, [pc, #52]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4ada:	681b      	ldr	r3, [r3, #0]
    4adc:	2292      	movs	r2, #146	; 0x92
    4ade:	490e      	ldr	r1, [pc, #56]	; (4b18 <vTraceInitObjectPropertyTable+0x190>)
    4ae0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    4ae2:	4b0b      	ldr	r3, [pc, #44]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4ae4:	681b      	ldr	r3, [r3, #0]
    4ae6:	2294      	movs	r2, #148	; 0x94
    4ae8:	490c      	ldr	r1, [pc, #48]	; (4b1c <vTraceInitObjectPropertyTable+0x194>)
    4aea:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
    4aec:	4b08      	ldr	r3, [pc, #32]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4aee:	681b      	ldr	r3, [r3, #0]
    4af0:	2296      	movs	r2, #150	; 0x96
    4af2:	490b      	ldr	r1, [pc, #44]	; (4b20 <vTraceInitObjectPropertyTable+0x198>)
    4af4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
    4af6:	4b06      	ldr	r3, [pc, #24]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4af8:	681b      	ldr	r3, [r3, #0]
    4afa:	2298      	movs	r2, #152	; 0x98
    4afc:	218c      	movs	r1, #140	; 0x8c
    4afe:	00c9      	lsls	r1, r1, #3
    4b00:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    4b02:	4b03      	ldr	r3, [pc, #12]	; (4b10 <vTraceInitObjectPropertyTable+0x188>)
    4b04:	681b      	ldr	r3, [r3, #0]
    4b06:	4a07      	ldr	r2, [pc, #28]	; (4b24 <vTraceInitObjectPropertyTable+0x19c>)
    4b08:	661a      	str	r2, [r3, #96]	; 0x60
}
    4b0a:	46c0      	nop			; (mov r8, r8)
    4b0c:	46bd      	mov	sp, r7
    4b0e:	bd80      	pop	{r7, pc}
    4b10:	20001054 	.word	0x20001054
    4b14:	000002fd 	.word	0x000002fd
    4b18:	00000352 	.word	0x00000352
    4b1c:	000003a2 	.word	0x000003a2
    4b20:	00000401 	.word	0x00000401
    4b24:	000004bf 	.word	0x000004bf

00004b28 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
    4b28:	b580      	push	{r7, lr}
    4b2a:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    4b2c:	4b2e      	ldr	r3, [pc, #184]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b2e:	2200      	movs	r2, #0
    4b30:	825a      	strh	r2, [r3, #18]
    4b32:	4b2d      	ldr	r3, [pc, #180]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b34:	8a5a      	ldrh	r2, [r3, #18]
    4b36:	4b2c      	ldr	r3, [pc, #176]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b38:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
    4b3a:	4b2b      	ldr	r3, [pc, #172]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b3c:	220a      	movs	r2, #10
    4b3e:	829a      	strh	r2, [r3, #20]
    4b40:	4b29      	ldr	r3, [pc, #164]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b42:	8a9a      	ldrh	r2, [r3, #20]
    4b44:	4b28      	ldr	r3, [pc, #160]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b46:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
    4b48:	4b27      	ldr	r3, [pc, #156]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b4a:	2214      	movs	r2, #20
    4b4c:	82da      	strh	r2, [r3, #22]
    4b4e:	4b26      	ldr	r3, [pc, #152]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b50:	8ada      	ldrh	r2, [r3, #22]
    4b52:	4b25      	ldr	r3, [pc, #148]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b54:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
    4b56:	4b24      	ldr	r3, [pc, #144]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b58:	221e      	movs	r2, #30
    4b5a:	831a      	strh	r2, [r3, #24]
    4b5c:	4b22      	ldr	r3, [pc, #136]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b5e:	8b1a      	ldrh	r2, [r3, #24]
    4b60:	4b21      	ldr	r3, [pc, #132]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b62:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
    4b64:	4b20      	ldr	r3, [pc, #128]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b66:	222d      	movs	r2, #45	; 0x2d
    4b68:	835a      	strh	r2, [r3, #26]
    4b6a:	4b1f      	ldr	r3, [pc, #124]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b6c:	8b5a      	ldrh	r2, [r3, #26]
    4b6e:	4b1e      	ldr	r3, [pc, #120]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b70:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
    4b72:	4b1d      	ldr	r3, [pc, #116]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b74:	2232      	movs	r2, #50	; 0x32
    4b76:	839a      	strh	r2, [r3, #28]
    4b78:	4b1b      	ldr	r3, [pc, #108]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b7a:	8b9a      	ldrh	r2, [r3, #28]
    4b7c:	4b1a      	ldr	r3, [pc, #104]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b7e:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
    4b80:	4b19      	ldr	r3, [pc, #100]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b82:	2237      	movs	r2, #55	; 0x37
    4b84:	83da      	strh	r2, [r3, #30]
    4b86:	4b18      	ldr	r3, [pc, #96]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b88:	8bda      	ldrh	r2, [r3, #30]
    4b8a:	4b17      	ldr	r3, [pc, #92]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b8c:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
    4b8e:	4b16      	ldr	r3, [pc, #88]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b90:	223c      	movs	r2, #60	; 0x3c
    4b92:	841a      	strh	r2, [r3, #32]
    4b94:	4b14      	ldr	r3, [pc, #80]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b96:	8c1a      	ldrh	r2, [r3, #32]
    4b98:	4b13      	ldr	r3, [pc, #76]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b9a:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
    4b9c:	4b12      	ldr	r3, [pc, #72]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4b9e:	2241      	movs	r2, #65	; 0x41
    4ba0:	845a      	strh	r2, [r3, #34]	; 0x22
    4ba2:	4b11      	ldr	r3, [pc, #68]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4ba4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    4ba6:	4b10      	ldr	r3, [pc, #64]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4ba8:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
    4baa:	4b0f      	ldr	r3, [pc, #60]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4bac:	2209      	movs	r2, #9
    4bae:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
    4bb0:	4b0d      	ldr	r3, [pc, #52]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4bb2:	2213      	movs	r2, #19
    4bb4:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
    4bb6:	4b0c      	ldr	r3, [pc, #48]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4bb8:	221d      	movs	r2, #29
    4bba:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
    4bbc:	4b0a      	ldr	r3, [pc, #40]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4bbe:	222c      	movs	r2, #44	; 0x2c
    4bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
    4bc2:	4b09      	ldr	r3, [pc, #36]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4bc4:	2231      	movs	r2, #49	; 0x31
    4bc6:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
    4bc8:	4b07      	ldr	r3, [pc, #28]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4bca:	2236      	movs	r2, #54	; 0x36
    4bcc:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
    4bce:	4b06      	ldr	r3, [pc, #24]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4bd0:	223b      	movs	r2, #59	; 0x3b
    4bd2:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
    4bd4:	4b04      	ldr	r3, [pc, #16]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4bd6:	2240      	movs	r2, #64	; 0x40
    4bd8:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
    4bda:	4b03      	ldr	r3, [pc, #12]	; (4be8 <vTraceInitObjectHandleStack+0xc0>)
    4bdc:	2245      	movs	r2, #69	; 0x45
    4bde:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4be0:	46c0      	nop			; (mov r8, r8)
    4be2:	46bd      	mov	sp, r7
    4be4:	bd80      	pop	{r7, pc}
    4be6:	46c0      	nop			; (mov r8, r8)
    4be8:	20000fc4 	.word	0x20000fc4

00004bec <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
    4bec:	b580      	push	{r7, lr}
    4bee:	b082      	sub	sp, #8
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	0002      	movs	r2, r0
    4bf4:	1dfb      	adds	r3, r7, #7
    4bf6:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
    4bf8:	1dfb      	adds	r3, r7, #7
    4bfa:	781b      	ldrb	r3, [r3, #0]
    4bfc:	2b08      	cmp	r3, #8
    4bfe:	d816      	bhi.n	4c2e <pszTraceGetErrorNotEnoughHandles+0x42>
    4c00:	009a      	lsls	r2, r3, #2
    4c02:	4b0d      	ldr	r3, [pc, #52]	; (4c38 <pszTraceGetErrorNotEnoughHandles+0x4c>)
    4c04:	18d3      	adds	r3, r2, r3
    4c06:	681b      	ldr	r3, [r3, #0]
    4c08:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
    4c0a:	4b0c      	ldr	r3, [pc, #48]	; (4c3c <pszTraceGetErrorNotEnoughHandles+0x50>)
    4c0c:	e010      	b.n	4c30 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
    4c0e:	4b0c      	ldr	r3, [pc, #48]	; (4c40 <pszTraceGetErrorNotEnoughHandles+0x54>)
    4c10:	e00e      	b.n	4c30 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
    4c12:	4b0c      	ldr	r3, [pc, #48]	; (4c44 <pszTraceGetErrorNotEnoughHandles+0x58>)
    4c14:	e00c      	b.n	4c30 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
    4c16:	4b0c      	ldr	r3, [pc, #48]	; (4c48 <pszTraceGetErrorNotEnoughHandles+0x5c>)
    4c18:	e00a      	b.n	4c30 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
    4c1a:	4b0c      	ldr	r3, [pc, #48]	; (4c4c <pszTraceGetErrorNotEnoughHandles+0x60>)
    4c1c:	e008      	b.n	4c30 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
    4c1e:	4b0c      	ldr	r3, [pc, #48]	; (4c50 <pszTraceGetErrorNotEnoughHandles+0x64>)
    4c20:	e006      	b.n	4c30 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
    4c22:	4b0c      	ldr	r3, [pc, #48]	; (4c54 <pszTraceGetErrorNotEnoughHandles+0x68>)
    4c24:	e004      	b.n	4c30 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
    4c26:	4b0c      	ldr	r3, [pc, #48]	; (4c58 <pszTraceGetErrorNotEnoughHandles+0x6c>)
    4c28:	e002      	b.n	4c30 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
    4c2a:	4b0c      	ldr	r3, [pc, #48]	; (4c5c <pszTraceGetErrorNotEnoughHandles+0x70>)
    4c2c:	e000      	b.n	4c30 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    4c2e:	4b0c      	ldr	r3, [pc, #48]	; (4c60 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
    4c30:	0018      	movs	r0, r3
    4c32:	46bd      	mov	sp, r7
    4c34:	b002      	add	sp, #8
    4c36:	bd80      	pop	{r7, pc}
    4c38:	00024168 	.word	0x00024168
    4c3c:	00023e68 	.word	0x00023e68
    4c40:	00023eb0 	.word	0x00023eb0
    4c44:	00023ef8 	.word	0x00023ef8
    4c48:	00023f4c 	.word	0x00023f4c
    4c4c:	00023f98 	.word	0x00023f98
    4c50:	00023fe4 	.word	0x00023fe4
    4c54:	00024030 	.word	0x00024030
    4c58:	00024084 	.word	0x00024084
    4c5c:	000240dc 	.word	0x000240dc
    4c60:	00024138 	.word	0x00024138

00004c64 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
    4c64:	b590      	push	{r4, r7, lr}
    4c66:	b087      	sub	sp, #28
    4c68:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
    4c6a:	2317      	movs	r3, #23
    4c6c:	18fb      	adds	r3, r7, r3
    4c6e:	2200      	movs	r2, #0
    4c70:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
    4c72:	4b36      	ldr	r3, [pc, #216]	; (4d4c <uiTraceStart+0xe8>)
    4c74:	681b      	ldr	r3, [r3, #0]
    4c76:	2b00      	cmp	r3, #0
    4c78:	d10b      	bne.n	4c92 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
    4c7a:	4b34      	ldr	r3, [pc, #208]	; (4d4c <uiTraceStart+0xe8>)
    4c7c:	681b      	ldr	r3, [r3, #0]
    4c7e:	2b00      	cmp	r3, #0
    4c80:	d105      	bne.n	4c8e <uiTraceStart+0x2a>
    4c82:	4b33      	ldr	r3, [pc, #204]	; (4d50 <uiTraceStart+0xec>)
    4c84:	0018      	movs	r0, r3
    4c86:	4b33      	ldr	r3, [pc, #204]	; (4d54 <uiTraceStart+0xf0>)
    4c88:	4798      	blx	r3
    4c8a:	2300      	movs	r3, #0
    4c8c:	e059      	b.n	4d42 <uiTraceStart+0xde>
		return 0;
    4c8e:	2300      	movs	r3, #0
    4c90:	e057      	b.n	4d42 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
    4c92:	4b2e      	ldr	r3, [pc, #184]	; (4d4c <uiTraceStart+0xe8>)
    4c94:	681b      	ldr	r3, [r3, #0]
    4c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4c98:	2b01      	cmp	r3, #1
    4c9a:	d101      	bne.n	4ca0 <uiTraceStart+0x3c>
		return 1; /* Already running */
    4c9c:	2301      	movs	r3, #1
    4c9e:	e050      	b.n	4d42 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
    4ca0:	4b2d      	ldr	r3, [pc, #180]	; (4d58 <uiTraceStart+0xf4>)
    4ca2:	681b      	ldr	r3, [r3, #0]
    4ca4:	2b00      	cmp	r3, #0
    4ca6:	d149      	bne.n	4d3c <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4ca8:	f3ef 8310 	mrs	r3, PRIMASK
    4cac:	60bb      	str	r3, [r7, #8]
  return(result);
    4cae:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
    4cb0:	613b      	str	r3, [r7, #16]
    4cb2:	2301      	movs	r3, #1
    4cb4:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4cb6:	68fb      	ldr	r3, [r7, #12]
    4cb8:	f383 8810 	msr	PRIMASK, r3
    4cbc:	4b27      	ldr	r3, [pc, #156]	; (4d5c <uiTraceStart+0xf8>)
    4cbe:	681b      	ldr	r3, [r3, #0]
    4cc0:	1c5a      	adds	r2, r3, #1
    4cc2:	4b26      	ldr	r3, [pc, #152]	; (4d5c <uiTraceStart+0xf8>)
    4cc4:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
    4cc6:	4b21      	ldr	r3, [pc, #132]	; (4d4c <uiTraceStart+0xe8>)
    4cc8:	681b      	ldr	r3, [r3, #0]
    4cca:	2201      	movs	r2, #1
    4ccc:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
    4cce:	4b24      	ldr	r3, [pc, #144]	; (4d60 <uiTraceStart+0xfc>)
    4cd0:	4798      	blx	r3
    4cd2:	0003      	movs	r3, r0
    4cd4:	0018      	movs	r0, r3
    4cd6:	4b23      	ldr	r3, [pc, #140]	; (4d64 <uiTraceStart+0x100>)
    4cd8:	4798      	blx	r3
    4cda:	0003      	movs	r3, r0
    4cdc:	001a      	movs	r2, r3
    4cde:	2317      	movs	r3, #23
    4ce0:	18fb      	adds	r3, r7, r3
    4ce2:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
    4ce4:	2317      	movs	r3, #23
    4ce6:	18fb      	adds	r3, r7, r3
    4ce8:	781b      	ldrb	r3, [r3, #0]
    4cea:	2b00      	cmp	r3, #0
    4cec:	d116      	bne.n	4d1c <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
    4cee:	2317      	movs	r3, #23
    4cf0:	18fc      	adds	r4, r7, r3
    4cf2:	2003      	movs	r0, #3
    4cf4:	4b1c      	ldr	r3, [pc, #112]	; (4d68 <uiTraceStart+0x104>)
    4cf6:	4798      	blx	r3
    4cf8:	0003      	movs	r3, r0
    4cfa:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
    4cfc:	4a1b      	ldr	r2, [pc, #108]	; (4d6c <uiTraceStart+0x108>)
    4cfe:	2317      	movs	r3, #23
    4d00:	18fb      	adds	r3, r7, r3
    4d02:	781b      	ldrb	r3, [r3, #0]
    4d04:	0019      	movs	r1, r3
    4d06:	2003      	movs	r0, #3
    4d08:	4b19      	ldr	r3, [pc, #100]	; (4d70 <uiTraceStart+0x10c>)
    4d0a:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
    4d0c:	2317      	movs	r3, #23
    4d0e:	18fb      	adds	r3, r7, r3
    4d10:	781b      	ldrb	r3, [r3, #0]
    4d12:	2200      	movs	r2, #0
    4d14:	0019      	movs	r1, r3
    4d16:	2003      	movs	r0, #3
    4d18:	4b16      	ldr	r3, [pc, #88]	; (4d74 <uiTraceStart+0x110>)
    4d1a:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
    4d1c:	2317      	movs	r3, #23
    4d1e:	18fb      	adds	r3, r7, r3
    4d20:	781b      	ldrb	r3, [r3, #0]
    4d22:	0018      	movs	r0, r3
    4d24:	4b14      	ldr	r3, [pc, #80]	; (4d78 <uiTraceStart+0x114>)
    4d26:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
    4d28:	4b0c      	ldr	r3, [pc, #48]	; (4d5c <uiTraceStart+0xf8>)
    4d2a:	681b      	ldr	r3, [r3, #0]
    4d2c:	1e5a      	subs	r2, r3, #1
    4d2e:	4b0b      	ldr	r3, [pc, #44]	; (4d5c <uiTraceStart+0xf8>)
    4d30:	601a      	str	r2, [r3, #0]
    4d32:	693b      	ldr	r3, [r7, #16]
    4d34:	607b      	str	r3, [r7, #4]
    4d36:	687b      	ldr	r3, [r7, #4]
    4d38:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
    4d3c:	4b03      	ldr	r3, [pc, #12]	; (4d4c <uiTraceStart+0xe8>)
    4d3e:	681b      	ldr	r3, [r3, #0]
    4d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    4d42:	0018      	movs	r0, r3
    4d44:	46bd      	mov	sp, r7
    4d46:	b007      	add	sp, #28
    4d48:	bd90      	pop	{r4, r7, pc}
    4d4a:	46c0      	nop			; (mov r8, r8)
    4d4c:	20001054 	.word	0x20001054
    4d50:	0002418c 	.word	0x0002418c
    4d54:	00005ecd 	.word	0x00005ecd
    4d58:	20000fb4 	.word	0x20000fb4
    4d5c:	20000fac 	.word	0x20000fac
    4d60:	000048cd 	.word	0x000048cd
    4d64:	00004611 	.word	0x00004611
    4d68:	00005bb1 	.word	0x00005bb1
    4d6c:	000241d0 	.word	0x000241d0
    4d70:	00005de1 	.word	0x00005de1
    4d74:	00005545 	.word	0x00005545
    4d78:	0000542d 	.word	0x0000542d

00004d7c <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
    4d7c:	b580      	push	{r7, lr}
    4d7e:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
    4d80:	4b02      	ldr	r3, [pc, #8]	; (4d8c <vTraceStart+0x10>)
    4d82:	4798      	blx	r3
}
    4d84:	46c0      	nop			; (mov r8, r8)
    4d86:	46bd      	mov	sp, r7
    4d88:	bd80      	pop	{r7, pc}
    4d8a:	46c0      	nop			; (mov r8, r8)
    4d8c:	00004c65 	.word	0x00004c65

00004d90 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
    4d90:	b580      	push	{r7, lr}
    4d92:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
    4d94:	4b08      	ldr	r3, [pc, #32]	; (4db8 <vTraceStop+0x28>)
    4d96:	681b      	ldr	r3, [r3, #0]
    4d98:	2b00      	cmp	r3, #0
    4d9a:	d003      	beq.n	4da4 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
    4d9c:	4b06      	ldr	r3, [pc, #24]	; (4db8 <vTraceStop+0x28>)
    4d9e:	681b      	ldr	r3, [r3, #0]
    4da0:	2200      	movs	r2, #0
    4da2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
    4da4:	4b05      	ldr	r3, [pc, #20]	; (4dbc <vTraceStop+0x2c>)
    4da6:	681b      	ldr	r3, [r3, #0]
    4da8:	2b00      	cmp	r3, #0
    4daa:	d002      	beq.n	4db2 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
    4dac:	4b03      	ldr	r3, [pc, #12]	; (4dbc <vTraceStop+0x2c>)
    4dae:	681b      	ldr	r3, [r3, #0]
    4db0:	4798      	blx	r3
	}
}
    4db2:	46c0      	nop			; (mov r8, r8)
    4db4:	46bd      	mov	sp, r7
    4db6:	bd80      	pop	{r7, pc}
    4db8:	20001054 	.word	0x20001054
    4dbc:	20000fbc 	.word	0x20000fbc

00004dc0 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
    4dc0:	b580      	push	{r7, lr}
    4dc2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
    4dc4:	4b05      	ldr	r3, [pc, #20]	; (4ddc <xTraceIsRecordingEnabled+0x1c>)
    4dc6:	681b      	ldr	r3, [r3, #0]
    4dc8:	2b00      	cmp	r3, #0
    4dca:	d003      	beq.n	4dd4 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
    4dcc:	4b03      	ldr	r3, [pc, #12]	; (4ddc <xTraceIsRecordingEnabled+0x1c>)
    4dce:	681b      	ldr	r3, [r3, #0]
    4dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4dd2:	e000      	b.n	4dd6 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
    4dd4:	2300      	movs	r3, #0
	}
}
    4dd6:	0018      	movs	r0, r3
    4dd8:	46bd      	mov	sp, r7
    4dda:	bd80      	pop	{r7, pc}
    4ddc:	20001054 	.word	0x20001054

00004de0 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
    4de0:	b590      	push	{r4, r7, lr}
    4de2:	b089      	sub	sp, #36	; 0x24
    4de4:	af00      	add	r7, sp, #0
    4de6:	0002      	movs	r2, r0
    4de8:	1dfb      	adds	r3, r7, #7
    4dea:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
    4dec:	1dfb      	adds	r3, r7, #7
    4dee:	781b      	ldrb	r3, [r3, #0]
    4df0:	2b00      	cmp	r3, #0
    4df2:	d057      	beq.n	4ea4 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
    4df4:	4b2e      	ldr	r3, [pc, #184]	; (4eb0 <prvTraceStoreTaskReady+0xd0>)
    4df6:	681b      	ldr	r3, [r3, #0]
    4df8:	2b00      	cmp	r3, #0
    4dfa:	d055      	beq.n	4ea8 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    4dfc:	1dfb      	adds	r3, r7, #7
    4dfe:	781b      	ldrb	r3, [r3, #0]
    4e00:	2b0f      	cmp	r3, #15
    4e02:	d904      	bls.n	4e0e <prvTraceStoreTaskReady+0x2e>
    4e04:	4b2b      	ldr	r3, [pc, #172]	; (4eb4 <prvTraceStoreTaskReady+0xd4>)
    4e06:	0018      	movs	r0, r3
    4e08:	4b2b      	ldr	r3, [pc, #172]	; (4eb8 <prvTraceStoreTaskReady+0xd8>)
    4e0a:	4798      	blx	r3
    4e0c:	e04d      	b.n	4eaa <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
    4e0e:	4b2b      	ldr	r3, [pc, #172]	; (4ebc <prvTraceStoreTaskReady+0xdc>)
    4e10:	681b      	ldr	r3, [r3, #0]
    4e12:	2b00      	cmp	r3, #0
    4e14:	d004      	beq.n	4e20 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
    4e16:	4b2a      	ldr	r3, [pc, #168]	; (4ec0 <prvTraceStoreTaskReady+0xe0>)
    4e18:	0018      	movs	r0, r3
    4e1a:	4b27      	ldr	r3, [pc, #156]	; (4eb8 <prvTraceStoreTaskReady+0xd8>)
    4e1c:	4798      	blx	r3
		return;
    4e1e:	e044      	b.n	4eaa <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4e20:	f3ef 8310 	mrs	r3, PRIMASK
    4e24:	60fb      	str	r3, [r7, #12]
  return(result);
    4e26:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
    4e28:	61fb      	str	r3, [r7, #28]
    4e2a:	2301      	movs	r3, #1
    4e2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4e2e:	693b      	ldr	r3, [r7, #16]
    4e30:	f383 8810 	msr	PRIMASK, r3
    4e34:	4b21      	ldr	r3, [pc, #132]	; (4ebc <prvTraceStoreTaskReady+0xdc>)
    4e36:	681b      	ldr	r3, [r3, #0]
    4e38:	1c5a      	adds	r2, r3, #1
    4e3a:	4b20      	ldr	r3, [pc, #128]	; (4ebc <prvTraceStoreTaskReady+0xdc>)
    4e3c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    4e3e:	4b21      	ldr	r3, [pc, #132]	; (4ec4 <prvTraceStoreTaskReady+0xe4>)
    4e40:	681b      	ldr	r3, [r3, #0]
    4e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4e44:	2b00      	cmp	r3, #0
    4e46:	d022      	beq.n	4e8e <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    4e48:	231a      	movs	r3, #26
    4e4a:	18fc      	adds	r4, r7, r3
    4e4c:	4b1e      	ldr	r3, [pc, #120]	; (4ec8 <prvTraceStoreTaskReady+0xe8>)
    4e4e:	0018      	movs	r0, r3
    4e50:	4b1e      	ldr	r3, [pc, #120]	; (4ecc <prvTraceStoreTaskReady+0xec>)
    4e52:	4798      	blx	r3
    4e54:	0003      	movs	r3, r0
    4e56:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
    4e58:	2319      	movs	r3, #25
    4e5a:	18fb      	adds	r3, r7, r3
    4e5c:	1dfa      	adds	r2, r7, #7
    4e5e:	7812      	ldrb	r2, [r2, #0]
    4e60:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
    4e62:	4b1b      	ldr	r3, [pc, #108]	; (4ed0 <prvTraceStoreTaskReady+0xf0>)
    4e64:	4798      	blx	r3
    4e66:	0003      	movs	r3, r0
    4e68:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
    4e6a:	697b      	ldr	r3, [r7, #20]
    4e6c:	2b00      	cmp	r3, #0
    4e6e:	d00e      	beq.n	4e8e <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
    4e70:	697b      	ldr	r3, [r7, #20]
    4e72:	2202      	movs	r2, #2
    4e74:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
    4e76:	697b      	ldr	r3, [r7, #20]
    4e78:	221a      	movs	r2, #26
    4e7a:	18ba      	adds	r2, r7, r2
    4e7c:	8812      	ldrh	r2, [r2, #0]
    4e7e:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
    4e80:	697b      	ldr	r3, [r7, #20]
    4e82:	2219      	movs	r2, #25
    4e84:	18ba      	adds	r2, r7, r2
    4e86:	7812      	ldrb	r2, [r2, #0]
    4e88:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
    4e8a:	4b12      	ldr	r3, [pc, #72]	; (4ed4 <prvTraceStoreTaskReady+0xf4>)
    4e8c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    4e8e:	4b0b      	ldr	r3, [pc, #44]	; (4ebc <prvTraceStoreTaskReady+0xdc>)
    4e90:	681b      	ldr	r3, [r3, #0]
    4e92:	1e5a      	subs	r2, r3, #1
    4e94:	4b09      	ldr	r3, [pc, #36]	; (4ebc <prvTraceStoreTaskReady+0xdc>)
    4e96:	601a      	str	r2, [r3, #0]
    4e98:	69fb      	ldr	r3, [r7, #28]
    4e9a:	60bb      	str	r3, [r7, #8]
    4e9c:	68bb      	ldr	r3, [r7, #8]
    4e9e:	f383 8810 	msr	PRIMASK, r3
    4ea2:	e002      	b.n	4eaa <prvTraceStoreTaskReady+0xca>
		return;
    4ea4:	46c0      	nop			; (mov r8, r8)
    4ea6:	e000      	b.n	4eaa <prvTraceStoreTaskReady+0xca>
		return;
    4ea8:	46c0      	nop			; (mov r8, r8)
}
    4eaa:	46bd      	mov	sp, r7
    4eac:	b009      	add	sp, #36	; 0x24
    4eae:	bd90      	pop	{r4, r7, pc}
    4eb0:	200000f8 	.word	0x200000f8
    4eb4:	00024538 	.word	0x00024538
    4eb8:	00005ecd 	.word	0x00005ecd
    4ebc:	20000fac 	.word	0x20000fac
    4ec0:	00024578 	.word	0x00024578
    4ec4:	20001054 	.word	0x20001054
    4ec8:	0000ffff 	.word	0x0000ffff
    4ecc:	000060e1 	.word	0x000060e1
    4ed0:	00005a85 	.word	0x00005a85
    4ed4:	00006089 	.word	0x00006089

00004ed8 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
    4ed8:	b580      	push	{r7, lr}
    4eda:	b08e      	sub	sp, #56	; 0x38
    4edc:	af00      	add	r7, sp, #0
    4ede:	60f8      	str	r0, [r7, #12]
    4ee0:	60b9      	str	r1, [r7, #8]
    4ee2:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
    4ee4:	4b48      	ldr	r3, [pc, #288]	; (5008 <vTraceStoreMemMangEvent+0x130>)
    4ee6:	681b      	ldr	r3, [r3, #0]
    4ee8:	2b00      	cmp	r3, #0
    4eea:	d100      	bne.n	4eee <vTraceStoreMemMangEvent+0x16>
    4eec:	e088      	b.n	5000 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
    4eee:	687b      	ldr	r3, [r7, #4]
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	da03      	bge.n	4efc <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
    4ef4:	687b      	ldr	r3, [r7, #4]
    4ef6:	425b      	negs	r3, r3
    4ef8:	637b      	str	r3, [r7, #52]	; 0x34
    4efa:	e001      	b.n	4f00 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
    4efc:	687b      	ldr	r3, [r7, #4]
    4efe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4f00:	f3ef 8310 	mrs	r3, PRIMASK
    4f04:	61bb      	str	r3, [r7, #24]
  return(result);
    4f06:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
    4f08:	633b      	str	r3, [r7, #48]	; 0x30
    4f0a:	2301      	movs	r3, #1
    4f0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4f0e:	69fb      	ldr	r3, [r7, #28]
    4f10:	f383 8810 	msr	PRIMASK, r3
    4f14:	4b3d      	ldr	r3, [pc, #244]	; (500c <vTraceStoreMemMangEvent+0x134>)
    4f16:	681b      	ldr	r3, [r3, #0]
    4f18:	1c5a      	adds	r2, r3, #1
    4f1a:	4b3c      	ldr	r3, [pc, #240]	; (500c <vTraceStoreMemMangEvent+0x134>)
    4f1c:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
    4f1e:	68bb      	ldr	r3, [r7, #8]
    4f20:	2b00      	cmp	r3, #0
    4f22:	d005      	beq.n	4f30 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
    4f24:	4b3a      	ldr	r3, [pc, #232]	; (5010 <vTraceStoreMemMangEvent+0x138>)
    4f26:	681a      	ldr	r2, [r3, #0]
    4f28:	687b      	ldr	r3, [r7, #4]
    4f2a:	18d2      	adds	r2, r2, r3
    4f2c:	4b38      	ldr	r3, [pc, #224]	; (5010 <vTraceStoreMemMangEvent+0x138>)
    4f2e:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
    4f30:	4b35      	ldr	r3, [pc, #212]	; (5008 <vTraceStoreMemMangEvent+0x130>)
    4f32:	681b      	ldr	r3, [r3, #0]
    4f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4f36:	2b00      	cmp	r3, #0
    4f38:	d057      	beq.n	4fea <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
    4f3a:	20ff      	movs	r0, #255	; 0xff
    4f3c:	4b35      	ldr	r3, [pc, #212]	; (5014 <vTraceStoreMemMangEvent+0x13c>)
    4f3e:	4798      	blx	r3
    4f40:	0003      	movs	r3, r0
    4f42:	001a      	movs	r2, r3
    4f44:	232f      	movs	r3, #47	; 0x2f
    4f46:	18fb      	adds	r3, r7, r3
    4f48:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
    4f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f4c:	4a32      	ldr	r2, [pc, #200]	; (5018 <vTraceStoreMemMangEvent+0x140>)
    4f4e:	0019      	movs	r1, r3
    4f50:	0010      	movs	r0, r2
    4f52:	4b32      	ldr	r3, [pc, #200]	; (501c <vTraceStoreMemMangEvent+0x144>)
    4f54:	4798      	blx	r3
    4f56:	0002      	movs	r2, r0
    4f58:	232c      	movs	r3, #44	; 0x2c
    4f5a:	18fb      	adds	r3, r7, r3
    4f5c:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
    4f5e:	4b30      	ldr	r3, [pc, #192]	; (5020 <vTraceStoreMemMangEvent+0x148>)
    4f60:	4798      	blx	r3
    4f62:	0003      	movs	r3, r0
    4f64:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
    4f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4f68:	2b00      	cmp	r3, #0
    4f6a:	d03e      	beq.n	4fea <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
    4f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4f6e:	222f      	movs	r2, #47	; 0x2f
    4f70:	18ba      	adds	r2, r7, r2
    4f72:	7812      	ldrb	r2, [r2, #0]
    4f74:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
    4f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4f78:	2200      	movs	r2, #0
    4f7a:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
    4f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4f7e:	222c      	movs	r2, #44	; 0x2c
    4f80:	18ba      	adds	r2, r7, r2
    4f82:	8812      	ldrh	r2, [r2, #0]
    4f84:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    4f86:	4b27      	ldr	r3, [pc, #156]	; (5024 <vTraceStoreMemMangEvent+0x14c>)
    4f88:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
    4f8a:	68bb      	ldr	r3, [r7, #8]
    4f8c:	4a22      	ldr	r2, [pc, #136]	; (5018 <vTraceStoreMemMangEvent+0x140>)
    4f8e:	0019      	movs	r1, r3
    4f90:	0010      	movs	r0, r2
    4f92:	4b22      	ldr	r3, [pc, #136]	; (501c <vTraceStoreMemMangEvent+0x144>)
    4f94:	4798      	blx	r3
    4f96:	0002      	movs	r2, r0
    4f98:	2326      	movs	r3, #38	; 0x26
    4f9a:	18fb      	adds	r3, r7, r3
    4f9c:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
    4f9e:	2325      	movs	r3, #37	; 0x25
    4fa0:	18fb      	adds	r3, r7, r3
    4fa2:	2200      	movs	r2, #0
    4fa4:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
    4fa6:	4b1e      	ldr	r3, [pc, #120]	; (5020 <vTraceStoreMemMangEvent+0x148>)
    4fa8:	4798      	blx	r3
    4faa:	0003      	movs	r3, r0
    4fac:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
    4fae:	6a3b      	ldr	r3, [r7, #32]
    4fb0:	2b00      	cmp	r3, #0
    4fb2:	d01a      	beq.n	4fea <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
    4fb4:	6a3b      	ldr	r3, [r7, #32]
    4fb6:	2226      	movs	r2, #38	; 0x26
    4fb8:	18ba      	adds	r2, r7, r2
    4fba:	8812      	ldrh	r2, [r2, #0]
    4fbc:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
    4fbe:	6a3b      	ldr	r3, [r7, #32]
    4fc0:	2225      	movs	r2, #37	; 0x25
    4fc2:	18ba      	adds	r2, r7, r2
    4fc4:	7812      	ldrb	r2, [r2, #0]
    4fc6:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
    4fc8:	68fb      	ldr	r3, [r7, #12]
    4fca:	b2db      	uxtb	r3, r3
    4fcc:	3301      	adds	r3, #1
    4fce:	b2da      	uxtb	r2, r3
    4fd0:	6a3b      	ldr	r3, [r7, #32]
    4fd2:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
    4fd4:	68fb      	ldr	r3, [r7, #12]
    4fd6:	b2da      	uxtb	r2, r3
    4fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4fda:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
    4fdc:	4b11      	ldr	r3, [pc, #68]	; (5024 <vTraceStoreMemMangEvent+0x14c>)
    4fde:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
    4fe0:	4b09      	ldr	r3, [pc, #36]	; (5008 <vTraceStoreMemMangEvent+0x130>)
    4fe2:	681b      	ldr	r3, [r3, #0]
    4fe4:	4a0a      	ldr	r2, [pc, #40]	; (5010 <vTraceStoreMemMangEvent+0x138>)
    4fe6:	6812      	ldr	r2, [r2, #0]
    4fe8:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
    4fea:	4b08      	ldr	r3, [pc, #32]	; (500c <vTraceStoreMemMangEvent+0x134>)
    4fec:	681b      	ldr	r3, [r3, #0]
    4fee:	1e5a      	subs	r2, r3, #1
    4ff0:	4b06      	ldr	r3, [pc, #24]	; (500c <vTraceStoreMemMangEvent+0x134>)
    4ff2:	601a      	str	r2, [r3, #0]
    4ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4ff6:	617b      	str	r3, [r7, #20]
    4ff8:	697b      	ldr	r3, [r7, #20]
    4ffa:	f383 8810 	msr	PRIMASK, r3
    4ffe:	e000      	b.n	5002 <vTraceStoreMemMangEvent+0x12a>
		return;
    5000:	46c0      	nop			; (mov r8, r8)
}
    5002:	46bd      	mov	sp, r7
    5004:	b00e      	add	sp, #56	; 0x38
    5006:	bd80      	pop	{r7, pc}
    5008:	20001054 	.word	0x20001054
    500c:	20000fac 	.word	0x20000fac
    5010:	20000fc0 	.word	0x20000fc0
    5014:	000060e1 	.word	0x000060e1
    5018:	0000ffff 	.word	0x0000ffff
    501c:	000052a5 	.word	0x000052a5
    5020:	00005a85 	.word	0x00005a85
    5024:	00006089 	.word	0x00006089

00005028 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
    5028:	b590      	push	{r4, r7, lr}
    502a:	b08b      	sub	sp, #44	; 0x2c
    502c:	af00      	add	r7, sp, #0
    502e:	60f8      	str	r0, [r7, #12]
    5030:	607a      	str	r2, [r7, #4]
    5032:	230b      	movs	r3, #11
    5034:	18fb      	adds	r3, r7, r3
    5036:	1c0a      	adds	r2, r1, #0
    5038:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    503a:	68fb      	ldr	r3, [r7, #12]
    503c:	2bfe      	cmp	r3, #254	; 0xfe
    503e:	d904      	bls.n	504a <prvTraceStoreKernelCall+0x22>
    5040:	4b39      	ldr	r3, [pc, #228]	; (5128 <prvTraceStoreKernelCall+0x100>)
    5042:	0018      	movs	r0, r3
    5044:	4b39      	ldr	r3, [pc, #228]	; (512c <prvTraceStoreKernelCall+0x104>)
    5046:	4798      	blx	r3
    5048:	e06b      	b.n	5122 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    504a:	230b      	movs	r3, #11
    504c:	18fb      	adds	r3, r7, r3
    504e:	781b      	ldrb	r3, [r3, #0]
    5050:	2b08      	cmp	r3, #8
    5052:	d904      	bls.n	505e <prvTraceStoreKernelCall+0x36>
    5054:	4b36      	ldr	r3, [pc, #216]	; (5130 <prvTraceStoreKernelCall+0x108>)
    5056:	0018      	movs	r0, r3
    5058:	4b34      	ldr	r3, [pc, #208]	; (512c <prvTraceStoreKernelCall+0x104>)
    505a:	4798      	blx	r3
    505c:	e061      	b.n	5122 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    505e:	4b35      	ldr	r3, [pc, #212]	; (5134 <prvTraceStoreKernelCall+0x10c>)
    5060:	681a      	ldr	r2, [r3, #0]
    5062:	230b      	movs	r3, #11
    5064:	18fb      	adds	r3, r7, r3
    5066:	781b      	ldrb	r3, [r3, #0]
    5068:	2164      	movs	r1, #100	; 0x64
    506a:	18d3      	adds	r3, r2, r3
    506c:	185b      	adds	r3, r3, r1
    506e:	781b      	ldrb	r3, [r3, #0]
    5070:	001a      	movs	r2, r3
    5072:	687b      	ldr	r3, [r7, #4]
    5074:	429a      	cmp	r2, r3
    5076:	d204      	bcs.n	5082 <prvTraceStoreKernelCall+0x5a>
    5078:	4b2f      	ldr	r3, [pc, #188]	; (5138 <prvTraceStoreKernelCall+0x110>)
    507a:	0018      	movs	r0, r3
    507c:	4b2b      	ldr	r3, [pc, #172]	; (512c <prvTraceStoreKernelCall+0x104>)
    507e:	4798      	blx	r3
    5080:	e04f      	b.n	5122 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
    5082:	4b2e      	ldr	r3, [pc, #184]	; (513c <prvTraceStoreKernelCall+0x114>)
    5084:	681b      	ldr	r3, [r3, #0]
    5086:	2b00      	cmp	r3, #0
    5088:	d004      	beq.n	5094 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
    508a:	4b2d      	ldr	r3, [pc, #180]	; (5140 <prvTraceStoreKernelCall+0x118>)
    508c:	0018      	movs	r0, r3
    508e:	4b27      	ldr	r3, [pc, #156]	; (512c <prvTraceStoreKernelCall+0x104>)
    5090:	4798      	blx	r3
		return;
    5092:	e046      	b.n	5122 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
    5094:	4b2b      	ldr	r3, [pc, #172]	; (5144 <prvTraceStoreKernelCall+0x11c>)
    5096:	781b      	ldrb	r3, [r3, #0]
    5098:	2b00      	cmp	r3, #0
    509a:	d041      	beq.n	5120 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    509c:	f3ef 8310 	mrs	r3, PRIMASK
    50a0:	617b      	str	r3, [r7, #20]
  return(result);
    50a2:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
    50a4:	627b      	str	r3, [r7, #36]	; 0x24
    50a6:	2301      	movs	r3, #1
    50a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    50aa:	69bb      	ldr	r3, [r7, #24]
    50ac:	f383 8810 	msr	PRIMASK, r3
    50b0:	4b22      	ldr	r3, [pc, #136]	; (513c <prvTraceStoreKernelCall+0x114>)
    50b2:	681b      	ldr	r3, [r3, #0]
    50b4:	1c5a      	adds	r2, r3, #1
    50b6:	4b21      	ldr	r3, [pc, #132]	; (513c <prvTraceStoreKernelCall+0x114>)
    50b8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    50ba:	4b1e      	ldr	r3, [pc, #120]	; (5134 <prvTraceStoreKernelCall+0x10c>)
    50bc:	681b      	ldr	r3, [r3, #0]
    50be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    50c0:	2b00      	cmp	r3, #0
    50c2:	d022      	beq.n	510a <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    50c4:	2322      	movs	r3, #34	; 0x22
    50c6:	18fc      	adds	r4, r7, r3
    50c8:	4b1f      	ldr	r3, [pc, #124]	; (5148 <prvTraceStoreKernelCall+0x120>)
    50ca:	0018      	movs	r0, r3
    50cc:	4b1f      	ldr	r3, [pc, #124]	; (514c <prvTraceStoreKernelCall+0x124>)
    50ce:	4798      	blx	r3
    50d0:	0003      	movs	r3, r0
    50d2:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
    50d4:	2321      	movs	r3, #33	; 0x21
    50d6:	18fb      	adds	r3, r7, r3
    50d8:	687a      	ldr	r2, [r7, #4]
    50da:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
    50dc:	4b1c      	ldr	r3, [pc, #112]	; (5150 <prvTraceStoreKernelCall+0x128>)
    50de:	4798      	blx	r3
    50e0:	0003      	movs	r3, r0
    50e2:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
    50e4:	69fb      	ldr	r3, [r7, #28]
    50e6:	2b00      	cmp	r3, #0
    50e8:	d00f      	beq.n	510a <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
    50ea:	69fb      	ldr	r3, [r7, #28]
    50ec:	2222      	movs	r2, #34	; 0x22
    50ee:	18ba      	adds	r2, r7, r2
    50f0:	8812      	ldrh	r2, [r2, #0]
    50f2:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
    50f4:	68fb      	ldr	r3, [r7, #12]
    50f6:	b2da      	uxtb	r2, r3
    50f8:	69fb      	ldr	r3, [r7, #28]
    50fa:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
    50fc:	69fb      	ldr	r3, [r7, #28]
    50fe:	2221      	movs	r2, #33	; 0x21
    5100:	18ba      	adds	r2, r7, r2
    5102:	7812      	ldrb	r2, [r2, #0]
    5104:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
    5106:	4b13      	ldr	r3, [pc, #76]	; (5154 <prvTraceStoreKernelCall+0x12c>)
    5108:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    510a:	4b0c      	ldr	r3, [pc, #48]	; (513c <prvTraceStoreKernelCall+0x114>)
    510c:	681b      	ldr	r3, [r3, #0]
    510e:	1e5a      	subs	r2, r3, #1
    5110:	4b0a      	ldr	r3, [pc, #40]	; (513c <prvTraceStoreKernelCall+0x114>)
    5112:	601a      	str	r2, [r3, #0]
    5114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5116:	613b      	str	r3, [r7, #16]
    5118:	693b      	ldr	r3, [r7, #16]
    511a:	f383 8810 	msr	PRIMASK, r3
    511e:	e000      	b.n	5122 <prvTraceStoreKernelCall+0xfa>
		return;
    5120:	46c0      	nop			; (mov r8, r8)
}
    5122:	46bd      	mov	sp, r7
    5124:	b00b      	add	sp, #44	; 0x2c
    5126:	bd90      	pop	{r4, r7, pc}
    5128:	000245e8 	.word	0x000245e8
    512c:	00005ecd 	.word	0x00005ecd
    5130:	00024620 	.word	0x00024620
    5134:	20001054 	.word	0x20001054
    5138:	00024668 	.word	0x00024668
    513c:	20000fac 	.word	0x20000fac
    5140:	000246b0 	.word	0x000246b0
    5144:	20000fb8 	.word	0x20000fb8
    5148:	0000ffff 	.word	0x0000ffff
    514c:	000060e1 	.word	0x000060e1
    5150:	00005a85 	.word	0x00005a85
    5154:	00006089 	.word	0x00006089

00005158 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
    5158:	b580      	push	{r7, lr}
    515a:	b08a      	sub	sp, #40	; 0x28
    515c:	af00      	add	r7, sp, #0
    515e:	60f8      	str	r0, [r7, #12]
    5160:	607a      	str	r2, [r7, #4]
    5162:	603b      	str	r3, [r7, #0]
    5164:	230b      	movs	r3, #11
    5166:	18fb      	adds	r3, r7, r3
    5168:	1c0a      	adds	r2, r1, #0
    516a:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    516c:	68fb      	ldr	r3, [r7, #12]
    516e:	2bfe      	cmp	r3, #254	; 0xfe
    5170:	d904      	bls.n	517c <prvTraceStoreKernelCallWithParam+0x24>
    5172:	4b40      	ldr	r3, [pc, #256]	; (5274 <prvTraceStoreKernelCallWithParam+0x11c>)
    5174:	0018      	movs	r0, r3
    5176:	4b40      	ldr	r3, [pc, #256]	; (5278 <prvTraceStoreKernelCallWithParam+0x120>)
    5178:	4798      	blx	r3
    517a:	e077      	b.n	526c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    517c:	230b      	movs	r3, #11
    517e:	18fb      	adds	r3, r7, r3
    5180:	781b      	ldrb	r3, [r3, #0]
    5182:	2b08      	cmp	r3, #8
    5184:	d904      	bls.n	5190 <prvTraceStoreKernelCallWithParam+0x38>
    5186:	4b3d      	ldr	r3, [pc, #244]	; (527c <prvTraceStoreKernelCallWithParam+0x124>)
    5188:	0018      	movs	r0, r3
    518a:	4b3b      	ldr	r3, [pc, #236]	; (5278 <prvTraceStoreKernelCallWithParam+0x120>)
    518c:	4798      	blx	r3
    518e:	e06d      	b.n	526c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    5190:	4b3b      	ldr	r3, [pc, #236]	; (5280 <prvTraceStoreKernelCallWithParam+0x128>)
    5192:	681a      	ldr	r2, [r3, #0]
    5194:	230b      	movs	r3, #11
    5196:	18fb      	adds	r3, r7, r3
    5198:	781b      	ldrb	r3, [r3, #0]
    519a:	2164      	movs	r1, #100	; 0x64
    519c:	18d3      	adds	r3, r2, r3
    519e:	185b      	adds	r3, r3, r1
    51a0:	781b      	ldrb	r3, [r3, #0]
    51a2:	001a      	movs	r2, r3
    51a4:	687b      	ldr	r3, [r7, #4]
    51a6:	429a      	cmp	r2, r3
    51a8:	d204      	bcs.n	51b4 <prvTraceStoreKernelCallWithParam+0x5c>
    51aa:	4b36      	ldr	r3, [pc, #216]	; (5284 <prvTraceStoreKernelCallWithParam+0x12c>)
    51ac:	0018      	movs	r0, r3
    51ae:	4b32      	ldr	r3, [pc, #200]	; (5278 <prvTraceStoreKernelCallWithParam+0x120>)
    51b0:	4798      	blx	r3
    51b2:	e05b      	b.n	526c <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
    51b4:	4b34      	ldr	r3, [pc, #208]	; (5288 <prvTraceStoreKernelCallWithParam+0x130>)
    51b6:	681b      	ldr	r3, [r3, #0]
    51b8:	2b00      	cmp	r3, #0
    51ba:	d004      	beq.n	51c6 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
    51bc:	4b33      	ldr	r3, [pc, #204]	; (528c <prvTraceStoreKernelCallWithParam+0x134>)
    51be:	0018      	movs	r0, r3
    51c0:	4b2d      	ldr	r3, [pc, #180]	; (5278 <prvTraceStoreKernelCallWithParam+0x120>)
    51c2:	4798      	blx	r3
		return;
    51c4:	e052      	b.n	526c <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    51c6:	f3ef 8310 	mrs	r3, PRIMASK
    51ca:	617b      	str	r3, [r7, #20]
  return(result);
    51cc:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
    51ce:	627b      	str	r3, [r7, #36]	; 0x24
    51d0:	2301      	movs	r3, #1
    51d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    51d4:	69bb      	ldr	r3, [r7, #24]
    51d6:	f383 8810 	msr	PRIMASK, r3
    51da:	4b2b      	ldr	r3, [pc, #172]	; (5288 <prvTraceStoreKernelCallWithParam+0x130>)
    51dc:	681b      	ldr	r3, [r3, #0]
    51de:	1c5a      	adds	r2, r3, #1
    51e0:	4b29      	ldr	r3, [pc, #164]	; (5288 <prvTraceStoreKernelCallWithParam+0x130>)
    51e2:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    51e4:	4b26      	ldr	r3, [pc, #152]	; (5280 <prvTraceStoreKernelCallWithParam+0x128>)
    51e6:	681b      	ldr	r3, [r3, #0]
    51e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    51ea:	2b00      	cmp	r3, #0
    51ec:	d034      	beq.n	5258 <prvTraceStoreKernelCallWithParam+0x100>
    51ee:	4b28      	ldr	r3, [pc, #160]	; (5290 <prvTraceStoreKernelCallWithParam+0x138>)
    51f0:	781b      	ldrb	r3, [r3, #0]
    51f2:	2b00      	cmp	r3, #0
    51f4:	d030      	beq.n	5258 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    51f6:	20ff      	movs	r0, #255	; 0xff
    51f8:	4b26      	ldr	r3, [pc, #152]	; (5294 <prvTraceStoreKernelCallWithParam+0x13c>)
    51fa:	4798      	blx	r3
    51fc:	0003      	movs	r3, r0
    51fe:	001a      	movs	r2, r3
    5200:	2323      	movs	r3, #35	; 0x23
    5202:	18fb      	adds	r3, r7, r3
    5204:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
    5206:	683b      	ldr	r3, [r7, #0]
    5208:	0019      	movs	r1, r3
    520a:	20ff      	movs	r0, #255	; 0xff
    520c:	4b22      	ldr	r3, [pc, #136]	; (5298 <prvTraceStoreKernelCallWithParam+0x140>)
    520e:	4798      	blx	r3
    5210:	0002      	movs	r2, r0
    5212:	2322      	movs	r3, #34	; 0x22
    5214:	18fb      	adds	r3, r7, r3
    5216:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
    5218:	2321      	movs	r3, #33	; 0x21
    521a:	18fb      	adds	r3, r7, r3
    521c:	687a      	ldr	r2, [r7, #4]
    521e:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
    5220:	4b1e      	ldr	r3, [pc, #120]	; (529c <prvTraceStoreKernelCallWithParam+0x144>)
    5222:	4798      	blx	r3
    5224:	0003      	movs	r3, r0
    5226:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
    5228:	69fb      	ldr	r3, [r7, #28]
    522a:	2b00      	cmp	r3, #0
    522c:	d014      	beq.n	5258 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
    522e:	69fb      	ldr	r3, [r7, #28]
    5230:	2223      	movs	r2, #35	; 0x23
    5232:	18ba      	adds	r2, r7, r2
    5234:	7812      	ldrb	r2, [r2, #0]
    5236:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
    5238:	68fb      	ldr	r3, [r7, #12]
    523a:	b2da      	uxtb	r2, r3
    523c:	69fb      	ldr	r3, [r7, #28]
    523e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
    5240:	69fb      	ldr	r3, [r7, #28]
    5242:	2221      	movs	r2, #33	; 0x21
    5244:	18ba      	adds	r2, r7, r2
    5246:	7812      	ldrb	r2, [r2, #0]
    5248:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
    524a:	69fb      	ldr	r3, [r7, #28]
    524c:	2222      	movs	r2, #34	; 0x22
    524e:	18ba      	adds	r2, r7, r2
    5250:	7812      	ldrb	r2, [r2, #0]
    5252:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
    5254:	4b12      	ldr	r3, [pc, #72]	; (52a0 <prvTraceStoreKernelCallWithParam+0x148>)
    5256:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    5258:	4b0b      	ldr	r3, [pc, #44]	; (5288 <prvTraceStoreKernelCallWithParam+0x130>)
    525a:	681b      	ldr	r3, [r3, #0]
    525c:	1e5a      	subs	r2, r3, #1
    525e:	4b0a      	ldr	r3, [pc, #40]	; (5288 <prvTraceStoreKernelCallWithParam+0x130>)
    5260:	601a      	str	r2, [r3, #0]
    5262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5264:	613b      	str	r3, [r7, #16]
    5266:	693b      	ldr	r3, [r7, #16]
    5268:	f383 8810 	msr	PRIMASK, r3
}
    526c:	46bd      	mov	sp, r7
    526e:	b00a      	add	sp, #40	; 0x28
    5270:	bd80      	pop	{r7, pc}
    5272:	46c0      	nop			; (mov r8, r8)
    5274:	000246e8 	.word	0x000246e8
    5278:	00005ecd 	.word	0x00005ecd
    527c:	00024728 	.word	0x00024728
    5280:	20001054 	.word	0x20001054
    5284:	00024778 	.word	0x00024778
    5288:	20000fac 	.word	0x20000fac
    528c:	000247c8 	.word	0x000247c8
    5290:	20000fb8 	.word	0x20000fb8
    5294:	000060e1 	.word	0x000060e1
    5298:	000052a5 	.word	0x000052a5
    529c:	00005a85 	.word	0x00005a85
    52a0:	00006089 	.word	0x00006089

000052a4 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
    52a4:	b580      	push	{r7, lr}
    52a6:	b084      	sub	sp, #16
    52a8:	af00      	add	r7, sp, #0
    52aa:	6078      	str	r0, [r7, #4]
    52ac:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    52ae:	687b      	ldr	r3, [r7, #4]
    52b0:	2bff      	cmp	r3, #255	; 0xff
    52b2:	d009      	beq.n	52c8 <prvTraceGetParam+0x24>
    52b4:	687b      	ldr	r3, [r7, #4]
    52b6:	4a19      	ldr	r2, [pc, #100]	; (531c <prvTraceGetParam+0x78>)
    52b8:	4293      	cmp	r3, r2
    52ba:	d005      	beq.n	52c8 <prvTraceGetParam+0x24>
    52bc:	4b18      	ldr	r3, [pc, #96]	; (5320 <prvTraceGetParam+0x7c>)
    52be:	0018      	movs	r0, r3
    52c0:	4b18      	ldr	r3, [pc, #96]	; (5324 <prvTraceGetParam+0x80>)
    52c2:	4798      	blx	r3
    52c4:	683b      	ldr	r3, [r7, #0]
    52c6:	e024      	b.n	5312 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
    52c8:	683a      	ldr	r2, [r7, #0]
    52ca:	687b      	ldr	r3, [r7, #4]
    52cc:	429a      	cmp	r2, r3
    52ce:	d801      	bhi.n	52d4 <prvTraceGetParam+0x30>
	{
		return param;
    52d0:	683b      	ldr	r3, [r7, #0]
    52d2:	e01e      	b.n	5312 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
    52d4:	4b14      	ldr	r3, [pc, #80]	; (5328 <prvTraceGetParam+0x84>)
    52d6:	4798      	blx	r3
    52d8:	0003      	movs	r3, r0
    52da:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
    52dc:	68fb      	ldr	r3, [r7, #12]
    52de:	2b00      	cmp	r3, #0
    52e0:	d014      	beq.n	530c <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
    52e2:	68fb      	ldr	r3, [r7, #12]
    52e4:	2201      	movs	r2, #1
    52e6:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
    52e8:	687b      	ldr	r3, [r7, #4]
    52ea:	43db      	mvns	r3, r3
    52ec:	683a      	ldr	r2, [r7, #0]
    52ee:	4013      	ands	r3, r2
    52f0:	0a1b      	lsrs	r3, r3, #8
    52f2:	b2da      	uxtb	r2, r3
    52f4:	68fb      	ldr	r3, [r7, #12]
    52f6:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
    52f8:	687b      	ldr	r3, [r7, #4]
    52fa:	43db      	mvns	r3, r3
    52fc:	683a      	ldr	r2, [r7, #0]
    52fe:	4013      	ands	r3, r2
    5300:	0c1b      	lsrs	r3, r3, #16
    5302:	b29a      	uxth	r2, r3
    5304:	68fb      	ldr	r3, [r7, #12]
    5306:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    5308:	4b08      	ldr	r3, [pc, #32]	; (532c <prvTraceGetParam+0x88>)
    530a:	4798      	blx	r3
		}

		return param & param_max;
    530c:	683b      	ldr	r3, [r7, #0]
    530e:	687a      	ldr	r2, [r7, #4]
    5310:	4013      	ands	r3, r2
	}
}
    5312:	0018      	movs	r0, r3
    5314:	46bd      	mov	sp, r7
    5316:	b004      	add	sp, #16
    5318:	bd80      	pop	{r7, pc}
    531a:	46c0      	nop			; (mov r8, r8)
    531c:	0000ffff 	.word	0x0000ffff
    5320:	00024800 	.word	0x00024800
    5324:	00005ecd 	.word	0x00005ecd
    5328:	00005a85 	.word	0x00005a85
    532c:	00006089 	.word	0x00006089

00005330 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
    5330:	b580      	push	{r7, lr}
    5332:	b08a      	sub	sp, #40	; 0x28
    5334:	af00      	add	r7, sp, #0
    5336:	6078      	str	r0, [r7, #4]
    5338:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
    533a:	2326      	movs	r3, #38	; 0x26
    533c:	18fb      	adds	r3, r7, r3
    533e:	2200      	movs	r2, #0
    5340:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    5342:	687b      	ldr	r3, [r7, #4]
    5344:	2bfe      	cmp	r3, #254	; 0xfe
    5346:	d904      	bls.n	5352 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
    5348:	4b2d      	ldr	r3, [pc, #180]	; (5400 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
    534a:	0018      	movs	r0, r3
    534c:	4b2d      	ldr	r3, [pc, #180]	; (5404 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
    534e:	4798      	blx	r3
    5350:	e053      	b.n	53fa <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
    5352:	4b2d      	ldr	r3, [pc, #180]	; (5408 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    5354:	681b      	ldr	r3, [r3, #0]
    5356:	2b00      	cmp	r3, #0
    5358:	d004      	beq.n	5364 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
    535a:	4b2c      	ldr	r3, [pc, #176]	; (540c <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
    535c:	0018      	movs	r0, r3
    535e:	4b29      	ldr	r3, [pc, #164]	; (5404 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
    5360:	4798      	blx	r3
		return;
    5362:	e04a      	b.n	53fa <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5364:	f3ef 8310 	mrs	r3, PRIMASK
    5368:	613b      	str	r3, [r7, #16]
  return(result);
    536a:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
    536c:	623b      	str	r3, [r7, #32]
    536e:	2301      	movs	r3, #1
    5370:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5372:	697b      	ldr	r3, [r7, #20]
    5374:	f383 8810 	msr	PRIMASK, r3
    5378:	4b23      	ldr	r3, [pc, #140]	; (5408 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    537a:	681b      	ldr	r3, [r3, #0]
    537c:	1c5a      	adds	r2, r3, #1
    537e:	4b22      	ldr	r3, [pc, #136]	; (5408 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    5380:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    5382:	4b23      	ldr	r3, [pc, #140]	; (5410 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
    5384:	681b      	ldr	r3, [r3, #0]
    5386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5388:	2b00      	cmp	r3, #0
    538a:	d02c      	beq.n	53e6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
    538c:	4b21      	ldr	r3, [pc, #132]	; (5414 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
    538e:	781b      	ldrb	r3, [r3, #0]
    5390:	2b00      	cmp	r3, #0
    5392:	d028      	beq.n	53e6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    5394:	20ff      	movs	r0, #255	; 0xff
    5396:	4b20      	ldr	r3, [pc, #128]	; (5418 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
    5398:	4798      	blx	r3
    539a:	0003      	movs	r3, r0
    539c:	001a      	movs	r2, r3
    539e:	231f      	movs	r3, #31
    53a0:	18fb      	adds	r3, r7, r3
    53a2:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
    53a4:	683b      	ldr	r3, [r7, #0]
    53a6:	4a1d      	ldr	r2, [pc, #116]	; (541c <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
    53a8:	0019      	movs	r1, r3
    53aa:	0010      	movs	r0, r2
    53ac:	4b1c      	ldr	r3, [pc, #112]	; (5420 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
    53ae:	4798      	blx	r3
    53b0:	0002      	movs	r2, r0
    53b2:	2326      	movs	r3, #38	; 0x26
    53b4:	18fb      	adds	r3, r7, r3
    53b6:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
    53b8:	4b1a      	ldr	r3, [pc, #104]	; (5424 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
    53ba:	4798      	blx	r3
    53bc:	0003      	movs	r3, r0
    53be:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
    53c0:	69bb      	ldr	r3, [r7, #24]
    53c2:	2b00      	cmp	r3, #0
    53c4:	d00f      	beq.n	53e6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
    53c6:	69bb      	ldr	r3, [r7, #24]
    53c8:	221f      	movs	r2, #31
    53ca:	18ba      	adds	r2, r7, r2
    53cc:	7812      	ldrb	r2, [r2, #0]
    53ce:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
    53d0:	687b      	ldr	r3, [r7, #4]
    53d2:	b2da      	uxtb	r2, r3
    53d4:	69bb      	ldr	r3, [r7, #24]
    53d6:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
    53d8:	69bb      	ldr	r3, [r7, #24]
    53da:	2226      	movs	r2, #38	; 0x26
    53dc:	18ba      	adds	r2, r7, r2
    53de:	8812      	ldrh	r2, [r2, #0]
    53e0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    53e2:	4b11      	ldr	r3, [pc, #68]	; (5428 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
    53e4:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    53e6:	4b08      	ldr	r3, [pc, #32]	; (5408 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    53e8:	681b      	ldr	r3, [r3, #0]
    53ea:	1e5a      	subs	r2, r3, #1
    53ec:	4b06      	ldr	r3, [pc, #24]	; (5408 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    53ee:	601a      	str	r2, [r3, #0]
    53f0:	6a3b      	ldr	r3, [r7, #32]
    53f2:	60fb      	str	r3, [r7, #12]
    53f4:	68fb      	ldr	r3, [r7, #12]
    53f6:	f383 8810 	msr	PRIMASK, r3
}
    53fa:	46bd      	mov	sp, r7
    53fc:	b00a      	add	sp, #40	; 0x28
    53fe:	bd80      	pop	{r7, pc}
    5400:	0002483c 	.word	0x0002483c
    5404:	00005ecd 	.word	0x00005ecd
    5408:	20000fac 	.word	0x20000fac
    540c:	00024894 	.word	0x00024894
    5410:	20001054 	.word	0x20001054
    5414:	20000fb8 	.word	0x20000fb8
    5418:	000060e1 	.word	0x000060e1
    541c:	0000ffff 	.word	0x0000ffff
    5420:	000052a5 	.word	0x000052a5
    5424:	00005a85 	.word	0x00005a85
    5428:	00006089 	.word	0x00006089

0000542c <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
    542c:	b590      	push	{r4, r7, lr}
    542e:	b089      	sub	sp, #36	; 0x24
    5430:	af00      	add	r7, sp, #0
    5432:	0002      	movs	r2, r0
    5434:	1dfb      	adds	r3, r7, #7
    5436:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    5438:	1dfb      	adds	r3, r7, #7
    543a:	781b      	ldrb	r3, [r3, #0]
    543c:	2b0f      	cmp	r3, #15
    543e:	d904      	bls.n	544a <prvTraceStoreTaskswitch+0x1e>
    5440:	4b34      	ldr	r3, [pc, #208]	; (5514 <prvTraceStoreTaskswitch+0xe8>)
    5442:	0018      	movs	r0, r3
    5444:	4b34      	ldr	r3, [pc, #208]	; (5518 <prvTraceStoreTaskswitch+0xec>)
    5446:	4798      	blx	r3
    5448:	e061      	b.n	550e <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    544a:	f3ef 8310 	mrs	r3, PRIMASK
    544e:	60fb      	str	r3, [r7, #12]
  return(result);
    5450:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    5452:	61fb      	str	r3, [r7, #28]
    5454:	2301      	movs	r3, #1
    5456:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5458:	693b      	ldr	r3, [r7, #16]
    545a:	f383 8810 	msr	PRIMASK, r3
    545e:	4b2f      	ldr	r3, [pc, #188]	; (551c <prvTraceStoreTaskswitch+0xf0>)
    5460:	681b      	ldr	r3, [r3, #0]
    5462:	1c5a      	adds	r2, r3, #1
    5464:	4b2d      	ldr	r3, [pc, #180]	; (551c <prvTraceStoreTaskswitch+0xf0>)
    5466:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
    5468:	4b2d      	ldr	r3, [pc, #180]	; (5520 <prvTraceStoreTaskswitch+0xf4>)
    546a:	781b      	ldrb	r3, [r3, #0]
    546c:	1dfa      	adds	r2, r7, #7
    546e:	7812      	ldrb	r2, [r2, #0]
    5470:	429a      	cmp	r2, r3
    5472:	d042      	beq.n	54fa <prvTraceStoreTaskswitch+0xce>
    5474:	4b2b      	ldr	r3, [pc, #172]	; (5524 <prvTraceStoreTaskswitch+0xf8>)
    5476:	681b      	ldr	r3, [r3, #0]
    5478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    547a:	2b00      	cmp	r3, #0
    547c:	d03d      	beq.n	54fa <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
    547e:	4b2a      	ldr	r3, [pc, #168]	; (5528 <prvTraceStoreTaskswitch+0xfc>)
    5480:	2200      	movs	r2, #0
    5482:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    5484:	231a      	movs	r3, #26
    5486:	18fc      	adds	r4, r7, r3
    5488:	4b28      	ldr	r3, [pc, #160]	; (552c <prvTraceStoreTaskswitch+0x100>)
    548a:	0018      	movs	r0, r3
    548c:	4b28      	ldr	r3, [pc, #160]	; (5530 <prvTraceStoreTaskswitch+0x104>)
    548e:	4798      	blx	r3
    5490:	0003      	movs	r3, r0
    5492:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
    5494:	4b22      	ldr	r3, [pc, #136]	; (5520 <prvTraceStoreTaskswitch+0xf4>)
    5496:	1dfa      	adds	r2, r7, #7
    5498:	7812      	ldrb	r2, [r2, #0]
    549a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
    549c:	2319      	movs	r3, #25
    549e:	18fb      	adds	r3, r7, r3
    54a0:	4a1f      	ldr	r2, [pc, #124]	; (5520 <prvTraceStoreTaskswitch+0xf4>)
    54a2:	7812      	ldrb	r2, [r2, #0]
    54a4:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
    54a6:	4b23      	ldr	r3, [pc, #140]	; (5534 <prvTraceStoreTaskswitch+0x108>)
    54a8:	4798      	blx	r3
    54aa:	0003      	movs	r3, r0
    54ac:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
    54ae:	697b      	ldr	r3, [r7, #20]
    54b0:	2b00      	cmp	r3, #0
    54b2:	d022      	beq.n	54fa <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    54b4:	4b1a      	ldr	r3, [pc, #104]	; (5520 <prvTraceStoreTaskswitch+0xf4>)
    54b6:	781b      	ldrb	r3, [r3, #0]
    54b8:	0019      	movs	r1, r3
    54ba:	2003      	movs	r0, #3
    54bc:	4b1e      	ldr	r3, [pc, #120]	; (5538 <prvTraceStoreTaskswitch+0x10c>)
    54be:	4798      	blx	r3
    54c0:	0003      	movs	r3, r0
    54c2:	2b01      	cmp	r3, #1
    54c4:	d103      	bne.n	54ce <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
    54c6:	697b      	ldr	r3, [r7, #20]
    54c8:	2207      	movs	r2, #7
    54ca:	701a      	strb	r2, [r3, #0]
    54cc:	e002      	b.n	54d4 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
    54ce:	697b      	ldr	r3, [r7, #20]
    54d0:	2206      	movs	r2, #6
    54d2:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
    54d4:	697b      	ldr	r3, [r7, #20]
    54d6:	221a      	movs	r2, #26
    54d8:	18ba      	adds	r2, r7, r2
    54da:	8812      	ldrh	r2, [r2, #0]
    54dc:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
    54de:	697b      	ldr	r3, [r7, #20]
    54e0:	2219      	movs	r2, #25
    54e2:	18ba      	adds	r2, r7, r2
    54e4:	7812      	ldrb	r2, [r2, #0]
    54e6:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
    54e8:	4b0d      	ldr	r3, [pc, #52]	; (5520 <prvTraceStoreTaskswitch+0xf4>)
    54ea:	781b      	ldrb	r3, [r3, #0]
    54ec:	2201      	movs	r2, #1
    54ee:	0019      	movs	r1, r3
    54f0:	2003      	movs	r0, #3
    54f2:	4b12      	ldr	r3, [pc, #72]	; (553c <prvTraceStoreTaskswitch+0x110>)
    54f4:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
    54f6:	4b12      	ldr	r3, [pc, #72]	; (5540 <prvTraceStoreTaskswitch+0x114>)
    54f8:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    54fa:	4b08      	ldr	r3, [pc, #32]	; (551c <prvTraceStoreTaskswitch+0xf0>)
    54fc:	681b      	ldr	r3, [r3, #0]
    54fe:	1e5a      	subs	r2, r3, #1
    5500:	4b06      	ldr	r3, [pc, #24]	; (551c <prvTraceStoreTaskswitch+0xf0>)
    5502:	601a      	str	r2, [r3, #0]
    5504:	69fb      	ldr	r3, [r7, #28]
    5506:	60bb      	str	r3, [r7, #8]
    5508:	68bb      	ldr	r3, [r7, #8]
    550a:	f383 8810 	msr	PRIMASK, r3
}
    550e:	46bd      	mov	sp, r7
    5510:	b009      	add	sp, #36	; 0x24
    5512:	bd90      	pop	{r4, r7, pc}
    5514:	000248cc 	.word	0x000248cc
    5518:	00005ecd 	.word	0x00005ecd
    551c:	20000fac 	.word	0x20000fac
    5520:	20000fb8 	.word	0x20000fb8
    5524:	20001054 	.word	0x20001054
    5528:	20000f98 	.word	0x20000f98
    552c:	0000ffff 	.word	0x0000ffff
    5530:	000060e1 	.word	0x000060e1
    5534:	00005a85 	.word	0x00005a85
    5538:	00005729 	.word	0x00005729
    553c:	00005685 	.word	0x00005685
    5540:	00006089 	.word	0x00006089

00005544 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
    5544:	b590      	push	{r4, r7, lr}
    5546:	b083      	sub	sp, #12
    5548:	af00      	add	r7, sp, #0
    554a:	0004      	movs	r4, r0
    554c:	0008      	movs	r0, r1
    554e:	0011      	movs	r1, r2
    5550:	1dfb      	adds	r3, r7, #7
    5552:	1c22      	adds	r2, r4, #0
    5554:	701a      	strb	r2, [r3, #0]
    5556:	1dbb      	adds	r3, r7, #6
    5558:	1c02      	adds	r2, r0, #0
    555a:	701a      	strb	r2, [r3, #0]
    555c:	1d7b      	adds	r3, r7, #5
    555e:	1c0a      	adds	r2, r1, #0
    5560:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    5562:	1dfb      	adds	r3, r7, #7
    5564:	781b      	ldrb	r3, [r3, #0]
    5566:	2b08      	cmp	r3, #8
    5568:	d904      	bls.n	5574 <prvTraceSetPriorityProperty+0x30>
    556a:	4b1a      	ldr	r3, [pc, #104]	; (55d4 <prvTraceSetPriorityProperty+0x90>)
    556c:	0018      	movs	r0, r3
    556e:	4b1a      	ldr	r3, [pc, #104]	; (55d8 <prvTraceSetPriorityProperty+0x94>)
    5570:	4798      	blx	r3
    5572:	e02c      	b.n	55ce <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    5574:	4b19      	ldr	r3, [pc, #100]	; (55dc <prvTraceSetPriorityProperty+0x98>)
    5576:	681a      	ldr	r2, [r3, #0]
    5578:	1dfb      	adds	r3, r7, #7
    557a:	781b      	ldrb	r3, [r3, #0]
    557c:	2164      	movs	r1, #100	; 0x64
    557e:	18d3      	adds	r3, r2, r3
    5580:	185b      	adds	r3, r3, r1
    5582:	781b      	ldrb	r3, [r3, #0]
    5584:	1dba      	adds	r2, r7, #6
    5586:	7812      	ldrb	r2, [r2, #0]
    5588:	429a      	cmp	r2, r3
    558a:	d904      	bls.n	5596 <prvTraceSetPriorityProperty+0x52>
    558c:	4b14      	ldr	r3, [pc, #80]	; (55e0 <prvTraceSetPriorityProperty+0x9c>)
    558e:	0018      	movs	r0, r3
    5590:	4b11      	ldr	r3, [pc, #68]	; (55d8 <prvTraceSetPriorityProperty+0x94>)
    5592:	4798      	blx	r3
    5594:	e01b      	b.n	55ce <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    5596:	4b11      	ldr	r3, [pc, #68]	; (55dc <prvTraceSetPriorityProperty+0x98>)
    5598:	681c      	ldr	r4, [r3, #0]
    559a:	1dfb      	adds	r3, r7, #7
    559c:	781a      	ldrb	r2, [r3, #0]
    559e:	1dbb      	adds	r3, r7, #6
    55a0:	781b      	ldrb	r3, [r3, #0]
    55a2:	0011      	movs	r1, r2
    55a4:	0018      	movs	r0, r3
    55a6:	4b0f      	ldr	r3, [pc, #60]	; (55e4 <prvTraceSetPriorityProperty+0xa0>)
    55a8:	4798      	blx	r3
    55aa:	0003      	movs	r3, r0
    55ac:	0018      	movs	r0, r3
    55ae:	4b0b      	ldr	r3, [pc, #44]	; (55dc <prvTraceSetPriorityProperty+0x98>)
    55b0:	681a      	ldr	r2, [r3, #0]
    55b2:	1dfb      	adds	r3, r7, #7
    55b4:	781b      	ldrb	r3, [r3, #0]
    55b6:	2170      	movs	r1, #112	; 0x70
    55b8:	18d3      	adds	r3, r2, r3
    55ba:	185b      	adds	r3, r3, r1
    55bc:	781b      	ldrb	r3, [r3, #0]
    55be:	18c3      	adds	r3, r0, r3
    55c0:	3301      	adds	r3, #1
    55c2:	229c      	movs	r2, #156	; 0x9c
    55c4:	18e3      	adds	r3, r4, r3
    55c6:	189b      	adds	r3, r3, r2
    55c8:	1d7a      	adds	r2, r7, #5
    55ca:	7812      	ldrb	r2, [r2, #0]
    55cc:	701a      	strb	r2, [r3, #0]
}
    55ce:	46bd      	mov	sp, r7
    55d0:	b003      	add	sp, #12
    55d2:	bd90      	pop	{r4, r7, pc}
    55d4:	00024a60 	.word	0x00024a60
    55d8:	00005ecd 	.word	0x00005ecd
    55dc:	20001054 	.word	0x20001054
    55e0:	00024aac 	.word	0x00024aac
    55e4:	00005ad9 	.word	0x00005ad9

000055e8 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
    55e8:	b590      	push	{r4, r7, lr}
    55ea:	b083      	sub	sp, #12
    55ec:	af00      	add	r7, sp, #0
    55ee:	0002      	movs	r2, r0
    55f0:	1dfb      	adds	r3, r7, #7
    55f2:	701a      	strb	r2, [r3, #0]
    55f4:	1dbb      	adds	r3, r7, #6
    55f6:	1c0a      	adds	r2, r1, #0
    55f8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    55fa:	1dfb      	adds	r3, r7, #7
    55fc:	781b      	ldrb	r3, [r3, #0]
    55fe:	2b08      	cmp	r3, #8
    5600:	d905      	bls.n	560e <prvTraceGetPriorityProperty+0x26>
    5602:	4b1b      	ldr	r3, [pc, #108]	; (5670 <prvTraceGetPriorityProperty+0x88>)
    5604:	0018      	movs	r0, r3
    5606:	4b1b      	ldr	r3, [pc, #108]	; (5674 <prvTraceGetPriorityProperty+0x8c>)
    5608:	4798      	blx	r3
    560a:	2300      	movs	r3, #0
    560c:	e02b      	b.n	5666 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    560e:	4b1a      	ldr	r3, [pc, #104]	; (5678 <prvTraceGetPriorityProperty+0x90>)
    5610:	681a      	ldr	r2, [r3, #0]
    5612:	1dfb      	adds	r3, r7, #7
    5614:	781b      	ldrb	r3, [r3, #0]
    5616:	2164      	movs	r1, #100	; 0x64
    5618:	18d3      	adds	r3, r2, r3
    561a:	185b      	adds	r3, r3, r1
    561c:	781b      	ldrb	r3, [r3, #0]
    561e:	1dba      	adds	r2, r7, #6
    5620:	7812      	ldrb	r2, [r2, #0]
    5622:	429a      	cmp	r2, r3
    5624:	d905      	bls.n	5632 <prvTraceGetPriorityProperty+0x4a>
    5626:	4b15      	ldr	r3, [pc, #84]	; (567c <prvTraceGetPriorityProperty+0x94>)
    5628:	0018      	movs	r0, r3
    562a:	4b12      	ldr	r3, [pc, #72]	; (5674 <prvTraceGetPriorityProperty+0x8c>)
    562c:	4798      	blx	r3
    562e:	2300      	movs	r3, #0
    5630:	e019      	b.n	5666 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    5632:	4b11      	ldr	r3, [pc, #68]	; (5678 <prvTraceGetPriorityProperty+0x90>)
    5634:	681c      	ldr	r4, [r3, #0]
    5636:	1dfb      	adds	r3, r7, #7
    5638:	781a      	ldrb	r2, [r3, #0]
    563a:	1dbb      	adds	r3, r7, #6
    563c:	781b      	ldrb	r3, [r3, #0]
    563e:	0011      	movs	r1, r2
    5640:	0018      	movs	r0, r3
    5642:	4b0f      	ldr	r3, [pc, #60]	; (5680 <prvTraceGetPriorityProperty+0x98>)
    5644:	4798      	blx	r3
    5646:	0003      	movs	r3, r0
    5648:	0018      	movs	r0, r3
    564a:	4b0b      	ldr	r3, [pc, #44]	; (5678 <prvTraceGetPriorityProperty+0x90>)
    564c:	681a      	ldr	r2, [r3, #0]
    564e:	1dfb      	adds	r3, r7, #7
    5650:	781b      	ldrb	r3, [r3, #0]
    5652:	2170      	movs	r1, #112	; 0x70
    5654:	18d3      	adds	r3, r2, r3
    5656:	185b      	adds	r3, r3, r1
    5658:	781b      	ldrb	r3, [r3, #0]
    565a:	18c3      	adds	r3, r0, r3
    565c:	3301      	adds	r3, #1
    565e:	229c      	movs	r2, #156	; 0x9c
    5660:	18e3      	adds	r3, r4, r3
    5662:	189b      	adds	r3, r3, r2
    5664:	781b      	ldrb	r3, [r3, #0]
}
    5666:	0018      	movs	r0, r3
    5668:	46bd      	mov	sp, r7
    566a:	b003      	add	sp, #12
    566c:	bd90      	pop	{r4, r7, pc}
    566e:	46c0      	nop			; (mov r8, r8)
    5670:	00024aec 	.word	0x00024aec
    5674:	00005ecd 	.word	0x00005ecd
    5678:	20001054 	.word	0x20001054
    567c:	00024b38 	.word	0x00024b38
    5680:	00005ad9 	.word	0x00005ad9

00005684 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
    5684:	b590      	push	{r4, r7, lr}
    5686:	b083      	sub	sp, #12
    5688:	af00      	add	r7, sp, #0
    568a:	0004      	movs	r4, r0
    568c:	0008      	movs	r0, r1
    568e:	0011      	movs	r1, r2
    5690:	1dfb      	adds	r3, r7, #7
    5692:	1c22      	adds	r2, r4, #0
    5694:	701a      	strb	r2, [r3, #0]
    5696:	1dbb      	adds	r3, r7, #6
    5698:	1c02      	adds	r2, r0, #0
    569a:	701a      	strb	r2, [r3, #0]
    569c:	1d7b      	adds	r3, r7, #5
    569e:	1c0a      	adds	r2, r1, #0
    56a0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    56a2:	1dfb      	adds	r3, r7, #7
    56a4:	781b      	ldrb	r3, [r3, #0]
    56a6:	2b08      	cmp	r3, #8
    56a8:	d904      	bls.n	56b4 <prvTraceSetObjectState+0x30>
    56aa:	4b1a      	ldr	r3, [pc, #104]	; (5714 <prvTraceSetObjectState+0x90>)
    56ac:	0018      	movs	r0, r3
    56ae:	4b1a      	ldr	r3, [pc, #104]	; (5718 <prvTraceSetObjectState+0x94>)
    56b0:	4798      	blx	r3
    56b2:	e02b      	b.n	570c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    56b4:	4b19      	ldr	r3, [pc, #100]	; (571c <prvTraceSetObjectState+0x98>)
    56b6:	681a      	ldr	r2, [r3, #0]
    56b8:	1dfb      	adds	r3, r7, #7
    56ba:	781b      	ldrb	r3, [r3, #0]
    56bc:	2164      	movs	r1, #100	; 0x64
    56be:	18d3      	adds	r3, r2, r3
    56c0:	185b      	adds	r3, r3, r1
    56c2:	781b      	ldrb	r3, [r3, #0]
    56c4:	1dba      	adds	r2, r7, #6
    56c6:	7812      	ldrb	r2, [r2, #0]
    56c8:	429a      	cmp	r2, r3
    56ca:	d904      	bls.n	56d6 <prvTraceSetObjectState+0x52>
    56cc:	4b14      	ldr	r3, [pc, #80]	; (5720 <prvTraceSetObjectState+0x9c>)
    56ce:	0018      	movs	r0, r3
    56d0:	4b11      	ldr	r3, [pc, #68]	; (5718 <prvTraceSetObjectState+0x94>)
    56d2:	4798      	blx	r3
    56d4:	e01a      	b.n	570c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    56d6:	4b11      	ldr	r3, [pc, #68]	; (571c <prvTraceSetObjectState+0x98>)
    56d8:	681c      	ldr	r4, [r3, #0]
    56da:	1dfb      	adds	r3, r7, #7
    56dc:	781a      	ldrb	r2, [r3, #0]
    56de:	1dbb      	adds	r3, r7, #6
    56e0:	781b      	ldrb	r3, [r3, #0]
    56e2:	0011      	movs	r1, r2
    56e4:	0018      	movs	r0, r3
    56e6:	4b0f      	ldr	r3, [pc, #60]	; (5724 <prvTraceSetObjectState+0xa0>)
    56e8:	4798      	blx	r3
    56ea:	0003      	movs	r3, r0
    56ec:	0018      	movs	r0, r3
    56ee:	4b0b      	ldr	r3, [pc, #44]	; (571c <prvTraceSetObjectState+0x98>)
    56f0:	681a      	ldr	r2, [r3, #0]
    56f2:	1dfb      	adds	r3, r7, #7
    56f4:	781b      	ldrb	r3, [r3, #0]
    56f6:	2170      	movs	r1, #112	; 0x70
    56f8:	18d3      	adds	r3, r2, r3
    56fa:	185b      	adds	r3, r3, r1
    56fc:	781b      	ldrb	r3, [r3, #0]
    56fe:	18c3      	adds	r3, r0, r3
    5700:	229c      	movs	r2, #156	; 0x9c
    5702:	18e3      	adds	r3, r4, r3
    5704:	189b      	adds	r3, r3, r2
    5706:	1d7a      	adds	r2, r7, #5
    5708:	7812      	ldrb	r2, [r2, #0]
    570a:	701a      	strb	r2, [r3, #0]
}
    570c:	46bd      	mov	sp, r7
    570e:	b003      	add	sp, #12
    5710:	bd90      	pop	{r4, r7, pc}
    5712:	46c0      	nop			; (mov r8, r8)
    5714:	00024b78 	.word	0x00024b78
    5718:	00005ecd 	.word	0x00005ecd
    571c:	20001054 	.word	0x20001054
    5720:	00024bbc 	.word	0x00024bbc
    5724:	00005ad9 	.word	0x00005ad9

00005728 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
    5728:	b590      	push	{r4, r7, lr}
    572a:	b083      	sub	sp, #12
    572c:	af00      	add	r7, sp, #0
    572e:	0002      	movs	r2, r0
    5730:	1dfb      	adds	r3, r7, #7
    5732:	701a      	strb	r2, [r3, #0]
    5734:	1dbb      	adds	r3, r7, #6
    5736:	1c0a      	adds	r2, r1, #0
    5738:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    573a:	1dfb      	adds	r3, r7, #7
    573c:	781b      	ldrb	r3, [r3, #0]
    573e:	2b08      	cmp	r3, #8
    5740:	d905      	bls.n	574e <prvTraceGetObjectState+0x26>
    5742:	4b1a      	ldr	r3, [pc, #104]	; (57ac <prvTraceGetObjectState+0x84>)
    5744:	0018      	movs	r0, r3
    5746:	4b1a      	ldr	r3, [pc, #104]	; (57b0 <prvTraceGetObjectState+0x88>)
    5748:	4798      	blx	r3
    574a:	2300      	movs	r3, #0
    574c:	e02a      	b.n	57a4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    574e:	4b19      	ldr	r3, [pc, #100]	; (57b4 <prvTraceGetObjectState+0x8c>)
    5750:	681a      	ldr	r2, [r3, #0]
    5752:	1dfb      	adds	r3, r7, #7
    5754:	781b      	ldrb	r3, [r3, #0]
    5756:	2164      	movs	r1, #100	; 0x64
    5758:	18d3      	adds	r3, r2, r3
    575a:	185b      	adds	r3, r3, r1
    575c:	781b      	ldrb	r3, [r3, #0]
    575e:	1dba      	adds	r2, r7, #6
    5760:	7812      	ldrb	r2, [r2, #0]
    5762:	429a      	cmp	r2, r3
    5764:	d905      	bls.n	5772 <prvTraceGetObjectState+0x4a>
    5766:	4b14      	ldr	r3, [pc, #80]	; (57b8 <prvTraceGetObjectState+0x90>)
    5768:	0018      	movs	r0, r3
    576a:	4b11      	ldr	r3, [pc, #68]	; (57b0 <prvTraceGetObjectState+0x88>)
    576c:	4798      	blx	r3
    576e:	2300      	movs	r3, #0
    5770:	e018      	b.n	57a4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    5772:	4b10      	ldr	r3, [pc, #64]	; (57b4 <prvTraceGetObjectState+0x8c>)
    5774:	681c      	ldr	r4, [r3, #0]
    5776:	1dfb      	adds	r3, r7, #7
    5778:	781a      	ldrb	r2, [r3, #0]
    577a:	1dbb      	adds	r3, r7, #6
    577c:	781b      	ldrb	r3, [r3, #0]
    577e:	0011      	movs	r1, r2
    5780:	0018      	movs	r0, r3
    5782:	4b0e      	ldr	r3, [pc, #56]	; (57bc <prvTraceGetObjectState+0x94>)
    5784:	4798      	blx	r3
    5786:	0003      	movs	r3, r0
    5788:	0018      	movs	r0, r3
    578a:	4b0a      	ldr	r3, [pc, #40]	; (57b4 <prvTraceGetObjectState+0x8c>)
    578c:	681a      	ldr	r2, [r3, #0]
    578e:	1dfb      	adds	r3, r7, #7
    5790:	781b      	ldrb	r3, [r3, #0]
    5792:	2170      	movs	r1, #112	; 0x70
    5794:	18d3      	adds	r3, r2, r3
    5796:	185b      	adds	r3, r3, r1
    5798:	781b      	ldrb	r3, [r3, #0]
    579a:	18c3      	adds	r3, r0, r3
    579c:	229c      	movs	r2, #156	; 0x9c
    579e:	18e3      	adds	r3, r4, r3
    57a0:	189b      	adds	r3, r3, r2
    57a2:	781b      	ldrb	r3, [r3, #0]
}
    57a4:	0018      	movs	r0, r3
    57a6:	46bd      	mov	sp, r7
    57a8:	b003      	add	sp, #12
    57aa:	bd90      	pop	{r4, r7, pc}
    57ac:	00024bf8 	.word	0x00024bf8
    57b0:	00005ecd 	.word	0x00005ecd
    57b4:	20001054 	.word	0x20001054
    57b8:	00024c3c 	.word	0x00024c3c
    57bc:	00005ad9 	.word	0x00005ad9

000057c0 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
    57c0:	b590      	push	{r4, r7, lr}
    57c2:	b083      	sub	sp, #12
    57c4:	af00      	add	r7, sp, #0
    57c6:	0002      	movs	r2, r0
    57c8:	1dfb      	adds	r3, r7, #7
    57ca:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    57cc:	4b11      	ldr	r3, [pc, #68]	; (5814 <prvTraceSetTaskInstanceFinished+0x54>)
    57ce:	681b      	ldr	r3, [r3, #0]
    57d0:	2267      	movs	r2, #103	; 0x67
    57d2:	5c9b      	ldrb	r3, [r3, r2]
    57d4:	1dfa      	adds	r2, r7, #7
    57d6:	7812      	ldrb	r2, [r2, #0]
    57d8:	429a      	cmp	r2, r3
    57da:	d904      	bls.n	57e6 <prvTraceSetTaskInstanceFinished+0x26>
    57dc:	4b0e      	ldr	r3, [pc, #56]	; (5818 <prvTraceSetTaskInstanceFinished+0x58>)
    57de:	0018      	movs	r0, r3
    57e0:	4b0e      	ldr	r3, [pc, #56]	; (581c <prvTraceSetTaskInstanceFinished+0x5c>)
    57e2:	4798      	blx	r3
    57e4:	e013      	b.n	580e <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    57e6:	4b0b      	ldr	r3, [pc, #44]	; (5814 <prvTraceSetTaskInstanceFinished+0x54>)
    57e8:	681c      	ldr	r4, [r3, #0]
    57ea:	1dfb      	adds	r3, r7, #7
    57ec:	781b      	ldrb	r3, [r3, #0]
    57ee:	2103      	movs	r1, #3
    57f0:	0018      	movs	r0, r3
    57f2:	4b0b      	ldr	r3, [pc, #44]	; (5820 <prvTraceSetTaskInstanceFinished+0x60>)
    57f4:	4798      	blx	r3
    57f6:	0003      	movs	r3, r0
    57f8:	0019      	movs	r1, r3
    57fa:	4b06      	ldr	r3, [pc, #24]	; (5814 <prvTraceSetTaskInstanceFinished+0x54>)
    57fc:	681b      	ldr	r3, [r3, #0]
    57fe:	2273      	movs	r2, #115	; 0x73
    5800:	5c9b      	ldrb	r3, [r3, r2]
    5802:	18cb      	adds	r3, r1, r3
    5804:	229c      	movs	r2, #156	; 0x9c
    5806:	18e3      	adds	r3, r4, r3
    5808:	189b      	adds	r3, r3, r2
    580a:	2200      	movs	r2, #0
    580c:	701a      	strb	r2, [r3, #0]
#endif
}
    580e:	46bd      	mov	sp, r7
    5810:	b003      	add	sp, #12
    5812:	bd90      	pop	{r4, r7, pc}
    5814:	20001054 	.word	0x20001054
    5818:	00024c78 	.word	0x00024c78
    581c:	00005ecd 	.word	0x00005ecd
    5820:	00005ad9 	.word	0x00005ad9

00005824 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
    5824:	b580      	push	{r7, lr}
    5826:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
    5828:	4b75      	ldr	r3, [pc, #468]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    582a:	681b      	ldr	r3, [r3, #0]
    582c:	2b00      	cmp	r3, #0
    582e:	d103      	bne.n	5838 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
    5830:	4b73      	ldr	r3, [pc, #460]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5832:	4a74      	ldr	r2, [pc, #464]	; (5a04 <prvTraceInitTraceData+0x1e0>)
    5834:	601a      	str	r2, [r3, #0]
    5836:	e006      	b.n	5846 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
    5838:	4b71      	ldr	r3, [pc, #452]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    583a:	681b      	ldr	r3, [r3, #0]
    583c:	781b      	ldrb	r3, [r3, #0]
    583e:	b2db      	uxtb	r3, r3
    5840:	2b01      	cmp	r3, #1
    5842:	d100      	bne.n	5846 <prvTraceInitTraceData+0x22>
    5844:	e0d8      	b.n	59f8 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
    5846:	4b70      	ldr	r3, [pc, #448]	; (5a08 <prvTraceInitTraceData+0x1e4>)
    5848:	681a      	ldr	r2, [r3, #0]
    584a:	4b70      	ldr	r3, [pc, #448]	; (5a0c <prvTraceInitTraceData+0x1e8>)
    584c:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    584e:	4b6c      	ldr	r3, [pc, #432]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5850:	6818      	ldr	r0, [r3, #0]
    5852:	23bd      	movs	r3, #189	; 0xbd
    5854:	011b      	lsls	r3, r3, #4
    5856:	001a      	movs	r2, r3
    5858:	2100      	movs	r1, #0
    585a:	4b6d      	ldr	r3, [pc, #436]	; (5a10 <prvTraceInitTraceData+0x1ec>)
    585c:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    585e:	4b68      	ldr	r3, [pc, #416]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5860:	681b      	ldr	r3, [r3, #0]
    5862:	4a6c      	ldr	r2, [pc, #432]	; (5a14 <prvTraceInitTraceData+0x1f0>)
    5864:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    5866:	4b66      	ldr	r3, [pc, #408]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5868:	681b      	ldr	r3, [r3, #0]
    586a:	2205      	movs	r2, #5
    586c:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
    586e:	4b64      	ldr	r3, [pc, #400]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5870:	681b      	ldr	r3, [r3, #0]
    5872:	2200      	movs	r2, #0
    5874:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    5876:	4b62      	ldr	r3, [pc, #392]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5878:	681b      	ldr	r3, [r3, #0]
    587a:	22bd      	movs	r2, #189	; 0xbd
    587c:	0112      	lsls	r2, r2, #4
    587e:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
    5880:	4b5f      	ldr	r3, [pc, #380]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	2296      	movs	r2, #150	; 0x96
    5886:	0052      	lsls	r2, r2, #1
    5888:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
    588a:	4b5d      	ldr	r3, [pc, #372]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    588c:	681b      	ldr	r3, [r3, #0]
    588e:	4a62      	ldr	r2, [pc, #392]	; (5a18 <prvTraceInitTraceData+0x1f4>)
    5890:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
    5892:	4b5b      	ldr	r3, [pc, #364]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5894:	681b      	ldr	r3, [r3, #0]
    5896:	2200      	movs	r2, #0
    5898:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
    589a:	4b59      	ldr	r3, [pc, #356]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    589c:	681b      	ldr	r3, [r3, #0]
    589e:	2200      	movs	r2, #0
    58a0:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
    58a2:	4b5e      	ldr	r3, [pc, #376]	; (5a1c <prvTraceInitTraceData+0x1f8>)
    58a4:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
    58a6:	4b56      	ldr	r3, [pc, #344]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    58a8:	681b      	ldr	r3, [r3, #0]
    58aa:	4a5d      	ldr	r2, [pc, #372]	; (5a20 <prvTraceInitTraceData+0x1fc>)
    58ac:	495d      	ldr	r1, [pc, #372]	; (5a24 <prvTraceInitTraceData+0x200>)
    58ae:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
    58b0:	4b53      	ldr	r3, [pc, #332]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    58b2:	681a      	ldr	r2, [r3, #0]
    58b4:	23ac      	movs	r3, #172	; 0xac
    58b6:	00db      	lsls	r3, r3, #3
    58b8:	21c8      	movs	r1, #200	; 0xc8
    58ba:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    58bc:	4b50      	ldr	r3, [pc, #320]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    58be:	681b      	ldr	r3, [r3, #0]
    58c0:	4a59      	ldr	r2, [pc, #356]	; (5a28 <prvTraceInitTraceData+0x204>)
    58c2:	2101      	movs	r1, #1
    58c4:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
    58c6:	4b4e      	ldr	r3, [pc, #312]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    58c8:	681a      	ldr	r2, [r3, #0]
    58ca:	23d7      	movs	r3, #215	; 0xd7
    58cc:	00db      	lsls	r3, r3, #3
    58ce:	4957      	ldr	r1, [pc, #348]	; (5a2c <prvTraceInitTraceData+0x208>)
    58d0:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    58d2:	4b4b      	ldr	r3, [pc, #300]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    58d4:	681b      	ldr	r3, [r3, #0]
    58d6:	4a56      	ldr	r2, [pc, #344]	; (5a30 <prvTraceInitTraceData+0x20c>)
    58d8:	4694      	mov	ip, r2
    58da:	4463      	add	r3, ip
    58dc:	4955      	ldr	r1, [pc, #340]	; (5a34 <prvTraceInitTraceData+0x210>)
    58de:	2250      	movs	r2, #80	; 0x50
    58e0:	0018      	movs	r0, r3
    58e2:	4b55      	ldr	r3, [pc, #340]	; (5a38 <prvTraceInitTraceData+0x214>)
    58e4:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
    58e6:	4b46      	ldr	r3, [pc, #280]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    58e8:	681b      	ldr	r3, [r3, #0]
    58ea:	4a54      	ldr	r2, [pc, #336]	; (5a3c <prvTraceInitTraceData+0x218>)
    58ec:	4954      	ldr	r1, [pc, #336]	; (5a40 <prvTraceInitTraceData+0x21c>)
    58ee:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    58f0:	4b43      	ldr	r3, [pc, #268]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    58f2:	681b      	ldr	r3, [r3, #0]
    58f4:	4a53      	ldr	r2, [pc, #332]	; (5a44 <prvTraceInitTraceData+0x220>)
    58f6:	210a      	movs	r1, #10
    58f8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    58fa:	4b41      	ldr	r3, [pc, #260]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    58fc:	681b      	ldr	r3, [r3, #0]
    58fe:	4a52      	ldr	r2, [pc, #328]	; (5a48 <prvTraceInitTraceData+0x224>)
    5900:	210b      	movs	r1, #11
    5902:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    5904:	4b3e      	ldr	r3, [pc, #248]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5906:	681b      	ldr	r3, [r3, #0]
    5908:	4a50      	ldr	r2, [pc, #320]	; (5a4c <prvTraceInitTraceData+0x228>)
    590a:	210c      	movs	r1, #12
    590c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    590e:	4b3c      	ldr	r3, [pc, #240]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5910:	681b      	ldr	r3, [r3, #0]
    5912:	4a4f      	ldr	r2, [pc, #316]	; (5a50 <prvTraceInitTraceData+0x22c>)
    5914:	210d      	movs	r1, #13
    5916:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    5918:	4b39      	ldr	r3, [pc, #228]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    591a:	681b      	ldr	r3, [r3, #0]
    591c:	4a4d      	ldr	r2, [pc, #308]	; (5a54 <prvTraceInitTraceData+0x230>)
    591e:	2171      	movs	r1, #113	; 0x71
    5920:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    5922:	4b37      	ldr	r3, [pc, #220]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5924:	681b      	ldr	r3, [r3, #0]
    5926:	4a4c      	ldr	r2, [pc, #304]	; (5a58 <prvTraceInitTraceData+0x234>)
    5928:	2172      	movs	r1, #114	; 0x72
    592a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    592c:	4b34      	ldr	r3, [pc, #208]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    592e:	681b      	ldr	r3, [r3, #0]
    5930:	4a4a      	ldr	r2, [pc, #296]	; (5a5c <prvTraceInitTraceData+0x238>)
    5932:	2173      	movs	r1, #115	; 0x73
    5934:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    5936:	4b32      	ldr	r3, [pc, #200]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5938:	681b      	ldr	r3, [r3, #0]
    593a:	4a49      	ldr	r2, [pc, #292]	; (5a60 <prvTraceInitTraceData+0x23c>)
    593c:	2174      	movs	r1, #116	; 0x74
    593e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    5940:	4b2f      	ldr	r3, [pc, #188]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5942:	681b      	ldr	r3, [r3, #0]
    5944:	4a47      	ldr	r2, [pc, #284]	; (5a64 <prvTraceInitTraceData+0x240>)
    5946:	21f1      	movs	r1, #241	; 0xf1
    5948:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    594a:	4b2d      	ldr	r3, [pc, #180]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    594c:	681b      	ldr	r3, [r3, #0]
    594e:	4a46      	ldr	r2, [pc, #280]	; (5a68 <prvTraceInitTraceData+0x244>)
    5950:	21f2      	movs	r1, #242	; 0xf2
    5952:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    5954:	4b2a      	ldr	r3, [pc, #168]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5956:	681b      	ldr	r3, [r3, #0]
    5958:	4a44      	ldr	r2, [pc, #272]	; (5a6c <prvTraceInitTraceData+0x248>)
    595a:	21f3      	movs	r1, #243	; 0xf3
    595c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    595e:	4b28      	ldr	r3, [pc, #160]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5960:	681b      	ldr	r3, [r3, #0]
    5962:	4a43      	ldr	r2, [pc, #268]	; (5a70 <prvTraceInitTraceData+0x24c>)
    5964:	21f4      	movs	r1, #244	; 0xf4
    5966:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
    5968:	4b42      	ldr	r3, [pc, #264]	; (5a74 <prvTraceInitTraceData+0x250>)
    596a:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
    596c:	4b24      	ldr	r3, [pc, #144]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    596e:	681b      	ldr	r3, [r3, #0]
    5970:	22f4      	movs	r2, #244	; 0xf4
    5972:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
    5974:	4b22      	ldr	r3, [pc, #136]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5976:	681b      	ldr	r3, [r3, #0]
    5978:	22f3      	movs	r2, #243	; 0xf3
    597a:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
    597c:	4b20      	ldr	r3, [pc, #128]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    597e:	681b      	ldr	r3, [r3, #0]
    5980:	22f2      	movs	r2, #242	; 0xf2
    5982:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
    5984:	4b1e      	ldr	r3, [pc, #120]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5986:	681b      	ldr	r3, [r3, #0]
    5988:	22f1      	movs	r2, #241	; 0xf1
    598a:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
    598c:	4b1c      	ldr	r3, [pc, #112]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    598e:	681b      	ldr	r3, [r3, #0]
    5990:	2274      	movs	r2, #116	; 0x74
    5992:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
    5994:	4b1a      	ldr	r3, [pc, #104]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    5996:	681b      	ldr	r3, [r3, #0]
    5998:	2273      	movs	r2, #115	; 0x73
    599a:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
    599c:	4b18      	ldr	r3, [pc, #96]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    599e:	681b      	ldr	r3, [r3, #0]
    59a0:	2272      	movs	r2, #114	; 0x72
    59a2:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
    59a4:	4b16      	ldr	r3, [pc, #88]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    59a6:	681b      	ldr	r3, [r3, #0]
    59a8:	2271      	movs	r2, #113	; 0x71
    59aa:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
    59ac:	4b14      	ldr	r3, [pc, #80]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    59ae:	681b      	ldr	r3, [r3, #0]
    59b0:	2204      	movs	r2, #4
    59b2:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
    59b4:	4b12      	ldr	r3, [pc, #72]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    59b6:	681b      	ldr	r3, [r3, #0]
    59b8:	2203      	movs	r2, #3
    59ba:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
    59bc:	4b10      	ldr	r3, [pc, #64]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    59be:	681b      	ldr	r3, [r3, #0]
    59c0:	2202      	movs	r2, #2
    59c2:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
    59c4:	4b0e      	ldr	r3, [pc, #56]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    59c6:	681b      	ldr	r3, [r3, #0]
    59c8:	2201      	movs	r2, #1
    59ca:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
    59cc:	4b2a      	ldr	r3, [pc, #168]	; (5a78 <prvTraceInitTraceData+0x254>)
    59ce:	681b      	ldr	r3, [r3, #0]
    59d0:	2b00      	cmp	r3, #0
    59d2:	d012      	beq.n	59fa <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    59d4:	4b0a      	ldr	r3, [pc, #40]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    59d6:	681b      	ldr	r3, [r3, #0]
    59d8:	4a15      	ldr	r2, [pc, #84]	; (5a30 <prvTraceInitTraceData+0x20c>)
    59da:	1898      	adds	r0, r3, r2
    59dc:	4b26      	ldr	r3, [pc, #152]	; (5a78 <prvTraceInitTraceData+0x254>)
    59de:	681b      	ldr	r3, [r3, #0]
    59e0:	2250      	movs	r2, #80	; 0x50
    59e2:	0019      	movs	r1, r3
    59e4:	4b14      	ldr	r3, [pc, #80]	; (5a38 <prvTraceInitTraceData+0x214>)
    59e6:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
    59e8:	4b05      	ldr	r3, [pc, #20]	; (5a00 <prvTraceInitTraceData+0x1dc>)
    59ea:	681b      	ldr	r3, [r3, #0]
    59ec:	4a23      	ldr	r2, [pc, #140]	; (5a7c <prvTraceInitTraceData+0x258>)
    59ee:	2101      	movs	r1, #1
    59f0:	5099      	str	r1, [r3, r2]
		vTraceStop();
    59f2:	4b23      	ldr	r3, [pc, #140]	; (5a80 <prvTraceInitTraceData+0x25c>)
    59f4:	4798      	blx	r3
    59f6:	e000      	b.n	59fa <prvTraceInitTraceData+0x1d6>
			return;
    59f8:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
    59fa:	46bd      	mov	sp, r7
    59fc:	bd80      	pop	{r7, pc}
    59fe:	46c0      	nop			; (mov r8, r8)
    5a00:	20001054 	.word	0x20001054
    5a04:	20004800 	.word	0x20004800
    5a08:	e000e018 	.word	0xe000e018
    5a0c:	200053d0 	.word	0x200053d0
    5a10:	00020d8b 	.word	0x00020d8b
    5a14:	00001aa1 	.word	0x00001aa1
    5a18:	f0f0f0f0 	.word	0xf0f0f0f0
    5a1c:	00004989 	.word	0x00004989
    5a20:	0000055c 	.word	0x0000055c
    5a24:	f1f1f1f1 	.word	0xf1f1f1f1
    5a28:	00000564 	.word	0x00000564
    5a2c:	f2f2f2f2 	.word	0xf2f2f2f2
    5a30:	000006bc 	.word	0x000006bc
    5a34:	00024cc0 	.word	0x00024cc0
    5a38:	00005d99 	.word	0x00005d99
    5a3c:	0000070c 	.word	0x0000070c
    5a40:	f3f3f3f3 	.word	0xf3f3f3f3
    5a44:	00000bc4 	.word	0x00000bc4
    5a48:	00000bc5 	.word	0x00000bc5
    5a4c:	00000bc6 	.word	0x00000bc6
    5a50:	00000bc7 	.word	0x00000bc7
    5a54:	00000bc8 	.word	0x00000bc8
    5a58:	00000bc9 	.word	0x00000bc9
    5a5c:	00000bca 	.word	0x00000bca
    5a60:	00000bcb 	.word	0x00000bcb
    5a64:	00000bcc 	.word	0x00000bcc
    5a68:	00000bcd 	.word	0x00000bcd
    5a6c:	00000bce 	.word	0x00000bce
    5a70:	00000bcf 	.word	0x00000bcf
    5a74:	00004b29 	.word	0x00004b29
    5a78:	20000fb4 	.word	0x20000fb4
    5a7c:	000006b4 	.word	0x000006b4
    5a80:	00004d91 	.word	0x00004d91

00005a84 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
    5a84:	b580      	push	{r7, lr}
    5a86:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
    5a88:	4b10      	ldr	r3, [pc, #64]	; (5acc <prvTraceNextFreeEventBufferSlot+0x48>)
    5a8a:	681b      	ldr	r3, [r3, #0]
    5a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5a8e:	2b00      	cmp	r3, #0
    5a90:	d101      	bne.n	5a96 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
    5a92:	2300      	movs	r3, #0
    5a94:	e017      	b.n	5ac6 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    5a96:	4b0d      	ldr	r3, [pc, #52]	; (5acc <prvTraceNextFreeEventBufferSlot+0x48>)
    5a98:	681b      	ldr	r3, [r3, #0]
    5a9a:	69da      	ldr	r2, [r3, #28]
    5a9c:	232c      	movs	r3, #44	; 0x2c
    5a9e:	33ff      	adds	r3, #255	; 0xff
    5aa0:	429a      	cmp	r2, r3
    5aa2:	d905      	bls.n	5ab0 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
    5aa4:	4b0a      	ldr	r3, [pc, #40]	; (5ad0 <prvTraceNextFreeEventBufferSlot+0x4c>)
    5aa6:	0018      	movs	r0, r3
    5aa8:	4b0a      	ldr	r3, [pc, #40]	; (5ad4 <prvTraceNextFreeEventBufferSlot+0x50>)
    5aaa:	4798      	blx	r3
		return NULL;
    5aac:	2300      	movs	r3, #0
    5aae:	e00a      	b.n	5ac6 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    5ab0:	4b06      	ldr	r3, [pc, #24]	; (5acc <prvTraceNextFreeEventBufferSlot+0x48>)
    5ab2:	681a      	ldr	r2, [r3, #0]
    5ab4:	4b05      	ldr	r3, [pc, #20]	; (5acc <prvTraceNextFreeEventBufferSlot+0x48>)
    5ab6:	681b      	ldr	r3, [r3, #0]
    5ab8:	69db      	ldr	r3, [r3, #28]
    5aba:	009b      	lsls	r3, r3, #2
    5abc:	21e2      	movs	r1, #226	; 0xe2
    5abe:	00c9      	lsls	r1, r1, #3
    5ac0:	468c      	mov	ip, r1
    5ac2:	4463      	add	r3, ip
    5ac4:	18d3      	adds	r3, r2, r3
}
    5ac6:	0018      	movs	r0, r3
    5ac8:	46bd      	mov	sp, r7
    5aca:	bd80      	pop	{r7, pc}
    5acc:	20001054 	.word	0x20001054
    5ad0:	00024cd4 	.word	0x00024cd4
    5ad4:	00005ecd 	.word	0x00005ecd

00005ad8 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
    5ad8:	b580      	push	{r7, lr}
    5ada:	b082      	sub	sp, #8
    5adc:	af00      	add	r7, sp, #0
    5ade:	0002      	movs	r2, r0
    5ae0:	1dfb      	adds	r3, r7, #7
    5ae2:	701a      	strb	r2, [r3, #0]
    5ae4:	1dbb      	adds	r3, r7, #6
    5ae6:	1c0a      	adds	r2, r1, #0
    5ae8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    5aea:	1dbb      	adds	r3, r7, #6
    5aec:	781b      	ldrb	r3, [r3, #0]
    5aee:	2b08      	cmp	r3, #8
    5af0:	d905      	bls.n	5afe <uiIndexOfObject+0x26>
    5af2:	4b2a      	ldr	r3, [pc, #168]	; (5b9c <uiIndexOfObject+0xc4>)
    5af4:	0018      	movs	r0, r3
    5af6:	4b2a      	ldr	r3, [pc, #168]	; (5ba0 <uiIndexOfObject+0xc8>)
    5af8:	4798      	blx	r3
    5afa:	2300      	movs	r3, #0
    5afc:	e049      	b.n	5b92 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    5afe:	1dfb      	adds	r3, r7, #7
    5b00:	781b      	ldrb	r3, [r3, #0]
    5b02:	2b00      	cmp	r3, #0
    5b04:	d00b      	beq.n	5b1e <uiIndexOfObject+0x46>
    5b06:	4b27      	ldr	r3, [pc, #156]	; (5ba4 <uiIndexOfObject+0xcc>)
    5b08:	681a      	ldr	r2, [r3, #0]
    5b0a:	1dbb      	adds	r3, r7, #6
    5b0c:	781b      	ldrb	r3, [r3, #0]
    5b0e:	2164      	movs	r1, #100	; 0x64
    5b10:	18d3      	adds	r3, r2, r3
    5b12:	185b      	adds	r3, r3, r1
    5b14:	781b      	ldrb	r3, [r3, #0]
    5b16:	1dfa      	adds	r2, r7, #7
    5b18:	7812      	ldrb	r2, [r2, #0]
    5b1a:	429a      	cmp	r2, r3
    5b1c:	d905      	bls.n	5b2a <uiIndexOfObject+0x52>
    5b1e:	4b22      	ldr	r3, [pc, #136]	; (5ba8 <uiIndexOfObject+0xd0>)
    5b20:	0018      	movs	r0, r3
    5b22:	4b1f      	ldr	r3, [pc, #124]	; (5ba0 <uiIndexOfObject+0xc8>)
    5b24:	4798      	blx	r3
    5b26:	2300      	movs	r3, #0
    5b28:	e033      	b.n	5b92 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
    5b2a:	1dbb      	adds	r3, r7, #6
    5b2c:	781b      	ldrb	r3, [r3, #0]
    5b2e:	2b08      	cmp	r3, #8
    5b30:	d82a      	bhi.n	5b88 <uiIndexOfObject+0xb0>
    5b32:	1dfb      	adds	r3, r7, #7
    5b34:	781b      	ldrb	r3, [r3, #0]
    5b36:	2b00      	cmp	r3, #0
    5b38:	d026      	beq.n	5b88 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
    5b3a:	4b1a      	ldr	r3, [pc, #104]	; (5ba4 <uiIndexOfObject+0xcc>)
    5b3c:	681a      	ldr	r2, [r3, #0]
    5b3e:	1dbb      	adds	r3, r7, #6
    5b40:	781b      	ldrb	r3, [r3, #0]
    5b42:	2164      	movs	r1, #100	; 0x64
    5b44:	18d3      	adds	r3, r2, r3
    5b46:	185b      	adds	r3, r3, r1
    5b48:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
    5b4a:	1dfa      	adds	r2, r7, #7
    5b4c:	7812      	ldrb	r2, [r2, #0]
    5b4e:	429a      	cmp	r2, r3
    5b50:	d81a      	bhi.n	5b88 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    5b52:	4b14      	ldr	r3, [pc, #80]	; (5ba4 <uiIndexOfObject+0xcc>)
    5b54:	681a      	ldr	r2, [r3, #0]
    5b56:	1dbb      	adds	r3, r7, #6
    5b58:	781b      	ldrb	r3, [r3, #0]
    5b5a:	3340      	adds	r3, #64	; 0x40
    5b5c:	005b      	lsls	r3, r3, #1
    5b5e:	18d3      	adds	r3, r2, r3
    5b60:	3308      	adds	r3, #8
    5b62:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    5b64:	4b0f      	ldr	r3, [pc, #60]	; (5ba4 <uiIndexOfObject+0xcc>)
    5b66:	6819      	ldr	r1, [r3, #0]
    5b68:	1dbb      	adds	r3, r7, #6
    5b6a:	781b      	ldrb	r3, [r3, #0]
    5b6c:	207c      	movs	r0, #124	; 0x7c
    5b6e:	18cb      	adds	r3, r1, r3
    5b70:	181b      	adds	r3, r3, r0
    5b72:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    5b74:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    5b76:	1df9      	adds	r1, r7, #7
    5b78:	7809      	ldrb	r1, [r1, #0]
    5b7a:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    5b7c:	b289      	uxth	r1, r1
    5b7e:	434b      	muls	r3, r1
    5b80:	b29b      	uxth	r3, r3
    5b82:	18d3      	adds	r3, r2, r3
    5b84:	b29b      	uxth	r3, r3
    5b86:	e004      	b.n	5b92 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
    5b88:	4b08      	ldr	r3, [pc, #32]	; (5bac <uiIndexOfObject+0xd4>)
    5b8a:	0018      	movs	r0, r3
    5b8c:	4b04      	ldr	r3, [pc, #16]	; (5ba0 <uiIndexOfObject+0xc8>)
    5b8e:	4798      	blx	r3
	return 0;
    5b90:	2300      	movs	r3, #0
}
    5b92:	0018      	movs	r0, r3
    5b94:	46bd      	mov	sp, r7
    5b96:	b002      	add	sp, #8
    5b98:	bd80      	pop	{r7, pc}
    5b9a:	46c0      	nop			; (mov r8, r8)
    5b9c:	00024cfc 	.word	0x00024cfc
    5ba0:	00005ecd 	.word	0x00005ecd
    5ba4:	20001054 	.word	0x20001054
    5ba8:	00024d3c 	.word	0x00024d3c
    5bac:	00024d7c 	.word	0x00024d7c

00005bb0 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
    5bb0:	b580      	push	{r7, lr}
    5bb2:	b088      	sub	sp, #32
    5bb4:	af00      	add	r7, sp, #0
    5bb6:	0002      	movs	r2, r0
    5bb8:	1dfb      	adds	r3, r7, #7
    5bba:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    5bbc:	4b5a      	ldr	r3, [pc, #360]	; (5d28 <prvTraceGetObjectHandle+0x178>)
    5bbe:	681b      	ldr	r3, [r3, #0]
    5bc0:	2b00      	cmp	r3, #0
    5bc2:	d105      	bne.n	5bd0 <prvTraceGetObjectHandle+0x20>
    5bc4:	4b59      	ldr	r3, [pc, #356]	; (5d2c <prvTraceGetObjectHandle+0x17c>)
    5bc6:	0018      	movs	r0, r3
    5bc8:	4b59      	ldr	r3, [pc, #356]	; (5d30 <prvTraceGetObjectHandle+0x180>)
    5bca:	4798      	blx	r3
    5bcc:	2300      	movs	r3, #0
    5bce:	e0a7      	b.n	5d20 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    5bd0:	1dfb      	adds	r3, r7, #7
    5bd2:	781b      	ldrb	r3, [r3, #0]
    5bd4:	2b08      	cmp	r3, #8
    5bd6:	d905      	bls.n	5be4 <prvTraceGetObjectHandle+0x34>
    5bd8:	4b56      	ldr	r3, [pc, #344]	; (5d34 <prvTraceGetObjectHandle+0x184>)
    5bda:	0018      	movs	r0, r3
    5bdc:	4b54      	ldr	r3, [pc, #336]	; (5d30 <prvTraceGetObjectHandle+0x180>)
    5bde:	4798      	blx	r3
    5be0:	2300      	movs	r3, #0
    5be2:	e09d      	b.n	5d20 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5be4:	f3ef 8310 	mrs	r3, PRIMASK
    5be8:	60fb      	str	r3, [r7, #12]
  return(result);
    5bea:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
    5bec:	61bb      	str	r3, [r7, #24]
    5bee:	2301      	movs	r3, #1
    5bf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5bf2:	693b      	ldr	r3, [r7, #16]
    5bf4:	f383 8810 	msr	PRIMASK, r3
    5bf8:	4b4f      	ldr	r3, [pc, #316]	; (5d38 <prvTraceGetObjectHandle+0x188>)
    5bfa:	681b      	ldr	r3, [r3, #0]
    5bfc:	1c5a      	adds	r2, r3, #1
    5bfe:	4b4e      	ldr	r3, [pc, #312]	; (5d38 <prvTraceGetObjectHandle+0x188>)
    5c00:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    5c02:	1dfb      	adds	r3, r7, #7
    5c04:	781a      	ldrb	r2, [r3, #0]
    5c06:	4b4d      	ldr	r3, [pc, #308]	; (5d3c <prvTraceGetObjectHandle+0x18c>)
    5c08:	0052      	lsls	r2, r2, #1
    5c0a:	5ad3      	ldrh	r3, [r2, r3]
    5c0c:	001a      	movs	r2, r3
    5c0e:	4b4c      	ldr	r3, [pc, #304]	; (5d40 <prvTraceGetObjectHandle+0x190>)
    5c10:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    5c12:	4b4b      	ldr	r3, [pc, #300]	; (5d40 <prvTraceGetObjectHandle+0x190>)
    5c14:	681b      	ldr	r3, [r3, #0]
    5c16:	4a49      	ldr	r2, [pc, #292]	; (5d3c <prvTraceGetObjectHandle+0x18c>)
    5c18:	2148      	movs	r1, #72	; 0x48
    5c1a:	18d3      	adds	r3, r2, r3
    5c1c:	185b      	adds	r3, r3, r1
    5c1e:	781b      	ldrb	r3, [r3, #0]
    5c20:	2b00      	cmp	r3, #0
    5c22:	d117      	bne.n	5c54 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
    5c24:	4b46      	ldr	r3, [pc, #280]	; (5d40 <prvTraceGetObjectHandle+0x190>)
    5c26:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
    5c28:	4b45      	ldr	r3, [pc, #276]	; (5d40 <prvTraceGetObjectHandle+0x190>)
    5c2a:	681b      	ldr	r3, [r3, #0]
    5c2c:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    5c2e:	1dfb      	adds	r3, r7, #7
    5c30:	781b      	ldrb	r3, [r3, #0]
    5c32:	4842      	ldr	r0, [pc, #264]	; (5d3c <prvTraceGetObjectHandle+0x18c>)
    5c34:	3308      	adds	r3, #8
    5c36:	005b      	lsls	r3, r3, #1
    5c38:	18c3      	adds	r3, r0, r3
    5c3a:	3302      	adds	r3, #2
    5c3c:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
    5c3e:	b2db      	uxtb	r3, r3
    5c40:	1acb      	subs	r3, r1, r3
    5c42:	b2db      	uxtb	r3, r3
    5c44:	3301      	adds	r3, #1
    5c46:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
    5c48:	4b3c      	ldr	r3, [pc, #240]	; (5d3c <prvTraceGetObjectHandle+0x18c>)
    5c4a:	2148      	movs	r1, #72	; 0x48
    5c4c:	189b      	adds	r3, r3, r2
    5c4e:	185b      	adds	r3, r3, r1
    5c50:	1c02      	adds	r2, r0, #0
    5c52:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    5c54:	4b3a      	ldr	r3, [pc, #232]	; (5d40 <prvTraceGetObjectHandle+0x190>)
    5c56:	681a      	ldr	r2, [r3, #0]
    5c58:	231f      	movs	r3, #31
    5c5a:	18fb      	adds	r3, r7, r3
    5c5c:	4937      	ldr	r1, [pc, #220]	; (5d3c <prvTraceGetObjectHandle+0x18c>)
    5c5e:	2048      	movs	r0, #72	; 0x48
    5c60:	188a      	adds	r2, r1, r2
    5c62:	1812      	adds	r2, r2, r0
    5c64:	7812      	ldrb	r2, [r2, #0]
    5c66:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    5c68:	1dfb      	adds	r3, r7, #7
    5c6a:	781a      	ldrb	r2, [r3, #0]
    5c6c:	4b33      	ldr	r3, [pc, #204]	; (5d3c <prvTraceGetObjectHandle+0x18c>)
    5c6e:	0052      	lsls	r2, r2, #1
    5c70:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    5c72:	1dfb      	adds	r3, r7, #7
    5c74:	781b      	ldrb	r3, [r3, #0]
    5c76:	4931      	ldr	r1, [pc, #196]	; (5d3c <prvTraceGetObjectHandle+0x18c>)
    5c78:	3310      	adds	r3, #16
    5c7a:	005b      	lsls	r3, r3, #1
    5c7c:	18cb      	adds	r3, r1, r3
    5c7e:	3304      	adds	r3, #4
    5c80:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    5c82:	429a      	cmp	r2, r3
    5c84:	d90d      	bls.n	5ca2 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    5c86:	1dfb      	adds	r3, r7, #7
    5c88:	781b      	ldrb	r3, [r3, #0]
    5c8a:	0018      	movs	r0, r3
    5c8c:	4b2d      	ldr	r3, [pc, #180]	; (5d44 <prvTraceGetObjectHandle+0x194>)
    5c8e:	4798      	blx	r3
    5c90:	0003      	movs	r3, r0
    5c92:	0018      	movs	r0, r3
    5c94:	4b26      	ldr	r3, [pc, #152]	; (5d30 <prvTraceGetObjectHandle+0x180>)
    5c96:	4798      	blx	r3
		handle = 0;
    5c98:	231f      	movs	r3, #31
    5c9a:	18fb      	adds	r3, r7, r3
    5c9c:	2200      	movs	r2, #0
    5c9e:	701a      	strb	r2, [r3, #0]
    5ca0:	e031      	b.n	5d06 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    5ca2:	1dfb      	adds	r3, r7, #7
    5ca4:	781b      	ldrb	r3, [r3, #0]
    5ca6:	4a25      	ldr	r2, [pc, #148]	; (5d3c <prvTraceGetObjectHandle+0x18c>)
    5ca8:	0059      	lsls	r1, r3, #1
    5caa:	5a8a      	ldrh	r2, [r1, r2]
    5cac:	3201      	adds	r2, #1
    5cae:	b291      	uxth	r1, r2
    5cb0:	4a22      	ldr	r2, [pc, #136]	; (5d3c <prvTraceGetObjectHandle+0x18c>)
    5cb2:	005b      	lsls	r3, r3, #1
    5cb4:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    5cb6:	1dfb      	adds	r3, r7, #7
    5cb8:	781a      	ldrb	r2, [r3, #0]
    5cba:	4b20      	ldr	r3, [pc, #128]	; (5d3c <prvTraceGetObjectHandle+0x18c>)
    5cbc:	0052      	lsls	r2, r2, #1
    5cbe:	5ad3      	ldrh	r3, [r2, r3]
    5cc0:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
    5cc2:	1dfb      	adds	r3, r7, #7
    5cc4:	781b      	ldrb	r3, [r3, #0]
    5cc6:	4a1d      	ldr	r2, [pc, #116]	; (5d3c <prvTraceGetObjectHandle+0x18c>)
    5cc8:	3308      	adds	r3, #8
    5cca:	005b      	lsls	r3, r3, #1
    5ccc:	18d3      	adds	r3, r2, r3
    5cce:	3302      	adds	r3, #2
    5cd0:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    5cd2:	1acb      	subs	r3, r1, r3
    5cd4:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    5cd6:	1dfb      	adds	r3, r7, #7
    5cd8:	781b      	ldrb	r3, [r3, #0]
    5cda:	4a18      	ldr	r2, [pc, #96]	; (5d3c <prvTraceGetObjectHandle+0x18c>)
    5cdc:	3318      	adds	r3, #24
    5cde:	005b      	lsls	r3, r3, #1
    5ce0:	18d3      	adds	r3, r2, r3
    5ce2:	3306      	adds	r3, #6
    5ce4:	881b      	ldrh	r3, [r3, #0]
    5ce6:	001a      	movs	r2, r3
		if (hndCount >
    5ce8:	697b      	ldr	r3, [r7, #20]
    5cea:	429a      	cmp	r2, r3
    5cec:	da0b      	bge.n	5d06 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    5cee:	1dfb      	adds	r3, r7, #7
    5cf0:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
    5cf2:	697a      	ldr	r2, [r7, #20]
    5cf4:	b2d2      	uxtb	r2, r2
    5cf6:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    5cf8:	4a10      	ldr	r2, [pc, #64]	; (5d3c <prvTraceGetObjectHandle+0x18c>)
    5cfa:	3318      	adds	r3, #24
    5cfc:	005b      	lsls	r3, r3, #1
    5cfe:	18d3      	adds	r3, r2, r3
    5d00:	3306      	adds	r3, #6
    5d02:	1c0a      	adds	r2, r1, #0
    5d04:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
    5d06:	4b0c      	ldr	r3, [pc, #48]	; (5d38 <prvTraceGetObjectHandle+0x188>)
    5d08:	681b      	ldr	r3, [r3, #0]
    5d0a:	1e5a      	subs	r2, r3, #1
    5d0c:	4b0a      	ldr	r3, [pc, #40]	; (5d38 <prvTraceGetObjectHandle+0x188>)
    5d0e:	601a      	str	r2, [r3, #0]
    5d10:	69bb      	ldr	r3, [r7, #24]
    5d12:	60bb      	str	r3, [r7, #8]
    5d14:	68bb      	ldr	r3, [r7, #8]
    5d16:	f383 8810 	msr	PRIMASK, r3

	return handle;
    5d1a:	231f      	movs	r3, #31
    5d1c:	18fb      	adds	r3, r7, r3
    5d1e:	781b      	ldrb	r3, [r3, #0]
}
    5d20:	0018      	movs	r0, r3
    5d22:	46bd      	mov	sp, r7
    5d24:	b008      	add	sp, #32
    5d26:	bd80      	pop	{r7, pc}
    5d28:	20001054 	.word	0x20001054
    5d2c:	000241dc 	.word	0x000241dc
    5d30:	00005ecd 	.word	0x00005ecd
    5d34:	00024dbc 	.word	0x00024dbc
    5d38:	20000fac 	.word	0x20000fac
    5d3c:	20000fc4 	.word	0x20000fc4
    5d40:	20001058 	.word	0x20001058
    5d44:	00004bed 	.word	0x00004bed

00005d48 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
    5d48:	b590      	push	{r4, r7, lr}
    5d4a:	b085      	sub	sp, #20
    5d4c:	af00      	add	r7, sp, #0
    5d4e:	0002      	movs	r2, r0
    5d50:	1dfb      	adds	r3, r7, #7
    5d52:	701a      	strb	r2, [r3, #0]
    5d54:	1dbb      	adds	r3, r7, #6
    5d56:	1c0a      	adds	r2, r1, #0
    5d58:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
    5d5a:	230e      	movs	r3, #14
    5d5c:	18fc      	adds	r4, r7, r3
    5d5e:	1dfb      	adds	r3, r7, #7
    5d60:	781a      	ldrb	r2, [r3, #0]
    5d62:	1dbb      	adds	r3, r7, #6
    5d64:	781b      	ldrb	r3, [r3, #0]
    5d66:	0011      	movs	r1, r2
    5d68:	0018      	movs	r0, r3
    5d6a:	4b09      	ldr	r3, [pc, #36]	; (5d90 <prvMarkObjectAsUsed+0x48>)
    5d6c:	4798      	blx	r3
    5d6e:	0003      	movs	r3, r0
    5d70:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
    5d72:	4b08      	ldr	r3, [pc, #32]	; (5d94 <prvMarkObjectAsUsed+0x4c>)
    5d74:	681a      	ldr	r2, [r3, #0]
    5d76:	230e      	movs	r3, #14
    5d78:	18fb      	adds	r3, r7, r3
    5d7a:	881b      	ldrh	r3, [r3, #0]
    5d7c:	219c      	movs	r1, #156	; 0x9c
    5d7e:	18d3      	adds	r3, r2, r3
    5d80:	185b      	adds	r3, r3, r1
    5d82:	2201      	movs	r2, #1
    5d84:	701a      	strb	r2, [r3, #0]
}
    5d86:	46c0      	nop			; (mov r8, r8)
    5d88:	46bd      	mov	sp, r7
    5d8a:	b005      	add	sp, #20
    5d8c:	bd90      	pop	{r4, r7, pc}
    5d8e:	46c0      	nop			; (mov r8, r8)
    5d90:	00005ad9 	.word	0x00005ad9
    5d94:	20001054 	.word	0x20001054

00005d98 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
    5d98:	b580      	push	{r7, lr}
    5d9a:	b086      	sub	sp, #24
    5d9c:	af00      	add	r7, sp, #0
    5d9e:	60f8      	str	r0, [r7, #12]
    5da0:	60b9      	str	r1, [r7, #8]
    5da2:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
    5da4:	2300      	movs	r3, #0
    5da6:	617b      	str	r3, [r7, #20]
    5da8:	e010      	b.n	5dcc <prvStrncpy+0x34>
	{
		dst[i] = src[i];
    5daa:	68fa      	ldr	r2, [r7, #12]
    5dac:	697b      	ldr	r3, [r7, #20]
    5dae:	18d3      	adds	r3, r2, r3
    5db0:	68b9      	ldr	r1, [r7, #8]
    5db2:	697a      	ldr	r2, [r7, #20]
    5db4:	188a      	adds	r2, r1, r2
    5db6:	7812      	ldrb	r2, [r2, #0]
    5db8:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
    5dba:	68ba      	ldr	r2, [r7, #8]
    5dbc:	697b      	ldr	r3, [r7, #20]
    5dbe:	18d3      	adds	r3, r2, r3
    5dc0:	781b      	ldrb	r3, [r3, #0]
    5dc2:	2b00      	cmp	r3, #0
    5dc4:	d007      	beq.n	5dd6 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
    5dc6:	697b      	ldr	r3, [r7, #20]
    5dc8:	3301      	adds	r3, #1
    5dca:	617b      	str	r3, [r7, #20]
    5dcc:	697a      	ldr	r2, [r7, #20]
    5dce:	687b      	ldr	r3, [r7, #4]
    5dd0:	429a      	cmp	r2, r3
    5dd2:	d3ea      	bcc.n	5daa <prvStrncpy+0x12>
			break;
	}
}
    5dd4:	e000      	b.n	5dd8 <prvStrncpy+0x40>
			break;
    5dd6:	46c0      	nop			; (mov r8, r8)
}
    5dd8:	46c0      	nop			; (mov r8, r8)
    5dda:	46bd      	mov	sp, r7
    5ddc:	b006      	add	sp, #24
    5dde:	bd80      	pop	{r7, pc}

00005de0 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
    5de0:	b580      	push	{r7, lr}
    5de2:	b082      	sub	sp, #8
    5de4:	af00      	add	r7, sp, #0
    5de6:	603a      	str	r2, [r7, #0]
    5de8:	1dfb      	adds	r3, r7, #7
    5dea:	1c02      	adds	r2, r0, #0
    5dec:	701a      	strb	r2, [r3, #0]
    5dee:	1dbb      	adds	r3, r7, #6
    5df0:	1c0a      	adds	r2, r1, #0
    5df2:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    5df4:	683b      	ldr	r3, [r7, #0]
    5df6:	2b00      	cmp	r3, #0
    5df8:	d104      	bne.n	5e04 <prvTraceSetObjectName+0x24>
    5dfa:	4b2a      	ldr	r3, [pc, #168]	; (5ea4 <prvTraceSetObjectName+0xc4>)
    5dfc:	0018      	movs	r0, r3
    5dfe:	4b2a      	ldr	r3, [pc, #168]	; (5ea8 <prvTraceSetObjectName+0xc8>)
    5e00:	4798      	blx	r3
    5e02:	e04b      	b.n	5e9c <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
    5e04:	1dfb      	adds	r3, r7, #7
    5e06:	781b      	ldrb	r3, [r3, #0]
    5e08:	2b08      	cmp	r3, #8
    5e0a:	d904      	bls.n	5e16 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
    5e0c:	4b27      	ldr	r3, [pc, #156]	; (5eac <prvTraceSetObjectName+0xcc>)
    5e0e:	0018      	movs	r0, r3
    5e10:	4b25      	ldr	r3, [pc, #148]	; (5ea8 <prvTraceSetObjectName+0xc8>)
    5e12:	4798      	blx	r3
		return;
    5e14:	e042      	b.n	5e9c <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
    5e16:	1dbb      	adds	r3, r7, #6
    5e18:	781b      	ldrb	r3, [r3, #0]
    5e1a:	2b00      	cmp	r3, #0
    5e1c:	d104      	bne.n	5e28 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
    5e1e:	4b24      	ldr	r3, [pc, #144]	; (5eb0 <prvTraceSetObjectName+0xd0>)
    5e20:	0018      	movs	r0, r3
    5e22:	4b21      	ldr	r3, [pc, #132]	; (5ea8 <prvTraceSetObjectName+0xc8>)
    5e24:	4798      	blx	r3
		return;
    5e26:	e039      	b.n	5e9c <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    5e28:	4b22      	ldr	r3, [pc, #136]	; (5eb4 <prvTraceSetObjectName+0xd4>)
    5e2a:	681a      	ldr	r2, [r3, #0]
    5e2c:	1dfb      	adds	r3, r7, #7
    5e2e:	781b      	ldrb	r3, [r3, #0]
    5e30:	2164      	movs	r1, #100	; 0x64
    5e32:	18d3      	adds	r3, r2, r3
    5e34:	185b      	adds	r3, r3, r1
    5e36:	781b      	ldrb	r3, [r3, #0]
    5e38:	1dba      	adds	r2, r7, #6
    5e3a:	7812      	ldrb	r2, [r2, #0]
    5e3c:	429a      	cmp	r2, r3
    5e3e:	d909      	bls.n	5e54 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    5e40:	1dfb      	adds	r3, r7, #7
    5e42:	781b      	ldrb	r3, [r3, #0]
    5e44:	0018      	movs	r0, r3
    5e46:	4b1c      	ldr	r3, [pc, #112]	; (5eb8 <prvTraceSetObjectName+0xd8>)
    5e48:	4798      	blx	r3
    5e4a:	0003      	movs	r3, r0
    5e4c:	0018      	movs	r0, r3
    5e4e:	4b16      	ldr	r3, [pc, #88]	; (5ea8 <prvTraceSetObjectName+0xc8>)
    5e50:	4798      	blx	r3
    5e52:	e023      	b.n	5e9c <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
    5e54:	1dfb      	adds	r3, r7, #7
    5e56:	781a      	ldrb	r2, [r3, #0]
    5e58:	1dbb      	adds	r3, r7, #6
    5e5a:	781b      	ldrb	r3, [r3, #0]
    5e5c:	0011      	movs	r1, r2
    5e5e:	0018      	movs	r0, r3
    5e60:	4b16      	ldr	r3, [pc, #88]	; (5ebc <prvTraceSetObjectName+0xdc>)
    5e62:	4798      	blx	r3
    5e64:	0003      	movs	r3, r0
    5e66:	001a      	movs	r2, r3
    5e68:	4b15      	ldr	r3, [pc, #84]	; (5ec0 <prvTraceSetObjectName+0xe0>)
    5e6a:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
    5e6c:	4b15      	ldr	r3, [pc, #84]	; (5ec4 <prvTraceSetObjectName+0xe4>)
    5e6e:	681b      	ldr	r3, [r3, #0]
    5e70:	2b00      	cmp	r3, #0
    5e72:	d113      	bne.n	5e9c <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    5e74:	4b0f      	ldr	r3, [pc, #60]	; (5eb4 <prvTraceSetObjectName+0xd4>)
    5e76:	681a      	ldr	r2, [r3, #0]
    5e78:	4b11      	ldr	r3, [pc, #68]	; (5ec0 <prvTraceSetObjectName+0xe0>)
    5e7a:	881b      	ldrh	r3, [r3, #0]
    5e7c:	3398      	adds	r3, #152	; 0x98
    5e7e:	18d3      	adds	r3, r2, r3
    5e80:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    5e82:	4b0c      	ldr	r3, [pc, #48]	; (5eb4 <prvTraceSetObjectName+0xd4>)
    5e84:	681a      	ldr	r2, [r3, #0]
    5e86:	1dfb      	adds	r3, r7, #7
    5e88:	781b      	ldrb	r3, [r3, #0]
    5e8a:	2170      	movs	r1, #112	; 0x70
    5e8c:	18d3      	adds	r3, r2, r3
    5e8e:	185b      	adds	r3, r3, r1
    5e90:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    5e92:	001a      	movs	r2, r3
    5e94:	683b      	ldr	r3, [r7, #0]
    5e96:	0019      	movs	r1, r3
    5e98:	4b0b      	ldr	r3, [pc, #44]	; (5ec8 <prvTraceSetObjectName+0xe8>)
    5e9a:	4798      	blx	r3
		}
	}
}
    5e9c:	46bd      	mov	sp, r7
    5e9e:	b002      	add	sp, #8
    5ea0:	bd80      	pop	{r7, pc}
    5ea2:	46c0      	nop			; (mov r8, r8)
    5ea4:	00024ec0 	.word	0x00024ec0
    5ea8:	00005ecd 	.word	0x00005ecd
    5eac:	00024ef4 	.word	0x00024ef4
    5eb0:	00024f24 	.word	0x00024f24
    5eb4:	20001054 	.word	0x20001054
    5eb8:	00004bed 	.word	0x00004bed
    5ebc:	00005ad9 	.word	0x00005ad9
    5ec0:	2000105c 	.word	0x2000105c
    5ec4:	20000fb4 	.word	0x20000fb4
    5ec8:	00005d99 	.word	0x00005d99

00005ecc <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
    5ecc:	b580      	push	{r7, lr}
    5ece:	b082      	sub	sp, #8
    5ed0:	af00      	add	r7, sp, #0
    5ed2:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
    5ed4:	4b11      	ldr	r3, [pc, #68]	; (5f1c <prvTraceError+0x50>)
    5ed6:	681b      	ldr	r3, [r3, #0]
    5ed8:	2b00      	cmp	r3, #0
    5eda:	d001      	beq.n	5ee0 <prvTraceError+0x14>
	{
		vTraceStop();
    5edc:	4b10      	ldr	r3, [pc, #64]	; (5f20 <prvTraceError+0x54>)
    5ede:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
    5ee0:	4b10      	ldr	r3, [pc, #64]	; (5f24 <prvTraceError+0x58>)
    5ee2:	681b      	ldr	r3, [r3, #0]
    5ee4:	2b00      	cmp	r3, #0
    5ee6:	d115      	bne.n	5f14 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
    5ee8:	4b0e      	ldr	r3, [pc, #56]	; (5f24 <prvTraceError+0x58>)
    5eea:	687a      	ldr	r2, [r7, #4]
    5eec:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
    5eee:	4b0b      	ldr	r3, [pc, #44]	; (5f1c <prvTraceError+0x50>)
    5ef0:	681b      	ldr	r3, [r3, #0]
    5ef2:	2b00      	cmp	r3, #0
    5ef4:	d00e      	beq.n	5f14 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    5ef6:	4b09      	ldr	r3, [pc, #36]	; (5f1c <prvTraceError+0x50>)
    5ef8:	681b      	ldr	r3, [r3, #0]
    5efa:	4a0b      	ldr	r2, [pc, #44]	; (5f28 <prvTraceError+0x5c>)
    5efc:	1898      	adds	r0, r3, r2
    5efe:	4b09      	ldr	r3, [pc, #36]	; (5f24 <prvTraceError+0x58>)
    5f00:	681b      	ldr	r3, [r3, #0]
    5f02:	2250      	movs	r2, #80	; 0x50
    5f04:	0019      	movs	r1, r3
    5f06:	4b09      	ldr	r3, [pc, #36]	; (5f2c <prvTraceError+0x60>)
    5f08:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
    5f0a:	4b04      	ldr	r3, [pc, #16]	; (5f1c <prvTraceError+0x50>)
    5f0c:	681b      	ldr	r3, [r3, #0]
    5f0e:	4a08      	ldr	r2, [pc, #32]	; (5f30 <prvTraceError+0x64>)
    5f10:	2101      	movs	r1, #1
    5f12:	5099      	str	r1, [r3, r2]
		}
	}
}
    5f14:	46c0      	nop			; (mov r8, r8)
    5f16:	46bd      	mov	sp, r7
    5f18:	b002      	add	sp, #8
    5f1a:	bd80      	pop	{r7, pc}
    5f1c:	20001054 	.word	0x20001054
    5f20:	00004d91 	.word	0x00004d91
    5f24:	20000fb4 	.word	0x20000fb4
    5f28:	000006bc 	.word	0x000006bc
    5f2c:	00005d99 	.word	0x00005d99
    5f30:	000006b4 	.word	0x000006b4

00005f34 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    5f34:	b580      	push	{r7, lr}
    5f36:	b086      	sub	sp, #24
    5f38:	af00      	add	r7, sp, #0
    5f3a:	0002      	movs	r2, r0
    5f3c:	1dfb      	adds	r3, r7, #7
    5f3e:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
    5f40:	2300      	movs	r3, #0
    5f42:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
    5f44:	2300      	movs	r3, #0
    5f46:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    5f48:	1dfb      	adds	r3, r7, #7
    5f4a:	781b      	ldrb	r3, [r3, #0]
    5f4c:	2b00      	cmp	r3, #0
    5f4e:	d000      	beq.n	5f52 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
    5f50:	e089      	b.n	6066 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
    5f52:	4b49      	ldr	r3, [pc, #292]	; (6078 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
    5f54:	0018      	movs	r0, r3
    5f56:	4b49      	ldr	r3, [pc, #292]	; (607c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
    5f58:	4798      	blx	r3
    5f5a:	e08a      	b.n	6072 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    5f5c:	4b48      	ldr	r3, [pc, #288]	; (6080 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    5f5e:	681b      	ldr	r3, [r3, #0]
    5f60:	69da      	ldr	r2, [r3, #28]
    5f62:	697b      	ldr	r3, [r7, #20]
    5f64:	18d3      	adds	r3, r2, r3
    5f66:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    5f68:	4b45      	ldr	r3, [pc, #276]	; (6080 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    5f6a:	6819      	ldr	r1, [r3, #0]
    5f6c:	693b      	ldr	r3, [r7, #16]
    5f6e:	009a      	lsls	r2, r3, #2
    5f70:	23e2      	movs	r3, #226	; 0xe2
    5f72:	00db      	lsls	r3, r3, #3
    5f74:	188a      	adds	r2, r1, r2
    5f76:	18d3      	adds	r3, r2, r3
    5f78:	781b      	ldrb	r3, [r3, #0]
    5f7a:	2b98      	cmp	r3, #152	; 0x98
    5f7c:	d934      	bls.n	5fe8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
    5f7e:	4b40      	ldr	r3, [pc, #256]	; (6080 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    5f80:	6819      	ldr	r1, [r3, #0]
    5f82:	693b      	ldr	r3, [r7, #16]
    5f84:	009a      	lsls	r2, r3, #2
    5f86:	23e2      	movs	r3, #226	; 0xe2
    5f88:	00db      	lsls	r3, r3, #3
    5f8a:	188a      	adds	r2, r1, r2
    5f8c:	18d3      	adds	r3, r2, r3
    5f8e:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    5f90:	2ba7      	cmp	r3, #167	; 0xa7
    5f92:	d829      	bhi.n	5fe8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    5f94:	4b3a      	ldr	r3, [pc, #232]	; (6080 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    5f96:	6819      	ldr	r1, [r3, #0]
    5f98:	693b      	ldr	r3, [r7, #16]
    5f9a:	009a      	lsls	r2, r3, #2
    5f9c:	23e2      	movs	r3, #226	; 0xe2
    5f9e:	00db      	lsls	r3, r3, #3
    5fa0:	188a      	adds	r2, r1, r2
    5fa2:	18d3      	adds	r3, r2, r3
    5fa4:	781a      	ldrb	r2, [r3, #0]
    5fa6:	230f      	movs	r3, #15
    5fa8:	18fb      	adds	r3, r7, r3
    5faa:	3268      	adds	r2, #104	; 0x68
    5fac:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    5fae:	230f      	movs	r3, #15
    5fb0:	18fb      	adds	r3, r7, r3
    5fb2:	781a      	ldrb	r2, [r3, #0]
    5fb4:	693b      	ldr	r3, [r7, #16]
    5fb6:	18d2      	adds	r2, r2, r3
    5fb8:	4b31      	ldr	r3, [pc, #196]	; (6080 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    5fba:	681b      	ldr	r3, [r3, #0]
    5fbc:	699b      	ldr	r3, [r3, #24]
    5fbe:	429a      	cmp	r2, r3
    5fc0:	d24d      	bcs.n	605e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
    5fc2:	4b2f      	ldr	r3, [pc, #188]	; (6080 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    5fc4:	681a      	ldr	r2, [r3, #0]
    5fc6:	693b      	ldr	r3, [r7, #16]
    5fc8:	009b      	lsls	r3, r3, #2
    5fca:	21e2      	movs	r1, #226	; 0xe2
    5fcc:	00c9      	lsls	r1, r1, #3
    5fce:	468c      	mov	ip, r1
    5fd0:	4463      	add	r3, ip
    5fd2:	18d0      	adds	r0, r2, r3
    5fd4:	230f      	movs	r3, #15
    5fd6:	18fb      	adds	r3, r7, r3
    5fd8:	781b      	ldrb	r3, [r3, #0]
    5fda:	3301      	adds	r3, #1
    5fdc:	009b      	lsls	r3, r3, #2
    5fde:	001a      	movs	r2, r3
    5fe0:	2100      	movs	r1, #0
    5fe2:	4b28      	ldr	r3, [pc, #160]	; (6084 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    5fe4:	4798      	blx	r3
		{
    5fe6:	e03a      	b.n	605e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    5fe8:	4b25      	ldr	r3, [pc, #148]	; (6080 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    5fea:	6819      	ldr	r1, [r3, #0]
    5fec:	693b      	ldr	r3, [r7, #16]
    5fee:	009a      	lsls	r2, r3, #2
    5ff0:	23e2      	movs	r3, #226	; 0xe2
    5ff2:	00db      	lsls	r3, r3, #3
    5ff4:	188a      	adds	r2, r1, r2
    5ff6:	18d3      	adds	r3, r2, r3
    5ff8:	781b      	ldrb	r3, [r3, #0]
    5ffa:	2b01      	cmp	r3, #1
    5ffc:	d130      	bne.n	6060 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
    5ffe:	693b      	ldr	r3, [r7, #16]
    6000:	1c5a      	adds	r2, r3, #1
    6002:	4b1f      	ldr	r3, [pc, #124]	; (6080 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    6004:	681b      	ldr	r3, [r3, #0]
    6006:	699b      	ldr	r3, [r3, #24]
    6008:	429a      	cmp	r2, r3
    600a:	d20e      	bcs.n	602a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    600c:	4b1c      	ldr	r3, [pc, #112]	; (6080 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    600e:	681a      	ldr	r2, [r3, #0]
    6010:	693b      	ldr	r3, [r7, #16]
    6012:	009b      	lsls	r3, r3, #2
    6014:	21e2      	movs	r1, #226	; 0xe2
    6016:	00c9      	lsls	r1, r1, #3
    6018:	468c      	mov	ip, r1
    601a:	4463      	add	r3, ip
    601c:	18d3      	adds	r3, r2, r3
    601e:	2208      	movs	r2, #8
    6020:	2100      	movs	r1, #0
    6022:	0018      	movs	r0, r3
    6024:	4b17      	ldr	r3, [pc, #92]	; (6084 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    6026:	4798      	blx	r3
    6028:	e01a      	b.n	6060 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    602a:	4b15      	ldr	r3, [pc, #84]	; (6080 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    602c:	681b      	ldr	r3, [r3, #0]
    602e:	22e2      	movs	r2, #226	; 0xe2
    6030:	00d2      	lsls	r2, r2, #3
    6032:	4694      	mov	ip, r2
    6034:	4463      	add	r3, ip
    6036:	2204      	movs	r2, #4
    6038:	2100      	movs	r1, #0
    603a:	0018      	movs	r0, r3
    603c:	4b11      	ldr	r3, [pc, #68]	; (6084 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    603e:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    6040:	4b0f      	ldr	r3, [pc, #60]	; (6080 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    6042:	681a      	ldr	r2, [r3, #0]
    6044:	693b      	ldr	r3, [r7, #16]
    6046:	009b      	lsls	r3, r3, #2
    6048:	21e2      	movs	r1, #226	; 0xe2
    604a:	00c9      	lsls	r1, r1, #3
    604c:	468c      	mov	ip, r1
    604e:	4463      	add	r3, ip
    6050:	18d3      	adds	r3, r2, r3
    6052:	2204      	movs	r2, #4
    6054:	2100      	movs	r1, #0
    6056:	0018      	movs	r0, r3
    6058:	4b0a      	ldr	r3, [pc, #40]	; (6084 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    605a:	4798      	blx	r3
    605c:	e000      	b.n	6060 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
    605e:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
    6060:	697b      	ldr	r3, [r7, #20]
    6062:	3301      	adds	r3, #1
    6064:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
    6066:	1dfb      	adds	r3, r7, #7
    6068:	781a      	ldrb	r2, [r3, #0]
    606a:	697b      	ldr	r3, [r7, #20]
    606c:	429a      	cmp	r2, r3
    606e:	d900      	bls.n	6072 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
    6070:	e774      	b.n	5f5c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
    6072:	46bd      	mov	sp, r7
    6074:	b006      	add	sp, #24
    6076:	bd80      	pop	{r7, pc}
    6078:	00024f84 	.word	0x00024f84
    607c:	00005ecd 	.word	0x00005ecd
    6080:	20001054 	.word	0x20001054
    6084:	00020d8b 	.word	0x00020d8b

00006088 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    6088:	b580      	push	{r7, lr}
    608a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
    608c:	4b12      	ldr	r3, [pc, #72]	; (60d8 <prvTraceUpdateCounters+0x50>)
    608e:	681b      	ldr	r3, [r3, #0]
    6090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6092:	2b00      	cmp	r3, #0
    6094:	d01c      	beq.n	60d0 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    6096:	4b10      	ldr	r3, [pc, #64]	; (60d8 <prvTraceUpdateCounters+0x50>)
    6098:	681b      	ldr	r3, [r3, #0]
    609a:	695a      	ldr	r2, [r3, #20]
    609c:	3201      	adds	r2, #1
    609e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    60a0:	4b0d      	ldr	r3, [pc, #52]	; (60d8 <prvTraceUpdateCounters+0x50>)
    60a2:	681b      	ldr	r3, [r3, #0]
    60a4:	69da      	ldr	r2, [r3, #28]
    60a6:	3201      	adds	r2, #1
    60a8:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    60aa:	4b0b      	ldr	r3, [pc, #44]	; (60d8 <prvTraceUpdateCounters+0x50>)
    60ac:	681b      	ldr	r3, [r3, #0]
    60ae:	69da      	ldr	r2, [r3, #28]
    60b0:	232c      	movs	r3, #44	; 0x2c
    60b2:	33ff      	adds	r3, #255	; 0xff
    60b4:	429a      	cmp	r2, r3
    60b6:	d907      	bls.n	60c8 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    60b8:	4b07      	ldr	r3, [pc, #28]	; (60d8 <prvTraceUpdateCounters+0x50>)
    60ba:	681b      	ldr	r3, [r3, #0]
    60bc:	2201      	movs	r2, #1
    60be:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    60c0:	4b05      	ldr	r3, [pc, #20]	; (60d8 <prvTraceUpdateCounters+0x50>)
    60c2:	681b      	ldr	r3, [r3, #0]
    60c4:	2200      	movs	r2, #0
    60c6:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    60c8:	2001      	movs	r0, #1
    60ca:	4b04      	ldr	r3, [pc, #16]	; (60dc <prvTraceUpdateCounters+0x54>)
    60cc:	4798      	blx	r3
    60ce:	e000      	b.n	60d2 <prvTraceUpdateCounters+0x4a>
		return;
    60d0:	46c0      	nop			; (mov r8, r8)
#endif
}
    60d2:	46bd      	mov	sp, r7
    60d4:	bd80      	pop	{r7, pc}
    60d6:	46c0      	nop			; (mov r8, r8)
    60d8:	20001054 	.word	0x20001054
    60dc:	00005f35 	.word	0x00005f35

000060e0 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
    60e0:	b5b0      	push	{r4, r5, r7, lr}
    60e2:	b086      	sub	sp, #24
    60e4:	af00      	add	r7, sp, #0
    60e6:	0002      	movs	r2, r0
    60e8:	1dbb      	adds	r3, r7, #6
    60ea:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
    60ec:	2300      	movs	r3, #0
    60ee:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
    60f0:	2300      	movs	r3, #0
    60f2:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
    60f4:	2300      	movs	r3, #0
    60f6:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    60f8:	1dbb      	adds	r3, r7, #6
    60fa:	881b      	ldrh	r3, [r3, #0]
    60fc:	2bff      	cmp	r3, #255	; 0xff
    60fe:	d00a      	beq.n	6116 <prvTraceGetDTS+0x36>
    6100:	1dbb      	adds	r3, r7, #6
    6102:	881b      	ldrh	r3, [r3, #0]
    6104:	4a60      	ldr	r2, [pc, #384]	; (6288 <prvTraceGetDTS+0x1a8>)
    6106:	4293      	cmp	r3, r2
    6108:	d005      	beq.n	6116 <prvTraceGetDTS+0x36>
    610a:	4b60      	ldr	r3, [pc, #384]	; (628c <prvTraceGetDTS+0x1ac>)
    610c:	0018      	movs	r0, r3
    610e:	4b60      	ldr	r3, [pc, #384]	; (6290 <prvTraceGetDTS+0x1b0>)
    6110:	4798      	blx	r3
    6112:	2300      	movs	r3, #0
    6114:	e0b3      	b.n	627e <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
    6116:	4b5f      	ldr	r3, [pc, #380]	; (6294 <prvTraceGetDTS+0x1b4>)
    6118:	681b      	ldr	r3, [r3, #0]
    611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    611c:	2b00      	cmp	r3, #0
    611e:	d118      	bne.n	6152 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
    6120:	4b5d      	ldr	r3, [pc, #372]	; (6298 <prvTraceGetDTS+0x1b8>)
    6122:	681b      	ldr	r3, [r3, #0]
    6124:	2b00      	cmp	r3, #0
    6126:	d006      	beq.n	6136 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
    6128:	4b5a      	ldr	r3, [pc, #360]	; (6294 <prvTraceGetDTS+0x1b4>)
    612a:	681b      	ldr	r3, [r3, #0]
    612c:	4a5a      	ldr	r2, [pc, #360]	; (6298 <prvTraceGetDTS+0x1b8>)
    612e:	6812      	ldr	r2, [r2, #0]
    6130:	0892      	lsrs	r2, r2, #2
    6132:	625a      	str	r2, [r3, #36]	; 0x24
    6134:	e00d      	b.n	6152 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
    6136:	4b59      	ldr	r3, [pc, #356]	; (629c <prvTraceGetDTS+0x1bc>)
    6138:	681a      	ldr	r2, [r3, #0]
    613a:	4b59      	ldr	r3, [pc, #356]	; (62a0 <prvTraceGetDTS+0x1c0>)
    613c:	681b      	ldr	r3, [r3, #0]
    613e:	429a      	cmp	r2, r3
    6140:	d007      	beq.n	6152 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
    6142:	4b54      	ldr	r3, [pc, #336]	; (6294 <prvTraceGetDTS+0x1b4>)
    6144:	681c      	ldr	r4, [r3, #0]
    6146:	2000      	movs	r0, #0
    6148:	4b56      	ldr	r3, [pc, #344]	; (62a4 <prvTraceGetDTS+0x1c4>)
    614a:	4798      	blx	r3
    614c:	0003      	movs	r3, r0
    614e:	089b      	lsrs	r3, r3, #2
    6150:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
    6152:	230c      	movs	r3, #12
    6154:	18fb      	adds	r3, r7, r3
    6156:	0018      	movs	r0, r3
    6158:	4b53      	ldr	r3, [pc, #332]	; (62a8 <prvTraceGetDTS+0x1c8>)
    615a:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
    615c:	68fa      	ldr	r2, [r7, #12]
    615e:	4b53      	ldr	r3, [pc, #332]	; (62ac <prvTraceGetDTS+0x1cc>)
    6160:	681b      	ldr	r3, [r3, #0]
    6162:	1ad3      	subs	r3, r2, r3
    6164:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
    6166:	68fa      	ldr	r2, [r7, #12]
    6168:	4b50      	ldr	r3, [pc, #320]	; (62ac <prvTraceGetDTS+0x1cc>)
    616a:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
    616c:	4b49      	ldr	r3, [pc, #292]	; (6294 <prvTraceGetDTS+0x1b4>)
    616e:	681b      	ldr	r3, [r3, #0]
    6170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6172:	2b00      	cmp	r3, #0
    6174:	d044      	beq.n	6200 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
    6176:	4b47      	ldr	r3, [pc, #284]	; (6294 <prvTraceGetDTS+0x1b4>)
    6178:	681b      	ldr	r3, [r3, #0]
    617a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    617c:	693b      	ldr	r3, [r7, #16]
    617e:	429a      	cmp	r2, r3
    6180:	d21e      	bcs.n	61c0 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    6182:	4b44      	ldr	r3, [pc, #272]	; (6294 <prvTraceGetDTS+0x1b4>)
    6184:	681c      	ldr	r4, [r3, #0]
    6186:	4b43      	ldr	r3, [pc, #268]	; (6294 <prvTraceGetDTS+0x1b4>)
    6188:	681b      	ldr	r3, [r3, #0]
    618a:	6add      	ldr	r5, [r3, #44]	; 0x2c
    618c:	4b41      	ldr	r3, [pc, #260]	; (6294 <prvTraceGetDTS+0x1b4>)
    618e:	681b      	ldr	r3, [r3, #0]
    6190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6192:	4b47      	ldr	r3, [pc, #284]	; (62b0 <prvTraceGetDTS+0x1d0>)
    6194:	0011      	movs	r1, r2
    6196:	6938      	ldr	r0, [r7, #16]
    6198:	4798      	blx	r3
    619a:	0003      	movs	r3, r0
    619c:	18eb      	adds	r3, r5, r3
    619e:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    61a0:	4b3c      	ldr	r3, [pc, #240]	; (6294 <prvTraceGetDTS+0x1b4>)
    61a2:	681c      	ldr	r4, [r3, #0]
    61a4:	4b3b      	ldr	r3, [pc, #236]	; (6294 <prvTraceGetDTS+0x1b4>)
    61a6:	681b      	ldr	r3, [r3, #0]
    61a8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    61aa:	4b3a      	ldr	r3, [pc, #232]	; (6294 <prvTraceGetDTS+0x1b4>)
    61ac:	681b      	ldr	r3, [r3, #0]
    61ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
    61b0:	693a      	ldr	r2, [r7, #16]
    61b2:	4b40      	ldr	r3, [pc, #256]	; (62b4 <prvTraceGetDTS+0x1d4>)
    61b4:	0010      	movs	r0, r2
    61b6:	4798      	blx	r3
    61b8:	000b      	movs	r3, r1
    61ba:	18eb      	adds	r3, r5, r3
    61bc:	62a3      	str	r3, [r4, #40]	; 0x28
    61be:	e007      	b.n	61d0 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
    61c0:	4b34      	ldr	r3, [pc, #208]	; (6294 <prvTraceGetDTS+0x1b4>)
    61c2:	681b      	ldr	r3, [r3, #0]
    61c4:	4a33      	ldr	r2, [pc, #204]	; (6294 <prvTraceGetDTS+0x1b4>)
    61c6:	6812      	ldr	r2, [r2, #0]
    61c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
    61ca:	693a      	ldr	r2, [r7, #16]
    61cc:	188a      	adds	r2, r1, r2
    61ce:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    61d0:	4b30      	ldr	r3, [pc, #192]	; (6294 <prvTraceGetDTS+0x1b4>)
    61d2:	681b      	ldr	r3, [r3, #0]
    61d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    61d6:	4b2f      	ldr	r3, [pc, #188]	; (6294 <prvTraceGetDTS+0x1b4>)
    61d8:	681b      	ldr	r3, [r3, #0]
    61da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    61dc:	429a      	cmp	r2, r3
    61de:	d313      	bcc.n	6208 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
    61e0:	4b2c      	ldr	r3, [pc, #176]	; (6294 <prvTraceGetDTS+0x1b4>)
    61e2:	681b      	ldr	r3, [r3, #0]
    61e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    61e6:	3201      	adds	r2, #1
    61e8:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    61ea:	4b2a      	ldr	r3, [pc, #168]	; (6294 <prvTraceGetDTS+0x1b4>)
    61ec:	681b      	ldr	r3, [r3, #0]
    61ee:	4a29      	ldr	r2, [pc, #164]	; (6294 <prvTraceGetDTS+0x1b4>)
    61f0:	6812      	ldr	r2, [r2, #0]
    61f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
    61f4:	4a27      	ldr	r2, [pc, #156]	; (6294 <prvTraceGetDTS+0x1b4>)
    61f6:	6812      	ldr	r2, [r2, #0]
    61f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    61fa:	1a8a      	subs	r2, r1, r2
    61fc:	629a      	str	r2, [r3, #40]	; 0x28
    61fe:	e003      	b.n	6208 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
    6200:	4b24      	ldr	r3, [pc, #144]	; (6294 <prvTraceGetDTS+0x1b4>)
    6202:	681b      	ldr	r3, [r3, #0]
    6204:	68fa      	ldr	r2, [r7, #12]
    6206:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
    6208:	1dbb      	adds	r3, r7, #6
    620a:	881a      	ldrh	r2, [r3, #0]
    620c:	693b      	ldr	r3, [r7, #16]
    620e:	429a      	cmp	r2, r3
    6210:	d22f      	bcs.n	6272 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
    6212:	4b29      	ldr	r3, [pc, #164]	; (62b8 <prvTraceGetDTS+0x1d8>)
    6214:	4798      	blx	r3
    6216:	0003      	movs	r3, r0
    6218:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
    621a:	697b      	ldr	r3, [r7, #20]
    621c:	2b00      	cmp	r3, #0
    621e:	d028      	beq.n	6272 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
    6220:	1dbb      	adds	r3, r7, #6
    6222:	881b      	ldrh	r3, [r3, #0]
    6224:	4a18      	ldr	r2, [pc, #96]	; (6288 <prvTraceGetDTS+0x1a8>)
    6226:	4293      	cmp	r3, r2
    6228:	d10b      	bne.n	6242 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
    622a:	697b      	ldr	r3, [r7, #20]
    622c:	22a9      	movs	r2, #169	; 0xa9
    622e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    6230:	693b      	ldr	r3, [r7, #16]
    6232:	0c1b      	lsrs	r3, r3, #16
    6234:	b29a      	uxth	r2, r3
    6236:	697b      	ldr	r3, [r7, #20]
    6238:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
    623a:	697b      	ldr	r3, [r7, #20]
    623c:	2200      	movs	r2, #0
    623e:	705a      	strb	r2, [r3, #1]
    6240:	e015      	b.n	626e <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
    6242:	1dbb      	adds	r3, r7, #6
    6244:	881b      	ldrh	r3, [r3, #0]
    6246:	2bff      	cmp	r3, #255	; 0xff
    6248:	d10d      	bne.n	6266 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
    624a:	697b      	ldr	r3, [r7, #20]
    624c:	22a8      	movs	r2, #168	; 0xa8
    624e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    6250:	693b      	ldr	r3, [r7, #16]
    6252:	0a1b      	lsrs	r3, r3, #8
    6254:	b29a      	uxth	r2, r3
    6256:	697b      	ldr	r3, [r7, #20]
    6258:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    625a:	693b      	ldr	r3, [r7, #16]
    625c:	0e1b      	lsrs	r3, r3, #24
    625e:	b2da      	uxtb	r2, r3
    6260:	697b      	ldr	r3, [r7, #20]
    6262:	705a      	strb	r2, [r3, #1]
    6264:	e003      	b.n	626e <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
    6266:	4b15      	ldr	r3, [pc, #84]	; (62bc <prvTraceGetDTS+0x1dc>)
    6268:	0018      	movs	r0, r3
    626a:	4b09      	ldr	r3, [pc, #36]	; (6290 <prvTraceGetDTS+0x1b0>)
    626c:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
    626e:	4b14      	ldr	r3, [pc, #80]	; (62c0 <prvTraceGetDTS+0x1e0>)
    6270:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
    6272:	693b      	ldr	r3, [r7, #16]
    6274:	b29b      	uxth	r3, r3
    6276:	1dba      	adds	r2, r7, #6
    6278:	8812      	ldrh	r2, [r2, #0]
    627a:	4013      	ands	r3, r2
    627c:	b29b      	uxth	r3, r3
}
    627e:	0018      	movs	r0, r3
    6280:	46bd      	mov	sp, r7
    6282:	b006      	add	sp, #24
    6284:	bdb0      	pop	{r4, r5, r7, pc}
    6286:	46c0      	nop			; (mov r8, r8)
    6288:	0000ffff 	.word	0x0000ffff
    628c:	00024fdc 	.word	0x00024fdc
    6290:	00005ecd 	.word	0x00005ecd
    6294:	20001054 	.word	0x20001054
    6298:	20000fb0 	.word	0x20000fb0
    629c:	e000e018 	.word	0xe000e018
    62a0:	200053d0 	.word	0x200053d0
    62a4:	00016285 	.word	0x00016285
    62a8:	000062c5 	.word	0x000062c5
    62ac:	20001060 	.word	0x20001060
    62b0:	0001f0d1 	.word	0x0001f0d1
    62b4:	0001f1dd 	.word	0x0001f1dd
    62b8:	00005a85 	.word	0x00005a85
    62bc:	0002501c 	.word	0x0002501c
    62c0:	00006089 	.word	0x00006089

000062c4 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    62c4:	b580      	push	{r7, lr}
    62c6:	b084      	sub	sp, #16
    62c8:	af00      	add	r7, sp, #0
    62ca:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
    62cc:	2300      	movs	r3, #0
    62ce:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
    62d0:	2300      	movs	r3, #0
    62d2:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
    62d4:	4b2d      	ldr	r3, [pc, #180]	; (638c <prvTracePortGetTimeStamp+0xc8>)
    62d6:	681b      	ldr	r3, [r3, #0]
    62d8:	2b01      	cmp	r3, #1
    62da:	d107      	bne.n	62ec <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
    62dc:	687b      	ldr	r3, [r7, #4]
    62de:	2b00      	cmp	r3, #0
    62e0:	d04f      	beq.n	6382 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
    62e2:	4b2b      	ldr	r3, [pc, #172]	; (6390 <prvTracePortGetTimeStamp+0xcc>)
    62e4:	681a      	ldr	r2, [r3, #0]
    62e6:	687b      	ldr	r3, [r7, #4]
    62e8:	601a      	str	r2, [r3, #0]
		return;
    62ea:	e04a      	b.n	6382 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
    62ec:	4b29      	ldr	r3, [pc, #164]	; (6394 <prvTracePortGetTimeStamp+0xd0>)
    62ee:	681a      	ldr	r2, [r3, #0]
    62f0:	4b29      	ldr	r3, [pc, #164]	; (6398 <prvTracePortGetTimeStamp+0xd4>)
    62f2:	681b      	ldr	r3, [r3, #0]
    62f4:	1ad3      	subs	r3, r2, r3
    62f6:	3301      	adds	r3, #1
    62f8:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    62fa:	4b28      	ldr	r3, [pc, #160]	; (639c <prvTracePortGetTimeStamp+0xd8>)
    62fc:	681a      	ldr	r2, [r3, #0]
    62fe:	4b28      	ldr	r3, [pc, #160]	; (63a0 <prvTracePortGetTimeStamp+0xdc>)
    6300:	681b      	ldr	r3, [r3, #0]
    6302:	1ad3      	subs	r3, r2, r3
    6304:	3b01      	subs	r3, #1
    6306:	2b00      	cmp	r3, #0
    6308:	db03      	blt.n	6312 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
    630a:	4b24      	ldr	r3, [pc, #144]	; (639c <prvTracePortGetTimeStamp+0xd8>)
    630c:	681b      	ldr	r3, [r3, #0]
    630e:	60fb      	str	r3, [r7, #12]
    6310:	e002      	b.n	6318 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
    6312:	4b23      	ldr	r3, [pc, #140]	; (63a0 <prvTracePortGetTimeStamp+0xdc>)
    6314:	681b      	ldr	r3, [r3, #0]
    6316:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    6318:	4b20      	ldr	r3, [pc, #128]	; (639c <prvTracePortGetTimeStamp+0xd8>)
    631a:	681b      	ldr	r3, [r3, #0]
    631c:	68fa      	ldr	r2, [r7, #12]
    631e:	429a      	cmp	r2, r3
    6320:	d107      	bne.n	6332 <prvTracePortGetTimeStamp+0x6e>
    6322:	4b20      	ldr	r3, [pc, #128]	; (63a4 <prvTracePortGetTimeStamp+0xe0>)
    6324:	681b      	ldr	r3, [r3, #0]
    6326:	68ba      	ldr	r2, [r7, #8]
    6328:	429a      	cmp	r2, r3
    632a:	d202      	bcs.n	6332 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    632c:	68fb      	ldr	r3, [r7, #12]
    632e:	3301      	adds	r3, #1
    6330:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    6332:	687b      	ldr	r3, [r7, #4]
    6334:	2b00      	cmp	r3, #0
    6336:	d016      	beq.n	6366 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
    6338:	4b16      	ldr	r3, [pc, #88]	; (6394 <prvTracePortGetTimeStamp+0xd0>)
    633a:	681b      	ldr	r3, [r3, #0]
    633c:	3301      	adds	r3, #1
    633e:	089b      	lsrs	r3, r3, #2
    6340:	68fa      	ldr	r2, [r7, #12]
    6342:	435a      	muls	r2, r3
    6344:	4b12      	ldr	r3, [pc, #72]	; (6390 <prvTracePortGetTimeStamp+0xcc>)
    6346:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
    6348:	4b12      	ldr	r3, [pc, #72]	; (6394 <prvTracePortGetTimeStamp+0xd0>)
    634a:	681b      	ldr	r3, [r3, #0]
    634c:	3301      	adds	r3, #1
    634e:	2203      	movs	r2, #3
    6350:	4013      	ands	r3, r2
    6352:	68fa      	ldr	r2, [r7, #12]
    6354:	435a      	muls	r2, r3
    6356:	68bb      	ldr	r3, [r7, #8]
    6358:	18d3      	adds	r3, r2, r3
    635a:	089a      	lsrs	r2, r3, #2
    635c:	4b0c      	ldr	r3, [pc, #48]	; (6390 <prvTracePortGetTimeStamp+0xcc>)
    635e:	681b      	ldr	r3, [r3, #0]
    6360:	18d2      	adds	r2, r2, r3
    6362:	4b0b      	ldr	r3, [pc, #44]	; (6390 <prvTracePortGetTimeStamp+0xcc>)
    6364:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
    6366:	4b0d      	ldr	r3, [pc, #52]	; (639c <prvTracePortGetTimeStamp+0xd8>)
    6368:	68fa      	ldr	r2, [r7, #12]
    636a:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
    636c:	687b      	ldr	r3, [r7, #4]
    636e:	2b00      	cmp	r3, #0
    6370:	d003      	beq.n	637a <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
    6372:	4b07      	ldr	r3, [pc, #28]	; (6390 <prvTracePortGetTimeStamp+0xcc>)
    6374:	681a      	ldr	r2, [r3, #0]
    6376:	687b      	ldr	r3, [r7, #4]
    6378:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
    637a:	4b0a      	ldr	r3, [pc, #40]	; (63a4 <prvTracePortGetTimeStamp+0xe0>)
    637c:	68ba      	ldr	r2, [r7, #8]
    637e:	601a      	str	r2, [r3, #0]
    6380:	e000      	b.n	6384 <prvTracePortGetTimeStamp+0xc0>
		return;
    6382:	46c0      	nop			; (mov r8, r8)
}
    6384:	46bd      	mov	sp, r7
    6386:	b004      	add	sp, #16
    6388:	bd80      	pop	{r7, pc}
    638a:	46c0      	nop			; (mov r8, r8)
    638c:	20000fa0 	.word	0x20000fa0
    6390:	20000fa4 	.word	0x20000fa4
    6394:	e000e014 	.word	0xe000e014
    6398:	e000e018 	.word	0xe000e018
    639c:	20001064 	.word	0x20001064
    63a0:	20000f9c 	.word	0x20000f9c
    63a4:	20001068 	.word	0x20001068

000063a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    63a8:	b580      	push	{r7, lr}
    63aa:	b082      	sub	sp, #8
    63ac:	af00      	add	r7, sp, #0
    63ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    63b0:	687b      	ldr	r3, [r7, #4]
    63b2:	3308      	adds	r3, #8
    63b4:	001a      	movs	r2, r3
    63b6:	687b      	ldr	r3, [r7, #4]
    63b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    63ba:	687b      	ldr	r3, [r7, #4]
    63bc:	2201      	movs	r2, #1
    63be:	4252      	negs	r2, r2
    63c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    63c2:	687b      	ldr	r3, [r7, #4]
    63c4:	3308      	adds	r3, #8
    63c6:	001a      	movs	r2, r3
    63c8:	687b      	ldr	r3, [r7, #4]
    63ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    63cc:	687b      	ldr	r3, [r7, #4]
    63ce:	3308      	adds	r3, #8
    63d0:	001a      	movs	r2, r3
    63d2:	687b      	ldr	r3, [r7, #4]
    63d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    63d6:	687b      	ldr	r3, [r7, #4]
    63d8:	2200      	movs	r2, #0
    63da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    63dc:	46c0      	nop			; (mov r8, r8)
    63de:	46bd      	mov	sp, r7
    63e0:	b002      	add	sp, #8
    63e2:	bd80      	pop	{r7, pc}

000063e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    63e4:	b580      	push	{r7, lr}
    63e6:	b082      	sub	sp, #8
    63e8:	af00      	add	r7, sp, #0
    63ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    63ec:	687b      	ldr	r3, [r7, #4]
    63ee:	2200      	movs	r2, #0
    63f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    63f2:	46c0      	nop			; (mov r8, r8)
    63f4:	46bd      	mov	sp, r7
    63f6:	b002      	add	sp, #8
    63f8:	bd80      	pop	{r7, pc}

000063fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    63fa:	b580      	push	{r7, lr}
    63fc:	b084      	sub	sp, #16
    63fe:	af00      	add	r7, sp, #0
    6400:	6078      	str	r0, [r7, #4]
    6402:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    6404:	687b      	ldr	r3, [r7, #4]
    6406:	685b      	ldr	r3, [r3, #4]
    6408:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    640a:	683b      	ldr	r3, [r7, #0]
    640c:	68fa      	ldr	r2, [r7, #12]
    640e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    6410:	68fb      	ldr	r3, [r7, #12]
    6412:	689a      	ldr	r2, [r3, #8]
    6414:	683b      	ldr	r3, [r7, #0]
    6416:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    6418:	68fb      	ldr	r3, [r7, #12]
    641a:	689b      	ldr	r3, [r3, #8]
    641c:	683a      	ldr	r2, [r7, #0]
    641e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    6420:	68fb      	ldr	r3, [r7, #12]
    6422:	683a      	ldr	r2, [r7, #0]
    6424:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    6426:	683b      	ldr	r3, [r7, #0]
    6428:	687a      	ldr	r2, [r7, #4]
    642a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    642c:	687b      	ldr	r3, [r7, #4]
    642e:	681b      	ldr	r3, [r3, #0]
    6430:	1c5a      	adds	r2, r3, #1
    6432:	687b      	ldr	r3, [r7, #4]
    6434:	601a      	str	r2, [r3, #0]
}
    6436:	46c0      	nop			; (mov r8, r8)
    6438:	46bd      	mov	sp, r7
    643a:	b004      	add	sp, #16
    643c:	bd80      	pop	{r7, pc}

0000643e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    643e:	b580      	push	{r7, lr}
    6440:	b084      	sub	sp, #16
    6442:	af00      	add	r7, sp, #0
    6444:	6078      	str	r0, [r7, #4]
    6446:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    6448:	683b      	ldr	r3, [r7, #0]
    644a:	681b      	ldr	r3, [r3, #0]
    644c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    644e:	68bb      	ldr	r3, [r7, #8]
    6450:	3301      	adds	r3, #1
    6452:	d103      	bne.n	645c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    6454:	687b      	ldr	r3, [r7, #4]
    6456:	691b      	ldr	r3, [r3, #16]
    6458:	60fb      	str	r3, [r7, #12]
    645a:	e00c      	b.n	6476 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    645c:	687b      	ldr	r3, [r7, #4]
    645e:	3308      	adds	r3, #8
    6460:	60fb      	str	r3, [r7, #12]
    6462:	e002      	b.n	646a <vListInsert+0x2c>
    6464:	68fb      	ldr	r3, [r7, #12]
    6466:	685b      	ldr	r3, [r3, #4]
    6468:	60fb      	str	r3, [r7, #12]
    646a:	68fb      	ldr	r3, [r7, #12]
    646c:	685b      	ldr	r3, [r3, #4]
    646e:	681a      	ldr	r2, [r3, #0]
    6470:	68bb      	ldr	r3, [r7, #8]
    6472:	429a      	cmp	r2, r3
    6474:	d9f6      	bls.n	6464 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    6476:	68fb      	ldr	r3, [r7, #12]
    6478:	685a      	ldr	r2, [r3, #4]
    647a:	683b      	ldr	r3, [r7, #0]
    647c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    647e:	683b      	ldr	r3, [r7, #0]
    6480:	685b      	ldr	r3, [r3, #4]
    6482:	683a      	ldr	r2, [r7, #0]
    6484:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    6486:	683b      	ldr	r3, [r7, #0]
    6488:	68fa      	ldr	r2, [r7, #12]
    648a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    648c:	68fb      	ldr	r3, [r7, #12]
    648e:	683a      	ldr	r2, [r7, #0]
    6490:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    6492:	683b      	ldr	r3, [r7, #0]
    6494:	687a      	ldr	r2, [r7, #4]
    6496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    6498:	687b      	ldr	r3, [r7, #4]
    649a:	681b      	ldr	r3, [r3, #0]
    649c:	1c5a      	adds	r2, r3, #1
    649e:	687b      	ldr	r3, [r7, #4]
    64a0:	601a      	str	r2, [r3, #0]
}
    64a2:	46c0      	nop			; (mov r8, r8)
    64a4:	46bd      	mov	sp, r7
    64a6:	b004      	add	sp, #16
    64a8:	bd80      	pop	{r7, pc}

000064aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    64aa:	b580      	push	{r7, lr}
    64ac:	b084      	sub	sp, #16
    64ae:	af00      	add	r7, sp, #0
    64b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    64b2:	687b      	ldr	r3, [r7, #4]
    64b4:	691b      	ldr	r3, [r3, #16]
    64b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    64b8:	687b      	ldr	r3, [r7, #4]
    64ba:	685b      	ldr	r3, [r3, #4]
    64bc:	687a      	ldr	r2, [r7, #4]
    64be:	6892      	ldr	r2, [r2, #8]
    64c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    64c2:	687b      	ldr	r3, [r7, #4]
    64c4:	689b      	ldr	r3, [r3, #8]
    64c6:	687a      	ldr	r2, [r7, #4]
    64c8:	6852      	ldr	r2, [r2, #4]
    64ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    64cc:	68fb      	ldr	r3, [r7, #12]
    64ce:	685a      	ldr	r2, [r3, #4]
    64d0:	687b      	ldr	r3, [r7, #4]
    64d2:	429a      	cmp	r2, r3
    64d4:	d103      	bne.n	64de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    64d6:	687b      	ldr	r3, [r7, #4]
    64d8:	689a      	ldr	r2, [r3, #8]
    64da:	68fb      	ldr	r3, [r7, #12]
    64dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    64de:	687b      	ldr	r3, [r7, #4]
    64e0:	2200      	movs	r2, #0
    64e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    64e4:	68fb      	ldr	r3, [r7, #12]
    64e6:	681b      	ldr	r3, [r3, #0]
    64e8:	1e5a      	subs	r2, r3, #1
    64ea:	68fb      	ldr	r3, [r7, #12]
    64ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    64ee:	68fb      	ldr	r3, [r7, #12]
    64f0:	681b      	ldr	r3, [r3, #0]
}
    64f2:	0018      	movs	r0, r3
    64f4:	46bd      	mov	sp, r7
    64f6:	b004      	add	sp, #16
    64f8:	bd80      	pop	{r7, pc}
	...

000064fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    64fc:	b580      	push	{r7, lr}
    64fe:	b084      	sub	sp, #16
    6500:	af00      	add	r7, sp, #0
    6502:	60f8      	str	r0, [r7, #12]
    6504:	60b9      	str	r1, [r7, #8]
    6506:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    6508:	68fb      	ldr	r3, [r7, #12]
    650a:	3b04      	subs	r3, #4
    650c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    650e:	68fb      	ldr	r3, [r7, #12]
    6510:	2280      	movs	r2, #128	; 0x80
    6512:	0452      	lsls	r2, r2, #17
    6514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    6516:	68fb      	ldr	r3, [r7, #12]
    6518:	3b04      	subs	r3, #4
    651a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    651c:	68ba      	ldr	r2, [r7, #8]
    651e:	68fb      	ldr	r3, [r7, #12]
    6520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    6522:	68fb      	ldr	r3, [r7, #12]
    6524:	3b04      	subs	r3, #4
    6526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    6528:	4a08      	ldr	r2, [pc, #32]	; (654c <pxPortInitialiseStack+0x50>)
    652a:	68fb      	ldr	r3, [r7, #12]
    652c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    652e:	68fb      	ldr	r3, [r7, #12]
    6530:	3b14      	subs	r3, #20
    6532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    6534:	687a      	ldr	r2, [r7, #4]
    6536:	68fb      	ldr	r3, [r7, #12]
    6538:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    653a:	68fb      	ldr	r3, [r7, #12]
    653c:	3b20      	subs	r3, #32
    653e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    6540:	68fb      	ldr	r3, [r7, #12]
}
    6542:	0018      	movs	r0, r3
    6544:	46bd      	mov	sp, r7
    6546:	b004      	add	sp, #16
    6548:	bd80      	pop	{r7, pc}
    654a:	46c0      	nop			; (mov r8, r8)
    654c:	00006551 	.word	0x00006551

00006550 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    6550:	b580      	push	{r7, lr}
    6552:	b082      	sub	sp, #8
    6554:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    6556:	2300      	movs	r3, #0
    6558:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    655a:	4b07      	ldr	r3, [pc, #28]	; (6578 <prvTaskExitError+0x28>)
    655c:	681b      	ldr	r3, [r3, #0]
    655e:	3301      	adds	r3, #1
    6560:	d001      	beq.n	6566 <prvTaskExitError+0x16>
    6562:	b672      	cpsid	i
    6564:	e7fe      	b.n	6564 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    6566:	b672      	cpsid	i
	while( ulDummy == 0 )
    6568:	46c0      	nop			; (mov r8, r8)
    656a:	687b      	ldr	r3, [r7, #4]
    656c:	2b00      	cmp	r3, #0
    656e:	d0fc      	beq.n	656a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    6570:	46c0      	nop			; (mov r8, r8)
    6572:	46bd      	mov	sp, r7
    6574:	b002      	add	sp, #8
    6576:	bd80      	pop	{r7, pc}
    6578:	20000100 	.word	0x20000100

0000657c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    657c:	b580      	push	{r7, lr}
    657e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    6580:	46c0      	nop			; (mov r8, r8)
    6582:	46bd      	mov	sp, r7
    6584:	bd80      	pop	{r7, pc}
	...

00006590 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    6590:	4a0b      	ldr	r2, [pc, #44]	; (65c0 <pxCurrentTCBConst2>)
    6592:	6813      	ldr	r3, [r2, #0]
    6594:	6818      	ldr	r0, [r3, #0]
    6596:	3020      	adds	r0, #32
    6598:	f380 8809 	msr	PSP, r0
    659c:	2002      	movs	r0, #2
    659e:	f380 8814 	msr	CONTROL, r0
    65a2:	f3bf 8f6f 	isb	sy
    65a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    65a8:	46ae      	mov	lr, r5
    65aa:	bc08      	pop	{r3}
    65ac:	bc04      	pop	{r2}
    65ae:	b662      	cpsie	i
    65b0:	4718      	bx	r3
    65b2:	46c0      	nop			; (mov r8, r8)
    65b4:	46c0      	nop			; (mov r8, r8)
    65b6:	46c0      	nop			; (mov r8, r8)
    65b8:	46c0      	nop			; (mov r8, r8)
    65ba:	46c0      	nop			; (mov r8, r8)
    65bc:	46c0      	nop			; (mov r8, r8)
    65be:	46c0      	nop			; (mov r8, r8)

000065c0 <pxCurrentTCBConst2>:
    65c0:	20003f54 	.word	0x20003f54
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    65c4:	46c0      	nop			; (mov r8, r8)
    65c6:	46c0      	nop			; (mov r8, r8)

000065c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    65c8:	b580      	push	{r7, lr}
    65ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    65cc:	4b0e      	ldr	r3, [pc, #56]	; (6608 <xPortStartScheduler+0x40>)
    65ce:	4a0e      	ldr	r2, [pc, #56]	; (6608 <xPortStartScheduler+0x40>)
    65d0:	6812      	ldr	r2, [r2, #0]
    65d2:	21ff      	movs	r1, #255	; 0xff
    65d4:	0409      	lsls	r1, r1, #16
    65d6:	430a      	orrs	r2, r1
    65d8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    65da:	4b0b      	ldr	r3, [pc, #44]	; (6608 <xPortStartScheduler+0x40>)
    65dc:	4a0a      	ldr	r2, [pc, #40]	; (6608 <xPortStartScheduler+0x40>)
    65de:	6812      	ldr	r2, [r2, #0]
    65e0:	21ff      	movs	r1, #255	; 0xff
    65e2:	0609      	lsls	r1, r1, #24
    65e4:	430a      	orrs	r2, r1
    65e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    65e8:	4b08      	ldr	r3, [pc, #32]	; (660c <xPortStartScheduler+0x44>)
    65ea:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    65ec:	4b08      	ldr	r3, [pc, #32]	; (6610 <xPortStartScheduler+0x48>)
    65ee:	2200      	movs	r2, #0
    65f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    65f2:	4b08      	ldr	r3, [pc, #32]	; (6614 <xPortStartScheduler+0x4c>)
    65f4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    65f6:	4b08      	ldr	r3, [pc, #32]	; (6618 <xPortStartScheduler+0x50>)
    65f8:	4798      	blx	r3
	prvTaskExitError();
    65fa:	4b08      	ldr	r3, [pc, #32]	; (661c <xPortStartScheduler+0x54>)
    65fc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    65fe:	2300      	movs	r3, #0
}
    6600:	0018      	movs	r0, r3
    6602:	46bd      	mov	sp, r7
    6604:	bd80      	pop	{r7, pc}
    6606:	46c0      	nop			; (mov r8, r8)
    6608:	e000ed20 	.word	0xe000ed20
    660c:	00006729 	.word	0x00006729
    6610:	20000100 	.word	0x20000100
    6614:	00006591 	.word	0x00006591
    6618:	00008c89 	.word	0x00008c89
    661c:	00006551 	.word	0x00006551

00006620 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    6620:	b580      	push	{r7, lr}
    6622:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    6624:	4b03      	ldr	r3, [pc, #12]	; (6634 <vPortYield+0x14>)
    6626:	2280      	movs	r2, #128	; 0x80
    6628:	0552      	lsls	r2, r2, #21
    662a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
    662c:	46c0      	nop			; (mov r8, r8)
    662e:	46bd      	mov	sp, r7
    6630:	bd80      	pop	{r7, pc}
    6632:	46c0      	nop			; (mov r8, r8)
    6634:	e000ed04 	.word	0xe000ed04

00006638 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    6638:	b580      	push	{r7, lr}
    663a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    663c:	b672      	cpsid	i
    uxCriticalNesting++;
    663e:	4b06      	ldr	r3, [pc, #24]	; (6658 <vPortEnterCritical+0x20>)
    6640:	681b      	ldr	r3, [r3, #0]
    6642:	1c5a      	adds	r2, r3, #1
    6644:	4b04      	ldr	r3, [pc, #16]	; (6658 <vPortEnterCritical+0x20>)
    6646:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    6648:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    664c:	f3bf 8f6f 	isb	sy
}
    6650:	46c0      	nop			; (mov r8, r8)
    6652:	46bd      	mov	sp, r7
    6654:	bd80      	pop	{r7, pc}
    6656:	46c0      	nop			; (mov r8, r8)
    6658:	20000100 	.word	0x20000100

0000665c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    665c:	b580      	push	{r7, lr}
    665e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    6660:	4b09      	ldr	r3, [pc, #36]	; (6688 <vPortExitCritical+0x2c>)
    6662:	681b      	ldr	r3, [r3, #0]
    6664:	2b00      	cmp	r3, #0
    6666:	d101      	bne.n	666c <vPortExitCritical+0x10>
    6668:	b672      	cpsid	i
    666a:	e7fe      	b.n	666a <vPortExitCritical+0xe>
    uxCriticalNesting--;
    666c:	4b06      	ldr	r3, [pc, #24]	; (6688 <vPortExitCritical+0x2c>)
    666e:	681b      	ldr	r3, [r3, #0]
    6670:	1e5a      	subs	r2, r3, #1
    6672:	4b05      	ldr	r3, [pc, #20]	; (6688 <vPortExitCritical+0x2c>)
    6674:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    6676:	4b04      	ldr	r3, [pc, #16]	; (6688 <vPortExitCritical+0x2c>)
    6678:	681b      	ldr	r3, [r3, #0]
    667a:	2b00      	cmp	r3, #0
    667c:	d100      	bne.n	6680 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    667e:	b662      	cpsie	i
    }
}
    6680:	46c0      	nop			; (mov r8, r8)
    6682:	46bd      	mov	sp, r7
    6684:	bd80      	pop	{r7, pc}
    6686:	46c0      	nop			; (mov r8, r8)
    6688:	20000100 	.word	0x20000100

0000668c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    668c:	f3ef 8010 	mrs	r0, PRIMASK
    6690:	b672      	cpsid	i
    6692:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    6694:	46c0      	nop			; (mov r8, r8)
    6696:	0018      	movs	r0, r3

00006698 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    6698:	f380 8810 	msr	PRIMASK, r0
    669c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    669e:	46c0      	nop			; (mov r8, r8)

000066a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    66a0:	f3ef 8009 	mrs	r0, PSP
    66a4:	4b0e      	ldr	r3, [pc, #56]	; (66e0 <pxCurrentTCBConst>)
    66a6:	681a      	ldr	r2, [r3, #0]
    66a8:	3820      	subs	r0, #32
    66aa:	6010      	str	r0, [r2, #0]
    66ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    66ae:	4644      	mov	r4, r8
    66b0:	464d      	mov	r5, r9
    66b2:	4656      	mov	r6, sl
    66b4:	465f      	mov	r7, fp
    66b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    66b8:	b508      	push	{r3, lr}
    66ba:	b672      	cpsid	i
    66bc:	f002 fae4 	bl	8c88 <vTaskSwitchContext>
    66c0:	b662      	cpsie	i
    66c2:	bc0c      	pop	{r2, r3}
    66c4:	6811      	ldr	r1, [r2, #0]
    66c6:	6808      	ldr	r0, [r1, #0]
    66c8:	3010      	adds	r0, #16
    66ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    66cc:	46a0      	mov	r8, r4
    66ce:	46a9      	mov	r9, r5
    66d0:	46b2      	mov	sl, r6
    66d2:	46bb      	mov	fp, r7
    66d4:	f380 8809 	msr	PSP, r0
    66d8:	3820      	subs	r0, #32
    66da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    66dc:	4718      	bx	r3
    66de:	46c0      	nop			; (mov r8, r8)

000066e0 <pxCurrentTCBConst>:
    66e0:	20003f54 	.word	0x20003f54
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    66e4:	46c0      	nop			; (mov r8, r8)
    66e6:	46c0      	nop			; (mov r8, r8)

000066e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    66e8:	b580      	push	{r7, lr}
    66ea:	b082      	sub	sp, #8
    66ec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    66ee:	4b0a      	ldr	r3, [pc, #40]	; (6718 <SysTick_Handler+0x30>)
    66f0:	4798      	blx	r3
    66f2:	0003      	movs	r3, r0
    66f4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    66f6:	4b09      	ldr	r3, [pc, #36]	; (671c <SysTick_Handler+0x34>)
    66f8:	4798      	blx	r3
    66fa:	1e03      	subs	r3, r0, #0
    66fc:	d003      	beq.n	6706 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    66fe:	4b08      	ldr	r3, [pc, #32]	; (6720 <SysTick_Handler+0x38>)
    6700:	2280      	movs	r2, #128	; 0x80
    6702:	0552      	lsls	r2, r2, #21
    6704:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    6706:	687b      	ldr	r3, [r7, #4]
    6708:	0018      	movs	r0, r3
    670a:	4b06      	ldr	r3, [pc, #24]	; (6724 <SysTick_Handler+0x3c>)
    670c:	4798      	blx	r3
}
    670e:	46c0      	nop			; (mov r8, r8)
    6710:	46bd      	mov	sp, r7
    6712:	b002      	add	sp, #8
    6714:	bd80      	pop	{r7, pc}
    6716:	46c0      	nop			; (mov r8, r8)
    6718:	0000668d 	.word	0x0000668d
    671c:	00008a99 	.word	0x00008a99
    6720:	e000ed04 	.word	0xe000ed04
    6724:	00006699 	.word	0x00006699

00006728 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    6728:	b5b0      	push	{r4, r5, r7, lr}
    672a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    672c:	4b0b      	ldr	r3, [pc, #44]	; (675c <prvSetupTimerInterrupt+0x34>)
    672e:	2200      	movs	r2, #0
    6730:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    6732:	4b0b      	ldr	r3, [pc, #44]	; (6760 <prvSetupTimerInterrupt+0x38>)
    6734:	2200      	movs	r2, #0
    6736:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    6738:	4c0a      	ldr	r4, [pc, #40]	; (6764 <prvSetupTimerInterrupt+0x3c>)
    673a:	2000      	movs	r0, #0
    673c:	4b0a      	ldr	r3, [pc, #40]	; (6768 <prvSetupTimerInterrupt+0x40>)
    673e:	4798      	blx	r3
    6740:	4b0a      	ldr	r3, [pc, #40]	; (676c <prvSetupTimerInterrupt+0x44>)
    6742:	22fa      	movs	r2, #250	; 0xfa
    6744:	0091      	lsls	r1, r2, #2
    6746:	4798      	blx	r3
    6748:	0003      	movs	r3, r0
    674a:	3b01      	subs	r3, #1
    674c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    674e:	4b03      	ldr	r3, [pc, #12]	; (675c <prvSetupTimerInterrupt+0x34>)
    6750:	2207      	movs	r2, #7
    6752:	601a      	str	r2, [r3, #0]
}
    6754:	46c0      	nop			; (mov r8, r8)
    6756:	46bd      	mov	sp, r7
    6758:	bdb0      	pop	{r4, r5, r7, pc}
    675a:	46c0      	nop			; (mov r8, r8)
    675c:	e000e010 	.word	0xe000e010
    6760:	e000e018 	.word	0xe000e018
    6764:	e000e014 	.word	0xe000e014
    6768:	00016285 	.word	0x00016285
    676c:	0001f0d1 	.word	0x0001f0d1

00006770 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    6770:	b580      	push	{r7, lr}
    6772:	b084      	sub	sp, #16
    6774:	af00      	add	r7, sp, #0
    6776:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    6778:	2300      	movs	r3, #0
    677a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    677c:	687b      	ldr	r3, [r7, #4]
    677e:	2207      	movs	r2, #7
    6780:	4013      	ands	r3, r2
    6782:	d004      	beq.n	678e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    6784:	687b      	ldr	r3, [r7, #4]
    6786:	2207      	movs	r2, #7
    6788:	4393      	bics	r3, r2
    678a:	3308      	adds	r3, #8
    678c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    678e:	4b21      	ldr	r3, [pc, #132]	; (6814 <pvPortMalloc+0xa4>)
    6790:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    6792:	4b21      	ldr	r3, [pc, #132]	; (6818 <pvPortMalloc+0xa8>)
    6794:	681b      	ldr	r3, [r3, #0]
    6796:	2b00      	cmp	r3, #0
    6798:	d105      	bne.n	67a6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    679a:	4b20      	ldr	r3, [pc, #128]	; (681c <pvPortMalloc+0xac>)
    679c:	2207      	movs	r2, #7
    679e:	4393      	bics	r3, r2
    67a0:	001a      	movs	r2, r3
    67a2:	4b1d      	ldr	r3, [pc, #116]	; (6818 <pvPortMalloc+0xa8>)
    67a4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    67a6:	4b1e      	ldr	r3, [pc, #120]	; (6820 <pvPortMalloc+0xb0>)
    67a8:	681a      	ldr	r2, [r3, #0]
    67aa:	687b      	ldr	r3, [r7, #4]
    67ac:	18d3      	adds	r3, r2, r3
    67ae:	4a1d      	ldr	r2, [pc, #116]	; (6824 <pvPortMalloc+0xb4>)
    67b0:	4293      	cmp	r3, r2
    67b2:	d813      	bhi.n	67dc <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    67b4:	4b1a      	ldr	r3, [pc, #104]	; (6820 <pvPortMalloc+0xb0>)
    67b6:	681a      	ldr	r2, [r3, #0]
    67b8:	687b      	ldr	r3, [r7, #4]
    67ba:	18d2      	adds	r2, r2, r3
    67bc:	4b18      	ldr	r3, [pc, #96]	; (6820 <pvPortMalloc+0xb0>)
    67be:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    67c0:	429a      	cmp	r2, r3
    67c2:	d90b      	bls.n	67dc <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    67c4:	4b14      	ldr	r3, [pc, #80]	; (6818 <pvPortMalloc+0xa8>)
    67c6:	681a      	ldr	r2, [r3, #0]
    67c8:	4b15      	ldr	r3, [pc, #84]	; (6820 <pvPortMalloc+0xb0>)
    67ca:	681b      	ldr	r3, [r3, #0]
    67cc:	18d3      	adds	r3, r2, r3
    67ce:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    67d0:	4b13      	ldr	r3, [pc, #76]	; (6820 <pvPortMalloc+0xb0>)
    67d2:	681a      	ldr	r2, [r3, #0]
    67d4:	687b      	ldr	r3, [r7, #4]
    67d6:	18d2      	adds	r2, r2, r3
    67d8:	4b11      	ldr	r3, [pc, #68]	; (6820 <pvPortMalloc+0xb0>)
    67da:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
    67dc:	68fb      	ldr	r3, [r7, #12]
    67de:	2b00      	cmp	r3, #0
    67e0:	d006      	beq.n	67f0 <pvPortMalloc+0x80>
    67e2:	68fb      	ldr	r3, [r7, #12]
    67e4:	687a      	ldr	r2, [r7, #4]
    67e6:	0019      	movs	r1, r3
    67e8:	2094      	movs	r0, #148	; 0x94
    67ea:	4b0f      	ldr	r3, [pc, #60]	; (6828 <pvPortMalloc+0xb8>)
    67ec:	4798      	blx	r3
    67ee:	e005      	b.n	67fc <pvPortMalloc+0x8c>
    67f0:	68fb      	ldr	r3, [r7, #12]
    67f2:	687a      	ldr	r2, [r7, #4]
    67f4:	0019      	movs	r1, r3
    67f6:	20e8      	movs	r0, #232	; 0xe8
    67f8:	4b0b      	ldr	r3, [pc, #44]	; (6828 <pvPortMalloc+0xb8>)
    67fa:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
    67fc:	4b0b      	ldr	r3, [pc, #44]	; (682c <pvPortMalloc+0xbc>)
    67fe:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    6800:	68fb      	ldr	r3, [r7, #12]
    6802:	2b00      	cmp	r3, #0
    6804:	d101      	bne.n	680a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    6806:	4b0a      	ldr	r3, [pc, #40]	; (6830 <pvPortMalloc+0xc0>)
    6808:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
    680a:	68fb      	ldr	r3, [r7, #12]
}
    680c:	0018      	movs	r0, r3
    680e:	46bd      	mov	sp, r7
    6810:	b004      	add	sp, #16
    6812:	bd80      	pop	{r7, pc}
    6814:	000088f5 	.word	0x000088f5
    6818:	20003f50 	.word	0x20003f50
    681c:	20001074 	.word	0x20001074
    6820:	20003f4c 	.word	0x20003f4c
    6824:	00002ed7 	.word	0x00002ed7
    6828:	00004ed9 	.word	0x00004ed9
    682c:	0000890d 	.word	0x0000890d
    6830:	0001f0a1 	.word	0x0001f0a1

00006834 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    6834:	b580      	push	{r7, lr}
    6836:	b082      	sub	sp, #8
    6838:	af00      	add	r7, sp, #0
    683a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    683c:	687b      	ldr	r3, [r7, #4]
    683e:	2b00      	cmp	r3, #0
    6840:	d001      	beq.n	6846 <vPortFree+0x12>
    6842:	b672      	cpsid	i
    6844:	e7fe      	b.n	6844 <vPortFree+0x10>
}
    6846:	46c0      	nop			; (mov r8, r8)
    6848:	46bd      	mov	sp, r7
    684a:	b002      	add	sp, #8
    684c:	bd80      	pop	{r7, pc}
	...

00006850 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    6850:	b580      	push	{r7, lr}
    6852:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    6854:	4b03      	ldr	r3, [pc, #12]	; (6864 <xPortGetFreeHeapSize+0x14>)
    6856:	681b      	ldr	r3, [r3, #0]
    6858:	4a03      	ldr	r2, [pc, #12]	; (6868 <xPortGetFreeHeapSize+0x18>)
    685a:	1ad3      	subs	r3, r2, r3
}
    685c:	0018      	movs	r0, r3
    685e:	46bd      	mov	sp, r7
    6860:	bd80      	pop	{r7, pc}
    6862:	46c0      	nop			; (mov r8, r8)
    6864:	20003f4c 	.word	0x20003f4c
    6868:	00002ed8 	.word	0x00002ed8

0000686c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    686c:	b580      	push	{r7, lr}
    686e:	b084      	sub	sp, #16
    6870:	af00      	add	r7, sp, #0
    6872:	6078      	str	r0, [r7, #4]
    6874:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6876:	687b      	ldr	r3, [r7, #4]
    6878:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    687a:	68fb      	ldr	r3, [r7, #12]
    687c:	2b00      	cmp	r3, #0
    687e:	d101      	bne.n	6884 <xQueueGenericReset+0x18>
    6880:	b672      	cpsid	i
    6882:	e7fe      	b.n	6882 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    6884:	4b23      	ldr	r3, [pc, #140]	; (6914 <xQueueGenericReset+0xa8>)
    6886:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    6888:	68fb      	ldr	r3, [r7, #12]
    688a:	681a      	ldr	r2, [r3, #0]
    688c:	68fb      	ldr	r3, [r7, #12]
    688e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    6890:	68fb      	ldr	r3, [r7, #12]
    6892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6894:	434b      	muls	r3, r1
    6896:	18d2      	adds	r2, r2, r3
    6898:	68fb      	ldr	r3, [r7, #12]
    689a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    689c:	68fb      	ldr	r3, [r7, #12]
    689e:	2200      	movs	r2, #0
    68a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    68a2:	68fb      	ldr	r3, [r7, #12]
    68a4:	681a      	ldr	r2, [r3, #0]
    68a6:	68fb      	ldr	r3, [r7, #12]
    68a8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    68aa:	68fb      	ldr	r3, [r7, #12]
    68ac:	681a      	ldr	r2, [r3, #0]
    68ae:	68fb      	ldr	r3, [r7, #12]
    68b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    68b2:	1e59      	subs	r1, r3, #1
    68b4:	68fb      	ldr	r3, [r7, #12]
    68b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    68b8:	434b      	muls	r3, r1
    68ba:	18d2      	adds	r2, r2, r3
    68bc:	68fb      	ldr	r3, [r7, #12]
    68be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    68c0:	68fb      	ldr	r3, [r7, #12]
    68c2:	2244      	movs	r2, #68	; 0x44
    68c4:	21ff      	movs	r1, #255	; 0xff
    68c6:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    68c8:	68fb      	ldr	r3, [r7, #12]
    68ca:	2245      	movs	r2, #69	; 0x45
    68cc:	21ff      	movs	r1, #255	; 0xff
    68ce:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    68d0:	683b      	ldr	r3, [r7, #0]
    68d2:	2b00      	cmp	r3, #0
    68d4:	d10d      	bne.n	68f2 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    68d6:	68fb      	ldr	r3, [r7, #12]
    68d8:	691b      	ldr	r3, [r3, #16]
    68da:	2b00      	cmp	r3, #0
    68dc:	d013      	beq.n	6906 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    68de:	68fb      	ldr	r3, [r7, #12]
    68e0:	3310      	adds	r3, #16
    68e2:	0018      	movs	r0, r3
    68e4:	4b0c      	ldr	r3, [pc, #48]	; (6918 <xQueueGenericReset+0xac>)
    68e6:	4798      	blx	r3
    68e8:	1e03      	subs	r3, r0, #0
    68ea:	d00c      	beq.n	6906 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    68ec:	4b0b      	ldr	r3, [pc, #44]	; (691c <xQueueGenericReset+0xb0>)
    68ee:	4798      	blx	r3
    68f0:	e009      	b.n	6906 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    68f2:	68fb      	ldr	r3, [r7, #12]
    68f4:	3310      	adds	r3, #16
    68f6:	0018      	movs	r0, r3
    68f8:	4b09      	ldr	r3, [pc, #36]	; (6920 <xQueueGenericReset+0xb4>)
    68fa:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    68fc:	68fb      	ldr	r3, [r7, #12]
    68fe:	3324      	adds	r3, #36	; 0x24
    6900:	0018      	movs	r0, r3
    6902:	4b07      	ldr	r3, [pc, #28]	; (6920 <xQueueGenericReset+0xb4>)
    6904:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    6906:	4b07      	ldr	r3, [pc, #28]	; (6924 <xQueueGenericReset+0xb8>)
    6908:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    690a:	2301      	movs	r3, #1
}
    690c:	0018      	movs	r0, r3
    690e:	46bd      	mov	sp, r7
    6910:	b004      	add	sp, #16
    6912:	bd80      	pop	{r7, pc}
    6914:	00006639 	.word	0x00006639
    6918:	00008ecd 	.word	0x00008ecd
    691c:	00006621 	.word	0x00006621
    6920:	000063a9 	.word	0x000063a9
    6924:	0000665d 	.word	0x0000665d

00006928 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    6928:	b590      	push	{r4, r7, lr}
    692a:	b08b      	sub	sp, #44	; 0x2c
    692c:	af02      	add	r7, sp, #8
    692e:	60f8      	str	r0, [r7, #12]
    6930:	60b9      	str	r1, [r7, #8]
    6932:	1dfb      	adds	r3, r7, #7
    6934:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    6936:	68fb      	ldr	r3, [r7, #12]
    6938:	2b00      	cmp	r3, #0
    693a:	d101      	bne.n	6940 <xQueueGenericCreate+0x18>
    693c:	b672      	cpsid	i
    693e:	e7fe      	b.n	693e <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    6940:	68bb      	ldr	r3, [r7, #8]
    6942:	2b00      	cmp	r3, #0
    6944:	d102      	bne.n	694c <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    6946:	2300      	movs	r3, #0
    6948:	61fb      	str	r3, [r7, #28]
    694a:	e003      	b.n	6954 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    694c:	68fb      	ldr	r3, [r7, #12]
    694e:	68ba      	ldr	r2, [r7, #8]
    6950:	4353      	muls	r3, r2
    6952:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    6954:	69fb      	ldr	r3, [r7, #28]
    6956:	3354      	adds	r3, #84	; 0x54
    6958:	0018      	movs	r0, r3
    695a:	4b19      	ldr	r3, [pc, #100]	; (69c0 <xQueueGenericCreate+0x98>)
    695c:	4798      	blx	r3
    695e:	0003      	movs	r3, r0
    6960:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    6962:	69bb      	ldr	r3, [r7, #24]
    6964:	2b00      	cmp	r3, #0
    6966:	d00d      	beq.n	6984 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    6968:	69bb      	ldr	r3, [r7, #24]
    696a:	3354      	adds	r3, #84	; 0x54
    696c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    696e:	1dfb      	adds	r3, r7, #7
    6970:	781c      	ldrb	r4, [r3, #0]
    6972:	697a      	ldr	r2, [r7, #20]
    6974:	68b9      	ldr	r1, [r7, #8]
    6976:	68f8      	ldr	r0, [r7, #12]
    6978:	69bb      	ldr	r3, [r7, #24]
    697a:	9300      	str	r3, [sp, #0]
    697c:	0023      	movs	r3, r4
    697e:	4c11      	ldr	r4, [pc, #68]	; (69c4 <xQueueGenericCreate+0x9c>)
    6980:	47a0      	blx	r4
    6982:	e017      	b.n	69b4 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
    6984:	4b10      	ldr	r3, [pc, #64]	; (69c8 <xQueueGenericCreate+0xa0>)
    6986:	4798      	blx	r3
    6988:	0003      	movs	r3, r0
    698a:	0018      	movs	r0, r3
    698c:	4b0f      	ldr	r3, [pc, #60]	; (69cc <xQueueGenericCreate+0xa4>)
    698e:	4798      	blx	r3
    6990:	0003      	movs	r3, r0
    6992:	001a      	movs	r2, r3
    6994:	4b0e      	ldr	r3, [pc, #56]	; (69d0 <xQueueGenericCreate+0xa8>)
    6996:	881b      	ldrh	r3, [r3, #0]
    6998:	4013      	ands	r3, r2
    699a:	b29b      	uxth	r3, r3
    699c:	2b00      	cmp	r3, #0
    699e:	d009      	beq.n	69b4 <xQueueGenericCreate+0x8c>
    69a0:	1dfb      	adds	r3, r7, #7
    69a2:	781b      	ldrb	r3, [r3, #0]
    69a4:	4a0b      	ldr	r2, [pc, #44]	; (69d4 <xQueueGenericCreate+0xac>)
    69a6:	5cd3      	ldrb	r3, [r2, r3]
    69a8:	3340      	adds	r3, #64	; 0x40
    69aa:	b2db      	uxtb	r3, r3
    69ac:	2100      	movs	r1, #0
    69ae:	0018      	movs	r0, r3
    69b0:	4b09      	ldr	r3, [pc, #36]	; (69d8 <xQueueGenericCreate+0xb0>)
    69b2:	4798      	blx	r3
		}

		return pxNewQueue;
    69b4:	69bb      	ldr	r3, [r7, #24]
	}
    69b6:	0018      	movs	r0, r3
    69b8:	46bd      	mov	sp, r7
    69ba:	b009      	add	sp, #36	; 0x24
    69bc:	bd90      	pop	{r4, r7, pc}
    69be:	46c0      	nop			; (mov r8, r8)
    69c0:	00006771 	.word	0x00006771
    69c4:	000069dd 	.word	0x000069dd
    69c8:	000048cd 	.word	0x000048cd
    69cc:	00004631 	.word	0x00004631
    69d0:	200000fc 	.word	0x200000fc
    69d4:	200000f0 	.word	0x200000f0
    69d8:	00005331 	.word	0x00005331

000069dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    69dc:	b5b0      	push	{r4, r5, r7, lr}
    69de:	b084      	sub	sp, #16
    69e0:	af00      	add	r7, sp, #0
    69e2:	60f8      	str	r0, [r7, #12]
    69e4:	60b9      	str	r1, [r7, #8]
    69e6:	607a      	str	r2, [r7, #4]
    69e8:	001a      	movs	r2, r3
    69ea:	1cfb      	adds	r3, r7, #3
    69ec:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    69ee:	68bb      	ldr	r3, [r7, #8]
    69f0:	2b00      	cmp	r3, #0
    69f2:	d103      	bne.n	69fc <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    69f4:	6a3b      	ldr	r3, [r7, #32]
    69f6:	6a3a      	ldr	r2, [r7, #32]
    69f8:	601a      	str	r2, [r3, #0]
    69fa:	e002      	b.n	6a02 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    69fc:	6a3b      	ldr	r3, [r7, #32]
    69fe:	687a      	ldr	r2, [r7, #4]
    6a00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    6a02:	6a3b      	ldr	r3, [r7, #32]
    6a04:	68fa      	ldr	r2, [r7, #12]
    6a06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    6a08:	6a3b      	ldr	r3, [r7, #32]
    6a0a:	68ba      	ldr	r2, [r7, #8]
    6a0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    6a0e:	6a3b      	ldr	r3, [r7, #32]
    6a10:	2101      	movs	r1, #1
    6a12:	0018      	movs	r0, r3
    6a14:	4b41      	ldr	r3, [pc, #260]	; (6b1c <prvInitialiseNewQueue+0x140>)
    6a16:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    6a18:	6a3b      	ldr	r3, [r7, #32]
    6a1a:	1cfa      	adds	r2, r7, #3
    6a1c:	2150      	movs	r1, #80	; 0x50
    6a1e:	7812      	ldrb	r2, [r2, #0]
    6a20:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    6a22:	6a3b      	ldr	r3, [r7, #32]
    6a24:	2200      	movs	r2, #0
    6a26:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
    6a28:	6a3b      	ldr	r3, [r7, #32]
    6a2a:	0018      	movs	r0, r3
    6a2c:	4b3c      	ldr	r3, [pc, #240]	; (6b20 <prvInitialiseNewQueue+0x144>)
    6a2e:	4798      	blx	r3
    6a30:	0003      	movs	r3, r0
    6a32:	001a      	movs	r2, r3
    6a34:	4b3b      	ldr	r3, [pc, #236]	; (6b24 <prvInitialiseNewQueue+0x148>)
    6a36:	5c9b      	ldrb	r3, [r3, r2]
    6a38:	0018      	movs	r0, r3
    6a3a:	4b3b      	ldr	r3, [pc, #236]	; (6b28 <prvInitialiseNewQueue+0x14c>)
    6a3c:	4798      	blx	r3
    6a3e:	0003      	movs	r3, r0
    6a40:	b29a      	uxth	r2, r3
    6a42:	6a3b      	ldr	r3, [r7, #32]
    6a44:	0011      	movs	r1, r2
    6a46:	0018      	movs	r0, r3
    6a48:	4b38      	ldr	r3, [pc, #224]	; (6b2c <prvInitialiseNewQueue+0x150>)
    6a4a:	4798      	blx	r3
    6a4c:	4b38      	ldr	r3, [pc, #224]	; (6b30 <prvInitialiseNewQueue+0x154>)
    6a4e:	881a      	ldrh	r2, [r3, #0]
    6a50:	6a3b      	ldr	r3, [r7, #32]
    6a52:	0011      	movs	r1, r2
    6a54:	0018      	movs	r0, r3
    6a56:	4b37      	ldr	r3, [pc, #220]	; (6b34 <prvInitialiseNewQueue+0x158>)
    6a58:	4798      	blx	r3
    6a5a:	6a3b      	ldr	r3, [r7, #32]
    6a5c:	0018      	movs	r0, r3
    6a5e:	4b30      	ldr	r3, [pc, #192]	; (6b20 <prvInitialiseNewQueue+0x144>)
    6a60:	4798      	blx	r3
    6a62:	0003      	movs	r3, r0
    6a64:	001a      	movs	r2, r3
    6a66:	4b2f      	ldr	r3, [pc, #188]	; (6b24 <prvInitialiseNewQueue+0x148>)
    6a68:	5c9c      	ldrb	r4, [r3, r2]
    6a6a:	6a3b      	ldr	r3, [r7, #32]
    6a6c:	0018      	movs	r0, r3
    6a6e:	4b32      	ldr	r3, [pc, #200]	; (6b38 <prvInitialiseNewQueue+0x15c>)
    6a70:	4798      	blx	r3
    6a72:	0003      	movs	r3, r0
    6a74:	b2db      	uxtb	r3, r3
    6a76:	0019      	movs	r1, r3
    6a78:	0020      	movs	r0, r4
    6a7a:	4b30      	ldr	r3, [pc, #192]	; (6b3c <prvInitialiseNewQueue+0x160>)
    6a7c:	4798      	blx	r3
    6a7e:	4b30      	ldr	r3, [pc, #192]	; (6b40 <prvInitialiseNewQueue+0x164>)
    6a80:	4798      	blx	r3
    6a82:	0003      	movs	r3, r0
    6a84:	0018      	movs	r0, r3
    6a86:	4b2f      	ldr	r3, [pc, #188]	; (6b44 <prvInitialiseNewQueue+0x168>)
    6a88:	4798      	blx	r3
    6a8a:	0003      	movs	r3, r0
    6a8c:	001a      	movs	r2, r3
    6a8e:	4b2e      	ldr	r3, [pc, #184]	; (6b48 <prvInitialiseNewQueue+0x16c>)
    6a90:	881b      	ldrh	r3, [r3, #0]
    6a92:	4013      	ands	r3, r2
    6a94:	b29b      	uxth	r3, r3
    6a96:	2b00      	cmp	r3, #0
    6a98:	d029      	beq.n	6aee <prvInitialiseNewQueue+0x112>
    6a9a:	6a3b      	ldr	r3, [r7, #32]
    6a9c:	0018      	movs	r0, r3
    6a9e:	4b2b      	ldr	r3, [pc, #172]	; (6b4c <prvInitialiseNewQueue+0x170>)
    6aa0:	4798      	blx	r3
    6aa2:	0003      	movs	r3, r0
    6aa4:	001a      	movs	r2, r3
    6aa6:	4b28      	ldr	r3, [pc, #160]	; (6b48 <prvInitialiseNewQueue+0x16c>)
    6aa8:	881b      	ldrh	r3, [r3, #0]
    6aaa:	4013      	ands	r3, r2
    6aac:	b29b      	uxth	r3, r3
    6aae:	2b00      	cmp	r3, #0
    6ab0:	d01d      	beq.n	6aee <prvInitialiseNewQueue+0x112>
    6ab2:	6a3b      	ldr	r3, [r7, #32]
    6ab4:	0018      	movs	r0, r3
    6ab6:	4b1a      	ldr	r3, [pc, #104]	; (6b20 <prvInitialiseNewQueue+0x144>)
    6ab8:	4798      	blx	r3
    6aba:	0003      	movs	r3, r0
    6abc:	001a      	movs	r2, r3
    6abe:	4b19      	ldr	r3, [pc, #100]	; (6b24 <prvInitialiseNewQueue+0x148>)
    6ac0:	5c9b      	ldrb	r3, [r3, r2]
    6ac2:	3318      	adds	r3, #24
    6ac4:	b2db      	uxtb	r3, r3
    6ac6:	001d      	movs	r5, r3
    6ac8:	6a3b      	ldr	r3, [r7, #32]
    6aca:	0018      	movs	r0, r3
    6acc:	4b14      	ldr	r3, [pc, #80]	; (6b20 <prvInitialiseNewQueue+0x144>)
    6ace:	4798      	blx	r3
    6ad0:	0003      	movs	r3, r0
    6ad2:	001a      	movs	r2, r3
    6ad4:	4b13      	ldr	r3, [pc, #76]	; (6b24 <prvInitialiseNewQueue+0x148>)
    6ad6:	5c9c      	ldrb	r4, [r3, r2]
    6ad8:	6a3b      	ldr	r3, [r7, #32]
    6ada:	0018      	movs	r0, r3
    6adc:	4b16      	ldr	r3, [pc, #88]	; (6b38 <prvInitialiseNewQueue+0x15c>)
    6ade:	4798      	blx	r3
    6ae0:	0003      	movs	r3, r0
    6ae2:	b2db      	uxtb	r3, r3
    6ae4:	001a      	movs	r2, r3
    6ae6:	0021      	movs	r1, r4
    6ae8:	0028      	movs	r0, r5
    6aea:	4b19      	ldr	r3, [pc, #100]	; (6b50 <prvInitialiseNewQueue+0x174>)
    6aec:	4798      	blx	r3
    6aee:	6a3b      	ldr	r3, [r7, #32]
    6af0:	0018      	movs	r0, r3
    6af2:	4b0b      	ldr	r3, [pc, #44]	; (6b20 <prvInitialiseNewQueue+0x144>)
    6af4:	4798      	blx	r3
    6af6:	0003      	movs	r3, r0
    6af8:	001a      	movs	r2, r3
    6afa:	4b0a      	ldr	r3, [pc, #40]	; (6b24 <prvInitialiseNewQueue+0x148>)
    6afc:	5c9c      	ldrb	r4, [r3, r2]
    6afe:	6a3b      	ldr	r3, [r7, #32]
    6b00:	0018      	movs	r0, r3
    6b02:	4b0d      	ldr	r3, [pc, #52]	; (6b38 <prvInitialiseNewQueue+0x15c>)
    6b04:	4798      	blx	r3
    6b06:	0003      	movs	r3, r0
    6b08:	b2db      	uxtb	r3, r3
    6b0a:	2200      	movs	r2, #0
    6b0c:	0019      	movs	r1, r3
    6b0e:	0020      	movs	r0, r4
    6b10:	4b10      	ldr	r3, [pc, #64]	; (6b54 <prvInitialiseNewQueue+0x178>)
    6b12:	4798      	blx	r3
}
    6b14:	46c0      	nop			; (mov r8, r8)
    6b16:	46bd      	mov	sp, r7
    6b18:	b004      	add	sp, #16
    6b1a:	bdb0      	pop	{r4, r5, r7, pc}
    6b1c:	0000686d 	.word	0x0000686d
    6b20:	000045f1 	.word	0x000045f1
    6b24:	200000f0 	.word	0x200000f0
    6b28:	00005bb1 	.word	0x00005bb1
    6b2c:	00004715 	.word	0x00004715
    6b30:	200000fe 	.word	0x200000fe
    6b34:	00004751 	.word	0x00004751
    6b38:	000046d1 	.word	0x000046d1
    6b3c:	00005d49 	.word	0x00005d49
    6b40:	000048cd 	.word	0x000048cd
    6b44:	00004631 	.word	0x00004631
    6b48:	200000fc 	.word	0x200000fc
    6b4c:	000046f1 	.word	0x000046f1
    6b50:	00005029 	.word	0x00005029
    6b54:	00005685 	.word	0x00005685

00006b58 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    6b58:	b590      	push	{r4, r7, lr}
    6b5a:	b083      	sub	sp, #12
    6b5c:	af00      	add	r7, sp, #0
    6b5e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    6b60:	687b      	ldr	r3, [r7, #4]
    6b62:	2b00      	cmp	r3, #0
    6b64:	d00e      	beq.n	6b84 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    6b66:	687b      	ldr	r3, [r7, #4]
    6b68:	2200      	movs	r2, #0
    6b6a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    6b6c:	687b      	ldr	r3, [r7, #4]
    6b6e:	2200      	movs	r2, #0
    6b70:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    6b72:	687b      	ldr	r3, [r7, #4]
    6b74:	2200      	movs	r2, #0
    6b76:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    6b78:	6878      	ldr	r0, [r7, #4]
    6b7a:	2300      	movs	r3, #0
    6b7c:	2200      	movs	r2, #0
    6b7e:	2100      	movs	r1, #0
    6b80:	4c02      	ldr	r4, [pc, #8]	; (6b8c <prvInitialiseMutex+0x34>)
    6b82:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    6b84:	46c0      	nop			; (mov r8, r8)
    6b86:	46bd      	mov	sp, r7
    6b88:	b003      	add	sp, #12
    6b8a:	bd90      	pop	{r4, r7, pc}
    6b8c:	00006bd1 	.word	0x00006bd1

00006b90 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    6b90:	b580      	push	{r7, lr}
    6b92:	b086      	sub	sp, #24
    6b94:	af00      	add	r7, sp, #0
    6b96:	0002      	movs	r2, r0
    6b98:	1dfb      	adds	r3, r7, #7
    6b9a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    6b9c:	2301      	movs	r3, #1
    6b9e:	617b      	str	r3, [r7, #20]
    6ba0:	2300      	movs	r3, #0
    6ba2:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    6ba4:	1dfb      	adds	r3, r7, #7
    6ba6:	781a      	ldrb	r2, [r3, #0]
    6ba8:	6939      	ldr	r1, [r7, #16]
    6baa:	697b      	ldr	r3, [r7, #20]
    6bac:	0018      	movs	r0, r3
    6bae:	4b06      	ldr	r3, [pc, #24]	; (6bc8 <xQueueCreateMutex+0x38>)
    6bb0:	4798      	blx	r3
    6bb2:	0003      	movs	r3, r0
    6bb4:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    6bb6:	68fb      	ldr	r3, [r7, #12]
    6bb8:	0018      	movs	r0, r3
    6bba:	4b04      	ldr	r3, [pc, #16]	; (6bcc <xQueueCreateMutex+0x3c>)
    6bbc:	4798      	blx	r3

		return pxNewQueue;
    6bbe:	68fb      	ldr	r3, [r7, #12]
	}
    6bc0:	0018      	movs	r0, r3
    6bc2:	46bd      	mov	sp, r7
    6bc4:	b006      	add	sp, #24
    6bc6:	bd80      	pop	{r7, pc}
    6bc8:	00006929 	.word	0x00006929
    6bcc:	00006b59 	.word	0x00006b59

00006bd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    6bd0:	b5b0      	push	{r4, r5, r7, lr}
    6bd2:	b08a      	sub	sp, #40	; 0x28
    6bd4:	af00      	add	r7, sp, #0
    6bd6:	60f8      	str	r0, [r7, #12]
    6bd8:	60b9      	str	r1, [r7, #8]
    6bda:	607a      	str	r2, [r7, #4]
    6bdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    6bde:	2300      	movs	r3, #0
    6be0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6be2:	68fb      	ldr	r3, [r7, #12]
    6be4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    6be6:	6a3b      	ldr	r3, [r7, #32]
    6be8:	2b00      	cmp	r3, #0
    6bea:	d101      	bne.n	6bf0 <xQueueGenericSend+0x20>
    6bec:	b672      	cpsid	i
    6bee:	e7fe      	b.n	6bee <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    6bf0:	68bb      	ldr	r3, [r7, #8]
    6bf2:	2b00      	cmp	r3, #0
    6bf4:	d103      	bne.n	6bfe <xQueueGenericSend+0x2e>
    6bf6:	6a3b      	ldr	r3, [r7, #32]
    6bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6bfa:	2b00      	cmp	r3, #0
    6bfc:	d101      	bne.n	6c02 <xQueueGenericSend+0x32>
    6bfe:	2301      	movs	r3, #1
    6c00:	e000      	b.n	6c04 <xQueueGenericSend+0x34>
    6c02:	2300      	movs	r3, #0
    6c04:	2b00      	cmp	r3, #0
    6c06:	d101      	bne.n	6c0c <xQueueGenericSend+0x3c>
    6c08:	b672      	cpsid	i
    6c0a:	e7fe      	b.n	6c0a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    6c0c:	683b      	ldr	r3, [r7, #0]
    6c0e:	2b02      	cmp	r3, #2
    6c10:	d103      	bne.n	6c1a <xQueueGenericSend+0x4a>
    6c12:	6a3b      	ldr	r3, [r7, #32]
    6c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6c16:	2b01      	cmp	r3, #1
    6c18:	d101      	bne.n	6c1e <xQueueGenericSend+0x4e>
    6c1a:	2301      	movs	r3, #1
    6c1c:	e000      	b.n	6c20 <xQueueGenericSend+0x50>
    6c1e:	2300      	movs	r3, #0
    6c20:	2b00      	cmp	r3, #0
    6c22:	d101      	bne.n	6c28 <xQueueGenericSend+0x58>
    6c24:	b672      	cpsid	i
    6c26:	e7fe      	b.n	6c26 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    6c28:	4bbc      	ldr	r3, [pc, #752]	; (6f1c <xQueueGenericSend+0x34c>)
    6c2a:	4798      	blx	r3
    6c2c:	1e03      	subs	r3, r0, #0
    6c2e:	d102      	bne.n	6c36 <xQueueGenericSend+0x66>
    6c30:	687b      	ldr	r3, [r7, #4]
    6c32:	2b00      	cmp	r3, #0
    6c34:	d101      	bne.n	6c3a <xQueueGenericSend+0x6a>
    6c36:	2301      	movs	r3, #1
    6c38:	e000      	b.n	6c3c <xQueueGenericSend+0x6c>
    6c3a:	2300      	movs	r3, #0
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d101      	bne.n	6c44 <xQueueGenericSend+0x74>
    6c40:	b672      	cpsid	i
    6c42:	e7fe      	b.n	6c42 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    6c44:	4bb6      	ldr	r3, [pc, #728]	; (6f20 <xQueueGenericSend+0x350>)
    6c46:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    6c48:	6a3b      	ldr	r3, [r7, #32]
    6c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6c4c:	6a3b      	ldr	r3, [r7, #32]
    6c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6c50:	429a      	cmp	r2, r3
    6c52:	d303      	bcc.n	6c5c <xQueueGenericSend+0x8c>
    6c54:	683b      	ldr	r3, [r7, #0]
    6c56:	2b02      	cmp	r3, #2
    6c58:	d000      	beq.n	6c5c <xQueueGenericSend+0x8c>
    6c5a:	e08e      	b.n	6d7a <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
    6c5c:	4bb1      	ldr	r3, [pc, #708]	; (6f24 <xQueueGenericSend+0x354>)
    6c5e:	4798      	blx	r3
    6c60:	0003      	movs	r3, r0
    6c62:	0018      	movs	r0, r3
    6c64:	4bb0      	ldr	r3, [pc, #704]	; (6f28 <xQueueGenericSend+0x358>)
    6c66:	4798      	blx	r3
    6c68:	0003      	movs	r3, r0
    6c6a:	001a      	movs	r2, r3
    6c6c:	4baf      	ldr	r3, [pc, #700]	; (6f2c <xQueueGenericSend+0x35c>)
    6c6e:	881b      	ldrh	r3, [r3, #0]
    6c70:	4013      	ands	r3, r2
    6c72:	b29b      	uxth	r3, r3
    6c74:	2b00      	cmp	r3, #0
    6c76:	d02e      	beq.n	6cd6 <xQueueGenericSend+0x106>
    6c78:	6a3b      	ldr	r3, [r7, #32]
    6c7a:	0018      	movs	r0, r3
    6c7c:	4bac      	ldr	r3, [pc, #688]	; (6f30 <xQueueGenericSend+0x360>)
    6c7e:	4798      	blx	r3
    6c80:	0003      	movs	r3, r0
    6c82:	001a      	movs	r2, r3
    6c84:	4ba9      	ldr	r3, [pc, #676]	; (6f2c <xQueueGenericSend+0x35c>)
    6c86:	881b      	ldrh	r3, [r3, #0]
    6c88:	4013      	ands	r3, r2
    6c8a:	b29b      	uxth	r3, r3
    6c8c:	2b00      	cmp	r3, #0
    6c8e:	d022      	beq.n	6cd6 <xQueueGenericSend+0x106>
    6c90:	683b      	ldr	r3, [r7, #0]
    6c92:	2b00      	cmp	r3, #0
    6c94:	d10b      	bne.n	6cae <xQueueGenericSend+0xde>
    6c96:	6a3b      	ldr	r3, [r7, #32]
    6c98:	0018      	movs	r0, r3
    6c9a:	4ba6      	ldr	r3, [pc, #664]	; (6f34 <xQueueGenericSend+0x364>)
    6c9c:	4798      	blx	r3
    6c9e:	0003      	movs	r3, r0
    6ca0:	001a      	movs	r2, r3
    6ca2:	4ba5      	ldr	r3, [pc, #660]	; (6f38 <xQueueGenericSend+0x368>)
    6ca4:	5c9b      	ldrb	r3, [r3, r2]
    6ca6:	3320      	adds	r3, #32
    6ca8:	b2db      	uxtb	r3, r3
    6caa:	001d      	movs	r5, r3
    6cac:	e000      	b.n	6cb0 <xQueueGenericSend+0xe0>
    6cae:	2525      	movs	r5, #37	; 0x25
    6cb0:	6a3b      	ldr	r3, [r7, #32]
    6cb2:	0018      	movs	r0, r3
    6cb4:	4b9f      	ldr	r3, [pc, #636]	; (6f34 <xQueueGenericSend+0x364>)
    6cb6:	4798      	blx	r3
    6cb8:	0003      	movs	r3, r0
    6cba:	001a      	movs	r2, r3
    6cbc:	4b9e      	ldr	r3, [pc, #632]	; (6f38 <xQueueGenericSend+0x368>)
    6cbe:	5c9c      	ldrb	r4, [r3, r2]
    6cc0:	6a3b      	ldr	r3, [r7, #32]
    6cc2:	0018      	movs	r0, r3
    6cc4:	4b9d      	ldr	r3, [pc, #628]	; (6f3c <xQueueGenericSend+0x36c>)
    6cc6:	4798      	blx	r3
    6cc8:	0003      	movs	r3, r0
    6cca:	b2db      	uxtb	r3, r3
    6ccc:	001a      	movs	r2, r3
    6cce:	0021      	movs	r1, r4
    6cd0:	0028      	movs	r0, r5
    6cd2:	4b9b      	ldr	r3, [pc, #620]	; (6f40 <xQueueGenericSend+0x370>)
    6cd4:	4798      	blx	r3
    6cd6:	6a3b      	ldr	r3, [r7, #32]
    6cd8:	0018      	movs	r0, r3
    6cda:	4b96      	ldr	r3, [pc, #600]	; (6f34 <xQueueGenericSend+0x364>)
    6cdc:	4798      	blx	r3
    6cde:	0003      	movs	r3, r0
    6ce0:	001a      	movs	r2, r3
    6ce2:	4b95      	ldr	r3, [pc, #596]	; (6f38 <xQueueGenericSend+0x368>)
    6ce4:	5c9c      	ldrb	r4, [r3, r2]
    6ce6:	6a3b      	ldr	r3, [r7, #32]
    6ce8:	0018      	movs	r0, r3
    6cea:	4b94      	ldr	r3, [pc, #592]	; (6f3c <xQueueGenericSend+0x36c>)
    6cec:	4798      	blx	r3
    6cee:	0003      	movs	r3, r0
    6cf0:	b2dd      	uxtb	r5, r3
    6cf2:	6a3b      	ldr	r3, [r7, #32]
    6cf4:	0018      	movs	r0, r3
    6cf6:	4b8f      	ldr	r3, [pc, #572]	; (6f34 <xQueueGenericSend+0x364>)
    6cf8:	4798      	blx	r3
    6cfa:	0003      	movs	r3, r0
    6cfc:	001a      	movs	r2, r3
    6cfe:	4b8e      	ldr	r3, [pc, #568]	; (6f38 <xQueueGenericSend+0x368>)
    6d00:	5c9b      	ldrb	r3, [r3, r2]
    6d02:	2b02      	cmp	r3, #2
    6d04:	d005      	beq.n	6d12 <xQueueGenericSend+0x142>
    6d06:	6a3b      	ldr	r3, [r7, #32]
    6d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6d0a:	b2db      	uxtb	r3, r3
    6d0c:	3301      	adds	r3, #1
    6d0e:	b2db      	uxtb	r3, r3
    6d10:	e000      	b.n	6d14 <xQueueGenericSend+0x144>
    6d12:	2300      	movs	r3, #0
    6d14:	001a      	movs	r2, r3
    6d16:	0029      	movs	r1, r5
    6d18:	0020      	movs	r0, r4
    6d1a:	4b8a      	ldr	r3, [pc, #552]	; (6f44 <xQueueGenericSend+0x374>)
    6d1c:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    6d1e:	683a      	ldr	r2, [r7, #0]
    6d20:	68b9      	ldr	r1, [r7, #8]
    6d22:	6a3b      	ldr	r3, [r7, #32]
    6d24:	0018      	movs	r0, r3
    6d26:	4b88      	ldr	r3, [pc, #544]	; (6f48 <xQueueGenericSend+0x378>)
    6d28:	4798      	blx	r3
    6d2a:	0003      	movs	r3, r0
    6d2c:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    6d2e:	6a3b      	ldr	r3, [r7, #32]
    6d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6d32:	2b00      	cmp	r3, #0
    6d34:	d00a      	beq.n	6d4c <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    6d36:	683a      	ldr	r2, [r7, #0]
    6d38:	6a3b      	ldr	r3, [r7, #32]
    6d3a:	0011      	movs	r1, r2
    6d3c:	0018      	movs	r0, r3
    6d3e:	4b83      	ldr	r3, [pc, #524]	; (6f4c <xQueueGenericSend+0x37c>)
    6d40:	4798      	blx	r3
    6d42:	1e03      	subs	r3, r0, #0
    6d44:	d015      	beq.n	6d72 <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    6d46:	4b82      	ldr	r3, [pc, #520]	; (6f50 <xQueueGenericSend+0x380>)
    6d48:	4798      	blx	r3
    6d4a:	e012      	b.n	6d72 <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6d4c:	6a3b      	ldr	r3, [r7, #32]
    6d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6d50:	2b00      	cmp	r3, #0
    6d52:	d009      	beq.n	6d68 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    6d54:	6a3b      	ldr	r3, [r7, #32]
    6d56:	3324      	adds	r3, #36	; 0x24
    6d58:	0018      	movs	r0, r3
    6d5a:	4b7e      	ldr	r3, [pc, #504]	; (6f54 <xQueueGenericSend+0x384>)
    6d5c:	4798      	blx	r3
    6d5e:	1e03      	subs	r3, r0, #0
    6d60:	d007      	beq.n	6d72 <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    6d62:	4b7b      	ldr	r3, [pc, #492]	; (6f50 <xQueueGenericSend+0x380>)
    6d64:	4798      	blx	r3
    6d66:	e004      	b.n	6d72 <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    6d68:	69fb      	ldr	r3, [r7, #28]
    6d6a:	2b00      	cmp	r3, #0
    6d6c:	d001      	beq.n	6d72 <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    6d6e:	4b78      	ldr	r3, [pc, #480]	; (6f50 <xQueueGenericSend+0x380>)
    6d70:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    6d72:	4b79      	ldr	r3, [pc, #484]	; (6f58 <xQueueGenericSend+0x388>)
    6d74:	4798      	blx	r3
				return pdPASS;
    6d76:	2301      	movs	r3, #1
    6d78:	e142      	b.n	7000 <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    6d7a:	687b      	ldr	r3, [r7, #4]
    6d7c:	2b00      	cmp	r3, #0
    6d7e:	d140      	bne.n	6e02 <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    6d80:	4b75      	ldr	r3, [pc, #468]	; (6f58 <xQueueGenericSend+0x388>)
    6d82:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
    6d84:	4b67      	ldr	r3, [pc, #412]	; (6f24 <xQueueGenericSend+0x354>)
    6d86:	4798      	blx	r3
    6d88:	0003      	movs	r3, r0
    6d8a:	0018      	movs	r0, r3
    6d8c:	4b66      	ldr	r3, [pc, #408]	; (6f28 <xQueueGenericSend+0x358>)
    6d8e:	4798      	blx	r3
    6d90:	0003      	movs	r3, r0
    6d92:	001a      	movs	r2, r3
    6d94:	4b65      	ldr	r3, [pc, #404]	; (6f2c <xQueueGenericSend+0x35c>)
    6d96:	881b      	ldrh	r3, [r3, #0]
    6d98:	4013      	ands	r3, r2
    6d9a:	b29b      	uxth	r3, r3
    6d9c:	2b00      	cmp	r3, #0
    6d9e:	d02e      	beq.n	6dfe <xQueueGenericSend+0x22e>
    6da0:	6a3b      	ldr	r3, [r7, #32]
    6da2:	0018      	movs	r0, r3
    6da4:	4b62      	ldr	r3, [pc, #392]	; (6f30 <xQueueGenericSend+0x360>)
    6da6:	4798      	blx	r3
    6da8:	0003      	movs	r3, r0
    6daa:	001a      	movs	r2, r3
    6dac:	4b5f      	ldr	r3, [pc, #380]	; (6f2c <xQueueGenericSend+0x35c>)
    6dae:	881b      	ldrh	r3, [r3, #0]
    6db0:	4013      	ands	r3, r2
    6db2:	b29b      	uxth	r3, r3
    6db4:	2b00      	cmp	r3, #0
    6db6:	d022      	beq.n	6dfe <xQueueGenericSend+0x22e>
    6db8:	683b      	ldr	r3, [r7, #0]
    6dba:	2b00      	cmp	r3, #0
    6dbc:	d10b      	bne.n	6dd6 <xQueueGenericSend+0x206>
    6dbe:	6a3b      	ldr	r3, [r7, #32]
    6dc0:	0018      	movs	r0, r3
    6dc2:	4b5c      	ldr	r3, [pc, #368]	; (6f34 <xQueueGenericSend+0x364>)
    6dc4:	4798      	blx	r3
    6dc6:	0003      	movs	r3, r0
    6dc8:	001a      	movs	r2, r3
    6dca:	4b5b      	ldr	r3, [pc, #364]	; (6f38 <xQueueGenericSend+0x368>)
    6dcc:	5c9b      	ldrb	r3, [r3, r2]
    6dce:	3348      	adds	r3, #72	; 0x48
    6dd0:	b2db      	uxtb	r3, r3
    6dd2:	001d      	movs	r5, r3
    6dd4:	e000      	b.n	6dd8 <xQueueGenericSend+0x208>
    6dd6:	254d      	movs	r5, #77	; 0x4d
    6dd8:	6a3b      	ldr	r3, [r7, #32]
    6dda:	0018      	movs	r0, r3
    6ddc:	4b55      	ldr	r3, [pc, #340]	; (6f34 <xQueueGenericSend+0x364>)
    6dde:	4798      	blx	r3
    6de0:	0003      	movs	r3, r0
    6de2:	001a      	movs	r2, r3
    6de4:	4b54      	ldr	r3, [pc, #336]	; (6f38 <xQueueGenericSend+0x368>)
    6de6:	5c9c      	ldrb	r4, [r3, r2]
    6de8:	6a3b      	ldr	r3, [r7, #32]
    6dea:	0018      	movs	r0, r3
    6dec:	4b53      	ldr	r3, [pc, #332]	; (6f3c <xQueueGenericSend+0x36c>)
    6dee:	4798      	blx	r3
    6df0:	0003      	movs	r3, r0
    6df2:	b2db      	uxtb	r3, r3
    6df4:	001a      	movs	r2, r3
    6df6:	0021      	movs	r1, r4
    6df8:	0028      	movs	r0, r5
    6dfa:	4b51      	ldr	r3, [pc, #324]	; (6f40 <xQueueGenericSend+0x370>)
    6dfc:	4798      	blx	r3
					return errQUEUE_FULL;
    6dfe:	2300      	movs	r3, #0
    6e00:	e0fe      	b.n	7000 <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
    6e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e04:	2b00      	cmp	r3, #0
    6e06:	d106      	bne.n	6e16 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    6e08:	2314      	movs	r3, #20
    6e0a:	18fb      	adds	r3, r7, r3
    6e0c:	0018      	movs	r0, r3
    6e0e:	4b53      	ldr	r3, [pc, #332]	; (6f5c <xQueueGenericSend+0x38c>)
    6e10:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    6e12:	2301      	movs	r3, #1
    6e14:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    6e16:	4b50      	ldr	r3, [pc, #320]	; (6f58 <xQueueGenericSend+0x388>)
    6e18:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    6e1a:	4b51      	ldr	r3, [pc, #324]	; (6f60 <xQueueGenericSend+0x390>)
    6e1c:	4798      	blx	r3
		prvLockQueue( pxQueue );
    6e1e:	4b40      	ldr	r3, [pc, #256]	; (6f20 <xQueueGenericSend+0x350>)
    6e20:	4798      	blx	r3
    6e22:	6a3b      	ldr	r3, [r7, #32]
    6e24:	2244      	movs	r2, #68	; 0x44
    6e26:	5c9b      	ldrb	r3, [r3, r2]
    6e28:	b25b      	sxtb	r3, r3
    6e2a:	3301      	adds	r3, #1
    6e2c:	d103      	bne.n	6e36 <xQueueGenericSend+0x266>
    6e2e:	6a3b      	ldr	r3, [r7, #32]
    6e30:	2244      	movs	r2, #68	; 0x44
    6e32:	2100      	movs	r1, #0
    6e34:	5499      	strb	r1, [r3, r2]
    6e36:	6a3b      	ldr	r3, [r7, #32]
    6e38:	2245      	movs	r2, #69	; 0x45
    6e3a:	5c9b      	ldrb	r3, [r3, r2]
    6e3c:	b25b      	sxtb	r3, r3
    6e3e:	3301      	adds	r3, #1
    6e40:	d103      	bne.n	6e4a <xQueueGenericSend+0x27a>
    6e42:	6a3b      	ldr	r3, [r7, #32]
    6e44:	2245      	movs	r2, #69	; 0x45
    6e46:	2100      	movs	r1, #0
    6e48:	5499      	strb	r1, [r3, r2]
    6e4a:	4b43      	ldr	r3, [pc, #268]	; (6f58 <xQueueGenericSend+0x388>)
    6e4c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    6e4e:	1d3a      	adds	r2, r7, #4
    6e50:	2314      	movs	r3, #20
    6e52:	18fb      	adds	r3, r7, r3
    6e54:	0011      	movs	r1, r2
    6e56:	0018      	movs	r0, r3
    6e58:	4b42      	ldr	r3, [pc, #264]	; (6f64 <xQueueGenericSend+0x394>)
    6e5a:	4798      	blx	r3
    6e5c:	1e03      	subs	r3, r0, #0
    6e5e:	d000      	beq.n	6e62 <xQueueGenericSend+0x292>
    6e60:	e08a      	b.n	6f78 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    6e62:	6a3b      	ldr	r3, [r7, #32]
    6e64:	0018      	movs	r0, r3
    6e66:	4b40      	ldr	r3, [pc, #256]	; (6f68 <xQueueGenericSend+0x398>)
    6e68:	4798      	blx	r3
    6e6a:	1e03      	subs	r3, r0, #0
    6e6c:	d04f      	beq.n	6f0e <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    6e6e:	4b2d      	ldr	r3, [pc, #180]	; (6f24 <xQueueGenericSend+0x354>)
    6e70:	4798      	blx	r3
    6e72:	0003      	movs	r3, r0
    6e74:	0018      	movs	r0, r3
    6e76:	4b2c      	ldr	r3, [pc, #176]	; (6f28 <xQueueGenericSend+0x358>)
    6e78:	4798      	blx	r3
    6e7a:	0003      	movs	r3, r0
    6e7c:	001a      	movs	r2, r3
    6e7e:	4b2b      	ldr	r3, [pc, #172]	; (6f2c <xQueueGenericSend+0x35c>)
    6e80:	881b      	ldrh	r3, [r3, #0]
    6e82:	4013      	ands	r3, r2
    6e84:	b29b      	uxth	r3, r3
    6e86:	2b00      	cmp	r3, #0
    6e88:	d02e      	beq.n	6ee8 <xQueueGenericSend+0x318>
    6e8a:	6a3b      	ldr	r3, [r7, #32]
    6e8c:	0018      	movs	r0, r3
    6e8e:	4b28      	ldr	r3, [pc, #160]	; (6f30 <xQueueGenericSend+0x360>)
    6e90:	4798      	blx	r3
    6e92:	0003      	movs	r3, r0
    6e94:	001a      	movs	r2, r3
    6e96:	4b25      	ldr	r3, [pc, #148]	; (6f2c <xQueueGenericSend+0x35c>)
    6e98:	881b      	ldrh	r3, [r3, #0]
    6e9a:	4013      	ands	r3, r2
    6e9c:	b29b      	uxth	r3, r3
    6e9e:	2b00      	cmp	r3, #0
    6ea0:	d022      	beq.n	6ee8 <xQueueGenericSend+0x318>
    6ea2:	683b      	ldr	r3, [r7, #0]
    6ea4:	2b00      	cmp	r3, #0
    6ea6:	d10b      	bne.n	6ec0 <xQueueGenericSend+0x2f0>
    6ea8:	6a3b      	ldr	r3, [r7, #32]
    6eaa:	0018      	movs	r0, r3
    6eac:	4b21      	ldr	r3, [pc, #132]	; (6f34 <xQueueGenericSend+0x364>)
    6eae:	4798      	blx	r3
    6eb0:	0003      	movs	r3, r0
    6eb2:	001a      	movs	r2, r3
    6eb4:	4b20      	ldr	r3, [pc, #128]	; (6f38 <xQueueGenericSend+0x368>)
    6eb6:	5c9b      	ldrb	r3, [r3, r2]
    6eb8:	3370      	adds	r3, #112	; 0x70
    6eba:	b2db      	uxtb	r3, r3
    6ebc:	001d      	movs	r5, r3
    6ebe:	e000      	b.n	6ec2 <xQueueGenericSend+0x2f2>
    6ec0:	2575      	movs	r5, #117	; 0x75
    6ec2:	6a3b      	ldr	r3, [r7, #32]
    6ec4:	0018      	movs	r0, r3
    6ec6:	4b1b      	ldr	r3, [pc, #108]	; (6f34 <xQueueGenericSend+0x364>)
    6ec8:	4798      	blx	r3
    6eca:	0003      	movs	r3, r0
    6ecc:	001a      	movs	r2, r3
    6ece:	4b1a      	ldr	r3, [pc, #104]	; (6f38 <xQueueGenericSend+0x368>)
    6ed0:	5c9c      	ldrb	r4, [r3, r2]
    6ed2:	6a3b      	ldr	r3, [r7, #32]
    6ed4:	0018      	movs	r0, r3
    6ed6:	4b19      	ldr	r3, [pc, #100]	; (6f3c <xQueueGenericSend+0x36c>)
    6ed8:	4798      	blx	r3
    6eda:	0003      	movs	r3, r0
    6edc:	b2db      	uxtb	r3, r3
    6ede:	001a      	movs	r2, r3
    6ee0:	0021      	movs	r1, r4
    6ee2:	0028      	movs	r0, r5
    6ee4:	4b16      	ldr	r3, [pc, #88]	; (6f40 <xQueueGenericSend+0x370>)
    6ee6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    6ee8:	6a3b      	ldr	r3, [r7, #32]
    6eea:	3310      	adds	r3, #16
    6eec:	687a      	ldr	r2, [r7, #4]
    6eee:	0011      	movs	r1, r2
    6ef0:	0018      	movs	r0, r3
    6ef2:	4b1e      	ldr	r3, [pc, #120]	; (6f6c <xQueueGenericSend+0x39c>)
    6ef4:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    6ef6:	6a3b      	ldr	r3, [r7, #32]
    6ef8:	0018      	movs	r0, r3
    6efa:	4b1d      	ldr	r3, [pc, #116]	; (6f70 <xQueueGenericSend+0x3a0>)
    6efc:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    6efe:	4b1d      	ldr	r3, [pc, #116]	; (6f74 <xQueueGenericSend+0x3a4>)
    6f00:	4798      	blx	r3
    6f02:	1e03      	subs	r3, r0, #0
    6f04:	d000      	beq.n	6f08 <xQueueGenericSend+0x338>
    6f06:	e69d      	b.n	6c44 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    6f08:	4b11      	ldr	r3, [pc, #68]	; (6f50 <xQueueGenericSend+0x380>)
    6f0a:	4798      	blx	r3
    6f0c:	e69a      	b.n	6c44 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    6f0e:	6a3b      	ldr	r3, [r7, #32]
    6f10:	0018      	movs	r0, r3
    6f12:	4b17      	ldr	r3, [pc, #92]	; (6f70 <xQueueGenericSend+0x3a0>)
    6f14:	4798      	blx	r3
				( void ) xTaskResumeAll();
    6f16:	4b17      	ldr	r3, [pc, #92]	; (6f74 <xQueueGenericSend+0x3a4>)
    6f18:	4798      	blx	r3
    6f1a:	e693      	b.n	6c44 <xQueueGenericSend+0x74>
    6f1c:	0000935d 	.word	0x0000935d
    6f20:	00006639 	.word	0x00006639
    6f24:	000048cd 	.word	0x000048cd
    6f28:	00004631 	.word	0x00004631
    6f2c:	200000fc 	.word	0x200000fc
    6f30:	000046f1 	.word	0x000046f1
    6f34:	000045f1 	.word	0x000045f1
    6f38:	200000f0 	.word	0x200000f0
    6f3c:	000046d1 	.word	0x000046d1
    6f40:	00005029 	.word	0x00005029
    6f44:	00005685 	.word	0x00005685
    6f48:	00007e09 	.word	0x00007e09
    6f4c:	0000810d 	.word	0x0000810d
    6f50:	00006621 	.word	0x00006621
    6f54:	00008ecd 	.word	0x00008ecd
    6f58:	0000665d 	.word	0x0000665d
    6f5c:	0000900d 	.word	0x0000900d
    6f60:	000088f5 	.word	0x000088f5
    6f64:	00009035 	.word	0x00009035
    6f68:	0000805d 	.word	0x0000805d
    6f6c:	00008da9 	.word	0x00008da9
    6f70:	00007f39 	.word	0x00007f39
    6f74:	0000890d 	.word	0x0000890d
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    6f78:	6a3b      	ldr	r3, [r7, #32]
    6f7a:	0018      	movs	r0, r3
    6f7c:	4b22      	ldr	r3, [pc, #136]	; (7008 <xQueueGenericSend+0x438>)
    6f7e:	4798      	blx	r3
			( void ) xTaskResumeAll();
    6f80:	4b22      	ldr	r3, [pc, #136]	; (700c <xQueueGenericSend+0x43c>)
    6f82:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
    6f84:	4b22      	ldr	r3, [pc, #136]	; (7010 <xQueueGenericSend+0x440>)
    6f86:	4798      	blx	r3
    6f88:	0003      	movs	r3, r0
    6f8a:	0018      	movs	r0, r3
    6f8c:	4b21      	ldr	r3, [pc, #132]	; (7014 <xQueueGenericSend+0x444>)
    6f8e:	4798      	blx	r3
    6f90:	0003      	movs	r3, r0
    6f92:	001a      	movs	r2, r3
    6f94:	4b20      	ldr	r3, [pc, #128]	; (7018 <xQueueGenericSend+0x448>)
    6f96:	881b      	ldrh	r3, [r3, #0]
    6f98:	4013      	ands	r3, r2
    6f9a:	b29b      	uxth	r3, r3
    6f9c:	2b00      	cmp	r3, #0
    6f9e:	d02e      	beq.n	6ffe <xQueueGenericSend+0x42e>
    6fa0:	6a3b      	ldr	r3, [r7, #32]
    6fa2:	0018      	movs	r0, r3
    6fa4:	4b1d      	ldr	r3, [pc, #116]	; (701c <xQueueGenericSend+0x44c>)
    6fa6:	4798      	blx	r3
    6fa8:	0003      	movs	r3, r0
    6faa:	001a      	movs	r2, r3
    6fac:	4b1a      	ldr	r3, [pc, #104]	; (7018 <xQueueGenericSend+0x448>)
    6fae:	881b      	ldrh	r3, [r3, #0]
    6fb0:	4013      	ands	r3, r2
    6fb2:	b29b      	uxth	r3, r3
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	d022      	beq.n	6ffe <xQueueGenericSend+0x42e>
    6fb8:	683b      	ldr	r3, [r7, #0]
    6fba:	2b00      	cmp	r3, #0
    6fbc:	d10b      	bne.n	6fd6 <xQueueGenericSend+0x406>
    6fbe:	6a3b      	ldr	r3, [r7, #32]
    6fc0:	0018      	movs	r0, r3
    6fc2:	4b17      	ldr	r3, [pc, #92]	; (7020 <xQueueGenericSend+0x450>)
    6fc4:	4798      	blx	r3
    6fc6:	0003      	movs	r3, r0
    6fc8:	001a      	movs	r2, r3
    6fca:	4b16      	ldr	r3, [pc, #88]	; (7024 <xQueueGenericSend+0x454>)
    6fcc:	5c9b      	ldrb	r3, [r3, r2]
    6fce:	3348      	adds	r3, #72	; 0x48
    6fd0:	b2db      	uxtb	r3, r3
    6fd2:	001d      	movs	r5, r3
    6fd4:	e000      	b.n	6fd8 <xQueueGenericSend+0x408>
    6fd6:	254d      	movs	r5, #77	; 0x4d
    6fd8:	6a3b      	ldr	r3, [r7, #32]
    6fda:	0018      	movs	r0, r3
    6fdc:	4b10      	ldr	r3, [pc, #64]	; (7020 <xQueueGenericSend+0x450>)
    6fde:	4798      	blx	r3
    6fe0:	0003      	movs	r3, r0
    6fe2:	001a      	movs	r2, r3
    6fe4:	4b0f      	ldr	r3, [pc, #60]	; (7024 <xQueueGenericSend+0x454>)
    6fe6:	5c9c      	ldrb	r4, [r3, r2]
    6fe8:	6a3b      	ldr	r3, [r7, #32]
    6fea:	0018      	movs	r0, r3
    6fec:	4b0e      	ldr	r3, [pc, #56]	; (7028 <xQueueGenericSend+0x458>)
    6fee:	4798      	blx	r3
    6ff0:	0003      	movs	r3, r0
    6ff2:	b2db      	uxtb	r3, r3
    6ff4:	001a      	movs	r2, r3
    6ff6:	0021      	movs	r1, r4
    6ff8:	0028      	movs	r0, r5
    6ffa:	4b0c      	ldr	r3, [pc, #48]	; (702c <xQueueGenericSend+0x45c>)
    6ffc:	4798      	blx	r3
			return errQUEUE_FULL;
    6ffe:	2300      	movs	r3, #0
		}
	}
}
    7000:	0018      	movs	r0, r3
    7002:	46bd      	mov	sp, r7
    7004:	b00a      	add	sp, #40	; 0x28
    7006:	bdb0      	pop	{r4, r5, r7, pc}
    7008:	00007f39 	.word	0x00007f39
    700c:	0000890d 	.word	0x0000890d
    7010:	000048cd 	.word	0x000048cd
    7014:	00004631 	.word	0x00004631
    7018:	200000fc 	.word	0x200000fc
    701c:	000046f1 	.word	0x000046f1
    7020:	000045f1 	.word	0x000045f1
    7024:	200000f0 	.word	0x200000f0
    7028:	000046d1 	.word	0x000046d1
    702c:	00005029 	.word	0x00005029

00007030 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    7030:	b5b0      	push	{r4, r5, r7, lr}
    7032:	b088      	sub	sp, #32
    7034:	af00      	add	r7, sp, #0
    7036:	60f8      	str	r0, [r7, #12]
    7038:	60b9      	str	r1, [r7, #8]
    703a:	607a      	str	r2, [r7, #4]
    703c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    703e:	68fb      	ldr	r3, [r7, #12]
    7040:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    7042:	69bb      	ldr	r3, [r7, #24]
    7044:	2b00      	cmp	r3, #0
    7046:	d101      	bne.n	704c <xQueueGenericSendFromISR+0x1c>
    7048:	b672      	cpsid	i
    704a:	e7fe      	b.n	704a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    704c:	68bb      	ldr	r3, [r7, #8]
    704e:	2b00      	cmp	r3, #0
    7050:	d103      	bne.n	705a <xQueueGenericSendFromISR+0x2a>
    7052:	69bb      	ldr	r3, [r7, #24]
    7054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7056:	2b00      	cmp	r3, #0
    7058:	d101      	bne.n	705e <xQueueGenericSendFromISR+0x2e>
    705a:	2301      	movs	r3, #1
    705c:	e000      	b.n	7060 <xQueueGenericSendFromISR+0x30>
    705e:	2300      	movs	r3, #0
    7060:	2b00      	cmp	r3, #0
    7062:	d101      	bne.n	7068 <xQueueGenericSendFromISR+0x38>
    7064:	b672      	cpsid	i
    7066:	e7fe      	b.n	7066 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    7068:	683b      	ldr	r3, [r7, #0]
    706a:	2b02      	cmp	r3, #2
    706c:	d103      	bne.n	7076 <xQueueGenericSendFromISR+0x46>
    706e:	69bb      	ldr	r3, [r7, #24]
    7070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7072:	2b01      	cmp	r3, #1
    7074:	d101      	bne.n	707a <xQueueGenericSendFromISR+0x4a>
    7076:	2301      	movs	r3, #1
    7078:	e000      	b.n	707c <xQueueGenericSendFromISR+0x4c>
    707a:	2300      	movs	r3, #0
    707c:	2b00      	cmp	r3, #0
    707e:	d101      	bne.n	7084 <xQueueGenericSendFromISR+0x54>
    7080:	b672      	cpsid	i
    7082:	e7fe      	b.n	7082 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    7084:	4b68      	ldr	r3, [pc, #416]	; (7228 <xQueueGenericSendFromISR+0x1f8>)
    7086:	4798      	blx	r3
    7088:	0003      	movs	r3, r0
    708a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    708c:	69bb      	ldr	r3, [r7, #24]
    708e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7090:	69bb      	ldr	r3, [r7, #24]
    7092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7094:	429a      	cmp	r2, r3
    7096:	d303      	bcc.n	70a0 <xQueueGenericSendFromISR+0x70>
    7098:	683b      	ldr	r3, [r7, #0]
    709a:	2b02      	cmp	r3, #2
    709c:	d000      	beq.n	70a0 <xQueueGenericSendFromISR+0x70>
    709e:	e088      	b.n	71b2 <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    70a0:	2313      	movs	r3, #19
    70a2:	18fb      	adds	r3, r7, r3
    70a4:	69ba      	ldr	r2, [r7, #24]
    70a6:	2145      	movs	r1, #69	; 0x45
    70a8:	5c52      	ldrb	r2, [r2, r1]
    70aa:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    70ac:	69bb      	ldr	r3, [r7, #24]
    70ae:	0018      	movs	r0, r3
    70b0:	4b5e      	ldr	r3, [pc, #376]	; (722c <xQueueGenericSendFromISR+0x1fc>)
    70b2:	4798      	blx	r3
    70b4:	0003      	movs	r3, r0
    70b6:	001a      	movs	r2, r3
    70b8:	4b5d      	ldr	r3, [pc, #372]	; (7230 <xQueueGenericSendFromISR+0x200>)
    70ba:	881b      	ldrh	r3, [r3, #0]
    70bc:	4013      	ands	r3, r2
    70be:	b29b      	uxth	r3, r3
    70c0:	2b00      	cmp	r3, #0
    70c2:	d022      	beq.n	710a <xQueueGenericSendFromISR+0xda>
    70c4:	683b      	ldr	r3, [r7, #0]
    70c6:	2b00      	cmp	r3, #0
    70c8:	d10b      	bne.n	70e2 <xQueueGenericSendFromISR+0xb2>
    70ca:	69bb      	ldr	r3, [r7, #24]
    70cc:	0018      	movs	r0, r3
    70ce:	4b59      	ldr	r3, [pc, #356]	; (7234 <xQueueGenericSendFromISR+0x204>)
    70d0:	4798      	blx	r3
    70d2:	0003      	movs	r3, r0
    70d4:	001a      	movs	r2, r3
    70d6:	4b58      	ldr	r3, [pc, #352]	; (7238 <xQueueGenericSendFromISR+0x208>)
    70d8:	5c9b      	ldrb	r3, [r3, r2]
    70da:	3330      	adds	r3, #48	; 0x30
    70dc:	b2db      	uxtb	r3, r3
    70de:	001d      	movs	r5, r3
    70e0:	e000      	b.n	70e4 <xQueueGenericSendFromISR+0xb4>
    70e2:	2535      	movs	r5, #53	; 0x35
    70e4:	69bb      	ldr	r3, [r7, #24]
    70e6:	0018      	movs	r0, r3
    70e8:	4b52      	ldr	r3, [pc, #328]	; (7234 <xQueueGenericSendFromISR+0x204>)
    70ea:	4798      	blx	r3
    70ec:	0003      	movs	r3, r0
    70ee:	001a      	movs	r2, r3
    70f0:	4b51      	ldr	r3, [pc, #324]	; (7238 <xQueueGenericSendFromISR+0x208>)
    70f2:	5c9c      	ldrb	r4, [r3, r2]
    70f4:	69bb      	ldr	r3, [r7, #24]
    70f6:	0018      	movs	r0, r3
    70f8:	4b50      	ldr	r3, [pc, #320]	; (723c <xQueueGenericSendFromISR+0x20c>)
    70fa:	4798      	blx	r3
    70fc:	0003      	movs	r3, r0
    70fe:	b2db      	uxtb	r3, r3
    7100:	001a      	movs	r2, r3
    7102:	0021      	movs	r1, r4
    7104:	0028      	movs	r0, r5
    7106:	4b4e      	ldr	r3, [pc, #312]	; (7240 <xQueueGenericSendFromISR+0x210>)
    7108:	4798      	blx	r3
    710a:	69bb      	ldr	r3, [r7, #24]
    710c:	0018      	movs	r0, r3
    710e:	4b49      	ldr	r3, [pc, #292]	; (7234 <xQueueGenericSendFromISR+0x204>)
    7110:	4798      	blx	r3
    7112:	0003      	movs	r3, r0
    7114:	001a      	movs	r2, r3
    7116:	4b48      	ldr	r3, [pc, #288]	; (7238 <xQueueGenericSendFromISR+0x208>)
    7118:	5c9c      	ldrb	r4, [r3, r2]
    711a:	69bb      	ldr	r3, [r7, #24]
    711c:	0018      	movs	r0, r3
    711e:	4b47      	ldr	r3, [pc, #284]	; (723c <xQueueGenericSendFromISR+0x20c>)
    7120:	4798      	blx	r3
    7122:	0003      	movs	r3, r0
    7124:	b2d9      	uxtb	r1, r3
    7126:	69bb      	ldr	r3, [r7, #24]
    7128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    712a:	b2db      	uxtb	r3, r3
    712c:	3301      	adds	r3, #1
    712e:	b2db      	uxtb	r3, r3
    7130:	001a      	movs	r2, r3
    7132:	0020      	movs	r0, r4
    7134:	4b43      	ldr	r3, [pc, #268]	; (7244 <xQueueGenericSendFromISR+0x214>)
    7136:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    7138:	683a      	ldr	r2, [r7, #0]
    713a:	68b9      	ldr	r1, [r7, #8]
    713c:	69bb      	ldr	r3, [r7, #24]
    713e:	0018      	movs	r0, r3
    7140:	4b41      	ldr	r3, [pc, #260]	; (7248 <xQueueGenericSendFromISR+0x218>)
    7142:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    7144:	2313      	movs	r3, #19
    7146:	18fb      	adds	r3, r7, r3
    7148:	781b      	ldrb	r3, [r3, #0]
    714a:	b25b      	sxtb	r3, r3
    714c:	3301      	adds	r3, #1
    714e:	d124      	bne.n	719a <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    7150:	69bb      	ldr	r3, [r7, #24]
    7152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7154:	2b00      	cmp	r3, #0
    7156:	d00e      	beq.n	7176 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    7158:	683a      	ldr	r2, [r7, #0]
    715a:	69bb      	ldr	r3, [r7, #24]
    715c:	0011      	movs	r1, r2
    715e:	0018      	movs	r0, r3
    7160:	4b3a      	ldr	r3, [pc, #232]	; (724c <xQueueGenericSendFromISR+0x21c>)
    7162:	4798      	blx	r3
    7164:	1e03      	subs	r3, r0, #0
    7166:	d021      	beq.n	71ac <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    7168:	687b      	ldr	r3, [r7, #4]
    716a:	2b00      	cmp	r3, #0
    716c:	d01e      	beq.n	71ac <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    716e:	687b      	ldr	r3, [r7, #4]
    7170:	2201      	movs	r2, #1
    7172:	601a      	str	r2, [r3, #0]
    7174:	e01a      	b.n	71ac <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    7176:	69bb      	ldr	r3, [r7, #24]
    7178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    717a:	2b00      	cmp	r3, #0
    717c:	d016      	beq.n	71ac <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    717e:	69bb      	ldr	r3, [r7, #24]
    7180:	3324      	adds	r3, #36	; 0x24
    7182:	0018      	movs	r0, r3
    7184:	4b32      	ldr	r3, [pc, #200]	; (7250 <xQueueGenericSendFromISR+0x220>)
    7186:	4798      	blx	r3
    7188:	1e03      	subs	r3, r0, #0
    718a:	d00f      	beq.n	71ac <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    718c:	687b      	ldr	r3, [r7, #4]
    718e:	2b00      	cmp	r3, #0
    7190:	d00c      	beq.n	71ac <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    7192:	687b      	ldr	r3, [r7, #4]
    7194:	2201      	movs	r2, #1
    7196:	601a      	str	r2, [r3, #0]
    7198:	e008      	b.n	71ac <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    719a:	2313      	movs	r3, #19
    719c:	18fb      	adds	r3, r7, r3
    719e:	781b      	ldrb	r3, [r3, #0]
    71a0:	3301      	adds	r3, #1
    71a2:	b2db      	uxtb	r3, r3
    71a4:	b259      	sxtb	r1, r3
    71a6:	69bb      	ldr	r3, [r7, #24]
    71a8:	2245      	movs	r2, #69	; 0x45
    71aa:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    71ac:	2301      	movs	r3, #1
    71ae:	61fb      	str	r3, [r7, #28]
		{
    71b0:	e030      	b.n	7214 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    71b2:	69bb      	ldr	r3, [r7, #24]
    71b4:	0018      	movs	r0, r3
    71b6:	4b1d      	ldr	r3, [pc, #116]	; (722c <xQueueGenericSendFromISR+0x1fc>)
    71b8:	4798      	blx	r3
    71ba:	0003      	movs	r3, r0
    71bc:	001a      	movs	r2, r3
    71be:	4b1c      	ldr	r3, [pc, #112]	; (7230 <xQueueGenericSendFromISR+0x200>)
    71c0:	881b      	ldrh	r3, [r3, #0]
    71c2:	4013      	ands	r3, r2
    71c4:	b29b      	uxth	r3, r3
    71c6:	2b00      	cmp	r3, #0
    71c8:	d022      	beq.n	7210 <xQueueGenericSendFromISR+0x1e0>
    71ca:	683b      	ldr	r3, [r7, #0]
    71cc:	2b00      	cmp	r3, #0
    71ce:	d10b      	bne.n	71e8 <xQueueGenericSendFromISR+0x1b8>
    71d0:	69bb      	ldr	r3, [r7, #24]
    71d2:	0018      	movs	r0, r3
    71d4:	4b17      	ldr	r3, [pc, #92]	; (7234 <xQueueGenericSendFromISR+0x204>)
    71d6:	4798      	blx	r3
    71d8:	0003      	movs	r3, r0
    71da:	001a      	movs	r2, r3
    71dc:	4b16      	ldr	r3, [pc, #88]	; (7238 <xQueueGenericSendFromISR+0x208>)
    71de:	5c9b      	ldrb	r3, [r3, r2]
    71e0:	3358      	adds	r3, #88	; 0x58
    71e2:	b2db      	uxtb	r3, r3
    71e4:	001d      	movs	r5, r3
    71e6:	e000      	b.n	71ea <xQueueGenericSendFromISR+0x1ba>
    71e8:	255d      	movs	r5, #93	; 0x5d
    71ea:	69bb      	ldr	r3, [r7, #24]
    71ec:	0018      	movs	r0, r3
    71ee:	4b11      	ldr	r3, [pc, #68]	; (7234 <xQueueGenericSendFromISR+0x204>)
    71f0:	4798      	blx	r3
    71f2:	0003      	movs	r3, r0
    71f4:	001a      	movs	r2, r3
    71f6:	4b10      	ldr	r3, [pc, #64]	; (7238 <xQueueGenericSendFromISR+0x208>)
    71f8:	5c9c      	ldrb	r4, [r3, r2]
    71fa:	69bb      	ldr	r3, [r7, #24]
    71fc:	0018      	movs	r0, r3
    71fe:	4b0f      	ldr	r3, [pc, #60]	; (723c <xQueueGenericSendFromISR+0x20c>)
    7200:	4798      	blx	r3
    7202:	0003      	movs	r3, r0
    7204:	b2db      	uxtb	r3, r3
    7206:	001a      	movs	r2, r3
    7208:	0021      	movs	r1, r4
    720a:	0028      	movs	r0, r5
    720c:	4b0c      	ldr	r3, [pc, #48]	; (7240 <xQueueGenericSendFromISR+0x210>)
    720e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    7210:	2300      	movs	r3, #0
    7212:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    7214:	697b      	ldr	r3, [r7, #20]
    7216:	0018      	movs	r0, r3
    7218:	4b0e      	ldr	r3, [pc, #56]	; (7254 <xQueueGenericSendFromISR+0x224>)
    721a:	4798      	blx	r3

	return xReturn;
    721c:	69fb      	ldr	r3, [r7, #28]
}
    721e:	0018      	movs	r0, r3
    7220:	46bd      	mov	sp, r7
    7222:	b008      	add	sp, #32
    7224:	bdb0      	pop	{r4, r5, r7, pc}
    7226:	46c0      	nop			; (mov r8, r8)
    7228:	0000668d 	.word	0x0000668d
    722c:	000046f1 	.word	0x000046f1
    7230:	200000fc 	.word	0x200000fc
    7234:	000045f1 	.word	0x000045f1
    7238:	200000f0 	.word	0x200000f0
    723c:	000046d1 	.word	0x000046d1
    7240:	00005029 	.word	0x00005029
    7244:	00005685 	.word	0x00005685
    7248:	00007e09 	.word	0x00007e09
    724c:	0000810d 	.word	0x0000810d
    7250:	00008ecd 	.word	0x00008ecd
    7254:	00006699 	.word	0x00006699

00007258 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
    7258:	b580      	push	{r7, lr}
    725a:	b082      	sub	sp, #8
    725c:	af00      	add	r7, sp, #0
    725e:	6078      	str	r0, [r7, #4]
    7260:	6039      	str	r1, [r7, #0]
    7262:	6839      	ldr	r1, [r7, #0]
    7264:	687b      	ldr	r3, [r7, #4]
    7266:	2200      	movs	r2, #0
    7268:	0018      	movs	r0, r3
    726a:	4b03      	ldr	r3, [pc, #12]	; (7278 <xQueueGiveFromISR+0x20>)
    726c:	4798      	blx	r3
    726e:	0003      	movs	r3, r0
    7270:	0018      	movs	r0, r3
    7272:	46bd      	mov	sp, r7
    7274:	b002      	add	sp, #8
    7276:	bd80      	pop	{r7, pc}
    7278:	0000727d 	.word	0x0000727d

0000727c <MyWrapper>:
{
    727c:	b5b0      	push	{r4, r5, r7, lr}
    727e:	b08a      	sub	sp, #40	; 0x28
    7280:	af00      	add	r7, sp, #0
    7282:	60f8      	str	r0, [r7, #12]
    7284:	60b9      	str	r1, [r7, #8]
    7286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7288:	68fb      	ldr	r3, [r7, #12]
    728a:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
    728c:	6a3b      	ldr	r3, [r7, #32]
    728e:	2b00      	cmp	r3, #0
    7290:	d101      	bne.n	7296 <MyWrapper+0x1a>
    7292:	b672      	cpsid	i
    7294:	e7fe      	b.n	7294 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    7296:	6a3b      	ldr	r3, [r7, #32]
    7298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    729a:	2b00      	cmp	r3, #0
    729c:	d001      	beq.n	72a2 <MyWrapper+0x26>
    729e:	b672      	cpsid	i
    72a0:	e7fe      	b.n	72a0 <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    72a2:	6a3b      	ldr	r3, [r7, #32]
    72a4:	681b      	ldr	r3, [r3, #0]
    72a6:	2b00      	cmp	r3, #0
    72a8:	d103      	bne.n	72b2 <MyWrapper+0x36>
    72aa:	6a3b      	ldr	r3, [r7, #32]
    72ac:	685b      	ldr	r3, [r3, #4]
    72ae:	2b00      	cmp	r3, #0
    72b0:	d101      	bne.n	72b6 <MyWrapper+0x3a>
    72b2:	2301      	movs	r3, #1
    72b4:	e000      	b.n	72b8 <MyWrapper+0x3c>
    72b6:	2300      	movs	r3, #0
    72b8:	2b00      	cmp	r3, #0
    72ba:	d101      	bne.n	72c0 <MyWrapper+0x44>
    72bc:	b672      	cpsid	i
    72be:	e7fe      	b.n	72be <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    72c0:	4b66      	ldr	r3, [pc, #408]	; (745c <MyWrapper+0x1e0>)
    72c2:	4798      	blx	r3
    72c4:	0003      	movs	r3, r0
    72c6:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    72c8:	6a3b      	ldr	r3, [r7, #32]
    72ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    72cc:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    72ce:	6a3b      	ldr	r3, [r7, #32]
    72d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    72d2:	69bb      	ldr	r3, [r7, #24]
    72d4:	429a      	cmp	r2, r3
    72d6:	d800      	bhi.n	72da <MyWrapper+0x5e>
    72d8:	e085      	b.n	73e6 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    72da:	2317      	movs	r3, #23
    72dc:	18fb      	adds	r3, r7, r3
    72de:	6a3a      	ldr	r2, [r7, #32]
    72e0:	2145      	movs	r1, #69	; 0x45
    72e2:	5c52      	ldrb	r2, [r2, r1]
    72e4:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    72e6:	6a3b      	ldr	r3, [r7, #32]
    72e8:	0018      	movs	r0, r3
    72ea:	4b5d      	ldr	r3, [pc, #372]	; (7460 <MyWrapper+0x1e4>)
    72ec:	4798      	blx	r3
    72ee:	0003      	movs	r3, r0
    72f0:	001a      	movs	r2, r3
    72f2:	4b5c      	ldr	r3, [pc, #368]	; (7464 <MyWrapper+0x1e8>)
    72f4:	881b      	ldrh	r3, [r3, #0]
    72f6:	4013      	ands	r3, r2
    72f8:	b29b      	uxth	r3, r3
    72fa:	2b00      	cmp	r3, #0
    72fc:	d022      	beq.n	7344 <MyWrapper+0xc8>
    72fe:	687b      	ldr	r3, [r7, #4]
    7300:	2b00      	cmp	r3, #0
    7302:	d10b      	bne.n	731c <MyWrapper+0xa0>
    7304:	6a3b      	ldr	r3, [r7, #32]
    7306:	0018      	movs	r0, r3
    7308:	4b57      	ldr	r3, [pc, #348]	; (7468 <MyWrapper+0x1ec>)
    730a:	4798      	blx	r3
    730c:	0003      	movs	r3, r0
    730e:	001a      	movs	r2, r3
    7310:	4b56      	ldr	r3, [pc, #344]	; (746c <MyWrapper+0x1f0>)
    7312:	5c9b      	ldrb	r3, [r3, r2]
    7314:	3330      	adds	r3, #48	; 0x30
    7316:	b2db      	uxtb	r3, r3
    7318:	001d      	movs	r5, r3
    731a:	e000      	b.n	731e <MyWrapper+0xa2>
    731c:	2535      	movs	r5, #53	; 0x35
    731e:	6a3b      	ldr	r3, [r7, #32]
    7320:	0018      	movs	r0, r3
    7322:	4b51      	ldr	r3, [pc, #324]	; (7468 <MyWrapper+0x1ec>)
    7324:	4798      	blx	r3
    7326:	0003      	movs	r3, r0
    7328:	001a      	movs	r2, r3
    732a:	4b50      	ldr	r3, [pc, #320]	; (746c <MyWrapper+0x1f0>)
    732c:	5c9c      	ldrb	r4, [r3, r2]
    732e:	6a3b      	ldr	r3, [r7, #32]
    7330:	0018      	movs	r0, r3
    7332:	4b4f      	ldr	r3, [pc, #316]	; (7470 <MyWrapper+0x1f4>)
    7334:	4798      	blx	r3
    7336:	0003      	movs	r3, r0
    7338:	b2db      	uxtb	r3, r3
    733a:	001a      	movs	r2, r3
    733c:	0021      	movs	r1, r4
    733e:	0028      	movs	r0, r5
    7340:	4b4c      	ldr	r3, [pc, #304]	; (7474 <MyWrapper+0x1f8>)
    7342:	4798      	blx	r3
    7344:	6a3b      	ldr	r3, [r7, #32]
    7346:	0018      	movs	r0, r3
    7348:	4b47      	ldr	r3, [pc, #284]	; (7468 <MyWrapper+0x1ec>)
    734a:	4798      	blx	r3
    734c:	0003      	movs	r3, r0
    734e:	001a      	movs	r2, r3
    7350:	4b46      	ldr	r3, [pc, #280]	; (746c <MyWrapper+0x1f0>)
    7352:	5c9c      	ldrb	r4, [r3, r2]
    7354:	6a3b      	ldr	r3, [r7, #32]
    7356:	0018      	movs	r0, r3
    7358:	4b45      	ldr	r3, [pc, #276]	; (7470 <MyWrapper+0x1f4>)
    735a:	4798      	blx	r3
    735c:	0003      	movs	r3, r0
    735e:	b2d9      	uxtb	r1, r3
    7360:	6a3b      	ldr	r3, [r7, #32]
    7362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7364:	b2db      	uxtb	r3, r3
    7366:	3301      	adds	r3, #1
    7368:	b2db      	uxtb	r3, r3
    736a:	001a      	movs	r2, r3
    736c:	0020      	movs	r0, r4
    736e:	4b42      	ldr	r3, [pc, #264]	; (7478 <MyWrapper+0x1fc>)
    7370:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    7372:	69bb      	ldr	r3, [r7, #24]
    7374:	1c5a      	adds	r2, r3, #1
    7376:	6a3b      	ldr	r3, [r7, #32]
    7378:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    737a:	2317      	movs	r3, #23
    737c:	18fb      	adds	r3, r7, r3
    737e:	781b      	ldrb	r3, [r3, #0]
    7380:	b25b      	sxtb	r3, r3
    7382:	3301      	adds	r3, #1
    7384:	d123      	bne.n	73ce <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    7386:	6a3b      	ldr	r3, [r7, #32]
    7388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    738a:	2b00      	cmp	r3, #0
    738c:	d00d      	beq.n	73aa <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    738e:	6a3b      	ldr	r3, [r7, #32]
    7390:	2100      	movs	r1, #0
    7392:	0018      	movs	r0, r3
    7394:	4b39      	ldr	r3, [pc, #228]	; (747c <MyWrapper+0x200>)
    7396:	4798      	blx	r3
    7398:	1e03      	subs	r3, r0, #0
    739a:	d021      	beq.n	73e0 <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    739c:	68bb      	ldr	r3, [r7, #8]
    739e:	2b00      	cmp	r3, #0
    73a0:	d01e      	beq.n	73e0 <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    73a2:	68bb      	ldr	r3, [r7, #8]
    73a4:	2201      	movs	r2, #1
    73a6:	601a      	str	r2, [r3, #0]
    73a8:	e01a      	b.n	73e0 <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    73aa:	6a3b      	ldr	r3, [r7, #32]
    73ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    73ae:	2b00      	cmp	r3, #0
    73b0:	d016      	beq.n	73e0 <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    73b2:	6a3b      	ldr	r3, [r7, #32]
    73b4:	3324      	adds	r3, #36	; 0x24
    73b6:	0018      	movs	r0, r3
    73b8:	4b31      	ldr	r3, [pc, #196]	; (7480 <MyWrapper+0x204>)
    73ba:	4798      	blx	r3
    73bc:	1e03      	subs	r3, r0, #0
    73be:	d00f      	beq.n	73e0 <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    73c0:	68bb      	ldr	r3, [r7, #8]
    73c2:	2b00      	cmp	r3, #0
    73c4:	d00c      	beq.n	73e0 <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    73c6:	68bb      	ldr	r3, [r7, #8]
    73c8:	2201      	movs	r2, #1
    73ca:	601a      	str	r2, [r3, #0]
    73cc:	e008      	b.n	73e0 <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    73ce:	2317      	movs	r3, #23
    73d0:	18fb      	adds	r3, r7, r3
    73d2:	781b      	ldrb	r3, [r3, #0]
    73d4:	3301      	adds	r3, #1
    73d6:	b2db      	uxtb	r3, r3
    73d8:	b259      	sxtb	r1, r3
    73da:	6a3b      	ldr	r3, [r7, #32]
    73dc:	2245      	movs	r2, #69	; 0x45
    73de:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    73e0:	2301      	movs	r3, #1
    73e2:	627b      	str	r3, [r7, #36]	; 0x24
    73e4:	e030      	b.n	7448 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    73e6:	6a3b      	ldr	r3, [r7, #32]
    73e8:	0018      	movs	r0, r3
    73ea:	4b1d      	ldr	r3, [pc, #116]	; (7460 <MyWrapper+0x1e4>)
    73ec:	4798      	blx	r3
    73ee:	0003      	movs	r3, r0
    73f0:	001a      	movs	r2, r3
    73f2:	4b1c      	ldr	r3, [pc, #112]	; (7464 <MyWrapper+0x1e8>)
    73f4:	881b      	ldrh	r3, [r3, #0]
    73f6:	4013      	ands	r3, r2
    73f8:	b29b      	uxth	r3, r3
    73fa:	2b00      	cmp	r3, #0
    73fc:	d022      	beq.n	7444 <MyWrapper+0x1c8>
    73fe:	687b      	ldr	r3, [r7, #4]
    7400:	2b00      	cmp	r3, #0
    7402:	d10b      	bne.n	741c <MyWrapper+0x1a0>
    7404:	6a3b      	ldr	r3, [r7, #32]
    7406:	0018      	movs	r0, r3
    7408:	4b17      	ldr	r3, [pc, #92]	; (7468 <MyWrapper+0x1ec>)
    740a:	4798      	blx	r3
    740c:	0003      	movs	r3, r0
    740e:	001a      	movs	r2, r3
    7410:	4b16      	ldr	r3, [pc, #88]	; (746c <MyWrapper+0x1f0>)
    7412:	5c9b      	ldrb	r3, [r3, r2]
    7414:	3358      	adds	r3, #88	; 0x58
    7416:	b2db      	uxtb	r3, r3
    7418:	001d      	movs	r5, r3
    741a:	e000      	b.n	741e <MyWrapper+0x1a2>
    741c:	255d      	movs	r5, #93	; 0x5d
    741e:	6a3b      	ldr	r3, [r7, #32]
    7420:	0018      	movs	r0, r3
    7422:	4b11      	ldr	r3, [pc, #68]	; (7468 <MyWrapper+0x1ec>)
    7424:	4798      	blx	r3
    7426:	0003      	movs	r3, r0
    7428:	001a      	movs	r2, r3
    742a:	4b10      	ldr	r3, [pc, #64]	; (746c <MyWrapper+0x1f0>)
    742c:	5c9c      	ldrb	r4, [r3, r2]
    742e:	6a3b      	ldr	r3, [r7, #32]
    7430:	0018      	movs	r0, r3
    7432:	4b0f      	ldr	r3, [pc, #60]	; (7470 <MyWrapper+0x1f4>)
    7434:	4798      	blx	r3
    7436:	0003      	movs	r3, r0
    7438:	b2db      	uxtb	r3, r3
    743a:	001a      	movs	r2, r3
    743c:	0021      	movs	r1, r4
    743e:	0028      	movs	r0, r5
    7440:	4b0c      	ldr	r3, [pc, #48]	; (7474 <MyWrapper+0x1f8>)
    7442:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    7444:	2300      	movs	r3, #0
    7446:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    7448:	69fb      	ldr	r3, [r7, #28]
    744a:	0018      	movs	r0, r3
    744c:	4b0d      	ldr	r3, [pc, #52]	; (7484 <MyWrapper+0x208>)
    744e:	4798      	blx	r3

	return xReturn;
    7450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7452:	0018      	movs	r0, r3
    7454:	46bd      	mov	sp, r7
    7456:	b00a      	add	sp, #40	; 0x28
    7458:	bdb0      	pop	{r4, r5, r7, pc}
    745a:	46c0      	nop			; (mov r8, r8)
    745c:	0000668d 	.word	0x0000668d
    7460:	000046f1 	.word	0x000046f1
    7464:	200000fc 	.word	0x200000fc
    7468:	000045f1 	.word	0x000045f1
    746c:	200000f0 	.word	0x200000f0
    7470:	000046d1 	.word	0x000046d1
    7474:	00005029 	.word	0x00005029
    7478:	00005685 	.word	0x00005685
    747c:	0000810d 	.word	0x0000810d
    7480:	00008ecd 	.word	0x00008ecd
    7484:	00006699 	.word	0x00006699

00007488 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    7488:	b5b0      	push	{r4, r5, r7, lr}
    748a:	b08a      	sub	sp, #40	; 0x28
    748c:	af00      	add	r7, sp, #0
    748e:	60f8      	str	r0, [r7, #12]
    7490:	60b9      	str	r1, [r7, #8]
    7492:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    7494:	2300      	movs	r3, #0
    7496:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7498:	68fb      	ldr	r3, [r7, #12]
    749a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    749c:	6a3b      	ldr	r3, [r7, #32]
    749e:	2b00      	cmp	r3, #0
    74a0:	d101      	bne.n	74a6 <xQueueReceive+0x1e>
    74a2:	b672      	cpsid	i
    74a4:	e7fe      	b.n	74a4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    74a6:	68bb      	ldr	r3, [r7, #8]
    74a8:	2b00      	cmp	r3, #0
    74aa:	d103      	bne.n	74b4 <xQueueReceive+0x2c>
    74ac:	6a3b      	ldr	r3, [r7, #32]
    74ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    74b0:	2b00      	cmp	r3, #0
    74b2:	d101      	bne.n	74b8 <xQueueReceive+0x30>
    74b4:	2301      	movs	r3, #1
    74b6:	e000      	b.n	74ba <xQueueReceive+0x32>
    74b8:	2300      	movs	r3, #0
    74ba:	2b00      	cmp	r3, #0
    74bc:	d101      	bne.n	74c2 <xQueueReceive+0x3a>
    74be:	b672      	cpsid	i
    74c0:	e7fe      	b.n	74c0 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    74c2:	4bbf      	ldr	r3, [pc, #764]	; (77c0 <xQueueReceive+0x338>)
    74c4:	4798      	blx	r3
    74c6:	1e03      	subs	r3, r0, #0
    74c8:	d102      	bne.n	74d0 <xQueueReceive+0x48>
    74ca:	687b      	ldr	r3, [r7, #4]
    74cc:	2b00      	cmp	r3, #0
    74ce:	d101      	bne.n	74d4 <xQueueReceive+0x4c>
    74d0:	2301      	movs	r3, #1
    74d2:	e000      	b.n	74d6 <xQueueReceive+0x4e>
    74d4:	2300      	movs	r3, #0
    74d6:	2b00      	cmp	r3, #0
    74d8:	d101      	bne.n	74de <xQueueReceive+0x56>
    74da:	b672      	cpsid	i
    74dc:	e7fe      	b.n	74dc <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    74de:	4bb9      	ldr	r3, [pc, #740]	; (77c4 <xQueueReceive+0x33c>)
    74e0:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    74e2:	6a3b      	ldr	r3, [r7, #32]
    74e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    74e6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    74e8:	69fb      	ldr	r3, [r7, #28]
    74ea:	2b00      	cmp	r3, #0
    74ec:	d100      	bne.n	74f0 <xQueueReceive+0x68>
    74ee:	e07d      	b.n	75ec <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    74f0:	68ba      	ldr	r2, [r7, #8]
    74f2:	6a3b      	ldr	r3, [r7, #32]
    74f4:	0011      	movs	r1, r2
    74f6:	0018      	movs	r0, r3
    74f8:	4bb3      	ldr	r3, [pc, #716]	; (77c8 <xQueueReceive+0x340>)
    74fa:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
    74fc:	4bb3      	ldr	r3, [pc, #716]	; (77cc <xQueueReceive+0x344>)
    74fe:	4798      	blx	r3
    7500:	0003      	movs	r3, r0
    7502:	0018      	movs	r0, r3
    7504:	4bb2      	ldr	r3, [pc, #712]	; (77d0 <xQueueReceive+0x348>)
    7506:	4798      	blx	r3
    7508:	0003      	movs	r3, r0
    750a:	001a      	movs	r2, r3
    750c:	4bb1      	ldr	r3, [pc, #708]	; (77d4 <xQueueReceive+0x34c>)
    750e:	881b      	ldrh	r3, [r3, #0]
    7510:	4013      	ands	r3, r2
    7512:	b29b      	uxth	r3, r3
    7514:	2b00      	cmp	r3, #0
    7516:	d029      	beq.n	756c <xQueueReceive+0xe4>
    7518:	6a3b      	ldr	r3, [r7, #32]
    751a:	0018      	movs	r0, r3
    751c:	4bae      	ldr	r3, [pc, #696]	; (77d8 <xQueueReceive+0x350>)
    751e:	4798      	blx	r3
    7520:	0003      	movs	r3, r0
    7522:	001a      	movs	r2, r3
    7524:	4bab      	ldr	r3, [pc, #684]	; (77d4 <xQueueReceive+0x34c>)
    7526:	881b      	ldrh	r3, [r3, #0]
    7528:	4013      	ands	r3, r2
    752a:	b29b      	uxth	r3, r3
    752c:	2b00      	cmp	r3, #0
    752e:	d01d      	beq.n	756c <xQueueReceive+0xe4>
    7530:	6a3b      	ldr	r3, [r7, #32]
    7532:	0018      	movs	r0, r3
    7534:	4ba9      	ldr	r3, [pc, #676]	; (77dc <xQueueReceive+0x354>)
    7536:	4798      	blx	r3
    7538:	0003      	movs	r3, r0
    753a:	001a      	movs	r2, r3
    753c:	4ba8      	ldr	r3, [pc, #672]	; (77e0 <xQueueReceive+0x358>)
    753e:	5c9b      	ldrb	r3, [r3, r2]
    7540:	3328      	adds	r3, #40	; 0x28
    7542:	b2db      	uxtb	r3, r3
    7544:	001d      	movs	r5, r3
    7546:	6a3b      	ldr	r3, [r7, #32]
    7548:	0018      	movs	r0, r3
    754a:	4ba4      	ldr	r3, [pc, #656]	; (77dc <xQueueReceive+0x354>)
    754c:	4798      	blx	r3
    754e:	0003      	movs	r3, r0
    7550:	001a      	movs	r2, r3
    7552:	4ba3      	ldr	r3, [pc, #652]	; (77e0 <xQueueReceive+0x358>)
    7554:	5c9c      	ldrb	r4, [r3, r2]
    7556:	6a3b      	ldr	r3, [r7, #32]
    7558:	0018      	movs	r0, r3
    755a:	4ba2      	ldr	r3, [pc, #648]	; (77e4 <xQueueReceive+0x35c>)
    755c:	4798      	blx	r3
    755e:	0003      	movs	r3, r0
    7560:	b2db      	uxtb	r3, r3
    7562:	001a      	movs	r2, r3
    7564:	0021      	movs	r1, r4
    7566:	0028      	movs	r0, r5
    7568:	4b9f      	ldr	r3, [pc, #636]	; (77e8 <xQueueReceive+0x360>)
    756a:	4798      	blx	r3
    756c:	6a3b      	ldr	r3, [r7, #32]
    756e:	0018      	movs	r0, r3
    7570:	4b9a      	ldr	r3, [pc, #616]	; (77dc <xQueueReceive+0x354>)
    7572:	4798      	blx	r3
    7574:	0003      	movs	r3, r0
    7576:	001a      	movs	r2, r3
    7578:	4b99      	ldr	r3, [pc, #612]	; (77e0 <xQueueReceive+0x358>)
    757a:	5c9c      	ldrb	r4, [r3, r2]
    757c:	6a3b      	ldr	r3, [r7, #32]
    757e:	0018      	movs	r0, r3
    7580:	4b98      	ldr	r3, [pc, #608]	; (77e4 <xQueueReceive+0x35c>)
    7582:	4798      	blx	r3
    7584:	0003      	movs	r3, r0
    7586:	b2dd      	uxtb	r5, r3
    7588:	6a3b      	ldr	r3, [r7, #32]
    758a:	0018      	movs	r0, r3
    758c:	4b93      	ldr	r3, [pc, #588]	; (77dc <xQueueReceive+0x354>)
    758e:	4798      	blx	r3
    7590:	0003      	movs	r3, r0
    7592:	001a      	movs	r2, r3
    7594:	4b92      	ldr	r3, [pc, #584]	; (77e0 <xQueueReceive+0x358>)
    7596:	5c9b      	ldrb	r3, [r3, r2]
    7598:	2b02      	cmp	r3, #2
    759a:	d108      	bne.n	75ae <xQueueReceive+0x126>
    759c:	4b8b      	ldr	r3, [pc, #556]	; (77cc <xQueueReceive+0x344>)
    759e:	4798      	blx	r3
    75a0:	0003      	movs	r3, r0
    75a2:	0018      	movs	r0, r3
    75a4:	4b91      	ldr	r3, [pc, #580]	; (77ec <xQueueReceive+0x364>)
    75a6:	4798      	blx	r3
    75a8:	0003      	movs	r3, r0
    75aa:	b2db      	uxtb	r3, r3
    75ac:	e004      	b.n	75b8 <xQueueReceive+0x130>
    75ae:	6a3b      	ldr	r3, [r7, #32]
    75b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    75b2:	b2db      	uxtb	r3, r3
    75b4:	3b01      	subs	r3, #1
    75b6:	b2db      	uxtb	r3, r3
    75b8:	001a      	movs	r2, r3
    75ba:	0029      	movs	r1, r5
    75bc:	0020      	movs	r0, r4
    75be:	4b8c      	ldr	r3, [pc, #560]	; (77f0 <xQueueReceive+0x368>)
    75c0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    75c2:	69fb      	ldr	r3, [r7, #28]
    75c4:	1e5a      	subs	r2, r3, #1
    75c6:	6a3b      	ldr	r3, [r7, #32]
    75c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    75ca:	6a3b      	ldr	r3, [r7, #32]
    75cc:	691b      	ldr	r3, [r3, #16]
    75ce:	2b00      	cmp	r3, #0
    75d0:	d008      	beq.n	75e4 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    75d2:	6a3b      	ldr	r3, [r7, #32]
    75d4:	3310      	adds	r3, #16
    75d6:	0018      	movs	r0, r3
    75d8:	4b86      	ldr	r3, [pc, #536]	; (77f4 <xQueueReceive+0x36c>)
    75da:	4798      	blx	r3
    75dc:	1e03      	subs	r3, r0, #0
    75de:	d001      	beq.n	75e4 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    75e0:	4b85      	ldr	r3, [pc, #532]	; (77f8 <xQueueReceive+0x370>)
    75e2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    75e4:	4b85      	ldr	r3, [pc, #532]	; (77fc <xQueueReceive+0x374>)
    75e6:	4798      	blx	r3
				return pdPASS;
    75e8:	2301      	movs	r3, #1
    75ea:	e15f      	b.n	78ac <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    75ec:	687b      	ldr	r3, [r7, #4]
    75ee:	2b00      	cmp	r3, #0
    75f0:	d13b      	bne.n	766a <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    75f2:	4b82      	ldr	r3, [pc, #520]	; (77fc <xQueueReceive+0x374>)
    75f4:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    75f6:	4b75      	ldr	r3, [pc, #468]	; (77cc <xQueueReceive+0x344>)
    75f8:	4798      	blx	r3
    75fa:	0003      	movs	r3, r0
    75fc:	0018      	movs	r0, r3
    75fe:	4b74      	ldr	r3, [pc, #464]	; (77d0 <xQueueReceive+0x348>)
    7600:	4798      	blx	r3
    7602:	0003      	movs	r3, r0
    7604:	001a      	movs	r2, r3
    7606:	4b73      	ldr	r3, [pc, #460]	; (77d4 <xQueueReceive+0x34c>)
    7608:	881b      	ldrh	r3, [r3, #0]
    760a:	4013      	ands	r3, r2
    760c:	b29b      	uxth	r3, r3
    760e:	2b00      	cmp	r3, #0
    7610:	d029      	beq.n	7666 <xQueueReceive+0x1de>
    7612:	6a3b      	ldr	r3, [r7, #32]
    7614:	0018      	movs	r0, r3
    7616:	4b70      	ldr	r3, [pc, #448]	; (77d8 <xQueueReceive+0x350>)
    7618:	4798      	blx	r3
    761a:	0003      	movs	r3, r0
    761c:	001a      	movs	r2, r3
    761e:	4b6d      	ldr	r3, [pc, #436]	; (77d4 <xQueueReceive+0x34c>)
    7620:	881b      	ldrh	r3, [r3, #0]
    7622:	4013      	ands	r3, r2
    7624:	b29b      	uxth	r3, r3
    7626:	2b00      	cmp	r3, #0
    7628:	d01d      	beq.n	7666 <xQueueReceive+0x1de>
    762a:	6a3b      	ldr	r3, [r7, #32]
    762c:	0018      	movs	r0, r3
    762e:	4b6b      	ldr	r3, [pc, #428]	; (77dc <xQueueReceive+0x354>)
    7630:	4798      	blx	r3
    7632:	0003      	movs	r3, r0
    7634:	001a      	movs	r2, r3
    7636:	4b6a      	ldr	r3, [pc, #424]	; (77e0 <xQueueReceive+0x358>)
    7638:	5c9b      	ldrb	r3, [r3, r2]
    763a:	3350      	adds	r3, #80	; 0x50
    763c:	b2db      	uxtb	r3, r3
    763e:	001d      	movs	r5, r3
    7640:	6a3b      	ldr	r3, [r7, #32]
    7642:	0018      	movs	r0, r3
    7644:	4b65      	ldr	r3, [pc, #404]	; (77dc <xQueueReceive+0x354>)
    7646:	4798      	blx	r3
    7648:	0003      	movs	r3, r0
    764a:	001a      	movs	r2, r3
    764c:	4b64      	ldr	r3, [pc, #400]	; (77e0 <xQueueReceive+0x358>)
    764e:	5c9c      	ldrb	r4, [r3, r2]
    7650:	6a3b      	ldr	r3, [r7, #32]
    7652:	0018      	movs	r0, r3
    7654:	4b63      	ldr	r3, [pc, #396]	; (77e4 <xQueueReceive+0x35c>)
    7656:	4798      	blx	r3
    7658:	0003      	movs	r3, r0
    765a:	b2db      	uxtb	r3, r3
    765c:	001a      	movs	r2, r3
    765e:	0021      	movs	r1, r4
    7660:	0028      	movs	r0, r5
    7662:	4b61      	ldr	r3, [pc, #388]	; (77e8 <xQueueReceive+0x360>)
    7664:	4798      	blx	r3
					return errQUEUE_EMPTY;
    7666:	2300      	movs	r3, #0
    7668:	e120      	b.n	78ac <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
    766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    766c:	2b00      	cmp	r3, #0
    766e:	d106      	bne.n	767e <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    7670:	2314      	movs	r3, #20
    7672:	18fb      	adds	r3, r7, r3
    7674:	0018      	movs	r0, r3
    7676:	4b62      	ldr	r3, [pc, #392]	; (7800 <xQueueReceive+0x378>)
    7678:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    767a:	2301      	movs	r3, #1
    767c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    767e:	4b5f      	ldr	r3, [pc, #380]	; (77fc <xQueueReceive+0x374>)
    7680:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    7682:	4b60      	ldr	r3, [pc, #384]	; (7804 <xQueueReceive+0x37c>)
    7684:	4798      	blx	r3
		prvLockQueue( pxQueue );
    7686:	4b4f      	ldr	r3, [pc, #316]	; (77c4 <xQueueReceive+0x33c>)
    7688:	4798      	blx	r3
    768a:	6a3b      	ldr	r3, [r7, #32]
    768c:	2244      	movs	r2, #68	; 0x44
    768e:	5c9b      	ldrb	r3, [r3, r2]
    7690:	b25b      	sxtb	r3, r3
    7692:	3301      	adds	r3, #1
    7694:	d103      	bne.n	769e <xQueueReceive+0x216>
    7696:	6a3b      	ldr	r3, [r7, #32]
    7698:	2244      	movs	r2, #68	; 0x44
    769a:	2100      	movs	r1, #0
    769c:	5499      	strb	r1, [r3, r2]
    769e:	6a3b      	ldr	r3, [r7, #32]
    76a0:	2245      	movs	r2, #69	; 0x45
    76a2:	5c9b      	ldrb	r3, [r3, r2]
    76a4:	b25b      	sxtb	r3, r3
    76a6:	3301      	adds	r3, #1
    76a8:	d103      	bne.n	76b2 <xQueueReceive+0x22a>
    76aa:	6a3b      	ldr	r3, [r7, #32]
    76ac:	2245      	movs	r2, #69	; 0x45
    76ae:	2100      	movs	r1, #0
    76b0:	5499      	strb	r1, [r3, r2]
    76b2:	4b52      	ldr	r3, [pc, #328]	; (77fc <xQueueReceive+0x374>)
    76b4:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    76b6:	1d3a      	adds	r2, r7, #4
    76b8:	2314      	movs	r3, #20
    76ba:	18fb      	adds	r3, r7, r3
    76bc:	0011      	movs	r1, r2
    76be:	0018      	movs	r0, r3
    76c0:	4b51      	ldr	r3, [pc, #324]	; (7808 <xQueueReceive+0x380>)
    76c2:	4798      	blx	r3
    76c4:	1e03      	subs	r3, r0, #0
    76c6:	d000      	beq.n	76ca <xQueueReceive+0x242>
    76c8:	e0aa      	b.n	7820 <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    76ca:	6a3b      	ldr	r3, [r7, #32]
    76cc:	0018      	movs	r0, r3
    76ce:	4b4f      	ldr	r3, [pc, #316]	; (780c <xQueueReceive+0x384>)
    76d0:	4798      	blx	r3
    76d2:	1e03      	subs	r3, r0, #0
    76d4:	d06d      	beq.n	77b2 <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    76d6:	4b3d      	ldr	r3, [pc, #244]	; (77cc <xQueueReceive+0x344>)
    76d8:	4798      	blx	r3
    76da:	0003      	movs	r3, r0
    76dc:	0018      	movs	r0, r3
    76de:	4b3c      	ldr	r3, [pc, #240]	; (77d0 <xQueueReceive+0x348>)
    76e0:	4798      	blx	r3
    76e2:	0003      	movs	r3, r0
    76e4:	001a      	movs	r2, r3
    76e6:	4b3b      	ldr	r3, [pc, #236]	; (77d4 <xQueueReceive+0x34c>)
    76e8:	881b      	ldrh	r3, [r3, #0]
    76ea:	4013      	ands	r3, r2
    76ec:	b29b      	uxth	r3, r3
    76ee:	2b00      	cmp	r3, #0
    76f0:	d029      	beq.n	7746 <xQueueReceive+0x2be>
    76f2:	6a3b      	ldr	r3, [r7, #32]
    76f4:	0018      	movs	r0, r3
    76f6:	4b38      	ldr	r3, [pc, #224]	; (77d8 <xQueueReceive+0x350>)
    76f8:	4798      	blx	r3
    76fa:	0003      	movs	r3, r0
    76fc:	001a      	movs	r2, r3
    76fe:	4b35      	ldr	r3, [pc, #212]	; (77d4 <xQueueReceive+0x34c>)
    7700:	881b      	ldrh	r3, [r3, #0]
    7702:	4013      	ands	r3, r2
    7704:	b29b      	uxth	r3, r3
    7706:	2b00      	cmp	r3, #0
    7708:	d01d      	beq.n	7746 <xQueueReceive+0x2be>
    770a:	6a3b      	ldr	r3, [r7, #32]
    770c:	0018      	movs	r0, r3
    770e:	4b33      	ldr	r3, [pc, #204]	; (77dc <xQueueReceive+0x354>)
    7710:	4798      	blx	r3
    7712:	0003      	movs	r3, r0
    7714:	001a      	movs	r2, r3
    7716:	4b32      	ldr	r3, [pc, #200]	; (77e0 <xQueueReceive+0x358>)
    7718:	5c9b      	ldrb	r3, [r3, r2]
    771a:	3368      	adds	r3, #104	; 0x68
    771c:	b2db      	uxtb	r3, r3
    771e:	001d      	movs	r5, r3
    7720:	6a3b      	ldr	r3, [r7, #32]
    7722:	0018      	movs	r0, r3
    7724:	4b2d      	ldr	r3, [pc, #180]	; (77dc <xQueueReceive+0x354>)
    7726:	4798      	blx	r3
    7728:	0003      	movs	r3, r0
    772a:	001a      	movs	r2, r3
    772c:	4b2c      	ldr	r3, [pc, #176]	; (77e0 <xQueueReceive+0x358>)
    772e:	5c9c      	ldrb	r4, [r3, r2]
    7730:	6a3b      	ldr	r3, [r7, #32]
    7732:	0018      	movs	r0, r3
    7734:	4b2b      	ldr	r3, [pc, #172]	; (77e4 <xQueueReceive+0x35c>)
    7736:	4798      	blx	r3
    7738:	0003      	movs	r3, r0
    773a:	b2db      	uxtb	r3, r3
    773c:	001a      	movs	r2, r3
    773e:	0021      	movs	r1, r4
    7740:	0028      	movs	r0, r5
    7742:	4b29      	ldr	r3, [pc, #164]	; (77e8 <xQueueReceive+0x360>)
    7744:	4798      	blx	r3
    7746:	6a3b      	ldr	r3, [r7, #32]
    7748:	0018      	movs	r0, r3
    774a:	4b24      	ldr	r3, [pc, #144]	; (77dc <xQueueReceive+0x354>)
    774c:	4798      	blx	r3
    774e:	0003      	movs	r3, r0
    7750:	001a      	movs	r2, r3
    7752:	4b23      	ldr	r3, [pc, #140]	; (77e0 <xQueueReceive+0x358>)
    7754:	5c9b      	ldrb	r3, [r3, r2]
    7756:	2b02      	cmp	r3, #2
    7758:	d018      	beq.n	778c <xQueueReceive+0x304>
    775a:	4b1c      	ldr	r3, [pc, #112]	; (77cc <xQueueReceive+0x344>)
    775c:	4798      	blx	r3
    775e:	0003      	movs	r3, r0
    7760:	0018      	movs	r0, r3
    7762:	4b1b      	ldr	r3, [pc, #108]	; (77d0 <xQueueReceive+0x348>)
    7764:	4798      	blx	r3
    7766:	0003      	movs	r3, r0
    7768:	001a      	movs	r2, r3
    776a:	4b1a      	ldr	r3, [pc, #104]	; (77d4 <xQueueReceive+0x34c>)
    776c:	881b      	ldrh	r3, [r3, #0]
    776e:	4013      	ands	r3, r2
    7770:	b29b      	uxth	r3, r3
    7772:	2b00      	cmp	r3, #0
    7774:	d00a      	beq.n	778c <xQueueReceive+0x304>
    7776:	4b15      	ldr	r3, [pc, #84]	; (77cc <xQueueReceive+0x344>)
    7778:	4798      	blx	r3
    777a:	0003      	movs	r3, r0
    777c:	0018      	movs	r0, r3
    777e:	4b1b      	ldr	r3, [pc, #108]	; (77ec <xQueueReceive+0x364>)
    7780:	4798      	blx	r3
    7782:	0003      	movs	r3, r0
    7784:	b2db      	uxtb	r3, r3
    7786:	0018      	movs	r0, r3
    7788:	4b21      	ldr	r3, [pc, #132]	; (7810 <xQueueReceive+0x388>)
    778a:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    778c:	6a3b      	ldr	r3, [r7, #32]
    778e:	3324      	adds	r3, #36	; 0x24
    7790:	687a      	ldr	r2, [r7, #4]
    7792:	0011      	movs	r1, r2
    7794:	0018      	movs	r0, r3
    7796:	4b1f      	ldr	r3, [pc, #124]	; (7814 <xQueueReceive+0x38c>)
    7798:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    779a:	6a3b      	ldr	r3, [r7, #32]
    779c:	0018      	movs	r0, r3
    779e:	4b1e      	ldr	r3, [pc, #120]	; (7818 <xQueueReceive+0x390>)
    77a0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    77a2:	4b1e      	ldr	r3, [pc, #120]	; (781c <xQueueReceive+0x394>)
    77a4:	4798      	blx	r3
    77a6:	1e03      	subs	r3, r0, #0
    77a8:	d000      	beq.n	77ac <xQueueReceive+0x324>
    77aa:	e698      	b.n	74de <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    77ac:	4b12      	ldr	r3, [pc, #72]	; (77f8 <xQueueReceive+0x370>)
    77ae:	4798      	blx	r3
    77b0:	e695      	b.n	74de <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    77b2:	6a3b      	ldr	r3, [r7, #32]
    77b4:	0018      	movs	r0, r3
    77b6:	4b18      	ldr	r3, [pc, #96]	; (7818 <xQueueReceive+0x390>)
    77b8:	4798      	blx	r3
				( void ) xTaskResumeAll();
    77ba:	4b18      	ldr	r3, [pc, #96]	; (781c <xQueueReceive+0x394>)
    77bc:	4798      	blx	r3
    77be:	e68e      	b.n	74de <xQueueReceive+0x56>
    77c0:	0000935d 	.word	0x0000935d
    77c4:	00006639 	.word	0x00006639
    77c8:	00007ee9 	.word	0x00007ee9
    77cc:	000048cd 	.word	0x000048cd
    77d0:	00004631 	.word	0x00004631
    77d4:	200000fc 	.word	0x200000fc
    77d8:	000046f1 	.word	0x000046f1
    77dc:	000045f1 	.word	0x000045f1
    77e0:	200000f0 	.word	0x200000f0
    77e4:	000046d1 	.word	0x000046d1
    77e8:	00005029 	.word	0x00005029
    77ec:	00004611 	.word	0x00004611
    77f0:	00005685 	.word	0x00005685
    77f4:	00008ecd 	.word	0x00008ecd
    77f8:	00006621 	.word	0x00006621
    77fc:	0000665d 	.word	0x0000665d
    7800:	0000900d 	.word	0x0000900d
    7804:	000088f5 	.word	0x000088f5
    7808:	00009035 	.word	0x00009035
    780c:	00008029 	.word	0x00008029
    7810:	000057c1 	.word	0x000057c1
    7814:	00008da9 	.word	0x00008da9
    7818:	00007f39 	.word	0x00007f39
    781c:	0000890d 	.word	0x0000890d
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    7820:	6a3b      	ldr	r3, [r7, #32]
    7822:	0018      	movs	r0, r3
    7824:	4b23      	ldr	r3, [pc, #140]	; (78b4 <xQueueReceive+0x42c>)
    7826:	4798      	blx	r3
			( void ) xTaskResumeAll();
    7828:	4b23      	ldr	r3, [pc, #140]	; (78b8 <xQueueReceive+0x430>)
    782a:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    782c:	6a3b      	ldr	r3, [r7, #32]
    782e:	0018      	movs	r0, r3
    7830:	4b22      	ldr	r3, [pc, #136]	; (78bc <xQueueReceive+0x434>)
    7832:	4798      	blx	r3
    7834:	1e03      	subs	r3, r0, #0
    7836:	d100      	bne.n	783a <xQueueReceive+0x3b2>
    7838:	e651      	b.n	74de <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    783a:	4b21      	ldr	r3, [pc, #132]	; (78c0 <xQueueReceive+0x438>)
    783c:	4798      	blx	r3
    783e:	0003      	movs	r3, r0
    7840:	0018      	movs	r0, r3
    7842:	4b20      	ldr	r3, [pc, #128]	; (78c4 <xQueueReceive+0x43c>)
    7844:	4798      	blx	r3
    7846:	0003      	movs	r3, r0
    7848:	001a      	movs	r2, r3
    784a:	4b1f      	ldr	r3, [pc, #124]	; (78c8 <xQueueReceive+0x440>)
    784c:	881b      	ldrh	r3, [r3, #0]
    784e:	4013      	ands	r3, r2
    7850:	b29b      	uxth	r3, r3
    7852:	2b00      	cmp	r3, #0
    7854:	d029      	beq.n	78aa <xQueueReceive+0x422>
    7856:	6a3b      	ldr	r3, [r7, #32]
    7858:	0018      	movs	r0, r3
    785a:	4b1c      	ldr	r3, [pc, #112]	; (78cc <xQueueReceive+0x444>)
    785c:	4798      	blx	r3
    785e:	0003      	movs	r3, r0
    7860:	001a      	movs	r2, r3
    7862:	4b19      	ldr	r3, [pc, #100]	; (78c8 <xQueueReceive+0x440>)
    7864:	881b      	ldrh	r3, [r3, #0]
    7866:	4013      	ands	r3, r2
    7868:	b29b      	uxth	r3, r3
    786a:	2b00      	cmp	r3, #0
    786c:	d01d      	beq.n	78aa <xQueueReceive+0x422>
    786e:	6a3b      	ldr	r3, [r7, #32]
    7870:	0018      	movs	r0, r3
    7872:	4b17      	ldr	r3, [pc, #92]	; (78d0 <xQueueReceive+0x448>)
    7874:	4798      	blx	r3
    7876:	0003      	movs	r3, r0
    7878:	001a      	movs	r2, r3
    787a:	4b16      	ldr	r3, [pc, #88]	; (78d4 <xQueueReceive+0x44c>)
    787c:	5c9b      	ldrb	r3, [r3, r2]
    787e:	3350      	adds	r3, #80	; 0x50
    7880:	b2db      	uxtb	r3, r3
    7882:	001d      	movs	r5, r3
    7884:	6a3b      	ldr	r3, [r7, #32]
    7886:	0018      	movs	r0, r3
    7888:	4b11      	ldr	r3, [pc, #68]	; (78d0 <xQueueReceive+0x448>)
    788a:	4798      	blx	r3
    788c:	0003      	movs	r3, r0
    788e:	001a      	movs	r2, r3
    7890:	4b10      	ldr	r3, [pc, #64]	; (78d4 <xQueueReceive+0x44c>)
    7892:	5c9c      	ldrb	r4, [r3, r2]
    7894:	6a3b      	ldr	r3, [r7, #32]
    7896:	0018      	movs	r0, r3
    7898:	4b0f      	ldr	r3, [pc, #60]	; (78d8 <xQueueReceive+0x450>)
    789a:	4798      	blx	r3
    789c:	0003      	movs	r3, r0
    789e:	b2db      	uxtb	r3, r3
    78a0:	001a      	movs	r2, r3
    78a2:	0021      	movs	r1, r4
    78a4:	0028      	movs	r0, r5
    78a6:	4b0d      	ldr	r3, [pc, #52]	; (78dc <xQueueReceive+0x454>)
    78a8:	4798      	blx	r3
				return errQUEUE_EMPTY;
    78aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    78ac:	0018      	movs	r0, r3
    78ae:	46bd      	mov	sp, r7
    78b0:	b00a      	add	sp, #40	; 0x28
    78b2:	bdb0      	pop	{r4, r5, r7, pc}
    78b4:	00007f39 	.word	0x00007f39
    78b8:	0000890d 	.word	0x0000890d
    78bc:	00008029 	.word	0x00008029
    78c0:	000048cd 	.word	0x000048cd
    78c4:	00004631 	.word	0x00004631
    78c8:	200000fc 	.word	0x200000fc
    78cc:	000046f1 	.word	0x000046f1
    78d0:	000045f1 	.word	0x000045f1
    78d4:	200000f0 	.word	0x200000f0
    78d8:	000046d1 	.word	0x000046d1
    78dc:	00005029 	.word	0x00005029

000078e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    78e0:	b5b0      	push	{r4, r5, r7, lr}
    78e2:	b08a      	sub	sp, #40	; 0x28
    78e4:	af00      	add	r7, sp, #0
    78e6:	6078      	str	r0, [r7, #4]
    78e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    78ea:	2300      	movs	r3, #0
    78ec:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    78ee:	687b      	ldr	r3, [r7, #4]
    78f0:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
    78f2:	2300      	movs	r3, #0
    78f4:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    78f6:	69fb      	ldr	r3, [r7, #28]
    78f8:	2b00      	cmp	r3, #0
    78fa:	d101      	bne.n	7900 <xQueueSemaphoreTake+0x20>
    78fc:	b672      	cpsid	i
    78fe:	e7fe      	b.n	78fe <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    7900:	69fb      	ldr	r3, [r7, #28]
    7902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7904:	2b00      	cmp	r3, #0
    7906:	d001      	beq.n	790c <xQueueSemaphoreTake+0x2c>
    7908:	b672      	cpsid	i
    790a:	e7fe      	b.n	790a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    790c:	4bcb      	ldr	r3, [pc, #812]	; (7c3c <xQueueSemaphoreTake+0x35c>)
    790e:	4798      	blx	r3
    7910:	1e03      	subs	r3, r0, #0
    7912:	d102      	bne.n	791a <xQueueSemaphoreTake+0x3a>
    7914:	683b      	ldr	r3, [r7, #0]
    7916:	2b00      	cmp	r3, #0
    7918:	d101      	bne.n	791e <xQueueSemaphoreTake+0x3e>
    791a:	2301      	movs	r3, #1
    791c:	e000      	b.n	7920 <xQueueSemaphoreTake+0x40>
    791e:	2300      	movs	r3, #0
    7920:	2b00      	cmp	r3, #0
    7922:	d101      	bne.n	7928 <xQueueSemaphoreTake+0x48>
    7924:	b672      	cpsid	i
    7926:	e7fe      	b.n	7926 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    7928:	4bc5      	ldr	r3, [pc, #788]	; (7c40 <xQueueSemaphoreTake+0x360>)
    792a:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    792c:	69fb      	ldr	r3, [r7, #28]
    792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7930:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    7932:	69bb      	ldr	r3, [r7, #24]
    7934:	2b00      	cmp	r3, #0
    7936:	d100      	bne.n	793a <xQueueSemaphoreTake+0x5a>
    7938:	e080      	b.n	7a3c <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
    793a:	4bc2      	ldr	r3, [pc, #776]	; (7c44 <xQueueSemaphoreTake+0x364>)
    793c:	4798      	blx	r3
    793e:	0003      	movs	r3, r0
    7940:	0018      	movs	r0, r3
    7942:	4bc1      	ldr	r3, [pc, #772]	; (7c48 <xQueueSemaphoreTake+0x368>)
    7944:	4798      	blx	r3
    7946:	0003      	movs	r3, r0
    7948:	001a      	movs	r2, r3
    794a:	4bc0      	ldr	r3, [pc, #768]	; (7c4c <xQueueSemaphoreTake+0x36c>)
    794c:	881b      	ldrh	r3, [r3, #0]
    794e:	4013      	ands	r3, r2
    7950:	b29b      	uxth	r3, r3
    7952:	2b00      	cmp	r3, #0
    7954:	d029      	beq.n	79aa <xQueueSemaphoreTake+0xca>
    7956:	69fb      	ldr	r3, [r7, #28]
    7958:	0018      	movs	r0, r3
    795a:	4bbd      	ldr	r3, [pc, #756]	; (7c50 <xQueueSemaphoreTake+0x370>)
    795c:	4798      	blx	r3
    795e:	0003      	movs	r3, r0
    7960:	001a      	movs	r2, r3
    7962:	4bba      	ldr	r3, [pc, #744]	; (7c4c <xQueueSemaphoreTake+0x36c>)
    7964:	881b      	ldrh	r3, [r3, #0]
    7966:	4013      	ands	r3, r2
    7968:	b29b      	uxth	r3, r3
    796a:	2b00      	cmp	r3, #0
    796c:	d01d      	beq.n	79aa <xQueueSemaphoreTake+0xca>
    796e:	69fb      	ldr	r3, [r7, #28]
    7970:	0018      	movs	r0, r3
    7972:	4bb8      	ldr	r3, [pc, #736]	; (7c54 <xQueueSemaphoreTake+0x374>)
    7974:	4798      	blx	r3
    7976:	0003      	movs	r3, r0
    7978:	001a      	movs	r2, r3
    797a:	4bb7      	ldr	r3, [pc, #732]	; (7c58 <xQueueSemaphoreTake+0x378>)
    797c:	5c9b      	ldrb	r3, [r3, r2]
    797e:	3328      	adds	r3, #40	; 0x28
    7980:	b2db      	uxtb	r3, r3
    7982:	001d      	movs	r5, r3
    7984:	69fb      	ldr	r3, [r7, #28]
    7986:	0018      	movs	r0, r3
    7988:	4bb2      	ldr	r3, [pc, #712]	; (7c54 <xQueueSemaphoreTake+0x374>)
    798a:	4798      	blx	r3
    798c:	0003      	movs	r3, r0
    798e:	001a      	movs	r2, r3
    7990:	4bb1      	ldr	r3, [pc, #708]	; (7c58 <xQueueSemaphoreTake+0x378>)
    7992:	5c9c      	ldrb	r4, [r3, r2]
    7994:	69fb      	ldr	r3, [r7, #28]
    7996:	0018      	movs	r0, r3
    7998:	4bb0      	ldr	r3, [pc, #704]	; (7c5c <xQueueSemaphoreTake+0x37c>)
    799a:	4798      	blx	r3
    799c:	0003      	movs	r3, r0
    799e:	b2db      	uxtb	r3, r3
    79a0:	001a      	movs	r2, r3
    79a2:	0021      	movs	r1, r4
    79a4:	0028      	movs	r0, r5
    79a6:	4bae      	ldr	r3, [pc, #696]	; (7c60 <xQueueSemaphoreTake+0x380>)
    79a8:	4798      	blx	r3
    79aa:	69fb      	ldr	r3, [r7, #28]
    79ac:	0018      	movs	r0, r3
    79ae:	4ba9      	ldr	r3, [pc, #676]	; (7c54 <xQueueSemaphoreTake+0x374>)
    79b0:	4798      	blx	r3
    79b2:	0003      	movs	r3, r0
    79b4:	001a      	movs	r2, r3
    79b6:	4ba8      	ldr	r3, [pc, #672]	; (7c58 <xQueueSemaphoreTake+0x378>)
    79b8:	5c9c      	ldrb	r4, [r3, r2]
    79ba:	69fb      	ldr	r3, [r7, #28]
    79bc:	0018      	movs	r0, r3
    79be:	4ba7      	ldr	r3, [pc, #668]	; (7c5c <xQueueSemaphoreTake+0x37c>)
    79c0:	4798      	blx	r3
    79c2:	0003      	movs	r3, r0
    79c4:	b2dd      	uxtb	r5, r3
    79c6:	69fb      	ldr	r3, [r7, #28]
    79c8:	0018      	movs	r0, r3
    79ca:	4ba2      	ldr	r3, [pc, #648]	; (7c54 <xQueueSemaphoreTake+0x374>)
    79cc:	4798      	blx	r3
    79ce:	0003      	movs	r3, r0
    79d0:	001a      	movs	r2, r3
    79d2:	4ba1      	ldr	r3, [pc, #644]	; (7c58 <xQueueSemaphoreTake+0x378>)
    79d4:	5c9b      	ldrb	r3, [r3, r2]
    79d6:	2b02      	cmp	r3, #2
    79d8:	d108      	bne.n	79ec <xQueueSemaphoreTake+0x10c>
    79da:	4b9a      	ldr	r3, [pc, #616]	; (7c44 <xQueueSemaphoreTake+0x364>)
    79dc:	4798      	blx	r3
    79de:	0003      	movs	r3, r0
    79e0:	0018      	movs	r0, r3
    79e2:	4ba0      	ldr	r3, [pc, #640]	; (7c64 <xQueueSemaphoreTake+0x384>)
    79e4:	4798      	blx	r3
    79e6:	0003      	movs	r3, r0
    79e8:	b2db      	uxtb	r3, r3
    79ea:	e004      	b.n	79f6 <xQueueSemaphoreTake+0x116>
    79ec:	69fb      	ldr	r3, [r7, #28]
    79ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    79f0:	b2db      	uxtb	r3, r3
    79f2:	3b01      	subs	r3, #1
    79f4:	b2db      	uxtb	r3, r3
    79f6:	001a      	movs	r2, r3
    79f8:	0029      	movs	r1, r5
    79fa:	0020      	movs	r0, r4
    79fc:	4b9a      	ldr	r3, [pc, #616]	; (7c68 <xQueueSemaphoreTake+0x388>)
    79fe:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    7a00:	69bb      	ldr	r3, [r7, #24]
    7a02:	1e5a      	subs	r2, r3, #1
    7a04:	69fb      	ldr	r3, [r7, #28]
    7a06:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    7a08:	69fb      	ldr	r3, [r7, #28]
    7a0a:	681b      	ldr	r3, [r3, #0]
    7a0c:	2b00      	cmp	r3, #0
    7a0e:	d104      	bne.n	7a1a <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    7a10:	4b96      	ldr	r3, [pc, #600]	; (7c6c <xQueueSemaphoreTake+0x38c>)
    7a12:	4798      	blx	r3
    7a14:	0002      	movs	r2, r0
    7a16:	69fb      	ldr	r3, [r7, #28]
    7a18:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7a1a:	69fb      	ldr	r3, [r7, #28]
    7a1c:	691b      	ldr	r3, [r3, #16]
    7a1e:	2b00      	cmp	r3, #0
    7a20:	d008      	beq.n	7a34 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    7a22:	69fb      	ldr	r3, [r7, #28]
    7a24:	3310      	adds	r3, #16
    7a26:	0018      	movs	r0, r3
    7a28:	4b91      	ldr	r3, [pc, #580]	; (7c70 <xQueueSemaphoreTake+0x390>)
    7a2a:	4798      	blx	r3
    7a2c:	1e03      	subs	r3, r0, #0
    7a2e:	d001      	beq.n	7a34 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
    7a30:	4b90      	ldr	r3, [pc, #576]	; (7c74 <xQueueSemaphoreTake+0x394>)
    7a32:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    7a34:	4b90      	ldr	r3, [pc, #576]	; (7c78 <xQueueSemaphoreTake+0x398>)
    7a36:	4798      	blx	r3
				return pdPASS;
    7a38:	2301      	movs	r3, #1
    7a3a:	e18b      	b.n	7d54 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    7a3c:	683b      	ldr	r3, [r7, #0]
    7a3e:	2b00      	cmp	r3, #0
    7a40:	d140      	bne.n	7ac4 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
    7a42:	6a3b      	ldr	r3, [r7, #32]
    7a44:	2b00      	cmp	r3, #0
    7a46:	d001      	beq.n	7a4c <xQueueSemaphoreTake+0x16c>
    7a48:	b672      	cpsid	i
    7a4a:	e7fe      	b.n	7a4a <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    7a4c:	4b8a      	ldr	r3, [pc, #552]	; (7c78 <xQueueSemaphoreTake+0x398>)
    7a4e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    7a50:	4b7c      	ldr	r3, [pc, #496]	; (7c44 <xQueueSemaphoreTake+0x364>)
    7a52:	4798      	blx	r3
    7a54:	0003      	movs	r3, r0
    7a56:	0018      	movs	r0, r3
    7a58:	4b7b      	ldr	r3, [pc, #492]	; (7c48 <xQueueSemaphoreTake+0x368>)
    7a5a:	4798      	blx	r3
    7a5c:	0003      	movs	r3, r0
    7a5e:	001a      	movs	r2, r3
    7a60:	4b7a      	ldr	r3, [pc, #488]	; (7c4c <xQueueSemaphoreTake+0x36c>)
    7a62:	881b      	ldrh	r3, [r3, #0]
    7a64:	4013      	ands	r3, r2
    7a66:	b29b      	uxth	r3, r3
    7a68:	2b00      	cmp	r3, #0
    7a6a:	d029      	beq.n	7ac0 <xQueueSemaphoreTake+0x1e0>
    7a6c:	69fb      	ldr	r3, [r7, #28]
    7a6e:	0018      	movs	r0, r3
    7a70:	4b77      	ldr	r3, [pc, #476]	; (7c50 <xQueueSemaphoreTake+0x370>)
    7a72:	4798      	blx	r3
    7a74:	0003      	movs	r3, r0
    7a76:	001a      	movs	r2, r3
    7a78:	4b74      	ldr	r3, [pc, #464]	; (7c4c <xQueueSemaphoreTake+0x36c>)
    7a7a:	881b      	ldrh	r3, [r3, #0]
    7a7c:	4013      	ands	r3, r2
    7a7e:	b29b      	uxth	r3, r3
    7a80:	2b00      	cmp	r3, #0
    7a82:	d01d      	beq.n	7ac0 <xQueueSemaphoreTake+0x1e0>
    7a84:	69fb      	ldr	r3, [r7, #28]
    7a86:	0018      	movs	r0, r3
    7a88:	4b72      	ldr	r3, [pc, #456]	; (7c54 <xQueueSemaphoreTake+0x374>)
    7a8a:	4798      	blx	r3
    7a8c:	0003      	movs	r3, r0
    7a8e:	001a      	movs	r2, r3
    7a90:	4b71      	ldr	r3, [pc, #452]	; (7c58 <xQueueSemaphoreTake+0x378>)
    7a92:	5c9b      	ldrb	r3, [r3, r2]
    7a94:	3350      	adds	r3, #80	; 0x50
    7a96:	b2db      	uxtb	r3, r3
    7a98:	001d      	movs	r5, r3
    7a9a:	69fb      	ldr	r3, [r7, #28]
    7a9c:	0018      	movs	r0, r3
    7a9e:	4b6d      	ldr	r3, [pc, #436]	; (7c54 <xQueueSemaphoreTake+0x374>)
    7aa0:	4798      	blx	r3
    7aa2:	0003      	movs	r3, r0
    7aa4:	001a      	movs	r2, r3
    7aa6:	4b6c      	ldr	r3, [pc, #432]	; (7c58 <xQueueSemaphoreTake+0x378>)
    7aa8:	5c9c      	ldrb	r4, [r3, r2]
    7aaa:	69fb      	ldr	r3, [r7, #28]
    7aac:	0018      	movs	r0, r3
    7aae:	4b6b      	ldr	r3, [pc, #428]	; (7c5c <xQueueSemaphoreTake+0x37c>)
    7ab0:	4798      	blx	r3
    7ab2:	0003      	movs	r3, r0
    7ab4:	b2db      	uxtb	r3, r3
    7ab6:	001a      	movs	r2, r3
    7ab8:	0021      	movs	r1, r4
    7aba:	0028      	movs	r0, r5
    7abc:	4b68      	ldr	r3, [pc, #416]	; (7c60 <xQueueSemaphoreTake+0x380>)
    7abe:	4798      	blx	r3
					return errQUEUE_EMPTY;
    7ac0:	2300      	movs	r3, #0
    7ac2:	e147      	b.n	7d54 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
    7ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7ac6:	2b00      	cmp	r3, #0
    7ac8:	d106      	bne.n	7ad8 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    7aca:	230c      	movs	r3, #12
    7acc:	18fb      	adds	r3, r7, r3
    7ace:	0018      	movs	r0, r3
    7ad0:	4b6a      	ldr	r3, [pc, #424]	; (7c7c <xQueueSemaphoreTake+0x39c>)
    7ad2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    7ad4:	2301      	movs	r3, #1
    7ad6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    7ad8:	4b67      	ldr	r3, [pc, #412]	; (7c78 <xQueueSemaphoreTake+0x398>)
    7ada:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    7adc:	4b68      	ldr	r3, [pc, #416]	; (7c80 <xQueueSemaphoreTake+0x3a0>)
    7ade:	4798      	blx	r3
		prvLockQueue( pxQueue );
    7ae0:	4b57      	ldr	r3, [pc, #348]	; (7c40 <xQueueSemaphoreTake+0x360>)
    7ae2:	4798      	blx	r3
    7ae4:	69fb      	ldr	r3, [r7, #28]
    7ae6:	2244      	movs	r2, #68	; 0x44
    7ae8:	5c9b      	ldrb	r3, [r3, r2]
    7aea:	b25b      	sxtb	r3, r3
    7aec:	3301      	adds	r3, #1
    7aee:	d103      	bne.n	7af8 <xQueueSemaphoreTake+0x218>
    7af0:	69fb      	ldr	r3, [r7, #28]
    7af2:	2244      	movs	r2, #68	; 0x44
    7af4:	2100      	movs	r1, #0
    7af6:	5499      	strb	r1, [r3, r2]
    7af8:	69fb      	ldr	r3, [r7, #28]
    7afa:	2245      	movs	r2, #69	; 0x45
    7afc:	5c9b      	ldrb	r3, [r3, r2]
    7afe:	b25b      	sxtb	r3, r3
    7b00:	3301      	adds	r3, #1
    7b02:	d103      	bne.n	7b0c <xQueueSemaphoreTake+0x22c>
    7b04:	69fb      	ldr	r3, [r7, #28]
    7b06:	2245      	movs	r2, #69	; 0x45
    7b08:	2100      	movs	r1, #0
    7b0a:	5499      	strb	r1, [r3, r2]
    7b0c:	4b5a      	ldr	r3, [pc, #360]	; (7c78 <xQueueSemaphoreTake+0x398>)
    7b0e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    7b10:	003a      	movs	r2, r7
    7b12:	230c      	movs	r3, #12
    7b14:	18fb      	adds	r3, r7, r3
    7b16:	0011      	movs	r1, r2
    7b18:	0018      	movs	r0, r3
    7b1a:	4b5a      	ldr	r3, [pc, #360]	; (7c84 <xQueueSemaphoreTake+0x3a4>)
    7b1c:	4798      	blx	r3
    7b1e:	1e03      	subs	r3, r0, #0
    7b20:	d000      	beq.n	7b24 <xQueueSemaphoreTake+0x244>
    7b22:	e0bd      	b.n	7ca0 <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    7b24:	69fb      	ldr	r3, [r7, #28]
    7b26:	0018      	movs	r0, r3
    7b28:	4b57      	ldr	r3, [pc, #348]	; (7c88 <xQueueSemaphoreTake+0x3a8>)
    7b2a:	4798      	blx	r3
    7b2c:	1e03      	subs	r3, r0, #0
    7b2e:	d100      	bne.n	7b32 <xQueueSemaphoreTake+0x252>
    7b30:	e07c      	b.n	7c2c <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    7b32:	4b44      	ldr	r3, [pc, #272]	; (7c44 <xQueueSemaphoreTake+0x364>)
    7b34:	4798      	blx	r3
    7b36:	0003      	movs	r3, r0
    7b38:	0018      	movs	r0, r3
    7b3a:	4b43      	ldr	r3, [pc, #268]	; (7c48 <xQueueSemaphoreTake+0x368>)
    7b3c:	4798      	blx	r3
    7b3e:	0003      	movs	r3, r0
    7b40:	001a      	movs	r2, r3
    7b42:	4b42      	ldr	r3, [pc, #264]	; (7c4c <xQueueSemaphoreTake+0x36c>)
    7b44:	881b      	ldrh	r3, [r3, #0]
    7b46:	4013      	ands	r3, r2
    7b48:	b29b      	uxth	r3, r3
    7b4a:	2b00      	cmp	r3, #0
    7b4c:	d029      	beq.n	7ba2 <xQueueSemaphoreTake+0x2c2>
    7b4e:	69fb      	ldr	r3, [r7, #28]
    7b50:	0018      	movs	r0, r3
    7b52:	4b3f      	ldr	r3, [pc, #252]	; (7c50 <xQueueSemaphoreTake+0x370>)
    7b54:	4798      	blx	r3
    7b56:	0003      	movs	r3, r0
    7b58:	001a      	movs	r2, r3
    7b5a:	4b3c      	ldr	r3, [pc, #240]	; (7c4c <xQueueSemaphoreTake+0x36c>)
    7b5c:	881b      	ldrh	r3, [r3, #0]
    7b5e:	4013      	ands	r3, r2
    7b60:	b29b      	uxth	r3, r3
    7b62:	2b00      	cmp	r3, #0
    7b64:	d01d      	beq.n	7ba2 <xQueueSemaphoreTake+0x2c2>
    7b66:	69fb      	ldr	r3, [r7, #28]
    7b68:	0018      	movs	r0, r3
    7b6a:	4b3a      	ldr	r3, [pc, #232]	; (7c54 <xQueueSemaphoreTake+0x374>)
    7b6c:	4798      	blx	r3
    7b6e:	0003      	movs	r3, r0
    7b70:	001a      	movs	r2, r3
    7b72:	4b39      	ldr	r3, [pc, #228]	; (7c58 <xQueueSemaphoreTake+0x378>)
    7b74:	5c9b      	ldrb	r3, [r3, r2]
    7b76:	3368      	adds	r3, #104	; 0x68
    7b78:	b2db      	uxtb	r3, r3
    7b7a:	001d      	movs	r5, r3
    7b7c:	69fb      	ldr	r3, [r7, #28]
    7b7e:	0018      	movs	r0, r3
    7b80:	4b34      	ldr	r3, [pc, #208]	; (7c54 <xQueueSemaphoreTake+0x374>)
    7b82:	4798      	blx	r3
    7b84:	0003      	movs	r3, r0
    7b86:	001a      	movs	r2, r3
    7b88:	4b33      	ldr	r3, [pc, #204]	; (7c58 <xQueueSemaphoreTake+0x378>)
    7b8a:	5c9c      	ldrb	r4, [r3, r2]
    7b8c:	69fb      	ldr	r3, [r7, #28]
    7b8e:	0018      	movs	r0, r3
    7b90:	4b32      	ldr	r3, [pc, #200]	; (7c5c <xQueueSemaphoreTake+0x37c>)
    7b92:	4798      	blx	r3
    7b94:	0003      	movs	r3, r0
    7b96:	b2db      	uxtb	r3, r3
    7b98:	001a      	movs	r2, r3
    7b9a:	0021      	movs	r1, r4
    7b9c:	0028      	movs	r0, r5
    7b9e:	4b30      	ldr	r3, [pc, #192]	; (7c60 <xQueueSemaphoreTake+0x380>)
    7ba0:	4798      	blx	r3
    7ba2:	69fb      	ldr	r3, [r7, #28]
    7ba4:	0018      	movs	r0, r3
    7ba6:	4b2b      	ldr	r3, [pc, #172]	; (7c54 <xQueueSemaphoreTake+0x374>)
    7ba8:	4798      	blx	r3
    7baa:	0003      	movs	r3, r0
    7bac:	001a      	movs	r2, r3
    7bae:	4b2a      	ldr	r3, [pc, #168]	; (7c58 <xQueueSemaphoreTake+0x378>)
    7bb0:	5c9b      	ldrb	r3, [r3, r2]
    7bb2:	2b02      	cmp	r3, #2
    7bb4:	d018      	beq.n	7be8 <xQueueSemaphoreTake+0x308>
    7bb6:	4b23      	ldr	r3, [pc, #140]	; (7c44 <xQueueSemaphoreTake+0x364>)
    7bb8:	4798      	blx	r3
    7bba:	0003      	movs	r3, r0
    7bbc:	0018      	movs	r0, r3
    7bbe:	4b22      	ldr	r3, [pc, #136]	; (7c48 <xQueueSemaphoreTake+0x368>)
    7bc0:	4798      	blx	r3
    7bc2:	0003      	movs	r3, r0
    7bc4:	001a      	movs	r2, r3
    7bc6:	4b21      	ldr	r3, [pc, #132]	; (7c4c <xQueueSemaphoreTake+0x36c>)
    7bc8:	881b      	ldrh	r3, [r3, #0]
    7bca:	4013      	ands	r3, r2
    7bcc:	b29b      	uxth	r3, r3
    7bce:	2b00      	cmp	r3, #0
    7bd0:	d00a      	beq.n	7be8 <xQueueSemaphoreTake+0x308>
    7bd2:	4b1c      	ldr	r3, [pc, #112]	; (7c44 <xQueueSemaphoreTake+0x364>)
    7bd4:	4798      	blx	r3
    7bd6:	0003      	movs	r3, r0
    7bd8:	0018      	movs	r0, r3
    7bda:	4b22      	ldr	r3, [pc, #136]	; (7c64 <xQueueSemaphoreTake+0x384>)
    7bdc:	4798      	blx	r3
    7bde:	0003      	movs	r3, r0
    7be0:	b2db      	uxtb	r3, r3
    7be2:	0018      	movs	r0, r3
    7be4:	4b29      	ldr	r3, [pc, #164]	; (7c8c <xQueueSemaphoreTake+0x3ac>)
    7be6:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    7be8:	69fb      	ldr	r3, [r7, #28]
    7bea:	681b      	ldr	r3, [r3, #0]
    7bec:	2b00      	cmp	r3, #0
    7bee:	d10a      	bne.n	7c06 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
    7bf0:	4b13      	ldr	r3, [pc, #76]	; (7c40 <xQueueSemaphoreTake+0x360>)
    7bf2:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    7bf4:	69fb      	ldr	r3, [r7, #28]
    7bf6:	685b      	ldr	r3, [r3, #4]
    7bf8:	0018      	movs	r0, r3
    7bfa:	4b25      	ldr	r3, [pc, #148]	; (7c90 <xQueueSemaphoreTake+0x3b0>)
    7bfc:	4798      	blx	r3
    7bfe:	0003      	movs	r3, r0
    7c00:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
    7c02:	4b1d      	ldr	r3, [pc, #116]	; (7c78 <xQueueSemaphoreTake+0x398>)
    7c04:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    7c06:	69fb      	ldr	r3, [r7, #28]
    7c08:	3324      	adds	r3, #36	; 0x24
    7c0a:	683a      	ldr	r2, [r7, #0]
    7c0c:	0011      	movs	r1, r2
    7c0e:	0018      	movs	r0, r3
    7c10:	4b20      	ldr	r3, [pc, #128]	; (7c94 <xQueueSemaphoreTake+0x3b4>)
    7c12:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    7c14:	69fb      	ldr	r3, [r7, #28]
    7c16:	0018      	movs	r0, r3
    7c18:	4b1f      	ldr	r3, [pc, #124]	; (7c98 <xQueueSemaphoreTake+0x3b8>)
    7c1a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    7c1c:	4b1f      	ldr	r3, [pc, #124]	; (7c9c <xQueueSemaphoreTake+0x3bc>)
    7c1e:	4798      	blx	r3
    7c20:	1e03      	subs	r3, r0, #0
    7c22:	d000      	beq.n	7c26 <xQueueSemaphoreTake+0x346>
    7c24:	e680      	b.n	7928 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
    7c26:	4b13      	ldr	r3, [pc, #76]	; (7c74 <xQueueSemaphoreTake+0x394>)
    7c28:	4798      	blx	r3
    7c2a:	e67d      	b.n	7928 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    7c2c:	69fb      	ldr	r3, [r7, #28]
    7c2e:	0018      	movs	r0, r3
    7c30:	4b19      	ldr	r3, [pc, #100]	; (7c98 <xQueueSemaphoreTake+0x3b8>)
    7c32:	4798      	blx	r3
				( void ) xTaskResumeAll();
    7c34:	4b19      	ldr	r3, [pc, #100]	; (7c9c <xQueueSemaphoreTake+0x3bc>)
    7c36:	4798      	blx	r3
    7c38:	e676      	b.n	7928 <xQueueSemaphoreTake+0x48>
    7c3a:	46c0      	nop			; (mov r8, r8)
    7c3c:	0000935d 	.word	0x0000935d
    7c40:	00006639 	.word	0x00006639
    7c44:	000048cd 	.word	0x000048cd
    7c48:	00004631 	.word	0x00004631
    7c4c:	200000fc 	.word	0x200000fc
    7c50:	000046f1 	.word	0x000046f1
    7c54:	000045f1 	.word	0x000045f1
    7c58:	200000f0 	.word	0x200000f0
    7c5c:	000046d1 	.word	0x000046d1
    7c60:	00005029 	.word	0x00005029
    7c64:	00004611 	.word	0x00004611
    7c68:	00005685 	.word	0x00005685
    7c6c:	00009829 	.word	0x00009829
    7c70:	00008ecd 	.word	0x00008ecd
    7c74:	00006621 	.word	0x00006621
    7c78:	0000665d 	.word	0x0000665d
    7c7c:	0000900d 	.word	0x0000900d
    7c80:	000088f5 	.word	0x000088f5
    7c84:	00009035 	.word	0x00009035
    7c88:	00008029 	.word	0x00008029
    7c8c:	000057c1 	.word	0x000057c1
    7c90:	00009395 	.word	0x00009395
    7c94:	00008da9 	.word	0x00008da9
    7c98:	00007f39 	.word	0x00007f39
    7c9c:	0000890d 	.word	0x0000890d
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    7ca0:	69fb      	ldr	r3, [r7, #28]
    7ca2:	0018      	movs	r0, r3
    7ca4:	4b2d      	ldr	r3, [pc, #180]	; (7d5c <xQueueSemaphoreTake+0x47c>)
    7ca6:	4798      	blx	r3
			( void ) xTaskResumeAll();
    7ca8:	4b2d      	ldr	r3, [pc, #180]	; (7d60 <xQueueSemaphoreTake+0x480>)
    7caa:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    7cac:	69fb      	ldr	r3, [r7, #28]
    7cae:	0018      	movs	r0, r3
    7cb0:	4b2c      	ldr	r3, [pc, #176]	; (7d64 <xQueueSemaphoreTake+0x484>)
    7cb2:	4798      	blx	r3
    7cb4:	1e03      	subs	r3, r0, #0
    7cb6:	d100      	bne.n	7cba <xQueueSemaphoreTake+0x3da>
    7cb8:	e636      	b.n	7928 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    7cba:	6a3b      	ldr	r3, [r7, #32]
    7cbc:	2b00      	cmp	r3, #0
    7cbe:	d010      	beq.n	7ce2 <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
    7cc0:	4b29      	ldr	r3, [pc, #164]	; (7d68 <xQueueSemaphoreTake+0x488>)
    7cc2:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    7cc4:	69fb      	ldr	r3, [r7, #28]
    7cc6:	0018      	movs	r0, r3
    7cc8:	4b28      	ldr	r3, [pc, #160]	; (7d6c <xQueueSemaphoreTake+0x48c>)
    7cca:	4798      	blx	r3
    7ccc:	0003      	movs	r3, r0
    7cce:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    7cd0:	69fb      	ldr	r3, [r7, #28]
    7cd2:	685b      	ldr	r3, [r3, #4]
    7cd4:	697a      	ldr	r2, [r7, #20]
    7cd6:	0011      	movs	r1, r2
    7cd8:	0018      	movs	r0, r3
    7cda:	4b25      	ldr	r3, [pc, #148]	; (7d70 <xQueueSemaphoreTake+0x490>)
    7cdc:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    7cde:	4b25      	ldr	r3, [pc, #148]	; (7d74 <xQueueSemaphoreTake+0x494>)
    7ce0:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
    7ce2:	4b25      	ldr	r3, [pc, #148]	; (7d78 <xQueueSemaphoreTake+0x498>)
    7ce4:	4798      	blx	r3
    7ce6:	0003      	movs	r3, r0
    7ce8:	0018      	movs	r0, r3
    7cea:	4b24      	ldr	r3, [pc, #144]	; (7d7c <xQueueSemaphoreTake+0x49c>)
    7cec:	4798      	blx	r3
    7cee:	0003      	movs	r3, r0
    7cf0:	001a      	movs	r2, r3
    7cf2:	4b23      	ldr	r3, [pc, #140]	; (7d80 <xQueueSemaphoreTake+0x4a0>)
    7cf4:	881b      	ldrh	r3, [r3, #0]
    7cf6:	4013      	ands	r3, r2
    7cf8:	b29b      	uxth	r3, r3
    7cfa:	2b00      	cmp	r3, #0
    7cfc:	d029      	beq.n	7d52 <xQueueSemaphoreTake+0x472>
    7cfe:	69fb      	ldr	r3, [r7, #28]
    7d00:	0018      	movs	r0, r3
    7d02:	4b20      	ldr	r3, [pc, #128]	; (7d84 <xQueueSemaphoreTake+0x4a4>)
    7d04:	4798      	blx	r3
    7d06:	0003      	movs	r3, r0
    7d08:	001a      	movs	r2, r3
    7d0a:	4b1d      	ldr	r3, [pc, #116]	; (7d80 <xQueueSemaphoreTake+0x4a0>)
    7d0c:	881b      	ldrh	r3, [r3, #0]
    7d0e:	4013      	ands	r3, r2
    7d10:	b29b      	uxth	r3, r3
    7d12:	2b00      	cmp	r3, #0
    7d14:	d01d      	beq.n	7d52 <xQueueSemaphoreTake+0x472>
    7d16:	69fb      	ldr	r3, [r7, #28]
    7d18:	0018      	movs	r0, r3
    7d1a:	4b1b      	ldr	r3, [pc, #108]	; (7d88 <xQueueSemaphoreTake+0x4a8>)
    7d1c:	4798      	blx	r3
    7d1e:	0003      	movs	r3, r0
    7d20:	001a      	movs	r2, r3
    7d22:	4b1a      	ldr	r3, [pc, #104]	; (7d8c <xQueueSemaphoreTake+0x4ac>)
    7d24:	5c9b      	ldrb	r3, [r3, r2]
    7d26:	3350      	adds	r3, #80	; 0x50
    7d28:	b2db      	uxtb	r3, r3
    7d2a:	001d      	movs	r5, r3
    7d2c:	69fb      	ldr	r3, [r7, #28]
    7d2e:	0018      	movs	r0, r3
    7d30:	4b15      	ldr	r3, [pc, #84]	; (7d88 <xQueueSemaphoreTake+0x4a8>)
    7d32:	4798      	blx	r3
    7d34:	0003      	movs	r3, r0
    7d36:	001a      	movs	r2, r3
    7d38:	4b14      	ldr	r3, [pc, #80]	; (7d8c <xQueueSemaphoreTake+0x4ac>)
    7d3a:	5c9c      	ldrb	r4, [r3, r2]
    7d3c:	69fb      	ldr	r3, [r7, #28]
    7d3e:	0018      	movs	r0, r3
    7d40:	4b13      	ldr	r3, [pc, #76]	; (7d90 <xQueueSemaphoreTake+0x4b0>)
    7d42:	4798      	blx	r3
    7d44:	0003      	movs	r3, r0
    7d46:	b2db      	uxtb	r3, r3
    7d48:	001a      	movs	r2, r3
    7d4a:	0021      	movs	r1, r4
    7d4c:	0028      	movs	r0, r5
    7d4e:	4b11      	ldr	r3, [pc, #68]	; (7d94 <xQueueSemaphoreTake+0x4b4>)
    7d50:	4798      	blx	r3
				return errQUEUE_EMPTY;
    7d52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    7d54:	0018      	movs	r0, r3
    7d56:	46bd      	mov	sp, r7
    7d58:	b00a      	add	sp, #40	; 0x28
    7d5a:	bdb0      	pop	{r4, r5, r7, pc}
    7d5c:	00007f39 	.word	0x00007f39
    7d60:	0000890d 	.word	0x0000890d
    7d64:	00008029 	.word	0x00008029
    7d68:	00006639 	.word	0x00006639
    7d6c:	00007ddb 	.word	0x00007ddb
    7d70:	0000968d 	.word	0x0000968d
    7d74:	0000665d 	.word	0x0000665d
    7d78:	000048cd 	.word	0x000048cd
    7d7c:	00004631 	.word	0x00004631
    7d80:	200000fc 	.word	0x200000fc
    7d84:	000046f1 	.word	0x000046f1
    7d88:	000045f1 	.word	0x000045f1
    7d8c:	200000f0 	.word	0x200000f0
    7d90:	000046d1 	.word	0x000046d1
    7d94:	00005029 	.word	0x00005029

00007d98 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
    7d98:	b580      	push	{r7, lr}
    7d9a:	b082      	sub	sp, #8
    7d9c:	af00      	add	r7, sp, #0
    7d9e:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    7da0:	687b      	ldr	r3, [r7, #4]
    7da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
    7da4:	0018      	movs	r0, r3
    7da6:	46bd      	mov	sp, r7
    7da8:	b002      	add	sp, #8
    7daa:	bd80      	pop	{r7, pc}

00007dac <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
    7dac:	b580      	push	{r7, lr}
    7dae:	b082      	sub	sp, #8
    7db0:	af00      	add	r7, sp, #0
    7db2:	6078      	str	r0, [r7, #4]
    7db4:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
    7db6:	687b      	ldr	r3, [r7, #4]
    7db8:	683a      	ldr	r2, [r7, #0]
    7dba:	64da      	str	r2, [r3, #76]	; 0x4c
	}
    7dbc:	46c0      	nop			; (mov r8, r8)
    7dbe:	46bd      	mov	sp, r7
    7dc0:	b002      	add	sp, #8
    7dc2:	bd80      	pop	{r7, pc}

00007dc4 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
    7dc4:	b580      	push	{r7, lr}
    7dc6:	b082      	sub	sp, #8
    7dc8:	af00      	add	r7, sp, #0
    7dca:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    7dcc:	687b      	ldr	r3, [r7, #4]
    7dce:	2250      	movs	r2, #80	; 0x50
    7dd0:	5c9b      	ldrb	r3, [r3, r2]
	}
    7dd2:	0018      	movs	r0, r3
    7dd4:	46bd      	mov	sp, r7
    7dd6:	b002      	add	sp, #8
    7dd8:	bd80      	pop	{r7, pc}

00007dda <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
    7dda:	b580      	push	{r7, lr}
    7ddc:	b084      	sub	sp, #16
    7dde:	af00      	add	r7, sp, #0
    7de0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    7de2:	687b      	ldr	r3, [r7, #4]
    7de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7de6:	2b00      	cmp	r3, #0
    7de8:	d006      	beq.n	7df8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    7dea:	687b      	ldr	r3, [r7, #4]
    7dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7dee:	681b      	ldr	r3, [r3, #0]
    7df0:	2205      	movs	r2, #5
    7df2:	1ad3      	subs	r3, r2, r3
    7df4:	60fb      	str	r3, [r7, #12]
    7df6:	e001      	b.n	7dfc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    7df8:	2300      	movs	r3, #0
    7dfa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
    7dfc:	68fb      	ldr	r3, [r7, #12]
	}
    7dfe:	0018      	movs	r0, r3
    7e00:	46bd      	mov	sp, r7
    7e02:	b004      	add	sp, #16
    7e04:	bd80      	pop	{r7, pc}
	...

00007e08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    7e08:	b580      	push	{r7, lr}
    7e0a:	b086      	sub	sp, #24
    7e0c:	af00      	add	r7, sp, #0
    7e0e:	60f8      	str	r0, [r7, #12]
    7e10:	60b9      	str	r1, [r7, #8]
    7e12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    7e14:	2300      	movs	r3, #0
    7e16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    7e18:	68fb      	ldr	r3, [r7, #12]
    7e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7e1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    7e1e:	68fb      	ldr	r3, [r7, #12]
    7e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7e22:	2b00      	cmp	r3, #0
    7e24:	d10e      	bne.n	7e44 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    7e26:	68fb      	ldr	r3, [r7, #12]
    7e28:	681b      	ldr	r3, [r3, #0]
    7e2a:	2b00      	cmp	r3, #0
    7e2c:	d14e      	bne.n	7ecc <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    7e2e:	68fb      	ldr	r3, [r7, #12]
    7e30:	685b      	ldr	r3, [r3, #4]
    7e32:	0018      	movs	r0, r3
    7e34:	4b2a      	ldr	r3, [pc, #168]	; (7ee0 <prvCopyDataToQueue+0xd8>)
    7e36:	4798      	blx	r3
    7e38:	0003      	movs	r3, r0
    7e3a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    7e3c:	68fb      	ldr	r3, [r7, #12]
    7e3e:	2200      	movs	r2, #0
    7e40:	605a      	str	r2, [r3, #4]
    7e42:	e043      	b.n	7ecc <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    7e44:	687b      	ldr	r3, [r7, #4]
    7e46:	2b00      	cmp	r3, #0
    7e48:	d119      	bne.n	7e7e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    7e4a:	68fb      	ldr	r3, [r7, #12]
    7e4c:	6898      	ldr	r0, [r3, #8]
    7e4e:	68fb      	ldr	r3, [r7, #12]
    7e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7e52:	68bb      	ldr	r3, [r7, #8]
    7e54:	0019      	movs	r1, r3
    7e56:	4b23      	ldr	r3, [pc, #140]	; (7ee4 <prvCopyDataToQueue+0xdc>)
    7e58:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    7e5a:	68fb      	ldr	r3, [r7, #12]
    7e5c:	689a      	ldr	r2, [r3, #8]
    7e5e:	68fb      	ldr	r3, [r7, #12]
    7e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7e62:	18d2      	adds	r2, r2, r3
    7e64:	68fb      	ldr	r3, [r7, #12]
    7e66:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    7e68:	68fb      	ldr	r3, [r7, #12]
    7e6a:	689a      	ldr	r2, [r3, #8]
    7e6c:	68fb      	ldr	r3, [r7, #12]
    7e6e:	685b      	ldr	r3, [r3, #4]
    7e70:	429a      	cmp	r2, r3
    7e72:	d32b      	bcc.n	7ecc <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    7e74:	68fb      	ldr	r3, [r7, #12]
    7e76:	681a      	ldr	r2, [r3, #0]
    7e78:	68fb      	ldr	r3, [r7, #12]
    7e7a:	609a      	str	r2, [r3, #8]
    7e7c:	e026      	b.n	7ecc <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7e7e:	68fb      	ldr	r3, [r7, #12]
    7e80:	68d8      	ldr	r0, [r3, #12]
    7e82:	68fb      	ldr	r3, [r7, #12]
    7e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7e86:	68bb      	ldr	r3, [r7, #8]
    7e88:	0019      	movs	r1, r3
    7e8a:	4b16      	ldr	r3, [pc, #88]	; (7ee4 <prvCopyDataToQueue+0xdc>)
    7e8c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    7e8e:	68fb      	ldr	r3, [r7, #12]
    7e90:	68da      	ldr	r2, [r3, #12]
    7e92:	68fb      	ldr	r3, [r7, #12]
    7e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7e96:	425b      	negs	r3, r3
    7e98:	18d2      	adds	r2, r2, r3
    7e9a:	68fb      	ldr	r3, [r7, #12]
    7e9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    7e9e:	68fb      	ldr	r3, [r7, #12]
    7ea0:	68da      	ldr	r2, [r3, #12]
    7ea2:	68fb      	ldr	r3, [r7, #12]
    7ea4:	681b      	ldr	r3, [r3, #0]
    7ea6:	429a      	cmp	r2, r3
    7ea8:	d207      	bcs.n	7eba <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    7eaa:	68fb      	ldr	r3, [r7, #12]
    7eac:	685a      	ldr	r2, [r3, #4]
    7eae:	68fb      	ldr	r3, [r7, #12]
    7eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7eb2:	425b      	negs	r3, r3
    7eb4:	18d2      	adds	r2, r2, r3
    7eb6:	68fb      	ldr	r3, [r7, #12]
    7eb8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    7eba:	687b      	ldr	r3, [r7, #4]
    7ebc:	2b02      	cmp	r3, #2
    7ebe:	d105      	bne.n	7ecc <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    7ec0:	693b      	ldr	r3, [r7, #16]
    7ec2:	2b00      	cmp	r3, #0
    7ec4:	d002      	beq.n	7ecc <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    7ec6:	693b      	ldr	r3, [r7, #16]
    7ec8:	3b01      	subs	r3, #1
    7eca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    7ecc:	693b      	ldr	r3, [r7, #16]
    7ece:	1c5a      	adds	r2, r3, #1
    7ed0:	68fb      	ldr	r3, [r7, #12]
    7ed2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    7ed4:	697b      	ldr	r3, [r7, #20]
}
    7ed6:	0018      	movs	r0, r3
    7ed8:	46bd      	mov	sp, r7
    7eda:	b006      	add	sp, #24
    7edc:	bd80      	pop	{r7, pc}
    7ede:	46c0      	nop			; (mov r8, r8)
    7ee0:	00009525 	.word	0x00009525
    7ee4:	00020d55 	.word	0x00020d55

00007ee8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    7ee8:	b580      	push	{r7, lr}
    7eea:	b082      	sub	sp, #8
    7eec:	af00      	add	r7, sp, #0
    7eee:	6078      	str	r0, [r7, #4]
    7ef0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    7ef2:	687b      	ldr	r3, [r7, #4]
    7ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7ef6:	2b00      	cmp	r3, #0
    7ef8:	d018      	beq.n	7f2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    7efa:	687b      	ldr	r3, [r7, #4]
    7efc:	68da      	ldr	r2, [r3, #12]
    7efe:	687b      	ldr	r3, [r7, #4]
    7f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7f02:	18d2      	adds	r2, r2, r3
    7f04:	687b      	ldr	r3, [r7, #4]
    7f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    7f08:	687b      	ldr	r3, [r7, #4]
    7f0a:	68da      	ldr	r2, [r3, #12]
    7f0c:	687b      	ldr	r3, [r7, #4]
    7f0e:	685b      	ldr	r3, [r3, #4]
    7f10:	429a      	cmp	r2, r3
    7f12:	d303      	bcc.n	7f1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    7f14:	687b      	ldr	r3, [r7, #4]
    7f16:	681a      	ldr	r2, [r3, #0]
    7f18:	687b      	ldr	r3, [r7, #4]
    7f1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    7f1c:	687b      	ldr	r3, [r7, #4]
    7f1e:	68d9      	ldr	r1, [r3, #12]
    7f20:	687b      	ldr	r3, [r7, #4]
    7f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7f24:	683b      	ldr	r3, [r7, #0]
    7f26:	0018      	movs	r0, r3
    7f28:	4b02      	ldr	r3, [pc, #8]	; (7f34 <prvCopyDataFromQueue+0x4c>)
    7f2a:	4798      	blx	r3
	}
}
    7f2c:	46c0      	nop			; (mov r8, r8)
    7f2e:	46bd      	mov	sp, r7
    7f30:	b002      	add	sp, #8
    7f32:	bd80      	pop	{r7, pc}
    7f34:	00020d55 	.word	0x00020d55

00007f38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    7f38:	b580      	push	{r7, lr}
    7f3a:	b084      	sub	sp, #16
    7f3c:	af00      	add	r7, sp, #0
    7f3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    7f40:	4b34      	ldr	r3, [pc, #208]	; (8014 <prvUnlockQueue+0xdc>)
    7f42:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    7f44:	230f      	movs	r3, #15
    7f46:	18fb      	adds	r3, r7, r3
    7f48:	687a      	ldr	r2, [r7, #4]
    7f4a:	2145      	movs	r1, #69	; 0x45
    7f4c:	5c52      	ldrb	r2, [r2, r1]
    7f4e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    7f50:	e022      	b.n	7f98 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    7f52:	687b      	ldr	r3, [r7, #4]
    7f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7f56:	2b00      	cmp	r3, #0
    7f58:	d009      	beq.n	7f6e <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    7f5a:	687b      	ldr	r3, [r7, #4]
    7f5c:	2100      	movs	r1, #0
    7f5e:	0018      	movs	r0, r3
    7f60:	4b2d      	ldr	r3, [pc, #180]	; (8018 <prvUnlockQueue+0xe0>)
    7f62:	4798      	blx	r3
    7f64:	1e03      	subs	r3, r0, #0
    7f66:	d00f      	beq.n	7f88 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    7f68:	4b2c      	ldr	r3, [pc, #176]	; (801c <prvUnlockQueue+0xe4>)
    7f6a:	4798      	blx	r3
    7f6c:	e00c      	b.n	7f88 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    7f6e:	687b      	ldr	r3, [r7, #4]
    7f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f72:	2b00      	cmp	r3, #0
    7f74:	d017      	beq.n	7fa6 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7f76:	687b      	ldr	r3, [r7, #4]
    7f78:	3324      	adds	r3, #36	; 0x24
    7f7a:	0018      	movs	r0, r3
    7f7c:	4b28      	ldr	r3, [pc, #160]	; (8020 <prvUnlockQueue+0xe8>)
    7f7e:	4798      	blx	r3
    7f80:	1e03      	subs	r3, r0, #0
    7f82:	d001      	beq.n	7f88 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    7f84:	4b25      	ldr	r3, [pc, #148]	; (801c <prvUnlockQueue+0xe4>)
    7f86:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    7f88:	230f      	movs	r3, #15
    7f8a:	18fb      	adds	r3, r7, r3
    7f8c:	781b      	ldrb	r3, [r3, #0]
    7f8e:	3b01      	subs	r3, #1
    7f90:	b2da      	uxtb	r2, r3
    7f92:	230f      	movs	r3, #15
    7f94:	18fb      	adds	r3, r7, r3
    7f96:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    7f98:	230f      	movs	r3, #15
    7f9a:	18fb      	adds	r3, r7, r3
    7f9c:	781b      	ldrb	r3, [r3, #0]
    7f9e:	b25b      	sxtb	r3, r3
    7fa0:	2b00      	cmp	r3, #0
    7fa2:	dcd6      	bgt.n	7f52 <prvUnlockQueue+0x1a>
    7fa4:	e000      	b.n	7fa8 <prvUnlockQueue+0x70>
						break;
    7fa6:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    7fa8:	687b      	ldr	r3, [r7, #4]
    7faa:	2245      	movs	r2, #69	; 0x45
    7fac:	21ff      	movs	r1, #255	; 0xff
    7fae:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    7fb0:	4b1c      	ldr	r3, [pc, #112]	; (8024 <prvUnlockQueue+0xec>)
    7fb2:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    7fb4:	4b17      	ldr	r3, [pc, #92]	; (8014 <prvUnlockQueue+0xdc>)
    7fb6:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    7fb8:	230e      	movs	r3, #14
    7fba:	18fb      	adds	r3, r7, r3
    7fbc:	687a      	ldr	r2, [r7, #4]
    7fbe:	2144      	movs	r1, #68	; 0x44
    7fc0:	5c52      	ldrb	r2, [r2, r1]
    7fc2:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    7fc4:	e014      	b.n	7ff0 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7fc6:	687b      	ldr	r3, [r7, #4]
    7fc8:	691b      	ldr	r3, [r3, #16]
    7fca:	2b00      	cmp	r3, #0
    7fcc:	d017      	beq.n	7ffe <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    7fce:	687b      	ldr	r3, [r7, #4]
    7fd0:	3310      	adds	r3, #16
    7fd2:	0018      	movs	r0, r3
    7fd4:	4b12      	ldr	r3, [pc, #72]	; (8020 <prvUnlockQueue+0xe8>)
    7fd6:	4798      	blx	r3
    7fd8:	1e03      	subs	r3, r0, #0
    7fda:	d001      	beq.n	7fe0 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    7fdc:	4b0f      	ldr	r3, [pc, #60]	; (801c <prvUnlockQueue+0xe4>)
    7fde:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    7fe0:	230e      	movs	r3, #14
    7fe2:	18fb      	adds	r3, r7, r3
    7fe4:	781b      	ldrb	r3, [r3, #0]
    7fe6:	3b01      	subs	r3, #1
    7fe8:	b2da      	uxtb	r2, r3
    7fea:	230e      	movs	r3, #14
    7fec:	18fb      	adds	r3, r7, r3
    7fee:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    7ff0:	230e      	movs	r3, #14
    7ff2:	18fb      	adds	r3, r7, r3
    7ff4:	781b      	ldrb	r3, [r3, #0]
    7ff6:	b25b      	sxtb	r3, r3
    7ff8:	2b00      	cmp	r3, #0
    7ffa:	dce4      	bgt.n	7fc6 <prvUnlockQueue+0x8e>
    7ffc:	e000      	b.n	8000 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    7ffe:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    8000:	687b      	ldr	r3, [r7, #4]
    8002:	2244      	movs	r2, #68	; 0x44
    8004:	21ff      	movs	r1, #255	; 0xff
    8006:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    8008:	4b06      	ldr	r3, [pc, #24]	; (8024 <prvUnlockQueue+0xec>)
    800a:	4798      	blx	r3
}
    800c:	46c0      	nop			; (mov r8, r8)
    800e:	46bd      	mov	sp, r7
    8010:	b004      	add	sp, #16
    8012:	bd80      	pop	{r7, pc}
    8014:	00006639 	.word	0x00006639
    8018:	0000810d 	.word	0x0000810d
    801c:	000090e1 	.word	0x000090e1
    8020:	00008ecd 	.word	0x00008ecd
    8024:	0000665d 	.word	0x0000665d

00008028 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    8028:	b580      	push	{r7, lr}
    802a:	b084      	sub	sp, #16
    802c:	af00      	add	r7, sp, #0
    802e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    8030:	4b08      	ldr	r3, [pc, #32]	; (8054 <prvIsQueueEmpty+0x2c>)
    8032:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    8034:	687b      	ldr	r3, [r7, #4]
    8036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8038:	2b00      	cmp	r3, #0
    803a:	d102      	bne.n	8042 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    803c:	2301      	movs	r3, #1
    803e:	60fb      	str	r3, [r7, #12]
    8040:	e001      	b.n	8046 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    8042:	2300      	movs	r3, #0
    8044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    8046:	4b04      	ldr	r3, [pc, #16]	; (8058 <prvIsQueueEmpty+0x30>)
    8048:	4798      	blx	r3

	return xReturn;
    804a:	68fb      	ldr	r3, [r7, #12]
}
    804c:	0018      	movs	r0, r3
    804e:	46bd      	mov	sp, r7
    8050:	b004      	add	sp, #16
    8052:	bd80      	pop	{r7, pc}
    8054:	00006639 	.word	0x00006639
    8058:	0000665d 	.word	0x0000665d

0000805c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    805c:	b580      	push	{r7, lr}
    805e:	b084      	sub	sp, #16
    8060:	af00      	add	r7, sp, #0
    8062:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    8064:	4b09      	ldr	r3, [pc, #36]	; (808c <prvIsQueueFull+0x30>)
    8066:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    8068:	687b      	ldr	r3, [r7, #4]
    806a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    806c:	687b      	ldr	r3, [r7, #4]
    806e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8070:	429a      	cmp	r2, r3
    8072:	d102      	bne.n	807a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    8074:	2301      	movs	r3, #1
    8076:	60fb      	str	r3, [r7, #12]
    8078:	e001      	b.n	807e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    807a:	2300      	movs	r3, #0
    807c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    807e:	4b04      	ldr	r3, [pc, #16]	; (8090 <prvIsQueueFull+0x34>)
    8080:	4798      	blx	r3

	return xReturn;
    8082:	68fb      	ldr	r3, [r7, #12]
}
    8084:	0018      	movs	r0, r3
    8086:	46bd      	mov	sp, r7
    8088:	b004      	add	sp, #16
    808a:	bd80      	pop	{r7, pc}
    808c:	00006639 	.word	0x00006639
    8090:	0000665d 	.word	0x0000665d

00008094 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    8094:	b580      	push	{r7, lr}
    8096:	b086      	sub	sp, #24
    8098:	af00      	add	r7, sp, #0
    809a:	60f8      	str	r0, [r7, #12]
    809c:	60b9      	str	r1, [r7, #8]
    809e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    80a0:	68fb      	ldr	r3, [r7, #12]
    80a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    80a4:	4b15      	ldr	r3, [pc, #84]	; (80fc <vQueueWaitForMessageRestricted+0x68>)
    80a6:	4798      	blx	r3
    80a8:	697b      	ldr	r3, [r7, #20]
    80aa:	2244      	movs	r2, #68	; 0x44
    80ac:	5c9b      	ldrb	r3, [r3, r2]
    80ae:	b25b      	sxtb	r3, r3
    80b0:	3301      	adds	r3, #1
    80b2:	d103      	bne.n	80bc <vQueueWaitForMessageRestricted+0x28>
    80b4:	697b      	ldr	r3, [r7, #20]
    80b6:	2244      	movs	r2, #68	; 0x44
    80b8:	2100      	movs	r1, #0
    80ba:	5499      	strb	r1, [r3, r2]
    80bc:	697b      	ldr	r3, [r7, #20]
    80be:	2245      	movs	r2, #69	; 0x45
    80c0:	5c9b      	ldrb	r3, [r3, r2]
    80c2:	b25b      	sxtb	r3, r3
    80c4:	3301      	adds	r3, #1
    80c6:	d103      	bne.n	80d0 <vQueueWaitForMessageRestricted+0x3c>
    80c8:	697b      	ldr	r3, [r7, #20]
    80ca:	2245      	movs	r2, #69	; 0x45
    80cc:	2100      	movs	r1, #0
    80ce:	5499      	strb	r1, [r3, r2]
    80d0:	4b0b      	ldr	r3, [pc, #44]	; (8100 <vQueueWaitForMessageRestricted+0x6c>)
    80d2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    80d4:	697b      	ldr	r3, [r7, #20]
    80d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    80d8:	2b00      	cmp	r3, #0
    80da:	d106      	bne.n	80ea <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    80dc:	697b      	ldr	r3, [r7, #20]
    80de:	3324      	adds	r3, #36	; 0x24
    80e0:	687a      	ldr	r2, [r7, #4]
    80e2:	68b9      	ldr	r1, [r7, #8]
    80e4:	0018      	movs	r0, r3
    80e6:	4b07      	ldr	r3, [pc, #28]	; (8104 <vQueueWaitForMessageRestricted+0x70>)
    80e8:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    80ea:	697b      	ldr	r3, [r7, #20]
    80ec:	0018      	movs	r0, r3
    80ee:	4b06      	ldr	r3, [pc, #24]	; (8108 <vQueueWaitForMessageRestricted+0x74>)
    80f0:	4798      	blx	r3
	}
    80f2:	46c0      	nop			; (mov r8, r8)
    80f4:	46bd      	mov	sp, r7
    80f6:	b006      	add	sp, #24
    80f8:	bd80      	pop	{r7, pc}
    80fa:	46c0      	nop			; (mov r8, r8)
    80fc:	00006639 	.word	0x00006639
    8100:	0000665d 	.word	0x0000665d
    8104:	00008ded 	.word	0x00008ded
    8108:	00007f39 	.word	0x00007f39

0000810c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    810c:	b5b0      	push	{r4, r5, r7, lr}
    810e:	b086      	sub	sp, #24
    8110:	af00      	add	r7, sp, #0
    8112:	6078      	str	r0, [r7, #4]
    8114:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    8116:	687b      	ldr	r3, [r7, #4]
    8118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    811a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    811c:	2300      	movs	r3, #0
    811e:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    8120:	693b      	ldr	r3, [r7, #16]
    8122:	2b00      	cmp	r3, #0
    8124:	d101      	bne.n	812a <prvNotifyQueueSetContainer+0x1e>
    8126:	b672      	cpsid	i
    8128:	e7fe      	b.n	8128 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    812a:	693b      	ldr	r3, [r7, #16]
    812c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    812e:	693b      	ldr	r3, [r7, #16]
    8130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8132:	429a      	cmp	r2, r3
    8134:	d301      	bcc.n	813a <prvNotifyQueueSetContainer+0x2e>
    8136:	b672      	cpsid	i
    8138:	e7fe      	b.n	8138 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    813a:	693b      	ldr	r3, [r7, #16]
    813c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    813e:	693b      	ldr	r3, [r7, #16]
    8140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8142:	429a      	cmp	r2, r3
    8144:	d300      	bcc.n	8148 <prvNotifyQueueSetContainer+0x3c>
    8146:	e08b      	b.n	8260 <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    8148:	230f      	movs	r3, #15
    814a:	18fb      	adds	r3, r7, r3
    814c:	693a      	ldr	r2, [r7, #16]
    814e:	2145      	movs	r1, #69	; 0x45
    8150:	5c52      	ldrb	r2, [r2, r1]
    8152:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
    8154:	4b45      	ldr	r3, [pc, #276]	; (826c <prvNotifyQueueSetContainer+0x160>)
    8156:	4798      	blx	r3
    8158:	0003      	movs	r3, r0
    815a:	0018      	movs	r0, r3
    815c:	4b44      	ldr	r3, [pc, #272]	; (8270 <prvNotifyQueueSetContainer+0x164>)
    815e:	4798      	blx	r3
    8160:	0003      	movs	r3, r0
    8162:	001a      	movs	r2, r3
    8164:	4b43      	ldr	r3, [pc, #268]	; (8274 <prvNotifyQueueSetContainer+0x168>)
    8166:	881b      	ldrh	r3, [r3, #0]
    8168:	4013      	ands	r3, r2
    816a:	b29b      	uxth	r3, r3
    816c:	2b00      	cmp	r3, #0
    816e:	d02e      	beq.n	81ce <prvNotifyQueueSetContainer+0xc2>
    8170:	693b      	ldr	r3, [r7, #16]
    8172:	0018      	movs	r0, r3
    8174:	4b40      	ldr	r3, [pc, #256]	; (8278 <prvNotifyQueueSetContainer+0x16c>)
    8176:	4798      	blx	r3
    8178:	0003      	movs	r3, r0
    817a:	001a      	movs	r2, r3
    817c:	4b3d      	ldr	r3, [pc, #244]	; (8274 <prvNotifyQueueSetContainer+0x168>)
    817e:	881b      	ldrh	r3, [r3, #0]
    8180:	4013      	ands	r3, r2
    8182:	b29b      	uxth	r3, r3
    8184:	2b00      	cmp	r3, #0
    8186:	d022      	beq.n	81ce <prvNotifyQueueSetContainer+0xc2>
    8188:	683b      	ldr	r3, [r7, #0]
    818a:	2b00      	cmp	r3, #0
    818c:	d10b      	bne.n	81a6 <prvNotifyQueueSetContainer+0x9a>
    818e:	693b      	ldr	r3, [r7, #16]
    8190:	0018      	movs	r0, r3
    8192:	4b3a      	ldr	r3, [pc, #232]	; (827c <prvNotifyQueueSetContainer+0x170>)
    8194:	4798      	blx	r3
    8196:	0003      	movs	r3, r0
    8198:	001a      	movs	r2, r3
    819a:	4b39      	ldr	r3, [pc, #228]	; (8280 <prvNotifyQueueSetContainer+0x174>)
    819c:	5c9b      	ldrb	r3, [r3, r2]
    819e:	3320      	adds	r3, #32
    81a0:	b2db      	uxtb	r3, r3
    81a2:	001d      	movs	r5, r3
    81a4:	e000      	b.n	81a8 <prvNotifyQueueSetContainer+0x9c>
    81a6:	2525      	movs	r5, #37	; 0x25
    81a8:	693b      	ldr	r3, [r7, #16]
    81aa:	0018      	movs	r0, r3
    81ac:	4b33      	ldr	r3, [pc, #204]	; (827c <prvNotifyQueueSetContainer+0x170>)
    81ae:	4798      	blx	r3
    81b0:	0003      	movs	r3, r0
    81b2:	001a      	movs	r2, r3
    81b4:	4b32      	ldr	r3, [pc, #200]	; (8280 <prvNotifyQueueSetContainer+0x174>)
    81b6:	5c9c      	ldrb	r4, [r3, r2]
    81b8:	693b      	ldr	r3, [r7, #16]
    81ba:	0018      	movs	r0, r3
    81bc:	4b31      	ldr	r3, [pc, #196]	; (8284 <prvNotifyQueueSetContainer+0x178>)
    81be:	4798      	blx	r3
    81c0:	0003      	movs	r3, r0
    81c2:	b2db      	uxtb	r3, r3
    81c4:	001a      	movs	r2, r3
    81c6:	0021      	movs	r1, r4
    81c8:	0028      	movs	r0, r5
    81ca:	4b2f      	ldr	r3, [pc, #188]	; (8288 <prvNotifyQueueSetContainer+0x17c>)
    81cc:	4798      	blx	r3
    81ce:	693b      	ldr	r3, [r7, #16]
    81d0:	0018      	movs	r0, r3
    81d2:	4b2a      	ldr	r3, [pc, #168]	; (827c <prvNotifyQueueSetContainer+0x170>)
    81d4:	4798      	blx	r3
    81d6:	0003      	movs	r3, r0
    81d8:	001a      	movs	r2, r3
    81da:	4b29      	ldr	r3, [pc, #164]	; (8280 <prvNotifyQueueSetContainer+0x174>)
    81dc:	5c9c      	ldrb	r4, [r3, r2]
    81de:	693b      	ldr	r3, [r7, #16]
    81e0:	0018      	movs	r0, r3
    81e2:	4b28      	ldr	r3, [pc, #160]	; (8284 <prvNotifyQueueSetContainer+0x178>)
    81e4:	4798      	blx	r3
    81e6:	0003      	movs	r3, r0
    81e8:	b2dd      	uxtb	r5, r3
    81ea:	693b      	ldr	r3, [r7, #16]
    81ec:	0018      	movs	r0, r3
    81ee:	4b23      	ldr	r3, [pc, #140]	; (827c <prvNotifyQueueSetContainer+0x170>)
    81f0:	4798      	blx	r3
    81f2:	0003      	movs	r3, r0
    81f4:	001a      	movs	r2, r3
    81f6:	4b22      	ldr	r3, [pc, #136]	; (8280 <prvNotifyQueueSetContainer+0x174>)
    81f8:	5c9b      	ldrb	r3, [r3, r2]
    81fa:	2b02      	cmp	r3, #2
    81fc:	d005      	beq.n	820a <prvNotifyQueueSetContainer+0xfe>
    81fe:	693b      	ldr	r3, [r7, #16]
    8200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8202:	b2db      	uxtb	r3, r3
    8204:	3301      	adds	r3, #1
    8206:	b2db      	uxtb	r3, r3
    8208:	e000      	b.n	820c <prvNotifyQueueSetContainer+0x100>
    820a:	2300      	movs	r3, #0
    820c:	001a      	movs	r2, r3
    820e:	0029      	movs	r1, r5
    8210:	0020      	movs	r0, r4
    8212:	4b1e      	ldr	r3, [pc, #120]	; (828c <prvNotifyQueueSetContainer+0x180>)
    8214:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    8216:	683a      	ldr	r2, [r7, #0]
    8218:	1d39      	adds	r1, r7, #4
    821a:	693b      	ldr	r3, [r7, #16]
    821c:	0018      	movs	r0, r3
    821e:	4b1c      	ldr	r3, [pc, #112]	; (8290 <prvNotifyQueueSetContainer+0x184>)
    8220:	4798      	blx	r3
    8222:	0003      	movs	r3, r0
    8224:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    8226:	230f      	movs	r3, #15
    8228:	18fb      	adds	r3, r7, r3
    822a:	781b      	ldrb	r3, [r3, #0]
    822c:	b25b      	sxtb	r3, r3
    822e:	3301      	adds	r3, #1
    8230:	d10d      	bne.n	824e <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    8232:	693b      	ldr	r3, [r7, #16]
    8234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8236:	2b00      	cmp	r3, #0
    8238:	d012      	beq.n	8260 <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    823a:	693b      	ldr	r3, [r7, #16]
    823c:	3324      	adds	r3, #36	; 0x24
    823e:	0018      	movs	r0, r3
    8240:	4b14      	ldr	r3, [pc, #80]	; (8294 <prvNotifyQueueSetContainer+0x188>)
    8242:	4798      	blx	r3
    8244:	1e03      	subs	r3, r0, #0
    8246:	d00b      	beq.n	8260 <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    8248:	2301      	movs	r3, #1
    824a:	617b      	str	r3, [r7, #20]
    824c:	e008      	b.n	8260 <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    824e:	230f      	movs	r3, #15
    8250:	18fb      	adds	r3, r7, r3
    8252:	781b      	ldrb	r3, [r3, #0]
    8254:	3301      	adds	r3, #1
    8256:	b2db      	uxtb	r3, r3
    8258:	b259      	sxtb	r1, r3
    825a:	693b      	ldr	r3, [r7, #16]
    825c:	2245      	movs	r2, #69	; 0x45
    825e:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    8260:	697b      	ldr	r3, [r7, #20]
	}
    8262:	0018      	movs	r0, r3
    8264:	46bd      	mov	sp, r7
    8266:	b006      	add	sp, #24
    8268:	bdb0      	pop	{r4, r5, r7, pc}
    826a:	46c0      	nop			; (mov r8, r8)
    826c:	000048cd 	.word	0x000048cd
    8270:	00004631 	.word	0x00004631
    8274:	200000fc 	.word	0x200000fc
    8278:	000046f1 	.word	0x000046f1
    827c:	000045f1 	.word	0x000045f1
    8280:	200000f0 	.word	0x200000f0
    8284:	000046d1 	.word	0x000046d1
    8288:	00005029 	.word	0x00005029
    828c:	00005685 	.word	0x00005685
    8290:	00007e09 	.word	0x00007e09
    8294:	00008ecd 	.word	0x00008ecd

00008298 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    8298:	b590      	push	{r4, r7, lr}
    829a:	b08d      	sub	sp, #52	; 0x34
    829c:	af04      	add	r7, sp, #16
    829e:	60f8      	str	r0, [r7, #12]
    82a0:	60b9      	str	r1, [r7, #8]
    82a2:	603b      	str	r3, [r7, #0]
    82a4:	1dbb      	adds	r3, r7, #6
    82a6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    82a8:	1dbb      	adds	r3, r7, #6
    82aa:	881b      	ldrh	r3, [r3, #0]
    82ac:	009b      	lsls	r3, r3, #2
    82ae:	0018      	movs	r0, r3
    82b0:	4b1d      	ldr	r3, [pc, #116]	; (8328 <xTaskCreate+0x90>)
    82b2:	4798      	blx	r3
    82b4:	0003      	movs	r3, r0
    82b6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    82b8:	697b      	ldr	r3, [r7, #20]
    82ba:	2b00      	cmp	r3, #0
    82bc:	d010      	beq.n	82e0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    82be:	2054      	movs	r0, #84	; 0x54
    82c0:	4b19      	ldr	r3, [pc, #100]	; (8328 <xTaskCreate+0x90>)
    82c2:	4798      	blx	r3
    82c4:	0003      	movs	r3, r0
    82c6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    82c8:	69fb      	ldr	r3, [r7, #28]
    82ca:	2b00      	cmp	r3, #0
    82cc:	d003      	beq.n	82d6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    82ce:	69fb      	ldr	r3, [r7, #28]
    82d0:	697a      	ldr	r2, [r7, #20]
    82d2:	631a      	str	r2, [r3, #48]	; 0x30
    82d4:	e006      	b.n	82e4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    82d6:	697b      	ldr	r3, [r7, #20]
    82d8:	0018      	movs	r0, r3
    82da:	4b14      	ldr	r3, [pc, #80]	; (832c <xTaskCreate+0x94>)
    82dc:	4798      	blx	r3
    82de:	e001      	b.n	82e4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    82e0:	2300      	movs	r3, #0
    82e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    82e4:	69fb      	ldr	r3, [r7, #28]
    82e6:	2b00      	cmp	r3, #0
    82e8:	d016      	beq.n	8318 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    82ea:	1dbb      	adds	r3, r7, #6
    82ec:	881a      	ldrh	r2, [r3, #0]
    82ee:	683c      	ldr	r4, [r7, #0]
    82f0:	68b9      	ldr	r1, [r7, #8]
    82f2:	68f8      	ldr	r0, [r7, #12]
    82f4:	2300      	movs	r3, #0
    82f6:	9303      	str	r3, [sp, #12]
    82f8:	69fb      	ldr	r3, [r7, #28]
    82fa:	9302      	str	r3, [sp, #8]
    82fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    82fe:	9301      	str	r3, [sp, #4]
    8300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8302:	9300      	str	r3, [sp, #0]
    8304:	0023      	movs	r3, r4
    8306:	4c0a      	ldr	r4, [pc, #40]	; (8330 <xTaskCreate+0x98>)
    8308:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    830a:	69fb      	ldr	r3, [r7, #28]
    830c:	0018      	movs	r0, r3
    830e:	4b09      	ldr	r3, [pc, #36]	; (8334 <xTaskCreate+0x9c>)
    8310:	4798      	blx	r3
			xReturn = pdPASS;
    8312:	2301      	movs	r3, #1
    8314:	61bb      	str	r3, [r7, #24]
    8316:	e002      	b.n	831e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    8318:	2301      	movs	r3, #1
    831a:	425b      	negs	r3, r3
    831c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    831e:	69bb      	ldr	r3, [r7, #24]
	}
    8320:	0018      	movs	r0, r3
    8322:	46bd      	mov	sp, r7
    8324:	b009      	add	sp, #36	; 0x24
    8326:	bd90      	pop	{r4, r7, pc}
    8328:	00006771 	.word	0x00006771
    832c:	00006835 	.word	0x00006835
    8330:	00008339 	.word	0x00008339
    8334:	00008449 	.word	0x00008449

00008338 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    8338:	b580      	push	{r7, lr}
    833a:	b086      	sub	sp, #24
    833c:	af00      	add	r7, sp, #0
    833e:	60f8      	str	r0, [r7, #12]
    8340:	60b9      	str	r1, [r7, #8]
    8342:	607a      	str	r2, [r7, #4]
    8344:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    8346:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8348:	6b18      	ldr	r0, [r3, #48]	; 0x30
    834a:	687b      	ldr	r3, [r7, #4]
    834c:	009b      	lsls	r3, r3, #2
    834e:	001a      	movs	r2, r3
    8350:	21a5      	movs	r1, #165	; 0xa5
    8352:	4b39      	ldr	r3, [pc, #228]	; (8438 <prvInitialiseNewTask+0x100>)
    8354:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    8356:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    835a:	687b      	ldr	r3, [r7, #4]
    835c:	4937      	ldr	r1, [pc, #220]	; (843c <prvInitialiseNewTask+0x104>)
    835e:	468c      	mov	ip, r1
    8360:	4463      	add	r3, ip
    8362:	009b      	lsls	r3, r3, #2
    8364:	18d3      	adds	r3, r2, r3
    8366:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    8368:	693b      	ldr	r3, [r7, #16]
    836a:	2207      	movs	r2, #7
    836c:	4393      	bics	r3, r2
    836e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    8370:	693b      	ldr	r3, [r7, #16]
    8372:	2207      	movs	r2, #7
    8374:	4013      	ands	r3, r2
    8376:	d001      	beq.n	837c <prvInitialiseNewTask+0x44>
    8378:	b672      	cpsid	i
    837a:	e7fe      	b.n	837a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    837c:	2300      	movs	r3, #0
    837e:	617b      	str	r3, [r7, #20]
    8380:	e013      	b.n	83aa <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    8382:	68ba      	ldr	r2, [r7, #8]
    8384:	697b      	ldr	r3, [r7, #20]
    8386:	18d3      	adds	r3, r2, r3
    8388:	7818      	ldrb	r0, [r3, #0]
    838a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    838c:	2134      	movs	r1, #52	; 0x34
    838e:	697b      	ldr	r3, [r7, #20]
    8390:	18d3      	adds	r3, r2, r3
    8392:	185b      	adds	r3, r3, r1
    8394:	1c02      	adds	r2, r0, #0
    8396:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    8398:	68ba      	ldr	r2, [r7, #8]
    839a:	697b      	ldr	r3, [r7, #20]
    839c:	18d3      	adds	r3, r2, r3
    839e:	781b      	ldrb	r3, [r3, #0]
    83a0:	2b00      	cmp	r3, #0
    83a2:	d006      	beq.n	83b2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    83a4:	697b      	ldr	r3, [r7, #20]
    83a6:	3301      	adds	r3, #1
    83a8:	617b      	str	r3, [r7, #20]
    83aa:	697b      	ldr	r3, [r7, #20]
    83ac:	2b07      	cmp	r3, #7
    83ae:	d9e8      	bls.n	8382 <prvInitialiseNewTask+0x4a>
    83b0:	e000      	b.n	83b4 <prvInitialiseNewTask+0x7c>
		{
			break;
    83b2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    83b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    83b6:	223b      	movs	r2, #59	; 0x3b
    83b8:	2100      	movs	r1, #0
    83ba:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    83bc:	6a3b      	ldr	r3, [r7, #32]
    83be:	2b04      	cmp	r3, #4
    83c0:	d901      	bls.n	83c6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    83c2:	2304      	movs	r3, #4
    83c4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    83c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    83c8:	6a3a      	ldr	r2, [r7, #32]
    83ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    83cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    83ce:	6a3a      	ldr	r2, [r7, #32]
    83d0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    83d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    83d4:	2200      	movs	r2, #0
    83d6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    83d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    83da:	3304      	adds	r3, #4
    83dc:	0018      	movs	r0, r3
    83de:	4b18      	ldr	r3, [pc, #96]	; (8440 <prvInitialiseNewTask+0x108>)
    83e0:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    83e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    83e4:	3318      	adds	r3, #24
    83e6:	0018      	movs	r0, r3
    83e8:	4b15      	ldr	r3, [pc, #84]	; (8440 <prvInitialiseNewTask+0x108>)
    83ea:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    83ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    83ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    83f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    83f2:	6a3b      	ldr	r3, [r7, #32]
    83f4:	2205      	movs	r2, #5
    83f6:	1ad2      	subs	r2, r2, r3
    83f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    83fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    83fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    83fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8400:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    8402:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8404:	2200      	movs	r2, #0
    8406:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    8408:	6abb      	ldr	r3, [r7, #40]	; 0x28
    840a:	2250      	movs	r2, #80	; 0x50
    840c:	2100      	movs	r1, #0
    840e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    8410:	683a      	ldr	r2, [r7, #0]
    8412:	68f9      	ldr	r1, [r7, #12]
    8414:	693b      	ldr	r3, [r7, #16]
    8416:	0018      	movs	r0, r3
    8418:	4b0a      	ldr	r3, [pc, #40]	; (8444 <prvInitialiseNewTask+0x10c>)
    841a:	4798      	blx	r3
    841c:	0002      	movs	r2, r0
    841e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8420:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    8422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8424:	2b00      	cmp	r3, #0
    8426:	d002      	beq.n	842e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    8428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    842a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    842c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    842e:	46c0      	nop			; (mov r8, r8)
    8430:	46bd      	mov	sp, r7
    8432:	b006      	add	sp, #24
    8434:	bd80      	pop	{r7, pc}
    8436:	46c0      	nop			; (mov r8, r8)
    8438:	00020d8b 	.word	0x00020d8b
    843c:	3fffffff 	.word	0x3fffffff
    8440:	000063e5 	.word	0x000063e5
    8444:	000064fd 	.word	0x000064fd

00008448 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    8448:	b580      	push	{r7, lr}
    844a:	b082      	sub	sp, #8
    844c:	af00      	add	r7, sp, #0
    844e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    8450:	4b60      	ldr	r3, [pc, #384]	; (85d4 <prvAddNewTaskToReadyList+0x18c>)
    8452:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    8454:	4b60      	ldr	r3, [pc, #384]	; (85d8 <prvAddNewTaskToReadyList+0x190>)
    8456:	681b      	ldr	r3, [r3, #0]
    8458:	1c5a      	adds	r2, r3, #1
    845a:	4b5f      	ldr	r3, [pc, #380]	; (85d8 <prvAddNewTaskToReadyList+0x190>)
    845c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    845e:	4b5f      	ldr	r3, [pc, #380]	; (85dc <prvAddNewTaskToReadyList+0x194>)
    8460:	681b      	ldr	r3, [r3, #0]
    8462:	2b00      	cmp	r3, #0
    8464:	d109      	bne.n	847a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    8466:	4b5d      	ldr	r3, [pc, #372]	; (85dc <prvAddNewTaskToReadyList+0x194>)
    8468:	687a      	ldr	r2, [r7, #4]
    846a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    846c:	4b5a      	ldr	r3, [pc, #360]	; (85d8 <prvAddNewTaskToReadyList+0x190>)
    846e:	681b      	ldr	r3, [r3, #0]
    8470:	2b01      	cmp	r3, #1
    8472:	d110      	bne.n	8496 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    8474:	4b5a      	ldr	r3, [pc, #360]	; (85e0 <prvAddNewTaskToReadyList+0x198>)
    8476:	4798      	blx	r3
    8478:	e00d      	b.n	8496 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    847a:	4b5a      	ldr	r3, [pc, #360]	; (85e4 <prvAddNewTaskToReadyList+0x19c>)
    847c:	681b      	ldr	r3, [r3, #0]
    847e:	2b00      	cmp	r3, #0
    8480:	d109      	bne.n	8496 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    8482:	4b56      	ldr	r3, [pc, #344]	; (85dc <prvAddNewTaskToReadyList+0x194>)
    8484:	681b      	ldr	r3, [r3, #0]
    8486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8488:	687b      	ldr	r3, [r7, #4]
    848a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    848c:	429a      	cmp	r2, r3
    848e:	d802      	bhi.n	8496 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    8490:	4b52      	ldr	r3, [pc, #328]	; (85dc <prvAddNewTaskToReadyList+0x194>)
    8492:	687a      	ldr	r2, [r7, #4]
    8494:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    8496:	4b54      	ldr	r3, [pc, #336]	; (85e8 <prvAddNewTaskToReadyList+0x1a0>)
    8498:	681b      	ldr	r3, [r3, #0]
    849a:	1c5a      	adds	r2, r3, #1
    849c:	4b52      	ldr	r3, [pc, #328]	; (85e8 <prvAddNewTaskToReadyList+0x1a0>)
    849e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    84a0:	4b51      	ldr	r3, [pc, #324]	; (85e8 <prvAddNewTaskToReadyList+0x1a0>)
    84a2:	681a      	ldr	r2, [r3, #0]
    84a4:	687b      	ldr	r3, [r7, #4]
    84a6:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
    84a8:	687b      	ldr	r3, [r7, #4]
    84aa:	2b00      	cmp	r3, #0
    84ac:	d052      	beq.n	8554 <prvAddNewTaskToReadyList+0x10c>
    84ae:	2003      	movs	r0, #3
    84b0:	4b4e      	ldr	r3, [pc, #312]	; (85ec <prvAddNewTaskToReadyList+0x1a4>)
    84b2:	4798      	blx	r3
    84b4:	0003      	movs	r3, r0
    84b6:	b29a      	uxth	r2, r3
    84b8:	687b      	ldr	r3, [r7, #4]
    84ba:	0011      	movs	r1, r2
    84bc:	0018      	movs	r0, r3
    84be:	4b4c      	ldr	r3, [pc, #304]	; (85f0 <prvAddNewTaskToReadyList+0x1a8>)
    84c0:	4798      	blx	r3
    84c2:	4b4c      	ldr	r3, [pc, #304]	; (85f4 <prvAddNewTaskToReadyList+0x1ac>)
    84c4:	881a      	ldrh	r2, [r3, #0]
    84c6:	687b      	ldr	r3, [r7, #4]
    84c8:	0011      	movs	r1, r2
    84ca:	0018      	movs	r0, r3
    84cc:	4b4a      	ldr	r3, [pc, #296]	; (85f8 <prvAddNewTaskToReadyList+0x1b0>)
    84ce:	4798      	blx	r3
    84d0:	687b      	ldr	r3, [r7, #4]
    84d2:	0018      	movs	r0, r3
    84d4:	4b49      	ldr	r3, [pc, #292]	; (85fc <prvAddNewTaskToReadyList+0x1b4>)
    84d6:	4798      	blx	r3
    84d8:	0003      	movs	r3, r0
    84da:	b2d9      	uxtb	r1, r3
    84dc:	687b      	ldr	r3, [r7, #4]
    84de:	3334      	adds	r3, #52	; 0x34
    84e0:	001a      	movs	r2, r3
    84e2:	2003      	movs	r0, #3
    84e4:	4b46      	ldr	r3, [pc, #280]	; (8600 <prvAddNewTaskToReadyList+0x1b8>)
    84e6:	4798      	blx	r3
    84e8:	687b      	ldr	r3, [r7, #4]
    84ea:	0018      	movs	r0, r3
    84ec:	4b43      	ldr	r3, [pc, #268]	; (85fc <prvAddNewTaskToReadyList+0x1b4>)
    84ee:	4798      	blx	r3
    84f0:	0003      	movs	r3, r0
    84f2:	b2d9      	uxtb	r1, r3
    84f4:	687b      	ldr	r3, [r7, #4]
    84f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    84f8:	b2db      	uxtb	r3, r3
    84fa:	001a      	movs	r2, r3
    84fc:	2003      	movs	r0, #3
    84fe:	4b41      	ldr	r3, [pc, #260]	; (8604 <prvAddNewTaskToReadyList+0x1bc>)
    8500:	4798      	blx	r3
    8502:	4b41      	ldr	r3, [pc, #260]	; (8608 <prvAddNewTaskToReadyList+0x1c0>)
    8504:	4798      	blx	r3
    8506:	0003      	movs	r3, r0
    8508:	0018      	movs	r0, r3
    850a:	4b40      	ldr	r3, [pc, #256]	; (860c <prvAddNewTaskToReadyList+0x1c4>)
    850c:	4798      	blx	r3
    850e:	0003      	movs	r3, r0
    8510:	001a      	movs	r2, r3
    8512:	4b3f      	ldr	r3, [pc, #252]	; (8610 <prvAddNewTaskToReadyList+0x1c8>)
    8514:	881b      	ldrh	r3, [r3, #0]
    8516:	4013      	ands	r3, r2
    8518:	b29b      	uxth	r3, r3
    851a:	2b00      	cmp	r3, #0
    851c:	d016      	beq.n	854c <prvAddNewTaskToReadyList+0x104>
    851e:	687b      	ldr	r3, [r7, #4]
    8520:	0018      	movs	r0, r3
    8522:	4b3a      	ldr	r3, [pc, #232]	; (860c <prvAddNewTaskToReadyList+0x1c4>)
    8524:	4798      	blx	r3
    8526:	0003      	movs	r3, r0
    8528:	001a      	movs	r2, r3
    852a:	4b39      	ldr	r3, [pc, #228]	; (8610 <prvAddNewTaskToReadyList+0x1c8>)
    852c:	881b      	ldrh	r3, [r3, #0]
    852e:	4013      	ands	r3, r2
    8530:	b29b      	uxth	r3, r3
    8532:	2b00      	cmp	r3, #0
    8534:	d00a      	beq.n	854c <prvAddNewTaskToReadyList+0x104>
    8536:	687b      	ldr	r3, [r7, #4]
    8538:	0018      	movs	r0, r3
    853a:	4b30      	ldr	r3, [pc, #192]	; (85fc <prvAddNewTaskToReadyList+0x1b4>)
    853c:	4798      	blx	r3
    853e:	0003      	movs	r3, r0
    8540:	b2db      	uxtb	r3, r3
    8542:	001a      	movs	r2, r3
    8544:	2103      	movs	r1, #3
    8546:	201b      	movs	r0, #27
    8548:	4b32      	ldr	r3, [pc, #200]	; (8614 <prvAddNewTaskToReadyList+0x1cc>)
    854a:	4798      	blx	r3
    854c:	687b      	ldr	r3, [r7, #4]
    854e:	0018      	movs	r0, r3
    8550:	4b31      	ldr	r3, [pc, #196]	; (8618 <prvAddNewTaskToReadyList+0x1d0>)
    8552:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
    8554:	687b      	ldr	r3, [r7, #4]
    8556:	0018      	movs	r0, r3
    8558:	4b2c      	ldr	r3, [pc, #176]	; (860c <prvAddNewTaskToReadyList+0x1c4>)
    855a:	4798      	blx	r3
    855c:	0003      	movs	r3, r0
    855e:	001a      	movs	r2, r3
    8560:	4b2b      	ldr	r3, [pc, #172]	; (8610 <prvAddNewTaskToReadyList+0x1c8>)
    8562:	881b      	ldrh	r3, [r3, #0]
    8564:	4013      	ands	r3, r2
    8566:	b29b      	uxth	r3, r3
    8568:	2b00      	cmp	r3, #0
    856a:	d008      	beq.n	857e <prvAddNewTaskToReadyList+0x136>
    856c:	687b      	ldr	r3, [r7, #4]
    856e:	0018      	movs	r0, r3
    8570:	4b22      	ldr	r3, [pc, #136]	; (85fc <prvAddNewTaskToReadyList+0x1b4>)
    8572:	4798      	blx	r3
    8574:	0003      	movs	r3, r0
    8576:	b2db      	uxtb	r3, r3
    8578:	0018      	movs	r0, r3
    857a:	4b28      	ldr	r3, [pc, #160]	; (861c <prvAddNewTaskToReadyList+0x1d4>)
    857c:	4798      	blx	r3
    857e:	687b      	ldr	r3, [r7, #4]
    8580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8582:	4b27      	ldr	r3, [pc, #156]	; (8620 <prvAddNewTaskToReadyList+0x1d8>)
    8584:	681b      	ldr	r3, [r3, #0]
    8586:	429a      	cmp	r2, r3
    8588:	d903      	bls.n	8592 <prvAddNewTaskToReadyList+0x14a>
    858a:	687b      	ldr	r3, [r7, #4]
    858c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    858e:	4b24      	ldr	r3, [pc, #144]	; (8620 <prvAddNewTaskToReadyList+0x1d8>)
    8590:	601a      	str	r2, [r3, #0]
    8592:	687b      	ldr	r3, [r7, #4]
    8594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8596:	0013      	movs	r3, r2
    8598:	009b      	lsls	r3, r3, #2
    859a:	189b      	adds	r3, r3, r2
    859c:	009b      	lsls	r3, r3, #2
    859e:	4a21      	ldr	r2, [pc, #132]	; (8624 <prvAddNewTaskToReadyList+0x1dc>)
    85a0:	189a      	adds	r2, r3, r2
    85a2:	687b      	ldr	r3, [r7, #4]
    85a4:	3304      	adds	r3, #4
    85a6:	0019      	movs	r1, r3
    85a8:	0010      	movs	r0, r2
    85aa:	4b1f      	ldr	r3, [pc, #124]	; (8628 <prvAddNewTaskToReadyList+0x1e0>)
    85ac:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    85ae:	4b1f      	ldr	r3, [pc, #124]	; (862c <prvAddNewTaskToReadyList+0x1e4>)
    85b0:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    85b2:	4b0c      	ldr	r3, [pc, #48]	; (85e4 <prvAddNewTaskToReadyList+0x19c>)
    85b4:	681b      	ldr	r3, [r3, #0]
    85b6:	2b00      	cmp	r3, #0
    85b8:	d008      	beq.n	85cc <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    85ba:	4b08      	ldr	r3, [pc, #32]	; (85dc <prvAddNewTaskToReadyList+0x194>)
    85bc:	681b      	ldr	r3, [r3, #0]
    85be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    85c0:	687b      	ldr	r3, [r7, #4]
    85c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    85c4:	429a      	cmp	r2, r3
    85c6:	d201      	bcs.n	85cc <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
    85c8:	4b19      	ldr	r3, [pc, #100]	; (8630 <prvAddNewTaskToReadyList+0x1e8>)
    85ca:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    85cc:	46c0      	nop			; (mov r8, r8)
    85ce:	46bd      	mov	sp, r7
    85d0:	b002      	add	sp, #8
    85d2:	bd80      	pop	{r7, pc}
    85d4:	00006639 	.word	0x00006639
    85d8:	2000402c 	.word	0x2000402c
    85dc:	20003f54 	.word	0x20003f54
    85e0:	00009169 	.word	0x00009169
    85e4:	20004038 	.word	0x20004038
    85e8:	20004048 	.word	0x20004048
    85ec:	00005bb1 	.word	0x00005bb1
    85f0:	00004655 	.word	0x00004655
    85f4:	200000fe 	.word	0x200000fe
    85f8:	00004691 	.word	0x00004691
    85fc:	00004611 	.word	0x00004611
    8600:	00005de1 	.word	0x00005de1
    8604:	00005545 	.word	0x00005545
    8608:	000048cd 	.word	0x000048cd
    860c:	00004631 	.word	0x00004631
    8610:	200000fc 	.word	0x200000fc
    8614:	00005029 	.word	0x00005029
    8618:	00004791 	.word	0x00004791
    861c:	00004de1 	.word	0x00004de1
    8620:	20004034 	.word	0x20004034
    8624:	20003f58 	.word	0x20003f58
    8628:	000063fb 	.word	0x000063fb
    862c:	0000665d 	.word	0x0000665d
    8630:	00006621 	.word	0x00006621

00008634 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    8634:	b580      	push	{r7, lr}
    8636:	b084      	sub	sp, #16
    8638:	af00      	add	r7, sp, #0
    863a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    863c:	2300      	movs	r3, #0
    863e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    8640:	687b      	ldr	r3, [r7, #4]
    8642:	2b00      	cmp	r3, #0
    8644:	d045      	beq.n	86d2 <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    8646:	4b27      	ldr	r3, [pc, #156]	; (86e4 <vTaskDelay+0xb0>)
    8648:	681b      	ldr	r3, [r3, #0]
    864a:	2b00      	cmp	r3, #0
    864c:	d001      	beq.n	8652 <vTaskDelay+0x1e>
    864e:	b672      	cpsid	i
    8650:	e7fe      	b.n	8650 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    8652:	4b25      	ldr	r3, [pc, #148]	; (86e8 <vTaskDelay+0xb4>)
    8654:	4798      	blx	r3
			{
				traceTASK_DELAY();
    8656:	4b25      	ldr	r3, [pc, #148]	; (86ec <vTaskDelay+0xb8>)
    8658:	681b      	ldr	r3, [r3, #0]
    865a:	0018      	movs	r0, r3
    865c:	4b24      	ldr	r3, [pc, #144]	; (86f0 <vTaskDelay+0xbc>)
    865e:	4798      	blx	r3
    8660:	0003      	movs	r3, r0
    8662:	001a      	movs	r2, r3
    8664:	4b23      	ldr	r3, [pc, #140]	; (86f4 <vTaskDelay+0xc0>)
    8666:	881b      	ldrh	r3, [r3, #0]
    8668:	4013      	ands	r3, r2
    866a:	b29b      	uxth	r3, r3
    866c:	2b00      	cmp	r3, #0
    866e:	d00e      	beq.n	868e <vTaskDelay+0x5a>
    8670:	687b      	ldr	r3, [r7, #4]
    8672:	0019      	movs	r1, r3
    8674:	2089      	movs	r0, #137	; 0x89
    8676:	4b20      	ldr	r3, [pc, #128]	; (86f8 <vTaskDelay+0xc4>)
    8678:	4798      	blx	r3
    867a:	4b1c      	ldr	r3, [pc, #112]	; (86ec <vTaskDelay+0xb8>)
    867c:	681b      	ldr	r3, [r3, #0]
    867e:	0018      	movs	r0, r3
    8680:	4b1e      	ldr	r3, [pc, #120]	; (86fc <vTaskDelay+0xc8>)
    8682:	4798      	blx	r3
    8684:	0003      	movs	r3, r0
    8686:	b2db      	uxtb	r3, r3
    8688:	0018      	movs	r0, r3
    868a:	4b1d      	ldr	r3, [pc, #116]	; (8700 <vTaskDelay+0xcc>)
    868c:	4798      	blx	r3
    868e:	4b1d      	ldr	r3, [pc, #116]	; (8704 <vTaskDelay+0xd0>)
    8690:	4798      	blx	r3
    8692:	0003      	movs	r3, r0
    8694:	0018      	movs	r0, r3
    8696:	4b16      	ldr	r3, [pc, #88]	; (86f0 <vTaskDelay+0xbc>)
    8698:	4798      	blx	r3
    869a:	0003      	movs	r3, r0
    869c:	001a      	movs	r2, r3
    869e:	4b15      	ldr	r3, [pc, #84]	; (86f4 <vTaskDelay+0xc0>)
    86a0:	881b      	ldrh	r3, [r3, #0]
    86a2:	4013      	ands	r3, r2
    86a4:	b29b      	uxth	r3, r3
    86a6:	2b00      	cmp	r3, #0
    86a8:	d00a      	beq.n	86c0 <vTaskDelay+0x8c>
    86aa:	4b16      	ldr	r3, [pc, #88]	; (8704 <vTaskDelay+0xd0>)
    86ac:	4798      	blx	r3
    86ae:	0003      	movs	r3, r0
    86b0:	0018      	movs	r0, r3
    86b2:	4b12      	ldr	r3, [pc, #72]	; (86fc <vTaskDelay+0xc8>)
    86b4:	4798      	blx	r3
    86b6:	0003      	movs	r3, r0
    86b8:	b2db      	uxtb	r3, r3
    86ba:	0018      	movs	r0, r3
    86bc:	4b10      	ldr	r3, [pc, #64]	; (8700 <vTaskDelay+0xcc>)
    86be:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    86c0:	687b      	ldr	r3, [r7, #4]
    86c2:	2100      	movs	r1, #0
    86c4:	0018      	movs	r0, r3
    86c6:	4b10      	ldr	r3, [pc, #64]	; (8708 <vTaskDelay+0xd4>)
    86c8:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    86ca:	4b10      	ldr	r3, [pc, #64]	; (870c <vTaskDelay+0xd8>)
    86cc:	4798      	blx	r3
    86ce:	0003      	movs	r3, r0
    86d0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    86d2:	68fb      	ldr	r3, [r7, #12]
    86d4:	2b00      	cmp	r3, #0
    86d6:	d101      	bne.n	86dc <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
    86d8:	4b0d      	ldr	r3, [pc, #52]	; (8710 <vTaskDelay+0xdc>)
    86da:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    86dc:	46c0      	nop			; (mov r8, r8)
    86de:	46bd      	mov	sp, r7
    86e0:	b004      	add	sp, #16
    86e2:	bd80      	pop	{r7, pc}
    86e4:	20004054 	.word	0x20004054
    86e8:	000088f5 	.word	0x000088f5
    86ec:	20003f54 	.word	0x20003f54
    86f0:	00004631 	.word	0x00004631
    86f4:	200000fc 	.word	0x200000fc
    86f8:	00005331 	.word	0x00005331
    86fc:	00004611 	.word	0x00004611
    8700:	000057c1 	.word	0x000057c1
    8704:	000048cd 	.word	0x000048cd
    8708:	0000984d 	.word	0x0000984d
    870c:	0000890d 	.word	0x0000890d
    8710:	00006621 	.word	0x00006621

00008714 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    8714:	b580      	push	{r7, lr}
    8716:	b084      	sub	sp, #16
    8718:	af00      	add	r7, sp, #0
    871a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    871c:	4b42      	ldr	r3, [pc, #264]	; (8828 <vTaskSuspend+0x114>)
    871e:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    8720:	687b      	ldr	r3, [r7, #4]
    8722:	2b00      	cmp	r3, #0
    8724:	d102      	bne.n	872c <vTaskSuspend+0x18>
    8726:	4b41      	ldr	r3, [pc, #260]	; (882c <vTaskSuspend+0x118>)
    8728:	681b      	ldr	r3, [r3, #0]
    872a:	e000      	b.n	872e <vTaskSuspend+0x1a>
    872c:	687b      	ldr	r3, [r7, #4]
    872e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
    8730:	4b3f      	ldr	r3, [pc, #252]	; (8830 <vTaskSuspend+0x11c>)
    8732:	4798      	blx	r3
    8734:	0003      	movs	r3, r0
    8736:	0018      	movs	r0, r3
    8738:	4b3e      	ldr	r3, [pc, #248]	; (8834 <vTaskSuspend+0x120>)
    873a:	4798      	blx	r3
    873c:	0003      	movs	r3, r0
    873e:	001a      	movs	r2, r3
    8740:	4b3d      	ldr	r3, [pc, #244]	; (8838 <vTaskSuspend+0x124>)
    8742:	881b      	ldrh	r3, [r3, #0]
    8744:	4013      	ands	r3, r2
    8746:	b29b      	uxth	r3, r3
    8748:	2b00      	cmp	r3, #0
    874a:	d016      	beq.n	877a <vTaskSuspend+0x66>
    874c:	68fb      	ldr	r3, [r7, #12]
    874e:	0018      	movs	r0, r3
    8750:	4b38      	ldr	r3, [pc, #224]	; (8834 <vTaskSuspend+0x120>)
    8752:	4798      	blx	r3
    8754:	0003      	movs	r3, r0
    8756:	001a      	movs	r2, r3
    8758:	4b37      	ldr	r3, [pc, #220]	; (8838 <vTaskSuspend+0x124>)
    875a:	881b      	ldrh	r3, [r3, #0]
    875c:	4013      	ands	r3, r2
    875e:	b29b      	uxth	r3, r3
    8760:	2b00      	cmp	r3, #0
    8762:	d00a      	beq.n	877a <vTaskSuspend+0x66>
    8764:	68fb      	ldr	r3, [r7, #12]
    8766:	0018      	movs	r0, r3
    8768:	4b34      	ldr	r3, [pc, #208]	; (883c <vTaskSuspend+0x128>)
    876a:	4798      	blx	r3
    876c:	0003      	movs	r3, r0
    876e:	b2db      	uxtb	r3, r3
    8770:	001a      	movs	r2, r3
    8772:	2103      	movs	r1, #3
    8774:	208a      	movs	r0, #138	; 0x8a
    8776:	4b32      	ldr	r3, [pc, #200]	; (8840 <vTaskSuspend+0x12c>)
    8778:	4798      	blx	r3
    877a:	68fb      	ldr	r3, [r7, #12]
    877c:	0018      	movs	r0, r3
    877e:	4b2f      	ldr	r3, [pc, #188]	; (883c <vTaskSuspend+0x128>)
    8780:	4798      	blx	r3
    8782:	0003      	movs	r3, r0
    8784:	b2db      	uxtb	r3, r3
    8786:	0018      	movs	r0, r3
    8788:	4b2e      	ldr	r3, [pc, #184]	; (8844 <vTaskSuspend+0x130>)
    878a:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    878c:	68fb      	ldr	r3, [r7, #12]
    878e:	3304      	adds	r3, #4
    8790:	0018      	movs	r0, r3
    8792:	4b2d      	ldr	r3, [pc, #180]	; (8848 <vTaskSuspend+0x134>)
    8794:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    8796:	68fb      	ldr	r3, [r7, #12]
    8798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    879a:	2b00      	cmp	r3, #0
    879c:	d004      	beq.n	87a8 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    879e:	68fb      	ldr	r3, [r7, #12]
    87a0:	3318      	adds	r3, #24
    87a2:	0018      	movs	r0, r3
    87a4:	4b28      	ldr	r3, [pc, #160]	; (8848 <vTaskSuspend+0x134>)
    87a6:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    87a8:	68fb      	ldr	r3, [r7, #12]
    87aa:	1d1a      	adds	r2, r3, #4
    87ac:	4b27      	ldr	r3, [pc, #156]	; (884c <vTaskSuspend+0x138>)
    87ae:	0011      	movs	r1, r2
    87b0:	0018      	movs	r0, r3
    87b2:	4b27      	ldr	r3, [pc, #156]	; (8850 <vTaskSuspend+0x13c>)
    87b4:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    87b6:	68fb      	ldr	r3, [r7, #12]
    87b8:	2250      	movs	r2, #80	; 0x50
    87ba:	5c9b      	ldrb	r3, [r3, r2]
    87bc:	b2db      	uxtb	r3, r3
    87be:	2b01      	cmp	r3, #1
    87c0:	d103      	bne.n	87ca <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    87c2:	68fb      	ldr	r3, [r7, #12]
    87c4:	2250      	movs	r2, #80	; 0x50
    87c6:	2100      	movs	r1, #0
    87c8:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    87ca:	4b22      	ldr	r3, [pc, #136]	; (8854 <vTaskSuspend+0x140>)
    87cc:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
    87ce:	4b22      	ldr	r3, [pc, #136]	; (8858 <vTaskSuspend+0x144>)
    87d0:	681b      	ldr	r3, [r3, #0]
    87d2:	2b00      	cmp	r3, #0
    87d4:	d005      	beq.n	87e2 <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    87d6:	4b14      	ldr	r3, [pc, #80]	; (8828 <vTaskSuspend+0x114>)
    87d8:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
    87da:	4b20      	ldr	r3, [pc, #128]	; (885c <vTaskSuspend+0x148>)
    87dc:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
    87de:	4b1d      	ldr	r3, [pc, #116]	; (8854 <vTaskSuspend+0x140>)
    87e0:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    87e2:	4b12      	ldr	r3, [pc, #72]	; (882c <vTaskSuspend+0x118>)
    87e4:	681b      	ldr	r3, [r3, #0]
    87e6:	68fa      	ldr	r2, [r7, #12]
    87e8:	429a      	cmp	r2, r3
    87ea:	d118      	bne.n	881e <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
    87ec:	4b1a      	ldr	r3, [pc, #104]	; (8858 <vTaskSuspend+0x144>)
    87ee:	681b      	ldr	r3, [r3, #0]
    87f0:	2b00      	cmp	r3, #0
    87f2:	d008      	beq.n	8806 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    87f4:	4b1a      	ldr	r3, [pc, #104]	; (8860 <vTaskSuspend+0x14c>)
    87f6:	681b      	ldr	r3, [r3, #0]
    87f8:	2b00      	cmp	r3, #0
    87fa:	d001      	beq.n	8800 <vTaskSuspend+0xec>
    87fc:	b672      	cpsid	i
    87fe:	e7fe      	b.n	87fe <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
    8800:	4b18      	ldr	r3, [pc, #96]	; (8864 <vTaskSuspend+0x150>)
    8802:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    8804:	e00b      	b.n	881e <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    8806:	4b11      	ldr	r3, [pc, #68]	; (884c <vTaskSuspend+0x138>)
    8808:	681a      	ldr	r2, [r3, #0]
    880a:	4b17      	ldr	r3, [pc, #92]	; (8868 <vTaskSuspend+0x154>)
    880c:	681b      	ldr	r3, [r3, #0]
    880e:	429a      	cmp	r2, r3
    8810:	d103      	bne.n	881a <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
    8812:	4b06      	ldr	r3, [pc, #24]	; (882c <vTaskSuspend+0x118>)
    8814:	2200      	movs	r2, #0
    8816:	601a      	str	r2, [r3, #0]
	}
    8818:	e001      	b.n	881e <vTaskSuspend+0x10a>
					vTaskSwitchContext();
    881a:	4b14      	ldr	r3, [pc, #80]	; (886c <vTaskSuspend+0x158>)
    881c:	4798      	blx	r3
	}
    881e:	46c0      	nop			; (mov r8, r8)
    8820:	46bd      	mov	sp, r7
    8822:	b004      	add	sp, #16
    8824:	bd80      	pop	{r7, pc}
    8826:	46c0      	nop			; (mov r8, r8)
    8828:	00006639 	.word	0x00006639
    882c:	20003f54 	.word	0x20003f54
    8830:	000048cd 	.word	0x000048cd
    8834:	00004631 	.word	0x00004631
    8838:	200000fc 	.word	0x200000fc
    883c:	00004611 	.word	0x00004611
    8840:	00005029 	.word	0x00005029
    8844:	000057c1 	.word	0x000057c1
    8848:	000064ab 	.word	0x000064ab
    884c:	20004018 	.word	0x20004018
    8850:	000063fb 	.word	0x000063fb
    8854:	0000665d 	.word	0x0000665d
    8858:	20004038 	.word	0x20004038
    885c:	000092f9 	.word	0x000092f9
    8860:	20004054 	.word	0x20004054
    8864:	00006621 	.word	0x00006621
    8868:	2000402c 	.word	0x2000402c
    886c:	00008c89 	.word	0x00008c89

00008870 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    8870:	b590      	push	{r4, r7, lr}
    8872:	b085      	sub	sp, #20
    8874:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    8876:	4916      	ldr	r1, [pc, #88]	; (88d0 <vTaskStartScheduler+0x60>)
    8878:	4816      	ldr	r0, [pc, #88]	; (88d4 <vTaskStartScheduler+0x64>)
    887a:	4b17      	ldr	r3, [pc, #92]	; (88d8 <vTaskStartScheduler+0x68>)
    887c:	9301      	str	r3, [sp, #4]
    887e:	2300      	movs	r3, #0
    8880:	9300      	str	r3, [sp, #0]
    8882:	2300      	movs	r3, #0
    8884:	2264      	movs	r2, #100	; 0x64
    8886:	4c15      	ldr	r4, [pc, #84]	; (88dc <vTaskStartScheduler+0x6c>)
    8888:	47a0      	blx	r4
    888a:	0003      	movs	r3, r0
    888c:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    888e:	687b      	ldr	r3, [r7, #4]
    8890:	2b01      	cmp	r3, #1
    8892:	d103      	bne.n	889c <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    8894:	4b12      	ldr	r3, [pc, #72]	; (88e0 <vTaskStartScheduler+0x70>)
    8896:	4798      	blx	r3
    8898:	0003      	movs	r3, r0
    889a:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    889c:	687b      	ldr	r3, [r7, #4]
    889e:	2b01      	cmp	r3, #1
    88a0:	d10d      	bne.n	88be <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    88a2:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    88a4:	4b0f      	ldr	r3, [pc, #60]	; (88e4 <vTaskStartScheduler+0x74>)
    88a6:	2201      	movs	r2, #1
    88a8:	4252      	negs	r2, r2
    88aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    88ac:	4b0e      	ldr	r3, [pc, #56]	; (88e8 <vTaskStartScheduler+0x78>)
    88ae:	2201      	movs	r2, #1
    88b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    88b2:	4b0e      	ldr	r3, [pc, #56]	; (88ec <vTaskStartScheduler+0x7c>)
    88b4:	2200      	movs	r2, #0
    88b6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    88b8:	4b0d      	ldr	r3, [pc, #52]	; (88f0 <vTaskStartScheduler+0x80>)
    88ba:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    88bc:	e004      	b.n	88c8 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    88be:	687b      	ldr	r3, [r7, #4]
    88c0:	3301      	adds	r3, #1
    88c2:	d101      	bne.n	88c8 <vTaskStartScheduler+0x58>
    88c4:	b672      	cpsid	i
    88c6:	e7fe      	b.n	88c6 <vTaskStartScheduler+0x56>
}
    88c8:	46c0      	nop			; (mov r8, r8)
    88ca:	46bd      	mov	sp, r7
    88cc:	b003      	add	sp, #12
    88ce:	bd90      	pop	{r4, r7, pc}
    88d0:	00025208 	.word	0x00025208
    88d4:	00009141 	.word	0x00009141
    88d8:	20004050 	.word	0x20004050
    88dc:	00008299 	.word	0x00008299
    88e0:	00009901 	.word	0x00009901
    88e4:	2000404c 	.word	0x2000404c
    88e8:	20004038 	.word	0x20004038
    88ec:	20004030 	.word	0x20004030
    88f0:	000065c9 	.word	0x000065c9

000088f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    88f4:	b580      	push	{r7, lr}
    88f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    88f8:	4b03      	ldr	r3, [pc, #12]	; (8908 <vTaskSuspendAll+0x14>)
    88fa:	681b      	ldr	r3, [r3, #0]
    88fc:	1c5a      	adds	r2, r3, #1
    88fe:	4b02      	ldr	r3, [pc, #8]	; (8908 <vTaskSuspendAll+0x14>)
    8900:	601a      	str	r2, [r3, #0]
}
    8902:	46c0      	nop			; (mov r8, r8)
    8904:	46bd      	mov	sp, r7
    8906:	bd80      	pop	{r7, pc}
    8908:	20004054 	.word	0x20004054

0000890c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    890c:	b580      	push	{r7, lr}
    890e:	b084      	sub	sp, #16
    8910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    8912:	2300      	movs	r3, #0
    8914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    8916:	2300      	movs	r3, #0
    8918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    891a:	4b45      	ldr	r3, [pc, #276]	; (8a30 <xTaskResumeAll+0x124>)
    891c:	681b      	ldr	r3, [r3, #0]
    891e:	2b00      	cmp	r3, #0
    8920:	d101      	bne.n	8926 <xTaskResumeAll+0x1a>
    8922:	b672      	cpsid	i
    8924:	e7fe      	b.n	8924 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    8926:	4b43      	ldr	r3, [pc, #268]	; (8a34 <xTaskResumeAll+0x128>)
    8928:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    892a:	4b41      	ldr	r3, [pc, #260]	; (8a30 <xTaskResumeAll+0x124>)
    892c:	681b      	ldr	r3, [r3, #0]
    892e:	1e5a      	subs	r2, r3, #1
    8930:	4b3f      	ldr	r3, [pc, #252]	; (8a30 <xTaskResumeAll+0x124>)
    8932:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8934:	4b3e      	ldr	r3, [pc, #248]	; (8a30 <xTaskResumeAll+0x124>)
    8936:	681b      	ldr	r3, [r3, #0]
    8938:	2b00      	cmp	r3, #0
    893a:	d000      	beq.n	893e <xTaskResumeAll+0x32>
    893c:	e071      	b.n	8a22 <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    893e:	4b3e      	ldr	r3, [pc, #248]	; (8a38 <xTaskResumeAll+0x12c>)
    8940:	681b      	ldr	r3, [r3, #0]
    8942:	2b00      	cmp	r3, #0
    8944:	d100      	bne.n	8948 <xTaskResumeAll+0x3c>
    8946:	e06c      	b.n	8a22 <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    8948:	e044      	b.n	89d4 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    894a:	4b3c      	ldr	r3, [pc, #240]	; (8a3c <xTaskResumeAll+0x130>)
    894c:	68db      	ldr	r3, [r3, #12]
    894e:	68db      	ldr	r3, [r3, #12]
    8950:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    8952:	68fb      	ldr	r3, [r7, #12]
    8954:	3318      	adds	r3, #24
    8956:	0018      	movs	r0, r3
    8958:	4b39      	ldr	r3, [pc, #228]	; (8a40 <xTaskResumeAll+0x134>)
    895a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    895c:	68fb      	ldr	r3, [r7, #12]
    895e:	3304      	adds	r3, #4
    8960:	0018      	movs	r0, r3
    8962:	4b37      	ldr	r3, [pc, #220]	; (8a40 <xTaskResumeAll+0x134>)
    8964:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    8966:	68fb      	ldr	r3, [r7, #12]
    8968:	0018      	movs	r0, r3
    896a:	4b36      	ldr	r3, [pc, #216]	; (8a44 <xTaskResumeAll+0x138>)
    896c:	4798      	blx	r3
    896e:	0003      	movs	r3, r0
    8970:	001a      	movs	r2, r3
    8972:	4b35      	ldr	r3, [pc, #212]	; (8a48 <xTaskResumeAll+0x13c>)
    8974:	881b      	ldrh	r3, [r3, #0]
    8976:	4013      	ands	r3, r2
    8978:	b29b      	uxth	r3, r3
    897a:	2b00      	cmp	r3, #0
    897c:	d008      	beq.n	8990 <xTaskResumeAll+0x84>
    897e:	68fb      	ldr	r3, [r7, #12]
    8980:	0018      	movs	r0, r3
    8982:	4b32      	ldr	r3, [pc, #200]	; (8a4c <xTaskResumeAll+0x140>)
    8984:	4798      	blx	r3
    8986:	0003      	movs	r3, r0
    8988:	b2db      	uxtb	r3, r3
    898a:	0018      	movs	r0, r3
    898c:	4b30      	ldr	r3, [pc, #192]	; (8a50 <xTaskResumeAll+0x144>)
    898e:	4798      	blx	r3
    8990:	68fb      	ldr	r3, [r7, #12]
    8992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8994:	4b2f      	ldr	r3, [pc, #188]	; (8a54 <xTaskResumeAll+0x148>)
    8996:	681b      	ldr	r3, [r3, #0]
    8998:	429a      	cmp	r2, r3
    899a:	d903      	bls.n	89a4 <xTaskResumeAll+0x98>
    899c:	68fb      	ldr	r3, [r7, #12]
    899e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    89a0:	4b2c      	ldr	r3, [pc, #176]	; (8a54 <xTaskResumeAll+0x148>)
    89a2:	601a      	str	r2, [r3, #0]
    89a4:	68fb      	ldr	r3, [r7, #12]
    89a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    89a8:	0013      	movs	r3, r2
    89aa:	009b      	lsls	r3, r3, #2
    89ac:	189b      	adds	r3, r3, r2
    89ae:	009b      	lsls	r3, r3, #2
    89b0:	4a29      	ldr	r2, [pc, #164]	; (8a58 <xTaskResumeAll+0x14c>)
    89b2:	189a      	adds	r2, r3, r2
    89b4:	68fb      	ldr	r3, [r7, #12]
    89b6:	3304      	adds	r3, #4
    89b8:	0019      	movs	r1, r3
    89ba:	0010      	movs	r0, r2
    89bc:	4b27      	ldr	r3, [pc, #156]	; (8a5c <xTaskResumeAll+0x150>)
    89be:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    89c0:	68fb      	ldr	r3, [r7, #12]
    89c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    89c4:	4b26      	ldr	r3, [pc, #152]	; (8a60 <xTaskResumeAll+0x154>)
    89c6:	681b      	ldr	r3, [r3, #0]
    89c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    89ca:	429a      	cmp	r2, r3
    89cc:	d302      	bcc.n	89d4 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
    89ce:	4b25      	ldr	r3, [pc, #148]	; (8a64 <xTaskResumeAll+0x158>)
    89d0:	2201      	movs	r2, #1
    89d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    89d4:	4b19      	ldr	r3, [pc, #100]	; (8a3c <xTaskResumeAll+0x130>)
    89d6:	681b      	ldr	r3, [r3, #0]
    89d8:	2b00      	cmp	r3, #0
    89da:	d1b6      	bne.n	894a <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    89dc:	68fb      	ldr	r3, [r7, #12]
    89de:	2b00      	cmp	r3, #0
    89e0:	d001      	beq.n	89e6 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    89e2:	4b21      	ldr	r3, [pc, #132]	; (8a68 <xTaskResumeAll+0x15c>)
    89e4:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    89e6:	4b21      	ldr	r3, [pc, #132]	; (8a6c <xTaskResumeAll+0x160>)
    89e8:	681b      	ldr	r3, [r3, #0]
    89ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    89ec:	687b      	ldr	r3, [r7, #4]
    89ee:	2b00      	cmp	r3, #0
    89f0:	d00f      	beq.n	8a12 <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    89f2:	4b1f      	ldr	r3, [pc, #124]	; (8a70 <xTaskResumeAll+0x164>)
    89f4:	4798      	blx	r3
    89f6:	1e03      	subs	r3, r0, #0
    89f8:	d002      	beq.n	8a00 <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
    89fa:	4b1a      	ldr	r3, [pc, #104]	; (8a64 <xTaskResumeAll+0x158>)
    89fc:	2201      	movs	r2, #1
    89fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    8a00:	687b      	ldr	r3, [r7, #4]
    8a02:	3b01      	subs	r3, #1
    8a04:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    8a06:	687b      	ldr	r3, [r7, #4]
    8a08:	2b00      	cmp	r3, #0
    8a0a:	d1f2      	bne.n	89f2 <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
    8a0c:	4b17      	ldr	r3, [pc, #92]	; (8a6c <xTaskResumeAll+0x160>)
    8a0e:	2200      	movs	r2, #0
    8a10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    8a12:	4b14      	ldr	r3, [pc, #80]	; (8a64 <xTaskResumeAll+0x158>)
    8a14:	681b      	ldr	r3, [r3, #0]
    8a16:	2b00      	cmp	r3, #0
    8a18:	d003      	beq.n	8a22 <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    8a1a:	2301      	movs	r3, #1
    8a1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    8a1e:	4b15      	ldr	r3, [pc, #84]	; (8a74 <xTaskResumeAll+0x168>)
    8a20:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    8a22:	4b15      	ldr	r3, [pc, #84]	; (8a78 <xTaskResumeAll+0x16c>)
    8a24:	4798      	blx	r3

	return xAlreadyYielded;
    8a26:	68bb      	ldr	r3, [r7, #8]
}
    8a28:	0018      	movs	r0, r3
    8a2a:	46bd      	mov	sp, r7
    8a2c:	b004      	add	sp, #16
    8a2e:	bd80      	pop	{r7, pc}
    8a30:	20004054 	.word	0x20004054
    8a34:	00006639 	.word	0x00006639
    8a38:	2000402c 	.word	0x2000402c
    8a3c:	20003fec 	.word	0x20003fec
    8a40:	000064ab 	.word	0x000064ab
    8a44:	00004631 	.word	0x00004631
    8a48:	200000fc 	.word	0x200000fc
    8a4c:	00004611 	.word	0x00004611
    8a50:	00004de1 	.word	0x00004de1
    8a54:	20004034 	.word	0x20004034
    8a58:	20003f58 	.word	0x20003f58
    8a5c:	000063fb 	.word	0x000063fb
    8a60:	20003f54 	.word	0x20003f54
    8a64:	20004040 	.word	0x20004040
    8a68:	000092f9 	.word	0x000092f9
    8a6c:	2000403c 	.word	0x2000403c
    8a70:	00008a99 	.word	0x00008a99
    8a74:	00006621 	.word	0x00006621
    8a78:	0000665d 	.word	0x0000665d

00008a7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    8a7c:	b580      	push	{r7, lr}
    8a7e:	b082      	sub	sp, #8
    8a80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    8a82:	4b04      	ldr	r3, [pc, #16]	; (8a94 <xTaskGetTickCount+0x18>)
    8a84:	681b      	ldr	r3, [r3, #0]
    8a86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    8a88:	687b      	ldr	r3, [r7, #4]
}
    8a8a:	0018      	movs	r0, r3
    8a8c:	46bd      	mov	sp, r7
    8a8e:	b002      	add	sp, #8
    8a90:	bd80      	pop	{r7, pc}
    8a92:	46c0      	nop			; (mov r8, r8)
    8a94:	20004030 	.word	0x20004030

00008a98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    8a98:	b580      	push	{r7, lr}
    8a9a:	b086      	sub	sp, #24
    8a9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    8a9e:	2300      	movs	r3, #0
    8aa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
    8aa2:	4b64      	ldr	r3, [pc, #400]	; (8c34 <xTaskIncrementTick+0x19c>)
    8aa4:	681b      	ldr	r3, [r3, #0]
    8aa6:	2b01      	cmp	r3, #1
    8aa8:	d003      	beq.n	8ab2 <xTaskIncrementTick+0x1a>
    8aaa:	4b63      	ldr	r3, [pc, #396]	; (8c38 <xTaskIncrementTick+0x1a0>)
    8aac:	681b      	ldr	r3, [r3, #0]
    8aae:	2b00      	cmp	r3, #0
    8ab0:	d107      	bne.n	8ac2 <xTaskIncrementTick+0x2a>
    8ab2:	4b62      	ldr	r3, [pc, #392]	; (8c3c <xTaskIncrementTick+0x1a4>)
    8ab4:	681b      	ldr	r3, [r3, #0]
    8ab6:	1c5a      	adds	r2, r3, #1
    8ab8:	4b60      	ldr	r3, [pc, #384]	; (8c3c <xTaskIncrementTick+0x1a4>)
    8aba:	601a      	str	r2, [r3, #0]
    8abc:	2000      	movs	r0, #0
    8abe:	4b60      	ldr	r3, [pc, #384]	; (8c40 <xTaskIncrementTick+0x1a8>)
    8ac0:	4798      	blx	r3
    8ac2:	4b5c      	ldr	r3, [pc, #368]	; (8c34 <xTaskIncrementTick+0x19c>)
    8ac4:	681b      	ldr	r3, [r3, #0]
    8ac6:	2b00      	cmp	r3, #0
    8ac8:	d106      	bne.n	8ad8 <xTaskIncrementTick+0x40>
    8aca:	4b5e      	ldr	r3, [pc, #376]	; (8c44 <xTaskIncrementTick+0x1ac>)
    8acc:	681b      	ldr	r3, [r3, #0]
    8ace:	3301      	adds	r3, #1
    8ad0:	0019      	movs	r1, r3
    8ad2:	2003      	movs	r0, #3
    8ad4:	4b5c      	ldr	r3, [pc, #368]	; (8c48 <xTaskIncrementTick+0x1b0>)
    8ad6:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8ad8:	4b56      	ldr	r3, [pc, #344]	; (8c34 <xTaskIncrementTick+0x19c>)
    8ada:	681b      	ldr	r3, [r3, #0]
    8adc:	2b00      	cmp	r3, #0
    8ade:	d000      	beq.n	8ae2 <xTaskIncrementTick+0x4a>
    8ae0:	e098      	b.n	8c14 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    8ae2:	4b58      	ldr	r3, [pc, #352]	; (8c44 <xTaskIncrementTick+0x1ac>)
    8ae4:	681b      	ldr	r3, [r3, #0]
    8ae6:	3301      	adds	r3, #1
    8ae8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    8aea:	4b56      	ldr	r3, [pc, #344]	; (8c44 <xTaskIncrementTick+0x1ac>)
    8aec:	693a      	ldr	r2, [r7, #16]
    8aee:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    8af0:	693b      	ldr	r3, [r7, #16]
    8af2:	2b00      	cmp	r3, #0
    8af4:	d117      	bne.n	8b26 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
    8af6:	4b55      	ldr	r3, [pc, #340]	; (8c4c <xTaskIncrementTick+0x1b4>)
    8af8:	681b      	ldr	r3, [r3, #0]
    8afa:	681b      	ldr	r3, [r3, #0]
    8afc:	2b00      	cmp	r3, #0
    8afe:	d001      	beq.n	8b04 <xTaskIncrementTick+0x6c>
    8b00:	b672      	cpsid	i
    8b02:	e7fe      	b.n	8b02 <xTaskIncrementTick+0x6a>
    8b04:	4b51      	ldr	r3, [pc, #324]	; (8c4c <xTaskIncrementTick+0x1b4>)
    8b06:	681b      	ldr	r3, [r3, #0]
    8b08:	60fb      	str	r3, [r7, #12]
    8b0a:	4b51      	ldr	r3, [pc, #324]	; (8c50 <xTaskIncrementTick+0x1b8>)
    8b0c:	681a      	ldr	r2, [r3, #0]
    8b0e:	4b4f      	ldr	r3, [pc, #316]	; (8c4c <xTaskIncrementTick+0x1b4>)
    8b10:	601a      	str	r2, [r3, #0]
    8b12:	4b4f      	ldr	r3, [pc, #316]	; (8c50 <xTaskIncrementTick+0x1b8>)
    8b14:	68fa      	ldr	r2, [r7, #12]
    8b16:	601a      	str	r2, [r3, #0]
    8b18:	4b4e      	ldr	r3, [pc, #312]	; (8c54 <xTaskIncrementTick+0x1bc>)
    8b1a:	681b      	ldr	r3, [r3, #0]
    8b1c:	1c5a      	adds	r2, r3, #1
    8b1e:	4b4d      	ldr	r3, [pc, #308]	; (8c54 <xTaskIncrementTick+0x1bc>)
    8b20:	601a      	str	r2, [r3, #0]
    8b22:	4b4d      	ldr	r3, [pc, #308]	; (8c58 <xTaskIncrementTick+0x1c0>)
    8b24:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    8b26:	4b4d      	ldr	r3, [pc, #308]	; (8c5c <xTaskIncrementTick+0x1c4>)
    8b28:	681b      	ldr	r3, [r3, #0]
    8b2a:	693a      	ldr	r2, [r7, #16]
    8b2c:	429a      	cmp	r2, r3
    8b2e:	d363      	bcc.n	8bf8 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    8b30:	4b46      	ldr	r3, [pc, #280]	; (8c4c <xTaskIncrementTick+0x1b4>)
    8b32:	681b      	ldr	r3, [r3, #0]
    8b34:	681b      	ldr	r3, [r3, #0]
    8b36:	2b00      	cmp	r3, #0
    8b38:	d101      	bne.n	8b3e <xTaskIncrementTick+0xa6>
    8b3a:	2301      	movs	r3, #1
    8b3c:	e000      	b.n	8b40 <xTaskIncrementTick+0xa8>
    8b3e:	2300      	movs	r3, #0
    8b40:	2b00      	cmp	r3, #0
    8b42:	d004      	beq.n	8b4e <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8b44:	4b45      	ldr	r3, [pc, #276]	; (8c5c <xTaskIncrementTick+0x1c4>)
    8b46:	2201      	movs	r2, #1
    8b48:	4252      	negs	r2, r2
    8b4a:	601a      	str	r2, [r3, #0]
					break;
    8b4c:	e054      	b.n	8bf8 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    8b4e:	4b3f      	ldr	r3, [pc, #252]	; (8c4c <xTaskIncrementTick+0x1b4>)
    8b50:	681b      	ldr	r3, [r3, #0]
    8b52:	68db      	ldr	r3, [r3, #12]
    8b54:	68db      	ldr	r3, [r3, #12]
    8b56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    8b58:	68bb      	ldr	r3, [r7, #8]
    8b5a:	685b      	ldr	r3, [r3, #4]
    8b5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    8b5e:	693a      	ldr	r2, [r7, #16]
    8b60:	687b      	ldr	r3, [r7, #4]
    8b62:	429a      	cmp	r2, r3
    8b64:	d203      	bcs.n	8b6e <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    8b66:	4b3d      	ldr	r3, [pc, #244]	; (8c5c <xTaskIncrementTick+0x1c4>)
    8b68:	687a      	ldr	r2, [r7, #4]
    8b6a:	601a      	str	r2, [r3, #0]
						break;
    8b6c:	e044      	b.n	8bf8 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    8b6e:	68bb      	ldr	r3, [r7, #8]
    8b70:	3304      	adds	r3, #4
    8b72:	0018      	movs	r0, r3
    8b74:	4b3a      	ldr	r3, [pc, #232]	; (8c60 <xTaskIncrementTick+0x1c8>)
    8b76:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    8b78:	68bb      	ldr	r3, [r7, #8]
    8b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b7c:	2b00      	cmp	r3, #0
    8b7e:	d004      	beq.n	8b8a <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    8b80:	68bb      	ldr	r3, [r7, #8]
    8b82:	3318      	adds	r3, #24
    8b84:	0018      	movs	r0, r3
    8b86:	4b36      	ldr	r3, [pc, #216]	; (8c60 <xTaskIncrementTick+0x1c8>)
    8b88:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    8b8a:	68bb      	ldr	r3, [r7, #8]
    8b8c:	0018      	movs	r0, r3
    8b8e:	4b35      	ldr	r3, [pc, #212]	; (8c64 <xTaskIncrementTick+0x1cc>)
    8b90:	4798      	blx	r3
    8b92:	0003      	movs	r3, r0
    8b94:	001a      	movs	r2, r3
    8b96:	4b34      	ldr	r3, [pc, #208]	; (8c68 <xTaskIncrementTick+0x1d0>)
    8b98:	881b      	ldrh	r3, [r3, #0]
    8b9a:	4013      	ands	r3, r2
    8b9c:	b29b      	uxth	r3, r3
    8b9e:	2b00      	cmp	r3, #0
    8ba0:	d008      	beq.n	8bb4 <xTaskIncrementTick+0x11c>
    8ba2:	68bb      	ldr	r3, [r7, #8]
    8ba4:	0018      	movs	r0, r3
    8ba6:	4b31      	ldr	r3, [pc, #196]	; (8c6c <xTaskIncrementTick+0x1d4>)
    8ba8:	4798      	blx	r3
    8baa:	0003      	movs	r3, r0
    8bac:	b2db      	uxtb	r3, r3
    8bae:	0018      	movs	r0, r3
    8bb0:	4b2f      	ldr	r3, [pc, #188]	; (8c70 <xTaskIncrementTick+0x1d8>)
    8bb2:	4798      	blx	r3
    8bb4:	68bb      	ldr	r3, [r7, #8]
    8bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8bb8:	4b2e      	ldr	r3, [pc, #184]	; (8c74 <xTaskIncrementTick+0x1dc>)
    8bba:	681b      	ldr	r3, [r3, #0]
    8bbc:	429a      	cmp	r2, r3
    8bbe:	d903      	bls.n	8bc8 <xTaskIncrementTick+0x130>
    8bc0:	68bb      	ldr	r3, [r7, #8]
    8bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8bc4:	4b2b      	ldr	r3, [pc, #172]	; (8c74 <xTaskIncrementTick+0x1dc>)
    8bc6:	601a      	str	r2, [r3, #0]
    8bc8:	68bb      	ldr	r3, [r7, #8]
    8bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8bcc:	0013      	movs	r3, r2
    8bce:	009b      	lsls	r3, r3, #2
    8bd0:	189b      	adds	r3, r3, r2
    8bd2:	009b      	lsls	r3, r3, #2
    8bd4:	4a28      	ldr	r2, [pc, #160]	; (8c78 <xTaskIncrementTick+0x1e0>)
    8bd6:	189a      	adds	r2, r3, r2
    8bd8:	68bb      	ldr	r3, [r7, #8]
    8bda:	3304      	adds	r3, #4
    8bdc:	0019      	movs	r1, r3
    8bde:	0010      	movs	r0, r2
    8be0:	4b26      	ldr	r3, [pc, #152]	; (8c7c <xTaskIncrementTick+0x1e4>)
    8be2:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    8be4:	68bb      	ldr	r3, [r7, #8]
    8be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8be8:	4b25      	ldr	r3, [pc, #148]	; (8c80 <xTaskIncrementTick+0x1e8>)
    8bea:	681b      	ldr	r3, [r3, #0]
    8bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8bee:	429a      	cmp	r2, r3
    8bf0:	d39e      	bcc.n	8b30 <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
    8bf2:	2301      	movs	r3, #1
    8bf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    8bf6:	e79b      	b.n	8b30 <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    8bf8:	4b21      	ldr	r3, [pc, #132]	; (8c80 <xTaskIncrementTick+0x1e8>)
    8bfa:	681b      	ldr	r3, [r3, #0]
    8bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8bfe:	491e      	ldr	r1, [pc, #120]	; (8c78 <xTaskIncrementTick+0x1e0>)
    8c00:	0013      	movs	r3, r2
    8c02:	009b      	lsls	r3, r3, #2
    8c04:	189b      	adds	r3, r3, r2
    8c06:	009b      	lsls	r3, r3, #2
    8c08:	585b      	ldr	r3, [r3, r1]
    8c0a:	2b01      	cmp	r3, #1
    8c0c:	d907      	bls.n	8c1e <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
    8c0e:	2301      	movs	r3, #1
    8c10:	617b      	str	r3, [r7, #20]
    8c12:	e004      	b.n	8c1e <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    8c14:	4b08      	ldr	r3, [pc, #32]	; (8c38 <xTaskIncrementTick+0x1a0>)
    8c16:	681b      	ldr	r3, [r3, #0]
    8c18:	1c5a      	adds	r2, r3, #1
    8c1a:	4b07      	ldr	r3, [pc, #28]	; (8c38 <xTaskIncrementTick+0x1a0>)
    8c1c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    8c1e:	4b19      	ldr	r3, [pc, #100]	; (8c84 <xTaskIncrementTick+0x1ec>)
    8c20:	681b      	ldr	r3, [r3, #0]
    8c22:	2b00      	cmp	r3, #0
    8c24:	d001      	beq.n	8c2a <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
    8c26:	2301      	movs	r3, #1
    8c28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    8c2a:	697b      	ldr	r3, [r7, #20]
}
    8c2c:	0018      	movs	r0, r3
    8c2e:	46bd      	mov	sp, r7
    8c30:	b006      	add	sp, #24
    8c32:	bd80      	pop	{r7, pc}
    8c34:	20004054 	.word	0x20004054
    8c38:	2000403c 	.word	0x2000403c
    8c3c:	20000f9c 	.word	0x20000f9c
    8c40:	000062c5 	.word	0x000062c5
    8c44:	20004030 	.word	0x20004030
    8c48:	00005331 	.word	0x00005331
    8c4c:	20003fe4 	.word	0x20003fe4
    8c50:	20003fe8 	.word	0x20003fe8
    8c54:	20004044 	.word	0x20004044
    8c58:	000092f9 	.word	0x000092f9
    8c5c:	2000404c 	.word	0x2000404c
    8c60:	000064ab 	.word	0x000064ab
    8c64:	00004631 	.word	0x00004631
    8c68:	200000fc 	.word	0x200000fc
    8c6c:	00004611 	.word	0x00004611
    8c70:	00004de1 	.word	0x00004de1
    8c74:	20004034 	.word	0x20004034
    8c78:	20003f58 	.word	0x20003f58
    8c7c:	000063fb 	.word	0x000063fb
    8c80:	20003f54 	.word	0x20003f54
    8c84:	20004040 	.word	0x20004040

00008c88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    8c88:	b580      	push	{r7, lr}
    8c8a:	b082      	sub	sp, #8
    8c8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    8c8e:	4b3a      	ldr	r3, [pc, #232]	; (8d78 <vTaskSwitchContext+0xf0>)
    8c90:	681b      	ldr	r3, [r3, #0]
    8c92:	2b00      	cmp	r3, #0
    8c94:	d003      	beq.n	8c9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    8c96:	4b39      	ldr	r3, [pc, #228]	; (8d7c <vTaskSwitchContext+0xf4>)
    8c98:	2201      	movs	r2, #1
    8c9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    8c9c:	e067      	b.n	8d6e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
    8c9e:	4b37      	ldr	r3, [pc, #220]	; (8d7c <vTaskSwitchContext+0xf4>)
    8ca0:	2200      	movs	r2, #0
    8ca2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    8ca4:	4b36      	ldr	r3, [pc, #216]	; (8d80 <vTaskSwitchContext+0xf8>)
    8ca6:	681b      	ldr	r3, [r3, #0]
    8ca8:	681a      	ldr	r2, [r3, #0]
    8caa:	4b35      	ldr	r3, [pc, #212]	; (8d80 <vTaskSwitchContext+0xf8>)
    8cac:	681b      	ldr	r3, [r3, #0]
    8cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8cb0:	429a      	cmp	r2, r3
    8cb2:	d808      	bhi.n	8cc6 <vTaskSwitchContext+0x3e>
    8cb4:	4b32      	ldr	r3, [pc, #200]	; (8d80 <vTaskSwitchContext+0xf8>)
    8cb6:	681a      	ldr	r2, [r3, #0]
    8cb8:	4b31      	ldr	r3, [pc, #196]	; (8d80 <vTaskSwitchContext+0xf8>)
    8cba:	681b      	ldr	r3, [r3, #0]
    8cbc:	3334      	adds	r3, #52	; 0x34
    8cbe:	0019      	movs	r1, r3
    8cc0:	0010      	movs	r0, r2
    8cc2:	4b30      	ldr	r3, [pc, #192]	; (8d84 <vTaskSwitchContext+0xfc>)
    8cc4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    8cc6:	4b30      	ldr	r3, [pc, #192]	; (8d88 <vTaskSwitchContext+0x100>)
    8cc8:	681b      	ldr	r3, [r3, #0]
    8cca:	607b      	str	r3, [r7, #4]
    8ccc:	e007      	b.n	8cde <vTaskSwitchContext+0x56>
    8cce:	687b      	ldr	r3, [r7, #4]
    8cd0:	2b00      	cmp	r3, #0
    8cd2:	d101      	bne.n	8cd8 <vTaskSwitchContext+0x50>
    8cd4:	b672      	cpsid	i
    8cd6:	e7fe      	b.n	8cd6 <vTaskSwitchContext+0x4e>
    8cd8:	687b      	ldr	r3, [r7, #4]
    8cda:	3b01      	subs	r3, #1
    8cdc:	607b      	str	r3, [r7, #4]
    8cde:	492b      	ldr	r1, [pc, #172]	; (8d8c <vTaskSwitchContext+0x104>)
    8ce0:	687a      	ldr	r2, [r7, #4]
    8ce2:	0013      	movs	r3, r2
    8ce4:	009b      	lsls	r3, r3, #2
    8ce6:	189b      	adds	r3, r3, r2
    8ce8:	009b      	lsls	r3, r3, #2
    8cea:	585b      	ldr	r3, [r3, r1]
    8cec:	2b00      	cmp	r3, #0
    8cee:	d0ee      	beq.n	8cce <vTaskSwitchContext+0x46>
    8cf0:	687a      	ldr	r2, [r7, #4]
    8cf2:	0013      	movs	r3, r2
    8cf4:	009b      	lsls	r3, r3, #2
    8cf6:	189b      	adds	r3, r3, r2
    8cf8:	009b      	lsls	r3, r3, #2
    8cfa:	4a24      	ldr	r2, [pc, #144]	; (8d8c <vTaskSwitchContext+0x104>)
    8cfc:	189b      	adds	r3, r3, r2
    8cfe:	603b      	str	r3, [r7, #0]
    8d00:	683b      	ldr	r3, [r7, #0]
    8d02:	685b      	ldr	r3, [r3, #4]
    8d04:	685a      	ldr	r2, [r3, #4]
    8d06:	683b      	ldr	r3, [r7, #0]
    8d08:	605a      	str	r2, [r3, #4]
    8d0a:	683b      	ldr	r3, [r7, #0]
    8d0c:	685a      	ldr	r2, [r3, #4]
    8d0e:	683b      	ldr	r3, [r7, #0]
    8d10:	3308      	adds	r3, #8
    8d12:	429a      	cmp	r2, r3
    8d14:	d104      	bne.n	8d20 <vTaskSwitchContext+0x98>
    8d16:	683b      	ldr	r3, [r7, #0]
    8d18:	685b      	ldr	r3, [r3, #4]
    8d1a:	685a      	ldr	r2, [r3, #4]
    8d1c:	683b      	ldr	r3, [r7, #0]
    8d1e:	605a      	str	r2, [r3, #4]
    8d20:	683b      	ldr	r3, [r7, #0]
    8d22:	685b      	ldr	r3, [r3, #4]
    8d24:	68da      	ldr	r2, [r3, #12]
    8d26:	4b16      	ldr	r3, [pc, #88]	; (8d80 <vTaskSwitchContext+0xf8>)
    8d28:	601a      	str	r2, [r3, #0]
    8d2a:	4b17      	ldr	r3, [pc, #92]	; (8d88 <vTaskSwitchContext+0x100>)
    8d2c:	687a      	ldr	r2, [r7, #4]
    8d2e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
    8d30:	4b17      	ldr	r3, [pc, #92]	; (8d90 <vTaskSwitchContext+0x108>)
    8d32:	2201      	movs	r2, #1
    8d34:	601a      	str	r2, [r3, #0]
    8d36:	4b17      	ldr	r3, [pc, #92]	; (8d94 <vTaskSwitchContext+0x10c>)
    8d38:	4798      	blx	r3
    8d3a:	0003      	movs	r3, r0
    8d3c:	0018      	movs	r0, r3
    8d3e:	4b16      	ldr	r3, [pc, #88]	; (8d98 <vTaskSwitchContext+0x110>)
    8d40:	4798      	blx	r3
    8d42:	0003      	movs	r3, r0
    8d44:	001a      	movs	r2, r3
    8d46:	4b15      	ldr	r3, [pc, #84]	; (8d9c <vTaskSwitchContext+0x114>)
    8d48:	881b      	ldrh	r3, [r3, #0]
    8d4a:	4013      	ands	r3, r2
    8d4c:	b29b      	uxth	r3, r3
    8d4e:	2b00      	cmp	r3, #0
    8d50:	d00a      	beq.n	8d68 <vTaskSwitchContext+0xe0>
    8d52:	4b10      	ldr	r3, [pc, #64]	; (8d94 <vTaskSwitchContext+0x10c>)
    8d54:	4798      	blx	r3
    8d56:	0003      	movs	r3, r0
    8d58:	0018      	movs	r0, r3
    8d5a:	4b11      	ldr	r3, [pc, #68]	; (8da0 <vTaskSwitchContext+0x118>)
    8d5c:	4798      	blx	r3
    8d5e:	0003      	movs	r3, r0
    8d60:	b2db      	uxtb	r3, r3
    8d62:	0018      	movs	r0, r3
    8d64:	4b0f      	ldr	r3, [pc, #60]	; (8da4 <vTaskSwitchContext+0x11c>)
    8d66:	4798      	blx	r3
    8d68:	4b09      	ldr	r3, [pc, #36]	; (8d90 <vTaskSwitchContext+0x108>)
    8d6a:	2202      	movs	r2, #2
    8d6c:	601a      	str	r2, [r3, #0]
}
    8d6e:	46c0      	nop			; (mov r8, r8)
    8d70:	46bd      	mov	sp, r7
    8d72:	b002      	add	sp, #8
    8d74:	bd80      	pop	{r7, pc}
    8d76:	46c0      	nop			; (mov r8, r8)
    8d78:	20004054 	.word	0x20004054
    8d7c:	20004040 	.word	0x20004040
    8d80:	20003f54 	.word	0x20003f54
    8d84:	0001f0b9 	.word	0x0001f0b9
    8d88:	20004034 	.word	0x20004034
    8d8c:	20003f58 	.word	0x20003f58
    8d90:	20000fa8 	.word	0x20000fa8
    8d94:	000048cd 	.word	0x000048cd
    8d98:	00004631 	.word	0x00004631
    8d9c:	200000fc 	.word	0x200000fc
    8da0:	00004611 	.word	0x00004611
    8da4:	0000542d 	.word	0x0000542d

00008da8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    8da8:	b580      	push	{r7, lr}
    8daa:	b082      	sub	sp, #8
    8dac:	af00      	add	r7, sp, #0
    8dae:	6078      	str	r0, [r7, #4]
    8db0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    8db2:	687b      	ldr	r3, [r7, #4]
    8db4:	2b00      	cmp	r3, #0
    8db6:	d101      	bne.n	8dbc <vTaskPlaceOnEventList+0x14>
    8db8:	b672      	cpsid	i
    8dba:	e7fe      	b.n	8dba <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    8dbc:	4b08      	ldr	r3, [pc, #32]	; (8de0 <vTaskPlaceOnEventList+0x38>)
    8dbe:	681b      	ldr	r3, [r3, #0]
    8dc0:	3318      	adds	r3, #24
    8dc2:	001a      	movs	r2, r3
    8dc4:	687b      	ldr	r3, [r7, #4]
    8dc6:	0011      	movs	r1, r2
    8dc8:	0018      	movs	r0, r3
    8dca:	4b06      	ldr	r3, [pc, #24]	; (8de4 <vTaskPlaceOnEventList+0x3c>)
    8dcc:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    8dce:	683b      	ldr	r3, [r7, #0]
    8dd0:	2101      	movs	r1, #1
    8dd2:	0018      	movs	r0, r3
    8dd4:	4b04      	ldr	r3, [pc, #16]	; (8de8 <vTaskPlaceOnEventList+0x40>)
    8dd6:	4798      	blx	r3
}
    8dd8:	46c0      	nop			; (mov r8, r8)
    8dda:	46bd      	mov	sp, r7
    8ddc:	b002      	add	sp, #8
    8dde:	bd80      	pop	{r7, pc}
    8de0:	20003f54 	.word	0x20003f54
    8de4:	0000643f 	.word	0x0000643f
    8de8:	0000984d 	.word	0x0000984d

00008dec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    8dec:	b580      	push	{r7, lr}
    8dee:	b084      	sub	sp, #16
    8df0:	af00      	add	r7, sp, #0
    8df2:	60f8      	str	r0, [r7, #12]
    8df4:	60b9      	str	r1, [r7, #8]
    8df6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    8df8:	68fb      	ldr	r3, [r7, #12]
    8dfa:	2b00      	cmp	r3, #0
    8dfc:	d101      	bne.n	8e02 <vTaskPlaceOnEventListRestricted+0x16>
    8dfe:	b672      	cpsid	i
    8e00:	e7fe      	b.n	8e00 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    8e02:	4b28      	ldr	r3, [pc, #160]	; (8ea4 <vTaskPlaceOnEventListRestricted+0xb8>)
    8e04:	681b      	ldr	r3, [r3, #0]
    8e06:	3318      	adds	r3, #24
    8e08:	001a      	movs	r2, r3
    8e0a:	68fb      	ldr	r3, [r7, #12]
    8e0c:	0011      	movs	r1, r2
    8e0e:	0018      	movs	r0, r3
    8e10:	4b25      	ldr	r3, [pc, #148]	; (8ea8 <vTaskPlaceOnEventListRestricted+0xbc>)
    8e12:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    8e14:	687b      	ldr	r3, [r7, #4]
    8e16:	2b00      	cmp	r3, #0
    8e18:	d002      	beq.n	8e20 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    8e1a:	2301      	movs	r3, #1
    8e1c:	425b      	negs	r3, r3
    8e1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
    8e20:	4b20      	ldr	r3, [pc, #128]	; (8ea4 <vTaskPlaceOnEventListRestricted+0xb8>)
    8e22:	681b      	ldr	r3, [r3, #0]
    8e24:	0018      	movs	r0, r3
    8e26:	4b21      	ldr	r3, [pc, #132]	; (8eac <vTaskPlaceOnEventListRestricted+0xc0>)
    8e28:	4798      	blx	r3
    8e2a:	0003      	movs	r3, r0
    8e2c:	001a      	movs	r2, r3
    8e2e:	4b20      	ldr	r3, [pc, #128]	; (8eb0 <vTaskPlaceOnEventListRestricted+0xc4>)
    8e30:	881b      	ldrh	r3, [r3, #0]
    8e32:	4013      	ands	r3, r2
    8e34:	b29b      	uxth	r3, r3
    8e36:	2b00      	cmp	r3, #0
    8e38:	d011      	beq.n	8e5e <vTaskPlaceOnEventListRestricted+0x72>
    8e3a:	4b1e      	ldr	r3, [pc, #120]	; (8eb4 <vTaskPlaceOnEventListRestricted+0xc8>)
    8e3c:	681a      	ldr	r2, [r3, #0]
    8e3e:	68bb      	ldr	r3, [r7, #8]
    8e40:	18d3      	adds	r3, r2, r3
    8e42:	0019      	movs	r1, r3
    8e44:	2088      	movs	r0, #136	; 0x88
    8e46:	4b1c      	ldr	r3, [pc, #112]	; (8eb8 <vTaskPlaceOnEventListRestricted+0xcc>)
    8e48:	4798      	blx	r3
    8e4a:	4b16      	ldr	r3, [pc, #88]	; (8ea4 <vTaskPlaceOnEventListRestricted+0xb8>)
    8e4c:	681b      	ldr	r3, [r3, #0]
    8e4e:	0018      	movs	r0, r3
    8e50:	4b1a      	ldr	r3, [pc, #104]	; (8ebc <vTaskPlaceOnEventListRestricted+0xd0>)
    8e52:	4798      	blx	r3
    8e54:	0003      	movs	r3, r0
    8e56:	b2db      	uxtb	r3, r3
    8e58:	0018      	movs	r0, r3
    8e5a:	4b19      	ldr	r3, [pc, #100]	; (8ec0 <vTaskPlaceOnEventListRestricted+0xd4>)
    8e5c:	4798      	blx	r3
    8e5e:	4b19      	ldr	r3, [pc, #100]	; (8ec4 <vTaskPlaceOnEventListRestricted+0xd8>)
    8e60:	4798      	blx	r3
    8e62:	0003      	movs	r3, r0
    8e64:	0018      	movs	r0, r3
    8e66:	4b11      	ldr	r3, [pc, #68]	; (8eac <vTaskPlaceOnEventListRestricted+0xc0>)
    8e68:	4798      	blx	r3
    8e6a:	0003      	movs	r3, r0
    8e6c:	001a      	movs	r2, r3
    8e6e:	4b10      	ldr	r3, [pc, #64]	; (8eb0 <vTaskPlaceOnEventListRestricted+0xc4>)
    8e70:	881b      	ldrh	r3, [r3, #0]
    8e72:	4013      	ands	r3, r2
    8e74:	b29b      	uxth	r3, r3
    8e76:	2b00      	cmp	r3, #0
    8e78:	d00a      	beq.n	8e90 <vTaskPlaceOnEventListRestricted+0xa4>
    8e7a:	4b12      	ldr	r3, [pc, #72]	; (8ec4 <vTaskPlaceOnEventListRestricted+0xd8>)
    8e7c:	4798      	blx	r3
    8e7e:	0003      	movs	r3, r0
    8e80:	0018      	movs	r0, r3
    8e82:	4b0e      	ldr	r3, [pc, #56]	; (8ebc <vTaskPlaceOnEventListRestricted+0xd0>)
    8e84:	4798      	blx	r3
    8e86:	0003      	movs	r3, r0
    8e88:	b2db      	uxtb	r3, r3
    8e8a:	0018      	movs	r0, r3
    8e8c:	4b0c      	ldr	r3, [pc, #48]	; (8ec0 <vTaskPlaceOnEventListRestricted+0xd4>)
    8e8e:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    8e90:	687a      	ldr	r2, [r7, #4]
    8e92:	68bb      	ldr	r3, [r7, #8]
    8e94:	0011      	movs	r1, r2
    8e96:	0018      	movs	r0, r3
    8e98:	4b0b      	ldr	r3, [pc, #44]	; (8ec8 <vTaskPlaceOnEventListRestricted+0xdc>)
    8e9a:	4798      	blx	r3
	}
    8e9c:	46c0      	nop			; (mov r8, r8)
    8e9e:	46bd      	mov	sp, r7
    8ea0:	b004      	add	sp, #16
    8ea2:	bd80      	pop	{r7, pc}
    8ea4:	20003f54 	.word	0x20003f54
    8ea8:	000063fb 	.word	0x000063fb
    8eac:	00004631 	.word	0x00004631
    8eb0:	200000fc 	.word	0x200000fc
    8eb4:	20004030 	.word	0x20004030
    8eb8:	00005331 	.word	0x00005331
    8ebc:	00004611 	.word	0x00004611
    8ec0:	000057c1 	.word	0x000057c1
    8ec4:	000048cd 	.word	0x000048cd
    8ec8:	0000984d 	.word	0x0000984d

00008ecc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    8ecc:	b580      	push	{r7, lr}
    8ece:	b084      	sub	sp, #16
    8ed0:	af00      	add	r7, sp, #0
    8ed2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    8ed4:	687b      	ldr	r3, [r7, #4]
    8ed6:	68db      	ldr	r3, [r3, #12]
    8ed8:	68db      	ldr	r3, [r3, #12]
    8eda:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    8edc:	68bb      	ldr	r3, [r7, #8]
    8ede:	2b00      	cmp	r3, #0
    8ee0:	d101      	bne.n	8ee6 <xTaskRemoveFromEventList+0x1a>
    8ee2:	b672      	cpsid	i
    8ee4:	e7fe      	b.n	8ee4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    8ee6:	68bb      	ldr	r3, [r7, #8]
    8ee8:	3318      	adds	r3, #24
    8eea:	0018      	movs	r0, r3
    8eec:	4b2a      	ldr	r3, [pc, #168]	; (8f98 <xTaskRemoveFromEventList+0xcc>)
    8eee:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8ef0:	4b2a      	ldr	r3, [pc, #168]	; (8f9c <xTaskRemoveFromEventList+0xd0>)
    8ef2:	681b      	ldr	r3, [r3, #0]
    8ef4:	2b00      	cmp	r3, #0
    8ef6:	d132      	bne.n	8f5e <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    8ef8:	68bb      	ldr	r3, [r7, #8]
    8efa:	3304      	adds	r3, #4
    8efc:	0018      	movs	r0, r3
    8efe:	4b26      	ldr	r3, [pc, #152]	; (8f98 <xTaskRemoveFromEventList+0xcc>)
    8f00:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    8f02:	68bb      	ldr	r3, [r7, #8]
    8f04:	0018      	movs	r0, r3
    8f06:	4b26      	ldr	r3, [pc, #152]	; (8fa0 <xTaskRemoveFromEventList+0xd4>)
    8f08:	4798      	blx	r3
    8f0a:	0003      	movs	r3, r0
    8f0c:	001a      	movs	r2, r3
    8f0e:	4b25      	ldr	r3, [pc, #148]	; (8fa4 <xTaskRemoveFromEventList+0xd8>)
    8f10:	881b      	ldrh	r3, [r3, #0]
    8f12:	4013      	ands	r3, r2
    8f14:	b29b      	uxth	r3, r3
    8f16:	2b00      	cmp	r3, #0
    8f18:	d008      	beq.n	8f2c <xTaskRemoveFromEventList+0x60>
    8f1a:	68bb      	ldr	r3, [r7, #8]
    8f1c:	0018      	movs	r0, r3
    8f1e:	4b22      	ldr	r3, [pc, #136]	; (8fa8 <xTaskRemoveFromEventList+0xdc>)
    8f20:	4798      	blx	r3
    8f22:	0003      	movs	r3, r0
    8f24:	b2db      	uxtb	r3, r3
    8f26:	0018      	movs	r0, r3
    8f28:	4b20      	ldr	r3, [pc, #128]	; (8fac <xTaskRemoveFromEventList+0xe0>)
    8f2a:	4798      	blx	r3
    8f2c:	68bb      	ldr	r3, [r7, #8]
    8f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8f30:	4b1f      	ldr	r3, [pc, #124]	; (8fb0 <xTaskRemoveFromEventList+0xe4>)
    8f32:	681b      	ldr	r3, [r3, #0]
    8f34:	429a      	cmp	r2, r3
    8f36:	d903      	bls.n	8f40 <xTaskRemoveFromEventList+0x74>
    8f38:	68bb      	ldr	r3, [r7, #8]
    8f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8f3c:	4b1c      	ldr	r3, [pc, #112]	; (8fb0 <xTaskRemoveFromEventList+0xe4>)
    8f3e:	601a      	str	r2, [r3, #0]
    8f40:	68bb      	ldr	r3, [r7, #8]
    8f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8f44:	0013      	movs	r3, r2
    8f46:	009b      	lsls	r3, r3, #2
    8f48:	189b      	adds	r3, r3, r2
    8f4a:	009b      	lsls	r3, r3, #2
    8f4c:	4a19      	ldr	r2, [pc, #100]	; (8fb4 <xTaskRemoveFromEventList+0xe8>)
    8f4e:	189a      	adds	r2, r3, r2
    8f50:	68bb      	ldr	r3, [r7, #8]
    8f52:	3304      	adds	r3, #4
    8f54:	0019      	movs	r1, r3
    8f56:	0010      	movs	r0, r2
    8f58:	4b17      	ldr	r3, [pc, #92]	; (8fb8 <xTaskRemoveFromEventList+0xec>)
    8f5a:	4798      	blx	r3
    8f5c:	e007      	b.n	8f6e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    8f5e:	68bb      	ldr	r3, [r7, #8]
    8f60:	3318      	adds	r3, #24
    8f62:	001a      	movs	r2, r3
    8f64:	4b15      	ldr	r3, [pc, #84]	; (8fbc <xTaskRemoveFromEventList+0xf0>)
    8f66:	0011      	movs	r1, r2
    8f68:	0018      	movs	r0, r3
    8f6a:	4b13      	ldr	r3, [pc, #76]	; (8fb8 <xTaskRemoveFromEventList+0xec>)
    8f6c:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    8f6e:	68bb      	ldr	r3, [r7, #8]
    8f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8f72:	4b13      	ldr	r3, [pc, #76]	; (8fc0 <xTaskRemoveFromEventList+0xf4>)
    8f74:	681b      	ldr	r3, [r3, #0]
    8f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8f78:	429a      	cmp	r2, r3
    8f7a:	d905      	bls.n	8f88 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    8f7c:	2301      	movs	r3, #1
    8f7e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    8f80:	4b10      	ldr	r3, [pc, #64]	; (8fc4 <xTaskRemoveFromEventList+0xf8>)
    8f82:	2201      	movs	r2, #1
    8f84:	601a      	str	r2, [r3, #0]
    8f86:	e001      	b.n	8f8c <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
    8f88:	2300      	movs	r3, #0
    8f8a:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    8f8c:	68fb      	ldr	r3, [r7, #12]
}
    8f8e:	0018      	movs	r0, r3
    8f90:	46bd      	mov	sp, r7
    8f92:	b004      	add	sp, #16
    8f94:	bd80      	pop	{r7, pc}
    8f96:	46c0      	nop			; (mov r8, r8)
    8f98:	000064ab 	.word	0x000064ab
    8f9c:	20004054 	.word	0x20004054
    8fa0:	00004631 	.word	0x00004631
    8fa4:	200000fc 	.word	0x200000fc
    8fa8:	00004611 	.word	0x00004611
    8fac:	00004de1 	.word	0x00004de1
    8fb0:	20004034 	.word	0x20004034
    8fb4:	20003f58 	.word	0x20003f58
    8fb8:	000063fb 	.word	0x000063fb
    8fbc:	20003fec 	.word	0x20003fec
    8fc0:	20003f54 	.word	0x20003f54
    8fc4:	20004040 	.word	0x20004040

00008fc8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    8fc8:	b580      	push	{r7, lr}
    8fca:	b082      	sub	sp, #8
    8fcc:	af00      	add	r7, sp, #0
    8fce:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    8fd0:	687b      	ldr	r3, [r7, #4]
    8fd2:	2b00      	cmp	r3, #0
    8fd4:	d101      	bne.n	8fda <vTaskSetTimeOutState+0x12>
    8fd6:	b672      	cpsid	i
    8fd8:	e7fe      	b.n	8fd8 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
    8fda:	4b08      	ldr	r3, [pc, #32]	; (8ffc <vTaskSetTimeOutState+0x34>)
    8fdc:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    8fde:	4b08      	ldr	r3, [pc, #32]	; (9000 <vTaskSetTimeOutState+0x38>)
    8fe0:	681a      	ldr	r2, [r3, #0]
    8fe2:	687b      	ldr	r3, [r7, #4]
    8fe4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
    8fe6:	4b07      	ldr	r3, [pc, #28]	; (9004 <vTaskSetTimeOutState+0x3c>)
    8fe8:	681a      	ldr	r2, [r3, #0]
    8fea:	687b      	ldr	r3, [r7, #4]
    8fec:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
    8fee:	4b06      	ldr	r3, [pc, #24]	; (9008 <vTaskSetTimeOutState+0x40>)
    8ff0:	4798      	blx	r3
}
    8ff2:	46c0      	nop			; (mov r8, r8)
    8ff4:	46bd      	mov	sp, r7
    8ff6:	b002      	add	sp, #8
    8ff8:	bd80      	pop	{r7, pc}
    8ffa:	46c0      	nop			; (mov r8, r8)
    8ffc:	00006639 	.word	0x00006639
    9000:	20004044 	.word	0x20004044
    9004:	20004030 	.word	0x20004030
    9008:	0000665d 	.word	0x0000665d

0000900c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    900c:	b580      	push	{r7, lr}
    900e:	b082      	sub	sp, #8
    9010:	af00      	add	r7, sp, #0
    9012:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    9014:	4b05      	ldr	r3, [pc, #20]	; (902c <vTaskInternalSetTimeOutState+0x20>)
    9016:	681a      	ldr	r2, [r3, #0]
    9018:	687b      	ldr	r3, [r7, #4]
    901a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    901c:	4b04      	ldr	r3, [pc, #16]	; (9030 <vTaskInternalSetTimeOutState+0x24>)
    901e:	681a      	ldr	r2, [r3, #0]
    9020:	687b      	ldr	r3, [r7, #4]
    9022:	605a      	str	r2, [r3, #4]
}
    9024:	46c0      	nop			; (mov r8, r8)
    9026:	46bd      	mov	sp, r7
    9028:	b002      	add	sp, #8
    902a:	bd80      	pop	{r7, pc}
    902c:	20004044 	.word	0x20004044
    9030:	20004030 	.word	0x20004030

00009034 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    9034:	b580      	push	{r7, lr}
    9036:	b086      	sub	sp, #24
    9038:	af00      	add	r7, sp, #0
    903a:	6078      	str	r0, [r7, #4]
    903c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    903e:	687b      	ldr	r3, [r7, #4]
    9040:	2b00      	cmp	r3, #0
    9042:	d101      	bne.n	9048 <xTaskCheckForTimeOut+0x14>
    9044:	b672      	cpsid	i
    9046:	e7fe      	b.n	9046 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    9048:	683b      	ldr	r3, [r7, #0]
    904a:	2b00      	cmp	r3, #0
    904c:	d101      	bne.n	9052 <xTaskCheckForTimeOut+0x1e>
    904e:	b672      	cpsid	i
    9050:	e7fe      	b.n	9050 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    9052:	4b1e      	ldr	r3, [pc, #120]	; (90cc <xTaskCheckForTimeOut+0x98>)
    9054:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    9056:	4b1e      	ldr	r3, [pc, #120]	; (90d0 <xTaskCheckForTimeOut+0x9c>)
    9058:	681b      	ldr	r3, [r3, #0]
    905a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    905c:	687b      	ldr	r3, [r7, #4]
    905e:	685b      	ldr	r3, [r3, #4]
    9060:	693a      	ldr	r2, [r7, #16]
    9062:	1ad3      	subs	r3, r2, r3
    9064:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    9066:	683b      	ldr	r3, [r7, #0]
    9068:	681b      	ldr	r3, [r3, #0]
    906a:	3301      	adds	r3, #1
    906c:	d102      	bne.n	9074 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    906e:	2300      	movs	r3, #0
    9070:	617b      	str	r3, [r7, #20]
    9072:	e024      	b.n	90be <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    9074:	687b      	ldr	r3, [r7, #4]
    9076:	681a      	ldr	r2, [r3, #0]
    9078:	4b16      	ldr	r3, [pc, #88]	; (90d4 <xTaskCheckForTimeOut+0xa0>)
    907a:	681b      	ldr	r3, [r3, #0]
    907c:	429a      	cmp	r2, r3
    907e:	d007      	beq.n	9090 <xTaskCheckForTimeOut+0x5c>
    9080:	687b      	ldr	r3, [r7, #4]
    9082:	685a      	ldr	r2, [r3, #4]
    9084:	693b      	ldr	r3, [r7, #16]
    9086:	429a      	cmp	r2, r3
    9088:	d802      	bhi.n	9090 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    908a:	2301      	movs	r3, #1
    908c:	617b      	str	r3, [r7, #20]
    908e:	e016      	b.n	90be <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    9090:	683b      	ldr	r3, [r7, #0]
    9092:	681a      	ldr	r2, [r3, #0]
    9094:	68fb      	ldr	r3, [r7, #12]
    9096:	429a      	cmp	r2, r3
    9098:	d90c      	bls.n	90b4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    909a:	683b      	ldr	r3, [r7, #0]
    909c:	681a      	ldr	r2, [r3, #0]
    909e:	68fb      	ldr	r3, [r7, #12]
    90a0:	1ad2      	subs	r2, r2, r3
    90a2:	683b      	ldr	r3, [r7, #0]
    90a4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    90a6:	687b      	ldr	r3, [r7, #4]
    90a8:	0018      	movs	r0, r3
    90aa:	4b0b      	ldr	r3, [pc, #44]	; (90d8 <xTaskCheckForTimeOut+0xa4>)
    90ac:	4798      	blx	r3
			xReturn = pdFALSE;
    90ae:	2300      	movs	r3, #0
    90b0:	617b      	str	r3, [r7, #20]
    90b2:	e004      	b.n	90be <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    90b4:	683b      	ldr	r3, [r7, #0]
    90b6:	2200      	movs	r2, #0
    90b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    90ba:	2301      	movs	r3, #1
    90bc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    90be:	4b07      	ldr	r3, [pc, #28]	; (90dc <xTaskCheckForTimeOut+0xa8>)
    90c0:	4798      	blx	r3

	return xReturn;
    90c2:	697b      	ldr	r3, [r7, #20]
}
    90c4:	0018      	movs	r0, r3
    90c6:	46bd      	mov	sp, r7
    90c8:	b006      	add	sp, #24
    90ca:	bd80      	pop	{r7, pc}
    90cc:	00006639 	.word	0x00006639
    90d0:	20004030 	.word	0x20004030
    90d4:	20004044 	.word	0x20004044
    90d8:	0000900d 	.word	0x0000900d
    90dc:	0000665d 	.word	0x0000665d

000090e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    90e0:	b580      	push	{r7, lr}
    90e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    90e4:	4b02      	ldr	r3, [pc, #8]	; (90f0 <vTaskMissedYield+0x10>)
    90e6:	2201      	movs	r2, #1
    90e8:	601a      	str	r2, [r3, #0]
}
    90ea:	46c0      	nop			; (mov r8, r8)
    90ec:	46bd      	mov	sp, r7
    90ee:	bd80      	pop	{r7, pc}
    90f0:	20004040 	.word	0x20004040

000090f4 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
    90f4:	b580      	push	{r7, lr}
    90f6:	b084      	sub	sp, #16
    90f8:	af00      	add	r7, sp, #0
    90fa:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
    90fc:	687b      	ldr	r3, [r7, #4]
    90fe:	2b00      	cmp	r3, #0
    9100:	d005      	beq.n	910e <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    9102:	687b      	ldr	r3, [r7, #4]
    9104:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
    9106:	68bb      	ldr	r3, [r7, #8]
    9108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    910a:	60fb      	str	r3, [r7, #12]
    910c:	e001      	b.n	9112 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
    910e:	2300      	movs	r3, #0
    9110:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
    9112:	68fb      	ldr	r3, [r7, #12]
	}
    9114:	0018      	movs	r0, r3
    9116:	46bd      	mov	sp, r7
    9118:	b004      	add	sp, #16
    911a:	bd80      	pop	{r7, pc}

0000911c <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
    911c:	b580      	push	{r7, lr}
    911e:	b084      	sub	sp, #16
    9120:	af00      	add	r7, sp, #0
    9122:	6078      	str	r0, [r7, #4]
    9124:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
    9126:	687b      	ldr	r3, [r7, #4]
    9128:	2b00      	cmp	r3, #0
    912a:	d004      	beq.n	9136 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    912c:	687b      	ldr	r3, [r7, #4]
    912e:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
    9130:	68fb      	ldr	r3, [r7, #12]
    9132:	683a      	ldr	r2, [r7, #0]
    9134:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
    9136:	46c0      	nop			; (mov r8, r8)
    9138:	46bd      	mov	sp, r7
    913a:	b004      	add	sp, #16
    913c:	bd80      	pop	{r7, pc}
	...

00009140 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    9140:	b580      	push	{r7, lr}
    9142:	b082      	sub	sp, #8
    9144:	af00      	add	r7, sp, #0
    9146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    9148:	4b04      	ldr	r3, [pc, #16]	; (915c <prvIdleTask+0x1c>)
    914a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    914c:	4b04      	ldr	r3, [pc, #16]	; (9160 <prvIdleTask+0x20>)
    914e:	681b      	ldr	r3, [r3, #0]
    9150:	2b01      	cmp	r3, #1
    9152:	d9f9      	bls.n	9148 <prvIdleTask+0x8>
			{
				taskYIELD();
    9154:	4b03      	ldr	r3, [pc, #12]	; (9164 <prvIdleTask+0x24>)
    9156:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    9158:	e7f6      	b.n	9148 <prvIdleTask+0x8>
    915a:	46c0      	nop			; (mov r8, r8)
    915c:	000091f5 	.word	0x000091f5
    9160:	20003f58 	.word	0x20003f58
    9164:	00006621 	.word	0x00006621

00009168 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    9168:	b580      	push	{r7, lr}
    916a:	b082      	sub	sp, #8
    916c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    916e:	2300      	movs	r3, #0
    9170:	607b      	str	r3, [r7, #4]
    9172:	e00c      	b.n	918e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    9174:	687a      	ldr	r2, [r7, #4]
    9176:	0013      	movs	r3, r2
    9178:	009b      	lsls	r3, r3, #2
    917a:	189b      	adds	r3, r3, r2
    917c:	009b      	lsls	r3, r3, #2
    917e:	4a14      	ldr	r2, [pc, #80]	; (91d0 <prvInitialiseTaskLists+0x68>)
    9180:	189b      	adds	r3, r3, r2
    9182:	0018      	movs	r0, r3
    9184:	4b13      	ldr	r3, [pc, #76]	; (91d4 <prvInitialiseTaskLists+0x6c>)
    9186:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    9188:	687b      	ldr	r3, [r7, #4]
    918a:	3301      	adds	r3, #1
    918c:	607b      	str	r3, [r7, #4]
    918e:	687b      	ldr	r3, [r7, #4]
    9190:	2b04      	cmp	r3, #4
    9192:	d9ef      	bls.n	9174 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    9194:	4b10      	ldr	r3, [pc, #64]	; (91d8 <prvInitialiseTaskLists+0x70>)
    9196:	0018      	movs	r0, r3
    9198:	4b0e      	ldr	r3, [pc, #56]	; (91d4 <prvInitialiseTaskLists+0x6c>)
    919a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    919c:	4b0f      	ldr	r3, [pc, #60]	; (91dc <prvInitialiseTaskLists+0x74>)
    919e:	0018      	movs	r0, r3
    91a0:	4b0c      	ldr	r3, [pc, #48]	; (91d4 <prvInitialiseTaskLists+0x6c>)
    91a2:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    91a4:	4b0e      	ldr	r3, [pc, #56]	; (91e0 <prvInitialiseTaskLists+0x78>)
    91a6:	0018      	movs	r0, r3
    91a8:	4b0a      	ldr	r3, [pc, #40]	; (91d4 <prvInitialiseTaskLists+0x6c>)
    91aa:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    91ac:	4b0d      	ldr	r3, [pc, #52]	; (91e4 <prvInitialiseTaskLists+0x7c>)
    91ae:	0018      	movs	r0, r3
    91b0:	4b08      	ldr	r3, [pc, #32]	; (91d4 <prvInitialiseTaskLists+0x6c>)
    91b2:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    91b4:	4b0c      	ldr	r3, [pc, #48]	; (91e8 <prvInitialiseTaskLists+0x80>)
    91b6:	0018      	movs	r0, r3
    91b8:	4b06      	ldr	r3, [pc, #24]	; (91d4 <prvInitialiseTaskLists+0x6c>)
    91ba:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    91bc:	4b0b      	ldr	r3, [pc, #44]	; (91ec <prvInitialiseTaskLists+0x84>)
    91be:	4a06      	ldr	r2, [pc, #24]	; (91d8 <prvInitialiseTaskLists+0x70>)
    91c0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    91c2:	4b0b      	ldr	r3, [pc, #44]	; (91f0 <prvInitialiseTaskLists+0x88>)
    91c4:	4a05      	ldr	r2, [pc, #20]	; (91dc <prvInitialiseTaskLists+0x74>)
    91c6:	601a      	str	r2, [r3, #0]
}
    91c8:	46c0      	nop			; (mov r8, r8)
    91ca:	46bd      	mov	sp, r7
    91cc:	b002      	add	sp, #8
    91ce:	bd80      	pop	{r7, pc}
    91d0:	20003f58 	.word	0x20003f58
    91d4:	000063a9 	.word	0x000063a9
    91d8:	20003fbc 	.word	0x20003fbc
    91dc:	20003fd0 	.word	0x20003fd0
    91e0:	20003fec 	.word	0x20003fec
    91e4:	20004000 	.word	0x20004000
    91e8:	20004018 	.word	0x20004018
    91ec:	20003fe4 	.word	0x20003fe4
    91f0:	20003fe8 	.word	0x20003fe8

000091f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    91f4:	b580      	push	{r7, lr}
    91f6:	b082      	sub	sp, #8
    91f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    91fa:	e01a      	b.n	9232 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    91fc:	4b11      	ldr	r3, [pc, #68]	; (9244 <prvCheckTasksWaitingTermination+0x50>)
    91fe:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    9200:	4b11      	ldr	r3, [pc, #68]	; (9248 <prvCheckTasksWaitingTermination+0x54>)
    9202:	68db      	ldr	r3, [r3, #12]
    9204:	68db      	ldr	r3, [r3, #12]
    9206:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    9208:	687b      	ldr	r3, [r7, #4]
    920a:	3304      	adds	r3, #4
    920c:	0018      	movs	r0, r3
    920e:	4b0f      	ldr	r3, [pc, #60]	; (924c <prvCheckTasksWaitingTermination+0x58>)
    9210:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    9212:	4b0f      	ldr	r3, [pc, #60]	; (9250 <prvCheckTasksWaitingTermination+0x5c>)
    9214:	681b      	ldr	r3, [r3, #0]
    9216:	1e5a      	subs	r2, r3, #1
    9218:	4b0d      	ldr	r3, [pc, #52]	; (9250 <prvCheckTasksWaitingTermination+0x5c>)
    921a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    921c:	4b0d      	ldr	r3, [pc, #52]	; (9254 <prvCheckTasksWaitingTermination+0x60>)
    921e:	681b      	ldr	r3, [r3, #0]
    9220:	1e5a      	subs	r2, r3, #1
    9222:	4b0c      	ldr	r3, [pc, #48]	; (9254 <prvCheckTasksWaitingTermination+0x60>)
    9224:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    9226:	4b0c      	ldr	r3, [pc, #48]	; (9258 <prvCheckTasksWaitingTermination+0x64>)
    9228:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    922a:	687b      	ldr	r3, [r7, #4]
    922c:	0018      	movs	r0, r3
    922e:	4b0b      	ldr	r3, [pc, #44]	; (925c <prvCheckTasksWaitingTermination+0x68>)
    9230:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    9232:	4b08      	ldr	r3, [pc, #32]	; (9254 <prvCheckTasksWaitingTermination+0x60>)
    9234:	681b      	ldr	r3, [r3, #0]
    9236:	2b00      	cmp	r3, #0
    9238:	d1e0      	bne.n	91fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    923a:	46c0      	nop			; (mov r8, r8)
    923c:	46bd      	mov	sp, r7
    923e:	b002      	add	sp, #8
    9240:	bd80      	pop	{r7, pc}
    9242:	46c0      	nop			; (mov r8, r8)
    9244:	00006639 	.word	0x00006639
    9248:	20004000 	.word	0x20004000
    924c:	000064ab 	.word	0x000064ab
    9250:	2000402c 	.word	0x2000402c
    9254:	20004014 	.word	0x20004014
    9258:	0000665d 	.word	0x0000665d
    925c:	000092d1 	.word	0x000092d1

00009260 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
    9260:	b580      	push	{r7, lr}
    9262:	b084      	sub	sp, #16
    9264:	af00      	add	r7, sp, #0
    9266:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
    9268:	2300      	movs	r3, #0
    926a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    926c:	e005      	b.n	927a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
    926e:	687b      	ldr	r3, [r7, #4]
    9270:	3301      	adds	r3, #1
    9272:	607b      	str	r3, [r7, #4]
			ulCount++;
    9274:	68fb      	ldr	r3, [r7, #12]
    9276:	3301      	adds	r3, #1
    9278:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    927a:	687b      	ldr	r3, [r7, #4]
    927c:	781b      	ldrb	r3, [r3, #0]
    927e:	2ba5      	cmp	r3, #165	; 0xa5
    9280:	d0f5      	beq.n	926e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    9282:	68fb      	ldr	r3, [r7, #12]
    9284:	089b      	lsrs	r3, r3, #2
    9286:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
    9288:	68fb      	ldr	r3, [r7, #12]
    928a:	b29b      	uxth	r3, r3
	}
    928c:	0018      	movs	r0, r3
    928e:	46bd      	mov	sp, r7
    9290:	b004      	add	sp, #16
    9292:	bd80      	pop	{r7, pc}

00009294 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
    9294:	b580      	push	{r7, lr}
    9296:	b086      	sub	sp, #24
    9298:	af00      	add	r7, sp, #0
    929a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    929c:	687b      	ldr	r3, [r7, #4]
    929e:	2b00      	cmp	r3, #0
    92a0:	d102      	bne.n	92a8 <uxTaskGetStackHighWaterMark+0x14>
    92a2:	4b09      	ldr	r3, [pc, #36]	; (92c8 <uxTaskGetStackHighWaterMark+0x34>)
    92a4:	681b      	ldr	r3, [r3, #0]
    92a6:	e000      	b.n	92aa <uxTaskGetStackHighWaterMark+0x16>
    92a8:	687b      	ldr	r3, [r7, #4]
    92aa:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    92ac:	697b      	ldr	r3, [r7, #20]
    92ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    92b0:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
    92b2:	693b      	ldr	r3, [r7, #16]
    92b4:	0018      	movs	r0, r3
    92b6:	4b05      	ldr	r3, [pc, #20]	; (92cc <uxTaskGetStackHighWaterMark+0x38>)
    92b8:	4798      	blx	r3
    92ba:	0003      	movs	r3, r0
    92bc:	60fb      	str	r3, [r7, #12]

		return uxReturn;
    92be:	68fb      	ldr	r3, [r7, #12]
	}
    92c0:	0018      	movs	r0, r3
    92c2:	46bd      	mov	sp, r7
    92c4:	b006      	add	sp, #24
    92c6:	bd80      	pop	{r7, pc}
    92c8:	20003f54 	.word	0x20003f54
    92cc:	00009261 	.word	0x00009261

000092d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    92d0:	b580      	push	{r7, lr}
    92d2:	b082      	sub	sp, #8
    92d4:	af00      	add	r7, sp, #0
    92d6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    92d8:	687b      	ldr	r3, [r7, #4]
    92da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    92dc:	0018      	movs	r0, r3
    92de:	4b05      	ldr	r3, [pc, #20]	; (92f4 <prvDeleteTCB+0x24>)
    92e0:	4798      	blx	r3
			vPortFree( pxTCB );
    92e2:	687b      	ldr	r3, [r7, #4]
    92e4:	0018      	movs	r0, r3
    92e6:	4b03      	ldr	r3, [pc, #12]	; (92f4 <prvDeleteTCB+0x24>)
    92e8:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    92ea:	46c0      	nop			; (mov r8, r8)
    92ec:	46bd      	mov	sp, r7
    92ee:	b002      	add	sp, #8
    92f0:	bd80      	pop	{r7, pc}
    92f2:	46c0      	nop			; (mov r8, r8)
    92f4:	00006835 	.word	0x00006835

000092f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    92f8:	b580      	push	{r7, lr}
    92fa:	b082      	sub	sp, #8
    92fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    92fe:	4b0e      	ldr	r3, [pc, #56]	; (9338 <prvResetNextTaskUnblockTime+0x40>)
    9300:	681b      	ldr	r3, [r3, #0]
    9302:	681b      	ldr	r3, [r3, #0]
    9304:	2b00      	cmp	r3, #0
    9306:	d101      	bne.n	930c <prvResetNextTaskUnblockTime+0x14>
    9308:	2301      	movs	r3, #1
    930a:	e000      	b.n	930e <prvResetNextTaskUnblockTime+0x16>
    930c:	2300      	movs	r3, #0
    930e:	2b00      	cmp	r3, #0
    9310:	d004      	beq.n	931c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    9312:	4b0a      	ldr	r3, [pc, #40]	; (933c <prvResetNextTaskUnblockTime+0x44>)
    9314:	2201      	movs	r2, #1
    9316:	4252      	negs	r2, r2
    9318:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    931a:	e008      	b.n	932e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    931c:	4b06      	ldr	r3, [pc, #24]	; (9338 <prvResetNextTaskUnblockTime+0x40>)
    931e:	681b      	ldr	r3, [r3, #0]
    9320:	68db      	ldr	r3, [r3, #12]
    9322:	68db      	ldr	r3, [r3, #12]
    9324:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    9326:	687b      	ldr	r3, [r7, #4]
    9328:	685a      	ldr	r2, [r3, #4]
    932a:	4b04      	ldr	r3, [pc, #16]	; (933c <prvResetNextTaskUnblockTime+0x44>)
    932c:	601a      	str	r2, [r3, #0]
}
    932e:	46c0      	nop			; (mov r8, r8)
    9330:	46bd      	mov	sp, r7
    9332:	b002      	add	sp, #8
    9334:	bd80      	pop	{r7, pc}
    9336:	46c0      	nop			; (mov r8, r8)
    9338:	20003fe4 	.word	0x20003fe4
    933c:	2000404c 	.word	0x2000404c

00009340 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    9340:	b580      	push	{r7, lr}
    9342:	b082      	sub	sp, #8
    9344:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    9346:	4b04      	ldr	r3, [pc, #16]	; (9358 <xTaskGetCurrentTaskHandle+0x18>)
    9348:	681b      	ldr	r3, [r3, #0]
    934a:	607b      	str	r3, [r7, #4]

		return xReturn;
    934c:	687b      	ldr	r3, [r7, #4]
	}
    934e:	0018      	movs	r0, r3
    9350:	46bd      	mov	sp, r7
    9352:	b002      	add	sp, #8
    9354:	bd80      	pop	{r7, pc}
    9356:	46c0      	nop			; (mov r8, r8)
    9358:	20003f54 	.word	0x20003f54

0000935c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    935c:	b580      	push	{r7, lr}
    935e:	b082      	sub	sp, #8
    9360:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    9362:	4b0a      	ldr	r3, [pc, #40]	; (938c <xTaskGetSchedulerState+0x30>)
    9364:	681b      	ldr	r3, [r3, #0]
    9366:	2b00      	cmp	r3, #0
    9368:	d102      	bne.n	9370 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    936a:	2301      	movs	r3, #1
    936c:	607b      	str	r3, [r7, #4]
    936e:	e008      	b.n	9382 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    9370:	4b07      	ldr	r3, [pc, #28]	; (9390 <xTaskGetSchedulerState+0x34>)
    9372:	681b      	ldr	r3, [r3, #0]
    9374:	2b00      	cmp	r3, #0
    9376:	d102      	bne.n	937e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    9378:	2302      	movs	r3, #2
    937a:	607b      	str	r3, [r7, #4]
    937c:	e001      	b.n	9382 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    937e:	2300      	movs	r3, #0
    9380:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    9382:	687b      	ldr	r3, [r7, #4]
	}
    9384:	0018      	movs	r0, r3
    9386:	46bd      	mov	sp, r7
    9388:	b002      	add	sp, #8
    938a:	bd80      	pop	{r7, pc}
    938c:	20004038 	.word	0x20004038
    9390:	20004054 	.word	0x20004054

00009394 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    9394:	b590      	push	{r4, r7, lr}
    9396:	b085      	sub	sp, #20
    9398:	af00      	add	r7, sp, #0
    939a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
    939c:	687b      	ldr	r3, [r7, #4]
    939e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    93a0:	2300      	movs	r3, #0
    93a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
    93a4:	687b      	ldr	r3, [r7, #4]
    93a6:	2b00      	cmp	r3, #0
    93a8:	d100      	bne.n	93ac <xTaskPriorityInherit+0x18>
    93aa:	e09d      	b.n	94e8 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    93ac:	68bb      	ldr	r3, [r7, #8]
    93ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93b0:	4b50      	ldr	r3, [pc, #320]	; (94f4 <xTaskPriorityInherit+0x160>)
    93b2:	681b      	ldr	r3, [r3, #0]
    93b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    93b6:	429a      	cmp	r2, r3
    93b8:	d300      	bcc.n	93bc <xTaskPriorityInherit+0x28>
    93ba:	e08c      	b.n	94d6 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    93bc:	68bb      	ldr	r3, [r7, #8]
    93be:	699b      	ldr	r3, [r3, #24]
    93c0:	2b00      	cmp	r3, #0
    93c2:	db06      	blt.n	93d2 <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    93c4:	4b4b      	ldr	r3, [pc, #300]	; (94f4 <xTaskPriorityInherit+0x160>)
    93c6:	681b      	ldr	r3, [r3, #0]
    93c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    93ca:	2205      	movs	r2, #5
    93cc:	1ad2      	subs	r2, r2, r3
    93ce:	68bb      	ldr	r3, [r7, #8]
    93d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    93d2:	68bb      	ldr	r3, [r7, #8]
    93d4:	6959      	ldr	r1, [r3, #20]
    93d6:	68bb      	ldr	r3, [r7, #8]
    93d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93da:	0013      	movs	r3, r2
    93dc:	009b      	lsls	r3, r3, #2
    93de:	189b      	adds	r3, r3, r2
    93e0:	009b      	lsls	r3, r3, #2
    93e2:	4a45      	ldr	r2, [pc, #276]	; (94f8 <xTaskPriorityInherit+0x164>)
    93e4:	189b      	adds	r3, r3, r2
    93e6:	4299      	cmp	r1, r3
    93e8:	d101      	bne.n	93ee <xTaskPriorityInherit+0x5a>
    93ea:	2301      	movs	r3, #1
    93ec:	e000      	b.n	93f0 <xTaskPriorityInherit+0x5c>
    93ee:	2300      	movs	r3, #0
    93f0:	2b00      	cmp	r3, #0
    93f2:	d037      	beq.n	9464 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    93f4:	68bb      	ldr	r3, [r7, #8]
    93f6:	3304      	adds	r3, #4
    93f8:	0018      	movs	r0, r3
    93fa:	4b40      	ldr	r3, [pc, #256]	; (94fc <xTaskPriorityInherit+0x168>)
    93fc:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    93fe:	4b3d      	ldr	r3, [pc, #244]	; (94f4 <xTaskPriorityInherit+0x160>)
    9400:	681b      	ldr	r3, [r3, #0]
    9402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9404:	68bb      	ldr	r3, [r7, #8]
    9406:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    9408:	68bb      	ldr	r3, [r7, #8]
    940a:	0018      	movs	r0, r3
    940c:	4b3c      	ldr	r3, [pc, #240]	; (9500 <xTaskPriorityInherit+0x16c>)
    940e:	4798      	blx	r3
    9410:	0003      	movs	r3, r0
    9412:	001a      	movs	r2, r3
    9414:	4b3b      	ldr	r3, [pc, #236]	; (9504 <xTaskPriorityInherit+0x170>)
    9416:	881b      	ldrh	r3, [r3, #0]
    9418:	4013      	ands	r3, r2
    941a:	b29b      	uxth	r3, r3
    941c:	2b00      	cmp	r3, #0
    941e:	d008      	beq.n	9432 <xTaskPriorityInherit+0x9e>
    9420:	68bb      	ldr	r3, [r7, #8]
    9422:	0018      	movs	r0, r3
    9424:	4b38      	ldr	r3, [pc, #224]	; (9508 <xTaskPriorityInherit+0x174>)
    9426:	4798      	blx	r3
    9428:	0003      	movs	r3, r0
    942a:	b2db      	uxtb	r3, r3
    942c:	0018      	movs	r0, r3
    942e:	4b37      	ldr	r3, [pc, #220]	; (950c <xTaskPriorityInherit+0x178>)
    9430:	4798      	blx	r3
    9432:	68bb      	ldr	r3, [r7, #8]
    9434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9436:	4b36      	ldr	r3, [pc, #216]	; (9510 <xTaskPriorityInherit+0x17c>)
    9438:	681b      	ldr	r3, [r3, #0]
    943a:	429a      	cmp	r2, r3
    943c:	d903      	bls.n	9446 <xTaskPriorityInherit+0xb2>
    943e:	68bb      	ldr	r3, [r7, #8]
    9440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9442:	4b33      	ldr	r3, [pc, #204]	; (9510 <xTaskPriorityInherit+0x17c>)
    9444:	601a      	str	r2, [r3, #0]
    9446:	68bb      	ldr	r3, [r7, #8]
    9448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    944a:	0013      	movs	r3, r2
    944c:	009b      	lsls	r3, r3, #2
    944e:	189b      	adds	r3, r3, r2
    9450:	009b      	lsls	r3, r3, #2
    9452:	4a29      	ldr	r2, [pc, #164]	; (94f8 <xTaskPriorityInherit+0x164>)
    9454:	189a      	adds	r2, r3, r2
    9456:	68bb      	ldr	r3, [r7, #8]
    9458:	3304      	adds	r3, #4
    945a:	0019      	movs	r1, r3
    945c:	0010      	movs	r0, r2
    945e:	4b2d      	ldr	r3, [pc, #180]	; (9514 <xTaskPriorityInherit+0x180>)
    9460:	4798      	blx	r3
    9462:	e004      	b.n	946e <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    9464:	4b23      	ldr	r3, [pc, #140]	; (94f4 <xTaskPriorityInherit+0x160>)
    9466:	681b      	ldr	r3, [r3, #0]
    9468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    946a:	68bb      	ldr	r3, [r7, #8]
    946c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    946e:	68bb      	ldr	r3, [r7, #8]
    9470:	0018      	movs	r0, r3
    9472:	4b23      	ldr	r3, [pc, #140]	; (9500 <xTaskPriorityInherit+0x16c>)
    9474:	4798      	blx	r3
    9476:	0003      	movs	r3, r0
    9478:	001a      	movs	r2, r3
    947a:	4b22      	ldr	r3, [pc, #136]	; (9504 <xTaskPriorityInherit+0x170>)
    947c:	881b      	ldrh	r3, [r3, #0]
    947e:	4013      	ands	r3, r2
    9480:	b29b      	uxth	r3, r3
    9482:	2b00      	cmp	r3, #0
    9484:	d024      	beq.n	94d0 <xTaskPriorityInherit+0x13c>
    9486:	68bb      	ldr	r3, [r7, #8]
    9488:	0018      	movs	r0, r3
    948a:	4b1f      	ldr	r3, [pc, #124]	; (9508 <xTaskPriorityInherit+0x174>)
    948c:	4798      	blx	r3
    948e:	0003      	movs	r3, r0
    9490:	b2db      	uxtb	r3, r3
    9492:	001c      	movs	r4, r3
    9494:	68bb      	ldr	r3, [r7, #8]
    9496:	0018      	movs	r0, r3
    9498:	4b1b      	ldr	r3, [pc, #108]	; (9508 <xTaskPriorityInherit+0x174>)
    949a:	4798      	blx	r3
    949c:	0003      	movs	r3, r0
    949e:	b2db      	uxtb	r3, r3
    94a0:	0019      	movs	r1, r3
    94a2:	2003      	movs	r0, #3
    94a4:	4b1c      	ldr	r3, [pc, #112]	; (9518 <xTaskPriorityInherit+0x184>)
    94a6:	4798      	blx	r3
    94a8:	0003      	movs	r3, r0
    94aa:	0022      	movs	r2, r4
    94ac:	2103      	movs	r1, #3
    94ae:	208e      	movs	r0, #142	; 0x8e
    94b0:	4c1a      	ldr	r4, [pc, #104]	; (951c <xTaskPriorityInherit+0x188>)
    94b2:	47a0      	blx	r4
    94b4:	68bb      	ldr	r3, [r7, #8]
    94b6:	0018      	movs	r0, r3
    94b8:	4b13      	ldr	r3, [pc, #76]	; (9508 <xTaskPriorityInherit+0x174>)
    94ba:	4798      	blx	r3
    94bc:	0003      	movs	r3, r0
    94be:	b2d9      	uxtb	r1, r3
    94c0:	4b0c      	ldr	r3, [pc, #48]	; (94f4 <xTaskPriorityInherit+0x160>)
    94c2:	681b      	ldr	r3, [r3, #0]
    94c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    94c6:	b2db      	uxtb	r3, r3
    94c8:	001a      	movs	r2, r3
    94ca:	2003      	movs	r0, #3
    94cc:	4b14      	ldr	r3, [pc, #80]	; (9520 <xTaskPriorityInherit+0x18c>)
    94ce:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
    94d0:	2301      	movs	r3, #1
    94d2:	60fb      	str	r3, [r7, #12]
    94d4:	e008      	b.n	94e8 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    94d6:	68bb      	ldr	r3, [r7, #8]
    94d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    94da:	4b06      	ldr	r3, [pc, #24]	; (94f4 <xTaskPriorityInherit+0x160>)
    94dc:	681b      	ldr	r3, [r3, #0]
    94de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    94e0:	429a      	cmp	r2, r3
    94e2:	d201      	bcs.n	94e8 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
    94e4:	2301      	movs	r3, #1
    94e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    94e8:	68fb      	ldr	r3, [r7, #12]
	}
    94ea:	0018      	movs	r0, r3
    94ec:	46bd      	mov	sp, r7
    94ee:	b005      	add	sp, #20
    94f0:	bd90      	pop	{r4, r7, pc}
    94f2:	46c0      	nop			; (mov r8, r8)
    94f4:	20003f54 	.word	0x20003f54
    94f8:	20003f58 	.word	0x20003f58
    94fc:	000064ab 	.word	0x000064ab
    9500:	00004631 	.word	0x00004631
    9504:	200000fc 	.word	0x200000fc
    9508:	00004611 	.word	0x00004611
    950c:	00004de1 	.word	0x00004de1
    9510:	20004034 	.word	0x20004034
    9514:	000063fb 	.word	0x000063fb
    9518:	000055e9 	.word	0x000055e9
    951c:	00005159 	.word	0x00005159
    9520:	00005545 	.word	0x00005545

00009524 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    9524:	b590      	push	{r4, r7, lr}
    9526:	b085      	sub	sp, #20
    9528:	af00      	add	r7, sp, #0
    952a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    952c:	687b      	ldr	r3, [r7, #4]
    952e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    9530:	2300      	movs	r3, #0
    9532:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    9534:	687b      	ldr	r3, [r7, #4]
    9536:	2b00      	cmp	r3, #0
    9538:	d100      	bne.n	953c <xTaskPriorityDisinherit+0x18>
    953a:	e089      	b.n	9650 <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    953c:	4b47      	ldr	r3, [pc, #284]	; (965c <xTaskPriorityDisinherit+0x138>)
    953e:	681b      	ldr	r3, [r3, #0]
    9540:	68ba      	ldr	r2, [r7, #8]
    9542:	429a      	cmp	r2, r3
    9544:	d001      	beq.n	954a <xTaskPriorityDisinherit+0x26>
    9546:	b672      	cpsid	i
    9548:	e7fe      	b.n	9548 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
    954a:	68bb      	ldr	r3, [r7, #8]
    954c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    954e:	2b00      	cmp	r3, #0
    9550:	d101      	bne.n	9556 <xTaskPriorityDisinherit+0x32>
    9552:	b672      	cpsid	i
    9554:	e7fe      	b.n	9554 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
    9556:	68bb      	ldr	r3, [r7, #8]
    9558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    955a:	1e5a      	subs	r2, r3, #1
    955c:	68bb      	ldr	r3, [r7, #8]
    955e:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    9560:	68bb      	ldr	r3, [r7, #8]
    9562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9564:	68bb      	ldr	r3, [r7, #8]
    9566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9568:	429a      	cmp	r2, r3
    956a:	d071      	beq.n	9650 <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    956c:	68bb      	ldr	r3, [r7, #8]
    956e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    9570:	2b00      	cmp	r3, #0
    9572:	d16d      	bne.n	9650 <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    9574:	68bb      	ldr	r3, [r7, #8]
    9576:	3304      	adds	r3, #4
    9578:	0018      	movs	r0, r3
    957a:	4b39      	ldr	r3, [pc, #228]	; (9660 <xTaskPriorityDisinherit+0x13c>)
    957c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    957e:	68bb      	ldr	r3, [r7, #8]
    9580:	0018      	movs	r0, r3
    9582:	4b38      	ldr	r3, [pc, #224]	; (9664 <xTaskPriorityDisinherit+0x140>)
    9584:	4798      	blx	r3
    9586:	0003      	movs	r3, r0
    9588:	001a      	movs	r2, r3
    958a:	4b37      	ldr	r3, [pc, #220]	; (9668 <xTaskPriorityDisinherit+0x144>)
    958c:	881b      	ldrh	r3, [r3, #0]
    958e:	4013      	ands	r3, r2
    9590:	b29b      	uxth	r3, r3
    9592:	2b00      	cmp	r3, #0
    9594:	d023      	beq.n	95de <xTaskPriorityDisinherit+0xba>
    9596:	68bb      	ldr	r3, [r7, #8]
    9598:	0018      	movs	r0, r3
    959a:	4b34      	ldr	r3, [pc, #208]	; (966c <xTaskPriorityDisinherit+0x148>)
    959c:	4798      	blx	r3
    959e:	0003      	movs	r3, r0
    95a0:	b2db      	uxtb	r3, r3
    95a2:	001c      	movs	r4, r3
    95a4:	68bb      	ldr	r3, [r7, #8]
    95a6:	0018      	movs	r0, r3
    95a8:	4b30      	ldr	r3, [pc, #192]	; (966c <xTaskPriorityDisinherit+0x148>)
    95aa:	4798      	blx	r3
    95ac:	0003      	movs	r3, r0
    95ae:	b2db      	uxtb	r3, r3
    95b0:	0019      	movs	r1, r3
    95b2:	2003      	movs	r0, #3
    95b4:	4b2e      	ldr	r3, [pc, #184]	; (9670 <xTaskPriorityDisinherit+0x14c>)
    95b6:	4798      	blx	r3
    95b8:	0003      	movs	r3, r0
    95ba:	0022      	movs	r2, r4
    95bc:	2103      	movs	r1, #3
    95be:	208f      	movs	r0, #143	; 0x8f
    95c0:	4c2c      	ldr	r4, [pc, #176]	; (9674 <xTaskPriorityDisinherit+0x150>)
    95c2:	47a0      	blx	r4
    95c4:	68bb      	ldr	r3, [r7, #8]
    95c6:	0018      	movs	r0, r3
    95c8:	4b28      	ldr	r3, [pc, #160]	; (966c <xTaskPriorityDisinherit+0x148>)
    95ca:	4798      	blx	r3
    95cc:	0003      	movs	r3, r0
    95ce:	b2d9      	uxtb	r1, r3
    95d0:	68bb      	ldr	r3, [r7, #8]
    95d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    95d4:	b2db      	uxtb	r3, r3
    95d6:	001a      	movs	r2, r3
    95d8:	2003      	movs	r0, #3
    95da:	4b27      	ldr	r3, [pc, #156]	; (9678 <xTaskPriorityDisinherit+0x154>)
    95dc:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    95de:	68bb      	ldr	r3, [r7, #8]
    95e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    95e2:	68bb      	ldr	r3, [r7, #8]
    95e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    95e6:	68bb      	ldr	r3, [r7, #8]
    95e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    95ea:	2205      	movs	r2, #5
    95ec:	1ad2      	subs	r2, r2, r3
    95ee:	68bb      	ldr	r3, [r7, #8]
    95f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    95f2:	68bb      	ldr	r3, [r7, #8]
    95f4:	0018      	movs	r0, r3
    95f6:	4b1b      	ldr	r3, [pc, #108]	; (9664 <xTaskPriorityDisinherit+0x140>)
    95f8:	4798      	blx	r3
    95fa:	0003      	movs	r3, r0
    95fc:	001a      	movs	r2, r3
    95fe:	4b1a      	ldr	r3, [pc, #104]	; (9668 <xTaskPriorityDisinherit+0x144>)
    9600:	881b      	ldrh	r3, [r3, #0]
    9602:	4013      	ands	r3, r2
    9604:	b29b      	uxth	r3, r3
    9606:	2b00      	cmp	r3, #0
    9608:	d008      	beq.n	961c <xTaskPriorityDisinherit+0xf8>
    960a:	68bb      	ldr	r3, [r7, #8]
    960c:	0018      	movs	r0, r3
    960e:	4b17      	ldr	r3, [pc, #92]	; (966c <xTaskPriorityDisinherit+0x148>)
    9610:	4798      	blx	r3
    9612:	0003      	movs	r3, r0
    9614:	b2db      	uxtb	r3, r3
    9616:	0018      	movs	r0, r3
    9618:	4b18      	ldr	r3, [pc, #96]	; (967c <xTaskPriorityDisinherit+0x158>)
    961a:	4798      	blx	r3
    961c:	68bb      	ldr	r3, [r7, #8]
    961e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9620:	4b17      	ldr	r3, [pc, #92]	; (9680 <xTaskPriorityDisinherit+0x15c>)
    9622:	681b      	ldr	r3, [r3, #0]
    9624:	429a      	cmp	r2, r3
    9626:	d903      	bls.n	9630 <xTaskPriorityDisinherit+0x10c>
    9628:	68bb      	ldr	r3, [r7, #8]
    962a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    962c:	4b14      	ldr	r3, [pc, #80]	; (9680 <xTaskPriorityDisinherit+0x15c>)
    962e:	601a      	str	r2, [r3, #0]
    9630:	68bb      	ldr	r3, [r7, #8]
    9632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9634:	0013      	movs	r3, r2
    9636:	009b      	lsls	r3, r3, #2
    9638:	189b      	adds	r3, r3, r2
    963a:	009b      	lsls	r3, r3, #2
    963c:	4a11      	ldr	r2, [pc, #68]	; (9684 <xTaskPriorityDisinherit+0x160>)
    963e:	189a      	adds	r2, r3, r2
    9640:	68bb      	ldr	r3, [r7, #8]
    9642:	3304      	adds	r3, #4
    9644:	0019      	movs	r1, r3
    9646:	0010      	movs	r0, r2
    9648:	4b0f      	ldr	r3, [pc, #60]	; (9688 <xTaskPriorityDisinherit+0x164>)
    964a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    964c:	2301      	movs	r3, #1
    964e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    9650:	68fb      	ldr	r3, [r7, #12]
	}
    9652:	0018      	movs	r0, r3
    9654:	46bd      	mov	sp, r7
    9656:	b005      	add	sp, #20
    9658:	bd90      	pop	{r4, r7, pc}
    965a:	46c0      	nop			; (mov r8, r8)
    965c:	20003f54 	.word	0x20003f54
    9660:	000064ab 	.word	0x000064ab
    9664:	00004631 	.word	0x00004631
    9668:	200000fc 	.word	0x200000fc
    966c:	00004611 	.word	0x00004611
    9670:	000055e9 	.word	0x000055e9
    9674:	00005159 	.word	0x00005159
    9678:	00005545 	.word	0x00005545
    967c:	00004de1 	.word	0x00004de1
    9680:	20004034 	.word	0x20004034
    9684:	20003f58 	.word	0x20003f58
    9688:	000063fb 	.word	0x000063fb

0000968c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
    968c:	b590      	push	{r4, r7, lr}
    968e:	b087      	sub	sp, #28
    9690:	af00      	add	r7, sp, #0
    9692:	6078      	str	r0, [r7, #4]
    9694:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    9696:	687b      	ldr	r3, [r7, #4]
    9698:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
    969a:	2301      	movs	r3, #1
    969c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    969e:	687b      	ldr	r3, [r7, #4]
    96a0:	2b00      	cmp	r3, #0
    96a2:	d100      	bne.n	96a6 <vTaskPriorityDisinheritAfterTimeout+0x1a>
    96a4:	e0a4      	b.n	97f0 <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
    96a6:	693b      	ldr	r3, [r7, #16]
    96a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    96aa:	2b00      	cmp	r3, #0
    96ac:	d101      	bne.n	96b2 <vTaskPriorityDisinheritAfterTimeout+0x26>
    96ae:	b672      	cpsid	i
    96b0:	e7fe      	b.n	96b0 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    96b2:	693b      	ldr	r3, [r7, #16]
    96b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    96b6:	683b      	ldr	r3, [r7, #0]
    96b8:	429a      	cmp	r2, r3
    96ba:	d202      	bcs.n	96c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
    96bc:	683b      	ldr	r3, [r7, #0]
    96be:	617b      	str	r3, [r7, #20]
    96c0:	e002      	b.n	96c8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
    96c2:	693b      	ldr	r3, [r7, #16]
    96c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    96c6:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
    96c8:	693b      	ldr	r3, [r7, #16]
    96ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    96cc:	697b      	ldr	r3, [r7, #20]
    96ce:	429a      	cmp	r2, r3
    96d0:	d100      	bne.n	96d4 <vTaskPriorityDisinheritAfterTimeout+0x48>
    96d2:	e08d      	b.n	97f0 <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    96d4:	693b      	ldr	r3, [r7, #16]
    96d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    96d8:	68fb      	ldr	r3, [r7, #12]
    96da:	429a      	cmp	r2, r3
    96dc:	d000      	beq.n	96e0 <vTaskPriorityDisinheritAfterTimeout+0x54>
    96de:	e087      	b.n	97f0 <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
    96e0:	4b45      	ldr	r3, [pc, #276]	; (97f8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
    96e2:	681b      	ldr	r3, [r3, #0]
    96e4:	693a      	ldr	r2, [r7, #16]
    96e6:	429a      	cmp	r2, r3
    96e8:	d101      	bne.n	96ee <vTaskPriorityDisinheritAfterTimeout+0x62>
    96ea:	b672      	cpsid	i
    96ec:	e7fe      	b.n	96ec <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    96ee:	693b      	ldr	r3, [r7, #16]
    96f0:	0018      	movs	r0, r3
    96f2:	4b42      	ldr	r3, [pc, #264]	; (97fc <vTaskPriorityDisinheritAfterTimeout+0x170>)
    96f4:	4798      	blx	r3
    96f6:	0003      	movs	r3, r0
    96f8:	001a      	movs	r2, r3
    96fa:	4b41      	ldr	r3, [pc, #260]	; (9800 <vTaskPriorityDisinheritAfterTimeout+0x174>)
    96fc:	881b      	ldrh	r3, [r3, #0]
    96fe:	4013      	ands	r3, r2
    9700:	b29b      	uxth	r3, r3
    9702:	2b00      	cmp	r3, #0
    9704:	d023      	beq.n	974e <vTaskPriorityDisinheritAfterTimeout+0xc2>
    9706:	693b      	ldr	r3, [r7, #16]
    9708:	0018      	movs	r0, r3
    970a:	4b3e      	ldr	r3, [pc, #248]	; (9804 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    970c:	4798      	blx	r3
    970e:	0003      	movs	r3, r0
    9710:	b2db      	uxtb	r3, r3
    9712:	001c      	movs	r4, r3
    9714:	693b      	ldr	r3, [r7, #16]
    9716:	0018      	movs	r0, r3
    9718:	4b3a      	ldr	r3, [pc, #232]	; (9804 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    971a:	4798      	blx	r3
    971c:	0003      	movs	r3, r0
    971e:	b2db      	uxtb	r3, r3
    9720:	0019      	movs	r1, r3
    9722:	2003      	movs	r0, #3
    9724:	4b38      	ldr	r3, [pc, #224]	; (9808 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
    9726:	4798      	blx	r3
    9728:	0003      	movs	r3, r0
    972a:	0022      	movs	r2, r4
    972c:	2103      	movs	r1, #3
    972e:	208f      	movs	r0, #143	; 0x8f
    9730:	4c36      	ldr	r4, [pc, #216]	; (980c <vTaskPriorityDisinheritAfterTimeout+0x180>)
    9732:	47a0      	blx	r4
    9734:	693b      	ldr	r3, [r7, #16]
    9736:	0018      	movs	r0, r3
    9738:	4b32      	ldr	r3, [pc, #200]	; (9804 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    973a:	4798      	blx	r3
    973c:	0003      	movs	r3, r0
    973e:	b2d9      	uxtb	r1, r3
    9740:	693b      	ldr	r3, [r7, #16]
    9742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9744:	b2db      	uxtb	r3, r3
    9746:	001a      	movs	r2, r3
    9748:	2003      	movs	r0, #3
    974a:	4b31      	ldr	r3, [pc, #196]	; (9810 <vTaskPriorityDisinheritAfterTimeout+0x184>)
    974c:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    974e:	693b      	ldr	r3, [r7, #16]
    9750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9752:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
    9754:	693b      	ldr	r3, [r7, #16]
    9756:	697a      	ldr	r2, [r7, #20]
    9758:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    975a:	693b      	ldr	r3, [r7, #16]
    975c:	699b      	ldr	r3, [r3, #24]
    975e:	2b00      	cmp	r3, #0
    9760:	db04      	blt.n	976c <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9762:	697b      	ldr	r3, [r7, #20]
    9764:	2205      	movs	r2, #5
    9766:	1ad2      	subs	r2, r2, r3
    9768:	693b      	ldr	r3, [r7, #16]
    976a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    976c:	693b      	ldr	r3, [r7, #16]
    976e:	6959      	ldr	r1, [r3, #20]
    9770:	68ba      	ldr	r2, [r7, #8]
    9772:	0013      	movs	r3, r2
    9774:	009b      	lsls	r3, r3, #2
    9776:	189b      	adds	r3, r3, r2
    9778:	009b      	lsls	r3, r3, #2
    977a:	4a26      	ldr	r2, [pc, #152]	; (9814 <vTaskPriorityDisinheritAfterTimeout+0x188>)
    977c:	189b      	adds	r3, r3, r2
    977e:	4299      	cmp	r1, r3
    9780:	d101      	bne.n	9786 <vTaskPriorityDisinheritAfterTimeout+0xfa>
    9782:	2301      	movs	r3, #1
    9784:	e000      	b.n	9788 <vTaskPriorityDisinheritAfterTimeout+0xfc>
    9786:	2300      	movs	r3, #0
    9788:	2b00      	cmp	r3, #0
    978a:	d031      	beq.n	97f0 <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    978c:	693b      	ldr	r3, [r7, #16]
    978e:	3304      	adds	r3, #4
    9790:	0018      	movs	r0, r3
    9792:	4b21      	ldr	r3, [pc, #132]	; (9818 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
    9794:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
    9796:	693b      	ldr	r3, [r7, #16]
    9798:	0018      	movs	r0, r3
    979a:	4b18      	ldr	r3, [pc, #96]	; (97fc <vTaskPriorityDisinheritAfterTimeout+0x170>)
    979c:	4798      	blx	r3
    979e:	0003      	movs	r3, r0
    97a0:	001a      	movs	r2, r3
    97a2:	4b17      	ldr	r3, [pc, #92]	; (9800 <vTaskPriorityDisinheritAfterTimeout+0x174>)
    97a4:	881b      	ldrh	r3, [r3, #0]
    97a6:	4013      	ands	r3, r2
    97a8:	b29b      	uxth	r3, r3
    97aa:	2b00      	cmp	r3, #0
    97ac:	d008      	beq.n	97c0 <vTaskPriorityDisinheritAfterTimeout+0x134>
    97ae:	693b      	ldr	r3, [r7, #16]
    97b0:	0018      	movs	r0, r3
    97b2:	4b14      	ldr	r3, [pc, #80]	; (9804 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    97b4:	4798      	blx	r3
    97b6:	0003      	movs	r3, r0
    97b8:	b2db      	uxtb	r3, r3
    97ba:	0018      	movs	r0, r3
    97bc:	4b17      	ldr	r3, [pc, #92]	; (981c <vTaskPriorityDisinheritAfterTimeout+0x190>)
    97be:	4798      	blx	r3
    97c0:	693b      	ldr	r3, [r7, #16]
    97c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    97c4:	4b16      	ldr	r3, [pc, #88]	; (9820 <vTaskPriorityDisinheritAfterTimeout+0x194>)
    97c6:	681b      	ldr	r3, [r3, #0]
    97c8:	429a      	cmp	r2, r3
    97ca:	d903      	bls.n	97d4 <vTaskPriorityDisinheritAfterTimeout+0x148>
    97cc:	693b      	ldr	r3, [r7, #16]
    97ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    97d0:	4b13      	ldr	r3, [pc, #76]	; (9820 <vTaskPriorityDisinheritAfterTimeout+0x194>)
    97d2:	601a      	str	r2, [r3, #0]
    97d4:	693b      	ldr	r3, [r7, #16]
    97d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    97d8:	0013      	movs	r3, r2
    97da:	009b      	lsls	r3, r3, #2
    97dc:	189b      	adds	r3, r3, r2
    97de:	009b      	lsls	r3, r3, #2
    97e0:	4a0c      	ldr	r2, [pc, #48]	; (9814 <vTaskPriorityDisinheritAfterTimeout+0x188>)
    97e2:	189a      	adds	r2, r3, r2
    97e4:	693b      	ldr	r3, [r7, #16]
    97e6:	3304      	adds	r3, #4
    97e8:	0019      	movs	r1, r3
    97ea:	0010      	movs	r0, r2
    97ec:	4b0d      	ldr	r3, [pc, #52]	; (9824 <vTaskPriorityDisinheritAfterTimeout+0x198>)
    97ee:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    97f0:	46c0      	nop			; (mov r8, r8)
    97f2:	46bd      	mov	sp, r7
    97f4:	b007      	add	sp, #28
    97f6:	bd90      	pop	{r4, r7, pc}
    97f8:	20003f54 	.word	0x20003f54
    97fc:	00004631 	.word	0x00004631
    9800:	200000fc 	.word	0x200000fc
    9804:	00004611 	.word	0x00004611
    9808:	000055e9 	.word	0x000055e9
    980c:	00005159 	.word	0x00005159
    9810:	00005545 	.word	0x00005545
    9814:	20003f58 	.word	0x20003f58
    9818:	000064ab 	.word	0x000064ab
    981c:	00004de1 	.word	0x00004de1
    9820:	20004034 	.word	0x20004034
    9824:	000063fb 	.word	0x000063fb

00009828 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    9828:	b580      	push	{r7, lr}
    982a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    982c:	4b06      	ldr	r3, [pc, #24]	; (9848 <pvTaskIncrementMutexHeldCount+0x20>)
    982e:	681b      	ldr	r3, [r3, #0]
    9830:	2b00      	cmp	r3, #0
    9832:	d004      	beq.n	983e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    9834:	4b04      	ldr	r3, [pc, #16]	; (9848 <pvTaskIncrementMutexHeldCount+0x20>)
    9836:	681b      	ldr	r3, [r3, #0]
    9838:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    983a:	3201      	adds	r2, #1
    983c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
    983e:	4b02      	ldr	r3, [pc, #8]	; (9848 <pvTaskIncrementMutexHeldCount+0x20>)
    9840:	681b      	ldr	r3, [r3, #0]
	}
    9842:	0018      	movs	r0, r3
    9844:	46bd      	mov	sp, r7
    9846:	bd80      	pop	{r7, pc}
    9848:	20003f54 	.word	0x20003f54

0000984c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    984c:	b580      	push	{r7, lr}
    984e:	b084      	sub	sp, #16
    9850:	af00      	add	r7, sp, #0
    9852:	6078      	str	r0, [r7, #4]
    9854:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    9856:	4b21      	ldr	r3, [pc, #132]	; (98dc <prvAddCurrentTaskToDelayedList+0x90>)
    9858:	681b      	ldr	r3, [r3, #0]
    985a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    985c:	4b20      	ldr	r3, [pc, #128]	; (98e0 <prvAddCurrentTaskToDelayedList+0x94>)
    985e:	681b      	ldr	r3, [r3, #0]
    9860:	3304      	adds	r3, #4
    9862:	0018      	movs	r0, r3
    9864:	4b1f      	ldr	r3, [pc, #124]	; (98e4 <prvAddCurrentTaskToDelayedList+0x98>)
    9866:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    9868:	687b      	ldr	r3, [r7, #4]
    986a:	3301      	adds	r3, #1
    986c:	d10b      	bne.n	9886 <prvAddCurrentTaskToDelayedList+0x3a>
    986e:	683b      	ldr	r3, [r7, #0]
    9870:	2b00      	cmp	r3, #0
    9872:	d008      	beq.n	9886 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9874:	4b1a      	ldr	r3, [pc, #104]	; (98e0 <prvAddCurrentTaskToDelayedList+0x94>)
    9876:	681b      	ldr	r3, [r3, #0]
    9878:	1d1a      	adds	r2, r3, #4
    987a:	4b1b      	ldr	r3, [pc, #108]	; (98e8 <prvAddCurrentTaskToDelayedList+0x9c>)
    987c:	0011      	movs	r1, r2
    987e:	0018      	movs	r0, r3
    9880:	4b1a      	ldr	r3, [pc, #104]	; (98ec <prvAddCurrentTaskToDelayedList+0xa0>)
    9882:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    9884:	e026      	b.n	98d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    9886:	68fa      	ldr	r2, [r7, #12]
    9888:	687b      	ldr	r3, [r7, #4]
    988a:	18d3      	adds	r3, r2, r3
    988c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    988e:	4b14      	ldr	r3, [pc, #80]	; (98e0 <prvAddCurrentTaskToDelayedList+0x94>)
    9890:	681b      	ldr	r3, [r3, #0]
    9892:	68ba      	ldr	r2, [r7, #8]
    9894:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    9896:	68ba      	ldr	r2, [r7, #8]
    9898:	68fb      	ldr	r3, [r7, #12]
    989a:	429a      	cmp	r2, r3
    989c:	d209      	bcs.n	98b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    989e:	4b14      	ldr	r3, [pc, #80]	; (98f0 <prvAddCurrentTaskToDelayedList+0xa4>)
    98a0:	681a      	ldr	r2, [r3, #0]
    98a2:	4b0f      	ldr	r3, [pc, #60]	; (98e0 <prvAddCurrentTaskToDelayedList+0x94>)
    98a4:	681b      	ldr	r3, [r3, #0]
    98a6:	3304      	adds	r3, #4
    98a8:	0019      	movs	r1, r3
    98aa:	0010      	movs	r0, r2
    98ac:	4b11      	ldr	r3, [pc, #68]	; (98f4 <prvAddCurrentTaskToDelayedList+0xa8>)
    98ae:	4798      	blx	r3
}
    98b0:	e010      	b.n	98d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    98b2:	4b11      	ldr	r3, [pc, #68]	; (98f8 <prvAddCurrentTaskToDelayedList+0xac>)
    98b4:	681a      	ldr	r2, [r3, #0]
    98b6:	4b0a      	ldr	r3, [pc, #40]	; (98e0 <prvAddCurrentTaskToDelayedList+0x94>)
    98b8:	681b      	ldr	r3, [r3, #0]
    98ba:	3304      	adds	r3, #4
    98bc:	0019      	movs	r1, r3
    98be:	0010      	movs	r0, r2
    98c0:	4b0c      	ldr	r3, [pc, #48]	; (98f4 <prvAddCurrentTaskToDelayedList+0xa8>)
    98c2:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    98c4:	4b0d      	ldr	r3, [pc, #52]	; (98fc <prvAddCurrentTaskToDelayedList+0xb0>)
    98c6:	681b      	ldr	r3, [r3, #0]
    98c8:	68ba      	ldr	r2, [r7, #8]
    98ca:	429a      	cmp	r2, r3
    98cc:	d202      	bcs.n	98d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    98ce:	4b0b      	ldr	r3, [pc, #44]	; (98fc <prvAddCurrentTaskToDelayedList+0xb0>)
    98d0:	68ba      	ldr	r2, [r7, #8]
    98d2:	601a      	str	r2, [r3, #0]
}
    98d4:	46c0      	nop			; (mov r8, r8)
    98d6:	46bd      	mov	sp, r7
    98d8:	b004      	add	sp, #16
    98da:	bd80      	pop	{r7, pc}
    98dc:	20004030 	.word	0x20004030
    98e0:	20003f54 	.word	0x20003f54
    98e4:	000064ab 	.word	0x000064ab
    98e8:	20004018 	.word	0x20004018
    98ec:	000063fb 	.word	0x000063fb
    98f0:	20003fe8 	.word	0x20003fe8
    98f4:	0000643f 	.word	0x0000643f
    98f8:	20003fe4 	.word	0x20003fe4
    98fc:	2000404c 	.word	0x2000404c

00009900 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    9900:	b590      	push	{r4, r7, lr}
    9902:	b085      	sub	sp, #20
    9904:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    9906:	2300      	movs	r3, #0
    9908:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    990a:	4b0e      	ldr	r3, [pc, #56]	; (9944 <xTimerCreateTimerTask+0x44>)
    990c:	4798      	blx	r3

	if( xTimerQueue != NULL )
    990e:	4b0e      	ldr	r3, [pc, #56]	; (9948 <xTimerCreateTimerTask+0x48>)
    9910:	681b      	ldr	r3, [r3, #0]
    9912:	2b00      	cmp	r3, #0
    9914:	d00b      	beq.n	992e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    9916:	490d      	ldr	r1, [pc, #52]	; (994c <xTimerCreateTimerTask+0x4c>)
    9918:	480d      	ldr	r0, [pc, #52]	; (9950 <xTimerCreateTimerTask+0x50>)
    991a:	4b0e      	ldr	r3, [pc, #56]	; (9954 <xTimerCreateTimerTask+0x54>)
    991c:	9301      	str	r3, [sp, #4]
    991e:	2302      	movs	r3, #2
    9920:	9300      	str	r3, [sp, #0]
    9922:	2300      	movs	r3, #0
    9924:	2280      	movs	r2, #128	; 0x80
    9926:	4c0c      	ldr	r4, [pc, #48]	; (9958 <xTimerCreateTimerTask+0x58>)
    9928:	47a0      	blx	r4
    992a:	0003      	movs	r3, r0
    992c:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    992e:	687b      	ldr	r3, [r7, #4]
    9930:	2b00      	cmp	r3, #0
    9932:	d101      	bne.n	9938 <xTimerCreateTimerTask+0x38>
    9934:	b672      	cpsid	i
    9936:	e7fe      	b.n	9936 <xTimerCreateTimerTask+0x36>
	return xReturn;
    9938:	687b      	ldr	r3, [r7, #4]
}
    993a:	0018      	movs	r0, r3
    993c:	46bd      	mov	sp, r7
    993e:	b003      	add	sp, #12
    9940:	bd90      	pop	{r4, r7, pc}
    9942:	46c0      	nop			; (mov r8, r8)
    9944:	00009e49 	.word	0x00009e49
    9948:	20004088 	.word	0x20004088
    994c:	00025210 	.word	0x00025210
    9950:	00009a81 	.word	0x00009a81
    9954:	2000408c 	.word	0x2000408c
    9958:	00008299 	.word	0x00008299

0000995c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    995c:	b590      	push	{r4, r7, lr}
    995e:	b089      	sub	sp, #36	; 0x24
    9960:	af00      	add	r7, sp, #0
    9962:	60f8      	str	r0, [r7, #12]
    9964:	60b9      	str	r1, [r7, #8]
    9966:	607a      	str	r2, [r7, #4]
    9968:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    996a:	2300      	movs	r3, #0
    996c:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    996e:	68fb      	ldr	r3, [r7, #12]
    9970:	2b00      	cmp	r3, #0
    9972:	d101      	bne.n	9978 <xTimerGenericCommand+0x1c>
    9974:	b672      	cpsid	i
    9976:	e7fe      	b.n	9976 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    9978:	4b1e      	ldr	r3, [pc, #120]	; (99f4 <xTimerGenericCommand+0x98>)
    997a:	681b      	ldr	r3, [r3, #0]
    997c:	2b00      	cmp	r3, #0
    997e:	d033      	beq.n	99e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    9980:	2310      	movs	r3, #16
    9982:	18fb      	adds	r3, r7, r3
    9984:	68ba      	ldr	r2, [r7, #8]
    9986:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    9988:	2310      	movs	r3, #16
    998a:	18fb      	adds	r3, r7, r3
    998c:	687a      	ldr	r2, [r7, #4]
    998e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    9990:	2310      	movs	r3, #16
    9992:	18fb      	adds	r3, r7, r3
    9994:	68fa      	ldr	r2, [r7, #12]
    9996:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    9998:	68bb      	ldr	r3, [r7, #8]
    999a:	2b05      	cmp	r3, #5
    999c:	dc1a      	bgt.n	99d4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    999e:	4b16      	ldr	r3, [pc, #88]	; (99f8 <xTimerGenericCommand+0x9c>)
    99a0:	4798      	blx	r3
    99a2:	0003      	movs	r3, r0
    99a4:	2b02      	cmp	r3, #2
    99a6:	d10a      	bne.n	99be <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    99a8:	4b12      	ldr	r3, [pc, #72]	; (99f4 <xTimerGenericCommand+0x98>)
    99aa:	6818      	ldr	r0, [r3, #0]
    99ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    99ae:	2310      	movs	r3, #16
    99b0:	18f9      	adds	r1, r7, r3
    99b2:	2300      	movs	r3, #0
    99b4:	4c11      	ldr	r4, [pc, #68]	; (99fc <xTimerGenericCommand+0xa0>)
    99b6:	47a0      	blx	r4
    99b8:	0003      	movs	r3, r0
    99ba:	61fb      	str	r3, [r7, #28]
    99bc:	e014      	b.n	99e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    99be:	4b0d      	ldr	r3, [pc, #52]	; (99f4 <xTimerGenericCommand+0x98>)
    99c0:	6818      	ldr	r0, [r3, #0]
    99c2:	2310      	movs	r3, #16
    99c4:	18f9      	adds	r1, r7, r3
    99c6:	2300      	movs	r3, #0
    99c8:	2200      	movs	r2, #0
    99ca:	4c0c      	ldr	r4, [pc, #48]	; (99fc <xTimerGenericCommand+0xa0>)
    99cc:	47a0      	blx	r4
    99ce:	0003      	movs	r3, r0
    99d0:	61fb      	str	r3, [r7, #28]
    99d2:	e009      	b.n	99e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    99d4:	4b07      	ldr	r3, [pc, #28]	; (99f4 <xTimerGenericCommand+0x98>)
    99d6:	6818      	ldr	r0, [r3, #0]
    99d8:	683a      	ldr	r2, [r7, #0]
    99da:	2310      	movs	r3, #16
    99dc:	18f9      	adds	r1, r7, r3
    99de:	2300      	movs	r3, #0
    99e0:	4c07      	ldr	r4, [pc, #28]	; (9a00 <xTimerGenericCommand+0xa4>)
    99e2:	47a0      	blx	r4
    99e4:	0003      	movs	r3, r0
    99e6:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    99e8:	69fb      	ldr	r3, [r7, #28]
}
    99ea:	0018      	movs	r0, r3
    99ec:	46bd      	mov	sp, r7
    99ee:	b009      	add	sp, #36	; 0x24
    99f0:	bd90      	pop	{r4, r7, pc}
    99f2:	46c0      	nop			; (mov r8, r8)
    99f4:	20004088 	.word	0x20004088
    99f8:	0000935d 	.word	0x0000935d
    99fc:	00006bd1 	.word	0x00006bd1
    9a00:	00007031 	.word	0x00007031

00009a04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    9a04:	b590      	push	{r4, r7, lr}
    9a06:	b087      	sub	sp, #28
    9a08:	af02      	add	r7, sp, #8
    9a0a:	6078      	str	r0, [r7, #4]
    9a0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    9a0e:	4b18      	ldr	r3, [pc, #96]	; (9a70 <prvProcessExpiredTimer+0x6c>)
    9a10:	681b      	ldr	r3, [r3, #0]
    9a12:	68db      	ldr	r3, [r3, #12]
    9a14:	68db      	ldr	r3, [r3, #12]
    9a16:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    9a18:	68fb      	ldr	r3, [r7, #12]
    9a1a:	3304      	adds	r3, #4
    9a1c:	0018      	movs	r0, r3
    9a1e:	4b15      	ldr	r3, [pc, #84]	; (9a74 <prvProcessExpiredTimer+0x70>)
    9a20:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    9a22:	68fb      	ldr	r3, [r7, #12]
    9a24:	69db      	ldr	r3, [r3, #28]
    9a26:	2b01      	cmp	r3, #1
    9a28:	d119      	bne.n	9a5e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    9a2a:	68fb      	ldr	r3, [r7, #12]
    9a2c:	699a      	ldr	r2, [r3, #24]
    9a2e:	687b      	ldr	r3, [r7, #4]
    9a30:	18d1      	adds	r1, r2, r3
    9a32:	687b      	ldr	r3, [r7, #4]
    9a34:	683a      	ldr	r2, [r7, #0]
    9a36:	68f8      	ldr	r0, [r7, #12]
    9a38:	4c0f      	ldr	r4, [pc, #60]	; (9a78 <prvProcessExpiredTimer+0x74>)
    9a3a:	47a0      	blx	r4
    9a3c:	1e03      	subs	r3, r0, #0
    9a3e:	d00e      	beq.n	9a5e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    9a40:	687a      	ldr	r2, [r7, #4]
    9a42:	68f8      	ldr	r0, [r7, #12]
    9a44:	2300      	movs	r3, #0
    9a46:	9300      	str	r3, [sp, #0]
    9a48:	2300      	movs	r3, #0
    9a4a:	2100      	movs	r1, #0
    9a4c:	4c0b      	ldr	r4, [pc, #44]	; (9a7c <prvProcessExpiredTimer+0x78>)
    9a4e:	47a0      	blx	r4
    9a50:	0003      	movs	r3, r0
    9a52:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    9a54:	68bb      	ldr	r3, [r7, #8]
    9a56:	2b00      	cmp	r3, #0
    9a58:	d101      	bne.n	9a5e <prvProcessExpiredTimer+0x5a>
    9a5a:	b672      	cpsid	i
    9a5c:	e7fe      	b.n	9a5c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    9a5e:	68fb      	ldr	r3, [r7, #12]
    9a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9a62:	68fa      	ldr	r2, [r7, #12]
    9a64:	0010      	movs	r0, r2
    9a66:	4798      	blx	r3
}
    9a68:	46c0      	nop			; (mov r8, r8)
    9a6a:	46bd      	mov	sp, r7
    9a6c:	b005      	add	sp, #20
    9a6e:	bd90      	pop	{r4, r7, pc}
    9a70:	20004080 	.word	0x20004080
    9a74:	000064ab 	.word	0x000064ab
    9a78:	00009be9 	.word	0x00009be9
    9a7c:	0000995d 	.word	0x0000995d

00009a80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    9a80:	b580      	push	{r7, lr}
    9a82:	b084      	sub	sp, #16
    9a84:	af00      	add	r7, sp, #0
    9a86:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
    9a88:	4b08      	ldr	r3, [pc, #32]	; (9aac <prvTimerTask+0x2c>)
    9a8a:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    9a8c:	2308      	movs	r3, #8
    9a8e:	18fb      	adds	r3, r7, r3
    9a90:	0018      	movs	r0, r3
    9a92:	4b07      	ldr	r3, [pc, #28]	; (9ab0 <prvTimerTask+0x30>)
    9a94:	4798      	blx	r3
    9a96:	0003      	movs	r3, r0
    9a98:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    9a9a:	68ba      	ldr	r2, [r7, #8]
    9a9c:	68fb      	ldr	r3, [r7, #12]
    9a9e:	0011      	movs	r1, r2
    9aa0:	0018      	movs	r0, r3
    9aa2:	4b04      	ldr	r3, [pc, #16]	; (9ab4 <prvTimerTask+0x34>)
    9aa4:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    9aa6:	4b04      	ldr	r3, [pc, #16]	; (9ab8 <prvTimerTask+0x38>)
    9aa8:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    9aaa:	e7ef      	b.n	9a8c <prvTimerTask+0xc>
    9aac:	0001ed7d 	.word	0x0001ed7d
    9ab0:	00009b61 	.word	0x00009b61
    9ab4:	00009abd 	.word	0x00009abd
    9ab8:	00009c71 	.word	0x00009c71

00009abc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    9abc:	b580      	push	{r7, lr}
    9abe:	b084      	sub	sp, #16
    9ac0:	af00      	add	r7, sp, #0
    9ac2:	6078      	str	r0, [r7, #4]
    9ac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    9ac6:	4b1e      	ldr	r3, [pc, #120]	; (9b40 <prvProcessTimerOrBlockTask+0x84>)
    9ac8:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    9aca:	2308      	movs	r3, #8
    9acc:	18fb      	adds	r3, r7, r3
    9ace:	0018      	movs	r0, r3
    9ad0:	4b1c      	ldr	r3, [pc, #112]	; (9b44 <prvProcessTimerOrBlockTask+0x88>)
    9ad2:	4798      	blx	r3
    9ad4:	0003      	movs	r3, r0
    9ad6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    9ad8:	68bb      	ldr	r3, [r7, #8]
    9ada:	2b00      	cmp	r3, #0
    9adc:	d129      	bne.n	9b32 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    9ade:	683b      	ldr	r3, [r7, #0]
    9ae0:	2b00      	cmp	r3, #0
    9ae2:	d10c      	bne.n	9afe <prvProcessTimerOrBlockTask+0x42>
    9ae4:	687a      	ldr	r2, [r7, #4]
    9ae6:	68fb      	ldr	r3, [r7, #12]
    9ae8:	429a      	cmp	r2, r3
    9aea:	d808      	bhi.n	9afe <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    9aec:	4b16      	ldr	r3, [pc, #88]	; (9b48 <prvProcessTimerOrBlockTask+0x8c>)
    9aee:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    9af0:	68fa      	ldr	r2, [r7, #12]
    9af2:	687b      	ldr	r3, [r7, #4]
    9af4:	0011      	movs	r1, r2
    9af6:	0018      	movs	r0, r3
    9af8:	4b14      	ldr	r3, [pc, #80]	; (9b4c <prvProcessTimerOrBlockTask+0x90>)
    9afa:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    9afc:	e01b      	b.n	9b36 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
    9afe:	683b      	ldr	r3, [r7, #0]
    9b00:	2b00      	cmp	r3, #0
    9b02:	d006      	beq.n	9b12 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    9b04:	4b12      	ldr	r3, [pc, #72]	; (9b50 <prvProcessTimerOrBlockTask+0x94>)
    9b06:	681b      	ldr	r3, [r3, #0]
    9b08:	681b      	ldr	r3, [r3, #0]
    9b0a:	425a      	negs	r2, r3
    9b0c:	4153      	adcs	r3, r2
    9b0e:	b2db      	uxtb	r3, r3
    9b10:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    9b12:	4b10      	ldr	r3, [pc, #64]	; (9b54 <prvProcessTimerOrBlockTask+0x98>)
    9b14:	6818      	ldr	r0, [r3, #0]
    9b16:	687a      	ldr	r2, [r7, #4]
    9b18:	68fb      	ldr	r3, [r7, #12]
    9b1a:	1ad3      	subs	r3, r2, r3
    9b1c:	683a      	ldr	r2, [r7, #0]
    9b1e:	0019      	movs	r1, r3
    9b20:	4b0d      	ldr	r3, [pc, #52]	; (9b58 <prvProcessTimerOrBlockTask+0x9c>)
    9b22:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    9b24:	4b08      	ldr	r3, [pc, #32]	; (9b48 <prvProcessTimerOrBlockTask+0x8c>)
    9b26:	4798      	blx	r3
    9b28:	1e03      	subs	r3, r0, #0
    9b2a:	d104      	bne.n	9b36 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    9b2c:	4b0b      	ldr	r3, [pc, #44]	; (9b5c <prvProcessTimerOrBlockTask+0xa0>)
    9b2e:	4798      	blx	r3
}
    9b30:	e001      	b.n	9b36 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
    9b32:	4b05      	ldr	r3, [pc, #20]	; (9b48 <prvProcessTimerOrBlockTask+0x8c>)
    9b34:	4798      	blx	r3
}
    9b36:	46c0      	nop			; (mov r8, r8)
    9b38:	46bd      	mov	sp, r7
    9b3a:	b004      	add	sp, #16
    9b3c:	bd80      	pop	{r7, pc}
    9b3e:	46c0      	nop			; (mov r8, r8)
    9b40:	000088f5 	.word	0x000088f5
    9b44:	00009ba1 	.word	0x00009ba1
    9b48:	0000890d 	.word	0x0000890d
    9b4c:	00009a05 	.word	0x00009a05
    9b50:	20004084 	.word	0x20004084
    9b54:	20004088 	.word	0x20004088
    9b58:	00008095 	.word	0x00008095
    9b5c:	00006621 	.word	0x00006621

00009b60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    9b60:	b580      	push	{r7, lr}
    9b62:	b084      	sub	sp, #16
    9b64:	af00      	add	r7, sp, #0
    9b66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    9b68:	4b0c      	ldr	r3, [pc, #48]	; (9b9c <prvGetNextExpireTime+0x3c>)
    9b6a:	681b      	ldr	r3, [r3, #0]
    9b6c:	681b      	ldr	r3, [r3, #0]
    9b6e:	425a      	negs	r2, r3
    9b70:	4153      	adcs	r3, r2
    9b72:	b2db      	uxtb	r3, r3
    9b74:	001a      	movs	r2, r3
    9b76:	687b      	ldr	r3, [r7, #4]
    9b78:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    9b7a:	687b      	ldr	r3, [r7, #4]
    9b7c:	681b      	ldr	r3, [r3, #0]
    9b7e:	2b00      	cmp	r3, #0
    9b80:	d105      	bne.n	9b8e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    9b82:	4b06      	ldr	r3, [pc, #24]	; (9b9c <prvGetNextExpireTime+0x3c>)
    9b84:	681b      	ldr	r3, [r3, #0]
    9b86:	68db      	ldr	r3, [r3, #12]
    9b88:	681b      	ldr	r3, [r3, #0]
    9b8a:	60fb      	str	r3, [r7, #12]
    9b8c:	e001      	b.n	9b92 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    9b8e:	2300      	movs	r3, #0
    9b90:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    9b92:	68fb      	ldr	r3, [r7, #12]
}
    9b94:	0018      	movs	r0, r3
    9b96:	46bd      	mov	sp, r7
    9b98:	b004      	add	sp, #16
    9b9a:	bd80      	pop	{r7, pc}
    9b9c:	20004080 	.word	0x20004080

00009ba0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    9ba0:	b580      	push	{r7, lr}
    9ba2:	b084      	sub	sp, #16
    9ba4:	af00      	add	r7, sp, #0
    9ba6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    9ba8:	4b0c      	ldr	r3, [pc, #48]	; (9bdc <prvSampleTimeNow+0x3c>)
    9baa:	4798      	blx	r3
    9bac:	0003      	movs	r3, r0
    9bae:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    9bb0:	4b0b      	ldr	r3, [pc, #44]	; (9be0 <prvSampleTimeNow+0x40>)
    9bb2:	681b      	ldr	r3, [r3, #0]
    9bb4:	68fa      	ldr	r2, [r7, #12]
    9bb6:	429a      	cmp	r2, r3
    9bb8:	d205      	bcs.n	9bc6 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    9bba:	4b0a      	ldr	r3, [pc, #40]	; (9be4 <prvSampleTimeNow+0x44>)
    9bbc:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    9bbe:	687b      	ldr	r3, [r7, #4]
    9bc0:	2201      	movs	r2, #1
    9bc2:	601a      	str	r2, [r3, #0]
    9bc4:	e002      	b.n	9bcc <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    9bc6:	687b      	ldr	r3, [r7, #4]
    9bc8:	2200      	movs	r2, #0
    9bca:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    9bcc:	4b04      	ldr	r3, [pc, #16]	; (9be0 <prvSampleTimeNow+0x40>)
    9bce:	68fa      	ldr	r2, [r7, #12]
    9bd0:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    9bd2:	68fb      	ldr	r3, [r7, #12]
}
    9bd4:	0018      	movs	r0, r3
    9bd6:	46bd      	mov	sp, r7
    9bd8:	b004      	add	sp, #16
    9bda:	bd80      	pop	{r7, pc}
    9bdc:	00008a7d 	.word	0x00008a7d
    9be0:	20004090 	.word	0x20004090
    9be4:	00009d89 	.word	0x00009d89

00009be8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    9be8:	b580      	push	{r7, lr}
    9bea:	b086      	sub	sp, #24
    9bec:	af00      	add	r7, sp, #0
    9bee:	60f8      	str	r0, [r7, #12]
    9bf0:	60b9      	str	r1, [r7, #8]
    9bf2:	607a      	str	r2, [r7, #4]
    9bf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    9bf6:	2300      	movs	r3, #0
    9bf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    9bfa:	68fb      	ldr	r3, [r7, #12]
    9bfc:	68ba      	ldr	r2, [r7, #8]
    9bfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    9c00:	68fb      	ldr	r3, [r7, #12]
    9c02:	68fa      	ldr	r2, [r7, #12]
    9c04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    9c06:	68ba      	ldr	r2, [r7, #8]
    9c08:	687b      	ldr	r3, [r7, #4]
    9c0a:	429a      	cmp	r2, r3
    9c0c:	d812      	bhi.n	9c34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9c0e:	687a      	ldr	r2, [r7, #4]
    9c10:	683b      	ldr	r3, [r7, #0]
    9c12:	1ad2      	subs	r2, r2, r3
    9c14:	68fb      	ldr	r3, [r7, #12]
    9c16:	699b      	ldr	r3, [r3, #24]
    9c18:	429a      	cmp	r2, r3
    9c1a:	d302      	bcc.n	9c22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    9c1c:	2301      	movs	r3, #1
    9c1e:	617b      	str	r3, [r7, #20]
    9c20:	e01b      	b.n	9c5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    9c22:	4b10      	ldr	r3, [pc, #64]	; (9c64 <prvInsertTimerInActiveList+0x7c>)
    9c24:	681a      	ldr	r2, [r3, #0]
    9c26:	68fb      	ldr	r3, [r7, #12]
    9c28:	3304      	adds	r3, #4
    9c2a:	0019      	movs	r1, r3
    9c2c:	0010      	movs	r0, r2
    9c2e:	4b0e      	ldr	r3, [pc, #56]	; (9c68 <prvInsertTimerInActiveList+0x80>)
    9c30:	4798      	blx	r3
    9c32:	e012      	b.n	9c5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    9c34:	687a      	ldr	r2, [r7, #4]
    9c36:	683b      	ldr	r3, [r7, #0]
    9c38:	429a      	cmp	r2, r3
    9c3a:	d206      	bcs.n	9c4a <prvInsertTimerInActiveList+0x62>
    9c3c:	68ba      	ldr	r2, [r7, #8]
    9c3e:	683b      	ldr	r3, [r7, #0]
    9c40:	429a      	cmp	r2, r3
    9c42:	d302      	bcc.n	9c4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    9c44:	2301      	movs	r3, #1
    9c46:	617b      	str	r3, [r7, #20]
    9c48:	e007      	b.n	9c5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    9c4a:	4b08      	ldr	r3, [pc, #32]	; (9c6c <prvInsertTimerInActiveList+0x84>)
    9c4c:	681a      	ldr	r2, [r3, #0]
    9c4e:	68fb      	ldr	r3, [r7, #12]
    9c50:	3304      	adds	r3, #4
    9c52:	0019      	movs	r1, r3
    9c54:	0010      	movs	r0, r2
    9c56:	4b04      	ldr	r3, [pc, #16]	; (9c68 <prvInsertTimerInActiveList+0x80>)
    9c58:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    9c5a:	697b      	ldr	r3, [r7, #20]
}
    9c5c:	0018      	movs	r0, r3
    9c5e:	46bd      	mov	sp, r7
    9c60:	b006      	add	sp, #24
    9c62:	bd80      	pop	{r7, pc}
    9c64:	20004084 	.word	0x20004084
    9c68:	0000643f 	.word	0x0000643f
    9c6c:	20004080 	.word	0x20004080

00009c70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    9c70:	b590      	push	{r4, r7, lr}
    9c72:	b08b      	sub	sp, #44	; 0x2c
    9c74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    9c76:	e068      	b.n	9d4a <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    9c78:	2308      	movs	r3, #8
    9c7a:	18fb      	adds	r3, r7, r3
    9c7c:	681b      	ldr	r3, [r3, #0]
    9c7e:	2b00      	cmp	r3, #0
    9c80:	db63      	blt.n	9d4a <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    9c82:	2308      	movs	r3, #8
    9c84:	18fb      	adds	r3, r7, r3
    9c86:	689b      	ldr	r3, [r3, #8]
    9c88:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    9c8a:	69fb      	ldr	r3, [r7, #28]
    9c8c:	695b      	ldr	r3, [r3, #20]
    9c8e:	2b00      	cmp	r3, #0
    9c90:	d004      	beq.n	9c9c <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    9c92:	69fb      	ldr	r3, [r7, #28]
    9c94:	3304      	adds	r3, #4
    9c96:	0018      	movs	r0, r3
    9c98:	4b33      	ldr	r3, [pc, #204]	; (9d68 <prvProcessReceivedCommands+0xf8>)
    9c9a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    9c9c:	1d3b      	adds	r3, r7, #4
    9c9e:	0018      	movs	r0, r3
    9ca0:	4b32      	ldr	r3, [pc, #200]	; (9d6c <prvProcessReceivedCommands+0xfc>)
    9ca2:	4798      	blx	r3
    9ca4:	0003      	movs	r3, r0
    9ca6:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    9ca8:	2308      	movs	r3, #8
    9caa:	18fb      	adds	r3, r7, r3
    9cac:	681b      	ldr	r3, [r3, #0]
    9cae:	2b09      	cmp	r3, #9
    9cb0:	d84a      	bhi.n	9d48 <prvProcessReceivedCommands+0xd8>
    9cb2:	009a      	lsls	r2, r3, #2
    9cb4:	4b2e      	ldr	r3, [pc, #184]	; (9d70 <prvProcessReceivedCommands+0x100>)
    9cb6:	18d3      	adds	r3, r2, r3
    9cb8:	681b      	ldr	r3, [r3, #0]
    9cba:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    9cbc:	2308      	movs	r3, #8
    9cbe:	18fb      	adds	r3, r7, r3
    9cc0:	685a      	ldr	r2, [r3, #4]
    9cc2:	69fb      	ldr	r3, [r7, #28]
    9cc4:	699b      	ldr	r3, [r3, #24]
    9cc6:	18d1      	adds	r1, r2, r3
    9cc8:	2308      	movs	r3, #8
    9cca:	18fb      	adds	r3, r7, r3
    9ccc:	685b      	ldr	r3, [r3, #4]
    9cce:	69ba      	ldr	r2, [r7, #24]
    9cd0:	69f8      	ldr	r0, [r7, #28]
    9cd2:	4c28      	ldr	r4, [pc, #160]	; (9d74 <prvProcessReceivedCommands+0x104>)
    9cd4:	47a0      	blx	r4
    9cd6:	1e03      	subs	r3, r0, #0
    9cd8:	d037      	beq.n	9d4a <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    9cda:	69fb      	ldr	r3, [r7, #28]
    9cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9cde:	69fa      	ldr	r2, [r7, #28]
    9ce0:	0010      	movs	r0, r2
    9ce2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    9ce4:	69fb      	ldr	r3, [r7, #28]
    9ce6:	69db      	ldr	r3, [r3, #28]
    9ce8:	2b01      	cmp	r3, #1
    9cea:	d12e      	bne.n	9d4a <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    9cec:	2308      	movs	r3, #8
    9cee:	18fb      	adds	r3, r7, r3
    9cf0:	685a      	ldr	r2, [r3, #4]
    9cf2:	69fb      	ldr	r3, [r7, #28]
    9cf4:	699b      	ldr	r3, [r3, #24]
    9cf6:	18d2      	adds	r2, r2, r3
    9cf8:	69f8      	ldr	r0, [r7, #28]
    9cfa:	2300      	movs	r3, #0
    9cfc:	9300      	str	r3, [sp, #0]
    9cfe:	2300      	movs	r3, #0
    9d00:	2100      	movs	r1, #0
    9d02:	4c1d      	ldr	r4, [pc, #116]	; (9d78 <prvProcessReceivedCommands+0x108>)
    9d04:	47a0      	blx	r4
    9d06:	0003      	movs	r3, r0
    9d08:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    9d0a:	697b      	ldr	r3, [r7, #20]
    9d0c:	2b00      	cmp	r3, #0
    9d0e:	d11c      	bne.n	9d4a <prvProcessReceivedCommands+0xda>
    9d10:	b672      	cpsid	i
    9d12:	e7fe      	b.n	9d12 <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    9d14:	2308      	movs	r3, #8
    9d16:	18fb      	adds	r3, r7, r3
    9d18:	685a      	ldr	r2, [r3, #4]
    9d1a:	69fb      	ldr	r3, [r7, #28]
    9d1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    9d1e:	69fb      	ldr	r3, [r7, #28]
    9d20:	699b      	ldr	r3, [r3, #24]
    9d22:	2b00      	cmp	r3, #0
    9d24:	d101      	bne.n	9d2a <prvProcessReceivedCommands+0xba>
    9d26:	b672      	cpsid	i
    9d28:	e7fe      	b.n	9d28 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    9d2a:	69fb      	ldr	r3, [r7, #28]
    9d2c:	699a      	ldr	r2, [r3, #24]
    9d2e:	69bb      	ldr	r3, [r7, #24]
    9d30:	18d1      	adds	r1, r2, r3
    9d32:	69bb      	ldr	r3, [r7, #24]
    9d34:	69ba      	ldr	r2, [r7, #24]
    9d36:	69f8      	ldr	r0, [r7, #28]
    9d38:	4c0e      	ldr	r4, [pc, #56]	; (9d74 <prvProcessReceivedCommands+0x104>)
    9d3a:	47a0      	blx	r4
					break;
    9d3c:	e005      	b.n	9d4a <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    9d3e:	69fb      	ldr	r3, [r7, #28]
    9d40:	0018      	movs	r0, r3
    9d42:	4b0e      	ldr	r3, [pc, #56]	; (9d7c <prvProcessReceivedCommands+0x10c>)
    9d44:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    9d46:	e000      	b.n	9d4a <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    9d48:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    9d4a:	4b0d      	ldr	r3, [pc, #52]	; (9d80 <prvProcessReceivedCommands+0x110>)
    9d4c:	681b      	ldr	r3, [r3, #0]
    9d4e:	2208      	movs	r2, #8
    9d50:	18b9      	adds	r1, r7, r2
    9d52:	2200      	movs	r2, #0
    9d54:	0018      	movs	r0, r3
    9d56:	4b0b      	ldr	r3, [pc, #44]	; (9d84 <prvProcessReceivedCommands+0x114>)
    9d58:	4798      	blx	r3
    9d5a:	1e03      	subs	r3, r0, #0
    9d5c:	d18c      	bne.n	9c78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    9d5e:	46c0      	nop			; (mov r8, r8)
    9d60:	46bd      	mov	sp, r7
    9d62:	b009      	add	sp, #36	; 0x24
    9d64:	bd90      	pop	{r4, r7, pc}
    9d66:	46c0      	nop			; (mov r8, r8)
    9d68:	000064ab 	.word	0x000064ab
    9d6c:	00009ba1 	.word	0x00009ba1
    9d70:	00025218 	.word	0x00025218
    9d74:	00009be9 	.word	0x00009be9
    9d78:	0000995d 	.word	0x0000995d
    9d7c:	00006835 	.word	0x00006835
    9d80:	20004088 	.word	0x20004088
    9d84:	00007489 	.word	0x00007489

00009d88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    9d88:	b590      	push	{r4, r7, lr}
    9d8a:	b089      	sub	sp, #36	; 0x24
    9d8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    9d8e:	e03e      	b.n	9e0e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    9d90:	4b28      	ldr	r3, [pc, #160]	; (9e34 <prvSwitchTimerLists+0xac>)
    9d92:	681b      	ldr	r3, [r3, #0]
    9d94:	68db      	ldr	r3, [r3, #12]
    9d96:	681b      	ldr	r3, [r3, #0]
    9d98:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    9d9a:	4b26      	ldr	r3, [pc, #152]	; (9e34 <prvSwitchTimerLists+0xac>)
    9d9c:	681b      	ldr	r3, [r3, #0]
    9d9e:	68db      	ldr	r3, [r3, #12]
    9da0:	68db      	ldr	r3, [r3, #12]
    9da2:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    9da4:	693b      	ldr	r3, [r7, #16]
    9da6:	3304      	adds	r3, #4
    9da8:	0018      	movs	r0, r3
    9daa:	4b23      	ldr	r3, [pc, #140]	; (9e38 <prvSwitchTimerLists+0xb0>)
    9dac:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    9dae:	693b      	ldr	r3, [r7, #16]
    9db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9db2:	693a      	ldr	r2, [r7, #16]
    9db4:	0010      	movs	r0, r2
    9db6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    9db8:	693b      	ldr	r3, [r7, #16]
    9dba:	69db      	ldr	r3, [r3, #28]
    9dbc:	2b01      	cmp	r3, #1
    9dbe:	d126      	bne.n	9e0e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    9dc0:	693b      	ldr	r3, [r7, #16]
    9dc2:	699a      	ldr	r2, [r3, #24]
    9dc4:	697b      	ldr	r3, [r7, #20]
    9dc6:	18d3      	adds	r3, r2, r3
    9dc8:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    9dca:	68fa      	ldr	r2, [r7, #12]
    9dcc:	697b      	ldr	r3, [r7, #20]
    9dce:	429a      	cmp	r2, r3
    9dd0:	d90e      	bls.n	9df0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    9dd2:	693b      	ldr	r3, [r7, #16]
    9dd4:	68fa      	ldr	r2, [r7, #12]
    9dd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    9dd8:	693b      	ldr	r3, [r7, #16]
    9dda:	693a      	ldr	r2, [r7, #16]
    9ddc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    9dde:	4b15      	ldr	r3, [pc, #84]	; (9e34 <prvSwitchTimerLists+0xac>)
    9de0:	681a      	ldr	r2, [r3, #0]
    9de2:	693b      	ldr	r3, [r7, #16]
    9de4:	3304      	adds	r3, #4
    9de6:	0019      	movs	r1, r3
    9de8:	0010      	movs	r0, r2
    9dea:	4b14      	ldr	r3, [pc, #80]	; (9e3c <prvSwitchTimerLists+0xb4>)
    9dec:	4798      	blx	r3
    9dee:	e00e      	b.n	9e0e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    9df0:	697a      	ldr	r2, [r7, #20]
    9df2:	6938      	ldr	r0, [r7, #16]
    9df4:	2300      	movs	r3, #0
    9df6:	9300      	str	r3, [sp, #0]
    9df8:	2300      	movs	r3, #0
    9dfa:	2100      	movs	r1, #0
    9dfc:	4c10      	ldr	r4, [pc, #64]	; (9e40 <prvSwitchTimerLists+0xb8>)
    9dfe:	47a0      	blx	r4
    9e00:	0003      	movs	r3, r0
    9e02:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    9e04:	68bb      	ldr	r3, [r7, #8]
    9e06:	2b00      	cmp	r3, #0
    9e08:	d101      	bne.n	9e0e <prvSwitchTimerLists+0x86>
    9e0a:	b672      	cpsid	i
    9e0c:	e7fe      	b.n	9e0c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    9e0e:	4b09      	ldr	r3, [pc, #36]	; (9e34 <prvSwitchTimerLists+0xac>)
    9e10:	681b      	ldr	r3, [r3, #0]
    9e12:	681b      	ldr	r3, [r3, #0]
    9e14:	2b00      	cmp	r3, #0
    9e16:	d1bb      	bne.n	9d90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    9e18:	4b06      	ldr	r3, [pc, #24]	; (9e34 <prvSwitchTimerLists+0xac>)
    9e1a:	681b      	ldr	r3, [r3, #0]
    9e1c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    9e1e:	4b09      	ldr	r3, [pc, #36]	; (9e44 <prvSwitchTimerLists+0xbc>)
    9e20:	681a      	ldr	r2, [r3, #0]
    9e22:	4b04      	ldr	r3, [pc, #16]	; (9e34 <prvSwitchTimerLists+0xac>)
    9e24:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    9e26:	4b07      	ldr	r3, [pc, #28]	; (9e44 <prvSwitchTimerLists+0xbc>)
    9e28:	687a      	ldr	r2, [r7, #4]
    9e2a:	601a      	str	r2, [r3, #0]
}
    9e2c:	46c0      	nop			; (mov r8, r8)
    9e2e:	46bd      	mov	sp, r7
    9e30:	b007      	add	sp, #28
    9e32:	bd90      	pop	{r4, r7, pc}
    9e34:	20004080 	.word	0x20004080
    9e38:	000064ab 	.word	0x000064ab
    9e3c:	0000643f 	.word	0x0000643f
    9e40:	0000995d 	.word	0x0000995d
    9e44:	20004084 	.word	0x20004084

00009e48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    9e48:	b580      	push	{r7, lr}
    9e4a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    9e4c:	4b10      	ldr	r3, [pc, #64]	; (9e90 <prvCheckForValidListAndQueue+0x48>)
    9e4e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    9e50:	4b10      	ldr	r3, [pc, #64]	; (9e94 <prvCheckForValidListAndQueue+0x4c>)
    9e52:	681b      	ldr	r3, [r3, #0]
    9e54:	2b00      	cmp	r3, #0
    9e56:	d115      	bne.n	9e84 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    9e58:	4b0f      	ldr	r3, [pc, #60]	; (9e98 <prvCheckForValidListAndQueue+0x50>)
    9e5a:	0018      	movs	r0, r3
    9e5c:	4b0f      	ldr	r3, [pc, #60]	; (9e9c <prvCheckForValidListAndQueue+0x54>)
    9e5e:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    9e60:	4b0f      	ldr	r3, [pc, #60]	; (9ea0 <prvCheckForValidListAndQueue+0x58>)
    9e62:	0018      	movs	r0, r3
    9e64:	4b0d      	ldr	r3, [pc, #52]	; (9e9c <prvCheckForValidListAndQueue+0x54>)
    9e66:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    9e68:	4b0e      	ldr	r3, [pc, #56]	; (9ea4 <prvCheckForValidListAndQueue+0x5c>)
    9e6a:	4a0b      	ldr	r2, [pc, #44]	; (9e98 <prvCheckForValidListAndQueue+0x50>)
    9e6c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    9e6e:	4b0e      	ldr	r3, [pc, #56]	; (9ea8 <prvCheckForValidListAndQueue+0x60>)
    9e70:	4a0b      	ldr	r2, [pc, #44]	; (9ea0 <prvCheckForValidListAndQueue+0x58>)
    9e72:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    9e74:	2200      	movs	r2, #0
    9e76:	210c      	movs	r1, #12
    9e78:	2005      	movs	r0, #5
    9e7a:	4b0c      	ldr	r3, [pc, #48]	; (9eac <prvCheckForValidListAndQueue+0x64>)
    9e7c:	4798      	blx	r3
    9e7e:	0002      	movs	r2, r0
    9e80:	4b04      	ldr	r3, [pc, #16]	; (9e94 <prvCheckForValidListAndQueue+0x4c>)
    9e82:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    9e84:	4b0a      	ldr	r3, [pc, #40]	; (9eb0 <prvCheckForValidListAndQueue+0x68>)
    9e86:	4798      	blx	r3
}
    9e88:	46c0      	nop			; (mov r8, r8)
    9e8a:	46bd      	mov	sp, r7
    9e8c:	bd80      	pop	{r7, pc}
    9e8e:	46c0      	nop			; (mov r8, r8)
    9e90:	00006639 	.word	0x00006639
    9e94:	20004088 	.word	0x20004088
    9e98:	20004058 	.word	0x20004058
    9e9c:	000063a9 	.word	0x000063a9
    9ea0:	2000406c 	.word	0x2000406c
    9ea4:	20004080 	.word	0x20004080
    9ea8:	20004084 	.word	0x20004084
    9eac:	00006929 	.word	0x00006929
    9eb0:	0000665d 	.word	0x0000665d

00009eb4 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    9eb4:	b580      	push	{r7, lr}
    9eb6:	b082      	sub	sp, #8
    9eb8:	af00      	add	r7, sp, #0
    9eba:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
    9ebc:	687b      	ldr	r3, [r7, #4]
    9ebe:	7c1b      	ldrb	r3, [r3, #16]
    9ec0:	2b00      	cmp	r3, #0
    9ec2:	d00b      	beq.n	9edc <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    9ec4:	687b      	ldr	r3, [r7, #4]
    9ec6:	689b      	ldr	r3, [r3, #8]
    9ec8:	1c5a      	adds	r2, r3, #1
    9eca:	687b      	ldr	r3, [r7, #4]
    9ecc:	68d9      	ldr	r1, [r3, #12]
    9ece:	4b10      	ldr	r3, [pc, #64]	; (9f10 <advance_pointer+0x5c>)
    9ed0:	0010      	movs	r0, r2
    9ed2:	4798      	blx	r3
    9ed4:	000b      	movs	r3, r1
    9ed6:	001a      	movs	r2, r3
    9ed8:	687b      	ldr	r3, [r7, #4]
    9eda:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    9edc:	687b      	ldr	r3, [r7, #4]
    9ede:	685b      	ldr	r3, [r3, #4]
    9ee0:	1c5a      	adds	r2, r3, #1
    9ee2:	687b      	ldr	r3, [r7, #4]
    9ee4:	68d9      	ldr	r1, [r3, #12]
    9ee6:	4b0a      	ldr	r3, [pc, #40]	; (9f10 <advance_pointer+0x5c>)
    9ee8:	0010      	movs	r0, r2
    9eea:	4798      	blx	r3
    9eec:	000b      	movs	r3, r1
    9eee:	001a      	movs	r2, r3
    9ef0:	687b      	ldr	r3, [r7, #4]
    9ef2:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    9ef4:	687b      	ldr	r3, [r7, #4]
    9ef6:	685a      	ldr	r2, [r3, #4]
    9ef8:	687b      	ldr	r3, [r7, #4]
    9efa:	689b      	ldr	r3, [r3, #8]
    9efc:	1ad3      	subs	r3, r2, r3
    9efe:	425a      	negs	r2, r3
    9f00:	4153      	adcs	r3, r2
    9f02:	b2da      	uxtb	r2, r3
    9f04:	687b      	ldr	r3, [r7, #4]
    9f06:	741a      	strb	r2, [r3, #16]
 }
    9f08:	46c0      	nop			; (mov r8, r8)
    9f0a:	46bd      	mov	sp, r7
    9f0c:	b002      	add	sp, #8
    9f0e:	bd80      	pop	{r7, pc}
    9f10:	0001f1dd 	.word	0x0001f1dd

00009f14 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
    9f14:	b580      	push	{r7, lr}
    9f16:	b082      	sub	sp, #8
    9f18:	af00      	add	r7, sp, #0
    9f1a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
    9f1c:	687b      	ldr	r3, [r7, #4]
    9f1e:	2200      	movs	r2, #0
    9f20:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    9f22:	687b      	ldr	r3, [r7, #4]
    9f24:	689b      	ldr	r3, [r3, #8]
    9f26:	1c5a      	adds	r2, r3, #1
    9f28:	687b      	ldr	r3, [r7, #4]
    9f2a:	68d9      	ldr	r1, [r3, #12]
    9f2c:	4b05      	ldr	r3, [pc, #20]	; (9f44 <retreat_pointer+0x30>)
    9f2e:	0010      	movs	r0, r2
    9f30:	4798      	blx	r3
    9f32:	000b      	movs	r3, r1
    9f34:	001a      	movs	r2, r3
    9f36:	687b      	ldr	r3, [r7, #4]
    9f38:	609a      	str	r2, [r3, #8]
 }
    9f3a:	46c0      	nop			; (mov r8, r8)
    9f3c:	46bd      	mov	sp, r7
    9f3e:	b002      	add	sp, #8
    9f40:	bd80      	pop	{r7, pc}
    9f42:	46c0      	nop			; (mov r8, r8)
    9f44:	0001f1dd 	.word	0x0001f1dd

00009f48 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    9f48:	b580      	push	{r7, lr}
    9f4a:	b084      	sub	sp, #16
    9f4c:	af00      	add	r7, sp, #0
    9f4e:	6078      	str	r0, [r7, #4]
    9f50:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    9f52:	2014      	movs	r0, #20
    9f54:	4b09      	ldr	r3, [pc, #36]	; (9f7c <circular_buf_init+0x34>)
    9f56:	4798      	blx	r3
    9f58:	0003      	movs	r3, r0
    9f5a:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    9f5c:	68fb      	ldr	r3, [r7, #12]
    9f5e:	687a      	ldr	r2, [r7, #4]
    9f60:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
    9f62:	68fb      	ldr	r3, [r7, #12]
    9f64:	683a      	ldr	r2, [r7, #0]
    9f66:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
    9f68:	68fb      	ldr	r3, [r7, #12]
    9f6a:	0018      	movs	r0, r3
    9f6c:	4b04      	ldr	r3, [pc, #16]	; (9f80 <circular_buf_init+0x38>)
    9f6e:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
    9f70:	68fb      	ldr	r3, [r7, #12]
 }
    9f72:	0018      	movs	r0, r3
    9f74:	46bd      	mov	sp, r7
    9f76:	b004      	add	sp, #16
    9f78:	bd80      	pop	{r7, pc}
    9f7a:	46c0      	nop			; (mov r8, r8)
    9f7c:	00020d2d 	.word	0x00020d2d
    9f80:	00009f85 	.word	0x00009f85

00009f84 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
    9f84:	b580      	push	{r7, lr}
    9f86:	b082      	sub	sp, #8
    9f88:	af00      	add	r7, sp, #0
    9f8a:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
    9f8c:	687b      	ldr	r3, [r7, #4]
    9f8e:	2200      	movs	r2, #0
    9f90:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
    9f92:	687b      	ldr	r3, [r7, #4]
    9f94:	2200      	movs	r2, #0
    9f96:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
    9f98:	687b      	ldr	r3, [r7, #4]
    9f9a:	2200      	movs	r2, #0
    9f9c:	741a      	strb	r2, [r3, #16]
 }
    9f9e:	46c0      	nop			; (mov r8, r8)
    9fa0:	46bd      	mov	sp, r7
    9fa2:	b002      	add	sp, #8
    9fa4:	bd80      	pop	{r7, pc}
	...

00009fa8 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    9fa8:	b580      	push	{r7, lr}
    9faa:	b082      	sub	sp, #8
    9fac:	af00      	add	r7, sp, #0
    9fae:	6078      	str	r0, [r7, #4]
    9fb0:	000a      	movs	r2, r1
    9fb2:	1cfb      	adds	r3, r7, #3
    9fb4:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    9fb6:	687b      	ldr	r3, [r7, #4]
    9fb8:	681a      	ldr	r2, [r3, #0]
    9fba:	687b      	ldr	r3, [r7, #4]
    9fbc:	685b      	ldr	r3, [r3, #4]
    9fbe:	18d3      	adds	r3, r2, r3
    9fc0:	1cfa      	adds	r2, r7, #3
    9fc2:	7812      	ldrb	r2, [r2, #0]
    9fc4:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
    9fc6:	687b      	ldr	r3, [r7, #4]
    9fc8:	0018      	movs	r0, r3
    9fca:	4b03      	ldr	r3, [pc, #12]	; (9fd8 <circular_buf_put+0x30>)
    9fcc:	4798      	blx	r3
 }
    9fce:	46c0      	nop			; (mov r8, r8)
    9fd0:	46bd      	mov	sp, r7
    9fd2:	b002      	add	sp, #8
    9fd4:	bd80      	pop	{r7, pc}
    9fd6:	46c0      	nop			; (mov r8, r8)
    9fd8:	00009eb5 	.word	0x00009eb5

00009fdc <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
    9fdc:	b580      	push	{r7, lr}
    9fde:	b084      	sub	sp, #16
    9fe0:	af00      	add	r7, sp, #0
    9fe2:	6078      	str	r0, [r7, #4]
    9fe4:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
    9fe6:	2301      	movs	r3, #1
    9fe8:	425b      	negs	r3, r3
    9fea:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
    9fec:	687b      	ldr	r3, [r7, #4]
    9fee:	0018      	movs	r0, r3
    9ff0:	4b0d      	ldr	r3, [pc, #52]	; (a028 <circular_buf_get+0x4c>)
    9ff2:	4798      	blx	r3
    9ff4:	0003      	movs	r3, r0
    9ff6:	001a      	movs	r2, r3
    9ff8:	2301      	movs	r3, #1
    9ffa:	4053      	eors	r3, r2
    9ffc:	b2db      	uxtb	r3, r3
    9ffe:	2b00      	cmp	r3, #0
    a000:	d00d      	beq.n	a01e <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
    a002:	687b      	ldr	r3, [r7, #4]
    a004:	681a      	ldr	r2, [r3, #0]
    a006:	687b      	ldr	r3, [r7, #4]
    a008:	689b      	ldr	r3, [r3, #8]
    a00a:	18d3      	adds	r3, r2, r3
    a00c:	781a      	ldrb	r2, [r3, #0]
    a00e:	683b      	ldr	r3, [r7, #0]
    a010:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
    a012:	687b      	ldr	r3, [r7, #4]
    a014:	0018      	movs	r0, r3
    a016:	4b05      	ldr	r3, [pc, #20]	; (a02c <circular_buf_get+0x50>)
    a018:	4798      	blx	r3

		 r = 0;
    a01a:	2300      	movs	r3, #0
    a01c:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
    a01e:	68fb      	ldr	r3, [r7, #12]
 }
    a020:	0018      	movs	r0, r3
    a022:	46bd      	mov	sp, r7
    a024:	b004      	add	sp, #16
    a026:	bd80      	pop	{r7, pc}
    a028:	0000a031 	.word	0x0000a031
    a02c:	00009f15 	.word	0x00009f15

0000a030 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
    a030:	b580      	push	{r7, lr}
    a032:	b082      	sub	sp, #8
    a034:	af00      	add	r7, sp, #0
    a036:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    a038:	687b      	ldr	r3, [r7, #4]
    a03a:	7c1b      	ldrb	r3, [r3, #16]
    a03c:	2201      	movs	r2, #1
    a03e:	4053      	eors	r3, r2
    a040:	b2db      	uxtb	r3, r3
    a042:	2b00      	cmp	r3, #0
    a044:	d007      	beq.n	a056 <circular_buf_empty+0x26>
    a046:	687b      	ldr	r3, [r7, #4]
    a048:	685a      	ldr	r2, [r3, #4]
    a04a:	687b      	ldr	r3, [r7, #4]
    a04c:	689b      	ldr	r3, [r3, #8]
    a04e:	429a      	cmp	r2, r3
    a050:	d101      	bne.n	a056 <circular_buf_empty+0x26>
    a052:	2301      	movs	r3, #1
    a054:	e000      	b.n	a058 <circular_buf_empty+0x28>
    a056:	2300      	movs	r3, #0
    a058:	1c1a      	adds	r2, r3, #0
    a05a:	2301      	movs	r3, #1
    a05c:	4013      	ands	r3, r2
    a05e:	b2db      	uxtb	r3, r3
 }
    a060:	0018      	movs	r0, r3
    a062:	46bd      	mov	sp, r7
    a064:	b002      	add	sp, #8
    a066:	bd80      	pop	{r7, pc}

0000a068 <system_interrupt_enable>:
{
    a068:	b580      	push	{r7, lr}
    a06a:	b082      	sub	sp, #8
    a06c:	af00      	add	r7, sp, #0
    a06e:	0002      	movs	r2, r0
    a070:	1dfb      	adds	r3, r7, #7
    a072:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a074:	4b06      	ldr	r3, [pc, #24]	; (a090 <system_interrupt_enable+0x28>)
    a076:	1dfa      	adds	r2, r7, #7
    a078:	7812      	ldrb	r2, [r2, #0]
    a07a:	0011      	movs	r1, r2
    a07c:	221f      	movs	r2, #31
    a07e:	400a      	ands	r2, r1
    a080:	2101      	movs	r1, #1
    a082:	4091      	lsls	r1, r2
    a084:	000a      	movs	r2, r1
    a086:	601a      	str	r2, [r3, #0]
}
    a088:	46c0      	nop			; (mov r8, r8)
    a08a:	46bd      	mov	sp, r7
    a08c:	b002      	add	sp, #8
    a08e:	bd80      	pop	{r7, pc}
    a090:	e000e100 	.word	0xe000e100

0000a094 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    a094:	b580      	push	{r7, lr}
    a096:	b084      	sub	sp, #16
    a098:	af00      	add	r7, sp, #0
    a09a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    a09c:	687b      	ldr	r3, [r7, #4]
    a09e:	681b      	ldr	r3, [r3, #0]
    a0a0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    a0a2:	68fb      	ldr	r3, [r7, #12]
    a0a4:	69db      	ldr	r3, [r3, #28]
    a0a6:	1e5a      	subs	r2, r3, #1
    a0a8:	4193      	sbcs	r3, r2
    a0aa:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    a0ac:	0018      	movs	r0, r3
    a0ae:	46bd      	mov	sp, r7
    a0b0:	b004      	add	sp, #16
    a0b2:	bd80      	pop	{r7, pc}

0000a0b4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    a0b4:	b580      	push	{r7, lr}
    a0b6:	b082      	sub	sp, #8
    a0b8:	af00      	add	r7, sp, #0
    a0ba:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    a0bc:	46c0      	nop			; (mov r8, r8)
    a0be:	687b      	ldr	r3, [r7, #4]
    a0c0:	0018      	movs	r0, r3
    a0c2:	4b04      	ldr	r3, [pc, #16]	; (a0d4 <_usart_wait_for_sync+0x20>)
    a0c4:	4798      	blx	r3
    a0c6:	1e03      	subs	r3, r0, #0
    a0c8:	d1f9      	bne.n	a0be <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    a0ca:	46c0      	nop			; (mov r8, r8)
    a0cc:	46bd      	mov	sp, r7
    a0ce:	b002      	add	sp, #8
    a0d0:	bd80      	pop	{r7, pc}
    a0d2:	46c0      	nop			; (mov r8, r8)
    a0d4:	0000a095 	.word	0x0000a095

0000a0d8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    a0d8:	b580      	push	{r7, lr}
    a0da:	b082      	sub	sp, #8
    a0dc:	af00      	add	r7, sp, #0
    a0de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    a0e0:	687b      	ldr	r3, [r7, #4]
    a0e2:	2280      	movs	r2, #128	; 0x80
    a0e4:	05d2      	lsls	r2, r2, #23
    a0e6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    a0e8:	687b      	ldr	r3, [r7, #4]
    a0ea:	2200      	movs	r2, #0
    a0ec:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    a0ee:	687b      	ldr	r3, [r7, #4]
    a0f0:	22ff      	movs	r2, #255	; 0xff
    a0f2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    a0f4:	687b      	ldr	r3, [r7, #4]
    a0f6:	2200      	movs	r2, #0
    a0f8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    a0fa:	687b      	ldr	r3, [r7, #4]
    a0fc:	2200      	movs	r2, #0
    a0fe:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    a100:	687b      	ldr	r3, [r7, #4]
    a102:	2296      	movs	r2, #150	; 0x96
    a104:	0192      	lsls	r2, r2, #6
    a106:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    a108:	687b      	ldr	r3, [r7, #4]
    a10a:	2224      	movs	r2, #36	; 0x24
    a10c:	2101      	movs	r1, #1
    a10e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    a110:	687b      	ldr	r3, [r7, #4]
    a112:	2225      	movs	r2, #37	; 0x25
    a114:	2101      	movs	r1, #1
    a116:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    a118:	687b      	ldr	r3, [r7, #4]
    a11a:	2226      	movs	r2, #38	; 0x26
    a11c:	2100      	movs	r1, #0
    a11e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    a120:	687b      	ldr	r3, [r7, #4]
    a122:	2227      	movs	r2, #39	; 0x27
    a124:	2100      	movs	r1, #0
    a126:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    a128:	687b      	ldr	r3, [r7, #4]
    a12a:	2200      	movs	r2, #0
    a12c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    a12e:	687b      	ldr	r3, [r7, #4]
    a130:	2288      	movs	r2, #136	; 0x88
    a132:	0352      	lsls	r2, r2, #13
    a134:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    a136:	687b      	ldr	r3, [r7, #4]
    a138:	222c      	movs	r2, #44	; 0x2c
    a13a:	2100      	movs	r1, #0
    a13c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    a13e:	687b      	ldr	r3, [r7, #4]
    a140:	222d      	movs	r2, #45	; 0x2d
    a142:	2100      	movs	r1, #0
    a144:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    a146:	687b      	ldr	r3, [r7, #4]
    a148:	2200      	movs	r2, #0
    a14a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    a14c:	687b      	ldr	r3, [r7, #4]
    a14e:	2200      	movs	r2, #0
    a150:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    a152:	687b      	ldr	r3, [r7, #4]
    a154:	2200      	movs	r2, #0
    a156:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    a158:	687b      	ldr	r3, [r7, #4]
    a15a:	2200      	movs	r2, #0
    a15c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    a15e:	687b      	ldr	r3, [r7, #4]
    a160:	2200      	movs	r2, #0
    a162:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    a164:	687b      	ldr	r3, [r7, #4]
    a166:	2200      	movs	r2, #0
    a168:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    a16a:	687b      	ldr	r3, [r7, #4]
    a16c:	2200      	movs	r2, #0
    a16e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    a170:	687b      	ldr	r3, [r7, #4]
    a172:	2200      	movs	r2, #0
    a174:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    a176:	687b      	ldr	r3, [r7, #4]
    a178:	2200      	movs	r2, #0
    a17a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    a17c:	687b      	ldr	r3, [r7, #4]
    a17e:	2200      	movs	r2, #0
    a180:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    a182:	687b      	ldr	r3, [r7, #4]
    a184:	2213      	movs	r2, #19
    a186:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    a188:	687b      	ldr	r3, [r7, #4]
    a18a:	2200      	movs	r2, #0
    a18c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    a18e:	46c0      	nop			; (mov r8, r8)
    a190:	46bd      	mov	sp, r7
    a192:	b002      	add	sp, #8
    a194:	bd80      	pop	{r7, pc}
	...

0000a198 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    a198:	b580      	push	{r7, lr}
    a19a:	b084      	sub	sp, #16
    a19c:	af00      	add	r7, sp, #0
    a19e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    a1a0:	687b      	ldr	r3, [r7, #4]
    a1a2:	681b      	ldr	r3, [r3, #0]
    a1a4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    a1a6:	687b      	ldr	r3, [r7, #4]
    a1a8:	681b      	ldr	r3, [r3, #0]
    a1aa:	0018      	movs	r0, r3
    a1ac:	4b09      	ldr	r3, [pc, #36]	; (a1d4 <usart_enable+0x3c>)
    a1ae:	4798      	blx	r3
    a1b0:	0003      	movs	r3, r0
    a1b2:	0018      	movs	r0, r3
    a1b4:	4b08      	ldr	r3, [pc, #32]	; (a1d8 <usart_enable+0x40>)
    a1b6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a1b8:	687b      	ldr	r3, [r7, #4]
    a1ba:	0018      	movs	r0, r3
    a1bc:	4b07      	ldr	r3, [pc, #28]	; (a1dc <usart_enable+0x44>)
    a1be:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    a1c0:	68fb      	ldr	r3, [r7, #12]
    a1c2:	681b      	ldr	r3, [r3, #0]
    a1c4:	2202      	movs	r2, #2
    a1c6:	431a      	orrs	r2, r3
    a1c8:	68fb      	ldr	r3, [r7, #12]
    a1ca:	601a      	str	r2, [r3, #0]
}
    a1cc:	46c0      	nop			; (mov r8, r8)
    a1ce:	46bd      	mov	sp, r7
    a1d0:	b004      	add	sp, #16
    a1d2:	bd80      	pop	{r7, pc}
    a1d4:	00013b9d 	.word	0x00013b9d
    a1d8:	0000a069 	.word	0x0000a069
    a1dc:	0000a0b5 	.word	0x0000a0b5

0000a1e0 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    a1e0:	b580      	push	{r7, lr}
    a1e2:	b082      	sub	sp, #8
    a1e4:	af00      	add	r7, sp, #0
    a1e6:	6078      	str	r0, [r7, #4]
    a1e8:	000a      	movs	r2, r1
    a1ea:	1cfb      	adds	r3, r7, #3
    a1ec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    a1ee:	687b      	ldr	r3, [r7, #4]
    a1f0:	2231      	movs	r2, #49	; 0x31
    a1f2:	5c9b      	ldrb	r3, [r3, r2]
    a1f4:	b25a      	sxtb	r2, r3
    a1f6:	1cfb      	adds	r3, r7, #3
    a1f8:	781b      	ldrb	r3, [r3, #0]
    a1fa:	2101      	movs	r1, #1
    a1fc:	4099      	lsls	r1, r3
    a1fe:	000b      	movs	r3, r1
    a200:	b25b      	sxtb	r3, r3
    a202:	4313      	orrs	r3, r2
    a204:	b25b      	sxtb	r3, r3
    a206:	b2d9      	uxtb	r1, r3
    a208:	687b      	ldr	r3, [r7, #4]
    a20a:	2231      	movs	r2, #49	; 0x31
    a20c:	5499      	strb	r1, [r3, r2]

}
    a20e:	46c0      	nop			; (mov r8, r8)
    a210:	46bd      	mov	sp, r7
    a212:	b002      	add	sp, #8
    a214:	bd80      	pop	{r7, pc}
	...

0000a218 <InitializeSerialConsole>:
 * @details		Initializes the UART - sets up the SERCOM to act as UART and registers the callbacks for
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void) {
    a218:	b580      	push	{r7, lr}
    a21a:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *) rxCharacterBuffer, RX_BUFFER_SIZE);
    a21c:	2380      	movs	r3, #128	; 0x80
    a21e:	009a      	lsls	r2, r3, #2
    a220:	4b0f      	ldr	r3, [pc, #60]	; (a260 <InitializeSerialConsole+0x48>)
    a222:	0011      	movs	r1, r2
    a224:	0018      	movs	r0, r3
    a226:	4b0f      	ldr	r3, [pc, #60]	; (a264 <InitializeSerialConsole+0x4c>)
    a228:	4798      	blx	r3
    a22a:	0002      	movs	r2, r0
    a22c:	4b0e      	ldr	r3, [pc, #56]	; (a268 <InitializeSerialConsole+0x50>)
    a22e:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *) txCharacterBuffer, RX_BUFFER_SIZE);
    a230:	2380      	movs	r3, #128	; 0x80
    a232:	009a      	lsls	r2, r3, #2
    a234:	4b0d      	ldr	r3, [pc, #52]	; (a26c <InitializeSerialConsole+0x54>)
    a236:	0011      	movs	r1, r2
    a238:	0018      	movs	r0, r3
    a23a:	4b0a      	ldr	r3, [pc, #40]	; (a264 <InitializeSerialConsole+0x4c>)
    a23c:	4798      	blx	r3
    a23e:	0002      	movs	r2, r0
    a240:	4b0b      	ldr	r3, [pc, #44]	; (a270 <InitializeSerialConsole+0x58>)
    a242:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
    a244:	4b0b      	ldr	r3, [pc, #44]	; (a274 <InitializeSerialConsole+0x5c>)
    a246:	4798      	blx	r3
    configure_usart_callbacks();
    a248:	4b0b      	ldr	r3, [pc, #44]	; (a278 <InitializeSerialConsole+0x60>)
    a24a:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *) &latestRx, 1);   // Kicks off constant reading of characters
    a24c:	490b      	ldr	r1, [pc, #44]	; (a27c <InitializeSerialConsole+0x64>)
    a24e:	4b0c      	ldr	r3, [pc, #48]	; (a280 <InitializeSerialConsole+0x68>)
    a250:	2201      	movs	r2, #1
    a252:	0018      	movs	r0, r3
    a254:	4b0b      	ldr	r3, [pc, #44]	; (a284 <InitializeSerialConsole+0x6c>)
    a256:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
    a258:	46c0      	nop			; (mov r8, r8)
    a25a:	46bd      	mov	sp, r7
    a25c:	bd80      	pop	{r7, pc}
    a25e:	46c0      	nop			; (mov r8, r8)
    a260:	20005690 	.word	0x20005690
    a264:	00009f49 	.word	0x00009f49
    a268:	20005488 	.word	0x20005488
    a26c:	20005490 	.word	0x20005490
    a270:	20005894 	.word	0x20005894
    a274:	0000a3ed 	.word	0x0000a3ed
    a278:	0000a465 	.word	0x0000a465
    a27c:	2000548c 	.word	0x2000548c
    a280:	20005454 	.word	0x20005454
    a284:	00015445 	.word	0x00015445

0000a288 <SerialConsoleWriteString>:
 *text send to the uart
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string) {
    a288:	b580      	push	{r7, lr}
    a28a:	b084      	sub	sp, #16
    a28c:	af00      	add	r7, sp, #0
    a28e:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
    a290:	4b1a      	ldr	r3, [pc, #104]	; (a2fc <SerialConsoleWriteString+0x74>)
    a292:	4798      	blx	r3
    if (string != NULL) {
    a294:	687b      	ldr	r3, [r7, #4]
    a296:	2b00      	cmp	r3, #0
    a298:	d02a      	beq.n	a2f0 <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
    a29a:	2300      	movs	r3, #0
    a29c:	60fb      	str	r3, [r7, #12]
    a29e:	e00b      	b.n	a2b8 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
    a2a0:	4b17      	ldr	r3, [pc, #92]	; (a300 <SerialConsoleWriteString+0x78>)
    a2a2:	6818      	ldr	r0, [r3, #0]
    a2a4:	687a      	ldr	r2, [r7, #4]
    a2a6:	68fb      	ldr	r3, [r7, #12]
    a2a8:	18d3      	adds	r3, r2, r3
    a2aa:	781b      	ldrb	r3, [r3, #0]
    a2ac:	0019      	movs	r1, r3
    a2ae:	4b15      	ldr	r3, [pc, #84]	; (a304 <SerialConsoleWriteString+0x7c>)
    a2b0:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
    a2b2:	68fb      	ldr	r3, [r7, #12]
    a2b4:	3301      	adds	r3, #1
    a2b6:	60fb      	str	r3, [r7, #12]
    a2b8:	687b      	ldr	r3, [r7, #4]
    a2ba:	0018      	movs	r0, r3
    a2bc:	4b12      	ldr	r3, [pc, #72]	; (a308 <SerialConsoleWriteString+0x80>)
    a2be:	4798      	blx	r3
    a2c0:	0002      	movs	r2, r0
    a2c2:	68fb      	ldr	r3, [r7, #12]
    a2c4:	429a      	cmp	r2, r3
    a2c6:	d8eb      	bhi.n	a2a0 <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
    a2c8:	4b10      	ldr	r3, [pc, #64]	; (a30c <SerialConsoleWriteString+0x84>)
    a2ca:	2101      	movs	r1, #1
    a2cc:	0018      	movs	r0, r3
    a2ce:	4b10      	ldr	r3, [pc, #64]	; (a310 <SerialConsoleWriteString+0x88>)
    a2d0:	4798      	blx	r3
    a2d2:	1e03      	subs	r3, r0, #0
    a2d4:	d10c      	bne.n	a2f0 <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *) &latestTx);   // Perform only if the SERCOM TX is free (not busy)
    a2d6:	4b0a      	ldr	r3, [pc, #40]	; (a300 <SerialConsoleWriteString+0x78>)
    a2d8:	681b      	ldr	r3, [r3, #0]
    a2da:	4a0e      	ldr	r2, [pc, #56]	; (a314 <SerialConsoleWriteString+0x8c>)
    a2dc:	0011      	movs	r1, r2
    a2de:	0018      	movs	r0, r3
    a2e0:	4b0d      	ldr	r3, [pc, #52]	; (a318 <SerialConsoleWriteString+0x90>)
    a2e2:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
    a2e4:	490b      	ldr	r1, [pc, #44]	; (a314 <SerialConsoleWriteString+0x8c>)
    a2e6:	4b09      	ldr	r3, [pc, #36]	; (a30c <SerialConsoleWriteString+0x84>)
    a2e8:	2201      	movs	r2, #1
    a2ea:	0018      	movs	r0, r3
    a2ec:	4b0b      	ldr	r3, [pc, #44]	; (a31c <SerialConsoleWriteString+0x94>)
    a2ee:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
    a2f0:	4b0b      	ldr	r3, [pc, #44]	; (a320 <SerialConsoleWriteString+0x98>)
    a2f2:	4798      	blx	r3
}
    a2f4:	46c0      	nop			; (mov r8, r8)
    a2f6:	46bd      	mov	sp, r7
    a2f8:	b004      	add	sp, #16
    a2fa:	bd80      	pop	{r7, pc}
    a2fc:	000088f5 	.word	0x000088f5
    a300:	20005894 	.word	0x20005894
    a304:	00009fa9 	.word	0x00009fa9
    a308:	00021143 	.word	0x00021143
    a30c:	20005454 	.word	0x20005454
    a310:	0001548d 	.word	0x0001548d
    a314:	20005890 	.word	0x20005890
    a318:	00009fdd 	.word	0x00009fdd
    a31c:	000153fd 	.word	0x000153fd
    a320:	0000890d 	.word	0x0000890d

0000a324 <SerialConsoleReadCharacter>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar) {
    a324:	b580      	push	{r7, lr}
    a326:	b084      	sub	sp, #16
    a328:	af00      	add	r7, sp, #0
    a32a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
    a32c:	4b08      	ldr	r3, [pc, #32]	; (a350 <SerialConsoleReadCharacter+0x2c>)
    a32e:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *) rxChar);
    a330:	4b08      	ldr	r3, [pc, #32]	; (a354 <SerialConsoleReadCharacter+0x30>)
    a332:	681b      	ldr	r3, [r3, #0]
    a334:	687a      	ldr	r2, [r7, #4]
    a336:	0011      	movs	r1, r2
    a338:	0018      	movs	r0, r3
    a33a:	4b07      	ldr	r3, [pc, #28]	; (a358 <SerialConsoleReadCharacter+0x34>)
    a33c:	4798      	blx	r3
    a33e:	0003      	movs	r3, r0
    a340:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
    a342:	4b06      	ldr	r3, [pc, #24]	; (a35c <SerialConsoleReadCharacter+0x38>)
    a344:	4798      	blx	r3
    return a;
    a346:	68fb      	ldr	r3, [r7, #12]
}
    a348:	0018      	movs	r0, r3
    a34a:	46bd      	mov	sp, r7
    a34c:	b004      	add	sp, #16
    a34e:	bd80      	pop	{r7, pc}
    a350:	000088f5 	.word	0x000088f5
    a354:	20005488 	.word	0x20005488
    a358:	00009fdd 	.word	0x00009fdd
    a35c:	0000890d 	.word	0x0000890d

0000a360 <getLogLevel>:
 *				Debug logs below the given level will not be allowed to be printed on the system
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void) { return currentDebugLevel; }
    a360:	b580      	push	{r7, lr}
    a362:	af00      	add	r7, sp, #0
    a364:	4b02      	ldr	r3, [pc, #8]	; (a370 <getLogLevel+0x10>)
    a366:	781b      	ldrb	r3, [r3, #0]
    a368:	0018      	movs	r0, r3
    a36a:	46bd      	mov	sp, r7
    a36c:	bd80      	pop	{r7, pc}
    a36e:	46c0      	nop			; (mov r8, r8)
    a370:	20004094 	.word	0x20004094

0000a374 <LogMessage>:
/**
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...){
    a374:	b40e      	push	{r1, r2, r3}
    a376:	b590      	push	{r4, r7, lr}
    a378:	b084      	sub	sp, #16
    a37a:	af00      	add	r7, sp, #0
    a37c:	0002      	movs	r2, r0
    a37e:	1dfb      	adds	r3, r7, #7
    a380:	701a      	strb	r2, [r3, #0]
	if(getLogLevel()<=level)
    a382:	4b0e      	ldr	r3, [pc, #56]	; (a3bc <LogMessage+0x48>)
    a384:	4798      	blx	r3
    a386:	0003      	movs	r3, r0
    a388:	001a      	movs	r2, r3
    a38a:	1dfb      	adds	r3, r7, #7
    a38c:	781b      	ldrb	r3, [r3, #0]
    a38e:	4293      	cmp	r3, r2
    a390:	d30c      	bcc.n	a3ac <LogMessage+0x38>
	{
		va_list ap;
		va_start(ap, format);
    a392:	2320      	movs	r3, #32
    a394:	18fb      	adds	r3, r7, r3
    a396:	60fb      	str	r3, [r7, #12]
		vsnprintf(debugBuffer, 127, format, ap);
    a398:	68fb      	ldr	r3, [r7, #12]
    a39a:	69fa      	ldr	r2, [r7, #28]
    a39c:	4808      	ldr	r0, [pc, #32]	; (a3c0 <LogMessage+0x4c>)
    a39e:	217f      	movs	r1, #127	; 0x7f
    a3a0:	4c08      	ldr	r4, [pc, #32]	; (a3c4 <LogMessage+0x50>)
    a3a2:	47a0      	blx	r4
		SerialConsoleWriteString(debugBuffer);
    a3a4:	4b06      	ldr	r3, [pc, #24]	; (a3c0 <LogMessage+0x4c>)
    a3a6:	0018      	movs	r0, r3
    a3a8:	4b07      	ldr	r3, [pc, #28]	; (a3c8 <LogMessage+0x54>)
    a3aa:	4798      	blx	r3
		va_end(ap);
	}
}
    a3ac:	46c0      	nop			; (mov r8, r8)
    a3ae:	46bd      	mov	sp, r7
    a3b0:	b004      	add	sp, #16
    a3b2:	bc90      	pop	{r4, r7}
    a3b4:	bc08      	pop	{r3}
    a3b6:	b003      	add	sp, #12
    a3b8:	4718      	bx	r3
    a3ba:	46c0      	nop			; (mov r8, r8)
    a3bc:	0000a361 	.word	0x0000a361
    a3c0:	200053d4 	.word	0x200053d4
    a3c4:	0002137d 	.word	0x0002137d
    a3c8:	0000a289 	.word	0x0000a289

0000a3cc <LogMessageDebug>:
/**
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...) { LogMessage(LOG_DEBUG_LVL, format); };
    a3cc:	b40f      	push	{r0, r1, r2, r3}
    a3ce:	b580      	push	{r7, lr}
    a3d0:	af00      	add	r7, sp, #0
    a3d2:	68bb      	ldr	r3, [r7, #8]
    a3d4:	0019      	movs	r1, r3
    a3d6:	2001      	movs	r0, #1
    a3d8:	4b03      	ldr	r3, [pc, #12]	; (a3e8 <LogMessageDebug+0x1c>)
    a3da:	4798      	blx	r3
    a3dc:	46c0      	nop			; (mov r8, r8)
    a3de:	46bd      	mov	sp, r7
    a3e0:	bc80      	pop	{r7}
    a3e2:	bc08      	pop	{r3}
    a3e4:	b004      	add	sp, #16
    a3e6:	4718      	bx	r3
    a3e8:	0000a375 	.word	0x0000a375

0000a3ec <configure_usart>:
/**
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void) {
    a3ec:	b580      	push	{r7, lr}
    a3ee:	b090      	sub	sp, #64	; 0x40
    a3f0:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    a3f2:	003b      	movs	r3, r7
    a3f4:	0018      	movs	r0, r3
    a3f6:	4b14      	ldr	r3, [pc, #80]	; (a448 <configure_usart+0x5c>)
    a3f8:	4798      	blx	r3

    config_usart.baudrate = 115200;
    a3fa:	003b      	movs	r3, r7
    a3fc:	22e1      	movs	r2, #225	; 0xe1
    a3fe:	0252      	lsls	r2, r2, #9
    a400:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    a402:	003b      	movs	r3, r7
    a404:	22c4      	movs	r2, #196	; 0xc4
    a406:	0392      	lsls	r2, r2, #14
    a408:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    a40a:	003b      	movs	r3, r7
    a40c:	2201      	movs	r2, #1
    a40e:	4252      	negs	r2, r2
    a410:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    a412:	003b      	movs	r3, r7
    a414:	2201      	movs	r2, #1
    a416:	4252      	negs	r2, r2
    a418:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    a41a:	003b      	movs	r3, r7
    a41c:	4a0b      	ldr	r2, [pc, #44]	; (a44c <configure_usart+0x60>)
    a41e:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    a420:	003b      	movs	r3, r7
    a422:	4a0b      	ldr	r2, [pc, #44]	; (a450 <configure_usart+0x64>)
    a424:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
    a426:	46c0      	nop			; (mov r8, r8)
    a428:	003a      	movs	r2, r7
    a42a:	490a      	ldr	r1, [pc, #40]	; (a454 <configure_usart+0x68>)
    a42c:	4b0a      	ldr	r3, [pc, #40]	; (a458 <configure_usart+0x6c>)
    a42e:	0018      	movs	r0, r3
    a430:	4b0a      	ldr	r3, [pc, #40]	; (a45c <configure_usart+0x70>)
    a432:	4798      	blx	r3
    a434:	1e03      	subs	r3, r0, #0
    a436:	d1f7      	bne.n	a428 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
    a438:	4b07      	ldr	r3, [pc, #28]	; (a458 <configure_usart+0x6c>)
    a43a:	0018      	movs	r0, r3
    a43c:	4b08      	ldr	r3, [pc, #32]	; (a460 <configure_usart+0x74>)
    a43e:	4798      	blx	r3
}
    a440:	46c0      	nop			; (mov r8, r8)
    a442:	46bd      	mov	sp, r7
    a444:	b010      	add	sp, #64	; 0x40
    a446:	bd80      	pop	{r7, pc}
    a448:	0000a0d9 	.word	0x0000a0d9
    a44c:	002a0003 	.word	0x002a0003
    a450:	002b0003 	.word	0x002b0003
    a454:	42001800 	.word	0x42001800
    a458:	20005454 	.word	0x20005454
    a45c:	00015001 	.word	0x00015001
    a460:	0000a199 	.word	0x0000a199

0000a464 <configure_usart_callbacks>:
/**
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void) {
    a464:	b580      	push	{r7, lr}
    a466:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    a468:	490c      	ldr	r1, [pc, #48]	; (a49c <configure_usart_callbacks+0x38>)
    a46a:	4b0d      	ldr	r3, [pc, #52]	; (a4a0 <configure_usart_callbacks+0x3c>)
    a46c:	2200      	movs	r2, #0
    a46e:	0018      	movs	r0, r3
    a470:	4b0c      	ldr	r3, [pc, #48]	; (a4a4 <configure_usart_callbacks+0x40>)
    a472:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    a474:	490c      	ldr	r1, [pc, #48]	; (a4a8 <configure_usart_callbacks+0x44>)
    a476:	4b0a      	ldr	r3, [pc, #40]	; (a4a0 <configure_usart_callbacks+0x3c>)
    a478:	2201      	movs	r2, #1
    a47a:	0018      	movs	r0, r3
    a47c:	4b09      	ldr	r3, [pc, #36]	; (a4a4 <configure_usart_callbacks+0x40>)
    a47e:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    a480:	4b07      	ldr	r3, [pc, #28]	; (a4a0 <configure_usart_callbacks+0x3c>)
    a482:	2100      	movs	r1, #0
    a484:	0018      	movs	r0, r3
    a486:	4b09      	ldr	r3, [pc, #36]	; (a4ac <configure_usart_callbacks+0x48>)
    a488:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    a48a:	4b05      	ldr	r3, [pc, #20]	; (a4a0 <configure_usart_callbacks+0x3c>)
    a48c:	2101      	movs	r1, #1
    a48e:	0018      	movs	r0, r3
    a490:	4b06      	ldr	r3, [pc, #24]	; (a4ac <configure_usart_callbacks+0x48>)
    a492:	4798      	blx	r3
}
    a494:	46c0      	nop			; (mov r8, r8)
    a496:	46bd      	mov	sp, r7
    a498:	bd80      	pop	{r7, pc}
    a49a:	46c0      	nop			; (mov r8, r8)
    a49c:	0000a4f9 	.word	0x0000a4f9
    a4a0:	20005454 	.word	0x20005454
    a4a4:	000153b5 	.word	0x000153b5
    a4a8:	0000a4b1 	.word	0x0000a4b1
    a4ac:	0000a1e1 	.word	0x0000a1e1

0000a4b0 <usart_read_callback>:
/**
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module) {
    a4b0:	b580      	push	{r7, lr}
    a4b2:	b082      	sub	sp, #8
    a4b4:	af00      	add	r7, sp, #0
    a4b6:	6078      	str	r0, [r7, #4]
	circular_buf_put(cbufRx, (uint8_t)latestRx);
    a4b8:	4b09      	ldr	r3, [pc, #36]	; (a4e0 <usart_read_callback+0x30>)
    a4ba:	681a      	ldr	r2, [r3, #0]
    a4bc:	4b09      	ldr	r3, [pc, #36]	; (a4e4 <usart_read_callback+0x34>)
    a4be:	781b      	ldrb	r3, [r3, #0]
    a4c0:	0019      	movs	r1, r3
    a4c2:	0010      	movs	r0, r2
    a4c4:	4b08      	ldr	r3, [pc, #32]	; (a4e8 <usart_read_callback+0x38>)
    a4c6:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);
    a4c8:	4906      	ldr	r1, [pc, #24]	; (a4e4 <usart_read_callback+0x34>)
    a4ca:	4b08      	ldr	r3, [pc, #32]	; (a4ec <usart_read_callback+0x3c>)
    a4cc:	2201      	movs	r2, #1
    a4ce:	0018      	movs	r0, r3
    a4d0:	4b07      	ldr	r3, [pc, #28]	; (a4f0 <usart_read_callback+0x40>)
    a4d2:	4798      	blx	r3
	CliCharReadySemaphoreGiveFromISR();
    a4d4:	4b07      	ldr	r3, [pc, #28]	; (a4f4 <usart_read_callback+0x44>)
    a4d6:	4798      	blx	r3
}
    a4d8:	46c0      	nop			; (mov r8, r8)
    a4da:	46bd      	mov	sp, r7
    a4dc:	b002      	add	sp, #8
    a4de:	bd80      	pop	{r7, pc}
    a4e0:	20005488 	.word	0x20005488
    a4e4:	2000548c 	.word	0x2000548c
    a4e8:	00009fa9 	.word	0x00009fa9
    a4ec:	20005454 	.word	0x20005454
    a4f0:	00015445 	.word	0x00015445
    a4f4:	00001481 	.word	0x00001481

0000a4f8 <usart_write_callback>:
/**
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module) {
    a4f8:	b580      	push	{r7, lr}
    a4fa:	b082      	sub	sp, #8
    a4fc:	af00      	add	r7, sp, #0
    a4fe:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *) &latestTx) != -1)   // Only continue if there are more characters to send
    a500:	4b09      	ldr	r3, [pc, #36]	; (a528 <usart_write_callback+0x30>)
    a502:	681b      	ldr	r3, [r3, #0]
    a504:	4a09      	ldr	r2, [pc, #36]	; (a52c <usart_write_callback+0x34>)
    a506:	0011      	movs	r1, r2
    a508:	0018      	movs	r0, r3
    a50a:	4b09      	ldr	r3, [pc, #36]	; (a530 <usart_write_callback+0x38>)
    a50c:	4798      	blx	r3
    a50e:	0003      	movs	r3, r0
    a510:	3301      	adds	r3, #1
    a512:	d005      	beq.n	a520 <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
    a514:	4905      	ldr	r1, [pc, #20]	; (a52c <usart_write_callback+0x34>)
    a516:	4b07      	ldr	r3, [pc, #28]	; (a534 <usart_write_callback+0x3c>)
    a518:	2201      	movs	r2, #1
    a51a:	0018      	movs	r0, r3
    a51c:	4b06      	ldr	r3, [pc, #24]	; (a538 <usart_write_callback+0x40>)
    a51e:	4798      	blx	r3
    }
}
    a520:	46c0      	nop			; (mov r8, r8)
    a522:	46bd      	mov	sp, r7
    a524:	b002      	add	sp, #8
    a526:	bd80      	pop	{r7, pc}
    a528:	20005894 	.word	0x20005894
    a52c:	20005890 	.word	0x20005890
    a530:	00009fdd 	.word	0x00009fdd
    a534:	20005454 	.word	0x20005454
    a538:	000153fd 	.word	0x000153fd

0000a53c <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
    a53c:	b590      	push	{r4, r7, lr}
    a53e:	b087      	sub	sp, #28
    a540:	af00      	add	r7, sp, #0
    a542:	60f8      	str	r0, [r7, #12]
    a544:	000c      	movs	r4, r1
    a546:	0010      	movs	r0, r2
    a548:	0019      	movs	r1, r3
    a54a:	230a      	movs	r3, #10
    a54c:	18fb      	adds	r3, r7, r3
    a54e:	1c22      	adds	r2, r4, #0
    a550:	801a      	strh	r2, [r3, #0]
    a552:	2308      	movs	r3, #8
    a554:	18fb      	adds	r3, r7, r3
    a556:	1c02      	adds	r2, r0, #0
    a558:	801a      	strh	r2, [r3, #0]
    a55a:	1dfb      	adds	r3, r7, #7
    a55c:	1c0a      	adds	r2, r1, #0
    a55e:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a560:	230a      	movs	r3, #10
    a562:	18fb      	adds	r3, r7, r3
    a564:	881a      	ldrh	r2, [r3, #0]
    a566:	2308      	movs	r3, #8
    a568:	18fb      	adds	r3, r7, r3
    a56a:	881b      	ldrh	r3, [r3, #0]
    a56c:	1ad3      	subs	r3, r2, r3
    a56e:	3307      	adds	r3, #7
    a570:	2b00      	cmp	r3, #0
    a572:	da00      	bge.n	a576 <SDMMC_UNSTUFF_BITS+0x3a>
    a574:	3307      	adds	r3, #7
    a576:	10db      	asrs	r3, r3, #3
    a578:	3b01      	subs	r3, #1
    a57a:	68fa      	ldr	r2, [r7, #12]
    a57c:	18d3      	adds	r3, r2, r3
    a57e:	781b      	ldrb	r3, [r3, #0]
    a580:	0019      	movs	r1, r3
    a582:	2308      	movs	r3, #8
    a584:	18fb      	adds	r3, r7, r3
    a586:	881b      	ldrh	r3, [r3, #0]
    a588:	2207      	movs	r2, #7
    a58a:	4013      	ands	r3, r2
    a58c:	4119      	asrs	r1, r3
    a58e:	000b      	movs	r3, r1
    a590:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
    a592:	2308      	movs	r3, #8
    a594:	18fb      	adds	r3, r7, r3
    a596:	881b      	ldrh	r3, [r3, #0]
    a598:	2207      	movs	r2, #7
    a59a:	401a      	ands	r2, r3
    a59c:	1dfb      	adds	r3, r7, #7
    a59e:	781b      	ldrb	r3, [r3, #0]
    a5a0:	18d3      	adds	r3, r2, r3
    a5a2:	2b08      	cmp	r3, #8
    a5a4:	dd1c      	ble.n	a5e0 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a5a6:	230a      	movs	r3, #10
    a5a8:	18fb      	adds	r3, r7, r3
    a5aa:	881a      	ldrh	r2, [r3, #0]
    a5ac:	2308      	movs	r3, #8
    a5ae:	18fb      	adds	r3, r7, r3
    a5b0:	881b      	ldrh	r3, [r3, #0]
    a5b2:	1ad3      	subs	r3, r2, r3
    a5b4:	3307      	adds	r3, #7
    a5b6:	2b00      	cmp	r3, #0
    a5b8:	da00      	bge.n	a5bc <SDMMC_UNSTUFF_BITS+0x80>
    a5ba:	3307      	adds	r3, #7
    a5bc:	10db      	asrs	r3, r3, #3
    a5be:	3b02      	subs	r3, #2
    a5c0:	68fa      	ldr	r2, [r7, #12]
    a5c2:	18d3      	adds	r3, r2, r3
    a5c4:	781b      	ldrb	r3, [r3, #0]
    a5c6:	0019      	movs	r1, r3
    a5c8:	2308      	movs	r3, #8
    a5ca:	18fb      	adds	r3, r7, r3
    a5cc:	881b      	ldrh	r3, [r3, #0]
    a5ce:	2207      	movs	r2, #7
    a5d0:	4013      	ands	r3, r2
    a5d2:	2208      	movs	r2, #8
    a5d4:	1ad3      	subs	r3, r2, r3
    a5d6:	4099      	lsls	r1, r3
    a5d8:	000b      	movs	r3, r1
    a5da:	697a      	ldr	r2, [r7, #20]
    a5dc:	4313      	orrs	r3, r2
    a5de:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    a5e0:	2308      	movs	r3, #8
    a5e2:	18fb      	adds	r3, r7, r3
    a5e4:	881b      	ldrh	r3, [r3, #0]
    a5e6:	2207      	movs	r2, #7
    a5e8:	401a      	ands	r2, r3
    a5ea:	1dfb      	adds	r3, r7, #7
    a5ec:	781b      	ldrb	r3, [r3, #0]
    a5ee:	18d3      	adds	r3, r2, r3
    a5f0:	2b10      	cmp	r3, #16
    a5f2:	dd1c      	ble.n	a62e <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a5f4:	230a      	movs	r3, #10
    a5f6:	18fb      	adds	r3, r7, r3
    a5f8:	881a      	ldrh	r2, [r3, #0]
    a5fa:	2308      	movs	r3, #8
    a5fc:	18fb      	adds	r3, r7, r3
    a5fe:	881b      	ldrh	r3, [r3, #0]
    a600:	1ad3      	subs	r3, r2, r3
    a602:	3307      	adds	r3, #7
    a604:	2b00      	cmp	r3, #0
    a606:	da00      	bge.n	a60a <SDMMC_UNSTUFF_BITS+0xce>
    a608:	3307      	adds	r3, #7
    a60a:	10db      	asrs	r3, r3, #3
    a60c:	3b03      	subs	r3, #3
    a60e:	68fa      	ldr	r2, [r7, #12]
    a610:	18d3      	adds	r3, r2, r3
    a612:	781b      	ldrb	r3, [r3, #0]
    a614:	0019      	movs	r1, r3
    a616:	2308      	movs	r3, #8
    a618:	18fb      	adds	r3, r7, r3
    a61a:	881b      	ldrh	r3, [r3, #0]
    a61c:	2207      	movs	r2, #7
    a61e:	4013      	ands	r3, r2
    a620:	2210      	movs	r2, #16
    a622:	1ad3      	subs	r3, r2, r3
    a624:	4099      	lsls	r1, r3
    a626:	000b      	movs	r3, r1
    a628:	697a      	ldr	r2, [r7, #20]
    a62a:	4313      	orrs	r3, r2
    a62c:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    a62e:	2308      	movs	r3, #8
    a630:	18fb      	adds	r3, r7, r3
    a632:	881b      	ldrh	r3, [r3, #0]
    a634:	2207      	movs	r2, #7
    a636:	401a      	ands	r2, r3
    a638:	1dfb      	adds	r3, r7, #7
    a63a:	781b      	ldrb	r3, [r3, #0]
    a63c:	18d3      	adds	r3, r2, r3
    a63e:	2b10      	cmp	r3, #16
    a640:	dd1c      	ble.n	a67c <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a642:	230a      	movs	r3, #10
    a644:	18fb      	adds	r3, r7, r3
    a646:	881a      	ldrh	r2, [r3, #0]
    a648:	2308      	movs	r3, #8
    a64a:	18fb      	adds	r3, r7, r3
    a64c:	881b      	ldrh	r3, [r3, #0]
    a64e:	1ad3      	subs	r3, r2, r3
    a650:	3307      	adds	r3, #7
    a652:	2b00      	cmp	r3, #0
    a654:	da00      	bge.n	a658 <SDMMC_UNSTUFF_BITS+0x11c>
    a656:	3307      	adds	r3, #7
    a658:	10db      	asrs	r3, r3, #3
    a65a:	3b03      	subs	r3, #3
    a65c:	68fa      	ldr	r2, [r7, #12]
    a65e:	18d3      	adds	r3, r2, r3
    a660:	781b      	ldrb	r3, [r3, #0]
    a662:	0019      	movs	r1, r3
    a664:	2308      	movs	r3, #8
    a666:	18fb      	adds	r3, r7, r3
    a668:	881b      	ldrh	r3, [r3, #0]
    a66a:	2207      	movs	r2, #7
    a66c:	4013      	ands	r3, r2
    a66e:	2210      	movs	r2, #16
    a670:	1ad3      	subs	r3, r2, r3
    a672:	4099      	lsls	r1, r3
    a674:	000b      	movs	r3, r1
    a676:	697a      	ldr	r2, [r7, #20]
    a678:	4313      	orrs	r3, r2
    a67a:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
    a67c:	1dfb      	adds	r3, r7, #7
    a67e:	781b      	ldrb	r3, [r3, #0]
    a680:	2201      	movs	r2, #1
    a682:	409a      	lsls	r2, r3
    a684:	0013      	movs	r3, r2
    a686:	1e5a      	subs	r2, r3, #1
    a688:	697b      	ldr	r3, [r7, #20]
    a68a:	4013      	ands	r3, r2
    a68c:	617b      	str	r3, [r7, #20]
	return value;
    a68e:	697b      	ldr	r3, [r7, #20]
}
    a690:	0018      	movs	r0, r3
    a692:	46bd      	mov	sp, r7
    a694:	b007      	add	sp, #28
    a696:	bd90      	pop	{r4, r7, pc}

0000a698 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
    a698:	b580      	push	{r7, lr}
    a69a:	b082      	sub	sp, #8
    a69c:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    a69e:	4b23      	ldr	r3, [pc, #140]	; (a72c <mmc_spi_op_cond+0x94>)
    a6a0:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    a6a2:	4b23      	ldr	r3, [pc, #140]	; (a730 <mmc_spi_op_cond+0x98>)
    a6a4:	2100      	movs	r1, #0
    a6a6:	0018      	movs	r0, r3
    a6a8:	4b22      	ldr	r3, [pc, #136]	; (a734 <mmc_spi_op_cond+0x9c>)
    a6aa:	4798      	blx	r3
    a6ac:	0003      	movs	r3, r0
    a6ae:	001a      	movs	r2, r3
    a6b0:	2301      	movs	r3, #1
    a6b2:	4053      	eors	r3, r2
    a6b4:	b2db      	uxtb	r3, r3
    a6b6:	2b00      	cmp	r3, #0
    a6b8:	d001      	beq.n	a6be <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
    a6ba:	2300      	movs	r3, #0
    a6bc:	e031      	b.n	a722 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
    a6be:	4b1e      	ldr	r3, [pc, #120]	; (a738 <mmc_spi_op_cond+0xa0>)
    a6c0:	4798      	blx	r3
    a6c2:	0003      	movs	r3, r0
    a6c4:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
    a6c6:	683b      	ldr	r3, [r7, #0]
    a6c8:	2201      	movs	r2, #1
    a6ca:	4013      	ands	r3, r2
    a6cc:	d006      	beq.n	a6dc <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
    a6ce:	687b      	ldr	r3, [r7, #4]
    a6d0:	1e5a      	subs	r2, r3, #1
    a6d2:	607a      	str	r2, [r7, #4]
    a6d4:	2b00      	cmp	r3, #0
    a6d6:	d1e4      	bne.n	a6a2 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
    a6d8:	2300      	movs	r3, #0
    a6da:	e022      	b.n	a722 <mmc_spi_op_cond+0x8a>
			break;
    a6dc:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    a6de:	4b17      	ldr	r3, [pc, #92]	; (a73c <mmc_spi_op_cond+0xa4>)
    a6e0:	2100      	movs	r1, #0
    a6e2:	0018      	movs	r0, r3
    a6e4:	4b13      	ldr	r3, [pc, #76]	; (a734 <mmc_spi_op_cond+0x9c>)
    a6e6:	4798      	blx	r3
    a6e8:	0003      	movs	r3, r0
    a6ea:	001a      	movs	r2, r3
    a6ec:	2301      	movs	r3, #1
    a6ee:	4053      	eors	r3, r2
    a6f0:	b2db      	uxtb	r3, r3
    a6f2:	2b00      	cmp	r3, #0
    a6f4:	d001      	beq.n	a6fa <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    a6f6:	2300      	movs	r3, #0
    a6f8:	e013      	b.n	a722 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    a6fa:	4b0f      	ldr	r3, [pc, #60]	; (a738 <mmc_spi_op_cond+0xa0>)
    a6fc:	4798      	blx	r3
    a6fe:	0002      	movs	r2, r0
    a700:	23c0      	movs	r3, #192	; 0xc0
    a702:	05db      	lsls	r3, r3, #23
    a704:	401a      	ands	r2, r3
    a706:	2380      	movs	r3, #128	; 0x80
    a708:	05db      	lsls	r3, r3, #23
    a70a:	429a      	cmp	r2, r3
    a70c:	d108      	bne.n	a720 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
    a70e:	4b0c      	ldr	r3, [pc, #48]	; (a740 <mmc_spi_op_cond+0xa8>)
    a710:	681a      	ldr	r2, [r3, #0]
    a712:	4b0b      	ldr	r3, [pc, #44]	; (a740 <mmc_spi_op_cond+0xa8>)
    a714:	681b      	ldr	r3, [r3, #0]
    a716:	7adb      	ldrb	r3, [r3, #11]
    a718:	2108      	movs	r1, #8
    a71a:	430b      	orrs	r3, r1
    a71c:	b2db      	uxtb	r3, r3
    a71e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    a720:	2301      	movs	r3, #1
}
    a722:	0018      	movs	r0, r3
    a724:	46bd      	mov	sp, r7
    a726:	b002      	add	sp, #8
    a728:	bd80      	pop	{r7, pc}
    a72a:	46c0      	nop			; (mov r8, r8)
    a72c:	00001bee 	.word	0x00001bee
    a730:	00001101 	.word	0x00001101
    a734:	0000c115 	.word	0x0000c115
    a738:	0000c355 	.word	0x0000c355
    a73c:	0000053a 	.word	0x0000053a
    a740:	200040bc 	.word	0x200040bc

0000a744 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
    a744:	b580      	push	{r7, lr}
    a746:	b086      	sub	sp, #24
    a748:	af00      	add	r7, sp, #0
    a74a:	0002      	movs	r2, r0
    a74c:	1dfb      	adds	r3, r7, #7
    a74e:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    a750:	4b2e      	ldr	r3, [pc, #184]	; (a80c <sd_spi_op_cond+0xc8>)
    a752:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    a754:	4b2e      	ldr	r3, [pc, #184]	; (a810 <sd_spi_op_cond+0xcc>)
    a756:	2100      	movs	r1, #0
    a758:	0018      	movs	r0, r3
    a75a:	4b2e      	ldr	r3, [pc, #184]	; (a814 <sd_spi_op_cond+0xd0>)
    a75c:	4798      	blx	r3
    a75e:	0003      	movs	r3, r0
    a760:	001a      	movs	r2, r3
    a762:	2301      	movs	r3, #1
    a764:	4053      	eors	r3, r2
    a766:	b2db      	uxtb	r3, r3
    a768:	2b00      	cmp	r3, #0
    a76a:	d001      	beq.n	a770 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
    a76c:	2300      	movs	r3, #0
    a76e:	e048      	b.n	a802 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
    a770:	2300      	movs	r3, #0
    a772:	617b      	str	r3, [r7, #20]
		if (v2) {
    a774:	1dfb      	adds	r3, r7, #7
    a776:	781b      	ldrb	r3, [r3, #0]
    a778:	2b00      	cmp	r3, #0
    a77a:	d004      	beq.n	a786 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
    a77c:	697b      	ldr	r3, [r7, #20]
    a77e:	2280      	movs	r2, #128	; 0x80
    a780:	05d2      	lsls	r2, r2, #23
    a782:	4313      	orrs	r3, r2
    a784:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    a786:	697b      	ldr	r3, [r7, #20]
    a788:	4a23      	ldr	r2, [pc, #140]	; (a818 <sd_spi_op_cond+0xd4>)
    a78a:	0019      	movs	r1, r3
    a78c:	0010      	movs	r0, r2
    a78e:	4b21      	ldr	r3, [pc, #132]	; (a814 <sd_spi_op_cond+0xd0>)
    a790:	4798      	blx	r3
    a792:	0003      	movs	r3, r0
    a794:	001a      	movs	r2, r3
    a796:	2301      	movs	r3, #1
    a798:	4053      	eors	r3, r2
    a79a:	b2db      	uxtb	r3, r3
    a79c:	2b00      	cmp	r3, #0
    a79e:	d001      	beq.n	a7a4 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
    a7a0:	2300      	movs	r3, #0
    a7a2:	e02e      	b.n	a802 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
    a7a4:	4b1d      	ldr	r3, [pc, #116]	; (a81c <sd_spi_op_cond+0xd8>)
    a7a6:	4798      	blx	r3
    a7a8:	0003      	movs	r3, r0
    a7aa:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
    a7ac:	68fb      	ldr	r3, [r7, #12]
    a7ae:	2201      	movs	r2, #1
    a7b0:	4013      	ands	r3, r2
    a7b2:	d006      	beq.n	a7c2 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
    a7b4:	693b      	ldr	r3, [r7, #16]
    a7b6:	1e5a      	subs	r2, r3, #1
    a7b8:	613a      	str	r2, [r7, #16]
    a7ba:	2b00      	cmp	r3, #0
    a7bc:	d1ca      	bne.n	a754 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
    a7be:	2300      	movs	r3, #0
    a7c0:	e01f      	b.n	a802 <sd_spi_op_cond+0xbe>
			break;
    a7c2:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    a7c4:	4b16      	ldr	r3, [pc, #88]	; (a820 <sd_spi_op_cond+0xdc>)
    a7c6:	2100      	movs	r1, #0
    a7c8:	0018      	movs	r0, r3
    a7ca:	4b12      	ldr	r3, [pc, #72]	; (a814 <sd_spi_op_cond+0xd0>)
    a7cc:	4798      	blx	r3
    a7ce:	0003      	movs	r3, r0
    a7d0:	001a      	movs	r2, r3
    a7d2:	2301      	movs	r3, #1
    a7d4:	4053      	eors	r3, r2
    a7d6:	b2db      	uxtb	r3, r3
    a7d8:	2b00      	cmp	r3, #0
    a7da:	d001      	beq.n	a7e0 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    a7dc:	2300      	movs	r3, #0
    a7de:	e010      	b.n	a802 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
    a7e0:	4b0e      	ldr	r3, [pc, #56]	; (a81c <sd_spi_op_cond+0xd8>)
    a7e2:	4798      	blx	r3
    a7e4:	0002      	movs	r2, r0
    a7e6:	2380      	movs	r3, #128	; 0x80
    a7e8:	05db      	lsls	r3, r3, #23
    a7ea:	4013      	ands	r3, r2
    a7ec:	d008      	beq.n	a800 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
    a7ee:	4b0d      	ldr	r3, [pc, #52]	; (a824 <sd_spi_op_cond+0xe0>)
    a7f0:	681a      	ldr	r2, [r3, #0]
    a7f2:	4b0c      	ldr	r3, [pc, #48]	; (a824 <sd_spi_op_cond+0xe0>)
    a7f4:	681b      	ldr	r3, [r3, #0]
    a7f6:	7adb      	ldrb	r3, [r3, #11]
    a7f8:	2108      	movs	r1, #8
    a7fa:	430b      	orrs	r3, r1
    a7fc:	b2db      	uxtb	r3, r3
    a7fe:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    a800:	2301      	movs	r3, #1
}
    a802:	0018      	movs	r0, r3
    a804:	46bd      	mov	sp, r7
    a806:	b006      	add	sp, #24
    a808:	bd80      	pop	{r7, pc}
    a80a:	46c0      	nop			; (mov r8, r8)
    a80c:	00001bee 	.word	0x00001bee
    a810:	00001137 	.word	0x00001137
    a814:	0000c115 	.word	0x0000c115
    a818:	00001129 	.word	0x00001129
    a81c:	0000c355 	.word	0x0000c355
    a820:	0000053a 	.word	0x0000053a
    a824:	200040bc 	.word	0x200040bc

0000a828 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    a828:	b580      	push	{r7, lr}
    a82a:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    a82c:	2301      	movs	r3, #1
}
    a82e:	0018      	movs	r0, r3
    a830:	46bd      	mov	sp, r7
    a832:	bd80      	pop	{r7, pc}

0000a834 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    a834:	b580      	push	{r7, lr}
    a836:	b084      	sub	sp, #16
    a838:	af00      	add	r7, sp, #0
    a83a:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    a83c:	687b      	ldr	r3, [r7, #4]
    a83e:	2200      	movs	r2, #0
    a840:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    a842:	23d5      	movs	r3, #213	; 0xd5
    a844:	005b      	lsls	r3, r3, #1
    a846:	4a14      	ldr	r2, [pc, #80]	; (a898 <sd_cmd8+0x64>)
    a848:	0019      	movs	r1, r3
    a84a:	0010      	movs	r0, r2
    a84c:	4b13      	ldr	r3, [pc, #76]	; (a89c <sd_cmd8+0x68>)
    a84e:	4798      	blx	r3
    a850:	0003      	movs	r3, r0
    a852:	001a      	movs	r2, r3
    a854:	2301      	movs	r3, #1
    a856:	4053      	eors	r3, r2
    a858:	b2db      	uxtb	r3, r3
    a85a:	2b00      	cmp	r3, #0
    a85c:	d001      	beq.n	a862 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    a85e:	2301      	movs	r3, #1
    a860:	e015      	b.n	a88e <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    a862:	4b0f      	ldr	r3, [pc, #60]	; (a8a0 <sd_cmd8+0x6c>)
    a864:	4798      	blx	r3
    a866:	0003      	movs	r3, r0
    a868:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    a86a:	68fb      	ldr	r3, [r7, #12]
    a86c:	3301      	adds	r3, #1
    a86e:	d101      	bne.n	a874 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    a870:	2301      	movs	r3, #1
    a872:	e00c      	b.n	a88e <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    a874:	68fb      	ldr	r3, [r7, #12]
    a876:	051b      	lsls	r3, r3, #20
    a878:	0d1a      	lsrs	r2, r3, #20
    a87a:	23d5      	movs	r3, #213	; 0xd5
    a87c:	005b      	lsls	r3, r3, #1
    a87e:	429a      	cmp	r2, r3
    a880:	d001      	beq.n	a886 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    a882:	2300      	movs	r3, #0
    a884:	e003      	b.n	a88e <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    a886:	687b      	ldr	r3, [r7, #4]
    a888:	2201      	movs	r2, #1
    a88a:	701a      	strb	r2, [r3, #0]
	return true;
    a88c:	2301      	movs	r3, #1
}
    a88e:	0018      	movs	r0, r3
    a890:	46bd      	mov	sp, r7
    a892:	b004      	add	sp, #16
    a894:	bd80      	pop	{r7, pc}
    a896:	46c0      	nop			; (mov r8, r8)
    a898:	00005508 	.word	0x00005508
    a89c:	0000c115 	.word	0x0000c115
    a8a0:	0000c355 	.word	0x0000c355

0000a8a4 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    a8a4:	b590      	push	{r4, r7, lr}
    a8a6:	b089      	sub	sp, #36	; 0x24
    a8a8:	af02      	add	r7, sp, #8
    a8aa:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    a8ac:	2380      	movs	r3, #128	; 0x80
    a8ae:	009a      	lsls	r2, r3, #2
    a8b0:	4841      	ldr	r0, [pc, #260]	; (a9b8 <mmc_cmd8+0x114>)
    a8b2:	2300      	movs	r3, #0
    a8b4:	9300      	str	r3, [sp, #0]
    a8b6:	2301      	movs	r3, #1
    a8b8:	2100      	movs	r1, #0
    a8ba:	4c40      	ldr	r4, [pc, #256]	; (a9bc <mmc_cmd8+0x118>)
    a8bc:	47a0      	blx	r4
    a8be:	0003      	movs	r3, r0
    a8c0:	001a      	movs	r2, r3
    a8c2:	2301      	movs	r3, #1
    a8c4:	4053      	eors	r3, r2
    a8c6:	b2db      	uxtb	r3, r3
    a8c8:	2b00      	cmp	r3, #0
    a8ca:	d001      	beq.n	a8d0 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    a8cc:	2300      	movs	r3, #0
    a8ce:	e06e      	b.n	a9ae <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    a8d0:	2316      	movs	r3, #22
    a8d2:	18fb      	adds	r3, r7, r3
    a8d4:	2200      	movs	r2, #0
    a8d6:	801a      	strh	r2, [r3, #0]
    a8d8:	e014      	b.n	a904 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    a8da:	2310      	movs	r3, #16
    a8dc:	18fb      	adds	r3, r7, r3
    a8de:	0018      	movs	r0, r3
    a8e0:	4b37      	ldr	r3, [pc, #220]	; (a9c0 <mmc_cmd8+0x11c>)
    a8e2:	4798      	blx	r3
    a8e4:	0003      	movs	r3, r0
    a8e6:	001a      	movs	r2, r3
    a8e8:	2301      	movs	r3, #1
    a8ea:	4053      	eors	r3, r2
    a8ec:	b2db      	uxtb	r3, r3
    a8ee:	2b00      	cmp	r3, #0
    a8f0:	d001      	beq.n	a8f6 <mmc_cmd8+0x52>
			return false;
    a8f2:	2300      	movs	r3, #0
    a8f4:	e05b      	b.n	a9ae <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    a8f6:	2316      	movs	r3, #22
    a8f8:	18fb      	adds	r3, r7, r3
    a8fa:	881a      	ldrh	r2, [r3, #0]
    a8fc:	2316      	movs	r3, #22
    a8fe:	18fb      	adds	r3, r7, r3
    a900:	3201      	adds	r2, #1
    a902:	801a      	strh	r2, [r3, #0]
    a904:	2316      	movs	r3, #22
    a906:	18fb      	adds	r3, r7, r3
    a908:	881b      	ldrh	r3, [r3, #0]
    a90a:	2b31      	cmp	r3, #49	; 0x31
    a90c:	d9e5      	bls.n	a8da <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    a90e:	693b      	ldr	r3, [r7, #16]
    a910:	b2db      	uxtb	r3, r3
    a912:	2202      	movs	r2, #2
    a914:	4013      	ands	r3, r2
    a916:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    a918:	687b      	ldr	r3, [r7, #4]
    a91a:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    a91c:	4b29      	ldr	r3, [pc, #164]	; (a9c4 <mmc_cmd8+0x120>)
    a91e:	681b      	ldr	r3, [r3, #0]
    a920:	330e      	adds	r3, #14
    a922:	0018      	movs	r0, r3
    a924:	230c      	movs	r3, #12
    a926:	223e      	movs	r2, #62	; 0x3e
    a928:	2180      	movs	r1, #128	; 0x80
    a92a:	4c27      	ldr	r4, [pc, #156]	; (a9c8 <mmc_cmd8+0x124>)
    a92c:	47a0      	blx	r4
    a92e:	0002      	movs	r2, r0
    a930:	4b26      	ldr	r3, [pc, #152]	; (a9cc <mmc_cmd8+0x128>)
    a932:	429a      	cmp	r2, r3
    a934:	d135      	bne.n	a9a2 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    a936:	e014      	b.n	a962 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    a938:	230c      	movs	r3, #12
    a93a:	18fb      	adds	r3, r7, r3
    a93c:	0018      	movs	r0, r3
    a93e:	4b20      	ldr	r3, [pc, #128]	; (a9c0 <mmc_cmd8+0x11c>)
    a940:	4798      	blx	r3
    a942:	0003      	movs	r3, r0
    a944:	001a      	movs	r2, r3
    a946:	2301      	movs	r3, #1
    a948:	4053      	eors	r3, r2
    a94a:	b2db      	uxtb	r3, r3
    a94c:	2b00      	cmp	r3, #0
    a94e:	d001      	beq.n	a954 <mmc_cmd8+0xb0>
				return false;
    a950:	2300      	movs	r3, #0
    a952:	e02c      	b.n	a9ae <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    a954:	2316      	movs	r3, #22
    a956:	18fb      	adds	r3, r7, r3
    a958:	881a      	ldrh	r2, [r3, #0]
    a95a:	2316      	movs	r3, #22
    a95c:	18fb      	adds	r3, r7, r3
    a95e:	3201      	adds	r2, #1
    a960:	801a      	strh	r2, [r3, #0]
    a962:	2316      	movs	r3, #22
    a964:	18fb      	adds	r3, r7, r3
    a966:	881b      	ldrh	r3, [r3, #0]
    a968:	2b35      	cmp	r3, #53	; 0x35
    a96a:	d9e5      	bls.n	a938 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    a96c:	4b15      	ldr	r3, [pc, #84]	; (a9c4 <mmc_cmd8+0x120>)
    a96e:	681b      	ldr	r3, [r3, #0]
    a970:	68fa      	ldr	r2, [r7, #12]
    a972:	0852      	lsrs	r2, r2, #1
    a974:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    a976:	e014      	b.n	a9a2 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    a978:	230c      	movs	r3, #12
    a97a:	18fb      	adds	r3, r7, r3
    a97c:	0018      	movs	r0, r3
    a97e:	4b10      	ldr	r3, [pc, #64]	; (a9c0 <mmc_cmd8+0x11c>)
    a980:	4798      	blx	r3
    a982:	0003      	movs	r3, r0
    a984:	001a      	movs	r2, r3
    a986:	2301      	movs	r3, #1
    a988:	4053      	eors	r3, r2
    a98a:	b2db      	uxtb	r3, r3
    a98c:	2b00      	cmp	r3, #0
    a98e:	d001      	beq.n	a994 <mmc_cmd8+0xf0>
			return false;
    a990:	2300      	movs	r3, #0
    a992:	e00c      	b.n	a9ae <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    a994:	2316      	movs	r3, #22
    a996:	18fb      	adds	r3, r7, r3
    a998:	881a      	ldrh	r2, [r3, #0]
    a99a:	2316      	movs	r3, #22
    a99c:	18fb      	adds	r3, r7, r3
    a99e:	3201      	adds	r2, #1
    a9a0:	801a      	strh	r2, [r3, #0]
    a9a2:	2316      	movs	r3, #22
    a9a4:	18fb      	adds	r3, r7, r3
    a9a6:	881b      	ldrh	r3, [r3, #0]
    a9a8:	2b7f      	cmp	r3, #127	; 0x7f
    a9aa:	d9e5      	bls.n	a978 <mmc_cmd8+0xd4>
		}
	}
	return true;
    a9ac:	2301      	movs	r3, #1
}
    a9ae:	0018      	movs	r0, r3
    a9b0:	46bd      	mov	sp, r7
    a9b2:	b007      	add	sp, #28
    a9b4:	bd90      	pop	{r4, r7, pc}
    a9b6:	46c0      	nop			; (mov r8, r8)
    a9b8:	00081108 	.word	0x00081108
    a9bc:	0000c13d 	.word	0x0000c13d
    a9c0:	0000c369 	.word	0x0000c369
    a9c4:	200040bc 	.word	0x200040bc
    a9c8:	0000a53d 	.word	0x0000a53d
    a9cc:	00000fff 	.word	0x00000fff

0000a9d0 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    a9d0:	b590      	push	{r4, r7, lr}
    a9d2:	b083      	sub	sp, #12
    a9d4:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    a9d6:	4b15      	ldr	r3, [pc, #84]	; (aa2c <sd_mmc_cmd9_spi+0x5c>)
    a9d8:	681b      	ldr	r3, [r3, #0]
    a9da:	891b      	ldrh	r3, [r3, #8]
    a9dc:	0419      	lsls	r1, r3, #16
    a9de:	4814      	ldr	r0, [pc, #80]	; (aa30 <sd_mmc_cmd9_spi+0x60>)
    a9e0:	2301      	movs	r3, #1
    a9e2:	9300      	str	r3, [sp, #0]
    a9e4:	2301      	movs	r3, #1
    a9e6:	2210      	movs	r2, #16
    a9e8:	4c12      	ldr	r4, [pc, #72]	; (aa34 <sd_mmc_cmd9_spi+0x64>)
    a9ea:	47a0      	blx	r4
    a9ec:	0003      	movs	r3, r0
    a9ee:	001a      	movs	r2, r3
    a9f0:	2301      	movs	r3, #1
    a9f2:	4053      	eors	r3, r2
    a9f4:	b2db      	uxtb	r3, r3
    a9f6:	2b00      	cmp	r3, #0
    a9f8:	d001      	beq.n	a9fe <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    a9fa:	2300      	movs	r3, #0
    a9fc:	e012      	b.n	aa24 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    a9fe:	4b0b      	ldr	r3, [pc, #44]	; (aa2c <sd_mmc_cmd9_spi+0x5c>)
    aa00:	681b      	ldr	r3, [r3, #0]
    aa02:	330e      	adds	r3, #14
    aa04:	2101      	movs	r1, #1
    aa06:	0018      	movs	r0, r3
    aa08:	4b0b      	ldr	r3, [pc, #44]	; (aa38 <sd_mmc_cmd9_spi+0x68>)
    aa0a:	4798      	blx	r3
    aa0c:	0003      	movs	r3, r0
    aa0e:	001a      	movs	r2, r3
    aa10:	2301      	movs	r3, #1
    aa12:	4053      	eors	r3, r2
    aa14:	b2db      	uxtb	r3, r3
    aa16:	2b00      	cmp	r3, #0
    aa18:	d001      	beq.n	aa1e <sd_mmc_cmd9_spi+0x4e>
		return false;
    aa1a:	2300      	movs	r3, #0
    aa1c:	e002      	b.n	aa24 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    aa1e:	4b07      	ldr	r3, [pc, #28]	; (aa3c <sd_mmc_cmd9_spi+0x6c>)
    aa20:	4798      	blx	r3
    aa22:	0003      	movs	r3, r0
}
    aa24:	0018      	movs	r0, r3
    aa26:	46bd      	mov	sp, r7
    aa28:	b001      	add	sp, #4
    aa2a:	bd90      	pop	{r4, r7, pc}
    aa2c:	200040bc 	.word	0x200040bc
    aa30:	00081109 	.word	0x00081109
    aa34:	0000c13d 	.word	0x0000c13d
    aa38:	0000c40d 	.word	0x0000c40d
    aa3c:	0000c4b1 	.word	0x0000c4b1

0000aa40 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    aa40:	b5b0      	push	{r4, r5, r7, lr}
    aa42:	b084      	sub	sp, #16
    aa44:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    aa46:	4b45      	ldr	r3, [pc, #276]	; (ab5c <mmc_decode_csd+0x11c>)
    aa48:	681b      	ldr	r3, [r3, #0]
    aa4a:	330e      	adds	r3, #14
    aa4c:	0018      	movs	r0, r3
    aa4e:	2304      	movs	r3, #4
    aa50:	227a      	movs	r2, #122	; 0x7a
    aa52:	2180      	movs	r1, #128	; 0x80
    aa54:	4c42      	ldr	r4, [pc, #264]	; (ab60 <mmc_decode_csd+0x120>)
    aa56:	47a0      	blx	r4
    aa58:	0003      	movs	r3, r0
    aa5a:	2b02      	cmp	r3, #2
    aa5c:	d011      	beq.n	aa82 <mmc_decode_csd+0x42>
    aa5e:	d802      	bhi.n	aa66 <mmc_decode_csd+0x26>
    aa60:	2b01      	cmp	r3, #1
    aa62:	d009      	beq.n	aa78 <mmc_decode_csd+0x38>
    aa64:	e003      	b.n	aa6e <mmc_decode_csd+0x2e>
    aa66:	2b03      	cmp	r3, #3
    aa68:	d010      	beq.n	aa8c <mmc_decode_csd+0x4c>
    aa6a:	2b04      	cmp	r3, #4
    aa6c:	d013      	beq.n	aa96 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    aa6e:	4b3b      	ldr	r3, [pc, #236]	; (ab5c <mmc_decode_csd+0x11c>)
    aa70:	681b      	ldr	r3, [r3, #0]
    aa72:	2212      	movs	r2, #18
    aa74:	731a      	strb	r2, [r3, #12]
		break;
    aa76:	e013      	b.n	aaa0 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    aa78:	4b38      	ldr	r3, [pc, #224]	; (ab5c <mmc_decode_csd+0x11c>)
    aa7a:	681b      	ldr	r3, [r3, #0]
    aa7c:	2214      	movs	r2, #20
    aa7e:	731a      	strb	r2, [r3, #12]
		break;
    aa80:	e00e      	b.n	aaa0 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    aa82:	4b36      	ldr	r3, [pc, #216]	; (ab5c <mmc_decode_csd+0x11c>)
    aa84:	681b      	ldr	r3, [r3, #0]
    aa86:	2222      	movs	r2, #34	; 0x22
    aa88:	731a      	strb	r2, [r3, #12]
		break;
    aa8a:	e009      	b.n	aaa0 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    aa8c:	4b33      	ldr	r3, [pc, #204]	; (ab5c <mmc_decode_csd+0x11c>)
    aa8e:	681b      	ldr	r3, [r3, #0]
    aa90:	2230      	movs	r2, #48	; 0x30
    aa92:	731a      	strb	r2, [r3, #12]
		break;
    aa94:	e004      	b.n	aaa0 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    aa96:	4b31      	ldr	r3, [pc, #196]	; (ab5c <mmc_decode_csd+0x11c>)
    aa98:	681b      	ldr	r3, [r3, #0]
    aa9a:	2240      	movs	r2, #64	; 0x40
    aa9c:	731a      	strb	r2, [r3, #12]
		break;
    aa9e:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    aaa0:	4b2e      	ldr	r3, [pc, #184]	; (ab5c <mmc_decode_csd+0x11c>)
    aaa2:	681b      	ldr	r3, [r3, #0]
    aaa4:	330e      	adds	r3, #14
    aaa6:	0018      	movs	r0, r3
    aaa8:	2308      	movs	r3, #8
    aaaa:	2260      	movs	r2, #96	; 0x60
    aaac:	2180      	movs	r1, #128	; 0x80
    aaae:	4c2c      	ldr	r4, [pc, #176]	; (ab60 <mmc_decode_csd+0x120>)
    aab0:	47a0      	blx	r4
    aab2:	0003      	movs	r3, r0
    aab4:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    aab6:	68fb      	ldr	r3, [r7, #12]
    aab8:	2207      	movs	r2, #7
    aaba:	401a      	ands	r2, r3
    aabc:	4b29      	ldr	r3, [pc, #164]	; (ab64 <mmc_decode_csd+0x124>)
    aabe:	0092      	lsls	r2, r2, #2
    aac0:	58d3      	ldr	r3, [r2, r3]
    aac2:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    aac4:	68fb      	ldr	r3, [r7, #12]
    aac6:	08db      	lsrs	r3, r3, #3
    aac8:	220f      	movs	r2, #15
    aaca:	401a      	ands	r2, r3
    aacc:	4b26      	ldr	r3, [pc, #152]	; (ab68 <mmc_decode_csd+0x128>)
    aace:	0092      	lsls	r2, r2, #2
    aad0:	58d3      	ldr	r3, [r2, r3]
    aad2:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    aad4:	4b21      	ldr	r3, [pc, #132]	; (ab5c <mmc_decode_csd+0x11c>)
    aad6:	681b      	ldr	r3, [r3, #0]
    aad8:	68ba      	ldr	r2, [r7, #8]
    aada:	6879      	ldr	r1, [r7, #4]
    aadc:	434a      	muls	r2, r1
    aade:	21fa      	movs	r1, #250	; 0xfa
    aae0:	0089      	lsls	r1, r1, #2
    aae2:	434a      	muls	r2, r1
    aae4:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    aae6:	4b1d      	ldr	r3, [pc, #116]	; (ab5c <mmc_decode_csd+0x11c>)
    aae8:	681b      	ldr	r3, [r3, #0]
    aaea:	330e      	adds	r3, #14
    aaec:	0018      	movs	r0, r3
    aaee:	230c      	movs	r3, #12
    aaf0:	223e      	movs	r2, #62	; 0x3e
    aaf2:	2180      	movs	r1, #128	; 0x80
    aaf4:	4c1a      	ldr	r4, [pc, #104]	; (ab60 <mmc_decode_csd+0x120>)
    aaf6:	47a0      	blx	r4
    aaf8:	0002      	movs	r2, r0
    aafa:	4b1c      	ldr	r3, [pc, #112]	; (ab6c <mmc_decode_csd+0x12c>)
    aafc:	429a      	cmp	r2, r3
    aafe:	d028      	beq.n	ab52 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    ab00:	4b16      	ldr	r3, [pc, #88]	; (ab5c <mmc_decode_csd+0x11c>)
    ab02:	681b      	ldr	r3, [r3, #0]
    ab04:	330e      	adds	r3, #14
    ab06:	0018      	movs	r0, r3
    ab08:	230c      	movs	r3, #12
    ab0a:	223e      	movs	r2, #62	; 0x3e
    ab0c:	2180      	movs	r1, #128	; 0x80
    ab0e:	4c14      	ldr	r4, [pc, #80]	; (ab60 <mmc_decode_csd+0x120>)
    ab10:	47a0      	blx	r4
    ab12:	0003      	movs	r3, r0
    ab14:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    ab16:	4b11      	ldr	r3, [pc, #68]	; (ab5c <mmc_decode_csd+0x11c>)
    ab18:	681b      	ldr	r3, [r3, #0]
    ab1a:	330e      	adds	r3, #14
    ab1c:	0018      	movs	r0, r3
    ab1e:	2303      	movs	r3, #3
    ab20:	222f      	movs	r2, #47	; 0x2f
    ab22:	2180      	movs	r1, #128	; 0x80
    ab24:	4d0e      	ldr	r5, [pc, #56]	; (ab60 <mmc_decode_csd+0x120>)
    ab26:	47a8      	blx	r5
    ab28:	0003      	movs	r3, r0
    ab2a:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    ab2c:	409c      	lsls	r4, r3
    ab2e:	0023      	movs	r3, r4
    ab30:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    ab32:	4b0a      	ldr	r3, [pc, #40]	; (ab5c <mmc_decode_csd+0x11c>)
    ab34:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    ab36:	4b09      	ldr	r3, [pc, #36]	; (ab5c <mmc_decode_csd+0x11c>)
    ab38:	681b      	ldr	r3, [r3, #0]
    ab3a:	330e      	adds	r3, #14
    ab3c:	0018      	movs	r0, r3
    ab3e:	2304      	movs	r3, #4
    ab40:	2250      	movs	r2, #80	; 0x50
    ab42:	2180      	movs	r1, #128	; 0x80
    ab44:	4d06      	ldr	r5, [pc, #24]	; (ab60 <mmc_decode_csd+0x120>)
    ab46:	47a8      	blx	r5
    ab48:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    ab4a:	683b      	ldr	r3, [r7, #0]
    ab4c:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    ab4e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    ab50:	6063      	str	r3, [r4, #4]
	}
}
    ab52:	46c0      	nop			; (mov r8, r8)
    ab54:	46bd      	mov	sp, r7
    ab56:	b004      	add	sp, #16
    ab58:	bdb0      	pop	{r4, r5, r7, pc}
    ab5a:	46c0      	nop			; (mov r8, r8)
    ab5c:	200040bc 	.word	0x200040bc
    ab60:	0000a53d 	.word	0x0000a53d
    ab64:	00025240 	.word	0x00025240
    ab68:	0002529c 	.word	0x0002529c
    ab6c:	00000fff 	.word	0x00000fff

0000ab70 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    ab70:	b5b0      	push	{r4, r5, r7, lr}
    ab72:	b084      	sub	sp, #16
    ab74:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    ab76:	4b35      	ldr	r3, [pc, #212]	; (ac4c <sd_decode_csd+0xdc>)
    ab78:	681b      	ldr	r3, [r3, #0]
    ab7a:	330e      	adds	r3, #14
    ab7c:	0018      	movs	r0, r3
    ab7e:	2308      	movs	r3, #8
    ab80:	2260      	movs	r2, #96	; 0x60
    ab82:	2180      	movs	r1, #128	; 0x80
    ab84:	4c32      	ldr	r4, [pc, #200]	; (ac50 <sd_decode_csd+0xe0>)
    ab86:	47a0      	blx	r4
    ab88:	0003      	movs	r3, r0
    ab8a:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    ab8c:	68fb      	ldr	r3, [r7, #12]
    ab8e:	2207      	movs	r2, #7
    ab90:	401a      	ands	r2, r3
    ab92:	4b30      	ldr	r3, [pc, #192]	; (ac54 <sd_decode_csd+0xe4>)
    ab94:	0092      	lsls	r2, r2, #2
    ab96:	58d3      	ldr	r3, [r2, r3]
    ab98:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    ab9a:	68fb      	ldr	r3, [r7, #12]
    ab9c:	08db      	lsrs	r3, r3, #3
    ab9e:	220f      	movs	r2, #15
    aba0:	401a      	ands	r2, r3
    aba2:	4b2d      	ldr	r3, [pc, #180]	; (ac58 <sd_decode_csd+0xe8>)
    aba4:	0092      	lsls	r2, r2, #2
    aba6:	58d3      	ldr	r3, [r2, r3]
    aba8:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    abaa:	4b28      	ldr	r3, [pc, #160]	; (ac4c <sd_decode_csd+0xdc>)
    abac:	681b      	ldr	r3, [r3, #0]
    abae:	68ba      	ldr	r2, [r7, #8]
    abb0:	6879      	ldr	r1, [r7, #4]
    abb2:	434a      	muls	r2, r1
    abb4:	21fa      	movs	r1, #250	; 0xfa
    abb6:	0089      	lsls	r1, r1, #2
    abb8:	434a      	muls	r2, r1
    abba:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    abbc:	4b23      	ldr	r3, [pc, #140]	; (ac4c <sd_decode_csd+0xdc>)
    abbe:	681b      	ldr	r3, [r3, #0]
    abc0:	330e      	adds	r3, #14
    abc2:	0018      	movs	r0, r3
    abc4:	2302      	movs	r3, #2
    abc6:	227e      	movs	r2, #126	; 0x7e
    abc8:	2180      	movs	r1, #128	; 0x80
    abca:	4c21      	ldr	r4, [pc, #132]	; (ac50 <sd_decode_csd+0xe0>)
    abcc:	47a0      	blx	r4
    abce:	1e03      	subs	r3, r0, #0
    abd0:	d00f      	beq.n	abf2 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    abd2:	4b1e      	ldr	r3, [pc, #120]	; (ac4c <sd_decode_csd+0xdc>)
    abd4:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    abd6:	4b1d      	ldr	r3, [pc, #116]	; (ac4c <sd_decode_csd+0xdc>)
    abd8:	681b      	ldr	r3, [r3, #0]
    abda:	330e      	adds	r3, #14
    abdc:	0018      	movs	r0, r3
    abde:	2316      	movs	r3, #22
    abe0:	2230      	movs	r2, #48	; 0x30
    abe2:	2180      	movs	r1, #128	; 0x80
    abe4:	4d1a      	ldr	r5, [pc, #104]	; (ac50 <sd_decode_csd+0xe0>)
    abe6:	47a8      	blx	r5
    abe8:	0003      	movs	r3, r0
				* 512;
    abea:	3301      	adds	r3, #1
    abec:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    abee:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    abf0:	e028      	b.n	ac44 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    abf2:	4b16      	ldr	r3, [pc, #88]	; (ac4c <sd_decode_csd+0xdc>)
    abf4:	681b      	ldr	r3, [r3, #0]
    abf6:	330e      	adds	r3, #14
    abf8:	0018      	movs	r0, r3
    abfa:	230c      	movs	r3, #12
    abfc:	223e      	movs	r2, #62	; 0x3e
    abfe:	2180      	movs	r1, #128	; 0x80
    ac00:	4c13      	ldr	r4, [pc, #76]	; (ac50 <sd_decode_csd+0xe0>)
    ac02:	47a0      	blx	r4
    ac04:	0003      	movs	r3, r0
    ac06:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    ac08:	4b10      	ldr	r3, [pc, #64]	; (ac4c <sd_decode_csd+0xdc>)
    ac0a:	681b      	ldr	r3, [r3, #0]
    ac0c:	330e      	adds	r3, #14
    ac0e:	0018      	movs	r0, r3
    ac10:	2303      	movs	r3, #3
    ac12:	222f      	movs	r2, #47	; 0x2f
    ac14:	2180      	movs	r1, #128	; 0x80
    ac16:	4d0e      	ldr	r5, [pc, #56]	; (ac50 <sd_decode_csd+0xe0>)
    ac18:	47a8      	blx	r5
    ac1a:	0003      	movs	r3, r0
    ac1c:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    ac1e:	409c      	lsls	r4, r3
    ac20:	0023      	movs	r3, r4
    ac22:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    ac24:	4b09      	ldr	r3, [pc, #36]	; (ac4c <sd_decode_csd+0xdc>)
    ac26:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    ac28:	4b08      	ldr	r3, [pc, #32]	; (ac4c <sd_decode_csd+0xdc>)
    ac2a:	681b      	ldr	r3, [r3, #0]
    ac2c:	330e      	adds	r3, #14
    ac2e:	0018      	movs	r0, r3
    ac30:	2304      	movs	r3, #4
    ac32:	2250      	movs	r2, #80	; 0x50
    ac34:	2180      	movs	r1, #128	; 0x80
    ac36:	4d06      	ldr	r5, [pc, #24]	; (ac50 <sd_decode_csd+0xe0>)
    ac38:	47a8      	blx	r5
    ac3a:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    ac3c:	683b      	ldr	r3, [r7, #0]
    ac3e:	4093      	lsls	r3, r2
				/ 1024;
    ac40:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    ac42:	6063      	str	r3, [r4, #4]
}
    ac44:	46c0      	nop			; (mov r8, r8)
    ac46:	46bd      	mov	sp, r7
    ac48:	b004      	add	sp, #16
    ac4a:	bdb0      	pop	{r4, r5, r7, pc}
    ac4c:	200040bc 	.word	0x200040bc
    ac50:	0000a53d 	.word	0x0000a53d
    ac54:	00025240 	.word	0x00025240
    ac58:	0002525c 	.word	0x0002525c

0000ac5c <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    ac5c:	b580      	push	{r7, lr}
    ac5e:	b082      	sub	sp, #8
    ac60:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    ac62:	4b11      	ldr	r3, [pc, #68]	; (aca8 <sd_mmc_cmd13+0x4c>)
    ac64:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    ac66:	4b11      	ldr	r3, [pc, #68]	; (acac <sd_mmc_cmd13+0x50>)
    ac68:	2100      	movs	r1, #0
    ac6a:	0018      	movs	r0, r3
    ac6c:	4b10      	ldr	r3, [pc, #64]	; (acb0 <sd_mmc_cmd13+0x54>)
    ac6e:	4798      	blx	r3
    ac70:	0003      	movs	r3, r0
    ac72:	001a      	movs	r2, r3
    ac74:	2301      	movs	r3, #1
    ac76:	4053      	eors	r3, r2
    ac78:	b2db      	uxtb	r3, r3
    ac7a:	2b00      	cmp	r3, #0
    ac7c:	d001      	beq.n	ac82 <sd_mmc_cmd13+0x26>
				return false;
    ac7e:	2300      	movs	r3, #0
    ac80:	e00e      	b.n	aca0 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    ac82:	4b0c      	ldr	r3, [pc, #48]	; (acb4 <sd_mmc_cmd13+0x58>)
    ac84:	4798      	blx	r3
    ac86:	0002      	movs	r2, r0
    ac88:	23ff      	movs	r3, #255	; 0xff
    ac8a:	4013      	ands	r3, r2
    ac8c:	d006      	beq.n	ac9c <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    ac8e:	687b      	ldr	r3, [r7, #4]
    ac90:	1e5a      	subs	r2, r3, #1
    ac92:	607a      	str	r2, [r7, #4]
    ac94:	2b00      	cmp	r3, #0
    ac96:	d1e6      	bne.n	ac66 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    ac98:	2300      	movs	r3, #0
    ac9a:	e001      	b.n	aca0 <sd_mmc_cmd13+0x44>
				break;
    ac9c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    ac9e:	2301      	movs	r3, #1
}
    aca0:	0018      	movs	r0, r3
    aca2:	46bd      	mov	sp, r7
    aca4:	b002      	add	sp, #8
    aca6:	bd80      	pop	{r7, pc}
    aca8:	00030d40 	.word	0x00030d40
    acac:	00001b0d 	.word	0x00001b0d
    acb0:	0000c115 	.word	0x0000c115
    acb4:	0000c355 	.word	0x0000c355

0000acb8 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    acb8:	b590      	push	{r4, r7, lr}
    acba:	b085      	sub	sp, #20
    acbc:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    acbe:	4b38      	ldr	r3, [pc, #224]	; (ada0 <sd_acmd51+0xe8>)
    acc0:	681b      	ldr	r3, [r3, #0]
    acc2:	891b      	ldrh	r3, [r3, #8]
    acc4:	041b      	lsls	r3, r3, #16
    acc6:	4a37      	ldr	r2, [pc, #220]	; (ada4 <sd_acmd51+0xec>)
    acc8:	0019      	movs	r1, r3
    acca:	0010      	movs	r0, r2
    accc:	4b36      	ldr	r3, [pc, #216]	; (ada8 <sd_acmd51+0xf0>)
    acce:	4798      	blx	r3
    acd0:	0003      	movs	r3, r0
    acd2:	001a      	movs	r2, r3
    acd4:	2301      	movs	r3, #1
    acd6:	4053      	eors	r3, r2
    acd8:	b2db      	uxtb	r3, r3
    acda:	2b00      	cmp	r3, #0
    acdc:	d001      	beq.n	ace2 <sd_acmd51+0x2a>
		return false;
    acde:	2300      	movs	r3, #0
    ace0:	e059      	b.n	ad96 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    ace2:	4832      	ldr	r0, [pc, #200]	; (adac <sd_acmd51+0xf4>)
    ace4:	2301      	movs	r3, #1
    ace6:	9300      	str	r3, [sp, #0]
    ace8:	2301      	movs	r3, #1
    acea:	2208      	movs	r2, #8
    acec:	2100      	movs	r1, #0
    acee:	4c30      	ldr	r4, [pc, #192]	; (adb0 <sd_acmd51+0xf8>)
    acf0:	47a0      	blx	r4
    acf2:	0003      	movs	r3, r0
    acf4:	001a      	movs	r2, r3
    acf6:	2301      	movs	r3, #1
    acf8:	4053      	eors	r3, r2
    acfa:	b2db      	uxtb	r3, r3
    acfc:	2b00      	cmp	r3, #0
    acfe:	d001      	beq.n	ad04 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    ad00:	2300      	movs	r3, #0
    ad02:	e048      	b.n	ad96 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    ad04:	003b      	movs	r3, r7
    ad06:	2101      	movs	r1, #1
    ad08:	0018      	movs	r0, r3
    ad0a:	4b2a      	ldr	r3, [pc, #168]	; (adb4 <sd_acmd51+0xfc>)
    ad0c:	4798      	blx	r3
    ad0e:	0003      	movs	r3, r0
    ad10:	001a      	movs	r2, r3
    ad12:	2301      	movs	r3, #1
    ad14:	4053      	eors	r3, r2
    ad16:	b2db      	uxtb	r3, r3
    ad18:	2b00      	cmp	r3, #0
    ad1a:	d001      	beq.n	ad20 <sd_acmd51+0x68>
		return false;
    ad1c:	2300      	movs	r3, #0
    ad1e:	e03a      	b.n	ad96 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    ad20:	4b25      	ldr	r3, [pc, #148]	; (adb8 <sd_acmd51+0x100>)
    ad22:	4798      	blx	r3
    ad24:	0003      	movs	r3, r0
    ad26:	001a      	movs	r2, r3
    ad28:	2301      	movs	r3, #1
    ad2a:	4053      	eors	r3, r2
    ad2c:	b2db      	uxtb	r3, r3
    ad2e:	2b00      	cmp	r3, #0
    ad30:	d001      	beq.n	ad36 <sd_acmd51+0x7e>
		return false;
    ad32:	2300      	movs	r3, #0
    ad34:	e02f      	b.n	ad96 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    ad36:	0038      	movs	r0, r7
    ad38:	2304      	movs	r3, #4
    ad3a:	2238      	movs	r2, #56	; 0x38
    ad3c:	2140      	movs	r1, #64	; 0x40
    ad3e:	4c1f      	ldr	r4, [pc, #124]	; (adbc <sd_acmd51+0x104>)
    ad40:	47a0      	blx	r4
    ad42:	0003      	movs	r3, r0
    ad44:	2b01      	cmp	r3, #1
    ad46:	d008      	beq.n	ad5a <sd_acmd51+0xa2>
    ad48:	d302      	bcc.n	ad50 <sd_acmd51+0x98>
    ad4a:	2b02      	cmp	r3, #2
    ad4c:	d00a      	beq.n	ad64 <sd_acmd51+0xac>
    ad4e:	e01c      	b.n	ad8a <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    ad50:	4b13      	ldr	r3, [pc, #76]	; (ada0 <sd_acmd51+0xe8>)
    ad52:	681b      	ldr	r3, [r3, #0]
    ad54:	2210      	movs	r2, #16
    ad56:	731a      	strb	r2, [r3, #12]
		break;
    ad58:	e01c      	b.n	ad94 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    ad5a:	4b11      	ldr	r3, [pc, #68]	; (ada0 <sd_acmd51+0xe8>)
    ad5c:	681b      	ldr	r3, [r3, #0]
    ad5e:	221a      	movs	r2, #26
    ad60:	731a      	strb	r2, [r3, #12]
		break;
    ad62:	e017      	b.n	ad94 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    ad64:	0038      	movs	r0, r7
    ad66:	2301      	movs	r3, #1
    ad68:	222f      	movs	r2, #47	; 0x2f
    ad6a:	2140      	movs	r1, #64	; 0x40
    ad6c:	4c13      	ldr	r4, [pc, #76]	; (adbc <sd_acmd51+0x104>)
    ad6e:	47a0      	blx	r4
    ad70:	0003      	movs	r3, r0
    ad72:	2b01      	cmp	r3, #1
    ad74:	d104      	bne.n	ad80 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    ad76:	4b0a      	ldr	r3, [pc, #40]	; (ada0 <sd_acmd51+0xe8>)
    ad78:	681b      	ldr	r3, [r3, #0]
    ad7a:	2230      	movs	r2, #48	; 0x30
    ad7c:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    ad7e:	e009      	b.n	ad94 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    ad80:	4b07      	ldr	r3, [pc, #28]	; (ada0 <sd_acmd51+0xe8>)
    ad82:	681b      	ldr	r3, [r3, #0]
    ad84:	2220      	movs	r2, #32
    ad86:	731a      	strb	r2, [r3, #12]
		break;
    ad88:	e004      	b.n	ad94 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    ad8a:	4b05      	ldr	r3, [pc, #20]	; (ada0 <sd_acmd51+0xe8>)
    ad8c:	681b      	ldr	r3, [r3, #0]
    ad8e:	2210      	movs	r2, #16
    ad90:	731a      	strb	r2, [r3, #12]
		break;
    ad92:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    ad94:	2301      	movs	r3, #1
}
    ad96:	0018      	movs	r0, r3
    ad98:	46bd      	mov	sp, r7
    ad9a:	b003      	add	sp, #12
    ad9c:	bd90      	pop	{r4, r7, pc}
    ad9e:	46c0      	nop			; (mov r8, r8)
    ada0:	200040bc 	.word	0x200040bc
    ada4:	00001137 	.word	0x00001137
    ada8:	0000c115 	.word	0x0000c115
    adac:	00081133 	.word	0x00081133
    adb0:	0000c13d 	.word	0x0000c13d
    adb4:	0000c40d 	.word	0x0000c40d
    adb8:	0000c4b1 	.word	0x0000c4b1
    adbc:	0000a53d 	.word	0x0000a53d

0000adc0 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    adc0:	b580      	push	{r7, lr}
    adc2:	b082      	sub	sp, #8
    adc4:	af00      	add	r7, sp, #0
    adc6:	0002      	movs	r2, r0
    adc8:	1dfb      	adds	r3, r7, #7
    adca:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    adcc:	1dfb      	adds	r3, r7, #7
    adce:	781b      	ldrb	r3, [r3, #0]
    add0:	2b00      	cmp	r3, #0
    add2:	d001      	beq.n	add8 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    add4:	2304      	movs	r3, #4
    add6:	e047      	b.n	ae68 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    add8:	1dfb      	adds	r3, r7, #7
    adda:	781b      	ldrb	r3, [r3, #0]
    addc:	4a24      	ldr	r2, [pc, #144]	; (ae70 <sd_mmc_select_slot+0xb0>)
    adde:	015b      	lsls	r3, r3, #5
    ade0:	18d3      	adds	r3, r2, r3
    ade2:	330a      	adds	r3, #10
    ade4:	781b      	ldrb	r3, [r3, #0]
    ade6:	2b04      	cmp	r3, #4
    ade8:	d008      	beq.n	adfc <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    adea:	1dfb      	adds	r3, r7, #7
    adec:	781b      	ldrb	r3, [r3, #0]
    adee:	4a20      	ldr	r2, [pc, #128]	; (ae70 <sd_mmc_select_slot+0xb0>)
    adf0:	015b      	lsls	r3, r3, #5
    adf2:	18d3      	adds	r3, r2, r3
    adf4:	330a      	adds	r3, #10
    adf6:	781b      	ldrb	r3, [r3, #0]
    adf8:	2b03      	cmp	r3, #3
    adfa:	d11d      	bne.n	ae38 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    adfc:	1dfb      	adds	r3, r7, #7
    adfe:	781b      	ldrb	r3, [r3, #0]
    ae00:	4a1b      	ldr	r2, [pc, #108]	; (ae70 <sd_mmc_select_slot+0xb0>)
    ae02:	015b      	lsls	r3, r3, #5
    ae04:	18d3      	adds	r3, r2, r3
    ae06:	330a      	adds	r3, #10
    ae08:	2202      	movs	r2, #2
    ae0a:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    ae0c:	1dfb      	adds	r3, r7, #7
    ae0e:	781a      	ldrb	r2, [r3, #0]
    ae10:	4b17      	ldr	r3, [pc, #92]	; (ae70 <sd_mmc_select_slot+0xb0>)
    ae12:	0152      	lsls	r2, r2, #5
    ae14:	4917      	ldr	r1, [pc, #92]	; (ae74 <sd_mmc_select_slot+0xb4>)
    ae16:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    ae18:	1dfb      	adds	r3, r7, #7
    ae1a:	781b      	ldrb	r3, [r3, #0]
    ae1c:	4a14      	ldr	r2, [pc, #80]	; (ae70 <sd_mmc_select_slot+0xb0>)
    ae1e:	015b      	lsls	r3, r3, #5
    ae20:	18d3      	adds	r3, r2, r3
    ae22:	330d      	adds	r3, #13
    ae24:	2201      	movs	r2, #1
    ae26:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    ae28:	1dfb      	adds	r3, r7, #7
    ae2a:	781b      	ldrb	r3, [r3, #0]
    ae2c:	4a10      	ldr	r2, [pc, #64]	; (ae70 <sd_mmc_select_slot+0xb0>)
    ae2e:	015b      	lsls	r3, r3, #5
    ae30:	18d3      	adds	r3, r2, r3
    ae32:	331e      	adds	r3, #30
    ae34:	2200      	movs	r2, #0
    ae36:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    ae38:	4b0f      	ldr	r3, [pc, #60]	; (ae78 <sd_mmc_select_slot+0xb8>)
    ae3a:	1dfa      	adds	r2, r7, #7
    ae3c:	7812      	ldrb	r2, [r2, #0]
    ae3e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    ae40:	1dfb      	adds	r3, r7, #7
    ae42:	781b      	ldrb	r3, [r3, #0]
    ae44:	015a      	lsls	r2, r3, #5
    ae46:	4b0a      	ldr	r3, [pc, #40]	; (ae70 <sd_mmc_select_slot+0xb0>)
    ae48:	18d2      	adds	r2, r2, r3
    ae4a:	4b0c      	ldr	r3, [pc, #48]	; (ae7c <sd_mmc_select_slot+0xbc>)
    ae4c:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    ae4e:	4b0c      	ldr	r3, [pc, #48]	; (ae80 <sd_mmc_select_slot+0xc0>)
    ae50:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    ae52:	1dfb      	adds	r3, r7, #7
    ae54:	781b      	ldrb	r3, [r3, #0]
    ae56:	4a06      	ldr	r2, [pc, #24]	; (ae70 <sd_mmc_select_slot+0xb0>)
    ae58:	015b      	lsls	r3, r3, #5
    ae5a:	18d3      	adds	r3, r2, r3
    ae5c:	330a      	adds	r3, #10
    ae5e:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    ae60:	3b02      	subs	r3, #2
    ae62:	425a      	negs	r2, r3
    ae64:	4153      	adcs	r3, r2
    ae66:	b2db      	uxtb	r3, r3
}
    ae68:	0018      	movs	r0, r3
    ae6a:	46bd      	mov	sp, r7
    ae6c:	b002      	add	sp, #8
    ae6e:	bd80      	pop	{r7, pc}
    ae70:	20004098 	.word	0x20004098
    ae74:	00061a80 	.word	0x00061a80
    ae78:	200040b8 	.word	0x200040b8
    ae7c:	200040bc 	.word	0x200040bc
    ae80:	0000ae85 	.word	0x0000ae85

0000ae84 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    ae84:	b5b0      	push	{r4, r5, r7, lr}
    ae86:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    ae88:	4b09      	ldr	r3, [pc, #36]	; (aeb0 <sd_mmc_configure_slot+0x2c>)
    ae8a:	7818      	ldrb	r0, [r3, #0]
    ae8c:	4b09      	ldr	r3, [pc, #36]	; (aeb4 <sd_mmc_configure_slot+0x30>)
    ae8e:	681b      	ldr	r3, [r3, #0]
    ae90:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    ae92:	4b08      	ldr	r3, [pc, #32]	; (aeb4 <sd_mmc_configure_slot+0x30>)
    ae94:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    ae96:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    ae98:	4b06      	ldr	r3, [pc, #24]	; (aeb4 <sd_mmc_configure_slot+0x30>)
    ae9a:	681b      	ldr	r3, [r3, #0]
    ae9c:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    ae9e:	1e5c      	subs	r4, r3, #1
    aea0:	41a3      	sbcs	r3, r4
    aea2:	b2db      	uxtb	r3, r3
    aea4:	4c04      	ldr	r4, [pc, #16]	; (aeb8 <sd_mmc_configure_slot+0x34>)
    aea6:	47a0      	blx	r4
}
    aea8:	46c0      	nop			; (mov r8, r8)
    aeaa:	46bd      	mov	sp, r7
    aeac:	bdb0      	pop	{r4, r5, r7, pc}
    aeae:	46c0      	nop			; (mov r8, r8)
    aeb0:	200040b8 	.word	0x200040b8
    aeb4:	200040bc 	.word	0x200040bc
    aeb8:	0000bffd 	.word	0x0000bffd

0000aebc <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    aebc:	b580      	push	{r7, lr}
    aebe:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    aec0:	4b05      	ldr	r3, [pc, #20]	; (aed8 <sd_mmc_deselect_slot+0x1c>)
    aec2:	781b      	ldrb	r3, [r3, #0]
    aec4:	2b00      	cmp	r3, #0
    aec6:	d104      	bne.n	aed2 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    aec8:	4b03      	ldr	r3, [pc, #12]	; (aed8 <sd_mmc_deselect_slot+0x1c>)
    aeca:	781b      	ldrb	r3, [r3, #0]
    aecc:	0018      	movs	r0, r3
    aece:	4b03      	ldr	r3, [pc, #12]	; (aedc <sd_mmc_deselect_slot+0x20>)
    aed0:	4798      	blx	r3
	}
}
    aed2:	46c0      	nop			; (mov r8, r8)
    aed4:	46bd      	mov	sp, r7
    aed6:	bd80      	pop	{r7, pc}
    aed8:	200040b8 	.word	0x200040b8
    aedc:	0000c085 	.word	0x0000c085

0000aee0 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    aee0:	b580      	push	{r7, lr}
    aee2:	b082      	sub	sp, #8
    aee4:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    aee6:	1dfb      	adds	r3, r7, #7
    aee8:	2200      	movs	r2, #0
    aeea:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    aeec:	4b59      	ldr	r3, [pc, #356]	; (b054 <sd_mmc_spi_card_init+0x174>)
    aeee:	681b      	ldr	r3, [r3, #0]
    aef0:	2201      	movs	r2, #1
    aef2:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    aef4:	4b57      	ldr	r3, [pc, #348]	; (b054 <sd_mmc_spi_card_init+0x174>)
    aef6:	681b      	ldr	r3, [r3, #0]
    aef8:	2200      	movs	r2, #0
    aefa:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    aefc:	4b55      	ldr	r3, [pc, #340]	; (b054 <sd_mmc_spi_card_init+0x174>)
    aefe:	681b      	ldr	r3, [r3, #0]
    af00:	2200      	movs	r2, #0
    af02:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    af04:	4b54      	ldr	r3, [pc, #336]	; (b058 <sd_mmc_spi_card_init+0x178>)
    af06:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    af08:	2388      	movs	r3, #136	; 0x88
    af0a:	015b      	lsls	r3, r3, #5
    af0c:	2100      	movs	r1, #0
    af0e:	0018      	movs	r0, r3
    af10:	4b52      	ldr	r3, [pc, #328]	; (b05c <sd_mmc_spi_card_init+0x17c>)
    af12:	4798      	blx	r3
    af14:	0003      	movs	r3, r0
    af16:	001a      	movs	r2, r3
    af18:	2301      	movs	r3, #1
    af1a:	4053      	eors	r3, r2
    af1c:	b2db      	uxtb	r3, r3
    af1e:	2b00      	cmp	r3, #0
    af20:	d001      	beq.n	af26 <sd_mmc_spi_card_init+0x46>
		return false;
    af22:	2300      	movs	r3, #0
    af24:	e092      	b.n	b04c <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    af26:	1dfb      	adds	r3, r7, #7
    af28:	0018      	movs	r0, r3
    af2a:	4b4d      	ldr	r3, [pc, #308]	; (b060 <sd_mmc_spi_card_init+0x180>)
    af2c:	4798      	blx	r3
    af2e:	0003      	movs	r3, r0
    af30:	001a      	movs	r2, r3
    af32:	2301      	movs	r3, #1
    af34:	4053      	eors	r3, r2
    af36:	b2db      	uxtb	r3, r3
    af38:	2b00      	cmp	r3, #0
    af3a:	d001      	beq.n	af40 <sd_mmc_spi_card_init+0x60>
		return false;
    af3c:	2300      	movs	r3, #0
    af3e:	e085      	b.n	b04c <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    af40:	4b48      	ldr	r3, [pc, #288]	; (b064 <sd_mmc_spi_card_init+0x184>)
    af42:	4798      	blx	r3
    af44:	0003      	movs	r3, r0
    af46:	001a      	movs	r2, r3
    af48:	2301      	movs	r3, #1
    af4a:	4053      	eors	r3, r2
    af4c:	b2db      	uxtb	r3, r3
    af4e:	2b00      	cmp	r3, #0
    af50:	d001      	beq.n	af56 <sd_mmc_spi_card_init+0x76>
		return false;
    af52:	2300      	movs	r3, #0
    af54:	e07a      	b.n	b04c <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    af56:	4b3f      	ldr	r3, [pc, #252]	; (b054 <sd_mmc_spi_card_init+0x174>)
    af58:	681b      	ldr	r3, [r3, #0]
    af5a:	7adb      	ldrb	r3, [r3, #11]
    af5c:	001a      	movs	r2, r3
    af5e:	2301      	movs	r3, #1
    af60:	4013      	ands	r3, r2
    af62:	d021      	beq.n	afa8 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    af64:	1dfb      	adds	r3, r7, #7
    af66:	781b      	ldrb	r3, [r3, #0]
    af68:	0018      	movs	r0, r3
    af6a:	4b3f      	ldr	r3, [pc, #252]	; (b068 <sd_mmc_spi_card_init+0x188>)
    af6c:	4798      	blx	r3
    af6e:	0003      	movs	r3, r0
    af70:	001a      	movs	r2, r3
    af72:	2301      	movs	r3, #1
    af74:	4053      	eors	r3, r2
    af76:	b2db      	uxtb	r3, r3
    af78:	2b00      	cmp	r3, #0
    af7a:	d007      	beq.n	af8c <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    af7c:	4b35      	ldr	r3, [pc, #212]	; (b054 <sd_mmc_spi_card_init+0x174>)
    af7e:	681b      	ldr	r3, [r3, #0]
    af80:	2202      	movs	r2, #2
    af82:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    af84:	4b39      	ldr	r3, [pc, #228]	; (b06c <sd_mmc_spi_card_init+0x18c>)
    af86:	4798      	blx	r3
    af88:	0003      	movs	r3, r0
    af8a:	e05f      	b.n	b04c <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    af8c:	4b38      	ldr	r3, [pc, #224]	; (b070 <sd_mmc_spi_card_init+0x190>)
    af8e:	2100      	movs	r1, #0
    af90:	0018      	movs	r0, r3
    af92:	4b32      	ldr	r3, [pc, #200]	; (b05c <sd_mmc_spi_card_init+0x17c>)
    af94:	4798      	blx	r3
    af96:	0003      	movs	r3, r0
    af98:	001a      	movs	r2, r3
    af9a:	2301      	movs	r3, #1
    af9c:	4053      	eors	r3, r2
    af9e:	b2db      	uxtb	r3, r3
    afa0:	2b00      	cmp	r3, #0
    afa2:	d001      	beq.n	afa8 <sd_mmc_spi_card_init+0xc8>
			return false;
    afa4:	2300      	movs	r3, #0
    afa6:	e051      	b.n	b04c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    afa8:	4b2a      	ldr	r3, [pc, #168]	; (b054 <sd_mmc_spi_card_init+0x174>)
    afaa:	681b      	ldr	r3, [r3, #0]
    afac:	7adb      	ldrb	r3, [r3, #11]
    afae:	001a      	movs	r2, r3
    afb0:	2301      	movs	r3, #1
    afb2:	4013      	ands	r3, r2
    afb4:	d017      	beq.n	afe6 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    afb6:	4b2f      	ldr	r3, [pc, #188]	; (b074 <sd_mmc_spi_card_init+0x194>)
    afb8:	4798      	blx	r3
    afba:	0003      	movs	r3, r0
    afbc:	001a      	movs	r2, r3
    afbe:	2301      	movs	r3, #1
    afc0:	4053      	eors	r3, r2
    afc2:	b2db      	uxtb	r3, r3
    afc4:	2b00      	cmp	r3, #0
    afc6:	d001      	beq.n	afcc <sd_mmc_spi_card_init+0xec>
			return false;
    afc8:	2300      	movs	r3, #0
    afca:	e03f      	b.n	b04c <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    afcc:	4b2a      	ldr	r3, [pc, #168]	; (b078 <sd_mmc_spi_card_init+0x198>)
    afce:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    afd0:	4b2a      	ldr	r3, [pc, #168]	; (b07c <sd_mmc_spi_card_init+0x19c>)
    afd2:	4798      	blx	r3
    afd4:	0003      	movs	r3, r0
    afd6:	001a      	movs	r2, r3
    afd8:	2301      	movs	r3, #1
    afda:	4053      	eors	r3, r2
    afdc:	b2db      	uxtb	r3, r3
    afde:	2b00      	cmp	r3, #0
    afe0:	d001      	beq.n	afe6 <sd_mmc_spi_card_init+0x106>
			return false;
    afe2:	2300      	movs	r3, #0
    afe4:	e032      	b.n	b04c <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    afe6:	4b1b      	ldr	r3, [pc, #108]	; (b054 <sd_mmc_spi_card_init+0x174>)
    afe8:	681b      	ldr	r3, [r3, #0]
    afea:	7adb      	ldrb	r3, [r3, #11]
    afec:	001a      	movs	r2, r3
    afee:	2301      	movs	r3, #1
    aff0:	4013      	ands	r3, r2
    aff2:	d016      	beq.n	b022 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    aff4:	4b17      	ldr	r3, [pc, #92]	; (b054 <sd_mmc_spi_card_init+0x174>)
    aff6:	681b      	ldr	r3, [r3, #0]
    aff8:	7adb      	ldrb	r3, [r3, #11]
    affa:	001a      	movs	r2, r3
    affc:	2308      	movs	r3, #8
    affe:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    b000:	d10f      	bne.n	b022 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    b002:	2380      	movs	r3, #128	; 0x80
    b004:	009b      	lsls	r3, r3, #2
    b006:	4a1e      	ldr	r2, [pc, #120]	; (b080 <sd_mmc_spi_card_init+0x1a0>)
    b008:	0019      	movs	r1, r3
    b00a:	0010      	movs	r0, r2
    b00c:	4b13      	ldr	r3, [pc, #76]	; (b05c <sd_mmc_spi_card_init+0x17c>)
    b00e:	4798      	blx	r3
    b010:	0003      	movs	r3, r0
    b012:	001a      	movs	r2, r3
    b014:	2301      	movs	r3, #1
    b016:	4053      	eors	r3, r2
    b018:	b2db      	uxtb	r3, r3
    b01a:	2b00      	cmp	r3, #0
    b01c:	d001      	beq.n	b022 <sd_mmc_spi_card_init+0x142>
			return false;
    b01e:	2300      	movs	r3, #0
    b020:	e014      	b.n	b04c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b022:	4b0c      	ldr	r3, [pc, #48]	; (b054 <sd_mmc_spi_card_init+0x174>)
    b024:	681b      	ldr	r3, [r3, #0]
    b026:	7adb      	ldrb	r3, [r3, #11]
    b028:	001a      	movs	r2, r3
    b02a:	2301      	movs	r3, #1
    b02c:	4013      	ands	r3, r2
    b02e:	d00a      	beq.n	b046 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    b030:	4b14      	ldr	r3, [pc, #80]	; (b084 <sd_mmc_spi_card_init+0x1a4>)
    b032:	4798      	blx	r3
    b034:	0003      	movs	r3, r0
    b036:	001a      	movs	r2, r3
    b038:	2301      	movs	r3, #1
    b03a:	4053      	eors	r3, r2
    b03c:	b2db      	uxtb	r3, r3
    b03e:	2b00      	cmp	r3, #0
    b040:	d001      	beq.n	b046 <sd_mmc_spi_card_init+0x166>
			return false;
    b042:	2300      	movs	r3, #0
    b044:	e002      	b.n	b04c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    b046:	4b10      	ldr	r3, [pc, #64]	; (b088 <sd_mmc_spi_card_init+0x1a8>)
    b048:	4798      	blx	r3
	return true;
    b04a:	2301      	movs	r3, #1
}
    b04c:	0018      	movs	r0, r3
    b04e:	46bd      	mov	sp, r7
    b050:	b002      	add	sp, #8
    b052:	bd80      	pop	{r7, pc}
    b054:	200040bc 	.word	0x200040bc
    b058:	0000c0c9 	.word	0x0000c0c9
    b05c:	0000c115 	.word	0x0000c115
    b060:	0000a835 	.word	0x0000a835
    b064:	0000a829 	.word	0x0000a829
    b068:	0000a745 	.word	0x0000a745
    b06c:	0000b08d 	.word	0x0000b08d
    b070:	0000113b 	.word	0x0000113b
    b074:	0000a9d1 	.word	0x0000a9d1
    b078:	0000ab71 	.word	0x0000ab71
    b07c:	0000acb9 	.word	0x0000acb9
    b080:	00001110 	.word	0x00001110
    b084:	0000ac5d 	.word	0x0000ac5d
    b088:	0000ae85 	.word	0x0000ae85

0000b08c <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    b08c:	b580      	push	{r7, lr}
    b08e:	b082      	sub	sp, #8
    b090:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    b092:	2388      	movs	r3, #136	; 0x88
    b094:	015b      	lsls	r3, r3, #5
    b096:	2100      	movs	r1, #0
    b098:	0018      	movs	r0, r3
    b09a:	4b32      	ldr	r3, [pc, #200]	; (b164 <sd_mmc_spi_install_mmc+0xd8>)
    b09c:	4798      	blx	r3
    b09e:	0003      	movs	r3, r0
    b0a0:	001a      	movs	r2, r3
    b0a2:	2301      	movs	r3, #1
    b0a4:	4053      	eors	r3, r2
    b0a6:	b2db      	uxtb	r3, r3
    b0a8:	2b00      	cmp	r3, #0
    b0aa:	d001      	beq.n	b0b0 <sd_mmc_spi_install_mmc+0x24>
		return false;
    b0ac:	2300      	movs	r3, #0
    b0ae:	e055      	b.n	b15c <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    b0b0:	4b2d      	ldr	r3, [pc, #180]	; (b168 <sd_mmc_spi_install_mmc+0xdc>)
    b0b2:	4798      	blx	r3
    b0b4:	0003      	movs	r3, r0
    b0b6:	001a      	movs	r2, r3
    b0b8:	2301      	movs	r3, #1
    b0ba:	4053      	eors	r3, r2
    b0bc:	b2db      	uxtb	r3, r3
    b0be:	2b00      	cmp	r3, #0
    b0c0:	d001      	beq.n	b0c6 <sd_mmc_spi_install_mmc+0x3a>
		return false;
    b0c2:	2300      	movs	r3, #0
    b0c4:	e04a      	b.n	b15c <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    b0c6:	4b29      	ldr	r3, [pc, #164]	; (b16c <sd_mmc_spi_install_mmc+0xe0>)
    b0c8:	2100      	movs	r1, #0
    b0ca:	0018      	movs	r0, r3
    b0cc:	4b25      	ldr	r3, [pc, #148]	; (b164 <sd_mmc_spi_install_mmc+0xd8>)
    b0ce:	4798      	blx	r3
    b0d0:	0003      	movs	r3, r0
    b0d2:	001a      	movs	r2, r3
    b0d4:	2301      	movs	r3, #1
    b0d6:	4053      	eors	r3, r2
    b0d8:	b2db      	uxtb	r3, r3
    b0da:	2b00      	cmp	r3, #0
    b0dc:	d001      	beq.n	b0e2 <sd_mmc_spi_install_mmc+0x56>
		return false;
    b0de:	2300      	movs	r3, #0
    b0e0:	e03c      	b.n	b15c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    b0e2:	4b23      	ldr	r3, [pc, #140]	; (b170 <sd_mmc_spi_install_mmc+0xe4>)
    b0e4:	4798      	blx	r3
    b0e6:	0003      	movs	r3, r0
    b0e8:	001a      	movs	r2, r3
    b0ea:	2301      	movs	r3, #1
    b0ec:	4053      	eors	r3, r2
    b0ee:	b2db      	uxtb	r3, r3
    b0f0:	2b00      	cmp	r3, #0
    b0f2:	d001      	beq.n	b0f8 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    b0f4:	2300      	movs	r3, #0
    b0f6:	e031      	b.n	b15c <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    b0f8:	4b1e      	ldr	r3, [pc, #120]	; (b174 <sd_mmc_spi_install_mmc+0xe8>)
    b0fa:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    b0fc:	4b1e      	ldr	r3, [pc, #120]	; (b178 <sd_mmc_spi_install_mmc+0xec>)
    b0fe:	681b      	ldr	r3, [r3, #0]
    b100:	7b1b      	ldrb	r3, [r3, #12]
    b102:	2b3f      	cmp	r3, #63	; 0x3f
    b104:	d90c      	bls.n	b120 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    b106:	1dfb      	adds	r3, r7, #7
    b108:	0018      	movs	r0, r3
    b10a:	4b1c      	ldr	r3, [pc, #112]	; (b17c <sd_mmc_spi_install_mmc+0xf0>)
    b10c:	4798      	blx	r3
    b10e:	0003      	movs	r3, r0
    b110:	001a      	movs	r2, r3
    b112:	2301      	movs	r3, #1
    b114:	4053      	eors	r3, r2
    b116:	b2db      	uxtb	r3, r3
    b118:	2b00      	cmp	r3, #0
    b11a:	d001      	beq.n	b120 <sd_mmc_spi_install_mmc+0x94>
			return false;
    b11c:	2300      	movs	r3, #0
    b11e:	e01d      	b.n	b15c <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    b120:	2380      	movs	r3, #128	; 0x80
    b122:	009b      	lsls	r3, r3, #2
    b124:	4a16      	ldr	r2, [pc, #88]	; (b180 <sd_mmc_spi_install_mmc+0xf4>)
    b126:	0019      	movs	r1, r3
    b128:	0010      	movs	r0, r2
    b12a:	4b0e      	ldr	r3, [pc, #56]	; (b164 <sd_mmc_spi_install_mmc+0xd8>)
    b12c:	4798      	blx	r3
    b12e:	0003      	movs	r3, r0
    b130:	001a      	movs	r2, r3
    b132:	2301      	movs	r3, #1
    b134:	4053      	eors	r3, r2
    b136:	b2db      	uxtb	r3, r3
    b138:	2b00      	cmp	r3, #0
    b13a:	d001      	beq.n	b140 <sd_mmc_spi_install_mmc+0xb4>
		return false;
    b13c:	2300      	movs	r3, #0
    b13e:	e00d      	b.n	b15c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    b140:	4b10      	ldr	r3, [pc, #64]	; (b184 <sd_mmc_spi_install_mmc+0xf8>)
    b142:	4798      	blx	r3
    b144:	0003      	movs	r3, r0
    b146:	001a      	movs	r2, r3
    b148:	2301      	movs	r3, #1
    b14a:	4053      	eors	r3, r2
    b14c:	b2db      	uxtb	r3, r3
    b14e:	2b00      	cmp	r3, #0
    b150:	d001      	beq.n	b156 <sd_mmc_spi_install_mmc+0xca>
		return false;
    b152:	2300      	movs	r3, #0
    b154:	e002      	b.n	b15c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    b156:	4b0c      	ldr	r3, [pc, #48]	; (b188 <sd_mmc_spi_install_mmc+0xfc>)
    b158:	4798      	blx	r3
	return true;
    b15a:	2301      	movs	r3, #1
}
    b15c:	0018      	movs	r0, r3
    b15e:	46bd      	mov	sp, r7
    b160:	b002      	add	sp, #8
    b162:	bd80      	pop	{r7, pc}
    b164:	0000c115 	.word	0x0000c115
    b168:	0000a699 	.word	0x0000a699
    b16c:	0000113b 	.word	0x0000113b
    b170:	0000a9d1 	.word	0x0000a9d1
    b174:	0000aa41 	.word	0x0000aa41
    b178:	200040bc 	.word	0x200040bc
    b17c:	0000a8a5 	.word	0x0000a8a5
    b180:	00001110 	.word	0x00001110
    b184:	0000ac5d 	.word	0x0000ac5d
    b188:	0000ae85 	.word	0x0000ae85

0000b18c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    b18c:	b580      	push	{r7, lr}
    b18e:	b082      	sub	sp, #8
    b190:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    b192:	1dfb      	adds	r3, r7, #7
    b194:	2200      	movs	r2, #0
    b196:	701a      	strb	r2, [r3, #0]
    b198:	e00c      	b.n	b1b4 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    b19a:	1dfb      	adds	r3, r7, #7
    b19c:	781b      	ldrb	r3, [r3, #0]
    b19e:	4a0c      	ldr	r2, [pc, #48]	; (b1d0 <sd_mmc_init+0x44>)
    b1a0:	015b      	lsls	r3, r3, #5
    b1a2:	18d3      	adds	r3, r2, r3
    b1a4:	330a      	adds	r3, #10
    b1a6:	2204      	movs	r2, #4
    b1a8:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    b1aa:	1dfb      	adds	r3, r7, #7
    b1ac:	781a      	ldrb	r2, [r3, #0]
    b1ae:	1dfb      	adds	r3, r7, #7
    b1b0:	3201      	adds	r2, #1
    b1b2:	701a      	strb	r2, [r3, #0]
    b1b4:	1dfb      	adds	r3, r7, #7
    b1b6:	781b      	ldrb	r3, [r3, #0]
    b1b8:	2b00      	cmp	r3, #0
    b1ba:	d0ee      	beq.n	b19a <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    b1bc:	4b05      	ldr	r3, [pc, #20]	; (b1d4 <sd_mmc_init+0x48>)
    b1be:	22ff      	movs	r2, #255	; 0xff
    b1c0:	701a      	strb	r2, [r3, #0]
	driver_init();
    b1c2:	4b05      	ldr	r3, [pc, #20]	; (b1d8 <sd_mmc_init+0x4c>)
    b1c4:	4798      	blx	r3
}
    b1c6:	46c0      	nop			; (mov r8, r8)
    b1c8:	46bd      	mov	sp, r7
    b1ca:	b002      	add	sp, #8
    b1cc:	bd80      	pop	{r7, pc}
    b1ce:	46c0      	nop			; (mov r8, r8)
    b1d0:	20004098 	.word	0x20004098
    b1d4:	200040b8 	.word	0x200040b8
    b1d8:	0000bf35 	.word	0x0000bf35

0000b1dc <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    b1dc:	b590      	push	{r4, r7, lr}
    b1de:	b085      	sub	sp, #20
    b1e0:	af00      	add	r7, sp, #0
    b1e2:	0002      	movs	r2, r0
    b1e4:	1dfb      	adds	r3, r7, #7
    b1e6:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    b1e8:	230f      	movs	r3, #15
    b1ea:	18fc      	adds	r4, r7, r3
    b1ec:	1dfb      	adds	r3, r7, #7
    b1ee:	781b      	ldrb	r3, [r3, #0]
    b1f0:	0018      	movs	r0, r3
    b1f2:	4b13      	ldr	r3, [pc, #76]	; (b240 <sd_mmc_check+0x64>)
    b1f4:	4798      	blx	r3
    b1f6:	0003      	movs	r3, r0
    b1f8:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    b1fa:	230f      	movs	r3, #15
    b1fc:	18fb      	adds	r3, r7, r3
    b1fe:	781b      	ldrb	r3, [r3, #0]
    b200:	2b01      	cmp	r3, #1
    b202:	d005      	beq.n	b210 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    b204:	4b0f      	ldr	r3, [pc, #60]	; (b244 <sd_mmc_check+0x68>)
    b206:	4798      	blx	r3
		return sd_mmc_err;
    b208:	230f      	movs	r3, #15
    b20a:	18fb      	adds	r3, r7, r3
    b20c:	781b      	ldrb	r3, [r3, #0]
    b20e:	e012      	b.n	b236 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    b210:	4b0d      	ldr	r3, [pc, #52]	; (b248 <sd_mmc_check+0x6c>)
    b212:	4798      	blx	r3
    b214:	1e03      	subs	r3, r0, #0
    b216:	d007      	beq.n	b228 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    b218:	4b0c      	ldr	r3, [pc, #48]	; (b24c <sd_mmc_check+0x70>)
    b21a:	681b      	ldr	r3, [r3, #0]
    b21c:	2200      	movs	r2, #0
    b21e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    b220:	4b08      	ldr	r3, [pc, #32]	; (b244 <sd_mmc_check+0x68>)
    b222:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    b224:	2301      	movs	r3, #1
    b226:	e006      	b.n	b236 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    b228:	4b08      	ldr	r3, [pc, #32]	; (b24c <sd_mmc_check+0x70>)
    b22a:	681b      	ldr	r3, [r3, #0]
    b22c:	2203      	movs	r2, #3
    b22e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    b230:	4b04      	ldr	r3, [pc, #16]	; (b244 <sd_mmc_check+0x68>)
    b232:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    b234:	2303      	movs	r3, #3
}
    b236:	0018      	movs	r0, r3
    b238:	46bd      	mov	sp, r7
    b23a:	b005      	add	sp, #20
    b23c:	bd90      	pop	{r4, r7, pc}
    b23e:	46c0      	nop			; (mov r8, r8)
    b240:	0000adc1 	.word	0x0000adc1
    b244:	0000aebd 	.word	0x0000aebd
    b248:	0000aee1 	.word	0x0000aee1
    b24c:	200040bc 	.word	0x200040bc

0000b250 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    b250:	b580      	push	{r7, lr}
    b252:	b082      	sub	sp, #8
    b254:	af00      	add	r7, sp, #0
    b256:	0002      	movs	r2, r0
    b258:	1dfb      	adds	r3, r7, #7
    b25a:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    b25c:	1dfb      	adds	r3, r7, #7
    b25e:	781b      	ldrb	r3, [r3, #0]
    b260:	0018      	movs	r0, r3
    b262:	4b07      	ldr	r3, [pc, #28]	; (b280 <sd_mmc_get_type+0x30>)
    b264:	4798      	blx	r3
    b266:	1e03      	subs	r3, r0, #0
    b268:	d001      	beq.n	b26e <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    b26a:	2300      	movs	r3, #0
    b26c:	e004      	b.n	b278 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    b26e:	4b05      	ldr	r3, [pc, #20]	; (b284 <sd_mmc_get_type+0x34>)
    b270:	4798      	blx	r3
	return sd_mmc_card->type;
    b272:	4b05      	ldr	r3, [pc, #20]	; (b288 <sd_mmc_get_type+0x38>)
    b274:	681b      	ldr	r3, [r3, #0]
    b276:	7adb      	ldrb	r3, [r3, #11]
}
    b278:	0018      	movs	r0, r3
    b27a:	46bd      	mov	sp, r7
    b27c:	b002      	add	sp, #8
    b27e:	bd80      	pop	{r7, pc}
    b280:	0000adc1 	.word	0x0000adc1
    b284:	0000aebd 	.word	0x0000aebd
    b288:	200040bc 	.word	0x200040bc

0000b28c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    b28c:	b580      	push	{r7, lr}
    b28e:	b082      	sub	sp, #8
    b290:	af00      	add	r7, sp, #0
    b292:	0002      	movs	r2, r0
    b294:	1dfb      	adds	r3, r7, #7
    b296:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    b298:	1dfb      	adds	r3, r7, #7
    b29a:	781b      	ldrb	r3, [r3, #0]
    b29c:	0018      	movs	r0, r3
    b29e:	4b07      	ldr	r3, [pc, #28]	; (b2bc <sd_mmc_get_capacity+0x30>)
    b2a0:	4798      	blx	r3
    b2a2:	1e03      	subs	r3, r0, #0
    b2a4:	d001      	beq.n	b2aa <sd_mmc_get_capacity+0x1e>
		return 0;
    b2a6:	2300      	movs	r3, #0
    b2a8:	e004      	b.n	b2b4 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    b2aa:	4b05      	ldr	r3, [pc, #20]	; (b2c0 <sd_mmc_get_capacity+0x34>)
    b2ac:	4798      	blx	r3
	return sd_mmc_card->capacity;
    b2ae:	4b05      	ldr	r3, [pc, #20]	; (b2c4 <sd_mmc_get_capacity+0x38>)
    b2b0:	681b      	ldr	r3, [r3, #0]
    b2b2:	685b      	ldr	r3, [r3, #4]
}
    b2b4:	0018      	movs	r0, r3
    b2b6:	46bd      	mov	sp, r7
    b2b8:	b002      	add	sp, #8
    b2ba:	bd80      	pop	{r7, pc}
    b2bc:	0000adc1 	.word	0x0000adc1
    b2c0:	0000aebd 	.word	0x0000aebd
    b2c4:	200040bc 	.word	0x200040bc

0000b2c8 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    b2c8:	b580      	push	{r7, lr}
    b2ca:	b082      	sub	sp, #8
    b2cc:	af00      	add	r7, sp, #0
    b2ce:	0002      	movs	r2, r0
    b2d0:	1dfb      	adds	r3, r7, #7
    b2d2:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    b2d4:	2300      	movs	r3, #0
}
    b2d6:	0018      	movs	r0, r3
    b2d8:	46bd      	mov	sp, r7
    b2da:	b002      	add	sp, #8
    b2dc:	bd80      	pop	{r7, pc}
	...

0000b2e0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    b2e0:	b590      	push	{r4, r7, lr}
    b2e2:	b089      	sub	sp, #36	; 0x24
    b2e4:	af02      	add	r7, sp, #8
    b2e6:	6039      	str	r1, [r7, #0]
    b2e8:	0011      	movs	r1, r2
    b2ea:	1dfb      	adds	r3, r7, #7
    b2ec:	1c02      	adds	r2, r0, #0
    b2ee:	701a      	strb	r2, [r3, #0]
    b2f0:	1d3b      	adds	r3, r7, #4
    b2f2:	1c0a      	adds	r2, r1, #0
    b2f4:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    b2f6:	230f      	movs	r3, #15
    b2f8:	18fc      	adds	r4, r7, r3
    b2fa:	1dfb      	adds	r3, r7, #7
    b2fc:	781b      	ldrb	r3, [r3, #0]
    b2fe:	0018      	movs	r0, r3
    b300:	4b29      	ldr	r3, [pc, #164]	; (b3a8 <sd_mmc_init_read_blocks+0xc8>)
    b302:	4798      	blx	r3
    b304:	0003      	movs	r3, r0
    b306:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    b308:	230f      	movs	r3, #15
    b30a:	18fb      	adds	r3, r7, r3
    b30c:	781b      	ldrb	r3, [r3, #0]
    b30e:	2b00      	cmp	r3, #0
    b310:	d003      	beq.n	b31a <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    b312:	230f      	movs	r3, #15
    b314:	18fb      	adds	r3, r7, r3
    b316:	781b      	ldrb	r3, [r3, #0]
    b318:	e041      	b.n	b39e <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    b31a:	4b24      	ldr	r3, [pc, #144]	; (b3ac <sd_mmc_init_read_blocks+0xcc>)
    b31c:	4798      	blx	r3
    b31e:	0003      	movs	r3, r0
    b320:	001a      	movs	r2, r3
    b322:	2301      	movs	r3, #1
    b324:	4053      	eors	r3, r2
    b326:	b2db      	uxtb	r3, r3
    b328:	2b00      	cmp	r3, #0
    b32a:	d003      	beq.n	b334 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    b32c:	4b20      	ldr	r3, [pc, #128]	; (b3b0 <sd_mmc_init_read_blocks+0xd0>)
    b32e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    b330:	2305      	movs	r3, #5
    b332:	e034      	b.n	b39e <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
    b334:	1d3b      	adds	r3, r7, #4
    b336:	881b      	ldrh	r3, [r3, #0]
    b338:	2b01      	cmp	r3, #1
    b33a:	d902      	bls.n	b342 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    b33c:	4b1d      	ldr	r3, [pc, #116]	; (b3b4 <sd_mmc_init_read_blocks+0xd4>)
    b33e:	617b      	str	r3, [r7, #20]
    b340:	e001      	b.n	b346 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    b342:	4b1d      	ldr	r3, [pc, #116]	; (b3b8 <sd_mmc_init_read_blocks+0xd8>)
    b344:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    b346:	4b1d      	ldr	r3, [pc, #116]	; (b3bc <sd_mmc_init_read_blocks+0xdc>)
    b348:	681b      	ldr	r3, [r3, #0]
    b34a:	7adb      	ldrb	r3, [r3, #11]
    b34c:	001a      	movs	r2, r3
    b34e:	2308      	movs	r3, #8
    b350:	4013      	ands	r3, r2
    b352:	d002      	beq.n	b35a <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    b354:	683b      	ldr	r3, [r7, #0]
    b356:	613b      	str	r3, [r7, #16]
    b358:	e002      	b.n	b360 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    b35a:	683b      	ldr	r3, [r7, #0]
    b35c:	025b      	lsls	r3, r3, #9
    b35e:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    b360:	1d3b      	adds	r3, r7, #4
    b362:	881c      	ldrh	r4, [r3, #0]
    b364:	2380      	movs	r3, #128	; 0x80
    b366:	009a      	lsls	r2, r3, #2
    b368:	6939      	ldr	r1, [r7, #16]
    b36a:	6978      	ldr	r0, [r7, #20]
    b36c:	2301      	movs	r3, #1
    b36e:	9300      	str	r3, [sp, #0]
    b370:	0023      	movs	r3, r4
    b372:	4c13      	ldr	r4, [pc, #76]	; (b3c0 <sd_mmc_init_read_blocks+0xe0>)
    b374:	47a0      	blx	r4
    b376:	0003      	movs	r3, r0
    b378:	001a      	movs	r2, r3
    b37a:	2301      	movs	r3, #1
    b37c:	4053      	eors	r3, r2
    b37e:	b2db      	uxtb	r3, r3
    b380:	2b00      	cmp	r3, #0
    b382:	d003      	beq.n	b38c <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    b384:	4b0a      	ldr	r3, [pc, #40]	; (b3b0 <sd_mmc_init_read_blocks+0xd0>)
    b386:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    b388:	2305      	movs	r3, #5
    b38a:	e008      	b.n	b39e <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    b38c:	4b0d      	ldr	r3, [pc, #52]	; (b3c4 <sd_mmc_init_read_blocks+0xe4>)
    b38e:	1d3a      	adds	r2, r7, #4
    b390:	8812      	ldrh	r2, [r2, #0]
    b392:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    b394:	4b0c      	ldr	r3, [pc, #48]	; (b3c8 <sd_mmc_init_read_blocks+0xe8>)
    b396:	1d3a      	adds	r2, r7, #4
    b398:	8812      	ldrh	r2, [r2, #0]
    b39a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    b39c:	2300      	movs	r3, #0
}
    b39e:	0018      	movs	r0, r3
    b3a0:	46bd      	mov	sp, r7
    b3a2:	b007      	add	sp, #28
    b3a4:	bd90      	pop	{r4, r7, pc}
    b3a6:	46c0      	nop			; (mov r8, r8)
    b3a8:	0000adc1 	.word	0x0000adc1
    b3ac:	0000ac5d 	.word	0x0000ac5d
    b3b0:	0000aebd 	.word	0x0000aebd
    b3b4:	00101112 	.word	0x00101112
    b3b8:	00081111 	.word	0x00081111
    b3bc:	200040bc 	.word	0x200040bc
    b3c0:	0000c13d 	.word	0x0000c13d
    b3c4:	200040c2 	.word	0x200040c2
    b3c8:	200040c0 	.word	0x200040c0

0000b3cc <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    b3cc:	b580      	push	{r7, lr}
    b3ce:	b082      	sub	sp, #8
    b3d0:	af00      	add	r7, sp, #0
    b3d2:	6078      	str	r0, [r7, #4]
    b3d4:	000a      	movs	r2, r1
    b3d6:	1cbb      	adds	r3, r7, #2
    b3d8:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    b3da:	1cbb      	adds	r3, r7, #2
    b3dc:	881a      	ldrh	r2, [r3, #0]
    b3de:	687b      	ldr	r3, [r7, #4]
    b3e0:	0011      	movs	r1, r2
    b3e2:	0018      	movs	r0, r3
    b3e4:	4b0d      	ldr	r3, [pc, #52]	; (b41c <sd_mmc_start_read_blocks+0x50>)
    b3e6:	4798      	blx	r3
    b3e8:	0003      	movs	r3, r0
    b3ea:	001a      	movs	r2, r3
    b3ec:	2301      	movs	r3, #1
    b3ee:	4053      	eors	r3, r2
    b3f0:	b2db      	uxtb	r3, r3
    b3f2:	2b00      	cmp	r3, #0
    b3f4:	d004      	beq.n	b400 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    b3f6:	4b0a      	ldr	r3, [pc, #40]	; (b420 <sd_mmc_start_read_blocks+0x54>)
    b3f8:	2200      	movs	r2, #0
    b3fa:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    b3fc:	2305      	movs	r3, #5
    b3fe:	e008      	b.n	b412 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    b400:	4b07      	ldr	r3, [pc, #28]	; (b420 <sd_mmc_start_read_blocks+0x54>)
    b402:	881a      	ldrh	r2, [r3, #0]
    b404:	1cbb      	adds	r3, r7, #2
    b406:	881b      	ldrh	r3, [r3, #0]
    b408:	1ad3      	subs	r3, r2, r3
    b40a:	b29a      	uxth	r2, r3
    b40c:	4b04      	ldr	r3, [pc, #16]	; (b420 <sd_mmc_start_read_blocks+0x54>)
    b40e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    b410:	2300      	movs	r3, #0
}
    b412:	0018      	movs	r0, r3
    b414:	46bd      	mov	sp, r7
    b416:	b002      	add	sp, #8
    b418:	bd80      	pop	{r7, pc}
    b41a:	46c0      	nop			; (mov r8, r8)
    b41c:	0000c40d 	.word	0x0000c40d
    b420:	200040c2 	.word	0x200040c2

0000b424 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    b424:	b580      	push	{r7, lr}
    b426:	b082      	sub	sp, #8
    b428:	af00      	add	r7, sp, #0
    b42a:	0002      	movs	r2, r0
    b42c:	1dfb      	adds	r3, r7, #7
    b42e:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    b430:	4b1c      	ldr	r3, [pc, #112]	; (b4a4 <sd_mmc_wait_end_of_read_blocks+0x80>)
    b432:	4798      	blx	r3
    b434:	0003      	movs	r3, r0
    b436:	001a      	movs	r2, r3
    b438:	2301      	movs	r3, #1
    b43a:	4053      	eors	r3, r2
    b43c:	b2db      	uxtb	r3, r3
    b43e:	2b00      	cmp	r3, #0
    b440:	d001      	beq.n	b446 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    b442:	2305      	movs	r3, #5
    b444:	e029      	b.n	b49a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    b446:	1dfb      	adds	r3, r7, #7
    b448:	781b      	ldrb	r3, [r3, #0]
    b44a:	2b00      	cmp	r3, #0
    b44c:	d003      	beq.n	b456 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    b44e:	4b16      	ldr	r3, [pc, #88]	; (b4a8 <sd_mmc_wait_end_of_read_blocks+0x84>)
    b450:	2200      	movs	r2, #0
    b452:	801a      	strh	r2, [r3, #0]
    b454:	e005      	b.n	b462 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    b456:	4b14      	ldr	r3, [pc, #80]	; (b4a8 <sd_mmc_wait_end_of_read_blocks+0x84>)
    b458:	881b      	ldrh	r3, [r3, #0]
    b45a:	2b00      	cmp	r3, #0
    b45c:	d001      	beq.n	b462 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    b45e:	2300      	movs	r3, #0
    b460:	e01b      	b.n	b49a <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    b462:	4b12      	ldr	r3, [pc, #72]	; (b4ac <sd_mmc_wait_end_of_read_blocks+0x88>)
    b464:	881b      	ldrh	r3, [r3, #0]
    b466:	2b01      	cmp	r3, #1
    b468:	d103      	bne.n	b472 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    b46a:	4b11      	ldr	r3, [pc, #68]	; (b4b0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    b46c:	4798      	blx	r3
		return SD_MMC_OK;
    b46e:	2300      	movs	r3, #0
    b470:	e013      	b.n	b49a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    b472:	4b10      	ldr	r3, [pc, #64]	; (b4b4 <sd_mmc_wait_end_of_read_blocks+0x90>)
    b474:	2100      	movs	r1, #0
    b476:	0018      	movs	r0, r3
    b478:	4b0f      	ldr	r3, [pc, #60]	; (b4b8 <sd_mmc_wait_end_of_read_blocks+0x94>)
    b47a:	4798      	blx	r3
    b47c:	0003      	movs	r3, r0
    b47e:	001a      	movs	r2, r3
    b480:	2301      	movs	r3, #1
    b482:	4053      	eors	r3, r2
    b484:	b2db      	uxtb	r3, r3
    b486:	2b00      	cmp	r3, #0
    b488:	d004      	beq.n	b494 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    b48a:	4b0a      	ldr	r3, [pc, #40]	; (b4b4 <sd_mmc_wait_end_of_read_blocks+0x90>)
    b48c:	2100      	movs	r1, #0
    b48e:	0018      	movs	r0, r3
    b490:	4b09      	ldr	r3, [pc, #36]	; (b4b8 <sd_mmc_wait_end_of_read_blocks+0x94>)
    b492:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    b494:	4b06      	ldr	r3, [pc, #24]	; (b4b0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    b496:	4798      	blx	r3
	return SD_MMC_OK;
    b498:	2300      	movs	r3, #0
}
    b49a:	0018      	movs	r0, r3
    b49c:	46bd      	mov	sp, r7
    b49e:	b002      	add	sp, #8
    b4a0:	bd80      	pop	{r7, pc}
    b4a2:	46c0      	nop			; (mov r8, r8)
    b4a4:	0000c4b1 	.word	0x0000c4b1
    b4a8:	200040c2 	.word	0x200040c2
    b4ac:	200040c0 	.word	0x200040c0
    b4b0:	0000aebd 	.word	0x0000aebd
    b4b4:	0000310c 	.word	0x0000310c
    b4b8:	0000c115 	.word	0x0000c115

0000b4bc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    b4bc:	b590      	push	{r4, r7, lr}
    b4be:	b089      	sub	sp, #36	; 0x24
    b4c0:	af02      	add	r7, sp, #8
    b4c2:	6039      	str	r1, [r7, #0]
    b4c4:	0011      	movs	r1, r2
    b4c6:	1dfb      	adds	r3, r7, #7
    b4c8:	1c02      	adds	r2, r0, #0
    b4ca:	701a      	strb	r2, [r3, #0]
    b4cc:	1d3b      	adds	r3, r7, #4
    b4ce:	1c0a      	adds	r2, r1, #0
    b4d0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    b4d2:	230f      	movs	r3, #15
    b4d4:	18fc      	adds	r4, r7, r3
    b4d6:	1dfb      	adds	r3, r7, #7
    b4d8:	781b      	ldrb	r3, [r3, #0]
    b4da:	0018      	movs	r0, r3
    b4dc:	4b28      	ldr	r3, [pc, #160]	; (b580 <sd_mmc_init_write_blocks+0xc4>)
    b4de:	4798      	blx	r3
    b4e0:	0003      	movs	r3, r0
    b4e2:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    b4e4:	230f      	movs	r3, #15
    b4e6:	18fb      	adds	r3, r7, r3
    b4e8:	781b      	ldrb	r3, [r3, #0]
    b4ea:	2b00      	cmp	r3, #0
    b4ec:	d003      	beq.n	b4f6 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    b4ee:	230f      	movs	r3, #15
    b4f0:	18fb      	adds	r3, r7, r3
    b4f2:	781b      	ldrb	r3, [r3, #0]
    b4f4:	e03f      	b.n	b576 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    b4f6:	1dfb      	adds	r3, r7, #7
    b4f8:	781b      	ldrb	r3, [r3, #0]
    b4fa:	0018      	movs	r0, r3
    b4fc:	4b21      	ldr	r3, [pc, #132]	; (b584 <sd_mmc_init_write_blocks+0xc8>)
    b4fe:	4798      	blx	r3
    b500:	1e03      	subs	r3, r0, #0
    b502:	d003      	beq.n	b50c <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    b504:	4b20      	ldr	r3, [pc, #128]	; (b588 <sd_mmc_init_write_blocks+0xcc>)
    b506:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    b508:	2307      	movs	r3, #7
    b50a:	e034      	b.n	b576 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    b50c:	1d3b      	adds	r3, r7, #4
    b50e:	881b      	ldrh	r3, [r3, #0]
    b510:	2b01      	cmp	r3, #1
    b512:	d902      	bls.n	b51a <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    b514:	4b1d      	ldr	r3, [pc, #116]	; (b58c <sd_mmc_init_write_blocks+0xd0>)
    b516:	617b      	str	r3, [r7, #20]
    b518:	e001      	b.n	b51e <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    b51a:	4b1d      	ldr	r3, [pc, #116]	; (b590 <sd_mmc_init_write_blocks+0xd4>)
    b51c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    b51e:	4b1d      	ldr	r3, [pc, #116]	; (b594 <sd_mmc_init_write_blocks+0xd8>)
    b520:	681b      	ldr	r3, [r3, #0]
    b522:	7adb      	ldrb	r3, [r3, #11]
    b524:	001a      	movs	r2, r3
    b526:	2308      	movs	r3, #8
    b528:	4013      	ands	r3, r2
    b52a:	d002      	beq.n	b532 <sd_mmc_init_write_blocks+0x76>
		arg = start;
    b52c:	683b      	ldr	r3, [r7, #0]
    b52e:	613b      	str	r3, [r7, #16]
    b530:	e002      	b.n	b538 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    b532:	683b      	ldr	r3, [r7, #0]
    b534:	025b      	lsls	r3, r3, #9
    b536:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    b538:	1d3b      	adds	r3, r7, #4
    b53a:	881c      	ldrh	r4, [r3, #0]
    b53c:	2380      	movs	r3, #128	; 0x80
    b53e:	009a      	lsls	r2, r3, #2
    b540:	6939      	ldr	r1, [r7, #16]
    b542:	6978      	ldr	r0, [r7, #20]
    b544:	2301      	movs	r3, #1
    b546:	9300      	str	r3, [sp, #0]
    b548:	0023      	movs	r3, r4
    b54a:	4c13      	ldr	r4, [pc, #76]	; (b598 <sd_mmc_init_write_blocks+0xdc>)
    b54c:	47a0      	blx	r4
    b54e:	0003      	movs	r3, r0
    b550:	001a      	movs	r2, r3
    b552:	2301      	movs	r3, #1
    b554:	4053      	eors	r3, r2
    b556:	b2db      	uxtb	r3, r3
    b558:	2b00      	cmp	r3, #0
    b55a:	d003      	beq.n	b564 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    b55c:	4b0a      	ldr	r3, [pc, #40]	; (b588 <sd_mmc_init_write_blocks+0xcc>)
    b55e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    b560:	2305      	movs	r3, #5
    b562:	e008      	b.n	b576 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    b564:	4b0d      	ldr	r3, [pc, #52]	; (b59c <sd_mmc_init_write_blocks+0xe0>)
    b566:	1d3a      	adds	r2, r7, #4
    b568:	8812      	ldrh	r2, [r2, #0]
    b56a:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    b56c:	4b0c      	ldr	r3, [pc, #48]	; (b5a0 <sd_mmc_init_write_blocks+0xe4>)
    b56e:	1d3a      	adds	r2, r7, #4
    b570:	8812      	ldrh	r2, [r2, #0]
    b572:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    b574:	2300      	movs	r3, #0
}
    b576:	0018      	movs	r0, r3
    b578:	46bd      	mov	sp, r7
    b57a:	b007      	add	sp, #28
    b57c:	bd90      	pop	{r4, r7, pc}
    b57e:	46c0      	nop			; (mov r8, r8)
    b580:	0000adc1 	.word	0x0000adc1
    b584:	0000b2c9 	.word	0x0000b2c9
    b588:	0000aebd 	.word	0x0000aebd
    b58c:	00109119 	.word	0x00109119
    b590:	00089118 	.word	0x00089118
    b594:	200040bc 	.word	0x200040bc
    b598:	0000c13d 	.word	0x0000c13d
    b59c:	200040c2 	.word	0x200040c2
    b5a0:	200040c0 	.word	0x200040c0

0000b5a4 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    b5a4:	b580      	push	{r7, lr}
    b5a6:	b082      	sub	sp, #8
    b5a8:	af00      	add	r7, sp, #0
    b5aa:	6078      	str	r0, [r7, #4]
    b5ac:	000a      	movs	r2, r1
    b5ae:	1cbb      	adds	r3, r7, #2
    b5b0:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    b5b2:	1cbb      	adds	r3, r7, #2
    b5b4:	881a      	ldrh	r2, [r3, #0]
    b5b6:	687b      	ldr	r3, [r7, #4]
    b5b8:	0011      	movs	r1, r2
    b5ba:	0018      	movs	r0, r3
    b5bc:	4b0d      	ldr	r3, [pc, #52]	; (b5f4 <sd_mmc_start_write_blocks+0x50>)
    b5be:	4798      	blx	r3
    b5c0:	0003      	movs	r3, r0
    b5c2:	001a      	movs	r2, r3
    b5c4:	2301      	movs	r3, #1
    b5c6:	4053      	eors	r3, r2
    b5c8:	b2db      	uxtb	r3, r3
    b5ca:	2b00      	cmp	r3, #0
    b5cc:	d004      	beq.n	b5d8 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    b5ce:	4b0a      	ldr	r3, [pc, #40]	; (b5f8 <sd_mmc_start_write_blocks+0x54>)
    b5d0:	2200      	movs	r2, #0
    b5d2:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    b5d4:	2305      	movs	r3, #5
    b5d6:	e008      	b.n	b5ea <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    b5d8:	4b07      	ldr	r3, [pc, #28]	; (b5f8 <sd_mmc_start_write_blocks+0x54>)
    b5da:	881a      	ldrh	r2, [r3, #0]
    b5dc:	1cbb      	adds	r3, r7, #2
    b5de:	881b      	ldrh	r3, [r3, #0]
    b5e0:	1ad3      	subs	r3, r2, r3
    b5e2:	b29a      	uxth	r2, r3
    b5e4:	4b04      	ldr	r3, [pc, #16]	; (b5f8 <sd_mmc_start_write_blocks+0x54>)
    b5e6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    b5e8:	2300      	movs	r3, #0
}
    b5ea:	0018      	movs	r0, r3
    b5ec:	46bd      	mov	sp, r7
    b5ee:	b002      	add	sp, #8
    b5f0:	bd80      	pop	{r7, pc}
    b5f2:	46c0      	nop			; (mov r8, r8)
    b5f4:	0000c4bd 	.word	0x0000c4bd
    b5f8:	200040c2 	.word	0x200040c2

0000b5fc <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    b5fc:	b580      	push	{r7, lr}
    b5fe:	b082      	sub	sp, #8
    b600:	af00      	add	r7, sp, #0
    b602:	0002      	movs	r2, r0
    b604:	1dfb      	adds	r3, r7, #7
    b606:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    b608:	4b13      	ldr	r3, [pc, #76]	; (b658 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    b60a:	4798      	blx	r3
    b60c:	0003      	movs	r3, r0
    b60e:	001a      	movs	r2, r3
    b610:	2301      	movs	r3, #1
    b612:	4053      	eors	r3, r2
    b614:	b2db      	uxtb	r3, r3
    b616:	2b00      	cmp	r3, #0
    b618:	d001      	beq.n	b61e <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    b61a:	2305      	movs	r3, #5
    b61c:	e018      	b.n	b650 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    b61e:	1dfb      	adds	r3, r7, #7
    b620:	781b      	ldrb	r3, [r3, #0]
    b622:	2b00      	cmp	r3, #0
    b624:	d003      	beq.n	b62e <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    b626:	4b0d      	ldr	r3, [pc, #52]	; (b65c <sd_mmc_wait_end_of_write_blocks+0x60>)
    b628:	2200      	movs	r2, #0
    b62a:	801a      	strh	r2, [r3, #0]
    b62c:	e005      	b.n	b63a <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    b62e:	4b0b      	ldr	r3, [pc, #44]	; (b65c <sd_mmc_wait_end_of_write_blocks+0x60>)
    b630:	881b      	ldrh	r3, [r3, #0]
    b632:	2b00      	cmp	r3, #0
    b634:	d001      	beq.n	b63a <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    b636:	2300      	movs	r3, #0
    b638:	e00a      	b.n	b650 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    b63a:	4b09      	ldr	r3, [pc, #36]	; (b660 <sd_mmc_wait_end_of_write_blocks+0x64>)
    b63c:	881b      	ldrh	r3, [r3, #0]
    b63e:	2b01      	cmp	r3, #1
    b640:	d103      	bne.n	b64a <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    b642:	4b08      	ldr	r3, [pc, #32]	; (b664 <sd_mmc_wait_end_of_write_blocks+0x68>)
    b644:	4798      	blx	r3
		return SD_MMC_OK;
    b646:	2300      	movs	r3, #0
    b648:	e002      	b.n	b650 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    b64a:	4b06      	ldr	r3, [pc, #24]	; (b664 <sd_mmc_wait_end_of_write_blocks+0x68>)
    b64c:	4798      	blx	r3
	return SD_MMC_OK;
    b64e:	2300      	movs	r3, #0
}
    b650:	0018      	movs	r0, r3
    b652:	46bd      	mov	sp, r7
    b654:	b002      	add	sp, #8
    b656:	bd80      	pop	{r7, pc}
    b658:	0000c57d 	.word	0x0000c57d
    b65c:	200040c2 	.word	0x200040c2
    b660:	200040c0 	.word	0x200040c0
    b664:	0000aebd 	.word	0x0000aebd

0000b668 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    b668:	b580      	push	{r7, lr}
    b66a:	b082      	sub	sp, #8
    b66c:	af00      	add	r7, sp, #0
    b66e:	0002      	movs	r2, r0
    b670:	1dfb      	adds	r3, r7, #7
    b672:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    b674:	1dfb      	adds	r3, r7, #7
    b676:	781b      	ldrb	r3, [r3, #0]
    b678:	0018      	movs	r0, r3
    b67a:	4b16      	ldr	r3, [pc, #88]	; (b6d4 <sd_mmc_test_unit_ready+0x6c>)
    b67c:	4798      	blx	r3
    b67e:	0003      	movs	r3, r0
    b680:	2b01      	cmp	r3, #1
    b682:	d019      	beq.n	b6b8 <sd_mmc_test_unit_ready+0x50>
    b684:	2b02      	cmp	r3, #2
    b686:	d019      	beq.n	b6bc <sd_mmc_test_unit_ready+0x54>
    b688:	2b00      	cmp	r3, #0
    b68a:	d11e      	bne.n	b6ca <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    b68c:	1dfb      	adds	r3, r7, #7
    b68e:	781b      	ldrb	r3, [r3, #0]
    b690:	4a11      	ldr	r2, [pc, #68]	; (b6d8 <sd_mmc_test_unit_ready+0x70>)
    b692:	5cd3      	ldrb	r3, [r2, r3]
    b694:	2b00      	cmp	r3, #0
    b696:	d001      	beq.n	b69c <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    b698:	2302      	movs	r3, #2
    b69a:	e017      	b.n	b6cc <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    b69c:	1dfb      	adds	r3, r7, #7
    b69e:	781b      	ldrb	r3, [r3, #0]
    b6a0:	0018      	movs	r0, r3
    b6a2:	4b0e      	ldr	r3, [pc, #56]	; (b6dc <sd_mmc_test_unit_ready+0x74>)
    b6a4:	4798      	blx	r3
    b6a6:	0003      	movs	r3, r0
    b6a8:	001a      	movs	r2, r3
    b6aa:	2303      	movs	r3, #3
    b6ac:	4013      	ands	r3, r2
    b6ae:	d001      	beq.n	b6b4 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    b6b0:	2300      	movs	r3, #0
    b6b2:	e00b      	b.n	b6cc <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    b6b4:	2302      	movs	r3, #2
    b6b6:	e009      	b.n	b6cc <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    b6b8:	2303      	movs	r3, #3
    b6ba:	e007      	b.n	b6cc <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    b6bc:	1dfb      	adds	r3, r7, #7
    b6be:	781b      	ldrb	r3, [r3, #0]
    b6c0:	4a05      	ldr	r2, [pc, #20]	; (b6d8 <sd_mmc_test_unit_ready+0x70>)
    b6c2:	2100      	movs	r1, #0
    b6c4:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    b6c6:	2302      	movs	r3, #2
    b6c8:	e000      	b.n	b6cc <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    b6ca:	2301      	movs	r3, #1
	}
}
    b6cc:	0018      	movs	r0, r3
    b6ce:	46bd      	mov	sp, r7
    b6d0:	b002      	add	sp, #8
    b6d2:	bd80      	pop	{r7, pc}
    b6d4:	0000b1dd 	.word	0x0000b1dd
    b6d8:	200040c4 	.word	0x200040c4
    b6dc:	0000b251 	.word	0x0000b251

0000b6e0 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    b6e0:	b580      	push	{r7, lr}
    b6e2:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    b6e4:	2000      	movs	r0, #0
    b6e6:	4b03      	ldr	r3, [pc, #12]	; (b6f4 <sd_mmc_test_unit_ready_0+0x14>)
    b6e8:	4798      	blx	r3
    b6ea:	0003      	movs	r3, r0
}
    b6ec:	0018      	movs	r0, r3
    b6ee:	46bd      	mov	sp, r7
    b6f0:	bd80      	pop	{r7, pc}
    b6f2:	46c0      	nop			; (mov r8, r8)
    b6f4:	0000b669 	.word	0x0000b669

0000b6f8 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    b6f8:	b580      	push	{r7, lr}
    b6fa:	b082      	sub	sp, #8
    b6fc:	af00      	add	r7, sp, #0
    b6fe:	0002      	movs	r2, r0
    b700:	6039      	str	r1, [r7, #0]
    b702:	1dfb      	adds	r3, r7, #7
    b704:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    b706:	1dfb      	adds	r3, r7, #7
    b708:	781b      	ldrb	r3, [r3, #0]
    b70a:	0018      	movs	r0, r3
    b70c:	4b08      	ldr	r3, [pc, #32]	; (b730 <sd_mmc_read_capacity+0x38>)
    b70e:	4798      	blx	r3
    b710:	0003      	movs	r3, r0
    b712:	005b      	lsls	r3, r3, #1
    b714:	1e5a      	subs	r2, r3, #1
    b716:	683b      	ldr	r3, [r7, #0]
    b718:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    b71a:	1dfb      	adds	r3, r7, #7
    b71c:	781b      	ldrb	r3, [r3, #0]
    b71e:	0018      	movs	r0, r3
    b720:	4b04      	ldr	r3, [pc, #16]	; (b734 <sd_mmc_read_capacity+0x3c>)
    b722:	4798      	blx	r3
    b724:	0003      	movs	r3, r0
}
    b726:	0018      	movs	r0, r3
    b728:	46bd      	mov	sp, r7
    b72a:	b002      	add	sp, #8
    b72c:	bd80      	pop	{r7, pc}
    b72e:	46c0      	nop			; (mov r8, r8)
    b730:	0000b28d 	.word	0x0000b28d
    b734:	0000b669 	.word	0x0000b669

0000b738 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    b738:	b580      	push	{r7, lr}
    b73a:	b082      	sub	sp, #8
    b73c:	af00      	add	r7, sp, #0
    b73e:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    b740:	687b      	ldr	r3, [r7, #4]
    b742:	0019      	movs	r1, r3
    b744:	2000      	movs	r0, #0
    b746:	4b03      	ldr	r3, [pc, #12]	; (b754 <sd_mmc_read_capacity_0+0x1c>)
    b748:	4798      	blx	r3
    b74a:	0003      	movs	r3, r0
}
    b74c:	0018      	movs	r0, r3
    b74e:	46bd      	mov	sp, r7
    b750:	b002      	add	sp, #8
    b752:	bd80      	pop	{r7, pc}
    b754:	0000b6f9 	.word	0x0000b6f9

0000b758 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    b758:	b580      	push	{r7, lr}
    b75a:	b082      	sub	sp, #8
    b75c:	af00      	add	r7, sp, #0
    b75e:	0002      	movs	r2, r0
    b760:	1dfb      	adds	r3, r7, #7
    b762:	701a      	strb	r2, [r3, #0]
    b764:	1dbb      	adds	r3, r7, #6
    b766:	1c0a      	adds	r2, r1, #0
    b768:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    b76a:	1dfb      	adds	r3, r7, #7
    b76c:	781b      	ldrb	r3, [r3, #0]
    b76e:	4a04      	ldr	r2, [pc, #16]	; (b780 <sd_mmc_unload+0x28>)
    b770:	1db9      	adds	r1, r7, #6
    b772:	7809      	ldrb	r1, [r1, #0]
    b774:	54d1      	strb	r1, [r2, r3]
	return true;
    b776:	2301      	movs	r3, #1
}
    b778:	0018      	movs	r0, r3
    b77a:	46bd      	mov	sp, r7
    b77c:	b002      	add	sp, #8
    b77e:	bd80      	pop	{r7, pc}
    b780:	200040c4 	.word	0x200040c4

0000b784 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    b784:	b580      	push	{r7, lr}
    b786:	b082      	sub	sp, #8
    b788:	af00      	add	r7, sp, #0
    b78a:	0002      	movs	r2, r0
    b78c:	1dfb      	adds	r3, r7, #7
    b78e:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    b790:	1dfb      	adds	r3, r7, #7
    b792:	781b      	ldrb	r3, [r3, #0]
    b794:	0019      	movs	r1, r3
    b796:	2000      	movs	r0, #0
    b798:	4b03      	ldr	r3, [pc, #12]	; (b7a8 <sd_mmc_unload_0+0x24>)
    b79a:	4798      	blx	r3
    b79c:	0003      	movs	r3, r0
}
    b79e:	0018      	movs	r0, r3
    b7a0:	46bd      	mov	sp, r7
    b7a2:	b002      	add	sp, #8
    b7a4:	bd80      	pop	{r7, pc}
    b7a6:	46c0      	nop			; (mov r8, r8)
    b7a8:	0000b759 	.word	0x0000b759

0000b7ac <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    b7ac:	b580      	push	{r7, lr}
    b7ae:	b082      	sub	sp, #8
    b7b0:	af00      	add	r7, sp, #0
    b7b2:	0002      	movs	r2, r0
    b7b4:	1dfb      	adds	r3, r7, #7
    b7b6:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    b7b8:	1dfb      	adds	r3, r7, #7
    b7ba:	781b      	ldrb	r3, [r3, #0]
    b7bc:	0018      	movs	r0, r3
    b7be:	4b03      	ldr	r3, [pc, #12]	; (b7cc <sd_mmc_wr_protect+0x20>)
    b7c0:	4798      	blx	r3
    b7c2:	0003      	movs	r3, r0
}
    b7c4:	0018      	movs	r0, r3
    b7c6:	46bd      	mov	sp, r7
    b7c8:	b002      	add	sp, #8
    b7ca:	bd80      	pop	{r7, pc}
    b7cc:	0000b2c9 	.word	0x0000b2c9

0000b7d0 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    b7d0:	b580      	push	{r7, lr}
    b7d2:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    b7d4:	2000      	movs	r0, #0
    b7d6:	4b03      	ldr	r3, [pc, #12]	; (b7e4 <sd_mmc_wr_protect_0+0x14>)
    b7d8:	4798      	blx	r3
    b7da:	0003      	movs	r3, r0
}
    b7dc:	0018      	movs	r0, r3
    b7de:	46bd      	mov	sp, r7
    b7e0:	bd80      	pop	{r7, pc}
    b7e2:	46c0      	nop			; (mov r8, r8)
    b7e4:	0000b7ad 	.word	0x0000b7ad

0000b7e8 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    b7e8:	b580      	push	{r7, lr}
    b7ea:	b082      	sub	sp, #8
    b7ec:	af00      	add	r7, sp, #0
    b7ee:	0002      	movs	r2, r0
    b7f0:	1dfb      	adds	r3, r7, #7
    b7f2:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    b7f4:	2301      	movs	r3, #1
}
    b7f6:	0018      	movs	r0, r3
    b7f8:	46bd      	mov	sp, r7
    b7fa:	b002      	add	sp, #8
    b7fc:	bd80      	pop	{r7, pc}
	...

0000b800 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    b800:	b580      	push	{r7, lr}
    b802:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    b804:	2000      	movs	r0, #0
    b806:	4b03      	ldr	r3, [pc, #12]	; (b814 <sd_mmc_removal_0+0x14>)
    b808:	4798      	blx	r3
    b80a:	0003      	movs	r3, r0
}
    b80c:	0018      	movs	r0, r3
    b80e:	46bd      	mov	sp, r7
    b810:	bd80      	pop	{r7, pc}
    b812:	46c0      	nop			; (mov r8, r8)
    b814:	0000b7e9 	.word	0x0000b7e9

0000b818 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    b818:	b580      	push	{r7, lr}
    b81a:	b084      	sub	sp, #16
    b81c:	af00      	add	r7, sp, #0
    b81e:	60b9      	str	r1, [r7, #8]
    b820:	607a      	str	r2, [r7, #4]
    b822:	230f      	movs	r3, #15
    b824:	18fb      	adds	r3, r7, r3
    b826:	1c02      	adds	r2, r0, #0
    b828:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    b82a:	68b9      	ldr	r1, [r7, #8]
    b82c:	230f      	movs	r3, #15
    b82e:	18fb      	adds	r3, r7, r3
    b830:	781b      	ldrb	r3, [r3, #0]
    b832:	2201      	movs	r2, #1
    b834:	0018      	movs	r0, r3
    b836:	4b10      	ldr	r3, [pc, #64]	; (b878 <sd_mmc_mem_2_ram+0x60>)
    b838:	4798      	blx	r3
    b83a:	1e03      	subs	r3, r0, #0
    b83c:	d005      	beq.n	b84a <sd_mmc_mem_2_ram+0x32>
    b83e:	2b02      	cmp	r3, #2
    b840:	d101      	bne.n	b846 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    b842:	2302      	movs	r3, #2
    b844:	e013      	b.n	b86e <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    b846:	2301      	movs	r3, #1
    b848:	e011      	b.n	b86e <sd_mmc_mem_2_ram+0x56>
		break;
    b84a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    b84c:	687b      	ldr	r3, [r7, #4]
    b84e:	2101      	movs	r1, #1
    b850:	0018      	movs	r0, r3
    b852:	4b0a      	ldr	r3, [pc, #40]	; (b87c <sd_mmc_mem_2_ram+0x64>)
    b854:	4798      	blx	r3
    b856:	1e03      	subs	r3, r0, #0
    b858:	d001      	beq.n	b85e <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    b85a:	2301      	movs	r3, #1
    b85c:	e007      	b.n	b86e <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    b85e:	2000      	movs	r0, #0
    b860:	4b07      	ldr	r3, [pc, #28]	; (b880 <sd_mmc_mem_2_ram+0x68>)
    b862:	4798      	blx	r3
    b864:	1e03      	subs	r3, r0, #0
    b866:	d001      	beq.n	b86c <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    b868:	2301      	movs	r3, #1
    b86a:	e000      	b.n	b86e <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    b86c:	2300      	movs	r3, #0
}
    b86e:	0018      	movs	r0, r3
    b870:	46bd      	mov	sp, r7
    b872:	b004      	add	sp, #16
    b874:	bd80      	pop	{r7, pc}
    b876:	46c0      	nop			; (mov r8, r8)
    b878:	0000b2e1 	.word	0x0000b2e1
    b87c:	0000b3cd 	.word	0x0000b3cd
    b880:	0000b425 	.word	0x0000b425

0000b884 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    b884:	b580      	push	{r7, lr}
    b886:	b082      	sub	sp, #8
    b888:	af00      	add	r7, sp, #0
    b88a:	6078      	str	r0, [r7, #4]
    b88c:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    b88e:	683a      	ldr	r2, [r7, #0]
    b890:	687b      	ldr	r3, [r7, #4]
    b892:	0019      	movs	r1, r3
    b894:	2000      	movs	r0, #0
    b896:	4b03      	ldr	r3, [pc, #12]	; (b8a4 <sd_mmc_mem_2_ram_0+0x20>)
    b898:	4798      	blx	r3
    b89a:	0003      	movs	r3, r0
}
    b89c:	0018      	movs	r0, r3
    b89e:	46bd      	mov	sp, r7
    b8a0:	b002      	add	sp, #8
    b8a2:	bd80      	pop	{r7, pc}
    b8a4:	0000b819 	.word	0x0000b819

0000b8a8 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    b8a8:	b580      	push	{r7, lr}
    b8aa:	b084      	sub	sp, #16
    b8ac:	af00      	add	r7, sp, #0
    b8ae:	60b9      	str	r1, [r7, #8]
    b8b0:	607a      	str	r2, [r7, #4]
    b8b2:	230f      	movs	r3, #15
    b8b4:	18fb      	adds	r3, r7, r3
    b8b6:	1c02      	adds	r2, r0, #0
    b8b8:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    b8ba:	68b9      	ldr	r1, [r7, #8]
    b8bc:	230f      	movs	r3, #15
    b8be:	18fb      	adds	r3, r7, r3
    b8c0:	781b      	ldrb	r3, [r3, #0]
    b8c2:	2201      	movs	r2, #1
    b8c4:	0018      	movs	r0, r3
    b8c6:	4b10      	ldr	r3, [pc, #64]	; (b908 <sd_mmc_ram_2_mem+0x60>)
    b8c8:	4798      	blx	r3
    b8ca:	1e03      	subs	r3, r0, #0
    b8cc:	d005      	beq.n	b8da <sd_mmc_ram_2_mem+0x32>
    b8ce:	2b02      	cmp	r3, #2
    b8d0:	d101      	bne.n	b8d6 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    b8d2:	2302      	movs	r3, #2
    b8d4:	e013      	b.n	b8fe <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    b8d6:	2301      	movs	r3, #1
    b8d8:	e011      	b.n	b8fe <sd_mmc_ram_2_mem+0x56>
		break;
    b8da:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    b8dc:	687b      	ldr	r3, [r7, #4]
    b8de:	2101      	movs	r1, #1
    b8e0:	0018      	movs	r0, r3
    b8e2:	4b0a      	ldr	r3, [pc, #40]	; (b90c <sd_mmc_ram_2_mem+0x64>)
    b8e4:	4798      	blx	r3
    b8e6:	1e03      	subs	r3, r0, #0
    b8e8:	d001      	beq.n	b8ee <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    b8ea:	2301      	movs	r3, #1
    b8ec:	e007      	b.n	b8fe <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    b8ee:	2000      	movs	r0, #0
    b8f0:	4b07      	ldr	r3, [pc, #28]	; (b910 <sd_mmc_ram_2_mem+0x68>)
    b8f2:	4798      	blx	r3
    b8f4:	1e03      	subs	r3, r0, #0
    b8f6:	d001      	beq.n	b8fc <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    b8f8:	2301      	movs	r3, #1
    b8fa:	e000      	b.n	b8fe <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    b8fc:	2300      	movs	r3, #0
}
    b8fe:	0018      	movs	r0, r3
    b900:	46bd      	mov	sp, r7
    b902:	b004      	add	sp, #16
    b904:	bd80      	pop	{r7, pc}
    b906:	46c0      	nop			; (mov r8, r8)
    b908:	0000b4bd 	.word	0x0000b4bd
    b90c:	0000b5a5 	.word	0x0000b5a5
    b910:	0000b5fd 	.word	0x0000b5fd

0000b914 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    b914:	b580      	push	{r7, lr}
    b916:	b082      	sub	sp, #8
    b918:	af00      	add	r7, sp, #0
    b91a:	6078      	str	r0, [r7, #4]
    b91c:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    b91e:	683a      	ldr	r2, [r7, #0]
    b920:	687b      	ldr	r3, [r7, #4]
    b922:	0019      	movs	r1, r3
    b924:	2000      	movs	r0, #0
    b926:	4b03      	ldr	r3, [pc, #12]	; (b934 <sd_mmc_ram_2_mem_0+0x20>)
    b928:	4798      	blx	r3
    b92a:	0003      	movs	r3, r0
}
    b92c:	0018      	movs	r0, r3
    b92e:	46bd      	mov	sp, r7
    b930:	b002      	add	sp, #8
    b932:	bd80      	pop	{r7, pc}
    b934:	0000b8a9 	.word	0x0000b8a9

0000b938 <system_pinmux_get_group_from_gpio_pin>:
{
    b938:	b580      	push	{r7, lr}
    b93a:	b084      	sub	sp, #16
    b93c:	af00      	add	r7, sp, #0
    b93e:	0002      	movs	r2, r0
    b940:	1dfb      	adds	r3, r7, #7
    b942:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    b944:	230f      	movs	r3, #15
    b946:	18fb      	adds	r3, r7, r3
    b948:	1dfa      	adds	r2, r7, #7
    b94a:	7812      	ldrb	r2, [r2, #0]
    b94c:	09d2      	lsrs	r2, r2, #7
    b94e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    b950:	230e      	movs	r3, #14
    b952:	18fb      	adds	r3, r7, r3
    b954:	1dfa      	adds	r2, r7, #7
    b956:	7812      	ldrb	r2, [r2, #0]
    b958:	0952      	lsrs	r2, r2, #5
    b95a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    b95c:	4b0d      	ldr	r3, [pc, #52]	; (b994 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    b95e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    b960:	230f      	movs	r3, #15
    b962:	18fb      	adds	r3, r7, r3
    b964:	781b      	ldrb	r3, [r3, #0]
    b966:	2b00      	cmp	r3, #0
    b968:	d10f      	bne.n	b98a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    b96a:	230f      	movs	r3, #15
    b96c:	18fb      	adds	r3, r7, r3
    b96e:	781b      	ldrb	r3, [r3, #0]
    b970:	009b      	lsls	r3, r3, #2
    b972:	2210      	movs	r2, #16
    b974:	4694      	mov	ip, r2
    b976:	44bc      	add	ip, r7
    b978:	4463      	add	r3, ip
    b97a:	3b08      	subs	r3, #8
    b97c:	681a      	ldr	r2, [r3, #0]
    b97e:	230e      	movs	r3, #14
    b980:	18fb      	adds	r3, r7, r3
    b982:	781b      	ldrb	r3, [r3, #0]
    b984:	01db      	lsls	r3, r3, #7
    b986:	18d3      	adds	r3, r2, r3
    b988:	e000      	b.n	b98c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    b98a:	2300      	movs	r3, #0
}
    b98c:	0018      	movs	r0, r3
    b98e:	46bd      	mov	sp, r7
    b990:	b004      	add	sp, #16
    b992:	bd80      	pop	{r7, pc}
    b994:	41004400 	.word	0x41004400

0000b998 <system_interrupt_enable>:
{
    b998:	b580      	push	{r7, lr}
    b99a:	b082      	sub	sp, #8
    b99c:	af00      	add	r7, sp, #0
    b99e:	0002      	movs	r2, r0
    b9a0:	1dfb      	adds	r3, r7, #7
    b9a2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b9a4:	4b06      	ldr	r3, [pc, #24]	; (b9c0 <system_interrupt_enable+0x28>)
    b9a6:	1dfa      	adds	r2, r7, #7
    b9a8:	7812      	ldrb	r2, [r2, #0]
    b9aa:	0011      	movs	r1, r2
    b9ac:	221f      	movs	r2, #31
    b9ae:	400a      	ands	r2, r1
    b9b0:	2101      	movs	r1, #1
    b9b2:	4091      	lsls	r1, r2
    b9b4:	000a      	movs	r2, r1
    b9b6:	601a      	str	r2, [r3, #0]
}
    b9b8:	46c0      	nop			; (mov r8, r8)
    b9ba:	46bd      	mov	sp, r7
    b9bc:	b002      	add	sp, #8
    b9be:	bd80      	pop	{r7, pc}
    b9c0:	e000e100 	.word	0xe000e100

0000b9c4 <port_get_group_from_gpio_pin>:
{
    b9c4:	b580      	push	{r7, lr}
    b9c6:	b082      	sub	sp, #8
    b9c8:	af00      	add	r7, sp, #0
    b9ca:	0002      	movs	r2, r0
    b9cc:	1dfb      	adds	r3, r7, #7
    b9ce:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    b9d0:	1dfb      	adds	r3, r7, #7
    b9d2:	781b      	ldrb	r3, [r3, #0]
    b9d4:	0018      	movs	r0, r3
    b9d6:	4b03      	ldr	r3, [pc, #12]	; (b9e4 <port_get_group_from_gpio_pin+0x20>)
    b9d8:	4798      	blx	r3
    b9da:	0003      	movs	r3, r0
}
    b9dc:	0018      	movs	r0, r3
    b9de:	46bd      	mov	sp, r7
    b9e0:	b002      	add	sp, #8
    b9e2:	bd80      	pop	{r7, pc}
    b9e4:	0000b939 	.word	0x0000b939

0000b9e8 <port_get_config_defaults>:
{
    b9e8:	b580      	push	{r7, lr}
    b9ea:	b082      	sub	sp, #8
    b9ec:	af00      	add	r7, sp, #0
    b9ee:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    b9f0:	687b      	ldr	r3, [r7, #4]
    b9f2:	2200      	movs	r2, #0
    b9f4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    b9f6:	687b      	ldr	r3, [r7, #4]
    b9f8:	2201      	movs	r2, #1
    b9fa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    b9fc:	687b      	ldr	r3, [r7, #4]
    b9fe:	2200      	movs	r2, #0
    ba00:	709a      	strb	r2, [r3, #2]
}
    ba02:	46c0      	nop			; (mov r8, r8)
    ba04:	46bd      	mov	sp, r7
    ba06:	b002      	add	sp, #8
    ba08:	bd80      	pop	{r7, pc}
	...

0000ba0c <port_pin_set_output_level>:
{
    ba0c:	b580      	push	{r7, lr}
    ba0e:	b084      	sub	sp, #16
    ba10:	af00      	add	r7, sp, #0
    ba12:	0002      	movs	r2, r0
    ba14:	1dfb      	adds	r3, r7, #7
    ba16:	701a      	strb	r2, [r3, #0]
    ba18:	1dbb      	adds	r3, r7, #6
    ba1a:	1c0a      	adds	r2, r1, #0
    ba1c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    ba1e:	1dfb      	adds	r3, r7, #7
    ba20:	781b      	ldrb	r3, [r3, #0]
    ba22:	0018      	movs	r0, r3
    ba24:	4b0d      	ldr	r3, [pc, #52]	; (ba5c <port_pin_set_output_level+0x50>)
    ba26:	4798      	blx	r3
    ba28:	0003      	movs	r3, r0
    ba2a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ba2c:	1dfb      	adds	r3, r7, #7
    ba2e:	781b      	ldrb	r3, [r3, #0]
    ba30:	221f      	movs	r2, #31
    ba32:	4013      	ands	r3, r2
    ba34:	2201      	movs	r2, #1
    ba36:	409a      	lsls	r2, r3
    ba38:	0013      	movs	r3, r2
    ba3a:	60bb      	str	r3, [r7, #8]
	if (level) {
    ba3c:	1dbb      	adds	r3, r7, #6
    ba3e:	781b      	ldrb	r3, [r3, #0]
    ba40:	2b00      	cmp	r3, #0
    ba42:	d003      	beq.n	ba4c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    ba44:	68fb      	ldr	r3, [r7, #12]
    ba46:	68ba      	ldr	r2, [r7, #8]
    ba48:	619a      	str	r2, [r3, #24]
}
    ba4a:	e002      	b.n	ba52 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    ba4c:	68fb      	ldr	r3, [r7, #12]
    ba4e:	68ba      	ldr	r2, [r7, #8]
    ba50:	615a      	str	r2, [r3, #20]
}
    ba52:	46c0      	nop			; (mov r8, r8)
    ba54:	46bd      	mov	sp, r7
    ba56:	b004      	add	sp, #16
    ba58:	bd80      	pop	{r7, pc}
    ba5a:	46c0      	nop			; (mov r8, r8)
    ba5c:	0000b9c5 	.word	0x0000b9c5

0000ba60 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    ba60:	b580      	push	{r7, lr}
    ba62:	b084      	sub	sp, #16
    ba64:	af00      	add	r7, sp, #0
    ba66:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    ba68:	687b      	ldr	r3, [r7, #4]
    ba6a:	681b      	ldr	r3, [r3, #0]
    ba6c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    ba6e:	68fb      	ldr	r3, [r7, #12]
    ba70:	69db      	ldr	r3, [r3, #28]
    ba72:	1e5a      	subs	r2, r3, #1
    ba74:	4193      	sbcs	r3, r2
    ba76:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    ba78:	0018      	movs	r0, r3
    ba7a:	46bd      	mov	sp, r7
    ba7c:	b004      	add	sp, #16
    ba7e:	bd80      	pop	{r7, pc}

0000ba80 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    ba80:	b580      	push	{r7, lr}
    ba82:	b082      	sub	sp, #8
    ba84:	af00      	add	r7, sp, #0
    ba86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    ba88:	687b      	ldr	r3, [r7, #4]
    ba8a:	2201      	movs	r2, #1
    ba8c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    ba8e:	687b      	ldr	r3, [r7, #4]
    ba90:	2200      	movs	r2, #0
    ba92:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    ba94:	687b      	ldr	r3, [r7, #4]
    ba96:	2200      	movs	r2, #0
    ba98:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    ba9a:	687b      	ldr	r3, [r7, #4]
    ba9c:	22c0      	movs	r2, #192	; 0xc0
    ba9e:	0392      	lsls	r2, r2, #14
    baa0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    baa2:	687b      	ldr	r3, [r7, #4]
    baa4:	2200      	movs	r2, #0
    baa6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    baa8:	687b      	ldr	r3, [r7, #4]
    baaa:	2200      	movs	r2, #0
    baac:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    baae:	687b      	ldr	r3, [r7, #4]
    bab0:	2201      	movs	r2, #1
    bab2:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    bab4:	687b      	ldr	r3, [r7, #4]
    bab6:	2201      	movs	r2, #1
    bab8:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    baba:	687b      	ldr	r3, [r7, #4]
    babc:	2200      	movs	r2, #0
    babe:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    bac0:	687b      	ldr	r3, [r7, #4]
    bac2:	2224      	movs	r2, #36	; 0x24
    bac4:	2100      	movs	r1, #0
    bac6:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    bac8:	687b      	ldr	r3, [r7, #4]
    baca:	3318      	adds	r3, #24
    bacc:	220c      	movs	r2, #12
    bace:	2100      	movs	r1, #0
    bad0:	0018      	movs	r0, r3
    bad2:	4b0a      	ldr	r3, [pc, #40]	; (bafc <spi_get_config_defaults+0x7c>)
    bad4:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    bad6:	687b      	ldr	r3, [r7, #4]
    bad8:	4a09      	ldr	r2, [pc, #36]	; (bb00 <spi_get_config_defaults+0x80>)
    bada:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    badc:	687b      	ldr	r3, [r7, #4]
    bade:	2200      	movs	r2, #0
    bae0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    bae2:	687b      	ldr	r3, [r7, #4]
    bae4:	2200      	movs	r2, #0
    bae6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    bae8:	687b      	ldr	r3, [r7, #4]
    baea:	2200      	movs	r2, #0
    baec:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    baee:	687b      	ldr	r3, [r7, #4]
    baf0:	2200      	movs	r2, #0
    baf2:	635a      	str	r2, [r3, #52]	; 0x34

};
    baf4:	46c0      	nop			; (mov r8, r8)
    baf6:	46bd      	mov	sp, r7
    baf8:	b002      	add	sp, #8
    bafa:	bd80      	pop	{r7, pc}
    bafc:	00020d8b 	.word	0x00020d8b
    bb00:	000186a0 	.word	0x000186a0

0000bb04 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    bb04:	b580      	push	{r7, lr}
    bb06:	b082      	sub	sp, #8
    bb08:	af00      	add	r7, sp, #0
    bb0a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    bb0c:	687b      	ldr	r3, [r7, #4]
    bb0e:	220a      	movs	r2, #10
    bb10:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    bb12:	687b      	ldr	r3, [r7, #4]
    bb14:	2200      	movs	r2, #0
    bb16:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    bb18:	687b      	ldr	r3, [r7, #4]
    bb1a:	2200      	movs	r2, #0
    bb1c:	709a      	strb	r2, [r3, #2]
}
    bb1e:	46c0      	nop			; (mov r8, r8)
    bb20:	46bd      	mov	sp, r7
    bb22:	b002      	add	sp, #8
    bb24:	bd80      	pop	{r7, pc}
	...

0000bb28 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    bb28:	b580      	push	{r7, lr}
    bb2a:	b084      	sub	sp, #16
    bb2c:	af00      	add	r7, sp, #0
    bb2e:	6078      	str	r0, [r7, #4]
    bb30:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    bb32:	683b      	ldr	r3, [r7, #0]
    bb34:	781a      	ldrb	r2, [r3, #0]
    bb36:	687b      	ldr	r3, [r7, #4]
    bb38:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    bb3a:	683b      	ldr	r3, [r7, #0]
    bb3c:	785a      	ldrb	r2, [r3, #1]
    bb3e:	687b      	ldr	r3, [r7, #4]
    bb40:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    bb42:	683b      	ldr	r3, [r7, #0]
    bb44:	789a      	ldrb	r2, [r3, #2]
    bb46:	687b      	ldr	r3, [r7, #4]
    bb48:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    bb4a:	230c      	movs	r3, #12
    bb4c:	18fb      	adds	r3, r7, r3
    bb4e:	0018      	movs	r0, r3
    bb50:	4b0b      	ldr	r3, [pc, #44]	; (bb80 <spi_attach_slave+0x58>)
    bb52:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    bb54:	230c      	movs	r3, #12
    bb56:	18fb      	adds	r3, r7, r3
    bb58:	2201      	movs	r2, #1
    bb5a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    bb5c:	687b      	ldr	r3, [r7, #4]
    bb5e:	781b      	ldrb	r3, [r3, #0]
    bb60:	220c      	movs	r2, #12
    bb62:	18ba      	adds	r2, r7, r2
    bb64:	0011      	movs	r1, r2
    bb66:	0018      	movs	r0, r3
    bb68:	4b06      	ldr	r3, [pc, #24]	; (bb84 <spi_attach_slave+0x5c>)
    bb6a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    bb6c:	687b      	ldr	r3, [r7, #4]
    bb6e:	781b      	ldrb	r3, [r3, #0]
    bb70:	2101      	movs	r1, #1
    bb72:	0018      	movs	r0, r3
    bb74:	4b04      	ldr	r3, [pc, #16]	; (bb88 <spi_attach_slave+0x60>)
    bb76:	4798      	blx	r3
}
    bb78:	46c0      	nop			; (mov r8, r8)
    bb7a:	46bd      	mov	sp, r7
    bb7c:	b004      	add	sp, #16
    bb7e:	bd80      	pop	{r7, pc}
    bb80:	0000b9e9 	.word	0x0000b9e9
    bb84:	00012ecd 	.word	0x00012ecd
    bb88:	0000ba0d 	.word	0x0000ba0d

0000bb8c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    bb8c:	b580      	push	{r7, lr}
    bb8e:	b084      	sub	sp, #16
    bb90:	af00      	add	r7, sp, #0
    bb92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    bb94:	687b      	ldr	r3, [r7, #4]
    bb96:	681b      	ldr	r3, [r3, #0]
    bb98:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    bb9a:	687b      	ldr	r3, [r7, #4]
    bb9c:	681b      	ldr	r3, [r3, #0]
    bb9e:	0018      	movs	r0, r3
    bba0:	4b0b      	ldr	r3, [pc, #44]	; (bbd0 <spi_enable+0x44>)
    bba2:	4798      	blx	r3
    bba4:	0003      	movs	r3, r0
    bba6:	0018      	movs	r0, r3
    bba8:	4b0a      	ldr	r3, [pc, #40]	; (bbd4 <spi_enable+0x48>)
    bbaa:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    bbac:	46c0      	nop			; (mov r8, r8)
    bbae:	687b      	ldr	r3, [r7, #4]
    bbb0:	0018      	movs	r0, r3
    bbb2:	4b09      	ldr	r3, [pc, #36]	; (bbd8 <spi_enable+0x4c>)
    bbb4:	4798      	blx	r3
    bbb6:	1e03      	subs	r3, r0, #0
    bbb8:	d1f9      	bne.n	bbae <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    bbba:	68fb      	ldr	r3, [r7, #12]
    bbbc:	681b      	ldr	r3, [r3, #0]
    bbbe:	2202      	movs	r2, #2
    bbc0:	431a      	orrs	r2, r3
    bbc2:	68fb      	ldr	r3, [r7, #12]
    bbc4:	601a      	str	r2, [r3, #0]
}
    bbc6:	46c0      	nop			; (mov r8, r8)
    bbc8:	46bd      	mov	sp, r7
    bbca:	b004      	add	sp, #16
    bbcc:	bd80      	pop	{r7, pc}
    bbce:	46c0      	nop			; (mov r8, r8)
    bbd0:	00013b9d 	.word	0x00013b9d
    bbd4:	0000b999 	.word	0x0000b999
    bbd8:	0000ba61 	.word	0x0000ba61

0000bbdc <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    bbdc:	b580      	push	{r7, lr}
    bbde:	b084      	sub	sp, #16
    bbe0:	af00      	add	r7, sp, #0
    bbe2:	6078      	str	r0, [r7, #4]
    bbe4:	000a      	movs	r2, r1
    bbe6:	1cfb      	adds	r3, r7, #3
    bbe8:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    bbea:	230f      	movs	r3, #15
    bbec:	18fb      	adds	r3, r7, r3
    bbee:	2200      	movs	r2, #0
    bbf0:	701a      	strb	r2, [r3, #0]
	while (size--) {
    bbf2:	e038      	b.n	bc66 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    bbf4:	687b      	ldr	r3, [r7, #4]
    bbf6:	1c5a      	adds	r2, r3, #1
    bbf8:	607a      	str	r2, [r7, #4]
    bbfa:	220e      	movs	r2, #14
    bbfc:	18ba      	adds	r2, r7, r2
    bbfe:	781b      	ldrb	r3, [r3, #0]
    bc00:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    bc02:	230d      	movs	r3, #13
    bc04:	18fb      	adds	r3, r7, r3
    bc06:	2200      	movs	r2, #0
    bc08:	701a      	strb	r2, [r3, #0]
    bc0a:	e027      	b.n	bc5c <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    bc0c:	230f      	movs	r3, #15
    bc0e:	18fa      	adds	r2, r7, r3
    bc10:	230f      	movs	r3, #15
    bc12:	18fb      	adds	r3, r7, r3
    bc14:	781b      	ldrb	r3, [r3, #0]
    bc16:	18db      	adds	r3, r3, r3
    bc18:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    bc1a:	230e      	movs	r3, #14
    bc1c:	18fa      	adds	r2, r7, r3
    bc1e:	230f      	movs	r3, #15
    bc20:	18fb      	adds	r3, r7, r3
    bc22:	7812      	ldrb	r2, [r2, #0]
    bc24:	781b      	ldrb	r3, [r3, #0]
    bc26:	4053      	eors	r3, r2
    bc28:	b2db      	uxtb	r3, r3
    bc2a:	b25b      	sxtb	r3, r3
    bc2c:	2b00      	cmp	r3, #0
    bc2e:	da07      	bge.n	bc40 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    bc30:	230f      	movs	r3, #15
    bc32:	18fb      	adds	r3, r7, r3
    bc34:	220f      	movs	r2, #15
    bc36:	18ba      	adds	r2, r7, r2
    bc38:	7812      	ldrb	r2, [r2, #0]
    bc3a:	2109      	movs	r1, #9
    bc3c:	404a      	eors	r2, r1
    bc3e:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    bc40:	230e      	movs	r3, #14
    bc42:	18fa      	adds	r2, r7, r3
    bc44:	230e      	movs	r3, #14
    bc46:	18fb      	adds	r3, r7, r3
    bc48:	781b      	ldrb	r3, [r3, #0]
    bc4a:	18db      	adds	r3, r3, r3
    bc4c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    bc4e:	230d      	movs	r3, #13
    bc50:	18fb      	adds	r3, r7, r3
    bc52:	781a      	ldrb	r2, [r3, #0]
    bc54:	230d      	movs	r3, #13
    bc56:	18fb      	adds	r3, r7, r3
    bc58:	3201      	adds	r2, #1
    bc5a:	701a      	strb	r2, [r3, #0]
    bc5c:	230d      	movs	r3, #13
    bc5e:	18fb      	adds	r3, r7, r3
    bc60:	781b      	ldrb	r3, [r3, #0]
    bc62:	2b07      	cmp	r3, #7
    bc64:	d9d2      	bls.n	bc0c <sd_mmc_spi_crc7+0x30>
	while (size--) {
    bc66:	1cfb      	adds	r3, r7, #3
    bc68:	781b      	ldrb	r3, [r3, #0]
    bc6a:	1cfa      	adds	r2, r7, #3
    bc6c:	1e59      	subs	r1, r3, #1
    bc6e:	7011      	strb	r1, [r2, #0]
    bc70:	2b00      	cmp	r3, #0
    bc72:	d1bf      	bne.n	bbf4 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    bc74:	230f      	movs	r3, #15
    bc76:	18fb      	adds	r3, r7, r3
    bc78:	781b      	ldrb	r3, [r3, #0]
    bc7a:	005b      	lsls	r3, r3, #1
    bc7c:	b25b      	sxtb	r3, r3
    bc7e:	2201      	movs	r2, #1
    bc80:	4313      	orrs	r3, r2
    bc82:	b25a      	sxtb	r2, r3
    bc84:	230f      	movs	r3, #15
    bc86:	18fb      	adds	r3, r7, r3
    bc88:	701a      	strb	r2, [r3, #0]
	return crc;
    bc8a:	230f      	movs	r3, #15
    bc8c:	18fb      	adds	r3, r7, r3
    bc8e:	781b      	ldrb	r3, [r3, #0]
}
    bc90:	0018      	movs	r0, r3
    bc92:	46bd      	mov	sp, r7
    bc94:	b004      	add	sp, #16
    bc96:	bd80      	pop	{r7, pc}

0000bc98 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    bc98:	b590      	push	{r4, r7, lr}
    bc9a:	b083      	sub	sp, #12
    bc9c:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    bc9e:	1c7b      	adds	r3, r7, #1
    bca0:	22ff      	movs	r2, #255	; 0xff
    bca2:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    bca4:	1cbb      	adds	r3, r7, #2
    bca6:	22ff      	movs	r2, #255	; 0xff
    bca8:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    bcaa:	1cbb      	adds	r3, r7, #2
    bcac:	881b      	ldrh	r3, [r3, #0]
    bcae:	1c79      	adds	r1, r7, #1
    bcb0:	4811      	ldr	r0, [pc, #68]	; (bcf8 <sd_mmc_spi_wait_busy+0x60>)
    bcb2:	2201      	movs	r2, #1
    bcb4:	4c11      	ldr	r4, [pc, #68]	; (bcfc <sd_mmc_spi_wait_busy+0x64>)
    bcb6:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    bcb8:	4b11      	ldr	r3, [pc, #68]	; (bd00 <sd_mmc_spi_wait_busy+0x68>)
    bcba:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    bcbc:	1cbb      	adds	r3, r7, #2
    bcbe:	881b      	ldrh	r3, [r3, #0]
    bcc0:	1c79      	adds	r1, r7, #1
    bcc2:	480d      	ldr	r0, [pc, #52]	; (bcf8 <sd_mmc_spi_wait_busy+0x60>)
    bcc4:	2201      	movs	r2, #1
    bcc6:	4c0d      	ldr	r4, [pc, #52]	; (bcfc <sd_mmc_spi_wait_busy+0x64>)
    bcc8:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    bcca:	1cbb      	adds	r3, r7, #2
    bccc:	881b      	ldrh	r3, [r3, #0]
    bcce:	1c79      	adds	r1, r7, #1
    bcd0:	4809      	ldr	r0, [pc, #36]	; (bcf8 <sd_mmc_spi_wait_busy+0x60>)
    bcd2:	2201      	movs	r2, #1
    bcd4:	4c09      	ldr	r4, [pc, #36]	; (bcfc <sd_mmc_spi_wait_busy+0x64>)
    bcd6:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    bcd8:	687b      	ldr	r3, [r7, #4]
    bcda:	1e5a      	subs	r2, r3, #1
    bcdc:	607a      	str	r2, [r7, #4]
    bcde:	2b00      	cmp	r3, #0
    bce0:	d101      	bne.n	bce6 <sd_mmc_spi_wait_busy+0x4e>
			return false;
    bce2:	2300      	movs	r3, #0
    bce4:	e004      	b.n	bcf0 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    bce6:	1c7b      	adds	r3, r7, #1
    bce8:	781b      	ldrb	r3, [r3, #0]
    bcea:	2bff      	cmp	r3, #255	; 0xff
    bcec:	d1ed      	bne.n	bcca <sd_mmc_spi_wait_busy+0x32>
	return true;
    bcee:	2301      	movs	r3, #1
}
    bcf0:	0018      	movs	r0, r3
    bcf2:	46bd      	mov	sp, r7
    bcf4:	b003      	add	sp, #12
    bcf6:	bd90      	pop	{r4, r7, pc}
    bcf8:	200040c8 	.word	0x200040c8
    bcfc:	000144dd 	.word	0x000144dd
    bd00:	00030d40 	.word	0x00030d40

0000bd04 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    bd04:	b590      	push	{r4, r7, lr}
    bd06:	b083      	sub	sp, #12
    bd08:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    bd0a:	1cbb      	adds	r3, r7, #2
    bd0c:	22ff      	movs	r2, #255	; 0xff
    bd0e:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    bd10:	1c7b      	adds	r3, r7, #1
    bd12:	2200      	movs	r2, #0
    bd14:	701a      	strb	r2, [r3, #0]
	i = 500000;
    bd16:	4b18      	ldr	r3, [pc, #96]	; (bd78 <sd_mmc_spi_start_read_block+0x74>)
    bd18:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    bd1a:	687b      	ldr	r3, [r7, #4]
    bd1c:	1e5a      	subs	r2, r3, #1
    bd1e:	607a      	str	r2, [r7, #4]
    bd20:	2b00      	cmp	r3, #0
    bd22:	d104      	bne.n	bd2e <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    bd24:	4b15      	ldr	r3, [pc, #84]	; (bd7c <sd_mmc_spi_start_read_block+0x78>)
    bd26:	2204      	movs	r2, #4
    bd28:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    bd2a:	2300      	movs	r3, #0
    bd2c:	e020      	b.n	bd70 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    bd2e:	1cbb      	adds	r3, r7, #2
    bd30:	881b      	ldrh	r3, [r3, #0]
    bd32:	1c79      	adds	r1, r7, #1
    bd34:	4812      	ldr	r0, [pc, #72]	; (bd80 <sd_mmc_spi_start_read_block+0x7c>)
    bd36:	2201      	movs	r2, #1
    bd38:	4c12      	ldr	r4, [pc, #72]	; (bd84 <sd_mmc_spi_start_read_block+0x80>)
    bd3a:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    bd3c:	1c7b      	adds	r3, r7, #1
    bd3e:	781b      	ldrb	r3, [r3, #0]
    bd40:	001a      	movs	r2, r3
    bd42:	23f0      	movs	r3, #240	; 0xf0
    bd44:	4013      	ands	r3, r2
    bd46:	d10e      	bne.n	bd66 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    bd48:	1c7b      	adds	r3, r7, #1
    bd4a:	781b      	ldrb	r3, [r3, #0]
    bd4c:	001a      	movs	r2, r3
    bd4e:	2307      	movs	r3, #7
    bd50:	4013      	ands	r3, r2
    bd52:	d003      	beq.n	bd5c <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    bd54:	4b09      	ldr	r3, [pc, #36]	; (bd7c <sd_mmc_spi_start_read_block+0x78>)
    bd56:	2207      	movs	r2, #7
    bd58:	701a      	strb	r2, [r3, #0]
    bd5a:	e002      	b.n	bd62 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    bd5c:	4b07      	ldr	r3, [pc, #28]	; (bd7c <sd_mmc_spi_start_read_block+0x78>)
    bd5e:	220b      	movs	r2, #11
    bd60:	701a      	strb	r2, [r3, #0]
			}
			return false;
    bd62:	2300      	movs	r3, #0
    bd64:	e004      	b.n	bd70 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    bd66:	1c7b      	adds	r3, r7, #1
    bd68:	781b      	ldrb	r3, [r3, #0]
    bd6a:	2bfe      	cmp	r3, #254	; 0xfe
    bd6c:	d1d5      	bne.n	bd1a <sd_mmc_spi_start_read_block+0x16>

	return true;
    bd6e:	2301      	movs	r3, #1
}
    bd70:	0018      	movs	r0, r3
    bd72:	46bd      	mov	sp, r7
    bd74:	b003      	add	sp, #12
    bd76:	bd90      	pop	{r4, r7, pc}
    bd78:	0007a120 	.word	0x0007a120
    bd7c:	2000410b 	.word	0x2000410b
    bd80:	200040c8 	.word	0x200040c8
    bd84:	000144dd 	.word	0x000144dd

0000bd88 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    bd88:	b590      	push	{r4, r7, lr}
    bd8a:	b083      	sub	sp, #12
    bd8c:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    bd8e:	1dbb      	adds	r3, r7, #6
    bd90:	22ff      	movs	r2, #255	; 0xff
    bd92:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    bd94:	1dbb      	adds	r3, r7, #6
    bd96:	881b      	ldrh	r3, [r3, #0]
    bd98:	1d39      	adds	r1, r7, #4
    bd9a:	4804      	ldr	r0, [pc, #16]	; (bdac <sd_mmc_spi_stop_read_block+0x24>)
    bd9c:	2202      	movs	r2, #2
    bd9e:	4c04      	ldr	r4, [pc, #16]	; (bdb0 <sd_mmc_spi_stop_read_block+0x28>)
    bda0:	47a0      	blx	r4
			dummy);
}
    bda2:	46c0      	nop			; (mov r8, r8)
    bda4:	46bd      	mov	sp, r7
    bda6:	b003      	add	sp, #12
    bda8:	bd90      	pop	{r4, r7, pc}
    bdaa:	46c0      	nop			; (mov r8, r8)
    bdac:	200040c8 	.word	0x200040c8
    bdb0:	000144dd 	.word	0x000144dd

0000bdb4 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    bdb4:	b580      	push	{r7, lr}
    bdb6:	b082      	sub	sp, #8
    bdb8:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    bdba:	1dfb      	adds	r3, r7, #7
    bdbc:	22ff      	movs	r2, #255	; 0xff
    bdbe:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    bdc0:	1df9      	adds	r1, r7, #7
    bdc2:	4b0d      	ldr	r3, [pc, #52]	; (bdf8 <sd_mmc_spi_start_write_block+0x44>)
    bdc4:	2201      	movs	r2, #1
    bdc6:	0018      	movs	r0, r3
    bdc8:	4b0c      	ldr	r3, [pc, #48]	; (bdfc <sd_mmc_spi_start_write_block+0x48>)
    bdca:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    bdcc:	4b0c      	ldr	r3, [pc, #48]	; (be00 <sd_mmc_spi_start_write_block+0x4c>)
    bdce:	881b      	ldrh	r3, [r3, #0]
    bdd0:	2b01      	cmp	r3, #1
    bdd2:	d103      	bne.n	bddc <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    bdd4:	1dbb      	adds	r3, r7, #6
    bdd6:	22fe      	movs	r2, #254	; 0xfe
    bdd8:	701a      	strb	r2, [r3, #0]
    bdda:	e002      	b.n	bde2 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    bddc:	1dbb      	adds	r3, r7, #6
    bdde:	22fc      	movs	r2, #252	; 0xfc
    bde0:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    bde2:	1db9      	adds	r1, r7, #6
    bde4:	4b04      	ldr	r3, [pc, #16]	; (bdf8 <sd_mmc_spi_start_write_block+0x44>)
    bde6:	2201      	movs	r2, #1
    bde8:	0018      	movs	r0, r3
    bdea:	4b04      	ldr	r3, [pc, #16]	; (bdfc <sd_mmc_spi_start_write_block+0x48>)
    bdec:	4798      	blx	r3
}
    bdee:	46c0      	nop			; (mov r8, r8)
    bdf0:	46bd      	mov	sp, r7
    bdf2:	b002      	add	sp, #8
    bdf4:	bd80      	pop	{r7, pc}
    bdf6:	46c0      	nop			; (mov r8, r8)
    bdf8:	200040c8 	.word	0x200040c8
    bdfc:	00014701 	.word	0x00014701
    be00:	20004116 	.word	0x20004116

0000be04 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    be04:	b590      	push	{r4, r7, lr}
    be06:	b083      	sub	sp, #12
    be08:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    be0a:	1dbb      	adds	r3, r7, #6
    be0c:	22ff      	movs	r2, #255	; 0xff
    be0e:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    be10:	1cbb      	adds	r3, r7, #2
    be12:	2201      	movs	r2, #1
    be14:	4252      	negs	r2, r2
    be16:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    be18:	1cb9      	adds	r1, r7, #2
    be1a:	4b1b      	ldr	r3, [pc, #108]	; (be88 <sd_mmc_spi_stop_write_block+0x84>)
    be1c:	2202      	movs	r2, #2
    be1e:	0018      	movs	r0, r3
    be20:	4b1a      	ldr	r3, [pc, #104]	; (be8c <sd_mmc_spi_stop_write_block+0x88>)
    be22:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    be24:	1dbb      	adds	r3, r7, #6
    be26:	881b      	ldrh	r3, [r3, #0]
    be28:	1d79      	adds	r1, r7, #5
    be2a:	4817      	ldr	r0, [pc, #92]	; (be88 <sd_mmc_spi_stop_write_block+0x84>)
    be2c:	2201      	movs	r2, #1
    be2e:	4c18      	ldr	r4, [pc, #96]	; (be90 <sd_mmc_spi_stop_write_block+0x8c>)
    be30:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    be32:	1d7b      	adds	r3, r7, #5
    be34:	781b      	ldrb	r3, [r3, #0]
    be36:	001a      	movs	r2, r3
    be38:	2310      	movs	r3, #16
    be3a:	4013      	ands	r3, r2
    be3c:	d105      	bne.n	be4a <sd_mmc_spi_stop_write_block+0x46>
    be3e:	1d7b      	adds	r3, r7, #5
    be40:	781b      	ldrb	r3, [r3, #0]
    be42:	001a      	movs	r2, r3
    be44:	2301      	movs	r3, #1
    be46:	4013      	ands	r3, r2
    be48:	d104      	bne.n	be54 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    be4a:	4b12      	ldr	r3, [pc, #72]	; (be94 <sd_mmc_spi_stop_write_block+0x90>)
    be4c:	2201      	movs	r2, #1
    be4e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    be50:	2300      	movs	r3, #0
    be52:	e014      	b.n	be7e <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    be54:	1d7b      	adds	r3, r7, #5
    be56:	781b      	ldrb	r3, [r3, #0]
    be58:	001a      	movs	r2, r3
    be5a:	231e      	movs	r3, #30
    be5c:	4013      	ands	r3, r2
    be5e:	2b04      	cmp	r3, #4
    be60:	d00b      	beq.n	be7a <sd_mmc_spi_stop_write_block+0x76>
    be62:	2b0a      	cmp	r3, #10
    be64:	d104      	bne.n	be70 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    be66:	4b0b      	ldr	r3, [pc, #44]	; (be94 <sd_mmc_spi_stop_write_block+0x90>)
    be68:	2208      	movs	r2, #8
    be6a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    be6c:	2300      	movs	r3, #0
    be6e:	e006      	b.n	be7e <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    be70:	4b08      	ldr	r3, [pc, #32]	; (be94 <sd_mmc_spi_stop_write_block+0x90>)
    be72:	220a      	movs	r2, #10
    be74:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    be76:	2300      	movs	r3, #0
    be78:	e001      	b.n	be7e <sd_mmc_spi_stop_write_block+0x7a>
		break;
    be7a:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    be7c:	2301      	movs	r3, #1
}
    be7e:	0018      	movs	r0, r3
    be80:	46bd      	mov	sp, r7
    be82:	b003      	add	sp, #12
    be84:	bd90      	pop	{r4, r7, pc}
    be86:	46c0      	nop			; (mov r8, r8)
    be88:	200040c8 	.word	0x200040c8
    be8c:	00014701 	.word	0x00014701
    be90:	000144dd 	.word	0x000144dd
    be94:	2000410b 	.word	0x2000410b

0000be98 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    be98:	b590      	push	{r4, r7, lr}
    be9a:	b083      	sub	sp, #12
    be9c:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    be9e:	4b1d      	ldr	r3, [pc, #116]	; (bf14 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    bea0:	881b      	ldrh	r3, [r3, #0]
    bea2:	2b01      	cmp	r3, #1
    bea4:	d101      	bne.n	beaa <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    bea6:	2301      	movs	r3, #1
    bea8:	e030      	b.n	bf0c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    beaa:	4b1a      	ldr	r3, [pc, #104]	; (bf14 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    beac:	881b      	ldrh	r3, [r3, #0]
    beae:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    beb0:	4b19      	ldr	r3, [pc, #100]	; (bf18 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    beb2:	681a      	ldr	r2, [r3, #0]
    beb4:	4b19      	ldr	r3, [pc, #100]	; (bf1c <sd_mmc_spi_stop_multiwrite_block+0x84>)
    beb6:	881b      	ldrh	r3, [r3, #0]
    beb8:	0019      	movs	r1, r3
    beba:	4b19      	ldr	r3, [pc, #100]	; (bf20 <sd_mmc_spi_stop_multiwrite_block+0x88>)
    bebc:	0010      	movs	r0, r2
    bebe:	4798      	blx	r3
    bec0:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    bec2:	429c      	cmp	r4, r3
    bec4:	d901      	bls.n	beca <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    bec6:	2301      	movs	r3, #1
    bec8:	e020      	b.n	bf0c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    beca:	1dfb      	adds	r3, r7, #7
    becc:	22ff      	movs	r2, #255	; 0xff
    bece:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    bed0:	1df9      	adds	r1, r7, #7
    bed2:	4b14      	ldr	r3, [pc, #80]	; (bf24 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    bed4:	2201      	movs	r2, #1
    bed6:	0018      	movs	r0, r3
    bed8:	4b13      	ldr	r3, [pc, #76]	; (bf28 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    beda:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    bedc:	1dfb      	adds	r3, r7, #7
    bede:	22fd      	movs	r2, #253	; 0xfd
    bee0:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    bee2:	1df9      	adds	r1, r7, #7
    bee4:	4b0f      	ldr	r3, [pc, #60]	; (bf24 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    bee6:	2201      	movs	r2, #1
    bee8:	0018      	movs	r0, r3
    beea:	4b0f      	ldr	r3, [pc, #60]	; (bf28 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    beec:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    beee:	4b0f      	ldr	r3, [pc, #60]	; (bf2c <sd_mmc_spi_stop_multiwrite_block+0x94>)
    bef0:	4798      	blx	r3
    bef2:	0003      	movs	r3, r0
    bef4:	001a      	movs	r2, r3
    bef6:	2301      	movs	r3, #1
    bef8:	4053      	eors	r3, r2
    befa:	b2db      	uxtb	r3, r3
    befc:	2b00      	cmp	r3, #0
    befe:	d004      	beq.n	bf0a <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    bf00:	4b0b      	ldr	r3, [pc, #44]	; (bf30 <sd_mmc_spi_stop_multiwrite_block+0x98>)
    bf02:	2205      	movs	r2, #5
    bf04:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    bf06:	2300      	movs	r3, #0
    bf08:	e000      	b.n	bf0c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    bf0a:	2301      	movs	r3, #1
}
    bf0c:	0018      	movs	r0, r3
    bf0e:	46bd      	mov	sp, r7
    bf10:	b003      	add	sp, #12
    bf12:	bd90      	pop	{r4, r7, pc}
    bf14:	20004116 	.word	0x20004116
    bf18:	20004110 	.word	0x20004110
    bf1c:	20004114 	.word	0x20004114
    bf20:	0001f0d1 	.word	0x0001f0d1
    bf24:	200040c8 	.word	0x200040c8
    bf28:	00014701 	.word	0x00014701
    bf2c:	0000bc99 	.word	0x0000bc99
    bf30:	2000410b 	.word	0x2000410b

0000bf34 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    bf34:	b580      	push	{r7, lr}
    bf36:	b090      	sub	sp, #64	; 0x40
    bf38:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    bf3a:	4b1f      	ldr	r3, [pc, #124]	; (bfb8 <sd_mmc_spi_init+0x84>)
    bf3c:	2200      	movs	r2, #0
    bf3e:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    bf40:	233c      	movs	r3, #60	; 0x3c
    bf42:	18fb      	adds	r3, r7, r3
    bf44:	0018      	movs	r0, r3
    bf46:	4b1d      	ldr	r3, [pc, #116]	; (bfbc <sd_mmc_spi_init+0x88>)
    bf48:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    bf4a:	1d3b      	adds	r3, r7, #4
    bf4c:	0018      	movs	r0, r3
    bf4e:	4b1c      	ldr	r3, [pc, #112]	; (bfc0 <sd_mmc_spi_init+0x8c>)
    bf50:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    bf52:	1d3b      	adds	r3, r7, #4
    bf54:	2280      	movs	r2, #128	; 0x80
    bf56:	0252      	lsls	r2, r2, #9
    bf58:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    bf5a:	1d3b      	adds	r3, r7, #4
    bf5c:	4a19      	ldr	r2, [pc, #100]	; (bfc4 <sd_mmc_spi_init+0x90>)
    bf5e:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    bf60:	1d3b      	adds	r3, r7, #4
    bf62:	4a19      	ldr	r2, [pc, #100]	; (bfc8 <sd_mmc_spi_init+0x94>)
    bf64:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    bf66:	1d3b      	adds	r3, r7, #4
    bf68:	4a18      	ldr	r2, [pc, #96]	; (bfcc <sd_mmc_spi_init+0x98>)
    bf6a:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    bf6c:	1d3b      	adds	r3, r7, #4
    bf6e:	4a18      	ldr	r2, [pc, #96]	; (bfd0 <sd_mmc_spi_init+0x9c>)
    bf70:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    bf72:	1d3b      	adds	r3, r7, #4
    bf74:	2224      	movs	r2, #36	; 0x24
    bf76:	2100      	movs	r1, #0
    bf78:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    bf7a:	1d3b      	adds	r3, r7, #4
    bf7c:	4a15      	ldr	r2, [pc, #84]	; (bfd4 <sd_mmc_spi_init+0xa0>)
    bf7e:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    bf80:	1d3a      	adds	r2, r7, #4
    bf82:	4915      	ldr	r1, [pc, #84]	; (bfd8 <sd_mmc_spi_init+0xa4>)
    bf84:	4b15      	ldr	r3, [pc, #84]	; (bfdc <sd_mmc_spi_init+0xa8>)
    bf86:	0018      	movs	r0, r3
    bf88:	4b15      	ldr	r3, [pc, #84]	; (bfe0 <sd_mmc_spi_init+0xac>)
    bf8a:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    bf8c:	4b13      	ldr	r3, [pc, #76]	; (bfdc <sd_mmc_spi_init+0xa8>)
    bf8e:	0018      	movs	r0, r3
    bf90:	4b14      	ldr	r3, [pc, #80]	; (bfe4 <sd_mmc_spi_init+0xb0>)
    bf92:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    bf94:	4b14      	ldr	r3, [pc, #80]	; (bfe8 <sd_mmc_spi_init+0xb4>)
    bf96:	0018      	movs	r0, r3
    bf98:	4b14      	ldr	r3, [pc, #80]	; (bfec <sd_mmc_spi_init+0xb8>)
    bf9a:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    bf9c:	4b14      	ldr	r3, [pc, #80]	; (bff0 <sd_mmc_spi_init+0xbc>)
    bf9e:	781a      	ldrb	r2, [r3, #0]
    bfa0:	4b11      	ldr	r3, [pc, #68]	; (bfe8 <sd_mmc_spi_init+0xb4>)
    bfa2:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    bfa4:	4a10      	ldr	r2, [pc, #64]	; (bfe8 <sd_mmc_spi_init+0xb4>)
    bfa6:	4b13      	ldr	r3, [pc, #76]	; (bff4 <sd_mmc_spi_init+0xc0>)
    bfa8:	0011      	movs	r1, r2
    bfaa:	0018      	movs	r0, r3
    bfac:	4b12      	ldr	r3, [pc, #72]	; (bff8 <sd_mmc_spi_init+0xc4>)
    bfae:	4798      	blx	r3
}
    bfb0:	46c0      	nop			; (mov r8, r8)
    bfb2:	46bd      	mov	sp, r7
    bfb4:	b010      	add	sp, #64	; 0x40
    bfb6:	bd80      	pop	{r7, pc}
    bfb8:	2000410b 	.word	0x2000410b
    bfbc:	0000b9e9 	.word	0x0000b9e9
    bfc0:	0000ba81 	.word	0x0000ba81
    bfc4:	00100002 	.word	0x00100002
    bfc8:	00110002 	.word	0x00110002
    bfcc:	00120002 	.word	0x00120002
    bfd0:	00130002 	.word	0x00130002
    bfd4:	00061a80 	.word	0x00061a80
    bfd8:	42000c00 	.word	0x42000c00
    bfdc:	200040c8 	.word	0x200040c8
    bfe0:	0001434d 	.word	0x0001434d
    bfe4:	0000bb8d 	.word	0x0000bb8d
    bfe8:	20004108 	.word	0x20004108
    bfec:	0000bb05 	.word	0x0000bb05
    bff0:	20000104 	.word	0x20000104
    bff4:	20004104 	.word	0x20004104
    bff8:	0000bb29 	.word	0x0000bb29

0000bffc <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    bffc:	b590      	push	{r4, r7, lr}
    bffe:	b083      	sub	sp, #12
    c000:	af00      	add	r7, sp, #0
    c002:	0004      	movs	r4, r0
    c004:	6039      	str	r1, [r7, #0]
    c006:	0010      	movs	r0, r2
    c008:	0019      	movs	r1, r3
    c00a:	1dfb      	adds	r3, r7, #7
    c00c:	1c22      	adds	r2, r4, #0
    c00e:	701a      	strb	r2, [r3, #0]
    c010:	1dbb      	adds	r3, r7, #6
    c012:	1c02      	adds	r2, r0, #0
    c014:	701a      	strb	r2, [r3, #0]
    c016:	1d7b      	adds	r3, r7, #5
    c018:	1c0a      	adds	r2, r1, #0
    c01a:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c01c:	4b13      	ldr	r3, [pc, #76]	; (c06c <sd_mmc_spi_select_device+0x70>)
    c01e:	2200      	movs	r2, #0
    c020:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    c022:	683b      	ldr	r3, [r7, #0]
    c024:	4a12      	ldr	r2, [pc, #72]	; (c070 <sd_mmc_spi_select_device+0x74>)
    c026:	4293      	cmp	r3, r2
    c028:	d907      	bls.n	c03a <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    c02a:	4b11      	ldr	r3, [pc, #68]	; (c070 <sd_mmc_spi_select_device+0x74>)
    c02c:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    c02e:	e004      	b.n	c03a <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    c030:	683b      	ldr	r3, [r7, #0]
    c032:	08db      	lsrs	r3, r3, #3
    c034:	683a      	ldr	r2, [r7, #0]
    c036:	1ad3      	subs	r3, r2, r3
    c038:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    c03a:	683a      	ldr	r2, [r7, #0]
    c03c:	4b0d      	ldr	r3, [pc, #52]	; (c074 <sd_mmc_spi_select_device+0x78>)
    c03e:	0011      	movs	r1, r2
    c040:	0018      	movs	r0, r3
    c042:	4b0d      	ldr	r3, [pc, #52]	; (c078 <sd_mmc_spi_select_device+0x7c>)
    c044:	4798      	blx	r3
    c046:	0003      	movs	r3, r0
    c048:	2b17      	cmp	r3, #23
    c04a:	d0f1      	beq.n	c030 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    c04c:	1dfb      	adds	r3, r7, #7
    c04e:	781a      	ldrb	r2, [r3, #0]
    c050:	0013      	movs	r3, r2
    c052:	005b      	lsls	r3, r3, #1
    c054:	189b      	adds	r3, r3, r2
    c056:	4a09      	ldr	r2, [pc, #36]	; (c07c <sd_mmc_spi_select_device+0x80>)
    c058:	1899      	adds	r1, r3, r2
    c05a:	4b06      	ldr	r3, [pc, #24]	; (c074 <sd_mmc_spi_select_device+0x78>)
    c05c:	2201      	movs	r2, #1
    c05e:	0018      	movs	r0, r3
    c060:	4b07      	ldr	r3, [pc, #28]	; (c080 <sd_mmc_spi_select_device+0x84>)
    c062:	4798      	blx	r3
}
    c064:	46c0      	nop			; (mov r8, r8)
    c066:	46bd      	mov	sp, r7
    c068:	b003      	add	sp, #12
    c06a:	bd90      	pop	{r4, r7, pc}
    c06c:	2000410b 	.word	0x2000410b
    c070:	00989680 	.word	0x00989680
    c074:	200040c8 	.word	0x200040c8
    c078:	00014075 	.word	0x00014075
    c07c:	20004104 	.word	0x20004104
    c080:	00014611 	.word	0x00014611

0000c084 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    c084:	b580      	push	{r7, lr}
    c086:	b082      	sub	sp, #8
    c088:	af00      	add	r7, sp, #0
    c08a:	0002      	movs	r2, r0
    c08c:	1dfb      	adds	r3, r7, #7
    c08e:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c090:	4b09      	ldr	r3, [pc, #36]	; (c0b8 <sd_mmc_spi_deselect_device+0x34>)
    c092:	2200      	movs	r2, #0
    c094:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    c096:	1dfb      	adds	r3, r7, #7
    c098:	781a      	ldrb	r2, [r3, #0]
    c09a:	0013      	movs	r3, r2
    c09c:	005b      	lsls	r3, r3, #1
    c09e:	189b      	adds	r3, r3, r2
    c0a0:	4a06      	ldr	r2, [pc, #24]	; (c0bc <sd_mmc_spi_deselect_device+0x38>)
    c0a2:	1899      	adds	r1, r3, r2
    c0a4:	4b06      	ldr	r3, [pc, #24]	; (c0c0 <sd_mmc_spi_deselect_device+0x3c>)
    c0a6:	2200      	movs	r2, #0
    c0a8:	0018      	movs	r0, r3
    c0aa:	4b06      	ldr	r3, [pc, #24]	; (c0c4 <sd_mmc_spi_deselect_device+0x40>)
    c0ac:	4798      	blx	r3
}
    c0ae:	46c0      	nop			; (mov r8, r8)
    c0b0:	46bd      	mov	sp, r7
    c0b2:	b002      	add	sp, #8
    c0b4:	bd80      	pop	{r7, pc}
    c0b6:	46c0      	nop			; (mov r8, r8)
    c0b8:	2000410b 	.word	0x2000410b
    c0bc:	20004104 	.word	0x20004104
    c0c0:	200040c8 	.word	0x200040c8
    c0c4:	00014611 	.word	0x00014611

0000c0c8 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    c0c8:	b580      	push	{r7, lr}
    c0ca:	b082      	sub	sp, #8
    c0cc:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    c0ce:	1dbb      	adds	r3, r7, #6
    c0d0:	22ff      	movs	r2, #255	; 0xff
    c0d2:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c0d4:	4b0c      	ldr	r3, [pc, #48]	; (c108 <sd_mmc_spi_send_clock+0x40>)
    c0d6:	2200      	movs	r2, #0
    c0d8:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    c0da:	1dfb      	adds	r3, r7, #7
    c0dc:	2200      	movs	r2, #0
    c0de:	701a      	strb	r2, [r3, #0]
    c0e0:	e00a      	b.n	c0f8 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    c0e2:	1db9      	adds	r1, r7, #6
    c0e4:	4b09      	ldr	r3, [pc, #36]	; (c10c <sd_mmc_spi_send_clock+0x44>)
    c0e6:	2201      	movs	r2, #1
    c0e8:	0018      	movs	r0, r3
    c0ea:	4b09      	ldr	r3, [pc, #36]	; (c110 <sd_mmc_spi_send_clock+0x48>)
    c0ec:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    c0ee:	1dfb      	adds	r3, r7, #7
    c0f0:	781a      	ldrb	r2, [r3, #0]
    c0f2:	1dfb      	adds	r3, r7, #7
    c0f4:	3201      	adds	r2, #1
    c0f6:	701a      	strb	r2, [r3, #0]
    c0f8:	1dfb      	adds	r3, r7, #7
    c0fa:	781b      	ldrb	r3, [r3, #0]
    c0fc:	2b09      	cmp	r3, #9
    c0fe:	d9f0      	bls.n	c0e2 <sd_mmc_spi_send_clock+0x1a>
	}
}
    c100:	46c0      	nop			; (mov r8, r8)
    c102:	46bd      	mov	sp, r7
    c104:	b002      	add	sp, #8
    c106:	bd80      	pop	{r7, pc}
    c108:	2000410b 	.word	0x2000410b
    c10c:	200040c8 	.word	0x200040c8
    c110:	00014701 	.word	0x00014701

0000c114 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    c114:	b590      	push	{r4, r7, lr}
    c116:	b085      	sub	sp, #20
    c118:	af02      	add	r7, sp, #8
    c11a:	6078      	str	r0, [r7, #4]
    c11c:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    c11e:	6839      	ldr	r1, [r7, #0]
    c120:	6878      	ldr	r0, [r7, #4]
    c122:	2300      	movs	r3, #0
    c124:	9300      	str	r3, [sp, #0]
    c126:	2300      	movs	r3, #0
    c128:	2200      	movs	r2, #0
    c12a:	4c03      	ldr	r4, [pc, #12]	; (c138 <sd_mmc_spi_send_cmd+0x24>)
    c12c:	47a0      	blx	r4
    c12e:	0003      	movs	r3, r0
}
    c130:	0018      	movs	r0, r3
    c132:	46bd      	mov	sp, r7
    c134:	b003      	add	sp, #12
    c136:	bd90      	pop	{r4, r7, pc}
    c138:	0000c13d 	.word	0x0000c13d

0000c13c <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    c13c:	b590      	push	{r4, r7, lr}
    c13e:	b089      	sub	sp, #36	; 0x24
    c140:	af00      	add	r7, sp, #0
    c142:	60f8      	str	r0, [r7, #12]
    c144:	60b9      	str	r1, [r7, #8]
    c146:	0019      	movs	r1, r3
    c148:	1dbb      	adds	r3, r7, #6
    c14a:	801a      	strh	r2, [r3, #0]
    c14c:	1d3b      	adds	r3, r7, #4
    c14e:	1c0a      	adds	r2, r1, #0
    c150:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    c152:	231b      	movs	r3, #27
    c154:	18fb      	adds	r3, r7, r3
    c156:	22ff      	movs	r2, #255	; 0xff
    c158:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    c15a:	231c      	movs	r3, #28
    c15c:	18fb      	adds	r3, r7, r3
    c15e:	22ff      	movs	r2, #255	; 0xff
    c160:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c162:	4b72      	ldr	r3, [pc, #456]	; (c32c <sd_mmc_spi_adtc_start+0x1f0>)
    c164:	2200      	movs	r2, #0
    c166:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    c168:	68fb      	ldr	r3, [r7, #12]
    c16a:	b2db      	uxtb	r3, r3
    c16c:	223f      	movs	r2, #63	; 0x3f
    c16e:	4013      	ands	r3, r2
    c170:	b2db      	uxtb	r3, r3
    c172:	2240      	movs	r2, #64	; 0x40
    c174:	4313      	orrs	r3, r2
    c176:	b2da      	uxtb	r2, r3
    c178:	2314      	movs	r3, #20
    c17a:	18fb      	adds	r3, r7, r3
    c17c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    c17e:	68bb      	ldr	r3, [r7, #8]
    c180:	0e1b      	lsrs	r3, r3, #24
    c182:	b2da      	uxtb	r2, r3
    c184:	2314      	movs	r3, #20
    c186:	18fb      	adds	r3, r7, r3
    c188:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    c18a:	68bb      	ldr	r3, [r7, #8]
    c18c:	0c1b      	lsrs	r3, r3, #16
    c18e:	b2da      	uxtb	r2, r3
    c190:	2314      	movs	r3, #20
    c192:	18fb      	adds	r3, r7, r3
    c194:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    c196:	68bb      	ldr	r3, [r7, #8]
    c198:	0a1b      	lsrs	r3, r3, #8
    c19a:	b2da      	uxtb	r2, r3
    c19c:	2314      	movs	r3, #20
    c19e:	18fb      	adds	r3, r7, r3
    c1a0:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    c1a2:	68bb      	ldr	r3, [r7, #8]
    c1a4:	b2da      	uxtb	r2, r3
    c1a6:	2314      	movs	r3, #20
    c1a8:	18fb      	adds	r3, r7, r3
    c1aa:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    c1ac:	2314      	movs	r3, #20
    c1ae:	18fb      	adds	r3, r7, r3
    c1b0:	2105      	movs	r1, #5
    c1b2:	0018      	movs	r0, r3
    c1b4:	4b5e      	ldr	r3, [pc, #376]	; (c330 <sd_mmc_spi_adtc_start+0x1f4>)
    c1b6:	4798      	blx	r3
    c1b8:	0003      	movs	r3, r0
    c1ba:	001a      	movs	r2, r3
    c1bc:	2314      	movs	r3, #20
    c1be:	18fb      	adds	r3, r7, r3
    c1c0:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    c1c2:	231b      	movs	r3, #27
    c1c4:	18f9      	adds	r1, r7, r3
    c1c6:	4b5b      	ldr	r3, [pc, #364]	; (c334 <sd_mmc_spi_adtc_start+0x1f8>)
    c1c8:	2201      	movs	r2, #1
    c1ca:	0018      	movs	r0, r3
    c1cc:	4b5a      	ldr	r3, [pc, #360]	; (c338 <sd_mmc_spi_adtc_start+0x1fc>)
    c1ce:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    c1d0:	2314      	movs	r3, #20
    c1d2:	18f9      	adds	r1, r7, r3
    c1d4:	4b57      	ldr	r3, [pc, #348]	; (c334 <sd_mmc_spi_adtc_start+0x1f8>)
    c1d6:	2206      	movs	r2, #6
    c1d8:	0018      	movs	r0, r3
    c1da:	4b57      	ldr	r3, [pc, #348]	; (c338 <sd_mmc_spi_adtc_start+0x1fc>)
    c1dc:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    c1de:	2313      	movs	r3, #19
    c1e0:	18fb      	adds	r3, r7, r3
    c1e2:	22ff      	movs	r2, #255	; 0xff
    c1e4:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    c1e6:	231c      	movs	r3, #28
    c1e8:	18fb      	adds	r3, r7, r3
    c1ea:	881b      	ldrh	r3, [r3, #0]
    c1ec:	2213      	movs	r2, #19
    c1ee:	18b9      	adds	r1, r7, r2
    c1f0:	4850      	ldr	r0, [pc, #320]	; (c334 <sd_mmc_spi_adtc_start+0x1f8>)
    c1f2:	2201      	movs	r2, #1
    c1f4:	4c51      	ldr	r4, [pc, #324]	; (c33c <sd_mmc_spi_adtc_start+0x200>)
    c1f6:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    c1f8:	231f      	movs	r3, #31
    c1fa:	18fb      	adds	r3, r7, r3
    c1fc:	2207      	movs	r2, #7
    c1fe:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    c200:	231c      	movs	r3, #28
    c202:	18fb      	adds	r3, r7, r3
    c204:	881b      	ldrh	r3, [r3, #0]
    c206:	2213      	movs	r2, #19
    c208:	18b9      	adds	r1, r7, r2
    c20a:	484a      	ldr	r0, [pc, #296]	; (c334 <sd_mmc_spi_adtc_start+0x1f8>)
    c20c:	2201      	movs	r2, #1
    c20e:	4c4b      	ldr	r4, [pc, #300]	; (c33c <sd_mmc_spi_adtc_start+0x200>)
    c210:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    c212:	2313      	movs	r3, #19
    c214:	18fb      	adds	r3, r7, r3
    c216:	781b      	ldrb	r3, [r3, #0]
    c218:	b25b      	sxtb	r3, r3
    c21a:	2b00      	cmp	r3, #0
    c21c:	da10      	bge.n	c240 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    c21e:	231f      	movs	r3, #31
    c220:	18fb      	adds	r3, r7, r3
    c222:	221f      	movs	r2, #31
    c224:	18ba      	adds	r2, r7, r2
    c226:	7812      	ldrb	r2, [r2, #0]
    c228:	3a01      	subs	r2, #1
    c22a:	701a      	strb	r2, [r3, #0]
    c22c:	231f      	movs	r3, #31
    c22e:	18fb      	adds	r3, r7, r3
    c230:	781b      	ldrb	r3, [r3, #0]
    c232:	2b00      	cmp	r3, #0
    c234:	d1e4      	bne.n	c200 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    c236:	4b3d      	ldr	r3, [pc, #244]	; (c32c <sd_mmc_spi_adtc_start+0x1f0>)
    c238:	2202      	movs	r2, #2
    c23a:	701a      	strb	r2, [r3, #0]
			return false;
    c23c:	2300      	movs	r3, #0
    c23e:	e070      	b.n	c322 <sd_mmc_spi_adtc_start+0x1e6>
			break;
    c240:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    c242:	2313      	movs	r3, #19
    c244:	18fb      	adds	r3, r7, r3
    c246:	781b      	ldrb	r3, [r3, #0]
    c248:	001a      	movs	r2, r3
    c24a:	4b3d      	ldr	r3, [pc, #244]	; (c340 <sd_mmc_spi_adtc_start+0x204>)
    c24c:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    c24e:	2313      	movs	r3, #19
    c250:	18fb      	adds	r3, r7, r3
    c252:	781b      	ldrb	r3, [r3, #0]
    c254:	001a      	movs	r2, r3
    c256:	2308      	movs	r3, #8
    c258:	4013      	ands	r3, r2
    c25a:	d004      	beq.n	c266 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    c25c:	4b33      	ldr	r3, [pc, #204]	; (c32c <sd_mmc_spi_adtc_start+0x1f0>)
    c25e:	2206      	movs	r2, #6
    c260:	701a      	strb	r2, [r3, #0]
		return false;
    c262:	2300      	movs	r3, #0
    c264:	e05d      	b.n	c322 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    c266:	2313      	movs	r3, #19
    c268:	18fb      	adds	r3, r7, r3
    c26a:	781b      	ldrb	r3, [r3, #0]
    c26c:	001a      	movs	r2, r3
    c26e:	2304      	movs	r3, #4
    c270:	4013      	ands	r3, r2
    c272:	d004      	beq.n	c27e <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    c274:	4b2d      	ldr	r3, [pc, #180]	; (c32c <sd_mmc_spi_adtc_start+0x1f0>)
    c276:	2209      	movs	r2, #9
    c278:	701a      	strb	r2, [r3, #0]
		return false;
    c27a:	2300      	movs	r3, #0
    c27c:	e051      	b.n	c322 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    c27e:	2313      	movs	r3, #19
    c280:	18fb      	adds	r3, r7, r3
    c282:	781b      	ldrb	r3, [r3, #0]
    c284:	001a      	movs	r2, r3
    c286:	2301      	movs	r3, #1
    c288:	439a      	bics	r2, r3
    c28a:	1e13      	subs	r3, r2, #0
    c28c:	d004      	beq.n	c298 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    c28e:	4b27      	ldr	r3, [pc, #156]	; (c32c <sd_mmc_spi_adtc_start+0x1f0>)
    c290:	2201      	movs	r2, #1
    c292:	701a      	strb	r2, [r3, #0]
		return false;
    c294:	2300      	movs	r3, #0
    c296:	e044      	b.n	c322 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    c298:	68fa      	ldr	r2, [r7, #12]
    c29a:	2380      	movs	r3, #128	; 0x80
    c29c:	019b      	lsls	r3, r3, #6
    c29e:	4013      	ands	r3, r2
    c2a0:	d00d      	beq.n	c2be <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    c2a2:	4b28      	ldr	r3, [pc, #160]	; (c344 <sd_mmc_spi_adtc_start+0x208>)
    c2a4:	4798      	blx	r3
    c2a6:	0003      	movs	r3, r0
    c2a8:	001a      	movs	r2, r3
    c2aa:	2301      	movs	r3, #1
    c2ac:	4053      	eors	r3, r2
    c2ae:	b2db      	uxtb	r3, r3
    c2b0:	2b00      	cmp	r3, #0
    c2b2:	d004      	beq.n	c2be <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    c2b4:	4b1d      	ldr	r3, [pc, #116]	; (c32c <sd_mmc_spi_adtc_start+0x1f0>)
    c2b6:	2203      	movs	r2, #3
    c2b8:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    c2ba:	2300      	movs	r3, #0
    c2bc:	e031      	b.n	c322 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    c2be:	68fa      	ldr	r2, [r7, #12]
    c2c0:	2380      	movs	r3, #128	; 0x80
    c2c2:	009b      	lsls	r3, r3, #2
    c2c4:	4013      	ands	r3, r2
    c2c6:	d00e      	beq.n	c2e6 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    c2c8:	4b1d      	ldr	r3, [pc, #116]	; (c340 <sd_mmc_spi_adtc_start+0x204>)
    c2ca:	2200      	movs	r2, #0
    c2cc:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    c2ce:	231c      	movs	r3, #28
    c2d0:	18fb      	adds	r3, r7, r3
    c2d2:	881b      	ldrh	r3, [r3, #0]
    c2d4:	491a      	ldr	r1, [pc, #104]	; (c340 <sd_mmc_spi_adtc_start+0x204>)
    c2d6:	4817      	ldr	r0, [pc, #92]	; (c334 <sd_mmc_spi_adtc_start+0x1f8>)
    c2d8:	2201      	movs	r2, #1
    c2da:	4c18      	ldr	r4, [pc, #96]	; (c33c <sd_mmc_spi_adtc_start+0x200>)
    c2dc:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    c2de:	4b18      	ldr	r3, [pc, #96]	; (c340 <sd_mmc_spi_adtc_start+0x204>)
    c2e0:	681a      	ldr	r2, [r3, #0]
    c2e2:	4b17      	ldr	r3, [pc, #92]	; (c340 <sd_mmc_spi_adtc_start+0x204>)
    c2e4:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    c2e6:	68fa      	ldr	r2, [r7, #12]
    c2e8:	2380      	movs	r3, #128	; 0x80
    c2ea:	00db      	lsls	r3, r3, #3
    c2ec:	4013      	ands	r3, r2
    c2ee:	d00c      	beq.n	c30a <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    c2f0:	231c      	movs	r3, #28
    c2f2:	18fb      	adds	r3, r7, r3
    c2f4:	881b      	ldrh	r3, [r3, #0]
    c2f6:	4912      	ldr	r1, [pc, #72]	; (c340 <sd_mmc_spi_adtc_start+0x204>)
    c2f8:	480e      	ldr	r0, [pc, #56]	; (c334 <sd_mmc_spi_adtc_start+0x1f8>)
    c2fa:	2204      	movs	r2, #4
    c2fc:	4c0f      	ldr	r4, [pc, #60]	; (c33c <sd_mmc_spi_adtc_start+0x200>)
    c2fe:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    c300:	4b0f      	ldr	r3, [pc, #60]	; (c340 <sd_mmc_spi_adtc_start+0x204>)
    c302:	681b      	ldr	r3, [r3, #0]
    c304:	ba1a      	rev	r2, r3
    c306:	4b0e      	ldr	r3, [pc, #56]	; (c340 <sd_mmc_spi_adtc_start+0x204>)
    c308:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    c30a:	4b0f      	ldr	r3, [pc, #60]	; (c348 <sd_mmc_spi_adtc_start+0x20c>)
    c30c:	1dba      	adds	r2, r7, #6
    c30e:	8812      	ldrh	r2, [r2, #0]
    c310:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    c312:	4b0e      	ldr	r3, [pc, #56]	; (c34c <sd_mmc_spi_adtc_start+0x210>)
    c314:	1d3a      	adds	r2, r7, #4
    c316:	8812      	ldrh	r2, [r2, #0]
    c318:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    c31a:	4b0d      	ldr	r3, [pc, #52]	; (c350 <sd_mmc_spi_adtc_start+0x214>)
    c31c:	2200      	movs	r2, #0
    c31e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    c320:	2301      	movs	r3, #1
}
    c322:	0018      	movs	r0, r3
    c324:	46bd      	mov	sp, r7
    c326:	b009      	add	sp, #36	; 0x24
    c328:	bd90      	pop	{r4, r7, pc}
    c32a:	46c0      	nop			; (mov r8, r8)
    c32c:	2000410b 	.word	0x2000410b
    c330:	0000bbdd 	.word	0x0000bbdd
    c334:	200040c8 	.word	0x200040c8
    c338:	00014701 	.word	0x00014701
    c33c:	000144dd 	.word	0x000144dd
    c340:	2000410c 	.word	0x2000410c
    c344:	0000bc99 	.word	0x0000bc99
    c348:	20004114 	.word	0x20004114
    c34c:	20004116 	.word	0x20004116
    c350:	20004110 	.word	0x20004110

0000c354 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    c354:	b580      	push	{r7, lr}
    c356:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    c358:	4b02      	ldr	r3, [pc, #8]	; (c364 <sd_mmc_spi_get_response+0x10>)
    c35a:	681b      	ldr	r3, [r3, #0]
}
    c35c:	0018      	movs	r0, r3
    c35e:	46bd      	mov	sp, r7
    c360:	bd80      	pop	{r7, pc}
    c362:	46c0      	nop			; (mov r8, r8)
    c364:	2000410c 	.word	0x2000410c

0000c368 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    c368:	b590      	push	{r4, r7, lr}
    c36a:	b085      	sub	sp, #20
    c36c:	af00      	add	r7, sp, #0
    c36e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    c370:	230e      	movs	r3, #14
    c372:	18fb      	adds	r3, r7, r3
    c374:	22ff      	movs	r2, #255	; 0xff
    c376:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c378:	4b1c      	ldr	r3, [pc, #112]	; (c3ec <sd_mmc_spi_read_word+0x84>)
    c37a:	2200      	movs	r2, #0
    c37c:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c37e:	4b1c      	ldr	r3, [pc, #112]	; (c3f0 <sd_mmc_spi_read_word+0x88>)
    c380:	681a      	ldr	r2, [r3, #0]
    c382:	4b1c      	ldr	r3, [pc, #112]	; (c3f4 <sd_mmc_spi_read_word+0x8c>)
    c384:	881b      	ldrh	r3, [r3, #0]
    c386:	0019      	movs	r1, r3
    c388:	4b1b      	ldr	r3, [pc, #108]	; (c3f8 <sd_mmc_spi_read_word+0x90>)
    c38a:	0010      	movs	r0, r2
    c38c:	4798      	blx	r3
    c38e:	1e0b      	subs	r3, r1, #0
    c390:	d10a      	bne.n	c3a8 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    c392:	4b1a      	ldr	r3, [pc, #104]	; (c3fc <sd_mmc_spi_read_word+0x94>)
    c394:	4798      	blx	r3
    c396:	0003      	movs	r3, r0
    c398:	001a      	movs	r2, r3
    c39a:	2301      	movs	r3, #1
    c39c:	4053      	eors	r3, r2
    c39e:	b2db      	uxtb	r3, r3
    c3a0:	2b00      	cmp	r3, #0
    c3a2:	d001      	beq.n	c3a8 <sd_mmc_spi_read_word+0x40>
			return false;
    c3a4:	2300      	movs	r3, #0
    c3a6:	e01d      	b.n	c3e4 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    c3a8:	230e      	movs	r3, #14
    c3aa:	18fb      	adds	r3, r7, r3
    c3ac:	881b      	ldrh	r3, [r3, #0]
    c3ae:	1d39      	adds	r1, r7, #4
    c3b0:	4813      	ldr	r0, [pc, #76]	; (c400 <sd_mmc_spi_read_word+0x98>)
    c3b2:	2204      	movs	r2, #4
    c3b4:	4c13      	ldr	r4, [pc, #76]	; (c404 <sd_mmc_spi_read_word+0x9c>)
    c3b6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    c3b8:	687b      	ldr	r3, [r7, #4]
    c3ba:	687a      	ldr	r2, [r7, #4]
    c3bc:	6812      	ldr	r2, [r2, #0]
    c3be:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    c3c0:	4b0b      	ldr	r3, [pc, #44]	; (c3f0 <sd_mmc_spi_read_word+0x88>)
    c3c2:	681b      	ldr	r3, [r3, #0]
    c3c4:	1d1a      	adds	r2, r3, #4
    c3c6:	4b0a      	ldr	r3, [pc, #40]	; (c3f0 <sd_mmc_spi_read_word+0x88>)
    c3c8:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c3ca:	4b09      	ldr	r3, [pc, #36]	; (c3f0 <sd_mmc_spi_read_word+0x88>)
    c3cc:	681a      	ldr	r2, [r3, #0]
    c3ce:	4b09      	ldr	r3, [pc, #36]	; (c3f4 <sd_mmc_spi_read_word+0x8c>)
    c3d0:	881b      	ldrh	r3, [r3, #0]
    c3d2:	0019      	movs	r1, r3
    c3d4:	4b08      	ldr	r3, [pc, #32]	; (c3f8 <sd_mmc_spi_read_word+0x90>)
    c3d6:	0010      	movs	r0, r2
    c3d8:	4798      	blx	r3
    c3da:	1e0b      	subs	r3, r1, #0
    c3dc:	d101      	bne.n	c3e2 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    c3de:	4b0a      	ldr	r3, [pc, #40]	; (c408 <sd_mmc_spi_read_word+0xa0>)
    c3e0:	4798      	blx	r3
	}
	return true;
    c3e2:	2301      	movs	r3, #1
}
    c3e4:	0018      	movs	r0, r3
    c3e6:	46bd      	mov	sp, r7
    c3e8:	b005      	add	sp, #20
    c3ea:	bd90      	pop	{r4, r7, pc}
    c3ec:	2000410b 	.word	0x2000410b
    c3f0:	20004110 	.word	0x20004110
    c3f4:	20004114 	.word	0x20004114
    c3f8:	0001f1dd 	.word	0x0001f1dd
    c3fc:	0000bd05 	.word	0x0000bd05
    c400:	200040c8 	.word	0x200040c8
    c404:	000144dd 	.word	0x000144dd
    c408:	0000bd89 	.word	0x0000bd89

0000c40c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    c40c:	b590      	push	{r4, r7, lr}
    c40e:	b085      	sub	sp, #20
    c410:	af00      	add	r7, sp, #0
    c412:	6078      	str	r0, [r7, #4]
    c414:	000a      	movs	r2, r1
    c416:	1cbb      	adds	r3, r7, #2
    c418:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    c41a:	230a      	movs	r3, #10
    c41c:	18fb      	adds	r3, r7, r3
    c41e:	22ff      	movs	r2, #255	; 0xff
    c420:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c422:	4b1c      	ldr	r3, [pc, #112]	; (c494 <sd_mmc_spi_start_read_blocks+0x88>)
    c424:	2200      	movs	r2, #0
    c426:	701a      	strb	r2, [r3, #0]
	pos = 0;
    c428:	2300      	movs	r3, #0
    c42a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    c42c:	e025      	b.n	c47a <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    c42e:	4b1a      	ldr	r3, [pc, #104]	; (c498 <sd_mmc_spi_start_read_blocks+0x8c>)
    c430:	4798      	blx	r3
    c432:	0003      	movs	r3, r0
    c434:	001a      	movs	r2, r3
    c436:	2301      	movs	r3, #1
    c438:	4053      	eors	r3, r2
    c43a:	b2db      	uxtb	r3, r3
    c43c:	2b00      	cmp	r3, #0
    c43e:	d001      	beq.n	c444 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    c440:	2300      	movs	r3, #0
    c442:	e022      	b.n	c48a <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    c444:	687a      	ldr	r2, [r7, #4]
    c446:	68fb      	ldr	r3, [r7, #12]
    c448:	18d1      	adds	r1, r2, r3
    c44a:	4b14      	ldr	r3, [pc, #80]	; (c49c <sd_mmc_spi_start_read_blocks+0x90>)
    c44c:	881a      	ldrh	r2, [r3, #0]
    c44e:	230a      	movs	r3, #10
    c450:	18fb      	adds	r3, r7, r3
    c452:	881b      	ldrh	r3, [r3, #0]
    c454:	4812      	ldr	r0, [pc, #72]	; (c4a0 <sd_mmc_spi_start_read_blocks+0x94>)
    c456:	4c13      	ldr	r4, [pc, #76]	; (c4a4 <sd_mmc_spi_start_read_blocks+0x98>)
    c458:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    c45a:	4b10      	ldr	r3, [pc, #64]	; (c49c <sd_mmc_spi_start_read_blocks+0x90>)
    c45c:	881b      	ldrh	r3, [r3, #0]
    c45e:	001a      	movs	r2, r3
    c460:	68fb      	ldr	r3, [r7, #12]
    c462:	189b      	adds	r3, r3, r2
    c464:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    c466:	4b0d      	ldr	r3, [pc, #52]	; (c49c <sd_mmc_spi_start_read_blocks+0x90>)
    c468:	881b      	ldrh	r3, [r3, #0]
    c46a:	001a      	movs	r2, r3
    c46c:	4b0e      	ldr	r3, [pc, #56]	; (c4a8 <sd_mmc_spi_start_read_blocks+0x9c>)
    c46e:	681b      	ldr	r3, [r3, #0]
    c470:	18d2      	adds	r2, r2, r3
    c472:	4b0d      	ldr	r3, [pc, #52]	; (c4a8 <sd_mmc_spi_start_read_blocks+0x9c>)
    c474:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    c476:	4b0d      	ldr	r3, [pc, #52]	; (c4ac <sd_mmc_spi_start_read_blocks+0xa0>)
    c478:	4798      	blx	r3
	while (nb_block--) {
    c47a:	1cbb      	adds	r3, r7, #2
    c47c:	881b      	ldrh	r3, [r3, #0]
    c47e:	1cba      	adds	r2, r7, #2
    c480:	1e59      	subs	r1, r3, #1
    c482:	8011      	strh	r1, [r2, #0]
    c484:	2b00      	cmp	r3, #0
    c486:	d1d2      	bne.n	c42e <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    c488:	2301      	movs	r3, #1
}
    c48a:	0018      	movs	r0, r3
    c48c:	46bd      	mov	sp, r7
    c48e:	b005      	add	sp, #20
    c490:	bd90      	pop	{r4, r7, pc}
    c492:	46c0      	nop			; (mov r8, r8)
    c494:	2000410b 	.word	0x2000410b
    c498:	0000bd05 	.word	0x0000bd05
    c49c:	20004114 	.word	0x20004114
    c4a0:	200040c8 	.word	0x200040c8
    c4a4:	000144dd 	.word	0x000144dd
    c4a8:	20004110 	.word	0x20004110
    c4ac:	0000bd89 	.word	0x0000bd89

0000c4b0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    c4b0:	b580      	push	{r7, lr}
    c4b2:	af00      	add	r7, sp, #0
	return true;
    c4b4:	2301      	movs	r3, #1
}
    c4b6:	0018      	movs	r0, r3
    c4b8:	46bd      	mov	sp, r7
    c4ba:	bd80      	pop	{r7, pc}

0000c4bc <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    c4bc:	b580      	push	{r7, lr}
    c4be:	b084      	sub	sp, #16
    c4c0:	af00      	add	r7, sp, #0
    c4c2:	6078      	str	r0, [r7, #4]
    c4c4:	000a      	movs	r2, r1
    c4c6:	1cbb      	adds	r3, r7, #2
    c4c8:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c4ca:	4b24      	ldr	r3, [pc, #144]	; (c55c <sd_mmc_spi_start_write_blocks+0xa0>)
    c4cc:	2200      	movs	r2, #0
    c4ce:	701a      	strb	r2, [r3, #0]
	pos = 0;
    c4d0:	2300      	movs	r3, #0
    c4d2:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    c4d4:	e035      	b.n	c542 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    c4d6:	4b22      	ldr	r3, [pc, #136]	; (c560 <sd_mmc_spi_start_write_blocks+0xa4>)
    c4d8:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    c4da:	687a      	ldr	r2, [r7, #4]
    c4dc:	68fb      	ldr	r3, [r7, #12]
    c4de:	18d1      	adds	r1, r2, r3
    c4e0:	4b20      	ldr	r3, [pc, #128]	; (c564 <sd_mmc_spi_start_write_blocks+0xa8>)
    c4e2:	881a      	ldrh	r2, [r3, #0]
    c4e4:	4b20      	ldr	r3, [pc, #128]	; (c568 <sd_mmc_spi_start_write_blocks+0xac>)
    c4e6:	0018      	movs	r0, r3
    c4e8:	4b20      	ldr	r3, [pc, #128]	; (c56c <sd_mmc_spi_start_write_blocks+0xb0>)
    c4ea:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    c4ec:	4b1d      	ldr	r3, [pc, #116]	; (c564 <sd_mmc_spi_start_write_blocks+0xa8>)
    c4ee:	881b      	ldrh	r3, [r3, #0]
    c4f0:	001a      	movs	r2, r3
    c4f2:	68fb      	ldr	r3, [r7, #12]
    c4f4:	189b      	adds	r3, r3, r2
    c4f6:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    c4f8:	4b1a      	ldr	r3, [pc, #104]	; (c564 <sd_mmc_spi_start_write_blocks+0xa8>)
    c4fa:	881b      	ldrh	r3, [r3, #0]
    c4fc:	001a      	movs	r2, r3
    c4fe:	4b1c      	ldr	r3, [pc, #112]	; (c570 <sd_mmc_spi_start_write_blocks+0xb4>)
    c500:	681b      	ldr	r3, [r3, #0]
    c502:	18d2      	adds	r2, r2, r3
    c504:	4b1a      	ldr	r3, [pc, #104]	; (c570 <sd_mmc_spi_start_write_blocks+0xb4>)
    c506:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    c508:	4b1a      	ldr	r3, [pc, #104]	; (c574 <sd_mmc_spi_start_write_blocks+0xb8>)
    c50a:	4798      	blx	r3
    c50c:	0003      	movs	r3, r0
    c50e:	001a      	movs	r2, r3
    c510:	2301      	movs	r3, #1
    c512:	4053      	eors	r3, r2
    c514:	b2db      	uxtb	r3, r3
    c516:	2b00      	cmp	r3, #0
    c518:	d001      	beq.n	c51e <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    c51a:	2300      	movs	r3, #0
    c51c:	e019      	b.n	c552 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    c51e:	1cbb      	adds	r3, r7, #2
    c520:	881b      	ldrh	r3, [r3, #0]
    c522:	2b00      	cmp	r3, #0
    c524:	d00d      	beq.n	c542 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    c526:	4b14      	ldr	r3, [pc, #80]	; (c578 <sd_mmc_spi_start_write_blocks+0xbc>)
    c528:	4798      	blx	r3
    c52a:	0003      	movs	r3, r0
    c52c:	001a      	movs	r2, r3
    c52e:	2301      	movs	r3, #1
    c530:	4053      	eors	r3, r2
    c532:	b2db      	uxtb	r3, r3
    c534:	2b00      	cmp	r3, #0
    c536:	d004      	beq.n	c542 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c538:	4b08      	ldr	r3, [pc, #32]	; (c55c <sd_mmc_spi_start_write_blocks+0xa0>)
    c53a:	2205      	movs	r2, #5
    c53c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    c53e:	2300      	movs	r3, #0
    c540:	e007      	b.n	c552 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    c542:	1cbb      	adds	r3, r7, #2
    c544:	881b      	ldrh	r3, [r3, #0]
    c546:	1cba      	adds	r2, r7, #2
    c548:	1e59      	subs	r1, r3, #1
    c54a:	8011      	strh	r1, [r2, #0]
    c54c:	2b00      	cmp	r3, #0
    c54e:	d1c2      	bne.n	c4d6 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    c550:	2301      	movs	r3, #1
}
    c552:	0018      	movs	r0, r3
    c554:	46bd      	mov	sp, r7
    c556:	b004      	add	sp, #16
    c558:	bd80      	pop	{r7, pc}
    c55a:	46c0      	nop			; (mov r8, r8)
    c55c:	2000410b 	.word	0x2000410b
    c560:	0000bdb5 	.word	0x0000bdb5
    c564:	20004114 	.word	0x20004114
    c568:	200040c8 	.word	0x200040c8
    c56c:	00014701 	.word	0x00014701
    c570:	20004110 	.word	0x20004110
    c574:	0000be05 	.word	0x0000be05
    c578:	0000bc99 	.word	0x0000bc99

0000c57c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    c57c:	b580      	push	{r7, lr}
    c57e:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    c580:	4b09      	ldr	r3, [pc, #36]	; (c5a8 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    c582:	4798      	blx	r3
    c584:	0003      	movs	r3, r0
    c586:	001a      	movs	r2, r3
    c588:	2301      	movs	r3, #1
    c58a:	4053      	eors	r3, r2
    c58c:	b2db      	uxtb	r3, r3
    c58e:	2b00      	cmp	r3, #0
    c590:	d004      	beq.n	c59c <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c592:	4b06      	ldr	r3, [pc, #24]	; (c5ac <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    c594:	2205      	movs	r2, #5
    c596:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    c598:	2300      	movs	r3, #0
    c59a:	e002      	b.n	c5a2 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    c59c:	4b04      	ldr	r3, [pc, #16]	; (c5b0 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    c59e:	4798      	blx	r3
    c5a0:	0003      	movs	r3, r0
}
    c5a2:	0018      	movs	r0, r3
    c5a4:	46bd      	mov	sp, r7
    c5a6:	bd80      	pop	{r7, pc}
    c5a8:	0000bc99 	.word	0x0000bc99
    c5ac:	2000410b 	.word	0x2000410b
    c5b0:	0000be99 	.word	0x0000be99

0000c5b4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    c5b4:	b580      	push	{r7, lr}
    c5b6:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    c5b8:	2000      	movs	r0, #0
    c5ba:	4b0f      	ldr	r3, [pc, #60]	; (c5f8 <delay_init+0x44>)
    c5bc:	4798      	blx	r3
    c5be:	0002      	movs	r2, r0
    c5c0:	4b0e      	ldr	r3, [pc, #56]	; (c5fc <delay_init+0x48>)
    c5c2:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    c5c4:	4b0d      	ldr	r3, [pc, #52]	; (c5fc <delay_init+0x48>)
    c5c6:	6818      	ldr	r0, [r3, #0]
    c5c8:	4b0d      	ldr	r3, [pc, #52]	; (c600 <delay_init+0x4c>)
    c5ca:	22fa      	movs	r2, #250	; 0xfa
    c5cc:	0091      	lsls	r1, r2, #2
    c5ce:	4798      	blx	r3
    c5d0:	0003      	movs	r3, r0
    c5d2:	001a      	movs	r2, r3
    c5d4:	4b09      	ldr	r3, [pc, #36]	; (c5fc <delay_init+0x48>)
    c5d6:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    c5d8:	4b08      	ldr	r3, [pc, #32]	; (c5fc <delay_init+0x48>)
    c5da:	6818      	ldr	r0, [r3, #0]
    c5dc:	4b08      	ldr	r3, [pc, #32]	; (c600 <delay_init+0x4c>)
    c5de:	22fa      	movs	r2, #250	; 0xfa
    c5e0:	0091      	lsls	r1, r2, #2
    c5e2:	4798      	blx	r3
    c5e4:	0003      	movs	r3, r0
    c5e6:	001a      	movs	r2, r3
    c5e8:	4b06      	ldr	r3, [pc, #24]	; (c604 <delay_init+0x50>)
    c5ea:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    c5ec:	4b06      	ldr	r3, [pc, #24]	; (c608 <delay_init+0x54>)
    c5ee:	2205      	movs	r2, #5
    c5f0:	601a      	str	r2, [r3, #0]
}
    c5f2:	46c0      	nop			; (mov r8, r8)
    c5f4:	46bd      	mov	sp, r7
    c5f6:	bd80      	pop	{r7, pc}
    c5f8:	00016285 	.word	0x00016285
    c5fc:	20000108 	.word	0x20000108
    c600:	0001f0d1 	.word	0x0001f0d1
    c604:	2000010c 	.word	0x2000010c
    c608:	e000e010 	.word	0xe000e010

0000c60c <system_pinmux_get_group_from_gpio_pin>:
{
    c60c:	b580      	push	{r7, lr}
    c60e:	b084      	sub	sp, #16
    c610:	af00      	add	r7, sp, #0
    c612:	0002      	movs	r2, r0
    c614:	1dfb      	adds	r3, r7, #7
    c616:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    c618:	230f      	movs	r3, #15
    c61a:	18fb      	adds	r3, r7, r3
    c61c:	1dfa      	adds	r2, r7, #7
    c61e:	7812      	ldrb	r2, [r2, #0]
    c620:	09d2      	lsrs	r2, r2, #7
    c622:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    c624:	230e      	movs	r3, #14
    c626:	18fb      	adds	r3, r7, r3
    c628:	1dfa      	adds	r2, r7, #7
    c62a:	7812      	ldrb	r2, [r2, #0]
    c62c:	0952      	lsrs	r2, r2, #5
    c62e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    c630:	4b0d      	ldr	r3, [pc, #52]	; (c668 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    c632:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    c634:	230f      	movs	r3, #15
    c636:	18fb      	adds	r3, r7, r3
    c638:	781b      	ldrb	r3, [r3, #0]
    c63a:	2b00      	cmp	r3, #0
    c63c:	d10f      	bne.n	c65e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    c63e:	230f      	movs	r3, #15
    c640:	18fb      	adds	r3, r7, r3
    c642:	781b      	ldrb	r3, [r3, #0]
    c644:	009b      	lsls	r3, r3, #2
    c646:	2210      	movs	r2, #16
    c648:	4694      	mov	ip, r2
    c64a:	44bc      	add	ip, r7
    c64c:	4463      	add	r3, ip
    c64e:	3b08      	subs	r3, #8
    c650:	681a      	ldr	r2, [r3, #0]
    c652:	230e      	movs	r3, #14
    c654:	18fb      	adds	r3, r7, r3
    c656:	781b      	ldrb	r3, [r3, #0]
    c658:	01db      	lsls	r3, r3, #7
    c65a:	18d3      	adds	r3, r2, r3
    c65c:	e000      	b.n	c660 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    c65e:	2300      	movs	r3, #0
}
    c660:	0018      	movs	r0, r3
    c662:	46bd      	mov	sp, r7
    c664:	b004      	add	sp, #16
    c666:	bd80      	pop	{r7, pc}
    c668:	41004400 	.word	0x41004400

0000c66c <system_interrupt_enable_global>:
{
    c66c:	b580      	push	{r7, lr}
    c66e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    c670:	4b04      	ldr	r3, [pc, #16]	; (c684 <system_interrupt_enable_global+0x18>)
    c672:	2201      	movs	r2, #1
    c674:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    c676:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c67a:	b662      	cpsie	i
}
    c67c:	46c0      	nop			; (mov r8, r8)
    c67e:	46bd      	mov	sp, r7
    c680:	bd80      	pop	{r7, pc}
    c682:	46c0      	nop			; (mov r8, r8)
    c684:	20000112 	.word	0x20000112

0000c688 <port_get_group_from_gpio_pin>:
{
    c688:	b580      	push	{r7, lr}
    c68a:	b082      	sub	sp, #8
    c68c:	af00      	add	r7, sp, #0
    c68e:	0002      	movs	r2, r0
    c690:	1dfb      	adds	r3, r7, #7
    c692:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    c694:	1dfb      	adds	r3, r7, #7
    c696:	781b      	ldrb	r3, [r3, #0]
    c698:	0018      	movs	r0, r3
    c69a:	4b03      	ldr	r3, [pc, #12]	; (c6a8 <port_get_group_from_gpio_pin+0x20>)
    c69c:	4798      	blx	r3
    c69e:	0003      	movs	r3, r0
}
    c6a0:	0018      	movs	r0, r3
    c6a2:	46bd      	mov	sp, r7
    c6a4:	b002      	add	sp, #8
    c6a6:	bd80      	pop	{r7, pc}
    c6a8:	0000c60d 	.word	0x0000c60d

0000c6ac <port_get_config_defaults>:
{
    c6ac:	b580      	push	{r7, lr}
    c6ae:	b082      	sub	sp, #8
    c6b0:	af00      	add	r7, sp, #0
    c6b2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    c6b4:	687b      	ldr	r3, [r7, #4]
    c6b6:	2200      	movs	r2, #0
    c6b8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c6ba:	687b      	ldr	r3, [r7, #4]
    c6bc:	2201      	movs	r2, #1
    c6be:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    c6c0:	687b      	ldr	r3, [r7, #4]
    c6c2:	2200      	movs	r2, #0
    c6c4:	709a      	strb	r2, [r3, #2]
}
    c6c6:	46c0      	nop			; (mov r8, r8)
    c6c8:	46bd      	mov	sp, r7
    c6ca:	b002      	add	sp, #8
    c6cc:	bd80      	pop	{r7, pc}
	...

0000c6d0 <port_pin_set_output_level>:
{
    c6d0:	b580      	push	{r7, lr}
    c6d2:	b084      	sub	sp, #16
    c6d4:	af00      	add	r7, sp, #0
    c6d6:	0002      	movs	r2, r0
    c6d8:	1dfb      	adds	r3, r7, #7
    c6da:	701a      	strb	r2, [r3, #0]
    c6dc:	1dbb      	adds	r3, r7, #6
    c6de:	1c0a      	adds	r2, r1, #0
    c6e0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    c6e2:	1dfb      	adds	r3, r7, #7
    c6e4:	781b      	ldrb	r3, [r3, #0]
    c6e6:	0018      	movs	r0, r3
    c6e8:	4b0d      	ldr	r3, [pc, #52]	; (c720 <port_pin_set_output_level+0x50>)
    c6ea:	4798      	blx	r3
    c6ec:	0003      	movs	r3, r0
    c6ee:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c6f0:	1dfb      	adds	r3, r7, #7
    c6f2:	781b      	ldrb	r3, [r3, #0]
    c6f4:	221f      	movs	r2, #31
    c6f6:	4013      	ands	r3, r2
    c6f8:	2201      	movs	r2, #1
    c6fa:	409a      	lsls	r2, r3
    c6fc:	0013      	movs	r3, r2
    c6fe:	60bb      	str	r3, [r7, #8]
	if (level) {
    c700:	1dbb      	adds	r3, r7, #6
    c702:	781b      	ldrb	r3, [r3, #0]
    c704:	2b00      	cmp	r3, #0
    c706:	d003      	beq.n	c710 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    c708:	68fb      	ldr	r3, [r7, #12]
    c70a:	68ba      	ldr	r2, [r7, #8]
    c70c:	619a      	str	r2, [r3, #24]
}
    c70e:	e002      	b.n	c716 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    c710:	68fb      	ldr	r3, [r7, #12]
    c712:	68ba      	ldr	r2, [r7, #8]
    c714:	615a      	str	r2, [r3, #20]
}
    c716:	46c0      	nop			; (mov r8, r8)
    c718:	46bd      	mov	sp, r7
    c71a:	b004      	add	sp, #16
    c71c:	bd80      	pop	{r7, pc}
    c71e:	46c0      	nop			; (mov r8, r8)
    c720:	0000c689 	.word	0x0000c689

0000c724 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    c724:	b580      	push	{r7, lr}
    c726:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    c728:	4b04      	ldr	r3, [pc, #16]	; (c73c <chip_isr+0x18>)
    c72a:	681b      	ldr	r3, [r3, #0]
    c72c:	2b00      	cmp	r3, #0
    c72e:	d002      	beq.n	c736 <chip_isr+0x12>
		gpfIsr();
    c730:	4b02      	ldr	r3, [pc, #8]	; (c73c <chip_isr+0x18>)
    c732:	681b      	ldr	r3, [r3, #0]
    c734:	4798      	blx	r3
	}
}
    c736:	46c0      	nop			; (mov r8, r8)
    c738:	46bd      	mov	sp, r7
    c73a:	bd80      	pop	{r7, pc}
    c73c:	20004118 	.word	0x20004118

0000c740 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    c740:	b580      	push	{r7, lr}
    c742:	b082      	sub	sp, #8
    c744:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    c746:	1d3b      	adds	r3, r7, #4
    c748:	0018      	movs	r0, r3
    c74a:	4b10      	ldr	r3, [pc, #64]	; (c78c <init_chip_pins+0x4c>)
    c74c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c74e:	1d3b      	adds	r3, r7, #4
    c750:	2201      	movs	r2, #1
    c752:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    c754:	1d3b      	adds	r3, r7, #4
    c756:	0019      	movs	r1, r3
    c758:	201b      	movs	r0, #27
    c75a:	4b0d      	ldr	r3, [pc, #52]	; (c790 <init_chip_pins+0x50>)
    c75c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    c75e:	1d3b      	adds	r3, r7, #4
    c760:	0019      	movs	r1, r3
    c762:	201c      	movs	r0, #28
    c764:	4b0a      	ldr	r3, [pc, #40]	; (c790 <init_chip_pins+0x50>)
    c766:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    c768:	1d3b      	adds	r3, r7, #4
    c76a:	0019      	movs	r1, r3
    c76c:	2028      	movs	r0, #40	; 0x28
    c76e:	4b08      	ldr	r3, [pc, #32]	; (c790 <init_chip_pins+0x50>)
    c770:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    c772:	2100      	movs	r1, #0
    c774:	201c      	movs	r0, #28
    c776:	4b07      	ldr	r3, [pc, #28]	; (c794 <init_chip_pins+0x54>)
    c778:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    c77a:	2100      	movs	r1, #0
    c77c:	201b      	movs	r0, #27
    c77e:	4b05      	ldr	r3, [pc, #20]	; (c794 <init_chip_pins+0x54>)
    c780:	4798      	blx	r3
}
    c782:	46c0      	nop			; (mov r8, r8)
    c784:	46bd      	mov	sp, r7
    c786:	b002      	add	sp, #8
    c788:	bd80      	pop	{r7, pc}
    c78a:	46c0      	nop			; (mov r8, r8)
    c78c:	0000c6ad 	.word	0x0000c6ad
    c790:	00012ecd 	.word	0x00012ecd
    c794:	0000c6d1 	.word	0x0000c6d1

0000c798 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    c798:	b580      	push	{r7, lr}
    c79a:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    c79c:	4b0b      	ldr	r3, [pc, #44]	; (c7cc <nm_bsp_init+0x34>)
    c79e:	2200      	movs	r2, #0
    c7a0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    c7a2:	4b0b      	ldr	r3, [pc, #44]	; (c7d0 <nm_bsp_init+0x38>)
    c7a4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    c7a6:	4b0b      	ldr	r3, [pc, #44]	; (c7d4 <nm_bsp_init+0x3c>)
    c7a8:	681b      	ldr	r3, [r3, #0]
    c7aa:	2201      	movs	r2, #1
    c7ac:	4013      	ands	r3, r2
    c7ae:	d004      	beq.n	c7ba <nm_bsp_init+0x22>
    c7b0:	4b08      	ldr	r3, [pc, #32]	; (c7d4 <nm_bsp_init+0x3c>)
    c7b2:	681b      	ldr	r3, [r3, #0]
    c7b4:	2202      	movs	r2, #2
    c7b6:	4013      	ands	r3, r2
    c7b8:	d101      	bne.n	c7be <nm_bsp_init+0x26>
	    delay_init();
    c7ba:	4b07      	ldr	r3, [pc, #28]	; (c7d8 <nm_bsp_init+0x40>)
    c7bc:	4798      	blx	r3
    }

	system_interrupt_enable_global();
    c7be:	4b07      	ldr	r3, [pc, #28]	; (c7dc <nm_bsp_init+0x44>)
    c7c0:	4798      	blx	r3

	return M2M_SUCCESS;
    c7c2:	2300      	movs	r3, #0
}
    c7c4:	0018      	movs	r0, r3
    c7c6:	46bd      	mov	sp, r7
    c7c8:	bd80      	pop	{r7, pc}
    c7ca:	46c0      	nop			; (mov r8, r8)
    c7cc:	20004118 	.word	0x20004118
    c7d0:	0000c741 	.word	0x0000c741
    c7d4:	e000e010 	.word	0xe000e010
    c7d8:	0000c5b5 	.word	0x0000c5b5
    c7dc:	0000c66d 	.word	0x0000c66d

0000c7e0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    c7e0:	b580      	push	{r7, lr}
    c7e2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    c7e4:	2100      	movs	r1, #0
    c7e6:	201c      	movs	r0, #28
    c7e8:	4b0b      	ldr	r3, [pc, #44]	; (c818 <nm_bsp_reset+0x38>)
    c7ea:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    c7ec:	2100      	movs	r1, #0
    c7ee:	201b      	movs	r0, #27
    c7f0:	4b09      	ldr	r3, [pc, #36]	; (c818 <nm_bsp_reset+0x38>)
    c7f2:	4798      	blx	r3
	nm_bsp_sleep(1);
    c7f4:	2001      	movs	r0, #1
    c7f6:	4b09      	ldr	r3, [pc, #36]	; (c81c <nm_bsp_reset+0x3c>)
    c7f8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    c7fa:	2101      	movs	r1, #1
    c7fc:	201c      	movs	r0, #28
    c7fe:	4b06      	ldr	r3, [pc, #24]	; (c818 <nm_bsp_reset+0x38>)
    c800:	4798      	blx	r3
	nm_bsp_sleep(10);
    c802:	200a      	movs	r0, #10
    c804:	4b05      	ldr	r3, [pc, #20]	; (c81c <nm_bsp_reset+0x3c>)
    c806:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    c808:	2101      	movs	r1, #1
    c80a:	201b      	movs	r0, #27
    c80c:	4b02      	ldr	r3, [pc, #8]	; (c818 <nm_bsp_reset+0x38>)
    c80e:	4798      	blx	r3
}
    c810:	46c0      	nop			; (mov r8, r8)
    c812:	46bd      	mov	sp, r7
    c814:	bd80      	pop	{r7, pc}
    c816:	46c0      	nop			; (mov r8, r8)
    c818:	0000c6d1 	.word	0x0000c6d1
    c81c:	0000c821 	.word	0x0000c821

0000c820 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    c820:	b580      	push	{r7, lr}
    c822:	b082      	sub	sp, #8
    c824:	af00      	add	r7, sp, #0
    c826:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
    c828:	687b      	ldr	r3, [r7, #4]
    c82a:	0018      	movs	r0, r3
    c82c:	4b02      	ldr	r3, [pc, #8]	; (c838 <nm_bsp_sleep+0x18>)
    c82e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
    c830:	46c0      	nop			; (mov r8, r8)
    c832:	46bd      	mov	sp, r7
    c834:	b002      	add	sp, #8
    c836:	bd80      	pop	{r7, pc}
    c838:	00008635 	.word	0x00008635

0000c83c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    c83c:	b580      	push	{r7, lr}
    c83e:	b086      	sub	sp, #24
    c840:	af00      	add	r7, sp, #0
    c842:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    c844:	4b15      	ldr	r3, [pc, #84]	; (c89c <nm_bsp_register_isr+0x60>)
    c846:	687a      	ldr	r2, [r7, #4]
    c848:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    c84a:	230c      	movs	r3, #12
    c84c:	18fb      	adds	r3, r7, r3
    c84e:	0018      	movs	r0, r3
    c850:	4b13      	ldr	r3, [pc, #76]	; (c8a0 <nm_bsp_register_isr+0x64>)
    c852:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    c854:	230c      	movs	r3, #12
    c856:	18fb      	adds	r3, r7, r3
    c858:	2229      	movs	r2, #41	; 0x29
    c85a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    c85c:	230c      	movs	r3, #12
    c85e:	18fb      	adds	r3, r7, r3
    c860:	2200      	movs	r2, #0
    c862:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    c864:	230c      	movs	r3, #12
    c866:	18fb      	adds	r3, r7, r3
    c868:	2201      	movs	r2, #1
    c86a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    c86c:	230c      	movs	r3, #12
    c86e:	18fb      	adds	r3, r7, r3
    c870:	2202      	movs	r2, #2
    c872:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    c874:	230c      	movs	r3, #12
    c876:	18fb      	adds	r3, r7, r3
    c878:	0019      	movs	r1, r3
    c87a:	2009      	movs	r0, #9
    c87c:	4b09      	ldr	r3, [pc, #36]	; (c8a4 <nm_bsp_register_isr+0x68>)
    c87e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    c880:	4b09      	ldr	r3, [pc, #36]	; (c8a8 <nm_bsp_register_isr+0x6c>)
    c882:	2200      	movs	r2, #0
    c884:	2109      	movs	r1, #9
    c886:	0018      	movs	r0, r3
    c888:	4b08      	ldr	r3, [pc, #32]	; (c8ac <nm_bsp_register_isr+0x70>)
    c88a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    c88c:	2100      	movs	r1, #0
    c88e:	2009      	movs	r0, #9
    c890:	4b07      	ldr	r3, [pc, #28]	; (c8b0 <nm_bsp_register_isr+0x74>)
    c892:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    c894:	46c0      	nop			; (mov r8, r8)
    c896:	46bd      	mov	sp, r7
    c898:	b006      	add	sp, #24
    c89a:	bd80      	pop	{r7, pc}
    c89c:	20004118 	.word	0x20004118
    c8a0:	00012d75 	.word	0x00012d75
    c8a4:	00012da9 	.word	0x00012da9
    c8a8:	0000c725 	.word	0x0000c725
    c8ac:	00012975 	.word	0x00012975
    c8b0:	000129d9 	.word	0x000129d9

0000c8b4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    c8b4:	b580      	push	{r7, lr}
    c8b6:	b082      	sub	sp, #8
    c8b8:	af00      	add	r7, sp, #0
    c8ba:	0002      	movs	r2, r0
    c8bc:	1dfb      	adds	r3, r7, #7
    c8be:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    c8c0:	1dfb      	adds	r3, r7, #7
    c8c2:	781b      	ldrb	r3, [r3, #0]
    c8c4:	2b00      	cmp	r3, #0
    c8c6:	d004      	beq.n	c8d2 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    c8c8:	2100      	movs	r1, #0
    c8ca:	2009      	movs	r0, #9
    c8cc:	4b05      	ldr	r3, [pc, #20]	; (c8e4 <nm_bsp_interrupt_ctrl+0x30>)
    c8ce:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    c8d0:	e003      	b.n	c8da <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    c8d2:	2100      	movs	r1, #0
    c8d4:	2009      	movs	r0, #9
    c8d6:	4b04      	ldr	r3, [pc, #16]	; (c8e8 <nm_bsp_interrupt_ctrl+0x34>)
    c8d8:	4798      	blx	r3
}
    c8da:	46c0      	nop			; (mov r8, r8)
    c8dc:	46bd      	mov	sp, r7
    c8de:	b002      	add	sp, #8
    c8e0:	bd80      	pop	{r7, pc}
    c8e2:	46c0      	nop			; (mov r8, r8)
    c8e4:	000129d9 	.word	0x000129d9
    c8e8:	00012a21 	.word	0x00012a21

0000c8ec <system_pinmux_get_group_from_gpio_pin>:
{
    c8ec:	b580      	push	{r7, lr}
    c8ee:	b084      	sub	sp, #16
    c8f0:	af00      	add	r7, sp, #0
    c8f2:	0002      	movs	r2, r0
    c8f4:	1dfb      	adds	r3, r7, #7
    c8f6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    c8f8:	230f      	movs	r3, #15
    c8fa:	18fb      	adds	r3, r7, r3
    c8fc:	1dfa      	adds	r2, r7, #7
    c8fe:	7812      	ldrb	r2, [r2, #0]
    c900:	09d2      	lsrs	r2, r2, #7
    c902:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    c904:	230e      	movs	r3, #14
    c906:	18fb      	adds	r3, r7, r3
    c908:	1dfa      	adds	r2, r7, #7
    c90a:	7812      	ldrb	r2, [r2, #0]
    c90c:	0952      	lsrs	r2, r2, #5
    c90e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    c910:	4b0d      	ldr	r3, [pc, #52]	; (c948 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    c912:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    c914:	230f      	movs	r3, #15
    c916:	18fb      	adds	r3, r7, r3
    c918:	781b      	ldrb	r3, [r3, #0]
    c91a:	2b00      	cmp	r3, #0
    c91c:	d10f      	bne.n	c93e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    c91e:	230f      	movs	r3, #15
    c920:	18fb      	adds	r3, r7, r3
    c922:	781b      	ldrb	r3, [r3, #0]
    c924:	009b      	lsls	r3, r3, #2
    c926:	2210      	movs	r2, #16
    c928:	4694      	mov	ip, r2
    c92a:	44bc      	add	ip, r7
    c92c:	4463      	add	r3, ip
    c92e:	3b08      	subs	r3, #8
    c930:	681a      	ldr	r2, [r3, #0]
    c932:	230e      	movs	r3, #14
    c934:	18fb      	adds	r3, r7, r3
    c936:	781b      	ldrb	r3, [r3, #0]
    c938:	01db      	lsls	r3, r3, #7
    c93a:	18d3      	adds	r3, r2, r3
    c93c:	e000      	b.n	c940 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    c93e:	2300      	movs	r3, #0
}
    c940:	0018      	movs	r0, r3
    c942:	46bd      	mov	sp, r7
    c944:	b004      	add	sp, #16
    c946:	bd80      	pop	{r7, pc}
    c948:	41004400 	.word	0x41004400

0000c94c <system_interrupt_enable>:
{
    c94c:	b580      	push	{r7, lr}
    c94e:	b082      	sub	sp, #8
    c950:	af00      	add	r7, sp, #0
    c952:	0002      	movs	r2, r0
    c954:	1dfb      	adds	r3, r7, #7
    c956:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c958:	4b06      	ldr	r3, [pc, #24]	; (c974 <system_interrupt_enable+0x28>)
    c95a:	1dfa      	adds	r2, r7, #7
    c95c:	7812      	ldrb	r2, [r2, #0]
    c95e:	0011      	movs	r1, r2
    c960:	221f      	movs	r2, #31
    c962:	400a      	ands	r2, r1
    c964:	2101      	movs	r1, #1
    c966:	4091      	lsls	r1, r2
    c968:	000a      	movs	r2, r1
    c96a:	601a      	str	r2, [r3, #0]
}
    c96c:	46c0      	nop			; (mov r8, r8)
    c96e:	46bd      	mov	sp, r7
    c970:	b002      	add	sp, #8
    c972:	bd80      	pop	{r7, pc}
    c974:	e000e100 	.word	0xe000e100

0000c978 <system_interrupt_disable>:
{
    c978:	b580      	push	{r7, lr}
    c97a:	b082      	sub	sp, #8
    c97c:	af00      	add	r7, sp, #0
    c97e:	0002      	movs	r2, r0
    c980:	1dfb      	adds	r3, r7, #7
    c982:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c984:	4a07      	ldr	r2, [pc, #28]	; (c9a4 <system_interrupt_disable+0x2c>)
    c986:	1dfb      	adds	r3, r7, #7
    c988:	781b      	ldrb	r3, [r3, #0]
    c98a:	0019      	movs	r1, r3
    c98c:	231f      	movs	r3, #31
    c98e:	400b      	ands	r3, r1
    c990:	2101      	movs	r1, #1
    c992:	4099      	lsls	r1, r3
    c994:	000b      	movs	r3, r1
    c996:	0019      	movs	r1, r3
    c998:	2380      	movs	r3, #128	; 0x80
    c99a:	50d1      	str	r1, [r2, r3]
}
    c99c:	46c0      	nop			; (mov r8, r8)
    c99e:	46bd      	mov	sp, r7
    c9a0:	b002      	add	sp, #8
    c9a2:	bd80      	pop	{r7, pc}
    c9a4:	e000e100 	.word	0xe000e100

0000c9a8 <port_get_group_from_gpio_pin>:
{
    c9a8:	b580      	push	{r7, lr}
    c9aa:	b082      	sub	sp, #8
    c9ac:	af00      	add	r7, sp, #0
    c9ae:	0002      	movs	r2, r0
    c9b0:	1dfb      	adds	r3, r7, #7
    c9b2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    c9b4:	1dfb      	adds	r3, r7, #7
    c9b6:	781b      	ldrb	r3, [r3, #0]
    c9b8:	0018      	movs	r0, r3
    c9ba:	4b03      	ldr	r3, [pc, #12]	; (c9c8 <port_get_group_from_gpio_pin+0x20>)
    c9bc:	4798      	blx	r3
    c9be:	0003      	movs	r3, r0
}
    c9c0:	0018      	movs	r0, r3
    c9c2:	46bd      	mov	sp, r7
    c9c4:	b002      	add	sp, #8
    c9c6:	bd80      	pop	{r7, pc}
    c9c8:	0000c8ed 	.word	0x0000c8ed

0000c9cc <port_get_config_defaults>:
{
    c9cc:	b580      	push	{r7, lr}
    c9ce:	b082      	sub	sp, #8
    c9d0:	af00      	add	r7, sp, #0
    c9d2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    c9d4:	687b      	ldr	r3, [r7, #4]
    c9d6:	2200      	movs	r2, #0
    c9d8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c9da:	687b      	ldr	r3, [r7, #4]
    c9dc:	2201      	movs	r2, #1
    c9de:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    c9e0:	687b      	ldr	r3, [r7, #4]
    c9e2:	2200      	movs	r2, #0
    c9e4:	709a      	strb	r2, [r3, #2]
}
    c9e6:	46c0      	nop			; (mov r8, r8)
    c9e8:	46bd      	mov	sp, r7
    c9ea:	b002      	add	sp, #8
    c9ec:	bd80      	pop	{r7, pc}
	...

0000c9f0 <port_pin_set_output_level>:
{
    c9f0:	b580      	push	{r7, lr}
    c9f2:	b084      	sub	sp, #16
    c9f4:	af00      	add	r7, sp, #0
    c9f6:	0002      	movs	r2, r0
    c9f8:	1dfb      	adds	r3, r7, #7
    c9fa:	701a      	strb	r2, [r3, #0]
    c9fc:	1dbb      	adds	r3, r7, #6
    c9fe:	1c0a      	adds	r2, r1, #0
    ca00:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    ca02:	1dfb      	adds	r3, r7, #7
    ca04:	781b      	ldrb	r3, [r3, #0]
    ca06:	0018      	movs	r0, r3
    ca08:	4b0d      	ldr	r3, [pc, #52]	; (ca40 <port_pin_set_output_level+0x50>)
    ca0a:	4798      	blx	r3
    ca0c:	0003      	movs	r3, r0
    ca0e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ca10:	1dfb      	adds	r3, r7, #7
    ca12:	781b      	ldrb	r3, [r3, #0]
    ca14:	221f      	movs	r2, #31
    ca16:	4013      	ands	r3, r2
    ca18:	2201      	movs	r2, #1
    ca1a:	409a      	lsls	r2, r3
    ca1c:	0013      	movs	r3, r2
    ca1e:	60bb      	str	r3, [r7, #8]
	if (level) {
    ca20:	1dbb      	adds	r3, r7, #6
    ca22:	781b      	ldrb	r3, [r3, #0]
    ca24:	2b00      	cmp	r3, #0
    ca26:	d003      	beq.n	ca30 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    ca28:	68fb      	ldr	r3, [r7, #12]
    ca2a:	68ba      	ldr	r2, [r7, #8]
    ca2c:	619a      	str	r2, [r3, #24]
}
    ca2e:	e002      	b.n	ca36 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    ca30:	68fb      	ldr	r3, [r7, #12]
    ca32:	68ba      	ldr	r2, [r7, #8]
    ca34:	615a      	str	r2, [r3, #20]
}
    ca36:	46c0      	nop			; (mov r8, r8)
    ca38:	46bd      	mov	sp, r7
    ca3a:	b004      	add	sp, #16
    ca3c:	bd80      	pop	{r7, pc}
    ca3e:	46c0      	nop			; (mov r8, r8)
    ca40:	0000c9a9 	.word	0x0000c9a9

0000ca44 <spi_is_syncing>:
{
    ca44:	b580      	push	{r7, lr}
    ca46:	b084      	sub	sp, #16
    ca48:	af00      	add	r7, sp, #0
    ca4a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    ca4c:	687b      	ldr	r3, [r7, #4]
    ca4e:	681b      	ldr	r3, [r3, #0]
    ca50:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    ca52:	68fb      	ldr	r3, [r7, #12]
    ca54:	69db      	ldr	r3, [r3, #28]
    ca56:	1e5a      	subs	r2, r3, #1
    ca58:	4193      	sbcs	r3, r2
    ca5a:	b2db      	uxtb	r3, r3
}
    ca5c:	0018      	movs	r0, r3
    ca5e:	46bd      	mov	sp, r7
    ca60:	b004      	add	sp, #16
    ca62:	bd80      	pop	{r7, pc}

0000ca64 <spi_get_config_defaults>:
{
    ca64:	b580      	push	{r7, lr}
    ca66:	b082      	sub	sp, #8
    ca68:	af00      	add	r7, sp, #0
    ca6a:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    ca6c:	687b      	ldr	r3, [r7, #4]
    ca6e:	2201      	movs	r2, #1
    ca70:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    ca72:	687b      	ldr	r3, [r7, #4]
    ca74:	2200      	movs	r2, #0
    ca76:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    ca78:	687b      	ldr	r3, [r7, #4]
    ca7a:	2200      	movs	r2, #0
    ca7c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    ca7e:	687b      	ldr	r3, [r7, #4]
    ca80:	22c0      	movs	r2, #192	; 0xc0
    ca82:	0392      	lsls	r2, r2, #14
    ca84:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    ca86:	687b      	ldr	r3, [r7, #4]
    ca88:	2200      	movs	r2, #0
    ca8a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    ca8c:	687b      	ldr	r3, [r7, #4]
    ca8e:	2200      	movs	r2, #0
    ca90:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    ca92:	687b      	ldr	r3, [r7, #4]
    ca94:	2201      	movs	r2, #1
    ca96:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    ca98:	687b      	ldr	r3, [r7, #4]
    ca9a:	2201      	movs	r2, #1
    ca9c:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    ca9e:	687b      	ldr	r3, [r7, #4]
    caa0:	2200      	movs	r2, #0
    caa2:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    caa4:	687b      	ldr	r3, [r7, #4]
    caa6:	2224      	movs	r2, #36	; 0x24
    caa8:	2100      	movs	r1, #0
    caaa:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    caac:	687b      	ldr	r3, [r7, #4]
    caae:	3318      	adds	r3, #24
    cab0:	220c      	movs	r2, #12
    cab2:	2100      	movs	r1, #0
    cab4:	0018      	movs	r0, r3
    cab6:	4b0a      	ldr	r3, [pc, #40]	; (cae0 <spi_get_config_defaults+0x7c>)
    cab8:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    caba:	687b      	ldr	r3, [r7, #4]
    cabc:	4a09      	ldr	r2, [pc, #36]	; (cae4 <spi_get_config_defaults+0x80>)
    cabe:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    cac0:	687b      	ldr	r3, [r7, #4]
    cac2:	2200      	movs	r2, #0
    cac4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    cac6:	687b      	ldr	r3, [r7, #4]
    cac8:	2200      	movs	r2, #0
    caca:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    cacc:	687b      	ldr	r3, [r7, #4]
    cace:	2200      	movs	r2, #0
    cad0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    cad2:	687b      	ldr	r3, [r7, #4]
    cad4:	2200      	movs	r2, #0
    cad6:	635a      	str	r2, [r3, #52]	; 0x34
};
    cad8:	46c0      	nop			; (mov r8, r8)
    cada:	46bd      	mov	sp, r7
    cadc:	b002      	add	sp, #8
    cade:	bd80      	pop	{r7, pc}
    cae0:	00020d8b 	.word	0x00020d8b
    cae4:	000186a0 	.word	0x000186a0

0000cae8 <spi_slave_inst_get_config_defaults>:
{
    cae8:	b580      	push	{r7, lr}
    caea:	b082      	sub	sp, #8
    caec:	af00      	add	r7, sp, #0
    caee:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    caf0:	687b      	ldr	r3, [r7, #4]
    caf2:	220a      	movs	r2, #10
    caf4:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    caf6:	687b      	ldr	r3, [r7, #4]
    caf8:	2200      	movs	r2, #0
    cafa:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    cafc:	687b      	ldr	r3, [r7, #4]
    cafe:	2200      	movs	r2, #0
    cb00:	709a      	strb	r2, [r3, #2]
}
    cb02:	46c0      	nop			; (mov r8, r8)
    cb04:	46bd      	mov	sp, r7
    cb06:	b002      	add	sp, #8
    cb08:	bd80      	pop	{r7, pc}
	...

0000cb0c <spi_attach_slave>:
{
    cb0c:	b580      	push	{r7, lr}
    cb0e:	b084      	sub	sp, #16
    cb10:	af00      	add	r7, sp, #0
    cb12:	6078      	str	r0, [r7, #4]
    cb14:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
    cb16:	683b      	ldr	r3, [r7, #0]
    cb18:	781a      	ldrb	r2, [r3, #0]
    cb1a:	687b      	ldr	r3, [r7, #4]
    cb1c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    cb1e:	683b      	ldr	r3, [r7, #0]
    cb20:	785a      	ldrb	r2, [r3, #1]
    cb22:	687b      	ldr	r3, [r7, #4]
    cb24:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    cb26:	683b      	ldr	r3, [r7, #0]
    cb28:	789a      	ldrb	r2, [r3, #2]
    cb2a:	687b      	ldr	r3, [r7, #4]
    cb2c:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    cb2e:	230c      	movs	r3, #12
    cb30:	18fb      	adds	r3, r7, r3
    cb32:	0018      	movs	r0, r3
    cb34:	4b0b      	ldr	r3, [pc, #44]	; (cb64 <spi_attach_slave+0x58>)
    cb36:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    cb38:	230c      	movs	r3, #12
    cb3a:	18fb      	adds	r3, r7, r3
    cb3c:	2201      	movs	r2, #1
    cb3e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    cb40:	687b      	ldr	r3, [r7, #4]
    cb42:	781b      	ldrb	r3, [r3, #0]
    cb44:	220c      	movs	r2, #12
    cb46:	18ba      	adds	r2, r7, r2
    cb48:	0011      	movs	r1, r2
    cb4a:	0018      	movs	r0, r3
    cb4c:	4b06      	ldr	r3, [pc, #24]	; (cb68 <spi_attach_slave+0x5c>)
    cb4e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    cb50:	687b      	ldr	r3, [r7, #4]
    cb52:	781b      	ldrb	r3, [r3, #0]
    cb54:	2101      	movs	r1, #1
    cb56:	0018      	movs	r0, r3
    cb58:	4b04      	ldr	r3, [pc, #16]	; (cb6c <spi_attach_slave+0x60>)
    cb5a:	4798      	blx	r3
}
    cb5c:	46c0      	nop			; (mov r8, r8)
    cb5e:	46bd      	mov	sp, r7
    cb60:	b004      	add	sp, #16
    cb62:	bd80      	pop	{r7, pc}
    cb64:	0000c9cd 	.word	0x0000c9cd
    cb68:	00012ecd 	.word	0x00012ecd
    cb6c:	0000c9f1 	.word	0x0000c9f1

0000cb70 <spi_enable>:
{
    cb70:	b580      	push	{r7, lr}
    cb72:	b084      	sub	sp, #16
    cb74:	af00      	add	r7, sp, #0
    cb76:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cb78:	687b      	ldr	r3, [r7, #4]
    cb7a:	681b      	ldr	r3, [r3, #0]
    cb7c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    cb7e:	687b      	ldr	r3, [r7, #4]
    cb80:	681b      	ldr	r3, [r3, #0]
    cb82:	0018      	movs	r0, r3
    cb84:	4b0b      	ldr	r3, [pc, #44]	; (cbb4 <spi_enable+0x44>)
    cb86:	4798      	blx	r3
    cb88:	0003      	movs	r3, r0
    cb8a:	0018      	movs	r0, r3
    cb8c:	4b0a      	ldr	r3, [pc, #40]	; (cbb8 <spi_enable+0x48>)
    cb8e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    cb90:	46c0      	nop			; (mov r8, r8)
    cb92:	687b      	ldr	r3, [r7, #4]
    cb94:	0018      	movs	r0, r3
    cb96:	4b09      	ldr	r3, [pc, #36]	; (cbbc <spi_enable+0x4c>)
    cb98:	4798      	blx	r3
    cb9a:	1e03      	subs	r3, r0, #0
    cb9c:	d1f9      	bne.n	cb92 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    cb9e:	68fb      	ldr	r3, [r7, #12]
    cba0:	681b      	ldr	r3, [r3, #0]
    cba2:	2202      	movs	r2, #2
    cba4:	431a      	orrs	r2, r3
    cba6:	68fb      	ldr	r3, [r7, #12]
    cba8:	601a      	str	r2, [r3, #0]
}
    cbaa:	46c0      	nop			; (mov r8, r8)
    cbac:	46bd      	mov	sp, r7
    cbae:	b004      	add	sp, #16
    cbb0:	bd80      	pop	{r7, pc}
    cbb2:	46c0      	nop			; (mov r8, r8)
    cbb4:	00013b9d 	.word	0x00013b9d
    cbb8:	0000c94d 	.word	0x0000c94d
    cbbc:	0000ca45 	.word	0x0000ca45

0000cbc0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    cbc0:	b580      	push	{r7, lr}
    cbc2:	b084      	sub	sp, #16
    cbc4:	af00      	add	r7, sp, #0
    cbc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    cbc8:	687b      	ldr	r3, [r7, #4]
    cbca:	681b      	ldr	r3, [r3, #0]
    cbcc:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    cbce:	687b      	ldr	r3, [r7, #4]
    cbd0:	681b      	ldr	r3, [r3, #0]
    cbd2:	0018      	movs	r0, r3
    cbd4:	4b0e      	ldr	r3, [pc, #56]	; (cc10 <spi_disable+0x50>)
    cbd6:	4798      	blx	r3
    cbd8:	0003      	movs	r3, r0
    cbda:	0018      	movs	r0, r3
    cbdc:	4b0d      	ldr	r3, [pc, #52]	; (cc14 <spi_disable+0x54>)
    cbde:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    cbe0:	46c0      	nop			; (mov r8, r8)
    cbe2:	687b      	ldr	r3, [r7, #4]
    cbe4:	0018      	movs	r0, r3
    cbe6:	4b0c      	ldr	r3, [pc, #48]	; (cc18 <spi_disable+0x58>)
    cbe8:	4798      	blx	r3
    cbea:	1e03      	subs	r3, r0, #0
    cbec:	d1f9      	bne.n	cbe2 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    cbee:	68fb      	ldr	r3, [r7, #12]
    cbf0:	228f      	movs	r2, #143	; 0x8f
    cbf2:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    cbf4:	68fb      	ldr	r3, [r7, #12]
    cbf6:	228f      	movs	r2, #143	; 0x8f
    cbf8:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    cbfa:	68fb      	ldr	r3, [r7, #12]
    cbfc:	681b      	ldr	r3, [r3, #0]
    cbfe:	2202      	movs	r2, #2
    cc00:	4393      	bics	r3, r2
    cc02:	001a      	movs	r2, r3
    cc04:	68fb      	ldr	r3, [r7, #12]
    cc06:	601a      	str	r2, [r3, #0]
}
    cc08:	46c0      	nop			; (mov r8, r8)
    cc0a:	46bd      	mov	sp, r7
    cc0c:	b004      	add	sp, #16
    cc0e:	bd80      	pop	{r7, pc}
    cc10:	00013b9d 	.word	0x00013b9d
    cc14:	0000c979 	.word	0x0000c979
    cc18:	0000ca45 	.word	0x0000ca45

0000cc1c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    cc1c:	b580      	push	{r7, lr}
    cc1e:	b084      	sub	sp, #16
    cc20:	af00      	add	r7, sp, #0
    cc22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    cc24:	687b      	ldr	r3, [r7, #4]
    cc26:	681b      	ldr	r3, [r3, #0]
    cc28:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cc2a:	68fb      	ldr	r3, [r7, #12]
    cc2c:	7e1b      	ldrb	r3, [r3, #24]
    cc2e:	b2db      	uxtb	r3, r3
    cc30:	001a      	movs	r2, r3
    cc32:	2302      	movs	r3, #2
    cc34:	4013      	ands	r3, r2
    cc36:	1e5a      	subs	r2, r3, #1
    cc38:	4193      	sbcs	r3, r2
    cc3a:	b2db      	uxtb	r3, r3
}
    cc3c:	0018      	movs	r0, r3
    cc3e:	46bd      	mov	sp, r7
    cc40:	b004      	add	sp, #16
    cc42:	bd80      	pop	{r7, pc}

0000cc44 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    cc44:	b580      	push	{r7, lr}
    cc46:	b084      	sub	sp, #16
    cc48:	af00      	add	r7, sp, #0
    cc4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    cc4c:	687b      	ldr	r3, [r7, #4]
    cc4e:	681b      	ldr	r3, [r3, #0]
    cc50:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cc52:	68fb      	ldr	r3, [r7, #12]
    cc54:	7e1b      	ldrb	r3, [r3, #24]
    cc56:	b2db      	uxtb	r3, r3
    cc58:	001a      	movs	r2, r3
    cc5a:	2301      	movs	r3, #1
    cc5c:	4013      	ands	r3, r2
    cc5e:	1e5a      	subs	r2, r3, #1
    cc60:	4193      	sbcs	r3, r2
    cc62:	b2db      	uxtb	r3, r3
}
    cc64:	0018      	movs	r0, r3
    cc66:	46bd      	mov	sp, r7
    cc68:	b004      	add	sp, #16
    cc6a:	bd80      	pop	{r7, pc}

0000cc6c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    cc6c:	b580      	push	{r7, lr}
    cc6e:	b084      	sub	sp, #16
    cc70:	af00      	add	r7, sp, #0
    cc72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    cc74:	687b      	ldr	r3, [r7, #4]
    cc76:	681b      	ldr	r3, [r3, #0]
    cc78:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cc7a:	68fb      	ldr	r3, [r7, #12]
    cc7c:	7e1b      	ldrb	r3, [r3, #24]
    cc7e:	b2db      	uxtb	r3, r3
    cc80:	001a      	movs	r2, r3
    cc82:	2304      	movs	r3, #4
    cc84:	4013      	ands	r3, r2
    cc86:	1e5a      	subs	r2, r3, #1
    cc88:	4193      	sbcs	r3, r2
    cc8a:	b2db      	uxtb	r3, r3
}
    cc8c:	0018      	movs	r0, r3
    cc8e:	46bd      	mov	sp, r7
    cc90:	b004      	add	sp, #16
    cc92:	bd80      	pop	{r7, pc}

0000cc94 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    cc94:	b580      	push	{r7, lr}
    cc96:	b084      	sub	sp, #16
    cc98:	af00      	add	r7, sp, #0
    cc9a:	6078      	str	r0, [r7, #4]
    cc9c:	000a      	movs	r2, r1
    cc9e:	1cbb      	adds	r3, r7, #2
    cca0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    cca2:	687b      	ldr	r3, [r7, #4]
    cca4:	681b      	ldr	r3, [r3, #0]
    cca6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    cca8:	687b      	ldr	r3, [r7, #4]
    ccaa:	0018      	movs	r0, r3
    ccac:	4b0a      	ldr	r3, [pc, #40]	; (ccd8 <spi_write+0x44>)
    ccae:	4798      	blx	r3
    ccb0:	0003      	movs	r3, r0
    ccb2:	001a      	movs	r2, r3
    ccb4:	2301      	movs	r3, #1
    ccb6:	4053      	eors	r3, r2
    ccb8:	b2db      	uxtb	r3, r3
    ccba:	2b00      	cmp	r3, #0
    ccbc:	d001      	beq.n	ccc2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    ccbe:	2305      	movs	r3, #5
    ccc0:	e006      	b.n	ccd0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ccc2:	1cbb      	adds	r3, r7, #2
    ccc4:	881b      	ldrh	r3, [r3, #0]
    ccc6:	05db      	lsls	r3, r3, #23
    ccc8:	0dda      	lsrs	r2, r3, #23
    ccca:	68fb      	ldr	r3, [r7, #12]
    cccc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    ccce:	2300      	movs	r3, #0
}
    ccd0:	0018      	movs	r0, r3
    ccd2:	46bd      	mov	sp, r7
    ccd4:	b004      	add	sp, #16
    ccd6:	bd80      	pop	{r7, pc}
    ccd8:	0000cc45 	.word	0x0000cc45

0000ccdc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    ccdc:	b580      	push	{r7, lr}
    ccde:	b084      	sub	sp, #16
    cce0:	af00      	add	r7, sp, #0
    cce2:	6078      	str	r0, [r7, #4]
    cce4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    cce6:	687b      	ldr	r3, [r7, #4]
    cce8:	681b      	ldr	r3, [r3, #0]
    ccea:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    ccec:	687b      	ldr	r3, [r7, #4]
    ccee:	0018      	movs	r0, r3
    ccf0:	4b1b      	ldr	r3, [pc, #108]	; (cd60 <spi_read+0x84>)
    ccf2:	4798      	blx	r3
    ccf4:	0003      	movs	r3, r0
    ccf6:	001a      	movs	r2, r3
    ccf8:	2301      	movs	r3, #1
    ccfa:	4053      	eors	r3, r2
    ccfc:	b2db      	uxtb	r3, r3
    ccfe:	2b00      	cmp	r3, #0
    cd00:	d001      	beq.n	cd06 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    cd02:	2310      	movs	r3, #16
    cd04:	e027      	b.n	cd56 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    cd06:	230f      	movs	r3, #15
    cd08:	18fb      	adds	r3, r7, r3
    cd0a:	2200      	movs	r2, #0
    cd0c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cd0e:	68bb      	ldr	r3, [r7, #8]
    cd10:	8b5b      	ldrh	r3, [r3, #26]
    cd12:	b29b      	uxth	r3, r3
    cd14:	001a      	movs	r2, r3
    cd16:	2304      	movs	r3, #4
    cd18:	4013      	ands	r3, r2
    cd1a:	d006      	beq.n	cd2a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    cd1c:	230f      	movs	r3, #15
    cd1e:	18fb      	adds	r3, r7, r3
    cd20:	221e      	movs	r2, #30
    cd22:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cd24:	68bb      	ldr	r3, [r7, #8]
    cd26:	2204      	movs	r2, #4
    cd28:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cd2a:	687b      	ldr	r3, [r7, #4]
    cd2c:	799b      	ldrb	r3, [r3, #6]
    cd2e:	2b01      	cmp	r3, #1
    cd30:	d108      	bne.n	cd44 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cd32:	68bb      	ldr	r3, [r7, #8]
    cd34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cd36:	b29b      	uxth	r3, r3
    cd38:	05db      	lsls	r3, r3, #23
    cd3a:	0ddb      	lsrs	r3, r3, #23
    cd3c:	b29a      	uxth	r2, r3
    cd3e:	683b      	ldr	r3, [r7, #0]
    cd40:	801a      	strh	r2, [r3, #0]
    cd42:	e005      	b.n	cd50 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cd44:	68bb      	ldr	r3, [r7, #8]
    cd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cd48:	b2db      	uxtb	r3, r3
    cd4a:	b29a      	uxth	r2, r3
    cd4c:	683b      	ldr	r3, [r7, #0]
    cd4e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    cd50:	230f      	movs	r3, #15
    cd52:	18fb      	adds	r3, r7, r3
    cd54:	781b      	ldrb	r3, [r3, #0]
}
    cd56:	0018      	movs	r0, r3
    cd58:	46bd      	mov	sp, r7
    cd5a:	b004      	add	sp, #16
    cd5c:	bd80      	pop	{r7, pc}
    cd5e:	46c0      	nop			; (mov r8, r8)
    cd60:	0000cc6d 	.word	0x0000cc6d

0000cd64 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    cd64:	b580      	push	{r7, lr}
    cd66:	b086      	sub	sp, #24
    cd68:	af00      	add	r7, sp, #0
    cd6a:	60f8      	str	r0, [r7, #12]
    cd6c:	60b9      	str	r1, [r7, #8]
    cd6e:	1dbb      	adds	r3, r7, #6
    cd70:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
    cd72:	2313      	movs	r3, #19
    cd74:	18fb      	adds	r3, r7, r3
    cd76:	22ff      	movs	r2, #255	; 0xff
    cd78:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    cd7a:	2317      	movs	r3, #23
    cd7c:	18fb      	adds	r3, r7, r3
    cd7e:	2200      	movs	r2, #0
    cd80:	701a      	strb	r2, [r3, #0]
    cd82:	2316      	movs	r3, #22
    cd84:	18fb      	adds	r3, r7, r3
    cd86:	2200      	movs	r2, #0
    cd88:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    cd8a:	2314      	movs	r3, #20
    cd8c:	18fb      	adds	r3, r7, r3
    cd8e:	2200      	movs	r2, #0
    cd90:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    cd92:	2310      	movs	r3, #16
    cd94:	18fb      	adds	r3, r7, r3
    cd96:	2200      	movs	r2, #0
    cd98:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    cd9a:	68bb      	ldr	r3, [r7, #8]
    cd9c:	2b00      	cmp	r3, #0
    cd9e:	d102      	bne.n	cda6 <spi_rw+0x42>
    cda0:	68fb      	ldr	r3, [r7, #12]
    cda2:	2b00      	cmp	r3, #0
    cda4:	d003      	beq.n	cdae <spi_rw+0x4a>
    cda6:	1dbb      	adds	r3, r7, #6
    cda8:	881b      	ldrh	r3, [r3, #0]
    cdaa:	2b00      	cmp	r3, #0
    cdac:	d102      	bne.n	cdb4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
    cdae:	230f      	movs	r3, #15
    cdb0:	425b      	negs	r3, r3
    cdb2:	e07e      	b.n	ceb2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
    cdb4:	68fb      	ldr	r3, [r7, #12]
    cdb6:	2b00      	cmp	r3, #0
    cdb8:	d106      	bne.n	cdc8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
    cdba:	2313      	movs	r3, #19
    cdbc:	18fb      	adds	r3, r7, r3
    cdbe:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    cdc0:	2317      	movs	r3, #23
    cdc2:	18fb      	adds	r3, r7, r3
    cdc4:	2201      	movs	r2, #1
    cdc6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
    cdc8:	68bb      	ldr	r3, [r7, #8]
    cdca:	2b00      	cmp	r3, #0
    cdcc:	d106      	bne.n	cddc <spi_rw+0x78>
		pu8Miso = &u8Dummy;
    cdce:	2313      	movs	r3, #19
    cdd0:	18fb      	adds	r3, r7, r3
    cdd2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    cdd4:	2316      	movs	r3, #22
    cdd6:	18fb      	adds	r3, r7, r3
    cdd8:	2201      	movs	r2, #1
    cdda:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
    cddc:	4937      	ldr	r1, [pc, #220]	; (cebc <spi_rw+0x158>)
    cdde:	4b38      	ldr	r3, [pc, #224]	; (cec0 <spi_rw+0x15c>)
    cde0:	2201      	movs	r2, #1
    cde2:	0018      	movs	r0, r3
    cde4:	4b37      	ldr	r3, [pc, #220]	; (cec4 <spi_rw+0x160>)
    cde6:	4798      	blx	r3

	while (u16Sz) {
    cde8:	e04c      	b.n	ce84 <spi_rw+0x120>
		txd_data = *pu8Mosi;
    cdea:	68fb      	ldr	r3, [r7, #12]
    cdec:	781a      	ldrb	r2, [r3, #0]
    cdee:	2314      	movs	r3, #20
    cdf0:	18fb      	adds	r3, r7, r3
    cdf2:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    cdf4:	46c0      	nop			; (mov r8, r8)
    cdf6:	4b32      	ldr	r3, [pc, #200]	; (cec0 <spi_rw+0x15c>)
    cdf8:	0018      	movs	r0, r3
    cdfa:	4b33      	ldr	r3, [pc, #204]	; (cec8 <spi_rw+0x164>)
    cdfc:	4798      	blx	r3
    cdfe:	0003      	movs	r3, r0
    ce00:	001a      	movs	r2, r3
    ce02:	2301      	movs	r3, #1
    ce04:	4053      	eors	r3, r2
    ce06:	b2db      	uxtb	r3, r3
    ce08:	2b00      	cmp	r3, #0
    ce0a:	d1f4      	bne.n	cdf6 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    ce0c:	46c0      	nop			; (mov r8, r8)
    ce0e:	2314      	movs	r3, #20
    ce10:	18fb      	adds	r3, r7, r3
    ce12:	881a      	ldrh	r2, [r3, #0]
    ce14:	4b2a      	ldr	r3, [pc, #168]	; (cec0 <spi_rw+0x15c>)
    ce16:	0011      	movs	r1, r2
    ce18:	0018      	movs	r0, r3
    ce1a:	4b2c      	ldr	r3, [pc, #176]	; (cecc <spi_rw+0x168>)
    ce1c:	4798      	blx	r3
    ce1e:	1e03      	subs	r3, r0, #0
    ce20:	d1f5      	bne.n	ce0e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    ce22:	46c0      	nop			; (mov r8, r8)
    ce24:	4b26      	ldr	r3, [pc, #152]	; (cec0 <spi_rw+0x15c>)
    ce26:	0018      	movs	r0, r3
    ce28:	4b29      	ldr	r3, [pc, #164]	; (ced0 <spi_rw+0x16c>)
    ce2a:	4798      	blx	r3
    ce2c:	0003      	movs	r3, r0
    ce2e:	001a      	movs	r2, r3
    ce30:	2301      	movs	r3, #1
    ce32:	4053      	eors	r3, r2
    ce34:	b2db      	uxtb	r3, r3
    ce36:	2b00      	cmp	r3, #0
    ce38:	d1f4      	bne.n	ce24 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    ce3a:	46c0      	nop			; (mov r8, r8)
    ce3c:	2310      	movs	r3, #16
    ce3e:	18fa      	adds	r2, r7, r3
    ce40:	4b1f      	ldr	r3, [pc, #124]	; (cec0 <spi_rw+0x15c>)
    ce42:	0011      	movs	r1, r2
    ce44:	0018      	movs	r0, r3
    ce46:	4b23      	ldr	r3, [pc, #140]	; (ced4 <spi_rw+0x170>)
    ce48:	4798      	blx	r3
    ce4a:	1e03      	subs	r3, r0, #0
    ce4c:	d1f6      	bne.n	ce3c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
    ce4e:	2310      	movs	r3, #16
    ce50:	18fb      	adds	r3, r7, r3
    ce52:	881b      	ldrh	r3, [r3, #0]
    ce54:	b2da      	uxtb	r2, r3
    ce56:	68bb      	ldr	r3, [r7, #8]
    ce58:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    ce5a:	1dbb      	adds	r3, r7, #6
    ce5c:	881a      	ldrh	r2, [r3, #0]
    ce5e:	1dbb      	adds	r3, r7, #6
    ce60:	3a01      	subs	r2, #1
    ce62:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    ce64:	2316      	movs	r3, #22
    ce66:	18fb      	adds	r3, r7, r3
    ce68:	781b      	ldrb	r3, [r3, #0]
    ce6a:	2b00      	cmp	r3, #0
    ce6c:	d102      	bne.n	ce74 <spi_rw+0x110>
			pu8Miso++;
    ce6e:	68bb      	ldr	r3, [r7, #8]
    ce70:	3301      	adds	r3, #1
    ce72:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    ce74:	2317      	movs	r3, #23
    ce76:	18fb      	adds	r3, r7, r3
    ce78:	781b      	ldrb	r3, [r3, #0]
    ce7a:	2b00      	cmp	r3, #0
    ce7c:	d102      	bne.n	ce84 <spi_rw+0x120>
			pu8Mosi++;
    ce7e:	68fb      	ldr	r3, [r7, #12]
    ce80:	3301      	adds	r3, #1
    ce82:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
    ce84:	1dbb      	adds	r3, r7, #6
    ce86:	881b      	ldrh	r3, [r3, #0]
    ce88:	2b00      	cmp	r3, #0
    ce8a:	d1ae      	bne.n	cdea <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
    ce8c:	46c0      	nop			; (mov r8, r8)
    ce8e:	4b0c      	ldr	r3, [pc, #48]	; (cec0 <spi_rw+0x15c>)
    ce90:	0018      	movs	r0, r3
    ce92:	4b11      	ldr	r3, [pc, #68]	; (ced8 <spi_rw+0x174>)
    ce94:	4798      	blx	r3
    ce96:	0003      	movs	r3, r0
    ce98:	001a      	movs	r2, r3
    ce9a:	2301      	movs	r3, #1
    ce9c:	4053      	eors	r3, r2
    ce9e:	b2db      	uxtb	r3, r3
    cea0:	2b00      	cmp	r3, #0
    cea2:	d1f4      	bne.n	ce8e <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
    cea4:	4905      	ldr	r1, [pc, #20]	; (cebc <spi_rw+0x158>)
    cea6:	4b06      	ldr	r3, [pc, #24]	; (cec0 <spi_rw+0x15c>)
    cea8:	2200      	movs	r2, #0
    ceaa:	0018      	movs	r0, r3
    ceac:	4b05      	ldr	r3, [pc, #20]	; (cec4 <spi_rw+0x160>)
    ceae:	4798      	blx	r3

	return M2M_SUCCESS;
    ceb0:	2300      	movs	r3, #0
}
    ceb2:	0018      	movs	r0, r3
    ceb4:	46bd      	mov	sp, r7
    ceb6:	b006      	add	sp, #24
    ceb8:	bd80      	pop	{r7, pc}
    ceba:	46c0      	nop			; (mov r8, r8)
    cebc:	20005898 	.word	0x20005898
    cec0:	2000589c 	.word	0x2000589c
    cec4:	00014611 	.word	0x00014611
    cec8:	0000cc45 	.word	0x0000cc45
    cecc:	0000cc95 	.word	0x0000cc95
    ced0:	0000cc6d 	.word	0x0000cc6d
    ced4:	0000ccdd 	.word	0x0000ccdd
    ced8:	0000cc1d 	.word	0x0000cc1d

0000cedc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    cedc:	b580      	push	{r7, lr}
    cede:	b092      	sub	sp, #72	; 0x48
    cee0:	af00      	add	r7, sp, #0
    cee2:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    cee4:	2347      	movs	r3, #71	; 0x47
    cee6:	18fb      	adds	r3, r7, r3
    cee8:	2200      	movs	r2, #0
    ceea:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    ceec:	2308      	movs	r3, #8
    ceee:	18fb      	adds	r3, r7, r3
    cef0:	0018      	movs	r0, r3
    cef2:	4b26      	ldr	r3, [pc, #152]	; (cf8c <nm_bus_init+0xb0>)
    cef4:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    cef6:	2308      	movs	r3, #8
    cef8:	18fb      	adds	r3, r7, r3
    cefa:	220e      	movs	r2, #14
    cefc:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    cefe:	2308      	movs	r3, #8
    cf00:	18fa      	adds	r2, r7, r3
    cf02:	4b23      	ldr	r3, [pc, #140]	; (cf90 <nm_bus_init+0xb4>)
    cf04:	0011      	movs	r1, r2
    cf06:	0018      	movs	r0, r3
    cf08:	4b22      	ldr	r3, [pc, #136]	; (cf94 <nm_bus_init+0xb8>)
    cf0a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    cf0c:	230c      	movs	r3, #12
    cf0e:	18fb      	adds	r3, r7, r3
    cf10:	0018      	movs	r0, r3
    cf12:	4b21      	ldr	r3, [pc, #132]	; (cf98 <nm_bus_init+0xbc>)
    cf14:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    cf16:	230c      	movs	r3, #12
    cf18:	18fb      	adds	r3, r7, r3
    cf1a:	22c0      	movs	r2, #192	; 0xc0
    cf1c:	0392      	lsls	r2, r2, #14
    cf1e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    cf20:	230c      	movs	r3, #12
    cf22:	18fb      	adds	r3, r7, r3
    cf24:	4a1d      	ldr	r2, [pc, #116]	; (cf9c <nm_bus_init+0xc0>)
    cf26:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    cf28:	230c      	movs	r3, #12
    cf2a:	18fb      	adds	r3, r7, r3
    cf2c:	4a1c      	ldr	r2, [pc, #112]	; (cfa0 <nm_bus_init+0xc4>)
    cf2e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    cf30:	230c      	movs	r3, #12
    cf32:	18fb      	adds	r3, r7, r3
    cf34:	2201      	movs	r2, #1
    cf36:	4252      	negs	r2, r2
    cf38:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    cf3a:	230c      	movs	r3, #12
    cf3c:	18fb      	adds	r3, r7, r3
    cf3e:	4a19      	ldr	r2, [pc, #100]	; (cfa4 <nm_bus_init+0xc8>)
    cf40:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    cf42:	230c      	movs	r3, #12
    cf44:	18fb      	adds	r3, r7, r3
    cf46:	2200      	movs	r2, #0
    cf48:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    cf4a:	230c      	movs	r3, #12
    cf4c:	18fb      	adds	r3, r7, r3
    cf4e:	4a16      	ldr	r2, [pc, #88]	; (cfa8 <nm_bus_init+0xcc>)
    cf50:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    cf52:	230c      	movs	r3, #12
    cf54:	18fa      	adds	r2, r7, r3
    cf56:	4915      	ldr	r1, [pc, #84]	; (cfac <nm_bus_init+0xd0>)
    cf58:	4b15      	ldr	r3, [pc, #84]	; (cfb0 <nm_bus_init+0xd4>)
    cf5a:	0018      	movs	r0, r3
    cf5c:	4b15      	ldr	r3, [pc, #84]	; (cfb4 <nm_bus_init+0xd8>)
    cf5e:	4798      	blx	r3
    cf60:	1e03      	subs	r3, r0, #0
    cf62:	d002      	beq.n	cf6a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    cf64:	2306      	movs	r3, #6
    cf66:	425b      	negs	r3, r3
    cf68:	e00c      	b.n	cf84 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    cf6a:	4b11      	ldr	r3, [pc, #68]	; (cfb0 <nm_bus_init+0xd4>)
    cf6c:	0018      	movs	r0, r3
    cf6e:	4b12      	ldr	r3, [pc, #72]	; (cfb8 <nm_bus_init+0xdc>)
    cf70:	4798      	blx	r3

	nm_bsp_reset();
    cf72:	4b12      	ldr	r3, [pc, #72]	; (cfbc <nm_bus_init+0xe0>)
    cf74:	4798      	blx	r3
	nm_bsp_sleep(1);
    cf76:	2001      	movs	r0, #1
    cf78:	4b11      	ldr	r3, [pc, #68]	; (cfc0 <nm_bus_init+0xe4>)
    cf7a:	4798      	blx	r3
#endif
	return result;
    cf7c:	2347      	movs	r3, #71	; 0x47
    cf7e:	18fb      	adds	r3, r7, r3
    cf80:	781b      	ldrb	r3, [r3, #0]
    cf82:	b25b      	sxtb	r3, r3
}
    cf84:	0018      	movs	r0, r3
    cf86:	46bd      	mov	sp, r7
    cf88:	b012      	add	sp, #72	; 0x48
    cf8a:	bd80      	pop	{r7, pc}
    cf8c:	0000cae9 	.word	0x0000cae9
    cf90:	20005898 	.word	0x20005898
    cf94:	0000cb0d 	.word	0x0000cb0d
    cf98:	0000ca65 	.word	0x0000ca65
    cf9c:	000c0002 	.word	0x000c0002
    cfa0:	000d0002 	.word	0x000d0002
    cfa4:	000f0002 	.word	0x000f0002
    cfa8:	00124f80 	.word	0x00124f80
    cfac:	42001000 	.word	0x42001000
    cfb0:	2000589c 	.word	0x2000589c
    cfb4:	0001434d 	.word	0x0001434d
    cfb8:	0000cb71 	.word	0x0000cb71
    cfbc:	0000c7e1 	.word	0x0000c7e1
    cfc0:	0000c821 	.word	0x0000c821

0000cfc4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    cfc4:	b590      	push	{r4, r7, lr}
    cfc6:	b085      	sub	sp, #20
    cfc8:	af00      	add	r7, sp, #0
    cfca:	0002      	movs	r2, r0
    cfcc:	6039      	str	r1, [r7, #0]
    cfce:	1dfb      	adds	r3, r7, #7
    cfd0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    cfd2:	230f      	movs	r3, #15
    cfd4:	18fb      	adds	r3, r7, r3
    cfd6:	2200      	movs	r2, #0
    cfd8:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    cfda:	1dfb      	adds	r3, r7, #7
    cfdc:	781b      	ldrb	r3, [r3, #0]
    cfde:	2b03      	cmp	r3, #3
    cfe0:	d10f      	bne.n	d002 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    cfe2:	683b      	ldr	r3, [r7, #0]
    cfe4:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    cfe6:	68bb      	ldr	r3, [r7, #8]
    cfe8:	6818      	ldr	r0, [r3, #0]
    cfea:	68bb      	ldr	r3, [r7, #8]
    cfec:	6859      	ldr	r1, [r3, #4]
    cfee:	68bb      	ldr	r3, [r7, #8]
    cff0:	891b      	ldrh	r3, [r3, #8]
    cff2:	220f      	movs	r2, #15
    cff4:	18bc      	adds	r4, r7, r2
    cff6:	001a      	movs	r2, r3
    cff8:	4b10      	ldr	r3, [pc, #64]	; (d03c <nm_bus_ioctl+0x78>)
    cffa:	4798      	blx	r3
    cffc:	0003      	movs	r3, r0
    cffe:	7023      	strb	r3, [r4, #0]
		}
		break;
    d000:	e013      	b.n	d02a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
    d002:	230f      	movs	r3, #15
    d004:	18fb      	adds	r3, r7, r3
    d006:	22ff      	movs	r2, #255	; 0xff
    d008:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    d00a:	2383      	movs	r3, #131	; 0x83
    d00c:	005a      	lsls	r2, r3, #1
    d00e:	490c      	ldr	r1, [pc, #48]	; (d040 <nm_bus_ioctl+0x7c>)
    d010:	4b0c      	ldr	r3, [pc, #48]	; (d044 <nm_bus_ioctl+0x80>)
    d012:	0018      	movs	r0, r3
    d014:	4b0c      	ldr	r3, [pc, #48]	; (d048 <nm_bus_ioctl+0x84>)
    d016:	4798      	blx	r3
    d018:	4b0c      	ldr	r3, [pc, #48]	; (d04c <nm_bus_ioctl+0x88>)
    d01a:	0018      	movs	r0, r3
    d01c:	4b0a      	ldr	r3, [pc, #40]	; (d048 <nm_bus_ioctl+0x84>)
    d01e:	4798      	blx	r3
    d020:	4b0b      	ldr	r3, [pc, #44]	; (d050 <nm_bus_ioctl+0x8c>)
    d022:	0018      	movs	r0, r3
    d024:	4b08      	ldr	r3, [pc, #32]	; (d048 <nm_bus_ioctl+0x84>)
    d026:	4798      	blx	r3
			break;
    d028:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    d02a:	230f      	movs	r3, #15
    d02c:	18fb      	adds	r3, r7, r3
    d02e:	781b      	ldrb	r3, [r3, #0]
    d030:	b25b      	sxtb	r3, r3
}
    d032:	0018      	movs	r0, r3
    d034:	46bd      	mov	sp, r7
    d036:	b005      	add	sp, #20
    d038:	bd90      	pop	{r4, r7, pc}
    d03a:	46c0      	nop			; (mov r8, r8)
    d03c:	0000cd65 	.word	0x0000cd65
    d040:	00025308 	.word	0x00025308
    d044:	000252dc 	.word	0x000252dc
    d048:	0000a3cd 	.word	0x0000a3cd
    d04c:	000252f0 	.word	0x000252f0
    d050:	00025304 	.word	0x00025304

0000d054 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    d054:	b580      	push	{r7, lr}
    d056:	b082      	sub	sp, #8
    d058:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    d05a:	1dfb      	adds	r3, r7, #7
    d05c:	2200      	movs	r2, #0
    d05e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    d060:	1d3b      	adds	r3, r7, #4
    d062:	0018      	movs	r0, r3
    d064:	4b13      	ldr	r3, [pc, #76]	; (d0b4 <nm_bus_deinit+0x60>)
    d066:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    d068:	1d3b      	adds	r3, r7, #4
    d06a:	2200      	movs	r2, #0
    d06c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    d06e:	1d3b      	adds	r3, r7, #4
    d070:	2200      	movs	r2, #0
    d072:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
    d074:	4b10      	ldr	r3, [pc, #64]	; (d0b8 <nm_bus_deinit+0x64>)
    d076:	0018      	movs	r0, r3
    d078:	4b10      	ldr	r3, [pc, #64]	; (d0bc <nm_bus_deinit+0x68>)
    d07a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    d07c:	1d3b      	adds	r3, r7, #4
    d07e:	0019      	movs	r1, r3
    d080:	200c      	movs	r0, #12
    d082:	4b0f      	ldr	r3, [pc, #60]	; (d0c0 <nm_bus_deinit+0x6c>)
    d084:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    d086:	1d3b      	adds	r3, r7, #4
    d088:	0019      	movs	r1, r3
    d08a:	200f      	movs	r0, #15
    d08c:	4b0c      	ldr	r3, [pc, #48]	; (d0c0 <nm_bus_deinit+0x6c>)
    d08e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    d090:	1d3b      	adds	r3, r7, #4
    d092:	0019      	movs	r1, r3
    d094:	200d      	movs	r0, #13
    d096:	4b0a      	ldr	r3, [pc, #40]	; (d0c0 <nm_bus_deinit+0x6c>)
    d098:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    d09a:	1d3b      	adds	r3, r7, #4
    d09c:	0019      	movs	r1, r3
    d09e:	200e      	movs	r0, #14
    d0a0:	4b07      	ldr	r3, [pc, #28]	; (d0c0 <nm_bus_deinit+0x6c>)
    d0a2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
    d0a4:	1dfb      	adds	r3, r7, #7
    d0a6:	781b      	ldrb	r3, [r3, #0]
    d0a8:	b25b      	sxtb	r3, r3
}
    d0aa:	0018      	movs	r0, r3
    d0ac:	46bd      	mov	sp, r7
    d0ae:	b002      	add	sp, #8
    d0b0:	bd80      	pop	{r7, pc}
    d0b2:	46c0      	nop			; (mov r8, r8)
    d0b4:	0000c9cd 	.word	0x0000c9cd
    d0b8:	2000589c 	.word	0x2000589c
    d0bc:	0000cbc1 	.word	0x0000cbc1
    d0c0:	00012ecd 	.word	0x00012ecd

0000d0c4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    d0c4:	b580      	push	{r7, lr}
    d0c6:	b084      	sub	sp, #16
    d0c8:	af00      	add	r7, sp, #0
    d0ca:	60f8      	str	r0, [r7, #12]
    d0cc:	60b9      	str	r1, [r7, #8]
    d0ce:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    d0d0:	687b      	ldr	r3, [r7, #4]
    d0d2:	2b00      	cmp	r3, #0
    d0d4:	d010      	beq.n	d0f8 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    d0d6:	68bb      	ldr	r3, [r7, #8]
    d0d8:	781a      	ldrb	r2, [r3, #0]
    d0da:	68fb      	ldr	r3, [r7, #12]
    d0dc:	701a      	strb	r2, [r3, #0]
		pDst++;
    d0de:	68fb      	ldr	r3, [r7, #12]
    d0e0:	3301      	adds	r3, #1
    d0e2:	60fb      	str	r3, [r7, #12]
		pSrc++;
    d0e4:	68bb      	ldr	r3, [r7, #8]
    d0e6:	3301      	adds	r3, #1
    d0e8:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    d0ea:	687b      	ldr	r3, [r7, #4]
    d0ec:	3b01      	subs	r3, #1
    d0ee:	607b      	str	r3, [r7, #4]
    d0f0:	687b      	ldr	r3, [r7, #4]
    d0f2:	2b00      	cmp	r3, #0
    d0f4:	d1ef      	bne.n	d0d6 <m2m_memcpy+0x12>
    d0f6:	e000      	b.n	d0fa <m2m_memcpy+0x36>
	if(sz == 0) return;
    d0f8:	46c0      	nop			; (mov r8, r8)
}
    d0fa:	46bd      	mov	sp, r7
    d0fc:	b004      	add	sp, #16
    d0fe:	bd80      	pop	{r7, pc}

0000d100 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    d100:	b580      	push	{r7, lr}
    d102:	b084      	sub	sp, #16
    d104:	af00      	add	r7, sp, #0
    d106:	60f8      	str	r0, [r7, #12]
    d108:	607a      	str	r2, [r7, #4]
    d10a:	230b      	movs	r3, #11
    d10c:	18fb      	adds	r3, r7, r3
    d10e:	1c0a      	adds	r2, r1, #0
    d110:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    d112:	687b      	ldr	r3, [r7, #4]
    d114:	2b00      	cmp	r3, #0
    d116:	d00e      	beq.n	d136 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    d118:	68fb      	ldr	r3, [r7, #12]
    d11a:	220b      	movs	r2, #11
    d11c:	18ba      	adds	r2, r7, r2
    d11e:	7812      	ldrb	r2, [r2, #0]
    d120:	701a      	strb	r2, [r3, #0]
		pBuf++;
    d122:	68fb      	ldr	r3, [r7, #12]
    d124:	3301      	adds	r3, #1
    d126:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    d128:	687b      	ldr	r3, [r7, #4]
    d12a:	3b01      	subs	r3, #1
    d12c:	607b      	str	r3, [r7, #4]
    d12e:	687b      	ldr	r3, [r7, #4]
    d130:	2b00      	cmp	r3, #0
    d132:	d1f1      	bne.n	d118 <m2m_memset+0x18>
    d134:	e000      	b.n	d138 <m2m_memset+0x38>
	if(sz == 0) return;
    d136:	46c0      	nop			; (mov r8, r8)
}
    d138:	46bd      	mov	sp, r7
    d13a:	b004      	add	sp, #16
    d13c:	bd80      	pop	{r7, pc}

0000d13e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    d13e:	b580      	push	{r7, lr}
    d140:	b084      	sub	sp, #16
    d142:	af00      	add	r7, sp, #0
    d144:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    d146:	230e      	movs	r3, #14
    d148:	18fb      	adds	r3, r7, r3
    d14a:	2200      	movs	r2, #0
    d14c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    d14e:	e009      	b.n	d164 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    d150:	230e      	movs	r3, #14
    d152:	18fb      	adds	r3, r7, r3
    d154:	881a      	ldrh	r2, [r3, #0]
    d156:	230e      	movs	r3, #14
    d158:	18fb      	adds	r3, r7, r3
    d15a:	3201      	adds	r2, #1
    d15c:	801a      	strh	r2, [r3, #0]
		pcStr++;
    d15e:	687b      	ldr	r3, [r7, #4]
    d160:	3301      	adds	r3, #1
    d162:	607b      	str	r3, [r7, #4]
	while(*pcStr)
    d164:	687b      	ldr	r3, [r7, #4]
    d166:	781b      	ldrb	r3, [r3, #0]
    d168:	2b00      	cmp	r3, #0
    d16a:	d1f1      	bne.n	d150 <m2m_strlen+0x12>
	}
	return u16StrLen;
    d16c:	230e      	movs	r3, #14
    d16e:	18fb      	adds	r3, r7, r3
    d170:	881b      	ldrh	r3, [r3, #0]
}
    d172:	0018      	movs	r0, r3
    d174:	46bd      	mov	sp, r7
    d176:	b004      	add	sp, #16
    d178:	bd80      	pop	{r7, pc}
	...

0000d17c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
    d17c:	b580      	push	{r7, lr}
    d17e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
    d180:	4b04      	ldr	r3, [pc, #16]	; (d194 <isr+0x18>)
    d182:	78db      	ldrb	r3, [r3, #3]
    d184:	b2db      	uxtb	r3, r3
    d186:	3301      	adds	r3, #1
    d188:	b2da      	uxtb	r2, r3
    d18a:	4b02      	ldr	r3, [pc, #8]	; (d194 <isr+0x18>)
    d18c:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    d18e:	46c0      	nop			; (mov r8, r8)
    d190:	46bd      	mov	sp, r7
    d192:	bd80      	pop	{r7, pc}
    d194:	200058d8 	.word	0x200058d8

0000d198 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    d198:	b590      	push	{r4, r7, lr}
    d19a:	b083      	sub	sp, #12
    d19c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    d19e:	1dfb      	adds	r3, r7, #7
    d1a0:	2200      	movs	r2, #0
    d1a2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
    d1a4:	4b14      	ldr	r3, [pc, #80]	; (d1f8 <hif_set_rx_done+0x60>)
    d1a6:	2200      	movs	r2, #0
    d1a8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    d1aa:	2001      	movs	r0, #1
    d1ac:	4b13      	ldr	r3, [pc, #76]	; (d1fc <hif_set_rx_done+0x64>)
    d1ae:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    d1b0:	1dfc      	adds	r4, r7, #7
    d1b2:	003b      	movs	r3, r7
    d1b4:	4a12      	ldr	r2, [pc, #72]	; (d200 <hif_set_rx_done+0x68>)
    d1b6:	0019      	movs	r1, r3
    d1b8:	0010      	movs	r0, r2
    d1ba:	4b12      	ldr	r3, [pc, #72]	; (d204 <hif_set_rx_done+0x6c>)
    d1bc:	4798      	blx	r3
    d1be:	0003      	movs	r3, r0
    d1c0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    d1c2:	1dfb      	adds	r3, r7, #7
    d1c4:	781b      	ldrb	r3, [r3, #0]
    d1c6:	b25b      	sxtb	r3, r3
    d1c8:	2b00      	cmp	r3, #0
    d1ca:	d10d      	bne.n	d1e8 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
    d1cc:	683b      	ldr	r3, [r7, #0]
    d1ce:	2202      	movs	r2, #2
    d1d0:	4313      	orrs	r3, r2
    d1d2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    d1d4:	683b      	ldr	r3, [r7, #0]
    d1d6:	1dfc      	adds	r4, r7, #7
    d1d8:	4a09      	ldr	r2, [pc, #36]	; (d200 <hif_set_rx_done+0x68>)
    d1da:	0019      	movs	r1, r3
    d1dc:	0010      	movs	r0, r2
    d1de:	4b0a      	ldr	r3, [pc, #40]	; (d208 <hif_set_rx_done+0x70>)
    d1e0:	4798      	blx	r3
    d1e2:	0003      	movs	r3, r0
    d1e4:	7023      	strb	r3, [r4, #0]
    d1e6:	e000      	b.n	d1ea <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
    d1e8:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    d1ea:	1dfb      	adds	r3, r7, #7
    d1ec:	781b      	ldrb	r3, [r3, #0]
    d1ee:	b25b      	sxtb	r3, r3

}
    d1f0:	0018      	movs	r0, r3
    d1f2:	46bd      	mov	sp, r7
    d1f4:	b003      	add	sp, #12
    d1f6:	bd90      	pop	{r4, r7, pc}
    d1f8:	200058d8 	.word	0x200058d8
    d1fc:	0000c8b5 	.word	0x0000c8b5
    d200:	00001070 	.word	0x00001070
    d204:	0000f191 	.word	0x0000f191
    d208:	0000f1b5 	.word	0x0000f1b5

0000d20c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    d20c:	b580      	push	{r7, lr}
    d20e:	b082      	sub	sp, #8
    d210:	af00      	add	r7, sp, #0
    d212:	603a      	str	r2, [r7, #0]
    d214:	1dfb      	adds	r3, r7, #7
    d216:	1c02      	adds	r2, r0, #0
    d218:	701a      	strb	r2, [r3, #0]
    d21a:	1d3b      	adds	r3, r7, #4
    d21c:	1c0a      	adds	r2, r1, #0
    d21e:	801a      	strh	r2, [r3, #0]


}
    d220:	46c0      	nop			; (mov r8, r8)
    d222:	46bd      	mov	sp, r7
    d224:	b002      	add	sp, #8
    d226:	bd80      	pop	{r7, pc}

0000d228 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    d228:	b590      	push	{r4, r7, lr}
    d22a:	b083      	sub	sp, #12
    d22c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    d22e:	1dfb      	adds	r3, r7, #7
    d230:	2200      	movs	r2, #0
    d232:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
    d234:	4b16      	ldr	r3, [pc, #88]	; (d290 <hif_chip_wake+0x68>)
    d236:	789b      	ldrb	r3, [r3, #2]
    d238:	b2db      	uxtb	r3, r3
    d23a:	2b00      	cmp	r3, #0
    d23c:	d003      	beq.n	d246 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    d23e:	1dfb      	adds	r3, r7, #7
    d240:	781b      	ldrb	r3, [r3, #0]
    d242:	b25b      	sxtb	r3, r3
    d244:	e01f      	b.n	d286 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    d246:	4b12      	ldr	r3, [pc, #72]	; (d290 <hif_chip_wake+0x68>)
    d248:	785b      	ldrb	r3, [r3, #1]
    d24a:	b2db      	uxtb	r3, r3
    d24c:	2b00      	cmp	r3, #0
    d24e:	d10e      	bne.n	d26e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    d250:	4b0f      	ldr	r3, [pc, #60]	; (d290 <hif_chip_wake+0x68>)
    d252:	781b      	ldrb	r3, [r3, #0]
    d254:	b2db      	uxtb	r3, r3
    d256:	2b00      	cmp	r3, #0
    d258:	d009      	beq.n	d26e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
    d25a:	1dfc      	adds	r4, r7, #7
    d25c:	4b0d      	ldr	r3, [pc, #52]	; (d294 <hif_chip_wake+0x6c>)
    d25e:	4798      	blx	r3
    d260:	0003      	movs	r3, r0
    d262:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    d264:	1dfb      	adds	r3, r7, #7
    d266:	781b      	ldrb	r3, [r3, #0]
    d268:	b25b      	sxtb	r3, r3
    d26a:	2b00      	cmp	r3, #0
    d26c:	d107      	bne.n	d27e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    d26e:	4b08      	ldr	r3, [pc, #32]	; (d290 <hif_chip_wake+0x68>)
    d270:	785b      	ldrb	r3, [r3, #1]
    d272:	b2db      	uxtb	r3, r3
    d274:	3301      	adds	r3, #1
    d276:	b2da      	uxtb	r2, r3
    d278:	4b05      	ldr	r3, [pc, #20]	; (d290 <hif_chip_wake+0x68>)
    d27a:	705a      	strb	r2, [r3, #1]
    d27c:	e000      	b.n	d280 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
    d27e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
    d280:	1dfb      	adds	r3, r7, #7
    d282:	781b      	ldrb	r3, [r3, #0]
    d284:	b25b      	sxtb	r3, r3
}
    d286:	0018      	movs	r0, r3
    d288:	46bd      	mov	sp, r7
    d28a:	b003      	add	sp, #12
    d28c:	bd90      	pop	{r4, r7, pc}
    d28e:	46c0      	nop			; (mov r8, r8)
    d290:	200058d8 	.word	0x200058d8
    d294:	0000ec61 	.word	0x0000ec61

0000d298 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
    d298:	b580      	push	{r7, lr}
    d29a:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
    d29c:	4b07      	ldr	r3, [pc, #28]	; (d2bc <hif_chip_sleep_sc+0x24>)
    d29e:	785b      	ldrb	r3, [r3, #1]
    d2a0:	b2db      	uxtb	r3, r3
    d2a2:	2b00      	cmp	r3, #0
    d2a4:	d006      	beq.n	d2b4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
    d2a6:	4b05      	ldr	r3, [pc, #20]	; (d2bc <hif_chip_sleep_sc+0x24>)
    d2a8:	785b      	ldrb	r3, [r3, #1]
    d2aa:	b2db      	uxtb	r3, r3
    d2ac:	3b01      	subs	r3, #1
    d2ae:	b2da      	uxtb	r2, r3
    d2b0:	4b02      	ldr	r3, [pc, #8]	; (d2bc <hif_chip_sleep_sc+0x24>)
    d2b2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
    d2b4:	2300      	movs	r3, #0
}
    d2b6:	0018      	movs	r0, r3
    d2b8:	46bd      	mov	sp, r7
    d2ba:	bd80      	pop	{r7, pc}
    d2bc:	200058d8 	.word	0x200058d8

0000d2c0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    d2c0:	b590      	push	{r4, r7, lr}
    d2c2:	b083      	sub	sp, #12
    d2c4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    d2c6:	1dfb      	adds	r3, r7, #7
    d2c8:	2200      	movs	r2, #0
    d2ca:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
    d2cc:	4b10      	ldr	r3, [pc, #64]	; (d310 <hif_chip_sleep+0x50>)
    d2ce:	785b      	ldrb	r3, [r3, #1]
    d2d0:	b2db      	uxtb	r3, r3
    d2d2:	2b00      	cmp	r3, #0
    d2d4:	d006      	beq.n	d2e4 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
    d2d6:	4b0e      	ldr	r3, [pc, #56]	; (d310 <hif_chip_sleep+0x50>)
    d2d8:	785b      	ldrb	r3, [r3, #1]
    d2da:	b2db      	uxtb	r3, r3
    d2dc:	3b01      	subs	r3, #1
    d2de:	b2da      	uxtb	r2, r3
    d2e0:	4b0b      	ldr	r3, [pc, #44]	; (d310 <hif_chip_sleep+0x50>)
    d2e2:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    d2e4:	4b0a      	ldr	r3, [pc, #40]	; (d310 <hif_chip_sleep+0x50>)
    d2e6:	785b      	ldrb	r3, [r3, #1]
    d2e8:	b2db      	uxtb	r3, r3
    d2ea:	2b00      	cmp	r3, #0
    d2ec:	d109      	bne.n	d302 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    d2ee:	4b08      	ldr	r3, [pc, #32]	; (d310 <hif_chip_sleep+0x50>)
    d2f0:	781b      	ldrb	r3, [r3, #0]
    d2f2:	b2db      	uxtb	r3, r3
    d2f4:	2b00      	cmp	r3, #0
    d2f6:	d004      	beq.n	d302 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
    d2f8:	1dfc      	adds	r4, r7, #7
    d2fa:	4b06      	ldr	r3, [pc, #24]	; (d314 <hif_chip_sleep+0x54>)
    d2fc:	4798      	blx	r3
    d2fe:	0003      	movs	r3, r0
    d300:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
    d302:	1dfb      	adds	r3, r7, #7
    d304:	781b      	ldrb	r3, [r3, #0]
    d306:	b25b      	sxtb	r3, r3
}
    d308:	0018      	movs	r0, r3
    d30a:	46bd      	mov	sp, r7
    d30c:	b003      	add	sp, #12
    d30e:	bd90      	pop	{r4, r7, pc}
    d310:	200058d8 	.word	0x200058d8
    d314:	0000eb89 	.word	0x0000eb89

0000d318 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    d318:	b580      	push	{r7, lr}
    d31a:	b082      	sub	sp, #8
    d31c:	af00      	add	r7, sp, #0
    d31e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    d320:	4b09      	ldr	r3, [pc, #36]	; (d348 <hif_init+0x30>)
    d322:	222c      	movs	r2, #44	; 0x2c
    d324:	2100      	movs	r1, #0
    d326:	0018      	movs	r0, r3
    d328:	4b08      	ldr	r3, [pc, #32]	; (d34c <hif_init+0x34>)
    d32a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    d32c:	4b08      	ldr	r3, [pc, #32]	; (d350 <hif_init+0x38>)
    d32e:	0018      	movs	r0, r3
    d330:	4b08      	ldr	r3, [pc, #32]	; (d354 <hif_init+0x3c>)
    d332:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    d334:	4b08      	ldr	r3, [pc, #32]	; (d358 <hif_init+0x40>)
    d336:	0019      	movs	r1, r3
    d338:	2003      	movs	r0, #3
    d33a:	4b08      	ldr	r3, [pc, #32]	; (d35c <hif_init+0x44>)
    d33c:	4798      	blx	r3
	return M2M_SUCCESS;
    d33e:	2300      	movs	r3, #0
}
    d340:	0018      	movs	r0, r3
    d342:	46bd      	mov	sp, r7
    d344:	b002      	add	sp, #8
    d346:	bd80      	pop	{r7, pc}
    d348:	200058d8 	.word	0x200058d8
    d34c:	0000d101 	.word	0x0000d101
    d350:	0000d17d 	.word	0x0000d17d
    d354:	0000c83d 	.word	0x0000c83d
    d358:	0000d20d 	.word	0x0000d20d
    d35c:	0000ddfd 	.word	0x0000ddfd

0000d360 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    d360:	b590      	push	{r4, r7, lr}
    d362:	b089      	sub	sp, #36	; 0x24
    d364:	af00      	add	r7, sp, #0
    d366:	0004      	movs	r4, r0
    d368:	0008      	movs	r0, r1
    d36a:	603a      	str	r2, [r7, #0]
    d36c:	0019      	movs	r1, r3
    d36e:	1dfb      	adds	r3, r7, #7
    d370:	1c22      	adds	r2, r4, #0
    d372:	701a      	strb	r2, [r3, #0]
    d374:	1dbb      	adds	r3, r7, #6
    d376:	1c02      	adds	r2, r0, #0
    d378:	701a      	strb	r2, [r3, #0]
    d37a:	1d3b      	adds	r3, r7, #4
    d37c:	1c0a      	adds	r2, r1, #0
    d37e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    d380:	231f      	movs	r3, #31
    d382:	18fb      	adds	r3, r7, r3
    d384:	22ff      	movs	r2, #255	; 0xff
    d386:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    d388:	1dbb      	adds	r3, r7, #6
    d38a:	781b      	ldrb	r3, [r3, #0]
    d38c:	227f      	movs	r2, #127	; 0x7f
    d38e:	4013      	ands	r3, r2
    d390:	b2da      	uxtb	r2, r3
    d392:	2318      	movs	r3, #24
    d394:	18fb      	adds	r3, r7, r3
    d396:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    d398:	2318      	movs	r3, #24
    d39a:	18fb      	adds	r3, r7, r3
    d39c:	1dfa      	adds	r2, r7, #7
    d39e:	7812      	ldrb	r2, [r2, #0]
    d3a0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    d3a2:	2318      	movs	r3, #24
    d3a4:	18fb      	adds	r3, r7, r3
    d3a6:	2208      	movs	r2, #8
    d3a8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    d3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d3ac:	2b00      	cmp	r3, #0
    d3ae:	d011      	beq.n	d3d4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    d3b0:	2318      	movs	r3, #24
    d3b2:	18fb      	adds	r3, r7, r3
    d3b4:	885b      	ldrh	r3, [r3, #2]
    d3b6:	b29a      	uxth	r2, r3
    d3b8:	2338      	movs	r3, #56	; 0x38
    d3ba:	18f9      	adds	r1, r7, r3
    d3bc:	2334      	movs	r3, #52	; 0x34
    d3be:	18fb      	adds	r3, r7, r3
    d3c0:	8809      	ldrh	r1, [r1, #0]
    d3c2:	881b      	ldrh	r3, [r3, #0]
    d3c4:	18cb      	adds	r3, r1, r3
    d3c6:	b29b      	uxth	r3, r3
    d3c8:	18d3      	adds	r3, r2, r3
    d3ca:	b29a      	uxth	r2, r3
    d3cc:	2318      	movs	r3, #24
    d3ce:	18fb      	adds	r3, r7, r3
    d3d0:	805a      	strh	r2, [r3, #2]
    d3d2:	e00a      	b.n	d3ea <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    d3d4:	2318      	movs	r3, #24
    d3d6:	18fb      	adds	r3, r7, r3
    d3d8:	885b      	ldrh	r3, [r3, #2]
    d3da:	b29a      	uxth	r2, r3
    d3dc:	1d3b      	adds	r3, r7, #4
    d3de:	881b      	ldrh	r3, [r3, #0]
    d3e0:	18d3      	adds	r3, r2, r3
    d3e2:	b29a      	uxth	r2, r3
    d3e4:	2318      	movs	r3, #24
    d3e6:	18fb      	adds	r3, r7, r3
    d3e8:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    d3ea:	231f      	movs	r3, #31
    d3ec:	18fc      	adds	r4, r7, r3
    d3ee:	4bb2      	ldr	r3, [pc, #712]	; (d6b8 <hif_send+0x358>)
    d3f0:	4798      	blx	r3
    d3f2:	0003      	movs	r3, r0
    d3f4:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    d3f6:	231f      	movs	r3, #31
    d3f8:	18fb      	adds	r3, r7, r3
    d3fa:	781b      	ldrb	r3, [r3, #0]
    d3fc:	b25b      	sxtb	r3, r3
    d3fe:	2b00      	cmp	r3, #0
    d400:	d000      	beq.n	d404 <hif_send+0xa4>
    d402:	e129      	b.n	d658 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
    d404:	2300      	movs	r3, #0
    d406:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    d408:	230e      	movs	r3, #14
    d40a:	18fb      	adds	r3, r7, r3
    d40c:	2200      	movs	r2, #0
    d40e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    d410:	2300      	movs	r3, #0
    d412:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    d414:	1dfb      	adds	r3, r7, #7
    d416:	781a      	ldrb	r2, [r3, #0]
    d418:	697b      	ldr	r3, [r7, #20]
    d41a:	4313      	orrs	r3, r2
    d41c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    d41e:	1dbb      	adds	r3, r7, #6
    d420:	781b      	ldrb	r3, [r3, #0]
    d422:	021a      	lsls	r2, r3, #8
    d424:	697b      	ldr	r3, [r7, #20]
    d426:	4313      	orrs	r3, r2
    d428:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    d42a:	2318      	movs	r3, #24
    d42c:	18fb      	adds	r3, r7, r3
    d42e:	885b      	ldrh	r3, [r3, #2]
    d430:	b29b      	uxth	r3, r3
    d432:	041a      	lsls	r2, r3, #16
    d434:	697b      	ldr	r3, [r7, #20]
    d436:	4313      	orrs	r3, r2
    d438:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    d43a:	697b      	ldr	r3, [r7, #20]
    d43c:	221f      	movs	r2, #31
    d43e:	18bc      	adds	r4, r7, r2
    d440:	4a9e      	ldr	r2, [pc, #632]	; (d6bc <hif_send+0x35c>)
    d442:	0019      	movs	r1, r3
    d444:	0010      	movs	r0, r2
    d446:	4b9e      	ldr	r3, [pc, #632]	; (d6c0 <hif_send+0x360>)
    d448:	4798      	blx	r3
    d44a:	0003      	movs	r3, r0
    d44c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    d44e:	231f      	movs	r3, #31
    d450:	18fb      	adds	r3, r7, r3
    d452:	781b      	ldrb	r3, [r3, #0]
    d454:	b25b      	sxtb	r3, r3
    d456:	2b00      	cmp	r3, #0
    d458:	d000      	beq.n	d45c <hif_send+0xfc>
    d45a:	e119      	b.n	d690 <hif_send+0x330>

		reg = 0UL;
    d45c:	2300      	movs	r3, #0
    d45e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    d460:	697b      	ldr	r3, [r7, #20]
    d462:	2202      	movs	r2, #2
    d464:	4313      	orrs	r3, r2
    d466:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    d468:	697b      	ldr	r3, [r7, #20]
    d46a:	221f      	movs	r2, #31
    d46c:	18bc      	adds	r4, r7, r2
    d46e:	4a95      	ldr	r2, [pc, #596]	; (d6c4 <hif_send+0x364>)
    d470:	0019      	movs	r1, r3
    d472:	0010      	movs	r0, r2
    d474:	4b92      	ldr	r3, [pc, #584]	; (d6c0 <hif_send+0x360>)
    d476:	4798      	blx	r3
    d478:	0003      	movs	r3, r0
    d47a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    d47c:	231f      	movs	r3, #31
    d47e:	18fb      	adds	r3, r7, r3
    d480:	781b      	ldrb	r3, [r3, #0]
    d482:	b25b      	sxtb	r3, r3
    d484:	2b00      	cmp	r3, #0
    d486:	d000      	beq.n	d48a <hif_send+0x12a>
    d488:	e104      	b.n	d694 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    d48a:	2300      	movs	r3, #0
    d48c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    d48e:	230e      	movs	r3, #14
    d490:	18fb      	adds	r3, r7, r3
    d492:	2200      	movs	r2, #0
    d494:	801a      	strh	r2, [r3, #0]
    d496:	e050      	b.n	d53a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    d498:	231f      	movs	r3, #31
    d49a:	18fc      	adds	r4, r7, r3
    d49c:	2314      	movs	r3, #20
    d49e:	18fb      	adds	r3, r7, r3
    d4a0:	4a88      	ldr	r2, [pc, #544]	; (d6c4 <hif_send+0x364>)
    d4a2:	0019      	movs	r1, r3
    d4a4:	0010      	movs	r0, r2
    d4a6:	4b88      	ldr	r3, [pc, #544]	; (d6c8 <hif_send+0x368>)
    d4a8:	4798      	blx	r3
    d4aa:	0003      	movs	r3, r0
    d4ac:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    d4ae:	231f      	movs	r3, #31
    d4b0:	18fb      	adds	r3, r7, r3
    d4b2:	781b      	ldrb	r3, [r3, #0]
    d4b4:	b25b      	sxtb	r3, r3
    d4b6:	2b00      	cmp	r3, #0
    d4b8:	d147      	bne.n	d54a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    d4ba:	230e      	movs	r3, #14
    d4bc:	18fb      	adds	r3, r7, r3
    d4be:	881b      	ldrh	r3, [r3, #0]
    d4c0:	b29a      	uxth	r2, r3
    d4c2:	23f4      	movs	r3, #244	; 0xf4
    d4c4:	33ff      	adds	r3, #255	; 0xff
    d4c6:	429a      	cmp	r2, r3
    d4c8:	d916      	bls.n	d4f8 <hif_send+0x198>
				if(cnt < 501) {
    d4ca:	230e      	movs	r3, #14
    d4cc:	18fb      	adds	r3, r7, r3
    d4ce:	881b      	ldrh	r3, [r3, #0]
    d4d0:	b29a      	uxth	r2, r3
    d4d2:	23fa      	movs	r3, #250	; 0xfa
    d4d4:	005b      	lsls	r3, r3, #1
    d4d6:	429a      	cmp	r2, r3
    d4d8:	d80b      	bhi.n	d4f2 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
    d4da:	4b7c      	ldr	r3, [pc, #496]	; (d6cc <hif_send+0x36c>)
    d4dc:	0018      	movs	r0, r3
    d4de:	4b7c      	ldr	r3, [pc, #496]	; (d6d0 <hif_send+0x370>)
    d4e0:	4798      	blx	r3
    d4e2:	4b7c      	ldr	r3, [pc, #496]	; (d6d4 <hif_send+0x374>)
    d4e4:	0018      	movs	r0, r3
    d4e6:	4b7a      	ldr	r3, [pc, #488]	; (d6d0 <hif_send+0x370>)
    d4e8:	4798      	blx	r3
    d4ea:	4b7b      	ldr	r3, [pc, #492]	; (d6d8 <hif_send+0x378>)
    d4ec:	0018      	movs	r0, r3
    d4ee:	4b78      	ldr	r3, [pc, #480]	; (d6d0 <hif_send+0x370>)
    d4f0:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    d4f2:	2001      	movs	r0, #1
    d4f4:	4b79      	ldr	r3, [pc, #484]	; (d6dc <hif_send+0x37c>)
    d4f6:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    d4f8:	697b      	ldr	r3, [r7, #20]
    d4fa:	2202      	movs	r2, #2
    d4fc:	4013      	ands	r3, r2
    d4fe:	d113      	bne.n	d528 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    d500:	231f      	movs	r3, #31
    d502:	18fc      	adds	r4, r7, r3
    d504:	2310      	movs	r3, #16
    d506:	18fb      	adds	r3, r7, r3
    d508:	4a75      	ldr	r2, [pc, #468]	; (d6e0 <hif_send+0x380>)
    d50a:	0019      	movs	r1, r3
    d50c:	0010      	movs	r0, r2
    d50e:	4b6e      	ldr	r3, [pc, #440]	; (d6c8 <hif_send+0x368>)
    d510:	4798      	blx	r3
    d512:	0003      	movs	r3, r0
    d514:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    d516:	231f      	movs	r3, #31
    d518:	18fb      	adds	r3, r7, r3
    d51a:	781b      	ldrb	r3, [r3, #0]
    d51c:	b25b      	sxtb	r3, r3
    d51e:	2b00      	cmp	r3, #0
    d520:	d015      	beq.n	d54e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    d522:	2300      	movs	r3, #0
    d524:	613b      	str	r3, [r7, #16]
					goto ERR1;
    d526:	e0bc      	b.n	d6a2 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
    d528:	230e      	movs	r3, #14
    d52a:	18fb      	adds	r3, r7, r3
    d52c:	881b      	ldrh	r3, [r3, #0]
    d52e:	b29b      	uxth	r3, r3
    d530:	3301      	adds	r3, #1
    d532:	b29a      	uxth	r2, r3
    d534:	230e      	movs	r3, #14
    d536:	18fb      	adds	r3, r7, r3
    d538:	801a      	strh	r2, [r3, #0]
    d53a:	230e      	movs	r3, #14
    d53c:	18fb      	adds	r3, r7, r3
    d53e:	881b      	ldrh	r3, [r3, #0]
    d540:	b29b      	uxth	r3, r3
    d542:	4a68      	ldr	r2, [pc, #416]	; (d6e4 <hif_send+0x384>)
    d544:	4293      	cmp	r3, r2
    d546:	d9a7      	bls.n	d498 <hif_send+0x138>
    d548:	e002      	b.n	d550 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
    d54a:	46c0      	nop			; (mov r8, r8)
    d54c:	e000      	b.n	d550 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
    d54e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    d550:	693b      	ldr	r3, [r7, #16]
    d552:	2b00      	cmp	r3, #0
    d554:	d100      	bne.n	d558 <hif_send+0x1f8>
    d556:	e074      	b.n	d642 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    d558:	693b      	ldr	r3, [r7, #16]
    d55a:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    d55c:	2318      	movs	r3, #24
    d55e:	18fb      	adds	r3, r7, r3
    d560:	885b      	ldrh	r3, [r3, #2]
    d562:	b29a      	uxth	r2, r3
    d564:	2318      	movs	r3, #24
    d566:	18fb      	adds	r3, r7, r3
    d568:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    d56a:	68bb      	ldr	r3, [r7, #8]
    d56c:	221f      	movs	r2, #31
    d56e:	18bc      	adds	r4, r7, r2
    d570:	2218      	movs	r2, #24
    d572:	18b9      	adds	r1, r7, r2
    d574:	2208      	movs	r2, #8
    d576:	0018      	movs	r0, r3
    d578:	4b5b      	ldr	r3, [pc, #364]	; (d6e8 <hif_send+0x388>)
    d57a:	4798      	blx	r3
    d57c:	0003      	movs	r3, r0
    d57e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    d580:	231f      	movs	r3, #31
    d582:	18fb      	adds	r3, r7, r3
    d584:	781b      	ldrb	r3, [r3, #0]
    d586:	b25b      	sxtb	r3, r3
    d588:	2b00      	cmp	r3, #0
    d58a:	d000      	beq.n	d58e <hif_send+0x22e>
    d58c:	e084      	b.n	d698 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    d58e:	68bb      	ldr	r3, [r7, #8]
    d590:	3308      	adds	r3, #8
    d592:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    d594:	683b      	ldr	r3, [r7, #0]
    d596:	2b00      	cmp	r3, #0
    d598:	d016      	beq.n	d5c8 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    d59a:	68b8      	ldr	r0, [r7, #8]
    d59c:	1d3b      	adds	r3, r7, #4
    d59e:	881a      	ldrh	r2, [r3, #0]
    d5a0:	231f      	movs	r3, #31
    d5a2:	18fc      	adds	r4, r7, r3
    d5a4:	683b      	ldr	r3, [r7, #0]
    d5a6:	0019      	movs	r1, r3
    d5a8:	4b4f      	ldr	r3, [pc, #316]	; (d6e8 <hif_send+0x388>)
    d5aa:	4798      	blx	r3
    d5ac:	0003      	movs	r3, r0
    d5ae:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    d5b0:	231f      	movs	r3, #31
    d5b2:	18fb      	adds	r3, r7, r3
    d5b4:	781b      	ldrb	r3, [r3, #0]
    d5b6:	b25b      	sxtb	r3, r3
    d5b8:	2b00      	cmp	r3, #0
    d5ba:	d000      	beq.n	d5be <hif_send+0x25e>
    d5bc:	e06e      	b.n	d69c <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
    d5be:	1d3b      	adds	r3, r7, #4
    d5c0:	881a      	ldrh	r2, [r3, #0]
    d5c2:	68bb      	ldr	r3, [r7, #8]
    d5c4:	18d3      	adds	r3, r2, r3
    d5c6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    d5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d5ca:	2b00      	cmp	r3, #0
    d5cc:	d021      	beq.n	d612 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    d5ce:	2338      	movs	r3, #56	; 0x38
    d5d0:	18fb      	adds	r3, r7, r3
    d5d2:	881a      	ldrh	r2, [r3, #0]
    d5d4:	1d3b      	adds	r3, r7, #4
    d5d6:	881b      	ldrh	r3, [r3, #0]
    d5d8:	1ad3      	subs	r3, r2, r3
    d5da:	001a      	movs	r2, r3
    d5dc:	68bb      	ldr	r3, [r7, #8]
    d5de:	18d3      	adds	r3, r2, r3
    d5e0:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    d5e2:	68b8      	ldr	r0, [r7, #8]
    d5e4:	2334      	movs	r3, #52	; 0x34
    d5e6:	18fb      	adds	r3, r7, r3
    d5e8:	881a      	ldrh	r2, [r3, #0]
    d5ea:	231f      	movs	r3, #31
    d5ec:	18fc      	adds	r4, r7, r3
    d5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d5f0:	0019      	movs	r1, r3
    d5f2:	4b3d      	ldr	r3, [pc, #244]	; (d6e8 <hif_send+0x388>)
    d5f4:	4798      	blx	r3
    d5f6:	0003      	movs	r3, r0
    d5f8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    d5fa:	231f      	movs	r3, #31
    d5fc:	18fb      	adds	r3, r7, r3
    d5fe:	781b      	ldrb	r3, [r3, #0]
    d600:	b25b      	sxtb	r3, r3
    d602:	2b00      	cmp	r3, #0
    d604:	d14c      	bne.n	d6a0 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
    d606:	2334      	movs	r3, #52	; 0x34
    d608:	18fb      	adds	r3, r7, r3
    d60a:	881a      	ldrh	r2, [r3, #0]
    d60c:	68bb      	ldr	r3, [r7, #8]
    d60e:	18d3      	adds	r3, r2, r3
    d610:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    d612:	693b      	ldr	r3, [r7, #16]
    d614:	009b      	lsls	r3, r3, #2
    d616:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    d618:	697b      	ldr	r3, [r7, #20]
    d61a:	2202      	movs	r2, #2
    d61c:	4313      	orrs	r3, r2
    d61e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    d620:	697b      	ldr	r3, [r7, #20]
    d622:	221f      	movs	r2, #31
    d624:	18bc      	adds	r4, r7, r2
    d626:	4a31      	ldr	r2, [pc, #196]	; (d6ec <hif_send+0x38c>)
    d628:	0019      	movs	r1, r3
    d62a:	0010      	movs	r0, r2
    d62c:	4b24      	ldr	r3, [pc, #144]	; (d6c0 <hif_send+0x360>)
    d62e:	4798      	blx	r3
    d630:	0003      	movs	r3, r0
    d632:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    d634:	231f      	movs	r3, #31
    d636:	18fb      	adds	r3, r7, r3
    d638:	781b      	ldrb	r3, [r3, #0]
    d63a:	b25b      	sxtb	r3, r3
    d63c:	2b00      	cmp	r3, #0
    d63e:	d01c      	beq.n	d67a <hif_send+0x31a>
    d640:	e02f      	b.n	d6a2 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
    d642:	231f      	movs	r3, #31
    d644:	18fc      	adds	r4, r7, r3
    d646:	4b2a      	ldr	r3, [pc, #168]	; (d6f0 <hif_send+0x390>)
    d648:	4798      	blx	r3
    d64a:	0003      	movs	r3, r0
    d64c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    d64e:	231f      	movs	r3, #31
    d650:	18fb      	adds	r3, r7, r3
    d652:	22fd      	movs	r2, #253	; 0xfd
    d654:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    d656:	e026      	b.n	d6a6 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    d658:	2398      	movs	r3, #152	; 0x98
    d65a:	33ff      	adds	r3, #255	; 0xff
    d65c:	001a      	movs	r2, r3
    d65e:	4925      	ldr	r1, [pc, #148]	; (d6f4 <hif_send+0x394>)
    d660:	4b25      	ldr	r3, [pc, #148]	; (d6f8 <hif_send+0x398>)
    d662:	0018      	movs	r0, r3
    d664:	4b1a      	ldr	r3, [pc, #104]	; (d6d0 <hif_send+0x370>)
    d666:	4798      	blx	r3
    d668:	4b24      	ldr	r3, [pc, #144]	; (d6fc <hif_send+0x39c>)
    d66a:	0018      	movs	r0, r3
    d66c:	4b18      	ldr	r3, [pc, #96]	; (d6d0 <hif_send+0x370>)
    d66e:	4798      	blx	r3
    d670:	4b19      	ldr	r3, [pc, #100]	; (d6d8 <hif_send+0x378>)
    d672:	0018      	movs	r0, r3
    d674:	4b16      	ldr	r3, [pc, #88]	; (d6d0 <hif_send+0x370>)
    d676:	4798      	blx	r3
		goto ERR2;
    d678:	e015      	b.n	d6a6 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    d67a:	231f      	movs	r3, #31
    d67c:	18fc      	adds	r4, r7, r3
    d67e:	4b1c      	ldr	r3, [pc, #112]	; (d6f0 <hif_send+0x390>)
    d680:	4798      	blx	r3
    d682:	0003      	movs	r3, r0
    d684:	7023      	strb	r3, [r4, #0]
	return ret;
    d686:	231f      	movs	r3, #31
    d688:	18fb      	adds	r3, r7, r3
    d68a:	781b      	ldrb	r3, [r3, #0]
    d68c:	b25b      	sxtb	r3, r3
    d68e:	e00e      	b.n	d6ae <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
    d690:	46c0      	nop			; (mov r8, r8)
    d692:	e006      	b.n	d6a2 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
    d694:	46c0      	nop			; (mov r8, r8)
    d696:	e004      	b.n	d6a2 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
    d698:	46c0      	nop			; (mov r8, r8)
    d69a:	e002      	b.n	d6a2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
    d69c:	46c0      	nop			; (mov r8, r8)
    d69e:	e000      	b.n	d6a2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
    d6a0:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    d6a2:	4b17      	ldr	r3, [pc, #92]	; (d700 <hif_send+0x3a0>)
    d6a4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    d6a6:	231f      	movs	r3, #31
    d6a8:	18fb      	adds	r3, r7, r3
    d6aa:	781b      	ldrb	r3, [r3, #0]
    d6ac:	b25b      	sxtb	r3, r3
}
    d6ae:	0018      	movs	r0, r3
    d6b0:	46bd      	mov	sp, r7
    d6b2:	b009      	add	sp, #36	; 0x24
    d6b4:	bd90      	pop	{r4, r7, pc}
    d6b6:	46c0      	nop			; (mov r8, r8)
    d6b8:	0000d229 	.word	0x0000d229
    d6bc:	0000108c 	.word	0x0000108c
    d6c0:	0000f1b5 	.word	0x0000f1b5
    d6c4:	00001078 	.word	0x00001078
    d6c8:	0000f191 	.word	0x0000f191
    d6cc:	00025318 	.word	0x00025318
    d6d0:	0000a3cd 	.word	0x0000a3cd
    d6d4:	00025324 	.word	0x00025324
    d6d8:	00025338 	.word	0x00025338
    d6dc:	0000c821 	.word	0x0000c821
    d6e0:	00150400 	.word	0x00150400
    d6e4:	000003e7 	.word	0x000003e7
    d6e8:	0000f2fd 	.word	0x0000f2fd
    d6ec:	0000106c 	.word	0x0000106c
    d6f0:	0000d2c1 	.word	0x0000d2c1
    d6f4:	00025640 	.word	0x00025640
    d6f8:	0002533c 	.word	0x0002533c
    d6fc:	00025350 	.word	0x00025350
    d700:	0000d299 	.word	0x0000d299

0000d704 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    d704:	b590      	push	{r4, r7, lr}
    d706:	b087      	sub	sp, #28
    d708:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    d70a:	230f      	movs	r3, #15
    d70c:	18fb      	adds	r3, r7, r3
    d70e:	2200      	movs	r2, #0
    d710:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    d712:	230f      	movs	r3, #15
    d714:	18fc      	adds	r4, r7, r3
    d716:	2308      	movs	r3, #8
    d718:	18fb      	adds	r3, r7, r3
    d71a:	4adc      	ldr	r2, [pc, #880]	; (da8c <hif_isr+0x388>)
    d71c:	0019      	movs	r1, r3
    d71e:	0010      	movs	r0, r2
    d720:	4bdb      	ldr	r3, [pc, #876]	; (da90 <hif_isr+0x38c>)
    d722:	4798      	blx	r3
    d724:	0003      	movs	r3, r0
    d726:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    d728:	230f      	movs	r3, #15
    d72a:	18fb      	adds	r3, r7, r3
    d72c:	781b      	ldrb	r3, [r3, #0]
    d72e:	b25b      	sxtb	r3, r3
    d730:	2b00      	cmp	r3, #0
    d732:	d000      	beq.n	d736 <hif_isr+0x32>
    d734:	e21e      	b.n	db74 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    d736:	68bb      	ldr	r3, [r7, #8]
    d738:	2201      	movs	r2, #1
    d73a:	4013      	ands	r3, r2
    d73c:	d100      	bne.n	d740 <hif_isr+0x3c>
    d73e:	e204      	b.n	db4a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    d740:	2000      	movs	r0, #0
    d742:	4bd4      	ldr	r3, [pc, #848]	; (da94 <hif_isr+0x390>)
    d744:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    d746:	68bb      	ldr	r3, [r7, #8]
    d748:	2201      	movs	r2, #1
    d74a:	4393      	bics	r3, r2
    d74c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    d74e:	68bb      	ldr	r3, [r7, #8]
    d750:	220f      	movs	r2, #15
    d752:	18bc      	adds	r4, r7, r2
    d754:	4acd      	ldr	r2, [pc, #820]	; (da8c <hif_isr+0x388>)
    d756:	0019      	movs	r1, r3
    d758:	0010      	movs	r0, r2
    d75a:	4bcf      	ldr	r3, [pc, #828]	; (da98 <hif_isr+0x394>)
    d75c:	4798      	blx	r3
    d75e:	0003      	movs	r3, r0
    d760:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    d762:	230f      	movs	r3, #15
    d764:	18fb      	adds	r3, r7, r3
    d766:	781b      	ldrb	r3, [r3, #0]
    d768:	b25b      	sxtb	r3, r3
    d76a:	2b00      	cmp	r3, #0
    d76c:	d000      	beq.n	d770 <hif_isr+0x6c>
    d76e:	e210      	b.n	db92 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
    d770:	4bca      	ldr	r3, [pc, #808]	; (da9c <hif_isr+0x398>)
    d772:	2201      	movs	r2, #1
    d774:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    d776:	68bb      	ldr	r3, [r7, #8]
    d778:	089b      	lsrs	r3, r3, #2
    d77a:	b29a      	uxth	r2, r3
    d77c:	230c      	movs	r3, #12
    d77e:	18fb      	adds	r3, r7, r3
    d780:	0512      	lsls	r2, r2, #20
    d782:	0d12      	lsrs	r2, r2, #20
    d784:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    d786:	230c      	movs	r3, #12
    d788:	18fb      	adds	r3, r7, r3
    d78a:	881b      	ldrh	r3, [r3, #0]
    d78c:	2b00      	cmp	r3, #0
    d78e:	d100      	bne.n	d792 <hif_isr+0x8e>
    d790:	e1c8      	b.n	db24 <hif_isr+0x420>
				uint32 address = 0;
    d792:	2300      	movs	r3, #0
    d794:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    d796:	230f      	movs	r3, #15
    d798:	18fc      	adds	r4, r7, r3
    d79a:	003b      	movs	r3, r7
    d79c:	4ac0      	ldr	r2, [pc, #768]	; (daa0 <hif_isr+0x39c>)
    d79e:	0019      	movs	r1, r3
    d7a0:	0010      	movs	r0, r2
    d7a2:	4bbb      	ldr	r3, [pc, #748]	; (da90 <hif_isr+0x38c>)
    d7a4:	4798      	blx	r3
    d7a6:	0003      	movs	r3, r0
    d7a8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    d7aa:	230f      	movs	r3, #15
    d7ac:	18fb      	adds	r3, r7, r3
    d7ae:	781b      	ldrb	r3, [r3, #0]
    d7b0:	b25b      	sxtb	r3, r3
    d7b2:	2b00      	cmp	r3, #0
    d7b4:	d012      	beq.n	d7dc <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    d7b6:	23e4      	movs	r3, #228	; 0xe4
    d7b8:	005a      	lsls	r2, r3, #1
    d7ba:	49ba      	ldr	r1, [pc, #744]	; (daa4 <hif_isr+0x3a0>)
    d7bc:	4bba      	ldr	r3, [pc, #744]	; (daa8 <hif_isr+0x3a4>)
    d7be:	0018      	movs	r0, r3
    d7c0:	4bba      	ldr	r3, [pc, #744]	; (daac <hif_isr+0x3a8>)
    d7c2:	4798      	blx	r3
    d7c4:	4bba      	ldr	r3, [pc, #744]	; (dab0 <hif_isr+0x3ac>)
    d7c6:	0018      	movs	r0, r3
    d7c8:	4bb8      	ldr	r3, [pc, #736]	; (daac <hif_isr+0x3a8>)
    d7ca:	4798      	blx	r3
    d7cc:	4bb9      	ldr	r3, [pc, #740]	; (dab4 <hif_isr+0x3b0>)
    d7ce:	0018      	movs	r0, r3
    d7d0:	4bb6      	ldr	r3, [pc, #728]	; (daac <hif_isr+0x3a8>)
    d7d2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    d7d4:	2001      	movs	r0, #1
    d7d6:	4baf      	ldr	r3, [pc, #700]	; (da94 <hif_isr+0x390>)
    d7d8:	4798      	blx	r3
					goto ERR1;
    d7da:	e1db      	b.n	db94 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
    d7dc:	683a      	ldr	r2, [r7, #0]
    d7de:	4baf      	ldr	r3, [pc, #700]	; (da9c <hif_isr+0x398>)
    d7e0:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    d7e2:	230c      	movs	r3, #12
    d7e4:	18fb      	adds	r3, r7, r3
    d7e6:	881a      	ldrh	r2, [r3, #0]
    d7e8:	4bac      	ldr	r3, [pc, #688]	; (da9c <hif_isr+0x398>)
    d7ea:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    d7ec:	683b      	ldr	r3, [r7, #0]
    d7ee:	220f      	movs	r2, #15
    d7f0:	18bc      	adds	r4, r7, r2
    d7f2:	1d39      	adds	r1, r7, #4
    d7f4:	2204      	movs	r2, #4
    d7f6:	0018      	movs	r0, r3
    d7f8:	4baf      	ldr	r3, [pc, #700]	; (dab8 <hif_isr+0x3b4>)
    d7fa:	4798      	blx	r3
    d7fc:	0003      	movs	r3, r0
    d7fe:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    d800:	1d3b      	adds	r3, r7, #4
    d802:	885b      	ldrh	r3, [r3, #2]
    d804:	b29a      	uxth	r2, r3
    d806:	1d3b      	adds	r3, r7, #4
    d808:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    d80a:	230f      	movs	r3, #15
    d80c:	18fb      	adds	r3, r7, r3
    d80e:	781b      	ldrb	r3, [r3, #0]
    d810:	b25b      	sxtb	r3, r3
    d812:	2b00      	cmp	r3, #0
    d814:	d012      	beq.n	d83c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    d816:	23e9      	movs	r3, #233	; 0xe9
    d818:	005a      	lsls	r2, r3, #1
    d81a:	49a2      	ldr	r1, [pc, #648]	; (daa4 <hif_isr+0x3a0>)
    d81c:	4ba2      	ldr	r3, [pc, #648]	; (daa8 <hif_isr+0x3a4>)
    d81e:	0018      	movs	r0, r3
    d820:	4ba2      	ldr	r3, [pc, #648]	; (daac <hif_isr+0x3a8>)
    d822:	4798      	blx	r3
    d824:	4ba5      	ldr	r3, [pc, #660]	; (dabc <hif_isr+0x3b8>)
    d826:	0018      	movs	r0, r3
    d828:	4ba0      	ldr	r3, [pc, #640]	; (daac <hif_isr+0x3a8>)
    d82a:	4798      	blx	r3
    d82c:	4ba1      	ldr	r3, [pc, #644]	; (dab4 <hif_isr+0x3b0>)
    d82e:	0018      	movs	r0, r3
    d830:	4b9e      	ldr	r3, [pc, #632]	; (daac <hif_isr+0x3a8>)
    d832:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    d834:	2001      	movs	r0, #1
    d836:	4b97      	ldr	r3, [pc, #604]	; (da94 <hif_isr+0x390>)
    d838:	4798      	blx	r3
					goto ERR1;
    d83a:	e1ab      	b.n	db94 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
    d83c:	1d3b      	adds	r3, r7, #4
    d83e:	885b      	ldrh	r3, [r3, #2]
    d840:	b29b      	uxth	r3, r3
    d842:	220c      	movs	r2, #12
    d844:	18ba      	adds	r2, r7, r2
    d846:	8812      	ldrh	r2, [r2, #0]
    d848:	429a      	cmp	r2, r3
    d84a:	d02f      	beq.n	d8ac <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
    d84c:	230c      	movs	r3, #12
    d84e:	18fb      	adds	r3, r7, r3
    d850:	881b      	ldrh	r3, [r3, #0]
    d852:	1d3a      	adds	r2, r7, #4
    d854:	8852      	ldrh	r2, [r2, #2]
    d856:	b292      	uxth	r2, r2
    d858:	1a9b      	subs	r3, r3, r2
    d85a:	2b04      	cmp	r3, #4
    d85c:	dd26      	ble.n	d8ac <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    d85e:	23dc      	movs	r3, #220	; 0xdc
    d860:	33ff      	adds	r3, #255	; 0xff
    d862:	001a      	movs	r2, r3
    d864:	498f      	ldr	r1, [pc, #572]	; (daa4 <hif_isr+0x3a0>)
    d866:	4b90      	ldr	r3, [pc, #576]	; (daa8 <hif_isr+0x3a4>)
    d868:	0018      	movs	r0, r3
    d86a:	4b90      	ldr	r3, [pc, #576]	; (daac <hif_isr+0x3a8>)
    d86c:	4798      	blx	r3
    d86e:	230c      	movs	r3, #12
    d870:	18fb      	adds	r3, r7, r3
    d872:	8819      	ldrh	r1, [r3, #0]
    d874:	1d3b      	adds	r3, r7, #4
    d876:	885b      	ldrh	r3, [r3, #2]
    d878:	b29b      	uxth	r3, r3
    d87a:	001a      	movs	r2, r3
    d87c:	1d3b      	adds	r3, r7, #4
    d87e:	781b      	ldrb	r3, [r3, #0]
    d880:	b2db      	uxtb	r3, r3
    d882:	001c      	movs	r4, r3
    d884:	1d3b      	adds	r3, r7, #4
    d886:	785b      	ldrb	r3, [r3, #1]
    d888:	b2db      	uxtb	r3, r3
    d88a:	488d      	ldr	r0, [pc, #564]	; (dac0 <hif_isr+0x3bc>)
    d88c:	9300      	str	r3, [sp, #0]
    d88e:	0023      	movs	r3, r4
    d890:	4c86      	ldr	r4, [pc, #536]	; (daac <hif_isr+0x3a8>)
    d892:	47a0      	blx	r4
    d894:	4b87      	ldr	r3, [pc, #540]	; (dab4 <hif_isr+0x3b0>)
    d896:	0018      	movs	r0, r3
    d898:	4b84      	ldr	r3, [pc, #528]	; (daac <hif_isr+0x3a8>)
    d89a:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    d89c:	2001      	movs	r0, #1
    d89e:	4b7d      	ldr	r3, [pc, #500]	; (da94 <hif_isr+0x390>)
    d8a0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    d8a2:	230f      	movs	r3, #15
    d8a4:	18fb      	adds	r3, r7, r3
    d8a6:	22fa      	movs	r2, #250	; 0xfa
    d8a8:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    d8aa:	e173      	b.n	db94 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    d8ac:	1d3b      	adds	r3, r7, #4
    d8ae:	781b      	ldrb	r3, [r3, #0]
    d8b0:	b2db      	uxtb	r3, r3
    d8b2:	2b01      	cmp	r3, #1
    d8b4:	d122      	bne.n	d8fc <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
    d8b6:	4b79      	ldr	r3, [pc, #484]	; (da9c <hif_isr+0x398>)
    d8b8:	691b      	ldr	r3, [r3, #16]
    d8ba:	2b00      	cmp	r3, #0
    d8bc:	d00d      	beq.n	d8da <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d8be:	4b77      	ldr	r3, [pc, #476]	; (da9c <hif_isr+0x398>)
    d8c0:	691b      	ldr	r3, [r3, #16]
    d8c2:	1d3a      	adds	r2, r7, #4
    d8c4:	7852      	ldrb	r2, [r2, #1]
    d8c6:	b2d0      	uxtb	r0, r2
    d8c8:	1d3a      	adds	r2, r7, #4
    d8ca:	8852      	ldrh	r2, [r2, #2]
    d8cc:	b292      	uxth	r2, r2
    d8ce:	3a08      	subs	r2, #8
    d8d0:	b291      	uxth	r1, r2
    d8d2:	683a      	ldr	r2, [r7, #0]
    d8d4:	3208      	adds	r2, #8
    d8d6:	4798      	blx	r3
    d8d8:	e102      	b.n	dae0 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
    d8da:	23e8      	movs	r3, #232	; 0xe8
    d8dc:	33ff      	adds	r3, #255	; 0xff
    d8de:	001a      	movs	r2, r3
    d8e0:	4970      	ldr	r1, [pc, #448]	; (daa4 <hif_isr+0x3a0>)
    d8e2:	4b71      	ldr	r3, [pc, #452]	; (daa8 <hif_isr+0x3a4>)
    d8e4:	0018      	movs	r0, r3
    d8e6:	4b71      	ldr	r3, [pc, #452]	; (daac <hif_isr+0x3a8>)
    d8e8:	4798      	blx	r3
    d8ea:	4b76      	ldr	r3, [pc, #472]	; (dac4 <hif_isr+0x3c0>)
    d8ec:	0018      	movs	r0, r3
    d8ee:	4b6f      	ldr	r3, [pc, #444]	; (daac <hif_isr+0x3a8>)
    d8f0:	4798      	blx	r3
    d8f2:	4b70      	ldr	r3, [pc, #448]	; (dab4 <hif_isr+0x3b0>)
    d8f4:	0018      	movs	r0, r3
    d8f6:	4b6d      	ldr	r3, [pc, #436]	; (daac <hif_isr+0x3a8>)
    d8f8:	4798      	blx	r3
    d8fa:	e0f1      	b.n	dae0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    d8fc:	1d3b      	adds	r3, r7, #4
    d8fe:	781b      	ldrb	r3, [r3, #0]
    d900:	b2db      	uxtb	r3, r3
    d902:	2b02      	cmp	r3, #2
    d904:	d122      	bne.n	d94c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
    d906:	4b65      	ldr	r3, [pc, #404]	; (da9c <hif_isr+0x398>)
    d908:	695b      	ldr	r3, [r3, #20]
    d90a:	2b00      	cmp	r3, #0
    d90c:	d00d      	beq.n	d92a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d90e:	4b63      	ldr	r3, [pc, #396]	; (da9c <hif_isr+0x398>)
    d910:	695b      	ldr	r3, [r3, #20]
    d912:	1d3a      	adds	r2, r7, #4
    d914:	7852      	ldrb	r2, [r2, #1]
    d916:	b2d0      	uxtb	r0, r2
    d918:	1d3a      	adds	r2, r7, #4
    d91a:	8852      	ldrh	r2, [r2, #2]
    d91c:	b292      	uxth	r2, r2
    d91e:	3a08      	subs	r2, #8
    d920:	b291      	uxth	r1, r2
    d922:	683a      	ldr	r2, [r7, #0]
    d924:	3208      	adds	r2, #8
    d926:	4798      	blx	r3
    d928:	e0da      	b.n	dae0 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
    d92a:	23f0      	movs	r3, #240	; 0xf0
    d92c:	33ff      	adds	r3, #255	; 0xff
    d92e:	001a      	movs	r2, r3
    d930:	495c      	ldr	r1, [pc, #368]	; (daa4 <hif_isr+0x3a0>)
    d932:	4b5d      	ldr	r3, [pc, #372]	; (daa8 <hif_isr+0x3a4>)
    d934:	0018      	movs	r0, r3
    d936:	4b5d      	ldr	r3, [pc, #372]	; (daac <hif_isr+0x3a8>)
    d938:	4798      	blx	r3
    d93a:	4b63      	ldr	r3, [pc, #396]	; (dac8 <hif_isr+0x3c4>)
    d93c:	0018      	movs	r0, r3
    d93e:	4b5b      	ldr	r3, [pc, #364]	; (daac <hif_isr+0x3a8>)
    d940:	4798      	blx	r3
    d942:	4b5c      	ldr	r3, [pc, #368]	; (dab4 <hif_isr+0x3b0>)
    d944:	0018      	movs	r0, r3
    d946:	4b59      	ldr	r3, [pc, #356]	; (daac <hif_isr+0x3a8>)
    d948:	4798      	blx	r3
    d94a:	e0c9      	b.n	dae0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    d94c:	1d3b      	adds	r3, r7, #4
    d94e:	781b      	ldrb	r3, [r3, #0]
    d950:	b2db      	uxtb	r3, r3
    d952:	2b04      	cmp	r3, #4
    d954:	d122      	bne.n	d99c <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
    d956:	4b51      	ldr	r3, [pc, #324]	; (da9c <hif_isr+0x398>)
    d958:	699b      	ldr	r3, [r3, #24]
    d95a:	2b00      	cmp	r3, #0
    d95c:	d00d      	beq.n	d97a <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d95e:	4b4f      	ldr	r3, [pc, #316]	; (da9c <hif_isr+0x398>)
    d960:	699b      	ldr	r3, [r3, #24]
    d962:	1d3a      	adds	r2, r7, #4
    d964:	7852      	ldrb	r2, [r2, #1]
    d966:	b2d0      	uxtb	r0, r2
    d968:	1d3a      	adds	r2, r7, #4
    d96a:	8852      	ldrh	r2, [r2, #2]
    d96c:	b292      	uxth	r2, r2
    d96e:	3a08      	subs	r2, #8
    d970:	b291      	uxth	r1, r2
    d972:	683a      	ldr	r2, [r7, #0]
    d974:	3208      	adds	r2, #8
    d976:	4798      	blx	r3
    d978:	e0b2      	b.n	dae0 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
    d97a:	23f8      	movs	r3, #248	; 0xf8
    d97c:	33ff      	adds	r3, #255	; 0xff
    d97e:	001a      	movs	r2, r3
    d980:	4948      	ldr	r1, [pc, #288]	; (daa4 <hif_isr+0x3a0>)
    d982:	4b49      	ldr	r3, [pc, #292]	; (daa8 <hif_isr+0x3a4>)
    d984:	0018      	movs	r0, r3
    d986:	4b49      	ldr	r3, [pc, #292]	; (daac <hif_isr+0x3a8>)
    d988:	4798      	blx	r3
    d98a:	4b50      	ldr	r3, [pc, #320]	; (dacc <hif_isr+0x3c8>)
    d98c:	0018      	movs	r0, r3
    d98e:	4b47      	ldr	r3, [pc, #284]	; (daac <hif_isr+0x3a8>)
    d990:	4798      	blx	r3
    d992:	4b48      	ldr	r3, [pc, #288]	; (dab4 <hif_isr+0x3b0>)
    d994:	0018      	movs	r0, r3
    d996:	4b45      	ldr	r3, [pc, #276]	; (daac <hif_isr+0x3a8>)
    d998:	4798      	blx	r3
    d99a:	e0a1      	b.n	dae0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    d99c:	1d3b      	adds	r3, r7, #4
    d99e:	781b      	ldrb	r3, [r3, #0]
    d9a0:	b2db      	uxtb	r3, r3
    d9a2:	2b06      	cmp	r3, #6
    d9a4:	d121      	bne.n	d9ea <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
    d9a6:	4b3d      	ldr	r3, [pc, #244]	; (da9c <hif_isr+0x398>)
    d9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d9aa:	2b00      	cmp	r3, #0
    d9ac:	d00d      	beq.n	d9ca <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d9ae:	4b3b      	ldr	r3, [pc, #236]	; (da9c <hif_isr+0x398>)
    d9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d9b2:	1d3a      	adds	r2, r7, #4
    d9b4:	7852      	ldrb	r2, [r2, #1]
    d9b6:	b2d0      	uxtb	r0, r2
    d9b8:	1d3a      	adds	r2, r7, #4
    d9ba:	8852      	ldrh	r2, [r2, #2]
    d9bc:	b292      	uxth	r2, r2
    d9be:	3a08      	subs	r2, #8
    d9c0:	b291      	uxth	r1, r2
    d9c2:	683a      	ldr	r2, [r7, #0]
    d9c4:	3208      	adds	r2, #8
    d9c6:	4798      	blx	r3
    d9c8:	e08a      	b.n	dae0 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
    d9ca:	2380      	movs	r3, #128	; 0x80
    d9cc:	009a      	lsls	r2, r3, #2
    d9ce:	4935      	ldr	r1, [pc, #212]	; (daa4 <hif_isr+0x3a0>)
    d9d0:	4b35      	ldr	r3, [pc, #212]	; (daa8 <hif_isr+0x3a4>)
    d9d2:	0018      	movs	r0, r3
    d9d4:	4b35      	ldr	r3, [pc, #212]	; (daac <hif_isr+0x3a8>)
    d9d6:	4798      	blx	r3
    d9d8:	4b3d      	ldr	r3, [pc, #244]	; (dad0 <hif_isr+0x3cc>)
    d9da:	0018      	movs	r0, r3
    d9dc:	4b33      	ldr	r3, [pc, #204]	; (daac <hif_isr+0x3a8>)
    d9de:	4798      	blx	r3
    d9e0:	4b34      	ldr	r3, [pc, #208]	; (dab4 <hif_isr+0x3b0>)
    d9e2:	0018      	movs	r0, r3
    d9e4:	4b31      	ldr	r3, [pc, #196]	; (daac <hif_isr+0x3a8>)
    d9e6:	4798      	blx	r3
    d9e8:	e07a      	b.n	dae0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    d9ea:	1d3b      	adds	r3, r7, #4
    d9ec:	781b      	ldrb	r3, [r3, #0]
    d9ee:	b2db      	uxtb	r3, r3
    d9f0:	2b07      	cmp	r3, #7
    d9f2:	d120      	bne.n	da36 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
    d9f4:	4b29      	ldr	r3, [pc, #164]	; (da9c <hif_isr+0x398>)
    d9f6:	69db      	ldr	r3, [r3, #28]
    d9f8:	2b00      	cmp	r3, #0
    d9fa:	d00d      	beq.n	da18 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d9fc:	4b27      	ldr	r3, [pc, #156]	; (da9c <hif_isr+0x398>)
    d9fe:	69db      	ldr	r3, [r3, #28]
    da00:	1d3a      	adds	r2, r7, #4
    da02:	7852      	ldrb	r2, [r2, #1]
    da04:	b2d0      	uxtb	r0, r2
    da06:	1d3a      	adds	r2, r7, #4
    da08:	8852      	ldrh	r2, [r2, #2]
    da0a:	b292      	uxth	r2, r2
    da0c:	3a08      	subs	r2, #8
    da0e:	b291      	uxth	r1, r2
    da10:	683a      	ldr	r2, [r7, #0]
    da12:	3208      	adds	r2, #8
    da14:	4798      	blx	r3
    da16:	e063      	b.n	dae0 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
    da18:	4a2e      	ldr	r2, [pc, #184]	; (dad4 <hif_isr+0x3d0>)
    da1a:	4922      	ldr	r1, [pc, #136]	; (daa4 <hif_isr+0x3a0>)
    da1c:	4b22      	ldr	r3, [pc, #136]	; (daa8 <hif_isr+0x3a4>)
    da1e:	0018      	movs	r0, r3
    da20:	4b22      	ldr	r3, [pc, #136]	; (daac <hif_isr+0x3a8>)
    da22:	4798      	blx	r3
    da24:	4b2c      	ldr	r3, [pc, #176]	; (dad8 <hif_isr+0x3d4>)
    da26:	0018      	movs	r0, r3
    da28:	4b20      	ldr	r3, [pc, #128]	; (daac <hif_isr+0x3a8>)
    da2a:	4798      	blx	r3
    da2c:	4b21      	ldr	r3, [pc, #132]	; (dab4 <hif_isr+0x3b0>)
    da2e:	0018      	movs	r0, r3
    da30:	4b1e      	ldr	r3, [pc, #120]	; (daac <hif_isr+0x3a8>)
    da32:	4798      	blx	r3
    da34:	e054      	b.n	dae0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    da36:	1d3b      	adds	r3, r7, #4
    da38:	781b      	ldrb	r3, [r3, #0]
    da3a:	b2db      	uxtb	r3, r3
    da3c:	2b05      	cmp	r3, #5
    da3e:	d111      	bne.n	da64 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
    da40:	4b16      	ldr	r3, [pc, #88]	; (da9c <hif_isr+0x398>)
    da42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    da44:	2b00      	cmp	r3, #0
    da46:	d04b      	beq.n	dae0 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    da48:	4b14      	ldr	r3, [pc, #80]	; (da9c <hif_isr+0x398>)
    da4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    da4c:	1d3a      	adds	r2, r7, #4
    da4e:	7852      	ldrb	r2, [r2, #1]
    da50:	b2d0      	uxtb	r0, r2
    da52:	1d3a      	adds	r2, r7, #4
    da54:	8852      	ldrh	r2, [r2, #2]
    da56:	b292      	uxth	r2, r2
    da58:	3a08      	subs	r2, #8
    da5a:	b291      	uxth	r1, r2
    da5c:	683a      	ldr	r2, [r7, #0]
    da5e:	3208      	adds	r2, #8
    da60:	4798      	blx	r3
    da62:	e03d      	b.n	dae0 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    da64:	2384      	movs	r3, #132	; 0x84
    da66:	009a      	lsls	r2, r3, #2
    da68:	490e      	ldr	r1, [pc, #56]	; (daa4 <hif_isr+0x3a0>)
    da6a:	4b0f      	ldr	r3, [pc, #60]	; (daa8 <hif_isr+0x3a4>)
    da6c:	0018      	movs	r0, r3
    da6e:	4b0f      	ldr	r3, [pc, #60]	; (daac <hif_isr+0x3a8>)
    da70:	4798      	blx	r3
    da72:	4b1a      	ldr	r3, [pc, #104]	; (dadc <hif_isr+0x3d8>)
    da74:	0018      	movs	r0, r3
    da76:	4b0d      	ldr	r3, [pc, #52]	; (daac <hif_isr+0x3a8>)
    da78:	4798      	blx	r3
    da7a:	4b0e      	ldr	r3, [pc, #56]	; (dab4 <hif_isr+0x3b0>)
    da7c:	0018      	movs	r0, r3
    da7e:	4b0b      	ldr	r3, [pc, #44]	; (daac <hif_isr+0x3a8>)
    da80:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    da82:	230f      	movs	r3, #15
    da84:	18fb      	adds	r3, r7, r3
    da86:	22fa      	movs	r2, #250	; 0xfa
    da88:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    da8a:	e083      	b.n	db94 <hif_isr+0x490>
    da8c:	00001070 	.word	0x00001070
    da90:	0000f191 	.word	0x0000f191
    da94:	0000c8b5 	.word	0x0000c8b5
    da98:	0000f1b5 	.word	0x0000f1b5
    da9c:	200058d8 	.word	0x200058d8
    daa0:	00001084 	.word	0x00001084
    daa4:	0002564c 	.word	0x0002564c
    daa8:	0002533c 	.word	0x0002533c
    daac:	0000a3cd 	.word	0x0000a3cd
    dab0:	00025370 	.word	0x00025370
    dab4:	00025338 	.word	0x00025338
    dab8:	0000f205 	.word	0x0000f205
    dabc:	00025398 	.word	0x00025398
    dac0:	000253b0 	.word	0x000253b0
    dac4:	000253f0 	.word	0x000253f0
    dac8:	00025414 	.word	0x00025414
    dacc:	00025438 	.word	0x00025438
    dad0:	00025458 	.word	0x00025458
    dad4:	00000207 	.word	0x00000207
    dad8:	0002547c 	.word	0x0002547c
    dadc:	000254a0 	.word	0x000254a0
				}
				if(gstrHifCxt.u8HifRXDone)
    dae0:	4b30      	ldr	r3, [pc, #192]	; (dba4 <hif_isr+0x4a0>)
    dae2:	789b      	ldrb	r3, [r3, #2]
    dae4:	b2db      	uxtb	r3, r3
    dae6:	2b00      	cmp	r3, #0
    dae8:	d054      	beq.n	db94 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    daea:	4a2f      	ldr	r2, [pc, #188]	; (dba8 <hif_isr+0x4a4>)
    daec:	492f      	ldr	r1, [pc, #188]	; (dbac <hif_isr+0x4a8>)
    daee:	4b30      	ldr	r3, [pc, #192]	; (dbb0 <hif_isr+0x4ac>)
    daf0:	0018      	movs	r0, r3
    daf2:	4b30      	ldr	r3, [pc, #192]	; (dbb4 <hif_isr+0x4b0>)
    daf4:	4798      	blx	r3
    daf6:	1d3b      	adds	r3, r7, #4
    daf8:	781b      	ldrb	r3, [r3, #0]
    dafa:	b2db      	uxtb	r3, r3
    dafc:	0019      	movs	r1, r3
    dafe:	1d3b      	adds	r3, r7, #4
    db00:	785b      	ldrb	r3, [r3, #1]
    db02:	b2db      	uxtb	r3, r3
    db04:	001a      	movs	r2, r3
    db06:	4b2c      	ldr	r3, [pc, #176]	; (dbb8 <hif_isr+0x4b4>)
    db08:	0018      	movs	r0, r3
    db0a:	4b2a      	ldr	r3, [pc, #168]	; (dbb4 <hif_isr+0x4b0>)
    db0c:	4798      	blx	r3
    db0e:	4b2b      	ldr	r3, [pc, #172]	; (dbbc <hif_isr+0x4b8>)
    db10:	0018      	movs	r0, r3
    db12:	4b28      	ldr	r3, [pc, #160]	; (dbb4 <hif_isr+0x4b0>)
    db14:	4798      	blx	r3
					ret = hif_set_rx_done();
    db16:	230f      	movs	r3, #15
    db18:	18fc      	adds	r4, r7, r3
    db1a:	4b29      	ldr	r3, [pc, #164]	; (dbc0 <hif_isr+0x4bc>)
    db1c:	4798      	blx	r3
    db1e:	0003      	movs	r3, r0
    db20:	7023      	strb	r3, [r4, #0]
    db22:	e037      	b.n	db94 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    db24:	4a27      	ldr	r2, [pc, #156]	; (dbc4 <hif_isr+0x4c0>)
    db26:	4921      	ldr	r1, [pc, #132]	; (dbac <hif_isr+0x4a8>)
    db28:	4b21      	ldr	r3, [pc, #132]	; (dbb0 <hif_isr+0x4ac>)
    db2a:	0018      	movs	r0, r3
    db2c:	4b21      	ldr	r3, [pc, #132]	; (dbb4 <hif_isr+0x4b0>)
    db2e:	4798      	blx	r3
    db30:	4b25      	ldr	r3, [pc, #148]	; (dbc8 <hif_isr+0x4c4>)
    db32:	0018      	movs	r0, r3
    db34:	4b1f      	ldr	r3, [pc, #124]	; (dbb4 <hif_isr+0x4b0>)
    db36:	4798      	blx	r3
    db38:	4b20      	ldr	r3, [pc, #128]	; (dbbc <hif_isr+0x4b8>)
    db3a:	0018      	movs	r0, r3
    db3c:	4b1d      	ldr	r3, [pc, #116]	; (dbb4 <hif_isr+0x4b0>)
    db3e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    db40:	230f      	movs	r3, #15
    db42:	18fb      	adds	r3, r7, r3
    db44:	22fe      	movs	r2, #254	; 0xfe
    db46:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    db48:	e024      	b.n	db94 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    db4a:	4a20      	ldr	r2, [pc, #128]	; (dbcc <hif_isr+0x4c8>)
    db4c:	4917      	ldr	r1, [pc, #92]	; (dbac <hif_isr+0x4a8>)
    db4e:	4b18      	ldr	r3, [pc, #96]	; (dbb0 <hif_isr+0x4ac>)
    db50:	0018      	movs	r0, r3
    db52:	4b18      	ldr	r3, [pc, #96]	; (dbb4 <hif_isr+0x4b0>)
    db54:	4798      	blx	r3
    db56:	68ba      	ldr	r2, [r7, #8]
    db58:	4b1d      	ldr	r3, [pc, #116]	; (dbd0 <hif_isr+0x4cc>)
    db5a:	0011      	movs	r1, r2
    db5c:	0018      	movs	r0, r3
    db5e:	4b15      	ldr	r3, [pc, #84]	; (dbb4 <hif_isr+0x4b0>)
    db60:	4798      	blx	r3
    db62:	4b16      	ldr	r3, [pc, #88]	; (dbbc <hif_isr+0x4b8>)
    db64:	0018      	movs	r0, r3
    db66:	4b13      	ldr	r3, [pc, #76]	; (dbb4 <hif_isr+0x4b0>)
    db68:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    db6a:	230f      	movs	r3, #15
    db6c:	18fb      	adds	r3, r7, r3
    db6e:	22f4      	movs	r2, #244	; 0xf4
    db70:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    db72:	e00f      	b.n	db94 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    db74:	4a17      	ldr	r2, [pc, #92]	; (dbd4 <hif_isr+0x4d0>)
    db76:	490d      	ldr	r1, [pc, #52]	; (dbac <hif_isr+0x4a8>)
    db78:	4b0d      	ldr	r3, [pc, #52]	; (dbb0 <hif_isr+0x4ac>)
    db7a:	0018      	movs	r0, r3
    db7c:	4b0d      	ldr	r3, [pc, #52]	; (dbb4 <hif_isr+0x4b0>)
    db7e:	4798      	blx	r3
    db80:	4b15      	ldr	r3, [pc, #84]	; (dbd8 <hif_isr+0x4d4>)
    db82:	0018      	movs	r0, r3
    db84:	4b0b      	ldr	r3, [pc, #44]	; (dbb4 <hif_isr+0x4b0>)
    db86:	4798      	blx	r3
    db88:	4b0c      	ldr	r3, [pc, #48]	; (dbbc <hif_isr+0x4b8>)
    db8a:	0018      	movs	r0, r3
    db8c:	4b09      	ldr	r3, [pc, #36]	; (dbb4 <hif_isr+0x4b0>)
    db8e:	4798      	blx	r3
		goto ERR1;
    db90:	e000      	b.n	db94 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
    db92:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    db94:	230f      	movs	r3, #15
    db96:	18fb      	adds	r3, r7, r3
    db98:	781b      	ldrb	r3, [r3, #0]
    db9a:	b25b      	sxtb	r3, r3
}
    db9c:	0018      	movs	r0, r3
    db9e:	46bd      	mov	sp, r7
    dba0:	b005      	add	sp, #20
    dba2:	bd90      	pop	{r4, r7, pc}
    dba4:	200058d8 	.word	0x200058d8
    dba8:	00000216 	.word	0x00000216
    dbac:	0002564c 	.word	0x0002564c
    dbb0:	0002533c 	.word	0x0002533c
    dbb4:	0000a3cd 	.word	0x0000a3cd
    dbb8:	000254b8 	.word	0x000254b8
    dbbc:	00025338 	.word	0x00025338
    dbc0:	0000d199 	.word	0x0000d199
    dbc4:	0000021d 	.word	0x0000021d
    dbc8:	000254e4 	.word	0x000254e4
    dbcc:	00000225 	.word	0x00000225
    dbd0:	000254f8 	.word	0x000254f8
    dbd4:	0000022e 	.word	0x0000022e
    dbd8:	00025514 	.word	0x00025514

0000dbdc <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    dbdc:	b590      	push	{r4, r7, lr}
    dbde:	b083      	sub	sp, #12
    dbe0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    dbe2:	1dfb      	adds	r3, r7, #7
    dbe4:	2200      	movs	r2, #0
    dbe6:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
    dbe8:	4b1c      	ldr	r3, [pc, #112]	; (dc5c <hif_handle_isr+0x80>)
    dbea:	2200      	movs	r2, #0
    dbec:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    dbee:	e024      	b.n	dc3a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    dbf0:	4b1a      	ldr	r3, [pc, #104]	; (dc5c <hif_handle_isr+0x80>)
    dbf2:	78db      	ldrb	r3, [r3, #3]
    dbf4:	b2db      	uxtb	r3, r3
    dbf6:	3b01      	subs	r3, #1
    dbf8:	b2da      	uxtb	r2, r3
    dbfa:	4b18      	ldr	r3, [pc, #96]	; (dc5c <hif_handle_isr+0x80>)
    dbfc:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    dbfe:	1dfc      	adds	r4, r7, #7
    dc00:	4b17      	ldr	r3, [pc, #92]	; (dc60 <hif_handle_isr+0x84>)
    dc02:	4798      	blx	r3
    dc04:	0003      	movs	r3, r0
    dc06:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    dc08:	1dfb      	adds	r3, r7, #7
    dc0a:	781b      	ldrb	r3, [r3, #0]
    dc0c:	b25b      	sxtb	r3, r3
    dc0e:	2b00      	cmp	r3, #0
    dc10:	d100      	bne.n	dc14 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    dc12:	e012      	b.n	dc3a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    dc14:	4a13      	ldr	r2, [pc, #76]	; (dc64 <hif_handle_isr+0x88>)
    dc16:	4914      	ldr	r1, [pc, #80]	; (dc68 <hif_handle_isr+0x8c>)
    dc18:	4b14      	ldr	r3, [pc, #80]	; (dc6c <hif_handle_isr+0x90>)
    dc1a:	0018      	movs	r0, r3
    dc1c:	4b14      	ldr	r3, [pc, #80]	; (dc70 <hif_handle_isr+0x94>)
    dc1e:	4798      	blx	r3
    dc20:	1dfb      	adds	r3, r7, #7
    dc22:	2200      	movs	r2, #0
    dc24:	569a      	ldrsb	r2, [r3, r2]
    dc26:	4b13      	ldr	r3, [pc, #76]	; (dc74 <hif_handle_isr+0x98>)
    dc28:	0011      	movs	r1, r2
    dc2a:	0018      	movs	r0, r3
    dc2c:	4b10      	ldr	r3, [pc, #64]	; (dc70 <hif_handle_isr+0x94>)
    dc2e:	4798      	blx	r3
    dc30:	4b11      	ldr	r3, [pc, #68]	; (dc78 <hif_handle_isr+0x9c>)
    dc32:	0018      	movs	r0, r3
    dc34:	4b0e      	ldr	r3, [pc, #56]	; (dc70 <hif_handle_isr+0x94>)
    dc36:	4798      	blx	r3
			ret = hif_isr();
    dc38:	e7e1      	b.n	dbfe <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    dc3a:	4b08      	ldr	r3, [pc, #32]	; (dc5c <hif_handle_isr+0x80>)
    dc3c:	78db      	ldrb	r3, [r3, #3]
    dc3e:	b2db      	uxtb	r3, r3
    dc40:	2b00      	cmp	r3, #0
    dc42:	d004      	beq.n	dc4e <hif_handle_isr+0x72>
    dc44:	4b05      	ldr	r3, [pc, #20]	; (dc5c <hif_handle_isr+0x80>)
    dc46:	791b      	ldrb	r3, [r3, #4]
    dc48:	b2db      	uxtb	r3, r3
    dc4a:	2b00      	cmp	r3, #0
    dc4c:	d0d0      	beq.n	dbf0 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
    dc4e:	1dfb      	adds	r3, r7, #7
    dc50:	781b      	ldrb	r3, [r3, #0]
    dc52:	b25b      	sxtb	r3, r3
}
    dc54:	0018      	movs	r0, r3
    dc56:	46bd      	mov	sp, r7
    dc58:	b003      	add	sp, #12
    dc5a:	bd90      	pop	{r4, r7, pc}
    dc5c:	200058d8 	.word	0x200058d8
    dc60:	0000d705 	.word	0x0000d705
    dc64:	00000257 	.word	0x00000257
    dc68:	00025654 	.word	0x00025654
    dc6c:	0002533c 	.word	0x0002533c
    dc70:	0000a3cd 	.word	0x0000a3cd
    dc74:	00025538 	.word	0x00025538
    dc78:	00025338 	.word	0x00025338

0000dc7c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    dc7c:	b590      	push	{r4, r7, lr}
    dc7e:	b087      	sub	sp, #28
    dc80:	af00      	add	r7, sp, #0
    dc82:	60f8      	str	r0, [r7, #12]
    dc84:	60b9      	str	r1, [r7, #8]
    dc86:	0019      	movs	r1, r3
    dc88:	1dbb      	adds	r3, r7, #6
    dc8a:	801a      	strh	r2, [r3, #0]
    dc8c:	1d7b      	adds	r3, r7, #5
    dc8e:	1c0a      	adds	r2, r1, #0
    dc90:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    dc92:	2317      	movs	r3, #23
    dc94:	18fb      	adds	r3, r7, r3
    dc96:	2200      	movs	r2, #0
    dc98:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    dc9a:	68fb      	ldr	r3, [r7, #12]
    dc9c:	2b00      	cmp	r3, #0
    dc9e:	d006      	beq.n	dcae <hif_receive+0x32>
    dca0:	68bb      	ldr	r3, [r7, #8]
    dca2:	2b00      	cmp	r3, #0
    dca4:	d003      	beq.n	dcae <hif_receive+0x32>
    dca6:	1dbb      	adds	r3, r7, #6
    dca8:	881b      	ldrh	r3, [r3, #0]
    dcaa:	2b00      	cmp	r3, #0
    dcac:	d11e      	bne.n	dcec <hif_receive+0x70>
	{
		if(isDone)
    dcae:	1d7b      	adds	r3, r7, #5
    dcb0:	781b      	ldrb	r3, [r3, #0]
    dcb2:	2b00      	cmp	r3, #0
    dcb4:	d006      	beq.n	dcc4 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    dcb6:	2317      	movs	r3, #23
    dcb8:	18fc      	adds	r4, r7, r3
    dcba:	4b45      	ldr	r3, [pc, #276]	; (ddd0 <hif_receive+0x154>)
    dcbc:	4798      	blx	r3
    dcbe:	0003      	movs	r3, r0
    dcc0:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    dcc2:	e07c      	b.n	ddbe <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
    dcc4:	2317      	movs	r3, #23
    dcc6:	18fb      	adds	r3, r7, r3
    dcc8:	22f4      	movs	r2, #244	; 0xf4
    dcca:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    dccc:	239e      	movs	r3, #158	; 0x9e
    dcce:	009a      	lsls	r2, r3, #2
    dcd0:	4940      	ldr	r1, [pc, #256]	; (ddd4 <hif_receive+0x158>)
    dcd2:	4b41      	ldr	r3, [pc, #260]	; (ddd8 <hif_receive+0x15c>)
    dcd4:	0018      	movs	r0, r3
    dcd6:	4b41      	ldr	r3, [pc, #260]	; (dddc <hif_receive+0x160>)
    dcd8:	4798      	blx	r3
    dcda:	4b41      	ldr	r3, [pc, #260]	; (dde0 <hif_receive+0x164>)
    dcdc:	0018      	movs	r0, r3
    dcde:	4b3f      	ldr	r3, [pc, #252]	; (dddc <hif_receive+0x160>)
    dce0:	4798      	blx	r3
    dce2:	4b40      	ldr	r3, [pc, #256]	; (dde4 <hif_receive+0x168>)
    dce4:	0018      	movs	r0, r3
    dce6:	4b3d      	ldr	r3, [pc, #244]	; (dddc <hif_receive+0x160>)
    dce8:	4798      	blx	r3
		goto ERR1;
    dcea:	e068      	b.n	ddbe <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    dcec:	1dbb      	adds	r3, r7, #6
    dcee:	881a      	ldrh	r2, [r3, #0]
    dcf0:	4b3d      	ldr	r3, [pc, #244]	; (dde8 <hif_receive+0x16c>)
    dcf2:	68db      	ldr	r3, [r3, #12]
    dcf4:	429a      	cmp	r2, r3
    dcf6:	d917      	bls.n	dd28 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
    dcf8:	2317      	movs	r3, #23
    dcfa:	18fb      	adds	r3, r7, r3
    dcfc:	22f4      	movs	r2, #244	; 0xf4
    dcfe:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    dd00:	23a0      	movs	r3, #160	; 0xa0
    dd02:	009a      	lsls	r2, r3, #2
    dd04:	4933      	ldr	r1, [pc, #204]	; (ddd4 <hif_receive+0x158>)
    dd06:	4b34      	ldr	r3, [pc, #208]	; (ddd8 <hif_receive+0x15c>)
    dd08:	0018      	movs	r0, r3
    dd0a:	4b34      	ldr	r3, [pc, #208]	; (dddc <hif_receive+0x160>)
    dd0c:	4798      	blx	r3
    dd0e:	1dbb      	adds	r3, r7, #6
    dd10:	8819      	ldrh	r1, [r3, #0]
    dd12:	4b35      	ldr	r3, [pc, #212]	; (dde8 <hif_receive+0x16c>)
    dd14:	68da      	ldr	r2, [r3, #12]
    dd16:	4b35      	ldr	r3, [pc, #212]	; (ddec <hif_receive+0x170>)
    dd18:	0018      	movs	r0, r3
    dd1a:	4b30      	ldr	r3, [pc, #192]	; (dddc <hif_receive+0x160>)
    dd1c:	4798      	blx	r3
    dd1e:	4b31      	ldr	r3, [pc, #196]	; (dde4 <hif_receive+0x168>)
    dd20:	0018      	movs	r0, r3
    dd22:	4b2e      	ldr	r3, [pc, #184]	; (dddc <hif_receive+0x160>)
    dd24:	4798      	blx	r3
		goto ERR1;
    dd26:	e04a      	b.n	ddbe <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    dd28:	4b2f      	ldr	r3, [pc, #188]	; (dde8 <hif_receive+0x16c>)
    dd2a:	689a      	ldr	r2, [r3, #8]
    dd2c:	68fb      	ldr	r3, [r7, #12]
    dd2e:	429a      	cmp	r2, r3
    dd30:	d80a      	bhi.n	dd48 <hif_receive+0xcc>
    dd32:	1dbb      	adds	r3, r7, #6
    dd34:	881a      	ldrh	r2, [r3, #0]
    dd36:	68fb      	ldr	r3, [r7, #12]
    dd38:	18d2      	adds	r2, r2, r3
    dd3a:	4b2b      	ldr	r3, [pc, #172]	; (dde8 <hif_receive+0x16c>)
    dd3c:	6899      	ldr	r1, [r3, #8]
    dd3e:	4b2a      	ldr	r3, [pc, #168]	; (dde8 <hif_receive+0x16c>)
    dd40:	68db      	ldr	r3, [r3, #12]
    dd42:	18cb      	adds	r3, r1, r3
    dd44:	429a      	cmp	r2, r3
    dd46:	d912      	bls.n	dd6e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
    dd48:	2317      	movs	r3, #23
    dd4a:	18fb      	adds	r3, r7, r3
    dd4c:	22f4      	movs	r2, #244	; 0xf4
    dd4e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    dd50:	4a27      	ldr	r2, [pc, #156]	; (ddf0 <hif_receive+0x174>)
    dd52:	4920      	ldr	r1, [pc, #128]	; (ddd4 <hif_receive+0x158>)
    dd54:	4b20      	ldr	r3, [pc, #128]	; (ddd8 <hif_receive+0x15c>)
    dd56:	0018      	movs	r0, r3
    dd58:	4b20      	ldr	r3, [pc, #128]	; (dddc <hif_receive+0x160>)
    dd5a:	4798      	blx	r3
    dd5c:	4b25      	ldr	r3, [pc, #148]	; (ddf4 <hif_receive+0x178>)
    dd5e:	0018      	movs	r0, r3
    dd60:	4b1e      	ldr	r3, [pc, #120]	; (dddc <hif_receive+0x160>)
    dd62:	4798      	blx	r3
    dd64:	4b1f      	ldr	r3, [pc, #124]	; (dde4 <hif_receive+0x168>)
    dd66:	0018      	movs	r0, r3
    dd68:	4b1c      	ldr	r3, [pc, #112]	; (dddc <hif_receive+0x160>)
    dd6a:	4798      	blx	r3
		goto ERR1;
    dd6c:	e027      	b.n	ddbe <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    dd6e:	1dbb      	adds	r3, r7, #6
    dd70:	881a      	ldrh	r2, [r3, #0]
    dd72:	2317      	movs	r3, #23
    dd74:	18fc      	adds	r4, r7, r3
    dd76:	68b9      	ldr	r1, [r7, #8]
    dd78:	68fb      	ldr	r3, [r7, #12]
    dd7a:	0018      	movs	r0, r3
    dd7c:	4b1e      	ldr	r3, [pc, #120]	; (ddf8 <hif_receive+0x17c>)
    dd7e:	4798      	blx	r3
    dd80:	0003      	movs	r3, r0
    dd82:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    dd84:	2317      	movs	r3, #23
    dd86:	18fb      	adds	r3, r7, r3
    dd88:	781b      	ldrb	r3, [r3, #0]
    dd8a:	b25b      	sxtb	r3, r3
    dd8c:	2b00      	cmp	r3, #0
    dd8e:	d115      	bne.n	ddbc <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    dd90:	4b15      	ldr	r3, [pc, #84]	; (dde8 <hif_receive+0x16c>)
    dd92:	689a      	ldr	r2, [r3, #8]
    dd94:	4b14      	ldr	r3, [pc, #80]	; (dde8 <hif_receive+0x16c>)
    dd96:	68db      	ldr	r3, [r3, #12]
    dd98:	18d2      	adds	r2, r2, r3
    dd9a:	1dbb      	adds	r3, r7, #6
    dd9c:	8819      	ldrh	r1, [r3, #0]
    dd9e:	68fb      	ldr	r3, [r7, #12]
    dda0:	18cb      	adds	r3, r1, r3
    dda2:	429a      	cmp	r2, r3
    dda4:	d003      	beq.n	ddae <hif_receive+0x132>
    dda6:	1d7b      	adds	r3, r7, #5
    dda8:	781b      	ldrb	r3, [r3, #0]
    ddaa:	2b00      	cmp	r3, #0
    ddac:	d007      	beq.n	ddbe <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    ddae:	2317      	movs	r3, #23
    ddb0:	18fc      	adds	r4, r7, r3
    ddb2:	4b07      	ldr	r3, [pc, #28]	; (ddd0 <hif_receive+0x154>)
    ddb4:	4798      	blx	r3
    ddb6:	0003      	movs	r3, r0
    ddb8:	7023      	strb	r3, [r4, #0]
    ddba:	e000      	b.n	ddbe <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
    ddbc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    ddbe:	2317      	movs	r3, #23
    ddc0:	18fb      	adds	r3, r7, r3
    ddc2:	781b      	ldrb	r3, [r3, #0]
    ddc4:	b25b      	sxtb	r3, r3
}
    ddc6:	0018      	movs	r0, r3
    ddc8:	46bd      	mov	sp, r7
    ddca:	b007      	add	sp, #28
    ddcc:	bd90      	pop	{r4, r7, pc}
    ddce:	46c0      	nop			; (mov r8, r8)
    ddd0:	0000d199 	.word	0x0000d199
    ddd4:	00025664 	.word	0x00025664
    ddd8:	0002533c 	.word	0x0002533c
    dddc:	0000a3cd 	.word	0x0000a3cd
    dde0:	00025568 	.word	0x00025568
    dde4:	00025338 	.word	0x00025338
    dde8:	200058d8 	.word	0x200058d8
    ddec:	00025588 	.word	0x00025588
    ddf0:	00000286 	.word	0x00000286
    ddf4:	000255d0 	.word	0x000255d0
    ddf8:	0000f205 	.word	0x0000f205

0000ddfc <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    ddfc:	b580      	push	{r7, lr}
    ddfe:	b084      	sub	sp, #16
    de00:	af00      	add	r7, sp, #0
    de02:	0002      	movs	r2, r0
    de04:	6039      	str	r1, [r7, #0]
    de06:	1dfb      	adds	r3, r7, #7
    de08:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    de0a:	230f      	movs	r3, #15
    de0c:	18fb      	adds	r3, r7, r3
    de0e:	2200      	movs	r2, #0
    de10:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    de12:	1dfb      	adds	r3, r7, #7
    de14:	781b      	ldrb	r3, [r3, #0]
    de16:	2b07      	cmp	r3, #7
    de18:	d820      	bhi.n	de5c <hif_register_cb+0x60>
    de1a:	009a      	lsls	r2, r3, #2
    de1c:	4b1e      	ldr	r3, [pc, #120]	; (de98 <hif_register_cb+0x9c>)
    de1e:	18d3      	adds	r3, r2, r3
    de20:	681b      	ldr	r3, [r3, #0]
    de22:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    de24:	4b1d      	ldr	r3, [pc, #116]	; (de9c <hif_register_cb+0xa0>)
    de26:	683a      	ldr	r2, [r7, #0]
    de28:	615a      	str	r2, [r3, #20]
			break;
    de2a:	e02d      	b.n	de88 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    de2c:	4b1b      	ldr	r3, [pc, #108]	; (de9c <hif_register_cb+0xa0>)
    de2e:	683a      	ldr	r2, [r7, #0]
    de30:	611a      	str	r2, [r3, #16]
			break;
    de32:	e029      	b.n	de88 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    de34:	4b19      	ldr	r3, [pc, #100]	; (de9c <hif_register_cb+0xa0>)
    de36:	683a      	ldr	r2, [r7, #0]
    de38:	619a      	str	r2, [r3, #24]
			break;
    de3a:	e025      	b.n	de88 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    de3c:	4b17      	ldr	r3, [pc, #92]	; (de9c <hif_register_cb+0xa0>)
    de3e:	683a      	ldr	r2, [r7, #0]
    de40:	621a      	str	r2, [r3, #32]
			break;
    de42:	e021      	b.n	de88 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    de44:	4b15      	ldr	r3, [pc, #84]	; (de9c <hif_register_cb+0xa0>)
    de46:	683a      	ldr	r2, [r7, #0]
    de48:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    de4a:	e01d      	b.n	de88 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    de4c:	4b13      	ldr	r3, [pc, #76]	; (de9c <hif_register_cb+0xa0>)
    de4e:	683a      	ldr	r2, [r7, #0]
    de50:	61da      	str	r2, [r3, #28]
			break;
    de52:	e019      	b.n	de88 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    de54:	4b11      	ldr	r3, [pc, #68]	; (de9c <hif_register_cb+0xa0>)
    de56:	683a      	ldr	r2, [r7, #0]
    de58:	629a      	str	r2, [r3, #40]	; 0x28
			break;
    de5a:	e015      	b.n	de88 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    de5c:	4a10      	ldr	r2, [pc, #64]	; (dea0 <hif_register_cb+0xa4>)
    de5e:	4911      	ldr	r1, [pc, #68]	; (dea4 <hif_register_cb+0xa8>)
    de60:	4b11      	ldr	r3, [pc, #68]	; (dea8 <hif_register_cb+0xac>)
    de62:	0018      	movs	r0, r3
    de64:	4b11      	ldr	r3, [pc, #68]	; (deac <hif_register_cb+0xb0>)
    de66:	4798      	blx	r3
    de68:	1dfb      	adds	r3, r7, #7
    de6a:	781a      	ldrb	r2, [r3, #0]
    de6c:	4b10      	ldr	r3, [pc, #64]	; (deb0 <hif_register_cb+0xb4>)
    de6e:	0011      	movs	r1, r2
    de70:	0018      	movs	r0, r3
    de72:	4b0e      	ldr	r3, [pc, #56]	; (deac <hif_register_cb+0xb0>)
    de74:	4798      	blx	r3
    de76:	4b0f      	ldr	r3, [pc, #60]	; (deb4 <hif_register_cb+0xb8>)
    de78:	0018      	movs	r0, r3
    de7a:	4b0c      	ldr	r3, [pc, #48]	; (deac <hif_register_cb+0xb0>)
    de7c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    de7e:	230f      	movs	r3, #15
    de80:	18fb      	adds	r3, r7, r3
    de82:	22f4      	movs	r2, #244	; 0xf4
    de84:	701a      	strb	r2, [r3, #0]
			break;
    de86:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    de88:	230f      	movs	r3, #15
    de8a:	18fb      	adds	r3, r7, r3
    de8c:	781b      	ldrb	r3, [r3, #0]
    de8e:	b25b      	sxtb	r3, r3
}
    de90:	0018      	movs	r0, r3
    de92:	46bd      	mov	sp, r7
    de94:	b004      	add	sp, #16
    de96:	bd80      	pop	{r7, pc}
    de98:	00025620 	.word	0x00025620
    de9c:	200058d8 	.word	0x200058d8
    dea0:	000002be 	.word	0x000002be
    dea4:	00025670 	.word	0x00025670
    dea8:	0002533c 	.word	0x0002533c
    deac:	0000a3cd 	.word	0x0000a3cd
    deb0:	00025614 	.word	0x00025614
    deb4:	00025338 	.word	0x00025338

0000deb8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    deb8:	b590      	push	{r4, r7, lr}
    deba:	b0af      	sub	sp, #188	; 0xbc
    debc:	af02      	add	r7, sp, #8
    debe:	603a      	str	r2, [r7, #0]
    dec0:	1dfb      	adds	r3, r7, #7
    dec2:	1c02      	adds	r2, r0, #0
    dec4:	701a      	strb	r2, [r3, #0]
    dec6:	1d3b      	adds	r3, r7, #4
    dec8:	1c0a      	adds	r2, r1, #0
    deca:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    decc:	1dfb      	adds	r3, r7, #7
    dece:	781b      	ldrb	r3, [r3, #0]
    ded0:	2b2c      	cmp	r3, #44	; 0x2c
    ded2:	d116      	bne.n	df02 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    ded4:	23a4      	movs	r3, #164	; 0xa4
    ded6:	18f9      	adds	r1, r7, r3
    ded8:	6838      	ldr	r0, [r7, #0]
    deda:	2300      	movs	r3, #0
    dedc:	2204      	movs	r2, #4
    dede:	4cca      	ldr	r4, [pc, #808]	; (e208 <m2m_wifi_cb+0x350>)
    dee0:	47a0      	blx	r4
    dee2:	1e03      	subs	r3, r0, #0
    dee4:	d000      	beq.n	dee8 <m2m_wifi_cb+0x30>
    dee6:	e1b4      	b.n	e252 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
    dee8:	4bc8      	ldr	r3, [pc, #800]	; (e20c <m2m_wifi_cb+0x354>)
    deea:	681b      	ldr	r3, [r3, #0]
    deec:	2b00      	cmp	r3, #0
    deee:	d100      	bne.n	def2 <m2m_wifi_cb+0x3a>
    def0:	e1af      	b.n	e252 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    def2:	4bc6      	ldr	r3, [pc, #792]	; (e20c <m2m_wifi_cb+0x354>)
    def4:	681b      	ldr	r3, [r3, #0]
    def6:	22a4      	movs	r2, #164	; 0xa4
    def8:	18ba      	adds	r2, r7, r2
    defa:	0011      	movs	r1, r2
    defc:	202c      	movs	r0, #44	; 0x2c
    defe:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    df00:	e1a7      	b.n	e252 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    df02:	1dfb      	adds	r3, r7, #7
    df04:	781b      	ldrb	r3, [r3, #0]
    df06:	2b1b      	cmp	r3, #27
    df08:	d116      	bne.n	df38 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    df0a:	239c      	movs	r3, #156	; 0x9c
    df0c:	18f9      	adds	r1, r7, r3
    df0e:	6838      	ldr	r0, [r7, #0]
    df10:	2300      	movs	r3, #0
    df12:	2208      	movs	r2, #8
    df14:	4cbc      	ldr	r4, [pc, #752]	; (e208 <m2m_wifi_cb+0x350>)
    df16:	47a0      	blx	r4
    df18:	1e03      	subs	r3, r0, #0
    df1a:	d000      	beq.n	df1e <m2m_wifi_cb+0x66>
    df1c:	e199      	b.n	e252 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    df1e:	4bbb      	ldr	r3, [pc, #748]	; (e20c <m2m_wifi_cb+0x354>)
    df20:	681b      	ldr	r3, [r3, #0]
    df22:	2b00      	cmp	r3, #0
    df24:	d100      	bne.n	df28 <m2m_wifi_cb+0x70>
    df26:	e194      	b.n	e252 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    df28:	4bb8      	ldr	r3, [pc, #736]	; (e20c <m2m_wifi_cb+0x354>)
    df2a:	681b      	ldr	r3, [r3, #0]
    df2c:	229c      	movs	r2, #156	; 0x9c
    df2e:	18ba      	adds	r2, r7, r2
    df30:	0011      	movs	r1, r2
    df32:	201b      	movs	r0, #27
    df34:	4798      	blx	r3
}
    df36:	e18c      	b.n	e252 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    df38:	1dfb      	adds	r3, r7, #7
    df3a:	781b      	ldrb	r3, [r3, #0]
    df3c:	2b06      	cmp	r3, #6
    df3e:	d116      	bne.n	df6e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    df40:	230c      	movs	r3, #12
    df42:	18f9      	adds	r1, r7, r3
    df44:	6838      	ldr	r0, [r7, #0]
    df46:	2301      	movs	r3, #1
    df48:	2230      	movs	r2, #48	; 0x30
    df4a:	4caf      	ldr	r4, [pc, #700]	; (e208 <m2m_wifi_cb+0x350>)
    df4c:	47a0      	blx	r4
    df4e:	1e03      	subs	r3, r0, #0
    df50:	d000      	beq.n	df54 <m2m_wifi_cb+0x9c>
    df52:	e17e      	b.n	e252 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
    df54:	4bad      	ldr	r3, [pc, #692]	; (e20c <m2m_wifi_cb+0x354>)
    df56:	681b      	ldr	r3, [r3, #0]
    df58:	2b00      	cmp	r3, #0
    df5a:	d100      	bne.n	df5e <m2m_wifi_cb+0xa6>
    df5c:	e179      	b.n	e252 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    df5e:	4bab      	ldr	r3, [pc, #684]	; (e20c <m2m_wifi_cb+0x354>)
    df60:	681b      	ldr	r3, [r3, #0]
    df62:	220c      	movs	r2, #12
    df64:	18ba      	adds	r2, r7, r2
    df66:	0011      	movs	r1, r2
    df68:	2006      	movs	r0, #6
    df6a:	4798      	blx	r3
}
    df6c:	e171      	b.n	e252 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    df6e:	1dfb      	adds	r3, r7, #7
    df70:	781b      	ldrb	r3, [r3, #0]
    df72:	2b0e      	cmp	r3, #14
    df74:	d100      	bne.n	df78 <m2m_wifi_cb+0xc0>
    df76:	e16c      	b.n	e252 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    df78:	1dfb      	adds	r3, r7, #7
    df7a:	781b      	ldrb	r3, [r3, #0]
    df7c:	2b32      	cmp	r3, #50	; 0x32
    df7e:	d116      	bne.n	dfae <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    df80:	2384      	movs	r3, #132	; 0x84
    df82:	18f9      	adds	r1, r7, r3
    df84:	6838      	ldr	r0, [r7, #0]
    df86:	2300      	movs	r3, #0
    df88:	2218      	movs	r2, #24
    df8a:	4c9f      	ldr	r4, [pc, #636]	; (e208 <m2m_wifi_cb+0x350>)
    df8c:	47a0      	blx	r4
    df8e:	1e03      	subs	r3, r0, #0
    df90:	d000      	beq.n	df94 <m2m_wifi_cb+0xdc>
    df92:	e15e      	b.n	e252 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    df94:	4b9d      	ldr	r3, [pc, #628]	; (e20c <m2m_wifi_cb+0x354>)
    df96:	681b      	ldr	r3, [r3, #0]
    df98:	2b00      	cmp	r3, #0
    df9a:	d100      	bne.n	df9e <m2m_wifi_cb+0xe6>
    df9c:	e159      	b.n	e252 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    df9e:	4b9b      	ldr	r3, [pc, #620]	; (e20c <m2m_wifi_cb+0x354>)
    dfa0:	681b      	ldr	r3, [r3, #0]
    dfa2:	2284      	movs	r2, #132	; 0x84
    dfa4:	18ba      	adds	r2, r7, r2
    dfa6:	0011      	movs	r1, r2
    dfa8:	2032      	movs	r0, #50	; 0x32
    dfaa:	4798      	blx	r3
}
    dfac:	e151      	b.n	e252 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    dfae:	1dfb      	adds	r3, r7, #7
    dfb0:	781b      	ldrb	r3, [r3, #0]
    dfb2:	2b2f      	cmp	r3, #47	; 0x2f
    dfb4:	d11d      	bne.n	dff2 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    dfb6:	230c      	movs	r3, #12
    dfb8:	18fb      	adds	r3, r7, r3
    dfba:	2264      	movs	r2, #100	; 0x64
    dfbc:	2100      	movs	r1, #0
    dfbe:	0018      	movs	r0, r3
    dfc0:	4b93      	ldr	r3, [pc, #588]	; (e210 <m2m_wifi_cb+0x358>)
    dfc2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    dfc4:	230c      	movs	r3, #12
    dfc6:	18f9      	adds	r1, r7, r3
    dfc8:	6838      	ldr	r0, [r7, #0]
    dfca:	2300      	movs	r3, #0
    dfcc:	2264      	movs	r2, #100	; 0x64
    dfce:	4c8e      	ldr	r4, [pc, #568]	; (e208 <m2m_wifi_cb+0x350>)
    dfd0:	47a0      	blx	r4
    dfd2:	1e03      	subs	r3, r0, #0
    dfd4:	d000      	beq.n	dfd8 <m2m_wifi_cb+0x120>
    dfd6:	e13c      	b.n	e252 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    dfd8:	4b8c      	ldr	r3, [pc, #560]	; (e20c <m2m_wifi_cb+0x354>)
    dfda:	681b      	ldr	r3, [r3, #0]
    dfdc:	2b00      	cmp	r3, #0
    dfde:	d100      	bne.n	dfe2 <m2m_wifi_cb+0x12a>
    dfe0:	e137      	b.n	e252 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    dfe2:	4b8a      	ldr	r3, [pc, #552]	; (e20c <m2m_wifi_cb+0x354>)
    dfe4:	681b      	ldr	r3, [r3, #0]
    dfe6:	220c      	movs	r2, #12
    dfe8:	18ba      	adds	r2, r7, r2
    dfea:	0011      	movs	r1, r2
    dfec:	202f      	movs	r0, #47	; 0x2f
    dfee:	4798      	blx	r3
}
    dff0:	e12f      	b.n	e252 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    dff2:	1dfb      	adds	r3, r7, #7
    dff4:	781b      	ldrb	r3, [r3, #0]
    dff6:	2b34      	cmp	r3, #52	; 0x34
    dff8:	d137      	bne.n	e06a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    dffa:	2380      	movs	r3, #128	; 0x80
    dffc:	18f9      	adds	r1, r7, r3
    dffe:	6838      	ldr	r0, [r7, #0]
    e000:	2300      	movs	r3, #0
    e002:	2204      	movs	r2, #4
    e004:	4c80      	ldr	r4, [pc, #512]	; (e208 <m2m_wifi_cb+0x350>)
    e006:	47a0      	blx	r4
    e008:	1e03      	subs	r3, r0, #0
    e00a:	d000      	beq.n	e00e <m2m_wifi_cb+0x156>
    e00c:	e121      	b.n	e252 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    e00e:	4b81      	ldr	r3, [pc, #516]	; (e214 <m2m_wifi_cb+0x35c>)
    e010:	0018      	movs	r0, r3
    e012:	4b81      	ldr	r3, [pc, #516]	; (e218 <m2m_wifi_cb+0x360>)
    e014:	4798      	blx	r3
    e016:	2380      	movs	r3, #128	; 0x80
    e018:	18fb      	adds	r3, r7, r3
    e01a:	681b      	ldr	r3, [r3, #0]
    e01c:	0e1b      	lsrs	r3, r3, #24
    e01e:	b2db      	uxtb	r3, r3
    e020:	0019      	movs	r1, r3
    e022:	2380      	movs	r3, #128	; 0x80
    e024:	18fb      	adds	r3, r7, r3
    e026:	681b      	ldr	r3, [r3, #0]
    e028:	0c1b      	lsrs	r3, r3, #16
    e02a:	b2db      	uxtb	r3, r3
    e02c:	001a      	movs	r2, r3
    e02e:	2380      	movs	r3, #128	; 0x80
    e030:	18fb      	adds	r3, r7, r3
    e032:	681b      	ldr	r3, [r3, #0]
    e034:	0a1b      	lsrs	r3, r3, #8
    e036:	b2db      	uxtb	r3, r3
    e038:	001c      	movs	r4, r3
    e03a:	2380      	movs	r3, #128	; 0x80
    e03c:	18fb      	adds	r3, r7, r3
    e03e:	681b      	ldr	r3, [r3, #0]
    e040:	b2db      	uxtb	r3, r3
    e042:	4876      	ldr	r0, [pc, #472]	; (e21c <m2m_wifi_cb+0x364>)
    e044:	9300      	str	r3, [sp, #0]
    e046:	0023      	movs	r3, r4
    e048:	4c73      	ldr	r4, [pc, #460]	; (e218 <m2m_wifi_cb+0x360>)
    e04a:	47a0      	blx	r4
    e04c:	4b74      	ldr	r3, [pc, #464]	; (e220 <m2m_wifi_cb+0x368>)
    e04e:	0018      	movs	r0, r3
    e050:	4b71      	ldr	r3, [pc, #452]	; (e218 <m2m_wifi_cb+0x360>)
    e052:	4798      	blx	r3
			if (gpfAppWifiCb)
    e054:	4b6d      	ldr	r3, [pc, #436]	; (e20c <m2m_wifi_cb+0x354>)
    e056:	681b      	ldr	r3, [r3, #0]
    e058:	2b00      	cmp	r3, #0
    e05a:	d100      	bne.n	e05e <m2m_wifi_cb+0x1a6>
    e05c:	e0f9      	b.n	e252 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    e05e:	4b6b      	ldr	r3, [pc, #428]	; (e20c <m2m_wifi_cb+0x354>)
    e060:	681b      	ldr	r3, [r3, #0]
    e062:	2100      	movs	r1, #0
    e064:	2034      	movs	r0, #52	; 0x34
    e066:	4798      	blx	r3
}
    e068:	e0f3      	b.n	e252 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    e06a:	1dfb      	adds	r3, r7, #7
    e06c:	781b      	ldrb	r3, [r3, #0]
    e06e:	2b11      	cmp	r3, #17
    e070:	d11e      	bne.n	e0b0 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
    e072:	4b6c      	ldr	r3, [pc, #432]	; (e224 <m2m_wifi_cb+0x36c>)
    e074:	2200      	movs	r2, #0
    e076:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    e078:	237c      	movs	r3, #124	; 0x7c
    e07a:	18f9      	adds	r1, r7, r3
    e07c:	6838      	ldr	r0, [r7, #0]
    e07e:	2300      	movs	r3, #0
    e080:	2204      	movs	r2, #4
    e082:	4c61      	ldr	r4, [pc, #388]	; (e208 <m2m_wifi_cb+0x350>)
    e084:	47a0      	blx	r4
    e086:	1e03      	subs	r3, r0, #0
    e088:	d000      	beq.n	e08c <m2m_wifi_cb+0x1d4>
    e08a:	e0e2      	b.n	e252 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
    e08c:	237c      	movs	r3, #124	; 0x7c
    e08e:	18fb      	adds	r3, r7, r3
    e090:	781a      	ldrb	r2, [r3, #0]
    e092:	4b65      	ldr	r3, [pc, #404]	; (e228 <m2m_wifi_cb+0x370>)
    e094:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    e096:	4b5d      	ldr	r3, [pc, #372]	; (e20c <m2m_wifi_cb+0x354>)
    e098:	681b      	ldr	r3, [r3, #0]
    e09a:	2b00      	cmp	r3, #0
    e09c:	d100      	bne.n	e0a0 <m2m_wifi_cb+0x1e8>
    e09e:	e0d8      	b.n	e252 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    e0a0:	4b5a      	ldr	r3, [pc, #360]	; (e20c <m2m_wifi_cb+0x354>)
    e0a2:	681b      	ldr	r3, [r3, #0]
    e0a4:	227c      	movs	r2, #124	; 0x7c
    e0a6:	18ba      	adds	r2, r7, r2
    e0a8:	0011      	movs	r1, r2
    e0aa:	2011      	movs	r0, #17
    e0ac:	4798      	blx	r3
}
    e0ae:	e0d0      	b.n	e252 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    e0b0:	1dfb      	adds	r3, r7, #7
    e0b2:	781b      	ldrb	r3, [r3, #0]
    e0b4:	2b13      	cmp	r3, #19
    e0b6:	d116      	bne.n	e0e6 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    e0b8:	230c      	movs	r3, #12
    e0ba:	18f9      	adds	r1, r7, r3
    e0bc:	6838      	ldr	r0, [r7, #0]
    e0be:	2300      	movs	r3, #0
    e0c0:	222c      	movs	r2, #44	; 0x2c
    e0c2:	4c51      	ldr	r4, [pc, #324]	; (e208 <m2m_wifi_cb+0x350>)
    e0c4:	47a0      	blx	r4
    e0c6:	1e03      	subs	r3, r0, #0
    e0c8:	d000      	beq.n	e0cc <m2m_wifi_cb+0x214>
    e0ca:	e0c2      	b.n	e252 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    e0cc:	4b4f      	ldr	r3, [pc, #316]	; (e20c <m2m_wifi_cb+0x354>)
    e0ce:	681b      	ldr	r3, [r3, #0]
    e0d0:	2b00      	cmp	r3, #0
    e0d2:	d100      	bne.n	e0d6 <m2m_wifi_cb+0x21e>
    e0d4:	e0bd      	b.n	e252 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    e0d6:	4b4d      	ldr	r3, [pc, #308]	; (e20c <m2m_wifi_cb+0x354>)
    e0d8:	681b      	ldr	r3, [r3, #0]
    e0da:	220c      	movs	r2, #12
    e0dc:	18ba      	adds	r2, r7, r2
    e0de:	0011      	movs	r1, r2
    e0e0:	2013      	movs	r0, #19
    e0e2:	4798      	blx	r3
}
    e0e4:	e0b5      	b.n	e252 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    e0e6:	1dfb      	adds	r3, r7, #7
    e0e8:	781b      	ldrb	r3, [r3, #0]
    e0ea:	2b04      	cmp	r3, #4
    e0ec:	d116      	bne.n	e11c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    e0ee:	23a8      	movs	r3, #168	; 0xa8
    e0f0:	18f9      	adds	r1, r7, r3
    e0f2:	6838      	ldr	r0, [r7, #0]
    e0f4:	2300      	movs	r3, #0
    e0f6:	2204      	movs	r2, #4
    e0f8:	4c43      	ldr	r4, [pc, #268]	; (e208 <m2m_wifi_cb+0x350>)
    e0fa:	47a0      	blx	r4
    e0fc:	1e03      	subs	r3, r0, #0
    e0fe:	d000      	beq.n	e102 <m2m_wifi_cb+0x24a>
    e100:	e0a7      	b.n	e252 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    e102:	4b42      	ldr	r3, [pc, #264]	; (e20c <m2m_wifi_cb+0x354>)
    e104:	681b      	ldr	r3, [r3, #0]
    e106:	2b00      	cmp	r3, #0
    e108:	d100      	bne.n	e10c <m2m_wifi_cb+0x254>
    e10a:	e0a2      	b.n	e252 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    e10c:	4b3f      	ldr	r3, [pc, #252]	; (e20c <m2m_wifi_cb+0x354>)
    e10e:	681b      	ldr	r3, [r3, #0]
    e110:	22a8      	movs	r2, #168	; 0xa8
    e112:	18ba      	adds	r2, r7, r2
    e114:	0011      	movs	r1, r2
    e116:	2004      	movs	r0, #4
    e118:	4798      	blx	r3
}
    e11a:	e09a      	b.n	e252 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    e11c:	1dfb      	adds	r3, r7, #7
    e11e:	781b      	ldrb	r3, [r3, #0]
    e120:	2b65      	cmp	r3, #101	; 0x65
    e122:	d116      	bne.n	e152 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    e124:	23a8      	movs	r3, #168	; 0xa8
    e126:	18f9      	adds	r1, r7, r3
    e128:	6838      	ldr	r0, [r7, #0]
    e12a:	2300      	movs	r3, #0
    e12c:	2204      	movs	r2, #4
    e12e:	4c36      	ldr	r4, [pc, #216]	; (e208 <m2m_wifi_cb+0x350>)
    e130:	47a0      	blx	r4
    e132:	1e03      	subs	r3, r0, #0
    e134:	d000      	beq.n	e138 <m2m_wifi_cb+0x280>
    e136:	e08c      	b.n	e252 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    e138:	4b34      	ldr	r3, [pc, #208]	; (e20c <m2m_wifi_cb+0x354>)
    e13a:	681b      	ldr	r3, [r3, #0]
    e13c:	2b00      	cmp	r3, #0
    e13e:	d100      	bne.n	e142 <m2m_wifi_cb+0x28a>
    e140:	e087      	b.n	e252 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    e142:	4b32      	ldr	r3, [pc, #200]	; (e20c <m2m_wifi_cb+0x354>)
    e144:	681b      	ldr	r3, [r3, #0]
    e146:	22a8      	movs	r2, #168	; 0xa8
    e148:	18ba      	adds	r2, r7, r2
    e14a:	0011      	movs	r1, r2
    e14c:	2065      	movs	r0, #101	; 0x65
    e14e:	4798      	blx	r3
}
    e150:	e07f      	b.n	e252 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    e152:	1dfb      	adds	r3, r7, #7
    e154:	781b      	ldrb	r3, [r3, #0]
    e156:	2b09      	cmp	r3, #9
    e158:	d116      	bne.n	e188 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    e15a:	230c      	movs	r3, #12
    e15c:	18f9      	adds	r1, r7, r3
    e15e:	6838      	ldr	r0, [r7, #0]
    e160:	2301      	movs	r3, #1
    e162:	2264      	movs	r2, #100	; 0x64
    e164:	4c28      	ldr	r4, [pc, #160]	; (e208 <m2m_wifi_cb+0x350>)
    e166:	47a0      	blx	r4
    e168:	1e03      	subs	r3, r0, #0
    e16a:	d000      	beq.n	e16e <m2m_wifi_cb+0x2b6>
    e16c:	e071      	b.n	e252 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
    e16e:	4b27      	ldr	r3, [pc, #156]	; (e20c <m2m_wifi_cb+0x354>)
    e170:	681b      	ldr	r3, [r3, #0]
    e172:	2b00      	cmp	r3, #0
    e174:	d100      	bne.n	e178 <m2m_wifi_cb+0x2c0>
    e176:	e06c      	b.n	e252 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    e178:	4b24      	ldr	r3, [pc, #144]	; (e20c <m2m_wifi_cb+0x354>)
    e17a:	681b      	ldr	r3, [r3, #0]
    e17c:	220c      	movs	r2, #12
    e17e:	18ba      	adds	r2, r7, r2
    e180:	0011      	movs	r1, r2
    e182:	2009      	movs	r0, #9
    e184:	4798      	blx	r3
}
    e186:	e064      	b.n	e252 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    e188:	1dfb      	adds	r3, r7, #7
    e18a:	781b      	ldrb	r3, [r3, #0]
    e18c:	2b2a      	cmp	r3, #42	; 0x2a
    e18e:	d114      	bne.n	e1ba <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    e190:	2378      	movs	r3, #120	; 0x78
    e192:	18f9      	adds	r1, r7, r3
    e194:	6838      	ldr	r0, [r7, #0]
    e196:	2301      	movs	r3, #1
    e198:	2204      	movs	r2, #4
    e19a:	4c1b      	ldr	r4, [pc, #108]	; (e208 <m2m_wifi_cb+0x350>)
    e19c:	47a0      	blx	r4
    e19e:	1e03      	subs	r3, r0, #0
    e1a0:	d157      	bne.n	e252 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
    e1a2:	4b1a      	ldr	r3, [pc, #104]	; (e20c <m2m_wifi_cb+0x354>)
    e1a4:	681b      	ldr	r3, [r3, #0]
    e1a6:	2b00      	cmp	r3, #0
    e1a8:	d053      	beq.n	e252 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    e1aa:	4b18      	ldr	r3, [pc, #96]	; (e20c <m2m_wifi_cb+0x354>)
    e1ac:	681b      	ldr	r3, [r3, #0]
    e1ae:	2278      	movs	r2, #120	; 0x78
    e1b0:	18ba      	adds	r2, r7, r2
    e1b2:	0011      	movs	r1, r2
    e1b4:	202a      	movs	r0, #42	; 0x2a
    e1b6:	4798      	blx	r3
}
    e1b8:	e04b      	b.n	e252 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    e1ba:	1dfb      	adds	r3, r7, #7
    e1bc:	781b      	ldrb	r3, [r3, #0]
    e1be:	2b20      	cmp	r3, #32
    e1c0:	d134      	bne.n	e22c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    e1c2:	2370      	movs	r3, #112	; 0x70
    e1c4:	18f9      	adds	r1, r7, r3
    e1c6:	6838      	ldr	r0, [r7, #0]
    e1c8:	2300      	movs	r3, #0
    e1ca:	2208      	movs	r2, #8
    e1cc:	4c0e      	ldr	r4, [pc, #56]	; (e208 <m2m_wifi_cb+0x350>)
    e1ce:	47a0      	blx	r4
    e1d0:	1e03      	subs	r3, r0, #0
    e1d2:	d13e      	bne.n	e252 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    e1d4:	683b      	ldr	r3, [r7, #0]
    e1d6:	3308      	adds	r3, #8
    e1d8:	0018      	movs	r0, r3
    e1da:	2370      	movs	r3, #112	; 0x70
    e1dc:	18fb      	adds	r3, r7, r3
    e1de:	6819      	ldr	r1, [r3, #0]
    e1e0:	2370      	movs	r3, #112	; 0x70
    e1e2:	18fb      	adds	r3, r7, r3
    e1e4:	889a      	ldrh	r2, [r3, #4]
    e1e6:	2301      	movs	r3, #1
    e1e8:	4c07      	ldr	r4, [pc, #28]	; (e208 <m2m_wifi_cb+0x350>)
    e1ea:	47a0      	blx	r4
    e1ec:	1e03      	subs	r3, r0, #0
    e1ee:	d130      	bne.n	e252 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
    e1f0:	4b06      	ldr	r3, [pc, #24]	; (e20c <m2m_wifi_cb+0x354>)
    e1f2:	681b      	ldr	r3, [r3, #0]
    e1f4:	2b00      	cmp	r3, #0
    e1f6:	d02c      	beq.n	e252 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    e1f8:	4b04      	ldr	r3, [pc, #16]	; (e20c <m2m_wifi_cb+0x354>)
    e1fa:	681b      	ldr	r3, [r3, #0]
    e1fc:	2270      	movs	r2, #112	; 0x70
    e1fe:	18ba      	adds	r2, r7, r2
    e200:	0011      	movs	r1, r2
    e202:	2020      	movs	r0, #32
    e204:	4798      	blx	r3
}
    e206:	e024      	b.n	e252 <m2m_wifi_cb+0x39a>
    e208:	0000dc7d 	.word	0x0000dc7d
    e20c:	20004120 	.word	0x20004120
    e210:	0000d101 	.word	0x0000d101
    e214:	00025680 	.word	0x00025680
    e218:	0000a3cd 	.word	0x0000a3cd
    e21c:	0002568c 	.word	0x0002568c
    e220:	000256ac 	.word	0x000256ac
    e224:	2000411d 	.word	0x2000411d
    e228:	2000411c 	.word	0x2000411c
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    e22c:	2324      	movs	r3, #36	; 0x24
    e22e:	33ff      	adds	r3, #255	; 0xff
    e230:	001a      	movs	r2, r3
    e232:	490a      	ldr	r1, [pc, #40]	; (e25c <m2m_wifi_cb+0x3a4>)
    e234:	4b0a      	ldr	r3, [pc, #40]	; (e260 <m2m_wifi_cb+0x3a8>)
    e236:	0018      	movs	r0, r3
    e238:	4b0a      	ldr	r3, [pc, #40]	; (e264 <m2m_wifi_cb+0x3ac>)
    e23a:	4798      	blx	r3
    e23c:	1dfb      	adds	r3, r7, #7
    e23e:	781a      	ldrb	r2, [r3, #0]
    e240:	4b09      	ldr	r3, [pc, #36]	; (e268 <m2m_wifi_cb+0x3b0>)
    e242:	0011      	movs	r1, r2
    e244:	0018      	movs	r0, r3
    e246:	4b07      	ldr	r3, [pc, #28]	; (e264 <m2m_wifi_cb+0x3ac>)
    e248:	4798      	blx	r3
    e24a:	4b08      	ldr	r3, [pc, #32]	; (e26c <m2m_wifi_cb+0x3b4>)
    e24c:	0018      	movs	r0, r3
    e24e:	4b05      	ldr	r3, [pc, #20]	; (e264 <m2m_wifi_cb+0x3ac>)
    e250:	4798      	blx	r3
}
    e252:	46c0      	nop			; (mov r8, r8)
    e254:	46bd      	mov	sp, r7
    e256:	b02d      	add	sp, #180	; 0xb4
    e258:	bd90      	pop	{r4, r7, pc}
    e25a:	46c0      	nop			; (mov r8, r8)
    e25c:	00025a4c 	.word	0x00025a4c
    e260:	000256b0 	.word	0x000256b0
    e264:	0000a3cd 	.word	0x0000a3cd
    e268:	000256c4 	.word	0x000256c4
    e26c:	000256ac 	.word	0x000256ac

0000e270 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    e270:	b590      	push	{r4, r7, lr}
    e272:	b091      	sub	sp, #68	; 0x44
    e274:	af02      	add	r7, sp, #8
    e276:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    e278:	2337      	movs	r3, #55	; 0x37
    e27a:	18fb      	adds	r3, r7, r3
    e27c:	2200      	movs	r2, #0
    e27e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    e280:	230b      	movs	r3, #11
    e282:	18fb      	adds	r3, r7, r3
    e284:	2201      	movs	r2, #1
    e286:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    e288:	687b      	ldr	r3, [r7, #4]
    e28a:	2b00      	cmp	r3, #0
    e28c:	d104      	bne.n	e298 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    e28e:	2337      	movs	r3, #55	; 0x37
    e290:	18fb      	adds	r3, r7, r3
    e292:	22f4      	movs	r2, #244	; 0xf4
    e294:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    e296:	e0b3      	b.n	e400 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    e298:	687b      	ldr	r3, [r7, #4]
    e29a:	681a      	ldr	r2, [r3, #0]
    e29c:	4b5c      	ldr	r3, [pc, #368]	; (e410 <m2m_wifi_init+0x1a0>)
    e29e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    e2a0:	4b5c      	ldr	r3, [pc, #368]	; (e414 <m2m_wifi_init+0x1a4>)
    e2a2:	2200      	movs	r2, #0
    e2a4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    e2a6:	2337      	movs	r3, #55	; 0x37
    e2a8:	18fc      	adds	r4, r7, r3
    e2aa:	230b      	movs	r3, #11
    e2ac:	18fb      	adds	r3, r7, r3
    e2ae:	0018      	movs	r0, r3
    e2b0:	4b59      	ldr	r3, [pc, #356]	; (e418 <m2m_wifi_init+0x1a8>)
    e2b2:	4798      	blx	r3
    e2b4:	0003      	movs	r3, r0
    e2b6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    e2b8:	2337      	movs	r3, #55	; 0x37
    e2ba:	18fb      	adds	r3, r7, r3
    e2bc:	781b      	ldrb	r3, [r3, #0]
    e2be:	b25b      	sxtb	r3, r3
    e2c0:	2b00      	cmp	r3, #0
    e2c2:	d000      	beq.n	e2c6 <m2m_wifi_init+0x56>
    e2c4:	e099      	b.n	e3fa <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    e2c6:	2337      	movs	r3, #55	; 0x37
    e2c8:	18fc      	adds	r4, r7, r3
    e2ca:	2000      	movs	r0, #0
    e2cc:	4b53      	ldr	r3, [pc, #332]	; (e41c <m2m_wifi_init+0x1ac>)
    e2ce:	4798      	blx	r3
    e2d0:	0003      	movs	r3, r0
    e2d2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    e2d4:	2337      	movs	r3, #55	; 0x37
    e2d6:	18fb      	adds	r3, r7, r3
    e2d8:	781b      	ldrb	r3, [r3, #0]
    e2da:	b25b      	sxtb	r3, r3
    e2dc:	2b00      	cmp	r3, #0
    e2de:	d000      	beq.n	e2e2 <m2m_wifi_init+0x72>
    e2e0:	e086      	b.n	e3f0 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    e2e2:	4b4f      	ldr	r3, [pc, #316]	; (e420 <m2m_wifi_init+0x1b0>)
    e2e4:	0019      	movs	r1, r3
    e2e6:	2001      	movs	r0, #1
    e2e8:	4b4e      	ldr	r3, [pc, #312]	; (e424 <m2m_wifi_init+0x1b4>)
    e2ea:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    e2ec:	2337      	movs	r3, #55	; 0x37
    e2ee:	18fc      	adds	r4, r7, r3
    e2f0:	230c      	movs	r3, #12
    e2f2:	18fb      	adds	r3, r7, r3
    e2f4:	0018      	movs	r0, r3
    e2f6:	4b4c      	ldr	r3, [pc, #304]	; (e428 <m2m_wifi_init+0x1b8>)
    e2f8:	4798      	blx	r3
    e2fa:	0003      	movs	r3, r0
    e2fc:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    e2fe:	4b4b      	ldr	r3, [pc, #300]	; (e42c <m2m_wifi_init+0x1bc>)
    e300:	0018      	movs	r0, r3
    e302:	4b4b      	ldr	r3, [pc, #300]	; (e430 <m2m_wifi_init+0x1c0>)
    e304:	4798      	blx	r3
    e306:	230c      	movs	r3, #12
    e308:	18fb      	adds	r3, r7, r3
    e30a:	791b      	ldrb	r3, [r3, #4]
    e30c:	0019      	movs	r1, r3
    e30e:	230c      	movs	r3, #12
    e310:	18fb      	adds	r3, r7, r3
    e312:	795b      	ldrb	r3, [r3, #5]
    e314:	001a      	movs	r2, r3
    e316:	230c      	movs	r3, #12
    e318:	18fb      	adds	r3, r7, r3
    e31a:	799b      	ldrb	r3, [r3, #6]
    e31c:	001c      	movs	r4, r3
    e31e:	230c      	movs	r3, #12
    e320:	18fb      	adds	r3, r7, r3
    e322:	8c1b      	ldrh	r3, [r3, #32]
    e324:	4843      	ldr	r0, [pc, #268]	; (e434 <m2m_wifi_init+0x1c4>)
    e326:	9300      	str	r3, [sp, #0]
    e328:	0023      	movs	r3, r4
    e32a:	4c41      	ldr	r4, [pc, #260]	; (e430 <m2m_wifi_init+0x1c0>)
    e32c:	47a0      	blx	r4
    e32e:	4b42      	ldr	r3, [pc, #264]	; (e438 <m2m_wifi_init+0x1c8>)
    e330:	0018      	movs	r0, r3
    e332:	4b3f      	ldr	r3, [pc, #252]	; (e430 <m2m_wifi_init+0x1c0>)
    e334:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    e336:	4b3d      	ldr	r3, [pc, #244]	; (e42c <m2m_wifi_init+0x1bc>)
    e338:	0018      	movs	r0, r3
    e33a:	4b3d      	ldr	r3, [pc, #244]	; (e430 <m2m_wifi_init+0x1c0>)
    e33c:	4798      	blx	r3
    e33e:	230c      	movs	r3, #12
    e340:	18fb      	adds	r3, r7, r3
    e342:	3316      	adds	r3, #22
    e344:	001a      	movs	r2, r3
    e346:	230c      	movs	r3, #12
    e348:	18fb      	adds	r3, r7, r3
    e34a:	330a      	adds	r3, #10
    e34c:	0019      	movs	r1, r3
    e34e:	4b3b      	ldr	r3, [pc, #236]	; (e43c <m2m_wifi_init+0x1cc>)
    e350:	0018      	movs	r0, r3
    e352:	4b37      	ldr	r3, [pc, #220]	; (e430 <m2m_wifi_init+0x1c0>)
    e354:	4798      	blx	r3
    e356:	4b38      	ldr	r3, [pc, #224]	; (e438 <m2m_wifi_init+0x1c8>)
    e358:	0018      	movs	r0, r3
    e35a:	4b35      	ldr	r3, [pc, #212]	; (e430 <m2m_wifi_init+0x1c0>)
    e35c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    e35e:	4b33      	ldr	r3, [pc, #204]	; (e42c <m2m_wifi_init+0x1bc>)
    e360:	0018      	movs	r0, r3
    e362:	4b33      	ldr	r3, [pc, #204]	; (e430 <m2m_wifi_init+0x1c0>)
    e364:	4798      	blx	r3
    e366:	230c      	movs	r3, #12
    e368:	18fb      	adds	r3, r7, r3
    e36a:	79db      	ldrb	r3, [r3, #7]
    e36c:	0019      	movs	r1, r3
    e36e:	230c      	movs	r3, #12
    e370:	18fb      	adds	r3, r7, r3
    e372:	7a1b      	ldrb	r3, [r3, #8]
    e374:	001a      	movs	r2, r3
    e376:	230c      	movs	r3, #12
    e378:	18fb      	adds	r3, r7, r3
    e37a:	7a5b      	ldrb	r3, [r3, #9]
    e37c:	4830      	ldr	r0, [pc, #192]	; (e440 <m2m_wifi_init+0x1d0>)
    e37e:	4c2c      	ldr	r4, [pc, #176]	; (e430 <m2m_wifi_init+0x1c0>)
    e380:	47a0      	blx	r4
    e382:	4b2d      	ldr	r3, [pc, #180]	; (e438 <m2m_wifi_init+0x1c8>)
    e384:	0018      	movs	r0, r3
    e386:	4b2a      	ldr	r3, [pc, #168]	; (e430 <m2m_wifi_init+0x1c0>)
    e388:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    e38a:	4b28      	ldr	r3, [pc, #160]	; (e42c <m2m_wifi_init+0x1bc>)
    e38c:	0018      	movs	r0, r3
    e38e:	4b28      	ldr	r3, [pc, #160]	; (e430 <m2m_wifi_init+0x1c0>)
    e390:	4798      	blx	r3
    e392:	482c      	ldr	r0, [pc, #176]	; (e444 <m2m_wifi_init+0x1d4>)
    e394:	2304      	movs	r3, #4
    e396:	2205      	movs	r2, #5
    e398:	2113      	movs	r1, #19
    e39a:	4c25      	ldr	r4, [pc, #148]	; (e430 <m2m_wifi_init+0x1c0>)
    e39c:	47a0      	blx	r4
    e39e:	4b26      	ldr	r3, [pc, #152]	; (e438 <m2m_wifi_init+0x1c8>)
    e3a0:	0018      	movs	r0, r3
    e3a2:	4b23      	ldr	r3, [pc, #140]	; (e430 <m2m_wifi_init+0x1c0>)
    e3a4:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    e3a6:	4b21      	ldr	r3, [pc, #132]	; (e42c <m2m_wifi_init+0x1bc>)
    e3a8:	0018      	movs	r0, r3
    e3aa:	4b21      	ldr	r3, [pc, #132]	; (e430 <m2m_wifi_init+0x1c0>)
    e3ac:	4798      	blx	r3
    e3ae:	4a26      	ldr	r2, [pc, #152]	; (e448 <m2m_wifi_init+0x1d8>)
    e3b0:	4926      	ldr	r1, [pc, #152]	; (e44c <m2m_wifi_init+0x1dc>)
    e3b2:	4b27      	ldr	r3, [pc, #156]	; (e450 <m2m_wifi_init+0x1e0>)
    e3b4:	0018      	movs	r0, r3
    e3b6:	4b1e      	ldr	r3, [pc, #120]	; (e430 <m2m_wifi_init+0x1c0>)
    e3b8:	4798      	blx	r3
    e3ba:	4b1f      	ldr	r3, [pc, #124]	; (e438 <m2m_wifi_init+0x1c8>)
    e3bc:	0018      	movs	r0, r3
    e3be:	4b1c      	ldr	r3, [pc, #112]	; (e430 <m2m_wifi_init+0x1c0>)
    e3c0:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    e3c2:	2337      	movs	r3, #55	; 0x37
    e3c4:	18fb      	adds	r3, r7, r3
    e3c6:	781b      	ldrb	r3, [r3, #0]
    e3c8:	b25b      	sxtb	r3, r3
    e3ca:	330d      	adds	r3, #13
    e3cc:	d117      	bne.n	e3fe <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    e3ce:	23e8      	movs	r3, #232	; 0xe8
    e3d0:	33ff      	adds	r3, #255	; 0xff
    e3d2:	001a      	movs	r2, r3
    e3d4:	491f      	ldr	r1, [pc, #124]	; (e454 <m2m_wifi_init+0x1e4>)
    e3d6:	4b20      	ldr	r3, [pc, #128]	; (e458 <m2m_wifi_init+0x1e8>)
    e3d8:	0018      	movs	r0, r3
    e3da:	4b15      	ldr	r3, [pc, #84]	; (e430 <m2m_wifi_init+0x1c0>)
    e3dc:	4798      	blx	r3
    e3de:	4b1f      	ldr	r3, [pc, #124]	; (e45c <m2m_wifi_init+0x1ec>)
    e3e0:	0018      	movs	r0, r3
    e3e2:	4b13      	ldr	r3, [pc, #76]	; (e430 <m2m_wifi_init+0x1c0>)
    e3e4:	4798      	blx	r3
    e3e6:	4b14      	ldr	r3, [pc, #80]	; (e438 <m2m_wifi_init+0x1c8>)
    e3e8:	0018      	movs	r0, r3
    e3ea:	4b11      	ldr	r3, [pc, #68]	; (e430 <m2m_wifi_init+0x1c0>)
    e3ec:	4798      	blx	r3
	}

	goto _EXIT0;
    e3ee:	e006      	b.n	e3fe <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    e3f0:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    e3f2:	2000      	movs	r0, #0
    e3f4:	4b1a      	ldr	r3, [pc, #104]	; (e460 <m2m_wifi_init+0x1f0>)
    e3f6:	4798      	blx	r3
    e3f8:	e002      	b.n	e400 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    e3fa:	46c0      	nop			; (mov r8, r8)
    e3fc:	e000      	b.n	e400 <m2m_wifi_init+0x190>
	goto _EXIT0;
    e3fe:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    e400:	2337      	movs	r3, #55	; 0x37
    e402:	18fb      	adds	r3, r7, r3
    e404:	781b      	ldrb	r3, [r3, #0]
    e406:	b25b      	sxtb	r3, r3
}
    e408:	0018      	movs	r0, r3
    e40a:	46bd      	mov	sp, r7
    e40c:	b00f      	add	sp, #60	; 0x3c
    e40e:	bd90      	pop	{r4, r7, pc}
    e410:	20004120 	.word	0x20004120
    e414:	2000411d 	.word	0x2000411d
    e418:	0000f595 	.word	0x0000f595
    e41c:	0000d319 	.word	0x0000d319
    e420:	0000deb9 	.word	0x0000deb9
    e424:	0000ddfd 	.word	0x0000ddfd
    e428:	0000f3c9 	.word	0x0000f3c9
    e42c:	00025680 	.word	0x00025680
    e430:	0000a3cd 	.word	0x0000a3cd
    e434:	00025824 	.word	0x00025824
    e438:	000256ac 	.word	0x000256ac
    e43c:	0002584c 	.word	0x0002584c
    e440:	00025868 	.word	0x00025868
    e444:	0002588c 	.word	0x0002588c
    e448:	000258a4 	.word	0x000258a4
    e44c:	000258b0 	.word	0x000258b0
    e450:	000258bc 	.word	0x000258bc
    e454:	00025a58 	.word	0x00025a58
    e458:	000256b0 	.word	0x000256b0
    e45c:	000258d4 	.word	0x000258d4
    e460:	0000f725 	.word	0x0000f725

0000e464 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    e464:	b580      	push	{r7, lr}
    e466:	b082      	sub	sp, #8
    e468:	af00      	add	r7, sp, #0
    e46a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    e46c:	4b03      	ldr	r3, [pc, #12]	; (e47c <m2m_wifi_handle_events+0x18>)
    e46e:	4798      	blx	r3
    e470:	0003      	movs	r3, r0
}
    e472:	0018      	movs	r0, r3
    e474:	46bd      	mov	sp, r7
    e476:	b002      	add	sp, #8
    e478:	bd80      	pop	{r7, pc}
    e47a:	46c0      	nop			; (mov r8, r8)
    e47c:	0000dbdd 	.word	0x0000dbdd

0000e480 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    e480:	b590      	push	{r4, r7, lr}
    e482:	b087      	sub	sp, #28
    e484:	af02      	add	r7, sp, #8
    e486:	60f8      	str	r0, [r7, #12]
    e488:	0008      	movs	r0, r1
    e48a:	0011      	movs	r1, r2
    e48c:	607b      	str	r3, [r7, #4]
    e48e:	230b      	movs	r3, #11
    e490:	18fb      	adds	r3, r7, r3
    e492:	1c02      	adds	r2, r0, #0
    e494:	701a      	strb	r2, [r3, #0]
    e496:	230a      	movs	r3, #10
    e498:	18fb      	adds	r3, r7, r3
    e49a:	1c0a      	adds	r2, r1, #0
    e49c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    e49e:	687c      	ldr	r4, [r7, #4]
    e4a0:	230a      	movs	r3, #10
    e4a2:	18fb      	adds	r3, r7, r3
    e4a4:	781a      	ldrb	r2, [r3, #0]
    e4a6:	230b      	movs	r3, #11
    e4a8:	18fb      	adds	r3, r7, r3
    e4aa:	7819      	ldrb	r1, [r3, #0]
    e4ac:	68f8      	ldr	r0, [r7, #12]
    e4ae:	2300      	movs	r3, #0
    e4b0:	9301      	str	r3, [sp, #4]
    e4b2:	2320      	movs	r3, #32
    e4b4:	18fb      	adds	r3, r7, r3
    e4b6:	881b      	ldrh	r3, [r3, #0]
    e4b8:	9300      	str	r3, [sp, #0]
    e4ba:	0023      	movs	r3, r4
    e4bc:	4c03      	ldr	r4, [pc, #12]	; (e4cc <m2m_wifi_connect+0x4c>)
    e4be:	47a0      	blx	r4
    e4c0:	0003      	movs	r3, r0
}
    e4c2:	0018      	movs	r0, r3
    e4c4:	46bd      	mov	sp, r7
    e4c6:	b005      	add	sp, #20
    e4c8:	bd90      	pop	{r4, r7, pc}
    e4ca:	46c0      	nop			; (mov r8, r8)
    e4cc:	0000e4d1 	.word	0x0000e4d1

0000e4d0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    e4d0:	b5b0      	push	{r4, r5, r7, lr}
    e4d2:	b0aa      	sub	sp, #168	; 0xa8
    e4d4:	af04      	add	r7, sp, #16
    e4d6:	60f8      	str	r0, [r7, #12]
    e4d8:	0008      	movs	r0, r1
    e4da:	0011      	movs	r1, r2
    e4dc:	607b      	str	r3, [r7, #4]
    e4de:	230b      	movs	r3, #11
    e4e0:	18fb      	adds	r3, r7, r3
    e4e2:	1c02      	adds	r2, r0, #0
    e4e4:	701a      	strb	r2, [r3, #0]
    e4e6:	230a      	movs	r3, #10
    e4e8:	18fb      	adds	r3, r7, r3
    e4ea:	1c0a      	adds	r2, r1, #0
    e4ec:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    e4ee:	2397      	movs	r3, #151	; 0x97
    e4f0:	18fb      	adds	r3, r7, r3
    e4f2:	2200      	movs	r2, #0
    e4f4:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    e4f6:	230a      	movs	r3, #10
    e4f8:	18fb      	adds	r3, r7, r3
    e4fa:	781b      	ldrb	r3, [r3, #0]
    e4fc:	2b01      	cmp	r3, #1
    e4fe:	d100      	bne.n	e502 <m2m_wifi_connect_sc+0x32>
    e500:	e085      	b.n	e60e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
    e502:	687b      	ldr	r3, [r7, #4]
    e504:	2b00      	cmp	r3, #0
    e506:	d112      	bne.n	e52e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
    e508:	4ad8      	ldr	r2, [pc, #864]	; (e86c <m2m_wifi_connect_sc+0x39c>)
    e50a:	49d9      	ldr	r1, [pc, #868]	; (e870 <m2m_wifi_connect_sc+0x3a0>)
    e50c:	4bd9      	ldr	r3, [pc, #868]	; (e874 <m2m_wifi_connect_sc+0x3a4>)
    e50e:	0018      	movs	r0, r3
    e510:	4bd9      	ldr	r3, [pc, #868]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e512:	4798      	blx	r3
    e514:	4bd9      	ldr	r3, [pc, #868]	; (e87c <m2m_wifi_connect_sc+0x3ac>)
    e516:	0018      	movs	r0, r3
    e518:	4bd7      	ldr	r3, [pc, #860]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e51a:	4798      	blx	r3
    e51c:	4bd8      	ldr	r3, [pc, #864]	; (e880 <m2m_wifi_connect_sc+0x3b0>)
    e51e:	0018      	movs	r0, r3
    e520:	4bd5      	ldr	r3, [pc, #852]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e522:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    e524:	2397      	movs	r3, #151	; 0x97
    e526:	18fb      	adds	r3, r7, r3
    e528:	22f4      	movs	r2, #244	; 0xf4
    e52a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    e52c:	e1f9      	b.n	e922 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    e52e:	230a      	movs	r3, #10
    e530:	18fb      	adds	r3, r7, r3
    e532:	781b      	ldrb	r3, [r3, #0]
    e534:	2b02      	cmp	r3, #2
    e536:	d16a      	bne.n	e60e <m2m_wifi_connect_sc+0x13e>
    e538:	687b      	ldr	r3, [r7, #4]
    e53a:	0018      	movs	r0, r3
    e53c:	4bd1      	ldr	r3, [pc, #836]	; (e884 <m2m_wifi_connect_sc+0x3b4>)
    e53e:	4798      	blx	r3
    e540:	0003      	movs	r3, r0
    e542:	2b40      	cmp	r3, #64	; 0x40
    e544:	d163      	bne.n	e60e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
    e546:	2396      	movs	r3, #150	; 0x96
    e548:	18fb      	adds	r3, r7, r3
    e54a:	2200      	movs	r2, #0
    e54c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    e54e:	687b      	ldr	r3, [r7, #4]
    e550:	2290      	movs	r2, #144	; 0x90
    e552:	18ba      	adds	r2, r7, r2
    e554:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    e556:	e055      	b.n	e604 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    e558:	2396      	movs	r3, #150	; 0x96
    e55a:	18fb      	adds	r3, r7, r3
    e55c:	781b      	ldrb	r3, [r3, #0]
    e55e:	2290      	movs	r2, #144	; 0x90
    e560:	18ba      	adds	r2, r7, r2
    e562:	6812      	ldr	r2, [r2, #0]
    e564:	18d3      	adds	r3, r2, r3
    e566:	781b      	ldrb	r3, [r3, #0]
    e568:	2b2f      	cmp	r3, #47	; 0x2f
    e56a:	d931      	bls.n	e5d0 <m2m_wifi_connect_sc+0x100>
    e56c:	2396      	movs	r3, #150	; 0x96
    e56e:	18fb      	adds	r3, r7, r3
    e570:	781b      	ldrb	r3, [r3, #0]
    e572:	2290      	movs	r2, #144	; 0x90
    e574:	18ba      	adds	r2, r7, r2
    e576:	6812      	ldr	r2, [r2, #0]
    e578:	18d3      	adds	r3, r2, r3
    e57a:	781b      	ldrb	r3, [r3, #0]
    e57c:	2b39      	cmp	r3, #57	; 0x39
    e57e:	d909      	bls.n	e594 <m2m_wifi_connect_sc+0xc4>
    e580:	2396      	movs	r3, #150	; 0x96
    e582:	18fb      	adds	r3, r7, r3
    e584:	781b      	ldrb	r3, [r3, #0]
    e586:	2290      	movs	r2, #144	; 0x90
    e588:	18ba      	adds	r2, r7, r2
    e58a:	6812      	ldr	r2, [r2, #0]
    e58c:	18d3      	adds	r3, r2, r3
    e58e:	781b      	ldrb	r3, [r3, #0]
    e590:	2b40      	cmp	r3, #64	; 0x40
    e592:	d91d      	bls.n	e5d0 <m2m_wifi_connect_sc+0x100>
    e594:	2396      	movs	r3, #150	; 0x96
    e596:	18fb      	adds	r3, r7, r3
    e598:	781b      	ldrb	r3, [r3, #0]
    e59a:	2290      	movs	r2, #144	; 0x90
    e59c:	18ba      	adds	r2, r7, r2
    e59e:	6812      	ldr	r2, [r2, #0]
    e5a0:	18d3      	adds	r3, r2, r3
    e5a2:	781b      	ldrb	r3, [r3, #0]
    e5a4:	2b46      	cmp	r3, #70	; 0x46
    e5a6:	d909      	bls.n	e5bc <m2m_wifi_connect_sc+0xec>
    e5a8:	2396      	movs	r3, #150	; 0x96
    e5aa:	18fb      	adds	r3, r7, r3
    e5ac:	781b      	ldrb	r3, [r3, #0]
    e5ae:	2290      	movs	r2, #144	; 0x90
    e5b0:	18ba      	adds	r2, r7, r2
    e5b2:	6812      	ldr	r2, [r2, #0]
    e5b4:	18d3      	adds	r3, r2, r3
    e5b6:	781b      	ldrb	r3, [r3, #0]
    e5b8:	2b60      	cmp	r3, #96	; 0x60
    e5ba:	d909      	bls.n	e5d0 <m2m_wifi_connect_sc+0x100>
    e5bc:	2396      	movs	r3, #150	; 0x96
    e5be:	18fb      	adds	r3, r7, r3
    e5c0:	781b      	ldrb	r3, [r3, #0]
    e5c2:	2290      	movs	r2, #144	; 0x90
    e5c4:	18ba      	adds	r2, r7, r2
    e5c6:	6812      	ldr	r2, [r2, #0]
    e5c8:	18d3      	adds	r3, r2, r3
    e5ca:	781b      	ldrb	r3, [r3, #0]
    e5cc:	2b66      	cmp	r3, #102	; 0x66
    e5ce:	d912      	bls.n	e5f6 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
    e5d0:	4aad      	ldr	r2, [pc, #692]	; (e888 <m2m_wifi_connect_sc+0x3b8>)
    e5d2:	49a7      	ldr	r1, [pc, #668]	; (e870 <m2m_wifi_connect_sc+0x3a0>)
    e5d4:	4ba7      	ldr	r3, [pc, #668]	; (e874 <m2m_wifi_connect_sc+0x3a4>)
    e5d6:	0018      	movs	r0, r3
    e5d8:	4ba7      	ldr	r3, [pc, #668]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e5da:	4798      	blx	r3
    e5dc:	4bab      	ldr	r3, [pc, #684]	; (e88c <m2m_wifi_connect_sc+0x3bc>)
    e5de:	0018      	movs	r0, r3
    e5e0:	4ba5      	ldr	r3, [pc, #660]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e5e2:	4798      	blx	r3
    e5e4:	4ba6      	ldr	r3, [pc, #664]	; (e880 <m2m_wifi_connect_sc+0x3b0>)
    e5e6:	0018      	movs	r0, r3
    e5e8:	4ba3      	ldr	r3, [pc, #652]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e5ea:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    e5ec:	2397      	movs	r3, #151	; 0x97
    e5ee:	18fb      	adds	r3, r7, r3
    e5f0:	22f4      	movs	r2, #244	; 0xf4
    e5f2:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    e5f4:	e195      	b.n	e922 <m2m_wifi_connect_sc+0x452>
				}
				i++;
    e5f6:	2396      	movs	r3, #150	; 0x96
    e5f8:	18fb      	adds	r3, r7, r3
    e5fa:	781a      	ldrb	r2, [r3, #0]
    e5fc:	2396      	movs	r3, #150	; 0x96
    e5fe:	18fb      	adds	r3, r7, r3
    e600:	3201      	adds	r2, #1
    e602:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    e604:	2396      	movs	r3, #150	; 0x96
    e606:	18fb      	adds	r3, r7, r3
    e608:	781b      	ldrb	r3, [r3, #0]
    e60a:	2b3f      	cmp	r3, #63	; 0x3f
    e60c:	d9a4      	bls.n	e558 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    e60e:	230b      	movs	r3, #11
    e610:	18fb      	adds	r3, r7, r3
    e612:	781b      	ldrb	r3, [r3, #0]
    e614:	2b00      	cmp	r3, #0
    e616:	d004      	beq.n	e622 <m2m_wifi_connect_sc+0x152>
    e618:	230b      	movs	r3, #11
    e61a:	18fb      	adds	r3, r7, r3
    e61c:	781b      	ldrb	r3, [r3, #0]
    e61e:	2b20      	cmp	r3, #32
    e620:	d913      	bls.n	e64a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
    e622:	238c      	movs	r3, #140	; 0x8c
    e624:	009a      	lsls	r2, r3, #2
    e626:	4992      	ldr	r1, [pc, #584]	; (e870 <m2m_wifi_connect_sc+0x3a0>)
    e628:	4b92      	ldr	r3, [pc, #584]	; (e874 <m2m_wifi_connect_sc+0x3a4>)
    e62a:	0018      	movs	r0, r3
    e62c:	4b92      	ldr	r3, [pc, #584]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e62e:	4798      	blx	r3
    e630:	4b97      	ldr	r3, [pc, #604]	; (e890 <m2m_wifi_connect_sc+0x3c0>)
    e632:	0018      	movs	r0, r3
    e634:	4b90      	ldr	r3, [pc, #576]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e636:	4798      	blx	r3
    e638:	4b91      	ldr	r3, [pc, #580]	; (e880 <m2m_wifi_connect_sc+0x3b0>)
    e63a:	0018      	movs	r0, r3
    e63c:	4b8e      	ldr	r3, [pc, #568]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e63e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    e640:	2397      	movs	r3, #151	; 0x97
    e642:	18fb      	adds	r3, r7, r3
    e644:	22f4      	movs	r2, #244	; 0xf4
    e646:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    e648:	e16b      	b.n	e922 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    e64a:	23a8      	movs	r3, #168	; 0xa8
    e64c:	18fb      	adds	r3, r7, r3
    e64e:	881b      	ldrh	r3, [r3, #0]
    e650:	2b00      	cmp	r3, #0
    e652:	d004      	beq.n	e65e <m2m_wifi_connect_sc+0x18e>
    e654:	23a8      	movs	r3, #168	; 0xa8
    e656:	18fb      	adds	r3, r7, r3
    e658:	881b      	ldrh	r3, [r3, #0]
    e65a:	2b0e      	cmp	r3, #14
    e65c:	d917      	bls.n	e68e <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    e65e:	23a8      	movs	r3, #168	; 0xa8
    e660:	18fb      	adds	r3, r7, r3
    e662:	881b      	ldrh	r3, [r3, #0]
    e664:	2bff      	cmp	r3, #255	; 0xff
    e666:	d012      	beq.n	e68e <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
    e668:	4a8a      	ldr	r2, [pc, #552]	; (e894 <m2m_wifi_connect_sc+0x3c4>)
    e66a:	4981      	ldr	r1, [pc, #516]	; (e870 <m2m_wifi_connect_sc+0x3a0>)
    e66c:	4b81      	ldr	r3, [pc, #516]	; (e874 <m2m_wifi_connect_sc+0x3a4>)
    e66e:	0018      	movs	r0, r3
    e670:	4b81      	ldr	r3, [pc, #516]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e672:	4798      	blx	r3
    e674:	4b88      	ldr	r3, [pc, #544]	; (e898 <m2m_wifi_connect_sc+0x3c8>)
    e676:	0018      	movs	r0, r3
    e678:	4b7f      	ldr	r3, [pc, #508]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e67a:	4798      	blx	r3
    e67c:	4b80      	ldr	r3, [pc, #512]	; (e880 <m2m_wifi_connect_sc+0x3b0>)
    e67e:	0018      	movs	r0, r3
    e680:	4b7d      	ldr	r3, [pc, #500]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e682:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    e684:	2397      	movs	r3, #151	; 0x97
    e686:	18fb      	adds	r3, r7, r3
    e688:	22f4      	movs	r2, #244	; 0xf4
    e68a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    e68c:	e149      	b.n	e922 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    e68e:	230b      	movs	r3, #11
    e690:	18fb      	adds	r3, r7, r3
    e692:	781a      	ldrb	r2, [r3, #0]
    e694:	68f9      	ldr	r1, [r7, #12]
    e696:	2314      	movs	r3, #20
    e698:	18fb      	adds	r3, r7, r3
    e69a:	3346      	adds	r3, #70	; 0x46
    e69c:	0018      	movs	r0, r3
    e69e:	4b7f      	ldr	r3, [pc, #508]	; (e89c <m2m_wifi_connect_sc+0x3cc>)
    e6a0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    e6a2:	230b      	movs	r3, #11
    e6a4:	18fb      	adds	r3, r7, r3
    e6a6:	781b      	ldrb	r3, [r3, #0]
    e6a8:	2214      	movs	r2, #20
    e6aa:	18ba      	adds	r2, r7, r2
    e6ac:	2146      	movs	r1, #70	; 0x46
    e6ae:	18d3      	adds	r3, r2, r3
    e6b0:	185b      	adds	r3, r3, r1
    e6b2:	2200      	movs	r2, #0
    e6b4:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    e6b6:	2314      	movs	r3, #20
    e6b8:	18fb      	adds	r3, r7, r3
    e6ba:	22a8      	movs	r2, #168	; 0xa8
    e6bc:	18ba      	adds	r2, r7, r2
    e6be:	2144      	movs	r1, #68	; 0x44
    e6c0:	8812      	ldrh	r2, [r2, #0]
    e6c2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    e6c4:	23ac      	movs	r3, #172	; 0xac
    e6c6:	18fb      	adds	r3, r7, r3
    e6c8:	781b      	ldrb	r3, [r3, #0]
    e6ca:	1e5a      	subs	r2, r3, #1
    e6cc:	4193      	sbcs	r3, r2
    e6ce:	b2db      	uxtb	r3, r3
    e6d0:	0019      	movs	r1, r3
    e6d2:	2314      	movs	r3, #20
    e6d4:	18fb      	adds	r3, r7, r3
    e6d6:	2267      	movs	r2, #103	; 0x67
    e6d8:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    e6da:	2314      	movs	r3, #20
    e6dc:	18fb      	adds	r3, r7, r3
    e6de:	228c      	movs	r2, #140	; 0x8c
    e6e0:	18ba      	adds	r2, r7, r2
    e6e2:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    e6e4:	238c      	movs	r3, #140	; 0x8c
    e6e6:	18fb      	adds	r3, r7, r3
    e6e8:	681b      	ldr	r3, [r3, #0]
    e6ea:	220a      	movs	r2, #10
    e6ec:	18ba      	adds	r2, r7, r2
    e6ee:	2141      	movs	r1, #65	; 0x41
    e6f0:	7812      	ldrb	r2, [r2, #0]
    e6f2:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    e6f4:	230a      	movs	r3, #10
    e6f6:	18fb      	adds	r3, r7, r3
    e6f8:	781b      	ldrb	r3, [r3, #0]
    e6fa:	2b03      	cmp	r3, #3
    e6fc:	d000      	beq.n	e700 <m2m_wifi_connect_sc+0x230>
    e6fe:	e07d      	b.n	e7fc <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    e700:	687b      	ldr	r3, [r7, #4]
    e702:	2288      	movs	r2, #136	; 0x88
    e704:	18ba      	adds	r2, r7, r2
    e706:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    e708:	238c      	movs	r3, #140	; 0x8c
    e70a:	18fb      	adds	r3, r7, r3
    e70c:	681b      	ldr	r3, [r3, #0]
    e70e:	2284      	movs	r2, #132	; 0x84
    e710:	18ba      	adds	r2, r7, r2
    e712:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    e714:	2388      	movs	r3, #136	; 0x88
    e716:	18fb      	adds	r3, r7, r3
    e718:	681b      	ldr	r3, [r3, #0]
    e71a:	781b      	ldrb	r3, [r3, #0]
    e71c:	3b01      	subs	r3, #1
    e71e:	b2da      	uxtb	r2, r3
    e720:	2384      	movs	r3, #132	; 0x84
    e722:	18fb      	adds	r3, r7, r3
    e724:	681b      	ldr	r3, [r3, #0]
    e726:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    e728:	2384      	movs	r3, #132	; 0x84
    e72a:	18fb      	adds	r3, r7, r3
    e72c:	681b      	ldr	r3, [r3, #0]
    e72e:	781b      	ldrb	r3, [r3, #0]
    e730:	2b03      	cmp	r3, #3
    e732:	d919      	bls.n	e768 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    e734:	2394      	movs	r3, #148	; 0x94
    e736:	009a      	lsls	r2, r3, #2
    e738:	494d      	ldr	r1, [pc, #308]	; (e870 <m2m_wifi_connect_sc+0x3a0>)
    e73a:	4b4e      	ldr	r3, [pc, #312]	; (e874 <m2m_wifi_connect_sc+0x3a4>)
    e73c:	0018      	movs	r0, r3
    e73e:	4b4e      	ldr	r3, [pc, #312]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e740:	4798      	blx	r3
    e742:	2384      	movs	r3, #132	; 0x84
    e744:	18fb      	adds	r3, r7, r3
    e746:	681b      	ldr	r3, [r3, #0]
    e748:	781b      	ldrb	r3, [r3, #0]
    e74a:	001a      	movs	r2, r3
    e74c:	4b54      	ldr	r3, [pc, #336]	; (e8a0 <m2m_wifi_connect_sc+0x3d0>)
    e74e:	0011      	movs	r1, r2
    e750:	0018      	movs	r0, r3
    e752:	4b49      	ldr	r3, [pc, #292]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e754:	4798      	blx	r3
    e756:	4b4a      	ldr	r3, [pc, #296]	; (e880 <m2m_wifi_connect_sc+0x3b0>)
    e758:	0018      	movs	r0, r3
    e75a:	4b47      	ldr	r3, [pc, #284]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e75c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    e75e:	2397      	movs	r3, #151	; 0x97
    e760:	18fb      	adds	r3, r7, r3
    e762:	22f4      	movs	r2, #244	; 0xf4
    e764:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    e766:	e0dc      	b.n	e922 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    e768:	2388      	movs	r3, #136	; 0x88
    e76a:	18fb      	adds	r3, r7, r3
    e76c:	681b      	ldr	r3, [r3, #0]
    e76e:	785b      	ldrb	r3, [r3, #1]
    e770:	3b01      	subs	r3, #1
    e772:	b2da      	uxtb	r2, r3
    e774:	2384      	movs	r3, #132	; 0x84
    e776:	18fb      	adds	r3, r7, r3
    e778:	681b      	ldr	r3, [r3, #0]
    e77a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    e77c:	2384      	movs	r3, #132	; 0x84
    e77e:	18fb      	adds	r3, r7, r3
    e780:	681b      	ldr	r3, [r3, #0]
    e782:	785b      	ldrb	r3, [r3, #1]
    e784:	2b0a      	cmp	r3, #10
    e786:	d01e      	beq.n	e7c6 <m2m_wifi_connect_sc+0x2f6>
    e788:	2384      	movs	r3, #132	; 0x84
    e78a:	18fb      	adds	r3, r7, r3
    e78c:	681b      	ldr	r3, [r3, #0]
    e78e:	785b      	ldrb	r3, [r3, #1]
    e790:	2b1a      	cmp	r3, #26
    e792:	d018      	beq.n	e7c6 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    e794:	4a43      	ldr	r2, [pc, #268]	; (e8a4 <m2m_wifi_connect_sc+0x3d4>)
    e796:	4936      	ldr	r1, [pc, #216]	; (e870 <m2m_wifi_connect_sc+0x3a0>)
    e798:	4b36      	ldr	r3, [pc, #216]	; (e874 <m2m_wifi_connect_sc+0x3a4>)
    e79a:	0018      	movs	r0, r3
    e79c:	4b36      	ldr	r3, [pc, #216]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e79e:	4798      	blx	r3
    e7a0:	2384      	movs	r3, #132	; 0x84
    e7a2:	18fb      	adds	r3, r7, r3
    e7a4:	681b      	ldr	r3, [r3, #0]
    e7a6:	785b      	ldrb	r3, [r3, #1]
    e7a8:	001a      	movs	r2, r3
    e7aa:	4b3f      	ldr	r3, [pc, #252]	; (e8a8 <m2m_wifi_connect_sc+0x3d8>)
    e7ac:	0011      	movs	r1, r2
    e7ae:	0018      	movs	r0, r3
    e7b0:	4b31      	ldr	r3, [pc, #196]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e7b2:	4798      	blx	r3
    e7b4:	4b32      	ldr	r3, [pc, #200]	; (e880 <m2m_wifi_connect_sc+0x3b0>)
    e7b6:	0018      	movs	r0, r3
    e7b8:	4b2f      	ldr	r3, [pc, #188]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e7ba:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    e7bc:	2397      	movs	r3, #151	; 0x97
    e7be:	18fb      	adds	r3, r7, r3
    e7c0:	22f4      	movs	r2, #244	; 0xf4
    e7c2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    e7c4:	e0ad      	b.n	e922 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    e7c6:	2384      	movs	r3, #132	; 0x84
    e7c8:	18fb      	adds	r3, r7, r3
    e7ca:	681b      	ldr	r3, [r3, #0]
    e7cc:	1c98      	adds	r0, r3, #2
    e7ce:	2388      	movs	r3, #136	; 0x88
    e7d0:	18fb      	adds	r3, r7, r3
    e7d2:	681b      	ldr	r3, [r3, #0]
    e7d4:	1c99      	adds	r1, r3, #2
    e7d6:	2388      	movs	r3, #136	; 0x88
    e7d8:	18fb      	adds	r3, r7, r3
    e7da:	681b      	ldr	r3, [r3, #0]
    e7dc:	785b      	ldrb	r3, [r3, #1]
    e7de:	001a      	movs	r2, r3
    e7e0:	4b2e      	ldr	r3, [pc, #184]	; (e89c <m2m_wifi_connect_sc+0x3cc>)
    e7e2:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    e7e4:	2388      	movs	r3, #136	; 0x88
    e7e6:	18fb      	adds	r3, r7, r3
    e7e8:	681b      	ldr	r3, [r3, #0]
    e7ea:	785b      	ldrb	r3, [r3, #1]
    e7ec:	001a      	movs	r2, r3
    e7ee:	2384      	movs	r3, #132	; 0x84
    e7f0:	18fb      	adds	r3, r7, r3
    e7f2:	681b      	ldr	r3, [r3, #0]
    e7f4:	189b      	adds	r3, r3, r2
    e7f6:	2200      	movs	r2, #0
    e7f8:	709a      	strb	r2, [r3, #2]
    e7fa:	e081      	b.n	e900 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    e7fc:	230a      	movs	r3, #10
    e7fe:	18fb      	adds	r3, r7, r3
    e800:	781b      	ldrb	r3, [r3, #0]
    e802:	2b02      	cmp	r3, #2
    e804:	d156      	bne.n	e8b4 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    e806:	2382      	movs	r3, #130	; 0x82
    e808:	18fc      	adds	r4, r7, r3
    e80a:	687b      	ldr	r3, [r7, #4]
    e80c:	0018      	movs	r0, r3
    e80e:	4b1d      	ldr	r3, [pc, #116]	; (e884 <m2m_wifi_connect_sc+0x3b4>)
    e810:	4798      	blx	r3
    e812:	0003      	movs	r3, r0
    e814:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    e816:	2382      	movs	r3, #130	; 0x82
    e818:	18fb      	adds	r3, r7, r3
    e81a:	881b      	ldrh	r3, [r3, #0]
    e81c:	2b00      	cmp	r3, #0
    e81e:	d004      	beq.n	e82a <m2m_wifi_connect_sc+0x35a>
    e820:	2382      	movs	r3, #130	; 0x82
    e822:	18fb      	adds	r3, r7, r3
    e824:	881b      	ldrh	r3, [r3, #0]
    e826:	2b40      	cmp	r3, #64	; 0x40
    e828:	d912      	bls.n	e850 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
    e82a:	4a20      	ldr	r2, [pc, #128]	; (e8ac <m2m_wifi_connect_sc+0x3dc>)
    e82c:	4910      	ldr	r1, [pc, #64]	; (e870 <m2m_wifi_connect_sc+0x3a0>)
    e82e:	4b11      	ldr	r3, [pc, #68]	; (e874 <m2m_wifi_connect_sc+0x3a4>)
    e830:	0018      	movs	r0, r3
    e832:	4b11      	ldr	r3, [pc, #68]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e834:	4798      	blx	r3
    e836:	4b1e      	ldr	r3, [pc, #120]	; (e8b0 <m2m_wifi_connect_sc+0x3e0>)
    e838:	0018      	movs	r0, r3
    e83a:	4b0f      	ldr	r3, [pc, #60]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e83c:	4798      	blx	r3
    e83e:	4b10      	ldr	r3, [pc, #64]	; (e880 <m2m_wifi_connect_sc+0x3b0>)
    e840:	0018      	movs	r0, r3
    e842:	4b0d      	ldr	r3, [pc, #52]	; (e878 <m2m_wifi_connect_sc+0x3a8>)
    e844:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    e846:	2397      	movs	r3, #151	; 0x97
    e848:	18fb      	adds	r3, r7, r3
    e84a:	22f4      	movs	r2, #244	; 0xf4
    e84c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    e84e:	e068      	b.n	e922 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    e850:	238c      	movs	r3, #140	; 0x8c
    e852:	18fb      	adds	r3, r7, r3
    e854:	6818      	ldr	r0, [r3, #0]
    e856:	2382      	movs	r3, #130	; 0x82
    e858:	18fb      	adds	r3, r7, r3
    e85a:	881b      	ldrh	r3, [r3, #0]
    e85c:	3301      	adds	r3, #1
    e85e:	001a      	movs	r2, r3
    e860:	687b      	ldr	r3, [r7, #4]
    e862:	0019      	movs	r1, r3
    e864:	4b0d      	ldr	r3, [pc, #52]	; (e89c <m2m_wifi_connect_sc+0x3cc>)
    e866:	4798      	blx	r3
    e868:	e04a      	b.n	e900 <m2m_wifi_connect_sc+0x430>
    e86a:	46c0      	nop			; (mov r8, r8)
    e86c:	0000021a 	.word	0x0000021a
    e870:	00025a68 	.word	0x00025a68
    e874:	000256b0 	.word	0x000256b0
    e878:	0000a3cd 	.word	0x0000a3cd
    e87c:	000258f0 	.word	0x000258f0
    e880:	000256ac 	.word	0x000256ac
    e884:	0000d13f 	.word	0x0000d13f
    e888:	00000226 	.word	0x00000226
    e88c:	00025904 	.word	0x00025904
    e890:	00025914 	.word	0x00025914
    e894:	00000239 	.word	0x00000239
    e898:	00025928 	.word	0x00025928
    e89c:	0000d0c5 	.word	0x0000d0c5
    e8a0:	00025934 	.word	0x00025934
    e8a4:	00000257 	.word	0x00000257
    e8a8:	00025950 	.word	0x00025950
    e8ac:	00000266 	.word	0x00000266
    e8b0:	0002596c 	.word	0x0002596c
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    e8b4:	230a      	movs	r3, #10
    e8b6:	18fb      	adds	r3, r7, r3
    e8b8:	781b      	ldrb	r3, [r3, #0]
    e8ba:	2b04      	cmp	r3, #4
    e8bc:	d108      	bne.n	e8d0 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    e8be:	238c      	movs	r3, #140	; 0x8c
    e8c0:	18fb      	adds	r3, r7, r3
    e8c2:	681b      	ldr	r3, [r3, #0]
    e8c4:	6879      	ldr	r1, [r7, #4]
    e8c6:	223e      	movs	r2, #62	; 0x3e
    e8c8:	0018      	movs	r0, r3
    e8ca:	4b1a      	ldr	r3, [pc, #104]	; (e934 <m2m_wifi_connect_sc+0x464>)
    e8cc:	4798      	blx	r3
    e8ce:	e017      	b.n	e900 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    e8d0:	230a      	movs	r3, #10
    e8d2:	18fb      	adds	r3, r7, r3
    e8d4:	781b      	ldrb	r3, [r3, #0]
    e8d6:	2b01      	cmp	r3, #1
    e8d8:	d012      	beq.n	e900 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    e8da:	4a17      	ldr	r2, [pc, #92]	; (e938 <m2m_wifi_connect_sc+0x468>)
    e8dc:	4917      	ldr	r1, [pc, #92]	; (e93c <m2m_wifi_connect_sc+0x46c>)
    e8de:	4b18      	ldr	r3, [pc, #96]	; (e940 <m2m_wifi_connect_sc+0x470>)
    e8e0:	0018      	movs	r0, r3
    e8e2:	4b18      	ldr	r3, [pc, #96]	; (e944 <m2m_wifi_connect_sc+0x474>)
    e8e4:	4798      	blx	r3
    e8e6:	4b18      	ldr	r3, [pc, #96]	; (e948 <m2m_wifi_connect_sc+0x478>)
    e8e8:	0018      	movs	r0, r3
    e8ea:	4b16      	ldr	r3, [pc, #88]	; (e944 <m2m_wifi_connect_sc+0x474>)
    e8ec:	4798      	blx	r3
    e8ee:	4b17      	ldr	r3, [pc, #92]	; (e94c <m2m_wifi_connect_sc+0x47c>)
    e8f0:	0018      	movs	r0, r3
    e8f2:	4b14      	ldr	r3, [pc, #80]	; (e944 <m2m_wifi_connect_sc+0x474>)
    e8f4:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    e8f6:	2397      	movs	r3, #151	; 0x97
    e8f8:	18fb      	adds	r3, r7, r3
    e8fa:	22f4      	movs	r2, #244	; 0xf4
    e8fc:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    e8fe:	e010      	b.n	e922 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    e900:	2397      	movs	r3, #151	; 0x97
    e902:	18fc      	adds	r4, r7, r3
    e904:	2314      	movs	r3, #20
    e906:	18fa      	adds	r2, r7, r3
    e908:	2300      	movs	r3, #0
    e90a:	9302      	str	r3, [sp, #8]
    e90c:	2300      	movs	r3, #0
    e90e:	9301      	str	r3, [sp, #4]
    e910:	2300      	movs	r3, #0
    e912:	9300      	str	r3, [sp, #0]
    e914:	236c      	movs	r3, #108	; 0x6c
    e916:	2128      	movs	r1, #40	; 0x28
    e918:	2001      	movs	r0, #1
    e91a:	4d0d      	ldr	r5, [pc, #52]	; (e950 <m2m_wifi_connect_sc+0x480>)
    e91c:	47a8      	blx	r5
    e91e:	0003      	movs	r3, r0
    e920:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    e922:	2397      	movs	r3, #151	; 0x97
    e924:	18fb      	adds	r3, r7, r3
    e926:	781b      	ldrb	r3, [r3, #0]
    e928:	b25b      	sxtb	r3, r3
}
    e92a:	0018      	movs	r0, r3
    e92c:	46bd      	mov	sp, r7
    e92e:	b026      	add	sp, #152	; 0x98
    e930:	bdb0      	pop	{r4, r5, r7, pc}
    e932:	46c0      	nop			; (mov r8, r8)
    e934:	0000d0c5 	.word	0x0000d0c5
    e938:	00000276 	.word	0x00000276
    e93c:	00025a68 	.word	0x00025a68
    e940:	000256b0 	.word	0x000256b0
    e944:	0000a3cd 	.word	0x0000a3cd
    e948:	00025988 	.word	0x00025988
    e94c:	000256ac 	.word	0x000256ac
    e950:	0000d361 	.word	0x0000d361

0000e954 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    e954:	b580      	push	{r7, lr}
    e956:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    e958:	2300      	movs	r3, #0
}
    e95a:	0018      	movs	r0, r3
    e95c:	46bd      	mov	sp, r7
    e95e:	bd80      	pop	{r7, pc}

0000e960 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    e960:	b590      	push	{r4, r7, lr}
    e962:	b087      	sub	sp, #28
    e964:	af00      	add	r7, sp, #0
    e966:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    e968:	2317      	movs	r3, #23
    e96a:	18fb      	adds	r3, r7, r3
    e96c:	2200      	movs	r2, #0
    e96e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    e970:	687b      	ldr	r3, [r7, #4]
    e972:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    e974:	693b      	ldr	r3, [r7, #16]
    e976:	2280      	movs	r2, #128	; 0x80
    e978:	0052      	lsls	r2, r2, #1
    e97a:	4313      	orrs	r3, r2
    e97c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    e97e:	693a      	ldr	r2, [r7, #16]
    e980:	23a5      	movs	r3, #165	; 0xa5
    e982:	015b      	lsls	r3, r3, #5
    e984:	0011      	movs	r1, r2
    e986:	0018      	movs	r0, r3
    e988:	4b12      	ldr	r3, [pc, #72]	; (e9d4 <chip_apply_conf+0x74>)
    e98a:	4798      	blx	r3
		if(val32 != 0) {		
    e98c:	693b      	ldr	r3, [r7, #16]
    e98e:	2b00      	cmp	r3, #0
    e990:	d018      	beq.n	e9c4 <chip_apply_conf+0x64>
			uint32 reg = 0;
    e992:	2300      	movs	r3, #0
    e994:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    e996:	2317      	movs	r3, #23
    e998:	18fc      	adds	r4, r7, r3
    e99a:	230c      	movs	r3, #12
    e99c:	18fa      	adds	r2, r7, r3
    e99e:	23a5      	movs	r3, #165	; 0xa5
    e9a0:	015b      	lsls	r3, r3, #5
    e9a2:	0011      	movs	r1, r2
    e9a4:	0018      	movs	r0, r3
    e9a6:	4b0c      	ldr	r3, [pc, #48]	; (e9d8 <chip_apply_conf+0x78>)
    e9a8:	4798      	blx	r3
    e9aa:	0003      	movs	r3, r0
    e9ac:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    e9ae:	2317      	movs	r3, #23
    e9b0:	18fb      	adds	r3, r7, r3
    e9b2:	781b      	ldrb	r3, [r3, #0]
    e9b4:	b25b      	sxtb	r3, r3
    e9b6:	2b00      	cmp	r3, #0
    e9b8:	d1e1      	bne.n	e97e <chip_apply_conf+0x1e>
				if(reg == val32)
    e9ba:	68fa      	ldr	r2, [r7, #12]
    e9bc:	693b      	ldr	r3, [r7, #16]
    e9be:	429a      	cmp	r2, r3
    e9c0:	d002      	beq.n	e9c8 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    e9c2:	e7dc      	b.n	e97e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    e9c4:	46c0      	nop			; (mov r8, r8)
    e9c6:	e000      	b.n	e9ca <chip_apply_conf+0x6a>
					break;
    e9c8:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    e9ca:	2300      	movs	r3, #0
}
    e9cc:	0018      	movs	r0, r3
    e9ce:	46bd      	mov	sp, r7
    e9d0:	b007      	add	sp, #28
    e9d2:	bd90      	pop	{r4, r7, pc}
    e9d4:	0000f1b5 	.word	0x0000f1b5
    e9d8:	0000f191 	.word	0x0000f191

0000e9dc <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    e9dc:	b590      	push	{r4, r7, lr}
    e9de:	b083      	sub	sp, #12
    e9e0:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    e9e2:	2300      	movs	r3, #0
    e9e4:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    e9e6:	1dfb      	adds	r3, r7, #7
    e9e8:	2200      	movs	r2, #0
    e9ea:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    e9ec:	1dfc      	adds	r4, r7, #7
    e9ee:	003b      	movs	r3, r7
    e9f0:	4a24      	ldr	r2, [pc, #144]	; (ea84 <enable_interrupts+0xa8>)
    e9f2:	0019      	movs	r1, r3
    e9f4:	0010      	movs	r0, r2
    e9f6:	4b24      	ldr	r3, [pc, #144]	; (ea88 <enable_interrupts+0xac>)
    e9f8:	4798      	blx	r3
    e9fa:	0003      	movs	r3, r0
    e9fc:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    e9fe:	1dfb      	adds	r3, r7, #7
    ea00:	781b      	ldrb	r3, [r3, #0]
    ea02:	b25b      	sxtb	r3, r3
    ea04:	2b00      	cmp	r3, #0
    ea06:	d131      	bne.n	ea6c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    ea08:	683b      	ldr	r3, [r7, #0]
    ea0a:	2280      	movs	r2, #128	; 0x80
    ea0c:	0052      	lsls	r2, r2, #1
    ea0e:	4313      	orrs	r3, r2
    ea10:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    ea12:	683b      	ldr	r3, [r7, #0]
    ea14:	1dfc      	adds	r4, r7, #7
    ea16:	4a1b      	ldr	r2, [pc, #108]	; (ea84 <enable_interrupts+0xa8>)
    ea18:	0019      	movs	r1, r3
    ea1a:	0010      	movs	r0, r2
    ea1c:	4b1b      	ldr	r3, [pc, #108]	; (ea8c <enable_interrupts+0xb0>)
    ea1e:	4798      	blx	r3
    ea20:	0003      	movs	r3, r0
    ea22:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    ea24:	1dfb      	adds	r3, r7, #7
    ea26:	781b      	ldrb	r3, [r3, #0]
    ea28:	b25b      	sxtb	r3, r3
    ea2a:	2b00      	cmp	r3, #0
    ea2c:	d120      	bne.n	ea70 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    ea2e:	1dfc      	adds	r4, r7, #7
    ea30:	003a      	movs	r2, r7
    ea32:	23d0      	movs	r3, #208	; 0xd0
    ea34:	015b      	lsls	r3, r3, #5
    ea36:	0011      	movs	r1, r2
    ea38:	0018      	movs	r0, r3
    ea3a:	4b13      	ldr	r3, [pc, #76]	; (ea88 <enable_interrupts+0xac>)
    ea3c:	4798      	blx	r3
    ea3e:	0003      	movs	r3, r0
    ea40:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    ea42:	1dfb      	adds	r3, r7, #7
    ea44:	781b      	ldrb	r3, [r3, #0]
    ea46:	b25b      	sxtb	r3, r3
    ea48:	2b00      	cmp	r3, #0
    ea4a:	d113      	bne.n	ea74 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    ea4c:	683b      	ldr	r3, [r7, #0]
    ea4e:	2280      	movs	r2, #128	; 0x80
    ea50:	0252      	lsls	r2, r2, #9
    ea52:	4313      	orrs	r3, r2
    ea54:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    ea56:	683a      	ldr	r2, [r7, #0]
    ea58:	1dfc      	adds	r4, r7, #7
    ea5a:	23d0      	movs	r3, #208	; 0xd0
    ea5c:	015b      	lsls	r3, r3, #5
    ea5e:	0011      	movs	r1, r2
    ea60:	0018      	movs	r0, r3
    ea62:	4b0a      	ldr	r3, [pc, #40]	; (ea8c <enable_interrupts+0xb0>)
    ea64:	4798      	blx	r3
    ea66:	0003      	movs	r3, r0
    ea68:	7023      	strb	r3, [r4, #0]
    ea6a:	e004      	b.n	ea76 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    ea6c:	46c0      	nop			; (mov r8, r8)
    ea6e:	e002      	b.n	ea76 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    ea70:	46c0      	nop			; (mov r8, r8)
    ea72:	e000      	b.n	ea76 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    ea74:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    ea76:	1dfb      	adds	r3, r7, #7
    ea78:	781b      	ldrb	r3, [r3, #0]
    ea7a:	b25b      	sxtb	r3, r3
}
    ea7c:	0018      	movs	r0, r3
    ea7e:	46bd      	mov	sp, r7
    ea80:	b003      	add	sp, #12
    ea82:	bd90      	pop	{r4, r7, pc}
    ea84:	00001408 	.word	0x00001408
    ea88:	0000f191 	.word	0x0000f191
    ea8c:	0000f1b5 	.word	0x0000f1b5

0000ea90 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    ea90:	b580      	push	{r7, lr}
    ea92:	b082      	sub	sp, #8
    ea94:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    ea96:	4b32      	ldr	r3, [pc, #200]	; (eb60 <nmi_get_chipid+0xd0>)
    ea98:	681b      	ldr	r3, [r3, #0]
    ea9a:	2b00      	cmp	r3, #0
    ea9c:	d159      	bne.n	eb52 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    ea9e:	4a30      	ldr	r2, [pc, #192]	; (eb60 <nmi_get_chipid+0xd0>)
    eaa0:	2380      	movs	r3, #128	; 0x80
    eaa2:	015b      	lsls	r3, r3, #5
    eaa4:	0011      	movs	r1, r2
    eaa6:	0018      	movs	r0, r3
    eaa8:	4b2e      	ldr	r3, [pc, #184]	; (eb64 <nmi_get_chipid+0xd4>)
    eaaa:	4798      	blx	r3
    eaac:	1e03      	subs	r3, r0, #0
    eaae:	d004      	beq.n	eaba <nmi_get_chipid+0x2a>
			chipid = 0;
    eab0:	4b2b      	ldr	r3, [pc, #172]	; (eb60 <nmi_get_chipid+0xd0>)
    eab2:	2200      	movs	r2, #0
    eab4:	601a      	str	r2, [r3, #0]
			return 0;
    eab6:	2300      	movs	r3, #0
    eab8:	e04d      	b.n	eb56 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    eaba:	1d3b      	adds	r3, r7, #4
    eabc:	4a2a      	ldr	r2, [pc, #168]	; (eb68 <nmi_get_chipid+0xd8>)
    eabe:	0019      	movs	r1, r3
    eac0:	0010      	movs	r0, r2
    eac2:	4b28      	ldr	r3, [pc, #160]	; (eb64 <nmi_get_chipid+0xd4>)
    eac4:	4798      	blx	r3
    eac6:	1e03      	subs	r3, r0, #0
    eac8:	d004      	beq.n	ead4 <nmi_get_chipid+0x44>
			chipid = 0;
    eaca:	4b25      	ldr	r3, [pc, #148]	; (eb60 <nmi_get_chipid+0xd0>)
    eacc:	2200      	movs	r2, #0
    eace:	601a      	str	r2, [r3, #0]
			return 0;
    ead0:	2300      	movs	r3, #0
    ead2:	e040      	b.n	eb56 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    ead4:	4b22      	ldr	r3, [pc, #136]	; (eb60 <nmi_get_chipid+0xd0>)
    ead6:	681b      	ldr	r3, [r3, #0]
    ead8:	4a24      	ldr	r2, [pc, #144]	; (eb6c <nmi_get_chipid+0xdc>)
    eada:	4293      	cmp	r3, r2
    eadc:	d106      	bne.n	eaec <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    eade:	687b      	ldr	r3, [r7, #4]
    eae0:	2b01      	cmp	r3, #1
    eae2:	d029      	beq.n	eb38 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    eae4:	4b1e      	ldr	r3, [pc, #120]	; (eb60 <nmi_get_chipid+0xd0>)
    eae6:	4a22      	ldr	r2, [pc, #136]	; (eb70 <nmi_get_chipid+0xe0>)
    eae8:	601a      	str	r2, [r3, #0]
    eaea:	e025      	b.n	eb38 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    eaec:	4b1c      	ldr	r3, [pc, #112]	; (eb60 <nmi_get_chipid+0xd0>)
    eaee:	681b      	ldr	r3, [r3, #0]
    eaf0:	4a20      	ldr	r2, [pc, #128]	; (eb74 <nmi_get_chipid+0xe4>)
    eaf2:	4293      	cmp	r3, r2
    eaf4:	d10d      	bne.n	eb12 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    eaf6:	687b      	ldr	r3, [r7, #4]
    eaf8:	2b03      	cmp	r3, #3
    eafa:	d01d      	beq.n	eb38 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    eafc:	687b      	ldr	r3, [r7, #4]
    eafe:	2b04      	cmp	r3, #4
    eb00:	d103      	bne.n	eb0a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    eb02:	4b17      	ldr	r3, [pc, #92]	; (eb60 <nmi_get_chipid+0xd0>)
    eb04:	4a1c      	ldr	r2, [pc, #112]	; (eb78 <nmi_get_chipid+0xe8>)
    eb06:	601a      	str	r2, [r3, #0]
    eb08:	e016      	b.n	eb38 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    eb0a:	4b15      	ldr	r3, [pc, #84]	; (eb60 <nmi_get_chipid+0xd0>)
    eb0c:	4a1b      	ldr	r2, [pc, #108]	; (eb7c <nmi_get_chipid+0xec>)
    eb0e:	601a      	str	r2, [r3, #0]
    eb10:	e012      	b.n	eb38 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    eb12:	4b13      	ldr	r3, [pc, #76]	; (eb60 <nmi_get_chipid+0xd0>)
    eb14:	681b      	ldr	r3, [r3, #0]
    eb16:	4a1a      	ldr	r2, [pc, #104]	; (eb80 <nmi_get_chipid+0xf0>)
    eb18:	4293      	cmp	r3, r2
    eb1a:	d10d      	bne.n	eb38 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    eb1c:	4a10      	ldr	r2, [pc, #64]	; (eb60 <nmi_get_chipid+0xd0>)
    eb1e:	23ec      	movs	r3, #236	; 0xec
    eb20:	039b      	lsls	r3, r3, #14
    eb22:	0011      	movs	r1, r2
    eb24:	0018      	movs	r0, r3
    eb26:	4b0f      	ldr	r3, [pc, #60]	; (eb64 <nmi_get_chipid+0xd4>)
    eb28:	4798      	blx	r3
    eb2a:	1e03      	subs	r3, r0, #0
    eb2c:	d004      	beq.n	eb38 <nmi_get_chipid+0xa8>
			chipid = 0;
    eb2e:	4b0c      	ldr	r3, [pc, #48]	; (eb60 <nmi_get_chipid+0xd0>)
    eb30:	2200      	movs	r2, #0
    eb32:	601a      	str	r2, [r3, #0]
			return 0;
    eb34:	2300      	movs	r3, #0
    eb36:	e00e      	b.n	eb56 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    eb38:	4b09      	ldr	r3, [pc, #36]	; (eb60 <nmi_get_chipid+0xd0>)
    eb3a:	681b      	ldr	r3, [r3, #0]
    eb3c:	4a11      	ldr	r2, [pc, #68]	; (eb84 <nmi_get_chipid+0xf4>)
    eb3e:	401a      	ands	r2, r3
    eb40:	4b07      	ldr	r3, [pc, #28]	; (eb60 <nmi_get_chipid+0xd0>)
    eb42:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    eb44:	4b06      	ldr	r3, [pc, #24]	; (eb60 <nmi_get_chipid+0xd0>)
    eb46:	681b      	ldr	r3, [r3, #0]
    eb48:	22a0      	movs	r2, #160	; 0xa0
    eb4a:	02d2      	lsls	r2, r2, #11
    eb4c:	431a      	orrs	r2, r3
    eb4e:	4b04      	ldr	r3, [pc, #16]	; (eb60 <nmi_get_chipid+0xd0>)
    eb50:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    eb52:	4b03      	ldr	r3, [pc, #12]	; (eb60 <nmi_get_chipid+0xd0>)
    eb54:	681b      	ldr	r3, [r3, #0]
}
    eb56:	0018      	movs	r0, r3
    eb58:	46bd      	mov	sp, r7
    eb5a:	b002      	add	sp, #8
    eb5c:	bd80      	pop	{r7, pc}
    eb5e:	46c0      	nop			; (mov r8, r8)
    eb60:	20004124 	.word	0x20004124
    eb64:	0000f191 	.word	0x0000f191
    eb68:	000013f4 	.word	0x000013f4
    eb6c:	001002a0 	.word	0x001002a0
    eb70:	001002a1 	.word	0x001002a1
    eb74:	001002b0 	.word	0x001002b0
    eb78:	001002b1 	.word	0x001002b1
    eb7c:	001002b2 	.word	0x001002b2
    eb80:	001000f0 	.word	0x001000f0
    eb84:	fff0ffff 	.word	0xfff0ffff

0000eb88 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    eb88:	b590      	push	{r4, r7, lr}
    eb8a:	b083      	sub	sp, #12
    eb8c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    eb8e:	1dfb      	adds	r3, r7, #7
    eb90:	2200      	movs	r2, #0
    eb92:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    eb94:	1dfc      	adds	r4, r7, #7
    eb96:	003b      	movs	r3, r7
    eb98:	0019      	movs	r1, r3
    eb9a:	2010      	movs	r0, #16
    eb9c:	4b2e      	ldr	r3, [pc, #184]	; (ec58 <chip_sleep+0xd0>)
    eb9e:	4798      	blx	r3
    eba0:	0003      	movs	r3, r0
    eba2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    eba4:	1dfb      	adds	r3, r7, #7
    eba6:	781b      	ldrb	r3, [r3, #0]
    eba8:	b25b      	sxtb	r3, r3
    ebaa:	2b00      	cmp	r3, #0
    ebac:	d145      	bne.n	ec3a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    ebae:	683b      	ldr	r3, [r7, #0]
    ebb0:	2201      	movs	r2, #1
    ebb2:	4013      	ands	r3, r2
    ebb4:	d000      	beq.n	ebb8 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    ebb6:	e7ed      	b.n	eb94 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    ebb8:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    ebba:	1dfc      	adds	r4, r7, #7
    ebbc:	003b      	movs	r3, r7
    ebbe:	0019      	movs	r1, r3
    ebc0:	2001      	movs	r0, #1
    ebc2:	4b25      	ldr	r3, [pc, #148]	; (ec58 <chip_sleep+0xd0>)
    ebc4:	4798      	blx	r3
    ebc6:	0003      	movs	r3, r0
    ebc8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    ebca:	1dfb      	adds	r3, r7, #7
    ebcc:	781b      	ldrb	r3, [r3, #0]
    ebce:	b25b      	sxtb	r3, r3
    ebd0:	2b00      	cmp	r3, #0
    ebd2:	d134      	bne.n	ec3e <chip_sleep+0xb6>
	if(reg & NBIT1)
    ebd4:	683b      	ldr	r3, [r7, #0]
    ebd6:	2202      	movs	r2, #2
    ebd8:	4013      	ands	r3, r2
    ebda:	d010      	beq.n	ebfe <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    ebdc:	683b      	ldr	r3, [r7, #0]
    ebde:	2202      	movs	r2, #2
    ebe0:	4393      	bics	r3, r2
    ebe2:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    ebe4:	683b      	ldr	r3, [r7, #0]
    ebe6:	1dfc      	adds	r4, r7, #7
    ebe8:	0019      	movs	r1, r3
    ebea:	2001      	movs	r0, #1
    ebec:	4b1b      	ldr	r3, [pc, #108]	; (ec5c <chip_sleep+0xd4>)
    ebee:	4798      	blx	r3
    ebf0:	0003      	movs	r3, r0
    ebf2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    ebf4:	1dfb      	adds	r3, r7, #7
    ebf6:	781b      	ldrb	r3, [r3, #0]
    ebf8:	b25b      	sxtb	r3, r3
    ebfa:	2b00      	cmp	r3, #0
    ebfc:	d121      	bne.n	ec42 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    ebfe:	1dfc      	adds	r4, r7, #7
    ec00:	003b      	movs	r3, r7
    ec02:	0019      	movs	r1, r3
    ec04:	200b      	movs	r0, #11
    ec06:	4b14      	ldr	r3, [pc, #80]	; (ec58 <chip_sleep+0xd0>)
    ec08:	4798      	blx	r3
    ec0a:	0003      	movs	r3, r0
    ec0c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    ec0e:	1dfb      	adds	r3, r7, #7
    ec10:	781b      	ldrb	r3, [r3, #0]
    ec12:	b25b      	sxtb	r3, r3
    ec14:	2b00      	cmp	r3, #0
    ec16:	d116      	bne.n	ec46 <chip_sleep+0xbe>
	if(reg & NBIT0)
    ec18:	683b      	ldr	r3, [r7, #0]
    ec1a:	2201      	movs	r2, #1
    ec1c:	4013      	ands	r3, r2
    ec1e:	d013      	beq.n	ec48 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    ec20:	683b      	ldr	r3, [r7, #0]
    ec22:	2201      	movs	r2, #1
    ec24:	4393      	bics	r3, r2
    ec26:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    ec28:	683b      	ldr	r3, [r7, #0]
    ec2a:	1dfc      	adds	r4, r7, #7
    ec2c:	0019      	movs	r1, r3
    ec2e:	200b      	movs	r0, #11
    ec30:	4b0a      	ldr	r3, [pc, #40]	; (ec5c <chip_sleep+0xd4>)
    ec32:	4798      	blx	r3
    ec34:	0003      	movs	r3, r0
    ec36:	7023      	strb	r3, [r4, #0]
    ec38:	e006      	b.n	ec48 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    ec3a:	46c0      	nop			; (mov r8, r8)
    ec3c:	e004      	b.n	ec48 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    ec3e:	46c0      	nop			; (mov r8, r8)
    ec40:	e002      	b.n	ec48 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    ec42:	46c0      	nop			; (mov r8, r8)
    ec44:	e000      	b.n	ec48 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    ec46:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    ec48:	1dfb      	adds	r3, r7, #7
    ec4a:	781b      	ldrb	r3, [r3, #0]
    ec4c:	b25b      	sxtb	r3, r3
}
    ec4e:	0018      	movs	r0, r3
    ec50:	46bd      	mov	sp, r7
    ec52:	b003      	add	sp, #12
    ec54:	bd90      	pop	{r4, r7, pc}
    ec56:	46c0      	nop			; (mov r8, r8)
    ec58:	0000f191 	.word	0x0000f191
    ec5c:	0000f1b5 	.word	0x0000f1b5

0000ec60 <chip_wake>:
sint8 chip_wake(void)
{
    ec60:	b590      	push	{r4, r7, lr}
    ec62:	b085      	sub	sp, #20
    ec64:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    ec66:	230f      	movs	r3, #15
    ec68:	18fb      	adds	r3, r7, r3
    ec6a:	2200      	movs	r2, #0
    ec6c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    ec6e:	2300      	movs	r3, #0
    ec70:	607b      	str	r3, [r7, #4]
    ec72:	2300      	movs	r3, #0
    ec74:	603b      	str	r3, [r7, #0]
    ec76:	2300      	movs	r3, #0
    ec78:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    ec7a:	230f      	movs	r3, #15
    ec7c:	18fc      	adds	r4, r7, r3
    ec7e:	1d3b      	adds	r3, r7, #4
    ec80:	0019      	movs	r1, r3
    ec82:	200b      	movs	r0, #11
    ec84:	4b4e      	ldr	r3, [pc, #312]	; (edc0 <chip_wake+0x160>)
    ec86:	4798      	blx	r3
    ec88:	0003      	movs	r3, r0
    ec8a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    ec8c:	230f      	movs	r3, #15
    ec8e:	18fb      	adds	r3, r7, r3
    ec90:	781b      	ldrb	r3, [r3, #0]
    ec92:	b25b      	sxtb	r3, r3
    ec94:	2b00      	cmp	r3, #0
    ec96:	d000      	beq.n	ec9a <chip_wake+0x3a>
    ec98:	e082      	b.n	eda0 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
    ec9a:	687b      	ldr	r3, [r7, #4]
    ec9c:	2201      	movs	r2, #1
    ec9e:	4013      	ands	r3, r2
    eca0:	d111      	bne.n	ecc6 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    eca2:	687b      	ldr	r3, [r7, #4]
    eca4:	2201      	movs	r2, #1
    eca6:	4313      	orrs	r3, r2
    eca8:	220f      	movs	r2, #15
    ecaa:	18bc      	adds	r4, r7, r2
    ecac:	0019      	movs	r1, r3
    ecae:	200b      	movs	r0, #11
    ecb0:	4b44      	ldr	r3, [pc, #272]	; (edc4 <chip_wake+0x164>)
    ecb2:	4798      	blx	r3
    ecb4:	0003      	movs	r3, r0
    ecb6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    ecb8:	230f      	movs	r3, #15
    ecba:	18fb      	adds	r3, r7, r3
    ecbc:	781b      	ldrb	r3, [r3, #0]
    ecbe:	b25b      	sxtb	r3, r3
    ecc0:	2b00      	cmp	r3, #0
    ecc2:	d000      	beq.n	ecc6 <chip_wake+0x66>
    ecc4:	e06e      	b.n	eda4 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    ecc6:	230f      	movs	r3, #15
    ecc8:	18fc      	adds	r4, r7, r3
    ecca:	1d3b      	adds	r3, r7, #4
    eccc:	0019      	movs	r1, r3
    ecce:	2001      	movs	r0, #1
    ecd0:	4b3b      	ldr	r3, [pc, #236]	; (edc0 <chip_wake+0x160>)
    ecd2:	4798      	blx	r3
    ecd4:	0003      	movs	r3, r0
    ecd6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    ecd8:	230f      	movs	r3, #15
    ecda:	18fb      	adds	r3, r7, r3
    ecdc:	781b      	ldrb	r3, [r3, #0]
    ecde:	b25b      	sxtb	r3, r3
    ece0:	2b00      	cmp	r3, #0
    ece2:	d161      	bne.n	eda8 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    ece4:	687b      	ldr	r3, [r7, #4]
    ece6:	2202      	movs	r2, #2
    ece8:	4013      	ands	r3, r2
    ecea:	d110      	bne.n	ed0e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    ecec:	687b      	ldr	r3, [r7, #4]
    ecee:	2202      	movs	r2, #2
    ecf0:	4313      	orrs	r3, r2
    ecf2:	220f      	movs	r2, #15
    ecf4:	18bc      	adds	r4, r7, r2
    ecf6:	0019      	movs	r1, r3
    ecf8:	2001      	movs	r0, #1
    ecfa:	4b32      	ldr	r3, [pc, #200]	; (edc4 <chip_wake+0x164>)
    ecfc:	4798      	blx	r3
    ecfe:	0003      	movs	r3, r0
    ed00:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    ed02:	230f      	movs	r3, #15
    ed04:	18fb      	adds	r3, r7, r3
    ed06:	781b      	ldrb	r3, [r3, #0]
    ed08:	b25b      	sxtb	r3, r3
    ed0a:	2b00      	cmp	r3, #0
    ed0c:	d14e      	bne.n	edac <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    ed0e:	230f      	movs	r3, #15
    ed10:	18fc      	adds	r4, r7, r3
    ed12:	003b      	movs	r3, r7
    ed14:	0019      	movs	r1, r3
    ed16:	200f      	movs	r0, #15
    ed18:	4b29      	ldr	r3, [pc, #164]	; (edc0 <chip_wake+0x160>)
    ed1a:	4798      	blx	r3
    ed1c:	0003      	movs	r3, r0
    ed1e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    ed20:	230f      	movs	r3, #15
    ed22:	18fb      	adds	r3, r7, r3
    ed24:	781b      	ldrb	r3, [r3, #0]
    ed26:	b25b      	sxtb	r3, r3
    ed28:	2b00      	cmp	r3, #0
    ed2a:	d014      	beq.n	ed56 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    ed2c:	23a8      	movs	r3, #168	; 0xa8
    ed2e:	005a      	lsls	r2, r3, #1
    ed30:	4925      	ldr	r1, [pc, #148]	; (edc8 <chip_wake+0x168>)
    ed32:	4b26      	ldr	r3, [pc, #152]	; (edcc <chip_wake+0x16c>)
    ed34:	0018      	movs	r0, r3
    ed36:	4b26      	ldr	r3, [pc, #152]	; (edd0 <chip_wake+0x170>)
    ed38:	4798      	blx	r3
    ed3a:	230f      	movs	r3, #15
    ed3c:	18fb      	adds	r3, r7, r3
    ed3e:	2100      	movs	r1, #0
    ed40:	5659      	ldrsb	r1, [r3, r1]
    ed42:	683a      	ldr	r2, [r7, #0]
    ed44:	4b23      	ldr	r3, [pc, #140]	; (edd4 <chip_wake+0x174>)
    ed46:	0018      	movs	r0, r3
    ed48:	4b21      	ldr	r3, [pc, #132]	; (edd0 <chip_wake+0x170>)
    ed4a:	4798      	blx	r3
    ed4c:	4b22      	ldr	r3, [pc, #136]	; (edd8 <chip_wake+0x178>)
    ed4e:	0018      	movs	r0, r3
    ed50:	4b1f      	ldr	r3, [pc, #124]	; (edd0 <chip_wake+0x170>)
    ed52:	4798      	blx	r3
			goto _WAKE_EXIT;
    ed54:	e02b      	b.n	edae <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
    ed56:	683b      	ldr	r3, [r7, #0]
    ed58:	2204      	movs	r2, #4
    ed5a:	4013      	ands	r3, r2
    ed5c:	d11c      	bne.n	ed98 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
    ed5e:	2002      	movs	r0, #2
    ed60:	4b1e      	ldr	r3, [pc, #120]	; (eddc <chip_wake+0x17c>)
    ed62:	4798      	blx	r3
		trials++;
    ed64:	68bb      	ldr	r3, [r7, #8]
    ed66:	3301      	adds	r3, #1
    ed68:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    ed6a:	68bb      	ldr	r3, [r7, #8]
    ed6c:	2b04      	cmp	r3, #4
    ed6e:	d9ce      	bls.n	ed0e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
    ed70:	23ad      	movs	r3, #173	; 0xad
    ed72:	005a      	lsls	r2, r3, #1
    ed74:	4914      	ldr	r1, [pc, #80]	; (edc8 <chip_wake+0x168>)
    ed76:	4b15      	ldr	r3, [pc, #84]	; (edcc <chip_wake+0x16c>)
    ed78:	0018      	movs	r0, r3
    ed7a:	4b15      	ldr	r3, [pc, #84]	; (edd0 <chip_wake+0x170>)
    ed7c:	4798      	blx	r3
    ed7e:	4b18      	ldr	r3, [pc, #96]	; (ede0 <chip_wake+0x180>)
    ed80:	0018      	movs	r0, r3
    ed82:	4b13      	ldr	r3, [pc, #76]	; (edd0 <chip_wake+0x170>)
    ed84:	4798      	blx	r3
    ed86:	4b14      	ldr	r3, [pc, #80]	; (edd8 <chip_wake+0x178>)
    ed88:	0018      	movs	r0, r3
    ed8a:	4b11      	ldr	r3, [pc, #68]	; (edd0 <chip_wake+0x170>)
    ed8c:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    ed8e:	230f      	movs	r3, #15
    ed90:	18fb      	adds	r3, r7, r3
    ed92:	22fc      	movs	r2, #252	; 0xfc
    ed94:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    ed96:	e00a      	b.n	edae <chip_wake+0x14e>
			break;
    ed98:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    ed9a:	4b12      	ldr	r3, [pc, #72]	; (ede4 <chip_wake+0x184>)
    ed9c:	4798      	blx	r3
    ed9e:	e006      	b.n	edae <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    eda0:	46c0      	nop			; (mov r8, r8)
    eda2:	e004      	b.n	edae <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    eda4:	46c0      	nop			; (mov r8, r8)
    eda6:	e002      	b.n	edae <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    eda8:	46c0      	nop			; (mov r8, r8)
    edaa:	e000      	b.n	edae <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    edac:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    edae:	230f      	movs	r3, #15
    edb0:	18fb      	adds	r3, r7, r3
    edb2:	781b      	ldrb	r3, [r3, #0]
    edb4:	b25b      	sxtb	r3, r3
}
    edb6:	0018      	movs	r0, r3
    edb8:	46bd      	mov	sp, r7
    edba:	b005      	add	sp, #20
    edbc:	bd90      	pop	{r4, r7, pc}
    edbe:	46c0      	nop			; (mov r8, r8)
    edc0:	0000f191 	.word	0x0000f191
    edc4:	0000f1b5 	.word	0x0000f1b5
    edc8:	00025b08 	.word	0x00025b08
    edcc:	00025a7c 	.word	0x00025a7c
    edd0:	0000a3cd 	.word	0x0000a3cd
    edd4:	00025a90 	.word	0x00025a90
    edd8:	00025aa8 	.word	0x00025aa8
    eddc:	0000c821 	.word	0x0000c821
    ede0:	00025aac 	.word	0x00025aac
    ede4:	0000f151 	.word	0x0000f151

0000ede8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    ede8:	b580      	push	{r7, lr}
    edea:	b088      	sub	sp, #32
    edec:	af00      	add	r7, sp, #0
    edee:	0002      	movs	r2, r0
    edf0:	1dfb      	adds	r3, r7, #7
    edf2:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    edf4:	2313      	movs	r3, #19
    edf6:	18fb      	adds	r3, r7, r3
    edf8:	2200      	movs	r2, #0
    edfa:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    edfc:	2300      	movs	r3, #0
    edfe:	61fb      	str	r3, [r7, #28]
    ee00:	2300      	movs	r3, #0
    ee02:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    ee04:	2300      	movs	r3, #0
    ee06:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    ee08:	4b4a      	ldr	r3, [pc, #296]	; (ef34 <wait_for_bootrom+0x14c>)
    ee0a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
    ee0c:	2300      	movs	r3, #0
    ee0e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    ee10:	4b49      	ldr	r3, [pc, #292]	; (ef38 <wait_for_bootrom+0x150>)
    ee12:	0018      	movs	r0, r3
    ee14:	4b49      	ldr	r3, [pc, #292]	; (ef3c <wait_for_bootrom+0x154>)
    ee16:	4798      	blx	r3
    ee18:	0003      	movs	r3, r0
    ee1a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    ee1c:	69fb      	ldr	r3, [r7, #28]
    ee1e:	2b00      	cmp	r3, #0
    ee20:	db03      	blt.n	ee2a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    ee22:	2001      	movs	r0, #1
    ee24:	4b46      	ldr	r3, [pc, #280]	; (ef40 <wait_for_bootrom+0x158>)
    ee26:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    ee28:	e7f2      	b.n	ee10 <wait_for_bootrom+0x28>
			break;
    ee2a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    ee2c:	4b45      	ldr	r3, [pc, #276]	; (ef44 <wait_for_bootrom+0x15c>)
    ee2e:	0018      	movs	r0, r3
    ee30:	4b42      	ldr	r3, [pc, #264]	; (ef3c <wait_for_bootrom+0x154>)
    ee32:	4798      	blx	r3
    ee34:	0003      	movs	r3, r0
    ee36:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    ee38:	69fb      	ldr	r3, [r7, #28]
    ee3a:	2201      	movs	r2, #1
    ee3c:	4013      	ands	r3, r2
    ee3e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    ee40:	69fb      	ldr	r3, [r7, #28]
    ee42:	2b00      	cmp	r3, #0
    ee44:	d112      	bne.n	ee6c <wait_for_bootrom+0x84>
	{
		reg = 0;
    ee46:	2300      	movs	r3, #0
    ee48:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    ee4a:	e00b      	b.n	ee64 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    ee4c:	2001      	movs	r0, #1
    ee4e:	4b3c      	ldr	r3, [pc, #240]	; (ef40 <wait_for_bootrom+0x158>)
    ee50:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    ee52:	4b3d      	ldr	r3, [pc, #244]	; (ef48 <wait_for_bootrom+0x160>)
    ee54:	0018      	movs	r0, r3
    ee56:	4b39      	ldr	r3, [pc, #228]	; (ef3c <wait_for_bootrom+0x154>)
    ee58:	4798      	blx	r3
    ee5a:	0003      	movs	r3, r0
    ee5c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    ee5e:	69bb      	ldr	r3, [r7, #24]
    ee60:	3301      	adds	r3, #1
    ee62:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    ee64:	69fb      	ldr	r3, [r7, #28]
    ee66:	4a39      	ldr	r2, [pc, #228]	; (ef4c <wait_for_bootrom+0x164>)
    ee68:	4293      	cmp	r3, r2
    ee6a:	d1ef      	bne.n	ee4c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    ee6c:	1dfb      	adds	r3, r7, #7
    ee6e:	781b      	ldrb	r3, [r3, #0]
    ee70:	2b02      	cmp	r3, #2
    ee72:	d10d      	bne.n	ee90 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    ee74:	4a36      	ldr	r2, [pc, #216]	; (ef50 <wait_for_bootrom+0x168>)
    ee76:	4b37      	ldr	r3, [pc, #220]	; (ef54 <wait_for_bootrom+0x16c>)
    ee78:	0011      	movs	r1, r2
    ee7a:	0018      	movs	r0, r3
    ee7c:	4b36      	ldr	r3, [pc, #216]	; (ef58 <wait_for_bootrom+0x170>)
    ee7e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    ee80:	2380      	movs	r3, #128	; 0x80
    ee82:	035b      	lsls	r3, r3, #13
    ee84:	4a35      	ldr	r2, [pc, #212]	; (ef5c <wait_for_bootrom+0x174>)
    ee86:	0019      	movs	r1, r3
    ee88:	0010      	movs	r0, r2
    ee8a:	4b33      	ldr	r3, [pc, #204]	; (ef58 <wait_for_bootrom+0x170>)
    ee8c:	4798      	blx	r3
    ee8e:	e022      	b.n	eed6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    ee90:	1dfb      	adds	r3, r7, #7
    ee92:	781b      	ldrb	r3, [r3, #0]
    ee94:	2b03      	cmp	r3, #3
    ee96:	d10b      	bne.n	eeb0 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    ee98:	4a2d      	ldr	r2, [pc, #180]	; (ef50 <wait_for_bootrom+0x168>)
    ee9a:	4b2e      	ldr	r3, [pc, #184]	; (ef54 <wait_for_bootrom+0x16c>)
    ee9c:	0011      	movs	r1, r2
    ee9e:	0018      	movs	r0, r3
    eea0:	4b2d      	ldr	r3, [pc, #180]	; (ef58 <wait_for_bootrom+0x170>)
    eea2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    eea4:	4b2d      	ldr	r3, [pc, #180]	; (ef5c <wait_for_bootrom+0x174>)
    eea6:	2100      	movs	r1, #0
    eea8:	0018      	movs	r0, r3
    eeaa:	4b2b      	ldr	r3, [pc, #172]	; (ef58 <wait_for_bootrom+0x170>)
    eeac:	4798      	blx	r3
    eeae:	e012      	b.n	eed6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    eeb0:	1dfb      	adds	r3, r7, #7
    eeb2:	781b      	ldrb	r3, [r3, #0]
    eeb4:	2b04      	cmp	r3, #4
    eeb6:	d108      	bne.n	eeca <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    eeb8:	2380      	movs	r3, #128	; 0x80
    eeba:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    eebc:	68fb      	ldr	r3, [r7, #12]
    eebe:	4a27      	ldr	r2, [pc, #156]	; (ef5c <wait_for_bootrom+0x174>)
    eec0:	0019      	movs	r1, r3
    eec2:	0010      	movs	r0, r2
    eec4:	4b24      	ldr	r3, [pc, #144]	; (ef58 <wait_for_bootrom+0x170>)
    eec6:	4798      	blx	r3
    eec8:	e005      	b.n	eed6 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    eeca:	68fb      	ldr	r3, [r7, #12]
    eecc:	4a23      	ldr	r2, [pc, #140]	; (ef5c <wait_for_bootrom+0x174>)
    eece:	0019      	movs	r1, r3
    eed0:	0010      	movs	r0, r2
    eed2:	4b21      	ldr	r3, [pc, #132]	; (ef58 <wait_for_bootrom+0x170>)
    eed4:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    eed6:	4b22      	ldr	r3, [pc, #136]	; (ef60 <wait_for_bootrom+0x178>)
    eed8:	4798      	blx	r3
    eeda:	0003      	movs	r3, r0
    eedc:	051b      	lsls	r3, r3, #20
    eede:	0d1b      	lsrs	r3, r3, #20
    eee0:	4a20      	ldr	r2, [pc, #128]	; (ef64 <wait_for_bootrom+0x17c>)
    eee2:	4293      	cmp	r3, r2
    eee4:	d906      	bls.n	eef4 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    eee6:	697b      	ldr	r3, [r7, #20]
    eee8:	2202      	movs	r2, #2
    eeea:	4313      	orrs	r3, r2
    eeec:	0018      	movs	r0, r3
    eeee:	4b1e      	ldr	r3, [pc, #120]	; (ef68 <wait_for_bootrom+0x180>)
    eef0:	4798      	blx	r3
    eef2:	e003      	b.n	eefc <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    eef4:	697b      	ldr	r3, [r7, #20]
    eef6:	0018      	movs	r0, r3
    eef8:	4b1b      	ldr	r3, [pc, #108]	; (ef68 <wait_for_bootrom+0x180>)
    eefa:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    eefc:	4b1b      	ldr	r3, [pc, #108]	; (ef6c <wait_for_bootrom+0x184>)
    eefe:	0018      	movs	r0, r3
    ef00:	4b1b      	ldr	r3, [pc, #108]	; (ef70 <wait_for_bootrom+0x188>)
    ef02:	4798      	blx	r3
    ef04:	68fa      	ldr	r2, [r7, #12]
    ef06:	4b1b      	ldr	r3, [pc, #108]	; (ef74 <wait_for_bootrom+0x18c>)
    ef08:	0011      	movs	r1, r2
    ef0a:	0018      	movs	r0, r3
    ef0c:	4b18      	ldr	r3, [pc, #96]	; (ef70 <wait_for_bootrom+0x188>)
    ef0e:	4798      	blx	r3
    ef10:	4b19      	ldr	r3, [pc, #100]	; (ef78 <wait_for_bootrom+0x190>)
    ef12:	0018      	movs	r0, r3
    ef14:	4b16      	ldr	r3, [pc, #88]	; (ef70 <wait_for_bootrom+0x188>)
    ef16:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    ef18:	4a18      	ldr	r2, [pc, #96]	; (ef7c <wait_for_bootrom+0x194>)
    ef1a:	4b0b      	ldr	r3, [pc, #44]	; (ef48 <wait_for_bootrom+0x160>)
    ef1c:	0011      	movs	r1, r2
    ef1e:	0018      	movs	r0, r3
    ef20:	4b0d      	ldr	r3, [pc, #52]	; (ef58 <wait_for_bootrom+0x170>)
    ef22:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    ef24:	2313      	movs	r3, #19
    ef26:	18fb      	adds	r3, r7, r3
    ef28:	781b      	ldrb	r3, [r3, #0]
    ef2a:	b25b      	sxtb	r3, r3
}
    ef2c:	0018      	movs	r0, r3
    ef2e:	46bd      	mov	sp, r7
    ef30:	b008      	add	sp, #32
    ef32:	bd80      	pop	{r7, pc}
    ef34:	13301354 	.word	0x13301354
    ef38:	00001014 	.word	0x00001014
    ef3c:	0000f171 	.word	0x0000f171
    ef40:	0000c821 	.word	0x0000c821
    ef44:	000207bc 	.word	0x000207bc
    ef48:	000c000c 	.word	0x000c000c
    ef4c:	10add09e 	.word	0x10add09e
    ef50:	3c1cd57d 	.word	0x3c1cd57d
    ef54:	000207ac 	.word	0x000207ac
    ef58:	0000f1b5 	.word	0x0000f1b5
    ef5c:	0000108c 	.word	0x0000108c
    ef60:	0000ea91 	.word	0x0000ea91
    ef64:	0000039f 	.word	0x0000039f
    ef68:	0000e961 	.word	0x0000e961
    ef6c:	00025ac8 	.word	0x00025ac8
    ef70:	0000a3cd 	.word	0x0000a3cd
    ef74:	00025ad4 	.word	0x00025ad4
    ef78:	00025aa8 	.word	0x00025aa8
    ef7c:	ef522f61 	.word	0xef522f61

0000ef80 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    ef80:	b580      	push	{r7, lr}
    ef82:	b088      	sub	sp, #32
    ef84:	af00      	add	r7, sp, #0
    ef86:	0002      	movs	r2, r0
    ef88:	1dfb      	adds	r3, r7, #7
    ef8a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    ef8c:	231f      	movs	r3, #31
    ef8e:	18fb      	adds	r3, r7, r3
    ef90:	2200      	movs	r2, #0
    ef92:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    ef94:	2300      	movs	r3, #0
    ef96:	61bb      	str	r3, [r7, #24]
    ef98:	2300      	movs	r3, #0
    ef9a:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    ef9c:	2301      	movs	r3, #1
    ef9e:	425b      	negs	r3, r3
    efa0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    efa2:	4b1d      	ldr	r3, [pc, #116]	; (f018 <wait_for_firmware_start+0x98>)
    efa4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    efa6:	4b1d      	ldr	r3, [pc, #116]	; (f01c <wait_for_firmware_start+0x9c>)
    efa8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    efaa:	1dfb      	adds	r3, r7, #7
    efac:	781b      	ldrb	r3, [r3, #0]
    efae:	2b02      	cmp	r3, #2
    efb0:	d003      	beq.n	efba <wait_for_firmware_start+0x3a>
    efb2:	1dfb      	adds	r3, r7, #7
    efb4:	781b      	ldrb	r3, [r3, #0]
    efb6:	2b03      	cmp	r3, #3
    efb8:	d119      	bne.n	efee <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    efba:	4b19      	ldr	r3, [pc, #100]	; (f020 <wait_for_firmware_start+0xa0>)
    efbc:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    efbe:	4b19      	ldr	r3, [pc, #100]	; (f024 <wait_for_firmware_start+0xa4>)
    efc0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    efc2:	e014      	b.n	efee <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    efc4:	2002      	movs	r0, #2
    efc6:	4b18      	ldr	r3, [pc, #96]	; (f028 <wait_for_firmware_start+0xa8>)
    efc8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    efca:	68fb      	ldr	r3, [r7, #12]
    efcc:	0018      	movs	r0, r3
    efce:	4b17      	ldr	r3, [pc, #92]	; (f02c <wait_for_firmware_start+0xac>)
    efd0:	4798      	blx	r3
    efd2:	0003      	movs	r3, r0
    efd4:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    efd6:	697b      	ldr	r3, [r7, #20]
    efd8:	3301      	adds	r3, #1
    efda:	617b      	str	r3, [r7, #20]
    efdc:	697a      	ldr	r2, [r7, #20]
    efde:	693b      	ldr	r3, [r7, #16]
    efe0:	429a      	cmp	r2, r3
    efe2:	d304      	bcc.n	efee <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    efe4:	231f      	movs	r3, #31
    efe6:	18fb      	adds	r3, r7, r3
    efe8:	22fb      	movs	r2, #251	; 0xfb
    efea:	701a      	strb	r2, [r3, #0]
			goto ERR;
    efec:	e00c      	b.n	f008 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    efee:	68ba      	ldr	r2, [r7, #8]
    eff0:	69bb      	ldr	r3, [r7, #24]
    eff2:	429a      	cmp	r2, r3
    eff4:	d1e6      	bne.n	efc4 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    eff6:	68bb      	ldr	r3, [r7, #8]
    eff8:	4a08      	ldr	r2, [pc, #32]	; (f01c <wait_for_firmware_start+0x9c>)
    effa:	4293      	cmp	r3, r2
    effc:	d104      	bne.n	f008 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    effe:	4b06      	ldr	r3, [pc, #24]	; (f018 <wait_for_firmware_start+0x98>)
    f000:	2100      	movs	r1, #0
    f002:	0018      	movs	r0, r3
    f004:	4b0a      	ldr	r3, [pc, #40]	; (f030 <wait_for_firmware_start+0xb0>)
    f006:	4798      	blx	r3
	}
ERR:
	return ret;
    f008:	231f      	movs	r3, #31
    f00a:	18fb      	adds	r3, r7, r3
    f00c:	781b      	ldrb	r3, [r3, #0]
    f00e:	b25b      	sxtb	r3, r3
}
    f010:	0018      	movs	r0, r3
    f012:	46bd      	mov	sp, r7
    f014:	b008      	add	sp, #32
    f016:	bd80      	pop	{r7, pc}
    f018:	0000108c 	.word	0x0000108c
    f01c:	02532636 	.word	0x02532636
    f020:	000207ac 	.word	0x000207ac
    f024:	d75dc1c3 	.word	0xd75dc1c3
    f028:	0000c821 	.word	0x0000c821
    f02c:	0000f171 	.word	0x0000f171
    f030:	0000f1b5 	.word	0x0000f1b5

0000f034 <chip_deinit>:

sint8 chip_deinit(void)
{
    f034:	b590      	push	{r4, r7, lr}
    f036:	b083      	sub	sp, #12
    f038:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    f03a:	2300      	movs	r3, #0
    f03c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    f03e:	1dfc      	adds	r4, r7, #7
    f040:	003a      	movs	r2, r7
    f042:	23a0      	movs	r3, #160	; 0xa0
    f044:	015b      	lsls	r3, r3, #5
    f046:	0011      	movs	r1, r2
    f048:	0018      	movs	r0, r3
    f04a:	4b20      	ldr	r3, [pc, #128]	; (f0cc <chip_deinit+0x98>)
    f04c:	4798      	blx	r3
    f04e:	0003      	movs	r3, r0
    f050:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    f052:	1dfb      	adds	r3, r7, #7
    f054:	781b      	ldrb	r3, [r3, #0]
    f056:	b25b      	sxtb	r3, r3
    f058:	2b00      	cmp	r3, #0
    f05a:	d00e      	beq.n	f07a <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
    f05c:	4a1c      	ldr	r2, [pc, #112]	; (f0d0 <chip_deinit+0x9c>)
    f05e:	491d      	ldr	r1, [pc, #116]	; (f0d4 <chip_deinit+0xa0>)
    f060:	4b1d      	ldr	r3, [pc, #116]	; (f0d8 <chip_deinit+0xa4>)
    f062:	0018      	movs	r0, r3
    f064:	4b1d      	ldr	r3, [pc, #116]	; (f0dc <chip_deinit+0xa8>)
    f066:	4798      	blx	r3
    f068:	4b1d      	ldr	r3, [pc, #116]	; (f0e0 <chip_deinit+0xac>)
    f06a:	0018      	movs	r0, r3
    f06c:	4b1b      	ldr	r3, [pc, #108]	; (f0dc <chip_deinit+0xa8>)
    f06e:	4798      	blx	r3
    f070:	4b1c      	ldr	r3, [pc, #112]	; (f0e4 <chip_deinit+0xb0>)
    f072:	0018      	movs	r0, r3
    f074:	4b19      	ldr	r3, [pc, #100]	; (f0dc <chip_deinit+0xa8>)
    f076:	4798      	blx	r3
		goto ERR1;
    f078:	e021      	b.n	f0be <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
    f07a:	683b      	ldr	r3, [r7, #0]
    f07c:	4a1a      	ldr	r2, [pc, #104]	; (f0e8 <chip_deinit+0xb4>)
    f07e:	4013      	ands	r3, r2
    f080:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    f082:	683a      	ldr	r2, [r7, #0]
    f084:	1dfc      	adds	r4, r7, #7
    f086:	23a0      	movs	r3, #160	; 0xa0
    f088:	015b      	lsls	r3, r3, #5
    f08a:	0011      	movs	r1, r2
    f08c:	0018      	movs	r0, r3
    f08e:	4b17      	ldr	r3, [pc, #92]	; (f0ec <chip_deinit+0xb8>)
    f090:	4798      	blx	r3
    f092:	0003      	movs	r3, r0
    f094:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    f096:	1dfb      	adds	r3, r7, #7
    f098:	781b      	ldrb	r3, [r3, #0]
    f09a:	b25b      	sxtb	r3, r3
    f09c:	2b00      	cmp	r3, #0
    f09e:	d00e      	beq.n	f0be <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
    f0a0:	4a13      	ldr	r2, [pc, #76]	; (f0f0 <chip_deinit+0xbc>)
    f0a2:	490c      	ldr	r1, [pc, #48]	; (f0d4 <chip_deinit+0xa0>)
    f0a4:	4b0c      	ldr	r3, [pc, #48]	; (f0d8 <chip_deinit+0xa4>)
    f0a6:	0018      	movs	r0, r3
    f0a8:	4b0c      	ldr	r3, [pc, #48]	; (f0dc <chip_deinit+0xa8>)
    f0aa:	4798      	blx	r3
    f0ac:	4b0c      	ldr	r3, [pc, #48]	; (f0e0 <chip_deinit+0xac>)
    f0ae:	0018      	movs	r0, r3
    f0b0:	4b0a      	ldr	r3, [pc, #40]	; (f0dc <chip_deinit+0xa8>)
    f0b2:	4798      	blx	r3
    f0b4:	4b0b      	ldr	r3, [pc, #44]	; (f0e4 <chip_deinit+0xb0>)
    f0b6:	0018      	movs	r0, r3
    f0b8:	4b08      	ldr	r3, [pc, #32]	; (f0dc <chip_deinit+0xa8>)
    f0ba:	4798      	blx	r3
		goto ERR1;
    f0bc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    f0be:	1dfb      	adds	r3, r7, #7
    f0c0:	781b      	ldrb	r3, [r3, #0]
    f0c2:	b25b      	sxtb	r3, r3
}
    f0c4:	0018      	movs	r0, r3
    f0c6:	46bd      	mov	sp, r7
    f0c8:	b003      	add	sp, #12
    f0ca:	bd90      	pop	{r4, r7, pc}
    f0cc:	0000f191 	.word	0x0000f191
    f0d0:	00000201 	.word	0x00000201
    f0d4:	00025b14 	.word	0x00025b14
    f0d8:	00025a7c 	.word	0x00025a7c
    f0dc:	0000a3cd 	.word	0x0000a3cd
    f0e0:	00025aec 	.word	0x00025aec
    f0e4:	00025aa8 	.word	0x00025aa8
    f0e8:	fffffbff 	.word	0xfffffbff
    f0ec:	0000f1b5 	.word	0x0000f1b5
    f0f0:	00000207 	.word	0x00000207

0000f0f4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    f0f4:	b590      	push	{r4, r7, lr}
    f0f6:	b085      	sub	sp, #20
    f0f8:	af00      	add	r7, sp, #0
    f0fa:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    f0fc:	230f      	movs	r3, #15
    f0fe:	18fb      	adds	r3, r7, r3
    f100:	2200      	movs	r2, #0
    f102:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    f104:	230f      	movs	r3, #15
    f106:	18fc      	adds	r4, r7, r3
    f108:	687b      	ldr	r3, [r7, #4]
    f10a:	0018      	movs	r0, r3
    f10c:	4b05      	ldr	r3, [pc, #20]	; (f124 <nm_bus_iface_init+0x30>)
    f10e:	4798      	blx	r3
    f110:	0003      	movs	r3, r0
    f112:	7023      	strb	r3, [r4, #0]
	return ret;
    f114:	230f      	movs	r3, #15
    f116:	18fb      	adds	r3, r7, r3
    f118:	781b      	ldrb	r3, [r3, #0]
    f11a:	b25b      	sxtb	r3, r3
}
    f11c:	0018      	movs	r0, r3
    f11e:	46bd      	mov	sp, r7
    f120:	b005      	add	sp, #20
    f122:	bd90      	pop	{r4, r7, pc}
    f124:	0000cedd 	.word	0x0000cedd

0000f128 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    f128:	b590      	push	{r4, r7, lr}
    f12a:	b083      	sub	sp, #12
    f12c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    f12e:	1dfb      	adds	r3, r7, #7
    f130:	2200      	movs	r2, #0
    f132:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    f134:	1dfc      	adds	r4, r7, #7
    f136:	4b05      	ldr	r3, [pc, #20]	; (f14c <nm_bus_iface_deinit+0x24>)
    f138:	4798      	blx	r3
    f13a:	0003      	movs	r3, r0
    f13c:	7023      	strb	r3, [r4, #0]

	return ret;
    f13e:	1dfb      	adds	r3, r7, #7
    f140:	781b      	ldrb	r3, [r3, #0]
    f142:	b25b      	sxtb	r3, r3
}
    f144:	0018      	movs	r0, r3
    f146:	46bd      	mov	sp, r7
    f148:	b003      	add	sp, #12
    f14a:	bd90      	pop	{r4, r7, pc}
    f14c:	0000d055 	.word	0x0000d055

0000f150 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    f150:	b580      	push	{r7, lr}
    f152:	b082      	sub	sp, #8
    f154:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    f156:	1dfb      	adds	r3, r7, #7
    f158:	2200      	movs	r2, #0
    f15a:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    f15c:	4b03      	ldr	r3, [pc, #12]	; (f16c <nm_bus_reset+0x1c>)
    f15e:	4798      	blx	r3
    f160:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    f162:	0018      	movs	r0, r3
    f164:	46bd      	mov	sp, r7
    f166:	b002      	add	sp, #8
    f168:	bd80      	pop	{r7, pc}
    f16a:	46c0      	nop			; (mov r8, r8)
    f16c:	00010f7d 	.word	0x00010f7d

0000f170 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    f170:	b580      	push	{r7, lr}
    f172:	b082      	sub	sp, #8
    f174:	af00      	add	r7, sp, #0
    f176:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    f178:	687b      	ldr	r3, [r7, #4]
    f17a:	0018      	movs	r0, r3
    f17c:	4b03      	ldr	r3, [pc, #12]	; (f18c <nm_read_reg+0x1c>)
    f17e:	4798      	blx	r3
    f180:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    f182:	0018      	movs	r0, r3
    f184:	46bd      	mov	sp, r7
    f186:	b002      	add	sp, #8
    f188:	bd80      	pop	{r7, pc}
    f18a:	46c0      	nop			; (mov r8, r8)
    f18c:	00011111 	.word	0x00011111

0000f190 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    f190:	b580      	push	{r7, lr}
    f192:	b082      	sub	sp, #8
    f194:	af00      	add	r7, sp, #0
    f196:	6078      	str	r0, [r7, #4]
    f198:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    f19a:	683a      	ldr	r2, [r7, #0]
    f19c:	687b      	ldr	r3, [r7, #4]
    f19e:	0011      	movs	r1, r2
    f1a0:	0018      	movs	r0, r3
    f1a2:	4b03      	ldr	r3, [pc, #12]	; (f1b0 <nm_read_reg_with_ret+0x20>)
    f1a4:	4798      	blx	r3
    f1a6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    f1a8:	0018      	movs	r0, r3
    f1aa:	46bd      	mov	sp, r7
    f1ac:	b002      	add	sp, #8
    f1ae:	bd80      	pop	{r7, pc}
    f1b0:	00011135 	.word	0x00011135

0000f1b4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    f1b4:	b580      	push	{r7, lr}
    f1b6:	b082      	sub	sp, #8
    f1b8:	af00      	add	r7, sp, #0
    f1ba:	6078      	str	r0, [r7, #4]
    f1bc:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    f1be:	683a      	ldr	r2, [r7, #0]
    f1c0:	687b      	ldr	r3, [r7, #4]
    f1c2:	0011      	movs	r1, r2
    f1c4:	0018      	movs	r0, r3
    f1c6:	4b03      	ldr	r3, [pc, #12]	; (f1d4 <nm_write_reg+0x20>)
    f1c8:	4798      	blx	r3
    f1ca:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    f1cc:	0018      	movs	r0, r3
    f1ce:	46bd      	mov	sp, r7
    f1d0:	b002      	add	sp, #8
    f1d2:	bd80      	pop	{r7, pc}
    f1d4:	00011185 	.word	0x00011185

0000f1d8 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    f1d8:	b580      	push	{r7, lr}
    f1da:	b084      	sub	sp, #16
    f1dc:	af00      	add	r7, sp, #0
    f1de:	60f8      	str	r0, [r7, #12]
    f1e0:	60b9      	str	r1, [r7, #8]
    f1e2:	1dbb      	adds	r3, r7, #6
    f1e4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    f1e6:	1dbb      	adds	r3, r7, #6
    f1e8:	881a      	ldrh	r2, [r3, #0]
    f1ea:	68b9      	ldr	r1, [r7, #8]
    f1ec:	68fb      	ldr	r3, [r7, #12]
    f1ee:	0018      	movs	r0, r3
    f1f0:	4b03      	ldr	r3, [pc, #12]	; (f200 <p_nm_read_block+0x28>)
    f1f2:	4798      	blx	r3
    f1f4:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    f1f6:	0018      	movs	r0, r3
    f1f8:	46bd      	mov	sp, r7
    f1fa:	b004      	add	sp, #16
    f1fc:	bd80      	pop	{r7, pc}
    f1fe:	46c0      	nop			; (mov r8, r8)
    f200:	000111d5 	.word	0x000111d5

0000f204 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    f204:	b580      	push	{r7, lr}
    f206:	b086      	sub	sp, #24
    f208:	af00      	add	r7, sp, #0
    f20a:	60f8      	str	r0, [r7, #12]
    f20c:	60b9      	str	r1, [r7, #8]
    f20e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    f210:	4b2d      	ldr	r3, [pc, #180]	; (f2c8 <nm_read_block+0xc4>)
    f212:	881a      	ldrh	r2, [r3, #0]
    f214:	2310      	movs	r3, #16
    f216:	18fb      	adds	r3, r7, r3
    f218:	3a08      	subs	r2, #8
    f21a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    f21c:	2300      	movs	r3, #0
    f21e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    f220:	2313      	movs	r3, #19
    f222:	18fb      	adds	r3, r7, r3
    f224:	2200      	movs	r2, #0
    f226:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    f228:	2310      	movs	r3, #16
    f22a:	18fb      	adds	r3, r7, r3
    f22c:	881a      	ldrh	r2, [r3, #0]
    f22e:	687b      	ldr	r3, [r7, #4]
    f230:	429a      	cmp	r2, r3
    f232:	d313      	bcc.n	f25c <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    f234:	68ba      	ldr	r2, [r7, #8]
    f236:	697b      	ldr	r3, [r7, #20]
    f238:	18d1      	adds	r1, r2, r3
    f23a:	687b      	ldr	r3, [r7, #4]
    f23c:	b29a      	uxth	r2, r3
    f23e:	68fb      	ldr	r3, [r7, #12]
    f240:	0018      	movs	r0, r3
    f242:	4b22      	ldr	r3, [pc, #136]	; (f2cc <nm_read_block+0xc8>)
    f244:	4798      	blx	r3
    f246:	0003      	movs	r3, r0
    f248:	b2da      	uxtb	r2, r3
    f24a:	2313      	movs	r3, #19
    f24c:	18fb      	adds	r3, r7, r3
    f24e:	781b      	ldrb	r3, [r3, #0]
    f250:	18d3      	adds	r3, r2, r3
    f252:	b2da      	uxtb	r2, r3
    f254:	2313      	movs	r3, #19
    f256:	18fb      	adds	r3, r7, r3
    f258:	701a      	strb	r2, [r3, #0]
			break;
    f25a:	e02d      	b.n	f2b8 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    f25c:	68ba      	ldr	r2, [r7, #8]
    f25e:	697b      	ldr	r3, [r7, #20]
    f260:	18d1      	adds	r1, r2, r3
    f262:	2310      	movs	r3, #16
    f264:	18fb      	adds	r3, r7, r3
    f266:	881a      	ldrh	r2, [r3, #0]
    f268:	68fb      	ldr	r3, [r7, #12]
    f26a:	0018      	movs	r0, r3
    f26c:	4b17      	ldr	r3, [pc, #92]	; (f2cc <nm_read_block+0xc8>)
    f26e:	4798      	blx	r3
    f270:	0003      	movs	r3, r0
    f272:	b2da      	uxtb	r2, r3
    f274:	2313      	movs	r3, #19
    f276:	18fb      	adds	r3, r7, r3
    f278:	781b      	ldrb	r3, [r3, #0]
    f27a:	18d3      	adds	r3, r2, r3
    f27c:	b2da      	uxtb	r2, r3
    f27e:	2313      	movs	r3, #19
    f280:	18fb      	adds	r3, r7, r3
    f282:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    f284:	2313      	movs	r3, #19
    f286:	18fb      	adds	r3, r7, r3
    f288:	781b      	ldrb	r3, [r3, #0]
    f28a:	b25b      	sxtb	r3, r3
    f28c:	2b00      	cmp	r3, #0
    f28e:	d112      	bne.n	f2b6 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    f290:	2310      	movs	r3, #16
    f292:	18fb      	adds	r3, r7, r3
    f294:	881b      	ldrh	r3, [r3, #0]
    f296:	687a      	ldr	r2, [r7, #4]
    f298:	1ad3      	subs	r3, r2, r3
    f29a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    f29c:	2310      	movs	r3, #16
    f29e:	18fb      	adds	r3, r7, r3
    f2a0:	881b      	ldrh	r3, [r3, #0]
    f2a2:	697a      	ldr	r2, [r7, #20]
    f2a4:	18d3      	adds	r3, r2, r3
    f2a6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    f2a8:	2310      	movs	r3, #16
    f2aa:	18fb      	adds	r3, r7, r3
    f2ac:	881b      	ldrh	r3, [r3, #0]
    f2ae:	68fa      	ldr	r2, [r7, #12]
    f2b0:	18d3      	adds	r3, r2, r3
    f2b2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    f2b4:	e7b8      	b.n	f228 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    f2b6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    f2b8:	2313      	movs	r3, #19
    f2ba:	18fb      	adds	r3, r7, r3
    f2bc:	781b      	ldrb	r3, [r3, #0]
    f2be:	b25b      	sxtb	r3, r3
}
    f2c0:	0018      	movs	r0, r3
    f2c2:	46bd      	mov	sp, r7
    f2c4:	b006      	add	sp, #24
    f2c6:	bd80      	pop	{r7, pc}
    f2c8:	20000110 	.word	0x20000110
    f2cc:	0000f1d9 	.word	0x0000f1d9

0000f2d0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    f2d0:	b580      	push	{r7, lr}
    f2d2:	b084      	sub	sp, #16
    f2d4:	af00      	add	r7, sp, #0
    f2d6:	60f8      	str	r0, [r7, #12]
    f2d8:	60b9      	str	r1, [r7, #8]
    f2da:	1dbb      	adds	r3, r7, #6
    f2dc:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    f2de:	1dbb      	adds	r3, r7, #6
    f2e0:	881a      	ldrh	r2, [r3, #0]
    f2e2:	68b9      	ldr	r1, [r7, #8]
    f2e4:	68fb      	ldr	r3, [r7, #12]
    f2e6:	0018      	movs	r0, r3
    f2e8:	4b03      	ldr	r3, [pc, #12]	; (f2f8 <p_nm_write_block+0x28>)
    f2ea:	4798      	blx	r3
    f2ec:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    f2ee:	0018      	movs	r0, r3
    f2f0:	46bd      	mov	sp, r7
    f2f2:	b004      	add	sp, #16
    f2f4:	bd80      	pop	{r7, pc}
    f2f6:	46c0      	nop			; (mov r8, r8)
    f2f8:	0001122d 	.word	0x0001122d

0000f2fc <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    f2fc:	b580      	push	{r7, lr}
    f2fe:	b086      	sub	sp, #24
    f300:	af00      	add	r7, sp, #0
    f302:	60f8      	str	r0, [r7, #12]
    f304:	60b9      	str	r1, [r7, #8]
    f306:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    f308:	4b2d      	ldr	r3, [pc, #180]	; (f3c0 <nm_write_block+0xc4>)
    f30a:	881a      	ldrh	r2, [r3, #0]
    f30c:	2310      	movs	r3, #16
    f30e:	18fb      	adds	r3, r7, r3
    f310:	3a08      	subs	r2, #8
    f312:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    f314:	2300      	movs	r3, #0
    f316:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    f318:	2313      	movs	r3, #19
    f31a:	18fb      	adds	r3, r7, r3
    f31c:	2200      	movs	r2, #0
    f31e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    f320:	2310      	movs	r3, #16
    f322:	18fb      	adds	r3, r7, r3
    f324:	881a      	ldrh	r2, [r3, #0]
    f326:	687b      	ldr	r3, [r7, #4]
    f328:	429a      	cmp	r2, r3
    f32a:	d313      	bcc.n	f354 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    f32c:	68ba      	ldr	r2, [r7, #8]
    f32e:	697b      	ldr	r3, [r7, #20]
    f330:	18d1      	adds	r1, r2, r3
    f332:	687b      	ldr	r3, [r7, #4]
    f334:	b29a      	uxth	r2, r3
    f336:	68fb      	ldr	r3, [r7, #12]
    f338:	0018      	movs	r0, r3
    f33a:	4b22      	ldr	r3, [pc, #136]	; (f3c4 <nm_write_block+0xc8>)
    f33c:	4798      	blx	r3
    f33e:	0003      	movs	r3, r0
    f340:	b2da      	uxtb	r2, r3
    f342:	2313      	movs	r3, #19
    f344:	18fb      	adds	r3, r7, r3
    f346:	781b      	ldrb	r3, [r3, #0]
    f348:	18d3      	adds	r3, r2, r3
    f34a:	b2da      	uxtb	r2, r3
    f34c:	2313      	movs	r3, #19
    f34e:	18fb      	adds	r3, r7, r3
    f350:	701a      	strb	r2, [r3, #0]
			break;
    f352:	e02d      	b.n	f3b0 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    f354:	68ba      	ldr	r2, [r7, #8]
    f356:	697b      	ldr	r3, [r7, #20]
    f358:	18d1      	adds	r1, r2, r3
    f35a:	2310      	movs	r3, #16
    f35c:	18fb      	adds	r3, r7, r3
    f35e:	881a      	ldrh	r2, [r3, #0]
    f360:	68fb      	ldr	r3, [r7, #12]
    f362:	0018      	movs	r0, r3
    f364:	4b17      	ldr	r3, [pc, #92]	; (f3c4 <nm_write_block+0xc8>)
    f366:	4798      	blx	r3
    f368:	0003      	movs	r3, r0
    f36a:	b2da      	uxtb	r2, r3
    f36c:	2313      	movs	r3, #19
    f36e:	18fb      	adds	r3, r7, r3
    f370:	781b      	ldrb	r3, [r3, #0]
    f372:	18d3      	adds	r3, r2, r3
    f374:	b2da      	uxtb	r2, r3
    f376:	2313      	movs	r3, #19
    f378:	18fb      	adds	r3, r7, r3
    f37a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    f37c:	2313      	movs	r3, #19
    f37e:	18fb      	adds	r3, r7, r3
    f380:	781b      	ldrb	r3, [r3, #0]
    f382:	b25b      	sxtb	r3, r3
    f384:	2b00      	cmp	r3, #0
    f386:	d112      	bne.n	f3ae <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    f388:	2310      	movs	r3, #16
    f38a:	18fb      	adds	r3, r7, r3
    f38c:	881b      	ldrh	r3, [r3, #0]
    f38e:	687a      	ldr	r2, [r7, #4]
    f390:	1ad3      	subs	r3, r2, r3
    f392:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    f394:	2310      	movs	r3, #16
    f396:	18fb      	adds	r3, r7, r3
    f398:	881b      	ldrh	r3, [r3, #0]
    f39a:	697a      	ldr	r2, [r7, #20]
    f39c:	18d3      	adds	r3, r2, r3
    f39e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    f3a0:	2310      	movs	r3, #16
    f3a2:	18fb      	adds	r3, r7, r3
    f3a4:	881b      	ldrh	r3, [r3, #0]
    f3a6:	68fa      	ldr	r2, [r7, #12]
    f3a8:	18d3      	adds	r3, r2, r3
    f3aa:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    f3ac:	e7b8      	b.n	f320 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    f3ae:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    f3b0:	2313      	movs	r3, #19
    f3b2:	18fb      	adds	r3, r7, r3
    f3b4:	781b      	ldrb	r3, [r3, #0]
    f3b6:	b25b      	sxtb	r3, r3
}
    f3b8:	0018      	movs	r0, r3
    f3ba:	46bd      	mov	sp, r7
    f3bc:	b006      	add	sp, #24
    f3be:	bd80      	pop	{r7, pc}
    f3c0:	20000110 	.word	0x20000110
    f3c4:	0000f2d1 	.word	0x0000f2d1

0000f3c8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    f3c8:	b590      	push	{r4, r7, lr}
    f3ca:	b089      	sub	sp, #36	; 0x24
    f3cc:	af00      	add	r7, sp, #0
    f3ce:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    f3d0:	2300      	movs	r3, #0
    f3d2:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    f3d4:	231f      	movs	r3, #31
    f3d6:	18fb      	adds	r3, r7, r3
    f3d8:	2200      	movs	r2, #0
    f3da:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    f3dc:	230c      	movs	r3, #12
    f3de:	18fb      	adds	r3, r7, r3
    f3e0:	0018      	movs	r0, r3
    f3e2:	2308      	movs	r3, #8
    f3e4:	001a      	movs	r2, r3
    f3e6:	2100      	movs	r1, #0
    f3e8:	4b64      	ldr	r3, [pc, #400]	; (f57c <nm_get_firmware_full_info+0x1b4>)
    f3ea:	4798      	blx	r3
	if (pstrRev != NULL)
    f3ec:	687b      	ldr	r3, [r7, #4]
    f3ee:	2b00      	cmp	r3, #0
    f3f0:	d100      	bne.n	f3f4 <nm_get_firmware_full_info+0x2c>
    f3f2:	e0ba      	b.n	f56a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    f3f4:	687b      	ldr	r3, [r7, #4]
    f3f6:	2228      	movs	r2, #40	; 0x28
    f3f8:	2100      	movs	r1, #0
    f3fa:	0018      	movs	r0, r3
    f3fc:	4b60      	ldr	r3, [pc, #384]	; (f580 <nm_get_firmware_full_info+0x1b8>)
    f3fe:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    f400:	231f      	movs	r3, #31
    f402:	18fc      	adds	r4, r7, r3
    f404:	2314      	movs	r3, #20
    f406:	18fb      	adds	r3, r7, r3
    f408:	4a5e      	ldr	r2, [pc, #376]	; (f584 <nm_get_firmware_full_info+0x1bc>)
    f40a:	0019      	movs	r1, r3
    f40c:	0010      	movs	r0, r2
    f40e:	4b5e      	ldr	r3, [pc, #376]	; (f588 <nm_get_firmware_full_info+0x1c0>)
    f410:	4798      	blx	r3
    f412:	0003      	movs	r3, r0
    f414:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    f416:	231f      	movs	r3, #31
    f418:	18fb      	adds	r3, r7, r3
    f41a:	781b      	ldrb	r3, [r3, #0]
    f41c:	b25b      	sxtb	r3, r3
    f41e:	2b00      	cmp	r3, #0
    f420:	d000      	beq.n	f424 <nm_get_firmware_full_info+0x5c>
    f422:	e0a2      	b.n	f56a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    f424:	697b      	ldr	r3, [r7, #20]
    f426:	2b00      	cmp	r3, #0
    f428:	d100      	bne.n	f42c <nm_get_firmware_full_info+0x64>
    f42a:	e09a      	b.n	f562 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    f42c:	697b      	ldr	r3, [r7, #20]
    f42e:	22c0      	movs	r2, #192	; 0xc0
    f430:	0292      	lsls	r2, r2, #10
    f432:	4313      	orrs	r3, r2
    f434:	221f      	movs	r2, #31
    f436:	18bc      	adds	r4, r7, r2
    f438:	220c      	movs	r2, #12
    f43a:	18b9      	adds	r1, r7, r2
    f43c:	2208      	movs	r2, #8
    f43e:	0018      	movs	r0, r3
    f440:	4b52      	ldr	r3, [pc, #328]	; (f58c <nm_get_firmware_full_info+0x1c4>)
    f442:	4798      	blx	r3
    f444:	0003      	movs	r3, r0
    f446:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    f448:	231f      	movs	r3, #31
    f44a:	18fb      	adds	r3, r7, r3
    f44c:	781b      	ldrb	r3, [r3, #0]
    f44e:	b25b      	sxtb	r3, r3
    f450:	2b00      	cmp	r3, #0
    f452:	d000      	beq.n	f456 <nm_get_firmware_full_info+0x8e>
    f454:	e089      	b.n	f56a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    f456:	230c      	movs	r3, #12
    f458:	18fb      	adds	r3, r7, r3
    f45a:	685b      	ldr	r3, [r3, #4]
    f45c:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    f45e:	697b      	ldr	r3, [r7, #20]
    f460:	041b      	lsls	r3, r3, #16
    f462:	0c1b      	lsrs	r3, r3, #16
    f464:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    f466:	697b      	ldr	r3, [r7, #20]
    f468:	2b00      	cmp	r3, #0
    f46a:	d100      	bne.n	f46e <nm_get_firmware_full_info+0xa6>
    f46c:	e074      	b.n	f558 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    f46e:	697b      	ldr	r3, [r7, #20]
    f470:	22c0      	movs	r2, #192	; 0xc0
    f472:	0292      	lsls	r2, r2, #10
    f474:	4313      	orrs	r3, r2
    f476:	221f      	movs	r2, #31
    f478:	18bc      	adds	r4, r7, r2
    f47a:	6879      	ldr	r1, [r7, #4]
    f47c:	2228      	movs	r2, #40	; 0x28
    f47e:	0018      	movs	r0, r3
    f480:	4b42      	ldr	r3, [pc, #264]	; (f58c <nm_get_firmware_full_info+0x1c4>)
    f482:	4798      	blx	r3
    f484:	0003      	movs	r3, r0
    f486:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    f488:	231f      	movs	r3, #31
    f48a:	18fb      	adds	r3, r7, r3
    f48c:	781b      	ldrb	r3, [r3, #0]
    f48e:	b25b      	sxtb	r3, r3
    f490:	2b00      	cmp	r3, #0
    f492:	d16a      	bne.n	f56a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    f494:	687b      	ldr	r3, [r7, #4]
    f496:	791b      	ldrb	r3, [r3, #4]
    f498:	021b      	lsls	r3, r3, #8
    f49a:	b21a      	sxth	r2, r3
    f49c:	687b      	ldr	r3, [r7, #4]
    f49e:	795b      	ldrb	r3, [r3, #5]
    f4a0:	011b      	lsls	r3, r3, #4
    f4a2:	b21b      	sxth	r3, r3
    f4a4:	21ff      	movs	r1, #255	; 0xff
    f4a6:	400b      	ands	r3, r1
    f4a8:	b21b      	sxth	r3, r3
    f4aa:	4313      	orrs	r3, r2
    f4ac:	b21a      	sxth	r2, r3
    f4ae:	687b      	ldr	r3, [r7, #4]
    f4b0:	799b      	ldrb	r3, [r3, #6]
    f4b2:	b21b      	sxth	r3, r3
    f4b4:	210f      	movs	r1, #15
    f4b6:	400b      	ands	r3, r1
    f4b8:	b21b      	sxth	r3, r3
    f4ba:	4313      	orrs	r3, r2
    f4bc:	b21a      	sxth	r2, r3
    f4be:	231c      	movs	r3, #28
    f4c0:	18fb      	adds	r3, r7, r3
    f4c2:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    f4c4:	231a      	movs	r3, #26
    f4c6:	18fb      	adds	r3, r7, r3
    f4c8:	4a31      	ldr	r2, [pc, #196]	; (f590 <nm_get_firmware_full_info+0x1c8>)
    f4ca:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    f4cc:	687b      	ldr	r3, [r7, #4]
    f4ce:	79db      	ldrb	r3, [r3, #7]
    f4d0:	021b      	lsls	r3, r3, #8
    f4d2:	b21a      	sxth	r2, r3
    f4d4:	687b      	ldr	r3, [r7, #4]
    f4d6:	7a1b      	ldrb	r3, [r3, #8]
    f4d8:	011b      	lsls	r3, r3, #4
    f4da:	b21b      	sxth	r3, r3
    f4dc:	21ff      	movs	r1, #255	; 0xff
    f4de:	400b      	ands	r3, r1
    f4e0:	b21b      	sxth	r3, r3
    f4e2:	4313      	orrs	r3, r2
    f4e4:	b21a      	sxth	r2, r3
    f4e6:	687b      	ldr	r3, [r7, #4]
    f4e8:	7a5b      	ldrb	r3, [r3, #9]
    f4ea:	b21b      	sxth	r3, r3
    f4ec:	210f      	movs	r1, #15
    f4ee:	400b      	ands	r3, r1
    f4f0:	b21b      	sxth	r3, r3
    f4f2:	4313      	orrs	r3, r2
    f4f4:	b21a      	sxth	r2, r3
    f4f6:	2318      	movs	r3, #24
    f4f8:	18fb      	adds	r3, r7, r3
    f4fa:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    f4fc:	231c      	movs	r3, #28
    f4fe:	18fb      	adds	r3, r7, r3
    f500:	881b      	ldrh	r3, [r3, #0]
    f502:	2b00      	cmp	r3, #0
    f504:	d009      	beq.n	f51a <nm_get_firmware_full_info+0x152>
    f506:	2318      	movs	r3, #24
    f508:	18fb      	adds	r3, r7, r3
    f50a:	881b      	ldrh	r3, [r3, #0]
    f50c:	2b00      	cmp	r3, #0
    f50e:	d004      	beq.n	f51a <nm_get_firmware_full_info+0x152>
    f510:	2318      	movs	r3, #24
    f512:	18fb      	adds	r3, r7, r3
    f514:	881b      	ldrh	r3, [r3, #0]
    f516:	2b00      	cmp	r3, #0
    f518:	d104      	bne.n	f524 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    f51a:	231f      	movs	r3, #31
    f51c:	18fb      	adds	r3, r7, r3
    f51e:	22f4      	movs	r2, #244	; 0xf4
    f520:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    f522:	e022      	b.n	f56a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    f524:	231a      	movs	r3, #26
    f526:	18fa      	adds	r2, r7, r3
    f528:	2318      	movs	r3, #24
    f52a:	18fb      	adds	r3, r7, r3
    f52c:	8812      	ldrh	r2, [r2, #0]
    f52e:	881b      	ldrh	r3, [r3, #0]
    f530:	429a      	cmp	r2, r3
    f532:	d204      	bcs.n	f53e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    f534:	231f      	movs	r3, #31
    f536:	18fb      	adds	r3, r7, r3
    f538:	22f3      	movs	r2, #243	; 0xf3
    f53a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    f53c:	e015      	b.n	f56a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    f53e:	231a      	movs	r3, #26
    f540:	18fa      	adds	r2, r7, r3
    f542:	231c      	movs	r3, #28
    f544:	18fb      	adds	r3, r7, r3
    f546:	8812      	ldrh	r2, [r2, #0]
    f548:	881b      	ldrh	r3, [r3, #0]
    f54a:	429a      	cmp	r2, r3
    f54c:	d90d      	bls.n	f56a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    f54e:	231f      	movs	r3, #31
    f550:	18fb      	adds	r3, r7, r3
    f552:	22f3      	movs	r2, #243	; 0xf3
    f554:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    f556:	e008      	b.n	f56a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    f558:	231f      	movs	r3, #31
    f55a:	18fb      	adds	r3, r7, r3
    f55c:	22f4      	movs	r2, #244	; 0xf4
    f55e:	701a      	strb	r2, [r3, #0]
    f560:	e003      	b.n	f56a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    f562:	231f      	movs	r3, #31
    f564:	18fb      	adds	r3, r7, r3
    f566:	22f4      	movs	r2, #244	; 0xf4
    f568:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    f56a:	231f      	movs	r3, #31
    f56c:	18fb      	adds	r3, r7, r3
    f56e:	781b      	ldrb	r3, [r3, #0]
    f570:	b25b      	sxtb	r3, r3
}
    f572:	0018      	movs	r0, r3
    f574:	46bd      	mov	sp, r7
    f576:	b009      	add	sp, #36	; 0x24
    f578:	bd90      	pop	{r4, r7, pc}
    f57a:	46c0      	nop			; (mov r8, r8)
    f57c:	00020d8b 	.word	0x00020d8b
    f580:	0000d101 	.word	0x0000d101
    f584:	000c0008 	.word	0x000c0008
    f588:	0000f191 	.word	0x0000f191
    f58c:	0000f205 	.word	0x0000f205
    f590:	00001354 	.word	0x00001354

0000f594 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    f594:	b590      	push	{r4, r7, lr}
    f596:	b085      	sub	sp, #20
    f598:	af00      	add	r7, sp, #0
    f59a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    f59c:	230f      	movs	r3, #15
    f59e:	18fb      	adds	r3, r7, r3
    f5a0:	2200      	movs	r2, #0
    f5a2:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    f5a4:	687b      	ldr	r3, [r7, #4]
    f5a6:	2b00      	cmp	r3, #0
    f5a8:	d013      	beq.n	f5d2 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    f5aa:	230e      	movs	r3, #14
    f5ac:	18fb      	adds	r3, r7, r3
    f5ae:	687a      	ldr	r2, [r7, #4]
    f5b0:	7812      	ldrb	r2, [r2, #0]
    f5b2:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    f5b4:	230e      	movs	r3, #14
    f5b6:	18fb      	adds	r3, r7, r3
    f5b8:	781b      	ldrb	r3, [r3, #0]
    f5ba:	2b00      	cmp	r3, #0
    f5bc:	d004      	beq.n	f5c8 <nm_drv_init+0x34>
    f5be:	230e      	movs	r3, #14
    f5c0:	18fb      	adds	r3, r7, r3
    f5c2:	781b      	ldrb	r3, [r3, #0]
    f5c4:	2b04      	cmp	r3, #4
    f5c6:	d908      	bls.n	f5da <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    f5c8:	230e      	movs	r3, #14
    f5ca:	18fb      	adds	r3, r7, r3
    f5cc:	2201      	movs	r2, #1
    f5ce:	701a      	strb	r2, [r3, #0]
    f5d0:	e003      	b.n	f5da <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    f5d2:	230e      	movs	r3, #14
    f5d4:	18fb      	adds	r3, r7, r3
    f5d6:	2201      	movs	r2, #1
    f5d8:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    f5da:	230f      	movs	r3, #15
    f5dc:	18fc      	adds	r4, r7, r3
    f5de:	2000      	movs	r0, #0
    f5e0:	4b41      	ldr	r3, [pc, #260]	; (f6e8 <nm_drv_init+0x154>)
    f5e2:	4798      	blx	r3
    f5e4:	0003      	movs	r3, r0
    f5e6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    f5e8:	230f      	movs	r3, #15
    f5ea:	18fb      	adds	r3, r7, r3
    f5ec:	781b      	ldrb	r3, [r3, #0]
    f5ee:	b25b      	sxtb	r3, r3
    f5f0:	2b00      	cmp	r3, #0
    f5f2:	d00f      	beq.n	f614 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    f5f4:	2390      	movs	r3, #144	; 0x90
    f5f6:	005a      	lsls	r2, r3, #1
    f5f8:	493c      	ldr	r1, [pc, #240]	; (f6ec <nm_drv_init+0x158>)
    f5fa:	4b3d      	ldr	r3, [pc, #244]	; (f6f0 <nm_drv_init+0x15c>)
    f5fc:	0018      	movs	r0, r3
    f5fe:	4b3d      	ldr	r3, [pc, #244]	; (f6f4 <nm_drv_init+0x160>)
    f600:	4798      	blx	r3
    f602:	4b3d      	ldr	r3, [pc, #244]	; (f6f8 <nm_drv_init+0x164>)
    f604:	0018      	movs	r0, r3
    f606:	4b3b      	ldr	r3, [pc, #236]	; (f6f4 <nm_drv_init+0x160>)
    f608:	4798      	blx	r3
    f60a:	4b3c      	ldr	r3, [pc, #240]	; (f6fc <nm_drv_init+0x168>)
    f60c:	0018      	movs	r0, r3
    f60e:	4b39      	ldr	r3, [pc, #228]	; (f6f4 <nm_drv_init+0x160>)
    f610:	4798      	blx	r3
		goto ERR1;
    f612:	e061      	b.n	f6d8 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    f614:	4b3a      	ldr	r3, [pc, #232]	; (f700 <nm_drv_init+0x16c>)
    f616:	0018      	movs	r0, r3
    f618:	4b36      	ldr	r3, [pc, #216]	; (f6f4 <nm_drv_init+0x160>)
    f61a:	4798      	blx	r3
    f61c:	4b39      	ldr	r3, [pc, #228]	; (f704 <nm_drv_init+0x170>)
    f61e:	4798      	blx	r3
    f620:	0002      	movs	r2, r0
    f622:	4b39      	ldr	r3, [pc, #228]	; (f708 <nm_drv_init+0x174>)
    f624:	0011      	movs	r1, r2
    f626:	0018      	movs	r0, r3
    f628:	4b32      	ldr	r3, [pc, #200]	; (f6f4 <nm_drv_init+0x160>)
    f62a:	4798      	blx	r3
    f62c:	4b33      	ldr	r3, [pc, #204]	; (f6fc <nm_drv_init+0x168>)
    f62e:	0018      	movs	r0, r3
    f630:	4b30      	ldr	r3, [pc, #192]	; (f6f4 <nm_drv_init+0x160>)
    f632:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    f634:	4b35      	ldr	r3, [pc, #212]	; (f70c <nm_drv_init+0x178>)
    f636:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    f638:	230f      	movs	r3, #15
    f63a:	18fc      	adds	r4, r7, r3
    f63c:	230e      	movs	r3, #14
    f63e:	18fb      	adds	r3, r7, r3
    f640:	781b      	ldrb	r3, [r3, #0]
    f642:	0018      	movs	r0, r3
    f644:	4b32      	ldr	r3, [pc, #200]	; (f710 <nm_drv_init+0x17c>)
    f646:	4798      	blx	r3
    f648:	0003      	movs	r3, r0
    f64a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    f64c:	230f      	movs	r3, #15
    f64e:	18fb      	adds	r3, r7, r3
    f650:	781b      	ldrb	r3, [r3, #0]
    f652:	b25b      	sxtb	r3, r3
    f654:	2b00      	cmp	r3, #0
    f656:	d13a      	bne.n	f6ce <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    f658:	230f      	movs	r3, #15
    f65a:	18fc      	adds	r4, r7, r3
    f65c:	230e      	movs	r3, #14
    f65e:	18fb      	adds	r3, r7, r3
    f660:	781b      	ldrb	r3, [r3, #0]
    f662:	0018      	movs	r0, r3
    f664:	4b2b      	ldr	r3, [pc, #172]	; (f714 <nm_drv_init+0x180>)
    f666:	4798      	blx	r3
    f668:	0003      	movs	r3, r0
    f66a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    f66c:	230f      	movs	r3, #15
    f66e:	18fb      	adds	r3, r7, r3
    f670:	781b      	ldrb	r3, [r3, #0]
    f672:	b25b      	sxtb	r3, r3
    f674:	2b00      	cmp	r3, #0
    f676:	d12c      	bne.n	f6d2 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    f678:	230e      	movs	r3, #14
    f67a:	18fb      	adds	r3, r7, r3
    f67c:	781b      	ldrb	r3, [r3, #0]
    f67e:	2b02      	cmp	r3, #2
    f680:	d02a      	beq.n	f6d8 <nm_drv_init+0x144>
    f682:	230e      	movs	r3, #14
    f684:	18fb      	adds	r3, r7, r3
    f686:	781b      	ldrb	r3, [r3, #0]
    f688:	2b03      	cmp	r3, #3
    f68a:	d025      	beq.n	f6d8 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    f68c:	230f      	movs	r3, #15
    f68e:	18fc      	adds	r4, r7, r3
    f690:	4b21      	ldr	r3, [pc, #132]	; (f718 <nm_drv_init+0x184>)
    f692:	4798      	blx	r3
    f694:	0003      	movs	r3, r0
    f696:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    f698:	230f      	movs	r3, #15
    f69a:	18fb      	adds	r3, r7, r3
    f69c:	781b      	ldrb	r3, [r3, #0]
    f69e:	b25b      	sxtb	r3, r3
    f6a0:	2b00      	cmp	r3, #0
    f6a2:	d00f      	beq.n	f6c4 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
    f6a4:	23a7      	movs	r3, #167	; 0xa7
    f6a6:	005a      	lsls	r2, r3, #1
    f6a8:	4910      	ldr	r1, [pc, #64]	; (f6ec <nm_drv_init+0x158>)
    f6aa:	4b11      	ldr	r3, [pc, #68]	; (f6f0 <nm_drv_init+0x15c>)
    f6ac:	0018      	movs	r0, r3
    f6ae:	4b11      	ldr	r3, [pc, #68]	; (f6f4 <nm_drv_init+0x160>)
    f6b0:	4798      	blx	r3
    f6b2:	4b1a      	ldr	r3, [pc, #104]	; (f71c <nm_drv_init+0x188>)
    f6b4:	0018      	movs	r0, r3
    f6b6:	4b0f      	ldr	r3, [pc, #60]	; (f6f4 <nm_drv_init+0x160>)
    f6b8:	4798      	blx	r3
    f6ba:	4b10      	ldr	r3, [pc, #64]	; (f6fc <nm_drv_init+0x168>)
    f6bc:	0018      	movs	r0, r3
    f6be:	4b0d      	ldr	r3, [pc, #52]	; (f6f4 <nm_drv_init+0x160>)
    f6c0:	4798      	blx	r3
		goto ERR2;
    f6c2:	e007      	b.n	f6d4 <nm_drv_init+0x140>
	}
	return ret;
    f6c4:	230f      	movs	r3, #15
    f6c6:	18fb      	adds	r3, r7, r3
    f6c8:	781b      	ldrb	r3, [r3, #0]
    f6ca:	b25b      	sxtb	r3, r3
    f6cc:	e008      	b.n	f6e0 <nm_drv_init+0x14c>
		goto ERR2;
    f6ce:	46c0      	nop			; (mov r8, r8)
    f6d0:	e000      	b.n	f6d4 <nm_drv_init+0x140>
		goto ERR2;
    f6d2:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    f6d4:	4b12      	ldr	r3, [pc, #72]	; (f720 <nm_drv_init+0x18c>)
    f6d6:	4798      	blx	r3
ERR1:
	return ret;
    f6d8:	230f      	movs	r3, #15
    f6da:	18fb      	adds	r3, r7, r3
    f6dc:	781b      	ldrb	r3, [r3, #0]
    f6de:	b25b      	sxtb	r3, r3
}
    f6e0:	0018      	movs	r0, r3
    f6e2:	46bd      	mov	sp, r7
    f6e4:	b005      	add	sp, #20
    f6e6:	bd90      	pop	{r4, r7, pc}
    f6e8:	0000f0f5 	.word	0x0000f0f5
    f6ec:	00025bf0 	.word	0x00025bf0
    f6f0:	00025b20 	.word	0x00025b20
    f6f4:	0000a3cd 	.word	0x0000a3cd
    f6f8:	00025b34 	.word	0x00025b34
    f6fc:	00025b50 	.word	0x00025b50
    f700:	00025b54 	.word	0x00025b54
    f704:	0000ea91 	.word	0x0000ea91
    f708:	00025b60 	.word	0x00025b60
    f70c:	00010fad 	.word	0x00010fad
    f710:	0000ede9 	.word	0x0000ede9
    f714:	0000ef81 	.word	0x0000ef81
    f718:	0000e9dd 	.word	0x0000e9dd
    f71c:	00025b70 	.word	0x00025b70
    f720:	0000f129 	.word	0x0000f129

0000f724 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    f724:	b590      	push	{r4, r7, lr}
    f726:	b085      	sub	sp, #20
    f728:	af00      	add	r7, sp, #0
    f72a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    f72c:	230f      	movs	r3, #15
    f72e:	18fc      	adds	r4, r7, r3
    f730:	4b2e      	ldr	r3, [pc, #184]	; (f7ec <nm_drv_deinit+0xc8>)
    f732:	4798      	blx	r3
    f734:	0003      	movs	r3, r0
    f736:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    f738:	230f      	movs	r3, #15
    f73a:	18fb      	adds	r3, r7, r3
    f73c:	781b      	ldrb	r3, [r3, #0]
    f73e:	b25b      	sxtb	r3, r3
    f740:	2b00      	cmp	r3, #0
    f742:	d010      	beq.n	f766 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    f744:	2366      	movs	r3, #102	; 0x66
    f746:	33ff      	adds	r3, #255	; 0xff
    f748:	001a      	movs	r2, r3
    f74a:	4929      	ldr	r1, [pc, #164]	; (f7f0 <nm_drv_deinit+0xcc>)
    f74c:	4b29      	ldr	r3, [pc, #164]	; (f7f4 <nm_drv_deinit+0xd0>)
    f74e:	0018      	movs	r0, r3
    f750:	4b29      	ldr	r3, [pc, #164]	; (f7f8 <nm_drv_deinit+0xd4>)
    f752:	4798      	blx	r3
    f754:	4b29      	ldr	r3, [pc, #164]	; (f7fc <nm_drv_deinit+0xd8>)
    f756:	0018      	movs	r0, r3
    f758:	4b27      	ldr	r3, [pc, #156]	; (f7f8 <nm_drv_deinit+0xd4>)
    f75a:	4798      	blx	r3
    f75c:	4b28      	ldr	r3, [pc, #160]	; (f800 <nm_drv_deinit+0xdc>)
    f75e:	0018      	movs	r0, r3
    f760:	4b25      	ldr	r3, [pc, #148]	; (f7f8 <nm_drv_deinit+0xd4>)
    f762:	4798      	blx	r3
		goto ERR1;
    f764:	e03a      	b.n	f7dc <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    f766:	230f      	movs	r3, #15
    f768:	18fc      	adds	r4, r7, r3
    f76a:	2000      	movs	r0, #0
    f76c:	4b25      	ldr	r3, [pc, #148]	; (f804 <nm_drv_deinit+0xe0>)
    f76e:	4798      	blx	r3
    f770:	0003      	movs	r3, r0
    f772:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    f774:	230f      	movs	r3, #15
    f776:	18fb      	adds	r3, r7, r3
    f778:	781b      	ldrb	r3, [r3, #0]
    f77a:	b25b      	sxtb	r3, r3
    f77c:	2b00      	cmp	r3, #0
    f77e:	d00f      	beq.n	f7a0 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    f780:	23b6      	movs	r3, #182	; 0xb6
    f782:	005a      	lsls	r2, r3, #1
    f784:	491a      	ldr	r1, [pc, #104]	; (f7f0 <nm_drv_deinit+0xcc>)
    f786:	4b1b      	ldr	r3, [pc, #108]	; (f7f4 <nm_drv_deinit+0xd0>)
    f788:	0018      	movs	r0, r3
    f78a:	4b1b      	ldr	r3, [pc, #108]	; (f7f8 <nm_drv_deinit+0xd4>)
    f78c:	4798      	blx	r3
    f78e:	4b1e      	ldr	r3, [pc, #120]	; (f808 <nm_drv_deinit+0xe4>)
    f790:	0018      	movs	r0, r3
    f792:	4b19      	ldr	r3, [pc, #100]	; (f7f8 <nm_drv_deinit+0xd4>)
    f794:	4798      	blx	r3
    f796:	4b1a      	ldr	r3, [pc, #104]	; (f800 <nm_drv_deinit+0xdc>)
    f798:	0018      	movs	r0, r3
    f79a:	4b17      	ldr	r3, [pc, #92]	; (f7f8 <nm_drv_deinit+0xd4>)
    f79c:	4798      	blx	r3
		goto ERR1;
    f79e:	e01d      	b.n	f7dc <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
    f7a0:	230f      	movs	r3, #15
    f7a2:	18fc      	adds	r4, r7, r3
    f7a4:	4b19      	ldr	r3, [pc, #100]	; (f80c <nm_drv_deinit+0xe8>)
    f7a6:	4798      	blx	r3
    f7a8:	0003      	movs	r3, r0
    f7aa:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    f7ac:	230f      	movs	r3, #15
    f7ae:	18fb      	adds	r3, r7, r3
    f7b0:	781b      	ldrb	r3, [r3, #0]
    f7b2:	b25b      	sxtb	r3, r3
    f7b4:	2b00      	cmp	r3, #0
    f7b6:	d00f      	beq.n	f7d8 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
    f7b8:	23b9      	movs	r3, #185	; 0xb9
    f7ba:	005a      	lsls	r2, r3, #1
    f7bc:	490c      	ldr	r1, [pc, #48]	; (f7f0 <nm_drv_deinit+0xcc>)
    f7be:	4b0d      	ldr	r3, [pc, #52]	; (f7f4 <nm_drv_deinit+0xd0>)
    f7c0:	0018      	movs	r0, r3
    f7c2:	4b0d      	ldr	r3, [pc, #52]	; (f7f8 <nm_drv_deinit+0xd4>)
    f7c4:	4798      	blx	r3
    f7c6:	4b12      	ldr	r3, [pc, #72]	; (f810 <nm_drv_deinit+0xec>)
    f7c8:	0018      	movs	r0, r3
    f7ca:	4b0b      	ldr	r3, [pc, #44]	; (f7f8 <nm_drv_deinit+0xd4>)
    f7cc:	4798      	blx	r3
    f7ce:	4b0c      	ldr	r3, [pc, #48]	; (f800 <nm_drv_deinit+0xdc>)
    f7d0:	0018      	movs	r0, r3
    f7d2:	4b09      	ldr	r3, [pc, #36]	; (f7f8 <nm_drv_deinit+0xd4>)
    f7d4:	4798      	blx	r3
		goto ERR1;
    f7d6:	e001      	b.n	f7dc <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    f7d8:	4b0e      	ldr	r3, [pc, #56]	; (f814 <nm_drv_deinit+0xf0>)
    f7da:	4798      	blx	r3
#endif

ERR1:
	return ret;
    f7dc:	230f      	movs	r3, #15
    f7de:	18fb      	adds	r3, r7, r3
    f7e0:	781b      	ldrb	r3, [r3, #0]
    f7e2:	b25b      	sxtb	r3, r3
}
    f7e4:	0018      	movs	r0, r3
    f7e6:	46bd      	mov	sp, r7
    f7e8:	b005      	add	sp, #20
    f7ea:	bd90      	pop	{r4, r7, pc}
    f7ec:	0000f035 	.word	0x0000f035
    f7f0:	00025bfc 	.word	0x00025bfc
    f7f4:	00025b20 	.word	0x00025b20
    f7f8:	0000a3cd 	.word	0x0000a3cd
    f7fc:	00025b90 	.word	0x00025b90
    f800:	00025b50 	.word	0x00025b50
    f804:	00012455 	.word	0x00012455
    f808:	00025bb0 	.word	0x00025bb0
    f80c:	0000f129 	.word	0x0000f129
    f810:	00025bd4 	.word	0x00025bd4
    f814:	000110f9 	.word	0x000110f9

0000f818 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    f818:	b580      	push	{r7, lr}
    f81a:	b086      	sub	sp, #24
    f81c:	af00      	add	r7, sp, #0
    f81e:	6078      	str	r0, [r7, #4]
    f820:	000a      	movs	r2, r1
    f822:	1cbb      	adds	r3, r7, #2
    f824:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    f826:	230c      	movs	r3, #12
    f828:	18fb      	adds	r3, r7, r3
    f82a:	2200      	movs	r2, #0
    f82c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    f82e:	230c      	movs	r3, #12
    f830:	18fb      	adds	r3, r7, r3
    f832:	687a      	ldr	r2, [r7, #4]
    f834:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    f836:	230c      	movs	r3, #12
    f838:	18fb      	adds	r3, r7, r3
    f83a:	1cba      	adds	r2, r7, #2
    f83c:	8812      	ldrh	r2, [r2, #0]
    f83e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    f840:	230c      	movs	r3, #12
    f842:	18fb      	adds	r3, r7, r3
    f844:	0019      	movs	r1, r3
    f846:	2003      	movs	r0, #3
    f848:	4b03      	ldr	r3, [pc, #12]	; (f858 <nmi_spi_read+0x40>)
    f84a:	4798      	blx	r3
    f84c:	0003      	movs	r3, r0
}
    f84e:	0018      	movs	r0, r3
    f850:	46bd      	mov	sp, r7
    f852:	b006      	add	sp, #24
    f854:	bd80      	pop	{r7, pc}
    f856:	46c0      	nop			; (mov r8, r8)
    f858:	0000cfc5 	.word	0x0000cfc5

0000f85c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    f85c:	b580      	push	{r7, lr}
    f85e:	b086      	sub	sp, #24
    f860:	af00      	add	r7, sp, #0
    f862:	6078      	str	r0, [r7, #4]
    f864:	000a      	movs	r2, r1
    f866:	1cbb      	adds	r3, r7, #2
    f868:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    f86a:	230c      	movs	r3, #12
    f86c:	18fb      	adds	r3, r7, r3
    f86e:	687a      	ldr	r2, [r7, #4]
    f870:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    f872:	230c      	movs	r3, #12
    f874:	18fb      	adds	r3, r7, r3
    f876:	2200      	movs	r2, #0
    f878:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    f87a:	230c      	movs	r3, #12
    f87c:	18fb      	adds	r3, r7, r3
    f87e:	1cba      	adds	r2, r7, #2
    f880:	8812      	ldrh	r2, [r2, #0]
    f882:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    f884:	230c      	movs	r3, #12
    f886:	18fb      	adds	r3, r7, r3
    f888:	0019      	movs	r1, r3
    f88a:	2003      	movs	r0, #3
    f88c:	4b03      	ldr	r3, [pc, #12]	; (f89c <nmi_spi_write+0x40>)
    f88e:	4798      	blx	r3
    f890:	0003      	movs	r3, r0
}
    f892:	0018      	movs	r0, r3
    f894:	46bd      	mov	sp, r7
    f896:	b006      	add	sp, #24
    f898:	bd80      	pop	{r7, pc}
    f89a:	46c0      	nop			; (mov r8, r8)
    f89c:	0000cfc5 	.word	0x0000cfc5

0000f8a0 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
    f8a0:	b580      	push	{r7, lr}
    f8a2:	b088      	sub	sp, #32
    f8a4:	af00      	add	r7, sp, #0
    f8a6:	60f8      	str	r0, [r7, #12]
    f8a8:	60b9      	str	r1, [r7, #8]
    f8aa:	1dbb      	adds	r3, r7, #6
    f8ac:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
    f8ae:	2314      	movs	r3, #20
    f8b0:	18fb      	adds	r3, r7, r3
    f8b2:	68fa      	ldr	r2, [r7, #12]
    f8b4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
    f8b6:	2314      	movs	r3, #20
    f8b8:	18fb      	adds	r3, r7, r3
    f8ba:	68ba      	ldr	r2, [r7, #8]
    f8bc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    f8be:	2314      	movs	r3, #20
    f8c0:	18fb      	adds	r3, r7, r3
    f8c2:	1dba      	adds	r2, r7, #6
    f8c4:	8812      	ldrh	r2, [r2, #0]
    f8c6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
    f8c8:	2314      	movs	r3, #20
    f8ca:	18fb      	adds	r3, r7, r3
    f8cc:	0019      	movs	r1, r3
    f8ce:	2003      	movs	r0, #3
    f8d0:	4b03      	ldr	r3, [pc, #12]	; (f8e0 <nmi_spi_rw+0x40>)
    f8d2:	4798      	blx	r3
    f8d4:	0003      	movs	r3, r0
}
    f8d6:	0018      	movs	r0, r3
    f8d8:	46bd      	mov	sp, r7
    f8da:	b008      	add	sp, #32
    f8dc:	bd80      	pop	{r7, pc}
    f8de:	46c0      	nop			; (mov r8, r8)
    f8e0:	0000cfc5 	.word	0x0000cfc5

0000f8e4 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    f8e4:	b580      	push	{r7, lr}
    f8e6:	b082      	sub	sp, #8
    f8e8:	af00      	add	r7, sp, #0
    f8ea:	0002      	movs	r2, r0
    f8ec:	1dfb      	adds	r3, r7, #7
    f8ee:	701a      	strb	r2, [r3, #0]
    f8f0:	1dbb      	adds	r3, r7, #6
    f8f2:	1c0a      	adds	r2, r1, #0
    f8f4:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    f8f6:	1dfb      	adds	r3, r7, #7
    f8f8:	781b      	ldrb	r3, [r3, #0]
    f8fa:	005a      	lsls	r2, r3, #1
    f8fc:	1dbb      	adds	r3, r7, #6
    f8fe:	781b      	ldrb	r3, [r3, #0]
    f900:	4053      	eors	r3, r2
    f902:	4a03      	ldr	r2, [pc, #12]	; (f910 <crc7_byte+0x2c>)
    f904:	5cd3      	ldrb	r3, [r2, r3]
}
    f906:	0018      	movs	r0, r3
    f908:	46bd      	mov	sp, r7
    f90a:	b002      	add	sp, #8
    f90c:	bd80      	pop	{r7, pc}
    f90e:	46c0      	nop			; (mov r8, r8)
    f910:	00025c0c 	.word	0x00025c0c

0000f914 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    f914:	b590      	push	{r4, r7, lr}
    f916:	b085      	sub	sp, #20
    f918:	af00      	add	r7, sp, #0
    f91a:	60b9      	str	r1, [r7, #8]
    f91c:	607a      	str	r2, [r7, #4]
    f91e:	230f      	movs	r3, #15
    f920:	18fb      	adds	r3, r7, r3
    f922:	1c02      	adds	r2, r0, #0
    f924:	701a      	strb	r2, [r3, #0]
	while (len--)
    f926:	e00e      	b.n	f946 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    f928:	68bb      	ldr	r3, [r7, #8]
    f92a:	1c5a      	adds	r2, r3, #1
    f92c:	60ba      	str	r2, [r7, #8]
    f92e:	781a      	ldrb	r2, [r3, #0]
    f930:	230f      	movs	r3, #15
    f932:	18fc      	adds	r4, r7, r3
    f934:	230f      	movs	r3, #15
    f936:	18fb      	adds	r3, r7, r3
    f938:	781b      	ldrb	r3, [r3, #0]
    f93a:	0011      	movs	r1, r2
    f93c:	0018      	movs	r0, r3
    f93e:	4b08      	ldr	r3, [pc, #32]	; (f960 <crc7+0x4c>)
    f940:	4798      	blx	r3
    f942:	0003      	movs	r3, r0
    f944:	7023      	strb	r3, [r4, #0]
	while (len--)
    f946:	687b      	ldr	r3, [r7, #4]
    f948:	1e5a      	subs	r2, r3, #1
    f94a:	607a      	str	r2, [r7, #4]
    f94c:	2b00      	cmp	r3, #0
    f94e:	d1eb      	bne.n	f928 <crc7+0x14>
	return crc;
    f950:	230f      	movs	r3, #15
    f952:	18fb      	adds	r3, r7, r3
    f954:	781b      	ldrb	r3, [r3, #0]
}
    f956:	0018      	movs	r0, r3
    f958:	46bd      	mov	sp, r7
    f95a:	b005      	add	sp, #20
    f95c:	bd90      	pop	{r4, r7, pc}
    f95e:	46c0      	nop			; (mov r8, r8)
    f960:	0000f8e5 	.word	0x0000f8e5

0000f964 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    f964:	b590      	push	{r4, r7, lr}
    f966:	b089      	sub	sp, #36	; 0x24
    f968:	af00      	add	r7, sp, #0
    f96a:	60b9      	str	r1, [r7, #8]
    f96c:	607a      	str	r2, [r7, #4]
    f96e:	603b      	str	r3, [r7, #0]
    f970:	230f      	movs	r3, #15
    f972:	18fb      	adds	r3, r7, r3
    f974:	1c02      	adds	r2, r0, #0
    f976:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    f978:	231f      	movs	r3, #31
    f97a:	18fb      	adds	r3, r7, r3
    f97c:	2205      	movs	r2, #5
    f97e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    f980:	231e      	movs	r3, #30
    f982:	18fb      	adds	r3, r7, r3
    f984:	2201      	movs	r2, #1
    f986:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    f988:	2314      	movs	r3, #20
    f98a:	18fb      	adds	r3, r7, r3
    f98c:	220f      	movs	r2, #15
    f98e:	18ba      	adds	r2, r7, r2
    f990:	7812      	ldrb	r2, [r2, #0]
    f992:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    f994:	230f      	movs	r3, #15
    f996:	18fb      	adds	r3, r7, r3
    f998:	781b      	ldrb	r3, [r3, #0]
    f99a:	3bc1      	subs	r3, #193	; 0xc1
    f99c:	2b0e      	cmp	r3, #14
    f99e:	d900      	bls.n	f9a2 <spi_cmd+0x3e>
    f9a0:	e11b      	b.n	fbda <spi_cmd+0x276>
    f9a2:	009a      	lsls	r2, r3, #2
    f9a4:	4bb6      	ldr	r3, [pc, #728]	; (fc80 <spi_cmd+0x31c>)
    f9a6:	18d3      	adds	r3, r2, r3
    f9a8:	681b      	ldr	r3, [r3, #0]
    f9aa:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    f9ac:	68bb      	ldr	r3, [r7, #8]
    f9ae:	0c1b      	lsrs	r3, r3, #16
    f9b0:	b2da      	uxtb	r2, r3
    f9b2:	2314      	movs	r3, #20
    f9b4:	18fb      	adds	r3, r7, r3
    f9b6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    f9b8:	68bb      	ldr	r3, [r7, #8]
    f9ba:	0a1b      	lsrs	r3, r3, #8
    f9bc:	b2da      	uxtb	r2, r3
    f9be:	2314      	movs	r3, #20
    f9c0:	18fb      	adds	r3, r7, r3
    f9c2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    f9c4:	68bb      	ldr	r3, [r7, #8]
    f9c6:	b2da      	uxtb	r2, r3
    f9c8:	2314      	movs	r3, #20
    f9ca:	18fb      	adds	r3, r7, r3
    f9cc:	70da      	strb	r2, [r3, #3]
		len = 5;
    f9ce:	231f      	movs	r3, #31
    f9d0:	18fb      	adds	r3, r7, r3
    f9d2:	2205      	movs	r2, #5
    f9d4:	701a      	strb	r2, [r3, #0]
		break;
    f9d6:	e105      	b.n	fbe4 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    f9d8:	68bb      	ldr	r3, [r7, #8]
    f9da:	0a1b      	lsrs	r3, r3, #8
    f9dc:	b2da      	uxtb	r2, r3
    f9de:	2314      	movs	r3, #20
    f9e0:	18fb      	adds	r3, r7, r3
    f9e2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    f9e4:	2330      	movs	r3, #48	; 0x30
    f9e6:	18fb      	adds	r3, r7, r3
    f9e8:	781b      	ldrb	r3, [r3, #0]
    f9ea:	2b00      	cmp	r3, #0
    f9ec:	d009      	beq.n	fa02 <spi_cmd+0x9e>
    f9ee:	2314      	movs	r3, #20
    f9f0:	18fb      	adds	r3, r7, r3
    f9f2:	785b      	ldrb	r3, [r3, #1]
    f9f4:	2280      	movs	r2, #128	; 0x80
    f9f6:	4252      	negs	r2, r2
    f9f8:	4313      	orrs	r3, r2
    f9fa:	b2da      	uxtb	r2, r3
    f9fc:	2314      	movs	r3, #20
    f9fe:	18fb      	adds	r3, r7, r3
    fa00:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    fa02:	68bb      	ldr	r3, [r7, #8]
    fa04:	b2da      	uxtb	r2, r3
    fa06:	2314      	movs	r3, #20
    fa08:	18fb      	adds	r3, r7, r3
    fa0a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    fa0c:	2314      	movs	r3, #20
    fa0e:	18fb      	adds	r3, r7, r3
    fa10:	2200      	movs	r2, #0
    fa12:	70da      	strb	r2, [r3, #3]
		len = 5;
    fa14:	231f      	movs	r3, #31
    fa16:	18fb      	adds	r3, r7, r3
    fa18:	2205      	movs	r2, #5
    fa1a:	701a      	strb	r2, [r3, #0]
		break;
    fa1c:	e0e2      	b.n	fbe4 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    fa1e:	2314      	movs	r3, #20
    fa20:	18fb      	adds	r3, r7, r3
    fa22:	2200      	movs	r2, #0
    fa24:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    fa26:	2314      	movs	r3, #20
    fa28:	18fb      	adds	r3, r7, r3
    fa2a:	2200      	movs	r2, #0
    fa2c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    fa2e:	2314      	movs	r3, #20
    fa30:	18fb      	adds	r3, r7, r3
    fa32:	2200      	movs	r2, #0
    fa34:	70da      	strb	r2, [r3, #3]
		len = 5;
    fa36:	231f      	movs	r3, #31
    fa38:	18fb      	adds	r3, r7, r3
    fa3a:	2205      	movs	r2, #5
    fa3c:	701a      	strb	r2, [r3, #0]
		break;
    fa3e:	e0d1      	b.n	fbe4 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    fa40:	2314      	movs	r3, #20
    fa42:	18fb      	adds	r3, r7, r3
    fa44:	2200      	movs	r2, #0
    fa46:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    fa48:	2314      	movs	r3, #20
    fa4a:	18fb      	adds	r3, r7, r3
    fa4c:	2200      	movs	r2, #0
    fa4e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    fa50:	2314      	movs	r3, #20
    fa52:	18fb      	adds	r3, r7, r3
    fa54:	2200      	movs	r2, #0
    fa56:	70da      	strb	r2, [r3, #3]
		len = 5;
    fa58:	231f      	movs	r3, #31
    fa5a:	18fb      	adds	r3, r7, r3
    fa5c:	2205      	movs	r2, #5
    fa5e:	701a      	strb	r2, [r3, #0]
		break;
    fa60:	e0c0      	b.n	fbe4 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    fa62:	2314      	movs	r3, #20
    fa64:	18fb      	adds	r3, r7, r3
    fa66:	22ff      	movs	r2, #255	; 0xff
    fa68:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    fa6a:	2314      	movs	r3, #20
    fa6c:	18fb      	adds	r3, r7, r3
    fa6e:	22ff      	movs	r2, #255	; 0xff
    fa70:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    fa72:	2314      	movs	r3, #20
    fa74:	18fb      	adds	r3, r7, r3
    fa76:	22ff      	movs	r2, #255	; 0xff
    fa78:	70da      	strb	r2, [r3, #3]
		len = 5;
    fa7a:	231f      	movs	r3, #31
    fa7c:	18fb      	adds	r3, r7, r3
    fa7e:	2205      	movs	r2, #5
    fa80:	701a      	strb	r2, [r3, #0]
		break;
    fa82:	e0af      	b.n	fbe4 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    fa84:	68bb      	ldr	r3, [r7, #8]
    fa86:	0c1b      	lsrs	r3, r3, #16
    fa88:	b2da      	uxtb	r2, r3
    fa8a:	2314      	movs	r3, #20
    fa8c:	18fb      	adds	r3, r7, r3
    fa8e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    fa90:	68bb      	ldr	r3, [r7, #8]
    fa92:	0a1b      	lsrs	r3, r3, #8
    fa94:	b2da      	uxtb	r2, r3
    fa96:	2314      	movs	r3, #20
    fa98:	18fb      	adds	r3, r7, r3
    fa9a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    fa9c:	68bb      	ldr	r3, [r7, #8]
    fa9e:	b2da      	uxtb	r2, r3
    faa0:	2314      	movs	r3, #20
    faa2:	18fb      	adds	r3, r7, r3
    faa4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    faa6:	683b      	ldr	r3, [r7, #0]
    faa8:	0a1b      	lsrs	r3, r3, #8
    faaa:	b2da      	uxtb	r2, r3
    faac:	2314      	movs	r3, #20
    faae:	18fb      	adds	r3, r7, r3
    fab0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    fab2:	683b      	ldr	r3, [r7, #0]
    fab4:	b2da      	uxtb	r2, r3
    fab6:	2314      	movs	r3, #20
    fab8:	18fb      	adds	r3, r7, r3
    faba:	715a      	strb	r2, [r3, #5]
		len = 7;
    fabc:	231f      	movs	r3, #31
    fabe:	18fb      	adds	r3, r7, r3
    fac0:	2207      	movs	r2, #7
    fac2:	701a      	strb	r2, [r3, #0]
		break;
    fac4:	e08e      	b.n	fbe4 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    fac6:	68bb      	ldr	r3, [r7, #8]
    fac8:	0c1b      	lsrs	r3, r3, #16
    faca:	b2da      	uxtb	r2, r3
    facc:	2314      	movs	r3, #20
    face:	18fb      	adds	r3, r7, r3
    fad0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    fad2:	68bb      	ldr	r3, [r7, #8]
    fad4:	0a1b      	lsrs	r3, r3, #8
    fad6:	b2da      	uxtb	r2, r3
    fad8:	2314      	movs	r3, #20
    fada:	18fb      	adds	r3, r7, r3
    fadc:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    fade:	68bb      	ldr	r3, [r7, #8]
    fae0:	b2da      	uxtb	r2, r3
    fae2:	2314      	movs	r3, #20
    fae4:	18fb      	adds	r3, r7, r3
    fae6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    fae8:	683b      	ldr	r3, [r7, #0]
    faea:	0c1b      	lsrs	r3, r3, #16
    faec:	b2da      	uxtb	r2, r3
    faee:	2314      	movs	r3, #20
    faf0:	18fb      	adds	r3, r7, r3
    faf2:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    faf4:	683b      	ldr	r3, [r7, #0]
    faf6:	0a1b      	lsrs	r3, r3, #8
    faf8:	b2da      	uxtb	r2, r3
    fafa:	2314      	movs	r3, #20
    fafc:	18fb      	adds	r3, r7, r3
    fafe:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    fb00:	683b      	ldr	r3, [r7, #0]
    fb02:	b2da      	uxtb	r2, r3
    fb04:	2314      	movs	r3, #20
    fb06:	18fb      	adds	r3, r7, r3
    fb08:	719a      	strb	r2, [r3, #6]
		len = 8;
    fb0a:	231f      	movs	r3, #31
    fb0c:	18fb      	adds	r3, r7, r3
    fb0e:	2208      	movs	r2, #8
    fb10:	701a      	strb	r2, [r3, #0]
		break;
    fb12:	e067      	b.n	fbe4 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    fb14:	68bb      	ldr	r3, [r7, #8]
    fb16:	0a1b      	lsrs	r3, r3, #8
    fb18:	b2da      	uxtb	r2, r3
    fb1a:	2314      	movs	r3, #20
    fb1c:	18fb      	adds	r3, r7, r3
    fb1e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    fb20:	2330      	movs	r3, #48	; 0x30
    fb22:	18fb      	adds	r3, r7, r3
    fb24:	781b      	ldrb	r3, [r3, #0]
    fb26:	2b00      	cmp	r3, #0
    fb28:	d009      	beq.n	fb3e <spi_cmd+0x1da>
    fb2a:	2314      	movs	r3, #20
    fb2c:	18fb      	adds	r3, r7, r3
    fb2e:	785b      	ldrb	r3, [r3, #1]
    fb30:	2280      	movs	r2, #128	; 0x80
    fb32:	4252      	negs	r2, r2
    fb34:	4313      	orrs	r3, r2
    fb36:	b2da      	uxtb	r2, r3
    fb38:	2314      	movs	r3, #20
    fb3a:	18fb      	adds	r3, r7, r3
    fb3c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    fb3e:	68bb      	ldr	r3, [r7, #8]
    fb40:	b2da      	uxtb	r2, r3
    fb42:	2314      	movs	r3, #20
    fb44:	18fb      	adds	r3, r7, r3
    fb46:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    fb48:	687b      	ldr	r3, [r7, #4]
    fb4a:	0e1b      	lsrs	r3, r3, #24
    fb4c:	b2da      	uxtb	r2, r3
    fb4e:	2314      	movs	r3, #20
    fb50:	18fb      	adds	r3, r7, r3
    fb52:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    fb54:	687b      	ldr	r3, [r7, #4]
    fb56:	0c1b      	lsrs	r3, r3, #16
    fb58:	b2da      	uxtb	r2, r3
    fb5a:	2314      	movs	r3, #20
    fb5c:	18fb      	adds	r3, r7, r3
    fb5e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    fb60:	687b      	ldr	r3, [r7, #4]
    fb62:	0a1b      	lsrs	r3, r3, #8
    fb64:	b2da      	uxtb	r2, r3
    fb66:	2314      	movs	r3, #20
    fb68:	18fb      	adds	r3, r7, r3
    fb6a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    fb6c:	687b      	ldr	r3, [r7, #4]
    fb6e:	b2da      	uxtb	r2, r3
    fb70:	2314      	movs	r3, #20
    fb72:	18fb      	adds	r3, r7, r3
    fb74:	719a      	strb	r2, [r3, #6]
		len = 8;
    fb76:	231f      	movs	r3, #31
    fb78:	18fb      	adds	r3, r7, r3
    fb7a:	2208      	movs	r2, #8
    fb7c:	701a      	strb	r2, [r3, #0]
		break;
    fb7e:	e031      	b.n	fbe4 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    fb80:	68bb      	ldr	r3, [r7, #8]
    fb82:	0c1b      	lsrs	r3, r3, #16
    fb84:	b2da      	uxtb	r2, r3
    fb86:	2314      	movs	r3, #20
    fb88:	18fb      	adds	r3, r7, r3
    fb8a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    fb8c:	68bb      	ldr	r3, [r7, #8]
    fb8e:	0a1b      	lsrs	r3, r3, #8
    fb90:	b2da      	uxtb	r2, r3
    fb92:	2314      	movs	r3, #20
    fb94:	18fb      	adds	r3, r7, r3
    fb96:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    fb98:	68bb      	ldr	r3, [r7, #8]
    fb9a:	b2da      	uxtb	r2, r3
    fb9c:	2314      	movs	r3, #20
    fb9e:	18fb      	adds	r3, r7, r3
    fba0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    fba2:	687b      	ldr	r3, [r7, #4]
    fba4:	0e1b      	lsrs	r3, r3, #24
    fba6:	b2da      	uxtb	r2, r3
    fba8:	2314      	movs	r3, #20
    fbaa:	18fb      	adds	r3, r7, r3
    fbac:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    fbae:	687b      	ldr	r3, [r7, #4]
    fbb0:	0c1b      	lsrs	r3, r3, #16
    fbb2:	b2da      	uxtb	r2, r3
    fbb4:	2314      	movs	r3, #20
    fbb6:	18fb      	adds	r3, r7, r3
    fbb8:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    fbba:	687b      	ldr	r3, [r7, #4]
    fbbc:	0a1b      	lsrs	r3, r3, #8
    fbbe:	b2da      	uxtb	r2, r3
    fbc0:	2314      	movs	r3, #20
    fbc2:	18fb      	adds	r3, r7, r3
    fbc4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    fbc6:	687b      	ldr	r3, [r7, #4]
    fbc8:	b2da      	uxtb	r2, r3
    fbca:	2314      	movs	r3, #20
    fbcc:	18fb      	adds	r3, r7, r3
    fbce:	71da      	strb	r2, [r3, #7]
		len = 9;
    fbd0:	231f      	movs	r3, #31
    fbd2:	18fb      	adds	r3, r7, r3
    fbd4:	2209      	movs	r2, #9
    fbd6:	701a      	strb	r2, [r3, #0]
		break;
    fbd8:	e004      	b.n	fbe4 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    fbda:	231e      	movs	r3, #30
    fbdc:	18fb      	adds	r3, r7, r3
    fbde:	2200      	movs	r2, #0
    fbe0:	701a      	strb	r2, [r3, #0]
		break;
    fbe2:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    fbe4:	231e      	movs	r3, #30
    fbe6:	18fb      	adds	r3, r7, r3
    fbe8:	781b      	ldrb	r3, [r3, #0]
    fbea:	b25b      	sxtb	r3, r3
    fbec:	2b00      	cmp	r3, #0
    fbee:	d03f      	beq.n	fc70 <spi_cmd+0x30c>
		if (!gu8Crc_off)
    fbf0:	4b24      	ldr	r3, [pc, #144]	; (fc84 <spi_cmd+0x320>)
    fbf2:	781b      	ldrb	r3, [r3, #0]
    fbf4:	2b00      	cmp	r3, #0
    fbf6:	d115      	bne.n	fc24 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    fbf8:	231f      	movs	r3, #31
    fbfa:	18fb      	adds	r3, r7, r3
    fbfc:	781b      	ldrb	r3, [r3, #0]
    fbfe:	1e5c      	subs	r4, r3, #1
    fc00:	231f      	movs	r3, #31
    fc02:	18fb      	adds	r3, r7, r3
    fc04:	781b      	ldrb	r3, [r3, #0]
    fc06:	3b01      	subs	r3, #1
    fc08:	001a      	movs	r2, r3
    fc0a:	2314      	movs	r3, #20
    fc0c:	18fb      	adds	r3, r7, r3
    fc0e:	0019      	movs	r1, r3
    fc10:	207f      	movs	r0, #127	; 0x7f
    fc12:	4b1d      	ldr	r3, [pc, #116]	; (fc88 <spi_cmd+0x324>)
    fc14:	4798      	blx	r3
    fc16:	0003      	movs	r3, r0
    fc18:	18db      	adds	r3, r3, r3
    fc1a:	b2da      	uxtb	r2, r3
    fc1c:	2314      	movs	r3, #20
    fc1e:	18fb      	adds	r3, r7, r3
    fc20:	551a      	strb	r2, [r3, r4]
    fc22:	e006      	b.n	fc32 <spi_cmd+0x2ce>
		else
			len-=1;
    fc24:	231f      	movs	r3, #31
    fc26:	18fb      	adds	r3, r7, r3
    fc28:	221f      	movs	r2, #31
    fc2a:	18ba      	adds	r2, r7, r2
    fc2c:	7812      	ldrb	r2, [r2, #0]
    fc2e:	3a01      	subs	r2, #1
    fc30:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    fc32:	231f      	movs	r3, #31
    fc34:	18fb      	adds	r3, r7, r3
    fc36:	781b      	ldrb	r3, [r3, #0]
    fc38:	b29a      	uxth	r2, r3
    fc3a:	2314      	movs	r3, #20
    fc3c:	18fb      	adds	r3, r7, r3
    fc3e:	0011      	movs	r1, r2
    fc40:	0018      	movs	r0, r3
    fc42:	4b12      	ldr	r3, [pc, #72]	; (fc8c <spi_cmd+0x328>)
    fc44:	4798      	blx	r3
    fc46:	1e03      	subs	r3, r0, #0
    fc48:	d012      	beq.n	fc70 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    fc4a:	2390      	movs	r3, #144	; 0x90
    fc4c:	005a      	lsls	r2, r3, #1
    fc4e:	4910      	ldr	r1, [pc, #64]	; (fc90 <spi_cmd+0x32c>)
    fc50:	4b10      	ldr	r3, [pc, #64]	; (fc94 <spi_cmd+0x330>)
    fc52:	0018      	movs	r0, r3
    fc54:	4b10      	ldr	r3, [pc, #64]	; (fc98 <spi_cmd+0x334>)
    fc56:	4798      	blx	r3
    fc58:	4b10      	ldr	r3, [pc, #64]	; (fc9c <spi_cmd+0x338>)
    fc5a:	0018      	movs	r0, r3
    fc5c:	4b0e      	ldr	r3, [pc, #56]	; (fc98 <spi_cmd+0x334>)
    fc5e:	4798      	blx	r3
    fc60:	4b0f      	ldr	r3, [pc, #60]	; (fca0 <spi_cmd+0x33c>)
    fc62:	0018      	movs	r0, r3
    fc64:	4b0c      	ldr	r3, [pc, #48]	; (fc98 <spi_cmd+0x334>)
    fc66:	4798      	blx	r3
			result = N_FAIL;
    fc68:	231e      	movs	r3, #30
    fc6a:	18fb      	adds	r3, r7, r3
    fc6c:	2200      	movs	r2, #0
    fc6e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    fc70:	231e      	movs	r3, #30
    fc72:	18fb      	adds	r3, r7, r3
    fc74:	781b      	ldrb	r3, [r3, #0]
    fc76:	b25b      	sxtb	r3, r3
}
    fc78:	0018      	movs	r0, r3
    fc7a:	46bd      	mov	sp, r7
    fc7c:	b009      	add	sp, #36	; 0x24
    fc7e:	bd90      	pop	{r4, r7, pc}
    fc80:	00026284 	.word	0x00026284
    fc84:	20004128 	.word	0x20004128
    fc88:	0000f915 	.word	0x0000f915
    fc8c:	0000f85d 	.word	0x0000f85d
    fc90:	000262fc 	.word	0x000262fc
    fc94:	00025d0c 	.word	0x00025d0c
    fc98:	0000a3cd 	.word	0x0000a3cd
    fc9c:	00025d20 	.word	0x00025d20
    fca0:	00025d4c 	.word	0x00025d4c

0000fca4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    fca4:	b590      	push	{r4, r7, lr}
    fca6:	b085      	sub	sp, #20
    fca8:	af00      	add	r7, sp, #0
    fcaa:	0002      	movs	r2, r0
    fcac:	1dfb      	adds	r3, r7, #7
    fcae:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    fcb0:	230e      	movs	r3, #14
    fcb2:	18fb      	adds	r3, r7, r3
    fcb4:	2201      	movs	r2, #1
    fcb6:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    fcb8:	4b32      	ldr	r3, [pc, #200]	; (fd84 <spi_data_rsp+0xe0>)
    fcba:	781b      	ldrb	r3, [r3, #0]
    fcbc:	2b00      	cmp	r3, #0
    fcbe:	d104      	bne.n	fcca <spi_data_rsp+0x26>
		len = 2;
    fcc0:	230f      	movs	r3, #15
    fcc2:	18fb      	adds	r3, r7, r3
    fcc4:	2202      	movs	r2, #2
    fcc6:	701a      	strb	r2, [r3, #0]
    fcc8:	e003      	b.n	fcd2 <spi_data_rsp+0x2e>
	else
		len = 3;
    fcca:	230f      	movs	r3, #15
    fccc:	18fb      	adds	r3, r7, r3
    fcce:	2203      	movs	r2, #3
    fcd0:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    fcd2:	230f      	movs	r3, #15
    fcd4:	18fb      	adds	r3, r7, r3
    fcd6:	781b      	ldrb	r3, [r3, #0]
    fcd8:	b29a      	uxth	r2, r3
    fcda:	2308      	movs	r3, #8
    fcdc:	18fb      	adds	r3, r7, r3
    fcde:	0011      	movs	r1, r2
    fce0:	0018      	movs	r0, r3
    fce2:	4b29      	ldr	r3, [pc, #164]	; (fd88 <spi_data_rsp+0xe4>)
    fce4:	4798      	blx	r3
    fce6:	1e03      	subs	r3, r0, #0
    fce8:	d013      	beq.n	fd12 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    fcea:	239a      	movs	r3, #154	; 0x9a
    fcec:	005a      	lsls	r2, r3, #1
    fcee:	4927      	ldr	r1, [pc, #156]	; (fd8c <spi_data_rsp+0xe8>)
    fcf0:	4b27      	ldr	r3, [pc, #156]	; (fd90 <spi_data_rsp+0xec>)
    fcf2:	0018      	movs	r0, r3
    fcf4:	4b27      	ldr	r3, [pc, #156]	; (fd94 <spi_data_rsp+0xf0>)
    fcf6:	4798      	blx	r3
    fcf8:	4b27      	ldr	r3, [pc, #156]	; (fd98 <spi_data_rsp+0xf4>)
    fcfa:	0018      	movs	r0, r3
    fcfc:	4b25      	ldr	r3, [pc, #148]	; (fd94 <spi_data_rsp+0xf0>)
    fcfe:	4798      	blx	r3
    fd00:	4b26      	ldr	r3, [pc, #152]	; (fd9c <spi_data_rsp+0xf8>)
    fd02:	0018      	movs	r0, r3
    fd04:	4b23      	ldr	r3, [pc, #140]	; (fd94 <spi_data_rsp+0xf0>)
    fd06:	4798      	blx	r3
		result = N_FAIL;
    fd08:	230e      	movs	r3, #14
    fd0a:	18fb      	adds	r3, r7, r3
    fd0c:	2200      	movs	r2, #0
    fd0e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    fd10:	e030      	b.n	fd74 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    fd12:	230f      	movs	r3, #15
    fd14:	18fb      	adds	r3, r7, r3
    fd16:	781b      	ldrb	r3, [r3, #0]
    fd18:	3b01      	subs	r3, #1
    fd1a:	2208      	movs	r2, #8
    fd1c:	18ba      	adds	r2, r7, r2
    fd1e:	5cd3      	ldrb	r3, [r2, r3]
    fd20:	2b00      	cmp	r3, #0
    fd22:	d108      	bne.n	fd36 <spi_data_rsp+0x92>
    fd24:	230f      	movs	r3, #15
    fd26:	18fb      	adds	r3, r7, r3
    fd28:	781b      	ldrb	r3, [r3, #0]
    fd2a:	3b02      	subs	r3, #2
    fd2c:	2208      	movs	r2, #8
    fd2e:	18ba      	adds	r2, r7, r2
    fd30:	5cd3      	ldrb	r3, [r2, r3]
    fd32:	2bc3      	cmp	r3, #195	; 0xc3
    fd34:	d01e      	beq.n	fd74 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    fd36:	233c      	movs	r3, #60	; 0x3c
    fd38:	33ff      	adds	r3, #255	; 0xff
    fd3a:	001a      	movs	r2, r3
    fd3c:	4913      	ldr	r1, [pc, #76]	; (fd8c <spi_data_rsp+0xe8>)
    fd3e:	4b14      	ldr	r3, [pc, #80]	; (fd90 <spi_data_rsp+0xec>)
    fd40:	0018      	movs	r0, r3
    fd42:	4b14      	ldr	r3, [pc, #80]	; (fd94 <spi_data_rsp+0xf0>)
    fd44:	4798      	blx	r3
    fd46:	2308      	movs	r3, #8
    fd48:	18fb      	adds	r3, r7, r3
    fd4a:	781b      	ldrb	r3, [r3, #0]
    fd4c:	0019      	movs	r1, r3
    fd4e:	2308      	movs	r3, #8
    fd50:	18fb      	adds	r3, r7, r3
    fd52:	785b      	ldrb	r3, [r3, #1]
    fd54:	001a      	movs	r2, r3
    fd56:	2308      	movs	r3, #8
    fd58:	18fb      	adds	r3, r7, r3
    fd5a:	789b      	ldrb	r3, [r3, #2]
    fd5c:	4810      	ldr	r0, [pc, #64]	; (fda0 <spi_data_rsp+0xfc>)
    fd5e:	4c0d      	ldr	r4, [pc, #52]	; (fd94 <spi_data_rsp+0xf0>)
    fd60:	47a0      	blx	r4
    fd62:	4b0e      	ldr	r3, [pc, #56]	; (fd9c <spi_data_rsp+0xf8>)
    fd64:	0018      	movs	r0, r3
    fd66:	4b0b      	ldr	r3, [pc, #44]	; (fd94 <spi_data_rsp+0xf0>)
    fd68:	4798      	blx	r3
		result = N_FAIL;
    fd6a:	230e      	movs	r3, #14
    fd6c:	18fb      	adds	r3, r7, r3
    fd6e:	2200      	movs	r2, #0
    fd70:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    fd72:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    fd74:	230e      	movs	r3, #14
    fd76:	18fb      	adds	r3, r7, r3
    fd78:	781b      	ldrb	r3, [r3, #0]
    fd7a:	b25b      	sxtb	r3, r3
}
    fd7c:	0018      	movs	r0, r3
    fd7e:	46bd      	mov	sp, r7
    fd80:	b005      	add	sp, #20
    fd82:	bd90      	pop	{r4, r7, pc}
    fd84:	20004128 	.word	0x20004128
    fd88:	0000f819 	.word	0x0000f819
    fd8c:	00026304 	.word	0x00026304
    fd90:	00025d0c 	.word	0x00025d0c
    fd94:	0000a3cd 	.word	0x0000a3cd
    fd98:	00025d50 	.word	0x00025d50
    fd9c:	00025d4c 	.word	0x00025d4c
    fda0:	00025d70 	.word	0x00025d70

0000fda4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    fda4:	b580      	push	{r7, lr}
    fda6:	b084      	sub	sp, #16
    fda8:	af00      	add	r7, sp, #0
    fdaa:	0002      	movs	r2, r0
    fdac:	1dfb      	adds	r3, r7, #7
    fdae:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    fdb0:	230f      	movs	r3, #15
    fdb2:	18fb      	adds	r3, r7, r3
    fdb4:	2201      	movs	r2, #1
    fdb6:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    fdb8:	1dfb      	adds	r3, r7, #7
    fdba:	781b      	ldrb	r3, [r3, #0]
    fdbc:	2bcf      	cmp	r3, #207	; 0xcf
    fdbe:	d007      	beq.n	fdd0 <spi_cmd_rsp+0x2c>
    fdc0:	1dfb      	adds	r3, r7, #7
    fdc2:	781b      	ldrb	r3, [r3, #0]
    fdc4:	2bc5      	cmp	r3, #197	; 0xc5
    fdc6:	d003      	beq.n	fdd0 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    fdc8:	1dfb      	adds	r3, r7, #7
    fdca:	781b      	ldrb	r3, [r3, #0]
    fdcc:	2bc6      	cmp	r3, #198	; 0xc6
    fdce:	d10c      	bne.n	fdea <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    fdd0:	230d      	movs	r3, #13
    fdd2:	18fb      	adds	r3, r7, r3
    fdd4:	2101      	movs	r1, #1
    fdd6:	0018      	movs	r0, r3
    fdd8:	4b3b      	ldr	r3, [pc, #236]	; (fec8 <spi_cmd_rsp+0x124>)
    fdda:	4798      	blx	r3
    fddc:	1e03      	subs	r3, r0, #0
    fdde:	d004      	beq.n	fdea <spi_cmd_rsp+0x46>
			result = N_FAIL;
    fde0:	230f      	movs	r3, #15
    fde2:	18fb      	adds	r3, r7, r3
    fde4:	2200      	movs	r2, #0
    fde6:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    fde8:	e065      	b.n	feb6 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    fdea:	230e      	movs	r3, #14
    fdec:	18fb      	adds	r3, r7, r3
    fdee:	220a      	movs	r2, #10
    fdf0:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    fdf2:	230d      	movs	r3, #13
    fdf4:	18fb      	adds	r3, r7, r3
    fdf6:	2101      	movs	r1, #1
    fdf8:	0018      	movs	r0, r3
    fdfa:	4b33      	ldr	r3, [pc, #204]	; (fec8 <spi_cmd_rsp+0x124>)
    fdfc:	4798      	blx	r3
    fdfe:	1e03      	subs	r3, r0, #0
    fe00:	d014      	beq.n	fe2c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    fe02:	235c      	movs	r3, #92	; 0x5c
    fe04:	33ff      	adds	r3, #255	; 0xff
    fe06:	001a      	movs	r2, r3
    fe08:	4930      	ldr	r1, [pc, #192]	; (fecc <spi_cmd_rsp+0x128>)
    fe0a:	4b31      	ldr	r3, [pc, #196]	; (fed0 <spi_cmd_rsp+0x12c>)
    fe0c:	0018      	movs	r0, r3
    fe0e:	4b31      	ldr	r3, [pc, #196]	; (fed4 <spi_cmd_rsp+0x130>)
    fe10:	4798      	blx	r3
    fe12:	4b31      	ldr	r3, [pc, #196]	; (fed8 <spi_cmd_rsp+0x134>)
    fe14:	0018      	movs	r0, r3
    fe16:	4b2f      	ldr	r3, [pc, #188]	; (fed4 <spi_cmd_rsp+0x130>)
    fe18:	4798      	blx	r3
    fe1a:	4b30      	ldr	r3, [pc, #192]	; (fedc <spi_cmd_rsp+0x138>)
    fe1c:	0018      	movs	r0, r3
    fe1e:	4b2d      	ldr	r3, [pc, #180]	; (fed4 <spi_cmd_rsp+0x130>)
    fe20:	4798      	blx	r3
			result = N_FAIL;
    fe22:	230f      	movs	r3, #15
    fe24:	18fb      	adds	r3, r7, r3
    fe26:	2200      	movs	r2, #0
    fe28:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    fe2a:	e044      	b.n	feb6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    fe2c:	230d      	movs	r3, #13
    fe2e:	18fb      	adds	r3, r7, r3
    fe30:	781b      	ldrb	r3, [r3, #0]
    fe32:	1dfa      	adds	r2, r7, #7
    fe34:	7812      	ldrb	r2, [r2, #0]
    fe36:	429a      	cmp	r2, r3
    fe38:	d00b      	beq.n	fe52 <spi_cmd_rsp+0xae>
    fe3a:	230e      	movs	r3, #14
    fe3c:	18fb      	adds	r3, r7, r3
    fe3e:	781b      	ldrb	r3, [r3, #0]
    fe40:	b25b      	sxtb	r3, r3
    fe42:	b2da      	uxtb	r2, r3
    fe44:	3a01      	subs	r2, #1
    fe46:	b2d1      	uxtb	r1, r2
    fe48:	220e      	movs	r2, #14
    fe4a:	18ba      	adds	r2, r7, r2
    fe4c:	7011      	strb	r1, [r2, #0]
    fe4e:	2b00      	cmp	r3, #0
    fe50:	dccf      	bgt.n	fdf2 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    fe52:	230e      	movs	r3, #14
    fe54:	18fb      	adds	r3, r7, r3
    fe56:	220a      	movs	r2, #10
    fe58:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    fe5a:	230d      	movs	r3, #13
    fe5c:	18fb      	adds	r3, r7, r3
    fe5e:	2101      	movs	r1, #1
    fe60:	0018      	movs	r0, r3
    fe62:	4b19      	ldr	r3, [pc, #100]	; (fec8 <spi_cmd_rsp+0x124>)
    fe64:	4798      	blx	r3
    fe66:	1e03      	subs	r3, r0, #0
    fe68:	d014      	beq.n	fe94 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    fe6a:	236a      	movs	r3, #106	; 0x6a
    fe6c:	33ff      	adds	r3, #255	; 0xff
    fe6e:	001a      	movs	r2, r3
    fe70:	4916      	ldr	r1, [pc, #88]	; (fecc <spi_cmd_rsp+0x128>)
    fe72:	4b17      	ldr	r3, [pc, #92]	; (fed0 <spi_cmd_rsp+0x12c>)
    fe74:	0018      	movs	r0, r3
    fe76:	4b17      	ldr	r3, [pc, #92]	; (fed4 <spi_cmd_rsp+0x130>)
    fe78:	4798      	blx	r3
    fe7a:	4b17      	ldr	r3, [pc, #92]	; (fed8 <spi_cmd_rsp+0x134>)
    fe7c:	0018      	movs	r0, r3
    fe7e:	4b15      	ldr	r3, [pc, #84]	; (fed4 <spi_cmd_rsp+0x130>)
    fe80:	4798      	blx	r3
    fe82:	4b16      	ldr	r3, [pc, #88]	; (fedc <spi_cmd_rsp+0x138>)
    fe84:	0018      	movs	r0, r3
    fe86:	4b13      	ldr	r3, [pc, #76]	; (fed4 <spi_cmd_rsp+0x130>)
    fe88:	4798      	blx	r3
			result = N_FAIL;
    fe8a:	230f      	movs	r3, #15
    fe8c:	18fb      	adds	r3, r7, r3
    fe8e:	2200      	movs	r2, #0
    fe90:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    fe92:	e010      	b.n	feb6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    fe94:	230d      	movs	r3, #13
    fe96:	18fb      	adds	r3, r7, r3
    fe98:	781b      	ldrb	r3, [r3, #0]
    fe9a:	2b00      	cmp	r3, #0
    fe9c:	d00b      	beq.n	feb6 <spi_cmd_rsp+0x112>
    fe9e:	230e      	movs	r3, #14
    fea0:	18fb      	adds	r3, r7, r3
    fea2:	781b      	ldrb	r3, [r3, #0]
    fea4:	b25b      	sxtb	r3, r3
    fea6:	b2da      	uxtb	r2, r3
    fea8:	3a01      	subs	r2, #1
    feaa:	b2d1      	uxtb	r1, r2
    feac:	220e      	movs	r2, #14
    feae:	18ba      	adds	r2, r7, r2
    feb0:	7011      	strb	r1, [r2, #0]
    feb2:	2b00      	cmp	r3, #0
    feb4:	dcd1      	bgt.n	fe5a <spi_cmd_rsp+0xb6>

_fail_:

	return result;
    feb6:	230f      	movs	r3, #15
    feb8:	18fb      	adds	r3, r7, r3
    feba:	781b      	ldrb	r3, [r3, #0]
    febc:	b25b      	sxtb	r3, r3
}
    febe:	0018      	movs	r0, r3
    fec0:	46bd      	mov	sp, r7
    fec2:	b004      	add	sp, #16
    fec4:	bd80      	pop	{r7, pc}
    fec6:	46c0      	nop			; (mov r8, r8)
    fec8:	0000f819 	.word	0x0000f819
    fecc:	00026314 	.word	0x00026314
    fed0:	00025d0c 	.word	0x00025d0c
    fed4:	0000a3cd 	.word	0x0000a3cd
    fed8:	00025da0 	.word	0x00025da0
    fedc:	00025d4c 	.word	0x00025d4c

0000fee0 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
    fee0:	b590      	push	{r4, r7, lr}
    fee2:	b09f      	sub	sp, #124	; 0x7c
    fee4:	af00      	add	r7, sp, #0
    fee6:	60b9      	str	r1, [r7, #8]
    fee8:	607a      	str	r2, [r7, #4]
    feea:	603b      	str	r3, [r7, #0]
    feec:	230f      	movs	r3, #15
    feee:	18fb      	adds	r3, r7, r3
    fef0:	1c02      	adds	r2, r0, #0
    fef2:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
    fef4:	2300      	movs	r3, #0
    fef6:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
    fef8:	2301      	movs	r3, #1
    fefa:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
    fefc:	2338      	movs	r3, #56	; 0x38
    fefe:	18fb      	adds	r3, r7, r3
    ff00:	220f      	movs	r2, #15
    ff02:	18ba      	adds	r2, r7, r2
    ff04:	7812      	ldrb	r2, [r2, #0]
    ff06:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    ff08:	230f      	movs	r3, #15
    ff0a:	18fb      	adds	r3, r7, r3
    ff0c:	781b      	ldrb	r3, [r3, #0]
    ff0e:	3bc1      	subs	r3, #193	; 0xc1
    ff10:	2b0e      	cmp	r3, #14
    ff12:	d900      	bls.n	ff16 <spi_cmd_complete+0x36>
    ff14:	e103      	b.n	1011e <spi_cmd_complete+0x23e>
    ff16:	009a      	lsls	r2, r3, #2
    ff18:	4bd1      	ldr	r3, [pc, #836]	; (10260 <spi_cmd_complete+0x380>)
    ff1a:	18d3      	adds	r3, r2, r3
    ff1c:	681b      	ldr	r3, [r3, #0]
    ff1e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
    ff20:	68bb      	ldr	r3, [r7, #8]
    ff22:	0c1b      	lsrs	r3, r3, #16
    ff24:	b2da      	uxtb	r2, r3
    ff26:	2338      	movs	r3, #56	; 0x38
    ff28:	18fb      	adds	r3, r7, r3
    ff2a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
    ff2c:	68bb      	ldr	r3, [r7, #8]
    ff2e:	0a1b      	lsrs	r3, r3, #8
    ff30:	b2da      	uxtb	r2, r3
    ff32:	2338      	movs	r3, #56	; 0x38
    ff34:	18fb      	adds	r3, r7, r3
    ff36:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
    ff38:	68bb      	ldr	r3, [r7, #8]
    ff3a:	b2da      	uxtb	r2, r3
    ff3c:	2338      	movs	r3, #56	; 0x38
    ff3e:	18fb      	adds	r3, r7, r3
    ff40:	70da      	strb	r2, [r3, #3]
		len = 5;
    ff42:	2305      	movs	r3, #5
    ff44:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
    ff46:	e0ed      	b.n	10124 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
    ff48:	68bb      	ldr	r3, [r7, #8]
    ff4a:	0a1b      	lsrs	r3, r3, #8
    ff4c:	b2da      	uxtb	r2, r3
    ff4e:	2338      	movs	r3, #56	; 0x38
    ff50:	18fb      	adds	r3, r7, r3
    ff52:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
    ff54:	2388      	movs	r3, #136	; 0x88
    ff56:	18fb      	adds	r3, r7, r3
    ff58:	781b      	ldrb	r3, [r3, #0]
    ff5a:	2b01      	cmp	r3, #1
    ff5c:	d109      	bne.n	ff72 <spi_cmd_complete+0x92>
    ff5e:	2338      	movs	r3, #56	; 0x38
    ff60:	18fb      	adds	r3, r7, r3
    ff62:	785b      	ldrb	r3, [r3, #1]
    ff64:	2280      	movs	r2, #128	; 0x80
    ff66:	4252      	negs	r2, r2
    ff68:	4313      	orrs	r3, r2
    ff6a:	b2da      	uxtb	r2, r3
    ff6c:	2338      	movs	r3, #56	; 0x38
    ff6e:	18fb      	adds	r3, r7, r3
    ff70:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
    ff72:	68bb      	ldr	r3, [r7, #8]
    ff74:	b2da      	uxtb	r2, r3
    ff76:	2338      	movs	r3, #56	; 0x38
    ff78:	18fb      	adds	r3, r7, r3
    ff7a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
    ff7c:	2338      	movs	r3, #56	; 0x38
    ff7e:	18fb      	adds	r3, r7, r3
    ff80:	2200      	movs	r2, #0
    ff82:	70da      	strb	r2, [r3, #3]
		len = 5;
    ff84:	2305      	movs	r3, #5
    ff86:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
    ff88:	e0cc      	b.n	10124 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
    ff8a:	2338      	movs	r3, #56	; 0x38
    ff8c:	18fb      	adds	r3, r7, r3
    ff8e:	2200      	movs	r2, #0
    ff90:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
    ff92:	2338      	movs	r3, #56	; 0x38
    ff94:	18fb      	adds	r3, r7, r3
    ff96:	2200      	movs	r2, #0
    ff98:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
    ff9a:	2338      	movs	r3, #56	; 0x38
    ff9c:	18fb      	adds	r3, r7, r3
    ff9e:	2200      	movs	r2, #0
    ffa0:	70da      	strb	r2, [r3, #3]
		len = 5;
    ffa2:	2305      	movs	r3, #5
    ffa4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
    ffa6:	e0bd      	b.n	10124 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
    ffa8:	2338      	movs	r3, #56	; 0x38
    ffaa:	18fb      	adds	r3, r7, r3
    ffac:	2200      	movs	r2, #0
    ffae:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
    ffb0:	2338      	movs	r3, #56	; 0x38
    ffb2:	18fb      	adds	r3, r7, r3
    ffb4:	2200      	movs	r2, #0
    ffb6:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
    ffb8:	2338      	movs	r3, #56	; 0x38
    ffba:	18fb      	adds	r3, r7, r3
    ffbc:	2200      	movs	r2, #0
    ffbe:	70da      	strb	r2, [r3, #3]
		len = 5;
    ffc0:	2305      	movs	r3, #5
    ffc2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
    ffc4:	e0ae      	b.n	10124 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
    ffc6:	2338      	movs	r3, #56	; 0x38
    ffc8:	18fb      	adds	r3, r7, r3
    ffca:	22ff      	movs	r2, #255	; 0xff
    ffcc:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
    ffce:	2338      	movs	r3, #56	; 0x38
    ffd0:	18fb      	adds	r3, r7, r3
    ffd2:	22ff      	movs	r2, #255	; 0xff
    ffd4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
    ffd6:	2338      	movs	r3, #56	; 0x38
    ffd8:	18fb      	adds	r3, r7, r3
    ffda:	22ff      	movs	r2, #255	; 0xff
    ffdc:	70da      	strb	r2, [r3, #3]
		len = 5;
    ffde:	2305      	movs	r3, #5
    ffe0:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
    ffe2:	e09f      	b.n	10124 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
    ffe4:	68bb      	ldr	r3, [r7, #8]
    ffe6:	0c1b      	lsrs	r3, r3, #16
    ffe8:	b2da      	uxtb	r2, r3
    ffea:	2338      	movs	r3, #56	; 0x38
    ffec:	18fb      	adds	r3, r7, r3
    ffee:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
    fff0:	68bb      	ldr	r3, [r7, #8]
    fff2:	0a1b      	lsrs	r3, r3, #8
    fff4:	b2da      	uxtb	r2, r3
    fff6:	2338      	movs	r3, #56	; 0x38
    fff8:	18fb      	adds	r3, r7, r3
    fffa:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
    fffc:	68bb      	ldr	r3, [r7, #8]
    fffe:	b2da      	uxtb	r2, r3
   10000:	2338      	movs	r3, #56	; 0x38
   10002:	18fb      	adds	r3, r7, r3
   10004:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   10006:	683b      	ldr	r3, [r7, #0]
   10008:	0a1b      	lsrs	r3, r3, #8
   1000a:	b2da      	uxtb	r2, r3
   1000c:	2338      	movs	r3, #56	; 0x38
   1000e:	18fb      	adds	r3, r7, r3
   10010:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   10012:	683b      	ldr	r3, [r7, #0]
   10014:	b2da      	uxtb	r2, r3
   10016:	2338      	movs	r3, #56	; 0x38
   10018:	18fb      	adds	r3, r7, r3
   1001a:	715a      	strb	r2, [r3, #5]
		len = 7;
   1001c:	2307      	movs	r3, #7
   1001e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   10020:	e080      	b.n	10124 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   10022:	68bb      	ldr	r3, [r7, #8]
   10024:	0c1b      	lsrs	r3, r3, #16
   10026:	b2da      	uxtb	r2, r3
   10028:	2338      	movs	r3, #56	; 0x38
   1002a:	18fb      	adds	r3, r7, r3
   1002c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1002e:	68bb      	ldr	r3, [r7, #8]
   10030:	0a1b      	lsrs	r3, r3, #8
   10032:	b2da      	uxtb	r2, r3
   10034:	2338      	movs	r3, #56	; 0x38
   10036:	18fb      	adds	r3, r7, r3
   10038:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1003a:	68bb      	ldr	r3, [r7, #8]
   1003c:	b2da      	uxtb	r2, r3
   1003e:	2338      	movs	r3, #56	; 0x38
   10040:	18fb      	adds	r3, r7, r3
   10042:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   10044:	683b      	ldr	r3, [r7, #0]
   10046:	0c1b      	lsrs	r3, r3, #16
   10048:	b2da      	uxtb	r2, r3
   1004a:	2338      	movs	r3, #56	; 0x38
   1004c:	18fb      	adds	r3, r7, r3
   1004e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   10050:	683b      	ldr	r3, [r7, #0]
   10052:	0a1b      	lsrs	r3, r3, #8
   10054:	b2da      	uxtb	r2, r3
   10056:	2338      	movs	r3, #56	; 0x38
   10058:	18fb      	adds	r3, r7, r3
   1005a:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   1005c:	683b      	ldr	r3, [r7, #0]
   1005e:	b2da      	uxtb	r2, r3
   10060:	2338      	movs	r3, #56	; 0x38
   10062:	18fb      	adds	r3, r7, r3
   10064:	719a      	strb	r2, [r3, #6]
		len = 8;
   10066:	2308      	movs	r3, #8
   10068:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   1006a:	e05b      	b.n	10124 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   1006c:	68bb      	ldr	r3, [r7, #8]
   1006e:	0a1b      	lsrs	r3, r3, #8
   10070:	b2da      	uxtb	r2, r3
   10072:	2338      	movs	r3, #56	; 0x38
   10074:	18fb      	adds	r3, r7, r3
   10076:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   10078:	2388      	movs	r3, #136	; 0x88
   1007a:	18fb      	adds	r3, r7, r3
   1007c:	781b      	ldrb	r3, [r3, #0]
   1007e:	2b01      	cmp	r3, #1
   10080:	d109      	bne.n	10096 <spi_cmd_complete+0x1b6>
   10082:	2338      	movs	r3, #56	; 0x38
   10084:	18fb      	adds	r3, r7, r3
   10086:	785b      	ldrb	r3, [r3, #1]
   10088:	2280      	movs	r2, #128	; 0x80
   1008a:	4252      	negs	r2, r2
   1008c:	4313      	orrs	r3, r2
   1008e:	b2da      	uxtb	r2, r3
   10090:	2338      	movs	r3, #56	; 0x38
   10092:	18fb      	adds	r3, r7, r3
   10094:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   10096:	68bb      	ldr	r3, [r7, #8]
   10098:	b2da      	uxtb	r2, r3
   1009a:	2338      	movs	r3, #56	; 0x38
   1009c:	18fb      	adds	r3, r7, r3
   1009e:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   100a0:	687b      	ldr	r3, [r7, #4]
   100a2:	78da      	ldrb	r2, [r3, #3]
   100a4:	2338      	movs	r3, #56	; 0x38
   100a6:	18fb      	adds	r3, r7, r3
   100a8:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   100aa:	687b      	ldr	r3, [r7, #4]
   100ac:	789a      	ldrb	r2, [r3, #2]
   100ae:	2338      	movs	r3, #56	; 0x38
   100b0:	18fb      	adds	r3, r7, r3
   100b2:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   100b4:	687b      	ldr	r3, [r7, #4]
   100b6:	785a      	ldrb	r2, [r3, #1]
   100b8:	2338      	movs	r3, #56	; 0x38
   100ba:	18fb      	adds	r3, r7, r3
   100bc:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   100be:	687b      	ldr	r3, [r7, #4]
   100c0:	781a      	ldrb	r2, [r3, #0]
   100c2:	2338      	movs	r3, #56	; 0x38
   100c4:	18fb      	adds	r3, r7, r3
   100c6:	719a      	strb	r2, [r3, #6]
		len = 8;
   100c8:	2308      	movs	r3, #8
   100ca:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   100cc:	e02a      	b.n	10124 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   100ce:	68bb      	ldr	r3, [r7, #8]
   100d0:	0c1b      	lsrs	r3, r3, #16
   100d2:	b2da      	uxtb	r2, r3
   100d4:	2338      	movs	r3, #56	; 0x38
   100d6:	18fb      	adds	r3, r7, r3
   100d8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   100da:	68bb      	ldr	r3, [r7, #8]
   100dc:	0a1b      	lsrs	r3, r3, #8
   100de:	b2da      	uxtb	r2, r3
   100e0:	2338      	movs	r3, #56	; 0x38
   100e2:	18fb      	adds	r3, r7, r3
   100e4:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   100e6:	68bb      	ldr	r3, [r7, #8]
   100e8:	b2da      	uxtb	r2, r3
   100ea:	2338      	movs	r3, #56	; 0x38
   100ec:	18fb      	adds	r3, r7, r3
   100ee:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   100f0:	687b      	ldr	r3, [r7, #4]
   100f2:	78da      	ldrb	r2, [r3, #3]
   100f4:	2338      	movs	r3, #56	; 0x38
   100f6:	18fb      	adds	r3, r7, r3
   100f8:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   100fa:	687b      	ldr	r3, [r7, #4]
   100fc:	789a      	ldrb	r2, [r3, #2]
   100fe:	2338      	movs	r3, #56	; 0x38
   10100:	18fb      	adds	r3, r7, r3
   10102:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   10104:	687b      	ldr	r3, [r7, #4]
   10106:	785a      	ldrb	r2, [r3, #1]
   10108:	2338      	movs	r3, #56	; 0x38
   1010a:	18fb      	adds	r3, r7, r3
   1010c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   1010e:	687b      	ldr	r3, [r7, #4]
   10110:	781a      	ldrb	r2, [r3, #0]
   10112:	2338      	movs	r3, #56	; 0x38
   10114:	18fb      	adds	r3, r7, r3
   10116:	71da      	strb	r2, [r3, #7]
		len = 9;
   10118:	2309      	movs	r3, #9
   1011a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   1011c:	e002      	b.n	10124 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   1011e:	2300      	movs	r3, #0
   10120:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   10122:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   10124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10126:	2b01      	cmp	r3, #1
   10128:	d001      	beq.n	1012e <spi_cmd_complete+0x24e>
		return result;
   1012a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1012c:	e33a      	b.n	107a4 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   1012e:	4b4d      	ldr	r3, [pc, #308]	; (10264 <spi_cmd_complete+0x384>)
   10130:	781b      	ldrb	r3, [r3, #0]
   10132:	2b00      	cmp	r3, #0
   10134:	d111      	bne.n	1015a <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   10136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   10138:	1e5c      	subs	r4, r3, #1
   1013a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1013c:	3b01      	subs	r3, #1
   1013e:	001a      	movs	r2, r3
   10140:	2338      	movs	r3, #56	; 0x38
   10142:	18fb      	adds	r3, r7, r3
   10144:	0019      	movs	r1, r3
   10146:	207f      	movs	r0, #127	; 0x7f
   10148:	4b47      	ldr	r3, [pc, #284]	; (10268 <spi_cmd_complete+0x388>)
   1014a:	4798      	blx	r3
   1014c:	0003      	movs	r3, r0
   1014e:	18db      	adds	r3, r3, r3
   10150:	b2da      	uxtb	r2, r3
   10152:	2338      	movs	r3, #56	; 0x38
   10154:	18fb      	adds	r3, r7, r3
   10156:	551a      	strb	r2, [r3, r4]
   10158:	e002      	b.n	10160 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   1015a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1015c:	3b01      	subs	r3, #1
   1015e:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   10160:	230f      	movs	r3, #15
   10162:	18fb      	adds	r3, r7, r3
   10164:	781b      	ldrb	r3, [r3, #0]
   10166:	2bcf      	cmp	r3, #207	; 0xcf
   10168:	d009      	beq.n	1017e <spi_cmd_complete+0x29e>
   1016a:	230f      	movs	r3, #15
   1016c:	18fb      	adds	r3, r7, r3
   1016e:	781b      	ldrb	r3, [r3, #0]
   10170:	2bc5      	cmp	r3, #197	; 0xc5
   10172:	d004      	beq.n	1017e <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   10174:	230f      	movs	r3, #15
   10176:	18fb      	adds	r3, r7, r3
   10178:	781b      	ldrb	r3, [r3, #0]
   1017a:	2bc6      	cmp	r3, #198	; 0xc6
   1017c:	d103      	bne.n	10186 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   1017e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   10180:	3306      	adds	r3, #6
   10182:	673b      	str	r3, [r7, #112]	; 0x70
   10184:	e018      	b.n	101b8 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   10186:	230f      	movs	r3, #15
   10188:	18fb      	adds	r3, r7, r3
   1018a:	781b      	ldrb	r3, [r3, #0]
   1018c:	2bc4      	cmp	r3, #196	; 0xc4
   1018e:	d004      	beq.n	1019a <spi_cmd_complete+0x2ba>
   10190:	230f      	movs	r3, #15
   10192:	18fb      	adds	r3, r7, r3
   10194:	781b      	ldrb	r3, [r3, #0]
   10196:	2bca      	cmp	r3, #202	; 0xca
   10198:	d10b      	bne.n	101b2 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   1019a:	4b32      	ldr	r3, [pc, #200]	; (10264 <spi_cmd_complete+0x384>)
   1019c:	781b      	ldrb	r3, [r3, #0]
   1019e:	2b00      	cmp	r3, #0
   101a0:	d103      	bne.n	101aa <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   101a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   101a4:	330c      	adds	r3, #12
   101a6:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   101a8:	e006      	b.n	101b8 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   101aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   101ac:	330a      	adds	r3, #10
   101ae:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   101b0:	e002      	b.n	101b8 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   101b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   101b4:	3305      	adds	r3, #5
   101b6:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   101b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   101ba:	2b20      	cmp	r3, #32
   101bc:	d914      	bls.n	101e8 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   101be:	23f7      	movs	r3, #247	; 0xf7
   101c0:	005a      	lsls	r2, r3, #1
   101c2:	492a      	ldr	r1, [pc, #168]	; (1026c <spi_cmd_complete+0x38c>)
   101c4:	4b2a      	ldr	r3, [pc, #168]	; (10270 <spi_cmd_complete+0x390>)
   101c6:	0018      	movs	r0, r3
   101c8:	4b2a      	ldr	r3, [pc, #168]	; (10274 <spi_cmd_complete+0x394>)
   101ca:	4798      	blx	r3
   101cc:	6f39      	ldr	r1, [r7, #112]	; 0x70
   101ce:	4b2a      	ldr	r3, [pc, #168]	; (10278 <spi_cmd_complete+0x398>)
   101d0:	2220      	movs	r2, #32
   101d2:	0018      	movs	r0, r3
   101d4:	4b27      	ldr	r3, [pc, #156]	; (10274 <spi_cmd_complete+0x394>)
   101d6:	4798      	blx	r3
   101d8:	4b28      	ldr	r3, [pc, #160]	; (1027c <spi_cmd_complete+0x39c>)
   101da:	0018      	movs	r0, r3
   101dc:	4b25      	ldr	r3, [pc, #148]	; (10274 <spi_cmd_complete+0x394>)
   101de:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   101e0:	2300      	movs	r3, #0
   101e2:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   101e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   101e6:	e2dd      	b.n	107a4 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   101e8:	2377      	movs	r3, #119	; 0x77
   101ea:	18fb      	adds	r3, r7, r3
   101ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   101ee:	701a      	strb	r2, [r3, #0]
   101f0:	e00d      	b.n	1020e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   101f2:	2377      	movs	r3, #119	; 0x77
   101f4:	18fb      	adds	r3, r7, r3
   101f6:	781b      	ldrb	r3, [r3, #0]
   101f8:	2238      	movs	r2, #56	; 0x38
   101fa:	18ba      	adds	r2, r7, r2
   101fc:	2100      	movs	r1, #0
   101fe:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   10200:	2377      	movs	r3, #119	; 0x77
   10202:	18fb      	adds	r3, r7, r3
   10204:	781a      	ldrb	r2, [r3, #0]
   10206:	2377      	movs	r3, #119	; 0x77
   10208:	18fb      	adds	r3, r7, r3
   1020a:	3201      	adds	r2, #1
   1020c:	701a      	strb	r2, [r3, #0]
   1020e:	2377      	movs	r3, #119	; 0x77
   10210:	18fb      	adds	r3, r7, r3
   10212:	781a      	ldrb	r2, [r3, #0]
   10214:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   10216:	429a      	cmp	r2, r3
   10218:	d3eb      	bcc.n	101f2 <spi_cmd_complete+0x312>
	}
	rix = len;
   1021a:	2376      	movs	r3, #118	; 0x76
   1021c:	18fb      	adds	r3, r7, r3
   1021e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   10220:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   10222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   10224:	b29a      	uxth	r2, r3
   10226:	2318      	movs	r3, #24
   10228:	18f9      	adds	r1, r7, r3
   1022a:	2338      	movs	r3, #56	; 0x38
   1022c:	18fb      	adds	r3, r7, r3
   1022e:	0018      	movs	r0, r3
   10230:	4b13      	ldr	r3, [pc, #76]	; (10280 <spi_cmd_complete+0x3a0>)
   10232:	4798      	blx	r3
   10234:	1e03      	subs	r3, r0, #0
   10236:	d027      	beq.n	10288 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   10238:	23fa      	movs	r3, #250	; 0xfa
   1023a:	33ff      	adds	r3, #255	; 0xff
   1023c:	001a      	movs	r2, r3
   1023e:	490b      	ldr	r1, [pc, #44]	; (1026c <spi_cmd_complete+0x38c>)
   10240:	4b0b      	ldr	r3, [pc, #44]	; (10270 <spi_cmd_complete+0x390>)
   10242:	0018      	movs	r0, r3
   10244:	4b0b      	ldr	r3, [pc, #44]	; (10274 <spi_cmd_complete+0x394>)
   10246:	4798      	blx	r3
   10248:	4b0e      	ldr	r3, [pc, #56]	; (10284 <spi_cmd_complete+0x3a4>)
   1024a:	0018      	movs	r0, r3
   1024c:	4b09      	ldr	r3, [pc, #36]	; (10274 <spi_cmd_complete+0x394>)
   1024e:	4798      	blx	r3
   10250:	4b0a      	ldr	r3, [pc, #40]	; (1027c <spi_cmd_complete+0x39c>)
   10252:	0018      	movs	r0, r3
   10254:	4b07      	ldr	r3, [pc, #28]	; (10274 <spi_cmd_complete+0x394>)
   10256:	4798      	blx	r3
		result = N_FAIL;
   10258:	2300      	movs	r3, #0
   1025a:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   1025c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1025e:	e2a1      	b.n	107a4 <spi_cmd_complete+0x8c4>
   10260:	000262c0 	.word	0x000262c0
   10264:	20004128 	.word	0x20004128
   10268:	0000f915 	.word	0x0000f915
   1026c:	00026320 	.word	0x00026320
   10270:	00025d0c 	.word	0x00025d0c
   10274:	0000a3cd 	.word	0x0000a3cd
   10278:	00025dd4 	.word	0x00025dd4
   1027c:	00025d4c 	.word	0x00025d4c
   10280:	0000f8a1 	.word	0x0000f8a1
   10284:	00025d20 	.word	0x00025d20
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   10288:	230f      	movs	r3, #15
   1028a:	18fb      	adds	r3, r7, r3
   1028c:	781b      	ldrb	r3, [r3, #0]
   1028e:	2bcf      	cmp	r3, #207	; 0xcf
   10290:	d009      	beq.n	102a6 <spi_cmd_complete+0x3c6>
   10292:	230f      	movs	r3, #15
   10294:	18fb      	adds	r3, r7, r3
   10296:	781b      	ldrb	r3, [r3, #0]
   10298:	2bc5      	cmp	r3, #197	; 0xc5
   1029a:	d004      	beq.n	102a6 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   1029c:	230f      	movs	r3, #15
   1029e:	18fb      	adds	r3, r7, r3
   102a0:	781b      	ldrb	r3, [r3, #0]
   102a2:	2bc6      	cmp	r3, #198	; 0xc6
   102a4:	d106      	bne.n	102b4 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   102a6:	2376      	movs	r3, #118	; 0x76
   102a8:	18fb      	adds	r3, r7, r3
   102aa:	781a      	ldrb	r2, [r3, #0]
   102ac:	2376      	movs	r3, #118	; 0x76
   102ae:	18fb      	adds	r3, r7, r3
   102b0:	3201      	adds	r2, #1
   102b2:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   102b4:	2376      	movs	r3, #118	; 0x76
   102b6:	18fb      	adds	r3, r7, r3
   102b8:	781b      	ldrb	r3, [r3, #0]
   102ba:	2276      	movs	r2, #118	; 0x76
   102bc:	18ba      	adds	r2, r7, r2
   102be:	1c59      	adds	r1, r3, #1
   102c0:	7011      	strb	r1, [r2, #0]
   102c2:	001a      	movs	r2, r3
   102c4:	2318      	movs	r3, #24
   102c6:	18fb      	adds	r3, r7, r3
   102c8:	5c9a      	ldrb	r2, [r3, r2]
   102ca:	2317      	movs	r3, #23
   102cc:	18fb      	adds	r3, r7, r3
   102ce:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   102d0:	2317      	movs	r3, #23
   102d2:	18fb      	adds	r3, r7, r3
   102d4:	781b      	ldrb	r3, [r3, #0]
   102d6:	220f      	movs	r2, #15
   102d8:	18ba      	adds	r2, r7, r2
   102da:	7812      	ldrb	r2, [r2, #0]
   102dc:	429a      	cmp	r2, r3
   102de:	d018      	beq.n	10312 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   102e0:	4add      	ldr	r2, [pc, #884]	; (10658 <spi_cmd_complete+0x778>)
   102e2:	49de      	ldr	r1, [pc, #888]	; (1065c <spi_cmd_complete+0x77c>)
   102e4:	4bde      	ldr	r3, [pc, #888]	; (10660 <spi_cmd_complete+0x780>)
   102e6:	0018      	movs	r0, r3
   102e8:	4bde      	ldr	r3, [pc, #888]	; (10664 <spi_cmd_complete+0x784>)
   102ea:	4798      	blx	r3
   102ec:	230f      	movs	r3, #15
   102ee:	18fb      	adds	r3, r7, r3
   102f0:	7819      	ldrb	r1, [r3, #0]
   102f2:	2317      	movs	r3, #23
   102f4:	18fb      	adds	r3, r7, r3
   102f6:	781b      	ldrb	r3, [r3, #0]
   102f8:	001a      	movs	r2, r3
   102fa:	4bdb      	ldr	r3, [pc, #876]	; (10668 <spi_cmd_complete+0x788>)
   102fc:	0018      	movs	r0, r3
   102fe:	4bd9      	ldr	r3, [pc, #868]	; (10664 <spi_cmd_complete+0x784>)
   10300:	4798      	blx	r3
   10302:	4bda      	ldr	r3, [pc, #872]	; (1066c <spi_cmd_complete+0x78c>)
   10304:	0018      	movs	r0, r3
   10306:	4bd7      	ldr	r3, [pc, #860]	; (10664 <spi_cmd_complete+0x784>)
   10308:	4798      	blx	r3
		result = N_FAIL;
   1030a:	2300      	movs	r3, #0
   1030c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   1030e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10310:	e248      	b.n	107a4 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   10312:	2376      	movs	r3, #118	; 0x76
   10314:	18fb      	adds	r3, r7, r3
   10316:	781b      	ldrb	r3, [r3, #0]
   10318:	2276      	movs	r2, #118	; 0x76
   1031a:	18ba      	adds	r2, r7, r2
   1031c:	1c59      	adds	r1, r3, #1
   1031e:	7011      	strb	r1, [r2, #0]
   10320:	001a      	movs	r2, r3
   10322:	2318      	movs	r3, #24
   10324:	18fb      	adds	r3, r7, r3
   10326:	5c9a      	ldrb	r2, [r3, r2]
   10328:	2317      	movs	r3, #23
   1032a:	18fb      	adds	r3, r7, r3
   1032c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   1032e:	2317      	movs	r3, #23
   10330:	18fb      	adds	r3, r7, r3
   10332:	781b      	ldrb	r3, [r3, #0]
   10334:	2b00      	cmp	r3, #0
   10336:	d016      	beq.n	10366 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   10338:	4acd      	ldr	r2, [pc, #820]	; (10670 <spi_cmd_complete+0x790>)
   1033a:	49c8      	ldr	r1, [pc, #800]	; (1065c <spi_cmd_complete+0x77c>)
   1033c:	4bc8      	ldr	r3, [pc, #800]	; (10660 <spi_cmd_complete+0x780>)
   1033e:	0018      	movs	r0, r3
   10340:	4bc8      	ldr	r3, [pc, #800]	; (10664 <spi_cmd_complete+0x784>)
   10342:	4798      	blx	r3
   10344:	2317      	movs	r3, #23
   10346:	18fb      	adds	r3, r7, r3
   10348:	781b      	ldrb	r3, [r3, #0]
   1034a:	001a      	movs	r2, r3
   1034c:	4bc9      	ldr	r3, [pc, #804]	; (10674 <spi_cmd_complete+0x794>)
   1034e:	0011      	movs	r1, r2
   10350:	0018      	movs	r0, r3
   10352:	4bc4      	ldr	r3, [pc, #784]	; (10664 <spi_cmd_complete+0x784>)
   10354:	4798      	blx	r3
   10356:	4bc5      	ldr	r3, [pc, #788]	; (1066c <spi_cmd_complete+0x78c>)
   10358:	0018      	movs	r0, r3
   1035a:	4bc2      	ldr	r3, [pc, #776]	; (10664 <spi_cmd_complete+0x784>)
   1035c:	4798      	blx	r3
		result = N_FAIL;
   1035e:	2300      	movs	r3, #0
   10360:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   10362:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10364:	e21e      	b.n	107a4 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   10366:	230f      	movs	r3, #15
   10368:	18fb      	adds	r3, r7, r3
   1036a:	781b      	ldrb	r3, [r3, #0]
   1036c:	2bc4      	cmp	r3, #196	; 0xc4
   1036e:	d00f      	beq.n	10390 <spi_cmd_complete+0x4b0>
   10370:	230f      	movs	r3, #15
   10372:	18fb      	adds	r3, r7, r3
   10374:	781b      	ldrb	r3, [r3, #0]
   10376:	2bca      	cmp	r3, #202	; 0xca
   10378:	d00a      	beq.n	10390 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   1037a:	230f      	movs	r3, #15
   1037c:	18fb      	adds	r3, r7, r3
   1037e:	781b      	ldrb	r3, [r3, #0]
   10380:	2bc2      	cmp	r3, #194	; 0xc2
   10382:	d005      	beq.n	10390 <spi_cmd_complete+0x4b0>
   10384:	230f      	movs	r3, #15
   10386:	18fb      	adds	r3, r7, r3
   10388:	781b      	ldrb	r3, [r3, #0]
   1038a:	2bc8      	cmp	r3, #200	; 0xc8
   1038c:	d000      	beq.n	10390 <spi_cmd_complete+0x4b0>
   1038e:	e208      	b.n	107a2 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   10390:	230a      	movs	r3, #10
   10392:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   10394:	2376      	movs	r3, #118	; 0x76
   10396:	18fb      	adds	r3, r7, r3
   10398:	781a      	ldrb	r2, [r3, #0]
   1039a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1039c:	429a      	cmp	r2, r3
   1039e:	d218      	bcs.n	103d2 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   103a0:	2376      	movs	r3, #118	; 0x76
   103a2:	18fb      	adds	r3, r7, r3
   103a4:	781b      	ldrb	r3, [r3, #0]
   103a6:	2276      	movs	r2, #118	; 0x76
   103a8:	18ba      	adds	r2, r7, r2
   103aa:	1c59      	adds	r1, r3, #1
   103ac:	7011      	strb	r1, [r2, #0]
   103ae:	001a      	movs	r2, r3
   103b0:	2318      	movs	r3, #24
   103b2:	18fb      	adds	r3, r7, r3
   103b4:	5c9a      	ldrb	r2, [r3, r2]
   103b6:	2317      	movs	r3, #23
   103b8:	18fb      	adds	r3, r7, r3
   103ba:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   103bc:	2317      	movs	r3, #23
   103be:	18fb      	adds	r3, r7, r3
   103c0:	781b      	ldrb	r3, [r3, #0]
   103c2:	091b      	lsrs	r3, r3, #4
   103c4:	b2db      	uxtb	r3, r3
   103c6:	001a      	movs	r2, r3
   103c8:	230f      	movs	r3, #15
   103ca:	4013      	ands	r3, r2
   103cc:	2b0f      	cmp	r3, #15
   103ce:	d103      	bne.n	103d8 <spi_cmd_complete+0x4f8>
					break;
   103d0:	e007      	b.n	103e2 <spi_cmd_complete+0x502>
					retry = 0;
   103d2:	2300      	movs	r3, #0
   103d4:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   103d6:	e004      	b.n	103e2 <spi_cmd_complete+0x502>
			} while (retry--);
   103d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   103da:	1e5a      	subs	r2, r3, #1
   103dc:	667a      	str	r2, [r7, #100]	; 0x64
   103de:	2b00      	cmp	r3, #0
   103e0:	d1d8      	bne.n	10394 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   103e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   103e4:	2b00      	cmp	r3, #0
   103e6:	dc18      	bgt.n	1041a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   103e8:	2395      	movs	r3, #149	; 0x95
   103ea:	009a      	lsls	r2, r3, #2
   103ec:	499b      	ldr	r1, [pc, #620]	; (1065c <spi_cmd_complete+0x77c>)
   103ee:	4b9c      	ldr	r3, [pc, #624]	; (10660 <spi_cmd_complete+0x780>)
   103f0:	0018      	movs	r0, r3
   103f2:	4b9c      	ldr	r3, [pc, #624]	; (10664 <spi_cmd_complete+0x784>)
   103f4:	4798      	blx	r3
   103f6:	2317      	movs	r3, #23
   103f8:	18fb      	adds	r3, r7, r3
   103fa:	781b      	ldrb	r3, [r3, #0]
   103fc:	001a      	movs	r2, r3
   103fe:	4b9e      	ldr	r3, [pc, #632]	; (10678 <spi_cmd_complete+0x798>)
   10400:	0011      	movs	r1, r2
   10402:	0018      	movs	r0, r3
   10404:	4b97      	ldr	r3, [pc, #604]	; (10664 <spi_cmd_complete+0x784>)
   10406:	4798      	blx	r3
   10408:	4b98      	ldr	r3, [pc, #608]	; (1066c <spi_cmd_complete+0x78c>)
   1040a:	0018      	movs	r0, r3
   1040c:	4b95      	ldr	r3, [pc, #596]	; (10664 <spi_cmd_complete+0x784>)
   1040e:	4798      	blx	r3
				result = N_RESET;
   10410:	2301      	movs	r3, #1
   10412:	425b      	negs	r3, r3
   10414:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   10416:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10418:	e1c4      	b.n	107a4 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   1041a:	230f      	movs	r3, #15
   1041c:	18fb      	adds	r3, r7, r3
   1041e:	781b      	ldrb	r3, [r3, #0]
   10420:	2bc4      	cmp	r3, #196	; 0xc4
   10422:	d005      	beq.n	10430 <spi_cmd_complete+0x550>
   10424:	230f      	movs	r3, #15
   10426:	18fb      	adds	r3, r7, r3
   10428:	781b      	ldrb	r3, [r3, #0]
   1042a:	2bca      	cmp	r3, #202	; 0xca
   1042c:	d000      	beq.n	10430 <spi_cmd_complete+0x550>
   1042e:	e08e      	b.n	1054e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   10430:	2376      	movs	r3, #118	; 0x76
   10432:	18fb      	adds	r3, r7, r3
   10434:	781b      	ldrb	r3, [r3, #0]
   10436:	3303      	adds	r3, #3
   10438:	001a      	movs	r2, r3
   1043a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1043c:	429a      	cmp	r2, r3
   1043e:	d23c      	bcs.n	104ba <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   10440:	2376      	movs	r3, #118	; 0x76
   10442:	18fb      	adds	r3, r7, r3
   10444:	781b      	ldrb	r3, [r3, #0]
   10446:	2276      	movs	r2, #118	; 0x76
   10448:	18ba      	adds	r2, r7, r2
   1044a:	1c59      	adds	r1, r3, #1
   1044c:	7011      	strb	r1, [r2, #0]
   1044e:	001a      	movs	r2, r3
   10450:	2318      	movs	r3, #24
   10452:	18fb      	adds	r3, r7, r3
   10454:	5c9a      	ldrb	r2, [r3, r2]
   10456:	687b      	ldr	r3, [r7, #4]
   10458:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   1045a:	687b      	ldr	r3, [r7, #4]
   1045c:	1c5a      	adds	r2, r3, #1
   1045e:	2376      	movs	r3, #118	; 0x76
   10460:	18fb      	adds	r3, r7, r3
   10462:	781b      	ldrb	r3, [r3, #0]
   10464:	2176      	movs	r1, #118	; 0x76
   10466:	1879      	adds	r1, r7, r1
   10468:	1c58      	adds	r0, r3, #1
   1046a:	7008      	strb	r0, [r1, #0]
   1046c:	0019      	movs	r1, r3
   1046e:	2318      	movs	r3, #24
   10470:	18fb      	adds	r3, r7, r3
   10472:	5c5b      	ldrb	r3, [r3, r1]
   10474:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   10476:	687b      	ldr	r3, [r7, #4]
   10478:	1c9a      	adds	r2, r3, #2
   1047a:	2376      	movs	r3, #118	; 0x76
   1047c:	18fb      	adds	r3, r7, r3
   1047e:	781b      	ldrb	r3, [r3, #0]
   10480:	2176      	movs	r1, #118	; 0x76
   10482:	1879      	adds	r1, r7, r1
   10484:	1c58      	adds	r0, r3, #1
   10486:	7008      	strb	r0, [r1, #0]
   10488:	0019      	movs	r1, r3
   1048a:	2318      	movs	r3, #24
   1048c:	18fb      	adds	r3, r7, r3
   1048e:	5c5b      	ldrb	r3, [r3, r1]
   10490:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   10492:	687b      	ldr	r3, [r7, #4]
   10494:	1cda      	adds	r2, r3, #3
   10496:	2376      	movs	r3, #118	; 0x76
   10498:	18fb      	adds	r3, r7, r3
   1049a:	781b      	ldrb	r3, [r3, #0]
   1049c:	2176      	movs	r1, #118	; 0x76
   1049e:	1879      	adds	r1, r7, r1
   104a0:	1c58      	adds	r0, r3, #1
   104a2:	7008      	strb	r0, [r1, #0]
   104a4:	0019      	movs	r1, r3
   104a6:	2318      	movs	r3, #24
   104a8:	18fb      	adds	r3, r7, r3
   104aa:	5c5b      	ldrb	r3, [r3, r1]
   104ac:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   104ae:	4b73      	ldr	r3, [pc, #460]	; (1067c <spi_cmd_complete+0x79c>)
   104b0:	781b      	ldrb	r3, [r3, #0]
   104b2:	2b00      	cmp	r3, #0
   104b4:	d000      	beq.n	104b8 <spi_cmd_complete+0x5d8>
   104b6:	e174      	b.n	107a2 <spi_cmd_complete+0x8c2>
   104b8:	e011      	b.n	104de <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   104ba:	4a71      	ldr	r2, [pc, #452]	; (10680 <spi_cmd_complete+0x7a0>)
   104bc:	4967      	ldr	r1, [pc, #412]	; (1065c <spi_cmd_complete+0x77c>)
   104be:	4b68      	ldr	r3, [pc, #416]	; (10660 <spi_cmd_complete+0x780>)
   104c0:	0018      	movs	r0, r3
   104c2:	4b68      	ldr	r3, [pc, #416]	; (10664 <spi_cmd_complete+0x784>)
   104c4:	4798      	blx	r3
   104c6:	4b6f      	ldr	r3, [pc, #444]	; (10684 <spi_cmd_complete+0x7a4>)
   104c8:	0018      	movs	r0, r3
   104ca:	4b66      	ldr	r3, [pc, #408]	; (10664 <spi_cmd_complete+0x784>)
   104cc:	4798      	blx	r3
   104ce:	4b67      	ldr	r3, [pc, #412]	; (1066c <spi_cmd_complete+0x78c>)
   104d0:	0018      	movs	r0, r3
   104d2:	4b64      	ldr	r3, [pc, #400]	; (10664 <spi_cmd_complete+0x784>)
   104d4:	4798      	blx	r3
					result = N_FAIL;
   104d6:	2300      	movs	r3, #0
   104d8:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   104da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   104dc:	e162      	b.n	107a4 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   104de:	2376      	movs	r3, #118	; 0x76
   104e0:	18fb      	adds	r3, r7, r3
   104e2:	781b      	ldrb	r3, [r3, #0]
   104e4:	3301      	adds	r3, #1
   104e6:	001a      	movs	r2, r3
   104e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   104ea:	429a      	cmp	r2, r3
   104ec:	d21c      	bcs.n	10528 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   104ee:	2376      	movs	r3, #118	; 0x76
   104f0:	18fb      	adds	r3, r7, r3
   104f2:	781b      	ldrb	r3, [r3, #0]
   104f4:	2276      	movs	r2, #118	; 0x76
   104f6:	18ba      	adds	r2, r7, r2
   104f8:	1c59      	adds	r1, r3, #1
   104fa:	7011      	strb	r1, [r2, #0]
   104fc:	001a      	movs	r2, r3
   104fe:	2318      	movs	r3, #24
   10500:	18fb      	adds	r3, r7, r3
   10502:	5c9a      	ldrb	r2, [r3, r2]
   10504:	2314      	movs	r3, #20
   10506:	18fb      	adds	r3, r7, r3
   10508:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   1050a:	2376      	movs	r3, #118	; 0x76
   1050c:	18fb      	adds	r3, r7, r3
   1050e:	781b      	ldrb	r3, [r3, #0]
   10510:	2276      	movs	r2, #118	; 0x76
   10512:	18ba      	adds	r2, r7, r2
   10514:	1c59      	adds	r1, r3, #1
   10516:	7011      	strb	r1, [r2, #0]
   10518:	001a      	movs	r2, r3
   1051a:	2318      	movs	r3, #24
   1051c:	18fb      	adds	r3, r7, r3
   1051e:	5c9a      	ldrb	r2, [r3, r2]
   10520:	2314      	movs	r3, #20
   10522:	18fb      	adds	r3, r7, r3
   10524:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   10526:	e13c      	b.n	107a2 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   10528:	239c      	movs	r3, #156	; 0x9c
   1052a:	009a      	lsls	r2, r3, #2
   1052c:	494b      	ldr	r1, [pc, #300]	; (1065c <spi_cmd_complete+0x77c>)
   1052e:	4b4c      	ldr	r3, [pc, #304]	; (10660 <spi_cmd_complete+0x780>)
   10530:	0018      	movs	r0, r3
   10532:	4b4c      	ldr	r3, [pc, #304]	; (10664 <spi_cmd_complete+0x784>)
   10534:	4798      	blx	r3
   10536:	4b54      	ldr	r3, [pc, #336]	; (10688 <spi_cmd_complete+0x7a8>)
   10538:	0018      	movs	r0, r3
   1053a:	4b4a      	ldr	r3, [pc, #296]	; (10664 <spi_cmd_complete+0x784>)
   1053c:	4798      	blx	r3
   1053e:	4b4b      	ldr	r3, [pc, #300]	; (1066c <spi_cmd_complete+0x78c>)
   10540:	0018      	movs	r0, r3
   10542:	4b48      	ldr	r3, [pc, #288]	; (10664 <spi_cmd_complete+0x784>)
   10544:	4798      	blx	r3
						result = N_FAIL;
   10546:	2300      	movs	r3, #0
   10548:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   1054a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1054c:	e12a      	b.n	107a4 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   1054e:	230f      	movs	r3, #15
   10550:	18fb      	adds	r3, r7, r3
   10552:	781b      	ldrb	r3, [r3, #0]
   10554:	2bc2      	cmp	r3, #194	; 0xc2
   10556:	d005      	beq.n	10564 <spi_cmd_complete+0x684>
   10558:	230f      	movs	r3, #15
   1055a:	18fb      	adds	r3, r7, r3
   1055c:	781b      	ldrb	r3, [r3, #0]
   1055e:	2bc8      	cmp	r3, #200	; 0xc8
   10560:	d000      	beq.n	10564 <spi_cmd_complete+0x684>
   10562:	e11e      	b.n	107a2 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   10564:	2300      	movs	r3, #0
   10566:	663b      	str	r3, [r7, #96]	; 0x60
   10568:	e011      	b.n	1058e <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   1056a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1056c:	1c5a      	adds	r2, r3, #1
   1056e:	663a      	str	r2, [r7, #96]	; 0x60
   10570:	001a      	movs	r2, r3
   10572:	687b      	ldr	r3, [r7, #4]
   10574:	189a      	adds	r2, r3, r2
   10576:	2376      	movs	r3, #118	; 0x76
   10578:	18fb      	adds	r3, r7, r3
   1057a:	781b      	ldrb	r3, [r3, #0]
   1057c:	2176      	movs	r1, #118	; 0x76
   1057e:	1879      	adds	r1, r7, r1
   10580:	1c58      	adds	r0, r3, #1
   10582:	7008      	strb	r0, [r1, #0]
   10584:	0019      	movs	r1, r3
   10586:	2318      	movs	r3, #24
   10588:	18fb      	adds	r3, r7, r3
   1058a:	5c5b      	ldrb	r3, [r3, r1]
   1058c:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   1058e:	2376      	movs	r3, #118	; 0x76
   10590:	18fb      	adds	r3, r7, r3
   10592:	781a      	ldrb	r2, [r3, #0]
   10594:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   10596:	429a      	cmp	r2, r3
   10598:	d203      	bcs.n	105a2 <spi_cmd_complete+0x6c2>
   1059a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1059c:	683b      	ldr	r3, [r7, #0]
   1059e:	429a      	cmp	r2, r3
   105a0:	d3e3      	bcc.n	1056a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   105a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   105a4:	683a      	ldr	r2, [r7, #0]
   105a6:	1ad3      	subs	r3, r2, r3
   105a8:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   105aa:	683b      	ldr	r3, [r7, #0]
   105ac:	2b00      	cmp	r3, #0
   105ae:	d100      	bne.n	105b2 <spi_cmd_complete+0x6d2>
   105b0:	e0f1      	b.n	10796 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   105b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   105b4:	2280      	movs	r2, #128	; 0x80
   105b6:	0192      	lsls	r2, r2, #6
   105b8:	1ad3      	subs	r3, r2, r3
   105ba:	001a      	movs	r2, r3
   105bc:	683b      	ldr	r3, [r7, #0]
   105be:	429a      	cmp	r2, r3
   105c0:	d302      	bcc.n	105c8 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   105c2:	683b      	ldr	r3, [r7, #0]
   105c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   105c6:	e004      	b.n	105d2 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   105c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   105ca:	2280      	movs	r2, #128	; 0x80
   105cc:	0192      	lsls	r2, r2, #6
   105ce:	1ad3      	subs	r3, r2, r3
   105d0:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   105d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   105d4:	687a      	ldr	r2, [r7, #4]
   105d6:	18d3      	adds	r3, r2, r3
   105d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   105da:	b292      	uxth	r2, r2
   105dc:	0011      	movs	r1, r2
   105de:	0018      	movs	r0, r3
   105e0:	4b2a      	ldr	r3, [pc, #168]	; (1068c <spi_cmd_complete+0x7ac>)
   105e2:	4798      	blx	r3
   105e4:	1e03      	subs	r3, r0, #0
   105e6:	d010      	beq.n	1060a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   105e8:	4a29      	ldr	r2, [pc, #164]	; (10690 <spi_cmd_complete+0x7b0>)
   105ea:	491c      	ldr	r1, [pc, #112]	; (1065c <spi_cmd_complete+0x77c>)
   105ec:	4b1c      	ldr	r3, [pc, #112]	; (10660 <spi_cmd_complete+0x780>)
   105ee:	0018      	movs	r0, r3
   105f0:	4b1c      	ldr	r3, [pc, #112]	; (10664 <spi_cmd_complete+0x784>)
   105f2:	4798      	blx	r3
   105f4:	4b27      	ldr	r3, [pc, #156]	; (10694 <spi_cmd_complete+0x7b4>)
   105f6:	0018      	movs	r0, r3
   105f8:	4b1a      	ldr	r3, [pc, #104]	; (10664 <spi_cmd_complete+0x784>)
   105fa:	4798      	blx	r3
   105fc:	4b1b      	ldr	r3, [pc, #108]	; (1066c <spi_cmd_complete+0x78c>)
   105fe:	0018      	movs	r0, r3
   10600:	4b18      	ldr	r3, [pc, #96]	; (10664 <spi_cmd_complete+0x784>)
   10602:	4798      	blx	r3
						result = N_FAIL;
   10604:	2300      	movs	r3, #0
   10606:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   10608:	e0cb      	b.n	107a2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   1060a:	4b1c      	ldr	r3, [pc, #112]	; (1067c <spi_cmd_complete+0x79c>)
   1060c:	781b      	ldrb	r3, [r3, #0]
   1060e:	2b00      	cmp	r3, #0
   10610:	d119      	bne.n	10646 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   10612:	2314      	movs	r3, #20
   10614:	18fb      	adds	r3, r7, r3
   10616:	2102      	movs	r1, #2
   10618:	0018      	movs	r0, r3
   1061a:	4b1c      	ldr	r3, [pc, #112]	; (1068c <spi_cmd_complete+0x7ac>)
   1061c:	4798      	blx	r3
   1061e:	1e03      	subs	r3, r0, #0
   10620:	d011      	beq.n	10646 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   10622:	23a6      	movs	r3, #166	; 0xa6
   10624:	009a      	lsls	r2, r3, #2
   10626:	490d      	ldr	r1, [pc, #52]	; (1065c <spi_cmd_complete+0x77c>)
   10628:	4b0d      	ldr	r3, [pc, #52]	; (10660 <spi_cmd_complete+0x780>)
   1062a:	0018      	movs	r0, r3
   1062c:	4b0d      	ldr	r3, [pc, #52]	; (10664 <spi_cmd_complete+0x784>)
   1062e:	4798      	blx	r3
   10630:	4b19      	ldr	r3, [pc, #100]	; (10698 <spi_cmd_complete+0x7b8>)
   10632:	0018      	movs	r0, r3
   10634:	4b0b      	ldr	r3, [pc, #44]	; (10664 <spi_cmd_complete+0x784>)
   10636:	4798      	blx	r3
   10638:	4b0c      	ldr	r3, [pc, #48]	; (1066c <spi_cmd_complete+0x78c>)
   1063a:	0018      	movs	r0, r3
   1063c:	4b09      	ldr	r3, [pc, #36]	; (10664 <spi_cmd_complete+0x784>)
   1063e:	4798      	blx	r3
							result = N_FAIL;
   10640:	2300      	movs	r3, #0
   10642:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   10644:	e0ad      	b.n	107a2 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   10646:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   10648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1064a:	18d3      	adds	r3, r2, r3
   1064c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   1064e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   10650:	683a      	ldr	r2, [r7, #0]
   10652:	1ad3      	subs	r3, r2, r3
   10654:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   10656:	e09e      	b.n	10796 <spi_cmd_complete+0x8b6>
   10658:	0000022f 	.word	0x0000022f
   1065c:	00026320 	.word	0x00026320
   10660:	00025d0c 	.word	0x00025d0c
   10664:	0000a3cd 	.word	0x0000a3cd
   10668:	00025e04 	.word	0x00025e04
   1066c:	00025d4c 	.word	0x00025d4c
   10670:	00000239 	.word	0x00000239
   10674:	00025e40 	.word	0x00025e40
   10678:	00025e74 	.word	0x00025e74
   1067c:	20004128 	.word	0x20004128
   10680:	00000263 	.word	0x00000263
   10684:	00025ea4 	.word	0x00025ea4
   10688:	00025ed4 	.word	0x00025ed4
   1068c:	0000f819 	.word	0x0000f819
   10690:	0000028e 	.word	0x0000028e
   10694:	00025f04 	.word	0x00025f04
   10698:	00025f38 	.word	0x00025f38
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   1069c:	683a      	ldr	r2, [r7, #0]
   1069e:	2380      	movs	r3, #128	; 0x80
   106a0:	019b      	lsls	r3, r3, #6
   106a2:	429a      	cmp	r2, r3
   106a4:	d802      	bhi.n	106ac <spi_cmd_complete+0x7cc>
						nbytes = sz;
   106a6:	683b      	ldr	r3, [r7, #0]
   106a8:	65bb      	str	r3, [r7, #88]	; 0x58
   106aa:	e002      	b.n	106b2 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   106ac:	2380      	movs	r3, #128	; 0x80
   106ae:	019b      	lsls	r3, r3, #6
   106b0:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   106b2:	230a      	movs	r3, #10
   106b4:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   106b6:	2317      	movs	r3, #23
   106b8:	18fb      	adds	r3, r7, r3
   106ba:	2101      	movs	r1, #1
   106bc:	0018      	movs	r0, r3
   106be:	4b3b      	ldr	r3, [pc, #236]	; (107ac <spi_cmd_complete+0x8cc>)
   106c0:	4798      	blx	r3
   106c2:	1e03      	subs	r3, r0, #0
   106c4:	d011      	beq.n	106ea <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   106c6:	23ae      	movs	r3, #174	; 0xae
   106c8:	009a      	lsls	r2, r3, #2
   106ca:	4939      	ldr	r1, [pc, #228]	; (107b0 <spi_cmd_complete+0x8d0>)
   106cc:	4b39      	ldr	r3, [pc, #228]	; (107b4 <spi_cmd_complete+0x8d4>)
   106ce:	0018      	movs	r0, r3
   106d0:	4b39      	ldr	r3, [pc, #228]	; (107b8 <spi_cmd_complete+0x8d8>)
   106d2:	4798      	blx	r3
   106d4:	4b39      	ldr	r3, [pc, #228]	; (107bc <spi_cmd_complete+0x8dc>)
   106d6:	0018      	movs	r0, r3
   106d8:	4b37      	ldr	r3, [pc, #220]	; (107b8 <spi_cmd_complete+0x8d8>)
   106da:	4798      	blx	r3
   106dc:	4b38      	ldr	r3, [pc, #224]	; (107c0 <spi_cmd_complete+0x8e0>)
   106de:	0018      	movs	r0, r3
   106e0:	4b35      	ldr	r3, [pc, #212]	; (107b8 <spi_cmd_complete+0x8d8>)
   106e2:	4798      	blx	r3
							result = N_FAIL;
   106e4:	2300      	movs	r3, #0
   106e6:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   106e8:	e010      	b.n	1070c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   106ea:	2317      	movs	r3, #23
   106ec:	18fb      	adds	r3, r7, r3
   106ee:	781b      	ldrb	r3, [r3, #0]
   106f0:	091b      	lsrs	r3, r3, #4
   106f2:	b2db      	uxtb	r3, r3
   106f4:	001a      	movs	r2, r3
   106f6:	230f      	movs	r3, #15
   106f8:	4013      	ands	r3, r2
   106fa:	2b0f      	cmp	r3, #15
   106fc:	d005      	beq.n	1070a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   106fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   10700:	1e5a      	subs	r2, r3, #1
   10702:	667a      	str	r2, [r7, #100]	; 0x64
   10704:	2b00      	cmp	r3, #0
   10706:	d1d6      	bne.n	106b6 <spi_cmd_complete+0x7d6>
   10708:	e000      	b.n	1070c <spi_cmd_complete+0x82c>
							break;
   1070a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   1070c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1070e:	2b00      	cmp	r3, #0
   10710:	d046      	beq.n	107a0 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   10712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   10714:	687a      	ldr	r2, [r7, #4]
   10716:	18d3      	adds	r3, r2, r3
   10718:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1071a:	b292      	uxth	r2, r2
   1071c:	0011      	movs	r1, r2
   1071e:	0018      	movs	r0, r3
   10720:	4b22      	ldr	r3, [pc, #136]	; (107ac <spi_cmd_complete+0x8cc>)
   10722:	4798      	blx	r3
   10724:	1e03      	subs	r3, r0, #0
   10726:	d011      	beq.n	1074c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   10728:	23b2      	movs	r3, #178	; 0xb2
   1072a:	009a      	lsls	r2, r3, #2
   1072c:	4920      	ldr	r1, [pc, #128]	; (107b0 <spi_cmd_complete+0x8d0>)
   1072e:	4b21      	ldr	r3, [pc, #132]	; (107b4 <spi_cmd_complete+0x8d4>)
   10730:	0018      	movs	r0, r3
   10732:	4b21      	ldr	r3, [pc, #132]	; (107b8 <spi_cmd_complete+0x8d8>)
   10734:	4798      	blx	r3
   10736:	4b23      	ldr	r3, [pc, #140]	; (107c4 <spi_cmd_complete+0x8e4>)
   10738:	0018      	movs	r0, r3
   1073a:	4b1f      	ldr	r3, [pc, #124]	; (107b8 <spi_cmd_complete+0x8d8>)
   1073c:	4798      	blx	r3
   1073e:	4b20      	ldr	r3, [pc, #128]	; (107c0 <spi_cmd_complete+0x8e0>)
   10740:	0018      	movs	r0, r3
   10742:	4b1d      	ldr	r3, [pc, #116]	; (107b8 <spi_cmd_complete+0x8d8>)
   10744:	4798      	blx	r3
						result = N_FAIL;
   10746:	2300      	movs	r3, #0
   10748:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   1074a:	e02a      	b.n	107a2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   1074c:	4b1e      	ldr	r3, [pc, #120]	; (107c8 <spi_cmd_complete+0x8e8>)
   1074e:	781b      	ldrb	r3, [r3, #0]
   10750:	2b00      	cmp	r3, #0
   10752:	d118      	bne.n	10786 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   10754:	2314      	movs	r3, #20
   10756:	18fb      	adds	r3, r7, r3
   10758:	2102      	movs	r1, #2
   1075a:	0018      	movs	r0, r3
   1075c:	4b13      	ldr	r3, [pc, #76]	; (107ac <spi_cmd_complete+0x8cc>)
   1075e:	4798      	blx	r3
   10760:	1e03      	subs	r3, r0, #0
   10762:	d010      	beq.n	10786 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   10764:	4a19      	ldr	r2, [pc, #100]	; (107cc <spi_cmd_complete+0x8ec>)
   10766:	4912      	ldr	r1, [pc, #72]	; (107b0 <spi_cmd_complete+0x8d0>)
   10768:	4b12      	ldr	r3, [pc, #72]	; (107b4 <spi_cmd_complete+0x8d4>)
   1076a:	0018      	movs	r0, r3
   1076c:	4b12      	ldr	r3, [pc, #72]	; (107b8 <spi_cmd_complete+0x8d8>)
   1076e:	4798      	blx	r3
   10770:	4b17      	ldr	r3, [pc, #92]	; (107d0 <spi_cmd_complete+0x8f0>)
   10772:	0018      	movs	r0, r3
   10774:	4b10      	ldr	r3, [pc, #64]	; (107b8 <spi_cmd_complete+0x8d8>)
   10776:	4798      	blx	r3
   10778:	4b11      	ldr	r3, [pc, #68]	; (107c0 <spi_cmd_complete+0x8e0>)
   1077a:	0018      	movs	r0, r3
   1077c:	4b0e      	ldr	r3, [pc, #56]	; (107b8 <spi_cmd_complete+0x8d8>)
   1077e:	4798      	blx	r3
							result = N_FAIL;
   10780:	2300      	movs	r3, #0
   10782:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   10784:	e00d      	b.n	107a2 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   10786:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   10788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1078a:	18d3      	adds	r3, r2, r3
   1078c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   1078e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   10790:	683a      	ldr	r2, [r7, #0]
   10792:	1ad3      	subs	r3, r2, r3
   10794:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   10796:	683b      	ldr	r3, [r7, #0]
   10798:	2b00      	cmp	r3, #0
   1079a:	d000      	beq.n	1079e <spi_cmd_complete+0x8be>
   1079c:	e77e      	b.n	1069c <spi_cmd_complete+0x7bc>
   1079e:	e000      	b.n	107a2 <spi_cmd_complete+0x8c2>
						break;
   107a0:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   107a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   107a4:	0018      	movs	r0, r3
   107a6:	46bd      	mov	sp, r7
   107a8:	b01f      	add	sp, #124	; 0x7c
   107aa:	bd90      	pop	{r4, r7, pc}
   107ac:	0000f819 	.word	0x0000f819
   107b0:	00026320 	.word	0x00026320
   107b4:	00025d0c 	.word	0x00025d0c
   107b8:	0000a3cd 	.word	0x0000a3cd
   107bc:	00025f70 	.word	0x00025f70
   107c0:	00025d4c 	.word	0x00025d4c
   107c4:	00025f04 	.word	0x00025f04
   107c8:	20004128 	.word	0x20004128
   107cc:	000002d2 	.word	0x000002d2
   107d0:	00025f38 	.word	0x00025f38

000107d4 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   107d4:	b580      	push	{r7, lr}
   107d6:	b086      	sub	sp, #24
   107d8:	af00      	add	r7, sp, #0
   107da:	6078      	str	r0, [r7, #4]
   107dc:	000a      	movs	r2, r1
   107de:	1cbb      	adds	r3, r7, #2
   107e0:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   107e2:	2313      	movs	r3, #19
   107e4:	18fb      	adds	r3, r7, r3
   107e6:	2201      	movs	r2, #1
   107e8:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   107ea:	230c      	movs	r3, #12
   107ec:	18fb      	adds	r3, r7, r3
   107ee:	2200      	movs	r2, #0
   107f0:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   107f2:	2316      	movs	r3, #22
   107f4:	18fb      	adds	r3, r7, r3
   107f6:	2200      	movs	r2, #0
   107f8:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   107fa:	1cbb      	adds	r3, r7, #2
   107fc:	881a      	ldrh	r2, [r3, #0]
   107fe:	2380      	movs	r3, #128	; 0x80
   10800:	019b      	lsls	r3, r3, #6
   10802:	429a      	cmp	r2, r3
   10804:	d805      	bhi.n	10812 <spi_data_write+0x3e>
			nbytes = sz;
   10806:	2314      	movs	r3, #20
   10808:	18fb      	adds	r3, r7, r3
   1080a:	1cba      	adds	r2, r7, #2
   1080c:	8812      	ldrh	r2, [r2, #0]
   1080e:	801a      	strh	r2, [r3, #0]
   10810:	e004      	b.n	1081c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   10812:	2314      	movs	r3, #20
   10814:	18fb      	adds	r3, r7, r3
   10816:	2280      	movs	r2, #128	; 0x80
   10818:	0192      	lsls	r2, r2, #6
   1081a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   1081c:	2311      	movs	r3, #17
   1081e:	18fb      	adds	r3, r7, r3
   10820:	22f0      	movs	r2, #240	; 0xf0
   10822:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   10824:	2316      	movs	r3, #22
   10826:	18fb      	adds	r3, r7, r3
   10828:	2200      	movs	r2, #0
   1082a:	5e9b      	ldrsh	r3, [r3, r2]
   1082c:	2b00      	cmp	r3, #0
   1082e:	d10f      	bne.n	10850 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   10830:	1cbb      	adds	r3, r7, #2
   10832:	881a      	ldrh	r2, [r3, #0]
   10834:	2380      	movs	r3, #128	; 0x80
   10836:	019b      	lsls	r3, r3, #6
   10838:	429a      	cmp	r2, r3
   1083a:	d804      	bhi.n	10846 <spi_data_write+0x72>
				order = 0x3;
   1083c:	2312      	movs	r3, #18
   1083e:	18fb      	adds	r3, r7, r3
   10840:	2203      	movs	r2, #3
   10842:	701a      	strb	r2, [r3, #0]
   10844:	e013      	b.n	1086e <spi_data_write+0x9a>
			else
				order = 0x1;
   10846:	2312      	movs	r3, #18
   10848:	18fb      	adds	r3, r7, r3
   1084a:	2201      	movs	r2, #1
   1084c:	701a      	strb	r2, [r3, #0]
   1084e:	e00e      	b.n	1086e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   10850:	1cbb      	adds	r3, r7, #2
   10852:	881a      	ldrh	r2, [r3, #0]
   10854:	2380      	movs	r3, #128	; 0x80
   10856:	019b      	lsls	r3, r3, #6
   10858:	429a      	cmp	r2, r3
   1085a:	d804      	bhi.n	10866 <spi_data_write+0x92>
				order = 0x3;
   1085c:	2312      	movs	r3, #18
   1085e:	18fb      	adds	r3, r7, r3
   10860:	2203      	movs	r2, #3
   10862:	701a      	strb	r2, [r3, #0]
   10864:	e003      	b.n	1086e <spi_data_write+0x9a>
			else
				order = 0x2;
   10866:	2312      	movs	r3, #18
   10868:	18fb      	adds	r3, r7, r3
   1086a:	2202      	movs	r2, #2
   1086c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   1086e:	2311      	movs	r3, #17
   10870:	18fb      	adds	r3, r7, r3
   10872:	781a      	ldrb	r2, [r3, #0]
   10874:	2312      	movs	r3, #18
   10876:	18fb      	adds	r3, r7, r3
   10878:	781b      	ldrb	r3, [r3, #0]
   1087a:	4313      	orrs	r3, r2
   1087c:	b2da      	uxtb	r2, r3
   1087e:	2311      	movs	r3, #17
   10880:	18fb      	adds	r3, r7, r3
   10882:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   10884:	2311      	movs	r3, #17
   10886:	18fb      	adds	r3, r7, r3
   10888:	2101      	movs	r1, #1
   1088a:	0018      	movs	r0, r3
   1088c:	4b3c      	ldr	r3, [pc, #240]	; (10980 <spi_data_write+0x1ac>)
   1088e:	4798      	blx	r3
   10890:	1e03      	subs	r3, r0, #0
   10892:	d012      	beq.n	108ba <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   10894:	4a3b      	ldr	r2, [pc, #236]	; (10984 <spi_data_write+0x1b0>)
   10896:	493c      	ldr	r1, [pc, #240]	; (10988 <spi_data_write+0x1b4>)
   10898:	4b3c      	ldr	r3, [pc, #240]	; (1098c <spi_data_write+0x1b8>)
   1089a:	0018      	movs	r0, r3
   1089c:	4b3c      	ldr	r3, [pc, #240]	; (10990 <spi_data_write+0x1bc>)
   1089e:	4798      	blx	r3
   108a0:	4b3c      	ldr	r3, [pc, #240]	; (10994 <spi_data_write+0x1c0>)
   108a2:	0018      	movs	r0, r3
   108a4:	4b3a      	ldr	r3, [pc, #232]	; (10990 <spi_data_write+0x1bc>)
   108a6:	4798      	blx	r3
   108a8:	4b3b      	ldr	r3, [pc, #236]	; (10998 <spi_data_write+0x1c4>)
   108aa:	0018      	movs	r0, r3
   108ac:	4b38      	ldr	r3, [pc, #224]	; (10990 <spi_data_write+0x1bc>)
   108ae:	4798      	blx	r3
			result = N_FAIL;
   108b0:	2313      	movs	r3, #19
   108b2:	18fb      	adds	r3, r7, r3
   108b4:	2200      	movs	r2, #0
   108b6:	701a      	strb	r2, [r3, #0]
			break;
   108b8:	e059      	b.n	1096e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   108ba:	2316      	movs	r3, #22
   108bc:	18fb      	adds	r3, r7, r3
   108be:	2200      	movs	r2, #0
   108c0:	5e9b      	ldrsh	r3, [r3, r2]
   108c2:	687a      	ldr	r2, [r7, #4]
   108c4:	18d2      	adds	r2, r2, r3
   108c6:	2314      	movs	r3, #20
   108c8:	18fb      	adds	r3, r7, r3
   108ca:	881b      	ldrh	r3, [r3, #0]
   108cc:	0019      	movs	r1, r3
   108ce:	0010      	movs	r0, r2
   108d0:	4b2b      	ldr	r3, [pc, #172]	; (10980 <spi_data_write+0x1ac>)
   108d2:	4798      	blx	r3
   108d4:	1e03      	subs	r3, r0, #0
   108d6:	d012      	beq.n	108fe <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   108d8:	4a30      	ldr	r2, [pc, #192]	; (1099c <spi_data_write+0x1c8>)
   108da:	492b      	ldr	r1, [pc, #172]	; (10988 <spi_data_write+0x1b4>)
   108dc:	4b2b      	ldr	r3, [pc, #172]	; (1098c <spi_data_write+0x1b8>)
   108de:	0018      	movs	r0, r3
   108e0:	4b2b      	ldr	r3, [pc, #172]	; (10990 <spi_data_write+0x1bc>)
   108e2:	4798      	blx	r3
   108e4:	4b2e      	ldr	r3, [pc, #184]	; (109a0 <spi_data_write+0x1cc>)
   108e6:	0018      	movs	r0, r3
   108e8:	4b29      	ldr	r3, [pc, #164]	; (10990 <spi_data_write+0x1bc>)
   108ea:	4798      	blx	r3
   108ec:	4b2a      	ldr	r3, [pc, #168]	; (10998 <spi_data_write+0x1c4>)
   108ee:	0018      	movs	r0, r3
   108f0:	4b27      	ldr	r3, [pc, #156]	; (10990 <spi_data_write+0x1bc>)
   108f2:	4798      	blx	r3
			result = N_FAIL;
   108f4:	2313      	movs	r3, #19
   108f6:	18fb      	adds	r3, r7, r3
   108f8:	2200      	movs	r2, #0
   108fa:	701a      	strb	r2, [r3, #0]
			break;
   108fc:	e037      	b.n	1096e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   108fe:	4b29      	ldr	r3, [pc, #164]	; (109a4 <spi_data_write+0x1d0>)
   10900:	781b      	ldrb	r3, [r3, #0]
   10902:	2b00      	cmp	r3, #0
   10904:	d11b      	bne.n	1093e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   10906:	230c      	movs	r3, #12
   10908:	18fb      	adds	r3, r7, r3
   1090a:	2102      	movs	r1, #2
   1090c:	0018      	movs	r0, r3
   1090e:	4b1c      	ldr	r3, [pc, #112]	; (10980 <spi_data_write+0x1ac>)
   10910:	4798      	blx	r3
   10912:	1e03      	subs	r3, r0, #0
   10914:	d013      	beq.n	1093e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   10916:	23d7      	movs	r3, #215	; 0xd7
   10918:	009a      	lsls	r2, r3, #2
   1091a:	491b      	ldr	r1, [pc, #108]	; (10988 <spi_data_write+0x1b4>)
   1091c:	4b1b      	ldr	r3, [pc, #108]	; (1098c <spi_data_write+0x1b8>)
   1091e:	0018      	movs	r0, r3
   10920:	4b1b      	ldr	r3, [pc, #108]	; (10990 <spi_data_write+0x1bc>)
   10922:	4798      	blx	r3
   10924:	4b20      	ldr	r3, [pc, #128]	; (109a8 <spi_data_write+0x1d4>)
   10926:	0018      	movs	r0, r3
   10928:	4b19      	ldr	r3, [pc, #100]	; (10990 <spi_data_write+0x1bc>)
   1092a:	4798      	blx	r3
   1092c:	4b1a      	ldr	r3, [pc, #104]	; (10998 <spi_data_write+0x1c4>)
   1092e:	0018      	movs	r0, r3
   10930:	4b17      	ldr	r3, [pc, #92]	; (10990 <spi_data_write+0x1bc>)
   10932:	4798      	blx	r3
				result = N_FAIL;
   10934:	2313      	movs	r3, #19
   10936:	18fb      	adds	r3, r7, r3
   10938:	2200      	movs	r2, #0
   1093a:	701a      	strb	r2, [r3, #0]
				break;
   1093c:	e017      	b.n	1096e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   1093e:	2316      	movs	r3, #22
   10940:	18fb      	adds	r3, r7, r3
   10942:	881a      	ldrh	r2, [r3, #0]
   10944:	2314      	movs	r3, #20
   10946:	18fb      	adds	r3, r7, r3
   10948:	881b      	ldrh	r3, [r3, #0]
   1094a:	18d3      	adds	r3, r2, r3
   1094c:	b29a      	uxth	r2, r3
   1094e:	2316      	movs	r3, #22
   10950:	18fb      	adds	r3, r7, r3
   10952:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   10954:	1cbb      	adds	r3, r7, #2
   10956:	1cb9      	adds	r1, r7, #2
   10958:	2214      	movs	r2, #20
   1095a:	18ba      	adds	r2, r7, r2
   1095c:	8809      	ldrh	r1, [r1, #0]
   1095e:	8812      	ldrh	r2, [r2, #0]
   10960:	1a8a      	subs	r2, r1, r2
   10962:	801a      	strh	r2, [r3, #0]
	} while (sz);
   10964:	1cbb      	adds	r3, r7, #2
   10966:	881b      	ldrh	r3, [r3, #0]
   10968:	2b00      	cmp	r3, #0
   1096a:	d000      	beq.n	1096e <spi_data_write+0x19a>
   1096c:	e745      	b.n	107fa <spi_data_write+0x26>


	return result;
   1096e:	2313      	movs	r3, #19
   10970:	18fb      	adds	r3, r7, r3
   10972:	781b      	ldrb	r3, [r3, #0]
   10974:	b25b      	sxtb	r3, r3
}
   10976:	0018      	movs	r0, r3
   10978:	46bd      	mov	sp, r7
   1097a:	b006      	add	sp, #24
   1097c:	bd80      	pop	{r7, pc}
   1097e:	46c0      	nop			; (mov r8, r8)
   10980:	0000f85d 	.word	0x0000f85d
   10984:	00000349 	.word	0x00000349
   10988:	00026334 	.word	0x00026334
   1098c:	00025d0c 	.word	0x00025d0c
   10990:	0000a3cd 	.word	0x0000a3cd
   10994:	00025fd4 	.word	0x00025fd4
   10998:	00025d4c 	.word	0x00025d4c
   1099c:	00000352 	.word	0x00000352
   109a0:	0002600c 	.word	0x0002600c
   109a4:	20004128 	.word	0x20004128
   109a8:	00026040 	.word	0x00026040

000109ac <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   109ac:	b590      	push	{r4, r7, lr}
   109ae:	b087      	sub	sp, #28
   109b0:	af02      	add	r7, sp, #8
   109b2:	6078      	str	r0, [r7, #4]
   109b4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   109b6:	230f      	movs	r3, #15
   109b8:	18fb      	adds	r3, r7, r3
   109ba:	220a      	movs	r2, #10
   109bc:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   109be:	230c      	movs	r3, #12
   109c0:	18fb      	adds	r3, r7, r3
   109c2:	2201      	movs	r2, #1
   109c4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   109c6:	230e      	movs	r3, #14
   109c8:	18fb      	adds	r3, r7, r3
   109ca:	22c9      	movs	r2, #201	; 0xc9
   109cc:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   109ce:	230d      	movs	r3, #13
   109d0:	18fb      	adds	r3, r7, r3
   109d2:	2200      	movs	r2, #0
   109d4:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   109d6:	687b      	ldr	r3, [r7, #4]
   109d8:	2b30      	cmp	r3, #48	; 0x30
   109da:	d808      	bhi.n	109ee <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   109dc:	230e      	movs	r3, #14
   109de:	18fb      	adds	r3, r7, r3
   109e0:	22c3      	movs	r2, #195	; 0xc3
   109e2:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   109e4:	230d      	movs	r3, #13
   109e6:	18fb      	adds	r3, r7, r3
   109e8:	2201      	movs	r2, #1
   109ea:	701a      	strb	r2, [r3, #0]
   109ec:	e007      	b.n	109fe <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   109ee:	230e      	movs	r3, #14
   109f0:	18fb      	adds	r3, r7, r3
   109f2:	22c9      	movs	r2, #201	; 0xc9
   109f4:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   109f6:	230d      	movs	r3, #13
   109f8:	18fb      	adds	r3, r7, r3
   109fa:	2200      	movs	r2, #0
   109fc:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   109fe:	003a      	movs	r2, r7
   10a00:	6879      	ldr	r1, [r7, #4]
   10a02:	230e      	movs	r3, #14
   10a04:	18fb      	adds	r3, r7, r3
   10a06:	7818      	ldrb	r0, [r3, #0]
   10a08:	230d      	movs	r3, #13
   10a0a:	18fb      	adds	r3, r7, r3
   10a0c:	781b      	ldrb	r3, [r3, #0]
   10a0e:	9300      	str	r3, [sp, #0]
   10a10:	2304      	movs	r3, #4
   10a12:	4c2e      	ldr	r4, [pc, #184]	; (10acc <spi_write_reg+0x120>)
   10a14:	47a0      	blx	r4
   10a16:	0002      	movs	r2, r0
   10a18:	230c      	movs	r3, #12
   10a1a:	18fb      	adds	r3, r7, r3
   10a1c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   10a1e:	230c      	movs	r3, #12
   10a20:	18fb      	adds	r3, r7, r3
   10a22:	781b      	ldrb	r3, [r3, #0]
   10a24:	b25b      	sxtb	r3, r3
   10a26:	2b01      	cmp	r3, #1
   10a28:	d010      	beq.n	10a4c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   10a2a:	4a29      	ldr	r2, [pc, #164]	; (10ad0 <spi_write_reg+0x124>)
   10a2c:	4929      	ldr	r1, [pc, #164]	; (10ad4 <spi_write_reg+0x128>)
   10a2e:	4b2a      	ldr	r3, [pc, #168]	; (10ad8 <spi_write_reg+0x12c>)
   10a30:	0018      	movs	r0, r3
   10a32:	4b2a      	ldr	r3, [pc, #168]	; (10adc <spi_write_reg+0x130>)
   10a34:	4798      	blx	r3
   10a36:	687a      	ldr	r2, [r7, #4]
   10a38:	4b29      	ldr	r3, [pc, #164]	; (10ae0 <spi_write_reg+0x134>)
   10a3a:	0011      	movs	r1, r2
   10a3c:	0018      	movs	r0, r3
   10a3e:	4b27      	ldr	r3, [pc, #156]	; (10adc <spi_write_reg+0x130>)
   10a40:	4798      	blx	r3
   10a42:	4b28      	ldr	r3, [pc, #160]	; (10ae4 <spi_write_reg+0x138>)
   10a44:	0018      	movs	r0, r3
   10a46:	4b25      	ldr	r3, [pc, #148]	; (10adc <spi_write_reg+0x130>)
   10a48:	4798      	blx	r3
		goto _FAIL_;
   10a4a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   10a4c:	230c      	movs	r3, #12
   10a4e:	18fb      	adds	r3, r7, r3
   10a50:	781b      	ldrb	r3, [r3, #0]
   10a52:	b25b      	sxtb	r3, r3
   10a54:	2b01      	cmp	r3, #1
   10a56:	d030      	beq.n	10aba <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   10a58:	2001      	movs	r0, #1
   10a5a:	4b23      	ldr	r3, [pc, #140]	; (10ae8 <spi_write_reg+0x13c>)
   10a5c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   10a5e:	2300      	movs	r3, #0
   10a60:	9300      	str	r3, [sp, #0]
   10a62:	2300      	movs	r3, #0
   10a64:	2200      	movs	r2, #0
   10a66:	2100      	movs	r1, #0
   10a68:	20cf      	movs	r0, #207	; 0xcf
   10a6a:	4c20      	ldr	r4, [pc, #128]	; (10aec <spi_write_reg+0x140>)
   10a6c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   10a6e:	20cf      	movs	r0, #207	; 0xcf
   10a70:	4b1f      	ldr	r3, [pc, #124]	; (10af0 <spi_write_reg+0x144>)
   10a72:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   10a74:	23ea      	movs	r3, #234	; 0xea
   10a76:	009a      	lsls	r2, r3, #2
   10a78:	4916      	ldr	r1, [pc, #88]	; (10ad4 <spi_write_reg+0x128>)
   10a7a:	4b17      	ldr	r3, [pc, #92]	; (10ad8 <spi_write_reg+0x12c>)
   10a7c:	0018      	movs	r0, r3
   10a7e:	4b17      	ldr	r3, [pc, #92]	; (10adc <spi_write_reg+0x130>)
   10a80:	4798      	blx	r3
   10a82:	230f      	movs	r3, #15
   10a84:	18fb      	adds	r3, r7, r3
   10a86:	7819      	ldrb	r1, [r3, #0]
   10a88:	683b      	ldr	r3, [r7, #0]
   10a8a:	687a      	ldr	r2, [r7, #4]
   10a8c:	4819      	ldr	r0, [pc, #100]	; (10af4 <spi_write_reg+0x148>)
   10a8e:	4c13      	ldr	r4, [pc, #76]	; (10adc <spi_write_reg+0x130>)
   10a90:	47a0      	blx	r4
   10a92:	4b14      	ldr	r3, [pc, #80]	; (10ae4 <spi_write_reg+0x138>)
   10a94:	0018      	movs	r0, r3
   10a96:	4b11      	ldr	r3, [pc, #68]	; (10adc <spi_write_reg+0x130>)
   10a98:	4798      	blx	r3
		nm_bsp_sleep(1);
   10a9a:	2001      	movs	r0, #1
   10a9c:	4b12      	ldr	r3, [pc, #72]	; (10ae8 <spi_write_reg+0x13c>)
   10a9e:	4798      	blx	r3
		retry--;
   10aa0:	230f      	movs	r3, #15
   10aa2:	18fb      	adds	r3, r7, r3
   10aa4:	781a      	ldrb	r2, [r3, #0]
   10aa6:	230f      	movs	r3, #15
   10aa8:	18fb      	adds	r3, r7, r3
   10aaa:	3a01      	subs	r2, #1
   10aac:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   10aae:	230f      	movs	r3, #15
   10ab0:	18fb      	adds	r3, r7, r3
   10ab2:	781b      	ldrb	r3, [r3, #0]
   10ab4:	2b00      	cmp	r3, #0
   10ab6:	d000      	beq.n	10aba <spi_write_reg+0x10e>
   10ab8:	e78d      	b.n	109d6 <spi_write_reg+0x2a>
	}

	return result;
   10aba:	230c      	movs	r3, #12
   10abc:	18fb      	adds	r3, r7, r3
   10abe:	781b      	ldrb	r3, [r3, #0]
   10ac0:	b25b      	sxtb	r3, r3
}
   10ac2:	0018      	movs	r0, r3
   10ac4:	46bd      	mov	sp, r7
   10ac6:	b005      	add	sp, #20
   10ac8:	bd90      	pop	{r4, r7, pc}
   10aca:	46c0      	nop			; (mov r8, r8)
   10acc:	0000fee1 	.word	0x0000fee1
   10ad0:	0000039d 	.word	0x0000039d
   10ad4:	00026344 	.word	0x00026344
   10ad8:	00025d0c 	.word	0x00025d0c
   10adc:	0000a3cd 	.word	0x0000a3cd
   10ae0:	00026078 	.word	0x00026078
   10ae4:	00025d4c 	.word	0x00025d4c
   10ae8:	0000c821 	.word	0x0000c821
   10aec:	0000f965 	.word	0x0000f965
   10af0:	0000fda5 	.word	0x0000fda5
   10af4:	000260a4 	.word	0x000260a4

00010af8 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   10af8:	b590      	push	{r4, r7, lr}
   10afa:	b089      	sub	sp, #36	; 0x24
   10afc:	af02      	add	r7, sp, #8
   10afe:	60f8      	str	r0, [r7, #12]
   10b00:	60b9      	str	r1, [r7, #8]
   10b02:	1dbb      	adds	r3, r7, #6
   10b04:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   10b06:	2316      	movs	r3, #22
   10b08:	18fb      	adds	r3, r7, r3
   10b0a:	220a      	movs	r2, #10
   10b0c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   10b0e:	2315      	movs	r3, #21
   10b10:	18fb      	adds	r3, r7, r3
   10b12:	22c7      	movs	r2, #199	; 0xc7
   10b14:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   10b16:	1dbb      	adds	r3, r7, #6
   10b18:	881a      	ldrh	r2, [r3, #0]
   10b1a:	68f9      	ldr	r1, [r7, #12]
   10b1c:	2315      	movs	r3, #21
   10b1e:	18fb      	adds	r3, r7, r3
   10b20:	7818      	ldrb	r0, [r3, #0]
   10b22:	2300      	movs	r3, #0
   10b24:	9300      	str	r3, [sp, #0]
   10b26:	0013      	movs	r3, r2
   10b28:	2200      	movs	r2, #0
   10b2a:	4c4d      	ldr	r4, [pc, #308]	; (10c60 <nm_spi_write+0x168>)
   10b2c:	47a0      	blx	r4
   10b2e:	0002      	movs	r2, r0
   10b30:	2317      	movs	r3, #23
   10b32:	18fb      	adds	r3, r7, r3
   10b34:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   10b36:	2317      	movs	r3, #23
   10b38:	18fb      	adds	r3, r7, r3
   10b3a:	781b      	ldrb	r3, [r3, #0]
   10b3c:	b25b      	sxtb	r3, r3
   10b3e:	2b01      	cmp	r3, #1
   10b40:	d010      	beq.n	10b64 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   10b42:	4a48      	ldr	r2, [pc, #288]	; (10c64 <nm_spi_write+0x16c>)
   10b44:	4948      	ldr	r1, [pc, #288]	; (10c68 <nm_spi_write+0x170>)
   10b46:	4b49      	ldr	r3, [pc, #292]	; (10c6c <nm_spi_write+0x174>)
   10b48:	0018      	movs	r0, r3
   10b4a:	4b49      	ldr	r3, [pc, #292]	; (10c70 <nm_spi_write+0x178>)
   10b4c:	4798      	blx	r3
   10b4e:	68fa      	ldr	r2, [r7, #12]
   10b50:	4b48      	ldr	r3, [pc, #288]	; (10c74 <nm_spi_write+0x17c>)
   10b52:	0011      	movs	r1, r2
   10b54:	0018      	movs	r0, r3
   10b56:	4b46      	ldr	r3, [pc, #280]	; (10c70 <nm_spi_write+0x178>)
   10b58:	4798      	blx	r3
   10b5a:	4b47      	ldr	r3, [pc, #284]	; (10c78 <nm_spi_write+0x180>)
   10b5c:	0018      	movs	r0, r3
   10b5e:	4b44      	ldr	r3, [pc, #272]	; (10c70 <nm_spi_write+0x178>)
   10b60:	4798      	blx	r3
		goto _FAIL_;
   10b62:	e03e      	b.n	10be2 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   10b64:	2317      	movs	r3, #23
   10b66:	18fc      	adds	r4, r7, r3
   10b68:	1dbb      	adds	r3, r7, #6
   10b6a:	881a      	ldrh	r2, [r3, #0]
   10b6c:	68bb      	ldr	r3, [r7, #8]
   10b6e:	0011      	movs	r1, r2
   10b70:	0018      	movs	r0, r3
   10b72:	4b42      	ldr	r3, [pc, #264]	; (10c7c <nm_spi_write+0x184>)
   10b74:	4798      	blx	r3
   10b76:	0003      	movs	r3, r0
   10b78:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   10b7a:	2317      	movs	r3, #23
   10b7c:	18fb      	adds	r3, r7, r3
   10b7e:	781b      	ldrb	r3, [r3, #0]
   10b80:	b25b      	sxtb	r3, r3
   10b82:	2b01      	cmp	r3, #1
   10b84:	d00e      	beq.n	10ba4 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   10b86:	4a3e      	ldr	r2, [pc, #248]	; (10c80 <nm_spi_write+0x188>)
   10b88:	4937      	ldr	r1, [pc, #220]	; (10c68 <nm_spi_write+0x170>)
   10b8a:	4b38      	ldr	r3, [pc, #224]	; (10c6c <nm_spi_write+0x174>)
   10b8c:	0018      	movs	r0, r3
   10b8e:	4b38      	ldr	r3, [pc, #224]	; (10c70 <nm_spi_write+0x178>)
   10b90:	4798      	blx	r3
   10b92:	4b3c      	ldr	r3, [pc, #240]	; (10c84 <nm_spi_write+0x18c>)
   10b94:	0018      	movs	r0, r3
   10b96:	4b36      	ldr	r3, [pc, #216]	; (10c70 <nm_spi_write+0x178>)
   10b98:	4798      	blx	r3
   10b9a:	4b37      	ldr	r3, [pc, #220]	; (10c78 <nm_spi_write+0x180>)
   10b9c:	0018      	movs	r0, r3
   10b9e:	4b34      	ldr	r3, [pc, #208]	; (10c70 <nm_spi_write+0x178>)
   10ba0:	4798      	blx	r3
		goto _FAIL_;
   10ba2:	e01e      	b.n	10be2 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   10ba4:	2317      	movs	r3, #23
   10ba6:	18fc      	adds	r4, r7, r3
   10ba8:	2315      	movs	r3, #21
   10baa:	18fb      	adds	r3, r7, r3
   10bac:	781b      	ldrb	r3, [r3, #0]
   10bae:	0018      	movs	r0, r3
   10bb0:	4b35      	ldr	r3, [pc, #212]	; (10c88 <nm_spi_write+0x190>)
   10bb2:	4798      	blx	r3
   10bb4:	0003      	movs	r3, r0
   10bb6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   10bb8:	2317      	movs	r3, #23
   10bba:	18fb      	adds	r3, r7, r3
   10bbc:	781b      	ldrb	r3, [r3, #0]
   10bbe:	b25b      	sxtb	r3, r3
   10bc0:	2b01      	cmp	r3, #1
   10bc2:	d00e      	beq.n	10be2 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   10bc4:	4a31      	ldr	r2, [pc, #196]	; (10c8c <nm_spi_write+0x194>)
   10bc6:	4928      	ldr	r1, [pc, #160]	; (10c68 <nm_spi_write+0x170>)
   10bc8:	4b28      	ldr	r3, [pc, #160]	; (10c6c <nm_spi_write+0x174>)
   10bca:	0018      	movs	r0, r3
   10bcc:	4b28      	ldr	r3, [pc, #160]	; (10c70 <nm_spi_write+0x178>)
   10bce:	4798      	blx	r3
   10bd0:	4b2c      	ldr	r3, [pc, #176]	; (10c84 <nm_spi_write+0x18c>)
   10bd2:	0018      	movs	r0, r3
   10bd4:	4b26      	ldr	r3, [pc, #152]	; (10c70 <nm_spi_write+0x178>)
   10bd6:	4798      	blx	r3
   10bd8:	4b27      	ldr	r3, [pc, #156]	; (10c78 <nm_spi_write+0x180>)
   10bda:	0018      	movs	r0, r3
   10bdc:	4b24      	ldr	r3, [pc, #144]	; (10c70 <nm_spi_write+0x178>)
   10bde:	4798      	blx	r3
		goto _FAIL_;
   10be0:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   10be2:	2317      	movs	r3, #23
   10be4:	18fb      	adds	r3, r7, r3
   10be6:	781b      	ldrb	r3, [r3, #0]
   10be8:	b25b      	sxtb	r3, r3
   10bea:	2b01      	cmp	r3, #1
   10bec:	d030      	beq.n	10c50 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   10bee:	2001      	movs	r0, #1
   10bf0:	4b27      	ldr	r3, [pc, #156]	; (10c90 <nm_spi_write+0x198>)
   10bf2:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   10bf4:	2300      	movs	r3, #0
   10bf6:	9300      	str	r3, [sp, #0]
   10bf8:	2300      	movs	r3, #0
   10bfa:	2200      	movs	r2, #0
   10bfc:	2100      	movs	r1, #0
   10bfe:	20cf      	movs	r0, #207	; 0xcf
   10c00:	4c24      	ldr	r4, [pc, #144]	; (10c94 <nm_spi_write+0x19c>)
   10c02:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   10c04:	20cf      	movs	r0, #207	; 0xcf
   10c06:	4b24      	ldr	r3, [pc, #144]	; (10c98 <nm_spi_write+0x1a0>)
   10c08:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   10c0a:	4a24      	ldr	r2, [pc, #144]	; (10c9c <nm_spi_write+0x1a4>)
   10c0c:	4916      	ldr	r1, [pc, #88]	; (10c68 <nm_spi_write+0x170>)
   10c0e:	4b17      	ldr	r3, [pc, #92]	; (10c6c <nm_spi_write+0x174>)
   10c10:	0018      	movs	r0, r3
   10c12:	4b17      	ldr	r3, [pc, #92]	; (10c70 <nm_spi_write+0x178>)
   10c14:	4798      	blx	r3
   10c16:	2316      	movs	r3, #22
   10c18:	18fb      	adds	r3, r7, r3
   10c1a:	7819      	ldrb	r1, [r3, #0]
   10c1c:	1dbb      	adds	r3, r7, #6
   10c1e:	881b      	ldrh	r3, [r3, #0]
   10c20:	68fa      	ldr	r2, [r7, #12]
   10c22:	481f      	ldr	r0, [pc, #124]	; (10ca0 <nm_spi_write+0x1a8>)
   10c24:	4c12      	ldr	r4, [pc, #72]	; (10c70 <nm_spi_write+0x178>)
   10c26:	47a0      	blx	r4
   10c28:	4b13      	ldr	r3, [pc, #76]	; (10c78 <nm_spi_write+0x180>)
   10c2a:	0018      	movs	r0, r3
   10c2c:	4b10      	ldr	r3, [pc, #64]	; (10c70 <nm_spi_write+0x178>)
   10c2e:	4798      	blx	r3
		nm_bsp_sleep(1);
   10c30:	2001      	movs	r0, #1
   10c32:	4b17      	ldr	r3, [pc, #92]	; (10c90 <nm_spi_write+0x198>)
   10c34:	4798      	blx	r3
		retry--;
   10c36:	2316      	movs	r3, #22
   10c38:	18fb      	adds	r3, r7, r3
   10c3a:	781a      	ldrb	r2, [r3, #0]
   10c3c:	2316      	movs	r3, #22
   10c3e:	18fb      	adds	r3, r7, r3
   10c40:	3a01      	subs	r2, #1
   10c42:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   10c44:	2316      	movs	r3, #22
   10c46:	18fb      	adds	r3, r7, r3
   10c48:	781b      	ldrb	r3, [r3, #0]
   10c4a:	2b00      	cmp	r3, #0
   10c4c:	d000      	beq.n	10c50 <nm_spi_write+0x158>
   10c4e:	e762      	b.n	10b16 <nm_spi_write+0x1e>
	}


	return result;
   10c50:	2317      	movs	r3, #23
   10c52:	18fb      	adds	r3, r7, r3
   10c54:	781b      	ldrb	r3, [r3, #0]
   10c56:	b25b      	sxtb	r3, r3
}
   10c58:	0018      	movs	r0, r3
   10c5a:	46bd      	mov	sp, r7
   10c5c:	b007      	add	sp, #28
   10c5e:	bd90      	pop	{r4, r7, pc}
   10c60:	0000fee1 	.word	0x0000fee1
   10c64:	000003cf 	.word	0x000003cf
   10c68:	00026354 	.word	0x00026354
   10c6c:	00025d0c 	.word	0x00025d0c
   10c70:	0000a3cd 	.word	0x0000a3cd
   10c74:	000260c0 	.word	0x000260c0
   10c78:	00025d4c 	.word	0x00025d4c
   10c7c:	000107d5 	.word	0x000107d5
   10c80:	000003d9 	.word	0x000003d9
   10c84:	000260f0 	.word	0x000260f0
   10c88:	0000fca5 	.word	0x0000fca5
   10c8c:	000003e1 	.word	0x000003e1
   10c90:	0000c821 	.word	0x0000c821
   10c94:	0000f965 	.word	0x0000f965
   10c98:	0000fda5 	.word	0x0000fda5
   10c9c:	000003eb 	.word	0x000003eb
   10ca0:	00026118 	.word	0x00026118

00010ca4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   10ca4:	b590      	push	{r4, r7, lr}
   10ca6:	b087      	sub	sp, #28
   10ca8:	af02      	add	r7, sp, #8
   10caa:	6078      	str	r0, [r7, #4]
   10cac:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   10cae:	230f      	movs	r3, #15
   10cb0:	18fb      	adds	r3, r7, r3
   10cb2:	220a      	movs	r2, #10
   10cb4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   10cb6:	230c      	movs	r3, #12
   10cb8:	18fb      	adds	r3, r7, r3
   10cba:	2201      	movs	r2, #1
   10cbc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   10cbe:	230e      	movs	r3, #14
   10cc0:	18fb      	adds	r3, r7, r3
   10cc2:	22ca      	movs	r2, #202	; 0xca
   10cc4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   10cc6:	230d      	movs	r3, #13
   10cc8:	18fb      	adds	r3, r7, r3
   10cca:	2200      	movs	r2, #0
   10ccc:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   10cce:	687b      	ldr	r3, [r7, #4]
   10cd0:	2bff      	cmp	r3, #255	; 0xff
   10cd2:	d808      	bhi.n	10ce6 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   10cd4:	230e      	movs	r3, #14
   10cd6:	18fb      	adds	r3, r7, r3
   10cd8:	22c4      	movs	r2, #196	; 0xc4
   10cda:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   10cdc:	230d      	movs	r3, #13
   10cde:	18fb      	adds	r3, r7, r3
   10ce0:	2201      	movs	r2, #1
   10ce2:	701a      	strb	r2, [r3, #0]
   10ce4:	e007      	b.n	10cf6 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   10ce6:	230e      	movs	r3, #14
   10ce8:	18fb      	adds	r3, r7, r3
   10cea:	22ca      	movs	r2, #202	; 0xca
   10cec:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   10cee:	230d      	movs	r3, #13
   10cf0:	18fb      	adds	r3, r7, r3
   10cf2:	2200      	movs	r2, #0
   10cf4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   10cf6:	2308      	movs	r3, #8
   10cf8:	18fa      	adds	r2, r7, r3
   10cfa:	6879      	ldr	r1, [r7, #4]
   10cfc:	230e      	movs	r3, #14
   10cfe:	18fb      	adds	r3, r7, r3
   10d00:	7818      	ldrb	r0, [r3, #0]
   10d02:	230d      	movs	r3, #13
   10d04:	18fb      	adds	r3, r7, r3
   10d06:	781b      	ldrb	r3, [r3, #0]
   10d08:	9300      	str	r3, [sp, #0]
   10d0a:	2304      	movs	r3, #4
   10d0c:	4c37      	ldr	r4, [pc, #220]	; (10dec <spi_read_reg+0x148>)
   10d0e:	47a0      	blx	r4
   10d10:	0002      	movs	r2, r0
   10d12:	230c      	movs	r3, #12
   10d14:	18fb      	adds	r3, r7, r3
   10d16:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   10d18:	230c      	movs	r3, #12
   10d1a:	18fb      	adds	r3, r7, r3
   10d1c:	781b      	ldrb	r3, [r3, #0]
   10d1e:	b25b      	sxtb	r3, r3
   10d20:	2b01      	cmp	r3, #1
   10d22:	d010      	beq.n	10d46 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   10d24:	4a32      	ldr	r2, [pc, #200]	; (10df0 <spi_read_reg+0x14c>)
   10d26:	4933      	ldr	r1, [pc, #204]	; (10df4 <spi_read_reg+0x150>)
   10d28:	4b33      	ldr	r3, [pc, #204]	; (10df8 <spi_read_reg+0x154>)
   10d2a:	0018      	movs	r0, r3
   10d2c:	4b33      	ldr	r3, [pc, #204]	; (10dfc <spi_read_reg+0x158>)
   10d2e:	4798      	blx	r3
   10d30:	687a      	ldr	r2, [r7, #4]
   10d32:	4b33      	ldr	r3, [pc, #204]	; (10e00 <spi_read_reg+0x15c>)
   10d34:	0011      	movs	r1, r2
   10d36:	0018      	movs	r0, r3
   10d38:	4b30      	ldr	r3, [pc, #192]	; (10dfc <spi_read_reg+0x158>)
   10d3a:	4798      	blx	r3
   10d3c:	4b31      	ldr	r3, [pc, #196]	; (10e04 <spi_read_reg+0x160>)
   10d3e:	0018      	movs	r0, r3
   10d40:	4b2e      	ldr	r3, [pc, #184]	; (10dfc <spi_read_reg+0x158>)
   10d42:	4798      	blx	r3
		goto _FAIL_;
   10d44:	e014      	b.n	10d70 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   10d46:	2308      	movs	r3, #8
   10d48:	18fb      	adds	r3, r7, r3
   10d4a:	781b      	ldrb	r3, [r3, #0]
   10d4c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   10d4e:	2308      	movs	r3, #8
   10d50:	18fb      	adds	r3, r7, r3
   10d52:	785b      	ldrb	r3, [r3, #1]
   10d54:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   10d56:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   10d58:	2308      	movs	r3, #8
   10d5a:	18fb      	adds	r3, r7, r3
   10d5c:	789b      	ldrb	r3, [r3, #2]
   10d5e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   10d60:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   10d62:	2308      	movs	r3, #8
   10d64:	18fb      	adds	r3, r7, r3
   10d66:	78db      	ldrb	r3, [r3, #3]
   10d68:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   10d6a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   10d6c:	683b      	ldr	r3, [r7, #0]
   10d6e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   10d70:	230c      	movs	r3, #12
   10d72:	18fb      	adds	r3, r7, r3
   10d74:	781b      	ldrb	r3, [r3, #0]
   10d76:	b25b      	sxtb	r3, r3
   10d78:	2b01      	cmp	r3, #1
   10d7a:	d02f      	beq.n	10ddc <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   10d7c:	2001      	movs	r0, #1
   10d7e:	4b22      	ldr	r3, [pc, #136]	; (10e08 <spi_read_reg+0x164>)
   10d80:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   10d82:	2300      	movs	r3, #0
   10d84:	9300      	str	r3, [sp, #0]
   10d86:	2300      	movs	r3, #0
   10d88:	2200      	movs	r2, #0
   10d8a:	2100      	movs	r1, #0
   10d8c:	20cf      	movs	r0, #207	; 0xcf
   10d8e:	4c1f      	ldr	r4, [pc, #124]	; (10e0c <spi_read_reg+0x168>)
   10d90:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   10d92:	20cf      	movs	r0, #207	; 0xcf
   10d94:	4b1e      	ldr	r3, [pc, #120]	; (10e10 <spi_read_reg+0x16c>)
   10d96:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   10d98:	4a1e      	ldr	r2, [pc, #120]	; (10e14 <spi_read_reg+0x170>)
   10d9a:	4916      	ldr	r1, [pc, #88]	; (10df4 <spi_read_reg+0x150>)
   10d9c:	4b16      	ldr	r3, [pc, #88]	; (10df8 <spi_read_reg+0x154>)
   10d9e:	0018      	movs	r0, r3
   10da0:	4b16      	ldr	r3, [pc, #88]	; (10dfc <spi_read_reg+0x158>)
   10da2:	4798      	blx	r3
   10da4:	230f      	movs	r3, #15
   10da6:	18fb      	adds	r3, r7, r3
   10da8:	7819      	ldrb	r1, [r3, #0]
   10daa:	687a      	ldr	r2, [r7, #4]
   10dac:	4b1a      	ldr	r3, [pc, #104]	; (10e18 <spi_read_reg+0x174>)
   10dae:	0018      	movs	r0, r3
   10db0:	4b12      	ldr	r3, [pc, #72]	; (10dfc <spi_read_reg+0x158>)
   10db2:	4798      	blx	r3
   10db4:	4b13      	ldr	r3, [pc, #76]	; (10e04 <spi_read_reg+0x160>)
   10db6:	0018      	movs	r0, r3
   10db8:	4b10      	ldr	r3, [pc, #64]	; (10dfc <spi_read_reg+0x158>)
   10dba:	4798      	blx	r3
		nm_bsp_sleep(1);
   10dbc:	2001      	movs	r0, #1
   10dbe:	4b12      	ldr	r3, [pc, #72]	; (10e08 <spi_read_reg+0x164>)
   10dc0:	4798      	blx	r3
		retry--;
   10dc2:	230f      	movs	r3, #15
   10dc4:	18fb      	adds	r3, r7, r3
   10dc6:	781a      	ldrb	r2, [r3, #0]
   10dc8:	230f      	movs	r3, #15
   10dca:	18fb      	adds	r3, r7, r3
   10dcc:	3a01      	subs	r2, #1
   10dce:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   10dd0:	230f      	movs	r3, #15
   10dd2:	18fb      	adds	r3, r7, r3
   10dd4:	781b      	ldrb	r3, [r3, #0]
   10dd6:	2b00      	cmp	r3, #0
   10dd8:	d000      	beq.n	10ddc <spi_read_reg+0x138>
   10dda:	e778      	b.n	10cce <spi_read_reg+0x2a>
	}
		
	return result;
   10ddc:	230c      	movs	r3, #12
   10dde:	18fb      	adds	r3, r7, r3
   10de0:	781b      	ldrb	r3, [r3, #0]
   10de2:	b25b      	sxtb	r3, r3
}
   10de4:	0018      	movs	r0, r3
   10de6:	46bd      	mov	sp, r7
   10de8:	b005      	add	sp, #20
   10dea:	bd90      	pop	{r4, r7, pc}
   10dec:	0000fee1 	.word	0x0000fee1
   10df0:	00000423 	.word	0x00000423
   10df4:	00026364 	.word	0x00026364
   10df8:	00025d0c 	.word	0x00025d0c
   10dfc:	0000a3cd 	.word	0x0000a3cd
   10e00:	00026134 	.word	0x00026134
   10e04:	00025d4c 	.word	0x00025d4c
   10e08:	0000c821 	.word	0x0000c821
   10e0c:	0000f965 	.word	0x0000f965
   10e10:	0000fda5 	.word	0x0000fda5
   10e14:	00000435 	.word	0x00000435
   10e18:	00026160 	.word	0x00026160

00010e1c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   10e1c:	b590      	push	{r4, r7, lr}
   10e1e:	b089      	sub	sp, #36	; 0x24
   10e20:	af02      	add	r7, sp, #8
   10e22:	60f8      	str	r0, [r7, #12]
   10e24:	60b9      	str	r1, [r7, #8]
   10e26:	1dbb      	adds	r3, r7, #6
   10e28:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   10e2a:	2316      	movs	r3, #22
   10e2c:	18fb      	adds	r3, r7, r3
   10e2e:	22c8      	movs	r2, #200	; 0xc8
   10e30:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   10e32:	2317      	movs	r3, #23
   10e34:	18fb      	adds	r3, r7, r3
   10e36:	220a      	movs	r2, #10
   10e38:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   10e3a:	1dbb      	adds	r3, r7, #6
   10e3c:	881c      	ldrh	r4, [r3, #0]
   10e3e:	68ba      	ldr	r2, [r7, #8]
   10e40:	68f9      	ldr	r1, [r7, #12]
   10e42:	2316      	movs	r3, #22
   10e44:	18fb      	adds	r3, r7, r3
   10e46:	7818      	ldrb	r0, [r3, #0]
   10e48:	2300      	movs	r3, #0
   10e4a:	9300      	str	r3, [sp, #0]
   10e4c:	0023      	movs	r3, r4
   10e4e:	4c2e      	ldr	r4, [pc, #184]	; (10f08 <nm_spi_read+0xec>)
   10e50:	47a0      	blx	r4
   10e52:	0002      	movs	r2, r0
   10e54:	2315      	movs	r3, #21
   10e56:	18fb      	adds	r3, r7, r3
   10e58:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   10e5a:	2315      	movs	r3, #21
   10e5c:	18fb      	adds	r3, r7, r3
   10e5e:	781b      	ldrb	r3, [r3, #0]
   10e60:	b25b      	sxtb	r3, r3
   10e62:	2b01      	cmp	r3, #1
   10e64:	d010      	beq.n	10e88 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   10e66:	4a29      	ldr	r2, [pc, #164]	; (10f0c <nm_spi_read+0xf0>)
   10e68:	4929      	ldr	r1, [pc, #164]	; (10f10 <nm_spi_read+0xf4>)
   10e6a:	4b2a      	ldr	r3, [pc, #168]	; (10f14 <nm_spi_read+0xf8>)
   10e6c:	0018      	movs	r0, r3
   10e6e:	4b2a      	ldr	r3, [pc, #168]	; (10f18 <nm_spi_read+0xfc>)
   10e70:	4798      	blx	r3
   10e72:	68fa      	ldr	r2, [r7, #12]
   10e74:	4b29      	ldr	r3, [pc, #164]	; (10f1c <nm_spi_read+0x100>)
   10e76:	0011      	movs	r1, r2
   10e78:	0018      	movs	r0, r3
   10e7a:	4b27      	ldr	r3, [pc, #156]	; (10f18 <nm_spi_read+0xfc>)
   10e7c:	4798      	blx	r3
   10e7e:	4b28      	ldr	r3, [pc, #160]	; (10f20 <nm_spi_read+0x104>)
   10e80:	0018      	movs	r0, r3
   10e82:	4b25      	ldr	r3, [pc, #148]	; (10f18 <nm_spi_read+0xfc>)
   10e84:	4798      	blx	r3
		goto _FAIL_;
   10e86:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   10e88:	2315      	movs	r3, #21
   10e8a:	18fb      	adds	r3, r7, r3
   10e8c:	781b      	ldrb	r3, [r3, #0]
   10e8e:	b25b      	sxtb	r3, r3
   10e90:	2b01      	cmp	r3, #1
   10e92:	d030      	beq.n	10ef6 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   10e94:	2001      	movs	r0, #1
   10e96:	4b23      	ldr	r3, [pc, #140]	; (10f24 <nm_spi_read+0x108>)
   10e98:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   10e9a:	2300      	movs	r3, #0
   10e9c:	9300      	str	r3, [sp, #0]
   10e9e:	2300      	movs	r3, #0
   10ea0:	2200      	movs	r2, #0
   10ea2:	2100      	movs	r1, #0
   10ea4:	20cf      	movs	r0, #207	; 0xcf
   10ea6:	4c20      	ldr	r4, [pc, #128]	; (10f28 <nm_spi_read+0x10c>)
   10ea8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   10eaa:	20cf      	movs	r0, #207	; 0xcf
   10eac:	4b1f      	ldr	r3, [pc, #124]	; (10f2c <nm_spi_read+0x110>)
   10eae:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   10eb0:	4a1f      	ldr	r2, [pc, #124]	; (10f30 <nm_spi_read+0x114>)
   10eb2:	4917      	ldr	r1, [pc, #92]	; (10f10 <nm_spi_read+0xf4>)
   10eb4:	4b17      	ldr	r3, [pc, #92]	; (10f14 <nm_spi_read+0xf8>)
   10eb6:	0018      	movs	r0, r3
   10eb8:	4b17      	ldr	r3, [pc, #92]	; (10f18 <nm_spi_read+0xfc>)
   10eba:	4798      	blx	r3
   10ebc:	2317      	movs	r3, #23
   10ebe:	18fb      	adds	r3, r7, r3
   10ec0:	7819      	ldrb	r1, [r3, #0]
   10ec2:	1dbb      	adds	r3, r7, #6
   10ec4:	881b      	ldrh	r3, [r3, #0]
   10ec6:	68fa      	ldr	r2, [r7, #12]
   10ec8:	481a      	ldr	r0, [pc, #104]	; (10f34 <nm_spi_read+0x118>)
   10eca:	4c13      	ldr	r4, [pc, #76]	; (10f18 <nm_spi_read+0xfc>)
   10ecc:	47a0      	blx	r4
   10ece:	4b14      	ldr	r3, [pc, #80]	; (10f20 <nm_spi_read+0x104>)
   10ed0:	0018      	movs	r0, r3
   10ed2:	4b11      	ldr	r3, [pc, #68]	; (10f18 <nm_spi_read+0xfc>)
   10ed4:	4798      	blx	r3
		nm_bsp_sleep(1);
   10ed6:	2001      	movs	r0, #1
   10ed8:	4b12      	ldr	r3, [pc, #72]	; (10f24 <nm_spi_read+0x108>)
   10eda:	4798      	blx	r3
		retry--;
   10edc:	2317      	movs	r3, #23
   10ede:	18fb      	adds	r3, r7, r3
   10ee0:	781a      	ldrb	r2, [r3, #0]
   10ee2:	2317      	movs	r3, #23
   10ee4:	18fb      	adds	r3, r7, r3
   10ee6:	3a01      	subs	r2, #1
   10ee8:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   10eea:	2317      	movs	r3, #23
   10eec:	18fb      	adds	r3, r7, r3
   10eee:	781b      	ldrb	r3, [r3, #0]
   10ef0:	2b00      	cmp	r3, #0
   10ef2:	d000      	beq.n	10ef6 <nm_spi_read+0xda>
   10ef4:	e7a1      	b.n	10e3a <nm_spi_read+0x1e>
	}

	return result;
   10ef6:	2315      	movs	r3, #21
   10ef8:	18fb      	adds	r3, r7, r3
   10efa:	781b      	ldrb	r3, [r3, #0]
   10efc:	b25b      	sxtb	r3, r3
}
   10efe:	0018      	movs	r0, r3
   10f00:	46bd      	mov	sp, r7
   10f02:	b007      	add	sp, #28
   10f04:	bd90      	pop	{r4, r7, pc}
   10f06:	46c0      	nop			; (mov r8, r8)
   10f08:	0000fee1 	.word	0x0000fee1
   10f0c:	00000472 	.word	0x00000472
   10f10:	00026374 	.word	0x00026374
   10f14:	00025d0c 	.word	0x00025d0c
   10f18:	0000a3cd 	.word	0x0000a3cd
   10f1c:	00026178 	.word	0x00026178
   10f20:	00025d4c 	.word	0x00025d4c
   10f24:	0000c821 	.word	0x0000c821
   10f28:	0000f965 	.word	0x0000f965
   10f2c:	0000fda5 	.word	0x0000fda5
   10f30:	0000047d 	.word	0x0000047d
   10f34:	00026118 	.word	0x00026118

00010f38 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   10f38:	b580      	push	{r7, lr}
   10f3a:	b082      	sub	sp, #8
   10f3c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   10f3e:	4b0c      	ldr	r3, [pc, #48]	; (10f70 <spi_init_pkt_sz+0x38>)
   10f40:	0018      	movs	r0, r3
   10f42:	4b0c      	ldr	r3, [pc, #48]	; (10f74 <spi_init_pkt_sz+0x3c>)
   10f44:	4798      	blx	r3
   10f46:	0003      	movs	r3, r0
   10f48:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   10f4a:	687b      	ldr	r3, [r7, #4]
   10f4c:	2270      	movs	r2, #112	; 0x70
   10f4e:	4393      	bics	r3, r2
   10f50:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   10f52:	687b      	ldr	r3, [r7, #4]
   10f54:	2250      	movs	r2, #80	; 0x50
   10f56:	4313      	orrs	r3, r2
   10f58:	607b      	str	r3, [r7, #4]
   10f5a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   10f5c:	687b      	ldr	r3, [r7, #4]
   10f5e:	4a04      	ldr	r2, [pc, #16]	; (10f70 <spi_init_pkt_sz+0x38>)
   10f60:	0019      	movs	r1, r3
   10f62:	0010      	movs	r0, r2
   10f64:	4b04      	ldr	r3, [pc, #16]	; (10f78 <spi_init_pkt_sz+0x40>)
   10f66:	4798      	blx	r3
}
   10f68:	46c0      	nop			; (mov r8, r8)
   10f6a:	46bd      	mov	sp, r7
   10f6c:	b002      	add	sp, #8
   10f6e:	bd80      	pop	{r7, pc}
   10f70:	0000e824 	.word	0x0000e824
   10f74:	00011111 	.word	0x00011111
   10f78:	00011185 	.word	0x00011185

00010f7c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   10f7c:	b590      	push	{r4, r7, lr}
   10f7e:	b083      	sub	sp, #12
   10f80:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   10f82:	2300      	movs	r3, #0
   10f84:	9300      	str	r3, [sp, #0]
   10f86:	2300      	movs	r3, #0
   10f88:	2200      	movs	r2, #0
   10f8a:	2100      	movs	r1, #0
   10f8c:	20cf      	movs	r0, #207	; 0xcf
   10f8e:	4c05      	ldr	r4, [pc, #20]	; (10fa4 <nm_spi_reset+0x28>)
   10f90:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   10f92:	20cf      	movs	r0, #207	; 0xcf
   10f94:	4b04      	ldr	r3, [pc, #16]	; (10fa8 <nm_spi_reset+0x2c>)
   10f96:	4798      	blx	r3
	return M2M_SUCCESS;
   10f98:	2300      	movs	r3, #0
}
   10f9a:	0018      	movs	r0, r3
   10f9c:	46bd      	mov	sp, r7
   10f9e:	b001      	add	sp, #4
   10fa0:	bd90      	pop	{r4, r7, pc}
   10fa2:	46c0      	nop			; (mov r8, r8)
   10fa4:	0000f965 	.word	0x0000f965
   10fa8:	0000fda5 	.word	0x0000fda5

00010fac <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   10fac:	b580      	push	{r7, lr}
   10fae:	b082      	sub	sp, #8
   10fb0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   10fb2:	2300      	movs	r3, #0
   10fb4:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   10fb6:	4b40      	ldr	r3, [pc, #256]	; (110b8 <nm_spi_init+0x10c>)
   10fb8:	2200      	movs	r2, #0
   10fba:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   10fbc:	003b      	movs	r3, r7
   10fbe:	4a3f      	ldr	r2, [pc, #252]	; (110bc <nm_spi_init+0x110>)
   10fc0:	0019      	movs	r1, r3
   10fc2:	0010      	movs	r0, r2
   10fc4:	4b3e      	ldr	r3, [pc, #248]	; (110c0 <nm_spi_init+0x114>)
   10fc6:	4798      	blx	r3
   10fc8:	1e03      	subs	r3, r0, #0
   10fca:	d129      	bne.n	11020 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   10fcc:	4b3a      	ldr	r3, [pc, #232]	; (110b8 <nm_spi_init+0x10c>)
   10fce:	2201      	movs	r2, #1
   10fd0:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   10fd2:	2398      	movs	r3, #152	; 0x98
   10fd4:	00da      	lsls	r2, r3, #3
   10fd6:	493b      	ldr	r1, [pc, #236]	; (110c4 <nm_spi_init+0x118>)
   10fd8:	4b3b      	ldr	r3, [pc, #236]	; (110c8 <nm_spi_init+0x11c>)
   10fda:	0018      	movs	r0, r3
   10fdc:	4b3b      	ldr	r3, [pc, #236]	; (110cc <nm_spi_init+0x120>)
   10fde:	4798      	blx	r3
   10fe0:	4b3b      	ldr	r3, [pc, #236]	; (110d0 <nm_spi_init+0x124>)
   10fe2:	0018      	movs	r0, r3
   10fe4:	4b39      	ldr	r3, [pc, #228]	; (110cc <nm_spi_init+0x120>)
   10fe6:	4798      	blx	r3
   10fe8:	4b3a      	ldr	r3, [pc, #232]	; (110d4 <nm_spi_init+0x128>)
   10fea:	0018      	movs	r0, r3
   10fec:	4b37      	ldr	r3, [pc, #220]	; (110cc <nm_spi_init+0x120>)
   10fee:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   10ff0:	003b      	movs	r3, r7
   10ff2:	4a32      	ldr	r2, [pc, #200]	; (110bc <nm_spi_init+0x110>)
   10ff4:	0019      	movs	r1, r3
   10ff6:	0010      	movs	r0, r2
   10ff8:	4b31      	ldr	r3, [pc, #196]	; (110c0 <nm_spi_init+0x114>)
   10ffa:	4798      	blx	r3
   10ffc:	1e03      	subs	r3, r0, #0
   10ffe:	d10f      	bne.n	11020 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   11000:	4a35      	ldr	r2, [pc, #212]	; (110d8 <nm_spi_init+0x12c>)
   11002:	4930      	ldr	r1, [pc, #192]	; (110c4 <nm_spi_init+0x118>)
   11004:	4b30      	ldr	r3, [pc, #192]	; (110c8 <nm_spi_init+0x11c>)
   11006:	0018      	movs	r0, r3
   11008:	4b30      	ldr	r3, [pc, #192]	; (110cc <nm_spi_init+0x120>)
   1100a:	4798      	blx	r3
   1100c:	4b33      	ldr	r3, [pc, #204]	; (110dc <nm_spi_init+0x130>)
   1100e:	0018      	movs	r0, r3
   11010:	4b2e      	ldr	r3, [pc, #184]	; (110cc <nm_spi_init+0x120>)
   11012:	4798      	blx	r3
   11014:	4b2f      	ldr	r3, [pc, #188]	; (110d4 <nm_spi_init+0x128>)
   11016:	0018      	movs	r0, r3
   11018:	4b2c      	ldr	r3, [pc, #176]	; (110cc <nm_spi_init+0x120>)
   1101a:	4798      	blx	r3
			return 0;
   1101c:	2300      	movs	r3, #0
   1101e:	e047      	b.n	110b0 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   11020:	4b25      	ldr	r3, [pc, #148]	; (110b8 <nm_spi_init+0x10c>)
   11022:	781b      	ldrb	r3, [r3, #0]
   11024:	2b00      	cmp	r3, #0
   11026:	d126      	bne.n	11076 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   11028:	683b      	ldr	r3, [r7, #0]
   1102a:	220c      	movs	r2, #12
   1102c:	4393      	bics	r3, r2
   1102e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   11030:	683b      	ldr	r3, [r7, #0]
   11032:	2270      	movs	r2, #112	; 0x70
   11034:	4393      	bics	r3, r2
   11036:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   11038:	683b      	ldr	r3, [r7, #0]
   1103a:	2250      	movs	r2, #80	; 0x50
   1103c:	4313      	orrs	r3, r2
   1103e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   11040:	683b      	ldr	r3, [r7, #0]
   11042:	4a1e      	ldr	r2, [pc, #120]	; (110bc <nm_spi_init+0x110>)
   11044:	0019      	movs	r1, r3
   11046:	0010      	movs	r0, r2
   11048:	4b25      	ldr	r3, [pc, #148]	; (110e0 <nm_spi_init+0x134>)
   1104a:	4798      	blx	r3
   1104c:	1e03      	subs	r3, r0, #0
   1104e:	d10f      	bne.n	11070 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   11050:	4a24      	ldr	r2, [pc, #144]	; (110e4 <nm_spi_init+0x138>)
   11052:	491c      	ldr	r1, [pc, #112]	; (110c4 <nm_spi_init+0x118>)
   11054:	4b1c      	ldr	r3, [pc, #112]	; (110c8 <nm_spi_init+0x11c>)
   11056:	0018      	movs	r0, r3
   11058:	4b1c      	ldr	r3, [pc, #112]	; (110cc <nm_spi_init+0x120>)
   1105a:	4798      	blx	r3
   1105c:	4b22      	ldr	r3, [pc, #136]	; (110e8 <nm_spi_init+0x13c>)
   1105e:	0018      	movs	r0, r3
   11060:	4b1a      	ldr	r3, [pc, #104]	; (110cc <nm_spi_init+0x120>)
   11062:	4798      	blx	r3
   11064:	4b1b      	ldr	r3, [pc, #108]	; (110d4 <nm_spi_init+0x128>)
   11066:	0018      	movs	r0, r3
   11068:	4b18      	ldr	r3, [pc, #96]	; (110cc <nm_spi_init+0x120>)
   1106a:	4798      	blx	r3
			return 0;
   1106c:	2300      	movs	r3, #0
   1106e:	e01f      	b.n	110b0 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   11070:	4b11      	ldr	r3, [pc, #68]	; (110b8 <nm_spi_init+0x10c>)
   11072:	2201      	movs	r2, #1
   11074:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   11076:	1d3a      	adds	r2, r7, #4
   11078:	2380      	movs	r3, #128	; 0x80
   1107a:	015b      	lsls	r3, r3, #5
   1107c:	0011      	movs	r1, r2
   1107e:	0018      	movs	r0, r3
   11080:	4b0f      	ldr	r3, [pc, #60]	; (110c0 <nm_spi_init+0x114>)
   11082:	4798      	blx	r3
   11084:	1e03      	subs	r3, r0, #0
   11086:	d110      	bne.n	110aa <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   11088:	4a18      	ldr	r2, [pc, #96]	; (110ec <nm_spi_init+0x140>)
   1108a:	490e      	ldr	r1, [pc, #56]	; (110c4 <nm_spi_init+0x118>)
   1108c:	4b0e      	ldr	r3, [pc, #56]	; (110c8 <nm_spi_init+0x11c>)
   1108e:	0018      	movs	r0, r3
   11090:	4b0e      	ldr	r3, [pc, #56]	; (110cc <nm_spi_init+0x120>)
   11092:	4798      	blx	r3
   11094:	4b16      	ldr	r3, [pc, #88]	; (110f0 <nm_spi_init+0x144>)
   11096:	0018      	movs	r0, r3
   11098:	4b0c      	ldr	r3, [pc, #48]	; (110cc <nm_spi_init+0x120>)
   1109a:	4798      	blx	r3
   1109c:	4b0d      	ldr	r3, [pc, #52]	; (110d4 <nm_spi_init+0x128>)
   1109e:	0018      	movs	r0, r3
   110a0:	4b0a      	ldr	r3, [pc, #40]	; (110cc <nm_spi_init+0x120>)
   110a2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   110a4:	2306      	movs	r3, #6
   110a6:	425b      	negs	r3, r3
   110a8:	e002      	b.n	110b0 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   110aa:	4b12      	ldr	r3, [pc, #72]	; (110f4 <nm_spi_init+0x148>)
   110ac:	4798      	blx	r3


	return M2M_SUCCESS;
   110ae:	2300      	movs	r3, #0
}
   110b0:	0018      	movs	r0, r3
   110b2:	46bd      	mov	sp, r7
   110b4:	b002      	add	sp, #8
   110b6:	bd80      	pop	{r7, pc}
   110b8:	20004128 	.word	0x20004128
   110bc:	0000e824 	.word	0x0000e824
   110c0:	00010ca5 	.word	0x00010ca5
   110c4:	00026380 	.word	0x00026380
   110c8:	00025d0c 	.word	0x00025d0c
   110cc:	0000a3cd 	.word	0x0000a3cd
   110d0:	000261a8 	.word	0x000261a8
   110d4:	00025d4c 	.word	0x00025d4c
   110d8:	000004c3 	.word	0x000004c3
   110dc:	000261f8 	.word	0x000261f8
   110e0:	000109ad 	.word	0x000109ad
   110e4:	000004cd 	.word	0x000004cd
   110e8:	00026228 	.word	0x00026228
   110ec:	000004d7 	.word	0x000004d7
   110f0:	0002625c 	.word	0x0002625c
   110f4:	00010f39 	.word	0x00010f39

000110f8 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   110f8:	b580      	push	{r7, lr}
   110fa:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   110fc:	4b03      	ldr	r3, [pc, #12]	; (1110c <nm_spi_deinit+0x14>)
   110fe:	2200      	movs	r2, #0
   11100:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   11102:	2300      	movs	r3, #0
}
   11104:	0018      	movs	r0, r3
   11106:	46bd      	mov	sp, r7
   11108:	bd80      	pop	{r7, pc}
   1110a:	46c0      	nop			; (mov r8, r8)
   1110c:	20004128 	.word	0x20004128

00011110 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   11110:	b580      	push	{r7, lr}
   11112:	b084      	sub	sp, #16
   11114:	af00      	add	r7, sp, #0
   11116:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   11118:	230c      	movs	r3, #12
   1111a:	18fa      	adds	r2, r7, r3
   1111c:	687b      	ldr	r3, [r7, #4]
   1111e:	0011      	movs	r1, r2
   11120:	0018      	movs	r0, r3
   11122:	4b03      	ldr	r3, [pc, #12]	; (11130 <nm_spi_read_reg+0x20>)
   11124:	4798      	blx	r3

	return u32Val;
   11126:	68fb      	ldr	r3, [r7, #12]
}
   11128:	0018      	movs	r0, r3
   1112a:	46bd      	mov	sp, r7
   1112c:	b004      	add	sp, #16
   1112e:	bd80      	pop	{r7, pc}
   11130:	00010ca5 	.word	0x00010ca5

00011134 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   11134:	b590      	push	{r4, r7, lr}
   11136:	b085      	sub	sp, #20
   11138:	af00      	add	r7, sp, #0
   1113a:	6078      	str	r0, [r7, #4]
   1113c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   1113e:	230f      	movs	r3, #15
   11140:	18fc      	adds	r4, r7, r3
   11142:	683a      	ldr	r2, [r7, #0]
   11144:	687b      	ldr	r3, [r7, #4]
   11146:	0011      	movs	r1, r2
   11148:	0018      	movs	r0, r3
   1114a:	4b0d      	ldr	r3, [pc, #52]	; (11180 <nm_spi_read_reg_with_ret+0x4c>)
   1114c:	4798      	blx	r3
   1114e:	0003      	movs	r3, r0
   11150:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   11152:	230f      	movs	r3, #15
   11154:	18fb      	adds	r3, r7, r3
   11156:	781b      	ldrb	r3, [r3, #0]
   11158:	b25b      	sxtb	r3, r3
   1115a:	2b01      	cmp	r3, #1
   1115c:	d104      	bne.n	11168 <nm_spi_read_reg_with_ret+0x34>
   1115e:	230f      	movs	r3, #15
   11160:	18fb      	adds	r3, r7, r3
   11162:	2200      	movs	r2, #0
   11164:	701a      	strb	r2, [r3, #0]
   11166:	e003      	b.n	11170 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   11168:	230f      	movs	r3, #15
   1116a:	18fb      	adds	r3, r7, r3
   1116c:	22fa      	movs	r2, #250	; 0xfa
   1116e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   11170:	230f      	movs	r3, #15
   11172:	18fb      	adds	r3, r7, r3
   11174:	781b      	ldrb	r3, [r3, #0]
   11176:	b25b      	sxtb	r3, r3
}
   11178:	0018      	movs	r0, r3
   1117a:	46bd      	mov	sp, r7
   1117c:	b005      	add	sp, #20
   1117e:	bd90      	pop	{r4, r7, pc}
   11180:	00010ca5 	.word	0x00010ca5

00011184 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   11184:	b590      	push	{r4, r7, lr}
   11186:	b085      	sub	sp, #20
   11188:	af00      	add	r7, sp, #0
   1118a:	6078      	str	r0, [r7, #4]
   1118c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   1118e:	230f      	movs	r3, #15
   11190:	18fc      	adds	r4, r7, r3
   11192:	683a      	ldr	r2, [r7, #0]
   11194:	687b      	ldr	r3, [r7, #4]
   11196:	0011      	movs	r1, r2
   11198:	0018      	movs	r0, r3
   1119a:	4b0d      	ldr	r3, [pc, #52]	; (111d0 <nm_spi_write_reg+0x4c>)
   1119c:	4798      	blx	r3
   1119e:	0003      	movs	r3, r0
   111a0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   111a2:	230f      	movs	r3, #15
   111a4:	18fb      	adds	r3, r7, r3
   111a6:	781b      	ldrb	r3, [r3, #0]
   111a8:	b25b      	sxtb	r3, r3
   111aa:	2b01      	cmp	r3, #1
   111ac:	d104      	bne.n	111b8 <nm_spi_write_reg+0x34>
   111ae:	230f      	movs	r3, #15
   111b0:	18fb      	adds	r3, r7, r3
   111b2:	2200      	movs	r2, #0
   111b4:	701a      	strb	r2, [r3, #0]
   111b6:	e003      	b.n	111c0 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   111b8:	230f      	movs	r3, #15
   111ba:	18fb      	adds	r3, r7, r3
   111bc:	22fa      	movs	r2, #250	; 0xfa
   111be:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   111c0:	230f      	movs	r3, #15
   111c2:	18fb      	adds	r3, r7, r3
   111c4:	781b      	ldrb	r3, [r3, #0]
   111c6:	b25b      	sxtb	r3, r3
}
   111c8:	0018      	movs	r0, r3
   111ca:	46bd      	mov	sp, r7
   111cc:	b005      	add	sp, #20
   111ce:	bd90      	pop	{r4, r7, pc}
   111d0:	000109ad 	.word	0x000109ad

000111d4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   111d4:	b590      	push	{r4, r7, lr}
   111d6:	b087      	sub	sp, #28
   111d8:	af00      	add	r7, sp, #0
   111da:	60f8      	str	r0, [r7, #12]
   111dc:	60b9      	str	r1, [r7, #8]
   111de:	1dbb      	adds	r3, r7, #6
   111e0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   111e2:	2317      	movs	r3, #23
   111e4:	18fc      	adds	r4, r7, r3
   111e6:	1dbb      	adds	r3, r7, #6
   111e8:	881a      	ldrh	r2, [r3, #0]
   111ea:	68b9      	ldr	r1, [r7, #8]
   111ec:	68fb      	ldr	r3, [r7, #12]
   111ee:	0018      	movs	r0, r3
   111f0:	4b0d      	ldr	r3, [pc, #52]	; (11228 <nm_spi_read_block+0x54>)
   111f2:	4798      	blx	r3
   111f4:	0003      	movs	r3, r0
   111f6:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   111f8:	2317      	movs	r3, #23
   111fa:	18fb      	adds	r3, r7, r3
   111fc:	781b      	ldrb	r3, [r3, #0]
   111fe:	b25b      	sxtb	r3, r3
   11200:	2b01      	cmp	r3, #1
   11202:	d104      	bne.n	1120e <nm_spi_read_block+0x3a>
   11204:	2317      	movs	r3, #23
   11206:	18fb      	adds	r3, r7, r3
   11208:	2200      	movs	r2, #0
   1120a:	701a      	strb	r2, [r3, #0]
   1120c:	e003      	b.n	11216 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   1120e:	2317      	movs	r3, #23
   11210:	18fb      	adds	r3, r7, r3
   11212:	22fa      	movs	r2, #250	; 0xfa
   11214:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   11216:	2317      	movs	r3, #23
   11218:	18fb      	adds	r3, r7, r3
   1121a:	781b      	ldrb	r3, [r3, #0]
   1121c:	b25b      	sxtb	r3, r3
}
   1121e:	0018      	movs	r0, r3
   11220:	46bd      	mov	sp, r7
   11222:	b007      	add	sp, #28
   11224:	bd90      	pop	{r4, r7, pc}
   11226:	46c0      	nop			; (mov r8, r8)
   11228:	00010e1d 	.word	0x00010e1d

0001122c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   1122c:	b590      	push	{r4, r7, lr}
   1122e:	b087      	sub	sp, #28
   11230:	af00      	add	r7, sp, #0
   11232:	60f8      	str	r0, [r7, #12]
   11234:	60b9      	str	r1, [r7, #8]
   11236:	1dbb      	adds	r3, r7, #6
   11238:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   1123a:	2317      	movs	r3, #23
   1123c:	18fc      	adds	r4, r7, r3
   1123e:	1dbb      	adds	r3, r7, #6
   11240:	881a      	ldrh	r2, [r3, #0]
   11242:	68b9      	ldr	r1, [r7, #8]
   11244:	68fb      	ldr	r3, [r7, #12]
   11246:	0018      	movs	r0, r3
   11248:	4b0d      	ldr	r3, [pc, #52]	; (11280 <nm_spi_write_block+0x54>)
   1124a:	4798      	blx	r3
   1124c:	0003      	movs	r3, r0
   1124e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   11250:	2317      	movs	r3, #23
   11252:	18fb      	adds	r3, r7, r3
   11254:	781b      	ldrb	r3, [r3, #0]
   11256:	b25b      	sxtb	r3, r3
   11258:	2b01      	cmp	r3, #1
   1125a:	d104      	bne.n	11266 <nm_spi_write_block+0x3a>
   1125c:	2317      	movs	r3, #23
   1125e:	18fb      	adds	r3, r7, r3
   11260:	2200      	movs	r2, #0
   11262:	701a      	strb	r2, [r3, #0]
   11264:	e003      	b.n	1126e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   11266:	2317      	movs	r3, #23
   11268:	18fb      	adds	r3, r7, r3
   1126a:	22fa      	movs	r2, #250	; 0xfa
   1126c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   1126e:	2317      	movs	r3, #23
   11270:	18fb      	adds	r3, r7, r3
   11272:	781b      	ldrb	r3, [r3, #0]
   11274:	b25b      	sxtb	r3, r3
}
   11276:	0018      	movs	r0, r3
   11278:	46bd      	mov	sp, r7
   1127a:	b007      	add	sp, #28
   1127c:	bd90      	pop	{r4, r7, pc}
   1127e:	46c0      	nop			; (mov r8, r8)
   11280:	00010af9 	.word	0x00010af9

00011284 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   11284:	b590      	push	{r4, r7, lr}
   11286:	b089      	sub	sp, #36	; 0x24
   11288:	af00      	add	r7, sp, #0
   1128a:	60b9      	str	r1, [r7, #8]
   1128c:	0011      	movs	r1, r2
   1128e:	607b      	str	r3, [r7, #4]
   11290:	230f      	movs	r3, #15
   11292:	18fb      	adds	r3, r7, r3
   11294:	1c02      	adds	r2, r0, #0
   11296:	701a      	strb	r2, [r3, #0]
   11298:	230e      	movs	r3, #14
   1129a:	18fb      	adds	r3, r7, r3
   1129c:	1c0a      	adds	r2, r1, #0
   1129e:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   112a0:	2330      	movs	r3, #48	; 0x30
   112a2:	18fb      	adds	r3, r7, r3
   112a4:	881b      	ldrh	r3, [r3, #0]
   112a6:	2b00      	cmp	r3, #0
   112a8:	d100      	bne.n	112ac <Socket_ReadSocketData+0x28>
   112aa:	e0d7      	b.n	1145c <Socket_ReadSocketData+0x1d8>
   112ac:	230f      	movs	r3, #15
   112ae:	18fb      	adds	r3, r7, r3
   112b0:	2200      	movs	r2, #0
   112b2:	569a      	ldrsb	r2, [r3, r2]
   112b4:	4b6b      	ldr	r3, [pc, #428]	; (11464 <Socket_ReadSocketData+0x1e0>)
   112b6:	0112      	lsls	r2, r2, #4
   112b8:	58d3      	ldr	r3, [r2, r3]
   112ba:	2b00      	cmp	r3, #0
   112bc:	d100      	bne.n	112c0 <Socket_ReadSocketData+0x3c>
   112be:	e0cd      	b.n	1145c <Socket_ReadSocketData+0x1d8>
   112c0:	230f      	movs	r3, #15
   112c2:	18fb      	adds	r3, r7, r3
   112c4:	781b      	ldrb	r3, [r3, #0]
   112c6:	b25b      	sxtb	r3, r3
   112c8:	4a66      	ldr	r2, [pc, #408]	; (11464 <Socket_ReadSocketData+0x1e0>)
   112ca:	011b      	lsls	r3, r3, #4
   112cc:	18d3      	adds	r3, r2, r3
   112ce:	3304      	adds	r3, #4
   112d0:	881b      	ldrh	r3, [r3, #0]
   112d2:	b29b      	uxth	r3, r3
   112d4:	2b00      	cmp	r3, #0
   112d6:	d100      	bne.n	112da <Socket_ReadSocketData+0x56>
   112d8:	e0c0      	b.n	1145c <Socket_ReadSocketData+0x1d8>
   112da:	230f      	movs	r3, #15
   112dc:	18fb      	adds	r3, r7, r3
   112de:	781b      	ldrb	r3, [r3, #0]
   112e0:	b25b      	sxtb	r3, r3
   112e2:	4a60      	ldr	r2, [pc, #384]	; (11464 <Socket_ReadSocketData+0x1e0>)
   112e4:	011b      	lsls	r3, r3, #4
   112e6:	18d3      	adds	r3, r2, r3
   112e8:	330a      	adds	r3, #10
   112ea:	781b      	ldrb	r3, [r3, #0]
   112ec:	b2db      	uxtb	r3, r3
   112ee:	2b01      	cmp	r3, #1
   112f0:	d000      	beq.n	112f4 <Socket_ReadSocketData+0x70>
   112f2:	e0b3      	b.n	1145c <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   112f4:	687b      	ldr	r3, [r7, #4]
   112f6:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   112f8:	68bb      	ldr	r3, [r7, #8]
   112fa:	2230      	movs	r2, #48	; 0x30
   112fc:	18ba      	adds	r2, r7, r2
   112fe:	8812      	ldrh	r2, [r2, #0]
   11300:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   11302:	2319      	movs	r3, #25
   11304:	18fb      	adds	r3, r7, r3
   11306:	2201      	movs	r2, #1
   11308:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   1130a:	231a      	movs	r3, #26
   1130c:	18fb      	adds	r3, r7, r3
   1130e:	2230      	movs	r2, #48	; 0x30
   11310:	18ba      	adds	r2, r7, r2
   11312:	8812      	ldrh	r2, [r2, #0]
   11314:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   11316:	230f      	movs	r3, #15
   11318:	18fb      	adds	r3, r7, r3
   1131a:	781b      	ldrb	r3, [r3, #0]
   1131c:	b25b      	sxtb	r3, r3
   1131e:	4a51      	ldr	r2, [pc, #324]	; (11464 <Socket_ReadSocketData+0x1e0>)
   11320:	011b      	lsls	r3, r3, #4
   11322:	18d3      	adds	r3, r2, r3
   11324:	3304      	adds	r3, #4
   11326:	881b      	ldrh	r3, [r3, #0]
   11328:	b29b      	uxth	r3, r3
   1132a:	221a      	movs	r2, #26
   1132c:	18ba      	adds	r2, r7, r2
   1132e:	8812      	ldrh	r2, [r2, #0]
   11330:	1ad3      	subs	r3, r2, r3
   11332:	b29a      	uxth	r2, r3
   11334:	2316      	movs	r3, #22
   11336:	18fb      	adds	r3, r7, r3
   11338:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   1133a:	2316      	movs	r3, #22
   1133c:	18fb      	adds	r3, r7, r3
   1133e:	2200      	movs	r2, #0
   11340:	5e9b      	ldrsh	r3, [r3, r2]
   11342:	2b00      	cmp	r3, #0
   11344:	dd0f      	ble.n	11366 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   11346:	2319      	movs	r3, #25
   11348:	18fb      	adds	r3, r7, r3
   1134a:	2200      	movs	r2, #0
   1134c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   1134e:	230f      	movs	r3, #15
   11350:	18fb      	adds	r3, r7, r3
   11352:	2200      	movs	r2, #0
   11354:	569a      	ldrsb	r2, [r3, r2]
   11356:	231a      	movs	r3, #26
   11358:	18fb      	adds	r3, r7, r3
   1135a:	4942      	ldr	r1, [pc, #264]	; (11464 <Socket_ReadSocketData+0x1e0>)
   1135c:	0112      	lsls	r2, r2, #4
   1135e:	188a      	adds	r2, r1, r2
   11360:	3204      	adds	r2, #4
   11362:	8812      	ldrh	r2, [r2, #0]
   11364:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   11366:	230f      	movs	r3, #15
   11368:	18fb      	adds	r3, r7, r3
   1136a:	2200      	movs	r2, #0
   1136c:	569a      	ldrsb	r2, [r3, r2]
   1136e:	4b3d      	ldr	r3, [pc, #244]	; (11464 <Socket_ReadSocketData+0x1e0>)
   11370:	0112      	lsls	r2, r2, #4
   11372:	58d1      	ldr	r1, [r2, r3]
   11374:	2319      	movs	r3, #25
   11376:	18fb      	adds	r3, r7, r3
   11378:	781c      	ldrb	r4, [r3, #0]
   1137a:	231a      	movs	r3, #26
   1137c:	18fb      	adds	r3, r7, r3
   1137e:	881a      	ldrh	r2, [r3, #0]
   11380:	69f8      	ldr	r0, [r7, #28]
   11382:	0023      	movs	r3, r4
   11384:	4c38      	ldr	r4, [pc, #224]	; (11468 <Socket_ReadSocketData+0x1e4>)
   11386:	47a0      	blx	r4
   11388:	1e03      	subs	r3, r0, #0
   1138a:	d14f      	bne.n	1142c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   1138c:	230f      	movs	r3, #15
   1138e:	18fb      	adds	r3, r7, r3
   11390:	2200      	movs	r2, #0
   11392:	569a      	ldrsb	r2, [r3, r2]
   11394:	4b33      	ldr	r3, [pc, #204]	; (11464 <Socket_ReadSocketData+0x1e0>)
   11396:	0112      	lsls	r2, r2, #4
   11398:	58d2      	ldr	r2, [r2, r3]
   1139a:	68bb      	ldr	r3, [r7, #8]
   1139c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   1139e:	231a      	movs	r3, #26
   113a0:	18fb      	adds	r3, r7, r3
   113a2:	2200      	movs	r2, #0
   113a4:	5e9a      	ldrsh	r2, [r3, r2]
   113a6:	68bb      	ldr	r3, [r7, #8]
   113a8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   113aa:	68bb      	ldr	r3, [r7, #8]
   113ac:	88da      	ldrh	r2, [r3, #6]
   113ae:	231a      	movs	r3, #26
   113b0:	18fb      	adds	r3, r7, r3
   113b2:	881b      	ldrh	r3, [r3, #0]
   113b4:	1ad3      	subs	r3, r2, r3
   113b6:	b29a      	uxth	r2, r3
   113b8:	68bb      	ldr	r3, [r7, #8]
   113ba:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   113bc:	4b2b      	ldr	r3, [pc, #172]	; (1146c <Socket_ReadSocketData+0x1e8>)
   113be:	681b      	ldr	r3, [r3, #0]
   113c0:	2b00      	cmp	r3, #0
   113c2:	d00b      	beq.n	113dc <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   113c4:	4b29      	ldr	r3, [pc, #164]	; (1146c <Socket_ReadSocketData+0x1e8>)
   113c6:	681b      	ldr	r3, [r3, #0]
   113c8:	68bc      	ldr	r4, [r7, #8]
   113ca:	220e      	movs	r2, #14
   113cc:	18ba      	adds	r2, r7, r2
   113ce:	7811      	ldrb	r1, [r2, #0]
   113d0:	220f      	movs	r2, #15
   113d2:	18ba      	adds	r2, r7, r2
   113d4:	2000      	movs	r0, #0
   113d6:	5610      	ldrsb	r0, [r2, r0]
   113d8:	0022      	movs	r2, r4
   113da:	4798      	blx	r3

				u16ReadCount -= u16Read;
   113dc:	2330      	movs	r3, #48	; 0x30
   113de:	18f9      	adds	r1, r7, r3
   113e0:	2330      	movs	r3, #48	; 0x30
   113e2:	18fa      	adds	r2, r7, r3
   113e4:	231a      	movs	r3, #26
   113e6:	18fb      	adds	r3, r7, r3
   113e8:	8812      	ldrh	r2, [r2, #0]
   113ea:	881b      	ldrh	r3, [r3, #0]
   113ec:	1ad3      	subs	r3, r2, r3
   113ee:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   113f0:	231a      	movs	r3, #26
   113f2:	18fb      	adds	r3, r7, r3
   113f4:	881b      	ldrh	r3, [r3, #0]
   113f6:	69fa      	ldr	r2, [r7, #28]
   113f8:	18d3      	adds	r3, r2, r3
   113fa:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   113fc:	230f      	movs	r3, #15
   113fe:	18fb      	adds	r3, r7, r3
   11400:	781b      	ldrb	r3, [r3, #0]
   11402:	b25b      	sxtb	r3, r3
   11404:	4a17      	ldr	r2, [pc, #92]	; (11464 <Socket_ReadSocketData+0x1e0>)
   11406:	011b      	lsls	r3, r3, #4
   11408:	18d3      	adds	r3, r2, r3
   1140a:	330a      	adds	r3, #10
   1140c:	781b      	ldrb	r3, [r3, #0]
   1140e:	b2db      	uxtb	r3, r3
   11410:	2b00      	cmp	r3, #0
   11412:	d11c      	bne.n	1144e <Socket_ReadSocketData+0x1ca>
   11414:	2330      	movs	r3, #48	; 0x30
   11416:	18fb      	adds	r3, r7, r3
   11418:	881b      	ldrh	r3, [r3, #0]
   1141a:	2b00      	cmp	r3, #0
   1141c:	d017      	beq.n	1144e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   1141e:	2301      	movs	r3, #1
   11420:	2200      	movs	r2, #0
   11422:	2100      	movs	r1, #0
   11424:	2000      	movs	r0, #0
   11426:	4c10      	ldr	r4, [pc, #64]	; (11468 <Socket_ReadSocketData+0x1e4>)
   11428:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   1142a:	e017      	b.n	1145c <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   1142c:	4b10      	ldr	r3, [pc, #64]	; (11470 <Socket_ReadSocketData+0x1ec>)
   1142e:	0018      	movs	r0, r3
   11430:	4b10      	ldr	r3, [pc, #64]	; (11474 <Socket_ReadSocketData+0x1f0>)
   11432:	4798      	blx	r3
   11434:	2330      	movs	r3, #48	; 0x30
   11436:	18fb      	adds	r3, r7, r3
   11438:	881a      	ldrh	r2, [r3, #0]
   1143a:	4b0f      	ldr	r3, [pc, #60]	; (11478 <Socket_ReadSocketData+0x1f4>)
   1143c:	0011      	movs	r1, r2
   1143e:	0018      	movs	r0, r3
   11440:	4b0c      	ldr	r3, [pc, #48]	; (11474 <Socket_ReadSocketData+0x1f0>)
   11442:	4798      	blx	r3
   11444:	4b0d      	ldr	r3, [pc, #52]	; (1147c <Socket_ReadSocketData+0x1f8>)
   11446:	0018      	movs	r0, r3
   11448:	4b0a      	ldr	r3, [pc, #40]	; (11474 <Socket_ReadSocketData+0x1f0>)
   1144a:	4798      	blx	r3
				break;
   1144c:	e006      	b.n	1145c <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   1144e:	2330      	movs	r3, #48	; 0x30
   11450:	18fb      	adds	r3, r7, r3
   11452:	881b      	ldrh	r3, [r3, #0]
   11454:	2b00      	cmp	r3, #0
   11456:	d000      	beq.n	1145a <Socket_ReadSocketData+0x1d6>
   11458:	e753      	b.n	11302 <Socket_ReadSocketData+0x7e>
	}
}
   1145a:	e7ff      	b.n	1145c <Socket_ReadSocketData+0x1d8>
   1145c:	46c0      	nop			; (mov r8, r8)
   1145e:	46bd      	mov	sp, r7
   11460:	b009      	add	sp, #36	; 0x24
   11462:	bd90      	pop	{r4, r7, pc}
   11464:	20005908 	.word	0x20005908
   11468:	0000dc7d 	.word	0x0000dc7d
   1146c:	200059b8 	.word	0x200059b8
   11470:	0002638c 	.word	0x0002638c
   11474:	0000a3cd 	.word	0x0000a3cd
   11478:	00026398 	.word	0x00026398
   1147c:	000263ac 	.word	0x000263ac

00011480 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   11480:	b590      	push	{r4, r7, lr}
   11482:	b0bb      	sub	sp, #236	; 0xec
   11484:	af02      	add	r7, sp, #8
   11486:	603a      	str	r2, [r7, #0]
   11488:	1dfb      	adds	r3, r7, #7
   1148a:	1c02      	adds	r2, r0, #0
   1148c:	701a      	strb	r2, [r3, #0]
   1148e:	1d3b      	adds	r3, r7, #4
   11490:	1c0a      	adds	r2, r1, #0
   11492:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   11494:	1dfb      	adds	r3, r7, #7
   11496:	781b      	ldrb	r3, [r3, #0]
   11498:	2b41      	cmp	r3, #65	; 0x41
   1149a:	d003      	beq.n	114a4 <m2m_ip_cb+0x24>
   1149c:	1dfb      	adds	r3, r7, #7
   1149e:	781b      	ldrb	r3, [r3, #0]
   114a0:	2b54      	cmp	r3, #84	; 0x54
   114a2:	d120      	bne.n	114e6 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   114a4:	23cc      	movs	r3, #204	; 0xcc
   114a6:	18f9      	adds	r1, r7, r3
   114a8:	6838      	ldr	r0, [r7, #0]
   114aa:	2300      	movs	r3, #0
   114ac:	2204      	movs	r2, #4
   114ae:	4c98      	ldr	r4, [pc, #608]	; (11710 <m2m_ip_cb+0x290>)
   114b0:	47a0      	blx	r4
   114b2:	1e03      	subs	r3, r0, #0
   114b4:	d000      	beq.n	114b8 <m2m_ip_cb+0x38>
   114b6:	e275      	b.n	119a4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   114b8:	23cc      	movs	r3, #204	; 0xcc
   114ba:	18fb      	adds	r3, r7, r3
   114bc:	2201      	movs	r2, #1
   114be:	569a      	ldrsb	r2, [r3, r2]
   114c0:	23c8      	movs	r3, #200	; 0xc8
   114c2:	18fb      	adds	r3, r7, r3
   114c4:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   114c6:	4b93      	ldr	r3, [pc, #588]	; (11714 <m2m_ip_cb+0x294>)
   114c8:	681b      	ldr	r3, [r3, #0]
   114ca:	2b00      	cmp	r3, #0
   114cc:	d100      	bne.n	114d0 <m2m_ip_cb+0x50>
   114ce:	e269      	b.n	119a4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   114d0:	4b90      	ldr	r3, [pc, #576]	; (11714 <m2m_ip_cb+0x294>)
   114d2:	681b      	ldr	r3, [r3, #0]
   114d4:	22cc      	movs	r2, #204	; 0xcc
   114d6:	18ba      	adds	r2, r7, r2
   114d8:	2000      	movs	r0, #0
   114da:	5610      	ldrsb	r0, [r2, r0]
   114dc:	22c8      	movs	r2, #200	; 0xc8
   114de:	18ba      	adds	r2, r7, r2
   114e0:	2101      	movs	r1, #1
   114e2:	4798      	blx	r3
	{
   114e4:	e25e      	b.n	119a4 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   114e6:	1dfb      	adds	r3, r7, #7
   114e8:	781b      	ldrb	r3, [r3, #0]
   114ea:	2b42      	cmp	r3, #66	; 0x42
   114ec:	d120      	bne.n	11530 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   114ee:	23c4      	movs	r3, #196	; 0xc4
   114f0:	18f9      	adds	r1, r7, r3
   114f2:	6838      	ldr	r0, [r7, #0]
   114f4:	2300      	movs	r3, #0
   114f6:	2204      	movs	r2, #4
   114f8:	4c85      	ldr	r4, [pc, #532]	; (11710 <m2m_ip_cb+0x290>)
   114fa:	47a0      	blx	r4
   114fc:	1e03      	subs	r3, r0, #0
   114fe:	d000      	beq.n	11502 <m2m_ip_cb+0x82>
   11500:	e257      	b.n	119b2 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   11502:	23c4      	movs	r3, #196	; 0xc4
   11504:	18fb      	adds	r3, r7, r3
   11506:	2201      	movs	r2, #1
   11508:	569a      	ldrsb	r2, [r3, r2]
   1150a:	23c0      	movs	r3, #192	; 0xc0
   1150c:	18fb      	adds	r3, r7, r3
   1150e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   11510:	4b80      	ldr	r3, [pc, #512]	; (11714 <m2m_ip_cb+0x294>)
   11512:	681b      	ldr	r3, [r3, #0]
   11514:	2b00      	cmp	r3, #0
   11516:	d100      	bne.n	1151a <m2m_ip_cb+0x9a>
   11518:	e24b      	b.n	119b2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   1151a:	4b7e      	ldr	r3, [pc, #504]	; (11714 <m2m_ip_cb+0x294>)
   1151c:	681b      	ldr	r3, [r3, #0]
   1151e:	22c4      	movs	r2, #196	; 0xc4
   11520:	18ba      	adds	r2, r7, r2
   11522:	2000      	movs	r0, #0
   11524:	5610      	ldrsb	r0, [r2, r0]
   11526:	22c0      	movs	r2, #192	; 0xc0
   11528:	18ba      	adds	r2, r7, r2
   1152a:	2102      	movs	r1, #2
   1152c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   1152e:	e240      	b.n	119b2 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   11530:	1dfb      	adds	r3, r7, #7
   11532:	781b      	ldrb	r3, [r3, #0]
   11534:	2b43      	cmp	r3, #67	; 0x43
   11536:	d000      	beq.n	1153a <m2m_ip_cb+0xba>
   11538:	e086      	b.n	11648 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   1153a:	23b4      	movs	r3, #180	; 0xb4
   1153c:	18f9      	adds	r1, r7, r3
   1153e:	6838      	ldr	r0, [r7, #0]
   11540:	2300      	movs	r3, #0
   11542:	220c      	movs	r2, #12
   11544:	4c72      	ldr	r4, [pc, #456]	; (11710 <m2m_ip_cb+0x290>)
   11546:	47a0      	blx	r4
   11548:	1e03      	subs	r3, r0, #0
   1154a:	d000      	beq.n	1154e <m2m_ip_cb+0xce>
   1154c:	e231      	b.n	119b2 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   1154e:	23b4      	movs	r3, #180	; 0xb4
   11550:	18fb      	adds	r3, r7, r3
   11552:	7a5b      	ldrb	r3, [r3, #9]
   11554:	b25b      	sxtb	r3, r3
   11556:	2b00      	cmp	r3, #0
   11558:	db4f      	blt.n	115fa <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   1155a:	23b4      	movs	r3, #180	; 0xb4
   1155c:	18fb      	adds	r3, r7, r3
   1155e:	7a5b      	ldrb	r3, [r3, #9]
   11560:	b25b      	sxtb	r3, r3
   11562:	0018      	movs	r0, r3
   11564:	23b4      	movs	r3, #180	; 0xb4
   11566:	18fb      	adds	r3, r7, r3
   11568:	7a1b      	ldrb	r3, [r3, #8]
   1156a:	b25b      	sxtb	r3, r3
   1156c:	4a6a      	ldr	r2, [pc, #424]	; (11718 <m2m_ip_cb+0x298>)
   1156e:	011b      	lsls	r3, r3, #4
   11570:	18d3      	adds	r3, r2, r3
   11572:	330b      	adds	r3, #11
   11574:	781b      	ldrb	r3, [r3, #0]
   11576:	b2d9      	uxtb	r1, r3
   11578:	4a67      	ldr	r2, [pc, #412]	; (11718 <m2m_ip_cb+0x298>)
   1157a:	0103      	lsls	r3, r0, #4
   1157c:	18d3      	adds	r3, r2, r3
   1157e:	330b      	adds	r3, #11
   11580:	1c0a      	adds	r2, r1, #0
   11582:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   11584:	23b4      	movs	r3, #180	; 0xb4
   11586:	18fb      	adds	r3, r7, r3
   11588:	7a5b      	ldrb	r3, [r3, #9]
   1158a:	b25b      	sxtb	r3, r3
   1158c:	4a62      	ldr	r2, [pc, #392]	; (11718 <m2m_ip_cb+0x298>)
   1158e:	011b      	lsls	r3, r3, #4
   11590:	18d3      	adds	r3, r2, r3
   11592:	330a      	adds	r3, #10
   11594:	2201      	movs	r2, #1
   11596:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   11598:	23b4      	movs	r3, #180	; 0xb4
   1159a:	18fb      	adds	r3, r7, r3
   1159c:	7a5b      	ldrb	r3, [r3, #9]
   1159e:	b25b      	sxtb	r3, r3
   115a0:	0018      	movs	r0, r3
   115a2:	23b4      	movs	r3, #180	; 0xb4
   115a4:	18fb      	adds	r3, r7, r3
   115a6:	895b      	ldrh	r3, [r3, #10]
   115a8:	3b08      	subs	r3, #8
   115aa:	b299      	uxth	r1, r3
   115ac:	4a5a      	ldr	r2, [pc, #360]	; (11718 <m2m_ip_cb+0x298>)
   115ae:	0103      	lsls	r3, r0, #4
   115b0:	18d3      	adds	r3, r2, r3
   115b2:	3308      	adds	r3, #8
   115b4:	1c0a      	adds	r2, r1, #0
   115b6:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   115b8:	4b58      	ldr	r3, [pc, #352]	; (1171c <m2m_ip_cb+0x29c>)
   115ba:	881b      	ldrh	r3, [r3, #0]
   115bc:	b29b      	uxth	r3, r3
   115be:	3301      	adds	r3, #1
   115c0:	b29a      	uxth	r2, r3
   115c2:	4b56      	ldr	r3, [pc, #344]	; (1171c <m2m_ip_cb+0x29c>)
   115c4:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   115c6:	4b55      	ldr	r3, [pc, #340]	; (1171c <m2m_ip_cb+0x29c>)
   115c8:	881b      	ldrh	r3, [r3, #0]
   115ca:	b29b      	uxth	r3, r3
   115cc:	2b00      	cmp	r3, #0
   115ce:	d106      	bne.n	115de <m2m_ip_cb+0x15e>
					++gu16SessionID;
   115d0:	4b52      	ldr	r3, [pc, #328]	; (1171c <m2m_ip_cb+0x29c>)
   115d2:	881b      	ldrh	r3, [r3, #0]
   115d4:	b29b      	uxth	r3, r3
   115d6:	3301      	adds	r3, #1
   115d8:	b29a      	uxth	r2, r3
   115da:	4b50      	ldr	r3, [pc, #320]	; (1171c <m2m_ip_cb+0x29c>)
   115dc:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   115de:	23b4      	movs	r3, #180	; 0xb4
   115e0:	18fb      	adds	r3, r7, r3
   115e2:	7a5b      	ldrb	r3, [r3, #9]
   115e4:	b25b      	sxtb	r3, r3
   115e6:	0018      	movs	r0, r3
   115e8:	4b4c      	ldr	r3, [pc, #304]	; (1171c <m2m_ip_cb+0x29c>)
   115ea:	881b      	ldrh	r3, [r3, #0]
   115ec:	b299      	uxth	r1, r3
   115ee:	4a4a      	ldr	r2, [pc, #296]	; (11718 <m2m_ip_cb+0x298>)
   115f0:	0103      	lsls	r3, r0, #4
   115f2:	18d3      	adds	r3, r2, r3
   115f4:	3306      	adds	r3, #6
   115f6:	1c0a      	adds	r2, r1, #0
   115f8:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   115fa:	23b4      	movs	r3, #180	; 0xb4
   115fc:	18fb      	adds	r3, r7, r3
   115fe:	2209      	movs	r2, #9
   11600:	569a      	ldrsb	r2, [r3, r2]
   11602:	23a0      	movs	r3, #160	; 0xa0
   11604:	18fb      	adds	r3, r7, r3
   11606:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   11608:	23a0      	movs	r3, #160	; 0xa0
   1160a:	18fb      	adds	r3, r7, r3
   1160c:	2202      	movs	r2, #2
   1160e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   11610:	23b4      	movs	r3, #180	; 0xb4
   11612:	18fb      	adds	r3, r7, r3
   11614:	885a      	ldrh	r2, [r3, #2]
   11616:	23a0      	movs	r3, #160	; 0xa0
   11618:	18fb      	adds	r3, r7, r3
   1161a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   1161c:	23b4      	movs	r3, #180	; 0xb4
   1161e:	18fb      	adds	r3, r7, r3
   11620:	685a      	ldr	r2, [r3, #4]
   11622:	23a0      	movs	r3, #160	; 0xa0
   11624:	18fb      	adds	r3, r7, r3
   11626:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   11628:	4b3a      	ldr	r3, [pc, #232]	; (11714 <m2m_ip_cb+0x294>)
   1162a:	681b      	ldr	r3, [r3, #0]
   1162c:	2b00      	cmp	r3, #0
   1162e:	d100      	bne.n	11632 <m2m_ip_cb+0x1b2>
   11630:	e1bf      	b.n	119b2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   11632:	4b38      	ldr	r3, [pc, #224]	; (11714 <m2m_ip_cb+0x294>)
   11634:	681b      	ldr	r3, [r3, #0]
   11636:	22b4      	movs	r2, #180	; 0xb4
   11638:	18ba      	adds	r2, r7, r2
   1163a:	2008      	movs	r0, #8
   1163c:	5610      	ldrsb	r0, [r2, r0]
   1163e:	22a0      	movs	r2, #160	; 0xa0
   11640:	18ba      	adds	r2, r7, r2
   11642:	2104      	movs	r1, #4
   11644:	4798      	blx	r3
}
   11646:	e1b4      	b.n	119b2 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   11648:	1dfb      	adds	r3, r7, #7
   1164a:	781b      	ldrb	r3, [r3, #0]
   1164c:	2b44      	cmp	r3, #68	; 0x44
   1164e:	d003      	beq.n	11658 <m2m_ip_cb+0x1d8>
   11650:	1dfb      	adds	r3, r7, #7
   11652:	781b      	ldrb	r3, [r3, #0]
   11654:	2b4b      	cmp	r3, #75	; 0x4b
   11656:	d13d      	bne.n	116d4 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   11658:	239c      	movs	r3, #156	; 0x9c
   1165a:	18f9      	adds	r1, r7, r3
   1165c:	6838      	ldr	r0, [r7, #0]
   1165e:	2300      	movs	r3, #0
   11660:	2204      	movs	r2, #4
   11662:	4c2b      	ldr	r4, [pc, #172]	; (11710 <m2m_ip_cb+0x290>)
   11664:	47a0      	blx	r4
   11666:	1e03      	subs	r3, r0, #0
   11668:	d000      	beq.n	1166c <m2m_ip_cb+0x1ec>
   1166a:	e19d      	b.n	119a8 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   1166c:	239c      	movs	r3, #156	; 0x9c
   1166e:	18fb      	adds	r3, r7, r3
   11670:	2200      	movs	r2, #0
   11672:	569a      	ldrsb	r2, [r3, r2]
   11674:	2398      	movs	r3, #152	; 0x98
   11676:	18fb      	adds	r3, r7, r3
   11678:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   1167a:	239c      	movs	r3, #156	; 0x9c
   1167c:	18fb      	adds	r3, r7, r3
   1167e:	2201      	movs	r2, #1
   11680:	569a      	ldrsb	r2, [r3, r2]
   11682:	2398      	movs	r3, #152	; 0x98
   11684:	18fb      	adds	r3, r7, r3
   11686:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   11688:	239c      	movs	r3, #156	; 0x9c
   1168a:	18fb      	adds	r3, r7, r3
   1168c:	785b      	ldrb	r3, [r3, #1]
   1168e:	b25b      	sxtb	r3, r3
   11690:	2b00      	cmp	r3, #0
   11692:	d10f      	bne.n	116b4 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   11694:	239c      	movs	r3, #156	; 0x9c
   11696:	18fb      	adds	r3, r7, r3
   11698:	781b      	ldrb	r3, [r3, #0]
   1169a:	b25b      	sxtb	r3, r3
   1169c:	0018      	movs	r0, r3
   1169e:	239c      	movs	r3, #156	; 0x9c
   116a0:	18fb      	adds	r3, r7, r3
   116a2:	885b      	ldrh	r3, [r3, #2]
   116a4:	3b08      	subs	r3, #8
   116a6:	b299      	uxth	r1, r3
   116a8:	4a1b      	ldr	r2, [pc, #108]	; (11718 <m2m_ip_cb+0x298>)
   116aa:	0103      	lsls	r3, r0, #4
   116ac:	18d3      	adds	r3, r2, r3
   116ae:	3308      	adds	r3, #8
   116b0:	1c0a      	adds	r2, r1, #0
   116b2:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   116b4:	4b17      	ldr	r3, [pc, #92]	; (11714 <m2m_ip_cb+0x294>)
   116b6:	681b      	ldr	r3, [r3, #0]
   116b8:	2b00      	cmp	r3, #0
   116ba:	d100      	bne.n	116be <m2m_ip_cb+0x23e>
   116bc:	e174      	b.n	119a8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   116be:	4b15      	ldr	r3, [pc, #84]	; (11714 <m2m_ip_cb+0x294>)
   116c0:	681b      	ldr	r3, [r3, #0]
   116c2:	229c      	movs	r2, #156	; 0x9c
   116c4:	18ba      	adds	r2, r7, r2
   116c6:	2000      	movs	r0, #0
   116c8:	5610      	ldrsb	r0, [r2, r0]
   116ca:	2298      	movs	r2, #152	; 0x98
   116cc:	18ba      	adds	r2, r7, r2
   116ce:	2105      	movs	r1, #5
   116d0:	4798      	blx	r3
	{
   116d2:	e169      	b.n	119a8 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   116d4:	1dfb      	adds	r3, r7, #7
   116d6:	781b      	ldrb	r3, [r3, #0]
   116d8:	2b4a      	cmp	r3, #74	; 0x4a
   116da:	d123      	bne.n	11724 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   116dc:	230c      	movs	r3, #12
   116de:	18f9      	adds	r1, r7, r3
   116e0:	6838      	ldr	r0, [r7, #0]
   116e2:	2300      	movs	r3, #0
   116e4:	2244      	movs	r2, #68	; 0x44
   116e6:	4c0a      	ldr	r4, [pc, #40]	; (11710 <m2m_ip_cb+0x290>)
   116e8:	47a0      	blx	r4
   116ea:	1e03      	subs	r3, r0, #0
   116ec:	d000      	beq.n	116f0 <m2m_ip_cb+0x270>
   116ee:	e160      	b.n	119b2 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   116f0:	4b0b      	ldr	r3, [pc, #44]	; (11720 <m2m_ip_cb+0x2a0>)
   116f2:	681b      	ldr	r3, [r3, #0]
   116f4:	2b00      	cmp	r3, #0
   116f6:	d100      	bne.n	116fa <m2m_ip_cb+0x27a>
   116f8:	e15b      	b.n	119b2 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   116fa:	4b09      	ldr	r3, [pc, #36]	; (11720 <m2m_ip_cb+0x2a0>)
   116fc:	681a      	ldr	r2, [r3, #0]
   116fe:	230c      	movs	r3, #12
   11700:	18fb      	adds	r3, r7, r3
   11702:	6c19      	ldr	r1, [r3, #64]	; 0x40
   11704:	230c      	movs	r3, #12
   11706:	18fb      	adds	r3, r7, r3
   11708:	0018      	movs	r0, r3
   1170a:	4790      	blx	r2
}
   1170c:	e151      	b.n	119b2 <m2m_ip_cb+0x532>
   1170e:	46c0      	nop			; (mov r8, r8)
   11710:	0000dc7d 	.word	0x0000dc7d
   11714:	200059b8 	.word	0x200059b8
   11718:	20005908 	.word	0x20005908
   1171c:	2000412a 	.word	0x2000412a
   11720:	200059c0 	.word	0x200059c0
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   11724:	1dfb      	adds	r3, r7, #7
   11726:	781b      	ldrb	r3, [r3, #0]
   11728:	2b46      	cmp	r3, #70	; 0x46
   1172a:	d008      	beq.n	1173e <m2m_ip_cb+0x2be>
   1172c:	1dfb      	adds	r3, r7, #7
   1172e:	781b      	ldrb	r3, [r3, #0]
   11730:	2b48      	cmp	r3, #72	; 0x48
   11732:	d004      	beq.n	1173e <m2m_ip_cb+0x2be>
   11734:	1dfb      	adds	r3, r7, #7
   11736:	781b      	ldrb	r3, [r3, #0]
   11738:	2b4d      	cmp	r3, #77	; 0x4d
   1173a:	d000      	beq.n	1173e <m2m_ip_cb+0x2be>
   1173c:	e0b4      	b.n	118a8 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   1173e:	23df      	movs	r3, #223	; 0xdf
   11740:	18fb      	adds	r3, r7, r3
   11742:	2206      	movs	r2, #6
   11744:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   11746:	1dfb      	adds	r3, r7, #7
   11748:	781b      	ldrb	r3, [r3, #0]
   1174a:	2b48      	cmp	r3, #72	; 0x48
   1174c:	d103      	bne.n	11756 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   1174e:	23df      	movs	r3, #223	; 0xdf
   11750:	18fb      	adds	r3, r7, r3
   11752:	2209      	movs	r2, #9
   11754:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   11756:	23d8      	movs	r3, #216	; 0xd8
   11758:	18fb      	adds	r3, r7, r3
   1175a:	2210      	movs	r2, #16
   1175c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   1175e:	23d8      	movs	r3, #216	; 0xd8
   11760:	18fb      	adds	r3, r7, r3
   11762:	881a      	ldrh	r2, [r3, #0]
   11764:	2388      	movs	r3, #136	; 0x88
   11766:	18f9      	adds	r1, r7, r3
   11768:	6838      	ldr	r0, [r7, #0]
   1176a:	2300      	movs	r3, #0
   1176c:	4c93      	ldr	r4, [pc, #588]	; (119bc <m2m_ip_cb+0x53c>)
   1176e:	47a0      	blx	r4
   11770:	1e03      	subs	r3, r0, #0
   11772:	d000      	beq.n	11776 <m2m_ip_cb+0x2f6>
   11774:	e11a      	b.n	119ac <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   11776:	23d6      	movs	r3, #214	; 0xd6
   11778:	18fb      	adds	r3, r7, r3
   1177a:	2200      	movs	r2, #0
   1177c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   1177e:	23d5      	movs	r3, #213	; 0xd5
   11780:	18fb      	adds	r3, r7, r3
   11782:	2288      	movs	r2, #136	; 0x88
   11784:	18ba      	adds	r2, r7, r2
   11786:	7b12      	ldrb	r2, [r2, #12]
   11788:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   1178a:	23d6      	movs	r3, #214	; 0xd6
   1178c:	18fb      	adds	r3, r7, r3
   1178e:	2288      	movs	r2, #136	; 0x88
   11790:	18ba      	adds	r2, r7, r2
   11792:	89d2      	ldrh	r2, [r2, #14]
   11794:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   11796:	23d5      	movs	r3, #213	; 0xd5
   11798:	18fb      	adds	r3, r7, r3
   1179a:	781b      	ldrb	r3, [r3, #0]
   1179c:	b25b      	sxtb	r3, r3
   1179e:	4a88      	ldr	r2, [pc, #544]	; (119c0 <m2m_ip_cb+0x540>)
   117a0:	011b      	lsls	r3, r3, #4
   117a2:	18d3      	adds	r3, r2, r3
   117a4:	330c      	adds	r3, #12
   117a6:	2200      	movs	r2, #0
   117a8:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   117aa:	23d2      	movs	r3, #210	; 0xd2
   117ac:	18fb      	adds	r3, r7, r3
   117ae:	2288      	movs	r2, #136	; 0x88
   117b0:	18ba      	adds	r2, r7, r2
   117b2:	8912      	ldrh	r2, [r2, #8]
   117b4:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   117b6:	23d0      	movs	r3, #208	; 0xd0
   117b8:	18fb      	adds	r3, r7, r3
   117ba:	2288      	movs	r2, #136	; 0x88
   117bc:	18ba      	adds	r2, r7, r2
   117be:	8952      	ldrh	r2, [r2, #10]
   117c0:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   117c2:	2388      	movs	r3, #136	; 0x88
   117c4:	18fb      	adds	r3, r7, r3
   117c6:	885a      	ldrh	r2, [r3, #2]
   117c8:	2370      	movs	r3, #112	; 0x70
   117ca:	18fb      	adds	r3, r7, r3
   117cc:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   117ce:	2388      	movs	r3, #136	; 0x88
   117d0:	18fb      	adds	r3, r7, r3
   117d2:	685a      	ldr	r2, [r3, #4]
   117d4:	2370      	movs	r3, #112	; 0x70
   117d6:	18fb      	adds	r3, r7, r3
   117d8:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   117da:	23d5      	movs	r3, #213	; 0xd5
   117dc:	18fb      	adds	r3, r7, r3
   117de:	781b      	ldrb	r3, [r3, #0]
   117e0:	b25b      	sxtb	r3, r3
   117e2:	4a77      	ldr	r2, [pc, #476]	; (119c0 <m2m_ip_cb+0x540>)
   117e4:	011b      	lsls	r3, r3, #4
   117e6:	18d3      	adds	r3, r2, r3
   117e8:	3306      	adds	r3, #6
   117ea:	881b      	ldrh	r3, [r3, #0]
   117ec:	b29b      	uxth	r3, r3
   117ee:	22d6      	movs	r2, #214	; 0xd6
   117f0:	18ba      	adds	r2, r7, r2
   117f2:	8812      	ldrh	r2, [r2, #0]
   117f4:	429a      	cmp	r2, r3
   117f6:	d148      	bne.n	1188a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   117f8:	23d2      	movs	r3, #210	; 0xd2
   117fa:	18fb      	adds	r3, r7, r3
   117fc:	2200      	movs	r2, #0
   117fe:	5e9b      	ldrsh	r3, [r3, r2]
   11800:	2b00      	cmp	r3, #0
   11802:	dd25      	ble.n	11850 <m2m_ip_cb+0x3d0>
   11804:	23d2      	movs	r3, #210	; 0xd2
   11806:	18fb      	adds	r3, r7, r3
   11808:	2200      	movs	r2, #0
   1180a:	5e9a      	ldrsh	r2, [r3, r2]
   1180c:	1d3b      	adds	r3, r7, #4
   1180e:	881b      	ldrh	r3, [r3, #0]
   11810:	429a      	cmp	r2, r3
   11812:	da1d      	bge.n	11850 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   11814:	23d0      	movs	r3, #208	; 0xd0
   11816:	18fb      	adds	r3, r7, r3
   11818:	881b      	ldrh	r3, [r3, #0]
   1181a:	683a      	ldr	r2, [r7, #0]
   1181c:	18d3      	adds	r3, r2, r3
   1181e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   11820:	23d8      	movs	r3, #216	; 0xd8
   11822:	18fb      	adds	r3, r7, r3
   11824:	22d2      	movs	r2, #210	; 0xd2
   11826:	18ba      	adds	r2, r7, r2
   11828:	8812      	ldrh	r2, [r2, #0]
   1182a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   1182c:	683c      	ldr	r4, [r7, #0]
   1182e:	23df      	movs	r3, #223	; 0xdf
   11830:	18fb      	adds	r3, r7, r3
   11832:	781a      	ldrb	r2, [r3, #0]
   11834:	2370      	movs	r3, #112	; 0x70
   11836:	18f9      	adds	r1, r7, r3
   11838:	23d5      	movs	r3, #213	; 0xd5
   1183a:	18fb      	adds	r3, r7, r3
   1183c:	2000      	movs	r0, #0
   1183e:	5618      	ldrsb	r0, [r3, r0]
   11840:	23d8      	movs	r3, #216	; 0xd8
   11842:	18fb      	adds	r3, r7, r3
   11844:	881b      	ldrh	r3, [r3, #0]
   11846:	9300      	str	r3, [sp, #0]
   11848:	0023      	movs	r3, r4
   1184a:	4c5e      	ldr	r4, [pc, #376]	; (119c4 <m2m_ip_cb+0x544>)
   1184c:	47a0      	blx	r4
	{
   1184e:	e0ad      	b.n	119ac <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   11850:	2370      	movs	r3, #112	; 0x70
   11852:	18fb      	adds	r3, r7, r3
   11854:	22d2      	movs	r2, #210	; 0xd2
   11856:	18ba      	adds	r2, r7, r2
   11858:	8812      	ldrh	r2, [r2, #0]
   1185a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   1185c:	2370      	movs	r3, #112	; 0x70
   1185e:	18fb      	adds	r3, r7, r3
   11860:	2200      	movs	r2, #0
   11862:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   11864:	4b58      	ldr	r3, [pc, #352]	; (119c8 <m2m_ip_cb+0x548>)
   11866:	681b      	ldr	r3, [r3, #0]
   11868:	2b00      	cmp	r3, #0
   1186a:	d100      	bne.n	1186e <m2m_ip_cb+0x3ee>
   1186c:	e09e      	b.n	119ac <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   1186e:	4b56      	ldr	r3, [pc, #344]	; (119c8 <m2m_ip_cb+0x548>)
   11870:	681b      	ldr	r3, [r3, #0]
   11872:	2270      	movs	r2, #112	; 0x70
   11874:	18bc      	adds	r4, r7, r2
   11876:	22df      	movs	r2, #223	; 0xdf
   11878:	18ba      	adds	r2, r7, r2
   1187a:	7811      	ldrb	r1, [r2, #0]
   1187c:	22d5      	movs	r2, #213	; 0xd5
   1187e:	18ba      	adds	r2, r7, r2
   11880:	2000      	movs	r0, #0
   11882:	5610      	ldrsb	r0, [r2, r0]
   11884:	0022      	movs	r2, r4
   11886:	4798      	blx	r3
	{
   11888:	e090      	b.n	119ac <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   1188a:	23d8      	movs	r3, #216	; 0xd8
   1188c:	18fa      	adds	r2, r7, r3
   1188e:	1d3b      	adds	r3, r7, #4
   11890:	8812      	ldrh	r2, [r2, #0]
   11892:	881b      	ldrh	r3, [r3, #0]
   11894:	429a      	cmp	r2, r3
   11896:	d300      	bcc.n	1189a <m2m_ip_cb+0x41a>
   11898:	e088      	b.n	119ac <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   1189a:	2301      	movs	r3, #1
   1189c:	2200      	movs	r2, #0
   1189e:	2100      	movs	r1, #0
   118a0:	2000      	movs	r0, #0
   118a2:	4c46      	ldr	r4, [pc, #280]	; (119bc <m2m_ip_cb+0x53c>)
   118a4:	47a0      	blx	r4
	{
   118a6:	e081      	b.n	119ac <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   118a8:	1dfb      	adds	r3, r7, #7
   118aa:	781b      	ldrb	r3, [r3, #0]
   118ac:	2b45      	cmp	r3, #69	; 0x45
   118ae:	d007      	beq.n	118c0 <m2m_ip_cb+0x440>
   118b0:	1dfb      	adds	r3, r7, #7
   118b2:	781b      	ldrb	r3, [r3, #0]
   118b4:	2b47      	cmp	r3, #71	; 0x47
   118b6:	d003      	beq.n	118c0 <m2m_ip_cb+0x440>
   118b8:	1dfb      	adds	r3, r7, #7
   118ba:	781b      	ldrb	r3, [r3, #0]
   118bc:	2b4c      	cmp	r3, #76	; 0x4c
   118be:	d14c      	bne.n	1195a <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   118c0:	23de      	movs	r3, #222	; 0xde
   118c2:	18fb      	adds	r3, r7, r3
   118c4:	2207      	movs	r2, #7
   118c6:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   118c8:	1dfb      	adds	r3, r7, #7
   118ca:	781b      	ldrb	r3, [r3, #0]
   118cc:	2b47      	cmp	r3, #71	; 0x47
   118ce:	d103      	bne.n	118d8 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   118d0:	23de      	movs	r3, #222	; 0xde
   118d2:	18fb      	adds	r3, r7, r3
   118d4:	2208      	movs	r2, #8
   118d6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   118d8:	2364      	movs	r3, #100	; 0x64
   118da:	18f9      	adds	r1, r7, r3
   118dc:	6838      	ldr	r0, [r7, #0]
   118de:	2300      	movs	r3, #0
   118e0:	2208      	movs	r2, #8
   118e2:	4c36      	ldr	r4, [pc, #216]	; (119bc <m2m_ip_cb+0x53c>)
   118e4:	47a0      	blx	r4
   118e6:	1e03      	subs	r3, r0, #0
   118e8:	d162      	bne.n	119b0 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   118ea:	23dc      	movs	r3, #220	; 0xdc
   118ec:	18fb      	adds	r3, r7, r3
   118ee:	2200      	movs	r2, #0
   118f0:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   118f2:	23db      	movs	r3, #219	; 0xdb
   118f4:	18fb      	adds	r3, r7, r3
   118f6:	2264      	movs	r2, #100	; 0x64
   118f8:	18ba      	adds	r2, r7, r2
   118fa:	7812      	ldrb	r2, [r2, #0]
   118fc:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   118fe:	23dc      	movs	r3, #220	; 0xdc
   11900:	18fb      	adds	r3, r7, r3
   11902:	2264      	movs	r2, #100	; 0x64
   11904:	18ba      	adds	r2, r7, r2
   11906:	8892      	ldrh	r2, [r2, #4]
   11908:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   1190a:	2364      	movs	r3, #100	; 0x64
   1190c:	18fb      	adds	r3, r7, r3
   1190e:	2202      	movs	r2, #2
   11910:	5e9a      	ldrsh	r2, [r3, r2]
   11912:	236e      	movs	r3, #110	; 0x6e
   11914:	18fb      	adds	r3, r7, r3
   11916:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   11918:	23db      	movs	r3, #219	; 0xdb
   1191a:	18fb      	adds	r3, r7, r3
   1191c:	781b      	ldrb	r3, [r3, #0]
   1191e:	b25b      	sxtb	r3, r3
   11920:	4a27      	ldr	r2, [pc, #156]	; (119c0 <m2m_ip_cb+0x540>)
   11922:	011b      	lsls	r3, r3, #4
   11924:	18d3      	adds	r3, r2, r3
   11926:	3306      	adds	r3, #6
   11928:	881b      	ldrh	r3, [r3, #0]
   1192a:	b29b      	uxth	r3, r3
   1192c:	22dc      	movs	r2, #220	; 0xdc
   1192e:	18ba      	adds	r2, r7, r2
   11930:	8812      	ldrh	r2, [r2, #0]
   11932:	429a      	cmp	r2, r3
   11934:	d13c      	bne.n	119b0 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   11936:	4b24      	ldr	r3, [pc, #144]	; (119c8 <m2m_ip_cb+0x548>)
   11938:	681b      	ldr	r3, [r3, #0]
   1193a:	2b00      	cmp	r3, #0
   1193c:	d038      	beq.n	119b0 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   1193e:	4b22      	ldr	r3, [pc, #136]	; (119c8 <m2m_ip_cb+0x548>)
   11940:	681b      	ldr	r3, [r3, #0]
   11942:	226e      	movs	r2, #110	; 0x6e
   11944:	18bc      	adds	r4, r7, r2
   11946:	22de      	movs	r2, #222	; 0xde
   11948:	18ba      	adds	r2, r7, r2
   1194a:	7811      	ldrb	r1, [r2, #0]
   1194c:	22db      	movs	r2, #219	; 0xdb
   1194e:	18ba      	adds	r2, r7, r2
   11950:	2000      	movs	r0, #0
   11952:	5610      	ldrsb	r0, [r2, r0]
   11954:	0022      	movs	r2, r4
   11956:	4798      	blx	r3
	{
   11958:	e02a      	b.n	119b0 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   1195a:	1dfb      	adds	r3, r7, #7
   1195c:	781b      	ldrb	r3, [r3, #0]
   1195e:	2b52      	cmp	r3, #82	; 0x52
   11960:	d127      	bne.n	119b2 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   11962:	2350      	movs	r3, #80	; 0x50
   11964:	18f9      	adds	r1, r7, r3
   11966:	6838      	ldr	r0, [r7, #0]
   11968:	2301      	movs	r3, #1
   1196a:	2214      	movs	r2, #20
   1196c:	4c13      	ldr	r4, [pc, #76]	; (119bc <m2m_ip_cb+0x53c>)
   1196e:	47a0      	blx	r4
   11970:	1e03      	subs	r3, r0, #0
   11972:	d11e      	bne.n	119b2 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   11974:	2350      	movs	r3, #80	; 0x50
   11976:	18fb      	adds	r3, r7, r3
   11978:	685b      	ldr	r3, [r3, #4]
   1197a:	001a      	movs	r2, r3
   1197c:	4b13      	ldr	r3, [pc, #76]	; (119cc <m2m_ip_cb+0x54c>)
   1197e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   11980:	4b12      	ldr	r3, [pc, #72]	; (119cc <m2m_ip_cb+0x54c>)
   11982:	681b      	ldr	r3, [r3, #0]
   11984:	2b00      	cmp	r3, #0
   11986:	d014      	beq.n	119b2 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   11988:	4b10      	ldr	r3, [pc, #64]	; (119cc <m2m_ip_cb+0x54c>)
   1198a:	681c      	ldr	r4, [r3, #0]
   1198c:	2350      	movs	r3, #80	; 0x50
   1198e:	18fb      	adds	r3, r7, r3
   11990:	6818      	ldr	r0, [r3, #0]
   11992:	2350      	movs	r3, #80	; 0x50
   11994:	18fb      	adds	r3, r7, r3
   11996:	6899      	ldr	r1, [r3, #8]
   11998:	2350      	movs	r3, #80	; 0x50
   1199a:	18fb      	adds	r3, r7, r3
   1199c:	7c1b      	ldrb	r3, [r3, #16]
   1199e:	001a      	movs	r2, r3
   119a0:	47a0      	blx	r4
}
   119a2:	e006      	b.n	119b2 <m2m_ip_cb+0x532>
	{
   119a4:	46c0      	nop			; (mov r8, r8)
   119a6:	e004      	b.n	119b2 <m2m_ip_cb+0x532>
	{
   119a8:	46c0      	nop			; (mov r8, r8)
   119aa:	e002      	b.n	119b2 <m2m_ip_cb+0x532>
	{
   119ac:	46c0      	nop			; (mov r8, r8)
   119ae:	e000      	b.n	119b2 <m2m_ip_cb+0x532>
	{
   119b0:	46c0      	nop			; (mov r8, r8)
}
   119b2:	46c0      	nop			; (mov r8, r8)
   119b4:	46bd      	mov	sp, r7
   119b6:	b039      	add	sp, #228	; 0xe4
   119b8:	bd90      	pop	{r4, r7, pc}
   119ba:	46c0      	nop			; (mov r8, r8)
   119bc:	0000dc7d 	.word	0x0000dc7d
   119c0:	20005908 	.word	0x20005908
   119c4:	00011285 	.word	0x00011285
   119c8:	200059b8 	.word	0x200059b8
   119cc:	200059bc 	.word	0x200059bc

000119d0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   119d0:	b580      	push	{r7, lr}
   119d2:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   119d4:	4b0c      	ldr	r3, [pc, #48]	; (11a08 <socketInit+0x38>)
   119d6:	781b      	ldrb	r3, [r3, #0]
   119d8:	b2db      	uxtb	r3, r3
   119da:	2b00      	cmp	r3, #0
   119dc:	d110      	bne.n	11a00 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   119de:	4b0b      	ldr	r3, [pc, #44]	; (11a0c <socketInit+0x3c>)
   119e0:	22b0      	movs	r2, #176	; 0xb0
   119e2:	2100      	movs	r1, #0
   119e4:	0018      	movs	r0, r3
   119e6:	4b0a      	ldr	r3, [pc, #40]	; (11a10 <socketInit+0x40>)
   119e8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   119ea:	4b0a      	ldr	r3, [pc, #40]	; (11a14 <socketInit+0x44>)
   119ec:	0019      	movs	r1, r3
   119ee:	2002      	movs	r0, #2
   119f0:	4b09      	ldr	r3, [pc, #36]	; (11a18 <socketInit+0x48>)
   119f2:	4798      	blx	r3
		gbSocketInit	= 1;
   119f4:	4b04      	ldr	r3, [pc, #16]	; (11a08 <socketInit+0x38>)
   119f6:	2201      	movs	r2, #1
   119f8:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   119fa:	4b08      	ldr	r3, [pc, #32]	; (11a1c <socketInit+0x4c>)
   119fc:	2200      	movs	r2, #0
   119fe:	801a      	strh	r2, [r3, #0]
	}
}
   11a00:	46c0      	nop			; (mov r8, r8)
   11a02:	46bd      	mov	sp, r7
   11a04:	bd80      	pop	{r7, pc}
   11a06:	46c0      	nop			; (mov r8, r8)
   11a08:	2000412c 	.word	0x2000412c
   11a0c:	20005908 	.word	0x20005908
   11a10:	0000d101 	.word	0x0000d101
   11a14:	00011481 	.word	0x00011481
   11a18:	0000ddfd 	.word	0x0000ddfd
   11a1c:	2000412a 	.word	0x2000412a

00011a20 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   11a20:	b580      	push	{r7, lr}
   11a22:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   11a24:	4b0a      	ldr	r3, [pc, #40]	; (11a50 <socketDeinit+0x30>)
   11a26:	22b0      	movs	r2, #176	; 0xb0
   11a28:	2100      	movs	r1, #0
   11a2a:	0018      	movs	r0, r3
   11a2c:	4b09      	ldr	r3, [pc, #36]	; (11a54 <socketDeinit+0x34>)
   11a2e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   11a30:	2100      	movs	r1, #0
   11a32:	2002      	movs	r0, #2
   11a34:	4b08      	ldr	r3, [pc, #32]	; (11a58 <socketDeinit+0x38>)
   11a36:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   11a38:	4b08      	ldr	r3, [pc, #32]	; (11a5c <socketDeinit+0x3c>)
   11a3a:	2200      	movs	r2, #0
   11a3c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   11a3e:	4b08      	ldr	r3, [pc, #32]	; (11a60 <socketDeinit+0x40>)
   11a40:	2200      	movs	r2, #0
   11a42:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   11a44:	4b07      	ldr	r3, [pc, #28]	; (11a64 <socketDeinit+0x44>)
   11a46:	2200      	movs	r2, #0
   11a48:	701a      	strb	r2, [r3, #0]
}
   11a4a:	46c0      	nop			; (mov r8, r8)
   11a4c:	46bd      	mov	sp, r7
   11a4e:	bd80      	pop	{r7, pc}
   11a50:	20005908 	.word	0x20005908
   11a54:	0000d101 	.word	0x0000d101
   11a58:	0000ddfd 	.word	0x0000ddfd
   11a5c:	200059b8 	.word	0x200059b8
   11a60:	200059c0 	.word	0x200059c0
   11a64:	2000412c 	.word	0x2000412c

00011a68 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   11a68:	b580      	push	{r7, lr}
   11a6a:	b082      	sub	sp, #8
   11a6c:	af00      	add	r7, sp, #0
   11a6e:	6078      	str	r0, [r7, #4]
   11a70:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   11a72:	4b05      	ldr	r3, [pc, #20]	; (11a88 <registerSocketCallback+0x20>)
   11a74:	687a      	ldr	r2, [r7, #4]
   11a76:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   11a78:	4b04      	ldr	r3, [pc, #16]	; (11a8c <registerSocketCallback+0x24>)
   11a7a:	683a      	ldr	r2, [r7, #0]
   11a7c:	601a      	str	r2, [r3, #0]
}
   11a7e:	46c0      	nop			; (mov r8, r8)
   11a80:	46bd      	mov	sp, r7
   11a82:	b002      	add	sp, #8
   11a84:	bd80      	pop	{r7, pc}
   11a86:	46c0      	nop			; (mov r8, r8)
   11a88:	200059b8 	.word	0x200059b8
   11a8c:	200059c0 	.word	0x200059c0

00011a90 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   11a90:	b590      	push	{r4, r7, lr}
   11a92:	b08d      	sub	sp, #52	; 0x34
   11a94:	af04      	add	r7, sp, #16
   11a96:	0004      	movs	r4, r0
   11a98:	0008      	movs	r0, r1
   11a9a:	0011      	movs	r1, r2
   11a9c:	1dbb      	adds	r3, r7, #6
   11a9e:	1c22      	adds	r2, r4, #0
   11aa0:	801a      	strh	r2, [r3, #0]
   11aa2:	1d7b      	adds	r3, r7, #5
   11aa4:	1c02      	adds	r2, r0, #0
   11aa6:	701a      	strb	r2, [r3, #0]
   11aa8:	1d3b      	adds	r3, r7, #4
   11aaa:	1c0a      	adds	r2, r1, #0
   11aac:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   11aae:	231f      	movs	r3, #31
   11ab0:	18fb      	adds	r3, r7, r3
   11ab2:	22ff      	movs	r2, #255	; 0xff
   11ab4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   11ab6:	1dbb      	adds	r3, r7, #6
   11ab8:	881b      	ldrh	r3, [r3, #0]
   11aba:	2b02      	cmp	r3, #2
   11abc:	d000      	beq.n	11ac0 <socket+0x30>
   11abe:	e0ce      	b.n	11c5e <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   11ac0:	1d7b      	adds	r3, r7, #5
   11ac2:	781b      	ldrb	r3, [r3, #0]
   11ac4:	2b01      	cmp	r3, #1
   11ac6:	d135      	bne.n	11b34 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   11ac8:	231e      	movs	r3, #30
   11aca:	18fb      	adds	r3, r7, r3
   11acc:	2200      	movs	r2, #0
   11ace:	701a      	strb	r2, [r3, #0]
   11ad0:	e02a      	b.n	11b28 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   11ad2:	2317      	movs	r3, #23
   11ad4:	18fb      	adds	r3, r7, r3
   11ad6:	4a66      	ldr	r2, [pc, #408]	; (11c70 <socket+0x1e0>)
   11ad8:	7812      	ldrb	r2, [r2, #0]
   11ada:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   11adc:	4b64      	ldr	r3, [pc, #400]	; (11c70 <socket+0x1e0>)
   11ade:	781b      	ldrb	r3, [r3, #0]
   11ae0:	b2db      	uxtb	r3, r3
   11ae2:	011a      	lsls	r2, r3, #4
   11ae4:	4b63      	ldr	r3, [pc, #396]	; (11c74 <socket+0x1e4>)
   11ae6:	18d3      	adds	r3, r2, r3
   11ae8:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   11aea:	4b61      	ldr	r3, [pc, #388]	; (11c70 <socket+0x1e0>)
   11aec:	781b      	ldrb	r3, [r3, #0]
   11aee:	b2db      	uxtb	r3, r3
   11af0:	1c5a      	adds	r2, r3, #1
   11af2:	4b61      	ldr	r3, [pc, #388]	; (11c78 <socket+0x1e8>)
   11af4:	2107      	movs	r1, #7
   11af6:	0010      	movs	r0, r2
   11af8:	4798      	blx	r3
   11afa:	000b      	movs	r3, r1
   11afc:	b2da      	uxtb	r2, r3
   11afe:	4b5c      	ldr	r3, [pc, #368]	; (11c70 <socket+0x1e0>)
   11b00:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   11b02:	69bb      	ldr	r3, [r7, #24]
   11b04:	7a9b      	ldrb	r3, [r3, #10]
   11b06:	b2db      	uxtb	r3, r3
   11b08:	2b00      	cmp	r3, #0
   11b0a:	d106      	bne.n	11b1a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   11b0c:	231f      	movs	r3, #31
   11b0e:	18fb      	adds	r3, r7, r3
   11b10:	2217      	movs	r2, #23
   11b12:	18ba      	adds	r2, r7, r2
   11b14:	7812      	ldrb	r2, [r2, #0]
   11b16:	701a      	strb	r2, [r3, #0]
					break;
   11b18:	e04c      	b.n	11bb4 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   11b1a:	231e      	movs	r3, #30
   11b1c:	18fb      	adds	r3, r7, r3
   11b1e:	781a      	ldrb	r2, [r3, #0]
   11b20:	231e      	movs	r3, #30
   11b22:	18fb      	adds	r3, r7, r3
   11b24:	3201      	adds	r2, #1
   11b26:	701a      	strb	r2, [r3, #0]
   11b28:	231e      	movs	r3, #30
   11b2a:	18fb      	adds	r3, r7, r3
   11b2c:	781b      	ldrb	r3, [r3, #0]
   11b2e:	2b06      	cmp	r3, #6
   11b30:	d9cf      	bls.n	11ad2 <socket+0x42>
   11b32:	e03f      	b.n	11bb4 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   11b34:	1d7b      	adds	r3, r7, #5
   11b36:	781b      	ldrb	r3, [r3, #0]
   11b38:	2b02      	cmp	r3, #2
   11b3a:	d13b      	bne.n	11bb4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   11b3c:	4b4f      	ldr	r3, [pc, #316]	; (11c7c <socket+0x1ec>)
   11b3e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   11b40:	231e      	movs	r3, #30
   11b42:	18fb      	adds	r3, r7, r3
   11b44:	2200      	movs	r2, #0
   11b46:	701a      	strb	r2, [r3, #0]
   11b48:	e02f      	b.n	11baa <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   11b4a:	2317      	movs	r3, #23
   11b4c:	18fb      	adds	r3, r7, r3
   11b4e:	4a4c      	ldr	r2, [pc, #304]	; (11c80 <socket+0x1f0>)
   11b50:	7812      	ldrb	r2, [r2, #0]
   11b52:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   11b54:	4b4a      	ldr	r3, [pc, #296]	; (11c80 <socket+0x1f0>)
   11b56:	781b      	ldrb	r3, [r3, #0]
   11b58:	b2db      	uxtb	r3, r3
   11b5a:	011b      	lsls	r3, r3, #4
   11b5c:	693a      	ldr	r2, [r7, #16]
   11b5e:	18d3      	adds	r3, r2, r3
   11b60:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   11b62:	4b47      	ldr	r3, [pc, #284]	; (11c80 <socket+0x1f0>)
   11b64:	781b      	ldrb	r3, [r3, #0]
   11b66:	b2db      	uxtb	r3, r3
   11b68:	3301      	adds	r3, #1
   11b6a:	4a46      	ldr	r2, [pc, #280]	; (11c84 <socket+0x1f4>)
   11b6c:	4013      	ands	r3, r2
   11b6e:	d504      	bpl.n	11b7a <socket+0xea>
   11b70:	3b01      	subs	r3, #1
   11b72:	2204      	movs	r2, #4
   11b74:	4252      	negs	r2, r2
   11b76:	4313      	orrs	r3, r2
   11b78:	3301      	adds	r3, #1
   11b7a:	b2da      	uxtb	r2, r3
   11b7c:	4b40      	ldr	r3, [pc, #256]	; (11c80 <socket+0x1f0>)
   11b7e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   11b80:	69bb      	ldr	r3, [r7, #24]
   11b82:	7a9b      	ldrb	r3, [r3, #10]
   11b84:	b2db      	uxtb	r3, r3
   11b86:	2b00      	cmp	r3, #0
   11b88:	d108      	bne.n	11b9c <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   11b8a:	2317      	movs	r3, #23
   11b8c:	18fb      	adds	r3, r7, r3
   11b8e:	781b      	ldrb	r3, [r3, #0]
   11b90:	3307      	adds	r3, #7
   11b92:	b2da      	uxtb	r2, r3
   11b94:	231f      	movs	r3, #31
   11b96:	18fb      	adds	r3, r7, r3
   11b98:	701a      	strb	r2, [r3, #0]
					break;
   11b9a:	e00b      	b.n	11bb4 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   11b9c:	231e      	movs	r3, #30
   11b9e:	18fb      	adds	r3, r7, r3
   11ba0:	781a      	ldrb	r2, [r3, #0]
   11ba2:	231e      	movs	r3, #30
   11ba4:	18fb      	adds	r3, r7, r3
   11ba6:	3201      	adds	r2, #1
   11ba8:	701a      	strb	r2, [r3, #0]
   11baa:	231e      	movs	r3, #30
   11bac:	18fb      	adds	r3, r7, r3
   11bae:	781b      	ldrb	r3, [r3, #0]
   11bb0:	2b03      	cmp	r3, #3
   11bb2:	d9ca      	bls.n	11b4a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   11bb4:	231f      	movs	r3, #31
   11bb6:	18fb      	adds	r3, r7, r3
   11bb8:	781b      	ldrb	r3, [r3, #0]
   11bba:	2b7f      	cmp	r3, #127	; 0x7f
   11bbc:	d84f      	bhi.n	11c5e <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   11bbe:	69bb      	ldr	r3, [r7, #24]
   11bc0:	2210      	movs	r2, #16
   11bc2:	2100      	movs	r1, #0
   11bc4:	0018      	movs	r0, r3
   11bc6:	4b30      	ldr	r3, [pc, #192]	; (11c88 <socket+0x1f8>)
   11bc8:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   11bca:	69bb      	ldr	r3, [r7, #24]
   11bcc:	2201      	movs	r2, #1
   11bce:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   11bd0:	4b2e      	ldr	r3, [pc, #184]	; (11c8c <socket+0x1fc>)
   11bd2:	881b      	ldrh	r3, [r3, #0]
   11bd4:	b29b      	uxth	r3, r3
   11bd6:	3301      	adds	r3, #1
   11bd8:	b29a      	uxth	r2, r3
   11bda:	4b2c      	ldr	r3, [pc, #176]	; (11c8c <socket+0x1fc>)
   11bdc:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   11bde:	4b2b      	ldr	r3, [pc, #172]	; (11c8c <socket+0x1fc>)
   11be0:	881b      	ldrh	r3, [r3, #0]
   11be2:	b29b      	uxth	r3, r3
   11be4:	2b00      	cmp	r3, #0
   11be6:	d106      	bne.n	11bf6 <socket+0x166>
				++gu16SessionID;
   11be8:	4b28      	ldr	r3, [pc, #160]	; (11c8c <socket+0x1fc>)
   11bea:	881b      	ldrh	r3, [r3, #0]
   11bec:	b29b      	uxth	r3, r3
   11bee:	3301      	adds	r3, #1
   11bf0:	b29a      	uxth	r2, r3
   11bf2:	4b26      	ldr	r3, [pc, #152]	; (11c8c <socket+0x1fc>)
   11bf4:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   11bf6:	4b25      	ldr	r3, [pc, #148]	; (11c8c <socket+0x1fc>)
   11bf8:	881b      	ldrh	r3, [r3, #0]
   11bfa:	b29a      	uxth	r2, r3
   11bfc:	69bb      	ldr	r3, [r7, #24]
   11bfe:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   11c00:	4b23      	ldr	r3, [pc, #140]	; (11c90 <socket+0x200>)
   11c02:	0018      	movs	r0, r3
   11c04:	4b23      	ldr	r3, [pc, #140]	; (11c94 <socket+0x204>)
   11c06:	4798      	blx	r3
   11c08:	231f      	movs	r3, #31
   11c0a:	18fb      	adds	r3, r7, r3
   11c0c:	2100      	movs	r1, #0
   11c0e:	5659      	ldrsb	r1, [r3, r1]
   11c10:	4b1e      	ldr	r3, [pc, #120]	; (11c8c <socket+0x1fc>)
   11c12:	881b      	ldrh	r3, [r3, #0]
   11c14:	b29b      	uxth	r3, r3
   11c16:	001a      	movs	r2, r3
   11c18:	4b1f      	ldr	r3, [pc, #124]	; (11c98 <socket+0x208>)
   11c1a:	0018      	movs	r0, r3
   11c1c:	4b1d      	ldr	r3, [pc, #116]	; (11c94 <socket+0x204>)
   11c1e:	4798      	blx	r3
   11c20:	4b1e      	ldr	r3, [pc, #120]	; (11c9c <socket+0x20c>)
   11c22:	0018      	movs	r0, r3
   11c24:	4b1b      	ldr	r3, [pc, #108]	; (11c94 <socket+0x204>)
   11c26:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   11c28:	1d3b      	adds	r3, r7, #4
   11c2a:	781b      	ldrb	r3, [r3, #0]
   11c2c:	2201      	movs	r2, #1
   11c2e:	4013      	ands	r3, r2
   11c30:	d015      	beq.n	11c5e <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   11c32:	230c      	movs	r3, #12
   11c34:	18fb      	adds	r3, r7, r3
   11c36:	221f      	movs	r2, #31
   11c38:	18ba      	adds	r2, r7, r2
   11c3a:	7812      	ldrb	r2, [r2, #0]
   11c3c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   11c3e:	69bb      	ldr	r3, [r7, #24]
   11c40:	2221      	movs	r2, #33	; 0x21
   11c42:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   11c44:	230c      	movs	r3, #12
   11c46:	18fa      	adds	r2, r7, r3
   11c48:	2300      	movs	r3, #0
   11c4a:	9302      	str	r3, [sp, #8]
   11c4c:	2300      	movs	r3, #0
   11c4e:	9301      	str	r3, [sp, #4]
   11c50:	2300      	movs	r3, #0
   11c52:	9300      	str	r3, [sp, #0]
   11c54:	2304      	movs	r3, #4
   11c56:	2150      	movs	r1, #80	; 0x50
   11c58:	2002      	movs	r0, #2
   11c5a:	4c11      	ldr	r4, [pc, #68]	; (11ca0 <socket+0x210>)
   11c5c:	47a0      	blx	r4
			}
		}
	}
	return sock;
   11c5e:	231f      	movs	r3, #31
   11c60:	18fb      	adds	r3, r7, r3
   11c62:	781b      	ldrb	r3, [r3, #0]
   11c64:	b25b      	sxtb	r3, r3
}
   11c66:	0018      	movs	r0, r3
   11c68:	46bd      	mov	sp, r7
   11c6a:	b009      	add	sp, #36	; 0x24
   11c6c:	bd90      	pop	{r4, r7, pc}
   11c6e:	46c0      	nop			; (mov r8, r8)
   11c70:	2000412d 	.word	0x2000412d
   11c74:	20005908 	.word	0x20005908
   11c78:	0001f3b1 	.word	0x0001f3b1
   11c7c:	20005978 	.word	0x20005978
   11c80:	2000412e 	.word	0x2000412e
   11c84:	80000003 	.word	0x80000003
   11c88:	0000d101 	.word	0x0000d101
   11c8c:	2000412a 	.word	0x2000412a
   11c90:	0002638c 	.word	0x0002638c
   11c94:	0000a3cd 	.word	0x0000a3cd
   11c98:	000263b0 	.word	0x000263b0
   11c9c:	000263ac 	.word	0x000263ac
   11ca0:	0000d361 	.word	0x0000d361

00011ca4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   11ca4:	b5b0      	push	{r4, r5, r7, lr}
   11ca6:	b08a      	sub	sp, #40	; 0x28
   11ca8:	af04      	add	r7, sp, #16
   11caa:	6039      	str	r1, [r7, #0]
   11cac:	0011      	movs	r1, r2
   11cae:	1dfb      	adds	r3, r7, #7
   11cb0:	1c02      	adds	r2, r0, #0
   11cb2:	701a      	strb	r2, [r3, #0]
   11cb4:	1dbb      	adds	r3, r7, #6
   11cb6:	1c0a      	adds	r2, r1, #0
   11cb8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   11cba:	2317      	movs	r3, #23
   11cbc:	18fb      	adds	r3, r7, r3
   11cbe:	22fa      	movs	r2, #250	; 0xfa
   11cc0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   11cc2:	1dfb      	adds	r3, r7, #7
   11cc4:	781b      	ldrb	r3, [r3, #0]
   11cc6:	2b7f      	cmp	r3, #127	; 0x7f
   11cc8:	d867      	bhi.n	11d9a <connect+0xf6>
   11cca:	683b      	ldr	r3, [r7, #0]
   11ccc:	2b00      	cmp	r3, #0
   11cce:	d064      	beq.n	11d9a <connect+0xf6>
   11cd0:	1dfb      	adds	r3, r7, #7
   11cd2:	781b      	ldrb	r3, [r3, #0]
   11cd4:	b25b      	sxtb	r3, r3
   11cd6:	4a35      	ldr	r2, [pc, #212]	; (11dac <connect+0x108>)
   11cd8:	011b      	lsls	r3, r3, #4
   11cda:	18d3      	adds	r3, r2, r3
   11cdc:	330a      	adds	r3, #10
   11cde:	781b      	ldrb	r3, [r3, #0]
   11ce0:	b2db      	uxtb	r3, r3
   11ce2:	2b01      	cmp	r3, #1
   11ce4:	d159      	bne.n	11d9a <connect+0xf6>
   11ce6:	1dbb      	adds	r3, r7, #6
   11ce8:	781b      	ldrb	r3, [r3, #0]
   11cea:	2b00      	cmp	r3, #0
   11cec:	d055      	beq.n	11d9a <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   11cee:	2316      	movs	r3, #22
   11cf0:	18fb      	adds	r3, r7, r3
   11cf2:	2244      	movs	r2, #68	; 0x44
   11cf4:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   11cf6:	1dfb      	adds	r3, r7, #7
   11cf8:	781b      	ldrb	r3, [r3, #0]
   11cfa:	b25b      	sxtb	r3, r3
   11cfc:	4a2b      	ldr	r2, [pc, #172]	; (11dac <connect+0x108>)
   11cfe:	011b      	lsls	r3, r3, #4
   11d00:	18d3      	adds	r3, r2, r3
   11d02:	330b      	adds	r3, #11
   11d04:	781b      	ldrb	r3, [r3, #0]
   11d06:	b2db      	uxtb	r3, r3
   11d08:	001a      	movs	r2, r3
   11d0a:	2301      	movs	r3, #1
   11d0c:	4013      	ands	r3, r2
   11d0e:	d00f      	beq.n	11d30 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   11d10:	2316      	movs	r3, #22
   11d12:	18fb      	adds	r3, r7, r3
   11d14:	224b      	movs	r2, #75	; 0x4b
   11d16:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   11d18:	1dfb      	adds	r3, r7, #7
   11d1a:	781b      	ldrb	r3, [r3, #0]
   11d1c:	b25b      	sxtb	r3, r3
   11d1e:	4a23      	ldr	r2, [pc, #140]	; (11dac <connect+0x108>)
   11d20:	011b      	lsls	r3, r3, #4
   11d22:	18d3      	adds	r3, r2, r3
   11d24:	330b      	adds	r3, #11
   11d26:	781b      	ldrb	r3, [r3, #0]
   11d28:	b2da      	uxtb	r2, r3
   11d2a:	2308      	movs	r3, #8
   11d2c:	18fb      	adds	r3, r7, r3
   11d2e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   11d30:	2308      	movs	r3, #8
   11d32:	18fb      	adds	r3, r7, r3
   11d34:	1dfa      	adds	r2, r7, #7
   11d36:	7812      	ldrb	r2, [r2, #0]
   11d38:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   11d3a:	6839      	ldr	r1, [r7, #0]
   11d3c:	2308      	movs	r3, #8
   11d3e:	18fb      	adds	r3, r7, r3
   11d40:	2208      	movs	r2, #8
   11d42:	0018      	movs	r0, r3
   11d44:	4b1a      	ldr	r3, [pc, #104]	; (11db0 <connect+0x10c>)
   11d46:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   11d48:	1dfb      	adds	r3, r7, #7
   11d4a:	781b      	ldrb	r3, [r3, #0]
   11d4c:	b25b      	sxtb	r3, r3
   11d4e:	4a17      	ldr	r2, [pc, #92]	; (11dac <connect+0x108>)
   11d50:	011b      	lsls	r3, r3, #4
   11d52:	18d3      	adds	r3, r2, r3
   11d54:	3306      	adds	r3, #6
   11d56:	881b      	ldrh	r3, [r3, #0]
   11d58:	b29a      	uxth	r2, r3
   11d5a:	2308      	movs	r3, #8
   11d5c:	18fb      	adds	r3, r7, r3
   11d5e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   11d60:	2317      	movs	r3, #23
   11d62:	18fc      	adds	r4, r7, r3
   11d64:	2308      	movs	r3, #8
   11d66:	18fa      	adds	r2, r7, r3
   11d68:	2316      	movs	r3, #22
   11d6a:	18fb      	adds	r3, r7, r3
   11d6c:	7819      	ldrb	r1, [r3, #0]
   11d6e:	2300      	movs	r3, #0
   11d70:	9302      	str	r3, [sp, #8]
   11d72:	2300      	movs	r3, #0
   11d74:	9301      	str	r3, [sp, #4]
   11d76:	2300      	movs	r3, #0
   11d78:	9300      	str	r3, [sp, #0]
   11d7a:	230c      	movs	r3, #12
   11d7c:	2002      	movs	r0, #2
   11d7e:	4d0d      	ldr	r5, [pc, #52]	; (11db4 <connect+0x110>)
   11d80:	47a8      	blx	r5
   11d82:	0003      	movs	r3, r0
   11d84:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   11d86:	2317      	movs	r3, #23
   11d88:	18fb      	adds	r3, r7, r3
   11d8a:	781b      	ldrb	r3, [r3, #0]
   11d8c:	b25b      	sxtb	r3, r3
   11d8e:	2b00      	cmp	r3, #0
   11d90:	d003      	beq.n	11d9a <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   11d92:	2317      	movs	r3, #23
   11d94:	18fb      	adds	r3, r7, r3
   11d96:	22f7      	movs	r2, #247	; 0xf7
   11d98:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   11d9a:	2317      	movs	r3, #23
   11d9c:	18fb      	adds	r3, r7, r3
   11d9e:	781b      	ldrb	r3, [r3, #0]
   11da0:	b25b      	sxtb	r3, r3
}
   11da2:	0018      	movs	r0, r3
   11da4:	46bd      	mov	sp, r7
   11da6:	b006      	add	sp, #24
   11da8:	bdb0      	pop	{r4, r5, r7, pc}
   11daa:	46c0      	nop			; (mov r8, r8)
   11dac:	20005908 	.word	0x20005908
   11db0:	0000d0c5 	.word	0x0000d0c5
   11db4:	0000d361 	.word	0x0000d361

00011db8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   11db8:	b590      	push	{r4, r7, lr}
   11dba:	b08f      	sub	sp, #60	; 0x3c
   11dbc:	af04      	add	r7, sp, #16
   11dbe:	0004      	movs	r4, r0
   11dc0:	60b9      	str	r1, [r7, #8]
   11dc2:	0010      	movs	r0, r2
   11dc4:	0019      	movs	r1, r3
   11dc6:	230f      	movs	r3, #15
   11dc8:	18fb      	adds	r3, r7, r3
   11dca:	1c22      	adds	r2, r4, #0
   11dcc:	701a      	strb	r2, [r3, #0]
   11dce:	230c      	movs	r3, #12
   11dd0:	18fb      	adds	r3, r7, r3
   11dd2:	1c02      	adds	r2, r0, #0
   11dd4:	801a      	strh	r2, [r3, #0]
   11dd6:	1dbb      	adds	r3, r7, #6
   11dd8:	1c0a      	adds	r2, r1, #0
   11dda:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   11ddc:	2326      	movs	r3, #38	; 0x26
   11dde:	18fb      	adds	r3, r7, r3
   11de0:	2206      	movs	r2, #6
   11de2:	4252      	negs	r2, r2
   11de4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   11de6:	230f      	movs	r3, #15
   11de8:	18fb      	adds	r3, r7, r3
   11dea:	781b      	ldrb	r3, [r3, #0]
   11dec:	2b7f      	cmp	r3, #127	; 0x7f
   11dee:	d900      	bls.n	11df2 <send+0x3a>
   11df0:	e087      	b.n	11f02 <send+0x14a>
   11df2:	68bb      	ldr	r3, [r7, #8]
   11df4:	2b00      	cmp	r3, #0
   11df6:	d100      	bne.n	11dfa <send+0x42>
   11df8:	e083      	b.n	11f02 <send+0x14a>
   11dfa:	230c      	movs	r3, #12
   11dfc:	18fb      	adds	r3, r7, r3
   11dfe:	881a      	ldrh	r2, [r3, #0]
   11e00:	23af      	movs	r3, #175	; 0xaf
   11e02:	00db      	lsls	r3, r3, #3
   11e04:	429a      	cmp	r2, r3
   11e06:	d900      	bls.n	11e0a <send+0x52>
   11e08:	e07b      	b.n	11f02 <send+0x14a>
   11e0a:	230f      	movs	r3, #15
   11e0c:	18fb      	adds	r3, r7, r3
   11e0e:	781b      	ldrb	r3, [r3, #0]
   11e10:	b25b      	sxtb	r3, r3
   11e12:	4a40      	ldr	r2, [pc, #256]	; (11f14 <send+0x15c>)
   11e14:	011b      	lsls	r3, r3, #4
   11e16:	18d3      	adds	r3, r2, r3
   11e18:	330a      	adds	r3, #10
   11e1a:	781b      	ldrb	r3, [r3, #0]
   11e1c:	b2db      	uxtb	r3, r3
   11e1e:	2b01      	cmp	r3, #1
   11e20:	d16f      	bne.n	11f02 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   11e22:	2323      	movs	r3, #35	; 0x23
   11e24:	18fb      	adds	r3, r7, r3
   11e26:	2245      	movs	r2, #69	; 0x45
   11e28:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   11e2a:	2324      	movs	r3, #36	; 0x24
   11e2c:	18fb      	adds	r3, r7, r3
   11e2e:	2250      	movs	r2, #80	; 0x50
   11e30:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   11e32:	2310      	movs	r3, #16
   11e34:	18fb      	adds	r3, r7, r3
   11e36:	220f      	movs	r2, #15
   11e38:	18ba      	adds	r2, r7, r2
   11e3a:	7812      	ldrb	r2, [r2, #0]
   11e3c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   11e3e:	2310      	movs	r3, #16
   11e40:	18fb      	adds	r3, r7, r3
   11e42:	220c      	movs	r2, #12
   11e44:	18ba      	adds	r2, r7, r2
   11e46:	8812      	ldrh	r2, [r2, #0]
   11e48:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   11e4a:	230f      	movs	r3, #15
   11e4c:	18fb      	adds	r3, r7, r3
   11e4e:	781b      	ldrb	r3, [r3, #0]
   11e50:	b25b      	sxtb	r3, r3
   11e52:	4a30      	ldr	r2, [pc, #192]	; (11f14 <send+0x15c>)
   11e54:	011b      	lsls	r3, r3, #4
   11e56:	18d3      	adds	r3, r2, r3
   11e58:	3306      	adds	r3, #6
   11e5a:	881b      	ldrh	r3, [r3, #0]
   11e5c:	b29a      	uxth	r2, r3
   11e5e:	2310      	movs	r3, #16
   11e60:	18fb      	adds	r3, r7, r3
   11e62:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   11e64:	230f      	movs	r3, #15
   11e66:	18fb      	adds	r3, r7, r3
   11e68:	781b      	ldrb	r3, [r3, #0]
   11e6a:	b25b      	sxtb	r3, r3
   11e6c:	2b06      	cmp	r3, #6
   11e6e:	dd03      	ble.n	11e78 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   11e70:	2324      	movs	r3, #36	; 0x24
   11e72:	18fb      	adds	r3, r7, r3
   11e74:	2244      	movs	r2, #68	; 0x44
   11e76:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   11e78:	230f      	movs	r3, #15
   11e7a:	18fb      	adds	r3, r7, r3
   11e7c:	781b      	ldrb	r3, [r3, #0]
   11e7e:	b25b      	sxtb	r3, r3
   11e80:	4a24      	ldr	r2, [pc, #144]	; (11f14 <send+0x15c>)
   11e82:	011b      	lsls	r3, r3, #4
   11e84:	18d3      	adds	r3, r2, r3
   11e86:	330b      	adds	r3, #11
   11e88:	781b      	ldrb	r3, [r3, #0]
   11e8a:	b2db      	uxtb	r3, r3
   11e8c:	001a      	movs	r2, r3
   11e8e:	2301      	movs	r3, #1
   11e90:	4013      	ands	r3, r2
   11e92:	d00f      	beq.n	11eb4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   11e94:	2323      	movs	r3, #35	; 0x23
   11e96:	18fb      	adds	r3, r7, r3
   11e98:	224c      	movs	r2, #76	; 0x4c
   11e9a:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   11e9c:	230f      	movs	r3, #15
   11e9e:	18fb      	adds	r3, r7, r3
   11ea0:	2200      	movs	r2, #0
   11ea2:	569a      	ldrsb	r2, [r3, r2]
   11ea4:	2324      	movs	r3, #36	; 0x24
   11ea6:	18fb      	adds	r3, r7, r3
   11ea8:	491a      	ldr	r1, [pc, #104]	; (11f14 <send+0x15c>)
   11eaa:	0112      	lsls	r2, r2, #4
   11eac:	188a      	adds	r2, r1, r2
   11eae:	3208      	adds	r2, #8
   11eb0:	8812      	ldrh	r2, [r2, #0]
   11eb2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   11eb4:	2323      	movs	r3, #35	; 0x23
   11eb6:	18fb      	adds	r3, r7, r3
   11eb8:	781b      	ldrb	r3, [r3, #0]
   11eba:	2280      	movs	r2, #128	; 0x80
   11ebc:	4252      	negs	r2, r2
   11ebe:	4313      	orrs	r3, r2
   11ec0:	b2d9      	uxtb	r1, r3
   11ec2:	2310      	movs	r3, #16
   11ec4:	18fa      	adds	r2, r7, r3
   11ec6:	2324      	movs	r3, #36	; 0x24
   11ec8:	18fb      	adds	r3, r7, r3
   11eca:	881b      	ldrh	r3, [r3, #0]
   11ecc:	9302      	str	r3, [sp, #8]
   11ece:	230c      	movs	r3, #12
   11ed0:	18fb      	adds	r3, r7, r3
   11ed2:	881b      	ldrh	r3, [r3, #0]
   11ed4:	9301      	str	r3, [sp, #4]
   11ed6:	68bb      	ldr	r3, [r7, #8]
   11ed8:	9300      	str	r3, [sp, #0]
   11eda:	2310      	movs	r3, #16
   11edc:	2002      	movs	r0, #2
   11ede:	4c0e      	ldr	r4, [pc, #56]	; (11f18 <send+0x160>)
   11ee0:	47a0      	blx	r4
   11ee2:	0003      	movs	r3, r0
   11ee4:	001a      	movs	r2, r3
   11ee6:	2326      	movs	r3, #38	; 0x26
   11ee8:	18fb      	adds	r3, r7, r3
   11eea:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   11eec:	2326      	movs	r3, #38	; 0x26
   11eee:	18fb      	adds	r3, r7, r3
   11ef0:	2200      	movs	r2, #0
   11ef2:	5e9b      	ldrsh	r3, [r3, r2]
   11ef4:	2b00      	cmp	r3, #0
   11ef6:	d004      	beq.n	11f02 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   11ef8:	2326      	movs	r3, #38	; 0x26
   11efa:	18fb      	adds	r3, r7, r3
   11efc:	220e      	movs	r2, #14
   11efe:	4252      	negs	r2, r2
   11f00:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   11f02:	2326      	movs	r3, #38	; 0x26
   11f04:	18fb      	adds	r3, r7, r3
   11f06:	2200      	movs	r2, #0
   11f08:	5e9b      	ldrsh	r3, [r3, r2]
}
   11f0a:	0018      	movs	r0, r3
   11f0c:	46bd      	mov	sp, r7
   11f0e:	b00b      	add	sp, #44	; 0x2c
   11f10:	bd90      	pop	{r4, r7, pc}
   11f12:	46c0      	nop			; (mov r8, r8)
   11f14:	20005908 	.word	0x20005908
   11f18:	0000d361 	.word	0x0000d361

00011f1c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   11f1c:	b590      	push	{r4, r7, lr}
   11f1e:	b08d      	sub	sp, #52	; 0x34
   11f20:	af04      	add	r7, sp, #16
   11f22:	60b9      	str	r1, [r7, #8]
   11f24:	0011      	movs	r1, r2
   11f26:	607b      	str	r3, [r7, #4]
   11f28:	230f      	movs	r3, #15
   11f2a:	18fb      	adds	r3, r7, r3
   11f2c:	1c02      	adds	r2, r0, #0
   11f2e:	701a      	strb	r2, [r3, #0]
   11f30:	230c      	movs	r3, #12
   11f32:	18fb      	adds	r3, r7, r3
   11f34:	1c0a      	adds	r2, r1, #0
   11f36:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   11f38:	231e      	movs	r3, #30
   11f3a:	18fb      	adds	r3, r7, r3
   11f3c:	2206      	movs	r2, #6
   11f3e:	4252      	negs	r2, r2
   11f40:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   11f42:	230f      	movs	r3, #15
   11f44:	18fb      	adds	r3, r7, r3
   11f46:	781b      	ldrb	r3, [r3, #0]
   11f48:	2b7f      	cmp	r3, #127	; 0x7f
   11f4a:	d900      	bls.n	11f4e <recv+0x32>
   11f4c:	e099      	b.n	12082 <recv+0x166>
   11f4e:	68bb      	ldr	r3, [r7, #8]
   11f50:	2b00      	cmp	r3, #0
   11f52:	d100      	bne.n	11f56 <recv+0x3a>
   11f54:	e095      	b.n	12082 <recv+0x166>
   11f56:	230c      	movs	r3, #12
   11f58:	18fb      	adds	r3, r7, r3
   11f5a:	881b      	ldrh	r3, [r3, #0]
   11f5c:	2b00      	cmp	r3, #0
   11f5e:	d100      	bne.n	11f62 <recv+0x46>
   11f60:	e08f      	b.n	12082 <recv+0x166>
   11f62:	230f      	movs	r3, #15
   11f64:	18fb      	adds	r3, r7, r3
   11f66:	781b      	ldrb	r3, [r3, #0]
   11f68:	b25b      	sxtb	r3, r3
   11f6a:	4a4a      	ldr	r2, [pc, #296]	; (12094 <recv+0x178>)
   11f6c:	011b      	lsls	r3, r3, #4
   11f6e:	18d3      	adds	r3, r2, r3
   11f70:	330a      	adds	r3, #10
   11f72:	781b      	ldrb	r3, [r3, #0]
   11f74:	b2db      	uxtb	r3, r3
   11f76:	2b01      	cmp	r3, #1
   11f78:	d000      	beq.n	11f7c <recv+0x60>
   11f7a:	e082      	b.n	12082 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   11f7c:	231e      	movs	r3, #30
   11f7e:	18fb      	adds	r3, r7, r3
   11f80:	2200      	movs	r2, #0
   11f82:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   11f84:	230f      	movs	r3, #15
   11f86:	18fb      	adds	r3, r7, r3
   11f88:	2200      	movs	r2, #0
   11f8a:	569a      	ldrsb	r2, [r3, r2]
   11f8c:	4b41      	ldr	r3, [pc, #260]	; (12094 <recv+0x178>)
   11f8e:	0112      	lsls	r2, r2, #4
   11f90:	68b9      	ldr	r1, [r7, #8]
   11f92:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   11f94:	230f      	movs	r3, #15
   11f96:	18fb      	adds	r3, r7, r3
   11f98:	781b      	ldrb	r3, [r3, #0]
   11f9a:	b25b      	sxtb	r3, r3
   11f9c:	4a3d      	ldr	r2, [pc, #244]	; (12094 <recv+0x178>)
   11f9e:	011b      	lsls	r3, r3, #4
   11fa0:	18d3      	adds	r3, r2, r3
   11fa2:	3304      	adds	r3, #4
   11fa4:	220c      	movs	r2, #12
   11fa6:	18ba      	adds	r2, r7, r2
   11fa8:	8812      	ldrh	r2, [r2, #0]
   11faa:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   11fac:	230f      	movs	r3, #15
   11fae:	18fb      	adds	r3, r7, r3
   11fb0:	781b      	ldrb	r3, [r3, #0]
   11fb2:	b25b      	sxtb	r3, r3
   11fb4:	4a37      	ldr	r2, [pc, #220]	; (12094 <recv+0x178>)
   11fb6:	011b      	lsls	r3, r3, #4
   11fb8:	18d3      	adds	r3, r2, r3
   11fba:	330c      	adds	r3, #12
   11fbc:	781b      	ldrb	r3, [r3, #0]
   11fbe:	b2db      	uxtb	r3, r3
   11fc0:	2b00      	cmp	r3, #0
   11fc2:	d15e      	bne.n	12082 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   11fc4:	231d      	movs	r3, #29
   11fc6:	18fb      	adds	r3, r7, r3
   11fc8:	2246      	movs	r2, #70	; 0x46
   11fca:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   11fcc:	230f      	movs	r3, #15
   11fce:	18fb      	adds	r3, r7, r3
   11fd0:	781b      	ldrb	r3, [r3, #0]
   11fd2:	b25b      	sxtb	r3, r3
   11fd4:	4a2f      	ldr	r2, [pc, #188]	; (12094 <recv+0x178>)
   11fd6:	011b      	lsls	r3, r3, #4
   11fd8:	18d3      	adds	r3, r2, r3
   11fda:	330c      	adds	r3, #12
   11fdc:	2201      	movs	r2, #1
   11fde:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   11fe0:	230f      	movs	r3, #15
   11fe2:	18fb      	adds	r3, r7, r3
   11fe4:	781b      	ldrb	r3, [r3, #0]
   11fe6:	b25b      	sxtb	r3, r3
   11fe8:	4a2a      	ldr	r2, [pc, #168]	; (12094 <recv+0x178>)
   11fea:	011b      	lsls	r3, r3, #4
   11fec:	18d3      	adds	r3, r2, r3
   11fee:	330b      	adds	r3, #11
   11ff0:	781b      	ldrb	r3, [r3, #0]
   11ff2:	b2db      	uxtb	r3, r3
   11ff4:	001a      	movs	r2, r3
   11ff6:	2301      	movs	r3, #1
   11ff8:	4013      	ands	r3, r2
   11ffa:	d003      	beq.n	12004 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   11ffc:	231d      	movs	r3, #29
   11ffe:	18fb      	adds	r3, r7, r3
   12000:	224d      	movs	r2, #77	; 0x4d
   12002:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   12004:	687b      	ldr	r3, [r7, #4]
   12006:	2b00      	cmp	r3, #0
   12008:	d105      	bne.n	12016 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   1200a:	2314      	movs	r3, #20
   1200c:	18fb      	adds	r3, r7, r3
   1200e:	2201      	movs	r2, #1
   12010:	4252      	negs	r2, r2
   12012:	601a      	str	r2, [r3, #0]
   12014:	e003      	b.n	1201e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   12016:	2314      	movs	r3, #20
   12018:	18fb      	adds	r3, r7, r3
   1201a:	687a      	ldr	r2, [r7, #4]
   1201c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   1201e:	2314      	movs	r3, #20
   12020:	18fb      	adds	r3, r7, r3
   12022:	220f      	movs	r2, #15
   12024:	18ba      	adds	r2, r7, r2
   12026:	7812      	ldrb	r2, [r2, #0]
   12028:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   1202a:	230f      	movs	r3, #15
   1202c:	18fb      	adds	r3, r7, r3
   1202e:	781b      	ldrb	r3, [r3, #0]
   12030:	b25b      	sxtb	r3, r3
   12032:	4a18      	ldr	r2, [pc, #96]	; (12094 <recv+0x178>)
   12034:	011b      	lsls	r3, r3, #4
   12036:	18d3      	adds	r3, r2, r3
   12038:	3306      	adds	r3, #6
   1203a:	881b      	ldrh	r3, [r3, #0]
   1203c:	b29a      	uxth	r2, r3
   1203e:	2314      	movs	r3, #20
   12040:	18fb      	adds	r3, r7, r3
   12042:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   12044:	2314      	movs	r3, #20
   12046:	18fa      	adds	r2, r7, r3
   12048:	231d      	movs	r3, #29
   1204a:	18fb      	adds	r3, r7, r3
   1204c:	7819      	ldrb	r1, [r3, #0]
   1204e:	2300      	movs	r3, #0
   12050:	9302      	str	r3, [sp, #8]
   12052:	2300      	movs	r3, #0
   12054:	9301      	str	r3, [sp, #4]
   12056:	2300      	movs	r3, #0
   12058:	9300      	str	r3, [sp, #0]
   1205a:	2308      	movs	r3, #8
   1205c:	2002      	movs	r0, #2
   1205e:	4c0e      	ldr	r4, [pc, #56]	; (12098 <recv+0x17c>)
   12060:	47a0      	blx	r4
   12062:	0003      	movs	r3, r0
   12064:	001a      	movs	r2, r3
   12066:	231e      	movs	r3, #30
   12068:	18fb      	adds	r3, r7, r3
   1206a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   1206c:	231e      	movs	r3, #30
   1206e:	18fb      	adds	r3, r7, r3
   12070:	2200      	movs	r2, #0
   12072:	5e9b      	ldrsh	r3, [r3, r2]
   12074:	2b00      	cmp	r3, #0
   12076:	d004      	beq.n	12082 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   12078:	231e      	movs	r3, #30
   1207a:	18fb      	adds	r3, r7, r3
   1207c:	220e      	movs	r2, #14
   1207e:	4252      	negs	r2, r2
   12080:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   12082:	231e      	movs	r3, #30
   12084:	18fb      	adds	r3, r7, r3
   12086:	2200      	movs	r2, #0
   12088:	5e9b      	ldrsh	r3, [r3, r2]
}
   1208a:	0018      	movs	r0, r3
   1208c:	46bd      	mov	sp, r7
   1208e:	b009      	add	sp, #36	; 0x24
   12090:	bd90      	pop	{r4, r7, pc}
   12092:	46c0      	nop			; (mov r8, r8)
   12094:	20005908 	.word	0x20005908
   12098:	0000d361 	.word	0x0000d361

0001209c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   1209c:	b5b0      	push	{r4, r5, r7, lr}
   1209e:	b088      	sub	sp, #32
   120a0:	af04      	add	r7, sp, #16
   120a2:	0002      	movs	r2, r0
   120a4:	1dfb      	adds	r3, r7, #7
   120a6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   120a8:	230f      	movs	r3, #15
   120aa:	18fb      	adds	r3, r7, r3
   120ac:	22fa      	movs	r2, #250	; 0xfa
   120ae:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   120b0:	4b43      	ldr	r3, [pc, #268]	; (121c0 <close+0x124>)
   120b2:	0018      	movs	r0, r3
   120b4:	4b43      	ldr	r3, [pc, #268]	; (121c4 <close+0x128>)
   120b6:	4798      	blx	r3
   120b8:	1dfb      	adds	r3, r7, #7
   120ba:	2200      	movs	r2, #0
   120bc:	569a      	ldrsb	r2, [r3, r2]
   120be:	4b42      	ldr	r3, [pc, #264]	; (121c8 <close+0x12c>)
   120c0:	0011      	movs	r1, r2
   120c2:	0018      	movs	r0, r3
   120c4:	4b3f      	ldr	r3, [pc, #252]	; (121c4 <close+0x128>)
   120c6:	4798      	blx	r3
   120c8:	4b40      	ldr	r3, [pc, #256]	; (121cc <close+0x130>)
   120ca:	0018      	movs	r0, r3
   120cc:	4b3d      	ldr	r3, [pc, #244]	; (121c4 <close+0x128>)
   120ce:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   120d0:	1dfb      	adds	r3, r7, #7
   120d2:	781b      	ldrb	r3, [r3, #0]
   120d4:	2b7f      	cmp	r3, #127	; 0x7f
   120d6:	d86a      	bhi.n	121ae <close+0x112>
   120d8:	1dfb      	adds	r3, r7, #7
   120da:	781b      	ldrb	r3, [r3, #0]
   120dc:	b25b      	sxtb	r3, r3
   120de:	4a3c      	ldr	r2, [pc, #240]	; (121d0 <close+0x134>)
   120e0:	011b      	lsls	r3, r3, #4
   120e2:	18d3      	adds	r3, r2, r3
   120e4:	330a      	adds	r3, #10
   120e6:	781b      	ldrb	r3, [r3, #0]
   120e8:	b2db      	uxtb	r3, r3
   120ea:	2b01      	cmp	r3, #1
   120ec:	d15f      	bne.n	121ae <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   120ee:	230e      	movs	r3, #14
   120f0:	18fb      	adds	r3, r7, r3
   120f2:	2249      	movs	r2, #73	; 0x49
   120f4:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   120f6:	2308      	movs	r3, #8
   120f8:	18fb      	adds	r3, r7, r3
   120fa:	1dfa      	adds	r2, r7, #7
   120fc:	7812      	ldrb	r2, [r2, #0]
   120fe:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   12100:	1dfb      	adds	r3, r7, #7
   12102:	781b      	ldrb	r3, [r3, #0]
   12104:	b25b      	sxtb	r3, r3
   12106:	4a32      	ldr	r2, [pc, #200]	; (121d0 <close+0x134>)
   12108:	011b      	lsls	r3, r3, #4
   1210a:	18d3      	adds	r3, r2, r3
   1210c:	3306      	adds	r3, #6
   1210e:	881b      	ldrh	r3, [r3, #0]
   12110:	b29a      	uxth	r2, r3
   12112:	2308      	movs	r3, #8
   12114:	18fb      	adds	r3, r7, r3
   12116:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   12118:	1dfb      	adds	r3, r7, #7
   1211a:	781b      	ldrb	r3, [r3, #0]
   1211c:	b25b      	sxtb	r3, r3
   1211e:	4a2c      	ldr	r2, [pc, #176]	; (121d0 <close+0x134>)
   12120:	011b      	lsls	r3, r3, #4
   12122:	18d3      	adds	r3, r2, r3
   12124:	330a      	adds	r3, #10
   12126:	2200      	movs	r2, #0
   12128:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   1212a:	1dfb      	adds	r3, r7, #7
   1212c:	781b      	ldrb	r3, [r3, #0]
   1212e:	b25b      	sxtb	r3, r3
   12130:	4a27      	ldr	r2, [pc, #156]	; (121d0 <close+0x134>)
   12132:	011b      	lsls	r3, r3, #4
   12134:	18d3      	adds	r3, r2, r3
   12136:	3306      	adds	r3, #6
   12138:	2200      	movs	r2, #0
   1213a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1213c:	1dfb      	adds	r3, r7, #7
   1213e:	781b      	ldrb	r3, [r3, #0]
   12140:	b25b      	sxtb	r3, r3
   12142:	4a23      	ldr	r2, [pc, #140]	; (121d0 <close+0x134>)
   12144:	011b      	lsls	r3, r3, #4
   12146:	18d3      	adds	r3, r2, r3
   12148:	330b      	adds	r3, #11
   1214a:	781b      	ldrb	r3, [r3, #0]
   1214c:	b2db      	uxtb	r3, r3
   1214e:	001a      	movs	r2, r3
   12150:	2301      	movs	r3, #1
   12152:	4013      	ands	r3, r2
   12154:	d003      	beq.n	1215e <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   12156:	230e      	movs	r3, #14
   12158:	18fb      	adds	r3, r7, r3
   1215a:	224e      	movs	r2, #78	; 0x4e
   1215c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   1215e:	230f      	movs	r3, #15
   12160:	18fc      	adds	r4, r7, r3
   12162:	2308      	movs	r3, #8
   12164:	18fa      	adds	r2, r7, r3
   12166:	230e      	movs	r3, #14
   12168:	18fb      	adds	r3, r7, r3
   1216a:	7819      	ldrb	r1, [r3, #0]
   1216c:	2300      	movs	r3, #0
   1216e:	9302      	str	r3, [sp, #8]
   12170:	2300      	movs	r3, #0
   12172:	9301      	str	r3, [sp, #4]
   12174:	2300      	movs	r3, #0
   12176:	9300      	str	r3, [sp, #0]
   12178:	2304      	movs	r3, #4
   1217a:	2002      	movs	r0, #2
   1217c:	4d15      	ldr	r5, [pc, #84]	; (121d4 <close+0x138>)
   1217e:	47a8      	blx	r5
   12180:	0003      	movs	r3, r0
   12182:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   12184:	230f      	movs	r3, #15
   12186:	18fb      	adds	r3, r7, r3
   12188:	781b      	ldrb	r3, [r3, #0]
   1218a:	b25b      	sxtb	r3, r3
   1218c:	2b00      	cmp	r3, #0
   1218e:	d003      	beq.n	12198 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   12190:	230f      	movs	r3, #15
   12192:	18fb      	adds	r3, r7, r3
   12194:	22f7      	movs	r2, #247	; 0xf7
   12196:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   12198:	1dfb      	adds	r3, r7, #7
   1219a:	781b      	ldrb	r3, [r3, #0]
   1219c:	b25b      	sxtb	r3, r3
   1219e:	011a      	lsls	r2, r3, #4
   121a0:	4b0b      	ldr	r3, [pc, #44]	; (121d0 <close+0x134>)
   121a2:	18d3      	adds	r3, r2, r3
   121a4:	2210      	movs	r2, #16
   121a6:	2100      	movs	r1, #0
   121a8:	0018      	movs	r0, r3
   121aa:	4b0b      	ldr	r3, [pc, #44]	; (121d8 <close+0x13c>)
   121ac:	4798      	blx	r3
	}
	return s8Ret;
   121ae:	230f      	movs	r3, #15
   121b0:	18fb      	adds	r3, r7, r3
   121b2:	781b      	ldrb	r3, [r3, #0]
   121b4:	b25b      	sxtb	r3, r3
}
   121b6:	0018      	movs	r0, r3
   121b8:	46bd      	mov	sp, r7
   121ba:	b004      	add	sp, #16
   121bc:	bdb0      	pop	{r4, r5, r7, pc}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	0002638c 	.word	0x0002638c
   121c4:	0000a3cd 	.word	0x0000a3cd
   121c8:	000263cc 	.word	0x000263cc
   121cc:	000263ac 	.word	0x000263ac
   121d0:	20005908 	.word	0x20005908
   121d4:	0000d361 	.word	0x0000d361
   121d8:	0000d101 	.word	0x0000d101

000121dc <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   121dc:	b580      	push	{r7, lr}
   121de:	b086      	sub	sp, #24
   121e0:	af00      	add	r7, sp, #0
   121e2:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   121e4:	2300      	movs	r3, #0
   121e6:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   121e8:	2317      	movs	r3, #23
   121ea:	18fb      	adds	r3, r7, r3
   121ec:	2200      	movs	r2, #0
   121ee:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   121f0:	2316      	movs	r3, #22
   121f2:	18fb      	adds	r3, r7, r3
   121f4:	2200      	movs	r2, #0
   121f6:	701a      	strb	r2, [r3, #0]
   121f8:	e060      	b.n	122bc <nmi_inet_addr+0xe0>
	{
		j = 0;
   121fa:	2315      	movs	r3, #21
   121fc:	18fb      	adds	r3, r7, r3
   121fe:	2200      	movs	r2, #0
   12200:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   12202:	2314      	movs	r3, #20
   12204:	18fb      	adds	r3, r7, r3
   12206:	687a      	ldr	r2, [r7, #4]
   12208:	7812      	ldrb	r2, [r2, #0]
   1220a:	701a      	strb	r2, [r3, #0]
			++j;
   1220c:	2315      	movs	r3, #21
   1220e:	18fb      	adds	r3, r7, r3
   12210:	2215      	movs	r2, #21
   12212:	18ba      	adds	r2, r7, r2
   12214:	7812      	ldrb	r2, [r2, #0]
   12216:	3201      	adds	r2, #1
   12218:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   1221a:	2315      	movs	r3, #21
   1221c:	18fb      	adds	r3, r7, r3
   1221e:	781b      	ldrb	r3, [r3, #0]
   12220:	2b04      	cmp	r3, #4
   12222:	d901      	bls.n	12228 <nmi_inet_addr+0x4c>
			{
				return 0;
   12224:	2300      	movs	r3, #0
   12226:	e057      	b.n	122d8 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   12228:	2314      	movs	r3, #20
   1222a:	18fb      	adds	r3, r7, r3
   1222c:	781b      	ldrb	r3, [r3, #0]
   1222e:	2b2e      	cmp	r3, #46	; 0x2e
   12230:	d004      	beq.n	1223c <nmi_inet_addr+0x60>
   12232:	2314      	movs	r3, #20
   12234:	18fb      	adds	r3, r7, r3
   12236:	781b      	ldrb	r3, [r3, #0]
   12238:	2b00      	cmp	r3, #0
   1223a:	d10d      	bne.n	12258 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   1223c:	2316      	movs	r3, #22
   1223e:	18fb      	adds	r3, r7, r3
   12240:	781b      	ldrb	r3, [r3, #0]
   12242:	220c      	movs	r2, #12
   12244:	18ba      	adds	r2, r7, r2
   12246:	2117      	movs	r1, #23
   12248:	1879      	adds	r1, r7, r1
   1224a:	7809      	ldrb	r1, [r1, #0]
   1224c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   1224e:	2317      	movs	r3, #23
   12250:	18fb      	adds	r3, r7, r3
   12252:	2200      	movs	r2, #0
   12254:	701a      	strb	r2, [r3, #0]
   12256:	e01d      	b.n	12294 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   12258:	2314      	movs	r3, #20
   1225a:	18fb      	adds	r3, r7, r3
   1225c:	781b      	ldrb	r3, [r3, #0]
   1225e:	2b2f      	cmp	r3, #47	; 0x2f
   12260:	d916      	bls.n	12290 <nmi_inet_addr+0xb4>
   12262:	2314      	movs	r3, #20
   12264:	18fb      	adds	r3, r7, r3
   12266:	781b      	ldrb	r3, [r3, #0]
   12268:	2b39      	cmp	r3, #57	; 0x39
   1226a:	d811      	bhi.n	12290 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   1226c:	2317      	movs	r3, #23
   1226e:	18fb      	adds	r3, r7, r3
   12270:	781b      	ldrb	r3, [r3, #0]
   12272:	1c1a      	adds	r2, r3, #0
   12274:	0092      	lsls	r2, r2, #2
   12276:	18d3      	adds	r3, r2, r3
   12278:	18db      	adds	r3, r3, r3
   1227a:	b2da      	uxtb	r2, r3
   1227c:	2314      	movs	r3, #20
   1227e:	18fb      	adds	r3, r7, r3
   12280:	781b      	ldrb	r3, [r3, #0]
   12282:	18d3      	adds	r3, r2, r3
   12284:	b2da      	uxtb	r2, r3
   12286:	2317      	movs	r3, #23
   12288:	18fb      	adds	r3, r7, r3
   1228a:	3a30      	subs	r2, #48	; 0x30
   1228c:	701a      	strb	r2, [r3, #0]
   1228e:	e001      	b.n	12294 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   12290:	2300      	movs	r3, #0
   12292:	e021      	b.n	122d8 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   12294:	687b      	ldr	r3, [r7, #4]
   12296:	3301      	adds	r3, #1
   12298:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   1229a:	2314      	movs	r3, #20
   1229c:	18fb      	adds	r3, r7, r3
   1229e:	781b      	ldrb	r3, [r3, #0]
   122a0:	2b2e      	cmp	r3, #46	; 0x2e
   122a2:	d004      	beq.n	122ae <nmi_inet_addr+0xd2>
   122a4:	2314      	movs	r3, #20
   122a6:	18fb      	adds	r3, r7, r3
   122a8:	781b      	ldrb	r3, [r3, #0]
   122aa:	2b00      	cmp	r3, #0
   122ac:	d1a9      	bne.n	12202 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   122ae:	2316      	movs	r3, #22
   122b0:	18fb      	adds	r3, r7, r3
   122b2:	2216      	movs	r2, #22
   122b4:	18ba      	adds	r2, r7, r2
   122b6:	7812      	ldrb	r2, [r2, #0]
   122b8:	3201      	adds	r2, #1
   122ba:	701a      	strb	r2, [r3, #0]
   122bc:	2316      	movs	r3, #22
   122be:	18fb      	adds	r3, r7, r3
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	2b03      	cmp	r3, #3
   122c4:	d999      	bls.n	121fa <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   122c6:	230c      	movs	r3, #12
   122c8:	18f9      	adds	r1, r7, r3
   122ca:	2310      	movs	r3, #16
   122cc:	18fb      	adds	r3, r7, r3
   122ce:	2204      	movs	r2, #4
   122d0:	0018      	movs	r0, r3
   122d2:	4b03      	ldr	r3, [pc, #12]	; (122e0 <nmi_inet_addr+0x104>)
   122d4:	4798      	blx	r3
	return u32IP;
   122d6:	693b      	ldr	r3, [r7, #16]
}
   122d8:	0018      	movs	r0, r3
   122da:	46bd      	mov	sp, r7
   122dc:	b006      	add	sp, #24
   122de:	bd80      	pop	{r7, pc}
   122e0:	0000d0c5 	.word	0x0000d0c5

000122e4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   122e4:	b5b0      	push	{r4, r5, r7, lr}
   122e6:	b088      	sub	sp, #32
   122e8:	af04      	add	r7, sp, #16
   122ea:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   122ec:	230f      	movs	r3, #15
   122ee:	18fb      	adds	r3, r7, r3
   122f0:	22fa      	movs	r2, #250	; 0xfa
   122f2:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   122f4:	687b      	ldr	r3, [r7, #4]
   122f6:	0018      	movs	r0, r3
   122f8:	4b14      	ldr	r3, [pc, #80]	; (1234c <gethostbyname+0x68>)
   122fa:	4798      	blx	r3
   122fc:	0003      	movs	r3, r0
   122fe:	001a      	movs	r2, r3
   12300:	230e      	movs	r3, #14
   12302:	18fb      	adds	r3, r7, r3
   12304:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   12306:	230e      	movs	r3, #14
   12308:	18fb      	adds	r3, r7, r3
   1230a:	781b      	ldrb	r3, [r3, #0]
   1230c:	2b40      	cmp	r3, #64	; 0x40
   1230e:	d815      	bhi.n	1233c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   12310:	230e      	movs	r3, #14
   12312:	18fb      	adds	r3, r7, r3
   12314:	781b      	ldrb	r3, [r3, #0]
   12316:	b29b      	uxth	r3, r3
   12318:	3301      	adds	r3, #1
   1231a:	b299      	uxth	r1, r3
   1231c:	230f      	movs	r3, #15
   1231e:	18fc      	adds	r4, r7, r3
   12320:	687a      	ldr	r2, [r7, #4]
   12322:	2300      	movs	r3, #0
   12324:	9302      	str	r3, [sp, #8]
   12326:	2300      	movs	r3, #0
   12328:	9301      	str	r3, [sp, #4]
   1232a:	2300      	movs	r3, #0
   1232c:	9300      	str	r3, [sp, #0]
   1232e:	000b      	movs	r3, r1
   12330:	214a      	movs	r1, #74	; 0x4a
   12332:	2002      	movs	r0, #2
   12334:	4d06      	ldr	r5, [pc, #24]	; (12350 <gethostbyname+0x6c>)
   12336:	47a8      	blx	r5
   12338:	0003      	movs	r3, r0
   1233a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   1233c:	230f      	movs	r3, #15
   1233e:	18fb      	adds	r3, r7, r3
   12340:	781b      	ldrb	r3, [r3, #0]
   12342:	b25b      	sxtb	r3, r3
}
   12344:	0018      	movs	r0, r3
   12346:	46bd      	mov	sp, r7
   12348:	b004      	add	sp, #16
   1234a:	bdb0      	pop	{r4, r5, r7, pc}
   1234c:	0000d13f 	.word	0x0000d13f
   12350:	0000d361 	.word	0x0000d361

00012354 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   12354:	b580      	push	{r7, lr}
   12356:	b082      	sub	sp, #8
   12358:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   1235a:	003b      	movs	r3, r7
   1235c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   1235e:	687b      	ldr	r3, [r7, #4]
   12360:	22b9      	movs	r2, #185	; 0xb9
   12362:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   12364:	4b13      	ldr	r3, [pc, #76]	; (123b4 <spi_flash_enter_low_power_mode+0x60>)
   12366:	2100      	movs	r1, #0
   12368:	0018      	movs	r0, r3
   1236a:	4b13      	ldr	r3, [pc, #76]	; (123b8 <spi_flash_enter_low_power_mode+0x64>)
   1236c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   1236e:	687b      	ldr	r3, [r7, #4]
   12370:	781b      	ldrb	r3, [r3, #0]
   12372:	001a      	movs	r2, r3
   12374:	4b11      	ldr	r3, [pc, #68]	; (123bc <spi_flash_enter_low_power_mode+0x68>)
   12376:	0011      	movs	r1, r2
   12378:	0018      	movs	r0, r3
   1237a:	4b0f      	ldr	r3, [pc, #60]	; (123b8 <spi_flash_enter_low_power_mode+0x64>)
   1237c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   1237e:	4b10      	ldr	r3, [pc, #64]	; (123c0 <spi_flash_enter_low_power_mode+0x6c>)
   12380:	2101      	movs	r1, #1
   12382:	0018      	movs	r0, r3
   12384:	4b0c      	ldr	r3, [pc, #48]	; (123b8 <spi_flash_enter_low_power_mode+0x64>)
   12386:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   12388:	4b0e      	ldr	r3, [pc, #56]	; (123c4 <spi_flash_enter_low_power_mode+0x70>)
   1238a:	2100      	movs	r1, #0
   1238c:	0018      	movs	r0, r3
   1238e:	4b0a      	ldr	r3, [pc, #40]	; (123b8 <spi_flash_enter_low_power_mode+0x64>)
   12390:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   12392:	4b0d      	ldr	r3, [pc, #52]	; (123c8 <spi_flash_enter_low_power_mode+0x74>)
   12394:	2181      	movs	r1, #129	; 0x81
   12396:	0018      	movs	r0, r3
   12398:	4b07      	ldr	r3, [pc, #28]	; (123b8 <spi_flash_enter_low_power_mode+0x64>)
   1239a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   1239c:	46c0      	nop			; (mov r8, r8)
   1239e:	4b0b      	ldr	r3, [pc, #44]	; (123cc <spi_flash_enter_low_power_mode+0x78>)
   123a0:	0018      	movs	r0, r3
   123a2:	4b0b      	ldr	r3, [pc, #44]	; (123d0 <spi_flash_enter_low_power_mode+0x7c>)
   123a4:	4798      	blx	r3
   123a6:	0003      	movs	r3, r0
   123a8:	2b01      	cmp	r3, #1
   123aa:	d1f8      	bne.n	1239e <spi_flash_enter_low_power_mode+0x4a>
}
   123ac:	46c0      	nop			; (mov r8, r8)
   123ae:	46bd      	mov	sp, r7
   123b0:	b002      	add	sp, #8
   123b2:	bd80      	pop	{r7, pc}
   123b4:	00010208 	.word	0x00010208
   123b8:	0000f1b5 	.word	0x0000f1b5
   123bc:	0001020c 	.word	0x0001020c
   123c0:	00010214 	.word	0x00010214
   123c4:	0001021c 	.word	0x0001021c
   123c8:	00010204 	.word	0x00010204
   123cc:	00010218 	.word	0x00010218
   123d0:	0000f171 	.word	0x0000f171

000123d4 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   123d4:	b580      	push	{r7, lr}
   123d6:	b082      	sub	sp, #8
   123d8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   123da:	003b      	movs	r3, r7
   123dc:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   123de:	687b      	ldr	r3, [r7, #4]
   123e0:	22ab      	movs	r2, #171	; 0xab
   123e2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   123e4:	4b13      	ldr	r3, [pc, #76]	; (12434 <spi_flash_leave_low_power_mode+0x60>)
   123e6:	2100      	movs	r1, #0
   123e8:	0018      	movs	r0, r3
   123ea:	4b13      	ldr	r3, [pc, #76]	; (12438 <spi_flash_leave_low_power_mode+0x64>)
   123ec:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   123ee:	687b      	ldr	r3, [r7, #4]
   123f0:	781b      	ldrb	r3, [r3, #0]
   123f2:	001a      	movs	r2, r3
   123f4:	4b11      	ldr	r3, [pc, #68]	; (1243c <spi_flash_leave_low_power_mode+0x68>)
   123f6:	0011      	movs	r1, r2
   123f8:	0018      	movs	r0, r3
   123fa:	4b0f      	ldr	r3, [pc, #60]	; (12438 <spi_flash_leave_low_power_mode+0x64>)
   123fc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   123fe:	4b10      	ldr	r3, [pc, #64]	; (12440 <spi_flash_leave_low_power_mode+0x6c>)
   12400:	2101      	movs	r1, #1
   12402:	0018      	movs	r0, r3
   12404:	4b0c      	ldr	r3, [pc, #48]	; (12438 <spi_flash_leave_low_power_mode+0x64>)
   12406:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   12408:	4b0e      	ldr	r3, [pc, #56]	; (12444 <spi_flash_leave_low_power_mode+0x70>)
   1240a:	2100      	movs	r1, #0
   1240c:	0018      	movs	r0, r3
   1240e:	4b0a      	ldr	r3, [pc, #40]	; (12438 <spi_flash_leave_low_power_mode+0x64>)
   12410:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   12412:	4b0d      	ldr	r3, [pc, #52]	; (12448 <spi_flash_leave_low_power_mode+0x74>)
   12414:	2181      	movs	r1, #129	; 0x81
   12416:	0018      	movs	r0, r3
   12418:	4b07      	ldr	r3, [pc, #28]	; (12438 <spi_flash_leave_low_power_mode+0x64>)
   1241a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   1241c:	46c0      	nop			; (mov r8, r8)
   1241e:	4b0b      	ldr	r3, [pc, #44]	; (1244c <spi_flash_leave_low_power_mode+0x78>)
   12420:	0018      	movs	r0, r3
   12422:	4b0b      	ldr	r3, [pc, #44]	; (12450 <spi_flash_leave_low_power_mode+0x7c>)
   12424:	4798      	blx	r3
   12426:	0003      	movs	r3, r0
   12428:	2b01      	cmp	r3, #1
   1242a:	d1f8      	bne.n	1241e <spi_flash_leave_low_power_mode+0x4a>
}
   1242c:	46c0      	nop			; (mov r8, r8)
   1242e:	46bd      	mov	sp, r7
   12430:	b002      	add	sp, #8
   12432:	bd80      	pop	{r7, pc}
   12434:	00010208 	.word	0x00010208
   12438:	0000f1b5 	.word	0x0000f1b5
   1243c:	0001020c 	.word	0x0001020c
   12440:	00010214 	.word	0x00010214
   12444:	0001021c 	.word	0x0001021c
   12448:	00010204 	.word	0x00010204
   1244c:	00010218 	.word	0x00010218
   12450:	0000f171 	.word	0x0000f171

00012454 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   12454:	b590      	push	{r4, r7, lr}
   12456:	b085      	sub	sp, #20
   12458:	af00      	add	r7, sp, #0
   1245a:	0002      	movs	r2, r0
   1245c:	1dfb      	adds	r3, r7, #7
   1245e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   12460:	230f      	movs	r3, #15
   12462:	18fb      	adds	r3, r7, r3
   12464:	2200      	movs	r2, #0
   12466:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   12468:	4b24      	ldr	r3, [pc, #144]	; (124fc <spi_flash_enable+0xa8>)
   1246a:	4798      	blx	r3
   1246c:	0003      	movs	r3, r0
   1246e:	051b      	lsls	r3, r3, #20
   12470:	0d1b      	lsrs	r3, r3, #20
   12472:	4a23      	ldr	r2, [pc, #140]	; (12500 <spi_flash_enable+0xac>)
   12474:	4293      	cmp	r3, r2
   12476:	d938      	bls.n	124ea <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   12478:	230f      	movs	r3, #15
   1247a:	18fc      	adds	r4, r7, r3
   1247c:	2308      	movs	r3, #8
   1247e:	18fb      	adds	r3, r7, r3
   12480:	4a20      	ldr	r2, [pc, #128]	; (12504 <spi_flash_enable+0xb0>)
   12482:	0019      	movs	r1, r3
   12484:	0010      	movs	r0, r2
   12486:	4b20      	ldr	r3, [pc, #128]	; (12508 <spi_flash_enable+0xb4>)
   12488:	4798      	blx	r3
   1248a:	0003      	movs	r3, r0
   1248c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   1248e:	230f      	movs	r3, #15
   12490:	18fb      	adds	r3, r7, r3
   12492:	781b      	ldrb	r3, [r3, #0]
   12494:	b25b      	sxtb	r3, r3
   12496:	2b00      	cmp	r3, #0
   12498:	d126      	bne.n	124e8 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   1249a:	68bb      	ldr	r3, [r7, #8]
   1249c:	4a1b      	ldr	r2, [pc, #108]	; (1250c <spi_flash_enable+0xb8>)
   1249e:	4013      	ands	r3, r2
   124a0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   124a2:	68bb      	ldr	r3, [r7, #8]
   124a4:	4a1a      	ldr	r2, [pc, #104]	; (12510 <spi_flash_enable+0xbc>)
   124a6:	4313      	orrs	r3, r2
   124a8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   124aa:	68bb      	ldr	r3, [r7, #8]
   124ac:	4a15      	ldr	r2, [pc, #84]	; (12504 <spi_flash_enable+0xb0>)
   124ae:	0019      	movs	r1, r3
   124b0:	0010      	movs	r0, r2
   124b2:	4b18      	ldr	r3, [pc, #96]	; (12514 <spi_flash_enable+0xc0>)
   124b4:	4798      	blx	r3
		if(enable) {
   124b6:	1dfb      	adds	r3, r7, #7
   124b8:	781b      	ldrb	r3, [r3, #0]
   124ba:	2b00      	cmp	r3, #0
   124bc:	d002      	beq.n	124c4 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   124be:	4b16      	ldr	r3, [pc, #88]	; (12518 <spi_flash_enable+0xc4>)
   124c0:	4798      	blx	r3
   124c2:	e001      	b.n	124c8 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   124c4:	4b15      	ldr	r3, [pc, #84]	; (1251c <spi_flash_enable+0xc8>)
   124c6:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   124c8:	68bb      	ldr	r3, [r7, #8]
   124ca:	4a10      	ldr	r2, [pc, #64]	; (1250c <spi_flash_enable+0xb8>)
   124cc:	4013      	ands	r3, r2
   124ce:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   124d0:	68bb      	ldr	r3, [r7, #8]
   124d2:	2280      	movs	r2, #128	; 0x80
   124d4:	0252      	lsls	r2, r2, #9
   124d6:	4313      	orrs	r3, r2
   124d8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   124da:	68bb      	ldr	r3, [r7, #8]
   124dc:	4a09      	ldr	r2, [pc, #36]	; (12504 <spi_flash_enable+0xb0>)
   124de:	0019      	movs	r1, r3
   124e0:	0010      	movs	r0, r2
   124e2:	4b0c      	ldr	r3, [pc, #48]	; (12514 <spi_flash_enable+0xc0>)
   124e4:	4798      	blx	r3
   124e6:	e000      	b.n	124ea <spi_flash_enable+0x96>
			goto ERR1;
   124e8:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   124ea:	230f      	movs	r3, #15
   124ec:	18fb      	adds	r3, r7, r3
   124ee:	781b      	ldrb	r3, [r3, #0]
   124f0:	b25b      	sxtb	r3, r3
}
   124f2:	0018      	movs	r0, r3
   124f4:	46bd      	mov	sp, r7
   124f6:	b005      	add	sp, #20
   124f8:	bd90      	pop	{r4, r7, pc}
   124fa:	46c0      	nop			; (mov r8, r8)
   124fc:	0000ea91 	.word	0x0000ea91
   12500:	0000039f 	.word	0x0000039f
   12504:	00001410 	.word	0x00001410
   12508:	0000f191 	.word	0x0000f191
   1250c:	f8888fff 	.word	0xf8888fff
   12510:	01111000 	.word	0x01111000
   12514:	0000f1b5 	.word	0x0000f1b5
   12518:	000123d5 	.word	0x000123d5
   1251c:	00012355 	.word	0x00012355

00012520 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   12520:	b580      	push	{r7, lr}
   12522:	b084      	sub	sp, #16
   12524:	af00      	add	r7, sp, #0
   12526:	0002      	movs	r2, r0
   12528:	1dfb      	adds	r3, r7, #7
   1252a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   1252c:	1dfb      	adds	r3, r7, #7
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	2b00      	cmp	r3, #0
   12532:	d108      	bne.n	12546 <mem_test_unit_ready+0x26>
   12534:	1dfb      	adds	r3, r7, #7
   12536:	781a      	ldrb	r2, [r3, #0]
   12538:	4b08      	ldr	r3, [pc, #32]	; (1255c <mem_test_unit_ready+0x3c>)
   1253a:	0152      	lsls	r2, r2, #5
   1253c:	58d3      	ldr	r3, [r2, r3]
   1253e:	4798      	blx	r3
   12540:	0003      	movs	r3, r0
   12542:	001a      	movs	r2, r3
   12544:	e000      	b.n	12548 <mem_test_unit_ready+0x28>
   12546:	2201      	movs	r2, #1
  status =
   12548:	230f      	movs	r3, #15
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   1254e:	230f      	movs	r3, #15
   12550:	18fb      	adds	r3, r7, r3
   12552:	781b      	ldrb	r3, [r3, #0]
}
   12554:	0018      	movs	r0, r3
   12556:	46bd      	mov	sp, r7
   12558:	b004      	add	sp, #16
   1255a:	bd80      	pop	{r7, pc}
   1255c:	00026458 	.word	0x00026458

00012560 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   12560:	b580      	push	{r7, lr}
   12562:	b084      	sub	sp, #16
   12564:	af00      	add	r7, sp, #0
   12566:	0002      	movs	r2, r0
   12568:	6039      	str	r1, [r7, #0]
   1256a:	1dfb      	adds	r3, r7, #7
   1256c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   1256e:	1dfb      	adds	r3, r7, #7
   12570:	781b      	ldrb	r3, [r3, #0]
   12572:	2b00      	cmp	r3, #0
   12574:	d10c      	bne.n	12590 <mem_read_capacity+0x30>
   12576:	1dfb      	adds	r3, r7, #7
   12578:	781b      	ldrb	r3, [r3, #0]
   1257a:	4a0b      	ldr	r2, [pc, #44]	; (125a8 <mem_read_capacity+0x48>)
   1257c:	015b      	lsls	r3, r3, #5
   1257e:	18d3      	adds	r3, r2, r3
   12580:	3304      	adds	r3, #4
   12582:	681b      	ldr	r3, [r3, #0]
   12584:	683a      	ldr	r2, [r7, #0]
   12586:	0010      	movs	r0, r2
   12588:	4798      	blx	r3
   1258a:	0003      	movs	r3, r0
   1258c:	001a      	movs	r2, r3
   1258e:	e000      	b.n	12592 <mem_read_capacity+0x32>
   12590:	2201      	movs	r2, #1
  status =
   12592:	230f      	movs	r3, #15
   12594:	18fb      	adds	r3, r7, r3
   12596:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   12598:	230f      	movs	r3, #15
   1259a:	18fb      	adds	r3, r7, r3
   1259c:	781b      	ldrb	r3, [r3, #0]
}
   1259e:	0018      	movs	r0, r3
   125a0:	46bd      	mov	sp, r7
   125a2:	b004      	add	sp, #16
   125a4:	bd80      	pop	{r7, pc}
   125a6:	46c0      	nop			; (mov r8, r8)
   125a8:	00026458 	.word	0x00026458

000125ac <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   125ac:	b580      	push	{r7, lr}
   125ae:	b084      	sub	sp, #16
   125b0:	af00      	add	r7, sp, #0
   125b2:	0002      	movs	r2, r0
   125b4:	1dfb      	adds	r3, r7, #7
   125b6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   125b8:	1dfb      	adds	r3, r7, #7
   125ba:	781b      	ldrb	r3, [r3, #0]
   125bc:	425a      	negs	r2, r3
   125be:	4153      	adcs	r3, r2
   125c0:	b2da      	uxtb	r2, r3
  sector_size =
   125c2:	230f      	movs	r3, #15
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   125c8:	230f      	movs	r3, #15
   125ca:	18fb      	adds	r3, r7, r3
   125cc:	781b      	ldrb	r3, [r3, #0]
}
   125ce:	0018      	movs	r0, r3
   125d0:	46bd      	mov	sp, r7
   125d2:	b004      	add	sp, #16
   125d4:	bd80      	pop	{r7, pc}
	...

000125d8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   125d8:	b580      	push	{r7, lr}
   125da:	b084      	sub	sp, #16
   125dc:	af00      	add	r7, sp, #0
   125de:	0002      	movs	r2, r0
   125e0:	1dfb      	adds	r3, r7, #7
   125e2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   125e4:	1dfb      	adds	r3, r7, #7
   125e6:	781b      	ldrb	r3, [r3, #0]
   125e8:	2b00      	cmp	r3, #0
   125ea:	d109      	bne.n	12600 <mem_wr_protect+0x28>
   125ec:	1dfb      	adds	r3, r7, #7
   125ee:	781b      	ldrb	r3, [r3, #0]
   125f0:	4a0a      	ldr	r2, [pc, #40]	; (1261c <mem_wr_protect+0x44>)
   125f2:	015b      	lsls	r3, r3, #5
   125f4:	18d3      	adds	r3, r2, r3
   125f6:	330c      	adds	r3, #12
   125f8:	681b      	ldr	r3, [r3, #0]
   125fa:	4798      	blx	r3
   125fc:	1e03      	subs	r3, r0, #0
   125fe:	d001      	beq.n	12604 <mem_wr_protect+0x2c>
   12600:	2201      	movs	r2, #1
   12602:	e000      	b.n	12606 <mem_wr_protect+0x2e>
   12604:	2200      	movs	r2, #0
  wr_protect =
   12606:	230f      	movs	r3, #15
   12608:	18fb      	adds	r3, r7, r3
   1260a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   1260c:	230f      	movs	r3, #15
   1260e:	18fb      	adds	r3, r7, r3
   12610:	781b      	ldrb	r3, [r3, #0]
}
   12612:	0018      	movs	r0, r3
   12614:	46bd      	mov	sp, r7
   12616:	b004      	add	sp, #16
   12618:	bd80      	pop	{r7, pc}
   1261a:	46c0      	nop			; (mov r8, r8)
   1261c:	00026458 	.word	0x00026458

00012620 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   12620:	b580      	push	{r7, lr}
   12622:	b086      	sub	sp, #24
   12624:	af00      	add	r7, sp, #0
   12626:	60b9      	str	r1, [r7, #8]
   12628:	607a      	str	r2, [r7, #4]
   1262a:	230f      	movs	r3, #15
   1262c:	18fb      	adds	r3, r7, r3
   1262e:	1c02      	adds	r2, r0, #0
   12630:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   12632:	230f      	movs	r3, #15
   12634:	18fb      	adds	r3, r7, r3
   12636:	781b      	ldrb	r3, [r3, #0]
   12638:	2b00      	cmp	r3, #0
   1263a:	d10e      	bne.n	1265a <memory_2_ram+0x3a>
   1263c:	230f      	movs	r3, #15
   1263e:	18fb      	adds	r3, r7, r3
   12640:	781b      	ldrb	r3, [r3, #0]
   12642:	4a0b      	ldr	r2, [pc, #44]	; (12670 <memory_2_ram+0x50>)
   12644:	015b      	lsls	r3, r3, #5
   12646:	18d3      	adds	r3, r2, r3
   12648:	3314      	adds	r3, #20
   1264a:	681b      	ldr	r3, [r3, #0]
   1264c:	6879      	ldr	r1, [r7, #4]
   1264e:	68ba      	ldr	r2, [r7, #8]
   12650:	0010      	movs	r0, r2
   12652:	4798      	blx	r3
   12654:	0003      	movs	r3, r0
   12656:	001a      	movs	r2, r3
   12658:	e000      	b.n	1265c <memory_2_ram+0x3c>
   1265a:	2201      	movs	r2, #1
  status =
   1265c:	2317      	movs	r3, #23
   1265e:	18fb      	adds	r3, r7, r3
   12660:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   12662:	2317      	movs	r3, #23
   12664:	18fb      	adds	r3, r7, r3
   12666:	781b      	ldrb	r3, [r3, #0]
}
   12668:	0018      	movs	r0, r3
   1266a:	46bd      	mov	sp, r7
   1266c:	b006      	add	sp, #24
   1266e:	bd80      	pop	{r7, pc}
   12670:	00026458 	.word	0x00026458

00012674 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   12674:	b580      	push	{r7, lr}
   12676:	b086      	sub	sp, #24
   12678:	af00      	add	r7, sp, #0
   1267a:	60b9      	str	r1, [r7, #8]
   1267c:	607a      	str	r2, [r7, #4]
   1267e:	230f      	movs	r3, #15
   12680:	18fb      	adds	r3, r7, r3
   12682:	1c02      	adds	r2, r0, #0
   12684:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   12686:	230f      	movs	r3, #15
   12688:	18fb      	adds	r3, r7, r3
   1268a:	781b      	ldrb	r3, [r3, #0]
   1268c:	2b00      	cmp	r3, #0
   1268e:	d10e      	bne.n	126ae <ram_2_memory+0x3a>
   12690:	230f      	movs	r3, #15
   12692:	18fb      	adds	r3, r7, r3
   12694:	781b      	ldrb	r3, [r3, #0]
   12696:	4a0b      	ldr	r2, [pc, #44]	; (126c4 <ram_2_memory+0x50>)
   12698:	015b      	lsls	r3, r3, #5
   1269a:	18d3      	adds	r3, r2, r3
   1269c:	3318      	adds	r3, #24
   1269e:	681b      	ldr	r3, [r3, #0]
   126a0:	6879      	ldr	r1, [r7, #4]
   126a2:	68ba      	ldr	r2, [r7, #8]
   126a4:	0010      	movs	r0, r2
   126a6:	4798      	blx	r3
   126a8:	0003      	movs	r3, r0
   126aa:	001a      	movs	r2, r3
   126ac:	e000      	b.n	126b0 <ram_2_memory+0x3c>
   126ae:	2201      	movs	r2, #1
  status =
   126b0:	2317      	movs	r3, #23
   126b2:	18fb      	adds	r3, r7, r3
   126b4:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   126b6:	2317      	movs	r3, #23
   126b8:	18fb      	adds	r3, r7, r3
   126ba:	781b      	ldrb	r3, [r3, #0]
}
   126bc:	0018      	movs	r0, r3
   126be:	46bd      	mov	sp, r7
   126c0:	b006      	add	sp, #24
   126c2:	bd80      	pop	{r7, pc}
   126c4:	00026458 	.word	0x00026458

000126c8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   126c8:	b580      	push	{r7, lr}
   126ca:	b082      	sub	sp, #8
   126cc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   126ce:	4b10      	ldr	r3, [pc, #64]	; (12710 <cpu_irq_enter_critical+0x48>)
   126d0:	681b      	ldr	r3, [r3, #0]
   126d2:	2b00      	cmp	r3, #0
   126d4:	d112      	bne.n	126fc <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   126d6:	f3ef 8310 	mrs	r3, PRIMASK
   126da:	607b      	str	r3, [r7, #4]
  return(result);
   126dc:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   126de:	2b00      	cmp	r3, #0
   126e0:	d109      	bne.n	126f6 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   126e2:	b672      	cpsid	i
   126e4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   126e8:	4b0a      	ldr	r3, [pc, #40]	; (12714 <cpu_irq_enter_critical+0x4c>)
   126ea:	2200      	movs	r2, #0
   126ec:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   126ee:	4b0a      	ldr	r3, [pc, #40]	; (12718 <cpu_irq_enter_critical+0x50>)
   126f0:	2201      	movs	r2, #1
   126f2:	701a      	strb	r2, [r3, #0]
   126f4:	e002      	b.n	126fc <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   126f6:	4b08      	ldr	r3, [pc, #32]	; (12718 <cpu_irq_enter_critical+0x50>)
   126f8:	2200      	movs	r2, #0
   126fa:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   126fc:	4b04      	ldr	r3, [pc, #16]	; (12710 <cpu_irq_enter_critical+0x48>)
   126fe:	681b      	ldr	r3, [r3, #0]
   12700:	1c5a      	adds	r2, r3, #1
   12702:	4b03      	ldr	r3, [pc, #12]	; (12710 <cpu_irq_enter_critical+0x48>)
   12704:	601a      	str	r2, [r3, #0]
}
   12706:	46c0      	nop			; (mov r8, r8)
   12708:	46bd      	mov	sp, r7
   1270a:	b002      	add	sp, #8
   1270c:	bd80      	pop	{r7, pc}
   1270e:	46c0      	nop			; (mov r8, r8)
   12710:	20004130 	.word	0x20004130
   12714:	20000112 	.word	0x20000112
   12718:	20004134 	.word	0x20004134

0001271c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   1271c:	b580      	push	{r7, lr}
   1271e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   12720:	4b0b      	ldr	r3, [pc, #44]	; (12750 <cpu_irq_leave_critical+0x34>)
   12722:	681b      	ldr	r3, [r3, #0]
   12724:	1e5a      	subs	r2, r3, #1
   12726:	4b0a      	ldr	r3, [pc, #40]	; (12750 <cpu_irq_leave_critical+0x34>)
   12728:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   1272a:	4b09      	ldr	r3, [pc, #36]	; (12750 <cpu_irq_leave_critical+0x34>)
   1272c:	681b      	ldr	r3, [r3, #0]
   1272e:	2b00      	cmp	r3, #0
   12730:	d10a      	bne.n	12748 <cpu_irq_leave_critical+0x2c>
   12732:	4b08      	ldr	r3, [pc, #32]	; (12754 <cpu_irq_leave_critical+0x38>)
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	b2db      	uxtb	r3, r3
   12738:	2b00      	cmp	r3, #0
   1273a:	d005      	beq.n	12748 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   1273c:	4b06      	ldr	r3, [pc, #24]	; (12758 <cpu_irq_leave_critical+0x3c>)
   1273e:	2201      	movs	r2, #1
   12740:	701a      	strb	r2, [r3, #0]
   12742:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   12746:	b662      	cpsie	i
	}
}
   12748:	46c0      	nop			; (mov r8, r8)
   1274a:	46bd      	mov	sp, r7
   1274c:	bd80      	pop	{r7, pc}
   1274e:	46c0      	nop			; (mov r8, r8)
   12750:	20004130 	.word	0x20004130
   12754:	20004134 	.word	0x20004134
   12758:	20000112 	.word	0x20000112

0001275c <system_pinmux_get_group_from_gpio_pin>:
{
   1275c:	b580      	push	{r7, lr}
   1275e:	b084      	sub	sp, #16
   12760:	af00      	add	r7, sp, #0
   12762:	0002      	movs	r2, r0
   12764:	1dfb      	adds	r3, r7, #7
   12766:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   12768:	230f      	movs	r3, #15
   1276a:	18fb      	adds	r3, r7, r3
   1276c:	1dfa      	adds	r2, r7, #7
   1276e:	7812      	ldrb	r2, [r2, #0]
   12770:	09d2      	lsrs	r2, r2, #7
   12772:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   12774:	230e      	movs	r3, #14
   12776:	18fb      	adds	r3, r7, r3
   12778:	1dfa      	adds	r2, r7, #7
   1277a:	7812      	ldrb	r2, [r2, #0]
   1277c:	0952      	lsrs	r2, r2, #5
   1277e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   12780:	4b0d      	ldr	r3, [pc, #52]	; (127b8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   12782:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   12784:	230f      	movs	r3, #15
   12786:	18fb      	adds	r3, r7, r3
   12788:	781b      	ldrb	r3, [r3, #0]
   1278a:	2b00      	cmp	r3, #0
   1278c:	d10f      	bne.n	127ae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1278e:	230f      	movs	r3, #15
   12790:	18fb      	adds	r3, r7, r3
   12792:	781b      	ldrb	r3, [r3, #0]
   12794:	009b      	lsls	r3, r3, #2
   12796:	2210      	movs	r2, #16
   12798:	4694      	mov	ip, r2
   1279a:	44bc      	add	ip, r7
   1279c:	4463      	add	r3, ip
   1279e:	3b08      	subs	r3, #8
   127a0:	681a      	ldr	r2, [r3, #0]
   127a2:	230e      	movs	r3, #14
   127a4:	18fb      	adds	r3, r7, r3
   127a6:	781b      	ldrb	r3, [r3, #0]
   127a8:	01db      	lsls	r3, r3, #7
   127aa:	18d3      	adds	r3, r2, r3
   127ac:	e000      	b.n	127b0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   127ae:	2300      	movs	r3, #0
}
   127b0:	0018      	movs	r0, r3
   127b2:	46bd      	mov	sp, r7
   127b4:	b004      	add	sp, #16
   127b6:	bd80      	pop	{r7, pc}
   127b8:	41004400 	.word	0x41004400

000127bc <port_get_group_from_gpio_pin>:
{
   127bc:	b580      	push	{r7, lr}
   127be:	b082      	sub	sp, #8
   127c0:	af00      	add	r7, sp, #0
   127c2:	0002      	movs	r2, r0
   127c4:	1dfb      	adds	r3, r7, #7
   127c6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   127c8:	1dfb      	adds	r3, r7, #7
   127ca:	781b      	ldrb	r3, [r3, #0]
   127cc:	0018      	movs	r0, r3
   127ce:	4b03      	ldr	r3, [pc, #12]	; (127dc <port_get_group_from_gpio_pin+0x20>)
   127d0:	4798      	blx	r3
   127d2:	0003      	movs	r3, r0
}
   127d4:	0018      	movs	r0, r3
   127d6:	46bd      	mov	sp, r7
   127d8:	b002      	add	sp, #8
   127da:	bd80      	pop	{r7, pc}
   127dc:	0001275d 	.word	0x0001275d

000127e0 <port_get_config_defaults>:
{
   127e0:	b580      	push	{r7, lr}
   127e2:	b082      	sub	sp, #8
   127e4:	af00      	add	r7, sp, #0
   127e6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   127e8:	687b      	ldr	r3, [r7, #4]
   127ea:	2200      	movs	r2, #0
   127ec:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   127ee:	687b      	ldr	r3, [r7, #4]
   127f0:	2201      	movs	r2, #1
   127f2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   127f4:	687b      	ldr	r3, [r7, #4]
   127f6:	2200      	movs	r2, #0
   127f8:	709a      	strb	r2, [r3, #2]
}
   127fa:	46c0      	nop			; (mov r8, r8)
   127fc:	46bd      	mov	sp, r7
   127fe:	b002      	add	sp, #8
   12800:	bd80      	pop	{r7, pc}
	...

00012804 <port_pin_set_output_level>:
{
   12804:	b580      	push	{r7, lr}
   12806:	b084      	sub	sp, #16
   12808:	af00      	add	r7, sp, #0
   1280a:	0002      	movs	r2, r0
   1280c:	1dfb      	adds	r3, r7, #7
   1280e:	701a      	strb	r2, [r3, #0]
   12810:	1dbb      	adds	r3, r7, #6
   12812:	1c0a      	adds	r2, r1, #0
   12814:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   12816:	1dfb      	adds	r3, r7, #7
   12818:	781b      	ldrb	r3, [r3, #0]
   1281a:	0018      	movs	r0, r3
   1281c:	4b0d      	ldr	r3, [pc, #52]	; (12854 <port_pin_set_output_level+0x50>)
   1281e:	4798      	blx	r3
   12820:	0003      	movs	r3, r0
   12822:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12824:	1dfb      	adds	r3, r7, #7
   12826:	781b      	ldrb	r3, [r3, #0]
   12828:	221f      	movs	r2, #31
   1282a:	4013      	ands	r3, r2
   1282c:	2201      	movs	r2, #1
   1282e:	409a      	lsls	r2, r3
   12830:	0013      	movs	r3, r2
   12832:	60bb      	str	r3, [r7, #8]
	if (level) {
   12834:	1dbb      	adds	r3, r7, #6
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	2b00      	cmp	r3, #0
   1283a:	d003      	beq.n	12844 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1283c:	68fb      	ldr	r3, [r7, #12]
   1283e:	68ba      	ldr	r2, [r7, #8]
   12840:	619a      	str	r2, [r3, #24]
}
   12842:	e002      	b.n	1284a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   12844:	68fb      	ldr	r3, [r7, #12]
   12846:	68ba      	ldr	r2, [r7, #8]
   12848:	615a      	str	r2, [r3, #20]
}
   1284a:	46c0      	nop			; (mov r8, r8)
   1284c:	46bd      	mov	sp, r7
   1284e:	b004      	add	sp, #16
   12850:	bd80      	pop	{r7, pc}
   12852:	46c0      	nop			; (mov r8, r8)
   12854:	000127bd 	.word	0x000127bd

00012858 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   12858:	b580      	push	{r7, lr}
   1285a:	b082      	sub	sp, #8
   1285c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1285e:	1d3b      	adds	r3, r7, #4
   12860:	0018      	movs	r0, r3
   12862:	4b0e      	ldr	r3, [pc, #56]	; (1289c <system_board_init+0x44>)
   12864:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   12866:	1d3b      	adds	r3, r7, #4
   12868:	2201      	movs	r2, #1
   1286a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   1286c:	1d3b      	adds	r3, r7, #4
   1286e:	0019      	movs	r1, r3
   12870:	2017      	movs	r0, #23
   12872:	4b0b      	ldr	r3, [pc, #44]	; (128a0 <system_board_init+0x48>)
   12874:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   12876:	2101      	movs	r1, #1
   12878:	2017      	movs	r0, #23
   1287a:	4b0a      	ldr	r3, [pc, #40]	; (128a4 <system_board_init+0x4c>)
   1287c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1287e:	1d3b      	adds	r3, r7, #4
   12880:	2200      	movs	r2, #0
   12882:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   12884:	1d3b      	adds	r3, r7, #4
   12886:	2201      	movs	r2, #1
   12888:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   1288a:	1d3b      	adds	r3, r7, #4
   1288c:	0019      	movs	r1, r3
   1288e:	2037      	movs	r0, #55	; 0x37
   12890:	4b03      	ldr	r3, [pc, #12]	; (128a0 <system_board_init+0x48>)
   12892:	4798      	blx	r3
}
   12894:	46c0      	nop			; (mov r8, r8)
   12896:	46bd      	mov	sp, r7
   12898:	b002      	add	sp, #8
   1289a:	bd80      	pop	{r7, pc}
   1289c:	000127e1 	.word	0x000127e1
   128a0:	00012ecd 	.word	0x00012ecd
   128a4:	00012805 	.word	0x00012805

000128a8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   128a8:	b580      	push	{r7, lr}
   128aa:	b084      	sub	sp, #16
   128ac:	af00      	add	r7, sp, #0
   128ae:	0002      	movs	r2, r0
   128b0:	1dfb      	adds	r3, r7, #7
   128b2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   128b4:	230f      	movs	r3, #15
   128b6:	18fb      	adds	r3, r7, r3
   128b8:	1dfa      	adds	r2, r7, #7
   128ba:	7812      	ldrb	r2, [r2, #0]
   128bc:	0952      	lsrs	r2, r2, #5
   128be:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   128c0:	230f      	movs	r3, #15
   128c2:	18fb      	adds	r3, r7, r3
   128c4:	781b      	ldrb	r3, [r3, #0]
   128c6:	2b00      	cmp	r3, #0
   128c8:	d10c      	bne.n	128e4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   128ca:	4b09      	ldr	r3, [pc, #36]	; (128f0 <_extint_get_eic_from_channel+0x48>)
   128cc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   128ce:	230f      	movs	r3, #15
   128d0:	18fb      	adds	r3, r7, r3
   128d2:	781b      	ldrb	r3, [r3, #0]
   128d4:	009b      	lsls	r3, r3, #2
   128d6:	2210      	movs	r2, #16
   128d8:	4694      	mov	ip, r2
   128da:	44bc      	add	ip, r7
   128dc:	4463      	add	r3, ip
   128de:	3b08      	subs	r3, #8
   128e0:	681b      	ldr	r3, [r3, #0]
   128e2:	e000      	b.n	128e6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   128e4:	2300      	movs	r3, #0
	}
}
   128e6:	0018      	movs	r0, r3
   128e8:	46bd      	mov	sp, r7
   128ea:	b004      	add	sp, #16
   128ec:	bd80      	pop	{r7, pc}
   128ee:	46c0      	nop			; (mov r8, r8)
   128f0:	40001800 	.word	0x40001800

000128f4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   128f4:	b580      	push	{r7, lr}
   128f6:	b084      	sub	sp, #16
   128f8:	af00      	add	r7, sp, #0
   128fa:	0002      	movs	r2, r0
   128fc:	1dfb      	adds	r3, r7, #7
   128fe:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   12900:	1dfb      	adds	r3, r7, #7
   12902:	781b      	ldrb	r3, [r3, #0]
   12904:	0018      	movs	r0, r3
   12906:	4b0b      	ldr	r3, [pc, #44]	; (12934 <extint_chan_is_detected+0x40>)
   12908:	4798      	blx	r3
   1290a:	0003      	movs	r3, r0
   1290c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   1290e:	1dfb      	adds	r3, r7, #7
   12910:	781b      	ldrb	r3, [r3, #0]
   12912:	221f      	movs	r2, #31
   12914:	4013      	ands	r3, r2
   12916:	2201      	movs	r2, #1
   12918:	409a      	lsls	r2, r3
   1291a:	0013      	movs	r3, r2
   1291c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   1291e:	68fb      	ldr	r3, [r7, #12]
   12920:	691b      	ldr	r3, [r3, #16]
   12922:	68ba      	ldr	r2, [r7, #8]
   12924:	4013      	ands	r3, r2
   12926:	1e5a      	subs	r2, r3, #1
   12928:	4193      	sbcs	r3, r2
   1292a:	b2db      	uxtb	r3, r3
}
   1292c:	0018      	movs	r0, r3
   1292e:	46bd      	mov	sp, r7
   12930:	b004      	add	sp, #16
   12932:	bd80      	pop	{r7, pc}
   12934:	000128a9 	.word	0x000128a9

00012938 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   12938:	b580      	push	{r7, lr}
   1293a:	b084      	sub	sp, #16
   1293c:	af00      	add	r7, sp, #0
   1293e:	0002      	movs	r2, r0
   12940:	1dfb      	adds	r3, r7, #7
   12942:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   12944:	1dfb      	adds	r3, r7, #7
   12946:	781b      	ldrb	r3, [r3, #0]
   12948:	0018      	movs	r0, r3
   1294a:	4b09      	ldr	r3, [pc, #36]	; (12970 <extint_chan_clear_detected+0x38>)
   1294c:	4798      	blx	r3
   1294e:	0003      	movs	r3, r0
   12950:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   12952:	1dfb      	adds	r3, r7, #7
   12954:	781b      	ldrb	r3, [r3, #0]
   12956:	221f      	movs	r2, #31
   12958:	4013      	ands	r3, r2
   1295a:	2201      	movs	r2, #1
   1295c:	409a      	lsls	r2, r3
   1295e:	0013      	movs	r3, r2
   12960:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   12962:	68fb      	ldr	r3, [r7, #12]
   12964:	68ba      	ldr	r2, [r7, #8]
   12966:	611a      	str	r2, [r3, #16]
}
   12968:	46c0      	nop			; (mov r8, r8)
   1296a:	46bd      	mov	sp, r7
   1296c:	b004      	add	sp, #16
   1296e:	bd80      	pop	{r7, pc}
   12970:	000128a9 	.word	0x000128a9

00012974 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   12974:	b580      	push	{r7, lr}
   12976:	b082      	sub	sp, #8
   12978:	af00      	add	r7, sp, #0
   1297a:	6078      	str	r0, [r7, #4]
   1297c:	0008      	movs	r0, r1
   1297e:	0011      	movs	r1, r2
   12980:	1cfb      	adds	r3, r7, #3
   12982:	1c02      	adds	r2, r0, #0
   12984:	701a      	strb	r2, [r3, #0]
   12986:	1cbb      	adds	r3, r7, #2
   12988:	1c0a      	adds	r2, r1, #0
   1298a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   1298c:	1cbb      	adds	r3, r7, #2
   1298e:	781b      	ldrb	r3, [r3, #0]
   12990:	2b00      	cmp	r3, #0
   12992:	d001      	beq.n	12998 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   12994:	2317      	movs	r3, #23
   12996:	e019      	b.n	129cc <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   12998:	1cfb      	adds	r3, r7, #3
   1299a:	781a      	ldrb	r2, [r3, #0]
   1299c:	4b0d      	ldr	r3, [pc, #52]	; (129d4 <extint_register_callback+0x60>)
   1299e:	0092      	lsls	r2, r2, #2
   129a0:	58d3      	ldr	r3, [r2, r3]
   129a2:	2b00      	cmp	r3, #0
   129a4:	d107      	bne.n	129b6 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   129a6:	1cfb      	adds	r3, r7, #3
   129a8:	781a      	ldrb	r2, [r3, #0]
   129aa:	4b0a      	ldr	r3, [pc, #40]	; (129d4 <extint_register_callback+0x60>)
   129ac:	0092      	lsls	r2, r2, #2
   129ae:	6879      	ldr	r1, [r7, #4]
   129b0:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   129b2:	2300      	movs	r3, #0
   129b4:	e00a      	b.n	129cc <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   129b6:	1cfb      	adds	r3, r7, #3
   129b8:	781a      	ldrb	r2, [r3, #0]
   129ba:	4b06      	ldr	r3, [pc, #24]	; (129d4 <extint_register_callback+0x60>)
   129bc:	0092      	lsls	r2, r2, #2
   129be:	58d2      	ldr	r2, [r2, r3]
   129c0:	687b      	ldr	r3, [r7, #4]
   129c2:	429a      	cmp	r2, r3
   129c4:	d101      	bne.n	129ca <extint_register_callback+0x56>
		return STATUS_OK;
   129c6:	2300      	movs	r3, #0
   129c8:	e000      	b.n	129cc <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   129ca:	231d      	movs	r3, #29
}
   129cc:	0018      	movs	r0, r3
   129ce:	46bd      	mov	sp, r7
   129d0:	b002      	add	sp, #8
   129d2:	bd80      	pop	{r7, pc}
   129d4:	200059c8 	.word	0x200059c8

000129d8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   129d8:	b580      	push	{r7, lr}
   129da:	b084      	sub	sp, #16
   129dc:	af00      	add	r7, sp, #0
   129de:	0002      	movs	r2, r0
   129e0:	1dfb      	adds	r3, r7, #7
   129e2:	701a      	strb	r2, [r3, #0]
   129e4:	1dbb      	adds	r3, r7, #6
   129e6:	1c0a      	adds	r2, r1, #0
   129e8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   129ea:	1dbb      	adds	r3, r7, #6
   129ec:	781b      	ldrb	r3, [r3, #0]
   129ee:	2b00      	cmp	r3, #0
   129f0:	d10e      	bne.n	12a10 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   129f2:	1dfb      	adds	r3, r7, #7
   129f4:	781b      	ldrb	r3, [r3, #0]
   129f6:	0018      	movs	r0, r3
   129f8:	4b08      	ldr	r3, [pc, #32]	; (12a1c <extint_chan_enable_callback+0x44>)
   129fa:	4798      	blx	r3
   129fc:	0003      	movs	r3, r0
   129fe:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   12a00:	1dfb      	adds	r3, r7, #7
   12a02:	781b      	ldrb	r3, [r3, #0]
   12a04:	2201      	movs	r2, #1
   12a06:	409a      	lsls	r2, r3
   12a08:	68fb      	ldr	r3, [r7, #12]
   12a0a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   12a0c:	2300      	movs	r3, #0
   12a0e:	e000      	b.n	12a12 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   12a10:	2317      	movs	r3, #23
}
   12a12:	0018      	movs	r0, r3
   12a14:	46bd      	mov	sp, r7
   12a16:	b004      	add	sp, #16
   12a18:	bd80      	pop	{r7, pc}
   12a1a:	46c0      	nop			; (mov r8, r8)
   12a1c:	000128a9 	.word	0x000128a9

00012a20 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   12a20:	b580      	push	{r7, lr}
   12a22:	b084      	sub	sp, #16
   12a24:	af00      	add	r7, sp, #0
   12a26:	0002      	movs	r2, r0
   12a28:	1dfb      	adds	r3, r7, #7
   12a2a:	701a      	strb	r2, [r3, #0]
   12a2c:	1dbb      	adds	r3, r7, #6
   12a2e:	1c0a      	adds	r2, r1, #0
   12a30:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   12a32:	1dbb      	adds	r3, r7, #6
   12a34:	781b      	ldrb	r3, [r3, #0]
   12a36:	2b00      	cmp	r3, #0
   12a38:	d10e      	bne.n	12a58 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   12a3a:	1dfb      	adds	r3, r7, #7
   12a3c:	781b      	ldrb	r3, [r3, #0]
   12a3e:	0018      	movs	r0, r3
   12a40:	4b08      	ldr	r3, [pc, #32]	; (12a64 <extint_chan_disable_callback+0x44>)
   12a42:	4798      	blx	r3
   12a44:	0003      	movs	r3, r0
   12a46:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   12a48:	1dfb      	adds	r3, r7, #7
   12a4a:	781b      	ldrb	r3, [r3, #0]
   12a4c:	2201      	movs	r2, #1
   12a4e:	409a      	lsls	r2, r3
   12a50:	68fb      	ldr	r3, [r7, #12]
   12a52:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   12a54:	2300      	movs	r3, #0
   12a56:	e000      	b.n	12a5a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   12a58:	2317      	movs	r3, #23
}
   12a5a:	0018      	movs	r0, r3
   12a5c:	46bd      	mov	sp, r7
   12a5e:	b004      	add	sp, #16
   12a60:	bd80      	pop	{r7, pc}
   12a62:	46c0      	nop			; (mov r8, r8)
   12a64:	000128a9 	.word	0x000128a9

00012a68 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   12a68:	b580      	push	{r7, lr}
   12a6a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   12a6c:	4b15      	ldr	r3, [pc, #84]	; (12ac4 <EIC_Handler+0x5c>)
   12a6e:	2200      	movs	r2, #0
   12a70:	701a      	strb	r2, [r3, #0]
   12a72:	e020      	b.n	12ab6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   12a74:	4b13      	ldr	r3, [pc, #76]	; (12ac4 <EIC_Handler+0x5c>)
   12a76:	781b      	ldrb	r3, [r3, #0]
   12a78:	0018      	movs	r0, r3
   12a7a:	4b13      	ldr	r3, [pc, #76]	; (12ac8 <EIC_Handler+0x60>)
   12a7c:	4798      	blx	r3
   12a7e:	1e03      	subs	r3, r0, #0
   12a80:	d013      	beq.n	12aaa <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   12a82:	4b10      	ldr	r3, [pc, #64]	; (12ac4 <EIC_Handler+0x5c>)
   12a84:	781b      	ldrb	r3, [r3, #0]
   12a86:	0018      	movs	r0, r3
   12a88:	4b10      	ldr	r3, [pc, #64]	; (12acc <EIC_Handler+0x64>)
   12a8a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   12a8c:	4b0d      	ldr	r3, [pc, #52]	; (12ac4 <EIC_Handler+0x5c>)
   12a8e:	781b      	ldrb	r3, [r3, #0]
   12a90:	001a      	movs	r2, r3
   12a92:	4b0f      	ldr	r3, [pc, #60]	; (12ad0 <EIC_Handler+0x68>)
   12a94:	0092      	lsls	r2, r2, #2
   12a96:	58d3      	ldr	r3, [r2, r3]
   12a98:	2b00      	cmp	r3, #0
   12a9a:	d006      	beq.n	12aaa <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   12a9c:	4b09      	ldr	r3, [pc, #36]	; (12ac4 <EIC_Handler+0x5c>)
   12a9e:	781b      	ldrb	r3, [r3, #0]
   12aa0:	001a      	movs	r2, r3
   12aa2:	4b0b      	ldr	r3, [pc, #44]	; (12ad0 <EIC_Handler+0x68>)
   12aa4:	0092      	lsls	r2, r2, #2
   12aa6:	58d3      	ldr	r3, [r2, r3]
   12aa8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   12aaa:	4b06      	ldr	r3, [pc, #24]	; (12ac4 <EIC_Handler+0x5c>)
   12aac:	781b      	ldrb	r3, [r3, #0]
   12aae:	3301      	adds	r3, #1
   12ab0:	b2da      	uxtb	r2, r3
   12ab2:	4b04      	ldr	r3, [pc, #16]	; (12ac4 <EIC_Handler+0x5c>)
   12ab4:	701a      	strb	r2, [r3, #0]
   12ab6:	4b03      	ldr	r3, [pc, #12]	; (12ac4 <EIC_Handler+0x5c>)
   12ab8:	781b      	ldrb	r3, [r3, #0]
   12aba:	2b0f      	cmp	r3, #15
   12abc:	d9da      	bls.n	12a74 <EIC_Handler+0xc>
			}
		}
	}
}
   12abe:	46c0      	nop			; (mov r8, r8)
   12ac0:	46bd      	mov	sp, r7
   12ac2:	bd80      	pop	{r7, pc}
   12ac4:	200059c4 	.word	0x200059c4
   12ac8:	000128f5 	.word	0x000128f5
   12acc:	00012939 	.word	0x00012939
   12ad0:	200059c8 	.word	0x200059c8

00012ad4 <system_gclk_chan_get_config_defaults>:
{
   12ad4:	b580      	push	{r7, lr}
   12ad6:	b082      	sub	sp, #8
   12ad8:	af00      	add	r7, sp, #0
   12ada:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   12adc:	687b      	ldr	r3, [r7, #4]
   12ade:	2200      	movs	r2, #0
   12ae0:	701a      	strb	r2, [r3, #0]
}
   12ae2:	46c0      	nop			; (mov r8, r8)
   12ae4:	46bd      	mov	sp, r7
   12ae6:	b002      	add	sp, #8
   12ae8:	bd80      	pop	{r7, pc}
	...

00012aec <system_apb_clock_set_mask>:
{
   12aec:	b580      	push	{r7, lr}
   12aee:	b082      	sub	sp, #8
   12af0:	af00      	add	r7, sp, #0
   12af2:	0002      	movs	r2, r0
   12af4:	6039      	str	r1, [r7, #0]
   12af6:	1dfb      	adds	r3, r7, #7
   12af8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12afa:	1dfb      	adds	r3, r7, #7
   12afc:	781b      	ldrb	r3, [r3, #0]
   12afe:	2b01      	cmp	r3, #1
   12b00:	d00a      	beq.n	12b18 <system_apb_clock_set_mask+0x2c>
   12b02:	2b02      	cmp	r3, #2
   12b04:	d00f      	beq.n	12b26 <system_apb_clock_set_mask+0x3a>
   12b06:	2b00      	cmp	r3, #0
   12b08:	d114      	bne.n	12b34 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   12b0a:	4b0e      	ldr	r3, [pc, #56]	; (12b44 <system_apb_clock_set_mask+0x58>)
   12b0c:	4a0d      	ldr	r2, [pc, #52]	; (12b44 <system_apb_clock_set_mask+0x58>)
   12b0e:	6991      	ldr	r1, [r2, #24]
   12b10:	683a      	ldr	r2, [r7, #0]
   12b12:	430a      	orrs	r2, r1
   12b14:	619a      	str	r2, [r3, #24]
			break;
   12b16:	e00f      	b.n	12b38 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   12b18:	4b0a      	ldr	r3, [pc, #40]	; (12b44 <system_apb_clock_set_mask+0x58>)
   12b1a:	4a0a      	ldr	r2, [pc, #40]	; (12b44 <system_apb_clock_set_mask+0x58>)
   12b1c:	69d1      	ldr	r1, [r2, #28]
   12b1e:	683a      	ldr	r2, [r7, #0]
   12b20:	430a      	orrs	r2, r1
   12b22:	61da      	str	r2, [r3, #28]
			break;
   12b24:	e008      	b.n	12b38 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   12b26:	4b07      	ldr	r3, [pc, #28]	; (12b44 <system_apb_clock_set_mask+0x58>)
   12b28:	4a06      	ldr	r2, [pc, #24]	; (12b44 <system_apb_clock_set_mask+0x58>)
   12b2a:	6a11      	ldr	r1, [r2, #32]
   12b2c:	683a      	ldr	r2, [r7, #0]
   12b2e:	430a      	orrs	r2, r1
   12b30:	621a      	str	r2, [r3, #32]
			break;
   12b32:	e001      	b.n	12b38 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   12b34:	2317      	movs	r3, #23
   12b36:	e000      	b.n	12b3a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   12b38:	2300      	movs	r3, #0
}
   12b3a:	0018      	movs	r0, r3
   12b3c:	46bd      	mov	sp, r7
   12b3e:	b002      	add	sp, #8
   12b40:	bd80      	pop	{r7, pc}
   12b42:	46c0      	nop			; (mov r8, r8)
   12b44:	40000400 	.word	0x40000400

00012b48 <system_pinmux_get_config_defaults>:
{
   12b48:	b580      	push	{r7, lr}
   12b4a:	b082      	sub	sp, #8
   12b4c:	af00      	add	r7, sp, #0
   12b4e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   12b50:	687b      	ldr	r3, [r7, #4]
   12b52:	2280      	movs	r2, #128	; 0x80
   12b54:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12b56:	687b      	ldr	r3, [r7, #4]
   12b58:	2200      	movs	r2, #0
   12b5a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   12b5c:	687b      	ldr	r3, [r7, #4]
   12b5e:	2201      	movs	r2, #1
   12b60:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   12b62:	687b      	ldr	r3, [r7, #4]
   12b64:	2200      	movs	r2, #0
   12b66:	70da      	strb	r2, [r3, #3]
}
   12b68:	46c0      	nop			; (mov r8, r8)
   12b6a:	46bd      	mov	sp, r7
   12b6c:	b002      	add	sp, #8
   12b6e:	bd80      	pop	{r7, pc}

00012b70 <system_interrupt_enable>:
{
   12b70:	b580      	push	{r7, lr}
   12b72:	b082      	sub	sp, #8
   12b74:	af00      	add	r7, sp, #0
   12b76:	0002      	movs	r2, r0
   12b78:	1dfb      	adds	r3, r7, #7
   12b7a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12b7c:	4b06      	ldr	r3, [pc, #24]	; (12b98 <system_interrupt_enable+0x28>)
   12b7e:	1dfa      	adds	r2, r7, #7
   12b80:	7812      	ldrb	r2, [r2, #0]
   12b82:	0011      	movs	r1, r2
   12b84:	221f      	movs	r2, #31
   12b86:	400a      	ands	r2, r1
   12b88:	2101      	movs	r1, #1
   12b8a:	4091      	lsls	r1, r2
   12b8c:	000a      	movs	r2, r1
   12b8e:	601a      	str	r2, [r3, #0]
}
   12b90:	46c0      	nop			; (mov r8, r8)
   12b92:	46bd      	mov	sp, r7
   12b94:	b002      	add	sp, #8
   12b96:	bd80      	pop	{r7, pc}
   12b98:	e000e100 	.word	0xe000e100

00012b9c <_extint_get_eic_from_channel>:
{
   12b9c:	b580      	push	{r7, lr}
   12b9e:	b084      	sub	sp, #16
   12ba0:	af00      	add	r7, sp, #0
   12ba2:	0002      	movs	r2, r0
   12ba4:	1dfb      	adds	r3, r7, #7
   12ba6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   12ba8:	230f      	movs	r3, #15
   12baa:	18fb      	adds	r3, r7, r3
   12bac:	1dfa      	adds	r2, r7, #7
   12bae:	7812      	ldrb	r2, [r2, #0]
   12bb0:	0952      	lsrs	r2, r2, #5
   12bb2:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   12bb4:	230f      	movs	r3, #15
   12bb6:	18fb      	adds	r3, r7, r3
   12bb8:	781b      	ldrb	r3, [r3, #0]
   12bba:	2b00      	cmp	r3, #0
   12bbc:	d10c      	bne.n	12bd8 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   12bbe:	4b09      	ldr	r3, [pc, #36]	; (12be4 <_extint_get_eic_from_channel+0x48>)
   12bc0:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   12bc2:	230f      	movs	r3, #15
   12bc4:	18fb      	adds	r3, r7, r3
   12bc6:	781b      	ldrb	r3, [r3, #0]
   12bc8:	009b      	lsls	r3, r3, #2
   12bca:	2210      	movs	r2, #16
   12bcc:	4694      	mov	ip, r2
   12bce:	44bc      	add	ip, r7
   12bd0:	4463      	add	r3, ip
   12bd2:	3b08      	subs	r3, #8
   12bd4:	681b      	ldr	r3, [r3, #0]
   12bd6:	e000      	b.n	12bda <_extint_get_eic_from_channel+0x3e>
		return NULL;
   12bd8:	2300      	movs	r3, #0
}
   12bda:	0018      	movs	r0, r3
   12bdc:	46bd      	mov	sp, r7
   12bde:	b004      	add	sp, #16
   12be0:	bd80      	pop	{r7, pc}
   12be2:	46c0      	nop			; (mov r8, r8)
   12be4:	40001800 	.word	0x40001800

00012be8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   12be8:	b580      	push	{r7, lr}
   12bea:	b082      	sub	sp, #8
   12bec:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   12bee:	4b0f      	ldr	r3, [pc, #60]	; (12c2c <extint_is_syncing+0x44>)
   12bf0:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12bf2:	2300      	movs	r3, #0
   12bf4:	607b      	str	r3, [r7, #4]
   12bf6:	e011      	b.n	12c1c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   12bf8:	687b      	ldr	r3, [r7, #4]
   12bfa:	009b      	lsls	r3, r3, #2
   12bfc:	2208      	movs	r2, #8
   12bfe:	4694      	mov	ip, r2
   12c00:	44bc      	add	ip, r7
   12c02:	4463      	add	r3, ip
   12c04:	3b08      	subs	r3, #8
   12c06:	681b      	ldr	r3, [r3, #0]
   12c08:	785b      	ldrb	r3, [r3, #1]
   12c0a:	b2db      	uxtb	r3, r3
   12c0c:	b25b      	sxtb	r3, r3
   12c0e:	2b00      	cmp	r3, #0
   12c10:	da01      	bge.n	12c16 <extint_is_syncing+0x2e>
			return true;
   12c12:	2301      	movs	r3, #1
   12c14:	e006      	b.n	12c24 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12c16:	687b      	ldr	r3, [r7, #4]
   12c18:	3301      	adds	r3, #1
   12c1a:	607b      	str	r3, [r7, #4]
   12c1c:	687b      	ldr	r3, [r7, #4]
   12c1e:	2b00      	cmp	r3, #0
   12c20:	d0ea      	beq.n	12bf8 <extint_is_syncing+0x10>
		}
	}
	return false;
   12c22:	2300      	movs	r3, #0
}
   12c24:	0018      	movs	r0, r3
   12c26:	46bd      	mov	sp, r7
   12c28:	b002      	add	sp, #8
   12c2a:	bd80      	pop	{r7, pc}
   12c2c:	40001800 	.word	0x40001800

00012c30 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   12c30:	b580      	push	{r7, lr}
   12c32:	b084      	sub	sp, #16
   12c34:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   12c36:	4b2d      	ldr	r3, [pc, #180]	; (12cec <_system_extint_init+0xbc>)
   12c38:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   12c3a:	2140      	movs	r1, #64	; 0x40
   12c3c:	2000      	movs	r0, #0
   12c3e:	4b2c      	ldr	r3, [pc, #176]	; (12cf0 <_system_extint_init+0xc0>)
   12c40:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12c42:	003b      	movs	r3, r7
   12c44:	0018      	movs	r0, r3
   12c46:	4b2b      	ldr	r3, [pc, #172]	; (12cf4 <_system_extint_init+0xc4>)
   12c48:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   12c4a:	003b      	movs	r3, r7
   12c4c:	2200      	movs	r2, #0
   12c4e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   12c50:	003b      	movs	r3, r7
   12c52:	0019      	movs	r1, r3
   12c54:	2005      	movs	r0, #5
   12c56:	4b28      	ldr	r3, [pc, #160]	; (12cf8 <_system_extint_init+0xc8>)
   12c58:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   12c5a:	2005      	movs	r0, #5
   12c5c:	4b27      	ldr	r3, [pc, #156]	; (12cfc <_system_extint_init+0xcc>)
   12c5e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12c60:	2300      	movs	r3, #0
   12c62:	60fb      	str	r3, [r7, #12]
   12c64:	e018      	b.n	12c98 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   12c66:	68fb      	ldr	r3, [r7, #12]
   12c68:	009b      	lsls	r3, r3, #2
   12c6a:	2210      	movs	r2, #16
   12c6c:	4694      	mov	ip, r2
   12c6e:	44bc      	add	ip, r7
   12c70:	4463      	add	r3, ip
   12c72:	3b0c      	subs	r3, #12
   12c74:	681a      	ldr	r2, [r3, #0]
   12c76:	68fb      	ldr	r3, [r7, #12]
   12c78:	009b      	lsls	r3, r3, #2
   12c7a:	2110      	movs	r1, #16
   12c7c:	468c      	mov	ip, r1
   12c7e:	44bc      	add	ip, r7
   12c80:	4463      	add	r3, ip
   12c82:	3b0c      	subs	r3, #12
   12c84:	681b      	ldr	r3, [r3, #0]
   12c86:	781b      	ldrb	r3, [r3, #0]
   12c88:	b2db      	uxtb	r3, r3
   12c8a:	2101      	movs	r1, #1
   12c8c:	430b      	orrs	r3, r1
   12c8e:	b2db      	uxtb	r3, r3
   12c90:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12c92:	68fb      	ldr	r3, [r7, #12]
   12c94:	3301      	adds	r3, #1
   12c96:	60fb      	str	r3, [r7, #12]
   12c98:	68fb      	ldr	r3, [r7, #12]
   12c9a:	2b00      	cmp	r3, #0
   12c9c:	d0e3      	beq.n	12c66 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   12c9e:	46c0      	nop			; (mov r8, r8)
   12ca0:	4b17      	ldr	r3, [pc, #92]	; (12d00 <_system_extint_init+0xd0>)
   12ca2:	4798      	blx	r3
   12ca4:	1e03      	subs	r3, r0, #0
   12ca6:	d1fb      	bne.n	12ca0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   12ca8:	230b      	movs	r3, #11
   12caa:	18fb      	adds	r3, r7, r3
   12cac:	2200      	movs	r2, #0
   12cae:	701a      	strb	r2, [r3, #0]
   12cb0:	e00d      	b.n	12cce <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   12cb2:	230b      	movs	r3, #11
   12cb4:	18fb      	adds	r3, r7, r3
   12cb6:	781a      	ldrb	r2, [r3, #0]
   12cb8:	4b12      	ldr	r3, [pc, #72]	; (12d04 <_system_extint_init+0xd4>)
   12cba:	0092      	lsls	r2, r2, #2
   12cbc:	2100      	movs	r1, #0
   12cbe:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   12cc0:	230b      	movs	r3, #11
   12cc2:	18fb      	adds	r3, r7, r3
   12cc4:	781a      	ldrb	r2, [r3, #0]
   12cc6:	230b      	movs	r3, #11
   12cc8:	18fb      	adds	r3, r7, r3
   12cca:	3201      	adds	r2, #1
   12ccc:	701a      	strb	r2, [r3, #0]
   12cce:	230b      	movs	r3, #11
   12cd0:	18fb      	adds	r3, r7, r3
   12cd2:	781b      	ldrb	r3, [r3, #0]
   12cd4:	2b0f      	cmp	r3, #15
   12cd6:	d9ec      	bls.n	12cb2 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   12cd8:	2004      	movs	r0, #4
   12cda:	4b0b      	ldr	r3, [pc, #44]	; (12d08 <_system_extint_init+0xd8>)
   12cdc:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   12cde:	4b0b      	ldr	r3, [pc, #44]	; (12d0c <_system_extint_init+0xdc>)
   12ce0:	4798      	blx	r3
}
   12ce2:	46c0      	nop			; (mov r8, r8)
   12ce4:	46bd      	mov	sp, r7
   12ce6:	b004      	add	sp, #16
   12ce8:	bd80      	pop	{r7, pc}
   12cea:	46c0      	nop			; (mov r8, r8)
   12cec:	40001800 	.word	0x40001800
   12cf0:	00012aed 	.word	0x00012aed
   12cf4:	00012ad5 	.word	0x00012ad5
   12cf8:	0001635d 	.word	0x0001635d
   12cfc:	000163a1 	.word	0x000163a1
   12d00:	00012be9 	.word	0x00012be9
   12d04:	200059c8 	.word	0x200059c8
   12d08:	00012b71 	.word	0x00012b71
   12d0c:	00012d11 	.word	0x00012d11

00012d10 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   12d10:	b580      	push	{r7, lr}
   12d12:	b082      	sub	sp, #8
   12d14:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   12d16:	4b15      	ldr	r3, [pc, #84]	; (12d6c <_extint_enable+0x5c>)
   12d18:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12d1a:	2300      	movs	r3, #0
   12d1c:	607b      	str	r3, [r7, #4]
   12d1e:	e018      	b.n	12d52 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   12d20:	687b      	ldr	r3, [r7, #4]
   12d22:	009b      	lsls	r3, r3, #2
   12d24:	2208      	movs	r2, #8
   12d26:	4694      	mov	ip, r2
   12d28:	44bc      	add	ip, r7
   12d2a:	4463      	add	r3, ip
   12d2c:	3b08      	subs	r3, #8
   12d2e:	681a      	ldr	r2, [r3, #0]
   12d30:	687b      	ldr	r3, [r7, #4]
   12d32:	009b      	lsls	r3, r3, #2
   12d34:	2108      	movs	r1, #8
   12d36:	468c      	mov	ip, r1
   12d38:	44bc      	add	ip, r7
   12d3a:	4463      	add	r3, ip
   12d3c:	3b08      	subs	r3, #8
   12d3e:	681b      	ldr	r3, [r3, #0]
   12d40:	781b      	ldrb	r3, [r3, #0]
   12d42:	b2db      	uxtb	r3, r3
   12d44:	2102      	movs	r1, #2
   12d46:	430b      	orrs	r3, r1
   12d48:	b2db      	uxtb	r3, r3
   12d4a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12d4c:	687b      	ldr	r3, [r7, #4]
   12d4e:	3301      	adds	r3, #1
   12d50:	607b      	str	r3, [r7, #4]
   12d52:	687b      	ldr	r3, [r7, #4]
   12d54:	2b00      	cmp	r3, #0
   12d56:	d0e3      	beq.n	12d20 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   12d58:	46c0      	nop			; (mov r8, r8)
   12d5a:	4b05      	ldr	r3, [pc, #20]	; (12d70 <_extint_enable+0x60>)
   12d5c:	4798      	blx	r3
   12d5e:	1e03      	subs	r3, r0, #0
   12d60:	d1fb      	bne.n	12d5a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   12d62:	46c0      	nop			; (mov r8, r8)
   12d64:	46bd      	mov	sp, r7
   12d66:	b002      	add	sp, #8
   12d68:	bd80      	pop	{r7, pc}
   12d6a:	46c0      	nop			; (mov r8, r8)
   12d6c:	40001800 	.word	0x40001800
   12d70:	00012be9 	.word	0x00012be9

00012d74 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   12d74:	b580      	push	{r7, lr}
   12d76:	b082      	sub	sp, #8
   12d78:	af00      	add	r7, sp, #0
   12d7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   12d7c:	687b      	ldr	r3, [r7, #4]
   12d7e:	2200      	movs	r2, #0
   12d80:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   12d82:	687b      	ldr	r3, [r7, #4]
   12d84:	2200      	movs	r2, #0
   12d86:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   12d88:	687b      	ldr	r3, [r7, #4]
   12d8a:	2201      	movs	r2, #1
   12d8c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   12d8e:	687b      	ldr	r3, [r7, #4]
   12d90:	2201      	movs	r2, #1
   12d92:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   12d94:	687b      	ldr	r3, [r7, #4]
   12d96:	2200      	movs	r2, #0
   12d98:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   12d9a:	687b      	ldr	r3, [r7, #4]
   12d9c:	2202      	movs	r2, #2
   12d9e:	72da      	strb	r2, [r3, #11]
}
   12da0:	46c0      	nop			; (mov r8, r8)
   12da2:	46bd      	mov	sp, r7
   12da4:	b002      	add	sp, #8
   12da6:	bd80      	pop	{r7, pc}

00012da8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   12da8:	b580      	push	{r7, lr}
   12daa:	b086      	sub	sp, #24
   12dac:	af00      	add	r7, sp, #0
   12dae:	0002      	movs	r2, r0
   12db0:	6039      	str	r1, [r7, #0]
   12db2:	1dfb      	adds	r3, r7, #7
   12db4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   12db6:	2308      	movs	r3, #8
   12db8:	18fb      	adds	r3, r7, r3
   12dba:	0018      	movs	r0, r3
   12dbc:	4b36      	ldr	r3, [pc, #216]	; (12e98 <extint_chan_set_config+0xf0>)
   12dbe:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   12dc0:	683b      	ldr	r3, [r7, #0]
   12dc2:	685b      	ldr	r3, [r3, #4]
   12dc4:	b2da      	uxtb	r2, r3
   12dc6:	2308      	movs	r3, #8
   12dc8:	18fb      	adds	r3, r7, r3
   12dca:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12dcc:	2308      	movs	r3, #8
   12dce:	18fb      	adds	r3, r7, r3
   12dd0:	2200      	movs	r2, #0
   12dd2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   12dd4:	683b      	ldr	r3, [r7, #0]
   12dd6:	7a1a      	ldrb	r2, [r3, #8]
   12dd8:	2308      	movs	r3, #8
   12dda:	18fb      	adds	r3, r7, r3
   12ddc:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   12dde:	683b      	ldr	r3, [r7, #0]
   12de0:	681b      	ldr	r3, [r3, #0]
   12de2:	b2db      	uxtb	r3, r3
   12de4:	2208      	movs	r2, #8
   12de6:	18ba      	adds	r2, r7, r2
   12de8:	0011      	movs	r1, r2
   12dea:	0018      	movs	r0, r3
   12dec:	4b2b      	ldr	r3, [pc, #172]	; (12e9c <extint_chan_set_config+0xf4>)
   12dee:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   12df0:	1dfb      	adds	r3, r7, #7
   12df2:	781b      	ldrb	r3, [r3, #0]
   12df4:	0018      	movs	r0, r3
   12df6:	4b2a      	ldr	r3, [pc, #168]	; (12ea0 <extint_chan_set_config+0xf8>)
   12df8:	4798      	blx	r3
   12dfa:	0003      	movs	r3, r0
   12dfc:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   12dfe:	1dfb      	adds	r3, r7, #7
   12e00:	781b      	ldrb	r3, [r3, #0]
   12e02:	2207      	movs	r2, #7
   12e04:	4013      	ands	r3, r2
   12e06:	009b      	lsls	r3, r3, #2
   12e08:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   12e0a:	683b      	ldr	r3, [r7, #0]
   12e0c:	7adb      	ldrb	r3, [r3, #11]
   12e0e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   12e10:	683b      	ldr	r3, [r7, #0]
   12e12:	7a9b      	ldrb	r3, [r3, #10]
   12e14:	2b00      	cmp	r3, #0
   12e16:	d003      	beq.n	12e20 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   12e18:	697b      	ldr	r3, [r7, #20]
   12e1a:	2208      	movs	r2, #8
   12e1c:	4313      	orrs	r3, r2
   12e1e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   12e20:	1dfb      	adds	r3, r7, #7
   12e22:	781b      	ldrb	r3, [r3, #0]
   12e24:	08db      	lsrs	r3, r3, #3
   12e26:	b2db      	uxtb	r3, r3
   12e28:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   12e2a:	1dfb      	adds	r3, r7, #7
   12e2c:	781b      	ldrb	r3, [r3, #0]
   12e2e:	08db      	lsrs	r3, r3, #3
   12e30:	b2db      	uxtb	r3, r3
   12e32:	001a      	movs	r2, r3
   12e34:	693b      	ldr	r3, [r7, #16]
   12e36:	3206      	adds	r2, #6
   12e38:	0092      	lsls	r2, r2, #2
   12e3a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   12e3c:	210f      	movs	r1, #15
   12e3e:	68fa      	ldr	r2, [r7, #12]
   12e40:	4091      	lsls	r1, r2
   12e42:	000a      	movs	r2, r1
   12e44:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   12e46:	401a      	ands	r2, r3
			(new_config << config_pos);
   12e48:	6979      	ldr	r1, [r7, #20]
   12e4a:	68fb      	ldr	r3, [r7, #12]
   12e4c:	4099      	lsls	r1, r3
   12e4e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   12e50:	431a      	orrs	r2, r3
   12e52:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   12e54:	693b      	ldr	r3, [r7, #16]
   12e56:	1d82      	adds	r2, r0, #6
   12e58:	0092      	lsls	r2, r2, #2
   12e5a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   12e5c:	683b      	ldr	r3, [r7, #0]
   12e5e:	7a5b      	ldrb	r3, [r3, #9]
   12e60:	2b00      	cmp	r3, #0
   12e62:	d00a      	beq.n	12e7a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   12e64:	693b      	ldr	r3, [r7, #16]
   12e66:	695a      	ldr	r2, [r3, #20]
   12e68:	1dfb      	adds	r3, r7, #7
   12e6a:	781b      	ldrb	r3, [r3, #0]
   12e6c:	2101      	movs	r1, #1
   12e6e:	4099      	lsls	r1, r3
   12e70:	000b      	movs	r3, r1
   12e72:	431a      	orrs	r2, r3
   12e74:	693b      	ldr	r3, [r7, #16]
   12e76:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   12e78:	e00a      	b.n	12e90 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   12e7a:	693b      	ldr	r3, [r7, #16]
   12e7c:	695b      	ldr	r3, [r3, #20]
   12e7e:	1dfa      	adds	r2, r7, #7
   12e80:	7812      	ldrb	r2, [r2, #0]
   12e82:	2101      	movs	r1, #1
   12e84:	4091      	lsls	r1, r2
   12e86:	000a      	movs	r2, r1
   12e88:	43d2      	mvns	r2, r2
   12e8a:	401a      	ands	r2, r3
   12e8c:	693b      	ldr	r3, [r7, #16]
   12e8e:	615a      	str	r2, [r3, #20]
}
   12e90:	46c0      	nop			; (mov r8, r8)
   12e92:	46bd      	mov	sp, r7
   12e94:	b006      	add	sp, #24
   12e96:	bd80      	pop	{r7, pc}
   12e98:	00012b49 	.word	0x00012b49
   12e9c:	000166bd 	.word	0x000166bd
   12ea0:	00012b9d 	.word	0x00012b9d

00012ea4 <system_pinmux_get_config_defaults>:
{
   12ea4:	b580      	push	{r7, lr}
   12ea6:	b082      	sub	sp, #8
   12ea8:	af00      	add	r7, sp, #0
   12eaa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   12eac:	687b      	ldr	r3, [r7, #4]
   12eae:	2280      	movs	r2, #128	; 0x80
   12eb0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12eb2:	687b      	ldr	r3, [r7, #4]
   12eb4:	2200      	movs	r2, #0
   12eb6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   12eb8:	687b      	ldr	r3, [r7, #4]
   12eba:	2201      	movs	r2, #1
   12ebc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   12ebe:	687b      	ldr	r3, [r7, #4]
   12ec0:	2200      	movs	r2, #0
   12ec2:	70da      	strb	r2, [r3, #3]
}
   12ec4:	46c0      	nop			; (mov r8, r8)
   12ec6:	46bd      	mov	sp, r7
   12ec8:	b002      	add	sp, #8
   12eca:	bd80      	pop	{r7, pc}

00012ecc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   12ecc:	b580      	push	{r7, lr}
   12ece:	b084      	sub	sp, #16
   12ed0:	af00      	add	r7, sp, #0
   12ed2:	0002      	movs	r2, r0
   12ed4:	6039      	str	r1, [r7, #0]
   12ed6:	1dfb      	adds	r3, r7, #7
   12ed8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   12eda:	230c      	movs	r3, #12
   12edc:	18fb      	adds	r3, r7, r3
   12ede:	0018      	movs	r0, r3
   12ee0:	4b10      	ldr	r3, [pc, #64]	; (12f24 <port_pin_set_config+0x58>)
   12ee2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   12ee4:	230c      	movs	r3, #12
   12ee6:	18fb      	adds	r3, r7, r3
   12ee8:	2280      	movs	r2, #128	; 0x80
   12eea:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   12eec:	683b      	ldr	r3, [r7, #0]
   12eee:	781a      	ldrb	r2, [r3, #0]
   12ef0:	230c      	movs	r3, #12
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   12ef6:	683b      	ldr	r3, [r7, #0]
   12ef8:	785a      	ldrb	r2, [r3, #1]
   12efa:	230c      	movs	r3, #12
   12efc:	18fb      	adds	r3, r7, r3
   12efe:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   12f00:	683b      	ldr	r3, [r7, #0]
   12f02:	789a      	ldrb	r2, [r3, #2]
   12f04:	230c      	movs	r3, #12
   12f06:	18fb      	adds	r3, r7, r3
   12f08:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   12f0a:	230c      	movs	r3, #12
   12f0c:	18fa      	adds	r2, r7, r3
   12f0e:	1dfb      	adds	r3, r7, #7
   12f10:	781b      	ldrb	r3, [r3, #0]
   12f12:	0011      	movs	r1, r2
   12f14:	0018      	movs	r0, r3
   12f16:	4b04      	ldr	r3, [pc, #16]	; (12f28 <port_pin_set_config+0x5c>)
   12f18:	4798      	blx	r3
}
   12f1a:	46c0      	nop			; (mov r8, r8)
   12f1c:	46bd      	mov	sp, r7
   12f1e:	b004      	add	sp, #16
   12f20:	bd80      	pop	{r7, pc}
   12f22:	46c0      	nop			; (mov r8, r8)
   12f24:	00012ea5 	.word	0x00012ea5
   12f28:	000166bd 	.word	0x000166bd

00012f2c <system_gclk_chan_get_config_defaults>:
{
   12f2c:	b580      	push	{r7, lr}
   12f2e:	b082      	sub	sp, #8
   12f30:	af00      	add	r7, sp, #0
   12f32:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   12f34:	687b      	ldr	r3, [r7, #4]
   12f36:	2200      	movs	r2, #0
   12f38:	701a      	strb	r2, [r3, #0]
}
   12f3a:	46c0      	nop			; (mov r8, r8)
   12f3c:	46bd      	mov	sp, r7
   12f3e:	b002      	add	sp, #8
   12f40:	bd80      	pop	{r7, pc}
	...

00012f44 <system_apb_clock_set_mask>:
{
   12f44:	b580      	push	{r7, lr}
   12f46:	b082      	sub	sp, #8
   12f48:	af00      	add	r7, sp, #0
   12f4a:	0002      	movs	r2, r0
   12f4c:	6039      	str	r1, [r7, #0]
   12f4e:	1dfb      	adds	r3, r7, #7
   12f50:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12f52:	1dfb      	adds	r3, r7, #7
   12f54:	781b      	ldrb	r3, [r3, #0]
   12f56:	2b01      	cmp	r3, #1
   12f58:	d00a      	beq.n	12f70 <system_apb_clock_set_mask+0x2c>
   12f5a:	2b02      	cmp	r3, #2
   12f5c:	d00f      	beq.n	12f7e <system_apb_clock_set_mask+0x3a>
   12f5e:	2b00      	cmp	r3, #0
   12f60:	d114      	bne.n	12f8c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   12f62:	4b0e      	ldr	r3, [pc, #56]	; (12f9c <system_apb_clock_set_mask+0x58>)
   12f64:	4a0d      	ldr	r2, [pc, #52]	; (12f9c <system_apb_clock_set_mask+0x58>)
   12f66:	6991      	ldr	r1, [r2, #24]
   12f68:	683a      	ldr	r2, [r7, #0]
   12f6a:	430a      	orrs	r2, r1
   12f6c:	619a      	str	r2, [r3, #24]
			break;
   12f6e:	e00f      	b.n	12f90 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   12f70:	4b0a      	ldr	r3, [pc, #40]	; (12f9c <system_apb_clock_set_mask+0x58>)
   12f72:	4a0a      	ldr	r2, [pc, #40]	; (12f9c <system_apb_clock_set_mask+0x58>)
   12f74:	69d1      	ldr	r1, [r2, #28]
   12f76:	683a      	ldr	r2, [r7, #0]
   12f78:	430a      	orrs	r2, r1
   12f7a:	61da      	str	r2, [r3, #28]
			break;
   12f7c:	e008      	b.n	12f90 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   12f7e:	4b07      	ldr	r3, [pc, #28]	; (12f9c <system_apb_clock_set_mask+0x58>)
   12f80:	4a06      	ldr	r2, [pc, #24]	; (12f9c <system_apb_clock_set_mask+0x58>)
   12f82:	6a11      	ldr	r1, [r2, #32]
   12f84:	683a      	ldr	r2, [r7, #0]
   12f86:	430a      	orrs	r2, r1
   12f88:	621a      	str	r2, [r3, #32]
			break;
   12f8a:	e001      	b.n	12f90 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   12f8c:	2317      	movs	r3, #23
   12f8e:	e000      	b.n	12f92 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   12f90:	2300      	movs	r3, #0
}
   12f92:	0018      	movs	r0, r3
   12f94:	46bd      	mov	sp, r7
   12f96:	b002      	add	sp, #8
   12f98:	bd80      	pop	{r7, pc}
   12f9a:	46c0      	nop			; (mov r8, r8)
   12f9c:	40000400 	.word	0x40000400

00012fa0 <system_interrupt_enable>:
{
   12fa0:	b580      	push	{r7, lr}
   12fa2:	b082      	sub	sp, #8
   12fa4:	af00      	add	r7, sp, #0
   12fa6:	0002      	movs	r2, r0
   12fa8:	1dfb      	adds	r3, r7, #7
   12faa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12fac:	4b06      	ldr	r3, [pc, #24]	; (12fc8 <system_interrupt_enable+0x28>)
   12fae:	1dfa      	adds	r2, r7, #7
   12fb0:	7812      	ldrb	r2, [r2, #0]
   12fb2:	0011      	movs	r1, r2
   12fb4:	221f      	movs	r2, #31
   12fb6:	400a      	ands	r2, r1
   12fb8:	2101      	movs	r1, #1
   12fba:	4091      	lsls	r1, r2
   12fbc:	000a      	movs	r2, r1
   12fbe:	601a      	str	r2, [r3, #0]
}
   12fc0:	46c0      	nop			; (mov r8, r8)
   12fc2:	46bd      	mov	sp, r7
   12fc4:	b002      	add	sp, #8
   12fc6:	bd80      	pop	{r7, pc}
   12fc8:	e000e100 	.word	0xe000e100

00012fcc <system_interrupt_disable>:
{
   12fcc:	b580      	push	{r7, lr}
   12fce:	b082      	sub	sp, #8
   12fd0:	af00      	add	r7, sp, #0
   12fd2:	0002      	movs	r2, r0
   12fd4:	1dfb      	adds	r3, r7, #7
   12fd6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12fd8:	4a07      	ldr	r2, [pc, #28]	; (12ff8 <system_interrupt_disable+0x2c>)
   12fda:	1dfb      	adds	r3, r7, #7
   12fdc:	781b      	ldrb	r3, [r3, #0]
   12fde:	0019      	movs	r1, r3
   12fe0:	231f      	movs	r3, #31
   12fe2:	400b      	ands	r3, r1
   12fe4:	2101      	movs	r1, #1
   12fe6:	4099      	lsls	r1, r3
   12fe8:	000b      	movs	r3, r1
   12fea:	0019      	movs	r1, r3
   12fec:	2380      	movs	r3, #128	; 0x80
   12fee:	50d1      	str	r1, [r2, r3]
}
   12ff0:	46c0      	nop			; (mov r8, r8)
   12ff2:	46bd      	mov	sp, r7
   12ff4:	b002      	add	sp, #8
   12ff6:	bd80      	pop	{r7, pc}
   12ff8:	e000e100 	.word	0xe000e100

00012ffc <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   12ffc:	b580      	push	{r7, lr}
   12ffe:	b084      	sub	sp, #16
   13000:	af00      	add	r7, sp, #0
   13002:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   13004:	687b      	ldr	r3, [r7, #4]
   13006:	681b      	ldr	r3, [r3, #0]
   13008:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1300a:	68fb      	ldr	r3, [r7, #12]
   1300c:	7a9b      	ldrb	r3, [r3, #10]
   1300e:	b2db      	uxtb	r3, r3
   13010:	b25b      	sxtb	r3, r3
   13012:	2b00      	cmp	r3, #0
   13014:	da01      	bge.n	1301a <rtc_calendar_is_syncing+0x1e>
                return true;
   13016:	2301      	movs	r3, #1
   13018:	e000      	b.n	1301c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   1301a:	2300      	movs	r3, #0
}
   1301c:	0018      	movs	r0, r3
   1301e:	46bd      	mov	sp, r7
   13020:	b004      	add	sp, #16
   13022:	bd80      	pop	{r7, pc}

00013024 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   13024:	b580      	push	{r7, lr}
   13026:	b084      	sub	sp, #16
   13028:	af00      	add	r7, sp, #0
   1302a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1302c:	687b      	ldr	r3, [r7, #4]
   1302e:	681b      	ldr	r3, [r3, #0]
   13030:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   13032:	2003      	movs	r0, #3
   13034:	4b0a      	ldr	r3, [pc, #40]	; (13060 <rtc_calendar_enable+0x3c>)
   13036:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   13038:	46c0      	nop			; (mov r8, r8)
   1303a:	687b      	ldr	r3, [r7, #4]
   1303c:	0018      	movs	r0, r3
   1303e:	4b09      	ldr	r3, [pc, #36]	; (13064 <rtc_calendar_enable+0x40>)
   13040:	4798      	blx	r3
   13042:	1e03      	subs	r3, r0, #0
   13044:	d1f9      	bne.n	1303a <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   13046:	68fb      	ldr	r3, [r7, #12]
   13048:	881b      	ldrh	r3, [r3, #0]
   1304a:	b29b      	uxth	r3, r3
   1304c:	2202      	movs	r2, #2
   1304e:	4313      	orrs	r3, r2
   13050:	b29a      	uxth	r2, r3
   13052:	68fb      	ldr	r3, [r7, #12]
   13054:	801a      	strh	r2, [r3, #0]
}
   13056:	46c0      	nop			; (mov r8, r8)
   13058:	46bd      	mov	sp, r7
   1305a:	b004      	add	sp, #16
   1305c:	bd80      	pop	{r7, pc}
   1305e:	46c0      	nop			; (mov r8, r8)
   13060:	00012fa1 	.word	0x00012fa1
   13064:	00012ffd 	.word	0x00012ffd

00013068 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   13068:	b580      	push	{r7, lr}
   1306a:	b084      	sub	sp, #16
   1306c:	af00      	add	r7, sp, #0
   1306e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   13070:	687b      	ldr	r3, [r7, #4]
   13072:	681b      	ldr	r3, [r3, #0]
   13074:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   13076:	2003      	movs	r0, #3
   13078:	4b0d      	ldr	r3, [pc, #52]	; (130b0 <rtc_calendar_disable+0x48>)
   1307a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   1307c:	46c0      	nop			; (mov r8, r8)
   1307e:	687b      	ldr	r3, [r7, #4]
   13080:	0018      	movs	r0, r3
   13082:	4b0c      	ldr	r3, [pc, #48]	; (130b4 <rtc_calendar_disable+0x4c>)
   13084:	4798      	blx	r3
   13086:	1e03      	subs	r3, r0, #0
   13088:	d1f9      	bne.n	1307e <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   1308a:	68fb      	ldr	r3, [r7, #12]
   1308c:	22c1      	movs	r2, #193	; 0xc1
   1308e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   13090:	68fb      	ldr	r3, [r7, #12]
   13092:	22c1      	movs	r2, #193	; 0xc1
   13094:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   13096:	68fb      	ldr	r3, [r7, #12]
   13098:	881b      	ldrh	r3, [r3, #0]
   1309a:	b29b      	uxth	r3, r3
   1309c:	2202      	movs	r2, #2
   1309e:	4393      	bics	r3, r2
   130a0:	b29a      	uxth	r2, r3
   130a2:	68fb      	ldr	r3, [r7, #12]
   130a4:	801a      	strh	r2, [r3, #0]
}
   130a6:	46c0      	nop			; (mov r8, r8)
   130a8:	46bd      	mov	sp, r7
   130aa:	b004      	add	sp, #16
   130ac:	bd80      	pop	{r7, pc}
   130ae:	46c0      	nop			; (mov r8, r8)
   130b0:	00012fcd 	.word	0x00012fcd
   130b4:	00012ffd 	.word	0x00012ffd

000130b8 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   130b8:	b580      	push	{r7, lr}
   130ba:	b084      	sub	sp, #16
   130bc:	af00      	add	r7, sp, #0
   130be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   130c0:	687b      	ldr	r3, [r7, #4]
   130c2:	681b      	ldr	r3, [r3, #0]
   130c4:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   130c6:	687b      	ldr	r3, [r7, #4]
   130c8:	0018      	movs	r0, r3
   130ca:	4b0d      	ldr	r3, [pc, #52]	; (13100 <rtc_calendar_reset+0x48>)
   130cc:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   130ce:	687b      	ldr	r3, [r7, #4]
   130d0:	2200      	movs	r2, #0
   130d2:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	2200      	movs	r2, #0
   130d8:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   130da:	46c0      	nop			; (mov r8, r8)
   130dc:	687b      	ldr	r3, [r7, #4]
   130de:	0018      	movs	r0, r3
   130e0:	4b08      	ldr	r3, [pc, #32]	; (13104 <rtc_calendar_reset+0x4c>)
   130e2:	4798      	blx	r3
   130e4:	1e03      	subs	r3, r0, #0
   130e6:	d1f9      	bne.n	130dc <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   130e8:	68fb      	ldr	r3, [r7, #12]
   130ea:	881b      	ldrh	r3, [r3, #0]
   130ec:	b29b      	uxth	r3, r3
   130ee:	2201      	movs	r2, #1
   130f0:	4313      	orrs	r3, r2
   130f2:	b29a      	uxth	r2, r3
   130f4:	68fb      	ldr	r3, [r7, #12]
   130f6:	801a      	strh	r2, [r3, #0]
}
   130f8:	46c0      	nop			; (mov r8, r8)
   130fa:	46bd      	mov	sp, r7
   130fc:	b004      	add	sp, #16
   130fe:	bd80      	pop	{r7, pc}
   13100:	00013069 	.word	0x00013069
   13104:	00012ffd 	.word	0x00012ffd

00013108 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   13108:	b580      	push	{r7, lr}
   1310a:	b084      	sub	sp, #16
   1310c:	af00      	add	r7, sp, #0
   1310e:	6078      	str	r0, [r7, #4]
   13110:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   13112:	683b      	ldr	r3, [r7, #0]
   13114:	88db      	ldrh	r3, [r3, #6]
   13116:	001a      	movs	r2, r3
   13118:	687b      	ldr	r3, [r7, #4]
   1311a:	88db      	ldrh	r3, [r3, #6]
   1311c:	1ad3      	subs	r3, r2, r3
   1311e:	069b      	lsls	r3, r3, #26
   13120:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   13122:	683b      	ldr	r3, [r7, #0]
   13124:	795b      	ldrb	r3, [r3, #5]
   13126:	059b      	lsls	r3, r3, #22
   13128:	001a      	movs	r2, r3
   1312a:	68fb      	ldr	r3, [r7, #12]
   1312c:	4313      	orrs	r3, r2
   1312e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   13130:	683b      	ldr	r3, [r7, #0]
   13132:	791b      	ldrb	r3, [r3, #4]
   13134:	045b      	lsls	r3, r3, #17
   13136:	001a      	movs	r2, r3
   13138:	68fb      	ldr	r3, [r7, #12]
   1313a:	4313      	orrs	r3, r2
   1313c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   1313e:	683b      	ldr	r3, [r7, #0]
   13140:	789b      	ldrb	r3, [r3, #2]
   13142:	031b      	lsls	r3, r3, #12
   13144:	001a      	movs	r2, r3
   13146:	68fb      	ldr	r3, [r7, #12]
   13148:	4313      	orrs	r3, r2
   1314a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	791b      	ldrb	r3, [r3, #4]
   13150:	2201      	movs	r2, #1
   13152:	4053      	eors	r3, r2
   13154:	b2db      	uxtb	r3, r3
   13156:	2b00      	cmp	r3, #0
   13158:	d008      	beq.n	1316c <rtc_calendar_time_to_register_value+0x64>
   1315a:	683b      	ldr	r3, [r7, #0]
   1315c:	78db      	ldrb	r3, [r3, #3]
   1315e:	2b00      	cmp	r3, #0
   13160:	d004      	beq.n	1316c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   13162:	68fb      	ldr	r3, [r7, #12]
   13164:	2280      	movs	r2, #128	; 0x80
   13166:	0252      	lsls	r2, r2, #9
   13168:	4313      	orrs	r3, r2
   1316a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   1316c:	683b      	ldr	r3, [r7, #0]
   1316e:	785b      	ldrb	r3, [r3, #1]
   13170:	019b      	lsls	r3, r3, #6
   13172:	001a      	movs	r2, r3
   13174:	68fb      	ldr	r3, [r7, #12]
   13176:	4313      	orrs	r3, r2
   13178:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   1317a:	683b      	ldr	r3, [r7, #0]
   1317c:	781b      	ldrb	r3, [r3, #0]
   1317e:	001a      	movs	r2, r3
   13180:	68fb      	ldr	r3, [r7, #12]
   13182:	4313      	orrs	r3, r2
   13184:	60fb      	str	r3, [r7, #12]

	return register_value;
   13186:	68fb      	ldr	r3, [r7, #12]
}
   13188:	0018      	movs	r0, r3
   1318a:	46bd      	mov	sp, r7
   1318c:	b004      	add	sp, #16
   1318e:	bd80      	pop	{r7, pc}

00013190 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   13190:	b580      	push	{r7, lr}
   13192:	b084      	sub	sp, #16
   13194:	af00      	add	r7, sp, #0
   13196:	60f8      	str	r0, [r7, #12]
   13198:	60b9      	str	r1, [r7, #8]
   1319a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   1319c:	68bb      	ldr	r3, [r7, #8]
   1319e:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   131a0:	b29a      	uxth	r2, r3
   131a2:	68fb      	ldr	r3, [r7, #12]
   131a4:	88db      	ldrh	r3, [r3, #6]
   131a6:	18d3      	adds	r3, r2, r3
   131a8:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   131aa:	687b      	ldr	r3, [r7, #4]
   131ac:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   131ae:	68bb      	ldr	r3, [r7, #8]
   131b0:	0d9b      	lsrs	r3, r3, #22
   131b2:	b2db      	uxtb	r3, r3
   131b4:	220f      	movs	r2, #15
   131b6:	4013      	ands	r3, r2
   131b8:	b2da      	uxtb	r2, r3
   131ba:	687b      	ldr	r3, [r7, #4]
   131bc:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   131be:	68bb      	ldr	r3, [r7, #8]
   131c0:	0c5b      	lsrs	r3, r3, #17
   131c2:	b2db      	uxtb	r3, r3
   131c4:	221f      	movs	r2, #31
   131c6:	4013      	ands	r3, r2
   131c8:	b2da      	uxtb	r2, r3
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   131ce:	68fb      	ldr	r3, [r7, #12]
   131d0:	791b      	ldrb	r3, [r3, #4]
   131d2:	2b00      	cmp	r3, #0
   131d4:	d008      	beq.n	131e8 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   131d6:	68bb      	ldr	r3, [r7, #8]
   131d8:	0b1b      	lsrs	r3, r3, #12
   131da:	b2db      	uxtb	r3, r3
   131dc:	221f      	movs	r2, #31
   131de:	4013      	ands	r3, r2
   131e0:	b2da      	uxtb	r2, r3
   131e2:	687b      	ldr	r3, [r7, #4]
   131e4:	709a      	strb	r2, [r3, #2]
   131e6:	e010      	b.n	1320a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   131e8:	68bb      	ldr	r3, [r7, #8]
   131ea:	0b1b      	lsrs	r3, r3, #12
   131ec:	b2db      	uxtb	r3, r3
   131ee:	220f      	movs	r2, #15
   131f0:	4013      	ands	r3, r2
   131f2:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   131f4:	687b      	ldr	r3, [r7, #4]
   131f6:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   131f8:	68ba      	ldr	r2, [r7, #8]
   131fa:	2380      	movs	r3, #128	; 0x80
   131fc:	025b      	lsls	r3, r3, #9
   131fe:	4013      	ands	r3, r2
   13200:	1e5a      	subs	r2, r3, #1
   13202:	4193      	sbcs	r3, r2
   13204:	b2da      	uxtb	r2, r3
   13206:	687b      	ldr	r3, [r7, #4]
   13208:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   1320a:	68bb      	ldr	r3, [r7, #8]
   1320c:	099b      	lsrs	r3, r3, #6
   1320e:	b2db      	uxtb	r3, r3
   13210:	223f      	movs	r2, #63	; 0x3f
   13212:	4013      	ands	r3, r2
   13214:	b2da      	uxtb	r2, r3
   13216:	687b      	ldr	r3, [r7, #4]
   13218:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   1321a:	68bb      	ldr	r3, [r7, #8]
   1321c:	b2db      	uxtb	r3, r3
   1321e:	223f      	movs	r2, #63	; 0x3f
   13220:	4013      	ands	r3, r2
   13222:	b2da      	uxtb	r2, r3
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   13228:	46c0      	nop			; (mov r8, r8)
   1322a:	46bd      	mov	sp, r7
   1322c:	b004      	add	sp, #16
   1322e:	bd80      	pop	{r7, pc}

00013230 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   13230:	b580      	push	{r7, lr}
   13232:	b084      	sub	sp, #16
   13234:	af00      	add	r7, sp, #0
   13236:	6078      	str	r0, [r7, #4]
   13238:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1323a:	687b      	ldr	r3, [r7, #4]
   1323c:	681b      	ldr	r3, [r3, #0]
   1323e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   13240:	683b      	ldr	r3, [r7, #0]
   13242:	881a      	ldrh	r2, [r3, #0]
   13244:	230e      	movs	r3, #14
   13246:	18fb      	adds	r3, r7, r3
   13248:	2108      	movs	r1, #8
   1324a:	430a      	orrs	r2, r1
   1324c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   1324e:	683b      	ldr	r3, [r7, #0]
   13250:	791b      	ldrb	r3, [r3, #4]
   13252:	2201      	movs	r2, #1
   13254:	4053      	eors	r3, r2
   13256:	b2db      	uxtb	r3, r3
   13258:	2b00      	cmp	r3, #0
   1325a:	d007      	beq.n	1326c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   1325c:	230e      	movs	r3, #14
   1325e:	18fb      	adds	r3, r7, r3
   13260:	220e      	movs	r2, #14
   13262:	18ba      	adds	r2, r7, r2
   13264:	8812      	ldrh	r2, [r2, #0]
   13266:	2140      	movs	r1, #64	; 0x40
   13268:	430a      	orrs	r2, r1
   1326a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   1326c:	683b      	ldr	r3, [r7, #0]
   1326e:	789b      	ldrb	r3, [r3, #2]
   13270:	2b00      	cmp	r3, #0
   13272:	d007      	beq.n	13284 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   13274:	230e      	movs	r3, #14
   13276:	18fb      	adds	r3, r7, r3
   13278:	220e      	movs	r2, #14
   1327a:	18ba      	adds	r2, r7, r2
   1327c:	8812      	ldrh	r2, [r2, #0]
   1327e:	2180      	movs	r1, #128	; 0x80
   13280:	430a      	orrs	r2, r1
   13282:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   13284:	68bb      	ldr	r3, [r7, #8]
   13286:	220e      	movs	r2, #14
   13288:	18ba      	adds	r2, r7, r2
   1328a:	8812      	ldrh	r2, [r2, #0]
   1328c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   1328e:	683b      	ldr	r3, [r7, #0]
   13290:	78db      	ldrb	r3, [r3, #3]
   13292:	2b00      	cmp	r3, #0
   13294:	d008      	beq.n	132a8 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   13296:	68bb      	ldr	r3, [r7, #8]
   13298:	885b      	ldrh	r3, [r3, #2]
   1329a:	b29b      	uxth	r3, r3
   1329c:	2280      	movs	r2, #128	; 0x80
   1329e:	01d2      	lsls	r2, r2, #7
   132a0:	4313      	orrs	r3, r2
   132a2:	b29a      	uxth	r2, r3
   132a4:	68bb      	ldr	r3, [r7, #8]
   132a6:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   132a8:	230d      	movs	r3, #13
   132aa:	18fb      	adds	r3, r7, r3
   132ac:	2200      	movs	r2, #0
   132ae:	701a      	strb	r2, [r3, #0]
   132b0:	e017      	b.n	132e2 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   132b2:	230d      	movs	r3, #13
   132b4:	18fb      	adds	r3, r7, r3
   132b6:	781a      	ldrb	r2, [r3, #0]
   132b8:	0013      	movs	r3, r2
   132ba:	009b      	lsls	r3, r3, #2
   132bc:	189b      	adds	r3, r3, r2
   132be:	005b      	lsls	r3, r3, #1
   132c0:	3308      	adds	r3, #8
   132c2:	683a      	ldr	r2, [r7, #0]
   132c4:	18d1      	adds	r1, r2, r3
   132c6:	230d      	movs	r3, #13
   132c8:	18fb      	adds	r3, r7, r3
   132ca:	781a      	ldrb	r2, [r3, #0]
   132cc:	687b      	ldr	r3, [r7, #4]
   132ce:	0018      	movs	r0, r3
   132d0:	4b08      	ldr	r3, [pc, #32]	; (132f4 <_rtc_calendar_set_config+0xc4>)
   132d2:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   132d4:	230d      	movs	r3, #13
   132d6:	18fb      	adds	r3, r7, r3
   132d8:	781a      	ldrb	r2, [r3, #0]
   132da:	230d      	movs	r3, #13
   132dc:	18fb      	adds	r3, r7, r3
   132de:	3201      	adds	r2, #1
   132e0:	701a      	strb	r2, [r3, #0]
   132e2:	230d      	movs	r3, #13
   132e4:	18fb      	adds	r3, r7, r3
   132e6:	781b      	ldrb	r3, [r3, #0]
   132e8:	2b00      	cmp	r3, #0
   132ea:	d0e2      	beq.n	132b2 <_rtc_calendar_set_config+0x82>
	}
}
   132ec:	46c0      	nop			; (mov r8, r8)
   132ee:	46bd      	mov	sp, r7
   132f0:	b004      	add	sp, #16
   132f2:	bd80      	pop	{r7, pc}
   132f4:	00013419 	.word	0x00013419

000132f8 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   132f8:	b580      	push	{r7, lr}
   132fa:	b086      	sub	sp, #24
   132fc:	af00      	add	r7, sp, #0
   132fe:	60f8      	str	r0, [r7, #12]
   13300:	60b9      	str	r1, [r7, #8]
   13302:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   13304:	68fb      	ldr	r3, [r7, #12]
   13306:	68ba      	ldr	r2, [r7, #8]
   13308:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   1330a:	2120      	movs	r1, #32
   1330c:	2000      	movs	r0, #0
   1330e:	4b18      	ldr	r3, [pc, #96]	; (13370 <rtc_calendar_init+0x78>)
   13310:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   13312:	2314      	movs	r3, #20
   13314:	18fb      	adds	r3, r7, r3
   13316:	0018      	movs	r0, r3
   13318:	4b16      	ldr	r3, [pc, #88]	; (13374 <rtc_calendar_init+0x7c>)
   1331a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   1331c:	2314      	movs	r3, #20
   1331e:	18fb      	adds	r3, r7, r3
   13320:	2202      	movs	r2, #2
   13322:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   13324:	2314      	movs	r3, #20
   13326:	18fb      	adds	r3, r7, r3
   13328:	0019      	movs	r1, r3
   1332a:	2004      	movs	r0, #4
   1332c:	4b12      	ldr	r3, [pc, #72]	; (13378 <rtc_calendar_init+0x80>)
   1332e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   13330:	2004      	movs	r0, #4
   13332:	4b12      	ldr	r3, [pc, #72]	; (1337c <rtc_calendar_init+0x84>)
   13334:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   13336:	68fb      	ldr	r3, [r7, #12]
   13338:	0018      	movs	r0, r3
   1333a:	4b11      	ldr	r3, [pc, #68]	; (13380 <rtc_calendar_init+0x88>)
   1333c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   1333e:	687b      	ldr	r3, [r7, #4]
   13340:	791a      	ldrb	r2, [r3, #4]
   13342:	68fb      	ldr	r3, [r7, #12]
   13344:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   13346:	687b      	ldr	r3, [r7, #4]
   13348:	78da      	ldrb	r2, [r3, #3]
   1334a:	68fb      	ldr	r3, [r7, #12]
   1334c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   1334e:	687b      	ldr	r3, [r7, #4]
   13350:	88da      	ldrh	r2, [r3, #6]
   13352:	68fb      	ldr	r3, [r7, #12]
   13354:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   13356:	4b0b      	ldr	r3, [pc, #44]	; (13384 <rtc_calendar_init+0x8c>)
   13358:	68fa      	ldr	r2, [r7, #12]
   1335a:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   1335c:	687a      	ldr	r2, [r7, #4]
   1335e:	68fb      	ldr	r3, [r7, #12]
   13360:	0011      	movs	r1, r2
   13362:	0018      	movs	r0, r3
   13364:	4b08      	ldr	r3, [pc, #32]	; (13388 <rtc_calendar_init+0x90>)
   13366:	4798      	blx	r3
}
   13368:	46c0      	nop			; (mov r8, r8)
   1336a:	46bd      	mov	sp, r7
   1336c:	b006      	add	sp, #24
   1336e:	bd80      	pop	{r7, pc}
   13370:	00012f45 	.word	0x00012f45
   13374:	00012f2d 	.word	0x00012f2d
   13378:	0001635d 	.word	0x0001635d
   1337c:	000163a1 	.word	0x000163a1
   13380:	000130b9 	.word	0x000130b9
   13384:	20005a08 	.word	0x20005a08
   13388:	00013231 	.word	0x00013231

0001338c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   1338c:	b580      	push	{r7, lr}
   1338e:	b084      	sub	sp, #16
   13390:	af00      	add	r7, sp, #0
   13392:	6078      	str	r0, [r7, #4]
   13394:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   13396:	687b      	ldr	r3, [r7, #4]
   13398:	681b      	ldr	r3, [r3, #0]
   1339a:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   1339c:	687b      	ldr	r3, [r7, #4]
   1339e:	795b      	ldrb	r3, [r3, #5]
   133a0:	2201      	movs	r2, #1
   133a2:	4053      	eors	r3, r2
   133a4:	b2db      	uxtb	r3, r3
   133a6:	2b00      	cmp	r3, #0
   133a8:	d00a      	beq.n	133c0 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   133aa:	68fb      	ldr	r3, [r7, #12]
   133ac:	4a16      	ldr	r2, [pc, #88]	; (13408 <rtc_calendar_get_time+0x7c>)
   133ae:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   133b0:	46c0      	nop			; (mov r8, r8)
   133b2:	687b      	ldr	r3, [r7, #4]
   133b4:	0018      	movs	r0, r3
   133b6:	4b15      	ldr	r3, [pc, #84]	; (1340c <rtc_calendar_get_time+0x80>)
   133b8:	4798      	blx	r3
   133ba:	1e03      	subs	r3, r0, #0
   133bc:	d1f9      	bne.n	133b2 <rtc_calendar_get_time+0x26>
   133be:	e016      	b.n	133ee <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   133c0:	68fb      	ldr	r3, [r7, #12]
   133c2:	885b      	ldrh	r3, [r3, #2]
   133c4:	b29b      	uxth	r3, r3
   133c6:	001a      	movs	r2, r3
   133c8:	2380      	movs	r3, #128	; 0x80
   133ca:	01db      	lsls	r3, r3, #7
   133cc:	4013      	ands	r3, r2
   133ce:	d10e      	bne.n	133ee <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   133d0:	68fb      	ldr	r3, [r7, #12]
   133d2:	885b      	ldrh	r3, [r3, #2]
   133d4:	b29b      	uxth	r3, r3
   133d6:	4a0e      	ldr	r2, [pc, #56]	; (13410 <rtc_calendar_get_time+0x84>)
   133d8:	4313      	orrs	r3, r2
   133da:	b29a      	uxth	r2, r3
   133dc:	68fb      	ldr	r3, [r7, #12]
   133de:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   133e0:	46c0      	nop			; (mov r8, r8)
   133e2:	687b      	ldr	r3, [r7, #4]
   133e4:	0018      	movs	r0, r3
   133e6:	4b09      	ldr	r3, [pc, #36]	; (1340c <rtc_calendar_get_time+0x80>)
   133e8:	4798      	blx	r3
   133ea:	1e03      	subs	r3, r0, #0
   133ec:	d1f9      	bne.n	133e2 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   133ee:	68fb      	ldr	r3, [r7, #12]
   133f0:	691b      	ldr	r3, [r3, #16]
   133f2:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   133f4:	683a      	ldr	r2, [r7, #0]
   133f6:	68b9      	ldr	r1, [r7, #8]
   133f8:	687b      	ldr	r3, [r7, #4]
   133fa:	0018      	movs	r0, r3
   133fc:	4b05      	ldr	r3, [pc, #20]	; (13414 <rtc_calendar_get_time+0x88>)
   133fe:	4798      	blx	r3
}
   13400:	46c0      	nop			; (mov r8, r8)
   13402:	46bd      	mov	sp, r7
   13404:	b004      	add	sp, #16
   13406:	bd80      	pop	{r7, pc}
   13408:	ffff8000 	.word	0xffff8000
   1340c:	00012ffd 	.word	0x00012ffd
   13410:	ffffc000 	.word	0xffffc000
   13414:	00013191 	.word	0x00013191

00013418 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   13418:	b580      	push	{r7, lr}
   1341a:	b086      	sub	sp, #24
   1341c:	af00      	add	r7, sp, #0
   1341e:	60f8      	str	r0, [r7, #12]
   13420:	60b9      	str	r1, [r7, #8]
   13422:	1dfb      	adds	r3, r7, #7
   13424:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   13426:	68fb      	ldr	r3, [r7, #12]
   13428:	681b      	ldr	r3, [r3, #0]
   1342a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   1342c:	1dfb      	adds	r3, r7, #7
   1342e:	781b      	ldrb	r3, [r3, #0]
   13430:	2b01      	cmp	r3, #1
   13432:	d901      	bls.n	13438 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   13434:	2317      	movs	r3, #23
   13436:	e021      	b.n	1347c <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   13438:	68ba      	ldr	r2, [r7, #8]
   1343a:	68fb      	ldr	r3, [r7, #12]
   1343c:	0011      	movs	r1, r2
   1343e:	0018      	movs	r0, r3
   13440:	4b10      	ldr	r3, [pc, #64]	; (13484 <rtc_calendar_set_alarm+0x6c>)
   13442:	4798      	blx	r3
   13444:	0003      	movs	r3, r0
   13446:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   13448:	46c0      	nop			; (mov r8, r8)
   1344a:	68fb      	ldr	r3, [r7, #12]
   1344c:	0018      	movs	r0, r3
   1344e:	4b0e      	ldr	r3, [pc, #56]	; (13488 <rtc_calendar_set_alarm+0x70>)
   13450:	4798      	blx	r3
   13452:	1e03      	subs	r3, r0, #0
   13454:	d1f9      	bne.n	1344a <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   13456:	1dfb      	adds	r3, r7, #7
   13458:	781a      	ldrb	r2, [r3, #0]
   1345a:	697b      	ldr	r3, [r7, #20]
   1345c:	3203      	adds	r2, #3
   1345e:	00d2      	lsls	r2, r2, #3
   13460:	6939      	ldr	r1, [r7, #16]
   13462:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   13464:	1dfb      	adds	r3, r7, #7
   13466:	781b      	ldrb	r3, [r3, #0]
   13468:	68ba      	ldr	r2, [r7, #8]
   1346a:	7a11      	ldrb	r1, [r2, #8]
   1346c:	697a      	ldr	r2, [r7, #20]
   1346e:	3303      	adds	r3, #3
   13470:	00db      	lsls	r3, r3, #3
   13472:	18d3      	adds	r3, r2, r3
   13474:	3304      	adds	r3, #4
   13476:	1c0a      	adds	r2, r1, #0
   13478:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1347a:	2300      	movs	r3, #0
}
   1347c:	0018      	movs	r0, r3
   1347e:	46bd      	mov	sp, r7
   13480:	b006      	add	sp, #24
   13482:	bd80      	pop	{r7, pc}
   13484:	00013109 	.word	0x00013109
   13488:	00012ffd 	.word	0x00012ffd

0001348c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   1348c:	b580      	push	{r7, lr}
   1348e:	b086      	sub	sp, #24
   13490:	af00      	add	r7, sp, #0
   13492:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   13494:	4b28      	ldr	r3, [pc, #160]	; (13538 <_rtc_interrupt_handler+0xac>)
   13496:	687a      	ldr	r2, [r7, #4]
   13498:	0092      	lsls	r2, r2, #2
   1349a:	58d3      	ldr	r3, [r2, r3]
   1349c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   1349e:	697b      	ldr	r3, [r7, #20]
   134a0:	681b      	ldr	r3, [r3, #0]
   134a2:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   134a4:	230e      	movs	r3, #14
   134a6:	18fb      	adds	r3, r7, r3
   134a8:	697a      	ldr	r2, [r7, #20]
   134aa:	8a52      	ldrh	r2, [r2, #18]
   134ac:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   134ae:	697b      	ldr	r3, [r7, #20]
   134b0:	8a1b      	ldrh	r3, [r3, #16]
   134b2:	b29a      	uxth	r2, r3
   134b4:	230e      	movs	r3, #14
   134b6:	18fb      	adds	r3, r7, r3
   134b8:	210e      	movs	r1, #14
   134ba:	1879      	adds	r1, r7, r1
   134bc:	8809      	ldrh	r1, [r1, #0]
   134be:	400a      	ands	r2, r1
   134c0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   134c2:	693b      	ldr	r3, [r7, #16]
   134c4:	7a1b      	ldrb	r3, [r3, #8]
   134c6:	b2da      	uxtb	r2, r3
   134c8:	230c      	movs	r3, #12
   134ca:	18fb      	adds	r3, r7, r3
   134cc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   134ce:	693b      	ldr	r3, [r7, #16]
   134d0:	79db      	ldrb	r3, [r3, #7]
   134d2:	b2db      	uxtb	r3, r3
   134d4:	b29a      	uxth	r2, r3
   134d6:	230c      	movs	r3, #12
   134d8:	18fb      	adds	r3, r7, r3
   134da:	210c      	movs	r1, #12
   134dc:	1879      	adds	r1, r7, r1
   134de:	8809      	ldrh	r1, [r1, #0]
   134e0:	400a      	ands	r2, r1
   134e2:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   134e4:	230c      	movs	r3, #12
   134e6:	18fb      	adds	r3, r7, r3
   134e8:	881b      	ldrh	r3, [r3, #0]
   134ea:	2280      	movs	r2, #128	; 0x80
   134ec:	4013      	ands	r3, r2
   134ee:	d00c      	beq.n	1350a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   134f0:	230e      	movs	r3, #14
   134f2:	18fb      	adds	r3, r7, r3
   134f4:	881b      	ldrh	r3, [r3, #0]
   134f6:	2202      	movs	r2, #2
   134f8:	4013      	ands	r3, r2
   134fa:	d002      	beq.n	13502 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   134fc:	697b      	ldr	r3, [r7, #20]
   134fe:	68db      	ldr	r3, [r3, #12]
   13500:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   13502:	693b      	ldr	r3, [r7, #16]
   13504:	2280      	movs	r2, #128	; 0x80
   13506:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   13508:	e011      	b.n	1352e <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   1350a:	230c      	movs	r3, #12
   1350c:	18fb      	adds	r3, r7, r3
   1350e:	881b      	ldrh	r3, [r3, #0]
   13510:	2201      	movs	r2, #1
   13512:	4013      	ands	r3, r2
   13514:	d00b      	beq.n	1352e <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   13516:	230e      	movs	r3, #14
   13518:	18fb      	adds	r3, r7, r3
   1351a:	881b      	ldrh	r3, [r3, #0]
   1351c:	2201      	movs	r2, #1
   1351e:	4013      	ands	r3, r2
   13520:	d002      	beq.n	13528 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   13522:	697b      	ldr	r3, [r7, #20]
   13524:	689b      	ldr	r3, [r3, #8]
   13526:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   13528:	693b      	ldr	r3, [r7, #16]
   1352a:	2201      	movs	r2, #1
   1352c:	721a      	strb	r2, [r3, #8]
}
   1352e:	46c0      	nop			; (mov r8, r8)
   13530:	46bd      	mov	sp, r7
   13532:	b006      	add	sp, #24
   13534:	bd80      	pop	{r7, pc}
   13536:	46c0      	nop			; (mov r8, r8)
   13538:	20005a08 	.word	0x20005a08

0001353c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1353c:	b580      	push	{r7, lr}
   1353e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   13540:	2000      	movs	r0, #0
   13542:	4b02      	ldr	r3, [pc, #8]	; (1354c <RTC_Handler+0x10>)
   13544:	4798      	blx	r3
}
   13546:	46c0      	nop			; (mov r8, r8)
   13548:	46bd      	mov	sp, r7
   1354a:	bd80      	pop	{r7, pc}
   1354c:	0001348d 	.word	0x0001348d

00013550 <system_gclk_chan_get_config_defaults>:
{
   13550:	b580      	push	{r7, lr}
   13552:	b082      	sub	sp, #8
   13554:	af00      	add	r7, sp, #0
   13556:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   13558:	687b      	ldr	r3, [r7, #4]
   1355a:	2200      	movs	r2, #0
   1355c:	701a      	strb	r2, [r3, #0]
}
   1355e:	46c0      	nop			; (mov r8, r8)
   13560:	46bd      	mov	sp, r7
   13562:	b002      	add	sp, #8
   13564:	bd80      	pop	{r7, pc}

00013566 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   13566:	b5f0      	push	{r4, r5, r6, r7, lr}
   13568:	b08d      	sub	sp, #52	; 0x34
   1356a:	af00      	add	r7, sp, #0
   1356c:	60b8      	str	r0, [r7, #8]
   1356e:	60f9      	str	r1, [r7, #12]
   13570:	603a      	str	r2, [r7, #0]
   13572:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   13574:	2300      	movs	r3, #0
   13576:	2400      	movs	r4, #0
   13578:	623b      	str	r3, [r7, #32]
   1357a:	627c      	str	r4, [r7, #36]	; 0x24
   1357c:	2300      	movs	r3, #0
   1357e:	2400      	movs	r4, #0
   13580:	61bb      	str	r3, [r7, #24]
   13582:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   13584:	233f      	movs	r3, #63	; 0x3f
   13586:	62fb      	str	r3, [r7, #44]	; 0x2c
   13588:	e053      	b.n	13632 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   1358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1358c:	3b20      	subs	r3, #32
   1358e:	2b00      	cmp	r3, #0
   13590:	db04      	blt.n	1359c <long_division+0x36>
   13592:	2201      	movs	r2, #1
   13594:	409a      	lsls	r2, r3
   13596:	0013      	movs	r3, r2
   13598:	617b      	str	r3, [r7, #20]
   1359a:	e00b      	b.n	135b4 <long_division+0x4e>
   1359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1359e:	2220      	movs	r2, #32
   135a0:	1ad3      	subs	r3, r2, r3
   135a2:	2201      	movs	r2, #1
   135a4:	40da      	lsrs	r2, r3
   135a6:	0013      	movs	r3, r2
   135a8:	2100      	movs	r1, #0
   135aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   135ac:	4091      	lsls	r1, r2
   135ae:	000a      	movs	r2, r1
   135b0:	4313      	orrs	r3, r2
   135b2:	617b      	str	r3, [r7, #20]
   135b4:	2201      	movs	r2, #1
   135b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   135b8:	409a      	lsls	r2, r3
   135ba:	0013      	movs	r3, r2
   135bc:	613b      	str	r3, [r7, #16]

		r = r << 1;
   135be:	69bb      	ldr	r3, [r7, #24]
   135c0:	69fc      	ldr	r4, [r7, #28]
   135c2:	18db      	adds	r3, r3, r3
   135c4:	4164      	adcs	r4, r4
   135c6:	61bb      	str	r3, [r7, #24]
   135c8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   135ca:	68bb      	ldr	r3, [r7, #8]
   135cc:	693a      	ldr	r2, [r7, #16]
   135ce:	401a      	ands	r2, r3
   135d0:	0015      	movs	r5, r2
   135d2:	68fb      	ldr	r3, [r7, #12]
   135d4:	697a      	ldr	r2, [r7, #20]
   135d6:	401a      	ands	r2, r3
   135d8:	0016      	movs	r6, r2
   135da:	002b      	movs	r3, r5
   135dc:	4333      	orrs	r3, r6
   135de:	d007      	beq.n	135f0 <long_division+0x8a>
			r |= 0x01;
   135e0:	69bb      	ldr	r3, [r7, #24]
   135e2:	2201      	movs	r2, #1
   135e4:	4313      	orrs	r3, r2
   135e6:	61bb      	str	r3, [r7, #24]
   135e8:	69fb      	ldr	r3, [r7, #28]
   135ea:	2200      	movs	r2, #0
   135ec:	4313      	orrs	r3, r2
   135ee:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   135f0:	687a      	ldr	r2, [r7, #4]
   135f2:	69fb      	ldr	r3, [r7, #28]
   135f4:	429a      	cmp	r2, r3
   135f6:	d819      	bhi.n	1362c <long_division+0xc6>
   135f8:	687a      	ldr	r2, [r7, #4]
   135fa:	69fb      	ldr	r3, [r7, #28]
   135fc:	429a      	cmp	r2, r3
   135fe:	d103      	bne.n	13608 <long_division+0xa2>
   13600:	683a      	ldr	r2, [r7, #0]
   13602:	69bb      	ldr	r3, [r7, #24]
   13604:	429a      	cmp	r2, r3
   13606:	d811      	bhi.n	1362c <long_division+0xc6>
			r = r - d;
   13608:	69b9      	ldr	r1, [r7, #24]
   1360a:	69fa      	ldr	r2, [r7, #28]
   1360c:	683b      	ldr	r3, [r7, #0]
   1360e:	687c      	ldr	r4, [r7, #4]
   13610:	1ac9      	subs	r1, r1, r3
   13612:	41a2      	sbcs	r2, r4
   13614:	000b      	movs	r3, r1
   13616:	0014      	movs	r4, r2
   13618:	61bb      	str	r3, [r7, #24]
   1361a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   1361c:	6a3a      	ldr	r2, [r7, #32]
   1361e:	693b      	ldr	r3, [r7, #16]
   13620:	4313      	orrs	r3, r2
   13622:	623b      	str	r3, [r7, #32]
   13624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13626:	697b      	ldr	r3, [r7, #20]
   13628:	4313      	orrs	r3, r2
   1362a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   1362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1362e:	3b01      	subs	r3, #1
   13630:	62fb      	str	r3, [r7, #44]	; 0x2c
   13632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13634:	2b00      	cmp	r3, #0
   13636:	daa8      	bge.n	1358a <long_division+0x24>
		}
	}

	return q;
   13638:	6a3b      	ldr	r3, [r7, #32]
   1363a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   1363c:	0018      	movs	r0, r3
   1363e:	0021      	movs	r1, r4
   13640:	46bd      	mov	sp, r7
   13642:	b00d      	add	sp, #52	; 0x34
   13644:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013646 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   13646:	b580      	push	{r7, lr}
   13648:	b086      	sub	sp, #24
   1364a:	af00      	add	r7, sp, #0
   1364c:	60f8      	str	r0, [r7, #12]
   1364e:	60b9      	str	r1, [r7, #8]
   13650:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   13652:	2316      	movs	r3, #22
   13654:	18fb      	adds	r3, r7, r3
   13656:	2200      	movs	r2, #0
   13658:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   1365a:	68bb      	ldr	r3, [r7, #8]
   1365c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1365e:	68bb      	ldr	r3, [r7, #8]
   13660:	085a      	lsrs	r2, r3, #1
   13662:	68fb      	ldr	r3, [r7, #12]
   13664:	429a      	cmp	r2, r3
   13666:	d201      	bcs.n	1366c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   13668:	2340      	movs	r3, #64	; 0x40
   1366a:	e026      	b.n	136ba <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   1366c:	68bb      	ldr	r3, [r7, #8]
   1366e:	085b      	lsrs	r3, r3, #1
   13670:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   13672:	e00a      	b.n	1368a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   13674:	693a      	ldr	r2, [r7, #16]
   13676:	68fb      	ldr	r3, [r7, #12]
   13678:	1ad3      	subs	r3, r2, r3
   1367a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   1367c:	2316      	movs	r3, #22
   1367e:	18fb      	adds	r3, r7, r3
   13680:	881a      	ldrh	r2, [r3, #0]
   13682:	2316      	movs	r3, #22
   13684:	18fb      	adds	r3, r7, r3
   13686:	3201      	adds	r2, #1
   13688:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   1368a:	693a      	ldr	r2, [r7, #16]
   1368c:	68fb      	ldr	r3, [r7, #12]
   1368e:	429a      	cmp	r2, r3
   13690:	d2f0      	bcs.n	13674 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   13692:	2316      	movs	r3, #22
   13694:	18fb      	adds	r3, r7, r3
   13696:	2216      	movs	r2, #22
   13698:	18ba      	adds	r2, r7, r2
   1369a:	8812      	ldrh	r2, [r2, #0]
   1369c:	3a01      	subs	r2, #1
   1369e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   136a0:	2316      	movs	r3, #22
   136a2:	18fb      	adds	r3, r7, r3
   136a4:	881b      	ldrh	r3, [r3, #0]
   136a6:	2bff      	cmp	r3, #255	; 0xff
   136a8:	d901      	bls.n	136ae <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   136aa:	2340      	movs	r3, #64	; 0x40
   136ac:	e005      	b.n	136ba <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   136ae:	687b      	ldr	r3, [r7, #4]
   136b0:	2216      	movs	r2, #22
   136b2:	18ba      	adds	r2, r7, r2
   136b4:	8812      	ldrh	r2, [r2, #0]
   136b6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   136b8:	2300      	movs	r3, #0
	}
}
   136ba:	0018      	movs	r0, r3
   136bc:	46bd      	mov	sp, r7
   136be:	b006      	add	sp, #24
   136c0:	bd80      	pop	{r7, pc}
	...

000136c4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   136c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   136c6:	b0a1      	sub	sp, #132	; 0x84
   136c8:	af00      	add	r7, sp, #0
   136ca:	64f8      	str	r0, [r7, #76]	; 0x4c
   136cc:	64b9      	str	r1, [r7, #72]	; 0x48
   136ce:	647a      	str	r2, [r7, #68]	; 0x44
   136d0:	2243      	movs	r2, #67	; 0x43
   136d2:	18ba      	adds	r2, r7, r2
   136d4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   136d6:	2300      	movs	r3, #0
   136d8:	2400      	movs	r4, #0
   136da:	673b      	str	r3, [r7, #112]	; 0x70
   136dc:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   136de:	2300      	movs	r3, #0
   136e0:	2400      	movs	r4, #0
   136e2:	66bb      	str	r3, [r7, #104]	; 0x68
   136e4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   136e6:	2300      	movs	r3, #0
   136e8:	2400      	movs	r4, #0
   136ea:	67bb      	str	r3, [r7, #120]	; 0x78
   136ec:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   136ee:	2300      	movs	r3, #0
   136f0:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   136f2:	2358      	movs	r3, #88	; 0x58
   136f4:	2240      	movs	r2, #64	; 0x40
   136f6:	4694      	mov	ip, r2
   136f8:	44bc      	add	ip, r7
   136fa:	4463      	add	r3, ip
   136fc:	781a      	ldrb	r2, [r3, #0]
   136fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13700:	435a      	muls	r2, r3
   13702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13704:	429a      	cmp	r2, r3
   13706:	d901      	bls.n	1370c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   13708:	2340      	movs	r3, #64	; 0x40
   1370a:	e0b3      	b.n	13874 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1370c:	2343      	movs	r3, #67	; 0x43
   1370e:	18fb      	adds	r3, r7, r3
   13710:	781b      	ldrb	r3, [r3, #0]
   13712:	2b00      	cmp	r3, #0
   13714:	d13d      	bne.n	13792 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   13716:	2358      	movs	r3, #88	; 0x58
   13718:	2240      	movs	r2, #64	; 0x40
   1371a:	4694      	mov	ip, r2
   1371c:	44bc      	add	ip, r7
   1371e:	4463      	add	r3, ip
   13720:	781b      	ldrb	r3, [r3, #0]
   13722:	b2db      	uxtb	r3, r3
   13724:	613b      	str	r3, [r7, #16]
   13726:	2300      	movs	r3, #0
   13728:	617b      	str	r3, [r7, #20]
   1372a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1372c:	60bb      	str	r3, [r7, #8]
   1372e:	2300      	movs	r3, #0
   13730:	60fb      	str	r3, [r7, #12]
   13732:	4c52      	ldr	r4, [pc, #328]	; (1387c <_sercom_get_async_baud_val+0x1b8>)
   13734:	68ba      	ldr	r2, [r7, #8]
   13736:	68fb      	ldr	r3, [r7, #12]
   13738:	6938      	ldr	r0, [r7, #16]
   1373a:	6979      	ldr	r1, [r7, #20]
   1373c:	47a0      	blx	r4
   1373e:	0003      	movs	r3, r0
   13740:	000c      	movs	r4, r1
   13742:	001b      	movs	r3, r3
   13744:	65fb      	str	r3, [r7, #92]	; 0x5c
   13746:	2300      	movs	r3, #0
   13748:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1374a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1374c:	603b      	str	r3, [r7, #0]
   1374e:	2300      	movs	r3, #0
   13750:	607b      	str	r3, [r7, #4]
   13752:	6db8      	ldr	r0, [r7, #88]	; 0x58
   13754:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   13756:	683a      	ldr	r2, [r7, #0]
   13758:	687b      	ldr	r3, [r7, #4]
   1375a:	4c49      	ldr	r4, [pc, #292]	; (13880 <_sercom_get_async_baud_val+0x1bc>)
   1375c:	47a0      	blx	r4
   1375e:	0003      	movs	r3, r0
   13760:	000c      	movs	r4, r1
   13762:	673b      	str	r3, [r7, #112]	; 0x70
   13764:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   13766:	2100      	movs	r1, #0
   13768:	2201      	movs	r2, #1
   1376a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1376c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1376e:	1ac9      	subs	r1, r1, r3
   13770:	41a2      	sbcs	r2, r4
   13772:	000b      	movs	r3, r1
   13774:	0014      	movs	r4, r2
   13776:	66bb      	str	r3, [r7, #104]	; 0x68
   13778:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   1377a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1377c:	0c1b      	lsrs	r3, r3, #16
   1377e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   13780:	0416      	lsls	r6, r2, #16
   13782:	431e      	orrs	r6, r3
   13784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   13786:	041d      	lsls	r5, r3, #16
   13788:	0033      	movs	r3, r6
   1378a:	67bb      	str	r3, [r7, #120]	; 0x78
   1378c:	2300      	movs	r3, #0
   1378e:	67fb      	str	r3, [r7, #124]	; 0x7c
   13790:	e06a      	b.n	13868 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   13792:	2343      	movs	r3, #67	; 0x43
   13794:	18fb      	adds	r3, r7, r3
   13796:	781b      	ldrb	r3, [r3, #0]
   13798:	2b01      	cmp	r3, #1
   1379a:	d165      	bne.n	13868 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   1379c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1379e:	633b      	str	r3, [r7, #48]	; 0x30
   137a0:	2300      	movs	r3, #0
   137a2:	637b      	str	r3, [r7, #52]	; 0x34
   137a4:	2358      	movs	r3, #88	; 0x58
   137a6:	2240      	movs	r2, #64	; 0x40
   137a8:	4694      	mov	ip, r2
   137aa:	44bc      	add	ip, r7
   137ac:	4463      	add	r3, ip
   137ae:	781b      	ldrb	r3, [r3, #0]
   137b0:	b2db      	uxtb	r3, r3
   137b2:	62bb      	str	r3, [r7, #40]	; 0x28
   137b4:	2300      	movs	r3, #0
   137b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   137b8:	4c30      	ldr	r4, [pc, #192]	; (1387c <_sercom_get_async_baud_val+0x1b8>)
   137ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   137bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   137be:	6b38      	ldr	r0, [r7, #48]	; 0x30
   137c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   137c2:	47a0      	blx	r4
   137c4:	0003      	movs	r3, r0
   137c6:	000c      	movs	r4, r1
   137c8:	65bb      	str	r3, [r7, #88]	; 0x58
   137ca:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   137cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   137ce:	623b      	str	r3, [r7, #32]
   137d0:	2300      	movs	r3, #0
   137d2:	627b      	str	r3, [r7, #36]	; 0x24
   137d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   137d6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   137d8:	001a      	movs	r2, r3
   137da:	0023      	movs	r3, r4
   137dc:	6a38      	ldr	r0, [r7, #32]
   137de:	6a79      	ldr	r1, [r7, #36]	; 0x24
   137e0:	4c27      	ldr	r4, [pc, #156]	; (13880 <_sercom_get_async_baud_val+0x1bc>)
   137e2:	47a0      	blx	r4
   137e4:	0003      	movs	r3, r0
   137e6:	000c      	movs	r4, r1
   137e8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   137ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   137ec:	2380      	movs	r3, #128	; 0x80
   137ee:	019b      	lsls	r3, r3, #6
   137f0:	429a      	cmp	r2, r3
   137f2:	d901      	bls.n	137f8 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   137f4:	2340      	movs	r3, #64	; 0x40
   137f6:	e03d      	b.n	13874 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   137f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   137fa:	61bb      	str	r3, [r7, #24]
   137fc:	2300      	movs	r3, #0
   137fe:	61fb      	str	r3, [r7, #28]
   13800:	69b9      	ldr	r1, [r7, #24]
   13802:	69fa      	ldr	r2, [r7, #28]
   13804:	000b      	movs	r3, r1
   13806:	0f5b      	lsrs	r3, r3, #29
   13808:	0010      	movs	r0, r2
   1380a:	00c0      	lsls	r0, r0, #3
   1380c:	63f8      	str	r0, [r7, #60]	; 0x3c
   1380e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   13810:	4318      	orrs	r0, r3
   13812:	63f8      	str	r0, [r7, #60]	; 0x3c
   13814:	000b      	movs	r3, r1
   13816:	00db      	lsls	r3, r3, #3
   13818:	63bb      	str	r3, [r7, #56]	; 0x38
   1381a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1381c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1381e:	001a      	movs	r2, r3
   13820:	0023      	movs	r3, r4
   13822:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   13824:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   13826:	4c16      	ldr	r4, [pc, #88]	; (13880 <_sercom_get_async_baud_val+0x1bc>)
   13828:	47a0      	blx	r4
   1382a:	0003      	movs	r3, r0
   1382c:	000c      	movs	r4, r1
   1382e:	65bb      	str	r3, [r7, #88]	; 0x58
   13830:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   13832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13834:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   13836:	b2d9      	uxtb	r1, r3
   13838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1383a:	b2db      	uxtb	r3, r3
   1383c:	00db      	lsls	r3, r3, #3
   1383e:	b2da      	uxtb	r2, r3
   13840:	2317      	movs	r3, #23
   13842:	2040      	movs	r0, #64	; 0x40
   13844:	4684      	mov	ip, r0
   13846:	44bc      	add	ip, r7
   13848:	4463      	add	r3, ip
   1384a:	1a8a      	subs	r2, r1, r2
   1384c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1384e:	2317      	movs	r3, #23
   13850:	2240      	movs	r2, #64	; 0x40
   13852:	4694      	mov	ip, r2
   13854:	44bc      	add	ip, r7
   13856:	4463      	add	r3, ip
   13858:	781b      	ldrb	r3, [r3, #0]
   1385a:	035b      	lsls	r3, r3, #13
   1385c:	001a      	movs	r2, r3
   1385e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   13860:	4313      	orrs	r3, r2
   13862:	67bb      	str	r3, [r7, #120]	; 0x78
   13864:	2300      	movs	r3, #0
   13866:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   13868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1386a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   1386c:	b29a      	uxth	r2, r3
   1386e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13870:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   13872:	2300      	movs	r3, #0
}
   13874:	0018      	movs	r0, r3
   13876:	46bd      	mov	sp, r7
   13878:	b021      	add	sp, #132	; 0x84
   1387a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1387c:	0001f3bd 	.word	0x0001f3bd
   13880:	00013567 	.word	0x00013567

00013884 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   13884:	b580      	push	{r7, lr}
   13886:	b084      	sub	sp, #16
   13888:	af00      	add	r7, sp, #0
   1388a:	0002      	movs	r2, r0
   1388c:	1dfb      	adds	r3, r7, #7
   1388e:	701a      	strb	r2, [r3, #0]
   13890:	1dbb      	adds	r3, r7, #6
   13892:	1c0a      	adds	r2, r1, #0
   13894:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   13896:	4b1a      	ldr	r3, [pc, #104]	; (13900 <sercom_set_gclk_generator+0x7c>)
   13898:	781b      	ldrb	r3, [r3, #0]
   1389a:	2201      	movs	r2, #1
   1389c:	4053      	eors	r3, r2
   1389e:	b2db      	uxtb	r3, r3
   138a0:	2b00      	cmp	r3, #0
   138a2:	d103      	bne.n	138ac <sercom_set_gclk_generator+0x28>
   138a4:	1dbb      	adds	r3, r7, #6
   138a6:	781b      	ldrb	r3, [r3, #0]
   138a8:	2b00      	cmp	r3, #0
   138aa:	d01b      	beq.n	138e4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   138ac:	230c      	movs	r3, #12
   138ae:	18fb      	adds	r3, r7, r3
   138b0:	0018      	movs	r0, r3
   138b2:	4b14      	ldr	r3, [pc, #80]	; (13904 <sercom_set_gclk_generator+0x80>)
   138b4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   138b6:	230c      	movs	r3, #12
   138b8:	18fb      	adds	r3, r7, r3
   138ba:	1dfa      	adds	r2, r7, #7
   138bc:	7812      	ldrb	r2, [r2, #0]
   138be:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   138c0:	230c      	movs	r3, #12
   138c2:	18fb      	adds	r3, r7, r3
   138c4:	0019      	movs	r1, r3
   138c6:	2013      	movs	r0, #19
   138c8:	4b0f      	ldr	r3, [pc, #60]	; (13908 <sercom_set_gclk_generator+0x84>)
   138ca:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   138cc:	2013      	movs	r0, #19
   138ce:	4b0f      	ldr	r3, [pc, #60]	; (1390c <sercom_set_gclk_generator+0x88>)
   138d0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   138d2:	4b0b      	ldr	r3, [pc, #44]	; (13900 <sercom_set_gclk_generator+0x7c>)
   138d4:	1dfa      	adds	r2, r7, #7
   138d6:	7812      	ldrb	r2, [r2, #0]
   138d8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   138da:	4b09      	ldr	r3, [pc, #36]	; (13900 <sercom_set_gclk_generator+0x7c>)
   138dc:	2201      	movs	r2, #1
   138de:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   138e0:	2300      	movs	r3, #0
   138e2:	e008      	b.n	138f6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   138e4:	4b06      	ldr	r3, [pc, #24]	; (13900 <sercom_set_gclk_generator+0x7c>)
   138e6:	785b      	ldrb	r3, [r3, #1]
   138e8:	1dfa      	adds	r2, r7, #7
   138ea:	7812      	ldrb	r2, [r2, #0]
   138ec:	429a      	cmp	r2, r3
   138ee:	d101      	bne.n	138f4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   138f0:	2300      	movs	r3, #0
   138f2:	e000      	b.n	138f6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   138f4:	231d      	movs	r3, #29
}
   138f6:	0018      	movs	r0, r3
   138f8:	46bd      	mov	sp, r7
   138fa:	b004      	add	sp, #16
   138fc:	bd80      	pop	{r7, pc}
   138fe:	46c0      	nop			; (mov r8, r8)
   13900:	20004138 	.word	0x20004138
   13904:	00013551 	.word	0x00013551
   13908:	0001635d 	.word	0x0001635d
   1390c:	000163a1 	.word	0x000163a1

00013910 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   13910:	b580      	push	{r7, lr}
   13912:	b082      	sub	sp, #8
   13914:	af00      	add	r7, sp, #0
   13916:	6078      	str	r0, [r7, #4]
   13918:	000a      	movs	r2, r1
   1391a:	1cfb      	adds	r3, r7, #3
   1391c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1391e:	687b      	ldr	r3, [r7, #4]
   13920:	4a4d      	ldr	r2, [pc, #308]	; (13a58 <_sercom_get_default_pad+0x148>)
   13922:	4293      	cmp	r3, r2
   13924:	d03f      	beq.n	139a6 <_sercom_get_default_pad+0x96>
   13926:	4a4c      	ldr	r2, [pc, #304]	; (13a58 <_sercom_get_default_pad+0x148>)
   13928:	4293      	cmp	r3, r2
   1392a:	d806      	bhi.n	1393a <_sercom_get_default_pad+0x2a>
   1392c:	4a4b      	ldr	r2, [pc, #300]	; (13a5c <_sercom_get_default_pad+0x14c>)
   1392e:	4293      	cmp	r3, r2
   13930:	d00f      	beq.n	13952 <_sercom_get_default_pad+0x42>
   13932:	4a4b      	ldr	r2, [pc, #300]	; (13a60 <_sercom_get_default_pad+0x150>)
   13934:	4293      	cmp	r3, r2
   13936:	d021      	beq.n	1397c <_sercom_get_default_pad+0x6c>
   13938:	e089      	b.n	13a4e <_sercom_get_default_pad+0x13e>
   1393a:	4a4a      	ldr	r2, [pc, #296]	; (13a64 <_sercom_get_default_pad+0x154>)
   1393c:	4293      	cmp	r3, r2
   1393e:	d100      	bne.n	13942 <_sercom_get_default_pad+0x32>
   13940:	e05b      	b.n	139fa <_sercom_get_default_pad+0xea>
   13942:	4a49      	ldr	r2, [pc, #292]	; (13a68 <_sercom_get_default_pad+0x158>)
   13944:	4293      	cmp	r3, r2
   13946:	d100      	bne.n	1394a <_sercom_get_default_pad+0x3a>
   13948:	e06c      	b.n	13a24 <_sercom_get_default_pad+0x114>
   1394a:	4a48      	ldr	r2, [pc, #288]	; (13a6c <_sercom_get_default_pad+0x15c>)
   1394c:	4293      	cmp	r3, r2
   1394e:	d03f      	beq.n	139d0 <_sercom_get_default_pad+0xc0>
   13950:	e07d      	b.n	13a4e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   13952:	1cfb      	adds	r3, r7, #3
   13954:	781b      	ldrb	r3, [r3, #0]
   13956:	2b01      	cmp	r3, #1
   13958:	d00a      	beq.n	13970 <_sercom_get_default_pad+0x60>
   1395a:	dc02      	bgt.n	13962 <_sercom_get_default_pad+0x52>
   1395c:	2b00      	cmp	r3, #0
   1395e:	d005      	beq.n	1396c <_sercom_get_default_pad+0x5c>
   13960:	e075      	b.n	13a4e <_sercom_get_default_pad+0x13e>
   13962:	2b02      	cmp	r3, #2
   13964:	d006      	beq.n	13974 <_sercom_get_default_pad+0x64>
   13966:	2b03      	cmp	r3, #3
   13968:	d006      	beq.n	13978 <_sercom_get_default_pad+0x68>
   1396a:	e070      	b.n	13a4e <_sercom_get_default_pad+0x13e>
   1396c:	4b40      	ldr	r3, [pc, #256]	; (13a70 <_sercom_get_default_pad+0x160>)
   1396e:	e06f      	b.n	13a50 <_sercom_get_default_pad+0x140>
   13970:	4b40      	ldr	r3, [pc, #256]	; (13a74 <_sercom_get_default_pad+0x164>)
   13972:	e06d      	b.n	13a50 <_sercom_get_default_pad+0x140>
   13974:	4b40      	ldr	r3, [pc, #256]	; (13a78 <_sercom_get_default_pad+0x168>)
   13976:	e06b      	b.n	13a50 <_sercom_get_default_pad+0x140>
   13978:	4b40      	ldr	r3, [pc, #256]	; (13a7c <_sercom_get_default_pad+0x16c>)
   1397a:	e069      	b.n	13a50 <_sercom_get_default_pad+0x140>
   1397c:	1cfb      	adds	r3, r7, #3
   1397e:	781b      	ldrb	r3, [r3, #0]
   13980:	2b01      	cmp	r3, #1
   13982:	d00a      	beq.n	1399a <_sercom_get_default_pad+0x8a>
   13984:	dc02      	bgt.n	1398c <_sercom_get_default_pad+0x7c>
   13986:	2b00      	cmp	r3, #0
   13988:	d005      	beq.n	13996 <_sercom_get_default_pad+0x86>
   1398a:	e060      	b.n	13a4e <_sercom_get_default_pad+0x13e>
   1398c:	2b02      	cmp	r3, #2
   1398e:	d006      	beq.n	1399e <_sercom_get_default_pad+0x8e>
   13990:	2b03      	cmp	r3, #3
   13992:	d006      	beq.n	139a2 <_sercom_get_default_pad+0x92>
   13994:	e05b      	b.n	13a4e <_sercom_get_default_pad+0x13e>
   13996:	2303      	movs	r3, #3
   13998:	e05a      	b.n	13a50 <_sercom_get_default_pad+0x140>
   1399a:	4b39      	ldr	r3, [pc, #228]	; (13a80 <_sercom_get_default_pad+0x170>)
   1399c:	e058      	b.n	13a50 <_sercom_get_default_pad+0x140>
   1399e:	4b39      	ldr	r3, [pc, #228]	; (13a84 <_sercom_get_default_pad+0x174>)
   139a0:	e056      	b.n	13a50 <_sercom_get_default_pad+0x140>
   139a2:	4b39      	ldr	r3, [pc, #228]	; (13a88 <_sercom_get_default_pad+0x178>)
   139a4:	e054      	b.n	13a50 <_sercom_get_default_pad+0x140>
   139a6:	1cfb      	adds	r3, r7, #3
   139a8:	781b      	ldrb	r3, [r3, #0]
   139aa:	2b01      	cmp	r3, #1
   139ac:	d00a      	beq.n	139c4 <_sercom_get_default_pad+0xb4>
   139ae:	dc02      	bgt.n	139b6 <_sercom_get_default_pad+0xa6>
   139b0:	2b00      	cmp	r3, #0
   139b2:	d005      	beq.n	139c0 <_sercom_get_default_pad+0xb0>
   139b4:	e04b      	b.n	13a4e <_sercom_get_default_pad+0x13e>
   139b6:	2b02      	cmp	r3, #2
   139b8:	d006      	beq.n	139c8 <_sercom_get_default_pad+0xb8>
   139ba:	2b03      	cmp	r3, #3
   139bc:	d006      	beq.n	139cc <_sercom_get_default_pad+0xbc>
   139be:	e046      	b.n	13a4e <_sercom_get_default_pad+0x13e>
   139c0:	4b32      	ldr	r3, [pc, #200]	; (13a8c <_sercom_get_default_pad+0x17c>)
   139c2:	e045      	b.n	13a50 <_sercom_get_default_pad+0x140>
   139c4:	4b32      	ldr	r3, [pc, #200]	; (13a90 <_sercom_get_default_pad+0x180>)
   139c6:	e043      	b.n	13a50 <_sercom_get_default_pad+0x140>
   139c8:	4b32      	ldr	r3, [pc, #200]	; (13a94 <_sercom_get_default_pad+0x184>)
   139ca:	e041      	b.n	13a50 <_sercom_get_default_pad+0x140>
   139cc:	4b32      	ldr	r3, [pc, #200]	; (13a98 <_sercom_get_default_pad+0x188>)
   139ce:	e03f      	b.n	13a50 <_sercom_get_default_pad+0x140>
   139d0:	1cfb      	adds	r3, r7, #3
   139d2:	781b      	ldrb	r3, [r3, #0]
   139d4:	2b01      	cmp	r3, #1
   139d6:	d00a      	beq.n	139ee <_sercom_get_default_pad+0xde>
   139d8:	dc02      	bgt.n	139e0 <_sercom_get_default_pad+0xd0>
   139da:	2b00      	cmp	r3, #0
   139dc:	d005      	beq.n	139ea <_sercom_get_default_pad+0xda>
   139de:	e036      	b.n	13a4e <_sercom_get_default_pad+0x13e>
   139e0:	2b02      	cmp	r3, #2
   139e2:	d006      	beq.n	139f2 <_sercom_get_default_pad+0xe2>
   139e4:	2b03      	cmp	r3, #3
   139e6:	d006      	beq.n	139f6 <_sercom_get_default_pad+0xe6>
   139e8:	e031      	b.n	13a4e <_sercom_get_default_pad+0x13e>
   139ea:	4b2c      	ldr	r3, [pc, #176]	; (13a9c <_sercom_get_default_pad+0x18c>)
   139ec:	e030      	b.n	13a50 <_sercom_get_default_pad+0x140>
   139ee:	4b2c      	ldr	r3, [pc, #176]	; (13aa0 <_sercom_get_default_pad+0x190>)
   139f0:	e02e      	b.n	13a50 <_sercom_get_default_pad+0x140>
   139f2:	4b2c      	ldr	r3, [pc, #176]	; (13aa4 <_sercom_get_default_pad+0x194>)
   139f4:	e02c      	b.n	13a50 <_sercom_get_default_pad+0x140>
   139f6:	4b2c      	ldr	r3, [pc, #176]	; (13aa8 <_sercom_get_default_pad+0x198>)
   139f8:	e02a      	b.n	13a50 <_sercom_get_default_pad+0x140>
   139fa:	1cfb      	adds	r3, r7, #3
   139fc:	781b      	ldrb	r3, [r3, #0]
   139fe:	2b01      	cmp	r3, #1
   13a00:	d00a      	beq.n	13a18 <_sercom_get_default_pad+0x108>
   13a02:	dc02      	bgt.n	13a0a <_sercom_get_default_pad+0xfa>
   13a04:	2b00      	cmp	r3, #0
   13a06:	d005      	beq.n	13a14 <_sercom_get_default_pad+0x104>
   13a08:	e021      	b.n	13a4e <_sercom_get_default_pad+0x13e>
   13a0a:	2b02      	cmp	r3, #2
   13a0c:	d006      	beq.n	13a1c <_sercom_get_default_pad+0x10c>
   13a0e:	2b03      	cmp	r3, #3
   13a10:	d006      	beq.n	13a20 <_sercom_get_default_pad+0x110>
   13a12:	e01c      	b.n	13a4e <_sercom_get_default_pad+0x13e>
   13a14:	4b25      	ldr	r3, [pc, #148]	; (13aac <_sercom_get_default_pad+0x19c>)
   13a16:	e01b      	b.n	13a50 <_sercom_get_default_pad+0x140>
   13a18:	4b25      	ldr	r3, [pc, #148]	; (13ab0 <_sercom_get_default_pad+0x1a0>)
   13a1a:	e019      	b.n	13a50 <_sercom_get_default_pad+0x140>
   13a1c:	4b25      	ldr	r3, [pc, #148]	; (13ab4 <_sercom_get_default_pad+0x1a4>)
   13a1e:	e017      	b.n	13a50 <_sercom_get_default_pad+0x140>
   13a20:	4b25      	ldr	r3, [pc, #148]	; (13ab8 <_sercom_get_default_pad+0x1a8>)
   13a22:	e015      	b.n	13a50 <_sercom_get_default_pad+0x140>
   13a24:	1cfb      	adds	r3, r7, #3
   13a26:	781b      	ldrb	r3, [r3, #0]
   13a28:	2b01      	cmp	r3, #1
   13a2a:	d00a      	beq.n	13a42 <_sercom_get_default_pad+0x132>
   13a2c:	dc02      	bgt.n	13a34 <_sercom_get_default_pad+0x124>
   13a2e:	2b00      	cmp	r3, #0
   13a30:	d005      	beq.n	13a3e <_sercom_get_default_pad+0x12e>
   13a32:	e00c      	b.n	13a4e <_sercom_get_default_pad+0x13e>
   13a34:	2b02      	cmp	r3, #2
   13a36:	d006      	beq.n	13a46 <_sercom_get_default_pad+0x136>
   13a38:	2b03      	cmp	r3, #3
   13a3a:	d006      	beq.n	13a4a <_sercom_get_default_pad+0x13a>
   13a3c:	e007      	b.n	13a4e <_sercom_get_default_pad+0x13e>
   13a3e:	4b1f      	ldr	r3, [pc, #124]	; (13abc <_sercom_get_default_pad+0x1ac>)
   13a40:	e006      	b.n	13a50 <_sercom_get_default_pad+0x140>
   13a42:	4b1f      	ldr	r3, [pc, #124]	; (13ac0 <_sercom_get_default_pad+0x1b0>)
   13a44:	e004      	b.n	13a50 <_sercom_get_default_pad+0x140>
   13a46:	4b1f      	ldr	r3, [pc, #124]	; (13ac4 <_sercom_get_default_pad+0x1b4>)
   13a48:	e002      	b.n	13a50 <_sercom_get_default_pad+0x140>
   13a4a:	4b1f      	ldr	r3, [pc, #124]	; (13ac8 <_sercom_get_default_pad+0x1b8>)
   13a4c:	e000      	b.n	13a50 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   13a4e:	2300      	movs	r3, #0
}
   13a50:	0018      	movs	r0, r3
   13a52:	46bd      	mov	sp, r7
   13a54:	b002      	add	sp, #8
   13a56:	bd80      	pop	{r7, pc}
   13a58:	42001000 	.word	0x42001000
   13a5c:	42000800 	.word	0x42000800
   13a60:	42000c00 	.word	0x42000c00
   13a64:	42001800 	.word	0x42001800
   13a68:	42001c00 	.word	0x42001c00
   13a6c:	42001400 	.word	0x42001400
   13a70:	00040003 	.word	0x00040003
   13a74:	00050003 	.word	0x00050003
   13a78:	00060003 	.word	0x00060003
   13a7c:	00070003 	.word	0x00070003
   13a80:	00010003 	.word	0x00010003
   13a84:	001e0003 	.word	0x001e0003
   13a88:	001f0003 	.word	0x001f0003
   13a8c:	00080003 	.word	0x00080003
   13a90:	00090003 	.word	0x00090003
   13a94:	000a0003 	.word	0x000a0003
   13a98:	000b0003 	.word	0x000b0003
   13a9c:	00100003 	.word	0x00100003
   13aa0:	00110003 	.word	0x00110003
   13aa4:	00120003 	.word	0x00120003
   13aa8:	00130003 	.word	0x00130003
   13aac:	000c0003 	.word	0x000c0003
   13ab0:	000d0003 	.word	0x000d0003
   13ab4:	000e0003 	.word	0x000e0003
   13ab8:	000f0003 	.word	0x000f0003
   13abc:	00160003 	.word	0x00160003
   13ac0:	00170003 	.word	0x00170003
   13ac4:	00180003 	.word	0x00180003
   13ac8:	00190003 	.word	0x00190003

00013acc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   13acc:	b590      	push	{r4, r7, lr}
   13ace:	b08b      	sub	sp, #44	; 0x2c
   13ad0:	af00      	add	r7, sp, #0
   13ad2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   13ad4:	230c      	movs	r3, #12
   13ad6:	18fb      	adds	r3, r7, r3
   13ad8:	4a0f      	ldr	r2, [pc, #60]	; (13b18 <_sercom_get_sercom_inst_index+0x4c>)
   13ada:	ca13      	ldmia	r2!, {r0, r1, r4}
   13adc:	c313      	stmia	r3!, {r0, r1, r4}
   13ade:	ca13      	ldmia	r2!, {r0, r1, r4}
   13ae0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   13ae2:	2300      	movs	r3, #0
   13ae4:	627b      	str	r3, [r7, #36]	; 0x24
   13ae6:	e00e      	b.n	13b06 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   13ae8:	230c      	movs	r3, #12
   13aea:	18fb      	adds	r3, r7, r3
   13aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13aee:	0092      	lsls	r2, r2, #2
   13af0:	58d3      	ldr	r3, [r2, r3]
   13af2:	001a      	movs	r2, r3
   13af4:	687b      	ldr	r3, [r7, #4]
   13af6:	429a      	cmp	r2, r3
   13af8:	d102      	bne.n	13b00 <_sercom_get_sercom_inst_index+0x34>
			return i;
   13afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13afc:	b2db      	uxtb	r3, r3
   13afe:	e006      	b.n	13b0e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   13b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13b02:	3301      	adds	r3, #1
   13b04:	627b      	str	r3, [r7, #36]	; 0x24
   13b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13b08:	2b05      	cmp	r3, #5
   13b0a:	d9ed      	bls.n	13ae8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   13b0c:	2300      	movs	r3, #0
}
   13b0e:	0018      	movs	r0, r3
   13b10:	46bd      	mov	sp, r7
   13b12:	b00b      	add	sp, #44	; 0x2c
   13b14:	bd90      	pop	{r4, r7, pc}
   13b16:	46c0      	nop			; (mov r8, r8)
   13b18:	00026478 	.word	0x00026478

00013b1c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   13b1c:	b580      	push	{r7, lr}
   13b1e:	b082      	sub	sp, #8
   13b20:	af00      	add	r7, sp, #0
   13b22:	0002      	movs	r2, r0
   13b24:	1dfb      	adds	r3, r7, #7
   13b26:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   13b28:	46c0      	nop			; (mov r8, r8)
   13b2a:	46bd      	mov	sp, r7
   13b2c:	b002      	add	sp, #8
   13b2e:	bd80      	pop	{r7, pc}

00013b30 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   13b30:	b580      	push	{r7, lr}
   13b32:	b084      	sub	sp, #16
   13b34:	af00      	add	r7, sp, #0
   13b36:	0002      	movs	r2, r0
   13b38:	6039      	str	r1, [r7, #0]
   13b3a:	1dfb      	adds	r3, r7, #7
   13b3c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   13b3e:	4b13      	ldr	r3, [pc, #76]	; (13b8c <_sercom_set_handler+0x5c>)
   13b40:	781b      	ldrb	r3, [r3, #0]
   13b42:	2201      	movs	r2, #1
   13b44:	4053      	eors	r3, r2
   13b46:	b2db      	uxtb	r3, r3
   13b48:	2b00      	cmp	r3, #0
   13b4a:	d015      	beq.n	13b78 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   13b4c:	2300      	movs	r3, #0
   13b4e:	60fb      	str	r3, [r7, #12]
   13b50:	e00c      	b.n	13b6c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   13b52:	4b0f      	ldr	r3, [pc, #60]	; (13b90 <_sercom_set_handler+0x60>)
   13b54:	68fa      	ldr	r2, [r7, #12]
   13b56:	0092      	lsls	r2, r2, #2
   13b58:	490e      	ldr	r1, [pc, #56]	; (13b94 <_sercom_set_handler+0x64>)
   13b5a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   13b5c:	4b0e      	ldr	r3, [pc, #56]	; (13b98 <_sercom_set_handler+0x68>)
   13b5e:	68fa      	ldr	r2, [r7, #12]
   13b60:	0092      	lsls	r2, r2, #2
   13b62:	2100      	movs	r1, #0
   13b64:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   13b66:	68fb      	ldr	r3, [r7, #12]
   13b68:	3301      	adds	r3, #1
   13b6a:	60fb      	str	r3, [r7, #12]
   13b6c:	68fb      	ldr	r3, [r7, #12]
   13b6e:	2b05      	cmp	r3, #5
   13b70:	d9ef      	bls.n	13b52 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   13b72:	4b06      	ldr	r3, [pc, #24]	; (13b8c <_sercom_set_handler+0x5c>)
   13b74:	2201      	movs	r2, #1
   13b76:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   13b78:	1dfb      	adds	r3, r7, #7
   13b7a:	781a      	ldrb	r2, [r3, #0]
   13b7c:	4b04      	ldr	r3, [pc, #16]	; (13b90 <_sercom_set_handler+0x60>)
   13b7e:	0092      	lsls	r2, r2, #2
   13b80:	6839      	ldr	r1, [r7, #0]
   13b82:	50d1      	str	r1, [r2, r3]
}
   13b84:	46c0      	nop			; (mov r8, r8)
   13b86:	46bd      	mov	sp, r7
   13b88:	b004      	add	sp, #16
   13b8a:	bd80      	pop	{r7, pc}
   13b8c:	2000413a 	.word	0x2000413a
   13b90:	2000413c 	.word	0x2000413c
   13b94:	00013b1d 	.word	0x00013b1d
   13b98:	20005a0c 	.word	0x20005a0c

00013b9c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   13b9c:	b590      	push	{r4, r7, lr}
   13b9e:	b085      	sub	sp, #20
   13ba0:	af00      	add	r7, sp, #0
   13ba2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   13ba4:	2308      	movs	r3, #8
   13ba6:	18fb      	adds	r3, r7, r3
   13ba8:	4a0b      	ldr	r2, [pc, #44]	; (13bd8 <_sercom_get_interrupt_vector+0x3c>)
   13baa:	6811      	ldr	r1, [r2, #0]
   13bac:	6019      	str	r1, [r3, #0]
   13bae:	8892      	ldrh	r2, [r2, #4]
   13bb0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   13bb2:	230f      	movs	r3, #15
   13bb4:	18fc      	adds	r4, r7, r3
   13bb6:	687b      	ldr	r3, [r7, #4]
   13bb8:	0018      	movs	r0, r3
   13bba:	4b08      	ldr	r3, [pc, #32]	; (13bdc <_sercom_get_interrupt_vector+0x40>)
   13bbc:	4798      	blx	r3
   13bbe:	0003      	movs	r3, r0
   13bc0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   13bc2:	230f      	movs	r3, #15
   13bc4:	18fb      	adds	r3, r7, r3
   13bc6:	781b      	ldrb	r3, [r3, #0]
   13bc8:	2208      	movs	r2, #8
   13bca:	18ba      	adds	r2, r7, r2
   13bcc:	5cd3      	ldrb	r3, [r2, r3]
   13bce:	b25b      	sxtb	r3, r3
}
   13bd0:	0018      	movs	r0, r3
   13bd2:	46bd      	mov	sp, r7
   13bd4:	b005      	add	sp, #20
   13bd6:	bd90      	pop	{r4, r7, pc}
   13bd8:	00026490 	.word	0x00026490
   13bdc:	00013acd 	.word	0x00013acd

00013be0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   13be0:	b580      	push	{r7, lr}
   13be2:	af00      	add	r7, sp, #0
   13be4:	4b03      	ldr	r3, [pc, #12]	; (13bf4 <SERCOM0_Handler+0x14>)
   13be6:	681b      	ldr	r3, [r3, #0]
   13be8:	2000      	movs	r0, #0
   13bea:	4798      	blx	r3
   13bec:	46c0      	nop			; (mov r8, r8)
   13bee:	46bd      	mov	sp, r7
   13bf0:	bd80      	pop	{r7, pc}
   13bf2:	46c0      	nop			; (mov r8, r8)
   13bf4:	2000413c 	.word	0x2000413c

00013bf8 <SERCOM1_Handler>:
   13bf8:	b580      	push	{r7, lr}
   13bfa:	af00      	add	r7, sp, #0
   13bfc:	4b03      	ldr	r3, [pc, #12]	; (13c0c <SERCOM1_Handler+0x14>)
   13bfe:	685b      	ldr	r3, [r3, #4]
   13c00:	2001      	movs	r0, #1
   13c02:	4798      	blx	r3
   13c04:	46c0      	nop			; (mov r8, r8)
   13c06:	46bd      	mov	sp, r7
   13c08:	bd80      	pop	{r7, pc}
   13c0a:	46c0      	nop			; (mov r8, r8)
   13c0c:	2000413c 	.word	0x2000413c

00013c10 <SERCOM2_Handler>:
   13c10:	b580      	push	{r7, lr}
   13c12:	af00      	add	r7, sp, #0
   13c14:	4b03      	ldr	r3, [pc, #12]	; (13c24 <SERCOM2_Handler+0x14>)
   13c16:	689b      	ldr	r3, [r3, #8]
   13c18:	2002      	movs	r0, #2
   13c1a:	4798      	blx	r3
   13c1c:	46c0      	nop			; (mov r8, r8)
   13c1e:	46bd      	mov	sp, r7
   13c20:	bd80      	pop	{r7, pc}
   13c22:	46c0      	nop			; (mov r8, r8)
   13c24:	2000413c 	.word	0x2000413c

00013c28 <SERCOM3_Handler>:
   13c28:	b580      	push	{r7, lr}
   13c2a:	af00      	add	r7, sp, #0
   13c2c:	4b03      	ldr	r3, [pc, #12]	; (13c3c <SERCOM3_Handler+0x14>)
   13c2e:	68db      	ldr	r3, [r3, #12]
   13c30:	2003      	movs	r0, #3
   13c32:	4798      	blx	r3
   13c34:	46c0      	nop			; (mov r8, r8)
   13c36:	46bd      	mov	sp, r7
   13c38:	bd80      	pop	{r7, pc}
   13c3a:	46c0      	nop			; (mov r8, r8)
   13c3c:	2000413c 	.word	0x2000413c

00013c40 <SERCOM4_Handler>:
   13c40:	b580      	push	{r7, lr}
   13c42:	af00      	add	r7, sp, #0
   13c44:	4b03      	ldr	r3, [pc, #12]	; (13c54 <SERCOM4_Handler+0x14>)
   13c46:	691b      	ldr	r3, [r3, #16]
   13c48:	2004      	movs	r0, #4
   13c4a:	4798      	blx	r3
   13c4c:	46c0      	nop			; (mov r8, r8)
   13c4e:	46bd      	mov	sp, r7
   13c50:	bd80      	pop	{r7, pc}
   13c52:	46c0      	nop			; (mov r8, r8)
   13c54:	2000413c 	.word	0x2000413c

00013c58 <SERCOM5_Handler>:
   13c58:	b580      	push	{r7, lr}
   13c5a:	af00      	add	r7, sp, #0
   13c5c:	4b03      	ldr	r3, [pc, #12]	; (13c6c <SERCOM5_Handler+0x14>)
   13c5e:	695b      	ldr	r3, [r3, #20]
   13c60:	2005      	movs	r0, #5
   13c62:	4798      	blx	r3
   13c64:	46c0      	nop			; (mov r8, r8)
   13c66:	46bd      	mov	sp, r7
   13c68:	bd80      	pop	{r7, pc}
   13c6a:	46c0      	nop			; (mov r8, r8)
   13c6c:	2000413c 	.word	0x2000413c

00013c70 <system_pinmux_get_config_defaults>:
{
   13c70:	b580      	push	{r7, lr}
   13c72:	b082      	sub	sp, #8
   13c74:	af00      	add	r7, sp, #0
   13c76:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   13c78:	687b      	ldr	r3, [r7, #4]
   13c7a:	2280      	movs	r2, #128	; 0x80
   13c7c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   13c7e:	687b      	ldr	r3, [r7, #4]
   13c80:	2200      	movs	r2, #0
   13c82:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   13c84:	687b      	ldr	r3, [r7, #4]
   13c86:	2201      	movs	r2, #1
   13c88:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   13c8a:	687b      	ldr	r3, [r7, #4]
   13c8c:	2200      	movs	r2, #0
   13c8e:	70da      	strb	r2, [r3, #3]
}
   13c90:	46c0      	nop			; (mov r8, r8)
   13c92:	46bd      	mov	sp, r7
   13c94:	b002      	add	sp, #8
   13c96:	bd80      	pop	{r7, pc}

00013c98 <system_pinmux_get_group_from_gpio_pin>:
{
   13c98:	b580      	push	{r7, lr}
   13c9a:	b084      	sub	sp, #16
   13c9c:	af00      	add	r7, sp, #0
   13c9e:	0002      	movs	r2, r0
   13ca0:	1dfb      	adds	r3, r7, #7
   13ca2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13ca4:	230f      	movs	r3, #15
   13ca6:	18fb      	adds	r3, r7, r3
   13ca8:	1dfa      	adds	r2, r7, #7
   13caa:	7812      	ldrb	r2, [r2, #0]
   13cac:	09d2      	lsrs	r2, r2, #7
   13cae:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13cb0:	230e      	movs	r3, #14
   13cb2:	18fb      	adds	r3, r7, r3
   13cb4:	1dfa      	adds	r2, r7, #7
   13cb6:	7812      	ldrb	r2, [r2, #0]
   13cb8:	0952      	lsrs	r2, r2, #5
   13cba:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13cbc:	4b0d      	ldr	r3, [pc, #52]	; (13cf4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13cbe:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13cc0:	230f      	movs	r3, #15
   13cc2:	18fb      	adds	r3, r7, r3
   13cc4:	781b      	ldrb	r3, [r3, #0]
   13cc6:	2b00      	cmp	r3, #0
   13cc8:	d10f      	bne.n	13cea <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13cca:	230f      	movs	r3, #15
   13ccc:	18fb      	adds	r3, r7, r3
   13cce:	781b      	ldrb	r3, [r3, #0]
   13cd0:	009b      	lsls	r3, r3, #2
   13cd2:	2210      	movs	r2, #16
   13cd4:	4694      	mov	ip, r2
   13cd6:	44bc      	add	ip, r7
   13cd8:	4463      	add	r3, ip
   13cda:	3b08      	subs	r3, #8
   13cdc:	681a      	ldr	r2, [r3, #0]
   13cde:	230e      	movs	r3, #14
   13ce0:	18fb      	adds	r3, r7, r3
   13ce2:	781b      	ldrb	r3, [r3, #0]
   13ce4:	01db      	lsls	r3, r3, #7
   13ce6:	18d3      	adds	r3, r2, r3
   13ce8:	e000      	b.n	13cec <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13cea:	2300      	movs	r3, #0
}
   13cec:	0018      	movs	r0, r3
   13cee:	46bd      	mov	sp, r7
   13cf0:	b004      	add	sp, #16
   13cf2:	bd80      	pop	{r7, pc}
   13cf4:	41004400 	.word	0x41004400

00013cf8 <port_get_group_from_gpio_pin>:
{
   13cf8:	b580      	push	{r7, lr}
   13cfa:	b082      	sub	sp, #8
   13cfc:	af00      	add	r7, sp, #0
   13cfe:	0002      	movs	r2, r0
   13d00:	1dfb      	adds	r3, r7, #7
   13d02:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13d04:	1dfb      	adds	r3, r7, #7
   13d06:	781b      	ldrb	r3, [r3, #0]
   13d08:	0018      	movs	r0, r3
   13d0a:	4b03      	ldr	r3, [pc, #12]	; (13d18 <port_get_group_from_gpio_pin+0x20>)
   13d0c:	4798      	blx	r3
   13d0e:	0003      	movs	r3, r0
}
   13d10:	0018      	movs	r0, r3
   13d12:	46bd      	mov	sp, r7
   13d14:	b002      	add	sp, #8
   13d16:	bd80      	pop	{r7, pc}
   13d18:	00013c99 	.word	0x00013c99

00013d1c <port_pin_set_output_level>:
{
   13d1c:	b580      	push	{r7, lr}
   13d1e:	b084      	sub	sp, #16
   13d20:	af00      	add	r7, sp, #0
   13d22:	0002      	movs	r2, r0
   13d24:	1dfb      	adds	r3, r7, #7
   13d26:	701a      	strb	r2, [r3, #0]
   13d28:	1dbb      	adds	r3, r7, #6
   13d2a:	1c0a      	adds	r2, r1, #0
   13d2c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   13d2e:	1dfb      	adds	r3, r7, #7
   13d30:	781b      	ldrb	r3, [r3, #0]
   13d32:	0018      	movs	r0, r3
   13d34:	4b0d      	ldr	r3, [pc, #52]	; (13d6c <port_pin_set_output_level+0x50>)
   13d36:	4798      	blx	r3
   13d38:	0003      	movs	r3, r0
   13d3a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   13d3c:	1dfb      	adds	r3, r7, #7
   13d3e:	781b      	ldrb	r3, [r3, #0]
   13d40:	221f      	movs	r2, #31
   13d42:	4013      	ands	r3, r2
   13d44:	2201      	movs	r2, #1
   13d46:	409a      	lsls	r2, r3
   13d48:	0013      	movs	r3, r2
   13d4a:	60bb      	str	r3, [r7, #8]
	if (level) {
   13d4c:	1dbb      	adds	r3, r7, #6
   13d4e:	781b      	ldrb	r3, [r3, #0]
   13d50:	2b00      	cmp	r3, #0
   13d52:	d003      	beq.n	13d5c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   13d54:	68fb      	ldr	r3, [r7, #12]
   13d56:	68ba      	ldr	r2, [r7, #8]
   13d58:	619a      	str	r2, [r3, #24]
}
   13d5a:	e002      	b.n	13d62 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   13d5c:	68fb      	ldr	r3, [r7, #12]
   13d5e:	68ba      	ldr	r2, [r7, #8]
   13d60:	615a      	str	r2, [r3, #20]
}
   13d62:	46c0      	nop			; (mov r8, r8)
   13d64:	46bd      	mov	sp, r7
   13d66:	b004      	add	sp, #16
   13d68:	bd80      	pop	{r7, pc}
   13d6a:	46c0      	nop			; (mov r8, r8)
   13d6c:	00013cf9 	.word	0x00013cf9

00013d70 <system_gclk_chan_get_config_defaults>:
{
   13d70:	b580      	push	{r7, lr}
   13d72:	b082      	sub	sp, #8
   13d74:	af00      	add	r7, sp, #0
   13d76:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   13d78:	687b      	ldr	r3, [r7, #4]
   13d7a:	2200      	movs	r2, #0
   13d7c:	701a      	strb	r2, [r3, #0]
}
   13d7e:	46c0      	nop			; (mov r8, r8)
   13d80:	46bd      	mov	sp, r7
   13d82:	b002      	add	sp, #8
   13d84:	bd80      	pop	{r7, pc}
	...

00013d88 <system_apb_clock_set_mask>:
{
   13d88:	b580      	push	{r7, lr}
   13d8a:	b082      	sub	sp, #8
   13d8c:	af00      	add	r7, sp, #0
   13d8e:	0002      	movs	r2, r0
   13d90:	6039      	str	r1, [r7, #0]
   13d92:	1dfb      	adds	r3, r7, #7
   13d94:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13d96:	1dfb      	adds	r3, r7, #7
   13d98:	781b      	ldrb	r3, [r3, #0]
   13d9a:	2b01      	cmp	r3, #1
   13d9c:	d00a      	beq.n	13db4 <system_apb_clock_set_mask+0x2c>
   13d9e:	2b02      	cmp	r3, #2
   13da0:	d00f      	beq.n	13dc2 <system_apb_clock_set_mask+0x3a>
   13da2:	2b00      	cmp	r3, #0
   13da4:	d114      	bne.n	13dd0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   13da6:	4b0e      	ldr	r3, [pc, #56]	; (13de0 <system_apb_clock_set_mask+0x58>)
   13da8:	4a0d      	ldr	r2, [pc, #52]	; (13de0 <system_apb_clock_set_mask+0x58>)
   13daa:	6991      	ldr	r1, [r2, #24]
   13dac:	683a      	ldr	r2, [r7, #0]
   13dae:	430a      	orrs	r2, r1
   13db0:	619a      	str	r2, [r3, #24]
			break;
   13db2:	e00f      	b.n	13dd4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   13db4:	4b0a      	ldr	r3, [pc, #40]	; (13de0 <system_apb_clock_set_mask+0x58>)
   13db6:	4a0a      	ldr	r2, [pc, #40]	; (13de0 <system_apb_clock_set_mask+0x58>)
   13db8:	69d1      	ldr	r1, [r2, #28]
   13dba:	683a      	ldr	r2, [r7, #0]
   13dbc:	430a      	orrs	r2, r1
   13dbe:	61da      	str	r2, [r3, #28]
			break;
   13dc0:	e008      	b.n	13dd4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   13dc2:	4b07      	ldr	r3, [pc, #28]	; (13de0 <system_apb_clock_set_mask+0x58>)
   13dc4:	4a06      	ldr	r2, [pc, #24]	; (13de0 <system_apb_clock_set_mask+0x58>)
   13dc6:	6a11      	ldr	r1, [r2, #32]
   13dc8:	683a      	ldr	r2, [r7, #0]
   13dca:	430a      	orrs	r2, r1
   13dcc:	621a      	str	r2, [r3, #32]
			break;
   13dce:	e001      	b.n	13dd4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   13dd0:	2317      	movs	r3, #23
   13dd2:	e000      	b.n	13dd6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   13dd4:	2300      	movs	r3, #0
}
   13dd6:	0018      	movs	r0, r3
   13dd8:	46bd      	mov	sp, r7
   13dda:	b002      	add	sp, #8
   13ddc:	bd80      	pop	{r7, pc}
   13dde:	46c0      	nop			; (mov r8, r8)
   13de0:	40000400 	.word	0x40000400

00013de4 <system_is_debugger_present>:
{
   13de4:	b580      	push	{r7, lr}
   13de6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   13de8:	4b05      	ldr	r3, [pc, #20]	; (13e00 <system_is_debugger_present+0x1c>)
   13dea:	789b      	ldrb	r3, [r3, #2]
   13dec:	b2db      	uxtb	r3, r3
   13dee:	001a      	movs	r2, r3
   13df0:	2302      	movs	r3, #2
   13df2:	4013      	ands	r3, r2
   13df4:	1e5a      	subs	r2, r3, #1
   13df6:	4193      	sbcs	r3, r2
   13df8:	b2db      	uxtb	r3, r3
}
   13dfa:	0018      	movs	r0, r3
   13dfc:	46bd      	mov	sp, r7
   13dfe:	bd80      	pop	{r7, pc}
   13e00:	41002000 	.word	0x41002000

00013e04 <system_interrupt_enable>:
{
   13e04:	b580      	push	{r7, lr}
   13e06:	b082      	sub	sp, #8
   13e08:	af00      	add	r7, sp, #0
   13e0a:	0002      	movs	r2, r0
   13e0c:	1dfb      	adds	r3, r7, #7
   13e0e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13e10:	4b06      	ldr	r3, [pc, #24]	; (13e2c <system_interrupt_enable+0x28>)
   13e12:	1dfa      	adds	r2, r7, #7
   13e14:	7812      	ldrb	r2, [r2, #0]
   13e16:	0011      	movs	r1, r2
   13e18:	221f      	movs	r2, #31
   13e1a:	400a      	ands	r2, r1
   13e1c:	2101      	movs	r1, #1
   13e1e:	4091      	lsls	r1, r2
   13e20:	000a      	movs	r2, r1
   13e22:	601a      	str	r2, [r3, #0]
}
   13e24:	46c0      	nop			; (mov r8, r8)
   13e26:	46bd      	mov	sp, r7
   13e28:	b002      	add	sp, #8
   13e2a:	bd80      	pop	{r7, pc}
   13e2c:	e000e100 	.word	0xe000e100

00013e30 <system_interrupt_disable>:
{
   13e30:	b580      	push	{r7, lr}
   13e32:	b082      	sub	sp, #8
   13e34:	af00      	add	r7, sp, #0
   13e36:	0002      	movs	r2, r0
   13e38:	1dfb      	adds	r3, r7, #7
   13e3a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13e3c:	4a07      	ldr	r2, [pc, #28]	; (13e5c <system_interrupt_disable+0x2c>)
   13e3e:	1dfb      	adds	r3, r7, #7
   13e40:	781b      	ldrb	r3, [r3, #0]
   13e42:	0019      	movs	r1, r3
   13e44:	231f      	movs	r3, #31
   13e46:	400b      	ands	r3, r1
   13e48:	2101      	movs	r1, #1
   13e4a:	4099      	lsls	r1, r3
   13e4c:	000b      	movs	r3, r1
   13e4e:	0019      	movs	r1, r3
   13e50:	2380      	movs	r3, #128	; 0x80
   13e52:	50d1      	str	r1, [r2, r3]
}
   13e54:	46c0      	nop			; (mov r8, r8)
   13e56:	46bd      	mov	sp, r7
   13e58:	b002      	add	sp, #8
   13e5a:	bd80      	pop	{r7, pc}
   13e5c:	e000e100 	.word	0xe000e100

00013e60 <spi_is_syncing>:
{
   13e60:	b580      	push	{r7, lr}
   13e62:	b084      	sub	sp, #16
   13e64:	af00      	add	r7, sp, #0
   13e66:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13e68:	687b      	ldr	r3, [r7, #4]
   13e6a:	681b      	ldr	r3, [r3, #0]
   13e6c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   13e6e:	68fb      	ldr	r3, [r7, #12]
   13e70:	69db      	ldr	r3, [r3, #28]
   13e72:	1e5a      	subs	r2, r3, #1
   13e74:	4193      	sbcs	r3, r2
   13e76:	b2db      	uxtb	r3, r3
}
   13e78:	0018      	movs	r0, r3
   13e7a:	46bd      	mov	sp, r7
   13e7c:	b004      	add	sp, #16
   13e7e:	bd80      	pop	{r7, pc}

00013e80 <spi_enable>:
{
   13e80:	b580      	push	{r7, lr}
   13e82:	b084      	sub	sp, #16
   13e84:	af00      	add	r7, sp, #0
   13e86:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13e88:	687b      	ldr	r3, [r7, #4]
   13e8a:	681b      	ldr	r3, [r3, #0]
   13e8c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   13e8e:	687b      	ldr	r3, [r7, #4]
   13e90:	681b      	ldr	r3, [r3, #0]
   13e92:	0018      	movs	r0, r3
   13e94:	4b0b      	ldr	r3, [pc, #44]	; (13ec4 <spi_enable+0x44>)
   13e96:	4798      	blx	r3
   13e98:	0003      	movs	r3, r0
   13e9a:	0018      	movs	r0, r3
   13e9c:	4b0a      	ldr	r3, [pc, #40]	; (13ec8 <spi_enable+0x48>)
   13e9e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   13ea0:	46c0      	nop			; (mov r8, r8)
   13ea2:	687b      	ldr	r3, [r7, #4]
   13ea4:	0018      	movs	r0, r3
   13ea6:	4b09      	ldr	r3, [pc, #36]	; (13ecc <spi_enable+0x4c>)
   13ea8:	4798      	blx	r3
   13eaa:	1e03      	subs	r3, r0, #0
   13eac:	d1f9      	bne.n	13ea2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   13eae:	68fb      	ldr	r3, [r7, #12]
   13eb0:	681b      	ldr	r3, [r3, #0]
   13eb2:	2202      	movs	r2, #2
   13eb4:	431a      	orrs	r2, r3
   13eb6:	68fb      	ldr	r3, [r7, #12]
   13eb8:	601a      	str	r2, [r3, #0]
}
   13eba:	46c0      	nop			; (mov r8, r8)
   13ebc:	46bd      	mov	sp, r7
   13ebe:	b004      	add	sp, #16
   13ec0:	bd80      	pop	{r7, pc}
   13ec2:	46c0      	nop			; (mov r8, r8)
   13ec4:	00013b9d 	.word	0x00013b9d
   13ec8:	00013e05 	.word	0x00013e05
   13ecc:	00013e61 	.word	0x00013e61

00013ed0 <spi_disable>:
{
   13ed0:	b580      	push	{r7, lr}
   13ed2:	b084      	sub	sp, #16
   13ed4:	af00      	add	r7, sp, #0
   13ed6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13ed8:	687b      	ldr	r3, [r7, #4]
   13eda:	681b      	ldr	r3, [r3, #0]
   13edc:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   13ede:	687b      	ldr	r3, [r7, #4]
   13ee0:	681b      	ldr	r3, [r3, #0]
   13ee2:	0018      	movs	r0, r3
   13ee4:	4b0e      	ldr	r3, [pc, #56]	; (13f20 <spi_disable+0x50>)
   13ee6:	4798      	blx	r3
   13ee8:	0003      	movs	r3, r0
   13eea:	0018      	movs	r0, r3
   13eec:	4b0d      	ldr	r3, [pc, #52]	; (13f24 <spi_disable+0x54>)
   13eee:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   13ef0:	46c0      	nop			; (mov r8, r8)
   13ef2:	687b      	ldr	r3, [r7, #4]
   13ef4:	0018      	movs	r0, r3
   13ef6:	4b0c      	ldr	r3, [pc, #48]	; (13f28 <spi_disable+0x58>)
   13ef8:	4798      	blx	r3
   13efa:	1e03      	subs	r3, r0, #0
   13efc:	d1f9      	bne.n	13ef2 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   13efe:	68fb      	ldr	r3, [r7, #12]
   13f00:	228f      	movs	r2, #143	; 0x8f
   13f02:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   13f04:	68fb      	ldr	r3, [r7, #12]
   13f06:	228f      	movs	r2, #143	; 0x8f
   13f08:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   13f0a:	68fb      	ldr	r3, [r7, #12]
   13f0c:	681b      	ldr	r3, [r3, #0]
   13f0e:	2202      	movs	r2, #2
   13f10:	4393      	bics	r3, r2
   13f12:	001a      	movs	r2, r3
   13f14:	68fb      	ldr	r3, [r7, #12]
   13f16:	601a      	str	r2, [r3, #0]
}
   13f18:	46c0      	nop			; (mov r8, r8)
   13f1a:	46bd      	mov	sp, r7
   13f1c:	b004      	add	sp, #16
   13f1e:	bd80      	pop	{r7, pc}
   13f20:	00013b9d 	.word	0x00013b9d
   13f24:	00013e31 	.word	0x00013e31
   13f28:	00013e61 	.word	0x00013e61

00013f2c <spi_is_write_complete>:
{
   13f2c:	b580      	push	{r7, lr}
   13f2e:	b084      	sub	sp, #16
   13f30:	af00      	add	r7, sp, #0
   13f32:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13f34:	687b      	ldr	r3, [r7, #4]
   13f36:	681b      	ldr	r3, [r3, #0]
   13f38:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   13f3a:	68fb      	ldr	r3, [r7, #12]
   13f3c:	7e1b      	ldrb	r3, [r3, #24]
   13f3e:	b2db      	uxtb	r3, r3
   13f40:	001a      	movs	r2, r3
   13f42:	2302      	movs	r3, #2
   13f44:	4013      	ands	r3, r2
   13f46:	1e5a      	subs	r2, r3, #1
   13f48:	4193      	sbcs	r3, r2
   13f4a:	b2db      	uxtb	r3, r3
}
   13f4c:	0018      	movs	r0, r3
   13f4e:	46bd      	mov	sp, r7
   13f50:	b004      	add	sp, #16
   13f52:	bd80      	pop	{r7, pc}

00013f54 <spi_is_ready_to_write>:
{
   13f54:	b580      	push	{r7, lr}
   13f56:	b084      	sub	sp, #16
   13f58:	af00      	add	r7, sp, #0
   13f5a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13f5c:	687b      	ldr	r3, [r7, #4]
   13f5e:	681b      	ldr	r3, [r3, #0]
   13f60:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   13f62:	68fb      	ldr	r3, [r7, #12]
   13f64:	7e1b      	ldrb	r3, [r3, #24]
   13f66:	b2db      	uxtb	r3, r3
   13f68:	001a      	movs	r2, r3
   13f6a:	2301      	movs	r3, #1
   13f6c:	4013      	ands	r3, r2
   13f6e:	1e5a      	subs	r2, r3, #1
   13f70:	4193      	sbcs	r3, r2
   13f72:	b2db      	uxtb	r3, r3
}
   13f74:	0018      	movs	r0, r3
   13f76:	46bd      	mov	sp, r7
   13f78:	b004      	add	sp, #16
   13f7a:	bd80      	pop	{r7, pc}

00013f7c <spi_is_ready_to_read>:
{
   13f7c:	b580      	push	{r7, lr}
   13f7e:	b084      	sub	sp, #16
   13f80:	af00      	add	r7, sp, #0
   13f82:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13f84:	687b      	ldr	r3, [r7, #4]
   13f86:	681b      	ldr	r3, [r3, #0]
   13f88:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   13f8a:	68fb      	ldr	r3, [r7, #12]
   13f8c:	7e1b      	ldrb	r3, [r3, #24]
   13f8e:	b2db      	uxtb	r3, r3
   13f90:	001a      	movs	r2, r3
   13f92:	2304      	movs	r3, #4
   13f94:	4013      	ands	r3, r2
   13f96:	1e5a      	subs	r2, r3, #1
   13f98:	4193      	sbcs	r3, r2
   13f9a:	b2db      	uxtb	r3, r3
}
   13f9c:	0018      	movs	r0, r3
   13f9e:	46bd      	mov	sp, r7
   13fa0:	b004      	add	sp, #16
   13fa2:	bd80      	pop	{r7, pc}

00013fa4 <spi_write>:
{
   13fa4:	b580      	push	{r7, lr}
   13fa6:	b084      	sub	sp, #16
   13fa8:	af00      	add	r7, sp, #0
   13faa:	6078      	str	r0, [r7, #4]
   13fac:	000a      	movs	r2, r1
   13fae:	1cbb      	adds	r3, r7, #2
   13fb0:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13fb2:	687b      	ldr	r3, [r7, #4]
   13fb4:	681b      	ldr	r3, [r3, #0]
   13fb6:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   13fb8:	687b      	ldr	r3, [r7, #4]
   13fba:	0018      	movs	r0, r3
   13fbc:	4b0a      	ldr	r3, [pc, #40]	; (13fe8 <spi_write+0x44>)
   13fbe:	4798      	blx	r3
   13fc0:	0003      	movs	r3, r0
   13fc2:	001a      	movs	r2, r3
   13fc4:	2301      	movs	r3, #1
   13fc6:	4053      	eors	r3, r2
   13fc8:	b2db      	uxtb	r3, r3
   13fca:	2b00      	cmp	r3, #0
   13fcc:	d001      	beq.n	13fd2 <spi_write+0x2e>
		return STATUS_BUSY;
   13fce:	2305      	movs	r3, #5
   13fd0:	e006      	b.n	13fe0 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   13fd2:	1cbb      	adds	r3, r7, #2
   13fd4:	881b      	ldrh	r3, [r3, #0]
   13fd6:	05db      	lsls	r3, r3, #23
   13fd8:	0dda      	lsrs	r2, r3, #23
   13fda:	68fb      	ldr	r3, [r7, #12]
   13fdc:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   13fde:	2300      	movs	r3, #0
}
   13fe0:	0018      	movs	r0, r3
   13fe2:	46bd      	mov	sp, r7
   13fe4:	b004      	add	sp, #16
   13fe6:	bd80      	pop	{r7, pc}
   13fe8:	00013f55 	.word	0x00013f55

00013fec <spi_read>:
{
   13fec:	b580      	push	{r7, lr}
   13fee:	b084      	sub	sp, #16
   13ff0:	af00      	add	r7, sp, #0
   13ff2:	6078      	str	r0, [r7, #4]
   13ff4:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13ff6:	687b      	ldr	r3, [r7, #4]
   13ff8:	681b      	ldr	r3, [r3, #0]
   13ffa:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   13ffc:	687b      	ldr	r3, [r7, #4]
   13ffe:	0018      	movs	r0, r3
   14000:	4b1b      	ldr	r3, [pc, #108]	; (14070 <spi_read+0x84>)
   14002:	4798      	blx	r3
   14004:	0003      	movs	r3, r0
   14006:	001a      	movs	r2, r3
   14008:	2301      	movs	r3, #1
   1400a:	4053      	eors	r3, r2
   1400c:	b2db      	uxtb	r3, r3
   1400e:	2b00      	cmp	r3, #0
   14010:	d001      	beq.n	14016 <spi_read+0x2a>
		return STATUS_ERR_IO;
   14012:	2310      	movs	r3, #16
   14014:	e027      	b.n	14066 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   14016:	230f      	movs	r3, #15
   14018:	18fb      	adds	r3, r7, r3
   1401a:	2200      	movs	r2, #0
   1401c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1401e:	68bb      	ldr	r3, [r7, #8]
   14020:	8b5b      	ldrh	r3, [r3, #26]
   14022:	b29b      	uxth	r3, r3
   14024:	001a      	movs	r2, r3
   14026:	2304      	movs	r3, #4
   14028:	4013      	ands	r3, r2
   1402a:	d006      	beq.n	1403a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   1402c:	230f      	movs	r3, #15
   1402e:	18fb      	adds	r3, r7, r3
   14030:	221e      	movs	r2, #30
   14032:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   14034:	68bb      	ldr	r3, [r7, #8]
   14036:	2204      	movs	r2, #4
   14038:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1403a:	687b      	ldr	r3, [r7, #4]
   1403c:	799b      	ldrb	r3, [r3, #6]
   1403e:	2b01      	cmp	r3, #1
   14040:	d108      	bne.n	14054 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   14042:	68bb      	ldr	r3, [r7, #8]
   14044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14046:	b29b      	uxth	r3, r3
   14048:	05db      	lsls	r3, r3, #23
   1404a:	0ddb      	lsrs	r3, r3, #23
   1404c:	b29a      	uxth	r2, r3
   1404e:	683b      	ldr	r3, [r7, #0]
   14050:	801a      	strh	r2, [r3, #0]
   14052:	e005      	b.n	14060 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   14054:	68bb      	ldr	r3, [r7, #8]
   14056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14058:	b2db      	uxtb	r3, r3
   1405a:	b29a      	uxth	r2, r3
   1405c:	683b      	ldr	r3, [r7, #0]
   1405e:	801a      	strh	r2, [r3, #0]
	return retval;
   14060:	230f      	movs	r3, #15
   14062:	18fb      	adds	r3, r7, r3
   14064:	781b      	ldrb	r3, [r3, #0]
}
   14066:	0018      	movs	r0, r3
   14068:	46bd      	mov	sp, r7
   1406a:	b004      	add	sp, #16
   1406c:	bd80      	pop	{r7, pc}
   1406e:	46c0      	nop			; (mov r8, r8)
   14070:	00013f7d 	.word	0x00013f7d

00014074 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   14074:	b590      	push	{r4, r7, lr}
   14076:	b089      	sub	sp, #36	; 0x24
   14078:	af00      	add	r7, sp, #0
   1407a:	6078      	str	r0, [r7, #4]
   1407c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   1407e:	230c      	movs	r3, #12
   14080:	18fb      	adds	r3, r7, r3
   14082:	2200      	movs	r2, #0
   14084:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   14086:	687b      	ldr	r3, [r7, #4]
   14088:	681b      	ldr	r3, [r3, #0]
   1408a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   1408c:	687b      	ldr	r3, [r7, #4]
   1408e:	0018      	movs	r0, r3
   14090:	4b24      	ldr	r3, [pc, #144]	; (14124 <spi_set_baudrate+0xb0>)
   14092:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   14094:	46c0      	nop			; (mov r8, r8)
   14096:	687b      	ldr	r3, [r7, #4]
   14098:	0018      	movs	r0, r3
   1409a:	4b23      	ldr	r3, [pc, #140]	; (14128 <spi_set_baudrate+0xb4>)
   1409c:	4798      	blx	r3
   1409e:	1e03      	subs	r3, r0, #0
   140a0:	d1f9      	bne.n	14096 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   140a2:	687b      	ldr	r3, [r7, #4]
   140a4:	681b      	ldr	r3, [r3, #0]
   140a6:	0018      	movs	r0, r3
   140a8:	4b20      	ldr	r3, [pc, #128]	; (1412c <spi_set_baudrate+0xb8>)
   140aa:	4798      	blx	r3
   140ac:	0003      	movs	r3, r0
   140ae:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   140b0:	69bb      	ldr	r3, [r7, #24]
   140b2:	3314      	adds	r3, #20
   140b4:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   140b6:	697b      	ldr	r3, [r7, #20]
   140b8:	b2db      	uxtb	r3, r3
   140ba:	0018      	movs	r0, r3
   140bc:	4b1c      	ldr	r3, [pc, #112]	; (14130 <spi_set_baudrate+0xbc>)
   140be:	4798      	blx	r3
   140c0:	0003      	movs	r3, r0
   140c2:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   140c4:	230f      	movs	r3, #15
   140c6:	18fc      	adds	r4, r7, r3
   140c8:	230c      	movs	r3, #12
   140ca:	18fa      	adds	r2, r7, r3
   140cc:	6939      	ldr	r1, [r7, #16]
   140ce:	683b      	ldr	r3, [r7, #0]
   140d0:	0018      	movs	r0, r3
   140d2:	4b18      	ldr	r3, [pc, #96]	; (14134 <spi_set_baudrate+0xc0>)
   140d4:	4798      	blx	r3
   140d6:	0003      	movs	r3, r0
   140d8:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   140da:	230f      	movs	r3, #15
   140dc:	18fb      	adds	r3, r7, r3
   140de:	781b      	ldrb	r3, [r3, #0]
   140e0:	2b00      	cmp	r3, #0
   140e2:	d001      	beq.n	140e8 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   140e4:	2317      	movs	r3, #23
   140e6:	e018      	b.n	1411a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   140e8:	230c      	movs	r3, #12
   140ea:	18fb      	adds	r3, r7, r3
   140ec:	881b      	ldrh	r3, [r3, #0]
   140ee:	b2da      	uxtb	r2, r3
   140f0:	69fb      	ldr	r3, [r7, #28]
   140f2:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   140f4:	46c0      	nop			; (mov r8, r8)
   140f6:	687b      	ldr	r3, [r7, #4]
   140f8:	0018      	movs	r0, r3
   140fa:	4b0b      	ldr	r3, [pc, #44]	; (14128 <spi_set_baudrate+0xb4>)
   140fc:	4798      	blx	r3
   140fe:	1e03      	subs	r3, r0, #0
   14100:	d1f9      	bne.n	140f6 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   14102:	687b      	ldr	r3, [r7, #4]
   14104:	0018      	movs	r0, r3
   14106:	4b0c      	ldr	r3, [pc, #48]	; (14138 <spi_set_baudrate+0xc4>)
   14108:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   1410a:	46c0      	nop			; (mov r8, r8)
   1410c:	687b      	ldr	r3, [r7, #4]
   1410e:	0018      	movs	r0, r3
   14110:	4b05      	ldr	r3, [pc, #20]	; (14128 <spi_set_baudrate+0xb4>)
   14112:	4798      	blx	r3
   14114:	1e03      	subs	r3, r0, #0
   14116:	d1f9      	bne.n	1410c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   14118:	2300      	movs	r3, #0
}
   1411a:	0018      	movs	r0, r3
   1411c:	46bd      	mov	sp, r7
   1411e:	b009      	add	sp, #36	; 0x24
   14120:	bd90      	pop	{r4, r7, pc}
   14122:	46c0      	nop			; (mov r8, r8)
   14124:	00013ed1 	.word	0x00013ed1
   14128:	00013e61 	.word	0x00013e61
   1412c:	00013acd 	.word	0x00013acd
   14130:	00016481 	.word	0x00016481
   14134:	00013647 	.word	0x00013647
   14138:	00013e81 	.word	0x00013e81

0001413c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   1413c:	b590      	push	{r4, r7, lr}
   1413e:	b093      	sub	sp, #76	; 0x4c
   14140:	af00      	add	r7, sp, #0
   14142:	6078      	str	r0, [r7, #4]
   14144:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   14146:	687b      	ldr	r3, [r7, #4]
   14148:	681b      	ldr	r3, [r3, #0]
   1414a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   1414c:	687b      	ldr	r3, [r7, #4]
   1414e:	681b      	ldr	r3, [r3, #0]
   14150:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   14152:	231c      	movs	r3, #28
   14154:	18fb      	adds	r3, r7, r3
   14156:	0018      	movs	r0, r3
   14158:	4b75      	ldr	r3, [pc, #468]	; (14330 <_spi_set_config+0x1f4>)
   1415a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1415c:	231c      	movs	r3, #28
   1415e:	18fb      	adds	r3, r7, r3
   14160:	2200      	movs	r2, #0
   14162:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   14164:	683b      	ldr	r3, [r7, #0]
   14166:	781b      	ldrb	r3, [r3, #0]
   14168:	2b00      	cmp	r3, #0
   1416a:	d103      	bne.n	14174 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1416c:	231c      	movs	r3, #28
   1416e:	18fb      	adds	r3, r7, r3
   14170:	2200      	movs	r2, #0
   14172:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   14174:	683b      	ldr	r3, [r7, #0]
   14176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   14178:	230c      	movs	r3, #12
   1417a:	18fb      	adds	r3, r7, r3
   1417c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   1417e:	683b      	ldr	r3, [r7, #0]
   14180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   14182:	230c      	movs	r3, #12
   14184:	18fb      	adds	r3, r7, r3
   14186:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   14188:	683b      	ldr	r3, [r7, #0]
   1418a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   1418c:	230c      	movs	r3, #12
   1418e:	18fb      	adds	r3, r7, r3
   14190:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   14192:	683b      	ldr	r3, [r7, #0]
   14194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   14196:	230c      	movs	r3, #12
   14198:	18fb      	adds	r3, r7, r3
   1419a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   1419c:	2347      	movs	r3, #71	; 0x47
   1419e:	18fb      	adds	r3, r7, r3
   141a0:	2200      	movs	r2, #0
   141a2:	701a      	strb	r2, [r3, #0]
   141a4:	e02c      	b.n	14200 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   141a6:	2347      	movs	r3, #71	; 0x47
   141a8:	18fb      	adds	r3, r7, r3
   141aa:	781a      	ldrb	r2, [r3, #0]
   141ac:	230c      	movs	r3, #12
   141ae:	18fb      	adds	r3, r7, r3
   141b0:	0092      	lsls	r2, r2, #2
   141b2:	58d3      	ldr	r3, [r2, r3]
   141b4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   141b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   141b8:	2b00      	cmp	r3, #0
   141ba:	d109      	bne.n	141d0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   141bc:	2347      	movs	r3, #71	; 0x47
   141be:	18fb      	adds	r3, r7, r3
   141c0:	781a      	ldrb	r2, [r3, #0]
   141c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   141c4:	0011      	movs	r1, r2
   141c6:	0018      	movs	r0, r3
   141c8:	4b5a      	ldr	r3, [pc, #360]	; (14334 <_spi_set_config+0x1f8>)
   141ca:	4798      	blx	r3
   141cc:	0003      	movs	r3, r0
   141ce:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   141d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   141d2:	3301      	adds	r3, #1
   141d4:	d00d      	beq.n	141f2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   141d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   141d8:	b2da      	uxtb	r2, r3
   141da:	231c      	movs	r3, #28
   141dc:	18fb      	adds	r3, r7, r3
   141de:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   141e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   141e2:	0c1b      	lsrs	r3, r3, #16
   141e4:	b2db      	uxtb	r3, r3
   141e6:	221c      	movs	r2, #28
   141e8:	18ba      	adds	r2, r7, r2
   141ea:	0011      	movs	r1, r2
   141ec:	0018      	movs	r0, r3
   141ee:	4b52      	ldr	r3, [pc, #328]	; (14338 <_spi_set_config+0x1fc>)
   141f0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   141f2:	2347      	movs	r3, #71	; 0x47
   141f4:	18fb      	adds	r3, r7, r3
   141f6:	781a      	ldrb	r2, [r3, #0]
   141f8:	2347      	movs	r3, #71	; 0x47
   141fa:	18fb      	adds	r3, r7, r3
   141fc:	3201      	adds	r2, #1
   141fe:	701a      	strb	r2, [r3, #0]
   14200:	2347      	movs	r3, #71	; 0x47
   14202:	18fb      	adds	r3, r7, r3
   14204:	781b      	ldrb	r3, [r3, #0]
   14206:	2b03      	cmp	r3, #3
   14208:	d9cd      	bls.n	141a6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   1420a:	683b      	ldr	r3, [r7, #0]
   1420c:	781a      	ldrb	r2, [r3, #0]
   1420e:	687b      	ldr	r3, [r7, #4]
   14210:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   14212:	683b      	ldr	r3, [r7, #0]
   14214:	7c1a      	ldrb	r2, [r3, #16]
   14216:	687b      	ldr	r3, [r7, #4]
   14218:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   1421a:	683b      	ldr	r3, [r7, #0]
   1421c:	7c9a      	ldrb	r2, [r3, #18]
   1421e:	687b      	ldr	r3, [r7, #4]
   14220:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   14222:	683b      	ldr	r3, [r7, #0]
   14224:	7d1a      	ldrb	r2, [r3, #20]
   14226:	687b      	ldr	r3, [r7, #4]
   14228:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   1422a:	230a      	movs	r3, #10
   1422c:	18fb      	adds	r3, r7, r3
   1422e:	2200      	movs	r2, #0
   14230:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   14232:	2300      	movs	r3, #0
   14234:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   14236:	2300      	movs	r3, #0
   14238:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   1423a:	683b      	ldr	r3, [r7, #0]
   1423c:	781b      	ldrb	r3, [r3, #0]
   1423e:	2b01      	cmp	r3, #1
   14240:	d129      	bne.n	14296 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14242:	687b      	ldr	r3, [r7, #4]
   14244:	681b      	ldr	r3, [r3, #0]
   14246:	0018      	movs	r0, r3
   14248:	4b3c      	ldr	r3, [pc, #240]	; (1433c <_spi_set_config+0x200>)
   1424a:	4798      	blx	r3
   1424c:	0003      	movs	r3, r0
   1424e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14252:	3314      	adds	r3, #20
   14254:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   14256:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14258:	b2db      	uxtb	r3, r3
   1425a:	0018      	movs	r0, r3
   1425c:	4b38      	ldr	r3, [pc, #224]	; (14340 <_spi_set_config+0x204>)
   1425e:	4798      	blx	r3
   14260:	0003      	movs	r3, r0
   14262:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   14264:	683b      	ldr	r3, [r7, #0]
   14266:	699b      	ldr	r3, [r3, #24]
   14268:	2223      	movs	r2, #35	; 0x23
   1426a:	18bc      	adds	r4, r7, r2
   1426c:	220a      	movs	r2, #10
   1426e:	18ba      	adds	r2, r7, r2
   14270:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14272:	0018      	movs	r0, r3
   14274:	4b33      	ldr	r3, [pc, #204]	; (14344 <_spi_set_config+0x208>)
   14276:	4798      	blx	r3
   14278:	0003      	movs	r3, r0
   1427a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   1427c:	2323      	movs	r3, #35	; 0x23
   1427e:	18fb      	adds	r3, r7, r3
   14280:	781b      	ldrb	r3, [r3, #0]
   14282:	2b00      	cmp	r3, #0
   14284:	d001      	beq.n	1428a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   14286:	2317      	movs	r3, #23
   14288:	e04e      	b.n	14328 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   1428a:	230a      	movs	r3, #10
   1428c:	18fb      	adds	r3, r7, r3
   1428e:	881b      	ldrh	r3, [r3, #0]
   14290:	b2da      	uxtb	r2, r3
   14292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14294:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   14296:	683b      	ldr	r3, [r7, #0]
   14298:	685b      	ldr	r3, [r3, #4]
   1429a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1429c:	4313      	orrs	r3, r2
   1429e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   142a0:	683b      	ldr	r3, [r7, #0]
   142a2:	689b      	ldr	r3, [r3, #8]
   142a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   142a6:	4313      	orrs	r3, r2
   142a8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   142aa:	683b      	ldr	r3, [r7, #0]
   142ac:	68db      	ldr	r3, [r3, #12]
   142ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   142b0:	4313      	orrs	r3, r2
   142b2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   142b4:	683b      	ldr	r3, [r7, #0]
   142b6:	7c1b      	ldrb	r3, [r3, #16]
   142b8:	001a      	movs	r2, r3
   142ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   142bc:	4313      	orrs	r3, r2
   142be:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   142c0:	683b      	ldr	r3, [r7, #0]
   142c2:	7c5b      	ldrb	r3, [r3, #17]
   142c4:	2b00      	cmp	r3, #0
   142c6:	d103      	bne.n	142d0 <_spi_set_config+0x194>
   142c8:	4b1f      	ldr	r3, [pc, #124]	; (14348 <_spi_set_config+0x20c>)
   142ca:	4798      	blx	r3
   142cc:	1e03      	subs	r3, r0, #0
   142ce:	d003      	beq.n	142d8 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   142d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   142d2:	2280      	movs	r2, #128	; 0x80
   142d4:	4313      	orrs	r3, r2
   142d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   142d8:	683b      	ldr	r3, [r7, #0]
   142da:	7c9b      	ldrb	r3, [r3, #18]
   142dc:	2b00      	cmp	r3, #0
   142de:	d004      	beq.n	142ea <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   142e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   142e2:	2280      	movs	r2, #128	; 0x80
   142e4:	0292      	lsls	r2, r2, #10
   142e6:	4313      	orrs	r3, r2
   142e8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   142ea:	683b      	ldr	r3, [r7, #0]
   142ec:	7cdb      	ldrb	r3, [r3, #19]
   142ee:	2b00      	cmp	r3, #0
   142f0:	d004      	beq.n	142fc <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   142f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   142f4:	2280      	movs	r2, #128	; 0x80
   142f6:	0092      	lsls	r2, r2, #2
   142f8:	4313      	orrs	r3, r2
   142fa:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   142fc:	683b      	ldr	r3, [r7, #0]
   142fe:	7d1b      	ldrb	r3, [r3, #20]
   14300:	2b00      	cmp	r3, #0
   14302:	d004      	beq.n	1430e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   14304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14306:	2280      	movs	r2, #128	; 0x80
   14308:	0192      	lsls	r2, r2, #6
   1430a:	4313      	orrs	r3, r2
   1430c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   1430e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14310:	681a      	ldr	r2, [r3, #0]
   14312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14314:	431a      	orrs	r2, r3
   14316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14318:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   1431a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1431c:	685a      	ldr	r2, [r3, #4]
   1431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14320:	431a      	orrs	r2, r3
   14322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14324:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   14326:	2300      	movs	r3, #0
}
   14328:	0018      	movs	r0, r3
   1432a:	46bd      	mov	sp, r7
   1432c:	b013      	add	sp, #76	; 0x4c
   1432e:	bd90      	pop	{r4, r7, pc}
   14330:	00013c71 	.word	0x00013c71
   14334:	00013911 	.word	0x00013911
   14338:	000166bd 	.word	0x000166bd
   1433c:	00013acd 	.word	0x00013acd
   14340:	00016481 	.word	0x00016481
   14344:	00013647 	.word	0x00013647
   14348:	00013de5 	.word	0x00013de5

0001434c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   1434c:	b590      	push	{r4, r7, lr}
   1434e:	b08b      	sub	sp, #44	; 0x2c
   14350:	af00      	add	r7, sp, #0
   14352:	60f8      	str	r0, [r7, #12]
   14354:	60b9      	str	r1, [r7, #8]
   14356:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   14358:	68fb      	ldr	r3, [r7, #12]
   1435a:	68ba      	ldr	r2, [r7, #8]
   1435c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   1435e:	68fb      	ldr	r3, [r7, #12]
   14360:	681b      	ldr	r3, [r3, #0]
   14362:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   14364:	6a3b      	ldr	r3, [r7, #32]
   14366:	681b      	ldr	r3, [r3, #0]
   14368:	2202      	movs	r2, #2
   1436a:	4013      	ands	r3, r2
   1436c:	d001      	beq.n	14372 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   1436e:	231c      	movs	r3, #28
   14370:	e09c      	b.n	144ac <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   14372:	6a3b      	ldr	r3, [r7, #32]
   14374:	681b      	ldr	r3, [r3, #0]
   14376:	2201      	movs	r2, #1
   14378:	4013      	ands	r3, r2
   1437a:	d001      	beq.n	14380 <spi_init+0x34>
		return STATUS_BUSY;
   1437c:	2305      	movs	r3, #5
   1437e:	e095      	b.n	144ac <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14380:	68fb      	ldr	r3, [r7, #12]
   14382:	681b      	ldr	r3, [r3, #0]
   14384:	0018      	movs	r0, r3
   14386:	4b4b      	ldr	r3, [pc, #300]	; (144b4 <spi_init+0x168>)
   14388:	4798      	blx	r3
   1438a:	0003      	movs	r3, r0
   1438c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1438e:	69fb      	ldr	r3, [r7, #28]
   14390:	3302      	adds	r3, #2
   14392:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14394:	69fb      	ldr	r3, [r7, #28]
   14396:	3314      	adds	r3, #20
   14398:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1439a:	2201      	movs	r2, #1
   1439c:	69bb      	ldr	r3, [r7, #24]
   1439e:	409a      	lsls	r2, r3
   143a0:	0013      	movs	r3, r2
   143a2:	0019      	movs	r1, r3
   143a4:	2002      	movs	r0, #2
   143a6:	4b44      	ldr	r3, [pc, #272]	; (144b8 <spi_init+0x16c>)
   143a8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   143aa:	2310      	movs	r3, #16
   143ac:	18fb      	adds	r3, r7, r3
   143ae:	0018      	movs	r0, r3
   143b0:	4b42      	ldr	r3, [pc, #264]	; (144bc <spi_init+0x170>)
   143b2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   143b4:	687b      	ldr	r3, [r7, #4]
   143b6:	2224      	movs	r2, #36	; 0x24
   143b8:	5c9a      	ldrb	r2, [r3, r2]
   143ba:	2310      	movs	r3, #16
   143bc:	18fb      	adds	r3, r7, r3
   143be:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   143c0:	697b      	ldr	r3, [r7, #20]
   143c2:	b2db      	uxtb	r3, r3
   143c4:	2210      	movs	r2, #16
   143c6:	18ba      	adds	r2, r7, r2
   143c8:	0011      	movs	r1, r2
   143ca:	0018      	movs	r0, r3
   143cc:	4b3c      	ldr	r3, [pc, #240]	; (144c0 <spi_init+0x174>)
   143ce:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   143d0:	697b      	ldr	r3, [r7, #20]
   143d2:	b2db      	uxtb	r3, r3
   143d4:	0018      	movs	r0, r3
   143d6:	4b3b      	ldr	r3, [pc, #236]	; (144c4 <spi_init+0x178>)
   143d8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   143da:	687b      	ldr	r3, [r7, #4]
   143dc:	2224      	movs	r2, #36	; 0x24
   143de:	5c9b      	ldrb	r3, [r3, r2]
   143e0:	2100      	movs	r1, #0
   143e2:	0018      	movs	r0, r3
   143e4:	4b38      	ldr	r3, [pc, #224]	; (144c8 <spi_init+0x17c>)
   143e6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   143e8:	687b      	ldr	r3, [r7, #4]
   143ea:	781b      	ldrb	r3, [r3, #0]
   143ec:	2b01      	cmp	r3, #1
   143ee:	d105      	bne.n	143fc <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   143f0:	6a3b      	ldr	r3, [r7, #32]
   143f2:	681b      	ldr	r3, [r3, #0]
   143f4:	220c      	movs	r2, #12
   143f6:	431a      	orrs	r2, r3
   143f8:	6a3b      	ldr	r3, [r7, #32]
   143fa:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   143fc:	2327      	movs	r3, #39	; 0x27
   143fe:	18fb      	adds	r3, r7, r3
   14400:	2200      	movs	r2, #0
   14402:	701a      	strb	r2, [r3, #0]
   14404:	e010      	b.n	14428 <spi_init+0xdc>
		module->callback[i]        = NULL;
   14406:	2327      	movs	r3, #39	; 0x27
   14408:	18fb      	adds	r3, r7, r3
   1440a:	781b      	ldrb	r3, [r3, #0]
   1440c:	68fa      	ldr	r2, [r7, #12]
   1440e:	3302      	adds	r3, #2
   14410:	009b      	lsls	r3, r3, #2
   14412:	18d3      	adds	r3, r2, r3
   14414:	3304      	adds	r3, #4
   14416:	2200      	movs	r2, #0
   14418:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   1441a:	2327      	movs	r3, #39	; 0x27
   1441c:	18fb      	adds	r3, r7, r3
   1441e:	781a      	ldrb	r2, [r3, #0]
   14420:	2327      	movs	r3, #39	; 0x27
   14422:	18fb      	adds	r3, r7, r3
   14424:	3201      	adds	r2, #1
   14426:	701a      	strb	r2, [r3, #0]
   14428:	2327      	movs	r3, #39	; 0x27
   1442a:	18fb      	adds	r3, r7, r3
   1442c:	781b      	ldrb	r3, [r3, #0]
   1442e:	2b06      	cmp	r3, #6
   14430:	d9e9      	bls.n	14406 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   14432:	68fb      	ldr	r3, [r7, #12]
   14434:	2200      	movs	r2, #0
   14436:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   14438:	68fb      	ldr	r3, [r7, #12]
   1443a:	2200      	movs	r2, #0
   1443c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   1443e:	68fb      	ldr	r3, [r7, #12]
   14440:	2200      	movs	r2, #0
   14442:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   14444:	68fb      	ldr	r3, [r7, #12]
   14446:	2200      	movs	r2, #0
   14448:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   1444a:	68fb      	ldr	r3, [r7, #12]
   1444c:	2236      	movs	r2, #54	; 0x36
   1444e:	2100      	movs	r1, #0
   14450:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   14452:	68fb      	ldr	r3, [r7, #12]
   14454:	2237      	movs	r2, #55	; 0x37
   14456:	2100      	movs	r1, #0
   14458:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   1445a:	68fb      	ldr	r3, [r7, #12]
   1445c:	2238      	movs	r2, #56	; 0x38
   1445e:	2100      	movs	r1, #0
   14460:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   14462:	68fb      	ldr	r3, [r7, #12]
   14464:	2203      	movs	r2, #3
   14466:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   14468:	68fb      	ldr	r3, [r7, #12]
   1446a:	2200      	movs	r2, #0
   1446c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   1446e:	68fb      	ldr	r3, [r7, #12]
   14470:	681b      	ldr	r3, [r3, #0]
   14472:	2213      	movs	r2, #19
   14474:	18bc      	adds	r4, r7, r2
   14476:	0018      	movs	r0, r3
   14478:	4b0e      	ldr	r3, [pc, #56]	; (144b4 <spi_init+0x168>)
   1447a:	4798      	blx	r3
   1447c:	0003      	movs	r3, r0
   1447e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   14480:	4a12      	ldr	r2, [pc, #72]	; (144cc <spi_init+0x180>)
   14482:	2313      	movs	r3, #19
   14484:	18fb      	adds	r3, r7, r3
   14486:	781b      	ldrb	r3, [r3, #0]
   14488:	0011      	movs	r1, r2
   1448a:	0018      	movs	r0, r3
   1448c:	4b10      	ldr	r3, [pc, #64]	; (144d0 <spi_init+0x184>)
   1448e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   14490:	2313      	movs	r3, #19
   14492:	18fb      	adds	r3, r7, r3
   14494:	781a      	ldrb	r2, [r3, #0]
   14496:	4b0f      	ldr	r3, [pc, #60]	; (144d4 <spi_init+0x188>)
   14498:	0092      	lsls	r2, r2, #2
   1449a:	68f9      	ldr	r1, [r7, #12]
   1449c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   1449e:	687a      	ldr	r2, [r7, #4]
   144a0:	68fb      	ldr	r3, [r7, #12]
   144a2:	0011      	movs	r1, r2
   144a4:	0018      	movs	r0, r3
   144a6:	4b0c      	ldr	r3, [pc, #48]	; (144d8 <spi_init+0x18c>)
   144a8:	4798      	blx	r3
   144aa:	0003      	movs	r3, r0
}
   144ac:	0018      	movs	r0, r3
   144ae:	46bd      	mov	sp, r7
   144b0:	b00b      	add	sp, #44	; 0x2c
   144b2:	bd90      	pop	{r4, r7, pc}
   144b4:	00013acd 	.word	0x00013acd
   144b8:	00013d89 	.word	0x00013d89
   144bc:	00013d71 	.word	0x00013d71
   144c0:	0001635d 	.word	0x0001635d
   144c4:	000163a1 	.word	0x000163a1
   144c8:	00013885 	.word	0x00013885
   144cc:	000149a5 	.word	0x000149a5
   144d0:	00013b31 	.word	0x00013b31
   144d4:	20005a0c 	.word	0x20005a0c
   144d8:	0001413d 	.word	0x0001413d

000144dc <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   144dc:	b590      	push	{r4, r7, lr}
   144de:	b087      	sub	sp, #28
   144e0:	af00      	add	r7, sp, #0
   144e2:	60f8      	str	r0, [r7, #12]
   144e4:	60b9      	str	r1, [r7, #8]
   144e6:	0019      	movs	r1, r3
   144e8:	1dbb      	adds	r3, r7, #6
   144ea:	801a      	strh	r2, [r3, #0]
   144ec:	1d3b      	adds	r3, r7, #4
   144ee:	1c0a      	adds	r2, r1, #0
   144f0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   144f2:	68fb      	ldr	r3, [r7, #12]
   144f4:	2238      	movs	r2, #56	; 0x38
   144f6:	5c9b      	ldrb	r3, [r3, r2]
   144f8:	b2db      	uxtb	r3, r3
   144fa:	2b05      	cmp	r3, #5
   144fc:	d101      	bne.n	14502 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   144fe:	2305      	movs	r3, #5
   14500:	e07a      	b.n	145f8 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   14502:	1dbb      	adds	r3, r7, #6
   14504:	881b      	ldrh	r3, [r3, #0]
   14506:	2b00      	cmp	r3, #0
   14508:	d101      	bne.n	1450e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   1450a:	2317      	movs	r3, #23
   1450c:	e074      	b.n	145f8 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   1450e:	68fb      	ldr	r3, [r7, #12]
   14510:	79db      	ldrb	r3, [r3, #7]
   14512:	2201      	movs	r2, #1
   14514:	4053      	eors	r3, r2
   14516:	b2db      	uxtb	r3, r3
   14518:	2b00      	cmp	r3, #0
   1451a:	d001      	beq.n	14520 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   1451c:	231c      	movs	r3, #28
   1451e:	e06b      	b.n	145f8 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   14520:	2316      	movs	r3, #22
   14522:	18fb      	adds	r3, r7, r3
   14524:	2200      	movs	r2, #0
   14526:	801a      	strh	r2, [r3, #0]

	while (length--) {
   14528:	e05e      	b.n	145e8 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   1452a:	68fb      	ldr	r3, [r7, #12]
   1452c:	795b      	ldrb	r3, [r3, #5]
   1452e:	2b01      	cmp	r3, #1
   14530:	d112      	bne.n	14558 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   14532:	46c0      	nop			; (mov r8, r8)
   14534:	68fb      	ldr	r3, [r7, #12]
   14536:	0018      	movs	r0, r3
   14538:	4b31      	ldr	r3, [pc, #196]	; (14600 <spi_read_buffer_wait+0x124>)
   1453a:	4798      	blx	r3
   1453c:	0003      	movs	r3, r0
   1453e:	001a      	movs	r2, r3
   14540:	2301      	movs	r3, #1
   14542:	4053      	eors	r3, r2
   14544:	b2db      	uxtb	r3, r3
   14546:	2b00      	cmp	r3, #0
   14548:	d1f4      	bne.n	14534 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   1454a:	1d3b      	adds	r3, r7, #4
   1454c:	881a      	ldrh	r2, [r3, #0]
   1454e:	68fb      	ldr	r3, [r7, #12]
   14550:	0011      	movs	r1, r2
   14552:	0018      	movs	r0, r3
   14554:	4b2b      	ldr	r3, [pc, #172]	; (14604 <spi_read_buffer_wait+0x128>)
   14556:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   14558:	46c0      	nop			; (mov r8, r8)
   1455a:	68fb      	ldr	r3, [r7, #12]
   1455c:	0018      	movs	r0, r3
   1455e:	4b2a      	ldr	r3, [pc, #168]	; (14608 <spi_read_buffer_wait+0x12c>)
   14560:	4798      	blx	r3
   14562:	0003      	movs	r3, r0
   14564:	001a      	movs	r2, r3
   14566:	2301      	movs	r3, #1
   14568:	4053      	eors	r3, r2
   1456a:	b2db      	uxtb	r3, r3
   1456c:	2b00      	cmp	r3, #0
   1456e:	d1f4      	bne.n	1455a <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   14570:	2312      	movs	r3, #18
   14572:	18fb      	adds	r3, r7, r3
   14574:	2200      	movs	r2, #0
   14576:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   14578:	2315      	movs	r3, #21
   1457a:	18fc      	adds	r4, r7, r3
   1457c:	2312      	movs	r3, #18
   1457e:	18fa      	adds	r2, r7, r3
   14580:	68fb      	ldr	r3, [r7, #12]
   14582:	0011      	movs	r1, r2
   14584:	0018      	movs	r0, r3
   14586:	4b21      	ldr	r3, [pc, #132]	; (1460c <spi_read_buffer_wait+0x130>)
   14588:	4798      	blx	r3
   1458a:	0003      	movs	r3, r0
   1458c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   1458e:	2315      	movs	r3, #21
   14590:	18fb      	adds	r3, r7, r3
   14592:	781b      	ldrb	r3, [r3, #0]
   14594:	2b00      	cmp	r3, #0
   14596:	d003      	beq.n	145a0 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   14598:	2315      	movs	r3, #21
   1459a:	18fb      	adds	r3, r7, r3
   1459c:	781b      	ldrb	r3, [r3, #0]
   1459e:	e02b      	b.n	145f8 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   145a0:	2316      	movs	r3, #22
   145a2:	18fb      	adds	r3, r7, r3
   145a4:	881b      	ldrh	r3, [r3, #0]
   145a6:	2216      	movs	r2, #22
   145a8:	18ba      	adds	r2, r7, r2
   145aa:	1c59      	adds	r1, r3, #1
   145ac:	8011      	strh	r1, [r2, #0]
   145ae:	001a      	movs	r2, r3
   145b0:	68bb      	ldr	r3, [r7, #8]
   145b2:	189b      	adds	r3, r3, r2
   145b4:	2212      	movs	r2, #18
   145b6:	18ba      	adds	r2, r7, r2
   145b8:	8812      	ldrh	r2, [r2, #0]
   145ba:	b2d2      	uxtb	r2, r2
   145bc:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   145be:	68fb      	ldr	r3, [r7, #12]
   145c0:	799b      	ldrb	r3, [r3, #6]
   145c2:	2b01      	cmp	r3, #1
   145c4:	d110      	bne.n	145e8 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   145c6:	2316      	movs	r3, #22
   145c8:	18fb      	adds	r3, r7, r3
   145ca:	881b      	ldrh	r3, [r3, #0]
   145cc:	2216      	movs	r2, #22
   145ce:	18ba      	adds	r2, r7, r2
   145d0:	1c59      	adds	r1, r3, #1
   145d2:	8011      	strh	r1, [r2, #0]
   145d4:	001a      	movs	r2, r3
   145d6:	68bb      	ldr	r3, [r7, #8]
   145d8:	189b      	adds	r3, r3, r2
   145da:	2212      	movs	r2, #18
   145dc:	18ba      	adds	r2, r7, r2
   145de:	8812      	ldrh	r2, [r2, #0]
   145e0:	0a12      	lsrs	r2, r2, #8
   145e2:	b292      	uxth	r2, r2
   145e4:	b2d2      	uxtb	r2, r2
   145e6:	701a      	strb	r2, [r3, #0]
	while (length--) {
   145e8:	1dbb      	adds	r3, r7, #6
   145ea:	881b      	ldrh	r3, [r3, #0]
   145ec:	1dba      	adds	r2, r7, #6
   145ee:	1e59      	subs	r1, r3, #1
   145f0:	8011      	strh	r1, [r2, #0]
   145f2:	2b00      	cmp	r3, #0
   145f4:	d199      	bne.n	1452a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   145f6:	2300      	movs	r3, #0
}
   145f8:	0018      	movs	r0, r3
   145fa:	46bd      	mov	sp, r7
   145fc:	b007      	add	sp, #28
   145fe:	bd90      	pop	{r4, r7, pc}
   14600:	00013f55 	.word	0x00013f55
   14604:	00013fa5 	.word	0x00013fa5
   14608:	00013f7d 	.word	0x00013f7d
   1460c:	00013fed 	.word	0x00013fed

00014610 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   14610:	b580      	push	{r7, lr}
   14612:	b086      	sub	sp, #24
   14614:	af00      	add	r7, sp, #0
   14616:	60f8      	str	r0, [r7, #12]
   14618:	60b9      	str	r1, [r7, #8]
   1461a:	1dfb      	adds	r3, r7, #7
   1461c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   1461e:	68fb      	ldr	r3, [r7, #12]
   14620:	795b      	ldrb	r3, [r3, #5]
   14622:	2b01      	cmp	r3, #1
   14624:	d001      	beq.n	1462a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   14626:	2315      	movs	r3, #21
   14628:	e05c      	b.n	146e4 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   1462a:	68fb      	ldr	r3, [r7, #12]
   1462c:	7a1b      	ldrb	r3, [r3, #8]
   1462e:	2201      	movs	r2, #1
   14630:	4053      	eors	r3, r2
   14632:	b2db      	uxtb	r3, r3
   14634:	2b00      	cmp	r3, #0
   14636:	d054      	beq.n	146e2 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   14638:	1dfb      	adds	r3, r7, #7
   1463a:	781b      	ldrb	r3, [r3, #0]
   1463c:	2b00      	cmp	r3, #0
   1463e:	d04a      	beq.n	146d6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   14640:	68bb      	ldr	r3, [r7, #8]
   14642:	785b      	ldrb	r3, [r3, #1]
   14644:	2b00      	cmp	r3, #0
   14646:	d03f      	beq.n	146c8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   14648:	68fb      	ldr	r3, [r7, #12]
   1464a:	0018      	movs	r0, r3
   1464c:	4b27      	ldr	r3, [pc, #156]	; (146ec <spi_select_slave+0xdc>)
   1464e:	4798      	blx	r3
   14650:	0003      	movs	r3, r0
   14652:	001a      	movs	r2, r3
   14654:	2301      	movs	r3, #1
   14656:	4053      	eors	r3, r2
   14658:	b2db      	uxtb	r3, r3
   1465a:	2b00      	cmp	r3, #0
   1465c:	d007      	beq.n	1466e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   1465e:	68bb      	ldr	r3, [r7, #8]
   14660:	781b      	ldrb	r3, [r3, #0]
   14662:	2101      	movs	r1, #1
   14664:	0018      	movs	r0, r3
   14666:	4b22      	ldr	r3, [pc, #136]	; (146f0 <spi_select_slave+0xe0>)
   14668:	4798      	blx	r3
					return STATUS_BUSY;
   1466a:	2305      	movs	r3, #5
   1466c:	e03a      	b.n	146e4 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   1466e:	68bb      	ldr	r3, [r7, #8]
   14670:	781b      	ldrb	r3, [r3, #0]
   14672:	2100      	movs	r1, #0
   14674:	0018      	movs	r0, r3
   14676:	4b1e      	ldr	r3, [pc, #120]	; (146f0 <spi_select_slave+0xe0>)
   14678:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   1467a:	68bb      	ldr	r3, [r7, #8]
   1467c:	789b      	ldrb	r3, [r3, #2]
   1467e:	b29a      	uxth	r2, r3
   14680:	68fb      	ldr	r3, [r7, #12]
   14682:	0011      	movs	r1, r2
   14684:	0018      	movs	r0, r3
   14686:	4b1b      	ldr	r3, [pc, #108]	; (146f4 <spi_select_slave+0xe4>)
   14688:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   1468a:	68fb      	ldr	r3, [r7, #12]
   1468c:	79db      	ldrb	r3, [r3, #7]
   1468e:	2201      	movs	r2, #1
   14690:	4053      	eors	r3, r2
   14692:	b2db      	uxtb	r3, r3
   14694:	2b00      	cmp	r3, #0
   14696:	d024      	beq.n	146e2 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   14698:	46c0      	nop			; (mov r8, r8)
   1469a:	68fb      	ldr	r3, [r7, #12]
   1469c:	0018      	movs	r0, r3
   1469e:	4b16      	ldr	r3, [pc, #88]	; (146f8 <spi_select_slave+0xe8>)
   146a0:	4798      	blx	r3
   146a2:	0003      	movs	r3, r0
   146a4:	001a      	movs	r2, r3
   146a6:	2301      	movs	r3, #1
   146a8:	4053      	eors	r3, r2
   146aa:	b2db      	uxtb	r3, r3
   146ac:	2b00      	cmp	r3, #0
   146ae:	d1f4      	bne.n	1469a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   146b0:	2316      	movs	r3, #22
   146b2:	18fb      	adds	r3, r7, r3
   146b4:	2200      	movs	r2, #0
   146b6:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   146b8:	2316      	movs	r3, #22
   146ba:	18fa      	adds	r2, r7, r3
   146bc:	68fb      	ldr	r3, [r7, #12]
   146be:	0011      	movs	r1, r2
   146c0:	0018      	movs	r0, r3
   146c2:	4b0e      	ldr	r3, [pc, #56]	; (146fc <spi_select_slave+0xec>)
   146c4:	4798      	blx	r3
   146c6:	e00c      	b.n	146e2 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   146c8:	68bb      	ldr	r3, [r7, #8]
   146ca:	781b      	ldrb	r3, [r3, #0]
   146cc:	2100      	movs	r1, #0
   146ce:	0018      	movs	r0, r3
   146d0:	4b07      	ldr	r3, [pc, #28]	; (146f0 <spi_select_slave+0xe0>)
   146d2:	4798      	blx	r3
   146d4:	e005      	b.n	146e2 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   146d6:	68bb      	ldr	r3, [r7, #8]
   146d8:	781b      	ldrb	r3, [r3, #0]
   146da:	2101      	movs	r1, #1
   146dc:	0018      	movs	r0, r3
   146de:	4b04      	ldr	r3, [pc, #16]	; (146f0 <spi_select_slave+0xe0>)
   146e0:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   146e2:	2300      	movs	r3, #0
}
   146e4:	0018      	movs	r0, r3
   146e6:	46bd      	mov	sp, r7
   146e8:	b006      	add	sp, #24
   146ea:	bd80      	pop	{r7, pc}
   146ec:	00013f55 	.word	0x00013f55
   146f0:	00013d1d 	.word	0x00013d1d
   146f4:	00013fa5 	.word	0x00013fa5
   146f8:	00013f7d 	.word	0x00013f7d
   146fc:	00013fed 	.word	0x00013fed

00014700 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   14700:	b580      	push	{r7, lr}
   14702:	b086      	sub	sp, #24
   14704:	af00      	add	r7, sp, #0
   14706:	60f8      	str	r0, [r7, #12]
   14708:	60b9      	str	r1, [r7, #8]
   1470a:	1dbb      	adds	r3, r7, #6
   1470c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1470e:	68fb      	ldr	r3, [r7, #12]
   14710:	2238      	movs	r2, #56	; 0x38
   14712:	5c9b      	ldrb	r3, [r3, r2]
   14714:	b2db      	uxtb	r3, r3
   14716:	2b05      	cmp	r3, #5
   14718:	d101      	bne.n	1471e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1471a:	2305      	movs	r3, #5
   1471c:	e087      	b.n	1482e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   1471e:	1dbb      	adds	r3, r7, #6
   14720:	881b      	ldrh	r3, [r3, #0]
   14722:	2b00      	cmp	r3, #0
   14724:	d101      	bne.n	1472a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   14726:	2317      	movs	r3, #23
   14728:	e081      	b.n	1482e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   1472a:	2316      	movs	r3, #22
   1472c:	18fb      	adds	r3, r7, r3
   1472e:	2200      	movs	r2, #0
   14730:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   14732:	2314      	movs	r3, #20
   14734:	18fb      	adds	r3, r7, r3
   14736:	1dba      	adds	r2, r7, #6
   14738:	8812      	ldrh	r2, [r2, #0]
   1473a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   1473c:	e05f      	b.n	147fe <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   1473e:	46c0      	nop			; (mov r8, r8)
   14740:	68fb      	ldr	r3, [r7, #12]
   14742:	0018      	movs	r0, r3
   14744:	4b3c      	ldr	r3, [pc, #240]	; (14838 <spi_write_buffer_wait+0x138>)
   14746:	4798      	blx	r3
   14748:	0003      	movs	r3, r0
   1474a:	001a      	movs	r2, r3
   1474c:	2301      	movs	r3, #1
   1474e:	4053      	eors	r3, r2
   14750:	b2db      	uxtb	r3, r3
   14752:	2b00      	cmp	r3, #0
   14754:	d1f4      	bne.n	14740 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   14756:	2316      	movs	r3, #22
   14758:	18fb      	adds	r3, r7, r3
   1475a:	881b      	ldrh	r3, [r3, #0]
   1475c:	2216      	movs	r2, #22
   1475e:	18ba      	adds	r2, r7, r2
   14760:	1c59      	adds	r1, r3, #1
   14762:	8011      	strh	r1, [r2, #0]
   14764:	001a      	movs	r2, r3
   14766:	68bb      	ldr	r3, [r7, #8]
   14768:	189b      	adds	r3, r3, r2
   1476a:	781a      	ldrb	r2, [r3, #0]
   1476c:	2312      	movs	r3, #18
   1476e:	18fb      	adds	r3, r7, r3
   14770:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14772:	68fb      	ldr	r3, [r7, #12]
   14774:	799b      	ldrb	r3, [r3, #6]
   14776:	2b01      	cmp	r3, #1
   14778:	d115      	bne.n	147a6 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   1477a:	2316      	movs	r3, #22
   1477c:	18fb      	adds	r3, r7, r3
   1477e:	881b      	ldrh	r3, [r3, #0]
   14780:	2216      	movs	r2, #22
   14782:	18ba      	adds	r2, r7, r2
   14784:	1c59      	adds	r1, r3, #1
   14786:	8011      	strh	r1, [r2, #0]
   14788:	001a      	movs	r2, r3
   1478a:	68bb      	ldr	r3, [r7, #8]
   1478c:	189b      	adds	r3, r3, r2
   1478e:	781b      	ldrb	r3, [r3, #0]
   14790:	021b      	lsls	r3, r3, #8
   14792:	b21a      	sxth	r2, r3
   14794:	2312      	movs	r3, #18
   14796:	18fb      	adds	r3, r7, r3
   14798:	2100      	movs	r1, #0
   1479a:	5e5b      	ldrsh	r3, [r3, r1]
   1479c:	4313      	orrs	r3, r2
   1479e:	b21a      	sxth	r2, r3
   147a0:	2312      	movs	r3, #18
   147a2:	18fb      	adds	r3, r7, r3
   147a4:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   147a6:	2312      	movs	r3, #18
   147a8:	18fb      	adds	r3, r7, r3
   147aa:	881a      	ldrh	r2, [r3, #0]
   147ac:	68fb      	ldr	r3, [r7, #12]
   147ae:	0011      	movs	r1, r2
   147b0:	0018      	movs	r0, r3
   147b2:	4b22      	ldr	r3, [pc, #136]	; (1483c <spi_write_buffer_wait+0x13c>)
   147b4:	4798      	blx	r3

		if (module->receiver_enabled) {
   147b6:	68fb      	ldr	r3, [r7, #12]
   147b8:	79db      	ldrb	r3, [r3, #7]
   147ba:	2214      	movs	r2, #20
   147bc:	18ba      	adds	r2, r7, r2
   147be:	2114      	movs	r1, #20
   147c0:	1879      	adds	r1, r7, r1
   147c2:	8809      	ldrh	r1, [r1, #0]
   147c4:	8011      	strh	r1, [r2, #0]
   147c6:	2b00      	cmp	r3, #0
   147c8:	d019      	beq.n	147fe <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   147ca:	46c0      	nop			; (mov r8, r8)
   147cc:	68fb      	ldr	r3, [r7, #12]
   147ce:	0018      	movs	r0, r3
   147d0:	4b1b      	ldr	r3, [pc, #108]	; (14840 <spi_write_buffer_wait+0x140>)
   147d2:	4798      	blx	r3
   147d4:	0003      	movs	r3, r0
   147d6:	001a      	movs	r2, r3
   147d8:	2301      	movs	r3, #1
   147da:	4053      	eors	r3, r2
   147dc:	b2db      	uxtb	r3, r3
   147de:	2b00      	cmp	r3, #0
   147e0:	d1f4      	bne.n	147cc <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   147e2:	2310      	movs	r3, #16
   147e4:	18fa      	adds	r2, r7, r3
   147e6:	68fb      	ldr	r3, [r7, #12]
   147e8:	0011      	movs	r1, r2
   147ea:	0018      	movs	r0, r3
   147ec:	4b15      	ldr	r3, [pc, #84]	; (14844 <spi_write_buffer_wait+0x144>)
   147ee:	4798      	blx	r3
			flush_length--;
   147f0:	2314      	movs	r3, #20
   147f2:	18fb      	adds	r3, r7, r3
   147f4:	881a      	ldrh	r2, [r3, #0]
   147f6:	2314      	movs	r3, #20
   147f8:	18fb      	adds	r3, r7, r3
   147fa:	3a01      	subs	r2, #1
   147fc:	801a      	strh	r2, [r3, #0]
	while (length--) {
   147fe:	1dbb      	adds	r3, r7, #6
   14800:	881b      	ldrh	r3, [r3, #0]
   14802:	1dba      	adds	r2, r7, #6
   14804:	1e59      	subs	r1, r3, #1
   14806:	8011      	strh	r1, [r2, #0]
   14808:	2b00      	cmp	r3, #0
   1480a:	d198      	bne.n	1473e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   1480c:	68fb      	ldr	r3, [r7, #12]
   1480e:	795b      	ldrb	r3, [r3, #5]
   14810:	2b01      	cmp	r3, #1
   14812:	d10b      	bne.n	1482c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   14814:	46c0      	nop			; (mov r8, r8)
   14816:	68fb      	ldr	r3, [r7, #12]
   14818:	0018      	movs	r0, r3
   1481a:	4b0b      	ldr	r3, [pc, #44]	; (14848 <spi_write_buffer_wait+0x148>)
   1481c:	4798      	blx	r3
   1481e:	0003      	movs	r3, r0
   14820:	001a      	movs	r2, r3
   14822:	2301      	movs	r3, #1
   14824:	4053      	eors	r3, r2
   14826:	b2db      	uxtb	r3, r3
   14828:	2b00      	cmp	r3, #0
   1482a:	d1f4      	bne.n	14816 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   1482c:	2300      	movs	r3, #0
}
   1482e:	0018      	movs	r0, r3
   14830:	46bd      	mov	sp, r7
   14832:	b006      	add	sp, #24
   14834:	bd80      	pop	{r7, pc}
   14836:	46c0      	nop			; (mov r8, r8)
   14838:	00013f55 	.word	0x00013f55
   1483c:	00013fa5 	.word	0x00013fa5
   14840:	00013f7d 	.word	0x00013f7d
   14844:	00013fed 	.word	0x00013fed
   14848:	00013f2d 	.word	0x00013f2d

0001484c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   1484c:	b580      	push	{r7, lr}
   1484e:	b084      	sub	sp, #16
   14850:	af00      	add	r7, sp, #0
   14852:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   14854:	687b      	ldr	r3, [r7, #4]
   14856:	681b      	ldr	r3, [r3, #0]
   14858:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1485a:	687b      	ldr	r3, [r7, #4]
   1485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1485e:	781b      	ldrb	r3, [r3, #0]
   14860:	b2da      	uxtb	r2, r3
   14862:	230e      	movs	r3, #14
   14864:	18fb      	adds	r3, r7, r3
   14866:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   14868:	687b      	ldr	r3, [r7, #4]
   1486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1486c:	1c5a      	adds	r2, r3, #1
   1486e:	687b      	ldr	r3, [r7, #4]
   14870:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14872:	687b      	ldr	r3, [r7, #4]
   14874:	799b      	ldrb	r3, [r3, #6]
   14876:	2b01      	cmp	r3, #1
   14878:	d113      	bne.n	148a2 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   1487a:	687b      	ldr	r3, [r7, #4]
   1487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1487e:	781b      	ldrb	r3, [r3, #0]
   14880:	b2db      	uxtb	r3, r3
   14882:	021b      	lsls	r3, r3, #8
   14884:	b21a      	sxth	r2, r3
   14886:	230e      	movs	r3, #14
   14888:	18fb      	adds	r3, r7, r3
   1488a:	2100      	movs	r1, #0
   1488c:	5e5b      	ldrsh	r3, [r3, r1]
   1488e:	4313      	orrs	r3, r2
   14890:	b21a      	sxth	r2, r3
   14892:	230e      	movs	r3, #14
   14894:	18fb      	adds	r3, r7, r3
   14896:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   14898:	687b      	ldr	r3, [r7, #4]
   1489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1489c:	1c5a      	adds	r2, r3, #1
   1489e:	687b      	ldr	r3, [r7, #4]
   148a0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   148a2:	230e      	movs	r3, #14
   148a4:	18fb      	adds	r3, r7, r3
   148a6:	881b      	ldrh	r3, [r3, #0]
   148a8:	05db      	lsls	r3, r3, #23
   148aa:	0dda      	lsrs	r2, r3, #23
   148ac:	68bb      	ldr	r3, [r7, #8]
   148ae:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   148b0:	687b      	ldr	r3, [r7, #4]
   148b2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   148b4:	b29b      	uxth	r3, r3
   148b6:	3b01      	subs	r3, #1
   148b8:	b29a      	uxth	r2, r3
   148ba:	687b      	ldr	r3, [r7, #4]
   148bc:	869a      	strh	r2, [r3, #52]	; 0x34
}
   148be:	46c0      	nop			; (mov r8, r8)
   148c0:	46bd      	mov	sp, r7
   148c2:	b004      	add	sp, #16
   148c4:	bd80      	pop	{r7, pc}
	...

000148c8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   148c8:	b580      	push	{r7, lr}
   148ca:	b084      	sub	sp, #16
   148cc:	af00      	add	r7, sp, #0
   148ce:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   148d0:	687b      	ldr	r3, [r7, #4]
   148d2:	681b      	ldr	r3, [r3, #0]
   148d4:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   148d6:	4b08      	ldr	r3, [pc, #32]	; (148f8 <_spi_write_dummy+0x30>)
   148d8:	881b      	ldrh	r3, [r3, #0]
   148da:	001a      	movs	r2, r3
   148dc:	68fb      	ldr	r3, [r7, #12]
   148de:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   148e0:	687b      	ldr	r3, [r7, #4]
   148e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   148e4:	b29b      	uxth	r3, r3
   148e6:	3b01      	subs	r3, #1
   148e8:	b29a      	uxth	r2, r3
   148ea:	687b      	ldr	r3, [r7, #4]
   148ec:	865a      	strh	r2, [r3, #50]	; 0x32
}
   148ee:	46c0      	nop			; (mov r8, r8)
   148f0:	46bd      	mov	sp, r7
   148f2:	b004      	add	sp, #16
   148f4:	bd80      	pop	{r7, pc}
   148f6:	46c0      	nop			; (mov r8, r8)
   148f8:	20005a24 	.word	0x20005a24

000148fc <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   148fc:	b580      	push	{r7, lr}
   148fe:	b084      	sub	sp, #16
   14900:	af00      	add	r7, sp, #0
   14902:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   14904:	687b      	ldr	r3, [r7, #4]
   14906:	681b      	ldr	r3, [r3, #0]
   14908:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   1490a:	230a      	movs	r3, #10
   1490c:	18fb      	adds	r3, r7, r3
   1490e:	2200      	movs	r2, #0
   14910:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   14912:	68fb      	ldr	r3, [r7, #12]
   14914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14916:	230a      	movs	r3, #10
   14918:	18fb      	adds	r3, r7, r3
   1491a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   1491c:	687b      	ldr	r3, [r7, #4]
   1491e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   14920:	b29b      	uxth	r3, r3
   14922:	3b01      	subs	r3, #1
   14924:	b29a      	uxth	r2, r3
   14926:	687b      	ldr	r3, [r7, #4]
   14928:	865a      	strh	r2, [r3, #50]	; 0x32
}
   1492a:	46c0      	nop			; (mov r8, r8)
   1492c:	46bd      	mov	sp, r7
   1492e:	b004      	add	sp, #16
   14930:	bd80      	pop	{r7, pc}

00014932 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   14932:	b580      	push	{r7, lr}
   14934:	b084      	sub	sp, #16
   14936:	af00      	add	r7, sp, #0
   14938:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1493a:	687b      	ldr	r3, [r7, #4]
   1493c:	681b      	ldr	r3, [r3, #0]
   1493e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   14940:	68fb      	ldr	r3, [r7, #12]
   14942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14944:	b29a      	uxth	r2, r3
   14946:	230a      	movs	r3, #10
   14948:	18fb      	adds	r3, r7, r3
   1494a:	05d2      	lsls	r2, r2, #23
   1494c:	0dd2      	lsrs	r2, r2, #23
   1494e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   14950:	687b      	ldr	r3, [r7, #4]
   14952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14954:	220a      	movs	r2, #10
   14956:	18ba      	adds	r2, r7, r2
   14958:	8812      	ldrh	r2, [r2, #0]
   1495a:	b2d2      	uxtb	r2, r2
   1495c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   1495e:	687b      	ldr	r3, [r7, #4]
   14960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14962:	1c5a      	adds	r2, r3, #1
   14964:	687b      	ldr	r3, [r7, #4]
   14966:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14968:	687b      	ldr	r3, [r7, #4]
   1496a:	799b      	ldrb	r3, [r3, #6]
   1496c:	2b01      	cmp	r3, #1
   1496e:	d10d      	bne.n	1498c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   14970:	687b      	ldr	r3, [r7, #4]
   14972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14974:	220a      	movs	r2, #10
   14976:	18ba      	adds	r2, r7, r2
   14978:	8812      	ldrh	r2, [r2, #0]
   1497a:	0a12      	lsrs	r2, r2, #8
   1497c:	b292      	uxth	r2, r2
   1497e:	b2d2      	uxtb	r2, r2
   14980:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   14982:	687b      	ldr	r3, [r7, #4]
   14984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14986:	1c5a      	adds	r2, r3, #1
   14988:	687b      	ldr	r3, [r7, #4]
   1498a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   1498c:	687b      	ldr	r3, [r7, #4]
   1498e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   14990:	b29b      	uxth	r3, r3
   14992:	3b01      	subs	r3, #1
   14994:	b29a      	uxth	r2, r3
   14996:	687b      	ldr	r3, [r7, #4]
   14998:	861a      	strh	r2, [r3, #48]	; 0x30
}
   1499a:	46c0      	nop			; (mov r8, r8)
   1499c:	46bd      	mov	sp, r7
   1499e:	b004      	add	sp, #16
   149a0:	bd80      	pop	{r7, pc}
	...

000149a4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   149a4:	b580      	push	{r7, lr}
   149a6:	b086      	sub	sp, #24
   149a8:	af00      	add	r7, sp, #0
   149aa:	0002      	movs	r2, r0
   149ac:	1dfb      	adds	r3, r7, #7
   149ae:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   149b0:	1dfb      	adds	r3, r7, #7
   149b2:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   149b4:	4b96      	ldr	r3, [pc, #600]	; (14c10 <_spi_interrupt_handler+0x26c>)
   149b6:	0092      	lsls	r2, r2, #2
   149b8:	58d3      	ldr	r3, [r2, r3]
   149ba:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   149bc:	697b      	ldr	r3, [r7, #20]
   149be:	681b      	ldr	r3, [r3, #0]
   149c0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   149c2:	697b      	ldr	r3, [r7, #20]
   149c4:	2237      	movs	r2, #55	; 0x37
   149c6:	5c9a      	ldrb	r2, [r3, r2]
   149c8:	697b      	ldr	r3, [r7, #20]
   149ca:	2136      	movs	r1, #54	; 0x36
   149cc:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   149ce:	230f      	movs	r3, #15
   149d0:	18fb      	adds	r3, r7, r3
   149d2:	400a      	ands	r2, r1
   149d4:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   149d6:	693b      	ldr	r3, [r7, #16]
   149d8:	7e1b      	ldrb	r3, [r3, #24]
   149da:	b2da      	uxtb	r2, r3
   149dc:	230c      	movs	r3, #12
   149de:	18fb      	adds	r3, r7, r3
   149e0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   149e2:	693b      	ldr	r3, [r7, #16]
   149e4:	7d9b      	ldrb	r3, [r3, #22]
   149e6:	b2db      	uxtb	r3, r3
   149e8:	b29a      	uxth	r2, r3
   149ea:	230c      	movs	r3, #12
   149ec:	18fb      	adds	r3, r7, r3
   149ee:	210c      	movs	r1, #12
   149f0:	1879      	adds	r1, r7, r1
   149f2:	8809      	ldrh	r1, [r1, #0]
   149f4:	400a      	ands	r2, r1
   149f6:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   149f8:	230c      	movs	r3, #12
   149fa:	18fb      	adds	r3, r7, r3
   149fc:	881b      	ldrh	r3, [r3, #0]
   149fe:	2201      	movs	r2, #1
   14a00:	4013      	ands	r3, r2
   14a02:	d038      	beq.n	14a76 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   14a04:	697b      	ldr	r3, [r7, #20]
   14a06:	795b      	ldrb	r3, [r3, #5]
   14a08:	2b01      	cmp	r3, #1
   14a0a:	d110      	bne.n	14a2e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   14a0c:	697b      	ldr	r3, [r7, #20]
   14a0e:	7a5b      	ldrb	r3, [r3, #9]
   14a10:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   14a12:	2b00      	cmp	r3, #0
   14a14:	d10b      	bne.n	14a2e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   14a16:	697b      	ldr	r3, [r7, #20]
   14a18:	0018      	movs	r0, r3
   14a1a:	4b7e      	ldr	r3, [pc, #504]	; (14c14 <_spi_interrupt_handler+0x270>)
   14a1c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   14a1e:	697b      	ldr	r3, [r7, #20]
   14a20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   14a22:	b29b      	uxth	r3, r3
   14a24:	2b00      	cmp	r3, #0
   14a26:	d102      	bne.n	14a2e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   14a28:	693b      	ldr	r3, [r7, #16]
   14a2a:	2201      	movs	r2, #1
   14a2c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   14a2e:	697b      	ldr	r3, [r7, #20]
   14a30:	795b      	ldrb	r3, [r3, #5]
		if (0
   14a32:	2b01      	cmp	r3, #1
   14a34:	d11f      	bne.n	14a76 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   14a36:	697b      	ldr	r3, [r7, #20]
   14a38:	7a5b      	ldrb	r3, [r3, #9]
   14a3a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   14a3c:	2b00      	cmp	r3, #0
   14a3e:	d01a      	beq.n	14a76 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   14a40:	697b      	ldr	r3, [r7, #20]
   14a42:	0018      	movs	r0, r3
   14a44:	4b74      	ldr	r3, [pc, #464]	; (14c18 <_spi_interrupt_handler+0x274>)
   14a46:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   14a48:	697b      	ldr	r3, [r7, #20]
   14a4a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   14a4c:	b29b      	uxth	r3, r3
   14a4e:	2b00      	cmp	r3, #0
   14a50:	d111      	bne.n	14a76 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   14a52:	693b      	ldr	r3, [r7, #16]
   14a54:	2201      	movs	r2, #1
   14a56:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   14a58:	697b      	ldr	r3, [r7, #20]
   14a5a:	7a5b      	ldrb	r3, [r3, #9]
   14a5c:	b2db      	uxtb	r3, r3
   14a5e:	2b01      	cmp	r3, #1
   14a60:	d109      	bne.n	14a76 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   14a62:	697b      	ldr	r3, [r7, #20]
   14a64:	79db      	ldrb	r3, [r3, #7]
   14a66:	2201      	movs	r2, #1
   14a68:	4053      	eors	r3, r2
   14a6a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   14a6c:	2b00      	cmp	r3, #0
   14a6e:	d002      	beq.n	14a76 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   14a70:	693b      	ldr	r3, [r7, #16]
   14a72:	2202      	movs	r2, #2
   14a74:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   14a76:	230c      	movs	r3, #12
   14a78:	18fb      	adds	r3, r7, r3
   14a7a:	881b      	ldrh	r3, [r3, #0]
   14a7c:	2204      	movs	r2, #4
   14a7e:	4013      	ands	r3, r2
   14a80:	d100      	bne.n	14a84 <_spi_interrupt_handler+0xe0>
   14a82:	e07e      	b.n	14b82 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   14a84:	693b      	ldr	r3, [r7, #16]
   14a86:	8b5b      	ldrh	r3, [r3, #26]
   14a88:	b29b      	uxth	r3, r3
   14a8a:	001a      	movs	r2, r3
   14a8c:	2304      	movs	r3, #4
   14a8e:	4013      	ands	r3, r2
   14a90:	d022      	beq.n	14ad8 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   14a92:	697b      	ldr	r3, [r7, #20]
   14a94:	7a5b      	ldrb	r3, [r3, #9]
   14a96:	b2db      	uxtb	r3, r3
   14a98:	2b01      	cmp	r3, #1
   14a9a:	d014      	beq.n	14ac6 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   14a9c:	697b      	ldr	r3, [r7, #20]
   14a9e:	2238      	movs	r2, #56	; 0x38
   14aa0:	211e      	movs	r1, #30
   14aa2:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   14aa4:	697b      	ldr	r3, [r7, #20]
   14aa6:	2203      	movs	r2, #3
   14aa8:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   14aaa:	693b      	ldr	r3, [r7, #16]
   14aac:	2205      	movs	r2, #5
   14aae:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   14ab0:	230f      	movs	r3, #15
   14ab2:	18fb      	adds	r3, r7, r3
   14ab4:	781b      	ldrb	r3, [r3, #0]
   14ab6:	2208      	movs	r2, #8
   14ab8:	4013      	ands	r3, r2
   14aba:	d004      	beq.n	14ac6 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   14abc:	697b      	ldr	r3, [r7, #20]
   14abe:	699b      	ldr	r3, [r3, #24]
   14ac0:	697a      	ldr	r2, [r7, #20]
   14ac2:	0010      	movs	r0, r2
   14ac4:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   14ac6:	693b      	ldr	r3, [r7, #16]
   14ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14aca:	230a      	movs	r3, #10
   14acc:	18fb      	adds	r3, r7, r3
   14ace:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   14ad0:	693b      	ldr	r3, [r7, #16]
   14ad2:	2204      	movs	r2, #4
   14ad4:	835a      	strh	r2, [r3, #26]
   14ad6:	e054      	b.n	14b82 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   14ad8:	697b      	ldr	r3, [r7, #20]
   14ada:	7a5b      	ldrb	r3, [r3, #9]
   14adc:	b2db      	uxtb	r3, r3
   14ade:	2b01      	cmp	r3, #1
   14ae0:	d11e      	bne.n	14b20 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   14ae2:	697b      	ldr	r3, [r7, #20]
   14ae4:	0018      	movs	r0, r3
   14ae6:	4b4d      	ldr	r3, [pc, #308]	; (14c1c <_spi_interrupt_handler+0x278>)
   14ae8:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   14aea:	697b      	ldr	r3, [r7, #20]
   14aec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   14aee:	b29b      	uxth	r3, r3
   14af0:	2b00      	cmp	r3, #0
   14af2:	d146      	bne.n	14b82 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   14af4:	693b      	ldr	r3, [r7, #16]
   14af6:	2204      	movs	r2, #4
   14af8:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   14afa:	697b      	ldr	r3, [r7, #20]
   14afc:	2238      	movs	r2, #56	; 0x38
   14afe:	2100      	movs	r1, #0
   14b00:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   14b02:	697b      	ldr	r3, [r7, #20]
   14b04:	2203      	movs	r2, #3
   14b06:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   14b08:	230f      	movs	r3, #15
   14b0a:	18fb      	adds	r3, r7, r3
   14b0c:	781b      	ldrb	r3, [r3, #0]
   14b0e:	2201      	movs	r2, #1
   14b10:	4013      	ands	r3, r2
   14b12:	d036      	beq.n	14b82 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   14b14:	697b      	ldr	r3, [r7, #20]
   14b16:	68db      	ldr	r3, [r3, #12]
   14b18:	697a      	ldr	r2, [r7, #20]
   14b1a:	0010      	movs	r0, r2
   14b1c:	4798      	blx	r3
   14b1e:	e030      	b.n	14b82 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   14b20:	697b      	ldr	r3, [r7, #20]
   14b22:	0018      	movs	r0, r3
   14b24:	4b3e      	ldr	r3, [pc, #248]	; (14c20 <_spi_interrupt_handler+0x27c>)
   14b26:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   14b28:	697b      	ldr	r3, [r7, #20]
   14b2a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   14b2c:	b29b      	uxth	r3, r3
   14b2e:	2b00      	cmp	r3, #0
   14b30:	d127      	bne.n	14b82 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   14b32:	697b      	ldr	r3, [r7, #20]
   14b34:	2238      	movs	r2, #56	; 0x38
   14b36:	2100      	movs	r1, #0
   14b38:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   14b3a:	693b      	ldr	r3, [r7, #16]
   14b3c:	2204      	movs	r2, #4
   14b3e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   14b40:	697b      	ldr	r3, [r7, #20]
   14b42:	7a5b      	ldrb	r3, [r3, #9]
   14b44:	b2db      	uxtb	r3, r3
   14b46:	2b02      	cmp	r3, #2
   14b48:	d10b      	bne.n	14b62 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   14b4a:	230f      	movs	r3, #15
   14b4c:	18fb      	adds	r3, r7, r3
   14b4e:	781b      	ldrb	r3, [r3, #0]
   14b50:	2204      	movs	r2, #4
   14b52:	4013      	ands	r3, r2
   14b54:	d015      	beq.n	14b82 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   14b56:	697b      	ldr	r3, [r7, #20]
   14b58:	695b      	ldr	r3, [r3, #20]
   14b5a:	697a      	ldr	r2, [r7, #20]
   14b5c:	0010      	movs	r0, r2
   14b5e:	4798      	blx	r3
   14b60:	e00f      	b.n	14b82 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   14b62:	697b      	ldr	r3, [r7, #20]
   14b64:	7a5b      	ldrb	r3, [r3, #9]
   14b66:	b2db      	uxtb	r3, r3
   14b68:	2b00      	cmp	r3, #0
   14b6a:	d10a      	bne.n	14b82 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   14b6c:	230f      	movs	r3, #15
   14b6e:	18fb      	adds	r3, r7, r3
   14b70:	781b      	ldrb	r3, [r3, #0]
   14b72:	2202      	movs	r2, #2
   14b74:	4013      	ands	r3, r2
   14b76:	d004      	beq.n	14b82 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   14b78:	697b      	ldr	r3, [r7, #20]
   14b7a:	691b      	ldr	r3, [r3, #16]
   14b7c:	697a      	ldr	r2, [r7, #20]
   14b7e:	0010      	movs	r0, r2
   14b80:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   14b82:	230c      	movs	r3, #12
   14b84:	18fb      	adds	r3, r7, r3
   14b86:	881b      	ldrh	r3, [r3, #0]
   14b88:	2202      	movs	r2, #2
   14b8a:	4013      	ands	r3, r2
   14b8c:	d024      	beq.n	14bd8 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   14b8e:	697b      	ldr	r3, [r7, #20]
   14b90:	795b      	ldrb	r3, [r3, #5]
   14b92:	2b01      	cmp	r3, #1
   14b94:	d120      	bne.n	14bd8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   14b96:	697b      	ldr	r3, [r7, #20]
   14b98:	7a5b      	ldrb	r3, [r3, #9]
   14b9a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   14b9c:	2b01      	cmp	r3, #1
   14b9e:	d11b      	bne.n	14bd8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   14ba0:	697b      	ldr	r3, [r7, #20]
   14ba2:	79db      	ldrb	r3, [r3, #7]
   14ba4:	2201      	movs	r2, #1
   14ba6:	4053      	eors	r3, r2
   14ba8:	b2db      	uxtb	r3, r3
   14baa:	2b00      	cmp	r3, #0
   14bac:	d014      	beq.n	14bd8 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   14bae:	693b      	ldr	r3, [r7, #16]
   14bb0:	2202      	movs	r2, #2
   14bb2:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   14bb4:	697b      	ldr	r3, [r7, #20]
   14bb6:	2203      	movs	r2, #3
   14bb8:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   14bba:	697b      	ldr	r3, [r7, #20]
   14bbc:	2238      	movs	r2, #56	; 0x38
   14bbe:	2100      	movs	r1, #0
   14bc0:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   14bc2:	230f      	movs	r3, #15
   14bc4:	18fb      	adds	r3, r7, r3
   14bc6:	781b      	ldrb	r3, [r3, #0]
   14bc8:	2201      	movs	r2, #1
   14bca:	4013      	ands	r3, r2
   14bcc:	d004      	beq.n	14bd8 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   14bce:	697b      	ldr	r3, [r7, #20]
   14bd0:	68db      	ldr	r3, [r3, #12]
   14bd2:	697a      	ldr	r2, [r7, #20]
   14bd4:	0010      	movs	r0, r2
   14bd6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   14bd8:	230c      	movs	r3, #12
   14bda:	18fb      	adds	r3, r7, r3
   14bdc:	881b      	ldrh	r3, [r3, #0]
   14bde:	2280      	movs	r2, #128	; 0x80
   14be0:	4013      	ands	r3, r2
   14be2:	d010      	beq.n	14c06 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   14be4:	693b      	ldr	r3, [r7, #16]
   14be6:	2280      	movs	r2, #128	; 0x80
   14be8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   14bea:	693b      	ldr	r3, [r7, #16]
   14bec:	2280      	movs	r2, #128	; 0x80
   14bee:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   14bf0:	230f      	movs	r3, #15
   14bf2:	18fb      	adds	r3, r7, r3
   14bf4:	781b      	ldrb	r3, [r3, #0]
   14bf6:	2240      	movs	r2, #64	; 0x40
   14bf8:	4013      	ands	r3, r2
   14bfa:	d004      	beq.n	14c06 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   14bfc:	697b      	ldr	r3, [r7, #20]
   14bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14c00:	697a      	ldr	r2, [r7, #20]
   14c02:	0010      	movs	r0, r2
   14c04:	4798      	blx	r3
		}
	}
#  endif
}
   14c06:	46c0      	nop			; (mov r8, r8)
   14c08:	46bd      	mov	sp, r7
   14c0a:	b006      	add	sp, #24
   14c0c:	bd80      	pop	{r7, pc}
   14c0e:	46c0      	nop			; (mov r8, r8)
   14c10:	20005a0c 	.word	0x20005a0c
   14c14:	000148c9 	.word	0x000148c9
   14c18:	0001484d 	.word	0x0001484d
   14c1c:	000148fd 	.word	0x000148fd
   14c20:	00014933 	.word	0x00014933

00014c24 <system_gclk_chan_get_config_defaults>:
{
   14c24:	b580      	push	{r7, lr}
   14c26:	b082      	sub	sp, #8
   14c28:	af00      	add	r7, sp, #0
   14c2a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   14c2c:	687b      	ldr	r3, [r7, #4]
   14c2e:	2200      	movs	r2, #0
   14c30:	701a      	strb	r2, [r3, #0]
}
   14c32:	46c0      	nop			; (mov r8, r8)
   14c34:	46bd      	mov	sp, r7
   14c36:	b002      	add	sp, #8
   14c38:	bd80      	pop	{r7, pc}
	...

00014c3c <system_apb_clock_set_mask>:
{
   14c3c:	b580      	push	{r7, lr}
   14c3e:	b082      	sub	sp, #8
   14c40:	af00      	add	r7, sp, #0
   14c42:	0002      	movs	r2, r0
   14c44:	6039      	str	r1, [r7, #0]
   14c46:	1dfb      	adds	r3, r7, #7
   14c48:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   14c4a:	1dfb      	adds	r3, r7, #7
   14c4c:	781b      	ldrb	r3, [r3, #0]
   14c4e:	2b01      	cmp	r3, #1
   14c50:	d00a      	beq.n	14c68 <system_apb_clock_set_mask+0x2c>
   14c52:	2b02      	cmp	r3, #2
   14c54:	d00f      	beq.n	14c76 <system_apb_clock_set_mask+0x3a>
   14c56:	2b00      	cmp	r3, #0
   14c58:	d114      	bne.n	14c84 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   14c5a:	4b0e      	ldr	r3, [pc, #56]	; (14c94 <system_apb_clock_set_mask+0x58>)
   14c5c:	4a0d      	ldr	r2, [pc, #52]	; (14c94 <system_apb_clock_set_mask+0x58>)
   14c5e:	6991      	ldr	r1, [r2, #24]
   14c60:	683a      	ldr	r2, [r7, #0]
   14c62:	430a      	orrs	r2, r1
   14c64:	619a      	str	r2, [r3, #24]
			break;
   14c66:	e00f      	b.n	14c88 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   14c68:	4b0a      	ldr	r3, [pc, #40]	; (14c94 <system_apb_clock_set_mask+0x58>)
   14c6a:	4a0a      	ldr	r2, [pc, #40]	; (14c94 <system_apb_clock_set_mask+0x58>)
   14c6c:	69d1      	ldr	r1, [r2, #28]
   14c6e:	683a      	ldr	r2, [r7, #0]
   14c70:	430a      	orrs	r2, r1
   14c72:	61da      	str	r2, [r3, #28]
			break;
   14c74:	e008      	b.n	14c88 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   14c76:	4b07      	ldr	r3, [pc, #28]	; (14c94 <system_apb_clock_set_mask+0x58>)
   14c78:	4a06      	ldr	r2, [pc, #24]	; (14c94 <system_apb_clock_set_mask+0x58>)
   14c7a:	6a11      	ldr	r1, [r2, #32]
   14c7c:	683a      	ldr	r2, [r7, #0]
   14c7e:	430a      	orrs	r2, r1
   14c80:	621a      	str	r2, [r3, #32]
			break;
   14c82:	e001      	b.n	14c88 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   14c84:	2317      	movs	r3, #23
   14c86:	e000      	b.n	14c8a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   14c88:	2300      	movs	r3, #0
}
   14c8a:	0018      	movs	r0, r3
   14c8c:	46bd      	mov	sp, r7
   14c8e:	b002      	add	sp, #8
   14c90:	bd80      	pop	{r7, pc}
   14c92:	46c0      	nop			; (mov r8, r8)
   14c94:	40000400 	.word	0x40000400

00014c98 <system_pinmux_get_config_defaults>:
{
   14c98:	b580      	push	{r7, lr}
   14c9a:	b082      	sub	sp, #8
   14c9c:	af00      	add	r7, sp, #0
   14c9e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   14ca0:	687b      	ldr	r3, [r7, #4]
   14ca2:	2280      	movs	r2, #128	; 0x80
   14ca4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   14ca6:	687b      	ldr	r3, [r7, #4]
   14ca8:	2200      	movs	r2, #0
   14caa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   14cac:	687b      	ldr	r3, [r7, #4]
   14cae:	2201      	movs	r2, #1
   14cb0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   14cb2:	687b      	ldr	r3, [r7, #4]
   14cb4:	2200      	movs	r2, #0
   14cb6:	70da      	strb	r2, [r3, #3]
}
   14cb8:	46c0      	nop			; (mov r8, r8)
   14cba:	46bd      	mov	sp, r7
   14cbc:	b002      	add	sp, #8
   14cbe:	bd80      	pop	{r7, pc}

00014cc0 <system_is_debugger_present>:
{
   14cc0:	b580      	push	{r7, lr}
   14cc2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   14cc4:	4b05      	ldr	r3, [pc, #20]	; (14cdc <system_is_debugger_present+0x1c>)
   14cc6:	789b      	ldrb	r3, [r3, #2]
   14cc8:	b2db      	uxtb	r3, r3
   14cca:	001a      	movs	r2, r3
   14ccc:	2302      	movs	r3, #2
   14cce:	4013      	ands	r3, r2
   14cd0:	1e5a      	subs	r2, r3, #1
   14cd2:	4193      	sbcs	r3, r2
   14cd4:	b2db      	uxtb	r3, r3
}
   14cd6:	0018      	movs	r0, r3
   14cd8:	46bd      	mov	sp, r7
   14cda:	bd80      	pop	{r7, pc}
   14cdc:	41002000 	.word	0x41002000

00014ce0 <usart_is_syncing>:
{
   14ce0:	b580      	push	{r7, lr}
   14ce2:	b084      	sub	sp, #16
   14ce4:	af00      	add	r7, sp, #0
   14ce6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   14ce8:	687b      	ldr	r3, [r7, #4]
   14cea:	681b      	ldr	r3, [r3, #0]
   14cec:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   14cee:	68fb      	ldr	r3, [r7, #12]
   14cf0:	69db      	ldr	r3, [r3, #28]
   14cf2:	1e5a      	subs	r2, r3, #1
   14cf4:	4193      	sbcs	r3, r2
   14cf6:	b2db      	uxtb	r3, r3
}
   14cf8:	0018      	movs	r0, r3
   14cfa:	46bd      	mov	sp, r7
   14cfc:	b004      	add	sp, #16
   14cfe:	bd80      	pop	{r7, pc}

00014d00 <_usart_wait_for_sync>:
{
   14d00:	b580      	push	{r7, lr}
   14d02:	b082      	sub	sp, #8
   14d04:	af00      	add	r7, sp, #0
   14d06:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   14d08:	46c0      	nop			; (mov r8, r8)
   14d0a:	687b      	ldr	r3, [r7, #4]
   14d0c:	0018      	movs	r0, r3
   14d0e:	4b04      	ldr	r3, [pc, #16]	; (14d20 <_usart_wait_for_sync+0x20>)
   14d10:	4798      	blx	r3
   14d12:	1e03      	subs	r3, r0, #0
   14d14:	d1f9      	bne.n	14d0a <_usart_wait_for_sync+0xa>
}
   14d16:	46c0      	nop			; (mov r8, r8)
   14d18:	46bd      	mov	sp, r7
   14d1a:	b002      	add	sp, #8
   14d1c:	bd80      	pop	{r7, pc}
   14d1e:	46c0      	nop			; (mov r8, r8)
   14d20:	00014ce1 	.word	0x00014ce1

00014d24 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   14d24:	b5b0      	push	{r4, r5, r7, lr}
   14d26:	b08c      	sub	sp, #48	; 0x30
   14d28:	af02      	add	r7, sp, #8
   14d2a:	6078      	str	r0, [r7, #4]
   14d2c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   14d2e:	687b      	ldr	r3, [r7, #4]
   14d30:	681b      	ldr	r3, [r3, #0]
   14d32:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14d34:	687b      	ldr	r3, [r7, #4]
   14d36:	681b      	ldr	r3, [r3, #0]
   14d38:	0018      	movs	r0, r3
   14d3a:	4bab      	ldr	r3, [pc, #684]	; (14fe8 <_usart_set_config+0x2c4>)
   14d3c:	4798      	blx	r3
   14d3e:	0003      	movs	r3, r0
   14d40:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14d42:	697b      	ldr	r3, [r7, #20]
   14d44:	3314      	adds	r3, #20
   14d46:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   14d48:	2300      	movs	r3, #0
   14d4a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   14d4c:	2300      	movs	r3, #0
   14d4e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   14d50:	230a      	movs	r3, #10
   14d52:	18fb      	adds	r3, r7, r3
   14d54:	2200      	movs	r2, #0
   14d56:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   14d58:	231f      	movs	r3, #31
   14d5a:	18fb      	adds	r3, r7, r3
   14d5c:	2200      	movs	r2, #0
   14d5e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   14d60:	231e      	movs	r3, #30
   14d62:	18fb      	adds	r3, r7, r3
   14d64:	2210      	movs	r2, #16
   14d66:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   14d68:	683b      	ldr	r3, [r7, #0]
   14d6a:	8a1b      	ldrh	r3, [r3, #16]
   14d6c:	2280      	movs	r2, #128	; 0x80
   14d6e:	01d2      	lsls	r2, r2, #7
   14d70:	4293      	cmp	r3, r2
   14d72:	d01c      	beq.n	14dae <_usart_set_config+0x8a>
   14d74:	2280      	movs	r2, #128	; 0x80
   14d76:	01d2      	lsls	r2, r2, #7
   14d78:	4293      	cmp	r3, r2
   14d7a:	dc06      	bgt.n	14d8a <_usart_set_config+0x66>
   14d7c:	2b00      	cmp	r3, #0
   14d7e:	d00d      	beq.n	14d9c <_usart_set_config+0x78>
   14d80:	2280      	movs	r2, #128	; 0x80
   14d82:	0192      	lsls	r2, r2, #6
   14d84:	4293      	cmp	r3, r2
   14d86:	d024      	beq.n	14dd2 <_usart_set_config+0xae>
   14d88:	e035      	b.n	14df6 <_usart_set_config+0xd2>
   14d8a:	22c0      	movs	r2, #192	; 0xc0
   14d8c:	01d2      	lsls	r2, r2, #7
   14d8e:	4293      	cmp	r3, r2
   14d90:	d028      	beq.n	14de4 <_usart_set_config+0xc0>
   14d92:	2280      	movs	r2, #128	; 0x80
   14d94:	0212      	lsls	r2, r2, #8
   14d96:	4293      	cmp	r3, r2
   14d98:	d012      	beq.n	14dc0 <_usart_set_config+0x9c>
   14d9a:	e02c      	b.n	14df6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   14d9c:	231f      	movs	r3, #31
   14d9e:	18fb      	adds	r3, r7, r3
   14da0:	2200      	movs	r2, #0
   14da2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   14da4:	231e      	movs	r3, #30
   14da6:	18fb      	adds	r3, r7, r3
   14da8:	2210      	movs	r2, #16
   14daa:	701a      	strb	r2, [r3, #0]
			break;
   14dac:	e023      	b.n	14df6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   14dae:	231f      	movs	r3, #31
   14db0:	18fb      	adds	r3, r7, r3
   14db2:	2200      	movs	r2, #0
   14db4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   14db6:	231e      	movs	r3, #30
   14db8:	18fb      	adds	r3, r7, r3
   14dba:	2208      	movs	r2, #8
   14dbc:	701a      	strb	r2, [r3, #0]
			break;
   14dbe:	e01a      	b.n	14df6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   14dc0:	231f      	movs	r3, #31
   14dc2:	18fb      	adds	r3, r7, r3
   14dc4:	2200      	movs	r2, #0
   14dc6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   14dc8:	231e      	movs	r3, #30
   14dca:	18fb      	adds	r3, r7, r3
   14dcc:	2203      	movs	r2, #3
   14dce:	701a      	strb	r2, [r3, #0]
			break;
   14dd0:	e011      	b.n	14df6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   14dd2:	231f      	movs	r3, #31
   14dd4:	18fb      	adds	r3, r7, r3
   14dd6:	2201      	movs	r2, #1
   14dd8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   14dda:	231e      	movs	r3, #30
   14ddc:	18fb      	adds	r3, r7, r3
   14dde:	2210      	movs	r2, #16
   14de0:	701a      	strb	r2, [r3, #0]
			break;
   14de2:	e008      	b.n	14df6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   14de4:	231f      	movs	r3, #31
   14de6:	18fb      	adds	r3, r7, r3
   14de8:	2201      	movs	r2, #1
   14dea:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   14dec:	231e      	movs	r3, #30
   14dee:	18fb      	adds	r3, r7, r3
   14df0:	2208      	movs	r2, #8
   14df2:	701a      	strb	r2, [r3, #0]
			break;
   14df4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   14df6:	683b      	ldr	r3, [r7, #0]
   14df8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   14dfa:	683b      	ldr	r3, [r7, #0]
   14dfc:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   14dfe:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   14e00:	683b      	ldr	r3, [r7, #0]
   14e02:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   14e04:	4313      	orrs	r3, r2
		config->sample_rate |
   14e06:	683a      	ldr	r2, [r7, #0]
   14e08:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   14e0a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   14e0c:	683a      	ldr	r2, [r7, #0]
   14e0e:	7e12      	ldrb	r2, [r2, #24]
   14e10:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   14e12:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   14e14:	683a      	ldr	r2, [r7, #0]
   14e16:	2126      	movs	r1, #38	; 0x26
   14e18:	5c52      	ldrb	r2, [r2, r1]
   14e1a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   14e1c:	4313      	orrs	r3, r2
   14e1e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   14e20:	231d      	movs	r3, #29
   14e22:	18fb      	adds	r3, r7, r3
   14e24:	2200      	movs	r2, #0
   14e26:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   14e28:	683b      	ldr	r3, [r7, #0]
   14e2a:	685b      	ldr	r3, [r3, #4]
   14e2c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   14e2e:	68fb      	ldr	r3, [r7, #12]
   14e30:	2b00      	cmp	r3, #0
   14e32:	d01e      	beq.n	14e72 <_usart_set_config+0x14e>
   14e34:	2280      	movs	r2, #128	; 0x80
   14e36:	0552      	lsls	r2, r2, #21
   14e38:	4293      	cmp	r3, r2
   14e3a:	d14f      	bne.n	14edc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   14e3c:	683b      	ldr	r3, [r7, #0]
   14e3e:	2227      	movs	r2, #39	; 0x27
   14e40:	5c9b      	ldrb	r3, [r3, r2]
   14e42:	2201      	movs	r2, #1
   14e44:	4053      	eors	r3, r2
   14e46:	b2db      	uxtb	r3, r3
   14e48:	2b00      	cmp	r3, #0
   14e4a:	d046      	beq.n	14eda <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   14e4c:	683b      	ldr	r3, [r7, #0]
   14e4e:	6a1d      	ldr	r5, [r3, #32]
   14e50:	693b      	ldr	r3, [r7, #16]
   14e52:	b2db      	uxtb	r3, r3
   14e54:	0018      	movs	r0, r3
   14e56:	4b65      	ldr	r3, [pc, #404]	; (14fec <_usart_set_config+0x2c8>)
   14e58:	4798      	blx	r3
   14e5a:	0001      	movs	r1, r0
   14e5c:	231d      	movs	r3, #29
   14e5e:	18fc      	adds	r4, r7, r3
   14e60:	230a      	movs	r3, #10
   14e62:	18fb      	adds	r3, r7, r3
   14e64:	001a      	movs	r2, r3
   14e66:	0028      	movs	r0, r5
   14e68:	4b61      	ldr	r3, [pc, #388]	; (14ff0 <_usart_set_config+0x2cc>)
   14e6a:	4798      	blx	r3
   14e6c:	0003      	movs	r3, r0
   14e6e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   14e70:	e033      	b.n	14eda <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   14e72:	683b      	ldr	r3, [r7, #0]
   14e74:	2227      	movs	r2, #39	; 0x27
   14e76:	5c9b      	ldrb	r3, [r3, r2]
   14e78:	2b00      	cmp	r3, #0
   14e7a:	d014      	beq.n	14ea6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   14e7c:	683b      	ldr	r3, [r7, #0]
   14e7e:	6a18      	ldr	r0, [r3, #32]
   14e80:	683b      	ldr	r3, [r7, #0]
   14e82:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   14e84:	231d      	movs	r3, #29
   14e86:	18fc      	adds	r4, r7, r3
   14e88:	231f      	movs	r3, #31
   14e8a:	18fb      	adds	r3, r7, r3
   14e8c:	781d      	ldrb	r5, [r3, #0]
   14e8e:	230a      	movs	r3, #10
   14e90:	18fa      	adds	r2, r7, r3
   14e92:	231e      	movs	r3, #30
   14e94:	18fb      	adds	r3, r7, r3
   14e96:	781b      	ldrb	r3, [r3, #0]
   14e98:	9300      	str	r3, [sp, #0]
   14e9a:	002b      	movs	r3, r5
   14e9c:	4d55      	ldr	r5, [pc, #340]	; (14ff4 <_usart_set_config+0x2d0>)
   14e9e:	47a8      	blx	r5
   14ea0:	0003      	movs	r3, r0
   14ea2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   14ea4:	e01a      	b.n	14edc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   14ea6:	683b      	ldr	r3, [r7, #0]
   14ea8:	6a1d      	ldr	r5, [r3, #32]
   14eaa:	693b      	ldr	r3, [r7, #16]
   14eac:	b2db      	uxtb	r3, r3
   14eae:	0018      	movs	r0, r3
   14eb0:	4b4e      	ldr	r3, [pc, #312]	; (14fec <_usart_set_config+0x2c8>)
   14eb2:	4798      	blx	r3
				status_code =
   14eb4:	231d      	movs	r3, #29
   14eb6:	18fc      	adds	r4, r7, r3
   14eb8:	231f      	movs	r3, #31
   14eba:	18fb      	adds	r3, r7, r3
   14ebc:	7819      	ldrb	r1, [r3, #0]
   14ebe:	230a      	movs	r3, #10
   14ec0:	18fa      	adds	r2, r7, r3
   14ec2:	231e      	movs	r3, #30
   14ec4:	18fb      	adds	r3, r7, r3
   14ec6:	781b      	ldrb	r3, [r3, #0]
   14ec8:	9300      	str	r3, [sp, #0]
   14eca:	000b      	movs	r3, r1
   14ecc:	0001      	movs	r1, r0
   14ece:	0028      	movs	r0, r5
   14ed0:	4d48      	ldr	r5, [pc, #288]	; (14ff4 <_usart_set_config+0x2d0>)
   14ed2:	47a8      	blx	r5
   14ed4:	0003      	movs	r3, r0
   14ed6:	7023      	strb	r3, [r4, #0]
			break;
   14ed8:	e000      	b.n	14edc <_usart_set_config+0x1b8>
			break;
   14eda:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   14edc:	231d      	movs	r3, #29
   14ede:	18fb      	adds	r3, r7, r3
   14ee0:	781b      	ldrb	r3, [r3, #0]
   14ee2:	2b00      	cmp	r3, #0
   14ee4:	d003      	beq.n	14eee <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   14ee6:	231d      	movs	r3, #29
   14ee8:	18fb      	adds	r3, r7, r3
   14eea:	781b      	ldrb	r3, [r3, #0]
   14eec:	e077      	b.n	14fde <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   14eee:	683b      	ldr	r3, [r7, #0]
   14ef0:	7e5b      	ldrb	r3, [r3, #25]
   14ef2:	2b00      	cmp	r3, #0
   14ef4:	d003      	beq.n	14efe <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   14ef6:	683b      	ldr	r3, [r7, #0]
   14ef8:	7e9a      	ldrb	r2, [r3, #26]
   14efa:	69bb      	ldr	r3, [r7, #24]
   14efc:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   14efe:	687b      	ldr	r3, [r7, #4]
   14f00:	0018      	movs	r0, r3
   14f02:	4b3d      	ldr	r3, [pc, #244]	; (14ff8 <_usart_set_config+0x2d4>)
   14f04:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   14f06:	230a      	movs	r3, #10
   14f08:	18fb      	adds	r3, r7, r3
   14f0a:	881a      	ldrh	r2, [r3, #0]
   14f0c:	69bb      	ldr	r3, [r7, #24]
   14f0e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   14f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14f12:	68fb      	ldr	r3, [r7, #12]
   14f14:	4313      	orrs	r3, r2
   14f16:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   14f18:	683b      	ldr	r3, [r7, #0]
   14f1a:	2227      	movs	r2, #39	; 0x27
   14f1c:	5c9b      	ldrb	r3, [r3, r2]
   14f1e:	2201      	movs	r2, #1
   14f20:	4053      	eors	r3, r2
   14f22:	b2db      	uxtb	r3, r3
   14f24:	2b00      	cmp	r3, #0
   14f26:	d003      	beq.n	14f30 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   14f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14f2a:	2204      	movs	r2, #4
   14f2c:	4313      	orrs	r3, r2
   14f2e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   14f30:	683b      	ldr	r3, [r7, #0]
   14f32:	7e5b      	ldrb	r3, [r3, #25]
   14f34:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   14f36:	683b      	ldr	r3, [r7, #0]
   14f38:	7f1b      	ldrb	r3, [r3, #28]
   14f3a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   14f3c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   14f3e:	683b      	ldr	r3, [r7, #0]
   14f40:	7f5b      	ldrb	r3, [r3, #29]
   14f42:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   14f44:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   14f46:	683b      	ldr	r3, [r7, #0]
   14f48:	2124      	movs	r1, #36	; 0x24
   14f4a:	5c5b      	ldrb	r3, [r3, r1]
   14f4c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   14f4e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   14f50:	683b      	ldr	r3, [r7, #0]
   14f52:	2125      	movs	r1, #37	; 0x25
   14f54:	5c5b      	ldrb	r3, [r3, r1]
   14f56:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   14f58:	4313      	orrs	r3, r2
	ctrlb =  
   14f5a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   14f5c:	683b      	ldr	r3, [r7, #0]
   14f5e:	7a9b      	ldrb	r3, [r3, #10]
   14f60:	001a      	movs	r2, r3
   14f62:	6a3b      	ldr	r3, [r7, #32]
   14f64:	4313      	orrs	r3, r2
   14f66:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   14f68:	683b      	ldr	r3, [r7, #0]
   14f6a:	7adb      	ldrb	r3, [r3, #11]
   14f6c:	001a      	movs	r2, r3
   14f6e:	6a3b      	ldr	r3, [r7, #32]
   14f70:	4313      	orrs	r3, r2
   14f72:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   14f74:	683b      	ldr	r3, [r7, #0]
   14f76:	891b      	ldrh	r3, [r3, #8]
   14f78:	2bff      	cmp	r3, #255	; 0xff
   14f7a:	d00b      	beq.n	14f94 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   14f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14f7e:	2280      	movs	r2, #128	; 0x80
   14f80:	0452      	lsls	r2, r2, #17
   14f82:	4313      	orrs	r3, r2
   14f84:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   14f86:	683b      	ldr	r3, [r7, #0]
   14f88:	891b      	ldrh	r3, [r3, #8]
   14f8a:	001a      	movs	r2, r3
   14f8c:	6a3b      	ldr	r3, [r7, #32]
   14f8e:	4313      	orrs	r3, r2
   14f90:	623b      	str	r3, [r7, #32]
   14f92:	e008      	b.n	14fa6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   14f94:	683b      	ldr	r3, [r7, #0]
   14f96:	7edb      	ldrb	r3, [r3, #27]
   14f98:	2b00      	cmp	r3, #0
   14f9a:	d004      	beq.n	14fa6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   14f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14f9e:	2280      	movs	r2, #128	; 0x80
   14fa0:	04d2      	lsls	r2, r2, #19
   14fa2:	4313      	orrs	r3, r2
   14fa4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   14fa6:	683b      	ldr	r3, [r7, #0]
   14fa8:	222c      	movs	r2, #44	; 0x2c
   14faa:	5c9b      	ldrb	r3, [r3, r2]
   14fac:	2b00      	cmp	r3, #0
   14fae:	d103      	bne.n	14fb8 <_usart_set_config+0x294>
   14fb0:	4b12      	ldr	r3, [pc, #72]	; (14ffc <_usart_set_config+0x2d8>)
   14fb2:	4798      	blx	r3
   14fb4:	1e03      	subs	r3, r0, #0
   14fb6:	d003      	beq.n	14fc0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   14fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14fba:	2280      	movs	r2, #128	; 0x80
   14fbc:	4313      	orrs	r3, r2
   14fbe:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   14fc0:	687b      	ldr	r3, [r7, #4]
   14fc2:	0018      	movs	r0, r3
   14fc4:	4b0c      	ldr	r3, [pc, #48]	; (14ff8 <_usart_set_config+0x2d4>)
   14fc6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   14fc8:	69bb      	ldr	r3, [r7, #24]
   14fca:	6a3a      	ldr	r2, [r7, #32]
   14fcc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   14fce:	687b      	ldr	r3, [r7, #4]
   14fd0:	0018      	movs	r0, r3
   14fd2:	4b09      	ldr	r3, [pc, #36]	; (14ff8 <_usart_set_config+0x2d4>)
   14fd4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   14fd6:	69bb      	ldr	r3, [r7, #24]
   14fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14fda:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   14fdc:	2300      	movs	r3, #0
}
   14fde:	0018      	movs	r0, r3
   14fe0:	46bd      	mov	sp, r7
   14fe2:	b00a      	add	sp, #40	; 0x28
   14fe4:	bdb0      	pop	{r4, r5, r7, pc}
   14fe6:	46c0      	nop			; (mov r8, r8)
   14fe8:	00013acd 	.word	0x00013acd
   14fec:	00016481 	.word	0x00016481
   14ff0:	00013647 	.word	0x00013647
   14ff4:	000136c5 	.word	0x000136c5
   14ff8:	00014d01 	.word	0x00014d01
   14ffc:	00014cc1 	.word	0x00014cc1

00015000 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   15000:	b590      	push	{r4, r7, lr}
   15002:	b093      	sub	sp, #76	; 0x4c
   15004:	af00      	add	r7, sp, #0
   15006:	60f8      	str	r0, [r7, #12]
   15008:	60b9      	str	r1, [r7, #8]
   1500a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   1500c:	233b      	movs	r3, #59	; 0x3b
   1500e:	18fb      	adds	r3, r7, r3
   15010:	2200      	movs	r2, #0
   15012:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   15014:	68fb      	ldr	r3, [r7, #12]
   15016:	68ba      	ldr	r2, [r7, #8]
   15018:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1501a:	68fb      	ldr	r3, [r7, #12]
   1501c:	681b      	ldr	r3, [r3, #0]
   1501e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   15020:	68fb      	ldr	r3, [r7, #12]
   15022:	681b      	ldr	r3, [r3, #0]
   15024:	0018      	movs	r0, r3
   15026:	4b86      	ldr	r3, [pc, #536]	; (15240 <usart_init+0x240>)
   15028:	4798      	blx	r3
   1502a:	0003      	movs	r3, r0
   1502c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15030:	3302      	adds	r3, #2
   15032:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   15034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15036:	3314      	adds	r3, #20
   15038:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1503a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1503c:	681b      	ldr	r3, [r3, #0]
   1503e:	2201      	movs	r2, #1
   15040:	4013      	ands	r3, r2
   15042:	d001      	beq.n	15048 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   15044:	2305      	movs	r3, #5
   15046:	e0f6      	b.n	15236 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   15048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1504a:	681b      	ldr	r3, [r3, #0]
   1504c:	2202      	movs	r2, #2
   1504e:	4013      	ands	r3, r2
   15050:	d001      	beq.n	15056 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   15052:	231c      	movs	r3, #28
   15054:	e0ef      	b.n	15236 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   15056:	2201      	movs	r2, #1
   15058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1505a:	409a      	lsls	r2, r3
   1505c:	0013      	movs	r3, r2
   1505e:	0019      	movs	r1, r3
   15060:	2002      	movs	r0, #2
   15062:	4b78      	ldr	r3, [pc, #480]	; (15244 <usart_init+0x244>)
   15064:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   15066:	2324      	movs	r3, #36	; 0x24
   15068:	18fb      	adds	r3, r7, r3
   1506a:	0018      	movs	r0, r3
   1506c:	4b76      	ldr	r3, [pc, #472]	; (15248 <usart_init+0x248>)
   1506e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   15070:	687b      	ldr	r3, [r7, #4]
   15072:	222d      	movs	r2, #45	; 0x2d
   15074:	5c9a      	ldrb	r2, [r3, r2]
   15076:	2324      	movs	r3, #36	; 0x24
   15078:	18fb      	adds	r3, r7, r3
   1507a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1507e:	b2db      	uxtb	r3, r3
   15080:	2224      	movs	r2, #36	; 0x24
   15082:	18ba      	adds	r2, r7, r2
   15084:	0011      	movs	r1, r2
   15086:	0018      	movs	r0, r3
   15088:	4b70      	ldr	r3, [pc, #448]	; (1524c <usart_init+0x24c>)
   1508a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1508e:	b2db      	uxtb	r3, r3
   15090:	0018      	movs	r0, r3
   15092:	4b6f      	ldr	r3, [pc, #444]	; (15250 <usart_init+0x250>)
   15094:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   15096:	687b      	ldr	r3, [r7, #4]
   15098:	222d      	movs	r2, #45	; 0x2d
   1509a:	5c9b      	ldrb	r3, [r3, r2]
   1509c:	2100      	movs	r1, #0
   1509e:	0018      	movs	r0, r3
   150a0:	4b6c      	ldr	r3, [pc, #432]	; (15254 <usart_init+0x254>)
   150a2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   150a4:	687b      	ldr	r3, [r7, #4]
   150a6:	7ada      	ldrb	r2, [r3, #11]
   150a8:	68fb      	ldr	r3, [r7, #12]
   150aa:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   150ac:	687b      	ldr	r3, [r7, #4]
   150ae:	2224      	movs	r2, #36	; 0x24
   150b0:	5c9a      	ldrb	r2, [r3, r2]
   150b2:	68fb      	ldr	r3, [r7, #12]
   150b4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   150b6:	687b      	ldr	r3, [r7, #4]
   150b8:	2225      	movs	r2, #37	; 0x25
   150ba:	5c9a      	ldrb	r2, [r3, r2]
   150bc:	68fb      	ldr	r3, [r7, #12]
   150be:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   150c0:	687b      	ldr	r3, [r7, #4]
   150c2:	7eda      	ldrb	r2, [r3, #27]
   150c4:	68fb      	ldr	r3, [r7, #12]
   150c6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   150c8:	687b      	ldr	r3, [r7, #4]
   150ca:	7f1a      	ldrb	r2, [r3, #28]
   150cc:	68fb      	ldr	r3, [r7, #12]
   150ce:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   150d0:	233b      	movs	r3, #59	; 0x3b
   150d2:	18fc      	adds	r4, r7, r3
   150d4:	687a      	ldr	r2, [r7, #4]
   150d6:	68fb      	ldr	r3, [r7, #12]
   150d8:	0011      	movs	r1, r2
   150da:	0018      	movs	r0, r3
   150dc:	4b5e      	ldr	r3, [pc, #376]	; (15258 <usart_init+0x258>)
   150de:	4798      	blx	r3
   150e0:	0003      	movs	r3, r0
   150e2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   150e4:	233b      	movs	r3, #59	; 0x3b
   150e6:	18fb      	adds	r3, r7, r3
   150e8:	781b      	ldrb	r3, [r3, #0]
   150ea:	2b00      	cmp	r3, #0
   150ec:	d003      	beq.n	150f6 <usart_init+0xf6>
		return status_code;
   150ee:	233b      	movs	r3, #59	; 0x3b
   150f0:	18fb      	adds	r3, r7, r3
   150f2:	781b      	ldrb	r3, [r3, #0]
   150f4:	e09f      	b.n	15236 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   150f6:	2320      	movs	r3, #32
   150f8:	18fb      	adds	r3, r7, r3
   150fa:	0018      	movs	r0, r3
   150fc:	4b57      	ldr	r3, [pc, #348]	; (1525c <usart_init+0x25c>)
   150fe:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   15100:	2320      	movs	r3, #32
   15102:	18fb      	adds	r3, r7, r3
   15104:	2200      	movs	r2, #0
   15106:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   15108:	2320      	movs	r3, #32
   1510a:	18fb      	adds	r3, r7, r3
   1510c:	2200      	movs	r2, #0
   1510e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   15110:	687b      	ldr	r3, [r7, #4]
   15112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   15114:	2310      	movs	r3, #16
   15116:	18fb      	adds	r3, r7, r3
   15118:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   1511a:	687b      	ldr	r3, [r7, #4]
   1511c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   1511e:	2310      	movs	r3, #16
   15120:	18fb      	adds	r3, r7, r3
   15122:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   15124:	687b      	ldr	r3, [r7, #4]
   15126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   15128:	2310      	movs	r3, #16
   1512a:	18fb      	adds	r3, r7, r3
   1512c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   1512e:	687b      	ldr	r3, [r7, #4]
   15130:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   15132:	2310      	movs	r3, #16
   15134:	18fb      	adds	r3, r7, r3
   15136:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   15138:	2347      	movs	r3, #71	; 0x47
   1513a:	18fb      	adds	r3, r7, r3
   1513c:	2200      	movs	r2, #0
   1513e:	701a      	strb	r2, [r3, #0]
   15140:	e02c      	b.n	1519c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   15142:	2347      	movs	r3, #71	; 0x47
   15144:	18fb      	adds	r3, r7, r3
   15146:	781a      	ldrb	r2, [r3, #0]
   15148:	2310      	movs	r3, #16
   1514a:	18fb      	adds	r3, r7, r3
   1514c:	0092      	lsls	r2, r2, #2
   1514e:	58d3      	ldr	r3, [r2, r3]
   15150:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   15152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15154:	2b00      	cmp	r3, #0
   15156:	d109      	bne.n	1516c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   15158:	2347      	movs	r3, #71	; 0x47
   1515a:	18fb      	adds	r3, r7, r3
   1515c:	781a      	ldrb	r2, [r3, #0]
   1515e:	68bb      	ldr	r3, [r7, #8]
   15160:	0011      	movs	r1, r2
   15162:	0018      	movs	r0, r3
   15164:	4b3e      	ldr	r3, [pc, #248]	; (15260 <usart_init+0x260>)
   15166:	4798      	blx	r3
   15168:	0003      	movs	r3, r0
   1516a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   1516c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1516e:	3301      	adds	r3, #1
   15170:	d00d      	beq.n	1518e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   15172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15174:	b2da      	uxtb	r2, r3
   15176:	2320      	movs	r3, #32
   15178:	18fb      	adds	r3, r7, r3
   1517a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1517c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1517e:	0c1b      	lsrs	r3, r3, #16
   15180:	b2db      	uxtb	r3, r3
   15182:	2220      	movs	r2, #32
   15184:	18ba      	adds	r2, r7, r2
   15186:	0011      	movs	r1, r2
   15188:	0018      	movs	r0, r3
   1518a:	4b36      	ldr	r3, [pc, #216]	; (15264 <usart_init+0x264>)
   1518c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   1518e:	2347      	movs	r3, #71	; 0x47
   15190:	18fb      	adds	r3, r7, r3
   15192:	781a      	ldrb	r2, [r3, #0]
   15194:	2347      	movs	r3, #71	; 0x47
   15196:	18fb      	adds	r3, r7, r3
   15198:	3201      	adds	r2, #1
   1519a:	701a      	strb	r2, [r3, #0]
   1519c:	2347      	movs	r3, #71	; 0x47
   1519e:	18fb      	adds	r3, r7, r3
   151a0:	781b      	ldrb	r3, [r3, #0]
   151a2:	2b03      	cmp	r3, #3
   151a4:	d9cd      	bls.n	15142 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   151a6:	2300      	movs	r3, #0
   151a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   151aa:	e00a      	b.n	151c2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   151ac:	68fa      	ldr	r2, [r7, #12]
   151ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   151b0:	3302      	adds	r3, #2
   151b2:	009b      	lsls	r3, r3, #2
   151b4:	18d3      	adds	r3, r2, r3
   151b6:	3304      	adds	r3, #4
   151b8:	2200      	movs	r2, #0
   151ba:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   151bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   151be:	3301      	adds	r3, #1
   151c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   151c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   151c4:	2b05      	cmp	r3, #5
   151c6:	d9f1      	bls.n	151ac <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   151c8:	68fb      	ldr	r3, [r7, #12]
   151ca:	2200      	movs	r2, #0
   151cc:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   151ce:	68fb      	ldr	r3, [r7, #12]
   151d0:	2200      	movs	r2, #0
   151d2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   151d4:	68fb      	ldr	r3, [r7, #12]
   151d6:	2200      	movs	r2, #0
   151d8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   151da:	68fb      	ldr	r3, [r7, #12]
   151dc:	2200      	movs	r2, #0
   151de:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   151e0:	68fb      	ldr	r3, [r7, #12]
   151e2:	2230      	movs	r2, #48	; 0x30
   151e4:	2100      	movs	r1, #0
   151e6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   151e8:	68fb      	ldr	r3, [r7, #12]
   151ea:	2231      	movs	r2, #49	; 0x31
   151ec:	2100      	movs	r1, #0
   151ee:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   151f0:	68fb      	ldr	r3, [r7, #12]
   151f2:	2232      	movs	r2, #50	; 0x32
   151f4:	2100      	movs	r1, #0
   151f6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   151f8:	68fb      	ldr	r3, [r7, #12]
   151fa:	2233      	movs	r2, #51	; 0x33
   151fc:	2100      	movs	r1, #0
   151fe:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   15200:	68fb      	ldr	r3, [r7, #12]
   15202:	681b      	ldr	r3, [r3, #0]
   15204:	2227      	movs	r2, #39	; 0x27
   15206:	18bc      	adds	r4, r7, r2
   15208:	0018      	movs	r0, r3
   1520a:	4b0d      	ldr	r3, [pc, #52]	; (15240 <usart_init+0x240>)
   1520c:	4798      	blx	r3
   1520e:	0003      	movs	r3, r0
   15210:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   15212:	4a15      	ldr	r2, [pc, #84]	; (15268 <usart_init+0x268>)
   15214:	2327      	movs	r3, #39	; 0x27
   15216:	18fb      	adds	r3, r7, r3
   15218:	781b      	ldrb	r3, [r3, #0]
   1521a:	0011      	movs	r1, r2
   1521c:	0018      	movs	r0, r3
   1521e:	4b13      	ldr	r3, [pc, #76]	; (1526c <usart_init+0x26c>)
   15220:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   15222:	2327      	movs	r3, #39	; 0x27
   15224:	18fb      	adds	r3, r7, r3
   15226:	781a      	ldrb	r2, [r3, #0]
   15228:	4b11      	ldr	r3, [pc, #68]	; (15270 <usart_init+0x270>)
   1522a:	0092      	lsls	r2, r2, #2
   1522c:	68f9      	ldr	r1, [r7, #12]
   1522e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   15230:	233b      	movs	r3, #59	; 0x3b
   15232:	18fb      	adds	r3, r7, r3
   15234:	781b      	ldrb	r3, [r3, #0]
}
   15236:	0018      	movs	r0, r3
   15238:	46bd      	mov	sp, r7
   1523a:	b013      	add	sp, #76	; 0x4c
   1523c:	bd90      	pop	{r4, r7, pc}
   1523e:	46c0      	nop			; (mov r8, r8)
   15240:	00013acd 	.word	0x00013acd
   15244:	00014c3d 	.word	0x00014c3d
   15248:	00014c25 	.word	0x00014c25
   1524c:	0001635d 	.word	0x0001635d
   15250:	000163a1 	.word	0x000163a1
   15254:	00013885 	.word	0x00013885
   15258:	00014d25 	.word	0x00014d25
   1525c:	00014c99 	.word	0x00014c99
   15260:	00013911 	.word	0x00013911
   15264:	000166bd 	.word	0x000166bd
   15268:	000154dd 	.word	0x000154dd
   1526c:	00013b31 	.word	0x00013b31
   15270:	20005a0c 	.word	0x20005a0c

00015274 <system_interrupt_enter_critical_section>:
{
   15274:	b580      	push	{r7, lr}
   15276:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   15278:	4b02      	ldr	r3, [pc, #8]	; (15284 <system_interrupt_enter_critical_section+0x10>)
   1527a:	4798      	blx	r3
}
   1527c:	46c0      	nop			; (mov r8, r8)
   1527e:	46bd      	mov	sp, r7
   15280:	bd80      	pop	{r7, pc}
   15282:	46c0      	nop			; (mov r8, r8)
   15284:	000126c9 	.word	0x000126c9

00015288 <system_interrupt_leave_critical_section>:
{
   15288:	b580      	push	{r7, lr}
   1528a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1528c:	4b02      	ldr	r3, [pc, #8]	; (15298 <system_interrupt_leave_critical_section+0x10>)
   1528e:	4798      	blx	r3
}
   15290:	46c0      	nop			; (mov r8, r8)
   15292:	46bd      	mov	sp, r7
   15294:	bd80      	pop	{r7, pc}
   15296:	46c0      	nop			; (mov r8, r8)
   15298:	0001271d 	.word	0x0001271d

0001529c <usart_is_syncing>:
{
   1529c:	b580      	push	{r7, lr}
   1529e:	b084      	sub	sp, #16
   152a0:	af00      	add	r7, sp, #0
   152a2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   152a4:	687b      	ldr	r3, [r7, #4]
   152a6:	681b      	ldr	r3, [r3, #0]
   152a8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   152aa:	68fb      	ldr	r3, [r7, #12]
   152ac:	69db      	ldr	r3, [r3, #28]
   152ae:	1e5a      	subs	r2, r3, #1
   152b0:	4193      	sbcs	r3, r2
   152b2:	b2db      	uxtb	r3, r3
}
   152b4:	0018      	movs	r0, r3
   152b6:	46bd      	mov	sp, r7
   152b8:	b004      	add	sp, #16
   152ba:	bd80      	pop	{r7, pc}

000152bc <_usart_wait_for_sync>:
{
   152bc:	b580      	push	{r7, lr}
   152be:	b082      	sub	sp, #8
   152c0:	af00      	add	r7, sp, #0
   152c2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   152c4:	46c0      	nop			; (mov r8, r8)
   152c6:	687b      	ldr	r3, [r7, #4]
   152c8:	0018      	movs	r0, r3
   152ca:	4b04      	ldr	r3, [pc, #16]	; (152dc <_usart_wait_for_sync+0x20>)
   152cc:	4798      	blx	r3
   152ce:	1e03      	subs	r3, r0, #0
   152d0:	d1f9      	bne.n	152c6 <_usart_wait_for_sync+0xa>
}
   152d2:	46c0      	nop			; (mov r8, r8)
   152d4:	46bd      	mov	sp, r7
   152d6:	b002      	add	sp, #8
   152d8:	bd80      	pop	{r7, pc}
   152da:	46c0      	nop			; (mov r8, r8)
   152dc:	0001529d 	.word	0x0001529d

000152e0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   152e0:	b580      	push	{r7, lr}
   152e2:	b086      	sub	sp, #24
   152e4:	af00      	add	r7, sp, #0
   152e6:	60f8      	str	r0, [r7, #12]
   152e8:	60b9      	str	r1, [r7, #8]
   152ea:	1dbb      	adds	r3, r7, #6
   152ec:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   152ee:	68fb      	ldr	r3, [r7, #12]
   152f0:	681b      	ldr	r3, [r3, #0]
   152f2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   152f4:	4b0f      	ldr	r3, [pc, #60]	; (15334 <_usart_write_buffer+0x54>)
   152f6:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   152f8:	68fb      	ldr	r3, [r7, #12]
   152fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   152fc:	b29b      	uxth	r3, r3
   152fe:	2b00      	cmp	r3, #0
   15300:	d003      	beq.n	1530a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   15302:	4b0d      	ldr	r3, [pc, #52]	; (15338 <_usart_write_buffer+0x58>)
   15304:	4798      	blx	r3
		return STATUS_BUSY;
   15306:	2305      	movs	r3, #5
   15308:	e010      	b.n	1532c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   1530a:	68fb      	ldr	r3, [r7, #12]
   1530c:	1dba      	adds	r2, r7, #6
   1530e:	8812      	ldrh	r2, [r2, #0]
   15310:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   15312:	4b09      	ldr	r3, [pc, #36]	; (15338 <_usart_write_buffer+0x58>)
   15314:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   15316:	68fb      	ldr	r3, [r7, #12]
   15318:	68ba      	ldr	r2, [r7, #8]
   1531a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   1531c:	68fb      	ldr	r3, [r7, #12]
   1531e:	2233      	movs	r2, #51	; 0x33
   15320:	2105      	movs	r1, #5
   15322:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   15324:	697b      	ldr	r3, [r7, #20]
   15326:	2201      	movs	r2, #1
   15328:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   1532a:	2300      	movs	r3, #0
}
   1532c:	0018      	movs	r0, r3
   1532e:	46bd      	mov	sp, r7
   15330:	b006      	add	sp, #24
   15332:	bd80      	pop	{r7, pc}
   15334:	00015275 	.word	0x00015275
   15338:	00015289 	.word	0x00015289

0001533c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   1533c:	b580      	push	{r7, lr}
   1533e:	b086      	sub	sp, #24
   15340:	af00      	add	r7, sp, #0
   15342:	60f8      	str	r0, [r7, #12]
   15344:	60b9      	str	r1, [r7, #8]
   15346:	1dbb      	adds	r3, r7, #6
   15348:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1534a:	68fb      	ldr	r3, [r7, #12]
   1534c:	681b      	ldr	r3, [r3, #0]
   1534e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   15350:	4b16      	ldr	r3, [pc, #88]	; (153ac <_usart_read_buffer+0x70>)
   15352:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   15354:	68fb      	ldr	r3, [r7, #12]
   15356:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   15358:	b29b      	uxth	r3, r3
   1535a:	2b00      	cmp	r3, #0
   1535c:	d003      	beq.n	15366 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   1535e:	4b14      	ldr	r3, [pc, #80]	; (153b0 <_usart_read_buffer+0x74>)
   15360:	4798      	blx	r3
		return STATUS_BUSY;
   15362:	2305      	movs	r3, #5
   15364:	e01e      	b.n	153a4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   15366:	68fb      	ldr	r3, [r7, #12]
   15368:	1dba      	adds	r2, r7, #6
   1536a:	8812      	ldrh	r2, [r2, #0]
   1536c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   1536e:	4b10      	ldr	r3, [pc, #64]	; (153b0 <_usart_read_buffer+0x74>)
   15370:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   15372:	68fb      	ldr	r3, [r7, #12]
   15374:	68ba      	ldr	r2, [r7, #8]
   15376:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   15378:	68fb      	ldr	r3, [r7, #12]
   1537a:	2232      	movs	r2, #50	; 0x32
   1537c:	2105      	movs	r1, #5
   1537e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   15380:	697b      	ldr	r3, [r7, #20]
   15382:	2204      	movs	r2, #4
   15384:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   15386:	68fb      	ldr	r3, [r7, #12]
   15388:	7a1b      	ldrb	r3, [r3, #8]
   1538a:	2b00      	cmp	r3, #0
   1538c:	d002      	beq.n	15394 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   1538e:	697b      	ldr	r3, [r7, #20]
   15390:	2220      	movs	r2, #32
   15392:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   15394:	68fb      	ldr	r3, [r7, #12]
   15396:	7a5b      	ldrb	r3, [r3, #9]
   15398:	2b00      	cmp	r3, #0
   1539a:	d002      	beq.n	153a2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   1539c:	697b      	ldr	r3, [r7, #20]
   1539e:	2208      	movs	r2, #8
   153a0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   153a2:	2300      	movs	r3, #0
}
   153a4:	0018      	movs	r0, r3
   153a6:	46bd      	mov	sp, r7
   153a8:	b006      	add	sp, #24
   153aa:	bd80      	pop	{r7, pc}
   153ac:	00015275 	.word	0x00015275
   153b0:	00015289 	.word	0x00015289

000153b4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   153b4:	b580      	push	{r7, lr}
   153b6:	b084      	sub	sp, #16
   153b8:	af00      	add	r7, sp, #0
   153ba:	60f8      	str	r0, [r7, #12]
   153bc:	60b9      	str	r1, [r7, #8]
   153be:	1dfb      	adds	r3, r7, #7
   153c0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   153c2:	1dfb      	adds	r3, r7, #7
   153c4:	781b      	ldrb	r3, [r3, #0]
   153c6:	68fa      	ldr	r2, [r7, #12]
   153c8:	3302      	adds	r3, #2
   153ca:	009b      	lsls	r3, r3, #2
   153cc:	18d3      	adds	r3, r2, r3
   153ce:	3304      	adds	r3, #4
   153d0:	68ba      	ldr	r2, [r7, #8]
   153d2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   153d4:	68fb      	ldr	r3, [r7, #12]
   153d6:	2230      	movs	r2, #48	; 0x30
   153d8:	5c9b      	ldrb	r3, [r3, r2]
   153da:	b25a      	sxtb	r2, r3
   153dc:	1dfb      	adds	r3, r7, #7
   153de:	781b      	ldrb	r3, [r3, #0]
   153e0:	2101      	movs	r1, #1
   153e2:	4099      	lsls	r1, r3
   153e4:	000b      	movs	r3, r1
   153e6:	b25b      	sxtb	r3, r3
   153e8:	4313      	orrs	r3, r2
   153ea:	b25b      	sxtb	r3, r3
   153ec:	b2d9      	uxtb	r1, r3
   153ee:	68fb      	ldr	r3, [r7, #12]
   153f0:	2230      	movs	r2, #48	; 0x30
   153f2:	5499      	strb	r1, [r3, r2]
}
   153f4:	46c0      	nop			; (mov r8, r8)
   153f6:	46bd      	mov	sp, r7
   153f8:	b004      	add	sp, #16
   153fa:	bd80      	pop	{r7, pc}

000153fc <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   153fc:	b580      	push	{r7, lr}
   153fe:	b084      	sub	sp, #16
   15400:	af00      	add	r7, sp, #0
   15402:	60f8      	str	r0, [r7, #12]
   15404:	60b9      	str	r1, [r7, #8]
   15406:	1dbb      	adds	r3, r7, #6
   15408:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   1540a:	1dbb      	adds	r3, r7, #6
   1540c:	881b      	ldrh	r3, [r3, #0]
   1540e:	2b00      	cmp	r3, #0
   15410:	d101      	bne.n	15416 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   15412:	2317      	movs	r3, #23
   15414:	e010      	b.n	15438 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   15416:	68fb      	ldr	r3, [r7, #12]
   15418:	79db      	ldrb	r3, [r3, #7]
   1541a:	2201      	movs	r2, #1
   1541c:	4053      	eors	r3, r2
   1541e:	b2db      	uxtb	r3, r3
   15420:	2b00      	cmp	r3, #0
   15422:	d001      	beq.n	15428 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   15424:	231c      	movs	r3, #28
   15426:	e007      	b.n	15438 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   15428:	1dbb      	adds	r3, r7, #6
   1542a:	881a      	ldrh	r2, [r3, #0]
   1542c:	68b9      	ldr	r1, [r7, #8]
   1542e:	68fb      	ldr	r3, [r7, #12]
   15430:	0018      	movs	r0, r3
   15432:	4b03      	ldr	r3, [pc, #12]	; (15440 <usart_write_buffer_job+0x44>)
   15434:	4798      	blx	r3
   15436:	0003      	movs	r3, r0
}
   15438:	0018      	movs	r0, r3
   1543a:	46bd      	mov	sp, r7
   1543c:	b004      	add	sp, #16
   1543e:	bd80      	pop	{r7, pc}
   15440:	000152e1 	.word	0x000152e1

00015444 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   15444:	b580      	push	{r7, lr}
   15446:	b084      	sub	sp, #16
   15448:	af00      	add	r7, sp, #0
   1544a:	60f8      	str	r0, [r7, #12]
   1544c:	60b9      	str	r1, [r7, #8]
   1544e:	1dbb      	adds	r3, r7, #6
   15450:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   15452:	1dbb      	adds	r3, r7, #6
   15454:	881b      	ldrh	r3, [r3, #0]
   15456:	2b00      	cmp	r3, #0
   15458:	d101      	bne.n	1545e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   1545a:	2317      	movs	r3, #23
   1545c:	e010      	b.n	15480 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   1545e:	68fb      	ldr	r3, [r7, #12]
   15460:	799b      	ldrb	r3, [r3, #6]
   15462:	2201      	movs	r2, #1
   15464:	4053      	eors	r3, r2
   15466:	b2db      	uxtb	r3, r3
   15468:	2b00      	cmp	r3, #0
   1546a:	d001      	beq.n	15470 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   1546c:	231c      	movs	r3, #28
   1546e:	e007      	b.n	15480 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   15470:	1dbb      	adds	r3, r7, #6
   15472:	881a      	ldrh	r2, [r3, #0]
   15474:	68b9      	ldr	r1, [r7, #8]
   15476:	68fb      	ldr	r3, [r7, #12]
   15478:	0018      	movs	r0, r3
   1547a:	4b03      	ldr	r3, [pc, #12]	; (15488 <usart_read_buffer_job+0x44>)
   1547c:	4798      	blx	r3
   1547e:	0003      	movs	r3, r0
}
   15480:	0018      	movs	r0, r3
   15482:	46bd      	mov	sp, r7
   15484:	b004      	add	sp, #16
   15486:	bd80      	pop	{r7, pc}
   15488:	0001533d 	.word	0x0001533d

0001548c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   1548c:	b580      	push	{r7, lr}
   1548e:	b084      	sub	sp, #16
   15490:	af00      	add	r7, sp, #0
   15492:	6078      	str	r0, [r7, #4]
   15494:	000a      	movs	r2, r1
   15496:	1cfb      	adds	r3, r7, #3
   15498:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   1549a:	1cfb      	adds	r3, r7, #3
   1549c:	781b      	ldrb	r3, [r3, #0]
   1549e:	2b00      	cmp	r3, #0
   154a0:	d002      	beq.n	154a8 <usart_get_job_status+0x1c>
   154a2:	2b01      	cmp	r3, #1
   154a4:	d007      	beq.n	154b6 <usart_get_job_status+0x2a>
   154a6:	e00d      	b.n	154c4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   154a8:	230f      	movs	r3, #15
   154aa:	18fb      	adds	r3, r7, r3
   154ac:	687a      	ldr	r2, [r7, #4]
   154ae:	2132      	movs	r1, #50	; 0x32
   154b0:	5c52      	ldrb	r2, [r2, r1]
   154b2:	701a      	strb	r2, [r3, #0]
			break;
   154b4:	e00b      	b.n	154ce <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   154b6:	230f      	movs	r3, #15
   154b8:	18fb      	adds	r3, r7, r3
   154ba:	687a      	ldr	r2, [r7, #4]
   154bc:	2133      	movs	r1, #51	; 0x33
   154be:	5c52      	ldrb	r2, [r2, r1]
   154c0:	701a      	strb	r2, [r3, #0]
			break;
   154c2:	e004      	b.n	154ce <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   154c4:	230f      	movs	r3, #15
   154c6:	18fb      	adds	r3, r7, r3
   154c8:	2217      	movs	r2, #23
   154ca:	701a      	strb	r2, [r3, #0]
			break;
   154cc:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   154ce:	230f      	movs	r3, #15
   154d0:	18fb      	adds	r3, r7, r3
   154d2:	781b      	ldrb	r3, [r3, #0]
}
   154d4:	0018      	movs	r0, r3
   154d6:	46bd      	mov	sp, r7
   154d8:	b004      	add	sp, #16
   154da:	bd80      	pop	{r7, pc}

000154dc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   154dc:	b580      	push	{r7, lr}
   154de:	b088      	sub	sp, #32
   154e0:	af00      	add	r7, sp, #0
   154e2:	0002      	movs	r2, r0
   154e4:	1dfb      	adds	r3, r7, #7
   154e6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   154e8:	1dfb      	adds	r3, r7, #7
   154ea:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   154ec:	4ba3      	ldr	r3, [pc, #652]	; (1577c <_usart_interrupt_handler+0x2a0>)
   154ee:	0092      	lsls	r2, r2, #2
   154f0:	58d3      	ldr	r3, [r2, r3]
   154f2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   154f4:	69bb      	ldr	r3, [r7, #24]
   154f6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   154f8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   154fa:	69bb      	ldr	r3, [r7, #24]
   154fc:	0018      	movs	r0, r3
   154fe:	4ba0      	ldr	r3, [pc, #640]	; (15780 <_usart_interrupt_handler+0x2a4>)
   15500:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   15502:	697b      	ldr	r3, [r7, #20]
   15504:	7e1b      	ldrb	r3, [r3, #24]
   15506:	b2da      	uxtb	r2, r3
   15508:	2312      	movs	r3, #18
   1550a:	18fb      	adds	r3, r7, r3
   1550c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   1550e:	697b      	ldr	r3, [r7, #20]
   15510:	7d9b      	ldrb	r3, [r3, #22]
   15512:	b2db      	uxtb	r3, r3
   15514:	b29a      	uxth	r2, r3
   15516:	2312      	movs	r3, #18
   15518:	18fb      	adds	r3, r7, r3
   1551a:	2112      	movs	r1, #18
   1551c:	1879      	adds	r1, r7, r1
   1551e:	8809      	ldrh	r1, [r1, #0]
   15520:	400a      	ands	r2, r1
   15522:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   15524:	69bb      	ldr	r3, [r7, #24]
   15526:	2230      	movs	r2, #48	; 0x30
   15528:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   1552a:	69ba      	ldr	r2, [r7, #24]
   1552c:	2131      	movs	r1, #49	; 0x31
   1552e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   15530:	4013      	ands	r3, r2
   15532:	b2da      	uxtb	r2, r3
   15534:	2310      	movs	r3, #16
   15536:	18fb      	adds	r3, r7, r3
   15538:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   1553a:	2312      	movs	r3, #18
   1553c:	18fb      	adds	r3, r7, r3
   1553e:	881b      	ldrh	r3, [r3, #0]
   15540:	2201      	movs	r2, #1
   15542:	4013      	ands	r3, r2
   15544:	d044      	beq.n	155d0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   15546:	69bb      	ldr	r3, [r7, #24]
   15548:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   1554a:	b29b      	uxth	r3, r3
   1554c:	2b00      	cmp	r3, #0
   1554e:	d03c      	beq.n	155ca <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   15550:	69bb      	ldr	r3, [r7, #24]
   15552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15554:	781b      	ldrb	r3, [r3, #0]
   15556:	b2da      	uxtb	r2, r3
   15558:	231c      	movs	r3, #28
   1555a:	18fb      	adds	r3, r7, r3
   1555c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   1555e:	69bb      	ldr	r3, [r7, #24]
   15560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15562:	1c5a      	adds	r2, r3, #1
   15564:	69bb      	ldr	r3, [r7, #24]
   15566:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   15568:	69bb      	ldr	r3, [r7, #24]
   1556a:	795b      	ldrb	r3, [r3, #5]
   1556c:	2b01      	cmp	r3, #1
   1556e:	d113      	bne.n	15598 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   15570:	69bb      	ldr	r3, [r7, #24]
   15572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15574:	781b      	ldrb	r3, [r3, #0]
   15576:	b2db      	uxtb	r3, r3
   15578:	021b      	lsls	r3, r3, #8
   1557a:	b21a      	sxth	r2, r3
   1557c:	231c      	movs	r3, #28
   1557e:	18fb      	adds	r3, r7, r3
   15580:	2100      	movs	r1, #0
   15582:	5e5b      	ldrsh	r3, [r3, r1]
   15584:	4313      	orrs	r3, r2
   15586:	b21a      	sxth	r2, r3
   15588:	231c      	movs	r3, #28
   1558a:	18fb      	adds	r3, r7, r3
   1558c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   1558e:	69bb      	ldr	r3, [r7, #24]
   15590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15592:	1c5a      	adds	r2, r3, #1
   15594:	69bb      	ldr	r3, [r7, #24]
   15596:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   15598:	231c      	movs	r3, #28
   1559a:	18fb      	adds	r3, r7, r3
   1559c:	881b      	ldrh	r3, [r3, #0]
   1559e:	05db      	lsls	r3, r3, #23
   155a0:	0ddb      	lsrs	r3, r3, #23
   155a2:	b29a      	uxth	r2, r3
   155a4:	697b      	ldr	r3, [r7, #20]
   155a6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   155a8:	69bb      	ldr	r3, [r7, #24]
   155aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   155ac:	b29b      	uxth	r3, r3
   155ae:	3b01      	subs	r3, #1
   155b0:	b29b      	uxth	r3, r3
   155b2:	69ba      	ldr	r2, [r7, #24]
   155b4:	1c19      	adds	r1, r3, #0
   155b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   155b8:	2b00      	cmp	r3, #0
   155ba:	d109      	bne.n	155d0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   155bc:	697b      	ldr	r3, [r7, #20]
   155be:	2201      	movs	r2, #1
   155c0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   155c2:	697b      	ldr	r3, [r7, #20]
   155c4:	2202      	movs	r2, #2
   155c6:	759a      	strb	r2, [r3, #22]
   155c8:	e002      	b.n	155d0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   155ca:	697b      	ldr	r3, [r7, #20]
   155cc:	2201      	movs	r2, #1
   155ce:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   155d0:	2312      	movs	r3, #18
   155d2:	18fb      	adds	r3, r7, r3
   155d4:	881b      	ldrh	r3, [r3, #0]
   155d6:	2202      	movs	r2, #2
   155d8:	4013      	ands	r3, r2
   155da:	d011      	beq.n	15600 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   155dc:	697b      	ldr	r3, [r7, #20]
   155de:	2202      	movs	r2, #2
   155e0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   155e2:	69bb      	ldr	r3, [r7, #24]
   155e4:	2233      	movs	r2, #51	; 0x33
   155e6:	2100      	movs	r1, #0
   155e8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   155ea:	2310      	movs	r3, #16
   155ec:	18fb      	adds	r3, r7, r3
   155ee:	881b      	ldrh	r3, [r3, #0]
   155f0:	2201      	movs	r2, #1
   155f2:	4013      	ands	r3, r2
   155f4:	d004      	beq.n	15600 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   155f6:	69bb      	ldr	r3, [r7, #24]
   155f8:	68db      	ldr	r3, [r3, #12]
   155fa:	69ba      	ldr	r2, [r7, #24]
   155fc:	0010      	movs	r0, r2
   155fe:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   15600:	2312      	movs	r3, #18
   15602:	18fb      	adds	r3, r7, r3
   15604:	881b      	ldrh	r3, [r3, #0]
   15606:	2204      	movs	r2, #4
   15608:	4013      	ands	r3, r2
   1560a:	d100      	bne.n	1560e <_usart_interrupt_handler+0x132>
   1560c:	e0bd      	b.n	1578a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   1560e:	69bb      	ldr	r3, [r7, #24]
   15610:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   15612:	b29b      	uxth	r3, r3
   15614:	2b00      	cmp	r3, #0
   15616:	d100      	bne.n	1561a <_usart_interrupt_handler+0x13e>
   15618:	e0b4      	b.n	15784 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1561a:	697b      	ldr	r3, [r7, #20]
   1561c:	8b5b      	ldrh	r3, [r3, #26]
   1561e:	b29b      	uxth	r3, r3
   15620:	b2da      	uxtb	r2, r3
   15622:	231f      	movs	r3, #31
   15624:	18fb      	adds	r3, r7, r3
   15626:	213f      	movs	r1, #63	; 0x3f
   15628:	400a      	ands	r2, r1
   1562a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   1562c:	231f      	movs	r3, #31
   1562e:	18fb      	adds	r3, r7, r3
   15630:	781b      	ldrb	r3, [r3, #0]
   15632:	2208      	movs	r2, #8
   15634:	4013      	ands	r3, r2
   15636:	d007      	beq.n	15648 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   15638:	231f      	movs	r3, #31
   1563a:	18fb      	adds	r3, r7, r3
   1563c:	221f      	movs	r2, #31
   1563e:	18ba      	adds	r2, r7, r2
   15640:	7812      	ldrb	r2, [r2, #0]
   15642:	2108      	movs	r1, #8
   15644:	438a      	bics	r2, r1
   15646:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   15648:	231f      	movs	r3, #31
   1564a:	18fb      	adds	r3, r7, r3
   1564c:	781b      	ldrb	r3, [r3, #0]
   1564e:	2b00      	cmp	r3, #0
   15650:	d050      	beq.n	156f4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   15652:	231f      	movs	r3, #31
   15654:	18fb      	adds	r3, r7, r3
   15656:	781b      	ldrb	r3, [r3, #0]
   15658:	2202      	movs	r2, #2
   1565a:	4013      	ands	r3, r2
   1565c:	d007      	beq.n	1566e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   1565e:	69bb      	ldr	r3, [r7, #24]
   15660:	2232      	movs	r2, #50	; 0x32
   15662:	211a      	movs	r1, #26
   15664:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   15666:	697b      	ldr	r3, [r7, #20]
   15668:	2202      	movs	r2, #2
   1566a:	835a      	strh	r2, [r3, #26]
   1566c:	e036      	b.n	156dc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1566e:	231f      	movs	r3, #31
   15670:	18fb      	adds	r3, r7, r3
   15672:	781b      	ldrb	r3, [r3, #0]
   15674:	2204      	movs	r2, #4
   15676:	4013      	ands	r3, r2
   15678:	d007      	beq.n	1568a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   1567a:	69bb      	ldr	r3, [r7, #24]
   1567c:	2232      	movs	r2, #50	; 0x32
   1567e:	211e      	movs	r1, #30
   15680:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   15682:	697b      	ldr	r3, [r7, #20]
   15684:	2204      	movs	r2, #4
   15686:	835a      	strh	r2, [r3, #26]
   15688:	e028      	b.n	156dc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1568a:	231f      	movs	r3, #31
   1568c:	18fb      	adds	r3, r7, r3
   1568e:	781b      	ldrb	r3, [r3, #0]
   15690:	2201      	movs	r2, #1
   15692:	4013      	ands	r3, r2
   15694:	d007      	beq.n	156a6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   15696:	69bb      	ldr	r3, [r7, #24]
   15698:	2232      	movs	r2, #50	; 0x32
   1569a:	2113      	movs	r1, #19
   1569c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1569e:	697b      	ldr	r3, [r7, #20]
   156a0:	2201      	movs	r2, #1
   156a2:	835a      	strh	r2, [r3, #26]
   156a4:	e01a      	b.n	156dc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   156a6:	231f      	movs	r3, #31
   156a8:	18fb      	adds	r3, r7, r3
   156aa:	781b      	ldrb	r3, [r3, #0]
   156ac:	2210      	movs	r2, #16
   156ae:	4013      	ands	r3, r2
   156b0:	d007      	beq.n	156c2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   156b2:	69bb      	ldr	r3, [r7, #24]
   156b4:	2232      	movs	r2, #50	; 0x32
   156b6:	2142      	movs	r1, #66	; 0x42
   156b8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   156ba:	697b      	ldr	r3, [r7, #20]
   156bc:	2210      	movs	r2, #16
   156be:	835a      	strh	r2, [r3, #26]
   156c0:	e00c      	b.n	156dc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   156c2:	231f      	movs	r3, #31
   156c4:	18fb      	adds	r3, r7, r3
   156c6:	781b      	ldrb	r3, [r3, #0]
   156c8:	2220      	movs	r2, #32
   156ca:	4013      	ands	r3, r2
   156cc:	d006      	beq.n	156dc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   156ce:	69bb      	ldr	r3, [r7, #24]
   156d0:	2232      	movs	r2, #50	; 0x32
   156d2:	2141      	movs	r1, #65	; 0x41
   156d4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   156d6:	697b      	ldr	r3, [r7, #20]
   156d8:	2220      	movs	r2, #32
   156da:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   156dc:	2310      	movs	r3, #16
   156de:	18fb      	adds	r3, r7, r3
   156e0:	881b      	ldrh	r3, [r3, #0]
   156e2:	2204      	movs	r2, #4
   156e4:	4013      	ands	r3, r2
				if (callback_status
   156e6:	d050      	beq.n	1578a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   156e8:	69bb      	ldr	r3, [r7, #24]
   156ea:	695b      	ldr	r3, [r3, #20]
   156ec:	69ba      	ldr	r2, [r7, #24]
   156ee:	0010      	movs	r0, r2
   156f0:	4798      	blx	r3
   156f2:	e04a      	b.n	1578a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   156f4:	697b      	ldr	r3, [r7, #20]
   156f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   156f8:	b29a      	uxth	r2, r3
   156fa:	230e      	movs	r3, #14
   156fc:	18fb      	adds	r3, r7, r3
   156fe:	05d2      	lsls	r2, r2, #23
   15700:	0dd2      	lsrs	r2, r2, #23
   15702:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   15704:	69bb      	ldr	r3, [r7, #24]
   15706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15708:	220e      	movs	r2, #14
   1570a:	18ba      	adds	r2, r7, r2
   1570c:	8812      	ldrh	r2, [r2, #0]
   1570e:	b2d2      	uxtb	r2, r2
   15710:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   15712:	69bb      	ldr	r3, [r7, #24]
   15714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15716:	1c5a      	adds	r2, r3, #1
   15718:	69bb      	ldr	r3, [r7, #24]
   1571a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1571c:	69bb      	ldr	r3, [r7, #24]
   1571e:	795b      	ldrb	r3, [r3, #5]
   15720:	2b01      	cmp	r3, #1
   15722:	d10d      	bne.n	15740 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   15724:	69bb      	ldr	r3, [r7, #24]
   15726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15728:	220e      	movs	r2, #14
   1572a:	18ba      	adds	r2, r7, r2
   1572c:	8812      	ldrh	r2, [r2, #0]
   1572e:	0a12      	lsrs	r2, r2, #8
   15730:	b292      	uxth	r2, r2
   15732:	b2d2      	uxtb	r2, r2
   15734:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   15736:	69bb      	ldr	r3, [r7, #24]
   15738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1573a:	1c5a      	adds	r2, r3, #1
   1573c:	69bb      	ldr	r3, [r7, #24]
   1573e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   15740:	69bb      	ldr	r3, [r7, #24]
   15742:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   15744:	b29b      	uxth	r3, r3
   15746:	3b01      	subs	r3, #1
   15748:	b29b      	uxth	r3, r3
   1574a:	69ba      	ldr	r2, [r7, #24]
   1574c:	1c19      	adds	r1, r3, #0
   1574e:	8591      	strh	r1, [r2, #44]	; 0x2c
   15750:	2b00      	cmp	r3, #0
   15752:	d11a      	bne.n	1578a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   15754:	697b      	ldr	r3, [r7, #20]
   15756:	2204      	movs	r2, #4
   15758:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   1575a:	69bb      	ldr	r3, [r7, #24]
   1575c:	2232      	movs	r2, #50	; 0x32
   1575e:	2100      	movs	r1, #0
   15760:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   15762:	2310      	movs	r3, #16
   15764:	18fb      	adds	r3, r7, r3
   15766:	881b      	ldrh	r3, [r3, #0]
   15768:	2202      	movs	r2, #2
   1576a:	4013      	ands	r3, r2
					if (callback_status
   1576c:	d00d      	beq.n	1578a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   1576e:	69bb      	ldr	r3, [r7, #24]
   15770:	691b      	ldr	r3, [r3, #16]
   15772:	69ba      	ldr	r2, [r7, #24]
   15774:	0010      	movs	r0, r2
   15776:	4798      	blx	r3
   15778:	e007      	b.n	1578a <_usart_interrupt_handler+0x2ae>
   1577a:	46c0      	nop			; (mov r8, r8)
   1577c:	20005a0c 	.word	0x20005a0c
   15780:	000152bd 	.word	0x000152bd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   15784:	697b      	ldr	r3, [r7, #20]
   15786:	2204      	movs	r2, #4
   15788:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   1578a:	2312      	movs	r3, #18
   1578c:	18fb      	adds	r3, r7, r3
   1578e:	881b      	ldrh	r3, [r3, #0]
   15790:	2210      	movs	r2, #16
   15792:	4013      	ands	r3, r2
   15794:	d010      	beq.n	157b8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   15796:	697b      	ldr	r3, [r7, #20]
   15798:	2210      	movs	r2, #16
   1579a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   1579c:	697b      	ldr	r3, [r7, #20]
   1579e:	2210      	movs	r2, #16
   157a0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   157a2:	2310      	movs	r3, #16
   157a4:	18fb      	adds	r3, r7, r3
   157a6:	881b      	ldrh	r3, [r3, #0]
   157a8:	2210      	movs	r2, #16
   157aa:	4013      	ands	r3, r2
   157ac:	d004      	beq.n	157b8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   157ae:	69bb      	ldr	r3, [r7, #24]
   157b0:	69db      	ldr	r3, [r3, #28]
   157b2:	69ba      	ldr	r2, [r7, #24]
   157b4:	0010      	movs	r0, r2
   157b6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   157b8:	2312      	movs	r3, #18
   157ba:	18fb      	adds	r3, r7, r3
   157bc:	881b      	ldrh	r3, [r3, #0]
   157be:	2220      	movs	r2, #32
   157c0:	4013      	ands	r3, r2
   157c2:	d010      	beq.n	157e6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   157c4:	697b      	ldr	r3, [r7, #20]
   157c6:	2220      	movs	r2, #32
   157c8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   157ca:	697b      	ldr	r3, [r7, #20]
   157cc:	2220      	movs	r2, #32
   157ce:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   157d0:	2310      	movs	r3, #16
   157d2:	18fb      	adds	r3, r7, r3
   157d4:	881b      	ldrh	r3, [r3, #0]
   157d6:	2208      	movs	r2, #8
   157d8:	4013      	ands	r3, r2
   157da:	d004      	beq.n	157e6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   157dc:	69bb      	ldr	r3, [r7, #24]
   157de:	699b      	ldr	r3, [r3, #24]
   157e0:	69ba      	ldr	r2, [r7, #24]
   157e2:	0010      	movs	r0, r2
   157e4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   157e6:	2312      	movs	r3, #18
   157e8:	18fb      	adds	r3, r7, r3
   157ea:	881b      	ldrh	r3, [r3, #0]
   157ec:	2208      	movs	r2, #8
   157ee:	4013      	ands	r3, r2
   157f0:	d010      	beq.n	15814 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   157f2:	697b      	ldr	r3, [r7, #20]
   157f4:	2208      	movs	r2, #8
   157f6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   157f8:	697b      	ldr	r3, [r7, #20]
   157fa:	2208      	movs	r2, #8
   157fc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   157fe:	2310      	movs	r3, #16
   15800:	18fb      	adds	r3, r7, r3
   15802:	881b      	ldrh	r3, [r3, #0]
   15804:	2220      	movs	r2, #32
   15806:	4013      	ands	r3, r2
   15808:	d004      	beq.n	15814 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   1580a:	69bb      	ldr	r3, [r7, #24]
   1580c:	6a1b      	ldr	r3, [r3, #32]
   1580e:	69ba      	ldr	r2, [r7, #24]
   15810:	0010      	movs	r0, r2
   15812:	4798      	blx	r3
		}
	}
#endif
}
   15814:	46c0      	nop			; (mov r8, r8)
   15816:	46bd      	mov	sp, r7
   15818:	b008      	add	sp, #32
   1581a:	bd80      	pop	{r7, pc}

0001581c <system_gclk_gen_get_config_defaults>:
{
   1581c:	b580      	push	{r7, lr}
   1581e:	b082      	sub	sp, #8
   15820:	af00      	add	r7, sp, #0
   15822:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   15824:	687b      	ldr	r3, [r7, #4]
   15826:	2201      	movs	r2, #1
   15828:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   1582a:	687b      	ldr	r3, [r7, #4]
   1582c:	2200      	movs	r2, #0
   1582e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   15830:	687b      	ldr	r3, [r7, #4]
   15832:	2206      	movs	r2, #6
   15834:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   15836:	687b      	ldr	r3, [r7, #4]
   15838:	2200      	movs	r2, #0
   1583a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   1583c:	687b      	ldr	r3, [r7, #4]
   1583e:	2200      	movs	r2, #0
   15840:	725a      	strb	r2, [r3, #9]
}
   15842:	46c0      	nop			; (mov r8, r8)
   15844:	46bd      	mov	sp, r7
   15846:	b002      	add	sp, #8
   15848:	bd80      	pop	{r7, pc}

0001584a <system_gclk_chan_get_config_defaults>:
{
   1584a:	b580      	push	{r7, lr}
   1584c:	b082      	sub	sp, #8
   1584e:	af00      	add	r7, sp, #0
   15850:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   15852:	687b      	ldr	r3, [r7, #4]
   15854:	2200      	movs	r2, #0
   15856:	701a      	strb	r2, [r3, #0]
}
   15858:	46c0      	nop			; (mov r8, r8)
   1585a:	46bd      	mov	sp, r7
   1585c:	b002      	add	sp, #8
   1585e:	bd80      	pop	{r7, pc}

00015860 <system_clock_source_osc8m_get_config_defaults>:
{
   15860:	b580      	push	{r7, lr}
   15862:	b082      	sub	sp, #8
   15864:	af00      	add	r7, sp, #0
   15866:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   15868:	687b      	ldr	r3, [r7, #4]
   1586a:	2203      	movs	r2, #3
   1586c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   1586e:	687b      	ldr	r3, [r7, #4]
   15870:	2200      	movs	r2, #0
   15872:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   15874:	687b      	ldr	r3, [r7, #4]
   15876:	2201      	movs	r2, #1
   15878:	709a      	strb	r2, [r3, #2]
}
   1587a:	46c0      	nop			; (mov r8, r8)
   1587c:	46bd      	mov	sp, r7
   1587e:	b002      	add	sp, #8
   15880:	bd80      	pop	{r7, pc}
	...

00015884 <system_cpu_clock_set_divider>:
{
   15884:	b580      	push	{r7, lr}
   15886:	b082      	sub	sp, #8
   15888:	af00      	add	r7, sp, #0
   1588a:	0002      	movs	r2, r0
   1588c:	1dfb      	adds	r3, r7, #7
   1588e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   15890:	4a03      	ldr	r2, [pc, #12]	; (158a0 <system_cpu_clock_set_divider+0x1c>)
   15892:	1dfb      	adds	r3, r7, #7
   15894:	781b      	ldrb	r3, [r3, #0]
   15896:	7213      	strb	r3, [r2, #8]
}
   15898:	46c0      	nop			; (mov r8, r8)
   1589a:	46bd      	mov	sp, r7
   1589c:	b002      	add	sp, #8
   1589e:	bd80      	pop	{r7, pc}
   158a0:	40000400 	.word	0x40000400

000158a4 <system_apb_clock_set_divider>:
{
   158a4:	b580      	push	{r7, lr}
   158a6:	b082      	sub	sp, #8
   158a8:	af00      	add	r7, sp, #0
   158aa:	0002      	movs	r2, r0
   158ac:	1dfb      	adds	r3, r7, #7
   158ae:	701a      	strb	r2, [r3, #0]
   158b0:	1dbb      	adds	r3, r7, #6
   158b2:	1c0a      	adds	r2, r1, #0
   158b4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   158b6:	1dfb      	adds	r3, r7, #7
   158b8:	781b      	ldrb	r3, [r3, #0]
   158ba:	2b01      	cmp	r3, #1
   158bc:	d008      	beq.n	158d0 <system_apb_clock_set_divider+0x2c>
   158be:	2b02      	cmp	r3, #2
   158c0:	d00b      	beq.n	158da <system_apb_clock_set_divider+0x36>
   158c2:	2b00      	cmp	r3, #0
   158c4:	d10e      	bne.n	158e4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   158c6:	4a0b      	ldr	r2, [pc, #44]	; (158f4 <system_apb_clock_set_divider+0x50>)
   158c8:	1dbb      	adds	r3, r7, #6
   158ca:	781b      	ldrb	r3, [r3, #0]
   158cc:	7253      	strb	r3, [r2, #9]
			break;
   158ce:	e00b      	b.n	158e8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   158d0:	4a08      	ldr	r2, [pc, #32]	; (158f4 <system_apb_clock_set_divider+0x50>)
   158d2:	1dbb      	adds	r3, r7, #6
   158d4:	781b      	ldrb	r3, [r3, #0]
   158d6:	7293      	strb	r3, [r2, #10]
			break;
   158d8:	e006      	b.n	158e8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   158da:	4a06      	ldr	r2, [pc, #24]	; (158f4 <system_apb_clock_set_divider+0x50>)
   158dc:	1dbb      	adds	r3, r7, #6
   158de:	781b      	ldrb	r3, [r3, #0]
   158e0:	72d3      	strb	r3, [r2, #11]
			break;
   158e2:	e001      	b.n	158e8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   158e4:	2317      	movs	r3, #23
   158e6:	e000      	b.n	158ea <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   158e8:	2300      	movs	r3, #0
}
   158ea:	0018      	movs	r0, r3
   158ec:	46bd      	mov	sp, r7
   158ee:	b002      	add	sp, #8
   158f0:	bd80      	pop	{r7, pc}
   158f2:	46c0      	nop			; (mov r8, r8)
   158f4:	40000400 	.word	0x40000400

000158f8 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   158f8:	b580      	push	{r7, lr}
   158fa:	b082      	sub	sp, #8
   158fc:	af00      	add	r7, sp, #0
   158fe:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   15900:	687b      	ldr	r3, [r7, #4]
   15902:	2201      	movs	r2, #1
   15904:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   15906:	687b      	ldr	r3, [r7, #4]
   15908:	2200      	movs	r2, #0
   1590a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   1590c:	687b      	ldr	r3, [r7, #4]
   1590e:	2200      	movs	r2, #0
   15910:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   15912:	687b      	ldr	r3, [r7, #4]
   15914:	2200      	movs	r2, #0
   15916:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   15918:	687b      	ldr	r3, [r7, #4]
   1591a:	2200      	movs	r2, #0
   1591c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   1591e:	687b      	ldr	r3, [r7, #4]
   15920:	4a0a      	ldr	r2, [pc, #40]	; (1594c <system_clock_source_dpll_get_config_defaults+0x54>)
   15922:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   15924:	687b      	ldr	r3, [r7, #4]
   15926:	2280      	movs	r2, #128	; 0x80
   15928:	0212      	lsls	r2, r2, #8
   1592a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   1592c:	687b      	ldr	r3, [r7, #4]
   1592e:	2201      	movs	r2, #1
   15930:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   15932:	687b      	ldr	r3, [r7, #4]
   15934:	2200      	movs	r2, #0
   15936:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   15938:	687b      	ldr	r3, [r7, #4]
   1593a:	2200      	movs	r2, #0
   1593c:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   1593e:	687b      	ldr	r3, [r7, #4]
   15940:	2200      	movs	r2, #0
   15942:	749a      	strb	r2, [r3, #18]
};
   15944:	46c0      	nop			; (mov r8, r8)
   15946:	46bd      	mov	sp, r7
   15948:	b002      	add	sp, #8
   1594a:	bd80      	pop	{r7, pc}
   1594c:	02dc6c00 	.word	0x02dc6c00

00015950 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   15950:	b580      	push	{r7, lr}
   15952:	b082      	sub	sp, #8
   15954:	af00      	add	r7, sp, #0
   15956:	0002      	movs	r2, r0
   15958:	1dfb      	adds	r3, r7, #7
   1595a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   1595c:	4a08      	ldr	r2, [pc, #32]	; (15980 <system_flash_set_waitstates+0x30>)
   1595e:	1dfb      	adds	r3, r7, #7
   15960:	781b      	ldrb	r3, [r3, #0]
   15962:	210f      	movs	r1, #15
   15964:	400b      	ands	r3, r1
   15966:	b2d9      	uxtb	r1, r3
   15968:	6853      	ldr	r3, [r2, #4]
   1596a:	200f      	movs	r0, #15
   1596c:	4001      	ands	r1, r0
   1596e:	0049      	lsls	r1, r1, #1
   15970:	201e      	movs	r0, #30
   15972:	4383      	bics	r3, r0
   15974:	430b      	orrs	r3, r1
   15976:	6053      	str	r3, [r2, #4]
}
   15978:	46c0      	nop			; (mov r8, r8)
   1597a:	46bd      	mov	sp, r7
   1597c:	b002      	add	sp, #8
   1597e:	bd80      	pop	{r7, pc}
   15980:	41004000 	.word	0x41004000

00015984 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   15984:	b580      	push	{r7, lr}
   15986:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   15988:	46c0      	nop			; (mov r8, r8)
   1598a:	4b04      	ldr	r3, [pc, #16]	; (1599c <_system_dfll_wait_for_sync+0x18>)
   1598c:	68db      	ldr	r3, [r3, #12]
   1598e:	2210      	movs	r2, #16
   15990:	4013      	ands	r3, r2
   15992:	d0fa      	beq.n	1598a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   15994:	46c0      	nop			; (mov r8, r8)
   15996:	46bd      	mov	sp, r7
   15998:	bd80      	pop	{r7, pc}
   1599a:	46c0      	nop			; (mov r8, r8)
   1599c:	40000800 	.word	0x40000800

000159a0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   159a0:	b580      	push	{r7, lr}
   159a2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   159a4:	4b0c      	ldr	r3, [pc, #48]	; (159d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   159a6:	2202      	movs	r2, #2
   159a8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   159aa:	4b0c      	ldr	r3, [pc, #48]	; (159dc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   159ac:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   159ae:	4a0a      	ldr	r2, [pc, #40]	; (159d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   159b0:	4b0b      	ldr	r3, [pc, #44]	; (159e0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   159b2:	689b      	ldr	r3, [r3, #8]
   159b4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   159b6:	4a08      	ldr	r2, [pc, #32]	; (159d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   159b8:	4b09      	ldr	r3, [pc, #36]	; (159e0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   159ba:	685b      	ldr	r3, [r3, #4]
   159bc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   159be:	4b06      	ldr	r3, [pc, #24]	; (159d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   159c0:	2200      	movs	r2, #0
   159c2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   159c4:	4b05      	ldr	r3, [pc, #20]	; (159dc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   159c6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   159c8:	4a03      	ldr	r2, [pc, #12]	; (159d8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   159ca:	4b05      	ldr	r3, [pc, #20]	; (159e0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   159cc:	681b      	ldr	r3, [r3, #0]
   159ce:	b29b      	uxth	r3, r3
   159d0:	8493      	strh	r3, [r2, #36]	; 0x24
}
   159d2:	46c0      	nop			; (mov r8, r8)
   159d4:	46bd      	mov	sp, r7
   159d6:	bd80      	pop	{r7, pc}
   159d8:	40000800 	.word	0x40000800
   159dc:	00015985 	.word	0x00015985
   159e0:	20004154 	.word	0x20004154

000159e4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   159e4:	b580      	push	{r7, lr}
   159e6:	b082      	sub	sp, #8
   159e8:	af00      	add	r7, sp, #0
   159ea:	0002      	movs	r2, r0
   159ec:	1dfb      	adds	r3, r7, #7
   159ee:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   159f0:	1dfb      	adds	r3, r7, #7
   159f2:	781b      	ldrb	r3, [r3, #0]
   159f4:	2b08      	cmp	r3, #8
   159f6:	d841      	bhi.n	15a7c <system_clock_source_get_hz+0x98>
   159f8:	009a      	lsls	r2, r3, #2
   159fa:	4b23      	ldr	r3, [pc, #140]	; (15a88 <system_clock_source_get_hz+0xa4>)
   159fc:	18d3      	adds	r3, r2, r3
   159fe:	681b      	ldr	r3, [r3, #0]
   15a00:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   15a02:	4b22      	ldr	r3, [pc, #136]	; (15a8c <system_clock_source_get_hz+0xa8>)
   15a04:	691b      	ldr	r3, [r3, #16]
   15a06:	e03a      	b.n	15a7e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   15a08:	4b21      	ldr	r3, [pc, #132]	; (15a90 <system_clock_source_get_hz+0xac>)
   15a0a:	6a1b      	ldr	r3, [r3, #32]
   15a0c:	059b      	lsls	r3, r3, #22
   15a0e:	0f9b      	lsrs	r3, r3, #30
   15a10:	b2db      	uxtb	r3, r3
   15a12:	001a      	movs	r2, r3
   15a14:	4b1f      	ldr	r3, [pc, #124]	; (15a94 <system_clock_source_get_hz+0xb0>)
   15a16:	40d3      	lsrs	r3, r2
   15a18:	e031      	b.n	15a7e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   15a1a:	2380      	movs	r3, #128	; 0x80
   15a1c:	021b      	lsls	r3, r3, #8
   15a1e:	e02e      	b.n	15a7e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   15a20:	2380      	movs	r3, #128	; 0x80
   15a22:	021b      	lsls	r3, r3, #8
   15a24:	e02b      	b.n	15a7e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   15a26:	4b19      	ldr	r3, [pc, #100]	; (15a8c <system_clock_source_get_hz+0xa8>)
   15a28:	695b      	ldr	r3, [r3, #20]
   15a2a:	e028      	b.n	15a7e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   15a2c:	4b17      	ldr	r3, [pc, #92]	; (15a8c <system_clock_source_get_hz+0xa8>)
   15a2e:	681b      	ldr	r3, [r3, #0]
   15a30:	2202      	movs	r2, #2
   15a32:	4013      	ands	r3, r2
   15a34:	d101      	bne.n	15a3a <system_clock_source_get_hz+0x56>
			return 0;
   15a36:	2300      	movs	r3, #0
   15a38:	e021      	b.n	15a7e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   15a3a:	4b17      	ldr	r3, [pc, #92]	; (15a98 <system_clock_source_get_hz+0xb4>)
   15a3c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   15a3e:	4b13      	ldr	r3, [pc, #76]	; (15a8c <system_clock_source_get_hz+0xa8>)
   15a40:	681b      	ldr	r3, [r3, #0]
   15a42:	2224      	movs	r2, #36	; 0x24
   15a44:	4013      	ands	r3, r2
   15a46:	2b04      	cmp	r3, #4
   15a48:	d109      	bne.n	15a5e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   15a4a:	2000      	movs	r0, #0
   15a4c:	4b13      	ldr	r3, [pc, #76]	; (15a9c <system_clock_source_get_hz+0xb8>)
   15a4e:	4798      	blx	r3
   15a50:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   15a52:	4b0e      	ldr	r3, [pc, #56]	; (15a8c <system_clock_source_get_hz+0xa8>)
   15a54:	689b      	ldr	r3, [r3, #8]
   15a56:	041b      	lsls	r3, r3, #16
   15a58:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   15a5a:	4353      	muls	r3, r2
   15a5c:	e00f      	b.n	15a7e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   15a5e:	4b10      	ldr	r3, [pc, #64]	; (15aa0 <system_clock_source_get_hz+0xbc>)
   15a60:	e00d      	b.n	15a7e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   15a62:	4a0b      	ldr	r2, [pc, #44]	; (15a90 <system_clock_source_get_hz+0xac>)
   15a64:	2350      	movs	r3, #80	; 0x50
   15a66:	5cd3      	ldrb	r3, [r2, r3]
   15a68:	b2db      	uxtb	r3, r3
   15a6a:	001a      	movs	r2, r3
   15a6c:	2304      	movs	r3, #4
   15a6e:	4013      	ands	r3, r2
   15a70:	d101      	bne.n	15a76 <system_clock_source_get_hz+0x92>
			return 0;
   15a72:	2300      	movs	r3, #0
   15a74:	e003      	b.n	15a7e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   15a76:	4b05      	ldr	r3, [pc, #20]	; (15a8c <system_clock_source_get_hz+0xa8>)
   15a78:	68db      	ldr	r3, [r3, #12]
   15a7a:	e000      	b.n	15a7e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   15a7c:	2300      	movs	r3, #0
	}
}
   15a7e:	0018      	movs	r0, r3
   15a80:	46bd      	mov	sp, r7
   15a82:	b002      	add	sp, #8
   15a84:	bd80      	pop	{r7, pc}
   15a86:	46c0      	nop			; (mov r8, r8)
   15a88:	00026498 	.word	0x00026498
   15a8c:	20004154 	.word	0x20004154
   15a90:	40000800 	.word	0x40000800
   15a94:	007a1200 	.word	0x007a1200
   15a98:	00015985 	.word	0x00015985
   15a9c:	00016481 	.word	0x00016481
   15aa0:	02dc6c00 	.word	0x02dc6c00

00015aa4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   15aa4:	b580      	push	{r7, lr}
   15aa6:	b084      	sub	sp, #16
   15aa8:	af00      	add	r7, sp, #0
   15aaa:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   15aac:	4b1a      	ldr	r3, [pc, #104]	; (15b18 <system_clock_source_osc8m_set_config+0x74>)
   15aae:	6a1b      	ldr	r3, [r3, #32]
   15ab0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   15ab2:	687b      	ldr	r3, [r7, #4]
   15ab4:	781b      	ldrb	r3, [r3, #0]
   15ab6:	1c1a      	adds	r2, r3, #0
   15ab8:	2303      	movs	r3, #3
   15aba:	4013      	ands	r3, r2
   15abc:	b2da      	uxtb	r2, r3
   15abe:	230d      	movs	r3, #13
   15ac0:	18fb      	adds	r3, r7, r3
   15ac2:	2103      	movs	r1, #3
   15ac4:	400a      	ands	r2, r1
   15ac6:	0010      	movs	r0, r2
   15ac8:	781a      	ldrb	r2, [r3, #0]
   15aca:	2103      	movs	r1, #3
   15acc:	438a      	bics	r2, r1
   15ace:	1c11      	adds	r1, r2, #0
   15ad0:	1c02      	adds	r2, r0, #0
   15ad2:	430a      	orrs	r2, r1
   15ad4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   15ad6:	687b      	ldr	r3, [r7, #4]
   15ad8:	789a      	ldrb	r2, [r3, #2]
   15ada:	230c      	movs	r3, #12
   15adc:	18fb      	adds	r3, r7, r3
   15ade:	01d0      	lsls	r0, r2, #7
   15ae0:	781a      	ldrb	r2, [r3, #0]
   15ae2:	217f      	movs	r1, #127	; 0x7f
   15ae4:	400a      	ands	r2, r1
   15ae6:	1c11      	adds	r1, r2, #0
   15ae8:	1c02      	adds	r2, r0, #0
   15aea:	430a      	orrs	r2, r1
   15aec:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   15aee:	687b      	ldr	r3, [r7, #4]
   15af0:	785a      	ldrb	r2, [r3, #1]
   15af2:	230c      	movs	r3, #12
   15af4:	18fb      	adds	r3, r7, r3
   15af6:	2101      	movs	r1, #1
   15af8:	400a      	ands	r2, r1
   15afa:	0190      	lsls	r0, r2, #6
   15afc:	781a      	ldrb	r2, [r3, #0]
   15afe:	2140      	movs	r1, #64	; 0x40
   15b00:	438a      	bics	r2, r1
   15b02:	1c11      	adds	r1, r2, #0
   15b04:	1c02      	adds	r2, r0, #0
   15b06:	430a      	orrs	r2, r1
   15b08:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   15b0a:	4b03      	ldr	r3, [pc, #12]	; (15b18 <system_clock_source_osc8m_set_config+0x74>)
   15b0c:	68fa      	ldr	r2, [r7, #12]
   15b0e:	621a      	str	r2, [r3, #32]
}
   15b10:	46c0      	nop			; (mov r8, r8)
   15b12:	46bd      	mov	sp, r7
   15b14:	b004      	add	sp, #16
   15b16:	bd80      	pop	{r7, pc}
   15b18:	40000800 	.word	0x40000800

00015b1c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   15b1c:	b580      	push	{r7, lr}
   15b1e:	b086      	sub	sp, #24
   15b20:	af00      	add	r7, sp, #0
   15b22:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   15b24:	687b      	ldr	r3, [r7, #4]
   15b26:	68db      	ldr	r3, [r3, #12]
   15b28:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   15b2a:	687b      	ldr	r3, [r7, #4]
   15b2c:	7d1b      	ldrb	r3, [r3, #20]
   15b2e:	2b01      	cmp	r3, #1
   15b30:	d10a      	bne.n	15b48 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   15b32:	687b      	ldr	r3, [r7, #4]
   15b34:	8a1b      	ldrh	r3, [r3, #16]
   15b36:	3301      	adds	r3, #1
   15b38:	005b      	lsls	r3, r3, #1
   15b3a:	001a      	movs	r2, r3
   15b3c:	4b36      	ldr	r3, [pc, #216]	; (15c18 <system_clock_source_dpll_set_config+0xfc>)
   15b3e:	0011      	movs	r1, r2
   15b40:	6978      	ldr	r0, [r7, #20]
   15b42:	4798      	blx	r3
   15b44:	0003      	movs	r3, r0
   15b46:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   15b48:	687b      	ldr	r3, [r7, #4]
   15b4a:	689b      	ldr	r3, [r3, #8]
   15b4c:	011a      	lsls	r2, r3, #4
   15b4e:	4b32      	ldr	r3, [pc, #200]	; (15c18 <system_clock_source_dpll_set_config+0xfc>)
   15b50:	6979      	ldr	r1, [r7, #20]
   15b52:	0010      	movs	r0, r2
   15b54:	4798      	blx	r3
   15b56:	0003      	movs	r3, r0
   15b58:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   15b5a:	693b      	ldr	r3, [r7, #16]
   15b5c:	b2da      	uxtb	r2, r3
   15b5e:	230f      	movs	r3, #15
   15b60:	18fb      	adds	r3, r7, r3
   15b62:	210f      	movs	r1, #15
   15b64:	400a      	ands	r2, r1
   15b66:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   15b68:	693b      	ldr	r3, [r7, #16]
   15b6a:	091b      	lsrs	r3, r3, #4
   15b6c:	3b01      	subs	r3, #1
   15b6e:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   15b70:	492a      	ldr	r1, [pc, #168]	; (15c1c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   15b72:	687b      	ldr	r3, [r7, #4]
   15b74:	781b      	ldrb	r3, [r3, #0]
   15b76:	01db      	lsls	r3, r3, #7
   15b78:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   15b7a:	687b      	ldr	r3, [r7, #4]
   15b7c:	785b      	ldrb	r3, [r3, #1]
   15b7e:	019b      	lsls	r3, r3, #6
   15b80:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   15b82:	4313      	orrs	r3, r2
   15b84:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   15b86:	2344      	movs	r3, #68	; 0x44
   15b88:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   15b8a:	4b24      	ldr	r3, [pc, #144]	; (15c1c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   15b8c:	220f      	movs	r2, #15
   15b8e:	18ba      	adds	r2, r7, r2
   15b90:	7812      	ldrb	r2, [r2, #0]
   15b92:	0412      	lsls	r2, r2, #16
   15b94:	0011      	movs	r1, r2
   15b96:	22f0      	movs	r2, #240	; 0xf0
   15b98:	0312      	lsls	r2, r2, #12
   15b9a:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   15b9c:	693a      	ldr	r2, [r7, #16]
   15b9e:	0512      	lsls	r2, r2, #20
   15ba0:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   15ba2:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   15ba4:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   15ba6:	4b1d      	ldr	r3, [pc, #116]	; (15c1c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   15ba8:	687a      	ldr	r2, [r7, #4]
   15baa:	8a12      	ldrh	r2, [r2, #16]
   15bac:	0412      	lsls	r2, r2, #16
   15bae:	0011      	movs	r1, r2
   15bb0:	4a1b      	ldr	r2, [pc, #108]	; (15c20 <system_clock_source_dpll_set_config+0x104>)
   15bb2:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   15bb4:	687a      	ldr	r2, [r7, #4]
   15bb6:	7892      	ldrb	r2, [r2, #2]
   15bb8:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   15bba:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   15bbc:	687a      	ldr	r2, [r7, #4]
   15bbe:	7cd2      	ldrb	r2, [r2, #19]
   15bc0:	0212      	lsls	r2, r2, #8
   15bc2:	0010      	movs	r0, r2
   15bc4:	22e0      	movs	r2, #224	; 0xe0
   15bc6:	00d2      	lsls	r2, r2, #3
   15bc8:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   15bca:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   15bcc:	687a      	ldr	r2, [r7, #4]
   15bce:	7d12      	ldrb	r2, [r2, #20]
   15bd0:	0112      	lsls	r2, r2, #4
   15bd2:	0010      	movs	r0, r2
   15bd4:	2230      	movs	r2, #48	; 0x30
   15bd6:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   15bd8:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   15bda:	687a      	ldr	r2, [r7, #4]
   15bdc:	78d2      	ldrb	r2, [r2, #3]
   15bde:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   15be0:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   15be2:	687a      	ldr	r2, [r7, #4]
   15be4:	7912      	ldrb	r2, [r2, #4]
   15be6:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   15be8:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   15bea:	687a      	ldr	r2, [r7, #4]
   15bec:	7c92      	ldrb	r2, [r2, #18]
   15bee:	0010      	movs	r0, r2
   15bf0:	2203      	movs	r2, #3
   15bf2:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   15bf4:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   15bf6:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   15bf8:	693b      	ldr	r3, [r7, #16]
   15bfa:	3301      	adds	r3, #1
   15bfc:	011a      	lsls	r2, r3, #4
   15bfe:	230f      	movs	r3, #15
   15c00:	18fb      	adds	r3, r7, r3
   15c02:	781b      	ldrb	r3, [r3, #0]
   15c04:	18d3      	adds	r3, r2, r3
   15c06:	697a      	ldr	r2, [r7, #20]
   15c08:	4353      	muls	r3, r2
   15c0a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   15c0c:	4b05      	ldr	r3, [pc, #20]	; (15c24 <system_clock_source_dpll_set_config+0x108>)
   15c0e:	60da      	str	r2, [r3, #12]
}
   15c10:	46c0      	nop			; (mov r8, r8)
   15c12:	46bd      	mov	sp, r7
   15c14:	b006      	add	sp, #24
   15c16:	bd80      	pop	{r7, pc}
   15c18:	0001f0d1 	.word	0x0001f0d1
   15c1c:	40000800 	.word	0x40000800
   15c20:	07ff0000 	.word	0x07ff0000
   15c24:	20004154 	.word	0x20004154

00015c28 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   15c28:	b580      	push	{r7, lr}
   15c2a:	b082      	sub	sp, #8
   15c2c:	af00      	add	r7, sp, #0
   15c2e:	0002      	movs	r2, r0
   15c30:	1dfb      	adds	r3, r7, #7
   15c32:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   15c34:	1dfb      	adds	r3, r7, #7
   15c36:	781b      	ldrb	r3, [r3, #0]
   15c38:	2b08      	cmp	r3, #8
   15c3a:	d83b      	bhi.n	15cb4 <system_clock_source_enable+0x8c>
   15c3c:	009a      	lsls	r2, r3, #2
   15c3e:	4b21      	ldr	r3, [pc, #132]	; (15cc4 <system_clock_source_enable+0x9c>)
   15c40:	18d3      	adds	r3, r2, r3
   15c42:	681b      	ldr	r3, [r3, #0]
   15c44:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   15c46:	4b20      	ldr	r3, [pc, #128]	; (15cc8 <system_clock_source_enable+0xa0>)
   15c48:	4a1f      	ldr	r2, [pc, #124]	; (15cc8 <system_clock_source_enable+0xa0>)
   15c4a:	6a12      	ldr	r2, [r2, #32]
   15c4c:	2102      	movs	r1, #2
   15c4e:	430a      	orrs	r2, r1
   15c50:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   15c52:	2300      	movs	r3, #0
   15c54:	e031      	b.n	15cba <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   15c56:	4b1c      	ldr	r3, [pc, #112]	; (15cc8 <system_clock_source_enable+0xa0>)
   15c58:	4a1b      	ldr	r2, [pc, #108]	; (15cc8 <system_clock_source_enable+0xa0>)
   15c5a:	6992      	ldr	r2, [r2, #24]
   15c5c:	2102      	movs	r1, #2
   15c5e:	430a      	orrs	r2, r1
   15c60:	619a      	str	r2, [r3, #24]
		break;
   15c62:	e029      	b.n	15cb8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   15c64:	4a18      	ldr	r2, [pc, #96]	; (15cc8 <system_clock_source_enable+0xa0>)
   15c66:	4b18      	ldr	r3, [pc, #96]	; (15cc8 <system_clock_source_enable+0xa0>)
   15c68:	8a1b      	ldrh	r3, [r3, #16]
   15c6a:	b29b      	uxth	r3, r3
   15c6c:	2102      	movs	r1, #2
   15c6e:	430b      	orrs	r3, r1
   15c70:	b29b      	uxth	r3, r3
   15c72:	8213      	strh	r3, [r2, #16]
		break;
   15c74:	e020      	b.n	15cb8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   15c76:	4a14      	ldr	r2, [pc, #80]	; (15cc8 <system_clock_source_enable+0xa0>)
   15c78:	4b13      	ldr	r3, [pc, #76]	; (15cc8 <system_clock_source_enable+0xa0>)
   15c7a:	8a9b      	ldrh	r3, [r3, #20]
   15c7c:	b29b      	uxth	r3, r3
   15c7e:	2102      	movs	r1, #2
   15c80:	430b      	orrs	r3, r1
   15c82:	b29b      	uxth	r3, r3
   15c84:	8293      	strh	r3, [r2, #20]
		break;
   15c86:	e017      	b.n	15cb8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   15c88:	4b10      	ldr	r3, [pc, #64]	; (15ccc <system_clock_source_enable+0xa4>)
   15c8a:	681b      	ldr	r3, [r3, #0]
   15c8c:	2202      	movs	r2, #2
   15c8e:	431a      	orrs	r2, r3
   15c90:	4b0e      	ldr	r3, [pc, #56]	; (15ccc <system_clock_source_enable+0xa4>)
   15c92:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   15c94:	4b0e      	ldr	r3, [pc, #56]	; (15cd0 <system_clock_source_enable+0xa8>)
   15c96:	4798      	blx	r3
		break;
   15c98:	e00e      	b.n	15cb8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   15c9a:	4a0b      	ldr	r2, [pc, #44]	; (15cc8 <system_clock_source_enable+0xa0>)
   15c9c:	490a      	ldr	r1, [pc, #40]	; (15cc8 <system_clock_source_enable+0xa0>)
   15c9e:	2344      	movs	r3, #68	; 0x44
   15ca0:	5ccb      	ldrb	r3, [r1, r3]
   15ca2:	b2db      	uxtb	r3, r3
   15ca4:	2102      	movs	r1, #2
   15ca6:	430b      	orrs	r3, r1
   15ca8:	b2d9      	uxtb	r1, r3
   15caa:	2344      	movs	r3, #68	; 0x44
   15cac:	54d1      	strb	r1, [r2, r3]
		break;
   15cae:	e003      	b.n	15cb8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   15cb0:	2300      	movs	r3, #0
   15cb2:	e002      	b.n	15cba <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   15cb4:	2317      	movs	r3, #23
   15cb6:	e000      	b.n	15cba <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   15cb8:	2300      	movs	r3, #0
}
   15cba:	0018      	movs	r0, r3
   15cbc:	46bd      	mov	sp, r7
   15cbe:	b002      	add	sp, #8
   15cc0:	bd80      	pop	{r7, pc}
   15cc2:	46c0      	nop			; (mov r8, r8)
   15cc4:	000264bc 	.word	0x000264bc
   15cc8:	40000800 	.word	0x40000800
   15ccc:	20004154 	.word	0x20004154
   15cd0:	000159a1 	.word	0x000159a1

00015cd4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   15cd4:	b580      	push	{r7, lr}
   15cd6:	b084      	sub	sp, #16
   15cd8:	af00      	add	r7, sp, #0
   15cda:	0002      	movs	r2, r0
   15cdc:	1dfb      	adds	r3, r7, #7
   15cde:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   15ce0:	2300      	movs	r3, #0
   15ce2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   15ce4:	1dfb      	adds	r3, r7, #7
   15ce6:	781b      	ldrb	r3, [r3, #0]
   15ce8:	2b08      	cmp	r3, #8
   15cea:	d821      	bhi.n	15d30 <system_clock_source_is_ready+0x5c>
   15cec:	009a      	lsls	r2, r3, #2
   15cee:	4b18      	ldr	r3, [pc, #96]	; (15d50 <system_clock_source_is_ready+0x7c>)
   15cf0:	18d3      	adds	r3, r2, r3
   15cf2:	681b      	ldr	r3, [r3, #0]
   15cf4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   15cf6:	2308      	movs	r3, #8
   15cf8:	60fb      	str	r3, [r7, #12]
		break;
   15cfa:	e01b      	b.n	15d34 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   15cfc:	2304      	movs	r3, #4
   15cfe:	60fb      	str	r3, [r7, #12]
		break;
   15d00:	e018      	b.n	15d34 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   15d02:	2301      	movs	r3, #1
   15d04:	60fb      	str	r3, [r7, #12]
		break;
   15d06:	e015      	b.n	15d34 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   15d08:	2302      	movs	r3, #2
   15d0a:	60fb      	str	r3, [r7, #12]
		break;
   15d0c:	e012      	b.n	15d34 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   15d0e:	2310      	movs	r3, #16
   15d10:	60fb      	str	r3, [r7, #12]
		}
		break;
   15d12:	e00f      	b.n	15d34 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   15d14:	4a0f      	ldr	r2, [pc, #60]	; (15d54 <system_clock_source_is_ready+0x80>)
   15d16:	2350      	movs	r3, #80	; 0x50
   15d18:	5cd3      	ldrb	r3, [r2, r3]
   15d1a:	b2db      	uxtb	r3, r3
   15d1c:	001a      	movs	r2, r3
   15d1e:	2303      	movs	r3, #3
   15d20:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   15d22:	3b03      	subs	r3, #3
   15d24:	425a      	negs	r2, r3
   15d26:	4153      	adcs	r3, r2
   15d28:	b2db      	uxtb	r3, r3
   15d2a:	e00c      	b.n	15d46 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   15d2c:	2301      	movs	r3, #1
   15d2e:	e00a      	b.n	15d46 <system_clock_source_is_ready+0x72>

	default:
		return false;
   15d30:	2300      	movs	r3, #0
   15d32:	e008      	b.n	15d46 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   15d34:	4b07      	ldr	r3, [pc, #28]	; (15d54 <system_clock_source_is_ready+0x80>)
   15d36:	68db      	ldr	r3, [r3, #12]
   15d38:	68fa      	ldr	r2, [r7, #12]
   15d3a:	401a      	ands	r2, r3
   15d3c:	68fb      	ldr	r3, [r7, #12]
   15d3e:	1ad3      	subs	r3, r2, r3
   15d40:	425a      	negs	r2, r3
   15d42:	4153      	adcs	r3, r2
   15d44:	b2db      	uxtb	r3, r3
}
   15d46:	0018      	movs	r0, r3
   15d48:	46bd      	mov	sp, r7
   15d4a:	b004      	add	sp, #16
   15d4c:	bd80      	pop	{r7, pc}
   15d4e:	46c0      	nop			; (mov r8, r8)
   15d50:	000264e0 	.word	0x000264e0
   15d54:	40000800 	.word	0x40000800

00015d58 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   15d58:	b580      	push	{r7, lr}
   15d5a:	b082      	sub	sp, #8
   15d5c:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   15d5e:	003b      	movs	r3, r7
   15d60:	2203      	movs	r2, #3
   15d62:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   15d64:	2300      	movs	r3, #0
   15d66:	607b      	str	r3, [r7, #4]
   15d68:	e009      	b.n	15d7e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   15d6a:	687b      	ldr	r3, [r7, #4]
   15d6c:	b2db      	uxtb	r3, r3
   15d6e:	003a      	movs	r2, r7
   15d70:	0011      	movs	r1, r2
   15d72:	0018      	movs	r0, r3
   15d74:	4b05      	ldr	r3, [pc, #20]	; (15d8c <_switch_peripheral_gclk+0x34>)
   15d76:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   15d78:	687b      	ldr	r3, [r7, #4]
   15d7a:	3301      	adds	r3, #1
   15d7c:	607b      	str	r3, [r7, #4]
   15d7e:	687b      	ldr	r3, [r7, #4]
   15d80:	2b24      	cmp	r3, #36	; 0x24
   15d82:	d9f2      	bls.n	15d6a <_switch_peripheral_gclk+0x12>
	}
}
   15d84:	46c0      	nop			; (mov r8, r8)
   15d86:	46bd      	mov	sp, r7
   15d88:	b002      	add	sp, #8
   15d8a:	bd80      	pop	{r7, pc}
   15d8c:	0001635d 	.word	0x0001635d

00015d90 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   15d90:	b580      	push	{r7, lr}
   15d92:	b0a6      	sub	sp, #152	; 0x98
   15d94:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   15d96:	4b92      	ldr	r3, [pc, #584]	; (15fe0 <system_clock_init+0x250>)
   15d98:	22c2      	movs	r2, #194	; 0xc2
   15d9a:	00d2      	lsls	r2, r2, #3
   15d9c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   15d9e:	2003      	movs	r0, #3
   15da0:	4b90      	ldr	r3, [pc, #576]	; (15fe4 <system_clock_init+0x254>)
   15da2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   15da4:	4b90      	ldr	r3, [pc, #576]	; (15fe8 <system_clock_init+0x258>)
   15da6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   15da8:	2394      	movs	r3, #148	; 0x94
   15daa:	18fb      	adds	r3, r7, r3
   15dac:	0018      	movs	r0, r3
   15dae:	4b8f      	ldr	r3, [pc, #572]	; (15fec <system_clock_init+0x25c>)
   15db0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   15db2:	2394      	movs	r3, #148	; 0x94
   15db4:	18fb      	adds	r3, r7, r3
   15db6:	2200      	movs	r2, #0
   15db8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   15dba:	2394      	movs	r3, #148	; 0x94
   15dbc:	18fb      	adds	r3, r7, r3
   15dbe:	2201      	movs	r2, #1
   15dc0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   15dc2:	2394      	movs	r3, #148	; 0x94
   15dc4:	18fb      	adds	r3, r7, r3
   15dc6:	2200      	movs	r2, #0
   15dc8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   15dca:	2394      	movs	r3, #148	; 0x94
   15dcc:	18fb      	adds	r3, r7, r3
   15dce:	0018      	movs	r0, r3
   15dd0:	4b87      	ldr	r3, [pc, #540]	; (15ff0 <system_clock_init+0x260>)
   15dd2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   15dd4:	2006      	movs	r0, #6
   15dd6:	4b87      	ldr	r3, [pc, #540]	; (15ff4 <system_clock_init+0x264>)
   15dd8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   15dda:	4b87      	ldr	r3, [pc, #540]	; (15ff8 <system_clock_init+0x268>)
   15ddc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   15dde:	2360      	movs	r3, #96	; 0x60
   15de0:	18fb      	adds	r3, r7, r3
   15de2:	0018      	movs	r0, r3
   15de4:	4b85      	ldr	r3, [pc, #532]	; (15ffc <system_clock_init+0x26c>)
   15de6:	4798      	blx	r3
   15de8:	2360      	movs	r3, #96	; 0x60
   15dea:	18fb      	adds	r3, r7, r3
   15dec:	2206      	movs	r2, #6
   15dee:	701a      	strb	r2, [r3, #0]
   15df0:	2360      	movs	r3, #96	; 0x60
   15df2:	18fb      	adds	r3, r7, r3
   15df4:	2208      	movs	r2, #8
   15df6:	605a      	str	r2, [r3, #4]
   15df8:	2360      	movs	r3, #96	; 0x60
   15dfa:	18fb      	adds	r3, r7, r3
   15dfc:	2200      	movs	r2, #0
   15dfe:	721a      	strb	r2, [r3, #8]
   15e00:	2360      	movs	r3, #96	; 0x60
   15e02:	18fb      	adds	r3, r7, r3
   15e04:	2200      	movs	r2, #0
   15e06:	725a      	strb	r2, [r3, #9]
   15e08:	2360      	movs	r3, #96	; 0x60
   15e0a:	18fb      	adds	r3, r7, r3
   15e0c:	0019      	movs	r1, r3
   15e0e:	2001      	movs	r0, #1
   15e10:	4b7b      	ldr	r3, [pc, #492]	; (16000 <system_clock_init+0x270>)
   15e12:	4798      	blx	r3
   15e14:	2001      	movs	r0, #1
   15e16:	4b7b      	ldr	r3, [pc, #492]	; (16004 <system_clock_init+0x274>)
   15e18:	4798      	blx	r3
   15e1a:	2354      	movs	r3, #84	; 0x54
   15e1c:	18fb      	adds	r3, r7, r3
   15e1e:	0018      	movs	r0, r3
   15e20:	4b76      	ldr	r3, [pc, #472]	; (15ffc <system_clock_init+0x26c>)
   15e22:	4798      	blx	r3
   15e24:	2354      	movs	r3, #84	; 0x54
   15e26:	18fb      	adds	r3, r7, r3
   15e28:	2203      	movs	r2, #3
   15e2a:	701a      	strb	r2, [r3, #0]
   15e2c:	2354      	movs	r3, #84	; 0x54
   15e2e:	18fb      	adds	r3, r7, r3
   15e30:	2201      	movs	r2, #1
   15e32:	605a      	str	r2, [r3, #4]
   15e34:	2354      	movs	r3, #84	; 0x54
   15e36:	18fb      	adds	r3, r7, r3
   15e38:	2201      	movs	r2, #1
   15e3a:	721a      	strb	r2, [r3, #8]
   15e3c:	2354      	movs	r3, #84	; 0x54
   15e3e:	18fb      	adds	r3, r7, r3
   15e40:	2200      	movs	r2, #0
   15e42:	725a      	strb	r2, [r3, #9]
   15e44:	2354      	movs	r3, #84	; 0x54
   15e46:	18fb      	adds	r3, r7, r3
   15e48:	0019      	movs	r1, r3
   15e4a:	2002      	movs	r0, #2
   15e4c:	4b6c      	ldr	r3, [pc, #432]	; (16000 <system_clock_init+0x270>)
   15e4e:	4798      	blx	r3
   15e50:	2002      	movs	r0, #2
   15e52:	4b6c      	ldr	r3, [pc, #432]	; (16004 <system_clock_init+0x274>)
   15e54:	4798      	blx	r3
   15e56:	233c      	movs	r3, #60	; 0x3c
   15e58:	18fb      	adds	r3, r7, r3
   15e5a:	0018      	movs	r0, r3
   15e5c:	4b67      	ldr	r3, [pc, #412]	; (15ffc <system_clock_init+0x26c>)
   15e5e:	4798      	blx	r3
   15e60:	233c      	movs	r3, #60	; 0x3c
   15e62:	18fb      	adds	r3, r7, r3
   15e64:	2203      	movs	r2, #3
   15e66:	701a      	strb	r2, [r3, #0]
   15e68:	233c      	movs	r3, #60	; 0x3c
   15e6a:	18fb      	adds	r3, r7, r3
   15e6c:	2220      	movs	r2, #32
   15e6e:	605a      	str	r2, [r3, #4]
   15e70:	233c      	movs	r3, #60	; 0x3c
   15e72:	18fb      	adds	r3, r7, r3
   15e74:	2200      	movs	r2, #0
   15e76:	721a      	strb	r2, [r3, #8]
   15e78:	233c      	movs	r3, #60	; 0x3c
   15e7a:	18fb      	adds	r3, r7, r3
   15e7c:	2200      	movs	r2, #0
   15e7e:	725a      	strb	r2, [r3, #9]
   15e80:	233c      	movs	r3, #60	; 0x3c
   15e82:	18fb      	adds	r3, r7, r3
   15e84:	0019      	movs	r1, r3
   15e86:	2004      	movs	r0, #4
   15e88:	4b5d      	ldr	r3, [pc, #372]	; (16000 <system_clock_init+0x270>)
   15e8a:	4798      	blx	r3
   15e8c:	2004      	movs	r0, #4
   15e8e:	4b5d      	ldr	r3, [pc, #372]	; (16004 <system_clock_init+0x274>)
   15e90:	4798      	blx	r3
   15e92:	2330      	movs	r3, #48	; 0x30
   15e94:	18fb      	adds	r3, r7, r3
   15e96:	0018      	movs	r0, r3
   15e98:	4b58      	ldr	r3, [pc, #352]	; (15ffc <system_clock_init+0x26c>)
   15e9a:	4798      	blx	r3
   15e9c:	2330      	movs	r3, #48	; 0x30
   15e9e:	18fb      	adds	r3, r7, r3
   15ea0:	2206      	movs	r2, #6
   15ea2:	701a      	strb	r2, [r3, #0]
   15ea4:	2330      	movs	r3, #48	; 0x30
   15ea6:	18fb      	adds	r3, r7, r3
   15ea8:	2201      	movs	r2, #1
   15eaa:	605a      	str	r2, [r3, #4]
   15eac:	2330      	movs	r3, #48	; 0x30
   15eae:	18fb      	adds	r3, r7, r3
   15eb0:	2200      	movs	r2, #0
   15eb2:	721a      	strb	r2, [r3, #8]
   15eb4:	2330      	movs	r3, #48	; 0x30
   15eb6:	18fb      	adds	r3, r7, r3
   15eb8:	2200      	movs	r2, #0
   15eba:	725a      	strb	r2, [r3, #9]
   15ebc:	2330      	movs	r3, #48	; 0x30
   15ebe:	18fb      	adds	r3, r7, r3
   15ec0:	0019      	movs	r1, r3
   15ec2:	2005      	movs	r0, #5
   15ec4:	4b4e      	ldr	r3, [pc, #312]	; (16000 <system_clock_init+0x270>)
   15ec6:	4798      	blx	r3
   15ec8:	2005      	movs	r0, #5
   15eca:	4b4e      	ldr	r3, [pc, #312]	; (16004 <system_clock_init+0x274>)
   15ecc:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   15ece:	2390      	movs	r3, #144	; 0x90
   15ed0:	18fb      	adds	r3, r7, r3
   15ed2:	0018      	movs	r0, r3
   15ed4:	4b4c      	ldr	r3, [pc, #304]	; (16008 <system_clock_init+0x278>)
   15ed6:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   15ed8:	2390      	movs	r3, #144	; 0x90
   15eda:	18fb      	adds	r3, r7, r3
   15edc:	2201      	movs	r2, #1
   15ede:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   15ee0:	2390      	movs	r3, #144	; 0x90
   15ee2:	18fb      	adds	r3, r7, r3
   15ee4:	0019      	movs	r1, r3
   15ee6:	2001      	movs	r0, #1
   15ee8:	4b48      	ldr	r3, [pc, #288]	; (1600c <system_clock_init+0x27c>)
   15eea:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   15eec:	2001      	movs	r0, #1
   15eee:	4b48      	ldr	r3, [pc, #288]	; (16010 <system_clock_init+0x280>)
   15ef0:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   15ef2:	2378      	movs	r3, #120	; 0x78
   15ef4:	18fb      	adds	r3, r7, r3
   15ef6:	0018      	movs	r0, r3
   15ef8:	4b46      	ldr	r3, [pc, #280]	; (16014 <system_clock_init+0x284>)
   15efa:	4798      	blx	r3

	dpll_config.on_demand        = false;
   15efc:	2378      	movs	r3, #120	; 0x78
   15efe:	18fb      	adds	r3, r7, r3
   15f00:	2200      	movs	r2, #0
   15f02:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   15f04:	2378      	movs	r3, #120	; 0x78
   15f06:	18fb      	adds	r3, r7, r3
   15f08:	2200      	movs	r2, #0
   15f0a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   15f0c:	2378      	movs	r3, #120	; 0x78
   15f0e:	18fb      	adds	r3, r7, r3
   15f10:	2200      	movs	r2, #0
   15f12:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   15f14:	2378      	movs	r3, #120	; 0x78
   15f16:	18fb      	adds	r3, r7, r3
   15f18:	2200      	movs	r2, #0
   15f1a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   15f1c:	2378      	movs	r3, #120	; 0x78
   15f1e:	18fb      	adds	r3, r7, r3
   15f20:	2200      	movs	r2, #0
   15f22:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   15f24:	2378      	movs	r3, #120	; 0x78
   15f26:	18fb      	adds	r3, r7, r3
   15f28:	2200      	movs	r2, #0
   15f2a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   15f2c:	2378      	movs	r3, #120	; 0x78
   15f2e:	18fb      	adds	r3, r7, r3
   15f30:	2200      	movs	r2, #0
   15f32:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   15f34:	2378      	movs	r3, #120	; 0x78
   15f36:	18fb      	adds	r3, r7, r3
   15f38:	2202      	movs	r2, #2
   15f3a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   15f3c:	2378      	movs	r3, #120	; 0x78
   15f3e:	18fb      	adds	r3, r7, r3
   15f40:	4a35      	ldr	r2, [pc, #212]	; (16018 <system_clock_init+0x288>)
   15f42:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   15f44:	2378      	movs	r3, #120	; 0x78
   15f46:	18fb      	adds	r3, r7, r3
   15f48:	2201      	movs	r2, #1
   15f4a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   15f4c:	2378      	movs	r3, #120	; 0x78
   15f4e:	18fb      	adds	r3, r7, r3
   15f50:	4a32      	ldr	r2, [pc, #200]	; (1601c <system_clock_init+0x28c>)
   15f52:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   15f54:	2378      	movs	r3, #120	; 0x78
   15f56:	18fb      	adds	r3, r7, r3
   15f58:	0018      	movs	r0, r3
   15f5a:	4b31      	ldr	r3, [pc, #196]	; (16020 <system_clock_init+0x290>)
   15f5c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   15f5e:	2008      	movs	r0, #8
   15f60:	4b24      	ldr	r3, [pc, #144]	; (15ff4 <system_clock_init+0x264>)
   15f62:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   15f64:	46c0      	nop			; (mov r8, r8)
   15f66:	2008      	movs	r0, #8
   15f68:	4b2e      	ldr	r3, [pc, #184]	; (16024 <system_clock_init+0x294>)
   15f6a:	4798      	blx	r3
   15f6c:	0003      	movs	r3, r0
   15f6e:	001a      	movs	r2, r3
   15f70:	2301      	movs	r3, #1
   15f72:	4053      	eors	r3, r2
   15f74:	b2db      	uxtb	r3, r3
   15f76:	2b00      	cmp	r3, #0
   15f78:	d1f5      	bne.n	15f66 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   15f7a:	4919      	ldr	r1, [pc, #100]	; (15fe0 <system_clock_init+0x250>)
   15f7c:	2244      	movs	r2, #68	; 0x44
   15f7e:	5c8b      	ldrb	r3, [r1, r2]
   15f80:	2080      	movs	r0, #128	; 0x80
   15f82:	4240      	negs	r0, r0
   15f84:	4303      	orrs	r3, r0
   15f86:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   15f88:	2000      	movs	r0, #0
   15f8a:	4b27      	ldr	r3, [pc, #156]	; (16028 <system_clock_init+0x298>)
   15f8c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   15f8e:	2100      	movs	r1, #0
   15f90:	2000      	movs	r0, #0
   15f92:	4b26      	ldr	r3, [pc, #152]	; (1602c <system_clock_init+0x29c>)
   15f94:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   15f96:	2100      	movs	r1, #0
   15f98:	2001      	movs	r0, #1
   15f9a:	4b24      	ldr	r3, [pc, #144]	; (1602c <system_clock_init+0x29c>)
   15f9c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   15f9e:	2100      	movs	r1, #0
   15fa0:	2002      	movs	r0, #2
   15fa2:	4b22      	ldr	r3, [pc, #136]	; (1602c <system_clock_init+0x29c>)
   15fa4:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   15fa6:	003b      	movs	r3, r7
   15fa8:	0018      	movs	r0, r3
   15faa:	4b14      	ldr	r3, [pc, #80]	; (15ffc <system_clock_init+0x26c>)
   15fac:	4798      	blx	r3
   15fae:	003b      	movs	r3, r7
   15fb0:	2208      	movs	r2, #8
   15fb2:	701a      	strb	r2, [r3, #0]
   15fb4:	003b      	movs	r3, r7
   15fb6:	2201      	movs	r2, #1
   15fb8:	605a      	str	r2, [r3, #4]
   15fba:	003b      	movs	r3, r7
   15fbc:	2200      	movs	r2, #0
   15fbe:	721a      	strb	r2, [r3, #8]
   15fc0:	003b      	movs	r3, r7
   15fc2:	2201      	movs	r2, #1
   15fc4:	725a      	strb	r2, [r3, #9]
   15fc6:	003b      	movs	r3, r7
   15fc8:	0019      	movs	r1, r3
   15fca:	2000      	movs	r0, #0
   15fcc:	4b0c      	ldr	r3, [pc, #48]	; (16000 <system_clock_init+0x270>)
   15fce:	4798      	blx	r3
   15fd0:	2000      	movs	r0, #0
   15fd2:	4b0c      	ldr	r3, [pc, #48]	; (16004 <system_clock_init+0x274>)
   15fd4:	4798      	blx	r3
#endif
}
   15fd6:	46c0      	nop			; (mov r8, r8)
   15fd8:	46bd      	mov	sp, r7
   15fda:	b026      	add	sp, #152	; 0x98
   15fdc:	bd80      	pop	{r7, pc}
   15fde:	46c0      	nop			; (mov r8, r8)
   15fe0:	40000800 	.word	0x40000800
   15fe4:	00015951 	.word	0x00015951
   15fe8:	00015d59 	.word	0x00015d59
   15fec:	00015861 	.word	0x00015861
   15ff0:	00015aa5 	.word	0x00015aa5
   15ff4:	00015c29 	.word	0x00015c29
   15ff8:	000160d5 	.word	0x000160d5
   15ffc:	0001581d 	.word	0x0001581d
   16000:	00016105 	.word	0x00016105
   16004:	00016229 	.word	0x00016229
   16008:	0001584b 	.word	0x0001584b
   1600c:	0001635d 	.word	0x0001635d
   16010:	000163a1 	.word	0x000163a1
   16014:	000158f9 	.word	0x000158f9
   16018:	000f4240 	.word	0x000f4240
   1601c:	02dc6c00 	.word	0x02dc6c00
   16020:	00015b1d 	.word	0x00015b1d
   16024:	00015cd5 	.word	0x00015cd5
   16028:	00015885 	.word	0x00015885
   1602c:	000158a5 	.word	0x000158a5

00016030 <system_apb_clock_set_mask>:
{
   16030:	b580      	push	{r7, lr}
   16032:	b082      	sub	sp, #8
   16034:	af00      	add	r7, sp, #0
   16036:	0002      	movs	r2, r0
   16038:	6039      	str	r1, [r7, #0]
   1603a:	1dfb      	adds	r3, r7, #7
   1603c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1603e:	1dfb      	adds	r3, r7, #7
   16040:	781b      	ldrb	r3, [r3, #0]
   16042:	2b01      	cmp	r3, #1
   16044:	d00a      	beq.n	1605c <system_apb_clock_set_mask+0x2c>
   16046:	2b02      	cmp	r3, #2
   16048:	d00f      	beq.n	1606a <system_apb_clock_set_mask+0x3a>
   1604a:	2b00      	cmp	r3, #0
   1604c:	d114      	bne.n	16078 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1604e:	4b0e      	ldr	r3, [pc, #56]	; (16088 <system_apb_clock_set_mask+0x58>)
   16050:	4a0d      	ldr	r2, [pc, #52]	; (16088 <system_apb_clock_set_mask+0x58>)
   16052:	6991      	ldr	r1, [r2, #24]
   16054:	683a      	ldr	r2, [r7, #0]
   16056:	430a      	orrs	r2, r1
   16058:	619a      	str	r2, [r3, #24]
			break;
   1605a:	e00f      	b.n	1607c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1605c:	4b0a      	ldr	r3, [pc, #40]	; (16088 <system_apb_clock_set_mask+0x58>)
   1605e:	4a0a      	ldr	r2, [pc, #40]	; (16088 <system_apb_clock_set_mask+0x58>)
   16060:	69d1      	ldr	r1, [r2, #28]
   16062:	683a      	ldr	r2, [r7, #0]
   16064:	430a      	orrs	r2, r1
   16066:	61da      	str	r2, [r3, #28]
			break;
   16068:	e008      	b.n	1607c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1606a:	4b07      	ldr	r3, [pc, #28]	; (16088 <system_apb_clock_set_mask+0x58>)
   1606c:	4a06      	ldr	r2, [pc, #24]	; (16088 <system_apb_clock_set_mask+0x58>)
   1606e:	6a11      	ldr	r1, [r2, #32]
   16070:	683a      	ldr	r2, [r7, #0]
   16072:	430a      	orrs	r2, r1
   16074:	621a      	str	r2, [r3, #32]
			break;
   16076:	e001      	b.n	1607c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   16078:	2317      	movs	r3, #23
   1607a:	e000      	b.n	1607e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1607c:	2300      	movs	r3, #0
}
   1607e:	0018      	movs	r0, r3
   16080:	46bd      	mov	sp, r7
   16082:	b002      	add	sp, #8
   16084:	bd80      	pop	{r7, pc}
   16086:	46c0      	nop			; (mov r8, r8)
   16088:	40000400 	.word	0x40000400

0001608c <system_interrupt_enter_critical_section>:
{
   1608c:	b580      	push	{r7, lr}
   1608e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   16090:	4b02      	ldr	r3, [pc, #8]	; (1609c <system_interrupt_enter_critical_section+0x10>)
   16092:	4798      	blx	r3
}
   16094:	46c0      	nop			; (mov r8, r8)
   16096:	46bd      	mov	sp, r7
   16098:	bd80      	pop	{r7, pc}
   1609a:	46c0      	nop			; (mov r8, r8)
   1609c:	000126c9 	.word	0x000126c9

000160a0 <system_interrupt_leave_critical_section>:
{
   160a0:	b580      	push	{r7, lr}
   160a2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   160a4:	4b02      	ldr	r3, [pc, #8]	; (160b0 <system_interrupt_leave_critical_section+0x10>)
   160a6:	4798      	blx	r3
}
   160a8:	46c0      	nop			; (mov r8, r8)
   160aa:	46bd      	mov	sp, r7
   160ac:	bd80      	pop	{r7, pc}
   160ae:	46c0      	nop			; (mov r8, r8)
   160b0:	0001271d 	.word	0x0001271d

000160b4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   160b4:	b580      	push	{r7, lr}
   160b6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   160b8:	4b05      	ldr	r3, [pc, #20]	; (160d0 <system_gclk_is_syncing+0x1c>)
   160ba:	785b      	ldrb	r3, [r3, #1]
   160bc:	b2db      	uxtb	r3, r3
   160be:	b25b      	sxtb	r3, r3
   160c0:	2b00      	cmp	r3, #0
   160c2:	da01      	bge.n	160c8 <system_gclk_is_syncing+0x14>
		return true;
   160c4:	2301      	movs	r3, #1
   160c6:	e000      	b.n	160ca <system_gclk_is_syncing+0x16>
	}

	return false;
   160c8:	2300      	movs	r3, #0
}
   160ca:	0018      	movs	r0, r3
   160cc:	46bd      	mov	sp, r7
   160ce:	bd80      	pop	{r7, pc}
   160d0:	40000c00 	.word	0x40000c00

000160d4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   160d4:	b580      	push	{r7, lr}
   160d6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   160d8:	2108      	movs	r1, #8
   160da:	2000      	movs	r0, #0
   160dc:	4b07      	ldr	r3, [pc, #28]	; (160fc <system_gclk_init+0x28>)
   160de:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   160e0:	4b07      	ldr	r3, [pc, #28]	; (16100 <system_gclk_init+0x2c>)
   160e2:	2201      	movs	r2, #1
   160e4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   160e6:	46c0      	nop			; (mov r8, r8)
   160e8:	4b05      	ldr	r3, [pc, #20]	; (16100 <system_gclk_init+0x2c>)
   160ea:	781b      	ldrb	r3, [r3, #0]
   160ec:	b2db      	uxtb	r3, r3
   160ee:	001a      	movs	r2, r3
   160f0:	2301      	movs	r3, #1
   160f2:	4013      	ands	r3, r2
   160f4:	d1f8      	bne.n	160e8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   160f6:	46c0      	nop			; (mov r8, r8)
   160f8:	46bd      	mov	sp, r7
   160fa:	bd80      	pop	{r7, pc}
   160fc:	00016031 	.word	0x00016031
   16100:	40000c00 	.word	0x40000c00

00016104 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   16104:	b580      	push	{r7, lr}
   16106:	b086      	sub	sp, #24
   16108:	af00      	add	r7, sp, #0
   1610a:	0002      	movs	r2, r0
   1610c:	6039      	str	r1, [r7, #0]
   1610e:	1dfb      	adds	r3, r7, #7
   16110:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   16112:	1dfb      	adds	r3, r7, #7
   16114:	781b      	ldrb	r3, [r3, #0]
   16116:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   16118:	1dfb      	adds	r3, r7, #7
   1611a:	781b      	ldrb	r3, [r3, #0]
   1611c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1611e:	683b      	ldr	r3, [r7, #0]
   16120:	781b      	ldrb	r3, [r3, #0]
   16122:	021b      	lsls	r3, r3, #8
   16124:	001a      	movs	r2, r3
   16126:	697b      	ldr	r3, [r7, #20]
   16128:	4313      	orrs	r3, r2
   1612a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1612c:	683b      	ldr	r3, [r7, #0]
   1612e:	785b      	ldrb	r3, [r3, #1]
   16130:	2b00      	cmp	r3, #0
   16132:	d004      	beq.n	1613e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   16134:	697b      	ldr	r3, [r7, #20]
   16136:	2280      	movs	r2, #128	; 0x80
   16138:	02d2      	lsls	r2, r2, #11
   1613a:	4313      	orrs	r3, r2
   1613c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1613e:	683b      	ldr	r3, [r7, #0]
   16140:	7a5b      	ldrb	r3, [r3, #9]
   16142:	2b00      	cmp	r3, #0
   16144:	d004      	beq.n	16150 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   16146:	697b      	ldr	r3, [r7, #20]
   16148:	2280      	movs	r2, #128	; 0x80
   1614a:	0312      	lsls	r2, r2, #12
   1614c:	4313      	orrs	r3, r2
   1614e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   16150:	683b      	ldr	r3, [r7, #0]
   16152:	685b      	ldr	r3, [r3, #4]
   16154:	2b01      	cmp	r3, #1
   16156:	d92c      	bls.n	161b2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   16158:	683b      	ldr	r3, [r7, #0]
   1615a:	685a      	ldr	r2, [r3, #4]
   1615c:	683b      	ldr	r3, [r7, #0]
   1615e:	685b      	ldr	r3, [r3, #4]
   16160:	3b01      	subs	r3, #1
   16162:	4013      	ands	r3, r2
   16164:	d11a      	bne.n	1619c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   16166:	2300      	movs	r3, #0
   16168:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   1616a:	2302      	movs	r3, #2
   1616c:	60bb      	str	r3, [r7, #8]
   1616e:	e005      	b.n	1617c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   16170:	68fb      	ldr	r3, [r7, #12]
   16172:	3301      	adds	r3, #1
   16174:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   16176:	68bb      	ldr	r3, [r7, #8]
   16178:	005b      	lsls	r3, r3, #1
   1617a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   1617c:	683b      	ldr	r3, [r7, #0]
   1617e:	685a      	ldr	r2, [r3, #4]
   16180:	68bb      	ldr	r3, [r7, #8]
   16182:	429a      	cmp	r2, r3
   16184:	d8f4      	bhi.n	16170 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   16186:	68fb      	ldr	r3, [r7, #12]
   16188:	021b      	lsls	r3, r3, #8
   1618a:	693a      	ldr	r2, [r7, #16]
   1618c:	4313      	orrs	r3, r2
   1618e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   16190:	697b      	ldr	r3, [r7, #20]
   16192:	2280      	movs	r2, #128	; 0x80
   16194:	0352      	lsls	r2, r2, #13
   16196:	4313      	orrs	r3, r2
   16198:	617b      	str	r3, [r7, #20]
   1619a:	e00a      	b.n	161b2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1619c:	683b      	ldr	r3, [r7, #0]
   1619e:	685b      	ldr	r3, [r3, #4]
   161a0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   161a2:	693a      	ldr	r2, [r7, #16]
   161a4:	4313      	orrs	r3, r2
   161a6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   161a8:	697b      	ldr	r3, [r7, #20]
   161aa:	2280      	movs	r2, #128	; 0x80
   161ac:	0292      	lsls	r2, r2, #10
   161ae:	4313      	orrs	r3, r2
   161b0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   161b2:	683b      	ldr	r3, [r7, #0]
   161b4:	7a1b      	ldrb	r3, [r3, #8]
   161b6:	2b00      	cmp	r3, #0
   161b8:	d004      	beq.n	161c4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   161ba:	697b      	ldr	r3, [r7, #20]
   161bc:	2280      	movs	r2, #128	; 0x80
   161be:	0392      	lsls	r2, r2, #14
   161c0:	4313      	orrs	r3, r2
   161c2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   161c4:	46c0      	nop			; (mov r8, r8)
   161c6:	4b13      	ldr	r3, [pc, #76]	; (16214 <system_gclk_gen_set_config+0x110>)
   161c8:	4798      	blx	r3
   161ca:	1e03      	subs	r3, r0, #0
   161cc:	d1fb      	bne.n	161c6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   161ce:	4b12      	ldr	r3, [pc, #72]	; (16218 <system_gclk_gen_set_config+0x114>)
   161d0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   161d2:	4a12      	ldr	r2, [pc, #72]	; (1621c <system_gclk_gen_set_config+0x118>)
   161d4:	1dfb      	adds	r3, r7, #7
   161d6:	781b      	ldrb	r3, [r3, #0]
   161d8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   161da:	46c0      	nop			; (mov r8, r8)
   161dc:	4b0d      	ldr	r3, [pc, #52]	; (16214 <system_gclk_gen_set_config+0x110>)
   161de:	4798      	blx	r3
   161e0:	1e03      	subs	r3, r0, #0
   161e2:	d1fb      	bne.n	161dc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   161e4:	4b0e      	ldr	r3, [pc, #56]	; (16220 <system_gclk_gen_set_config+0x11c>)
   161e6:	693a      	ldr	r2, [r7, #16]
   161e8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   161ea:	46c0      	nop			; (mov r8, r8)
   161ec:	4b09      	ldr	r3, [pc, #36]	; (16214 <system_gclk_gen_set_config+0x110>)
   161ee:	4798      	blx	r3
   161f0:	1e03      	subs	r3, r0, #0
   161f2:	d1fb      	bne.n	161ec <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   161f4:	4b0a      	ldr	r3, [pc, #40]	; (16220 <system_gclk_gen_set_config+0x11c>)
   161f6:	4a0a      	ldr	r2, [pc, #40]	; (16220 <system_gclk_gen_set_config+0x11c>)
   161f8:	6851      	ldr	r1, [r2, #4]
   161fa:	2280      	movs	r2, #128	; 0x80
   161fc:	0252      	lsls	r2, r2, #9
   161fe:	4011      	ands	r1, r2
   16200:	697a      	ldr	r2, [r7, #20]
   16202:	430a      	orrs	r2, r1
   16204:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   16206:	4b07      	ldr	r3, [pc, #28]	; (16224 <system_gclk_gen_set_config+0x120>)
   16208:	4798      	blx	r3
}
   1620a:	46c0      	nop			; (mov r8, r8)
   1620c:	46bd      	mov	sp, r7
   1620e:	b006      	add	sp, #24
   16210:	bd80      	pop	{r7, pc}
   16212:	46c0      	nop			; (mov r8, r8)
   16214:	000160b5 	.word	0x000160b5
   16218:	0001608d 	.word	0x0001608d
   1621c:	40000c08 	.word	0x40000c08
   16220:	40000c00 	.word	0x40000c00
   16224:	000160a1 	.word	0x000160a1

00016228 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   16228:	b580      	push	{r7, lr}
   1622a:	b082      	sub	sp, #8
   1622c:	af00      	add	r7, sp, #0
   1622e:	0002      	movs	r2, r0
   16230:	1dfb      	adds	r3, r7, #7
   16232:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   16234:	46c0      	nop			; (mov r8, r8)
   16236:	4b0e      	ldr	r3, [pc, #56]	; (16270 <system_gclk_gen_enable+0x48>)
   16238:	4798      	blx	r3
   1623a:	1e03      	subs	r3, r0, #0
   1623c:	d1fb      	bne.n	16236 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1623e:	4b0d      	ldr	r3, [pc, #52]	; (16274 <system_gclk_gen_enable+0x4c>)
   16240:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   16242:	4a0d      	ldr	r2, [pc, #52]	; (16278 <system_gclk_gen_enable+0x50>)
   16244:	1dfb      	adds	r3, r7, #7
   16246:	781b      	ldrb	r3, [r3, #0]
   16248:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1624a:	46c0      	nop			; (mov r8, r8)
   1624c:	4b08      	ldr	r3, [pc, #32]	; (16270 <system_gclk_gen_enable+0x48>)
   1624e:	4798      	blx	r3
   16250:	1e03      	subs	r3, r0, #0
   16252:	d1fb      	bne.n	1624c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   16254:	4b09      	ldr	r3, [pc, #36]	; (1627c <system_gclk_gen_enable+0x54>)
   16256:	4a09      	ldr	r2, [pc, #36]	; (1627c <system_gclk_gen_enable+0x54>)
   16258:	6852      	ldr	r2, [r2, #4]
   1625a:	2180      	movs	r1, #128	; 0x80
   1625c:	0249      	lsls	r1, r1, #9
   1625e:	430a      	orrs	r2, r1
   16260:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   16262:	4b07      	ldr	r3, [pc, #28]	; (16280 <system_gclk_gen_enable+0x58>)
   16264:	4798      	blx	r3
}
   16266:	46c0      	nop			; (mov r8, r8)
   16268:	46bd      	mov	sp, r7
   1626a:	b002      	add	sp, #8
   1626c:	bd80      	pop	{r7, pc}
   1626e:	46c0      	nop			; (mov r8, r8)
   16270:	000160b5 	.word	0x000160b5
   16274:	0001608d 	.word	0x0001608d
   16278:	40000c04 	.word	0x40000c04
   1627c:	40000c00 	.word	0x40000c00
   16280:	000160a1 	.word	0x000160a1

00016284 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   16284:	b580      	push	{r7, lr}
   16286:	b086      	sub	sp, #24
   16288:	af00      	add	r7, sp, #0
   1628a:	0002      	movs	r2, r0
   1628c:	1dfb      	adds	r3, r7, #7
   1628e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   16290:	46c0      	nop			; (mov r8, r8)
   16292:	4b2a      	ldr	r3, [pc, #168]	; (1633c <system_gclk_gen_get_hz+0xb8>)
   16294:	4798      	blx	r3
   16296:	1e03      	subs	r3, r0, #0
   16298:	d1fb      	bne.n	16292 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1629a:	4b29      	ldr	r3, [pc, #164]	; (16340 <system_gclk_gen_get_hz+0xbc>)
   1629c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1629e:	4a29      	ldr	r2, [pc, #164]	; (16344 <system_gclk_gen_get_hz+0xc0>)
   162a0:	1dfb      	adds	r3, r7, #7
   162a2:	781b      	ldrb	r3, [r3, #0]
   162a4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   162a6:	46c0      	nop			; (mov r8, r8)
   162a8:	4b24      	ldr	r3, [pc, #144]	; (1633c <system_gclk_gen_get_hz+0xb8>)
   162aa:	4798      	blx	r3
   162ac:	1e03      	subs	r3, r0, #0
   162ae:	d1fb      	bne.n	162a8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   162b0:	4b25      	ldr	r3, [pc, #148]	; (16348 <system_gclk_gen_get_hz+0xc4>)
   162b2:	685b      	ldr	r3, [r3, #4]
   162b4:	04db      	lsls	r3, r3, #19
   162b6:	0edb      	lsrs	r3, r3, #27
   162b8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   162ba:	0018      	movs	r0, r3
   162bc:	4b23      	ldr	r3, [pc, #140]	; (1634c <system_gclk_gen_get_hz+0xc8>)
   162be:	4798      	blx	r3
   162c0:	0003      	movs	r3, r0
   162c2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   162c4:	4a1f      	ldr	r2, [pc, #124]	; (16344 <system_gclk_gen_get_hz+0xc0>)
   162c6:	1dfb      	adds	r3, r7, #7
   162c8:	781b      	ldrb	r3, [r3, #0]
   162ca:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   162cc:	4b1e      	ldr	r3, [pc, #120]	; (16348 <system_gclk_gen_get_hz+0xc4>)
   162ce:	685b      	ldr	r3, [r3, #4]
   162d0:	02db      	lsls	r3, r3, #11
   162d2:	0fdb      	lsrs	r3, r3, #31
   162d4:	b2da      	uxtb	r2, r3
   162d6:	2313      	movs	r3, #19
   162d8:	18fb      	adds	r3, r7, r3
   162da:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   162dc:	4a1c      	ldr	r2, [pc, #112]	; (16350 <system_gclk_gen_get_hz+0xcc>)
   162de:	1dfb      	adds	r3, r7, #7
   162e0:	781b      	ldrb	r3, [r3, #0]
   162e2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   162e4:	46c0      	nop			; (mov r8, r8)
   162e6:	4b15      	ldr	r3, [pc, #84]	; (1633c <system_gclk_gen_get_hz+0xb8>)
   162e8:	4798      	blx	r3
   162ea:	1e03      	subs	r3, r0, #0
   162ec:	d1fb      	bne.n	162e6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   162ee:	4b16      	ldr	r3, [pc, #88]	; (16348 <system_gclk_gen_get_hz+0xc4>)
   162f0:	689b      	ldr	r3, [r3, #8]
   162f2:	021b      	lsls	r3, r3, #8
   162f4:	0c1b      	lsrs	r3, r3, #16
   162f6:	b29b      	uxth	r3, r3
   162f8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   162fa:	4b16      	ldr	r3, [pc, #88]	; (16354 <system_gclk_gen_get_hz+0xd0>)
   162fc:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   162fe:	2313      	movs	r3, #19
   16300:	18fb      	adds	r3, r7, r3
   16302:	781b      	ldrb	r3, [r3, #0]
   16304:	2b00      	cmp	r3, #0
   16306:	d109      	bne.n	1631c <system_gclk_gen_get_hz+0x98>
   16308:	68fb      	ldr	r3, [r7, #12]
   1630a:	2b01      	cmp	r3, #1
   1630c:	d906      	bls.n	1631c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   1630e:	4b12      	ldr	r3, [pc, #72]	; (16358 <system_gclk_gen_get_hz+0xd4>)
   16310:	68f9      	ldr	r1, [r7, #12]
   16312:	6978      	ldr	r0, [r7, #20]
   16314:	4798      	blx	r3
   16316:	0003      	movs	r3, r0
   16318:	617b      	str	r3, [r7, #20]
   1631a:	e00a      	b.n	16332 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   1631c:	2313      	movs	r3, #19
   1631e:	18fb      	adds	r3, r7, r3
   16320:	781b      	ldrb	r3, [r3, #0]
   16322:	2b00      	cmp	r3, #0
   16324:	d005      	beq.n	16332 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   16326:	68fb      	ldr	r3, [r7, #12]
   16328:	3301      	adds	r3, #1
   1632a:	697a      	ldr	r2, [r7, #20]
   1632c:	40da      	lsrs	r2, r3
   1632e:	0013      	movs	r3, r2
   16330:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   16332:	697b      	ldr	r3, [r7, #20]
}
   16334:	0018      	movs	r0, r3
   16336:	46bd      	mov	sp, r7
   16338:	b006      	add	sp, #24
   1633a:	bd80      	pop	{r7, pc}
   1633c:	000160b5 	.word	0x000160b5
   16340:	0001608d 	.word	0x0001608d
   16344:	40000c04 	.word	0x40000c04
   16348:	40000c00 	.word	0x40000c00
   1634c:	000159e5 	.word	0x000159e5
   16350:	40000c08 	.word	0x40000c08
   16354:	000160a1 	.word	0x000160a1
   16358:	0001f0d1 	.word	0x0001f0d1

0001635c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   1635c:	b580      	push	{r7, lr}
   1635e:	b084      	sub	sp, #16
   16360:	af00      	add	r7, sp, #0
   16362:	0002      	movs	r2, r0
   16364:	6039      	str	r1, [r7, #0]
   16366:	1dfb      	adds	r3, r7, #7
   16368:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   1636a:	1dfb      	adds	r3, r7, #7
   1636c:	781b      	ldrb	r3, [r3, #0]
   1636e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   16370:	683b      	ldr	r3, [r7, #0]
   16372:	781b      	ldrb	r3, [r3, #0]
   16374:	021b      	lsls	r3, r3, #8
   16376:	001a      	movs	r2, r3
   16378:	68fb      	ldr	r3, [r7, #12]
   1637a:	4313      	orrs	r3, r2
   1637c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   1637e:	1dfb      	adds	r3, r7, #7
   16380:	781b      	ldrb	r3, [r3, #0]
   16382:	0018      	movs	r0, r3
   16384:	4b04      	ldr	r3, [pc, #16]	; (16398 <system_gclk_chan_set_config+0x3c>)
   16386:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   16388:	4b04      	ldr	r3, [pc, #16]	; (1639c <system_gclk_chan_set_config+0x40>)
   1638a:	68fa      	ldr	r2, [r7, #12]
   1638c:	b292      	uxth	r2, r2
   1638e:	805a      	strh	r2, [r3, #2]
}
   16390:	46c0      	nop			; (mov r8, r8)
   16392:	46bd      	mov	sp, r7
   16394:	b004      	add	sp, #16
   16396:	bd80      	pop	{r7, pc}
   16398:	000163e9 	.word	0x000163e9
   1639c:	40000c00 	.word	0x40000c00

000163a0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   163a0:	b580      	push	{r7, lr}
   163a2:	b082      	sub	sp, #8
   163a4:	af00      	add	r7, sp, #0
   163a6:	0002      	movs	r2, r0
   163a8:	1dfb      	adds	r3, r7, #7
   163aa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   163ac:	4b0a      	ldr	r3, [pc, #40]	; (163d8 <system_gclk_chan_enable+0x38>)
   163ae:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   163b0:	4a0a      	ldr	r2, [pc, #40]	; (163dc <system_gclk_chan_enable+0x3c>)
   163b2:	1dfb      	adds	r3, r7, #7
   163b4:	781b      	ldrb	r3, [r3, #0]
   163b6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   163b8:	4909      	ldr	r1, [pc, #36]	; (163e0 <system_gclk_chan_enable+0x40>)
   163ba:	4b09      	ldr	r3, [pc, #36]	; (163e0 <system_gclk_chan_enable+0x40>)
   163bc:	885b      	ldrh	r3, [r3, #2]
   163be:	b29b      	uxth	r3, r3
   163c0:	2280      	movs	r2, #128	; 0x80
   163c2:	01d2      	lsls	r2, r2, #7
   163c4:	4313      	orrs	r3, r2
   163c6:	b29b      	uxth	r3, r3
   163c8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   163ca:	4b06      	ldr	r3, [pc, #24]	; (163e4 <system_gclk_chan_enable+0x44>)
   163cc:	4798      	blx	r3
}
   163ce:	46c0      	nop			; (mov r8, r8)
   163d0:	46bd      	mov	sp, r7
   163d2:	b002      	add	sp, #8
   163d4:	bd80      	pop	{r7, pc}
   163d6:	46c0      	nop			; (mov r8, r8)
   163d8:	0001608d 	.word	0x0001608d
   163dc:	40000c02 	.word	0x40000c02
   163e0:	40000c00 	.word	0x40000c00
   163e4:	000160a1 	.word	0x000160a1

000163e8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   163e8:	b580      	push	{r7, lr}
   163ea:	b084      	sub	sp, #16
   163ec:	af00      	add	r7, sp, #0
   163ee:	0002      	movs	r2, r0
   163f0:	1dfb      	adds	r3, r7, #7
   163f2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   163f4:	4b1c      	ldr	r3, [pc, #112]	; (16468 <system_gclk_chan_disable+0x80>)
   163f6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   163f8:	4a1c      	ldr	r2, [pc, #112]	; (1646c <system_gclk_chan_disable+0x84>)
   163fa:	1dfb      	adds	r3, r7, #7
   163fc:	781b      	ldrb	r3, [r3, #0]
   163fe:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   16400:	4b1b      	ldr	r3, [pc, #108]	; (16470 <system_gclk_chan_disable+0x88>)
   16402:	885b      	ldrh	r3, [r3, #2]
   16404:	051b      	lsls	r3, r3, #20
   16406:	0f1b      	lsrs	r3, r3, #28
   16408:	b2db      	uxtb	r3, r3
   1640a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   1640c:	4a18      	ldr	r2, [pc, #96]	; (16470 <system_gclk_chan_disable+0x88>)
   1640e:	8853      	ldrh	r3, [r2, #2]
   16410:	4918      	ldr	r1, [pc, #96]	; (16474 <system_gclk_chan_disable+0x8c>)
   16412:	400b      	ands	r3, r1
   16414:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   16416:	4a16      	ldr	r2, [pc, #88]	; (16470 <system_gclk_chan_disable+0x88>)
   16418:	4b15      	ldr	r3, [pc, #84]	; (16470 <system_gclk_chan_disable+0x88>)
   1641a:	885b      	ldrh	r3, [r3, #2]
   1641c:	b29b      	uxth	r3, r3
   1641e:	4916      	ldr	r1, [pc, #88]	; (16478 <system_gclk_chan_disable+0x90>)
   16420:	400b      	ands	r3, r1
   16422:	b29b      	uxth	r3, r3
   16424:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   16426:	46c0      	nop			; (mov r8, r8)
   16428:	4b11      	ldr	r3, [pc, #68]	; (16470 <system_gclk_chan_disable+0x88>)
   1642a:	885b      	ldrh	r3, [r3, #2]
   1642c:	b29b      	uxth	r3, r3
   1642e:	001a      	movs	r2, r3
   16430:	2380      	movs	r3, #128	; 0x80
   16432:	01db      	lsls	r3, r3, #7
   16434:	4013      	ands	r3, r2
   16436:	d1f7      	bne.n	16428 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   16438:	4a0d      	ldr	r2, [pc, #52]	; (16470 <system_gclk_chan_disable+0x88>)
   1643a:	68fb      	ldr	r3, [r7, #12]
   1643c:	b2db      	uxtb	r3, r3
   1643e:	1c19      	adds	r1, r3, #0
   16440:	230f      	movs	r3, #15
   16442:	400b      	ands	r3, r1
   16444:	b2d9      	uxtb	r1, r3
   16446:	8853      	ldrh	r3, [r2, #2]
   16448:	1c08      	adds	r0, r1, #0
   1644a:	210f      	movs	r1, #15
   1644c:	4001      	ands	r1, r0
   1644e:	0208      	lsls	r0, r1, #8
   16450:	4908      	ldr	r1, [pc, #32]	; (16474 <system_gclk_chan_disable+0x8c>)
   16452:	400b      	ands	r3, r1
   16454:	1c19      	adds	r1, r3, #0
   16456:	1c03      	adds	r3, r0, #0
   16458:	430b      	orrs	r3, r1
   1645a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   1645c:	4b07      	ldr	r3, [pc, #28]	; (1647c <system_gclk_chan_disable+0x94>)
   1645e:	4798      	blx	r3
}
   16460:	46c0      	nop			; (mov r8, r8)
   16462:	46bd      	mov	sp, r7
   16464:	b004      	add	sp, #16
   16466:	bd80      	pop	{r7, pc}
   16468:	0001608d 	.word	0x0001608d
   1646c:	40000c02 	.word	0x40000c02
   16470:	40000c00 	.word	0x40000c00
   16474:	fffff0ff 	.word	0xfffff0ff
   16478:	ffffbfff 	.word	0xffffbfff
   1647c:	000160a1 	.word	0x000160a1

00016480 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   16480:	b580      	push	{r7, lr}
   16482:	b084      	sub	sp, #16
   16484:	af00      	add	r7, sp, #0
   16486:	0002      	movs	r2, r0
   16488:	1dfb      	adds	r3, r7, #7
   1648a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   1648c:	4b0d      	ldr	r3, [pc, #52]	; (164c4 <system_gclk_chan_get_hz+0x44>)
   1648e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   16490:	4a0d      	ldr	r2, [pc, #52]	; (164c8 <system_gclk_chan_get_hz+0x48>)
   16492:	1dfb      	adds	r3, r7, #7
   16494:	781b      	ldrb	r3, [r3, #0]
   16496:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   16498:	4b0c      	ldr	r3, [pc, #48]	; (164cc <system_gclk_chan_get_hz+0x4c>)
   1649a:	885b      	ldrh	r3, [r3, #2]
   1649c:	051b      	lsls	r3, r3, #20
   1649e:	0f1b      	lsrs	r3, r3, #28
   164a0:	b2da      	uxtb	r2, r3
   164a2:	230f      	movs	r3, #15
   164a4:	18fb      	adds	r3, r7, r3
   164a6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   164a8:	4b09      	ldr	r3, [pc, #36]	; (164d0 <system_gclk_chan_get_hz+0x50>)
   164aa:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   164ac:	230f      	movs	r3, #15
   164ae:	18fb      	adds	r3, r7, r3
   164b0:	781b      	ldrb	r3, [r3, #0]
   164b2:	0018      	movs	r0, r3
   164b4:	4b07      	ldr	r3, [pc, #28]	; (164d4 <system_gclk_chan_get_hz+0x54>)
   164b6:	4798      	blx	r3
   164b8:	0003      	movs	r3, r0
}
   164ba:	0018      	movs	r0, r3
   164bc:	46bd      	mov	sp, r7
   164be:	b004      	add	sp, #16
   164c0:	bd80      	pop	{r7, pc}
   164c2:	46c0      	nop			; (mov r8, r8)
   164c4:	0001608d 	.word	0x0001608d
   164c8:	40000c02 	.word	0x40000c02
   164cc:	40000c00 	.word	0x40000c00
   164d0:	000160a1 	.word	0x000160a1
   164d4:	00016285 	.word	0x00016285

000164d8 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   164d8:	b580      	push	{r7, lr}
   164da:	b084      	sub	sp, #16
   164dc:	af00      	add	r7, sp, #0
   164de:	0002      	movs	r2, r0
   164e0:	1dfb      	adds	r3, r7, #7
   164e2:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   164e4:	230f      	movs	r3, #15
   164e6:	18fb      	adds	r3, r7, r3
   164e8:	2200      	movs	r2, #0
   164ea:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   164ec:	1dfb      	adds	r3, r7, #7
   164ee:	781b      	ldrb	r3, [r3, #0]
   164f0:	2b7f      	cmp	r3, #127	; 0x7f
   164f2:	d80b      	bhi.n	1650c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   164f4:	4a13      	ldr	r2, [pc, #76]	; (16544 <system_interrupt_clear_pending+0x6c>)
   164f6:	1dfb      	adds	r3, r7, #7
   164f8:	781b      	ldrb	r3, [r3, #0]
   164fa:	b25b      	sxtb	r3, r3
   164fc:	2101      	movs	r1, #1
   164fe:	4099      	lsls	r1, r3
   16500:	000b      	movs	r3, r1
   16502:	0019      	movs	r1, r3
   16504:	23c0      	movs	r3, #192	; 0xc0
   16506:	005b      	lsls	r3, r3, #1
   16508:	50d1      	str	r1, [r2, r3]
   1650a:	e014      	b.n	16536 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   1650c:	1dfb      	adds	r3, r7, #7
   1650e:	781b      	ldrb	r3, [r3, #0]
   16510:	b25b      	sxtb	r3, r3
   16512:	330e      	adds	r3, #14
   16514:	d101      	bne.n	1651a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   16516:	2317      	movs	r3, #23
   16518:	e010      	b.n	1653c <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   1651a:	1dfb      	adds	r3, r7, #7
   1651c:	781b      	ldrb	r3, [r3, #0]
   1651e:	b25b      	sxtb	r3, r3
   16520:	3301      	adds	r3, #1
   16522:	d104      	bne.n	1652e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   16524:	4b08      	ldr	r3, [pc, #32]	; (16548 <system_interrupt_clear_pending+0x70>)
   16526:	2280      	movs	r2, #128	; 0x80
   16528:	0492      	lsls	r2, r2, #18
   1652a:	605a      	str	r2, [r3, #4]
   1652c:	e003      	b.n	16536 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   1652e:	230f      	movs	r3, #15
   16530:	18fb      	adds	r3, r7, r3
   16532:	2217      	movs	r2, #23
   16534:	701a      	strb	r2, [r3, #0]
	}

	return status;
   16536:	230f      	movs	r3, #15
   16538:	18fb      	adds	r3, r7, r3
   1653a:	781b      	ldrb	r3, [r3, #0]
}
   1653c:	0018      	movs	r0, r3
   1653e:	46bd      	mov	sp, r7
   16540:	b004      	add	sp, #16
   16542:	bd80      	pop	{r7, pc}
   16544:	e000e100 	.word	0xe000e100
   16548:	e000ed00 	.word	0xe000ed00

0001654c <system_pinmux_get_group_from_gpio_pin>:
{
   1654c:	b580      	push	{r7, lr}
   1654e:	b084      	sub	sp, #16
   16550:	af00      	add	r7, sp, #0
   16552:	0002      	movs	r2, r0
   16554:	1dfb      	adds	r3, r7, #7
   16556:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16558:	230f      	movs	r3, #15
   1655a:	18fb      	adds	r3, r7, r3
   1655c:	1dfa      	adds	r2, r7, #7
   1655e:	7812      	ldrb	r2, [r2, #0]
   16560:	09d2      	lsrs	r2, r2, #7
   16562:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16564:	230e      	movs	r3, #14
   16566:	18fb      	adds	r3, r7, r3
   16568:	1dfa      	adds	r2, r7, #7
   1656a:	7812      	ldrb	r2, [r2, #0]
   1656c:	0952      	lsrs	r2, r2, #5
   1656e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16570:	4b0d      	ldr	r3, [pc, #52]	; (165a8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16572:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   16574:	230f      	movs	r3, #15
   16576:	18fb      	adds	r3, r7, r3
   16578:	781b      	ldrb	r3, [r3, #0]
   1657a:	2b00      	cmp	r3, #0
   1657c:	d10f      	bne.n	1659e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1657e:	230f      	movs	r3, #15
   16580:	18fb      	adds	r3, r7, r3
   16582:	781b      	ldrb	r3, [r3, #0]
   16584:	009b      	lsls	r3, r3, #2
   16586:	2210      	movs	r2, #16
   16588:	4694      	mov	ip, r2
   1658a:	44bc      	add	ip, r7
   1658c:	4463      	add	r3, ip
   1658e:	3b08      	subs	r3, #8
   16590:	681a      	ldr	r2, [r3, #0]
   16592:	230e      	movs	r3, #14
   16594:	18fb      	adds	r3, r7, r3
   16596:	781b      	ldrb	r3, [r3, #0]
   16598:	01db      	lsls	r3, r3, #7
   1659a:	18d3      	adds	r3, r2, r3
   1659c:	e000      	b.n	165a0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1659e:	2300      	movs	r3, #0
}
   165a0:	0018      	movs	r0, r3
   165a2:	46bd      	mov	sp, r7
   165a4:	b004      	add	sp, #16
   165a6:	bd80      	pop	{r7, pc}
   165a8:	41004400 	.word	0x41004400

000165ac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   165ac:	b580      	push	{r7, lr}
   165ae:	b088      	sub	sp, #32
   165b0:	af00      	add	r7, sp, #0
   165b2:	60f8      	str	r0, [r7, #12]
   165b4:	60b9      	str	r1, [r7, #8]
   165b6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   165b8:	2300      	movs	r3, #0
   165ba:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   165bc:	687b      	ldr	r3, [r7, #4]
   165be:	78db      	ldrb	r3, [r3, #3]
   165c0:	2201      	movs	r2, #1
   165c2:	4053      	eors	r3, r2
   165c4:	b2db      	uxtb	r3, r3
   165c6:	2b00      	cmp	r3, #0
   165c8:	d035      	beq.n	16636 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   165ca:	687b      	ldr	r3, [r7, #4]
   165cc:	781b      	ldrb	r3, [r3, #0]
   165ce:	2b80      	cmp	r3, #128	; 0x80
   165d0:	d00b      	beq.n	165ea <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   165d2:	69fb      	ldr	r3, [r7, #28]
   165d4:	2280      	movs	r2, #128	; 0x80
   165d6:	0252      	lsls	r2, r2, #9
   165d8:	4313      	orrs	r3, r2
   165da:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   165dc:	687b      	ldr	r3, [r7, #4]
   165de:	781b      	ldrb	r3, [r3, #0]
   165e0:	061b      	lsls	r3, r3, #24
   165e2:	001a      	movs	r2, r3
   165e4:	69fb      	ldr	r3, [r7, #28]
   165e6:	4313      	orrs	r3, r2
   165e8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   165ea:	687b      	ldr	r3, [r7, #4]
   165ec:	785b      	ldrb	r3, [r3, #1]
   165ee:	2b00      	cmp	r3, #0
   165f0:	d003      	beq.n	165fa <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   165f2:	687b      	ldr	r3, [r7, #4]
   165f4:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   165f6:	2b02      	cmp	r3, #2
   165f8:	d110      	bne.n	1661c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   165fa:	69fb      	ldr	r3, [r7, #28]
   165fc:	2280      	movs	r2, #128	; 0x80
   165fe:	0292      	lsls	r2, r2, #10
   16600:	4313      	orrs	r3, r2
   16602:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   16604:	687b      	ldr	r3, [r7, #4]
   16606:	789b      	ldrb	r3, [r3, #2]
   16608:	2b00      	cmp	r3, #0
   1660a:	d004      	beq.n	16616 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1660c:	69fb      	ldr	r3, [r7, #28]
   1660e:	2280      	movs	r2, #128	; 0x80
   16610:	02d2      	lsls	r2, r2, #11
   16612:	4313      	orrs	r3, r2
   16614:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   16616:	68fb      	ldr	r3, [r7, #12]
   16618:	68ba      	ldr	r2, [r7, #8]
   1661a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1661c:	687b      	ldr	r3, [r7, #4]
   1661e:	785b      	ldrb	r3, [r3, #1]
   16620:	2b01      	cmp	r3, #1
   16622:	d003      	beq.n	1662c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   16624:	687b      	ldr	r3, [r7, #4]
   16626:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   16628:	2b02      	cmp	r3, #2
   1662a:	d107      	bne.n	1663c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   1662c:	69fb      	ldr	r3, [r7, #28]
   1662e:	4a22      	ldr	r2, [pc, #136]	; (166b8 <_system_pinmux_config+0x10c>)
   16630:	4013      	ands	r3, r2
   16632:	61fb      	str	r3, [r7, #28]
   16634:	e002      	b.n	1663c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   16636:	68fb      	ldr	r3, [r7, #12]
   16638:	68ba      	ldr	r2, [r7, #8]
   1663a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1663c:	68bb      	ldr	r3, [r7, #8]
   1663e:	041b      	lsls	r3, r3, #16
   16640:	0c1b      	lsrs	r3, r3, #16
   16642:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   16644:	68bb      	ldr	r3, [r7, #8]
   16646:	0c1b      	lsrs	r3, r3, #16
   16648:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1664a:	69ba      	ldr	r2, [r7, #24]
   1664c:	69fb      	ldr	r3, [r7, #28]
   1664e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   16650:	22a0      	movs	r2, #160	; 0xa0
   16652:	05d2      	lsls	r2, r2, #23
   16654:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   16656:	68fb      	ldr	r3, [r7, #12]
   16658:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1665a:	697a      	ldr	r2, [r7, #20]
   1665c:	69fb      	ldr	r3, [r7, #28]
   1665e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   16660:	22d0      	movs	r2, #208	; 0xd0
   16662:	0612      	lsls	r2, r2, #24
   16664:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   16666:	68fb      	ldr	r3, [r7, #12]
   16668:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   1666a:	687b      	ldr	r3, [r7, #4]
   1666c:	78db      	ldrb	r3, [r3, #3]
   1666e:	2201      	movs	r2, #1
   16670:	4053      	eors	r3, r2
   16672:	b2db      	uxtb	r3, r3
   16674:	2b00      	cmp	r3, #0
   16676:	d01a      	beq.n	166ae <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   16678:	69fa      	ldr	r2, [r7, #28]
   1667a:	2380      	movs	r3, #128	; 0x80
   1667c:	02db      	lsls	r3, r3, #11
   1667e:	4013      	ands	r3, r2
   16680:	d00a      	beq.n	16698 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   16682:	687b      	ldr	r3, [r7, #4]
   16684:	789b      	ldrb	r3, [r3, #2]
   16686:	2b01      	cmp	r3, #1
   16688:	d103      	bne.n	16692 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   1668a:	68fb      	ldr	r3, [r7, #12]
   1668c:	68ba      	ldr	r2, [r7, #8]
   1668e:	619a      	str	r2, [r3, #24]
   16690:	e002      	b.n	16698 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   16692:	68fb      	ldr	r3, [r7, #12]
   16694:	68ba      	ldr	r2, [r7, #8]
   16696:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   16698:	687b      	ldr	r3, [r7, #4]
   1669a:	785b      	ldrb	r3, [r3, #1]
   1669c:	2b01      	cmp	r3, #1
   1669e:	d003      	beq.n	166a8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   166a0:	687b      	ldr	r3, [r7, #4]
   166a2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   166a4:	2b02      	cmp	r3, #2
   166a6:	d102      	bne.n	166ae <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   166a8:	68fb      	ldr	r3, [r7, #12]
   166aa:	68ba      	ldr	r2, [r7, #8]
   166ac:	609a      	str	r2, [r3, #8]
		}
	}
}
   166ae:	46c0      	nop			; (mov r8, r8)
   166b0:	46bd      	mov	sp, r7
   166b2:	b008      	add	sp, #32
   166b4:	bd80      	pop	{r7, pc}
   166b6:	46c0      	nop			; (mov r8, r8)
   166b8:	fffbffff 	.word	0xfffbffff

000166bc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   166bc:	b580      	push	{r7, lr}
   166be:	b084      	sub	sp, #16
   166c0:	af00      	add	r7, sp, #0
   166c2:	0002      	movs	r2, r0
   166c4:	6039      	str	r1, [r7, #0]
   166c6:	1dfb      	adds	r3, r7, #7
   166c8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   166ca:	1dfb      	adds	r3, r7, #7
   166cc:	781b      	ldrb	r3, [r3, #0]
   166ce:	0018      	movs	r0, r3
   166d0:	4b0a      	ldr	r3, [pc, #40]	; (166fc <system_pinmux_pin_set_config+0x40>)
   166d2:	4798      	blx	r3
   166d4:	0003      	movs	r3, r0
   166d6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   166d8:	1dfb      	adds	r3, r7, #7
   166da:	781b      	ldrb	r3, [r3, #0]
   166dc:	221f      	movs	r2, #31
   166de:	4013      	ands	r3, r2
   166e0:	2201      	movs	r2, #1
   166e2:	409a      	lsls	r2, r3
   166e4:	0013      	movs	r3, r2
   166e6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   166e8:	683a      	ldr	r2, [r7, #0]
   166ea:	68b9      	ldr	r1, [r7, #8]
   166ec:	68fb      	ldr	r3, [r7, #12]
   166ee:	0018      	movs	r0, r3
   166f0:	4b03      	ldr	r3, [pc, #12]	; (16700 <system_pinmux_pin_set_config+0x44>)
   166f2:	4798      	blx	r3
}
   166f4:	46c0      	nop			; (mov r8, r8)
   166f6:	46bd      	mov	sp, r7
   166f8:	b004      	add	sp, #16
   166fa:	bd80      	pop	{r7, pc}
   166fc:	0001654d 	.word	0x0001654d
   16700:	000165ad 	.word	0x000165ad

00016704 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   16704:	b580      	push	{r7, lr}
   16706:	af00      	add	r7, sp, #0
	return;
   16708:	46c0      	nop			; (mov r8, r8)
}
   1670a:	46bd      	mov	sp, r7
   1670c:	bd80      	pop	{r7, pc}
	...

00016710 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   16710:	b580      	push	{r7, lr}
   16712:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   16714:	4b06      	ldr	r3, [pc, #24]	; (16730 <system_init+0x20>)
   16716:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   16718:	4b06      	ldr	r3, [pc, #24]	; (16734 <system_init+0x24>)
   1671a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1671c:	4b06      	ldr	r3, [pc, #24]	; (16738 <system_init+0x28>)
   1671e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   16720:	4b06      	ldr	r3, [pc, #24]	; (1673c <system_init+0x2c>)
   16722:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   16724:	4b06      	ldr	r3, [pc, #24]	; (16740 <system_init+0x30>)
   16726:	4798      	blx	r3
}
   16728:	46c0      	nop			; (mov r8, r8)
   1672a:	46bd      	mov	sp, r7
   1672c:	bd80      	pop	{r7, pc}
   1672e:	46c0      	nop			; (mov r8, r8)
   16730:	00015d91 	.word	0x00015d91
   16734:	00012859 	.word	0x00012859
   16738:	00000955 	.word	0x00000955
   1673c:	00012c31 	.word	0x00012c31
   16740:	00016705 	.word	0x00016705

00016744 <system_gclk_chan_get_config_defaults>:
{
   16744:	b580      	push	{r7, lr}
   16746:	b082      	sub	sp, #8
   16748:	af00      	add	r7, sp, #0
   1674a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1674c:	687b      	ldr	r3, [r7, #4]
   1674e:	2200      	movs	r2, #0
   16750:	701a      	strb	r2, [r3, #0]
}
   16752:	46c0      	nop			; (mov r8, r8)
   16754:	46bd      	mov	sp, r7
   16756:	b002      	add	sp, #8
   16758:	bd80      	pop	{r7, pc}
	...

0001675c <system_apb_clock_set_mask>:
{
   1675c:	b580      	push	{r7, lr}
   1675e:	b082      	sub	sp, #8
   16760:	af00      	add	r7, sp, #0
   16762:	0002      	movs	r2, r0
   16764:	6039      	str	r1, [r7, #0]
   16766:	1dfb      	adds	r3, r7, #7
   16768:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1676a:	1dfb      	adds	r3, r7, #7
   1676c:	781b      	ldrb	r3, [r3, #0]
   1676e:	2b01      	cmp	r3, #1
   16770:	d00a      	beq.n	16788 <system_apb_clock_set_mask+0x2c>
   16772:	2b02      	cmp	r3, #2
   16774:	d00f      	beq.n	16796 <system_apb_clock_set_mask+0x3a>
   16776:	2b00      	cmp	r3, #0
   16778:	d114      	bne.n	167a4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1677a:	4b0e      	ldr	r3, [pc, #56]	; (167b4 <system_apb_clock_set_mask+0x58>)
   1677c:	4a0d      	ldr	r2, [pc, #52]	; (167b4 <system_apb_clock_set_mask+0x58>)
   1677e:	6991      	ldr	r1, [r2, #24]
   16780:	683a      	ldr	r2, [r7, #0]
   16782:	430a      	orrs	r2, r1
   16784:	619a      	str	r2, [r3, #24]
			break;
   16786:	e00f      	b.n	167a8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   16788:	4b0a      	ldr	r3, [pc, #40]	; (167b4 <system_apb_clock_set_mask+0x58>)
   1678a:	4a0a      	ldr	r2, [pc, #40]	; (167b4 <system_apb_clock_set_mask+0x58>)
   1678c:	69d1      	ldr	r1, [r2, #28]
   1678e:	683a      	ldr	r2, [r7, #0]
   16790:	430a      	orrs	r2, r1
   16792:	61da      	str	r2, [r3, #28]
			break;
   16794:	e008      	b.n	167a8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   16796:	4b07      	ldr	r3, [pc, #28]	; (167b4 <system_apb_clock_set_mask+0x58>)
   16798:	4a06      	ldr	r2, [pc, #24]	; (167b4 <system_apb_clock_set_mask+0x58>)
   1679a:	6a11      	ldr	r1, [r2, #32]
   1679c:	683a      	ldr	r2, [r7, #0]
   1679e:	430a      	orrs	r2, r1
   167a0:	621a      	str	r2, [r3, #32]
			break;
   167a2:	e001      	b.n	167a8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   167a4:	2317      	movs	r3, #23
   167a6:	e000      	b.n	167aa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   167a8:	2300      	movs	r3, #0
}
   167aa:	0018      	movs	r0, r3
   167ac:	46bd      	mov	sp, r7
   167ae:	b002      	add	sp, #8
   167b0:	bd80      	pop	{r7, pc}
   167b2:	46c0      	nop			; (mov r8, r8)
   167b4:	40000400 	.word	0x40000400

000167b8 <system_pinmux_get_config_defaults>:
{
   167b8:	b580      	push	{r7, lr}
   167ba:	b082      	sub	sp, #8
   167bc:	af00      	add	r7, sp, #0
   167be:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   167c0:	687b      	ldr	r3, [r7, #4]
   167c2:	2280      	movs	r2, #128	; 0x80
   167c4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   167c6:	687b      	ldr	r3, [r7, #4]
   167c8:	2200      	movs	r2, #0
   167ca:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   167cc:	687b      	ldr	r3, [r7, #4]
   167ce:	2201      	movs	r2, #1
   167d0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   167d2:	687b      	ldr	r3, [r7, #4]
   167d4:	2200      	movs	r2, #0
   167d6:	70da      	strb	r2, [r3, #3]
}
   167d8:	46c0      	nop			; (mov r8, r8)
   167da:	46bd      	mov	sp, r7
   167dc:	b002      	add	sp, #8
   167de:	bd80      	pop	{r7, pc}

000167e0 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   167e0:	b580      	push	{r7, lr}
   167e2:	b084      	sub	sp, #16
   167e4:	af00      	add	r7, sp, #0
   167e6:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   167e8:	2300      	movs	r3, #0
   167ea:	60fb      	str	r3, [r7, #12]
   167ec:	e00c      	b.n	16808 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   167ee:	4b0a      	ldr	r3, [pc, #40]	; (16818 <_tcc_get_inst_index+0x38>)
   167f0:	68fa      	ldr	r2, [r7, #12]
   167f2:	0092      	lsls	r2, r2, #2
   167f4:	58d2      	ldr	r2, [r2, r3]
   167f6:	687b      	ldr	r3, [r7, #4]
   167f8:	429a      	cmp	r2, r3
   167fa:	d102      	bne.n	16802 <_tcc_get_inst_index+0x22>
			return i;
   167fc:	68fb      	ldr	r3, [r7, #12]
   167fe:	b2db      	uxtb	r3, r3
   16800:	e006      	b.n	16810 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   16802:	68fb      	ldr	r3, [r7, #12]
   16804:	3301      	adds	r3, #1
   16806:	60fb      	str	r3, [r7, #12]
   16808:	68fb      	ldr	r3, [r7, #12]
   1680a:	2b02      	cmp	r3, #2
   1680c:	d9ef      	bls.n	167ee <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   1680e:	2300      	movs	r3, #0
}
   16810:	0018      	movs	r0, r3
   16812:	46bd      	mov	sp, r7
   16814:	b004      	add	sp, #16
   16816:	bd80      	pop	{r7, pc}
   16818:	00026504 	.word	0x00026504

0001681c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   1681c:	b590      	push	{r4, r7, lr}
   1681e:	b085      	sub	sp, #20
   16820:	af00      	add	r7, sp, #0
   16822:	6078      	str	r0, [r7, #4]
   16824:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   16826:	230f      	movs	r3, #15
   16828:	18fc      	adds	r4, r7, r3
   1682a:	683b      	ldr	r3, [r7, #0]
   1682c:	0018      	movs	r0, r3
   1682e:	4bad      	ldr	r3, [pc, #692]	; (16ae4 <tcc_get_config_defaults+0x2c8>)
   16830:	4798      	blx	r3
   16832:	0003      	movs	r3, r0
   16834:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   16836:	687b      	ldr	r3, [r7, #4]
   16838:	2200      	movs	r2, #0
   1683a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   1683c:	230f      	movs	r3, #15
   1683e:	18fb      	adds	r3, r7, r3
   16840:	781a      	ldrb	r2, [r3, #0]
   16842:	4ba9      	ldr	r3, [pc, #676]	; (16ae8 <tcc_get_config_defaults+0x2cc>)
   16844:	0092      	lsls	r2, r2, #2
   16846:	58d2      	ldr	r2, [r2, r3]
   16848:	687b      	ldr	r3, [r7, #4]
   1684a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   1684c:	687b      	ldr	r3, [r7, #4]
   1684e:	2200      	movs	r2, #0
   16850:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   16852:	687b      	ldr	r3, [r7, #4]
   16854:	2200      	movs	r2, #0
   16856:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   16858:	687b      	ldr	r3, [r7, #4]
   1685a:	2200      	movs	r2, #0
   1685c:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   1685e:	687b      	ldr	r3, [r7, #4]
   16860:	2200      	movs	r2, #0
   16862:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   16864:	687b      	ldr	r3, [r7, #4]
   16866:	2200      	movs	r2, #0
   16868:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1686a:	687b      	ldr	r3, [r7, #4]
   1686c:	2200      	movs	r2, #0
   1686e:	61da      	str	r2, [r3, #28]
   16870:	687b      	ldr	r3, [r7, #4]
   16872:	2200      	movs	r2, #0
   16874:	621a      	str	r2, [r3, #32]
   16876:	687b      	ldr	r3, [r7, #4]
   16878:	2200      	movs	r2, #0
   1687a:	625a      	str	r2, [r3, #36]	; 0x24
   1687c:	687b      	ldr	r3, [r7, #4]
   1687e:	2200      	movs	r2, #0
   16880:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   16882:	687b      	ldr	r3, [r7, #4]
   16884:	2200      	movs	r2, #0
   16886:	751a      	strb	r2, [r3, #20]
   16888:	687b      	ldr	r3, [r7, #4]
   1688a:	2200      	movs	r2, #0
   1688c:	755a      	strb	r2, [r3, #21]
   1688e:	687b      	ldr	r3, [r7, #4]
   16890:	2200      	movs	r2, #0
   16892:	759a      	strb	r2, [r3, #22]
   16894:	687b      	ldr	r3, [r7, #4]
   16896:	2200      	movs	r2, #0
   16898:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   1689a:	687b      	ldr	r3, [r7, #4]
   1689c:	2200      	movs	r2, #0
   1689e:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   168a0:	687b      	ldr	r3, [r7, #4]
   168a2:	2200      	movs	r2, #0
   168a4:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   168a6:	687b      	ldr	r3, [r7, #4]
   168a8:	2200      	movs	r2, #0
   168aa:	741a      	strb	r2, [r3, #16]
   168ac:	687b      	ldr	r3, [r7, #4]
   168ae:	2200      	movs	r2, #0
   168b0:	745a      	strb	r2, [r3, #17]
   168b2:	687b      	ldr	r3, [r7, #4]
   168b4:	2200      	movs	r2, #0
   168b6:	749a      	strb	r2, [r3, #18]
   168b8:	687b      	ldr	r3, [r7, #4]
   168ba:	2200      	movs	r2, #0
   168bc:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   168be:	687b      	ldr	r3, [r7, #4]
   168c0:	222c      	movs	r2, #44	; 0x2c
   168c2:	2100      	movs	r1, #0
   168c4:	5499      	strb	r1, [r3, r2]
   168c6:	687b      	ldr	r3, [r7, #4]
   168c8:	222d      	movs	r2, #45	; 0x2d
   168ca:	2100      	movs	r1, #0
   168cc:	5499      	strb	r1, [r3, r2]
   168ce:	687b      	ldr	r3, [r7, #4]
   168d0:	222e      	movs	r2, #46	; 0x2e
   168d2:	2100      	movs	r1, #0
   168d4:	5499      	strb	r1, [r3, r2]
   168d6:	687b      	ldr	r3, [r7, #4]
   168d8:	222f      	movs	r2, #47	; 0x2f
   168da:	2100      	movs	r1, #0
   168dc:	5499      	strb	r1, [r3, r2]
   168de:	687b      	ldr	r3, [r7, #4]
   168e0:	2230      	movs	r2, #48	; 0x30
   168e2:	2100      	movs	r1, #0
   168e4:	5499      	strb	r1, [r3, r2]
   168e6:	687b      	ldr	r3, [r7, #4]
   168e8:	2231      	movs	r2, #49	; 0x31
   168ea:	2100      	movs	r1, #0
   168ec:	5499      	strb	r1, [r3, r2]
   168ee:	687b      	ldr	r3, [r7, #4]
   168f0:	2232      	movs	r2, #50	; 0x32
   168f2:	2100      	movs	r1, #0
   168f4:	5499      	strb	r1, [r3, r2]
   168f6:	687b      	ldr	r3, [r7, #4]
   168f8:	2233      	movs	r2, #51	; 0x33
   168fa:	2100      	movs	r1, #0
   168fc:	5499      	strb	r1, [r3, r2]
   168fe:	687b      	ldr	r3, [r7, #4]
   16900:	2234      	movs	r2, #52	; 0x34
   16902:	2100      	movs	r1, #0
   16904:	5499      	strb	r1, [r3, r2]
   16906:	687b      	ldr	r3, [r7, #4]
   16908:	2235      	movs	r2, #53	; 0x35
   1690a:	2100      	movs	r1, #0
   1690c:	5499      	strb	r1, [r3, r2]
   1690e:	687b      	ldr	r3, [r7, #4]
   16910:	2236      	movs	r2, #54	; 0x36
   16912:	2100      	movs	r1, #0
   16914:	5499      	strb	r1, [r3, r2]
   16916:	687b      	ldr	r3, [r7, #4]
   16918:	2237      	movs	r2, #55	; 0x37
   1691a:	2100      	movs	r1, #0
   1691c:	5499      	strb	r1, [r3, r2]
   1691e:	687b      	ldr	r3, [r7, #4]
   16920:	2238      	movs	r2, #56	; 0x38
   16922:	2100      	movs	r1, #0
   16924:	5499      	strb	r1, [r3, r2]
   16926:	687b      	ldr	r3, [r7, #4]
   16928:	2239      	movs	r2, #57	; 0x39
   1692a:	2100      	movs	r1, #0
   1692c:	5499      	strb	r1, [r3, r2]
   1692e:	687b      	ldr	r3, [r7, #4]
   16930:	223a      	movs	r2, #58	; 0x3a
   16932:	2100      	movs	r1, #0
   16934:	5499      	strb	r1, [r3, r2]
   16936:	687b      	ldr	r3, [r7, #4]
   16938:	223b      	movs	r2, #59	; 0x3b
   1693a:	2100      	movs	r1, #0
   1693c:	5499      	strb	r1, [r3, r2]
   1693e:	687b      	ldr	r3, [r7, #4]
   16940:	223c      	movs	r2, #60	; 0x3c
   16942:	2100      	movs	r1, #0
   16944:	5499      	strb	r1, [r3, r2]
   16946:	687b      	ldr	r3, [r7, #4]
   16948:	223d      	movs	r2, #61	; 0x3d
   1694a:	2100      	movs	r1, #0
   1694c:	5499      	strb	r1, [r3, r2]
   1694e:	687b      	ldr	r3, [r7, #4]
   16950:	223e      	movs	r2, #62	; 0x3e
   16952:	2100      	movs	r1, #0
   16954:	5499      	strb	r1, [r3, r2]
   16956:	687b      	ldr	r3, [r7, #4]
   16958:	223f      	movs	r2, #63	; 0x3f
   1695a:	2100      	movs	r1, #0
   1695c:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   1695e:	687b      	ldr	r3, [r7, #4]
   16960:	2240      	movs	r2, #64	; 0x40
   16962:	2100      	movs	r1, #0
   16964:	5499      	strb	r1, [r3, r2]
   16966:	687b      	ldr	r3, [r7, #4]
   16968:	2241      	movs	r2, #65	; 0x41
   1696a:	2100      	movs	r1, #0
   1696c:	5499      	strb	r1, [r3, r2]
   1696e:	687b      	ldr	r3, [r7, #4]
   16970:	2242      	movs	r2, #66	; 0x42
   16972:	2100      	movs	r1, #0
   16974:	5499      	strb	r1, [r3, r2]
   16976:	687b      	ldr	r3, [r7, #4]
   16978:	2243      	movs	r2, #67	; 0x43
   1697a:	2100      	movs	r1, #0
   1697c:	5499      	strb	r1, [r3, r2]
   1697e:	687b      	ldr	r3, [r7, #4]
   16980:	2244      	movs	r2, #68	; 0x44
   16982:	2100      	movs	r1, #0
   16984:	5499      	strb	r1, [r3, r2]
   16986:	687b      	ldr	r3, [r7, #4]
   16988:	2245      	movs	r2, #69	; 0x45
   1698a:	2100      	movs	r1, #0
   1698c:	5499      	strb	r1, [r3, r2]
   1698e:	687b      	ldr	r3, [r7, #4]
   16990:	2246      	movs	r2, #70	; 0x46
   16992:	2100      	movs	r1, #0
   16994:	5499      	strb	r1, [r3, r2]
   16996:	687b      	ldr	r3, [r7, #4]
   16998:	2247      	movs	r2, #71	; 0x47
   1699a:	2100      	movs	r1, #0
   1699c:	5499      	strb	r1, [r3, r2]
   1699e:	687b      	ldr	r3, [r7, #4]
   169a0:	2248      	movs	r2, #72	; 0x48
   169a2:	2100      	movs	r1, #0
   169a4:	5499      	strb	r1, [r3, r2]
   169a6:	687b      	ldr	r3, [r7, #4]
   169a8:	2249      	movs	r2, #73	; 0x49
   169aa:	2100      	movs	r1, #0
   169ac:	5499      	strb	r1, [r3, r2]
   169ae:	687b      	ldr	r3, [r7, #4]
   169b0:	224a      	movs	r2, #74	; 0x4a
   169b2:	2100      	movs	r1, #0
   169b4:	5499      	strb	r1, [r3, r2]
   169b6:	687b      	ldr	r3, [r7, #4]
   169b8:	224b      	movs	r2, #75	; 0x4b
   169ba:	2100      	movs	r1, #0
   169bc:	5499      	strb	r1, [r3, r2]
   169be:	687b      	ldr	r3, [r7, #4]
   169c0:	224c      	movs	r2, #76	; 0x4c
   169c2:	2100      	movs	r1, #0
   169c4:	5499      	strb	r1, [r3, r2]
   169c6:	687b      	ldr	r3, [r7, #4]
   169c8:	224d      	movs	r2, #77	; 0x4d
   169ca:	2100      	movs	r1, #0
   169cc:	5499      	strb	r1, [r3, r2]
   169ce:	687b      	ldr	r3, [r7, #4]
   169d0:	224e      	movs	r2, #78	; 0x4e
   169d2:	2100      	movs	r1, #0
   169d4:	5499      	strb	r1, [r3, r2]
   169d6:	687b      	ldr	r3, [r7, #4]
   169d8:	224f      	movs	r2, #79	; 0x4f
   169da:	2100      	movs	r1, #0
   169dc:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   169de:	687b      	ldr	r3, [r7, #4]
   169e0:	2250      	movs	r2, #80	; 0x50
   169e2:	2100      	movs	r1, #0
   169e4:	5499      	strb	r1, [r3, r2]
   169e6:	687b      	ldr	r3, [r7, #4]
   169e8:	2251      	movs	r2, #81	; 0x51
   169ea:	2100      	movs	r1, #0
   169ec:	5499      	strb	r1, [r3, r2]
   169ee:	687b      	ldr	r3, [r7, #4]
   169f0:	2252      	movs	r2, #82	; 0x52
   169f2:	2100      	movs	r1, #0
   169f4:	5499      	strb	r1, [r3, r2]
   169f6:	687b      	ldr	r3, [r7, #4]
   169f8:	2253      	movs	r2, #83	; 0x53
   169fa:	2100      	movs	r1, #0
   169fc:	5499      	strb	r1, [r3, r2]
   169fe:	687b      	ldr	r3, [r7, #4]
   16a00:	2254      	movs	r2, #84	; 0x54
   16a02:	2100      	movs	r1, #0
   16a04:	5499      	strb	r1, [r3, r2]
   16a06:	687b      	ldr	r3, [r7, #4]
   16a08:	2255      	movs	r2, #85	; 0x55
   16a0a:	2100      	movs	r1, #0
   16a0c:	5499      	strb	r1, [r3, r2]
   16a0e:	687b      	ldr	r3, [r7, #4]
   16a10:	2256      	movs	r2, #86	; 0x56
   16a12:	2100      	movs	r1, #0
   16a14:	5499      	strb	r1, [r3, r2]
   16a16:	687b      	ldr	r3, [r7, #4]
   16a18:	2257      	movs	r2, #87	; 0x57
   16a1a:	2100      	movs	r1, #0
   16a1c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   16a1e:	687b      	ldr	r3, [r7, #4]
   16a20:	2298      	movs	r2, #152	; 0x98
   16a22:	2100      	movs	r1, #0
   16a24:	5499      	strb	r1, [r3, r2]
   16a26:	687b      	ldr	r3, [r7, #4]
   16a28:	2200      	movs	r2, #0
   16a2a:	659a      	str	r2, [r3, #88]	; 0x58
   16a2c:	687b      	ldr	r3, [r7, #4]
   16a2e:	2200      	movs	r2, #0
   16a30:	679a      	str	r2, [r3, #120]	; 0x78
   16a32:	687b      	ldr	r3, [r7, #4]
   16a34:	2299      	movs	r2, #153	; 0x99
   16a36:	2100      	movs	r1, #0
   16a38:	5499      	strb	r1, [r3, r2]
   16a3a:	687b      	ldr	r3, [r7, #4]
   16a3c:	2200      	movs	r2, #0
   16a3e:	65da      	str	r2, [r3, #92]	; 0x5c
   16a40:	687b      	ldr	r3, [r7, #4]
   16a42:	2200      	movs	r2, #0
   16a44:	67da      	str	r2, [r3, #124]	; 0x7c
   16a46:	687b      	ldr	r3, [r7, #4]
   16a48:	229a      	movs	r2, #154	; 0x9a
   16a4a:	2100      	movs	r1, #0
   16a4c:	5499      	strb	r1, [r3, r2]
   16a4e:	687b      	ldr	r3, [r7, #4]
   16a50:	2200      	movs	r2, #0
   16a52:	661a      	str	r2, [r3, #96]	; 0x60
   16a54:	687b      	ldr	r3, [r7, #4]
   16a56:	2280      	movs	r2, #128	; 0x80
   16a58:	2100      	movs	r1, #0
   16a5a:	5099      	str	r1, [r3, r2]
   16a5c:	687b      	ldr	r3, [r7, #4]
   16a5e:	229b      	movs	r2, #155	; 0x9b
   16a60:	2100      	movs	r1, #0
   16a62:	5499      	strb	r1, [r3, r2]
   16a64:	687b      	ldr	r3, [r7, #4]
   16a66:	2200      	movs	r2, #0
   16a68:	665a      	str	r2, [r3, #100]	; 0x64
   16a6a:	687b      	ldr	r3, [r7, #4]
   16a6c:	2284      	movs	r2, #132	; 0x84
   16a6e:	2100      	movs	r1, #0
   16a70:	5099      	str	r1, [r3, r2]
   16a72:	687b      	ldr	r3, [r7, #4]
   16a74:	229c      	movs	r2, #156	; 0x9c
   16a76:	2100      	movs	r1, #0
   16a78:	5499      	strb	r1, [r3, r2]
   16a7a:	687b      	ldr	r3, [r7, #4]
   16a7c:	2200      	movs	r2, #0
   16a7e:	669a      	str	r2, [r3, #104]	; 0x68
   16a80:	687b      	ldr	r3, [r7, #4]
   16a82:	2288      	movs	r2, #136	; 0x88
   16a84:	2100      	movs	r1, #0
   16a86:	5099      	str	r1, [r3, r2]
   16a88:	687b      	ldr	r3, [r7, #4]
   16a8a:	229d      	movs	r2, #157	; 0x9d
   16a8c:	2100      	movs	r1, #0
   16a8e:	5499      	strb	r1, [r3, r2]
   16a90:	687b      	ldr	r3, [r7, #4]
   16a92:	2200      	movs	r2, #0
   16a94:	66da      	str	r2, [r3, #108]	; 0x6c
   16a96:	687b      	ldr	r3, [r7, #4]
   16a98:	228c      	movs	r2, #140	; 0x8c
   16a9a:	2100      	movs	r1, #0
   16a9c:	5099      	str	r1, [r3, r2]
   16a9e:	687b      	ldr	r3, [r7, #4]
   16aa0:	229e      	movs	r2, #158	; 0x9e
   16aa2:	2100      	movs	r1, #0
   16aa4:	5499      	strb	r1, [r3, r2]
   16aa6:	687b      	ldr	r3, [r7, #4]
   16aa8:	2200      	movs	r2, #0
   16aaa:	671a      	str	r2, [r3, #112]	; 0x70
   16aac:	687b      	ldr	r3, [r7, #4]
   16aae:	2290      	movs	r2, #144	; 0x90
   16ab0:	2100      	movs	r1, #0
   16ab2:	5099      	str	r1, [r3, r2]
   16ab4:	687b      	ldr	r3, [r7, #4]
   16ab6:	229f      	movs	r2, #159	; 0x9f
   16ab8:	2100      	movs	r1, #0
   16aba:	5499      	strb	r1, [r3, r2]
   16abc:	687b      	ldr	r3, [r7, #4]
   16abe:	2200      	movs	r2, #0
   16ac0:	675a      	str	r2, [r3, #116]	; 0x74
   16ac2:	687b      	ldr	r3, [r7, #4]
   16ac4:	2294      	movs	r2, #148	; 0x94
   16ac6:	2100      	movs	r1, #0
   16ac8:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   16aca:	687b      	ldr	r3, [r7, #4]
   16acc:	22a0      	movs	r2, #160	; 0xa0
   16ace:	2101      	movs	r1, #1
   16ad0:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   16ad2:	687b      	ldr	r3, [r7, #4]
   16ad4:	22a1      	movs	r2, #161	; 0xa1
   16ad6:	2100      	movs	r1, #0
   16ad8:	5499      	strb	r1, [r3, r2]
}
   16ada:	46c0      	nop			; (mov r8, r8)
   16adc:	46bd      	mov	sp, r7
   16ade:	b005      	add	sp, #20
   16ae0:	bd90      	pop	{r4, r7, pc}
   16ae2:	46c0      	nop			; (mov r8, r8)
   16ae4:	000167e1 	.word	0x000167e1
   16ae8:	00026520 	.word	0x00026520

00016aec <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   16aec:	b580      	push	{r7, lr}
   16aee:	b086      	sub	sp, #24
   16af0:	af00      	add	r7, sp, #0
   16af2:	60b9      	str	r1, [r7, #8]
   16af4:	607a      	str	r2, [r7, #4]
   16af6:	230f      	movs	r3, #15
   16af8:	18fb      	adds	r3, r7, r3
   16afa:	1c02      	adds	r2, r0, #0
   16afc:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   16afe:	2300      	movs	r3, #0
   16b00:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   16b02:	2300      	movs	r3, #0
   16b04:	613b      	str	r3, [r7, #16]
   16b06:	e01d      	b.n	16b44 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   16b08:	68ba      	ldr	r2, [r7, #8]
   16b0a:	693b      	ldr	r3, [r7, #16]
   16b0c:	18d3      	adds	r3, r2, r3
   16b0e:	3310      	adds	r3, #16
   16b10:	781b      	ldrb	r3, [r3, #0]
   16b12:	2b01      	cmp	r3, #1
   16b14:	d113      	bne.n	16b3e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   16b16:	230f      	movs	r3, #15
   16b18:	18fb      	adds	r3, r7, r3
   16b1a:	781b      	ldrb	r3, [r3, #0]
   16b1c:	4a1b      	ldr	r2, [pc, #108]	; (16b8c <_tcc_build_ctrla+0xa0>)
   16b1e:	5cd3      	ldrb	r3, [r2, r3]
   16b20:	001a      	movs	r2, r3
   16b22:	693b      	ldr	r3, [r7, #16]
   16b24:	429a      	cmp	r2, r3
   16b26:	da01      	bge.n	16b2c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   16b28:	2317      	movs	r3, #23
   16b2a:	e02a      	b.n	16b82 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   16b2c:	2380      	movs	r3, #128	; 0x80
   16b2e:	045a      	lsls	r2, r3, #17
   16b30:	693b      	ldr	r3, [r7, #16]
   16b32:	409a      	lsls	r2, r3
   16b34:	0013      	movs	r3, r2
   16b36:	001a      	movs	r2, r3
   16b38:	697b      	ldr	r3, [r7, #20]
   16b3a:	4313      	orrs	r3, r2
   16b3c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   16b3e:	693b      	ldr	r3, [r7, #16]
   16b40:	3301      	adds	r3, #1
   16b42:	613b      	str	r3, [r7, #16]
   16b44:	693b      	ldr	r3, [r7, #16]
   16b46:	2b03      	cmp	r3, #3
   16b48:	ddde      	ble.n	16b08 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   16b4a:	68bb      	ldr	r3, [r7, #8]
   16b4c:	22a1      	movs	r2, #161	; 0xa1
   16b4e:	5c9b      	ldrb	r3, [r3, r2]
   16b50:	2b00      	cmp	r3, #0
   16b52:	d004      	beq.n	16b5e <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   16b54:	697b      	ldr	r3, [r7, #20]
   16b56:	2280      	movs	r2, #128	; 0x80
   16b58:	0112      	lsls	r2, r2, #4
   16b5a:	4313      	orrs	r3, r2
   16b5c:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   16b5e:	68bb      	ldr	r3, [r7, #8]
   16b60:	7b1b      	ldrb	r3, [r3, #12]
   16b62:	031b      	lsls	r3, r3, #12
   16b64:	001a      	movs	r2, r3
   16b66:	697b      	ldr	r3, [r7, #20]
   16b68:	4313      	orrs	r3, r2
   16b6a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   16b6c:	68bb      	ldr	r3, [r7, #8]
   16b6e:	7adb      	ldrb	r3, [r3, #11]
   16b70:	021b      	lsls	r3, r3, #8
   16b72:	001a      	movs	r2, r3
   16b74:	697b      	ldr	r3, [r7, #20]
   16b76:	4313      	orrs	r3, r2
   16b78:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   16b7a:	687b      	ldr	r3, [r7, #4]
   16b7c:	697a      	ldr	r2, [r7, #20]
   16b7e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   16b80:	2300      	movs	r3, #0
}
   16b82:	0018      	movs	r0, r3
   16b84:	46bd      	mov	sp, r7
   16b86:	b006      	add	sp, #24
   16b88:	bd80      	pop	{r7, pc}
   16b8a:	46c0      	nop			; (mov r8, r8)
   16b8c:	0002652c 	.word	0x0002652c

00016b90 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   16b90:	b580      	push	{r7, lr}
   16b92:	b086      	sub	sp, #24
   16b94:	af00      	add	r7, sp, #0
   16b96:	60b9      	str	r1, [r7, #8]
   16b98:	607a      	str	r2, [r7, #4]
   16b9a:	230f      	movs	r3, #15
   16b9c:	18fb      	adds	r3, r7, r3
   16b9e:	1c02      	adds	r2, r0, #0
   16ba0:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   16ba2:	2317      	movs	r3, #23
   16ba4:	18fb      	adds	r3, r7, r3
   16ba6:	2200      	movs	r2, #0
   16ba8:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   16baa:	68bb      	ldr	r3, [r7, #8]
   16bac:	7a1b      	ldrb	r3, [r3, #8]
   16bae:	2b00      	cmp	r3, #0
   16bb0:	d007      	beq.n	16bc2 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   16bb2:	2317      	movs	r3, #23
   16bb4:	18fb      	adds	r3, r7, r3
   16bb6:	2217      	movs	r2, #23
   16bb8:	18ba      	adds	r2, r7, r2
   16bba:	7812      	ldrb	r2, [r2, #0]
   16bbc:	2104      	movs	r1, #4
   16bbe:	430a      	orrs	r2, r1
   16bc0:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   16bc2:	68bb      	ldr	r3, [r7, #8]
   16bc4:	7a5b      	ldrb	r3, [r3, #9]
   16bc6:	2b01      	cmp	r3, #1
   16bc8:	d107      	bne.n	16bda <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   16bca:	2317      	movs	r3, #23
   16bcc:	18fb      	adds	r3, r7, r3
   16bce:	2217      	movs	r2, #23
   16bd0:	18ba      	adds	r2, r7, r2
   16bd2:	7812      	ldrb	r2, [r2, #0]
   16bd4:	2101      	movs	r1, #1
   16bd6:	430a      	orrs	r2, r1
   16bd8:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   16bda:	687b      	ldr	r3, [r7, #4]
   16bdc:	2217      	movs	r2, #23
   16bde:	18ba      	adds	r2, r7, r2
   16be0:	7812      	ldrb	r2, [r2, #0]
   16be2:	701a      	strb	r2, [r3, #0]
}
   16be4:	46c0      	nop			; (mov r8, r8)
   16be6:	46bd      	mov	sp, r7
   16be8:	b006      	add	sp, #24
   16bea:	bd80      	pop	{r7, pc}

00016bec <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   16bec:	b580      	push	{r7, lr}
   16bee:	b088      	sub	sp, #32
   16bf0:	af00      	add	r7, sp, #0
   16bf2:	60b9      	str	r1, [r7, #8]
   16bf4:	607a      	str	r2, [r7, #4]
   16bf6:	230f      	movs	r3, #15
   16bf8:	18fb      	adds	r3, r7, r3
   16bfa:	1c02      	adds	r2, r0, #0
   16bfc:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   16bfe:	230f      	movs	r3, #15
   16c00:	18fb      	adds	r3, r7, r3
   16c02:	781a      	ldrb	r2, [r3, #0]
   16c04:	231b      	movs	r3, #27
   16c06:	18fb      	adds	r3, r7, r3
   16c08:	493e      	ldr	r1, [pc, #248]	; (16d04 <_tcc_build_faults+0x118>)
   16c0a:	5c8a      	ldrb	r2, [r1, r2]
   16c0c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   16c0e:	2300      	movs	r3, #0
   16c10:	61fb      	str	r3, [r7, #28]
   16c12:	e06e      	b.n	16cf2 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   16c14:	69fa      	ldr	r2, [r7, #28]
   16c16:	0013      	movs	r3, r2
   16c18:	009b      	lsls	r3, r3, #2
   16c1a:	189b      	adds	r3, r3, r2
   16c1c:	005b      	lsls	r3, r3, #1
   16c1e:	3328      	adds	r3, #40	; 0x28
   16c20:	68ba      	ldr	r2, [r7, #8]
   16c22:	18d3      	adds	r3, r2, r3
   16c24:	3304      	adds	r3, #4
   16c26:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   16c28:	697b      	ldr	r3, [r7, #20]
   16c2a:	7a5b      	ldrb	r3, [r3, #9]
   16c2c:	221b      	movs	r2, #27
   16c2e:	18ba      	adds	r2, r7, r2
   16c30:	7812      	ldrb	r2, [r2, #0]
   16c32:	429a      	cmp	r2, r3
   16c34:	d801      	bhi.n	16c3a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   16c36:	2317      	movs	r3, #23
   16c38:	e05f      	b.n	16cfa <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   16c3a:	697b      	ldr	r3, [r7, #20]
   16c3c:	781b      	ldrb	r3, [r3, #0]
   16c3e:	2b0f      	cmp	r3, #15
   16c40:	d901      	bls.n	16c46 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   16c42:	2317      	movs	r3, #23
   16c44:	e059      	b.n	16cfa <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   16c46:	697b      	ldr	r3, [r7, #20]
   16c48:	781b      	ldrb	r3, [r3, #0]
   16c4a:	061b      	lsls	r3, r3, #24
   16c4c:	001a      	movs	r2, r3
   16c4e:	23f0      	movs	r3, #240	; 0xf0
   16c50:	051b      	lsls	r3, r3, #20
   16c52:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   16c54:	697b      	ldr	r3, [r7, #20]
   16c56:	785b      	ldrb	r3, [r3, #1]
   16c58:	041b      	lsls	r3, r3, #16
   16c5a:	0019      	movs	r1, r3
   16c5c:	23ff      	movs	r3, #255	; 0xff
   16c5e:	041b      	lsls	r3, r3, #16
   16c60:	400b      	ands	r3, r1
   16c62:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   16c64:	697b      	ldr	r3, [r7, #20]
   16c66:	789b      	ldrb	r3, [r3, #2]
   16c68:	2b00      	cmp	r3, #0
   16c6a:	d001      	beq.n	16c70 <_tcc_build_faults+0x84>
   16c6c:	2380      	movs	r3, #128	; 0x80
   16c6e:	e000      	b.n	16c72 <_tcc_build_faults+0x86>
   16c70:	2300      	movs	r3, #0
   16c72:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   16c74:	697b      	ldr	r3, [r7, #20]
   16c76:	78db      	ldrb	r3, [r3, #3]
   16c78:	2b00      	cmp	r3, #0
   16c7a:	d001      	beq.n	16c80 <_tcc_build_faults+0x94>
   16c7c:	2308      	movs	r3, #8
   16c7e:	e000      	b.n	16c82 <_tcc_build_faults+0x96>
   16c80:	2300      	movs	r3, #0
   16c82:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   16c84:	697b      	ldr	r3, [r7, #20]
   16c86:	791b      	ldrb	r3, [r3, #4]
   16c88:	2b00      	cmp	r3, #0
   16c8a:	d001      	beq.n	16c90 <_tcc_build_faults+0xa4>
   16c8c:	2310      	movs	r3, #16
   16c8e:	e000      	b.n	16c92 <_tcc_build_faults+0xa6>
   16c90:	2300      	movs	r3, #0
   16c92:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   16c94:	697b      	ldr	r3, [r7, #20]
   16c96:	795b      	ldrb	r3, [r3, #5]
   16c98:	0019      	movs	r1, r3
   16c9a:	2303      	movs	r3, #3
   16c9c:	400b      	ands	r3, r1
   16c9e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   16ca0:	697b      	ldr	r3, [r7, #20]
   16ca2:	799b      	ldrb	r3, [r3, #6]
   16ca4:	015b      	lsls	r3, r3, #5
   16ca6:	0019      	movs	r1, r3
   16ca8:	2360      	movs	r3, #96	; 0x60
   16caa:	400b      	ands	r3, r1
   16cac:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   16cae:	697b      	ldr	r3, [r7, #20]
   16cb0:	79db      	ldrb	r3, [r3, #7]
   16cb2:	021b      	lsls	r3, r3, #8
   16cb4:	0019      	movs	r1, r3
   16cb6:	23c0      	movs	r3, #192	; 0xc0
   16cb8:	009b      	lsls	r3, r3, #2
   16cba:	400b      	ands	r3, r1
   16cbc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   16cbe:	697b      	ldr	r3, [r7, #20]
   16cc0:	7a1b      	ldrb	r3, [r3, #8]
   16cc2:	031b      	lsls	r3, r3, #12
   16cc4:	0019      	movs	r1, r3
   16cc6:	23e0      	movs	r3, #224	; 0xe0
   16cc8:	01db      	lsls	r3, r3, #7
   16cca:	400b      	ands	r3, r1
   16ccc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   16cce:	697b      	ldr	r3, [r7, #20]
   16cd0:	7a5b      	ldrb	r3, [r3, #9]
   16cd2:	029b      	lsls	r3, r3, #10
   16cd4:	0019      	movs	r1, r3
   16cd6:	23c0      	movs	r3, #192	; 0xc0
   16cd8:	011b      	lsls	r3, r3, #4
   16cda:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   16cdc:	4313      	orrs	r3, r2
   16cde:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   16ce0:	69fb      	ldr	r3, [r7, #28]
   16ce2:	009b      	lsls	r3, r3, #2
   16ce4:	687a      	ldr	r2, [r7, #4]
   16ce6:	18d3      	adds	r3, r2, r3
   16ce8:	693a      	ldr	r2, [r7, #16]
   16cea:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   16cec:	69fb      	ldr	r3, [r7, #28]
   16cee:	3301      	adds	r3, #1
   16cf0:	61fb      	str	r3, [r7, #28]
   16cf2:	69fb      	ldr	r3, [r7, #28]
   16cf4:	2b01      	cmp	r3, #1
   16cf6:	dd8d      	ble.n	16c14 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   16cf8:	2300      	movs	r3, #0
}
   16cfa:	0018      	movs	r0, r3
   16cfc:	46bd      	mov	sp, r7
   16cfe:	b008      	add	sp, #32
   16d00:	bd80      	pop	{r7, pc}
   16d02:	46c0      	nop			; (mov r8, r8)
   16d04:	0002652c 	.word	0x0002652c

00016d08 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   16d08:	b580      	push	{r7, lr}
   16d0a:	b088      	sub	sp, #32
   16d0c:	af00      	add	r7, sp, #0
   16d0e:	60b9      	str	r1, [r7, #8]
   16d10:	607a      	str	r2, [r7, #4]
   16d12:	230f      	movs	r3, #15
   16d14:	18fb      	adds	r3, r7, r3
   16d16:	1c02      	adds	r2, r0, #0
   16d18:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   16d1a:	230f      	movs	r3, #15
   16d1c:	18fb      	adds	r3, r7, r3
   16d1e:	781a      	ldrb	r2, [r3, #0]
   16d20:	2317      	movs	r3, #23
   16d22:	18fb      	adds	r3, r7, r3
   16d24:	492d      	ldr	r1, [pc, #180]	; (16ddc <_tcc_build_drvctrl+0xd4>)
   16d26:	5c8a      	ldrb	r2, [r1, r2]
   16d28:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   16d2a:	2300      	movs	r3, #0
   16d2c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   16d2e:	2300      	movs	r3, #0
   16d30:	61fb      	str	r3, [r7, #28]
   16d32:	e048      	b.n	16dc6 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   16d34:	68ba      	ldr	r2, [r7, #8]
   16d36:	2150      	movs	r1, #80	; 0x50
   16d38:	69fb      	ldr	r3, [r7, #28]
   16d3a:	18d3      	adds	r3, r2, r3
   16d3c:	185b      	adds	r3, r3, r1
   16d3e:	781b      	ldrb	r3, [r3, #0]
   16d40:	2b00      	cmp	r3, #0
   16d42:	d010      	beq.n	16d66 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   16d44:	2317      	movs	r3, #23
   16d46:	18fb      	adds	r3, r7, r3
   16d48:	781a      	ldrb	r2, [r3, #0]
   16d4a:	69fb      	ldr	r3, [r7, #28]
   16d4c:	429a      	cmp	r2, r3
   16d4e:	d801      	bhi.n	16d54 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   16d50:	2317      	movs	r3, #23
   16d52:	e03f      	b.n	16dd4 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   16d54:	2380      	movs	r3, #128	; 0x80
   16d56:	025a      	lsls	r2, r3, #9
   16d58:	69fb      	ldr	r3, [r7, #28]
   16d5a:	409a      	lsls	r2, r3
   16d5c:	0013      	movs	r3, r2
   16d5e:	001a      	movs	r2, r3
   16d60:	69bb      	ldr	r3, [r7, #24]
   16d62:	4313      	orrs	r3, r2
   16d64:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   16d66:	68ba      	ldr	r2, [r7, #8]
   16d68:	69fb      	ldr	r3, [r7, #28]
   16d6a:	331c      	adds	r3, #28
   16d6c:	005b      	lsls	r3, r3, #1
   16d6e:	18d3      	adds	r3, r2, r3
   16d70:	3309      	adds	r3, #9
   16d72:	781b      	ldrb	r3, [r3, #0]
   16d74:	2b00      	cmp	r3, #0
   16d76:	d023      	beq.n	16dc0 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   16d78:	2317      	movs	r3, #23
   16d7a:	18fb      	adds	r3, r7, r3
   16d7c:	781a      	ldrb	r2, [r3, #0]
   16d7e:	69fb      	ldr	r3, [r7, #28]
   16d80:	429a      	cmp	r2, r3
   16d82:	d801      	bhi.n	16d88 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   16d84:	2317      	movs	r3, #23
   16d86:	e025      	b.n	16dd4 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   16d88:	68ba      	ldr	r2, [r7, #8]
   16d8a:	69fb      	ldr	r3, [r7, #28]
   16d8c:	331c      	adds	r3, #28
   16d8e:	005b      	lsls	r3, r3, #1
   16d90:	18d3      	adds	r3, r2, r3
   16d92:	3309      	adds	r3, #9
   16d94:	781b      	ldrb	r3, [r3, #0]
   16d96:	2b02      	cmp	r3, #2
   16d98:	d10a      	bne.n	16db0 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   16d9a:	2302      	movs	r3, #2
   16d9c:	33ff      	adds	r3, #255	; 0xff
   16d9e:	001a      	movs	r2, r3
   16da0:	69fb      	ldr	r3, [r7, #28]
   16da2:	409a      	lsls	r2, r3
   16da4:	0013      	movs	r3, r2
   16da6:	001a      	movs	r2, r3
   16da8:	69bb      	ldr	r3, [r7, #24]
   16daa:	4313      	orrs	r3, r2
   16dac:	61bb      	str	r3, [r7, #24]
   16dae:	e007      	b.n	16dc0 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   16db0:	2201      	movs	r2, #1
   16db2:	69fb      	ldr	r3, [r7, #28]
   16db4:	409a      	lsls	r2, r3
   16db6:	0013      	movs	r3, r2
   16db8:	001a      	movs	r2, r3
   16dba:	69bb      	ldr	r3, [r7, #24]
   16dbc:	4313      	orrs	r3, r2
   16dbe:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   16dc0:	69fb      	ldr	r3, [r7, #28]
   16dc2:	3301      	adds	r3, #1
   16dc4:	61fb      	str	r3, [r7, #28]
   16dc6:	69fb      	ldr	r3, [r7, #28]
   16dc8:	2b07      	cmp	r3, #7
   16dca:	d9b3      	bls.n	16d34 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   16dcc:	687b      	ldr	r3, [r7, #4]
   16dce:	69ba      	ldr	r2, [r7, #24]
   16dd0:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   16dd2:	2300      	movs	r3, #0
}
   16dd4:	0018      	movs	r0, r3
   16dd6:	46bd      	mov	sp, r7
   16dd8:	b008      	add	sp, #32
   16dda:	bd80      	pop	{r7, pc}
   16ddc:	00026530 	.word	0x00026530

00016de0 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   16de0:	b580      	push	{r7, lr}
   16de2:	b088      	sub	sp, #32
   16de4:	af00      	add	r7, sp, #0
   16de6:	60b9      	str	r1, [r7, #8]
   16de8:	607a      	str	r2, [r7, #4]
   16dea:	230f      	movs	r3, #15
   16dec:	18fb      	adds	r3, r7, r3
   16dee:	1c02      	adds	r2, r0, #0
   16df0:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   16df2:	230f      	movs	r3, #15
   16df4:	18fb      	adds	r3, r7, r3
   16df6:	781a      	ldrb	r2, [r3, #0]
   16df8:	2317      	movs	r3, #23
   16dfa:	18fb      	adds	r3, r7, r3
   16dfc:	491d      	ldr	r1, [pc, #116]	; (16e74 <_tcc_build_waves+0x94>)
   16dfe:	5c8a      	ldrb	r2, [r1, r2]
   16e00:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   16e02:	68bb      	ldr	r3, [r7, #8]
   16e04:	3310      	adds	r3, #16
   16e06:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   16e08:	693b      	ldr	r3, [r7, #16]
   16e0a:	7a5b      	ldrb	r3, [r3, #9]
   16e0c:	011b      	lsls	r3, r3, #4
   16e0e:	001a      	movs	r2, r3
   16e10:	2330      	movs	r3, #48	; 0x30
   16e12:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   16e14:	693b      	ldr	r3, [r7, #16]
   16e16:	7a1b      	ldrb	r3, [r3, #8]
   16e18:	0019      	movs	r1, r3
   16e1a:	2307      	movs	r3, #7
   16e1c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   16e1e:	4313      	orrs	r3, r2
   16e20:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   16e22:	2300      	movs	r3, #0
   16e24:	61fb      	str	r3, [r7, #28]
   16e26:	e01a      	b.n	16e5e <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   16e28:	693a      	ldr	r2, [r7, #16]
   16e2a:	69fb      	ldr	r3, [r7, #28]
   16e2c:	18d3      	adds	r3, r2, r3
   16e2e:	3304      	adds	r3, #4
   16e30:	781b      	ldrb	r3, [r3, #0]
   16e32:	2b00      	cmp	r3, #0
   16e34:	d010      	beq.n	16e58 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   16e36:	2317      	movs	r3, #23
   16e38:	18fb      	adds	r3, r7, r3
   16e3a:	781a      	ldrb	r2, [r3, #0]
   16e3c:	69fb      	ldr	r3, [r7, #28]
   16e3e:	429a      	cmp	r2, r3
   16e40:	dc01      	bgt.n	16e46 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   16e42:	2317      	movs	r3, #23
   16e44:	e012      	b.n	16e6c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   16e46:	2380      	movs	r3, #128	; 0x80
   16e48:	025a      	lsls	r2, r3, #9
   16e4a:	69fb      	ldr	r3, [r7, #28]
   16e4c:	409a      	lsls	r2, r3
   16e4e:	0013      	movs	r3, r2
   16e50:	001a      	movs	r2, r3
   16e52:	69bb      	ldr	r3, [r7, #24]
   16e54:	4313      	orrs	r3, r2
   16e56:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   16e58:	69fb      	ldr	r3, [r7, #28]
   16e5a:	3301      	adds	r3, #1
   16e5c:	61fb      	str	r3, [r7, #28]
   16e5e:	69fb      	ldr	r3, [r7, #28]
   16e60:	2b03      	cmp	r3, #3
   16e62:	dde1      	ble.n	16e28 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   16e64:	687b      	ldr	r3, [r7, #4]
   16e66:	69ba      	ldr	r2, [r7, #24]
   16e68:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   16e6a:	2300      	movs	r3, #0
}
   16e6c:	0018      	movs	r0, r3
   16e6e:	46bd      	mov	sp, r7
   16e70:	b008      	add	sp, #32
   16e72:	bd80      	pop	{r7, pc}
   16e74:	0002652c 	.word	0x0002652c

00016e78 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   16e78:	b590      	push	{r4, r7, lr}
   16e7a:	b091      	sub	sp, #68	; 0x44
   16e7c:	af00      	add	r7, sp, #0
   16e7e:	60f8      	str	r0, [r7, #12]
   16e80:	60b9      	str	r1, [r7, #8]
   16e82:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   16e84:	233b      	movs	r3, #59	; 0x3b
   16e86:	18fc      	adds	r4, r7, r3
   16e88:	68bb      	ldr	r3, [r7, #8]
   16e8a:	0018      	movs	r0, r3
   16e8c:	4bc4      	ldr	r3, [pc, #784]	; (171a0 <tcc_init+0x328>)
   16e8e:	4798      	blx	r3
   16e90:	0003      	movs	r3, r0
   16e92:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   16e94:	233b      	movs	r3, #59	; 0x3b
   16e96:	18fb      	adds	r3, r7, r3
   16e98:	781a      	ldrb	r2, [r3, #0]
   16e9a:	4bc2      	ldr	r3, [pc, #776]	; (171a4 <tcc_init+0x32c>)
   16e9c:	0092      	lsls	r2, r2, #2
   16e9e:	58d3      	ldr	r3, [r2, r3]
   16ea0:	0019      	movs	r1, r3
   16ea2:	2002      	movs	r0, #2
   16ea4:	4bc0      	ldr	r3, [pc, #768]	; (171a8 <tcc_init+0x330>)
   16ea6:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   16ea8:	68bb      	ldr	r3, [r7, #8]
   16eaa:	681b      	ldr	r3, [r3, #0]
   16eac:	2202      	movs	r2, #2
   16eae:	4013      	ands	r3, r2
   16eb0:	d001      	beq.n	16eb6 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   16eb2:	231c      	movs	r3, #28
   16eb4:	e1be      	b.n	17234 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   16eb6:	68bb      	ldr	r3, [r7, #8]
   16eb8:	681b      	ldr	r3, [r3, #0]
   16eba:	2201      	movs	r2, #1
   16ebc:	4013      	ands	r3, r2
   16ebe:	d001      	beq.n	16ec4 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   16ec0:	231c      	movs	r3, #28
   16ec2:	e1b7      	b.n	17234 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   16ec4:	233b      	movs	r3, #59	; 0x3b
   16ec6:	18fb      	adds	r3, r7, r3
   16ec8:	781a      	ldrb	r2, [r3, #0]
   16eca:	4bb8      	ldr	r3, [pc, #736]	; (171ac <tcc_init+0x334>)
   16ecc:	0092      	lsls	r2, r2, #2
   16ece:	58d3      	ldr	r3, [r2, r3]
   16ed0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   16ed2:	687b      	ldr	r3, [r7, #4]
   16ed4:	681a      	ldr	r2, [r3, #0]
   16ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ed8:	429a      	cmp	r2, r3
   16eda:	d804      	bhi.n	16ee6 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   16edc:	687b      	ldr	r3, [r7, #4]
   16ede:	685a      	ldr	r2, [r3, #4]
   16ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ee2:	429a      	cmp	r2, r3
   16ee4:	d901      	bls.n	16eea <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   16ee6:	2317      	movs	r3, #23
   16ee8:	e1a4      	b.n	17234 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   16eea:	2300      	movs	r3, #0
   16eec:	63fb      	str	r3, [r7, #60]	; 0x3c
   16eee:	e00e      	b.n	16f0e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   16ef0:	687a      	ldr	r2, [r7, #4]
   16ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16ef4:	3306      	adds	r3, #6
   16ef6:	009b      	lsls	r3, r3, #2
   16ef8:	18d3      	adds	r3, r2, r3
   16efa:	3304      	adds	r3, #4
   16efc:	681a      	ldr	r2, [r3, #0]
   16efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16f00:	429a      	cmp	r2, r3
   16f02:	d901      	bls.n	16f08 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   16f04:	2317      	movs	r3, #23
   16f06:	e195      	b.n	17234 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   16f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f0a:	3301      	adds	r3, #1
   16f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   16f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f10:	2b03      	cmp	r3, #3
   16f12:	dded      	ble.n	16ef0 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   16f14:	2300      	movs	r3, #0
   16f16:	63fb      	str	r3, [r7, #60]	; 0x3c
   16f18:	e019      	b.n	16f4e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   16f1a:	687a      	ldr	r2, [r7, #4]
   16f1c:	2198      	movs	r1, #152	; 0x98
   16f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f20:	18d3      	adds	r3, r2, r3
   16f22:	185b      	adds	r3, r3, r1
   16f24:	781b      	ldrb	r3, [r3, #0]
   16f26:	2201      	movs	r2, #1
   16f28:	4053      	eors	r3, r2
   16f2a:	b2db      	uxtb	r3, r3
   16f2c:	2b00      	cmp	r3, #0
   16f2e:	d10a      	bne.n	16f46 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   16f30:	233b      	movs	r3, #59	; 0x3b
   16f32:	18fb      	adds	r3, r7, r3
   16f34:	781b      	ldrb	r3, [r3, #0]
   16f36:	4a9e      	ldr	r2, [pc, #632]	; (171b0 <tcc_init+0x338>)
   16f38:	5cd3      	ldrb	r3, [r2, r3]
   16f3a:	001a      	movs	r2, r3
   16f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f3e:	429a      	cmp	r2, r3
   16f40:	dc02      	bgt.n	16f48 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   16f42:	2317      	movs	r3, #23
   16f44:	e176      	b.n	17234 <tcc_init+0x3bc>
			continue;
   16f46:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   16f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f4a:	3301      	adds	r3, #1
   16f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   16f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f50:	2b07      	cmp	r3, #7
   16f52:	dde2      	ble.n	16f1a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   16f54:	2300      	movs	r3, #0
   16f56:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   16f58:	2333      	movs	r3, #51	; 0x33
   16f5a:	18fc      	adds	r4, r7, r3
   16f5c:	232c      	movs	r3, #44	; 0x2c
   16f5e:	18fa      	adds	r2, r7, r3
   16f60:	6879      	ldr	r1, [r7, #4]
   16f62:	233b      	movs	r3, #59	; 0x3b
   16f64:	18fb      	adds	r3, r7, r3
   16f66:	781b      	ldrb	r3, [r3, #0]
   16f68:	0018      	movs	r0, r3
   16f6a:	4b92      	ldr	r3, [pc, #584]	; (171b4 <tcc_init+0x33c>)
   16f6c:	4798      	blx	r3
   16f6e:	0003      	movs	r3, r0
   16f70:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   16f72:	2333      	movs	r3, #51	; 0x33
   16f74:	18fb      	adds	r3, r7, r3
   16f76:	781b      	ldrb	r3, [r3, #0]
   16f78:	2b00      	cmp	r3, #0
   16f7a:	d003      	beq.n	16f84 <tcc_init+0x10c>
		return status;
   16f7c:	2333      	movs	r3, #51	; 0x33
   16f7e:	18fb      	adds	r3, r7, r3
   16f80:	781b      	ldrb	r3, [r3, #0]
   16f82:	e157      	b.n	17234 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   16f84:	232b      	movs	r3, #43	; 0x2b
   16f86:	18fa      	adds	r2, r7, r3
   16f88:	6879      	ldr	r1, [r7, #4]
   16f8a:	233b      	movs	r3, #59	; 0x3b
   16f8c:	18fb      	adds	r3, r7, r3
   16f8e:	781b      	ldrb	r3, [r3, #0]
   16f90:	0018      	movs	r0, r3
   16f92:	4b89      	ldr	r3, [pc, #548]	; (171b8 <tcc_init+0x340>)
   16f94:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   16f96:	2333      	movs	r3, #51	; 0x33
   16f98:	18fc      	adds	r4, r7, r3
   16f9a:	2320      	movs	r3, #32
   16f9c:	18fa      	adds	r2, r7, r3
   16f9e:	6879      	ldr	r1, [r7, #4]
   16fa0:	233b      	movs	r3, #59	; 0x3b
   16fa2:	18fb      	adds	r3, r7, r3
   16fa4:	781b      	ldrb	r3, [r3, #0]
   16fa6:	0018      	movs	r0, r3
   16fa8:	4b84      	ldr	r3, [pc, #528]	; (171bc <tcc_init+0x344>)
   16faa:	4798      	blx	r3
   16fac:	0003      	movs	r3, r0
   16fae:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   16fb0:	2333      	movs	r3, #51	; 0x33
   16fb2:	18fb      	adds	r3, r7, r3
   16fb4:	781b      	ldrb	r3, [r3, #0]
   16fb6:	2b00      	cmp	r3, #0
   16fb8:	d003      	beq.n	16fc2 <tcc_init+0x14a>
		return status;
   16fba:	2333      	movs	r3, #51	; 0x33
   16fbc:	18fb      	adds	r3, r7, r3
   16fbe:	781b      	ldrb	r3, [r3, #0]
   16fc0:	e138      	b.n	17234 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   16fc2:	2300      	movs	r3, #0
   16fc4:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   16fc6:	2333      	movs	r3, #51	; 0x33
   16fc8:	18fc      	adds	r4, r7, r3
   16fca:	231c      	movs	r3, #28
   16fcc:	18fa      	adds	r2, r7, r3
   16fce:	6879      	ldr	r1, [r7, #4]
   16fd0:	233b      	movs	r3, #59	; 0x3b
   16fd2:	18fb      	adds	r3, r7, r3
   16fd4:	781b      	ldrb	r3, [r3, #0]
   16fd6:	0018      	movs	r0, r3
   16fd8:	4b79      	ldr	r3, [pc, #484]	; (171c0 <tcc_init+0x348>)
   16fda:	4798      	blx	r3
   16fdc:	0003      	movs	r3, r0
   16fde:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   16fe0:	2333      	movs	r3, #51	; 0x33
   16fe2:	18fb      	adds	r3, r7, r3
   16fe4:	781b      	ldrb	r3, [r3, #0]
   16fe6:	2b00      	cmp	r3, #0
   16fe8:	d003      	beq.n	16ff2 <tcc_init+0x17a>
		return status;
   16fea:	2333      	movs	r3, #51	; 0x33
   16fec:	18fb      	adds	r3, r7, r3
   16fee:	781b      	ldrb	r3, [r3, #0]
   16ff0:	e120      	b.n	17234 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   16ff2:	2333      	movs	r3, #51	; 0x33
   16ff4:	18fc      	adds	r4, r7, r3
   16ff6:	2318      	movs	r3, #24
   16ff8:	18fa      	adds	r2, r7, r3
   16ffa:	6879      	ldr	r1, [r7, #4]
   16ffc:	233b      	movs	r3, #59	; 0x3b
   16ffe:	18fb      	adds	r3, r7, r3
   17000:	781b      	ldrb	r3, [r3, #0]
   17002:	0018      	movs	r0, r3
   17004:	4b6f      	ldr	r3, [pc, #444]	; (171c4 <tcc_init+0x34c>)
   17006:	4798      	blx	r3
   17008:	0003      	movs	r3, r0
   1700a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   1700c:	2333      	movs	r3, #51	; 0x33
   1700e:	18fb      	adds	r3, r7, r3
   17010:	781b      	ldrb	r3, [r3, #0]
   17012:	2b00      	cmp	r3, #0
   17014:	d003      	beq.n	1701e <tcc_init+0x1a6>
		return status;
   17016:	2333      	movs	r3, #51	; 0x33
   17018:	18fb      	adds	r3, r7, r3
   1701a:	781b      	ldrb	r3, [r3, #0]
   1701c:	e10a      	b.n	17234 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1701e:	2300      	movs	r3, #0
   17020:	63fb      	str	r3, [r7, #60]	; 0x3c
   17022:	e009      	b.n	17038 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   17024:	68fa      	ldr	r2, [r7, #12]
   17026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17028:	009b      	lsls	r3, r3, #2
   1702a:	18d3      	adds	r3, r2, r3
   1702c:	3304      	adds	r3, #4
   1702e:	2200      	movs	r2, #0
   17030:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   17032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17034:	3301      	adds	r3, #1
   17036:	63fb      	str	r3, [r7, #60]	; 0x3c
   17038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1703a:	2b0b      	cmp	r3, #11
   1703c:	ddf2      	ble.n	17024 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   1703e:	68fb      	ldr	r3, [r7, #12]
   17040:	2200      	movs	r2, #0
   17042:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   17044:	68fb      	ldr	r3, [r7, #12]
   17046:	2200      	movs	r2, #0
   17048:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   1704a:	233b      	movs	r3, #59	; 0x3b
   1704c:	18fb      	adds	r3, r7, r3
   1704e:	781a      	ldrb	r2, [r3, #0]
   17050:	4b5d      	ldr	r3, [pc, #372]	; (171c8 <tcc_init+0x350>)
   17052:	0092      	lsls	r2, r2, #2
   17054:	68f9      	ldr	r1, [r7, #12]
   17056:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   17058:	68fb      	ldr	r3, [r7, #12]
   1705a:	68ba      	ldr	r2, [r7, #8]
   1705c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   1705e:	687b      	ldr	r3, [r7, #4]
   17060:	22a0      	movs	r2, #160	; 0xa0
   17062:	5c99      	ldrb	r1, [r3, r2]
   17064:	68fb      	ldr	r3, [r7, #12]
   17066:	223c      	movs	r2, #60	; 0x3c
   17068:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   1706a:	2314      	movs	r3, #20
   1706c:	18fb      	adds	r3, r7, r3
   1706e:	0018      	movs	r0, r3
   17070:	4b56      	ldr	r3, [pc, #344]	; (171cc <tcc_init+0x354>)
   17072:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   17074:	687b      	ldr	r3, [r7, #4]
   17076:	7a9a      	ldrb	r2, [r3, #10]
   17078:	2314      	movs	r3, #20
   1707a:	18fb      	adds	r3, r7, r3
   1707c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   1707e:	233b      	movs	r3, #59	; 0x3b
   17080:	18fb      	adds	r3, r7, r3
   17082:	781b      	ldrb	r3, [r3, #0]
   17084:	4a52      	ldr	r2, [pc, #328]	; (171d0 <tcc_init+0x358>)
   17086:	5cd3      	ldrb	r3, [r2, r3]
   17088:	2214      	movs	r2, #20
   1708a:	18ba      	adds	r2, r7, r2
   1708c:	0011      	movs	r1, r2
   1708e:	0018      	movs	r0, r3
   17090:	4b50      	ldr	r3, [pc, #320]	; (171d4 <tcc_init+0x35c>)
   17092:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   17094:	233b      	movs	r3, #59	; 0x3b
   17096:	18fb      	adds	r3, r7, r3
   17098:	781b      	ldrb	r3, [r3, #0]
   1709a:	4a4d      	ldr	r2, [pc, #308]	; (171d0 <tcc_init+0x358>)
   1709c:	5cd3      	ldrb	r3, [r2, r3]
   1709e:	0018      	movs	r0, r3
   170a0:	4b4d      	ldr	r3, [pc, #308]	; (171d8 <tcc_init+0x360>)
   170a2:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   170a4:	2300      	movs	r3, #0
   170a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   170a8:	e02d      	b.n	17106 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   170aa:	687a      	ldr	r2, [r7, #4]
   170ac:	2198      	movs	r1, #152	; 0x98
   170ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   170b0:	18d3      	adds	r3, r2, r3
   170b2:	185b      	adds	r3, r3, r1
   170b4:	781b      	ldrb	r3, [r3, #0]
   170b6:	2201      	movs	r2, #1
   170b8:	4053      	eors	r3, r2
   170ba:	b2db      	uxtb	r3, r3
   170bc:	2b00      	cmp	r3, #0
   170be:	d11e      	bne.n	170fe <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   170c0:	2310      	movs	r3, #16
   170c2:	18fb      	adds	r3, r7, r3
   170c4:	0018      	movs	r0, r3
   170c6:	4b45      	ldr	r3, [pc, #276]	; (171dc <tcc_init+0x364>)
   170c8:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   170ca:	687b      	ldr	r3, [r7, #4]
   170cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   170ce:	321e      	adds	r2, #30
   170d0:	0092      	lsls	r2, r2, #2
   170d2:	58d3      	ldr	r3, [r2, r3]
   170d4:	b2da      	uxtb	r2, r3
   170d6:	2310      	movs	r3, #16
   170d8:	18fb      	adds	r3, r7, r3
   170da:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   170dc:	2310      	movs	r3, #16
   170de:	18fb      	adds	r3, r7, r3
   170e0:	2201      	movs	r2, #1
   170e2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   170e4:	687b      	ldr	r3, [r7, #4]
   170e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   170e8:	3216      	adds	r2, #22
   170ea:	0092      	lsls	r2, r2, #2
   170ec:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   170ee:	b2db      	uxtb	r3, r3
   170f0:	2210      	movs	r2, #16
   170f2:	18ba      	adds	r2, r7, r2
   170f4:	0011      	movs	r1, r2
   170f6:	0018      	movs	r0, r3
   170f8:	4b39      	ldr	r3, [pc, #228]	; (171e0 <tcc_init+0x368>)
   170fa:	4798      	blx	r3
   170fc:	e000      	b.n	17100 <tcc_init+0x288>
			continue;
   170fe:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   17100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17102:	3301      	adds	r3, #1
   17104:	63fb      	str	r3, [r7, #60]	; 0x3c
   17106:	233b      	movs	r3, #59	; 0x3b
   17108:	18fb      	adds	r3, r7, r3
   1710a:	781b      	ldrb	r3, [r3, #0]
   1710c:	4a28      	ldr	r2, [pc, #160]	; (171b0 <tcc_init+0x338>)
   1710e:	5cd3      	ldrb	r3, [r2, r3]
   17110:	001a      	movs	r2, r3
   17112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17114:	429a      	cmp	r2, r3
   17116:	dcc8      	bgt.n	170aa <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   17118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1711a:	68bb      	ldr	r3, [r7, #8]
   1711c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   1711e:	46c0      	nop			; (mov r8, r8)
   17120:	68bb      	ldr	r3, [r7, #8]
   17122:	689b      	ldr	r3, [r3, #8]
   17124:	2204      	movs	r2, #4
   17126:	4013      	ands	r3, r2
   17128:	d1fa      	bne.n	17120 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   1712a:	68bb      	ldr	r3, [r7, #8]
   1712c:	22ff      	movs	r2, #255	; 0xff
   1712e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   17130:	46c0      	nop			; (mov r8, r8)
   17132:	68bb      	ldr	r3, [r7, #8]
   17134:	689b      	ldr	r3, [r3, #8]
   17136:	2204      	movs	r2, #4
   17138:	4013      	ands	r3, r2
   1713a:	d1fa      	bne.n	17132 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   1713c:	232b      	movs	r3, #43	; 0x2b
   1713e:	18fb      	adds	r3, r7, r3
   17140:	781a      	ldrb	r2, [r3, #0]
   17142:	68bb      	ldr	r3, [r7, #8]
   17144:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   17146:	2320      	movs	r3, #32
   17148:	18fb      	adds	r3, r7, r3
   1714a:	681a      	ldr	r2, [r3, #0]
   1714c:	68bb      	ldr	r3, [r7, #8]
   1714e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   17150:	2320      	movs	r3, #32
   17152:	18fb      	adds	r3, r7, r3
   17154:	685a      	ldr	r2, [r3, #4]
   17156:	68bb      	ldr	r3, [r7, #8]
   17158:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   1715a:	69fa      	ldr	r2, [r7, #28]
   1715c:	68bb      	ldr	r3, [r7, #8]
   1715e:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   17160:	46c0      	nop			; (mov r8, r8)
   17162:	68bb      	ldr	r3, [r7, #8]
   17164:	689b      	ldr	r3, [r3, #8]
   17166:	4a1f      	ldr	r2, [pc, #124]	; (171e4 <tcc_init+0x36c>)
   17168:	4013      	ands	r3, r2
   1716a:	d1fa      	bne.n	17162 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   1716c:	69ba      	ldr	r2, [r7, #24]
   1716e:	68bb      	ldr	r3, [r7, #8]
   17170:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   17172:	46c0      	nop			; (mov r8, r8)
   17174:	68bb      	ldr	r3, [r7, #8]
   17176:	689b      	ldr	r3, [r3, #8]
   17178:	2210      	movs	r2, #16
   1717a:	4013      	ands	r3, r2
   1717c:	d1fa      	bne.n	17174 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   1717e:	687b      	ldr	r3, [r7, #4]
   17180:	681a      	ldr	r2, [r3, #0]
   17182:	68bb      	ldr	r3, [r7, #8]
   17184:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   17186:	46c0      	nop			; (mov r8, r8)
   17188:	68bb      	ldr	r3, [r7, #8]
   1718a:	689b      	ldr	r3, [r3, #8]
   1718c:	4a16      	ldr	r2, [pc, #88]	; (171e8 <tcc_init+0x370>)
   1718e:	4013      	ands	r3, r2
   17190:	d1fa      	bne.n	17188 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   17192:	687b      	ldr	r3, [r7, #4]
   17194:	685a      	ldr	r2, [r3, #4]
   17196:	68bb      	ldr	r3, [r7, #8]
   17198:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1719a:	2300      	movs	r3, #0
   1719c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1719e:	e03f      	b.n	17220 <tcc_init+0x3a8>
   171a0:	000167e1 	.word	0x000167e1
   171a4:	00026514 	.word	0x00026514
   171a8:	0001675d 	.word	0x0001675d
   171ac:	00026520 	.word	0x00026520
   171b0:	00026530 	.word	0x00026530
   171b4:	00016aed 	.word	0x00016aed
   171b8:	00016b91 	.word	0x00016b91
   171bc:	00016bed 	.word	0x00016bed
   171c0:	00016d09 	.word	0x00016d09
   171c4:	00016de1 	.word	0x00016de1
   171c8:	20005a28 	.word	0x20005a28
   171cc:	00016745 	.word	0x00016745
   171d0:	00026510 	.word	0x00026510
   171d4:	0001635d 	.word	0x0001635d
   171d8:	000163a1 	.word	0x000163a1
   171dc:	000167b9 	.word	0x000167b9
   171e0:	000166bd 	.word	0x000166bd
   171e4:	00020040 	.word	0x00020040
   171e8:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   171ec:	46c0      	nop			; (mov r8, r8)
   171ee:	68bb      	ldr	r3, [r7, #8]
   171f0:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   171f2:	4912      	ldr	r1, [pc, #72]	; (1723c <tcc_init+0x3c4>)
   171f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   171f6:	4091      	lsls	r1, r2
   171f8:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   171fa:	4013      	ands	r3, r2
   171fc:	d1f7      	bne.n	171ee <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   171fe:	687a      	ldr	r2, [r7, #4]
   17200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17202:	3306      	adds	r3, #6
   17204:	009b      	lsls	r3, r3, #2
   17206:	18d3      	adds	r3, r2, r3
   17208:	3304      	adds	r3, #4
   1720a:	681a      	ldr	r2, [r3, #0]
   1720c:	68b9      	ldr	r1, [r7, #8]
   1720e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17210:	3310      	adds	r3, #16
   17212:	009b      	lsls	r3, r3, #2
   17214:	18cb      	adds	r3, r1, r3
   17216:	3304      	adds	r3, #4
   17218:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1721a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1721c:	3301      	adds	r3, #1
   1721e:	63fb      	str	r3, [r7, #60]	; 0x3c
   17220:	233b      	movs	r3, #59	; 0x3b
   17222:	18fb      	adds	r3, r7, r3
   17224:	781b      	ldrb	r3, [r3, #0]
   17226:	4a06      	ldr	r2, [pc, #24]	; (17240 <tcc_init+0x3c8>)
   17228:	5cd3      	ldrb	r3, [r2, r3]
   1722a:	001a      	movs	r2, r3
   1722c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1722e:	429a      	cmp	r2, r3
   17230:	dcdc      	bgt.n	171ec <tcc_init+0x374>
	}

	return STATUS_OK;
   17232:	2300      	movs	r3, #0
}
   17234:	0018      	movs	r0, r3
   17236:	46bd      	mov	sp, r7
   17238:	b011      	add	sp, #68	; 0x44
   1723a:	bd90      	pop	{r4, r7, pc}
   1723c:	00080100 	.word	0x00080100
   17240:	0002652c 	.word	0x0002652c

00017244 <system_interrupt_enable>:
{
   17244:	b580      	push	{r7, lr}
   17246:	b082      	sub	sp, #8
   17248:	af00      	add	r7, sp, #0
   1724a:	0002      	movs	r2, r0
   1724c:	1dfb      	adds	r3, r7, #7
   1724e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   17250:	4b06      	ldr	r3, [pc, #24]	; (1726c <system_interrupt_enable+0x28>)
   17252:	1dfa      	adds	r2, r7, #7
   17254:	7812      	ldrb	r2, [r2, #0]
   17256:	0011      	movs	r1, r2
   17258:	221f      	movs	r2, #31
   1725a:	400a      	ands	r2, r1
   1725c:	2101      	movs	r1, #1
   1725e:	4091      	lsls	r1, r2
   17260:	000a      	movs	r2, r1
   17262:	601a      	str	r2, [r3, #0]
}
   17264:	46c0      	nop			; (mov r8, r8)
   17266:	46bd      	mov	sp, r7
   17268:	b002      	add	sp, #8
   1726a:	bd80      	pop	{r7, pc}
   1726c:	e000e100 	.word	0xe000e100

00017270 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   17270:	b580      	push	{r7, lr}
   17272:	b082      	sub	sp, #8
   17274:	af00      	add	r7, sp, #0
   17276:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   17278:	4a04      	ldr	r2, [pc, #16]	; (1728c <_tcc_interrupt_get_interrupt_vector+0x1c>)
   1727a:	687b      	ldr	r3, [r7, #4]
   1727c:	18d3      	adds	r3, r2, r3
   1727e:	781b      	ldrb	r3, [r3, #0]
   17280:	b25b      	sxtb	r3, r3
}
   17282:	0018      	movs	r0, r3
   17284:	46bd      	mov	sp, r7
   17286:	b002      	add	sp, #8
   17288:	bd80      	pop	{r7, pc}
   1728a:	46c0      	nop			; (mov r8, r8)
   1728c:	20000114 	.word	0x20000114

00017290 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   17290:	b580      	push	{r7, lr}
   17292:	b084      	sub	sp, #16
   17294:	af00      	add	r7, sp, #0
   17296:	60f8      	str	r0, [r7, #12]
   17298:	60b9      	str	r1, [r7, #8]
   1729a:	1dfb      	adds	r3, r7, #7
   1729c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1729e:	1dfb      	adds	r3, r7, #7
   172a0:	781b      	ldrb	r3, [r3, #0]
   172a2:	68fa      	ldr	r2, [r7, #12]
   172a4:	009b      	lsls	r3, r3, #2
   172a6:	18d3      	adds	r3, r2, r3
   172a8:	3304      	adds	r3, #4
   172aa:	68ba      	ldr	r2, [r7, #8]
   172ac:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   172ae:	68fb      	ldr	r3, [r7, #12]
   172b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   172b2:	1dfb      	adds	r3, r7, #7
   172b4:	7819      	ldrb	r1, [r3, #0]
   172b6:	4b05      	ldr	r3, [pc, #20]	; (172cc <tcc_register_callback+0x3c>)
   172b8:	0089      	lsls	r1, r1, #2
   172ba:	58cb      	ldr	r3, [r1, r3]
   172bc:	431a      	orrs	r2, r3
   172be:	68fb      	ldr	r3, [r7, #12]
   172c0:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   172c2:	2300      	movs	r3, #0
}
   172c4:	0018      	movs	r0, r3
   172c6:	46bd      	mov	sp, r7
   172c8:	b004      	add	sp, #16
   172ca:	bd80      	pop	{r7, pc}
   172cc:	00026534 	.word	0x00026534

000172d0 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   172d0:	b580      	push	{r7, lr}
   172d2:	b082      	sub	sp, #8
   172d4:	af00      	add	r7, sp, #0
   172d6:	6078      	str	r0, [r7, #4]
   172d8:	000a      	movs	r2, r1
   172da:	1cfb      	adds	r3, r7, #3
   172dc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   172de:	687b      	ldr	r3, [r7, #4]
   172e0:	681b      	ldr	r3, [r3, #0]
   172e2:	0018      	movs	r0, r3
   172e4:	4b0f      	ldr	r3, [pc, #60]	; (17324 <tcc_enable_callback+0x54>)
   172e6:	4798      	blx	r3
   172e8:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   172ea:	0018      	movs	r0, r3
   172ec:	4b0e      	ldr	r3, [pc, #56]	; (17328 <tcc_enable_callback+0x58>)
   172ee:	4798      	blx	r3
   172f0:	0003      	movs	r3, r0
   172f2:	0018      	movs	r0, r3
   172f4:	4b0d      	ldr	r3, [pc, #52]	; (1732c <tcc_enable_callback+0x5c>)
   172f6:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   172f8:	687b      	ldr	r3, [r7, #4]
   172fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   172fc:	1cfb      	adds	r3, r7, #3
   172fe:	7819      	ldrb	r1, [r3, #0]
   17300:	4b0b      	ldr	r3, [pc, #44]	; (17330 <tcc_enable_callback+0x60>)
   17302:	0089      	lsls	r1, r1, #2
   17304:	58cb      	ldr	r3, [r1, r3]
   17306:	431a      	orrs	r2, r3
   17308:	687b      	ldr	r3, [r7, #4]
   1730a:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   1730c:	687b      	ldr	r3, [r7, #4]
   1730e:	681b      	ldr	r3, [r3, #0]
   17310:	1cfa      	adds	r2, r7, #3
   17312:	7811      	ldrb	r1, [r2, #0]
   17314:	4a06      	ldr	r2, [pc, #24]	; (17330 <tcc_enable_callback+0x60>)
   17316:	0089      	lsls	r1, r1, #2
   17318:	588a      	ldr	r2, [r1, r2]
   1731a:	629a      	str	r2, [r3, #40]	; 0x28
}
   1731c:	46c0      	nop			; (mov r8, r8)
   1731e:	46bd      	mov	sp, r7
   17320:	b002      	add	sp, #8
   17322:	bd80      	pop	{r7, pc}
   17324:	000167e1 	.word	0x000167e1
   17328:	00017271 	.word	0x00017271
   1732c:	00017245 	.word	0x00017245
   17330:	00026534 	.word	0x00026534

00017334 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   17334:	b580      	push	{r7, lr}
   17336:	af00      	add	r7, sp, #0
   17338:	2000      	movs	r0, #0
   1733a:	4b02      	ldr	r3, [pc, #8]	; (17344 <TCC0_Handler+0x10>)
   1733c:	4798      	blx	r3
   1733e:	46c0      	nop			; (mov r8, r8)
   17340:	46bd      	mov	sp, r7
   17342:	bd80      	pop	{r7, pc}
   17344:	00017371 	.word	0x00017371

00017348 <TCC1_Handler>:
   17348:	b580      	push	{r7, lr}
   1734a:	af00      	add	r7, sp, #0
   1734c:	2001      	movs	r0, #1
   1734e:	4b02      	ldr	r3, [pc, #8]	; (17358 <TCC1_Handler+0x10>)
   17350:	4798      	blx	r3
   17352:	46c0      	nop			; (mov r8, r8)
   17354:	46bd      	mov	sp, r7
   17356:	bd80      	pop	{r7, pc}
   17358:	00017371 	.word	0x00017371

0001735c <TCC2_Handler>:
   1735c:	b580      	push	{r7, lr}
   1735e:	af00      	add	r7, sp, #0
   17360:	2002      	movs	r0, #2
   17362:	4b02      	ldr	r3, [pc, #8]	; (1736c <TCC2_Handler+0x10>)
   17364:	4798      	blx	r3
   17366:	46c0      	nop			; (mov r8, r8)
   17368:	46bd      	mov	sp, r7
   1736a:	bd80      	pop	{r7, pc}
   1736c:	00017371 	.word	0x00017371

00017370 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   17370:	b580      	push	{r7, lr}
   17372:	b086      	sub	sp, #24
   17374:	af00      	add	r7, sp, #0
   17376:	0002      	movs	r2, r0
   17378:	1dfb      	adds	r3, r7, #7
   1737a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   1737c:	1dfb      	adds	r3, r7, #7
   1737e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   17380:	4b18      	ldr	r3, [pc, #96]	; (173e4 <_tcc_interrupt_handler+0x74>)
   17382:	0092      	lsls	r2, r2, #2
   17384:	58d3      	ldr	r3, [r2, r3]
   17386:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   17388:	693b      	ldr	r3, [r7, #16]
   1738a:	681b      	ldr	r3, [r3, #0]
   1738c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   1738e:	693b      	ldr	r3, [r7, #16]
   17390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   17392:	401a      	ands	r2, r3
			module->enable_callback_mask);
   17394:	693b      	ldr	r3, [r7, #16]
   17396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   17398:	4013      	ands	r3, r2
   1739a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1739c:	2300      	movs	r3, #0
   1739e:	617b      	str	r3, [r7, #20]
   173a0:	e019      	b.n	173d6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   173a2:	4b11      	ldr	r3, [pc, #68]	; (173e8 <_tcc_interrupt_handler+0x78>)
   173a4:	697a      	ldr	r2, [r7, #20]
   173a6:	0092      	lsls	r2, r2, #2
   173a8:	58d3      	ldr	r3, [r2, r3]
   173aa:	68fa      	ldr	r2, [r7, #12]
   173ac:	4013      	ands	r3, r2
   173ae:	d00f      	beq.n	173d0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   173b0:	693a      	ldr	r2, [r7, #16]
   173b2:	697b      	ldr	r3, [r7, #20]
   173b4:	009b      	lsls	r3, r3, #2
   173b6:	18d3      	adds	r3, r2, r3
   173b8:	3304      	adds	r3, #4
   173ba:	681b      	ldr	r3, [r3, #0]
   173bc:	693a      	ldr	r2, [r7, #16]
   173be:	0010      	movs	r0, r2
   173c0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   173c2:	693b      	ldr	r3, [r7, #16]
   173c4:	681b      	ldr	r3, [r3, #0]
   173c6:	4a08      	ldr	r2, [pc, #32]	; (173e8 <_tcc_interrupt_handler+0x78>)
   173c8:	6979      	ldr	r1, [r7, #20]
   173ca:	0089      	lsls	r1, r1, #2
   173cc:	588a      	ldr	r2, [r1, r2]
   173ce:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   173d0:	697b      	ldr	r3, [r7, #20]
   173d2:	3301      	adds	r3, #1
   173d4:	617b      	str	r3, [r7, #20]
   173d6:	697b      	ldr	r3, [r7, #20]
   173d8:	2b0b      	cmp	r3, #11
   173da:	dde2      	ble.n	173a2 <_tcc_interrupt_handler+0x32>
		}
	}
}
   173dc:	46c0      	nop			; (mov r8, r8)
   173de:	46bd      	mov	sp, r7
   173e0:	b006      	add	sp, #24
   173e2:	bd80      	pop	{r7, pc}
   173e4:	20005a28 	.word	0x20005a28
   173e8:	00026534 	.word	0x00026534

000173ec <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   173ec:	b580      	push	{r7, lr}
   173ee:	b082      	sub	sp, #8
   173f0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   173f2:	4b2f      	ldr	r3, [pc, #188]	; (174b0 <Reset_Handler+0xc4>)
   173f4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   173f6:	4b2f      	ldr	r3, [pc, #188]	; (174b4 <Reset_Handler+0xc8>)
   173f8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   173fa:	687a      	ldr	r2, [r7, #4]
   173fc:	683b      	ldr	r3, [r7, #0]
   173fe:	429a      	cmp	r2, r3
   17400:	d00c      	beq.n	1741c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   17402:	e007      	b.n	17414 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   17404:	683b      	ldr	r3, [r7, #0]
   17406:	1d1a      	adds	r2, r3, #4
   17408:	603a      	str	r2, [r7, #0]
   1740a:	687a      	ldr	r2, [r7, #4]
   1740c:	1d11      	adds	r1, r2, #4
   1740e:	6079      	str	r1, [r7, #4]
   17410:	6812      	ldr	r2, [r2, #0]
   17412:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   17414:	683a      	ldr	r2, [r7, #0]
   17416:	4b28      	ldr	r3, [pc, #160]	; (174b8 <Reset_Handler+0xcc>)
   17418:	429a      	cmp	r2, r3
   1741a:	d3f3      	bcc.n	17404 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   1741c:	4b27      	ldr	r3, [pc, #156]	; (174bc <Reset_Handler+0xd0>)
   1741e:	603b      	str	r3, [r7, #0]
   17420:	e004      	b.n	1742c <Reset_Handler+0x40>
                *pDest++ = 0;
   17422:	683b      	ldr	r3, [r7, #0]
   17424:	1d1a      	adds	r2, r3, #4
   17426:	603a      	str	r2, [r7, #0]
   17428:	2200      	movs	r2, #0
   1742a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   1742c:	683a      	ldr	r2, [r7, #0]
   1742e:	4b24      	ldr	r3, [pc, #144]	; (174c0 <Reset_Handler+0xd4>)
   17430:	429a      	cmp	r2, r3
   17432:	d3f6      	bcc.n	17422 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   17434:	4b23      	ldr	r3, [pc, #140]	; (174c4 <Reset_Handler+0xd8>)
   17436:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   17438:	4b23      	ldr	r3, [pc, #140]	; (174c8 <Reset_Handler+0xdc>)
   1743a:	687a      	ldr	r2, [r7, #4]
   1743c:	21ff      	movs	r1, #255	; 0xff
   1743e:	438a      	bics	r2, r1
   17440:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   17442:	4a22      	ldr	r2, [pc, #136]	; (174cc <Reset_Handler+0xe0>)
   17444:	2390      	movs	r3, #144	; 0x90
   17446:	005b      	lsls	r3, r3, #1
   17448:	2102      	movs	r1, #2
   1744a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1744c:	4a20      	ldr	r2, [pc, #128]	; (174d0 <Reset_Handler+0xe4>)
   1744e:	78d3      	ldrb	r3, [r2, #3]
   17450:	2103      	movs	r1, #3
   17452:	438b      	bics	r3, r1
   17454:	1c19      	adds	r1, r3, #0
   17456:	2302      	movs	r3, #2
   17458:	430b      	orrs	r3, r1
   1745a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   1745c:	4a1c      	ldr	r2, [pc, #112]	; (174d0 <Reset_Handler+0xe4>)
   1745e:	78d3      	ldrb	r3, [r2, #3]
   17460:	210c      	movs	r1, #12
   17462:	438b      	bics	r3, r1
   17464:	1c19      	adds	r1, r3, #0
   17466:	2308      	movs	r3, #8
   17468:	430b      	orrs	r3, r1
   1746a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   1746c:	4a19      	ldr	r2, [pc, #100]	; (174d4 <Reset_Handler+0xe8>)
   1746e:	7b93      	ldrb	r3, [r2, #14]
   17470:	2130      	movs	r1, #48	; 0x30
   17472:	438b      	bics	r3, r1
   17474:	1c19      	adds	r1, r3, #0
   17476:	2320      	movs	r3, #32
   17478:	430b      	orrs	r3, r1
   1747a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   1747c:	4a15      	ldr	r2, [pc, #84]	; (174d4 <Reset_Handler+0xe8>)
   1747e:	7b93      	ldrb	r3, [r2, #14]
   17480:	210c      	movs	r1, #12
   17482:	438b      	bics	r3, r1
   17484:	1c19      	adds	r1, r3, #0
   17486:	2308      	movs	r3, #8
   17488:	430b      	orrs	r3, r1
   1748a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   1748c:	4a11      	ldr	r2, [pc, #68]	; (174d4 <Reset_Handler+0xe8>)
   1748e:	7b93      	ldrb	r3, [r2, #14]
   17490:	2103      	movs	r1, #3
   17492:	438b      	bics	r3, r1
   17494:	1c19      	adds	r1, r3, #0
   17496:	2302      	movs	r3, #2
   17498:	430b      	orrs	r3, r1
   1749a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   1749c:	4a0e      	ldr	r2, [pc, #56]	; (174d8 <Reset_Handler+0xec>)
   1749e:	6853      	ldr	r3, [r2, #4]
   174a0:	2180      	movs	r1, #128	; 0x80
   174a2:	430b      	orrs	r3, r1
   174a4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   174a6:	4b0d      	ldr	r3, [pc, #52]	; (174dc <Reset_Handler+0xf0>)
   174a8:	4798      	blx	r3

        /* Branch to main function */
        main();
   174aa:	4b0d      	ldr	r3, [pc, #52]	; (174e0 <Reset_Handler+0xf4>)
   174ac:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   174ae:	e7fe      	b.n	174ae <Reset_Handler+0xc2>
   174b0:	00027394 	.word	0x00027394
   174b4:	20000000 	.word	0x20000000
   174b8:	200002ec 	.word	0x200002ec
   174bc:	200002f0 	.word	0x200002f0
   174c0:	20005a98 	.word	0x20005a98
   174c4:	00000000 	.word	0x00000000
   174c8:	e000ed00 	.word	0xe000ed00
   174cc:	41007000 	.word	0x41007000
   174d0:	41005000 	.word	0x41005000
   174d4:	41004800 	.word	0x41004800
   174d8:	41004000 	.word	0x41004000
   174dc:	00020ce5 	.word	0x00020ce5
   174e0:	0001ed4d 	.word	0x0001ed4d

000174e4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   174e4:	b580      	push	{r7, lr}
   174e6:	af00      	add	r7, sp, #0
  __asm volatile (
   174e8:	2004      	movs	r0, #4
   174ea:	4671      	mov	r1, lr
   174ec:	4208      	tst	r0, r1
   174ee:	d002      	beq.n	174f6 <_MSP>
   174f0:	f3ef 8009 	mrs	r0, PSP
   174f4:	e001      	b.n	174fa <_HALT>

000174f6 <_MSP>:
   174f6:	f3ef 8008 	mrs	r0, MSP

000174fa <_HALT>:
   174fa:	6941      	ldr	r1, [r0, #20]
   174fc:	e004      	b.n	17508 <HardFault_HandlerC>
   174fe:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   17500:	46c0      	nop			; (mov r8, r8)
   17502:	46bd      	mov	sp, r7
   17504:	bd80      	pop	{r7, pc}
	...

00017508 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   17508:	b580      	push	{r7, lr}
   1750a:	b090      	sub	sp, #64	; 0x40
   1750c:	af00      	add	r7, sp, #0
   1750e:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   17510:	687b      	ldr	r3, [r7, #4]
   17512:	681b      	ldr	r3, [r3, #0]
   17514:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   17516:	687b      	ldr	r3, [r7, #4]
   17518:	685b      	ldr	r3, [r3, #4]
   1751a:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   1751c:	687b      	ldr	r3, [r7, #4]
   1751e:	689b      	ldr	r3, [r3, #8]
   17520:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   17522:	687b      	ldr	r3, [r7, #4]
   17524:	68db      	ldr	r3, [r3, #12]
   17526:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   17528:	687b      	ldr	r3, [r7, #4]
   1752a:	691b      	ldr	r3, [r3, #16]
   1752c:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   1752e:	687b      	ldr	r3, [r7, #4]
   17530:	695b      	ldr	r3, [r3, #20]
   17532:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   17534:	687b      	ldr	r3, [r7, #4]
   17536:	699b      	ldr	r3, [r3, #24]
   17538:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   1753a:	687b      	ldr	r3, [r7, #4]
   1753c:	69db      	ldr	r3, [r3, #28]
   1753e:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   17540:	4b0b      	ldr	r3, [pc, #44]	; (17570 <HardFault_HandlerC+0x68>)
   17542:	681b      	ldr	r3, [r3, #0]
   17544:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   17546:	4b0b      	ldr	r3, [pc, #44]	; (17574 <HardFault_HandlerC+0x6c>)
   17548:	681b      	ldr	r3, [r3, #0]
   1754a:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   1754c:	4b0a      	ldr	r3, [pc, #40]	; (17578 <HardFault_HandlerC+0x70>)
   1754e:	681b      	ldr	r3, [r3, #0]
   17550:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   17552:	4b0a      	ldr	r3, [pc, #40]	; (1757c <HardFault_HandlerC+0x74>)
   17554:	681b      	ldr	r3, [r3, #0]
   17556:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   17558:	4b09      	ldr	r3, [pc, #36]	; (17580 <HardFault_HandlerC+0x78>)
   1755a:	681b      	ldr	r3, [r3, #0]
   1755c:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   1755e:	4b09      	ldr	r3, [pc, #36]	; (17584 <HardFault_HandlerC+0x7c>)
   17560:	681b      	ldr	r3, [r3, #0]
   17562:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   17564:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   17566:	46c0      	nop			; (mov r8, r8)
   17568:	46bd      	mov	sp, r7
   1756a:	b010      	add	sp, #64	; 0x40
   1756c:	bd80      	pop	{r7, pc}
   1756e:	46c0      	nop			; (mov r8, r8)
   17570:	e000ed28 	.word	0xe000ed28
   17574:	e000ed2c 	.word	0xe000ed2c
   17578:	e000ed30 	.word	0xe000ed30
   1757c:	e000ed3c 	.word	0xe000ed3c
   17580:	e000ed34 	.word	0xe000ed34
   17584:	e000ed38 	.word	0xe000ed38

00017588 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   17588:	b580      	push	{r7, lr}
   1758a:	b086      	sub	sp, #24
   1758c:	af00      	add	r7, sp, #0
   1758e:	60f8      	str	r0, [r7, #12]
   17590:	60b9      	str	r1, [r7, #8]
   17592:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   17594:	2300      	movs	r3, #0
   17596:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   17598:	68fb      	ldr	r3, [r7, #12]
   1759a:	2b00      	cmp	r3, #0
   1759c:	d012      	beq.n	175c4 <_read+0x3c>
		return -1;
   1759e:	2301      	movs	r3, #1
   175a0:	425b      	negs	r3, r3
   175a2:	e013      	b.n	175cc <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   175a4:	4b0b      	ldr	r3, [pc, #44]	; (175d4 <_read+0x4c>)
   175a6:	681a      	ldr	r2, [r3, #0]
   175a8:	4b0b      	ldr	r3, [pc, #44]	; (175d8 <_read+0x50>)
   175aa:	681b      	ldr	r3, [r3, #0]
   175ac:	68b9      	ldr	r1, [r7, #8]
   175ae:	0018      	movs	r0, r3
   175b0:	4790      	blx	r2
		ptr++;
   175b2:	68bb      	ldr	r3, [r7, #8]
   175b4:	3301      	adds	r3, #1
   175b6:	60bb      	str	r3, [r7, #8]
		nChars++;
   175b8:	697b      	ldr	r3, [r7, #20]
   175ba:	3301      	adds	r3, #1
   175bc:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   175be:	687b      	ldr	r3, [r7, #4]
   175c0:	3b01      	subs	r3, #1
   175c2:	607b      	str	r3, [r7, #4]
   175c4:	687b      	ldr	r3, [r7, #4]
   175c6:	2b00      	cmp	r3, #0
   175c8:	dcec      	bgt.n	175a4 <_read+0x1c>
	}
	return nChars;
   175ca:	697b      	ldr	r3, [r7, #20]
}
   175cc:	0018      	movs	r0, r3
   175ce:	46bd      	mov	sp, r7
   175d0:	b006      	add	sp, #24
   175d2:	bd80      	pop	{r7, pc}
   175d4:	20005a34 	.word	0x20005a34
   175d8:	20005a3c 	.word	0x20005a3c

000175dc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   175dc:	b580      	push	{r7, lr}
   175de:	b086      	sub	sp, #24
   175e0:	af00      	add	r7, sp, #0
   175e2:	60f8      	str	r0, [r7, #12]
   175e4:	60b9      	str	r1, [r7, #8]
   175e6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   175e8:	2300      	movs	r3, #0
   175ea:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   175ec:	68fb      	ldr	r3, [r7, #12]
   175ee:	2b01      	cmp	r3, #1
   175f0:	d01d      	beq.n	1762e <_write+0x52>
   175f2:	68fb      	ldr	r3, [r7, #12]
   175f4:	2b02      	cmp	r3, #2
   175f6:	d01a      	beq.n	1762e <_write+0x52>
   175f8:	68fb      	ldr	r3, [r7, #12]
   175fa:	2b03      	cmp	r3, #3
   175fc:	d017      	beq.n	1762e <_write+0x52>
		return -1;
   175fe:	2301      	movs	r3, #1
   17600:	425b      	negs	r3, r3
   17602:	e018      	b.n	17636 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   17604:	4b0e      	ldr	r3, [pc, #56]	; (17640 <_write+0x64>)
   17606:	681a      	ldr	r2, [r3, #0]
   17608:	4b0e      	ldr	r3, [pc, #56]	; (17644 <_write+0x68>)
   1760a:	6818      	ldr	r0, [r3, #0]
   1760c:	68bb      	ldr	r3, [r7, #8]
   1760e:	1c59      	adds	r1, r3, #1
   17610:	60b9      	str	r1, [r7, #8]
   17612:	781b      	ldrb	r3, [r3, #0]
   17614:	0019      	movs	r1, r3
   17616:	4790      	blx	r2
   17618:	1e03      	subs	r3, r0, #0
   1761a:	da02      	bge.n	17622 <_write+0x46>
			return -1;
   1761c:	2301      	movs	r3, #1
   1761e:	425b      	negs	r3, r3
   17620:	e009      	b.n	17636 <_write+0x5a>
		}
		++nChars;
   17622:	697b      	ldr	r3, [r7, #20]
   17624:	3301      	adds	r3, #1
   17626:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   17628:	687b      	ldr	r3, [r7, #4]
   1762a:	3b01      	subs	r3, #1
   1762c:	607b      	str	r3, [r7, #4]
   1762e:	687b      	ldr	r3, [r7, #4]
   17630:	2b00      	cmp	r3, #0
   17632:	d1e7      	bne.n	17604 <_write+0x28>
	}
	return nChars;
   17634:	697b      	ldr	r3, [r7, #20]
}
   17636:	0018      	movs	r0, r3
   17638:	46bd      	mov	sp, r7
   1763a:	b006      	add	sp, #24
   1763c:	bd80      	pop	{r7, pc}
   1763e:	46c0      	nop			; (mov r8, r8)
   17640:	20005a38 	.word	0x20005a38
   17644:	20005a3c 	.word	0x20005a3c

00017648 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   17648:	b580      	push	{r7, lr}
   1764a:	b084      	sub	sp, #16
   1764c:	af00      	add	r7, sp, #0
   1764e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   17650:	4b0a      	ldr	r3, [pc, #40]	; (1767c <_sbrk+0x34>)
   17652:	681b      	ldr	r3, [r3, #0]
   17654:	2b00      	cmp	r3, #0
   17656:	d102      	bne.n	1765e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   17658:	4b08      	ldr	r3, [pc, #32]	; (1767c <_sbrk+0x34>)
   1765a:	4a09      	ldr	r2, [pc, #36]	; (17680 <_sbrk+0x38>)
   1765c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   1765e:	4b07      	ldr	r3, [pc, #28]	; (1767c <_sbrk+0x34>)
   17660:	681b      	ldr	r3, [r3, #0]
   17662:	60fb      	str	r3, [r7, #12]

	heap += incr;
   17664:	4b05      	ldr	r3, [pc, #20]	; (1767c <_sbrk+0x34>)
   17666:	681a      	ldr	r2, [r3, #0]
   17668:	687b      	ldr	r3, [r7, #4]
   1766a:	18d2      	adds	r2, r2, r3
   1766c:	4b03      	ldr	r3, [pc, #12]	; (1767c <_sbrk+0x34>)
   1766e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   17670:	68fb      	ldr	r3, [r7, #12]
}
   17672:	0018      	movs	r0, r3
   17674:	46bd      	mov	sp, r7
   17676:	b004      	add	sp, #16
   17678:	bd80      	pop	{r7, pc}
   1767a:	46c0      	nop			; (mov r8, r8)
   1767c:	2000416c 	.word	0x2000416c
   17680:	20007a98 	.word	0x20007a98

00017684 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   17684:	b580      	push	{r7, lr}
   17686:	b082      	sub	sp, #8
   17688:	af00      	add	r7, sp, #0
   1768a:	6078      	str	r0, [r7, #4]
	return -1;
   1768c:	2301      	movs	r3, #1
   1768e:	425b      	negs	r3, r3
}
   17690:	0018      	movs	r0, r3
   17692:	46bd      	mov	sp, r7
   17694:	b002      	add	sp, #8
   17696:	bd80      	pop	{r7, pc}

00017698 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   17698:	b580      	push	{r7, lr}
   1769a:	b082      	sub	sp, #8
   1769c:	af00      	add	r7, sp, #0
   1769e:	6078      	str	r0, [r7, #4]
   176a0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   176a2:	683b      	ldr	r3, [r7, #0]
   176a4:	2280      	movs	r2, #128	; 0x80
   176a6:	0192      	lsls	r2, r2, #6
   176a8:	605a      	str	r2, [r3, #4]

	return 0;
   176aa:	2300      	movs	r3, #0
}
   176ac:	0018      	movs	r0, r3
   176ae:	46bd      	mov	sp, r7
   176b0:	b002      	add	sp, #8
   176b2:	bd80      	pop	{r7, pc}

000176b4 <_isatty>:

extern int _isatty(int file)
{
   176b4:	b580      	push	{r7, lr}
   176b6:	b082      	sub	sp, #8
   176b8:	af00      	add	r7, sp, #0
   176ba:	6078      	str	r0, [r7, #4]
	return 1;
   176bc:	2301      	movs	r3, #1
}
   176be:	0018      	movs	r0, r3
   176c0:	46bd      	mov	sp, r7
   176c2:	b002      	add	sp, #8
   176c4:	bd80      	pop	{r7, pc}

000176c6 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   176c6:	b580      	push	{r7, lr}
   176c8:	b084      	sub	sp, #16
   176ca:	af00      	add	r7, sp, #0
   176cc:	60f8      	str	r0, [r7, #12]
   176ce:	60b9      	str	r1, [r7, #8]
   176d0:	607a      	str	r2, [r7, #4]
	return 0;
   176d2:	2300      	movs	r3, #0
}
   176d4:	0018      	movs	r0, r3
   176d6:	46bd      	mov	sp, r7
   176d8:	b004      	add	sp, #16
   176da:	bd80      	pop	{r7, pc}

000176dc <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   176dc:	b580      	push	{r7, lr}
   176de:	b082      	sub	sp, #8
   176e0:	af00      	add	r7, sp, #0
   176e2:	6078      	str	r0, [r7, #4]
	time->second = 0;
   176e4:	687b      	ldr	r3, [r7, #4]
   176e6:	2200      	movs	r2, #0
   176e8:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   176ea:	687b      	ldr	r3, [r7, #4]
   176ec:	2200      	movs	r2, #0
   176ee:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   176f0:	687b      	ldr	r3, [r7, #4]
   176f2:	2200      	movs	r2, #0
   176f4:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   176f6:	687b      	ldr	r3, [r7, #4]
   176f8:	2200      	movs	r2, #0
   176fa:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   176fc:	687b      	ldr	r3, [r7, #4]
   176fe:	2201      	movs	r2, #1
   17700:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   17702:	687b      	ldr	r3, [r7, #4]
   17704:	2201      	movs	r2, #1
   17706:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   17708:	687b      	ldr	r3, [r7, #4]
   1770a:	22fa      	movs	r2, #250	; 0xfa
   1770c:	00d2      	lsls	r2, r2, #3
   1770e:	80da      	strh	r2, [r3, #6]
}
   17710:	46c0      	nop			; (mov r8, r8)
   17712:	46bd      	mov	sp, r7
   17714:	b002      	add	sp, #8
   17716:	bd80      	pop	{r7, pc}

00017718 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   17718:	b580      	push	{r7, lr}
   1771a:	b086      	sub	sp, #24
   1771c:	af00      	add	r7, sp, #0
   1771e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   17720:	230c      	movs	r3, #12
   17722:	18fb      	adds	r3, r7, r3
   17724:	0018      	movs	r0, r3
   17726:	4b23      	ldr	r3, [pc, #140]	; (177b4 <rtc_calendar_get_config_defaults+0x9c>)
   17728:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   1772a:	687b      	ldr	r3, [r7, #4]
   1772c:	22a0      	movs	r2, #160	; 0xa0
   1772e:	0112      	lsls	r2, r2, #4
   17730:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   17732:	687b      	ldr	r3, [r7, #4]
   17734:	2200      	movs	r2, #0
   17736:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   17738:	687b      	ldr	r3, [r7, #4]
   1773a:	2200      	movs	r2, #0
   1773c:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   1773e:	687b      	ldr	r3, [r7, #4]
   17740:	2200      	movs	r2, #0
   17742:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   17744:	687b      	ldr	r3, [r7, #4]
   17746:	22fa      	movs	r2, #250	; 0xfa
   17748:	00d2      	lsls	r2, r2, #3
   1774a:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   1774c:	2317      	movs	r3, #23
   1774e:	18fb      	adds	r3, r7, r3
   17750:	2200      	movs	r2, #0
   17752:	701a      	strb	r2, [r3, #0]
   17754:	e025      	b.n	177a2 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   17756:	2317      	movs	r3, #23
   17758:	18fb      	adds	r3, r7, r3
   1775a:	781a      	ldrb	r2, [r3, #0]
   1775c:	6879      	ldr	r1, [r7, #4]
   1775e:	2008      	movs	r0, #8
   17760:	0013      	movs	r3, r2
   17762:	009b      	lsls	r3, r3, #2
   17764:	189b      	adds	r3, r3, r2
   17766:	005b      	lsls	r3, r3, #1
   17768:	18cb      	adds	r3, r1, r3
   1776a:	181a      	adds	r2, r3, r0
   1776c:	230c      	movs	r3, #12
   1776e:	18fb      	adds	r3, r7, r3
   17770:	0010      	movs	r0, r2
   17772:	0019      	movs	r1, r3
   17774:	2308      	movs	r3, #8
   17776:	001a      	movs	r2, r3
   17778:	4b0f      	ldr	r3, [pc, #60]	; (177b8 <rtc_calendar_get_config_defaults+0xa0>)
   1777a:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   1777c:	2317      	movs	r3, #23
   1777e:	18fb      	adds	r3, r7, r3
   17780:	781a      	ldrb	r2, [r3, #0]
   17782:	6879      	ldr	r1, [r7, #4]
   17784:	0013      	movs	r3, r2
   17786:	009b      	lsls	r3, r3, #2
   17788:	189b      	adds	r3, r3, r2
   1778a:	005b      	lsls	r3, r3, #1
   1778c:	18cb      	adds	r3, r1, r3
   1778e:	3310      	adds	r3, #16
   17790:	2206      	movs	r2, #6
   17792:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   17794:	2317      	movs	r3, #23
   17796:	18fb      	adds	r3, r7, r3
   17798:	781a      	ldrb	r2, [r3, #0]
   1779a:	2317      	movs	r3, #23
   1779c:	18fb      	adds	r3, r7, r3
   1779e:	3201      	adds	r2, #1
   177a0:	701a      	strb	r2, [r3, #0]
   177a2:	2317      	movs	r3, #23
   177a4:	18fb      	adds	r3, r7, r3
   177a6:	781b      	ldrb	r3, [r3, #0]
   177a8:	2b00      	cmp	r3, #0
   177aa:	d0d4      	beq.n	17756 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   177ac:	46c0      	nop			; (mov r8, r8)
   177ae:	46bd      	mov	sp, r7
   177b0:	b006      	add	sp, #24
   177b2:	bd80      	pop	{r7, pc}
   177b4:	000176dd 	.word	0x000176dd
   177b8:	00020d55 	.word	0x00020d55

000177bc <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   177bc:	b580      	push	{r7, lr}
   177be:	b088      	sub	sp, #32
   177c0:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   177c2:	230c      	movs	r3, #12
   177c4:	18fb      	adds	r3, r7, r3
   177c6:	0018      	movs	r0, r3
   177c8:	4b1a      	ldr	r3, [pc, #104]	; (17834 <configure_rtc_calendar+0x78>)
   177ca:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   177cc:	1d3b      	adds	r3, r7, #4
   177ce:	0018      	movs	r0, r3
   177d0:	4b19      	ldr	r3, [pc, #100]	; (17838 <configure_rtc_calendar+0x7c>)
   177d2:	4798      	blx	r3
	init_time.year   = 2014;
   177d4:	1d3b      	adds	r3, r7, #4
   177d6:	4a19      	ldr	r2, [pc, #100]	; (1783c <configure_rtc_calendar+0x80>)
   177d8:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   177da:	1d3b      	adds	r3, r7, #4
   177dc:	2201      	movs	r2, #1
   177de:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   177e0:	1d3b      	adds	r3, r7, #4
   177e2:	2201      	movs	r2, #1
   177e4:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   177e6:	1d3b      	adds	r3, r7, #4
   177e8:	2200      	movs	r2, #0
   177ea:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   177ec:	1d3b      	adds	r3, r7, #4
   177ee:	2200      	movs	r2, #0
   177f0:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   177f2:	1d3b      	adds	r3, r7, #4
   177f4:	2204      	movs	r2, #4
   177f6:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   177f8:	230c      	movs	r3, #12
   177fa:	18fb      	adds	r3, r7, r3
   177fc:	2201      	movs	r2, #1
   177fe:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   17800:	230c      	movs	r3, #12
   17802:	18fb      	adds	r3, r7, r3
   17804:	1d3a      	adds	r2, r7, #4
   17806:	3308      	adds	r3, #8
   17808:	ca03      	ldmia	r2!, {r0, r1}
   1780a:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   1780c:	230c      	movs	r3, #12
   1780e:	18fb      	adds	r3, r7, r3
   17810:	2206      	movs	r2, #6
   17812:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   17814:	230c      	movs	r3, #12
   17816:	18fa      	adds	r2, r7, r3
   17818:	4909      	ldr	r1, [pc, #36]	; (17840 <configure_rtc_calendar+0x84>)
   1781a:	4b0a      	ldr	r3, [pc, #40]	; (17844 <configure_rtc_calendar+0x88>)
   1781c:	0018      	movs	r0, r3
   1781e:	4b0a      	ldr	r3, [pc, #40]	; (17848 <configure_rtc_calendar+0x8c>)
   17820:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   17822:	4b08      	ldr	r3, [pc, #32]	; (17844 <configure_rtc_calendar+0x88>)
   17824:	0018      	movs	r0, r3
   17826:	4b09      	ldr	r3, [pc, #36]	; (1784c <configure_rtc_calendar+0x90>)
   17828:	4798      	blx	r3
}
   1782a:	46c0      	nop			; (mov r8, r8)
   1782c:	46bd      	mov	sp, r7
   1782e:	b008      	add	sp, #32
   17830:	bd80      	pop	{r7, pc}
   17832:	46c0      	nop			; (mov r8, r8)
   17834:	00017719 	.word	0x00017719
   17838:	000176dd 	.word	0x000176dd
   1783c:	000007de 	.word	0x000007de
   17840:	40001400 	.word	0x40001400
   17844:	20005a40 	.word	0x20005a40
   17848:	000132f9 	.word	0x000132f9
   1784c:	00013025 	.word	0x00013025

00017850 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   17850:	b590      	push	{r4, r7, lr}
   17852:	b085      	sub	sp, #20
   17854:	af00      	add	r7, sp, #0
   17856:	0002      	movs	r2, r0
   17858:	1dfb      	adds	r3, r7, #7
   1785a:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   1785c:	4b1a      	ldr	r3, [pc, #104]	; (178c8 <disk_initialize+0x78>)
   1785e:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   17860:	1dfb      	adds	r3, r7, #7
   17862:	781b      	ldrb	r3, [r3, #0]
   17864:	2b01      	cmp	r3, #1
   17866:	d901      	bls.n	1786c <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   17868:	2301      	movs	r3, #1
   1786a:	e029      	b.n	178c0 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   1786c:	2300      	movs	r3, #0
   1786e:	60fb      	str	r3, [r7, #12]
   17870:	e010      	b.n	17894 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   17872:	230b      	movs	r3, #11
   17874:	18fc      	adds	r4, r7, r3
   17876:	1dfb      	adds	r3, r7, #7
   17878:	781b      	ldrb	r3, [r3, #0]
   1787a:	0018      	movs	r0, r3
   1787c:	4b13      	ldr	r3, [pc, #76]	; (178cc <disk_initialize+0x7c>)
   1787e:	4798      	blx	r3
   17880:	0003      	movs	r3, r0
   17882:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   17884:	230b      	movs	r3, #11
   17886:	18fb      	adds	r3, r7, r3
   17888:	781b      	ldrb	r3, [r3, #0]
   1788a:	2b03      	cmp	r3, #3
   1788c:	d106      	bne.n	1789c <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   1788e:	68fb      	ldr	r3, [r7, #12]
   17890:	3301      	adds	r3, #1
   17892:	60fb      	str	r3, [r7, #12]
   17894:	68fb      	ldr	r3, [r7, #12]
   17896:	2b01      	cmp	r3, #1
   17898:	ddeb      	ble.n	17872 <disk_initialize+0x22>
   1789a:	e000      	b.n	1789e <disk_initialize+0x4e>
			break;
   1789c:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   1789e:	230b      	movs	r3, #11
   178a0:	18fb      	adds	r3, r7, r3
   178a2:	781b      	ldrb	r3, [r3, #0]
   178a4:	2b00      	cmp	r3, #0
   178a6:	d001      	beq.n	178ac <disk_initialize+0x5c>
		return STA_NOINIT;
   178a8:	2301      	movs	r3, #1
   178aa:	e009      	b.n	178c0 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   178ac:	1dfb      	adds	r3, r7, #7
   178ae:	781b      	ldrb	r3, [r3, #0]
   178b0:	0018      	movs	r0, r3
   178b2:	4b07      	ldr	r3, [pc, #28]	; (178d0 <disk_initialize+0x80>)
   178b4:	4798      	blx	r3
   178b6:	1e03      	subs	r3, r0, #0
   178b8:	d001      	beq.n	178be <disk_initialize+0x6e>
		return STA_PROTECT;
   178ba:	2304      	movs	r3, #4
   178bc:	e000      	b.n	178c0 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   178be:	2300      	movs	r3, #0
}
   178c0:	0018      	movs	r0, r3
   178c2:	46bd      	mov	sp, r7
   178c4:	b005      	add	sp, #20
   178c6:	bd90      	pop	{r4, r7, pc}
   178c8:	000177bd 	.word	0x000177bd
   178cc:	00012521 	.word	0x00012521
   178d0:	000125d9 	.word	0x000125d9

000178d4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   178d4:	b580      	push	{r7, lr}
   178d6:	b082      	sub	sp, #8
   178d8:	af00      	add	r7, sp, #0
   178da:	0002      	movs	r2, r0
   178dc:	1dfb      	adds	r3, r7, #7
   178de:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   178e0:	1dfb      	adds	r3, r7, #7
   178e2:	781b      	ldrb	r3, [r3, #0]
   178e4:	0018      	movs	r0, r3
   178e6:	4b08      	ldr	r3, [pc, #32]	; (17908 <disk_status+0x34>)
   178e8:	4798      	blx	r3
   178ea:	1e03      	subs	r3, r0, #0
   178ec:	d002      	beq.n	178f4 <disk_status+0x20>
   178ee:	2b02      	cmp	r3, #2
   178f0:	d002      	beq.n	178f8 <disk_status+0x24>
   178f2:	e003      	b.n	178fc <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   178f4:	2300      	movs	r3, #0
   178f6:	e002      	b.n	178fe <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   178f8:	2303      	movs	r3, #3
   178fa:	e000      	b.n	178fe <disk_status+0x2a>
	default:
		return STA_NOINIT;
   178fc:	2301      	movs	r3, #1
	}
}
   178fe:	0018      	movs	r0, r3
   17900:	46bd      	mov	sp, r7
   17902:	b002      	add	sp, #8
   17904:	bd80      	pop	{r7, pc}
   17906:	46c0      	nop			; (mov r8, r8)
   17908:	00012521 	.word	0x00012521

0001790c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   1790c:	b590      	push	{r4, r7, lr}
   1790e:	b089      	sub	sp, #36	; 0x24
   17910:	af00      	add	r7, sp, #0
   17912:	60b9      	str	r1, [r7, #8]
   17914:	607a      	str	r2, [r7, #4]
   17916:	0019      	movs	r1, r3
   17918:	230f      	movs	r3, #15
   1791a:	18fb      	adds	r3, r7, r3
   1791c:	1c02      	adds	r2, r0, #0
   1791e:	701a      	strb	r2, [r3, #0]
   17920:	230e      	movs	r3, #14
   17922:	18fb      	adds	r3, r7, r3
   17924:	1c0a      	adds	r2, r1, #0
   17926:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   17928:	231b      	movs	r3, #27
   1792a:	18fc      	adds	r4, r7, r3
   1792c:	230f      	movs	r3, #15
   1792e:	18fb      	adds	r3, r7, r3
   17930:	781b      	ldrb	r3, [r3, #0]
   17932:	0018      	movs	r0, r3
   17934:	4b28      	ldr	r3, [pc, #160]	; (179d8 <disk_read+0xcc>)
   17936:	4798      	blx	r3
   17938:	0003      	movs	r3, r0
   1793a:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   1793c:	231b      	movs	r3, #27
   1793e:	18fb      	adds	r3, r7, r3
   17940:	781b      	ldrb	r3, [r3, #0]
   17942:	2b00      	cmp	r3, #0
   17944:	d101      	bne.n	1794a <disk_read+0x3e>
		return RES_ERROR;
   17946:	2301      	movs	r3, #1
   17948:	e042      	b.n	179d0 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   1794a:	2314      	movs	r3, #20
   1794c:	18fa      	adds	r2, r7, r3
   1794e:	230f      	movs	r3, #15
   17950:	18fb      	adds	r3, r7, r3
   17952:	781b      	ldrb	r3, [r3, #0]
   17954:	0011      	movs	r1, r2
   17956:	0018      	movs	r0, r3
   17958:	4b20      	ldr	r3, [pc, #128]	; (179dc <disk_read+0xd0>)
   1795a:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   1795c:	230e      	movs	r3, #14
   1795e:	18fb      	adds	r3, r7, r3
   17960:	781b      	ldrb	r3, [r3, #0]
   17962:	221b      	movs	r2, #27
   17964:	18ba      	adds	r2, r7, r2
   17966:	7812      	ldrb	r2, [r2, #0]
   17968:	4353      	muls	r3, r2
   1796a:	001a      	movs	r2, r3
   1796c:	687b      	ldr	r3, [r7, #4]
   1796e:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   17970:	697b      	ldr	r3, [r7, #20]
   17972:	3301      	adds	r3, #1
   17974:	211b      	movs	r1, #27
   17976:	1879      	adds	r1, r7, r1
   17978:	7809      	ldrb	r1, [r1, #0]
   1797a:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   1797c:	429a      	cmp	r2, r3
   1797e:	d901      	bls.n	17984 <disk_read+0x78>
		return RES_PARERR;
   17980:	2304      	movs	r3, #4
   17982:	e025      	b.n	179d0 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   17984:	2300      	movs	r3, #0
   17986:	61fb      	str	r3, [r7, #28]
   17988:	e01b      	b.n	179c2 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   1798a:	231b      	movs	r3, #27
   1798c:	18fb      	adds	r3, r7, r3
   1798e:	781b      	ldrb	r3, [r3, #0]
   17990:	69fa      	ldr	r2, [r7, #28]
   17992:	435a      	muls	r2, r3
   17994:	687b      	ldr	r3, [r7, #4]
   17996:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   17998:	231b      	movs	r3, #27
   1799a:	18fb      	adds	r3, r7, r3
   1799c:	781b      	ldrb	r3, [r3, #0]
   1799e:	69fa      	ldr	r2, [r7, #28]
   179a0:	4353      	muls	r3, r2
   179a2:	025b      	lsls	r3, r3, #9
   179a4:	68ba      	ldr	r2, [r7, #8]
   179a6:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   179a8:	230f      	movs	r3, #15
   179aa:	18fb      	adds	r3, r7, r3
   179ac:	781b      	ldrb	r3, [r3, #0]
   179ae:	0018      	movs	r0, r3
   179b0:	4b0b      	ldr	r3, [pc, #44]	; (179e0 <disk_read+0xd4>)
   179b2:	4798      	blx	r3
   179b4:	1e03      	subs	r3, r0, #0
   179b6:	d001      	beq.n	179bc <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   179b8:	2301      	movs	r3, #1
   179ba:	e009      	b.n	179d0 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   179bc:	69fb      	ldr	r3, [r7, #28]
   179be:	3301      	adds	r3, #1
   179c0:	61fb      	str	r3, [r7, #28]
   179c2:	230e      	movs	r3, #14
   179c4:	18fb      	adds	r3, r7, r3
   179c6:	781a      	ldrb	r2, [r3, #0]
   179c8:	69fb      	ldr	r3, [r7, #28]
   179ca:	429a      	cmp	r2, r3
   179cc:	d8dd      	bhi.n	1798a <disk_read+0x7e>
		}
	}

	return RES_OK;
   179ce:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   179d0:	0018      	movs	r0, r3
   179d2:	46bd      	mov	sp, r7
   179d4:	b009      	add	sp, #36	; 0x24
   179d6:	bd90      	pop	{r4, r7, pc}
   179d8:	000125ad 	.word	0x000125ad
   179dc:	00012561 	.word	0x00012561
   179e0:	00012621 	.word	0x00012621

000179e4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   179e4:	b590      	push	{r4, r7, lr}
   179e6:	b089      	sub	sp, #36	; 0x24
   179e8:	af00      	add	r7, sp, #0
   179ea:	60b9      	str	r1, [r7, #8]
   179ec:	607a      	str	r2, [r7, #4]
   179ee:	0019      	movs	r1, r3
   179f0:	230f      	movs	r3, #15
   179f2:	18fb      	adds	r3, r7, r3
   179f4:	1c02      	adds	r2, r0, #0
   179f6:	701a      	strb	r2, [r3, #0]
   179f8:	230e      	movs	r3, #14
   179fa:	18fb      	adds	r3, r7, r3
   179fc:	1c0a      	adds	r2, r1, #0
   179fe:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   17a00:	231b      	movs	r3, #27
   17a02:	18fc      	adds	r4, r7, r3
   17a04:	230f      	movs	r3, #15
   17a06:	18fb      	adds	r3, r7, r3
   17a08:	781b      	ldrb	r3, [r3, #0]
   17a0a:	0018      	movs	r0, r3
   17a0c:	4b28      	ldr	r3, [pc, #160]	; (17ab0 <disk_write+0xcc>)
   17a0e:	4798      	blx	r3
   17a10:	0003      	movs	r3, r0
   17a12:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   17a14:	231b      	movs	r3, #27
   17a16:	18fb      	adds	r3, r7, r3
   17a18:	781b      	ldrb	r3, [r3, #0]
   17a1a:	2b00      	cmp	r3, #0
   17a1c:	d101      	bne.n	17a22 <disk_write+0x3e>
		return RES_ERROR;
   17a1e:	2301      	movs	r3, #1
   17a20:	e042      	b.n	17aa8 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   17a22:	2314      	movs	r3, #20
   17a24:	18fa      	adds	r2, r7, r3
   17a26:	230f      	movs	r3, #15
   17a28:	18fb      	adds	r3, r7, r3
   17a2a:	781b      	ldrb	r3, [r3, #0]
   17a2c:	0011      	movs	r1, r2
   17a2e:	0018      	movs	r0, r3
   17a30:	4b20      	ldr	r3, [pc, #128]	; (17ab4 <disk_write+0xd0>)
   17a32:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   17a34:	230e      	movs	r3, #14
   17a36:	18fb      	adds	r3, r7, r3
   17a38:	781b      	ldrb	r3, [r3, #0]
   17a3a:	221b      	movs	r2, #27
   17a3c:	18ba      	adds	r2, r7, r2
   17a3e:	7812      	ldrb	r2, [r2, #0]
   17a40:	4353      	muls	r3, r2
   17a42:	001a      	movs	r2, r3
   17a44:	687b      	ldr	r3, [r7, #4]
   17a46:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   17a48:	697b      	ldr	r3, [r7, #20]
   17a4a:	3301      	adds	r3, #1
   17a4c:	211b      	movs	r1, #27
   17a4e:	1879      	adds	r1, r7, r1
   17a50:	7809      	ldrb	r1, [r1, #0]
   17a52:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   17a54:	429a      	cmp	r2, r3
   17a56:	d901      	bls.n	17a5c <disk_write+0x78>
		return RES_PARERR;
   17a58:	2304      	movs	r3, #4
   17a5a:	e025      	b.n	17aa8 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   17a5c:	2300      	movs	r3, #0
   17a5e:	61fb      	str	r3, [r7, #28]
   17a60:	e01b      	b.n	17a9a <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   17a62:	231b      	movs	r3, #27
   17a64:	18fb      	adds	r3, r7, r3
   17a66:	781b      	ldrb	r3, [r3, #0]
   17a68:	69fa      	ldr	r2, [r7, #28]
   17a6a:	435a      	muls	r2, r3
   17a6c:	687b      	ldr	r3, [r7, #4]
   17a6e:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   17a70:	231b      	movs	r3, #27
   17a72:	18fb      	adds	r3, r7, r3
   17a74:	781b      	ldrb	r3, [r3, #0]
   17a76:	69fa      	ldr	r2, [r7, #28]
   17a78:	4353      	muls	r3, r2
   17a7a:	025b      	lsls	r3, r3, #9
   17a7c:	68ba      	ldr	r2, [r7, #8]
   17a7e:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   17a80:	230f      	movs	r3, #15
   17a82:	18fb      	adds	r3, r7, r3
   17a84:	781b      	ldrb	r3, [r3, #0]
   17a86:	0018      	movs	r0, r3
   17a88:	4b0b      	ldr	r3, [pc, #44]	; (17ab8 <disk_write+0xd4>)
   17a8a:	4798      	blx	r3
   17a8c:	1e03      	subs	r3, r0, #0
   17a8e:	d001      	beq.n	17a94 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   17a90:	2301      	movs	r3, #1
   17a92:	e009      	b.n	17aa8 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   17a94:	69fb      	ldr	r3, [r7, #28]
   17a96:	3301      	adds	r3, #1
   17a98:	61fb      	str	r3, [r7, #28]
   17a9a:	230e      	movs	r3, #14
   17a9c:	18fb      	adds	r3, r7, r3
   17a9e:	781a      	ldrb	r2, [r3, #0]
   17aa0:	69fb      	ldr	r3, [r7, #28]
   17aa2:	429a      	cmp	r2, r3
   17aa4:	d8dd      	bhi.n	17a62 <disk_write+0x7e>
		}
	}

	return RES_OK;
   17aa6:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   17aa8:	0018      	movs	r0, r3
   17aaa:	46bd      	mov	sp, r7
   17aac:	b009      	add	sp, #36	; 0x24
   17aae:	bd90      	pop	{r4, r7, pc}
   17ab0:	000125ad 	.word	0x000125ad
   17ab4:	00012561 	.word	0x00012561
   17ab8:	00012675 	.word	0x00012675

00017abc <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   17abc:	b590      	push	{r4, r7, lr}
   17abe:	b085      	sub	sp, #20
   17ac0:	af00      	add	r7, sp, #0
   17ac2:	603a      	str	r2, [r7, #0]
   17ac4:	1dfb      	adds	r3, r7, #7
   17ac6:	1c02      	adds	r2, r0, #0
   17ac8:	701a      	strb	r2, [r3, #0]
   17aca:	1dbb      	adds	r3, r7, #6
   17acc:	1c0a      	adds	r2, r1, #0
   17ace:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   17ad0:	230f      	movs	r3, #15
   17ad2:	18fb      	adds	r3, r7, r3
   17ad4:	2204      	movs	r2, #4
   17ad6:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   17ad8:	1dbb      	adds	r3, r7, #6
   17ada:	781b      	ldrb	r3, [r3, #0]
   17adc:	2b01      	cmp	r3, #1
   17ade:	d00f      	beq.n	17b00 <disk_ioctl+0x44>
   17ae0:	dc02      	bgt.n	17ae8 <disk_ioctl+0x2c>
   17ae2:	2b00      	cmp	r3, #0
   17ae4:	d044      	beq.n	17b70 <disk_ioctl+0xb4>
   17ae6:	e054      	b.n	17b92 <disk_ioctl+0xd6>
   17ae8:	2b02      	cmp	r3, #2
   17aea:	d01a      	beq.n	17b22 <disk_ioctl+0x66>
   17aec:	2b03      	cmp	r3, #3
   17aee:	d150      	bne.n	17b92 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   17af0:	683b      	ldr	r3, [r7, #0]
   17af2:	2201      	movs	r2, #1
   17af4:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   17af6:	230f      	movs	r3, #15
   17af8:	18fb      	adds	r3, r7, r3
   17afa:	2200      	movs	r2, #0
   17afc:	701a      	strb	r2, [r3, #0]
		break;
   17afe:	e04c      	b.n	17b9a <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   17b00:	2308      	movs	r3, #8
   17b02:	18fa      	adds	r2, r7, r3
   17b04:	1dfb      	adds	r3, r7, #7
   17b06:	781b      	ldrb	r3, [r3, #0]
   17b08:	0011      	movs	r1, r2
   17b0a:	0018      	movs	r0, r3
   17b0c:	4b26      	ldr	r3, [pc, #152]	; (17ba8 <disk_ioctl+0xec>)
   17b0e:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   17b10:	68bb      	ldr	r3, [r7, #8]
   17b12:	1c5a      	adds	r2, r3, #1
   17b14:	683b      	ldr	r3, [r7, #0]
   17b16:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   17b18:	230f      	movs	r3, #15
   17b1a:	18fb      	adds	r3, r7, r3
   17b1c:	2200      	movs	r2, #0
   17b1e:	701a      	strb	r2, [r3, #0]
	}
	break;
   17b20:	e03b      	b.n	17b9a <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   17b22:	230e      	movs	r3, #14
   17b24:	18fc      	adds	r4, r7, r3
   17b26:	1dfb      	adds	r3, r7, #7
   17b28:	781b      	ldrb	r3, [r3, #0]
   17b2a:	0018      	movs	r0, r3
   17b2c:	4b1f      	ldr	r3, [pc, #124]	; (17bac <disk_ioctl+0xf0>)
   17b2e:	4798      	blx	r3
   17b30:	0003      	movs	r3, r0
   17b32:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   17b34:	230e      	movs	r3, #14
   17b36:	18fb      	adds	r3, r7, r3
   17b38:	781b      	ldrb	r3, [r3, #0]
   17b3a:	2b01      	cmp	r3, #1
   17b3c:	d010      	beq.n	17b60 <disk_ioctl+0xa4>
   17b3e:	230e      	movs	r3, #14
   17b40:	18fb      	adds	r3, r7, r3
   17b42:	781b      	ldrb	r3, [r3, #0]
   17b44:	2b02      	cmp	r3, #2
   17b46:	d00b      	beq.n	17b60 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   17b48:	230e      	movs	r3, #14
   17b4a:	18fb      	adds	r3, r7, r3
   17b4c:	781b      	ldrb	r3, [r3, #0]
   17b4e:	2b04      	cmp	r3, #4
   17b50:	d006      	beq.n	17b60 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   17b52:	230e      	movs	r3, #14
   17b54:	18fb      	adds	r3, r7, r3
   17b56:	781b      	ldrb	r3, [r3, #0]
   17b58:	2b08      	cmp	r3, #8
   17b5a:	d001      	beq.n	17b60 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   17b5c:	2301      	movs	r3, #1
   17b5e:	e01f      	b.n	17ba0 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   17b60:	683b      	ldr	r3, [r7, #0]
   17b62:	2200      	movs	r2, #0
   17b64:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   17b66:	230f      	movs	r3, #15
   17b68:	18fb      	adds	r3, r7, r3
   17b6a:	2200      	movs	r2, #0
   17b6c:	701a      	strb	r2, [r3, #0]
	}
	break;
   17b6e:	e014      	b.n	17b9a <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   17b70:	1dfb      	adds	r3, r7, #7
   17b72:	781b      	ldrb	r3, [r3, #0]
   17b74:	0018      	movs	r0, r3
   17b76:	4b0e      	ldr	r3, [pc, #56]	; (17bb0 <disk_ioctl+0xf4>)
   17b78:	4798      	blx	r3
   17b7a:	1e03      	subs	r3, r0, #0
   17b7c:	d104      	bne.n	17b88 <disk_ioctl+0xcc>
			res = RES_OK;
   17b7e:	230f      	movs	r3, #15
   17b80:	18fb      	adds	r3, r7, r3
   17b82:	2200      	movs	r2, #0
   17b84:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   17b86:	e008      	b.n	17b9a <disk_ioctl+0xde>
			res = RES_NOTRDY;
   17b88:	230f      	movs	r3, #15
   17b8a:	18fb      	adds	r3, r7, r3
   17b8c:	2203      	movs	r2, #3
   17b8e:	701a      	strb	r2, [r3, #0]
		break;
   17b90:	e003      	b.n	17b9a <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   17b92:	230f      	movs	r3, #15
   17b94:	18fb      	adds	r3, r7, r3
   17b96:	2204      	movs	r2, #4
   17b98:	701a      	strb	r2, [r3, #0]
	}

	return res;
   17b9a:	230f      	movs	r3, #15
   17b9c:	18fb      	adds	r3, r7, r3
   17b9e:	781b      	ldrb	r3, [r3, #0]
}
   17ba0:	0018      	movs	r0, r3
   17ba2:	46bd      	mov	sp, r7
   17ba4:	b005      	add	sp, #20
   17ba6:	bd90      	pop	{r4, r7, pc}
   17ba8:	00012561 	.word	0x00012561
   17bac:	000125ad 	.word	0x000125ad
   17bb0:	00012521 	.word	0x00012521

00017bb4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   17bb4:	b580      	push	{r7, lr}
   17bb6:	b084      	sub	sp, #16
   17bb8:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   17bba:	1d3a      	adds	r2, r7, #4
   17bbc:	4b12      	ldr	r3, [pc, #72]	; (17c08 <get_fattime+0x54>)
   17bbe:	0011      	movs	r1, r2
   17bc0:	0018      	movs	r0, r3
   17bc2:	4b12      	ldr	r3, [pc, #72]	; (17c0c <get_fattime+0x58>)
   17bc4:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   17bc6:	1d3b      	adds	r3, r7, #4
   17bc8:	88db      	ldrh	r3, [r3, #6]
   17bca:	4a11      	ldr	r2, [pc, #68]	; (17c10 <get_fattime+0x5c>)
   17bcc:	4694      	mov	ip, r2
   17bce:	4463      	add	r3, ip
   17bd0:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   17bd2:	1d3b      	adds	r3, r7, #4
   17bd4:	795b      	ldrb	r3, [r3, #5]
   17bd6:	055b      	lsls	r3, r3, #21
   17bd8:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   17bda:	1d3b      	adds	r3, r7, #4
   17bdc:	791b      	ldrb	r3, [r3, #4]
   17bde:	041b      	lsls	r3, r3, #16
   17be0:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   17be2:	1d3b      	adds	r3, r7, #4
   17be4:	789b      	ldrb	r3, [r3, #2]
   17be6:	02db      	lsls	r3, r3, #11
   17be8:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   17bea:	1d3b      	adds	r3, r7, #4
   17bec:	785b      	ldrb	r3, [r3, #1]
   17bee:	015b      	lsls	r3, r3, #5
   17bf0:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   17bf2:	1d3a      	adds	r2, r7, #4
   17bf4:	7812      	ldrb	r2, [r2, #0]
   17bf6:	0852      	lsrs	r2, r2, #1
   17bf8:	b2d2      	uxtb	r2, r2
   17bfa:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   17bfc:	60fb      	str	r3, [r7, #12]

	return ul_time;
   17bfe:	68fb      	ldr	r3, [r7, #12]
}
   17c00:	0018      	movs	r0, r3
   17c02:	46bd      	mov	sp, r7
   17c04:	b004      	add	sp, #16
   17c06:	bd80      	pop	{r7, pc}
   17c08:	20005a40 	.word	0x20005a40
   17c0c:	0001338d 	.word	0x0001338d
   17c10:	fffff844 	.word	0xfffff844

00017c14 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   17c14:	b580      	push	{r7, lr}
   17c16:	b086      	sub	sp, #24
   17c18:	af00      	add	r7, sp, #0
   17c1a:	60f8      	str	r0, [r7, #12]
   17c1c:	60b9      	str	r1, [r7, #8]
   17c1e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   17c20:	68fb      	ldr	r3, [r7, #12]
   17c22:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   17c24:	68bb      	ldr	r3, [r7, #8]
   17c26:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   17c28:	e007      	b.n	17c3a <mem_cpy+0x26>
		*d++ = *s++;
   17c2a:	697b      	ldr	r3, [r7, #20]
   17c2c:	1c5a      	adds	r2, r3, #1
   17c2e:	617a      	str	r2, [r7, #20]
   17c30:	693a      	ldr	r2, [r7, #16]
   17c32:	1c51      	adds	r1, r2, #1
   17c34:	6139      	str	r1, [r7, #16]
   17c36:	7812      	ldrb	r2, [r2, #0]
   17c38:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   17c3a:	687b      	ldr	r3, [r7, #4]
   17c3c:	1e5a      	subs	r2, r3, #1
   17c3e:	607a      	str	r2, [r7, #4]
   17c40:	2b00      	cmp	r3, #0
   17c42:	d1f2      	bne.n	17c2a <mem_cpy+0x16>
}
   17c44:	46c0      	nop			; (mov r8, r8)
   17c46:	46bd      	mov	sp, r7
   17c48:	b006      	add	sp, #24
   17c4a:	bd80      	pop	{r7, pc}

00017c4c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   17c4c:	b580      	push	{r7, lr}
   17c4e:	b086      	sub	sp, #24
   17c50:	af00      	add	r7, sp, #0
   17c52:	60f8      	str	r0, [r7, #12]
   17c54:	60b9      	str	r1, [r7, #8]
   17c56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   17c58:	68fb      	ldr	r3, [r7, #12]
   17c5a:	617b      	str	r3, [r7, #20]

	while (cnt--)
   17c5c:	e005      	b.n	17c6a <mem_set+0x1e>
		*d++ = (BYTE)val;
   17c5e:	697b      	ldr	r3, [r7, #20]
   17c60:	1c5a      	adds	r2, r3, #1
   17c62:	617a      	str	r2, [r7, #20]
   17c64:	68ba      	ldr	r2, [r7, #8]
   17c66:	b2d2      	uxtb	r2, r2
   17c68:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   17c6a:	687b      	ldr	r3, [r7, #4]
   17c6c:	1e5a      	subs	r2, r3, #1
   17c6e:	607a      	str	r2, [r7, #4]
   17c70:	2b00      	cmp	r3, #0
   17c72:	d1f4      	bne.n	17c5e <mem_set+0x12>
}
   17c74:	46c0      	nop			; (mov r8, r8)
   17c76:	46bd      	mov	sp, r7
   17c78:	b006      	add	sp, #24
   17c7a:	bd80      	pop	{r7, pc}

00017c7c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   17c7c:	b580      	push	{r7, lr}
   17c7e:	b088      	sub	sp, #32
   17c80:	af00      	add	r7, sp, #0
   17c82:	60f8      	str	r0, [r7, #12]
   17c84:	60b9      	str	r1, [r7, #8]
   17c86:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   17c88:	68fb      	ldr	r3, [r7, #12]
   17c8a:	61fb      	str	r3, [r7, #28]
   17c8c:	68bb      	ldr	r3, [r7, #8]
   17c8e:	61bb      	str	r3, [r7, #24]
	int r = 0;
   17c90:	2300      	movs	r3, #0
   17c92:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   17c94:	46c0      	nop			; (mov r8, r8)
   17c96:	687b      	ldr	r3, [r7, #4]
   17c98:	1e5a      	subs	r2, r3, #1
   17c9a:	607a      	str	r2, [r7, #4]
   17c9c:	2b00      	cmp	r3, #0
   17c9e:	d00d      	beq.n	17cbc <mem_cmp+0x40>
   17ca0:	69fb      	ldr	r3, [r7, #28]
   17ca2:	1c5a      	adds	r2, r3, #1
   17ca4:	61fa      	str	r2, [r7, #28]
   17ca6:	781b      	ldrb	r3, [r3, #0]
   17ca8:	0019      	movs	r1, r3
   17caa:	69bb      	ldr	r3, [r7, #24]
   17cac:	1c5a      	adds	r2, r3, #1
   17cae:	61ba      	str	r2, [r7, #24]
   17cb0:	781b      	ldrb	r3, [r3, #0]
   17cb2:	1acb      	subs	r3, r1, r3
   17cb4:	617b      	str	r3, [r7, #20]
   17cb6:	697b      	ldr	r3, [r7, #20]
   17cb8:	2b00      	cmp	r3, #0
   17cba:	d0ec      	beq.n	17c96 <mem_cmp+0x1a>
	return r;
   17cbc:	697b      	ldr	r3, [r7, #20]
}
   17cbe:	0018      	movs	r0, r3
   17cc0:	46bd      	mov	sp, r7
   17cc2:	b008      	add	sp, #32
   17cc4:	bd80      	pop	{r7, pc}

00017cc6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   17cc6:	b580      	push	{r7, lr}
   17cc8:	b082      	sub	sp, #8
   17cca:	af00      	add	r7, sp, #0
   17ccc:	6078      	str	r0, [r7, #4]
   17cce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   17cd0:	e002      	b.n	17cd8 <chk_chr+0x12>
   17cd2:	687b      	ldr	r3, [r7, #4]
   17cd4:	3301      	adds	r3, #1
   17cd6:	607b      	str	r3, [r7, #4]
   17cd8:	687b      	ldr	r3, [r7, #4]
   17cda:	781b      	ldrb	r3, [r3, #0]
   17cdc:	2b00      	cmp	r3, #0
   17cde:	d005      	beq.n	17cec <chk_chr+0x26>
   17ce0:	687b      	ldr	r3, [r7, #4]
   17ce2:	781b      	ldrb	r3, [r3, #0]
   17ce4:	001a      	movs	r2, r3
   17ce6:	683b      	ldr	r3, [r7, #0]
   17ce8:	429a      	cmp	r2, r3
   17cea:	d1f2      	bne.n	17cd2 <chk_chr+0xc>
	return *str;
   17cec:	687b      	ldr	r3, [r7, #4]
   17cee:	781b      	ldrb	r3, [r3, #0]
}
   17cf0:	0018      	movs	r0, r3
   17cf2:	46bd      	mov	sp, r7
   17cf4:	b002      	add	sp, #8
   17cf6:	bd80      	pop	{r7, pc}

00017cf8 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   17cf8:	b590      	push	{r4, r7, lr}
   17cfa:	b085      	sub	sp, #20
   17cfc:	af00      	add	r7, sp, #0
   17cfe:	6078      	str	r0, [r7, #4]
   17d00:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   17d02:	687b      	ldr	r3, [r7, #4]
   17d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17d06:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   17d08:	68fa      	ldr	r2, [r7, #12]
   17d0a:	683b      	ldr	r3, [r7, #0]
   17d0c:	429a      	cmp	r2, r3
   17d0e:	d04e      	beq.n	17dae <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   17d10:	687b      	ldr	r3, [r7, #4]
   17d12:	791b      	ldrb	r3, [r3, #4]
   17d14:	2b00      	cmp	r3, #0
   17d16:	d037      	beq.n	17d88 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   17d18:	687b      	ldr	r3, [r7, #4]
   17d1a:	7858      	ldrb	r0, [r3, #1]
   17d1c:	687b      	ldr	r3, [r7, #4]
   17d1e:	3330      	adds	r3, #48	; 0x30
   17d20:	0019      	movs	r1, r3
   17d22:	68fa      	ldr	r2, [r7, #12]
   17d24:	2301      	movs	r3, #1
   17d26:	4c24      	ldr	r4, [pc, #144]	; (17db8 <move_window+0xc0>)
   17d28:	47a0      	blx	r4
   17d2a:	1e03      	subs	r3, r0, #0
   17d2c:	d001      	beq.n	17d32 <move_window+0x3a>
				return FR_DISK_ERR;
   17d2e:	2301      	movs	r3, #1
   17d30:	e03e      	b.n	17db0 <move_window+0xb8>
			fs->wflag = 0;
   17d32:	687b      	ldr	r3, [r7, #4]
   17d34:	2200      	movs	r2, #0
   17d36:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   17d38:	687b      	ldr	r3, [r7, #4]
   17d3a:	6a1a      	ldr	r2, [r3, #32]
   17d3c:	687b      	ldr	r3, [r7, #4]
   17d3e:	69db      	ldr	r3, [r3, #28]
   17d40:	18d2      	adds	r2, r2, r3
   17d42:	68fb      	ldr	r3, [r7, #12]
   17d44:	429a      	cmp	r2, r3
   17d46:	d91f      	bls.n	17d88 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   17d48:	230b      	movs	r3, #11
   17d4a:	18fb      	adds	r3, r7, r3
   17d4c:	687a      	ldr	r2, [r7, #4]
   17d4e:	78d2      	ldrb	r2, [r2, #3]
   17d50:	701a      	strb	r2, [r3, #0]
   17d52:	e014      	b.n	17d7e <move_window+0x86>
					wsect += fs->fsize;
   17d54:	687b      	ldr	r3, [r7, #4]
   17d56:	69db      	ldr	r3, [r3, #28]
   17d58:	68fa      	ldr	r2, [r7, #12]
   17d5a:	18d3      	adds	r3, r2, r3
   17d5c:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   17d5e:	687b      	ldr	r3, [r7, #4]
   17d60:	7858      	ldrb	r0, [r3, #1]
   17d62:	687b      	ldr	r3, [r7, #4]
   17d64:	3330      	adds	r3, #48	; 0x30
   17d66:	0019      	movs	r1, r3
   17d68:	68fa      	ldr	r2, [r7, #12]
   17d6a:	2301      	movs	r3, #1
   17d6c:	4c12      	ldr	r4, [pc, #72]	; (17db8 <move_window+0xc0>)
   17d6e:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   17d70:	230b      	movs	r3, #11
   17d72:	18fb      	adds	r3, r7, r3
   17d74:	781a      	ldrb	r2, [r3, #0]
   17d76:	230b      	movs	r3, #11
   17d78:	18fb      	adds	r3, r7, r3
   17d7a:	3a01      	subs	r2, #1
   17d7c:	701a      	strb	r2, [r3, #0]
   17d7e:	230b      	movs	r3, #11
   17d80:	18fb      	adds	r3, r7, r3
   17d82:	781b      	ldrb	r3, [r3, #0]
   17d84:	2b01      	cmp	r3, #1
   17d86:	d8e5      	bhi.n	17d54 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   17d88:	683b      	ldr	r3, [r7, #0]
   17d8a:	2b00      	cmp	r3, #0
   17d8c:	d00f      	beq.n	17dae <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   17d8e:	687b      	ldr	r3, [r7, #4]
   17d90:	7858      	ldrb	r0, [r3, #1]
   17d92:	687b      	ldr	r3, [r7, #4]
   17d94:	3330      	adds	r3, #48	; 0x30
   17d96:	0019      	movs	r1, r3
   17d98:	683a      	ldr	r2, [r7, #0]
   17d9a:	2301      	movs	r3, #1
   17d9c:	4c07      	ldr	r4, [pc, #28]	; (17dbc <move_window+0xc4>)
   17d9e:	47a0      	blx	r4
   17da0:	1e03      	subs	r3, r0, #0
   17da2:	d001      	beq.n	17da8 <move_window+0xb0>
				return FR_DISK_ERR;
   17da4:	2301      	movs	r3, #1
   17da6:	e003      	b.n	17db0 <move_window+0xb8>
			fs->winsect = sector;
   17da8:	687b      	ldr	r3, [r7, #4]
   17daa:	683a      	ldr	r2, [r7, #0]
   17dac:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   17dae:	2300      	movs	r3, #0
}
   17db0:	0018      	movs	r0, r3
   17db2:	46bd      	mov	sp, r7
   17db4:	b005      	add	sp, #20
   17db6:	bd90      	pop	{r4, r7, pc}
   17db8:	000179e5 	.word	0x000179e5
   17dbc:	0001790d 	.word	0x0001790d

00017dc0 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   17dc0:	b590      	push	{r4, r7, lr}
   17dc2:	b085      	sub	sp, #20
   17dc4:	af00      	add	r7, sp, #0
   17dc6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   17dc8:	230f      	movs	r3, #15
   17dca:	18fc      	adds	r4, r7, r3
   17dcc:	687b      	ldr	r3, [r7, #4]
   17dce:	2100      	movs	r1, #0
   17dd0:	0018      	movs	r0, r3
   17dd2:	4b52      	ldr	r3, [pc, #328]	; (17f1c <sync+0x15c>)
   17dd4:	4798      	blx	r3
   17dd6:	0003      	movs	r3, r0
   17dd8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   17dda:	230f      	movs	r3, #15
   17ddc:	18fb      	adds	r3, r7, r3
   17dde:	781b      	ldrb	r3, [r3, #0]
   17de0:	2b00      	cmp	r3, #0
   17de2:	d000      	beq.n	17de6 <sync+0x26>
   17de4:	e093      	b.n	17f0e <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   17de6:	687b      	ldr	r3, [r7, #4]
   17de8:	781b      	ldrb	r3, [r3, #0]
   17dea:	2b03      	cmp	r3, #3
   17dec:	d000      	beq.n	17df0 <sync+0x30>
   17dee:	e081      	b.n	17ef4 <sync+0x134>
   17df0:	687b      	ldr	r3, [r7, #4]
   17df2:	795b      	ldrb	r3, [r3, #5]
   17df4:	2b00      	cmp	r3, #0
   17df6:	d07d      	beq.n	17ef4 <sync+0x134>
			fs->winsect = 0;
   17df8:	687b      	ldr	r3, [r7, #4]
   17dfa:	2200      	movs	r2, #0
   17dfc:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   17dfe:	687b      	ldr	r3, [r7, #4]
   17e00:	3330      	adds	r3, #48	; 0x30
   17e02:	0018      	movs	r0, r3
   17e04:	2380      	movs	r3, #128	; 0x80
   17e06:	009b      	lsls	r3, r3, #2
   17e08:	001a      	movs	r2, r3
   17e0a:	2100      	movs	r1, #0
   17e0c:	4b44      	ldr	r3, [pc, #272]	; (17f20 <sync+0x160>)
   17e0e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   17e10:	687b      	ldr	r3, [r7, #4]
   17e12:	4a44      	ldr	r2, [pc, #272]	; (17f24 <sync+0x164>)
   17e14:	2155      	movs	r1, #85	; 0x55
   17e16:	5499      	strb	r1, [r3, r2]
   17e18:	687b      	ldr	r3, [r7, #4]
   17e1a:	4a43      	ldr	r2, [pc, #268]	; (17f28 <sync+0x168>)
   17e1c:	21aa      	movs	r1, #170	; 0xaa
   17e1e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   17e20:	687b      	ldr	r3, [r7, #4]
   17e22:	2230      	movs	r2, #48	; 0x30
   17e24:	2152      	movs	r1, #82	; 0x52
   17e26:	5499      	strb	r1, [r3, r2]
   17e28:	687b      	ldr	r3, [r7, #4]
   17e2a:	2231      	movs	r2, #49	; 0x31
   17e2c:	2152      	movs	r1, #82	; 0x52
   17e2e:	5499      	strb	r1, [r3, r2]
   17e30:	687b      	ldr	r3, [r7, #4]
   17e32:	2232      	movs	r2, #50	; 0x32
   17e34:	2161      	movs	r1, #97	; 0x61
   17e36:	5499      	strb	r1, [r3, r2]
   17e38:	687b      	ldr	r3, [r7, #4]
   17e3a:	2233      	movs	r2, #51	; 0x33
   17e3c:	2141      	movs	r1, #65	; 0x41
   17e3e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   17e40:	687a      	ldr	r2, [r7, #4]
   17e42:	2385      	movs	r3, #133	; 0x85
   17e44:	009b      	lsls	r3, r3, #2
   17e46:	2172      	movs	r1, #114	; 0x72
   17e48:	54d1      	strb	r1, [r2, r3]
   17e4a:	687b      	ldr	r3, [r7, #4]
   17e4c:	4a37      	ldr	r2, [pc, #220]	; (17f2c <sync+0x16c>)
   17e4e:	2172      	movs	r1, #114	; 0x72
   17e50:	5499      	strb	r1, [r3, r2]
   17e52:	687b      	ldr	r3, [r7, #4]
   17e54:	4a36      	ldr	r2, [pc, #216]	; (17f30 <sync+0x170>)
   17e56:	2141      	movs	r1, #65	; 0x41
   17e58:	5499      	strb	r1, [r3, r2]
   17e5a:	687b      	ldr	r3, [r7, #4]
   17e5c:	4a35      	ldr	r2, [pc, #212]	; (17f34 <sync+0x174>)
   17e5e:	2161      	movs	r1, #97	; 0x61
   17e60:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   17e62:	687b      	ldr	r3, [r7, #4]
   17e64:	691b      	ldr	r3, [r3, #16]
   17e66:	b2d9      	uxtb	r1, r3
   17e68:	687a      	ldr	r2, [r7, #4]
   17e6a:	2386      	movs	r3, #134	; 0x86
   17e6c:	009b      	lsls	r3, r3, #2
   17e6e:	54d1      	strb	r1, [r2, r3]
   17e70:	687b      	ldr	r3, [r7, #4]
   17e72:	691b      	ldr	r3, [r3, #16]
   17e74:	b29b      	uxth	r3, r3
   17e76:	0a1b      	lsrs	r3, r3, #8
   17e78:	b29b      	uxth	r3, r3
   17e7a:	b2d9      	uxtb	r1, r3
   17e7c:	687b      	ldr	r3, [r7, #4]
   17e7e:	4a2e      	ldr	r2, [pc, #184]	; (17f38 <sync+0x178>)
   17e80:	5499      	strb	r1, [r3, r2]
   17e82:	687b      	ldr	r3, [r7, #4]
   17e84:	691b      	ldr	r3, [r3, #16]
   17e86:	0c1b      	lsrs	r3, r3, #16
   17e88:	b2d9      	uxtb	r1, r3
   17e8a:	687b      	ldr	r3, [r7, #4]
   17e8c:	4a2b      	ldr	r2, [pc, #172]	; (17f3c <sync+0x17c>)
   17e8e:	5499      	strb	r1, [r3, r2]
   17e90:	687b      	ldr	r3, [r7, #4]
   17e92:	691b      	ldr	r3, [r3, #16]
   17e94:	0e1b      	lsrs	r3, r3, #24
   17e96:	b2d9      	uxtb	r1, r3
   17e98:	687b      	ldr	r3, [r7, #4]
   17e9a:	4a29      	ldr	r2, [pc, #164]	; (17f40 <sync+0x180>)
   17e9c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   17e9e:	687b      	ldr	r3, [r7, #4]
   17ea0:	68db      	ldr	r3, [r3, #12]
   17ea2:	b2d9      	uxtb	r1, r3
   17ea4:	687a      	ldr	r2, [r7, #4]
   17ea6:	2387      	movs	r3, #135	; 0x87
   17ea8:	009b      	lsls	r3, r3, #2
   17eaa:	54d1      	strb	r1, [r2, r3]
   17eac:	687b      	ldr	r3, [r7, #4]
   17eae:	68db      	ldr	r3, [r3, #12]
   17eb0:	b29b      	uxth	r3, r3
   17eb2:	0a1b      	lsrs	r3, r3, #8
   17eb4:	b29b      	uxth	r3, r3
   17eb6:	b2d9      	uxtb	r1, r3
   17eb8:	687b      	ldr	r3, [r7, #4]
   17eba:	4a22      	ldr	r2, [pc, #136]	; (17f44 <sync+0x184>)
   17ebc:	5499      	strb	r1, [r3, r2]
   17ebe:	687b      	ldr	r3, [r7, #4]
   17ec0:	68db      	ldr	r3, [r3, #12]
   17ec2:	0c1b      	lsrs	r3, r3, #16
   17ec4:	b2d9      	uxtb	r1, r3
   17ec6:	687b      	ldr	r3, [r7, #4]
   17ec8:	4a1f      	ldr	r2, [pc, #124]	; (17f48 <sync+0x188>)
   17eca:	5499      	strb	r1, [r3, r2]
   17ecc:	687b      	ldr	r3, [r7, #4]
   17ece:	68db      	ldr	r3, [r3, #12]
   17ed0:	0e1b      	lsrs	r3, r3, #24
   17ed2:	b2d9      	uxtb	r1, r3
   17ed4:	687b      	ldr	r3, [r7, #4]
   17ed6:	4a1d      	ldr	r2, [pc, #116]	; (17f4c <sync+0x18c>)
   17ed8:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   17eda:	687b      	ldr	r3, [r7, #4]
   17edc:	7858      	ldrb	r0, [r3, #1]
   17ede:	687b      	ldr	r3, [r7, #4]
   17ee0:	3330      	adds	r3, #48	; 0x30
   17ee2:	0019      	movs	r1, r3
   17ee4:	687b      	ldr	r3, [r7, #4]
   17ee6:	695a      	ldr	r2, [r3, #20]
   17ee8:	2301      	movs	r3, #1
   17eea:	4c19      	ldr	r4, [pc, #100]	; (17f50 <sync+0x190>)
   17eec:	47a0      	blx	r4
			fs->fsi_flag = 0;
   17eee:	687b      	ldr	r3, [r7, #4]
   17ef0:	2200      	movs	r2, #0
   17ef2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   17ef4:	687b      	ldr	r3, [r7, #4]
   17ef6:	785b      	ldrb	r3, [r3, #1]
   17ef8:	2200      	movs	r2, #0
   17efa:	2100      	movs	r1, #0
   17efc:	0018      	movs	r0, r3
   17efe:	4b15      	ldr	r3, [pc, #84]	; (17f54 <sync+0x194>)
   17f00:	4798      	blx	r3
   17f02:	1e03      	subs	r3, r0, #0
   17f04:	d003      	beq.n	17f0e <sync+0x14e>
			res = FR_DISK_ERR;
   17f06:	230f      	movs	r3, #15
   17f08:	18fb      	adds	r3, r7, r3
   17f0a:	2201      	movs	r2, #1
   17f0c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   17f0e:	230f      	movs	r3, #15
   17f10:	18fb      	adds	r3, r7, r3
   17f12:	781b      	ldrb	r3, [r3, #0]
}
   17f14:	0018      	movs	r0, r3
   17f16:	46bd      	mov	sp, r7
   17f18:	b005      	add	sp, #20
   17f1a:	bd90      	pop	{r4, r7, pc}
   17f1c:	00017cf9 	.word	0x00017cf9
   17f20:	00017c4d 	.word	0x00017c4d
   17f24:	0000022e 	.word	0x0000022e
   17f28:	0000022f 	.word	0x0000022f
   17f2c:	00000215 	.word	0x00000215
   17f30:	00000216 	.word	0x00000216
   17f34:	00000217 	.word	0x00000217
   17f38:	00000219 	.word	0x00000219
   17f3c:	0000021a 	.word	0x0000021a
   17f40:	0000021b 	.word	0x0000021b
   17f44:	0000021d 	.word	0x0000021d
   17f48:	0000021e 	.word	0x0000021e
   17f4c:	0000021f 	.word	0x0000021f
   17f50:	000179e5 	.word	0x000179e5
   17f54:	00017abd 	.word	0x00017abd

00017f58 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   17f58:	b580      	push	{r7, lr}
   17f5a:	b082      	sub	sp, #8
   17f5c:	af00      	add	r7, sp, #0
   17f5e:	6078      	str	r0, [r7, #4]
   17f60:	6039      	str	r1, [r7, #0]
	clst -= 2;
   17f62:	683b      	ldr	r3, [r7, #0]
   17f64:	3b02      	subs	r3, #2
   17f66:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   17f68:	687b      	ldr	r3, [r7, #4]
   17f6a:	699b      	ldr	r3, [r3, #24]
   17f6c:	1e9a      	subs	r2, r3, #2
   17f6e:	683b      	ldr	r3, [r7, #0]
   17f70:	429a      	cmp	r2, r3
   17f72:	d801      	bhi.n	17f78 <clust2sect+0x20>
   17f74:	2300      	movs	r3, #0
   17f76:	e007      	b.n	17f88 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   17f78:	687b      	ldr	r3, [r7, #4]
   17f7a:	789b      	ldrb	r3, [r3, #2]
   17f7c:	001a      	movs	r2, r3
   17f7e:	683b      	ldr	r3, [r7, #0]
   17f80:	435a      	muls	r2, r3
   17f82:	687b      	ldr	r3, [r7, #4]
   17f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17f86:	18d3      	adds	r3, r2, r3
}
   17f88:	0018      	movs	r0, r3
   17f8a:	46bd      	mov	sp, r7
   17f8c:	b002      	add	sp, #8
   17f8e:	bd80      	pop	{r7, pc}

00017f90 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   17f90:	b580      	push	{r7, lr}
   17f92:	b086      	sub	sp, #24
   17f94:	af00      	add	r7, sp, #0
   17f96:	6078      	str	r0, [r7, #4]
   17f98:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   17f9a:	683b      	ldr	r3, [r7, #0]
   17f9c:	2b01      	cmp	r3, #1
   17f9e:	d904      	bls.n	17faa <get_fat+0x1a>
   17fa0:	687b      	ldr	r3, [r7, #4]
   17fa2:	699a      	ldr	r2, [r3, #24]
   17fa4:	683b      	ldr	r3, [r7, #0]
   17fa6:	429a      	cmp	r2, r3
   17fa8:	d801      	bhi.n	17fae <get_fat+0x1e>
		return 1;
   17faa:	2301      	movs	r3, #1
   17fac:	e09f      	b.n	180ee <get_fat+0x15e>

	switch (fs->fs_type) {
   17fae:	687b      	ldr	r3, [r7, #4]
   17fb0:	781b      	ldrb	r3, [r3, #0]
   17fb2:	2b02      	cmp	r3, #2
   17fb4:	d048      	beq.n	18048 <get_fat+0xb8>
   17fb6:	2b03      	cmp	r3, #3
   17fb8:	d067      	beq.n	1808a <get_fat+0xfa>
   17fba:	2b01      	cmp	r3, #1
   17fbc:	d000      	beq.n	17fc0 <get_fat+0x30>
   17fbe:	e094      	b.n	180ea <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   17fc0:	683b      	ldr	r3, [r7, #0]
   17fc2:	617b      	str	r3, [r7, #20]
   17fc4:	697b      	ldr	r3, [r7, #20]
   17fc6:	085b      	lsrs	r3, r3, #1
   17fc8:	697a      	ldr	r2, [r7, #20]
   17fca:	18d3      	adds	r3, r2, r3
   17fcc:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   17fce:	687b      	ldr	r3, [r7, #4]
   17fd0:	6a1a      	ldr	r2, [r3, #32]
   17fd2:	697b      	ldr	r3, [r7, #20]
   17fd4:	0a5b      	lsrs	r3, r3, #9
   17fd6:	18d2      	adds	r2, r2, r3
   17fd8:	687b      	ldr	r3, [r7, #4]
   17fda:	0011      	movs	r1, r2
   17fdc:	0018      	movs	r0, r3
   17fde:	4b46      	ldr	r3, [pc, #280]	; (180f8 <get_fat+0x168>)
   17fe0:	4798      	blx	r3
   17fe2:	1e03      	subs	r3, r0, #0
   17fe4:	d000      	beq.n	17fe8 <get_fat+0x58>
   17fe6:	e079      	b.n	180dc <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   17fe8:	697b      	ldr	r3, [r7, #20]
   17fea:	05db      	lsls	r3, r3, #23
   17fec:	0ddb      	lsrs	r3, r3, #23
   17fee:	687a      	ldr	r2, [r7, #4]
   17ff0:	2130      	movs	r1, #48	; 0x30
   17ff2:	18d3      	adds	r3, r2, r3
   17ff4:	185b      	adds	r3, r3, r1
   17ff6:	781b      	ldrb	r3, [r3, #0]
   17ff8:	613b      	str	r3, [r7, #16]
   17ffa:	697b      	ldr	r3, [r7, #20]
   17ffc:	3301      	adds	r3, #1
   17ffe:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   18000:	687b      	ldr	r3, [r7, #4]
   18002:	6a1a      	ldr	r2, [r3, #32]
   18004:	697b      	ldr	r3, [r7, #20]
   18006:	0a5b      	lsrs	r3, r3, #9
   18008:	18d2      	adds	r2, r2, r3
   1800a:	687b      	ldr	r3, [r7, #4]
   1800c:	0011      	movs	r1, r2
   1800e:	0018      	movs	r0, r3
   18010:	4b39      	ldr	r3, [pc, #228]	; (180f8 <get_fat+0x168>)
   18012:	4798      	blx	r3
   18014:	1e03      	subs	r3, r0, #0
   18016:	d163      	bne.n	180e0 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   18018:	697b      	ldr	r3, [r7, #20]
   1801a:	05db      	lsls	r3, r3, #23
   1801c:	0ddb      	lsrs	r3, r3, #23
   1801e:	687a      	ldr	r2, [r7, #4]
   18020:	2130      	movs	r1, #48	; 0x30
   18022:	18d3      	adds	r3, r2, r3
   18024:	185b      	adds	r3, r3, r1
   18026:	781b      	ldrb	r3, [r3, #0]
   18028:	021b      	lsls	r3, r3, #8
   1802a:	001a      	movs	r2, r3
   1802c:	693b      	ldr	r3, [r7, #16]
   1802e:	4313      	orrs	r3, r2
   18030:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   18032:	683b      	ldr	r3, [r7, #0]
   18034:	2201      	movs	r2, #1
   18036:	4013      	ands	r3, r2
   18038:	d002      	beq.n	18040 <get_fat+0xb0>
   1803a:	693b      	ldr	r3, [r7, #16]
   1803c:	091b      	lsrs	r3, r3, #4
   1803e:	e056      	b.n	180ee <get_fat+0x15e>
   18040:	693b      	ldr	r3, [r7, #16]
   18042:	051b      	lsls	r3, r3, #20
   18044:	0d1b      	lsrs	r3, r3, #20
   18046:	e052      	b.n	180ee <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   18048:	687b      	ldr	r3, [r7, #4]
   1804a:	6a1a      	ldr	r2, [r3, #32]
   1804c:	683b      	ldr	r3, [r7, #0]
   1804e:	0a1b      	lsrs	r3, r3, #8
   18050:	18d2      	adds	r2, r2, r3
   18052:	687b      	ldr	r3, [r7, #4]
   18054:	0011      	movs	r1, r2
   18056:	0018      	movs	r0, r3
   18058:	4b27      	ldr	r3, [pc, #156]	; (180f8 <get_fat+0x168>)
   1805a:	4798      	blx	r3
   1805c:	1e03      	subs	r3, r0, #0
   1805e:	d141      	bne.n	180e4 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   18060:	683b      	ldr	r3, [r7, #0]
   18062:	005a      	lsls	r2, r3, #1
   18064:	23ff      	movs	r3, #255	; 0xff
   18066:	005b      	lsls	r3, r3, #1
   18068:	4013      	ands	r3, r2
   1806a:	3330      	adds	r3, #48	; 0x30
   1806c:	687a      	ldr	r2, [r7, #4]
   1806e:	18d3      	adds	r3, r2, r3
   18070:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   18072:	68fb      	ldr	r3, [r7, #12]
   18074:	3301      	adds	r3, #1
   18076:	781b      	ldrb	r3, [r3, #0]
   18078:	021b      	lsls	r3, r3, #8
   1807a:	b21a      	sxth	r2, r3
   1807c:	68fb      	ldr	r3, [r7, #12]
   1807e:	781b      	ldrb	r3, [r3, #0]
   18080:	b21b      	sxth	r3, r3
   18082:	4313      	orrs	r3, r2
   18084:	b21b      	sxth	r3, r3
   18086:	b29b      	uxth	r3, r3
   18088:	e031      	b.n	180ee <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   1808a:	687b      	ldr	r3, [r7, #4]
   1808c:	6a1a      	ldr	r2, [r3, #32]
   1808e:	683b      	ldr	r3, [r7, #0]
   18090:	09db      	lsrs	r3, r3, #7
   18092:	18d2      	adds	r2, r2, r3
   18094:	687b      	ldr	r3, [r7, #4]
   18096:	0011      	movs	r1, r2
   18098:	0018      	movs	r0, r3
   1809a:	4b17      	ldr	r3, [pc, #92]	; (180f8 <get_fat+0x168>)
   1809c:	4798      	blx	r3
   1809e:	1e03      	subs	r3, r0, #0
   180a0:	d122      	bne.n	180e8 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   180a2:	683b      	ldr	r3, [r7, #0]
   180a4:	009a      	lsls	r2, r3, #2
   180a6:	23fe      	movs	r3, #254	; 0xfe
   180a8:	005b      	lsls	r3, r3, #1
   180aa:	4013      	ands	r3, r2
   180ac:	3330      	adds	r3, #48	; 0x30
   180ae:	687a      	ldr	r2, [r7, #4]
   180b0:	18d3      	adds	r3, r2, r3
   180b2:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   180b4:	68fb      	ldr	r3, [r7, #12]
   180b6:	3303      	adds	r3, #3
   180b8:	781b      	ldrb	r3, [r3, #0]
   180ba:	061a      	lsls	r2, r3, #24
   180bc:	68fb      	ldr	r3, [r7, #12]
   180be:	3302      	adds	r3, #2
   180c0:	781b      	ldrb	r3, [r3, #0]
   180c2:	041b      	lsls	r3, r3, #16
   180c4:	4313      	orrs	r3, r2
   180c6:	68fa      	ldr	r2, [r7, #12]
   180c8:	3201      	adds	r2, #1
   180ca:	7812      	ldrb	r2, [r2, #0]
   180cc:	0212      	lsls	r2, r2, #8
   180ce:	4313      	orrs	r3, r2
   180d0:	68fa      	ldr	r2, [r7, #12]
   180d2:	7812      	ldrb	r2, [r2, #0]
   180d4:	4313      	orrs	r3, r2
   180d6:	011b      	lsls	r3, r3, #4
   180d8:	091b      	lsrs	r3, r3, #4
   180da:	e008      	b.n	180ee <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   180dc:	46c0      	nop			; (mov r8, r8)
   180de:	e004      	b.n	180ea <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   180e0:	46c0      	nop			; (mov r8, r8)
   180e2:	e002      	b.n	180ea <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   180e4:	46c0      	nop			; (mov r8, r8)
   180e6:	e000      	b.n	180ea <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   180e8:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   180ea:	2301      	movs	r3, #1
   180ec:	425b      	negs	r3, r3
}
   180ee:	0018      	movs	r0, r3
   180f0:	46bd      	mov	sp, r7
   180f2:	b006      	add	sp, #24
   180f4:	bd80      	pop	{r7, pc}
   180f6:	46c0      	nop			; (mov r8, r8)
   180f8:	00017cf9 	.word	0x00017cf9

000180fc <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   180fc:	b590      	push	{r4, r7, lr}
   180fe:	b089      	sub	sp, #36	; 0x24
   18100:	af00      	add	r7, sp, #0
   18102:	60f8      	str	r0, [r7, #12]
   18104:	60b9      	str	r1, [r7, #8]
   18106:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   18108:	68bb      	ldr	r3, [r7, #8]
   1810a:	2b01      	cmp	r3, #1
   1810c:	d904      	bls.n	18118 <put_fat+0x1c>
   1810e:	68fb      	ldr	r3, [r7, #12]
   18110:	699a      	ldr	r2, [r3, #24]
   18112:	68bb      	ldr	r3, [r7, #8]
   18114:	429a      	cmp	r2, r3
   18116:	d804      	bhi.n	18122 <put_fat+0x26>
		res = FR_INT_ERR;
   18118:	231f      	movs	r3, #31
   1811a:	18fb      	adds	r3, r7, r3
   1811c:	2202      	movs	r2, #2
   1811e:	701a      	strb	r2, [r3, #0]
   18120:	e100      	b.n	18324 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   18122:	68fb      	ldr	r3, [r7, #12]
   18124:	781b      	ldrb	r3, [r3, #0]
   18126:	2b02      	cmp	r3, #2
   18128:	d100      	bne.n	1812c <put_fat+0x30>
   1812a:	e078      	b.n	1821e <put_fat+0x122>
   1812c:	2b03      	cmp	r3, #3
   1812e:	d100      	bne.n	18132 <put_fat+0x36>
   18130:	e09e      	b.n	18270 <put_fat+0x174>
   18132:	2b01      	cmp	r3, #1
   18134:	d000      	beq.n	18138 <put_fat+0x3c>
   18136:	e0e6      	b.n	18306 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   18138:	68bb      	ldr	r3, [r7, #8]
   1813a:	61bb      	str	r3, [r7, #24]
   1813c:	69bb      	ldr	r3, [r7, #24]
   1813e:	085b      	lsrs	r3, r3, #1
   18140:	69ba      	ldr	r2, [r7, #24]
   18142:	18d3      	adds	r3, r2, r3
   18144:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   18146:	68fb      	ldr	r3, [r7, #12]
   18148:	6a1a      	ldr	r2, [r3, #32]
   1814a:	69bb      	ldr	r3, [r7, #24]
   1814c:	0a5b      	lsrs	r3, r3, #9
   1814e:	18d2      	adds	r2, r2, r3
   18150:	231f      	movs	r3, #31
   18152:	18fc      	adds	r4, r7, r3
   18154:	68fb      	ldr	r3, [r7, #12]
   18156:	0011      	movs	r1, r2
   18158:	0018      	movs	r0, r3
   1815a:	4b76      	ldr	r3, [pc, #472]	; (18334 <put_fat+0x238>)
   1815c:	4798      	blx	r3
   1815e:	0003      	movs	r3, r0
   18160:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   18162:	231f      	movs	r3, #31
   18164:	18fb      	adds	r3, r7, r3
   18166:	781b      	ldrb	r3, [r3, #0]
   18168:	2b00      	cmp	r3, #0
   1816a:	d000      	beq.n	1816e <put_fat+0x72>
   1816c:	e0d0      	b.n	18310 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   1816e:	69bb      	ldr	r3, [r7, #24]
   18170:	05db      	lsls	r3, r3, #23
   18172:	0ddb      	lsrs	r3, r3, #23
   18174:	3330      	adds	r3, #48	; 0x30
   18176:	68fa      	ldr	r2, [r7, #12]
   18178:	18d3      	adds	r3, r2, r3
   1817a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   1817c:	68bb      	ldr	r3, [r7, #8]
   1817e:	2201      	movs	r2, #1
   18180:	4013      	ands	r3, r2
   18182:	d00d      	beq.n	181a0 <put_fat+0xa4>
   18184:	697b      	ldr	r3, [r7, #20]
   18186:	781b      	ldrb	r3, [r3, #0]
   18188:	b25b      	sxtb	r3, r3
   1818a:	220f      	movs	r2, #15
   1818c:	4013      	ands	r3, r2
   1818e:	b25a      	sxtb	r2, r3
   18190:	687b      	ldr	r3, [r7, #4]
   18192:	b2db      	uxtb	r3, r3
   18194:	011b      	lsls	r3, r3, #4
   18196:	b25b      	sxtb	r3, r3
   18198:	4313      	orrs	r3, r2
   1819a:	b25b      	sxtb	r3, r3
   1819c:	b2db      	uxtb	r3, r3
   1819e:	e001      	b.n	181a4 <put_fat+0xa8>
   181a0:	687b      	ldr	r3, [r7, #4]
   181a2:	b2db      	uxtb	r3, r3
   181a4:	697a      	ldr	r2, [r7, #20]
   181a6:	7013      	strb	r3, [r2, #0]
			bc++;
   181a8:	69bb      	ldr	r3, [r7, #24]
   181aa:	3301      	adds	r3, #1
   181ac:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   181ae:	68fb      	ldr	r3, [r7, #12]
   181b0:	2201      	movs	r2, #1
   181b2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   181b4:	68fb      	ldr	r3, [r7, #12]
   181b6:	6a1a      	ldr	r2, [r3, #32]
   181b8:	69bb      	ldr	r3, [r7, #24]
   181ba:	0a5b      	lsrs	r3, r3, #9
   181bc:	18d2      	adds	r2, r2, r3
   181be:	231f      	movs	r3, #31
   181c0:	18fc      	adds	r4, r7, r3
   181c2:	68fb      	ldr	r3, [r7, #12]
   181c4:	0011      	movs	r1, r2
   181c6:	0018      	movs	r0, r3
   181c8:	4b5a      	ldr	r3, [pc, #360]	; (18334 <put_fat+0x238>)
   181ca:	4798      	blx	r3
   181cc:	0003      	movs	r3, r0
   181ce:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   181d0:	231f      	movs	r3, #31
   181d2:	18fb      	adds	r3, r7, r3
   181d4:	781b      	ldrb	r3, [r3, #0]
   181d6:	2b00      	cmp	r3, #0
   181d8:	d000      	beq.n	181dc <put_fat+0xe0>
   181da:	e09b      	b.n	18314 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   181dc:	69bb      	ldr	r3, [r7, #24]
   181de:	05db      	lsls	r3, r3, #23
   181e0:	0ddb      	lsrs	r3, r3, #23
   181e2:	3330      	adds	r3, #48	; 0x30
   181e4:	68fa      	ldr	r2, [r7, #12]
   181e6:	18d3      	adds	r3, r2, r3
   181e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   181ea:	68bb      	ldr	r3, [r7, #8]
   181ec:	2201      	movs	r2, #1
   181ee:	4013      	ands	r3, r2
   181f0:	d003      	beq.n	181fa <put_fat+0xfe>
   181f2:	687b      	ldr	r3, [r7, #4]
   181f4:	091b      	lsrs	r3, r3, #4
   181f6:	b2db      	uxtb	r3, r3
   181f8:	e00e      	b.n	18218 <put_fat+0x11c>
   181fa:	697b      	ldr	r3, [r7, #20]
   181fc:	781b      	ldrb	r3, [r3, #0]
   181fe:	b25b      	sxtb	r3, r3
   18200:	220f      	movs	r2, #15
   18202:	4393      	bics	r3, r2
   18204:	b25a      	sxtb	r2, r3
   18206:	687b      	ldr	r3, [r7, #4]
   18208:	0a1b      	lsrs	r3, r3, #8
   1820a:	b25b      	sxtb	r3, r3
   1820c:	210f      	movs	r1, #15
   1820e:	400b      	ands	r3, r1
   18210:	b25b      	sxtb	r3, r3
   18212:	4313      	orrs	r3, r2
   18214:	b25b      	sxtb	r3, r3
   18216:	b2db      	uxtb	r3, r3
   18218:	697a      	ldr	r2, [r7, #20]
   1821a:	7013      	strb	r3, [r2, #0]
			break;
   1821c:	e07f      	b.n	1831e <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   1821e:	68fb      	ldr	r3, [r7, #12]
   18220:	6a1a      	ldr	r2, [r3, #32]
   18222:	68bb      	ldr	r3, [r7, #8]
   18224:	0a1b      	lsrs	r3, r3, #8
   18226:	18d2      	adds	r2, r2, r3
   18228:	231f      	movs	r3, #31
   1822a:	18fc      	adds	r4, r7, r3
   1822c:	68fb      	ldr	r3, [r7, #12]
   1822e:	0011      	movs	r1, r2
   18230:	0018      	movs	r0, r3
   18232:	4b40      	ldr	r3, [pc, #256]	; (18334 <put_fat+0x238>)
   18234:	4798      	blx	r3
   18236:	0003      	movs	r3, r0
   18238:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   1823a:	231f      	movs	r3, #31
   1823c:	18fb      	adds	r3, r7, r3
   1823e:	781b      	ldrb	r3, [r3, #0]
   18240:	2b00      	cmp	r3, #0
   18242:	d169      	bne.n	18318 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   18244:	68bb      	ldr	r3, [r7, #8]
   18246:	005a      	lsls	r2, r3, #1
   18248:	23ff      	movs	r3, #255	; 0xff
   1824a:	005b      	lsls	r3, r3, #1
   1824c:	4013      	ands	r3, r2
   1824e:	3330      	adds	r3, #48	; 0x30
   18250:	68fa      	ldr	r2, [r7, #12]
   18252:	18d3      	adds	r3, r2, r3
   18254:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   18256:	687b      	ldr	r3, [r7, #4]
   18258:	b2da      	uxtb	r2, r3
   1825a:	697b      	ldr	r3, [r7, #20]
   1825c:	701a      	strb	r2, [r3, #0]
   1825e:	697b      	ldr	r3, [r7, #20]
   18260:	3301      	adds	r3, #1
   18262:	687a      	ldr	r2, [r7, #4]
   18264:	b292      	uxth	r2, r2
   18266:	0a12      	lsrs	r2, r2, #8
   18268:	b292      	uxth	r2, r2
   1826a:	b2d2      	uxtb	r2, r2
   1826c:	701a      	strb	r2, [r3, #0]
			break;
   1826e:	e056      	b.n	1831e <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   18270:	68fb      	ldr	r3, [r7, #12]
   18272:	6a1a      	ldr	r2, [r3, #32]
   18274:	68bb      	ldr	r3, [r7, #8]
   18276:	09db      	lsrs	r3, r3, #7
   18278:	18d2      	adds	r2, r2, r3
   1827a:	231f      	movs	r3, #31
   1827c:	18fc      	adds	r4, r7, r3
   1827e:	68fb      	ldr	r3, [r7, #12]
   18280:	0011      	movs	r1, r2
   18282:	0018      	movs	r0, r3
   18284:	4b2b      	ldr	r3, [pc, #172]	; (18334 <put_fat+0x238>)
   18286:	4798      	blx	r3
   18288:	0003      	movs	r3, r0
   1828a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   1828c:	231f      	movs	r3, #31
   1828e:	18fb      	adds	r3, r7, r3
   18290:	781b      	ldrb	r3, [r3, #0]
   18292:	2b00      	cmp	r3, #0
   18294:	d142      	bne.n	1831c <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   18296:	68bb      	ldr	r3, [r7, #8]
   18298:	009a      	lsls	r2, r3, #2
   1829a:	23fe      	movs	r3, #254	; 0xfe
   1829c:	005b      	lsls	r3, r3, #1
   1829e:	4013      	ands	r3, r2
   182a0:	3330      	adds	r3, #48	; 0x30
   182a2:	68fa      	ldr	r2, [r7, #12]
   182a4:	18d3      	adds	r3, r2, r3
   182a6:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   182a8:	697b      	ldr	r3, [r7, #20]
   182aa:	3303      	adds	r3, #3
   182ac:	781b      	ldrb	r3, [r3, #0]
   182ae:	061a      	lsls	r2, r3, #24
   182b0:	697b      	ldr	r3, [r7, #20]
   182b2:	3302      	adds	r3, #2
   182b4:	781b      	ldrb	r3, [r3, #0]
   182b6:	041b      	lsls	r3, r3, #16
   182b8:	4313      	orrs	r3, r2
   182ba:	697a      	ldr	r2, [r7, #20]
   182bc:	3201      	adds	r2, #1
   182be:	7812      	ldrb	r2, [r2, #0]
   182c0:	0212      	lsls	r2, r2, #8
   182c2:	4313      	orrs	r3, r2
   182c4:	697a      	ldr	r2, [r7, #20]
   182c6:	7812      	ldrb	r2, [r2, #0]
   182c8:	4313      	orrs	r3, r2
   182ca:	0f1b      	lsrs	r3, r3, #28
   182cc:	071b      	lsls	r3, r3, #28
   182ce:	687a      	ldr	r2, [r7, #4]
   182d0:	4313      	orrs	r3, r2
   182d2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   182d4:	687b      	ldr	r3, [r7, #4]
   182d6:	b2da      	uxtb	r2, r3
   182d8:	697b      	ldr	r3, [r7, #20]
   182da:	701a      	strb	r2, [r3, #0]
   182dc:	697b      	ldr	r3, [r7, #20]
   182de:	3301      	adds	r3, #1
   182e0:	687a      	ldr	r2, [r7, #4]
   182e2:	b292      	uxth	r2, r2
   182e4:	0a12      	lsrs	r2, r2, #8
   182e6:	b292      	uxth	r2, r2
   182e8:	b2d2      	uxtb	r2, r2
   182ea:	701a      	strb	r2, [r3, #0]
   182ec:	697b      	ldr	r3, [r7, #20]
   182ee:	3302      	adds	r3, #2
   182f0:	687a      	ldr	r2, [r7, #4]
   182f2:	0c12      	lsrs	r2, r2, #16
   182f4:	b2d2      	uxtb	r2, r2
   182f6:	701a      	strb	r2, [r3, #0]
   182f8:	697b      	ldr	r3, [r7, #20]
   182fa:	3303      	adds	r3, #3
   182fc:	687a      	ldr	r2, [r7, #4]
   182fe:	0e12      	lsrs	r2, r2, #24
   18300:	b2d2      	uxtb	r2, r2
   18302:	701a      	strb	r2, [r3, #0]
			break;
   18304:	e00b      	b.n	1831e <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   18306:	231f      	movs	r3, #31
   18308:	18fb      	adds	r3, r7, r3
   1830a:	2202      	movs	r2, #2
   1830c:	701a      	strb	r2, [r3, #0]
   1830e:	e006      	b.n	1831e <put_fat+0x222>
			if (res != FR_OK) break;
   18310:	46c0      	nop			; (mov r8, r8)
   18312:	e004      	b.n	1831e <put_fat+0x222>
			if (res != FR_OK) break;
   18314:	46c0      	nop			; (mov r8, r8)
   18316:	e002      	b.n	1831e <put_fat+0x222>
			if (res != FR_OK) break;
   18318:	46c0      	nop			; (mov r8, r8)
   1831a:	e000      	b.n	1831e <put_fat+0x222>
			if (res != FR_OK) break;
   1831c:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   1831e:	68fb      	ldr	r3, [r7, #12]
   18320:	2201      	movs	r2, #1
   18322:	711a      	strb	r2, [r3, #4]
	}

	return res;
   18324:	231f      	movs	r3, #31
   18326:	18fb      	adds	r3, r7, r3
   18328:	781b      	ldrb	r3, [r3, #0]
}
   1832a:	0018      	movs	r0, r3
   1832c:	46bd      	mov	sp, r7
   1832e:	b009      	add	sp, #36	; 0x24
   18330:	bd90      	pop	{r4, r7, pc}
   18332:	46c0      	nop			; (mov r8, r8)
   18334:	00017cf9 	.word	0x00017cf9

00018338 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   18338:	b590      	push	{r4, r7, lr}
   1833a:	b085      	sub	sp, #20
   1833c:	af00      	add	r7, sp, #0
   1833e:	6078      	str	r0, [r7, #4]
   18340:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   18342:	683b      	ldr	r3, [r7, #0]
   18344:	2b01      	cmp	r3, #1
   18346:	d904      	bls.n	18352 <remove_chain+0x1a>
   18348:	687b      	ldr	r3, [r7, #4]
   1834a:	699a      	ldr	r2, [r3, #24]
   1834c:	683b      	ldr	r3, [r7, #0]
   1834e:	429a      	cmp	r2, r3
   18350:	d804      	bhi.n	1835c <remove_chain+0x24>
		res = FR_INT_ERR;
   18352:	230f      	movs	r3, #15
   18354:	18fb      	adds	r3, r7, r3
   18356:	2202      	movs	r2, #2
   18358:	701a      	strb	r2, [r3, #0]
   1835a:	e045      	b.n	183e8 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   1835c:	230f      	movs	r3, #15
   1835e:	18fb      	adds	r3, r7, r3
   18360:	2200      	movs	r2, #0
   18362:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   18364:	e037      	b.n	183d6 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   18366:	683a      	ldr	r2, [r7, #0]
   18368:	687b      	ldr	r3, [r7, #4]
   1836a:	0011      	movs	r1, r2
   1836c:	0018      	movs	r0, r3
   1836e:	4b22      	ldr	r3, [pc, #136]	; (183f8 <remove_chain+0xc0>)
   18370:	4798      	blx	r3
   18372:	0003      	movs	r3, r0
   18374:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   18376:	68bb      	ldr	r3, [r7, #8]
   18378:	2b00      	cmp	r3, #0
   1837a:	d032      	beq.n	183e2 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   1837c:	68bb      	ldr	r3, [r7, #8]
   1837e:	2b01      	cmp	r3, #1
   18380:	d104      	bne.n	1838c <remove_chain+0x54>
   18382:	230f      	movs	r3, #15
   18384:	18fb      	adds	r3, r7, r3
   18386:	2202      	movs	r2, #2
   18388:	701a      	strb	r2, [r3, #0]
   1838a:	e02d      	b.n	183e8 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   1838c:	68bb      	ldr	r3, [r7, #8]
   1838e:	3301      	adds	r3, #1
   18390:	d104      	bne.n	1839c <remove_chain+0x64>
   18392:	230f      	movs	r3, #15
   18394:	18fb      	adds	r3, r7, r3
   18396:	2201      	movs	r2, #1
   18398:	701a      	strb	r2, [r3, #0]
   1839a:	e025      	b.n	183e8 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   1839c:	230f      	movs	r3, #15
   1839e:	18fc      	adds	r4, r7, r3
   183a0:	6839      	ldr	r1, [r7, #0]
   183a2:	687b      	ldr	r3, [r7, #4]
   183a4:	2200      	movs	r2, #0
   183a6:	0018      	movs	r0, r3
   183a8:	4b14      	ldr	r3, [pc, #80]	; (183fc <remove_chain+0xc4>)
   183aa:	4798      	blx	r3
   183ac:	0003      	movs	r3, r0
   183ae:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   183b0:	230f      	movs	r3, #15
   183b2:	18fb      	adds	r3, r7, r3
   183b4:	781b      	ldrb	r3, [r3, #0]
   183b6:	2b00      	cmp	r3, #0
   183b8:	d115      	bne.n	183e6 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   183ba:	687b      	ldr	r3, [r7, #4]
   183bc:	691b      	ldr	r3, [r3, #16]
   183be:	3301      	adds	r3, #1
   183c0:	d007      	beq.n	183d2 <remove_chain+0x9a>
				fs->free_clust++;
   183c2:	687b      	ldr	r3, [r7, #4]
   183c4:	691b      	ldr	r3, [r3, #16]
   183c6:	1c5a      	adds	r2, r3, #1
   183c8:	687b      	ldr	r3, [r7, #4]
   183ca:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   183cc:	687b      	ldr	r3, [r7, #4]
   183ce:	2201      	movs	r2, #1
   183d0:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   183d2:	68bb      	ldr	r3, [r7, #8]
   183d4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   183d6:	687b      	ldr	r3, [r7, #4]
   183d8:	699a      	ldr	r2, [r3, #24]
   183da:	683b      	ldr	r3, [r7, #0]
   183dc:	429a      	cmp	r2, r3
   183de:	d8c2      	bhi.n	18366 <remove_chain+0x2e>
   183e0:	e002      	b.n	183e8 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   183e2:	46c0      	nop			; (mov r8, r8)
   183e4:	e000      	b.n	183e8 <remove_chain+0xb0>
			if (res != FR_OK) break;
   183e6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   183e8:	230f      	movs	r3, #15
   183ea:	18fb      	adds	r3, r7, r3
   183ec:	781b      	ldrb	r3, [r3, #0]
}
   183ee:	0018      	movs	r0, r3
   183f0:	46bd      	mov	sp, r7
   183f2:	b005      	add	sp, #20
   183f4:	bd90      	pop	{r4, r7, pc}
   183f6:	46c0      	nop			; (mov r8, r8)
   183f8:	00017f91 	.word	0x00017f91
   183fc:	000180fd 	.word	0x000180fd

00018400 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   18400:	b590      	push	{r4, r7, lr}
   18402:	b087      	sub	sp, #28
   18404:	af00      	add	r7, sp, #0
   18406:	6078      	str	r0, [r7, #4]
   18408:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   1840a:	683b      	ldr	r3, [r7, #0]
   1840c:	2b00      	cmp	r3, #0
   1840e:	d10d      	bne.n	1842c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   18410:	687b      	ldr	r3, [r7, #4]
   18412:	68db      	ldr	r3, [r3, #12]
   18414:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   18416:	693b      	ldr	r3, [r7, #16]
   18418:	2b00      	cmp	r3, #0
   1841a:	d004      	beq.n	18426 <create_chain+0x26>
   1841c:	687b      	ldr	r3, [r7, #4]
   1841e:	699a      	ldr	r2, [r3, #24]
   18420:	693b      	ldr	r3, [r7, #16]
   18422:	429a      	cmp	r2, r3
   18424:	d818      	bhi.n	18458 <create_chain+0x58>
   18426:	2301      	movs	r3, #1
   18428:	613b      	str	r3, [r7, #16]
   1842a:	e015      	b.n	18458 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   1842c:	683a      	ldr	r2, [r7, #0]
   1842e:	687b      	ldr	r3, [r7, #4]
   18430:	0011      	movs	r1, r2
   18432:	0018      	movs	r0, r3
   18434:	4b3e      	ldr	r3, [pc, #248]	; (18530 <create_chain+0x130>)
   18436:	4798      	blx	r3
   18438:	0003      	movs	r3, r0
   1843a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   1843c:	68bb      	ldr	r3, [r7, #8]
   1843e:	2b01      	cmp	r3, #1
   18440:	d801      	bhi.n	18446 <create_chain+0x46>
   18442:	2301      	movs	r3, #1
   18444:	e070      	b.n	18528 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   18446:	687b      	ldr	r3, [r7, #4]
   18448:	699a      	ldr	r2, [r3, #24]
   1844a:	68bb      	ldr	r3, [r7, #8]
   1844c:	429a      	cmp	r2, r3
   1844e:	d901      	bls.n	18454 <create_chain+0x54>
   18450:	68bb      	ldr	r3, [r7, #8]
   18452:	e069      	b.n	18528 <create_chain+0x128>
		scl = clst;
   18454:	683b      	ldr	r3, [r7, #0]
   18456:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   18458:	693b      	ldr	r3, [r7, #16]
   1845a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   1845c:	697b      	ldr	r3, [r7, #20]
   1845e:	3301      	adds	r3, #1
   18460:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   18462:	687b      	ldr	r3, [r7, #4]
   18464:	699a      	ldr	r2, [r3, #24]
   18466:	697b      	ldr	r3, [r7, #20]
   18468:	429a      	cmp	r2, r3
   1846a:	d807      	bhi.n	1847c <create_chain+0x7c>
			ncl = 2;
   1846c:	2302      	movs	r3, #2
   1846e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   18470:	697a      	ldr	r2, [r7, #20]
   18472:	693b      	ldr	r3, [r7, #16]
   18474:	429a      	cmp	r2, r3
   18476:	d901      	bls.n	1847c <create_chain+0x7c>
   18478:	2300      	movs	r3, #0
   1847a:	e055      	b.n	18528 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   1847c:	697a      	ldr	r2, [r7, #20]
   1847e:	687b      	ldr	r3, [r7, #4]
   18480:	0011      	movs	r1, r2
   18482:	0018      	movs	r0, r3
   18484:	4b2a      	ldr	r3, [pc, #168]	; (18530 <create_chain+0x130>)
   18486:	4798      	blx	r3
   18488:	0003      	movs	r3, r0
   1848a:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   1848c:	68bb      	ldr	r3, [r7, #8]
   1848e:	2b00      	cmp	r3, #0
   18490:	d00d      	beq.n	184ae <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   18492:	68bb      	ldr	r3, [r7, #8]
   18494:	3301      	adds	r3, #1
   18496:	d002      	beq.n	1849e <create_chain+0x9e>
   18498:	68bb      	ldr	r3, [r7, #8]
   1849a:	2b01      	cmp	r3, #1
   1849c:	d101      	bne.n	184a2 <create_chain+0xa2>
			return cs;
   1849e:	68bb      	ldr	r3, [r7, #8]
   184a0:	e042      	b.n	18528 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   184a2:	697a      	ldr	r2, [r7, #20]
   184a4:	693b      	ldr	r3, [r7, #16]
   184a6:	429a      	cmp	r2, r3
   184a8:	d1d8      	bne.n	1845c <create_chain+0x5c>
   184aa:	2300      	movs	r3, #0
   184ac:	e03c      	b.n	18528 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   184ae:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   184b0:	230f      	movs	r3, #15
   184b2:	18fc      	adds	r4, r7, r3
   184b4:	4a1f      	ldr	r2, [pc, #124]	; (18534 <create_chain+0x134>)
   184b6:	6979      	ldr	r1, [r7, #20]
   184b8:	687b      	ldr	r3, [r7, #4]
   184ba:	0018      	movs	r0, r3
   184bc:	4b1e      	ldr	r3, [pc, #120]	; (18538 <create_chain+0x138>)
   184be:	4798      	blx	r3
   184c0:	0003      	movs	r3, r0
   184c2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   184c4:	230f      	movs	r3, #15
   184c6:	18fb      	adds	r3, r7, r3
   184c8:	781b      	ldrb	r3, [r3, #0]
   184ca:	2b00      	cmp	r3, #0
   184cc:	d10c      	bne.n	184e8 <create_chain+0xe8>
   184ce:	683b      	ldr	r3, [r7, #0]
   184d0:	2b00      	cmp	r3, #0
   184d2:	d009      	beq.n	184e8 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   184d4:	230f      	movs	r3, #15
   184d6:	18fc      	adds	r4, r7, r3
   184d8:	697a      	ldr	r2, [r7, #20]
   184da:	6839      	ldr	r1, [r7, #0]
   184dc:	687b      	ldr	r3, [r7, #4]
   184de:	0018      	movs	r0, r3
   184e0:	4b15      	ldr	r3, [pc, #84]	; (18538 <create_chain+0x138>)
   184e2:	4798      	blx	r3
   184e4:	0003      	movs	r3, r0
   184e6:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   184e8:	230f      	movs	r3, #15
   184ea:	18fb      	adds	r3, r7, r3
   184ec:	781b      	ldrb	r3, [r3, #0]
   184ee:	2b00      	cmp	r3, #0
   184f0:	d10f      	bne.n	18512 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   184f2:	687b      	ldr	r3, [r7, #4]
   184f4:	697a      	ldr	r2, [r7, #20]
   184f6:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   184f8:	687b      	ldr	r3, [r7, #4]
   184fa:	691b      	ldr	r3, [r3, #16]
   184fc:	3301      	adds	r3, #1
   184fe:	d012      	beq.n	18526 <create_chain+0x126>
			fs->free_clust--;
   18500:	687b      	ldr	r3, [r7, #4]
   18502:	691b      	ldr	r3, [r3, #16]
   18504:	1e5a      	subs	r2, r3, #1
   18506:	687b      	ldr	r3, [r7, #4]
   18508:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   1850a:	687b      	ldr	r3, [r7, #4]
   1850c:	2201      	movs	r2, #1
   1850e:	715a      	strb	r2, [r3, #5]
   18510:	e009      	b.n	18526 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   18512:	230f      	movs	r3, #15
   18514:	18fb      	adds	r3, r7, r3
   18516:	781b      	ldrb	r3, [r3, #0]
   18518:	2b01      	cmp	r3, #1
   1851a:	d102      	bne.n	18522 <create_chain+0x122>
   1851c:	2301      	movs	r3, #1
   1851e:	425b      	negs	r3, r3
   18520:	e000      	b.n	18524 <create_chain+0x124>
   18522:	2301      	movs	r3, #1
   18524:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   18526:	697b      	ldr	r3, [r7, #20]
}
   18528:	0018      	movs	r0, r3
   1852a:	46bd      	mov	sp, r7
   1852c:	b007      	add	sp, #28
   1852e:	bd90      	pop	{r4, r7, pc}
   18530:	00017f91 	.word	0x00017f91
   18534:	0fffffff 	.word	0x0fffffff
   18538:	000180fd 	.word	0x000180fd

0001853c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   1853c:	b580      	push	{r7, lr}
   1853e:	b084      	sub	sp, #16
   18540:	af00      	add	r7, sp, #0
   18542:	6078      	str	r0, [r7, #4]
   18544:	000a      	movs	r2, r1
   18546:	1cbb      	adds	r3, r7, #2
   18548:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   1854a:	687b      	ldr	r3, [r7, #4]
   1854c:	1cba      	adds	r2, r7, #2
   1854e:	8812      	ldrh	r2, [r2, #0]
   18550:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   18552:	687b      	ldr	r3, [r7, #4]
   18554:	689b      	ldr	r3, [r3, #8]
   18556:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   18558:	68fb      	ldr	r3, [r7, #12]
   1855a:	2b01      	cmp	r3, #1
   1855c:	d005      	beq.n	1856a <dir_sdi+0x2e>
   1855e:	687b      	ldr	r3, [r7, #4]
   18560:	681b      	ldr	r3, [r3, #0]
   18562:	699a      	ldr	r2, [r3, #24]
   18564:	68fb      	ldr	r3, [r7, #12]
   18566:	429a      	cmp	r2, r3
   18568:	d801      	bhi.n	1856e <dir_sdi+0x32>
		return FR_INT_ERR;
   1856a:	2302      	movs	r3, #2
   1856c:	e075      	b.n	1865a <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   1856e:	68fb      	ldr	r3, [r7, #12]
   18570:	2b00      	cmp	r3, #0
   18572:	d108      	bne.n	18586 <dir_sdi+0x4a>
   18574:	687b      	ldr	r3, [r7, #4]
   18576:	681b      	ldr	r3, [r3, #0]
   18578:	781b      	ldrb	r3, [r3, #0]
   1857a:	2b03      	cmp	r3, #3
   1857c:	d103      	bne.n	18586 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   1857e:	687b      	ldr	r3, [r7, #4]
   18580:	681b      	ldr	r3, [r3, #0]
   18582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18584:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   18586:	68fb      	ldr	r3, [r7, #12]
   18588:	2b00      	cmp	r3, #0
   1858a:	d116      	bne.n	185ba <dir_sdi+0x7e>
		dj->clust = clst;
   1858c:	687b      	ldr	r3, [r7, #4]
   1858e:	68fa      	ldr	r2, [r7, #12]
   18590:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   18592:	687b      	ldr	r3, [r7, #4]
   18594:	681b      	ldr	r3, [r3, #0]
   18596:	891b      	ldrh	r3, [r3, #8]
   18598:	1cba      	adds	r2, r7, #2
   1859a:	8812      	ldrh	r2, [r2, #0]
   1859c:	429a      	cmp	r2, r3
   1859e:	d301      	bcc.n	185a4 <dir_sdi+0x68>
			return FR_INT_ERR;
   185a0:	2302      	movs	r3, #2
   185a2:	e05a      	b.n	1865a <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   185a4:	687b      	ldr	r3, [r7, #4]
   185a6:	681b      	ldr	r3, [r3, #0]
   185a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   185aa:	1cba      	adds	r2, r7, #2
   185ac:	8812      	ldrh	r2, [r2, #0]
   185ae:	0912      	lsrs	r2, r2, #4
   185b0:	b292      	uxth	r2, r2
   185b2:	189a      	adds	r2, r3, r2
   185b4:	687b      	ldr	r3, [r7, #4]
   185b6:	611a      	str	r2, [r3, #16]
   185b8:	e042      	b.n	18640 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   185ba:	687b      	ldr	r3, [r7, #4]
   185bc:	681b      	ldr	r3, [r3, #0]
   185be:	789b      	ldrb	r3, [r3, #2]
   185c0:	b29a      	uxth	r2, r3
   185c2:	230a      	movs	r3, #10
   185c4:	18fb      	adds	r3, r7, r3
   185c6:	0112      	lsls	r2, r2, #4
   185c8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   185ca:	e020      	b.n	1860e <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   185cc:	687b      	ldr	r3, [r7, #4]
   185ce:	681b      	ldr	r3, [r3, #0]
   185d0:	68fa      	ldr	r2, [r7, #12]
   185d2:	0011      	movs	r1, r2
   185d4:	0018      	movs	r0, r3
   185d6:	4b23      	ldr	r3, [pc, #140]	; (18664 <dir_sdi+0x128>)
   185d8:	4798      	blx	r3
   185da:	0003      	movs	r3, r0
   185dc:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   185de:	68fb      	ldr	r3, [r7, #12]
   185e0:	3301      	adds	r3, #1
   185e2:	d101      	bne.n	185e8 <dir_sdi+0xac>
   185e4:	2301      	movs	r3, #1
   185e6:	e038      	b.n	1865a <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   185e8:	68fb      	ldr	r3, [r7, #12]
   185ea:	2b01      	cmp	r3, #1
   185ec:	d905      	bls.n	185fa <dir_sdi+0xbe>
   185ee:	687b      	ldr	r3, [r7, #4]
   185f0:	681b      	ldr	r3, [r3, #0]
   185f2:	699a      	ldr	r2, [r3, #24]
   185f4:	68fb      	ldr	r3, [r7, #12]
   185f6:	429a      	cmp	r2, r3
   185f8:	d801      	bhi.n	185fe <dir_sdi+0xc2>
				return FR_INT_ERR;
   185fa:	2302      	movs	r3, #2
   185fc:	e02d      	b.n	1865a <dir_sdi+0x11e>
			idx -= ic;
   185fe:	1cbb      	adds	r3, r7, #2
   18600:	1cb9      	adds	r1, r7, #2
   18602:	220a      	movs	r2, #10
   18604:	18ba      	adds	r2, r7, r2
   18606:	8809      	ldrh	r1, [r1, #0]
   18608:	8812      	ldrh	r2, [r2, #0]
   1860a:	1a8a      	subs	r2, r1, r2
   1860c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   1860e:	1cba      	adds	r2, r7, #2
   18610:	230a      	movs	r3, #10
   18612:	18fb      	adds	r3, r7, r3
   18614:	8812      	ldrh	r2, [r2, #0]
   18616:	881b      	ldrh	r3, [r3, #0]
   18618:	429a      	cmp	r2, r3
   1861a:	d2d7      	bcs.n	185cc <dir_sdi+0x90>
		}
		dj->clust = clst;
   1861c:	687b      	ldr	r3, [r7, #4]
   1861e:	68fa      	ldr	r2, [r7, #12]
   18620:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   18622:	687b      	ldr	r3, [r7, #4]
   18624:	681b      	ldr	r3, [r3, #0]
   18626:	68fa      	ldr	r2, [r7, #12]
   18628:	0011      	movs	r1, r2
   1862a:	0018      	movs	r0, r3
   1862c:	4b0e      	ldr	r3, [pc, #56]	; (18668 <dir_sdi+0x12c>)
   1862e:	4798      	blx	r3
   18630:	0002      	movs	r2, r0
   18632:	1cbb      	adds	r3, r7, #2
   18634:	881b      	ldrh	r3, [r3, #0]
   18636:	091b      	lsrs	r3, r3, #4
   18638:	b29b      	uxth	r3, r3
   1863a:	18d2      	adds	r2, r2, r3
   1863c:	687b      	ldr	r3, [r7, #4]
   1863e:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   18640:	687b      	ldr	r3, [r7, #4]
   18642:	681b      	ldr	r3, [r3, #0]
   18644:	3330      	adds	r3, #48	; 0x30
   18646:	001a      	movs	r2, r3
   18648:	1cbb      	adds	r3, r7, #2
   1864a:	881b      	ldrh	r3, [r3, #0]
   1864c:	210f      	movs	r1, #15
   1864e:	400b      	ands	r3, r1
   18650:	015b      	lsls	r3, r3, #5
   18652:	18d2      	adds	r2, r2, r3
   18654:	687b      	ldr	r3, [r7, #4]
   18656:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   18658:	2300      	movs	r3, #0
}
   1865a:	0018      	movs	r0, r3
   1865c:	46bd      	mov	sp, r7
   1865e:	b004      	add	sp, #16
   18660:	bd80      	pop	{r7, pc}
   18662:	46c0      	nop			; (mov r8, r8)
   18664:	00017f91 	.word	0x00017f91
   18668:	00017f59 	.word	0x00017f59

0001866c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   1866c:	b590      	push	{r4, r7, lr}
   1866e:	b085      	sub	sp, #20
   18670:	af00      	add	r7, sp, #0
   18672:	6078      	str	r0, [r7, #4]
   18674:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   18676:	687b      	ldr	r3, [r7, #4]
   18678:	88da      	ldrh	r2, [r3, #6]
   1867a:	2308      	movs	r3, #8
   1867c:	18fb      	adds	r3, r7, r3
   1867e:	3201      	adds	r2, #1
   18680:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   18682:	2308      	movs	r3, #8
   18684:	18fb      	adds	r3, r7, r3
   18686:	881b      	ldrh	r3, [r3, #0]
   18688:	2b00      	cmp	r3, #0
   1868a:	d003      	beq.n	18694 <dir_next+0x28>
   1868c:	687b      	ldr	r3, [r7, #4]
   1868e:	691b      	ldr	r3, [r3, #16]
   18690:	2b00      	cmp	r3, #0
   18692:	d101      	bne.n	18698 <dir_next+0x2c>
		return FR_NO_FILE;
   18694:	2304      	movs	r3, #4
   18696:	e0d2      	b.n	1883e <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   18698:	2308      	movs	r3, #8
   1869a:	18fb      	adds	r3, r7, r3
   1869c:	881b      	ldrh	r3, [r3, #0]
   1869e:	220f      	movs	r2, #15
   186a0:	4013      	ands	r3, r2
   186a2:	b29b      	uxth	r3, r3
   186a4:	2b00      	cmp	r3, #0
   186a6:	d000      	beq.n	186aa <dir_next+0x3e>
   186a8:	e0b6      	b.n	18818 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   186aa:	687b      	ldr	r3, [r7, #4]
   186ac:	691b      	ldr	r3, [r3, #16]
   186ae:	1c5a      	adds	r2, r3, #1
   186b0:	687b      	ldr	r3, [r7, #4]
   186b2:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   186b4:	687b      	ldr	r3, [r7, #4]
   186b6:	68db      	ldr	r3, [r3, #12]
   186b8:	2b00      	cmp	r3, #0
   186ba:	d10a      	bne.n	186d2 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   186bc:	687b      	ldr	r3, [r7, #4]
   186be:	681b      	ldr	r3, [r3, #0]
   186c0:	891b      	ldrh	r3, [r3, #8]
   186c2:	2208      	movs	r2, #8
   186c4:	18ba      	adds	r2, r7, r2
   186c6:	8812      	ldrh	r2, [r2, #0]
   186c8:	429a      	cmp	r2, r3
   186ca:	d200      	bcs.n	186ce <dir_next+0x62>
   186cc:	e0a4      	b.n	18818 <dir_next+0x1ac>
				return FR_NO_FILE;
   186ce:	2304      	movs	r3, #4
   186d0:	e0b5      	b.n	1883e <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   186d2:	2308      	movs	r3, #8
   186d4:	18fb      	adds	r3, r7, r3
   186d6:	881b      	ldrh	r3, [r3, #0]
   186d8:	091b      	lsrs	r3, r3, #4
   186da:	b29b      	uxth	r3, r3
   186dc:	001a      	movs	r2, r3
   186de:	687b      	ldr	r3, [r7, #4]
   186e0:	681b      	ldr	r3, [r3, #0]
   186e2:	789b      	ldrb	r3, [r3, #2]
   186e4:	3b01      	subs	r3, #1
   186e6:	4013      	ands	r3, r2
   186e8:	d000      	beq.n	186ec <dir_next+0x80>
   186ea:	e095      	b.n	18818 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   186ec:	687b      	ldr	r3, [r7, #4]
   186ee:	681a      	ldr	r2, [r3, #0]
   186f0:	687b      	ldr	r3, [r7, #4]
   186f2:	68db      	ldr	r3, [r3, #12]
   186f4:	0019      	movs	r1, r3
   186f6:	0010      	movs	r0, r2
   186f8:	4b53      	ldr	r3, [pc, #332]	; (18848 <dir_next+0x1dc>)
   186fa:	4798      	blx	r3
   186fc:	0003      	movs	r3, r0
   186fe:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   18700:	68fb      	ldr	r3, [r7, #12]
   18702:	2b01      	cmp	r3, #1
   18704:	d801      	bhi.n	1870a <dir_next+0x9e>
   18706:	2302      	movs	r3, #2
   18708:	e099      	b.n	1883e <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   1870a:	68fb      	ldr	r3, [r7, #12]
   1870c:	3301      	adds	r3, #1
   1870e:	d101      	bne.n	18714 <dir_next+0xa8>
   18710:	2301      	movs	r3, #1
   18712:	e094      	b.n	1883e <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   18714:	687b      	ldr	r3, [r7, #4]
   18716:	681b      	ldr	r3, [r3, #0]
   18718:	699a      	ldr	r2, [r3, #24]
   1871a:	68fb      	ldr	r3, [r7, #12]
   1871c:	429a      	cmp	r2, r3
   1871e:	d900      	bls.n	18722 <dir_next+0xb6>
   18720:	e06d      	b.n	187fe <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   18722:	683b      	ldr	r3, [r7, #0]
   18724:	2b00      	cmp	r3, #0
   18726:	d101      	bne.n	1872c <dir_next+0xc0>
   18728:	2304      	movs	r3, #4
   1872a:	e088      	b.n	1883e <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   1872c:	687b      	ldr	r3, [r7, #4]
   1872e:	681a      	ldr	r2, [r3, #0]
   18730:	687b      	ldr	r3, [r7, #4]
   18732:	68db      	ldr	r3, [r3, #12]
   18734:	0019      	movs	r1, r3
   18736:	0010      	movs	r0, r2
   18738:	4b44      	ldr	r3, [pc, #272]	; (1884c <dir_next+0x1e0>)
   1873a:	4798      	blx	r3
   1873c:	0003      	movs	r3, r0
   1873e:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   18740:	68fb      	ldr	r3, [r7, #12]
   18742:	2b00      	cmp	r3, #0
   18744:	d101      	bne.n	1874a <dir_next+0xde>
   18746:	2307      	movs	r3, #7
   18748:	e079      	b.n	1883e <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   1874a:	68fb      	ldr	r3, [r7, #12]
   1874c:	2b01      	cmp	r3, #1
   1874e:	d101      	bne.n	18754 <dir_next+0xe8>
   18750:	2302      	movs	r3, #2
   18752:	e074      	b.n	1883e <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   18754:	68fb      	ldr	r3, [r7, #12]
   18756:	3301      	adds	r3, #1
   18758:	d101      	bne.n	1875e <dir_next+0xf2>
   1875a:	2301      	movs	r3, #1
   1875c:	e06f      	b.n	1883e <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   1875e:	687b      	ldr	r3, [r7, #4]
   18760:	681b      	ldr	r3, [r3, #0]
   18762:	2100      	movs	r1, #0
   18764:	0018      	movs	r0, r3
   18766:	4b3a      	ldr	r3, [pc, #232]	; (18850 <dir_next+0x1e4>)
   18768:	4798      	blx	r3
   1876a:	1e03      	subs	r3, r0, #0
   1876c:	d001      	beq.n	18772 <dir_next+0x106>
   1876e:	2301      	movs	r3, #1
   18770:	e065      	b.n	1883e <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   18772:	687b      	ldr	r3, [r7, #4]
   18774:	681b      	ldr	r3, [r3, #0]
   18776:	3330      	adds	r3, #48	; 0x30
   18778:	0018      	movs	r0, r3
   1877a:	2380      	movs	r3, #128	; 0x80
   1877c:	009b      	lsls	r3, r3, #2
   1877e:	001a      	movs	r2, r3
   18780:	2100      	movs	r1, #0
   18782:	4b34      	ldr	r3, [pc, #208]	; (18854 <dir_next+0x1e8>)
   18784:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   18786:	687b      	ldr	r3, [r7, #4]
   18788:	681c      	ldr	r4, [r3, #0]
   1878a:	687b      	ldr	r3, [r7, #4]
   1878c:	681b      	ldr	r3, [r3, #0]
   1878e:	68fa      	ldr	r2, [r7, #12]
   18790:	0011      	movs	r1, r2
   18792:	0018      	movs	r0, r3
   18794:	4b30      	ldr	r3, [pc, #192]	; (18858 <dir_next+0x1ec>)
   18796:	4798      	blx	r3
   18798:	0003      	movs	r3, r0
   1879a:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   1879c:	230b      	movs	r3, #11
   1879e:	18fb      	adds	r3, r7, r3
   187a0:	2200      	movs	r2, #0
   187a2:	701a      	strb	r2, [r3, #0]
   187a4:	e019      	b.n	187da <dir_next+0x16e>
						dj->fs->wflag = 1;
   187a6:	687b      	ldr	r3, [r7, #4]
   187a8:	681b      	ldr	r3, [r3, #0]
   187aa:	2201      	movs	r2, #1
   187ac:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   187ae:	687b      	ldr	r3, [r7, #4]
   187b0:	681b      	ldr	r3, [r3, #0]
   187b2:	2100      	movs	r1, #0
   187b4:	0018      	movs	r0, r3
   187b6:	4b26      	ldr	r3, [pc, #152]	; (18850 <dir_next+0x1e4>)
   187b8:	4798      	blx	r3
   187ba:	1e03      	subs	r3, r0, #0
   187bc:	d001      	beq.n	187c2 <dir_next+0x156>
   187be:	2301      	movs	r3, #1
   187c0:	e03d      	b.n	1883e <dir_next+0x1d2>
						dj->fs->winsect++;
   187c2:	687b      	ldr	r3, [r7, #4]
   187c4:	681b      	ldr	r3, [r3, #0]
   187c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   187c8:	3201      	adds	r2, #1
   187ca:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   187cc:	230b      	movs	r3, #11
   187ce:	18fb      	adds	r3, r7, r3
   187d0:	781a      	ldrb	r2, [r3, #0]
   187d2:	230b      	movs	r3, #11
   187d4:	18fb      	adds	r3, r7, r3
   187d6:	3201      	adds	r2, #1
   187d8:	701a      	strb	r2, [r3, #0]
   187da:	687b      	ldr	r3, [r7, #4]
   187dc:	681b      	ldr	r3, [r3, #0]
   187de:	789b      	ldrb	r3, [r3, #2]
   187e0:	220b      	movs	r2, #11
   187e2:	18ba      	adds	r2, r7, r2
   187e4:	7812      	ldrb	r2, [r2, #0]
   187e6:	429a      	cmp	r2, r3
   187e8:	d3dd      	bcc.n	187a6 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   187ea:	687b      	ldr	r3, [r7, #4]
   187ec:	681b      	ldr	r3, [r3, #0]
   187ee:	687a      	ldr	r2, [r7, #4]
   187f0:	6812      	ldr	r2, [r2, #0]
   187f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   187f4:	220b      	movs	r2, #11
   187f6:	18ba      	adds	r2, r7, r2
   187f8:	7812      	ldrb	r2, [r2, #0]
   187fa:	1a8a      	subs	r2, r1, r2
   187fc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   187fe:	687b      	ldr	r3, [r7, #4]
   18800:	68fa      	ldr	r2, [r7, #12]
   18802:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   18804:	687b      	ldr	r3, [r7, #4]
   18806:	681b      	ldr	r3, [r3, #0]
   18808:	68fa      	ldr	r2, [r7, #12]
   1880a:	0011      	movs	r1, r2
   1880c:	0018      	movs	r0, r3
   1880e:	4b12      	ldr	r3, [pc, #72]	; (18858 <dir_next+0x1ec>)
   18810:	4798      	blx	r3
   18812:	0002      	movs	r2, r0
   18814:	687b      	ldr	r3, [r7, #4]
   18816:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   18818:	687b      	ldr	r3, [r7, #4]
   1881a:	2208      	movs	r2, #8
   1881c:	18ba      	adds	r2, r7, r2
   1881e:	8812      	ldrh	r2, [r2, #0]
   18820:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   18822:	687b      	ldr	r3, [r7, #4]
   18824:	681b      	ldr	r3, [r3, #0]
   18826:	3330      	adds	r3, #48	; 0x30
   18828:	001a      	movs	r2, r3
   1882a:	2308      	movs	r3, #8
   1882c:	18fb      	adds	r3, r7, r3
   1882e:	881b      	ldrh	r3, [r3, #0]
   18830:	210f      	movs	r1, #15
   18832:	400b      	ands	r3, r1
   18834:	015b      	lsls	r3, r3, #5
   18836:	18d2      	adds	r2, r2, r3
   18838:	687b      	ldr	r3, [r7, #4]
   1883a:	615a      	str	r2, [r3, #20]

	return FR_OK;
   1883c:	2300      	movs	r3, #0
}
   1883e:	0018      	movs	r0, r3
   18840:	46bd      	mov	sp, r7
   18842:	b005      	add	sp, #20
   18844:	bd90      	pop	{r4, r7, pc}
   18846:	46c0      	nop			; (mov r8, r8)
   18848:	00017f91 	.word	0x00017f91
   1884c:	00018401 	.word	0x00018401
   18850:	00017cf9 	.word	0x00017cf9
   18854:	00017c4d 	.word	0x00017c4d
   18858:	00017f59 	.word	0x00017f59

0001885c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   1885c:	b590      	push	{r4, r7, lr}
   1885e:	b087      	sub	sp, #28
   18860:	af00      	add	r7, sp, #0
   18862:	6078      	str	r0, [r7, #4]
   18864:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   18866:	683b      	ldr	r3, [r7, #0]
   18868:	781b      	ldrb	r3, [r3, #0]
   1886a:	001a      	movs	r2, r3
   1886c:	2340      	movs	r3, #64	; 0x40
   1886e:	439a      	bics	r2, r3
   18870:	0013      	movs	r3, r2
   18872:	1e5a      	subs	r2, r3, #1
   18874:	0013      	movs	r3, r2
   18876:	005b      	lsls	r3, r3, #1
   18878:	189b      	adds	r3, r3, r2
   1887a:	009b      	lsls	r3, r3, #2
   1887c:	189b      	adds	r3, r3, r2
   1887e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   18880:	2300      	movs	r3, #0
   18882:	613b      	str	r3, [r7, #16]
   18884:	230e      	movs	r3, #14
   18886:	18fb      	adds	r3, r7, r3
   18888:	2201      	movs	r2, #1
   1888a:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   1888c:	4a31      	ldr	r2, [pc, #196]	; (18954 <cmp_lfn+0xf8>)
   1888e:	693b      	ldr	r3, [r7, #16]
   18890:	18d3      	adds	r3, r2, r3
   18892:	781b      	ldrb	r3, [r3, #0]
   18894:	3301      	adds	r3, #1
   18896:	683a      	ldr	r2, [r7, #0]
   18898:	18d3      	adds	r3, r2, r3
   1889a:	781b      	ldrb	r3, [r3, #0]
   1889c:	021b      	lsls	r3, r3, #8
   1889e:	b21a      	sxth	r2, r3
   188a0:	492c      	ldr	r1, [pc, #176]	; (18954 <cmp_lfn+0xf8>)
   188a2:	693b      	ldr	r3, [r7, #16]
   188a4:	18cb      	adds	r3, r1, r3
   188a6:	781b      	ldrb	r3, [r3, #0]
   188a8:	0019      	movs	r1, r3
   188aa:	683b      	ldr	r3, [r7, #0]
   188ac:	185b      	adds	r3, r3, r1
   188ae:	781b      	ldrb	r3, [r3, #0]
   188b0:	b21b      	sxth	r3, r3
   188b2:	4313      	orrs	r3, r2
   188b4:	b21a      	sxth	r2, r3
   188b6:	230c      	movs	r3, #12
   188b8:	18fb      	adds	r3, r7, r3
   188ba:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   188bc:	230e      	movs	r3, #14
   188be:	18fb      	adds	r3, r7, r3
   188c0:	881b      	ldrh	r3, [r3, #0]
   188c2:	2b00      	cmp	r3, #0
   188c4:	d01f      	beq.n	18906 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   188c6:	230e      	movs	r3, #14
   188c8:	18fc      	adds	r4, r7, r3
   188ca:	230c      	movs	r3, #12
   188cc:	18fb      	adds	r3, r7, r3
   188ce:	881b      	ldrh	r3, [r3, #0]
   188d0:	0018      	movs	r0, r3
   188d2:	4b21      	ldr	r3, [pc, #132]	; (18958 <cmp_lfn+0xfc>)
   188d4:	4798      	blx	r3
   188d6:	0003      	movs	r3, r0
   188d8:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   188da:	697b      	ldr	r3, [r7, #20]
   188dc:	2bfe      	cmp	r3, #254	; 0xfe
   188de:	d810      	bhi.n	18902 <cmp_lfn+0xa6>
   188e0:	697b      	ldr	r3, [r7, #20]
   188e2:	1c5a      	adds	r2, r3, #1
   188e4:	617a      	str	r2, [r7, #20]
   188e6:	005b      	lsls	r3, r3, #1
   188e8:	687a      	ldr	r2, [r7, #4]
   188ea:	18d3      	adds	r3, r2, r3
   188ec:	881b      	ldrh	r3, [r3, #0]
   188ee:	0018      	movs	r0, r3
   188f0:	4b19      	ldr	r3, [pc, #100]	; (18958 <cmp_lfn+0xfc>)
   188f2:	4798      	blx	r3
   188f4:	0003      	movs	r3, r0
   188f6:	001a      	movs	r2, r3
   188f8:	230e      	movs	r3, #14
   188fa:	18fb      	adds	r3, r7, r3
   188fc:	881b      	ldrh	r3, [r3, #0]
   188fe:	4293      	cmp	r3, r2
   18900:	d009      	beq.n	18916 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   18902:	2300      	movs	r3, #0
   18904:	e022      	b.n	1894c <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   18906:	230c      	movs	r3, #12
   18908:	18fb      	adds	r3, r7, r3
   1890a:	881b      	ldrh	r3, [r3, #0]
   1890c:	4a13      	ldr	r2, [pc, #76]	; (1895c <cmp_lfn+0x100>)
   1890e:	4293      	cmp	r3, r2
   18910:	d001      	beq.n	18916 <cmp_lfn+0xba>
   18912:	2300      	movs	r3, #0
   18914:	e01a      	b.n	1894c <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   18916:	693b      	ldr	r3, [r7, #16]
   18918:	3301      	adds	r3, #1
   1891a:	613b      	str	r3, [r7, #16]
   1891c:	693b      	ldr	r3, [r7, #16]
   1891e:	2b0c      	cmp	r3, #12
   18920:	d9b4      	bls.n	1888c <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   18922:	683b      	ldr	r3, [r7, #0]
   18924:	781b      	ldrb	r3, [r3, #0]
   18926:	001a      	movs	r2, r3
   18928:	2340      	movs	r3, #64	; 0x40
   1892a:	4013      	ands	r3, r2
   1892c:	d00d      	beq.n	1894a <cmp_lfn+0xee>
   1892e:	230e      	movs	r3, #14
   18930:	18fb      	adds	r3, r7, r3
   18932:	881b      	ldrh	r3, [r3, #0]
   18934:	2b00      	cmp	r3, #0
   18936:	d008      	beq.n	1894a <cmp_lfn+0xee>
   18938:	697b      	ldr	r3, [r7, #20]
   1893a:	005b      	lsls	r3, r3, #1
   1893c:	687a      	ldr	r2, [r7, #4]
   1893e:	18d3      	adds	r3, r2, r3
   18940:	881b      	ldrh	r3, [r3, #0]
   18942:	2b00      	cmp	r3, #0
   18944:	d001      	beq.n	1894a <cmp_lfn+0xee>
		return 0;
   18946:	2300      	movs	r3, #0
   18948:	e000      	b.n	1894c <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   1894a:	2301      	movs	r3, #1
}
   1894c:	0018      	movs	r0, r3
   1894e:	46bd      	mov	sp, r7
   18950:	b007      	add	sp, #28
   18952:	bd90      	pop	{r4, r7, pc}
   18954:	00026564 	.word	0x00026564
   18958:	0001a909 	.word	0x0001a909
   1895c:	0000ffff 	.word	0x0000ffff

00018960 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   18960:	b580      	push	{r7, lr}
   18962:	b088      	sub	sp, #32
   18964:	af00      	add	r7, sp, #0
   18966:	60f8      	str	r0, [r7, #12]
   18968:	60b9      	str	r1, [r7, #8]
   1896a:	0019      	movs	r1, r3
   1896c:	1dfb      	adds	r3, r7, #7
   1896e:	701a      	strb	r2, [r3, #0]
   18970:	1dbb      	adds	r3, r7, #6
   18972:	1c0a      	adds	r2, r1, #0
   18974:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   18976:	68bb      	ldr	r3, [r7, #8]
   18978:	330d      	adds	r3, #13
   1897a:	1dba      	adds	r2, r7, #6
   1897c:	7812      	ldrb	r2, [r2, #0]
   1897e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   18980:	68bb      	ldr	r3, [r7, #8]
   18982:	330b      	adds	r3, #11
   18984:	220f      	movs	r2, #15
   18986:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   18988:	68bb      	ldr	r3, [r7, #8]
   1898a:	330c      	adds	r3, #12
   1898c:	2200      	movs	r2, #0
   1898e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   18990:	68bb      	ldr	r3, [r7, #8]
   18992:	331a      	adds	r3, #26
   18994:	2200      	movs	r2, #0
   18996:	701a      	strb	r2, [r3, #0]
   18998:	68bb      	ldr	r3, [r7, #8]
   1899a:	331b      	adds	r3, #27
   1899c:	2200      	movs	r2, #0
   1899e:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   189a0:	1dfb      	adds	r3, r7, #7
   189a2:	781b      	ldrb	r3, [r3, #0]
   189a4:	1e5a      	subs	r2, r3, #1
   189a6:	0013      	movs	r3, r2
   189a8:	005b      	lsls	r3, r3, #1
   189aa:	189b      	adds	r3, r3, r2
   189ac:	009b      	lsls	r3, r3, #2
   189ae:	189b      	adds	r3, r3, r2
   189b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   189b2:	2316      	movs	r3, #22
   189b4:	18fb      	adds	r3, r7, r3
   189b6:	2200      	movs	r2, #0
   189b8:	801a      	strh	r2, [r3, #0]
   189ba:	2300      	movs	r3, #0
   189bc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   189be:	2316      	movs	r3, #22
   189c0:	18fb      	adds	r3, r7, r3
   189c2:	881b      	ldrh	r3, [r3, #0]
   189c4:	4a28      	ldr	r2, [pc, #160]	; (18a68 <fit_lfn+0x108>)
   189c6:	4293      	cmp	r3, r2
   189c8:	d009      	beq.n	189de <fit_lfn+0x7e>
   189ca:	69fb      	ldr	r3, [r7, #28]
   189cc:	1c5a      	adds	r2, r3, #1
   189ce:	61fa      	str	r2, [r7, #28]
   189d0:	005b      	lsls	r3, r3, #1
   189d2:	68fa      	ldr	r2, [r7, #12]
   189d4:	18d2      	adds	r2, r2, r3
   189d6:	2316      	movs	r3, #22
   189d8:	18fb      	adds	r3, r7, r3
   189da:	8812      	ldrh	r2, [r2, #0]
   189dc:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   189de:	4a23      	ldr	r2, [pc, #140]	; (18a6c <fit_lfn+0x10c>)
   189e0:	69bb      	ldr	r3, [r7, #24]
   189e2:	18d3      	adds	r3, r2, r3
   189e4:	781b      	ldrb	r3, [r3, #0]
   189e6:	001a      	movs	r2, r3
   189e8:	68bb      	ldr	r3, [r7, #8]
   189ea:	189b      	adds	r3, r3, r2
   189ec:	2216      	movs	r2, #22
   189ee:	18ba      	adds	r2, r7, r2
   189f0:	8812      	ldrh	r2, [r2, #0]
   189f2:	b2d2      	uxtb	r2, r2
   189f4:	701a      	strb	r2, [r3, #0]
   189f6:	4a1d      	ldr	r2, [pc, #116]	; (18a6c <fit_lfn+0x10c>)
   189f8:	69bb      	ldr	r3, [r7, #24]
   189fa:	18d3      	adds	r3, r2, r3
   189fc:	781b      	ldrb	r3, [r3, #0]
   189fe:	3301      	adds	r3, #1
   18a00:	68ba      	ldr	r2, [r7, #8]
   18a02:	18d3      	adds	r3, r2, r3
   18a04:	2216      	movs	r2, #22
   18a06:	18ba      	adds	r2, r7, r2
   18a08:	8812      	ldrh	r2, [r2, #0]
   18a0a:	0a12      	lsrs	r2, r2, #8
   18a0c:	b292      	uxth	r2, r2
   18a0e:	b2d2      	uxtb	r2, r2
   18a10:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   18a12:	2316      	movs	r3, #22
   18a14:	18fb      	adds	r3, r7, r3
   18a16:	881b      	ldrh	r3, [r3, #0]
   18a18:	2b00      	cmp	r3, #0
   18a1a:	d104      	bne.n	18a26 <fit_lfn+0xc6>
   18a1c:	2316      	movs	r3, #22
   18a1e:	18fb      	adds	r3, r7, r3
   18a20:	2201      	movs	r2, #1
   18a22:	4252      	negs	r2, r2
   18a24:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   18a26:	69bb      	ldr	r3, [r7, #24]
   18a28:	3301      	adds	r3, #1
   18a2a:	61bb      	str	r3, [r7, #24]
   18a2c:	69bb      	ldr	r3, [r7, #24]
   18a2e:	2b0c      	cmp	r3, #12
   18a30:	d9c5      	bls.n	189be <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   18a32:	2316      	movs	r3, #22
   18a34:	18fb      	adds	r3, r7, r3
   18a36:	881b      	ldrh	r3, [r3, #0]
   18a38:	4a0b      	ldr	r2, [pc, #44]	; (18a68 <fit_lfn+0x108>)
   18a3a:	4293      	cmp	r3, r2
   18a3c:	d006      	beq.n	18a4c <fit_lfn+0xec>
   18a3e:	69fb      	ldr	r3, [r7, #28]
   18a40:	005b      	lsls	r3, r3, #1
   18a42:	68fa      	ldr	r2, [r7, #12]
   18a44:	18d3      	adds	r3, r2, r3
   18a46:	881b      	ldrh	r3, [r3, #0]
   18a48:	2b00      	cmp	r3, #0
   18a4a:	d105      	bne.n	18a58 <fit_lfn+0xf8>
   18a4c:	1dfb      	adds	r3, r7, #7
   18a4e:	1dfa      	adds	r2, r7, #7
   18a50:	7812      	ldrb	r2, [r2, #0]
   18a52:	2140      	movs	r1, #64	; 0x40
   18a54:	430a      	orrs	r2, r1
   18a56:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   18a58:	68bb      	ldr	r3, [r7, #8]
   18a5a:	1dfa      	adds	r2, r7, #7
   18a5c:	7812      	ldrb	r2, [r2, #0]
   18a5e:	701a      	strb	r2, [r3, #0]
}
   18a60:	46c0      	nop			; (mov r8, r8)
   18a62:	46bd      	mov	sp, r7
   18a64:	b008      	add	sp, #32
   18a66:	bd80      	pop	{r7, pc}
   18a68:	0000ffff 	.word	0x0000ffff
   18a6c:	00026564 	.word	0x00026564

00018a70 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   18a70:	b580      	push	{r7, lr}
   18a72:	b08a      	sub	sp, #40	; 0x28
   18a74:	af00      	add	r7, sp, #0
   18a76:	60f8      	str	r0, [r7, #12]
   18a78:	60b9      	str	r1, [r7, #8]
   18a7a:	607a      	str	r2, [r7, #4]
   18a7c:	001a      	movs	r2, r3
   18a7e:	1cbb      	adds	r3, r7, #2
   18a80:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   18a82:	68b9      	ldr	r1, [r7, #8]
   18a84:	68fb      	ldr	r3, [r7, #12]
   18a86:	220b      	movs	r2, #11
   18a88:	0018      	movs	r0, r3
   18a8a:	4b38      	ldr	r3, [pc, #224]	; (18b6c <gen_numname+0xfc>)
   18a8c:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   18a8e:	1cbb      	adds	r3, r7, #2
   18a90:	881b      	ldrh	r3, [r3, #0]
   18a92:	2b05      	cmp	r3, #5
   18a94:	d911      	bls.n	18aba <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   18a96:	1cbb      	adds	r3, r7, #2
   18a98:	881b      	ldrh	r3, [r3, #0]
   18a9a:	b29a      	uxth	r2, r3
   18a9c:	0852      	lsrs	r2, r2, #1
   18a9e:	03db      	lsls	r3, r3, #15
   18aa0:	4313      	orrs	r3, r2
   18aa2:	b299      	uxth	r1, r3
   18aa4:	687b      	ldr	r3, [r7, #4]
   18aa6:	1c9a      	adds	r2, r3, #2
   18aa8:	607a      	str	r2, [r7, #4]
   18aaa:	881a      	ldrh	r2, [r3, #0]
   18aac:	1cbb      	adds	r3, r7, #2
   18aae:	188a      	adds	r2, r1, r2
   18ab0:	801a      	strh	r2, [r3, #0]
   18ab2:	687b      	ldr	r3, [r7, #4]
   18ab4:	881b      	ldrh	r3, [r3, #0]
   18ab6:	2b00      	cmp	r3, #0
   18ab8:	d1ed      	bne.n	18a96 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   18aba:	2307      	movs	r3, #7
   18abc:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   18abe:	1cbb      	adds	r3, r7, #2
   18ac0:	881b      	ldrh	r3, [r3, #0]
   18ac2:	b2db      	uxtb	r3, r3
   18ac4:	220f      	movs	r2, #15
   18ac6:	4013      	ands	r3, r2
   18ac8:	b2da      	uxtb	r2, r3
   18aca:	2327      	movs	r3, #39	; 0x27
   18acc:	18fb      	adds	r3, r7, r3
   18ace:	3230      	adds	r2, #48	; 0x30
   18ad0:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   18ad2:	2327      	movs	r3, #39	; 0x27
   18ad4:	18fb      	adds	r3, r7, r3
   18ad6:	781b      	ldrb	r3, [r3, #0]
   18ad8:	2b39      	cmp	r3, #57	; 0x39
   18ada:	d906      	bls.n	18aea <gen_numname+0x7a>
   18adc:	2327      	movs	r3, #39	; 0x27
   18ade:	18fb      	adds	r3, r7, r3
   18ae0:	2227      	movs	r2, #39	; 0x27
   18ae2:	18ba      	adds	r2, r7, r2
   18ae4:	7812      	ldrb	r2, [r2, #0]
   18ae6:	3207      	adds	r2, #7
   18ae8:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   18aea:	6a3b      	ldr	r3, [r7, #32]
   18aec:	1e5a      	subs	r2, r3, #1
   18aee:	623a      	str	r2, [r7, #32]
   18af0:	2214      	movs	r2, #20
   18af2:	18ba      	adds	r2, r7, r2
   18af4:	2127      	movs	r1, #39	; 0x27
   18af6:	1879      	adds	r1, r7, r1
   18af8:	7809      	ldrb	r1, [r1, #0]
   18afa:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   18afc:	1cbb      	adds	r3, r7, #2
   18afe:	1cba      	adds	r2, r7, #2
   18b00:	8812      	ldrh	r2, [r2, #0]
   18b02:	0912      	lsrs	r2, r2, #4
   18b04:	801a      	strh	r2, [r3, #0]
	} while (seq);
   18b06:	1cbb      	adds	r3, r7, #2
   18b08:	881b      	ldrh	r3, [r3, #0]
   18b0a:	2b00      	cmp	r3, #0
   18b0c:	d1d7      	bne.n	18abe <gen_numname+0x4e>
	ns[i] = '~';
   18b0e:	2314      	movs	r3, #20
   18b10:	18fa      	adds	r2, r7, r3
   18b12:	6a3b      	ldr	r3, [r7, #32]
   18b14:	18d3      	adds	r3, r2, r3
   18b16:	227e      	movs	r2, #126	; 0x7e
   18b18:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   18b1a:	2300      	movs	r3, #0
   18b1c:	61fb      	str	r3, [r7, #28]
   18b1e:	e002      	b.n	18b26 <gen_numname+0xb6>
   18b20:	69fb      	ldr	r3, [r7, #28]
   18b22:	3301      	adds	r3, #1
   18b24:	61fb      	str	r3, [r7, #28]
   18b26:	69fa      	ldr	r2, [r7, #28]
   18b28:	6a3b      	ldr	r3, [r7, #32]
   18b2a:	429a      	cmp	r2, r3
   18b2c:	d205      	bcs.n	18b3a <gen_numname+0xca>
   18b2e:	68fa      	ldr	r2, [r7, #12]
   18b30:	69fb      	ldr	r3, [r7, #28]
   18b32:	18d3      	adds	r3, r2, r3
   18b34:	781b      	ldrb	r3, [r3, #0]
   18b36:	2b20      	cmp	r3, #32
   18b38:	d1f2      	bne.n	18b20 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   18b3a:	69fb      	ldr	r3, [r7, #28]
   18b3c:	1c5a      	adds	r2, r3, #1
   18b3e:	61fa      	str	r2, [r7, #28]
   18b40:	68fa      	ldr	r2, [r7, #12]
   18b42:	18d2      	adds	r2, r2, r3
   18b44:	6a3b      	ldr	r3, [r7, #32]
   18b46:	2b07      	cmp	r3, #7
   18b48:	d806      	bhi.n	18b58 <gen_numname+0xe8>
   18b4a:	6a3b      	ldr	r3, [r7, #32]
   18b4c:	1c59      	adds	r1, r3, #1
   18b4e:	6239      	str	r1, [r7, #32]
   18b50:	2114      	movs	r1, #20
   18b52:	1879      	adds	r1, r7, r1
   18b54:	5ccb      	ldrb	r3, [r1, r3]
   18b56:	e000      	b.n	18b5a <gen_numname+0xea>
   18b58:	2320      	movs	r3, #32
   18b5a:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   18b5c:	69fb      	ldr	r3, [r7, #28]
   18b5e:	2b07      	cmp	r3, #7
   18b60:	d9eb      	bls.n	18b3a <gen_numname+0xca>
}
   18b62:	46c0      	nop			; (mov r8, r8)
   18b64:	46bd      	mov	sp, r7
   18b66:	b00a      	add	sp, #40	; 0x28
   18b68:	bd80      	pop	{r7, pc}
   18b6a:	46c0      	nop			; (mov r8, r8)
   18b6c:	00017c15 	.word	0x00017c15

00018b70 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   18b70:	b580      	push	{r7, lr}
   18b72:	b084      	sub	sp, #16
   18b74:	af00      	add	r7, sp, #0
   18b76:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   18b78:	230f      	movs	r3, #15
   18b7a:	18fb      	adds	r3, r7, r3
   18b7c:	2200      	movs	r2, #0
   18b7e:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   18b80:	230b      	movs	r3, #11
   18b82:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   18b84:	230f      	movs	r3, #15
   18b86:	18fb      	adds	r3, r7, r3
   18b88:	781b      	ldrb	r3, [r3, #0]
   18b8a:	b2da      	uxtb	r2, r3
   18b8c:	0852      	lsrs	r2, r2, #1
   18b8e:	01db      	lsls	r3, r3, #7
   18b90:	4313      	orrs	r3, r2
   18b92:	b2d9      	uxtb	r1, r3
   18b94:	687b      	ldr	r3, [r7, #4]
   18b96:	1c5a      	adds	r2, r3, #1
   18b98:	607a      	str	r2, [r7, #4]
   18b9a:	781a      	ldrb	r2, [r3, #0]
   18b9c:	230f      	movs	r3, #15
   18b9e:	18fb      	adds	r3, r7, r3
   18ba0:	188a      	adds	r2, r1, r2
   18ba2:	701a      	strb	r2, [r3, #0]
   18ba4:	68bb      	ldr	r3, [r7, #8]
   18ba6:	3b01      	subs	r3, #1
   18ba8:	60bb      	str	r3, [r7, #8]
   18baa:	68bb      	ldr	r3, [r7, #8]
   18bac:	2b00      	cmp	r3, #0
   18bae:	d1e9      	bne.n	18b84 <sum_sfn+0x14>
	return sum;
   18bb0:	230f      	movs	r3, #15
   18bb2:	18fb      	adds	r3, r7, r3
   18bb4:	781b      	ldrb	r3, [r3, #0]
}
   18bb6:	0018      	movs	r0, r3
   18bb8:	46bd      	mov	sp, r7
   18bba:	b004      	add	sp, #16
   18bbc:	bd80      	pop	{r7, pc}
	...

00018bc0 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   18bc0:	b590      	push	{r4, r7, lr}
   18bc2:	b087      	sub	sp, #28
   18bc4:	af00      	add	r7, sp, #0
   18bc6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   18bc8:	2317      	movs	r3, #23
   18bca:	18fc      	adds	r4, r7, r3
   18bcc:	687b      	ldr	r3, [r7, #4]
   18bce:	2100      	movs	r1, #0
   18bd0:	0018      	movs	r0, r3
   18bd2:	4b74      	ldr	r3, [pc, #464]	; (18da4 <dir_find+0x1e4>)
   18bd4:	4798      	blx	r3
   18bd6:	0003      	movs	r3, r0
   18bd8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   18bda:	2317      	movs	r3, #23
   18bdc:	18fb      	adds	r3, r7, r3
   18bde:	781b      	ldrb	r3, [r3, #0]
   18be0:	2b00      	cmp	r3, #0
   18be2:	d003      	beq.n	18bec <dir_find+0x2c>
   18be4:	2317      	movs	r3, #23
   18be6:	18fb      	adds	r3, r7, r3
   18be8:	781b      	ldrb	r3, [r3, #0]
   18bea:	e0d6      	b.n	18d9a <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   18bec:	2314      	movs	r3, #20
   18bee:	18fb      	adds	r3, r7, r3
   18bf0:	22ff      	movs	r2, #255	; 0xff
   18bf2:	701a      	strb	r2, [r3, #0]
   18bf4:	2315      	movs	r3, #21
   18bf6:	18fb      	adds	r3, r7, r3
   18bf8:	2214      	movs	r2, #20
   18bfa:	18ba      	adds	r2, r7, r2
   18bfc:	7812      	ldrb	r2, [r2, #0]
   18bfe:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   18c00:	687b      	ldr	r3, [r7, #4]
   18c02:	681a      	ldr	r2, [r3, #0]
   18c04:	687b      	ldr	r3, [r7, #4]
   18c06:	691b      	ldr	r3, [r3, #16]
   18c08:	2117      	movs	r1, #23
   18c0a:	187c      	adds	r4, r7, r1
   18c0c:	0019      	movs	r1, r3
   18c0e:	0010      	movs	r0, r2
   18c10:	4b65      	ldr	r3, [pc, #404]	; (18da8 <dir_find+0x1e8>)
   18c12:	4798      	blx	r3
   18c14:	0003      	movs	r3, r0
   18c16:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   18c18:	2317      	movs	r3, #23
   18c1a:	18fb      	adds	r3, r7, r3
   18c1c:	781b      	ldrb	r3, [r3, #0]
   18c1e:	2b00      	cmp	r3, #0
   18c20:	d000      	beq.n	18c24 <dir_find+0x64>
   18c22:	e0b2      	b.n	18d8a <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   18c24:	687b      	ldr	r3, [r7, #4]
   18c26:	695b      	ldr	r3, [r3, #20]
   18c28:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   18c2a:	2316      	movs	r3, #22
   18c2c:	18fb      	adds	r3, r7, r3
   18c2e:	693a      	ldr	r2, [r7, #16]
   18c30:	7812      	ldrb	r2, [r2, #0]
   18c32:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   18c34:	2316      	movs	r3, #22
   18c36:	18fb      	adds	r3, r7, r3
   18c38:	781b      	ldrb	r3, [r3, #0]
   18c3a:	2b00      	cmp	r3, #0
   18c3c:	d104      	bne.n	18c48 <dir_find+0x88>
   18c3e:	2317      	movs	r3, #23
   18c40:	18fb      	adds	r3, r7, r3
   18c42:	2204      	movs	r2, #4
   18c44:	701a      	strb	r2, [r3, #0]
   18c46:	e0a5      	b.n	18d94 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   18c48:	693b      	ldr	r3, [r7, #16]
   18c4a:	330b      	adds	r3, #11
   18c4c:	781a      	ldrb	r2, [r3, #0]
   18c4e:	230f      	movs	r3, #15
   18c50:	18fb      	adds	r3, r7, r3
   18c52:	213f      	movs	r1, #63	; 0x3f
   18c54:	400a      	ands	r2, r1
   18c56:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   18c58:	2316      	movs	r3, #22
   18c5a:	18fb      	adds	r3, r7, r3
   18c5c:	781b      	ldrb	r3, [r3, #0]
   18c5e:	2be5      	cmp	r3, #229	; 0xe5
   18c60:	d00a      	beq.n	18c78 <dir_find+0xb8>
   18c62:	230f      	movs	r3, #15
   18c64:	18fb      	adds	r3, r7, r3
   18c66:	781b      	ldrb	r3, [r3, #0]
   18c68:	2208      	movs	r2, #8
   18c6a:	4013      	ands	r3, r2
   18c6c:	d009      	beq.n	18c82 <dir_find+0xc2>
   18c6e:	230f      	movs	r3, #15
   18c70:	18fb      	adds	r3, r7, r3
   18c72:	781b      	ldrb	r3, [r3, #0]
   18c74:	2b0f      	cmp	r3, #15
   18c76:	d004      	beq.n	18c82 <dir_find+0xc2>
			ord = 0xFF;
   18c78:	2315      	movs	r3, #21
   18c7a:	18fb      	adds	r3, r7, r3
   18c7c:	22ff      	movs	r2, #255	; 0xff
   18c7e:	701a      	strb	r2, [r3, #0]
   18c80:	e073      	b.n	18d6a <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   18c82:	230f      	movs	r3, #15
   18c84:	18fb      	adds	r3, r7, r3
   18c86:	781b      	ldrb	r3, [r3, #0]
   18c88:	2b0f      	cmp	r3, #15
   18c8a:	d145      	bne.n	18d18 <dir_find+0x158>
				if (dj->lfn) {
   18c8c:	687b      	ldr	r3, [r7, #4]
   18c8e:	69db      	ldr	r3, [r3, #28]
   18c90:	2b00      	cmp	r3, #0
   18c92:	d100      	bne.n	18c96 <dir_find+0xd6>
   18c94:	e069      	b.n	18d6a <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   18c96:	2316      	movs	r3, #22
   18c98:	18fb      	adds	r3, r7, r3
   18c9a:	781b      	ldrb	r3, [r3, #0]
   18c9c:	2240      	movs	r2, #64	; 0x40
   18c9e:	4013      	ands	r3, r2
   18ca0:	d016      	beq.n	18cd0 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   18ca2:	2314      	movs	r3, #20
   18ca4:	18fb      	adds	r3, r7, r3
   18ca6:	693a      	ldr	r2, [r7, #16]
   18ca8:	7b52      	ldrb	r2, [r2, #13]
   18caa:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   18cac:	2316      	movs	r3, #22
   18cae:	18fb      	adds	r3, r7, r3
   18cb0:	2216      	movs	r2, #22
   18cb2:	18ba      	adds	r2, r7, r2
   18cb4:	7812      	ldrb	r2, [r2, #0]
   18cb6:	2140      	movs	r1, #64	; 0x40
   18cb8:	438a      	bics	r2, r1
   18cba:	701a      	strb	r2, [r3, #0]
   18cbc:	2315      	movs	r3, #21
   18cbe:	18fb      	adds	r3, r7, r3
   18cc0:	2216      	movs	r2, #22
   18cc2:	18ba      	adds	r2, r7, r2
   18cc4:	7812      	ldrb	r2, [r2, #0]
   18cc6:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   18cc8:	687b      	ldr	r3, [r7, #4]
   18cca:	88da      	ldrh	r2, [r3, #6]
   18ccc:	687b      	ldr	r3, [r7, #4]
   18cce:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   18cd0:	2316      	movs	r3, #22
   18cd2:	18fa      	adds	r2, r7, r3
   18cd4:	2315      	movs	r3, #21
   18cd6:	18fb      	adds	r3, r7, r3
   18cd8:	7812      	ldrb	r2, [r2, #0]
   18cda:	781b      	ldrb	r3, [r3, #0]
   18cdc:	429a      	cmp	r2, r3
   18cde:	d116      	bne.n	18d0e <dir_find+0x14e>
   18ce0:	693b      	ldr	r3, [r7, #16]
   18ce2:	330d      	adds	r3, #13
   18ce4:	781b      	ldrb	r3, [r3, #0]
   18ce6:	2214      	movs	r2, #20
   18ce8:	18ba      	adds	r2, r7, r2
   18cea:	7812      	ldrb	r2, [r2, #0]
   18cec:	429a      	cmp	r2, r3
   18cee:	d10e      	bne.n	18d0e <dir_find+0x14e>
   18cf0:	687b      	ldr	r3, [r7, #4]
   18cf2:	69db      	ldr	r3, [r3, #28]
   18cf4:	693a      	ldr	r2, [r7, #16]
   18cf6:	0011      	movs	r1, r2
   18cf8:	0018      	movs	r0, r3
   18cfa:	4b2c      	ldr	r3, [pc, #176]	; (18dac <dir_find+0x1ec>)
   18cfc:	4798      	blx	r3
   18cfe:	1e03      	subs	r3, r0, #0
   18d00:	d005      	beq.n	18d0e <dir_find+0x14e>
   18d02:	2315      	movs	r3, #21
   18d04:	18fb      	adds	r3, r7, r3
   18d06:	781b      	ldrb	r3, [r3, #0]
   18d08:	3b01      	subs	r3, #1
   18d0a:	b2da      	uxtb	r2, r3
   18d0c:	e000      	b.n	18d10 <dir_find+0x150>
   18d0e:	22ff      	movs	r2, #255	; 0xff
   18d10:	2315      	movs	r3, #21
   18d12:	18fb      	adds	r3, r7, r3
   18d14:	701a      	strb	r2, [r3, #0]
   18d16:	e028      	b.n	18d6a <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   18d18:	2315      	movs	r3, #21
   18d1a:	18fb      	adds	r3, r7, r3
   18d1c:	781b      	ldrb	r3, [r3, #0]
   18d1e:	2b00      	cmp	r3, #0
   18d20:	d10a      	bne.n	18d38 <dir_find+0x178>
   18d22:	693b      	ldr	r3, [r7, #16]
   18d24:	0018      	movs	r0, r3
   18d26:	4b22      	ldr	r3, [pc, #136]	; (18db0 <dir_find+0x1f0>)
   18d28:	4798      	blx	r3
   18d2a:	0003      	movs	r3, r0
   18d2c:	001a      	movs	r2, r3
   18d2e:	2314      	movs	r3, #20
   18d30:	18fb      	adds	r3, r7, r3
   18d32:	781b      	ldrb	r3, [r3, #0]
   18d34:	4293      	cmp	r3, r2
   18d36:	d02a      	beq.n	18d8e <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   18d38:	2315      	movs	r3, #21
   18d3a:	18fb      	adds	r3, r7, r3
   18d3c:	22ff      	movs	r2, #255	; 0xff
   18d3e:	701a      	strb	r2, [r3, #0]
   18d40:	687b      	ldr	r3, [r7, #4]
   18d42:	2201      	movs	r2, #1
   18d44:	4252      	negs	r2, r2
   18d46:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   18d48:	687b      	ldr	r3, [r7, #4]
   18d4a:	699b      	ldr	r3, [r3, #24]
   18d4c:	330b      	adds	r3, #11
   18d4e:	781b      	ldrb	r3, [r3, #0]
   18d50:	001a      	movs	r2, r3
   18d52:	2301      	movs	r3, #1
   18d54:	4013      	ands	r3, r2
   18d56:	d108      	bne.n	18d6a <dir_find+0x1aa>
   18d58:	687b      	ldr	r3, [r7, #4]
   18d5a:	6999      	ldr	r1, [r3, #24]
   18d5c:	693b      	ldr	r3, [r7, #16]
   18d5e:	220b      	movs	r2, #11
   18d60:	0018      	movs	r0, r3
   18d62:	4b14      	ldr	r3, [pc, #80]	; (18db4 <dir_find+0x1f4>)
   18d64:	4798      	blx	r3
   18d66:	1e03      	subs	r3, r0, #0
   18d68:	d013      	beq.n	18d92 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   18d6a:	2317      	movs	r3, #23
   18d6c:	18fc      	adds	r4, r7, r3
   18d6e:	687b      	ldr	r3, [r7, #4]
   18d70:	2100      	movs	r1, #0
   18d72:	0018      	movs	r0, r3
   18d74:	4b10      	ldr	r3, [pc, #64]	; (18db8 <dir_find+0x1f8>)
   18d76:	4798      	blx	r3
   18d78:	0003      	movs	r3, r0
   18d7a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   18d7c:	2317      	movs	r3, #23
   18d7e:	18fb      	adds	r3, r7, r3
   18d80:	781b      	ldrb	r3, [r3, #0]
   18d82:	2b00      	cmp	r3, #0
   18d84:	d100      	bne.n	18d88 <dir_find+0x1c8>
   18d86:	e73b      	b.n	18c00 <dir_find+0x40>
   18d88:	e004      	b.n	18d94 <dir_find+0x1d4>
		if (res != FR_OK) break;
   18d8a:	46c0      	nop			; (mov r8, r8)
   18d8c:	e002      	b.n	18d94 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   18d8e:	46c0      	nop			; (mov r8, r8)
   18d90:	e000      	b.n	18d94 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   18d92:	46c0      	nop			; (mov r8, r8)

	return res;
   18d94:	2317      	movs	r3, #23
   18d96:	18fb      	adds	r3, r7, r3
   18d98:	781b      	ldrb	r3, [r3, #0]
}
   18d9a:	0018      	movs	r0, r3
   18d9c:	46bd      	mov	sp, r7
   18d9e:	b007      	add	sp, #28
   18da0:	bd90      	pop	{r4, r7, pc}
   18da2:	46c0      	nop			; (mov r8, r8)
   18da4:	0001853d 	.word	0x0001853d
   18da8:	00017cf9 	.word	0x00017cf9
   18dac:	0001885d 	.word	0x0001885d
   18db0:	00018b71 	.word	0x00018b71
   18db4:	00017c7d 	.word	0x00017c7d
   18db8:	0001866d 	.word	0x0001866d

00018dbc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   18dbc:	b590      	push	{r4, r7, lr}
   18dbe:	b08d      	sub	sp, #52	; 0x34
   18dc0:	af00      	add	r7, sp, #0
   18dc2:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   18dc4:	687b      	ldr	r3, [r7, #4]
   18dc6:	699b      	ldr	r3, [r3, #24]
   18dc8:	627b      	str	r3, [r7, #36]	; 0x24
   18dca:	687b      	ldr	r3, [r7, #4]
   18dcc:	69db      	ldr	r3, [r3, #28]
   18dce:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   18dd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   18dd2:	230c      	movs	r3, #12
   18dd4:	18fb      	adds	r3, r7, r3
   18dd6:	220c      	movs	r2, #12
   18dd8:	0018      	movs	r0, r3
   18dda:	4bc8      	ldr	r3, [pc, #800]	; (190fc <dir_register+0x340>)
   18ddc:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   18dde:	230c      	movs	r3, #12
   18de0:	18fb      	adds	r3, r7, r3
   18de2:	7adb      	ldrb	r3, [r3, #11]
   18de4:	001a      	movs	r2, r3
   18de6:	2301      	movs	r3, #1
   18de8:	4013      	ands	r3, r2
   18dea:	d048      	beq.n	18e7e <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   18dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18dee:	330b      	adds	r3, #11
   18df0:	2200      	movs	r2, #0
   18df2:	701a      	strb	r2, [r3, #0]
   18df4:	687b      	ldr	r3, [r7, #4]
   18df6:	2200      	movs	r2, #0
   18df8:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   18dfa:	232c      	movs	r3, #44	; 0x2c
   18dfc:	18fb      	adds	r3, r7, r3
   18dfe:	2201      	movs	r2, #1
   18e00:	801a      	strh	r2, [r3, #0]
   18e02:	e01c      	b.n	18e3e <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   18e04:	232c      	movs	r3, #44	; 0x2c
   18e06:	18fb      	adds	r3, r7, r3
   18e08:	881b      	ldrh	r3, [r3, #0]
   18e0a:	6a3a      	ldr	r2, [r7, #32]
   18e0c:	210c      	movs	r1, #12
   18e0e:	1879      	adds	r1, r7, r1
   18e10:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18e12:	4cbb      	ldr	r4, [pc, #748]	; (19100 <dir_register+0x344>)
   18e14:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   18e16:	232f      	movs	r3, #47	; 0x2f
   18e18:	18fc      	adds	r4, r7, r3
   18e1a:	687b      	ldr	r3, [r7, #4]
   18e1c:	0018      	movs	r0, r3
   18e1e:	4bb9      	ldr	r3, [pc, #740]	; (19104 <dir_register+0x348>)
   18e20:	4798      	blx	r3
   18e22:	0003      	movs	r3, r0
   18e24:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   18e26:	232f      	movs	r3, #47	; 0x2f
   18e28:	18fb      	adds	r3, r7, r3
   18e2a:	781b      	ldrb	r3, [r3, #0]
   18e2c:	2b00      	cmp	r3, #0
   18e2e:	d10c      	bne.n	18e4a <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   18e30:	232c      	movs	r3, #44	; 0x2c
   18e32:	18fb      	adds	r3, r7, r3
   18e34:	881a      	ldrh	r2, [r3, #0]
   18e36:	232c      	movs	r3, #44	; 0x2c
   18e38:	18fb      	adds	r3, r7, r3
   18e3a:	3201      	adds	r2, #1
   18e3c:	801a      	strh	r2, [r3, #0]
   18e3e:	232c      	movs	r3, #44	; 0x2c
   18e40:	18fb      	adds	r3, r7, r3
   18e42:	881b      	ldrh	r3, [r3, #0]
   18e44:	2b63      	cmp	r3, #99	; 0x63
   18e46:	d9dd      	bls.n	18e04 <dir_register+0x48>
   18e48:	e000      	b.n	18e4c <dir_register+0x90>
			if (res != FR_OK) break;
   18e4a:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   18e4c:	232c      	movs	r3, #44	; 0x2c
   18e4e:	18fb      	adds	r3, r7, r3
   18e50:	881b      	ldrh	r3, [r3, #0]
   18e52:	2b64      	cmp	r3, #100	; 0x64
   18e54:	d101      	bne.n	18e5a <dir_register+0x9e>
   18e56:	2307      	movs	r3, #7
   18e58:	e14c      	b.n	190f4 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   18e5a:	232f      	movs	r3, #47	; 0x2f
   18e5c:	18fb      	adds	r3, r7, r3
   18e5e:	781b      	ldrb	r3, [r3, #0]
   18e60:	2b04      	cmp	r3, #4
   18e62:	d003      	beq.n	18e6c <dir_register+0xb0>
   18e64:	232f      	movs	r3, #47	; 0x2f
   18e66:	18fb      	adds	r3, r7, r3
   18e68:	781b      	ldrb	r3, [r3, #0]
   18e6a:	e143      	b.n	190f4 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   18e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18e6e:	330b      	adds	r3, #11
   18e70:	220c      	movs	r2, #12
   18e72:	18ba      	adds	r2, r7, r2
   18e74:	7ad2      	ldrb	r2, [r2, #11]
   18e76:	701a      	strb	r2, [r3, #0]
   18e78:	687b      	ldr	r3, [r7, #4]
   18e7a:	6a3a      	ldr	r2, [r7, #32]
   18e7c:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   18e7e:	230c      	movs	r3, #12
   18e80:	18fb      	adds	r3, r7, r3
   18e82:	7adb      	ldrb	r3, [r3, #11]
   18e84:	001a      	movs	r2, r3
   18e86:	2302      	movs	r3, #2
   18e88:	4013      	ands	r3, r2
   18e8a:	d023      	beq.n	18ed4 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   18e8c:	232a      	movs	r3, #42	; 0x2a
   18e8e:	18fb      	adds	r3, r7, r3
   18e90:	2200      	movs	r2, #0
   18e92:	801a      	strh	r2, [r3, #0]
   18e94:	e006      	b.n	18ea4 <dir_register+0xe8>
   18e96:	232a      	movs	r3, #42	; 0x2a
   18e98:	18fb      	adds	r3, r7, r3
   18e9a:	881a      	ldrh	r2, [r3, #0]
   18e9c:	232a      	movs	r3, #42	; 0x2a
   18e9e:	18fb      	adds	r3, r7, r3
   18ea0:	3201      	adds	r2, #1
   18ea2:	801a      	strh	r2, [r3, #0]
   18ea4:	232a      	movs	r3, #42	; 0x2a
   18ea6:	18fb      	adds	r3, r7, r3
   18ea8:	881b      	ldrh	r3, [r3, #0]
   18eaa:	005b      	lsls	r3, r3, #1
   18eac:	6a3a      	ldr	r2, [r7, #32]
   18eae:	18d3      	adds	r3, r2, r3
   18eb0:	881b      	ldrh	r3, [r3, #0]
   18eb2:	2b00      	cmp	r3, #0
   18eb4:	d1ef      	bne.n	18e96 <dir_register+0xda>
		ne = (ne + 25) / 13;
   18eb6:	232a      	movs	r3, #42	; 0x2a
   18eb8:	18fb      	adds	r3, r7, r3
   18eba:	881b      	ldrh	r3, [r3, #0]
   18ebc:	3319      	adds	r3, #25
   18ebe:	001a      	movs	r2, r3
   18ec0:	4b91      	ldr	r3, [pc, #580]	; (19108 <dir_register+0x34c>)
   18ec2:	210d      	movs	r1, #13
   18ec4:	0010      	movs	r0, r2
   18ec6:	4798      	blx	r3
   18ec8:	0003      	movs	r3, r0
   18eca:	001a      	movs	r2, r3
   18ecc:	232a      	movs	r3, #42	; 0x2a
   18ece:	18fb      	adds	r3, r7, r3
   18ed0:	801a      	strh	r2, [r3, #0]
   18ed2:	e003      	b.n	18edc <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   18ed4:	232a      	movs	r3, #42	; 0x2a
   18ed6:	18fb      	adds	r3, r7, r3
   18ed8:	2201      	movs	r2, #1
   18eda:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   18edc:	232f      	movs	r3, #47	; 0x2f
   18ede:	18fc      	adds	r4, r7, r3
   18ee0:	687b      	ldr	r3, [r7, #4]
   18ee2:	2100      	movs	r1, #0
   18ee4:	0018      	movs	r0, r3
   18ee6:	4b89      	ldr	r3, [pc, #548]	; (1910c <dir_register+0x350>)
   18ee8:	4798      	blx	r3
   18eea:	0003      	movs	r3, r0
   18eec:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   18eee:	232f      	movs	r3, #47	; 0x2f
   18ef0:	18fb      	adds	r3, r7, r3
   18ef2:	781b      	ldrb	r3, [r3, #0]
   18ef4:	2b00      	cmp	r3, #0
   18ef6:	d003      	beq.n	18f00 <dir_register+0x144>
   18ef8:	232f      	movs	r3, #47	; 0x2f
   18efa:	18fb      	adds	r3, r7, r3
   18efc:	781b      	ldrb	r3, [r3, #0]
   18efe:	e0f9      	b.n	190f4 <dir_register+0x338>
	n = is = 0;
   18f00:	2328      	movs	r3, #40	; 0x28
   18f02:	18fb      	adds	r3, r7, r3
   18f04:	2200      	movs	r2, #0
   18f06:	801a      	strh	r2, [r3, #0]
   18f08:	232c      	movs	r3, #44	; 0x2c
   18f0a:	18fb      	adds	r3, r7, r3
   18f0c:	2228      	movs	r2, #40	; 0x28
   18f0e:	18ba      	adds	r2, r7, r2
   18f10:	8812      	ldrh	r2, [r2, #0]
   18f12:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   18f14:	687b      	ldr	r3, [r7, #4]
   18f16:	681a      	ldr	r2, [r3, #0]
   18f18:	687b      	ldr	r3, [r7, #4]
   18f1a:	691b      	ldr	r3, [r3, #16]
   18f1c:	212f      	movs	r1, #47	; 0x2f
   18f1e:	187c      	adds	r4, r7, r1
   18f20:	0019      	movs	r1, r3
   18f22:	0010      	movs	r0, r2
   18f24:	4b7a      	ldr	r3, [pc, #488]	; (19110 <dir_register+0x354>)
   18f26:	4798      	blx	r3
   18f28:	0003      	movs	r3, r0
   18f2a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   18f2c:	232f      	movs	r3, #47	; 0x2f
   18f2e:	18fb      	adds	r3, r7, r3
   18f30:	781b      	ldrb	r3, [r3, #0]
   18f32:	2b00      	cmp	r3, #0
   18f34:	d13c      	bne.n	18fb0 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   18f36:	687b      	ldr	r3, [r7, #4]
   18f38:	695a      	ldr	r2, [r3, #20]
   18f3a:	231f      	movs	r3, #31
   18f3c:	18fb      	adds	r3, r7, r3
   18f3e:	7812      	ldrb	r2, [r2, #0]
   18f40:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   18f42:	231f      	movs	r3, #31
   18f44:	18fb      	adds	r3, r7, r3
   18f46:	781b      	ldrb	r3, [r3, #0]
   18f48:	2be5      	cmp	r3, #229	; 0xe5
   18f4a:	d004      	beq.n	18f56 <dir_register+0x19a>
   18f4c:	231f      	movs	r3, #31
   18f4e:	18fb      	adds	r3, r7, r3
   18f50:	781b      	ldrb	r3, [r3, #0]
   18f52:	2b00      	cmp	r3, #0
   18f54:	d119      	bne.n	18f8a <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   18f56:	232c      	movs	r3, #44	; 0x2c
   18f58:	18fb      	adds	r3, r7, r3
   18f5a:	881b      	ldrh	r3, [r3, #0]
   18f5c:	2b00      	cmp	r3, #0
   18f5e:	d104      	bne.n	18f6a <dir_register+0x1ae>
   18f60:	2328      	movs	r3, #40	; 0x28
   18f62:	18fb      	adds	r3, r7, r3
   18f64:	687a      	ldr	r2, [r7, #4]
   18f66:	88d2      	ldrh	r2, [r2, #6]
   18f68:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   18f6a:	232c      	movs	r3, #44	; 0x2c
   18f6c:	18fb      	adds	r3, r7, r3
   18f6e:	222c      	movs	r2, #44	; 0x2c
   18f70:	18ba      	adds	r2, r7, r2
   18f72:	8812      	ldrh	r2, [r2, #0]
   18f74:	3201      	adds	r2, #1
   18f76:	801a      	strh	r2, [r3, #0]
   18f78:	232c      	movs	r3, #44	; 0x2c
   18f7a:	18fa      	adds	r2, r7, r3
   18f7c:	232a      	movs	r3, #42	; 0x2a
   18f7e:	18fb      	adds	r3, r7, r3
   18f80:	8812      	ldrh	r2, [r2, #0]
   18f82:	881b      	ldrh	r3, [r3, #0]
   18f84:	429a      	cmp	r2, r3
   18f86:	d104      	bne.n	18f92 <dir_register+0x1d6>
   18f88:	e013      	b.n	18fb2 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   18f8a:	232c      	movs	r3, #44	; 0x2c
   18f8c:	18fb      	adds	r3, r7, r3
   18f8e:	2200      	movs	r2, #0
   18f90:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   18f92:	232f      	movs	r3, #47	; 0x2f
   18f94:	18fc      	adds	r4, r7, r3
   18f96:	687b      	ldr	r3, [r7, #4]
   18f98:	2101      	movs	r1, #1
   18f9a:	0018      	movs	r0, r3
   18f9c:	4b5d      	ldr	r3, [pc, #372]	; (19114 <dir_register+0x358>)
   18f9e:	4798      	blx	r3
   18fa0:	0003      	movs	r3, r0
   18fa2:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   18fa4:	232f      	movs	r3, #47	; 0x2f
   18fa6:	18fb      	adds	r3, r7, r3
   18fa8:	781b      	ldrb	r3, [r3, #0]
   18faa:	2b00      	cmp	r3, #0
   18fac:	d0b2      	beq.n	18f14 <dir_register+0x158>
   18fae:	e000      	b.n	18fb2 <dir_register+0x1f6>
		if (res != FR_OK) break;
   18fb0:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   18fb2:	232f      	movs	r3, #47	; 0x2f
   18fb4:	18fb      	adds	r3, r7, r3
   18fb6:	781b      	ldrb	r3, [r3, #0]
   18fb8:	2b00      	cmp	r3, #0
   18fba:	d163      	bne.n	19084 <dir_register+0x2c8>
   18fbc:	232a      	movs	r3, #42	; 0x2a
   18fbe:	18fb      	adds	r3, r7, r3
   18fc0:	881b      	ldrh	r3, [r3, #0]
   18fc2:	2b01      	cmp	r3, #1
   18fc4:	d95e      	bls.n	19084 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   18fc6:	232f      	movs	r3, #47	; 0x2f
   18fc8:	18fc      	adds	r4, r7, r3
   18fca:	2328      	movs	r3, #40	; 0x28
   18fcc:	18fb      	adds	r3, r7, r3
   18fce:	881a      	ldrh	r2, [r3, #0]
   18fd0:	687b      	ldr	r3, [r7, #4]
   18fd2:	0011      	movs	r1, r2
   18fd4:	0018      	movs	r0, r3
   18fd6:	4b4d      	ldr	r3, [pc, #308]	; (1910c <dir_register+0x350>)
   18fd8:	4798      	blx	r3
   18fda:	0003      	movs	r3, r0
   18fdc:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   18fde:	232f      	movs	r3, #47	; 0x2f
   18fe0:	18fb      	adds	r3, r7, r3
   18fe2:	781b      	ldrb	r3, [r3, #0]
   18fe4:	2b00      	cmp	r3, #0
   18fe6:	d14d      	bne.n	19084 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   18fe8:	687b      	ldr	r3, [r7, #4]
   18fea:	699b      	ldr	r3, [r3, #24]
   18fec:	221e      	movs	r2, #30
   18fee:	18bc      	adds	r4, r7, r2
   18ff0:	0018      	movs	r0, r3
   18ff2:	4b49      	ldr	r3, [pc, #292]	; (19118 <dir_register+0x35c>)
   18ff4:	4798      	blx	r3
   18ff6:	0003      	movs	r3, r0
   18ff8:	7023      	strb	r3, [r4, #0]
			ne--;
   18ffa:	232a      	movs	r3, #42	; 0x2a
   18ffc:	18fb      	adds	r3, r7, r3
   18ffe:	881a      	ldrh	r2, [r3, #0]
   19000:	232a      	movs	r3, #42	; 0x2a
   19002:	18fb      	adds	r3, r7, r3
   19004:	3a01      	subs	r2, #1
   19006:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   19008:	687b      	ldr	r3, [r7, #4]
   1900a:	681a      	ldr	r2, [r3, #0]
   1900c:	687b      	ldr	r3, [r7, #4]
   1900e:	691b      	ldr	r3, [r3, #16]
   19010:	212f      	movs	r1, #47	; 0x2f
   19012:	187c      	adds	r4, r7, r1
   19014:	0019      	movs	r1, r3
   19016:	0010      	movs	r0, r2
   19018:	4b3d      	ldr	r3, [pc, #244]	; (19110 <dir_register+0x354>)
   1901a:	4798      	blx	r3
   1901c:	0003      	movs	r3, r0
   1901e:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   19020:	232f      	movs	r3, #47	; 0x2f
   19022:	18fb      	adds	r3, r7, r3
   19024:	781b      	ldrb	r3, [r3, #0]
   19026:	2b00      	cmp	r3, #0
   19028:	d12b      	bne.n	19082 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   1902a:	687b      	ldr	r3, [r7, #4]
   1902c:	69d8      	ldr	r0, [r3, #28]
   1902e:	687b      	ldr	r3, [r7, #4]
   19030:	6959      	ldr	r1, [r3, #20]
   19032:	232a      	movs	r3, #42	; 0x2a
   19034:	18fb      	adds	r3, r7, r3
   19036:	881b      	ldrh	r3, [r3, #0]
   19038:	b2da      	uxtb	r2, r3
   1903a:	231e      	movs	r3, #30
   1903c:	18fb      	adds	r3, r7, r3
   1903e:	781b      	ldrb	r3, [r3, #0]
   19040:	4c36      	ldr	r4, [pc, #216]	; (1911c <dir_register+0x360>)
   19042:	47a0      	blx	r4
				dj->fs->wflag = 1;
   19044:	687b      	ldr	r3, [r7, #4]
   19046:	681b      	ldr	r3, [r3, #0]
   19048:	2201      	movs	r2, #1
   1904a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   1904c:	232f      	movs	r3, #47	; 0x2f
   1904e:	18fc      	adds	r4, r7, r3
   19050:	687b      	ldr	r3, [r7, #4]
   19052:	2100      	movs	r1, #0
   19054:	0018      	movs	r0, r3
   19056:	4b2f      	ldr	r3, [pc, #188]	; (19114 <dir_register+0x358>)
   19058:	4798      	blx	r3
   1905a:	0003      	movs	r3, r0
   1905c:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   1905e:	232f      	movs	r3, #47	; 0x2f
   19060:	18fb      	adds	r3, r7, r3
   19062:	781b      	ldrb	r3, [r3, #0]
   19064:	2b00      	cmp	r3, #0
   19066:	d10d      	bne.n	19084 <dir_register+0x2c8>
   19068:	232a      	movs	r3, #42	; 0x2a
   1906a:	18fb      	adds	r3, r7, r3
   1906c:	222a      	movs	r2, #42	; 0x2a
   1906e:	18ba      	adds	r2, r7, r2
   19070:	8812      	ldrh	r2, [r2, #0]
   19072:	3a01      	subs	r2, #1
   19074:	801a      	strh	r2, [r3, #0]
   19076:	232a      	movs	r3, #42	; 0x2a
   19078:	18fb      	adds	r3, r7, r3
   1907a:	881b      	ldrh	r3, [r3, #0]
   1907c:	2b00      	cmp	r3, #0
   1907e:	d1c3      	bne.n	19008 <dir_register+0x24c>
   19080:	e000      	b.n	19084 <dir_register+0x2c8>
				if (res != FR_OK) break;
   19082:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   19084:	232f      	movs	r3, #47	; 0x2f
   19086:	18fb      	adds	r3, r7, r3
   19088:	781b      	ldrb	r3, [r3, #0]
   1908a:	2b00      	cmp	r3, #0
   1908c:	d12f      	bne.n	190ee <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   1908e:	687b      	ldr	r3, [r7, #4]
   19090:	681a      	ldr	r2, [r3, #0]
   19092:	687b      	ldr	r3, [r7, #4]
   19094:	691b      	ldr	r3, [r3, #16]
   19096:	212f      	movs	r1, #47	; 0x2f
   19098:	187c      	adds	r4, r7, r1
   1909a:	0019      	movs	r1, r3
   1909c:	0010      	movs	r0, r2
   1909e:	4b1c      	ldr	r3, [pc, #112]	; (19110 <dir_register+0x354>)
   190a0:	4798      	blx	r3
   190a2:	0003      	movs	r3, r0
   190a4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   190a6:	232f      	movs	r3, #47	; 0x2f
   190a8:	18fb      	adds	r3, r7, r3
   190aa:	781b      	ldrb	r3, [r3, #0]
   190ac:	2b00      	cmp	r3, #0
   190ae:	d11e      	bne.n	190ee <dir_register+0x332>
			dir = dj->dir;
   190b0:	687b      	ldr	r3, [r7, #4]
   190b2:	695b      	ldr	r3, [r3, #20]
   190b4:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   190b6:	69bb      	ldr	r3, [r7, #24]
   190b8:	2220      	movs	r2, #32
   190ba:	2100      	movs	r1, #0
   190bc:	0018      	movs	r0, r3
   190be:	4b18      	ldr	r3, [pc, #96]	; (19120 <dir_register+0x364>)
   190c0:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   190c2:	687b      	ldr	r3, [r7, #4]
   190c4:	6999      	ldr	r1, [r3, #24]
   190c6:	69bb      	ldr	r3, [r7, #24]
   190c8:	220b      	movs	r2, #11
   190ca:	0018      	movs	r0, r3
   190cc:	4b0b      	ldr	r3, [pc, #44]	; (190fc <dir_register+0x340>)
   190ce:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   190d0:	69bb      	ldr	r3, [r7, #24]
   190d2:	330c      	adds	r3, #12
   190d4:	001a      	movs	r2, r3
   190d6:	687b      	ldr	r3, [r7, #4]
   190d8:	699b      	ldr	r3, [r3, #24]
   190da:	330b      	adds	r3, #11
   190dc:	781b      	ldrb	r3, [r3, #0]
   190de:	2118      	movs	r1, #24
   190e0:	400b      	ands	r3, r1
   190e2:	b2db      	uxtb	r3, r3
   190e4:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   190e6:	687b      	ldr	r3, [r7, #4]
   190e8:	681b      	ldr	r3, [r3, #0]
   190ea:	2201      	movs	r2, #1
   190ec:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   190ee:	232f      	movs	r3, #47	; 0x2f
   190f0:	18fb      	adds	r3, r7, r3
   190f2:	781b      	ldrb	r3, [r3, #0]
}
   190f4:	0018      	movs	r0, r3
   190f6:	46bd      	mov	sp, r7
   190f8:	b00d      	add	sp, #52	; 0x34
   190fa:	bd90      	pop	{r4, r7, pc}
   190fc:	00017c15 	.word	0x00017c15
   19100:	00018a71 	.word	0x00018a71
   19104:	00018bc1 	.word	0x00018bc1
   19108:	0001f1e5 	.word	0x0001f1e5
   1910c:	0001853d 	.word	0x0001853d
   19110:	00017cf9 	.word	0x00017cf9
   19114:	0001866d 	.word	0x0001866d
   19118:	00018b71 	.word	0x00018b71
   1911c:	00018961 	.word	0x00018961
   19120:	00017c4d 	.word	0x00017c4d

00019124 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   19124:	b590      	push	{r4, r7, lr}
   19126:	b08b      	sub	sp, #44	; 0x2c
   19128:	af00      	add	r7, sp, #0
   1912a:	6078      	str	r0, [r7, #4]
   1912c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   1912e:	683b      	ldr	r3, [r7, #0]
   19130:	681b      	ldr	r3, [r3, #0]
   19132:	613b      	str	r3, [r7, #16]
   19134:	e002      	b.n	1913c <create_name+0x18>
   19136:	693b      	ldr	r3, [r7, #16]
   19138:	3301      	adds	r3, #1
   1913a:	613b      	str	r3, [r7, #16]
   1913c:	693b      	ldr	r3, [r7, #16]
   1913e:	781b      	ldrb	r3, [r3, #0]
   19140:	2b2f      	cmp	r3, #47	; 0x2f
   19142:	d0f8      	beq.n	19136 <create_name+0x12>
   19144:	693b      	ldr	r3, [r7, #16]
   19146:	781b      	ldrb	r3, [r3, #0]
   19148:	2b5c      	cmp	r3, #92	; 0x5c
   1914a:	d0f4      	beq.n	19136 <create_name+0x12>
	lfn = dj->lfn;
   1914c:	687b      	ldr	r3, [r7, #4]
   1914e:	69db      	ldr	r3, [r3, #28]
   19150:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   19152:	2300      	movs	r3, #0
   19154:	617b      	str	r3, [r7, #20]
   19156:	697b      	ldr	r3, [r7, #20]
   19158:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   1915a:	69bb      	ldr	r3, [r7, #24]
   1915c:	1c5a      	adds	r2, r3, #1
   1915e:	61ba      	str	r2, [r7, #24]
   19160:	693a      	ldr	r2, [r7, #16]
   19162:	18d3      	adds	r3, r2, r3
   19164:	781a      	ldrb	r2, [r3, #0]
   19166:	2324      	movs	r3, #36	; 0x24
   19168:	18fb      	adds	r3, r7, r3
   1916a:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   1916c:	2324      	movs	r3, #36	; 0x24
   1916e:	18fb      	adds	r3, r7, r3
   19170:	881b      	ldrh	r3, [r3, #0]
   19172:	2b1f      	cmp	r3, #31
   19174:	d944      	bls.n	19200 <create_name+0xdc>
   19176:	2324      	movs	r3, #36	; 0x24
   19178:	18fb      	adds	r3, r7, r3
   1917a:	881b      	ldrh	r3, [r3, #0]
   1917c:	2b2f      	cmp	r3, #47	; 0x2f
   1917e:	d03f      	beq.n	19200 <create_name+0xdc>
   19180:	2324      	movs	r3, #36	; 0x24
   19182:	18fb      	adds	r3, r7, r3
   19184:	881b      	ldrh	r3, [r3, #0]
   19186:	2b5c      	cmp	r3, #92	; 0x5c
   19188:	d03a      	beq.n	19200 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   1918a:	697b      	ldr	r3, [r7, #20]
   1918c:	2bfe      	cmp	r3, #254	; 0xfe
   1918e:	d901      	bls.n	19194 <create_name+0x70>
			return FR_INVALID_NAME;
   19190:	2306      	movs	r3, #6
   19192:	e1e7      	b.n	19564 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   19194:	2324      	movs	r3, #36	; 0x24
   19196:	18fb      	adds	r3, r7, r3
   19198:	2224      	movs	r2, #36	; 0x24
   1919a:	18ba      	adds	r2, r7, r2
   1919c:	8812      	ldrh	r2, [r2, #0]
   1919e:	21ff      	movs	r1, #255	; 0xff
   191a0:	400a      	ands	r2, r1
   191a2:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   191a4:	2324      	movs	r3, #36	; 0x24
   191a6:	18fc      	adds	r4, r7, r3
   191a8:	2324      	movs	r3, #36	; 0x24
   191aa:	18fb      	adds	r3, r7, r3
   191ac:	881b      	ldrh	r3, [r3, #0]
   191ae:	2101      	movs	r1, #1
   191b0:	0018      	movs	r0, r3
   191b2:	4bba      	ldr	r3, [pc, #744]	; (1949c <create_name+0x378>)
   191b4:	4798      	blx	r3
   191b6:	0003      	movs	r3, r0
   191b8:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   191ba:	2324      	movs	r3, #36	; 0x24
   191bc:	18fb      	adds	r3, r7, r3
   191be:	881b      	ldrh	r3, [r3, #0]
   191c0:	2b00      	cmp	r3, #0
   191c2:	d101      	bne.n	191c8 <create_name+0xa4>
   191c4:	2306      	movs	r3, #6
   191c6:	e1cd      	b.n	19564 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   191c8:	2324      	movs	r3, #36	; 0x24
   191ca:	18fb      	adds	r3, r7, r3
   191cc:	881b      	ldrh	r3, [r3, #0]
   191ce:	2b7f      	cmp	r3, #127	; 0x7f
   191d0:	d80b      	bhi.n	191ea <create_name+0xc6>
   191d2:	2324      	movs	r3, #36	; 0x24
   191d4:	18fb      	adds	r3, r7, r3
   191d6:	881a      	ldrh	r2, [r3, #0]
   191d8:	4bb1      	ldr	r3, [pc, #708]	; (194a0 <create_name+0x37c>)
   191da:	0011      	movs	r1, r2
   191dc:	0018      	movs	r0, r3
   191de:	4bb1      	ldr	r3, [pc, #708]	; (194a4 <create_name+0x380>)
   191e0:	4798      	blx	r3
   191e2:	1e03      	subs	r3, r0, #0
   191e4:	d001      	beq.n	191ea <create_name+0xc6>
			return FR_INVALID_NAME;
   191e6:	2306      	movs	r3, #6
   191e8:	e1bc      	b.n	19564 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   191ea:	697b      	ldr	r3, [r7, #20]
   191ec:	1c5a      	adds	r2, r3, #1
   191ee:	617a      	str	r2, [r7, #20]
   191f0:	005b      	lsls	r3, r3, #1
   191f2:	68fa      	ldr	r2, [r7, #12]
   191f4:	18d3      	adds	r3, r2, r3
   191f6:	2224      	movs	r2, #36	; 0x24
   191f8:	18ba      	adds	r2, r7, r2
   191fa:	8812      	ldrh	r2, [r2, #0]
   191fc:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   191fe:	e7ac      	b.n	1915a <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   19200:	693a      	ldr	r2, [r7, #16]
   19202:	69bb      	ldr	r3, [r7, #24]
   19204:	18d2      	adds	r2, r2, r3
   19206:	683b      	ldr	r3, [r7, #0]
   19208:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   1920a:	2324      	movs	r3, #36	; 0x24
   1920c:	18fb      	adds	r3, r7, r3
   1920e:	881b      	ldrh	r3, [r3, #0]
   19210:	2b1f      	cmp	r3, #31
   19212:	d801      	bhi.n	19218 <create_name+0xf4>
   19214:	2204      	movs	r2, #4
   19216:	e000      	b.n	1921a <create_name+0xf6>
   19218:	2200      	movs	r2, #0
   1921a:	2326      	movs	r3, #38	; 0x26
   1921c:	18fb      	adds	r3, r7, r3
   1921e:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   19220:	e017      	b.n	19252 <create_name+0x12e>
		w = lfn[di-1];
   19222:	697b      	ldr	r3, [r7, #20]
   19224:	4aa0      	ldr	r2, [pc, #640]	; (194a8 <create_name+0x384>)
   19226:	4694      	mov	ip, r2
   19228:	4463      	add	r3, ip
   1922a:	005b      	lsls	r3, r3, #1
   1922c:	68fa      	ldr	r2, [r7, #12]
   1922e:	18d2      	adds	r2, r2, r3
   19230:	2324      	movs	r3, #36	; 0x24
   19232:	18fb      	adds	r3, r7, r3
   19234:	8812      	ldrh	r2, [r2, #0]
   19236:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   19238:	2324      	movs	r3, #36	; 0x24
   1923a:	18fb      	adds	r3, r7, r3
   1923c:	881b      	ldrh	r3, [r3, #0]
   1923e:	2b20      	cmp	r3, #32
   19240:	d004      	beq.n	1924c <create_name+0x128>
   19242:	2324      	movs	r3, #36	; 0x24
   19244:	18fb      	adds	r3, r7, r3
   19246:	881b      	ldrh	r3, [r3, #0]
   19248:	2b2e      	cmp	r3, #46	; 0x2e
   1924a:	d106      	bne.n	1925a <create_name+0x136>
		di--;
   1924c:	697b      	ldr	r3, [r7, #20]
   1924e:	3b01      	subs	r3, #1
   19250:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   19252:	697b      	ldr	r3, [r7, #20]
   19254:	2b00      	cmp	r3, #0
   19256:	d1e4      	bne.n	19222 <create_name+0xfe>
   19258:	e000      	b.n	1925c <create_name+0x138>
		if (w != ' ' && w != '.') break;
   1925a:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   1925c:	697b      	ldr	r3, [r7, #20]
   1925e:	2b00      	cmp	r3, #0
   19260:	d101      	bne.n	19266 <create_name+0x142>
   19262:	2306      	movs	r3, #6
   19264:	e17e      	b.n	19564 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   19266:	697b      	ldr	r3, [r7, #20]
   19268:	005b      	lsls	r3, r3, #1
   1926a:	68fa      	ldr	r2, [r7, #12]
   1926c:	18d3      	adds	r3, r2, r3
   1926e:	2200      	movs	r2, #0
   19270:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   19272:	687b      	ldr	r3, [r7, #4]
   19274:	699b      	ldr	r3, [r3, #24]
   19276:	220b      	movs	r2, #11
   19278:	2120      	movs	r1, #32
   1927a:	0018      	movs	r0, r3
   1927c:	4b8b      	ldr	r3, [pc, #556]	; (194ac <create_name+0x388>)
   1927e:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   19280:	2300      	movs	r3, #0
   19282:	61bb      	str	r3, [r7, #24]
   19284:	e002      	b.n	1928c <create_name+0x168>
   19286:	69bb      	ldr	r3, [r7, #24]
   19288:	3301      	adds	r3, #1
   1928a:	61bb      	str	r3, [r7, #24]
   1928c:	69bb      	ldr	r3, [r7, #24]
   1928e:	005b      	lsls	r3, r3, #1
   19290:	68fa      	ldr	r2, [r7, #12]
   19292:	18d3      	adds	r3, r2, r3
   19294:	881b      	ldrh	r3, [r3, #0]
   19296:	2b20      	cmp	r3, #32
   19298:	d0f5      	beq.n	19286 <create_name+0x162>
   1929a:	69bb      	ldr	r3, [r7, #24]
   1929c:	005b      	lsls	r3, r3, #1
   1929e:	68fa      	ldr	r2, [r7, #12]
   192a0:	18d3      	adds	r3, r2, r3
   192a2:	881b      	ldrh	r3, [r3, #0]
   192a4:	2b2e      	cmp	r3, #46	; 0x2e
   192a6:	d0ee      	beq.n	19286 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   192a8:	69bb      	ldr	r3, [r7, #24]
   192aa:	2b00      	cmp	r3, #0
   192ac:	d00b      	beq.n	192c6 <create_name+0x1a2>
   192ae:	2326      	movs	r3, #38	; 0x26
   192b0:	18fb      	adds	r3, r7, r3
   192b2:	2226      	movs	r2, #38	; 0x26
   192b4:	18ba      	adds	r2, r7, r2
   192b6:	7812      	ldrb	r2, [r2, #0]
   192b8:	2103      	movs	r1, #3
   192ba:	430a      	orrs	r2, r1
   192bc:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   192be:	e002      	b.n	192c6 <create_name+0x1a2>
   192c0:	697b      	ldr	r3, [r7, #20]
   192c2:	3b01      	subs	r3, #1
   192c4:	617b      	str	r3, [r7, #20]
   192c6:	697b      	ldr	r3, [r7, #20]
   192c8:	2b00      	cmp	r3, #0
   192ca:	d009      	beq.n	192e0 <create_name+0x1bc>
   192cc:	697b      	ldr	r3, [r7, #20]
   192ce:	4a76      	ldr	r2, [pc, #472]	; (194a8 <create_name+0x384>)
   192d0:	4694      	mov	ip, r2
   192d2:	4463      	add	r3, ip
   192d4:	005b      	lsls	r3, r3, #1
   192d6:	68fa      	ldr	r2, [r7, #12]
   192d8:	18d3      	adds	r3, r2, r3
   192da:	881b      	ldrh	r3, [r3, #0]
   192dc:	2b2e      	cmp	r3, #46	; 0x2e
   192de:	d1ef      	bne.n	192c0 <create_name+0x19c>

	b = i = 0; ni = 8;
   192e0:	2300      	movs	r3, #0
   192e2:	623b      	str	r3, [r7, #32]
   192e4:	2327      	movs	r3, #39	; 0x27
   192e6:	18fb      	adds	r3, r7, r3
   192e8:	2200      	movs	r2, #0
   192ea:	701a      	strb	r2, [r3, #0]
   192ec:	2308      	movs	r3, #8
   192ee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   192f0:	69bb      	ldr	r3, [r7, #24]
   192f2:	1c5a      	adds	r2, r3, #1
   192f4:	61ba      	str	r2, [r7, #24]
   192f6:	005b      	lsls	r3, r3, #1
   192f8:	68fa      	ldr	r2, [r7, #12]
   192fa:	18d2      	adds	r2, r2, r3
   192fc:	2324      	movs	r3, #36	; 0x24
   192fe:	18fb      	adds	r3, r7, r3
   19300:	8812      	ldrh	r2, [r2, #0]
   19302:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   19304:	2324      	movs	r3, #36	; 0x24
   19306:	18fb      	adds	r3, r7, r3
   19308:	881b      	ldrh	r3, [r3, #0]
   1930a:	2b00      	cmp	r3, #0
   1930c:	d100      	bne.n	19310 <create_name+0x1ec>
   1930e:	e0c3      	b.n	19498 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   19310:	2324      	movs	r3, #36	; 0x24
   19312:	18fb      	adds	r3, r7, r3
   19314:	881b      	ldrh	r3, [r3, #0]
   19316:	2b20      	cmp	r3, #32
   19318:	d008      	beq.n	1932c <create_name+0x208>
   1931a:	2324      	movs	r3, #36	; 0x24
   1931c:	18fb      	adds	r3, r7, r3
   1931e:	881b      	ldrh	r3, [r3, #0]
   19320:	2b2e      	cmp	r3, #46	; 0x2e
   19322:	d10c      	bne.n	1933e <create_name+0x21a>
   19324:	69ba      	ldr	r2, [r7, #24]
   19326:	697b      	ldr	r3, [r7, #20]
   19328:	429a      	cmp	r2, r3
   1932a:	d008      	beq.n	1933e <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   1932c:	2326      	movs	r3, #38	; 0x26
   1932e:	18fb      	adds	r3, r7, r3
   19330:	2226      	movs	r2, #38	; 0x26
   19332:	18ba      	adds	r2, r7, r2
   19334:	7812      	ldrb	r2, [r2, #0]
   19336:	2103      	movs	r1, #3
   19338:	430a      	orrs	r2, r1
   1933a:	701a      	strb	r2, [r3, #0]
   1933c:	e0ab      	b.n	19496 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   1933e:	6a3a      	ldr	r2, [r7, #32]
   19340:	69fb      	ldr	r3, [r7, #28]
   19342:	429a      	cmp	r2, r3
   19344:	d203      	bcs.n	1934e <create_name+0x22a>
   19346:	69ba      	ldr	r2, [r7, #24]
   19348:	697b      	ldr	r3, [r7, #20]
   1934a:	429a      	cmp	r2, r3
   1934c:	d12a      	bne.n	193a4 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   1934e:	69fb      	ldr	r3, [r7, #28]
   19350:	2b0b      	cmp	r3, #11
   19352:	d108      	bne.n	19366 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   19354:	2326      	movs	r3, #38	; 0x26
   19356:	18fb      	adds	r3, r7, r3
   19358:	2226      	movs	r2, #38	; 0x26
   1935a:	18ba      	adds	r2, r7, r2
   1935c:	7812      	ldrb	r2, [r2, #0]
   1935e:	2103      	movs	r1, #3
   19360:	430a      	orrs	r2, r1
   19362:	701a      	strb	r2, [r3, #0]
   19364:	e0a9      	b.n	194ba <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   19366:	69ba      	ldr	r2, [r7, #24]
   19368:	697b      	ldr	r3, [r7, #20]
   1936a:	429a      	cmp	r2, r3
   1936c:	d007      	beq.n	1937e <create_name+0x25a>
   1936e:	2326      	movs	r3, #38	; 0x26
   19370:	18fb      	adds	r3, r7, r3
   19372:	2226      	movs	r2, #38	; 0x26
   19374:	18ba      	adds	r2, r7, r2
   19376:	7812      	ldrb	r2, [r2, #0]
   19378:	2103      	movs	r1, #3
   1937a:	430a      	orrs	r2, r1
   1937c:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   1937e:	69ba      	ldr	r2, [r7, #24]
   19380:	697b      	ldr	r3, [r7, #20]
   19382:	429a      	cmp	r2, r3
   19384:	d900      	bls.n	19388 <create_name+0x264>
   19386:	e097      	b.n	194b8 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   19388:	697b      	ldr	r3, [r7, #20]
   1938a:	61bb      	str	r3, [r7, #24]
   1938c:	2308      	movs	r3, #8
   1938e:	623b      	str	r3, [r7, #32]
   19390:	230b      	movs	r3, #11
   19392:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   19394:	2327      	movs	r3, #39	; 0x27
   19396:	18fb      	adds	r3, r7, r3
   19398:	2227      	movs	r2, #39	; 0x27
   1939a:	18ba      	adds	r2, r7, r2
   1939c:	7812      	ldrb	r2, [r2, #0]
   1939e:	0092      	lsls	r2, r2, #2
   193a0:	701a      	strb	r2, [r3, #0]
   193a2:	e078      	b.n	19496 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   193a4:	2324      	movs	r3, #36	; 0x24
   193a6:	18fb      	adds	r3, r7, r3
   193a8:	881b      	ldrh	r3, [r3, #0]
   193aa:	2b7f      	cmp	r3, #127	; 0x7f
   193ac:	d920      	bls.n	193f0 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   193ae:	2324      	movs	r3, #36	; 0x24
   193b0:	18fc      	adds	r4, r7, r3
   193b2:	2324      	movs	r3, #36	; 0x24
   193b4:	18fb      	adds	r3, r7, r3
   193b6:	881b      	ldrh	r3, [r3, #0]
   193b8:	2100      	movs	r1, #0
   193ba:	0018      	movs	r0, r3
   193bc:	4b37      	ldr	r3, [pc, #220]	; (1949c <create_name+0x378>)
   193be:	4798      	blx	r3
   193c0:	0003      	movs	r3, r0
   193c2:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   193c4:	2324      	movs	r3, #36	; 0x24
   193c6:	18fb      	adds	r3, r7, r3
   193c8:	881b      	ldrh	r3, [r3, #0]
   193ca:	2b00      	cmp	r3, #0
   193cc:	d008      	beq.n	193e0 <create_name+0x2bc>
   193ce:	2324      	movs	r3, #36	; 0x24
   193d0:	18fb      	adds	r3, r7, r3
   193d2:	881b      	ldrh	r3, [r3, #0]
   193d4:	3b80      	subs	r3, #128	; 0x80
   193d6:	4a36      	ldr	r2, [pc, #216]	; (194b0 <create_name+0x38c>)
   193d8:	5cd2      	ldrb	r2, [r2, r3]
   193da:	2324      	movs	r3, #36	; 0x24
   193dc:	18fb      	adds	r3, r7, r3
   193de:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   193e0:	2326      	movs	r3, #38	; 0x26
   193e2:	18fb      	adds	r3, r7, r3
   193e4:	2226      	movs	r2, #38	; 0x26
   193e6:	18ba      	adds	r2, r7, r2
   193e8:	7812      	ldrb	r2, [r2, #0]
   193ea:	2102      	movs	r1, #2
   193ec:	430a      	orrs	r2, r1
   193ee:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   193f0:	2324      	movs	r3, #36	; 0x24
   193f2:	18fb      	adds	r3, r7, r3
   193f4:	881b      	ldrh	r3, [r3, #0]
   193f6:	2b00      	cmp	r3, #0
   193f8:	d009      	beq.n	1940e <create_name+0x2ea>
   193fa:	2324      	movs	r3, #36	; 0x24
   193fc:	18fb      	adds	r3, r7, r3
   193fe:	881a      	ldrh	r2, [r3, #0]
   19400:	4b2c      	ldr	r3, [pc, #176]	; (194b4 <create_name+0x390>)
   19402:	0011      	movs	r1, r2
   19404:	0018      	movs	r0, r3
   19406:	4b27      	ldr	r3, [pc, #156]	; (194a4 <create_name+0x380>)
   19408:	4798      	blx	r3
   1940a:	1e03      	subs	r3, r0, #0
   1940c:	d00c      	beq.n	19428 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   1940e:	2324      	movs	r3, #36	; 0x24
   19410:	18fb      	adds	r3, r7, r3
   19412:	225f      	movs	r2, #95	; 0x5f
   19414:	801a      	strh	r2, [r3, #0]
   19416:	2326      	movs	r3, #38	; 0x26
   19418:	18fb      	adds	r3, r7, r3
   1941a:	2226      	movs	r2, #38	; 0x26
   1941c:	18ba      	adds	r2, r7, r2
   1941e:	7812      	ldrb	r2, [r2, #0]
   19420:	2103      	movs	r1, #3
   19422:	430a      	orrs	r2, r1
   19424:	701a      	strb	r2, [r3, #0]
   19426:	e02b      	b.n	19480 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   19428:	2324      	movs	r3, #36	; 0x24
   1942a:	18fb      	adds	r3, r7, r3
   1942c:	881b      	ldrh	r3, [r3, #0]
   1942e:	2b40      	cmp	r3, #64	; 0x40
   19430:	d90d      	bls.n	1944e <create_name+0x32a>
   19432:	2324      	movs	r3, #36	; 0x24
   19434:	18fb      	adds	r3, r7, r3
   19436:	881b      	ldrh	r3, [r3, #0]
   19438:	2b5a      	cmp	r3, #90	; 0x5a
   1943a:	d808      	bhi.n	1944e <create_name+0x32a>
					b |= 2;
   1943c:	2327      	movs	r3, #39	; 0x27
   1943e:	18fb      	adds	r3, r7, r3
   19440:	2227      	movs	r2, #39	; 0x27
   19442:	18ba      	adds	r2, r7, r2
   19444:	7812      	ldrb	r2, [r2, #0]
   19446:	2102      	movs	r1, #2
   19448:	430a      	orrs	r2, r1
   1944a:	701a      	strb	r2, [r3, #0]
   1944c:	e018      	b.n	19480 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   1944e:	2324      	movs	r3, #36	; 0x24
   19450:	18fb      	adds	r3, r7, r3
   19452:	881b      	ldrh	r3, [r3, #0]
   19454:	2b60      	cmp	r3, #96	; 0x60
   19456:	d913      	bls.n	19480 <create_name+0x35c>
   19458:	2324      	movs	r3, #36	; 0x24
   1945a:	18fb      	adds	r3, r7, r3
   1945c:	881b      	ldrh	r3, [r3, #0]
   1945e:	2b7a      	cmp	r3, #122	; 0x7a
   19460:	d80e      	bhi.n	19480 <create_name+0x35c>
						b |= 1; w -= 0x20;
   19462:	2327      	movs	r3, #39	; 0x27
   19464:	18fb      	adds	r3, r7, r3
   19466:	2227      	movs	r2, #39	; 0x27
   19468:	18ba      	adds	r2, r7, r2
   1946a:	7812      	ldrb	r2, [r2, #0]
   1946c:	2101      	movs	r1, #1
   1946e:	430a      	orrs	r2, r1
   19470:	701a      	strb	r2, [r3, #0]
   19472:	2324      	movs	r3, #36	; 0x24
   19474:	18fb      	adds	r3, r7, r3
   19476:	2224      	movs	r2, #36	; 0x24
   19478:	18ba      	adds	r2, r7, r2
   1947a:	8812      	ldrh	r2, [r2, #0]
   1947c:	3a20      	subs	r2, #32
   1947e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   19480:	687b      	ldr	r3, [r7, #4]
   19482:	699a      	ldr	r2, [r3, #24]
   19484:	6a3b      	ldr	r3, [r7, #32]
   19486:	1c59      	adds	r1, r3, #1
   19488:	6239      	str	r1, [r7, #32]
   1948a:	18d3      	adds	r3, r2, r3
   1948c:	2224      	movs	r2, #36	; 0x24
   1948e:	18ba      	adds	r2, r7, r2
   19490:	8812      	ldrh	r2, [r2, #0]
   19492:	b2d2      	uxtb	r2, r2
   19494:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   19496:	e72b      	b.n	192f0 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   19498:	46c0      	nop			; (mov r8, r8)
   1949a:	e00e      	b.n	194ba <create_name+0x396>
   1949c:	0001a85d 	.word	0x0001a85d
   194a0:	00026574 	.word	0x00026574
   194a4:	00017cc7 	.word	0x00017cc7
   194a8:	7fffffff 	.word	0x7fffffff
   194ac:	00017c4d 	.word	0x00017c4d
   194b0:	000265bc 	.word	0x000265bc
   194b4:	00026580 	.word	0x00026580
			if (si > di) break;			/* No extension */
   194b8:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   194ba:	687b      	ldr	r3, [r7, #4]
   194bc:	699b      	ldr	r3, [r3, #24]
   194be:	781b      	ldrb	r3, [r3, #0]
   194c0:	2be5      	cmp	r3, #229	; 0xe5
   194c2:	d103      	bne.n	194cc <create_name+0x3a8>
   194c4:	687b      	ldr	r3, [r7, #4]
   194c6:	699b      	ldr	r3, [r3, #24]
   194c8:	2205      	movs	r2, #5
   194ca:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   194cc:	69fb      	ldr	r3, [r7, #28]
   194ce:	2b08      	cmp	r3, #8
   194d0:	d106      	bne.n	194e0 <create_name+0x3bc>
   194d2:	2327      	movs	r3, #39	; 0x27
   194d4:	18fb      	adds	r3, r7, r3
   194d6:	2227      	movs	r2, #39	; 0x27
   194d8:	18ba      	adds	r2, r7, r2
   194da:	7812      	ldrb	r2, [r2, #0]
   194dc:	0092      	lsls	r2, r2, #2
   194de:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   194e0:	2327      	movs	r3, #39	; 0x27
   194e2:	18fb      	adds	r3, r7, r3
   194e4:	781b      	ldrb	r3, [r3, #0]
   194e6:	220c      	movs	r2, #12
   194e8:	4013      	ands	r3, r2
   194ea:	2b0c      	cmp	r3, #12
   194ec:	d006      	beq.n	194fc <create_name+0x3d8>
   194ee:	2327      	movs	r3, #39	; 0x27
   194f0:	18fb      	adds	r3, r7, r3
   194f2:	781b      	ldrb	r3, [r3, #0]
   194f4:	2203      	movs	r2, #3
   194f6:	4013      	ands	r3, r2
   194f8:	2b03      	cmp	r3, #3
   194fa:	d107      	bne.n	1950c <create_name+0x3e8>
		cf |= NS_LFN;
   194fc:	2326      	movs	r3, #38	; 0x26
   194fe:	18fb      	adds	r3, r7, r3
   19500:	2226      	movs	r2, #38	; 0x26
   19502:	18ba      	adds	r2, r7, r2
   19504:	7812      	ldrb	r2, [r2, #0]
   19506:	2102      	movs	r1, #2
   19508:	430a      	orrs	r2, r1
   1950a:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   1950c:	2326      	movs	r3, #38	; 0x26
   1950e:	18fb      	adds	r3, r7, r3
   19510:	781b      	ldrb	r3, [r3, #0]
   19512:	2202      	movs	r2, #2
   19514:	4013      	ands	r3, r2
   19516:	d11d      	bne.n	19554 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   19518:	2327      	movs	r3, #39	; 0x27
   1951a:	18fb      	adds	r3, r7, r3
   1951c:	781b      	ldrb	r3, [r3, #0]
   1951e:	2203      	movs	r2, #3
   19520:	4013      	ands	r3, r2
   19522:	2b01      	cmp	r3, #1
   19524:	d107      	bne.n	19536 <create_name+0x412>
   19526:	2326      	movs	r3, #38	; 0x26
   19528:	18fb      	adds	r3, r7, r3
   1952a:	2226      	movs	r2, #38	; 0x26
   1952c:	18ba      	adds	r2, r7, r2
   1952e:	7812      	ldrb	r2, [r2, #0]
   19530:	2110      	movs	r1, #16
   19532:	430a      	orrs	r2, r1
   19534:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   19536:	2327      	movs	r3, #39	; 0x27
   19538:	18fb      	adds	r3, r7, r3
   1953a:	781b      	ldrb	r3, [r3, #0]
   1953c:	220c      	movs	r2, #12
   1953e:	4013      	ands	r3, r2
   19540:	2b04      	cmp	r3, #4
   19542:	d107      	bne.n	19554 <create_name+0x430>
   19544:	2326      	movs	r3, #38	; 0x26
   19546:	18fb      	adds	r3, r7, r3
   19548:	2226      	movs	r2, #38	; 0x26
   1954a:	18ba      	adds	r2, r7, r2
   1954c:	7812      	ldrb	r2, [r2, #0]
   1954e:	2108      	movs	r1, #8
   19550:	430a      	orrs	r2, r1
   19552:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   19554:	687b      	ldr	r3, [r7, #4]
   19556:	699b      	ldr	r3, [r3, #24]
   19558:	330b      	adds	r3, #11
   1955a:	2226      	movs	r2, #38	; 0x26
   1955c:	18ba      	adds	r2, r7, r2
   1955e:	7812      	ldrb	r2, [r2, #0]
   19560:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   19562:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   19564:	0018      	movs	r0, r3
   19566:	46bd      	mov	sp, r7
   19568:	b00b      	add	sp, #44	; 0x2c
   1956a:	bd90      	pop	{r4, r7, pc}

0001956c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   1956c:	b590      	push	{r4, r7, lr}
   1956e:	b085      	sub	sp, #20
   19570:	af00      	add	r7, sp, #0
   19572:	6078      	str	r0, [r7, #4]
   19574:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   19576:	683b      	ldr	r3, [r7, #0]
   19578:	781b      	ldrb	r3, [r3, #0]
   1957a:	2b2f      	cmp	r3, #47	; 0x2f
   1957c:	d003      	beq.n	19586 <follow_path+0x1a>
   1957e:	683b      	ldr	r3, [r7, #0]
   19580:	781b      	ldrb	r3, [r3, #0]
   19582:	2b5c      	cmp	r3, #92	; 0x5c
   19584:	d102      	bne.n	1958c <follow_path+0x20>
		path++;
   19586:	683b      	ldr	r3, [r7, #0]
   19588:	3301      	adds	r3, #1
   1958a:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   1958c:	687b      	ldr	r3, [r7, #4]
   1958e:	2200      	movs	r2, #0
   19590:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   19592:	683b      	ldr	r3, [r7, #0]
   19594:	781b      	ldrb	r3, [r3, #0]
   19596:	2b1f      	cmp	r3, #31
   19598:	d80c      	bhi.n	195b4 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   1959a:	230f      	movs	r3, #15
   1959c:	18fc      	adds	r4, r7, r3
   1959e:	687b      	ldr	r3, [r7, #4]
   195a0:	2100      	movs	r1, #0
   195a2:	0018      	movs	r0, r3
   195a4:	4b3c      	ldr	r3, [pc, #240]	; (19698 <follow_path+0x12c>)
   195a6:	4798      	blx	r3
   195a8:	0003      	movs	r3, r0
   195aa:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   195ac:	687b      	ldr	r3, [r7, #4]
   195ae:	2200      	movs	r2, #0
   195b0:	615a      	str	r2, [r3, #20]
   195b2:	e06a      	b.n	1968a <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   195b4:	230f      	movs	r3, #15
   195b6:	18fc      	adds	r4, r7, r3
   195b8:	003a      	movs	r2, r7
   195ba:	687b      	ldr	r3, [r7, #4]
   195bc:	0011      	movs	r1, r2
   195be:	0018      	movs	r0, r3
   195c0:	4b36      	ldr	r3, [pc, #216]	; (1969c <follow_path+0x130>)
   195c2:	4798      	blx	r3
   195c4:	0003      	movs	r3, r0
   195c6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   195c8:	230f      	movs	r3, #15
   195ca:	18fb      	adds	r3, r7, r3
   195cc:	781b      	ldrb	r3, [r3, #0]
   195ce:	2b00      	cmp	r3, #0
   195d0:	d154      	bne.n	1967c <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   195d2:	230f      	movs	r3, #15
   195d4:	18fc      	adds	r4, r7, r3
   195d6:	687b      	ldr	r3, [r7, #4]
   195d8:	0018      	movs	r0, r3
   195da:	4b31      	ldr	r3, [pc, #196]	; (196a0 <follow_path+0x134>)
   195dc:	4798      	blx	r3
   195de:	0003      	movs	r3, r0
   195e0:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   195e2:	687b      	ldr	r3, [r7, #4]
   195e4:	699a      	ldr	r2, [r3, #24]
   195e6:	230e      	movs	r3, #14
   195e8:	18fb      	adds	r3, r7, r3
   195ea:	7ad2      	ldrb	r2, [r2, #11]
   195ec:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   195ee:	230f      	movs	r3, #15
   195f0:	18fb      	adds	r3, r7, r3
   195f2:	781b      	ldrb	r3, [r3, #0]
   195f4:	2b00      	cmp	r3, #0
   195f6:	d00f      	beq.n	19618 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   195f8:	230f      	movs	r3, #15
   195fa:	18fb      	adds	r3, r7, r3
   195fc:	781b      	ldrb	r3, [r3, #0]
   195fe:	2b04      	cmp	r3, #4
   19600:	d13e      	bne.n	19680 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   19602:	230e      	movs	r3, #14
   19604:	18fb      	adds	r3, r7, r3
   19606:	781b      	ldrb	r3, [r3, #0]
   19608:	2204      	movs	r2, #4
   1960a:	4013      	ands	r3, r2
   1960c:	d13a      	bne.n	19684 <follow_path+0x118>
   1960e:	230f      	movs	r3, #15
   19610:	18fb      	adds	r3, r7, r3
   19612:	2205      	movs	r2, #5
   19614:	701a      	strb	r2, [r3, #0]
				}
				break;
   19616:	e035      	b.n	19684 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   19618:	230e      	movs	r3, #14
   1961a:	18fb      	adds	r3, r7, r3
   1961c:	781b      	ldrb	r3, [r3, #0]
   1961e:	2204      	movs	r2, #4
   19620:	4013      	ands	r3, r2
   19622:	d131      	bne.n	19688 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   19624:	687b      	ldr	r3, [r7, #4]
   19626:	695b      	ldr	r3, [r3, #20]
   19628:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   1962a:	68bb      	ldr	r3, [r7, #8]
   1962c:	330b      	adds	r3, #11
   1962e:	781b      	ldrb	r3, [r3, #0]
   19630:	001a      	movs	r2, r3
   19632:	2310      	movs	r3, #16
   19634:	4013      	ands	r3, r2
   19636:	d104      	bne.n	19642 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   19638:	230f      	movs	r3, #15
   1963a:	18fb      	adds	r3, r7, r3
   1963c:	2205      	movs	r2, #5
   1963e:	701a      	strb	r2, [r3, #0]
   19640:	e023      	b.n	1968a <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   19642:	68bb      	ldr	r3, [r7, #8]
   19644:	3315      	adds	r3, #21
   19646:	781b      	ldrb	r3, [r3, #0]
   19648:	021b      	lsls	r3, r3, #8
   1964a:	b21a      	sxth	r2, r3
   1964c:	68bb      	ldr	r3, [r7, #8]
   1964e:	3314      	adds	r3, #20
   19650:	781b      	ldrb	r3, [r3, #0]
   19652:	b21b      	sxth	r3, r3
   19654:	4313      	orrs	r3, r2
   19656:	b21b      	sxth	r3, r3
   19658:	b29b      	uxth	r3, r3
   1965a:	041b      	lsls	r3, r3, #16
   1965c:	68ba      	ldr	r2, [r7, #8]
   1965e:	321b      	adds	r2, #27
   19660:	7812      	ldrb	r2, [r2, #0]
   19662:	0212      	lsls	r2, r2, #8
   19664:	b211      	sxth	r1, r2
   19666:	68ba      	ldr	r2, [r7, #8]
   19668:	321a      	adds	r2, #26
   1966a:	7812      	ldrb	r2, [r2, #0]
   1966c:	b212      	sxth	r2, r2
   1966e:	430a      	orrs	r2, r1
   19670:	b212      	sxth	r2, r2
   19672:	b292      	uxth	r2, r2
   19674:	431a      	orrs	r2, r3
   19676:	687b      	ldr	r3, [r7, #4]
   19678:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   1967a:	e79b      	b.n	195b4 <follow_path+0x48>
			if (res != FR_OK) break;
   1967c:	46c0      	nop			; (mov r8, r8)
   1967e:	e004      	b.n	1968a <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   19680:	46c0      	nop			; (mov r8, r8)
   19682:	e002      	b.n	1968a <follow_path+0x11e>
				break;
   19684:	46c0      	nop			; (mov r8, r8)
   19686:	e000      	b.n	1968a <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   19688:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   1968a:	230f      	movs	r3, #15
   1968c:	18fb      	adds	r3, r7, r3
   1968e:	781b      	ldrb	r3, [r3, #0]
}
   19690:	0018      	movs	r0, r3
   19692:	46bd      	mov	sp, r7
   19694:	b005      	add	sp, #20
   19696:	bd90      	pop	{r4, r7, pc}
   19698:	0001853d 	.word	0x0001853d
   1969c:	00019125 	.word	0x00019125
   196a0:	00018bc1 	.word	0x00018bc1

000196a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   196a4:	b590      	push	{r4, r7, lr}
   196a6:	b083      	sub	sp, #12
   196a8:	af00      	add	r7, sp, #0
   196aa:	6078      	str	r0, [r7, #4]
   196ac:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   196ae:	687b      	ldr	r3, [r7, #4]
   196b0:	7858      	ldrb	r0, [r3, #1]
   196b2:	687b      	ldr	r3, [r7, #4]
   196b4:	3330      	adds	r3, #48	; 0x30
   196b6:	0019      	movs	r1, r3
   196b8:	683a      	ldr	r2, [r7, #0]
   196ba:	2301      	movs	r3, #1
   196bc:	4c2a      	ldr	r4, [pc, #168]	; (19768 <check_fs+0xc4>)
   196be:	47a0      	blx	r4
   196c0:	1e03      	subs	r3, r0, #0
   196c2:	d001      	beq.n	196c8 <check_fs+0x24>
		return 3;
   196c4:	2303      	movs	r3, #3
   196c6:	e04b      	b.n	19760 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   196c8:	687b      	ldr	r3, [r7, #4]
   196ca:	4a28      	ldr	r2, [pc, #160]	; (1976c <check_fs+0xc8>)
   196cc:	4694      	mov	ip, r2
   196ce:	4463      	add	r3, ip
   196d0:	3301      	adds	r3, #1
   196d2:	781b      	ldrb	r3, [r3, #0]
   196d4:	021b      	lsls	r3, r3, #8
   196d6:	b21a      	sxth	r2, r3
   196d8:	687b      	ldr	r3, [r7, #4]
   196da:	4924      	ldr	r1, [pc, #144]	; (1976c <check_fs+0xc8>)
   196dc:	5c5b      	ldrb	r3, [r3, r1]
   196de:	b21b      	sxth	r3, r3
   196e0:	4313      	orrs	r3, r2
   196e2:	b21b      	sxth	r3, r3
   196e4:	4a22      	ldr	r2, [pc, #136]	; (19770 <check_fs+0xcc>)
   196e6:	4293      	cmp	r3, r2
   196e8:	d001      	beq.n	196ee <check_fs+0x4a>
		return 2;
   196ea:	2302      	movs	r3, #2
   196ec:	e038      	b.n	19760 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   196ee:	687b      	ldr	r3, [r7, #4]
   196f0:	3366      	adds	r3, #102	; 0x66
   196f2:	3303      	adds	r3, #3
   196f4:	781b      	ldrb	r3, [r3, #0]
   196f6:	061a      	lsls	r2, r3, #24
   196f8:	687b      	ldr	r3, [r7, #4]
   196fa:	3366      	adds	r3, #102	; 0x66
   196fc:	3302      	adds	r3, #2
   196fe:	781b      	ldrb	r3, [r3, #0]
   19700:	041b      	lsls	r3, r3, #16
   19702:	4313      	orrs	r3, r2
   19704:	687a      	ldr	r2, [r7, #4]
   19706:	3266      	adds	r2, #102	; 0x66
   19708:	3201      	adds	r2, #1
   1970a:	7812      	ldrb	r2, [r2, #0]
   1970c:	0212      	lsls	r2, r2, #8
   1970e:	4313      	orrs	r3, r2
   19710:	687a      	ldr	r2, [r7, #4]
   19712:	2166      	movs	r1, #102	; 0x66
   19714:	5c52      	ldrb	r2, [r2, r1]
   19716:	4313      	orrs	r3, r2
   19718:	021b      	lsls	r3, r3, #8
   1971a:	0a1b      	lsrs	r3, r3, #8
   1971c:	4a15      	ldr	r2, [pc, #84]	; (19774 <check_fs+0xd0>)
   1971e:	4293      	cmp	r3, r2
   19720:	d101      	bne.n	19726 <check_fs+0x82>
		return 0;
   19722:	2300      	movs	r3, #0
   19724:	e01c      	b.n	19760 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   19726:	687b      	ldr	r3, [r7, #4]
   19728:	3382      	adds	r3, #130	; 0x82
   1972a:	3303      	adds	r3, #3
   1972c:	781b      	ldrb	r3, [r3, #0]
   1972e:	061a      	lsls	r2, r3, #24
   19730:	687b      	ldr	r3, [r7, #4]
   19732:	3382      	adds	r3, #130	; 0x82
   19734:	3302      	adds	r3, #2
   19736:	781b      	ldrb	r3, [r3, #0]
   19738:	041b      	lsls	r3, r3, #16
   1973a:	4313      	orrs	r3, r2
   1973c:	687a      	ldr	r2, [r7, #4]
   1973e:	3282      	adds	r2, #130	; 0x82
   19740:	3201      	adds	r2, #1
   19742:	7812      	ldrb	r2, [r2, #0]
   19744:	0212      	lsls	r2, r2, #8
   19746:	4313      	orrs	r3, r2
   19748:	687a      	ldr	r2, [r7, #4]
   1974a:	2182      	movs	r1, #130	; 0x82
   1974c:	5c52      	ldrb	r2, [r2, r1]
   1974e:	4313      	orrs	r3, r2
   19750:	021b      	lsls	r3, r3, #8
   19752:	0a1b      	lsrs	r3, r3, #8
   19754:	4a07      	ldr	r2, [pc, #28]	; (19774 <check_fs+0xd0>)
   19756:	4293      	cmp	r3, r2
   19758:	d101      	bne.n	1975e <check_fs+0xba>
		return 0;
   1975a:	2300      	movs	r3, #0
   1975c:	e000      	b.n	19760 <check_fs+0xbc>

	return 1;
   1975e:	2301      	movs	r3, #1
}
   19760:	0018      	movs	r0, r3
   19762:	46bd      	mov	sp, r7
   19764:	b003      	add	sp, #12
   19766:	bd90      	pop	{r4, r7, pc}
   19768:	0001790d 	.word	0x0001790d
   1976c:	0000022e 	.word	0x0000022e
   19770:	ffffaa55 	.word	0xffffaa55
   19774:	00544146 	.word	0x00544146

00019778 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   19778:	b590      	push	{r4, r7, lr}
   1977a:	b093      	sub	sp, #76	; 0x4c
   1977c:	af00      	add	r7, sp, #0
   1977e:	60f8      	str	r0, [r7, #12]
   19780:	60b9      	str	r1, [r7, #8]
   19782:	1dfb      	adds	r3, r7, #7
   19784:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   19786:	68fb      	ldr	r3, [r7, #12]
   19788:	681b      	ldr	r3, [r3, #0]
   1978a:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   1978c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1978e:	781b      	ldrb	r3, [r3, #0]
   19790:	3b30      	subs	r3, #48	; 0x30
   19792:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   19794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19796:	2b09      	cmp	r3, #9
   19798:	d80b      	bhi.n	197b2 <chk_mounted+0x3a>
   1979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1979c:	3301      	adds	r3, #1
   1979e:	781b      	ldrb	r3, [r3, #0]
   197a0:	2b3a      	cmp	r3, #58	; 0x3a
   197a2:	d106      	bne.n	197b2 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   197a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   197a6:	3302      	adds	r3, #2
   197a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   197aa:	68fb      	ldr	r3, [r7, #12]
   197ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   197ae:	601a      	str	r2, [r3, #0]
   197b0:	e001      	b.n	197b6 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   197b2:	2300      	movs	r3, #0
   197b4:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   197b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   197b8:	2b07      	cmp	r3, #7
   197ba:	d901      	bls.n	197c0 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   197bc:	230b      	movs	r3, #11
   197be:	e2af      	b.n	19d20 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   197c0:	4bc5      	ldr	r3, [pc, #788]	; (19ad8 <chk_mounted+0x360>)
   197c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   197c4:	0092      	lsls	r2, r2, #2
   197c6:	58d3      	ldr	r3, [r2, r3]
   197c8:	62bb      	str	r3, [r7, #40]	; 0x28
   197ca:	68bb      	ldr	r3, [r7, #8]
   197cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   197ce:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   197d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   197d2:	2b00      	cmp	r3, #0
   197d4:	d101      	bne.n	197da <chk_mounted+0x62>
   197d6:	230c      	movs	r3, #12
   197d8:	e2a2      	b.n	19d20 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   197da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   197dc:	781b      	ldrb	r3, [r3, #0]
   197de:	2b00      	cmp	r3, #0
   197e0:	d01c      	beq.n	1981c <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   197e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   197e4:	785b      	ldrb	r3, [r3, #1]
   197e6:	2227      	movs	r2, #39	; 0x27
   197e8:	18bc      	adds	r4, r7, r2
   197ea:	0018      	movs	r0, r3
   197ec:	4bbb      	ldr	r3, [pc, #748]	; (19adc <chk_mounted+0x364>)
   197ee:	4798      	blx	r3
   197f0:	0003      	movs	r3, r0
   197f2:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   197f4:	2327      	movs	r3, #39	; 0x27
   197f6:	18fb      	adds	r3, r7, r3
   197f8:	781b      	ldrb	r3, [r3, #0]
   197fa:	2201      	movs	r2, #1
   197fc:	4013      	ands	r3, r2
   197fe:	d10d      	bne.n	1981c <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   19800:	1dfb      	adds	r3, r7, #7
   19802:	781b      	ldrb	r3, [r3, #0]
   19804:	2b00      	cmp	r3, #0
   19806:	d007      	beq.n	19818 <chk_mounted+0xa0>
   19808:	2327      	movs	r3, #39	; 0x27
   1980a:	18fb      	adds	r3, r7, r3
   1980c:	781b      	ldrb	r3, [r3, #0]
   1980e:	2204      	movs	r2, #4
   19810:	4013      	ands	r3, r2
   19812:	d001      	beq.n	19818 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   19814:	230a      	movs	r3, #10
   19816:	e283      	b.n	19d20 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   19818:	2300      	movs	r3, #0
   1981a:	e281      	b.n	19d20 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   1981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1981e:	2200      	movs	r2, #0
   19820:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   19822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19824:	b2da      	uxtb	r2, r3
   19826:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19828:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   1982a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1982c:	785b      	ldrb	r3, [r3, #1]
   1982e:	2227      	movs	r2, #39	; 0x27
   19830:	18bc      	adds	r4, r7, r2
   19832:	0018      	movs	r0, r3
   19834:	4baa      	ldr	r3, [pc, #680]	; (19ae0 <chk_mounted+0x368>)
   19836:	4798      	blx	r3
   19838:	0003      	movs	r3, r0
   1983a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   1983c:	2327      	movs	r3, #39	; 0x27
   1983e:	18fb      	adds	r3, r7, r3
   19840:	781b      	ldrb	r3, [r3, #0]
   19842:	2201      	movs	r2, #1
   19844:	4013      	ands	r3, r2
   19846:	d001      	beq.n	1984c <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   19848:	2303      	movs	r3, #3
   1984a:	e269      	b.n	19d20 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1984c:	1dfb      	adds	r3, r7, #7
   1984e:	781b      	ldrb	r3, [r3, #0]
   19850:	2b00      	cmp	r3, #0
   19852:	d007      	beq.n	19864 <chk_mounted+0xec>
   19854:	2327      	movs	r3, #39	; 0x27
   19856:	18fb      	adds	r3, r7, r3
   19858:	781b      	ldrb	r3, [r3, #0]
   1985a:	2204      	movs	r2, #4
   1985c:	4013      	ands	r3, r2
   1985e:	d001      	beq.n	19864 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   19860:	230a      	movs	r3, #10
   19862:	e25d      	b.n	19d20 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   19864:	2300      	movs	r3, #0
   19866:	63fb      	str	r3, [r7, #60]	; 0x3c
   19868:	2347      	movs	r3, #71	; 0x47
   1986a:	18fc      	adds	r4, r7, r3
   1986c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1986e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19870:	0011      	movs	r1, r2
   19872:	0018      	movs	r0, r3
   19874:	4b9b      	ldr	r3, [pc, #620]	; (19ae4 <chk_mounted+0x36c>)
   19876:	4798      	blx	r3
   19878:	0003      	movs	r3, r0
   1987a:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   1987c:	2347      	movs	r3, #71	; 0x47
   1987e:	18fb      	adds	r3, r7, r3
   19880:	781b      	ldrb	r3, [r3, #0]
   19882:	2b01      	cmp	r3, #1
   19884:	d13b      	bne.n	198fe <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   19886:	2346      	movs	r3, #70	; 0x46
   19888:	18fb      	adds	r3, r7, r3
   1988a:	2200      	movs	r2, #0
   1988c:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   1988e:	2346      	movs	r3, #70	; 0x46
   19890:	18fb      	adds	r3, r7, r3
   19892:	781b      	ldrb	r3, [r3, #0]
   19894:	2b00      	cmp	r3, #0
   19896:	d006      	beq.n	198a6 <chk_mounted+0x12e>
   19898:	2346      	movs	r3, #70	; 0x46
   1989a:	18fb      	adds	r3, r7, r3
   1989c:	781a      	ldrb	r2, [r3, #0]
   1989e:	2346      	movs	r3, #70	; 0x46
   198a0:	18fb      	adds	r3, r7, r3
   198a2:	3a01      	subs	r2, #1
   198a4:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   198a6:	2346      	movs	r3, #70	; 0x46
   198a8:	18fb      	adds	r3, r7, r3
   198aa:	781b      	ldrb	r3, [r3, #0]
   198ac:	011b      	lsls	r3, r3, #4
   198ae:	33bf      	adds	r3, #191	; 0xbf
   198b0:	33ff      	adds	r3, #255	; 0xff
   198b2:	3330      	adds	r3, #48	; 0x30
   198b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   198b6:	18d3      	adds	r3, r2, r3
   198b8:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   198ba:	6a3b      	ldr	r3, [r7, #32]
   198bc:	3304      	adds	r3, #4
   198be:	781b      	ldrb	r3, [r3, #0]
   198c0:	2b00      	cmp	r3, #0
   198c2:	d01c      	beq.n	198fe <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   198c4:	6a3b      	ldr	r3, [r7, #32]
   198c6:	330b      	adds	r3, #11
   198c8:	781b      	ldrb	r3, [r3, #0]
   198ca:	061a      	lsls	r2, r3, #24
   198cc:	6a3b      	ldr	r3, [r7, #32]
   198ce:	330a      	adds	r3, #10
   198d0:	781b      	ldrb	r3, [r3, #0]
   198d2:	041b      	lsls	r3, r3, #16
   198d4:	4313      	orrs	r3, r2
   198d6:	6a3a      	ldr	r2, [r7, #32]
   198d8:	3209      	adds	r2, #9
   198da:	7812      	ldrb	r2, [r2, #0]
   198dc:	0212      	lsls	r2, r2, #8
   198de:	4313      	orrs	r3, r2
   198e0:	6a3a      	ldr	r2, [r7, #32]
   198e2:	3208      	adds	r2, #8
   198e4:	7812      	ldrb	r2, [r2, #0]
   198e6:	4313      	orrs	r3, r2
   198e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   198ea:	2347      	movs	r3, #71	; 0x47
   198ec:	18fc      	adds	r4, r7, r3
   198ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   198f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   198f2:	0011      	movs	r1, r2
   198f4:	0018      	movs	r0, r3
   198f6:	4b7b      	ldr	r3, [pc, #492]	; (19ae4 <chk_mounted+0x36c>)
   198f8:	4798      	blx	r3
   198fa:	0003      	movs	r3, r0
   198fc:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   198fe:	2347      	movs	r3, #71	; 0x47
   19900:	18fb      	adds	r3, r7, r3
   19902:	781b      	ldrb	r3, [r3, #0]
   19904:	2b03      	cmp	r3, #3
   19906:	d101      	bne.n	1990c <chk_mounted+0x194>
   19908:	2301      	movs	r3, #1
   1990a:	e209      	b.n	19d20 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   1990c:	2347      	movs	r3, #71	; 0x47
   1990e:	18fb      	adds	r3, r7, r3
   19910:	781b      	ldrb	r3, [r3, #0]
   19912:	2b00      	cmp	r3, #0
   19914:	d001      	beq.n	1991a <chk_mounted+0x1a2>
   19916:	230d      	movs	r3, #13
   19918:	e202      	b.n	19d20 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   1991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1991c:	223c      	movs	r2, #60	; 0x3c
   1991e:	5c9b      	ldrb	r3, [r3, r2]
   19920:	021b      	lsls	r3, r3, #8
   19922:	b21a      	sxth	r2, r3
   19924:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19926:	213b      	movs	r1, #59	; 0x3b
   19928:	5c5b      	ldrb	r3, [r3, r1]
   1992a:	b21b      	sxth	r3, r3
   1992c:	4313      	orrs	r3, r2
   1992e:	b21a      	sxth	r2, r3
   19930:	2380      	movs	r3, #128	; 0x80
   19932:	009b      	lsls	r3, r3, #2
   19934:	429a      	cmp	r2, r3
   19936:	d001      	beq.n	1993c <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   19938:	230d      	movs	r3, #13
   1993a:	e1f1      	b.n	19d20 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   1993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1993e:	2247      	movs	r2, #71	; 0x47
   19940:	5c9b      	ldrb	r3, [r3, r2]
   19942:	021b      	lsls	r3, r3, #8
   19944:	b21a      	sxth	r2, r3
   19946:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19948:	2146      	movs	r1, #70	; 0x46
   1994a:	5c5b      	ldrb	r3, [r3, r1]
   1994c:	b21b      	sxth	r3, r3
   1994e:	4313      	orrs	r3, r2
   19950:	b21b      	sxth	r3, r3
   19952:	b29b      	uxth	r3, r3
   19954:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   19956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19958:	2b00      	cmp	r3, #0
   1995a:	d112      	bne.n	19982 <chk_mounted+0x20a>
   1995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1995e:	2257      	movs	r2, #87	; 0x57
   19960:	5c9b      	ldrb	r3, [r3, r2]
   19962:	061a      	lsls	r2, r3, #24
   19964:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19966:	2156      	movs	r1, #86	; 0x56
   19968:	5c5b      	ldrb	r3, [r3, r1]
   1996a:	041b      	lsls	r3, r3, #16
   1996c:	4313      	orrs	r3, r2
   1996e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19970:	2155      	movs	r1, #85	; 0x55
   19972:	5c52      	ldrb	r2, [r2, r1]
   19974:	0212      	lsls	r2, r2, #8
   19976:	4313      	orrs	r3, r2
   19978:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1997a:	2154      	movs	r1, #84	; 0x54
   1997c:	5c52      	ldrb	r2, [r2, r1]
   1997e:	4313      	orrs	r3, r2
   19980:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   19982:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19984:	6bba      	ldr	r2, [r7, #56]	; 0x38
   19986:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   19988:	231f      	movs	r3, #31
   1998a:	18fb      	adds	r3, r7, r3
   1998c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1998e:	2140      	movs	r1, #64	; 0x40
   19990:	5c52      	ldrb	r2, [r2, r1]
   19992:	701a      	strb	r2, [r3, #0]
   19994:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19996:	221f      	movs	r2, #31
   19998:	18ba      	adds	r2, r7, r2
   1999a:	7812      	ldrb	r2, [r2, #0]
   1999c:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   1999e:	231f      	movs	r3, #31
   199a0:	18fb      	adds	r3, r7, r3
   199a2:	781b      	ldrb	r3, [r3, #0]
   199a4:	2b01      	cmp	r3, #1
   199a6:	d006      	beq.n	199b6 <chk_mounted+0x23e>
   199a8:	231f      	movs	r3, #31
   199aa:	18fb      	adds	r3, r7, r3
   199ac:	781b      	ldrb	r3, [r3, #0]
   199ae:	2b02      	cmp	r3, #2
   199b0:	d001      	beq.n	199b6 <chk_mounted+0x23e>
   199b2:	230d      	movs	r3, #13
   199b4:	e1b4      	b.n	19d20 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   199b6:	231f      	movs	r3, #31
   199b8:	18fb      	adds	r3, r7, r3
   199ba:	781a      	ldrb	r2, [r3, #0]
   199bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   199be:	4353      	muls	r3, r2
   199c0:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   199c2:	231f      	movs	r3, #31
   199c4:	18fb      	adds	r3, r7, r3
   199c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   199c8:	213d      	movs	r1, #61	; 0x3d
   199ca:	5c52      	ldrb	r2, [r2, r1]
   199cc:	701a      	strb	r2, [r3, #0]
   199ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   199d0:	221f      	movs	r2, #31
   199d2:	18ba      	adds	r2, r7, r2
   199d4:	7812      	ldrb	r2, [r2, #0]
   199d6:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   199d8:	231f      	movs	r3, #31
   199da:	18fb      	adds	r3, r7, r3
   199dc:	781b      	ldrb	r3, [r3, #0]
   199de:	2b00      	cmp	r3, #0
   199e0:	d008      	beq.n	199f4 <chk_mounted+0x27c>
   199e2:	231f      	movs	r3, #31
   199e4:	18fb      	adds	r3, r7, r3
   199e6:	781b      	ldrb	r3, [r3, #0]
   199e8:	221f      	movs	r2, #31
   199ea:	18ba      	adds	r2, r7, r2
   199ec:	7812      	ldrb	r2, [r2, #0]
   199ee:	3a01      	subs	r2, #1
   199f0:	4013      	ands	r3, r2
   199f2:	d001      	beq.n	199f8 <chk_mounted+0x280>
   199f4:	230d      	movs	r3, #13
   199f6:	e193      	b.n	19d20 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   199f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   199fa:	2242      	movs	r2, #66	; 0x42
   199fc:	5c9b      	ldrb	r3, [r3, r2]
   199fe:	021b      	lsls	r3, r3, #8
   19a00:	b21a      	sxth	r2, r3
   19a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a04:	2141      	movs	r1, #65	; 0x41
   19a06:	5c5b      	ldrb	r3, [r3, r1]
   19a08:	b21b      	sxth	r3, r3
   19a0a:	4313      	orrs	r3, r2
   19a0c:	b21b      	sxth	r3, r3
   19a0e:	b29a      	uxth	r2, r3
   19a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a12:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   19a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a16:	891b      	ldrh	r3, [r3, #8]
   19a18:	220f      	movs	r2, #15
   19a1a:	4013      	ands	r3, r2
   19a1c:	b29b      	uxth	r3, r3
   19a1e:	2b00      	cmp	r3, #0
   19a20:	d001      	beq.n	19a26 <chk_mounted+0x2ae>
   19a22:	230d      	movs	r3, #13
   19a24:	e17c      	b.n	19d20 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   19a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a28:	2244      	movs	r2, #68	; 0x44
   19a2a:	5c9b      	ldrb	r3, [r3, r2]
   19a2c:	021b      	lsls	r3, r3, #8
   19a2e:	b21a      	sxth	r2, r3
   19a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a32:	2143      	movs	r1, #67	; 0x43
   19a34:	5c5b      	ldrb	r3, [r3, r1]
   19a36:	b21b      	sxth	r3, r3
   19a38:	4313      	orrs	r3, r2
   19a3a:	b21b      	sxth	r3, r3
   19a3c:	b29b      	uxth	r3, r3
   19a3e:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   19a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19a42:	2b00      	cmp	r3, #0
   19a44:	d112      	bne.n	19a6c <chk_mounted+0x2f4>
   19a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a48:	2253      	movs	r2, #83	; 0x53
   19a4a:	5c9b      	ldrb	r3, [r3, r2]
   19a4c:	061a      	lsls	r2, r3, #24
   19a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a50:	2152      	movs	r1, #82	; 0x52
   19a52:	5c5b      	ldrb	r3, [r3, r1]
   19a54:	041b      	lsls	r3, r3, #16
   19a56:	4313      	orrs	r3, r2
   19a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19a5a:	2151      	movs	r1, #81	; 0x51
   19a5c:	5c52      	ldrb	r2, [r2, r1]
   19a5e:	0212      	lsls	r2, r2, #8
   19a60:	4313      	orrs	r3, r2
   19a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19a64:	2150      	movs	r1, #80	; 0x50
   19a66:	5c52      	ldrb	r2, [r2, r1]
   19a68:	4313      	orrs	r3, r2
   19a6a:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   19a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a6e:	223f      	movs	r2, #63	; 0x3f
   19a70:	5c9b      	ldrb	r3, [r3, r2]
   19a72:	021b      	lsls	r3, r3, #8
   19a74:	b21a      	sxth	r2, r3
   19a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a78:	213e      	movs	r1, #62	; 0x3e
   19a7a:	5c5b      	ldrb	r3, [r3, r1]
   19a7c:	b21b      	sxth	r3, r3
   19a7e:	4313      	orrs	r3, r2
   19a80:	b21a      	sxth	r2, r3
   19a82:	231c      	movs	r3, #28
   19a84:	18fb      	adds	r3, r7, r3
   19a86:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   19a88:	231c      	movs	r3, #28
   19a8a:	18fb      	adds	r3, r7, r3
   19a8c:	881b      	ldrh	r3, [r3, #0]
   19a8e:	2b00      	cmp	r3, #0
   19a90:	d101      	bne.n	19a96 <chk_mounted+0x31e>
   19a92:	230d      	movs	r3, #13
   19a94:	e144      	b.n	19d20 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   19a96:	231c      	movs	r3, #28
   19a98:	18fb      	adds	r3, r7, r3
   19a9a:	881a      	ldrh	r2, [r3, #0]
   19a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19a9e:	18d3      	adds	r3, r2, r3
   19aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19aa2:	8912      	ldrh	r2, [r2, #8]
   19aa4:	0912      	lsrs	r2, r2, #4
   19aa6:	b292      	uxth	r2, r2
   19aa8:	189b      	adds	r3, r3, r2
   19aaa:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   19aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   19aae:	69bb      	ldr	r3, [r7, #24]
   19ab0:	429a      	cmp	r2, r3
   19ab2:	d201      	bcs.n	19ab8 <chk_mounted+0x340>
   19ab4:	230d      	movs	r3, #13
   19ab6:	e133      	b.n	19d20 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   19ab8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   19aba:	69bb      	ldr	r3, [r7, #24]
   19abc:	1ad2      	subs	r2, r2, r3
   19abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19ac0:	789b      	ldrb	r3, [r3, #2]
   19ac2:	0019      	movs	r1, r3
   19ac4:	4b08      	ldr	r3, [pc, #32]	; (19ae8 <chk_mounted+0x370>)
   19ac6:	0010      	movs	r0, r2
   19ac8:	4798      	blx	r3
   19aca:	0003      	movs	r3, r0
   19acc:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   19ace:	697b      	ldr	r3, [r7, #20]
   19ad0:	2b00      	cmp	r3, #0
   19ad2:	d10b      	bne.n	19aec <chk_mounted+0x374>
   19ad4:	230d      	movs	r3, #13
   19ad6:	e123      	b.n	19d20 <chk_mounted+0x5a8>
   19ad8:	20004170 	.word	0x20004170
   19adc:	000178d5 	.word	0x000178d5
   19ae0:	00017851 	.word	0x00017851
   19ae4:	000196a5 	.word	0x000196a5
   19ae8:	0001f0d1 	.word	0x0001f0d1
	fmt = FS_FAT12;
   19aec:	2347      	movs	r3, #71	; 0x47
   19aee:	18fb      	adds	r3, r7, r3
   19af0:	2201      	movs	r2, #1
   19af2:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   19af4:	697b      	ldr	r3, [r7, #20]
   19af6:	4a8c      	ldr	r2, [pc, #560]	; (19d28 <chk_mounted+0x5b0>)
   19af8:	4293      	cmp	r3, r2
   19afa:	d903      	bls.n	19b04 <chk_mounted+0x38c>
   19afc:	2347      	movs	r3, #71	; 0x47
   19afe:	18fb      	adds	r3, r7, r3
   19b00:	2202      	movs	r2, #2
   19b02:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   19b04:	697b      	ldr	r3, [r7, #20]
   19b06:	4a89      	ldr	r2, [pc, #548]	; (19d2c <chk_mounted+0x5b4>)
   19b08:	4293      	cmp	r3, r2
   19b0a:	d903      	bls.n	19b14 <chk_mounted+0x39c>
   19b0c:	2347      	movs	r3, #71	; 0x47
   19b0e:	18fb      	adds	r3, r7, r3
   19b10:	2203      	movs	r2, #3
   19b12:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   19b14:	697b      	ldr	r3, [r7, #20]
   19b16:	1c9a      	adds	r2, r3, #2
   19b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b1a:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   19b1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   19b1e:	69bb      	ldr	r3, [r7, #24]
   19b20:	18d2      	adds	r2, r2, r3
   19b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b24:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   19b26:	231c      	movs	r3, #28
   19b28:	18fb      	adds	r3, r7, r3
   19b2a:	881a      	ldrh	r2, [r3, #0]
   19b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19b2e:	18d2      	adds	r2, r2, r3
   19b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b32:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   19b34:	2347      	movs	r3, #71	; 0x47
   19b36:	18fb      	adds	r3, r7, r3
   19b38:	781b      	ldrb	r3, [r3, #0]
   19b3a:	2b03      	cmp	r3, #3
   19b3c:	d11e      	bne.n	19b7c <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   19b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b40:	891b      	ldrh	r3, [r3, #8]
   19b42:	2b00      	cmp	r3, #0
   19b44:	d001      	beq.n	19b4a <chk_mounted+0x3d2>
   19b46:	230d      	movs	r3, #13
   19b48:	e0ea      	b.n	19d20 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   19b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b4c:	225f      	movs	r2, #95	; 0x5f
   19b4e:	5c9b      	ldrb	r3, [r3, r2]
   19b50:	061a      	lsls	r2, r3, #24
   19b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b54:	215e      	movs	r1, #94	; 0x5e
   19b56:	5c5b      	ldrb	r3, [r3, r1]
   19b58:	041b      	lsls	r3, r3, #16
   19b5a:	4313      	orrs	r3, r2
   19b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19b5e:	215d      	movs	r1, #93	; 0x5d
   19b60:	5c52      	ldrb	r2, [r2, r1]
   19b62:	0212      	lsls	r2, r2, #8
   19b64:	4313      	orrs	r3, r2
   19b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19b68:	215c      	movs	r1, #92	; 0x5c
   19b6a:	5c52      	ldrb	r2, [r2, r1]
   19b6c:	431a      	orrs	r2, r3
   19b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b70:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   19b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b74:	699b      	ldr	r3, [r3, #24]
   19b76:	009b      	lsls	r3, r3, #2
   19b78:	633b      	str	r3, [r7, #48]	; 0x30
   19b7a:	e020      	b.n	19bbe <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   19b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b7e:	891b      	ldrh	r3, [r3, #8]
   19b80:	2b00      	cmp	r3, #0
   19b82:	d101      	bne.n	19b88 <chk_mounted+0x410>
   19b84:	230d      	movs	r3, #13
   19b86:	e0cb      	b.n	19d20 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   19b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b8a:	6a1a      	ldr	r2, [r3, #32]
   19b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19b8e:	18d2      	adds	r2, r2, r3
   19b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b92:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   19b94:	2347      	movs	r3, #71	; 0x47
   19b96:	18fb      	adds	r3, r7, r3
   19b98:	781b      	ldrb	r3, [r3, #0]
   19b9a:	2b02      	cmp	r3, #2
   19b9c:	d103      	bne.n	19ba6 <chk_mounted+0x42e>
   19b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19ba0:	699b      	ldr	r3, [r3, #24]
   19ba2:	005b      	lsls	r3, r3, #1
   19ba4:	e00a      	b.n	19bbc <chk_mounted+0x444>
   19ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19ba8:	699a      	ldr	r2, [r3, #24]
   19baa:	0013      	movs	r3, r2
   19bac:	005b      	lsls	r3, r3, #1
   19bae:	189b      	adds	r3, r3, r2
   19bb0:	085a      	lsrs	r2, r3, #1
   19bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19bb4:	699b      	ldr	r3, [r3, #24]
   19bb6:	2101      	movs	r1, #1
   19bb8:	400b      	ands	r3, r1
   19bba:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   19bbc:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   19bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19bc0:	69da      	ldr	r2, [r3, #28]
   19bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19bc4:	495a      	ldr	r1, [pc, #360]	; (19d30 <chk_mounted+0x5b8>)
   19bc6:	468c      	mov	ip, r1
   19bc8:	4463      	add	r3, ip
   19bca:	0a5b      	lsrs	r3, r3, #9
   19bcc:	429a      	cmp	r2, r3
   19bce:	d201      	bcs.n	19bd4 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   19bd0:	230d      	movs	r3, #13
   19bd2:	e0a5      	b.n	19d20 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   19bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19bd6:	2201      	movs	r2, #1
   19bd8:	4252      	negs	r2, r2
   19bda:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   19bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19bde:	2200      	movs	r2, #0
   19be0:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   19be2:	2347      	movs	r3, #71	; 0x47
   19be4:	18fb      	adds	r3, r7, r3
   19be6:	781b      	ldrb	r3, [r3, #0]
   19be8:	2b03      	cmp	r3, #3
   19bea:	d000      	beq.n	19bee <chk_mounted+0x476>
   19bec:	e082      	b.n	19cf4 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   19bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19bf0:	2200      	movs	r2, #0
   19bf2:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   19bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19bf6:	2261      	movs	r2, #97	; 0x61
   19bf8:	5c9b      	ldrb	r3, [r3, r2]
   19bfa:	021b      	lsls	r3, r3, #8
   19bfc:	b21a      	sxth	r2, r3
   19bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c00:	2160      	movs	r1, #96	; 0x60
   19c02:	5c5b      	ldrb	r3, [r3, r1]
   19c04:	b21b      	sxth	r3, r3
   19c06:	4313      	orrs	r3, r2
   19c08:	b21b      	sxth	r3, r3
   19c0a:	b29b      	uxth	r3, r3
   19c0c:	001a      	movs	r2, r3
   19c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19c10:	18d2      	adds	r2, r2, r3
   19c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c14:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   19c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c18:	7858      	ldrb	r0, [r3, #1]
   19c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c1c:	3330      	adds	r3, #48	; 0x30
   19c1e:	0019      	movs	r1, r3
   19c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c22:	695a      	ldr	r2, [r3, #20]
   19c24:	2301      	movs	r3, #1
   19c26:	4c43      	ldr	r4, [pc, #268]	; (19d34 <chk_mounted+0x5bc>)
   19c28:	47a0      	blx	r4
   19c2a:	1e03      	subs	r3, r0, #0
   19c2c:	d162      	bne.n	19cf4 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   19c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c30:	4a41      	ldr	r2, [pc, #260]	; (19d38 <chk_mounted+0x5c0>)
   19c32:	5c9b      	ldrb	r3, [r3, r2]
   19c34:	021b      	lsls	r3, r3, #8
   19c36:	b21a      	sxth	r2, r3
   19c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c3a:	4940      	ldr	r1, [pc, #256]	; (19d3c <chk_mounted+0x5c4>)
   19c3c:	5c5b      	ldrb	r3, [r3, r1]
   19c3e:	b21b      	sxth	r3, r3
   19c40:	4313      	orrs	r3, r2
   19c42:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   19c44:	4a3e      	ldr	r2, [pc, #248]	; (19d40 <chk_mounted+0x5c8>)
   19c46:	4293      	cmp	r3, r2
   19c48:	d154      	bne.n	19cf4 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   19c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c4c:	2233      	movs	r2, #51	; 0x33
   19c4e:	5c9b      	ldrb	r3, [r3, r2]
   19c50:	061a      	lsls	r2, r3, #24
   19c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c54:	2132      	movs	r1, #50	; 0x32
   19c56:	5c5b      	ldrb	r3, [r3, r1]
   19c58:	041b      	lsls	r3, r3, #16
   19c5a:	4313      	orrs	r3, r2
   19c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19c5e:	2131      	movs	r1, #49	; 0x31
   19c60:	5c52      	ldrb	r2, [r2, r1]
   19c62:	0212      	lsls	r2, r2, #8
   19c64:	4313      	orrs	r3, r2
   19c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19c68:	2130      	movs	r1, #48	; 0x30
   19c6a:	5c52      	ldrb	r2, [r2, r1]
   19c6c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   19c6e:	4a35      	ldr	r2, [pc, #212]	; (19d44 <chk_mounted+0x5cc>)
   19c70:	4293      	cmp	r3, r2
   19c72:	d13f      	bne.n	19cf4 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   19c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c76:	4a34      	ldr	r2, [pc, #208]	; (19d48 <chk_mounted+0x5d0>)
   19c78:	5c9b      	ldrb	r3, [r3, r2]
   19c7a:	061a      	lsls	r2, r3, #24
   19c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19c7e:	4933      	ldr	r1, [pc, #204]	; (19d4c <chk_mounted+0x5d4>)
   19c80:	5c5b      	ldrb	r3, [r3, r1]
   19c82:	041b      	lsls	r3, r3, #16
   19c84:	4313      	orrs	r3, r2
   19c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19c88:	4931      	ldr	r1, [pc, #196]	; (19d50 <chk_mounted+0x5d8>)
   19c8a:	5c52      	ldrb	r2, [r2, r1]
   19c8c:	0212      	lsls	r2, r2, #8
   19c8e:	4313      	orrs	r3, r2
   19c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   19c92:	2285      	movs	r2, #133	; 0x85
   19c94:	0092      	lsls	r2, r2, #2
   19c96:	5c8a      	ldrb	r2, [r1, r2]
   19c98:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   19c9a:	4a2e      	ldr	r2, [pc, #184]	; (19d54 <chk_mounted+0x5dc>)
   19c9c:	4293      	cmp	r3, r2
   19c9e:	d129      	bne.n	19cf4 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   19ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19ca2:	4a2d      	ldr	r2, [pc, #180]	; (19d58 <chk_mounted+0x5e0>)
   19ca4:	5c9b      	ldrb	r3, [r3, r2]
   19ca6:	061a      	lsls	r2, r3, #24
   19ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19caa:	492c      	ldr	r1, [pc, #176]	; (19d5c <chk_mounted+0x5e4>)
   19cac:	5c5b      	ldrb	r3, [r3, r1]
   19cae:	041b      	lsls	r3, r3, #16
   19cb0:	4313      	orrs	r3, r2
   19cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19cb4:	492a      	ldr	r1, [pc, #168]	; (19d60 <chk_mounted+0x5e8>)
   19cb6:	5c52      	ldrb	r2, [r2, r1]
   19cb8:	0212      	lsls	r2, r2, #8
   19cba:	4313      	orrs	r3, r2
   19cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   19cbe:	2287      	movs	r2, #135	; 0x87
   19cc0:	0092      	lsls	r2, r2, #2
   19cc2:	5c8a      	ldrb	r2, [r1, r2]
   19cc4:	431a      	orrs	r2, r3
   19cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19cc8:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   19cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19ccc:	4a25      	ldr	r2, [pc, #148]	; (19d64 <chk_mounted+0x5ec>)
   19cce:	5c9b      	ldrb	r3, [r3, r2]
   19cd0:	061a      	lsls	r2, r3, #24
   19cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19cd4:	4924      	ldr	r1, [pc, #144]	; (19d68 <chk_mounted+0x5f0>)
   19cd6:	5c5b      	ldrb	r3, [r3, r1]
   19cd8:	041b      	lsls	r3, r3, #16
   19cda:	4313      	orrs	r3, r2
   19cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19cde:	4923      	ldr	r1, [pc, #140]	; (19d6c <chk_mounted+0x5f4>)
   19ce0:	5c52      	ldrb	r2, [r2, r1]
   19ce2:	0212      	lsls	r2, r2, #8
   19ce4:	4313      	orrs	r3, r2
   19ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   19ce8:	2286      	movs	r2, #134	; 0x86
   19cea:	0092      	lsls	r2, r2, #2
   19cec:	5c8a      	ldrb	r2, [r1, r2]
   19cee:	431a      	orrs	r2, r3
   19cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19cf2:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   19cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19cf6:	2247      	movs	r2, #71	; 0x47
   19cf8:	18ba      	adds	r2, r7, r2
   19cfa:	7812      	ldrb	r2, [r2, #0]
   19cfc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   19cfe:	4b1c      	ldr	r3, [pc, #112]	; (19d70 <chk_mounted+0x5f8>)
   19d00:	881b      	ldrh	r3, [r3, #0]
   19d02:	3301      	adds	r3, #1
   19d04:	b29a      	uxth	r2, r3
   19d06:	4b1a      	ldr	r3, [pc, #104]	; (19d70 <chk_mounted+0x5f8>)
   19d08:	801a      	strh	r2, [r3, #0]
   19d0a:	4b19      	ldr	r3, [pc, #100]	; (19d70 <chk_mounted+0x5f8>)
   19d0c:	881a      	ldrh	r2, [r3, #0]
   19d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d10:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   19d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d14:	2200      	movs	r2, #0
   19d16:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   19d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d1a:	2200      	movs	r2, #0
   19d1c:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   19d1e:	2300      	movs	r3, #0
}
   19d20:	0018      	movs	r0, r3
   19d22:	46bd      	mov	sp, r7
   19d24:	b013      	add	sp, #76	; 0x4c
   19d26:	bd90      	pop	{r4, r7, pc}
   19d28:	00000ff5 	.word	0x00000ff5
   19d2c:	0000fff5 	.word	0x0000fff5
   19d30:	000001ff 	.word	0x000001ff
   19d34:	0001790d 	.word	0x0001790d
   19d38:	0000022f 	.word	0x0000022f
   19d3c:	0000022e 	.word	0x0000022e
   19d40:	ffffaa55 	.word	0xffffaa55
   19d44:	41615252 	.word	0x41615252
   19d48:	00000217 	.word	0x00000217
   19d4c:	00000216 	.word	0x00000216
   19d50:	00000215 	.word	0x00000215
   19d54:	61417272 	.word	0x61417272
   19d58:	0000021f 	.word	0x0000021f
   19d5c:	0000021e 	.word	0x0000021e
   19d60:	0000021d 	.word	0x0000021d
   19d64:	0000021b 	.word	0x0000021b
   19d68:	0000021a 	.word	0x0000021a
   19d6c:	00000219 	.word	0x00000219
   19d70:	20004190 	.word	0x20004190

00019d74 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   19d74:	b580      	push	{r7, lr}
   19d76:	b082      	sub	sp, #8
   19d78:	af00      	add	r7, sp, #0
   19d7a:	6078      	str	r0, [r7, #4]
   19d7c:	000a      	movs	r2, r1
   19d7e:	1cbb      	adds	r3, r7, #2
   19d80:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   19d82:	687b      	ldr	r3, [r7, #4]
   19d84:	2b00      	cmp	r3, #0
   19d86:	d009      	beq.n	19d9c <validate+0x28>
   19d88:	687b      	ldr	r3, [r7, #4]
   19d8a:	781b      	ldrb	r3, [r3, #0]
   19d8c:	2b00      	cmp	r3, #0
   19d8e:	d005      	beq.n	19d9c <validate+0x28>
   19d90:	687b      	ldr	r3, [r7, #4]
   19d92:	88db      	ldrh	r3, [r3, #6]
   19d94:	1cba      	adds	r2, r7, #2
   19d96:	8812      	ldrh	r2, [r2, #0]
   19d98:	429a      	cmp	r2, r3
   19d9a:	d001      	beq.n	19da0 <validate+0x2c>
		return FR_INVALID_OBJECT;
   19d9c:	2309      	movs	r3, #9
   19d9e:	e00c      	b.n	19dba <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   19da0:	687b      	ldr	r3, [r7, #4]
   19da2:	785b      	ldrb	r3, [r3, #1]
   19da4:	0018      	movs	r0, r3
   19da6:	4b07      	ldr	r3, [pc, #28]	; (19dc4 <validate+0x50>)
   19da8:	4798      	blx	r3
   19daa:	0003      	movs	r3, r0
   19dac:	001a      	movs	r2, r3
   19dae:	2301      	movs	r3, #1
   19db0:	4013      	ands	r3, r2
   19db2:	d001      	beq.n	19db8 <validate+0x44>
		return FR_NOT_READY;
   19db4:	2303      	movs	r3, #3
   19db6:	e000      	b.n	19dba <validate+0x46>

	return FR_OK;
   19db8:	2300      	movs	r3, #0
}
   19dba:	0018      	movs	r0, r3
   19dbc:	46bd      	mov	sp, r7
   19dbe:	b002      	add	sp, #8
   19dc0:	bd80      	pop	{r7, pc}
   19dc2:	46c0      	nop			; (mov r8, r8)
   19dc4:	000178d5 	.word	0x000178d5

00019dc8 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   19dc8:	b580      	push	{r7, lr}
   19dca:	b084      	sub	sp, #16
   19dcc:	af00      	add	r7, sp, #0
   19dce:	0002      	movs	r2, r0
   19dd0:	6039      	str	r1, [r7, #0]
   19dd2:	1dfb      	adds	r3, r7, #7
   19dd4:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   19dd6:	1dfb      	adds	r3, r7, #7
   19dd8:	781b      	ldrb	r3, [r3, #0]
   19dda:	2b07      	cmp	r3, #7
   19ddc:	d901      	bls.n	19de2 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   19dde:	230b      	movs	r3, #11
   19de0:	e018      	b.n	19e14 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   19de2:	1dfb      	adds	r3, r7, #7
   19de4:	781a      	ldrb	r2, [r3, #0]
   19de6:	4b0d      	ldr	r3, [pc, #52]	; (19e1c <f_mount+0x54>)
   19de8:	0092      	lsls	r2, r2, #2
   19dea:	58d3      	ldr	r3, [r2, r3]
   19dec:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   19dee:	68fb      	ldr	r3, [r7, #12]
   19df0:	2b00      	cmp	r3, #0
   19df2:	d002      	beq.n	19dfa <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   19df4:	68fb      	ldr	r3, [r7, #12]
   19df6:	2200      	movs	r2, #0
   19df8:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   19dfa:	683b      	ldr	r3, [r7, #0]
   19dfc:	2b00      	cmp	r3, #0
   19dfe:	d002      	beq.n	19e06 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   19e00:	683b      	ldr	r3, [r7, #0]
   19e02:	2200      	movs	r2, #0
   19e04:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   19e06:	1dfb      	adds	r3, r7, #7
   19e08:	781a      	ldrb	r2, [r3, #0]
   19e0a:	4b04      	ldr	r3, [pc, #16]	; (19e1c <f_mount+0x54>)
   19e0c:	0092      	lsls	r2, r2, #2
   19e0e:	6839      	ldr	r1, [r7, #0]
   19e10:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   19e12:	2300      	movs	r3, #0
}
   19e14:	0018      	movs	r0, r3
   19e16:	46bd      	mov	sp, r7
   19e18:	b004      	add	sp, #16
   19e1a:	bd80      	pop	{r7, pc}
   19e1c:	20004170 	.word	0x20004170

00019e20 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   19e20:	b590      	push	{r4, r7, lr}
   19e22:	4ce5      	ldr	r4, [pc, #916]	; (1a1b8 <f_open+0x398>)
   19e24:	44a5      	add	sp, r4
   19e26:	af00      	add	r7, sp, #0
   19e28:	60f8      	str	r0, [r7, #12]
   19e2a:	60b9      	str	r1, [r7, #8]
   19e2c:	4be3      	ldr	r3, [pc, #908]	; (1a1bc <f_open+0x39c>)
   19e2e:	2194      	movs	r1, #148	; 0x94
   19e30:	0089      	lsls	r1, r1, #2
   19e32:	468c      	mov	ip, r1
   19e34:	44bc      	add	ip, r7
   19e36:	4463      	add	r3, ip
   19e38:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   19e3a:	68fb      	ldr	r3, [r7, #12]
   19e3c:	2200      	movs	r2, #0
   19e3e:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   19e40:	4bde      	ldr	r3, [pc, #888]	; (1a1bc <f_open+0x39c>)
   19e42:	2294      	movs	r2, #148	; 0x94
   19e44:	0092      	lsls	r2, r2, #2
   19e46:	4694      	mov	ip, r2
   19e48:	44bc      	add	ip, r7
   19e4a:	4463      	add	r3, ip
   19e4c:	4adb      	ldr	r2, [pc, #876]	; (1a1bc <f_open+0x39c>)
   19e4e:	2194      	movs	r1, #148	; 0x94
   19e50:	0089      	lsls	r1, r1, #2
   19e52:	468c      	mov	ip, r1
   19e54:	44bc      	add	ip, r7
   19e56:	4462      	add	r2, ip
   19e58:	7812      	ldrb	r2, [r2, #0]
   19e5a:	211f      	movs	r1, #31
   19e5c:	400a      	ands	r2, r1
   19e5e:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   19e60:	4bd6      	ldr	r3, [pc, #856]	; (1a1bc <f_open+0x39c>)
   19e62:	2294      	movs	r2, #148	; 0x94
   19e64:	0092      	lsls	r2, r2, #2
   19e66:	4694      	mov	ip, r2
   19e68:	44bc      	add	ip, r7
   19e6a:	4463      	add	r3, ip
   19e6c:	781b      	ldrb	r3, [r3, #0]
   19e6e:	2201      	movs	r2, #1
   19e70:	4393      	bics	r3, r2
   19e72:	b2da      	uxtb	r2, r3
   19e74:	4bd2      	ldr	r3, [pc, #840]	; (1a1c0 <f_open+0x3a0>)
   19e76:	18fc      	adds	r4, r7, r3
   19e78:	2387      	movs	r3, #135	; 0x87
   19e7a:	009b      	lsls	r3, r3, #2
   19e7c:	18f9      	adds	r1, r7, r3
   19e7e:	2308      	movs	r3, #8
   19e80:	18fb      	adds	r3, r7, r3
   19e82:	0018      	movs	r0, r3
   19e84:	4bcf      	ldr	r3, [pc, #828]	; (1a1c4 <f_open+0x3a4>)
   19e86:	4798      	blx	r3
   19e88:	0003      	movs	r3, r0
   19e8a:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   19e8c:	2387      	movs	r3, #135	; 0x87
   19e8e:	009b      	lsls	r3, r3, #2
   19e90:	18fb      	adds	r3, r7, r3
   19e92:	2284      	movs	r2, #132	; 0x84
   19e94:	0092      	lsls	r2, r2, #2
   19e96:	18ba      	adds	r2, r7, r2
   19e98:	619a      	str	r2, [r3, #24]
   19e9a:	2387      	movs	r3, #135	; 0x87
   19e9c:	009b      	lsls	r3, r3, #2
   19e9e:	18fb      	adds	r3, r7, r3
   19ea0:	2210      	movs	r2, #16
   19ea2:	18ba      	adds	r2, r7, r2
   19ea4:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   19ea6:	4bc6      	ldr	r3, [pc, #792]	; (1a1c0 <f_open+0x3a0>)
   19ea8:	18fb      	adds	r3, r7, r3
   19eaa:	781b      	ldrb	r3, [r3, #0]
   19eac:	2b00      	cmp	r3, #0
   19eae:	d10b      	bne.n	19ec8 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   19eb0:	68ba      	ldr	r2, [r7, #8]
   19eb2:	4bc3      	ldr	r3, [pc, #780]	; (1a1c0 <f_open+0x3a0>)
   19eb4:	18fc      	adds	r4, r7, r3
   19eb6:	2387      	movs	r3, #135	; 0x87
   19eb8:	009b      	lsls	r3, r3, #2
   19eba:	18fb      	adds	r3, r7, r3
   19ebc:	0011      	movs	r1, r2
   19ebe:	0018      	movs	r0, r3
   19ec0:	4bc1      	ldr	r3, [pc, #772]	; (1a1c8 <f_open+0x3a8>)
   19ec2:	4798      	blx	r3
   19ec4:	0003      	movs	r3, r0
   19ec6:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   19ec8:	2387      	movs	r3, #135	; 0x87
   19eca:	009b      	lsls	r3, r3, #2
   19ecc:	18fb      	adds	r3, r7, r3
   19ece:	695b      	ldr	r3, [r3, #20]
   19ed0:	2292      	movs	r2, #146	; 0x92
   19ed2:	0092      	lsls	r2, r2, #2
   19ed4:	18ba      	adds	r2, r7, r2
   19ed6:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   19ed8:	4bb9      	ldr	r3, [pc, #740]	; (1a1c0 <f_open+0x3a0>)
   19eda:	18fb      	adds	r3, r7, r3
   19edc:	781b      	ldrb	r3, [r3, #0]
   19ede:	2b00      	cmp	r3, #0
   19ee0:	d109      	bne.n	19ef6 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   19ee2:	2392      	movs	r3, #146	; 0x92
   19ee4:	009b      	lsls	r3, r3, #2
   19ee6:	18fb      	adds	r3, r7, r3
   19ee8:	681b      	ldr	r3, [r3, #0]
   19eea:	2b00      	cmp	r3, #0
   19eec:	d103      	bne.n	19ef6 <f_open+0xd6>
			res = FR_INVALID_NAME;
   19eee:	4bb4      	ldr	r3, [pc, #720]	; (1a1c0 <f_open+0x3a0>)
   19ef0:	18fb      	adds	r3, r7, r3
   19ef2:	2206      	movs	r2, #6
   19ef4:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   19ef6:	4bb1      	ldr	r3, [pc, #708]	; (1a1bc <f_open+0x39c>)
   19ef8:	2294      	movs	r2, #148	; 0x94
   19efa:	0092      	lsls	r2, r2, #2
   19efc:	4694      	mov	ip, r2
   19efe:	44bc      	add	ip, r7
   19f00:	4463      	add	r3, ip
   19f02:	781b      	ldrb	r3, [r3, #0]
   19f04:	221c      	movs	r2, #28
   19f06:	4013      	ands	r3, r2
   19f08:	d100      	bne.n	19f0c <f_open+0xec>
   19f0a:	e141      	b.n	1a190 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   19f0c:	4bac      	ldr	r3, [pc, #688]	; (1a1c0 <f_open+0x3a0>)
   19f0e:	18fb      	adds	r3, r7, r3
   19f10:	781b      	ldrb	r3, [r3, #0]
   19f12:	2b00      	cmp	r3, #0
   19f14:	d027      	beq.n	19f66 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   19f16:	4baa      	ldr	r3, [pc, #680]	; (1a1c0 <f_open+0x3a0>)
   19f18:	18fb      	adds	r3, r7, r3
   19f1a:	781b      	ldrb	r3, [r3, #0]
   19f1c:	2b04      	cmp	r3, #4
   19f1e:	d109      	bne.n	19f34 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   19f20:	4ba7      	ldr	r3, [pc, #668]	; (1a1c0 <f_open+0x3a0>)
   19f22:	18fc      	adds	r4, r7, r3
   19f24:	2387      	movs	r3, #135	; 0x87
   19f26:	009b      	lsls	r3, r3, #2
   19f28:	18fb      	adds	r3, r7, r3
   19f2a:	0018      	movs	r0, r3
   19f2c:	4ba7      	ldr	r3, [pc, #668]	; (1a1cc <f_open+0x3ac>)
   19f2e:	4798      	blx	r3
   19f30:	0003      	movs	r3, r0
   19f32:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   19f34:	4ba1      	ldr	r3, [pc, #644]	; (1a1bc <f_open+0x39c>)
   19f36:	2294      	movs	r2, #148	; 0x94
   19f38:	0092      	lsls	r2, r2, #2
   19f3a:	4694      	mov	ip, r2
   19f3c:	44bc      	add	ip, r7
   19f3e:	4463      	add	r3, ip
   19f40:	4a9e      	ldr	r2, [pc, #632]	; (1a1bc <f_open+0x39c>)
   19f42:	2194      	movs	r1, #148	; 0x94
   19f44:	0089      	lsls	r1, r1, #2
   19f46:	468c      	mov	ip, r1
   19f48:	44bc      	add	ip, r7
   19f4a:	4462      	add	r2, ip
   19f4c:	7812      	ldrb	r2, [r2, #0]
   19f4e:	2108      	movs	r1, #8
   19f50:	430a      	orrs	r2, r1
   19f52:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   19f54:	2387      	movs	r3, #135	; 0x87
   19f56:	009b      	lsls	r3, r3, #2
   19f58:	18fb      	adds	r3, r7, r3
   19f5a:	695b      	ldr	r3, [r3, #20]
   19f5c:	2292      	movs	r2, #146	; 0x92
   19f5e:	0092      	lsls	r2, r2, #2
   19f60:	18ba      	adds	r2, r7, r2
   19f62:	6013      	str	r3, [r2, #0]
   19f64:	e01c      	b.n	19fa0 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   19f66:	2392      	movs	r3, #146	; 0x92
   19f68:	009b      	lsls	r3, r3, #2
   19f6a:	18fb      	adds	r3, r7, r3
   19f6c:	681b      	ldr	r3, [r3, #0]
   19f6e:	330b      	adds	r3, #11
   19f70:	781b      	ldrb	r3, [r3, #0]
   19f72:	001a      	movs	r2, r3
   19f74:	2311      	movs	r3, #17
   19f76:	4013      	ands	r3, r2
   19f78:	d004      	beq.n	19f84 <f_open+0x164>
				res = FR_DENIED;
   19f7a:	4b91      	ldr	r3, [pc, #580]	; (1a1c0 <f_open+0x3a0>)
   19f7c:	18fb      	adds	r3, r7, r3
   19f7e:	2207      	movs	r2, #7
   19f80:	701a      	strb	r2, [r3, #0]
   19f82:	e00d      	b.n	19fa0 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   19f84:	4b8d      	ldr	r3, [pc, #564]	; (1a1bc <f_open+0x39c>)
   19f86:	2294      	movs	r2, #148	; 0x94
   19f88:	0092      	lsls	r2, r2, #2
   19f8a:	4694      	mov	ip, r2
   19f8c:	44bc      	add	ip, r7
   19f8e:	4463      	add	r3, ip
   19f90:	781b      	ldrb	r3, [r3, #0]
   19f92:	2204      	movs	r2, #4
   19f94:	4013      	ands	r3, r2
   19f96:	d003      	beq.n	19fa0 <f_open+0x180>
					res = FR_EXIST;
   19f98:	4b89      	ldr	r3, [pc, #548]	; (1a1c0 <f_open+0x3a0>)
   19f9a:	18fb      	adds	r3, r7, r3
   19f9c:	2208      	movs	r2, #8
   19f9e:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   19fa0:	4b87      	ldr	r3, [pc, #540]	; (1a1c0 <f_open+0x3a0>)
   19fa2:	18fb      	adds	r3, r7, r3
   19fa4:	781b      	ldrb	r3, [r3, #0]
   19fa6:	2b00      	cmp	r3, #0
   19fa8:	d000      	beq.n	19fac <f_open+0x18c>
   19faa:	e12f      	b.n	1a20c <f_open+0x3ec>
   19fac:	4b83      	ldr	r3, [pc, #524]	; (1a1bc <f_open+0x39c>)
   19fae:	2294      	movs	r2, #148	; 0x94
   19fb0:	0092      	lsls	r2, r2, #2
   19fb2:	4694      	mov	ip, r2
   19fb4:	44bc      	add	ip, r7
   19fb6:	4463      	add	r3, ip
   19fb8:	781b      	ldrb	r3, [r3, #0]
   19fba:	2208      	movs	r2, #8
   19fbc:	4013      	ands	r3, r2
   19fbe:	d100      	bne.n	19fc2 <f_open+0x1a2>
   19fc0:	e124      	b.n	1a20c <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   19fc2:	4b83      	ldr	r3, [pc, #524]	; (1a1d0 <f_open+0x3b0>)
   19fc4:	4798      	blx	r3
   19fc6:	0003      	movs	r3, r0
   19fc8:	2291      	movs	r2, #145	; 0x91
   19fca:	0092      	lsls	r2, r2, #2
   19fcc:	18ba      	adds	r2, r7, r2
   19fce:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   19fd0:	2392      	movs	r3, #146	; 0x92
   19fd2:	009b      	lsls	r3, r3, #2
   19fd4:	18fb      	adds	r3, r7, r3
   19fd6:	681b      	ldr	r3, [r3, #0]
   19fd8:	330e      	adds	r3, #14
   19fda:	2291      	movs	r2, #145	; 0x91
   19fdc:	0092      	lsls	r2, r2, #2
   19fde:	18ba      	adds	r2, r7, r2
   19fe0:	6812      	ldr	r2, [r2, #0]
   19fe2:	b2d2      	uxtb	r2, r2
   19fe4:	701a      	strb	r2, [r3, #0]
   19fe6:	2392      	movs	r3, #146	; 0x92
   19fe8:	009b      	lsls	r3, r3, #2
   19fea:	18fb      	adds	r3, r7, r3
   19fec:	681b      	ldr	r3, [r3, #0]
   19fee:	330f      	adds	r3, #15
   19ff0:	2291      	movs	r2, #145	; 0x91
   19ff2:	0092      	lsls	r2, r2, #2
   19ff4:	18ba      	adds	r2, r7, r2
   19ff6:	6812      	ldr	r2, [r2, #0]
   19ff8:	b292      	uxth	r2, r2
   19ffa:	0a12      	lsrs	r2, r2, #8
   19ffc:	b292      	uxth	r2, r2
   19ffe:	b2d2      	uxtb	r2, r2
   1a000:	701a      	strb	r2, [r3, #0]
   1a002:	2392      	movs	r3, #146	; 0x92
   1a004:	009b      	lsls	r3, r3, #2
   1a006:	18fb      	adds	r3, r7, r3
   1a008:	681b      	ldr	r3, [r3, #0]
   1a00a:	3310      	adds	r3, #16
   1a00c:	2291      	movs	r2, #145	; 0x91
   1a00e:	0092      	lsls	r2, r2, #2
   1a010:	18ba      	adds	r2, r7, r2
   1a012:	6812      	ldr	r2, [r2, #0]
   1a014:	0c12      	lsrs	r2, r2, #16
   1a016:	b2d2      	uxtb	r2, r2
   1a018:	701a      	strb	r2, [r3, #0]
   1a01a:	2392      	movs	r3, #146	; 0x92
   1a01c:	009b      	lsls	r3, r3, #2
   1a01e:	18fb      	adds	r3, r7, r3
   1a020:	681b      	ldr	r3, [r3, #0]
   1a022:	3311      	adds	r3, #17
   1a024:	2291      	movs	r2, #145	; 0x91
   1a026:	0092      	lsls	r2, r2, #2
   1a028:	18ba      	adds	r2, r7, r2
   1a02a:	6812      	ldr	r2, [r2, #0]
   1a02c:	0e12      	lsrs	r2, r2, #24
   1a02e:	b2d2      	uxtb	r2, r2
   1a030:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   1a032:	2392      	movs	r3, #146	; 0x92
   1a034:	009b      	lsls	r3, r3, #2
   1a036:	18fb      	adds	r3, r7, r3
   1a038:	681b      	ldr	r3, [r3, #0]
   1a03a:	330b      	adds	r3, #11
   1a03c:	2200      	movs	r2, #0
   1a03e:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   1a040:	2392      	movs	r3, #146	; 0x92
   1a042:	009b      	lsls	r3, r3, #2
   1a044:	18fb      	adds	r3, r7, r3
   1a046:	681b      	ldr	r3, [r3, #0]
   1a048:	331c      	adds	r3, #28
   1a04a:	2200      	movs	r2, #0
   1a04c:	701a      	strb	r2, [r3, #0]
   1a04e:	2392      	movs	r3, #146	; 0x92
   1a050:	009b      	lsls	r3, r3, #2
   1a052:	18fb      	adds	r3, r7, r3
   1a054:	681b      	ldr	r3, [r3, #0]
   1a056:	331d      	adds	r3, #29
   1a058:	2200      	movs	r2, #0
   1a05a:	701a      	strb	r2, [r3, #0]
   1a05c:	2392      	movs	r3, #146	; 0x92
   1a05e:	009b      	lsls	r3, r3, #2
   1a060:	18fb      	adds	r3, r7, r3
   1a062:	681b      	ldr	r3, [r3, #0]
   1a064:	331e      	adds	r3, #30
   1a066:	2200      	movs	r2, #0
   1a068:	701a      	strb	r2, [r3, #0]
   1a06a:	2392      	movs	r3, #146	; 0x92
   1a06c:	009b      	lsls	r3, r3, #2
   1a06e:	18fb      	adds	r3, r7, r3
   1a070:	681b      	ldr	r3, [r3, #0]
   1a072:	331f      	adds	r3, #31
   1a074:	2200      	movs	r2, #0
   1a076:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   1a078:	2392      	movs	r3, #146	; 0x92
   1a07a:	009b      	lsls	r3, r3, #2
   1a07c:	18fb      	adds	r3, r7, r3
   1a07e:	681b      	ldr	r3, [r3, #0]
   1a080:	3315      	adds	r3, #21
   1a082:	781b      	ldrb	r3, [r3, #0]
   1a084:	021b      	lsls	r3, r3, #8
   1a086:	b21a      	sxth	r2, r3
   1a088:	2392      	movs	r3, #146	; 0x92
   1a08a:	009b      	lsls	r3, r3, #2
   1a08c:	18fb      	adds	r3, r7, r3
   1a08e:	681b      	ldr	r3, [r3, #0]
   1a090:	3314      	adds	r3, #20
   1a092:	781b      	ldrb	r3, [r3, #0]
   1a094:	b21b      	sxth	r3, r3
   1a096:	4313      	orrs	r3, r2
   1a098:	b21b      	sxth	r3, r3
   1a09a:	b29b      	uxth	r3, r3
   1a09c:	041b      	lsls	r3, r3, #16
   1a09e:	2292      	movs	r2, #146	; 0x92
   1a0a0:	0092      	lsls	r2, r2, #2
   1a0a2:	18ba      	adds	r2, r7, r2
   1a0a4:	6812      	ldr	r2, [r2, #0]
   1a0a6:	321b      	adds	r2, #27
   1a0a8:	7812      	ldrb	r2, [r2, #0]
   1a0aa:	0212      	lsls	r2, r2, #8
   1a0ac:	b211      	sxth	r1, r2
   1a0ae:	2292      	movs	r2, #146	; 0x92
   1a0b0:	0092      	lsls	r2, r2, #2
   1a0b2:	18ba      	adds	r2, r7, r2
   1a0b4:	6812      	ldr	r2, [r2, #0]
   1a0b6:	321a      	adds	r2, #26
   1a0b8:	7812      	ldrb	r2, [r2, #0]
   1a0ba:	b212      	sxth	r2, r2
   1a0bc:	430a      	orrs	r2, r1
   1a0be:	b212      	sxth	r2, r2
   1a0c0:	b292      	uxth	r2, r2
   1a0c2:	4313      	orrs	r3, r2
   1a0c4:	2290      	movs	r2, #144	; 0x90
   1a0c6:	0092      	lsls	r2, r2, #2
   1a0c8:	18ba      	adds	r2, r7, r2
   1a0ca:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   1a0cc:	2392      	movs	r3, #146	; 0x92
   1a0ce:	009b      	lsls	r3, r3, #2
   1a0d0:	18fb      	adds	r3, r7, r3
   1a0d2:	681b      	ldr	r3, [r3, #0]
   1a0d4:	331a      	adds	r3, #26
   1a0d6:	2200      	movs	r2, #0
   1a0d8:	701a      	strb	r2, [r3, #0]
   1a0da:	2392      	movs	r3, #146	; 0x92
   1a0dc:	009b      	lsls	r3, r3, #2
   1a0de:	18fb      	adds	r3, r7, r3
   1a0e0:	681b      	ldr	r3, [r3, #0]
   1a0e2:	331b      	adds	r3, #27
   1a0e4:	2200      	movs	r2, #0
   1a0e6:	701a      	strb	r2, [r3, #0]
   1a0e8:	2392      	movs	r3, #146	; 0x92
   1a0ea:	009b      	lsls	r3, r3, #2
   1a0ec:	18fb      	adds	r3, r7, r3
   1a0ee:	681b      	ldr	r3, [r3, #0]
   1a0f0:	3314      	adds	r3, #20
   1a0f2:	2200      	movs	r2, #0
   1a0f4:	701a      	strb	r2, [r3, #0]
   1a0f6:	2392      	movs	r3, #146	; 0x92
   1a0f8:	009b      	lsls	r3, r3, #2
   1a0fa:	18fb      	adds	r3, r7, r3
   1a0fc:	681b      	ldr	r3, [r3, #0]
   1a0fe:	3315      	adds	r3, #21
   1a100:	2200      	movs	r2, #0
   1a102:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   1a104:	2387      	movs	r3, #135	; 0x87
   1a106:	009b      	lsls	r3, r3, #2
   1a108:	18fb      	adds	r3, r7, r3
   1a10a:	681b      	ldr	r3, [r3, #0]
   1a10c:	2201      	movs	r2, #1
   1a10e:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   1a110:	2390      	movs	r3, #144	; 0x90
   1a112:	009b      	lsls	r3, r3, #2
   1a114:	18fb      	adds	r3, r7, r3
   1a116:	681b      	ldr	r3, [r3, #0]
   1a118:	2b00      	cmp	r3, #0
   1a11a:	d100      	bne.n	1a11e <f_open+0x2fe>
   1a11c:	e076      	b.n	1a20c <f_open+0x3ec>
				dw = dj.fs->winsect;
   1a11e:	2387      	movs	r3, #135	; 0x87
   1a120:	009b      	lsls	r3, r3, #2
   1a122:	18fb      	adds	r3, r7, r3
   1a124:	681b      	ldr	r3, [r3, #0]
   1a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a128:	2291      	movs	r2, #145	; 0x91
   1a12a:	0092      	lsls	r2, r2, #2
   1a12c:	18ba      	adds	r2, r7, r2
   1a12e:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   1a130:	2387      	movs	r3, #135	; 0x87
   1a132:	009b      	lsls	r3, r3, #2
   1a134:	18fb      	adds	r3, r7, r3
   1a136:	681b      	ldr	r3, [r3, #0]
   1a138:	4a21      	ldr	r2, [pc, #132]	; (1a1c0 <f_open+0x3a0>)
   1a13a:	18bc      	adds	r4, r7, r2
   1a13c:	2290      	movs	r2, #144	; 0x90
   1a13e:	0092      	lsls	r2, r2, #2
   1a140:	18ba      	adds	r2, r7, r2
   1a142:	6812      	ldr	r2, [r2, #0]
   1a144:	0011      	movs	r1, r2
   1a146:	0018      	movs	r0, r3
   1a148:	4b22      	ldr	r3, [pc, #136]	; (1a1d4 <f_open+0x3b4>)
   1a14a:	4798      	blx	r3
   1a14c:	0003      	movs	r3, r0
   1a14e:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   1a150:	4b1b      	ldr	r3, [pc, #108]	; (1a1c0 <f_open+0x3a0>)
   1a152:	18fb      	adds	r3, r7, r3
   1a154:	781b      	ldrb	r3, [r3, #0]
   1a156:	2b00      	cmp	r3, #0
   1a158:	d158      	bne.n	1a20c <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   1a15a:	2387      	movs	r3, #135	; 0x87
   1a15c:	009b      	lsls	r3, r3, #2
   1a15e:	18fb      	adds	r3, r7, r3
   1a160:	681b      	ldr	r3, [r3, #0]
   1a162:	2290      	movs	r2, #144	; 0x90
   1a164:	0092      	lsls	r2, r2, #2
   1a166:	18ba      	adds	r2, r7, r2
   1a168:	6812      	ldr	r2, [r2, #0]
   1a16a:	3a01      	subs	r2, #1
   1a16c:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   1a16e:	2387      	movs	r3, #135	; 0x87
   1a170:	009b      	lsls	r3, r3, #2
   1a172:	18fb      	adds	r3, r7, r3
   1a174:	681b      	ldr	r3, [r3, #0]
   1a176:	4a12      	ldr	r2, [pc, #72]	; (1a1c0 <f_open+0x3a0>)
   1a178:	18bc      	adds	r4, r7, r2
   1a17a:	2291      	movs	r2, #145	; 0x91
   1a17c:	0092      	lsls	r2, r2, #2
   1a17e:	18ba      	adds	r2, r7, r2
   1a180:	6812      	ldr	r2, [r2, #0]
   1a182:	0011      	movs	r1, r2
   1a184:	0018      	movs	r0, r3
   1a186:	4b14      	ldr	r3, [pc, #80]	; (1a1d8 <f_open+0x3b8>)
   1a188:	4798      	blx	r3
   1a18a:	0003      	movs	r3, r0
   1a18c:	7023      	strb	r3, [r4, #0]
   1a18e:	e03d      	b.n	1a20c <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   1a190:	4b0b      	ldr	r3, [pc, #44]	; (1a1c0 <f_open+0x3a0>)
   1a192:	18fb      	adds	r3, r7, r3
   1a194:	781b      	ldrb	r3, [r3, #0]
   1a196:	2b00      	cmp	r3, #0
   1a198:	d138      	bne.n	1a20c <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   1a19a:	2392      	movs	r3, #146	; 0x92
   1a19c:	009b      	lsls	r3, r3, #2
   1a19e:	18fb      	adds	r3, r7, r3
   1a1a0:	681b      	ldr	r3, [r3, #0]
   1a1a2:	330b      	adds	r3, #11
   1a1a4:	781b      	ldrb	r3, [r3, #0]
   1a1a6:	001a      	movs	r2, r3
   1a1a8:	2310      	movs	r3, #16
   1a1aa:	4013      	ands	r3, r2
   1a1ac:	d016      	beq.n	1a1dc <f_open+0x3bc>
				res = FR_NO_FILE;
   1a1ae:	4b04      	ldr	r3, [pc, #16]	; (1a1c0 <f_open+0x3a0>)
   1a1b0:	18fb      	adds	r3, r7, r3
   1a1b2:	2204      	movs	r2, #4
   1a1b4:	701a      	strb	r2, [r3, #0]
   1a1b6:	e029      	b.n	1a20c <f_open+0x3ec>
   1a1b8:	fffffdac 	.word	0xfffffdac
   1a1bc:	fffffdb7 	.word	0xfffffdb7
   1a1c0:	0000024f 	.word	0x0000024f
   1a1c4:	00019779 	.word	0x00019779
   1a1c8:	0001956d 	.word	0x0001956d
   1a1cc:	00018dbd 	.word	0x00018dbd
   1a1d0:	00017bb5 	.word	0x00017bb5
   1a1d4:	00018339 	.word	0x00018339
   1a1d8:	00017cf9 	.word	0x00017cf9
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   1a1dc:	4b5a      	ldr	r3, [pc, #360]	; (1a348 <f_open+0x528>)
   1a1de:	2294      	movs	r2, #148	; 0x94
   1a1e0:	0092      	lsls	r2, r2, #2
   1a1e2:	4694      	mov	ip, r2
   1a1e4:	44bc      	add	ip, r7
   1a1e6:	4463      	add	r3, ip
   1a1e8:	781b      	ldrb	r3, [r3, #0]
   1a1ea:	2202      	movs	r2, #2
   1a1ec:	4013      	ands	r3, r2
   1a1ee:	d00d      	beq.n	1a20c <f_open+0x3ec>
   1a1f0:	2392      	movs	r3, #146	; 0x92
   1a1f2:	009b      	lsls	r3, r3, #2
   1a1f4:	18fb      	adds	r3, r7, r3
   1a1f6:	681b      	ldr	r3, [r3, #0]
   1a1f8:	330b      	adds	r3, #11
   1a1fa:	781b      	ldrb	r3, [r3, #0]
   1a1fc:	001a      	movs	r2, r3
   1a1fe:	2301      	movs	r3, #1
   1a200:	4013      	ands	r3, r2
   1a202:	d003      	beq.n	1a20c <f_open+0x3ec>
					res = FR_DENIED;
   1a204:	4b51      	ldr	r3, [pc, #324]	; (1a34c <f_open+0x52c>)
   1a206:	18fb      	adds	r3, r7, r3
   1a208:	2207      	movs	r2, #7
   1a20a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   1a20c:	4b4f      	ldr	r3, [pc, #316]	; (1a34c <f_open+0x52c>)
   1a20e:	18fb      	adds	r3, r7, r3
   1a210:	781b      	ldrb	r3, [r3, #0]
   1a212:	2b00      	cmp	r3, #0
   1a214:	d126      	bne.n	1a264 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   1a216:	4b4c      	ldr	r3, [pc, #304]	; (1a348 <f_open+0x528>)
   1a218:	2294      	movs	r2, #148	; 0x94
   1a21a:	0092      	lsls	r2, r2, #2
   1a21c:	4694      	mov	ip, r2
   1a21e:	44bc      	add	ip, r7
   1a220:	4463      	add	r3, ip
   1a222:	781b      	ldrb	r3, [r3, #0]
   1a224:	2208      	movs	r2, #8
   1a226:	4013      	ands	r3, r2
   1a228:	d00f      	beq.n	1a24a <f_open+0x42a>
			mode |= FA__WRITTEN;
   1a22a:	4b47      	ldr	r3, [pc, #284]	; (1a348 <f_open+0x528>)
   1a22c:	2294      	movs	r2, #148	; 0x94
   1a22e:	0092      	lsls	r2, r2, #2
   1a230:	4694      	mov	ip, r2
   1a232:	44bc      	add	ip, r7
   1a234:	4463      	add	r3, ip
   1a236:	4a44      	ldr	r2, [pc, #272]	; (1a348 <f_open+0x528>)
   1a238:	2194      	movs	r1, #148	; 0x94
   1a23a:	0089      	lsls	r1, r1, #2
   1a23c:	468c      	mov	ip, r1
   1a23e:	44bc      	add	ip, r7
   1a240:	4462      	add	r2, ip
   1a242:	7812      	ldrb	r2, [r2, #0]
   1a244:	2120      	movs	r1, #32
   1a246:	430a      	orrs	r2, r1
   1a248:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   1a24a:	2387      	movs	r3, #135	; 0x87
   1a24c:	009b      	lsls	r3, r3, #2
   1a24e:	18fb      	adds	r3, r7, r3
   1a250:	681b      	ldr	r3, [r3, #0]
   1a252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a254:	68fb      	ldr	r3, [r7, #12]
   1a256:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   1a258:	68fb      	ldr	r3, [r7, #12]
   1a25a:	2292      	movs	r2, #146	; 0x92
   1a25c:	0092      	lsls	r2, r2, #2
   1a25e:	18ba      	adds	r2, r7, r2
   1a260:	6812      	ldr	r2, [r2, #0]
   1a262:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   1a264:	4b39      	ldr	r3, [pc, #228]	; (1a34c <f_open+0x52c>)
   1a266:	18fb      	adds	r3, r7, r3
   1a268:	781b      	ldrb	r3, [r3, #0]
   1a26a:	2b00      	cmp	r3, #0
   1a26c:	d163      	bne.n	1a336 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   1a26e:	68fb      	ldr	r3, [r7, #12]
   1a270:	4a35      	ldr	r2, [pc, #212]	; (1a348 <f_open+0x528>)
   1a272:	2194      	movs	r1, #148	; 0x94
   1a274:	0089      	lsls	r1, r1, #2
   1a276:	468c      	mov	ip, r1
   1a278:	44bc      	add	ip, r7
   1a27a:	4462      	add	r2, ip
   1a27c:	7812      	ldrb	r2, [r2, #0]
   1a27e:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   1a280:	2392      	movs	r3, #146	; 0x92
   1a282:	009b      	lsls	r3, r3, #2
   1a284:	18fb      	adds	r3, r7, r3
   1a286:	681b      	ldr	r3, [r3, #0]
   1a288:	3315      	adds	r3, #21
   1a28a:	781b      	ldrb	r3, [r3, #0]
   1a28c:	021b      	lsls	r3, r3, #8
   1a28e:	b21a      	sxth	r2, r3
   1a290:	2392      	movs	r3, #146	; 0x92
   1a292:	009b      	lsls	r3, r3, #2
   1a294:	18fb      	adds	r3, r7, r3
   1a296:	681b      	ldr	r3, [r3, #0]
   1a298:	3314      	adds	r3, #20
   1a29a:	781b      	ldrb	r3, [r3, #0]
   1a29c:	b21b      	sxth	r3, r3
   1a29e:	4313      	orrs	r3, r2
   1a2a0:	b21b      	sxth	r3, r3
   1a2a2:	b29b      	uxth	r3, r3
   1a2a4:	041b      	lsls	r3, r3, #16
   1a2a6:	2292      	movs	r2, #146	; 0x92
   1a2a8:	0092      	lsls	r2, r2, #2
   1a2aa:	18ba      	adds	r2, r7, r2
   1a2ac:	6812      	ldr	r2, [r2, #0]
   1a2ae:	321b      	adds	r2, #27
   1a2b0:	7812      	ldrb	r2, [r2, #0]
   1a2b2:	0212      	lsls	r2, r2, #8
   1a2b4:	b211      	sxth	r1, r2
   1a2b6:	2292      	movs	r2, #146	; 0x92
   1a2b8:	0092      	lsls	r2, r2, #2
   1a2ba:	18ba      	adds	r2, r7, r2
   1a2bc:	6812      	ldr	r2, [r2, #0]
   1a2be:	321a      	adds	r2, #26
   1a2c0:	7812      	ldrb	r2, [r2, #0]
   1a2c2:	b212      	sxth	r2, r2
   1a2c4:	430a      	orrs	r2, r1
   1a2c6:	b212      	sxth	r2, r2
   1a2c8:	b292      	uxth	r2, r2
   1a2ca:	431a      	orrs	r2, r3
   1a2cc:	68fb      	ldr	r3, [r7, #12]
   1a2ce:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   1a2d0:	2392      	movs	r3, #146	; 0x92
   1a2d2:	009b      	lsls	r3, r3, #2
   1a2d4:	18fb      	adds	r3, r7, r3
   1a2d6:	681b      	ldr	r3, [r3, #0]
   1a2d8:	331f      	adds	r3, #31
   1a2da:	781b      	ldrb	r3, [r3, #0]
   1a2dc:	061a      	lsls	r2, r3, #24
   1a2de:	2392      	movs	r3, #146	; 0x92
   1a2e0:	009b      	lsls	r3, r3, #2
   1a2e2:	18fb      	adds	r3, r7, r3
   1a2e4:	681b      	ldr	r3, [r3, #0]
   1a2e6:	331e      	adds	r3, #30
   1a2e8:	781b      	ldrb	r3, [r3, #0]
   1a2ea:	041b      	lsls	r3, r3, #16
   1a2ec:	4313      	orrs	r3, r2
   1a2ee:	2292      	movs	r2, #146	; 0x92
   1a2f0:	0092      	lsls	r2, r2, #2
   1a2f2:	18ba      	adds	r2, r7, r2
   1a2f4:	6812      	ldr	r2, [r2, #0]
   1a2f6:	321d      	adds	r2, #29
   1a2f8:	7812      	ldrb	r2, [r2, #0]
   1a2fa:	0212      	lsls	r2, r2, #8
   1a2fc:	4313      	orrs	r3, r2
   1a2fe:	2292      	movs	r2, #146	; 0x92
   1a300:	0092      	lsls	r2, r2, #2
   1a302:	18ba      	adds	r2, r7, r2
   1a304:	6812      	ldr	r2, [r2, #0]
   1a306:	321c      	adds	r2, #28
   1a308:	7812      	ldrb	r2, [r2, #0]
   1a30a:	431a      	orrs	r2, r3
   1a30c:	68fb      	ldr	r3, [r7, #12]
   1a30e:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   1a310:	68fb      	ldr	r3, [r7, #12]
   1a312:	2200      	movs	r2, #0
   1a314:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   1a316:	68fb      	ldr	r3, [r7, #12]
   1a318:	2200      	movs	r2, #0
   1a31a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   1a31c:	2387      	movs	r3, #135	; 0x87
   1a31e:	009b      	lsls	r3, r3, #2
   1a320:	18fb      	adds	r3, r7, r3
   1a322:	681a      	ldr	r2, [r3, #0]
   1a324:	68fb      	ldr	r3, [r7, #12]
   1a326:	601a      	str	r2, [r3, #0]
   1a328:	2387      	movs	r3, #135	; 0x87
   1a32a:	009b      	lsls	r3, r3, #2
   1a32c:	18fb      	adds	r3, r7, r3
   1a32e:	681b      	ldr	r3, [r3, #0]
   1a330:	88da      	ldrh	r2, [r3, #6]
   1a332:	68fb      	ldr	r3, [r7, #12]
   1a334:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   1a336:	4b05      	ldr	r3, [pc, #20]	; (1a34c <f_open+0x52c>)
   1a338:	18fb      	adds	r3, r7, r3
   1a33a:	781b      	ldrb	r3, [r3, #0]
}
   1a33c:	0018      	movs	r0, r3
   1a33e:	46bd      	mov	sp, r7
   1a340:	2395      	movs	r3, #149	; 0x95
   1a342:	009b      	lsls	r3, r3, #2
   1a344:	449d      	add	sp, r3
   1a346:	bd90      	pop	{r4, r7, pc}
   1a348:	fffffdb7 	.word	0xfffffdb7
   1a34c:	0000024f 	.word	0x0000024f

0001a350 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   1a350:	b590      	push	{r4, r7, lr}
   1a352:	b08b      	sub	sp, #44	; 0x2c
   1a354:	af00      	add	r7, sp, #0
   1a356:	60f8      	str	r0, [r7, #12]
   1a358:	60b9      	str	r1, [r7, #8]
   1a35a:	607a      	str	r2, [r7, #4]
   1a35c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   1a35e:	68bb      	ldr	r3, [r7, #8]
   1a360:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   1a362:	683b      	ldr	r3, [r7, #0]
   1a364:	2200      	movs	r2, #0
   1a366:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   1a368:	68fb      	ldr	r3, [r7, #12]
   1a36a:	681a      	ldr	r2, [r3, #0]
   1a36c:	68fb      	ldr	r3, [r7, #12]
   1a36e:	889b      	ldrh	r3, [r3, #4]
   1a370:	2117      	movs	r1, #23
   1a372:	187c      	adds	r4, r7, r1
   1a374:	0019      	movs	r1, r3
   1a376:	0010      	movs	r0, r2
   1a378:	4bc3      	ldr	r3, [pc, #780]	; (1a688 <f_write+0x338>)
   1a37a:	4798      	blx	r3
   1a37c:	0003      	movs	r3, r0
   1a37e:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   1a380:	2317      	movs	r3, #23
   1a382:	18fb      	adds	r3, r7, r3
   1a384:	781b      	ldrb	r3, [r3, #0]
   1a386:	2b00      	cmp	r3, #0
   1a388:	d003      	beq.n	1a392 <f_write+0x42>
   1a38a:	2317      	movs	r3, #23
   1a38c:	18fb      	adds	r3, r7, r3
   1a38e:	781b      	ldrb	r3, [r3, #0]
   1a390:	e176      	b.n	1a680 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   1a392:	68fb      	ldr	r3, [r7, #12]
   1a394:	799b      	ldrb	r3, [r3, #6]
   1a396:	b25b      	sxtb	r3, r3
   1a398:	2b00      	cmp	r3, #0
   1a39a:	da01      	bge.n	1a3a0 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   1a39c:	2302      	movs	r3, #2
   1a39e:	e16f      	b.n	1a680 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   1a3a0:	68fb      	ldr	r3, [r7, #12]
   1a3a2:	799b      	ldrb	r3, [r3, #6]
   1a3a4:	001a      	movs	r2, r3
   1a3a6:	2302      	movs	r3, #2
   1a3a8:	4013      	ands	r3, r2
   1a3aa:	d101      	bne.n	1a3b0 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   1a3ac:	2307      	movs	r3, #7
   1a3ae:	e167      	b.n	1a680 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   1a3b0:	68fb      	ldr	r3, [r7, #12]
   1a3b2:	68da      	ldr	r2, [r3, #12]
   1a3b4:	687b      	ldr	r3, [r7, #4]
   1a3b6:	18d2      	adds	r2, r2, r3
   1a3b8:	68fb      	ldr	r3, [r7, #12]
   1a3ba:	68db      	ldr	r3, [r3, #12]
   1a3bc:	429a      	cmp	r2, r3
   1a3be:	d300      	bcc.n	1a3c2 <f_write+0x72>
   1a3c0:	e146      	b.n	1a650 <f_write+0x300>
   1a3c2:	2300      	movs	r3, #0
   1a3c4:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   1a3c6:	e143      	b.n	1a650 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   1a3c8:	68fb      	ldr	r3, [r7, #12]
   1a3ca:	689b      	ldr	r3, [r3, #8]
   1a3cc:	05db      	lsls	r3, r3, #23
   1a3ce:	0ddb      	lsrs	r3, r3, #23
   1a3d0:	d000      	beq.n	1a3d4 <f_write+0x84>
   1a3d2:	e0f6      	b.n	1a5c2 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   1a3d4:	68fb      	ldr	r3, [r7, #12]
   1a3d6:	689b      	ldr	r3, [r3, #8]
   1a3d8:	0a5b      	lsrs	r3, r3, #9
   1a3da:	b2da      	uxtb	r2, r3
   1a3dc:	68fb      	ldr	r3, [r7, #12]
   1a3de:	681b      	ldr	r3, [r3, #0]
   1a3e0:	789b      	ldrb	r3, [r3, #2]
   1a3e2:	3b01      	subs	r3, #1
   1a3e4:	b2d9      	uxtb	r1, r3
   1a3e6:	2316      	movs	r3, #22
   1a3e8:	18fb      	adds	r3, r7, r3
   1a3ea:	400a      	ands	r2, r1
   1a3ec:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   1a3ee:	2316      	movs	r3, #22
   1a3f0:	18fb      	adds	r3, r7, r3
   1a3f2:	781b      	ldrb	r3, [r3, #0]
   1a3f4:	2b00      	cmp	r3, #0
   1a3f6:	d140      	bne.n	1a47a <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   1a3f8:	68fb      	ldr	r3, [r7, #12]
   1a3fa:	689b      	ldr	r3, [r3, #8]
   1a3fc:	2b00      	cmp	r3, #0
   1a3fe:	d111      	bne.n	1a424 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   1a400:	68fb      	ldr	r3, [r7, #12]
   1a402:	691b      	ldr	r3, [r3, #16]
   1a404:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   1a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a408:	2b00      	cmp	r3, #0
   1a40a:	d115      	bne.n	1a438 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   1a40c:	68fb      	ldr	r3, [r7, #12]
   1a40e:	681b      	ldr	r3, [r3, #0]
   1a410:	2100      	movs	r1, #0
   1a412:	0018      	movs	r0, r3
   1a414:	4b9d      	ldr	r3, [pc, #628]	; (1a68c <f_write+0x33c>)
   1a416:	4798      	blx	r3
   1a418:	0003      	movs	r3, r0
   1a41a:	627b      	str	r3, [r7, #36]	; 0x24
   1a41c:	68fb      	ldr	r3, [r7, #12]
   1a41e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1a420:	611a      	str	r2, [r3, #16]
   1a422:	e009      	b.n	1a438 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   1a424:	68fb      	ldr	r3, [r7, #12]
   1a426:	681a      	ldr	r2, [r3, #0]
   1a428:	68fb      	ldr	r3, [r7, #12]
   1a42a:	695b      	ldr	r3, [r3, #20]
   1a42c:	0019      	movs	r1, r3
   1a42e:	0010      	movs	r0, r2
   1a430:	4b96      	ldr	r3, [pc, #600]	; (1a68c <f_write+0x33c>)
   1a432:	4798      	blx	r3
   1a434:	0003      	movs	r3, r0
   1a436:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   1a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a43a:	2b00      	cmp	r3, #0
   1a43c:	d100      	bne.n	1a440 <f_write+0xf0>
   1a43e:	e10c      	b.n	1a65a <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   1a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a442:	2b01      	cmp	r3, #1
   1a444:	d109      	bne.n	1a45a <f_write+0x10a>
   1a446:	68fb      	ldr	r3, [r7, #12]
   1a448:	799b      	ldrb	r3, [r3, #6]
   1a44a:	2280      	movs	r2, #128	; 0x80
   1a44c:	4252      	negs	r2, r2
   1a44e:	4313      	orrs	r3, r2
   1a450:	b2da      	uxtb	r2, r3
   1a452:	68fb      	ldr	r3, [r7, #12]
   1a454:	719a      	strb	r2, [r3, #6]
   1a456:	2302      	movs	r3, #2
   1a458:	e112      	b.n	1a680 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   1a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a45c:	3301      	adds	r3, #1
   1a45e:	d109      	bne.n	1a474 <f_write+0x124>
   1a460:	68fb      	ldr	r3, [r7, #12]
   1a462:	799b      	ldrb	r3, [r3, #6]
   1a464:	2280      	movs	r2, #128	; 0x80
   1a466:	4252      	negs	r2, r2
   1a468:	4313      	orrs	r3, r2
   1a46a:	b2da      	uxtb	r2, r3
   1a46c:	68fb      	ldr	r3, [r7, #12]
   1a46e:	719a      	strb	r2, [r3, #6]
   1a470:	2301      	movs	r3, #1
   1a472:	e105      	b.n	1a680 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   1a474:	68fb      	ldr	r3, [r7, #12]
   1a476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1a478:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   1a47a:	68fb      	ldr	r3, [r7, #12]
   1a47c:	681b      	ldr	r3, [r3, #0]
   1a47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a480:	68fb      	ldr	r3, [r7, #12]
   1a482:	699b      	ldr	r3, [r3, #24]
   1a484:	429a      	cmp	r2, r3
   1a486:	d111      	bne.n	1a4ac <f_write+0x15c>
   1a488:	68fb      	ldr	r3, [r7, #12]
   1a48a:	681b      	ldr	r3, [r3, #0]
   1a48c:	2100      	movs	r1, #0
   1a48e:	0018      	movs	r0, r3
   1a490:	4b7f      	ldr	r3, [pc, #508]	; (1a690 <f_write+0x340>)
   1a492:	4798      	blx	r3
   1a494:	1e03      	subs	r3, r0, #0
   1a496:	d009      	beq.n	1a4ac <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   1a498:	68fb      	ldr	r3, [r7, #12]
   1a49a:	799b      	ldrb	r3, [r3, #6]
   1a49c:	2280      	movs	r2, #128	; 0x80
   1a49e:	4252      	negs	r2, r2
   1a4a0:	4313      	orrs	r3, r2
   1a4a2:	b2da      	uxtb	r2, r3
   1a4a4:	68fb      	ldr	r3, [r7, #12]
   1a4a6:	719a      	strb	r2, [r3, #6]
   1a4a8:	2301      	movs	r3, #1
   1a4aa:	e0e9      	b.n	1a680 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   1a4ac:	68fb      	ldr	r3, [r7, #12]
   1a4ae:	681a      	ldr	r2, [r3, #0]
   1a4b0:	68fb      	ldr	r3, [r7, #12]
   1a4b2:	695b      	ldr	r3, [r3, #20]
   1a4b4:	0019      	movs	r1, r3
   1a4b6:	0010      	movs	r0, r2
   1a4b8:	4b76      	ldr	r3, [pc, #472]	; (1a694 <f_write+0x344>)
   1a4ba:	4798      	blx	r3
   1a4bc:	0003      	movs	r3, r0
   1a4be:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1a4c0:	693b      	ldr	r3, [r7, #16]
   1a4c2:	2b00      	cmp	r3, #0
   1a4c4:	d109      	bne.n	1a4da <f_write+0x18a>
   1a4c6:	68fb      	ldr	r3, [r7, #12]
   1a4c8:	799b      	ldrb	r3, [r3, #6]
   1a4ca:	2280      	movs	r2, #128	; 0x80
   1a4cc:	4252      	negs	r2, r2
   1a4ce:	4313      	orrs	r3, r2
   1a4d0:	b2da      	uxtb	r2, r3
   1a4d2:	68fb      	ldr	r3, [r7, #12]
   1a4d4:	719a      	strb	r2, [r3, #6]
   1a4d6:	2302      	movs	r3, #2
   1a4d8:	e0d2      	b.n	1a680 <f_write+0x330>
			sect += csect;
   1a4da:	2316      	movs	r3, #22
   1a4dc:	18fb      	adds	r3, r7, r3
   1a4de:	781b      	ldrb	r3, [r3, #0]
   1a4e0:	693a      	ldr	r2, [r7, #16]
   1a4e2:	18d3      	adds	r3, r2, r3
   1a4e4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   1a4e6:	687b      	ldr	r3, [r7, #4]
   1a4e8:	0a5b      	lsrs	r3, r3, #9
   1a4ea:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   1a4ec:	69fb      	ldr	r3, [r7, #28]
   1a4ee:	2b00      	cmp	r3, #0
   1a4f0:	d048      	beq.n	1a584 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   1a4f2:	2316      	movs	r3, #22
   1a4f4:	18fb      	adds	r3, r7, r3
   1a4f6:	781a      	ldrb	r2, [r3, #0]
   1a4f8:	69fb      	ldr	r3, [r7, #28]
   1a4fa:	18d2      	adds	r2, r2, r3
   1a4fc:	68fb      	ldr	r3, [r7, #12]
   1a4fe:	681b      	ldr	r3, [r3, #0]
   1a500:	789b      	ldrb	r3, [r3, #2]
   1a502:	429a      	cmp	r2, r3
   1a504:	d908      	bls.n	1a518 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   1a506:	68fb      	ldr	r3, [r7, #12]
   1a508:	681b      	ldr	r3, [r3, #0]
   1a50a:	789b      	ldrb	r3, [r3, #2]
   1a50c:	001a      	movs	r2, r3
   1a50e:	2316      	movs	r3, #22
   1a510:	18fb      	adds	r3, r7, r3
   1a512:	781b      	ldrb	r3, [r3, #0]
   1a514:	1ad3      	subs	r3, r2, r3
   1a516:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   1a518:	68fb      	ldr	r3, [r7, #12]
   1a51a:	681b      	ldr	r3, [r3, #0]
   1a51c:	7858      	ldrb	r0, [r3, #1]
   1a51e:	69fb      	ldr	r3, [r7, #28]
   1a520:	b2db      	uxtb	r3, r3
   1a522:	693a      	ldr	r2, [r7, #16]
   1a524:	69b9      	ldr	r1, [r7, #24]
   1a526:	4c5c      	ldr	r4, [pc, #368]	; (1a698 <f_write+0x348>)
   1a528:	47a0      	blx	r4
   1a52a:	1e03      	subs	r3, r0, #0
   1a52c:	d009      	beq.n	1a542 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   1a52e:	68fb      	ldr	r3, [r7, #12]
   1a530:	799b      	ldrb	r3, [r3, #6]
   1a532:	2280      	movs	r2, #128	; 0x80
   1a534:	4252      	negs	r2, r2
   1a536:	4313      	orrs	r3, r2
   1a538:	b2da      	uxtb	r2, r3
   1a53a:	68fb      	ldr	r3, [r7, #12]
   1a53c:	719a      	strb	r2, [r3, #6]
   1a53e:	2301      	movs	r3, #1
   1a540:	e09e      	b.n	1a680 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   1a542:	68fb      	ldr	r3, [r7, #12]
   1a544:	681b      	ldr	r3, [r3, #0]
   1a546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a548:	693b      	ldr	r3, [r7, #16]
   1a54a:	1ad2      	subs	r2, r2, r3
   1a54c:	69fb      	ldr	r3, [r7, #28]
   1a54e:	429a      	cmp	r2, r3
   1a550:	d214      	bcs.n	1a57c <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   1a552:	68fb      	ldr	r3, [r7, #12]
   1a554:	681b      	ldr	r3, [r3, #0]
   1a556:	3330      	adds	r3, #48	; 0x30
   1a558:	0018      	movs	r0, r3
   1a55a:	68fb      	ldr	r3, [r7, #12]
   1a55c:	681b      	ldr	r3, [r3, #0]
   1a55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a560:	693b      	ldr	r3, [r7, #16]
   1a562:	1ad3      	subs	r3, r2, r3
   1a564:	025b      	lsls	r3, r3, #9
   1a566:	69ba      	ldr	r2, [r7, #24]
   1a568:	18d1      	adds	r1, r2, r3
   1a56a:	2380      	movs	r3, #128	; 0x80
   1a56c:	009b      	lsls	r3, r3, #2
   1a56e:	001a      	movs	r2, r3
   1a570:	4b4a      	ldr	r3, [pc, #296]	; (1a69c <f_write+0x34c>)
   1a572:	4798      	blx	r3
					fp->fs->wflag = 0;
   1a574:	68fb      	ldr	r3, [r7, #12]
   1a576:	681b      	ldr	r3, [r3, #0]
   1a578:	2200      	movs	r2, #0
   1a57a:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   1a57c:	69fb      	ldr	r3, [r7, #28]
   1a57e:	025b      	lsls	r3, r3, #9
   1a580:	623b      	str	r3, [r7, #32]
				continue;
   1a582:	e051      	b.n	1a628 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   1a584:	68fb      	ldr	r3, [r7, #12]
   1a586:	689a      	ldr	r2, [r3, #8]
   1a588:	68fb      	ldr	r3, [r7, #12]
   1a58a:	68db      	ldr	r3, [r3, #12]
   1a58c:	429a      	cmp	r2, r3
   1a58e:	d315      	bcc.n	1a5bc <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   1a590:	68fb      	ldr	r3, [r7, #12]
   1a592:	681b      	ldr	r3, [r3, #0]
   1a594:	2100      	movs	r1, #0
   1a596:	0018      	movs	r0, r3
   1a598:	4b3d      	ldr	r3, [pc, #244]	; (1a690 <f_write+0x340>)
   1a59a:	4798      	blx	r3
   1a59c:	1e03      	subs	r3, r0, #0
   1a59e:	d009      	beq.n	1a5b4 <f_write+0x264>
   1a5a0:	68fb      	ldr	r3, [r7, #12]
   1a5a2:	799b      	ldrb	r3, [r3, #6]
   1a5a4:	2280      	movs	r2, #128	; 0x80
   1a5a6:	4252      	negs	r2, r2
   1a5a8:	4313      	orrs	r3, r2
   1a5aa:	b2da      	uxtb	r2, r3
   1a5ac:	68fb      	ldr	r3, [r7, #12]
   1a5ae:	719a      	strb	r2, [r3, #6]
   1a5b0:	2301      	movs	r3, #1
   1a5b2:	e065      	b.n	1a680 <f_write+0x330>
				fp->fs->winsect = sect;
   1a5b4:	68fb      	ldr	r3, [r7, #12]
   1a5b6:	681b      	ldr	r3, [r3, #0]
   1a5b8:	693a      	ldr	r2, [r7, #16]
   1a5ba:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   1a5bc:	68fb      	ldr	r3, [r7, #12]
   1a5be:	693a      	ldr	r2, [r7, #16]
   1a5c0:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   1a5c2:	68fb      	ldr	r3, [r7, #12]
   1a5c4:	689b      	ldr	r3, [r3, #8]
   1a5c6:	05db      	lsls	r3, r3, #23
   1a5c8:	0ddb      	lsrs	r3, r3, #23
   1a5ca:	2280      	movs	r2, #128	; 0x80
   1a5cc:	0092      	lsls	r2, r2, #2
   1a5ce:	1ad3      	subs	r3, r2, r3
   1a5d0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   1a5d2:	6a3a      	ldr	r2, [r7, #32]
   1a5d4:	687b      	ldr	r3, [r7, #4]
   1a5d6:	429a      	cmp	r2, r3
   1a5d8:	d901      	bls.n	1a5de <f_write+0x28e>
   1a5da:	687b      	ldr	r3, [r7, #4]
   1a5dc:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   1a5de:	68fb      	ldr	r3, [r7, #12]
   1a5e0:	681a      	ldr	r2, [r3, #0]
   1a5e2:	68fb      	ldr	r3, [r7, #12]
   1a5e4:	699b      	ldr	r3, [r3, #24]
   1a5e6:	0019      	movs	r1, r3
   1a5e8:	0010      	movs	r0, r2
   1a5ea:	4b29      	ldr	r3, [pc, #164]	; (1a690 <f_write+0x340>)
   1a5ec:	4798      	blx	r3
   1a5ee:	1e03      	subs	r3, r0, #0
   1a5f0:	d009      	beq.n	1a606 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   1a5f2:	68fb      	ldr	r3, [r7, #12]
   1a5f4:	799b      	ldrb	r3, [r3, #6]
   1a5f6:	2280      	movs	r2, #128	; 0x80
   1a5f8:	4252      	negs	r2, r2
   1a5fa:	4313      	orrs	r3, r2
   1a5fc:	b2da      	uxtb	r2, r3
   1a5fe:	68fb      	ldr	r3, [r7, #12]
   1a600:	719a      	strb	r2, [r3, #6]
   1a602:	2301      	movs	r3, #1
   1a604:	e03c      	b.n	1a680 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   1a606:	68fb      	ldr	r3, [r7, #12]
   1a608:	681a      	ldr	r2, [r3, #0]
   1a60a:	68fb      	ldr	r3, [r7, #12]
   1a60c:	689b      	ldr	r3, [r3, #8]
   1a60e:	05db      	lsls	r3, r3, #23
   1a610:	0ddb      	lsrs	r3, r3, #23
   1a612:	3330      	adds	r3, #48	; 0x30
   1a614:	18d3      	adds	r3, r2, r3
   1a616:	6a3a      	ldr	r2, [r7, #32]
   1a618:	69b9      	ldr	r1, [r7, #24]
   1a61a:	0018      	movs	r0, r3
   1a61c:	4b1f      	ldr	r3, [pc, #124]	; (1a69c <f_write+0x34c>)
   1a61e:	4798      	blx	r3
		fp->fs->wflag = 1;
   1a620:	68fb      	ldr	r3, [r7, #12]
   1a622:	681b      	ldr	r3, [r3, #0]
   1a624:	2201      	movs	r2, #1
   1a626:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   1a628:	69ba      	ldr	r2, [r7, #24]
   1a62a:	6a3b      	ldr	r3, [r7, #32]
   1a62c:	18d3      	adds	r3, r2, r3
   1a62e:	61bb      	str	r3, [r7, #24]
   1a630:	68fb      	ldr	r3, [r7, #12]
   1a632:	689a      	ldr	r2, [r3, #8]
   1a634:	6a3b      	ldr	r3, [r7, #32]
   1a636:	18d2      	adds	r2, r2, r3
   1a638:	68fb      	ldr	r3, [r7, #12]
   1a63a:	609a      	str	r2, [r3, #8]
   1a63c:	683b      	ldr	r3, [r7, #0]
   1a63e:	681a      	ldr	r2, [r3, #0]
   1a640:	6a3b      	ldr	r3, [r7, #32]
   1a642:	18d2      	adds	r2, r2, r3
   1a644:	683b      	ldr	r3, [r7, #0]
   1a646:	601a      	str	r2, [r3, #0]
   1a648:	687a      	ldr	r2, [r7, #4]
   1a64a:	6a3b      	ldr	r3, [r7, #32]
   1a64c:	1ad3      	subs	r3, r2, r3
   1a64e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   1a650:	687b      	ldr	r3, [r7, #4]
   1a652:	2b00      	cmp	r3, #0
   1a654:	d000      	beq.n	1a658 <f_write+0x308>
   1a656:	e6b7      	b.n	1a3c8 <f_write+0x78>
   1a658:	e000      	b.n	1a65c <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   1a65a:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   1a65c:	68fb      	ldr	r3, [r7, #12]
   1a65e:	689a      	ldr	r2, [r3, #8]
   1a660:	68fb      	ldr	r3, [r7, #12]
   1a662:	68db      	ldr	r3, [r3, #12]
   1a664:	429a      	cmp	r2, r3
   1a666:	d903      	bls.n	1a670 <f_write+0x320>
   1a668:	68fb      	ldr	r3, [r7, #12]
   1a66a:	689a      	ldr	r2, [r3, #8]
   1a66c:	68fb      	ldr	r3, [r7, #12]
   1a66e:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   1a670:	68fb      	ldr	r3, [r7, #12]
   1a672:	799b      	ldrb	r3, [r3, #6]
   1a674:	2220      	movs	r2, #32
   1a676:	4313      	orrs	r3, r2
   1a678:	b2da      	uxtb	r2, r3
   1a67a:	68fb      	ldr	r3, [r7, #12]
   1a67c:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   1a67e:	2300      	movs	r3, #0
}
   1a680:	0018      	movs	r0, r3
   1a682:	46bd      	mov	sp, r7
   1a684:	b00b      	add	sp, #44	; 0x2c
   1a686:	bd90      	pop	{r4, r7, pc}
   1a688:	00019d75 	.word	0x00019d75
   1a68c:	00018401 	.word	0x00018401
   1a690:	00017cf9 	.word	0x00017cf9
   1a694:	00017f59 	.word	0x00017f59
   1a698:	000179e5 	.word	0x000179e5
   1a69c:	00017c15 	.word	0x00017c15

0001a6a0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   1a6a0:	b590      	push	{r4, r7, lr}
   1a6a2:	b087      	sub	sp, #28
   1a6a4:	af00      	add	r7, sp, #0
   1a6a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   1a6a8:	687b      	ldr	r3, [r7, #4]
   1a6aa:	681a      	ldr	r2, [r3, #0]
   1a6ac:	687b      	ldr	r3, [r7, #4]
   1a6ae:	889b      	ldrh	r3, [r3, #4]
   1a6b0:	2117      	movs	r1, #23
   1a6b2:	187c      	adds	r4, r7, r1
   1a6b4:	0019      	movs	r1, r3
   1a6b6:	0010      	movs	r0, r2
   1a6b8:	4b55      	ldr	r3, [pc, #340]	; (1a810 <f_sync+0x170>)
   1a6ba:	4798      	blx	r3
   1a6bc:	0003      	movs	r3, r0
   1a6be:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   1a6c0:	2317      	movs	r3, #23
   1a6c2:	18fb      	adds	r3, r7, r3
   1a6c4:	781b      	ldrb	r3, [r3, #0]
   1a6c6:	2b00      	cmp	r3, #0
   1a6c8:	d000      	beq.n	1a6cc <f_sync+0x2c>
   1a6ca:	e09a      	b.n	1a802 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   1a6cc:	687b      	ldr	r3, [r7, #4]
   1a6ce:	799b      	ldrb	r3, [r3, #6]
   1a6d0:	001a      	movs	r2, r3
   1a6d2:	2320      	movs	r3, #32
   1a6d4:	4013      	ands	r3, r2
   1a6d6:	d100      	bne.n	1a6da <f_sync+0x3a>
   1a6d8:	e093      	b.n	1a802 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   1a6da:	687b      	ldr	r3, [r7, #4]
   1a6dc:	681a      	ldr	r2, [r3, #0]
   1a6de:	687b      	ldr	r3, [r7, #4]
   1a6e0:	69db      	ldr	r3, [r3, #28]
   1a6e2:	2117      	movs	r1, #23
   1a6e4:	187c      	adds	r4, r7, r1
   1a6e6:	0019      	movs	r1, r3
   1a6e8:	0010      	movs	r0, r2
   1a6ea:	4b4a      	ldr	r3, [pc, #296]	; (1a814 <f_sync+0x174>)
   1a6ec:	4798      	blx	r3
   1a6ee:	0003      	movs	r3, r0
   1a6f0:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   1a6f2:	2317      	movs	r3, #23
   1a6f4:	18fb      	adds	r3, r7, r3
   1a6f6:	781b      	ldrb	r3, [r3, #0]
   1a6f8:	2b00      	cmp	r3, #0
   1a6fa:	d000      	beq.n	1a6fe <f_sync+0x5e>
   1a6fc:	e081      	b.n	1a802 <f_sync+0x162>
				dir = fp->dir_ptr;
   1a6fe:	687b      	ldr	r3, [r7, #4]
   1a700:	6a1b      	ldr	r3, [r3, #32]
   1a702:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   1a704:	693b      	ldr	r3, [r7, #16]
   1a706:	330b      	adds	r3, #11
   1a708:	693a      	ldr	r2, [r7, #16]
   1a70a:	320b      	adds	r2, #11
   1a70c:	7812      	ldrb	r2, [r2, #0]
   1a70e:	2120      	movs	r1, #32
   1a710:	430a      	orrs	r2, r1
   1a712:	b2d2      	uxtb	r2, r2
   1a714:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   1a716:	693b      	ldr	r3, [r7, #16]
   1a718:	331c      	adds	r3, #28
   1a71a:	001a      	movs	r2, r3
   1a71c:	687b      	ldr	r3, [r7, #4]
   1a71e:	68db      	ldr	r3, [r3, #12]
   1a720:	b2db      	uxtb	r3, r3
   1a722:	7013      	strb	r3, [r2, #0]
   1a724:	693b      	ldr	r3, [r7, #16]
   1a726:	331d      	adds	r3, #29
   1a728:	001a      	movs	r2, r3
   1a72a:	687b      	ldr	r3, [r7, #4]
   1a72c:	68db      	ldr	r3, [r3, #12]
   1a72e:	b29b      	uxth	r3, r3
   1a730:	0a1b      	lsrs	r3, r3, #8
   1a732:	b29b      	uxth	r3, r3
   1a734:	b2db      	uxtb	r3, r3
   1a736:	7013      	strb	r3, [r2, #0]
   1a738:	693b      	ldr	r3, [r7, #16]
   1a73a:	331e      	adds	r3, #30
   1a73c:	001a      	movs	r2, r3
   1a73e:	687b      	ldr	r3, [r7, #4]
   1a740:	68db      	ldr	r3, [r3, #12]
   1a742:	0c1b      	lsrs	r3, r3, #16
   1a744:	b2db      	uxtb	r3, r3
   1a746:	7013      	strb	r3, [r2, #0]
   1a748:	693b      	ldr	r3, [r7, #16]
   1a74a:	331f      	adds	r3, #31
   1a74c:	001a      	movs	r2, r3
   1a74e:	687b      	ldr	r3, [r7, #4]
   1a750:	68db      	ldr	r3, [r3, #12]
   1a752:	0e1b      	lsrs	r3, r3, #24
   1a754:	b2db      	uxtb	r3, r3
   1a756:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   1a758:	693b      	ldr	r3, [r7, #16]
   1a75a:	331a      	adds	r3, #26
   1a75c:	001a      	movs	r2, r3
   1a75e:	687b      	ldr	r3, [r7, #4]
   1a760:	691b      	ldr	r3, [r3, #16]
   1a762:	b2db      	uxtb	r3, r3
   1a764:	7013      	strb	r3, [r2, #0]
   1a766:	693b      	ldr	r3, [r7, #16]
   1a768:	331b      	adds	r3, #27
   1a76a:	001a      	movs	r2, r3
   1a76c:	687b      	ldr	r3, [r7, #4]
   1a76e:	691b      	ldr	r3, [r3, #16]
   1a770:	b29b      	uxth	r3, r3
   1a772:	0a1b      	lsrs	r3, r3, #8
   1a774:	b29b      	uxth	r3, r3
   1a776:	b2db      	uxtb	r3, r3
   1a778:	7013      	strb	r3, [r2, #0]
   1a77a:	693b      	ldr	r3, [r7, #16]
   1a77c:	3314      	adds	r3, #20
   1a77e:	001a      	movs	r2, r3
   1a780:	687b      	ldr	r3, [r7, #4]
   1a782:	691b      	ldr	r3, [r3, #16]
   1a784:	0c1b      	lsrs	r3, r3, #16
   1a786:	b2db      	uxtb	r3, r3
   1a788:	7013      	strb	r3, [r2, #0]
   1a78a:	693b      	ldr	r3, [r7, #16]
   1a78c:	3315      	adds	r3, #21
   1a78e:	001a      	movs	r2, r3
   1a790:	687b      	ldr	r3, [r7, #4]
   1a792:	691b      	ldr	r3, [r3, #16]
   1a794:	0c1b      	lsrs	r3, r3, #16
   1a796:	b29b      	uxth	r3, r3
   1a798:	0a1b      	lsrs	r3, r3, #8
   1a79a:	b29b      	uxth	r3, r3
   1a79c:	b2db      	uxtb	r3, r3
   1a79e:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   1a7a0:	4b1d      	ldr	r3, [pc, #116]	; (1a818 <f_sync+0x178>)
   1a7a2:	4798      	blx	r3
   1a7a4:	0003      	movs	r3, r0
   1a7a6:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   1a7a8:	693b      	ldr	r3, [r7, #16]
   1a7aa:	3316      	adds	r3, #22
   1a7ac:	68fa      	ldr	r2, [r7, #12]
   1a7ae:	b2d2      	uxtb	r2, r2
   1a7b0:	701a      	strb	r2, [r3, #0]
   1a7b2:	693b      	ldr	r3, [r7, #16]
   1a7b4:	3317      	adds	r3, #23
   1a7b6:	68fa      	ldr	r2, [r7, #12]
   1a7b8:	b292      	uxth	r2, r2
   1a7ba:	0a12      	lsrs	r2, r2, #8
   1a7bc:	b292      	uxth	r2, r2
   1a7be:	b2d2      	uxtb	r2, r2
   1a7c0:	701a      	strb	r2, [r3, #0]
   1a7c2:	693b      	ldr	r3, [r7, #16]
   1a7c4:	3318      	adds	r3, #24
   1a7c6:	68fa      	ldr	r2, [r7, #12]
   1a7c8:	0c12      	lsrs	r2, r2, #16
   1a7ca:	b2d2      	uxtb	r2, r2
   1a7cc:	701a      	strb	r2, [r3, #0]
   1a7ce:	693b      	ldr	r3, [r7, #16]
   1a7d0:	3319      	adds	r3, #25
   1a7d2:	68fa      	ldr	r2, [r7, #12]
   1a7d4:	0e12      	lsrs	r2, r2, #24
   1a7d6:	b2d2      	uxtb	r2, r2
   1a7d8:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   1a7da:	687b      	ldr	r3, [r7, #4]
   1a7dc:	799b      	ldrb	r3, [r3, #6]
   1a7de:	2220      	movs	r2, #32
   1a7e0:	4393      	bics	r3, r2
   1a7e2:	b2da      	uxtb	r2, r3
   1a7e4:	687b      	ldr	r3, [r7, #4]
   1a7e6:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   1a7e8:	687b      	ldr	r3, [r7, #4]
   1a7ea:	681b      	ldr	r3, [r3, #0]
   1a7ec:	2201      	movs	r2, #1
   1a7ee:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   1a7f0:	687b      	ldr	r3, [r7, #4]
   1a7f2:	681b      	ldr	r3, [r3, #0]
   1a7f4:	2217      	movs	r2, #23
   1a7f6:	18bc      	adds	r4, r7, r2
   1a7f8:	0018      	movs	r0, r3
   1a7fa:	4b08      	ldr	r3, [pc, #32]	; (1a81c <f_sync+0x17c>)
   1a7fc:	4798      	blx	r3
   1a7fe:	0003      	movs	r3, r0
   1a800:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   1a802:	2317      	movs	r3, #23
   1a804:	18fb      	adds	r3, r7, r3
   1a806:	781b      	ldrb	r3, [r3, #0]
}
   1a808:	0018      	movs	r0, r3
   1a80a:	46bd      	mov	sp, r7
   1a80c:	b007      	add	sp, #28
   1a80e:	bd90      	pop	{r4, r7, pc}
   1a810:	00019d75 	.word	0x00019d75
   1a814:	00017cf9 	.word	0x00017cf9
   1a818:	00017bb5 	.word	0x00017bb5
   1a81c:	00017dc1 	.word	0x00017dc1

0001a820 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   1a820:	b590      	push	{r4, r7, lr}
   1a822:	b085      	sub	sp, #20
   1a824:	af00      	add	r7, sp, #0
   1a826:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   1a828:	230f      	movs	r3, #15
   1a82a:	18fc      	adds	r4, r7, r3
   1a82c:	687b      	ldr	r3, [r7, #4]
   1a82e:	0018      	movs	r0, r3
   1a830:	4b09      	ldr	r3, [pc, #36]	; (1a858 <f_close+0x38>)
   1a832:	4798      	blx	r3
   1a834:	0003      	movs	r3, r0
   1a836:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   1a838:	230f      	movs	r3, #15
   1a83a:	18fb      	adds	r3, r7, r3
   1a83c:	781b      	ldrb	r3, [r3, #0]
   1a83e:	2b00      	cmp	r3, #0
   1a840:	d102      	bne.n	1a848 <f_close+0x28>
   1a842:	687b      	ldr	r3, [r7, #4]
   1a844:	2200      	movs	r2, #0
   1a846:	601a      	str	r2, [r3, #0]
	return res;
   1a848:	230f      	movs	r3, #15
   1a84a:	18fb      	adds	r3, r7, r3
   1a84c:	781b      	ldrb	r3, [r3, #0]
#endif
}
   1a84e:	0018      	movs	r0, r3
   1a850:	46bd      	mov	sp, r7
   1a852:	b005      	add	sp, #20
   1a854:	bd90      	pop	{r4, r7, pc}
   1a856:	46c0      	nop			; (mov r8, r8)
   1a858:	0001a6a1 	.word	0x0001a6a1

0001a85c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   1a85c:	b580      	push	{r7, lr}
   1a85e:	b084      	sub	sp, #16
   1a860:	af00      	add	r7, sp, #0
   1a862:	0002      	movs	r2, r0
   1a864:	6039      	str	r1, [r7, #0]
   1a866:	1dbb      	adds	r3, r7, #6
   1a868:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   1a86a:	1dbb      	adds	r3, r7, #6
   1a86c:	881b      	ldrh	r3, [r3, #0]
   1a86e:	2b7f      	cmp	r3, #127	; 0x7f
   1a870:	d805      	bhi.n	1a87e <ff_convert+0x22>
		c = src;
   1a872:	230e      	movs	r3, #14
   1a874:	18fb      	adds	r3, r7, r3
   1a876:	1dba      	adds	r2, r7, #6
   1a878:	8812      	ldrh	r2, [r2, #0]
   1a87a:	801a      	strh	r2, [r3, #0]
   1a87c:	e03a      	b.n	1a8f4 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   1a87e:	683b      	ldr	r3, [r7, #0]
   1a880:	2b00      	cmp	r3, #0
   1a882:	d010      	beq.n	1a8a6 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   1a884:	1dbb      	adds	r3, r7, #6
   1a886:	881b      	ldrh	r3, [r3, #0]
   1a888:	2bff      	cmp	r3, #255	; 0xff
   1a88a:	d807      	bhi.n	1a89c <ff_convert+0x40>
   1a88c:	1dbb      	adds	r3, r7, #6
   1a88e:	881b      	ldrh	r3, [r3, #0]
   1a890:	3b80      	subs	r3, #128	; 0x80
   1a892:	001a      	movs	r2, r3
   1a894:	4b1b      	ldr	r3, [pc, #108]	; (1a904 <ff_convert+0xa8>)
   1a896:	0052      	lsls	r2, r2, #1
   1a898:	5ad2      	ldrh	r2, [r2, r3]
   1a89a:	e000      	b.n	1a89e <ff_convert+0x42>
   1a89c:	2200      	movs	r2, #0
   1a89e:	230e      	movs	r3, #14
   1a8a0:	18fb      	adds	r3, r7, r3
   1a8a2:	801a      	strh	r2, [r3, #0]
   1a8a4:	e026      	b.n	1a8f4 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   1a8a6:	230e      	movs	r3, #14
   1a8a8:	18fb      	adds	r3, r7, r3
   1a8aa:	2200      	movs	r2, #0
   1a8ac:	801a      	strh	r2, [r3, #0]
   1a8ae:	e010      	b.n	1a8d2 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   1a8b0:	230e      	movs	r3, #14
   1a8b2:	18fb      	adds	r3, r7, r3
   1a8b4:	881a      	ldrh	r2, [r3, #0]
   1a8b6:	4b13      	ldr	r3, [pc, #76]	; (1a904 <ff_convert+0xa8>)
   1a8b8:	0052      	lsls	r2, r2, #1
   1a8ba:	5ad3      	ldrh	r3, [r2, r3]
   1a8bc:	1dba      	adds	r2, r7, #6
   1a8be:	8812      	ldrh	r2, [r2, #0]
   1a8c0:	429a      	cmp	r2, r3
   1a8c2:	d00c      	beq.n	1a8de <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   1a8c4:	230e      	movs	r3, #14
   1a8c6:	18fb      	adds	r3, r7, r3
   1a8c8:	881a      	ldrh	r2, [r3, #0]
   1a8ca:	230e      	movs	r3, #14
   1a8cc:	18fb      	adds	r3, r7, r3
   1a8ce:	3201      	adds	r2, #1
   1a8d0:	801a      	strh	r2, [r3, #0]
   1a8d2:	230e      	movs	r3, #14
   1a8d4:	18fb      	adds	r3, r7, r3
   1a8d6:	881b      	ldrh	r3, [r3, #0]
   1a8d8:	2b7f      	cmp	r3, #127	; 0x7f
   1a8da:	d9e9      	bls.n	1a8b0 <ff_convert+0x54>
   1a8dc:	e000      	b.n	1a8e0 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   1a8de:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   1a8e0:	230e      	movs	r3, #14
   1a8e2:	18fb      	adds	r3, r7, r3
   1a8e4:	881b      	ldrh	r3, [r3, #0]
   1a8e6:	3380      	adds	r3, #128	; 0x80
   1a8e8:	b29a      	uxth	r2, r3
   1a8ea:	230e      	movs	r3, #14
   1a8ec:	18fb      	adds	r3, r7, r3
   1a8ee:	21ff      	movs	r1, #255	; 0xff
   1a8f0:	400a      	ands	r2, r1
   1a8f2:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   1a8f4:	230e      	movs	r3, #14
   1a8f6:	18fb      	adds	r3, r7, r3
   1a8f8:	881b      	ldrh	r3, [r3, #0]
}
   1a8fa:	0018      	movs	r0, r3
   1a8fc:	46bd      	mov	sp, r7
   1a8fe:	b004      	add	sp, #16
   1a900:	bd80      	pop	{r7, pc}
   1a902:	46c0      	nop			; (mov r8, r8)
   1a904:	0002663c 	.word	0x0002663c

0001a908 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   1a908:	b580      	push	{r7, lr}
   1a90a:	b084      	sub	sp, #16
   1a90c:	af00      	add	r7, sp, #0
   1a90e:	0002      	movs	r2, r0
   1a910:	1dbb      	adds	r3, r7, #6
   1a912:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   1a914:	2300      	movs	r3, #0
   1a916:	60fb      	str	r3, [r7, #12]
   1a918:	e002      	b.n	1a920 <ff_wtoupper+0x18>
   1a91a:	68fb      	ldr	r3, [r7, #12]
   1a91c:	3301      	adds	r3, #1
   1a91e:	60fb      	str	r3, [r7, #12]
   1a920:	4b0f      	ldr	r3, [pc, #60]	; (1a960 <ff_wtoupper+0x58>)
   1a922:	68fa      	ldr	r2, [r7, #12]
   1a924:	0052      	lsls	r2, r2, #1
   1a926:	5ad3      	ldrh	r3, [r2, r3]
   1a928:	2b00      	cmp	r3, #0
   1a92a:	d007      	beq.n	1a93c <ff_wtoupper+0x34>
   1a92c:	4b0c      	ldr	r3, [pc, #48]	; (1a960 <ff_wtoupper+0x58>)
   1a92e:	68fa      	ldr	r2, [r7, #12]
   1a930:	0052      	lsls	r2, r2, #1
   1a932:	5ad3      	ldrh	r3, [r2, r3]
   1a934:	1dba      	adds	r2, r7, #6
   1a936:	8812      	ldrh	r2, [r2, #0]
   1a938:	429a      	cmp	r2, r3
   1a93a:	d1ee      	bne.n	1a91a <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   1a93c:	4b08      	ldr	r3, [pc, #32]	; (1a960 <ff_wtoupper+0x58>)
   1a93e:	68fa      	ldr	r2, [r7, #12]
   1a940:	0052      	lsls	r2, r2, #1
   1a942:	5ad3      	ldrh	r3, [r2, r3]
   1a944:	2b00      	cmp	r3, #0
   1a946:	d004      	beq.n	1a952 <ff_wtoupper+0x4a>
   1a948:	4b06      	ldr	r3, [pc, #24]	; (1a964 <ff_wtoupper+0x5c>)
   1a94a:	68fa      	ldr	r2, [r7, #12]
   1a94c:	0052      	lsls	r2, r2, #1
   1a94e:	5ad3      	ldrh	r3, [r2, r3]
   1a950:	e001      	b.n	1a956 <ff_wtoupper+0x4e>
   1a952:	1dbb      	adds	r3, r7, #6
   1a954:	881b      	ldrh	r3, [r3, #0]
}
   1a956:	0018      	movs	r0, r3
   1a958:	46bd      	mov	sp, r7
   1a95a:	b004      	add	sp, #16
   1a95c:	bd80      	pop	{r7, pc}
   1a95e:	46c0      	nop			; (mov r8, r8)
   1a960:	0002673c 	.word	0x0002673c
   1a964:	0002691c 	.word	0x0002691c

0001a968 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   1a968:	b580      	push	{r7, lr}
   1a96a:	b084      	sub	sp, #16
   1a96c:	af00      	add	r7, sp, #0
   1a96e:	60f8      	str	r0, [r7, #12]
   1a970:	60b9      	str	r1, [r7, #8]
   1a972:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   1a974:	68fb      	ldr	r3, [r7, #12]
   1a976:	68ba      	ldr	r2, [r7, #8]
   1a978:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   1a97a:	68fb      	ldr	r3, [r7, #12]
   1a97c:	687a      	ldr	r2, [r7, #4]
   1a97e:	601a      	str	r2, [r3, #0]
}
   1a980:	46c0      	nop			; (mov r8, r8)
   1a982:	46bd      	mov	sp, r7
   1a984:	b004      	add	sp, #16
   1a986:	bd80      	pop	{r7, pc}

0001a988 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   1a988:	b580      	push	{r7, lr}
   1a98a:	b082      	sub	sp, #8
   1a98c:	af00      	add	r7, sp, #0
   1a98e:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   1a990:	687b      	ldr	r3, [r7, #4]
   1a992:	681b      	ldr	r3, [r3, #0]
   1a994:	4a07      	ldr	r2, [pc, #28]	; (1a9b4 <getNextPacketId+0x2c>)
   1a996:	4293      	cmp	r3, r2
   1a998:	d003      	beq.n	1a9a2 <getNextPacketId+0x1a>
   1a99a:	687b      	ldr	r3, [r7, #4]
   1a99c:	681b      	ldr	r3, [r3, #0]
   1a99e:	1c5a      	adds	r2, r3, #1
   1a9a0:	e000      	b.n	1a9a4 <getNextPacketId+0x1c>
   1a9a2:	2201      	movs	r2, #1
   1a9a4:	687b      	ldr	r3, [r7, #4]
   1a9a6:	601a      	str	r2, [r3, #0]
   1a9a8:	687b      	ldr	r3, [r7, #4]
   1a9aa:	681b      	ldr	r3, [r3, #0]
}
   1a9ac:	0018      	movs	r0, r3
   1a9ae:	46bd      	mov	sp, r7
   1a9b0:	b002      	add	sp, #8
   1a9b2:	bd80      	pop	{r7, pc}
   1a9b4:	0000ffff 	.word	0x0000ffff

0001a9b8 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   1a9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a9ba:	b087      	sub	sp, #28
   1a9bc:	af00      	add	r7, sp, #0
   1a9be:	60f8      	str	r0, [r7, #12]
   1a9c0:	60b9      	str	r1, [r7, #8]
   1a9c2:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   1a9c4:	2301      	movs	r3, #1
   1a9c6:	425b      	negs	r3, r3
   1a9c8:	617b      	str	r3, [r7, #20]
        sent = 0;
   1a9ca:	2300      	movs	r3, #0
   1a9cc:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   1a9ce:	e01a      	b.n	1aa06 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   1a9d0:	68fb      	ldr	r3, [r7, #12]
   1a9d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1a9d4:	68dc      	ldr	r4, [r3, #12]
   1a9d6:	68fb      	ldr	r3, [r7, #12]
   1a9d8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1a9da:	68fb      	ldr	r3, [r7, #12]
   1a9dc:	691a      	ldr	r2, [r3, #16]
   1a9de:	693b      	ldr	r3, [r7, #16]
   1a9e0:	18d6      	adds	r6, r2, r3
   1a9e2:	687b      	ldr	r3, [r7, #4]
   1a9e4:	0018      	movs	r0, r3
   1a9e6:	4b1a      	ldr	r3, [pc, #104]	; (1aa50 <sendPacket+0x98>)
   1a9e8:	4798      	blx	r3
   1a9ea:	0003      	movs	r3, r0
   1a9ec:	68ba      	ldr	r2, [r7, #8]
   1a9ee:	0031      	movs	r1, r6
   1a9f0:	0028      	movs	r0, r5
   1a9f2:	47a0      	blx	r4
   1a9f4:	0003      	movs	r3, r0
   1a9f6:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   1a9f8:	697b      	ldr	r3, [r7, #20]
   1a9fa:	2b00      	cmp	r3, #0
   1a9fc:	db0e      	blt.n	1aa1c <sendPacket+0x64>
            break;
        sent += rc;
   1a9fe:	693a      	ldr	r2, [r7, #16]
   1aa00:	697b      	ldr	r3, [r7, #20]
   1aa02:	18d3      	adds	r3, r2, r3
   1aa04:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   1aa06:	693a      	ldr	r2, [r7, #16]
   1aa08:	68bb      	ldr	r3, [r7, #8]
   1aa0a:	429a      	cmp	r2, r3
   1aa0c:	da07      	bge.n	1aa1e <sendPacket+0x66>
   1aa0e:	687b      	ldr	r3, [r7, #4]
   1aa10:	0018      	movs	r0, r3
   1aa12:	4b10      	ldr	r3, [pc, #64]	; (1aa54 <sendPacket+0x9c>)
   1aa14:	4798      	blx	r3
   1aa16:	1e03      	subs	r3, r0, #0
   1aa18:	d0da      	beq.n	1a9d0 <sendPacket+0x18>
   1aa1a:	e000      	b.n	1aa1e <sendPacket+0x66>
            break;
   1aa1c:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   1aa1e:	693a      	ldr	r2, [r7, #16]
   1aa20:	68bb      	ldr	r3, [r7, #8]
   1aa22:	429a      	cmp	r2, r3
   1aa24:	d10b      	bne.n	1aa3e <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   1aa26:	68fb      	ldr	r3, [r7, #12]
   1aa28:	3354      	adds	r3, #84	; 0x54
   1aa2a:	001a      	movs	r2, r3
   1aa2c:	68fb      	ldr	r3, [r7, #12]
   1aa2e:	699b      	ldr	r3, [r3, #24]
   1aa30:	0019      	movs	r1, r3
   1aa32:	0010      	movs	r0, r2
   1aa34:	4b08      	ldr	r3, [pc, #32]	; (1aa58 <sendPacket+0xa0>)
   1aa36:	4798      	blx	r3
        rc = SUCCESS;
   1aa38:	2300      	movs	r3, #0
   1aa3a:	617b      	str	r3, [r7, #20]
   1aa3c:	e002      	b.n	1aa44 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   1aa3e:	2301      	movs	r3, #1
   1aa40:	425b      	negs	r3, r3
   1aa42:	617b      	str	r3, [r7, #20]
    return rc;
   1aa44:	697b      	ldr	r3, [r7, #20]
}
   1aa46:	0018      	movs	r0, r3
   1aa48:	46bd      	mov	sp, r7
   1aa4a:	b007      	add	sp, #28
   1aa4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aa4e:	46c0      	nop			; (mov r8, r8)
   1aa50:	0001b819 	.word	0x0001b819
   1aa54:	0001b79d 	.word	0x0001b79d
   1aa58:	0001b7f1 	.word	0x0001b7f1

0001aa5c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   1aa5c:	b580      	push	{r7, lr}
   1aa5e:	b086      	sub	sp, #24
   1aa60:	af00      	add	r7, sp, #0
   1aa62:	60f8      	str	r0, [r7, #12]
   1aa64:	60b9      	str	r1, [r7, #8]
   1aa66:	607a      	str	r2, [r7, #4]
   1aa68:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   1aa6a:	68fb      	ldr	r3, [r7, #12]
   1aa6c:	68ba      	ldr	r2, [r7, #8]
   1aa6e:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1aa70:	2300      	movs	r3, #0
   1aa72:	617b      	str	r3, [r7, #20]
   1aa74:	e00a      	b.n	1aa8c <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   1aa76:	68fa      	ldr	r2, [r7, #12]
   1aa78:	697b      	ldr	r3, [r7, #20]
   1aa7a:	3304      	adds	r3, #4
   1aa7c:	00db      	lsls	r3, r3, #3
   1aa7e:	18d3      	adds	r3, r2, r3
   1aa80:	3304      	adds	r3, #4
   1aa82:	2200      	movs	r2, #0
   1aa84:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1aa86:	697b      	ldr	r3, [r7, #20]
   1aa88:	3301      	adds	r3, #1
   1aa8a:	617b      	str	r3, [r7, #20]
   1aa8c:	697b      	ldr	r3, [r7, #20]
   1aa8e:	2b04      	cmp	r3, #4
   1aa90:	ddf1      	ble.n	1aa76 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   1aa92:	68fb      	ldr	r3, [r7, #12]
   1aa94:	687a      	ldr	r2, [r7, #4]
   1aa96:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   1aa98:	68fb      	ldr	r3, [r7, #12]
   1aa9a:	683a      	ldr	r2, [r7, #0]
   1aa9c:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   1aa9e:	68fb      	ldr	r3, [r7, #12]
   1aaa0:	6a3a      	ldr	r2, [r7, #32]
   1aaa2:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   1aaa4:	68fb      	ldr	r3, [r7, #12]
   1aaa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1aaa8:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   1aaaa:	68fb      	ldr	r3, [r7, #12]
   1aaac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1aaae:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   1aab0:	68fb      	ldr	r3, [r7, #12]
   1aab2:	2200      	movs	r2, #0
   1aab4:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   1aab6:	68fb      	ldr	r3, [r7, #12]
   1aab8:	2200      	movs	r2, #0
   1aaba:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   1aabc:	68fb      	ldr	r3, [r7, #12]
   1aabe:	2200      	movs	r2, #0
   1aac0:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   1aac2:	68fb      	ldr	r3, [r7, #12]
   1aac4:	2201      	movs	r2, #1
   1aac6:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   1aac8:	68fb      	ldr	r3, [r7, #12]
   1aaca:	3354      	adds	r3, #84	; 0x54
   1aacc:	0018      	movs	r0, r3
   1aace:	4b03      	ldr	r3, [pc, #12]	; (1aadc <MQTTClientInit+0x80>)
   1aad0:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   1aad2:	46c0      	nop			; (mov r8, r8)
   1aad4:	46bd      	mov	sp, r7
   1aad6:	b006      	add	sp, #24
   1aad8:	bd80      	pop	{r7, pc}
   1aada:	46c0      	nop			; (mov r8, r8)
   1aadc:	0001b841 	.word	0x0001b841

0001aae0 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   1aae0:	b590      	push	{r4, r7, lr}
   1aae2:	b08b      	sub	sp, #44	; 0x2c
   1aae4:	af00      	add	r7, sp, #0
   1aae6:	60f8      	str	r0, [r7, #12]
   1aae8:	60b9      	str	r1, [r7, #8]
   1aaea:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   1aaec:	2301      	movs	r3, #1
   1aaee:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   1aaf0:	2300      	movs	r3, #0
   1aaf2:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   1aaf4:	2304      	movs	r3, #4
   1aaf6:	61fb      	str	r3, [r7, #28]

    *value = 0;
   1aaf8:	68bb      	ldr	r3, [r7, #8]
   1aafa:	2200      	movs	r2, #0
   1aafc:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   1aafe:	2301      	movs	r3, #1
   1ab00:	425b      	negs	r3, r3
   1ab02:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1ab04:	6a3b      	ldr	r3, [r7, #32]
   1ab06:	3301      	adds	r3, #1
   1ab08:	623b      	str	r3, [r7, #32]
   1ab0a:	6a3a      	ldr	r2, [r7, #32]
   1ab0c:	69fb      	ldr	r3, [r7, #28]
   1ab0e:	429a      	cmp	r2, r3
   1ab10:	dd03      	ble.n	1ab1a <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   1ab12:	2301      	movs	r3, #1
   1ab14:	425b      	negs	r3, r3
   1ab16:	61bb      	str	r3, [r7, #24]
            goto exit;
   1ab18:	e026      	b.n	1ab68 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   1ab1a:	68fb      	ldr	r3, [r7, #12]
   1ab1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1ab1e:	689c      	ldr	r4, [r3, #8]
   1ab20:	68fb      	ldr	r3, [r7, #12]
   1ab22:	6d18      	ldr	r0, [r3, #80]	; 0x50
   1ab24:	687b      	ldr	r3, [r7, #4]
   1ab26:	2217      	movs	r2, #23
   1ab28:	18b9      	adds	r1, r7, r2
   1ab2a:	2201      	movs	r2, #1
   1ab2c:	47a0      	blx	r4
   1ab2e:	0003      	movs	r3, r0
   1ab30:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   1ab32:	69bb      	ldr	r3, [r7, #24]
   1ab34:	2b01      	cmp	r3, #1
   1ab36:	d116      	bne.n	1ab66 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   1ab38:	68bb      	ldr	r3, [r7, #8]
   1ab3a:	681a      	ldr	r2, [r3, #0]
   1ab3c:	2317      	movs	r3, #23
   1ab3e:	18fb      	adds	r3, r7, r3
   1ab40:	781b      	ldrb	r3, [r3, #0]
   1ab42:	0019      	movs	r1, r3
   1ab44:	237f      	movs	r3, #127	; 0x7f
   1ab46:	400b      	ands	r3, r1
   1ab48:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ab4a:	434b      	muls	r3, r1
   1ab4c:	18d2      	adds	r2, r2, r3
   1ab4e:	68bb      	ldr	r3, [r7, #8]
   1ab50:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   1ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ab54:	01db      	lsls	r3, r3, #7
   1ab56:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   1ab58:	2317      	movs	r3, #23
   1ab5a:	18fb      	adds	r3, r7, r3
   1ab5c:	781b      	ldrb	r3, [r3, #0]
   1ab5e:	b25b      	sxtb	r3, r3
   1ab60:	2b00      	cmp	r3, #0
   1ab62:	dbcc      	blt.n	1aafe <decodePacket+0x1e>
   1ab64:	e000      	b.n	1ab68 <decodePacket+0x88>
            goto exit;
   1ab66:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   1ab68:	6a3b      	ldr	r3, [r7, #32]
}
   1ab6a:	0018      	movs	r0, r3
   1ab6c:	46bd      	mov	sp, r7
   1ab6e:	b00b      	add	sp, #44	; 0x2c
   1ab70:	bd90      	pop	{r4, r7, pc}
	...

0001ab74 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   1ab74:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab76:	46c6      	mov	lr, r8
   1ab78:	b500      	push	{lr}
   1ab7a:	b086      	sub	sp, #24
   1ab7c:	af00      	add	r7, sp, #0
   1ab7e:	6078      	str	r0, [r7, #4]
   1ab80:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   1ab82:	2301      	movs	r3, #1
   1ab84:	425b      	negs	r3, r3
   1ab86:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   1ab88:	2300      	movs	r3, #0
   1ab8a:	60fb      	str	r3, [r7, #12]
    int len = 0;
   1ab8c:	2300      	movs	r3, #0
   1ab8e:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   1ab90:	2300      	movs	r3, #0
   1ab92:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   1ab94:	687b      	ldr	r3, [r7, #4]
   1ab96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1ab98:	689c      	ldr	r4, [r3, #8]
   1ab9a:	687b      	ldr	r3, [r7, #4]
   1ab9c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1ab9e:	687b      	ldr	r3, [r7, #4]
   1aba0:	695e      	ldr	r6, [r3, #20]
   1aba2:	683b      	ldr	r3, [r7, #0]
   1aba4:	0018      	movs	r0, r3
   1aba6:	4b2b      	ldr	r3, [pc, #172]	; (1ac54 <readPacket+0xe0>)
   1aba8:	4798      	blx	r3
   1abaa:	0003      	movs	r3, r0
   1abac:	2201      	movs	r2, #1
   1abae:	0031      	movs	r1, r6
   1abb0:	0028      	movs	r0, r5
   1abb2:	47a0      	blx	r4
   1abb4:	0003      	movs	r3, r0
   1abb6:	2b01      	cmp	r3, #1
   1abb8:	d141      	bne.n	1ac3e <readPacket+0xca>
        goto exit;

    len = 1;
   1abba:	2301      	movs	r3, #1
   1abbc:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   1abbe:	683b      	ldr	r3, [r7, #0]
   1abc0:	0018      	movs	r0, r3
   1abc2:	4b24      	ldr	r3, [pc, #144]	; (1ac54 <readPacket+0xe0>)
   1abc4:	4798      	blx	r3
   1abc6:	0002      	movs	r2, r0
   1abc8:	2308      	movs	r3, #8
   1abca:	18f9      	adds	r1, r7, r3
   1abcc:	687b      	ldr	r3, [r7, #4]
   1abce:	0018      	movs	r0, r3
   1abd0:	4b21      	ldr	r3, [pc, #132]	; (1ac58 <readPacket+0xe4>)
   1abd2:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   1abd4:	687b      	ldr	r3, [r7, #4]
   1abd6:	695b      	ldr	r3, [r3, #20]
   1abd8:	3301      	adds	r3, #1
   1abda:	68ba      	ldr	r2, [r7, #8]
   1abdc:	0011      	movs	r1, r2
   1abde:	0018      	movs	r0, r3
   1abe0:	4b1e      	ldr	r3, [pc, #120]	; (1ac5c <readPacket+0xe8>)
   1abe2:	4798      	blx	r3
   1abe4:	0002      	movs	r2, r0
   1abe6:	693b      	ldr	r3, [r7, #16]
   1abe8:	189b      	adds	r3, r3, r2
   1abea:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   1abec:	68bb      	ldr	r3, [r7, #8]
   1abee:	2b00      	cmp	r3, #0
   1abf0:	dd17      	ble.n	1ac22 <readPacket+0xae>
   1abf2:	687b      	ldr	r3, [r7, #4]
   1abf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1abf6:	689c      	ldr	r4, [r3, #8]
   1abf8:	687b      	ldr	r3, [r7, #4]
   1abfa:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1abfc:	687b      	ldr	r3, [r7, #4]
   1abfe:	695a      	ldr	r2, [r3, #20]
   1ac00:	693b      	ldr	r3, [r7, #16]
   1ac02:	18d6      	adds	r6, r2, r3
   1ac04:	68bb      	ldr	r3, [r7, #8]
   1ac06:	4698      	mov	r8, r3
   1ac08:	683b      	ldr	r3, [r7, #0]
   1ac0a:	0018      	movs	r0, r3
   1ac0c:	4b11      	ldr	r3, [pc, #68]	; (1ac54 <readPacket+0xe0>)
   1ac0e:	4798      	blx	r3
   1ac10:	0003      	movs	r3, r0
   1ac12:	4642      	mov	r2, r8
   1ac14:	0031      	movs	r1, r6
   1ac16:	0028      	movs	r0, r5
   1ac18:	47a0      	blx	r4
   1ac1a:	0002      	movs	r2, r0
   1ac1c:	68bb      	ldr	r3, [r7, #8]
   1ac1e:	429a      	cmp	r2, r3
   1ac20:	d10f      	bne.n	1ac42 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   1ac22:	687b      	ldr	r3, [r7, #4]
   1ac24:	695b      	ldr	r3, [r3, #20]
   1ac26:	781a      	ldrb	r2, [r3, #0]
   1ac28:	230c      	movs	r3, #12
   1ac2a:	18fb      	adds	r3, r7, r3
   1ac2c:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   1ac2e:	230c      	movs	r3, #12
   1ac30:	18fb      	adds	r3, r7, r3
   1ac32:	781b      	ldrb	r3, [r3, #0]
   1ac34:	061b      	lsls	r3, r3, #24
   1ac36:	0f1b      	lsrs	r3, r3, #28
   1ac38:	b2db      	uxtb	r3, r3
   1ac3a:	617b      	str	r3, [r7, #20]
   1ac3c:	e002      	b.n	1ac44 <readPacket+0xd0>
        goto exit;
   1ac3e:	46c0      	nop			; (mov r8, r8)
   1ac40:	e000      	b.n	1ac44 <readPacket+0xd0>
        goto exit;
   1ac42:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   1ac44:	697b      	ldr	r3, [r7, #20]
}
   1ac46:	0018      	movs	r0, r3
   1ac48:	46bd      	mov	sp, r7
   1ac4a:	b006      	add	sp, #24
   1ac4c:	bc04      	pop	{r2}
   1ac4e:	4690      	mov	r8, r2
   1ac50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ac52:	46c0      	nop			; (mov r8, r8)
   1ac54:	0001b819 	.word	0x0001b819
   1ac58:	0001aae1 	.word	0x0001aae1
   1ac5c:	0001c5f1 	.word	0x0001c5f1

0001ac60 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   1ac60:	b580      	push	{r7, lr}
   1ac62:	b086      	sub	sp, #24
   1ac64:	af00      	add	r7, sp, #0
   1ac66:	6078      	str	r0, [r7, #4]
   1ac68:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   1ac6a:	687b      	ldr	r3, [r7, #4]
   1ac6c:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   1ac6e:	683b      	ldr	r3, [r7, #0]
   1ac70:	689b      	ldr	r3, [r3, #8]
   1ac72:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   1ac74:	683b      	ldr	r3, [r7, #0]
   1ac76:	685b      	ldr	r3, [r3, #4]
   1ac78:	001a      	movs	r2, r3
   1ac7a:	693b      	ldr	r3, [r7, #16]
   1ac7c:	189b      	adds	r3, r3, r2
   1ac7e:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   1ac80:	e039      	b.n	1acf6 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   1ac82:	693b      	ldr	r3, [r7, #16]
   1ac84:	781b      	ldrb	r3, [r3, #0]
   1ac86:	2b2f      	cmp	r3, #47	; 0x2f
   1ac88:	d103      	bne.n	1ac92 <isTopicMatched+0x32>
   1ac8a:	697b      	ldr	r3, [r7, #20]
   1ac8c:	781b      	ldrb	r3, [r3, #0]
   1ac8e:	2b2f      	cmp	r3, #47	; 0x2f
   1ac90:	d13a      	bne.n	1ad08 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   1ac92:	697b      	ldr	r3, [r7, #20]
   1ac94:	781b      	ldrb	r3, [r3, #0]
   1ac96:	2b2b      	cmp	r3, #43	; 0x2b
   1ac98:	d009      	beq.n	1acae <isTopicMatched+0x4e>
   1ac9a:	697b      	ldr	r3, [r7, #20]
   1ac9c:	781b      	ldrb	r3, [r3, #0]
   1ac9e:	2b23      	cmp	r3, #35	; 0x23
   1aca0:	d005      	beq.n	1acae <isTopicMatched+0x4e>
   1aca2:	697b      	ldr	r3, [r7, #20]
   1aca4:	781a      	ldrb	r2, [r3, #0]
   1aca6:	693b      	ldr	r3, [r7, #16]
   1aca8:	781b      	ldrb	r3, [r3, #0]
   1acaa:	429a      	cmp	r2, r3
   1acac:	d12e      	bne.n	1ad0c <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   1acae:	697b      	ldr	r3, [r7, #20]
   1acb0:	781b      	ldrb	r3, [r3, #0]
   1acb2:	2b2b      	cmp	r3, #43	; 0x2b
   1acb4:	d112      	bne.n	1acdc <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   1acb6:	693b      	ldr	r3, [r7, #16]
   1acb8:	3301      	adds	r3, #1
   1acba:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   1acbc:	e005      	b.n	1acca <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   1acbe:	693b      	ldr	r3, [r7, #16]
   1acc0:	3301      	adds	r3, #1
   1acc2:	613b      	str	r3, [r7, #16]
   1acc4:	693b      	ldr	r3, [r7, #16]
   1acc6:	3301      	adds	r3, #1
   1acc8:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   1acca:	68fa      	ldr	r2, [r7, #12]
   1accc:	68bb      	ldr	r3, [r7, #8]
   1acce:	429a      	cmp	r2, r3
   1acd0:	d20b      	bcs.n	1acea <isTopicMatched+0x8a>
   1acd2:	68fb      	ldr	r3, [r7, #12]
   1acd4:	781b      	ldrb	r3, [r3, #0]
   1acd6:	2b2f      	cmp	r3, #47	; 0x2f
   1acd8:	d1f1      	bne.n	1acbe <isTopicMatched+0x5e>
   1acda:	e006      	b.n	1acea <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   1acdc:	697b      	ldr	r3, [r7, #20]
   1acde:	781b      	ldrb	r3, [r3, #0]
   1ace0:	2b23      	cmp	r3, #35	; 0x23
   1ace2:	d102      	bne.n	1acea <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   1ace4:	68bb      	ldr	r3, [r7, #8]
   1ace6:	3b01      	subs	r3, #1
   1ace8:	613b      	str	r3, [r7, #16]
        curf++;
   1acea:	697b      	ldr	r3, [r7, #20]
   1acec:	3301      	adds	r3, #1
   1acee:	617b      	str	r3, [r7, #20]
        curn++;
   1acf0:	693b      	ldr	r3, [r7, #16]
   1acf2:	3301      	adds	r3, #1
   1acf4:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   1acf6:	697b      	ldr	r3, [r7, #20]
   1acf8:	781b      	ldrb	r3, [r3, #0]
   1acfa:	2b00      	cmp	r3, #0
   1acfc:	d007      	beq.n	1ad0e <isTopicMatched+0xae>
   1acfe:	693a      	ldr	r2, [r7, #16]
   1ad00:	68bb      	ldr	r3, [r7, #8]
   1ad02:	429a      	cmp	r2, r3
   1ad04:	d3bd      	bcc.n	1ac82 <isTopicMatched+0x22>
   1ad06:	e002      	b.n	1ad0e <isTopicMatched+0xae>
            break;
   1ad08:	46c0      	nop			; (mov r8, r8)
   1ad0a:	e000      	b.n	1ad0e <isTopicMatched+0xae>
            break;
   1ad0c:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   1ad0e:	693a      	ldr	r2, [r7, #16]
   1ad10:	68bb      	ldr	r3, [r7, #8]
   1ad12:	429a      	cmp	r2, r3
   1ad14:	d105      	bne.n	1ad22 <isTopicMatched+0xc2>
   1ad16:	697b      	ldr	r3, [r7, #20]
   1ad18:	781b      	ldrb	r3, [r3, #0]
   1ad1a:	2b00      	cmp	r3, #0
   1ad1c:	d101      	bne.n	1ad22 <isTopicMatched+0xc2>
   1ad1e:	2301      	movs	r3, #1
   1ad20:	e000      	b.n	1ad24 <isTopicMatched+0xc4>
   1ad22:	2300      	movs	r3, #0
   1ad24:	b2db      	uxtb	r3, r3
}
   1ad26:	0018      	movs	r0, r3
   1ad28:	46bd      	mov	sp, r7
   1ad2a:	b006      	add	sp, #24
   1ad2c:	bd80      	pop	{r7, pc}
	...

0001ad30 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   1ad30:	b580      	push	{r7, lr}
   1ad32:	b08a      	sub	sp, #40	; 0x28
   1ad34:	af00      	add	r7, sp, #0
   1ad36:	60f8      	str	r0, [r7, #12]
   1ad38:	60b9      	str	r1, [r7, #8]
   1ad3a:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   1ad3c:	2301      	movs	r3, #1
   1ad3e:	425b      	negs	r3, r3
   1ad40:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1ad42:	2300      	movs	r3, #0
   1ad44:	627b      	str	r3, [r7, #36]	; 0x24
   1ad46:	e044      	b.n	1add2 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   1ad48:	68fa      	ldr	r2, [r7, #12]
   1ad4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ad4c:	3304      	adds	r3, #4
   1ad4e:	00db      	lsls	r3, r3, #3
   1ad50:	18d3      	adds	r3, r2, r3
   1ad52:	3304      	adds	r3, #4
   1ad54:	681b      	ldr	r3, [r3, #0]
   1ad56:	2b00      	cmp	r3, #0
   1ad58:	d038      	beq.n	1adcc <deliverMessage+0x9c>
   1ad5a:	68fa      	ldr	r2, [r7, #12]
   1ad5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ad5e:	3304      	adds	r3, #4
   1ad60:	00db      	lsls	r3, r3, #3
   1ad62:	18d3      	adds	r3, r2, r3
   1ad64:	3304      	adds	r3, #4
   1ad66:	681a      	ldr	r2, [r3, #0]
   1ad68:	68bb      	ldr	r3, [r7, #8]
   1ad6a:	0011      	movs	r1, r2
   1ad6c:	0018      	movs	r0, r3
   1ad6e:	4b28      	ldr	r3, [pc, #160]	; (1ae10 <deliverMessage+0xe0>)
   1ad70:	4798      	blx	r3
   1ad72:	1e03      	subs	r3, r0, #0
   1ad74:	d10d      	bne.n	1ad92 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   1ad76:	68fa      	ldr	r2, [r7, #12]
   1ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ad7a:	3304      	adds	r3, #4
   1ad7c:	00db      	lsls	r3, r3, #3
   1ad7e:	18d3      	adds	r3, r2, r3
   1ad80:	3304      	adds	r3, #4
   1ad82:	681b      	ldr	r3, [r3, #0]
   1ad84:	68ba      	ldr	r2, [r7, #8]
   1ad86:	0011      	movs	r1, r2
   1ad88:	0018      	movs	r0, r3
   1ad8a:	4b22      	ldr	r3, [pc, #136]	; (1ae14 <deliverMessage+0xe4>)
   1ad8c:	4798      	blx	r3
   1ad8e:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   1ad90:	d01c      	beq.n	1adcc <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   1ad92:	68fa      	ldr	r2, [r7, #12]
   1ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ad96:	3304      	adds	r3, #4
   1ad98:	00db      	lsls	r3, r3, #3
   1ad9a:	18d3      	adds	r3, r2, r3
   1ad9c:	3308      	adds	r3, #8
   1ad9e:	681b      	ldr	r3, [r3, #0]
   1ada0:	2b00      	cmp	r3, #0
   1ada2:	d013      	beq.n	1adcc <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   1ada4:	687a      	ldr	r2, [r7, #4]
   1ada6:	68b9      	ldr	r1, [r7, #8]
   1ada8:	2318      	movs	r3, #24
   1adaa:	18fb      	adds	r3, r7, r3
   1adac:	0018      	movs	r0, r3
   1adae:	4b1a      	ldr	r3, [pc, #104]	; (1ae18 <deliverMessage+0xe8>)
   1adb0:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   1adb2:	68fa      	ldr	r2, [r7, #12]
   1adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1adb6:	3304      	adds	r3, #4
   1adb8:	00db      	lsls	r3, r3, #3
   1adba:	18d3      	adds	r3, r2, r3
   1adbc:	3308      	adds	r3, #8
   1adbe:	681b      	ldr	r3, [r3, #0]
   1adc0:	2218      	movs	r2, #24
   1adc2:	18ba      	adds	r2, r7, r2
   1adc4:	0010      	movs	r0, r2
   1adc6:	4798      	blx	r3
                rc = SUCCESS;
   1adc8:	2300      	movs	r3, #0
   1adca:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1adce:	3301      	adds	r3, #1
   1add0:	627b      	str	r3, [r7, #36]	; 0x24
   1add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1add4:	2b04      	cmp	r3, #4
   1add6:	ddb7      	ble.n	1ad48 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   1add8:	6a3b      	ldr	r3, [r7, #32]
   1adda:	3301      	adds	r3, #1
   1addc:	d112      	bne.n	1ae04 <deliverMessage+0xd4>
   1adde:	68fb      	ldr	r3, [r7, #12]
   1ade0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ade2:	2b00      	cmp	r3, #0
   1ade4:	d00e      	beq.n	1ae04 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   1ade6:	687a      	ldr	r2, [r7, #4]
   1ade8:	68b9      	ldr	r1, [r7, #8]
   1adea:	2310      	movs	r3, #16
   1adec:	18fb      	adds	r3, r7, r3
   1adee:	0018      	movs	r0, r3
   1adf0:	4b09      	ldr	r3, [pc, #36]	; (1ae18 <deliverMessage+0xe8>)
   1adf2:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   1adf4:	68fb      	ldr	r3, [r7, #12]
   1adf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1adf8:	2210      	movs	r2, #16
   1adfa:	18ba      	adds	r2, r7, r2
   1adfc:	0010      	movs	r0, r2
   1adfe:	4798      	blx	r3
        rc = SUCCESS;
   1ae00:	2300      	movs	r3, #0
   1ae02:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   1ae04:	6a3b      	ldr	r3, [r7, #32]
}
   1ae06:	0018      	movs	r0, r3
   1ae08:	46bd      	mov	sp, r7
   1ae0a:	b00a      	add	sp, #40	; 0x28
   1ae0c:	bd80      	pop	{r7, pc}
   1ae0e:	46c0      	nop			; (mov r8, r8)
   1ae10:	0001ca05 	.word	0x0001ca05
   1ae14:	0001ac61 	.word	0x0001ac61
   1ae18:	0001a969 	.word	0x0001a969

0001ae1c <keepalive>:


int keepalive(MQTTClient* c)
{
   1ae1c:	b580      	push	{r7, lr}
   1ae1e:	b088      	sub	sp, #32
   1ae20:	af00      	add	r7, sp, #0
   1ae22:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   1ae24:	2301      	movs	r3, #1
   1ae26:	425b      	negs	r3, r3
   1ae28:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   1ae2a:	687b      	ldr	r3, [r7, #4]
   1ae2c:	699b      	ldr	r3, [r3, #24]
   1ae2e:	2b00      	cmp	r3, #0
   1ae30:	d102      	bne.n	1ae38 <keepalive+0x1c>
    {
        rc = SUCCESS;
   1ae32:	2300      	movs	r3, #0
   1ae34:	61fb      	str	r3, [r7, #28]
        goto exit;
   1ae36:	e033      	b.n	1aea0 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   1ae38:	687b      	ldr	r3, [r7, #4]
   1ae3a:	3354      	adds	r3, #84	; 0x54
   1ae3c:	0018      	movs	r0, r3
   1ae3e:	4b1b      	ldr	r3, [pc, #108]	; (1aeac <keepalive+0x90>)
   1ae40:	4798      	blx	r3
   1ae42:	1e03      	subs	r3, r0, #0
   1ae44:	d02c      	beq.n	1aea0 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   1ae46:	687b      	ldr	r3, [r7, #4]
   1ae48:	7f1b      	ldrb	r3, [r3, #28]
   1ae4a:	2b00      	cmp	r3, #0
   1ae4c:	d128      	bne.n	1aea0 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   1ae4e:	230c      	movs	r3, #12
   1ae50:	18fb      	adds	r3, r7, r3
   1ae52:	0018      	movs	r0, r3
   1ae54:	4b16      	ldr	r3, [pc, #88]	; (1aeb0 <keepalive+0x94>)
   1ae56:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   1ae58:	23fa      	movs	r3, #250	; 0xfa
   1ae5a:	009a      	lsls	r2, r3, #2
   1ae5c:	230c      	movs	r3, #12
   1ae5e:	18fb      	adds	r3, r7, r3
   1ae60:	0011      	movs	r1, r2
   1ae62:	0018      	movs	r0, r3
   1ae64:	4b13      	ldr	r3, [pc, #76]	; (1aeb4 <keepalive+0x98>)
   1ae66:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   1ae68:	687b      	ldr	r3, [r7, #4]
   1ae6a:	691a      	ldr	r2, [r3, #16]
   1ae6c:	687b      	ldr	r3, [r7, #4]
   1ae6e:	689b      	ldr	r3, [r3, #8]
   1ae70:	0019      	movs	r1, r3
   1ae72:	0010      	movs	r0, r2
   1ae74:	4b10      	ldr	r3, [pc, #64]	; (1aeb8 <keepalive+0x9c>)
   1ae76:	4798      	blx	r3
   1ae78:	0003      	movs	r3, r0
   1ae7a:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   1ae7c:	69bb      	ldr	r3, [r7, #24]
   1ae7e:	2b00      	cmp	r3, #0
   1ae80:	dd0e      	ble.n	1aea0 <keepalive+0x84>
   1ae82:	230c      	movs	r3, #12
   1ae84:	18fa      	adds	r2, r7, r3
   1ae86:	69b9      	ldr	r1, [r7, #24]
   1ae88:	687b      	ldr	r3, [r7, #4]
   1ae8a:	0018      	movs	r0, r3
   1ae8c:	4b0b      	ldr	r3, [pc, #44]	; (1aebc <keepalive+0xa0>)
   1ae8e:	4798      	blx	r3
   1ae90:	0003      	movs	r3, r0
   1ae92:	61fb      	str	r3, [r7, #28]
   1ae94:	69fb      	ldr	r3, [r7, #28]
   1ae96:	2b00      	cmp	r3, #0
   1ae98:	d102      	bne.n	1aea0 <keepalive+0x84>
                c->ping_outstanding = 1;
   1ae9a:	687b      	ldr	r3, [r7, #4]
   1ae9c:	2201      	movs	r2, #1
   1ae9e:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   1aea0:	69fb      	ldr	r3, [r7, #28]
}
   1aea2:	0018      	movs	r0, r3
   1aea4:	46bd      	mov	sp, r7
   1aea6:	b008      	add	sp, #32
   1aea8:	bd80      	pop	{r7, pc}
   1aeaa:	46c0      	nop			; (mov r8, r8)
   1aeac:	0001b79d 	.word	0x0001b79d
   1aeb0:	0001b841 	.word	0x0001b841
   1aeb4:	0001b7c9 	.word	0x0001b7c9
   1aeb8:	0001c415 	.word	0x0001c415
   1aebc:	0001a9b9 	.word	0x0001a9b9

0001aec0 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   1aec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aec2:	b095      	sub	sp, #84	; 0x54
   1aec4:	af06      	add	r7, sp, #24
   1aec6:	6078      	str	r0, [r7, #4]
   1aec8:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   1aeca:	683a      	ldr	r2, [r7, #0]
   1aecc:	687b      	ldr	r3, [r7, #4]
   1aece:	0011      	movs	r1, r2
   1aed0:	0018      	movs	r0, r3
   1aed2:	4b70      	ldr	r3, [pc, #448]	; (1b094 <cycle+0x1d4>)
   1aed4:	4798      	blx	r3
   1aed6:	0002      	movs	r2, r0
   1aed8:	232e      	movs	r3, #46	; 0x2e
   1aeda:	18fb      	adds	r3, r7, r3
   1aedc:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   1aede:	2300      	movs	r3, #0
   1aee0:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   1aee2:	2300      	movs	r3, #0
   1aee4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   1aee6:	232e      	movs	r3, #46	; 0x2e
   1aee8:	18fb      	adds	r3, r7, r3
   1aeea:	881b      	ldrh	r3, [r3, #0]
   1aeec:	2b0d      	cmp	r3, #13
   1aeee:	d900      	bls.n	1aef2 <cycle+0x32>
   1aef0:	e0bd      	b.n	1b06e <cycle+0x1ae>
   1aef2:	009a      	lsls	r2, r3, #2
   1aef4:	4b68      	ldr	r3, [pc, #416]	; (1b098 <cycle+0x1d8>)
   1aef6:	18d3      	adds	r3, r2, r3
   1aef8:	681b      	ldr	r3, [r3, #0]
   1aefa:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1aefc:	687b      	ldr	r3, [r7, #4]
   1aefe:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   1af00:	687b      	ldr	r3, [r7, #4]
   1af02:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1af04:	001e      	movs	r6, r3
   1af06:	2310      	movs	r3, #16
   1af08:	18fb      	adds	r3, r7, r3
   1af0a:	1d1d      	adds	r5, r3, #4
   1af0c:	2310      	movs	r3, #16
   1af0e:	18fb      	adds	r3, r7, r3
   1af10:	1c5c      	adds	r4, r3, #1
   1af12:	230c      	movs	r3, #12
   1af14:	18f9      	adds	r1, r7, r3
   1af16:	2310      	movs	r3, #16
   1af18:	18fb      	adds	r3, r7, r3
   1af1a:	1c98      	adds	r0, r3, #2
   1af1c:	9604      	str	r6, [sp, #16]
   1af1e:	9203      	str	r2, [sp, #12]
   1af20:	2310      	movs	r3, #16
   1af22:	18fb      	adds	r3, r7, r3
   1af24:	330c      	adds	r3, #12
   1af26:	9302      	str	r3, [sp, #8]
   1af28:	2310      	movs	r3, #16
   1af2a:	18fb      	adds	r3, r7, r3
   1af2c:	3308      	adds	r3, #8
   1af2e:	9301      	str	r3, [sp, #4]
   1af30:	2320      	movs	r3, #32
   1af32:	18fb      	adds	r3, r7, r3
   1af34:	9300      	str	r3, [sp, #0]
   1af36:	002b      	movs	r3, r5
   1af38:	0022      	movs	r2, r4
   1af3a:	4c58      	ldr	r4, [pc, #352]	; (1b09c <cycle+0x1dc>)
   1af3c:	47a0      	blx	r4
   1af3e:	0003      	movs	r3, r0
   1af40:	2b01      	cmp	r3, #1
   1af42:	d000      	beq.n	1af46 <cycle+0x86>
   1af44:	e098      	b.n	1b078 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   1af46:	68fb      	ldr	r3, [r7, #12]
   1af48:	b2da      	uxtb	r2, r3
   1af4a:	2310      	movs	r3, #16
   1af4c:	18fb      	adds	r3, r7, r3
   1af4e:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   1af50:	2310      	movs	r3, #16
   1af52:	18fa      	adds	r2, r7, r3
   1af54:	2320      	movs	r3, #32
   1af56:	18f9      	adds	r1, r7, r3
   1af58:	687b      	ldr	r3, [r7, #4]
   1af5a:	0018      	movs	r0, r3
   1af5c:	4b50      	ldr	r3, [pc, #320]	; (1b0a0 <cycle+0x1e0>)
   1af5e:	4798      	blx	r3
            if (msg.qos != QOS0)
   1af60:	2310      	movs	r3, #16
   1af62:	18fb      	adds	r3, r7, r3
   1af64:	781b      	ldrb	r3, [r3, #0]
   1af66:	2b00      	cmp	r3, #0
   1af68:	d100      	bne.n	1af6c <cycle+0xac>
   1af6a:	e07d      	b.n	1b068 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   1af6c:	2310      	movs	r3, #16
   1af6e:	18fb      	adds	r3, r7, r3
   1af70:	781b      	ldrb	r3, [r3, #0]
   1af72:	2b01      	cmp	r3, #1
   1af74:	d10f      	bne.n	1af96 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   1af76:	687b      	ldr	r3, [r7, #4]
   1af78:	6918      	ldr	r0, [r3, #16]
   1af7a:	687b      	ldr	r3, [r7, #4]
   1af7c:	689b      	ldr	r3, [r3, #8]
   1af7e:	0019      	movs	r1, r3
   1af80:	2310      	movs	r3, #16
   1af82:	18fb      	adds	r3, r7, r3
   1af84:	889b      	ldrh	r3, [r3, #4]
   1af86:	9300      	str	r3, [sp, #0]
   1af88:	2300      	movs	r3, #0
   1af8a:	2204      	movs	r2, #4
   1af8c:	4c45      	ldr	r4, [pc, #276]	; (1b0a4 <cycle+0x1e4>)
   1af8e:	47a0      	blx	r4
   1af90:	0003      	movs	r3, r0
   1af92:	637b      	str	r3, [r7, #52]	; 0x34
   1af94:	e013      	b.n	1afbe <cycle+0xfe>
                else if (msg.qos == QOS2)
   1af96:	2310      	movs	r3, #16
   1af98:	18fb      	adds	r3, r7, r3
   1af9a:	781b      	ldrb	r3, [r3, #0]
   1af9c:	2b02      	cmp	r3, #2
   1af9e:	d10e      	bne.n	1afbe <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   1afa0:	687b      	ldr	r3, [r7, #4]
   1afa2:	6918      	ldr	r0, [r3, #16]
   1afa4:	687b      	ldr	r3, [r7, #4]
   1afa6:	689b      	ldr	r3, [r3, #8]
   1afa8:	0019      	movs	r1, r3
   1afaa:	2310      	movs	r3, #16
   1afac:	18fb      	adds	r3, r7, r3
   1afae:	889b      	ldrh	r3, [r3, #4]
   1afb0:	9300      	str	r3, [sp, #0]
   1afb2:	2300      	movs	r3, #0
   1afb4:	2205      	movs	r2, #5
   1afb6:	4c3b      	ldr	r4, [pc, #236]	; (1b0a4 <cycle+0x1e4>)
   1afb8:	47a0      	blx	r4
   1afba:	0003      	movs	r3, r0
   1afbc:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   1afbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1afc0:	2b00      	cmp	r3, #0
   1afc2:	dc03      	bgt.n	1afcc <cycle+0x10c>
                    rc = FAILURE;
   1afc4:	2301      	movs	r3, #1
   1afc6:	425b      	negs	r3, r3
   1afc8:	633b      	str	r3, [r7, #48]	; 0x30
   1afca:	e007      	b.n	1afdc <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   1afcc:	683a      	ldr	r2, [r7, #0]
   1afce:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1afd0:	687b      	ldr	r3, [r7, #4]
   1afd2:	0018      	movs	r0, r3
   1afd4:	4b34      	ldr	r3, [pc, #208]	; (1b0a8 <cycle+0x1e8>)
   1afd6:	4798      	blx	r3
   1afd8:	0003      	movs	r3, r0
   1afda:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   1afdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1afde:	3301      	adds	r3, #1
   1afe0:	d142      	bne.n	1b068 <cycle+0x1a8>
                    goto exit; // there was a problem
   1afe2:	46c0      	nop			; (mov r8, r8)
   1afe4:	e049      	b.n	1b07a <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1afe6:	687b      	ldr	r3, [r7, #4]
   1afe8:	695c      	ldr	r4, [r3, #20]
   1afea:	687b      	ldr	r3, [r7, #4]
   1afec:	68db      	ldr	r3, [r3, #12]
   1afee:	220a      	movs	r2, #10
   1aff0:	18ba      	adds	r2, r7, r2
   1aff2:	2109      	movs	r1, #9
   1aff4:	1879      	adds	r1, r7, r1
   1aff6:	2008      	movs	r0, #8
   1aff8:	1838      	adds	r0, r7, r0
   1affa:	9300      	str	r3, [sp, #0]
   1affc:	0023      	movs	r3, r4
   1affe:	4c2b      	ldr	r4, [pc, #172]	; (1b0ac <cycle+0x1ec>)
   1b000:	47a0      	blx	r4
   1b002:	0003      	movs	r3, r0
   1b004:	2b01      	cmp	r3, #1
   1b006:	d003      	beq.n	1b010 <cycle+0x150>
                rc = FAILURE;
   1b008:	2301      	movs	r3, #1
   1b00a:	425b      	negs	r3, r3
   1b00c:	633b      	str	r3, [r7, #48]	; 0x30
   1b00e:	e023      	b.n	1b058 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   1b010:	687b      	ldr	r3, [r7, #4]
   1b012:	6918      	ldr	r0, [r3, #16]
   1b014:	687b      	ldr	r3, [r7, #4]
   1b016:	689b      	ldr	r3, [r3, #8]
   1b018:	0019      	movs	r1, r3
   1b01a:	230a      	movs	r3, #10
   1b01c:	18fb      	adds	r3, r7, r3
   1b01e:	881b      	ldrh	r3, [r3, #0]
   1b020:	9300      	str	r3, [sp, #0]
   1b022:	2300      	movs	r3, #0
   1b024:	2206      	movs	r2, #6
   1b026:	4c1f      	ldr	r4, [pc, #124]	; (1b0a4 <cycle+0x1e4>)
   1b028:	47a0      	blx	r4
   1b02a:	0003      	movs	r3, r0
   1b02c:	637b      	str	r3, [r7, #52]	; 0x34
   1b02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b030:	2b00      	cmp	r3, #0
   1b032:	dc03      	bgt.n	1b03c <cycle+0x17c>
                rc = FAILURE;
   1b034:	2301      	movs	r3, #1
   1b036:	425b      	negs	r3, r3
   1b038:	633b      	str	r3, [r7, #48]	; 0x30
   1b03a:	e00d      	b.n	1b058 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   1b03c:	683a      	ldr	r2, [r7, #0]
   1b03e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1b040:	687b      	ldr	r3, [r7, #4]
   1b042:	0018      	movs	r0, r3
   1b044:	4b18      	ldr	r3, [pc, #96]	; (1b0a8 <cycle+0x1e8>)
   1b046:	4798      	blx	r3
   1b048:	0003      	movs	r3, r0
   1b04a:	633b      	str	r3, [r7, #48]	; 0x30
   1b04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b04e:	2b00      	cmp	r3, #0
   1b050:	d002      	beq.n	1b058 <cycle+0x198>
                rc = FAILURE; // there was a problem
   1b052:	2301      	movs	r3, #1
   1b054:	425b      	negs	r3, r3
   1b056:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   1b058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b05a:	3301      	adds	r3, #1
   1b05c:	d106      	bne.n	1b06c <cycle+0x1ac>
                goto exit; // there was a problem
   1b05e:	e00c      	b.n	1b07a <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   1b060:	687b      	ldr	r3, [r7, #4]
   1b062:	2200      	movs	r2, #0
   1b064:	771a      	strb	r2, [r3, #28]
            break;
   1b066:	e002      	b.n	1b06e <cycle+0x1ae>
            break;
   1b068:	46c0      	nop			; (mov r8, r8)
   1b06a:	e000      	b.n	1b06e <cycle+0x1ae>
            break;
   1b06c:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   1b06e:	687b      	ldr	r3, [r7, #4]
   1b070:	0018      	movs	r0, r3
   1b072:	4b0f      	ldr	r3, [pc, #60]	; (1b0b0 <cycle+0x1f0>)
   1b074:	4798      	blx	r3
   1b076:	e000      	b.n	1b07a <cycle+0x1ba>
                goto exit;
   1b078:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   1b07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b07c:	2b00      	cmp	r3, #0
   1b07e:	d103      	bne.n	1b088 <cycle+0x1c8>
        rc = packet_type;
   1b080:	232e      	movs	r3, #46	; 0x2e
   1b082:	18fb      	adds	r3, r7, r3
   1b084:	881b      	ldrh	r3, [r3, #0]
   1b086:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   1b088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   1b08a:	0018      	movs	r0, r3
   1b08c:	46bd      	mov	sp, r7
   1b08e:	b00f      	add	sp, #60	; 0x3c
   1b090:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b092:	46c0      	nop			; (mov r8, r8)
   1b094:	0001ab75 	.word	0x0001ab75
   1b098:	00026afc 	.word	0x00026afc
   1b09c:	0001c439 	.word	0x0001c439
   1b0a0:	0001ad31 	.word	0x0001ad31
   1b0a4:	0001cc31 	.word	0x0001cc31
   1b0a8:	0001a9b9 	.word	0x0001a9b9
   1b0ac:	0001c53d 	.word	0x0001c53d
   1b0b0:	0001ae1d 	.word	0x0001ae1d

0001b0b4 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   1b0b4:	b580      	push	{r7, lr}
   1b0b6:	b086      	sub	sp, #24
   1b0b8:	af00      	add	r7, sp, #0
   1b0ba:	6078      	str	r0, [r7, #4]
   1b0bc:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   1b0be:	2300      	movs	r3, #0
   1b0c0:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   1b0c2:	2308      	movs	r3, #8
   1b0c4:	18fb      	adds	r3, r7, r3
   1b0c6:	0018      	movs	r0, r3
   1b0c8:	4b11      	ldr	r3, [pc, #68]	; (1b110 <MQTTYield+0x5c>)
   1b0ca:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   1b0cc:	683a      	ldr	r2, [r7, #0]
   1b0ce:	2308      	movs	r3, #8
   1b0d0:	18fb      	adds	r3, r7, r3
   1b0d2:	0011      	movs	r1, r2
   1b0d4:	0018      	movs	r0, r3
   1b0d6:	4b0f      	ldr	r3, [pc, #60]	; (1b114 <MQTTYield+0x60>)
   1b0d8:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   1b0da:	2308      	movs	r3, #8
   1b0dc:	18fa      	adds	r2, r7, r3
   1b0de:	687b      	ldr	r3, [r7, #4]
   1b0e0:	0011      	movs	r1, r2
   1b0e2:	0018      	movs	r0, r3
   1b0e4:	4b0c      	ldr	r3, [pc, #48]	; (1b118 <MQTTYield+0x64>)
   1b0e6:	4798      	blx	r3
   1b0e8:	0003      	movs	r3, r0
   1b0ea:	3301      	adds	r3, #1
   1b0ec:	d103      	bne.n	1b0f6 <MQTTYield+0x42>
        {
            rc = FAILURE;
   1b0ee:	2301      	movs	r3, #1
   1b0f0:	425b      	negs	r3, r3
   1b0f2:	617b      	str	r3, [r7, #20]
            break;
   1b0f4:	e006      	b.n	1b104 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   1b0f6:	2308      	movs	r3, #8
   1b0f8:	18fb      	adds	r3, r7, r3
   1b0fa:	0018      	movs	r0, r3
   1b0fc:	4b07      	ldr	r3, [pc, #28]	; (1b11c <MQTTYield+0x68>)
   1b0fe:	4798      	blx	r3
   1b100:	1e03      	subs	r3, r0, #0
   1b102:	d0ea      	beq.n	1b0da <MQTTYield+0x26>
        
    return rc;
   1b104:	697b      	ldr	r3, [r7, #20]
}
   1b106:	0018      	movs	r0, r3
   1b108:	46bd      	mov	sp, r7
   1b10a:	b006      	add	sp, #24
   1b10c:	bd80      	pop	{r7, pc}
   1b10e:	46c0      	nop			; (mov r8, r8)
   1b110:	0001b841 	.word	0x0001b841
   1b114:	0001b7c9 	.word	0x0001b7c9
   1b118:	0001aec1 	.word	0x0001aec1
   1b11c:	0001b79d 	.word	0x0001b79d

0001b120 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   1b120:	b580      	push	{r7, lr}
   1b122:	b086      	sub	sp, #24
   1b124:	af00      	add	r7, sp, #0
   1b126:	60f8      	str	r0, [r7, #12]
   1b128:	60b9      	str	r1, [r7, #8]
   1b12a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   1b12c:	2301      	movs	r3, #1
   1b12e:	425b      	negs	r3, r3
   1b130:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   1b132:	687b      	ldr	r3, [r7, #4]
   1b134:	0018      	movs	r0, r3
   1b136:	4b0b      	ldr	r3, [pc, #44]	; (1b164 <waitfor+0x44>)
   1b138:	4798      	blx	r3
   1b13a:	1e03      	subs	r3, r0, #0
   1b13c:	d10c      	bne.n	1b158 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   1b13e:	687a      	ldr	r2, [r7, #4]
   1b140:	68fb      	ldr	r3, [r7, #12]
   1b142:	0011      	movs	r1, r2
   1b144:	0018      	movs	r0, r3
   1b146:	4b08      	ldr	r3, [pc, #32]	; (1b168 <waitfor+0x48>)
   1b148:	4798      	blx	r3
   1b14a:	0003      	movs	r3, r0
   1b14c:	617b      	str	r3, [r7, #20]
   1b14e:	697a      	ldr	r2, [r7, #20]
   1b150:	68bb      	ldr	r3, [r7, #8]
   1b152:	429a      	cmp	r2, r3
   1b154:	d1ed      	bne.n	1b132 <waitfor+0x12>
   1b156:	e000      	b.n	1b15a <waitfor+0x3a>
            break; // we timed out
   1b158:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   1b15a:	697b      	ldr	r3, [r7, #20]
}
   1b15c:	0018      	movs	r0, r3
   1b15e:	46bd      	mov	sp, r7
   1b160:	b006      	add	sp, #24
   1b162:	bd80      	pop	{r7, pc}
   1b164:	0001b79d 	.word	0x0001b79d
   1b168:	0001aec1 	.word	0x0001aec1

0001b16c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   1b16c:	b590      	push	{r4, r7, lr}
   1b16e:	b09f      	sub	sp, #124	; 0x7c
   1b170:	af00      	add	r7, sp, #0
   1b172:	6078      	str	r0, [r7, #4]
   1b174:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   1b176:	2301      	movs	r3, #1
   1b178:	425b      	negs	r3, r3
   1b17a:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   1b17c:	230c      	movs	r3, #12
   1b17e:	18fa      	adds	r2, r7, r3
   1b180:	4b41      	ldr	r3, [pc, #260]	; (1b288 <MQTTConnect+0x11c>)
   1b182:	0010      	movs	r0, r2
   1b184:	0019      	movs	r1, r3
   1b186:	2358      	movs	r3, #88	; 0x58
   1b188:	001a      	movs	r2, r3
   1b18a:	4b40      	ldr	r3, [pc, #256]	; (1b28c <MQTTConnect+0x120>)
   1b18c:	4798      	blx	r3
    int len = 0;
   1b18e:	2300      	movs	r3, #0
   1b190:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   1b192:	687b      	ldr	r3, [r7, #4]
   1b194:	6a1b      	ldr	r3, [r3, #32]
   1b196:	2b00      	cmp	r3, #0
   1b198:	d166      	bne.n	1b268 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   1b19a:	2364      	movs	r3, #100	; 0x64
   1b19c:	18fb      	adds	r3, r7, r3
   1b19e:	0018      	movs	r0, r3
   1b1a0:	4b3b      	ldr	r3, [pc, #236]	; (1b290 <MQTTConnect+0x124>)
   1b1a2:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   1b1a4:	687b      	ldr	r3, [r7, #4]
   1b1a6:	685a      	ldr	r2, [r3, #4]
   1b1a8:	2364      	movs	r3, #100	; 0x64
   1b1aa:	18fb      	adds	r3, r7, r3
   1b1ac:	0011      	movs	r1, r2
   1b1ae:	0018      	movs	r0, r3
   1b1b0:	4b38      	ldr	r3, [pc, #224]	; (1b294 <MQTTConnect+0x128>)
   1b1b2:	4798      	blx	r3

    if (options == 0)
   1b1b4:	683b      	ldr	r3, [r7, #0]
   1b1b6:	2b00      	cmp	r3, #0
   1b1b8:	d102      	bne.n	1b1c0 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   1b1ba:	230c      	movs	r3, #12
   1b1bc:	18fb      	adds	r3, r7, r3
   1b1be:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   1b1c0:	683b      	ldr	r3, [r7, #0]
   1b1c2:	8b1b      	ldrh	r3, [r3, #24]
   1b1c4:	001a      	movs	r2, r3
   1b1c6:	687b      	ldr	r3, [r7, #4]
   1b1c8:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   1b1ca:	687b      	ldr	r3, [r7, #4]
   1b1cc:	3354      	adds	r3, #84	; 0x54
   1b1ce:	001a      	movs	r2, r3
   1b1d0:	687b      	ldr	r3, [r7, #4]
   1b1d2:	699b      	ldr	r3, [r3, #24]
   1b1d4:	0019      	movs	r1, r3
   1b1d6:	0010      	movs	r0, r2
   1b1d8:	4b2f      	ldr	r3, [pc, #188]	; (1b298 <MQTTConnect+0x12c>)
   1b1da:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   1b1dc:	687b      	ldr	r3, [r7, #4]
   1b1de:	6918      	ldr	r0, [r3, #16]
   1b1e0:	687b      	ldr	r3, [r7, #4]
   1b1e2:	689b      	ldr	r3, [r3, #8]
   1b1e4:	0019      	movs	r1, r3
   1b1e6:	683b      	ldr	r3, [r7, #0]
   1b1e8:	001a      	movs	r2, r3
   1b1ea:	4b2c      	ldr	r3, [pc, #176]	; (1b29c <MQTTConnect+0x130>)
   1b1ec:	4798      	blx	r3
   1b1ee:	0003      	movs	r3, r0
   1b1f0:	673b      	str	r3, [r7, #112]	; 0x70
   1b1f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1b1f4:	2b00      	cmp	r3, #0
   1b1f6:	dd39      	ble.n	1b26c <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   1b1f8:	2364      	movs	r3, #100	; 0x64
   1b1fa:	18fa      	adds	r2, r7, r3
   1b1fc:	6f39      	ldr	r1, [r7, #112]	; 0x70
   1b1fe:	687b      	ldr	r3, [r7, #4]
   1b200:	0018      	movs	r0, r3
   1b202:	4b27      	ldr	r3, [pc, #156]	; (1b2a0 <MQTTConnect+0x134>)
   1b204:	4798      	blx	r3
   1b206:	0003      	movs	r3, r0
   1b208:	677b      	str	r3, [r7, #116]	; 0x74
   1b20a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b20c:	2b00      	cmp	r3, #0
   1b20e:	d12f      	bne.n	1b270 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   1b210:	2364      	movs	r3, #100	; 0x64
   1b212:	18fa      	adds	r2, r7, r3
   1b214:	687b      	ldr	r3, [r7, #4]
   1b216:	2102      	movs	r1, #2
   1b218:	0018      	movs	r0, r3
   1b21a:	4b22      	ldr	r3, [pc, #136]	; (1b2a4 <MQTTConnect+0x138>)
   1b21c:	4798      	blx	r3
   1b21e:	0003      	movs	r3, r0
   1b220:	2b02      	cmp	r3, #2
   1b222:	d11d      	bne.n	1b260 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   1b224:	230b      	movs	r3, #11
   1b226:	18fb      	adds	r3, r7, r3
   1b228:	22ff      	movs	r2, #255	; 0xff
   1b22a:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   1b22c:	230a      	movs	r3, #10
   1b22e:	18fb      	adds	r3, r7, r3
   1b230:	2200      	movs	r2, #0
   1b232:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   1b234:	687b      	ldr	r3, [r7, #4]
   1b236:	695a      	ldr	r2, [r3, #20]
   1b238:	687b      	ldr	r3, [r7, #4]
   1b23a:	68db      	ldr	r3, [r3, #12]
   1b23c:	210b      	movs	r1, #11
   1b23e:	1879      	adds	r1, r7, r1
   1b240:	200a      	movs	r0, #10
   1b242:	1838      	adds	r0, r7, r0
   1b244:	4c18      	ldr	r4, [pc, #96]	; (1b2a8 <MQTTConnect+0x13c>)
   1b246:	47a0      	blx	r4
   1b248:	0003      	movs	r3, r0
   1b24a:	2b01      	cmp	r3, #1
   1b24c:	d104      	bne.n	1b258 <MQTTConnect+0xec>
            rc = connack_rc;
   1b24e:	230b      	movs	r3, #11
   1b250:	18fb      	adds	r3, r7, r3
   1b252:	781b      	ldrb	r3, [r3, #0]
   1b254:	677b      	str	r3, [r7, #116]	; 0x74
   1b256:	e00c      	b.n	1b272 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   1b258:	2301      	movs	r3, #1
   1b25a:	425b      	negs	r3, r3
   1b25c:	677b      	str	r3, [r7, #116]	; 0x74
   1b25e:	e008      	b.n	1b272 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   1b260:	2301      	movs	r3, #1
   1b262:	425b      	negs	r3, r3
   1b264:	677b      	str	r3, [r7, #116]	; 0x74
   1b266:	e004      	b.n	1b272 <MQTTConnect+0x106>
		goto exit;
   1b268:	46c0      	nop			; (mov r8, r8)
   1b26a:	e002      	b.n	1b272 <MQTTConnect+0x106>
        goto exit;
   1b26c:	46c0      	nop			; (mov r8, r8)
   1b26e:	e000      	b.n	1b272 <MQTTConnect+0x106>
        goto exit; // there was a problem
   1b270:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   1b272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b274:	2b00      	cmp	r3, #0
   1b276:	d102      	bne.n	1b27e <MQTTConnect+0x112>
        c->isconnected = 1;
   1b278:	687b      	ldr	r3, [r7, #4]
   1b27a:	2201      	movs	r2, #1
   1b27c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   1b27e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   1b280:	0018      	movs	r0, r3
   1b282:	46bd      	mov	sp, r7
   1b284:	b01f      	add	sp, #124	; 0x7c
   1b286:	bd90      	pop	{r4, r7, pc}
   1b288:	00026b34 	.word	0x00026b34
   1b28c:	00020d55 	.word	0x00020d55
   1b290:	0001b841 	.word	0x0001b841
   1b294:	0001b7c9 	.word	0x0001b7c9
   1b298:	0001b7f1 	.word	0x0001b7f1
   1b29c:	0001c01d 	.word	0x0001c01d
   1b2a0:	0001a9b9 	.word	0x0001a9b9
   1b2a4:	0001b121 	.word	0x0001b121
   1b2a8:	0001c299 	.word	0x0001c299

0001b2ac <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   1b2ac:	b5b0      	push	{r4, r5, r7, lr}
   1b2ae:	b096      	sub	sp, #88	; 0x58
   1b2b0:	af04      	add	r7, sp, #16
   1b2b2:	60f8      	str	r0, [r7, #12]
   1b2b4:	60b9      	str	r1, [r7, #8]
   1b2b6:	603b      	str	r3, [r7, #0]
   1b2b8:	1dfb      	adds	r3, r7, #7
   1b2ba:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   1b2bc:	2301      	movs	r3, #1
   1b2be:	425b      	negs	r3, r3
   1b2c0:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   1b2c2:	2300      	movs	r3, #0
   1b2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   1b2c6:	2324      	movs	r3, #36	; 0x24
   1b2c8:	18fb      	adds	r3, r7, r3
   1b2ca:	2200      	movs	r2, #0
   1b2cc:	601a      	str	r2, [r3, #0]
   1b2ce:	2324      	movs	r3, #36	; 0x24
   1b2d0:	18fb      	adds	r3, r7, r3
   1b2d2:	2200      	movs	r2, #0
   1b2d4:	605a      	str	r2, [r3, #4]
   1b2d6:	2324      	movs	r3, #36	; 0x24
   1b2d8:	18fb      	adds	r3, r7, r3
   1b2da:	2200      	movs	r2, #0
   1b2dc:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   1b2de:	1dfb      	adds	r3, r7, #7
   1b2e0:	781b      	ldrb	r3, [r3, #0]
   1b2e2:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   1b2e4:	2324      	movs	r3, #36	; 0x24
   1b2e6:	18fb      	adds	r3, r7, r3
   1b2e8:	68ba      	ldr	r2, [r7, #8]
   1b2ea:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1b2ec:	68fb      	ldr	r3, [r7, #12]
   1b2ee:	6a1b      	ldr	r3, [r3, #32]
   1b2f0:	2b00      	cmp	r3, #0
   1b2f2:	d100      	bne.n	1b2f6 <MQTTSubscribe+0x4a>
   1b2f4:	e088      	b.n	1b408 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   1b2f6:	2330      	movs	r3, #48	; 0x30
   1b2f8:	18fb      	adds	r3, r7, r3
   1b2fa:	0018      	movs	r0, r3
   1b2fc:	4b47      	ldr	r3, [pc, #284]	; (1b41c <MQTTSubscribe+0x170>)
   1b2fe:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1b300:	68fb      	ldr	r3, [r7, #12]
   1b302:	685a      	ldr	r2, [r3, #4]
   1b304:	2330      	movs	r3, #48	; 0x30
   1b306:	18fb      	adds	r3, r7, r3
   1b308:	0011      	movs	r1, r2
   1b30a:	0018      	movs	r0, r3
   1b30c:	4b44      	ldr	r3, [pc, #272]	; (1b420 <MQTTSubscribe+0x174>)
   1b30e:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   1b310:	68fb      	ldr	r3, [r7, #12]
   1b312:	691c      	ldr	r4, [r3, #16]
   1b314:	68fb      	ldr	r3, [r7, #12]
   1b316:	689b      	ldr	r3, [r3, #8]
   1b318:	001d      	movs	r5, r3
   1b31a:	68fb      	ldr	r3, [r7, #12]
   1b31c:	0018      	movs	r0, r3
   1b31e:	4b41      	ldr	r3, [pc, #260]	; (1b424 <MQTTSubscribe+0x178>)
   1b320:	4798      	blx	r3
   1b322:	0003      	movs	r3, r0
   1b324:	b29a      	uxth	r2, r3
   1b326:	2320      	movs	r3, #32
   1b328:	18fb      	adds	r3, r7, r3
   1b32a:	9302      	str	r3, [sp, #8]
   1b32c:	2324      	movs	r3, #36	; 0x24
   1b32e:	18fb      	adds	r3, r7, r3
   1b330:	9301      	str	r3, [sp, #4]
   1b332:	2301      	movs	r3, #1
   1b334:	9300      	str	r3, [sp, #0]
   1b336:	0013      	movs	r3, r2
   1b338:	2200      	movs	r2, #0
   1b33a:	0029      	movs	r1, r5
   1b33c:	0020      	movs	r0, r4
   1b33e:	4c3a      	ldr	r4, [pc, #232]	; (1b428 <MQTTSubscribe+0x17c>)
   1b340:	47a0      	blx	r4
   1b342:	0003      	movs	r3, r0
   1b344:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   1b346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b348:	2b00      	cmp	r3, #0
   1b34a:	dd5f      	ble.n	1b40c <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1b34c:	2330      	movs	r3, #48	; 0x30
   1b34e:	18fa      	adds	r2, r7, r3
   1b350:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1b352:	68fb      	ldr	r3, [r7, #12]
   1b354:	0018      	movs	r0, r3
   1b356:	4b35      	ldr	r3, [pc, #212]	; (1b42c <MQTTSubscribe+0x180>)
   1b358:	4798      	blx	r3
   1b35a:	0003      	movs	r3, r0
   1b35c:	647b      	str	r3, [r7, #68]	; 0x44
   1b35e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1b360:	2b00      	cmp	r3, #0
   1b362:	d155      	bne.n	1b410 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   1b364:	2330      	movs	r3, #48	; 0x30
   1b366:	18fa      	adds	r2, r7, r3
   1b368:	68fb      	ldr	r3, [r7, #12]
   1b36a:	2109      	movs	r1, #9
   1b36c:	0018      	movs	r0, r3
   1b36e:	4b30      	ldr	r3, [pc, #192]	; (1b430 <MQTTSubscribe+0x184>)
   1b370:	4798      	blx	r3
   1b372:	0003      	movs	r3, r0
   1b374:	2b09      	cmp	r3, #9
   1b376:	d143      	bne.n	1b400 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   1b378:	2300      	movs	r3, #0
   1b37a:	61fb      	str	r3, [r7, #28]
   1b37c:	2301      	movs	r3, #1
   1b37e:	425b      	negs	r3, r3
   1b380:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   1b382:	68fb      	ldr	r3, [r7, #12]
   1b384:	695a      	ldr	r2, [r3, #20]
   1b386:	68fb      	ldr	r3, [r7, #12]
   1b388:	68db      	ldr	r3, [r3, #12]
   1b38a:	001c      	movs	r4, r3
   1b38c:	2318      	movs	r3, #24
   1b38e:	18fb      	adds	r3, r7, r3
   1b390:	211c      	movs	r1, #28
   1b392:	1879      	adds	r1, r7, r1
   1b394:	2016      	movs	r0, #22
   1b396:	1838      	adds	r0, r7, r0
   1b398:	9401      	str	r4, [sp, #4]
   1b39a:	9200      	str	r2, [sp, #0]
   1b39c:	000a      	movs	r2, r1
   1b39e:	2101      	movs	r1, #1
   1b3a0:	4c24      	ldr	r4, [pc, #144]	; (1b434 <MQTTSubscribe+0x188>)
   1b3a2:	47a0      	blx	r4
   1b3a4:	0003      	movs	r3, r0
   1b3a6:	2b01      	cmp	r3, #1
   1b3a8:	d101      	bne.n	1b3ae <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   1b3aa:	69bb      	ldr	r3, [r7, #24]
   1b3ac:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   1b3ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1b3b0:	2b80      	cmp	r3, #128	; 0x80
   1b3b2:	d02e      	beq.n	1b412 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1b3b4:	2300      	movs	r3, #0
   1b3b6:	643b      	str	r3, [r7, #64]	; 0x40
   1b3b8:	e01e      	b.n	1b3f8 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   1b3ba:	68fa      	ldr	r2, [r7, #12]
   1b3bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b3be:	3304      	adds	r3, #4
   1b3c0:	00db      	lsls	r3, r3, #3
   1b3c2:	18d3      	adds	r3, r2, r3
   1b3c4:	3304      	adds	r3, #4
   1b3c6:	681b      	ldr	r3, [r3, #0]
   1b3c8:	2b00      	cmp	r3, #0
   1b3ca:	d112      	bne.n	1b3f2 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   1b3cc:	68fa      	ldr	r2, [r7, #12]
   1b3ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b3d0:	3304      	adds	r3, #4
   1b3d2:	00db      	lsls	r3, r3, #3
   1b3d4:	18d3      	adds	r3, r2, r3
   1b3d6:	3304      	adds	r3, #4
   1b3d8:	68ba      	ldr	r2, [r7, #8]
   1b3da:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   1b3dc:	68fa      	ldr	r2, [r7, #12]
   1b3de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b3e0:	3304      	adds	r3, #4
   1b3e2:	00db      	lsls	r3, r3, #3
   1b3e4:	18d3      	adds	r3, r2, r3
   1b3e6:	3308      	adds	r3, #8
   1b3e8:	683a      	ldr	r2, [r7, #0]
   1b3ea:	601a      	str	r2, [r3, #0]
                    rc = 0;
   1b3ec:	2300      	movs	r3, #0
   1b3ee:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   1b3f0:	e00f      	b.n	1b412 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1b3f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b3f4:	3301      	adds	r3, #1
   1b3f6:	643b      	str	r3, [r7, #64]	; 0x40
   1b3f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b3fa:	2b04      	cmp	r3, #4
   1b3fc:	dddd      	ble.n	1b3ba <MQTTSubscribe+0x10e>
   1b3fe:	e008      	b.n	1b412 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   1b400:	2301      	movs	r3, #1
   1b402:	425b      	negs	r3, r3
   1b404:	647b      	str	r3, [r7, #68]	; 0x44
   1b406:	e004      	b.n	1b412 <MQTTSubscribe+0x166>
		goto exit;
   1b408:	46c0      	nop			; (mov r8, r8)
   1b40a:	e002      	b.n	1b412 <MQTTSubscribe+0x166>
        goto exit;
   1b40c:	46c0      	nop			; (mov r8, r8)
   1b40e:	e000      	b.n	1b412 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   1b410:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1b412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   1b414:	0018      	movs	r0, r3
   1b416:	46bd      	mov	sp, r7
   1b418:	b012      	add	sp, #72	; 0x48
   1b41a:	bdb0      	pop	{r4, r5, r7, pc}
   1b41c:	0001b841 	.word	0x0001b841
   1b420:	0001b7c9 	.word	0x0001b7c9
   1b424:	0001a989 	.word	0x0001a989
   1b428:	0001cd79 	.word	0x0001cd79
   1b42c:	0001a9b9 	.word	0x0001a9b9
   1b430:	0001b121 	.word	0x0001b121
   1b434:	0001cec9 	.word	0x0001cec9

0001b438 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   1b438:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b43a:	46ce      	mov	lr, r9
   1b43c:	4647      	mov	r7, r8
   1b43e:	b580      	push	{r7, lr}
   1b440:	b097      	sub	sp, #92	; 0x5c
   1b442:	af08      	add	r7, sp, #32
   1b444:	60f8      	str	r0, [r7, #12]
   1b446:	60b9      	str	r1, [r7, #8]
   1b448:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   1b44a:	2301      	movs	r3, #1
   1b44c:	425b      	negs	r3, r3
   1b44e:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   1b450:	2318      	movs	r3, #24
   1b452:	18fb      	adds	r3, r7, r3
   1b454:	2200      	movs	r2, #0
   1b456:	601a      	str	r2, [r3, #0]
   1b458:	2318      	movs	r3, #24
   1b45a:	18fb      	adds	r3, r7, r3
   1b45c:	2200      	movs	r2, #0
   1b45e:	605a      	str	r2, [r3, #4]
   1b460:	2318      	movs	r3, #24
   1b462:	18fb      	adds	r3, r7, r3
   1b464:	2200      	movs	r2, #0
   1b466:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   1b468:	2318      	movs	r3, #24
   1b46a:	18fb      	adds	r3, r7, r3
   1b46c:	68ba      	ldr	r2, [r7, #8]
   1b46e:	601a      	str	r2, [r3, #0]
    int len = 0;
   1b470:	2300      	movs	r3, #0
   1b472:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1b474:	68fb      	ldr	r3, [r7, #12]
   1b476:	6a1b      	ldr	r3, [r3, #32]
   1b478:	2b00      	cmp	r3, #0
   1b47a:	d100      	bne.n	1b47e <MQTTPublish+0x46>
   1b47c:	e0a0      	b.n	1b5c0 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   1b47e:	2324      	movs	r3, #36	; 0x24
   1b480:	18fb      	adds	r3, r7, r3
   1b482:	0018      	movs	r0, r3
   1b484:	4b55      	ldr	r3, [pc, #340]	; (1b5dc <MQTTPublish+0x1a4>)
   1b486:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1b488:	68fb      	ldr	r3, [r7, #12]
   1b48a:	685a      	ldr	r2, [r3, #4]
   1b48c:	2324      	movs	r3, #36	; 0x24
   1b48e:	18fb      	adds	r3, r7, r3
   1b490:	0011      	movs	r1, r2
   1b492:	0018      	movs	r0, r3
   1b494:	4b52      	ldr	r3, [pc, #328]	; (1b5e0 <MQTTPublish+0x1a8>)
   1b496:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   1b498:	687b      	ldr	r3, [r7, #4]
   1b49a:	781b      	ldrb	r3, [r3, #0]
   1b49c:	2b01      	cmp	r3, #1
   1b49e:	d003      	beq.n	1b4a8 <MQTTPublish+0x70>
   1b4a0:	687b      	ldr	r3, [r7, #4]
   1b4a2:	781b      	ldrb	r3, [r3, #0]
   1b4a4:	2b02      	cmp	r3, #2
   1b4a6:	d107      	bne.n	1b4b8 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   1b4a8:	68fb      	ldr	r3, [r7, #12]
   1b4aa:	0018      	movs	r0, r3
   1b4ac:	4b4d      	ldr	r3, [pc, #308]	; (1b5e4 <MQTTPublish+0x1ac>)
   1b4ae:	4798      	blx	r3
   1b4b0:	0003      	movs	r3, r0
   1b4b2:	b29a      	uxth	r2, r3
   1b4b4:	687b      	ldr	r3, [r7, #4]
   1b4b6:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   1b4b8:	68fb      	ldr	r3, [r7, #12]
   1b4ba:	691b      	ldr	r3, [r3, #16]
   1b4bc:	469c      	mov	ip, r3
   1b4be:	68fb      	ldr	r3, [r7, #12]
   1b4c0:	689b      	ldr	r3, [r3, #8]
   1b4c2:	001d      	movs	r5, r3
   1b4c4:	687b      	ldr	r3, [r7, #4]
   1b4c6:	781b      	ldrb	r3, [r3, #0]
   1b4c8:	001e      	movs	r6, r3
   1b4ca:	687b      	ldr	r3, [r7, #4]
   1b4cc:	785b      	ldrb	r3, [r3, #1]
   1b4ce:	4698      	mov	r8, r3
   1b4d0:	687b      	ldr	r3, [r7, #4]
   1b4d2:	889b      	ldrh	r3, [r3, #4]
   1b4d4:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   1b4d6:	687b      	ldr	r3, [r7, #4]
   1b4d8:	689a      	ldr	r2, [r3, #8]
   1b4da:	687b      	ldr	r3, [r7, #4]
   1b4dc:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   1b4de:	9306      	str	r3, [sp, #24]
   1b4e0:	9205      	str	r2, [sp, #20]
   1b4e2:	2318      	movs	r3, #24
   1b4e4:	18fa      	adds	r2, r7, r3
   1b4e6:	2308      	movs	r3, #8
   1b4e8:	446b      	add	r3, sp
   1b4ea:	ca13      	ldmia	r2!, {r0, r1, r4}
   1b4ec:	c313      	stmia	r3!, {r0, r1, r4}
   1b4ee:	464b      	mov	r3, r9
   1b4f0:	9301      	str	r3, [sp, #4]
   1b4f2:	4643      	mov	r3, r8
   1b4f4:	9300      	str	r3, [sp, #0]
   1b4f6:	0033      	movs	r3, r6
   1b4f8:	2200      	movs	r2, #0
   1b4fa:	0029      	movs	r1, r5
   1b4fc:	4660      	mov	r0, ip
   1b4fe:	4c3a      	ldr	r4, [pc, #232]	; (1b5e8 <MQTTPublish+0x1b0>)
   1b500:	47a0      	blx	r4
   1b502:	0003      	movs	r3, r0
   1b504:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   1b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b508:	2b00      	cmp	r3, #0
   1b50a:	dd5b      	ble.n	1b5c4 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1b50c:	2324      	movs	r3, #36	; 0x24
   1b50e:	18fa      	adds	r2, r7, r3
   1b510:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1b512:	68fb      	ldr	r3, [r7, #12]
   1b514:	0018      	movs	r0, r3
   1b516:	4b35      	ldr	r3, [pc, #212]	; (1b5ec <MQTTPublish+0x1b4>)
   1b518:	4798      	blx	r3
   1b51a:	0003      	movs	r3, r0
   1b51c:	637b      	str	r3, [r7, #52]	; 0x34
   1b51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b520:	2b00      	cmp	r3, #0
   1b522:	d151      	bne.n	1b5c8 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   1b524:	687b      	ldr	r3, [r7, #4]
   1b526:	781b      	ldrb	r3, [r3, #0]
   1b528:	2b01      	cmp	r3, #1
   1b52a:	d122      	bne.n	1b572 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   1b52c:	2324      	movs	r3, #36	; 0x24
   1b52e:	18fa      	adds	r2, r7, r3
   1b530:	68fb      	ldr	r3, [r7, #12]
   1b532:	2104      	movs	r1, #4
   1b534:	0018      	movs	r0, r3
   1b536:	4b2e      	ldr	r3, [pc, #184]	; (1b5f0 <MQTTPublish+0x1b8>)
   1b538:	4798      	blx	r3
   1b53a:	0003      	movs	r3, r0
   1b53c:	2b04      	cmp	r3, #4
   1b53e:	d114      	bne.n	1b56a <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1b540:	68fb      	ldr	r3, [r7, #12]
   1b542:	695c      	ldr	r4, [r3, #20]
   1b544:	68fb      	ldr	r3, [r7, #12]
   1b546:	68db      	ldr	r3, [r3, #12]
   1b548:	2216      	movs	r2, #22
   1b54a:	18ba      	adds	r2, r7, r2
   1b54c:	2115      	movs	r1, #21
   1b54e:	1879      	adds	r1, r7, r1
   1b550:	2014      	movs	r0, #20
   1b552:	1838      	adds	r0, r7, r0
   1b554:	9300      	str	r3, [sp, #0]
   1b556:	0023      	movs	r3, r4
   1b558:	4c26      	ldr	r4, [pc, #152]	; (1b5f4 <MQTTPublish+0x1bc>)
   1b55a:	47a0      	blx	r4
   1b55c:	0003      	movs	r3, r0
   1b55e:	2b01      	cmp	r3, #1
   1b560:	d033      	beq.n	1b5ca <MQTTPublish+0x192>
                rc = FAILURE;
   1b562:	2301      	movs	r3, #1
   1b564:	425b      	negs	r3, r3
   1b566:	637b      	str	r3, [r7, #52]	; 0x34
   1b568:	e02f      	b.n	1b5ca <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   1b56a:	2301      	movs	r3, #1
   1b56c:	425b      	negs	r3, r3
   1b56e:	637b      	str	r3, [r7, #52]	; 0x34
   1b570:	e02b      	b.n	1b5ca <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   1b572:	687b      	ldr	r3, [r7, #4]
   1b574:	781b      	ldrb	r3, [r3, #0]
   1b576:	2b02      	cmp	r3, #2
   1b578:	d127      	bne.n	1b5ca <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   1b57a:	2324      	movs	r3, #36	; 0x24
   1b57c:	18fa      	adds	r2, r7, r3
   1b57e:	68fb      	ldr	r3, [r7, #12]
   1b580:	2107      	movs	r1, #7
   1b582:	0018      	movs	r0, r3
   1b584:	4b1a      	ldr	r3, [pc, #104]	; (1b5f0 <MQTTPublish+0x1b8>)
   1b586:	4798      	blx	r3
   1b588:	0003      	movs	r3, r0
   1b58a:	2b07      	cmp	r3, #7
   1b58c:	d114      	bne.n	1b5b8 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1b58e:	68fb      	ldr	r3, [r7, #12]
   1b590:	695c      	ldr	r4, [r3, #20]
   1b592:	68fb      	ldr	r3, [r7, #12]
   1b594:	68db      	ldr	r3, [r3, #12]
   1b596:	2212      	movs	r2, #18
   1b598:	18ba      	adds	r2, r7, r2
   1b59a:	2111      	movs	r1, #17
   1b59c:	1879      	adds	r1, r7, r1
   1b59e:	2010      	movs	r0, #16
   1b5a0:	1838      	adds	r0, r7, r0
   1b5a2:	9300      	str	r3, [sp, #0]
   1b5a4:	0023      	movs	r3, r4
   1b5a6:	4c13      	ldr	r4, [pc, #76]	; (1b5f4 <MQTTPublish+0x1bc>)
   1b5a8:	47a0      	blx	r4
   1b5aa:	0003      	movs	r3, r0
   1b5ac:	2b01      	cmp	r3, #1
   1b5ae:	d00c      	beq.n	1b5ca <MQTTPublish+0x192>
                rc = FAILURE;
   1b5b0:	2301      	movs	r3, #1
   1b5b2:	425b      	negs	r3, r3
   1b5b4:	637b      	str	r3, [r7, #52]	; 0x34
   1b5b6:	e008      	b.n	1b5ca <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   1b5b8:	2301      	movs	r3, #1
   1b5ba:	425b      	negs	r3, r3
   1b5bc:	637b      	str	r3, [r7, #52]	; 0x34
   1b5be:	e004      	b.n	1b5ca <MQTTPublish+0x192>
		goto exit;
   1b5c0:	46c0      	nop			; (mov r8, r8)
   1b5c2:	e002      	b.n	1b5ca <MQTTPublish+0x192>
        goto exit;
   1b5c4:	46c0      	nop			; (mov r8, r8)
   1b5c6:	e000      	b.n	1b5ca <MQTTPublish+0x192>
        goto exit; // there was a problem
   1b5c8:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1b5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   1b5cc:	0018      	movs	r0, r3
   1b5ce:	46bd      	mov	sp, r7
   1b5d0:	b00f      	add	sp, #60	; 0x3c
   1b5d2:	bc0c      	pop	{r2, r3}
   1b5d4:	4690      	mov	r8, r2
   1b5d6:	4699      	mov	r9, r3
   1b5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b5da:	46c0      	nop			; (mov r8, r8)
   1b5dc:	0001b841 	.word	0x0001b841
   1b5e0:	0001b7c9 	.word	0x0001b7c9
   1b5e4:	0001a989 	.word	0x0001a989
   1b5e8:	0001cac5 	.word	0x0001cac5
   1b5ec:	0001a9b9 	.word	0x0001a9b9
   1b5f0:	0001b121 	.word	0x0001b121
   1b5f4:	0001c53d 	.word	0x0001c53d

0001b5f8 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   1b5f8:	b580      	push	{r7, lr}
   1b5fa:	b088      	sub	sp, #32
   1b5fc:	af00      	add	r7, sp, #0
   1b5fe:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   1b600:	2301      	movs	r3, #1
   1b602:	425b      	negs	r3, r3
   1b604:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   1b606:	2300      	movs	r3, #0
   1b608:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   1b60a:	230c      	movs	r3, #12
   1b60c:	18fb      	adds	r3, r7, r3
   1b60e:	0018      	movs	r0, r3
   1b610:	4b13      	ldr	r3, [pc, #76]	; (1b660 <MQTTDisconnect+0x68>)
   1b612:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1b614:	687b      	ldr	r3, [r7, #4]
   1b616:	685a      	ldr	r2, [r3, #4]
   1b618:	230c      	movs	r3, #12
   1b61a:	18fb      	adds	r3, r7, r3
   1b61c:	0011      	movs	r1, r2
   1b61e:	0018      	movs	r0, r3
   1b620:	4b10      	ldr	r3, [pc, #64]	; (1b664 <MQTTDisconnect+0x6c>)
   1b622:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   1b624:	687b      	ldr	r3, [r7, #4]
   1b626:	691a      	ldr	r2, [r3, #16]
   1b628:	687b      	ldr	r3, [r7, #4]
   1b62a:	689b      	ldr	r3, [r3, #8]
   1b62c:	0019      	movs	r1, r3
   1b62e:	0010      	movs	r0, r2
   1b630:	4b0d      	ldr	r3, [pc, #52]	; (1b668 <MQTTDisconnect+0x70>)
   1b632:	4798      	blx	r3
   1b634:	0003      	movs	r3, r0
   1b636:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   1b638:	69bb      	ldr	r3, [r7, #24]
   1b63a:	2b00      	cmp	r3, #0
   1b63c:	dd08      	ble.n	1b650 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   1b63e:	230c      	movs	r3, #12
   1b640:	18fa      	adds	r2, r7, r3
   1b642:	69b9      	ldr	r1, [r7, #24]
   1b644:	687b      	ldr	r3, [r7, #4]
   1b646:	0018      	movs	r0, r3
   1b648:	4b08      	ldr	r3, [pc, #32]	; (1b66c <MQTTDisconnect+0x74>)
   1b64a:	4798      	blx	r3
   1b64c:	0003      	movs	r3, r0
   1b64e:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   1b650:	687b      	ldr	r3, [r7, #4]
   1b652:	2200      	movs	r2, #0
   1b654:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1b656:	69fb      	ldr	r3, [r7, #28]
}
   1b658:	0018      	movs	r0, r3
   1b65a:	46bd      	mov	sp, r7
   1b65c:	b008      	add	sp, #32
   1b65e:	bd80      	pop	{r7, pc}
   1b660:	0001b841 	.word	0x0001b841
   1b664:	0001b7c9 	.word	0x0001b7c9
   1b668:	0001c3f1 	.word	0x0001c3f1
   1b66c:	0001a9b9 	.word	0x0001a9b9

0001b670 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   1b670:	b580      	push	{r7, lr}
   1b672:	b084      	sub	sp, #16
   1b674:	af00      	add	r7, sp, #0
   1b676:	0002      	movs	r2, r0
   1b678:	1dfb      	adds	r3, r7, #7
   1b67a:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1b67c:	2300      	movs	r3, #0
   1b67e:	60fb      	str	r3, [r7, #12]
   1b680:	e01c      	b.n	1b6bc <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   1b682:	4a12      	ldr	r2, [pc, #72]	; (1b6cc <isMQTTSocket+0x5c>)
   1b684:	68fb      	ldr	r3, [r7, #12]
   1b686:	2164      	movs	r1, #100	; 0x64
   1b688:	434b      	muls	r3, r1
   1b68a:	18d3      	adds	r3, r2, r3
   1b68c:	3360      	adds	r3, #96	; 0x60
   1b68e:	681b      	ldr	r3, [r3, #0]
   1b690:	2b00      	cmp	r3, #0
   1b692:	d010      	beq.n	1b6b6 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   1b694:	4a0d      	ldr	r2, [pc, #52]	; (1b6cc <isMQTTSocket+0x5c>)
   1b696:	68fb      	ldr	r3, [r7, #12]
   1b698:	2164      	movs	r1, #100	; 0x64
   1b69a:	434b      	muls	r3, r1
   1b69c:	18d3      	adds	r3, r2, r3
   1b69e:	3360      	adds	r3, #96	; 0x60
   1b6a0:	681b      	ldr	r3, [r3, #0]
   1b6a2:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   1b6a4:	68bb      	ldr	r3, [r7, #8]
   1b6a6:	6a1a      	ldr	r2, [r3, #32]
   1b6a8:	1dfb      	adds	r3, r7, #7
   1b6aa:	781b      	ldrb	r3, [r3, #0]
   1b6ac:	b25b      	sxtb	r3, r3
   1b6ae:	429a      	cmp	r2, r3
   1b6b0:	d101      	bne.n	1b6b6 <isMQTTSocket+0x46>
				return true;
   1b6b2:	2301      	movs	r3, #1
   1b6b4:	e006      	b.n	1b6c4 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1b6b6:	68fb      	ldr	r3, [r7, #12]
   1b6b8:	3301      	adds	r3, #1
   1b6ba:	60fb      	str	r3, [r7, #12]
   1b6bc:	68fb      	ldr	r3, [r7, #12]
   1b6be:	2b06      	cmp	r3, #6
   1b6c0:	d9df      	bls.n	1b682 <isMQTTSocket+0x12>
		}
	}
	return false;
   1b6c2:	2300      	movs	r3, #0
}
   1b6c4:	0018      	movs	r0, r3
   1b6c6:	46bd      	mov	sp, r7
   1b6c8:	b004      	add	sp, #16
   1b6ca:	bd80      	pop	{r7, pc}
   1b6cc:	200042ac 	.word	0x200042ac

0001b6d0 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   1b6d0:	b580      	push	{r7, lr}
   1b6d2:	b082      	sub	sp, #8
   1b6d4:	af00      	add	r7, sp, #0
   1b6d6:	6078      	str	r0, [r7, #4]
   1b6d8:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   1b6da:	4b0d      	ldr	r3, [pc, #52]	; (1b710 <dnsResolveCallback+0x40>)
   1b6dc:	781b      	ldrb	r3, [r3, #0]
   1b6de:	2201      	movs	r2, #1
   1b6e0:	4053      	eors	r3, r2
   1b6e2:	b2db      	uxtb	r3, r3
   1b6e4:	2b00      	cmp	r3, #0
   1b6e6:	d00e      	beq.n	1b706 <dnsResolveCallback+0x36>
   1b6e8:	4b0a      	ldr	r3, [pc, #40]	; (1b714 <dnsResolveCallback+0x44>)
   1b6ea:	681b      	ldr	r3, [r3, #0]
   1b6ec:	687a      	ldr	r2, [r7, #4]
   1b6ee:	0011      	movs	r1, r2
   1b6f0:	0018      	movs	r0, r3
   1b6f2:	4b09      	ldr	r3, [pc, #36]	; (1b718 <dnsResolveCallback+0x48>)
   1b6f4:	4798      	blx	r3
   1b6f6:	1e03      	subs	r3, r0, #0
   1b6f8:	d105      	bne.n	1b706 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   1b6fa:	683a      	ldr	r2, [r7, #0]
   1b6fc:	4b07      	ldr	r3, [pc, #28]	; (1b71c <dnsResolveCallback+0x4c>)
   1b6fe:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   1b700:	4b03      	ldr	r3, [pc, #12]	; (1b710 <dnsResolveCallback+0x40>)
   1b702:	2201      	movs	r2, #1
   1b704:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   1b706:	46c0      	nop			; (mov r8, r8)
   1b708:	46bd      	mov	sp, r7
   1b70a:	b002      	add	sp, #8
   1b70c:	bd80      	pop	{r7, pc}
   1b70e:	46c0      	nop			; (mov r8, r8)
   1b710:	2000419c 	.word	0x2000419c
   1b714:	200042a8 	.word	0x200042a8
   1b718:	000210e3 	.word	0x000210e3
   1b71c:	20004194 	.word	0x20004194

0001b720 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   1b720:	b580      	push	{r7, lr}
   1b722:	b084      	sub	sp, #16
   1b724:	af00      	add	r7, sp, #0
   1b726:	603a      	str	r2, [r7, #0]
   1b728:	1dfb      	adds	r3, r7, #7
   1b72a:	1c02      	adds	r2, r0, #0
   1b72c:	701a      	strb	r2, [r3, #0]
   1b72e:	1dbb      	adds	r3, r7, #6
   1b730:	1c0a      	adds	r2, r1, #0
   1b732:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   1b734:	1dfb      	adds	r3, r7, #7
   1b736:	781b      	ldrb	r3, [r3, #0]
   1b738:	b25b      	sxtb	r3, r3
   1b73a:	0018      	movs	r0, r3
   1b73c:	4b12      	ldr	r3, [pc, #72]	; (1b788 <tcpClientSocketEventHandler+0x68>)
   1b73e:	4798      	blx	r3
   1b740:	1e03      	subs	r3, r0, #0
   1b742:	d01c      	beq.n	1b77e <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   1b744:	1dbb      	adds	r3, r7, #6
   1b746:	781b      	ldrb	r3, [r3, #0]
   1b748:	2b06      	cmp	r3, #6
   1b74a:	d00c      	beq.n	1b766 <tcpClientSocketEventHandler+0x46>
   1b74c:	2b07      	cmp	r3, #7
   1b74e:	d006      	beq.n	1b75e <tcpClientSocketEventHandler+0x3e>
   1b750:	2b05      	cmp	r3, #5
   1b752:	d000      	beq.n	1b756 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   1b754:	e013      	b.n	1b77e <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   1b756:	4b0d      	ldr	r3, [pc, #52]	; (1b78c <tcpClientSocketEventHandler+0x6c>)
   1b758:	2201      	movs	r2, #1
   1b75a:	701a      	strb	r2, [r3, #0]
			break;
   1b75c:	e00f      	b.n	1b77e <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   1b75e:	4b0c      	ldr	r3, [pc, #48]	; (1b790 <tcpClientSocketEventHandler+0x70>)
   1b760:	2201      	movs	r2, #1
   1b762:	701a      	strb	r2, [r3, #0]
			break;
   1b764:	e00b      	b.n	1b77e <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   1b766:	683b      	ldr	r3, [r7, #0]
   1b768:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   1b76a:	68fb      	ldr	r3, [r7, #12]
   1b76c:	2204      	movs	r2, #4
   1b76e:	5e9b      	ldrsh	r3, [r3, r2]
   1b770:	001a      	movs	r2, r3
   1b772:	4b08      	ldr	r3, [pc, #32]	; (1b794 <tcpClientSocketEventHandler+0x74>)
   1b774:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   1b776:	4b08      	ldr	r3, [pc, #32]	; (1b798 <tcpClientSocketEventHandler+0x78>)
   1b778:	2201      	movs	r2, #1
   1b77a:	701a      	strb	r2, [r3, #0]
			break;
   1b77c:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1b77e:	46c0      	nop			; (mov r8, r8)
   1b780:	46bd      	mov	sp, r7
   1b782:	b004      	add	sp, #16
   1b784:	bd80      	pop	{r7, pc}
   1b786:	46c0      	nop			; (mov r8, r8)
   1b788:	0001b671 	.word	0x0001b671
   1b78c:	2000419d 	.word	0x2000419d
   1b790:	2000419e 	.word	0x2000419e
   1b794:	20004198 	.word	0x20004198
   1b798:	2000419f 	.word	0x2000419f

0001b79c <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   1b79c:	b580      	push	{r7, lr}
   1b79e:	b082      	sub	sp, #8
   1b7a0:	af00      	add	r7, sp, #0
   1b7a2:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   1b7a4:	687b      	ldr	r3, [r7, #4]
   1b7a6:	3304      	adds	r3, #4
   1b7a8:	687a      	ldr	r2, [r7, #4]
   1b7aa:	0011      	movs	r1, r2
   1b7ac:	0018      	movs	r0, r3
   1b7ae:	4b05      	ldr	r3, [pc, #20]	; (1b7c4 <TimerIsExpired+0x28>)
   1b7b0:	4798      	blx	r3
   1b7b2:	0003      	movs	r3, r0
   1b7b4:	3b01      	subs	r3, #1
   1b7b6:	425a      	negs	r2, r3
   1b7b8:	4153      	adcs	r3, r2
   1b7ba:	b2db      	uxtb	r3, r3
}
   1b7bc:	0018      	movs	r0, r3
   1b7be:	46bd      	mov	sp, r7
   1b7c0:	b002      	add	sp, #8
   1b7c2:	bd80      	pop	{r7, pc}
   1b7c4:	00009035 	.word	0x00009035

0001b7c8 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   1b7c8:	b580      	push	{r7, lr}
   1b7ca:	b082      	sub	sp, #8
   1b7cc:	af00      	add	r7, sp, #0
   1b7ce:	6078      	str	r0, [r7, #4]
   1b7d0:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   1b7d2:	687b      	ldr	r3, [r7, #4]
   1b7d4:	683a      	ldr	r2, [r7, #0]
   1b7d6:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   1b7d8:	687b      	ldr	r3, [r7, #4]
   1b7da:	3304      	adds	r3, #4
   1b7dc:	0018      	movs	r0, r3
   1b7de:	4b03      	ldr	r3, [pc, #12]	; (1b7ec <TimerCountdownMS+0x24>)
   1b7e0:	4798      	blx	r3
}
   1b7e2:	46c0      	nop			; (mov r8, r8)
   1b7e4:	46bd      	mov	sp, r7
   1b7e6:	b002      	add	sp, #8
   1b7e8:	bd80      	pop	{r7, pc}
   1b7ea:	46c0      	nop			; (mov r8, r8)
   1b7ec:	00008fc9 	.word	0x00008fc9

0001b7f0 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   1b7f0:	b580      	push	{r7, lr}
   1b7f2:	b082      	sub	sp, #8
   1b7f4:	af00      	add	r7, sp, #0
   1b7f6:	6078      	str	r0, [r7, #4]
   1b7f8:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   1b7fa:	683b      	ldr	r3, [r7, #0]
   1b7fc:	22fa      	movs	r2, #250	; 0xfa
   1b7fe:	0092      	lsls	r2, r2, #2
   1b800:	435a      	muls	r2, r3
   1b802:	687b      	ldr	r3, [r7, #4]
   1b804:	0011      	movs	r1, r2
   1b806:	0018      	movs	r0, r3
   1b808:	4b02      	ldr	r3, [pc, #8]	; (1b814 <TimerCountdown+0x24>)
   1b80a:	4798      	blx	r3
}
   1b80c:	46c0      	nop			; (mov r8, r8)
   1b80e:	46bd      	mov	sp, r7
   1b810:	b002      	add	sp, #8
   1b812:	bd80      	pop	{r7, pc}
   1b814:	0001b7c9 	.word	0x0001b7c9

0001b818 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   1b818:	b580      	push	{r7, lr}
   1b81a:	b082      	sub	sp, #8
   1b81c:	af00      	add	r7, sp, #0
   1b81e:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   1b820:	687b      	ldr	r3, [r7, #4]
   1b822:	3304      	adds	r3, #4
   1b824:	687a      	ldr	r2, [r7, #4]
   1b826:	0011      	movs	r1, r2
   1b828:	0018      	movs	r0, r3
   1b82a:	4b04      	ldr	r3, [pc, #16]	; (1b83c <TimerLeftMS+0x24>)
   1b82c:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   1b82e:	687b      	ldr	r3, [r7, #4]
   1b830:	681b      	ldr	r3, [r3, #0]
}
   1b832:	0018      	movs	r0, r3
   1b834:	46bd      	mov	sp, r7
   1b836:	b002      	add	sp, #8
   1b838:	bd80      	pop	{r7, pc}
   1b83a:	46c0      	nop			; (mov r8, r8)
   1b83c:	00009035 	.word	0x00009035

0001b840 <TimerInit>:


void TimerInit(Timer* timer) {
   1b840:	b580      	push	{r7, lr}
   1b842:	b082      	sub	sp, #8
   1b844:	af00      	add	r7, sp, #0
   1b846:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   1b848:	687b      	ldr	r3, [r7, #4]
   1b84a:	2200      	movs	r2, #0
   1b84c:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   1b84e:	687b      	ldr	r3, [r7, #4]
   1b850:	3304      	adds	r3, #4
   1b852:	2208      	movs	r2, #8
   1b854:	2100      	movs	r1, #0
   1b856:	0018      	movs	r0, r3
   1b858:	4b02      	ldr	r3, [pc, #8]	; (1b864 <TimerInit+0x24>)
   1b85a:	4798      	blx	r3
}
   1b85c:	46c0      	nop			; (mov r8, r8)
   1b85e:	46bd      	mov	sp, r7
   1b860:	b002      	add	sp, #8
   1b862:	bd80      	pop	{r7, pc}
   1b864:	00020d8b 	.word	0x00020d8b

0001b868 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   1b868:	b590      	push	{r4, r7, lr}
   1b86a:	b085      	sub	sp, #20
   1b86c:	af00      	add	r7, sp, #0
   1b86e:	60f8      	str	r0, [r7, #12]
   1b870:	60b9      	str	r1, [r7, #8]
   1b872:	607a      	str	r2, [r7, #4]
   1b874:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   1b876:	683b      	ldr	r3, [r7, #0]
   1b878:	2b00      	cmp	r3, #0
   1b87a:	d101      	bne.n	1b880 <WINC1500_read+0x18>
   1b87c:	230a      	movs	r3, #10
   1b87e:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   1b880:	4b2c      	ldr	r3, [pc, #176]	; (1b934 <WINC1500_read+0xcc>)
   1b882:	681b      	ldr	r3, [r3, #0]
   1b884:	2b00      	cmp	r3, #0
   1b886:	d131      	bne.n	1b8ec <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   1b888:	4b2b      	ldr	r3, [pc, #172]	; (1b938 <WINC1500_read+0xd0>)
   1b88a:	2200      	movs	r2, #0
   1b88c:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   1b88e:	68fb      	ldr	r3, [r7, #12]
   1b890:	681b      	ldr	r3, [r3, #0]
   1b892:	b258      	sxtb	r0, r3
   1b894:	683c      	ldr	r4, [r7, #0]
   1b896:	2380      	movs	r3, #128	; 0x80
   1b898:	005a      	lsls	r2, r3, #1
   1b89a:	4928      	ldr	r1, [pc, #160]	; (1b93c <WINC1500_read+0xd4>)
   1b89c:	0023      	movs	r3, r4
   1b89e:	4c28      	ldr	r4, [pc, #160]	; (1b940 <WINC1500_read+0xd8>)
   1b8a0:	47a0      	blx	r4
   1b8a2:	1e03      	subs	r3, r0, #0
   1b8a4:	d005      	beq.n	1b8b2 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   1b8a6:	2301      	movs	r3, #1
   1b8a8:	425b      	negs	r3, r3
   1b8aa:	e03e      	b.n	1b92a <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   1b8ac:	2000      	movs	r0, #0
   1b8ae:	4b25      	ldr	r3, [pc, #148]	; (1b944 <WINC1500_read+0xdc>)
   1b8b0:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   1b8b2:	4b21      	ldr	r3, [pc, #132]	; (1b938 <WINC1500_read+0xd0>)
   1b8b4:	781b      	ldrb	r3, [r3, #0]
   1b8b6:	2201      	movs	r2, #1
   1b8b8:	4053      	eors	r3, r2
   1b8ba:	b2db      	uxtb	r3, r3
   1b8bc:	2b00      	cmp	r3, #0
   1b8be:	d1f5      	bne.n	1b8ac <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   1b8c0:	4b21      	ldr	r3, [pc, #132]	; (1b948 <WINC1500_read+0xe0>)
   1b8c2:	681b      	ldr	r3, [r3, #0]
   1b8c4:	2b00      	cmp	r3, #0
   1b8c6:	dd08      	ble.n	1b8da <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   1b8c8:	4b1f      	ldr	r3, [pc, #124]	; (1b948 <WINC1500_read+0xe0>)
   1b8ca:	681b      	ldr	r3, [r3, #0]
   1b8cc:	001a      	movs	r2, r3
   1b8ce:	4b19      	ldr	r3, [pc, #100]	; (1b934 <WINC1500_read+0xcc>)
   1b8d0:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   1b8d2:	4b1e      	ldr	r3, [pc, #120]	; (1b94c <WINC1500_read+0xe4>)
   1b8d4:	2200      	movs	r2, #0
   1b8d6:	601a      	str	r2, [r3, #0]
   1b8d8:	e008      	b.n	1b8ec <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   1b8da:	4b16      	ldr	r3, [pc, #88]	; (1b934 <WINC1500_read+0xcc>)
   1b8dc:	2200      	movs	r2, #0
   1b8de:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   1b8e0:	4b1a      	ldr	r3, [pc, #104]	; (1b94c <WINC1500_read+0xe4>)
   1b8e2:	2200      	movs	r2, #0
   1b8e4:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   1b8e6:	4b18      	ldr	r3, [pc, #96]	; (1b948 <WINC1500_read+0xe0>)
   1b8e8:	681b      	ldr	r3, [r3, #0]
   1b8ea:	e01e      	b.n	1b92a <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   1b8ec:	4b11      	ldr	r3, [pc, #68]	; (1b934 <WINC1500_read+0xcc>)
   1b8ee:	681b      	ldr	r3, [r3, #0]
   1b8f0:	001a      	movs	r2, r3
   1b8f2:	687b      	ldr	r3, [r7, #4]
   1b8f4:	4293      	cmp	r3, r2
   1b8f6:	dd02      	ble.n	1b8fe <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   1b8f8:	2301      	movs	r3, #1
   1b8fa:	425b      	negs	r3, r3
   1b8fc:	e015      	b.n	1b92a <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   1b8fe:	4b13      	ldr	r3, [pc, #76]	; (1b94c <WINC1500_read+0xe4>)
   1b900:	681a      	ldr	r2, [r3, #0]
   1b902:	4b0e      	ldr	r3, [pc, #56]	; (1b93c <WINC1500_read+0xd4>)
   1b904:	18d1      	adds	r1, r2, r3
   1b906:	687a      	ldr	r2, [r7, #4]
   1b908:	68bb      	ldr	r3, [r7, #8]
   1b90a:	0018      	movs	r0, r3
   1b90c:	4b10      	ldr	r3, [pc, #64]	; (1b950 <WINC1500_read+0xe8>)
   1b90e:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   1b910:	4b08      	ldr	r3, [pc, #32]	; (1b934 <WINC1500_read+0xcc>)
   1b912:	681a      	ldr	r2, [r3, #0]
   1b914:	687b      	ldr	r3, [r7, #4]
   1b916:	1ad2      	subs	r2, r2, r3
   1b918:	4b06      	ldr	r3, [pc, #24]	; (1b934 <WINC1500_read+0xcc>)
   1b91a:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   1b91c:	4b0b      	ldr	r3, [pc, #44]	; (1b94c <WINC1500_read+0xe4>)
   1b91e:	681a      	ldr	r2, [r3, #0]
   1b920:	687b      	ldr	r3, [r7, #4]
   1b922:	18d2      	adds	r2, r2, r3
   1b924:	4b09      	ldr	r3, [pc, #36]	; (1b94c <WINC1500_read+0xe4>)
   1b926:	601a      	str	r2, [r3, #0]
  
  return len;
   1b928:	687b      	ldr	r3, [r7, #4]
}
   1b92a:	0018      	movs	r0, r3
   1b92c:	46bd      	mov	sp, r7
   1b92e:	b005      	add	sp, #20
   1b930:	bd90      	pop	{r4, r7, pc}
   1b932:	46c0      	nop			; (mov r8, r8)
   1b934:	200042a4 	.word	0x200042a4
   1b938:	2000419f 	.word	0x2000419f
   1b93c:	200041a0 	.word	0x200041a0
   1b940:	00011f1d 	.word	0x00011f1d
   1b944:	0000e465 	.word	0x0000e465
   1b948:	20004198 	.word	0x20004198
   1b94c:	200042a0 	.word	0x200042a0
   1b950:	00020d55 	.word	0x00020d55

0001b954 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   1b954:	b590      	push	{r4, r7, lr}
   1b956:	b085      	sub	sp, #20
   1b958:	af00      	add	r7, sp, #0
   1b95a:	60f8      	str	r0, [r7, #12]
   1b95c:	60b9      	str	r1, [r7, #8]
   1b95e:	607a      	str	r2, [r7, #4]
   1b960:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   1b962:	4b10      	ldr	r3, [pc, #64]	; (1b9a4 <WINC1500_write+0x50>)
   1b964:	2200      	movs	r2, #0
   1b966:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   1b968:	68fb      	ldr	r3, [r7, #12]
   1b96a:	681b      	ldr	r3, [r3, #0]
   1b96c:	b258      	sxtb	r0, r3
   1b96e:	687b      	ldr	r3, [r7, #4]
   1b970:	b29a      	uxth	r2, r3
   1b972:	68b9      	ldr	r1, [r7, #8]
   1b974:	2300      	movs	r3, #0
   1b976:	4c0c      	ldr	r4, [pc, #48]	; (1b9a8 <WINC1500_write+0x54>)
   1b978:	47a0      	blx	r4
   1b97a:	1e03      	subs	r3, r0, #0
   1b97c:	d005      	beq.n	1b98a <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   1b97e:	2301      	movs	r3, #1
   1b980:	425b      	negs	r3, r3
   1b982:	e00a      	b.n	1b99a <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   1b984:	2000      	movs	r0, #0
   1b986:	4b09      	ldr	r3, [pc, #36]	; (1b9ac <WINC1500_write+0x58>)
   1b988:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   1b98a:	4b06      	ldr	r3, [pc, #24]	; (1b9a4 <WINC1500_write+0x50>)
   1b98c:	781b      	ldrb	r3, [r3, #0]
   1b98e:	2201      	movs	r2, #1
   1b990:	4053      	eors	r3, r2
   1b992:	b2db      	uxtb	r3, r3
   1b994:	2b00      	cmp	r3, #0
   1b996:	d1f5      	bne.n	1b984 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   1b998:	687b      	ldr	r3, [r7, #4]
}
   1b99a:	0018      	movs	r0, r3
   1b99c:	46bd      	mov	sp, r7
   1b99e:	b005      	add	sp, #20
   1b9a0:	bd90      	pop	{r4, r7, pc}
   1b9a2:	46c0      	nop			; (mov r8, r8)
   1b9a4:	2000419e 	.word	0x2000419e
   1b9a8:	00011db9 	.word	0x00011db9
   1b9ac:	0000e465 	.word	0x0000e465

0001b9b0 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   1b9b0:	b580      	push	{r7, lr}
   1b9b2:	b082      	sub	sp, #8
   1b9b4:	af00      	add	r7, sp, #0
   1b9b6:	6078      	str	r0, [r7, #4]
	close(n->socket);
   1b9b8:	687b      	ldr	r3, [r7, #4]
   1b9ba:	681b      	ldr	r3, [r3, #0]
   1b9bc:	b25b      	sxtb	r3, r3
   1b9be:	0018      	movs	r0, r3
   1b9c0:	4b06      	ldr	r3, [pc, #24]	; (1b9dc <WINC1500_disconnect+0x2c>)
   1b9c2:	4798      	blx	r3
	n->socket=-1;
   1b9c4:	687b      	ldr	r3, [r7, #4]
   1b9c6:	2201      	movs	r2, #1
   1b9c8:	4252      	negs	r2, r2
   1b9ca:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   1b9cc:	4b04      	ldr	r3, [pc, #16]	; (1b9e0 <WINC1500_disconnect+0x30>)
   1b9ce:	2200      	movs	r2, #0
   1b9d0:	701a      	strb	r2, [r3, #0]
}
   1b9d2:	46c0      	nop			; (mov r8, r8)
   1b9d4:	46bd      	mov	sp, r7
   1b9d6:	b002      	add	sp, #8
   1b9d8:	bd80      	pop	{r7, pc}
   1b9da:	46c0      	nop			; (mov r8, r8)
   1b9dc:	0001209d 	.word	0x0001209d
   1b9e0:	2000419d 	.word	0x2000419d

0001b9e4 <NetworkInit>:


void NetworkInit(Network* n) {
   1b9e4:	b580      	push	{r7, lr}
   1b9e6:	b082      	sub	sp, #8
   1b9e8:	af00      	add	r7, sp, #0
   1b9ea:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   1b9ec:	687b      	ldr	r3, [r7, #4]
   1b9ee:	2201      	movs	r2, #1
   1b9f0:	4252      	negs	r2, r2
   1b9f2:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   1b9f4:	687b      	ldr	r3, [r7, #4]
   1b9f6:	4a06      	ldr	r2, [pc, #24]	; (1ba10 <NetworkInit+0x2c>)
   1b9f8:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   1b9fa:	687b      	ldr	r3, [r7, #4]
   1b9fc:	4a05      	ldr	r2, [pc, #20]	; (1ba14 <NetworkInit+0x30>)
   1b9fe:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   1ba00:	687b      	ldr	r3, [r7, #4]
   1ba02:	4a05      	ldr	r2, [pc, #20]	; (1ba18 <NetworkInit+0x34>)
   1ba04:	611a      	str	r2, [r3, #16]
}
   1ba06:	46c0      	nop			; (mov r8, r8)
   1ba08:	46bd      	mov	sp, r7
   1ba0a:	b002      	add	sp, #8
   1ba0c:	bd80      	pop	{r7, pc}
   1ba0e:	46c0      	nop			; (mov r8, r8)
   1ba10:	0001b869 	.word	0x0001b869
   1ba14:	0001b955 	.word	0x0001b955
   1ba18:	0001b9b1 	.word	0x0001b9b1

0001ba1c <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   1ba1c:	b580      	push	{r7, lr}
   1ba1e:	b088      	sub	sp, #32
   1ba20:	af00      	add	r7, sp, #0
   1ba22:	60f8      	str	r0, [r7, #12]
   1ba24:	60b9      	str	r1, [r7, #8]
   1ba26:	607a      	str	r2, [r7, #4]
   1ba28:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   1ba2a:	4b37      	ldr	r3, [pc, #220]	; (1bb08 <ConnectNetwork+0xec>)
   1ba2c:	2200      	movs	r2, #0
   1ba2e:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   1ba30:	4b36      	ldr	r3, [pc, #216]	; (1bb0c <ConnectNetwork+0xf0>)
   1ba32:	68ba      	ldr	r2, [r7, #8]
   1ba34:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   1ba36:	68bb      	ldr	r3, [r7, #8]
   1ba38:	0018      	movs	r0, r3
   1ba3a:	4b35      	ldr	r3, [pc, #212]	; (1bb10 <ConnectNetwork+0xf4>)
   1ba3c:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   1ba3e:	e002      	b.n	1ba46 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   1ba40:	2000      	movs	r0, #0
   1ba42:	4b34      	ldr	r3, [pc, #208]	; (1bb14 <ConnectNetwork+0xf8>)
   1ba44:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   1ba46:	4b30      	ldr	r3, [pc, #192]	; (1bb08 <ConnectNetwork+0xec>)
   1ba48:	781b      	ldrb	r3, [r3, #0]
   1ba4a:	2201      	movs	r2, #1
   1ba4c:	4053      	eors	r3, r2
   1ba4e:	b2db      	uxtb	r3, r3
   1ba50:	2b00      	cmp	r3, #0
   1ba52:	d1f5      	bne.n	1ba40 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   1ba54:	4b30      	ldr	r3, [pc, #192]	; (1bb18 <ConnectNetwork+0xfc>)
   1ba56:	681a      	ldr	r2, [r3, #0]
   1ba58:	68fb      	ldr	r3, [r7, #12]
   1ba5a:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   1ba5c:	2310      	movs	r3, #16
   1ba5e:	18fb      	adds	r3, r7, r3
   1ba60:	2202      	movs	r2, #2
   1ba62:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   1ba64:	687b      	ldr	r3, [r7, #4]
   1ba66:	b29b      	uxth	r3, r3
   1ba68:	021b      	lsls	r3, r3, #8
   1ba6a:	b21a      	sxth	r2, r3
   1ba6c:	687b      	ldr	r3, [r7, #4]
   1ba6e:	b29b      	uxth	r3, r3
   1ba70:	0a1b      	lsrs	r3, r3, #8
   1ba72:	b29b      	uxth	r3, r3
   1ba74:	b21b      	sxth	r3, r3
   1ba76:	4313      	orrs	r3, r2
   1ba78:	b21b      	sxth	r3, r3
   1ba7a:	b29a      	uxth	r2, r3
   1ba7c:	2310      	movs	r3, #16
   1ba7e:	18fb      	adds	r3, r7, r3
   1ba80:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   1ba82:	4b25      	ldr	r3, [pc, #148]	; (1bb18 <ConnectNetwork+0xfc>)
   1ba84:	681b      	ldr	r3, [r3, #0]
   1ba86:	001a      	movs	r2, r3
   1ba88:	2310      	movs	r3, #16
   1ba8a:	18fb      	adds	r3, r7, r3
   1ba8c:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   1ba8e:	68fb      	ldr	r3, [r7, #12]
   1ba90:	681b      	ldr	r3, [r3, #0]
   1ba92:	2b00      	cmp	r3, #0
   1ba94:	da0a      	bge.n	1baac <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   1ba96:	683b      	ldr	r3, [r7, #0]
   1ba98:	b2db      	uxtb	r3, r3
   1ba9a:	001a      	movs	r2, r3
   1ba9c:	2101      	movs	r1, #1
   1ba9e:	2002      	movs	r0, #2
   1baa0:	4b1e      	ldr	r3, [pc, #120]	; (1bb1c <ConnectNetwork+0x100>)
   1baa2:	4798      	blx	r3
   1baa4:	0003      	movs	r3, r0
   1baa6:	001a      	movs	r2, r3
   1baa8:	68fb      	ldr	r3, [r7, #12]
   1baaa:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   1baac:	68fb      	ldr	r3, [r7, #12]
   1baae:	681b      	ldr	r3, [r3, #0]
   1bab0:	3301      	adds	r3, #1
   1bab2:	d108      	bne.n	1bac6 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   1bab4:	68fb      	ldr	r3, [r7, #12]
   1bab6:	681b      	ldr	r3, [r3, #0]
   1bab8:	b25b      	sxtb	r3, r3
   1baba:	0018      	movs	r0, r3
   1babc:	4b18      	ldr	r3, [pc, #96]	; (1bb20 <ConnectNetwork+0x104>)
   1babe:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   1bac0:	2309      	movs	r3, #9
   1bac2:	425b      	negs	r3, r3
   1bac4:	e01c      	b.n	1bb00 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   1bac6:	68fb      	ldr	r3, [r7, #12]
   1bac8:	681b      	ldr	r3, [r3, #0]
   1baca:	b25b      	sxtb	r3, r3
   1bacc:	2210      	movs	r2, #16
   1bace:	18b9      	adds	r1, r7, r2
   1bad0:	2210      	movs	r2, #16
   1bad2:	0018      	movs	r0, r3
   1bad4:	4b13      	ldr	r3, [pc, #76]	; (1bb24 <ConnectNetwork+0x108>)
   1bad6:	4798      	blx	r3
   1bad8:	1e03      	subs	r3, r0, #0
   1bada:	d002      	beq.n	1bae2 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   1badc:	2309      	movs	r3, #9
   1bade:	425b      	negs	r3, r3
   1bae0:	e00e      	b.n	1bb00 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   1bae2:	4b11      	ldr	r3, [pc, #68]	; (1bb28 <ConnectNetwork+0x10c>)
   1bae4:	2200      	movs	r2, #0
   1bae6:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   1bae8:	e002      	b.n	1baf0 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   1baea:	2000      	movs	r0, #0
   1baec:	4b09      	ldr	r3, [pc, #36]	; (1bb14 <ConnectNetwork+0xf8>)
   1baee:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   1baf0:	4b0d      	ldr	r3, [pc, #52]	; (1bb28 <ConnectNetwork+0x10c>)
   1baf2:	781b      	ldrb	r3, [r3, #0]
   1baf4:	2201      	movs	r2, #1
   1baf6:	4053      	eors	r3, r2
   1baf8:	b2db      	uxtb	r3, r3
   1bafa:	2b00      	cmp	r3, #0
   1bafc:	d1f5      	bne.n	1baea <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   1bafe:	2300      	movs	r3, #0
   1bb00:	0018      	movs	r0, r3
   1bb02:	46bd      	mov	sp, r7
   1bb04:	b008      	add	sp, #32
   1bb06:	bd80      	pop	{r7, pc}
   1bb08:	2000419c 	.word	0x2000419c
   1bb0c:	200042a8 	.word	0x200042a8
   1bb10:	000122e5 	.word	0x000122e5
   1bb14:	0000e465 	.word	0x0000e465
   1bb18:	20004194 	.word	0x20004194
   1bb1c:	00011a91 	.word	0x00011a91
   1bb20:	0001209d 	.word	0x0001209d
   1bb24:	00011ca5 	.word	0x00011ca5
   1bb28:	2000419d 	.word	0x2000419d

0001bb2c <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   1bb2c:	b580      	push	{r7, lr}
   1bb2e:	b084      	sub	sp, #16
   1bb30:	af00      	add	r7, sp, #0
   1bb32:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   1bb34:	687b      	ldr	r3, [r7, #4]
   1bb36:	2b00      	cmp	r3, #0
   1bb38:	d022      	beq.n	1bb80 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1bb3a:	2300      	movs	r3, #0
   1bb3c:	60fb      	str	r3, [r7, #12]
   1bb3e:	e01b      	b.n	1bb78 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   1bb40:	4a11      	ldr	r2, [pc, #68]	; (1bb88 <allocateClient+0x5c>)
   1bb42:	68fb      	ldr	r3, [r7, #12]
   1bb44:	2164      	movs	r1, #100	; 0x64
   1bb46:	434b      	muls	r3, r1
   1bb48:	18d3      	adds	r3, r2, r3
   1bb4a:	3360      	adds	r3, #96	; 0x60
   1bb4c:	681b      	ldr	r3, [r3, #0]
   1bb4e:	2b00      	cmp	r3, #0
   1bb50:	d10f      	bne.n	1bb72 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   1bb52:	4a0d      	ldr	r2, [pc, #52]	; (1bb88 <allocateClient+0x5c>)
   1bb54:	68fb      	ldr	r3, [r7, #12]
   1bb56:	2164      	movs	r1, #100	; 0x64
   1bb58:	434b      	muls	r3, r1
   1bb5a:	18d3      	adds	r3, r2, r3
   1bb5c:	3360      	adds	r3, #96	; 0x60
   1bb5e:	687a      	ldr	r2, [r7, #4]
   1bb60:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   1bb62:	68fb      	ldr	r3, [r7, #12]
   1bb64:	2264      	movs	r2, #100	; 0x64
   1bb66:	435a      	muls	r2, r3
   1bb68:	4b07      	ldr	r3, [pc, #28]	; (1bb88 <allocateClient+0x5c>)
   1bb6a:	18d2      	adds	r2, r2, r3
   1bb6c:	687b      	ldr	r3, [r7, #4]
   1bb6e:	61da      	str	r2, [r3, #28]
			return;
   1bb70:	e007      	b.n	1bb82 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1bb72:	68fb      	ldr	r3, [r7, #12]
   1bb74:	3301      	adds	r3, #1
   1bb76:	60fb      	str	r3, [r7, #12]
   1bb78:	68fb      	ldr	r3, [r7, #12]
   1bb7a:	2b06      	cmp	r3, #6
   1bb7c:	d9e0      	bls.n	1bb40 <allocateClient+0x14>
   1bb7e:	e000      	b.n	1bb82 <allocateClient+0x56>
		return;
   1bb80:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   1bb82:	46bd      	mov	sp, r7
   1bb84:	b004      	add	sp, #16
   1bb86:	bd80      	pop	{r7, pc}
   1bb88:	200042ac 	.word	0x200042ac

0001bb8c <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   1bb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb8e:	b089      	sub	sp, #36	; 0x24
   1bb90:	af04      	add	r7, sp, #16
   1bb92:	6078      	str	r0, [r7, #4]
   1bb94:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   1bb96:	687b      	ldr	r3, [r7, #4]
   1bb98:	2b00      	cmp	r3, #0
   1bb9a:	d00a      	beq.n	1bbb2 <mqtt_init+0x26>
   1bb9c:	683b      	ldr	r3, [r7, #0]
   1bb9e:	2b00      	cmp	r3, #0
   1bba0:	d007      	beq.n	1bbb2 <mqtt_init+0x26>
   1bba2:	683b      	ldr	r3, [r7, #0]
   1bba4:	691b      	ldr	r3, [r3, #16]
   1bba6:	2b00      	cmp	r3, #0
   1bba8:	d003      	beq.n	1bbb2 <mqtt_init+0x26>
   1bbaa:	683b      	ldr	r3, [r7, #0]
   1bbac:	689b      	ldr	r3, [r3, #8]
   1bbae:	2b00      	cmp	r3, #0
   1bbb0:	d102      	bne.n	1bbb8 <mqtt_init+0x2c>
		return FAILURE;
   1bbb2:	2301      	movs	r3, #1
   1bbb4:	425b      	negs	r3, r3
   1bbb6:	e034      	b.n	1bc22 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   1bbb8:	683b      	ldr	r3, [r7, #0]
   1bbba:	889b      	ldrh	r3, [r3, #4]
   1bbbc:	001a      	movs	r2, r3
   1bbbe:	23fa      	movs	r3, #250	; 0xfa
   1bbc0:	009b      	lsls	r3, r3, #2
   1bbc2:	4353      	muls	r3, r2
   1bbc4:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   1bbc6:	687b      	ldr	r3, [r7, #4]
   1bbc8:	3320      	adds	r3, #32
   1bbca:	0018      	movs	r0, r3
   1bbcc:	4b17      	ldr	r3, [pc, #92]	; (1bc2c <mqtt_init+0xa0>)
   1bbce:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   1bbd0:	687b      	ldr	r3, [r7, #4]
   1bbd2:	3304      	adds	r3, #4
   1bbd4:	6839      	ldr	r1, [r7, #0]
   1bbd6:	2218      	movs	r2, #24
   1bbd8:	0018      	movs	r0, r3
   1bbda:	4b15      	ldr	r3, [pc, #84]	; (1bc30 <mqtt_init+0xa4>)
   1bbdc:	4798      	blx	r3
	allocateClient(module);
   1bbde:	687b      	ldr	r3, [r7, #4]
   1bbe0:	0018      	movs	r0, r3
   1bbe2:	4b14      	ldr	r3, [pc, #80]	; (1bc34 <mqtt_init+0xa8>)
   1bbe4:	4798      	blx	r3
	
	if(module->client)
   1bbe6:	687b      	ldr	r3, [r7, #4]
   1bbe8:	69db      	ldr	r3, [r3, #28]
   1bbea:	2b00      	cmp	r3, #0
   1bbec:	d017      	beq.n	1bc1e <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   1bbee:	687b      	ldr	r3, [r7, #4]
   1bbf0:	69d8      	ldr	r0, [r3, #28]
   1bbf2:	687b      	ldr	r3, [r7, #4]
   1bbf4:	3320      	adds	r3, #32
   1bbf6:	001c      	movs	r4, r3
   1bbf8:	683b      	ldr	r3, [r7, #0]
   1bbfa:	691e      	ldr	r6, [r3, #16]
   1bbfc:	683b      	ldr	r3, [r7, #0]
   1bbfe:	695a      	ldr	r2, [r3, #20]
   1bc00:	683b      	ldr	r3, [r7, #0]
   1bc02:	6899      	ldr	r1, [r3, #8]
   1bc04:	683b      	ldr	r3, [r7, #0]
   1bc06:	68db      	ldr	r3, [r3, #12]
   1bc08:	68fd      	ldr	r5, [r7, #12]
   1bc0a:	9302      	str	r3, [sp, #8]
   1bc0c:	9101      	str	r1, [sp, #4]
   1bc0e:	9200      	str	r2, [sp, #0]
   1bc10:	0033      	movs	r3, r6
   1bc12:	002a      	movs	r2, r5
   1bc14:	0021      	movs	r1, r4
   1bc16:	4c08      	ldr	r4, [pc, #32]	; (1bc38 <mqtt_init+0xac>)
   1bc18:	47a0      	blx	r4
		return SUCCESS;
   1bc1a:	2300      	movs	r3, #0
   1bc1c:	e001      	b.n	1bc22 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   1bc1e:	2301      	movs	r3, #1
   1bc20:	425b      	negs	r3, r3
}
   1bc22:	0018      	movs	r0, r3
   1bc24:	46bd      	mov	sp, r7
   1bc26:	b005      	add	sp, #20
   1bc28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bc2a:	46c0      	nop			; (mov r8, r8)
   1bc2c:	0001b9e5 	.word	0x0001b9e5
   1bc30:	00020d55 	.word	0x00020d55
   1bc34:	0001bb2d 	.word	0x0001bb2d
   1bc38:	0001aa5d 	.word	0x0001aa5d

0001bc3c <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   1bc3c:	b580      	push	{r7, lr}
   1bc3e:	b082      	sub	sp, #8
   1bc40:	af00      	add	r7, sp, #0
   1bc42:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   1bc44:	687b      	ldr	r3, [r7, #4]
   1bc46:	4a0c      	ldr	r2, [pc, #48]	; (1bc78 <mqtt_get_config_defaults+0x3c>)
   1bc48:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   1bc4a:	687b      	ldr	r3, [r7, #4]
   1bc4c:	2200      	movs	r2, #0
   1bc4e:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   1bc50:	687b      	ldr	r3, [r7, #4]
   1bc52:	223c      	movs	r2, #60	; 0x3c
   1bc54:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   1bc56:	687b      	ldr	r3, [r7, #4]
   1bc58:	2200      	movs	r2, #0
   1bc5a:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   1bc5c:	687b      	ldr	r3, [r7, #4]
   1bc5e:	2200      	movs	r2, #0
   1bc60:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   1bc62:	687b      	ldr	r3, [r7, #4]
   1bc64:	2200      	movs	r2, #0
   1bc66:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   1bc68:	687b      	ldr	r3, [r7, #4]
   1bc6a:	2200      	movs	r2, #0
   1bc6c:	615a      	str	r2, [r3, #20]
}
   1bc6e:	46c0      	nop			; (mov r8, r8)
   1bc70:	46bd      	mov	sp, r7
   1bc72:	b002      	add	sp, #8
   1bc74:	bd80      	pop	{r7, pc}
   1bc76:	46c0      	nop			; (mov r8, r8)
   1bc78:	0000075b 	.word	0x0000075b

0001bc7c <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   1bc7c:	b580      	push	{r7, lr}
   1bc7e:	b082      	sub	sp, #8
   1bc80:	af00      	add	r7, sp, #0
   1bc82:	6078      	str	r0, [r7, #4]
   1bc84:	6039      	str	r1, [r7, #0]
	if(module)
   1bc86:	687b      	ldr	r3, [r7, #4]
   1bc88:	2b00      	cmp	r3, #0
   1bc8a:	d004      	beq.n	1bc96 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   1bc8c:	687b      	ldr	r3, [r7, #4]
   1bc8e:	683a      	ldr	r2, [r7, #0]
   1bc90:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   1bc92:	2300      	movs	r3, #0
   1bc94:	e001      	b.n	1bc9a <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   1bc96:	2301      	movs	r3, #1
   1bc98:	425b      	negs	r3, r3
}
   1bc9a:	0018      	movs	r0, r3
   1bc9c:	46bd      	mov	sp, r7
   1bc9e:	b002      	add	sp, #8
   1bca0:	bd80      	pop	{r7, pc}
	...

0001bca4 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   1bca4:	b580      	push	{r7, lr}
   1bca6:	b082      	sub	sp, #8
   1bca8:	af00      	add	r7, sp, #0
   1bcaa:	603a      	str	r2, [r7, #0]
   1bcac:	1dfb      	adds	r3, r7, #7
   1bcae:	1c02      	adds	r2, r0, #0
   1bcb0:	701a      	strb	r2, [r3, #0]
   1bcb2:	1dbb      	adds	r3, r7, #6
   1bcb4:	1c0a      	adds	r2, r1, #0
   1bcb6:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   1bcb8:	683a      	ldr	r2, [r7, #0]
   1bcba:	1dbb      	adds	r3, r7, #6
   1bcbc:	7819      	ldrb	r1, [r3, #0]
   1bcbe:	1dfb      	adds	r3, r7, #7
   1bcc0:	781b      	ldrb	r3, [r3, #0]
   1bcc2:	b25b      	sxtb	r3, r3
   1bcc4:	0018      	movs	r0, r3
   1bcc6:	4b03      	ldr	r3, [pc, #12]	; (1bcd4 <mqtt_socket_event_handler+0x30>)
   1bcc8:	4798      	blx	r3
}
   1bcca:	46c0      	nop			; (mov r8, r8)
   1bccc:	46bd      	mov	sp, r7
   1bcce:	b002      	add	sp, #8
   1bcd0:	bd80      	pop	{r7, pc}
   1bcd2:	46c0      	nop			; (mov r8, r8)
   1bcd4:	0001b721 	.word	0x0001b721

0001bcd8 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   1bcd8:	b580      	push	{r7, lr}
   1bcda:	b082      	sub	sp, #8
   1bcdc:	af00      	add	r7, sp, #0
   1bcde:	6078      	str	r0, [r7, #4]
   1bce0:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   1bce2:	683a      	ldr	r2, [r7, #0]
   1bce4:	687b      	ldr	r3, [r7, #4]
   1bce6:	0011      	movs	r1, r2
   1bce8:	0018      	movs	r0, r3
   1bcea:	4b03      	ldr	r3, [pc, #12]	; (1bcf8 <mqtt_socket_resolve_handler+0x20>)
   1bcec:	4798      	blx	r3
}
   1bcee:	46c0      	nop			; (mov r8, r8)
   1bcf0:	46bd      	mov	sp, r7
   1bcf2:	b002      	add	sp, #8
   1bcf4:	bd80      	pop	{r7, pc}
   1bcf6:	46c0      	nop			; (mov r8, r8)
   1bcf8:	0001b6d1 	.word	0x0001b6d1

0001bcfc <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   1bcfc:	b590      	push	{r4, r7, lr}
   1bcfe:	b085      	sub	sp, #20
   1bd00:	af00      	add	r7, sp, #0
   1bd02:	6078      	str	r0, [r7, #4]
   1bd04:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   1bd06:	687b      	ldr	r3, [r7, #4]
   1bd08:	3320      	adds	r3, #32
   1bd0a:	0018      	movs	r0, r3
   1bd0c:	687b      	ldr	r3, [r7, #4]
   1bd0e:	889b      	ldrh	r3, [r3, #4]
   1bd10:	001a      	movs	r2, r3
   1bd12:	687b      	ldr	r3, [r7, #4]
   1bd14:	799b      	ldrb	r3, [r3, #6]
   1bd16:	6839      	ldr	r1, [r7, #0]
   1bd18:	4c09      	ldr	r4, [pc, #36]	; (1bd40 <mqtt_connect+0x44>)
   1bd1a:	47a0      	blx	r4
   1bd1c:	0003      	movs	r3, r0
   1bd1e:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   1bd20:	687b      	ldr	r3, [r7, #4]
   1bd22:	681b      	ldr	r3, [r3, #0]
   1bd24:	2b00      	cmp	r3, #0
   1bd26:	d006      	beq.n	1bd36 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   1bd28:	687b      	ldr	r3, [r7, #4]
   1bd2a:	681b      	ldr	r3, [r3, #0]
   1bd2c:	220c      	movs	r2, #12
   1bd2e:	18ba      	adds	r2, r7, r2
   1bd30:	6878      	ldr	r0, [r7, #4]
   1bd32:	2100      	movs	r1, #0
   1bd34:	4798      	blx	r3
	return connResult.sock_connected.result;
   1bd36:	68fb      	ldr	r3, [r7, #12]
}
   1bd38:	0018      	movs	r0, r3
   1bd3a:	46bd      	mov	sp, r7
   1bd3c:	b005      	add	sp, #20
   1bd3e:	bd90      	pop	{r4, r7, pc}
   1bd40:	0001ba1d 	.word	0x0001ba1d

0001bd44 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   1bd44:	b580      	push	{r7, lr}
   1bd46:	b09c      	sub	sp, #112	; 0x70
   1bd48:	af00      	add	r7, sp, #0
   1bd4a:	60f8      	str	r0, [r7, #12]
   1bd4c:	607a      	str	r2, [r7, #4]
   1bd4e:	603b      	str	r3, [r7, #0]
   1bd50:	230b      	movs	r3, #11
   1bd52:	18fb      	adds	r3, r7, r3
   1bd54:	1c0a      	adds	r2, r1, #0
   1bd56:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   1bd58:	2310      	movs	r3, #16
   1bd5a:	18fa      	adds	r2, r7, r3
   1bd5c:	4b31      	ldr	r3, [pc, #196]	; (1be24 <mqtt_connect_broker+0xe0>)
   1bd5e:	0010      	movs	r0, r2
   1bd60:	0019      	movs	r1, r3
   1bd62:	2358      	movs	r3, #88	; 0x58
   1bd64:	001a      	movs	r2, r3
   1bd66:	4b30      	ldr	r3, [pc, #192]	; (1be28 <mqtt_connect_broker+0xe4>)
   1bd68:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   1bd6a:	2310      	movs	r3, #16
   1bd6c:	18fb      	adds	r3, r7, r3
   1bd6e:	2204      	movs	r2, #4
   1bd70:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   1bd72:	2310      	movs	r3, #16
   1bd74:	18fb      	adds	r3, r7, r3
   1bd76:	6fba      	ldr	r2, [r7, #120]	; 0x78
   1bd78:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   1bd7a:	2310      	movs	r3, #16
   1bd7c:	18fb      	adds	r3, r7, r3
   1bd7e:	687a      	ldr	r2, [r7, #4]
   1bd80:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   1bd82:	2310      	movs	r3, #16
   1bd84:	18fb      	adds	r3, r7, r3
   1bd86:	683a      	ldr	r2, [r7, #0]
   1bd88:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   1bd8a:	2310      	movs	r3, #16
   1bd8c:	18fb      	adds	r3, r7, r3
   1bd8e:	220b      	movs	r2, #11
   1bd90:	18ba      	adds	r2, r7, r2
   1bd92:	7812      	ldrb	r2, [r2, #0]
   1bd94:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   1bd96:	2310      	movs	r3, #16
   1bd98:	18fb      	adds	r3, r7, r3
   1bd9a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1bd9c:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   1bd9e:	2310      	movs	r3, #16
   1bda0:	18fb      	adds	r3, r7, r3
   1bda2:	2280      	movs	r2, #128	; 0x80
   1bda4:	18ba      	adds	r2, r7, r2
   1bda6:	6812      	ldr	r2, [r2, #0]
   1bda8:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   1bdaa:	2310      	movs	r3, #16
   1bdac:	18fb      	adds	r3, r7, r3
   1bdae:	228c      	movs	r2, #140	; 0x8c
   1bdb0:	18ba      	adds	r2, r7, r2
   1bdb2:	213c      	movs	r1, #60	; 0x3c
   1bdb4:	7812      	ldrb	r2, [r2, #0]
   1bdb6:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   1bdb8:	2310      	movs	r3, #16
   1bdba:	18fb      	adds	r3, r7, r3
   1bdbc:	2288      	movs	r2, #136	; 0x88
   1bdbe:	18ba      	adds	r2, r7, r2
   1bdc0:	213d      	movs	r1, #61	; 0x3d
   1bdc2:	7812      	ldrb	r2, [r2, #0]
   1bdc4:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   1bdc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1bdc8:	2b00      	cmp	r3, #0
   1bdca:	d008      	beq.n	1bdde <mqtt_connect_broker+0x9a>
   1bdcc:	2380      	movs	r3, #128	; 0x80
   1bdce:	18fb      	adds	r3, r7, r3
   1bdd0:	681b      	ldr	r3, [r3, #0]
   1bdd2:	2b00      	cmp	r3, #0
   1bdd4:	d003      	beq.n	1bdde <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   1bdd6:	2310      	movs	r3, #16
   1bdd8:	18fb      	adds	r3, r7, r3
   1bdda:	2201      	movs	r2, #1
   1bddc:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   1bdde:	68fb      	ldr	r3, [r7, #12]
   1bde0:	69db      	ldr	r3, [r3, #28]
   1bde2:	2210      	movs	r2, #16
   1bde4:	18ba      	adds	r2, r7, r2
   1bde6:	0011      	movs	r1, r2
   1bde8:	0018      	movs	r0, r3
   1bdea:	4b10      	ldr	r3, [pc, #64]	; (1be2c <mqtt_connect_broker+0xe8>)
   1bdec:	4798      	blx	r3
   1bdee:	0003      	movs	r3, r0
   1bdf0:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   1bdf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1bdf4:	b2da      	uxtb	r2, r3
   1bdf6:	2368      	movs	r3, #104	; 0x68
   1bdf8:	18fb      	adds	r3, r7, r3
   1bdfa:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   1bdfc:	68fb      	ldr	r3, [r7, #12]
   1bdfe:	681b      	ldr	r3, [r3, #0]
   1be00:	2b00      	cmp	r3, #0
   1be02:	d006      	beq.n	1be12 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   1be04:	68fb      	ldr	r3, [r7, #12]
   1be06:	681b      	ldr	r3, [r3, #0]
   1be08:	2268      	movs	r2, #104	; 0x68
   1be0a:	18ba      	adds	r2, r7, r2
   1be0c:	68f8      	ldr	r0, [r7, #12]
   1be0e:	2101      	movs	r1, #1
   1be10:	4798      	blx	r3
	
	module->isConnected = true;
   1be12:	68fb      	ldr	r3, [r7, #12]
   1be14:	2234      	movs	r2, #52	; 0x34
   1be16:	2101      	movs	r1, #1
   1be18:	5499      	strb	r1, [r3, r2]
	return rc;
   1be1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   1be1c:	0018      	movs	r0, r3
   1be1e:	46bd      	mov	sp, r7
   1be20:	b01c      	add	sp, #112	; 0x70
   1be22:	bd80      	pop	{r7, pc}
   1be24:	00026b8c 	.word	0x00026b8c
   1be28:	00020d55 	.word	0x00020d55
   1be2c:	0001b16d 	.word	0x0001b16d

0001be30 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   1be30:	b580      	push	{r7, lr}
   1be32:	b084      	sub	sp, #16
   1be34:	af00      	add	r7, sp, #0
   1be36:	6078      	str	r0, [r7, #4]
   1be38:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   1be3a:	687b      	ldr	r3, [r7, #4]
   1be3c:	69db      	ldr	r3, [r3, #28]
   1be3e:	0018      	movs	r0, r3
   1be40:	4b0c      	ldr	r3, [pc, #48]	; (1be74 <mqtt_disconnect+0x44>)
   1be42:	4798      	blx	r3
   1be44:	0003      	movs	r3, r0
   1be46:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   1be48:	68fb      	ldr	r3, [r7, #12]
   1be4a:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   1be4c:	687b      	ldr	r3, [r7, #4]
   1be4e:	681b      	ldr	r3, [r3, #0]
   1be50:	2b00      	cmp	r3, #0
   1be52:	d006      	beq.n	1be62 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   1be54:	687b      	ldr	r3, [r7, #4]
   1be56:	681b      	ldr	r3, [r3, #0]
   1be58:	2208      	movs	r2, #8
   1be5a:	18ba      	adds	r2, r7, r2
   1be5c:	6878      	ldr	r0, [r7, #4]
   1be5e:	2105      	movs	r1, #5
   1be60:	4798      	blx	r3
	
	module->isConnected = false;
   1be62:	687b      	ldr	r3, [r7, #4]
   1be64:	2234      	movs	r2, #52	; 0x34
   1be66:	2100      	movs	r1, #0
   1be68:	5499      	strb	r1, [r3, r2]
	return rc;
   1be6a:	68fb      	ldr	r3, [r7, #12]
}
   1be6c:	0018      	movs	r0, r3
   1be6e:	46bd      	mov	sp, r7
   1be70:	b004      	add	sp, #16
   1be72:	bd80      	pop	{r7, pc}
   1be74:	0001b5f9 	.word	0x0001b5f9

0001be78 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   1be78:	b580      	push	{r7, lr}
   1be7a:	b08a      	sub	sp, #40	; 0x28
   1be7c:	af00      	add	r7, sp, #0
   1be7e:	60f8      	str	r0, [r7, #12]
   1be80:	60b9      	str	r1, [r7, #8]
   1be82:	607a      	str	r2, [r7, #4]
   1be84:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   1be86:	2314      	movs	r3, #20
   1be88:	18fb      	adds	r3, r7, r3
   1be8a:	2230      	movs	r2, #48	; 0x30
   1be8c:	18ba      	adds	r2, r7, r2
   1be8e:	7812      	ldrb	r2, [r2, #0]
   1be90:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   1be92:	2314      	movs	r3, #20
   1be94:	18fb      	adds	r3, r7, r3
   1be96:	687a      	ldr	r2, [r7, #4]
   1be98:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   1be9a:	2314      	movs	r3, #20
   1be9c:	18fb      	adds	r3, r7, r3
   1be9e:	683a      	ldr	r2, [r7, #0]
   1bea0:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   1bea2:	2314      	movs	r3, #20
   1bea4:	18fb      	adds	r3, r7, r3
   1bea6:	2234      	movs	r2, #52	; 0x34
   1bea8:	18ba      	adds	r2, r7, r2
   1beaa:	7812      	ldrb	r2, [r2, #0]
   1beac:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   1beae:	68fb      	ldr	r3, [r7, #12]
   1beb0:	69db      	ldr	r3, [r3, #28]
   1beb2:	2214      	movs	r2, #20
   1beb4:	18ba      	adds	r2, r7, r2
   1beb6:	68b9      	ldr	r1, [r7, #8]
   1beb8:	0018      	movs	r0, r3
   1beba:	4b09      	ldr	r3, [pc, #36]	; (1bee0 <mqtt_publish+0x68>)
   1bebc:	4798      	blx	r3
   1bebe:	0003      	movs	r3, r0
   1bec0:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   1bec2:	68fb      	ldr	r3, [r7, #12]
   1bec4:	681b      	ldr	r3, [r3, #0]
   1bec6:	2b00      	cmp	r3, #0
   1bec8:	d005      	beq.n	1bed6 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   1beca:	68fb      	ldr	r3, [r7, #12]
   1becc:	681b      	ldr	r3, [r3, #0]
   1bece:	68f8      	ldr	r0, [r7, #12]
   1bed0:	2200      	movs	r2, #0
   1bed2:	2102      	movs	r1, #2
   1bed4:	4798      	blx	r3
	
	return rc;
   1bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1bed8:	0018      	movs	r0, r3
   1beda:	46bd      	mov	sp, r7
   1bedc:	b00a      	add	sp, #40	; 0x28
   1bede:	bd80      	pop	{r7, pc}
   1bee0:	0001b439 	.word	0x0001b439

0001bee4 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   1bee4:	b590      	push	{r4, r7, lr}
   1bee6:	b087      	sub	sp, #28
   1bee8:	af00      	add	r7, sp, #0
   1beea:	60f8      	str	r0, [r7, #12]
   1beec:	60b9      	str	r1, [r7, #8]
   1beee:	603b      	str	r3, [r7, #0]
   1bef0:	1dfb      	adds	r3, r7, #7
   1bef2:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   1bef4:	68fb      	ldr	r3, [r7, #12]
   1bef6:	69d8      	ldr	r0, [r3, #28]
   1bef8:	683c      	ldr	r4, [r7, #0]
   1befa:	1dfb      	adds	r3, r7, #7
   1befc:	781a      	ldrb	r2, [r3, #0]
   1befe:	68b9      	ldr	r1, [r7, #8]
   1bf00:	0023      	movs	r3, r4
   1bf02:	4c09      	ldr	r4, [pc, #36]	; (1bf28 <mqtt_subscribe+0x44>)
   1bf04:	47a0      	blx	r4
   1bf06:	0003      	movs	r3, r0
   1bf08:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   1bf0a:	68fb      	ldr	r3, [r7, #12]
   1bf0c:	681b      	ldr	r3, [r3, #0]
   1bf0e:	2b00      	cmp	r3, #0
   1bf10:	d005      	beq.n	1bf1e <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   1bf12:	68fb      	ldr	r3, [r7, #12]
   1bf14:	681b      	ldr	r3, [r3, #0]
   1bf16:	68f8      	ldr	r0, [r7, #12]
   1bf18:	2200      	movs	r2, #0
   1bf1a:	2103      	movs	r1, #3
   1bf1c:	4798      	blx	r3
	
	return rc;
   1bf1e:	697b      	ldr	r3, [r7, #20]
}
   1bf20:	0018      	movs	r0, r3
   1bf22:	46bd      	mov	sp, r7
   1bf24:	b007      	add	sp, #28
   1bf26:	bd90      	pop	{r4, r7, pc}
   1bf28:	0001b2ad 	.word	0x0001b2ad

0001bf2c <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   1bf2c:	b580      	push	{r7, lr}
   1bf2e:	b082      	sub	sp, #8
   1bf30:	af00      	add	r7, sp, #0
   1bf32:	6078      	str	r0, [r7, #4]
   1bf34:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   1bf36:	687b      	ldr	r3, [r7, #4]
   1bf38:	69db      	ldr	r3, [r3, #28]
   1bf3a:	683a      	ldr	r2, [r7, #0]
   1bf3c:	0011      	movs	r1, r2
   1bf3e:	0018      	movs	r0, r3
   1bf40:	4b03      	ldr	r3, [pc, #12]	; (1bf50 <mqtt_yield+0x24>)
   1bf42:	4798      	blx	r3
   1bf44:	0003      	movs	r3, r0
   1bf46:	0018      	movs	r0, r3
   1bf48:	46bd      	mov	sp, r7
   1bf4a:	b002      	add	sp, #8
   1bf4c:	bd80      	pop	{r7, pc}
   1bf4e:	46c0      	nop			; (mov r8, r8)
   1bf50:	0001b0b5 	.word	0x0001b0b5

0001bf54 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   1bf54:	b590      	push	{r4, r7, lr}
   1bf56:	b085      	sub	sp, #20
   1bf58:	af00      	add	r7, sp, #0
   1bf5a:	6078      	str	r0, [r7, #4]
	int len = 0;
   1bf5c:	2300      	movs	r3, #0
   1bf5e:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   1bf60:	687b      	ldr	r3, [r7, #4]
   1bf62:	7a1b      	ldrb	r3, [r3, #8]
   1bf64:	2b03      	cmp	r3, #3
   1bf66:	d102      	bne.n	1bf6e <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   1bf68:	230c      	movs	r3, #12
   1bf6a:	60fb      	str	r3, [r7, #12]
   1bf6c:	e005      	b.n	1bf7a <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   1bf6e:	687b      	ldr	r3, [r7, #4]
   1bf70:	7a1b      	ldrb	r3, [r3, #8]
   1bf72:	2b04      	cmp	r3, #4
   1bf74:	d101      	bne.n	1bf7a <MQTTSerialize_connectLength+0x26>
		len = 10;
   1bf76:	230a      	movs	r3, #10
   1bf78:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   1bf7a:	687b      	ldr	r3, [r7, #4]
   1bf7c:	68d8      	ldr	r0, [r3, #12]
   1bf7e:	6919      	ldr	r1, [r3, #16]
   1bf80:	695a      	ldr	r2, [r3, #20]
   1bf82:	4b25      	ldr	r3, [pc, #148]	; (1c018 <MQTTSerialize_connectLength+0xc4>)
   1bf84:	4798      	blx	r3
   1bf86:	0003      	movs	r3, r0
   1bf88:	3302      	adds	r3, #2
   1bf8a:	68fa      	ldr	r2, [r7, #12]
   1bf8c:	18d3      	adds	r3, r2, r3
   1bf8e:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   1bf90:	687b      	ldr	r3, [r7, #4]
   1bf92:	7edb      	ldrb	r3, [r3, #27]
   1bf94:	2b00      	cmp	r3, #0
   1bf96:	d013      	beq.n	1bfc0 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   1bf98:	687b      	ldr	r3, [r7, #4]
   1bf9a:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1bf9c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1bf9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bfa0:	4b1d      	ldr	r3, [pc, #116]	; (1c018 <MQTTSerialize_connectLength+0xc4>)
   1bfa2:	4798      	blx	r3
   1bfa4:	0003      	movs	r3, r0
   1bfa6:	1c9c      	adds	r4, r3, #2
   1bfa8:	687b      	ldr	r3, [r7, #4]
   1bfaa:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1bfac:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1bfae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1bfb0:	4b19      	ldr	r3, [pc, #100]	; (1c018 <MQTTSerialize_connectLength+0xc4>)
   1bfb2:	4798      	blx	r3
   1bfb4:	0003      	movs	r3, r0
   1bfb6:	18e3      	adds	r3, r4, r3
   1bfb8:	3302      	adds	r3, #2
   1bfba:	68fa      	ldr	r2, [r7, #12]
   1bfbc:	18d3      	adds	r3, r2, r3
   1bfbe:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   1bfc0:	687b      	ldr	r3, [r7, #4]
   1bfc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bfc4:	2b00      	cmp	r3, #0
   1bfc6:	d103      	bne.n	1bfd0 <MQTTSerialize_connectLength+0x7c>
   1bfc8:	687b      	ldr	r3, [r7, #4]
   1bfca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bfcc:	2b00      	cmp	r3, #0
   1bfce:	d00a      	beq.n	1bfe6 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   1bfd0:	687b      	ldr	r3, [r7, #4]
   1bfd2:	6c18      	ldr	r0, [r3, #64]	; 0x40
   1bfd4:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1bfd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1bfd8:	4b0f      	ldr	r3, [pc, #60]	; (1c018 <MQTTSerialize_connectLength+0xc4>)
   1bfda:	4798      	blx	r3
   1bfdc:	0003      	movs	r3, r0
   1bfde:	3302      	adds	r3, #2
   1bfe0:	68fa      	ldr	r2, [r7, #12]
   1bfe2:	18d3      	adds	r3, r2, r3
   1bfe4:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   1bfe6:	687b      	ldr	r3, [r7, #4]
   1bfe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1bfea:	2b00      	cmp	r3, #0
   1bfec:	d103      	bne.n	1bff6 <MQTTSerialize_connectLength+0xa2>
   1bfee:	687b      	ldr	r3, [r7, #4]
   1bff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1bff2:	2b00      	cmp	r3, #0
   1bff4:	d00a      	beq.n	1c00c <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   1bff6:	687b      	ldr	r3, [r7, #4]
   1bff8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   1bffa:	6d19      	ldr	r1, [r3, #80]	; 0x50
   1bffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1bffe:	4b06      	ldr	r3, [pc, #24]	; (1c018 <MQTTSerialize_connectLength+0xc4>)
   1c000:	4798      	blx	r3
   1c002:	0003      	movs	r3, r0
   1c004:	3302      	adds	r3, #2
   1c006:	68fa      	ldr	r2, [r7, #12]
   1c008:	18d3      	adds	r3, r2, r3
   1c00a:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   1c00c:	68fb      	ldr	r3, [r7, #12]
}
   1c00e:	0018      	movs	r0, r3
   1c010:	46bd      	mov	sp, r7
   1c012:	b005      	add	sp, #20
   1c014:	bd90      	pop	{r4, r7, pc}
   1c016:	46c0      	nop			; (mov r8, r8)
   1c018:	0001c9c5 	.word	0x0001c9c5

0001c01c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   1c01c:	b590      	push	{r4, r7, lr}
   1c01e:	b08b      	sub	sp, #44	; 0x2c
   1c020:	af00      	add	r7, sp, #0
   1c022:	60f8      	str	r0, [r7, #12]
   1c024:	60b9      	str	r1, [r7, #8]
   1c026:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   1c028:	68fb      	ldr	r3, [r7, #12]
   1c02a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   1c02c:	2300      	movs	r3, #0
   1c02e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   1c030:	2300      	movs	r3, #0
   1c032:	617b      	str	r3, [r7, #20]
	int len = 0;
   1c034:	2300      	movs	r3, #0
   1c036:	623b      	str	r3, [r7, #32]
	int rc = -1;
   1c038:	2301      	movs	r3, #1
   1c03a:	425b      	negs	r3, r3
   1c03c:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   1c03e:	687b      	ldr	r3, [r7, #4]
   1c040:	0018      	movs	r0, r3
   1c042:	4b8c      	ldr	r3, [pc, #560]	; (1c274 <MQTTSerialize_connect+0x258>)
   1c044:	4798      	blx	r3
   1c046:	0003      	movs	r3, r0
   1c048:	623b      	str	r3, [r7, #32]
   1c04a:	6a3b      	ldr	r3, [r7, #32]
   1c04c:	0018      	movs	r0, r3
   1c04e:	4b8a      	ldr	r3, [pc, #552]	; (1c278 <MQTTSerialize_connect+0x25c>)
   1c050:	4798      	blx	r3
   1c052:	0002      	movs	r2, r0
   1c054:	68bb      	ldr	r3, [r7, #8]
   1c056:	429a      	cmp	r2, r3
   1c058:	dd03      	ble.n	1c062 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1c05a:	2302      	movs	r3, #2
   1c05c:	425b      	negs	r3, r3
   1c05e:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   1c060:	e103      	b.n	1c26a <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   1c062:	2318      	movs	r3, #24
   1c064:	18fb      	adds	r3, r7, r3
   1c066:	2200      	movs	r2, #0
   1c068:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   1c06a:	2318      	movs	r3, #24
   1c06c:	18fb      	adds	r3, r7, r3
   1c06e:	781a      	ldrb	r2, [r3, #0]
   1c070:	210f      	movs	r1, #15
   1c072:	400a      	ands	r2, r1
   1c074:	1c11      	adds	r1, r2, #0
   1c076:	2210      	movs	r2, #16
   1c078:	430a      	orrs	r2, r1
   1c07a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1c07c:	2318      	movs	r3, #24
   1c07e:	18fb      	adds	r3, r7, r3
   1c080:	781a      	ldrb	r2, [r3, #0]
   1c082:	231c      	movs	r3, #28
   1c084:	18fb      	adds	r3, r7, r3
   1c086:	0011      	movs	r1, r2
   1c088:	0018      	movs	r0, r3
   1c08a:	4b7c      	ldr	r3, [pc, #496]	; (1c27c <MQTTSerialize_connect+0x260>)
   1c08c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   1c08e:	69fb      	ldr	r3, [r7, #28]
   1c090:	6a3a      	ldr	r2, [r7, #32]
   1c092:	0011      	movs	r1, r2
   1c094:	0018      	movs	r0, r3
   1c096:	4b7a      	ldr	r3, [pc, #488]	; (1c280 <MQTTSerialize_connect+0x264>)
   1c098:	4798      	blx	r3
   1c09a:	0002      	movs	r2, r0
   1c09c:	69fb      	ldr	r3, [r7, #28]
   1c09e:	189b      	adds	r3, r3, r2
   1c0a0:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   1c0a2:	687b      	ldr	r3, [r7, #4]
   1c0a4:	7a1b      	ldrb	r3, [r3, #8]
   1c0a6:	2b04      	cmp	r3, #4
   1c0a8:	d10d      	bne.n	1c0c6 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   1c0aa:	4a76      	ldr	r2, [pc, #472]	; (1c284 <MQTTSerialize_connect+0x268>)
   1c0ac:	231c      	movs	r3, #28
   1c0ae:	18fb      	adds	r3, r7, r3
   1c0b0:	0011      	movs	r1, r2
   1c0b2:	0018      	movs	r0, r3
   1c0b4:	4b74      	ldr	r3, [pc, #464]	; (1c288 <MQTTSerialize_connect+0x26c>)
   1c0b6:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   1c0b8:	231c      	movs	r3, #28
   1c0ba:	18fb      	adds	r3, r7, r3
   1c0bc:	2104      	movs	r1, #4
   1c0be:	0018      	movs	r0, r3
   1c0c0:	4b6e      	ldr	r3, [pc, #440]	; (1c27c <MQTTSerialize_connect+0x260>)
   1c0c2:	4798      	blx	r3
   1c0c4:	e00c      	b.n	1c0e0 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   1c0c6:	4a71      	ldr	r2, [pc, #452]	; (1c28c <MQTTSerialize_connect+0x270>)
   1c0c8:	231c      	movs	r3, #28
   1c0ca:	18fb      	adds	r3, r7, r3
   1c0cc:	0011      	movs	r1, r2
   1c0ce:	0018      	movs	r0, r3
   1c0d0:	4b6d      	ldr	r3, [pc, #436]	; (1c288 <MQTTSerialize_connect+0x26c>)
   1c0d2:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   1c0d4:	231c      	movs	r3, #28
   1c0d6:	18fb      	adds	r3, r7, r3
   1c0d8:	2103      	movs	r1, #3
   1c0da:	0018      	movs	r0, r3
   1c0dc:	4b67      	ldr	r3, [pc, #412]	; (1c27c <MQTTSerialize_connect+0x260>)
   1c0de:	4798      	blx	r3
	}

	flags.all = 0;
   1c0e0:	2314      	movs	r3, #20
   1c0e2:	18fb      	adds	r3, r7, r3
   1c0e4:	2200      	movs	r2, #0
   1c0e6:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   1c0e8:	687b      	ldr	r3, [r7, #4]
   1c0ea:	7e9b      	ldrb	r3, [r3, #26]
   1c0ec:	1c1a      	adds	r2, r3, #0
   1c0ee:	2301      	movs	r3, #1
   1c0f0:	4013      	ands	r3, r2
   1c0f2:	b2da      	uxtb	r2, r3
   1c0f4:	2314      	movs	r3, #20
   1c0f6:	18fb      	adds	r3, r7, r3
   1c0f8:	2101      	movs	r1, #1
   1c0fa:	400a      	ands	r2, r1
   1c0fc:	1890      	adds	r0, r2, r2
   1c0fe:	781a      	ldrb	r2, [r3, #0]
   1c100:	2102      	movs	r1, #2
   1c102:	438a      	bics	r2, r1
   1c104:	1c11      	adds	r1, r2, #0
   1c106:	1c02      	adds	r2, r0, #0
   1c108:	430a      	orrs	r2, r1
   1c10a:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   1c10c:	687b      	ldr	r3, [r7, #4]
   1c10e:	7edb      	ldrb	r3, [r3, #27]
   1c110:	1e5a      	subs	r2, r3, #1
   1c112:	4193      	sbcs	r3, r2
   1c114:	b2da      	uxtb	r2, r3
   1c116:	2314      	movs	r3, #20
   1c118:	18fb      	adds	r3, r7, r3
   1c11a:	2101      	movs	r1, #1
   1c11c:	400a      	ands	r2, r1
   1c11e:	0090      	lsls	r0, r2, #2
   1c120:	781a      	ldrb	r2, [r3, #0]
   1c122:	2104      	movs	r1, #4
   1c124:	438a      	bics	r2, r1
   1c126:	1c11      	adds	r1, r2, #0
   1c128:	1c02      	adds	r2, r0, #0
   1c12a:	430a      	orrs	r2, r1
   1c12c:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   1c12e:	2314      	movs	r3, #20
   1c130:	18fb      	adds	r3, r7, r3
   1c132:	781b      	ldrb	r3, [r3, #0]
   1c134:	2204      	movs	r2, #4
   1c136:	4013      	ands	r3, r2
   1c138:	b2db      	uxtb	r3, r3
   1c13a:	2b00      	cmp	r3, #0
   1c13c:	d025      	beq.n	1c18a <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   1c13e:	687b      	ldr	r3, [r7, #4]
   1c140:	223d      	movs	r2, #61	; 0x3d
   1c142:	5c9b      	ldrb	r3, [r3, r2]
   1c144:	1c1a      	adds	r2, r3, #0
   1c146:	2303      	movs	r3, #3
   1c148:	4013      	ands	r3, r2
   1c14a:	b2da      	uxtb	r2, r3
   1c14c:	2314      	movs	r3, #20
   1c14e:	18fb      	adds	r3, r7, r3
   1c150:	2103      	movs	r1, #3
   1c152:	400a      	ands	r2, r1
   1c154:	00d0      	lsls	r0, r2, #3
   1c156:	781a      	ldrb	r2, [r3, #0]
   1c158:	2118      	movs	r1, #24
   1c15a:	438a      	bics	r2, r1
   1c15c:	1c11      	adds	r1, r2, #0
   1c15e:	1c02      	adds	r2, r0, #0
   1c160:	430a      	orrs	r2, r1
   1c162:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   1c164:	687b      	ldr	r3, [r7, #4]
   1c166:	223c      	movs	r2, #60	; 0x3c
   1c168:	5c9b      	ldrb	r3, [r3, r2]
   1c16a:	1c1a      	adds	r2, r3, #0
   1c16c:	2301      	movs	r3, #1
   1c16e:	4013      	ands	r3, r2
   1c170:	b2da      	uxtb	r2, r3
   1c172:	2314      	movs	r3, #20
   1c174:	18fb      	adds	r3, r7, r3
   1c176:	2101      	movs	r1, #1
   1c178:	400a      	ands	r2, r1
   1c17a:	0150      	lsls	r0, r2, #5
   1c17c:	781a      	ldrb	r2, [r3, #0]
   1c17e:	2120      	movs	r1, #32
   1c180:	438a      	bics	r2, r1
   1c182:	1c11      	adds	r1, r2, #0
   1c184:	1c02      	adds	r2, r0, #0
   1c186:	430a      	orrs	r2, r1
   1c188:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   1c18a:	687b      	ldr	r3, [r7, #4]
   1c18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c18e:	2b00      	cmp	r3, #0
   1c190:	d103      	bne.n	1c19a <MQTTSerialize_connect+0x17e>
   1c192:	687b      	ldr	r3, [r7, #4]
   1c194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c196:	2b00      	cmp	r3, #0
   1c198:	d006      	beq.n	1c1a8 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   1c19a:	2314      	movs	r3, #20
   1c19c:	18fb      	adds	r3, r7, r3
   1c19e:	781a      	ldrb	r2, [r3, #0]
   1c1a0:	2180      	movs	r1, #128	; 0x80
   1c1a2:	4249      	negs	r1, r1
   1c1a4:	430a      	orrs	r2, r1
   1c1a6:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   1c1a8:	687b      	ldr	r3, [r7, #4]
   1c1aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c1ac:	2b00      	cmp	r3, #0
   1c1ae:	d103      	bne.n	1c1b8 <MQTTSerialize_connect+0x19c>
   1c1b0:	687b      	ldr	r3, [r7, #4]
   1c1b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1c1b4:	2b00      	cmp	r3, #0
   1c1b6:	d005      	beq.n	1c1c4 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   1c1b8:	2314      	movs	r3, #20
   1c1ba:	18fb      	adds	r3, r7, r3
   1c1bc:	781a      	ldrb	r2, [r3, #0]
   1c1be:	2140      	movs	r1, #64	; 0x40
   1c1c0:	430a      	orrs	r2, r1
   1c1c2:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   1c1c4:	2314      	movs	r3, #20
   1c1c6:	18fb      	adds	r3, r7, r3
   1c1c8:	781a      	ldrb	r2, [r3, #0]
   1c1ca:	231c      	movs	r3, #28
   1c1cc:	18fb      	adds	r3, r7, r3
   1c1ce:	0011      	movs	r1, r2
   1c1d0:	0018      	movs	r0, r3
   1c1d2:	4b2a      	ldr	r3, [pc, #168]	; (1c27c <MQTTSerialize_connect+0x260>)
   1c1d4:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   1c1d6:	687b      	ldr	r3, [r7, #4]
   1c1d8:	8b1b      	ldrh	r3, [r3, #24]
   1c1da:	001a      	movs	r2, r3
   1c1dc:	231c      	movs	r3, #28
   1c1de:	18fb      	adds	r3, r7, r3
   1c1e0:	0011      	movs	r1, r2
   1c1e2:	0018      	movs	r0, r3
   1c1e4:	4b2a      	ldr	r3, [pc, #168]	; (1c290 <MQTTSerialize_connect+0x274>)
   1c1e6:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   1c1e8:	687b      	ldr	r3, [r7, #4]
   1c1ea:	221c      	movs	r2, #28
   1c1ec:	18b8      	adds	r0, r7, r2
   1c1ee:	68d9      	ldr	r1, [r3, #12]
   1c1f0:	691a      	ldr	r2, [r3, #16]
   1c1f2:	695b      	ldr	r3, [r3, #20]
   1c1f4:	4c27      	ldr	r4, [pc, #156]	; (1c294 <MQTTSerialize_connect+0x278>)
   1c1f6:	47a0      	blx	r4
	if (options->willFlag)
   1c1f8:	687b      	ldr	r3, [r7, #4]
   1c1fa:	7edb      	ldrb	r3, [r3, #27]
   1c1fc:	2b00      	cmp	r3, #0
   1c1fe:	d00f      	beq.n	1c220 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   1c200:	687b      	ldr	r3, [r7, #4]
   1c202:	221c      	movs	r2, #28
   1c204:	18b8      	adds	r0, r7, r2
   1c206:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1c208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1c20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c20c:	4c21      	ldr	r4, [pc, #132]	; (1c294 <MQTTSerialize_connect+0x278>)
   1c20e:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   1c210:	687b      	ldr	r3, [r7, #4]
   1c212:	221c      	movs	r2, #28
   1c214:	18b8      	adds	r0, r7, r2
   1c216:	6b19      	ldr	r1, [r3, #48]	; 0x30
   1c218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1c21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c21c:	4c1d      	ldr	r4, [pc, #116]	; (1c294 <MQTTSerialize_connect+0x278>)
   1c21e:	47a0      	blx	r4
	}
	if (flags.bits.username)
   1c220:	2314      	movs	r3, #20
   1c222:	18fb      	adds	r3, r7, r3
   1c224:	781b      	ldrb	r3, [r3, #0]
   1c226:	227f      	movs	r2, #127	; 0x7f
   1c228:	4393      	bics	r3, r2
   1c22a:	b2db      	uxtb	r3, r3
   1c22c:	2b00      	cmp	r3, #0
   1c22e:	d007      	beq.n	1c240 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   1c230:	687b      	ldr	r3, [r7, #4]
   1c232:	221c      	movs	r2, #28
   1c234:	18b8      	adds	r0, r7, r2
   1c236:	6c19      	ldr	r1, [r3, #64]	; 0x40
   1c238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c23a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c23c:	4c15      	ldr	r4, [pc, #84]	; (1c294 <MQTTSerialize_connect+0x278>)
   1c23e:	47a0      	blx	r4
	if (flags.bits.password)
   1c240:	2314      	movs	r3, #20
   1c242:	18fb      	adds	r3, r7, r3
   1c244:	781b      	ldrb	r3, [r3, #0]
   1c246:	2240      	movs	r2, #64	; 0x40
   1c248:	4013      	ands	r3, r2
   1c24a:	b2db      	uxtb	r3, r3
   1c24c:	2b00      	cmp	r3, #0
   1c24e:	d007      	beq.n	1c260 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   1c250:	687b      	ldr	r3, [r7, #4]
   1c252:	221c      	movs	r2, #28
   1c254:	18b8      	adds	r0, r7, r2
   1c256:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1c258:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1c25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1c25c:	4c0d      	ldr	r4, [pc, #52]	; (1c294 <MQTTSerialize_connect+0x278>)
   1c25e:	47a0      	blx	r4

	rc = ptr - buf;
   1c260:	69fb      	ldr	r3, [r7, #28]
   1c262:	001a      	movs	r2, r3
   1c264:	68fb      	ldr	r3, [r7, #12]
   1c266:	1ad3      	subs	r3, r2, r3
   1c268:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   1c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1c26c:	0018      	movs	r0, r3
   1c26e:	46bd      	mov	sp, r7
   1c270:	b00b      	add	sp, #44	; 0x2c
   1c272:	bd90      	pop	{r4, r7, pc}
   1c274:	0001bf55 	.word	0x0001bf55
   1c278:	0001c6e9 	.word	0x0001c6e9
   1c27c:	0001c80b 	.word	0x0001c80b
   1c280:	0001c5f1 	.word	0x0001c5f1
   1c284:	00026be4 	.word	0x00026be4
   1c288:	0001c88d 	.word	0x0001c88d
   1c28c:	00026bec 	.word	0x00026bec
   1c290:	0001c835 	.word	0x0001c835
   1c294:	0001c8dd 	.word	0x0001c8dd

0001c298 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   1c298:	b580      	push	{r7, lr}
   1c29a:	b08a      	sub	sp, #40	; 0x28
   1c29c:	af00      	add	r7, sp, #0
   1c29e:	60f8      	str	r0, [r7, #12]
   1c2a0:	60b9      	str	r1, [r7, #8]
   1c2a2:	607a      	str	r2, [r7, #4]
   1c2a4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1c2a6:	2300      	movs	r3, #0
   1c2a8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1c2aa:	687b      	ldr	r3, [r7, #4]
   1c2ac:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1c2ae:	2300      	movs	r3, #0
   1c2b0:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1c2b2:	2300      	movs	r3, #0
   1c2b4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   1c2b6:	2300      	movs	r3, #0
   1c2b8:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1c2ba:	2318      	movs	r3, #24
   1c2bc:	18fb      	adds	r3, r7, r3
   1c2be:	0018      	movs	r0, r3
   1c2c0:	4b25      	ldr	r3, [pc, #148]	; (1c358 <MQTTDeserialize_connack+0xc0>)
   1c2c2:	4798      	blx	r3
   1c2c4:	0003      	movs	r3, r0
   1c2c6:	001a      	movs	r2, r3
   1c2c8:	231c      	movs	r3, #28
   1c2ca:	18fb      	adds	r3, r7, r3
   1c2cc:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   1c2ce:	231c      	movs	r3, #28
   1c2d0:	18fb      	adds	r3, r7, r3
   1c2d2:	781b      	ldrb	r3, [r3, #0]
   1c2d4:	220f      	movs	r2, #15
   1c2d6:	4393      	bics	r3, r2
   1c2d8:	b2db      	uxtb	r3, r3
   1c2da:	2b20      	cmp	r3, #32
   1c2dc:	d134      	bne.n	1c348 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1c2de:	69bb      	ldr	r3, [r7, #24]
   1c2e0:	2214      	movs	r2, #20
   1c2e2:	18ba      	adds	r2, r7, r2
   1c2e4:	0011      	movs	r1, r2
   1c2e6:	0018      	movs	r0, r3
   1c2e8:	4b1c      	ldr	r3, [pc, #112]	; (1c35c <MQTTDeserialize_connack+0xc4>)
   1c2ea:	4798      	blx	r3
   1c2ec:	0003      	movs	r3, r0
   1c2ee:	627b      	str	r3, [r7, #36]	; 0x24
   1c2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c2f2:	69bb      	ldr	r3, [r7, #24]
   1c2f4:	189b      	adds	r3, r3, r2
   1c2f6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1c2f8:	69bb      	ldr	r3, [r7, #24]
   1c2fa:	697a      	ldr	r2, [r7, #20]
   1c2fc:	189b      	adds	r3, r3, r2
   1c2fe:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   1c300:	6a3b      	ldr	r3, [r7, #32]
   1c302:	69ba      	ldr	r2, [r7, #24]
   1c304:	1a9b      	subs	r3, r3, r2
   1c306:	2b01      	cmp	r3, #1
   1c308:	dd20      	ble.n	1c34c <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   1c30a:	2318      	movs	r3, #24
   1c30c:	18fb      	adds	r3, r7, r3
   1c30e:	0018      	movs	r0, r3
   1c310:	4b11      	ldr	r3, [pc, #68]	; (1c358 <MQTTDeserialize_connack+0xc0>)
   1c312:	4798      	blx	r3
   1c314:	0003      	movs	r3, r0
   1c316:	001a      	movs	r2, r3
   1c318:	2310      	movs	r3, #16
   1c31a:	18fb      	adds	r3, r7, r3
   1c31c:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   1c31e:	2310      	movs	r3, #16
   1c320:	18fb      	adds	r3, r7, r3
   1c322:	781b      	ldrb	r3, [r3, #0]
   1c324:	061b      	lsls	r3, r3, #24
   1c326:	0fdb      	lsrs	r3, r3, #31
   1c328:	b2db      	uxtb	r3, r3
   1c32a:	001a      	movs	r2, r3
   1c32c:	68fb      	ldr	r3, [r7, #12]
   1c32e:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   1c330:	2318      	movs	r3, #24
   1c332:	18fb      	adds	r3, r7, r3
   1c334:	0018      	movs	r0, r3
   1c336:	4b08      	ldr	r3, [pc, #32]	; (1c358 <MQTTDeserialize_connack+0xc0>)
   1c338:	4798      	blx	r3
   1c33a:	0003      	movs	r3, r0
   1c33c:	001a      	movs	r2, r3
   1c33e:	68bb      	ldr	r3, [r7, #8]
   1c340:	701a      	strb	r2, [r3, #0]

	rc = 1;
   1c342:	2301      	movs	r3, #1
   1c344:	627b      	str	r3, [r7, #36]	; 0x24
   1c346:	e002      	b.n	1c34e <MQTTDeserialize_connack+0xb6>
		goto exit;
   1c348:	46c0      	nop			; (mov r8, r8)
   1c34a:	e000      	b.n	1c34e <MQTTDeserialize_connack+0xb6>
		goto exit;
   1c34c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1c34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1c350:	0018      	movs	r0, r3
   1c352:	46bd      	mov	sp, r7
   1c354:	b00a      	add	sp, #40	; 0x28
   1c356:	bd80      	pop	{r7, pc}
   1c358:	0001c7df 	.word	0x0001c7df
   1c35c:	0001c779 	.word	0x0001c779

0001c360 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   1c360:	b580      	push	{r7, lr}
   1c362:	b088      	sub	sp, #32
   1c364:	af00      	add	r7, sp, #0
   1c366:	60f8      	str	r0, [r7, #12]
   1c368:	60b9      	str	r1, [r7, #8]
   1c36a:	1dfb      	adds	r3, r7, #7
   1c36c:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   1c36e:	2300      	movs	r3, #0
   1c370:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   1c372:	2301      	movs	r3, #1
   1c374:	425b      	negs	r3, r3
   1c376:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   1c378:	68fb      	ldr	r3, [r7, #12]
   1c37a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   1c37c:	68bb      	ldr	r3, [r7, #8]
   1c37e:	2b01      	cmp	r3, #1
   1c380:	dc03      	bgt.n	1c38a <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1c382:	2302      	movs	r3, #2
   1c384:	425b      	negs	r3, r3
   1c386:	61fb      	str	r3, [r7, #28]
		goto exit;
   1c388:	e029      	b.n	1c3de <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   1c38a:	2318      	movs	r3, #24
   1c38c:	18fb      	adds	r3, r7, r3
   1c38e:	2200      	movs	r2, #0
   1c390:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   1c392:	1dfb      	adds	r3, r7, #7
   1c394:	781b      	ldrb	r3, [r3, #0]
   1c396:	220f      	movs	r2, #15
   1c398:	4013      	ands	r3, r2
   1c39a:	b2da      	uxtb	r2, r3
   1c39c:	2318      	movs	r3, #24
   1c39e:	18fb      	adds	r3, r7, r3
   1c3a0:	0110      	lsls	r0, r2, #4
   1c3a2:	781a      	ldrb	r2, [r3, #0]
   1c3a4:	210f      	movs	r1, #15
   1c3a6:	400a      	ands	r2, r1
   1c3a8:	1c11      	adds	r1, r2, #0
   1c3aa:	1c02      	adds	r2, r0, #0
   1c3ac:	430a      	orrs	r2, r1
   1c3ae:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1c3b0:	2318      	movs	r3, #24
   1c3b2:	18fb      	adds	r3, r7, r3
   1c3b4:	781a      	ldrb	r2, [r3, #0]
   1c3b6:	2314      	movs	r3, #20
   1c3b8:	18fb      	adds	r3, r7, r3
   1c3ba:	0011      	movs	r1, r2
   1c3bc:	0018      	movs	r0, r3
   1c3be:	4b0a      	ldr	r3, [pc, #40]	; (1c3e8 <MQTTSerialize_zero+0x88>)
   1c3c0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   1c3c2:	697b      	ldr	r3, [r7, #20]
   1c3c4:	2100      	movs	r1, #0
   1c3c6:	0018      	movs	r0, r3
   1c3c8:	4b08      	ldr	r3, [pc, #32]	; (1c3ec <MQTTSerialize_zero+0x8c>)
   1c3ca:	4798      	blx	r3
   1c3cc:	0002      	movs	r2, r0
   1c3ce:	697b      	ldr	r3, [r7, #20]
   1c3d0:	189b      	adds	r3, r3, r2
   1c3d2:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   1c3d4:	697b      	ldr	r3, [r7, #20]
   1c3d6:	001a      	movs	r2, r3
   1c3d8:	68fb      	ldr	r3, [r7, #12]
   1c3da:	1ad3      	subs	r3, r2, r3
   1c3dc:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1c3de:	69fb      	ldr	r3, [r7, #28]
}
   1c3e0:	0018      	movs	r0, r3
   1c3e2:	46bd      	mov	sp, r7
   1c3e4:	b008      	add	sp, #32
   1c3e6:	bd80      	pop	{r7, pc}
   1c3e8:	0001c80b 	.word	0x0001c80b
   1c3ec:	0001c5f1 	.word	0x0001c5f1

0001c3f0 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   1c3f0:	b580      	push	{r7, lr}
   1c3f2:	b082      	sub	sp, #8
   1c3f4:	af00      	add	r7, sp, #0
   1c3f6:	6078      	str	r0, [r7, #4]
   1c3f8:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   1c3fa:	6839      	ldr	r1, [r7, #0]
   1c3fc:	687b      	ldr	r3, [r7, #4]
   1c3fe:	220e      	movs	r2, #14
   1c400:	0018      	movs	r0, r3
   1c402:	4b03      	ldr	r3, [pc, #12]	; (1c410 <MQTTSerialize_disconnect+0x20>)
   1c404:	4798      	blx	r3
   1c406:	0003      	movs	r3, r0
}
   1c408:	0018      	movs	r0, r3
   1c40a:	46bd      	mov	sp, r7
   1c40c:	b002      	add	sp, #8
   1c40e:	bd80      	pop	{r7, pc}
   1c410:	0001c361 	.word	0x0001c361

0001c414 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   1c414:	b580      	push	{r7, lr}
   1c416:	b082      	sub	sp, #8
   1c418:	af00      	add	r7, sp, #0
   1c41a:	6078      	str	r0, [r7, #4]
   1c41c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   1c41e:	6839      	ldr	r1, [r7, #0]
   1c420:	687b      	ldr	r3, [r7, #4]
   1c422:	220c      	movs	r2, #12
   1c424:	0018      	movs	r0, r3
   1c426:	4b03      	ldr	r3, [pc, #12]	; (1c434 <MQTTSerialize_pingreq+0x20>)
   1c428:	4798      	blx	r3
   1c42a:	0003      	movs	r3, r0
}
   1c42c:	0018      	movs	r0, r3
   1c42e:	46bd      	mov	sp, r7
   1c430:	b002      	add	sp, #8
   1c432:	bd80      	pop	{r7, pc}
   1c434:	0001c361 	.word	0x0001c361

0001c438 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   1c438:	b580      	push	{r7, lr}
   1c43a:	b08a      	sub	sp, #40	; 0x28
   1c43c:	af00      	add	r7, sp, #0
   1c43e:	60f8      	str	r0, [r7, #12]
   1c440:	60b9      	str	r1, [r7, #8]
   1c442:	607a      	str	r2, [r7, #4]
   1c444:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1c446:	2300      	movs	r3, #0
   1c448:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1c44a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c44c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1c44e:	2300      	movs	r3, #0
   1c450:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1c452:	2300      	movs	r3, #0
   1c454:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   1c456:	2300      	movs	r3, #0
   1c458:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1c45a:	2318      	movs	r3, #24
   1c45c:	18fb      	adds	r3, r7, r3
   1c45e:	0018      	movs	r0, r3
   1c460:	4b32      	ldr	r3, [pc, #200]	; (1c52c <MQTTDeserialize_publish+0xf4>)
   1c462:	4798      	blx	r3
   1c464:	0003      	movs	r3, r0
   1c466:	001a      	movs	r2, r3
   1c468:	231c      	movs	r3, #28
   1c46a:	18fb      	adds	r3, r7, r3
   1c46c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   1c46e:	231c      	movs	r3, #28
   1c470:	18fb      	adds	r3, r7, r3
   1c472:	781b      	ldrb	r3, [r3, #0]
   1c474:	220f      	movs	r2, #15
   1c476:	4393      	bics	r3, r2
   1c478:	b2db      	uxtb	r3, r3
   1c47a:	2b30      	cmp	r3, #48	; 0x30
   1c47c:	d150      	bne.n	1c520 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   1c47e:	231c      	movs	r3, #28
   1c480:	18fb      	adds	r3, r7, r3
   1c482:	781b      	ldrb	r3, [r3, #0]
   1c484:	071b      	lsls	r3, r3, #28
   1c486:	0fdb      	lsrs	r3, r3, #31
   1c488:	b2db      	uxtb	r3, r3
   1c48a:	001a      	movs	r2, r3
   1c48c:	68fb      	ldr	r3, [r7, #12]
   1c48e:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   1c490:	231c      	movs	r3, #28
   1c492:	18fb      	adds	r3, r7, r3
   1c494:	781b      	ldrb	r3, [r3, #0]
   1c496:	075b      	lsls	r3, r3, #29
   1c498:	0f9b      	lsrs	r3, r3, #30
   1c49a:	b2db      	uxtb	r3, r3
   1c49c:	001a      	movs	r2, r3
   1c49e:	68bb      	ldr	r3, [r7, #8]
   1c4a0:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   1c4a2:	231c      	movs	r3, #28
   1c4a4:	18fb      	adds	r3, r7, r3
   1c4a6:	781b      	ldrb	r3, [r3, #0]
   1c4a8:	07db      	lsls	r3, r3, #31
   1c4aa:	0fdb      	lsrs	r3, r3, #31
   1c4ac:	b2db      	uxtb	r3, r3
   1c4ae:	001a      	movs	r2, r3
   1c4b0:	687b      	ldr	r3, [r7, #4]
   1c4b2:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1c4b4:	69bb      	ldr	r3, [r7, #24]
   1c4b6:	2214      	movs	r2, #20
   1c4b8:	18ba      	adds	r2, r7, r2
   1c4ba:	0011      	movs	r1, r2
   1c4bc:	0018      	movs	r0, r3
   1c4be:	4b1c      	ldr	r3, [pc, #112]	; (1c530 <MQTTDeserialize_publish+0xf8>)
   1c4c0:	4798      	blx	r3
   1c4c2:	0003      	movs	r3, r0
   1c4c4:	627b      	str	r3, [r7, #36]	; 0x24
   1c4c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c4c8:	69bb      	ldr	r3, [r7, #24]
   1c4ca:	189b      	adds	r3, r3, r2
   1c4cc:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1c4ce:	69bb      	ldr	r3, [r7, #24]
   1c4d0:	697a      	ldr	r2, [r7, #20]
   1c4d2:	189b      	adds	r3, r3, r2
   1c4d4:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   1c4d6:	6a3a      	ldr	r2, [r7, #32]
   1c4d8:	2318      	movs	r3, #24
   1c4da:	18f9      	adds	r1, r7, r3
   1c4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c4de:	0018      	movs	r0, r3
   1c4e0:	4b14      	ldr	r3, [pc, #80]	; (1c534 <MQTTDeserialize_publish+0xfc>)
   1c4e2:	4798      	blx	r3
   1c4e4:	1e03      	subs	r3, r0, #0
   1c4e6:	d01c      	beq.n	1c522 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   1c4e8:	6a3b      	ldr	r3, [r7, #32]
   1c4ea:	69ba      	ldr	r2, [r7, #24]
   1c4ec:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   1c4ee:	d418      	bmi.n	1c522 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   1c4f0:	68bb      	ldr	r3, [r7, #8]
   1c4f2:	681b      	ldr	r3, [r3, #0]
   1c4f4:	2b00      	cmp	r3, #0
   1c4f6:	dd08      	ble.n	1c50a <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   1c4f8:	2318      	movs	r3, #24
   1c4fa:	18fb      	adds	r3, r7, r3
   1c4fc:	0018      	movs	r0, r3
   1c4fe:	4b0e      	ldr	r3, [pc, #56]	; (1c538 <MQTTDeserialize_publish+0x100>)
   1c500:	4798      	blx	r3
   1c502:	0003      	movs	r3, r0
   1c504:	b29a      	uxth	r2, r3
   1c506:	683b      	ldr	r3, [r7, #0]
   1c508:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   1c50a:	6a3b      	ldr	r3, [r7, #32]
   1c50c:	69ba      	ldr	r2, [r7, #24]
   1c50e:	1a9a      	subs	r2, r3, r2
   1c510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c512:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   1c514:	69ba      	ldr	r2, [r7, #24]
   1c516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c518:	601a      	str	r2, [r3, #0]
	rc = 1;
   1c51a:	2301      	movs	r3, #1
   1c51c:	627b      	str	r3, [r7, #36]	; 0x24
   1c51e:	e000      	b.n	1c522 <MQTTDeserialize_publish+0xea>
		goto exit;
   1c520:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1c522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1c524:	0018      	movs	r0, r3
   1c526:	46bd      	mov	sp, r7
   1c528:	b00a      	add	sp, #40	; 0x28
   1c52a:	bd80      	pop	{r7, pc}
   1c52c:	0001c7df 	.word	0x0001c7df
   1c530:	0001c779 	.word	0x0001c779
   1c534:	0001c95d 	.word	0x0001c95d
   1c538:	0001c7ad 	.word	0x0001c7ad

0001c53c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   1c53c:	b580      	push	{r7, lr}
   1c53e:	b08a      	sub	sp, #40	; 0x28
   1c540:	af00      	add	r7, sp, #0
   1c542:	60f8      	str	r0, [r7, #12]
   1c544:	60b9      	str	r1, [r7, #8]
   1c546:	607a      	str	r2, [r7, #4]
   1c548:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1c54a:	2300      	movs	r3, #0
   1c54c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1c54e:	683b      	ldr	r3, [r7, #0]
   1c550:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1c552:	2300      	movs	r3, #0
   1c554:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1c556:	2300      	movs	r3, #0
   1c558:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1c55a:	2318      	movs	r3, #24
   1c55c:	18fb      	adds	r3, r7, r3
   1c55e:	0018      	movs	r0, r3
   1c560:	4b20      	ldr	r3, [pc, #128]	; (1c5e4 <MQTTDeserialize_ack+0xa8>)
   1c562:	4798      	blx	r3
   1c564:	0003      	movs	r3, r0
   1c566:	001a      	movs	r2, r3
   1c568:	231c      	movs	r3, #28
   1c56a:	18fb      	adds	r3, r7, r3
   1c56c:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   1c56e:	231c      	movs	r3, #28
   1c570:	18fb      	adds	r3, r7, r3
   1c572:	781b      	ldrb	r3, [r3, #0]
   1c574:	071b      	lsls	r3, r3, #28
   1c576:	0fdb      	lsrs	r3, r3, #31
   1c578:	b2db      	uxtb	r3, r3
   1c57a:	001a      	movs	r2, r3
   1c57c:	68bb      	ldr	r3, [r7, #8]
   1c57e:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   1c580:	231c      	movs	r3, #28
   1c582:	18fb      	adds	r3, r7, r3
   1c584:	781b      	ldrb	r3, [r3, #0]
   1c586:	061b      	lsls	r3, r3, #24
   1c588:	0f1b      	lsrs	r3, r3, #28
   1c58a:	b2db      	uxtb	r3, r3
   1c58c:	001a      	movs	r2, r3
   1c58e:	68fb      	ldr	r3, [r7, #12]
   1c590:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1c592:	69bb      	ldr	r3, [r7, #24]
   1c594:	2214      	movs	r2, #20
   1c596:	18ba      	adds	r2, r7, r2
   1c598:	0011      	movs	r1, r2
   1c59a:	0018      	movs	r0, r3
   1c59c:	4b12      	ldr	r3, [pc, #72]	; (1c5e8 <MQTTDeserialize_ack+0xac>)
   1c59e:	4798      	blx	r3
   1c5a0:	0003      	movs	r3, r0
   1c5a2:	627b      	str	r3, [r7, #36]	; 0x24
   1c5a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c5a6:	69bb      	ldr	r3, [r7, #24]
   1c5a8:	189b      	adds	r3, r3, r2
   1c5aa:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1c5ac:	69bb      	ldr	r3, [r7, #24]
   1c5ae:	697a      	ldr	r2, [r7, #20]
   1c5b0:	189b      	adds	r3, r3, r2
   1c5b2:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   1c5b4:	6a3b      	ldr	r3, [r7, #32]
   1c5b6:	69ba      	ldr	r2, [r7, #24]
   1c5b8:	1a9b      	subs	r3, r3, r2
   1c5ba:	2b01      	cmp	r3, #1
   1c5bc:	dd0b      	ble.n	1c5d6 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   1c5be:	2318      	movs	r3, #24
   1c5c0:	18fb      	adds	r3, r7, r3
   1c5c2:	0018      	movs	r0, r3
   1c5c4:	4b09      	ldr	r3, [pc, #36]	; (1c5ec <MQTTDeserialize_ack+0xb0>)
   1c5c6:	4798      	blx	r3
   1c5c8:	0003      	movs	r3, r0
   1c5ca:	b29a      	uxth	r2, r3
   1c5cc:	687b      	ldr	r3, [r7, #4]
   1c5ce:	801a      	strh	r2, [r3, #0]

	rc = 1;
   1c5d0:	2301      	movs	r3, #1
   1c5d2:	627b      	str	r3, [r7, #36]	; 0x24
   1c5d4:	e000      	b.n	1c5d8 <MQTTDeserialize_ack+0x9c>
		goto exit;
   1c5d6:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1c5da:	0018      	movs	r0, r3
   1c5dc:	46bd      	mov	sp, r7
   1c5de:	b00a      	add	sp, #40	; 0x28
   1c5e0:	bd80      	pop	{r7, pc}
   1c5e2:	46c0      	nop			; (mov r8, r8)
   1c5e4:	0001c7df 	.word	0x0001c7df
   1c5e8:	0001c779 	.word	0x0001c779
   1c5ec:	0001c7ad 	.word	0x0001c7ad

0001c5f0 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   1c5f0:	b580      	push	{r7, lr}
   1c5f2:	b084      	sub	sp, #16
   1c5f4:	af00      	add	r7, sp, #0
   1c5f6:	6078      	str	r0, [r7, #4]
   1c5f8:	6039      	str	r1, [r7, #0]
	int rc = 0;
   1c5fa:	2300      	movs	r3, #0
   1c5fc:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   1c5fe:	683b      	ldr	r3, [r7, #0]
   1c600:	4a17      	ldr	r2, [pc, #92]	; (1c660 <MQTTPacket_encode+0x70>)
   1c602:	4013      	ands	r3, r2
   1c604:	d504      	bpl.n	1c610 <MQTTPacket_encode+0x20>
   1c606:	3b01      	subs	r3, #1
   1c608:	2280      	movs	r2, #128	; 0x80
   1c60a:	4252      	negs	r2, r2
   1c60c:	4313      	orrs	r3, r2
   1c60e:	3301      	adds	r3, #1
   1c610:	001a      	movs	r2, r3
   1c612:	230b      	movs	r3, #11
   1c614:	18fb      	adds	r3, r7, r3
   1c616:	701a      	strb	r2, [r3, #0]
		length /= 128;
   1c618:	683b      	ldr	r3, [r7, #0]
   1c61a:	2b00      	cmp	r3, #0
   1c61c:	da00      	bge.n	1c620 <MQTTPacket_encode+0x30>
   1c61e:	337f      	adds	r3, #127	; 0x7f
   1c620:	11db      	asrs	r3, r3, #7
   1c622:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   1c624:	683b      	ldr	r3, [r7, #0]
   1c626:	2b00      	cmp	r3, #0
   1c628:	dd08      	ble.n	1c63c <MQTTPacket_encode+0x4c>
			d |= 0x80;
   1c62a:	230b      	movs	r3, #11
   1c62c:	18fb      	adds	r3, r7, r3
   1c62e:	220b      	movs	r2, #11
   1c630:	18ba      	adds	r2, r7, r2
   1c632:	7812      	ldrb	r2, [r2, #0]
   1c634:	2180      	movs	r1, #128	; 0x80
   1c636:	4249      	negs	r1, r1
   1c638:	430a      	orrs	r2, r1
   1c63a:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   1c63c:	68fb      	ldr	r3, [r7, #12]
   1c63e:	1c5a      	adds	r2, r3, #1
   1c640:	60fa      	str	r2, [r7, #12]
   1c642:	001a      	movs	r2, r3
   1c644:	687b      	ldr	r3, [r7, #4]
   1c646:	189b      	adds	r3, r3, r2
   1c648:	220b      	movs	r2, #11
   1c64a:	18ba      	adds	r2, r7, r2
   1c64c:	7812      	ldrb	r2, [r2, #0]
   1c64e:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   1c650:	683b      	ldr	r3, [r7, #0]
   1c652:	2b00      	cmp	r3, #0
   1c654:	dcd3      	bgt.n	1c5fe <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   1c656:	68fb      	ldr	r3, [r7, #12]
}
   1c658:	0018      	movs	r0, r3
   1c65a:	46bd      	mov	sp, r7
   1c65c:	b004      	add	sp, #16
   1c65e:	bd80      	pop	{r7, pc}
   1c660:	8000007f 	.word	0x8000007f

0001c664 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   1c664:	b580      	push	{r7, lr}
   1c666:	b086      	sub	sp, #24
   1c668:	af00      	add	r7, sp, #0
   1c66a:	6078      	str	r0, [r7, #4]
   1c66c:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   1c66e:	2301      	movs	r3, #1
   1c670:	617b      	str	r3, [r7, #20]
	int len = 0;
   1c672:	2300      	movs	r3, #0
   1c674:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   1c676:	683b      	ldr	r3, [r7, #0]
   1c678:	2200      	movs	r2, #0
   1c67a:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   1c67c:	2301      	movs	r3, #1
   1c67e:	425b      	negs	r3, r3
   1c680:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1c682:	693b      	ldr	r3, [r7, #16]
   1c684:	3301      	adds	r3, #1
   1c686:	613b      	str	r3, [r7, #16]
   1c688:	693b      	ldr	r3, [r7, #16]
   1c68a:	2b04      	cmp	r3, #4
   1c68c:	dd03      	ble.n	1c696 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   1c68e:	2301      	movs	r3, #1
   1c690:	425b      	negs	r3, r3
   1c692:	60fb      	str	r3, [r7, #12]
			goto exit;
   1c694:	e022      	b.n	1c6dc <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   1c696:	230b      	movs	r3, #11
   1c698:	18fa      	adds	r2, r7, r3
   1c69a:	687b      	ldr	r3, [r7, #4]
   1c69c:	2101      	movs	r1, #1
   1c69e:	0010      	movs	r0, r2
   1c6a0:	4798      	blx	r3
   1c6a2:	0003      	movs	r3, r0
   1c6a4:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   1c6a6:	68fb      	ldr	r3, [r7, #12]
   1c6a8:	2b01      	cmp	r3, #1
   1c6aa:	d116      	bne.n	1c6da <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   1c6ac:	683b      	ldr	r3, [r7, #0]
   1c6ae:	681a      	ldr	r2, [r3, #0]
   1c6b0:	230b      	movs	r3, #11
   1c6b2:	18fb      	adds	r3, r7, r3
   1c6b4:	781b      	ldrb	r3, [r3, #0]
   1c6b6:	0019      	movs	r1, r3
   1c6b8:	237f      	movs	r3, #127	; 0x7f
   1c6ba:	400b      	ands	r3, r1
   1c6bc:	6979      	ldr	r1, [r7, #20]
   1c6be:	434b      	muls	r3, r1
   1c6c0:	18d2      	adds	r2, r2, r3
   1c6c2:	683b      	ldr	r3, [r7, #0]
   1c6c4:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   1c6c6:	697b      	ldr	r3, [r7, #20]
   1c6c8:	01db      	lsls	r3, r3, #7
   1c6ca:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   1c6cc:	230b      	movs	r3, #11
   1c6ce:	18fb      	adds	r3, r7, r3
   1c6d0:	781b      	ldrb	r3, [r3, #0]
   1c6d2:	b25b      	sxtb	r3, r3
   1c6d4:	2b00      	cmp	r3, #0
   1c6d6:	dbd1      	blt.n	1c67c <MQTTPacket_decode+0x18>
   1c6d8:	e000      	b.n	1c6dc <MQTTPacket_decode+0x78>
			goto exit;
   1c6da:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   1c6dc:	693b      	ldr	r3, [r7, #16]
}
   1c6de:	0018      	movs	r0, r3
   1c6e0:	46bd      	mov	sp, r7
   1c6e2:	b006      	add	sp, #24
   1c6e4:	bd80      	pop	{r7, pc}
	...

0001c6e8 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   1c6e8:	b580      	push	{r7, lr}
   1c6ea:	b082      	sub	sp, #8
   1c6ec:	af00      	add	r7, sp, #0
   1c6ee:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   1c6f0:	687b      	ldr	r3, [r7, #4]
   1c6f2:	3301      	adds	r3, #1
   1c6f4:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   1c6f6:	687b      	ldr	r3, [r7, #4]
   1c6f8:	2b7f      	cmp	r3, #127	; 0x7f
   1c6fa:	dc03      	bgt.n	1c704 <MQTTPacket_len+0x1c>
		rem_len += 1;
   1c6fc:	687b      	ldr	r3, [r7, #4]
   1c6fe:	3301      	adds	r3, #1
   1c700:	607b      	str	r3, [r7, #4]
   1c702:	e012      	b.n	1c72a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   1c704:	687b      	ldr	r3, [r7, #4]
   1c706:	4a0b      	ldr	r2, [pc, #44]	; (1c734 <MQTTPacket_len+0x4c>)
   1c708:	4293      	cmp	r3, r2
   1c70a:	dc03      	bgt.n	1c714 <MQTTPacket_len+0x2c>
		rem_len += 2;
   1c70c:	687b      	ldr	r3, [r7, #4]
   1c70e:	3302      	adds	r3, #2
   1c710:	607b      	str	r3, [r7, #4]
   1c712:	e00a      	b.n	1c72a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   1c714:	687b      	ldr	r3, [r7, #4]
   1c716:	4a08      	ldr	r2, [pc, #32]	; (1c738 <MQTTPacket_len+0x50>)
   1c718:	4293      	cmp	r3, r2
   1c71a:	dc03      	bgt.n	1c724 <MQTTPacket_len+0x3c>
		rem_len += 3;
   1c71c:	687b      	ldr	r3, [r7, #4]
   1c71e:	3303      	adds	r3, #3
   1c720:	607b      	str	r3, [r7, #4]
   1c722:	e002      	b.n	1c72a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   1c724:	687b      	ldr	r3, [r7, #4]
   1c726:	3304      	adds	r3, #4
   1c728:	607b      	str	r3, [r7, #4]
	return rem_len;
   1c72a:	687b      	ldr	r3, [r7, #4]
}
   1c72c:	0018      	movs	r0, r3
   1c72e:	46bd      	mov	sp, r7
   1c730:	b002      	add	sp, #8
   1c732:	bd80      	pop	{r7, pc}
   1c734:	00003fff 	.word	0x00003fff
   1c738:	001ffffe 	.word	0x001ffffe

0001c73c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   1c73c:	b580      	push	{r7, lr}
   1c73e:	b084      	sub	sp, #16
   1c740:	af00      	add	r7, sp, #0
   1c742:	6078      	str	r0, [r7, #4]
   1c744:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   1c746:	2300      	movs	r3, #0
   1c748:	60fb      	str	r3, [r7, #12]
   1c74a:	e00a      	b.n	1c762 <bufchar+0x26>
		*c = *bufptr++;
   1c74c:	4b09      	ldr	r3, [pc, #36]	; (1c774 <bufchar+0x38>)
   1c74e:	681b      	ldr	r3, [r3, #0]
   1c750:	1c59      	adds	r1, r3, #1
   1c752:	4a08      	ldr	r2, [pc, #32]	; (1c774 <bufchar+0x38>)
   1c754:	6011      	str	r1, [r2, #0]
   1c756:	781a      	ldrb	r2, [r3, #0]
   1c758:	687b      	ldr	r3, [r7, #4]
   1c75a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   1c75c:	68fb      	ldr	r3, [r7, #12]
   1c75e:	3301      	adds	r3, #1
   1c760:	60fb      	str	r3, [r7, #12]
   1c762:	68fa      	ldr	r2, [r7, #12]
   1c764:	683b      	ldr	r3, [r7, #0]
   1c766:	429a      	cmp	r2, r3
   1c768:	dbf0      	blt.n	1c74c <bufchar+0x10>
	return count;
   1c76a:	683b      	ldr	r3, [r7, #0]
}
   1c76c:	0018      	movs	r0, r3
   1c76e:	46bd      	mov	sp, r7
   1c770:	b004      	add	sp, #16
   1c772:	bd80      	pop	{r7, pc}
   1c774:	20004568 	.word	0x20004568

0001c778 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   1c778:	b580      	push	{r7, lr}
   1c77a:	b082      	sub	sp, #8
   1c77c:	af00      	add	r7, sp, #0
   1c77e:	6078      	str	r0, [r7, #4]
   1c780:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   1c782:	4b07      	ldr	r3, [pc, #28]	; (1c7a0 <MQTTPacket_decodeBuf+0x28>)
   1c784:	687a      	ldr	r2, [r7, #4]
   1c786:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   1c788:	683a      	ldr	r2, [r7, #0]
   1c78a:	4b06      	ldr	r3, [pc, #24]	; (1c7a4 <MQTTPacket_decodeBuf+0x2c>)
   1c78c:	0011      	movs	r1, r2
   1c78e:	0018      	movs	r0, r3
   1c790:	4b05      	ldr	r3, [pc, #20]	; (1c7a8 <MQTTPacket_decodeBuf+0x30>)
   1c792:	4798      	blx	r3
   1c794:	0003      	movs	r3, r0
}
   1c796:	0018      	movs	r0, r3
   1c798:	46bd      	mov	sp, r7
   1c79a:	b002      	add	sp, #8
   1c79c:	bd80      	pop	{r7, pc}
   1c79e:	46c0      	nop			; (mov r8, r8)
   1c7a0:	20004568 	.word	0x20004568
   1c7a4:	0001c73d 	.word	0x0001c73d
   1c7a8:	0001c665 	.word	0x0001c665

0001c7ac <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   1c7ac:	b580      	push	{r7, lr}
   1c7ae:	b084      	sub	sp, #16
   1c7b0:	af00      	add	r7, sp, #0
   1c7b2:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   1c7b4:	687b      	ldr	r3, [r7, #4]
   1c7b6:	681b      	ldr	r3, [r3, #0]
   1c7b8:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   1c7ba:	68fb      	ldr	r3, [r7, #12]
   1c7bc:	781b      	ldrb	r3, [r3, #0]
   1c7be:	021b      	lsls	r3, r3, #8
   1c7c0:	68fa      	ldr	r2, [r7, #12]
   1c7c2:	3201      	adds	r2, #1
   1c7c4:	7812      	ldrb	r2, [r2, #0]
   1c7c6:	189b      	adds	r3, r3, r2
   1c7c8:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   1c7ca:	687b      	ldr	r3, [r7, #4]
   1c7cc:	681b      	ldr	r3, [r3, #0]
   1c7ce:	1c9a      	adds	r2, r3, #2
   1c7d0:	687b      	ldr	r3, [r7, #4]
   1c7d2:	601a      	str	r2, [r3, #0]
	return len;
   1c7d4:	68bb      	ldr	r3, [r7, #8]
}
   1c7d6:	0018      	movs	r0, r3
   1c7d8:	46bd      	mov	sp, r7
   1c7da:	b004      	add	sp, #16
   1c7dc:	bd80      	pop	{r7, pc}

0001c7de <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   1c7de:	b580      	push	{r7, lr}
   1c7e0:	b084      	sub	sp, #16
   1c7e2:	af00      	add	r7, sp, #0
   1c7e4:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   1c7e6:	687b      	ldr	r3, [r7, #4]
   1c7e8:	681a      	ldr	r2, [r3, #0]
   1c7ea:	230f      	movs	r3, #15
   1c7ec:	18fb      	adds	r3, r7, r3
   1c7ee:	7812      	ldrb	r2, [r2, #0]
   1c7f0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   1c7f2:	687b      	ldr	r3, [r7, #4]
   1c7f4:	681b      	ldr	r3, [r3, #0]
   1c7f6:	1c5a      	adds	r2, r3, #1
   1c7f8:	687b      	ldr	r3, [r7, #4]
   1c7fa:	601a      	str	r2, [r3, #0]
	return c;
   1c7fc:	230f      	movs	r3, #15
   1c7fe:	18fb      	adds	r3, r7, r3
   1c800:	781b      	ldrb	r3, [r3, #0]
}
   1c802:	0018      	movs	r0, r3
   1c804:	46bd      	mov	sp, r7
   1c806:	b004      	add	sp, #16
   1c808:	bd80      	pop	{r7, pc}

0001c80a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   1c80a:	b580      	push	{r7, lr}
   1c80c:	b082      	sub	sp, #8
   1c80e:	af00      	add	r7, sp, #0
   1c810:	6078      	str	r0, [r7, #4]
   1c812:	000a      	movs	r2, r1
   1c814:	1cfb      	adds	r3, r7, #3
   1c816:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   1c818:	687b      	ldr	r3, [r7, #4]
   1c81a:	681b      	ldr	r3, [r3, #0]
   1c81c:	1cfa      	adds	r2, r7, #3
   1c81e:	7812      	ldrb	r2, [r2, #0]
   1c820:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   1c822:	687b      	ldr	r3, [r7, #4]
   1c824:	681b      	ldr	r3, [r3, #0]
   1c826:	1c5a      	adds	r2, r3, #1
   1c828:	687b      	ldr	r3, [r7, #4]
   1c82a:	601a      	str	r2, [r3, #0]
}
   1c82c:	46c0      	nop			; (mov r8, r8)
   1c82e:	46bd      	mov	sp, r7
   1c830:	b002      	add	sp, #8
   1c832:	bd80      	pop	{r7, pc}

0001c834 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   1c834:	b580      	push	{r7, lr}
   1c836:	b082      	sub	sp, #8
   1c838:	af00      	add	r7, sp, #0
   1c83a:	6078      	str	r0, [r7, #4]
   1c83c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   1c83e:	687b      	ldr	r3, [r7, #4]
   1c840:	681a      	ldr	r2, [r3, #0]
   1c842:	683b      	ldr	r3, [r7, #0]
   1c844:	2b00      	cmp	r3, #0
   1c846:	da00      	bge.n	1c84a <writeInt+0x16>
   1c848:	33ff      	adds	r3, #255	; 0xff
   1c84a:	121b      	asrs	r3, r3, #8
   1c84c:	b2db      	uxtb	r3, r3
   1c84e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   1c850:	687b      	ldr	r3, [r7, #4]
   1c852:	681b      	ldr	r3, [r3, #0]
   1c854:	1c5a      	adds	r2, r3, #1
   1c856:	687b      	ldr	r3, [r7, #4]
   1c858:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   1c85a:	687b      	ldr	r3, [r7, #4]
   1c85c:	681a      	ldr	r2, [r3, #0]
   1c85e:	683b      	ldr	r3, [r7, #0]
   1c860:	4908      	ldr	r1, [pc, #32]	; (1c884 <writeInt+0x50>)
   1c862:	400b      	ands	r3, r1
   1c864:	d503      	bpl.n	1c86e <writeInt+0x3a>
   1c866:	3b01      	subs	r3, #1
   1c868:	4907      	ldr	r1, [pc, #28]	; (1c888 <writeInt+0x54>)
   1c86a:	430b      	orrs	r3, r1
   1c86c:	3301      	adds	r3, #1
   1c86e:	b2db      	uxtb	r3, r3
   1c870:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   1c872:	687b      	ldr	r3, [r7, #4]
   1c874:	681b      	ldr	r3, [r3, #0]
   1c876:	1c5a      	adds	r2, r3, #1
   1c878:	687b      	ldr	r3, [r7, #4]
   1c87a:	601a      	str	r2, [r3, #0]
}
   1c87c:	46c0      	nop			; (mov r8, r8)
   1c87e:	46bd      	mov	sp, r7
   1c880:	b002      	add	sp, #8
   1c882:	bd80      	pop	{r7, pc}
   1c884:	800000ff 	.word	0x800000ff
   1c888:	ffffff00 	.word	0xffffff00

0001c88c <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   1c88c:	b580      	push	{r7, lr}
   1c88e:	b084      	sub	sp, #16
   1c890:	af00      	add	r7, sp, #0
   1c892:	6078      	str	r0, [r7, #4]
   1c894:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   1c896:	683b      	ldr	r3, [r7, #0]
   1c898:	0018      	movs	r0, r3
   1c89a:	4b0d      	ldr	r3, [pc, #52]	; (1c8d0 <writeCString+0x44>)
   1c89c:	4798      	blx	r3
   1c89e:	0003      	movs	r3, r0
   1c8a0:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   1c8a2:	68fa      	ldr	r2, [r7, #12]
   1c8a4:	687b      	ldr	r3, [r7, #4]
   1c8a6:	0011      	movs	r1, r2
   1c8a8:	0018      	movs	r0, r3
   1c8aa:	4b0a      	ldr	r3, [pc, #40]	; (1c8d4 <writeCString+0x48>)
   1c8ac:	4798      	blx	r3
	memcpy(*pptr, string, len);
   1c8ae:	687b      	ldr	r3, [r7, #4]
   1c8b0:	681b      	ldr	r3, [r3, #0]
   1c8b2:	68fa      	ldr	r2, [r7, #12]
   1c8b4:	6839      	ldr	r1, [r7, #0]
   1c8b6:	0018      	movs	r0, r3
   1c8b8:	4b07      	ldr	r3, [pc, #28]	; (1c8d8 <writeCString+0x4c>)
   1c8ba:	4798      	blx	r3
	*pptr += len;
   1c8bc:	687b      	ldr	r3, [r7, #4]
   1c8be:	681a      	ldr	r2, [r3, #0]
   1c8c0:	68fb      	ldr	r3, [r7, #12]
   1c8c2:	18d2      	adds	r2, r2, r3
   1c8c4:	687b      	ldr	r3, [r7, #4]
   1c8c6:	601a      	str	r2, [r3, #0]
}
   1c8c8:	46c0      	nop			; (mov r8, r8)
   1c8ca:	46bd      	mov	sp, r7
   1c8cc:	b004      	add	sp, #16
   1c8ce:	bd80      	pop	{r7, pc}
   1c8d0:	00021143 	.word	0x00021143
   1c8d4:	0001c835 	.word	0x0001c835
   1c8d8:	00020d55 	.word	0x00020d55

0001c8dc <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   1c8dc:	b580      	push	{r7, lr}
   1c8de:	b084      	sub	sp, #16
   1c8e0:	af00      	add	r7, sp, #0
   1c8e2:	60f8      	str	r0, [r7, #12]
   1c8e4:	0038      	movs	r0, r7
   1c8e6:	6001      	str	r1, [r0, #0]
   1c8e8:	6042      	str	r2, [r0, #4]
   1c8ea:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   1c8ec:	003b      	movs	r3, r7
   1c8ee:	685b      	ldr	r3, [r3, #4]
   1c8f0:	2b00      	cmp	r3, #0
   1c8f2:	dd17      	ble.n	1c924 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   1c8f4:	003b      	movs	r3, r7
   1c8f6:	685a      	ldr	r2, [r3, #4]
   1c8f8:	68fb      	ldr	r3, [r7, #12]
   1c8fa:	0011      	movs	r1, r2
   1c8fc:	0018      	movs	r0, r3
   1c8fe:	4b14      	ldr	r3, [pc, #80]	; (1c950 <writeMQTTString+0x74>)
   1c900:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   1c902:	68fb      	ldr	r3, [r7, #12]
   1c904:	6818      	ldr	r0, [r3, #0]
   1c906:	003b      	movs	r3, r7
   1c908:	6899      	ldr	r1, [r3, #8]
   1c90a:	003b      	movs	r3, r7
   1c90c:	685b      	ldr	r3, [r3, #4]
   1c90e:	001a      	movs	r2, r3
   1c910:	4b10      	ldr	r3, [pc, #64]	; (1c954 <writeMQTTString+0x78>)
   1c912:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   1c914:	68fb      	ldr	r3, [r7, #12]
   1c916:	681a      	ldr	r2, [r3, #0]
   1c918:	003b      	movs	r3, r7
   1c91a:	685b      	ldr	r3, [r3, #4]
   1c91c:	18d2      	adds	r2, r2, r3
   1c91e:	68fb      	ldr	r3, [r7, #12]
   1c920:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   1c922:	e010      	b.n	1c946 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   1c924:	003b      	movs	r3, r7
   1c926:	681b      	ldr	r3, [r3, #0]
   1c928:	2b00      	cmp	r3, #0
   1c92a:	d007      	beq.n	1c93c <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   1c92c:	003b      	movs	r3, r7
   1c92e:	681a      	ldr	r2, [r3, #0]
   1c930:	68fb      	ldr	r3, [r7, #12]
   1c932:	0011      	movs	r1, r2
   1c934:	0018      	movs	r0, r3
   1c936:	4b08      	ldr	r3, [pc, #32]	; (1c958 <writeMQTTString+0x7c>)
   1c938:	4798      	blx	r3
}
   1c93a:	e004      	b.n	1c946 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   1c93c:	68fb      	ldr	r3, [r7, #12]
   1c93e:	2100      	movs	r1, #0
   1c940:	0018      	movs	r0, r3
   1c942:	4b03      	ldr	r3, [pc, #12]	; (1c950 <writeMQTTString+0x74>)
   1c944:	4798      	blx	r3
}
   1c946:	46c0      	nop			; (mov r8, r8)
   1c948:	46bd      	mov	sp, r7
   1c94a:	b004      	add	sp, #16
   1c94c:	bd80      	pop	{r7, pc}
   1c94e:	46c0      	nop			; (mov r8, r8)
   1c950:	0001c835 	.word	0x0001c835
   1c954:	00020d55 	.word	0x00020d55
   1c958:	0001c88d 	.word	0x0001c88d

0001c95c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   1c95c:	b580      	push	{r7, lr}
   1c95e:	b086      	sub	sp, #24
   1c960:	af00      	add	r7, sp, #0
   1c962:	60f8      	str	r0, [r7, #12]
   1c964:	60b9      	str	r1, [r7, #8]
   1c966:	607a      	str	r2, [r7, #4]
	int rc = 0;
   1c968:	2300      	movs	r3, #0
   1c96a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   1c96c:	687a      	ldr	r2, [r7, #4]
   1c96e:	68bb      	ldr	r3, [r7, #8]
   1c970:	681b      	ldr	r3, [r3, #0]
   1c972:	1ad3      	subs	r3, r2, r3
   1c974:	2b01      	cmp	r3, #1
   1c976:	dd1b      	ble.n	1c9b0 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   1c978:	68bb      	ldr	r3, [r7, #8]
   1c97a:	0018      	movs	r0, r3
   1c97c:	4b10      	ldr	r3, [pc, #64]	; (1c9c0 <readMQTTLenString+0x64>)
   1c97e:	4798      	blx	r3
   1c980:	0002      	movs	r2, r0
   1c982:	68fb      	ldr	r3, [r7, #12]
   1c984:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   1c986:	68bb      	ldr	r3, [r7, #8]
   1c988:	681a      	ldr	r2, [r3, #0]
   1c98a:	68fb      	ldr	r3, [r7, #12]
   1c98c:	685b      	ldr	r3, [r3, #4]
   1c98e:	18d2      	adds	r2, r2, r3
   1c990:	687b      	ldr	r3, [r7, #4]
   1c992:	429a      	cmp	r2, r3
   1c994:	d80c      	bhi.n	1c9b0 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   1c996:	68bb      	ldr	r3, [r7, #8]
   1c998:	681a      	ldr	r2, [r3, #0]
   1c99a:	68fb      	ldr	r3, [r7, #12]
   1c99c:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   1c99e:	68bb      	ldr	r3, [r7, #8]
   1c9a0:	681a      	ldr	r2, [r3, #0]
   1c9a2:	68fb      	ldr	r3, [r7, #12]
   1c9a4:	685b      	ldr	r3, [r3, #4]
   1c9a6:	18d2      	adds	r2, r2, r3
   1c9a8:	68bb      	ldr	r3, [r7, #8]
   1c9aa:	601a      	str	r2, [r3, #0]
			rc = 1;
   1c9ac:	2301      	movs	r3, #1
   1c9ae:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   1c9b0:	68fb      	ldr	r3, [r7, #12]
   1c9b2:	2200      	movs	r2, #0
   1c9b4:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   1c9b6:	697b      	ldr	r3, [r7, #20]
}
   1c9b8:	0018      	movs	r0, r3
   1c9ba:	46bd      	mov	sp, r7
   1c9bc:	b006      	add	sp, #24
   1c9be:	bd80      	pop	{r7, pc}
   1c9c0:	0001c7ad 	.word	0x0001c7ad

0001c9c4 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   1c9c4:	b580      	push	{r7, lr}
   1c9c6:	b086      	sub	sp, #24
   1c9c8:	af00      	add	r7, sp, #0
   1c9ca:	1d3b      	adds	r3, r7, #4
   1c9cc:	6018      	str	r0, [r3, #0]
   1c9ce:	6059      	str	r1, [r3, #4]
   1c9d0:	609a      	str	r2, [r3, #8]
	int rc = 0;
   1c9d2:	2300      	movs	r3, #0
   1c9d4:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   1c9d6:	1d3b      	adds	r3, r7, #4
   1c9d8:	681b      	ldr	r3, [r3, #0]
   1c9da:	2b00      	cmp	r3, #0
   1c9dc:	d007      	beq.n	1c9ee <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   1c9de:	1d3b      	adds	r3, r7, #4
   1c9e0:	681b      	ldr	r3, [r3, #0]
   1c9e2:	0018      	movs	r0, r3
   1c9e4:	4b06      	ldr	r3, [pc, #24]	; (1ca00 <MQTTstrlen+0x3c>)
   1c9e6:	4798      	blx	r3
   1c9e8:	0003      	movs	r3, r0
   1c9ea:	617b      	str	r3, [r7, #20]
   1c9ec:	e002      	b.n	1c9f4 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   1c9ee:	1d3b      	adds	r3, r7, #4
   1c9f0:	685b      	ldr	r3, [r3, #4]
   1c9f2:	617b      	str	r3, [r7, #20]
	return rc;
   1c9f4:	697b      	ldr	r3, [r7, #20]
}
   1c9f6:	0018      	movs	r0, r3
   1c9f8:	46bd      	mov	sp, r7
   1c9fa:	b006      	add	sp, #24
   1c9fc:	bd80      	pop	{r7, pc}
   1c9fe:	46c0      	nop			; (mov r8, r8)
   1ca00:	00021143 	.word	0x00021143

0001ca04 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   1ca04:	b580      	push	{r7, lr}
   1ca06:	b086      	sub	sp, #24
   1ca08:	af00      	add	r7, sp, #0
   1ca0a:	6078      	str	r0, [r7, #4]
   1ca0c:	6039      	str	r1, [r7, #0]
	int alen = 0,
   1ca0e:	2300      	movs	r3, #0
   1ca10:	617b      	str	r3, [r7, #20]
		blen = 0;
   1ca12:	2300      	movs	r3, #0
   1ca14:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   1ca16:	687b      	ldr	r3, [r7, #4]
   1ca18:	681b      	ldr	r3, [r3, #0]
   1ca1a:	2b00      	cmp	r3, #0
   1ca1c:	d00a      	beq.n	1ca34 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   1ca1e:	687b      	ldr	r3, [r7, #4]
   1ca20:	681b      	ldr	r3, [r3, #0]
   1ca22:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   1ca24:	687b      	ldr	r3, [r7, #4]
   1ca26:	681b      	ldr	r3, [r3, #0]
   1ca28:	0018      	movs	r0, r3
   1ca2a:	4b12      	ldr	r3, [pc, #72]	; (1ca74 <MQTTPacket_equals+0x70>)
   1ca2c:	4798      	blx	r3
   1ca2e:	0003      	movs	r3, r0
   1ca30:	617b      	str	r3, [r7, #20]
   1ca32:	e005      	b.n	1ca40 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   1ca34:	687b      	ldr	r3, [r7, #4]
   1ca36:	689b      	ldr	r3, [r3, #8]
   1ca38:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   1ca3a:	687b      	ldr	r3, [r7, #4]
   1ca3c:	685b      	ldr	r3, [r3, #4]
   1ca3e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   1ca40:	683b      	ldr	r3, [r7, #0]
   1ca42:	0018      	movs	r0, r3
   1ca44:	4b0b      	ldr	r3, [pc, #44]	; (1ca74 <MQTTPacket_equals+0x70>)
   1ca46:	4798      	blx	r3
   1ca48:	0003      	movs	r3, r0
   1ca4a:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   1ca4c:	697a      	ldr	r2, [r7, #20]
   1ca4e:	68fb      	ldr	r3, [r7, #12]
   1ca50:	429a      	cmp	r2, r3
   1ca52:	d109      	bne.n	1ca68 <MQTTPacket_equals+0x64>
   1ca54:	697a      	ldr	r2, [r7, #20]
   1ca56:	6839      	ldr	r1, [r7, #0]
   1ca58:	693b      	ldr	r3, [r7, #16]
   1ca5a:	0018      	movs	r0, r3
   1ca5c:	4b06      	ldr	r3, [pc, #24]	; (1ca78 <MQTTPacket_equals+0x74>)
   1ca5e:	4798      	blx	r3
   1ca60:	1e03      	subs	r3, r0, #0
   1ca62:	d101      	bne.n	1ca68 <MQTTPacket_equals+0x64>
   1ca64:	2301      	movs	r3, #1
   1ca66:	e000      	b.n	1ca6a <MQTTPacket_equals+0x66>
   1ca68:	2300      	movs	r3, #0
}
   1ca6a:	0018      	movs	r0, r3
   1ca6c:	46bd      	mov	sp, r7
   1ca6e:	b006      	add	sp, #24
   1ca70:	bd80      	pop	{r7, pc}
   1ca72:	46c0      	nop			; (mov r8, r8)
   1ca74:	00021143 	.word	0x00021143
   1ca78:	00021151 	.word	0x00021151

0001ca7c <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   1ca7c:	b580      	push	{r7, lr}
   1ca7e:	b086      	sub	sp, #24
   1ca80:	af00      	add	r7, sp, #0
   1ca82:	60f8      	str	r0, [r7, #12]
   1ca84:	0038      	movs	r0, r7
   1ca86:	6001      	str	r1, [r0, #0]
   1ca88:	6042      	str	r2, [r0, #4]
   1ca8a:	6083      	str	r3, [r0, #8]
	int len = 0;
   1ca8c:	2300      	movs	r3, #0
   1ca8e:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   1ca90:	003b      	movs	r3, r7
   1ca92:	6818      	ldr	r0, [r3, #0]
   1ca94:	6859      	ldr	r1, [r3, #4]
   1ca96:	689a      	ldr	r2, [r3, #8]
   1ca98:	4b09      	ldr	r3, [pc, #36]	; (1cac0 <MQTTSerialize_publishLength+0x44>)
   1ca9a:	4798      	blx	r3
   1ca9c:	0003      	movs	r3, r0
   1ca9e:	1c9a      	adds	r2, r3, #2
   1caa0:	6a3b      	ldr	r3, [r7, #32]
   1caa2:	18d3      	adds	r3, r2, r3
   1caa4:	697a      	ldr	r2, [r7, #20]
   1caa6:	18d3      	adds	r3, r2, r3
   1caa8:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   1caaa:	68fb      	ldr	r3, [r7, #12]
   1caac:	2b00      	cmp	r3, #0
   1caae:	dd02      	ble.n	1cab6 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   1cab0:	697b      	ldr	r3, [r7, #20]
   1cab2:	3302      	adds	r3, #2
   1cab4:	617b      	str	r3, [r7, #20]
	return len;
   1cab6:	697b      	ldr	r3, [r7, #20]
}
   1cab8:	0018      	movs	r0, r3
   1caba:	46bd      	mov	sp, r7
   1cabc:	b006      	add	sp, #24
   1cabe:	bd80      	pop	{r7, pc}
   1cac0:	0001c9c5 	.word	0x0001c9c5

0001cac4 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   1cac4:	b590      	push	{r4, r7, lr}
   1cac6:	b08b      	sub	sp, #44	; 0x2c
   1cac8:	af02      	add	r7, sp, #8
   1caca:	60f8      	str	r0, [r7, #12]
   1cacc:	60b9      	str	r1, [r7, #8]
   1cace:	603b      	str	r3, [r7, #0]
   1cad0:	1dfb      	adds	r3, r7, #7
   1cad2:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   1cad4:	68fb      	ldr	r3, [r7, #12]
   1cad6:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   1cad8:	2300      	movs	r3, #0
   1cada:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   1cadc:	2300      	movs	r3, #0
   1cade:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   1cae0:	2300      	movs	r3, #0
   1cae2:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   1cae4:	2308      	movs	r3, #8
   1cae6:	2230      	movs	r2, #48	; 0x30
   1cae8:	4694      	mov	ip, r2
   1caea:	44bc      	add	ip, r7
   1caec:	4463      	add	r3, ip
   1caee:	6838      	ldr	r0, [r7, #0]
   1caf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1caf2:	9200      	str	r2, [sp, #0]
   1caf4:	6819      	ldr	r1, [r3, #0]
   1caf6:	685a      	ldr	r2, [r3, #4]
   1caf8:	689b      	ldr	r3, [r3, #8]
   1cafa:	4c46      	ldr	r4, [pc, #280]	; (1cc14 <MQTTSerialize_publish+0x150>)
   1cafc:	47a0      	blx	r4
   1cafe:	0003      	movs	r3, r0
   1cb00:	61bb      	str	r3, [r7, #24]
   1cb02:	69bb      	ldr	r3, [r7, #24]
   1cb04:	0018      	movs	r0, r3
   1cb06:	4b44      	ldr	r3, [pc, #272]	; (1cc18 <MQTTSerialize_publish+0x154>)
   1cb08:	4798      	blx	r3
   1cb0a:	0002      	movs	r2, r0
   1cb0c:	68bb      	ldr	r3, [r7, #8]
   1cb0e:	429a      	cmp	r2, r3
   1cb10:	dd03      	ble.n	1cb1a <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1cb12:	2302      	movs	r3, #2
   1cb14:	425b      	negs	r3, r3
   1cb16:	61fb      	str	r3, [r7, #28]
		goto exit;
   1cb18:	e077      	b.n	1cc0a <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   1cb1a:	2310      	movs	r3, #16
   1cb1c:	18fb      	adds	r3, r7, r3
   1cb1e:	781a      	ldrb	r2, [r3, #0]
   1cb20:	210f      	movs	r1, #15
   1cb22:	400a      	ands	r2, r1
   1cb24:	1c11      	adds	r1, r2, #0
   1cb26:	2230      	movs	r2, #48	; 0x30
   1cb28:	430a      	orrs	r2, r1
   1cb2a:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1cb2c:	1dfb      	adds	r3, r7, #7
   1cb2e:	781b      	ldrb	r3, [r3, #0]
   1cb30:	2201      	movs	r2, #1
   1cb32:	4013      	ands	r3, r2
   1cb34:	b2da      	uxtb	r2, r3
   1cb36:	2310      	movs	r3, #16
   1cb38:	18fb      	adds	r3, r7, r3
   1cb3a:	2101      	movs	r1, #1
   1cb3c:	400a      	ands	r2, r1
   1cb3e:	00d0      	lsls	r0, r2, #3
   1cb40:	781a      	ldrb	r2, [r3, #0]
   1cb42:	2108      	movs	r1, #8
   1cb44:	438a      	bics	r2, r1
   1cb46:	1c11      	adds	r1, r2, #0
   1cb48:	1c02      	adds	r2, r0, #0
   1cb4a:	430a      	orrs	r2, r1
   1cb4c:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   1cb4e:	683b      	ldr	r3, [r7, #0]
   1cb50:	b2db      	uxtb	r3, r3
   1cb52:	1c1a      	adds	r2, r3, #0
   1cb54:	2303      	movs	r3, #3
   1cb56:	4013      	ands	r3, r2
   1cb58:	b2da      	uxtb	r2, r3
   1cb5a:	2310      	movs	r3, #16
   1cb5c:	18fb      	adds	r3, r7, r3
   1cb5e:	2103      	movs	r1, #3
   1cb60:	400a      	ands	r2, r1
   1cb62:	1890      	adds	r0, r2, r2
   1cb64:	781a      	ldrb	r2, [r3, #0]
   1cb66:	2106      	movs	r1, #6
   1cb68:	438a      	bics	r2, r1
   1cb6a:	1c11      	adds	r1, r2, #0
   1cb6c:	1c02      	adds	r2, r0, #0
   1cb6e:	430a      	orrs	r2, r1
   1cb70:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   1cb72:	2330      	movs	r3, #48	; 0x30
   1cb74:	18fb      	adds	r3, r7, r3
   1cb76:	781b      	ldrb	r3, [r3, #0]
   1cb78:	2201      	movs	r2, #1
   1cb7a:	4013      	ands	r3, r2
   1cb7c:	b2da      	uxtb	r2, r3
   1cb7e:	2310      	movs	r3, #16
   1cb80:	18fb      	adds	r3, r7, r3
   1cb82:	2101      	movs	r1, #1
   1cb84:	400a      	ands	r2, r1
   1cb86:	0010      	movs	r0, r2
   1cb88:	781a      	ldrb	r2, [r3, #0]
   1cb8a:	2101      	movs	r1, #1
   1cb8c:	438a      	bics	r2, r1
   1cb8e:	1c11      	adds	r1, r2, #0
   1cb90:	1c02      	adds	r2, r0, #0
   1cb92:	430a      	orrs	r2, r1
   1cb94:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1cb96:	2310      	movs	r3, #16
   1cb98:	18fb      	adds	r3, r7, r3
   1cb9a:	781a      	ldrb	r2, [r3, #0]
   1cb9c:	2314      	movs	r3, #20
   1cb9e:	18fb      	adds	r3, r7, r3
   1cba0:	0011      	movs	r1, r2
   1cba2:	0018      	movs	r0, r3
   1cba4:	4b1d      	ldr	r3, [pc, #116]	; (1cc1c <MQTTSerialize_publish+0x158>)
   1cba6:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1cba8:	697b      	ldr	r3, [r7, #20]
   1cbaa:	69ba      	ldr	r2, [r7, #24]
   1cbac:	0011      	movs	r1, r2
   1cbae:	0018      	movs	r0, r3
   1cbb0:	4b1b      	ldr	r3, [pc, #108]	; (1cc20 <MQTTSerialize_publish+0x15c>)
   1cbb2:	4798      	blx	r3
   1cbb4:	0002      	movs	r2, r0
   1cbb6:	697b      	ldr	r3, [r7, #20]
   1cbb8:	189b      	adds	r3, r3, r2
   1cbba:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   1cbbc:	2308      	movs	r3, #8
   1cbbe:	2230      	movs	r2, #48	; 0x30
   1cbc0:	4694      	mov	ip, r2
   1cbc2:	44bc      	add	ip, r7
   1cbc4:	4463      	add	r3, ip
   1cbc6:	2214      	movs	r2, #20
   1cbc8:	18b8      	adds	r0, r7, r2
   1cbca:	6819      	ldr	r1, [r3, #0]
   1cbcc:	685a      	ldr	r2, [r3, #4]
   1cbce:	689b      	ldr	r3, [r3, #8]
   1cbd0:	4c14      	ldr	r4, [pc, #80]	; (1cc24 <MQTTSerialize_publish+0x160>)
   1cbd2:	47a0      	blx	r4

	if (qos > 0)
   1cbd4:	683b      	ldr	r3, [r7, #0]
   1cbd6:	2b00      	cmp	r3, #0
   1cbd8:	dd08      	ble.n	1cbec <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   1cbda:	2334      	movs	r3, #52	; 0x34
   1cbdc:	18fb      	adds	r3, r7, r3
   1cbde:	881a      	ldrh	r2, [r3, #0]
   1cbe0:	2314      	movs	r3, #20
   1cbe2:	18fb      	adds	r3, r7, r3
   1cbe4:	0011      	movs	r1, r2
   1cbe6:	0018      	movs	r0, r3
   1cbe8:	4b0f      	ldr	r3, [pc, #60]	; (1cc28 <MQTTSerialize_publish+0x164>)
   1cbea:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   1cbec:	697b      	ldr	r3, [r7, #20]
   1cbee:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1cbf0:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1cbf2:	0018      	movs	r0, r3
   1cbf4:	4b0d      	ldr	r3, [pc, #52]	; (1cc2c <MQTTSerialize_publish+0x168>)
   1cbf6:	4798      	blx	r3
	ptr += payloadlen;
   1cbf8:	697a      	ldr	r2, [r7, #20]
   1cbfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1cbfc:	18d3      	adds	r3, r2, r3
   1cbfe:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   1cc00:	697b      	ldr	r3, [r7, #20]
   1cc02:	001a      	movs	r2, r3
   1cc04:	68fb      	ldr	r3, [r7, #12]
   1cc06:	1ad3      	subs	r3, r2, r3
   1cc08:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1cc0a:	69fb      	ldr	r3, [r7, #28]
}
   1cc0c:	0018      	movs	r0, r3
   1cc0e:	46bd      	mov	sp, r7
   1cc10:	b009      	add	sp, #36	; 0x24
   1cc12:	bd90      	pop	{r4, r7, pc}
   1cc14:	0001ca7d 	.word	0x0001ca7d
   1cc18:	0001c6e9 	.word	0x0001c6e9
   1cc1c:	0001c80b 	.word	0x0001c80b
   1cc20:	0001c5f1 	.word	0x0001c5f1
   1cc24:	0001c8dd 	.word	0x0001c8dd
   1cc28:	0001c835 	.word	0x0001c835
   1cc2c:	00020d55 	.word	0x00020d55

0001cc30 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   1cc30:	b580      	push	{r7, lr}
   1cc32:	b088      	sub	sp, #32
   1cc34:	af00      	add	r7, sp, #0
   1cc36:	60f8      	str	r0, [r7, #12]
   1cc38:	60b9      	str	r1, [r7, #8]
   1cc3a:	0019      	movs	r1, r3
   1cc3c:	1dfb      	adds	r3, r7, #7
   1cc3e:	701a      	strb	r2, [r3, #0]
   1cc40:	1dbb      	adds	r3, r7, #6
   1cc42:	1c0a      	adds	r2, r1, #0
   1cc44:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   1cc46:	2300      	movs	r3, #0
   1cc48:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   1cc4a:	2300      	movs	r3, #0
   1cc4c:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   1cc4e:	68fb      	ldr	r3, [r7, #12]
   1cc50:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   1cc52:	68bb      	ldr	r3, [r7, #8]
   1cc54:	2b03      	cmp	r3, #3
   1cc56:	dc03      	bgt.n	1cc60 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1cc58:	2302      	movs	r3, #2
   1cc5a:	425b      	negs	r3, r3
   1cc5c:	61fb      	str	r3, [r7, #28]
		goto exit;
   1cc5e:	e055      	b.n	1cd0c <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   1cc60:	1dfb      	adds	r3, r7, #7
   1cc62:	781b      	ldrb	r3, [r3, #0]
   1cc64:	220f      	movs	r2, #15
   1cc66:	4013      	ands	r3, r2
   1cc68:	b2da      	uxtb	r2, r3
   1cc6a:	2318      	movs	r3, #24
   1cc6c:	18fb      	adds	r3, r7, r3
   1cc6e:	0110      	lsls	r0, r2, #4
   1cc70:	781a      	ldrb	r2, [r3, #0]
   1cc72:	210f      	movs	r1, #15
   1cc74:	400a      	ands	r2, r1
   1cc76:	1c11      	adds	r1, r2, #0
   1cc78:	1c02      	adds	r2, r0, #0
   1cc7a:	430a      	orrs	r2, r1
   1cc7c:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1cc7e:	1dbb      	adds	r3, r7, #6
   1cc80:	781b      	ldrb	r3, [r3, #0]
   1cc82:	2201      	movs	r2, #1
   1cc84:	4013      	ands	r3, r2
   1cc86:	b2da      	uxtb	r2, r3
   1cc88:	2318      	movs	r3, #24
   1cc8a:	18fb      	adds	r3, r7, r3
   1cc8c:	2101      	movs	r1, #1
   1cc8e:	400a      	ands	r2, r1
   1cc90:	00d0      	lsls	r0, r2, #3
   1cc92:	781a      	ldrb	r2, [r3, #0]
   1cc94:	2108      	movs	r1, #8
   1cc96:	438a      	bics	r2, r1
   1cc98:	1c11      	adds	r1, r2, #0
   1cc9a:	1c02      	adds	r2, r0, #0
   1cc9c:	430a      	orrs	r2, r1
   1cc9e:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   1cca0:	1dfb      	adds	r3, r7, #7
   1cca2:	781b      	ldrb	r3, [r3, #0]
   1cca4:	3b06      	subs	r3, #6
   1cca6:	425a      	negs	r2, r3
   1cca8:	4153      	adcs	r3, r2
   1ccaa:	b2db      	uxtb	r3, r3
   1ccac:	1c1a      	adds	r2, r3, #0
   1ccae:	2303      	movs	r3, #3
   1ccb0:	4013      	ands	r3, r2
   1ccb2:	b2da      	uxtb	r2, r3
   1ccb4:	2318      	movs	r3, #24
   1ccb6:	18fb      	adds	r3, r7, r3
   1ccb8:	2103      	movs	r1, #3
   1ccba:	400a      	ands	r2, r1
   1ccbc:	1890      	adds	r0, r2, r2
   1ccbe:	781a      	ldrb	r2, [r3, #0]
   1ccc0:	2106      	movs	r1, #6
   1ccc2:	438a      	bics	r2, r1
   1ccc4:	1c11      	adds	r1, r2, #0
   1ccc6:	1c02      	adds	r2, r0, #0
   1ccc8:	430a      	orrs	r2, r1
   1ccca:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1cccc:	2318      	movs	r3, #24
   1ccce:	18fb      	adds	r3, r7, r3
   1ccd0:	781a      	ldrb	r2, [r3, #0]
   1ccd2:	2314      	movs	r3, #20
   1ccd4:	18fb      	adds	r3, r7, r3
   1ccd6:	0011      	movs	r1, r2
   1ccd8:	0018      	movs	r0, r3
   1ccda:	4b0f      	ldr	r3, [pc, #60]	; (1cd18 <MQTTSerialize_ack+0xe8>)
   1ccdc:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   1ccde:	697b      	ldr	r3, [r7, #20]
   1cce0:	2102      	movs	r1, #2
   1cce2:	0018      	movs	r0, r3
   1cce4:	4b0d      	ldr	r3, [pc, #52]	; (1cd1c <MQTTSerialize_ack+0xec>)
   1cce6:	4798      	blx	r3
   1cce8:	0002      	movs	r2, r0
   1ccea:	697b      	ldr	r3, [r7, #20]
   1ccec:	189b      	adds	r3, r3, r2
   1ccee:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   1ccf0:	2328      	movs	r3, #40	; 0x28
   1ccf2:	18fb      	adds	r3, r7, r3
   1ccf4:	881a      	ldrh	r2, [r3, #0]
   1ccf6:	2314      	movs	r3, #20
   1ccf8:	18fb      	adds	r3, r7, r3
   1ccfa:	0011      	movs	r1, r2
   1ccfc:	0018      	movs	r0, r3
   1ccfe:	4b08      	ldr	r3, [pc, #32]	; (1cd20 <MQTTSerialize_ack+0xf0>)
   1cd00:	4798      	blx	r3
	rc = ptr - buf;
   1cd02:	697b      	ldr	r3, [r7, #20]
   1cd04:	001a      	movs	r2, r3
   1cd06:	68fb      	ldr	r3, [r7, #12]
   1cd08:	1ad3      	subs	r3, r2, r3
   1cd0a:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1cd0c:	69fb      	ldr	r3, [r7, #28]
}
   1cd0e:	0018      	movs	r0, r3
   1cd10:	46bd      	mov	sp, r7
   1cd12:	b008      	add	sp, #32
   1cd14:	bd80      	pop	{r7, pc}
   1cd16:	46c0      	nop			; (mov r8, r8)
   1cd18:	0001c80b 	.word	0x0001c80b
   1cd1c:	0001c5f1 	.word	0x0001c5f1
   1cd20:	0001c835 	.word	0x0001c835

0001cd24 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   1cd24:	b580      	push	{r7, lr}
   1cd26:	b084      	sub	sp, #16
   1cd28:	af00      	add	r7, sp, #0
   1cd2a:	6078      	str	r0, [r7, #4]
   1cd2c:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   1cd2e:	2302      	movs	r3, #2
   1cd30:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   1cd32:	2300      	movs	r3, #0
   1cd34:	60fb      	str	r3, [r7, #12]
   1cd36:	e014      	b.n	1cd62 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   1cd38:	68fa      	ldr	r2, [r7, #12]
   1cd3a:	0013      	movs	r3, r2
   1cd3c:	005b      	lsls	r3, r3, #1
   1cd3e:	189b      	adds	r3, r3, r2
   1cd40:	009b      	lsls	r3, r3, #2
   1cd42:	001a      	movs	r2, r3
   1cd44:	683b      	ldr	r3, [r7, #0]
   1cd46:	189b      	adds	r3, r3, r2
   1cd48:	6818      	ldr	r0, [r3, #0]
   1cd4a:	6859      	ldr	r1, [r3, #4]
   1cd4c:	689a      	ldr	r2, [r3, #8]
   1cd4e:	4b09      	ldr	r3, [pc, #36]	; (1cd74 <MQTTSerialize_subscribeLength+0x50>)
   1cd50:	4798      	blx	r3
   1cd52:	0003      	movs	r3, r0
   1cd54:	3303      	adds	r3, #3
   1cd56:	68ba      	ldr	r2, [r7, #8]
   1cd58:	18d3      	adds	r3, r2, r3
   1cd5a:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   1cd5c:	68fb      	ldr	r3, [r7, #12]
   1cd5e:	3301      	adds	r3, #1
   1cd60:	60fb      	str	r3, [r7, #12]
   1cd62:	68fa      	ldr	r2, [r7, #12]
   1cd64:	687b      	ldr	r3, [r7, #4]
   1cd66:	429a      	cmp	r2, r3
   1cd68:	dbe6      	blt.n	1cd38 <MQTTSerialize_subscribeLength+0x14>
	return len;
   1cd6a:	68bb      	ldr	r3, [r7, #8]
}
   1cd6c:	0018      	movs	r0, r3
   1cd6e:	46bd      	mov	sp, r7
   1cd70:	b004      	add	sp, #16
   1cd72:	bd80      	pop	{r7, pc}
   1cd74:	0001c9c5 	.word	0x0001c9c5

0001cd78 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   1cd78:	b590      	push	{r4, r7, lr}
   1cd7a:	b08b      	sub	sp, #44	; 0x2c
   1cd7c:	af00      	add	r7, sp, #0
   1cd7e:	60f8      	str	r0, [r7, #12]
   1cd80:	60b9      	str	r1, [r7, #8]
   1cd82:	0019      	movs	r1, r3
   1cd84:	1dfb      	adds	r3, r7, #7
   1cd86:	701a      	strb	r2, [r3, #0]
   1cd88:	1d3b      	adds	r3, r7, #4
   1cd8a:	1c0a      	adds	r2, r1, #0
   1cd8c:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   1cd8e:	68fb      	ldr	r3, [r7, #12]
   1cd90:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   1cd92:	2300      	movs	r3, #0
   1cd94:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   1cd96:	2300      	movs	r3, #0
   1cd98:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   1cd9a:	2300      	movs	r3, #0
   1cd9c:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   1cd9e:	2300      	movs	r3, #0
   1cda0:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   1cda2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1cda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cda6:	0011      	movs	r1, r2
   1cda8:	0018      	movs	r0, r3
   1cdaa:	4b41      	ldr	r3, [pc, #260]	; (1ceb0 <MQTTSerialize_subscribe+0x138>)
   1cdac:	4798      	blx	r3
   1cdae:	0003      	movs	r3, r0
   1cdb0:	61fb      	str	r3, [r7, #28]
   1cdb2:	69fb      	ldr	r3, [r7, #28]
   1cdb4:	0018      	movs	r0, r3
   1cdb6:	4b3f      	ldr	r3, [pc, #252]	; (1ceb4 <MQTTSerialize_subscribe+0x13c>)
   1cdb8:	4798      	blx	r3
   1cdba:	0002      	movs	r2, r0
   1cdbc:	68bb      	ldr	r3, [r7, #8]
   1cdbe:	429a      	cmp	r2, r3
   1cdc0:	dd03      	ble.n	1cdca <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1cdc2:	2302      	movs	r3, #2
   1cdc4:	425b      	negs	r3, r3
   1cdc6:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   1cdc8:	e06c      	b.n	1cea4 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   1cdca:	2314      	movs	r3, #20
   1cdcc:	18fb      	adds	r3, r7, r3
   1cdce:	2200      	movs	r2, #0
   1cdd0:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   1cdd2:	2314      	movs	r3, #20
   1cdd4:	18fb      	adds	r3, r7, r3
   1cdd6:	781a      	ldrb	r2, [r3, #0]
   1cdd8:	210f      	movs	r1, #15
   1cdda:	400a      	ands	r2, r1
   1cddc:	1c11      	adds	r1, r2, #0
   1cdde:	2280      	movs	r2, #128	; 0x80
   1cde0:	4252      	negs	r2, r2
   1cde2:	430a      	orrs	r2, r1
   1cde4:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1cde6:	1dfb      	adds	r3, r7, #7
   1cde8:	781b      	ldrb	r3, [r3, #0]
   1cdea:	2201      	movs	r2, #1
   1cdec:	4013      	ands	r3, r2
   1cdee:	b2da      	uxtb	r2, r3
   1cdf0:	2314      	movs	r3, #20
   1cdf2:	18fb      	adds	r3, r7, r3
   1cdf4:	2101      	movs	r1, #1
   1cdf6:	400a      	ands	r2, r1
   1cdf8:	00d0      	lsls	r0, r2, #3
   1cdfa:	781a      	ldrb	r2, [r3, #0]
   1cdfc:	2108      	movs	r1, #8
   1cdfe:	438a      	bics	r2, r1
   1ce00:	1c11      	adds	r1, r2, #0
   1ce02:	1c02      	adds	r2, r0, #0
   1ce04:	430a      	orrs	r2, r1
   1ce06:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   1ce08:	2314      	movs	r3, #20
   1ce0a:	18fb      	adds	r3, r7, r3
   1ce0c:	781a      	ldrb	r2, [r3, #0]
   1ce0e:	2106      	movs	r1, #6
   1ce10:	438a      	bics	r2, r1
   1ce12:	1c11      	adds	r1, r2, #0
   1ce14:	2202      	movs	r2, #2
   1ce16:	430a      	orrs	r2, r1
   1ce18:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1ce1a:	2314      	movs	r3, #20
   1ce1c:	18fb      	adds	r3, r7, r3
   1ce1e:	781a      	ldrb	r2, [r3, #0]
   1ce20:	2318      	movs	r3, #24
   1ce22:	18fb      	adds	r3, r7, r3
   1ce24:	0011      	movs	r1, r2
   1ce26:	0018      	movs	r0, r3
   1ce28:	4b23      	ldr	r3, [pc, #140]	; (1ceb8 <MQTTSerialize_subscribe+0x140>)
   1ce2a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1ce2c:	69bb      	ldr	r3, [r7, #24]
   1ce2e:	69fa      	ldr	r2, [r7, #28]
   1ce30:	0011      	movs	r1, r2
   1ce32:	0018      	movs	r0, r3
   1ce34:	4b21      	ldr	r3, [pc, #132]	; (1cebc <MQTTSerialize_subscribe+0x144>)
   1ce36:	4798      	blx	r3
   1ce38:	0002      	movs	r2, r0
   1ce3a:	69bb      	ldr	r3, [r7, #24]
   1ce3c:	189b      	adds	r3, r3, r2
   1ce3e:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   1ce40:	1d3b      	adds	r3, r7, #4
   1ce42:	881a      	ldrh	r2, [r3, #0]
   1ce44:	2318      	movs	r3, #24
   1ce46:	18fb      	adds	r3, r7, r3
   1ce48:	0011      	movs	r1, r2
   1ce4a:	0018      	movs	r0, r3
   1ce4c:	4b1c      	ldr	r3, [pc, #112]	; (1cec0 <MQTTSerialize_subscribe+0x148>)
   1ce4e:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   1ce50:	2300      	movs	r3, #0
   1ce52:	623b      	str	r3, [r7, #32]
   1ce54:	e01d      	b.n	1ce92 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   1ce56:	6a3a      	ldr	r2, [r7, #32]
   1ce58:	0013      	movs	r3, r2
   1ce5a:	005b      	lsls	r3, r3, #1
   1ce5c:	189b      	adds	r3, r3, r2
   1ce5e:	009b      	lsls	r3, r3, #2
   1ce60:	001a      	movs	r2, r3
   1ce62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ce64:	189b      	adds	r3, r3, r2
   1ce66:	2218      	movs	r2, #24
   1ce68:	18b8      	adds	r0, r7, r2
   1ce6a:	6819      	ldr	r1, [r3, #0]
   1ce6c:	685a      	ldr	r2, [r3, #4]
   1ce6e:	689b      	ldr	r3, [r3, #8]
   1ce70:	4c14      	ldr	r4, [pc, #80]	; (1cec4 <MQTTSerialize_subscribe+0x14c>)
   1ce72:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   1ce74:	6a3b      	ldr	r3, [r7, #32]
   1ce76:	009b      	lsls	r3, r3, #2
   1ce78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ce7a:	18d3      	adds	r3, r2, r3
   1ce7c:	681b      	ldr	r3, [r3, #0]
   1ce7e:	b2da      	uxtb	r2, r3
   1ce80:	2318      	movs	r3, #24
   1ce82:	18fb      	adds	r3, r7, r3
   1ce84:	0011      	movs	r1, r2
   1ce86:	0018      	movs	r0, r3
   1ce88:	4b0b      	ldr	r3, [pc, #44]	; (1ceb8 <MQTTSerialize_subscribe+0x140>)
   1ce8a:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   1ce8c:	6a3b      	ldr	r3, [r7, #32]
   1ce8e:	3301      	adds	r3, #1
   1ce90:	623b      	str	r3, [r7, #32]
   1ce92:	6a3a      	ldr	r2, [r7, #32]
   1ce94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ce96:	429a      	cmp	r2, r3
   1ce98:	dbdd      	blt.n	1ce56 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   1ce9a:	69bb      	ldr	r3, [r7, #24]
   1ce9c:	001a      	movs	r2, r3
   1ce9e:	68fb      	ldr	r3, [r7, #12]
   1cea0:	1ad3      	subs	r3, r2, r3
   1cea2:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1cea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1cea6:	0018      	movs	r0, r3
   1cea8:	46bd      	mov	sp, r7
   1ceaa:	b00b      	add	sp, #44	; 0x2c
   1ceac:	bd90      	pop	{r4, r7, pc}
   1ceae:	46c0      	nop			; (mov r8, r8)
   1ceb0:	0001cd25 	.word	0x0001cd25
   1ceb4:	0001c6e9 	.word	0x0001c6e9
   1ceb8:	0001c80b 	.word	0x0001c80b
   1cebc:	0001c5f1 	.word	0x0001c5f1
   1cec0:	0001c835 	.word	0x0001c835
   1cec4:	0001c8dd 	.word	0x0001c8dd

0001cec8 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   1cec8:	b590      	push	{r4, r7, lr}
   1ceca:	b08b      	sub	sp, #44	; 0x2c
   1cecc:	af00      	add	r7, sp, #0
   1cece:	60f8      	str	r0, [r7, #12]
   1ced0:	60b9      	str	r1, [r7, #8]
   1ced2:	607a      	str	r2, [r7, #4]
   1ced4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1ced6:	2300      	movs	r3, #0
   1ced8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1ceda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cedc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1cede:	2300      	movs	r3, #0
   1cee0:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1cee2:	2300      	movs	r3, #0
   1cee4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1cee6:	2318      	movs	r3, #24
   1cee8:	18fb      	adds	r3, r7, r3
   1ceea:	0018      	movs	r0, r3
   1ceec:	4b2c      	ldr	r3, [pc, #176]	; (1cfa0 <MQTTDeserialize_suback+0xd8>)
   1ceee:	4798      	blx	r3
   1cef0:	0003      	movs	r3, r0
   1cef2:	001a      	movs	r2, r3
   1cef4:	231c      	movs	r3, #28
   1cef6:	18fb      	adds	r3, r7, r3
   1cef8:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   1cefa:	231c      	movs	r3, #28
   1cefc:	18fb      	adds	r3, r7, r3
   1cefe:	781b      	ldrb	r3, [r3, #0]
   1cf00:	220f      	movs	r2, #15
   1cf02:	4393      	bics	r3, r2
   1cf04:	b2db      	uxtb	r3, r3
   1cf06:	2b90      	cmp	r3, #144	; 0x90
   1cf08:	d142      	bne.n	1cf90 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1cf0a:	69bb      	ldr	r3, [r7, #24]
   1cf0c:	2214      	movs	r2, #20
   1cf0e:	18ba      	adds	r2, r7, r2
   1cf10:	0011      	movs	r1, r2
   1cf12:	0018      	movs	r0, r3
   1cf14:	4b23      	ldr	r3, [pc, #140]	; (1cfa4 <MQTTDeserialize_suback+0xdc>)
   1cf16:	4798      	blx	r3
   1cf18:	0003      	movs	r3, r0
   1cf1a:	627b      	str	r3, [r7, #36]	; 0x24
   1cf1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1cf1e:	69bb      	ldr	r3, [r7, #24]
   1cf20:	189b      	adds	r3, r3, r2
   1cf22:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1cf24:	69bb      	ldr	r3, [r7, #24]
   1cf26:	697a      	ldr	r2, [r7, #20]
   1cf28:	189b      	adds	r3, r3, r2
   1cf2a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   1cf2c:	6a3b      	ldr	r3, [r7, #32]
   1cf2e:	69ba      	ldr	r2, [r7, #24]
   1cf30:	1a9b      	subs	r3, r3, r2
   1cf32:	2b01      	cmp	r3, #1
   1cf34:	dd2e      	ble.n	1cf94 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   1cf36:	2318      	movs	r3, #24
   1cf38:	18fb      	adds	r3, r7, r3
   1cf3a:	0018      	movs	r0, r3
   1cf3c:	4b1a      	ldr	r3, [pc, #104]	; (1cfa8 <MQTTDeserialize_suback+0xe0>)
   1cf3e:	4798      	blx	r3
   1cf40:	0003      	movs	r3, r0
   1cf42:	b29a      	uxth	r2, r3
   1cf44:	68fb      	ldr	r3, [r7, #12]
   1cf46:	801a      	strh	r2, [r3, #0]

	*count = 0;
   1cf48:	687b      	ldr	r3, [r7, #4]
   1cf4a:	2200      	movs	r2, #0
   1cf4c:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   1cf4e:	e018      	b.n	1cf82 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   1cf50:	687b      	ldr	r3, [r7, #4]
   1cf52:	681a      	ldr	r2, [r3, #0]
   1cf54:	68bb      	ldr	r3, [r7, #8]
   1cf56:	429a      	cmp	r2, r3
   1cf58:	dd03      	ble.n	1cf62 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   1cf5a:	2301      	movs	r3, #1
   1cf5c:	425b      	negs	r3, r3
   1cf5e:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   1cf60:	e019      	b.n	1cf96 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   1cf62:	687b      	ldr	r3, [r7, #4]
   1cf64:	681a      	ldr	r2, [r3, #0]
   1cf66:	1c51      	adds	r1, r2, #1
   1cf68:	687b      	ldr	r3, [r7, #4]
   1cf6a:	6019      	str	r1, [r3, #0]
   1cf6c:	0013      	movs	r3, r2
   1cf6e:	009b      	lsls	r3, r3, #2
   1cf70:	683a      	ldr	r2, [r7, #0]
   1cf72:	18d4      	adds	r4, r2, r3
   1cf74:	2318      	movs	r3, #24
   1cf76:	18fb      	adds	r3, r7, r3
   1cf78:	0018      	movs	r0, r3
   1cf7a:	4b09      	ldr	r3, [pc, #36]	; (1cfa0 <MQTTDeserialize_suback+0xd8>)
   1cf7c:	4798      	blx	r3
   1cf7e:	0003      	movs	r3, r0
   1cf80:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   1cf82:	69ba      	ldr	r2, [r7, #24]
   1cf84:	6a3b      	ldr	r3, [r7, #32]
   1cf86:	429a      	cmp	r2, r3
   1cf88:	d3e2      	bcc.n	1cf50 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   1cf8a:	2301      	movs	r3, #1
   1cf8c:	627b      	str	r3, [r7, #36]	; 0x24
   1cf8e:	e002      	b.n	1cf96 <MQTTDeserialize_suback+0xce>
		goto exit;
   1cf90:	46c0      	nop			; (mov r8, r8)
   1cf92:	e000      	b.n	1cf96 <MQTTDeserialize_suback+0xce>
		goto exit;
   1cf94:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1cf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1cf98:	0018      	movs	r0, r3
   1cf9a:	46bd      	mov	sp, r7
   1cf9c:	b00b      	add	sp, #44	; 0x2c
   1cf9e:	bd90      	pop	{r4, r7, pc}
   1cfa0:	0001c7df 	.word	0x0001c7df
   1cfa4:	0001c779 	.word	0x0001c779
   1cfa8:	0001c7ad 	.word	0x0001c7ad

0001cfac <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   1cfac:	b580      	push	{r7, lr}
   1cfae:	b082      	sub	sp, #8
   1cfb0:	af00      	add	r7, sp, #0
   1cfb2:	6078      	str	r0, [r7, #4]
	config->port = 80;
   1cfb4:	687b      	ldr	r3, [r7, #4]
   1cfb6:	2250      	movs	r2, #80	; 0x50
   1cfb8:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   1cfba:	687b      	ldr	r3, [r7, #4]
   1cfbc:	2200      	movs	r2, #0
   1cfbe:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   1cfc0:	687b      	ldr	r3, [r7, #4]
   1cfc2:	4a0b      	ldr	r2, [pc, #44]	; (1cff0 <http_client_get_config_defaults+0x44>)
   1cfc4:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   1cfc6:	687b      	ldr	r3, [r7, #4]
   1cfc8:	2200      	movs	r2, #0
   1cfca:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   1cfcc:	687b      	ldr	r3, [r7, #4]
   1cfce:	2200      	movs	r2, #0
   1cfd0:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   1cfd2:	687b      	ldr	r3, [r7, #4]
   1cfd4:	2280      	movs	r2, #128	; 0x80
   1cfd6:	0052      	lsls	r2, r2, #1
   1cfd8:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   1cfda:	687b      	ldr	r3, [r7, #4]
   1cfdc:	2252      	movs	r2, #82	; 0x52
   1cfde:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   1cfe0:	687b      	ldr	r3, [r7, #4]
   1cfe2:	4a04      	ldr	r2, [pc, #16]	; (1cff4 <http_client_get_config_defaults+0x48>)
   1cfe4:	619a      	str	r2, [r3, #24]
}
   1cfe6:	46c0      	nop			; (mov r8, r8)
   1cfe8:	46bd      	mov	sp, r7
   1cfea:	b002      	add	sp, #8
   1cfec:	bd80      	pop	{r7, pc}
   1cfee:	46c0      	nop			; (mov r8, r8)
   1cff0:	00004e20 	.word	0x00004e20
   1cff4:	00026bf4 	.word	0x00026bf4

0001cff8 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   1cff8:	b590      	push	{r4, r7, lr}
   1cffa:	b083      	sub	sp, #12
   1cffc:	af00      	add	r7, sp, #0
   1cffe:	6078      	str	r0, [r7, #4]
   1d000:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   1d002:	687b      	ldr	r3, [r7, #4]
   1d004:	2b00      	cmp	r3, #0
   1d006:	d002      	beq.n	1d00e <http_client_init+0x16>
   1d008:	683b      	ldr	r3, [r7, #0]
   1d00a:	2b00      	cmp	r3, #0
   1d00c:	d102      	bne.n	1d014 <http_client_init+0x1c>
		return -EINVAL;
   1d00e:	2316      	movs	r3, #22
   1d010:	425b      	negs	r3, r3
   1d012:	e058      	b.n	1d0c6 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   1d014:	683b      	ldr	r3, [r7, #0]
   1d016:	691b      	ldr	r3, [r3, #16]
   1d018:	2b00      	cmp	r3, #0
   1d01a:	d102      	bne.n	1d022 <http_client_init+0x2a>
		return -EINVAL;
   1d01c:	2316      	movs	r3, #22
   1d01e:	425b      	negs	r3, r3
   1d020:	e051      	b.n	1d0c6 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   1d022:	683b      	ldr	r3, [r7, #0]
   1d024:	685b      	ldr	r3, [r3, #4]
   1d026:	2b00      	cmp	r3, #0
   1d028:	d102      	bne.n	1d030 <http_client_init+0x38>
		return -EINVAL;
   1d02a:	2316      	movs	r3, #22
   1d02c:	425b      	negs	r3, r3
   1d02e:	e04a      	b.n	1d0c6 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   1d030:	683b      	ldr	r3, [r7, #0]
   1d032:	695b      	ldr	r3, [r3, #20]
   1d034:	2b51      	cmp	r3, #81	; 0x51
   1d036:	d802      	bhi.n	1d03e <http_client_init+0x46>
		return -EINVAL;
   1d038:	2316      	movs	r3, #22
   1d03a:	425b      	negs	r3, r3
   1d03c:	e043      	b.n	1d0c6 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   1d03e:	687b      	ldr	r3, [r7, #4]
   1d040:	22e8      	movs	r2, #232	; 0xe8
   1d042:	2100      	movs	r1, #0
   1d044:	0018      	movs	r0, r3
   1d046:	4b22      	ldr	r3, [pc, #136]	; (1d0d0 <http_client_init+0xd8>)
   1d048:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   1d04a:	687b      	ldr	r3, [r7, #4]
   1d04c:	3350      	adds	r3, #80	; 0x50
   1d04e:	6839      	ldr	r1, [r7, #0]
   1d050:	221c      	movs	r2, #28
   1d052:	0018      	movs	r0, r3
   1d054:	4b1f      	ldr	r3, [pc, #124]	; (1d0d4 <http_client_init+0xdc>)
   1d056:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   1d058:	687b      	ldr	r3, [r7, #4]
   1d05a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1d05c:	2b00      	cmp	r3, #0
   1d05e:	d115      	bne.n	1d08c <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   1d060:	683b      	ldr	r3, [r7, #0]
   1d062:	691b      	ldr	r3, [r3, #16]
   1d064:	0018      	movs	r0, r3
   1d066:	4b1c      	ldr	r3, [pc, #112]	; (1d0d8 <http_client_init+0xe0>)
   1d068:	4798      	blx	r3
   1d06a:	0003      	movs	r3, r0
   1d06c:	001a      	movs	r2, r3
   1d06e:	687b      	ldr	r3, [r7, #4]
   1d070:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   1d072:	687b      	ldr	r3, [r7, #4]
   1d074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1d076:	2b00      	cmp	r3, #0
   1d078:	d102      	bne.n	1d080 <http_client_init+0x88>
			return -ENOMEM;
   1d07a:	230c      	movs	r3, #12
   1d07c:	425b      	negs	r3, r3
   1d07e:	e022      	b.n	1d0c6 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   1d080:	687b      	ldr	r3, [r7, #4]
   1d082:	2241      	movs	r2, #65	; 0x41
   1d084:	5c99      	ldrb	r1, [r3, r2]
   1d086:	2004      	movs	r0, #4
   1d088:	4301      	orrs	r1, r0
   1d08a:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   1d08c:	683b      	ldr	r3, [r7, #0]
   1d08e:	891b      	ldrh	r3, [r3, #8]
   1d090:	2b00      	cmp	r3, #0
   1d092:	d010      	beq.n	1d0b6 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   1d094:	683b      	ldr	r3, [r7, #0]
   1d096:	6858      	ldr	r0, [r3, #4]
   1d098:	687a      	ldr	r2, [r7, #4]
   1d09a:	4910      	ldr	r1, [pc, #64]	; (1d0dc <http_client_init+0xe4>)
   1d09c:	2300      	movs	r3, #0
   1d09e:	4c10      	ldr	r4, [pc, #64]	; (1d0e0 <http_client_init+0xe8>)
   1d0a0:	47a0      	blx	r4
   1d0a2:	0002      	movs	r2, r0
   1d0a4:	687b      	ldr	r3, [r7, #4]
   1d0a6:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   1d0a8:	687b      	ldr	r3, [r7, #4]
   1d0aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d0ac:	2b00      	cmp	r3, #0
   1d0ae:	da02      	bge.n	1d0b6 <http_client_init+0xbe>
			return -ENOSPC;
   1d0b0:	231c      	movs	r3, #28
   1d0b2:	425b      	negs	r3, r3
   1d0b4:	e007      	b.n	1d0c6 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   1d0b6:	687b      	ldr	r3, [r7, #4]
   1d0b8:	2200      	movs	r2, #0
   1d0ba:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1d0bc:	687b      	ldr	r3, [r7, #4]
   1d0be:	22d8      	movs	r2, #216	; 0xd8
   1d0c0:	2100      	movs	r1, #0
   1d0c2:	5099      	str	r1, [r3, r2]

	return 0;
   1d0c4:	2300      	movs	r3, #0
}
   1d0c6:	0018      	movs	r0, r3
   1d0c8:	46bd      	mov	sp, r7
   1d0ca:	b003      	add	sp, #12
   1d0cc:	bd90      	pop	{r4, r7, pc}
   1d0ce:	46c0      	nop			; (mov r8, r8)
   1d0d0:	00020d8b 	.word	0x00020d8b
   1d0d4:	00020d55 	.word	0x00020d55
   1d0d8:	00020d2d 	.word	0x00020d2d
   1d0dc:	0001d3a9 	.word	0x0001d3a9
   1d0e0:	0001ea4d 	.word	0x0001ea4d

0001d0e4 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   1d0e4:	b580      	push	{r7, lr}
   1d0e6:	b082      	sub	sp, #8
   1d0e8:	af00      	add	r7, sp, #0
   1d0ea:	6078      	str	r0, [r7, #4]
   1d0ec:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   1d0ee:	687b      	ldr	r3, [r7, #4]
   1d0f0:	2b00      	cmp	r3, #0
   1d0f2:	d102      	bne.n	1d0fa <http_client_register_callback+0x16>
		return -EINVAL;
   1d0f4:	2316      	movs	r3, #22
   1d0f6:	425b      	negs	r3, r3
   1d0f8:	e003      	b.n	1d102 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   1d0fa:	687b      	ldr	r3, [r7, #4]
   1d0fc:	683a      	ldr	r2, [r7, #0]
   1d0fe:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   1d100:	2300      	movs	r3, #0
}
   1d102:	0018      	movs	r0, r3
   1d104:	46bd      	mov	sp, r7
   1d106:	b002      	add	sp, #8
   1d108:	bd80      	pop	{r7, pc}
	...

0001d10c <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   1d10c:	b580      	push	{r7, lr}
   1d10e:	b082      	sub	sp, #8
   1d110:	af00      	add	r7, sp, #0
   1d112:	6078      	str	r0, [r7, #4]
	switch (err) {
   1d114:	687b      	ldr	r3, [r7, #4]
   1d116:	330e      	adds	r3, #14
   1d118:	2b0e      	cmp	r3, #14
   1d11a:	d825      	bhi.n	1d168 <_hwerr_to_stderr+0x5c>
   1d11c:	009a      	lsls	r2, r3, #2
   1d11e:	4b18      	ldr	r3, [pc, #96]	; (1d180 <_hwerr_to_stderr+0x74>)
   1d120:	18d3      	adds	r3, r2, r3
   1d122:	681b      	ldr	r3, [r3, #0]
   1d124:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   1d126:	2305      	movs	r3, #5
   1d128:	425b      	negs	r3, r3
   1d12a:	e024      	b.n	1d176 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   1d12c:	2302      	movs	r3, #2
   1d12e:	425b      	negs	r3, r3
   1d130:	e021      	b.n	1d176 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   1d132:	2370      	movs	r3, #112	; 0x70
   1d134:	425b      	negs	r3, r3
   1d136:	e01e      	b.n	1d176 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   1d138:	230c      	movs	r3, #12
   1d13a:	425b      	negs	r3, r3
   1d13c:	e01b      	b.n	1d176 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   1d13e:	2316      	movs	r3, #22
   1d140:	425b      	negs	r3, r3
   1d142:	e018      	b.n	1d176 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   1d144:	230c      	movs	r3, #12
   1d146:	425b      	negs	r3, r3
   1d148:	e015      	b.n	1d176 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   1d14a:	2305      	movs	r3, #5
   1d14c:	425b      	negs	r3, r3
   1d14e:	e012      	b.n	1d176 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   1d150:	2379      	movs	r3, #121	; 0x79
   1d152:	425b      	negs	r3, r3
   1d154:	e00f      	b.n	1d176 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   1d156:	2368      	movs	r3, #104	; 0x68
   1d158:	425b      	negs	r3, r3
   1d15a:	e00c      	b.n	1d176 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   1d15c:	230b      	movs	r3, #11
   1d15e:	425b      	negs	r3, r3
   1d160:	e009      	b.n	1d176 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   1d162:	2310      	movs	r3, #16
   1d164:	425b      	negs	r3, r3
   1d166:	e006      	b.n	1d176 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   1d168:	687b      	ldr	r3, [r7, #4]
   1d16a:	2b00      	cmp	r3, #0
   1d16c:	da02      	bge.n	1d174 <_hwerr_to_stderr+0x68>
				return -EIO;
   1d16e:	2305      	movs	r3, #5
   1d170:	425b      	negs	r3, r3
   1d172:	e000      	b.n	1d176 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   1d174:	2300      	movs	r3, #0
	}
}
   1d176:	0018      	movs	r0, r3
   1d178:	46bd      	mov	sp, r7
   1d17a:	b002      	add	sp, #8
   1d17c:	bd80      	pop	{r7, pc}
   1d17e:	46c0      	nop			; (mov r8, r8)
   1d180:	00026d30 	.word	0x00026d30

0001d184 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   1d184:	b580      	push	{r7, lr}
   1d186:	b08a      	sub	sp, #40	; 0x28
   1d188:	af00      	add	r7, sp, #0
   1d18a:	603a      	str	r2, [r7, #0]
   1d18c:	1dfb      	adds	r3, r7, #7
   1d18e:	1c02      	adds	r2, r0, #0
   1d190:	701a      	strb	r2, [r3, #0]
   1d192:	1dbb      	adds	r3, r7, #6
   1d194:	1c0a      	adds	r2, r1, #0
   1d196:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   1d198:	1dfb      	adds	r3, r7, #7
   1d19a:	2200      	movs	r2, #0
   1d19c:	569a      	ldrsb	r2, [r3, r2]
   1d19e:	4b4b      	ldr	r3, [pc, #300]	; (1d2cc <http_client_socket_event_handler+0x148>)
   1d1a0:	0092      	lsls	r2, r2, #2
   1d1a2:	58d3      	ldr	r3, [r2, r3]
   1d1a4:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   1d1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d1a8:	2b00      	cmp	r3, #0
   1d1aa:	d100      	bne.n	1d1ae <http_client_socket_event_handler+0x2a>
   1d1ac:	e08a      	b.n	1d2c4 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   1d1ae:	1dbb      	adds	r3, r7, #6
   1d1b0:	781b      	ldrb	r3, [r3, #0]
   1d1b2:	2b06      	cmp	r3, #6
   1d1b4:	d040      	beq.n	1d238 <http_client_socket_event_handler+0xb4>
   1d1b6:	2b07      	cmp	r3, #7
   1d1b8:	d060      	beq.n	1d27c <http_client_socket_event_handler+0xf8>
   1d1ba:	2b05      	cmp	r3, #5
   1d1bc:	d000      	beq.n	1d1c0 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   1d1be:	e082      	b.n	1d2c6 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   1d1c0:	683b      	ldr	r3, [r7, #0]
   1d1c2:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   1d1c4:	6a3b      	ldr	r3, [r7, #32]
   1d1c6:	785b      	ldrb	r3, [r3, #1]
   1d1c8:	b25b      	sxtb	r3, r3
   1d1ca:	001a      	movs	r2, r3
   1d1cc:	230c      	movs	r3, #12
   1d1ce:	18fb      	adds	r3, r7, r3
   1d1d0:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   1d1d2:	6a3b      	ldr	r3, [r7, #32]
   1d1d4:	785b      	ldrb	r3, [r3, #1]
   1d1d6:	b25b      	sxtb	r3, r3
   1d1d8:	2b00      	cmp	r3, #0
   1d1da:	da0c      	bge.n	1d1f6 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   1d1dc:	6a3b      	ldr	r3, [r7, #32]
   1d1de:	785b      	ldrb	r3, [r3, #1]
   1d1e0:	b25b      	sxtb	r3, r3
   1d1e2:	0018      	movs	r0, r3
   1d1e4:	4b3a      	ldr	r3, [pc, #232]	; (1d2d0 <http_client_socket_event_handler+0x14c>)
   1d1e6:	4798      	blx	r3
   1d1e8:	0002      	movs	r2, r0
   1d1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d1ec:	0011      	movs	r1, r2
   1d1ee:	0018      	movs	r0, r3
   1d1f0:	4b38      	ldr	r3, [pc, #224]	; (1d2d4 <http_client_socket_event_handler+0x150>)
   1d1f2:	4798      	blx	r3
    	break;
   1d1f4:	e067      	b.n	1d2c6 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   1d1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d1f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d1fa:	2b00      	cmp	r3, #0
   1d1fc:	d006      	beq.n	1d20c <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   1d1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d202:	220c      	movs	r2, #12
   1d204:	18ba      	adds	r2, r7, r2
   1d206:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1d208:	2100      	movs	r1, #0
   1d20a:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   1d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d20e:	2203      	movs	r2, #3
   1d210:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   1d212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d214:	6d58      	ldr	r0, [r3, #84]	; 0x54
   1d216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d218:	6c99      	ldr	r1, [r3, #72]	; 0x48
   1d21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d21c:	2258      	movs	r2, #88	; 0x58
   1d21e:	5a9b      	ldrh	r3, [r3, r2]
   1d220:	001a      	movs	r2, r3
   1d222:	4b2d      	ldr	r3, [pc, #180]	; (1d2d8 <http_client_socket_event_handler+0x154>)
   1d224:	4798      	blx	r3
    		_http_client_recv_packet(module);
   1d226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d228:	0018      	movs	r0, r3
   1d22a:	4b2c      	ldr	r3, [pc, #176]	; (1d2dc <http_client_socket_event_handler+0x158>)
   1d22c:	4798      	blx	r3
			_http_client_request(module);
   1d22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d230:	0018      	movs	r0, r3
   1d232:	4b2b      	ldr	r3, [pc, #172]	; (1d2e0 <http_client_socket_event_handler+0x15c>)
   1d234:	4798      	blx	r3
    	break;
   1d236:	e046      	b.n	1d2c6 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   1d238:	683b      	ldr	r3, [r7, #0]
   1d23a:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   1d23c:	69fb      	ldr	r3, [r7, #28]
   1d23e:	2204      	movs	r2, #4
   1d240:	5e9b      	ldrsh	r3, [r3, r2]
   1d242:	2b00      	cmp	r3, #0
   1d244:	dd09      	ble.n	1d25a <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   1d246:	69fb      	ldr	r3, [r7, #28]
   1d248:	2204      	movs	r2, #4
   1d24a:	5e9b      	ldrsh	r3, [r3, r2]
   1d24c:	001a      	movs	r2, r3
   1d24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d250:	0011      	movs	r1, r2
   1d252:	0018      	movs	r0, r3
   1d254:	4b23      	ldr	r3, [pc, #140]	; (1d2e4 <http_client_socket_event_handler+0x160>)
   1d256:	4798      	blx	r3
   1d258:	e00b      	b.n	1d272 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   1d25a:	69fb      	ldr	r3, [r7, #28]
   1d25c:	2204      	movs	r2, #4
   1d25e:	5e9b      	ldrsh	r3, [r3, r2]
   1d260:	0018      	movs	r0, r3
   1d262:	4b1b      	ldr	r3, [pc, #108]	; (1d2d0 <http_client_socket_event_handler+0x14c>)
   1d264:	4798      	blx	r3
   1d266:	0002      	movs	r2, r0
   1d268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d26a:	0011      	movs	r1, r2
   1d26c:	0018      	movs	r0, r3
   1d26e:	4b19      	ldr	r3, [pc, #100]	; (1d2d4 <http_client_socket_event_handler+0x150>)
   1d270:	4798      	blx	r3
		_http_client_recv_packet(module);
   1d272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d274:	0018      	movs	r0, r3
   1d276:	4b19      	ldr	r3, [pc, #100]	; (1d2dc <http_client_socket_event_handler+0x158>)
   1d278:	4798      	blx	r3
		break;
   1d27a:	e024      	b.n	1d2c6 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   1d27c:	231a      	movs	r3, #26
   1d27e:	18fb      	adds	r3, r7, r3
   1d280:	683a      	ldr	r2, [r7, #0]
   1d282:	8812      	ldrh	r2, [r2, #0]
   1d284:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   1d286:	231a      	movs	r3, #26
   1d288:	18fb      	adds	r3, r7, r3
   1d28a:	2200      	movs	r2, #0
   1d28c:	5e9b      	ldrsh	r3, [r3, r2]
   1d28e:	2b00      	cmp	r3, #0
   1d290:	da0d      	bge.n	1d2ae <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   1d292:	231a      	movs	r3, #26
   1d294:	18fb      	adds	r3, r7, r3
   1d296:	2200      	movs	r2, #0
   1d298:	5e9b      	ldrsh	r3, [r3, r2]
   1d29a:	0018      	movs	r0, r3
   1d29c:	4b0c      	ldr	r3, [pc, #48]	; (1d2d0 <http_client_socket_event_handler+0x14c>)
   1d29e:	4798      	blx	r3
   1d2a0:	0002      	movs	r2, r0
   1d2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d2a4:	0011      	movs	r1, r2
   1d2a6:	0018      	movs	r0, r3
   1d2a8:	4b0a      	ldr	r3, [pc, #40]	; (1d2d4 <http_client_socket_event_handler+0x150>)
   1d2aa:	4798      	blx	r3
   1d2ac:	e003      	b.n	1d2b6 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   1d2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d2b0:	0018      	movs	r0, r3
   1d2b2:	4b0b      	ldr	r3, [pc, #44]	; (1d2e0 <http_client_socket_event_handler+0x15c>)
   1d2b4:	4798      	blx	r3
		module->sending = 0;
   1d2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d2b8:	2241      	movs	r2, #65	; 0x41
   1d2ba:	5c99      	ldrb	r1, [r3, r2]
   1d2bc:	2001      	movs	r0, #1
   1d2be:	4381      	bics	r1, r0
   1d2c0:	5499      	strb	r1, [r3, r2]
    	break;
   1d2c2:	e000      	b.n	1d2c6 <http_client_socket_event_handler+0x142>
		return;
   1d2c4:	46c0      	nop			; (mov r8, r8)
	}

}
   1d2c6:	46bd      	mov	sp, r7
   1d2c8:	b00a      	add	sp, #40	; 0x28
   1d2ca:	bd80      	pop	{r7, pc}
   1d2cc:	2000456c 	.word	0x2000456c
   1d2d0:	0001d10d 	.word	0x0001d10d
   1d2d4:	0001d781 	.word	0x0001d781
   1d2d8:	0001eadd 	.word	0x0001eadd
   1d2dc:	0001e00d 	.word	0x0001e00d
   1d2e0:	0001d8d5 	.word	0x0001d8d5
   1d2e4:	0001e071 	.word	0x0001e071

0001d2e8 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   1d2e8:	b580      	push	{r7, lr}
   1d2ea:	b088      	sub	sp, #32
   1d2ec:	af00      	add	r7, sp, #0
   1d2ee:	6078      	str	r0, [r7, #4]
   1d2f0:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   1d2f2:	2300      	movs	r3, #0
   1d2f4:	61fb      	str	r3, [r7, #28]
   1d2f6:	e048      	b.n	1d38a <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   1d2f8:	4b27      	ldr	r3, [pc, #156]	; (1d398 <http_client_socket_resolve_handler+0xb0>)
   1d2fa:	69fa      	ldr	r2, [r7, #28]
   1d2fc:	0092      	lsls	r2, r2, #2
   1d2fe:	58d3      	ldr	r3, [r2, r3]
   1d300:	2b00      	cmp	r3, #0
   1d302:	d03f      	beq.n	1d384 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   1d304:	4b24      	ldr	r3, [pc, #144]	; (1d398 <http_client_socket_resolve_handler+0xb0>)
   1d306:	69fa      	ldr	r2, [r7, #28]
   1d308:	0092      	lsls	r2, r2, #2
   1d30a:	58d3      	ldr	r3, [r2, r3]
   1d30c:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   1d30e:	69bb      	ldr	r3, [r7, #24]
   1d310:	1c5a      	adds	r2, r3, #1
   1d312:	687b      	ldr	r3, [r7, #4]
   1d314:	0011      	movs	r1, r2
   1d316:	0018      	movs	r0, r3
   1d318:	4b20      	ldr	r3, [pc, #128]	; (1d39c <http_client_socket_resolve_handler+0xb4>)
   1d31a:	4798      	blx	r3
   1d31c:	1e03      	subs	r3, r0, #0
   1d31e:	d131      	bne.n	1d384 <http_client_socket_resolve_handler+0x9c>
   1d320:	69bb      	ldr	r3, [r7, #24]
   1d322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1d324:	2b01      	cmp	r3, #1
   1d326:	d12d      	bne.n	1d384 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   1d328:	683b      	ldr	r3, [r7, #0]
   1d32a:	2b00      	cmp	r3, #0
   1d32c:	d107      	bne.n	1d33e <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   1d32e:	2376      	movs	r3, #118	; 0x76
   1d330:	425a      	negs	r2, r3
   1d332:	69bb      	ldr	r3, [r7, #24]
   1d334:	0011      	movs	r1, r2
   1d336:	0018      	movs	r0, r3
   1d338:	4b19      	ldr	r3, [pc, #100]	; (1d3a0 <http_client_socket_resolve_handler+0xb8>)
   1d33a:	4798      	blx	r3
					return;
   1d33c:	e028      	b.n	1d390 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   1d33e:	2308      	movs	r3, #8
   1d340:	18fb      	adds	r3, r7, r3
   1d342:	2202      	movs	r2, #2
   1d344:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   1d346:	69bb      	ldr	r3, [r7, #24]
   1d348:	2250      	movs	r2, #80	; 0x50
   1d34a:	5a9b      	ldrh	r3, [r3, r2]
   1d34c:	021b      	lsls	r3, r3, #8
   1d34e:	b21a      	sxth	r2, r3
   1d350:	69bb      	ldr	r3, [r7, #24]
   1d352:	2150      	movs	r1, #80	; 0x50
   1d354:	5a5b      	ldrh	r3, [r3, r1]
   1d356:	0a1b      	lsrs	r3, r3, #8
   1d358:	b29b      	uxth	r3, r3
   1d35a:	b21b      	sxth	r3, r3
   1d35c:	4313      	orrs	r3, r2
   1d35e:	b21b      	sxth	r3, r3
   1d360:	b29a      	uxth	r2, r3
   1d362:	2308      	movs	r3, #8
   1d364:	18fb      	adds	r3, r7, r3
   1d366:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   1d368:	2308      	movs	r3, #8
   1d36a:	18fb      	adds	r3, r7, r3
   1d36c:	683a      	ldr	r2, [r7, #0]
   1d36e:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1d370:	69bb      	ldr	r3, [r7, #24]
   1d372:	781b      	ldrb	r3, [r3, #0]
   1d374:	b25b      	sxtb	r3, r3
   1d376:	2208      	movs	r2, #8
   1d378:	18b9      	adds	r1, r7, r2
   1d37a:	2210      	movs	r2, #16
   1d37c:	0018      	movs	r0, r3
   1d37e:	4b09      	ldr	r3, [pc, #36]	; (1d3a4 <http_client_socket_resolve_handler+0xbc>)
   1d380:	4798      	blx	r3
				return;
   1d382:	e005      	b.n	1d390 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   1d384:	69fb      	ldr	r3, [r7, #28]
   1d386:	3301      	adds	r3, #1
   1d388:	61fb      	str	r3, [r7, #28]
   1d38a:	69fb      	ldr	r3, [r7, #28]
   1d38c:	2b06      	cmp	r3, #6
   1d38e:	ddb3      	ble.n	1d2f8 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   1d390:	46bd      	mov	sp, r7
   1d392:	b008      	add	sp, #32
   1d394:	bd80      	pop	{r7, pc}
   1d396:	46c0      	nop			; (mov r8, r8)
   1d398:	2000456c 	.word	0x2000456c
   1d39c:	000210e3 	.word	0x000210e3
   1d3a0:	0001d781 	.word	0x0001d781
   1d3a4:	00011ca5 	.word	0x00011ca5

0001d3a8 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   1d3a8:	b580      	push	{r7, lr}
   1d3aa:	b086      	sub	sp, #24
   1d3ac:	af00      	add	r7, sp, #0
   1d3ae:	60f8      	str	r0, [r7, #12]
   1d3b0:	60b9      	str	r1, [r7, #8]
   1d3b2:	607a      	str	r2, [r7, #4]
   1d3b4:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   1d3b6:	687b      	ldr	r3, [r7, #4]
   1d3b8:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   1d3ba:	697b      	ldr	r3, [r7, #20]
   1d3bc:	2b00      	cmp	r3, #0
   1d3be:	d007      	beq.n	1d3d0 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   1d3c0:	233e      	movs	r3, #62	; 0x3e
   1d3c2:	425a      	negs	r2, r3
   1d3c4:	697b      	ldr	r3, [r7, #20]
   1d3c6:	0011      	movs	r1, r2
   1d3c8:	0018      	movs	r0, r3
   1d3ca:	4b03      	ldr	r3, [pc, #12]	; (1d3d8 <http_client_timer_callback+0x30>)
   1d3cc:	4798      	blx	r3
   1d3ce:	e000      	b.n	1d3d2 <http_client_timer_callback+0x2a>
		return;
   1d3d0:	46c0      	nop			; (mov r8, r8)
}
   1d3d2:	46bd      	mov	sp, r7
   1d3d4:	b006      	add	sp, #24
   1d3d6:	bd80      	pop	{r7, pc}
   1d3d8:	0001d781 	.word	0x0001d781

0001d3dc <_is_ip>:

static int _is_ip(const char *host)
{
   1d3dc:	b580      	push	{r7, lr}
   1d3de:	b084      	sub	sp, #16
   1d3e0:	af00      	add	r7, sp, #0
   1d3e2:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   1d3e4:	2300      	movs	r3, #0
   1d3e6:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   1d3e8:	e03a      	b.n	1d460 <_is_ip+0x84>
		ch = *host++;
   1d3ea:	687b      	ldr	r3, [r7, #4]
   1d3ec:	1c5a      	adds	r2, r3, #1
   1d3ee:	607a      	str	r2, [r7, #4]
   1d3f0:	220b      	movs	r2, #11
   1d3f2:	18ba      	adds	r2, r7, r2
   1d3f4:	781b      	ldrb	r3, [r3, #0]
   1d3f6:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   1d3f8:	230b      	movs	r3, #11
   1d3fa:	18fb      	adds	r3, r7, r3
   1d3fc:	781b      	ldrb	r3, [r3, #0]
   1d3fe:	2b60      	cmp	r3, #96	; 0x60
   1d400:	d904      	bls.n	1d40c <_is_ip+0x30>
   1d402:	230b      	movs	r3, #11
   1d404:	18fb      	adds	r3, r7, r3
   1d406:	781b      	ldrb	r3, [r3, #0]
   1d408:	2b66      	cmp	r3, #102	; 0x66
   1d40a:	d913      	bls.n	1d434 <_is_ip+0x58>
   1d40c:	230b      	movs	r3, #11
   1d40e:	18fb      	adds	r3, r7, r3
   1d410:	781b      	ldrb	r3, [r3, #0]
   1d412:	2b40      	cmp	r3, #64	; 0x40
   1d414:	d904      	bls.n	1d420 <_is_ip+0x44>
   1d416:	230b      	movs	r3, #11
   1d418:	18fb      	adds	r3, r7, r3
   1d41a:	781b      	ldrb	r3, [r3, #0]
   1d41c:	2b46      	cmp	r3, #70	; 0x46
   1d41e:	d909      	bls.n	1d434 <_is_ip+0x58>
   1d420:	230b      	movs	r3, #11
   1d422:	18fb      	adds	r3, r7, r3
   1d424:	781b      	ldrb	r3, [r3, #0]
   1d426:	2b3a      	cmp	r3, #58	; 0x3a
   1d428:	d004      	beq.n	1d434 <_is_ip+0x58>
   1d42a:	230b      	movs	r3, #11
   1d42c:	18fb      	adds	r3, r7, r3
   1d42e:	781b      	ldrb	r3, [r3, #0]
   1d430:	2b2f      	cmp	r3, #47	; 0x2f
   1d432:	d102      	bne.n	1d43a <_is_ip+0x5e>
			isv6 = 1;
   1d434:	2301      	movs	r3, #1
   1d436:	60fb      	str	r3, [r7, #12]
   1d438:	e012      	b.n	1d460 <_is_ip+0x84>
		} else if (ch == '.') {
   1d43a:	230b      	movs	r3, #11
   1d43c:	18fb      	adds	r3, r7, r3
   1d43e:	781b      	ldrb	r3, [r3, #0]
   1d440:	2b2e      	cmp	r3, #46	; 0x2e
   1d442:	d104      	bne.n	1d44e <_is_ip+0x72>
			if (isv6) {
   1d444:	68fb      	ldr	r3, [r7, #12]
   1d446:	2b00      	cmp	r3, #0
   1d448:	d00a      	beq.n	1d460 <_is_ip+0x84>
				return 0;
   1d44a:	2300      	movs	r3, #0
   1d44c:	e00d      	b.n	1d46a <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   1d44e:	230b      	movs	r3, #11
   1d450:	18fb      	adds	r3, r7, r3
   1d452:	781b      	ldrb	r3, [r3, #0]
   1d454:	2230      	movs	r2, #48	; 0x30
   1d456:	4013      	ands	r3, r2
   1d458:	2b30      	cmp	r3, #48	; 0x30
   1d45a:	d001      	beq.n	1d460 <_is_ip+0x84>
			return 0;
   1d45c:	2300      	movs	r3, #0
   1d45e:	e004      	b.n	1d46a <_is_ip+0x8e>
	while (*host != '\0') {
   1d460:	687b      	ldr	r3, [r7, #4]
   1d462:	781b      	ldrb	r3, [r3, #0]
   1d464:	2b00      	cmp	r3, #0
   1d466:	d1c0      	bne.n	1d3ea <_is_ip+0xe>
		}
	}
	return 1;
   1d468:	2301      	movs	r3, #1
}
   1d46a:	0018      	movs	r0, r3
   1d46c:	46bd      	mov	sp, r7
   1d46e:	b004      	add	sp, #16
   1d470:	bd80      	pop	{r7, pc}
	...

0001d474 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   1d474:	b5b0      	push	{r4, r5, r7, lr}
   1d476:	b08e      	sub	sp, #56	; 0x38
   1d478:	af00      	add	r7, sp, #0
   1d47a:	60f8      	str	r0, [r7, #12]
   1d47c:	60b9      	str	r1, [r7, #8]
   1d47e:	603b      	str	r3, [r7, #0]
   1d480:	1dfb      	adds	r3, r7, #7
   1d482:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   1d484:	2337      	movs	r3, #55	; 0x37
   1d486:	18fb      	adds	r3, r7, r3
   1d488:	2200      	movs	r2, #0
   1d48a:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   1d48c:	2300      	movs	r3, #0
   1d48e:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   1d490:	2300      	movs	r3, #0
   1d492:	633b      	str	r3, [r7, #48]	; 0x30
   1d494:	2300      	movs	r3, #0
   1d496:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d498:	2300      	movs	r3, #0
   1d49a:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   1d49c:	68fb      	ldr	r3, [r7, #12]
   1d49e:	2b00      	cmp	r3, #0
   1d4a0:	d102      	bne.n	1d4a8 <http_client_send_request+0x34>
		return -EINVAL;
   1d4a2:	2316      	movs	r3, #22
   1d4a4:	425b      	negs	r3, r3
   1d4a6:	e145      	b.n	1d734 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   1d4a8:	68fb      	ldr	r3, [r7, #12]
   1d4aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1d4ac:	2b02      	cmp	r3, #2
   1d4ae:	d902      	bls.n	1d4b6 <http_client_send_request+0x42>
		return -EBUSY;
   1d4b0:	2310      	movs	r3, #16
   1d4b2:	425b      	negs	r3, r3
   1d4b4:	e13e      	b.n	1d734 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   1d4b6:	49a1      	ldr	r1, [pc, #644]	; (1d73c <http_client_send_request+0x2c8>)
   1d4b8:	68bb      	ldr	r3, [r7, #8]
   1d4ba:	2207      	movs	r2, #7
   1d4bc:	0018      	movs	r0, r3
   1d4be:	4ba0      	ldr	r3, [pc, #640]	; (1d740 <http_client_send_request+0x2cc>)
   1d4c0:	4798      	blx	r3
   1d4c2:	1e03      	subs	r3, r0, #0
   1d4c4:	d102      	bne.n	1d4cc <http_client_send_request+0x58>
		i = 7;
   1d4c6:	2307      	movs	r3, #7
   1d4c8:	633b      	str	r3, [r7, #48]	; 0x30
   1d4ca:	e009      	b.n	1d4e0 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   1d4cc:	499d      	ldr	r1, [pc, #628]	; (1d744 <http_client_send_request+0x2d0>)
   1d4ce:	68bb      	ldr	r3, [r7, #8]
   1d4d0:	2208      	movs	r2, #8
   1d4d2:	0018      	movs	r0, r3
   1d4d4:	4b9a      	ldr	r3, [pc, #616]	; (1d740 <http_client_send_request+0x2cc>)
   1d4d6:	4798      	blx	r3
   1d4d8:	1e03      	subs	r3, r0, #0
   1d4da:	d101      	bne.n	1d4e0 <http_client_send_request+0x6c>
		i = 8;
   1d4dc:	2308      	movs	r3, #8
   1d4de:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   1d4e0:	68fb      	ldr	r3, [r7, #12]
   1d4e2:	1c5c      	adds	r4, r3, #1
   1d4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d4e6:	68ba      	ldr	r2, [r7, #8]
   1d4e8:	18d5      	adds	r5, r2, r3
   1d4ea:	68fb      	ldr	r3, [r7, #12]
   1d4ec:	3301      	adds	r3, #1
   1d4ee:	0018      	movs	r0, r3
   1d4f0:	4b95      	ldr	r3, [pc, #596]	; (1d748 <http_client_send_request+0x2d4>)
   1d4f2:	4798      	blx	r3
   1d4f4:	0003      	movs	r3, r0
   1d4f6:	001a      	movs	r2, r3
   1d4f8:	0029      	movs	r1, r5
   1d4fa:	0020      	movs	r0, r4
   1d4fc:	4b90      	ldr	r3, [pc, #576]	; (1d740 <http_client_send_request+0x2cc>)
   1d4fe:	4798      	blx	r3
   1d500:	0003      	movs	r3, r0
   1d502:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   1d504:	e00d      	b.n	1d522 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   1d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d508:	1c5a      	adds	r2, r3, #1
   1d50a:	62fa      	str	r2, [r7, #44]	; 0x2c
   1d50c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d50e:	68b9      	ldr	r1, [r7, #8]
   1d510:	188a      	adds	r2, r1, r2
   1d512:	7811      	ldrb	r1, [r2, #0]
   1d514:	68fa      	ldr	r2, [r7, #12]
   1d516:	18d3      	adds	r3, r2, r3
   1d518:	1c0a      	adds	r2, r1, #0
   1d51a:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   1d51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d51e:	3301      	adds	r3, #1
   1d520:	633b      	str	r3, [r7, #48]	; 0x30
   1d522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d524:	68ba      	ldr	r2, [r7, #8]
   1d526:	18d3      	adds	r3, r2, r3
   1d528:	781b      	ldrb	r3, [r3, #0]
   1d52a:	2b00      	cmp	r3, #0
   1d52c:	d005      	beq.n	1d53a <http_client_send_request+0xc6>
   1d52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d530:	68ba      	ldr	r2, [r7, #8]
   1d532:	18d3      	adds	r3, r2, r3
   1d534:	781b      	ldrb	r3, [r3, #0]
   1d536:	2b2f      	cmp	r3, #47	; 0x2f
   1d538:	d1e5      	bne.n	1d506 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   1d53a:	68fa      	ldr	r2, [r7, #12]
   1d53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d53e:	18d3      	adds	r3, r2, r3
   1d540:	3301      	adds	r3, #1
   1d542:	2200      	movs	r2, #0
   1d544:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   1d546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d548:	68ba      	ldr	r2, [r7, #8]
   1d54a:	18d3      	adds	r3, r2, r3
   1d54c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   1d54e:	68fb      	ldr	r3, [r7, #12]
   1d550:	3301      	adds	r3, #1
   1d552:	781b      	ldrb	r3, [r3, #0]
   1d554:	2b00      	cmp	r3, #0
   1d556:	d102      	bne.n	1d55e <http_client_send_request+0xea>
		return -EINVAL;
   1d558:	2316      	movs	r3, #22
   1d55a:	425b      	negs	r3, r3
   1d55c:	e0ea      	b.n	1d734 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   1d55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d560:	0018      	movs	r0, r3
   1d562:	4b79      	ldr	r3, [pc, #484]	; (1d748 <http_client_send_request+0x2d4>)
   1d564:	4798      	blx	r3
   1d566:	0003      	movs	r3, r0
   1d568:	2b3f      	cmp	r3, #63	; 0x3f
   1d56a:	d902      	bls.n	1d572 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   1d56c:	235b      	movs	r3, #91	; 0x5b
   1d56e:	425b      	negs	r3, r3
   1d570:	e0e0      	b.n	1d734 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   1d572:	68fb      	ldr	r3, [r7, #12]
   1d574:	22d4      	movs	r2, #212	; 0xd4
   1d576:	589b      	ldr	r3, [r3, r2]
   1d578:	2b00      	cmp	r3, #0
   1d57a:	d005      	beq.n	1d588 <http_client_send_request+0x114>
		free(module->req.ext_header);
   1d57c:	68fb      	ldr	r3, [r7, #12]
   1d57e:	22d4      	movs	r2, #212	; 0xd4
   1d580:	589b      	ldr	r3, [r3, r2]
   1d582:	0018      	movs	r0, r3
   1d584:	4b71      	ldr	r3, [pc, #452]	; (1d74c <http_client_send_request+0x2d8>)
   1d586:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   1d588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1d58a:	2b00      	cmp	r3, #0
   1d58c:	d010      	beq.n	1d5b0 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   1d58e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1d590:	0018      	movs	r0, r3
   1d592:	4b6f      	ldr	r3, [pc, #444]	; (1d750 <http_client_send_request+0x2dc>)
   1d594:	4798      	blx	r3
   1d596:	0003      	movs	r3, r0
   1d598:	0019      	movs	r1, r3
   1d59a:	68fb      	ldr	r3, [r7, #12]
   1d59c:	22d4      	movs	r2, #212	; 0xd4
   1d59e:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   1d5a0:	68fb      	ldr	r3, [r7, #12]
   1d5a2:	22d4      	movs	r2, #212	; 0xd4
   1d5a4:	589b      	ldr	r3, [r3, r2]
   1d5a6:	2b00      	cmp	r3, #0
   1d5a8:	d106      	bne.n	1d5b8 <http_client_send_request+0x144>
			return -ENOMEM;
   1d5aa:	230c      	movs	r3, #12
   1d5ac:	425b      	negs	r3, r3
   1d5ae:	e0c1      	b.n	1d734 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   1d5b0:	68fb      	ldr	r3, [r7, #12]
   1d5b2:	22d4      	movs	r2, #212	; 0xd4
   1d5b4:	2100      	movs	r1, #0
   1d5b6:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   1d5b8:	68fb      	ldr	r3, [r7, #12]
   1d5ba:	2241      	movs	r2, #65	; 0x41
   1d5bc:	5c99      	ldrb	r1, [r3, r2]
   1d5be:	2001      	movs	r0, #1
   1d5c0:	4381      	bics	r1, r0
   1d5c2:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   1d5c4:	68fb      	ldr	r3, [r7, #12]
   1d5c6:	2200      	movs	r2, #0
   1d5c8:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   1d5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d5cc:	781b      	ldrb	r3, [r3, #0]
   1d5ce:	2b2f      	cmp	r3, #47	; 0x2f
   1d5d0:	d107      	bne.n	1d5e2 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   1d5d2:	68fb      	ldr	r3, [r7, #12]
   1d5d4:	3370      	adds	r3, #112	; 0x70
   1d5d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1d5d8:	0011      	movs	r1, r2
   1d5da:	0018      	movs	r0, r3
   1d5dc:	4b5d      	ldr	r3, [pc, #372]	; (1d754 <http_client_send_request+0x2e0>)
   1d5de:	4798      	blx	r3
   1d5e0:	e00f      	b.n	1d602 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   1d5e2:	68fb      	ldr	r3, [r7, #12]
   1d5e4:	2270      	movs	r2, #112	; 0x70
   1d5e6:	212f      	movs	r1, #47	; 0x2f
   1d5e8:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   1d5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d5ec:	781b      	ldrb	r3, [r3, #0]
   1d5ee:	2b00      	cmp	r3, #0
   1d5f0:	d007      	beq.n	1d602 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   1d5f2:	68fb      	ldr	r3, [r7, #12]
   1d5f4:	3370      	adds	r3, #112	; 0x70
   1d5f6:	3301      	adds	r3, #1
   1d5f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1d5fa:	0011      	movs	r1, r2
   1d5fc:	0018      	movs	r0, r3
   1d5fe:	4b55      	ldr	r3, [pc, #340]	; (1d754 <http_client_send_request+0x2e0>)
   1d600:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   1d602:	683b      	ldr	r3, [r7, #0]
   1d604:	2b00      	cmp	r3, #0
   1d606:	d007      	beq.n	1d618 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   1d608:	68fb      	ldr	r3, [r7, #12]
   1d60a:	33b0      	adds	r3, #176	; 0xb0
   1d60c:	6839      	ldr	r1, [r7, #0]
   1d60e:	2218      	movs	r2, #24
   1d610:	0018      	movs	r0, r3
   1d612:	4b51      	ldr	r3, [pc, #324]	; (1d758 <http_client_send_request+0x2e4>)
   1d614:	4798      	blx	r3
   1d616:	e006      	b.n	1d626 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   1d618:	68fb      	ldr	r3, [r7, #12]
   1d61a:	33b0      	adds	r3, #176	; 0xb0
   1d61c:	2218      	movs	r2, #24
   1d61e:	2100      	movs	r1, #0
   1d620:	0018      	movs	r0, r3
   1d622:	4b4e      	ldr	r3, [pc, #312]	; (1d75c <http_client_send_request+0x2e8>)
   1d624:	4798      	blx	r3
	}

	module->req.method = method;
   1d626:	68fb      	ldr	r3, [r7, #12]
   1d628:	1dfa      	adds	r2, r7, #7
   1d62a:	21c8      	movs	r1, #200	; 0xc8
   1d62c:	7812      	ldrb	r2, [r2, #0]
   1d62e:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   1d630:	68fb      	ldr	r3, [r7, #12]
   1d632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1d634:	2b01      	cmp	r3, #1
   1d636:	d003      	beq.n	1d640 <http_client_send_request+0x1cc>
   1d638:	d316      	bcc.n	1d668 <http_client_send_request+0x1f4>
   1d63a:	2b02      	cmp	r3, #2
   1d63c:	d004      	beq.n	1d648 <http_client_send_request+0x1d4>
   1d63e:	e074      	b.n	1d72a <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   1d640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d642:	2b00      	cmp	r3, #0
   1d644:	d100      	bne.n	1d648 <http_client_send_request+0x1d4>
   1d646:	e073      	b.n	1d730 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   1d648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d64a:	2b00      	cmp	r3, #0
   1d64c:	d107      	bne.n	1d65e <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   1d64e:	68fb      	ldr	r3, [r7, #12]
   1d650:	2203      	movs	r2, #3
   1d652:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   1d654:	68fb      	ldr	r3, [r7, #12]
   1d656:	0018      	movs	r0, r3
   1d658:	4b41      	ldr	r3, [pc, #260]	; (1d760 <http_client_send_request+0x2ec>)
   1d65a:	4798      	blx	r3
			break;
   1d65c:	e069      	b.n	1d732 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   1d65e:	68fb      	ldr	r3, [r7, #12]
   1d660:	2100      	movs	r1, #0
   1d662:	0018      	movs	r0, r3
   1d664:	4b3f      	ldr	r3, [pc, #252]	; (1d764 <http_client_send_request+0x2f0>)
   1d666:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   1d668:	68fb      	ldr	r3, [r7, #12]
   1d66a:	2252      	movs	r2, #82	; 0x52
   1d66c:	5c9b      	ldrb	r3, [r3, r2]
   1d66e:	2b00      	cmp	r3, #0
   1d670:	d007      	beq.n	1d682 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   1d672:	2337      	movs	r3, #55	; 0x37
   1d674:	18fb      	adds	r3, r7, r3
   1d676:	2237      	movs	r2, #55	; 0x37
   1d678:	18ba      	adds	r2, r7, r2
   1d67a:	7812      	ldrb	r2, [r2, #0]
   1d67c:	2101      	movs	r1, #1
   1d67e:	430a      	orrs	r2, r1
   1d680:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   1d682:	2337      	movs	r3, #55	; 0x37
   1d684:	18fb      	adds	r3, r7, r3
   1d686:	781b      	ldrb	r3, [r3, #0]
   1d688:	001a      	movs	r2, r3
   1d68a:	2101      	movs	r1, #1
   1d68c:	2002      	movs	r0, #2
   1d68e:	4b36      	ldr	r3, [pc, #216]	; (1d768 <http_client_send_request+0x2f4>)
   1d690:	4798      	blx	r3
   1d692:	0003      	movs	r3, r0
   1d694:	001a      	movs	r2, r3
   1d696:	68fb      	ldr	r3, [r7, #12]
   1d698:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   1d69a:	68fb      	ldr	r3, [r7, #12]
   1d69c:	781b      	ldrb	r3, [r3, #0]
   1d69e:	b25b      	sxtb	r3, r3
   1d6a0:	2b00      	cmp	r3, #0
   1d6a2:	db3f      	blt.n	1d724 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   1d6a4:	68fb      	ldr	r3, [r7, #12]
   1d6a6:	781b      	ldrb	r3, [r3, #0]
   1d6a8:	b25b      	sxtb	r3, r3
   1d6aa:	001a      	movs	r2, r3
   1d6ac:	4b2f      	ldr	r3, [pc, #188]	; (1d76c <http_client_send_request+0x2f8>)
   1d6ae:	0092      	lsls	r2, r2, #2
   1d6b0:	68f9      	ldr	r1, [r7, #12]
   1d6b2:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   1d6b4:	68fb      	ldr	r3, [r7, #12]
   1d6b6:	3301      	adds	r3, #1
   1d6b8:	0018      	movs	r0, r3
   1d6ba:	4b2d      	ldr	r3, [pc, #180]	; (1d770 <http_client_send_request+0x2fc>)
   1d6bc:	4798      	blx	r3
   1d6be:	1e03      	subs	r3, r0, #0
   1d6c0:	d027      	beq.n	1d712 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   1d6c2:	2314      	movs	r3, #20
   1d6c4:	18fb      	adds	r3, r7, r3
   1d6c6:	2202      	movs	r2, #2
   1d6c8:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   1d6ca:	68fb      	ldr	r3, [r7, #12]
   1d6cc:	2250      	movs	r2, #80	; 0x50
   1d6ce:	5a9b      	ldrh	r3, [r3, r2]
   1d6d0:	021b      	lsls	r3, r3, #8
   1d6d2:	b21a      	sxth	r2, r3
   1d6d4:	68fb      	ldr	r3, [r7, #12]
   1d6d6:	2150      	movs	r1, #80	; 0x50
   1d6d8:	5a5b      	ldrh	r3, [r3, r1]
   1d6da:	0a1b      	lsrs	r3, r3, #8
   1d6dc:	b29b      	uxth	r3, r3
   1d6de:	b21b      	sxth	r3, r3
   1d6e0:	4313      	orrs	r3, r2
   1d6e2:	b21b      	sxth	r3, r3
   1d6e4:	b29a      	uxth	r2, r3
   1d6e6:	2314      	movs	r3, #20
   1d6e8:	18fb      	adds	r3, r7, r3
   1d6ea:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   1d6ec:	68fb      	ldr	r3, [r7, #12]
   1d6ee:	3301      	adds	r3, #1
   1d6f0:	0018      	movs	r0, r3
   1d6f2:	4b20      	ldr	r3, [pc, #128]	; (1d774 <http_client_send_request+0x300>)
   1d6f4:	4798      	blx	r3
   1d6f6:	0002      	movs	r2, r0
   1d6f8:	2314      	movs	r3, #20
   1d6fa:	18fb      	adds	r3, r7, r3
   1d6fc:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1d6fe:	68fb      	ldr	r3, [r7, #12]
   1d700:	781b      	ldrb	r3, [r3, #0]
   1d702:	b25b      	sxtb	r3, r3
   1d704:	2214      	movs	r2, #20
   1d706:	18b9      	adds	r1, r7, r2
   1d708:	2210      	movs	r2, #16
   1d70a:	0018      	movs	r0, r3
   1d70c:	4b1a      	ldr	r3, [pc, #104]	; (1d778 <http_client_send_request+0x304>)
   1d70e:	4798      	blx	r3
   1d710:	e004      	b.n	1d71c <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   1d712:	68fb      	ldr	r3, [r7, #12]
   1d714:	3301      	adds	r3, #1
   1d716:	0018      	movs	r0, r3
   1d718:	4b18      	ldr	r3, [pc, #96]	; (1d77c <http_client_send_request+0x308>)
   1d71a:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   1d71c:	68fb      	ldr	r3, [r7, #12]
   1d71e:	2201      	movs	r2, #1
   1d720:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   1d722:	e006      	b.n	1d732 <http_client_send_request+0x2be>
			return -ENOSPC;
   1d724:	231c      	movs	r3, #28
   1d726:	425b      	negs	r3, r3
   1d728:	e004      	b.n	1d734 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   1d72a:	230b      	movs	r3, #11
   1d72c:	425b      	negs	r3, r3
   1d72e:	e001      	b.n	1d734 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   1d730:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   1d732:	2300      	movs	r3, #0
}
   1d734:	0018      	movs	r0, r3
   1d736:	46bd      	mov	sp, r7
   1d738:	b00e      	add	sp, #56	; 0x38
   1d73a:	bdb0      	pop	{r4, r5, r7, pc}
   1d73c:	00026c00 	.word	0x00026c00
   1d740:	00021151 	.word	0x00021151
   1d744:	00026c08 	.word	0x00026c08
   1d748:	00021143 	.word	0x00021143
   1d74c:	00020d41 	.word	0x00020d41
   1d750:	00021109 	.word	0x00021109
   1d754:	000210f7 	.word	0x000210f7
   1d758:	00020d55 	.word	0x00020d55
   1d75c:	00020d8b 	.word	0x00020d8b
   1d760:	0001d8d5 	.word	0x0001d8d5
   1d764:	0001d781 	.word	0x0001d781
   1d768:	00011a91 	.word	0x00011a91
   1d76c:	2000456c 	.word	0x2000456c
   1d770:	0001d3dd 	.word	0x0001d3dd
   1d774:	000121dd 	.word	0x000121dd
   1d778:	00011ca5 	.word	0x00011ca5
   1d77c:	000122e5 	.word	0x000122e5

0001d780 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   1d780:	b580      	push	{r7, lr}
   1d782:	b086      	sub	sp, #24
   1d784:	af00      	add	r7, sp, #0
   1d786:	6078      	str	r0, [r7, #4]
   1d788:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   1d78a:	687b      	ldr	r3, [r7, #4]
   1d78c:	22c0      	movs	r2, #192	; 0xc0
   1d78e:	589b      	ldr	r3, [r3, r2]
   1d790:	2b00      	cmp	r3, #0
   1d792:	d007      	beq.n	1d7a4 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   1d794:	687b      	ldr	r3, [r7, #4]
   1d796:	22c0      	movs	r2, #192	; 0xc0
   1d798:	589b      	ldr	r3, [r3, r2]
   1d79a:	687a      	ldr	r2, [r7, #4]
   1d79c:	21c4      	movs	r1, #196	; 0xc4
   1d79e:	5852      	ldr	r2, [r2, r1]
   1d7a0:	0010      	movs	r0, r2
   1d7a2:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   1d7a4:	687b      	ldr	r3, [r7, #4]
   1d7a6:	33b0      	adds	r3, #176	; 0xb0
   1d7a8:	2218      	movs	r2, #24
   1d7aa:	2100      	movs	r1, #0
   1d7ac:	0018      	movs	r0, r3
   1d7ae:	4b24      	ldr	r3, [pc, #144]	; (1d840 <_http_client_clear_conn+0xc0>)
   1d7b0:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   1d7b2:	687b      	ldr	r3, [r7, #4]
   1d7b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1d7b6:	2b00      	cmp	r3, #0
   1d7b8:	d005      	beq.n	1d7c6 <_http_client_clear_conn+0x46>
		close(module->sock);
   1d7ba:	687b      	ldr	r3, [r7, #4]
   1d7bc:	781b      	ldrb	r3, [r3, #0]
   1d7be:	b25b      	sxtb	r3, r3
   1d7c0:	0018      	movs	r0, r3
   1d7c2:	4b20      	ldr	r3, [pc, #128]	; (1d844 <_http_client_clear_conn+0xc4>)
   1d7c4:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   1d7c6:	687b      	ldr	r3, [r7, #4]
   1d7c8:	781b      	ldrb	r3, [r3, #0]
   1d7ca:	b25b      	sxtb	r3, r3
   1d7cc:	001a      	movs	r2, r3
   1d7ce:	4b1e      	ldr	r3, [pc, #120]	; (1d848 <_http_client_clear_conn+0xc8>)
   1d7d0:	0092      	lsls	r2, r2, #2
   1d7d2:	2100      	movs	r1, #0
   1d7d4:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   1d7d6:	687b      	ldr	r3, [r7, #4]
   1d7d8:	336c      	adds	r3, #108	; 0x6c
   1d7da:	226c      	movs	r2, #108	; 0x6c
   1d7dc:	2100      	movs	r1, #0
   1d7de:	0018      	movs	r0, r3
   1d7e0:	4b17      	ldr	r3, [pc, #92]	; (1d840 <_http_client_clear_conn+0xc0>)
   1d7e2:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   1d7e4:	687b      	ldr	r3, [r7, #4]
   1d7e6:	33d8      	adds	r3, #216	; 0xd8
   1d7e8:	2210      	movs	r2, #16
   1d7ea:	2100      	movs	r1, #0
   1d7ec:	0018      	movs	r0, r3
   1d7ee:	4b14      	ldr	r3, [pc, #80]	; (1d840 <_http_client_clear_conn+0xc0>)
   1d7f0:	4798      	blx	r3
	module->req.state = STATE_INIT;
   1d7f2:	687b      	ldr	r3, [r7, #4]
   1d7f4:	2200      	movs	r2, #0
   1d7f6:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1d7f8:	687b      	ldr	r3, [r7, #4]
   1d7fa:	22d8      	movs	r2, #216	; 0xd8
   1d7fc:	2100      	movs	r1, #0
   1d7fe:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   1d800:	687b      	ldr	r3, [r7, #4]
   1d802:	2241      	movs	r2, #65	; 0x41
   1d804:	5c99      	ldrb	r1, [r3, r2]
   1d806:	2001      	movs	r0, #1
   1d808:	4381      	bics	r1, r0
   1d80a:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   1d80c:	687b      	ldr	r3, [r7, #4]
   1d80e:	2241      	movs	r2, #65	; 0x41
   1d810:	5c99      	ldrb	r1, [r3, r2]
   1d812:	2002      	movs	r0, #2
   1d814:	4381      	bics	r1, r0
   1d816:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   1d818:	230c      	movs	r3, #12
   1d81a:	18fb      	adds	r3, r7, r3
   1d81c:	683a      	ldr	r2, [r7, #0]
   1d81e:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   1d820:	687b      	ldr	r3, [r7, #4]
   1d822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d824:	2b00      	cmp	r3, #0
   1d826:	d006      	beq.n	1d836 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   1d828:	687b      	ldr	r3, [r7, #4]
   1d82a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d82c:	220c      	movs	r2, #12
   1d82e:	18ba      	adds	r2, r7, r2
   1d830:	6878      	ldr	r0, [r7, #4]
   1d832:	2104      	movs	r1, #4
   1d834:	4798      	blx	r3
	}
}
   1d836:	46c0      	nop			; (mov r8, r8)
   1d838:	46bd      	mov	sp, r7
   1d83a:	b006      	add	sp, #24
   1d83c:	bd80      	pop	{r7, pc}
   1d83e:	46c0      	nop			; (mov r8, r8)
   1d840:	00020d8b 	.word	0x00020d8b
   1d844:	0001209d 	.word	0x0001209d
   1d848:	2000456c 	.word	0x2000456c

0001d84c <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   1d84c:	b590      	push	{r4, r7, lr}
   1d84e:	b087      	sub	sp, #28
   1d850:	af00      	add	r7, sp, #0
   1d852:	60f8      	str	r0, [r7, #12]
   1d854:	60b9      	str	r1, [r7, #8]
   1d856:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   1d858:	68fb      	ldr	r3, [r7, #12]
   1d85a:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   1d85c:	697b      	ldr	r3, [r7, #20]
   1d85e:	2241      	movs	r2, #65	; 0x41
   1d860:	5c99      	ldrb	r1, [r3, r2]
   1d862:	2001      	movs	r0, #1
   1d864:	4301      	orrs	r1, r0
   1d866:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   1d868:	697b      	ldr	r3, [r7, #20]
   1d86a:	2000      	movs	r0, #0
   1d86c:	5618      	ldrsb	r0, [r3, r0]
   1d86e:	687b      	ldr	r3, [r7, #4]
   1d870:	b29a      	uxth	r2, r3
   1d872:	68b9      	ldr	r1, [r7, #8]
   1d874:	2300      	movs	r3, #0
   1d876:	4c14      	ldr	r4, [pc, #80]	; (1d8c8 <_http_client_send_wait+0x7c>)
   1d878:	47a0      	blx	r4
   1d87a:	0003      	movs	r3, r0
   1d87c:	613b      	str	r3, [r7, #16]
   1d87e:	693b      	ldr	r3, [r7, #16]
   1d880:	2b00      	cmp	r3, #0
   1d882:	da0f      	bge.n	1d8a4 <_http_client_send_wait+0x58>
		module->sending = 0;
   1d884:	697b      	ldr	r3, [r7, #20]
   1d886:	2241      	movs	r2, #65	; 0x41
   1d888:	5c99      	ldrb	r1, [r3, r2]
   1d88a:	2001      	movs	r0, #1
   1d88c:	4381      	bics	r1, r0
   1d88e:	5499      	strb	r1, [r3, r2]
		return result;
   1d890:	693b      	ldr	r3, [r7, #16]
   1d892:	e014      	b.n	1d8be <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   1d894:	2000      	movs	r0, #0
   1d896:	4b0d      	ldr	r3, [pc, #52]	; (1d8cc <_http_client_send_wait+0x80>)
   1d898:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   1d89a:	697b      	ldr	r3, [r7, #20]
   1d89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1d89e:	0018      	movs	r0, r3
   1d8a0:	4b0b      	ldr	r3, [pc, #44]	; (1d8d0 <_http_client_send_wait+0x84>)
   1d8a2:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   1d8a4:	697b      	ldr	r3, [r7, #20]
   1d8a6:	2241      	movs	r2, #65	; 0x41
   1d8a8:	5c9b      	ldrb	r3, [r3, r2]
   1d8aa:	2201      	movs	r2, #1
   1d8ac:	4013      	ands	r3, r2
   1d8ae:	b2db      	uxtb	r3, r3
   1d8b0:	2b00      	cmp	r3, #0
   1d8b2:	d003      	beq.n	1d8bc <_http_client_send_wait+0x70>
   1d8b4:	697b      	ldr	r3, [r7, #20]
   1d8b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1d8b8:	2b02      	cmp	r3, #2
   1d8ba:	d8eb      	bhi.n	1d894 <_http_client_send_wait+0x48>
	}

	return 0;
   1d8bc:	2300      	movs	r3, #0
}
   1d8be:	0018      	movs	r0, r3
   1d8c0:	46bd      	mov	sp, r7
   1d8c2:	b007      	add	sp, #28
   1d8c4:	bd90      	pop	{r4, r7, pc}
   1d8c6:	46c0      	nop			; (mov r8, r8)
   1d8c8:	00011db9 	.word	0x00011db9
   1d8cc:	0000e465 	.word	0x0000e465
   1d8d0:	0001eb59 	.word	0x0001eb59

0001d8d4 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   1d8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d8d6:	46c6      	mov	lr, r8
   1d8d8:	b500      	push	{lr}
   1d8da:	b0a0      	sub	sp, #128	; 0x80
   1d8dc:	af02      	add	r7, sp, #8
   1d8de:	61f8      	str	r0, [r7, #28]
   1d8e0:	4668      	mov	r0, sp
   1d8e2:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   1d8e4:	2318      	movs	r3, #24
   1d8e6:	2218      	movs	r2, #24
   1d8e8:	18ba      	adds	r2, r7, r2
   1d8ea:	18d0      	adds	r0, r2, r3
   1d8ec:	4bbd      	ldr	r3, [pc, #756]	; (1dbe4 <_http_client_request+0x310>)
   1d8ee:	469c      	mov	ip, r3
   1d8f0:	4663      	mov	r3, ip
   1d8f2:	cb16      	ldmia	r3!, {r1, r2, r4}
   1d8f4:	c016      	stmia	r0!, {r1, r2, r4}
   1d8f6:	469c      	mov	ip, r3
   1d8f8:	4663      	mov	r3, ip
   1d8fa:	681b      	ldr	r3, [r3, #0]
   1d8fc:	469c      	mov	ip, r3
   1d8fe:	4663      	mov	r3, ip
   1d900:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   1d902:	69f8      	ldr	r0, [r7, #28]
   1d904:	6e40      	ldr	r0, [r0, #100]	; 0x64
   1d906:	4684      	mov	ip, r0
   1d908:	2301      	movs	r3, #1
   1d90a:	425b      	negs	r3, r3
   1d90c:	4698      	mov	r8, r3
   1d90e:	44c4      	add	ip, r8
   1d910:	4663      	mov	r3, ip
   1d912:	66fb      	str	r3, [r7, #108]	; 0x6c
   1d914:	6038      	str	r0, [r7, #0]
   1d916:	2300      	movs	r3, #0
   1d918:	607b      	str	r3, [r7, #4]
   1d91a:	6839      	ldr	r1, [r7, #0]
   1d91c:	687a      	ldr	r2, [r7, #4]
   1d91e:	000b      	movs	r3, r1
   1d920:	0f5b      	lsrs	r3, r3, #29
   1d922:	469c      	mov	ip, r3
   1d924:	0013      	movs	r3, r2
   1d926:	00db      	lsls	r3, r3, #3
   1d928:	617b      	str	r3, [r7, #20]
   1d92a:	4663      	mov	r3, ip
   1d92c:	697c      	ldr	r4, [r7, #20]
   1d92e:	431c      	orrs	r4, r3
   1d930:	617c      	str	r4, [r7, #20]
   1d932:	000b      	movs	r3, r1
   1d934:	00db      	lsls	r3, r3, #3
   1d936:	613b      	str	r3, [r7, #16]
   1d938:	0005      	movs	r5, r0
   1d93a:	2200      	movs	r2, #0
   1d93c:	0016      	movs	r6, r2
   1d93e:	0f6a      	lsrs	r2, r5, #29
   1d940:	00f3      	lsls	r3, r6, #3
   1d942:	60fb      	str	r3, [r7, #12]
   1d944:	68fb      	ldr	r3, [r7, #12]
   1d946:	4313      	orrs	r3, r2
   1d948:	60fb      	str	r3, [r7, #12]
   1d94a:	00eb      	lsls	r3, r5, #3
   1d94c:	60bb      	str	r3, [r7, #8]
   1d94e:	1dc3      	adds	r3, r0, #7
   1d950:	08db      	lsrs	r3, r3, #3
   1d952:	00db      	lsls	r3, r3, #3
   1d954:	466a      	mov	r2, sp
   1d956:	1ad3      	subs	r3, r2, r3
   1d958:	469d      	mov	sp, r3
   1d95a:	ab02      	add	r3, sp, #8
   1d95c:	3300      	adds	r3, #0
   1d95e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   1d960:	69fb      	ldr	r3, [r7, #28]
   1d962:	2b00      	cmp	r3, #0
   1d964:	d100      	bne.n	1d968 <_http_client_request+0x94>
   1d966:	e346      	b.n	1dff6 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   1d968:	69fb      	ldr	r3, [r7, #28]
   1d96a:	2241      	movs	r2, #65	; 0x41
   1d96c:	5c9b      	ldrb	r3, [r3, r2]
   1d96e:	2201      	movs	r2, #1
   1d970:	4013      	ands	r3, r2
   1d972:	b2db      	uxtb	r3, r3
   1d974:	2b00      	cmp	r3, #0
   1d976:	d000      	beq.n	1d97a <_http_client_request+0xa6>
   1d978:	e33f      	b.n	1dffa <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   1d97a:	69fb      	ldr	r3, [r7, #28]
   1d97c:	33b0      	adds	r3, #176	; 0xb0
   1d97e:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   1d980:	69fb      	ldr	r3, [r7, #28]
   1d982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1d984:	2b03      	cmp	r3, #3
   1d986:	d003      	beq.n	1d990 <_http_client_request+0xbc>
   1d988:	2b04      	cmp	r3, #4
   1d98a:	d100      	bne.n	1d98e <_http_client_request+0xba>
   1d98c:	e1b3      	b.n	1dcf6 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   1d98e:	e32f      	b.n	1dff0 <_http_client_request+0x71c>
		module->req.content_length = 0;
   1d990:	69fb      	ldr	r3, [r7, #28]
   1d992:	22cc      	movs	r2, #204	; 0xcc
   1d994:	2100      	movs	r1, #0
   1d996:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   1d998:	69fb      	ldr	r3, [r7, #28]
   1d99a:	22d0      	movs	r2, #208	; 0xd0
   1d99c:	2100      	movs	r1, #0
   1d99e:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   1d9a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1d9a2:	69fb      	ldr	r3, [r7, #28]
   1d9a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1d9a6:	4c90      	ldr	r4, [pc, #576]	; (1dbe8 <_http_client_request+0x314>)
   1d9a8:	2334      	movs	r3, #52	; 0x34
   1d9aa:	2018      	movs	r0, #24
   1d9ac:	1838      	adds	r0, r7, r0
   1d9ae:	18c0      	adds	r0, r0, r3
   1d9b0:	69fb      	ldr	r3, [r7, #28]
   1d9b2:	9300      	str	r3, [sp, #0]
   1d9b4:	0023      	movs	r3, r4
   1d9b6:	4c8d      	ldr	r4, [pc, #564]	; (1dbec <_http_client_request+0x318>)
   1d9b8:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   1d9ba:	69fb      	ldr	r3, [r7, #28]
   1d9bc:	22c8      	movs	r2, #200	; 0xc8
   1d9be:	5c9b      	ldrb	r3, [r3, r2]
   1d9c0:	2b01      	cmp	r3, #1
   1d9c2:	d10a      	bne.n	1d9da <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   1d9c4:	498a      	ldr	r1, [pc, #552]	; (1dbf0 <_http_client_request+0x31c>)
   1d9c6:	2334      	movs	r3, #52	; 0x34
   1d9c8:	2218      	movs	r2, #24
   1d9ca:	4694      	mov	ip, r2
   1d9cc:	44bc      	add	ip, r7
   1d9ce:	4463      	add	r3, ip
   1d9d0:	2204      	movs	r2, #4
   1d9d2:	0018      	movs	r0, r3
   1d9d4:	4b87      	ldr	r3, [pc, #540]	; (1dbf4 <_http_client_request+0x320>)
   1d9d6:	4798      	blx	r3
   1d9d8:	e04e      	b.n	1da78 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   1d9da:	69fb      	ldr	r3, [r7, #28]
   1d9dc:	22c8      	movs	r2, #200	; 0xc8
   1d9de:	5c9b      	ldrb	r3, [r3, r2]
   1d9e0:	2b02      	cmp	r3, #2
   1d9e2:	d10a      	bne.n	1d9fa <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   1d9e4:	4984      	ldr	r1, [pc, #528]	; (1dbf8 <_http_client_request+0x324>)
   1d9e6:	2334      	movs	r3, #52	; 0x34
   1d9e8:	2218      	movs	r2, #24
   1d9ea:	4694      	mov	ip, r2
   1d9ec:	44bc      	add	ip, r7
   1d9ee:	4463      	add	r3, ip
   1d9f0:	2205      	movs	r2, #5
   1d9f2:	0018      	movs	r0, r3
   1d9f4:	4b7f      	ldr	r3, [pc, #508]	; (1dbf4 <_http_client_request+0x320>)
   1d9f6:	4798      	blx	r3
   1d9f8:	e03e      	b.n	1da78 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   1d9fa:	69fb      	ldr	r3, [r7, #28]
   1d9fc:	22c8      	movs	r2, #200	; 0xc8
   1d9fe:	5c9b      	ldrb	r3, [r3, r2]
   1da00:	2b03      	cmp	r3, #3
   1da02:	d10a      	bne.n	1da1a <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   1da04:	497d      	ldr	r1, [pc, #500]	; (1dbfc <_http_client_request+0x328>)
   1da06:	2334      	movs	r3, #52	; 0x34
   1da08:	2218      	movs	r2, #24
   1da0a:	4694      	mov	ip, r2
   1da0c:	44bc      	add	ip, r7
   1da0e:	4463      	add	r3, ip
   1da10:	2207      	movs	r2, #7
   1da12:	0018      	movs	r0, r3
   1da14:	4b77      	ldr	r3, [pc, #476]	; (1dbf4 <_http_client_request+0x320>)
   1da16:	4798      	blx	r3
   1da18:	e02e      	b.n	1da78 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   1da1a:	69fb      	ldr	r3, [r7, #28]
   1da1c:	22c8      	movs	r2, #200	; 0xc8
   1da1e:	5c9b      	ldrb	r3, [r3, r2]
   1da20:	2b04      	cmp	r3, #4
   1da22:	d10a      	bne.n	1da3a <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   1da24:	4976      	ldr	r1, [pc, #472]	; (1dc00 <_http_client_request+0x32c>)
   1da26:	2334      	movs	r3, #52	; 0x34
   1da28:	2218      	movs	r2, #24
   1da2a:	4694      	mov	ip, r2
   1da2c:	44bc      	add	ip, r7
   1da2e:	4463      	add	r3, ip
   1da30:	2204      	movs	r2, #4
   1da32:	0018      	movs	r0, r3
   1da34:	4b6f      	ldr	r3, [pc, #444]	; (1dbf4 <_http_client_request+0x320>)
   1da36:	4798      	blx	r3
   1da38:	e01e      	b.n	1da78 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   1da3a:	69fb      	ldr	r3, [r7, #28]
   1da3c:	22c8      	movs	r2, #200	; 0xc8
   1da3e:	5c9b      	ldrb	r3, [r3, r2]
   1da40:	2b05      	cmp	r3, #5
   1da42:	d10a      	bne.n	1da5a <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   1da44:	496f      	ldr	r1, [pc, #444]	; (1dc04 <_http_client_request+0x330>)
   1da46:	2334      	movs	r3, #52	; 0x34
   1da48:	2218      	movs	r2, #24
   1da4a:	4694      	mov	ip, r2
   1da4c:	44bc      	add	ip, r7
   1da4e:	4463      	add	r3, ip
   1da50:	2208      	movs	r2, #8
   1da52:	0018      	movs	r0, r3
   1da54:	4b67      	ldr	r3, [pc, #412]	; (1dbf4 <_http_client_request+0x320>)
   1da56:	4798      	blx	r3
   1da58:	e00e      	b.n	1da78 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   1da5a:	69fb      	ldr	r3, [r7, #28]
   1da5c:	22c8      	movs	r2, #200	; 0xc8
   1da5e:	5c9b      	ldrb	r3, [r3, r2]
   1da60:	2b06      	cmp	r3, #6
   1da62:	d109      	bne.n	1da78 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   1da64:	4968      	ldr	r1, [pc, #416]	; (1dc08 <_http_client_request+0x334>)
   1da66:	2334      	movs	r3, #52	; 0x34
   1da68:	2218      	movs	r2, #24
   1da6a:	4694      	mov	ip, r2
   1da6c:	44bc      	add	ip, r7
   1da6e:	4463      	add	r3, ip
   1da70:	2205      	movs	r2, #5
   1da72:	0018      	movs	r0, r3
   1da74:	4b5f      	ldr	r3, [pc, #380]	; (1dbf4 <_http_client_request+0x320>)
   1da76:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   1da78:	69fb      	ldr	r3, [r7, #28]
   1da7a:	3370      	adds	r3, #112	; 0x70
   1da7c:	001c      	movs	r4, r3
   1da7e:	69fb      	ldr	r3, [r7, #28]
   1da80:	3370      	adds	r3, #112	; 0x70
   1da82:	0018      	movs	r0, r3
   1da84:	4b61      	ldr	r3, [pc, #388]	; (1dc0c <_http_client_request+0x338>)
   1da86:	4798      	blx	r3
   1da88:	0002      	movs	r2, r0
   1da8a:	2334      	movs	r3, #52	; 0x34
   1da8c:	2118      	movs	r1, #24
   1da8e:	468c      	mov	ip, r1
   1da90:	44bc      	add	ip, r7
   1da92:	4463      	add	r3, ip
   1da94:	0021      	movs	r1, r4
   1da96:	0018      	movs	r0, r3
   1da98:	4b56      	ldr	r3, [pc, #344]	; (1dbf4 <_http_client_request+0x320>)
   1da9a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   1da9c:	495c      	ldr	r1, [pc, #368]	; (1dc10 <_http_client_request+0x33c>)
   1da9e:	2334      	movs	r3, #52	; 0x34
   1daa0:	2218      	movs	r2, #24
   1daa2:	4694      	mov	ip, r2
   1daa4:	44bc      	add	ip, r7
   1daa6:	4463      	add	r3, ip
   1daa8:	220b      	movs	r2, #11
   1daaa:	0018      	movs	r0, r3
   1daac:	4b51      	ldr	r3, [pc, #324]	; (1dbf4 <_http_client_request+0x320>)
   1daae:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   1dab0:	4958      	ldr	r1, [pc, #352]	; (1dc14 <_http_client_request+0x340>)
   1dab2:	2334      	movs	r3, #52	; 0x34
   1dab4:	2218      	movs	r2, #24
   1dab6:	4694      	mov	ip, r2
   1dab8:	44bc      	add	ip, r7
   1daba:	4463      	add	r3, ip
   1dabc:	220c      	movs	r2, #12
   1dabe:	0018      	movs	r0, r3
   1dac0:	4b4c      	ldr	r3, [pc, #304]	; (1dbf4 <_http_client_request+0x320>)
   1dac2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   1dac4:	69fb      	ldr	r3, [r7, #28]
   1dac6:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   1dac8:	69fb      	ldr	r3, [r7, #28]
   1daca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1dacc:	0018      	movs	r0, r3
   1dace:	4b4f      	ldr	r3, [pc, #316]	; (1dc0c <_http_client_request+0x338>)
   1dad0:	4798      	blx	r3
   1dad2:	0002      	movs	r2, r0
   1dad4:	2334      	movs	r3, #52	; 0x34
   1dad6:	2118      	movs	r1, #24
   1dad8:	468c      	mov	ip, r1
   1dada:	44bc      	add	ip, r7
   1dadc:	4463      	add	r3, ip
   1dade:	0021      	movs	r1, r4
   1dae0:	0018      	movs	r0, r3
   1dae2:	4b44      	ldr	r3, [pc, #272]	; (1dbf4 <_http_client_request+0x320>)
   1dae4:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1dae6:	494c      	ldr	r1, [pc, #304]	; (1dc18 <_http_client_request+0x344>)
   1dae8:	2334      	movs	r3, #52	; 0x34
   1daea:	2218      	movs	r2, #24
   1daec:	4694      	mov	ip, r2
   1daee:	44bc      	add	ip, r7
   1daf0:	4463      	add	r3, ip
   1daf2:	2202      	movs	r2, #2
   1daf4:	0018      	movs	r0, r3
   1daf6:	4b3f      	ldr	r3, [pc, #252]	; (1dbf4 <_http_client_request+0x320>)
   1daf8:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   1dafa:	4948      	ldr	r1, [pc, #288]	; (1dc1c <_http_client_request+0x348>)
   1dafc:	2334      	movs	r3, #52	; 0x34
   1dafe:	2218      	movs	r2, #24
   1db00:	4694      	mov	ip, r2
   1db02:	44bc      	add	ip, r7
   1db04:	4463      	add	r3, ip
   1db06:	2206      	movs	r2, #6
   1db08:	0018      	movs	r0, r3
   1db0a:	4b3a      	ldr	r3, [pc, #232]	; (1dbf4 <_http_client_request+0x320>)
   1db0c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   1db0e:	69fb      	ldr	r3, [r7, #28]
   1db10:	1c5c      	adds	r4, r3, #1
   1db12:	69fb      	ldr	r3, [r7, #28]
   1db14:	3301      	adds	r3, #1
   1db16:	0018      	movs	r0, r3
   1db18:	4b3c      	ldr	r3, [pc, #240]	; (1dc0c <_http_client_request+0x338>)
   1db1a:	4798      	blx	r3
   1db1c:	0002      	movs	r2, r0
   1db1e:	2334      	movs	r3, #52	; 0x34
   1db20:	2118      	movs	r1, #24
   1db22:	468c      	mov	ip, r1
   1db24:	44bc      	add	ip, r7
   1db26:	4463      	add	r3, ip
   1db28:	0021      	movs	r1, r4
   1db2a:	0018      	movs	r0, r3
   1db2c:	4b31      	ldr	r3, [pc, #196]	; (1dbf4 <_http_client_request+0x320>)
   1db2e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1db30:	4939      	ldr	r1, [pc, #228]	; (1dc18 <_http_client_request+0x344>)
   1db32:	2334      	movs	r3, #52	; 0x34
   1db34:	2218      	movs	r2, #24
   1db36:	4694      	mov	ip, r2
   1db38:	44bc      	add	ip, r7
   1db3a:	4463      	add	r3, ip
   1db3c:	2202      	movs	r2, #2
   1db3e:	0018      	movs	r0, r3
   1db40:	4b2c      	ldr	r3, [pc, #176]	; (1dbf4 <_http_client_request+0x320>)
   1db42:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   1db44:	4936      	ldr	r1, [pc, #216]	; (1dc20 <_http_client_request+0x34c>)
   1db46:	2334      	movs	r3, #52	; 0x34
   1db48:	2218      	movs	r2, #24
   1db4a:	4694      	mov	ip, r2
   1db4c:	44bc      	add	ip, r7
   1db4e:	4463      	add	r3, ip
   1db50:	2218      	movs	r2, #24
   1db52:	0018      	movs	r0, r3
   1db54:	4b27      	ldr	r3, [pc, #156]	; (1dbf4 <_http_client_request+0x320>)
   1db56:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   1db58:	4932      	ldr	r1, [pc, #200]	; (1dc24 <_http_client_request+0x350>)
   1db5a:	2334      	movs	r3, #52	; 0x34
   1db5c:	2218      	movs	r2, #24
   1db5e:	4694      	mov	ip, r2
   1db60:	44bc      	add	ip, r7
   1db62:	4463      	add	r3, ip
   1db64:	2213      	movs	r2, #19
   1db66:	0018      	movs	r0, r3
   1db68:	4b22      	ldr	r3, [pc, #136]	; (1dbf4 <_http_client_request+0x320>)
   1db6a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   1db6c:	492e      	ldr	r1, [pc, #184]	; (1dc28 <_http_client_request+0x354>)
   1db6e:	2334      	movs	r3, #52	; 0x34
   1db70:	2218      	movs	r2, #24
   1db72:	4694      	mov	ip, r2
   1db74:	44bc      	add	ip, r7
   1db76:	4463      	add	r3, ip
   1db78:	2217      	movs	r2, #23
   1db7a:	0018      	movs	r0, r3
   1db7c:	4b1d      	ldr	r3, [pc, #116]	; (1dbf4 <_http_client_request+0x320>)
   1db7e:	4798      	blx	r3
		if (entity->read != NULL) {
   1db80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1db82:	68db      	ldr	r3, [r3, #12]
   1db84:	2b00      	cmp	r3, #0
   1db86:	d100      	bne.n	1db8a <_http_client_request+0x2b6>
   1db88:	e088      	b.n	1dc9c <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   1db8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1db8c:	781b      	ldrb	r3, [r3, #0]
   1db8e:	2b00      	cmp	r3, #0
   1db90:	d00f      	beq.n	1dbb2 <_http_client_request+0x2de>
				module->req.content_length = -1;
   1db92:	69fb      	ldr	r3, [r7, #28]
   1db94:	21cc      	movs	r1, #204	; 0xcc
   1db96:	2201      	movs	r2, #1
   1db98:	4252      	negs	r2, r2
   1db9a:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   1db9c:	4923      	ldr	r1, [pc, #140]	; (1dc2c <_http_client_request+0x358>)
   1db9e:	2334      	movs	r3, #52	; 0x34
   1dba0:	2218      	movs	r2, #24
   1dba2:	4694      	mov	ip, r2
   1dba4:	44bc      	add	ip, r7
   1dba6:	4463      	add	r3, ip
   1dba8:	221c      	movs	r2, #28
   1dbaa:	0018      	movs	r0, r3
   1dbac:	4b11      	ldr	r3, [pc, #68]	; (1dbf4 <_http_client_request+0x320>)
   1dbae:	4798      	blx	r3
   1dbb0:	e074      	b.n	1dc9c <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   1dbb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1dbb4:	689b      	ldr	r3, [r3, #8]
   1dbb6:	2b00      	cmp	r3, #0
   1dbb8:	d070      	beq.n	1dc9c <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   1dbba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1dbbc:	689a      	ldr	r2, [r3, #8]
   1dbbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1dbc0:	695b      	ldr	r3, [r3, #20]
   1dbc2:	0018      	movs	r0, r3
   1dbc4:	4790      	blx	r2
   1dbc6:	0001      	movs	r1, r0
   1dbc8:	69fb      	ldr	r3, [r7, #28]
   1dbca:	22cc      	movs	r2, #204	; 0xcc
   1dbcc:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   1dbce:	69fb      	ldr	r3, [r7, #28]
   1dbd0:	22cc      	movs	r2, #204	; 0xcc
   1dbd2:	589b      	ldr	r3, [r3, r2]
   1dbd4:	2b00      	cmp	r3, #0
   1dbd6:	da2b      	bge.n	1dc30 <_http_client_request+0x35c>
					module->req.content_length = 0;
   1dbd8:	69fb      	ldr	r3, [r7, #28]
   1dbda:	22cc      	movs	r2, #204	; 0xcc
   1dbdc:	2100      	movs	r1, #0
   1dbde:	5099      	str	r1, [r3, r2]
   1dbe0:	e05c      	b.n	1dc9c <_http_client_request+0x3c8>
   1dbe2:	46c0      	nop			; (mov r8, r8)
   1dbe4:	00026cf0 	.word	0x00026cf0
   1dbe8:	0001d84d 	.word	0x0001d84d
   1dbec:	0001e7b5 	.word	0x0001e7b5
   1dbf0:	00026c14 	.word	0x00026c14
   1dbf4:	0001e835 	.word	0x0001e835
   1dbf8:	00026c1c 	.word	0x00026c1c
   1dbfc:	00026c24 	.word	0x00026c24
   1dc00:	00026c2c 	.word	0x00026c2c
   1dc04:	00026c34 	.word	0x00026c34
   1dc08:	00026c40 	.word	0x00026c40
   1dc0c:	00021143 	.word	0x00021143
   1dc10:	00026c48 	.word	0x00026c48
   1dc14:	00026c54 	.word	0x00026c54
   1dc18:	00026c64 	.word	0x00026c64
   1dc1c:	00026c68 	.word	0x00026c68
   1dc20:	00026c70 	.word	0x00026c70
   1dc24:	00026c8c 	.word	0x00026c8c
   1dc28:	00026ca0 	.word	0x00026ca0
   1dc2c:	00026cb8 	.word	0x00026cb8
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   1dc30:	69fb      	ldr	r3, [r7, #28]
   1dc32:	22cc      	movs	r2, #204	; 0xcc
   1dc34:	589b      	ldr	r3, [r3, r2]
   1dc36:	001a      	movs	r2, r3
   1dc38:	49e0      	ldr	r1, [pc, #896]	; (1dfbc <_http_client_request+0x6e8>)
   1dc3a:	2328      	movs	r3, #40	; 0x28
   1dc3c:	2018      	movs	r0, #24
   1dc3e:	4684      	mov	ip, r0
   1dc40:	44bc      	add	ip, r7
   1dc42:	4463      	add	r3, ip
   1dc44:	0018      	movs	r0, r3
   1dc46:	4bde      	ldr	r3, [pc, #888]	; (1dfc0 <_http_client_request+0x6ec>)
   1dc48:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   1dc4a:	49de      	ldr	r1, [pc, #888]	; (1dfc4 <_http_client_request+0x6f0>)
   1dc4c:	2334      	movs	r3, #52	; 0x34
   1dc4e:	2218      	movs	r2, #24
   1dc50:	4694      	mov	ip, r2
   1dc52:	44bc      	add	ip, r7
   1dc54:	4463      	add	r3, ip
   1dc56:	2210      	movs	r2, #16
   1dc58:	0018      	movs	r0, r3
   1dc5a:	4bdb      	ldr	r3, [pc, #876]	; (1dfc8 <_http_client_request+0x6f4>)
   1dc5c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   1dc5e:	2328      	movs	r3, #40	; 0x28
   1dc60:	2218      	movs	r2, #24
   1dc62:	4694      	mov	ip, r2
   1dc64:	44bc      	add	ip, r7
   1dc66:	4463      	add	r3, ip
   1dc68:	0018      	movs	r0, r3
   1dc6a:	4bd8      	ldr	r3, [pc, #864]	; (1dfcc <_http_client_request+0x6f8>)
   1dc6c:	4798      	blx	r3
   1dc6e:	0002      	movs	r2, r0
   1dc70:	2328      	movs	r3, #40	; 0x28
   1dc72:	2118      	movs	r1, #24
   1dc74:	1879      	adds	r1, r7, r1
   1dc76:	18c9      	adds	r1, r1, r3
   1dc78:	2334      	movs	r3, #52	; 0x34
   1dc7a:	2018      	movs	r0, #24
   1dc7c:	4684      	mov	ip, r0
   1dc7e:	44bc      	add	ip, r7
   1dc80:	4463      	add	r3, ip
   1dc82:	0018      	movs	r0, r3
   1dc84:	4bd0      	ldr	r3, [pc, #832]	; (1dfc8 <_http_client_request+0x6f4>)
   1dc86:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1dc88:	49d1      	ldr	r1, [pc, #836]	; (1dfd0 <_http_client_request+0x6fc>)
   1dc8a:	2334      	movs	r3, #52	; 0x34
   1dc8c:	2218      	movs	r2, #24
   1dc8e:	4694      	mov	ip, r2
   1dc90:	44bc      	add	ip, r7
   1dc92:	4463      	add	r3, ip
   1dc94:	2202      	movs	r2, #2
   1dc96:	0018      	movs	r0, r3
   1dc98:	4bcb      	ldr	r3, [pc, #812]	; (1dfc8 <_http_client_request+0x6f4>)
   1dc9a:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   1dc9c:	69fb      	ldr	r3, [r7, #28]
   1dc9e:	22d4      	movs	r2, #212	; 0xd4
   1dca0:	589b      	ldr	r3, [r3, r2]
   1dca2:	2b00      	cmp	r3, #0
   1dca4:	d012      	beq.n	1dccc <_http_client_request+0x3f8>
				module->req.ext_header,
   1dca6:	69fb      	ldr	r3, [r7, #28]
   1dca8:	22d4      	movs	r2, #212	; 0xd4
   1dcaa:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   1dcac:	69fb      	ldr	r3, [r7, #28]
   1dcae:	22d4      	movs	r2, #212	; 0xd4
   1dcb0:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   1dcb2:	0018      	movs	r0, r3
   1dcb4:	4bc5      	ldr	r3, [pc, #788]	; (1dfcc <_http_client_request+0x6f8>)
   1dcb6:	4798      	blx	r3
   1dcb8:	0002      	movs	r2, r0
   1dcba:	2334      	movs	r3, #52	; 0x34
   1dcbc:	2118      	movs	r1, #24
   1dcbe:	468c      	mov	ip, r1
   1dcc0:	44bc      	add	ip, r7
   1dcc2:	4463      	add	r3, ip
   1dcc4:	0021      	movs	r1, r4
   1dcc6:	0018      	movs	r0, r3
   1dcc8:	4bbf      	ldr	r3, [pc, #764]	; (1dfc8 <_http_client_request+0x6f4>)
   1dcca:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1dccc:	49c0      	ldr	r1, [pc, #768]	; (1dfd0 <_http_client_request+0x6fc>)
   1dcce:	2334      	movs	r3, #52	; 0x34
   1dcd0:	2218      	movs	r2, #24
   1dcd2:	4694      	mov	ip, r2
   1dcd4:	44bc      	add	ip, r7
   1dcd6:	4463      	add	r3, ip
   1dcd8:	2202      	movs	r2, #2
   1dcda:	0018      	movs	r0, r3
   1dcdc:	4bba      	ldr	r3, [pc, #744]	; (1dfc8 <_http_client_request+0x6f4>)
   1dcde:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   1dce0:	2334      	movs	r3, #52	; 0x34
   1dce2:	2218      	movs	r2, #24
   1dce4:	4694      	mov	ip, r2
   1dce6:	44bc      	add	ip, r7
   1dce8:	4463      	add	r3, ip
   1dcea:	0018      	movs	r0, r3
   1dcec:	4bb9      	ldr	r3, [pc, #740]	; (1dfd4 <_http_client_request+0x700>)
   1dcee:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   1dcf0:	69fb      	ldr	r3, [r7, #28]
   1dcf2:	2204      	movs	r2, #4
   1dcf4:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   1dcf6:	69fb      	ldr	r3, [r7, #28]
   1dcf8:	22cc      	movs	r2, #204	; 0xcc
   1dcfa:	589b      	ldr	r3, [r3, r2]
   1dcfc:	2b00      	cmp	r3, #0
   1dcfe:	db00      	blt.n	1dd02 <_http_client_request+0x42e>
   1dd00:	e0c6      	b.n	1de90 <_http_client_request+0x5bc>
   1dd02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1dd04:	68db      	ldr	r3, [r3, #12]
   1dd06:	2b00      	cmp	r3, #0
   1dd08:	d100      	bne.n	1dd0c <_http_client_request+0x438>
   1dd0a:	e0c1      	b.n	1de90 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1dd0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1dd0e:	68dc      	ldr	r4, [r3, #12]
   1dd10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1dd12:	6958      	ldr	r0, [r3, #20]
   1dd14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1dd16:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   1dd18:	69fb      	ldr	r3, [r7, #28]
   1dd1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1dd1c:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   1dd1e:	69fb      	ldr	r3, [r7, #28]
   1dd20:	22d0      	movs	r2, #208	; 0xd0
   1dd22:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1dd24:	002a      	movs	r2, r5
   1dd26:	47a0      	blx	r4
   1dd28:	0003      	movs	r3, r0
   1dd2a:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   1dd2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1dd2e:	2b00      	cmp	r3, #0
   1dd30:	da01      	bge.n	1dd36 <_http_client_request+0x462>
				size = 0;
   1dd32:	2300      	movs	r3, #0
   1dd34:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   1dd36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1dd38:	220a      	movs	r2, #10
   1dd3a:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   1dd3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1dd3e:	220d      	movs	r2, #13
   1dd40:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   1dd42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1dd44:	3305      	adds	r3, #5
   1dd46:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1dd48:	210d      	movs	r1, #13
   1dd4a:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   1dd4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1dd4e:	3306      	adds	r3, #6
   1dd50:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1dd52:	210a      	movs	r1, #10
   1dd54:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   1dd56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1dd58:	2b00      	cmp	r3, #0
   1dd5a:	db14      	blt.n	1dd86 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   1dd5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1dd5e:	3302      	adds	r3, #2
   1dd60:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   1dd62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1dd64:	4a9c      	ldr	r2, [pc, #624]	; (1dfd8 <_http_client_request+0x704>)
   1dd66:	4013      	ands	r3, r2
   1dd68:	d504      	bpl.n	1dd74 <_http_client_request+0x4a0>
   1dd6a:	3b01      	subs	r3, #1
   1dd6c:	2210      	movs	r2, #16
   1dd6e:	4252      	negs	r2, r2
   1dd70:	4313      	orrs	r3, r2
   1dd72:	3301      	adds	r3, #1
   1dd74:	001a      	movs	r2, r3
   1dd76:	2318      	movs	r3, #24
   1dd78:	2118      	movs	r1, #24
   1dd7a:	468c      	mov	ip, r1
   1dd7c:	44bc      	add	ip, r7
   1dd7e:	4463      	add	r3, ip
   1dd80:	5c9a      	ldrb	r2, [r3, r2]
   1dd82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1dd84:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   1dd86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1dd88:	2b0f      	cmp	r3, #15
   1dd8a:	dd19      	ble.n	1ddc0 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   1dd8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1dd8e:	3301      	adds	r3, #1
   1dd90:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   1dd92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1dd94:	2b00      	cmp	r3, #0
   1dd96:	da00      	bge.n	1dd9a <_http_client_request+0x4c6>
   1dd98:	330f      	adds	r3, #15
   1dd9a:	111b      	asrs	r3, r3, #4
   1dd9c:	001a      	movs	r2, r3
   1dd9e:	4b8e      	ldr	r3, [pc, #568]	; (1dfd8 <_http_client_request+0x704>)
   1dda0:	4013      	ands	r3, r2
   1dda2:	d504      	bpl.n	1ddae <_http_client_request+0x4da>
   1dda4:	3b01      	subs	r3, #1
   1dda6:	2210      	movs	r2, #16
   1dda8:	4252      	negs	r2, r2
   1ddaa:	4313      	orrs	r3, r2
   1ddac:	3301      	adds	r3, #1
   1ddae:	001a      	movs	r2, r3
   1ddb0:	2318      	movs	r3, #24
   1ddb2:	2118      	movs	r1, #24
   1ddb4:	468c      	mov	ip, r1
   1ddb6:	44bc      	add	ip, r7
   1ddb8:	4463      	add	r3, ip
   1ddba:	5c9a      	ldrb	r2, [r3, r2]
   1ddbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1ddbe:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   1ddc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1ddc2:	2bff      	cmp	r3, #255	; 0xff
   1ddc4:	dd18      	ble.n	1ddf8 <_http_client_request+0x524>
				ptr = buffer;
   1ddc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1ddc8:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   1ddca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1ddcc:	2b00      	cmp	r3, #0
   1ddce:	da00      	bge.n	1ddd2 <_http_client_request+0x4fe>
   1ddd0:	33ff      	adds	r3, #255	; 0xff
   1ddd2:	121b      	asrs	r3, r3, #8
   1ddd4:	001a      	movs	r2, r3
   1ddd6:	4b80      	ldr	r3, [pc, #512]	; (1dfd8 <_http_client_request+0x704>)
   1ddd8:	4013      	ands	r3, r2
   1ddda:	d504      	bpl.n	1dde6 <_http_client_request+0x512>
   1dddc:	3b01      	subs	r3, #1
   1ddde:	2210      	movs	r2, #16
   1dde0:	4252      	negs	r2, r2
   1dde2:	4313      	orrs	r3, r2
   1dde4:	3301      	adds	r3, #1
   1dde6:	001a      	movs	r2, r3
   1dde8:	2318      	movs	r3, #24
   1ddea:	2118      	movs	r1, #24
   1ddec:	468c      	mov	ip, r1
   1ddee:	44bc      	add	ip, r7
   1ddf0:	4463      	add	r3, ip
   1ddf2:	5c9a      	ldrb	r2, [r3, r2]
   1ddf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1ddf6:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   1ddf8:	69fb      	ldr	r3, [r7, #28]
   1ddfa:	2000      	movs	r0, #0
   1ddfc:	5618      	ldrsb	r0, [r3, r0]
   1ddfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1de00:	3303      	adds	r3, #3
   1de02:	001a      	movs	r2, r3
   1de04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1de06:	1ad3      	subs	r3, r2, r3
   1de08:	b29a      	uxth	r2, r3
   1de0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1de0c:	b29b      	uxth	r3, r3
   1de0e:	18d3      	adds	r3, r2, r3
   1de10:	b29b      	uxth	r3, r3
   1de12:	3304      	adds	r3, #4
   1de14:	b29a      	uxth	r2, r3
   1de16:	6f39      	ldr	r1, [r7, #112]	; 0x70
   1de18:	2300      	movs	r3, #0
   1de1a:	4c70      	ldr	r4, [pc, #448]	; (1dfdc <_http_client_request+0x708>)
   1de1c:	47a0      	blx	r4
   1de1e:	0003      	movs	r3, r0
   1de20:	663b      	str	r3, [r7, #96]	; 0x60
   1de22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1de24:	2b00      	cmp	r3, #0
   1de26:	da07      	bge.n	1de38 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   1de28:	2305      	movs	r3, #5
   1de2a:	425a      	negs	r2, r3
   1de2c:	69fb      	ldr	r3, [r7, #28]
   1de2e:	0011      	movs	r1, r2
   1de30:	0018      	movs	r0, r3
   1de32:	4b6b      	ldr	r3, [pc, #428]	; (1dfe0 <_http_client_request+0x70c>)
   1de34:	4798      	blx	r3
				return;
   1de36:	e0e1      	b.n	1dffc <_http_client_request+0x728>
			module->req.sent_length += size;
   1de38:	69fb      	ldr	r3, [r7, #28]
   1de3a:	22d0      	movs	r2, #208	; 0xd0
   1de3c:	589a      	ldr	r2, [r3, r2]
   1de3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1de40:	18d2      	adds	r2, r2, r3
   1de42:	69fb      	ldr	r3, [r7, #28]
   1de44:	21d0      	movs	r1, #208	; 0xd0
   1de46:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   1de48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1de4a:	2b00      	cmp	r3, #0
   1de4c:	d000      	beq.n	1de50 <_http_client_request+0x57c>
   1de4e:	e0c9      	b.n	1dfe4 <_http_client_request+0x710>
				if (module->req.entity.close) {
   1de50:	69fb      	ldr	r3, [r7, #28]
   1de52:	22c0      	movs	r2, #192	; 0xc0
   1de54:	589b      	ldr	r3, [r3, r2]
   1de56:	2b00      	cmp	r3, #0
   1de58:	d007      	beq.n	1de6a <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   1de5a:	69fb      	ldr	r3, [r7, #28]
   1de5c:	22c0      	movs	r2, #192	; 0xc0
   1de5e:	589b      	ldr	r3, [r3, r2]
   1de60:	69fa      	ldr	r2, [r7, #28]
   1de62:	21c4      	movs	r1, #196	; 0xc4
   1de64:	5852      	ldr	r2, [r2, r1]
   1de66:	0010      	movs	r0, r2
   1de68:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   1de6a:	69fb      	ldr	r3, [r7, #28]
   1de6c:	2202      	movs	r2, #2
   1de6e:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   1de70:	69fb      	ldr	r3, [r7, #28]
   1de72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1de74:	2b00      	cmp	r3, #0
   1de76:	d100      	bne.n	1de7a <_http_client_request+0x5a6>
   1de78:	e0b5      	b.n	1dfe6 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1de7a:	69fb      	ldr	r3, [r7, #28]
   1de7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1de7e:	220c      	movs	r2, #12
   1de80:	2118      	movs	r1, #24
   1de82:	468c      	mov	ip, r1
   1de84:	44bc      	add	ip, r7
   1de86:	4462      	add	r2, ip
   1de88:	69f8      	ldr	r0, [r7, #28]
   1de8a:	2101      	movs	r1, #1
   1de8c:	4798      	blx	r3
				break;
   1de8e:	e0aa      	b.n	1dfe6 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   1de90:	69fb      	ldr	r3, [r7, #28]
   1de92:	22cc      	movs	r2, #204	; 0xcc
   1de94:	589b      	ldr	r3, [r3, r2]
   1de96:	2b00      	cmp	r3, #0
   1de98:	dc00      	bgt.n	1de9c <_http_client_request+0x5c8>
   1de9a:	e07c      	b.n	1df96 <_http_client_request+0x6c2>
   1de9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1de9e:	68db      	ldr	r3, [r3, #12]
   1dea0:	2b00      	cmp	r3, #0
   1dea2:	d100      	bne.n	1dea6 <_http_client_request+0x5d2>
   1dea4:	e077      	b.n	1df96 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   1dea6:	69fb      	ldr	r3, [r7, #28]
   1dea8:	22d0      	movs	r2, #208	; 0xd0
   1deaa:	589a      	ldr	r2, [r3, r2]
   1deac:	69fb      	ldr	r3, [r7, #28]
   1deae:	21cc      	movs	r1, #204	; 0xcc
   1deb0:	585b      	ldr	r3, [r3, r1]
   1deb2:	429a      	cmp	r2, r3
   1deb4:	db1f      	blt.n	1def6 <_http_client_request+0x622>
				if (module->req.entity.close) {
   1deb6:	69fb      	ldr	r3, [r7, #28]
   1deb8:	22c0      	movs	r2, #192	; 0xc0
   1deba:	589b      	ldr	r3, [r3, r2]
   1debc:	2b00      	cmp	r3, #0
   1debe:	d007      	beq.n	1ded0 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   1dec0:	69fb      	ldr	r3, [r7, #28]
   1dec2:	22c0      	movs	r2, #192	; 0xc0
   1dec4:	589b      	ldr	r3, [r3, r2]
   1dec6:	69fa      	ldr	r2, [r7, #28]
   1dec8:	21c4      	movs	r1, #196	; 0xc4
   1deca:	5852      	ldr	r2, [r2, r1]
   1decc:	0010      	movs	r0, r2
   1dece:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   1ded0:	69fb      	ldr	r3, [r7, #28]
   1ded2:	2202      	movs	r2, #2
   1ded4:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   1ded6:	69fb      	ldr	r3, [r7, #28]
   1ded8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1deda:	2b00      	cmp	r3, #0
   1dedc:	d100      	bne.n	1dee0 <_http_client_request+0x60c>
   1dede:	e084      	b.n	1dfea <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1dee0:	69fb      	ldr	r3, [r7, #28]
   1dee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1dee4:	220c      	movs	r2, #12
   1dee6:	2118      	movs	r1, #24
   1dee8:	468c      	mov	ip, r1
   1deea:	44bc      	add	ip, r7
   1deec:	4462      	add	r2, ip
   1deee:	69f8      	ldr	r0, [r7, #28]
   1def0:	2101      	movs	r1, #1
   1def2:	4798      	blx	r3
				break;
   1def4:	e079      	b.n	1dfea <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   1def6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1def8:	68dc      	ldr	r4, [r3, #12]
   1defa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1defc:	6958      	ldr	r0, [r3, #20]
   1defe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1df00:	69fb      	ldr	r3, [r7, #28]
   1df02:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   1df04:	69fb      	ldr	r3, [r7, #28]
   1df06:	22d0      	movs	r2, #208	; 0xd0
   1df08:	589b      	ldr	r3, [r3, r2]
   1df0a:	002a      	movs	r2, r5
   1df0c:	47a0      	blx	r4
   1df0e:	0003      	movs	r3, r0
   1df10:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   1df12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1df14:	2b00      	cmp	r3, #0
   1df16:	da0d      	bge.n	1df34 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   1df18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1df1a:	2b00      	cmp	r3, #0
   1df1c:	d102      	bne.n	1df24 <_http_client_request+0x650>
   1df1e:	234d      	movs	r3, #77	; 0x4d
   1df20:	425b      	negs	r3, r3
   1df22:	e001      	b.n	1df28 <_http_client_request+0x654>
   1df24:	2305      	movs	r3, #5
   1df26:	425b      	negs	r3, r3
   1df28:	69fa      	ldr	r2, [r7, #28]
   1df2a:	0019      	movs	r1, r3
   1df2c:	0010      	movs	r0, r2
   1df2e:	4b2c      	ldr	r3, [pc, #176]	; (1dfe0 <_http_client_request+0x70c>)
   1df30:	4798      	blx	r3
			if (size < 0) {
   1df32:	e057      	b.n	1dfe4 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   1df34:	69fb      	ldr	r3, [r7, #28]
   1df36:	22cc      	movs	r2, #204	; 0xcc
   1df38:	589a      	ldr	r2, [r3, r2]
   1df3a:	69fb      	ldr	r3, [r7, #28]
   1df3c:	21d0      	movs	r1, #208	; 0xd0
   1df3e:	585b      	ldr	r3, [r3, r1]
   1df40:	1ad2      	subs	r2, r2, r3
   1df42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1df44:	429a      	cmp	r2, r3
   1df46:	da07      	bge.n	1df58 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   1df48:	69fb      	ldr	r3, [r7, #28]
   1df4a:	22cc      	movs	r2, #204	; 0xcc
   1df4c:	589a      	ldr	r2, [r3, r2]
   1df4e:	69fb      	ldr	r3, [r7, #28]
   1df50:	21d0      	movs	r1, #208	; 0xd0
   1df52:	585b      	ldr	r3, [r3, r1]
   1df54:	1ad3      	subs	r3, r2, r3
   1df56:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   1df58:	69fb      	ldr	r3, [r7, #28]
   1df5a:	2000      	movs	r0, #0
   1df5c:	5618      	ldrsb	r0, [r3, r0]
   1df5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1df60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1df62:	b29a      	uxth	r2, r3
   1df64:	2300      	movs	r3, #0
   1df66:	4c1d      	ldr	r4, [pc, #116]	; (1dfdc <_http_client_request+0x708>)
   1df68:	47a0      	blx	r4
   1df6a:	0003      	movs	r3, r0
   1df6c:	663b      	str	r3, [r7, #96]	; 0x60
   1df6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1df70:	2b00      	cmp	r3, #0
   1df72:	da07      	bge.n	1df84 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   1df74:	2305      	movs	r3, #5
   1df76:	425a      	negs	r2, r3
   1df78:	69fb      	ldr	r3, [r7, #28]
   1df7a:	0011      	movs	r1, r2
   1df7c:	0018      	movs	r0, r3
   1df7e:	4b18      	ldr	r3, [pc, #96]	; (1dfe0 <_http_client_request+0x70c>)
   1df80:	4798      	blx	r3
					return;
   1df82:	e03b      	b.n	1dffc <_http_client_request+0x728>
				module->req.sent_length += size;
   1df84:	69fb      	ldr	r3, [r7, #28]
   1df86:	22d0      	movs	r2, #208	; 0xd0
   1df88:	589a      	ldr	r2, [r3, r2]
   1df8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1df8c:	18d2      	adds	r2, r2, r3
   1df8e:	69fb      	ldr	r3, [r7, #28]
   1df90:	21d0      	movs	r1, #208	; 0xd0
   1df92:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   1df94:	e026      	b.n	1dfe4 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   1df96:	69fb      	ldr	r3, [r7, #28]
   1df98:	2202      	movs	r2, #2
   1df9a:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   1df9c:	69fb      	ldr	r3, [r7, #28]
   1df9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1dfa0:	2b00      	cmp	r3, #0
   1dfa2:	d024      	beq.n	1dfee <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1dfa4:	69fb      	ldr	r3, [r7, #28]
   1dfa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1dfa8:	220c      	movs	r2, #12
   1dfaa:	2118      	movs	r1, #24
   1dfac:	468c      	mov	ip, r1
   1dfae:	44bc      	add	ip, r7
   1dfb0:	4462      	add	r2, ip
   1dfb2:	69f8      	ldr	r0, [r7, #28]
   1dfb4:	2101      	movs	r1, #1
   1dfb6:	4798      	blx	r3
			break;
   1dfb8:	e019      	b.n	1dfee <_http_client_request+0x71a>
   1dfba:	46c0      	nop			; (mov r8, r8)
   1dfbc:	00026cd8 	.word	0x00026cd8
   1dfc0:	00021049 	.word	0x00021049
   1dfc4:	00026cdc 	.word	0x00026cdc
   1dfc8:	0001e835 	.word	0x0001e835
   1dfcc:	00021143 	.word	0x00021143
   1dfd0:	00026c64 	.word	0x00026c64
   1dfd4:	0001e871 	.word	0x0001e871
   1dfd8:	8000000f 	.word	0x8000000f
   1dfdc:	00011db9 	.word	0x00011db9
   1dfe0:	0001d781 	.word	0x0001d781
		break;
   1dfe4:	e004      	b.n	1dff0 <_http_client_request+0x71c>
				break;
   1dfe6:	46c0      	nop			; (mov r8, r8)
   1dfe8:	e002      	b.n	1dff0 <_http_client_request+0x71c>
				break;
   1dfea:	46c0      	nop			; (mov r8, r8)
   1dfec:	e000      	b.n	1dff0 <_http_client_request+0x71c>
			break;
   1dfee:	46c0      	nop			; (mov r8, r8)
   1dff0:	69bb      	ldr	r3, [r7, #24]
   1dff2:	469d      	mov	sp, r3
   1dff4:	e004      	b.n	1e000 <_http_client_request+0x72c>
		return;
   1dff6:	46c0      	nop			; (mov r8, r8)
   1dff8:	e000      	b.n	1dffc <_http_client_request+0x728>
		return;
   1dffa:	46c0      	nop			; (mov r8, r8)
   1dffc:	69bb      	ldr	r3, [r7, #24]
   1dffe:	469d      	mov	sp, r3
	}
}
   1e000:	46bd      	mov	sp, r7
   1e002:	b01e      	add	sp, #120	; 0x78
   1e004:	bc04      	pop	{r2}
   1e006:	4690      	mov	r8, r2
   1e008:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e00a:	46c0      	nop			; (mov r8, r8)

0001e00c <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   1e00c:	b590      	push	{r4, r7, lr}
   1e00e:	b083      	sub	sp, #12
   1e010:	af00      	add	r7, sp, #0
   1e012:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   1e014:	687b      	ldr	r3, [r7, #4]
   1e016:	2b00      	cmp	r3, #0
   1e018:	d021      	beq.n	1e05e <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   1e01a:	687b      	ldr	r3, [r7, #4]
   1e01c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1e01e:	687b      	ldr	r3, [r7, #4]
   1e020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1e022:	429a      	cmp	r2, r3
   1e024:	d307      	bcc.n	1e036 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   1e026:	238b      	movs	r3, #139	; 0x8b
   1e028:	425a      	negs	r2, r3
   1e02a:	687b      	ldr	r3, [r7, #4]
   1e02c:	0011      	movs	r1, r2
   1e02e:	0018      	movs	r0, r3
   1e030:	4b0d      	ldr	r3, [pc, #52]	; (1e068 <_http_client_recv_packet+0x5c>)
   1e032:	4798      	blx	r3
		return;
   1e034:	e014      	b.n	1e060 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   1e036:	687b      	ldr	r3, [r7, #4]
   1e038:	2000      	movs	r0, #0
   1e03a:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   1e03c:	687b      	ldr	r3, [r7, #4]
   1e03e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1e040:	687b      	ldr	r3, [r7, #4]
   1e042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e044:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   1e046:	687b      	ldr	r3, [r7, #4]
   1e048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   1e04a:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   1e04c:	687b      	ldr	r3, [r7, #4]
   1e04e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   1e050:	b29b      	uxth	r3, r3
   1e052:	1ad3      	subs	r3, r2, r3
   1e054:	b29a      	uxth	r2, r3
   1e056:	2300      	movs	r3, #0
   1e058:	4c04      	ldr	r4, [pc, #16]	; (1e06c <_http_client_recv_packet+0x60>)
   1e05a:	47a0      	blx	r4
   1e05c:	e000      	b.n	1e060 <_http_client_recv_packet+0x54>
		return;
   1e05e:	46c0      	nop			; (mov r8, r8)
}
   1e060:	46bd      	mov	sp, r7
   1e062:	b003      	add	sp, #12
   1e064:	bd90      	pop	{r4, r7, pc}
   1e066:	46c0      	nop			; (mov r8, r8)
   1e068:	0001d781 	.word	0x0001d781
   1e06c:	00011f1d 	.word	0x00011f1d

0001e070 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   1e070:	b580      	push	{r7, lr}
   1e072:	b082      	sub	sp, #8
   1e074:	af00      	add	r7, sp, #0
   1e076:	6078      	str	r0, [r7, #4]
   1e078:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   1e07a:	687b      	ldr	r3, [r7, #4]
   1e07c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1e07e:	683b      	ldr	r3, [r7, #0]
   1e080:	18d2      	adds	r2, r2, r3
   1e082:	687b      	ldr	r3, [r7, #4]
   1e084:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   1e086:	687b      	ldr	r3, [r7, #4]
   1e088:	2258      	movs	r2, #88	; 0x58
   1e08a:	5a9b      	ldrh	r3, [r3, r2]
   1e08c:	2b00      	cmp	r3, #0
   1e08e:	d007      	beq.n	1e0a0 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   1e090:	687b      	ldr	r3, [r7, #4]
   1e092:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1e094:	687b      	ldr	r3, [r7, #4]
   1e096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1e098:	0019      	movs	r1, r3
   1e09a:	0010      	movs	r0, r2
   1e09c:	4b06      	ldr	r3, [pc, #24]	; (1e0b8 <_http_client_recved_packet+0x48>)
   1e09e:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   1e0a0:	46c0      	nop			; (mov r8, r8)
   1e0a2:	687b      	ldr	r3, [r7, #4]
   1e0a4:	0018      	movs	r0, r3
   1e0a6:	4b05      	ldr	r3, [pc, #20]	; (1e0bc <_http_client_recved_packet+0x4c>)
   1e0a8:	4798      	blx	r3
   1e0aa:	1e03      	subs	r3, r0, #0
   1e0ac:	d1f9      	bne.n	1e0a2 <_http_client_recved_packet+0x32>
}
   1e0ae:	46c0      	nop			; (mov r8, r8)
   1e0b0:	46bd      	mov	sp, r7
   1e0b2:	b002      	add	sp, #8
   1e0b4:	bd80      	pop	{r7, pc}
   1e0b6:	46c0      	nop			; (mov r8, r8)
   1e0b8:	0001eb2d 	.word	0x0001eb2d
   1e0bc:	0001e0c1 	.word	0x0001e0c1

0001e0c0 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   1e0c0:	b580      	push	{r7, lr}
   1e0c2:	b082      	sub	sp, #8
   1e0c4:	af00      	add	r7, sp, #0
   1e0c6:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   1e0c8:	687b      	ldr	r3, [r7, #4]
   1e0ca:	22d8      	movs	r2, #216	; 0xd8
   1e0cc:	589b      	ldr	r3, [r3, r2]
   1e0ce:	2b00      	cmp	r3, #0
   1e0d0:	d002      	beq.n	1e0d8 <_http_client_handle_response+0x18>
   1e0d2:	2b01      	cmp	r3, #1
   1e0d4:	d006      	beq.n	1e0e4 <_http_client_handle_response+0x24>
   1e0d6:	e00b      	b.n	1e0f0 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   1e0d8:	687b      	ldr	r3, [r7, #4]
   1e0da:	0018      	movs	r0, r3
   1e0dc:	4b07      	ldr	r3, [pc, #28]	; (1e0fc <_http_client_handle_response+0x3c>)
   1e0de:	4798      	blx	r3
   1e0e0:	0003      	movs	r3, r0
   1e0e2:	e006      	b.n	1e0f2 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   1e0e4:	687b      	ldr	r3, [r7, #4]
   1e0e6:	0018      	movs	r0, r3
   1e0e8:	4b05      	ldr	r3, [pc, #20]	; (1e100 <_http_client_handle_response+0x40>)
   1e0ea:	4798      	blx	r3
   1e0ec:	0003      	movs	r3, r0
   1e0ee:	e000      	b.n	1e0f2 <_http_client_handle_response+0x32>
	}
	return 0;
   1e0f0:	2300      	movs	r3, #0
}
   1e0f2:	0018      	movs	r0, r3
   1e0f4:	46bd      	mov	sp, r7
   1e0f6:	b002      	add	sp, #8
   1e0f8:	bd80      	pop	{r7, pc}
   1e0fa:	46c0      	nop			; (mov r8, r8)
   1e0fc:	0001e105 	.word	0x0001e105
   1e100:	0001e5bd 	.word	0x0001e5bd

0001e104 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   1e104:	b590      	push	{r4, r7, lr}
   1e106:	b08b      	sub	sp, #44	; 0x2c
   1e108:	af00      	add	r7, sp, #0
   1e10a:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   1e10c:	687b      	ldr	r3, [r7, #4]
   1e10e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1e110:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   1e112:	4b9a      	ldr	r3, [pc, #616]	; (1e37c <_http_client_handle_header+0x278>)
   1e114:	681a      	ldr	r2, [r3, #0]
   1e116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e118:	0011      	movs	r1, r2
   1e11a:	0018      	movs	r0, r3
   1e11c:	4b98      	ldr	r3, [pc, #608]	; (1e380 <_http_client_handle_header+0x27c>)
   1e11e:	4798      	blx	r3
   1e120:	0003      	movs	r3, r0
   1e122:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   1e124:	69bb      	ldr	r3, [r7, #24]
   1e126:	2b00      	cmp	r3, #0
   1e128:	d007      	beq.n	1e13a <_http_client_handle_header+0x36>
   1e12a:	687b      	ldr	r3, [r7, #4]
   1e12c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1e12e:	687b      	ldr	r3, [r7, #4]
   1e130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e132:	18d2      	adds	r2, r2, r3
   1e134:	69bb      	ldr	r3, [r7, #24]
   1e136:	429a      	cmp	r2, r3
   1e138:	d807      	bhi.n	1e14a <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   1e13a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e13c:	687b      	ldr	r3, [r7, #4]
   1e13e:	0011      	movs	r1, r2
   1e140:	0018      	movs	r0, r3
   1e142:	4b90      	ldr	r3, [pc, #576]	; (1e384 <_http_client_handle_header+0x280>)
   1e144:	4798      	blx	r3
			return 0;
   1e146:	2300      	movs	r3, #0
   1e148:	e114      	b.n	1e374 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   1e14a:	4b8c      	ldr	r3, [pc, #560]	; (1e37c <_http_client_handle_header+0x278>)
   1e14c:	681c      	ldr	r4, [r3, #0]
   1e14e:	4b8b      	ldr	r3, [pc, #556]	; (1e37c <_http_client_handle_header+0x278>)
   1e150:	681b      	ldr	r3, [r3, #0]
   1e152:	0018      	movs	r0, r3
   1e154:	4b8c      	ldr	r3, [pc, #560]	; (1e388 <_http_client_handle_header+0x284>)
   1e156:	4798      	blx	r3
   1e158:	0002      	movs	r2, r0
   1e15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e15c:	0021      	movs	r1, r4
   1e15e:	0018      	movs	r0, r3
   1e160:	4b8a      	ldr	r3, [pc, #552]	; (1e38c <_http_client_handle_header+0x288>)
   1e162:	4798      	blx	r3
   1e164:	1e03      	subs	r3, r0, #0
   1e166:	d15d      	bne.n	1e224 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   1e168:	4b84      	ldr	r3, [pc, #528]	; (1e37c <_http_client_handle_header+0x278>)
   1e16a:	681b      	ldr	r3, [r3, #0]
   1e16c:	0018      	movs	r0, r3
   1e16e:	4b86      	ldr	r3, [pc, #536]	; (1e388 <_http_client_handle_header+0x284>)
   1e170:	4798      	blx	r3
   1e172:	0002      	movs	r2, r0
   1e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e176:	189a      	adds	r2, r3, r2
   1e178:	687b      	ldr	r3, [r7, #4]
   1e17a:	0011      	movs	r1, r2
   1e17c:	0018      	movs	r0, r3
   1e17e:	4b81      	ldr	r3, [pc, #516]	; (1e384 <_http_client_handle_header+0x280>)
   1e180:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   1e182:	687b      	ldr	r3, [r7, #4]
   1e184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e186:	2b00      	cmp	r3, #0
   1e188:	d046      	beq.n	1e218 <_http_client_handle_header+0x114>
   1e18a:	687b      	ldr	r3, [r7, #4]
   1e18c:	22e4      	movs	r2, #228	; 0xe4
   1e18e:	5a9b      	ldrh	r3, [r3, r2]
   1e190:	2b00      	cmp	r3, #0
   1e192:	d041      	beq.n	1e218 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   1e194:	687b      	ldr	r3, [r7, #4]
   1e196:	22dc      	movs	r2, #220	; 0xdc
   1e198:	589b      	ldr	r3, [r3, r2]
   1e19a:	2b00      	cmp	r3, #0
   1e19c:	da19      	bge.n	1e1d2 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   1e19e:	687b      	ldr	r3, [r7, #4]
   1e1a0:	22e4      	movs	r2, #228	; 0xe4
   1e1a2:	5a9a      	ldrh	r2, [r3, r2]
   1e1a4:	230c      	movs	r3, #12
   1e1a6:	18fb      	adds	r3, r7, r3
   1e1a8:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   1e1aa:	230c      	movs	r3, #12
   1e1ac:	18fb      	adds	r3, r7, r3
   1e1ae:	2201      	movs	r2, #1
   1e1b0:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   1e1b2:	687b      	ldr	r3, [r7, #4]
   1e1b4:	22e0      	movs	r2, #224	; 0xe0
   1e1b6:	2100      	movs	r1, #0
   1e1b8:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   1e1ba:	230c      	movs	r3, #12
   1e1bc:	18fb      	adds	r3, r7, r3
   1e1be:	2200      	movs	r2, #0
   1e1c0:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1e1c2:	687b      	ldr	r3, [r7, #4]
   1e1c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e1c6:	220c      	movs	r2, #12
   1e1c8:	18ba      	adds	r2, r7, r2
   1e1ca:	6878      	ldr	r0, [r7, #4]
   1e1cc:	2102      	movs	r1, #2
   1e1ce:	4798      	blx	r3
   1e1d0:	e022      	b.n	1e218 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   1e1d2:	687b      	ldr	r3, [r7, #4]
   1e1d4:	22dc      	movs	r2, #220	; 0xdc
   1e1d6:	589a      	ldr	r2, [r3, r2]
   1e1d8:	687b      	ldr	r3, [r7, #4]
   1e1da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1e1dc:	429a      	cmp	r2, r3
   1e1de:	dd1b      	ble.n	1e218 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   1e1e0:	687b      	ldr	r3, [r7, #4]
   1e1e2:	22e4      	movs	r2, #228	; 0xe4
   1e1e4:	5a9a      	ldrh	r2, [r3, r2]
   1e1e6:	230c      	movs	r3, #12
   1e1e8:	18fb      	adds	r3, r7, r3
   1e1ea:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   1e1ec:	687b      	ldr	r3, [r7, #4]
   1e1ee:	22dc      	movs	r2, #220	; 0xdc
   1e1f0:	589b      	ldr	r3, [r3, r2]
   1e1f2:	001a      	movs	r2, r3
   1e1f4:	230c      	movs	r3, #12
   1e1f6:	18fb      	adds	r3, r7, r3
   1e1f8:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   1e1fa:	230c      	movs	r3, #12
   1e1fc:	18fb      	adds	r3, r7, r3
   1e1fe:	2200      	movs	r2, #0
   1e200:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   1e202:	687b      	ldr	r3, [r7, #4]
   1e204:	22e0      	movs	r2, #224	; 0xe0
   1e206:	2100      	movs	r1, #0
   1e208:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1e20a:	687b      	ldr	r3, [r7, #4]
   1e20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e20e:	220c      	movs	r2, #12
   1e210:	18ba      	adds	r2, r7, r2
   1e212:	6878      	ldr	r0, [r7, #4]
   1e214:	2102      	movs	r1, #2
   1e216:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   1e218:	687b      	ldr	r3, [r7, #4]
   1e21a:	22d8      	movs	r2, #216	; 0xd8
   1e21c:	2101      	movs	r1, #1
   1e21e:	5099      	str	r1, [r3, r2]
			return 1;
   1e220:	2301      	movs	r3, #1
   1e222:	e0a7      	b.n	1e374 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   1e224:	495a      	ldr	r1, [pc, #360]	; (1e390 <_http_client_handle_header+0x28c>)
   1e226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e228:	2210      	movs	r2, #16
   1e22a:	0018      	movs	r0, r3
   1e22c:	4b57      	ldr	r3, [pc, #348]	; (1e38c <_http_client_handle_header+0x288>)
   1e22e:	4798      	blx	r3
   1e230:	1e03      	subs	r3, r0, #0
   1e232:	d109      	bne.n	1e248 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   1e234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e236:	3310      	adds	r3, #16
   1e238:	0018      	movs	r0, r3
   1e23a:	4b56      	ldr	r3, [pc, #344]	; (1e394 <_http_client_handle_header+0x290>)
   1e23c:	4798      	blx	r3
   1e23e:	0001      	movs	r1, r0
   1e240:	687b      	ldr	r3, [r7, #4]
   1e242:	22dc      	movs	r2, #220	; 0xdc
   1e244:	5099      	str	r1, [r3, r2]
   1e246:	e08b      	b.n	1e360 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   1e248:	4953      	ldr	r1, [pc, #332]	; (1e398 <_http_client_handle_header+0x294>)
   1e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e24c:	2213      	movs	r2, #19
   1e24e:	0018      	movs	r0, r3
   1e250:	4b4e      	ldr	r3, [pc, #312]	; (1e38c <_http_client_handle_header+0x288>)
   1e252:	4798      	blx	r3
   1e254:	1e03      	subs	r3, r0, #0
   1e256:	d127      	bne.n	1e2a8 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   1e258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e25a:	3313      	adds	r3, #19
   1e25c:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1e25e:	e01e      	b.n	1e29e <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   1e260:	6a3b      	ldr	r3, [r7, #32]
   1e262:	781b      	ldrb	r3, [r3, #0]
   1e264:	2b20      	cmp	r3, #32
   1e266:	d103      	bne.n	1e270 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1e268:	6a3b      	ldr	r3, [r7, #32]
   1e26a:	3301      	adds	r3, #1
   1e26c:	623b      	str	r3, [r7, #32]
   1e26e:	e016      	b.n	1e29e <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   1e270:	6a3b      	ldr	r3, [r7, #32]
   1e272:	781b      	ldrb	r3, [r3, #0]
   1e274:	2b43      	cmp	r3, #67	; 0x43
   1e276:	d003      	beq.n	1e280 <_http_client_handle_header+0x17c>
   1e278:	6a3b      	ldr	r3, [r7, #32]
   1e27a:	781b      	ldrb	r3, [r3, #0]
   1e27c:	2b63      	cmp	r3, #99	; 0x63
   1e27e:	d105      	bne.n	1e28c <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   1e280:	687b      	ldr	r3, [r7, #4]
   1e282:	21cc      	movs	r1, #204	; 0xcc
   1e284:	2201      	movs	r2, #1
   1e286:	4252      	negs	r2, r2
   1e288:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   1e28a:	e069      	b.n	1e360 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   1e28c:	2386      	movs	r3, #134	; 0x86
   1e28e:	425a      	negs	r2, r3
   1e290:	687b      	ldr	r3, [r7, #4]
   1e292:	0011      	movs	r1, r2
   1e294:	0018      	movs	r0, r3
   1e296:	4b41      	ldr	r3, [pc, #260]	; (1e39c <_http_client_handle_header+0x298>)
   1e298:	4798      	blx	r3
					return 0;
   1e29a:	2300      	movs	r3, #0
   1e29c:	e06a      	b.n	1e374 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1e29e:	69ba      	ldr	r2, [r7, #24]
   1e2a0:	6a3b      	ldr	r3, [r7, #32]
   1e2a2:	429a      	cmp	r2, r3
   1e2a4:	d8dc      	bhi.n	1e260 <_http_client_handle_header+0x15c>
   1e2a6:	e05b      	b.n	1e360 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   1e2a8:	493d      	ldr	r1, [pc, #244]	; (1e3a0 <_http_client_handle_header+0x29c>)
   1e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e2ac:	220c      	movs	r2, #12
   1e2ae:	0018      	movs	r0, r3
   1e2b0:	4b36      	ldr	r3, [pc, #216]	; (1e38c <_http_client_handle_header+0x288>)
   1e2b2:	4798      	blx	r3
   1e2b4:	1e03      	subs	r3, r0, #0
   1e2b6:	d126      	bne.n	1e306 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   1e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e2ba:	330c      	adds	r3, #12
   1e2bc:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1e2be:	e01d      	b.n	1e2fc <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   1e2c0:	69fb      	ldr	r3, [r7, #28]
   1e2c2:	781b      	ldrb	r3, [r3, #0]
   1e2c4:	2b20      	cmp	r3, #32
   1e2c6:	d103      	bne.n	1e2d0 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1e2c8:	69fb      	ldr	r3, [r7, #28]
   1e2ca:	3301      	adds	r3, #1
   1e2cc:	61fb      	str	r3, [r7, #28]
   1e2ce:	e015      	b.n	1e2fc <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   1e2d0:	69fb      	ldr	r3, [r7, #28]
   1e2d2:	781b      	ldrb	r3, [r3, #0]
   1e2d4:	2b4b      	cmp	r3, #75	; 0x4b
   1e2d6:	d003      	beq.n	1e2e0 <_http_client_handle_header+0x1dc>
   1e2d8:	69fb      	ldr	r3, [r7, #28]
   1e2da:	781b      	ldrb	r3, [r3, #0]
   1e2dc:	2b6b      	cmp	r3, #107	; 0x6b
   1e2de:	d106      	bne.n	1e2ee <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   1e2e0:	687b      	ldr	r3, [r7, #4]
   1e2e2:	2241      	movs	r2, #65	; 0x41
   1e2e4:	5c99      	ldrb	r1, [r3, r2]
   1e2e6:	2002      	movs	r0, #2
   1e2e8:	4301      	orrs	r1, r0
   1e2ea:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   1e2ec:	e038      	b.n	1e360 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   1e2ee:	687b      	ldr	r3, [r7, #4]
   1e2f0:	2241      	movs	r2, #65	; 0x41
   1e2f2:	5c99      	ldrb	r1, [r3, r2]
   1e2f4:	2002      	movs	r0, #2
   1e2f6:	4381      	bics	r1, r0
   1e2f8:	5499      	strb	r1, [r3, r2]
				break;
   1e2fa:	e031      	b.n	1e360 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1e2fc:	69ba      	ldr	r2, [r7, #24]
   1e2fe:	69fb      	ldr	r3, [r7, #28]
   1e300:	429a      	cmp	r2, r3
   1e302:	d8dd      	bhi.n	1e2c0 <_http_client_handle_header+0x1bc>
   1e304:	e02c      	b.n	1e360 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   1e306:	4927      	ldr	r1, [pc, #156]	; (1e3a4 <_http_client_handle_header+0x2a0>)
   1e308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e30a:	2205      	movs	r2, #5
   1e30c:	0018      	movs	r0, r3
   1e30e:	4b1f      	ldr	r3, [pc, #124]	; (1e38c <_http_client_handle_header+0x288>)
   1e310:	4798      	blx	r3
   1e312:	1e03      	subs	r3, r0, #0
   1e314:	d124      	bne.n	1e360 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   1e316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e318:	3309      	adds	r3, #9
   1e31a:	0018      	movs	r0, r3
   1e31c:	4b1d      	ldr	r3, [pc, #116]	; (1e394 <_http_client_handle_header+0x290>)
   1e31e:	4798      	blx	r3
   1e320:	0003      	movs	r3, r0
   1e322:	b299      	uxth	r1, r3
   1e324:	687b      	ldr	r3, [r7, #4]
   1e326:	22e4      	movs	r2, #228	; 0xe4
   1e328:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   1e32a:	687b      	ldr	r3, [r7, #4]
   1e32c:	22dc      	movs	r2, #220	; 0xdc
   1e32e:	2100      	movs	r1, #0
   1e330:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   1e332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e334:	3305      	adds	r3, #5
   1e336:	781b      	ldrb	r3, [r3, #0]
   1e338:	2b31      	cmp	r3, #49	; 0x31
   1e33a:	d804      	bhi.n	1e346 <_http_client_handle_header+0x242>
   1e33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e33e:	3307      	adds	r3, #7
   1e340:	781b      	ldrb	r3, [r3, #0]
   1e342:	2b30      	cmp	r3, #48	; 0x30
   1e344:	d906      	bls.n	1e354 <_http_client_handle_header+0x250>
				module->permanent = 1;
   1e346:	687b      	ldr	r3, [r7, #4]
   1e348:	2241      	movs	r2, #65	; 0x41
   1e34a:	5c99      	ldrb	r1, [r3, r2]
   1e34c:	2002      	movs	r0, #2
   1e34e:	4301      	orrs	r1, r0
   1e350:	5499      	strb	r1, [r3, r2]
   1e352:	e005      	b.n	1e360 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   1e354:	687b      	ldr	r3, [r7, #4]
   1e356:	2241      	movs	r2, #65	; 0x41
   1e358:	5c99      	ldrb	r1, [r3, r2]
   1e35a:	2002      	movs	r0, #2
   1e35c:	4381      	bics	r1, r0
   1e35e:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   1e360:	4b06      	ldr	r3, [pc, #24]	; (1e37c <_http_client_handle_header+0x278>)
   1e362:	681b      	ldr	r3, [r3, #0]
   1e364:	0018      	movs	r0, r3
   1e366:	4b08      	ldr	r3, [pc, #32]	; (1e388 <_http_client_handle_header+0x284>)
   1e368:	4798      	blx	r3
   1e36a:	0002      	movs	r2, r0
   1e36c:	69bb      	ldr	r3, [r7, #24]
   1e36e:	189b      	adds	r3, r3, r2
   1e370:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   1e372:	e6ce      	b.n	1e112 <_http_client_handle_header+0xe>
	}
}
   1e374:	0018      	movs	r0, r3
   1e376:	46bd      	mov	sp, r7
   1e378:	b00b      	add	sp, #44	; 0x2c
   1e37a:	bd90      	pop	{r4, r7, pc}
   1e37c:	20000118 	.word	0x20000118
   1e380:	000211c1 	.word	0x000211c1
   1e384:	0001e769 	.word	0x0001e769
   1e388:	00021143 	.word	0x00021143
   1e38c:	00021151 	.word	0x00021151
   1e390:	00026cdc 	.word	0x00026cdc
   1e394:	00020cd9 	.word	0x00020cd9
   1e398:	00026d00 	.word	0x00026d00
   1e39c:	0001d781 	.word	0x0001d781
   1e3a0:	00026d14 	.word	0x00026d14
   1e3a4:	00026d24 	.word	0x00026d24

0001e3a8 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   1e3a8:	b580      	push	{r7, lr}
   1e3aa:	b088      	sub	sp, #32
   1e3ac:	af00      	add	r7, sp, #0
   1e3ae:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   1e3b0:	687b      	ldr	r3, [r7, #4]
   1e3b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e3b4:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   1e3b6:	2300      	movs	r3, #0
   1e3b8:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   1e3ba:	687b      	ldr	r3, [r7, #4]
   1e3bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1e3be:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   1e3c0:	687b      	ldr	r3, [r7, #4]
   1e3c2:	22e0      	movs	r2, #224	; 0xe0
   1e3c4:	589b      	ldr	r3, [r3, r2]
   1e3c6:	2b00      	cmp	r3, #0
   1e3c8:	db71      	blt.n	1e4ae <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   1e3ca:	687b      	ldr	r3, [r7, #4]
   1e3cc:	22e0      	movs	r2, #224	; 0xe0
   1e3ce:	589b      	ldr	r3, [r3, r2]
   1e3d0:	2b00      	cmp	r3, #0
   1e3d2:	d134      	bne.n	1e43e <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   1e3d4:	687b      	ldr	r3, [r7, #4]
   1e3d6:	22d8      	movs	r2, #216	; 0xd8
   1e3d8:	2100      	movs	r1, #0
   1e3da:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   1e3dc:	687b      	ldr	r3, [r7, #4]
   1e3de:	22e4      	movs	r2, #228	; 0xe4
   1e3e0:	2100      	movs	r1, #0
   1e3e2:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   1e3e4:	2308      	movs	r3, #8
   1e3e6:	18fb      	adds	r3, r7, r3
   1e3e8:	2201      	movs	r2, #1
   1e3ea:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   1e3ec:	2308      	movs	r3, #8
   1e3ee:	18fb      	adds	r3, r7, r3
   1e3f0:	2200      	movs	r2, #0
   1e3f2:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   1e3f4:	2308      	movs	r3, #8
   1e3f6:	18fb      	adds	r3, r7, r3
   1e3f8:	2200      	movs	r2, #0
   1e3fa:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   1e3fc:	687b      	ldr	r3, [r7, #4]
   1e3fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e400:	2b00      	cmp	r3, #0
   1e402:	d006      	beq.n	1e412 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1e404:	687b      	ldr	r3, [r7, #4]
   1e406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e408:	2208      	movs	r2, #8
   1e40a:	18ba      	adds	r2, r7, r2
   1e40c:	6878      	ldr	r0, [r7, #4]
   1e40e:	2103      	movs	r1, #3
   1e410:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   1e412:	687b      	ldr	r3, [r7, #4]
   1e414:	2241      	movs	r2, #65	; 0x41
   1e416:	5c9b      	ldrb	r3, [r3, r2]
   1e418:	2202      	movs	r2, #2
   1e41a:	4013      	ands	r3, r2
   1e41c:	b2db      	uxtb	r3, r3
   1e41e:	2b00      	cmp	r3, #0
   1e420:	d105      	bne.n	1e42e <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   1e422:	687b      	ldr	r3, [r7, #4]
   1e424:	2100      	movs	r1, #0
   1e426:	0018      	movs	r0, r3
   1e428:	4b62      	ldr	r3, [pc, #392]	; (1e5b4 <_http_client_read_chuked_entity+0x20c>)
   1e42a:	4798      	blx	r3
					return;
   1e42c:	e0bf      	b.n	1e5ae <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   1e42e:	697b      	ldr	r3, [r7, #20]
   1e430:	1c9a      	adds	r2, r3, #2
   1e432:	687b      	ldr	r3, [r7, #4]
   1e434:	0011      	movs	r1, r2
   1e436:	0018      	movs	r0, r3
   1e438:	4b5f      	ldr	r3, [pc, #380]	; (1e5b8 <_http_client_read_chuked_entity+0x210>)
   1e43a:	4798      	blx	r3
   1e43c:	e0b2      	b.n	1e5a4 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   1e43e:	687b      	ldr	r3, [r7, #4]
   1e440:	22e0      	movs	r2, #224	; 0xe0
   1e442:	589a      	ldr	r2, [r3, r2]
   1e444:	69fb      	ldr	r3, [r7, #28]
   1e446:	429a      	cmp	r2, r3
   1e448:	dd00      	ble.n	1e44c <_http_client_read_chuked_entity+0xa4>
   1e44a:	e0ab      	b.n	1e5a4 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   1e44c:	687b      	ldr	r3, [r7, #4]
   1e44e:	22e0      	movs	r2, #224	; 0xe0
   1e450:	589b      	ldr	r3, [r3, r2]
   1e452:	001a      	movs	r2, r3
   1e454:	2308      	movs	r3, #8
   1e456:	18fb      	adds	r3, r7, r3
   1e458:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   1e45a:	2308      	movs	r3, #8
   1e45c:	18fb      	adds	r3, r7, r3
   1e45e:	697a      	ldr	r2, [r7, #20]
   1e460:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   1e462:	2308      	movs	r3, #8
   1e464:	18fb      	adds	r3, r7, r3
   1e466:	2200      	movs	r2, #0
   1e468:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   1e46a:	687b      	ldr	r3, [r7, #4]
   1e46c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e46e:	2b00      	cmp	r3, #0
   1e470:	d006      	beq.n	1e480 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1e472:	687b      	ldr	r3, [r7, #4]
   1e474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e476:	2208      	movs	r2, #8
   1e478:	18ba      	adds	r2, r7, r2
   1e47a:	6878      	ldr	r0, [r7, #4]
   1e47c:	2103      	movs	r1, #3
   1e47e:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   1e480:	687b      	ldr	r3, [r7, #4]
   1e482:	22e0      	movs	r2, #224	; 0xe0
   1e484:	589b      	ldr	r3, [r3, r2]
   1e486:	3302      	adds	r3, #2
   1e488:	697a      	ldr	r2, [r7, #20]
   1e48a:	18d2      	adds	r2, r2, r3
   1e48c:	687b      	ldr	r3, [r7, #4]
   1e48e:	0011      	movs	r1, r2
   1e490:	0018      	movs	r0, r3
   1e492:	4b49      	ldr	r3, [pc, #292]	; (1e5b8 <_http_client_read_chuked_entity+0x210>)
   1e494:	4798      	blx	r3
				length = (int)module->recved_size;
   1e496:	687b      	ldr	r3, [r7, #4]
   1e498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e49a:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   1e49c:	687b      	ldr	r3, [r7, #4]
   1e49e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1e4a0:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   1e4a2:	687b      	ldr	r3, [r7, #4]
   1e4a4:	21e0      	movs	r1, #224	; 0xe0
   1e4a6:	2201      	movs	r2, #1
   1e4a8:	4252      	negs	r2, r2
   1e4aa:	505a      	str	r2, [r3, r1]
   1e4ac:	e07a      	b.n	1e5a4 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   1e4ae:	687b      	ldr	r3, [r7, #4]
   1e4b0:	22e0      	movs	r2, #224	; 0xe0
   1e4b2:	2100      	movs	r1, #0
   1e4b4:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   1e4b6:	e05a      	b.n	1e56e <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   1e4b8:	697b      	ldr	r3, [r7, #20]
   1e4ba:	781b      	ldrb	r3, [r3, #0]
   1e4bc:	2b0a      	cmp	r3, #10
   1e4be:	d106      	bne.n	1e4ce <_http_client_read_chuked_entity+0x126>
					buffer++;
   1e4c0:	697b      	ldr	r3, [r7, #20]
   1e4c2:	3301      	adds	r3, #1
   1e4c4:	617b      	str	r3, [r7, #20]
					length--;
   1e4c6:	69fb      	ldr	r3, [r7, #28]
   1e4c8:	3b01      	subs	r3, #1
   1e4ca:	61fb      	str	r3, [r7, #28]
					break;
   1e4cc:	e052      	b.n	1e574 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   1e4ce:	69bb      	ldr	r3, [r7, #24]
   1e4d0:	2b00      	cmp	r3, #0
   1e4d2:	d145      	bne.n	1e560 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   1e4d4:	697b      	ldr	r3, [r7, #20]
   1e4d6:	781b      	ldrb	r3, [r3, #0]
   1e4d8:	2b2f      	cmp	r3, #47	; 0x2f
   1e4da:	d910      	bls.n	1e4fe <_http_client_read_chuked_entity+0x156>
   1e4dc:	697b      	ldr	r3, [r7, #20]
   1e4de:	781b      	ldrb	r3, [r3, #0]
   1e4e0:	2b39      	cmp	r3, #57	; 0x39
   1e4e2:	d80c      	bhi.n	1e4fe <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   1e4e4:	687b      	ldr	r3, [r7, #4]
   1e4e6:	22e0      	movs	r2, #224	; 0xe0
   1e4e8:	589b      	ldr	r3, [r3, r2]
   1e4ea:	011b      	lsls	r3, r3, #4
   1e4ec:	697a      	ldr	r2, [r7, #20]
   1e4ee:	7812      	ldrb	r2, [r2, #0]
   1e4f0:	189b      	adds	r3, r3, r2
   1e4f2:	3b30      	subs	r3, #48	; 0x30
   1e4f4:	001a      	movs	r2, r3
   1e4f6:	687b      	ldr	r3, [r7, #4]
   1e4f8:	21e0      	movs	r1, #224	; 0xe0
   1e4fa:	505a      	str	r2, [r3, r1]
   1e4fc:	e031      	b.n	1e562 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   1e4fe:	697b      	ldr	r3, [r7, #20]
   1e500:	781b      	ldrb	r3, [r3, #0]
   1e502:	2b60      	cmp	r3, #96	; 0x60
   1e504:	d910      	bls.n	1e528 <_http_client_read_chuked_entity+0x180>
   1e506:	697b      	ldr	r3, [r7, #20]
   1e508:	781b      	ldrb	r3, [r3, #0]
   1e50a:	2b66      	cmp	r3, #102	; 0x66
   1e50c:	d80c      	bhi.n	1e528 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   1e50e:	687b      	ldr	r3, [r7, #4]
   1e510:	22e0      	movs	r2, #224	; 0xe0
   1e512:	589b      	ldr	r3, [r3, r2]
   1e514:	011b      	lsls	r3, r3, #4
   1e516:	697a      	ldr	r2, [r7, #20]
   1e518:	7812      	ldrb	r2, [r2, #0]
   1e51a:	189b      	adds	r3, r3, r2
   1e51c:	3b61      	subs	r3, #97	; 0x61
   1e51e:	001a      	movs	r2, r3
   1e520:	687b      	ldr	r3, [r7, #4]
   1e522:	21e0      	movs	r1, #224	; 0xe0
   1e524:	505a      	str	r2, [r3, r1]
   1e526:	e01c      	b.n	1e562 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   1e528:	697b      	ldr	r3, [r7, #20]
   1e52a:	781b      	ldrb	r3, [r3, #0]
   1e52c:	2b40      	cmp	r3, #64	; 0x40
   1e52e:	d910      	bls.n	1e552 <_http_client_read_chuked_entity+0x1aa>
   1e530:	697b      	ldr	r3, [r7, #20]
   1e532:	781b      	ldrb	r3, [r3, #0]
   1e534:	2b46      	cmp	r3, #70	; 0x46
   1e536:	d80c      	bhi.n	1e552 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   1e538:	687b      	ldr	r3, [r7, #4]
   1e53a:	22e0      	movs	r2, #224	; 0xe0
   1e53c:	589b      	ldr	r3, [r3, r2]
   1e53e:	011b      	lsls	r3, r3, #4
   1e540:	697a      	ldr	r2, [r7, #20]
   1e542:	7812      	ldrb	r2, [r2, #0]
   1e544:	189b      	adds	r3, r3, r2
   1e546:	3b41      	subs	r3, #65	; 0x41
   1e548:	001a      	movs	r2, r3
   1e54a:	687b      	ldr	r3, [r7, #4]
   1e54c:	21e0      	movs	r1, #224	; 0xe0
   1e54e:	505a      	str	r2, [r3, r1]
   1e550:	e007      	b.n	1e562 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   1e552:	697b      	ldr	r3, [r7, #20]
   1e554:	781b      	ldrb	r3, [r3, #0]
   1e556:	2b3b      	cmp	r3, #59	; 0x3b
   1e558:	d103      	bne.n	1e562 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   1e55a:	2301      	movs	r3, #1
   1e55c:	61bb      	str	r3, [r7, #24]
   1e55e:	e000      	b.n	1e562 <_http_client_read_chuked_entity+0x1ba>
					continue;
   1e560:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   1e562:	697b      	ldr	r3, [r7, #20]
   1e564:	3301      	adds	r3, #1
   1e566:	617b      	str	r3, [r7, #20]
   1e568:	69fb      	ldr	r3, [r7, #28]
   1e56a:	3b01      	subs	r3, #1
   1e56c:	61fb      	str	r3, [r7, #28]
   1e56e:	69fb      	ldr	r3, [r7, #28]
   1e570:	2b00      	cmp	r3, #0
   1e572:	dca1      	bgt.n	1e4b8 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   1e574:	687b      	ldr	r3, [r7, #4]
   1e576:	22e0      	movs	r2, #224	; 0xe0
   1e578:	589a      	ldr	r2, [r3, r2]
   1e57a:	687b      	ldr	r3, [r7, #4]
   1e57c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1e57e:	429a      	cmp	r2, r3
   1e580:	dd07      	ble.n	1e592 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   1e582:	238b      	movs	r3, #139	; 0x8b
   1e584:	425a      	negs	r2, r3
   1e586:	687b      	ldr	r3, [r7, #4]
   1e588:	0011      	movs	r1, r2
   1e58a:	0018      	movs	r0, r3
   1e58c:	4b09      	ldr	r3, [pc, #36]	; (1e5b4 <_http_client_read_chuked_entity+0x20c>)
   1e58e:	4798      	blx	r3
				return;
   1e590:	e00d      	b.n	1e5ae <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   1e592:	69fb      	ldr	r3, [r7, #28]
   1e594:	2b00      	cmp	r3, #0
   1e596:	d105      	bne.n	1e5a4 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   1e598:	687b      	ldr	r3, [r7, #4]
   1e59a:	21e0      	movs	r1, #224	; 0xe0
   1e59c:	2201      	movs	r2, #1
   1e59e:	4252      	negs	r2, r2
   1e5a0:	505a      	str	r2, [r3, r1]
				return;
   1e5a2:	e004      	b.n	1e5ae <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   1e5a4:	687b      	ldr	r3, [r7, #4]
   1e5a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e5a8:	2b00      	cmp	r3, #0
   1e5aa:	d000      	beq.n	1e5ae <_http_client_read_chuked_entity+0x206>
   1e5ac:	e708      	b.n	1e3c0 <_http_client_read_chuked_entity+0x18>
}
   1e5ae:	46bd      	mov	sp, r7
   1e5b0:	b008      	add	sp, #32
   1e5b2:	bd80      	pop	{r7, pc}
   1e5b4:	0001d781 	.word	0x0001d781
   1e5b8:	0001e769 	.word	0x0001e769

0001e5bc <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   1e5bc:	b580      	push	{r7, lr}
   1e5be:	b086      	sub	sp, #24
   1e5c0:	af00      	add	r7, sp, #0
   1e5c2:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   1e5c4:	687b      	ldr	r3, [r7, #4]
   1e5c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1e5c8:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   1e5ca:	687b      	ldr	r3, [r7, #4]
   1e5cc:	22dc      	movs	r2, #220	; 0xdc
   1e5ce:	589b      	ldr	r3, [r3, r2]
   1e5d0:	2b00      	cmp	r3, #0
   1e5d2:	db58      	blt.n	1e686 <_http_client_handle_entity+0xca>
   1e5d4:	687b      	ldr	r3, [r7, #4]
   1e5d6:	22dc      	movs	r2, #220	; 0xdc
   1e5d8:	589a      	ldr	r2, [r3, r2]
   1e5da:	687b      	ldr	r3, [r7, #4]
   1e5dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1e5de:	429a      	cmp	r2, r3
   1e5e0:	dc51      	bgt.n	1e686 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   1e5e2:	687b      	ldr	r3, [r7, #4]
   1e5e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e5e6:	0019      	movs	r1, r3
   1e5e8:	687b      	ldr	r3, [r7, #4]
   1e5ea:	22dc      	movs	r2, #220	; 0xdc
   1e5ec:	589b      	ldr	r3, [r3, r2]
   1e5ee:	4299      	cmp	r1, r3
   1e5f0:	da00      	bge.n	1e5f4 <_http_client_handle_entity+0x38>
   1e5f2:	e0a9      	b.n	1e748 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   1e5f4:	687b      	ldr	r3, [r7, #4]
   1e5f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e5f8:	2b00      	cmp	r3, #0
   1e5fa:	d020      	beq.n	1e63e <_http_client_handle_entity+0x82>
   1e5fc:	687b      	ldr	r3, [r7, #4]
   1e5fe:	22e4      	movs	r2, #228	; 0xe4
   1e600:	5a9b      	ldrh	r3, [r3, r2]
   1e602:	2b00      	cmp	r3, #0
   1e604:	d01b      	beq.n	1e63e <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   1e606:	687b      	ldr	r3, [r7, #4]
   1e608:	22e4      	movs	r2, #228	; 0xe4
   1e60a:	5a9a      	ldrh	r2, [r3, r2]
   1e60c:	2308      	movs	r3, #8
   1e60e:	18fb      	adds	r3, r7, r3
   1e610:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   1e612:	2308      	movs	r3, #8
   1e614:	18fb      	adds	r3, r7, r3
   1e616:	2200      	movs	r2, #0
   1e618:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   1e61a:	687b      	ldr	r3, [r7, #4]
   1e61c:	22dc      	movs	r2, #220	; 0xdc
   1e61e:	589b      	ldr	r3, [r3, r2]
   1e620:	001a      	movs	r2, r3
   1e622:	2308      	movs	r3, #8
   1e624:	18fb      	adds	r3, r7, r3
   1e626:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   1e628:	2308      	movs	r3, #8
   1e62a:	18fb      	adds	r3, r7, r3
   1e62c:	697a      	ldr	r2, [r7, #20]
   1e62e:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1e630:	687b      	ldr	r3, [r7, #4]
   1e632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e634:	2208      	movs	r2, #8
   1e636:	18ba      	adds	r2, r7, r2
   1e638:	6878      	ldr	r0, [r7, #4]
   1e63a:	2102      	movs	r1, #2
   1e63c:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   1e63e:	687b      	ldr	r3, [r7, #4]
   1e640:	22d8      	movs	r2, #216	; 0xd8
   1e642:	2100      	movs	r1, #0
   1e644:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   1e646:	687b      	ldr	r3, [r7, #4]
   1e648:	22e4      	movs	r2, #228	; 0xe4
   1e64a:	2100      	movs	r1, #0
   1e64c:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   1e64e:	687b      	ldr	r3, [r7, #4]
   1e650:	2241      	movs	r2, #65	; 0x41
   1e652:	5c9b      	ldrb	r3, [r3, r2]
   1e654:	2202      	movs	r2, #2
   1e656:	4013      	ands	r3, r2
   1e658:	b2db      	uxtb	r3, r3
   1e65a:	2b00      	cmp	r3, #0
   1e65c:	d105      	bne.n	1e66a <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   1e65e:	687b      	ldr	r3, [r7, #4]
   1e660:	2100      	movs	r1, #0
   1e662:	0018      	movs	r0, r3
   1e664:	4b3b      	ldr	r3, [pc, #236]	; (1e754 <_http_client_handle_entity+0x198>)
   1e666:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   1e668:	e06e      	b.n	1e748 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   1e66a:	687b      	ldr	r3, [r7, #4]
   1e66c:	22dc      	movs	r2, #220	; 0xdc
   1e66e:	589b      	ldr	r3, [r3, r2]
   1e670:	001a      	movs	r2, r3
   1e672:	697b      	ldr	r3, [r7, #20]
   1e674:	189a      	adds	r2, r3, r2
   1e676:	687b      	ldr	r3, [r7, #4]
   1e678:	0011      	movs	r1, r2
   1e67a:	0018      	movs	r0, r3
   1e67c:	4b36      	ldr	r3, [pc, #216]	; (1e758 <_http_client_handle_entity+0x19c>)
   1e67e:	4798      	blx	r3
				return module->recved_size;
   1e680:	687b      	ldr	r3, [r7, #4]
   1e682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e684:	e061      	b.n	1e74a <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   1e686:	687b      	ldr	r3, [r7, #4]
   1e688:	22dc      	movs	r2, #220	; 0xdc
   1e68a:	589b      	ldr	r3, [r3, r2]
   1e68c:	2b00      	cmp	r3, #0
   1e68e:	db57      	blt.n	1e740 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   1e690:	687b      	ldr	r3, [r7, #4]
   1e692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1e694:	2308      	movs	r3, #8
   1e696:	18fb      	adds	r3, r7, r3
   1e698:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   1e69a:	2308      	movs	r3, #8
   1e69c:	18fb      	adds	r3, r7, r3
   1e69e:	697a      	ldr	r2, [r7, #20]
   1e6a0:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   1e6a2:	687b      	ldr	r3, [r7, #4]
   1e6a4:	22e0      	movs	r2, #224	; 0xe0
   1e6a6:	589a      	ldr	r2, [r3, r2]
   1e6a8:	687b      	ldr	r3, [r7, #4]
   1e6aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e6ac:	18d2      	adds	r2, r2, r3
   1e6ae:	687b      	ldr	r3, [r7, #4]
   1e6b0:	21e0      	movs	r1, #224	; 0xe0
   1e6b2:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   1e6b4:	687b      	ldr	r3, [r7, #4]
   1e6b6:	22dc      	movs	r2, #220	; 0xdc
   1e6b8:	589a      	ldr	r2, [r3, r2]
   1e6ba:	687b      	ldr	r3, [r7, #4]
   1e6bc:	21e0      	movs	r1, #224	; 0xe0
   1e6be:	585b      	ldr	r3, [r3, r1]
   1e6c0:	429a      	cmp	r2, r3
   1e6c2:	dc0c      	bgt.n	1e6de <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   1e6c4:	687b      	ldr	r3, [r7, #4]
   1e6c6:	22d8      	movs	r2, #216	; 0xd8
   1e6c8:	2100      	movs	r1, #0
   1e6ca:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   1e6cc:	687b      	ldr	r3, [r7, #4]
   1e6ce:	22e4      	movs	r2, #228	; 0xe4
   1e6d0:	2100      	movs	r1, #0
   1e6d2:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   1e6d4:	2308      	movs	r3, #8
   1e6d6:	18fb      	adds	r3, r7, r3
   1e6d8:	2201      	movs	r2, #1
   1e6da:	721a      	strb	r2, [r3, #8]
   1e6dc:	e003      	b.n	1e6e6 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   1e6de:	2308      	movs	r3, #8
   1e6e0:	18fb      	adds	r3, r7, r3
   1e6e2:	2200      	movs	r2, #0
   1e6e4:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   1e6e6:	687b      	ldr	r3, [r7, #4]
   1e6e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e6ea:	2b00      	cmp	r3, #0
   1e6ec:	d006      	beq.n	1e6fc <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1e6ee:	687b      	ldr	r3, [r7, #4]
   1e6f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e6f2:	2208      	movs	r2, #8
   1e6f4:	18ba      	adds	r2, r7, r2
   1e6f6:	6878      	ldr	r0, [r7, #4]
   1e6f8:	2103      	movs	r1, #3
   1e6fa:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   1e6fc:	2308      	movs	r3, #8
   1e6fe:	18fb      	adds	r3, r7, r3
   1e700:	7a1b      	ldrb	r3, [r3, #8]
   1e702:	2b01      	cmp	r3, #1
   1e704:	d112      	bne.n	1e72c <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   1e706:	687b      	ldr	r3, [r7, #4]
   1e708:	2241      	movs	r2, #65	; 0x41
   1e70a:	5c9b      	ldrb	r3, [r3, r2]
   1e70c:	2202      	movs	r2, #2
   1e70e:	4013      	ands	r3, r2
   1e710:	b2db      	uxtb	r3, r3
   1e712:	2b00      	cmp	r3, #0
   1e714:	d10a      	bne.n	1e72c <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   1e716:	4b11      	ldr	r3, [pc, #68]	; (1e75c <_http_client_handle_entity+0x1a0>)
   1e718:	0018      	movs	r0, r3
   1e71a:	4b11      	ldr	r3, [pc, #68]	; (1e760 <_http_client_handle_entity+0x1a4>)
   1e71c:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   1e71e:	687b      	ldr	r3, [r7, #4]
   1e720:	2100      	movs	r1, #0
   1e722:	0018      	movs	r0, r3
   1e724:	4b0b      	ldr	r3, [pc, #44]	; (1e754 <_http_client_handle_entity+0x198>)
   1e726:	4798      	blx	r3
					return 0;
   1e728:	2300      	movs	r3, #0
   1e72a:	e00e      	b.n	1e74a <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   1e72c:	687b      	ldr	r3, [r7, #4]
   1e72e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e730:	697a      	ldr	r2, [r7, #20]
   1e732:	18d2      	adds	r2, r2, r3
   1e734:	687b      	ldr	r3, [r7, #4]
   1e736:	0011      	movs	r1, r2
   1e738:	0018      	movs	r0, r3
   1e73a:	4b07      	ldr	r3, [pc, #28]	; (1e758 <_http_client_handle_entity+0x19c>)
   1e73c:	4798      	blx	r3
   1e73e:	e003      	b.n	1e748 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   1e740:	687b      	ldr	r3, [r7, #4]
   1e742:	0018      	movs	r0, r3
   1e744:	4b07      	ldr	r3, [pc, #28]	; (1e764 <_http_client_handle_entity+0x1a8>)
   1e746:	4798      	blx	r3
		}
	}

	return 0;
   1e748:	2300      	movs	r3, #0
}
   1e74a:	0018      	movs	r0, r3
   1e74c:	46bd      	mov	sp, r7
   1e74e:	b006      	add	sp, #24
   1e750:	bd80      	pop	{r7, pc}
   1e752:	46c0      	nop			; (mov r8, r8)
   1e754:	0001d781 	.word	0x0001d781
   1e758:	0001e769 	.word	0x0001e769
   1e75c:	00026d2c 	.word	0x00026d2c
   1e760:	00020fad 	.word	0x00020fad
   1e764:	0001e3a9 	.word	0x0001e3a9

0001e768 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   1e768:	b580      	push	{r7, lr}
   1e76a:	b084      	sub	sp, #16
   1e76c:	af00      	add	r7, sp, #0
   1e76e:	6078      	str	r0, [r7, #4]
   1e770:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   1e772:	687b      	ldr	r3, [r7, #4]
   1e774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1e776:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   1e778:	687b      	ldr	r3, [r7, #4]
   1e77a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e77c:	001a      	movs	r2, r3
   1e77e:	683b      	ldr	r3, [r7, #0]
   1e780:	1ad2      	subs	r2, r2, r3
   1e782:	68fb      	ldr	r3, [r7, #12]
   1e784:	18d3      	adds	r3, r2, r3
   1e786:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   1e788:	68bb      	ldr	r3, [r7, #8]
   1e78a:	2b00      	cmp	r3, #0
   1e78c:	dd09      	ble.n	1e7a2 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   1e78e:	68ba      	ldr	r2, [r7, #8]
   1e790:	6839      	ldr	r1, [r7, #0]
   1e792:	68fb      	ldr	r3, [r7, #12]
   1e794:	0018      	movs	r0, r3
   1e796:	4b06      	ldr	r3, [pc, #24]	; (1e7b0 <_http_client_move_buffer+0x48>)
   1e798:	4798      	blx	r3
		module->recved_size = remain;
   1e79a:	68ba      	ldr	r2, [r7, #8]
   1e79c:	687b      	ldr	r3, [r7, #4]
   1e79e:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   1e7a0:	e002      	b.n	1e7a8 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   1e7a2:	687b      	ldr	r3, [r7, #4]
   1e7a4:	2200      	movs	r2, #0
   1e7a6:	645a      	str	r2, [r3, #68]	; 0x44
}
   1e7a8:	46c0      	nop			; (mov r8, r8)
   1e7aa:	46bd      	mov	sp, r7
   1e7ac:	b004      	add	sp, #16
   1e7ae:	bd80      	pop	{r7, pc}
   1e7b0:	00020d67 	.word	0x00020d67

0001e7b4 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   1e7b4:	b580      	push	{r7, lr}
   1e7b6:	b084      	sub	sp, #16
   1e7b8:	af00      	add	r7, sp, #0
   1e7ba:	60f8      	str	r0, [r7, #12]
   1e7bc:	60b9      	str	r1, [r7, #8]
   1e7be:	607a      	str	r2, [r7, #4]
   1e7c0:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   1e7c2:	68fb      	ldr	r3, [r7, #12]
   1e7c4:	687a      	ldr	r2, [r7, #4]
   1e7c6:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   1e7c8:	68fb      	ldr	r3, [r7, #12]
   1e7ca:	68ba      	ldr	r2, [r7, #8]
   1e7cc:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   1e7ce:	68fb      	ldr	r3, [r7, #12]
   1e7d0:	2200      	movs	r2, #0
   1e7d2:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   1e7d4:	68fb      	ldr	r3, [r7, #12]
   1e7d6:	683a      	ldr	r2, [r7, #0]
   1e7d8:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   1e7da:	68fb      	ldr	r3, [r7, #12]
   1e7dc:	69ba      	ldr	r2, [r7, #24]
   1e7de:	60da      	str	r2, [r3, #12]
}
   1e7e0:	46c0      	nop			; (mov r8, r8)
   1e7e2:	46bd      	mov	sp, r7
   1e7e4:	b004      	add	sp, #16
   1e7e6:	bd80      	pop	{r7, pc}

0001e7e8 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   1e7e8:	b580      	push	{r7, lr}
   1e7ea:	b084      	sub	sp, #16
   1e7ec:	af00      	add	r7, sp, #0
   1e7ee:	6078      	str	r0, [r7, #4]
   1e7f0:	000a      	movs	r2, r1
   1e7f2:	1cfb      	adds	r3, r7, #3
   1e7f4:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   1e7f6:	687b      	ldr	r3, [r7, #4]
   1e7f8:	681a      	ldr	r2, [r3, #0]
   1e7fa:	687b      	ldr	r3, [r7, #4]
   1e7fc:	685b      	ldr	r3, [r3, #4]
   1e7fe:	1ad3      	subs	r3, r2, r3
   1e800:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   1e802:	68fb      	ldr	r3, [r7, #12]
   1e804:	2b00      	cmp	r3, #0
   1e806:	dc03      	bgt.n	1e810 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   1e808:	687b      	ldr	r3, [r7, #4]
   1e80a:	0018      	movs	r0, r3
   1e80c:	4b08      	ldr	r3, [pc, #32]	; (1e830 <stream_writer_send_8+0x48>)
   1e80e:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   1e810:	687b      	ldr	r3, [r7, #4]
   1e812:	6919      	ldr	r1, [r3, #16]
   1e814:	687b      	ldr	r3, [r7, #4]
   1e816:	685b      	ldr	r3, [r3, #4]
   1e818:	1c58      	adds	r0, r3, #1
   1e81a:	687a      	ldr	r2, [r7, #4]
   1e81c:	6050      	str	r0, [r2, #4]
   1e81e:	18cb      	adds	r3, r1, r3
   1e820:	1cfa      	adds	r2, r7, #3
   1e822:	7812      	ldrb	r2, [r2, #0]
   1e824:	701a      	strb	r2, [r3, #0]
}
   1e826:	46c0      	nop			; (mov r8, r8)
   1e828:	46bd      	mov	sp, r7
   1e82a:	b004      	add	sp, #16
   1e82c:	bd80      	pop	{r7, pc}
   1e82e:	46c0      	nop			; (mov r8, r8)
   1e830:	0001e871 	.word	0x0001e871

0001e834 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   1e834:	b580      	push	{r7, lr}
   1e836:	b084      	sub	sp, #16
   1e838:	af00      	add	r7, sp, #0
   1e83a:	60f8      	str	r0, [r7, #12]
   1e83c:	60b9      	str	r1, [r7, #8]
   1e83e:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   1e840:	e00d      	b.n	1e85e <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   1e842:	68bb      	ldr	r3, [r7, #8]
   1e844:	781b      	ldrb	r3, [r3, #0]
   1e846:	b25a      	sxtb	r2, r3
   1e848:	68fb      	ldr	r3, [r7, #12]
   1e84a:	0011      	movs	r1, r2
   1e84c:	0018      	movs	r0, r3
   1e84e:	4b07      	ldr	r3, [pc, #28]	; (1e86c <stream_writer_send_buffer+0x38>)
   1e850:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   1e852:	687b      	ldr	r3, [r7, #4]
   1e854:	3b01      	subs	r3, #1
   1e856:	607b      	str	r3, [r7, #4]
   1e858:	68bb      	ldr	r3, [r7, #8]
   1e85a:	3301      	adds	r3, #1
   1e85c:	60bb      	str	r3, [r7, #8]
   1e85e:	687b      	ldr	r3, [r7, #4]
   1e860:	2b00      	cmp	r3, #0
   1e862:	d1ee      	bne.n	1e842 <stream_writer_send_buffer+0xe>
	}
}
   1e864:	46c0      	nop			; (mov r8, r8)
   1e866:	46bd      	mov	sp, r7
   1e868:	b004      	add	sp, #16
   1e86a:	bd80      	pop	{r7, pc}
   1e86c:	0001e7e9 	.word	0x0001e7e9

0001e870 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   1e870:	b590      	push	{r4, r7, lr}
   1e872:	b083      	sub	sp, #12
   1e874:	af00      	add	r7, sp, #0
   1e876:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   1e878:	687b      	ldr	r3, [r7, #4]
   1e87a:	685b      	ldr	r3, [r3, #4]
   1e87c:	2b00      	cmp	r3, #0
   1e87e:	d00c      	beq.n	1e89a <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   1e880:	687b      	ldr	r3, [r7, #4]
   1e882:	689c      	ldr	r4, [r3, #8]
   1e884:	687b      	ldr	r3, [r7, #4]
   1e886:	68d8      	ldr	r0, [r3, #12]
   1e888:	687b      	ldr	r3, [r7, #4]
   1e88a:	6919      	ldr	r1, [r3, #16]
   1e88c:	687b      	ldr	r3, [r7, #4]
   1e88e:	685b      	ldr	r3, [r3, #4]
   1e890:	001a      	movs	r2, r3
   1e892:	47a0      	blx	r4
		writer->written = 0;
   1e894:	687b      	ldr	r3, [r7, #4]
   1e896:	2200      	movs	r2, #0
   1e898:	605a      	str	r2, [r3, #4]
	}
}
   1e89a:	46c0      	nop			; (mov r8, r8)
   1e89c:	46bd      	mov	sp, r7
   1e89e:	b003      	add	sp, #12
   1e8a0:	bd90      	pop	{r4, r7, pc}
	...

0001e8a4 <system_cpu_clock_get_hz>:
{
   1e8a4:	b580      	push	{r7, lr}
   1e8a6:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1e8a8:	2000      	movs	r0, #0
   1e8aa:	4b05      	ldr	r3, [pc, #20]	; (1e8c0 <system_cpu_clock_get_hz+0x1c>)
   1e8ac:	4798      	blx	r3
   1e8ae:	0002      	movs	r2, r0
   1e8b0:	4b04      	ldr	r3, [pc, #16]	; (1e8c4 <system_cpu_clock_get_hz+0x20>)
   1e8b2:	7a1b      	ldrb	r3, [r3, #8]
   1e8b4:	b2db      	uxtb	r3, r3
   1e8b6:	40da      	lsrs	r2, r3
   1e8b8:	0013      	movs	r3, r2
}
   1e8ba:	0018      	movs	r0, r3
   1e8bc:	46bd      	mov	sp, r7
   1e8be:	bd80      	pop	{r7, pc}
   1e8c0:	00016285 	.word	0x00016285
   1e8c4:	40000400 	.word	0x40000400

0001e8c8 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   1e8c8:	b580      	push	{r7, lr}
   1e8ca:	b084      	sub	sp, #16
   1e8cc:	af00      	add	r7, sp, #0
   1e8ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   1e8d0:	687b      	ldr	r3, [r7, #4]
   1e8d2:	681b      	ldr	r3, [r3, #0]
   1e8d4:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   1e8d6:	46c0      	nop			; (mov r8, r8)
   1e8d8:	68fb      	ldr	r3, [r7, #12]
   1e8da:	689b      	ldr	r3, [r3, #8]
   1e8dc:	2202      	movs	r2, #2
   1e8de:	4013      	ands	r3, r2
   1e8e0:	d1fa      	bne.n	1e8d8 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   1e8e2:	68fb      	ldr	r3, [r7, #12]
   1e8e4:	681b      	ldr	r3, [r3, #0]
   1e8e6:	2202      	movs	r2, #2
   1e8e8:	431a      	orrs	r2, r3
   1e8ea:	68fb      	ldr	r3, [r7, #12]
   1e8ec:	601a      	str	r2, [r3, #0]
}
   1e8ee:	46c0      	nop			; (mov r8, r8)
   1e8f0:	46bd      	mov	sp, r7
   1e8f2:	b004      	add	sp, #16
   1e8f4:	bd80      	pop	{r7, pc}
	...

0001e8f8 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   1e8f8:	b580      	push	{r7, lr}
   1e8fa:	b082      	sub	sp, #8
   1e8fc:	af00      	add	r7, sp, #0
   1e8fe:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   1e900:	4b04      	ldr	r3, [pc, #16]	; (1e914 <sw_timer_tcc_callback+0x1c>)
   1e902:	681b      	ldr	r3, [r3, #0]
   1e904:	1c5a      	adds	r2, r3, #1
   1e906:	4b03      	ldr	r3, [pc, #12]	; (1e914 <sw_timer_tcc_callback+0x1c>)
   1e908:	601a      	str	r2, [r3, #0]
}
   1e90a:	46c0      	nop			; (mov r8, r8)
   1e90c:	46bd      	mov	sp, r7
   1e90e:	b002      	add	sp, #8
   1e910:	bd80      	pop	{r7, pc}
   1e912:	46c0      	nop			; (mov r8, r8)
   1e914:	20004588 	.word	0x20004588

0001e918 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   1e918:	b580      	push	{r7, lr}
   1e91a:	b082      	sub	sp, #8
   1e91c:	af00      	add	r7, sp, #0
   1e91e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   1e920:	687b      	ldr	r3, [r7, #4]
   1e922:	2264      	movs	r2, #100	; 0x64
   1e924:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   1e926:	687b      	ldr	r3, [r7, #4]
   1e928:	2200      	movs	r2, #0
   1e92a:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   1e92c:	687b      	ldr	r3, [r7, #4]
   1e92e:	2200      	movs	r2, #0
   1e930:	705a      	strb	r2, [r3, #1]
}
   1e932:	46c0      	nop			; (mov r8, r8)
   1e934:	46bd      	mov	sp, r7
   1e936:	b002      	add	sp, #8
   1e938:	bd80      	pop	{r7, pc}
	...

0001e93c <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   1e93c:	b590      	push	{r4, r7, lr}
   1e93e:	b0b1      	sub	sp, #196	; 0xc4
   1e940:	af00      	add	r7, sp, #0
   1e942:	6078      	str	r0, [r7, #4]
   1e944:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   1e946:	230c      	movs	r3, #12
   1e948:	18fb      	adds	r3, r7, r3
   1e94a:	4a2e      	ldr	r2, [pc, #184]	; (1ea04 <sw_timer_init+0xc8>)
   1e94c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1e94e:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   1e950:	683b      	ldr	r3, [r7, #0]
   1e952:	885b      	ldrh	r3, [r3, #2]
   1e954:	001a      	movs	r2, r3
   1e956:	687b      	ldr	r3, [r7, #4]
   1e958:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   1e95a:	687b      	ldr	r3, [r7, #4]
   1e95c:	3314      	adds	r3, #20
   1e95e:	22bc      	movs	r2, #188	; 0xbc
   1e960:	18ba      	adds	r2, r7, r2
   1e962:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   1e964:	683b      	ldr	r3, [r7, #0]
   1e966:	781b      	ldrb	r3, [r3, #0]
   1e968:	001a      	movs	r2, r3
   1e96a:	230c      	movs	r3, #12
   1e96c:	18fb      	adds	r3, r7, r3
   1e96e:	0092      	lsls	r2, r2, #2
   1e970:	58d2      	ldr	r2, [r2, r3]
   1e972:	2318      	movs	r3, #24
   1e974:	18fb      	adds	r3, r7, r3
   1e976:	0011      	movs	r1, r2
   1e978:	0018      	movs	r0, r3
   1e97a:	4b23      	ldr	r3, [pc, #140]	; (1ea08 <sw_timer_init+0xcc>)
   1e97c:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   1e97e:	4b23      	ldr	r3, [pc, #140]	; (1ea0c <sw_timer_init+0xd0>)
   1e980:	4798      	blx	r3
   1e982:	0004      	movs	r4, r0
   1e984:	683b      	ldr	r3, [r7, #0]
   1e986:	885b      	ldrh	r3, [r3, #2]
   1e988:	001a      	movs	r2, r3
   1e98a:	4b21      	ldr	r3, [pc, #132]	; (1ea10 <sw_timer_init+0xd4>)
   1e98c:	0011      	movs	r1, r2
   1e98e:	22fa      	movs	r2, #250	; 0xfa
   1e990:	0210      	lsls	r0, r2, #8
   1e992:	4798      	blx	r3
   1e994:	0003      	movs	r3, r0
   1e996:	001a      	movs	r2, r3
   1e998:	4b1e      	ldr	r3, [pc, #120]	; (1ea14 <sw_timer_init+0xd8>)
   1e99a:	0011      	movs	r1, r2
   1e99c:	0020      	movs	r0, r4
   1e99e:	4798      	blx	r3
   1e9a0:	0003      	movs	r3, r0
   1e9a2:	001a      	movs	r2, r3
   1e9a4:	2318      	movs	r3, #24
   1e9a6:	18fb      	adds	r3, r7, r3
   1e9a8:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   1e9aa:	2318      	movs	r3, #24
   1e9ac:	18fb      	adds	r3, r7, r3
   1e9ae:	2205      	movs	r2, #5
   1e9b0:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   1e9b2:	683b      	ldr	r3, [r7, #0]
   1e9b4:	781b      	ldrb	r3, [r3, #0]
   1e9b6:	001a      	movs	r2, r3
   1e9b8:	230c      	movs	r3, #12
   1e9ba:	18fb      	adds	r3, r7, r3
   1e9bc:	0092      	lsls	r2, r2, #2
   1e9be:	58d1      	ldr	r1, [r2, r3]
   1e9c0:	2318      	movs	r3, #24
   1e9c2:	18fa      	adds	r2, r7, r3
   1e9c4:	23bc      	movs	r3, #188	; 0xbc
   1e9c6:	18fb      	adds	r3, r7, r3
   1e9c8:	681b      	ldr	r3, [r3, #0]
   1e9ca:	0018      	movs	r0, r3
   1e9cc:	4b12      	ldr	r3, [pc, #72]	; (1ea18 <sw_timer_init+0xdc>)
   1e9ce:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   1e9d0:	683b      	ldr	r3, [r7, #0]
   1e9d2:	785b      	ldrb	r3, [r3, #1]
   1e9d4:	3308      	adds	r3, #8
   1e9d6:	b2da      	uxtb	r2, r3
   1e9d8:	4910      	ldr	r1, [pc, #64]	; (1ea1c <sw_timer_init+0xe0>)
   1e9da:	23bc      	movs	r3, #188	; 0xbc
   1e9dc:	18fb      	adds	r3, r7, r3
   1e9de:	681b      	ldr	r3, [r3, #0]
   1e9e0:	0018      	movs	r0, r3
   1e9e2:	4b0f      	ldr	r3, [pc, #60]	; (1ea20 <sw_timer_init+0xe4>)
   1e9e4:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   1e9e6:	683b      	ldr	r3, [r7, #0]
   1e9e8:	785b      	ldrb	r3, [r3, #1]
   1e9ea:	3308      	adds	r3, #8
   1e9ec:	b2da      	uxtb	r2, r3
   1e9ee:	23bc      	movs	r3, #188	; 0xbc
   1e9f0:	18fb      	adds	r3, r7, r3
   1e9f2:	681b      	ldr	r3, [r3, #0]
   1e9f4:	0011      	movs	r1, r2
   1e9f6:	0018      	movs	r0, r3
   1e9f8:	4b0a      	ldr	r3, [pc, #40]	; (1ea24 <sw_timer_init+0xe8>)
   1e9fa:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   1e9fc:	46c0      	nop			; (mov r8, r8)
   1e9fe:	46bd      	mov	sp, r7
   1ea00:	b031      	add	sp, #196	; 0xc4
   1ea02:	bd90      	pop	{r4, r7, pc}
   1ea04:	00026d6c 	.word	0x00026d6c
   1ea08:	0001681d 	.word	0x0001681d
   1ea0c:	0001e8a5 	.word	0x0001e8a5
   1ea10:	0001f1e5 	.word	0x0001f1e5
   1ea14:	0001f0d1 	.word	0x0001f0d1
   1ea18:	00016e79 	.word	0x00016e79
   1ea1c:	0001e8f9 	.word	0x0001e8f9
   1ea20:	00017291 	.word	0x00017291
   1ea24:	000172d1 	.word	0x000172d1

0001ea28 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   1ea28:	b580      	push	{r7, lr}
   1ea2a:	b084      	sub	sp, #16
   1ea2c:	af00      	add	r7, sp, #0
   1ea2e:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   1ea30:	687b      	ldr	r3, [r7, #4]
   1ea32:	3314      	adds	r3, #20
   1ea34:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   1ea36:	68fb      	ldr	r3, [r7, #12]
   1ea38:	0018      	movs	r0, r3
   1ea3a:	4b03      	ldr	r3, [pc, #12]	; (1ea48 <sw_timer_enable+0x20>)
   1ea3c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   1ea3e:	46c0      	nop			; (mov r8, r8)
   1ea40:	46bd      	mov	sp, r7
   1ea42:	b004      	add	sp, #16
   1ea44:	bd80      	pop	{r7, pc}
   1ea46:	46c0      	nop			; (mov r8, r8)
   1ea48:	0001e8c9 	.word	0x0001e8c9

0001ea4c <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   1ea4c:	b580      	push	{r7, lr}
   1ea4e:	b086      	sub	sp, #24
   1ea50:	af00      	add	r7, sp, #0
   1ea52:	60f8      	str	r0, [r7, #12]
   1ea54:	60b9      	str	r1, [r7, #8]
   1ea56:	607a      	str	r2, [r7, #4]
   1ea58:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1ea5a:	2300      	movs	r3, #0
   1ea5c:	617b      	str	r3, [r7, #20]
   1ea5e:	e032      	b.n	1eac6 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   1ea60:	68f9      	ldr	r1, [r7, #12]
   1ea62:	697a      	ldr	r2, [r7, #20]
   1ea64:	0013      	movs	r3, r2
   1ea66:	009b      	lsls	r3, r3, #2
   1ea68:	189b      	adds	r3, r3, r2
   1ea6a:	009b      	lsls	r3, r3, #2
   1ea6c:	5c5b      	ldrb	r3, [r3, r1]
   1ea6e:	07db      	lsls	r3, r3, #31
   1ea70:	0fdb      	lsrs	r3, r3, #31
   1ea72:	b2db      	uxtb	r3, r3
   1ea74:	2b00      	cmp	r3, #0
   1ea76:	d123      	bne.n	1eac0 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   1ea78:	697a      	ldr	r2, [r7, #20]
   1ea7a:	0013      	movs	r3, r2
   1ea7c:	009b      	lsls	r3, r3, #2
   1ea7e:	189b      	adds	r3, r3, r2
   1ea80:	009b      	lsls	r3, r3, #2
   1ea82:	68fa      	ldr	r2, [r7, #12]
   1ea84:	18d3      	adds	r3, r2, r3
   1ea86:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   1ea88:	693b      	ldr	r3, [r7, #16]
   1ea8a:	68ba      	ldr	r2, [r7, #8]
   1ea8c:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   1ea8e:	693b      	ldr	r3, [r7, #16]
   1ea90:	781a      	ldrb	r2, [r3, #0]
   1ea92:	2102      	movs	r1, #2
   1ea94:	438a      	bics	r2, r1
   1ea96:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   1ea98:	693b      	ldr	r3, [r7, #16]
   1ea9a:	687a      	ldr	r2, [r7, #4]
   1ea9c:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   1ea9e:	68fb      	ldr	r3, [r7, #12]
   1eaa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1eaa2:	4b0d      	ldr	r3, [pc, #52]	; (1ead8 <sw_timer_register_callback+0x8c>)
   1eaa4:	0011      	movs	r1, r2
   1eaa6:	6838      	ldr	r0, [r7, #0]
   1eaa8:	4798      	blx	r3
   1eaaa:	0003      	movs	r3, r0
   1eaac:	001a      	movs	r2, r3
   1eaae:	693b      	ldr	r3, [r7, #16]
   1eab0:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   1eab2:	693b      	ldr	r3, [r7, #16]
   1eab4:	781a      	ldrb	r2, [r3, #0]
   1eab6:	2101      	movs	r1, #1
   1eab8:	430a      	orrs	r2, r1
   1eaba:	701a      	strb	r2, [r3, #0]
			return index;
   1eabc:	697b      	ldr	r3, [r7, #20]
   1eabe:	e007      	b.n	1ead0 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1eac0:	697b      	ldr	r3, [r7, #20]
   1eac2:	3301      	adds	r3, #1
   1eac4:	617b      	str	r3, [r7, #20]
   1eac6:	697b      	ldr	r3, [r7, #20]
   1eac8:	2b00      	cmp	r3, #0
   1eaca:	ddc9      	ble.n	1ea60 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   1eacc:	2301      	movs	r3, #1
   1eace:	425b      	negs	r3, r3
}
   1ead0:	0018      	movs	r0, r3
   1ead2:	46bd      	mov	sp, r7
   1ead4:	b006      	add	sp, #24
   1ead6:	bd80      	pop	{r7, pc}
   1ead8:	0001f0d1 	.word	0x0001f0d1

0001eadc <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   1eadc:	b580      	push	{r7, lr}
   1eade:	b086      	sub	sp, #24
   1eae0:	af00      	add	r7, sp, #0
   1eae2:	60f8      	str	r0, [r7, #12]
   1eae4:	60b9      	str	r1, [r7, #8]
   1eae6:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   1eae8:	68ba      	ldr	r2, [r7, #8]
   1eaea:	0013      	movs	r3, r2
   1eaec:	009b      	lsls	r3, r3, #2
   1eaee:	189b      	adds	r3, r3, r2
   1eaf0:	009b      	lsls	r3, r3, #2
   1eaf2:	68fa      	ldr	r2, [r7, #12]
   1eaf4:	18d3      	adds	r3, r2, r3
   1eaf6:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   1eaf8:	697b      	ldr	r3, [r7, #20]
   1eafa:	781a      	ldrb	r2, [r3, #0]
   1eafc:	2102      	movs	r1, #2
   1eafe:	430a      	orrs	r2, r1
   1eb00:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   1eb02:	68fb      	ldr	r3, [r7, #12]
   1eb04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1eb06:	4b07      	ldr	r3, [pc, #28]	; (1eb24 <sw_timer_enable_callback+0x48>)
   1eb08:	0011      	movs	r1, r2
   1eb0a:	6878      	ldr	r0, [r7, #4]
   1eb0c:	4798      	blx	r3
   1eb0e:	0003      	movs	r3, r0
   1eb10:	001a      	movs	r2, r3
   1eb12:	4b05      	ldr	r3, [pc, #20]	; (1eb28 <sw_timer_enable_callback+0x4c>)
   1eb14:	681b      	ldr	r3, [r3, #0]
   1eb16:	18d2      	adds	r2, r2, r3
   1eb18:	697b      	ldr	r3, [r7, #20]
   1eb1a:	611a      	str	r2, [r3, #16]
}
   1eb1c:	46c0      	nop			; (mov r8, r8)
   1eb1e:	46bd      	mov	sp, r7
   1eb20:	b006      	add	sp, #24
   1eb22:	bd80      	pop	{r7, pc}
   1eb24:	0001f0d1 	.word	0x0001f0d1
   1eb28:	20004588 	.word	0x20004588

0001eb2c <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   1eb2c:	b580      	push	{r7, lr}
   1eb2e:	b084      	sub	sp, #16
   1eb30:	af00      	add	r7, sp, #0
   1eb32:	6078      	str	r0, [r7, #4]
   1eb34:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   1eb36:	683a      	ldr	r2, [r7, #0]
   1eb38:	0013      	movs	r3, r2
   1eb3a:	009b      	lsls	r3, r3, #2
   1eb3c:	189b      	adds	r3, r3, r2
   1eb3e:	009b      	lsls	r3, r3, #2
   1eb40:	687a      	ldr	r2, [r7, #4]
   1eb42:	18d3      	adds	r3, r2, r3
   1eb44:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   1eb46:	68fb      	ldr	r3, [r7, #12]
   1eb48:	781a      	ldrb	r2, [r3, #0]
   1eb4a:	2102      	movs	r1, #2
   1eb4c:	438a      	bics	r2, r1
   1eb4e:	701a      	strb	r2, [r3, #0]
}
   1eb50:	46c0      	nop			; (mov r8, r8)
   1eb52:	46bd      	mov	sp, r7
   1eb54:	b004      	add	sp, #16
   1eb56:	bd80      	pop	{r7, pc}

0001eb58 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   1eb58:	b590      	push	{r4, r7, lr}
   1eb5a:	b085      	sub	sp, #20
   1eb5c:	af00      	add	r7, sp, #0
   1eb5e:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1eb60:	2300      	movs	r3, #0
   1eb62:	60fb      	str	r3, [r7, #12]
   1eb64:	e053      	b.n	1ec0e <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   1eb66:	6879      	ldr	r1, [r7, #4]
   1eb68:	68fa      	ldr	r2, [r7, #12]
   1eb6a:	0013      	movs	r3, r2
   1eb6c:	009b      	lsls	r3, r3, #2
   1eb6e:	189b      	adds	r3, r3, r2
   1eb70:	009b      	lsls	r3, r3, #2
   1eb72:	5c5b      	ldrb	r3, [r3, r1]
   1eb74:	07db      	lsls	r3, r3, #31
   1eb76:	0fdb      	lsrs	r3, r3, #31
   1eb78:	b2db      	uxtb	r3, r3
   1eb7a:	2b00      	cmp	r3, #0
   1eb7c:	d044      	beq.n	1ec08 <sw_timer_task+0xb0>
   1eb7e:	6879      	ldr	r1, [r7, #4]
   1eb80:	68fa      	ldr	r2, [r7, #12]
   1eb82:	0013      	movs	r3, r2
   1eb84:	009b      	lsls	r3, r3, #2
   1eb86:	189b      	adds	r3, r3, r2
   1eb88:	009b      	lsls	r3, r3, #2
   1eb8a:	5c5b      	ldrb	r3, [r3, r1]
   1eb8c:	079b      	lsls	r3, r3, #30
   1eb8e:	0fdb      	lsrs	r3, r3, #31
   1eb90:	b2db      	uxtb	r3, r3
   1eb92:	2b00      	cmp	r3, #0
   1eb94:	d038      	beq.n	1ec08 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   1eb96:	68fa      	ldr	r2, [r7, #12]
   1eb98:	0013      	movs	r3, r2
   1eb9a:	009b      	lsls	r3, r3, #2
   1eb9c:	189b      	adds	r3, r3, r2
   1eb9e:	009b      	lsls	r3, r3, #2
   1eba0:	687a      	ldr	r2, [r7, #4]
   1eba2:	18d3      	adds	r3, r2, r3
   1eba4:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   1eba6:	68bb      	ldr	r3, [r7, #8]
   1eba8:	691a      	ldr	r2, [r3, #16]
   1ebaa:	4b1c      	ldr	r3, [pc, #112]	; (1ec1c <sw_timer_task+0xc4>)
   1ebac:	681b      	ldr	r3, [r3, #0]
   1ebae:	1ad3      	subs	r3, r2, r3
   1ebb0:	d52a      	bpl.n	1ec08 <sw_timer_task+0xb0>
   1ebb2:	68bb      	ldr	r3, [r7, #8]
   1ebb4:	781b      	ldrb	r3, [r3, #0]
   1ebb6:	2204      	movs	r2, #4
   1ebb8:	4013      	ands	r3, r2
   1ebba:	b2db      	uxtb	r3, r3
   1ebbc:	2b00      	cmp	r3, #0
   1ebbe:	d123      	bne.n	1ec08 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   1ebc0:	68bb      	ldr	r3, [r7, #8]
   1ebc2:	781a      	ldrb	r2, [r3, #0]
   1ebc4:	2104      	movs	r1, #4
   1ebc6:	430a      	orrs	r2, r1
   1ebc8:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   1ebca:	68bb      	ldr	r3, [r7, #8]
   1ebcc:	68db      	ldr	r3, [r3, #12]
   1ebce:	2b00      	cmp	r3, #0
   1ebd0:	d007      	beq.n	1ebe2 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   1ebd2:	68bb      	ldr	r3, [r7, #8]
   1ebd4:	68da      	ldr	r2, [r3, #12]
   1ebd6:	4b11      	ldr	r3, [pc, #68]	; (1ec1c <sw_timer_task+0xc4>)
   1ebd8:	681b      	ldr	r3, [r3, #0]
   1ebda:	18d2      	adds	r2, r2, r3
   1ebdc:	68bb      	ldr	r3, [r7, #8]
   1ebde:	611a      	str	r2, [r3, #16]
   1ebe0:	e004      	b.n	1ebec <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   1ebe2:	68bb      	ldr	r3, [r7, #8]
   1ebe4:	781a      	ldrb	r2, [r3, #0]
   1ebe6:	2102      	movs	r1, #2
   1ebe8:	438a      	bics	r2, r1
   1ebea:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   1ebec:	68bb      	ldr	r3, [r7, #8]
   1ebee:	685c      	ldr	r4, [r3, #4]
   1ebf0:	68bb      	ldr	r3, [r7, #8]
   1ebf2:	689a      	ldr	r2, [r3, #8]
   1ebf4:	68bb      	ldr	r3, [r7, #8]
   1ebf6:	68db      	ldr	r3, [r3, #12]
   1ebf8:	68f9      	ldr	r1, [r7, #12]
   1ebfa:	6878      	ldr	r0, [r7, #4]
   1ebfc:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   1ebfe:	68bb      	ldr	r3, [r7, #8]
   1ec00:	781a      	ldrb	r2, [r3, #0]
   1ec02:	2104      	movs	r1, #4
   1ec04:	438a      	bics	r2, r1
   1ec06:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1ec08:	68fb      	ldr	r3, [r7, #12]
   1ec0a:	3301      	adds	r3, #1
   1ec0c:	60fb      	str	r3, [r7, #12]
   1ec0e:	68fb      	ldr	r3, [r7, #12]
   1ec10:	2b00      	cmp	r3, #0
   1ec12:	dda8      	ble.n	1eb66 <sw_timer_task+0xe>
			}
		}
	}
}
   1ec14:	46c0      	nop			; (mov r8, r8)
   1ec16:	46bd      	mov	sp, r7
   1ec18:	b005      	add	sp, #20
   1ec1a:	bd90      	pop	{r4, r7, pc}
   1ec1c:	20004588 	.word	0x20004588

0001ec20 <PrintTime>:
static TaskHandle_t displayTaskHandle = NULL;
static TaskHandle_t rtcTaskHandle = NULL; // Handle for RTC task

char bufferPrint[64];

void PrintTime(const TIME t) {
   1ec20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec22:	46ce      	mov	lr, r9
   1ec24:	4647      	mov	r7, r8
   1ec26:	b580      	push	{r7, lr}
   1ec28:	b0a1      	sub	sp, #132	; 0x84
   1ec2a:	af06      	add	r7, sp, #24
   1ec2c:	2308      	movs	r3, #8
   1ec2e:	18fb      	adds	r3, r7, r3
   1ec30:	6018      	str	r0, [r3, #0]
   1ec32:	6059      	str	r1, [r3, #4]
    // Assuming 24-hour format is used and conversion to 12-hour format is needed for display
    char am_pm = 'A';
   1ec34:	235f      	movs	r3, #95	; 0x5f
   1ec36:	2208      	movs	r2, #8
   1ec38:	4694      	mov	ip, r2
   1ec3a:	44bc      	add	ip, r7
   1ec3c:	4463      	add	r3, ip
   1ec3e:	2241      	movs	r2, #65	; 0x41
   1ec40:	701a      	strb	r2, [r3, #0]
    int hour12 = t.hour;
   1ec42:	2308      	movs	r3, #8
   1ec44:	18fb      	adds	r3, r7, r3
   1ec46:	789b      	ldrb	r3, [r3, #2]
   1ec48:	663b      	str	r3, [r7, #96]	; 0x60
    if (hour12 >= 12) {
   1ec4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1ec4c:	2b0b      	cmp	r3, #11
   1ec4e:	dd09      	ble.n	1ec64 <PrintTime+0x44>
        am_pm = 'P';
   1ec50:	235f      	movs	r3, #95	; 0x5f
   1ec52:	2208      	movs	r2, #8
   1ec54:	4694      	mov	ip, r2
   1ec56:	44bc      	add	ip, r7
   1ec58:	4463      	add	r3, ip
   1ec5a:	2250      	movs	r2, #80	; 0x50
   1ec5c:	701a      	strb	r2, [r3, #0]
        hour12 -= 12;
   1ec5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1ec60:	3b0c      	subs	r3, #12
   1ec62:	663b      	str	r3, [r7, #96]	; 0x60
    }
    if (hour12 == 0) hour12 = 12; // Convert '00' hour to '12'
   1ec64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1ec66:	2b00      	cmp	r3, #0
   1ec68:	d101      	bne.n	1ec6e <PrintTime+0x4e>
   1ec6a:	230c      	movs	r3, #12
   1ec6c:	663b      	str	r3, [r7, #96]	; 0x60

    // Map day of week from number to string
    char* daysOfWeek[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
   1ec6e:	233c      	movs	r3, #60	; 0x3c
   1ec70:	2208      	movs	r2, #8
   1ec72:	4694      	mov	ip, r2
   1ec74:	44bc      	add	ip, r7
   1ec76:	4463      	add	r3, ip
   1ec78:	4a2e      	ldr	r2, [pc, #184]	; (1ed34 <PrintTime+0x114>)
   1ec7a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1ec7c:	c313      	stmia	r3!, {r0, r1, r4}
   1ec7e:	ca13      	ldmia	r2!, {r0, r1, r4}
   1ec80:	c313      	stmia	r3!, {r0, r1, r4}
   1ec82:	6812      	ldr	r2, [r2, #0]
   1ec84:	601a      	str	r2, [r3, #0]
    char* monthNames[] = {"January", "February", "March", "April", "May", "June",
   1ec86:	230c      	movs	r3, #12
   1ec88:	2208      	movs	r2, #8
   1ec8a:	4694      	mov	ip, r2
   1ec8c:	44bc      	add	ip, r7
   1ec8e:	4463      	add	r3, ip
   1ec90:	4a29      	ldr	r2, [pc, #164]	; (1ed38 <PrintTime+0x118>)
   1ec92:	ca13      	ldmia	r2!, {r0, r1, r4}
   1ec94:	c313      	stmia	r3!, {r0, r1, r4}
   1ec96:	ca13      	ldmia	r2!, {r0, r1, r4}
   1ec98:	c313      	stmia	r3!, {r0, r1, r4}
   1ec9a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1ec9c:	c313      	stmia	r3!, {r0, r1, r4}
   1ec9e:	ca13      	ldmia	r2!, {r0, r1, r4}
   1eca0:	c313      	stmia	r3!, {r0, r1, r4}
    "July", "August", "September", "October", "November", "December"};

    // Format and print the time
    sprintf(bufferPrint, "Time: %02d:%02d:%02d %cM, %s, %s %02d, 20%02d\r\n",
    hour12, t.minutes, t.seconds, am_pm,
   1eca2:	2308      	movs	r3, #8
   1eca4:	18fb      	adds	r3, r7, r3
   1eca6:	785b      	ldrb	r3, [r3, #1]
    sprintf(bufferPrint, "Time: %02d:%02d:%02d %cM, %s, %s %02d, 20%02d\r\n",
   1eca8:	607b      	str	r3, [r7, #4]
    hour12, t.minutes, t.seconds, am_pm,
   1ecaa:	2308      	movs	r3, #8
   1ecac:	18fb      	adds	r3, r7, r3
   1ecae:	781b      	ldrb	r3, [r3, #0]
    sprintf(bufferPrint, "Time: %02d:%02d:%02d %cM, %s, %s %02d, 20%02d\r\n",
   1ecb0:	001e      	movs	r6, r3
   1ecb2:	225f      	movs	r2, #95	; 0x5f
   1ecb4:	2308      	movs	r3, #8
   1ecb6:	18fb      	adds	r3, r7, r3
   1ecb8:	189b      	adds	r3, r3, r2
   1ecba:	781b      	ldrb	r3, [r3, #0]
    daysOfWeek[t.dayofweek - 1], monthNames[t.month - 1],
   1ecbc:	2208      	movs	r2, #8
   1ecbe:	18ba      	adds	r2, r7, r2
   1ecc0:	78d2      	ldrb	r2, [r2, #3]
   1ecc2:	1e51      	subs	r1, r2, #1
    sprintf(bufferPrint, "Time: %02d:%02d:%02d %cM, %s, %s %02d, 20%02d\r\n",
   1ecc4:	223c      	movs	r2, #60	; 0x3c
   1ecc6:	2008      	movs	r0, #8
   1ecc8:	4684      	mov	ip, r0
   1ecca:	44bc      	add	ip, r7
   1eccc:	4462      	add	r2, ip
   1ecce:	0089      	lsls	r1, r1, #2
   1ecd0:	588a      	ldr	r2, [r1, r2]
   1ecd2:	4691      	mov	r9, r2
    daysOfWeek[t.dayofweek - 1], monthNames[t.month - 1],
   1ecd4:	2208      	movs	r2, #8
   1ecd6:	18b9      	adds	r1, r7, r2
   1ecd8:	7949      	ldrb	r1, [r1, #5]
   1ecda:	1e48      	subs	r0, r1, #1
    sprintf(bufferPrint, "Time: %02d:%02d:%02d %cM, %s, %s %02d, 20%02d\r\n",
   1ecdc:	210c      	movs	r1, #12
   1ecde:	2208      	movs	r2, #8
   1ece0:	4694      	mov	ip, r2
   1ece2:	44bc      	add	ip, r7
   1ece4:	4461      	add	r1, ip
   1ece6:	0080      	lsls	r0, r0, #2
   1ece8:	5841      	ldr	r1, [r0, r1]
    t.dayofmonth, t.year);
   1ecea:	2208      	movs	r2, #8
   1ecec:	18b8      	adds	r0, r7, r2
   1ecee:	7900      	ldrb	r0, [r0, #4]
    sprintf(bufferPrint, "Time: %02d:%02d:%02d %cM, %s, %s %02d, 20%02d\r\n",
   1ecf0:	4684      	mov	ip, r0
    t.dayofmonth, t.year);
   1ecf2:	2208      	movs	r2, #8
   1ecf4:	18b8      	adds	r0, r7, r2
   1ecf6:	7980      	ldrb	r0, [r0, #6]
    sprintf(bufferPrint, "Time: %02d:%02d:%02d %cM, %s, %s %02d, 20%02d\r\n",
   1ecf8:	4680      	mov	r8, r0
   1ecfa:	6e3d      	ldr	r5, [r7, #96]	; 0x60
   1ecfc:	4c0f      	ldr	r4, [pc, #60]	; (1ed3c <PrintTime+0x11c>)
   1ecfe:	4810      	ldr	r0, [pc, #64]	; (1ed40 <PrintTime+0x120>)
   1ed00:	4642      	mov	r2, r8
   1ed02:	9205      	str	r2, [sp, #20]
   1ed04:	4662      	mov	r2, ip
   1ed06:	9204      	str	r2, [sp, #16]
   1ed08:	9103      	str	r1, [sp, #12]
   1ed0a:	464a      	mov	r2, r9
   1ed0c:	9202      	str	r2, [sp, #8]
   1ed0e:	9301      	str	r3, [sp, #4]
   1ed10:	9600      	str	r6, [sp, #0]
   1ed12:	687b      	ldr	r3, [r7, #4]
   1ed14:	002a      	movs	r2, r5
   1ed16:	0021      	movs	r1, r4
   1ed18:	4c0a      	ldr	r4, [pc, #40]	; (1ed44 <PrintTime+0x124>)
   1ed1a:	47a0      	blx	r4

    SerialConsoleWriteString(bufferPrint);
   1ed1c:	4b08      	ldr	r3, [pc, #32]	; (1ed40 <PrintTime+0x120>)
   1ed1e:	0018      	movs	r0, r3
   1ed20:	4b09      	ldr	r3, [pc, #36]	; (1ed48 <PrintTime+0x128>)
   1ed22:	4798      	blx	r3
}
   1ed24:	46c0      	nop			; (mov r8, r8)
   1ed26:	46bd      	mov	sp, r7
   1ed28:	b01b      	add	sp, #108	; 0x6c
   1ed2a:	bc0c      	pop	{r2, r3}
   1ed2c:	4690      	mov	r8, r2
   1ed2e:	4699      	mov	r9, r3
   1ed30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ed32:	46c0      	nop			; (mov r8, r8)
   1ed34:	00026dec 	.word	0x00026dec
   1ed38:	00026e74 	.word	0x00026e74
   1ed3c:	00026d78 	.word	0x00026d78
   1ed40:	20005a54 	.word	0x20005a54
   1ed44:	00021049 	.word	0x00021049
   1ed48:	0000a289 	.word	0x0000a289

0001ed4c <main>:

int main(void) {
   1ed4c:	b580      	push	{r7, lr}
   1ed4e:	af00      	add	r7, sp, #0
    system_init();
   1ed50:	4b06      	ldr	r3, [pc, #24]	; (1ed6c <main+0x20>)
   1ed52:	4798      	blx	r3
    InitializeSerialConsole();
   1ed54:	4b06      	ldr	r3, [pc, #24]	; (1ed70 <main+0x24>)
   1ed56:	4798      	blx	r3
    vTraceEnable(TRC_START);
   1ed58:	2001      	movs	r0, #1
   1ed5a:	4b06      	ldr	r3, [pc, #24]	; (1ed74 <main+0x28>)
   1ed5c:	4798      	blx	r3
    vTaskStartScheduler();
   1ed5e:	4b06      	ldr	r3, [pc, #24]	; (1ed78 <main+0x2c>)
   1ed60:	4798      	blx	r3
    return 0; // Will not get here
   1ed62:	2300      	movs	r3, #0
}
   1ed64:	0018      	movs	r0, r3
   1ed66:	46bd      	mov	sp, r7
   1ed68:	bd80      	pop	{r7, pc}
   1ed6a:	46c0      	nop			; (mov r8, r8)
   1ed6c:	00016711 	.word	0x00016711
   1ed70:	0000a219 	.word	0x0000a219
   1ed74:	000048e1 	.word	0x000048e1
   1ed78:	00008871 	.word	0x00008871

0001ed7c <vApplicationDaemonTaskStartupHook>:

void vApplicationDaemonTaskStartupHook(void) {
   1ed7c:	b580      	push	{r7, lr}
   1ed7e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   1ed80:	4b1e      	ldr	r3, [pc, #120]	; (1edfc <vApplicationDaemonTaskStartupHook+0x80>)
   1ed82:	0018      	movs	r0, r3
   1ed84:	4b1e      	ldr	r3, [pc, #120]	; (1ee00 <vApplicationDaemonTaskStartupHook+0x84>)
   1ed86:	4798      	blx	r3
    SerialConsoleWriteString("Initialize HW...\r\n");
   1ed88:	4b1e      	ldr	r3, [pc, #120]	; (1ee04 <vApplicationDaemonTaskStartupHook+0x88>)
   1ed8a:	0018      	movs	r0, r3
   1ed8c:	4b1c      	ldr	r3, [pc, #112]	; (1ee00 <vApplicationDaemonTaskStartupHook+0x84>)
   1ed8e:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   1ed90:	4b1d      	ldr	r3, [pc, #116]	; (1ee08 <vApplicationDaemonTaskStartupHook+0x8c>)
   1ed92:	4798      	blx	r3
   1ed94:	1e03      	subs	r3, r0, #0
   1ed96:	d004      	beq.n	1eda2 <vApplicationDaemonTaskStartupHook+0x26>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   1ed98:	4b1c      	ldr	r3, [pc, #112]	; (1ee0c <vApplicationDaemonTaskStartupHook+0x90>)
   1ed9a:	0018      	movs	r0, r3
   1ed9c:	4b18      	ldr	r3, [pc, #96]	; (1ee00 <vApplicationDaemonTaskStartupHook+0x84>)
   1ed9e:	4798      	blx	r3
   1eda0:	e024      	b.n	1edec <vApplicationDaemonTaskStartupHook+0x70>
    } else {
        SerialConsoleWriteString("I2C Driver Initialized!\r\n");
   1eda2:	4b1b      	ldr	r3, [pc, #108]	; (1ee10 <vApplicationDaemonTaskStartupHook+0x94>)
   1eda4:	0018      	movs	r0, r3
   1eda6:	4b16      	ldr	r3, [pc, #88]	; (1ee00 <vApplicationDaemonTaskStartupHook+0x84>)
   1eda8:	4798      	blx	r3
        if (SSD1306_Init()) {
   1edaa:	4b1a      	ldr	r3, [pc, #104]	; (1ee14 <vApplicationDaemonTaskStartupHook+0x98>)
   1edac:	4798      	blx	r3
   1edae:	1e03      	subs	r3, r0, #0
   1edb0:	d013      	beq.n	1edda <vApplicationDaemonTaskStartupHook+0x5e>
            SSD1306_Fill(SSD1306_COLOR_BLACK);  // Clear the display
   1edb2:	2000      	movs	r0, #0
   1edb4:	4b18      	ldr	r3, [pc, #96]	; (1ee18 <vApplicationDaemonTaskStartupHook+0x9c>)
   1edb6:	4798      	blx	r3
            SSD1306_GotoXY(10, 25);  // Position cursor
   1edb8:	2119      	movs	r1, #25
   1edba:	200a      	movs	r0, #10
   1edbc:	4b17      	ldr	r3, [pc, #92]	; (1ee1c <vApplicationDaemonTaskStartupHook+0xa0>)
   1edbe:	4798      	blx	r3
            SSD1306_Puts("Hi", &Font_11x18, SSD1306_COLOR_WHITE);  // Print "Hi"
   1edc0:	4917      	ldr	r1, [pc, #92]	; (1ee20 <vApplicationDaemonTaskStartupHook+0xa4>)
   1edc2:	4b18      	ldr	r3, [pc, #96]	; (1ee24 <vApplicationDaemonTaskStartupHook+0xa8>)
   1edc4:	2201      	movs	r2, #1
   1edc6:	0018      	movs	r0, r3
   1edc8:	4b17      	ldr	r3, [pc, #92]	; (1ee28 <vApplicationDaemonTaskStartupHook+0xac>)
   1edca:	4798      	blx	r3
            SSD1306_UpdateScreen();  // Refresh the display
   1edcc:	4b17      	ldr	r3, [pc, #92]	; (1ee2c <vApplicationDaemonTaskStartupHook+0xb0>)
   1edce:	4798      	blx	r3
            SerialConsoleWriteString("SSD1306 Successfully Initialized!\r\n");
   1edd0:	4b17      	ldr	r3, [pc, #92]	; (1ee30 <vApplicationDaemonTaskStartupHook+0xb4>)
   1edd2:	0018      	movs	r0, r3
   1edd4:	4b0a      	ldr	r3, [pc, #40]	; (1ee00 <vApplicationDaemonTaskStartupHook+0x84>)
   1edd6:	4798      	blx	r3
   1edd8:	e003      	b.n	1ede2 <vApplicationDaemonTaskStartupHook+0x66>
        } else {
            SerialConsoleWriteString("SSD1306 Initialization failed!\r\n");
   1edda:	4b16      	ldr	r3, [pc, #88]	; (1ee34 <vApplicationDaemonTaskStartupHook+0xb8>)
   1eddc:	0018      	movs	r0, r3
   1edde:	4b08      	ldr	r3, [pc, #32]	; (1ee00 <vApplicationDaemonTaskStartupHook+0x84>)
   1ede0:	4798      	blx	r3
        }
        vTaskDelay(pdMS_TO_TICKS(100)); // Delay after initialization
   1ede2:	2064      	movs	r0, #100	; 0x64
   1ede4:	4b14      	ldr	r3, [pc, #80]	; (1ee38 <vApplicationDaemonTaskStartupHook+0xbc>)
   1ede6:	4798      	blx	r3
        StartTasks();
   1ede8:	4b14      	ldr	r3, [pc, #80]	; (1ee3c <vApplicationDaemonTaskStartupHook+0xc0>)
   1edea:	4798      	blx	r3
    }
    vTaskSuspend(daemonTaskHandle);
   1edec:	4b14      	ldr	r3, [pc, #80]	; (1ee40 <vApplicationDaemonTaskStartupHook+0xc4>)
   1edee:	681b      	ldr	r3, [r3, #0]
   1edf0:	0018      	movs	r0, r3
   1edf2:	4b14      	ldr	r3, [pc, #80]	; (1ee44 <vApplicationDaemonTaskStartupHook+0xc8>)
   1edf4:	4798      	blx	r3
}
   1edf6:	46c0      	nop			; (mov r8, r8)
   1edf8:	46bd      	mov	sp, r7
   1edfa:	bd80      	pop	{r7, pc}
   1edfc:	00026ea4 	.word	0x00026ea4
   1ee00:	0000a289 	.word	0x0000a289
   1ee04:	00026ec8 	.word	0x00026ec8
   1ee08:	00001ad5 	.word	0x00001ad5
   1ee0c:	00026edc 	.word	0x00026edc
   1ee10:	00026f00 	.word	0x00026f00
   1ee14:	000001ad 	.word	0x000001ad
   1ee18:	000002bd 	.word	0x000002bd
   1ee1c:	00000305 	.word	0x00000305
   1ee20:	20000014 	.word	0x20000014
   1ee24:	00026f1c 	.word	0x00026f1c
   1ee28:	00000395 	.word	0x00000395
   1ee2c:	000001e5 	.word	0x000001e5
   1ee30:	00026f20 	.word	0x00026f20
   1ee34:	00026f44 	.word	0x00026f44
   1ee38:	00008635 	.word	0x00008635
   1ee3c:	0001ee49 	.word	0x0001ee49
   1ee40:	20004590 	.word	0x20004590
   1ee44:	00008715 	.word	0x00008715

0001ee48 <StartTasks>:

static void StartTasks(void) {
   1ee48:	b590      	push	{r4, r7, lr}
   1ee4a:	b083      	sub	sp, #12
   1ee4c:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   1ee4e:	4b34      	ldr	r3, [pc, #208]	; (1ef20 <StartTasks+0xd8>)
   1ee50:	4798      	blx	r3
   1ee52:	0003      	movs	r3, r0
   1ee54:	4a33      	ldr	r2, [pc, #204]	; (1ef24 <StartTasks+0xdc>)
   1ee56:	4834      	ldr	r0, [pc, #208]	; (1ef28 <StartTasks+0xe0>)
   1ee58:	2140      	movs	r1, #64	; 0x40
   1ee5a:	4c34      	ldr	r4, [pc, #208]	; (1ef2c <StartTasks+0xe4>)
   1ee5c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   1ee5e:	4b32      	ldr	r3, [pc, #200]	; (1ef28 <StartTasks+0xe0>)
   1ee60:	0018      	movs	r0, r3
   1ee62:	4b33      	ldr	r3, [pc, #204]	; (1ef30 <StartTasks+0xe8>)
   1ee64:	4798      	blx	r3

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   1ee66:	23c8      	movs	r3, #200	; 0xc8
   1ee68:	005a      	lsls	r2, r3, #1
   1ee6a:	4932      	ldr	r1, [pc, #200]	; (1ef34 <StartTasks+0xec>)
   1ee6c:	4832      	ldr	r0, [pc, #200]	; (1ef38 <StartTasks+0xf0>)
   1ee6e:	4b33      	ldr	r3, [pc, #204]	; (1ef3c <StartTasks+0xf4>)
   1ee70:	9301      	str	r3, [sp, #4]
   1ee72:	2304      	movs	r3, #4
   1ee74:	9300      	str	r3, [sp, #0]
   1ee76:	2300      	movs	r3, #0
   1ee78:	4c31      	ldr	r4, [pc, #196]	; (1ef40 <StartTasks+0xf8>)
   1ee7a:	47a0      	blx	r4
   1ee7c:	0003      	movs	r3, r0
   1ee7e:	2b01      	cmp	r3, #1
   1ee80:	d003      	beq.n	1ee8a <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   1ee82:	4b30      	ldr	r3, [pc, #192]	; (1ef44 <StartTasks+0xfc>)
   1ee84:	0018      	movs	r0, r3
   1ee86:	4b2a      	ldr	r3, [pc, #168]	; (1ef30 <StartTasks+0xe8>)
   1ee88:	4798      	blx	r3
    }
if (xTaskCreate(DisplayTask, "DisplayTask", 256, NULL, 5, &displayTaskHandle) != pdPASS) {
   1ee8a:	2380      	movs	r3, #128	; 0x80
   1ee8c:	005a      	lsls	r2, r3, #1
   1ee8e:	492e      	ldr	r1, [pc, #184]	; (1ef48 <StartTasks+0x100>)
   1ee90:	482e      	ldr	r0, [pc, #184]	; (1ef4c <StartTasks+0x104>)
   1ee92:	4b2f      	ldr	r3, [pc, #188]	; (1ef50 <StartTasks+0x108>)
   1ee94:	9301      	str	r3, [sp, #4]
   1ee96:	2305      	movs	r3, #5
   1ee98:	9300      	str	r3, [sp, #0]
   1ee9a:	2300      	movs	r3, #0
   1ee9c:	4c28      	ldr	r4, [pc, #160]	; (1ef40 <StartTasks+0xf8>)
   1ee9e:	47a0      	blx	r4
   1eea0:	0003      	movs	r3, r0
   1eea2:	2b01      	cmp	r3, #1
   1eea4:	d004      	beq.n	1eeb0 <StartTasks+0x68>
	SerialConsoleWriteString("Failed to create display task!\r\n");
   1eea6:	4b2b      	ldr	r3, [pc, #172]	; (1ef54 <StartTasks+0x10c>)
   1eea8:	0018      	movs	r0, r3
   1eeaa:	4b21      	ldr	r3, [pc, #132]	; (1ef30 <StartTasks+0xe8>)
   1eeac:	4798      	blx	r3
   1eeae:	e003      	b.n	1eeb8 <StartTasks+0x70>
	} else {
	SerialConsoleWriteString("Display task created successfully.\r\n");
   1eeb0:	4b29      	ldr	r3, [pc, #164]	; (1ef58 <StartTasks+0x110>)
   1eeb2:	0018      	movs	r0, r3
   1eeb4:	4b1e      	ldr	r3, [pc, #120]	; (1ef30 <StartTasks+0xe8>)
   1eeb6:	4798      	blx	r3
}
    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   1eeb8:	23fa      	movs	r3, #250	; 0xfa
   1eeba:	009a      	lsls	r2, r3, #2
   1eebc:	4927      	ldr	r1, [pc, #156]	; (1ef5c <StartTasks+0x114>)
   1eebe:	4828      	ldr	r0, [pc, #160]	; (1ef60 <StartTasks+0x118>)
   1eec0:	4b28      	ldr	r3, [pc, #160]	; (1ef64 <StartTasks+0x11c>)
   1eec2:	9301      	str	r3, [sp, #4]
   1eec4:	2303      	movs	r3, #3
   1eec6:	9300      	str	r3, [sp, #0]
   1eec8:	2300      	movs	r3, #0
   1eeca:	4c1d      	ldr	r4, [pc, #116]	; (1ef40 <StartTasks+0xf8>)
   1eecc:	47a0      	blx	r4
   1eece:	0003      	movs	r3, r0
   1eed0:	2b01      	cmp	r3, #1
   1eed2:	d003      	beq.n	1eedc <StartTasks+0x94>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   1eed4:	4b24      	ldr	r3, [pc, #144]	; (1ef68 <StartTasks+0x120>)
   1eed6:	0018      	movs	r0, r3
   1eed8:	4b15      	ldr	r3, [pc, #84]	; (1ef30 <StartTasks+0xe8>)
   1eeda:	4798      	blx	r3
    }

    if (xTaskCreate(RtcTask, "RTC_TASK", 512, NULL, 3, &rtcTaskHandle) != pdPASS) {
   1eedc:	2380      	movs	r3, #128	; 0x80
   1eede:	009a      	lsls	r2, r3, #2
   1eee0:	4922      	ldr	r1, [pc, #136]	; (1ef6c <StartTasks+0x124>)
   1eee2:	4823      	ldr	r0, [pc, #140]	; (1ef70 <StartTasks+0x128>)
   1eee4:	4b23      	ldr	r3, [pc, #140]	; (1ef74 <StartTasks+0x12c>)
   1eee6:	9301      	str	r3, [sp, #4]
   1eee8:	2303      	movs	r3, #3
   1eeea:	9300      	str	r3, [sp, #0]
   1eeec:	2300      	movs	r3, #0
   1eeee:	4c14      	ldr	r4, [pc, #80]	; (1ef40 <StartTasks+0xf8>)
   1eef0:	47a0      	blx	r4
   1eef2:	0003      	movs	r3, r0
   1eef4:	2b01      	cmp	r3, #1
   1eef6:	d003      	beq.n	1ef00 <StartTasks+0xb8>
        SerialConsoleWriteString("ERR: RTC task could not be initialized!\r\n");
   1eef8:	4b1f      	ldr	r3, [pc, #124]	; (1ef78 <StartTasks+0x130>)
   1eefa:	0018      	movs	r0, r3
   1eefc:	4b0c      	ldr	r3, [pc, #48]	; (1ef30 <StartTasks+0xe8>)
   1eefe:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting tasks: %d\r\n", xPortGetFreeHeapSize());
   1ef00:	4b07      	ldr	r3, [pc, #28]	; (1ef20 <StartTasks+0xd8>)
   1ef02:	4798      	blx	r3
   1ef04:	0003      	movs	r3, r0
   1ef06:	4a1d      	ldr	r2, [pc, #116]	; (1ef7c <StartTasks+0x134>)
   1ef08:	4807      	ldr	r0, [pc, #28]	; (1ef28 <StartTasks+0xe0>)
   1ef0a:	2140      	movs	r1, #64	; 0x40
   1ef0c:	4c07      	ldr	r4, [pc, #28]	; (1ef2c <StartTasks+0xe4>)
   1ef0e:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   1ef10:	4b05      	ldr	r3, [pc, #20]	; (1ef28 <StartTasks+0xe0>)
   1ef12:	0018      	movs	r0, r3
   1ef14:	4b06      	ldr	r3, [pc, #24]	; (1ef30 <StartTasks+0xe8>)
   1ef16:	4798      	blx	r3
}
   1ef18:	46c0      	nop			; (mov r8, r8)
   1ef1a:	46bd      	mov	sp, r7
   1ef1c:	b001      	add	sp, #4
   1ef1e:	bd90      	pop	{r4, r7, pc}
   1ef20:	00006851 	.word	0x00006851
   1ef24:	00026f68 	.word	0x00026f68
   1ef28:	20005a54 	.word	0x20005a54
   1ef2c:	00020fe5 	.word	0x00020fe5
   1ef30:	0000a289 	.word	0x0000a289
   1ef34:	00026f8c 	.word	0x00026f8c
   1ef38:	0000115d 	.word	0x0000115d
   1ef3c:	2000458c 	.word	0x2000458c
   1ef40:	00008299 	.word	0x00008299
   1ef44:	00026f98 	.word	0x00026f98
   1ef48:	00026fc4 	.word	0x00026fc4
   1ef4c:	0001f029 	.word	0x0001f029
   1ef50:	20004598 	.word	0x20004598
   1ef54:	00026fd0 	.word	0x00026fd0
   1ef58:	00026ff4 	.word	0x00026ff4
   1ef5c:	0002701c 	.word	0x0002701c
   1ef60:	00003719 	.word	0x00003719
   1ef64:	20004594 	.word	0x20004594
   1ef68:	00027028 	.word	0x00027028
   1ef6c:	00027054 	.word	0x00027054
   1ef70:	0001ef81 	.word	0x0001ef81
   1ef74:	2000459c 	.word	0x2000459c
   1ef78:	00027060 	.word	0x00027060
   1ef7c:	0002708c 	.word	0x0002708c

0001ef80 <RtcTask>:

void RtcTask(void *pvParameters) {
   1ef80:	b590      	push	{r4, r7, lr}
   1ef82:	b08b      	sub	sp, #44	; 0x2c
   1ef84:	af04      	add	r7, sp, #16
   1ef86:	6078      	str	r0, [r7, #4]
    // Initialize the I2C and RTC on first run
    static bool rtcInitialized = false;
    if (!rtcInitialized) {
   1ef88:	4b1e      	ldr	r3, [pc, #120]	; (1f004 <RtcTask+0x84>)
   1ef8a:	781b      	ldrb	r3, [r3, #0]
   1ef8c:	2201      	movs	r2, #1
   1ef8e:	4053      	eors	r3, r2
   1ef90:	b2db      	uxtb	r3, r3
   1ef92:	2b00      	cmp	r3, #0
   1ef94:	d021      	beq.n	1efda <RtcTask+0x5a>
        // Set initial time
        SetTime(35, 54, 22, 4, 24, 4, 24); // sec, min, hour, dayofweek, dayofmonth, month, year
   1ef96:	2318      	movs	r3, #24
   1ef98:	9302      	str	r3, [sp, #8]
   1ef9a:	2304      	movs	r3, #4
   1ef9c:	9301      	str	r3, [sp, #4]
   1ef9e:	2318      	movs	r3, #24
   1efa0:	9300      	str	r3, [sp, #0]
   1efa2:	2304      	movs	r3, #4
   1efa4:	2216      	movs	r2, #22
   1efa6:	2136      	movs	r1, #54	; 0x36
   1efa8:	2023      	movs	r0, #35	; 0x23
   1efaa:	4c17      	ldr	r4, [pc, #92]	; (1f008 <RtcTask+0x88>)
   1efac:	47a0      	blx	r4
        rtcInitialized = true; // Mark the RTC as initialized
   1efae:	4b15      	ldr	r3, [pc, #84]	; (1f004 <RtcTask+0x84>)
   1efb0:	2201      	movs	r2, #1
   1efb2:	701a      	strb	r2, [r3, #0]
        SerialConsoleWriteString("Setting RTC time to: ");
   1efb4:	4b15      	ldr	r3, [pc, #84]	; (1f00c <RtcTask+0x8c>)
   1efb6:	0018      	movs	r0, r3
   1efb8:	4b15      	ldr	r3, [pc, #84]	; (1f010 <RtcTask+0x90>)
   1efba:	4798      	blx	r3
        TIME setTime = {35, 54, 22, 4, 24, 4, 24};
   1efbc:	2310      	movs	r3, #16
   1efbe:	18fb      	adds	r3, r7, r3
   1efc0:	4a14      	ldr	r2, [pc, #80]	; (1f014 <RtcTask+0x94>)
   1efc2:	6811      	ldr	r1, [r2, #0]
   1efc4:	6019      	str	r1, [r3, #0]
   1efc6:	8891      	ldrh	r1, [r2, #4]
   1efc8:	8099      	strh	r1, [r3, #4]
   1efca:	7992      	ldrb	r2, [r2, #6]
   1efcc:	719a      	strb	r2, [r3, #6]
        PrintTime(setTime);
   1efce:	2310      	movs	r3, #16
   1efd0:	18fb      	adds	r3, r7, r3
   1efd2:	6818      	ldr	r0, [r3, #0]
   1efd4:	6859      	ldr	r1, [r3, #4]
   1efd6:	4b10      	ldr	r3, [pc, #64]	; (1f018 <RtcTask+0x98>)
   1efd8:	4798      	blx	r3
    }

    // Main task loop
    while (1) {
        TIME currentTime;
        GetTime(&currentTime); // Fetch current time from RTC
   1efda:	2308      	movs	r3, #8
   1efdc:	18fb      	adds	r3, r7, r3
   1efde:	0018      	movs	r0, r3
   1efe0:	4b0e      	ldr	r3, [pc, #56]	; (1f01c <RtcTask+0x9c>)
   1efe2:	4798      	blx	r3
        SerialConsoleWriteString("Interpreted Time: ");
   1efe4:	4b0e      	ldr	r3, [pc, #56]	; (1f020 <RtcTask+0xa0>)
   1efe6:	0018      	movs	r0, r3
   1efe8:	4b09      	ldr	r3, [pc, #36]	; (1f010 <RtcTask+0x90>)
   1efea:	4798      	blx	r3
        PrintTime(currentTime); // Print the complete date and time
   1efec:	2308      	movs	r3, #8
   1efee:	18fb      	adds	r3, r7, r3
   1eff0:	6818      	ldr	r0, [r3, #0]
   1eff2:	6859      	ldr	r1, [r3, #4]
   1eff4:	4b08      	ldr	r3, [pc, #32]	; (1f018 <RtcTask+0x98>)
   1eff6:	4798      	blx	r3
        vTaskDelay(pdMS_TO_TICKS(1000)); // Update every second
   1eff8:	23fa      	movs	r3, #250	; 0xfa
   1effa:	009b      	lsls	r3, r3, #2
   1effc:	0018      	movs	r0, r3
   1effe:	4b09      	ldr	r3, [pc, #36]	; (1f024 <RtcTask+0xa4>)
   1f000:	4798      	blx	r3
    while (1) {
   1f002:	e7ea      	b.n	1efda <RtcTask+0x5a>
   1f004:	200045a0 	.word	0x200045a0
   1f008:	00001f81 	.word	0x00001f81
   1f00c:	000270ac 	.word	0x000270ac
   1f010:	0000a289 	.word	0x0000a289
   1f014:	000270d8 	.word	0x000270d8
   1f018:	0001ec21 	.word	0x0001ec21
   1f01c:	000020b1 	.word	0x000020b1
   1f020:	000270c4 	.word	0x000270c4
   1f024:	00008635 	.word	0x00008635

0001f028 <DisplayTask>:
    }
}

static void DisplayTask(void *pvParameters) {
   1f028:	b580      	push	{r7, lr}
   1f02a:	b082      	sub	sp, #8
   1f02c:	af00      	add	r7, sp, #0
   1f02e:	6078      	str	r0, [r7, #4]
	// Initialize the display
	SSD1306_Init();
   1f030:	4b12      	ldr	r3, [pc, #72]	; (1f07c <DisplayTask+0x54>)
   1f032:	4798      	blx	r3
	SSD1306_Fill(SSD1306_COLOR_BLACK); // Clear display
   1f034:	2000      	movs	r0, #0
   1f036:	4b12      	ldr	r3, [pc, #72]	; (1f080 <DisplayTask+0x58>)
   1f038:	4798      	blx	r3
	SSD1306_GotoXY(10, 25); // Position cursor
   1f03a:	2119      	movs	r1, #25
   1f03c:	200a      	movs	r0, #10
   1f03e:	4b11      	ldr	r3, [pc, #68]	; (1f084 <DisplayTask+0x5c>)
   1f040:	4798      	blx	r3
	SSD1306_Puts("Hello, world!", &Font_11x18, SSD1306_COLOR_WHITE); // Display text
   1f042:	4911      	ldr	r1, [pc, #68]	; (1f088 <DisplayTask+0x60>)
   1f044:	4b11      	ldr	r3, [pc, #68]	; (1f08c <DisplayTask+0x64>)
   1f046:	2201      	movs	r2, #1
   1f048:	0018      	movs	r0, r3
   1f04a:	4b11      	ldr	r3, [pc, #68]	; (1f090 <DisplayTask+0x68>)
   1f04c:	4798      	blx	r3
	SSD1306_UpdateScreen(); // Refresh the display
   1f04e:	4b11      	ldr	r3, [pc, #68]	; (1f094 <DisplayTask+0x6c>)
   1f050:	4798      	blx	r3

	for (;;) {
		// This could be replaced by actual dynamic updates
		SSD1306_Fill(SSD1306_COLOR_BLACK);
   1f052:	2000      	movs	r0, #0
   1f054:	4b0a      	ldr	r3, [pc, #40]	; (1f080 <DisplayTask+0x58>)
   1f056:	4798      	blx	r3
		SSD1306_GotoXY(10, 25);
   1f058:	2119      	movs	r1, #25
   1f05a:	200a      	movs	r0, #10
   1f05c:	4b09      	ldr	r3, [pc, #36]	; (1f084 <DisplayTask+0x5c>)
   1f05e:	4798      	blx	r3
		SSD1306_Puts("Updating...", &Font_11x18, SSD1306_COLOR_WHITE);
   1f060:	4909      	ldr	r1, [pc, #36]	; (1f088 <DisplayTask+0x60>)
   1f062:	4b0d      	ldr	r3, [pc, #52]	; (1f098 <DisplayTask+0x70>)
   1f064:	2201      	movs	r2, #1
   1f066:	0018      	movs	r0, r3
   1f068:	4b09      	ldr	r3, [pc, #36]	; (1f090 <DisplayTask+0x68>)
   1f06a:	4798      	blx	r3
		SSD1306_UpdateScreen();
   1f06c:	4b09      	ldr	r3, [pc, #36]	; (1f094 <DisplayTask+0x6c>)
   1f06e:	4798      	blx	r3
		vTaskDelay(pdMS_TO_TICKS(1000)); // Delay for 1 second
   1f070:	23fa      	movs	r3, #250	; 0xfa
   1f072:	009b      	lsls	r3, r3, #2
   1f074:	0018      	movs	r0, r3
   1f076:	4b09      	ldr	r3, [pc, #36]	; (1f09c <DisplayTask+0x74>)
   1f078:	4798      	blx	r3
		SSD1306_Fill(SSD1306_COLOR_BLACK);
   1f07a:	e7ea      	b.n	1f052 <DisplayTask+0x2a>
   1f07c:	000001ad 	.word	0x000001ad
   1f080:	000002bd 	.word	0x000002bd
   1f084:	00000305 	.word	0x00000305
   1f088:	20000014 	.word	0x20000014
   1f08c:	000270e0 	.word	0x000270e0
   1f090:	00000395 	.word	0x00000395
   1f094:	000001e5 	.word	0x000001e5
   1f098:	000270f0 	.word	0x000270f0
   1f09c:	00008635 	.word	0x00008635

0001f0a0 <vApplicationMallocFailedHook>:
	}
}

void vApplicationMallocFailedHook(void) {
   1f0a0:	b580      	push	{r7, lr}
   1f0a2:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   1f0a4:	4b02      	ldr	r3, [pc, #8]	; (1f0b0 <vApplicationMallocFailedHook+0x10>)
   1f0a6:	0018      	movs	r0, r3
   1f0a8:	4b02      	ldr	r3, [pc, #8]	; (1f0b4 <vApplicationMallocFailedHook+0x14>)
   1f0aa:	4798      	blx	r3
    while (1);
   1f0ac:	e7fe      	b.n	1f0ac <vApplicationMallocFailedHook+0xc>
   1f0ae:	46c0      	nop			; (mov r8, r8)
   1f0b0:	000270fc 	.word	0x000270fc
   1f0b4:	0000a289 	.word	0x0000a289

0001f0b8 <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook(void) {
   1f0b8:	b580      	push	{r7, lr}
   1f0ba:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   1f0bc:	4b02      	ldr	r3, [pc, #8]	; (1f0c8 <vApplicationStackOverflowHook+0x10>)
   1f0be:	0018      	movs	r0, r3
   1f0c0:	4b02      	ldr	r3, [pc, #8]	; (1f0cc <vApplicationStackOverflowHook+0x14>)
   1f0c2:	4798      	blx	r3
    while (1);
   1f0c4:	e7fe      	b.n	1f0c4 <vApplicationStackOverflowHook+0xc>
   1f0c6:	46c0      	nop			; (mov r8, r8)
   1f0c8:	00027128 	.word	0x00027128
   1f0cc:	0000a289 	.word	0x0000a289

0001f0d0 <__udivsi3>:
   1f0d0:	2200      	movs	r2, #0
   1f0d2:	0843      	lsrs	r3, r0, #1
   1f0d4:	428b      	cmp	r3, r1
   1f0d6:	d374      	bcc.n	1f1c2 <__udivsi3+0xf2>
   1f0d8:	0903      	lsrs	r3, r0, #4
   1f0da:	428b      	cmp	r3, r1
   1f0dc:	d35f      	bcc.n	1f19e <__udivsi3+0xce>
   1f0de:	0a03      	lsrs	r3, r0, #8
   1f0e0:	428b      	cmp	r3, r1
   1f0e2:	d344      	bcc.n	1f16e <__udivsi3+0x9e>
   1f0e4:	0b03      	lsrs	r3, r0, #12
   1f0e6:	428b      	cmp	r3, r1
   1f0e8:	d328      	bcc.n	1f13c <__udivsi3+0x6c>
   1f0ea:	0c03      	lsrs	r3, r0, #16
   1f0ec:	428b      	cmp	r3, r1
   1f0ee:	d30d      	bcc.n	1f10c <__udivsi3+0x3c>
   1f0f0:	22ff      	movs	r2, #255	; 0xff
   1f0f2:	0209      	lsls	r1, r1, #8
   1f0f4:	ba12      	rev	r2, r2
   1f0f6:	0c03      	lsrs	r3, r0, #16
   1f0f8:	428b      	cmp	r3, r1
   1f0fa:	d302      	bcc.n	1f102 <__udivsi3+0x32>
   1f0fc:	1212      	asrs	r2, r2, #8
   1f0fe:	0209      	lsls	r1, r1, #8
   1f100:	d065      	beq.n	1f1ce <__udivsi3+0xfe>
   1f102:	0b03      	lsrs	r3, r0, #12
   1f104:	428b      	cmp	r3, r1
   1f106:	d319      	bcc.n	1f13c <__udivsi3+0x6c>
   1f108:	e000      	b.n	1f10c <__udivsi3+0x3c>
   1f10a:	0a09      	lsrs	r1, r1, #8
   1f10c:	0bc3      	lsrs	r3, r0, #15
   1f10e:	428b      	cmp	r3, r1
   1f110:	d301      	bcc.n	1f116 <__udivsi3+0x46>
   1f112:	03cb      	lsls	r3, r1, #15
   1f114:	1ac0      	subs	r0, r0, r3
   1f116:	4152      	adcs	r2, r2
   1f118:	0b83      	lsrs	r3, r0, #14
   1f11a:	428b      	cmp	r3, r1
   1f11c:	d301      	bcc.n	1f122 <__udivsi3+0x52>
   1f11e:	038b      	lsls	r3, r1, #14
   1f120:	1ac0      	subs	r0, r0, r3
   1f122:	4152      	adcs	r2, r2
   1f124:	0b43      	lsrs	r3, r0, #13
   1f126:	428b      	cmp	r3, r1
   1f128:	d301      	bcc.n	1f12e <__udivsi3+0x5e>
   1f12a:	034b      	lsls	r3, r1, #13
   1f12c:	1ac0      	subs	r0, r0, r3
   1f12e:	4152      	adcs	r2, r2
   1f130:	0b03      	lsrs	r3, r0, #12
   1f132:	428b      	cmp	r3, r1
   1f134:	d301      	bcc.n	1f13a <__udivsi3+0x6a>
   1f136:	030b      	lsls	r3, r1, #12
   1f138:	1ac0      	subs	r0, r0, r3
   1f13a:	4152      	adcs	r2, r2
   1f13c:	0ac3      	lsrs	r3, r0, #11
   1f13e:	428b      	cmp	r3, r1
   1f140:	d301      	bcc.n	1f146 <__udivsi3+0x76>
   1f142:	02cb      	lsls	r3, r1, #11
   1f144:	1ac0      	subs	r0, r0, r3
   1f146:	4152      	adcs	r2, r2
   1f148:	0a83      	lsrs	r3, r0, #10
   1f14a:	428b      	cmp	r3, r1
   1f14c:	d301      	bcc.n	1f152 <__udivsi3+0x82>
   1f14e:	028b      	lsls	r3, r1, #10
   1f150:	1ac0      	subs	r0, r0, r3
   1f152:	4152      	adcs	r2, r2
   1f154:	0a43      	lsrs	r3, r0, #9
   1f156:	428b      	cmp	r3, r1
   1f158:	d301      	bcc.n	1f15e <__udivsi3+0x8e>
   1f15a:	024b      	lsls	r3, r1, #9
   1f15c:	1ac0      	subs	r0, r0, r3
   1f15e:	4152      	adcs	r2, r2
   1f160:	0a03      	lsrs	r3, r0, #8
   1f162:	428b      	cmp	r3, r1
   1f164:	d301      	bcc.n	1f16a <__udivsi3+0x9a>
   1f166:	020b      	lsls	r3, r1, #8
   1f168:	1ac0      	subs	r0, r0, r3
   1f16a:	4152      	adcs	r2, r2
   1f16c:	d2cd      	bcs.n	1f10a <__udivsi3+0x3a>
   1f16e:	09c3      	lsrs	r3, r0, #7
   1f170:	428b      	cmp	r3, r1
   1f172:	d301      	bcc.n	1f178 <__udivsi3+0xa8>
   1f174:	01cb      	lsls	r3, r1, #7
   1f176:	1ac0      	subs	r0, r0, r3
   1f178:	4152      	adcs	r2, r2
   1f17a:	0983      	lsrs	r3, r0, #6
   1f17c:	428b      	cmp	r3, r1
   1f17e:	d301      	bcc.n	1f184 <__udivsi3+0xb4>
   1f180:	018b      	lsls	r3, r1, #6
   1f182:	1ac0      	subs	r0, r0, r3
   1f184:	4152      	adcs	r2, r2
   1f186:	0943      	lsrs	r3, r0, #5
   1f188:	428b      	cmp	r3, r1
   1f18a:	d301      	bcc.n	1f190 <__udivsi3+0xc0>
   1f18c:	014b      	lsls	r3, r1, #5
   1f18e:	1ac0      	subs	r0, r0, r3
   1f190:	4152      	adcs	r2, r2
   1f192:	0903      	lsrs	r3, r0, #4
   1f194:	428b      	cmp	r3, r1
   1f196:	d301      	bcc.n	1f19c <__udivsi3+0xcc>
   1f198:	010b      	lsls	r3, r1, #4
   1f19a:	1ac0      	subs	r0, r0, r3
   1f19c:	4152      	adcs	r2, r2
   1f19e:	08c3      	lsrs	r3, r0, #3
   1f1a0:	428b      	cmp	r3, r1
   1f1a2:	d301      	bcc.n	1f1a8 <__udivsi3+0xd8>
   1f1a4:	00cb      	lsls	r3, r1, #3
   1f1a6:	1ac0      	subs	r0, r0, r3
   1f1a8:	4152      	adcs	r2, r2
   1f1aa:	0883      	lsrs	r3, r0, #2
   1f1ac:	428b      	cmp	r3, r1
   1f1ae:	d301      	bcc.n	1f1b4 <__udivsi3+0xe4>
   1f1b0:	008b      	lsls	r3, r1, #2
   1f1b2:	1ac0      	subs	r0, r0, r3
   1f1b4:	4152      	adcs	r2, r2
   1f1b6:	0843      	lsrs	r3, r0, #1
   1f1b8:	428b      	cmp	r3, r1
   1f1ba:	d301      	bcc.n	1f1c0 <__udivsi3+0xf0>
   1f1bc:	004b      	lsls	r3, r1, #1
   1f1be:	1ac0      	subs	r0, r0, r3
   1f1c0:	4152      	adcs	r2, r2
   1f1c2:	1a41      	subs	r1, r0, r1
   1f1c4:	d200      	bcs.n	1f1c8 <__udivsi3+0xf8>
   1f1c6:	4601      	mov	r1, r0
   1f1c8:	4152      	adcs	r2, r2
   1f1ca:	4610      	mov	r0, r2
   1f1cc:	4770      	bx	lr
   1f1ce:	e7ff      	b.n	1f1d0 <__udivsi3+0x100>
   1f1d0:	b501      	push	{r0, lr}
   1f1d2:	2000      	movs	r0, #0
   1f1d4:	f000 f8f0 	bl	1f3b8 <__aeabi_idiv0>
   1f1d8:	bd02      	pop	{r1, pc}
   1f1da:	46c0      	nop			; (mov r8, r8)

0001f1dc <__aeabi_uidivmod>:
   1f1dc:	2900      	cmp	r1, #0
   1f1de:	d0f7      	beq.n	1f1d0 <__udivsi3+0x100>
   1f1e0:	e776      	b.n	1f0d0 <__udivsi3>
   1f1e2:	4770      	bx	lr

0001f1e4 <__divsi3>:
   1f1e4:	4603      	mov	r3, r0
   1f1e6:	430b      	orrs	r3, r1
   1f1e8:	d47f      	bmi.n	1f2ea <__divsi3+0x106>
   1f1ea:	2200      	movs	r2, #0
   1f1ec:	0843      	lsrs	r3, r0, #1
   1f1ee:	428b      	cmp	r3, r1
   1f1f0:	d374      	bcc.n	1f2dc <__divsi3+0xf8>
   1f1f2:	0903      	lsrs	r3, r0, #4
   1f1f4:	428b      	cmp	r3, r1
   1f1f6:	d35f      	bcc.n	1f2b8 <__divsi3+0xd4>
   1f1f8:	0a03      	lsrs	r3, r0, #8
   1f1fa:	428b      	cmp	r3, r1
   1f1fc:	d344      	bcc.n	1f288 <__divsi3+0xa4>
   1f1fe:	0b03      	lsrs	r3, r0, #12
   1f200:	428b      	cmp	r3, r1
   1f202:	d328      	bcc.n	1f256 <__divsi3+0x72>
   1f204:	0c03      	lsrs	r3, r0, #16
   1f206:	428b      	cmp	r3, r1
   1f208:	d30d      	bcc.n	1f226 <__divsi3+0x42>
   1f20a:	22ff      	movs	r2, #255	; 0xff
   1f20c:	0209      	lsls	r1, r1, #8
   1f20e:	ba12      	rev	r2, r2
   1f210:	0c03      	lsrs	r3, r0, #16
   1f212:	428b      	cmp	r3, r1
   1f214:	d302      	bcc.n	1f21c <__divsi3+0x38>
   1f216:	1212      	asrs	r2, r2, #8
   1f218:	0209      	lsls	r1, r1, #8
   1f21a:	d065      	beq.n	1f2e8 <__divsi3+0x104>
   1f21c:	0b03      	lsrs	r3, r0, #12
   1f21e:	428b      	cmp	r3, r1
   1f220:	d319      	bcc.n	1f256 <__divsi3+0x72>
   1f222:	e000      	b.n	1f226 <__divsi3+0x42>
   1f224:	0a09      	lsrs	r1, r1, #8
   1f226:	0bc3      	lsrs	r3, r0, #15
   1f228:	428b      	cmp	r3, r1
   1f22a:	d301      	bcc.n	1f230 <__divsi3+0x4c>
   1f22c:	03cb      	lsls	r3, r1, #15
   1f22e:	1ac0      	subs	r0, r0, r3
   1f230:	4152      	adcs	r2, r2
   1f232:	0b83      	lsrs	r3, r0, #14
   1f234:	428b      	cmp	r3, r1
   1f236:	d301      	bcc.n	1f23c <__divsi3+0x58>
   1f238:	038b      	lsls	r3, r1, #14
   1f23a:	1ac0      	subs	r0, r0, r3
   1f23c:	4152      	adcs	r2, r2
   1f23e:	0b43      	lsrs	r3, r0, #13
   1f240:	428b      	cmp	r3, r1
   1f242:	d301      	bcc.n	1f248 <__divsi3+0x64>
   1f244:	034b      	lsls	r3, r1, #13
   1f246:	1ac0      	subs	r0, r0, r3
   1f248:	4152      	adcs	r2, r2
   1f24a:	0b03      	lsrs	r3, r0, #12
   1f24c:	428b      	cmp	r3, r1
   1f24e:	d301      	bcc.n	1f254 <__divsi3+0x70>
   1f250:	030b      	lsls	r3, r1, #12
   1f252:	1ac0      	subs	r0, r0, r3
   1f254:	4152      	adcs	r2, r2
   1f256:	0ac3      	lsrs	r3, r0, #11
   1f258:	428b      	cmp	r3, r1
   1f25a:	d301      	bcc.n	1f260 <__divsi3+0x7c>
   1f25c:	02cb      	lsls	r3, r1, #11
   1f25e:	1ac0      	subs	r0, r0, r3
   1f260:	4152      	adcs	r2, r2
   1f262:	0a83      	lsrs	r3, r0, #10
   1f264:	428b      	cmp	r3, r1
   1f266:	d301      	bcc.n	1f26c <__divsi3+0x88>
   1f268:	028b      	lsls	r3, r1, #10
   1f26a:	1ac0      	subs	r0, r0, r3
   1f26c:	4152      	adcs	r2, r2
   1f26e:	0a43      	lsrs	r3, r0, #9
   1f270:	428b      	cmp	r3, r1
   1f272:	d301      	bcc.n	1f278 <__divsi3+0x94>
   1f274:	024b      	lsls	r3, r1, #9
   1f276:	1ac0      	subs	r0, r0, r3
   1f278:	4152      	adcs	r2, r2
   1f27a:	0a03      	lsrs	r3, r0, #8
   1f27c:	428b      	cmp	r3, r1
   1f27e:	d301      	bcc.n	1f284 <__divsi3+0xa0>
   1f280:	020b      	lsls	r3, r1, #8
   1f282:	1ac0      	subs	r0, r0, r3
   1f284:	4152      	adcs	r2, r2
   1f286:	d2cd      	bcs.n	1f224 <__divsi3+0x40>
   1f288:	09c3      	lsrs	r3, r0, #7
   1f28a:	428b      	cmp	r3, r1
   1f28c:	d301      	bcc.n	1f292 <__divsi3+0xae>
   1f28e:	01cb      	lsls	r3, r1, #7
   1f290:	1ac0      	subs	r0, r0, r3
   1f292:	4152      	adcs	r2, r2
   1f294:	0983      	lsrs	r3, r0, #6
   1f296:	428b      	cmp	r3, r1
   1f298:	d301      	bcc.n	1f29e <__divsi3+0xba>
   1f29a:	018b      	lsls	r3, r1, #6
   1f29c:	1ac0      	subs	r0, r0, r3
   1f29e:	4152      	adcs	r2, r2
   1f2a0:	0943      	lsrs	r3, r0, #5
   1f2a2:	428b      	cmp	r3, r1
   1f2a4:	d301      	bcc.n	1f2aa <__divsi3+0xc6>
   1f2a6:	014b      	lsls	r3, r1, #5
   1f2a8:	1ac0      	subs	r0, r0, r3
   1f2aa:	4152      	adcs	r2, r2
   1f2ac:	0903      	lsrs	r3, r0, #4
   1f2ae:	428b      	cmp	r3, r1
   1f2b0:	d301      	bcc.n	1f2b6 <__divsi3+0xd2>
   1f2b2:	010b      	lsls	r3, r1, #4
   1f2b4:	1ac0      	subs	r0, r0, r3
   1f2b6:	4152      	adcs	r2, r2
   1f2b8:	08c3      	lsrs	r3, r0, #3
   1f2ba:	428b      	cmp	r3, r1
   1f2bc:	d301      	bcc.n	1f2c2 <__divsi3+0xde>
   1f2be:	00cb      	lsls	r3, r1, #3
   1f2c0:	1ac0      	subs	r0, r0, r3
   1f2c2:	4152      	adcs	r2, r2
   1f2c4:	0883      	lsrs	r3, r0, #2
   1f2c6:	428b      	cmp	r3, r1
   1f2c8:	d301      	bcc.n	1f2ce <__divsi3+0xea>
   1f2ca:	008b      	lsls	r3, r1, #2
   1f2cc:	1ac0      	subs	r0, r0, r3
   1f2ce:	4152      	adcs	r2, r2
   1f2d0:	0843      	lsrs	r3, r0, #1
   1f2d2:	428b      	cmp	r3, r1
   1f2d4:	d301      	bcc.n	1f2da <__divsi3+0xf6>
   1f2d6:	004b      	lsls	r3, r1, #1
   1f2d8:	1ac0      	subs	r0, r0, r3
   1f2da:	4152      	adcs	r2, r2
   1f2dc:	1a41      	subs	r1, r0, r1
   1f2de:	d200      	bcs.n	1f2e2 <__divsi3+0xfe>
   1f2e0:	4601      	mov	r1, r0
   1f2e2:	4152      	adcs	r2, r2
   1f2e4:	4610      	mov	r0, r2
   1f2e6:	4770      	bx	lr
   1f2e8:	e05d      	b.n	1f3a6 <__divsi3+0x1c2>
   1f2ea:	0fca      	lsrs	r2, r1, #31
   1f2ec:	d000      	beq.n	1f2f0 <__divsi3+0x10c>
   1f2ee:	4249      	negs	r1, r1
   1f2f0:	1003      	asrs	r3, r0, #32
   1f2f2:	d300      	bcc.n	1f2f6 <__divsi3+0x112>
   1f2f4:	4240      	negs	r0, r0
   1f2f6:	4053      	eors	r3, r2
   1f2f8:	2200      	movs	r2, #0
   1f2fa:	469c      	mov	ip, r3
   1f2fc:	0903      	lsrs	r3, r0, #4
   1f2fe:	428b      	cmp	r3, r1
   1f300:	d32d      	bcc.n	1f35e <__divsi3+0x17a>
   1f302:	0a03      	lsrs	r3, r0, #8
   1f304:	428b      	cmp	r3, r1
   1f306:	d312      	bcc.n	1f32e <__divsi3+0x14a>
   1f308:	22fc      	movs	r2, #252	; 0xfc
   1f30a:	0189      	lsls	r1, r1, #6
   1f30c:	ba12      	rev	r2, r2
   1f30e:	0a03      	lsrs	r3, r0, #8
   1f310:	428b      	cmp	r3, r1
   1f312:	d30c      	bcc.n	1f32e <__divsi3+0x14a>
   1f314:	0189      	lsls	r1, r1, #6
   1f316:	1192      	asrs	r2, r2, #6
   1f318:	428b      	cmp	r3, r1
   1f31a:	d308      	bcc.n	1f32e <__divsi3+0x14a>
   1f31c:	0189      	lsls	r1, r1, #6
   1f31e:	1192      	asrs	r2, r2, #6
   1f320:	428b      	cmp	r3, r1
   1f322:	d304      	bcc.n	1f32e <__divsi3+0x14a>
   1f324:	0189      	lsls	r1, r1, #6
   1f326:	d03a      	beq.n	1f39e <__divsi3+0x1ba>
   1f328:	1192      	asrs	r2, r2, #6
   1f32a:	e000      	b.n	1f32e <__divsi3+0x14a>
   1f32c:	0989      	lsrs	r1, r1, #6
   1f32e:	09c3      	lsrs	r3, r0, #7
   1f330:	428b      	cmp	r3, r1
   1f332:	d301      	bcc.n	1f338 <__divsi3+0x154>
   1f334:	01cb      	lsls	r3, r1, #7
   1f336:	1ac0      	subs	r0, r0, r3
   1f338:	4152      	adcs	r2, r2
   1f33a:	0983      	lsrs	r3, r0, #6
   1f33c:	428b      	cmp	r3, r1
   1f33e:	d301      	bcc.n	1f344 <__divsi3+0x160>
   1f340:	018b      	lsls	r3, r1, #6
   1f342:	1ac0      	subs	r0, r0, r3
   1f344:	4152      	adcs	r2, r2
   1f346:	0943      	lsrs	r3, r0, #5
   1f348:	428b      	cmp	r3, r1
   1f34a:	d301      	bcc.n	1f350 <__divsi3+0x16c>
   1f34c:	014b      	lsls	r3, r1, #5
   1f34e:	1ac0      	subs	r0, r0, r3
   1f350:	4152      	adcs	r2, r2
   1f352:	0903      	lsrs	r3, r0, #4
   1f354:	428b      	cmp	r3, r1
   1f356:	d301      	bcc.n	1f35c <__divsi3+0x178>
   1f358:	010b      	lsls	r3, r1, #4
   1f35a:	1ac0      	subs	r0, r0, r3
   1f35c:	4152      	adcs	r2, r2
   1f35e:	08c3      	lsrs	r3, r0, #3
   1f360:	428b      	cmp	r3, r1
   1f362:	d301      	bcc.n	1f368 <__divsi3+0x184>
   1f364:	00cb      	lsls	r3, r1, #3
   1f366:	1ac0      	subs	r0, r0, r3
   1f368:	4152      	adcs	r2, r2
   1f36a:	0883      	lsrs	r3, r0, #2
   1f36c:	428b      	cmp	r3, r1
   1f36e:	d301      	bcc.n	1f374 <__divsi3+0x190>
   1f370:	008b      	lsls	r3, r1, #2
   1f372:	1ac0      	subs	r0, r0, r3
   1f374:	4152      	adcs	r2, r2
   1f376:	d2d9      	bcs.n	1f32c <__divsi3+0x148>
   1f378:	0843      	lsrs	r3, r0, #1
   1f37a:	428b      	cmp	r3, r1
   1f37c:	d301      	bcc.n	1f382 <__divsi3+0x19e>
   1f37e:	004b      	lsls	r3, r1, #1
   1f380:	1ac0      	subs	r0, r0, r3
   1f382:	4152      	adcs	r2, r2
   1f384:	1a41      	subs	r1, r0, r1
   1f386:	d200      	bcs.n	1f38a <__divsi3+0x1a6>
   1f388:	4601      	mov	r1, r0
   1f38a:	4663      	mov	r3, ip
   1f38c:	4152      	adcs	r2, r2
   1f38e:	105b      	asrs	r3, r3, #1
   1f390:	4610      	mov	r0, r2
   1f392:	d301      	bcc.n	1f398 <__divsi3+0x1b4>
   1f394:	4240      	negs	r0, r0
   1f396:	2b00      	cmp	r3, #0
   1f398:	d500      	bpl.n	1f39c <__divsi3+0x1b8>
   1f39a:	4249      	negs	r1, r1
   1f39c:	4770      	bx	lr
   1f39e:	4663      	mov	r3, ip
   1f3a0:	105b      	asrs	r3, r3, #1
   1f3a2:	d300      	bcc.n	1f3a6 <__divsi3+0x1c2>
   1f3a4:	4240      	negs	r0, r0
   1f3a6:	b501      	push	{r0, lr}
   1f3a8:	2000      	movs	r0, #0
   1f3aa:	f000 f805 	bl	1f3b8 <__aeabi_idiv0>
   1f3ae:	bd02      	pop	{r1, pc}

0001f3b0 <__aeabi_idivmod>:
   1f3b0:	2900      	cmp	r1, #0
   1f3b2:	d0f8      	beq.n	1f3a6 <__divsi3+0x1c2>
   1f3b4:	e716      	b.n	1f1e4 <__divsi3>
   1f3b6:	4770      	bx	lr

0001f3b8 <__aeabi_idiv0>:
   1f3b8:	4770      	bx	lr
   1f3ba:	46c0      	nop			; (mov r8, r8)

0001f3bc <__aeabi_lmul>:
   1f3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3be:	46ce      	mov	lr, r9
   1f3c0:	4647      	mov	r7, r8
   1f3c2:	0415      	lsls	r5, r2, #16
   1f3c4:	0c2d      	lsrs	r5, r5, #16
   1f3c6:	002e      	movs	r6, r5
   1f3c8:	b580      	push	{r7, lr}
   1f3ca:	0407      	lsls	r7, r0, #16
   1f3cc:	0c14      	lsrs	r4, r2, #16
   1f3ce:	0c3f      	lsrs	r7, r7, #16
   1f3d0:	4699      	mov	r9, r3
   1f3d2:	0c03      	lsrs	r3, r0, #16
   1f3d4:	437e      	muls	r6, r7
   1f3d6:	435d      	muls	r5, r3
   1f3d8:	4367      	muls	r7, r4
   1f3da:	4363      	muls	r3, r4
   1f3dc:	197f      	adds	r7, r7, r5
   1f3de:	0c34      	lsrs	r4, r6, #16
   1f3e0:	19e4      	adds	r4, r4, r7
   1f3e2:	469c      	mov	ip, r3
   1f3e4:	42a5      	cmp	r5, r4
   1f3e6:	d903      	bls.n	1f3f0 <__aeabi_lmul+0x34>
   1f3e8:	2380      	movs	r3, #128	; 0x80
   1f3ea:	025b      	lsls	r3, r3, #9
   1f3ec:	4698      	mov	r8, r3
   1f3ee:	44c4      	add	ip, r8
   1f3f0:	464b      	mov	r3, r9
   1f3f2:	4351      	muls	r1, r2
   1f3f4:	4343      	muls	r3, r0
   1f3f6:	0436      	lsls	r6, r6, #16
   1f3f8:	0c36      	lsrs	r6, r6, #16
   1f3fa:	0c25      	lsrs	r5, r4, #16
   1f3fc:	0424      	lsls	r4, r4, #16
   1f3fe:	4465      	add	r5, ip
   1f400:	19a4      	adds	r4, r4, r6
   1f402:	1859      	adds	r1, r3, r1
   1f404:	1949      	adds	r1, r1, r5
   1f406:	0020      	movs	r0, r4
   1f408:	bc0c      	pop	{r2, r3}
   1f40a:	4690      	mov	r8, r2
   1f40c:	4699      	mov	r9, r3
   1f40e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f410 <__aeabi_dadd>:
   1f410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f412:	4645      	mov	r5, r8
   1f414:	46de      	mov	lr, fp
   1f416:	4657      	mov	r7, sl
   1f418:	464e      	mov	r6, r9
   1f41a:	030c      	lsls	r4, r1, #12
   1f41c:	b5e0      	push	{r5, r6, r7, lr}
   1f41e:	004e      	lsls	r6, r1, #1
   1f420:	0fc9      	lsrs	r1, r1, #31
   1f422:	4688      	mov	r8, r1
   1f424:	000d      	movs	r5, r1
   1f426:	0a61      	lsrs	r1, r4, #9
   1f428:	0f44      	lsrs	r4, r0, #29
   1f42a:	430c      	orrs	r4, r1
   1f42c:	00c7      	lsls	r7, r0, #3
   1f42e:	0319      	lsls	r1, r3, #12
   1f430:	0058      	lsls	r0, r3, #1
   1f432:	0fdb      	lsrs	r3, r3, #31
   1f434:	469b      	mov	fp, r3
   1f436:	0a4b      	lsrs	r3, r1, #9
   1f438:	0f51      	lsrs	r1, r2, #29
   1f43a:	430b      	orrs	r3, r1
   1f43c:	0d76      	lsrs	r6, r6, #21
   1f43e:	0d40      	lsrs	r0, r0, #21
   1f440:	0019      	movs	r1, r3
   1f442:	00d2      	lsls	r2, r2, #3
   1f444:	45d8      	cmp	r8, fp
   1f446:	d100      	bne.n	1f44a <__aeabi_dadd+0x3a>
   1f448:	e0ae      	b.n	1f5a8 <__aeabi_dadd+0x198>
   1f44a:	1a35      	subs	r5, r6, r0
   1f44c:	2d00      	cmp	r5, #0
   1f44e:	dc00      	bgt.n	1f452 <__aeabi_dadd+0x42>
   1f450:	e0f6      	b.n	1f640 <__aeabi_dadd+0x230>
   1f452:	2800      	cmp	r0, #0
   1f454:	d10f      	bne.n	1f476 <__aeabi_dadd+0x66>
   1f456:	4313      	orrs	r3, r2
   1f458:	d100      	bne.n	1f45c <__aeabi_dadd+0x4c>
   1f45a:	e0db      	b.n	1f614 <__aeabi_dadd+0x204>
   1f45c:	1e6b      	subs	r3, r5, #1
   1f45e:	2b00      	cmp	r3, #0
   1f460:	d000      	beq.n	1f464 <__aeabi_dadd+0x54>
   1f462:	e137      	b.n	1f6d4 <__aeabi_dadd+0x2c4>
   1f464:	1aba      	subs	r2, r7, r2
   1f466:	4297      	cmp	r7, r2
   1f468:	41bf      	sbcs	r7, r7
   1f46a:	1a64      	subs	r4, r4, r1
   1f46c:	427f      	negs	r7, r7
   1f46e:	1be4      	subs	r4, r4, r7
   1f470:	2601      	movs	r6, #1
   1f472:	0017      	movs	r7, r2
   1f474:	e024      	b.n	1f4c0 <__aeabi_dadd+0xb0>
   1f476:	4bc6      	ldr	r3, [pc, #792]	; (1f790 <__aeabi_dadd+0x380>)
   1f478:	429e      	cmp	r6, r3
   1f47a:	d04d      	beq.n	1f518 <__aeabi_dadd+0x108>
   1f47c:	2380      	movs	r3, #128	; 0x80
   1f47e:	041b      	lsls	r3, r3, #16
   1f480:	4319      	orrs	r1, r3
   1f482:	2d38      	cmp	r5, #56	; 0x38
   1f484:	dd00      	ble.n	1f488 <__aeabi_dadd+0x78>
   1f486:	e107      	b.n	1f698 <__aeabi_dadd+0x288>
   1f488:	2d1f      	cmp	r5, #31
   1f48a:	dd00      	ble.n	1f48e <__aeabi_dadd+0x7e>
   1f48c:	e138      	b.n	1f700 <__aeabi_dadd+0x2f0>
   1f48e:	2020      	movs	r0, #32
   1f490:	1b43      	subs	r3, r0, r5
   1f492:	469a      	mov	sl, r3
   1f494:	000b      	movs	r3, r1
   1f496:	4650      	mov	r0, sl
   1f498:	4083      	lsls	r3, r0
   1f49a:	4699      	mov	r9, r3
   1f49c:	0013      	movs	r3, r2
   1f49e:	4648      	mov	r0, r9
   1f4a0:	40eb      	lsrs	r3, r5
   1f4a2:	4318      	orrs	r0, r3
   1f4a4:	0003      	movs	r3, r0
   1f4a6:	4650      	mov	r0, sl
   1f4a8:	4082      	lsls	r2, r0
   1f4aa:	1e50      	subs	r0, r2, #1
   1f4ac:	4182      	sbcs	r2, r0
   1f4ae:	40e9      	lsrs	r1, r5
   1f4b0:	431a      	orrs	r2, r3
   1f4b2:	1aba      	subs	r2, r7, r2
   1f4b4:	1a61      	subs	r1, r4, r1
   1f4b6:	4297      	cmp	r7, r2
   1f4b8:	41a4      	sbcs	r4, r4
   1f4ba:	0017      	movs	r7, r2
   1f4bc:	4264      	negs	r4, r4
   1f4be:	1b0c      	subs	r4, r1, r4
   1f4c0:	0223      	lsls	r3, r4, #8
   1f4c2:	d562      	bpl.n	1f58a <__aeabi_dadd+0x17a>
   1f4c4:	0264      	lsls	r4, r4, #9
   1f4c6:	0a65      	lsrs	r5, r4, #9
   1f4c8:	2d00      	cmp	r5, #0
   1f4ca:	d100      	bne.n	1f4ce <__aeabi_dadd+0xbe>
   1f4cc:	e0df      	b.n	1f68e <__aeabi_dadd+0x27e>
   1f4ce:	0028      	movs	r0, r5
   1f4d0:	f001 fbe4 	bl	20c9c <__clzsi2>
   1f4d4:	0003      	movs	r3, r0
   1f4d6:	3b08      	subs	r3, #8
   1f4d8:	2b1f      	cmp	r3, #31
   1f4da:	dd00      	ble.n	1f4de <__aeabi_dadd+0xce>
   1f4dc:	e0d2      	b.n	1f684 <__aeabi_dadd+0x274>
   1f4de:	2220      	movs	r2, #32
   1f4e0:	003c      	movs	r4, r7
   1f4e2:	1ad2      	subs	r2, r2, r3
   1f4e4:	409d      	lsls	r5, r3
   1f4e6:	40d4      	lsrs	r4, r2
   1f4e8:	409f      	lsls	r7, r3
   1f4ea:	4325      	orrs	r5, r4
   1f4ec:	429e      	cmp	r6, r3
   1f4ee:	dd00      	ble.n	1f4f2 <__aeabi_dadd+0xe2>
   1f4f0:	e0c4      	b.n	1f67c <__aeabi_dadd+0x26c>
   1f4f2:	1b9e      	subs	r6, r3, r6
   1f4f4:	1c73      	adds	r3, r6, #1
   1f4f6:	2b1f      	cmp	r3, #31
   1f4f8:	dd00      	ble.n	1f4fc <__aeabi_dadd+0xec>
   1f4fa:	e0f1      	b.n	1f6e0 <__aeabi_dadd+0x2d0>
   1f4fc:	2220      	movs	r2, #32
   1f4fe:	0038      	movs	r0, r7
   1f500:	0029      	movs	r1, r5
   1f502:	1ad2      	subs	r2, r2, r3
   1f504:	40d8      	lsrs	r0, r3
   1f506:	4091      	lsls	r1, r2
   1f508:	4097      	lsls	r7, r2
   1f50a:	002c      	movs	r4, r5
   1f50c:	4301      	orrs	r1, r0
   1f50e:	1e78      	subs	r0, r7, #1
   1f510:	4187      	sbcs	r7, r0
   1f512:	40dc      	lsrs	r4, r3
   1f514:	2600      	movs	r6, #0
   1f516:	430f      	orrs	r7, r1
   1f518:	077b      	lsls	r3, r7, #29
   1f51a:	d009      	beq.n	1f530 <__aeabi_dadd+0x120>
   1f51c:	230f      	movs	r3, #15
   1f51e:	403b      	ands	r3, r7
   1f520:	2b04      	cmp	r3, #4
   1f522:	d005      	beq.n	1f530 <__aeabi_dadd+0x120>
   1f524:	1d3b      	adds	r3, r7, #4
   1f526:	42bb      	cmp	r3, r7
   1f528:	41bf      	sbcs	r7, r7
   1f52a:	427f      	negs	r7, r7
   1f52c:	19e4      	adds	r4, r4, r7
   1f52e:	001f      	movs	r7, r3
   1f530:	0223      	lsls	r3, r4, #8
   1f532:	d52c      	bpl.n	1f58e <__aeabi_dadd+0x17e>
   1f534:	4b96      	ldr	r3, [pc, #600]	; (1f790 <__aeabi_dadd+0x380>)
   1f536:	3601      	adds	r6, #1
   1f538:	429e      	cmp	r6, r3
   1f53a:	d100      	bne.n	1f53e <__aeabi_dadd+0x12e>
   1f53c:	e09a      	b.n	1f674 <__aeabi_dadd+0x264>
   1f53e:	4645      	mov	r5, r8
   1f540:	4b94      	ldr	r3, [pc, #592]	; (1f794 <__aeabi_dadd+0x384>)
   1f542:	08ff      	lsrs	r7, r7, #3
   1f544:	401c      	ands	r4, r3
   1f546:	0760      	lsls	r0, r4, #29
   1f548:	0576      	lsls	r6, r6, #21
   1f54a:	0264      	lsls	r4, r4, #9
   1f54c:	4307      	orrs	r7, r0
   1f54e:	0b24      	lsrs	r4, r4, #12
   1f550:	0d76      	lsrs	r6, r6, #21
   1f552:	2100      	movs	r1, #0
   1f554:	0324      	lsls	r4, r4, #12
   1f556:	0b23      	lsrs	r3, r4, #12
   1f558:	0d0c      	lsrs	r4, r1, #20
   1f55a:	4a8f      	ldr	r2, [pc, #572]	; (1f798 <__aeabi_dadd+0x388>)
   1f55c:	0524      	lsls	r4, r4, #20
   1f55e:	431c      	orrs	r4, r3
   1f560:	4014      	ands	r4, r2
   1f562:	0533      	lsls	r3, r6, #20
   1f564:	4323      	orrs	r3, r4
   1f566:	005b      	lsls	r3, r3, #1
   1f568:	07ed      	lsls	r5, r5, #31
   1f56a:	085b      	lsrs	r3, r3, #1
   1f56c:	432b      	orrs	r3, r5
   1f56e:	0038      	movs	r0, r7
   1f570:	0019      	movs	r1, r3
   1f572:	bc3c      	pop	{r2, r3, r4, r5}
   1f574:	4690      	mov	r8, r2
   1f576:	4699      	mov	r9, r3
   1f578:	46a2      	mov	sl, r4
   1f57a:	46ab      	mov	fp, r5
   1f57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f57e:	4664      	mov	r4, ip
   1f580:	4304      	orrs	r4, r0
   1f582:	d100      	bne.n	1f586 <__aeabi_dadd+0x176>
   1f584:	e211      	b.n	1f9aa <__aeabi_dadd+0x59a>
   1f586:	0004      	movs	r4, r0
   1f588:	4667      	mov	r7, ip
   1f58a:	077b      	lsls	r3, r7, #29
   1f58c:	d1c6      	bne.n	1f51c <__aeabi_dadd+0x10c>
   1f58e:	4645      	mov	r5, r8
   1f590:	0760      	lsls	r0, r4, #29
   1f592:	08ff      	lsrs	r7, r7, #3
   1f594:	4307      	orrs	r7, r0
   1f596:	08e4      	lsrs	r4, r4, #3
   1f598:	4b7d      	ldr	r3, [pc, #500]	; (1f790 <__aeabi_dadd+0x380>)
   1f59a:	429e      	cmp	r6, r3
   1f59c:	d030      	beq.n	1f600 <__aeabi_dadd+0x1f0>
   1f59e:	0324      	lsls	r4, r4, #12
   1f5a0:	0576      	lsls	r6, r6, #21
   1f5a2:	0b24      	lsrs	r4, r4, #12
   1f5a4:	0d76      	lsrs	r6, r6, #21
   1f5a6:	e7d4      	b.n	1f552 <__aeabi_dadd+0x142>
   1f5a8:	1a33      	subs	r3, r6, r0
   1f5aa:	469a      	mov	sl, r3
   1f5ac:	2b00      	cmp	r3, #0
   1f5ae:	dd78      	ble.n	1f6a2 <__aeabi_dadd+0x292>
   1f5b0:	2800      	cmp	r0, #0
   1f5b2:	d031      	beq.n	1f618 <__aeabi_dadd+0x208>
   1f5b4:	4876      	ldr	r0, [pc, #472]	; (1f790 <__aeabi_dadd+0x380>)
   1f5b6:	4286      	cmp	r6, r0
   1f5b8:	d0ae      	beq.n	1f518 <__aeabi_dadd+0x108>
   1f5ba:	2080      	movs	r0, #128	; 0x80
   1f5bc:	0400      	lsls	r0, r0, #16
   1f5be:	4301      	orrs	r1, r0
   1f5c0:	4653      	mov	r3, sl
   1f5c2:	2b38      	cmp	r3, #56	; 0x38
   1f5c4:	dc00      	bgt.n	1f5c8 <__aeabi_dadd+0x1b8>
   1f5c6:	e0e9      	b.n	1f79c <__aeabi_dadd+0x38c>
   1f5c8:	430a      	orrs	r2, r1
   1f5ca:	1e51      	subs	r1, r2, #1
   1f5cc:	418a      	sbcs	r2, r1
   1f5ce:	2100      	movs	r1, #0
   1f5d0:	19d2      	adds	r2, r2, r7
   1f5d2:	42ba      	cmp	r2, r7
   1f5d4:	41bf      	sbcs	r7, r7
   1f5d6:	1909      	adds	r1, r1, r4
   1f5d8:	427c      	negs	r4, r7
   1f5da:	0017      	movs	r7, r2
   1f5dc:	190c      	adds	r4, r1, r4
   1f5de:	0223      	lsls	r3, r4, #8
   1f5e0:	d5d3      	bpl.n	1f58a <__aeabi_dadd+0x17a>
   1f5e2:	4b6b      	ldr	r3, [pc, #428]	; (1f790 <__aeabi_dadd+0x380>)
   1f5e4:	3601      	adds	r6, #1
   1f5e6:	429e      	cmp	r6, r3
   1f5e8:	d100      	bne.n	1f5ec <__aeabi_dadd+0x1dc>
   1f5ea:	e13a      	b.n	1f862 <__aeabi_dadd+0x452>
   1f5ec:	2001      	movs	r0, #1
   1f5ee:	4b69      	ldr	r3, [pc, #420]	; (1f794 <__aeabi_dadd+0x384>)
   1f5f0:	401c      	ands	r4, r3
   1f5f2:	087b      	lsrs	r3, r7, #1
   1f5f4:	4007      	ands	r7, r0
   1f5f6:	431f      	orrs	r7, r3
   1f5f8:	07e0      	lsls	r0, r4, #31
   1f5fa:	4307      	orrs	r7, r0
   1f5fc:	0864      	lsrs	r4, r4, #1
   1f5fe:	e78b      	b.n	1f518 <__aeabi_dadd+0x108>
   1f600:	0023      	movs	r3, r4
   1f602:	433b      	orrs	r3, r7
   1f604:	d100      	bne.n	1f608 <__aeabi_dadd+0x1f8>
   1f606:	e1cb      	b.n	1f9a0 <__aeabi_dadd+0x590>
   1f608:	2280      	movs	r2, #128	; 0x80
   1f60a:	0312      	lsls	r2, r2, #12
   1f60c:	4314      	orrs	r4, r2
   1f60e:	0324      	lsls	r4, r4, #12
   1f610:	0b24      	lsrs	r4, r4, #12
   1f612:	e79e      	b.n	1f552 <__aeabi_dadd+0x142>
   1f614:	002e      	movs	r6, r5
   1f616:	e77f      	b.n	1f518 <__aeabi_dadd+0x108>
   1f618:	0008      	movs	r0, r1
   1f61a:	4310      	orrs	r0, r2
   1f61c:	d100      	bne.n	1f620 <__aeabi_dadd+0x210>
   1f61e:	e0b4      	b.n	1f78a <__aeabi_dadd+0x37a>
   1f620:	1e58      	subs	r0, r3, #1
   1f622:	2800      	cmp	r0, #0
   1f624:	d000      	beq.n	1f628 <__aeabi_dadd+0x218>
   1f626:	e0de      	b.n	1f7e6 <__aeabi_dadd+0x3d6>
   1f628:	18ba      	adds	r2, r7, r2
   1f62a:	42ba      	cmp	r2, r7
   1f62c:	419b      	sbcs	r3, r3
   1f62e:	1864      	adds	r4, r4, r1
   1f630:	425b      	negs	r3, r3
   1f632:	18e4      	adds	r4, r4, r3
   1f634:	0017      	movs	r7, r2
   1f636:	2601      	movs	r6, #1
   1f638:	0223      	lsls	r3, r4, #8
   1f63a:	d5a6      	bpl.n	1f58a <__aeabi_dadd+0x17a>
   1f63c:	2602      	movs	r6, #2
   1f63e:	e7d5      	b.n	1f5ec <__aeabi_dadd+0x1dc>
   1f640:	2d00      	cmp	r5, #0
   1f642:	d16e      	bne.n	1f722 <__aeabi_dadd+0x312>
   1f644:	1c70      	adds	r0, r6, #1
   1f646:	0540      	lsls	r0, r0, #21
   1f648:	0d40      	lsrs	r0, r0, #21
   1f64a:	2801      	cmp	r0, #1
   1f64c:	dc00      	bgt.n	1f650 <__aeabi_dadd+0x240>
   1f64e:	e0f9      	b.n	1f844 <__aeabi_dadd+0x434>
   1f650:	1ab8      	subs	r0, r7, r2
   1f652:	4684      	mov	ip, r0
   1f654:	4287      	cmp	r7, r0
   1f656:	4180      	sbcs	r0, r0
   1f658:	1ae5      	subs	r5, r4, r3
   1f65a:	4240      	negs	r0, r0
   1f65c:	1a2d      	subs	r5, r5, r0
   1f65e:	0228      	lsls	r0, r5, #8
   1f660:	d400      	bmi.n	1f664 <__aeabi_dadd+0x254>
   1f662:	e089      	b.n	1f778 <__aeabi_dadd+0x368>
   1f664:	1bd7      	subs	r7, r2, r7
   1f666:	42ba      	cmp	r2, r7
   1f668:	4192      	sbcs	r2, r2
   1f66a:	1b1c      	subs	r4, r3, r4
   1f66c:	4252      	negs	r2, r2
   1f66e:	1aa5      	subs	r5, r4, r2
   1f670:	46d8      	mov	r8, fp
   1f672:	e729      	b.n	1f4c8 <__aeabi_dadd+0xb8>
   1f674:	4645      	mov	r5, r8
   1f676:	2400      	movs	r4, #0
   1f678:	2700      	movs	r7, #0
   1f67a:	e76a      	b.n	1f552 <__aeabi_dadd+0x142>
   1f67c:	4c45      	ldr	r4, [pc, #276]	; (1f794 <__aeabi_dadd+0x384>)
   1f67e:	1af6      	subs	r6, r6, r3
   1f680:	402c      	ands	r4, r5
   1f682:	e749      	b.n	1f518 <__aeabi_dadd+0x108>
   1f684:	003d      	movs	r5, r7
   1f686:	3828      	subs	r0, #40	; 0x28
   1f688:	4085      	lsls	r5, r0
   1f68a:	2700      	movs	r7, #0
   1f68c:	e72e      	b.n	1f4ec <__aeabi_dadd+0xdc>
   1f68e:	0038      	movs	r0, r7
   1f690:	f001 fb04 	bl	20c9c <__clzsi2>
   1f694:	3020      	adds	r0, #32
   1f696:	e71d      	b.n	1f4d4 <__aeabi_dadd+0xc4>
   1f698:	430a      	orrs	r2, r1
   1f69a:	1e51      	subs	r1, r2, #1
   1f69c:	418a      	sbcs	r2, r1
   1f69e:	2100      	movs	r1, #0
   1f6a0:	e707      	b.n	1f4b2 <__aeabi_dadd+0xa2>
   1f6a2:	2b00      	cmp	r3, #0
   1f6a4:	d000      	beq.n	1f6a8 <__aeabi_dadd+0x298>
   1f6a6:	e0f3      	b.n	1f890 <__aeabi_dadd+0x480>
   1f6a8:	1c70      	adds	r0, r6, #1
   1f6aa:	0543      	lsls	r3, r0, #21
   1f6ac:	0d5b      	lsrs	r3, r3, #21
   1f6ae:	2b01      	cmp	r3, #1
   1f6b0:	dc00      	bgt.n	1f6b4 <__aeabi_dadd+0x2a4>
   1f6b2:	e0ad      	b.n	1f810 <__aeabi_dadd+0x400>
   1f6b4:	4b36      	ldr	r3, [pc, #216]	; (1f790 <__aeabi_dadd+0x380>)
   1f6b6:	4298      	cmp	r0, r3
   1f6b8:	d100      	bne.n	1f6bc <__aeabi_dadd+0x2ac>
   1f6ba:	e0d1      	b.n	1f860 <__aeabi_dadd+0x450>
   1f6bc:	18ba      	adds	r2, r7, r2
   1f6be:	42ba      	cmp	r2, r7
   1f6c0:	41bf      	sbcs	r7, r7
   1f6c2:	1864      	adds	r4, r4, r1
   1f6c4:	427f      	negs	r7, r7
   1f6c6:	19e4      	adds	r4, r4, r7
   1f6c8:	07e7      	lsls	r7, r4, #31
   1f6ca:	0852      	lsrs	r2, r2, #1
   1f6cc:	4317      	orrs	r7, r2
   1f6ce:	0864      	lsrs	r4, r4, #1
   1f6d0:	0006      	movs	r6, r0
   1f6d2:	e721      	b.n	1f518 <__aeabi_dadd+0x108>
   1f6d4:	482e      	ldr	r0, [pc, #184]	; (1f790 <__aeabi_dadd+0x380>)
   1f6d6:	4285      	cmp	r5, r0
   1f6d8:	d100      	bne.n	1f6dc <__aeabi_dadd+0x2cc>
   1f6da:	e093      	b.n	1f804 <__aeabi_dadd+0x3f4>
   1f6dc:	001d      	movs	r5, r3
   1f6de:	e6d0      	b.n	1f482 <__aeabi_dadd+0x72>
   1f6e0:	0029      	movs	r1, r5
   1f6e2:	3e1f      	subs	r6, #31
   1f6e4:	40f1      	lsrs	r1, r6
   1f6e6:	2b20      	cmp	r3, #32
   1f6e8:	d100      	bne.n	1f6ec <__aeabi_dadd+0x2dc>
   1f6ea:	e08d      	b.n	1f808 <__aeabi_dadd+0x3f8>
   1f6ec:	2240      	movs	r2, #64	; 0x40
   1f6ee:	1ad3      	subs	r3, r2, r3
   1f6f0:	409d      	lsls	r5, r3
   1f6f2:	432f      	orrs	r7, r5
   1f6f4:	1e7d      	subs	r5, r7, #1
   1f6f6:	41af      	sbcs	r7, r5
   1f6f8:	2400      	movs	r4, #0
   1f6fa:	430f      	orrs	r7, r1
   1f6fc:	2600      	movs	r6, #0
   1f6fe:	e744      	b.n	1f58a <__aeabi_dadd+0x17a>
   1f700:	002b      	movs	r3, r5
   1f702:	0008      	movs	r0, r1
   1f704:	3b20      	subs	r3, #32
   1f706:	40d8      	lsrs	r0, r3
   1f708:	0003      	movs	r3, r0
   1f70a:	2d20      	cmp	r5, #32
   1f70c:	d100      	bne.n	1f710 <__aeabi_dadd+0x300>
   1f70e:	e07d      	b.n	1f80c <__aeabi_dadd+0x3fc>
   1f710:	2040      	movs	r0, #64	; 0x40
   1f712:	1b45      	subs	r5, r0, r5
   1f714:	40a9      	lsls	r1, r5
   1f716:	430a      	orrs	r2, r1
   1f718:	1e51      	subs	r1, r2, #1
   1f71a:	418a      	sbcs	r2, r1
   1f71c:	2100      	movs	r1, #0
   1f71e:	431a      	orrs	r2, r3
   1f720:	e6c7      	b.n	1f4b2 <__aeabi_dadd+0xa2>
   1f722:	2e00      	cmp	r6, #0
   1f724:	d050      	beq.n	1f7c8 <__aeabi_dadd+0x3b8>
   1f726:	4e1a      	ldr	r6, [pc, #104]	; (1f790 <__aeabi_dadd+0x380>)
   1f728:	42b0      	cmp	r0, r6
   1f72a:	d057      	beq.n	1f7dc <__aeabi_dadd+0x3cc>
   1f72c:	2680      	movs	r6, #128	; 0x80
   1f72e:	426b      	negs	r3, r5
   1f730:	4699      	mov	r9, r3
   1f732:	0436      	lsls	r6, r6, #16
   1f734:	4334      	orrs	r4, r6
   1f736:	464b      	mov	r3, r9
   1f738:	2b38      	cmp	r3, #56	; 0x38
   1f73a:	dd00      	ble.n	1f73e <__aeabi_dadd+0x32e>
   1f73c:	e0d6      	b.n	1f8ec <__aeabi_dadd+0x4dc>
   1f73e:	2b1f      	cmp	r3, #31
   1f740:	dd00      	ble.n	1f744 <__aeabi_dadd+0x334>
   1f742:	e135      	b.n	1f9b0 <__aeabi_dadd+0x5a0>
   1f744:	2620      	movs	r6, #32
   1f746:	1af5      	subs	r5, r6, r3
   1f748:	0026      	movs	r6, r4
   1f74a:	40ae      	lsls	r6, r5
   1f74c:	46b2      	mov	sl, r6
   1f74e:	003e      	movs	r6, r7
   1f750:	40de      	lsrs	r6, r3
   1f752:	46ac      	mov	ip, r5
   1f754:	0035      	movs	r5, r6
   1f756:	4656      	mov	r6, sl
   1f758:	432e      	orrs	r6, r5
   1f75a:	4665      	mov	r5, ip
   1f75c:	40af      	lsls	r7, r5
   1f75e:	1e7d      	subs	r5, r7, #1
   1f760:	41af      	sbcs	r7, r5
   1f762:	40dc      	lsrs	r4, r3
   1f764:	4337      	orrs	r7, r6
   1f766:	1bd7      	subs	r7, r2, r7
   1f768:	42ba      	cmp	r2, r7
   1f76a:	4192      	sbcs	r2, r2
   1f76c:	1b0c      	subs	r4, r1, r4
   1f76e:	4252      	negs	r2, r2
   1f770:	1aa4      	subs	r4, r4, r2
   1f772:	0006      	movs	r6, r0
   1f774:	46d8      	mov	r8, fp
   1f776:	e6a3      	b.n	1f4c0 <__aeabi_dadd+0xb0>
   1f778:	4664      	mov	r4, ip
   1f77a:	4667      	mov	r7, ip
   1f77c:	432c      	orrs	r4, r5
   1f77e:	d000      	beq.n	1f782 <__aeabi_dadd+0x372>
   1f780:	e6a2      	b.n	1f4c8 <__aeabi_dadd+0xb8>
   1f782:	2500      	movs	r5, #0
   1f784:	2600      	movs	r6, #0
   1f786:	2700      	movs	r7, #0
   1f788:	e706      	b.n	1f598 <__aeabi_dadd+0x188>
   1f78a:	001e      	movs	r6, r3
   1f78c:	e6c4      	b.n	1f518 <__aeabi_dadd+0x108>
   1f78e:	46c0      	nop			; (mov r8, r8)
   1f790:	000007ff 	.word	0x000007ff
   1f794:	ff7fffff 	.word	0xff7fffff
   1f798:	800fffff 	.word	0x800fffff
   1f79c:	2b1f      	cmp	r3, #31
   1f79e:	dc63      	bgt.n	1f868 <__aeabi_dadd+0x458>
   1f7a0:	2020      	movs	r0, #32
   1f7a2:	1ac3      	subs	r3, r0, r3
   1f7a4:	0008      	movs	r0, r1
   1f7a6:	4098      	lsls	r0, r3
   1f7a8:	469c      	mov	ip, r3
   1f7aa:	4683      	mov	fp, r0
   1f7ac:	4653      	mov	r3, sl
   1f7ae:	0010      	movs	r0, r2
   1f7b0:	40d8      	lsrs	r0, r3
   1f7b2:	0003      	movs	r3, r0
   1f7b4:	4658      	mov	r0, fp
   1f7b6:	4318      	orrs	r0, r3
   1f7b8:	4663      	mov	r3, ip
   1f7ba:	409a      	lsls	r2, r3
   1f7bc:	1e53      	subs	r3, r2, #1
   1f7be:	419a      	sbcs	r2, r3
   1f7c0:	4653      	mov	r3, sl
   1f7c2:	4302      	orrs	r2, r0
   1f7c4:	40d9      	lsrs	r1, r3
   1f7c6:	e703      	b.n	1f5d0 <__aeabi_dadd+0x1c0>
   1f7c8:	0026      	movs	r6, r4
   1f7ca:	433e      	orrs	r6, r7
   1f7cc:	d006      	beq.n	1f7dc <__aeabi_dadd+0x3cc>
   1f7ce:	43eb      	mvns	r3, r5
   1f7d0:	4699      	mov	r9, r3
   1f7d2:	2b00      	cmp	r3, #0
   1f7d4:	d0c7      	beq.n	1f766 <__aeabi_dadd+0x356>
   1f7d6:	4e94      	ldr	r6, [pc, #592]	; (1fa28 <__aeabi_dadd+0x618>)
   1f7d8:	42b0      	cmp	r0, r6
   1f7da:	d1ac      	bne.n	1f736 <__aeabi_dadd+0x326>
   1f7dc:	000c      	movs	r4, r1
   1f7de:	0017      	movs	r7, r2
   1f7e0:	0006      	movs	r6, r0
   1f7e2:	46d8      	mov	r8, fp
   1f7e4:	e698      	b.n	1f518 <__aeabi_dadd+0x108>
   1f7e6:	4b90      	ldr	r3, [pc, #576]	; (1fa28 <__aeabi_dadd+0x618>)
   1f7e8:	459a      	cmp	sl, r3
   1f7ea:	d00b      	beq.n	1f804 <__aeabi_dadd+0x3f4>
   1f7ec:	4682      	mov	sl, r0
   1f7ee:	e6e7      	b.n	1f5c0 <__aeabi_dadd+0x1b0>
   1f7f0:	2800      	cmp	r0, #0
   1f7f2:	d000      	beq.n	1f7f6 <__aeabi_dadd+0x3e6>
   1f7f4:	e09e      	b.n	1f934 <__aeabi_dadd+0x524>
   1f7f6:	0018      	movs	r0, r3
   1f7f8:	4310      	orrs	r0, r2
   1f7fa:	d100      	bne.n	1f7fe <__aeabi_dadd+0x3ee>
   1f7fc:	e0e9      	b.n	1f9d2 <__aeabi_dadd+0x5c2>
   1f7fe:	001c      	movs	r4, r3
   1f800:	0017      	movs	r7, r2
   1f802:	46d8      	mov	r8, fp
   1f804:	4e88      	ldr	r6, [pc, #544]	; (1fa28 <__aeabi_dadd+0x618>)
   1f806:	e687      	b.n	1f518 <__aeabi_dadd+0x108>
   1f808:	2500      	movs	r5, #0
   1f80a:	e772      	b.n	1f6f2 <__aeabi_dadd+0x2e2>
   1f80c:	2100      	movs	r1, #0
   1f80e:	e782      	b.n	1f716 <__aeabi_dadd+0x306>
   1f810:	0023      	movs	r3, r4
   1f812:	433b      	orrs	r3, r7
   1f814:	2e00      	cmp	r6, #0
   1f816:	d000      	beq.n	1f81a <__aeabi_dadd+0x40a>
   1f818:	e0ab      	b.n	1f972 <__aeabi_dadd+0x562>
   1f81a:	2b00      	cmp	r3, #0
   1f81c:	d100      	bne.n	1f820 <__aeabi_dadd+0x410>
   1f81e:	e0e7      	b.n	1f9f0 <__aeabi_dadd+0x5e0>
   1f820:	000b      	movs	r3, r1
   1f822:	4313      	orrs	r3, r2
   1f824:	d100      	bne.n	1f828 <__aeabi_dadd+0x418>
   1f826:	e677      	b.n	1f518 <__aeabi_dadd+0x108>
   1f828:	18ba      	adds	r2, r7, r2
   1f82a:	42ba      	cmp	r2, r7
   1f82c:	41bf      	sbcs	r7, r7
   1f82e:	1864      	adds	r4, r4, r1
   1f830:	427f      	negs	r7, r7
   1f832:	19e4      	adds	r4, r4, r7
   1f834:	0223      	lsls	r3, r4, #8
   1f836:	d400      	bmi.n	1f83a <__aeabi_dadd+0x42a>
   1f838:	e0f2      	b.n	1fa20 <__aeabi_dadd+0x610>
   1f83a:	4b7c      	ldr	r3, [pc, #496]	; (1fa2c <__aeabi_dadd+0x61c>)
   1f83c:	0017      	movs	r7, r2
   1f83e:	401c      	ands	r4, r3
   1f840:	0006      	movs	r6, r0
   1f842:	e669      	b.n	1f518 <__aeabi_dadd+0x108>
   1f844:	0020      	movs	r0, r4
   1f846:	4338      	orrs	r0, r7
   1f848:	2e00      	cmp	r6, #0
   1f84a:	d1d1      	bne.n	1f7f0 <__aeabi_dadd+0x3e0>
   1f84c:	2800      	cmp	r0, #0
   1f84e:	d15b      	bne.n	1f908 <__aeabi_dadd+0x4f8>
   1f850:	001c      	movs	r4, r3
   1f852:	4314      	orrs	r4, r2
   1f854:	d100      	bne.n	1f858 <__aeabi_dadd+0x448>
   1f856:	e0a8      	b.n	1f9aa <__aeabi_dadd+0x59a>
   1f858:	001c      	movs	r4, r3
   1f85a:	0017      	movs	r7, r2
   1f85c:	46d8      	mov	r8, fp
   1f85e:	e65b      	b.n	1f518 <__aeabi_dadd+0x108>
   1f860:	0006      	movs	r6, r0
   1f862:	2400      	movs	r4, #0
   1f864:	2700      	movs	r7, #0
   1f866:	e697      	b.n	1f598 <__aeabi_dadd+0x188>
   1f868:	4650      	mov	r0, sl
   1f86a:	000b      	movs	r3, r1
   1f86c:	3820      	subs	r0, #32
   1f86e:	40c3      	lsrs	r3, r0
   1f870:	4699      	mov	r9, r3
   1f872:	4653      	mov	r3, sl
   1f874:	2b20      	cmp	r3, #32
   1f876:	d100      	bne.n	1f87a <__aeabi_dadd+0x46a>
   1f878:	e095      	b.n	1f9a6 <__aeabi_dadd+0x596>
   1f87a:	2340      	movs	r3, #64	; 0x40
   1f87c:	4650      	mov	r0, sl
   1f87e:	1a1b      	subs	r3, r3, r0
   1f880:	4099      	lsls	r1, r3
   1f882:	430a      	orrs	r2, r1
   1f884:	1e51      	subs	r1, r2, #1
   1f886:	418a      	sbcs	r2, r1
   1f888:	464b      	mov	r3, r9
   1f88a:	2100      	movs	r1, #0
   1f88c:	431a      	orrs	r2, r3
   1f88e:	e69f      	b.n	1f5d0 <__aeabi_dadd+0x1c0>
   1f890:	2e00      	cmp	r6, #0
   1f892:	d130      	bne.n	1f8f6 <__aeabi_dadd+0x4e6>
   1f894:	0026      	movs	r6, r4
   1f896:	433e      	orrs	r6, r7
   1f898:	d067      	beq.n	1f96a <__aeabi_dadd+0x55a>
   1f89a:	43db      	mvns	r3, r3
   1f89c:	469a      	mov	sl, r3
   1f89e:	2b00      	cmp	r3, #0
   1f8a0:	d01c      	beq.n	1f8dc <__aeabi_dadd+0x4cc>
   1f8a2:	4e61      	ldr	r6, [pc, #388]	; (1fa28 <__aeabi_dadd+0x618>)
   1f8a4:	42b0      	cmp	r0, r6
   1f8a6:	d060      	beq.n	1f96a <__aeabi_dadd+0x55a>
   1f8a8:	4653      	mov	r3, sl
   1f8aa:	2b38      	cmp	r3, #56	; 0x38
   1f8ac:	dd00      	ble.n	1f8b0 <__aeabi_dadd+0x4a0>
   1f8ae:	e096      	b.n	1f9de <__aeabi_dadd+0x5ce>
   1f8b0:	2b1f      	cmp	r3, #31
   1f8b2:	dd00      	ble.n	1f8b6 <__aeabi_dadd+0x4a6>
   1f8b4:	e09f      	b.n	1f9f6 <__aeabi_dadd+0x5e6>
   1f8b6:	2620      	movs	r6, #32
   1f8b8:	1af3      	subs	r3, r6, r3
   1f8ba:	0026      	movs	r6, r4
   1f8bc:	409e      	lsls	r6, r3
   1f8be:	469c      	mov	ip, r3
   1f8c0:	46b3      	mov	fp, r6
   1f8c2:	4653      	mov	r3, sl
   1f8c4:	003e      	movs	r6, r7
   1f8c6:	40de      	lsrs	r6, r3
   1f8c8:	0033      	movs	r3, r6
   1f8ca:	465e      	mov	r6, fp
   1f8cc:	431e      	orrs	r6, r3
   1f8ce:	4663      	mov	r3, ip
   1f8d0:	409f      	lsls	r7, r3
   1f8d2:	1e7b      	subs	r3, r7, #1
   1f8d4:	419f      	sbcs	r7, r3
   1f8d6:	4653      	mov	r3, sl
   1f8d8:	40dc      	lsrs	r4, r3
   1f8da:	4337      	orrs	r7, r6
   1f8dc:	18bf      	adds	r7, r7, r2
   1f8de:	4297      	cmp	r7, r2
   1f8e0:	4192      	sbcs	r2, r2
   1f8e2:	1864      	adds	r4, r4, r1
   1f8e4:	4252      	negs	r2, r2
   1f8e6:	18a4      	adds	r4, r4, r2
   1f8e8:	0006      	movs	r6, r0
   1f8ea:	e678      	b.n	1f5de <__aeabi_dadd+0x1ce>
   1f8ec:	4327      	orrs	r7, r4
   1f8ee:	1e7c      	subs	r4, r7, #1
   1f8f0:	41a7      	sbcs	r7, r4
   1f8f2:	2400      	movs	r4, #0
   1f8f4:	e737      	b.n	1f766 <__aeabi_dadd+0x356>
   1f8f6:	4e4c      	ldr	r6, [pc, #304]	; (1fa28 <__aeabi_dadd+0x618>)
   1f8f8:	42b0      	cmp	r0, r6
   1f8fa:	d036      	beq.n	1f96a <__aeabi_dadd+0x55a>
   1f8fc:	2680      	movs	r6, #128	; 0x80
   1f8fe:	425b      	negs	r3, r3
   1f900:	0436      	lsls	r6, r6, #16
   1f902:	469a      	mov	sl, r3
   1f904:	4334      	orrs	r4, r6
   1f906:	e7cf      	b.n	1f8a8 <__aeabi_dadd+0x498>
   1f908:	0018      	movs	r0, r3
   1f90a:	4310      	orrs	r0, r2
   1f90c:	d100      	bne.n	1f910 <__aeabi_dadd+0x500>
   1f90e:	e603      	b.n	1f518 <__aeabi_dadd+0x108>
   1f910:	1ab8      	subs	r0, r7, r2
   1f912:	4684      	mov	ip, r0
   1f914:	4567      	cmp	r7, ip
   1f916:	41ad      	sbcs	r5, r5
   1f918:	1ae0      	subs	r0, r4, r3
   1f91a:	426d      	negs	r5, r5
   1f91c:	1b40      	subs	r0, r0, r5
   1f91e:	0205      	lsls	r5, r0, #8
   1f920:	d400      	bmi.n	1f924 <__aeabi_dadd+0x514>
   1f922:	e62c      	b.n	1f57e <__aeabi_dadd+0x16e>
   1f924:	1bd7      	subs	r7, r2, r7
   1f926:	42ba      	cmp	r2, r7
   1f928:	4192      	sbcs	r2, r2
   1f92a:	1b1c      	subs	r4, r3, r4
   1f92c:	4252      	negs	r2, r2
   1f92e:	1aa4      	subs	r4, r4, r2
   1f930:	46d8      	mov	r8, fp
   1f932:	e5f1      	b.n	1f518 <__aeabi_dadd+0x108>
   1f934:	0018      	movs	r0, r3
   1f936:	4310      	orrs	r0, r2
   1f938:	d100      	bne.n	1f93c <__aeabi_dadd+0x52c>
   1f93a:	e763      	b.n	1f804 <__aeabi_dadd+0x3f4>
   1f93c:	08f8      	lsrs	r0, r7, #3
   1f93e:	0767      	lsls	r7, r4, #29
   1f940:	4307      	orrs	r7, r0
   1f942:	2080      	movs	r0, #128	; 0x80
   1f944:	08e4      	lsrs	r4, r4, #3
   1f946:	0300      	lsls	r0, r0, #12
   1f948:	4204      	tst	r4, r0
   1f94a:	d008      	beq.n	1f95e <__aeabi_dadd+0x54e>
   1f94c:	08dd      	lsrs	r5, r3, #3
   1f94e:	4205      	tst	r5, r0
   1f950:	d105      	bne.n	1f95e <__aeabi_dadd+0x54e>
   1f952:	08d2      	lsrs	r2, r2, #3
   1f954:	0759      	lsls	r1, r3, #29
   1f956:	4311      	orrs	r1, r2
   1f958:	000f      	movs	r7, r1
   1f95a:	002c      	movs	r4, r5
   1f95c:	46d8      	mov	r8, fp
   1f95e:	0f7b      	lsrs	r3, r7, #29
   1f960:	00e4      	lsls	r4, r4, #3
   1f962:	431c      	orrs	r4, r3
   1f964:	00ff      	lsls	r7, r7, #3
   1f966:	4e30      	ldr	r6, [pc, #192]	; (1fa28 <__aeabi_dadd+0x618>)
   1f968:	e5d6      	b.n	1f518 <__aeabi_dadd+0x108>
   1f96a:	000c      	movs	r4, r1
   1f96c:	0017      	movs	r7, r2
   1f96e:	0006      	movs	r6, r0
   1f970:	e5d2      	b.n	1f518 <__aeabi_dadd+0x108>
   1f972:	2b00      	cmp	r3, #0
   1f974:	d038      	beq.n	1f9e8 <__aeabi_dadd+0x5d8>
   1f976:	000b      	movs	r3, r1
   1f978:	4313      	orrs	r3, r2
   1f97a:	d100      	bne.n	1f97e <__aeabi_dadd+0x56e>
   1f97c:	e742      	b.n	1f804 <__aeabi_dadd+0x3f4>
   1f97e:	08f8      	lsrs	r0, r7, #3
   1f980:	0767      	lsls	r7, r4, #29
   1f982:	4307      	orrs	r7, r0
   1f984:	2080      	movs	r0, #128	; 0x80
   1f986:	08e4      	lsrs	r4, r4, #3
   1f988:	0300      	lsls	r0, r0, #12
   1f98a:	4204      	tst	r4, r0
   1f98c:	d0e7      	beq.n	1f95e <__aeabi_dadd+0x54e>
   1f98e:	08cb      	lsrs	r3, r1, #3
   1f990:	4203      	tst	r3, r0
   1f992:	d1e4      	bne.n	1f95e <__aeabi_dadd+0x54e>
   1f994:	08d2      	lsrs	r2, r2, #3
   1f996:	0749      	lsls	r1, r1, #29
   1f998:	4311      	orrs	r1, r2
   1f99a:	000f      	movs	r7, r1
   1f99c:	001c      	movs	r4, r3
   1f99e:	e7de      	b.n	1f95e <__aeabi_dadd+0x54e>
   1f9a0:	2700      	movs	r7, #0
   1f9a2:	2400      	movs	r4, #0
   1f9a4:	e5d5      	b.n	1f552 <__aeabi_dadd+0x142>
   1f9a6:	2100      	movs	r1, #0
   1f9a8:	e76b      	b.n	1f882 <__aeabi_dadd+0x472>
   1f9aa:	2500      	movs	r5, #0
   1f9ac:	2700      	movs	r7, #0
   1f9ae:	e5f3      	b.n	1f598 <__aeabi_dadd+0x188>
   1f9b0:	464e      	mov	r6, r9
   1f9b2:	0025      	movs	r5, r4
   1f9b4:	3e20      	subs	r6, #32
   1f9b6:	40f5      	lsrs	r5, r6
   1f9b8:	464b      	mov	r3, r9
   1f9ba:	002e      	movs	r6, r5
   1f9bc:	2b20      	cmp	r3, #32
   1f9be:	d02d      	beq.n	1fa1c <__aeabi_dadd+0x60c>
   1f9c0:	2540      	movs	r5, #64	; 0x40
   1f9c2:	1aed      	subs	r5, r5, r3
   1f9c4:	40ac      	lsls	r4, r5
   1f9c6:	4327      	orrs	r7, r4
   1f9c8:	1e7c      	subs	r4, r7, #1
   1f9ca:	41a7      	sbcs	r7, r4
   1f9cc:	2400      	movs	r4, #0
   1f9ce:	4337      	orrs	r7, r6
   1f9d0:	e6c9      	b.n	1f766 <__aeabi_dadd+0x356>
   1f9d2:	2480      	movs	r4, #128	; 0x80
   1f9d4:	2500      	movs	r5, #0
   1f9d6:	0324      	lsls	r4, r4, #12
   1f9d8:	4e13      	ldr	r6, [pc, #76]	; (1fa28 <__aeabi_dadd+0x618>)
   1f9da:	2700      	movs	r7, #0
   1f9dc:	e5dc      	b.n	1f598 <__aeabi_dadd+0x188>
   1f9de:	4327      	orrs	r7, r4
   1f9e0:	1e7c      	subs	r4, r7, #1
   1f9e2:	41a7      	sbcs	r7, r4
   1f9e4:	2400      	movs	r4, #0
   1f9e6:	e779      	b.n	1f8dc <__aeabi_dadd+0x4cc>
   1f9e8:	000c      	movs	r4, r1
   1f9ea:	0017      	movs	r7, r2
   1f9ec:	4e0e      	ldr	r6, [pc, #56]	; (1fa28 <__aeabi_dadd+0x618>)
   1f9ee:	e593      	b.n	1f518 <__aeabi_dadd+0x108>
   1f9f0:	000c      	movs	r4, r1
   1f9f2:	0017      	movs	r7, r2
   1f9f4:	e590      	b.n	1f518 <__aeabi_dadd+0x108>
   1f9f6:	4656      	mov	r6, sl
   1f9f8:	0023      	movs	r3, r4
   1f9fa:	3e20      	subs	r6, #32
   1f9fc:	40f3      	lsrs	r3, r6
   1f9fe:	4699      	mov	r9, r3
   1fa00:	4653      	mov	r3, sl
   1fa02:	2b20      	cmp	r3, #32
   1fa04:	d00e      	beq.n	1fa24 <__aeabi_dadd+0x614>
   1fa06:	2340      	movs	r3, #64	; 0x40
   1fa08:	4656      	mov	r6, sl
   1fa0a:	1b9b      	subs	r3, r3, r6
   1fa0c:	409c      	lsls	r4, r3
   1fa0e:	4327      	orrs	r7, r4
   1fa10:	1e7c      	subs	r4, r7, #1
   1fa12:	41a7      	sbcs	r7, r4
   1fa14:	464b      	mov	r3, r9
   1fa16:	2400      	movs	r4, #0
   1fa18:	431f      	orrs	r7, r3
   1fa1a:	e75f      	b.n	1f8dc <__aeabi_dadd+0x4cc>
   1fa1c:	2400      	movs	r4, #0
   1fa1e:	e7d2      	b.n	1f9c6 <__aeabi_dadd+0x5b6>
   1fa20:	0017      	movs	r7, r2
   1fa22:	e5b2      	b.n	1f58a <__aeabi_dadd+0x17a>
   1fa24:	2400      	movs	r4, #0
   1fa26:	e7f2      	b.n	1fa0e <__aeabi_dadd+0x5fe>
   1fa28:	000007ff 	.word	0x000007ff
   1fa2c:	ff7fffff 	.word	0xff7fffff

0001fa30 <__aeabi_ddiv>:
   1fa30:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa32:	4657      	mov	r7, sl
   1fa34:	4645      	mov	r5, r8
   1fa36:	46de      	mov	lr, fp
   1fa38:	464e      	mov	r6, r9
   1fa3a:	b5e0      	push	{r5, r6, r7, lr}
   1fa3c:	004c      	lsls	r4, r1, #1
   1fa3e:	030e      	lsls	r6, r1, #12
   1fa40:	b087      	sub	sp, #28
   1fa42:	4683      	mov	fp, r0
   1fa44:	4692      	mov	sl, r2
   1fa46:	001d      	movs	r5, r3
   1fa48:	4680      	mov	r8, r0
   1fa4a:	0b36      	lsrs	r6, r6, #12
   1fa4c:	0d64      	lsrs	r4, r4, #21
   1fa4e:	0fcf      	lsrs	r7, r1, #31
   1fa50:	2c00      	cmp	r4, #0
   1fa52:	d04f      	beq.n	1faf4 <__aeabi_ddiv+0xc4>
   1fa54:	4b6f      	ldr	r3, [pc, #444]	; (1fc14 <__aeabi_ddiv+0x1e4>)
   1fa56:	429c      	cmp	r4, r3
   1fa58:	d035      	beq.n	1fac6 <__aeabi_ddiv+0x96>
   1fa5a:	2380      	movs	r3, #128	; 0x80
   1fa5c:	0f42      	lsrs	r2, r0, #29
   1fa5e:	041b      	lsls	r3, r3, #16
   1fa60:	00f6      	lsls	r6, r6, #3
   1fa62:	4313      	orrs	r3, r2
   1fa64:	4333      	orrs	r3, r6
   1fa66:	4699      	mov	r9, r3
   1fa68:	00c3      	lsls	r3, r0, #3
   1fa6a:	4698      	mov	r8, r3
   1fa6c:	4b6a      	ldr	r3, [pc, #424]	; (1fc18 <__aeabi_ddiv+0x1e8>)
   1fa6e:	2600      	movs	r6, #0
   1fa70:	469c      	mov	ip, r3
   1fa72:	2300      	movs	r3, #0
   1fa74:	4464      	add	r4, ip
   1fa76:	9303      	str	r3, [sp, #12]
   1fa78:	032b      	lsls	r3, r5, #12
   1fa7a:	0b1b      	lsrs	r3, r3, #12
   1fa7c:	469b      	mov	fp, r3
   1fa7e:	006b      	lsls	r3, r5, #1
   1fa80:	0fed      	lsrs	r5, r5, #31
   1fa82:	4650      	mov	r0, sl
   1fa84:	0d5b      	lsrs	r3, r3, #21
   1fa86:	9501      	str	r5, [sp, #4]
   1fa88:	d05e      	beq.n	1fb48 <__aeabi_ddiv+0x118>
   1fa8a:	4a62      	ldr	r2, [pc, #392]	; (1fc14 <__aeabi_ddiv+0x1e4>)
   1fa8c:	4293      	cmp	r3, r2
   1fa8e:	d053      	beq.n	1fb38 <__aeabi_ddiv+0x108>
   1fa90:	465a      	mov	r2, fp
   1fa92:	00d1      	lsls	r1, r2, #3
   1fa94:	2280      	movs	r2, #128	; 0x80
   1fa96:	0f40      	lsrs	r0, r0, #29
   1fa98:	0412      	lsls	r2, r2, #16
   1fa9a:	4302      	orrs	r2, r0
   1fa9c:	430a      	orrs	r2, r1
   1fa9e:	4693      	mov	fp, r2
   1faa0:	4652      	mov	r2, sl
   1faa2:	00d1      	lsls	r1, r2, #3
   1faa4:	4a5c      	ldr	r2, [pc, #368]	; (1fc18 <__aeabi_ddiv+0x1e8>)
   1faa6:	4694      	mov	ip, r2
   1faa8:	2200      	movs	r2, #0
   1faaa:	4463      	add	r3, ip
   1faac:	0038      	movs	r0, r7
   1faae:	4068      	eors	r0, r5
   1fab0:	4684      	mov	ip, r0
   1fab2:	9002      	str	r0, [sp, #8]
   1fab4:	1ae4      	subs	r4, r4, r3
   1fab6:	4316      	orrs	r6, r2
   1fab8:	2e0f      	cmp	r6, #15
   1faba:	d900      	bls.n	1fabe <__aeabi_ddiv+0x8e>
   1fabc:	e0b4      	b.n	1fc28 <__aeabi_ddiv+0x1f8>
   1fabe:	4b57      	ldr	r3, [pc, #348]	; (1fc1c <__aeabi_ddiv+0x1ec>)
   1fac0:	00b6      	lsls	r6, r6, #2
   1fac2:	599b      	ldr	r3, [r3, r6]
   1fac4:	469f      	mov	pc, r3
   1fac6:	0003      	movs	r3, r0
   1fac8:	4333      	orrs	r3, r6
   1faca:	4699      	mov	r9, r3
   1facc:	d16c      	bne.n	1fba8 <__aeabi_ddiv+0x178>
   1face:	2300      	movs	r3, #0
   1fad0:	4698      	mov	r8, r3
   1fad2:	3302      	adds	r3, #2
   1fad4:	2608      	movs	r6, #8
   1fad6:	9303      	str	r3, [sp, #12]
   1fad8:	e7ce      	b.n	1fa78 <__aeabi_ddiv+0x48>
   1fada:	46cb      	mov	fp, r9
   1fadc:	4641      	mov	r1, r8
   1fade:	9a03      	ldr	r2, [sp, #12]
   1fae0:	9701      	str	r7, [sp, #4]
   1fae2:	2a02      	cmp	r2, #2
   1fae4:	d165      	bne.n	1fbb2 <__aeabi_ddiv+0x182>
   1fae6:	9b01      	ldr	r3, [sp, #4]
   1fae8:	4c4a      	ldr	r4, [pc, #296]	; (1fc14 <__aeabi_ddiv+0x1e4>)
   1faea:	469c      	mov	ip, r3
   1faec:	2300      	movs	r3, #0
   1faee:	2200      	movs	r2, #0
   1faf0:	4698      	mov	r8, r3
   1faf2:	e06b      	b.n	1fbcc <__aeabi_ddiv+0x19c>
   1faf4:	0003      	movs	r3, r0
   1faf6:	4333      	orrs	r3, r6
   1faf8:	4699      	mov	r9, r3
   1fafa:	d04e      	beq.n	1fb9a <__aeabi_ddiv+0x16a>
   1fafc:	2e00      	cmp	r6, #0
   1fafe:	d100      	bne.n	1fb02 <__aeabi_ddiv+0xd2>
   1fb00:	e1bc      	b.n	1fe7c <__aeabi_ddiv+0x44c>
   1fb02:	0030      	movs	r0, r6
   1fb04:	f001 f8ca 	bl	20c9c <__clzsi2>
   1fb08:	0003      	movs	r3, r0
   1fb0a:	3b0b      	subs	r3, #11
   1fb0c:	2b1c      	cmp	r3, #28
   1fb0e:	dd00      	ble.n	1fb12 <__aeabi_ddiv+0xe2>
   1fb10:	e1ac      	b.n	1fe6c <__aeabi_ddiv+0x43c>
   1fb12:	221d      	movs	r2, #29
   1fb14:	1ad3      	subs	r3, r2, r3
   1fb16:	465a      	mov	r2, fp
   1fb18:	0001      	movs	r1, r0
   1fb1a:	40da      	lsrs	r2, r3
   1fb1c:	3908      	subs	r1, #8
   1fb1e:	408e      	lsls	r6, r1
   1fb20:	0013      	movs	r3, r2
   1fb22:	4333      	orrs	r3, r6
   1fb24:	4699      	mov	r9, r3
   1fb26:	465b      	mov	r3, fp
   1fb28:	408b      	lsls	r3, r1
   1fb2a:	4698      	mov	r8, r3
   1fb2c:	2300      	movs	r3, #0
   1fb2e:	4c3c      	ldr	r4, [pc, #240]	; (1fc20 <__aeabi_ddiv+0x1f0>)
   1fb30:	2600      	movs	r6, #0
   1fb32:	1a24      	subs	r4, r4, r0
   1fb34:	9303      	str	r3, [sp, #12]
   1fb36:	e79f      	b.n	1fa78 <__aeabi_ddiv+0x48>
   1fb38:	4651      	mov	r1, sl
   1fb3a:	465a      	mov	r2, fp
   1fb3c:	4311      	orrs	r1, r2
   1fb3e:	d129      	bne.n	1fb94 <__aeabi_ddiv+0x164>
   1fb40:	2200      	movs	r2, #0
   1fb42:	4693      	mov	fp, r2
   1fb44:	3202      	adds	r2, #2
   1fb46:	e7b1      	b.n	1faac <__aeabi_ddiv+0x7c>
   1fb48:	4659      	mov	r1, fp
   1fb4a:	4301      	orrs	r1, r0
   1fb4c:	d01e      	beq.n	1fb8c <__aeabi_ddiv+0x15c>
   1fb4e:	465b      	mov	r3, fp
   1fb50:	2b00      	cmp	r3, #0
   1fb52:	d100      	bne.n	1fb56 <__aeabi_ddiv+0x126>
   1fb54:	e19e      	b.n	1fe94 <__aeabi_ddiv+0x464>
   1fb56:	4658      	mov	r0, fp
   1fb58:	f001 f8a0 	bl	20c9c <__clzsi2>
   1fb5c:	0003      	movs	r3, r0
   1fb5e:	3b0b      	subs	r3, #11
   1fb60:	2b1c      	cmp	r3, #28
   1fb62:	dd00      	ble.n	1fb66 <__aeabi_ddiv+0x136>
   1fb64:	e18f      	b.n	1fe86 <__aeabi_ddiv+0x456>
   1fb66:	0002      	movs	r2, r0
   1fb68:	4659      	mov	r1, fp
   1fb6a:	3a08      	subs	r2, #8
   1fb6c:	4091      	lsls	r1, r2
   1fb6e:	468b      	mov	fp, r1
   1fb70:	211d      	movs	r1, #29
   1fb72:	1acb      	subs	r3, r1, r3
   1fb74:	4651      	mov	r1, sl
   1fb76:	40d9      	lsrs	r1, r3
   1fb78:	000b      	movs	r3, r1
   1fb7a:	4659      	mov	r1, fp
   1fb7c:	430b      	orrs	r3, r1
   1fb7e:	4651      	mov	r1, sl
   1fb80:	469b      	mov	fp, r3
   1fb82:	4091      	lsls	r1, r2
   1fb84:	4b26      	ldr	r3, [pc, #152]	; (1fc20 <__aeabi_ddiv+0x1f0>)
   1fb86:	2200      	movs	r2, #0
   1fb88:	1a1b      	subs	r3, r3, r0
   1fb8a:	e78f      	b.n	1faac <__aeabi_ddiv+0x7c>
   1fb8c:	2300      	movs	r3, #0
   1fb8e:	2201      	movs	r2, #1
   1fb90:	469b      	mov	fp, r3
   1fb92:	e78b      	b.n	1faac <__aeabi_ddiv+0x7c>
   1fb94:	4651      	mov	r1, sl
   1fb96:	2203      	movs	r2, #3
   1fb98:	e788      	b.n	1faac <__aeabi_ddiv+0x7c>
   1fb9a:	2300      	movs	r3, #0
   1fb9c:	4698      	mov	r8, r3
   1fb9e:	3301      	adds	r3, #1
   1fba0:	2604      	movs	r6, #4
   1fba2:	2400      	movs	r4, #0
   1fba4:	9303      	str	r3, [sp, #12]
   1fba6:	e767      	b.n	1fa78 <__aeabi_ddiv+0x48>
   1fba8:	2303      	movs	r3, #3
   1fbaa:	46b1      	mov	r9, r6
   1fbac:	9303      	str	r3, [sp, #12]
   1fbae:	260c      	movs	r6, #12
   1fbb0:	e762      	b.n	1fa78 <__aeabi_ddiv+0x48>
   1fbb2:	2a03      	cmp	r2, #3
   1fbb4:	d100      	bne.n	1fbb8 <__aeabi_ddiv+0x188>
   1fbb6:	e25c      	b.n	20072 <__aeabi_ddiv+0x642>
   1fbb8:	9b01      	ldr	r3, [sp, #4]
   1fbba:	2a01      	cmp	r2, #1
   1fbbc:	d000      	beq.n	1fbc0 <__aeabi_ddiv+0x190>
   1fbbe:	e1e4      	b.n	1ff8a <__aeabi_ddiv+0x55a>
   1fbc0:	4013      	ands	r3, r2
   1fbc2:	469c      	mov	ip, r3
   1fbc4:	2300      	movs	r3, #0
   1fbc6:	2400      	movs	r4, #0
   1fbc8:	2200      	movs	r2, #0
   1fbca:	4698      	mov	r8, r3
   1fbcc:	2100      	movs	r1, #0
   1fbce:	0312      	lsls	r2, r2, #12
   1fbd0:	0b13      	lsrs	r3, r2, #12
   1fbd2:	0d0a      	lsrs	r2, r1, #20
   1fbd4:	0512      	lsls	r2, r2, #20
   1fbd6:	431a      	orrs	r2, r3
   1fbd8:	0523      	lsls	r3, r4, #20
   1fbda:	4c12      	ldr	r4, [pc, #72]	; (1fc24 <__aeabi_ddiv+0x1f4>)
   1fbdc:	4640      	mov	r0, r8
   1fbde:	4022      	ands	r2, r4
   1fbe0:	4313      	orrs	r3, r2
   1fbe2:	4662      	mov	r2, ip
   1fbe4:	005b      	lsls	r3, r3, #1
   1fbe6:	07d2      	lsls	r2, r2, #31
   1fbe8:	085b      	lsrs	r3, r3, #1
   1fbea:	4313      	orrs	r3, r2
   1fbec:	0019      	movs	r1, r3
   1fbee:	b007      	add	sp, #28
   1fbf0:	bc3c      	pop	{r2, r3, r4, r5}
   1fbf2:	4690      	mov	r8, r2
   1fbf4:	4699      	mov	r9, r3
   1fbf6:	46a2      	mov	sl, r4
   1fbf8:	46ab      	mov	fp, r5
   1fbfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fbfc:	2300      	movs	r3, #0
   1fbfe:	2280      	movs	r2, #128	; 0x80
   1fc00:	469c      	mov	ip, r3
   1fc02:	0312      	lsls	r2, r2, #12
   1fc04:	4698      	mov	r8, r3
   1fc06:	4c03      	ldr	r4, [pc, #12]	; (1fc14 <__aeabi_ddiv+0x1e4>)
   1fc08:	e7e0      	b.n	1fbcc <__aeabi_ddiv+0x19c>
   1fc0a:	2300      	movs	r3, #0
   1fc0c:	4c01      	ldr	r4, [pc, #4]	; (1fc14 <__aeabi_ddiv+0x1e4>)
   1fc0e:	2200      	movs	r2, #0
   1fc10:	4698      	mov	r8, r3
   1fc12:	e7db      	b.n	1fbcc <__aeabi_ddiv+0x19c>
   1fc14:	000007ff 	.word	0x000007ff
   1fc18:	fffffc01 	.word	0xfffffc01
   1fc1c:	00027150 	.word	0x00027150
   1fc20:	fffffc0d 	.word	0xfffffc0d
   1fc24:	800fffff 	.word	0x800fffff
   1fc28:	45d9      	cmp	r9, fp
   1fc2a:	d900      	bls.n	1fc2e <__aeabi_ddiv+0x1fe>
   1fc2c:	e139      	b.n	1fea2 <__aeabi_ddiv+0x472>
   1fc2e:	d100      	bne.n	1fc32 <__aeabi_ddiv+0x202>
   1fc30:	e134      	b.n	1fe9c <__aeabi_ddiv+0x46c>
   1fc32:	2300      	movs	r3, #0
   1fc34:	4646      	mov	r6, r8
   1fc36:	464d      	mov	r5, r9
   1fc38:	469a      	mov	sl, r3
   1fc3a:	3c01      	subs	r4, #1
   1fc3c:	465b      	mov	r3, fp
   1fc3e:	0e0a      	lsrs	r2, r1, #24
   1fc40:	021b      	lsls	r3, r3, #8
   1fc42:	431a      	orrs	r2, r3
   1fc44:	020b      	lsls	r3, r1, #8
   1fc46:	0c17      	lsrs	r7, r2, #16
   1fc48:	9303      	str	r3, [sp, #12]
   1fc4a:	0413      	lsls	r3, r2, #16
   1fc4c:	0c1b      	lsrs	r3, r3, #16
   1fc4e:	0039      	movs	r1, r7
   1fc50:	0028      	movs	r0, r5
   1fc52:	4690      	mov	r8, r2
   1fc54:	9301      	str	r3, [sp, #4]
   1fc56:	f7ff fa3b 	bl	1f0d0 <__udivsi3>
   1fc5a:	0002      	movs	r2, r0
   1fc5c:	9b01      	ldr	r3, [sp, #4]
   1fc5e:	4683      	mov	fp, r0
   1fc60:	435a      	muls	r2, r3
   1fc62:	0028      	movs	r0, r5
   1fc64:	0039      	movs	r1, r7
   1fc66:	4691      	mov	r9, r2
   1fc68:	f7ff fab8 	bl	1f1dc <__aeabi_uidivmod>
   1fc6c:	0c35      	lsrs	r5, r6, #16
   1fc6e:	0409      	lsls	r1, r1, #16
   1fc70:	430d      	orrs	r5, r1
   1fc72:	45a9      	cmp	r9, r5
   1fc74:	d90d      	bls.n	1fc92 <__aeabi_ddiv+0x262>
   1fc76:	465b      	mov	r3, fp
   1fc78:	4445      	add	r5, r8
   1fc7a:	3b01      	subs	r3, #1
   1fc7c:	45a8      	cmp	r8, r5
   1fc7e:	d900      	bls.n	1fc82 <__aeabi_ddiv+0x252>
   1fc80:	e13a      	b.n	1fef8 <__aeabi_ddiv+0x4c8>
   1fc82:	45a9      	cmp	r9, r5
   1fc84:	d800      	bhi.n	1fc88 <__aeabi_ddiv+0x258>
   1fc86:	e137      	b.n	1fef8 <__aeabi_ddiv+0x4c8>
   1fc88:	2302      	movs	r3, #2
   1fc8a:	425b      	negs	r3, r3
   1fc8c:	469c      	mov	ip, r3
   1fc8e:	4445      	add	r5, r8
   1fc90:	44e3      	add	fp, ip
   1fc92:	464b      	mov	r3, r9
   1fc94:	1aeb      	subs	r3, r5, r3
   1fc96:	0039      	movs	r1, r7
   1fc98:	0018      	movs	r0, r3
   1fc9a:	9304      	str	r3, [sp, #16]
   1fc9c:	f7ff fa18 	bl	1f0d0 <__udivsi3>
   1fca0:	9b01      	ldr	r3, [sp, #4]
   1fca2:	0005      	movs	r5, r0
   1fca4:	4343      	muls	r3, r0
   1fca6:	0039      	movs	r1, r7
   1fca8:	9804      	ldr	r0, [sp, #16]
   1fcaa:	4699      	mov	r9, r3
   1fcac:	f7ff fa96 	bl	1f1dc <__aeabi_uidivmod>
   1fcb0:	0433      	lsls	r3, r6, #16
   1fcb2:	0409      	lsls	r1, r1, #16
   1fcb4:	0c1b      	lsrs	r3, r3, #16
   1fcb6:	430b      	orrs	r3, r1
   1fcb8:	4599      	cmp	r9, r3
   1fcba:	d909      	bls.n	1fcd0 <__aeabi_ddiv+0x2a0>
   1fcbc:	4443      	add	r3, r8
   1fcbe:	1e6a      	subs	r2, r5, #1
   1fcc0:	4598      	cmp	r8, r3
   1fcc2:	d900      	bls.n	1fcc6 <__aeabi_ddiv+0x296>
   1fcc4:	e11a      	b.n	1fefc <__aeabi_ddiv+0x4cc>
   1fcc6:	4599      	cmp	r9, r3
   1fcc8:	d800      	bhi.n	1fccc <__aeabi_ddiv+0x29c>
   1fcca:	e117      	b.n	1fefc <__aeabi_ddiv+0x4cc>
   1fccc:	3d02      	subs	r5, #2
   1fcce:	4443      	add	r3, r8
   1fcd0:	464a      	mov	r2, r9
   1fcd2:	1a9b      	subs	r3, r3, r2
   1fcd4:	465a      	mov	r2, fp
   1fcd6:	0412      	lsls	r2, r2, #16
   1fcd8:	432a      	orrs	r2, r5
   1fcda:	9903      	ldr	r1, [sp, #12]
   1fcdc:	4693      	mov	fp, r2
   1fcde:	0c10      	lsrs	r0, r2, #16
   1fce0:	0c0a      	lsrs	r2, r1, #16
   1fce2:	4691      	mov	r9, r2
   1fce4:	0409      	lsls	r1, r1, #16
   1fce6:	465a      	mov	r2, fp
   1fce8:	0c09      	lsrs	r1, r1, #16
   1fcea:	464e      	mov	r6, r9
   1fcec:	000d      	movs	r5, r1
   1fcee:	0412      	lsls	r2, r2, #16
   1fcf0:	0c12      	lsrs	r2, r2, #16
   1fcf2:	4345      	muls	r5, r0
   1fcf4:	9105      	str	r1, [sp, #20]
   1fcf6:	4351      	muls	r1, r2
   1fcf8:	4372      	muls	r2, r6
   1fcfa:	4370      	muls	r0, r6
   1fcfc:	1952      	adds	r2, r2, r5
   1fcfe:	0c0e      	lsrs	r6, r1, #16
   1fd00:	18b2      	adds	r2, r6, r2
   1fd02:	4295      	cmp	r5, r2
   1fd04:	d903      	bls.n	1fd0e <__aeabi_ddiv+0x2de>
   1fd06:	2580      	movs	r5, #128	; 0x80
   1fd08:	026d      	lsls	r5, r5, #9
   1fd0a:	46ac      	mov	ip, r5
   1fd0c:	4460      	add	r0, ip
   1fd0e:	0c15      	lsrs	r5, r2, #16
   1fd10:	0409      	lsls	r1, r1, #16
   1fd12:	0412      	lsls	r2, r2, #16
   1fd14:	0c09      	lsrs	r1, r1, #16
   1fd16:	1828      	adds	r0, r5, r0
   1fd18:	1852      	adds	r2, r2, r1
   1fd1a:	4283      	cmp	r3, r0
   1fd1c:	d200      	bcs.n	1fd20 <__aeabi_ddiv+0x2f0>
   1fd1e:	e0ce      	b.n	1febe <__aeabi_ddiv+0x48e>
   1fd20:	d100      	bne.n	1fd24 <__aeabi_ddiv+0x2f4>
   1fd22:	e0c8      	b.n	1feb6 <__aeabi_ddiv+0x486>
   1fd24:	1a1d      	subs	r5, r3, r0
   1fd26:	4653      	mov	r3, sl
   1fd28:	1a9e      	subs	r6, r3, r2
   1fd2a:	45b2      	cmp	sl, r6
   1fd2c:	4192      	sbcs	r2, r2
   1fd2e:	4252      	negs	r2, r2
   1fd30:	1aab      	subs	r3, r5, r2
   1fd32:	469a      	mov	sl, r3
   1fd34:	4598      	cmp	r8, r3
   1fd36:	d100      	bne.n	1fd3a <__aeabi_ddiv+0x30a>
   1fd38:	e117      	b.n	1ff6a <__aeabi_ddiv+0x53a>
   1fd3a:	0039      	movs	r1, r7
   1fd3c:	0018      	movs	r0, r3
   1fd3e:	f7ff f9c7 	bl	1f0d0 <__udivsi3>
   1fd42:	9b01      	ldr	r3, [sp, #4]
   1fd44:	0005      	movs	r5, r0
   1fd46:	4343      	muls	r3, r0
   1fd48:	0039      	movs	r1, r7
   1fd4a:	4650      	mov	r0, sl
   1fd4c:	9304      	str	r3, [sp, #16]
   1fd4e:	f7ff fa45 	bl	1f1dc <__aeabi_uidivmod>
   1fd52:	9804      	ldr	r0, [sp, #16]
   1fd54:	040b      	lsls	r3, r1, #16
   1fd56:	0c31      	lsrs	r1, r6, #16
   1fd58:	4319      	orrs	r1, r3
   1fd5a:	4288      	cmp	r0, r1
   1fd5c:	d909      	bls.n	1fd72 <__aeabi_ddiv+0x342>
   1fd5e:	4441      	add	r1, r8
   1fd60:	1e6b      	subs	r3, r5, #1
   1fd62:	4588      	cmp	r8, r1
   1fd64:	d900      	bls.n	1fd68 <__aeabi_ddiv+0x338>
   1fd66:	e107      	b.n	1ff78 <__aeabi_ddiv+0x548>
   1fd68:	4288      	cmp	r0, r1
   1fd6a:	d800      	bhi.n	1fd6e <__aeabi_ddiv+0x33e>
   1fd6c:	e104      	b.n	1ff78 <__aeabi_ddiv+0x548>
   1fd6e:	3d02      	subs	r5, #2
   1fd70:	4441      	add	r1, r8
   1fd72:	9b04      	ldr	r3, [sp, #16]
   1fd74:	1acb      	subs	r3, r1, r3
   1fd76:	0018      	movs	r0, r3
   1fd78:	0039      	movs	r1, r7
   1fd7a:	9304      	str	r3, [sp, #16]
   1fd7c:	f7ff f9a8 	bl	1f0d0 <__udivsi3>
   1fd80:	9b01      	ldr	r3, [sp, #4]
   1fd82:	4682      	mov	sl, r0
   1fd84:	4343      	muls	r3, r0
   1fd86:	0039      	movs	r1, r7
   1fd88:	9804      	ldr	r0, [sp, #16]
   1fd8a:	9301      	str	r3, [sp, #4]
   1fd8c:	f7ff fa26 	bl	1f1dc <__aeabi_uidivmod>
   1fd90:	9801      	ldr	r0, [sp, #4]
   1fd92:	040b      	lsls	r3, r1, #16
   1fd94:	0431      	lsls	r1, r6, #16
   1fd96:	0c09      	lsrs	r1, r1, #16
   1fd98:	4319      	orrs	r1, r3
   1fd9a:	4288      	cmp	r0, r1
   1fd9c:	d90d      	bls.n	1fdba <__aeabi_ddiv+0x38a>
   1fd9e:	4653      	mov	r3, sl
   1fda0:	4441      	add	r1, r8
   1fda2:	3b01      	subs	r3, #1
   1fda4:	4588      	cmp	r8, r1
   1fda6:	d900      	bls.n	1fdaa <__aeabi_ddiv+0x37a>
   1fda8:	e0e8      	b.n	1ff7c <__aeabi_ddiv+0x54c>
   1fdaa:	4288      	cmp	r0, r1
   1fdac:	d800      	bhi.n	1fdb0 <__aeabi_ddiv+0x380>
   1fdae:	e0e5      	b.n	1ff7c <__aeabi_ddiv+0x54c>
   1fdb0:	2302      	movs	r3, #2
   1fdb2:	425b      	negs	r3, r3
   1fdb4:	469c      	mov	ip, r3
   1fdb6:	4441      	add	r1, r8
   1fdb8:	44e2      	add	sl, ip
   1fdba:	9b01      	ldr	r3, [sp, #4]
   1fdbc:	042d      	lsls	r5, r5, #16
   1fdbe:	1ace      	subs	r6, r1, r3
   1fdc0:	4651      	mov	r1, sl
   1fdc2:	4329      	orrs	r1, r5
   1fdc4:	9d05      	ldr	r5, [sp, #20]
   1fdc6:	464f      	mov	r7, r9
   1fdc8:	002a      	movs	r2, r5
   1fdca:	040b      	lsls	r3, r1, #16
   1fdcc:	0c08      	lsrs	r0, r1, #16
   1fdce:	0c1b      	lsrs	r3, r3, #16
   1fdd0:	435a      	muls	r2, r3
   1fdd2:	4345      	muls	r5, r0
   1fdd4:	437b      	muls	r3, r7
   1fdd6:	4378      	muls	r0, r7
   1fdd8:	195b      	adds	r3, r3, r5
   1fdda:	0c17      	lsrs	r7, r2, #16
   1fddc:	18fb      	adds	r3, r7, r3
   1fdde:	429d      	cmp	r5, r3
   1fde0:	d903      	bls.n	1fdea <__aeabi_ddiv+0x3ba>
   1fde2:	2580      	movs	r5, #128	; 0x80
   1fde4:	026d      	lsls	r5, r5, #9
   1fde6:	46ac      	mov	ip, r5
   1fde8:	4460      	add	r0, ip
   1fdea:	0c1d      	lsrs	r5, r3, #16
   1fdec:	0412      	lsls	r2, r2, #16
   1fdee:	041b      	lsls	r3, r3, #16
   1fdf0:	0c12      	lsrs	r2, r2, #16
   1fdf2:	1828      	adds	r0, r5, r0
   1fdf4:	189b      	adds	r3, r3, r2
   1fdf6:	4286      	cmp	r6, r0
   1fdf8:	d200      	bcs.n	1fdfc <__aeabi_ddiv+0x3cc>
   1fdfa:	e093      	b.n	1ff24 <__aeabi_ddiv+0x4f4>
   1fdfc:	d100      	bne.n	1fe00 <__aeabi_ddiv+0x3d0>
   1fdfe:	e08e      	b.n	1ff1e <__aeabi_ddiv+0x4ee>
   1fe00:	2301      	movs	r3, #1
   1fe02:	4319      	orrs	r1, r3
   1fe04:	4ba0      	ldr	r3, [pc, #640]	; (20088 <__aeabi_ddiv+0x658>)
   1fe06:	18e3      	adds	r3, r4, r3
   1fe08:	2b00      	cmp	r3, #0
   1fe0a:	dc00      	bgt.n	1fe0e <__aeabi_ddiv+0x3de>
   1fe0c:	e099      	b.n	1ff42 <__aeabi_ddiv+0x512>
   1fe0e:	074a      	lsls	r2, r1, #29
   1fe10:	d000      	beq.n	1fe14 <__aeabi_ddiv+0x3e4>
   1fe12:	e09e      	b.n	1ff52 <__aeabi_ddiv+0x522>
   1fe14:	465a      	mov	r2, fp
   1fe16:	01d2      	lsls	r2, r2, #7
   1fe18:	d506      	bpl.n	1fe28 <__aeabi_ddiv+0x3f8>
   1fe1a:	465a      	mov	r2, fp
   1fe1c:	4b9b      	ldr	r3, [pc, #620]	; (2008c <__aeabi_ddiv+0x65c>)
   1fe1e:	401a      	ands	r2, r3
   1fe20:	2380      	movs	r3, #128	; 0x80
   1fe22:	4693      	mov	fp, r2
   1fe24:	00db      	lsls	r3, r3, #3
   1fe26:	18e3      	adds	r3, r4, r3
   1fe28:	4a99      	ldr	r2, [pc, #612]	; (20090 <__aeabi_ddiv+0x660>)
   1fe2a:	4293      	cmp	r3, r2
   1fe2c:	dd68      	ble.n	1ff00 <__aeabi_ddiv+0x4d0>
   1fe2e:	2301      	movs	r3, #1
   1fe30:	9a02      	ldr	r2, [sp, #8]
   1fe32:	4c98      	ldr	r4, [pc, #608]	; (20094 <__aeabi_ddiv+0x664>)
   1fe34:	401a      	ands	r2, r3
   1fe36:	2300      	movs	r3, #0
   1fe38:	4694      	mov	ip, r2
   1fe3a:	4698      	mov	r8, r3
   1fe3c:	2200      	movs	r2, #0
   1fe3e:	e6c5      	b.n	1fbcc <__aeabi_ddiv+0x19c>
   1fe40:	2280      	movs	r2, #128	; 0x80
   1fe42:	464b      	mov	r3, r9
   1fe44:	0312      	lsls	r2, r2, #12
   1fe46:	4213      	tst	r3, r2
   1fe48:	d00a      	beq.n	1fe60 <__aeabi_ddiv+0x430>
   1fe4a:	465b      	mov	r3, fp
   1fe4c:	4213      	tst	r3, r2
   1fe4e:	d106      	bne.n	1fe5e <__aeabi_ddiv+0x42e>
   1fe50:	431a      	orrs	r2, r3
   1fe52:	0312      	lsls	r2, r2, #12
   1fe54:	0b12      	lsrs	r2, r2, #12
   1fe56:	46ac      	mov	ip, r5
   1fe58:	4688      	mov	r8, r1
   1fe5a:	4c8e      	ldr	r4, [pc, #568]	; (20094 <__aeabi_ddiv+0x664>)
   1fe5c:	e6b6      	b.n	1fbcc <__aeabi_ddiv+0x19c>
   1fe5e:	464b      	mov	r3, r9
   1fe60:	431a      	orrs	r2, r3
   1fe62:	0312      	lsls	r2, r2, #12
   1fe64:	0b12      	lsrs	r2, r2, #12
   1fe66:	46bc      	mov	ip, r7
   1fe68:	4c8a      	ldr	r4, [pc, #552]	; (20094 <__aeabi_ddiv+0x664>)
   1fe6a:	e6af      	b.n	1fbcc <__aeabi_ddiv+0x19c>
   1fe6c:	0003      	movs	r3, r0
   1fe6e:	465a      	mov	r2, fp
   1fe70:	3b28      	subs	r3, #40	; 0x28
   1fe72:	409a      	lsls	r2, r3
   1fe74:	2300      	movs	r3, #0
   1fe76:	4691      	mov	r9, r2
   1fe78:	4698      	mov	r8, r3
   1fe7a:	e657      	b.n	1fb2c <__aeabi_ddiv+0xfc>
   1fe7c:	4658      	mov	r0, fp
   1fe7e:	f000 ff0d 	bl	20c9c <__clzsi2>
   1fe82:	3020      	adds	r0, #32
   1fe84:	e640      	b.n	1fb08 <__aeabi_ddiv+0xd8>
   1fe86:	0003      	movs	r3, r0
   1fe88:	4652      	mov	r2, sl
   1fe8a:	3b28      	subs	r3, #40	; 0x28
   1fe8c:	409a      	lsls	r2, r3
   1fe8e:	2100      	movs	r1, #0
   1fe90:	4693      	mov	fp, r2
   1fe92:	e677      	b.n	1fb84 <__aeabi_ddiv+0x154>
   1fe94:	f000 ff02 	bl	20c9c <__clzsi2>
   1fe98:	3020      	adds	r0, #32
   1fe9a:	e65f      	b.n	1fb5c <__aeabi_ddiv+0x12c>
   1fe9c:	4588      	cmp	r8, r1
   1fe9e:	d200      	bcs.n	1fea2 <__aeabi_ddiv+0x472>
   1fea0:	e6c7      	b.n	1fc32 <__aeabi_ddiv+0x202>
   1fea2:	464b      	mov	r3, r9
   1fea4:	07de      	lsls	r6, r3, #31
   1fea6:	085d      	lsrs	r5, r3, #1
   1fea8:	4643      	mov	r3, r8
   1feaa:	085b      	lsrs	r3, r3, #1
   1feac:	431e      	orrs	r6, r3
   1feae:	4643      	mov	r3, r8
   1feb0:	07db      	lsls	r3, r3, #31
   1feb2:	469a      	mov	sl, r3
   1feb4:	e6c2      	b.n	1fc3c <__aeabi_ddiv+0x20c>
   1feb6:	2500      	movs	r5, #0
   1feb8:	4592      	cmp	sl, r2
   1feba:	d300      	bcc.n	1febe <__aeabi_ddiv+0x48e>
   1febc:	e733      	b.n	1fd26 <__aeabi_ddiv+0x2f6>
   1febe:	9e03      	ldr	r6, [sp, #12]
   1fec0:	4659      	mov	r1, fp
   1fec2:	46b4      	mov	ip, r6
   1fec4:	44e2      	add	sl, ip
   1fec6:	45b2      	cmp	sl, r6
   1fec8:	41ad      	sbcs	r5, r5
   1feca:	426d      	negs	r5, r5
   1fecc:	4445      	add	r5, r8
   1fece:	18eb      	adds	r3, r5, r3
   1fed0:	3901      	subs	r1, #1
   1fed2:	4598      	cmp	r8, r3
   1fed4:	d207      	bcs.n	1fee6 <__aeabi_ddiv+0x4b6>
   1fed6:	4298      	cmp	r0, r3
   1fed8:	d900      	bls.n	1fedc <__aeabi_ddiv+0x4ac>
   1feda:	e07f      	b.n	1ffdc <__aeabi_ddiv+0x5ac>
   1fedc:	d100      	bne.n	1fee0 <__aeabi_ddiv+0x4b0>
   1fede:	e0bc      	b.n	2005a <__aeabi_ddiv+0x62a>
   1fee0:	1a1d      	subs	r5, r3, r0
   1fee2:	468b      	mov	fp, r1
   1fee4:	e71f      	b.n	1fd26 <__aeabi_ddiv+0x2f6>
   1fee6:	4598      	cmp	r8, r3
   1fee8:	d1fa      	bne.n	1fee0 <__aeabi_ddiv+0x4b0>
   1feea:	9d03      	ldr	r5, [sp, #12]
   1feec:	4555      	cmp	r5, sl
   1feee:	d9f2      	bls.n	1fed6 <__aeabi_ddiv+0x4a6>
   1fef0:	4643      	mov	r3, r8
   1fef2:	468b      	mov	fp, r1
   1fef4:	1a1d      	subs	r5, r3, r0
   1fef6:	e716      	b.n	1fd26 <__aeabi_ddiv+0x2f6>
   1fef8:	469b      	mov	fp, r3
   1fefa:	e6ca      	b.n	1fc92 <__aeabi_ddiv+0x262>
   1fefc:	0015      	movs	r5, r2
   1fefe:	e6e7      	b.n	1fcd0 <__aeabi_ddiv+0x2a0>
   1ff00:	465a      	mov	r2, fp
   1ff02:	08c9      	lsrs	r1, r1, #3
   1ff04:	0752      	lsls	r2, r2, #29
   1ff06:	430a      	orrs	r2, r1
   1ff08:	055b      	lsls	r3, r3, #21
   1ff0a:	4690      	mov	r8, r2
   1ff0c:	0d5c      	lsrs	r4, r3, #21
   1ff0e:	465a      	mov	r2, fp
   1ff10:	2301      	movs	r3, #1
   1ff12:	9902      	ldr	r1, [sp, #8]
   1ff14:	0252      	lsls	r2, r2, #9
   1ff16:	4019      	ands	r1, r3
   1ff18:	0b12      	lsrs	r2, r2, #12
   1ff1a:	468c      	mov	ip, r1
   1ff1c:	e656      	b.n	1fbcc <__aeabi_ddiv+0x19c>
   1ff1e:	2b00      	cmp	r3, #0
   1ff20:	d100      	bne.n	1ff24 <__aeabi_ddiv+0x4f4>
   1ff22:	e76f      	b.n	1fe04 <__aeabi_ddiv+0x3d4>
   1ff24:	4446      	add	r6, r8
   1ff26:	1e4a      	subs	r2, r1, #1
   1ff28:	45b0      	cmp	r8, r6
   1ff2a:	d929      	bls.n	1ff80 <__aeabi_ddiv+0x550>
   1ff2c:	0011      	movs	r1, r2
   1ff2e:	4286      	cmp	r6, r0
   1ff30:	d000      	beq.n	1ff34 <__aeabi_ddiv+0x504>
   1ff32:	e765      	b.n	1fe00 <__aeabi_ddiv+0x3d0>
   1ff34:	9a03      	ldr	r2, [sp, #12]
   1ff36:	4293      	cmp	r3, r2
   1ff38:	d000      	beq.n	1ff3c <__aeabi_ddiv+0x50c>
   1ff3a:	e761      	b.n	1fe00 <__aeabi_ddiv+0x3d0>
   1ff3c:	e762      	b.n	1fe04 <__aeabi_ddiv+0x3d4>
   1ff3e:	2101      	movs	r1, #1
   1ff40:	4249      	negs	r1, r1
   1ff42:	2001      	movs	r0, #1
   1ff44:	1ac2      	subs	r2, r0, r3
   1ff46:	2a38      	cmp	r2, #56	; 0x38
   1ff48:	dd21      	ble.n	1ff8e <__aeabi_ddiv+0x55e>
   1ff4a:	9b02      	ldr	r3, [sp, #8]
   1ff4c:	4003      	ands	r3, r0
   1ff4e:	469c      	mov	ip, r3
   1ff50:	e638      	b.n	1fbc4 <__aeabi_ddiv+0x194>
   1ff52:	220f      	movs	r2, #15
   1ff54:	400a      	ands	r2, r1
   1ff56:	2a04      	cmp	r2, #4
   1ff58:	d100      	bne.n	1ff5c <__aeabi_ddiv+0x52c>
   1ff5a:	e75b      	b.n	1fe14 <__aeabi_ddiv+0x3e4>
   1ff5c:	000a      	movs	r2, r1
   1ff5e:	1d11      	adds	r1, r2, #4
   1ff60:	4291      	cmp	r1, r2
   1ff62:	4192      	sbcs	r2, r2
   1ff64:	4252      	negs	r2, r2
   1ff66:	4493      	add	fp, r2
   1ff68:	e754      	b.n	1fe14 <__aeabi_ddiv+0x3e4>
   1ff6a:	4b47      	ldr	r3, [pc, #284]	; (20088 <__aeabi_ddiv+0x658>)
   1ff6c:	18e3      	adds	r3, r4, r3
   1ff6e:	2b00      	cmp	r3, #0
   1ff70:	dde5      	ble.n	1ff3e <__aeabi_ddiv+0x50e>
   1ff72:	2201      	movs	r2, #1
   1ff74:	4252      	negs	r2, r2
   1ff76:	e7f2      	b.n	1ff5e <__aeabi_ddiv+0x52e>
   1ff78:	001d      	movs	r5, r3
   1ff7a:	e6fa      	b.n	1fd72 <__aeabi_ddiv+0x342>
   1ff7c:	469a      	mov	sl, r3
   1ff7e:	e71c      	b.n	1fdba <__aeabi_ddiv+0x38a>
   1ff80:	42b0      	cmp	r0, r6
   1ff82:	d839      	bhi.n	1fff8 <__aeabi_ddiv+0x5c8>
   1ff84:	d06e      	beq.n	20064 <__aeabi_ddiv+0x634>
   1ff86:	0011      	movs	r1, r2
   1ff88:	e73a      	b.n	1fe00 <__aeabi_ddiv+0x3d0>
   1ff8a:	9302      	str	r3, [sp, #8]
   1ff8c:	e73a      	b.n	1fe04 <__aeabi_ddiv+0x3d4>
   1ff8e:	2a1f      	cmp	r2, #31
   1ff90:	dc3c      	bgt.n	2000c <__aeabi_ddiv+0x5dc>
   1ff92:	2320      	movs	r3, #32
   1ff94:	1a9b      	subs	r3, r3, r2
   1ff96:	000c      	movs	r4, r1
   1ff98:	4658      	mov	r0, fp
   1ff9a:	4099      	lsls	r1, r3
   1ff9c:	4098      	lsls	r0, r3
   1ff9e:	1e4b      	subs	r3, r1, #1
   1ffa0:	4199      	sbcs	r1, r3
   1ffa2:	465b      	mov	r3, fp
   1ffa4:	40d4      	lsrs	r4, r2
   1ffa6:	40d3      	lsrs	r3, r2
   1ffa8:	4320      	orrs	r0, r4
   1ffaa:	4308      	orrs	r0, r1
   1ffac:	001a      	movs	r2, r3
   1ffae:	0743      	lsls	r3, r0, #29
   1ffb0:	d009      	beq.n	1ffc6 <__aeabi_ddiv+0x596>
   1ffb2:	230f      	movs	r3, #15
   1ffb4:	4003      	ands	r3, r0
   1ffb6:	2b04      	cmp	r3, #4
   1ffb8:	d005      	beq.n	1ffc6 <__aeabi_ddiv+0x596>
   1ffba:	0001      	movs	r1, r0
   1ffbc:	1d08      	adds	r0, r1, #4
   1ffbe:	4288      	cmp	r0, r1
   1ffc0:	419b      	sbcs	r3, r3
   1ffc2:	425b      	negs	r3, r3
   1ffc4:	18d2      	adds	r2, r2, r3
   1ffc6:	0213      	lsls	r3, r2, #8
   1ffc8:	d53a      	bpl.n	20040 <__aeabi_ddiv+0x610>
   1ffca:	2301      	movs	r3, #1
   1ffcc:	9a02      	ldr	r2, [sp, #8]
   1ffce:	2401      	movs	r4, #1
   1ffd0:	401a      	ands	r2, r3
   1ffd2:	2300      	movs	r3, #0
   1ffd4:	4694      	mov	ip, r2
   1ffd6:	4698      	mov	r8, r3
   1ffd8:	2200      	movs	r2, #0
   1ffda:	e5f7      	b.n	1fbcc <__aeabi_ddiv+0x19c>
   1ffdc:	2102      	movs	r1, #2
   1ffde:	4249      	negs	r1, r1
   1ffe0:	468c      	mov	ip, r1
   1ffe2:	9d03      	ldr	r5, [sp, #12]
   1ffe4:	44e3      	add	fp, ip
   1ffe6:	46ac      	mov	ip, r5
   1ffe8:	44e2      	add	sl, ip
   1ffea:	45aa      	cmp	sl, r5
   1ffec:	41ad      	sbcs	r5, r5
   1ffee:	426d      	negs	r5, r5
   1fff0:	4445      	add	r5, r8
   1fff2:	18ed      	adds	r5, r5, r3
   1fff4:	1a2d      	subs	r5, r5, r0
   1fff6:	e696      	b.n	1fd26 <__aeabi_ddiv+0x2f6>
   1fff8:	1e8a      	subs	r2, r1, #2
   1fffa:	9903      	ldr	r1, [sp, #12]
   1fffc:	004d      	lsls	r5, r1, #1
   1fffe:	428d      	cmp	r5, r1
   20000:	4189      	sbcs	r1, r1
   20002:	4249      	negs	r1, r1
   20004:	4441      	add	r1, r8
   20006:	1876      	adds	r6, r6, r1
   20008:	9503      	str	r5, [sp, #12]
   2000a:	e78f      	b.n	1ff2c <__aeabi_ddiv+0x4fc>
   2000c:	201f      	movs	r0, #31
   2000e:	4240      	negs	r0, r0
   20010:	1ac3      	subs	r3, r0, r3
   20012:	4658      	mov	r0, fp
   20014:	40d8      	lsrs	r0, r3
   20016:	0003      	movs	r3, r0
   20018:	2a20      	cmp	r2, #32
   2001a:	d028      	beq.n	2006e <__aeabi_ddiv+0x63e>
   2001c:	2040      	movs	r0, #64	; 0x40
   2001e:	465d      	mov	r5, fp
   20020:	1a82      	subs	r2, r0, r2
   20022:	4095      	lsls	r5, r2
   20024:	4329      	orrs	r1, r5
   20026:	1e4a      	subs	r2, r1, #1
   20028:	4191      	sbcs	r1, r2
   2002a:	4319      	orrs	r1, r3
   2002c:	2307      	movs	r3, #7
   2002e:	2200      	movs	r2, #0
   20030:	400b      	ands	r3, r1
   20032:	d009      	beq.n	20048 <__aeabi_ddiv+0x618>
   20034:	230f      	movs	r3, #15
   20036:	2200      	movs	r2, #0
   20038:	400b      	ands	r3, r1
   2003a:	0008      	movs	r0, r1
   2003c:	2b04      	cmp	r3, #4
   2003e:	d1bd      	bne.n	1ffbc <__aeabi_ddiv+0x58c>
   20040:	0001      	movs	r1, r0
   20042:	0753      	lsls	r3, r2, #29
   20044:	0252      	lsls	r2, r2, #9
   20046:	0b12      	lsrs	r2, r2, #12
   20048:	08c9      	lsrs	r1, r1, #3
   2004a:	4319      	orrs	r1, r3
   2004c:	2301      	movs	r3, #1
   2004e:	4688      	mov	r8, r1
   20050:	9902      	ldr	r1, [sp, #8]
   20052:	2400      	movs	r4, #0
   20054:	4019      	ands	r1, r3
   20056:	468c      	mov	ip, r1
   20058:	e5b8      	b.n	1fbcc <__aeabi_ddiv+0x19c>
   2005a:	4552      	cmp	r2, sl
   2005c:	d8be      	bhi.n	1ffdc <__aeabi_ddiv+0x5ac>
   2005e:	468b      	mov	fp, r1
   20060:	2500      	movs	r5, #0
   20062:	e660      	b.n	1fd26 <__aeabi_ddiv+0x2f6>
   20064:	9d03      	ldr	r5, [sp, #12]
   20066:	429d      	cmp	r5, r3
   20068:	d3c6      	bcc.n	1fff8 <__aeabi_ddiv+0x5c8>
   2006a:	0011      	movs	r1, r2
   2006c:	e762      	b.n	1ff34 <__aeabi_ddiv+0x504>
   2006e:	2500      	movs	r5, #0
   20070:	e7d8      	b.n	20024 <__aeabi_ddiv+0x5f4>
   20072:	2280      	movs	r2, #128	; 0x80
   20074:	465b      	mov	r3, fp
   20076:	0312      	lsls	r2, r2, #12
   20078:	431a      	orrs	r2, r3
   2007a:	9b01      	ldr	r3, [sp, #4]
   2007c:	0312      	lsls	r2, r2, #12
   2007e:	0b12      	lsrs	r2, r2, #12
   20080:	469c      	mov	ip, r3
   20082:	4688      	mov	r8, r1
   20084:	4c03      	ldr	r4, [pc, #12]	; (20094 <__aeabi_ddiv+0x664>)
   20086:	e5a1      	b.n	1fbcc <__aeabi_ddiv+0x19c>
   20088:	000003ff 	.word	0x000003ff
   2008c:	feffffff 	.word	0xfeffffff
   20090:	000007fe 	.word	0x000007fe
   20094:	000007ff 	.word	0x000007ff

00020098 <__aeabi_dmul>:
   20098:	b5f0      	push	{r4, r5, r6, r7, lr}
   2009a:	4657      	mov	r7, sl
   2009c:	4645      	mov	r5, r8
   2009e:	46de      	mov	lr, fp
   200a0:	464e      	mov	r6, r9
   200a2:	b5e0      	push	{r5, r6, r7, lr}
   200a4:	030c      	lsls	r4, r1, #12
   200a6:	4698      	mov	r8, r3
   200a8:	004e      	lsls	r6, r1, #1
   200aa:	0b23      	lsrs	r3, r4, #12
   200ac:	b087      	sub	sp, #28
   200ae:	0007      	movs	r7, r0
   200b0:	4692      	mov	sl, r2
   200b2:	469b      	mov	fp, r3
   200b4:	0d76      	lsrs	r6, r6, #21
   200b6:	0fcd      	lsrs	r5, r1, #31
   200b8:	2e00      	cmp	r6, #0
   200ba:	d06b      	beq.n	20194 <__aeabi_dmul+0xfc>
   200bc:	4b6d      	ldr	r3, [pc, #436]	; (20274 <__aeabi_dmul+0x1dc>)
   200be:	429e      	cmp	r6, r3
   200c0:	d035      	beq.n	2012e <__aeabi_dmul+0x96>
   200c2:	2480      	movs	r4, #128	; 0x80
   200c4:	465b      	mov	r3, fp
   200c6:	0f42      	lsrs	r2, r0, #29
   200c8:	0424      	lsls	r4, r4, #16
   200ca:	00db      	lsls	r3, r3, #3
   200cc:	4314      	orrs	r4, r2
   200ce:	431c      	orrs	r4, r3
   200d0:	00c3      	lsls	r3, r0, #3
   200d2:	4699      	mov	r9, r3
   200d4:	4b68      	ldr	r3, [pc, #416]	; (20278 <__aeabi_dmul+0x1e0>)
   200d6:	46a3      	mov	fp, r4
   200d8:	469c      	mov	ip, r3
   200da:	2300      	movs	r3, #0
   200dc:	2700      	movs	r7, #0
   200de:	4466      	add	r6, ip
   200e0:	9302      	str	r3, [sp, #8]
   200e2:	4643      	mov	r3, r8
   200e4:	031c      	lsls	r4, r3, #12
   200e6:	005a      	lsls	r2, r3, #1
   200e8:	0fdb      	lsrs	r3, r3, #31
   200ea:	4650      	mov	r0, sl
   200ec:	0b24      	lsrs	r4, r4, #12
   200ee:	0d52      	lsrs	r2, r2, #21
   200f0:	4698      	mov	r8, r3
   200f2:	d100      	bne.n	200f6 <__aeabi_dmul+0x5e>
   200f4:	e076      	b.n	201e4 <__aeabi_dmul+0x14c>
   200f6:	4b5f      	ldr	r3, [pc, #380]	; (20274 <__aeabi_dmul+0x1dc>)
   200f8:	429a      	cmp	r2, r3
   200fa:	d06d      	beq.n	201d8 <__aeabi_dmul+0x140>
   200fc:	2380      	movs	r3, #128	; 0x80
   200fe:	0f41      	lsrs	r1, r0, #29
   20100:	041b      	lsls	r3, r3, #16
   20102:	430b      	orrs	r3, r1
   20104:	495c      	ldr	r1, [pc, #368]	; (20278 <__aeabi_dmul+0x1e0>)
   20106:	00e4      	lsls	r4, r4, #3
   20108:	468c      	mov	ip, r1
   2010a:	431c      	orrs	r4, r3
   2010c:	00c3      	lsls	r3, r0, #3
   2010e:	2000      	movs	r0, #0
   20110:	4462      	add	r2, ip
   20112:	4641      	mov	r1, r8
   20114:	18b6      	adds	r6, r6, r2
   20116:	4069      	eors	r1, r5
   20118:	1c72      	adds	r2, r6, #1
   2011a:	9101      	str	r1, [sp, #4]
   2011c:	4694      	mov	ip, r2
   2011e:	4307      	orrs	r7, r0
   20120:	2f0f      	cmp	r7, #15
   20122:	d900      	bls.n	20126 <__aeabi_dmul+0x8e>
   20124:	e0b0      	b.n	20288 <__aeabi_dmul+0x1f0>
   20126:	4a55      	ldr	r2, [pc, #340]	; (2027c <__aeabi_dmul+0x1e4>)
   20128:	00bf      	lsls	r7, r7, #2
   2012a:	59d2      	ldr	r2, [r2, r7]
   2012c:	4697      	mov	pc, r2
   2012e:	465b      	mov	r3, fp
   20130:	4303      	orrs	r3, r0
   20132:	4699      	mov	r9, r3
   20134:	d000      	beq.n	20138 <__aeabi_dmul+0xa0>
   20136:	e087      	b.n	20248 <__aeabi_dmul+0x1b0>
   20138:	2300      	movs	r3, #0
   2013a:	469b      	mov	fp, r3
   2013c:	3302      	adds	r3, #2
   2013e:	2708      	movs	r7, #8
   20140:	9302      	str	r3, [sp, #8]
   20142:	e7ce      	b.n	200e2 <__aeabi_dmul+0x4a>
   20144:	4642      	mov	r2, r8
   20146:	9201      	str	r2, [sp, #4]
   20148:	2802      	cmp	r0, #2
   2014a:	d067      	beq.n	2021c <__aeabi_dmul+0x184>
   2014c:	2803      	cmp	r0, #3
   2014e:	d100      	bne.n	20152 <__aeabi_dmul+0xba>
   20150:	e20e      	b.n	20570 <__aeabi_dmul+0x4d8>
   20152:	2801      	cmp	r0, #1
   20154:	d000      	beq.n	20158 <__aeabi_dmul+0xc0>
   20156:	e162      	b.n	2041e <__aeabi_dmul+0x386>
   20158:	2300      	movs	r3, #0
   2015a:	2400      	movs	r4, #0
   2015c:	2200      	movs	r2, #0
   2015e:	4699      	mov	r9, r3
   20160:	9901      	ldr	r1, [sp, #4]
   20162:	4001      	ands	r1, r0
   20164:	b2cd      	uxtb	r5, r1
   20166:	2100      	movs	r1, #0
   20168:	0312      	lsls	r2, r2, #12
   2016a:	0d0b      	lsrs	r3, r1, #20
   2016c:	0b12      	lsrs	r2, r2, #12
   2016e:	051b      	lsls	r3, r3, #20
   20170:	4313      	orrs	r3, r2
   20172:	4a43      	ldr	r2, [pc, #268]	; (20280 <__aeabi_dmul+0x1e8>)
   20174:	0524      	lsls	r4, r4, #20
   20176:	4013      	ands	r3, r2
   20178:	431c      	orrs	r4, r3
   2017a:	0064      	lsls	r4, r4, #1
   2017c:	07ed      	lsls	r5, r5, #31
   2017e:	0864      	lsrs	r4, r4, #1
   20180:	432c      	orrs	r4, r5
   20182:	4648      	mov	r0, r9
   20184:	0021      	movs	r1, r4
   20186:	b007      	add	sp, #28
   20188:	bc3c      	pop	{r2, r3, r4, r5}
   2018a:	4690      	mov	r8, r2
   2018c:	4699      	mov	r9, r3
   2018e:	46a2      	mov	sl, r4
   20190:	46ab      	mov	fp, r5
   20192:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20194:	4303      	orrs	r3, r0
   20196:	4699      	mov	r9, r3
   20198:	d04f      	beq.n	2023a <__aeabi_dmul+0x1a2>
   2019a:	465b      	mov	r3, fp
   2019c:	2b00      	cmp	r3, #0
   2019e:	d100      	bne.n	201a2 <__aeabi_dmul+0x10a>
   201a0:	e189      	b.n	204b6 <__aeabi_dmul+0x41e>
   201a2:	4658      	mov	r0, fp
   201a4:	f000 fd7a 	bl	20c9c <__clzsi2>
   201a8:	0003      	movs	r3, r0
   201aa:	3b0b      	subs	r3, #11
   201ac:	2b1c      	cmp	r3, #28
   201ae:	dd00      	ble.n	201b2 <__aeabi_dmul+0x11a>
   201b0:	e17a      	b.n	204a8 <__aeabi_dmul+0x410>
   201b2:	221d      	movs	r2, #29
   201b4:	1ad3      	subs	r3, r2, r3
   201b6:	003a      	movs	r2, r7
   201b8:	0001      	movs	r1, r0
   201ba:	465c      	mov	r4, fp
   201bc:	40da      	lsrs	r2, r3
   201be:	3908      	subs	r1, #8
   201c0:	408c      	lsls	r4, r1
   201c2:	0013      	movs	r3, r2
   201c4:	408f      	lsls	r7, r1
   201c6:	4323      	orrs	r3, r4
   201c8:	469b      	mov	fp, r3
   201ca:	46b9      	mov	r9, r7
   201cc:	2300      	movs	r3, #0
   201ce:	4e2d      	ldr	r6, [pc, #180]	; (20284 <__aeabi_dmul+0x1ec>)
   201d0:	2700      	movs	r7, #0
   201d2:	1a36      	subs	r6, r6, r0
   201d4:	9302      	str	r3, [sp, #8]
   201d6:	e784      	b.n	200e2 <__aeabi_dmul+0x4a>
   201d8:	4653      	mov	r3, sl
   201da:	4323      	orrs	r3, r4
   201dc:	d12a      	bne.n	20234 <__aeabi_dmul+0x19c>
   201de:	2400      	movs	r4, #0
   201e0:	2002      	movs	r0, #2
   201e2:	e796      	b.n	20112 <__aeabi_dmul+0x7a>
   201e4:	4653      	mov	r3, sl
   201e6:	4323      	orrs	r3, r4
   201e8:	d020      	beq.n	2022c <__aeabi_dmul+0x194>
   201ea:	2c00      	cmp	r4, #0
   201ec:	d100      	bne.n	201f0 <__aeabi_dmul+0x158>
   201ee:	e157      	b.n	204a0 <__aeabi_dmul+0x408>
   201f0:	0020      	movs	r0, r4
   201f2:	f000 fd53 	bl	20c9c <__clzsi2>
   201f6:	0003      	movs	r3, r0
   201f8:	3b0b      	subs	r3, #11
   201fa:	2b1c      	cmp	r3, #28
   201fc:	dd00      	ble.n	20200 <__aeabi_dmul+0x168>
   201fe:	e149      	b.n	20494 <__aeabi_dmul+0x3fc>
   20200:	211d      	movs	r1, #29
   20202:	1acb      	subs	r3, r1, r3
   20204:	4651      	mov	r1, sl
   20206:	0002      	movs	r2, r0
   20208:	40d9      	lsrs	r1, r3
   2020a:	4653      	mov	r3, sl
   2020c:	3a08      	subs	r2, #8
   2020e:	4094      	lsls	r4, r2
   20210:	4093      	lsls	r3, r2
   20212:	430c      	orrs	r4, r1
   20214:	4a1b      	ldr	r2, [pc, #108]	; (20284 <__aeabi_dmul+0x1ec>)
   20216:	1a12      	subs	r2, r2, r0
   20218:	2000      	movs	r0, #0
   2021a:	e77a      	b.n	20112 <__aeabi_dmul+0x7a>
   2021c:	2501      	movs	r5, #1
   2021e:	9b01      	ldr	r3, [sp, #4]
   20220:	4c14      	ldr	r4, [pc, #80]	; (20274 <__aeabi_dmul+0x1dc>)
   20222:	401d      	ands	r5, r3
   20224:	2300      	movs	r3, #0
   20226:	2200      	movs	r2, #0
   20228:	4699      	mov	r9, r3
   2022a:	e79c      	b.n	20166 <__aeabi_dmul+0xce>
   2022c:	2400      	movs	r4, #0
   2022e:	2200      	movs	r2, #0
   20230:	2001      	movs	r0, #1
   20232:	e76e      	b.n	20112 <__aeabi_dmul+0x7a>
   20234:	4653      	mov	r3, sl
   20236:	2003      	movs	r0, #3
   20238:	e76b      	b.n	20112 <__aeabi_dmul+0x7a>
   2023a:	2300      	movs	r3, #0
   2023c:	469b      	mov	fp, r3
   2023e:	3301      	adds	r3, #1
   20240:	2704      	movs	r7, #4
   20242:	2600      	movs	r6, #0
   20244:	9302      	str	r3, [sp, #8]
   20246:	e74c      	b.n	200e2 <__aeabi_dmul+0x4a>
   20248:	2303      	movs	r3, #3
   2024a:	4681      	mov	r9, r0
   2024c:	270c      	movs	r7, #12
   2024e:	9302      	str	r3, [sp, #8]
   20250:	e747      	b.n	200e2 <__aeabi_dmul+0x4a>
   20252:	2280      	movs	r2, #128	; 0x80
   20254:	2300      	movs	r3, #0
   20256:	2500      	movs	r5, #0
   20258:	0312      	lsls	r2, r2, #12
   2025a:	4699      	mov	r9, r3
   2025c:	4c05      	ldr	r4, [pc, #20]	; (20274 <__aeabi_dmul+0x1dc>)
   2025e:	e782      	b.n	20166 <__aeabi_dmul+0xce>
   20260:	465c      	mov	r4, fp
   20262:	464b      	mov	r3, r9
   20264:	9802      	ldr	r0, [sp, #8]
   20266:	e76f      	b.n	20148 <__aeabi_dmul+0xb0>
   20268:	465c      	mov	r4, fp
   2026a:	464b      	mov	r3, r9
   2026c:	9501      	str	r5, [sp, #4]
   2026e:	9802      	ldr	r0, [sp, #8]
   20270:	e76a      	b.n	20148 <__aeabi_dmul+0xb0>
   20272:	46c0      	nop			; (mov r8, r8)
   20274:	000007ff 	.word	0x000007ff
   20278:	fffffc01 	.word	0xfffffc01
   2027c:	00027190 	.word	0x00027190
   20280:	800fffff 	.word	0x800fffff
   20284:	fffffc0d 	.word	0xfffffc0d
   20288:	464a      	mov	r2, r9
   2028a:	4649      	mov	r1, r9
   2028c:	0c17      	lsrs	r7, r2, #16
   2028e:	0c1a      	lsrs	r2, r3, #16
   20290:	041b      	lsls	r3, r3, #16
   20292:	0c1b      	lsrs	r3, r3, #16
   20294:	0408      	lsls	r0, r1, #16
   20296:	0019      	movs	r1, r3
   20298:	0c00      	lsrs	r0, r0, #16
   2029a:	4341      	muls	r1, r0
   2029c:	0015      	movs	r5, r2
   2029e:	4688      	mov	r8, r1
   202a0:	0019      	movs	r1, r3
   202a2:	437d      	muls	r5, r7
   202a4:	4379      	muls	r1, r7
   202a6:	9503      	str	r5, [sp, #12]
   202a8:	4689      	mov	r9, r1
   202aa:	0029      	movs	r1, r5
   202ac:	0015      	movs	r5, r2
   202ae:	4345      	muls	r5, r0
   202b0:	444d      	add	r5, r9
   202b2:	9502      	str	r5, [sp, #8]
   202b4:	4645      	mov	r5, r8
   202b6:	0c2d      	lsrs	r5, r5, #16
   202b8:	46aa      	mov	sl, r5
   202ba:	9d02      	ldr	r5, [sp, #8]
   202bc:	4455      	add	r5, sl
   202be:	45a9      	cmp	r9, r5
   202c0:	d906      	bls.n	202d0 <__aeabi_dmul+0x238>
   202c2:	468a      	mov	sl, r1
   202c4:	2180      	movs	r1, #128	; 0x80
   202c6:	0249      	lsls	r1, r1, #9
   202c8:	4689      	mov	r9, r1
   202ca:	44ca      	add	sl, r9
   202cc:	4651      	mov	r1, sl
   202ce:	9103      	str	r1, [sp, #12]
   202d0:	0c29      	lsrs	r1, r5, #16
   202d2:	9104      	str	r1, [sp, #16]
   202d4:	4641      	mov	r1, r8
   202d6:	0409      	lsls	r1, r1, #16
   202d8:	042d      	lsls	r5, r5, #16
   202da:	0c09      	lsrs	r1, r1, #16
   202dc:	4688      	mov	r8, r1
   202de:	0029      	movs	r1, r5
   202e0:	0c25      	lsrs	r5, r4, #16
   202e2:	0424      	lsls	r4, r4, #16
   202e4:	4441      	add	r1, r8
   202e6:	0c24      	lsrs	r4, r4, #16
   202e8:	9105      	str	r1, [sp, #20]
   202ea:	0021      	movs	r1, r4
   202ec:	4341      	muls	r1, r0
   202ee:	4688      	mov	r8, r1
   202f0:	0021      	movs	r1, r4
   202f2:	4379      	muls	r1, r7
   202f4:	468a      	mov	sl, r1
   202f6:	4368      	muls	r0, r5
   202f8:	4641      	mov	r1, r8
   202fa:	4450      	add	r0, sl
   202fc:	4681      	mov	r9, r0
   202fe:	0c08      	lsrs	r0, r1, #16
   20300:	4448      	add	r0, r9
   20302:	436f      	muls	r7, r5
   20304:	4582      	cmp	sl, r0
   20306:	d903      	bls.n	20310 <__aeabi_dmul+0x278>
   20308:	2180      	movs	r1, #128	; 0x80
   2030a:	0249      	lsls	r1, r1, #9
   2030c:	4689      	mov	r9, r1
   2030e:	444f      	add	r7, r9
   20310:	0c01      	lsrs	r1, r0, #16
   20312:	4689      	mov	r9, r1
   20314:	0039      	movs	r1, r7
   20316:	4449      	add	r1, r9
   20318:	9102      	str	r1, [sp, #8]
   2031a:	4641      	mov	r1, r8
   2031c:	040f      	lsls	r7, r1, #16
   2031e:	9904      	ldr	r1, [sp, #16]
   20320:	0c3f      	lsrs	r7, r7, #16
   20322:	4688      	mov	r8, r1
   20324:	0400      	lsls	r0, r0, #16
   20326:	19c0      	adds	r0, r0, r7
   20328:	4480      	add	r8, r0
   2032a:	4641      	mov	r1, r8
   2032c:	9104      	str	r1, [sp, #16]
   2032e:	4659      	mov	r1, fp
   20330:	0c0f      	lsrs	r7, r1, #16
   20332:	0409      	lsls	r1, r1, #16
   20334:	0c09      	lsrs	r1, r1, #16
   20336:	4688      	mov	r8, r1
   20338:	4359      	muls	r1, r3
   2033a:	468a      	mov	sl, r1
   2033c:	0039      	movs	r1, r7
   2033e:	4351      	muls	r1, r2
   20340:	4689      	mov	r9, r1
   20342:	4641      	mov	r1, r8
   20344:	434a      	muls	r2, r1
   20346:	4651      	mov	r1, sl
   20348:	0c09      	lsrs	r1, r1, #16
   2034a:	468b      	mov	fp, r1
   2034c:	437b      	muls	r3, r7
   2034e:	18d2      	adds	r2, r2, r3
   20350:	445a      	add	r2, fp
   20352:	4293      	cmp	r3, r2
   20354:	d903      	bls.n	2035e <__aeabi_dmul+0x2c6>
   20356:	2380      	movs	r3, #128	; 0x80
   20358:	025b      	lsls	r3, r3, #9
   2035a:	469b      	mov	fp, r3
   2035c:	44d9      	add	r9, fp
   2035e:	4651      	mov	r1, sl
   20360:	0409      	lsls	r1, r1, #16
   20362:	0c09      	lsrs	r1, r1, #16
   20364:	468a      	mov	sl, r1
   20366:	4641      	mov	r1, r8
   20368:	4361      	muls	r1, r4
   2036a:	437c      	muls	r4, r7
   2036c:	0c13      	lsrs	r3, r2, #16
   2036e:	0412      	lsls	r2, r2, #16
   20370:	444b      	add	r3, r9
   20372:	4452      	add	r2, sl
   20374:	46a1      	mov	r9, r4
   20376:	468a      	mov	sl, r1
   20378:	003c      	movs	r4, r7
   2037a:	4641      	mov	r1, r8
   2037c:	436c      	muls	r4, r5
   2037e:	434d      	muls	r5, r1
   20380:	4651      	mov	r1, sl
   20382:	444d      	add	r5, r9
   20384:	0c0f      	lsrs	r7, r1, #16
   20386:	197d      	adds	r5, r7, r5
   20388:	45a9      	cmp	r9, r5
   2038a:	d903      	bls.n	20394 <__aeabi_dmul+0x2fc>
   2038c:	2180      	movs	r1, #128	; 0x80
   2038e:	0249      	lsls	r1, r1, #9
   20390:	4688      	mov	r8, r1
   20392:	4444      	add	r4, r8
   20394:	9f04      	ldr	r7, [sp, #16]
   20396:	9903      	ldr	r1, [sp, #12]
   20398:	46b8      	mov	r8, r7
   2039a:	4441      	add	r1, r8
   2039c:	468b      	mov	fp, r1
   2039e:	4583      	cmp	fp, r0
   203a0:	4180      	sbcs	r0, r0
   203a2:	4241      	negs	r1, r0
   203a4:	4688      	mov	r8, r1
   203a6:	4651      	mov	r1, sl
   203a8:	0408      	lsls	r0, r1, #16
   203aa:	042f      	lsls	r7, r5, #16
   203ac:	0c00      	lsrs	r0, r0, #16
   203ae:	183f      	adds	r7, r7, r0
   203b0:	4658      	mov	r0, fp
   203b2:	9902      	ldr	r1, [sp, #8]
   203b4:	1810      	adds	r0, r2, r0
   203b6:	4689      	mov	r9, r1
   203b8:	4290      	cmp	r0, r2
   203ba:	4192      	sbcs	r2, r2
   203bc:	444f      	add	r7, r9
   203be:	46ba      	mov	sl, r7
   203c0:	4252      	negs	r2, r2
   203c2:	4699      	mov	r9, r3
   203c4:	4693      	mov	fp, r2
   203c6:	44c2      	add	sl, r8
   203c8:	44d1      	add	r9, sl
   203ca:	44cb      	add	fp, r9
   203cc:	428f      	cmp	r7, r1
   203ce:	41bf      	sbcs	r7, r7
   203d0:	45c2      	cmp	sl, r8
   203d2:	4189      	sbcs	r1, r1
   203d4:	4599      	cmp	r9, r3
   203d6:	419b      	sbcs	r3, r3
   203d8:	4593      	cmp	fp, r2
   203da:	4192      	sbcs	r2, r2
   203dc:	427f      	negs	r7, r7
   203de:	4249      	negs	r1, r1
   203e0:	0c2d      	lsrs	r5, r5, #16
   203e2:	4252      	negs	r2, r2
   203e4:	430f      	orrs	r7, r1
   203e6:	425b      	negs	r3, r3
   203e8:	4313      	orrs	r3, r2
   203ea:	197f      	adds	r7, r7, r5
   203ec:	18ff      	adds	r7, r7, r3
   203ee:	465b      	mov	r3, fp
   203f0:	193c      	adds	r4, r7, r4
   203f2:	0ddb      	lsrs	r3, r3, #23
   203f4:	9a05      	ldr	r2, [sp, #20]
   203f6:	0264      	lsls	r4, r4, #9
   203f8:	431c      	orrs	r4, r3
   203fa:	0243      	lsls	r3, r0, #9
   203fc:	4313      	orrs	r3, r2
   203fe:	1e5d      	subs	r5, r3, #1
   20400:	41ab      	sbcs	r3, r5
   20402:	465a      	mov	r2, fp
   20404:	0dc0      	lsrs	r0, r0, #23
   20406:	4303      	orrs	r3, r0
   20408:	0252      	lsls	r2, r2, #9
   2040a:	4313      	orrs	r3, r2
   2040c:	01e2      	lsls	r2, r4, #7
   2040e:	d556      	bpl.n	204be <__aeabi_dmul+0x426>
   20410:	2001      	movs	r0, #1
   20412:	085a      	lsrs	r2, r3, #1
   20414:	4003      	ands	r3, r0
   20416:	4313      	orrs	r3, r2
   20418:	07e2      	lsls	r2, r4, #31
   2041a:	4313      	orrs	r3, r2
   2041c:	0864      	lsrs	r4, r4, #1
   2041e:	485a      	ldr	r0, [pc, #360]	; (20588 <__aeabi_dmul+0x4f0>)
   20420:	4460      	add	r0, ip
   20422:	2800      	cmp	r0, #0
   20424:	dd4d      	ble.n	204c2 <__aeabi_dmul+0x42a>
   20426:	075a      	lsls	r2, r3, #29
   20428:	d009      	beq.n	2043e <__aeabi_dmul+0x3a6>
   2042a:	220f      	movs	r2, #15
   2042c:	401a      	ands	r2, r3
   2042e:	2a04      	cmp	r2, #4
   20430:	d005      	beq.n	2043e <__aeabi_dmul+0x3a6>
   20432:	1d1a      	adds	r2, r3, #4
   20434:	429a      	cmp	r2, r3
   20436:	419b      	sbcs	r3, r3
   20438:	425b      	negs	r3, r3
   2043a:	18e4      	adds	r4, r4, r3
   2043c:	0013      	movs	r3, r2
   2043e:	01e2      	lsls	r2, r4, #7
   20440:	d504      	bpl.n	2044c <__aeabi_dmul+0x3b4>
   20442:	2080      	movs	r0, #128	; 0x80
   20444:	4a51      	ldr	r2, [pc, #324]	; (2058c <__aeabi_dmul+0x4f4>)
   20446:	00c0      	lsls	r0, r0, #3
   20448:	4014      	ands	r4, r2
   2044a:	4460      	add	r0, ip
   2044c:	4a50      	ldr	r2, [pc, #320]	; (20590 <__aeabi_dmul+0x4f8>)
   2044e:	4290      	cmp	r0, r2
   20450:	dd00      	ble.n	20454 <__aeabi_dmul+0x3bc>
   20452:	e6e3      	b.n	2021c <__aeabi_dmul+0x184>
   20454:	2501      	movs	r5, #1
   20456:	08db      	lsrs	r3, r3, #3
   20458:	0762      	lsls	r2, r4, #29
   2045a:	431a      	orrs	r2, r3
   2045c:	0264      	lsls	r4, r4, #9
   2045e:	9b01      	ldr	r3, [sp, #4]
   20460:	4691      	mov	r9, r2
   20462:	0b22      	lsrs	r2, r4, #12
   20464:	0544      	lsls	r4, r0, #21
   20466:	0d64      	lsrs	r4, r4, #21
   20468:	401d      	ands	r5, r3
   2046a:	e67c      	b.n	20166 <__aeabi_dmul+0xce>
   2046c:	2280      	movs	r2, #128	; 0x80
   2046e:	4659      	mov	r1, fp
   20470:	0312      	lsls	r2, r2, #12
   20472:	4211      	tst	r1, r2
   20474:	d008      	beq.n	20488 <__aeabi_dmul+0x3f0>
   20476:	4214      	tst	r4, r2
   20478:	d106      	bne.n	20488 <__aeabi_dmul+0x3f0>
   2047a:	4322      	orrs	r2, r4
   2047c:	0312      	lsls	r2, r2, #12
   2047e:	0b12      	lsrs	r2, r2, #12
   20480:	4645      	mov	r5, r8
   20482:	4699      	mov	r9, r3
   20484:	4c43      	ldr	r4, [pc, #268]	; (20594 <__aeabi_dmul+0x4fc>)
   20486:	e66e      	b.n	20166 <__aeabi_dmul+0xce>
   20488:	465b      	mov	r3, fp
   2048a:	431a      	orrs	r2, r3
   2048c:	0312      	lsls	r2, r2, #12
   2048e:	0b12      	lsrs	r2, r2, #12
   20490:	4c40      	ldr	r4, [pc, #256]	; (20594 <__aeabi_dmul+0x4fc>)
   20492:	e668      	b.n	20166 <__aeabi_dmul+0xce>
   20494:	0003      	movs	r3, r0
   20496:	4654      	mov	r4, sl
   20498:	3b28      	subs	r3, #40	; 0x28
   2049a:	409c      	lsls	r4, r3
   2049c:	2300      	movs	r3, #0
   2049e:	e6b9      	b.n	20214 <__aeabi_dmul+0x17c>
   204a0:	f000 fbfc 	bl	20c9c <__clzsi2>
   204a4:	3020      	adds	r0, #32
   204a6:	e6a6      	b.n	201f6 <__aeabi_dmul+0x15e>
   204a8:	0003      	movs	r3, r0
   204aa:	3b28      	subs	r3, #40	; 0x28
   204ac:	409f      	lsls	r7, r3
   204ae:	2300      	movs	r3, #0
   204b0:	46bb      	mov	fp, r7
   204b2:	4699      	mov	r9, r3
   204b4:	e68a      	b.n	201cc <__aeabi_dmul+0x134>
   204b6:	f000 fbf1 	bl	20c9c <__clzsi2>
   204ba:	3020      	adds	r0, #32
   204bc:	e674      	b.n	201a8 <__aeabi_dmul+0x110>
   204be:	46b4      	mov	ip, r6
   204c0:	e7ad      	b.n	2041e <__aeabi_dmul+0x386>
   204c2:	2501      	movs	r5, #1
   204c4:	1a2a      	subs	r2, r5, r0
   204c6:	2a38      	cmp	r2, #56	; 0x38
   204c8:	dd06      	ble.n	204d8 <__aeabi_dmul+0x440>
   204ca:	9b01      	ldr	r3, [sp, #4]
   204cc:	2400      	movs	r4, #0
   204ce:	401d      	ands	r5, r3
   204d0:	2300      	movs	r3, #0
   204d2:	2200      	movs	r2, #0
   204d4:	4699      	mov	r9, r3
   204d6:	e646      	b.n	20166 <__aeabi_dmul+0xce>
   204d8:	2a1f      	cmp	r2, #31
   204da:	dc21      	bgt.n	20520 <__aeabi_dmul+0x488>
   204dc:	2520      	movs	r5, #32
   204de:	0020      	movs	r0, r4
   204e0:	1aad      	subs	r5, r5, r2
   204e2:	001e      	movs	r6, r3
   204e4:	40ab      	lsls	r3, r5
   204e6:	40a8      	lsls	r0, r5
   204e8:	40d6      	lsrs	r6, r2
   204ea:	1e5d      	subs	r5, r3, #1
   204ec:	41ab      	sbcs	r3, r5
   204ee:	4330      	orrs	r0, r6
   204f0:	4318      	orrs	r0, r3
   204f2:	40d4      	lsrs	r4, r2
   204f4:	0743      	lsls	r3, r0, #29
   204f6:	d009      	beq.n	2050c <__aeabi_dmul+0x474>
   204f8:	230f      	movs	r3, #15
   204fa:	4003      	ands	r3, r0
   204fc:	2b04      	cmp	r3, #4
   204fe:	d005      	beq.n	2050c <__aeabi_dmul+0x474>
   20500:	0003      	movs	r3, r0
   20502:	1d18      	adds	r0, r3, #4
   20504:	4298      	cmp	r0, r3
   20506:	419b      	sbcs	r3, r3
   20508:	425b      	negs	r3, r3
   2050a:	18e4      	adds	r4, r4, r3
   2050c:	0223      	lsls	r3, r4, #8
   2050e:	d521      	bpl.n	20554 <__aeabi_dmul+0x4bc>
   20510:	2501      	movs	r5, #1
   20512:	9b01      	ldr	r3, [sp, #4]
   20514:	2401      	movs	r4, #1
   20516:	401d      	ands	r5, r3
   20518:	2300      	movs	r3, #0
   2051a:	2200      	movs	r2, #0
   2051c:	4699      	mov	r9, r3
   2051e:	e622      	b.n	20166 <__aeabi_dmul+0xce>
   20520:	251f      	movs	r5, #31
   20522:	0021      	movs	r1, r4
   20524:	426d      	negs	r5, r5
   20526:	1a28      	subs	r0, r5, r0
   20528:	40c1      	lsrs	r1, r0
   2052a:	0008      	movs	r0, r1
   2052c:	2a20      	cmp	r2, #32
   2052e:	d01d      	beq.n	2056c <__aeabi_dmul+0x4d4>
   20530:	355f      	adds	r5, #95	; 0x5f
   20532:	1aaa      	subs	r2, r5, r2
   20534:	4094      	lsls	r4, r2
   20536:	4323      	orrs	r3, r4
   20538:	1e5c      	subs	r4, r3, #1
   2053a:	41a3      	sbcs	r3, r4
   2053c:	2507      	movs	r5, #7
   2053e:	4303      	orrs	r3, r0
   20540:	401d      	ands	r5, r3
   20542:	2200      	movs	r2, #0
   20544:	2d00      	cmp	r5, #0
   20546:	d009      	beq.n	2055c <__aeabi_dmul+0x4c4>
   20548:	220f      	movs	r2, #15
   2054a:	2400      	movs	r4, #0
   2054c:	401a      	ands	r2, r3
   2054e:	0018      	movs	r0, r3
   20550:	2a04      	cmp	r2, #4
   20552:	d1d6      	bne.n	20502 <__aeabi_dmul+0x46a>
   20554:	0003      	movs	r3, r0
   20556:	0765      	lsls	r5, r4, #29
   20558:	0264      	lsls	r4, r4, #9
   2055a:	0b22      	lsrs	r2, r4, #12
   2055c:	08db      	lsrs	r3, r3, #3
   2055e:	432b      	orrs	r3, r5
   20560:	2501      	movs	r5, #1
   20562:	4699      	mov	r9, r3
   20564:	9b01      	ldr	r3, [sp, #4]
   20566:	2400      	movs	r4, #0
   20568:	401d      	ands	r5, r3
   2056a:	e5fc      	b.n	20166 <__aeabi_dmul+0xce>
   2056c:	2400      	movs	r4, #0
   2056e:	e7e2      	b.n	20536 <__aeabi_dmul+0x49e>
   20570:	2280      	movs	r2, #128	; 0x80
   20572:	2501      	movs	r5, #1
   20574:	0312      	lsls	r2, r2, #12
   20576:	4322      	orrs	r2, r4
   20578:	9901      	ldr	r1, [sp, #4]
   2057a:	0312      	lsls	r2, r2, #12
   2057c:	0b12      	lsrs	r2, r2, #12
   2057e:	400d      	ands	r5, r1
   20580:	4699      	mov	r9, r3
   20582:	4c04      	ldr	r4, [pc, #16]	; (20594 <__aeabi_dmul+0x4fc>)
   20584:	e5ef      	b.n	20166 <__aeabi_dmul+0xce>
   20586:	46c0      	nop			; (mov r8, r8)
   20588:	000003ff 	.word	0x000003ff
   2058c:	feffffff 	.word	0xfeffffff
   20590:	000007fe 	.word	0x000007fe
   20594:	000007ff 	.word	0x000007ff

00020598 <__aeabi_dsub>:
   20598:	b5f0      	push	{r4, r5, r6, r7, lr}
   2059a:	4646      	mov	r6, r8
   2059c:	46d6      	mov	lr, sl
   2059e:	464f      	mov	r7, r9
   205a0:	030c      	lsls	r4, r1, #12
   205a2:	b5c0      	push	{r6, r7, lr}
   205a4:	0fcd      	lsrs	r5, r1, #31
   205a6:	004e      	lsls	r6, r1, #1
   205a8:	0a61      	lsrs	r1, r4, #9
   205aa:	0f44      	lsrs	r4, r0, #29
   205ac:	430c      	orrs	r4, r1
   205ae:	00c1      	lsls	r1, r0, #3
   205b0:	0058      	lsls	r0, r3, #1
   205b2:	0d40      	lsrs	r0, r0, #21
   205b4:	4684      	mov	ip, r0
   205b6:	468a      	mov	sl, r1
   205b8:	000f      	movs	r7, r1
   205ba:	0319      	lsls	r1, r3, #12
   205bc:	0f50      	lsrs	r0, r2, #29
   205be:	0a49      	lsrs	r1, r1, #9
   205c0:	4301      	orrs	r1, r0
   205c2:	48c6      	ldr	r0, [pc, #792]	; (208dc <__aeabi_dsub+0x344>)
   205c4:	0d76      	lsrs	r6, r6, #21
   205c6:	46a8      	mov	r8, r5
   205c8:	0fdb      	lsrs	r3, r3, #31
   205ca:	00d2      	lsls	r2, r2, #3
   205cc:	4584      	cmp	ip, r0
   205ce:	d100      	bne.n	205d2 <__aeabi_dsub+0x3a>
   205d0:	e0d8      	b.n	20784 <__aeabi_dsub+0x1ec>
   205d2:	2001      	movs	r0, #1
   205d4:	4043      	eors	r3, r0
   205d6:	42ab      	cmp	r3, r5
   205d8:	d100      	bne.n	205dc <__aeabi_dsub+0x44>
   205da:	e0a6      	b.n	2072a <__aeabi_dsub+0x192>
   205dc:	4660      	mov	r0, ip
   205de:	1a35      	subs	r5, r6, r0
   205e0:	2d00      	cmp	r5, #0
   205e2:	dc00      	bgt.n	205e6 <__aeabi_dsub+0x4e>
   205e4:	e105      	b.n	207f2 <__aeabi_dsub+0x25a>
   205e6:	2800      	cmp	r0, #0
   205e8:	d110      	bne.n	2060c <__aeabi_dsub+0x74>
   205ea:	000b      	movs	r3, r1
   205ec:	4313      	orrs	r3, r2
   205ee:	d100      	bne.n	205f2 <__aeabi_dsub+0x5a>
   205f0:	e0d7      	b.n	207a2 <__aeabi_dsub+0x20a>
   205f2:	1e6b      	subs	r3, r5, #1
   205f4:	2b00      	cmp	r3, #0
   205f6:	d000      	beq.n	205fa <__aeabi_dsub+0x62>
   205f8:	e14b      	b.n	20892 <__aeabi_dsub+0x2fa>
   205fa:	4653      	mov	r3, sl
   205fc:	1a9f      	subs	r7, r3, r2
   205fe:	45ba      	cmp	sl, r7
   20600:	4180      	sbcs	r0, r0
   20602:	1a64      	subs	r4, r4, r1
   20604:	4240      	negs	r0, r0
   20606:	1a24      	subs	r4, r4, r0
   20608:	2601      	movs	r6, #1
   2060a:	e01e      	b.n	2064a <__aeabi_dsub+0xb2>
   2060c:	4bb3      	ldr	r3, [pc, #716]	; (208dc <__aeabi_dsub+0x344>)
   2060e:	429e      	cmp	r6, r3
   20610:	d048      	beq.n	206a4 <__aeabi_dsub+0x10c>
   20612:	2380      	movs	r3, #128	; 0x80
   20614:	041b      	lsls	r3, r3, #16
   20616:	4319      	orrs	r1, r3
   20618:	2d38      	cmp	r5, #56	; 0x38
   2061a:	dd00      	ble.n	2061e <__aeabi_dsub+0x86>
   2061c:	e119      	b.n	20852 <__aeabi_dsub+0x2ba>
   2061e:	2d1f      	cmp	r5, #31
   20620:	dd00      	ble.n	20624 <__aeabi_dsub+0x8c>
   20622:	e14c      	b.n	208be <__aeabi_dsub+0x326>
   20624:	2320      	movs	r3, #32
   20626:	000f      	movs	r7, r1
   20628:	1b5b      	subs	r3, r3, r5
   2062a:	0010      	movs	r0, r2
   2062c:	409a      	lsls	r2, r3
   2062e:	409f      	lsls	r7, r3
   20630:	40e8      	lsrs	r0, r5
   20632:	1e53      	subs	r3, r2, #1
   20634:	419a      	sbcs	r2, r3
   20636:	40e9      	lsrs	r1, r5
   20638:	4307      	orrs	r7, r0
   2063a:	4317      	orrs	r7, r2
   2063c:	4653      	mov	r3, sl
   2063e:	1bdf      	subs	r7, r3, r7
   20640:	1a61      	subs	r1, r4, r1
   20642:	45ba      	cmp	sl, r7
   20644:	41a4      	sbcs	r4, r4
   20646:	4264      	negs	r4, r4
   20648:	1b0c      	subs	r4, r1, r4
   2064a:	0223      	lsls	r3, r4, #8
   2064c:	d400      	bmi.n	20650 <__aeabi_dsub+0xb8>
   2064e:	e0c5      	b.n	207dc <__aeabi_dsub+0x244>
   20650:	0264      	lsls	r4, r4, #9
   20652:	0a65      	lsrs	r5, r4, #9
   20654:	2d00      	cmp	r5, #0
   20656:	d100      	bne.n	2065a <__aeabi_dsub+0xc2>
   20658:	e0f6      	b.n	20848 <__aeabi_dsub+0x2b0>
   2065a:	0028      	movs	r0, r5
   2065c:	f000 fb1e 	bl	20c9c <__clzsi2>
   20660:	0003      	movs	r3, r0
   20662:	3b08      	subs	r3, #8
   20664:	2b1f      	cmp	r3, #31
   20666:	dd00      	ble.n	2066a <__aeabi_dsub+0xd2>
   20668:	e0e9      	b.n	2083e <__aeabi_dsub+0x2a6>
   2066a:	2220      	movs	r2, #32
   2066c:	003c      	movs	r4, r7
   2066e:	1ad2      	subs	r2, r2, r3
   20670:	409d      	lsls	r5, r3
   20672:	40d4      	lsrs	r4, r2
   20674:	409f      	lsls	r7, r3
   20676:	4325      	orrs	r5, r4
   20678:	429e      	cmp	r6, r3
   2067a:	dd00      	ble.n	2067e <__aeabi_dsub+0xe6>
   2067c:	e0db      	b.n	20836 <__aeabi_dsub+0x29e>
   2067e:	1b9e      	subs	r6, r3, r6
   20680:	1c73      	adds	r3, r6, #1
   20682:	2b1f      	cmp	r3, #31
   20684:	dd00      	ble.n	20688 <__aeabi_dsub+0xf0>
   20686:	e10a      	b.n	2089e <__aeabi_dsub+0x306>
   20688:	2220      	movs	r2, #32
   2068a:	0038      	movs	r0, r7
   2068c:	1ad2      	subs	r2, r2, r3
   2068e:	0029      	movs	r1, r5
   20690:	4097      	lsls	r7, r2
   20692:	002c      	movs	r4, r5
   20694:	4091      	lsls	r1, r2
   20696:	40d8      	lsrs	r0, r3
   20698:	1e7a      	subs	r2, r7, #1
   2069a:	4197      	sbcs	r7, r2
   2069c:	40dc      	lsrs	r4, r3
   2069e:	2600      	movs	r6, #0
   206a0:	4301      	orrs	r1, r0
   206a2:	430f      	orrs	r7, r1
   206a4:	077b      	lsls	r3, r7, #29
   206a6:	d009      	beq.n	206bc <__aeabi_dsub+0x124>
   206a8:	230f      	movs	r3, #15
   206aa:	403b      	ands	r3, r7
   206ac:	2b04      	cmp	r3, #4
   206ae:	d005      	beq.n	206bc <__aeabi_dsub+0x124>
   206b0:	1d3b      	adds	r3, r7, #4
   206b2:	42bb      	cmp	r3, r7
   206b4:	41bf      	sbcs	r7, r7
   206b6:	427f      	negs	r7, r7
   206b8:	19e4      	adds	r4, r4, r7
   206ba:	001f      	movs	r7, r3
   206bc:	0223      	lsls	r3, r4, #8
   206be:	d525      	bpl.n	2070c <__aeabi_dsub+0x174>
   206c0:	4b86      	ldr	r3, [pc, #536]	; (208dc <__aeabi_dsub+0x344>)
   206c2:	3601      	adds	r6, #1
   206c4:	429e      	cmp	r6, r3
   206c6:	d100      	bne.n	206ca <__aeabi_dsub+0x132>
   206c8:	e0af      	b.n	2082a <__aeabi_dsub+0x292>
   206ca:	4b85      	ldr	r3, [pc, #532]	; (208e0 <__aeabi_dsub+0x348>)
   206cc:	2501      	movs	r5, #1
   206ce:	401c      	ands	r4, r3
   206d0:	4643      	mov	r3, r8
   206d2:	0762      	lsls	r2, r4, #29
   206d4:	08ff      	lsrs	r7, r7, #3
   206d6:	0264      	lsls	r4, r4, #9
   206d8:	0576      	lsls	r6, r6, #21
   206da:	4317      	orrs	r7, r2
   206dc:	0b24      	lsrs	r4, r4, #12
   206de:	0d76      	lsrs	r6, r6, #21
   206e0:	401d      	ands	r5, r3
   206e2:	2100      	movs	r1, #0
   206e4:	0324      	lsls	r4, r4, #12
   206e6:	0b23      	lsrs	r3, r4, #12
   206e8:	0d0c      	lsrs	r4, r1, #20
   206ea:	4a7e      	ldr	r2, [pc, #504]	; (208e4 <__aeabi_dsub+0x34c>)
   206ec:	0524      	lsls	r4, r4, #20
   206ee:	431c      	orrs	r4, r3
   206f0:	4014      	ands	r4, r2
   206f2:	0533      	lsls	r3, r6, #20
   206f4:	4323      	orrs	r3, r4
   206f6:	005b      	lsls	r3, r3, #1
   206f8:	07ed      	lsls	r5, r5, #31
   206fa:	085b      	lsrs	r3, r3, #1
   206fc:	432b      	orrs	r3, r5
   206fe:	0038      	movs	r0, r7
   20700:	0019      	movs	r1, r3
   20702:	bc1c      	pop	{r2, r3, r4}
   20704:	4690      	mov	r8, r2
   20706:	4699      	mov	r9, r3
   20708:	46a2      	mov	sl, r4
   2070a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2070c:	2501      	movs	r5, #1
   2070e:	4643      	mov	r3, r8
   20710:	0762      	lsls	r2, r4, #29
   20712:	08ff      	lsrs	r7, r7, #3
   20714:	4317      	orrs	r7, r2
   20716:	08e4      	lsrs	r4, r4, #3
   20718:	401d      	ands	r5, r3
   2071a:	4b70      	ldr	r3, [pc, #448]	; (208dc <__aeabi_dsub+0x344>)
   2071c:	429e      	cmp	r6, r3
   2071e:	d036      	beq.n	2078e <__aeabi_dsub+0x1f6>
   20720:	0324      	lsls	r4, r4, #12
   20722:	0576      	lsls	r6, r6, #21
   20724:	0b24      	lsrs	r4, r4, #12
   20726:	0d76      	lsrs	r6, r6, #21
   20728:	e7db      	b.n	206e2 <__aeabi_dsub+0x14a>
   2072a:	4663      	mov	r3, ip
   2072c:	1af3      	subs	r3, r6, r3
   2072e:	2b00      	cmp	r3, #0
   20730:	dc00      	bgt.n	20734 <__aeabi_dsub+0x19c>
   20732:	e094      	b.n	2085e <__aeabi_dsub+0x2c6>
   20734:	4660      	mov	r0, ip
   20736:	2800      	cmp	r0, #0
   20738:	d035      	beq.n	207a6 <__aeabi_dsub+0x20e>
   2073a:	4868      	ldr	r0, [pc, #416]	; (208dc <__aeabi_dsub+0x344>)
   2073c:	4286      	cmp	r6, r0
   2073e:	d0b1      	beq.n	206a4 <__aeabi_dsub+0x10c>
   20740:	2780      	movs	r7, #128	; 0x80
   20742:	043f      	lsls	r7, r7, #16
   20744:	4339      	orrs	r1, r7
   20746:	2b38      	cmp	r3, #56	; 0x38
   20748:	dc00      	bgt.n	2074c <__aeabi_dsub+0x1b4>
   2074a:	e0fd      	b.n	20948 <__aeabi_dsub+0x3b0>
   2074c:	430a      	orrs	r2, r1
   2074e:	0017      	movs	r7, r2
   20750:	2100      	movs	r1, #0
   20752:	1e7a      	subs	r2, r7, #1
   20754:	4197      	sbcs	r7, r2
   20756:	4457      	add	r7, sl
   20758:	4557      	cmp	r7, sl
   2075a:	4180      	sbcs	r0, r0
   2075c:	1909      	adds	r1, r1, r4
   2075e:	4244      	negs	r4, r0
   20760:	190c      	adds	r4, r1, r4
   20762:	0223      	lsls	r3, r4, #8
   20764:	d53a      	bpl.n	207dc <__aeabi_dsub+0x244>
   20766:	4b5d      	ldr	r3, [pc, #372]	; (208dc <__aeabi_dsub+0x344>)
   20768:	3601      	adds	r6, #1
   2076a:	429e      	cmp	r6, r3
   2076c:	d100      	bne.n	20770 <__aeabi_dsub+0x1d8>
   2076e:	e14b      	b.n	20a08 <__aeabi_dsub+0x470>
   20770:	2201      	movs	r2, #1
   20772:	4b5b      	ldr	r3, [pc, #364]	; (208e0 <__aeabi_dsub+0x348>)
   20774:	401c      	ands	r4, r3
   20776:	087b      	lsrs	r3, r7, #1
   20778:	4017      	ands	r7, r2
   2077a:	431f      	orrs	r7, r3
   2077c:	07e2      	lsls	r2, r4, #31
   2077e:	4317      	orrs	r7, r2
   20780:	0864      	lsrs	r4, r4, #1
   20782:	e78f      	b.n	206a4 <__aeabi_dsub+0x10c>
   20784:	0008      	movs	r0, r1
   20786:	4310      	orrs	r0, r2
   20788:	d000      	beq.n	2078c <__aeabi_dsub+0x1f4>
   2078a:	e724      	b.n	205d6 <__aeabi_dsub+0x3e>
   2078c:	e721      	b.n	205d2 <__aeabi_dsub+0x3a>
   2078e:	0023      	movs	r3, r4
   20790:	433b      	orrs	r3, r7
   20792:	d100      	bne.n	20796 <__aeabi_dsub+0x1fe>
   20794:	e1b9      	b.n	20b0a <__aeabi_dsub+0x572>
   20796:	2280      	movs	r2, #128	; 0x80
   20798:	0312      	lsls	r2, r2, #12
   2079a:	4314      	orrs	r4, r2
   2079c:	0324      	lsls	r4, r4, #12
   2079e:	0b24      	lsrs	r4, r4, #12
   207a0:	e79f      	b.n	206e2 <__aeabi_dsub+0x14a>
   207a2:	002e      	movs	r6, r5
   207a4:	e77e      	b.n	206a4 <__aeabi_dsub+0x10c>
   207a6:	0008      	movs	r0, r1
   207a8:	4310      	orrs	r0, r2
   207aa:	d100      	bne.n	207ae <__aeabi_dsub+0x216>
   207ac:	e0ca      	b.n	20944 <__aeabi_dsub+0x3ac>
   207ae:	1e58      	subs	r0, r3, #1
   207b0:	4684      	mov	ip, r0
   207b2:	2800      	cmp	r0, #0
   207b4:	d000      	beq.n	207b8 <__aeabi_dsub+0x220>
   207b6:	e0e7      	b.n	20988 <__aeabi_dsub+0x3f0>
   207b8:	4452      	add	r2, sl
   207ba:	4552      	cmp	r2, sl
   207bc:	4180      	sbcs	r0, r0
   207be:	1864      	adds	r4, r4, r1
   207c0:	4240      	negs	r0, r0
   207c2:	1824      	adds	r4, r4, r0
   207c4:	0017      	movs	r7, r2
   207c6:	2601      	movs	r6, #1
   207c8:	0223      	lsls	r3, r4, #8
   207ca:	d507      	bpl.n	207dc <__aeabi_dsub+0x244>
   207cc:	2602      	movs	r6, #2
   207ce:	e7cf      	b.n	20770 <__aeabi_dsub+0x1d8>
   207d0:	4664      	mov	r4, ip
   207d2:	432c      	orrs	r4, r5
   207d4:	d100      	bne.n	207d8 <__aeabi_dsub+0x240>
   207d6:	e1b3      	b.n	20b40 <__aeabi_dsub+0x5a8>
   207d8:	002c      	movs	r4, r5
   207da:	4667      	mov	r7, ip
   207dc:	077b      	lsls	r3, r7, #29
   207de:	d000      	beq.n	207e2 <__aeabi_dsub+0x24a>
   207e0:	e762      	b.n	206a8 <__aeabi_dsub+0x110>
   207e2:	0763      	lsls	r3, r4, #29
   207e4:	08ff      	lsrs	r7, r7, #3
   207e6:	431f      	orrs	r7, r3
   207e8:	2501      	movs	r5, #1
   207ea:	4643      	mov	r3, r8
   207ec:	08e4      	lsrs	r4, r4, #3
   207ee:	401d      	ands	r5, r3
   207f0:	e793      	b.n	2071a <__aeabi_dsub+0x182>
   207f2:	2d00      	cmp	r5, #0
   207f4:	d178      	bne.n	208e8 <__aeabi_dsub+0x350>
   207f6:	1c75      	adds	r5, r6, #1
   207f8:	056d      	lsls	r5, r5, #21
   207fa:	0d6d      	lsrs	r5, r5, #21
   207fc:	2d01      	cmp	r5, #1
   207fe:	dc00      	bgt.n	20802 <__aeabi_dsub+0x26a>
   20800:	e0f2      	b.n	209e8 <__aeabi_dsub+0x450>
   20802:	4650      	mov	r0, sl
   20804:	1a80      	subs	r0, r0, r2
   20806:	4582      	cmp	sl, r0
   20808:	41bf      	sbcs	r7, r7
   2080a:	1a65      	subs	r5, r4, r1
   2080c:	427f      	negs	r7, r7
   2080e:	1bed      	subs	r5, r5, r7
   20810:	4684      	mov	ip, r0
   20812:	0228      	lsls	r0, r5, #8
   20814:	d400      	bmi.n	20818 <__aeabi_dsub+0x280>
   20816:	e08c      	b.n	20932 <__aeabi_dsub+0x39a>
   20818:	4650      	mov	r0, sl
   2081a:	1a17      	subs	r7, r2, r0
   2081c:	42ba      	cmp	r2, r7
   2081e:	4192      	sbcs	r2, r2
   20820:	1b0c      	subs	r4, r1, r4
   20822:	4255      	negs	r5, r2
   20824:	1b65      	subs	r5, r4, r5
   20826:	4698      	mov	r8, r3
   20828:	e714      	b.n	20654 <__aeabi_dsub+0xbc>
   2082a:	2501      	movs	r5, #1
   2082c:	4643      	mov	r3, r8
   2082e:	2400      	movs	r4, #0
   20830:	401d      	ands	r5, r3
   20832:	2700      	movs	r7, #0
   20834:	e755      	b.n	206e2 <__aeabi_dsub+0x14a>
   20836:	4c2a      	ldr	r4, [pc, #168]	; (208e0 <__aeabi_dsub+0x348>)
   20838:	1af6      	subs	r6, r6, r3
   2083a:	402c      	ands	r4, r5
   2083c:	e732      	b.n	206a4 <__aeabi_dsub+0x10c>
   2083e:	003d      	movs	r5, r7
   20840:	3828      	subs	r0, #40	; 0x28
   20842:	4085      	lsls	r5, r0
   20844:	2700      	movs	r7, #0
   20846:	e717      	b.n	20678 <__aeabi_dsub+0xe0>
   20848:	0038      	movs	r0, r7
   2084a:	f000 fa27 	bl	20c9c <__clzsi2>
   2084e:	3020      	adds	r0, #32
   20850:	e706      	b.n	20660 <__aeabi_dsub+0xc8>
   20852:	430a      	orrs	r2, r1
   20854:	0017      	movs	r7, r2
   20856:	2100      	movs	r1, #0
   20858:	1e7a      	subs	r2, r7, #1
   2085a:	4197      	sbcs	r7, r2
   2085c:	e6ee      	b.n	2063c <__aeabi_dsub+0xa4>
   2085e:	2b00      	cmp	r3, #0
   20860:	d000      	beq.n	20864 <__aeabi_dsub+0x2cc>
   20862:	e0e5      	b.n	20a30 <__aeabi_dsub+0x498>
   20864:	1c73      	adds	r3, r6, #1
   20866:	469c      	mov	ip, r3
   20868:	055b      	lsls	r3, r3, #21
   2086a:	0d5b      	lsrs	r3, r3, #21
   2086c:	2b01      	cmp	r3, #1
   2086e:	dc00      	bgt.n	20872 <__aeabi_dsub+0x2da>
   20870:	e09f      	b.n	209b2 <__aeabi_dsub+0x41a>
   20872:	4b1a      	ldr	r3, [pc, #104]	; (208dc <__aeabi_dsub+0x344>)
   20874:	459c      	cmp	ip, r3
   20876:	d100      	bne.n	2087a <__aeabi_dsub+0x2e2>
   20878:	e0c5      	b.n	20a06 <__aeabi_dsub+0x46e>
   2087a:	4452      	add	r2, sl
   2087c:	4552      	cmp	r2, sl
   2087e:	4180      	sbcs	r0, r0
   20880:	1864      	adds	r4, r4, r1
   20882:	4240      	negs	r0, r0
   20884:	1824      	adds	r4, r4, r0
   20886:	07e7      	lsls	r7, r4, #31
   20888:	0852      	lsrs	r2, r2, #1
   2088a:	4317      	orrs	r7, r2
   2088c:	0864      	lsrs	r4, r4, #1
   2088e:	4666      	mov	r6, ip
   20890:	e708      	b.n	206a4 <__aeabi_dsub+0x10c>
   20892:	4812      	ldr	r0, [pc, #72]	; (208dc <__aeabi_dsub+0x344>)
   20894:	4285      	cmp	r5, r0
   20896:	d100      	bne.n	2089a <__aeabi_dsub+0x302>
   20898:	e085      	b.n	209a6 <__aeabi_dsub+0x40e>
   2089a:	001d      	movs	r5, r3
   2089c:	e6bc      	b.n	20618 <__aeabi_dsub+0x80>
   2089e:	0029      	movs	r1, r5
   208a0:	3e1f      	subs	r6, #31
   208a2:	40f1      	lsrs	r1, r6
   208a4:	2b20      	cmp	r3, #32
   208a6:	d100      	bne.n	208aa <__aeabi_dsub+0x312>
   208a8:	e07f      	b.n	209aa <__aeabi_dsub+0x412>
   208aa:	2240      	movs	r2, #64	; 0x40
   208ac:	1ad3      	subs	r3, r2, r3
   208ae:	409d      	lsls	r5, r3
   208b0:	432f      	orrs	r7, r5
   208b2:	1e7d      	subs	r5, r7, #1
   208b4:	41af      	sbcs	r7, r5
   208b6:	2400      	movs	r4, #0
   208b8:	430f      	orrs	r7, r1
   208ba:	2600      	movs	r6, #0
   208bc:	e78e      	b.n	207dc <__aeabi_dsub+0x244>
   208be:	002b      	movs	r3, r5
   208c0:	000f      	movs	r7, r1
   208c2:	3b20      	subs	r3, #32
   208c4:	40df      	lsrs	r7, r3
   208c6:	2d20      	cmp	r5, #32
   208c8:	d071      	beq.n	209ae <__aeabi_dsub+0x416>
   208ca:	2340      	movs	r3, #64	; 0x40
   208cc:	1b5d      	subs	r5, r3, r5
   208ce:	40a9      	lsls	r1, r5
   208d0:	430a      	orrs	r2, r1
   208d2:	1e51      	subs	r1, r2, #1
   208d4:	418a      	sbcs	r2, r1
   208d6:	2100      	movs	r1, #0
   208d8:	4317      	orrs	r7, r2
   208da:	e6af      	b.n	2063c <__aeabi_dsub+0xa4>
   208dc:	000007ff 	.word	0x000007ff
   208e0:	ff7fffff 	.word	0xff7fffff
   208e4:	800fffff 	.word	0x800fffff
   208e8:	2e00      	cmp	r6, #0
   208ea:	d03e      	beq.n	2096a <__aeabi_dsub+0x3d2>
   208ec:	4eb3      	ldr	r6, [pc, #716]	; (20bbc <__aeabi_dsub+0x624>)
   208ee:	45b4      	cmp	ip, r6
   208f0:	d045      	beq.n	2097e <__aeabi_dsub+0x3e6>
   208f2:	2680      	movs	r6, #128	; 0x80
   208f4:	0436      	lsls	r6, r6, #16
   208f6:	426d      	negs	r5, r5
   208f8:	4334      	orrs	r4, r6
   208fa:	2d38      	cmp	r5, #56	; 0x38
   208fc:	dd00      	ble.n	20900 <__aeabi_dsub+0x368>
   208fe:	e0a8      	b.n	20a52 <__aeabi_dsub+0x4ba>
   20900:	2d1f      	cmp	r5, #31
   20902:	dd00      	ble.n	20906 <__aeabi_dsub+0x36e>
   20904:	e11f      	b.n	20b46 <__aeabi_dsub+0x5ae>
   20906:	2620      	movs	r6, #32
   20908:	0027      	movs	r7, r4
   2090a:	4650      	mov	r0, sl
   2090c:	1b76      	subs	r6, r6, r5
   2090e:	40b7      	lsls	r7, r6
   20910:	40e8      	lsrs	r0, r5
   20912:	4307      	orrs	r7, r0
   20914:	4650      	mov	r0, sl
   20916:	40b0      	lsls	r0, r6
   20918:	1e46      	subs	r6, r0, #1
   2091a:	41b0      	sbcs	r0, r6
   2091c:	40ec      	lsrs	r4, r5
   2091e:	4338      	orrs	r0, r7
   20920:	1a17      	subs	r7, r2, r0
   20922:	42ba      	cmp	r2, r7
   20924:	4192      	sbcs	r2, r2
   20926:	1b0c      	subs	r4, r1, r4
   20928:	4252      	negs	r2, r2
   2092a:	1aa4      	subs	r4, r4, r2
   2092c:	4666      	mov	r6, ip
   2092e:	4698      	mov	r8, r3
   20930:	e68b      	b.n	2064a <__aeabi_dsub+0xb2>
   20932:	4664      	mov	r4, ip
   20934:	4667      	mov	r7, ip
   20936:	432c      	orrs	r4, r5
   20938:	d000      	beq.n	2093c <__aeabi_dsub+0x3a4>
   2093a:	e68b      	b.n	20654 <__aeabi_dsub+0xbc>
   2093c:	2500      	movs	r5, #0
   2093e:	2600      	movs	r6, #0
   20940:	2700      	movs	r7, #0
   20942:	e6ea      	b.n	2071a <__aeabi_dsub+0x182>
   20944:	001e      	movs	r6, r3
   20946:	e6ad      	b.n	206a4 <__aeabi_dsub+0x10c>
   20948:	2b1f      	cmp	r3, #31
   2094a:	dc60      	bgt.n	20a0e <__aeabi_dsub+0x476>
   2094c:	2720      	movs	r7, #32
   2094e:	1af8      	subs	r0, r7, r3
   20950:	000f      	movs	r7, r1
   20952:	4684      	mov	ip, r0
   20954:	4087      	lsls	r7, r0
   20956:	0010      	movs	r0, r2
   20958:	40d8      	lsrs	r0, r3
   2095a:	4307      	orrs	r7, r0
   2095c:	4660      	mov	r0, ip
   2095e:	4082      	lsls	r2, r0
   20960:	1e50      	subs	r0, r2, #1
   20962:	4182      	sbcs	r2, r0
   20964:	40d9      	lsrs	r1, r3
   20966:	4317      	orrs	r7, r2
   20968:	e6f5      	b.n	20756 <__aeabi_dsub+0x1be>
   2096a:	0026      	movs	r6, r4
   2096c:	4650      	mov	r0, sl
   2096e:	4306      	orrs	r6, r0
   20970:	d005      	beq.n	2097e <__aeabi_dsub+0x3e6>
   20972:	43ed      	mvns	r5, r5
   20974:	2d00      	cmp	r5, #0
   20976:	d0d3      	beq.n	20920 <__aeabi_dsub+0x388>
   20978:	4e90      	ldr	r6, [pc, #576]	; (20bbc <__aeabi_dsub+0x624>)
   2097a:	45b4      	cmp	ip, r6
   2097c:	d1bd      	bne.n	208fa <__aeabi_dsub+0x362>
   2097e:	000c      	movs	r4, r1
   20980:	0017      	movs	r7, r2
   20982:	4666      	mov	r6, ip
   20984:	4698      	mov	r8, r3
   20986:	e68d      	b.n	206a4 <__aeabi_dsub+0x10c>
   20988:	488c      	ldr	r0, [pc, #560]	; (20bbc <__aeabi_dsub+0x624>)
   2098a:	4283      	cmp	r3, r0
   2098c:	d00b      	beq.n	209a6 <__aeabi_dsub+0x40e>
   2098e:	4663      	mov	r3, ip
   20990:	e6d9      	b.n	20746 <__aeabi_dsub+0x1ae>
   20992:	2d00      	cmp	r5, #0
   20994:	d000      	beq.n	20998 <__aeabi_dsub+0x400>
   20996:	e096      	b.n	20ac6 <__aeabi_dsub+0x52e>
   20998:	0008      	movs	r0, r1
   2099a:	4310      	orrs	r0, r2
   2099c:	d100      	bne.n	209a0 <__aeabi_dsub+0x408>
   2099e:	e0e2      	b.n	20b66 <__aeabi_dsub+0x5ce>
   209a0:	000c      	movs	r4, r1
   209a2:	0017      	movs	r7, r2
   209a4:	4698      	mov	r8, r3
   209a6:	4e85      	ldr	r6, [pc, #532]	; (20bbc <__aeabi_dsub+0x624>)
   209a8:	e67c      	b.n	206a4 <__aeabi_dsub+0x10c>
   209aa:	2500      	movs	r5, #0
   209ac:	e780      	b.n	208b0 <__aeabi_dsub+0x318>
   209ae:	2100      	movs	r1, #0
   209b0:	e78e      	b.n	208d0 <__aeabi_dsub+0x338>
   209b2:	0023      	movs	r3, r4
   209b4:	4650      	mov	r0, sl
   209b6:	4303      	orrs	r3, r0
   209b8:	2e00      	cmp	r6, #0
   209ba:	d000      	beq.n	209be <__aeabi_dsub+0x426>
   209bc:	e0a8      	b.n	20b10 <__aeabi_dsub+0x578>
   209be:	2b00      	cmp	r3, #0
   209c0:	d100      	bne.n	209c4 <__aeabi_dsub+0x42c>
   209c2:	e0de      	b.n	20b82 <__aeabi_dsub+0x5ea>
   209c4:	000b      	movs	r3, r1
   209c6:	4313      	orrs	r3, r2
   209c8:	d100      	bne.n	209cc <__aeabi_dsub+0x434>
   209ca:	e66b      	b.n	206a4 <__aeabi_dsub+0x10c>
   209cc:	4452      	add	r2, sl
   209ce:	4552      	cmp	r2, sl
   209d0:	4180      	sbcs	r0, r0
   209d2:	1864      	adds	r4, r4, r1
   209d4:	4240      	negs	r0, r0
   209d6:	1824      	adds	r4, r4, r0
   209d8:	0017      	movs	r7, r2
   209da:	0223      	lsls	r3, r4, #8
   209dc:	d400      	bmi.n	209e0 <__aeabi_dsub+0x448>
   209de:	e6fd      	b.n	207dc <__aeabi_dsub+0x244>
   209e0:	4b77      	ldr	r3, [pc, #476]	; (20bc0 <__aeabi_dsub+0x628>)
   209e2:	4666      	mov	r6, ip
   209e4:	401c      	ands	r4, r3
   209e6:	e65d      	b.n	206a4 <__aeabi_dsub+0x10c>
   209e8:	0025      	movs	r5, r4
   209ea:	4650      	mov	r0, sl
   209ec:	4305      	orrs	r5, r0
   209ee:	2e00      	cmp	r6, #0
   209f0:	d1cf      	bne.n	20992 <__aeabi_dsub+0x3fa>
   209f2:	2d00      	cmp	r5, #0
   209f4:	d14f      	bne.n	20a96 <__aeabi_dsub+0x4fe>
   209f6:	000c      	movs	r4, r1
   209f8:	4314      	orrs	r4, r2
   209fa:	d100      	bne.n	209fe <__aeabi_dsub+0x466>
   209fc:	e0a0      	b.n	20b40 <__aeabi_dsub+0x5a8>
   209fe:	000c      	movs	r4, r1
   20a00:	0017      	movs	r7, r2
   20a02:	4698      	mov	r8, r3
   20a04:	e64e      	b.n	206a4 <__aeabi_dsub+0x10c>
   20a06:	4666      	mov	r6, ip
   20a08:	2400      	movs	r4, #0
   20a0a:	2700      	movs	r7, #0
   20a0c:	e685      	b.n	2071a <__aeabi_dsub+0x182>
   20a0e:	001f      	movs	r7, r3
   20a10:	0008      	movs	r0, r1
   20a12:	3f20      	subs	r7, #32
   20a14:	40f8      	lsrs	r0, r7
   20a16:	0007      	movs	r7, r0
   20a18:	2b20      	cmp	r3, #32
   20a1a:	d100      	bne.n	20a1e <__aeabi_dsub+0x486>
   20a1c:	e08e      	b.n	20b3c <__aeabi_dsub+0x5a4>
   20a1e:	2040      	movs	r0, #64	; 0x40
   20a20:	1ac3      	subs	r3, r0, r3
   20a22:	4099      	lsls	r1, r3
   20a24:	430a      	orrs	r2, r1
   20a26:	1e51      	subs	r1, r2, #1
   20a28:	418a      	sbcs	r2, r1
   20a2a:	2100      	movs	r1, #0
   20a2c:	4317      	orrs	r7, r2
   20a2e:	e692      	b.n	20756 <__aeabi_dsub+0x1be>
   20a30:	2e00      	cmp	r6, #0
   20a32:	d114      	bne.n	20a5e <__aeabi_dsub+0x4c6>
   20a34:	0026      	movs	r6, r4
   20a36:	4650      	mov	r0, sl
   20a38:	4306      	orrs	r6, r0
   20a3a:	d062      	beq.n	20b02 <__aeabi_dsub+0x56a>
   20a3c:	43db      	mvns	r3, r3
   20a3e:	2b00      	cmp	r3, #0
   20a40:	d15c      	bne.n	20afc <__aeabi_dsub+0x564>
   20a42:	1887      	adds	r7, r0, r2
   20a44:	4297      	cmp	r7, r2
   20a46:	4192      	sbcs	r2, r2
   20a48:	1864      	adds	r4, r4, r1
   20a4a:	4252      	negs	r2, r2
   20a4c:	18a4      	adds	r4, r4, r2
   20a4e:	4666      	mov	r6, ip
   20a50:	e687      	b.n	20762 <__aeabi_dsub+0x1ca>
   20a52:	4650      	mov	r0, sl
   20a54:	4320      	orrs	r0, r4
   20a56:	1e44      	subs	r4, r0, #1
   20a58:	41a0      	sbcs	r0, r4
   20a5a:	2400      	movs	r4, #0
   20a5c:	e760      	b.n	20920 <__aeabi_dsub+0x388>
   20a5e:	4e57      	ldr	r6, [pc, #348]	; (20bbc <__aeabi_dsub+0x624>)
   20a60:	45b4      	cmp	ip, r6
   20a62:	d04e      	beq.n	20b02 <__aeabi_dsub+0x56a>
   20a64:	2680      	movs	r6, #128	; 0x80
   20a66:	0436      	lsls	r6, r6, #16
   20a68:	425b      	negs	r3, r3
   20a6a:	4334      	orrs	r4, r6
   20a6c:	2b38      	cmp	r3, #56	; 0x38
   20a6e:	dd00      	ble.n	20a72 <__aeabi_dsub+0x4da>
   20a70:	e07f      	b.n	20b72 <__aeabi_dsub+0x5da>
   20a72:	2b1f      	cmp	r3, #31
   20a74:	dd00      	ble.n	20a78 <__aeabi_dsub+0x4e0>
   20a76:	e08b      	b.n	20b90 <__aeabi_dsub+0x5f8>
   20a78:	2620      	movs	r6, #32
   20a7a:	0027      	movs	r7, r4
   20a7c:	4650      	mov	r0, sl
   20a7e:	1af6      	subs	r6, r6, r3
   20a80:	40b7      	lsls	r7, r6
   20a82:	40d8      	lsrs	r0, r3
   20a84:	4307      	orrs	r7, r0
   20a86:	4650      	mov	r0, sl
   20a88:	40b0      	lsls	r0, r6
   20a8a:	1e46      	subs	r6, r0, #1
   20a8c:	41b0      	sbcs	r0, r6
   20a8e:	4307      	orrs	r7, r0
   20a90:	40dc      	lsrs	r4, r3
   20a92:	18bf      	adds	r7, r7, r2
   20a94:	e7d6      	b.n	20a44 <__aeabi_dsub+0x4ac>
   20a96:	000d      	movs	r5, r1
   20a98:	4315      	orrs	r5, r2
   20a9a:	d100      	bne.n	20a9e <__aeabi_dsub+0x506>
   20a9c:	e602      	b.n	206a4 <__aeabi_dsub+0x10c>
   20a9e:	4650      	mov	r0, sl
   20aa0:	1a80      	subs	r0, r0, r2
   20aa2:	4582      	cmp	sl, r0
   20aa4:	41bf      	sbcs	r7, r7
   20aa6:	1a65      	subs	r5, r4, r1
   20aa8:	427f      	negs	r7, r7
   20aaa:	1bed      	subs	r5, r5, r7
   20aac:	4684      	mov	ip, r0
   20aae:	0228      	lsls	r0, r5, #8
   20ab0:	d400      	bmi.n	20ab4 <__aeabi_dsub+0x51c>
   20ab2:	e68d      	b.n	207d0 <__aeabi_dsub+0x238>
   20ab4:	4650      	mov	r0, sl
   20ab6:	1a17      	subs	r7, r2, r0
   20ab8:	42ba      	cmp	r2, r7
   20aba:	4192      	sbcs	r2, r2
   20abc:	1b0c      	subs	r4, r1, r4
   20abe:	4252      	negs	r2, r2
   20ac0:	1aa4      	subs	r4, r4, r2
   20ac2:	4698      	mov	r8, r3
   20ac4:	e5ee      	b.n	206a4 <__aeabi_dsub+0x10c>
   20ac6:	000d      	movs	r5, r1
   20ac8:	4315      	orrs	r5, r2
   20aca:	d100      	bne.n	20ace <__aeabi_dsub+0x536>
   20acc:	e76b      	b.n	209a6 <__aeabi_dsub+0x40e>
   20ace:	4650      	mov	r0, sl
   20ad0:	0767      	lsls	r7, r4, #29
   20ad2:	08c0      	lsrs	r0, r0, #3
   20ad4:	4307      	orrs	r7, r0
   20ad6:	2080      	movs	r0, #128	; 0x80
   20ad8:	08e4      	lsrs	r4, r4, #3
   20ada:	0300      	lsls	r0, r0, #12
   20adc:	4204      	tst	r4, r0
   20ade:	d007      	beq.n	20af0 <__aeabi_dsub+0x558>
   20ae0:	08cd      	lsrs	r5, r1, #3
   20ae2:	4205      	tst	r5, r0
   20ae4:	d104      	bne.n	20af0 <__aeabi_dsub+0x558>
   20ae6:	002c      	movs	r4, r5
   20ae8:	4698      	mov	r8, r3
   20aea:	08d7      	lsrs	r7, r2, #3
   20aec:	0749      	lsls	r1, r1, #29
   20aee:	430f      	orrs	r7, r1
   20af0:	0f7b      	lsrs	r3, r7, #29
   20af2:	00e4      	lsls	r4, r4, #3
   20af4:	431c      	orrs	r4, r3
   20af6:	00ff      	lsls	r7, r7, #3
   20af8:	4e30      	ldr	r6, [pc, #192]	; (20bbc <__aeabi_dsub+0x624>)
   20afa:	e5d3      	b.n	206a4 <__aeabi_dsub+0x10c>
   20afc:	4e2f      	ldr	r6, [pc, #188]	; (20bbc <__aeabi_dsub+0x624>)
   20afe:	45b4      	cmp	ip, r6
   20b00:	d1b4      	bne.n	20a6c <__aeabi_dsub+0x4d4>
   20b02:	000c      	movs	r4, r1
   20b04:	0017      	movs	r7, r2
   20b06:	4666      	mov	r6, ip
   20b08:	e5cc      	b.n	206a4 <__aeabi_dsub+0x10c>
   20b0a:	2700      	movs	r7, #0
   20b0c:	2400      	movs	r4, #0
   20b0e:	e5e8      	b.n	206e2 <__aeabi_dsub+0x14a>
   20b10:	2b00      	cmp	r3, #0
   20b12:	d039      	beq.n	20b88 <__aeabi_dsub+0x5f0>
   20b14:	000b      	movs	r3, r1
   20b16:	4313      	orrs	r3, r2
   20b18:	d100      	bne.n	20b1c <__aeabi_dsub+0x584>
   20b1a:	e744      	b.n	209a6 <__aeabi_dsub+0x40e>
   20b1c:	08c0      	lsrs	r0, r0, #3
   20b1e:	0767      	lsls	r7, r4, #29
   20b20:	4307      	orrs	r7, r0
   20b22:	2080      	movs	r0, #128	; 0x80
   20b24:	08e4      	lsrs	r4, r4, #3
   20b26:	0300      	lsls	r0, r0, #12
   20b28:	4204      	tst	r4, r0
   20b2a:	d0e1      	beq.n	20af0 <__aeabi_dsub+0x558>
   20b2c:	08cb      	lsrs	r3, r1, #3
   20b2e:	4203      	tst	r3, r0
   20b30:	d1de      	bne.n	20af0 <__aeabi_dsub+0x558>
   20b32:	08d7      	lsrs	r7, r2, #3
   20b34:	0749      	lsls	r1, r1, #29
   20b36:	430f      	orrs	r7, r1
   20b38:	001c      	movs	r4, r3
   20b3a:	e7d9      	b.n	20af0 <__aeabi_dsub+0x558>
   20b3c:	2100      	movs	r1, #0
   20b3e:	e771      	b.n	20a24 <__aeabi_dsub+0x48c>
   20b40:	2500      	movs	r5, #0
   20b42:	2700      	movs	r7, #0
   20b44:	e5e9      	b.n	2071a <__aeabi_dsub+0x182>
   20b46:	002e      	movs	r6, r5
   20b48:	0027      	movs	r7, r4
   20b4a:	3e20      	subs	r6, #32
   20b4c:	40f7      	lsrs	r7, r6
   20b4e:	2d20      	cmp	r5, #32
   20b50:	d02f      	beq.n	20bb2 <__aeabi_dsub+0x61a>
   20b52:	2640      	movs	r6, #64	; 0x40
   20b54:	1b75      	subs	r5, r6, r5
   20b56:	40ac      	lsls	r4, r5
   20b58:	4650      	mov	r0, sl
   20b5a:	4320      	orrs	r0, r4
   20b5c:	1e44      	subs	r4, r0, #1
   20b5e:	41a0      	sbcs	r0, r4
   20b60:	2400      	movs	r4, #0
   20b62:	4338      	orrs	r0, r7
   20b64:	e6dc      	b.n	20920 <__aeabi_dsub+0x388>
   20b66:	2480      	movs	r4, #128	; 0x80
   20b68:	2500      	movs	r5, #0
   20b6a:	0324      	lsls	r4, r4, #12
   20b6c:	4e13      	ldr	r6, [pc, #76]	; (20bbc <__aeabi_dsub+0x624>)
   20b6e:	2700      	movs	r7, #0
   20b70:	e5d3      	b.n	2071a <__aeabi_dsub+0x182>
   20b72:	4650      	mov	r0, sl
   20b74:	4320      	orrs	r0, r4
   20b76:	0007      	movs	r7, r0
   20b78:	1e78      	subs	r0, r7, #1
   20b7a:	4187      	sbcs	r7, r0
   20b7c:	2400      	movs	r4, #0
   20b7e:	18bf      	adds	r7, r7, r2
   20b80:	e760      	b.n	20a44 <__aeabi_dsub+0x4ac>
   20b82:	000c      	movs	r4, r1
   20b84:	0017      	movs	r7, r2
   20b86:	e58d      	b.n	206a4 <__aeabi_dsub+0x10c>
   20b88:	000c      	movs	r4, r1
   20b8a:	0017      	movs	r7, r2
   20b8c:	4e0b      	ldr	r6, [pc, #44]	; (20bbc <__aeabi_dsub+0x624>)
   20b8e:	e589      	b.n	206a4 <__aeabi_dsub+0x10c>
   20b90:	001e      	movs	r6, r3
   20b92:	0027      	movs	r7, r4
   20b94:	3e20      	subs	r6, #32
   20b96:	40f7      	lsrs	r7, r6
   20b98:	2b20      	cmp	r3, #32
   20b9a:	d00c      	beq.n	20bb6 <__aeabi_dsub+0x61e>
   20b9c:	2640      	movs	r6, #64	; 0x40
   20b9e:	1af3      	subs	r3, r6, r3
   20ba0:	409c      	lsls	r4, r3
   20ba2:	4650      	mov	r0, sl
   20ba4:	4320      	orrs	r0, r4
   20ba6:	1e44      	subs	r4, r0, #1
   20ba8:	41a0      	sbcs	r0, r4
   20baa:	4307      	orrs	r7, r0
   20bac:	2400      	movs	r4, #0
   20bae:	18bf      	adds	r7, r7, r2
   20bb0:	e748      	b.n	20a44 <__aeabi_dsub+0x4ac>
   20bb2:	2400      	movs	r4, #0
   20bb4:	e7d0      	b.n	20b58 <__aeabi_dsub+0x5c0>
   20bb6:	2400      	movs	r4, #0
   20bb8:	e7f3      	b.n	20ba2 <__aeabi_dsub+0x60a>
   20bba:	46c0      	nop			; (mov r8, r8)
   20bbc:	000007ff 	.word	0x000007ff
   20bc0:	ff7fffff 	.word	0xff7fffff

00020bc4 <__aeabi_d2iz>:
   20bc4:	b530      	push	{r4, r5, lr}
   20bc6:	4d13      	ldr	r5, [pc, #76]	; (20c14 <__aeabi_d2iz+0x50>)
   20bc8:	030a      	lsls	r2, r1, #12
   20bca:	004b      	lsls	r3, r1, #1
   20bcc:	0b12      	lsrs	r2, r2, #12
   20bce:	0d5b      	lsrs	r3, r3, #21
   20bd0:	0fc9      	lsrs	r1, r1, #31
   20bd2:	2400      	movs	r4, #0
   20bd4:	42ab      	cmp	r3, r5
   20bd6:	dd10      	ble.n	20bfa <__aeabi_d2iz+0x36>
   20bd8:	4c0f      	ldr	r4, [pc, #60]	; (20c18 <__aeabi_d2iz+0x54>)
   20bda:	42a3      	cmp	r3, r4
   20bdc:	dc0f      	bgt.n	20bfe <__aeabi_d2iz+0x3a>
   20bde:	2480      	movs	r4, #128	; 0x80
   20be0:	4d0e      	ldr	r5, [pc, #56]	; (20c1c <__aeabi_d2iz+0x58>)
   20be2:	0364      	lsls	r4, r4, #13
   20be4:	4322      	orrs	r2, r4
   20be6:	1aed      	subs	r5, r5, r3
   20be8:	2d1f      	cmp	r5, #31
   20bea:	dd0b      	ble.n	20c04 <__aeabi_d2iz+0x40>
   20bec:	480c      	ldr	r0, [pc, #48]	; (20c20 <__aeabi_d2iz+0x5c>)
   20bee:	1ac3      	subs	r3, r0, r3
   20bf0:	40da      	lsrs	r2, r3
   20bf2:	4254      	negs	r4, r2
   20bf4:	2900      	cmp	r1, #0
   20bf6:	d100      	bne.n	20bfa <__aeabi_d2iz+0x36>
   20bf8:	0014      	movs	r4, r2
   20bfa:	0020      	movs	r0, r4
   20bfc:	bd30      	pop	{r4, r5, pc}
   20bfe:	4b09      	ldr	r3, [pc, #36]	; (20c24 <__aeabi_d2iz+0x60>)
   20c00:	18cc      	adds	r4, r1, r3
   20c02:	e7fa      	b.n	20bfa <__aeabi_d2iz+0x36>
   20c04:	4c08      	ldr	r4, [pc, #32]	; (20c28 <__aeabi_d2iz+0x64>)
   20c06:	40e8      	lsrs	r0, r5
   20c08:	46a4      	mov	ip, r4
   20c0a:	4463      	add	r3, ip
   20c0c:	409a      	lsls	r2, r3
   20c0e:	4302      	orrs	r2, r0
   20c10:	e7ef      	b.n	20bf2 <__aeabi_d2iz+0x2e>
   20c12:	46c0      	nop			; (mov r8, r8)
   20c14:	000003fe 	.word	0x000003fe
   20c18:	0000041d 	.word	0x0000041d
   20c1c:	00000433 	.word	0x00000433
   20c20:	00000413 	.word	0x00000413
   20c24:	7fffffff 	.word	0x7fffffff
   20c28:	fffffbed 	.word	0xfffffbed

00020c2c <__aeabi_ui2d>:
   20c2c:	b510      	push	{r4, lr}
   20c2e:	1e04      	subs	r4, r0, #0
   20c30:	d028      	beq.n	20c84 <__aeabi_ui2d+0x58>
   20c32:	f000 f833 	bl	20c9c <__clzsi2>
   20c36:	4b15      	ldr	r3, [pc, #84]	; (20c8c <__aeabi_ui2d+0x60>)
   20c38:	4a15      	ldr	r2, [pc, #84]	; (20c90 <__aeabi_ui2d+0x64>)
   20c3a:	1a1b      	subs	r3, r3, r0
   20c3c:	1ad2      	subs	r2, r2, r3
   20c3e:	2a1f      	cmp	r2, #31
   20c40:	dd15      	ble.n	20c6e <__aeabi_ui2d+0x42>
   20c42:	4a14      	ldr	r2, [pc, #80]	; (20c94 <__aeabi_ui2d+0x68>)
   20c44:	1ad2      	subs	r2, r2, r3
   20c46:	4094      	lsls	r4, r2
   20c48:	2200      	movs	r2, #0
   20c4a:	0324      	lsls	r4, r4, #12
   20c4c:	055b      	lsls	r3, r3, #21
   20c4e:	0b24      	lsrs	r4, r4, #12
   20c50:	0d5b      	lsrs	r3, r3, #21
   20c52:	2100      	movs	r1, #0
   20c54:	0010      	movs	r0, r2
   20c56:	0324      	lsls	r4, r4, #12
   20c58:	0d0a      	lsrs	r2, r1, #20
   20c5a:	0b24      	lsrs	r4, r4, #12
   20c5c:	0512      	lsls	r2, r2, #20
   20c5e:	4322      	orrs	r2, r4
   20c60:	4c0d      	ldr	r4, [pc, #52]	; (20c98 <__aeabi_ui2d+0x6c>)
   20c62:	051b      	lsls	r3, r3, #20
   20c64:	4022      	ands	r2, r4
   20c66:	4313      	orrs	r3, r2
   20c68:	005b      	lsls	r3, r3, #1
   20c6a:	0859      	lsrs	r1, r3, #1
   20c6c:	bd10      	pop	{r4, pc}
   20c6e:	0021      	movs	r1, r4
   20c70:	4091      	lsls	r1, r2
   20c72:	000a      	movs	r2, r1
   20c74:	210b      	movs	r1, #11
   20c76:	1a08      	subs	r0, r1, r0
   20c78:	40c4      	lsrs	r4, r0
   20c7a:	055b      	lsls	r3, r3, #21
   20c7c:	0324      	lsls	r4, r4, #12
   20c7e:	0b24      	lsrs	r4, r4, #12
   20c80:	0d5b      	lsrs	r3, r3, #21
   20c82:	e7e6      	b.n	20c52 <__aeabi_ui2d+0x26>
   20c84:	2300      	movs	r3, #0
   20c86:	2400      	movs	r4, #0
   20c88:	2200      	movs	r2, #0
   20c8a:	e7e2      	b.n	20c52 <__aeabi_ui2d+0x26>
   20c8c:	0000041e 	.word	0x0000041e
   20c90:	00000433 	.word	0x00000433
   20c94:	00000413 	.word	0x00000413
   20c98:	800fffff 	.word	0x800fffff

00020c9c <__clzsi2>:
   20c9c:	211c      	movs	r1, #28
   20c9e:	2301      	movs	r3, #1
   20ca0:	041b      	lsls	r3, r3, #16
   20ca2:	4298      	cmp	r0, r3
   20ca4:	d301      	bcc.n	20caa <__clzsi2+0xe>
   20ca6:	0c00      	lsrs	r0, r0, #16
   20ca8:	3910      	subs	r1, #16
   20caa:	0a1b      	lsrs	r3, r3, #8
   20cac:	4298      	cmp	r0, r3
   20cae:	d301      	bcc.n	20cb4 <__clzsi2+0x18>
   20cb0:	0a00      	lsrs	r0, r0, #8
   20cb2:	3908      	subs	r1, #8
   20cb4:	091b      	lsrs	r3, r3, #4
   20cb6:	4298      	cmp	r0, r3
   20cb8:	d301      	bcc.n	20cbe <__clzsi2+0x22>
   20cba:	0900      	lsrs	r0, r0, #4
   20cbc:	3904      	subs	r1, #4
   20cbe:	a202      	add	r2, pc, #8	; (adr r2, 20cc8 <__clzsi2+0x2c>)
   20cc0:	5c10      	ldrb	r0, [r2, r0]
   20cc2:	1840      	adds	r0, r0, r1
   20cc4:	4770      	bx	lr
   20cc6:	46c0      	nop			; (mov r8, r8)
   20cc8:	02020304 	.word	0x02020304
   20ccc:	01010101 	.word	0x01010101
	...

00020cd8 <atoi>:
   20cd8:	b510      	push	{r4, lr}
   20cda:	220a      	movs	r2, #10
   20cdc:	2100      	movs	r1, #0
   20cde:	f000 fb0d 	bl	212fc <strtol>
   20ce2:	bd10      	pop	{r4, pc}

00020ce4 <__libc_init_array>:
   20ce4:	b570      	push	{r4, r5, r6, lr}
   20ce6:	2600      	movs	r6, #0
   20ce8:	4d0c      	ldr	r5, [pc, #48]	; (20d1c <__libc_init_array+0x38>)
   20cea:	4c0d      	ldr	r4, [pc, #52]	; (20d20 <__libc_init_array+0x3c>)
   20cec:	1b64      	subs	r4, r4, r5
   20cee:	10a4      	asrs	r4, r4, #2
   20cf0:	42a6      	cmp	r6, r4
   20cf2:	d109      	bne.n	20d08 <__libc_init_array+0x24>
   20cf4:	2600      	movs	r6, #0
   20cf6:	f006 fb3d 	bl	27374 <_init>
   20cfa:	4d0a      	ldr	r5, [pc, #40]	; (20d24 <__libc_init_array+0x40>)
   20cfc:	4c0a      	ldr	r4, [pc, #40]	; (20d28 <__libc_init_array+0x44>)
   20cfe:	1b64      	subs	r4, r4, r5
   20d00:	10a4      	asrs	r4, r4, #2
   20d02:	42a6      	cmp	r6, r4
   20d04:	d105      	bne.n	20d12 <__libc_init_array+0x2e>
   20d06:	bd70      	pop	{r4, r5, r6, pc}
   20d08:	00b3      	lsls	r3, r6, #2
   20d0a:	58eb      	ldr	r3, [r5, r3]
   20d0c:	4798      	blx	r3
   20d0e:	3601      	adds	r6, #1
   20d10:	e7ee      	b.n	20cf0 <__libc_init_array+0xc>
   20d12:	00b3      	lsls	r3, r6, #2
   20d14:	58eb      	ldr	r3, [r5, r3]
   20d16:	4798      	blx	r3
   20d18:	3601      	adds	r6, #1
   20d1a:	e7f2      	b.n	20d02 <__libc_init_array+0x1e>
   20d1c:	00027380 	.word	0x00027380
   20d20:	00027380 	.word	0x00027380
   20d24:	00027380 	.word	0x00027380
   20d28:	00027384 	.word	0x00027384

00020d2c <malloc>:
   20d2c:	b510      	push	{r4, lr}
   20d2e:	4b03      	ldr	r3, [pc, #12]	; (20d3c <malloc+0x10>)
   20d30:	0001      	movs	r1, r0
   20d32:	6818      	ldr	r0, [r3, #0]
   20d34:	f000 f87c 	bl	20e30 <_malloc_r>
   20d38:	bd10      	pop	{r4, pc}
   20d3a:	46c0      	nop			; (mov r8, r8)
   20d3c:	2000011c 	.word	0x2000011c

00020d40 <free>:
   20d40:	b510      	push	{r4, lr}
   20d42:	4b03      	ldr	r3, [pc, #12]	; (20d50 <free+0x10>)
   20d44:	0001      	movs	r1, r0
   20d46:	6818      	ldr	r0, [r3, #0]
   20d48:	f000 f828 	bl	20d9c <_free_r>
   20d4c:	bd10      	pop	{r4, pc}
   20d4e:	46c0      	nop			; (mov r8, r8)
   20d50:	2000011c 	.word	0x2000011c

00020d54 <memcpy>:
   20d54:	2300      	movs	r3, #0
   20d56:	b510      	push	{r4, lr}
   20d58:	429a      	cmp	r2, r3
   20d5a:	d100      	bne.n	20d5e <memcpy+0xa>
   20d5c:	bd10      	pop	{r4, pc}
   20d5e:	5ccc      	ldrb	r4, [r1, r3]
   20d60:	54c4      	strb	r4, [r0, r3]
   20d62:	3301      	adds	r3, #1
   20d64:	e7f8      	b.n	20d58 <memcpy+0x4>

00020d66 <memmove>:
   20d66:	b510      	push	{r4, lr}
   20d68:	4288      	cmp	r0, r1
   20d6a:	d902      	bls.n	20d72 <memmove+0xc>
   20d6c:	188b      	adds	r3, r1, r2
   20d6e:	4298      	cmp	r0, r3
   20d70:	d308      	bcc.n	20d84 <memmove+0x1e>
   20d72:	2300      	movs	r3, #0
   20d74:	429a      	cmp	r2, r3
   20d76:	d007      	beq.n	20d88 <memmove+0x22>
   20d78:	5ccc      	ldrb	r4, [r1, r3]
   20d7a:	54c4      	strb	r4, [r0, r3]
   20d7c:	3301      	adds	r3, #1
   20d7e:	e7f9      	b.n	20d74 <memmove+0xe>
   20d80:	5c8b      	ldrb	r3, [r1, r2]
   20d82:	5483      	strb	r3, [r0, r2]
   20d84:	3a01      	subs	r2, #1
   20d86:	d2fb      	bcs.n	20d80 <memmove+0x1a>
   20d88:	bd10      	pop	{r4, pc}

00020d8a <memset>:
   20d8a:	0003      	movs	r3, r0
   20d8c:	1882      	adds	r2, r0, r2
   20d8e:	4293      	cmp	r3, r2
   20d90:	d100      	bne.n	20d94 <memset+0xa>
   20d92:	4770      	bx	lr
   20d94:	7019      	strb	r1, [r3, #0]
   20d96:	3301      	adds	r3, #1
   20d98:	e7f9      	b.n	20d8e <memset+0x4>
	...

00020d9c <_free_r>:
   20d9c:	b570      	push	{r4, r5, r6, lr}
   20d9e:	0005      	movs	r5, r0
   20da0:	2900      	cmp	r1, #0
   20da2:	d010      	beq.n	20dc6 <_free_r+0x2a>
   20da4:	1f0c      	subs	r4, r1, #4
   20da6:	6823      	ldr	r3, [r4, #0]
   20da8:	2b00      	cmp	r3, #0
   20daa:	da00      	bge.n	20dae <_free_r+0x12>
   20dac:	18e4      	adds	r4, r4, r3
   20dae:	0028      	movs	r0, r5
   20db0:	f000 fdd8 	bl	21964 <__malloc_lock>
   20db4:	4a1d      	ldr	r2, [pc, #116]	; (20e2c <_free_r+0x90>)
   20db6:	6813      	ldr	r3, [r2, #0]
   20db8:	2b00      	cmp	r3, #0
   20dba:	d105      	bne.n	20dc8 <_free_r+0x2c>
   20dbc:	6063      	str	r3, [r4, #4]
   20dbe:	6014      	str	r4, [r2, #0]
   20dc0:	0028      	movs	r0, r5
   20dc2:	f000 fdd0 	bl	21966 <__malloc_unlock>
   20dc6:	bd70      	pop	{r4, r5, r6, pc}
   20dc8:	42a3      	cmp	r3, r4
   20dca:	d909      	bls.n	20de0 <_free_r+0x44>
   20dcc:	6821      	ldr	r1, [r4, #0]
   20dce:	1860      	adds	r0, r4, r1
   20dd0:	4283      	cmp	r3, r0
   20dd2:	d1f3      	bne.n	20dbc <_free_r+0x20>
   20dd4:	6818      	ldr	r0, [r3, #0]
   20dd6:	685b      	ldr	r3, [r3, #4]
   20dd8:	1841      	adds	r1, r0, r1
   20dda:	6021      	str	r1, [r4, #0]
   20ddc:	e7ee      	b.n	20dbc <_free_r+0x20>
   20dde:	0013      	movs	r3, r2
   20de0:	685a      	ldr	r2, [r3, #4]
   20de2:	2a00      	cmp	r2, #0
   20de4:	d001      	beq.n	20dea <_free_r+0x4e>
   20de6:	42a2      	cmp	r2, r4
   20de8:	d9f9      	bls.n	20dde <_free_r+0x42>
   20dea:	6819      	ldr	r1, [r3, #0]
   20dec:	1858      	adds	r0, r3, r1
   20dee:	42a0      	cmp	r0, r4
   20df0:	d10b      	bne.n	20e0a <_free_r+0x6e>
   20df2:	6820      	ldr	r0, [r4, #0]
   20df4:	1809      	adds	r1, r1, r0
   20df6:	1858      	adds	r0, r3, r1
   20df8:	6019      	str	r1, [r3, #0]
   20dfa:	4282      	cmp	r2, r0
   20dfc:	d1e0      	bne.n	20dc0 <_free_r+0x24>
   20dfe:	6810      	ldr	r0, [r2, #0]
   20e00:	6852      	ldr	r2, [r2, #4]
   20e02:	1841      	adds	r1, r0, r1
   20e04:	6019      	str	r1, [r3, #0]
   20e06:	605a      	str	r2, [r3, #4]
   20e08:	e7da      	b.n	20dc0 <_free_r+0x24>
   20e0a:	42a0      	cmp	r0, r4
   20e0c:	d902      	bls.n	20e14 <_free_r+0x78>
   20e0e:	230c      	movs	r3, #12
   20e10:	602b      	str	r3, [r5, #0]
   20e12:	e7d5      	b.n	20dc0 <_free_r+0x24>
   20e14:	6821      	ldr	r1, [r4, #0]
   20e16:	1860      	adds	r0, r4, r1
   20e18:	4282      	cmp	r2, r0
   20e1a:	d103      	bne.n	20e24 <_free_r+0x88>
   20e1c:	6810      	ldr	r0, [r2, #0]
   20e1e:	6852      	ldr	r2, [r2, #4]
   20e20:	1841      	adds	r1, r0, r1
   20e22:	6021      	str	r1, [r4, #0]
   20e24:	6062      	str	r2, [r4, #4]
   20e26:	605c      	str	r4, [r3, #4]
   20e28:	e7ca      	b.n	20dc0 <_free_r+0x24>
   20e2a:	46c0      	nop			; (mov r8, r8)
   20e2c:	200045a4 	.word	0x200045a4

00020e30 <_malloc_r>:
   20e30:	2303      	movs	r3, #3
   20e32:	b570      	push	{r4, r5, r6, lr}
   20e34:	1ccd      	adds	r5, r1, #3
   20e36:	439d      	bics	r5, r3
   20e38:	3508      	adds	r5, #8
   20e3a:	0006      	movs	r6, r0
   20e3c:	2d0c      	cmp	r5, #12
   20e3e:	d21e      	bcs.n	20e7e <_malloc_r+0x4e>
   20e40:	250c      	movs	r5, #12
   20e42:	42a9      	cmp	r1, r5
   20e44:	d81d      	bhi.n	20e82 <_malloc_r+0x52>
   20e46:	0030      	movs	r0, r6
   20e48:	f000 fd8c 	bl	21964 <__malloc_lock>
   20e4c:	4a25      	ldr	r2, [pc, #148]	; (20ee4 <_malloc_r+0xb4>)
   20e4e:	6814      	ldr	r4, [r2, #0]
   20e50:	0021      	movs	r1, r4
   20e52:	2900      	cmp	r1, #0
   20e54:	d119      	bne.n	20e8a <_malloc_r+0x5a>
   20e56:	4c24      	ldr	r4, [pc, #144]	; (20ee8 <_malloc_r+0xb8>)
   20e58:	6823      	ldr	r3, [r4, #0]
   20e5a:	2b00      	cmp	r3, #0
   20e5c:	d103      	bne.n	20e66 <_malloc_r+0x36>
   20e5e:	0030      	movs	r0, r6
   20e60:	f000 f8ae 	bl	20fc0 <_sbrk_r>
   20e64:	6020      	str	r0, [r4, #0]
   20e66:	0029      	movs	r1, r5
   20e68:	0030      	movs	r0, r6
   20e6a:	f000 f8a9 	bl	20fc0 <_sbrk_r>
   20e6e:	1c43      	adds	r3, r0, #1
   20e70:	d12c      	bne.n	20ecc <_malloc_r+0x9c>
   20e72:	230c      	movs	r3, #12
   20e74:	0030      	movs	r0, r6
   20e76:	6033      	str	r3, [r6, #0]
   20e78:	f000 fd75 	bl	21966 <__malloc_unlock>
   20e7c:	e003      	b.n	20e86 <_malloc_r+0x56>
   20e7e:	2d00      	cmp	r5, #0
   20e80:	dadf      	bge.n	20e42 <_malloc_r+0x12>
   20e82:	230c      	movs	r3, #12
   20e84:	6033      	str	r3, [r6, #0]
   20e86:	2000      	movs	r0, #0
   20e88:	bd70      	pop	{r4, r5, r6, pc}
   20e8a:	680b      	ldr	r3, [r1, #0]
   20e8c:	1b5b      	subs	r3, r3, r5
   20e8e:	d41a      	bmi.n	20ec6 <_malloc_r+0x96>
   20e90:	2b0b      	cmp	r3, #11
   20e92:	d903      	bls.n	20e9c <_malloc_r+0x6c>
   20e94:	600b      	str	r3, [r1, #0]
   20e96:	18cc      	adds	r4, r1, r3
   20e98:	6025      	str	r5, [r4, #0]
   20e9a:	e003      	b.n	20ea4 <_malloc_r+0x74>
   20e9c:	428c      	cmp	r4, r1
   20e9e:	d10e      	bne.n	20ebe <_malloc_r+0x8e>
   20ea0:	6863      	ldr	r3, [r4, #4]
   20ea2:	6013      	str	r3, [r2, #0]
   20ea4:	0030      	movs	r0, r6
   20ea6:	f000 fd5e 	bl	21966 <__malloc_unlock>
   20eaa:	0020      	movs	r0, r4
   20eac:	2207      	movs	r2, #7
   20eae:	300b      	adds	r0, #11
   20eb0:	1d23      	adds	r3, r4, #4
   20eb2:	4390      	bics	r0, r2
   20eb4:	1ac3      	subs	r3, r0, r3
   20eb6:	d0e7      	beq.n	20e88 <_malloc_r+0x58>
   20eb8:	425a      	negs	r2, r3
   20eba:	50e2      	str	r2, [r4, r3]
   20ebc:	e7e4      	b.n	20e88 <_malloc_r+0x58>
   20ebe:	684b      	ldr	r3, [r1, #4]
   20ec0:	6063      	str	r3, [r4, #4]
   20ec2:	000c      	movs	r4, r1
   20ec4:	e7ee      	b.n	20ea4 <_malloc_r+0x74>
   20ec6:	000c      	movs	r4, r1
   20ec8:	6849      	ldr	r1, [r1, #4]
   20eca:	e7c2      	b.n	20e52 <_malloc_r+0x22>
   20ecc:	2303      	movs	r3, #3
   20ece:	1cc4      	adds	r4, r0, #3
   20ed0:	439c      	bics	r4, r3
   20ed2:	42a0      	cmp	r0, r4
   20ed4:	d0e0      	beq.n	20e98 <_malloc_r+0x68>
   20ed6:	1a21      	subs	r1, r4, r0
   20ed8:	0030      	movs	r0, r6
   20eda:	f000 f871 	bl	20fc0 <_sbrk_r>
   20ede:	1c43      	adds	r3, r0, #1
   20ee0:	d1da      	bne.n	20e98 <_malloc_r+0x68>
   20ee2:	e7c6      	b.n	20e72 <_malloc_r+0x42>
   20ee4:	200045a4 	.word	0x200045a4
   20ee8:	200045a8 	.word	0x200045a8

00020eec <_puts_r>:
   20eec:	b570      	push	{r4, r5, r6, lr}
   20eee:	0005      	movs	r5, r0
   20ef0:	000e      	movs	r6, r1
   20ef2:	2800      	cmp	r0, #0
   20ef4:	d004      	beq.n	20f00 <_puts_r+0x14>
   20ef6:	6983      	ldr	r3, [r0, #24]
   20ef8:	2b00      	cmp	r3, #0
   20efa:	d101      	bne.n	20f00 <_puts_r+0x14>
   20efc:	f000 fc0e 	bl	2171c <__sinit>
   20f00:	69ab      	ldr	r3, [r5, #24]
   20f02:	68ac      	ldr	r4, [r5, #8]
   20f04:	2b00      	cmp	r3, #0
   20f06:	d102      	bne.n	20f0e <_puts_r+0x22>
   20f08:	0028      	movs	r0, r5
   20f0a:	f000 fc07 	bl	2171c <__sinit>
   20f0e:	4b24      	ldr	r3, [pc, #144]	; (20fa0 <_puts_r+0xb4>)
   20f10:	429c      	cmp	r4, r3
   20f12:	d10f      	bne.n	20f34 <_puts_r+0x48>
   20f14:	686c      	ldr	r4, [r5, #4]
   20f16:	89a3      	ldrh	r3, [r4, #12]
   20f18:	071b      	lsls	r3, r3, #28
   20f1a:	d502      	bpl.n	20f22 <_puts_r+0x36>
   20f1c:	6923      	ldr	r3, [r4, #16]
   20f1e:	2b00      	cmp	r3, #0
   20f20:	d120      	bne.n	20f64 <_puts_r+0x78>
   20f22:	0021      	movs	r1, r4
   20f24:	0028      	movs	r0, r5
   20f26:	f000 fa8b 	bl	21440 <__swsetup_r>
   20f2a:	2800      	cmp	r0, #0
   20f2c:	d01a      	beq.n	20f64 <_puts_r+0x78>
   20f2e:	2001      	movs	r0, #1
   20f30:	4240      	negs	r0, r0
   20f32:	bd70      	pop	{r4, r5, r6, pc}
   20f34:	4b1b      	ldr	r3, [pc, #108]	; (20fa4 <_puts_r+0xb8>)
   20f36:	429c      	cmp	r4, r3
   20f38:	d101      	bne.n	20f3e <_puts_r+0x52>
   20f3a:	68ac      	ldr	r4, [r5, #8]
   20f3c:	e7eb      	b.n	20f16 <_puts_r+0x2a>
   20f3e:	4b1a      	ldr	r3, [pc, #104]	; (20fa8 <_puts_r+0xbc>)
   20f40:	429c      	cmp	r4, r3
   20f42:	d1e8      	bne.n	20f16 <_puts_r+0x2a>
   20f44:	68ec      	ldr	r4, [r5, #12]
   20f46:	e7e6      	b.n	20f16 <_puts_r+0x2a>
   20f48:	3b01      	subs	r3, #1
   20f4a:	3601      	adds	r6, #1
   20f4c:	60a3      	str	r3, [r4, #8]
   20f4e:	2b00      	cmp	r3, #0
   20f50:	da04      	bge.n	20f5c <_puts_r+0x70>
   20f52:	69a2      	ldr	r2, [r4, #24]
   20f54:	4293      	cmp	r3, r2
   20f56:	db16      	blt.n	20f86 <_puts_r+0x9a>
   20f58:	290a      	cmp	r1, #10
   20f5a:	d014      	beq.n	20f86 <_puts_r+0x9a>
   20f5c:	6823      	ldr	r3, [r4, #0]
   20f5e:	1c5a      	adds	r2, r3, #1
   20f60:	6022      	str	r2, [r4, #0]
   20f62:	7019      	strb	r1, [r3, #0]
   20f64:	7831      	ldrb	r1, [r6, #0]
   20f66:	68a3      	ldr	r3, [r4, #8]
   20f68:	2900      	cmp	r1, #0
   20f6a:	d1ed      	bne.n	20f48 <_puts_r+0x5c>
   20f6c:	3b01      	subs	r3, #1
   20f6e:	60a3      	str	r3, [r4, #8]
   20f70:	2b00      	cmp	r3, #0
   20f72:	da0f      	bge.n	20f94 <_puts_r+0xa8>
   20f74:	0022      	movs	r2, r4
   20f76:	310a      	adds	r1, #10
   20f78:	0028      	movs	r0, r5
   20f7a:	f000 fa0b 	bl	21394 <__swbuf_r>
   20f7e:	1c43      	adds	r3, r0, #1
   20f80:	d0d5      	beq.n	20f2e <_puts_r+0x42>
   20f82:	200a      	movs	r0, #10
   20f84:	e7d5      	b.n	20f32 <_puts_r+0x46>
   20f86:	0022      	movs	r2, r4
   20f88:	0028      	movs	r0, r5
   20f8a:	f000 fa03 	bl	21394 <__swbuf_r>
   20f8e:	1c43      	adds	r3, r0, #1
   20f90:	d1e8      	bne.n	20f64 <_puts_r+0x78>
   20f92:	e7cc      	b.n	20f2e <_puts_r+0x42>
   20f94:	200a      	movs	r0, #10
   20f96:	6823      	ldr	r3, [r4, #0]
   20f98:	1c5a      	adds	r2, r3, #1
   20f9a:	6022      	str	r2, [r4, #0]
   20f9c:	7018      	strb	r0, [r3, #0]
   20f9e:	e7c8      	b.n	20f32 <_puts_r+0x46>
   20fa0:	000271f4 	.word	0x000271f4
   20fa4:	00027214 	.word	0x00027214
   20fa8:	000271d4 	.word	0x000271d4

00020fac <puts>:
   20fac:	b510      	push	{r4, lr}
   20fae:	4b03      	ldr	r3, [pc, #12]	; (20fbc <puts+0x10>)
   20fb0:	0001      	movs	r1, r0
   20fb2:	6818      	ldr	r0, [r3, #0]
   20fb4:	f7ff ff9a 	bl	20eec <_puts_r>
   20fb8:	bd10      	pop	{r4, pc}
   20fba:	46c0      	nop			; (mov r8, r8)
   20fbc:	2000011c 	.word	0x2000011c

00020fc0 <_sbrk_r>:
   20fc0:	2300      	movs	r3, #0
   20fc2:	b570      	push	{r4, r5, r6, lr}
   20fc4:	4c06      	ldr	r4, [pc, #24]	; (20fe0 <_sbrk_r+0x20>)
   20fc6:	0005      	movs	r5, r0
   20fc8:	0008      	movs	r0, r1
   20fca:	6023      	str	r3, [r4, #0]
   20fcc:	f7f6 fb3c 	bl	17648 <_sbrk>
   20fd0:	1c43      	adds	r3, r0, #1
   20fd2:	d103      	bne.n	20fdc <_sbrk_r+0x1c>
   20fd4:	6823      	ldr	r3, [r4, #0]
   20fd6:	2b00      	cmp	r3, #0
   20fd8:	d000      	beq.n	20fdc <_sbrk_r+0x1c>
   20fda:	602b      	str	r3, [r5, #0]
   20fdc:	bd70      	pop	{r4, r5, r6, pc}
   20fde:	46c0      	nop			; (mov r8, r8)
   20fe0:	20005a94 	.word	0x20005a94

00020fe4 <sniprintf>:
   20fe4:	b40c      	push	{r2, r3}
   20fe6:	b530      	push	{r4, r5, lr}
   20fe8:	4b16      	ldr	r3, [pc, #88]	; (21044 <sniprintf+0x60>)
   20fea:	b09d      	sub	sp, #116	; 0x74
   20fec:	1e0c      	subs	r4, r1, #0
   20fee:	681d      	ldr	r5, [r3, #0]
   20ff0:	da08      	bge.n	21004 <sniprintf+0x20>
   20ff2:	238b      	movs	r3, #139	; 0x8b
   20ff4:	2001      	movs	r0, #1
   20ff6:	602b      	str	r3, [r5, #0]
   20ff8:	4240      	negs	r0, r0
   20ffa:	b01d      	add	sp, #116	; 0x74
   20ffc:	bc30      	pop	{r4, r5}
   20ffe:	bc08      	pop	{r3}
   21000:	b002      	add	sp, #8
   21002:	4718      	bx	r3
   21004:	2382      	movs	r3, #130	; 0x82
   21006:	a902      	add	r1, sp, #8
   21008:	009b      	lsls	r3, r3, #2
   2100a:	818b      	strh	r3, [r1, #12]
   2100c:	2300      	movs	r3, #0
   2100e:	9002      	str	r0, [sp, #8]
   21010:	6108      	str	r0, [r1, #16]
   21012:	429c      	cmp	r4, r3
   21014:	d000      	beq.n	21018 <sniprintf+0x34>
   21016:	1e63      	subs	r3, r4, #1
   21018:	608b      	str	r3, [r1, #8]
   2101a:	614b      	str	r3, [r1, #20]
   2101c:	2301      	movs	r3, #1
   2101e:	425b      	negs	r3, r3
   21020:	81cb      	strh	r3, [r1, #14]
   21022:	9a20      	ldr	r2, [sp, #128]	; 0x80
   21024:	ab21      	add	r3, sp, #132	; 0x84
   21026:	0028      	movs	r0, r5
   21028:	9301      	str	r3, [sp, #4]
   2102a:	f000 fcff 	bl	21a2c <_svfiprintf_r>
   2102e:	1c43      	adds	r3, r0, #1
   21030:	da01      	bge.n	21036 <sniprintf+0x52>
   21032:	238b      	movs	r3, #139	; 0x8b
   21034:	602b      	str	r3, [r5, #0]
   21036:	2c00      	cmp	r4, #0
   21038:	d0df      	beq.n	20ffa <sniprintf+0x16>
   2103a:	2300      	movs	r3, #0
   2103c:	9a02      	ldr	r2, [sp, #8]
   2103e:	7013      	strb	r3, [r2, #0]
   21040:	e7db      	b.n	20ffa <sniprintf+0x16>
   21042:	46c0      	nop			; (mov r8, r8)
   21044:	2000011c 	.word	0x2000011c

00021048 <siprintf>:
   21048:	b40e      	push	{r1, r2, r3}
   2104a:	b510      	push	{r4, lr}
   2104c:	b09d      	sub	sp, #116	; 0x74
   2104e:	a902      	add	r1, sp, #8
   21050:	9002      	str	r0, [sp, #8]
   21052:	6108      	str	r0, [r1, #16]
   21054:	480b      	ldr	r0, [pc, #44]	; (21084 <siprintf+0x3c>)
   21056:	2482      	movs	r4, #130	; 0x82
   21058:	6088      	str	r0, [r1, #8]
   2105a:	6148      	str	r0, [r1, #20]
   2105c:	2001      	movs	r0, #1
   2105e:	4240      	negs	r0, r0
   21060:	ab1f      	add	r3, sp, #124	; 0x7c
   21062:	81c8      	strh	r0, [r1, #14]
   21064:	4808      	ldr	r0, [pc, #32]	; (21088 <siprintf+0x40>)
   21066:	cb04      	ldmia	r3!, {r2}
   21068:	00a4      	lsls	r4, r4, #2
   2106a:	6800      	ldr	r0, [r0, #0]
   2106c:	9301      	str	r3, [sp, #4]
   2106e:	818c      	strh	r4, [r1, #12]
   21070:	f000 fcdc 	bl	21a2c <_svfiprintf_r>
   21074:	2300      	movs	r3, #0
   21076:	9a02      	ldr	r2, [sp, #8]
   21078:	7013      	strb	r3, [r2, #0]
   2107a:	b01d      	add	sp, #116	; 0x74
   2107c:	bc10      	pop	{r4}
   2107e:	bc08      	pop	{r3}
   21080:	b003      	add	sp, #12
   21082:	4718      	bx	r3
   21084:	7fffffff 	.word	0x7fffffff
   21088:	2000011c 	.word	0x2000011c

0002108c <strcasecmp>:
   2108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2108e:	0007      	movs	r7, r0
   21090:	000e      	movs	r6, r1
   21092:	783c      	ldrb	r4, [r7, #0]
   21094:	f000 fbda 	bl	2184c <__locale_ctype_ptr>
   21098:	2203      	movs	r2, #3
   2109a:	1900      	adds	r0, r0, r4
   2109c:	7843      	ldrb	r3, [r0, #1]
   2109e:	4013      	ands	r3, r2
   210a0:	2b01      	cmp	r3, #1
   210a2:	d100      	bne.n	210a6 <strcasecmp+0x1a>
   210a4:	3420      	adds	r4, #32
   210a6:	7835      	ldrb	r5, [r6, #0]
   210a8:	f000 fbd0 	bl	2184c <__locale_ctype_ptr>
   210ac:	2203      	movs	r2, #3
   210ae:	1940      	adds	r0, r0, r5
   210b0:	7843      	ldrb	r3, [r0, #1]
   210b2:	4013      	ands	r3, r2
   210b4:	2b01      	cmp	r3, #1
   210b6:	d100      	bne.n	210ba <strcasecmp+0x2e>
   210b8:	3520      	adds	r5, #32
   210ba:	1b60      	subs	r0, r4, r5
   210bc:	d103      	bne.n	210c6 <strcasecmp+0x3a>
   210be:	3701      	adds	r7, #1
   210c0:	3601      	adds	r6, #1
   210c2:	2d00      	cmp	r5, #0
   210c4:	d1e5      	bne.n	21092 <strcasecmp+0x6>
   210c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000210c8 <strcat>:
   210c8:	0002      	movs	r2, r0
   210ca:	b510      	push	{r4, lr}
   210cc:	7813      	ldrb	r3, [r2, #0]
   210ce:	2b00      	cmp	r3, #0
   210d0:	d105      	bne.n	210de <strcat+0x16>
   210d2:	5ccc      	ldrb	r4, [r1, r3]
   210d4:	54d4      	strb	r4, [r2, r3]
   210d6:	3301      	adds	r3, #1
   210d8:	2c00      	cmp	r4, #0
   210da:	d1fa      	bne.n	210d2 <strcat+0xa>
   210dc:	bd10      	pop	{r4, pc}
   210de:	3201      	adds	r2, #1
   210e0:	e7f4      	b.n	210cc <strcat+0x4>

000210e2 <strcmp>:
   210e2:	7802      	ldrb	r2, [r0, #0]
   210e4:	780b      	ldrb	r3, [r1, #0]
   210e6:	2a00      	cmp	r2, #0
   210e8:	d003      	beq.n	210f2 <strcmp+0x10>
   210ea:	3001      	adds	r0, #1
   210ec:	3101      	adds	r1, #1
   210ee:	429a      	cmp	r2, r3
   210f0:	d0f7      	beq.n	210e2 <strcmp>
   210f2:	1ad0      	subs	r0, r2, r3
   210f4:	4770      	bx	lr

000210f6 <strcpy>:
   210f6:	1c03      	adds	r3, r0, #0
   210f8:	780a      	ldrb	r2, [r1, #0]
   210fa:	3101      	adds	r1, #1
   210fc:	701a      	strb	r2, [r3, #0]
   210fe:	3301      	adds	r3, #1
   21100:	2a00      	cmp	r2, #0
   21102:	d1f9      	bne.n	210f8 <strcpy+0x2>
   21104:	4770      	bx	lr
	...

00021108 <strdup>:
   21108:	b510      	push	{r4, lr}
   2110a:	4b03      	ldr	r3, [pc, #12]	; (21118 <strdup+0x10>)
   2110c:	0001      	movs	r1, r0
   2110e:	6818      	ldr	r0, [r3, #0]
   21110:	f000 f804 	bl	2111c <_strdup_r>
   21114:	bd10      	pop	{r4, pc}
   21116:	46c0      	nop			; (mov r8, r8)
   21118:	2000011c 	.word	0x2000011c

0002111c <_strdup_r>:
   2111c:	b570      	push	{r4, r5, r6, lr}
   2111e:	0005      	movs	r5, r0
   21120:	0008      	movs	r0, r1
   21122:	000e      	movs	r6, r1
   21124:	f000 f80d 	bl	21142 <strlen>
   21128:	1c44      	adds	r4, r0, #1
   2112a:	0021      	movs	r1, r4
   2112c:	0028      	movs	r0, r5
   2112e:	f7ff fe7f 	bl	20e30 <_malloc_r>
   21132:	1e05      	subs	r5, r0, #0
   21134:	d003      	beq.n	2113e <_strdup_r+0x22>
   21136:	0022      	movs	r2, r4
   21138:	0031      	movs	r1, r6
   2113a:	f7ff fe0b 	bl	20d54 <memcpy>
   2113e:	0028      	movs	r0, r5
   21140:	bd70      	pop	{r4, r5, r6, pc}

00021142 <strlen>:
   21142:	2300      	movs	r3, #0
   21144:	5cc2      	ldrb	r2, [r0, r3]
   21146:	3301      	adds	r3, #1
   21148:	2a00      	cmp	r2, #0
   2114a:	d1fb      	bne.n	21144 <strlen+0x2>
   2114c:	1e58      	subs	r0, r3, #1
   2114e:	4770      	bx	lr

00021150 <strncmp>:
   21150:	2300      	movs	r3, #0
   21152:	b530      	push	{r4, r5, lr}
   21154:	429a      	cmp	r2, r3
   21156:	d00a      	beq.n	2116e <strncmp+0x1e>
   21158:	3a01      	subs	r2, #1
   2115a:	5cc4      	ldrb	r4, [r0, r3]
   2115c:	5ccd      	ldrb	r5, [r1, r3]
   2115e:	42ac      	cmp	r4, r5
   21160:	d104      	bne.n	2116c <strncmp+0x1c>
   21162:	429a      	cmp	r2, r3
   21164:	d002      	beq.n	2116c <strncmp+0x1c>
   21166:	3301      	adds	r3, #1
   21168:	2c00      	cmp	r4, #0
   2116a:	d1f6      	bne.n	2115a <strncmp+0xa>
   2116c:	1b63      	subs	r3, r4, r5
   2116e:	0018      	movs	r0, r3
   21170:	bd30      	pop	{r4, r5, pc}

00021172 <strncpy>:
   21172:	b570      	push	{r4, r5, r6, lr}
   21174:	0004      	movs	r4, r0
   21176:	2a00      	cmp	r2, #0
   21178:	d100      	bne.n	2117c <strncpy+0xa>
   2117a:	bd70      	pop	{r4, r5, r6, pc}
   2117c:	780d      	ldrb	r5, [r1, #0]
   2117e:	1e56      	subs	r6, r2, #1
   21180:	1c63      	adds	r3, r4, #1
   21182:	7025      	strb	r5, [r4, #0]
   21184:	3101      	adds	r1, #1
   21186:	2d00      	cmp	r5, #0
   21188:	d105      	bne.n	21196 <strncpy+0x24>
   2118a:	18a4      	adds	r4, r4, r2
   2118c:	429c      	cmp	r4, r3
   2118e:	d0f4      	beq.n	2117a <strncpy+0x8>
   21190:	701d      	strb	r5, [r3, #0]
   21192:	3301      	adds	r3, #1
   21194:	e7fa      	b.n	2118c <strncpy+0x1a>
   21196:	001c      	movs	r4, r3
   21198:	0032      	movs	r2, r6
   2119a:	e7ec      	b.n	21176 <strncpy+0x4>

0002119c <strrchr>:
   2119c:	b570      	push	{r4, r5, r6, lr}
   2119e:	000d      	movs	r5, r1
   211a0:	2400      	movs	r4, #0
   211a2:	2900      	cmp	r1, #0
   211a4:	d105      	bne.n	211b2 <strrchr+0x16>
   211a6:	f000 ff19 	bl	21fdc <strchr>
   211aa:	0004      	movs	r4, r0
   211ac:	e006      	b.n	211bc <strrchr+0x20>
   211ae:	001c      	movs	r4, r3
   211b0:	1c58      	adds	r0, r3, #1
   211b2:	0029      	movs	r1, r5
   211b4:	f000 ff12 	bl	21fdc <strchr>
   211b8:	1e03      	subs	r3, r0, #0
   211ba:	d1f8      	bne.n	211ae <strrchr+0x12>
   211bc:	0020      	movs	r0, r4
   211be:	bd70      	pop	{r4, r5, r6, pc}

000211c0 <strstr>:
   211c0:	b510      	push	{r4, lr}
   211c2:	0002      	movs	r2, r0
   211c4:	7800      	ldrb	r0, [r0, #0]
   211c6:	2800      	cmp	r0, #0
   211c8:	d104      	bne.n	211d4 <strstr+0x14>
   211ca:	7809      	ldrb	r1, [r1, #0]
   211cc:	2900      	cmp	r1, #0
   211ce:	d00d      	beq.n	211ec <strstr+0x2c>
   211d0:	bd10      	pop	{r4, pc}
   211d2:	3201      	adds	r2, #1
   211d4:	7810      	ldrb	r0, [r2, #0]
   211d6:	2800      	cmp	r0, #0
   211d8:	d0fa      	beq.n	211d0 <strstr+0x10>
   211da:	2300      	movs	r3, #0
   211dc:	5cc8      	ldrb	r0, [r1, r3]
   211de:	2800      	cmp	r0, #0
   211e0:	d004      	beq.n	211ec <strstr+0x2c>
   211e2:	5cd4      	ldrb	r4, [r2, r3]
   211e4:	4284      	cmp	r4, r0
   211e6:	d1f4      	bne.n	211d2 <strstr+0x12>
   211e8:	3301      	adds	r3, #1
   211ea:	e7f7      	b.n	211dc <strstr+0x1c>
   211ec:	0010      	movs	r0, r2
   211ee:	e7ef      	b.n	211d0 <strstr+0x10>

000211f0 <_strtol_l.isra.0>:
   211f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   211f2:	001f      	movs	r7, r3
   211f4:	000e      	movs	r6, r1
   211f6:	b087      	sub	sp, #28
   211f8:	9005      	str	r0, [sp, #20]
   211fa:	9103      	str	r1, [sp, #12]
   211fc:	9202      	str	r2, [sp, #8]
   211fe:	980c      	ldr	r0, [sp, #48]	; 0x30
   21200:	7834      	ldrb	r4, [r6, #0]
   21202:	f000 fb20 	bl	21846 <__locale_ctype_ptr_l>
   21206:	2208      	movs	r2, #8
   21208:	1900      	adds	r0, r0, r4
   2120a:	7843      	ldrb	r3, [r0, #1]
   2120c:	1c75      	adds	r5, r6, #1
   2120e:	4013      	ands	r3, r2
   21210:	d10c      	bne.n	2122c <_strtol_l.isra.0+0x3c>
   21212:	2c2d      	cmp	r4, #45	; 0x2d
   21214:	d10c      	bne.n	21230 <_strtol_l.isra.0+0x40>
   21216:	3301      	adds	r3, #1
   21218:	782c      	ldrb	r4, [r5, #0]
   2121a:	9301      	str	r3, [sp, #4]
   2121c:	1cb5      	adds	r5, r6, #2
   2121e:	2f00      	cmp	r7, #0
   21220:	d00c      	beq.n	2123c <_strtol_l.isra.0+0x4c>
   21222:	2f10      	cmp	r7, #16
   21224:	d114      	bne.n	21250 <_strtol_l.isra.0+0x60>
   21226:	2c30      	cmp	r4, #48	; 0x30
   21228:	d00a      	beq.n	21240 <_strtol_l.isra.0+0x50>
   2122a:	e011      	b.n	21250 <_strtol_l.isra.0+0x60>
   2122c:	002e      	movs	r6, r5
   2122e:	e7e6      	b.n	211fe <_strtol_l.isra.0+0xe>
   21230:	9301      	str	r3, [sp, #4]
   21232:	2c2b      	cmp	r4, #43	; 0x2b
   21234:	d1f3      	bne.n	2121e <_strtol_l.isra.0+0x2e>
   21236:	782c      	ldrb	r4, [r5, #0]
   21238:	1cb5      	adds	r5, r6, #2
   2123a:	e7f0      	b.n	2121e <_strtol_l.isra.0+0x2e>
   2123c:	2c30      	cmp	r4, #48	; 0x30
   2123e:	d12f      	bne.n	212a0 <_strtol_l.isra.0+0xb0>
   21240:	2220      	movs	r2, #32
   21242:	782b      	ldrb	r3, [r5, #0]
   21244:	4393      	bics	r3, r2
   21246:	2b58      	cmp	r3, #88	; 0x58
   21248:	d151      	bne.n	212ee <_strtol_l.isra.0+0xfe>
   2124a:	2710      	movs	r7, #16
   2124c:	786c      	ldrb	r4, [r5, #1]
   2124e:	3502      	adds	r5, #2
   21250:	9b01      	ldr	r3, [sp, #4]
   21252:	4a29      	ldr	r2, [pc, #164]	; (212f8 <_strtol_l.isra.0+0x108>)
   21254:	0039      	movs	r1, r7
   21256:	189e      	adds	r6, r3, r2
   21258:	0030      	movs	r0, r6
   2125a:	f7fd ffbf 	bl	1f1dc <__aeabi_uidivmod>
   2125e:	0030      	movs	r0, r6
   21260:	9104      	str	r1, [sp, #16]
   21262:	0039      	movs	r1, r7
   21264:	f7fd ff34 	bl	1f0d0 <__udivsi3>
   21268:	2101      	movs	r1, #1
   2126a:	2300      	movs	r3, #0
   2126c:	4249      	negs	r1, r1
   2126e:	0002      	movs	r2, r0
   21270:	468c      	mov	ip, r1
   21272:	0018      	movs	r0, r3
   21274:	0021      	movs	r1, r4
   21276:	3930      	subs	r1, #48	; 0x30
   21278:	2909      	cmp	r1, #9
   2127a:	d813      	bhi.n	212a4 <_strtol_l.isra.0+0xb4>
   2127c:	000c      	movs	r4, r1
   2127e:	42a7      	cmp	r7, r4
   21280:	dd1c      	ble.n	212bc <_strtol_l.isra.0+0xcc>
   21282:	1c59      	adds	r1, r3, #1
   21284:	d009      	beq.n	2129a <_strtol_l.isra.0+0xaa>
   21286:	4663      	mov	r3, ip
   21288:	4282      	cmp	r2, r0
   2128a:	d306      	bcc.n	2129a <_strtol_l.isra.0+0xaa>
   2128c:	d102      	bne.n	21294 <_strtol_l.isra.0+0xa4>
   2128e:	9904      	ldr	r1, [sp, #16]
   21290:	42a1      	cmp	r1, r4
   21292:	db02      	blt.n	2129a <_strtol_l.isra.0+0xaa>
   21294:	2301      	movs	r3, #1
   21296:	4378      	muls	r0, r7
   21298:	1820      	adds	r0, r4, r0
   2129a:	782c      	ldrb	r4, [r5, #0]
   2129c:	3501      	adds	r5, #1
   2129e:	e7e9      	b.n	21274 <_strtol_l.isra.0+0x84>
   212a0:	270a      	movs	r7, #10
   212a2:	e7d5      	b.n	21250 <_strtol_l.isra.0+0x60>
   212a4:	0021      	movs	r1, r4
   212a6:	3941      	subs	r1, #65	; 0x41
   212a8:	2919      	cmp	r1, #25
   212aa:	d801      	bhi.n	212b0 <_strtol_l.isra.0+0xc0>
   212ac:	3c37      	subs	r4, #55	; 0x37
   212ae:	e7e6      	b.n	2127e <_strtol_l.isra.0+0x8e>
   212b0:	0021      	movs	r1, r4
   212b2:	3961      	subs	r1, #97	; 0x61
   212b4:	2919      	cmp	r1, #25
   212b6:	d801      	bhi.n	212bc <_strtol_l.isra.0+0xcc>
   212b8:	3c57      	subs	r4, #87	; 0x57
   212ba:	e7e0      	b.n	2127e <_strtol_l.isra.0+0x8e>
   212bc:	1c5a      	adds	r2, r3, #1
   212be:	d108      	bne.n	212d2 <_strtol_l.isra.0+0xe2>
   212c0:	9a05      	ldr	r2, [sp, #20]
   212c2:	3323      	adds	r3, #35	; 0x23
   212c4:	6013      	str	r3, [r2, #0]
   212c6:	9b02      	ldr	r3, [sp, #8]
   212c8:	0030      	movs	r0, r6
   212ca:	2b00      	cmp	r3, #0
   212cc:	d10b      	bne.n	212e6 <_strtol_l.isra.0+0xf6>
   212ce:	b007      	add	sp, #28
   212d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   212d2:	9a01      	ldr	r2, [sp, #4]
   212d4:	2a00      	cmp	r2, #0
   212d6:	d000      	beq.n	212da <_strtol_l.isra.0+0xea>
   212d8:	4240      	negs	r0, r0
   212da:	9a02      	ldr	r2, [sp, #8]
   212dc:	2a00      	cmp	r2, #0
   212de:	d0f6      	beq.n	212ce <_strtol_l.isra.0+0xde>
   212e0:	9a03      	ldr	r2, [sp, #12]
   212e2:	2b00      	cmp	r3, #0
   212e4:	d000      	beq.n	212e8 <_strtol_l.isra.0+0xf8>
   212e6:	1e6a      	subs	r2, r5, #1
   212e8:	9b02      	ldr	r3, [sp, #8]
   212ea:	601a      	str	r2, [r3, #0]
   212ec:	e7ef      	b.n	212ce <_strtol_l.isra.0+0xde>
   212ee:	2430      	movs	r4, #48	; 0x30
   212f0:	2f00      	cmp	r7, #0
   212f2:	d1ad      	bne.n	21250 <_strtol_l.isra.0+0x60>
   212f4:	3708      	adds	r7, #8
   212f6:	e7ab      	b.n	21250 <_strtol_l.isra.0+0x60>
   212f8:	7fffffff 	.word	0x7fffffff

000212fc <strtol>:
   212fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   212fe:	0013      	movs	r3, r2
   21300:	4a06      	ldr	r2, [pc, #24]	; (2131c <strtol+0x20>)
   21302:	0005      	movs	r5, r0
   21304:	6810      	ldr	r0, [r2, #0]
   21306:	6a04      	ldr	r4, [r0, #32]
   21308:	2c00      	cmp	r4, #0
   2130a:	d100      	bne.n	2130e <strtol+0x12>
   2130c:	4c04      	ldr	r4, [pc, #16]	; (21320 <strtol+0x24>)
   2130e:	000a      	movs	r2, r1
   21310:	9400      	str	r4, [sp, #0]
   21312:	0029      	movs	r1, r5
   21314:	f7ff ff6c 	bl	211f0 <_strtol_l.isra.0>
   21318:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   2131a:	46c0      	nop			; (mov r8, r8)
   2131c:	2000011c 	.word	0x2000011c
   21320:	20000180 	.word	0x20000180

00021324 <_vsniprintf_r>:
   21324:	b530      	push	{r4, r5, lr}
   21326:	0014      	movs	r4, r2
   21328:	b09b      	sub	sp, #108	; 0x6c
   2132a:	0005      	movs	r5, r0
   2132c:	001a      	movs	r2, r3
   2132e:	2c00      	cmp	r4, #0
   21330:	da05      	bge.n	2133e <_vsniprintf_r+0x1a>
   21332:	238b      	movs	r3, #139	; 0x8b
   21334:	6003      	str	r3, [r0, #0]
   21336:	2001      	movs	r0, #1
   21338:	4240      	negs	r0, r0
   2133a:	b01b      	add	sp, #108	; 0x6c
   2133c:	bd30      	pop	{r4, r5, pc}
   2133e:	2382      	movs	r3, #130	; 0x82
   21340:	4668      	mov	r0, sp
   21342:	009b      	lsls	r3, r3, #2
   21344:	8183      	strh	r3, [r0, #12]
   21346:	2300      	movs	r3, #0
   21348:	9100      	str	r1, [sp, #0]
   2134a:	9104      	str	r1, [sp, #16]
   2134c:	429c      	cmp	r4, r3
   2134e:	d000      	beq.n	21352 <_vsniprintf_r+0x2e>
   21350:	1e63      	subs	r3, r4, #1
   21352:	9302      	str	r3, [sp, #8]
   21354:	9305      	str	r3, [sp, #20]
   21356:	2301      	movs	r3, #1
   21358:	4669      	mov	r1, sp
   2135a:	425b      	negs	r3, r3
   2135c:	81cb      	strh	r3, [r1, #14]
   2135e:	0028      	movs	r0, r5
   21360:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   21362:	f000 fb63 	bl	21a2c <_svfiprintf_r>
   21366:	1c43      	adds	r3, r0, #1
   21368:	da01      	bge.n	2136e <_vsniprintf_r+0x4a>
   2136a:	238b      	movs	r3, #139	; 0x8b
   2136c:	602b      	str	r3, [r5, #0]
   2136e:	2c00      	cmp	r4, #0
   21370:	d0e3      	beq.n	2133a <_vsniprintf_r+0x16>
   21372:	2300      	movs	r3, #0
   21374:	9a00      	ldr	r2, [sp, #0]
   21376:	7013      	strb	r3, [r2, #0]
   21378:	e7df      	b.n	2133a <_vsniprintf_r+0x16>
	...

0002137c <vsniprintf>:
   2137c:	b507      	push	{r0, r1, r2, lr}
   2137e:	9300      	str	r3, [sp, #0]
   21380:	0013      	movs	r3, r2
   21382:	000a      	movs	r2, r1
   21384:	0001      	movs	r1, r0
   21386:	4802      	ldr	r0, [pc, #8]	; (21390 <vsniprintf+0x14>)
   21388:	6800      	ldr	r0, [r0, #0]
   2138a:	f7ff ffcb 	bl	21324 <_vsniprintf_r>
   2138e:	bd0e      	pop	{r1, r2, r3, pc}
   21390:	2000011c 	.word	0x2000011c

00021394 <__swbuf_r>:
   21394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21396:	0005      	movs	r5, r0
   21398:	000e      	movs	r6, r1
   2139a:	0014      	movs	r4, r2
   2139c:	2800      	cmp	r0, #0
   2139e:	d004      	beq.n	213aa <__swbuf_r+0x16>
   213a0:	6983      	ldr	r3, [r0, #24]
   213a2:	2b00      	cmp	r3, #0
   213a4:	d101      	bne.n	213aa <__swbuf_r+0x16>
   213a6:	f000 f9b9 	bl	2171c <__sinit>
   213aa:	4b22      	ldr	r3, [pc, #136]	; (21434 <__swbuf_r+0xa0>)
   213ac:	429c      	cmp	r4, r3
   213ae:	d12d      	bne.n	2140c <__swbuf_r+0x78>
   213b0:	686c      	ldr	r4, [r5, #4]
   213b2:	69a3      	ldr	r3, [r4, #24]
   213b4:	60a3      	str	r3, [r4, #8]
   213b6:	89a3      	ldrh	r3, [r4, #12]
   213b8:	071b      	lsls	r3, r3, #28
   213ba:	d531      	bpl.n	21420 <__swbuf_r+0x8c>
   213bc:	6923      	ldr	r3, [r4, #16]
   213be:	2b00      	cmp	r3, #0
   213c0:	d02e      	beq.n	21420 <__swbuf_r+0x8c>
   213c2:	6823      	ldr	r3, [r4, #0]
   213c4:	6922      	ldr	r2, [r4, #16]
   213c6:	b2f7      	uxtb	r7, r6
   213c8:	1a98      	subs	r0, r3, r2
   213ca:	6963      	ldr	r3, [r4, #20]
   213cc:	b2f6      	uxtb	r6, r6
   213ce:	4298      	cmp	r0, r3
   213d0:	db05      	blt.n	213de <__swbuf_r+0x4a>
   213d2:	0021      	movs	r1, r4
   213d4:	0028      	movs	r0, r5
   213d6:	f000 f933 	bl	21640 <_fflush_r>
   213da:	2800      	cmp	r0, #0
   213dc:	d126      	bne.n	2142c <__swbuf_r+0x98>
   213de:	68a3      	ldr	r3, [r4, #8]
   213e0:	3001      	adds	r0, #1
   213e2:	3b01      	subs	r3, #1
   213e4:	60a3      	str	r3, [r4, #8]
   213e6:	6823      	ldr	r3, [r4, #0]
   213e8:	1c5a      	adds	r2, r3, #1
   213ea:	6022      	str	r2, [r4, #0]
   213ec:	701f      	strb	r7, [r3, #0]
   213ee:	6963      	ldr	r3, [r4, #20]
   213f0:	4298      	cmp	r0, r3
   213f2:	d004      	beq.n	213fe <__swbuf_r+0x6a>
   213f4:	89a3      	ldrh	r3, [r4, #12]
   213f6:	07db      	lsls	r3, r3, #31
   213f8:	d51a      	bpl.n	21430 <__swbuf_r+0x9c>
   213fa:	2e0a      	cmp	r6, #10
   213fc:	d118      	bne.n	21430 <__swbuf_r+0x9c>
   213fe:	0021      	movs	r1, r4
   21400:	0028      	movs	r0, r5
   21402:	f000 f91d 	bl	21640 <_fflush_r>
   21406:	2800      	cmp	r0, #0
   21408:	d012      	beq.n	21430 <__swbuf_r+0x9c>
   2140a:	e00f      	b.n	2142c <__swbuf_r+0x98>
   2140c:	4b0a      	ldr	r3, [pc, #40]	; (21438 <__swbuf_r+0xa4>)
   2140e:	429c      	cmp	r4, r3
   21410:	d101      	bne.n	21416 <__swbuf_r+0x82>
   21412:	68ac      	ldr	r4, [r5, #8]
   21414:	e7cd      	b.n	213b2 <__swbuf_r+0x1e>
   21416:	4b09      	ldr	r3, [pc, #36]	; (2143c <__swbuf_r+0xa8>)
   21418:	429c      	cmp	r4, r3
   2141a:	d1ca      	bne.n	213b2 <__swbuf_r+0x1e>
   2141c:	68ec      	ldr	r4, [r5, #12]
   2141e:	e7c8      	b.n	213b2 <__swbuf_r+0x1e>
   21420:	0021      	movs	r1, r4
   21422:	0028      	movs	r0, r5
   21424:	f000 f80c 	bl	21440 <__swsetup_r>
   21428:	2800      	cmp	r0, #0
   2142a:	d0ca      	beq.n	213c2 <__swbuf_r+0x2e>
   2142c:	2601      	movs	r6, #1
   2142e:	4276      	negs	r6, r6
   21430:	0030      	movs	r0, r6
   21432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21434:	000271f4 	.word	0x000271f4
   21438:	00027214 	.word	0x00027214
   2143c:	000271d4 	.word	0x000271d4

00021440 <__swsetup_r>:
   21440:	4b36      	ldr	r3, [pc, #216]	; (2151c <__swsetup_r+0xdc>)
   21442:	b570      	push	{r4, r5, r6, lr}
   21444:	681d      	ldr	r5, [r3, #0]
   21446:	0006      	movs	r6, r0
   21448:	000c      	movs	r4, r1
   2144a:	2d00      	cmp	r5, #0
   2144c:	d005      	beq.n	2145a <__swsetup_r+0x1a>
   2144e:	69ab      	ldr	r3, [r5, #24]
   21450:	2b00      	cmp	r3, #0
   21452:	d102      	bne.n	2145a <__swsetup_r+0x1a>
   21454:	0028      	movs	r0, r5
   21456:	f000 f961 	bl	2171c <__sinit>
   2145a:	4b31      	ldr	r3, [pc, #196]	; (21520 <__swsetup_r+0xe0>)
   2145c:	429c      	cmp	r4, r3
   2145e:	d10f      	bne.n	21480 <__swsetup_r+0x40>
   21460:	686c      	ldr	r4, [r5, #4]
   21462:	230c      	movs	r3, #12
   21464:	5ee2      	ldrsh	r2, [r4, r3]
   21466:	b293      	uxth	r3, r2
   21468:	0719      	lsls	r1, r3, #28
   2146a:	d42d      	bmi.n	214c8 <__swsetup_r+0x88>
   2146c:	06d9      	lsls	r1, r3, #27
   2146e:	d411      	bmi.n	21494 <__swsetup_r+0x54>
   21470:	2309      	movs	r3, #9
   21472:	2001      	movs	r0, #1
   21474:	6033      	str	r3, [r6, #0]
   21476:	3337      	adds	r3, #55	; 0x37
   21478:	4313      	orrs	r3, r2
   2147a:	81a3      	strh	r3, [r4, #12]
   2147c:	4240      	negs	r0, r0
   2147e:	bd70      	pop	{r4, r5, r6, pc}
   21480:	4b28      	ldr	r3, [pc, #160]	; (21524 <__swsetup_r+0xe4>)
   21482:	429c      	cmp	r4, r3
   21484:	d101      	bne.n	2148a <__swsetup_r+0x4a>
   21486:	68ac      	ldr	r4, [r5, #8]
   21488:	e7eb      	b.n	21462 <__swsetup_r+0x22>
   2148a:	4b27      	ldr	r3, [pc, #156]	; (21528 <__swsetup_r+0xe8>)
   2148c:	429c      	cmp	r4, r3
   2148e:	d1e8      	bne.n	21462 <__swsetup_r+0x22>
   21490:	68ec      	ldr	r4, [r5, #12]
   21492:	e7e6      	b.n	21462 <__swsetup_r+0x22>
   21494:	075b      	lsls	r3, r3, #29
   21496:	d513      	bpl.n	214c0 <__swsetup_r+0x80>
   21498:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2149a:	2900      	cmp	r1, #0
   2149c:	d008      	beq.n	214b0 <__swsetup_r+0x70>
   2149e:	0023      	movs	r3, r4
   214a0:	3344      	adds	r3, #68	; 0x44
   214a2:	4299      	cmp	r1, r3
   214a4:	d002      	beq.n	214ac <__swsetup_r+0x6c>
   214a6:	0030      	movs	r0, r6
   214a8:	f7ff fc78 	bl	20d9c <_free_r>
   214ac:	2300      	movs	r3, #0
   214ae:	6363      	str	r3, [r4, #52]	; 0x34
   214b0:	2224      	movs	r2, #36	; 0x24
   214b2:	89a3      	ldrh	r3, [r4, #12]
   214b4:	4393      	bics	r3, r2
   214b6:	81a3      	strh	r3, [r4, #12]
   214b8:	2300      	movs	r3, #0
   214ba:	6063      	str	r3, [r4, #4]
   214bc:	6923      	ldr	r3, [r4, #16]
   214be:	6023      	str	r3, [r4, #0]
   214c0:	2308      	movs	r3, #8
   214c2:	89a2      	ldrh	r2, [r4, #12]
   214c4:	4313      	orrs	r3, r2
   214c6:	81a3      	strh	r3, [r4, #12]
   214c8:	6923      	ldr	r3, [r4, #16]
   214ca:	2b00      	cmp	r3, #0
   214cc:	d10b      	bne.n	214e6 <__swsetup_r+0xa6>
   214ce:	21a0      	movs	r1, #160	; 0xa0
   214d0:	2280      	movs	r2, #128	; 0x80
   214d2:	89a3      	ldrh	r3, [r4, #12]
   214d4:	0089      	lsls	r1, r1, #2
   214d6:	0092      	lsls	r2, r2, #2
   214d8:	400b      	ands	r3, r1
   214da:	4293      	cmp	r3, r2
   214dc:	d003      	beq.n	214e6 <__swsetup_r+0xa6>
   214de:	0021      	movs	r1, r4
   214e0:	0030      	movs	r0, r6
   214e2:	f000 f9e9 	bl	218b8 <__smakebuf_r>
   214e6:	2301      	movs	r3, #1
   214e8:	89a2      	ldrh	r2, [r4, #12]
   214ea:	4013      	ands	r3, r2
   214ec:	d011      	beq.n	21512 <__swsetup_r+0xd2>
   214ee:	2300      	movs	r3, #0
   214f0:	60a3      	str	r3, [r4, #8]
   214f2:	6963      	ldr	r3, [r4, #20]
   214f4:	425b      	negs	r3, r3
   214f6:	61a3      	str	r3, [r4, #24]
   214f8:	2000      	movs	r0, #0
   214fa:	6923      	ldr	r3, [r4, #16]
   214fc:	4283      	cmp	r3, r0
   214fe:	d1be      	bne.n	2147e <__swsetup_r+0x3e>
   21500:	230c      	movs	r3, #12
   21502:	5ee2      	ldrsh	r2, [r4, r3]
   21504:	0613      	lsls	r3, r2, #24
   21506:	d5ba      	bpl.n	2147e <__swsetup_r+0x3e>
   21508:	2340      	movs	r3, #64	; 0x40
   2150a:	4313      	orrs	r3, r2
   2150c:	81a3      	strh	r3, [r4, #12]
   2150e:	3801      	subs	r0, #1
   21510:	e7b5      	b.n	2147e <__swsetup_r+0x3e>
   21512:	0792      	lsls	r2, r2, #30
   21514:	d400      	bmi.n	21518 <__swsetup_r+0xd8>
   21516:	6963      	ldr	r3, [r4, #20]
   21518:	60a3      	str	r3, [r4, #8]
   2151a:	e7ed      	b.n	214f8 <__swsetup_r+0xb8>
   2151c:	2000011c 	.word	0x2000011c
   21520:	000271f4 	.word	0x000271f4
   21524:	00027214 	.word	0x00027214
   21528:	000271d4 	.word	0x000271d4

0002152c <__sflush_r>:
   2152c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2152e:	898a      	ldrh	r2, [r1, #12]
   21530:	0005      	movs	r5, r0
   21532:	000c      	movs	r4, r1
   21534:	0713      	lsls	r3, r2, #28
   21536:	d460      	bmi.n	215fa <__sflush_r+0xce>
   21538:	684b      	ldr	r3, [r1, #4]
   2153a:	2b00      	cmp	r3, #0
   2153c:	dc04      	bgt.n	21548 <__sflush_r+0x1c>
   2153e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   21540:	2b00      	cmp	r3, #0
   21542:	dc01      	bgt.n	21548 <__sflush_r+0x1c>
   21544:	2000      	movs	r0, #0
   21546:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   21548:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   2154a:	2f00      	cmp	r7, #0
   2154c:	d0fa      	beq.n	21544 <__sflush_r+0x18>
   2154e:	2300      	movs	r3, #0
   21550:	682e      	ldr	r6, [r5, #0]
   21552:	602b      	str	r3, [r5, #0]
   21554:	2380      	movs	r3, #128	; 0x80
   21556:	015b      	lsls	r3, r3, #5
   21558:	401a      	ands	r2, r3
   2155a:	d034      	beq.n	215c6 <__sflush_r+0x9a>
   2155c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   2155e:	89a3      	ldrh	r3, [r4, #12]
   21560:	075b      	lsls	r3, r3, #29
   21562:	d506      	bpl.n	21572 <__sflush_r+0x46>
   21564:	6863      	ldr	r3, [r4, #4]
   21566:	1ac0      	subs	r0, r0, r3
   21568:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2156a:	2b00      	cmp	r3, #0
   2156c:	d001      	beq.n	21572 <__sflush_r+0x46>
   2156e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   21570:	1ac0      	subs	r0, r0, r3
   21572:	0002      	movs	r2, r0
   21574:	6a21      	ldr	r1, [r4, #32]
   21576:	2300      	movs	r3, #0
   21578:	0028      	movs	r0, r5
   2157a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   2157c:	47b8      	blx	r7
   2157e:	89a1      	ldrh	r1, [r4, #12]
   21580:	1c43      	adds	r3, r0, #1
   21582:	d106      	bne.n	21592 <__sflush_r+0x66>
   21584:	682b      	ldr	r3, [r5, #0]
   21586:	2b1d      	cmp	r3, #29
   21588:	d831      	bhi.n	215ee <__sflush_r+0xc2>
   2158a:	4a2c      	ldr	r2, [pc, #176]	; (2163c <__sflush_r+0x110>)
   2158c:	40da      	lsrs	r2, r3
   2158e:	07d3      	lsls	r3, r2, #31
   21590:	d52d      	bpl.n	215ee <__sflush_r+0xc2>
   21592:	2300      	movs	r3, #0
   21594:	6063      	str	r3, [r4, #4]
   21596:	6923      	ldr	r3, [r4, #16]
   21598:	6023      	str	r3, [r4, #0]
   2159a:	04cb      	lsls	r3, r1, #19
   2159c:	d505      	bpl.n	215aa <__sflush_r+0x7e>
   2159e:	1c43      	adds	r3, r0, #1
   215a0:	d102      	bne.n	215a8 <__sflush_r+0x7c>
   215a2:	682b      	ldr	r3, [r5, #0]
   215a4:	2b00      	cmp	r3, #0
   215a6:	d100      	bne.n	215aa <__sflush_r+0x7e>
   215a8:	6560      	str	r0, [r4, #84]	; 0x54
   215aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
   215ac:	602e      	str	r6, [r5, #0]
   215ae:	2900      	cmp	r1, #0
   215b0:	d0c8      	beq.n	21544 <__sflush_r+0x18>
   215b2:	0023      	movs	r3, r4
   215b4:	3344      	adds	r3, #68	; 0x44
   215b6:	4299      	cmp	r1, r3
   215b8:	d002      	beq.n	215c0 <__sflush_r+0x94>
   215ba:	0028      	movs	r0, r5
   215bc:	f7ff fbee 	bl	20d9c <_free_r>
   215c0:	2000      	movs	r0, #0
   215c2:	6360      	str	r0, [r4, #52]	; 0x34
   215c4:	e7bf      	b.n	21546 <__sflush_r+0x1a>
   215c6:	2301      	movs	r3, #1
   215c8:	6a21      	ldr	r1, [r4, #32]
   215ca:	0028      	movs	r0, r5
   215cc:	47b8      	blx	r7
   215ce:	1c43      	adds	r3, r0, #1
   215d0:	d1c5      	bne.n	2155e <__sflush_r+0x32>
   215d2:	682b      	ldr	r3, [r5, #0]
   215d4:	2b00      	cmp	r3, #0
   215d6:	d0c2      	beq.n	2155e <__sflush_r+0x32>
   215d8:	2b1d      	cmp	r3, #29
   215da:	d001      	beq.n	215e0 <__sflush_r+0xb4>
   215dc:	2b16      	cmp	r3, #22
   215de:	d101      	bne.n	215e4 <__sflush_r+0xb8>
   215e0:	602e      	str	r6, [r5, #0]
   215e2:	e7af      	b.n	21544 <__sflush_r+0x18>
   215e4:	2340      	movs	r3, #64	; 0x40
   215e6:	89a2      	ldrh	r2, [r4, #12]
   215e8:	4313      	orrs	r3, r2
   215ea:	81a3      	strh	r3, [r4, #12]
   215ec:	e7ab      	b.n	21546 <__sflush_r+0x1a>
   215ee:	2340      	movs	r3, #64	; 0x40
   215f0:	430b      	orrs	r3, r1
   215f2:	2001      	movs	r0, #1
   215f4:	81a3      	strh	r3, [r4, #12]
   215f6:	4240      	negs	r0, r0
   215f8:	e7a5      	b.n	21546 <__sflush_r+0x1a>
   215fa:	690f      	ldr	r7, [r1, #16]
   215fc:	2f00      	cmp	r7, #0
   215fe:	d0a1      	beq.n	21544 <__sflush_r+0x18>
   21600:	680b      	ldr	r3, [r1, #0]
   21602:	600f      	str	r7, [r1, #0]
   21604:	1bdb      	subs	r3, r3, r7
   21606:	9301      	str	r3, [sp, #4]
   21608:	2300      	movs	r3, #0
   2160a:	0792      	lsls	r2, r2, #30
   2160c:	d100      	bne.n	21610 <__sflush_r+0xe4>
   2160e:	694b      	ldr	r3, [r1, #20]
   21610:	60a3      	str	r3, [r4, #8]
   21612:	9b01      	ldr	r3, [sp, #4]
   21614:	2b00      	cmp	r3, #0
   21616:	dc00      	bgt.n	2161a <__sflush_r+0xee>
   21618:	e794      	b.n	21544 <__sflush_r+0x18>
   2161a:	9b01      	ldr	r3, [sp, #4]
   2161c:	003a      	movs	r2, r7
   2161e:	6a21      	ldr	r1, [r4, #32]
   21620:	0028      	movs	r0, r5
   21622:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   21624:	47b0      	blx	r6
   21626:	2800      	cmp	r0, #0
   21628:	dc03      	bgt.n	21632 <__sflush_r+0x106>
   2162a:	2340      	movs	r3, #64	; 0x40
   2162c:	89a2      	ldrh	r2, [r4, #12]
   2162e:	4313      	orrs	r3, r2
   21630:	e7df      	b.n	215f2 <__sflush_r+0xc6>
   21632:	9b01      	ldr	r3, [sp, #4]
   21634:	183f      	adds	r7, r7, r0
   21636:	1a1b      	subs	r3, r3, r0
   21638:	9301      	str	r3, [sp, #4]
   2163a:	e7ea      	b.n	21612 <__sflush_r+0xe6>
   2163c:	20400001 	.word	0x20400001

00021640 <_fflush_r>:
   21640:	690b      	ldr	r3, [r1, #16]
   21642:	b570      	push	{r4, r5, r6, lr}
   21644:	0005      	movs	r5, r0
   21646:	000c      	movs	r4, r1
   21648:	2b00      	cmp	r3, #0
   2164a:	d101      	bne.n	21650 <_fflush_r+0x10>
   2164c:	2000      	movs	r0, #0
   2164e:	bd70      	pop	{r4, r5, r6, pc}
   21650:	2800      	cmp	r0, #0
   21652:	d004      	beq.n	2165e <_fflush_r+0x1e>
   21654:	6983      	ldr	r3, [r0, #24]
   21656:	2b00      	cmp	r3, #0
   21658:	d101      	bne.n	2165e <_fflush_r+0x1e>
   2165a:	f000 f85f 	bl	2171c <__sinit>
   2165e:	4b0b      	ldr	r3, [pc, #44]	; (2168c <_fflush_r+0x4c>)
   21660:	429c      	cmp	r4, r3
   21662:	d109      	bne.n	21678 <_fflush_r+0x38>
   21664:	686c      	ldr	r4, [r5, #4]
   21666:	220c      	movs	r2, #12
   21668:	5ea3      	ldrsh	r3, [r4, r2]
   2166a:	2b00      	cmp	r3, #0
   2166c:	d0ee      	beq.n	2164c <_fflush_r+0xc>
   2166e:	0021      	movs	r1, r4
   21670:	0028      	movs	r0, r5
   21672:	f7ff ff5b 	bl	2152c <__sflush_r>
   21676:	e7ea      	b.n	2164e <_fflush_r+0xe>
   21678:	4b05      	ldr	r3, [pc, #20]	; (21690 <_fflush_r+0x50>)
   2167a:	429c      	cmp	r4, r3
   2167c:	d101      	bne.n	21682 <_fflush_r+0x42>
   2167e:	68ac      	ldr	r4, [r5, #8]
   21680:	e7f1      	b.n	21666 <_fflush_r+0x26>
   21682:	4b04      	ldr	r3, [pc, #16]	; (21694 <_fflush_r+0x54>)
   21684:	429c      	cmp	r4, r3
   21686:	d1ee      	bne.n	21666 <_fflush_r+0x26>
   21688:	68ec      	ldr	r4, [r5, #12]
   2168a:	e7ec      	b.n	21666 <_fflush_r+0x26>
   2168c:	000271f4 	.word	0x000271f4
   21690:	00027214 	.word	0x00027214
   21694:	000271d4 	.word	0x000271d4

00021698 <_cleanup_r>:
   21698:	b510      	push	{r4, lr}
   2169a:	4902      	ldr	r1, [pc, #8]	; (216a4 <_cleanup_r+0xc>)
   2169c:	f000 f8b2 	bl	21804 <_fwalk_reent>
   216a0:	bd10      	pop	{r4, pc}
   216a2:	46c0      	nop			; (mov r8, r8)
   216a4:	00021641 	.word	0x00021641

000216a8 <std.isra.0>:
   216a8:	2300      	movs	r3, #0
   216aa:	b510      	push	{r4, lr}
   216ac:	0004      	movs	r4, r0
   216ae:	6003      	str	r3, [r0, #0]
   216b0:	6043      	str	r3, [r0, #4]
   216b2:	6083      	str	r3, [r0, #8]
   216b4:	8181      	strh	r1, [r0, #12]
   216b6:	6643      	str	r3, [r0, #100]	; 0x64
   216b8:	81c2      	strh	r2, [r0, #14]
   216ba:	6103      	str	r3, [r0, #16]
   216bc:	6143      	str	r3, [r0, #20]
   216be:	6183      	str	r3, [r0, #24]
   216c0:	0019      	movs	r1, r3
   216c2:	2208      	movs	r2, #8
   216c4:	305c      	adds	r0, #92	; 0x5c
   216c6:	f7ff fb60 	bl	20d8a <memset>
   216ca:	4b05      	ldr	r3, [pc, #20]	; (216e0 <std.isra.0+0x38>)
   216cc:	6224      	str	r4, [r4, #32]
   216ce:	6263      	str	r3, [r4, #36]	; 0x24
   216d0:	4b04      	ldr	r3, [pc, #16]	; (216e4 <std.isra.0+0x3c>)
   216d2:	62a3      	str	r3, [r4, #40]	; 0x28
   216d4:	4b04      	ldr	r3, [pc, #16]	; (216e8 <std.isra.0+0x40>)
   216d6:	62e3      	str	r3, [r4, #44]	; 0x2c
   216d8:	4b04      	ldr	r3, [pc, #16]	; (216ec <std.isra.0+0x44>)
   216da:	6323      	str	r3, [r4, #48]	; 0x30
   216dc:	bd10      	pop	{r4, pc}
   216de:	46c0      	nop			; (mov r8, r8)
   216e0:	00021f45 	.word	0x00021f45
   216e4:	00021f6d 	.word	0x00021f6d
   216e8:	00021fa5 	.word	0x00021fa5
   216ec:	00021fd1 	.word	0x00021fd1

000216f0 <__sfmoreglue>:
   216f0:	b570      	push	{r4, r5, r6, lr}
   216f2:	2568      	movs	r5, #104	; 0x68
   216f4:	1e4a      	subs	r2, r1, #1
   216f6:	4355      	muls	r5, r2
   216f8:	000e      	movs	r6, r1
   216fa:	0029      	movs	r1, r5
   216fc:	3174      	adds	r1, #116	; 0x74
   216fe:	f7ff fb97 	bl	20e30 <_malloc_r>
   21702:	1e04      	subs	r4, r0, #0
   21704:	d008      	beq.n	21718 <__sfmoreglue+0x28>
   21706:	2100      	movs	r1, #0
   21708:	002a      	movs	r2, r5
   2170a:	6001      	str	r1, [r0, #0]
   2170c:	6046      	str	r6, [r0, #4]
   2170e:	300c      	adds	r0, #12
   21710:	60a0      	str	r0, [r4, #8]
   21712:	3268      	adds	r2, #104	; 0x68
   21714:	f7ff fb39 	bl	20d8a <memset>
   21718:	0020      	movs	r0, r4
   2171a:	bd70      	pop	{r4, r5, r6, pc}

0002171c <__sinit>:
   2171c:	6983      	ldr	r3, [r0, #24]
   2171e:	b513      	push	{r0, r1, r4, lr}
   21720:	0004      	movs	r4, r0
   21722:	2b00      	cmp	r3, #0
   21724:	d128      	bne.n	21778 <__sinit+0x5c>
   21726:	6483      	str	r3, [r0, #72]	; 0x48
   21728:	64c3      	str	r3, [r0, #76]	; 0x4c
   2172a:	6503      	str	r3, [r0, #80]	; 0x50
   2172c:	4b13      	ldr	r3, [pc, #76]	; (2177c <__sinit+0x60>)
   2172e:	4a14      	ldr	r2, [pc, #80]	; (21780 <__sinit+0x64>)
   21730:	681b      	ldr	r3, [r3, #0]
   21732:	6282      	str	r2, [r0, #40]	; 0x28
   21734:	9301      	str	r3, [sp, #4]
   21736:	4298      	cmp	r0, r3
   21738:	d101      	bne.n	2173e <__sinit+0x22>
   2173a:	2301      	movs	r3, #1
   2173c:	6183      	str	r3, [r0, #24]
   2173e:	0020      	movs	r0, r4
   21740:	f000 f820 	bl	21784 <__sfp>
   21744:	6060      	str	r0, [r4, #4]
   21746:	0020      	movs	r0, r4
   21748:	f000 f81c 	bl	21784 <__sfp>
   2174c:	60a0      	str	r0, [r4, #8]
   2174e:	0020      	movs	r0, r4
   21750:	f000 f818 	bl	21784 <__sfp>
   21754:	2200      	movs	r2, #0
   21756:	60e0      	str	r0, [r4, #12]
   21758:	2104      	movs	r1, #4
   2175a:	6860      	ldr	r0, [r4, #4]
   2175c:	f7ff ffa4 	bl	216a8 <std.isra.0>
   21760:	2201      	movs	r2, #1
   21762:	2109      	movs	r1, #9
   21764:	68a0      	ldr	r0, [r4, #8]
   21766:	f7ff ff9f 	bl	216a8 <std.isra.0>
   2176a:	2202      	movs	r2, #2
   2176c:	2112      	movs	r1, #18
   2176e:	68e0      	ldr	r0, [r4, #12]
   21770:	f7ff ff9a 	bl	216a8 <std.isra.0>
   21774:	2301      	movs	r3, #1
   21776:	61a3      	str	r3, [r4, #24]
   21778:	bd13      	pop	{r0, r1, r4, pc}
   2177a:	46c0      	nop			; (mov r8, r8)
   2177c:	000271d0 	.word	0x000271d0
   21780:	00021699 	.word	0x00021699

00021784 <__sfp>:
   21784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21786:	4b1e      	ldr	r3, [pc, #120]	; (21800 <__sfp+0x7c>)
   21788:	0007      	movs	r7, r0
   2178a:	681e      	ldr	r6, [r3, #0]
   2178c:	69b3      	ldr	r3, [r6, #24]
   2178e:	2b00      	cmp	r3, #0
   21790:	d102      	bne.n	21798 <__sfp+0x14>
   21792:	0030      	movs	r0, r6
   21794:	f7ff ffc2 	bl	2171c <__sinit>
   21798:	3648      	adds	r6, #72	; 0x48
   2179a:	68b4      	ldr	r4, [r6, #8]
   2179c:	6873      	ldr	r3, [r6, #4]
   2179e:	3b01      	subs	r3, #1
   217a0:	d504      	bpl.n	217ac <__sfp+0x28>
   217a2:	6833      	ldr	r3, [r6, #0]
   217a4:	2b00      	cmp	r3, #0
   217a6:	d007      	beq.n	217b8 <__sfp+0x34>
   217a8:	6836      	ldr	r6, [r6, #0]
   217aa:	e7f6      	b.n	2179a <__sfp+0x16>
   217ac:	220c      	movs	r2, #12
   217ae:	5ea5      	ldrsh	r5, [r4, r2]
   217b0:	2d00      	cmp	r5, #0
   217b2:	d00d      	beq.n	217d0 <__sfp+0x4c>
   217b4:	3468      	adds	r4, #104	; 0x68
   217b6:	e7f2      	b.n	2179e <__sfp+0x1a>
   217b8:	2104      	movs	r1, #4
   217ba:	0038      	movs	r0, r7
   217bc:	f7ff ff98 	bl	216f0 <__sfmoreglue>
   217c0:	6030      	str	r0, [r6, #0]
   217c2:	2800      	cmp	r0, #0
   217c4:	d1f0      	bne.n	217a8 <__sfp+0x24>
   217c6:	230c      	movs	r3, #12
   217c8:	0004      	movs	r4, r0
   217ca:	603b      	str	r3, [r7, #0]
   217cc:	0020      	movs	r0, r4
   217ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   217d0:	2301      	movs	r3, #1
   217d2:	0020      	movs	r0, r4
   217d4:	425b      	negs	r3, r3
   217d6:	81e3      	strh	r3, [r4, #14]
   217d8:	3302      	adds	r3, #2
   217da:	81a3      	strh	r3, [r4, #12]
   217dc:	6665      	str	r5, [r4, #100]	; 0x64
   217de:	6025      	str	r5, [r4, #0]
   217e0:	60a5      	str	r5, [r4, #8]
   217e2:	6065      	str	r5, [r4, #4]
   217e4:	6125      	str	r5, [r4, #16]
   217e6:	6165      	str	r5, [r4, #20]
   217e8:	61a5      	str	r5, [r4, #24]
   217ea:	2208      	movs	r2, #8
   217ec:	0029      	movs	r1, r5
   217ee:	305c      	adds	r0, #92	; 0x5c
   217f0:	f7ff facb 	bl	20d8a <memset>
   217f4:	6365      	str	r5, [r4, #52]	; 0x34
   217f6:	63a5      	str	r5, [r4, #56]	; 0x38
   217f8:	64a5      	str	r5, [r4, #72]	; 0x48
   217fa:	64e5      	str	r5, [r4, #76]	; 0x4c
   217fc:	e7e6      	b.n	217cc <__sfp+0x48>
   217fe:	46c0      	nop			; (mov r8, r8)
   21800:	000271d0 	.word	0x000271d0

00021804 <_fwalk_reent>:
   21804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21806:	0004      	movs	r4, r0
   21808:	0007      	movs	r7, r0
   2180a:	2600      	movs	r6, #0
   2180c:	9101      	str	r1, [sp, #4]
   2180e:	3448      	adds	r4, #72	; 0x48
   21810:	2c00      	cmp	r4, #0
   21812:	d101      	bne.n	21818 <_fwalk_reent+0x14>
   21814:	0030      	movs	r0, r6
   21816:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   21818:	6863      	ldr	r3, [r4, #4]
   2181a:	68a5      	ldr	r5, [r4, #8]
   2181c:	9300      	str	r3, [sp, #0]
   2181e:	9b00      	ldr	r3, [sp, #0]
   21820:	3b01      	subs	r3, #1
   21822:	9300      	str	r3, [sp, #0]
   21824:	d501      	bpl.n	2182a <_fwalk_reent+0x26>
   21826:	6824      	ldr	r4, [r4, #0]
   21828:	e7f2      	b.n	21810 <_fwalk_reent+0xc>
   2182a:	89ab      	ldrh	r3, [r5, #12]
   2182c:	2b01      	cmp	r3, #1
   2182e:	d908      	bls.n	21842 <_fwalk_reent+0x3e>
   21830:	220e      	movs	r2, #14
   21832:	5eab      	ldrsh	r3, [r5, r2]
   21834:	3301      	adds	r3, #1
   21836:	d004      	beq.n	21842 <_fwalk_reent+0x3e>
   21838:	0029      	movs	r1, r5
   2183a:	0038      	movs	r0, r7
   2183c:	9b01      	ldr	r3, [sp, #4]
   2183e:	4798      	blx	r3
   21840:	4306      	orrs	r6, r0
   21842:	3568      	adds	r5, #104	; 0x68
   21844:	e7eb      	b.n	2181e <_fwalk_reent+0x1a>

00021846 <__locale_ctype_ptr_l>:
   21846:	30ec      	adds	r0, #236	; 0xec
   21848:	6800      	ldr	r0, [r0, #0]
   2184a:	4770      	bx	lr

0002184c <__locale_ctype_ptr>:
   2184c:	4b04      	ldr	r3, [pc, #16]	; (21860 <__locale_ctype_ptr+0x14>)
   2184e:	681b      	ldr	r3, [r3, #0]
   21850:	6a1b      	ldr	r3, [r3, #32]
   21852:	2b00      	cmp	r3, #0
   21854:	d100      	bne.n	21858 <__locale_ctype_ptr+0xc>
   21856:	4b03      	ldr	r3, [pc, #12]	; (21864 <__locale_ctype_ptr+0x18>)
   21858:	33ec      	adds	r3, #236	; 0xec
   2185a:	6818      	ldr	r0, [r3, #0]
   2185c:	4770      	bx	lr
   2185e:	46c0      	nop			; (mov r8, r8)
   21860:	2000011c 	.word	0x2000011c
   21864:	20000180 	.word	0x20000180

00021868 <__swhatbuf_r>:
   21868:	b570      	push	{r4, r5, r6, lr}
   2186a:	000e      	movs	r6, r1
   2186c:	001d      	movs	r5, r3
   2186e:	230e      	movs	r3, #14
   21870:	5ec9      	ldrsh	r1, [r1, r3]
   21872:	b090      	sub	sp, #64	; 0x40
   21874:	0014      	movs	r4, r2
   21876:	2900      	cmp	r1, #0
   21878:	da07      	bge.n	2188a <__swhatbuf_r+0x22>
   2187a:	2300      	movs	r3, #0
   2187c:	602b      	str	r3, [r5, #0]
   2187e:	89b3      	ldrh	r3, [r6, #12]
   21880:	061b      	lsls	r3, r3, #24
   21882:	d411      	bmi.n	218a8 <__swhatbuf_r+0x40>
   21884:	2380      	movs	r3, #128	; 0x80
   21886:	00db      	lsls	r3, r3, #3
   21888:	e00f      	b.n	218aa <__swhatbuf_r+0x42>
   2188a:	aa01      	add	r2, sp, #4
   2188c:	f000 fbe6 	bl	2205c <_fstat_r>
   21890:	2800      	cmp	r0, #0
   21892:	dbf2      	blt.n	2187a <__swhatbuf_r+0x12>
   21894:	22f0      	movs	r2, #240	; 0xf0
   21896:	9b02      	ldr	r3, [sp, #8]
   21898:	0212      	lsls	r2, r2, #8
   2189a:	4013      	ands	r3, r2
   2189c:	4a05      	ldr	r2, [pc, #20]	; (218b4 <__swhatbuf_r+0x4c>)
   2189e:	189b      	adds	r3, r3, r2
   218a0:	425a      	negs	r2, r3
   218a2:	4153      	adcs	r3, r2
   218a4:	602b      	str	r3, [r5, #0]
   218a6:	e7ed      	b.n	21884 <__swhatbuf_r+0x1c>
   218a8:	2340      	movs	r3, #64	; 0x40
   218aa:	2000      	movs	r0, #0
   218ac:	6023      	str	r3, [r4, #0]
   218ae:	b010      	add	sp, #64	; 0x40
   218b0:	bd70      	pop	{r4, r5, r6, pc}
   218b2:	46c0      	nop			; (mov r8, r8)
   218b4:	ffffe000 	.word	0xffffe000

000218b8 <__smakebuf_r>:
   218b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   218ba:	2602      	movs	r6, #2
   218bc:	898b      	ldrh	r3, [r1, #12]
   218be:	0005      	movs	r5, r0
   218c0:	000c      	movs	r4, r1
   218c2:	4233      	tst	r3, r6
   218c4:	d006      	beq.n	218d4 <__smakebuf_r+0x1c>
   218c6:	0023      	movs	r3, r4
   218c8:	3347      	adds	r3, #71	; 0x47
   218ca:	6023      	str	r3, [r4, #0]
   218cc:	6123      	str	r3, [r4, #16]
   218ce:	2301      	movs	r3, #1
   218d0:	6163      	str	r3, [r4, #20]
   218d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   218d4:	ab01      	add	r3, sp, #4
   218d6:	466a      	mov	r2, sp
   218d8:	f7ff ffc6 	bl	21868 <__swhatbuf_r>
   218dc:	9900      	ldr	r1, [sp, #0]
   218de:	0007      	movs	r7, r0
   218e0:	0028      	movs	r0, r5
   218e2:	f7ff faa5 	bl	20e30 <_malloc_r>
   218e6:	2800      	cmp	r0, #0
   218e8:	d108      	bne.n	218fc <__smakebuf_r+0x44>
   218ea:	220c      	movs	r2, #12
   218ec:	5ea3      	ldrsh	r3, [r4, r2]
   218ee:	059a      	lsls	r2, r3, #22
   218f0:	d4ef      	bmi.n	218d2 <__smakebuf_r+0x1a>
   218f2:	2203      	movs	r2, #3
   218f4:	4393      	bics	r3, r2
   218f6:	431e      	orrs	r6, r3
   218f8:	81a6      	strh	r6, [r4, #12]
   218fa:	e7e4      	b.n	218c6 <__smakebuf_r+0xe>
   218fc:	4b0f      	ldr	r3, [pc, #60]	; (2193c <__smakebuf_r+0x84>)
   218fe:	62ab      	str	r3, [r5, #40]	; 0x28
   21900:	2380      	movs	r3, #128	; 0x80
   21902:	89a2      	ldrh	r2, [r4, #12]
   21904:	6020      	str	r0, [r4, #0]
   21906:	4313      	orrs	r3, r2
   21908:	81a3      	strh	r3, [r4, #12]
   2190a:	9b00      	ldr	r3, [sp, #0]
   2190c:	6120      	str	r0, [r4, #16]
   2190e:	6163      	str	r3, [r4, #20]
   21910:	9b01      	ldr	r3, [sp, #4]
   21912:	2b00      	cmp	r3, #0
   21914:	d00d      	beq.n	21932 <__smakebuf_r+0x7a>
   21916:	230e      	movs	r3, #14
   21918:	5ee1      	ldrsh	r1, [r4, r3]
   2191a:	0028      	movs	r0, r5
   2191c:	f000 fbb0 	bl	22080 <_isatty_r>
   21920:	2800      	cmp	r0, #0
   21922:	d006      	beq.n	21932 <__smakebuf_r+0x7a>
   21924:	2203      	movs	r2, #3
   21926:	89a3      	ldrh	r3, [r4, #12]
   21928:	4393      	bics	r3, r2
   2192a:	001a      	movs	r2, r3
   2192c:	2301      	movs	r3, #1
   2192e:	4313      	orrs	r3, r2
   21930:	81a3      	strh	r3, [r4, #12]
   21932:	89a0      	ldrh	r0, [r4, #12]
   21934:	4338      	orrs	r0, r7
   21936:	81a0      	strh	r0, [r4, #12]
   21938:	e7cb      	b.n	218d2 <__smakebuf_r+0x1a>
   2193a:	46c0      	nop			; (mov r8, r8)
   2193c:	00021699 	.word	0x00021699

00021940 <__ascii_mbtowc>:
   21940:	b082      	sub	sp, #8
   21942:	2900      	cmp	r1, #0
   21944:	d100      	bne.n	21948 <__ascii_mbtowc+0x8>
   21946:	a901      	add	r1, sp, #4
   21948:	1e10      	subs	r0, r2, #0
   2194a:	d006      	beq.n	2195a <__ascii_mbtowc+0x1a>
   2194c:	2b00      	cmp	r3, #0
   2194e:	d006      	beq.n	2195e <__ascii_mbtowc+0x1e>
   21950:	7813      	ldrb	r3, [r2, #0]
   21952:	600b      	str	r3, [r1, #0]
   21954:	7810      	ldrb	r0, [r2, #0]
   21956:	1e43      	subs	r3, r0, #1
   21958:	4198      	sbcs	r0, r3
   2195a:	b002      	add	sp, #8
   2195c:	4770      	bx	lr
   2195e:	2002      	movs	r0, #2
   21960:	4240      	negs	r0, r0
   21962:	e7fa      	b.n	2195a <__ascii_mbtowc+0x1a>

00021964 <__malloc_lock>:
   21964:	4770      	bx	lr

00021966 <__malloc_unlock>:
   21966:	4770      	bx	lr

00021968 <__ssputs_r>:
   21968:	b5f0      	push	{r4, r5, r6, r7, lr}
   2196a:	688e      	ldr	r6, [r1, #8]
   2196c:	b085      	sub	sp, #20
   2196e:	0007      	movs	r7, r0
   21970:	000c      	movs	r4, r1
   21972:	9203      	str	r2, [sp, #12]
   21974:	9301      	str	r3, [sp, #4]
   21976:	429e      	cmp	r6, r3
   21978:	d839      	bhi.n	219ee <__ssputs_r+0x86>
   2197a:	2390      	movs	r3, #144	; 0x90
   2197c:	898a      	ldrh	r2, [r1, #12]
   2197e:	00db      	lsls	r3, r3, #3
   21980:	421a      	tst	r2, r3
   21982:	d034      	beq.n	219ee <__ssputs_r+0x86>
   21984:	2503      	movs	r5, #3
   21986:	6909      	ldr	r1, [r1, #16]
   21988:	6823      	ldr	r3, [r4, #0]
   2198a:	1a5b      	subs	r3, r3, r1
   2198c:	9302      	str	r3, [sp, #8]
   2198e:	6963      	ldr	r3, [r4, #20]
   21990:	9802      	ldr	r0, [sp, #8]
   21992:	435d      	muls	r5, r3
   21994:	0feb      	lsrs	r3, r5, #31
   21996:	195d      	adds	r5, r3, r5
   21998:	9b01      	ldr	r3, [sp, #4]
   2199a:	106d      	asrs	r5, r5, #1
   2199c:	3301      	adds	r3, #1
   2199e:	181b      	adds	r3, r3, r0
   219a0:	42ab      	cmp	r3, r5
   219a2:	d900      	bls.n	219a6 <__ssputs_r+0x3e>
   219a4:	001d      	movs	r5, r3
   219a6:	0553      	lsls	r3, r2, #21
   219a8:	d532      	bpl.n	21a10 <__ssputs_r+0xa8>
   219aa:	0029      	movs	r1, r5
   219ac:	0038      	movs	r0, r7
   219ae:	f7ff fa3f 	bl	20e30 <_malloc_r>
   219b2:	1e06      	subs	r6, r0, #0
   219b4:	d109      	bne.n	219ca <__ssputs_r+0x62>
   219b6:	230c      	movs	r3, #12
   219b8:	603b      	str	r3, [r7, #0]
   219ba:	2340      	movs	r3, #64	; 0x40
   219bc:	2001      	movs	r0, #1
   219be:	89a2      	ldrh	r2, [r4, #12]
   219c0:	4240      	negs	r0, r0
   219c2:	4313      	orrs	r3, r2
   219c4:	81a3      	strh	r3, [r4, #12]
   219c6:	b005      	add	sp, #20
   219c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   219ca:	9a02      	ldr	r2, [sp, #8]
   219cc:	6921      	ldr	r1, [r4, #16]
   219ce:	f7ff f9c1 	bl	20d54 <memcpy>
   219d2:	89a3      	ldrh	r3, [r4, #12]
   219d4:	4a14      	ldr	r2, [pc, #80]	; (21a28 <__ssputs_r+0xc0>)
   219d6:	401a      	ands	r2, r3
   219d8:	2380      	movs	r3, #128	; 0x80
   219da:	4313      	orrs	r3, r2
   219dc:	81a3      	strh	r3, [r4, #12]
   219de:	9b02      	ldr	r3, [sp, #8]
   219e0:	6126      	str	r6, [r4, #16]
   219e2:	18f6      	adds	r6, r6, r3
   219e4:	6026      	str	r6, [r4, #0]
   219e6:	6165      	str	r5, [r4, #20]
   219e8:	9e01      	ldr	r6, [sp, #4]
   219ea:	1aed      	subs	r5, r5, r3
   219ec:	60a5      	str	r5, [r4, #8]
   219ee:	9b01      	ldr	r3, [sp, #4]
   219f0:	42b3      	cmp	r3, r6
   219f2:	d200      	bcs.n	219f6 <__ssputs_r+0x8e>
   219f4:	001e      	movs	r6, r3
   219f6:	0032      	movs	r2, r6
   219f8:	9903      	ldr	r1, [sp, #12]
   219fa:	6820      	ldr	r0, [r4, #0]
   219fc:	f7ff f9b3 	bl	20d66 <memmove>
   21a00:	68a3      	ldr	r3, [r4, #8]
   21a02:	2000      	movs	r0, #0
   21a04:	1b9b      	subs	r3, r3, r6
   21a06:	60a3      	str	r3, [r4, #8]
   21a08:	6823      	ldr	r3, [r4, #0]
   21a0a:	199e      	adds	r6, r3, r6
   21a0c:	6026      	str	r6, [r4, #0]
   21a0e:	e7da      	b.n	219c6 <__ssputs_r+0x5e>
   21a10:	002a      	movs	r2, r5
   21a12:	0038      	movs	r0, r7
   21a14:	f000 fb65 	bl	220e2 <_realloc_r>
   21a18:	1e06      	subs	r6, r0, #0
   21a1a:	d1e0      	bne.n	219de <__ssputs_r+0x76>
   21a1c:	6921      	ldr	r1, [r4, #16]
   21a1e:	0038      	movs	r0, r7
   21a20:	f7ff f9bc 	bl	20d9c <_free_r>
   21a24:	e7c7      	b.n	219b6 <__ssputs_r+0x4e>
   21a26:	46c0      	nop			; (mov r8, r8)
   21a28:	fffffb7f 	.word	0xfffffb7f

00021a2c <_svfiprintf_r>:
   21a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a2e:	b09f      	sub	sp, #124	; 0x7c
   21a30:	9002      	str	r0, [sp, #8]
   21a32:	9305      	str	r3, [sp, #20]
   21a34:	898b      	ldrh	r3, [r1, #12]
   21a36:	000f      	movs	r7, r1
   21a38:	0016      	movs	r6, r2
   21a3a:	061b      	lsls	r3, r3, #24
   21a3c:	d511      	bpl.n	21a62 <_svfiprintf_r+0x36>
   21a3e:	690b      	ldr	r3, [r1, #16]
   21a40:	2b00      	cmp	r3, #0
   21a42:	d10e      	bne.n	21a62 <_svfiprintf_r+0x36>
   21a44:	2140      	movs	r1, #64	; 0x40
   21a46:	f7ff f9f3 	bl	20e30 <_malloc_r>
   21a4a:	6038      	str	r0, [r7, #0]
   21a4c:	6138      	str	r0, [r7, #16]
   21a4e:	2800      	cmp	r0, #0
   21a50:	d105      	bne.n	21a5e <_svfiprintf_r+0x32>
   21a52:	230c      	movs	r3, #12
   21a54:	9a02      	ldr	r2, [sp, #8]
   21a56:	3801      	subs	r0, #1
   21a58:	6013      	str	r3, [r2, #0]
   21a5a:	b01f      	add	sp, #124	; 0x7c
   21a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21a5e:	2340      	movs	r3, #64	; 0x40
   21a60:	617b      	str	r3, [r7, #20]
   21a62:	2300      	movs	r3, #0
   21a64:	ad06      	add	r5, sp, #24
   21a66:	616b      	str	r3, [r5, #20]
   21a68:	3320      	adds	r3, #32
   21a6a:	766b      	strb	r3, [r5, #25]
   21a6c:	3310      	adds	r3, #16
   21a6e:	76ab      	strb	r3, [r5, #26]
   21a70:	0034      	movs	r4, r6
   21a72:	7823      	ldrb	r3, [r4, #0]
   21a74:	2b00      	cmp	r3, #0
   21a76:	d147      	bne.n	21b08 <_svfiprintf_r+0xdc>
   21a78:	1ba3      	subs	r3, r4, r6
   21a7a:	9304      	str	r3, [sp, #16]
   21a7c:	d00d      	beq.n	21a9a <_svfiprintf_r+0x6e>
   21a7e:	1ba3      	subs	r3, r4, r6
   21a80:	0032      	movs	r2, r6
   21a82:	0039      	movs	r1, r7
   21a84:	9802      	ldr	r0, [sp, #8]
   21a86:	f7ff ff6f 	bl	21968 <__ssputs_r>
   21a8a:	1c43      	adds	r3, r0, #1
   21a8c:	d100      	bne.n	21a90 <_svfiprintf_r+0x64>
   21a8e:	e0b5      	b.n	21bfc <_svfiprintf_r+0x1d0>
   21a90:	696a      	ldr	r2, [r5, #20]
   21a92:	9b04      	ldr	r3, [sp, #16]
   21a94:	4694      	mov	ip, r2
   21a96:	4463      	add	r3, ip
   21a98:	616b      	str	r3, [r5, #20]
   21a9a:	7823      	ldrb	r3, [r4, #0]
   21a9c:	2b00      	cmp	r3, #0
   21a9e:	d100      	bne.n	21aa2 <_svfiprintf_r+0x76>
   21aa0:	e0ac      	b.n	21bfc <_svfiprintf_r+0x1d0>
   21aa2:	2201      	movs	r2, #1
   21aa4:	2300      	movs	r3, #0
   21aa6:	4252      	negs	r2, r2
   21aa8:	606a      	str	r2, [r5, #4]
   21aaa:	a902      	add	r1, sp, #8
   21aac:	3254      	adds	r2, #84	; 0x54
   21aae:	1852      	adds	r2, r2, r1
   21ab0:	3401      	adds	r4, #1
   21ab2:	602b      	str	r3, [r5, #0]
   21ab4:	60eb      	str	r3, [r5, #12]
   21ab6:	60ab      	str	r3, [r5, #8]
   21ab8:	7013      	strb	r3, [r2, #0]
   21aba:	65ab      	str	r3, [r5, #88]	; 0x58
   21abc:	4e58      	ldr	r6, [pc, #352]	; (21c20 <_svfiprintf_r+0x1f4>)
   21abe:	2205      	movs	r2, #5
   21ac0:	7821      	ldrb	r1, [r4, #0]
   21ac2:	0030      	movs	r0, r6
   21ac4:	f000 fb02 	bl	220cc <memchr>
   21ac8:	1c62      	adds	r2, r4, #1
   21aca:	2800      	cmp	r0, #0
   21acc:	d120      	bne.n	21b10 <_svfiprintf_r+0xe4>
   21ace:	6829      	ldr	r1, [r5, #0]
   21ad0:	06cb      	lsls	r3, r1, #27
   21ad2:	d504      	bpl.n	21ade <_svfiprintf_r+0xb2>
   21ad4:	2353      	movs	r3, #83	; 0x53
   21ad6:	ae02      	add	r6, sp, #8
   21ad8:	3020      	adds	r0, #32
   21ada:	199b      	adds	r3, r3, r6
   21adc:	7018      	strb	r0, [r3, #0]
   21ade:	070b      	lsls	r3, r1, #28
   21ae0:	d504      	bpl.n	21aec <_svfiprintf_r+0xc0>
   21ae2:	2353      	movs	r3, #83	; 0x53
   21ae4:	202b      	movs	r0, #43	; 0x2b
   21ae6:	ae02      	add	r6, sp, #8
   21ae8:	199b      	adds	r3, r3, r6
   21aea:	7018      	strb	r0, [r3, #0]
   21aec:	7823      	ldrb	r3, [r4, #0]
   21aee:	2b2a      	cmp	r3, #42	; 0x2a
   21af0:	d016      	beq.n	21b20 <_svfiprintf_r+0xf4>
   21af2:	2000      	movs	r0, #0
   21af4:	210a      	movs	r1, #10
   21af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21af8:	7822      	ldrb	r2, [r4, #0]
   21afa:	3a30      	subs	r2, #48	; 0x30
   21afc:	2a09      	cmp	r2, #9
   21afe:	d955      	bls.n	21bac <_svfiprintf_r+0x180>
   21b00:	2800      	cmp	r0, #0
   21b02:	d015      	beq.n	21b30 <_svfiprintf_r+0x104>
   21b04:	9309      	str	r3, [sp, #36]	; 0x24
   21b06:	e013      	b.n	21b30 <_svfiprintf_r+0x104>
   21b08:	2b25      	cmp	r3, #37	; 0x25
   21b0a:	d0b5      	beq.n	21a78 <_svfiprintf_r+0x4c>
   21b0c:	3401      	adds	r4, #1
   21b0e:	e7b0      	b.n	21a72 <_svfiprintf_r+0x46>
   21b10:	2301      	movs	r3, #1
   21b12:	1b80      	subs	r0, r0, r6
   21b14:	4083      	lsls	r3, r0
   21b16:	6829      	ldr	r1, [r5, #0]
   21b18:	0014      	movs	r4, r2
   21b1a:	430b      	orrs	r3, r1
   21b1c:	602b      	str	r3, [r5, #0]
   21b1e:	e7cd      	b.n	21abc <_svfiprintf_r+0x90>
   21b20:	9b05      	ldr	r3, [sp, #20]
   21b22:	1d18      	adds	r0, r3, #4
   21b24:	681b      	ldr	r3, [r3, #0]
   21b26:	9005      	str	r0, [sp, #20]
   21b28:	2b00      	cmp	r3, #0
   21b2a:	db39      	blt.n	21ba0 <_svfiprintf_r+0x174>
   21b2c:	9309      	str	r3, [sp, #36]	; 0x24
   21b2e:	0014      	movs	r4, r2
   21b30:	7823      	ldrb	r3, [r4, #0]
   21b32:	2b2e      	cmp	r3, #46	; 0x2e
   21b34:	d10b      	bne.n	21b4e <_svfiprintf_r+0x122>
   21b36:	7863      	ldrb	r3, [r4, #1]
   21b38:	1c62      	adds	r2, r4, #1
   21b3a:	2b2a      	cmp	r3, #42	; 0x2a
   21b3c:	d13e      	bne.n	21bbc <_svfiprintf_r+0x190>
   21b3e:	9b05      	ldr	r3, [sp, #20]
   21b40:	3402      	adds	r4, #2
   21b42:	1d1a      	adds	r2, r3, #4
   21b44:	681b      	ldr	r3, [r3, #0]
   21b46:	9205      	str	r2, [sp, #20]
   21b48:	2b00      	cmp	r3, #0
   21b4a:	db34      	blt.n	21bb6 <_svfiprintf_r+0x18a>
   21b4c:	9307      	str	r3, [sp, #28]
   21b4e:	4e35      	ldr	r6, [pc, #212]	; (21c24 <_svfiprintf_r+0x1f8>)
   21b50:	7821      	ldrb	r1, [r4, #0]
   21b52:	2203      	movs	r2, #3
   21b54:	0030      	movs	r0, r6
   21b56:	f000 fab9 	bl	220cc <memchr>
   21b5a:	2800      	cmp	r0, #0
   21b5c:	d006      	beq.n	21b6c <_svfiprintf_r+0x140>
   21b5e:	2340      	movs	r3, #64	; 0x40
   21b60:	1b80      	subs	r0, r0, r6
   21b62:	4083      	lsls	r3, r0
   21b64:	682a      	ldr	r2, [r5, #0]
   21b66:	3401      	adds	r4, #1
   21b68:	4313      	orrs	r3, r2
   21b6a:	602b      	str	r3, [r5, #0]
   21b6c:	7821      	ldrb	r1, [r4, #0]
   21b6e:	2206      	movs	r2, #6
   21b70:	482d      	ldr	r0, [pc, #180]	; (21c28 <_svfiprintf_r+0x1fc>)
   21b72:	1c66      	adds	r6, r4, #1
   21b74:	7629      	strb	r1, [r5, #24]
   21b76:	f000 faa9 	bl	220cc <memchr>
   21b7a:	2800      	cmp	r0, #0
   21b7c:	d046      	beq.n	21c0c <_svfiprintf_r+0x1e0>
   21b7e:	4b2b      	ldr	r3, [pc, #172]	; (21c2c <_svfiprintf_r+0x200>)
   21b80:	2b00      	cmp	r3, #0
   21b82:	d12f      	bne.n	21be4 <_svfiprintf_r+0x1b8>
   21b84:	6829      	ldr	r1, [r5, #0]
   21b86:	9b05      	ldr	r3, [sp, #20]
   21b88:	2207      	movs	r2, #7
   21b8a:	05c9      	lsls	r1, r1, #23
   21b8c:	d528      	bpl.n	21be0 <_svfiprintf_r+0x1b4>
   21b8e:	189b      	adds	r3, r3, r2
   21b90:	4393      	bics	r3, r2
   21b92:	3308      	adds	r3, #8
   21b94:	9305      	str	r3, [sp, #20]
   21b96:	696b      	ldr	r3, [r5, #20]
   21b98:	9a03      	ldr	r2, [sp, #12]
   21b9a:	189b      	adds	r3, r3, r2
   21b9c:	616b      	str	r3, [r5, #20]
   21b9e:	e767      	b.n	21a70 <_svfiprintf_r+0x44>
   21ba0:	425b      	negs	r3, r3
   21ba2:	60eb      	str	r3, [r5, #12]
   21ba4:	2302      	movs	r3, #2
   21ba6:	430b      	orrs	r3, r1
   21ba8:	602b      	str	r3, [r5, #0]
   21baa:	e7c0      	b.n	21b2e <_svfiprintf_r+0x102>
   21bac:	434b      	muls	r3, r1
   21bae:	3401      	adds	r4, #1
   21bb0:	189b      	adds	r3, r3, r2
   21bb2:	2001      	movs	r0, #1
   21bb4:	e7a0      	b.n	21af8 <_svfiprintf_r+0xcc>
   21bb6:	2301      	movs	r3, #1
   21bb8:	425b      	negs	r3, r3
   21bba:	e7c7      	b.n	21b4c <_svfiprintf_r+0x120>
   21bbc:	2300      	movs	r3, #0
   21bbe:	0014      	movs	r4, r2
   21bc0:	200a      	movs	r0, #10
   21bc2:	001a      	movs	r2, r3
   21bc4:	606b      	str	r3, [r5, #4]
   21bc6:	7821      	ldrb	r1, [r4, #0]
   21bc8:	3930      	subs	r1, #48	; 0x30
   21bca:	2909      	cmp	r1, #9
   21bcc:	d903      	bls.n	21bd6 <_svfiprintf_r+0x1aa>
   21bce:	2b00      	cmp	r3, #0
   21bd0:	d0bd      	beq.n	21b4e <_svfiprintf_r+0x122>
   21bd2:	9207      	str	r2, [sp, #28]
   21bd4:	e7bb      	b.n	21b4e <_svfiprintf_r+0x122>
   21bd6:	4342      	muls	r2, r0
   21bd8:	3401      	adds	r4, #1
   21bda:	1852      	adds	r2, r2, r1
   21bdc:	2301      	movs	r3, #1
   21bde:	e7f2      	b.n	21bc6 <_svfiprintf_r+0x19a>
   21be0:	3307      	adds	r3, #7
   21be2:	e7d5      	b.n	21b90 <_svfiprintf_r+0x164>
   21be4:	ab05      	add	r3, sp, #20
   21be6:	9300      	str	r3, [sp, #0]
   21be8:	003a      	movs	r2, r7
   21bea:	4b11      	ldr	r3, [pc, #68]	; (21c30 <_svfiprintf_r+0x204>)
   21bec:	0029      	movs	r1, r5
   21bee:	9802      	ldr	r0, [sp, #8]
   21bf0:	e000      	b.n	21bf4 <_svfiprintf_r+0x1c8>
   21bf2:	bf00      	nop
   21bf4:	9003      	str	r0, [sp, #12]
   21bf6:	9b03      	ldr	r3, [sp, #12]
   21bf8:	3301      	adds	r3, #1
   21bfa:	d1cc      	bne.n	21b96 <_svfiprintf_r+0x16a>
   21bfc:	89bb      	ldrh	r3, [r7, #12]
   21bfe:	980b      	ldr	r0, [sp, #44]	; 0x2c
   21c00:	065b      	lsls	r3, r3, #25
   21c02:	d400      	bmi.n	21c06 <_svfiprintf_r+0x1da>
   21c04:	e729      	b.n	21a5a <_svfiprintf_r+0x2e>
   21c06:	2001      	movs	r0, #1
   21c08:	4240      	negs	r0, r0
   21c0a:	e726      	b.n	21a5a <_svfiprintf_r+0x2e>
   21c0c:	ab05      	add	r3, sp, #20
   21c0e:	9300      	str	r3, [sp, #0]
   21c10:	003a      	movs	r2, r7
   21c12:	4b07      	ldr	r3, [pc, #28]	; (21c30 <_svfiprintf_r+0x204>)
   21c14:	0029      	movs	r1, r5
   21c16:	9802      	ldr	r0, [sp, #8]
   21c18:	f000 f87a 	bl	21d10 <_printf_i>
   21c1c:	e7ea      	b.n	21bf4 <_svfiprintf_r+0x1c8>
   21c1e:	46c0      	nop			; (mov r8, r8)
   21c20:	0002723e 	.word	0x0002723e
   21c24:	00027244 	.word	0x00027244
   21c28:	00027248 	.word	0x00027248
   21c2c:	00000000 	.word	0x00000000
   21c30:	00021969 	.word	0x00021969

00021c34 <_printf_common>:
   21c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21c36:	0015      	movs	r5, r2
   21c38:	9301      	str	r3, [sp, #4]
   21c3a:	688a      	ldr	r2, [r1, #8]
   21c3c:	690b      	ldr	r3, [r1, #16]
   21c3e:	9000      	str	r0, [sp, #0]
   21c40:	000c      	movs	r4, r1
   21c42:	4293      	cmp	r3, r2
   21c44:	da00      	bge.n	21c48 <_printf_common+0x14>
   21c46:	0013      	movs	r3, r2
   21c48:	0022      	movs	r2, r4
   21c4a:	602b      	str	r3, [r5, #0]
   21c4c:	3243      	adds	r2, #67	; 0x43
   21c4e:	7812      	ldrb	r2, [r2, #0]
   21c50:	2a00      	cmp	r2, #0
   21c52:	d001      	beq.n	21c58 <_printf_common+0x24>
   21c54:	3301      	adds	r3, #1
   21c56:	602b      	str	r3, [r5, #0]
   21c58:	6823      	ldr	r3, [r4, #0]
   21c5a:	069b      	lsls	r3, r3, #26
   21c5c:	d502      	bpl.n	21c64 <_printf_common+0x30>
   21c5e:	682b      	ldr	r3, [r5, #0]
   21c60:	3302      	adds	r3, #2
   21c62:	602b      	str	r3, [r5, #0]
   21c64:	2706      	movs	r7, #6
   21c66:	6823      	ldr	r3, [r4, #0]
   21c68:	401f      	ands	r7, r3
   21c6a:	d027      	beq.n	21cbc <_printf_common+0x88>
   21c6c:	0023      	movs	r3, r4
   21c6e:	3343      	adds	r3, #67	; 0x43
   21c70:	781b      	ldrb	r3, [r3, #0]
   21c72:	1e5a      	subs	r2, r3, #1
   21c74:	4193      	sbcs	r3, r2
   21c76:	6822      	ldr	r2, [r4, #0]
   21c78:	0692      	lsls	r2, r2, #26
   21c7a:	d430      	bmi.n	21cde <_printf_common+0xaa>
   21c7c:	0022      	movs	r2, r4
   21c7e:	9901      	ldr	r1, [sp, #4]
   21c80:	3243      	adds	r2, #67	; 0x43
   21c82:	9800      	ldr	r0, [sp, #0]
   21c84:	9e08      	ldr	r6, [sp, #32]
   21c86:	47b0      	blx	r6
   21c88:	1c43      	adds	r3, r0, #1
   21c8a:	d025      	beq.n	21cd8 <_printf_common+0xa4>
   21c8c:	2306      	movs	r3, #6
   21c8e:	6820      	ldr	r0, [r4, #0]
   21c90:	682a      	ldr	r2, [r5, #0]
   21c92:	68e1      	ldr	r1, [r4, #12]
   21c94:	4003      	ands	r3, r0
   21c96:	2500      	movs	r5, #0
   21c98:	2b04      	cmp	r3, #4
   21c9a:	d103      	bne.n	21ca4 <_printf_common+0x70>
   21c9c:	1a8d      	subs	r5, r1, r2
   21c9e:	43eb      	mvns	r3, r5
   21ca0:	17db      	asrs	r3, r3, #31
   21ca2:	401d      	ands	r5, r3
   21ca4:	68a3      	ldr	r3, [r4, #8]
   21ca6:	6922      	ldr	r2, [r4, #16]
   21ca8:	4293      	cmp	r3, r2
   21caa:	dd01      	ble.n	21cb0 <_printf_common+0x7c>
   21cac:	1a9b      	subs	r3, r3, r2
   21cae:	18ed      	adds	r5, r5, r3
   21cb0:	2700      	movs	r7, #0
   21cb2:	42bd      	cmp	r5, r7
   21cb4:	d120      	bne.n	21cf8 <_printf_common+0xc4>
   21cb6:	2000      	movs	r0, #0
   21cb8:	e010      	b.n	21cdc <_printf_common+0xa8>
   21cba:	3701      	adds	r7, #1
   21cbc:	68e3      	ldr	r3, [r4, #12]
   21cbe:	682a      	ldr	r2, [r5, #0]
   21cc0:	1a9b      	subs	r3, r3, r2
   21cc2:	429f      	cmp	r7, r3
   21cc4:	dad2      	bge.n	21c6c <_printf_common+0x38>
   21cc6:	0022      	movs	r2, r4
   21cc8:	2301      	movs	r3, #1
   21cca:	3219      	adds	r2, #25
   21ccc:	9901      	ldr	r1, [sp, #4]
   21cce:	9800      	ldr	r0, [sp, #0]
   21cd0:	9e08      	ldr	r6, [sp, #32]
   21cd2:	47b0      	blx	r6
   21cd4:	1c43      	adds	r3, r0, #1
   21cd6:	d1f0      	bne.n	21cba <_printf_common+0x86>
   21cd8:	2001      	movs	r0, #1
   21cda:	4240      	negs	r0, r0
   21cdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   21cde:	2030      	movs	r0, #48	; 0x30
   21ce0:	18e1      	adds	r1, r4, r3
   21ce2:	3143      	adds	r1, #67	; 0x43
   21ce4:	7008      	strb	r0, [r1, #0]
   21ce6:	0021      	movs	r1, r4
   21ce8:	1c5a      	adds	r2, r3, #1
   21cea:	3145      	adds	r1, #69	; 0x45
   21cec:	7809      	ldrb	r1, [r1, #0]
   21cee:	18a2      	adds	r2, r4, r2
   21cf0:	3243      	adds	r2, #67	; 0x43
   21cf2:	3302      	adds	r3, #2
   21cf4:	7011      	strb	r1, [r2, #0]
   21cf6:	e7c1      	b.n	21c7c <_printf_common+0x48>
   21cf8:	0022      	movs	r2, r4
   21cfa:	2301      	movs	r3, #1
   21cfc:	321a      	adds	r2, #26
   21cfe:	9901      	ldr	r1, [sp, #4]
   21d00:	9800      	ldr	r0, [sp, #0]
   21d02:	9e08      	ldr	r6, [sp, #32]
   21d04:	47b0      	blx	r6
   21d06:	1c43      	adds	r3, r0, #1
   21d08:	d0e6      	beq.n	21cd8 <_printf_common+0xa4>
   21d0a:	3701      	adds	r7, #1
   21d0c:	e7d1      	b.n	21cb2 <_printf_common+0x7e>
	...

00021d10 <_printf_i>:
   21d10:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d12:	b08b      	sub	sp, #44	; 0x2c
   21d14:	9206      	str	r2, [sp, #24]
   21d16:	000a      	movs	r2, r1
   21d18:	3243      	adds	r2, #67	; 0x43
   21d1a:	9307      	str	r3, [sp, #28]
   21d1c:	9005      	str	r0, [sp, #20]
   21d1e:	9204      	str	r2, [sp, #16]
   21d20:	7e0a      	ldrb	r2, [r1, #24]
   21d22:	000c      	movs	r4, r1
   21d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21d26:	2a6e      	cmp	r2, #110	; 0x6e
   21d28:	d100      	bne.n	21d2c <_printf_i+0x1c>
   21d2a:	e08f      	b.n	21e4c <_printf_i+0x13c>
   21d2c:	d817      	bhi.n	21d5e <_printf_i+0x4e>
   21d2e:	2a63      	cmp	r2, #99	; 0x63
   21d30:	d02c      	beq.n	21d8c <_printf_i+0x7c>
   21d32:	d808      	bhi.n	21d46 <_printf_i+0x36>
   21d34:	2a00      	cmp	r2, #0
   21d36:	d100      	bne.n	21d3a <_printf_i+0x2a>
   21d38:	e099      	b.n	21e6e <_printf_i+0x15e>
   21d3a:	2a58      	cmp	r2, #88	; 0x58
   21d3c:	d054      	beq.n	21de8 <_printf_i+0xd8>
   21d3e:	0026      	movs	r6, r4
   21d40:	3642      	adds	r6, #66	; 0x42
   21d42:	7032      	strb	r2, [r6, #0]
   21d44:	e029      	b.n	21d9a <_printf_i+0x8a>
   21d46:	2a64      	cmp	r2, #100	; 0x64
   21d48:	d001      	beq.n	21d4e <_printf_i+0x3e>
   21d4a:	2a69      	cmp	r2, #105	; 0x69
   21d4c:	d1f7      	bne.n	21d3e <_printf_i+0x2e>
   21d4e:	6821      	ldr	r1, [r4, #0]
   21d50:	681a      	ldr	r2, [r3, #0]
   21d52:	0608      	lsls	r0, r1, #24
   21d54:	d523      	bpl.n	21d9e <_printf_i+0x8e>
   21d56:	1d11      	adds	r1, r2, #4
   21d58:	6019      	str	r1, [r3, #0]
   21d5a:	6815      	ldr	r5, [r2, #0]
   21d5c:	e025      	b.n	21daa <_printf_i+0x9a>
   21d5e:	2a73      	cmp	r2, #115	; 0x73
   21d60:	d100      	bne.n	21d64 <_printf_i+0x54>
   21d62:	e088      	b.n	21e76 <_printf_i+0x166>
   21d64:	d808      	bhi.n	21d78 <_printf_i+0x68>
   21d66:	2a6f      	cmp	r2, #111	; 0x6f
   21d68:	d029      	beq.n	21dbe <_printf_i+0xae>
   21d6a:	2a70      	cmp	r2, #112	; 0x70
   21d6c:	d1e7      	bne.n	21d3e <_printf_i+0x2e>
   21d6e:	2220      	movs	r2, #32
   21d70:	6809      	ldr	r1, [r1, #0]
   21d72:	430a      	orrs	r2, r1
   21d74:	6022      	str	r2, [r4, #0]
   21d76:	e003      	b.n	21d80 <_printf_i+0x70>
   21d78:	2a75      	cmp	r2, #117	; 0x75
   21d7a:	d020      	beq.n	21dbe <_printf_i+0xae>
   21d7c:	2a78      	cmp	r2, #120	; 0x78
   21d7e:	d1de      	bne.n	21d3e <_printf_i+0x2e>
   21d80:	0022      	movs	r2, r4
   21d82:	2178      	movs	r1, #120	; 0x78
   21d84:	3245      	adds	r2, #69	; 0x45
   21d86:	7011      	strb	r1, [r2, #0]
   21d88:	4a6c      	ldr	r2, [pc, #432]	; (21f3c <_printf_i+0x22c>)
   21d8a:	e030      	b.n	21dee <_printf_i+0xde>
   21d8c:	000e      	movs	r6, r1
   21d8e:	681a      	ldr	r2, [r3, #0]
   21d90:	3642      	adds	r6, #66	; 0x42
   21d92:	1d11      	adds	r1, r2, #4
   21d94:	6019      	str	r1, [r3, #0]
   21d96:	6813      	ldr	r3, [r2, #0]
   21d98:	7033      	strb	r3, [r6, #0]
   21d9a:	2301      	movs	r3, #1
   21d9c:	e079      	b.n	21e92 <_printf_i+0x182>
   21d9e:	0649      	lsls	r1, r1, #25
   21da0:	d5d9      	bpl.n	21d56 <_printf_i+0x46>
   21da2:	1d11      	adds	r1, r2, #4
   21da4:	6019      	str	r1, [r3, #0]
   21da6:	2300      	movs	r3, #0
   21da8:	5ed5      	ldrsh	r5, [r2, r3]
   21daa:	2d00      	cmp	r5, #0
   21dac:	da03      	bge.n	21db6 <_printf_i+0xa6>
   21dae:	232d      	movs	r3, #45	; 0x2d
   21db0:	9a04      	ldr	r2, [sp, #16]
   21db2:	426d      	negs	r5, r5
   21db4:	7013      	strb	r3, [r2, #0]
   21db6:	4b62      	ldr	r3, [pc, #392]	; (21f40 <_printf_i+0x230>)
   21db8:	270a      	movs	r7, #10
   21dba:	9303      	str	r3, [sp, #12]
   21dbc:	e02f      	b.n	21e1e <_printf_i+0x10e>
   21dbe:	6820      	ldr	r0, [r4, #0]
   21dc0:	6819      	ldr	r1, [r3, #0]
   21dc2:	0605      	lsls	r5, r0, #24
   21dc4:	d503      	bpl.n	21dce <_printf_i+0xbe>
   21dc6:	1d08      	adds	r0, r1, #4
   21dc8:	6018      	str	r0, [r3, #0]
   21dca:	680d      	ldr	r5, [r1, #0]
   21dcc:	e005      	b.n	21dda <_printf_i+0xca>
   21dce:	0640      	lsls	r0, r0, #25
   21dd0:	d5f9      	bpl.n	21dc6 <_printf_i+0xb6>
   21dd2:	680d      	ldr	r5, [r1, #0]
   21dd4:	1d08      	adds	r0, r1, #4
   21dd6:	6018      	str	r0, [r3, #0]
   21dd8:	b2ad      	uxth	r5, r5
   21dda:	4b59      	ldr	r3, [pc, #356]	; (21f40 <_printf_i+0x230>)
   21ddc:	2708      	movs	r7, #8
   21dde:	9303      	str	r3, [sp, #12]
   21de0:	2a6f      	cmp	r2, #111	; 0x6f
   21de2:	d018      	beq.n	21e16 <_printf_i+0x106>
   21de4:	270a      	movs	r7, #10
   21de6:	e016      	b.n	21e16 <_printf_i+0x106>
   21de8:	3145      	adds	r1, #69	; 0x45
   21dea:	700a      	strb	r2, [r1, #0]
   21dec:	4a54      	ldr	r2, [pc, #336]	; (21f40 <_printf_i+0x230>)
   21dee:	9203      	str	r2, [sp, #12]
   21df0:	681a      	ldr	r2, [r3, #0]
   21df2:	6821      	ldr	r1, [r4, #0]
   21df4:	1d10      	adds	r0, r2, #4
   21df6:	6018      	str	r0, [r3, #0]
   21df8:	6815      	ldr	r5, [r2, #0]
   21dfa:	0608      	lsls	r0, r1, #24
   21dfc:	d522      	bpl.n	21e44 <_printf_i+0x134>
   21dfe:	07cb      	lsls	r3, r1, #31
   21e00:	d502      	bpl.n	21e08 <_printf_i+0xf8>
   21e02:	2320      	movs	r3, #32
   21e04:	4319      	orrs	r1, r3
   21e06:	6021      	str	r1, [r4, #0]
   21e08:	2710      	movs	r7, #16
   21e0a:	2d00      	cmp	r5, #0
   21e0c:	d103      	bne.n	21e16 <_printf_i+0x106>
   21e0e:	2320      	movs	r3, #32
   21e10:	6822      	ldr	r2, [r4, #0]
   21e12:	439a      	bics	r2, r3
   21e14:	6022      	str	r2, [r4, #0]
   21e16:	0023      	movs	r3, r4
   21e18:	2200      	movs	r2, #0
   21e1a:	3343      	adds	r3, #67	; 0x43
   21e1c:	701a      	strb	r2, [r3, #0]
   21e1e:	6863      	ldr	r3, [r4, #4]
   21e20:	60a3      	str	r3, [r4, #8]
   21e22:	2b00      	cmp	r3, #0
   21e24:	db5c      	blt.n	21ee0 <_printf_i+0x1d0>
   21e26:	2204      	movs	r2, #4
   21e28:	6821      	ldr	r1, [r4, #0]
   21e2a:	4391      	bics	r1, r2
   21e2c:	6021      	str	r1, [r4, #0]
   21e2e:	2d00      	cmp	r5, #0
   21e30:	d158      	bne.n	21ee4 <_printf_i+0x1d4>
   21e32:	9e04      	ldr	r6, [sp, #16]
   21e34:	2b00      	cmp	r3, #0
   21e36:	d064      	beq.n	21f02 <_printf_i+0x1f2>
   21e38:	0026      	movs	r6, r4
   21e3a:	9b03      	ldr	r3, [sp, #12]
   21e3c:	3642      	adds	r6, #66	; 0x42
   21e3e:	781b      	ldrb	r3, [r3, #0]
   21e40:	7033      	strb	r3, [r6, #0]
   21e42:	e05e      	b.n	21f02 <_printf_i+0x1f2>
   21e44:	0648      	lsls	r0, r1, #25
   21e46:	d5da      	bpl.n	21dfe <_printf_i+0xee>
   21e48:	b2ad      	uxth	r5, r5
   21e4a:	e7d8      	b.n	21dfe <_printf_i+0xee>
   21e4c:	6809      	ldr	r1, [r1, #0]
   21e4e:	681a      	ldr	r2, [r3, #0]
   21e50:	0608      	lsls	r0, r1, #24
   21e52:	d505      	bpl.n	21e60 <_printf_i+0x150>
   21e54:	1d11      	adds	r1, r2, #4
   21e56:	6019      	str	r1, [r3, #0]
   21e58:	6813      	ldr	r3, [r2, #0]
   21e5a:	6962      	ldr	r2, [r4, #20]
   21e5c:	601a      	str	r2, [r3, #0]
   21e5e:	e006      	b.n	21e6e <_printf_i+0x15e>
   21e60:	0649      	lsls	r1, r1, #25
   21e62:	d5f7      	bpl.n	21e54 <_printf_i+0x144>
   21e64:	1d11      	adds	r1, r2, #4
   21e66:	6019      	str	r1, [r3, #0]
   21e68:	6813      	ldr	r3, [r2, #0]
   21e6a:	8aa2      	ldrh	r2, [r4, #20]
   21e6c:	801a      	strh	r2, [r3, #0]
   21e6e:	2300      	movs	r3, #0
   21e70:	9e04      	ldr	r6, [sp, #16]
   21e72:	6123      	str	r3, [r4, #16]
   21e74:	e054      	b.n	21f20 <_printf_i+0x210>
   21e76:	681a      	ldr	r2, [r3, #0]
   21e78:	1d11      	adds	r1, r2, #4
   21e7a:	6019      	str	r1, [r3, #0]
   21e7c:	6816      	ldr	r6, [r2, #0]
   21e7e:	2100      	movs	r1, #0
   21e80:	6862      	ldr	r2, [r4, #4]
   21e82:	0030      	movs	r0, r6
   21e84:	f000 f922 	bl	220cc <memchr>
   21e88:	2800      	cmp	r0, #0
   21e8a:	d001      	beq.n	21e90 <_printf_i+0x180>
   21e8c:	1b80      	subs	r0, r0, r6
   21e8e:	6060      	str	r0, [r4, #4]
   21e90:	6863      	ldr	r3, [r4, #4]
   21e92:	6123      	str	r3, [r4, #16]
   21e94:	2300      	movs	r3, #0
   21e96:	9a04      	ldr	r2, [sp, #16]
   21e98:	7013      	strb	r3, [r2, #0]
   21e9a:	e041      	b.n	21f20 <_printf_i+0x210>
   21e9c:	6923      	ldr	r3, [r4, #16]
   21e9e:	0032      	movs	r2, r6
   21ea0:	9906      	ldr	r1, [sp, #24]
   21ea2:	9805      	ldr	r0, [sp, #20]
   21ea4:	9d07      	ldr	r5, [sp, #28]
   21ea6:	47a8      	blx	r5
   21ea8:	1c43      	adds	r3, r0, #1
   21eaa:	d043      	beq.n	21f34 <_printf_i+0x224>
   21eac:	6823      	ldr	r3, [r4, #0]
   21eae:	2500      	movs	r5, #0
   21eb0:	079b      	lsls	r3, r3, #30
   21eb2:	d40f      	bmi.n	21ed4 <_printf_i+0x1c4>
   21eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21eb6:	68e0      	ldr	r0, [r4, #12]
   21eb8:	4298      	cmp	r0, r3
   21eba:	da3d      	bge.n	21f38 <_printf_i+0x228>
   21ebc:	0018      	movs	r0, r3
   21ebe:	e03b      	b.n	21f38 <_printf_i+0x228>
   21ec0:	0022      	movs	r2, r4
   21ec2:	2301      	movs	r3, #1
   21ec4:	3219      	adds	r2, #25
   21ec6:	9906      	ldr	r1, [sp, #24]
   21ec8:	9805      	ldr	r0, [sp, #20]
   21eca:	9e07      	ldr	r6, [sp, #28]
   21ecc:	47b0      	blx	r6
   21ece:	1c43      	adds	r3, r0, #1
   21ed0:	d030      	beq.n	21f34 <_printf_i+0x224>
   21ed2:	3501      	adds	r5, #1
   21ed4:	68e3      	ldr	r3, [r4, #12]
   21ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21ed8:	1a9b      	subs	r3, r3, r2
   21eda:	429d      	cmp	r5, r3
   21edc:	dbf0      	blt.n	21ec0 <_printf_i+0x1b0>
   21ede:	e7e9      	b.n	21eb4 <_printf_i+0x1a4>
   21ee0:	2d00      	cmp	r5, #0
   21ee2:	d0a9      	beq.n	21e38 <_printf_i+0x128>
   21ee4:	9e04      	ldr	r6, [sp, #16]
   21ee6:	0028      	movs	r0, r5
   21ee8:	0039      	movs	r1, r7
   21eea:	f7fd f977 	bl	1f1dc <__aeabi_uidivmod>
   21eee:	9b03      	ldr	r3, [sp, #12]
   21ef0:	3e01      	subs	r6, #1
   21ef2:	5c5b      	ldrb	r3, [r3, r1]
   21ef4:	0028      	movs	r0, r5
   21ef6:	7033      	strb	r3, [r6, #0]
   21ef8:	0039      	movs	r1, r7
   21efa:	f7fd f8e9 	bl	1f0d0 <__udivsi3>
   21efe:	1e05      	subs	r5, r0, #0
   21f00:	d1f1      	bne.n	21ee6 <_printf_i+0x1d6>
   21f02:	2f08      	cmp	r7, #8
   21f04:	d109      	bne.n	21f1a <_printf_i+0x20a>
   21f06:	6823      	ldr	r3, [r4, #0]
   21f08:	07db      	lsls	r3, r3, #31
   21f0a:	d506      	bpl.n	21f1a <_printf_i+0x20a>
   21f0c:	6863      	ldr	r3, [r4, #4]
   21f0e:	6922      	ldr	r2, [r4, #16]
   21f10:	4293      	cmp	r3, r2
   21f12:	dc02      	bgt.n	21f1a <_printf_i+0x20a>
   21f14:	2330      	movs	r3, #48	; 0x30
   21f16:	3e01      	subs	r6, #1
   21f18:	7033      	strb	r3, [r6, #0]
   21f1a:	9b04      	ldr	r3, [sp, #16]
   21f1c:	1b9b      	subs	r3, r3, r6
   21f1e:	6123      	str	r3, [r4, #16]
   21f20:	9b07      	ldr	r3, [sp, #28]
   21f22:	aa09      	add	r2, sp, #36	; 0x24
   21f24:	9300      	str	r3, [sp, #0]
   21f26:	0021      	movs	r1, r4
   21f28:	9b06      	ldr	r3, [sp, #24]
   21f2a:	9805      	ldr	r0, [sp, #20]
   21f2c:	f7ff fe82 	bl	21c34 <_printf_common>
   21f30:	1c43      	adds	r3, r0, #1
   21f32:	d1b3      	bne.n	21e9c <_printf_i+0x18c>
   21f34:	2001      	movs	r0, #1
   21f36:	4240      	negs	r0, r0
   21f38:	b00b      	add	sp, #44	; 0x2c
   21f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21f3c:	00027260 	.word	0x00027260
   21f40:	0002724f 	.word	0x0002724f

00021f44 <__sread>:
   21f44:	b570      	push	{r4, r5, r6, lr}
   21f46:	000c      	movs	r4, r1
   21f48:	250e      	movs	r5, #14
   21f4a:	5f49      	ldrsh	r1, [r1, r5]
   21f4c:	f000 f8f0 	bl	22130 <_read_r>
   21f50:	2800      	cmp	r0, #0
   21f52:	db03      	blt.n	21f5c <__sread+0x18>
   21f54:	6d63      	ldr	r3, [r4, #84]	; 0x54
   21f56:	181b      	adds	r3, r3, r0
   21f58:	6563      	str	r3, [r4, #84]	; 0x54
   21f5a:	bd70      	pop	{r4, r5, r6, pc}
   21f5c:	89a3      	ldrh	r3, [r4, #12]
   21f5e:	4a02      	ldr	r2, [pc, #8]	; (21f68 <__sread+0x24>)
   21f60:	4013      	ands	r3, r2
   21f62:	81a3      	strh	r3, [r4, #12]
   21f64:	e7f9      	b.n	21f5a <__sread+0x16>
   21f66:	46c0      	nop			; (mov r8, r8)
   21f68:	ffffefff 	.word	0xffffefff

00021f6c <__swrite>:
   21f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f6e:	001f      	movs	r7, r3
   21f70:	898b      	ldrh	r3, [r1, #12]
   21f72:	0005      	movs	r5, r0
   21f74:	000c      	movs	r4, r1
   21f76:	0016      	movs	r6, r2
   21f78:	05db      	lsls	r3, r3, #23
   21f7a:	d505      	bpl.n	21f88 <__swrite+0x1c>
   21f7c:	230e      	movs	r3, #14
   21f7e:	5ec9      	ldrsh	r1, [r1, r3]
   21f80:	2200      	movs	r2, #0
   21f82:	2302      	movs	r3, #2
   21f84:	f000 f88e 	bl	220a4 <_lseek_r>
   21f88:	89a3      	ldrh	r3, [r4, #12]
   21f8a:	4a05      	ldr	r2, [pc, #20]	; (21fa0 <__swrite+0x34>)
   21f8c:	0028      	movs	r0, r5
   21f8e:	4013      	ands	r3, r2
   21f90:	81a3      	strh	r3, [r4, #12]
   21f92:	0032      	movs	r2, r6
   21f94:	230e      	movs	r3, #14
   21f96:	5ee1      	ldrsh	r1, [r4, r3]
   21f98:	003b      	movs	r3, r7
   21f9a:	f000 f839 	bl	22010 <_write_r>
   21f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21fa0:	ffffefff 	.word	0xffffefff

00021fa4 <__sseek>:
   21fa4:	b570      	push	{r4, r5, r6, lr}
   21fa6:	000c      	movs	r4, r1
   21fa8:	250e      	movs	r5, #14
   21faa:	5f49      	ldrsh	r1, [r1, r5]
   21fac:	f000 f87a 	bl	220a4 <_lseek_r>
   21fb0:	89a3      	ldrh	r3, [r4, #12]
   21fb2:	1c42      	adds	r2, r0, #1
   21fb4:	d103      	bne.n	21fbe <__sseek+0x1a>
   21fb6:	4a05      	ldr	r2, [pc, #20]	; (21fcc <__sseek+0x28>)
   21fb8:	4013      	ands	r3, r2
   21fba:	81a3      	strh	r3, [r4, #12]
   21fbc:	bd70      	pop	{r4, r5, r6, pc}
   21fbe:	2280      	movs	r2, #128	; 0x80
   21fc0:	0152      	lsls	r2, r2, #5
   21fc2:	4313      	orrs	r3, r2
   21fc4:	81a3      	strh	r3, [r4, #12]
   21fc6:	6560      	str	r0, [r4, #84]	; 0x54
   21fc8:	e7f8      	b.n	21fbc <__sseek+0x18>
   21fca:	46c0      	nop			; (mov r8, r8)
   21fcc:	ffffefff 	.word	0xffffefff

00021fd0 <__sclose>:
   21fd0:	b510      	push	{r4, lr}
   21fd2:	230e      	movs	r3, #14
   21fd4:	5ec9      	ldrsh	r1, [r1, r3]
   21fd6:	f000 f82f 	bl	22038 <_close_r>
   21fda:	bd10      	pop	{r4, pc}

00021fdc <strchr>:
   21fdc:	b2c9      	uxtb	r1, r1
   21fde:	7803      	ldrb	r3, [r0, #0]
   21fe0:	2b00      	cmp	r3, #0
   21fe2:	d004      	beq.n	21fee <strchr+0x12>
   21fe4:	4299      	cmp	r1, r3
   21fe6:	d100      	bne.n	21fea <strchr+0xe>
   21fe8:	4770      	bx	lr
   21fea:	3001      	adds	r0, #1
   21fec:	e7f7      	b.n	21fde <strchr+0x2>
   21fee:	424b      	negs	r3, r1
   21ff0:	4159      	adcs	r1, r3
   21ff2:	4249      	negs	r1, r1
   21ff4:	4008      	ands	r0, r1
   21ff6:	e7f7      	b.n	21fe8 <strchr+0xc>

00021ff8 <__ascii_wctomb>:
   21ff8:	1e0b      	subs	r3, r1, #0
   21ffa:	d004      	beq.n	22006 <__ascii_wctomb+0xe>
   21ffc:	2aff      	cmp	r2, #255	; 0xff
   21ffe:	d904      	bls.n	2200a <__ascii_wctomb+0x12>
   22000:	238a      	movs	r3, #138	; 0x8a
   22002:	6003      	str	r3, [r0, #0]
   22004:	3b8b      	subs	r3, #139	; 0x8b
   22006:	0018      	movs	r0, r3
   22008:	4770      	bx	lr
   2200a:	700a      	strb	r2, [r1, #0]
   2200c:	2301      	movs	r3, #1
   2200e:	e7fa      	b.n	22006 <__ascii_wctomb+0xe>

00022010 <_write_r>:
   22010:	b570      	push	{r4, r5, r6, lr}
   22012:	0005      	movs	r5, r0
   22014:	0008      	movs	r0, r1
   22016:	0011      	movs	r1, r2
   22018:	2200      	movs	r2, #0
   2201a:	4c06      	ldr	r4, [pc, #24]	; (22034 <_write_r+0x24>)
   2201c:	6022      	str	r2, [r4, #0]
   2201e:	001a      	movs	r2, r3
   22020:	f7f5 fadc 	bl	175dc <_write>
   22024:	1c43      	adds	r3, r0, #1
   22026:	d103      	bne.n	22030 <_write_r+0x20>
   22028:	6823      	ldr	r3, [r4, #0]
   2202a:	2b00      	cmp	r3, #0
   2202c:	d000      	beq.n	22030 <_write_r+0x20>
   2202e:	602b      	str	r3, [r5, #0]
   22030:	bd70      	pop	{r4, r5, r6, pc}
   22032:	46c0      	nop			; (mov r8, r8)
   22034:	20005a94 	.word	0x20005a94

00022038 <_close_r>:
   22038:	2300      	movs	r3, #0
   2203a:	b570      	push	{r4, r5, r6, lr}
   2203c:	4c06      	ldr	r4, [pc, #24]	; (22058 <_close_r+0x20>)
   2203e:	0005      	movs	r5, r0
   22040:	0008      	movs	r0, r1
   22042:	6023      	str	r3, [r4, #0]
   22044:	f7f5 fb1e 	bl	17684 <_close>
   22048:	1c43      	adds	r3, r0, #1
   2204a:	d103      	bne.n	22054 <_close_r+0x1c>
   2204c:	6823      	ldr	r3, [r4, #0]
   2204e:	2b00      	cmp	r3, #0
   22050:	d000      	beq.n	22054 <_close_r+0x1c>
   22052:	602b      	str	r3, [r5, #0]
   22054:	bd70      	pop	{r4, r5, r6, pc}
   22056:	46c0      	nop			; (mov r8, r8)
   22058:	20005a94 	.word	0x20005a94

0002205c <_fstat_r>:
   2205c:	2300      	movs	r3, #0
   2205e:	b570      	push	{r4, r5, r6, lr}
   22060:	4c06      	ldr	r4, [pc, #24]	; (2207c <_fstat_r+0x20>)
   22062:	0005      	movs	r5, r0
   22064:	0008      	movs	r0, r1
   22066:	0011      	movs	r1, r2
   22068:	6023      	str	r3, [r4, #0]
   2206a:	f7f5 fb15 	bl	17698 <_fstat>
   2206e:	1c43      	adds	r3, r0, #1
   22070:	d103      	bne.n	2207a <_fstat_r+0x1e>
   22072:	6823      	ldr	r3, [r4, #0]
   22074:	2b00      	cmp	r3, #0
   22076:	d000      	beq.n	2207a <_fstat_r+0x1e>
   22078:	602b      	str	r3, [r5, #0]
   2207a:	bd70      	pop	{r4, r5, r6, pc}
   2207c:	20005a94 	.word	0x20005a94

00022080 <_isatty_r>:
   22080:	2300      	movs	r3, #0
   22082:	b570      	push	{r4, r5, r6, lr}
   22084:	4c06      	ldr	r4, [pc, #24]	; (220a0 <_isatty_r+0x20>)
   22086:	0005      	movs	r5, r0
   22088:	0008      	movs	r0, r1
   2208a:	6023      	str	r3, [r4, #0]
   2208c:	f7f5 fb12 	bl	176b4 <_isatty>
   22090:	1c43      	adds	r3, r0, #1
   22092:	d103      	bne.n	2209c <_isatty_r+0x1c>
   22094:	6823      	ldr	r3, [r4, #0]
   22096:	2b00      	cmp	r3, #0
   22098:	d000      	beq.n	2209c <_isatty_r+0x1c>
   2209a:	602b      	str	r3, [r5, #0]
   2209c:	bd70      	pop	{r4, r5, r6, pc}
   2209e:	46c0      	nop			; (mov r8, r8)
   220a0:	20005a94 	.word	0x20005a94

000220a4 <_lseek_r>:
   220a4:	b570      	push	{r4, r5, r6, lr}
   220a6:	0005      	movs	r5, r0
   220a8:	0008      	movs	r0, r1
   220aa:	0011      	movs	r1, r2
   220ac:	2200      	movs	r2, #0
   220ae:	4c06      	ldr	r4, [pc, #24]	; (220c8 <_lseek_r+0x24>)
   220b0:	6022      	str	r2, [r4, #0]
   220b2:	001a      	movs	r2, r3
   220b4:	f7f5 fb07 	bl	176c6 <_lseek>
   220b8:	1c43      	adds	r3, r0, #1
   220ba:	d103      	bne.n	220c4 <_lseek_r+0x20>
   220bc:	6823      	ldr	r3, [r4, #0]
   220be:	2b00      	cmp	r3, #0
   220c0:	d000      	beq.n	220c4 <_lseek_r+0x20>
   220c2:	602b      	str	r3, [r5, #0]
   220c4:	bd70      	pop	{r4, r5, r6, pc}
   220c6:	46c0      	nop			; (mov r8, r8)
   220c8:	20005a94 	.word	0x20005a94

000220cc <memchr>:
   220cc:	b2c9      	uxtb	r1, r1
   220ce:	1882      	adds	r2, r0, r2
   220d0:	4290      	cmp	r0, r2
   220d2:	d101      	bne.n	220d8 <memchr+0xc>
   220d4:	2000      	movs	r0, #0
   220d6:	4770      	bx	lr
   220d8:	7803      	ldrb	r3, [r0, #0]
   220da:	428b      	cmp	r3, r1
   220dc:	d0fb      	beq.n	220d6 <memchr+0xa>
   220de:	3001      	adds	r0, #1
   220e0:	e7f6      	b.n	220d0 <memchr+0x4>

000220e2 <_realloc_r>:
   220e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   220e4:	0007      	movs	r7, r0
   220e6:	000d      	movs	r5, r1
   220e8:	0016      	movs	r6, r2
   220ea:	2900      	cmp	r1, #0
   220ec:	d105      	bne.n	220fa <_realloc_r+0x18>
   220ee:	0011      	movs	r1, r2
   220f0:	f7fe fe9e 	bl	20e30 <_malloc_r>
   220f4:	0004      	movs	r4, r0
   220f6:	0020      	movs	r0, r4
   220f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   220fa:	2a00      	cmp	r2, #0
   220fc:	d103      	bne.n	22106 <_realloc_r+0x24>
   220fe:	f7fe fe4d 	bl	20d9c <_free_r>
   22102:	0034      	movs	r4, r6
   22104:	e7f7      	b.n	220f6 <_realloc_r+0x14>
   22106:	f000 f827 	bl	22158 <_malloc_usable_size_r>
   2210a:	002c      	movs	r4, r5
   2210c:	4286      	cmp	r6, r0
   2210e:	d9f2      	bls.n	220f6 <_realloc_r+0x14>
   22110:	0031      	movs	r1, r6
   22112:	0038      	movs	r0, r7
   22114:	f7fe fe8c 	bl	20e30 <_malloc_r>
   22118:	1e04      	subs	r4, r0, #0
   2211a:	d0ec      	beq.n	220f6 <_realloc_r+0x14>
   2211c:	0029      	movs	r1, r5
   2211e:	0032      	movs	r2, r6
   22120:	f7fe fe18 	bl	20d54 <memcpy>
   22124:	0029      	movs	r1, r5
   22126:	0038      	movs	r0, r7
   22128:	f7fe fe38 	bl	20d9c <_free_r>
   2212c:	e7e3      	b.n	220f6 <_realloc_r+0x14>
	...

00022130 <_read_r>:
   22130:	b570      	push	{r4, r5, r6, lr}
   22132:	0005      	movs	r5, r0
   22134:	0008      	movs	r0, r1
   22136:	0011      	movs	r1, r2
   22138:	2200      	movs	r2, #0
   2213a:	4c06      	ldr	r4, [pc, #24]	; (22154 <_read_r+0x24>)
   2213c:	6022      	str	r2, [r4, #0]
   2213e:	001a      	movs	r2, r3
   22140:	f7f5 fa22 	bl	17588 <_read>
   22144:	1c43      	adds	r3, r0, #1
   22146:	d103      	bne.n	22150 <_read_r+0x20>
   22148:	6823      	ldr	r3, [r4, #0]
   2214a:	2b00      	cmp	r3, #0
   2214c:	d000      	beq.n	22150 <_read_r+0x20>
   2214e:	602b      	str	r3, [r5, #0]
   22150:	bd70      	pop	{r4, r5, r6, pc}
   22152:	46c0      	nop			; (mov r8, r8)
   22154:	20005a94 	.word	0x20005a94

00022158 <_malloc_usable_size_r>:
   22158:	1f0b      	subs	r3, r1, #4
   2215a:	681b      	ldr	r3, [r3, #0]
   2215c:	1f18      	subs	r0, r3, #4
   2215e:	2b00      	cmp	r3, #0
   22160:	da01      	bge.n	22166 <_malloc_usable_size_r+0xe>
   22162:	580b      	ldr	r3, [r1, r0]
   22164:	18c0      	adds	r0, r0, r3
   22166:	4770      	bx	lr
   22168:	74697257 	.word	0x74697257
   2216c:	20676e69 	.word	0x20676e69
   22170:	6d6d6f63 	.word	0x6d6d6f63
   22174:	20646e61 	.word	0x20646e61
   22178:	53206f74 	.word	0x53206f74
   2217c:	33314453 	.word	0x33314453
   22180:	0a2e3630 	.word	0x0a2e3630
   22184:	00000000 	.word	0x00000000
   22188:	6f727245 	.word	0x6f727245
   2218c:	72772072 	.word	0x72772072
   22190:	6e697469 	.word	0x6e697469
   22194:	6f632067 	.word	0x6f632067
   22198:	6e616d6d 	.word	0x6e616d6d
   2219c:	6f742064 	.word	0x6f742064
   221a0:	44535320 	.word	0x44535320
   221a4:	36303331 	.word	0x36303331
   221a8:	00000a2e 	.word	0x00000a2e
   221ac:	6c696146 	.word	0x6c696146
   221b0:	74206465 	.word	0x74206465
   221b4:	6567206f 	.word	0x6567206f
   221b8:	32492074 	.word	0x32492074
   221bc:	756d2043 	.word	0x756d2043
   221c0:	20786574 	.word	0x20786574
   221c4:	20726f66 	.word	0x20726f66
   221c8:	6d6d6f63 	.word	0x6d6d6f63
   221cc:	20646e61 	.word	0x20646e61
   221d0:	74697277 	.word	0x74697277
   221d4:	000a2e65 	.word	0x000a2e65
   221d8:	74696e49 	.word	0x74696e49
   221dc:	696c6169 	.word	0x696c6169
   221e0:	676e697a 	.word	0x676e697a
   221e4:	44535320 	.word	0x44535320
   221e8:	36303331 	.word	0x36303331
   221ec:	00000a2e 	.word	0x00000a2e
   221f0:	61647055 	.word	0x61647055
   221f4:	676e6974 	.word	0x676e6974
   221f8:	44535320 	.word	0x44535320
   221fc:	36303331 	.word	0x36303331
   22200:	72637320 	.word	0x72637320
   22204:	2e6e6565 	.word	0x2e6e6565
   22208:	0000000a 	.word	0x0000000a
   2220c:	6f727245 	.word	0x6f727245
   22210:	70752072 	.word	0x70752072
   22214:	69746164 	.word	0x69746164
   22218:	7320676e 	.word	0x7320676e
   2221c:	65657263 	.word	0x65657263
   22220:	7562206e 	.word	0x7562206e
   22224:	72656666 	.word	0x72656666
   22228:	00000a2e 	.word	0x00000a2e
   2222c:	6c696146 	.word	0x6c696146
   22230:	74206465 	.word	0x74206465
   22234:	6567206f 	.word	0x6567206f
   22238:	32492074 	.word	0x32492074
   2223c:	756d2043 	.word	0x756d2043
   22240:	20786574 	.word	0x20786574
   22244:	20726f66 	.word	0x20726f66
   22248:	65726373 	.word	0x65726373
   2224c:	75206e65 	.word	0x75206e65
   22250:	74616470 	.word	0x74616470
   22254:	000a2e65 	.word	0x000a2e65
   22258:	65726353 	.word	0x65726353
   2225c:	62206e65 	.word	0x62206e65
   22260:	65666675 	.word	0x65666675
   22264:	69662072 	.word	0x69662072
   22268:	64656c6c 	.word	0x64656c6c
   2226c:	00000a2e 	.word	0x00000a2e
   22270:	74746553 	.word	0x74746553
   22274:	20676e69 	.word	0x20676e69
   22278:	73727563 	.word	0x73727563
   2227c:	7020726f 	.word	0x7020726f
   22280:	7469736f 	.word	0x7469736f
   22284:	2e6e6f69 	.word	0x2e6e6f69
   22288:	0000000a 	.word	0x0000000a
   2228c:	6f727245 	.word	0x6f727245
   22290:	43203a72 	.word	0x43203a72
   22294:	6f737275 	.word	0x6f737275
   22298:	6f702072 	.word	0x6f702072
   2229c:	69746973 	.word	0x69746973
   222a0:	6f206e6f 	.word	0x6f206e6f
   222a4:	6f207475 	.word	0x6f207475
   222a8:	6f622066 	.word	0x6f622066
   222ac:	73646e75 	.word	0x73646e75
   222b0:	00000a2e 	.word	0x00000a2e
   222b4:	74747550 	.word	0x74747550
   222b8:	20676e69 	.word	0x20676e69
   222bc:	72616863 	.word	0x72616863
   222c0:	65746361 	.word	0x65746361
   222c4:	6e6f2072 	.word	0x6e6f2072
   222c8:	72637320 	.word	0x72637320
   222cc:	2e6e6565 	.word	0x2e6e6565
   222d0:	0000000a 	.word	0x0000000a
   222d4:	74697257 	.word	0x74697257
   222d8:	20676e69 	.word	0x20676e69
   222dc:	69727473 	.word	0x69727473
   222e0:	7420676e 	.word	0x7420676e
   222e4:	6373206f 	.word	0x6373206f
   222e8:	6e656572 	.word	0x6e656572
   222ec:	00000a2e 	.word	0x00000a2e
   222f0:	6c696146 	.word	0x6c696146
   222f4:	74206465 	.word	0x74206465
   222f8:	7570206f 	.word	0x7570206f
   222fc:	68632074 	.word	0x68632074
   22300:	63617261 	.word	0x63617261
   22304:	2e726574 	.word	0x2e726574
   22308:	0000000a 	.word	0x0000000a

0002230c <pcWelcomeMessage>:
   2230c:	65657246 534f5452 494c4320 540a0d2e     FreeRTOS CLI...T
   2231c:	20657079 706c6548 206f7420 77656976     ype Help to view
   2232c:	6c206120 20747369 7220666f 73696765      a list of regis
   2233c:	65726574 6f632064 6e616d6d 0d2e7364     tered commands..
   2234c:	0000000a 00007766 203a7766 6e776f44     ....fw..fw: Down
   2235c:	64616f6c 66206120 20656c69 20646e61     load a file and 
   2236c:	66726570 206d726f 46206e61 70752057     perform an FW up
   2237c:	65746164 00000a0d 65736572 00000074     date....reset...
   2238c:	65736572 52203a74 74657365 68742073     reset: Resets th
   2239c:	65642065 65636976 00000a0d 00633269     e device....i2c.
   223ac:	3a633269 61635320 4920736e 62204332     i2c: Scans I2C b
   223bc:	0a0d7375 00000000 73726576 006e6f69     us......version.
   223cc:	73726576 3a6e6f69 69725020 2073746e     version: Prints 
   223dc:	69662061 61776d72 76206572 69737265     a firmware versi
   223ec:	0a0d6e6f 00000000 6b636974 00000073     on......ticks...
   223fc:	6b636974 50203a73 746e6972 68742073     ticks: Prints th
   2240c:	756e2065 7265626d 20666f20 6b636974     e number of tick
   2241c:	69732073 2065636e 20656874 65686373     s since the sche
   2242c:	656c7564 61772072 74732073 65747261     duler was starte
   2243c:	000a0d64 00736c63 3a736c63 656c4320     d...cls.cls: Cle
   2244c:	20737261 20656874 6d726574 6c616e69     ars the terminal
   2245c:	72637320 0d6e6565 0000000a 6c756f43      screen.....Coul
   2246c:	6f6e2064 6c612074 61636f6c 73206574     d not allocate s
   2247c:	70616d65 65726f68 00000a0d 00000a0d     emaphore........
   2248c:	0000616f 325b6325 003e0d4b 00082008     oa..%c[2K.>.. ..
   2249c:	325b6325 0000004a 65560a0d 6f697372     %c[2J.....Versio
   224ac:	754e206e 7265626d 0000203a 2e352e30     n Number: ..0.5.
   224bc:	2e362e31 00000030 0a0d0a0d 00000000     1.6.0...........
   224cc:	69540a0d 20736b63 636e6973 74732065     ..Ticks since st
   224dc:	20747261 7320666f 64656863 72656c75     art of scheduler
   224ec:	0000203a 0d756c25 0000000a 31202030     : ..%lu.....0  1
   224fc:	20322020 20203320 35202034 20362020       2  3  4  5  6 
   2250c:	20203720 39202038 20612020 20206220      7  8  9  a  b  
   2251c:	64202063 20652020 0a0d6620 00000000     c  d  e  f......
   2252c:	78323025 0000203a 00002058              %02x: ..X ..

00022538 <xOTAUCommand>:
   22538:	00022350 00022354 00001509 00000000     P#..T#..........

00022548 <xResetCommand>:
   22548:	00022384 0002238c 00001529 00000000     .#...#..).......

00022558 <xI2cScan>:
   22558:	000223a8 000223ac 000015dd 00000000     .#...#..........

00022568 <xVersion>:
   22568:	000223c4 000223cc 00001549 00000000     .#...#..I.......

00022578 <xTicks>:
   22578:	000223f4 000223fc 00001589 00000000     .#...#..........

00022588 <xClearScreen>:
   22588:	00022440 00022444 000014c1 00000000     @$..D$..........

00022598 <Font11x18>:
	...
   225bc:	0c000000 0c000c00 0c000c00 0c000c00     ................
   225cc:	0c000c00 0c000c00 0c000000 00000c00     ................
   225dc:	00000000 1b000000 1b001b00 1b001b00     ................
	...
   22604:	19800000 19801980 7fc01980 19807fc0     ................
   22614:	7fc03300 33007fc0 33003300 00003300     .3.....3.3.3.3..
   22624:	00000000 1e000000 75803f00 74006580     .........?.u.e.t
   22634:	1e003c00 05800700 65806580 3f007580     .<.......e.e.u.?
   22644:	04001e00 00000400 70000000 d840d800     ...........p..@.
   22654:	d980d8c0 06007300 1b800c00 66c036c0     .....s.......6.f
   22664:	06c046c0 00000380 00000000 1e000000     .F..............
   22674:	33003f00 33003300 0c001e00 66c03cc0     .?.3.3.3.....<.f
   22684:	61806380 3ec06380 00001c80 00000000     .c.a.c.>........
   22694:	0c000000 0c000c00 0c000c00 00000000     ................
	...
   226b8:	01000080 06000300 04000600 0c000c00     ................
   226c8:	0c000c00 0c000c00 06000400 03000600     ................
   226d8:	00800100 10002000 0c001800 04000c00     ..... ..........
   226e8:	06000600 06000600 06000600 0c000400     ................
   226f8:	18000c00 20001000 0c000000 3f002d00     ....... .....-.?
   22708:	33001e00 00000000 00000000 00000000     ...3............
	...
   22728:	0c000000 0c000c00 ffc00c00 0c00ffc0     ................
   22738:	0c000c00 00000c00 00000000 00000000     ................
	...
   22760:	0c000000 04000c00 08000400 00000000     ................
	...
   2277c:	1e000000 00001e00 00000000 00000000     ................
	...
   227a8:	0c000000 00000c00 00000000 03000000     ................
   227b8:	03000300 06000600 06000600 0c000c00     ................
   227c8:	0c000c00 18001800 00001800 00000000     ................
   227d8:	1e000000 33003f00 61806180 6d806180     .....?.3.a.a.a.m
   227e8:	61806d80 61806180 3f003300 00001e00     .m.a.a.a.3.?....
   227f8:	00000000 06000000 1e000e00 26003600     .............6.&
   22808:	06000600 06000600 06000600 06000600     ................
   22818:	00000600 00000000 1e000000 73803f00     .............?.s
   22828:	61806180 03000180 0c000600 30001800     .a.a...........0
   22838:	7f806000 00007f80 00000000 1c000000     .`..............
   22848:	63003e00 03006300 0e000e00 01800300     .>.c.c..........
   22858:	61800180 3f007380 00001e00 00000000     ...a.s.?........
   22868:	06000000 0e000e00 1e001e00 36001600     ...............6
   22878:	66003600 7f807f80 06000600 00000600     .6.f............
   22888:	00000000 7f000000 60007f00 60006000     ...........`.`.`
   22898:	7f006e00 01806380 61800180 3f007380     .n...c.....a.s.?
   228a8:	00001e00 00000000 1e000000 33803f00     .............?.3
   228b8:	60006180 7f006e00 61807380 61806180     .a.`.n...s.a.a.a
   228c8:	3f003380 00001e00 00000000 7f800000     .3.?............
   228d8:	01807f80 03000300 06000600 0c000c00     ................
   228e8:	08000c00 18001800 00001800 00000000     ................
   228f8:	1e000000 63803f00 61806180 1e002100     .....?.c.a.a.!..
   22908:	61803f00 61806180 3f006180 00001e00     .?.a.a.a.a.?....
   22918:	00000000 1e000000 73003f00 61806180     .........?.s.a.a
   22928:	73806180 1d803f80 61800180 3f007300     .a.s.?.....a.s.?
   22938:	00001e00 00000000 00000000 00000000     ................
   22948:	0c000000 00000c00 00000000 00000000     ................
   22958:	0c000000 00000c00 00000000 00000000     ................
	...
   22970:	0c000c00 00000000 00000000 0c000000     ................
   22980:	04000c00 08000400 00000000 00000000     ................
   22990:	03800080 38000e00 38006000 03800e00     .......8.`.8....
   229a0:	00000080 00000000 00000000 00000000     ................
   229b0:	00000000 7f800000 00007f80 7f800000     ................
   229c0:	00007f80 00000000 00000000 00000000     ................
	...
   229d8:	70004000 07001c00 07000180 70001c00     .@.p...........p
   229e8:	00004000 00000000 00000000 1f000000     .@..............
   229f8:	71c03f80 00c060c0 038001c0 0e000700     .?.q.`..........
   22a08:	0c000c00 0c000000 00000c00 00000000     ................
   22a18:	1e000000 31803f00 63807180 6d806f80     .....?.1.q.c.o.m
   22a28:	6f806d80 60006780 3e003200 00001c00     .m.o.g.`.2.>....
   22a38:	00000000 0e000000 1b000e00 1b001b00     ................
   22a48:	31801b00 3f803180 31803f80 60c060c0     ...1.1.?.?.1.`.`
   22a58:	000060c0 00000000 7c000000 63007e00     .`.........|.~.c
   22a68:	63006300 7e006300 63007e00 61806180     .c.c.c.~.~.c.a.a
   22a78:	7f006380 00007e00 00000000 1e000000     .c...~..........
   22a88:	31803f00 60006180 60006000 60006000     .?.1.a.`.`.`.`.`
   22a98:	61806000 3f003180 00001e00 00000000     .`.a.1.?........
   22aa8:	7c000000 63007f00 61806380 61806180     ...|...c.c.a.a.a
   22ab8:	61806180 63006180 7e006300 00007c00     .a.a.a.c.c.~.|..
   22ac8:	00000000 7f800000 60007f80 60006000     ...........`.`.`
   22ad8:	7f006000 60007f00 60006000 7f806000     .`.....`.`.`.`..
   22ae8:	00007f80 00000000 7f800000 60007f80     ...............`
   22af8:	60006000 7f006000 60007f00 60006000     .`.`.`.....`.`.`
   22b08:	60006000 00006000 00000000 1e000000     .`.`.`..........
   22b18:	31803f00 60006180 60006000 63806380     .?.1.a.`.`.`.c.c
   22b28:	61806180 3f803180 00001e00 00000000     .a.a.1.?........
   22b38:	61800000 61806180 61806180 7f806180     ...a.a.a.a.a.a..
   22b48:	61807f80 61806180 61806180 00006180     ...a.a.a.a.a.a..
   22b58:	00000000 3f000000 0c003f00 0c000c00     .......?.?......
   22b68:	0c000c00 0c000c00 0c000c00 3f000c00     ...............?
   22b78:	00003f00 00000000 01800000 01800180     .?..............
   22b88:	01800180 01800180 01800180 61806180     .............a.a
   22b98:	3f007380 00001e00 00000000 60c00000     .s.?...........`
   22ba8:	63006180 66006600 78006c00 66007c00     .a.c.f.f.l.x.|.f
   22bb8:	63006600 61806180 000060c0 00000000     .f.c.a.a.`......
   22bc8:	60000000 60006000 60006000 60006000     ...`.`.`.`.`.`.`
   22bd8:	60006000 60006000 7f806000 00007f80     .`.`.`.`.`......
   22be8:	00000000 71c00000 7bc071c0 6ac07ac0     .......q.q.{.z.j
   22bf8:	6ec06ac0 60c064c0 60c060c0 60c060c0     .j.n.d.`.`.`.`.`
   22c08:	000060c0 00000000 71800000 79807180     .`.........q.q.y
   22c18:	79807980 6d806d80 65806d80 67806780     .y.y.m.m.m.e.g.g
   22c28:	63806780 00006380 00000000 1e000000     .g.c.c..........
   22c38:	33003f00 61806180 61806180 61806180     .?.3.a.a.a.a.a.a
   22c48:	61806180 3f003300 00001e00 00000000     .a.a.3.?........
   22c58:	7e000000 63807f00 61806180 63806180     ...~...c.a.a.a.c
   22c68:	7e007f00 60006000 60006000 00006000     ...~.`.`.`.`.`..
   22c78:	00000000 1e000000 33003f00 61806180     .........?.3.a.a
   22c88:	61806180 61806180 67806580 3f803300     .a.a.a.a.e.g.3.?
   22c98:	00001e40 00000000 7e000000 63807f00     @..........~...c
   22ca8:	61806180 7f006380 66007e00 63006300     .a.a.c...~.f.c.c
   22cb8:	61806180 000060c0 00000000 0e000000     .a.a.`..........
   22cc8:	31801f00 30003180 1e003800 03800700     ...1.1.0.8......
   22cd8:	61806180 3f003180 00001e00 00000000     .a.a.1.?........
   22ce8:	ffc00000 0c00ffc0 0c000c00 0c000c00     ................
   22cf8:	0c000c00 0c000c00 0c000c00 00000c00     ................
   22d08:	00000000 61800000 61806180 61806180     .......a.a.a.a.a
   22d18:	61806180 61806180 61806180 3f007380     .a.a.a.a.a.a.s.?
   22d28:	00001e00 00000000 60c00000 60c060c0     ...........`.`.`
   22d38:	31803180 1b003180 1b001b00 0e001b00     .1.1.1..........
   22d48:	0e000e00 00000400 00000000 c0c00000     ................
   22d58:	c0c0c0c0 c0c0c0c0 4c80ccc0 5e804c80     ...........L.L.^
   22d68:	52805280 61807380 00006180 00000000     .R.R.s.a.a......
   22d78:	c0c00000 61806080 3b003300 0c001e00     .....`.a.3.;....
   22d88:	1e000c00 3b001f00 61807180 0000c0c0     .......;.q.a....
   22d98:	00000000 c0c00000 61806180 33003300     .........a.a.3.3
   22da8:	1e001e00 0c000c00 0c000c00 0c000c00     ................
   22db8:	00000c00 00000000 3f800000 01803f80     ...........?.?..
   22dc8:	03000300 0c000600 18000c00 30001800     ...............0
   22dd8:	7f806000 00007f80 00000000 0f000f00     .`..............
   22de8:	0c000c00 0c000c00 0c000c00 0c000c00     ................
   22df8:	0c000c00 0c000c00 0c000c00 0f000f00     ................
   22e08:	18000000 18001800 0c000c00 0c000c00     ................
   22e18:	06000600 06000600 03000300 00000300     ................
   22e28:	00000000 1e001e00 06000600 06000600     ................
   22e38:	06000600 06000600 06000600 06000600     ................
   22e48:	06000600 1e001e00 0c000000 1e000c00     ................
   22e58:	33001200 61803300 00006180 00000000     ...3.3.a.a......
	...
   22e94:	0000ffe0 38000000 0c001800 00000000     .......8........
	...
   22ec4:	1f000000 61803f80 1f800180 61803f80     .....?.a.....?.a
   22ed4:	7f806380 000038c0 00000000 60000000     .c...8.........`
   22ee4:	60006000 6e006000 73807f00 61806180     .`.`.`.n...s.a.a
   22ef4:	61806180 7f007380 00006e00 00000000     .a.a.s...n......
	...
   22f0c:	1e000000 73803f00 60006180 61806000     .....?.s.a.`.`.a
   22f1c:	3f007380 00001e00 00000000 01800000     .s.?............
   22f2c:	01800180 1d800180 73803f80 61806180     .........?.s.a.a
   22f3c:	61806180 3f807380 00001d80 00000000     .a.a.s.?........
	...
   22f54:	1e000000 73003f00 7f806180 60007f80     .....?.s.a.....`
   22f64:	3f007180 00001e00 00000000 07c00000     .q.?............
   22f74:	0c000fc0 7f800c00 0c007f80 0c000c00     ................
   22f84:	0c000c00 0c000c00 00000c00 00000000     ................
	...
   22f9c:	3f801d80 61807380 61806180 73806180     ...?.s.a.a.a.a.s
   22fac:	1d803f80 63800180 3e007f00 60000000     .?.....c...>...`
   22fbc:	60006000 6f006000 71807f80 61806180     .`.`.`.o...q.a.a
   22fcc:	61806180 61806180 00006180 00000000     .a.a.a.a.a......
   22fdc:	06000000 00000600 3e000000 06003e00     ...........>.>..
   22fec:	06000600 06000600 06000600 00000600     ................
   22ffc:	00000000 06000600 00000000 3e003e00     .............>.>
   2300c:	06000600 06000600 06000600 06000600     ................
   2301c:	46000600 3c007e00 60000000 60006000     ...F.~.<...`.`.`
   2302c:	61806000 66006300 7c006c00 63007600     .`.a.c.f.l.|.v.c
   2303c:	61806300 000060c0 00000000 3e000000     .c.a.`.........>
   2304c:	06003e00 06000600 06000600 06000600     .>..............
   2305c:	06000600 06000600 00000600 00000000     ................
	...
   23074:	dd800000 cec0ffc0 ccc0ccc0 ccc0ccc0     ................
   23084:	ccc0ccc0 0000ccc0 00000000 00000000     ................
   23094:	00000000 6f000000 71807f80 61806180     .......o...q.a.a
   230a4:	61806180 61806180 00006180 00000000     .a.a.a.a.a......
	...
   230bc:	1e000000 73803f00 61806180 61806180     .....?.s.a.a.a.a
   230cc:	3f007380 00001e00 00000000 00000000     .s.?............
   230dc:	00000000 7f006e00 61807380 61806180     .....n...s.a.a.a
   230ec:	73806180 6e007f00 60006000 60006000     .a.s...n.`.`.`.`
	...
   23104:	3f801d80 61807380 61806180 73806180     ...?.s.a.a.a.a.s
   23114:	1d803f80 01800180 01800180 00000000     .?..............
   23124:	00000000 67000000 39003f80 30003000     .......g.?.9.0.0
   23134:	30003000 30003000 00003000 00000000     .0.0.0.0.0......
	...
   2314c:	1e000000 61803f80 7f006000 01803f80     .....?.a.`...?..
   2315c:	7f006180 00001e00 00000000 00000000     .a..............
   2316c:	18000800 7f001800 18007f00 18001800     ................
   2317c:	18001800 1f801800 00000f80 00000000     ................
	...
   23194:	61800000 61806180 61806180 61806180     ...a.a.a.a.a.a.a
   231a4:	7f806380 00003d80 00000000 00000000     .c...=..........
   231b4:	00000000 60c00000 31803180 1b003180     .......`.1.1.1..
   231c4:	1b001b00 0e000e00 00000600 00000000     ................
	...
   231dc:	dd800000 dd80dd80 55005500 77005500     .........U.U.U.w
   231ec:	22007700 00002200 00000000 00000000     .w."."..........
   231fc:	00000000 61800000 33003300 0c001e00     .......a.3.3....
   2320c:	1e000c00 33003300 00006180 00000000     .....3.3.a......
	...
   23224:	61806180 33003180 1b003300 1b001b00     .a.a.1.3.3......
   23234:	0e000e00 1c000e00 70007c00 00000000     .........|.p....
   23244:	00000000 7fc00000 01807fc0 06000300     ................
   23254:	18000c00 7fc03000 00007fc0 00000000     .....0..........
   23264:	07800380 06000600 06000600 0e000600     ................
   23274:	1c001c00 06000e00 06000600 06000600     ................
   23284:	03800780 06000600 06000600 06000600     ................
   23294:	06000600 06000600 06000600 06000600     ................
   232a4:	06000600 06000600 3c003800 0c000c00     .........8.<....
   232b4:	0c000c00 0e000c00 07000700 0c000e00     ................
   232c4:	0c000c00 0c000c00 38003c00 00000000     .........<.8....
	...
   232dc:	38800000 47007f80 00000000 00000000     ...8...G........
	...
   232f4:	656d6954 63757320 73736563 6c6c7566     Time successfull
   23304:	72772079 65747469 0a0d2e6e 00000000     y written.......
   23314:	6f727245 72772072 6e697469 69742067     Error writing ti
   23324:	0d2e656d 0000000a 656d6954 61657220     me......Time rea
   23334:	75732064 73656363 6c756673 0d2e796c     d successfully..
   23344:	0000000a 6f727245 65722072 6e696461     ....Error readin
   23354:	69742067 0d2e656d 0000000a              g time......

00023360 <main_mqtt_broker>:
   23360:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   23370:	0000006d 64333025 00000000 72617473     m...%03d....star
   23380:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   23390:	726f7473 20656761 20746f6e 64616572     storage not read
   233a0:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   233b0:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   233c0:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   233d0:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   233e0:	203a6461 75716572 20747365 73207369     ad: request is s
   233f0:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   23400:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   23410:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   23420:	726c6120 79646165 000a0d2e 72617473      already....star
   23430:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   23440:	20676e69 50545448 71657220 74736575     ing HTTP request
   23450:	0d2e2e2e 0000000a 70747468 322f2f3a     ........http://2
   23460:	33322e30 30322e31 30322e35 6f492f33     0.231.205.203/Io
   23470:	64702e54 00000066 726f7473 69665f65     T.pdf...store_fi
   23480:	705f656c 656b6361 65203a74 7974706d     le_packet: empty
   23490:	74616420 0a0d2e61 00000000 726f7473      data.......stor
   234a0:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
   234b0:	20656c69 656d616e 20736920 61766e69     ile name is inva
   234c0:	2e64696c 776f4420 616f6c6e 61632064     lid. Download ca
   234d0:	6c65636e 0d2e6465 0000000a 726f7473     nceled......stor
   234e0:	69665f65 705f656c 656b6361 63203a74     e_file_packet: c
   234f0:	74616572 20676e69 656c6966 73255b20     reating file [%s
   23500:	000a0d5d 726f7473 69665f65 705f656c     ]...store_file_p
   23510:	656b6361 66203a74 20656c69 61657263     acket: file crea
   23520:	6e6f6974 72726520 2021726f 3a746572     tion error! ret:
   23530:	0a0d6425 00000000 726f7473 69665f65     %d......store_fi
   23540:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   23550:	74697277 72652065 2c726f72 776f6420     write error, dow
   23560:	616f6c6e 61632064 6c65636e 0d2e6465     nload canceled..
   23570:	0000000a 726f7473 69665f65 705f656c     ....store_file_p
   23580:	656b6361 72203a74 69656365 5b646576     acket: received[
   23590:	5d756c25 6966202c 7320656c 5b657a69     %lu], file size[
   235a0:	5d756c25 00000a0d 726f7473 69665f65     %lu]....store_fi
   235b0:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   235c0:	6e776f64 64616f6c 73206465 65636375     downloaded succe
   235d0:	75667373 2e796c6c 00000a0d 70747468     ssfully.....http
   235e0:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   235f0:	5448203a 63205054 6e65696c 6f732074     : HTTP client so
   23600:	74656b63 6e6f6320 7463656e 0d2e6465     cket connected..
   23610:	0000000a 70747468 696c635f 5f746e65     ....http_client_
   23620:	6c6c6163 6b636162 6572203a 73657571     callback: reques
   23630:	6f632074 656c706d 2e646574 00000a0d     t completed.....
   23640:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   23650:	6b636162 6572203a 76696563 72206465     back: received r
   23660:	6f707365 2065736e 64207525 20617461     esponse %u data 
   23670:	657a6973 0d752520 0000000a 70747468     size %u.....http
   23680:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   23690:	6964203a 6e6f6373 7463656e 206e6f69     : disconnection 
   236a0:	73616572 253a6e6f 000a0d64 6f736572     reason:%d...reso
   236b0:	5f65766c 203a6263 49207325 64612050     lve_cb: %s IP ad
   236c0:	73657264 73692073 2e642520 252e6425     dress is %d.%d.%
   236d0:	64252e64 0a0d0a0d 00000000 69666977     d.%d........wifi
   236e0:	3a62635f 4d324d20 4649575f 4f435f49     _cb: M2M_WIFI_CO
   236f0:	43454e4e 0d444554 0000000a 69666977     NNECTED.....wifi
   23700:	3a62635f 4d324d20 4649575f 49445f49     _cb: M2M_WIFI_DI
   23710:	4e4f4353 5443454e 0a0d4445 00000000     SCONNECTED......
   23720:	72656874 6e736965 7361706f 726f7773     thereisnopasswor
   23730:	00000064 20656854 6e617453 64726164     d...The Standard
   23740:	00000000 69666977 3a62635f 20504920     ....wifi_cb: IP 
   23750:	72646461 20737365 25207369 75252e75     address is %u.%u
   23760:	2e75252e 0a0d7525 00000000 6f727245     .%u.%u......Erro
   23770:	6f632072 63656e6e 676e6974 206f7420     r connecting to 
   23780:	5454514d 6f724220 2172656b 00000a0d     MQTT Broker!....
   23790:	74696e69 6f74735f 65676172 6c70203a     init_storage: pl
   237a0:	65736165 756c7020 6e612067 2f445320     ease plug an SD/
   237b0:	20434d4d 64726163 206e6920 746f6c73     MMC card in slot
   237c0:	0d2e2e2e 0000000a 74696e69 6f74735f     ........init_sto
   237d0:	65676172 4453203a 72614320 6e692064     rage: SD Card in
   237e0:	6c617473 6166206c 64656c69 000a0d2e     stall failed....
   237f0:	74696e69 6f74735f 65676172 7274203a     init_storage: tr
   23800:	6e752079 67756c70 646e6120 2d657220     y unplug and re-
   23810:	67756c70 65687420 72616320 0a0d2e64     plug the card...
   23820:	00000000 74696e69 6f74735f 65676172     ....init_storage
   23830:	6f6d203a 69746e75 5320676e 61632044     : mounting SD ca
   23840:	2e2e6472 000a0d2e 74696e69 6f74735f     rd......init_sto
   23850:	65676172 4453203a 72616320 6f6d2064     rage: SD card mo
   23860:	20746e75 6c696166 20216465 73657228     unt failed! (res
   23870:	29642520 00000a0d 74696e69 6f74735f      %d)....init_sto
   23880:	65676172 4453203a 72616320 6f6d2064     rage: SD card mo
   23890:	20746e75 0d2e4b4f 0000000a 666e6f63     unt OK......conf
   238a0:	72756769 74685f65 635f7074 6e65696c     igure_http_clien
   238b0:	48203a74 20505454 65696c63 6920746e     t: HTTP client i
   238c0:	6974696e 7a696c61 6f697461 6166206e     nitialization fa
   238d0:	64656c69 72282021 25207365 0a0d2964     iled! (res %d)..
   238e0:	00000000 25200a0d 00732a2e 28626772     ...... %.*s.rgb(
   238f0:	00000000 47520a0d 64252042 20642520     ......RGB %d %d 
   23900:	0a0d6425 00000000 6167227b 3a22656d     %d......{"game":
   23910:	0000005b 61470a0d 6d20656d 61737365     [.....Game messa
   23920:	72206567 69656365 21646576 00000a0d     ge received!....
   23930:	732a2e25 00000000 61500a0d 64657372     %.*s......Parsed
   23940:	6d6f4320 646e616d 0000203a 002c6425      Command: ..%d,.
   23950:	61470a0d 6d20656d 61737365 72206567     ..Game message r
   23960:	69656365 20646576 20747562 20746f6e     eceived but not 
   23970:	65646e75 6f747372 0d21646f 0000000a     understood!.....
   23980:	4d490a0d 6f742055 20636970 65636572     ..IMU topic rece
   23990:	64657669 000a0d21 69440a0d 6e617473     ived!.....Distan
   239a0:	74206563 6369706f 63657220 65766965     ce topic receive
   239b0:	0a0d2164 00000000 203e3e20 00000000     d!...... >> ....
   239c0:	4c5f3150 455f4445 31354553 30545f36     P1_LED_ESE516_T0
   239d0:	00000000 736c6166 00000065 65757274     ....false...true
   239e0:	00000000 6f430a0d 63656e6e 676e6974     ......Connecting
   239f0:	206f7420 6b6f7242 2e2e7265 0000002e      to Broker......
   23a00:	4a737242 6f564e42 376c4251 00000000     BrsJBNVoQBl7....
   23a10:	79747472 6a65626f 00000000 5454514d     rttyobej....MQTT
   23a20:	72452020 20726f72 4f4e202d 6f432054       Error - NOT Co
   23a30:	63656e6e 20646574 62206f74 656b6f72     nnected to broke
   23a40:	000a0d72 5454514d 6e6f4320 7463656e     r...MQTT Connect
   23a50:	74206465 7262206f 72656b6f 00000a0d     ed to broker....
   23a60:	6e6e6f43 20746365 6c696166 206f7420     Connect fail to 
   23a70:	76726573 25287265 20212973 72746572     server(%s)! retr
   23a80:	74692079 74756120 74616d6f 6c616369     y it automatical
   23a90:	0d2e796c 0000000a 475f3150 5f454d41     ly......P1_GAME_
   23aa0:	35455345 545f3631 00000030 495f3150     ESE516_T0...P1_I
   23ab0:	455f554d 31354553 30545f36 00000000     MU_ESE516_T0....
   23ac0:	5454514d 6e6f4320 7463656e 0a0d6465     MQTT Connected..
   23ad0:	00000000 5454514d 6f726220 2072656b     ....MQTT broker 
   23ae0:	6c636564 20656e69 72756f79 63636120     decline your acc
   23af0:	21737365 72726520 6320726f 2065646f     ess! error code 
   23b00:	0a0d6425 00000000 5454514d 73696420     %d......MQTT dis
   23b10:	6e6e6f63 65746365 000a0d64 5454514d     connected...MQTT
   23b20:	696e6920 6c616974 74617a69 206e6f69      initialization 
   23b30:	6c696166 202e6465 6f727245 6f632072     failed. Error co
   23b40:	69206564 25282073 0a0d2964 00000000     de is (%d)......
   23b50:	5454514d 67657220 65747369 61632072     MQTT register ca
   23b60:	61626c6c 66206b63 656c6961 45202e64     llback failed. E
   23b70:	726f7272 646f6320 73692065 64252820     rror code is (%d
   23b80:	000a0d29 2264227b 74227b3a 22706d65     )...{"d":{"temp"
   23b90:	7d64253a 0000007d 4941465b 72205d4c     :%d}}...[FAIL] r
   23ba0:	25207365 000a0d64 67616c46 78742e41     es %d...FlagA.tx
   23bb0:	64612074 21646564 00000a0d 6c463a30     t added!....0:Fl
   23bc0:	2e416761 00747874 6e6e6f43 65746365     agA.txt.Connecte
   23bd0:	6f742064 54514d20 72422054 72656b6f     d to MQTT Broker
   23be0:	000a0d21 6d69227b 3a227875 202c6425     !...{"imux":%d, 
   23bf0:	756d6922 203a2279 202c6425 756d6922     "imuy": %d, "imu
   23c00:	203a227a 007d6425 00006425 00007d5d     z": %d}.%d..]}..
   23c10:	00000a0d 475f3250 5f454d41 35455345     ....P2_GAME_ESE5
   23c20:	545f3631 00000030 4f525245 6e492052     16_T0...ERROR In
   23c30:	61697469 697a696c 5720676e 20696669     itializing Wifi 
   23c40:	61746144 65757120 21736575 00000a0d     Data queues!....
   23c50:	35455345 2d203631 66695720 6e492069     ESE516 - Wifi In
   23c60:	43207469 0d65646f 0000000a 6e69616d     it Code.....main
   23c70:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   23c80:	6c6c6163 72726520 2021726f 73657228     call error! (res
   23c90:	29642520 00000a0d 6e69616d 6f63203a      %d)....main: co
   23ca0:	63656e6e 676e6974 206f7420 69466957     nnecting to WiFi
   23cb0:	20504120 2e2e7325 000a0d2e 545f3150      AP %s......P1_T
   23cc0:	45504d45 55544152 455f4552 31354553     EMPERATURE_ESE51
   23cd0:	30545f36 00000000 5454514d 6e657320     6_T0....MQTT sen
   23ce0:	73252064 00000a0d 000028e4 000028f0     d %s.....(...(..
   23cf0:	00002902 00002958 00002978 706c6568     .)..X)..x)..help
   23d00:	00000000 65680a0d 0d3a706c 694c200a     ......help:.. Li
   23d10:	20737473 206c6c61 20656874 69676572     sts all the regi
   23d20:	72657473 63206465 616d6d6f 0d73646e     stered commands.
   23d30:	000a0d0a 6f636e49 63657272 6f632074     ....Incorrect co
   23d40:	6e616d6d 61702064 656d6172 28726574     mmand parameter(
   23d50:	202e2973 746e4520 22207265 706c6568     s).  Enter "help
   23d60:	6f742022 65697620 20612077 7473696c     " to view a list
   23d70:	20666f20 69617661 6c62616c 6f632065      of available co
   23d80:	6e616d6d 0d2e7364 000a0d0a 6d6d6f43     mmands......Comm
   23d90:	20646e61 20746f6e 6f636572 73696e67     and not recognis
   23da0:	202e6465 746e4520 27207265 706c6568     ed.  Enter 'help
   23db0:	6f742027 65697620 20612077 7473696c     ' to view a list
   23dc0:	20666f20 69617661 6c62616c 6f632065      of available co
   23dd0:	6e616d6d 0d2e7364 000a0d0a              mmands......

00023ddc <xHelpCommand>:
   23ddc:	00023cfc 00023d04 000044f5 00000000     .<...=...D......
   23dec:	61725476 6e456563 656c6261 43525428     vTraceEnable(TRC
   23dfc:	4154535f 415f5452 54494157 534f485f     _START_AWAIT_HOS
   23e0c:	6e202954 6120746f 776f6c6c 69206465     T) not allowed i
   23e1c:	6e53206e 68737061 6d20746f 0065646f     n Snapshot mode.
   23e2c:	78656e55 74636570 61206465 6d756772     Unexpected argum
   23e3c:	20746e65 76206f74 63617254 616e4565     ent to vTraceEna
   23e4c:	20656c62 616e7328 6f687370 6f6d2074     ble (snapshot mo
   23e5c:	00296564 74437a54 00006c72 20746f4e     de).TzCtrl..Not 
   23e6c:	756f6e65 54206867 204b5341 646e6168     enough TASK hand
   23e7c:	2073656c 6e69202d 61657263 54206573     les - increase T
   23e8c:	435f4352 4e5f4746 4b534154 206e6920     RC_CFG_NTASK in 
   23e9c:	53637274 7370616e 43746f68 69666e6f     trcSnapshotConfi
   23eac:	00682e67 20746f4e 756f6e65 49206867     g.h.Not enough I
   23ebc:	68205253 6c646e61 2d207365 636e6920     SR handles - inc
   23ecc:	73616572 52542065 46435f43 494e5f47     rease TRC_CFG_NI
   23edc:	69205253 7274206e 616e5363 6f687370     SR in trcSnapsho
   23eec:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   23efc:	756f6e65 53206867 50414d45 45524f48     enough SEMAPHORE
   23f0c:	6e616820 73656c64 69202d20 6572636e      handles - incre
   23f1c:	20657361 5f435254 5f474643 4d45534e     ase TRC_CFG_NSEM
   23f2c:	4f485041 69204552 7274206e 616e5363     APHORE in trcSna
   23f3c:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   23f4c:	20746f4e 756f6e65 4d206867 58455455     Not enough MUTEX
   23f5c:	6e616820 73656c64 69202d20 6572636e      handles - incre
   23f6c:	20657361 5f435254 5f474643 54554d4e     ase TRC_CFG_NMUT
   23f7c:	69205845 7274206e 616e5363 6f687370     EX in trcSnapsho
   23f8c:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   23f9c:	756f6e65 51206867 45554555 6e616820     enough QUEUE han
   23fac:	73656c64 69202d20 6572636e 20657361     dles - increase 
   23fbc:	5f435254 5f474643 4555514e 69204555     TRC_CFG_NQUEUE i
   23fcc:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   23fdc:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   23fec:	54206867 52454d49 6e616820 73656c64     gh TIMER handles
   23ffc:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   2400c:	5f474643 4d49544e 69205245 7274206e     CFG_NTIMER in tr
   2401c:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   2402c:	00000068 20746f4e 756f6e65 45206867     h...Not enough E
   2403c:	544e4556 554f5247 61682050 656c646e     VENTGROUP handle
   2404c:	202d2073 72636e69 65736165 43525420     s - increase TRC
   2405c:	4746435f 56454e5f 47544e45 50554f52     _CFG_NEVENTGROUP
   2406c:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   2407c:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   2408c:	53206867 41455254 4655424d 20524546     gh STREAMBUFFER 
   2409c:	646e6168 2073656c 6e69202d 61657263     handles - increa
   240ac:	54206573 435f4352 4e5f4746 45525453     se TRC_CFG_NSTRE
   240bc:	55424d41 52454646 206e6920 53637274     AMBUFFER in trcS
   240cc:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   240dc:	20746f4e 756f6e65 4d206867 41535345     Not enough MESSA
   240ec:	55424547 52454646 6e616820 73656c64     GEBUFFER handles
   240fc:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   2410c:	5f474643 53454d4e 45474153 46465542     CFG_NMESSAGEBUFF
   2411c:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   2412c:	6e6f4374 2e676966 00000068 547a7370     tConfig.h...pszT
   2413c:	65636172 45746547 726f7272 646e6148     raceGetErrorHand
   2414c:	3a73656c 766e4920 64696c61 6a626f20     les: Invalid obj
   2415c:	63746365 7373616c 00000021 00004c1a     ectclass!....L..
   2416c:	00004c12 00004c16 00004c0a 00004c0e     .L...L...L...L..
   2417c:	00004c1e 00004c22 00004c26 00004c2a     .L.."L..&L..*L..
   2418c:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   2419c:	64726f63 6e207265 6920746f 6974696e     corder not initi
   241ac:	7a696c61 202e6465 20657355 61725476     alized. Use vTra
   241bc:	6e456563 656c6261 69202928 6574736e     ceEnable() inste
   241cc:	00216461 61747328 70757472 00000029     ad!.(startup)...
   241dc:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   241ec:	64726f63 6e207265 6920746f 6974696e     corder not initi
   241fc:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
   2420c:	45656361 6c62616e 20292865 73726966     aceEnable() firs
   2421c:	00002174 43415254 53415f45 54524553     t!..TRACE_ASSERT
   2422c:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   2423c:	7265706f 73656974 6e49203a 696c6176     operties: Invali
   2424c:	61762064 2065756c 20726f66 646e6168     d value for hand
   2425c:	0000656c 43415254 53415f45 54524553     le..TRACE_ASSERT
   2426c:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   2427c:	7265706f 73656974 616e203a 3d20656d     operties: name =
   2428c:	554e203d 00004c4c 61725476 74536563     = NULL..vTraceSt
   2429c:	4965726f 65425253 206e6967 6572202d     oreISRBegin - re
   242ac:	64726f63 62207265 21797375 65655320     corder busy! See
   242bc:	646f6320 6f632065 6e656d6d 00002e74      code comment...
   242cc:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   242dc:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   242ec:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   242fc:	6c646e61 4e282065 294c4c55 00000000     andle (NULL)....
   2430c:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   2431c:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   2432c:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   2433c:	6c646e61 3e282065 53494e20 00002952     andle (> NISR)..
   2434c:	206f6f54 796e616d 73656e20 20646574     Too many nested 
   2435c:	65746e69 70757272 00217374 61725476     interrupts!.vTra
   2436c:	74536563 4965726f 6e455253 202d2064     ceStoreISREnd - 
   2437c:	6f636572 72656472 73756220 53202179     recorder busy! S
   2438c:	63206565 2065646f 6d6d6f63 2e746e65     ee code comment.
   2439c:	00000000 616d6e55 65686374 61632064     ....Unmatched ca
   243ac:	74206c6c 5476206f 65636172 726f7453     ll to vTraceStor
   243bc:	52534965 20646e45 53496e28 74636152     eISREnd (nISRact
   243cc:	20657669 30203d3d 7865202c 74636570     ive == 0, expect
   243dc:	3e206465 00293020 43415254 53415f45     ed > 0).TRACE_AS
   243ec:	54524553 7277203a 49657469 3a38746e     SERT: writeInt8:
   243fc:	66756220 20726566 4e203d3d 004c4c55      buffer == NULL.
   2440c:	43415254 53415f45 54524553 7277203a     TRACE_ASSERT: wr
   2441c:	49657469 3631746e 7562203a 72656666     iteInt16: buffer
   2442c:	203d3d20 4c4c554e 00000000 43415254      == NULL....TRAC
   2443c:	53415f45 54524553 7277203a 49657469     E_ASSERT: writeI
   2444c:	3233746e 7562203a 72656666 203d3d20     nt32: buffer == 
   2445c:	4c4c554e 00000000 61725476 72506563     NULL....vTracePr
   2446c:	46746e69 54202d20 6d206f6f 20796e61     intF - Too many 
   2447c:	75677261 746e656d 6d202c73 31207861     arguments, max 1
   2448c:	6c612035 65776f6c 00002164 61725476     5 allowed!..vTra
   2449c:	72506563 46746e69 54202d20 6c206f6f     cePrintF - Too l
   244ac:	65677261 67726120 6e656d75 202c7374     arge arguments, 
   244bc:	2078616d 62203233 20657479 6f6c6c61     max 32 byte allo
   244cc:	21646577 00000000 43415254 53415f45     wed!....TRACE_AS
   244dc:	54524553 5476203a 65636172 69725056     SERT: vTraceVPri
   244ec:	3a46746e 726f6620 5374616d 3d207274     ntF: formatStr =
   244fc:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   2450c:	54524553 5478203a 65636172 69676552     SERT: xTraceRegi
   2451c:	72657473 69727453 203a676e 6562616c     sterString: labe
   2452c:	3d3d206c 4c554e20 0000004c 43415254     l == NULL...TRAC
   2453c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   2454c:	74536563 5465726f 526b7361 79646165     ceStoreTaskReady
   2455c:	6e49203a 696c6176 61762064 2065756c     : Invalid value 
   2456c:	20726f66 646e6168 0000656c 6f636552     for handle..Reco
   2457c:	72656472 73756220 202d2079 68676968     rder busy - high
   2458c:	69727020 7469726f 53492079 73752052      priority ISR us
   2459c:	20676e69 63737973 3f6c6c61 29312820     ing syscall? (1)
   245ac:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   245bc:	7270203a 61725476 74536563 4c65726f     : prvTraceStoreL
   245cc:	6f50776f 3a726577 766e4920 64696c61     owPower: Invalid
   245dc:	616c6620 61762067 0065756c 43415254      flag value.TRAC
   245ec:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   245fc:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   2460c:	65203a6c 65646f63 203d3e20 46467830     l: ecode >= 0xFF
   2461c:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   2462c:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
   2463c:	656e7265 6c61436c 6f203a6c 63656a62     ernelCall: objec
   2464c:	616c4374 3e207373 5254203d 5f454341     tClass >= TRACE_
   2465c:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   2466c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   2467c:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   2468c:	49203a6c 6c61766e 76206469 65756c61     l: Invalid value
   2469c:	726f6620 6a626f20 4e746365 65626d75      for objectNumbe
   246ac:	00000072 6f636552 72656472 73756220     r...Recorder bus
   246bc:	202d2079 68676968 69727020 7469726f     y - high priorit
   246cc:	53492079 73752052 20676e69 63737973     y ISR using sysc
   246dc:	3f6c6c61 29322820 00000000 43415254     all? (2)....TRAC
   246ec:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   246fc:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   2470c:	7469576c 72615068 203a6d61 63747665     lWithParam: evtc
   2471c:	2065646f 30203d3e 00464678 43415254     ode >= 0xFF.TRAC
   2472c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   2473c:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   2474c:	7469576c 72615068 203a6d61 656a626f     lWithParam: obje
   2475c:	6c437463 20737361 54203d3e 45434152     ctClass >= TRACE
   2476c:	4c434e5f 45535341 00000053 43415254     _NCLASSES...TRAC
   2477c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   2478c:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   2479c:	7469576c 72615068 203a6d61 61766e49     lWithParam: Inva
   247ac:	2064696c 756c6176 6f662065 626f2072     lid value for ob
   247bc:	7463656a 626d754e 00007265 6f636552     jectNumber..Reco
   247cc:	72656472 73756220 202d2079 68676968     rder busy - high
   247dc:	69727020 7469726f 53492079 73752052      priority ISR us
   247ec:	20676e69 63737973 3f6c6c61 29332820     ing syscall? (3)
   247fc:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   2480c:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   2481c:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   2482c:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   2483c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   2484c:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   2485c:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   2486c:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   2487c:	76206469 65756c61 726f6620 74766520     id value for evt
   2488c:	65646f63 00000000 6f636552 72656472     code....Recorder
   2489c:	73756220 202d2079 68676968 69727020      busy - high pri
   248ac:	7469726f 53492079 73752052 20676e69     ority ISR using 
   248bc:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   248cc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   248dc:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   248ec:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   248fc:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   2490c:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   2491c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   2492c:	4f65726f 63656a62 6d614e74 436e4f65     oreObjectNameOnC
   2493c:	65736f6c 6e657645 6f203a74 63656a62     loseEvent: objec
   2494c:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   2495c:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   2496c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   2497c:	74536563 4f65726f 63656a62 6d614e74     ceStoreObjectNam
   2498c:	436e4f65 65736f6c 6e657645 49203a74     eOnCloseEvent: I
   2499c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   249ac:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
   249bc:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   249cc:	4f65726f 63656a62 6f725074 74726570     oreObjectPropert
   249dc:	4f736569 6f6c436e 76456573 3a746e65     iesOnCloseEvent:
   249ec:	6a626f20 63746365 7373616c 203d3e20      objectclass >= 
   249fc:	43415254 434e5f45 5353414c 00005345     TRACE_NCLASSES..
   24a0c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   24a1c:	61725476 74536563 4f65726f 63656a62     vTraceStoreObjec
   24a2c:	6f725074 74726570 4f736569 6f6c436e     tPropertiesOnClo
   24a3c:	76456573 3a746e65 766e4920 64696c61     seEvent: Invalid
   24a4c:	6c617620 66206575 6820726f 6c646e61      value for handl
   24a5c:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   24a6c:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
   24a7c:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
   24a8c:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
   24a9c:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   24aac:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   24abc:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
   24acc:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
   24adc:	76206469 65756c61 726f6620 00646920     id value for id.
   24aec:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   24afc:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   24b0c:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   24b1c:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   24b2c:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   24b3c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   24b4c:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   24b5c:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   24b6c:	65756c61 726f6620 00646920 43415254     alue for id.TRAC
   24b7c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   24b8c:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   24b9c:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   24bac:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   24bbc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   24bcc:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   24bdc:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   24bec:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   24bfc:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   24c0c:	65476563 6a624f74 53746365 65746174     ceGetObjectState
   24c1c:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   24c2c:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   24c3c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   24c4c:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
   24c5c:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   24c6c:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   24c7c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   24c8c:	65536563 73615474 736e496b 636e6174     ceSetTaskInstanc
   24c9c:	6e694665 65687369 49203a64 6c61766e     eFinished: Inval
   24cac:	76206469 65756c61 726f6620 6e616820     id value for han
   24cbc:	00656c64 63617254 65522065 64726f63     dle.Trace Record
   24ccc:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
   24cdc:	69206f74 7865646e 74756f20 65646973     to index outside
   24cec:	65766520 6220746e 65666675 00002172      event buffer!..
   24cfc:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   24d0c:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   24d1c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   24d2c:	6a626f20 63746365 7373616c 00000000      objectclass....
   24d3c:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   24d4c:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   24d5c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   24d6c:	6a626f20 68746365 6c646e61 00000065      objecthandle...
   24d7c:	656a624f 74207463 656c6261 6f6f6c20     Object table loo
   24d8c:	2070756b 68746977 766e6920 64696c61     kup with invalid
   24d9c:	6a626f20 20746365 646e6168 6f20656c      object handle o
   24dac:	626f2072 7463656a 616c6320 00217373     r object class!.
   24dbc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   24dcc:	61725476 65476563 6a624f74 48746365     vTraceGetObjectH
   24ddc:	6c646e61 49203a65 6c61766e 76206469     andle: Invalid v
   24dec:	65756c61 726f6620 6a626f20 63746365     alue for objectc
   24dfc:	7373616c 00000000 43415254 53415f45     lass....TRACE_AS
   24e0c:	54524553 7270203a 61725476 72466563     SERT: prvTraceFr
   24e1c:	624f6565 7463656a 646e6148 203a656c     eeObjectHandle: 
   24e2c:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   24e3c:	626f2072 7463656a 73616c63 00000073     r objectclass...
   24e4c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   24e5c:	61725476 72466563 624f6565 7463656a     vTraceFreeObject
   24e6c:	646e6148 203a656c 61766e49 2064696c     Handle: Invalid 
   24e7c:	756c6176 6f662065 61682072 656c646e     value for handle
   24e8c:	00000000 65747441 2074706d 66206f74     ....Attempt to f
   24e9c:	20656572 65726f6d 6e616820 73656c64     ree more handles
   24eac:	61687420 6c61206e 61636f6c 21646574      than allocated!
   24ebc:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   24ecc:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   24edc:	4e746365 3a656d61 6d616e20 3d3d2065     ectName: name ==
   24eec:	4c554e20 0000004c 656c6c49 206c6167      NULL...Illegal 
   24efc:	656a626f 63207463 7373616c 206e6920     object class in 
   24f0c:	54767270 65636172 4f746553 63656a62     prvTraceSetObjec
   24f1c:	6d614e74 00000065 656c6c49 206c6167     tName...Illegal 
   24f2c:	646e6168 2820656c 69202930 7270206e     handle (0) in pr
   24f3c:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
   24f4c:	2e656d61 00000000 43415254 53415f45     ame.....TRACE_AS
   24f5c:	54524553 7270203a 61725476 704f6563     SERT: prvTraceOp
   24f6c:	79536e65 6c6f626d 616e203a 3d20656d     enSymbol: name =
   24f7c:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   24f8c:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
   24f9c:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
   24fac:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
   24fbc:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
   24fcc:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
   24fdc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   24fec:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
   24ffc:	696c6176 61762064 2065756c 20726f66     valid value for 
   2500c:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
   2501c:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
   2502c:	206e6920 54767270 65636172 44746547      in prvTraceGetD
   2503c:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
   2504c:	7270203a 61725476 6f4c6563 70756b6f     : prvTraceLookup
   2505c:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   2506c:	616e203a 3d20656d 554e203d 00004c4c     : name == NULL..
   2507c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   2508c:	61725476 6f4c6563 70756b6f 626d7953     vTraceLookupSymb
   2509c:	61546c6f 45656c62 7972746e 656c203a     olTableEntry: le
   250ac:	3d3d206e 00003020 43415254 53415f45     n == 0..TRACE_AS
   250bc:	54524553 7270203a 61725476 72436563     SERT: prvTraceCr
   250cc:	65746165 626d7953 61546c6f 45656c62     eateSymbolTableE
   250dc:	7972746e 616e203a 3d20656d 554e203d     ntry: name == NU
   250ec:	00004c4c 43415254 53415f45 54524553     LL..TRACE_ASSERT
   250fc:	7270203a 61725476 72436563 65746165     : prvTraceCreate
   2510c:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   2511c:	656c203a 3d3d206e 00003020 626d7953     : len == 0..Symb
   2512c:	74206c6f 656c6261 6c756620 49202e6c     ol table full. I
   2513c:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   2514c:	424d5953 545f4c4f 454c4241 5a49535f     SYMBOL_TABLE_SIZ
   2515c:	6e692045 63727420 666e6f43 682e6769     E in trcConfig.h
   2516c:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   2517c:	7270203a 61725476 65476563 65684374     : prvTraceGetChe
   2518c:	75736b63 70203a6d 656d616e 203d3d20     cksum: pname == 
   2519c:	4c4c554e 00000000 43415254 53415f45     NULL....TRACE_AS
   251ac:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   251bc:	65684374 75736b63 70203a6d 20637263     tChecksum: pcrc 
   251cc:	4e203d3d 004c4c55 43415254 53415f45     == NULL.TRACE_AS
   251dc:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   251ec:	65684374 75736b63 70203a6d 676e656c     tChecksum: pleng
   251fc:	3d206874 554e203d 00004c4c 454c4449     th == NULL..IDLE
   2520c:	00000000 20726d54 00637653 00009cbc     ....Tmr Svc.....
   2521c:	00009cbc 00009cbc 00009d4a 00009d14     ........J.......
   2522c:	00009d3e 00009cbc 00009cbc 00009d4a     >...........J...
   2523c:	00009d14                                ....

00025240 <sd_mmc_trans_units>:
   25240:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0002525c <sd_trans_multipliers>:
   2525c:	00000000 0000000a 0000000c 0000000d     ................
   2526c:	0000000f 00000014 00000019 0000001e     ................
   2527c:	00000023 00000028 0000002d 00000032     #...(...-...2...
   2528c:	00000037 0000003c 00000046 00000050     7...<...F...P...

0002529c <mmc_trans_multipliers>:
   2529c:	00000000 0000000a 0000000c 0000000d     ................
   252ac:	0000000f 00000014 0000001a 0000001e     ................
   252bc:	00000023 00000028 0000002d 00000034     #...(...-...4...
   252cc:	00000037 0000003c 00000046 00000050     7...<...F...P...
   252dc:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   252ec:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   252fc:	6320746c 000a646d 0000000d              lt cmd......

00025308 <__FUNCTION__.16824>:
   25308:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   25318:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   25328:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   25338:	0000000d 50504128 52452829 255b2952     ....(APP)(ERR)[%
   25348:	255b5d73 00005d64 46494828 69614629     s][%d]..(HIF)Fai
   25358:	6f74206c 6b617720 74207075 63206568     l to wakup the c
   25368:	0a706968 00000000 66696828 49572029     hip.....(hif) WI
   25378:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
   25388:	6220315f 66207375 0a6c6961 00000000     _1 bus fail.....
   25398:	66696828 64612029 73657264 75622073     (hif) address bu
   253a8:	61662073 000a6c69 66696828 6f432029     s fail..(hif) Co
   253b8:	70757272 20646574 6b636170 53207465     rrupted packet S
   253c8:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   253d8:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   253e8:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   253f8:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   25408:	65747369 0a646572 00000000 6b6f6353     istered.....Scok
   25418:	63207465 626c6c61 206b6361 6e207369     et callback is n
   25428:	7220746f 73696765 65726574 00000a64     ot registered...
   25438:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   25448:	20746f6e 69676572 72657473 000a6465     not registered..
   25458:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   25468:	6e207369 7220746f 73696765 65726574     is not registere
   25478:	00000a64 6d676953 61632061 61626c6c     d...Sigma callba
   25488:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   25498:	64657265 0000000a 66696828 6e692029     ered....(hif) in
   254a8:	696c6176 72672064 2070756f 000a4449     valid group ID..
   254b8:	66696828 6f682029 61207473 64207070     (hif) host app d
   254c8:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   254d8:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   254e8:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
   254f8:	66696828 61462029 2065736c 65746e69     (hif) False inte
   25508:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   25518:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   25528:	7265746e 74707572 67657220 0000000a     nterrupt reg....
   25538:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   25548:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   25558:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   25568:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   25578:	696c6176 72612064 656d7567 000a746e     valid argument..
   25588:	20505041 75716552 65747365 69532064     APP Requested Si
   25598:	6920657a 616c2073 72656772 61687420     ze is larger tha
   255a8:	6874206e 65722065 65766963 75622064     n the recived bu
   255b8:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   255c8:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   255d8:	65747365 64412064 73657264 65622073     ested Address be
   255e8:	646e6f79 65687420 63657220 64657669     yond the recived
   255f8:	66756220 20726566 72646461 20737365      buffer address 
   25608:	20646e61 676e656c 000a6874 20705247     and length..GRp 
   25618:	6425203f 0000000a 0000de5c 0000de2c     ? %d....\...,...
   25628:	0000de24 0000de3c 0000de34 0000de54     $...<...4...T...
   25638:	0000de44 0000de4c                       D...L...

00025640 <__FUNCTION__.17692>:
   25640:	5f666968 646e6573 00000000              hif_send....

0002564c <__FUNCTION__.17702>:
   2564c:	5f666968 00727369                       hif_isr.

00025654 <__FUNCTION__.17711>:
   25654:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00025664 <__FUNCTION__.17723>:
   25664:	5f666968 65636572 00657669              hif_receive.

00025670 <__FUNCTION__.17739>:
   25670:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   25680:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   25690:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   256a0:	75252e75 2075252e 000a2022 0000000d     u.%u.%u " ......
   256b0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   256c0:	00005d64 20514552 20746f4e 69666564     d]..REQ Not defi
   256d0:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
   256e0:	4e494f50 0a524554 00000000 41564e49     POINTER.....INVA
   256f0:	2044494c 44495353 0000000a 41564e49     LID SSID....INVA
   25700:	2044494c 000a4843 41564e49 2044494c     LID CH..INVALID 
   25710:	50434844 52455320 20524556 000a5049     DHCP SERVER IP..
   25720:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
   25730:	00000a58 41564e49 2044494c 2059454b     X...INVALID KEY 
   25740:	49525453 5320474e 0a455a49 00000000     STRING SIZE.....
   25750:	41564e49 2044494c 2059454b 455a4953     INVALID KEY SIZE
   25760:	0000000a 41564e49 2044494c 20415057     ....INVALID WPA 
   25770:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
   25780:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
   25790:	4d204e4f 0a45444f 00000000 41564e49     ON MODE.....INVA
   257a0:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   257b0:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   257c0:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   257d0:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   257e0:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   257f0:	73747365 72657020 61637320 6c73206e     ests per scan sl
   25800:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   25810:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   25820:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   25830:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   25840:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   25850:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   25860:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   25870:	6e694d20 69726420 20726576 20726576      Min driver ver 
   25880:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   25890:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   258a0:	0000000a 353a3530 31323a39 00000000     ....05:59:21....
   258b0:	20727041 32203532 00343230 76697244     Apr 25 2024.Driv
   258c0:	62207265 746c6975 20746120 25097325     er built at %s.%
   258d0:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   258e0:	7277616d 65562065 6f697372 00000a6e     mawre Version...
   258f0:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   25900:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
   25910:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
   25920:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
   25930:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
   25940:	2079656b 65646e69 64252078 0000000a     key index %d....
   25950:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   25960:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
   25970:	63657272 53502074 656b204b 656c2079     rrect PSK key le
   25980:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
   25990:	65732064 79742063 000a6570 5f53505f     d sec type.._PS_
   259a0:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
   259b0:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
   259c0:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
   259d0:	6220796c 324d2065 49575f4d 435f4946     ly be M2M_WIFI_C
   259e0:	2f315f48 31312f36 00000a20 45574f50     H_1/6/11 ...POWE
   259f0:	41532052 25204556 00000a64 41564e49     R SAVE %d...INVA
   25a00:	2044494c 414d4f44 4e204e49 0a454d41     LID DOMAIN NAME.
   25a10:	00000000 474e5250 66754220 20726566     ....PRNG Buffer 
   25a20:	65637865 64656465 78616d20 6d756d69     exceeded maximum
   25a30:	7a697320 64252065 20726f20 4c4c554e      size %d or NULL
   25a40:	66754220 0a726566 00000000               Buffer.....

00025a4c <__FUNCTION__.17674>:
   25a4c:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00025a58 <__FUNCTION__.17703>:
   25a58:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00025a68 <__FUNCTION__.17734>:
   25a68:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   25a78:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   25a88:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   25a98:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   25aa8:	0000000d 6c696146 74206465 6177206f     ....Failed to wa
   25ab8:	2070756b 20656874 70696863 0000000a     kup the chip....
   25ac8:	50504128 4e492829 00294f46 76697244     (APP)(INFO).Driv
   25ad8:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   25ae8:	000a786c 6c696166 74206465 6564206f     lx..failed to de
   25af8:	696e692d 6c616974 0a657a69 00000000     -initialize.....

00025b08 <__FUNCTION__.17531>:
   25b08:	70696863 6b61775f 00000065              chip_wake...

00025b14 <__FUNCTION__.17580>:
   25b14:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   25b24:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   25b34:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   25b44:	6e69206c 62207469 000a7375 0000000d     l init bus......
   25b54:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
   25b64:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
   25b74:	74206465 6e65206f 656c6261 746e6920     ed to enable int
   25b84:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
   25b94:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
   25ba4:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
   25bb4:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
   25bc4:	69642068 6c626173 61662065 000a6c69     h disable fail..
   25bd4:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
   25be4:	696e6920 75622074 00000a73               init bus...

00025bf0 <__FUNCTION__.17578>:
   25bf0:	645f6d6e 695f7672 0074696e              nm_drv_init.

00025bfc <__FUNCTION__.17585>:
   25bfc:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00025c0c <crc7_syndrome_table>:
   25c0c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   25c1c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   25c2c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   25c3c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   25c4c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   25c5c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   25c6c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   25c7c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   25c8c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   25c9c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   25cac:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   25cbc:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   25ccc:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   25cdc:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   25cec:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   25cfc:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   25d0c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   25d1c:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   25d2c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   25d3c:	73756220 72726520 2e2e726f 00000a2e      bus error......
   25d4c:	0000000d 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   25d5c:	656c6961 75622064 72652073 2e726f72     ailed bus error.
   25d6c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   25d7c:	656c6961 61642064 72206174 6f707365     ailed data respo
   25d8c:	2065736e 64616572 7825202c 20782520     nse read, %x %x 
   25d9c:	000a7825 696d6e5b 69707320 46203a5d     %x..[nmi spi]: F
   25dac:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   25dbc:	72206573 2c646165 73756220 72726520     se read, bus err
   25dcc:	2e2e726f 00000a2e 696d6e5b 69707320     or......[nmi spi
   25ddc:	73203a5d 62206970 65666675 69732072     ]: spi buffer si
   25dec:	7420657a 73206f6f 6c6c616d 64252820     ze too small (%d
   25dfc:	25282029 000a2964 696d6e5b 69707320     ) (%d)..[nmi spi
   25e0c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   25e1c:	6e6f7073 202c6573 20646d63 32302528     sponse, cmd (%02
   25e2c:	202c2978 70736572 30252820 0a297832     x), resp (%02x).
   25e3c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   25e4c:	656c6961 6d632064 74732064 20657461     ailed cmd state 
   25e5c:	70736572 65736e6f 61747320 28206574     response state (
   25e6c:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   25e7c:	45203a5d 726f7272 6164202c 72206174     ]: Error, data r
   25e8c:	20646165 70736572 65736e6f 30252820     ead response (%0
   25e9c:	0a297832 00000000 696d6e5b 69707320     2x).....[nmi spi
   25eac:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   25ebc:	6877206e 72206e65 69646165 6420676e     n when reading d
   25ecc:	2e617461 0000000a 696d6e5b 69707320     ata.....[nmi spi
   25edc:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   25eec:	6877206e 72206e65 69646165 6320676e     n when reading c
   25efc:	0a2e6372 00000000 696d6e5b 69707320     rc......[nmi spi
   25f0c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   25f1c:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   25f2c:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   25f3c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   25f4c:	62206174 6b636f6c 63726320 61657220     ta block crc rea
   25f5c:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   25f6c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   25f7c:	656c6961 61642064 72206174 6f707365     ailed data respo
   25f8c:	2065736e 64616572 7562202c 72652073     nse read, bus er
   25f9c:	2e726f72 000a2e2e 696d6e5b 69707320     ror.....[nmi spi
   25fac:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   25fbc:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   25fcc:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   25fdc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   25fec:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   25ffc:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   2600c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2601c:	61642064 62206174 6b636f6c 69727720     d data block wri
   2602c:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   2603c:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   2604c:	656c6961 61642064 62206174 6b636f6c     ailed data block
   2605c:	63726320 69727720 202c6574 20737562      crc write, bus 
   2606c:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   2607c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   2608c:	77202c64 65746972 67657220 30252820     d, write reg (%0
   2609c:	2e297838 000a2e2e 65736552 6e612074     8x).....Reset an
   260ac:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   260bc:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   260cc:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   260dc:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   260ec:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   260fc:	656c6961 6c622064 206b636f 61746164     ailed block data
   2610c:	69727720 2e2e6574 00000a2e 65736552      write......Rese
   2611c:	6e612074 65722064 20797274 25206425     t and retry %d %
   2612c:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   2613c:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
   2614c:	20646165 20676572 38302528 2e2e2978     ead reg (%08x)..
   2615c:	00000a2e 65736552 6e612074 65722064     ....Reset and re
   2616c:	20797274 25206425 000a786c 696d6e5b     try %d %lx..[nmi
   2617c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   2618c:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   2619c:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
   261ac:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   261bc:	6e726574 72206c61 20646165 746f7270     ternal read prot
   261cc:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
   261dc:	6572202c 69727974 7720676e 20687469     , retyring with 
   261ec:	20435243 2e66666f 000a2e2e 696d6e5b     CRC off.....[nmi
   261fc:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   2620c:	6e726574 72206c61 20646165 746f7270     ternal read prot
   2621c:	6c6f636f 0a2e2e2e 00000000 696d6e5b     ocol........[nmi
   2622c:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   2623c:	6e726574 77206c61 65746972 6f727020     ternal write pro
   2624c:	6f636f74 6572206c 2e2e2e67 0000000a     tocol reg.......
   2625c:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   2626c:	20646d63 64616572 69686320 64692070     cmd read chip id
   2627c:	0a2e2e2e 00000000 0000fa84 0000fa84     ................
   2628c:	0000fb14 0000f9d8 0000fa1e 0000fa40     ............@...
   2629c:	0000fac6 0000fac6 0000fb80 0000f9ac     ................
   262ac:	0000fbda 0000fbda 0000fbda 0000fbda     ................
   262bc:	0000fa62 0000ffe4 0000ffe4 0001006c     b...........l...
   262cc:	0000ff48 0000ff8a 0000ffa8 00010022     H..........."...
   262dc:	00010022 000100ce 0000ff20 0001011e     "....... .......
   262ec:	0001011e 0001011e 0001011e 0000ffc6     ................

000262fc <__FUNCTION__.16853>:
   262fc:	5f697073 00646d63                       spi_cmd.

00026304 <__FUNCTION__.16860>:
   26304:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00026314 <__FUNCTION__.16869>:
   26314:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00026320 <__FUNCTION__.16902>:
   26320:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   26330:	00000000                                ....

00026334 <__FUNCTION__.16948>:
   26334:	5f697073 61746164 6972775f 00006574     spi_data_write..

00026344 <__FUNCTION__.16960>:
   26344:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00026354 <__FUNCTION__.16971>:
   26354:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00026364 <__FUNCTION__.16983>:
   26364:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00026374 <__FUNCTION__.16994>:
   26374:	735f6d6e 725f6970 00646165              nm_spi_read.

00026380 <__FUNCTION__.17015>:
   26380:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   26390:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   263a0:	6e657272 253c2074 000a3e64 0000000d     rrent <%d>......
   263b0:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   263c0:	4449206e 25203d20 000a0d64 6b636f53     n ID = %d...Sock
   263d0:	206f7420 656c6564 3c206574 0a3e6425      to delete <%d>.
   263e0:	00000000 50504128 52452829 255b2952     ....(APP)(ERR)[%
   263f0:	255b5d73 00005d64 20494e53 65637845     s][%d]..SNI Exce
   26400:	20736465 2078614d 676e654c 000a6874     eds Max Length..
   26410:	6e6b6e55 206e776f 204c5353 6b636f53     Unknown SSL Sock
   26420:	4f207465 6f697470 6425206e 0000000a     et Option %d....
   26430:	20746f4e 204c5353 6b636f53 000a7465     Not SSL Socket..
   26440:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   26450:	22302074 00000000                       t 0"....

00026458 <lun_desc>:
   26458:	0000b6e1 0000b739 0000b785 0000b7d1     ....9...........
   26468:	0000b801 0000b885 0000b915 00026440     ............@d..
   26478:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   26488:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   26498:	00015a02 00015a7c 00015a7c 00015a20     .Z..|Z..|Z.. Z..
   264a8:	00015a1a 00015a26 00015a08 00015a2c     .Z..&Z...Z..,Z..
   264b8:	00015a62 00015c64 00015cb4 00015cb4     bZ..d\...\...\..
   264c8:	00015cb0 00015c56 00015c76 00015c46     .\..V\..v\..F\..
   264d8:	00015c88 00015c9a 00015d02 00015d30     .\...\...]..0]..
   264e8:	00015d30 00015d2c 00015cfc 00015d08     0]..,]...\...]..
   264f8:	00015cf6 00015d0e 00015d14              .\...]...]..

00026504 <tcc_modules>:
   26504:	42002000 42002400 42002800              . .B.$.B.(.B

00026510 <_tcc_gclk_ids>:
   26510:	001b1a1a                                ....

00026514 <_tcc_apbcmasks>:
   26514:	00000100 00000200 00000400              ............

00026520 <_tcc_maxs>:
   26520:	00ffffff 00ffffff 0000ffff              ............

0002652c <_tcc_cc_nums>:
   2652c:	00020204                                ....

00026530 <_tcc_ow_nums>:
   26530:	00020408                                ....

00026534 <_tcc_intflag>:
   26534:	00000001 00000002 00000004 00000008     ................
   26544:	00001000 00002000 00004000 00008000     ..... ...@......
   26554:	00010000 00020000 00040000 00080000     ................

00026564 <LfnOfs>:
   26564:	07050301 12100e09 1c181614 0000001e     ................
   26574:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   26584:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
   26594:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
   265a4:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
   265b4:	20205441 00202020                       AT     .

000265bc <excvt.4558>:
   265bc:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   265cc:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   265dc:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   265ec:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   265fc:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   2660c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   2661c:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   2662c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0002663c <Tbl>:
   2663c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   2664c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   2665c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   2666c:	00d600ff 00f800dc 00d800a3 019200d7     ................
   2667c:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   2668c:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   2669c:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   266ac:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   266bc:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   266cc:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   266dc:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   266ec:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   266fc:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   2670c:	00da00de 00d900db 00dd00fd 00b400af     ................
   2671c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   2672c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0002673c <tbl_lower.4308>:
   2673c:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   2674c:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   2675c:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   2676c:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   2677c:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   2678c:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   2679c:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   267ac:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   267bc:	01050103 01090107 010d010b 0111010f     ................
   267cc:	01150113 01190117 011d011b 0121011f     ..............!.
   267dc:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   267ec:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   267fc:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   2680c:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   2681c:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   2682c:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   2683c:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   2684c:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   2685c:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   2686c:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   2687c:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   2688c:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   2689c:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   268ac:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   268bc:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   268cc:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   268dc:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   268ec:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   268fc:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   2690c:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0002691c <tbl_upper.4309>:
   2691c:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   2692c:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   2693c:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   2694c:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   2695c:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   2696c:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   2697c:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   2698c:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   2699c:	01040102 01080106 010c010a 0110010e     ................
   269ac:	01140112 01180116 011c011a 0120011e     .............. .
   269bc:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   269cc:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   269dc:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   269ec:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   269fc:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   26a0c:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   26a1c:	03940393 03960395 03980397 039a0399     ................
   26a2c:	039c039b 039e039d 03a0039f 03a303a1     ................
   26a3c:	03a503a4 03a703a6 03a903a8 041003aa     ................
   26a4c:	04120411 04140413 04160415 04180417     ................
   26a5c:	041a0419 041c041b 041e041d 0420041f     .............. .
   26a6c:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   26a7c:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   26a8c:	04030402 04050404 04070406 04090408     ................
   26a9c:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   26aac:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   26abc:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   26acc:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   26adc:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   26aec:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   26afc:	0001b06e 0001b06e 0001b06e 0001aefc     n...n...n.......
   26b0c:	0001b06e 0001afe6 0001b06e 0001b06e     n.......n...n...
   26b1c:	0001b06e 0001b06e 0001b06e 0001b06e     n...n...n...n...
   26b2c:	0001b06e 0001b060 4354514d 00000000     n...`...MQTC....
   26b3c:	00000004 00000000 00000000 00000000     ................
   26b4c:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   26b8c:	4354514d 00000000 00000004 00000000     MQTC............
	...
   26ba4:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   26be4:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   26bf4:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   26c04:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   26c14:	20544547 00000000 54534f50 00000020     GET ....POST ...
   26c24:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   26c34:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   26c44:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   26c54:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   26c64:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   26c74:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   26c84:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   26c94:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   26ca4:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   26cb4:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   26cc4:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   26cd4:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   26ce4:	676e654c 203a6874 00000000 33323130     Length: ....0123
   26cf4:	37363534 62613938 66656463 6e617254     456789abcdefTran
   26d04:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   26d14:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   26d24:	50545448 0000002f 00000d31 0001d162     HTTP/...1...b...
   26d34:	0001d15c 0001d156 0001d150 0001d168     \...V...P...h...
   26d44:	0001d14a 0001d168 0001d144 0001d13e     J...h...D...>...
   26d54:	0001d168 0001d138 0001d138 0001d132     h...8...8...2...
   26d64:	0001d12c 0001d126 42002000 42002400     ,...&.... .B.$.B
   26d74:	42002800 656d6954 3025203a 253a6432     .(.BTime: %02d:%
   26d84:	3a643230 64323025 4d632520 7325202c     02d:%02d %cM, %s
   26d94:	7325202c 32302520 32202c64 32302530     , %s %02d, 20%02
   26da4:	000a0d64 646e7553 00007961 646e6f4d     d...Sunday..Mond
   26db4:	00007961 73657554 00796164 6e646557     ay..Tuesday.Wedn
   26dc4:	61647365 00000079 72756854 79616473     esday...Thursday
   26dd4:	00000000 64697246 00007961 75746153     ....Friday..Satu
   26de4:	79616472 00000000 00026da8 00026db0     rday.....m...m..
   26df4:	00026db8 00026dc0 00026dcc 00026dd8     .m...m...m...m..
   26e04:	00026de0 756e614a 00797261 72626546     .m..January.Febr
   26e14:	79726175 00000000 6372614d 00000068     uary....March...
   26e24:	69727041 0000006c 0079614d 656e754a     April...May.June
   26e34:	00000000 796c754a 00000000 75677541     ....July....Augu
   26e44:	00007473 74706553 65626d65 00000072     st..September...
   26e54:	6f74634f 00726562 65766f4e 7265626d     October.November
   26e64:	00000000 65636544 7265626d 00000000     ....December....
   26e74:	00026e08 00026e10 00026e1c 00026e24     .n...n...n..$n..
   26e84:	00026e2c 00026e30 00026e38 00026e40     ,n..0n..8n..@n..
   26e94:	00026e48 00026e54 00026e5c 00026e68     Hn..Tn..\n..hn..
   26ea4:	0a0d0a0d 2d2d2d2d 4553452d 20363135     ....-----ESE516 
   26eb4:	6e69614d 6f725020 6d617267 2d2d2d2d     Main Program----
   26ec4:	000a0d2d 74696e49 696c6169 4820657a     -...Initialize H
   26ed4:	2e2e2e57 00000a0d 6f727245 6e692072     W.......Error in
   26ee4:	61697469 697a696c 4920676e 44204332     itializing I2C D
   26ef4:	65766972 0a0d2172 00000000 20433249     river!......I2C 
   26f04:	76697244 49207265 6974696e 7a696c61     Driver Initializ
   26f14:	0d216465 0000000a 00006948 31445353     ed!.....Hi..SSD1
   26f24:	20363033 63637553 66737365 796c6c75     306 Successfully
   26f34:	696e4920 6c616974 64657a69 000a0d21      Initialized!...
   26f44:	31445353 20363033 74696e49 696c6169     SSD1306 Initiali
   26f54:	6974617a 66206e6f 656c6961 0a0d2164     zation failed!..
   26f64:	00000000 70616548 66656220 2065726f     ....Heap before 
   26f74:	72617473 676e6974 73617420 203a736b     starting tasks: 
   26f84:	0a0d6425 00000000 5f494c43 4b534154     %d......CLI_TASK
   26f94:	00000000 3a525245 494c4320 73617420     ....ERR: CLI tas
   26fa4:	6f63206b 20646c75 20746f6e 69206562     k could not be i
   26fb4:	6974696e 7a696c61 0d216465 0000000a     nitialized!.....
   26fc4:	70736944 5479616c 006b7361 6c696146     DisplayTask.Fail
   26fd4:	74206465 7263206f 65746165 73696420     ed to create dis
   26fe4:	79616c70 73617420 0a0d216b 00000000     play task!......
   26ff4:	70736944 2079616c 6b736174 65726320     Display task cre
   27004:	64657461 63757320 73736563 6c6c7566     ated successfull
   27014:	0a0d2e79 00000000 49464957 5341545f     y.......WIFI_TAS
   27024:	0000004b 3a525245 46495720 61742049     K...ERR: WIFI ta
   27034:	63206b73 646c756f 746f6e20 20656220     sk could not be 
   27044:	74696e69 696c6169 2164657a 00000a0d     initialized!....
   27054:	5f435452 4b534154 00000000 3a525245     RTC_TASK....ERR:
   27064:	43545220 73617420 6f63206b 20646c75      RTC task could 
   27074:	20746f6e 69206562 6974696e 7a696c61     not be initializ
   27084:	0d216465 0000000a 70616548 74666120     ed!.....Heap aft
   27094:	73207265 74726174 20676e69 6b736174     er starting task
   270a4:	25203a73 000a0d64 74746553 20676e69     s: %d...Setting 
   270b4:	20435452 656d6974 3a6f7420 00000020     RTC time to: ...
   270c4:	65746e49 65727072 20646574 656d6954     Interpreted Time
   270d4:	0000203a 04163623 00180418 6c6c6548     : ..#6......Hell
   270e4:	77202c6f 646c726f 00000021 61647055     o, world!...Upda
   270f4:	676e6974 002e2e2e 6f727245 6e6f2072     ting....Error on
   27104:	6d656d20 2079726f 6f6c6c61 69746163      memory allocati
   27114:	6f206e6f 5246206e 54524545 0d21534f     on on FREERTOS!.
   27124:	0000000a 6f727245 6e6f2072 61747320     ....Error on sta
   27134:	6f206b63 66726576 20776f6c 46206e6f     ck overflow on F
   27144:	52454552 21534f54 00000a0d 0001fc28     REERTOS!....(...
   27154:	0001fc0a 0001fbc4 0001fae2 0001fbc4     ................
   27164:	0001fbfc 0001fbc4 0001fae2 0001fc0a     ................
   27174:	0001fc0a 0001fbfc 0001fae2 0001fada     ................
   27184:	0001fada 0001fada 0001fe40 00020288     ........@.......
   27194:	00020148 00020148 00020144 00020260     H...H...D...`...
   271a4:	00020260 00020252 00020144 00020260     `...R...D...`...
   271b4:	00020252 00020260 00020144 00020268     R...`...D...h...
   271c4:	00020268 00020268 0002046c              h...h...l...

000271d0 <_global_impure_ptr>:
   271d0:	20000120                                 .. 

000271d4 <__sf_fake_stderr>:
	...

000271f4 <__sf_fake_stdin>:
	...

00027214 <__sf_fake_stdout>:
	...
   27234:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   27244:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   27254:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   27264:	37363534 62613938 66656463 20200000              456789abcdef.

00027271 <_ctype_>:
   27271:	20202000 20202020 28282020 20282828     .         ((((( 
   27281:	20202020 20202020 20202020 20202020                     
   27291:	10108820 10101010 10101010 10101010      ...............
   272a1:	04040410 04040404 10040404 10101010     ................
   272b1:	41411010 41414141 01010101 01010101     ..AAAAAA........
   272c1:	01010101 01010101 01010101 10101010     ................
   272d1:	42421010 42424242 02020202 02020202     ..BBBBBB........
   272e1:	02020202 02020202 02020202 10101010     ................
   272f1:	00000020 00000000 00000000 00000000      ...............
	...

00027374 <_init>:
   27374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27376:	46c0      	nop			; (mov r8, r8)
   27378:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2737a:	bc08      	pop	{r3}
   2737c:	469e      	mov	lr, r3
   2737e:	4770      	bx	lr

00027380 <__init_array_start>:
   27380:	000000dd 	.word	0x000000dd

00027384 <_fini>:
   27384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27386:	46c0      	nop			; (mov r8, r8)
   27388:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2738a:	bc08      	pop	{r3}
   2738c:	469e      	mov	lr, r3
   2738e:	4770      	bx	lr

00027390 <__fini_array_start>:
   27390:	000000b5 	.word	0x000000b5
