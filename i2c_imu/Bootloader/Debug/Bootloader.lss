
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b7d0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000094  20000000  0000b7d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c00  20000094  0000b864  00020094  2**2
                  ALLOC
  3 .stack        00002004  20000c94  0000c464  00020094  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004a80e  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005c93  00000000  00000000  0006a923  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005987  00000000  00000000  000705b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001040  00000000  00000000  00075f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e30  00000000  00000000  00076f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020e2a  00000000  00000000  00077dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000184fd  00000000  00000000  00098bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093b92  00000000  00000000  000b10d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003c14  00000000  00000000  00144c68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 2c 00 20 5d 68 00 00 55 69 00 00 55 69 00 00     .,. ]h..Ui..Ui..
	...
      2c:	55 69 00 00 00 00 00 00 00 00 00 00 55 69 00 00     Ui..........Ui..
      3c:	e5 01 00 00 55 69 00 00 55 69 00 00 55 69 00 00     ....Ui..Ui..Ui..
      4c:	55 69 00 00 55 69 00 00 55 69 00 00 55 69 00 00     Ui..Ui..Ui..Ui..
      5c:	55 69 00 00 55 69 00 00 e9 3a 00 00 01 3b 00 00     Ui..Ui...:...;..
      6c:	19 3b 00 00 31 3b 00 00 49 3b 00 00 61 3b 00 00     .;..1;..I;..a;..
      7c:	55 69 00 00 55 69 00 00 55 69 00 00 55 69 00 00     Ui..Ui..Ui..Ui..
      8c:	55 69 00 00 55 69 00 00 00 00 00 00 00 00 00 00     Ui..Ui..........
      9c:	55 69 00 00 55 69 00 00 55 69 00 00 55 69 00 00     Ui..Ui..Ui..Ui..
      ac:	55 69 00 00 00 00 00 00                             Ui......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000094 	.word	0x20000094
      d4:	00000000 	.word	0x00000000
      d8:	0000b7d0 	.word	0x0000b7d0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000098 	.word	0x20000098
     108:	0000b7d0 	.word	0x0000b7d0
     10c:	0000b7d0 	.word	0x0000b7d0
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	00006411 	.word	0x00006411
     190:	20000000 	.word	0x20000000
     194:	0000a2ad 	.word	0x0000a2ad
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <GetSystick>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/
uint32_t GetSystick(void)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	af00      	add	r7, sp, #0
	return ul_tickcount;
     1d4:	4b02      	ldr	r3, [pc, #8]	; (1e0 <GetSystick+0x10>)
     1d6:	681b      	ldr	r3, [r3, #0]
}
     1d8:	0018      	movs	r0, r3
     1da:	46bd      	mov	sp, r7
     1dc:	bd80      	pop	{r7, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	200000b0 	.word	0x200000b0

000001e4 <SysTick_Handler>:
 *
 * Note:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	af00      	add	r7, sp, #0
	
	ul_tickcount++;
     1e8:	4b03      	ldr	r3, [pc, #12]	; (1f8 <SysTick_Handler+0x14>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	1c5a      	adds	r2, r3, #1
     1ee:	4b02      	ldr	r3, [pc, #8]	; (1f8 <SysTick_Handler+0x14>)
     1f0:	601a      	str	r2, [r3, #0]
}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	46bd      	mov	sp, r7
     1f6:	bd80      	pop	{r7, pc}
     1f8:	200000b0 	.word	0x200000b0

000001fc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
     202:	0002      	movs	r2, r0
     204:	1dfb      	adds	r3, r7, #7
     206:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     208:	230f      	movs	r3, #15
     20a:	18fb      	adds	r3, r7, r3
     20c:	1dfa      	adds	r2, r7, #7
     20e:	7812      	ldrb	r2, [r2, #0]
     210:	09d2      	lsrs	r2, r2, #7
     212:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     214:	230e      	movs	r3, #14
     216:	18fb      	adds	r3, r7, r3
     218:	1dfa      	adds	r2, r7, #7
     21a:	7812      	ldrb	r2, [r2, #0]
     21c:	0952      	lsrs	r2, r2, #5
     21e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     220:	4b0d      	ldr	r3, [pc, #52]	; (258 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     222:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     224:	230f      	movs	r3, #15
     226:	18fb      	adds	r3, r7, r3
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	2b00      	cmp	r3, #0
     22c:	d10f      	bne.n	24e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     22e:	230f      	movs	r3, #15
     230:	18fb      	adds	r3, r7, r3
     232:	781b      	ldrb	r3, [r3, #0]
     234:	009b      	lsls	r3, r3, #2
     236:	2210      	movs	r2, #16
     238:	4694      	mov	ip, r2
     23a:	44bc      	add	ip, r7
     23c:	4463      	add	r3, ip
     23e:	3b08      	subs	r3, #8
     240:	681a      	ldr	r2, [r3, #0]
     242:	230e      	movs	r3, #14
     244:	18fb      	adds	r3, r7, r3
     246:	781b      	ldrb	r3, [r3, #0]
     248:	01db      	lsls	r3, r3, #7
     24a:	18d3      	adds	r3, r2, r3
     24c:	e000      	b.n	250 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     24e:	2300      	movs	r3, #0
	}
}
     250:	0018      	movs	r0, r3
     252:	46bd      	mov	sp, r7
     254:	b004      	add	sp, #16
     256:	bd80      	pop	{r7, pc}
     258:	41004400 	.word	0x41004400

0000025c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	0002      	movs	r2, r0
     264:	1dfb      	adds	r3, r7, #7
     266:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     268:	1dfb      	adds	r3, r7, #7
     26a:	781b      	ldrb	r3, [r3, #0]
     26c:	0018      	movs	r0, r3
     26e:	4b03      	ldr	r3, [pc, #12]	; (27c <port_get_group_from_gpio_pin+0x20>)
     270:	4798      	blx	r3
     272:	0003      	movs	r3, r0
}
     274:	0018      	movs	r0, r3
     276:	46bd      	mov	sp, r7
     278:	b002      	add	sp, #8
     27a:	bd80      	pop	{r7, pc}
     27c:	000001fd 	.word	0x000001fd

00000280 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     280:	b580      	push	{r7, lr}
     282:	b082      	sub	sp, #8
     284:	af00      	add	r7, sp, #0
     286:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	2200      	movs	r2, #0
     28c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     28e:	687b      	ldr	r3, [r7, #4]
     290:	2201      	movs	r2, #1
     292:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     294:	687b      	ldr	r3, [r7, #4]
     296:	2200      	movs	r2, #0
     298:	709a      	strb	r2, [r3, #2]
}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	46bd      	mov	sp, r7
     29e:	b002      	add	sp, #8
     2a0:	bd80      	pop	{r7, pc}
	...

000002a4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	0002      	movs	r2, r0
     2ac:	1dfb      	adds	r3, r7, #7
     2ae:	701a      	strb	r2, [r3, #0]
     2b0:	1dbb      	adds	r3, r7, #6
     2b2:	1c0a      	adds	r2, r1, #0
     2b4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     2b6:	1dfb      	adds	r3, r7, #7
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	0018      	movs	r0, r3
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <port_pin_set_output_level+0x50>)
     2be:	4798      	blx	r3
     2c0:	0003      	movs	r3, r0
     2c2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	221f      	movs	r2, #31
     2ca:	4013      	ands	r3, r2
     2cc:	2201      	movs	r2, #1
     2ce:	409a      	lsls	r2, r3
     2d0:	0013      	movs	r3, r2
     2d2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2d4:	1dbb      	adds	r3, r7, #6
     2d6:	781b      	ldrb	r3, [r3, #0]
     2d8:	2b00      	cmp	r3, #0
     2da:	d003      	beq.n	2e4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2dc:	68fb      	ldr	r3, [r7, #12]
     2de:	68ba      	ldr	r2, [r7, #8]
     2e0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     2e2:	e002      	b.n	2ea <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	68ba      	ldr	r2, [r7, #8]
     2e8:	615a      	str	r2, [r3, #20]
}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	46bd      	mov	sp, r7
     2ee:	b004      	add	sp, #16
     2f0:	bd80      	pop	{r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	0000025d 	.word	0x0000025d

000002f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     2fe:	1d3b      	adds	r3, r7, #4
     300:	0018      	movs	r0, r3
     302:	4b0e      	ldr	r3, [pc, #56]	; (33c <system_board_init+0x44>)
     304:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     306:	1d3b      	adds	r3, r7, #4
     308:	2201      	movs	r2, #1
     30a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     30c:	1d3b      	adds	r3, r7, #4
     30e:	0019      	movs	r1, r3
     310:	2017      	movs	r0, #23
     312:	4b0b      	ldr	r3, [pc, #44]	; (340 <system_board_init+0x48>)
     314:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     316:	2101      	movs	r1, #1
     318:	2017      	movs	r0, #23
     31a:	4b0a      	ldr	r3, [pc, #40]	; (344 <system_board_init+0x4c>)
     31c:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     31e:	1d3b      	adds	r3, r7, #4
     320:	2200      	movs	r2, #0
     322:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     324:	1d3b      	adds	r3, r7, #4
     326:	2201      	movs	r2, #1
     328:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     32a:	1d3b      	adds	r3, r7, #4
     32c:	0019      	movs	r1, r3
     32e:	2037      	movs	r0, #55	; 0x37
     330:	4b03      	ldr	r3, [pc, #12]	; (340 <system_board_init+0x48>)
     332:	4798      	blx	r3
}
     334:	46c0      	nop			; (mov r8, r8)
     336:	46bd      	mov	sp, r7
     338:	b002      	add	sp, #8
     33a:	bd80      	pop	{r7, pc}
     33c:	00000281 	.word	0x00000281
     340:	00002f19 	.word	0x00002f19
     344:	000002a5 	.word	0x000002a5

00000348 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
     348:	b580      	push	{r7, lr}
     34a:	b082      	sub	sp, #8
     34c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     34e:	4b07      	ldr	r3, [pc, #28]	; (36c <nvm_is_ready+0x24>)
     350:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     352:	687b      	ldr	r3, [r7, #4]
     354:	7d1b      	ldrb	r3, [r3, #20]
     356:	b2db      	uxtb	r3, r3
     358:	001a      	movs	r2, r3
     35a:	2301      	movs	r3, #1
     35c:	4013      	ands	r3, r2
     35e:	1e5a      	subs	r2, r3, #1
     360:	4193      	sbcs	r3, r2
     362:	b2db      	uxtb	r3, r3
}
     364:	0018      	movs	r0, r3
     366:	46bd      	mov	sp, r7
     368:	b002      	add	sp, #8
     36a:	bd80      	pop	{r7, pc}
     36c:	41004000 	.word	0x41004000

00000370 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     370:	b580      	push	{r7, lr}
     372:	b082      	sub	sp, #8
     374:	af00      	add	r7, sp, #0
     376:	0002      	movs	r2, r0
     378:	6039      	str	r1, [r7, #0]
     37a:	1dfb      	adds	r3, r7, #7
     37c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     37e:	1dfb      	adds	r3, r7, #7
     380:	781b      	ldrb	r3, [r3, #0]
     382:	2b01      	cmp	r3, #1
     384:	d00a      	beq.n	39c <system_apb_clock_set_mask+0x2c>
     386:	2b02      	cmp	r3, #2
     388:	d00f      	beq.n	3aa <system_apb_clock_set_mask+0x3a>
     38a:	2b00      	cmp	r3, #0
     38c:	d114      	bne.n	3b8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     38e:	4b0e      	ldr	r3, [pc, #56]	; (3c8 <system_apb_clock_set_mask+0x58>)
     390:	4a0d      	ldr	r2, [pc, #52]	; (3c8 <system_apb_clock_set_mask+0x58>)
     392:	6991      	ldr	r1, [r2, #24]
     394:	683a      	ldr	r2, [r7, #0]
     396:	430a      	orrs	r2, r1
     398:	619a      	str	r2, [r3, #24]
			break;
     39a:	e00f      	b.n	3bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     39c:	4b0a      	ldr	r3, [pc, #40]	; (3c8 <system_apb_clock_set_mask+0x58>)
     39e:	4a0a      	ldr	r2, [pc, #40]	; (3c8 <system_apb_clock_set_mask+0x58>)
     3a0:	69d1      	ldr	r1, [r2, #28]
     3a2:	683a      	ldr	r2, [r7, #0]
     3a4:	430a      	orrs	r2, r1
     3a6:	61da      	str	r2, [r3, #28]
			break;
     3a8:	e008      	b.n	3bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     3aa:	4b07      	ldr	r3, [pc, #28]	; (3c8 <system_apb_clock_set_mask+0x58>)
     3ac:	4a06      	ldr	r2, [pc, #24]	; (3c8 <system_apb_clock_set_mask+0x58>)
     3ae:	6a11      	ldr	r1, [r2, #32]
     3b0:	683a      	ldr	r2, [r7, #0]
     3b2:	430a      	orrs	r2, r1
     3b4:	621a      	str	r2, [r3, #32]
			break;
     3b6:	e001      	b.n	3bc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     3b8:	2317      	movs	r3, #23
     3ba:	e000      	b.n	3be <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     3bc:	2300      	movs	r3, #0
}
     3be:	0018      	movs	r0, r3
     3c0:	46bd      	mov	sp, r7
     3c2:	b002      	add	sp, #8
     3c4:	bd80      	pop	{r7, pc}
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	40000400 	.word	0x40000400

000003cc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     3cc:	b580      	push	{r7, lr}
     3ce:	b084      	sub	sp, #16
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     3d4:	4b2f      	ldr	r3, [pc, #188]	; (494 <nvm_set_config+0xc8>)
     3d6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
     3d8:	2104      	movs	r1, #4
     3da:	2001      	movs	r0, #1
     3dc:	4b2e      	ldr	r3, [pc, #184]	; (498 <nvm_set_config+0xcc>)
     3de:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     3e0:	68fb      	ldr	r3, [r7, #12]
     3e2:	2220      	movs	r2, #32
     3e4:	32ff      	adds	r2, #255	; 0xff
     3e6:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     3e8:	4b2c      	ldr	r3, [pc, #176]	; (49c <nvm_set_config+0xd0>)
     3ea:	4798      	blx	r3
     3ec:	0003      	movs	r3, r0
     3ee:	001a      	movs	r2, r3
     3f0:	2301      	movs	r3, #1
     3f2:	4053      	eors	r3, r2
     3f4:	b2db      	uxtb	r3, r3
     3f6:	2b00      	cmp	r3, #0
     3f8:	d001      	beq.n	3fe <nvm_set_config+0x32>
		return STATUS_BUSY;
     3fa:	2305      	movs	r3, #5
     3fc:	e045      	b.n	48a <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     3fe:	687b      	ldr	r3, [r7, #4]
     400:	781b      	ldrb	r3, [r3, #0]
     402:	021b      	lsls	r3, r3, #8
     404:	001a      	movs	r2, r3
     406:	23c0      	movs	r3, #192	; 0xc0
     408:	009b      	lsls	r3, r3, #2
     40a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	785b      	ldrb	r3, [r3, #1]
     410:	01db      	lsls	r3, r3, #7
     412:	0019      	movs	r1, r3
     414:	23ff      	movs	r3, #255	; 0xff
     416:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     418:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     41a:	687b      	ldr	r3, [r7, #4]
     41c:	789b      	ldrb	r3, [r3, #2]
     41e:	005b      	lsls	r3, r3, #1
     420:	0019      	movs	r1, r3
     422:	231e      	movs	r3, #30
     424:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     426:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     428:	687b      	ldr	r3, [r7, #4]
     42a:	78db      	ldrb	r3, [r3, #3]
     42c:	049b      	lsls	r3, r3, #18
     42e:	0019      	movs	r1, r3
     430:	2380      	movs	r3, #128	; 0x80
     432:	02db      	lsls	r3, r3, #11
     434:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     436:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     438:	687b      	ldr	r3, [r7, #4]
     43a:	791b      	ldrb	r3, [r3, #4]
     43c:	041b      	lsls	r3, r3, #16
     43e:	0019      	movs	r1, r3
     440:	23c0      	movs	r3, #192	; 0xc0
     442:	029b      	lsls	r3, r3, #10
     444:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     446:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
     448:	68fb      	ldr	r3, [r7, #12]
     44a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     44c:	68fb      	ldr	r3, [r7, #12]
     44e:	689b      	ldr	r3, [r3, #8]
     450:	035b      	lsls	r3, r3, #13
     452:	0f5b      	lsrs	r3, r3, #29
     454:	b2db      	uxtb	r3, r3
     456:	001a      	movs	r2, r3
     458:	2308      	movs	r3, #8
     45a:	4093      	lsls	r3, r2
     45c:	b29a      	uxth	r2, r3
     45e:	4b10      	ldr	r3, [pc, #64]	; (4a0 <nvm_set_config+0xd4>)
     460:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     462:	68fb      	ldr	r3, [r7, #12]
     464:	689b      	ldr	r3, [r3, #8]
     466:	b29a      	uxth	r2, r3
     468:	4b0d      	ldr	r3, [pc, #52]	; (4a0 <nvm_set_config+0xd4>)
     46a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	785a      	ldrb	r2, [r3, #1]
     470:	4b0b      	ldr	r3, [pc, #44]	; (4a0 <nvm_set_config+0xd4>)
     472:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     474:	68fb      	ldr	r3, [r7, #12]
     476:	8b1b      	ldrh	r3, [r3, #24]
     478:	b29b      	uxth	r3, r3
     47a:	001a      	movs	r2, r3
     47c:	2380      	movs	r3, #128	; 0x80
     47e:	005b      	lsls	r3, r3, #1
     480:	4013      	ands	r3, r2
     482:	d001      	beq.n	488 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
     484:	2310      	movs	r3, #16
     486:	e000      	b.n	48a <nvm_set_config+0xbe>
	}

	return STATUS_OK;
     488:	2300      	movs	r3, #0
}
     48a:	0018      	movs	r0, r3
     48c:	46bd      	mov	sp, r7
     48e:	b004      	add	sp, #16
     490:	bd80      	pop	{r7, pc}
     492:	46c0      	nop			; (mov r8, r8)
     494:	41004000 	.word	0x41004000
     498:	00000371 	.word	0x00000371
     49c:	00000349 	.word	0x00000349
     4a0:	200000b4 	.word	0x200000b4

000004a4 <SdCard_Initiate>:
* @return		Returns CTRL_GOOD if the SDS card was mounted incorrectly - other status otherwise
* @note         
*****************************************************************************/

Ctrl_status SdCard_Initiate(void)
{
     4a4:	b590      	push	{r4, r7, lr}
     4a6:	b083      	sub	sp, #12
     4a8:	af00      	add	r7, sp, #0
	Ctrl_status status;
	uint32_t timeStart = GetSystick();
     4aa:	4b16      	ldr	r3, [pc, #88]	; (504 <SdCard_Initiate+0x60>)
     4ac:	4798      	blx	r3
     4ae:	0003      	movs	r3, r0
     4b0:	603b      	str	r3, [r7, #0]

/* Wait card present and ready */
do {
	status = sd_mmc_test_unit_ready(0);
     4b2:	1dfc      	adds	r4, r7, #7
     4b4:	2000      	movs	r0, #0
     4b6:	4b14      	ldr	r3, [pc, #80]	; (508 <SdCard_Initiate+0x64>)
     4b8:	4798      	blx	r3
     4ba:	0003      	movs	r3, r0
     4bc:	7023      	strb	r3, [r4, #0]
	if (CTRL_FAIL == status) {
     4be:	1dfb      	adds	r3, r7, #7
     4c0:	781b      	ldrb	r3, [r3, #0]
     4c2:	2b01      	cmp	r3, #1
     4c4:	d106      	bne.n	4d4 <SdCard_Initiate+0x30>
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	2000      	movs	r0, #0
     4ca:	4b10      	ldr	r3, [pc, #64]	; (50c <SdCard_Initiate+0x68>)
     4cc:	4798      	blx	r3
     4ce:	0003      	movs	r3, r0
     4d0:	2b02      	cmp	r3, #2
     4d2:	d1f9      	bne.n	4c8 <SdCard_Initiate+0x24>
		}
	}

	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     4d4:	4b0b      	ldr	r3, [pc, #44]	; (504 <SdCard_Initiate+0x60>)
     4d6:	4798      	blx	r3
     4d8:	0002      	movs	r2, r0
     4da:	683b      	ldr	r3, [r7, #0]
     4dc:	1ad2      	subs	r2, r2, r3
     4de:	23fa      	movs	r3, #250	; 0xfa
     4e0:	005b      	lsls	r3, r3, #1
     4e2:	429a      	cmp	r2, r3
     4e4:	d903      	bls.n	4ee <SdCard_Initiate+0x4a>
	{
		status = CTRL_FAIL;
     4e6:	1dfb      	adds	r3, r7, #7
     4e8:	2201      	movs	r2, #1
     4ea:	701a      	strb	r2, [r3, #0]
		break;
     4ec:	e003      	b.n	4f6 <SdCard_Initiate+0x52>
	}
} while (CTRL_GOOD != status );
     4ee:	1dfb      	adds	r3, r7, #7
     4f0:	781b      	ldrb	r3, [r3, #0]
     4f2:	2b00      	cmp	r3, #0
     4f4:	d1dd      	bne.n	4b2 <SdCard_Initiate+0xe>

return status;
     4f6:	1dfb      	adds	r3, r7, #7
     4f8:	781b      	ldrb	r3, [r3, #0]
}
     4fa:	0018      	movs	r0, r3
     4fc:	46bd      	mov	sp, r7
     4fe:	b003      	add	sp, #12
     500:	bd90      	pop	{r4, r7, pc}
     502:	46c0      	nop			; (mov r8, r8)
     504:	000001d1 	.word	0x000001d1
     508:	00001d4d 	.word	0x00001d4d
     50c:	000018c1 	.word	0x000018c1

00000510 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     510:	b580      	push	{r7, lr}
     512:	b082      	sub	sp, #8
     514:	af00      	add	r7, sp, #0
     516:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
     518:	687b      	ldr	r3, [r7, #4]
     51a:	7c1b      	ldrb	r3, [r3, #16]
     51c:	2b00      	cmp	r3, #0
     51e:	d00b      	beq.n	538 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     520:	687b      	ldr	r3, [r7, #4]
     522:	689b      	ldr	r3, [r3, #8]
     524:	1c5a      	adds	r2, r3, #1
     526:	687b      	ldr	r3, [r7, #4]
     528:	68d9      	ldr	r1, [r3, #12]
     52a:	4b10      	ldr	r3, [pc, #64]	; (56c <advance_pointer+0x5c>)
     52c:	0010      	movs	r0, r2
     52e:	4798      	blx	r3
     530:	000b      	movs	r3, r1
     532:	001a      	movs	r2, r3
     534:	687b      	ldr	r3, [r7, #4]
     536:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     538:	687b      	ldr	r3, [r7, #4]
     53a:	685b      	ldr	r3, [r3, #4]
     53c:	1c5a      	adds	r2, r3, #1
     53e:	687b      	ldr	r3, [r7, #4]
     540:	68d9      	ldr	r1, [r3, #12]
     542:	4b0a      	ldr	r3, [pc, #40]	; (56c <advance_pointer+0x5c>)
     544:	0010      	movs	r0, r2
     546:	4798      	blx	r3
     548:	000b      	movs	r3, r1
     54a:	001a      	movs	r2, r3
     54c:	687b      	ldr	r3, [r7, #4]
     54e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     550:	687b      	ldr	r3, [r7, #4]
     552:	685a      	ldr	r2, [r3, #4]
     554:	687b      	ldr	r3, [r7, #4]
     556:	689b      	ldr	r3, [r3, #8]
     558:	1ad3      	subs	r3, r2, r3
     55a:	425a      	negs	r2, r3
     55c:	4153      	adcs	r3, r2
     55e:	b2da      	uxtb	r2, r3
     560:	687b      	ldr	r3, [r7, #4]
     562:	741a      	strb	r2, [r3, #16]
 }
     564:	46c0      	nop			; (mov r8, r8)
     566:	46bd      	mov	sp, r7
     568:	b002      	add	sp, #8
     56a:	bd80      	pop	{r7, pc}
     56c:	0000a3b9 	.word	0x0000a3b9

00000570 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
     570:	b580      	push	{r7, lr}
     572:	b082      	sub	sp, #8
     574:	af00      	add	r7, sp, #0
     576:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
     578:	687b      	ldr	r3, [r7, #4]
     57a:	2200      	movs	r2, #0
     57c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     57e:	687b      	ldr	r3, [r7, #4]
     580:	689b      	ldr	r3, [r3, #8]
     582:	1c5a      	adds	r2, r3, #1
     584:	687b      	ldr	r3, [r7, #4]
     586:	68d9      	ldr	r1, [r3, #12]
     588:	4b05      	ldr	r3, [pc, #20]	; (5a0 <retreat_pointer+0x30>)
     58a:	0010      	movs	r0, r2
     58c:	4798      	blx	r3
     58e:	000b      	movs	r3, r1
     590:	001a      	movs	r2, r3
     592:	687b      	ldr	r3, [r7, #4]
     594:	609a      	str	r2, [r3, #8]
 }
     596:	46c0      	nop			; (mov r8, r8)
     598:	46bd      	mov	sp, r7
     59a:	b002      	add	sp, #8
     59c:	bd80      	pop	{r7, pc}
     59e:	46c0      	nop			; (mov r8, r8)
     5a0:	0000a3b9 	.word	0x0000a3b9

000005a4 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     5a4:	b580      	push	{r7, lr}
     5a6:	b084      	sub	sp, #16
     5a8:	af00      	add	r7, sp, #0
     5aa:	6078      	str	r0, [r7, #4]
     5ac:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     5ae:	2014      	movs	r0, #20
     5b0:	4b09      	ldr	r3, [pc, #36]	; (5d8 <circular_buf_init+0x34>)
     5b2:	4798      	blx	r3
     5b4:	0003      	movs	r3, r0
     5b6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     5b8:	68fb      	ldr	r3, [r7, #12]
     5ba:	687a      	ldr	r2, [r7, #4]
     5bc:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
     5be:	68fb      	ldr	r3, [r7, #12]
     5c0:	683a      	ldr	r2, [r7, #0]
     5c2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
     5c4:	68fb      	ldr	r3, [r7, #12]
     5c6:	0018      	movs	r0, r3
     5c8:	4b04      	ldr	r3, [pc, #16]	; (5dc <circular_buf_init+0x38>)
     5ca:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
     5cc:	68fb      	ldr	r3, [r7, #12]
 }
     5ce:	0018      	movs	r0, r3
     5d0:	46bd      	mov	sp, r7
     5d2:	b004      	add	sp, #16
     5d4:	bd80      	pop	{r7, pc}
     5d6:	46c0      	nop			; (mov r8, r8)
     5d8:	0000a635 	.word	0x0000a635
     5dc:	000005e1 	.word	0x000005e1

000005e0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
     5e0:	b580      	push	{r7, lr}
     5e2:	b082      	sub	sp, #8
     5e4:	af00      	add	r7, sp, #0
     5e6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
     5e8:	687b      	ldr	r3, [r7, #4]
     5ea:	2200      	movs	r2, #0
     5ec:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	2200      	movs	r2, #0
     5f2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
     5f4:	687b      	ldr	r3, [r7, #4]
     5f6:	2200      	movs	r2, #0
     5f8:	741a      	strb	r2, [r3, #16]
 }
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	46bd      	mov	sp, r7
     5fe:	b002      	add	sp, #8
     600:	bd80      	pop	{r7, pc}
	...

00000604 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     604:	b580      	push	{r7, lr}
     606:	b082      	sub	sp, #8
     608:	af00      	add	r7, sp, #0
     60a:	6078      	str	r0, [r7, #4]
     60c:	000a      	movs	r2, r1
     60e:	1cfb      	adds	r3, r7, #3
     610:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     612:	687b      	ldr	r3, [r7, #4]
     614:	681a      	ldr	r2, [r3, #0]
     616:	687b      	ldr	r3, [r7, #4]
     618:	685b      	ldr	r3, [r3, #4]
     61a:	18d3      	adds	r3, r2, r3
     61c:	1cfa      	adds	r2, r7, #3
     61e:	7812      	ldrb	r2, [r2, #0]
     620:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
     622:	687b      	ldr	r3, [r7, #4]
     624:	0018      	movs	r0, r3
     626:	4b03      	ldr	r3, [pc, #12]	; (634 <circular_buf_put+0x30>)
     628:	4798      	blx	r3
 }
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	46bd      	mov	sp, r7
     62e:	b002      	add	sp, #8
     630:	bd80      	pop	{r7, pc}
     632:	46c0      	nop			; (mov r8, r8)
     634:	00000511 	.word	0x00000511

00000638 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
     638:	b580      	push	{r7, lr}
     63a:	b084      	sub	sp, #16
     63c:	af00      	add	r7, sp, #0
     63e:	6078      	str	r0, [r7, #4]
     640:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
     642:	2301      	movs	r3, #1
     644:	425b      	negs	r3, r3
     646:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
     648:	687b      	ldr	r3, [r7, #4]
     64a:	0018      	movs	r0, r3
     64c:	4b0d      	ldr	r3, [pc, #52]	; (684 <circular_buf_get+0x4c>)
     64e:	4798      	blx	r3
     650:	0003      	movs	r3, r0
     652:	001a      	movs	r2, r3
     654:	2301      	movs	r3, #1
     656:	4053      	eors	r3, r2
     658:	b2db      	uxtb	r3, r3
     65a:	2b00      	cmp	r3, #0
     65c:	d00d      	beq.n	67a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
     65e:	687b      	ldr	r3, [r7, #4]
     660:	681a      	ldr	r2, [r3, #0]
     662:	687b      	ldr	r3, [r7, #4]
     664:	689b      	ldr	r3, [r3, #8]
     666:	18d3      	adds	r3, r2, r3
     668:	781a      	ldrb	r2, [r3, #0]
     66a:	683b      	ldr	r3, [r7, #0]
     66c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
     66e:	687b      	ldr	r3, [r7, #4]
     670:	0018      	movs	r0, r3
     672:	4b05      	ldr	r3, [pc, #20]	; (688 <circular_buf_get+0x50>)
     674:	4798      	blx	r3

		 r = 0;
     676:	2300      	movs	r3, #0
     678:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
     67a:	68fb      	ldr	r3, [r7, #12]
 }
     67c:	0018      	movs	r0, r3
     67e:	46bd      	mov	sp, r7
     680:	b004      	add	sp, #16
     682:	bd80      	pop	{r7, pc}
     684:	0000068d 	.word	0x0000068d
     688:	00000571 	.word	0x00000571

0000068c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
     68c:	b580      	push	{r7, lr}
     68e:	b082      	sub	sp, #8
     690:	af00      	add	r7, sp, #0
     692:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     694:	687b      	ldr	r3, [r7, #4]
     696:	7c1b      	ldrb	r3, [r3, #16]
     698:	2201      	movs	r2, #1
     69a:	4053      	eors	r3, r2
     69c:	b2db      	uxtb	r3, r3
     69e:	2b00      	cmp	r3, #0
     6a0:	d007      	beq.n	6b2 <circular_buf_empty+0x26>
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	685a      	ldr	r2, [r3, #4]
     6a6:	687b      	ldr	r3, [r7, #4]
     6a8:	689b      	ldr	r3, [r3, #8]
     6aa:	429a      	cmp	r2, r3
     6ac:	d101      	bne.n	6b2 <circular_buf_empty+0x26>
     6ae:	2301      	movs	r3, #1
     6b0:	e000      	b.n	6b4 <circular_buf_empty+0x28>
     6b2:	2300      	movs	r3, #0
     6b4:	1c1a      	adds	r2, r3, #0
     6b6:	2301      	movs	r3, #1
     6b8:	4013      	ands	r3, r2
     6ba:	b2db      	uxtb	r3, r3
 }
     6bc:	0018      	movs	r0, r3
     6be:	46bd      	mov	sp, r7
     6c0:	b002      	add	sp, #8
     6c2:	bd80      	pop	{r7, pc}

000006c4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     6c4:	b580      	push	{r7, lr}
     6c6:	b082      	sub	sp, #8
     6c8:	af00      	add	r7, sp, #0
     6ca:	0002      	movs	r2, r0
     6cc:	1dfb      	adds	r3, r7, #7
     6ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6d0:	4b06      	ldr	r3, [pc, #24]	; (6ec <system_interrupt_enable+0x28>)
     6d2:	1dfa      	adds	r2, r7, #7
     6d4:	7812      	ldrb	r2, [r2, #0]
     6d6:	0011      	movs	r1, r2
     6d8:	221f      	movs	r2, #31
     6da:	400a      	ands	r2, r1
     6dc:	2101      	movs	r1, #1
     6de:	4091      	lsls	r1, r2
     6e0:	000a      	movs	r2, r1
     6e2:	601a      	str	r2, [r3, #0]
}
     6e4:	46c0      	nop			; (mov r8, r8)
     6e6:	46bd      	mov	sp, r7
     6e8:	b002      	add	sp, #8
     6ea:	bd80      	pop	{r7, pc}
     6ec:	e000e100 	.word	0xe000e100

000006f0 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     6f0:	b580      	push	{r7, lr}
     6f2:	b082      	sub	sp, #8
     6f4:	af00      	add	r7, sp, #0
     6f6:	0002      	movs	r2, r0
     6f8:	1dfb      	adds	r3, r7, #7
     6fa:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6fc:	4a07      	ldr	r2, [pc, #28]	; (71c <system_interrupt_disable+0x2c>)
     6fe:	1dfb      	adds	r3, r7, #7
     700:	781b      	ldrb	r3, [r3, #0]
     702:	0019      	movs	r1, r3
     704:	231f      	movs	r3, #31
     706:	400b      	ands	r3, r1
     708:	2101      	movs	r1, #1
     70a:	4099      	lsls	r1, r3
     70c:	000b      	movs	r3, r1
     70e:	0019      	movs	r1, r3
     710:	2380      	movs	r3, #128	; 0x80
     712:	50d1      	str	r1, [r2, r3]
}
     714:	46c0      	nop			; (mov r8, r8)
     716:	46bd      	mov	sp, r7
     718:	b002      	add	sp, #8
     71a:	bd80      	pop	{r7, pc}
     71c:	e000e100 	.word	0xe000e100

00000720 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     720:	b580      	push	{r7, lr}
     722:	b084      	sub	sp, #16
     724:	af00      	add	r7, sp, #0
     726:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     728:	687b      	ldr	r3, [r7, #4]
     72a:	681b      	ldr	r3, [r3, #0]
     72c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     72e:	68fb      	ldr	r3, [r7, #12]
     730:	69db      	ldr	r3, [r3, #28]
     732:	1e5a      	subs	r2, r3, #1
     734:	4193      	sbcs	r3, r2
     736:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     738:	0018      	movs	r0, r3
     73a:	46bd      	mov	sp, r7
     73c:	b004      	add	sp, #16
     73e:	bd80      	pop	{r7, pc}

00000740 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     740:	b580      	push	{r7, lr}
     742:	b082      	sub	sp, #8
     744:	af00      	add	r7, sp, #0
     746:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     748:	46c0      	nop			; (mov r8, r8)
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	0018      	movs	r0, r3
     74e:	4b04      	ldr	r3, [pc, #16]	; (760 <_usart_wait_for_sync+0x20>)
     750:	4798      	blx	r3
     752:	1e03      	subs	r3, r0, #0
     754:	d1f9      	bne.n	74a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     756:	46c0      	nop			; (mov r8, r8)
     758:	46bd      	mov	sp, r7
     75a:	b002      	add	sp, #8
     75c:	bd80      	pop	{r7, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	00000721 	.word	0x00000721

00000764 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     764:	b580      	push	{r7, lr}
     766:	b082      	sub	sp, #8
     768:	af00      	add	r7, sp, #0
     76a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	2280      	movs	r2, #128	; 0x80
     770:	05d2      	lsls	r2, r2, #23
     772:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     774:	687b      	ldr	r3, [r7, #4]
     776:	2200      	movs	r2, #0
     778:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     77a:	687b      	ldr	r3, [r7, #4]
     77c:	22ff      	movs	r2, #255	; 0xff
     77e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     780:	687b      	ldr	r3, [r7, #4]
     782:	2200      	movs	r2, #0
     784:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     786:	687b      	ldr	r3, [r7, #4]
     788:	2200      	movs	r2, #0
     78a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	2296      	movs	r2, #150	; 0x96
     790:	0192      	lsls	r2, r2, #6
     792:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     794:	687b      	ldr	r3, [r7, #4]
     796:	2224      	movs	r2, #36	; 0x24
     798:	2101      	movs	r1, #1
     79a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     79c:	687b      	ldr	r3, [r7, #4]
     79e:	2225      	movs	r2, #37	; 0x25
     7a0:	2101      	movs	r1, #1
     7a2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     7a4:	687b      	ldr	r3, [r7, #4]
     7a6:	2226      	movs	r2, #38	; 0x26
     7a8:	2100      	movs	r1, #0
     7aa:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	2227      	movs	r2, #39	; 0x27
     7b0:	2100      	movs	r1, #0
     7b2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	2200      	movs	r2, #0
     7b8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     7ba:	687b      	ldr	r3, [r7, #4]
     7bc:	2288      	movs	r2, #136	; 0x88
     7be:	0352      	lsls	r2, r2, #13
     7c0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     7c2:	687b      	ldr	r3, [r7, #4]
     7c4:	222c      	movs	r2, #44	; 0x2c
     7c6:	2100      	movs	r1, #0
     7c8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     7ca:	687b      	ldr	r3, [r7, #4]
     7cc:	222d      	movs	r2, #45	; 0x2d
     7ce:	2100      	movs	r1, #0
     7d0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     7d2:	687b      	ldr	r3, [r7, #4]
     7d4:	2200      	movs	r2, #0
     7d6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     7d8:	687b      	ldr	r3, [r7, #4]
     7da:	2200      	movs	r2, #0
     7dc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     7de:	687b      	ldr	r3, [r7, #4]
     7e0:	2200      	movs	r2, #0
     7e2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     7e4:	687b      	ldr	r3, [r7, #4]
     7e6:	2200      	movs	r2, #0
     7e8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     7ea:	687b      	ldr	r3, [r7, #4]
     7ec:	2200      	movs	r2, #0
     7ee:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     7f0:	687b      	ldr	r3, [r7, #4]
     7f2:	2200      	movs	r2, #0
     7f4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     7f6:	687b      	ldr	r3, [r7, #4]
     7f8:	2200      	movs	r2, #0
     7fa:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     7fc:	687b      	ldr	r3, [r7, #4]
     7fe:	2200      	movs	r2, #0
     800:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     802:	687b      	ldr	r3, [r7, #4]
     804:	2200      	movs	r2, #0
     806:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     808:	687b      	ldr	r3, [r7, #4]
     80a:	2200      	movs	r2, #0
     80c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     80e:	687b      	ldr	r3, [r7, #4]
     810:	2213      	movs	r2, #19
     812:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     814:	687b      	ldr	r3, [r7, #4]
     816:	2200      	movs	r2, #0
     818:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	46bd      	mov	sp, r7
     81e:	b002      	add	sp, #8
     820:	bd80      	pop	{r7, pc}
	...

00000824 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     824:	b580      	push	{r7, lr}
     826:	b084      	sub	sp, #16
     828:	af00      	add	r7, sp, #0
     82a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     82c:	687b      	ldr	r3, [r7, #4]
     82e:	681b      	ldr	r3, [r3, #0]
     830:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     832:	687b      	ldr	r3, [r7, #4]
     834:	681b      	ldr	r3, [r3, #0]
     836:	0018      	movs	r0, r3
     838:	4b09      	ldr	r3, [pc, #36]	; (860 <usart_enable+0x3c>)
     83a:	4798      	blx	r3
     83c:	0003      	movs	r3, r0
     83e:	0018      	movs	r0, r3
     840:	4b08      	ldr	r3, [pc, #32]	; (864 <usart_enable+0x40>)
     842:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     844:	687b      	ldr	r3, [r7, #4]
     846:	0018      	movs	r0, r3
     848:	4b07      	ldr	r3, [pc, #28]	; (868 <usart_enable+0x44>)
     84a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     84c:	68fb      	ldr	r3, [r7, #12]
     84e:	681b      	ldr	r3, [r3, #0]
     850:	2202      	movs	r2, #2
     852:	431a      	orrs	r2, r3
     854:	68fb      	ldr	r3, [r7, #12]
     856:	601a      	str	r2, [r3, #0]
}
     858:	46c0      	nop			; (mov r8, r8)
     85a:	46bd      	mov	sp, r7
     85c:	b004      	add	sp, #16
     85e:	bd80      	pop	{r7, pc}
     860:	00003aa5 	.word	0x00003aa5
     864:	000006c5 	.word	0x000006c5
     868:	00000741 	.word	0x00000741

0000086c <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
     86c:	b580      	push	{r7, lr}
     86e:	b084      	sub	sp, #16
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     874:	687b      	ldr	r3, [r7, #4]
     876:	681b      	ldr	r3, [r3, #0]
     878:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     87a:	687b      	ldr	r3, [r7, #4]
     87c:	681b      	ldr	r3, [r3, #0]
     87e:	0018      	movs	r0, r3
     880:	4b0a      	ldr	r3, [pc, #40]	; (8ac <usart_disable+0x40>)
     882:	4798      	blx	r3
     884:	0003      	movs	r3, r0
     886:	0018      	movs	r0, r3
     888:	4b09      	ldr	r3, [pc, #36]	; (8b0 <usart_disable+0x44>)
     88a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     88c:	687b      	ldr	r3, [r7, #4]
     88e:	0018      	movs	r0, r3
     890:	4b08      	ldr	r3, [pc, #32]	; (8b4 <usart_disable+0x48>)
     892:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     894:	68fb      	ldr	r3, [r7, #12]
     896:	681b      	ldr	r3, [r3, #0]
     898:	2202      	movs	r2, #2
     89a:	4393      	bics	r3, r2
     89c:	001a      	movs	r2, r3
     89e:	68fb      	ldr	r3, [r7, #12]
     8a0:	601a      	str	r2, [r3, #0]
}
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	46bd      	mov	sp, r7
     8a6:	b004      	add	sp, #16
     8a8:	bd80      	pop	{r7, pc}
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	00003aa5 	.word	0x00003aa5
     8b0:	000006f1 	.word	0x000006f1
     8b4:	00000741 	.word	0x00000741

000008b8 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     8b8:	b580      	push	{r7, lr}
     8ba:	b082      	sub	sp, #8
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	000a      	movs	r2, r1
     8c2:	1cfb      	adds	r3, r7, #3
     8c4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	2231      	movs	r2, #49	; 0x31
     8ca:	5c9b      	ldrb	r3, [r3, r2]
     8cc:	b25a      	sxtb	r2, r3
     8ce:	1cfb      	adds	r3, r7, #3
     8d0:	781b      	ldrb	r3, [r3, #0]
     8d2:	2101      	movs	r1, #1
     8d4:	4099      	lsls	r1, r3
     8d6:	000b      	movs	r3, r1
     8d8:	b25b      	sxtb	r3, r3
     8da:	4313      	orrs	r3, r2
     8dc:	b25b      	sxtb	r3, r3
     8de:	b2d9      	uxtb	r1, r3
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	2231      	movs	r2, #49	; 0x31
     8e4:	5499      	strb	r1, [r3, r2]

}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	46bd      	mov	sp, r7
     8ea:	b002      	add	sp, #8
     8ec:	bd80      	pop	{r7, pc}
	...

000008f0 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     8f0:	b580      	push	{r7, lr}
     8f2:	b082      	sub	sp, #8
     8f4:	af00      	add	r7, sp, #0
     8f6:	6078      	str	r0, [r7, #4]
     8f8:	000a      	movs	r2, r1
     8fa:	1cfb      	adds	r3, r7, #3
     8fc:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	1cfb      	adds	r3, r7, #3
     902:	781b      	ldrb	r3, [r3, #0]
     904:	b29a      	uxth	r2, r3
     906:	687b      	ldr	r3, [r7, #4]
     908:	0011      	movs	r1, r2
     90a:	0018      	movs	r0, r3
     90c:	4b04      	ldr	r3, [pc, #16]	; (920 <usart_serial_putchar+0x30>)
     90e:	4798      	blx	r3
     910:	1e03      	subs	r3, r0, #0
     912:	d1f5      	bne.n	900 <usart_serial_putchar+0x10>

	return STATUS_OK;
     914:	2300      	movs	r3, #0
}
     916:	0018      	movs	r0, r3
     918:	46bd      	mov	sp, r7
     91a:	b002      	add	sp, #8
     91c:	bd80      	pop	{r7, pc}
     91e:	46c0      	nop			; (mov r8, r8)
     920:	000051bd 	.word	0x000051bd

00000924 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     924:	b580      	push	{r7, lr}
     926:	b084      	sub	sp, #16
     928:	af00      	add	r7, sp, #0
     92a:	6078      	str	r0, [r7, #4]
     92c:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     92e:	230e      	movs	r3, #14
     930:	18fb      	adds	r3, r7, r3
     932:	2200      	movs	r2, #0
     934:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     936:	46c0      	nop			; (mov r8, r8)
     938:	230e      	movs	r3, #14
     93a:	18fa      	adds	r2, r7, r3
     93c:	687b      	ldr	r3, [r7, #4]
     93e:	0011      	movs	r1, r2
     940:	0018      	movs	r0, r3
     942:	4b07      	ldr	r3, [pc, #28]	; (960 <usart_serial_getchar+0x3c>)
     944:	4798      	blx	r3
     946:	1e03      	subs	r3, r0, #0
     948:	d1f6      	bne.n	938 <usart_serial_getchar+0x14>

	*c = temp;
     94a:	230e      	movs	r3, #14
     94c:	18fb      	adds	r3, r7, r3
     94e:	881b      	ldrh	r3, [r3, #0]
     950:	b2da      	uxtb	r2, r3
     952:	683b      	ldr	r3, [r7, #0]
     954:	701a      	strb	r2, [r3, #0]
}
     956:	46c0      	nop			; (mov r8, r8)
     958:	46bd      	mov	sp, r7
     95a:	b004      	add	sp, #16
     95c:	bd80      	pop	{r7, pc}
     95e:	46c0      	nop			; (mov r8, r8)
     960:	00005221 	.word	0x00005221

00000964 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     964:	b580      	push	{r7, lr}
     966:	b084      	sub	sp, #16
     968:	af00      	add	r7, sp, #0
     96a:	60f8      	str	r0, [r7, #12]
     96c:	60b9      	str	r1, [r7, #8]
     96e:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     970:	4b0d      	ldr	r3, [pc, #52]	; (9a8 <stdio_serial_init+0x44>)
     972:	68fa      	ldr	r2, [r7, #12]
     974:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     976:	4b0d      	ldr	r3, [pc, #52]	; (9ac <stdio_serial_init+0x48>)
     978:	4a0d      	ldr	r2, [pc, #52]	; (9b0 <stdio_serial_init+0x4c>)
     97a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     97c:	4b0d      	ldr	r3, [pc, #52]	; (9b4 <stdio_serial_init+0x50>)
     97e:	4a0e      	ldr	r2, [pc, #56]	; (9b8 <stdio_serial_init+0x54>)
     980:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     982:	4b0e      	ldr	r3, [pc, #56]	; (9bc <stdio_serial_init+0x58>)
     984:	681b      	ldr	r3, [r3, #0]
     986:	689b      	ldr	r3, [r3, #8]
     988:	2100      	movs	r1, #0
     98a:	0018      	movs	r0, r3
     98c:	4b0c      	ldr	r3, [pc, #48]	; (9c0 <stdio_serial_init+0x5c>)
     98e:	4798      	blx	r3
	setbuf(stdin, NULL);
     990:	4b0a      	ldr	r3, [pc, #40]	; (9bc <stdio_serial_init+0x58>)
     992:	681b      	ldr	r3, [r3, #0]
     994:	685b      	ldr	r3, [r3, #4]
     996:	2100      	movs	r1, #0
     998:	0018      	movs	r0, r3
     99a:	4b09      	ldr	r3, [pc, #36]	; (9c0 <stdio_serial_init+0x5c>)
     99c:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	46bd      	mov	sp, r7
     9a2:	b004      	add	sp, #16
     9a4:	bd80      	pop	{r7, pc}
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	200009f8 	.word	0x200009f8
     9ac:	200009f4 	.word	0x200009f4
     9b0:	000008f1 	.word	0x000008f1
     9b4:	200009f0 	.word	0x200009f0
     9b8:	00000925 	.word	0x00000925
     9bc:	20000030 	.word	0x20000030
     9c0:	0000a7e1 	.word	0x0000a7e1

000009c4 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @details		Initializes the UART - sets up the SERCOM to act as UART and registers the callbacks for
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 *****************************************************************************/
void InitializeSerialConsole() {
     9c4:	b580      	push	{r7, lr}
     9c6:	af00      	add	r7, sp, #0

    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *) rxCharacterBuffer, RX_BUFFER_SIZE);
     9c8:	2380      	movs	r3, #128	; 0x80
     9ca:	00da      	lsls	r2, r3, #3
     9cc:	4b0f      	ldr	r3, [pc, #60]	; (a0c <InitializeSerialConsole+0x48>)
     9ce:	0011      	movs	r1, r2
     9d0:	0018      	movs	r0, r3
     9d2:	4b0f      	ldr	r3, [pc, #60]	; (a10 <InitializeSerialConsole+0x4c>)
     9d4:	4798      	blx	r3
     9d6:	0002      	movs	r2, r0
     9d8:	4b0e      	ldr	r3, [pc, #56]	; (a14 <InitializeSerialConsole+0x50>)
     9da:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *) txCharacterBuffer, TX_BUFFER_SIZE);
     9dc:	2380      	movs	r3, #128	; 0x80
     9de:	00da      	lsls	r2, r3, #3
     9e0:	4b0d      	ldr	r3, [pc, #52]	; (a18 <InitializeSerialConsole+0x54>)
     9e2:	0011      	movs	r1, r2
     9e4:	0018      	movs	r0, r3
     9e6:	4b0a      	ldr	r3, [pc, #40]	; (a10 <InitializeSerialConsole+0x4c>)
     9e8:	4798      	blx	r3
     9ea:	0002      	movs	r2, r0
     9ec:	4b0b      	ldr	r3, [pc, #44]	; (a1c <InitializeSerialConsole+0x58>)
     9ee:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
     9f0:	4b0b      	ldr	r3, [pc, #44]	; (a20 <InitializeSerialConsole+0x5c>)
     9f2:	4798      	blx	r3
    configure_usart_callbacks();
     9f4:	4b0b      	ldr	r3, [pc, #44]	; (a24 <InitializeSerialConsole+0x60>)
     9f6:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *) &latestRx, 1);   // Kicks off constant reading of characters
     9f8:	490b      	ldr	r1, [pc, #44]	; (a28 <InitializeSerialConsole+0x64>)
     9fa:	4b0c      	ldr	r3, [pc, #48]	; (a2c <InitializeSerialConsole+0x68>)
     9fc:	2201      	movs	r2, #1
     9fe:	0018      	movs	r0, r3
     a00:	4b0b      	ldr	r3, [pc, #44]	; (a30 <InitializeSerialConsole+0x6c>)
     a02:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
     a04:	46c0      	nop			; (mov r8, r8)
     a06:	46bd      	mov	sp, r7
     a08:	bd80      	pop	{r7, pc}
     a0a:	46c0      	nop			; (mov r8, r8)
     a0c:	200005c8 	.word	0x200005c8
     a10:	000005a5 	.word	0x000005a5
     a14:	200001c0 	.word	0x200001c0
     a18:	200001c8 	.word	0x200001c8
     a1c:	200009cc 	.word	0x200009cc
     a20:	00000af9 	.word	0x00000af9
     a24:	00000b81 	.word	0x00000b81
     a28:	200001c4 	.word	0x200001c4
     a2c:	2000018c 	.word	0x2000018c
     a30:	000054dd 	.word	0x000054dd

00000a34 <DeinitializeSerialConsole>:

/**
 * @fn			void DeinitializeSerialConsole(void)
 *****************************************************************************/
void DeinitializeSerialConsole() { usart_disable(&usart_instance); }
     a34:	b580      	push	{r7, lr}
     a36:	af00      	add	r7, sp, #0
     a38:	4b03      	ldr	r3, [pc, #12]	; (a48 <DeinitializeSerialConsole+0x14>)
     a3a:	0018      	movs	r0, r3
     a3c:	4b03      	ldr	r3, [pc, #12]	; (a4c <DeinitializeSerialConsole+0x18>)
     a3e:	4798      	blx	r3
     a40:	46c0      	nop			; (mov r8, r8)
     a42:	46bd      	mov	sp, r7
     a44:	bd80      	pop	{r7, pc}
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	2000018c 	.word	0x2000018c
     a4c:	0000086d 	.word	0x0000086d

00000a50 <SerialConsoleWriteString>:
 * @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the
 *				text send to the uart
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
 * @note		Use to send a string of characters to the user via UART
 *****************************************************************************/
void SerialConsoleWriteString(char *string) {
     a50:	b580      	push	{r7, lr}
     a52:	b084      	sub	sp, #16
     a54:	af00      	add	r7, sp, #0
     a56:	6078      	str	r0, [r7, #4]
    if (string != NULL) {
     a58:	687b      	ldr	r3, [r7, #4]
     a5a:	2b00      	cmp	r3, #0
     a5c:	d02a      	beq.n	ab4 <SerialConsoleWriteString+0x64>
        for (size_t iter = 0; iter < strlen(string); iter++) {
     a5e:	2300      	movs	r3, #0
     a60:	60fb      	str	r3, [r7, #12]
     a62:	e00b      	b.n	a7c <SerialConsoleWriteString+0x2c>
            circular_buf_put(cbufTx, string[iter]);
     a64:	4b15      	ldr	r3, [pc, #84]	; (abc <SerialConsoleWriteString+0x6c>)
     a66:	6818      	ldr	r0, [r3, #0]
     a68:	687a      	ldr	r2, [r7, #4]
     a6a:	68fb      	ldr	r3, [r7, #12]
     a6c:	18d3      	adds	r3, r2, r3
     a6e:	781b      	ldrb	r3, [r3, #0]
     a70:	0019      	movs	r1, r3
     a72:	4b13      	ldr	r3, [pc, #76]	; (ac0 <SerialConsoleWriteString+0x70>)
     a74:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
     a76:	68fb      	ldr	r3, [r7, #12]
     a78:	3301      	adds	r3, #1
     a7a:	60fb      	str	r3, [r7, #12]
     a7c:	687b      	ldr	r3, [r7, #4]
     a7e:	0018      	movs	r0, r3
     a80:	4b10      	ldr	r3, [pc, #64]	; (ac4 <SerialConsoleWriteString+0x74>)
     a82:	4798      	blx	r3
     a84:	0002      	movs	r2, r0
     a86:	68fb      	ldr	r3, [r7, #12]
     a88:	429a      	cmp	r2, r3
     a8a:	d8eb      	bhi.n	a64 <SerialConsoleWriteString+0x14>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
     a8c:	4b0e      	ldr	r3, [pc, #56]	; (ac8 <SerialConsoleWriteString+0x78>)
     a8e:	2101      	movs	r1, #1
     a90:	0018      	movs	r0, r3
     a92:	4b0e      	ldr	r3, [pc, #56]	; (acc <SerialConsoleWriteString+0x7c>)
     a94:	4798      	blx	r3
     a96:	1e03      	subs	r3, r0, #0
     a98:	d10c      	bne.n	ab4 <SerialConsoleWriteString+0x64>
            circular_buf_get(cbufTx, (uint8_t *) &latestTx);   // Perform only if the SERCOM TX is free (not busy)
     a9a:	4b08      	ldr	r3, [pc, #32]	; (abc <SerialConsoleWriteString+0x6c>)
     a9c:	681b      	ldr	r3, [r3, #0]
     a9e:	4a0c      	ldr	r2, [pc, #48]	; (ad0 <SerialConsoleWriteString+0x80>)
     aa0:	0011      	movs	r1, r2
     aa2:	0018      	movs	r0, r3
     aa4:	4b0b      	ldr	r3, [pc, #44]	; (ad4 <SerialConsoleWriteString+0x84>)
     aa6:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
     aa8:	4909      	ldr	r1, [pc, #36]	; (ad0 <SerialConsoleWriteString+0x80>)
     aaa:	4b07      	ldr	r3, [pc, #28]	; (ac8 <SerialConsoleWriteString+0x78>)
     aac:	2201      	movs	r2, #1
     aae:	0018      	movs	r0, r3
     ab0:	4b09      	ldr	r3, [pc, #36]	; (ad8 <SerialConsoleWriteString+0x88>)
     ab2:	4798      	blx	r3
        }
    }
}
     ab4:	46c0      	nop			; (mov r8, r8)
     ab6:	46bd      	mov	sp, r7
     ab8:	b004      	add	sp, #16
     aba:	bd80      	pop	{r7, pc}
     abc:	200009cc 	.word	0x200009cc
     ac0:	00000605 	.word	0x00000605
     ac4:	0000a94d 	.word	0x0000a94d
     ac8:	2000018c 	.word	0x2000018c
     acc:	00005525 	.word	0x00005525
     ad0:	200009c8 	.word	0x200009c8
     ad4:	00000639 	.word	0x00000639
     ad8:	00005495 	.word	0x00005495

00000adc <LogMessage>:
/**
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 *****************************************************************************/
void LogMessage(enum eDebugLogLevels level, const char *format, ...){};
     adc:	b40e      	push	{r1, r2, r3}
     ade:	b580      	push	{r7, lr}
     ae0:	b083      	sub	sp, #12
     ae2:	af00      	add	r7, sp, #0
     ae4:	0002      	movs	r2, r0
     ae6:	1dfb      	adds	r3, r7, #7
     ae8:	701a      	strb	r2, [r3, #0]
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	46bd      	mov	sp, r7
     aee:	b003      	add	sp, #12
     af0:	bc80      	pop	{r7}
     af2:	bc08      	pop	{r3}
     af4:	b003      	add	sp, #12
     af6:	4718      	bx	r3

00000af8 <configure_usart>:
/**
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 *****************************************************************************/
static void configure_usart(void) {
     af8:	b580      	push	{r7, lr}
     afa:	b090      	sub	sp, #64	; 0x40
     afc:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
     afe:	003b      	movs	r3, r7
     b00:	0018      	movs	r0, r3
     b02:	4b17      	ldr	r3, [pc, #92]	; (b60 <configure_usart+0x68>)
     b04:	4798      	blx	r3

    config_usart.baudrate = 115200;
     b06:	003b      	movs	r3, r7
     b08:	22e1      	movs	r2, #225	; 0xe1
     b0a:	0252      	lsls	r2, r2, #9
     b0c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     b0e:	003b      	movs	r3, r7
     b10:	22c4      	movs	r2, #196	; 0xc4
     b12:	0392      	lsls	r2, r2, #14
     b14:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     b16:	003b      	movs	r3, r7
     b18:	2201      	movs	r2, #1
     b1a:	4252      	negs	r2, r2
     b1c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     b1e:	003b      	movs	r3, r7
     b20:	2201      	movs	r2, #1
     b22:	4252      	negs	r2, r2
     b24:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     b26:	003b      	movs	r3, r7
     b28:	4a0e      	ldr	r2, [pc, #56]	; (b64 <configure_usart+0x6c>)
     b2a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     b2c:	003b      	movs	r3, r7
     b2e:	4a0e      	ldr	r2, [pc, #56]	; (b68 <configure_usart+0x70>)
     b30:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	003a      	movs	r2, r7
     b36:	490d      	ldr	r1, [pc, #52]	; (b6c <configure_usart+0x74>)
     b38:	4b0d      	ldr	r3, [pc, #52]	; (b70 <configure_usart+0x78>)
     b3a:	0018      	movs	r0, r3
     b3c:	4b0d      	ldr	r3, [pc, #52]	; (b74 <configure_usart+0x7c>)
     b3e:	4798      	blx	r3
     b40:	1e03      	subs	r3, r0, #0
     b42:	d1f7      	bne.n	b34 <configure_usart+0x3c>
    }
    stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
     b44:	003a      	movs	r2, r7
     b46:	4909      	ldr	r1, [pc, #36]	; (b6c <configure_usart+0x74>)
     b48:	4b09      	ldr	r3, [pc, #36]	; (b70 <configure_usart+0x78>)
     b4a:	0018      	movs	r0, r3
     b4c:	4b0a      	ldr	r3, [pc, #40]	; (b78 <configure_usart+0x80>)
     b4e:	4798      	blx	r3
    usart_enable(&usart_instance);
     b50:	4b07      	ldr	r3, [pc, #28]	; (b70 <configure_usart+0x78>)
     b52:	0018      	movs	r0, r3
     b54:	4b09      	ldr	r3, [pc, #36]	; (b7c <configure_usart+0x84>)
     b56:	4798      	blx	r3
}
     b58:	46c0      	nop			; (mov r8, r8)
     b5a:	46bd      	mov	sp, r7
     b5c:	b010      	add	sp, #64	; 0x40
     b5e:	bd80      	pop	{r7, pc}
     b60:	00000765 	.word	0x00000765
     b64:	002a0003 	.word	0x002a0003
     b68:	002b0003 	.word	0x002b0003
     b6c:	42001800 	.word	0x42001800
     b70:	2000018c 	.word	0x2000018c
     b74:	00004f49 	.word	0x00004f49
     b78:	00000965 	.word	0x00000965
     b7c:	00000825 	.word	0x00000825

00000b80 <configure_usart_callbacks>:
/**
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 *****************************************************************************/
static void configure_usart_callbacks(void) {
     b80:	b580      	push	{r7, lr}
     b82:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
     b84:	490c      	ldr	r1, [pc, #48]	; (bb8 <configure_usart_callbacks+0x38>)
     b86:	4b0d      	ldr	r3, [pc, #52]	; (bbc <configure_usart_callbacks+0x3c>)
     b88:	2200      	movs	r2, #0
     b8a:	0018      	movs	r0, r3
     b8c:	4b0c      	ldr	r3, [pc, #48]	; (bc0 <configure_usart_callbacks+0x40>)
     b8e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     b90:	490c      	ldr	r1, [pc, #48]	; (bc4 <configure_usart_callbacks+0x44>)
     b92:	4b0a      	ldr	r3, [pc, #40]	; (bbc <configure_usart_callbacks+0x3c>)
     b94:	2201      	movs	r2, #1
     b96:	0018      	movs	r0, r3
     b98:	4b09      	ldr	r3, [pc, #36]	; (bc0 <configure_usart_callbacks+0x40>)
     b9a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
     b9c:	4b07      	ldr	r3, [pc, #28]	; (bbc <configure_usart_callbacks+0x3c>)
     b9e:	2100      	movs	r1, #0
     ba0:	0018      	movs	r0, r3
     ba2:	4b09      	ldr	r3, [pc, #36]	; (bc8 <configure_usart_callbacks+0x48>)
     ba4:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
     ba6:	4b05      	ldr	r3, [pc, #20]	; (bbc <configure_usart_callbacks+0x3c>)
     ba8:	2101      	movs	r1, #1
     baa:	0018      	movs	r0, r3
     bac:	4b06      	ldr	r3, [pc, #24]	; (bc8 <configure_usart_callbacks+0x48>)
     bae:	4798      	blx	r3
}
     bb0:	46c0      	nop			; (mov r8, r8)
     bb2:	46bd      	mov	sp, r7
     bb4:	bd80      	pop	{r7, pc}
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	00000bdd 	.word	0x00000bdd
     bbc:	2000018c 	.word	0x2000018c
     bc0:	0000544d 	.word	0x0000544d
     bc4:	00000bcd 	.word	0x00000bcd
     bc8:	000008b9 	.word	0x000008b9

00000bcc <usart_read_callback>:
/**
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 *****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module) {}
     bcc:	b580      	push	{r7, lr}
     bce:	b082      	sub	sp, #8
     bd0:	af00      	add	r7, sp, #0
     bd2:	6078      	str	r0, [r7, #4]
     bd4:	46c0      	nop			; (mov r8, r8)
     bd6:	46bd      	mov	sp, r7
     bd8:	b002      	add	sp, #8
     bda:	bd80      	pop	{r7, pc}

00000bdc <usart_write_callback>:
/**
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 *****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module) {
     bdc:	b580      	push	{r7, lr}
     bde:	b082      	sub	sp, #8
     be0:	af00      	add	r7, sp, #0
     be2:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *) &latestTx) != -1)   // Only continue if there are more characters to send
     be4:	4b09      	ldr	r3, [pc, #36]	; (c0c <usart_write_callback+0x30>)
     be6:	681b      	ldr	r3, [r3, #0]
     be8:	4a09      	ldr	r2, [pc, #36]	; (c10 <usart_write_callback+0x34>)
     bea:	0011      	movs	r1, r2
     bec:	0018      	movs	r0, r3
     bee:	4b09      	ldr	r3, [pc, #36]	; (c14 <usart_write_callback+0x38>)
     bf0:	4798      	blx	r3
     bf2:	0003      	movs	r3, r0
     bf4:	3301      	adds	r3, #1
     bf6:	d005      	beq.n	c04 <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
     bf8:	4905      	ldr	r1, [pc, #20]	; (c10 <usart_write_callback+0x34>)
     bfa:	4b07      	ldr	r3, [pc, #28]	; (c18 <usart_write_callback+0x3c>)
     bfc:	2201      	movs	r2, #1
     bfe:	0018      	movs	r0, r3
     c00:	4b06      	ldr	r3, [pc, #24]	; (c1c <usart_write_callback+0x40>)
     c02:	4798      	blx	r3
    }
}
     c04:	46c0      	nop			; (mov r8, r8)
     c06:	46bd      	mov	sp, r7
     c08:	b002      	add	sp, #8
     c0a:	bd80      	pop	{r7, pc}
     c0c:	200009cc 	.word	0x200009cc
     c10:	200009c8 	.word	0x200009c8
     c14:	00000639 	.word	0x00000639
     c18:	2000018c 	.word	0x2000018c
     c1c:	00005495 	.word	0x00005495

00000c20 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
     c20:	b590      	push	{r4, r7, lr}
     c22:	b087      	sub	sp, #28
     c24:	af00      	add	r7, sp, #0
     c26:	60f8      	str	r0, [r7, #12]
     c28:	000c      	movs	r4, r1
     c2a:	0010      	movs	r0, r2
     c2c:	0019      	movs	r1, r3
     c2e:	230a      	movs	r3, #10
     c30:	18fb      	adds	r3, r7, r3
     c32:	1c22      	adds	r2, r4, #0
     c34:	801a      	strh	r2, [r3, #0]
     c36:	2308      	movs	r3, #8
     c38:	18fb      	adds	r3, r7, r3
     c3a:	1c02      	adds	r2, r0, #0
     c3c:	801a      	strh	r2, [r3, #0]
     c3e:	1dfb      	adds	r3, r7, #7
     c40:	1c0a      	adds	r2, r1, #0
     c42:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c44:	230a      	movs	r3, #10
     c46:	18fb      	adds	r3, r7, r3
     c48:	881a      	ldrh	r2, [r3, #0]
     c4a:	2308      	movs	r3, #8
     c4c:	18fb      	adds	r3, r7, r3
     c4e:	881b      	ldrh	r3, [r3, #0]
     c50:	1ad3      	subs	r3, r2, r3
     c52:	3307      	adds	r3, #7
     c54:	2b00      	cmp	r3, #0
     c56:	da00      	bge.n	c5a <SDMMC_UNSTUFF_BITS+0x3a>
     c58:	3307      	adds	r3, #7
     c5a:	10db      	asrs	r3, r3, #3
     c5c:	3b01      	subs	r3, #1
     c5e:	68fa      	ldr	r2, [r7, #12]
     c60:	18d3      	adds	r3, r2, r3
     c62:	781b      	ldrb	r3, [r3, #0]
     c64:	0019      	movs	r1, r3
     c66:	2308      	movs	r3, #8
     c68:	18fb      	adds	r3, r7, r3
     c6a:	881b      	ldrh	r3, [r3, #0]
     c6c:	2207      	movs	r2, #7
     c6e:	4013      	ands	r3, r2
     c70:	4119      	asrs	r1, r3
     c72:	000b      	movs	r3, r1
     c74:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
     c76:	2308      	movs	r3, #8
     c78:	18fb      	adds	r3, r7, r3
     c7a:	881b      	ldrh	r3, [r3, #0]
     c7c:	2207      	movs	r2, #7
     c7e:	401a      	ands	r2, r3
     c80:	1dfb      	adds	r3, r7, #7
     c82:	781b      	ldrb	r3, [r3, #0]
     c84:	18d3      	adds	r3, r2, r3
     c86:	2b08      	cmp	r3, #8
     c88:	dd1c      	ble.n	cc4 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c8a:	230a      	movs	r3, #10
     c8c:	18fb      	adds	r3, r7, r3
     c8e:	881a      	ldrh	r2, [r3, #0]
     c90:	2308      	movs	r3, #8
     c92:	18fb      	adds	r3, r7, r3
     c94:	881b      	ldrh	r3, [r3, #0]
     c96:	1ad3      	subs	r3, r2, r3
     c98:	3307      	adds	r3, #7
     c9a:	2b00      	cmp	r3, #0
     c9c:	da00      	bge.n	ca0 <SDMMC_UNSTUFF_BITS+0x80>
     c9e:	3307      	adds	r3, #7
     ca0:	10db      	asrs	r3, r3, #3
     ca2:	3b02      	subs	r3, #2
     ca4:	68fa      	ldr	r2, [r7, #12]
     ca6:	18d3      	adds	r3, r2, r3
     ca8:	781b      	ldrb	r3, [r3, #0]
     caa:	0019      	movs	r1, r3
     cac:	2308      	movs	r3, #8
     cae:	18fb      	adds	r3, r7, r3
     cb0:	881b      	ldrh	r3, [r3, #0]
     cb2:	2207      	movs	r2, #7
     cb4:	4013      	ands	r3, r2
     cb6:	2208      	movs	r2, #8
     cb8:	1ad3      	subs	r3, r2, r3
     cba:	4099      	lsls	r1, r3
     cbc:	000b      	movs	r3, r1
     cbe:	697a      	ldr	r2, [r7, #20]
     cc0:	4313      	orrs	r3, r2
     cc2:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
     cc4:	2308      	movs	r3, #8
     cc6:	18fb      	adds	r3, r7, r3
     cc8:	881b      	ldrh	r3, [r3, #0]
     cca:	2207      	movs	r2, #7
     ccc:	401a      	ands	r2, r3
     cce:	1dfb      	adds	r3, r7, #7
     cd0:	781b      	ldrb	r3, [r3, #0]
     cd2:	18d3      	adds	r3, r2, r3
     cd4:	2b10      	cmp	r3, #16
     cd6:	dd1c      	ble.n	d12 <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     cd8:	230a      	movs	r3, #10
     cda:	18fb      	adds	r3, r7, r3
     cdc:	881a      	ldrh	r2, [r3, #0]
     cde:	2308      	movs	r3, #8
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	881b      	ldrh	r3, [r3, #0]
     ce4:	1ad3      	subs	r3, r2, r3
     ce6:	3307      	adds	r3, #7
     ce8:	2b00      	cmp	r3, #0
     cea:	da00      	bge.n	cee <SDMMC_UNSTUFF_BITS+0xce>
     cec:	3307      	adds	r3, #7
     cee:	10db      	asrs	r3, r3, #3
     cf0:	3b03      	subs	r3, #3
     cf2:	68fa      	ldr	r2, [r7, #12]
     cf4:	18d3      	adds	r3, r2, r3
     cf6:	781b      	ldrb	r3, [r3, #0]
     cf8:	0019      	movs	r1, r3
     cfa:	2308      	movs	r3, #8
     cfc:	18fb      	adds	r3, r7, r3
     cfe:	881b      	ldrh	r3, [r3, #0]
     d00:	2207      	movs	r2, #7
     d02:	4013      	ands	r3, r2
     d04:	2210      	movs	r2, #16
     d06:	1ad3      	subs	r3, r2, r3
     d08:	4099      	lsls	r1, r3
     d0a:	000b      	movs	r3, r1
     d0c:	697a      	ldr	r2, [r7, #20]
     d0e:	4313      	orrs	r3, r2
     d10:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
     d12:	2308      	movs	r3, #8
     d14:	18fb      	adds	r3, r7, r3
     d16:	881b      	ldrh	r3, [r3, #0]
     d18:	2207      	movs	r2, #7
     d1a:	401a      	ands	r2, r3
     d1c:	1dfb      	adds	r3, r7, #7
     d1e:	781b      	ldrb	r3, [r3, #0]
     d20:	18d3      	adds	r3, r2, r3
     d22:	2b10      	cmp	r3, #16
     d24:	dd1c      	ble.n	d60 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d26:	230a      	movs	r3, #10
     d28:	18fb      	adds	r3, r7, r3
     d2a:	881a      	ldrh	r2, [r3, #0]
     d2c:	2308      	movs	r3, #8
     d2e:	18fb      	adds	r3, r7, r3
     d30:	881b      	ldrh	r3, [r3, #0]
     d32:	1ad3      	subs	r3, r2, r3
     d34:	3307      	adds	r3, #7
     d36:	2b00      	cmp	r3, #0
     d38:	da00      	bge.n	d3c <SDMMC_UNSTUFF_BITS+0x11c>
     d3a:	3307      	adds	r3, #7
     d3c:	10db      	asrs	r3, r3, #3
     d3e:	3b03      	subs	r3, #3
     d40:	68fa      	ldr	r2, [r7, #12]
     d42:	18d3      	adds	r3, r2, r3
     d44:	781b      	ldrb	r3, [r3, #0]
     d46:	0019      	movs	r1, r3
     d48:	2308      	movs	r3, #8
     d4a:	18fb      	adds	r3, r7, r3
     d4c:	881b      	ldrh	r3, [r3, #0]
     d4e:	2207      	movs	r2, #7
     d50:	4013      	ands	r3, r2
     d52:	2210      	movs	r2, #16
     d54:	1ad3      	subs	r3, r2, r3
     d56:	4099      	lsls	r1, r3
     d58:	000b      	movs	r3, r1
     d5a:	697a      	ldr	r2, [r7, #20]
     d5c:	4313      	orrs	r3, r2
     d5e:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
     d60:	1dfb      	adds	r3, r7, #7
     d62:	781b      	ldrb	r3, [r3, #0]
     d64:	2201      	movs	r2, #1
     d66:	409a      	lsls	r2, r3
     d68:	0013      	movs	r3, r2
     d6a:	1e5a      	subs	r2, r3, #1
     d6c:	697b      	ldr	r3, [r7, #20]
     d6e:	4013      	ands	r3, r2
     d70:	617b      	str	r3, [r7, #20]
	return value;
     d72:	697b      	ldr	r3, [r7, #20]
}
     d74:	0018      	movs	r0, r3
     d76:	46bd      	mov	sp, r7
     d78:	b007      	add	sp, #28
     d7a:	bd90      	pop	{r4, r7, pc}

00000d7c <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
     d7c:	b580      	push	{r7, lr}
     d7e:	b082      	sub	sp, #8
     d80:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
     d82:	4b23      	ldr	r3, [pc, #140]	; (e10 <mmc_spi_op_cond+0x94>)
     d84:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     d86:	4b23      	ldr	r3, [pc, #140]	; (e14 <mmc_spi_op_cond+0x98>)
     d88:	2100      	movs	r1, #0
     d8a:	0018      	movs	r0, r3
     d8c:	4b22      	ldr	r3, [pc, #136]	; (e18 <mmc_spi_op_cond+0x9c>)
     d8e:	4798      	blx	r3
     d90:	0003      	movs	r3, r0
     d92:	001a      	movs	r2, r3
     d94:	2301      	movs	r3, #1
     d96:	4053      	eors	r3, r2
     d98:	b2db      	uxtb	r3, r3
     d9a:	2b00      	cmp	r3, #0
     d9c:	d001      	beq.n	da2 <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
     d9e:	2300      	movs	r3, #0
     da0:	e031      	b.n	e06 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
     da2:	4b1e      	ldr	r3, [pc, #120]	; (e1c <mmc_spi_op_cond+0xa0>)
     da4:	4798      	blx	r3
     da6:	0003      	movs	r3, r0
     da8:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
     daa:	683b      	ldr	r3, [r7, #0]
     dac:	2201      	movs	r2, #1
     dae:	4013      	ands	r3, r2
     db0:	d006      	beq.n	dc0 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
     db2:	687b      	ldr	r3, [r7, #4]
     db4:	1e5a      	subs	r2, r3, #1
     db6:	607a      	str	r2, [r7, #4]
     db8:	2b00      	cmp	r3, #0
     dba:	d1e4      	bne.n	d86 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
     dbc:	2300      	movs	r3, #0
     dbe:	e022      	b.n	e06 <mmc_spi_op_cond+0x8a>
			break;
     dc0:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     dc2:	4b17      	ldr	r3, [pc, #92]	; (e20 <mmc_spi_op_cond+0xa4>)
     dc4:	2100      	movs	r1, #0
     dc6:	0018      	movs	r0, r3
     dc8:	4b13      	ldr	r3, [pc, #76]	; (e18 <mmc_spi_op_cond+0x9c>)
     dca:	4798      	blx	r3
     dcc:	0003      	movs	r3, r0
     dce:	001a      	movs	r2, r3
     dd0:	2301      	movs	r3, #1
     dd2:	4053      	eors	r3, r2
     dd4:	b2db      	uxtb	r3, r3
     dd6:	2b00      	cmp	r3, #0
     dd8:	d001      	beq.n	dde <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
     dda:	2300      	movs	r3, #0
     ddc:	e013      	b.n	e06 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     dde:	4b0f      	ldr	r3, [pc, #60]	; (e1c <mmc_spi_op_cond+0xa0>)
     de0:	4798      	blx	r3
     de2:	0002      	movs	r2, r0
     de4:	23c0      	movs	r3, #192	; 0xc0
     de6:	05db      	lsls	r3, r3, #23
     de8:	401a      	ands	r2, r3
     dea:	2380      	movs	r3, #128	; 0x80
     dec:	05db      	lsls	r3, r3, #23
     dee:	429a      	cmp	r2, r3
     df0:	d108      	bne.n	e04 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
     df2:	4b0c      	ldr	r3, [pc, #48]	; (e24 <mmc_spi_op_cond+0xa8>)
     df4:	681a      	ldr	r2, [r3, #0]
     df6:	4b0b      	ldr	r3, [pc, #44]	; (e24 <mmc_spi_op_cond+0xa8>)
     df8:	681b      	ldr	r3, [r3, #0]
     dfa:	7adb      	ldrb	r3, [r3, #11]
     dfc:	2108      	movs	r1, #8
     dfe:	430b      	orrs	r3, r1
     e00:	b2db      	uxtb	r3, r3
     e02:	72d3      	strb	r3, [r2, #11]
	}
	return true;
     e04:	2301      	movs	r3, #1
}
     e06:	0018      	movs	r0, r3
     e08:	46bd      	mov	sp, r7
     e0a:	b002      	add	sp, #8
     e0c:	bd80      	pop	{r7, pc}
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	00001bee 	.word	0x00001bee
     e14:	00001101 	.word	0x00001101
     e18:	00002815 	.word	0x00002815
     e1c:	00002a55 	.word	0x00002a55
     e20:	0000053a 	.word	0x0000053a
     e24:	200000e0 	.word	0x200000e0

00000e28 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
     e28:	b580      	push	{r7, lr}
     e2a:	b086      	sub	sp, #24
     e2c:	af00      	add	r7, sp, #0
     e2e:	0002      	movs	r2, r0
     e30:	1dfb      	adds	r3, r7, #7
     e32:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
     e34:	4b2e      	ldr	r3, [pc, #184]	; (ef0 <sd_spi_op_cond+0xc8>)
     e36:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     e38:	4b2e      	ldr	r3, [pc, #184]	; (ef4 <sd_spi_op_cond+0xcc>)
     e3a:	2100      	movs	r1, #0
     e3c:	0018      	movs	r0, r3
     e3e:	4b2e      	ldr	r3, [pc, #184]	; (ef8 <sd_spi_op_cond+0xd0>)
     e40:	4798      	blx	r3
     e42:	0003      	movs	r3, r0
     e44:	001a      	movs	r2, r3
     e46:	2301      	movs	r3, #1
     e48:	4053      	eors	r3, r2
     e4a:	b2db      	uxtb	r3, r3
     e4c:	2b00      	cmp	r3, #0
     e4e:	d001      	beq.n	e54 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
     e50:	2300      	movs	r3, #0
     e52:	e048      	b.n	ee6 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
     e54:	2300      	movs	r3, #0
     e56:	617b      	str	r3, [r7, #20]
		if (v2) {
     e58:	1dfb      	adds	r3, r7, #7
     e5a:	781b      	ldrb	r3, [r3, #0]
     e5c:	2b00      	cmp	r3, #0
     e5e:	d004      	beq.n	e6a <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
     e60:	697b      	ldr	r3, [r7, #20]
     e62:	2280      	movs	r2, #128	; 0x80
     e64:	05d2      	lsls	r2, r2, #23
     e66:	4313      	orrs	r3, r2
     e68:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     e6a:	697b      	ldr	r3, [r7, #20]
     e6c:	4a23      	ldr	r2, [pc, #140]	; (efc <sd_spi_op_cond+0xd4>)
     e6e:	0019      	movs	r1, r3
     e70:	0010      	movs	r0, r2
     e72:	4b21      	ldr	r3, [pc, #132]	; (ef8 <sd_spi_op_cond+0xd0>)
     e74:	4798      	blx	r3
     e76:	0003      	movs	r3, r0
     e78:	001a      	movs	r2, r3
     e7a:	2301      	movs	r3, #1
     e7c:	4053      	eors	r3, r2
     e7e:	b2db      	uxtb	r3, r3
     e80:	2b00      	cmp	r3, #0
     e82:	d001      	beq.n	e88 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
     e84:	2300      	movs	r3, #0
     e86:	e02e      	b.n	ee6 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
     e88:	4b1d      	ldr	r3, [pc, #116]	; (f00 <sd_spi_op_cond+0xd8>)
     e8a:	4798      	blx	r3
     e8c:	0003      	movs	r3, r0
     e8e:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
     e90:	68fb      	ldr	r3, [r7, #12]
     e92:	2201      	movs	r2, #1
     e94:	4013      	ands	r3, r2
     e96:	d006      	beq.n	ea6 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
     e98:	693b      	ldr	r3, [r7, #16]
     e9a:	1e5a      	subs	r2, r3, #1
     e9c:	613a      	str	r2, [r7, #16]
     e9e:	2b00      	cmp	r3, #0
     ea0:	d1ca      	bne.n	e38 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
     ea2:	2300      	movs	r3, #0
     ea4:	e01f      	b.n	ee6 <sd_spi_op_cond+0xbe>
			break;
     ea6:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     ea8:	4b16      	ldr	r3, [pc, #88]	; (f04 <sd_spi_op_cond+0xdc>)
     eaa:	2100      	movs	r1, #0
     eac:	0018      	movs	r0, r3
     eae:	4b12      	ldr	r3, [pc, #72]	; (ef8 <sd_spi_op_cond+0xd0>)
     eb0:	4798      	blx	r3
     eb2:	0003      	movs	r3, r0
     eb4:	001a      	movs	r2, r3
     eb6:	2301      	movs	r3, #1
     eb8:	4053      	eors	r3, r2
     eba:	b2db      	uxtb	r3, r3
     ebc:	2b00      	cmp	r3, #0
     ebe:	d001      	beq.n	ec4 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
     ec0:	2300      	movs	r3, #0
     ec2:	e010      	b.n	ee6 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
     ec4:	4b0e      	ldr	r3, [pc, #56]	; (f00 <sd_spi_op_cond+0xd8>)
     ec6:	4798      	blx	r3
     ec8:	0002      	movs	r2, r0
     eca:	2380      	movs	r3, #128	; 0x80
     ecc:	05db      	lsls	r3, r3, #23
     ece:	4013      	ands	r3, r2
     ed0:	d008      	beq.n	ee4 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
     ed2:	4b0d      	ldr	r3, [pc, #52]	; (f08 <sd_spi_op_cond+0xe0>)
     ed4:	681a      	ldr	r2, [r3, #0]
     ed6:	4b0c      	ldr	r3, [pc, #48]	; (f08 <sd_spi_op_cond+0xe0>)
     ed8:	681b      	ldr	r3, [r3, #0]
     eda:	7adb      	ldrb	r3, [r3, #11]
     edc:	2108      	movs	r1, #8
     ede:	430b      	orrs	r3, r1
     ee0:	b2db      	uxtb	r3, r3
     ee2:	72d3      	strb	r3, [r2, #11]
	}
	return true;
     ee4:	2301      	movs	r3, #1
}
     ee6:	0018      	movs	r0, r3
     ee8:	46bd      	mov	sp, r7
     eea:	b006      	add	sp, #24
     eec:	bd80      	pop	{r7, pc}
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	00001bee 	.word	0x00001bee
     ef4:	00001137 	.word	0x00001137
     ef8:	00002815 	.word	0x00002815
     efc:	00001129 	.word	0x00001129
     f00:	00002a55 	.word	0x00002a55
     f04:	0000053a 	.word	0x0000053a
     f08:	200000e0 	.word	0x200000e0

00000f0c <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
     f0c:	b580      	push	{r7, lr}
     f0e:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
     f10:	2301      	movs	r3, #1
}
     f12:	0018      	movs	r0, r3
     f14:	46bd      	mov	sp, r7
     f16:	bd80      	pop	{r7, pc}

00000f18 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
     f18:	b580      	push	{r7, lr}
     f1a:	b084      	sub	sp, #16
     f1c:	af00      	add	r7, sp, #0
     f1e:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
     f20:	687b      	ldr	r3, [r7, #4]
     f22:	2200      	movs	r2, #0
     f24:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     f26:	23d5      	movs	r3, #213	; 0xd5
     f28:	005b      	lsls	r3, r3, #1
     f2a:	4a14      	ldr	r2, [pc, #80]	; (f7c <sd_cmd8+0x64>)
     f2c:	0019      	movs	r1, r3
     f2e:	0010      	movs	r0, r2
     f30:	4b13      	ldr	r3, [pc, #76]	; (f80 <sd_cmd8+0x68>)
     f32:	4798      	blx	r3
     f34:	0003      	movs	r3, r0
     f36:	001a      	movs	r2, r3
     f38:	2301      	movs	r3, #1
     f3a:	4053      	eors	r3, r2
     f3c:	b2db      	uxtb	r3, r3
     f3e:	2b00      	cmp	r3, #0
     f40:	d001      	beq.n	f46 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
     f42:	2301      	movs	r3, #1
     f44:	e015      	b.n	f72 <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
     f46:	4b0f      	ldr	r3, [pc, #60]	; (f84 <sd_cmd8+0x6c>)
     f48:	4798      	blx	r3
     f4a:	0003      	movs	r3, r0
     f4c:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
     f4e:	68fb      	ldr	r3, [r7, #12]
     f50:	3301      	adds	r3, #1
     f52:	d101      	bne.n	f58 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
     f54:	2301      	movs	r3, #1
     f56:	e00c      	b.n	f72 <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     f58:	68fb      	ldr	r3, [r7, #12]
     f5a:	051b      	lsls	r3, r3, #20
     f5c:	0d1a      	lsrs	r2, r3, #20
     f5e:	23d5      	movs	r3, #213	; 0xd5
     f60:	005b      	lsls	r3, r3, #1
     f62:	429a      	cmp	r2, r3
     f64:	d001      	beq.n	f6a <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
     f66:	2300      	movs	r3, #0
     f68:	e003      	b.n	f72 <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
     f6a:	687b      	ldr	r3, [r7, #4]
     f6c:	2201      	movs	r2, #1
     f6e:	701a      	strb	r2, [r3, #0]
	return true;
     f70:	2301      	movs	r3, #1
}
     f72:	0018      	movs	r0, r3
     f74:	46bd      	mov	sp, r7
     f76:	b004      	add	sp, #16
     f78:	bd80      	pop	{r7, pc}
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	00005508 	.word	0x00005508
     f80:	00002815 	.word	0x00002815
     f84:	00002a55 	.word	0x00002a55

00000f88 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
     f88:	b590      	push	{r4, r7, lr}
     f8a:	b089      	sub	sp, #36	; 0x24
     f8c:	af02      	add	r7, sp, #8
     f8e:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     f90:	2380      	movs	r3, #128	; 0x80
     f92:	009a      	lsls	r2, r3, #2
     f94:	4841      	ldr	r0, [pc, #260]	; (109c <mmc_cmd8+0x114>)
     f96:	2300      	movs	r3, #0
     f98:	9300      	str	r3, [sp, #0]
     f9a:	2301      	movs	r3, #1
     f9c:	2100      	movs	r1, #0
     f9e:	4c40      	ldr	r4, [pc, #256]	; (10a0 <mmc_cmd8+0x118>)
     fa0:	47a0      	blx	r4
     fa2:	0003      	movs	r3, r0
     fa4:	001a      	movs	r2, r3
     fa6:	2301      	movs	r3, #1
     fa8:	4053      	eors	r3, r2
     faa:	b2db      	uxtb	r3, r3
     fac:	2b00      	cmp	r3, #0
     fae:	d001      	beq.n	fb4 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
     fb0:	2300      	movs	r3, #0
     fb2:	e06e      	b.n	1092 <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     fb4:	2316      	movs	r3, #22
     fb6:	18fb      	adds	r3, r7, r3
     fb8:	2200      	movs	r2, #0
     fba:	801a      	strh	r2, [r3, #0]
     fbc:	e014      	b.n	fe8 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
     fbe:	2310      	movs	r3, #16
     fc0:	18fb      	adds	r3, r7, r3
     fc2:	0018      	movs	r0, r3
     fc4:	4b37      	ldr	r3, [pc, #220]	; (10a4 <mmc_cmd8+0x11c>)
     fc6:	4798      	blx	r3
     fc8:	0003      	movs	r3, r0
     fca:	001a      	movs	r2, r3
     fcc:	2301      	movs	r3, #1
     fce:	4053      	eors	r3, r2
     fd0:	b2db      	uxtb	r3, r3
     fd2:	2b00      	cmp	r3, #0
     fd4:	d001      	beq.n	fda <mmc_cmd8+0x52>
			return false;
     fd6:	2300      	movs	r3, #0
     fd8:	e05b      	b.n	1092 <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     fda:	2316      	movs	r3, #22
     fdc:	18fb      	adds	r3, r7, r3
     fde:	881a      	ldrh	r2, [r3, #0]
     fe0:	2316      	movs	r3, #22
     fe2:	18fb      	adds	r3, r7, r3
     fe4:	3201      	adds	r2, #1
     fe6:	801a      	strh	r2, [r3, #0]
     fe8:	2316      	movs	r3, #22
     fea:	18fb      	adds	r3, r7, r3
     fec:	881b      	ldrh	r3, [r3, #0]
     fee:	2b31      	cmp	r3, #49	; 0x31
     ff0:	d9e5      	bls.n	fbe <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
     ff2:	693b      	ldr	r3, [r7, #16]
     ff4:	b2db      	uxtb	r3, r3
     ff6:	2202      	movs	r2, #2
     ff8:	4013      	ands	r3, r2
     ffa:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
     ffc:	687b      	ldr	r3, [r7, #4]
     ffe:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    1000:	4b29      	ldr	r3, [pc, #164]	; (10a8 <mmc_cmd8+0x120>)
    1002:	681b      	ldr	r3, [r3, #0]
    1004:	330e      	adds	r3, #14
    1006:	0018      	movs	r0, r3
    1008:	230c      	movs	r3, #12
    100a:	223e      	movs	r2, #62	; 0x3e
    100c:	2180      	movs	r1, #128	; 0x80
    100e:	4c27      	ldr	r4, [pc, #156]	; (10ac <mmc_cmd8+0x124>)
    1010:	47a0      	blx	r4
    1012:	0002      	movs	r2, r0
    1014:	4b26      	ldr	r3, [pc, #152]	; (10b0 <mmc_cmd8+0x128>)
    1016:	429a      	cmp	r2, r3
    1018:	d135      	bne.n	1086 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    101a:	e014      	b.n	1046 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    101c:	230c      	movs	r3, #12
    101e:	18fb      	adds	r3, r7, r3
    1020:	0018      	movs	r0, r3
    1022:	4b20      	ldr	r3, [pc, #128]	; (10a4 <mmc_cmd8+0x11c>)
    1024:	4798      	blx	r3
    1026:	0003      	movs	r3, r0
    1028:	001a      	movs	r2, r3
    102a:	2301      	movs	r3, #1
    102c:	4053      	eors	r3, r2
    102e:	b2db      	uxtb	r3, r3
    1030:	2b00      	cmp	r3, #0
    1032:	d001      	beq.n	1038 <mmc_cmd8+0xb0>
				return false;
    1034:	2300      	movs	r3, #0
    1036:	e02c      	b.n	1092 <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    1038:	2316      	movs	r3, #22
    103a:	18fb      	adds	r3, r7, r3
    103c:	881a      	ldrh	r2, [r3, #0]
    103e:	2316      	movs	r3, #22
    1040:	18fb      	adds	r3, r7, r3
    1042:	3201      	adds	r2, #1
    1044:	801a      	strh	r2, [r3, #0]
    1046:	2316      	movs	r3, #22
    1048:	18fb      	adds	r3, r7, r3
    104a:	881b      	ldrh	r3, [r3, #0]
    104c:	2b35      	cmp	r3, #53	; 0x35
    104e:	d9e5      	bls.n	101c <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    1050:	4b15      	ldr	r3, [pc, #84]	; (10a8 <mmc_cmd8+0x120>)
    1052:	681b      	ldr	r3, [r3, #0]
    1054:	68fa      	ldr	r2, [r7, #12]
    1056:	0852      	lsrs	r2, r2, #1
    1058:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    105a:	e014      	b.n	1086 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    105c:	230c      	movs	r3, #12
    105e:	18fb      	adds	r3, r7, r3
    1060:	0018      	movs	r0, r3
    1062:	4b10      	ldr	r3, [pc, #64]	; (10a4 <mmc_cmd8+0x11c>)
    1064:	4798      	blx	r3
    1066:	0003      	movs	r3, r0
    1068:	001a      	movs	r2, r3
    106a:	2301      	movs	r3, #1
    106c:	4053      	eors	r3, r2
    106e:	b2db      	uxtb	r3, r3
    1070:	2b00      	cmp	r3, #0
    1072:	d001      	beq.n	1078 <mmc_cmd8+0xf0>
			return false;
    1074:	2300      	movs	r3, #0
    1076:	e00c      	b.n	1092 <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    1078:	2316      	movs	r3, #22
    107a:	18fb      	adds	r3, r7, r3
    107c:	881a      	ldrh	r2, [r3, #0]
    107e:	2316      	movs	r3, #22
    1080:	18fb      	adds	r3, r7, r3
    1082:	3201      	adds	r2, #1
    1084:	801a      	strh	r2, [r3, #0]
    1086:	2316      	movs	r3, #22
    1088:	18fb      	adds	r3, r7, r3
    108a:	881b      	ldrh	r3, [r3, #0]
    108c:	2b7f      	cmp	r3, #127	; 0x7f
    108e:	d9e5      	bls.n	105c <mmc_cmd8+0xd4>
		}
	}
	return true;
    1090:	2301      	movs	r3, #1
}
    1092:	0018      	movs	r0, r3
    1094:	46bd      	mov	sp, r7
    1096:	b007      	add	sp, #28
    1098:	bd90      	pop	{r4, r7, pc}
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	00081108 	.word	0x00081108
    10a0:	0000283d 	.word	0x0000283d
    10a4:	00002a69 	.word	0x00002a69
    10a8:	200000e0 	.word	0x200000e0
    10ac:	00000c21 	.word	0x00000c21
    10b0:	00000fff 	.word	0x00000fff

000010b4 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    10b4:	b590      	push	{r4, r7, lr}
    10b6:	b083      	sub	sp, #12
    10b8:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    10ba:	4b15      	ldr	r3, [pc, #84]	; (1110 <sd_mmc_cmd9_spi+0x5c>)
    10bc:	681b      	ldr	r3, [r3, #0]
    10be:	891b      	ldrh	r3, [r3, #8]
    10c0:	0419      	lsls	r1, r3, #16
    10c2:	4814      	ldr	r0, [pc, #80]	; (1114 <sd_mmc_cmd9_spi+0x60>)
    10c4:	2301      	movs	r3, #1
    10c6:	9300      	str	r3, [sp, #0]
    10c8:	2301      	movs	r3, #1
    10ca:	2210      	movs	r2, #16
    10cc:	4c12      	ldr	r4, [pc, #72]	; (1118 <sd_mmc_cmd9_spi+0x64>)
    10ce:	47a0      	blx	r4
    10d0:	0003      	movs	r3, r0
    10d2:	001a      	movs	r2, r3
    10d4:	2301      	movs	r3, #1
    10d6:	4053      	eors	r3, r2
    10d8:	b2db      	uxtb	r3, r3
    10da:	2b00      	cmp	r3, #0
    10dc:	d001      	beq.n	10e2 <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    10de:	2300      	movs	r3, #0
    10e0:	e012      	b.n	1108 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    10e2:	4b0b      	ldr	r3, [pc, #44]	; (1110 <sd_mmc_cmd9_spi+0x5c>)
    10e4:	681b      	ldr	r3, [r3, #0]
    10e6:	330e      	adds	r3, #14
    10e8:	2101      	movs	r1, #1
    10ea:	0018      	movs	r0, r3
    10ec:	4b0b      	ldr	r3, [pc, #44]	; (111c <sd_mmc_cmd9_spi+0x68>)
    10ee:	4798      	blx	r3
    10f0:	0003      	movs	r3, r0
    10f2:	001a      	movs	r2, r3
    10f4:	2301      	movs	r3, #1
    10f6:	4053      	eors	r3, r2
    10f8:	b2db      	uxtb	r3, r3
    10fa:	2b00      	cmp	r3, #0
    10fc:	d001      	beq.n	1102 <sd_mmc_cmd9_spi+0x4e>
		return false;
    10fe:	2300      	movs	r3, #0
    1100:	e002      	b.n	1108 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    1102:	4b07      	ldr	r3, [pc, #28]	; (1120 <sd_mmc_cmd9_spi+0x6c>)
    1104:	4798      	blx	r3
    1106:	0003      	movs	r3, r0
}
    1108:	0018      	movs	r0, r3
    110a:	46bd      	mov	sp, r7
    110c:	b001      	add	sp, #4
    110e:	bd90      	pop	{r4, r7, pc}
    1110:	200000e0 	.word	0x200000e0
    1114:	00081109 	.word	0x00081109
    1118:	0000283d 	.word	0x0000283d
    111c:	00002b0d 	.word	0x00002b0d
    1120:	00002bb1 	.word	0x00002bb1

00001124 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    1124:	b5b0      	push	{r4, r5, r7, lr}
    1126:	b084      	sub	sp, #16
    1128:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    112a:	4b45      	ldr	r3, [pc, #276]	; (1240 <mmc_decode_csd+0x11c>)
    112c:	681b      	ldr	r3, [r3, #0]
    112e:	330e      	adds	r3, #14
    1130:	0018      	movs	r0, r3
    1132:	2304      	movs	r3, #4
    1134:	227a      	movs	r2, #122	; 0x7a
    1136:	2180      	movs	r1, #128	; 0x80
    1138:	4c42      	ldr	r4, [pc, #264]	; (1244 <mmc_decode_csd+0x120>)
    113a:	47a0      	blx	r4
    113c:	0003      	movs	r3, r0
    113e:	2b02      	cmp	r3, #2
    1140:	d011      	beq.n	1166 <mmc_decode_csd+0x42>
    1142:	d802      	bhi.n	114a <mmc_decode_csd+0x26>
    1144:	2b01      	cmp	r3, #1
    1146:	d009      	beq.n	115c <mmc_decode_csd+0x38>
    1148:	e003      	b.n	1152 <mmc_decode_csd+0x2e>
    114a:	2b03      	cmp	r3, #3
    114c:	d010      	beq.n	1170 <mmc_decode_csd+0x4c>
    114e:	2b04      	cmp	r3, #4
    1150:	d013      	beq.n	117a <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    1152:	4b3b      	ldr	r3, [pc, #236]	; (1240 <mmc_decode_csd+0x11c>)
    1154:	681b      	ldr	r3, [r3, #0]
    1156:	2212      	movs	r2, #18
    1158:	731a      	strb	r2, [r3, #12]
		break;
    115a:	e013      	b.n	1184 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    115c:	4b38      	ldr	r3, [pc, #224]	; (1240 <mmc_decode_csd+0x11c>)
    115e:	681b      	ldr	r3, [r3, #0]
    1160:	2214      	movs	r2, #20
    1162:	731a      	strb	r2, [r3, #12]
		break;
    1164:	e00e      	b.n	1184 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    1166:	4b36      	ldr	r3, [pc, #216]	; (1240 <mmc_decode_csd+0x11c>)
    1168:	681b      	ldr	r3, [r3, #0]
    116a:	2222      	movs	r2, #34	; 0x22
    116c:	731a      	strb	r2, [r3, #12]
		break;
    116e:	e009      	b.n	1184 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    1170:	4b33      	ldr	r3, [pc, #204]	; (1240 <mmc_decode_csd+0x11c>)
    1172:	681b      	ldr	r3, [r3, #0]
    1174:	2230      	movs	r2, #48	; 0x30
    1176:	731a      	strb	r2, [r3, #12]
		break;
    1178:	e004      	b.n	1184 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    117a:	4b31      	ldr	r3, [pc, #196]	; (1240 <mmc_decode_csd+0x11c>)
    117c:	681b      	ldr	r3, [r3, #0]
    117e:	2240      	movs	r2, #64	; 0x40
    1180:	731a      	strb	r2, [r3, #12]
		break;
    1182:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    1184:	4b2e      	ldr	r3, [pc, #184]	; (1240 <mmc_decode_csd+0x11c>)
    1186:	681b      	ldr	r3, [r3, #0]
    1188:	330e      	adds	r3, #14
    118a:	0018      	movs	r0, r3
    118c:	2308      	movs	r3, #8
    118e:	2260      	movs	r2, #96	; 0x60
    1190:	2180      	movs	r1, #128	; 0x80
    1192:	4c2c      	ldr	r4, [pc, #176]	; (1244 <mmc_decode_csd+0x120>)
    1194:	47a0      	blx	r4
    1196:	0003      	movs	r3, r0
    1198:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    119a:	68fb      	ldr	r3, [r7, #12]
    119c:	2207      	movs	r2, #7
    119e:	401a      	ands	r2, r3
    11a0:	4b29      	ldr	r3, [pc, #164]	; (1248 <mmc_decode_csd+0x124>)
    11a2:	0092      	lsls	r2, r2, #2
    11a4:	58d3      	ldr	r3, [r2, r3]
    11a6:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    11a8:	68fb      	ldr	r3, [r7, #12]
    11aa:	08db      	lsrs	r3, r3, #3
    11ac:	220f      	movs	r2, #15
    11ae:	401a      	ands	r2, r3
    11b0:	4b26      	ldr	r3, [pc, #152]	; (124c <mmc_decode_csd+0x128>)
    11b2:	0092      	lsls	r2, r2, #2
    11b4:	58d3      	ldr	r3, [r2, r3]
    11b6:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    11b8:	4b21      	ldr	r3, [pc, #132]	; (1240 <mmc_decode_csd+0x11c>)
    11ba:	681b      	ldr	r3, [r3, #0]
    11bc:	68ba      	ldr	r2, [r7, #8]
    11be:	6879      	ldr	r1, [r7, #4]
    11c0:	434a      	muls	r2, r1
    11c2:	21fa      	movs	r1, #250	; 0xfa
    11c4:	0089      	lsls	r1, r1, #2
    11c6:	434a      	muls	r2, r1
    11c8:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    11ca:	4b1d      	ldr	r3, [pc, #116]	; (1240 <mmc_decode_csd+0x11c>)
    11cc:	681b      	ldr	r3, [r3, #0]
    11ce:	330e      	adds	r3, #14
    11d0:	0018      	movs	r0, r3
    11d2:	230c      	movs	r3, #12
    11d4:	223e      	movs	r2, #62	; 0x3e
    11d6:	2180      	movs	r1, #128	; 0x80
    11d8:	4c1a      	ldr	r4, [pc, #104]	; (1244 <mmc_decode_csd+0x120>)
    11da:	47a0      	blx	r4
    11dc:	0002      	movs	r2, r0
    11de:	4b1c      	ldr	r3, [pc, #112]	; (1250 <mmc_decode_csd+0x12c>)
    11e0:	429a      	cmp	r2, r3
    11e2:	d028      	beq.n	1236 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    11e4:	4b16      	ldr	r3, [pc, #88]	; (1240 <mmc_decode_csd+0x11c>)
    11e6:	681b      	ldr	r3, [r3, #0]
    11e8:	330e      	adds	r3, #14
    11ea:	0018      	movs	r0, r3
    11ec:	230c      	movs	r3, #12
    11ee:	223e      	movs	r2, #62	; 0x3e
    11f0:	2180      	movs	r1, #128	; 0x80
    11f2:	4c14      	ldr	r4, [pc, #80]	; (1244 <mmc_decode_csd+0x120>)
    11f4:	47a0      	blx	r4
    11f6:	0003      	movs	r3, r0
    11f8:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    11fa:	4b11      	ldr	r3, [pc, #68]	; (1240 <mmc_decode_csd+0x11c>)
    11fc:	681b      	ldr	r3, [r3, #0]
    11fe:	330e      	adds	r3, #14
    1200:	0018      	movs	r0, r3
    1202:	2303      	movs	r3, #3
    1204:	222f      	movs	r2, #47	; 0x2f
    1206:	2180      	movs	r1, #128	; 0x80
    1208:	4d0e      	ldr	r5, [pc, #56]	; (1244 <mmc_decode_csd+0x120>)
    120a:	47a8      	blx	r5
    120c:	0003      	movs	r3, r0
    120e:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    1210:	409c      	lsls	r4, r3
    1212:	0023      	movs	r3, r4
    1214:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    1216:	4b0a      	ldr	r3, [pc, #40]	; (1240 <mmc_decode_csd+0x11c>)
    1218:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    121a:	4b09      	ldr	r3, [pc, #36]	; (1240 <mmc_decode_csd+0x11c>)
    121c:	681b      	ldr	r3, [r3, #0]
    121e:	330e      	adds	r3, #14
    1220:	0018      	movs	r0, r3
    1222:	2304      	movs	r3, #4
    1224:	2250      	movs	r2, #80	; 0x50
    1226:	2180      	movs	r1, #128	; 0x80
    1228:	4d06      	ldr	r5, [pc, #24]	; (1244 <mmc_decode_csd+0x120>)
    122a:	47a8      	blx	r5
    122c:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    122e:	683b      	ldr	r3, [r7, #0]
    1230:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    1232:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    1234:	6063      	str	r3, [r4, #4]
	}
}
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	46bd      	mov	sp, r7
    123a:	b004      	add	sp, #16
    123c:	bdb0      	pop	{r4, r5, r7, pc}
    123e:	46c0      	nop			; (mov r8, r8)
    1240:	200000e0 	.word	0x200000e0
    1244:	00000c21 	.word	0x00000c21
    1248:	0000ae24 	.word	0x0000ae24
    124c:	0000ae80 	.word	0x0000ae80
    1250:	00000fff 	.word	0x00000fff

00001254 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    1254:	b5b0      	push	{r4, r5, r7, lr}
    1256:	b084      	sub	sp, #16
    1258:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    125a:	4b35      	ldr	r3, [pc, #212]	; (1330 <sd_decode_csd+0xdc>)
    125c:	681b      	ldr	r3, [r3, #0]
    125e:	330e      	adds	r3, #14
    1260:	0018      	movs	r0, r3
    1262:	2308      	movs	r3, #8
    1264:	2260      	movs	r2, #96	; 0x60
    1266:	2180      	movs	r1, #128	; 0x80
    1268:	4c32      	ldr	r4, [pc, #200]	; (1334 <sd_decode_csd+0xe0>)
    126a:	47a0      	blx	r4
    126c:	0003      	movs	r3, r0
    126e:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    1270:	68fb      	ldr	r3, [r7, #12]
    1272:	2207      	movs	r2, #7
    1274:	401a      	ands	r2, r3
    1276:	4b30      	ldr	r3, [pc, #192]	; (1338 <sd_decode_csd+0xe4>)
    1278:	0092      	lsls	r2, r2, #2
    127a:	58d3      	ldr	r3, [r2, r3]
    127c:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    127e:	68fb      	ldr	r3, [r7, #12]
    1280:	08db      	lsrs	r3, r3, #3
    1282:	220f      	movs	r2, #15
    1284:	401a      	ands	r2, r3
    1286:	4b2d      	ldr	r3, [pc, #180]	; (133c <sd_decode_csd+0xe8>)
    1288:	0092      	lsls	r2, r2, #2
    128a:	58d3      	ldr	r3, [r2, r3]
    128c:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    128e:	4b28      	ldr	r3, [pc, #160]	; (1330 <sd_decode_csd+0xdc>)
    1290:	681b      	ldr	r3, [r3, #0]
    1292:	68ba      	ldr	r2, [r7, #8]
    1294:	6879      	ldr	r1, [r7, #4]
    1296:	434a      	muls	r2, r1
    1298:	21fa      	movs	r1, #250	; 0xfa
    129a:	0089      	lsls	r1, r1, #2
    129c:	434a      	muls	r2, r1
    129e:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    12a0:	4b23      	ldr	r3, [pc, #140]	; (1330 <sd_decode_csd+0xdc>)
    12a2:	681b      	ldr	r3, [r3, #0]
    12a4:	330e      	adds	r3, #14
    12a6:	0018      	movs	r0, r3
    12a8:	2302      	movs	r3, #2
    12aa:	227e      	movs	r2, #126	; 0x7e
    12ac:	2180      	movs	r1, #128	; 0x80
    12ae:	4c21      	ldr	r4, [pc, #132]	; (1334 <sd_decode_csd+0xe0>)
    12b0:	47a0      	blx	r4
    12b2:	1e03      	subs	r3, r0, #0
    12b4:	d00f      	beq.n	12d6 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    12b6:	4b1e      	ldr	r3, [pc, #120]	; (1330 <sd_decode_csd+0xdc>)
    12b8:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    12ba:	4b1d      	ldr	r3, [pc, #116]	; (1330 <sd_decode_csd+0xdc>)
    12bc:	681b      	ldr	r3, [r3, #0]
    12be:	330e      	adds	r3, #14
    12c0:	0018      	movs	r0, r3
    12c2:	2316      	movs	r3, #22
    12c4:	2230      	movs	r2, #48	; 0x30
    12c6:	2180      	movs	r1, #128	; 0x80
    12c8:	4d1a      	ldr	r5, [pc, #104]	; (1334 <sd_decode_csd+0xe0>)
    12ca:	47a8      	blx	r5
    12cc:	0003      	movs	r3, r0
				* 512;
    12ce:	3301      	adds	r3, #1
    12d0:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    12d2:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    12d4:	e028      	b.n	1328 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    12d6:	4b16      	ldr	r3, [pc, #88]	; (1330 <sd_decode_csd+0xdc>)
    12d8:	681b      	ldr	r3, [r3, #0]
    12da:	330e      	adds	r3, #14
    12dc:	0018      	movs	r0, r3
    12de:	230c      	movs	r3, #12
    12e0:	223e      	movs	r2, #62	; 0x3e
    12e2:	2180      	movs	r1, #128	; 0x80
    12e4:	4c13      	ldr	r4, [pc, #76]	; (1334 <sd_decode_csd+0xe0>)
    12e6:	47a0      	blx	r4
    12e8:	0003      	movs	r3, r0
    12ea:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    12ec:	4b10      	ldr	r3, [pc, #64]	; (1330 <sd_decode_csd+0xdc>)
    12ee:	681b      	ldr	r3, [r3, #0]
    12f0:	330e      	adds	r3, #14
    12f2:	0018      	movs	r0, r3
    12f4:	2303      	movs	r3, #3
    12f6:	222f      	movs	r2, #47	; 0x2f
    12f8:	2180      	movs	r1, #128	; 0x80
    12fa:	4d0e      	ldr	r5, [pc, #56]	; (1334 <sd_decode_csd+0xe0>)
    12fc:	47a8      	blx	r5
    12fe:	0003      	movs	r3, r0
    1300:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    1302:	409c      	lsls	r4, r3
    1304:	0023      	movs	r3, r4
    1306:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    1308:	4b09      	ldr	r3, [pc, #36]	; (1330 <sd_decode_csd+0xdc>)
    130a:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    130c:	4b08      	ldr	r3, [pc, #32]	; (1330 <sd_decode_csd+0xdc>)
    130e:	681b      	ldr	r3, [r3, #0]
    1310:	330e      	adds	r3, #14
    1312:	0018      	movs	r0, r3
    1314:	2304      	movs	r3, #4
    1316:	2250      	movs	r2, #80	; 0x50
    1318:	2180      	movs	r1, #128	; 0x80
    131a:	4d06      	ldr	r5, [pc, #24]	; (1334 <sd_decode_csd+0xe0>)
    131c:	47a8      	blx	r5
    131e:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    1320:	683b      	ldr	r3, [r7, #0]
    1322:	4093      	lsls	r3, r2
				/ 1024;
    1324:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    1326:	6063      	str	r3, [r4, #4]
}
    1328:	46c0      	nop			; (mov r8, r8)
    132a:	46bd      	mov	sp, r7
    132c:	b004      	add	sp, #16
    132e:	bdb0      	pop	{r4, r5, r7, pc}
    1330:	200000e0 	.word	0x200000e0
    1334:	00000c21 	.word	0x00000c21
    1338:	0000ae24 	.word	0x0000ae24
    133c:	0000ae40 	.word	0x0000ae40

00001340 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    1340:	b580      	push	{r7, lr}
    1342:	b082      	sub	sp, #8
    1344:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    1346:	4b11      	ldr	r3, [pc, #68]	; (138c <sd_mmc_cmd13+0x4c>)
    1348:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    134a:	4b11      	ldr	r3, [pc, #68]	; (1390 <sd_mmc_cmd13+0x50>)
    134c:	2100      	movs	r1, #0
    134e:	0018      	movs	r0, r3
    1350:	4b10      	ldr	r3, [pc, #64]	; (1394 <sd_mmc_cmd13+0x54>)
    1352:	4798      	blx	r3
    1354:	0003      	movs	r3, r0
    1356:	001a      	movs	r2, r3
    1358:	2301      	movs	r3, #1
    135a:	4053      	eors	r3, r2
    135c:	b2db      	uxtb	r3, r3
    135e:	2b00      	cmp	r3, #0
    1360:	d001      	beq.n	1366 <sd_mmc_cmd13+0x26>
				return false;
    1362:	2300      	movs	r3, #0
    1364:	e00e      	b.n	1384 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    1366:	4b0c      	ldr	r3, [pc, #48]	; (1398 <sd_mmc_cmd13+0x58>)
    1368:	4798      	blx	r3
    136a:	0002      	movs	r2, r0
    136c:	23ff      	movs	r3, #255	; 0xff
    136e:	4013      	ands	r3, r2
    1370:	d006      	beq.n	1380 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    1372:	687b      	ldr	r3, [r7, #4]
    1374:	1e5a      	subs	r2, r3, #1
    1376:	607a      	str	r2, [r7, #4]
    1378:	2b00      	cmp	r3, #0
    137a:	d1e6      	bne.n	134a <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    137c:	2300      	movs	r3, #0
    137e:	e001      	b.n	1384 <sd_mmc_cmd13+0x44>
				break;
    1380:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    1382:	2301      	movs	r3, #1
}
    1384:	0018      	movs	r0, r3
    1386:	46bd      	mov	sp, r7
    1388:	b002      	add	sp, #8
    138a:	bd80      	pop	{r7, pc}
    138c:	00030d40 	.word	0x00030d40
    1390:	00001b0d 	.word	0x00001b0d
    1394:	00002815 	.word	0x00002815
    1398:	00002a55 	.word	0x00002a55

0000139c <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    139c:	b590      	push	{r4, r7, lr}
    139e:	b085      	sub	sp, #20
    13a0:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    13a2:	4b38      	ldr	r3, [pc, #224]	; (1484 <sd_acmd51+0xe8>)
    13a4:	681b      	ldr	r3, [r3, #0]
    13a6:	891b      	ldrh	r3, [r3, #8]
    13a8:	041b      	lsls	r3, r3, #16
    13aa:	4a37      	ldr	r2, [pc, #220]	; (1488 <sd_acmd51+0xec>)
    13ac:	0019      	movs	r1, r3
    13ae:	0010      	movs	r0, r2
    13b0:	4b36      	ldr	r3, [pc, #216]	; (148c <sd_acmd51+0xf0>)
    13b2:	4798      	blx	r3
    13b4:	0003      	movs	r3, r0
    13b6:	001a      	movs	r2, r3
    13b8:	2301      	movs	r3, #1
    13ba:	4053      	eors	r3, r2
    13bc:	b2db      	uxtb	r3, r3
    13be:	2b00      	cmp	r3, #0
    13c0:	d001      	beq.n	13c6 <sd_acmd51+0x2a>
		return false;
    13c2:	2300      	movs	r3, #0
    13c4:	e059      	b.n	147a <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    13c6:	4832      	ldr	r0, [pc, #200]	; (1490 <sd_acmd51+0xf4>)
    13c8:	2301      	movs	r3, #1
    13ca:	9300      	str	r3, [sp, #0]
    13cc:	2301      	movs	r3, #1
    13ce:	2208      	movs	r2, #8
    13d0:	2100      	movs	r1, #0
    13d2:	4c30      	ldr	r4, [pc, #192]	; (1494 <sd_acmd51+0xf8>)
    13d4:	47a0      	blx	r4
    13d6:	0003      	movs	r3, r0
    13d8:	001a      	movs	r2, r3
    13da:	2301      	movs	r3, #1
    13dc:	4053      	eors	r3, r2
    13de:	b2db      	uxtb	r3, r3
    13e0:	2b00      	cmp	r3, #0
    13e2:	d001      	beq.n	13e8 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    13e4:	2300      	movs	r3, #0
    13e6:	e048      	b.n	147a <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    13e8:	003b      	movs	r3, r7
    13ea:	2101      	movs	r1, #1
    13ec:	0018      	movs	r0, r3
    13ee:	4b2a      	ldr	r3, [pc, #168]	; (1498 <sd_acmd51+0xfc>)
    13f0:	4798      	blx	r3
    13f2:	0003      	movs	r3, r0
    13f4:	001a      	movs	r2, r3
    13f6:	2301      	movs	r3, #1
    13f8:	4053      	eors	r3, r2
    13fa:	b2db      	uxtb	r3, r3
    13fc:	2b00      	cmp	r3, #0
    13fe:	d001      	beq.n	1404 <sd_acmd51+0x68>
		return false;
    1400:	2300      	movs	r3, #0
    1402:	e03a      	b.n	147a <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    1404:	4b25      	ldr	r3, [pc, #148]	; (149c <sd_acmd51+0x100>)
    1406:	4798      	blx	r3
    1408:	0003      	movs	r3, r0
    140a:	001a      	movs	r2, r3
    140c:	2301      	movs	r3, #1
    140e:	4053      	eors	r3, r2
    1410:	b2db      	uxtb	r3, r3
    1412:	2b00      	cmp	r3, #0
    1414:	d001      	beq.n	141a <sd_acmd51+0x7e>
		return false;
    1416:	2300      	movs	r3, #0
    1418:	e02f      	b.n	147a <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    141a:	0038      	movs	r0, r7
    141c:	2304      	movs	r3, #4
    141e:	2238      	movs	r2, #56	; 0x38
    1420:	2140      	movs	r1, #64	; 0x40
    1422:	4c1f      	ldr	r4, [pc, #124]	; (14a0 <sd_acmd51+0x104>)
    1424:	47a0      	blx	r4
    1426:	0003      	movs	r3, r0
    1428:	2b01      	cmp	r3, #1
    142a:	d008      	beq.n	143e <sd_acmd51+0xa2>
    142c:	d302      	bcc.n	1434 <sd_acmd51+0x98>
    142e:	2b02      	cmp	r3, #2
    1430:	d00a      	beq.n	1448 <sd_acmd51+0xac>
    1432:	e01c      	b.n	146e <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    1434:	4b13      	ldr	r3, [pc, #76]	; (1484 <sd_acmd51+0xe8>)
    1436:	681b      	ldr	r3, [r3, #0]
    1438:	2210      	movs	r2, #16
    143a:	731a      	strb	r2, [r3, #12]
		break;
    143c:	e01c      	b.n	1478 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    143e:	4b11      	ldr	r3, [pc, #68]	; (1484 <sd_acmd51+0xe8>)
    1440:	681b      	ldr	r3, [r3, #0]
    1442:	221a      	movs	r2, #26
    1444:	731a      	strb	r2, [r3, #12]
		break;
    1446:	e017      	b.n	1478 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    1448:	0038      	movs	r0, r7
    144a:	2301      	movs	r3, #1
    144c:	222f      	movs	r2, #47	; 0x2f
    144e:	2140      	movs	r1, #64	; 0x40
    1450:	4c13      	ldr	r4, [pc, #76]	; (14a0 <sd_acmd51+0x104>)
    1452:	47a0      	blx	r4
    1454:	0003      	movs	r3, r0
    1456:	2b01      	cmp	r3, #1
    1458:	d104      	bne.n	1464 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    145a:	4b0a      	ldr	r3, [pc, #40]	; (1484 <sd_acmd51+0xe8>)
    145c:	681b      	ldr	r3, [r3, #0]
    145e:	2230      	movs	r2, #48	; 0x30
    1460:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    1462:	e009      	b.n	1478 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    1464:	4b07      	ldr	r3, [pc, #28]	; (1484 <sd_acmd51+0xe8>)
    1466:	681b      	ldr	r3, [r3, #0]
    1468:	2220      	movs	r2, #32
    146a:	731a      	strb	r2, [r3, #12]
		break;
    146c:	e004      	b.n	1478 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    146e:	4b05      	ldr	r3, [pc, #20]	; (1484 <sd_acmd51+0xe8>)
    1470:	681b      	ldr	r3, [r3, #0]
    1472:	2210      	movs	r2, #16
    1474:	731a      	strb	r2, [r3, #12]
		break;
    1476:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    1478:	2301      	movs	r3, #1
}
    147a:	0018      	movs	r0, r3
    147c:	46bd      	mov	sp, r7
    147e:	b003      	add	sp, #12
    1480:	bd90      	pop	{r4, r7, pc}
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	200000e0 	.word	0x200000e0
    1488:	00001137 	.word	0x00001137
    148c:	00002815 	.word	0x00002815
    1490:	00081133 	.word	0x00081133
    1494:	0000283d 	.word	0x0000283d
    1498:	00002b0d 	.word	0x00002b0d
    149c:	00002bb1 	.word	0x00002bb1
    14a0:	00000c21 	.word	0x00000c21

000014a4 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    14a4:	b580      	push	{r7, lr}
    14a6:	b082      	sub	sp, #8
    14a8:	af00      	add	r7, sp, #0
    14aa:	0002      	movs	r2, r0
    14ac:	1dfb      	adds	r3, r7, #7
    14ae:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    14b0:	1dfb      	adds	r3, r7, #7
    14b2:	781b      	ldrb	r3, [r3, #0]
    14b4:	2b00      	cmp	r3, #0
    14b6:	d001      	beq.n	14bc <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    14b8:	2304      	movs	r3, #4
    14ba:	e047      	b.n	154c <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    14bc:	1dfb      	adds	r3, r7, #7
    14be:	781b      	ldrb	r3, [r3, #0]
    14c0:	4a24      	ldr	r2, [pc, #144]	; (1554 <sd_mmc_select_slot+0xb0>)
    14c2:	015b      	lsls	r3, r3, #5
    14c4:	18d3      	adds	r3, r2, r3
    14c6:	330a      	adds	r3, #10
    14c8:	781b      	ldrb	r3, [r3, #0]
    14ca:	2b04      	cmp	r3, #4
    14cc:	d008      	beq.n	14e0 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    14ce:	1dfb      	adds	r3, r7, #7
    14d0:	781b      	ldrb	r3, [r3, #0]
    14d2:	4a20      	ldr	r2, [pc, #128]	; (1554 <sd_mmc_select_slot+0xb0>)
    14d4:	015b      	lsls	r3, r3, #5
    14d6:	18d3      	adds	r3, r2, r3
    14d8:	330a      	adds	r3, #10
    14da:	781b      	ldrb	r3, [r3, #0]
    14dc:	2b03      	cmp	r3, #3
    14de:	d11d      	bne.n	151c <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    14e0:	1dfb      	adds	r3, r7, #7
    14e2:	781b      	ldrb	r3, [r3, #0]
    14e4:	4a1b      	ldr	r2, [pc, #108]	; (1554 <sd_mmc_select_slot+0xb0>)
    14e6:	015b      	lsls	r3, r3, #5
    14e8:	18d3      	adds	r3, r2, r3
    14ea:	330a      	adds	r3, #10
    14ec:	2202      	movs	r2, #2
    14ee:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    14f0:	1dfb      	adds	r3, r7, #7
    14f2:	781a      	ldrb	r2, [r3, #0]
    14f4:	4b17      	ldr	r3, [pc, #92]	; (1554 <sd_mmc_select_slot+0xb0>)
    14f6:	0152      	lsls	r2, r2, #5
    14f8:	4917      	ldr	r1, [pc, #92]	; (1558 <sd_mmc_select_slot+0xb4>)
    14fa:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    14fc:	1dfb      	adds	r3, r7, #7
    14fe:	781b      	ldrb	r3, [r3, #0]
    1500:	4a14      	ldr	r2, [pc, #80]	; (1554 <sd_mmc_select_slot+0xb0>)
    1502:	015b      	lsls	r3, r3, #5
    1504:	18d3      	adds	r3, r2, r3
    1506:	330d      	adds	r3, #13
    1508:	2201      	movs	r2, #1
    150a:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    150c:	1dfb      	adds	r3, r7, #7
    150e:	781b      	ldrb	r3, [r3, #0]
    1510:	4a10      	ldr	r2, [pc, #64]	; (1554 <sd_mmc_select_slot+0xb0>)
    1512:	015b      	lsls	r3, r3, #5
    1514:	18d3      	adds	r3, r2, r3
    1516:	331e      	adds	r3, #30
    1518:	2200      	movs	r2, #0
    151a:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    151c:	4b0f      	ldr	r3, [pc, #60]	; (155c <sd_mmc_select_slot+0xb8>)
    151e:	1dfa      	adds	r2, r7, #7
    1520:	7812      	ldrb	r2, [r2, #0]
    1522:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    1524:	1dfb      	adds	r3, r7, #7
    1526:	781b      	ldrb	r3, [r3, #0]
    1528:	015a      	lsls	r2, r3, #5
    152a:	4b0a      	ldr	r3, [pc, #40]	; (1554 <sd_mmc_select_slot+0xb0>)
    152c:	18d2      	adds	r2, r2, r3
    152e:	4b0c      	ldr	r3, [pc, #48]	; (1560 <sd_mmc_select_slot+0xbc>)
    1530:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    1532:	4b0c      	ldr	r3, [pc, #48]	; (1564 <sd_mmc_select_slot+0xc0>)
    1534:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    1536:	1dfb      	adds	r3, r7, #7
    1538:	781b      	ldrb	r3, [r3, #0]
    153a:	4a06      	ldr	r2, [pc, #24]	; (1554 <sd_mmc_select_slot+0xb0>)
    153c:	015b      	lsls	r3, r3, #5
    153e:	18d3      	adds	r3, r2, r3
    1540:	330a      	adds	r3, #10
    1542:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    1544:	3b02      	subs	r3, #2
    1546:	425a      	negs	r2, r3
    1548:	4153      	adcs	r3, r2
    154a:	b2db      	uxtb	r3, r3
}
    154c:	0018      	movs	r0, r3
    154e:	46bd      	mov	sp, r7
    1550:	b002      	add	sp, #8
    1552:	bd80      	pop	{r7, pc}
    1554:	200000bc 	.word	0x200000bc
    1558:	00061a80 	.word	0x00061a80
    155c:	200000dc 	.word	0x200000dc
    1560:	200000e0 	.word	0x200000e0
    1564:	00001569 	.word	0x00001569

00001568 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    1568:	b5b0      	push	{r4, r5, r7, lr}
    156a:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    156c:	4b09      	ldr	r3, [pc, #36]	; (1594 <sd_mmc_configure_slot+0x2c>)
    156e:	7818      	ldrb	r0, [r3, #0]
    1570:	4b09      	ldr	r3, [pc, #36]	; (1598 <sd_mmc_configure_slot+0x30>)
    1572:	681b      	ldr	r3, [r3, #0]
    1574:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    1576:	4b08      	ldr	r3, [pc, #32]	; (1598 <sd_mmc_configure_slot+0x30>)
    1578:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    157a:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    157c:	4b06      	ldr	r3, [pc, #24]	; (1598 <sd_mmc_configure_slot+0x30>)
    157e:	681b      	ldr	r3, [r3, #0]
    1580:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1582:	1e5c      	subs	r4, r3, #1
    1584:	41a3      	sbcs	r3, r4
    1586:	b2db      	uxtb	r3, r3
    1588:	4c04      	ldr	r4, [pc, #16]	; (159c <sd_mmc_configure_slot+0x34>)
    158a:	47a0      	blx	r4
}
    158c:	46c0      	nop			; (mov r8, r8)
    158e:	46bd      	mov	sp, r7
    1590:	bdb0      	pop	{r4, r5, r7, pc}
    1592:	46c0      	nop			; (mov r8, r8)
    1594:	200000dc 	.word	0x200000dc
    1598:	200000e0 	.word	0x200000e0
    159c:	000026fd 	.word	0x000026fd

000015a0 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    15a0:	b580      	push	{r7, lr}
    15a2:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    15a4:	4b05      	ldr	r3, [pc, #20]	; (15bc <sd_mmc_deselect_slot+0x1c>)
    15a6:	781b      	ldrb	r3, [r3, #0]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d104      	bne.n	15b6 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    15ac:	4b03      	ldr	r3, [pc, #12]	; (15bc <sd_mmc_deselect_slot+0x1c>)
    15ae:	781b      	ldrb	r3, [r3, #0]
    15b0:	0018      	movs	r0, r3
    15b2:	4b03      	ldr	r3, [pc, #12]	; (15c0 <sd_mmc_deselect_slot+0x20>)
    15b4:	4798      	blx	r3
	}
}
    15b6:	46c0      	nop			; (mov r8, r8)
    15b8:	46bd      	mov	sp, r7
    15ba:	bd80      	pop	{r7, pc}
    15bc:	200000dc 	.word	0x200000dc
    15c0:	00002785 	.word	0x00002785

000015c4 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    15c4:	b580      	push	{r7, lr}
    15c6:	b082      	sub	sp, #8
    15c8:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    15ca:	1dfb      	adds	r3, r7, #7
    15cc:	2200      	movs	r2, #0
    15ce:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    15d0:	4b59      	ldr	r3, [pc, #356]	; (1738 <sd_mmc_spi_card_init+0x174>)
    15d2:	681b      	ldr	r3, [r3, #0]
    15d4:	2201      	movs	r2, #1
    15d6:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    15d8:	4b57      	ldr	r3, [pc, #348]	; (1738 <sd_mmc_spi_card_init+0x174>)
    15da:	681b      	ldr	r3, [r3, #0]
    15dc:	2200      	movs	r2, #0
    15de:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    15e0:	4b55      	ldr	r3, [pc, #340]	; (1738 <sd_mmc_spi_card_init+0x174>)
    15e2:	681b      	ldr	r3, [r3, #0]
    15e4:	2200      	movs	r2, #0
    15e6:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    15e8:	4b54      	ldr	r3, [pc, #336]	; (173c <sd_mmc_spi_card_init+0x178>)
    15ea:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    15ec:	2388      	movs	r3, #136	; 0x88
    15ee:	015b      	lsls	r3, r3, #5
    15f0:	2100      	movs	r1, #0
    15f2:	0018      	movs	r0, r3
    15f4:	4b52      	ldr	r3, [pc, #328]	; (1740 <sd_mmc_spi_card_init+0x17c>)
    15f6:	4798      	blx	r3
    15f8:	0003      	movs	r3, r0
    15fa:	001a      	movs	r2, r3
    15fc:	2301      	movs	r3, #1
    15fe:	4053      	eors	r3, r2
    1600:	b2db      	uxtb	r3, r3
    1602:	2b00      	cmp	r3, #0
    1604:	d001      	beq.n	160a <sd_mmc_spi_card_init+0x46>
		return false;
    1606:	2300      	movs	r3, #0
    1608:	e092      	b.n	1730 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    160a:	1dfb      	adds	r3, r7, #7
    160c:	0018      	movs	r0, r3
    160e:	4b4d      	ldr	r3, [pc, #308]	; (1744 <sd_mmc_spi_card_init+0x180>)
    1610:	4798      	blx	r3
    1612:	0003      	movs	r3, r0
    1614:	001a      	movs	r2, r3
    1616:	2301      	movs	r3, #1
    1618:	4053      	eors	r3, r2
    161a:	b2db      	uxtb	r3, r3
    161c:	2b00      	cmp	r3, #0
    161e:	d001      	beq.n	1624 <sd_mmc_spi_card_init+0x60>
		return false;
    1620:	2300      	movs	r3, #0
    1622:	e085      	b.n	1730 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    1624:	4b48      	ldr	r3, [pc, #288]	; (1748 <sd_mmc_spi_card_init+0x184>)
    1626:	4798      	blx	r3
    1628:	0003      	movs	r3, r0
    162a:	001a      	movs	r2, r3
    162c:	2301      	movs	r3, #1
    162e:	4053      	eors	r3, r2
    1630:	b2db      	uxtb	r3, r3
    1632:	2b00      	cmp	r3, #0
    1634:	d001      	beq.n	163a <sd_mmc_spi_card_init+0x76>
		return false;
    1636:	2300      	movs	r3, #0
    1638:	e07a      	b.n	1730 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    163a:	4b3f      	ldr	r3, [pc, #252]	; (1738 <sd_mmc_spi_card_init+0x174>)
    163c:	681b      	ldr	r3, [r3, #0]
    163e:	7adb      	ldrb	r3, [r3, #11]
    1640:	001a      	movs	r2, r3
    1642:	2301      	movs	r3, #1
    1644:	4013      	ands	r3, r2
    1646:	d021      	beq.n	168c <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    1648:	1dfb      	adds	r3, r7, #7
    164a:	781b      	ldrb	r3, [r3, #0]
    164c:	0018      	movs	r0, r3
    164e:	4b3f      	ldr	r3, [pc, #252]	; (174c <sd_mmc_spi_card_init+0x188>)
    1650:	4798      	blx	r3
    1652:	0003      	movs	r3, r0
    1654:	001a      	movs	r2, r3
    1656:	2301      	movs	r3, #1
    1658:	4053      	eors	r3, r2
    165a:	b2db      	uxtb	r3, r3
    165c:	2b00      	cmp	r3, #0
    165e:	d007      	beq.n	1670 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    1660:	4b35      	ldr	r3, [pc, #212]	; (1738 <sd_mmc_spi_card_init+0x174>)
    1662:	681b      	ldr	r3, [r3, #0]
    1664:	2202      	movs	r2, #2
    1666:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    1668:	4b39      	ldr	r3, [pc, #228]	; (1750 <sd_mmc_spi_card_init+0x18c>)
    166a:	4798      	blx	r3
    166c:	0003      	movs	r3, r0
    166e:	e05f      	b.n	1730 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1670:	4b38      	ldr	r3, [pc, #224]	; (1754 <sd_mmc_spi_card_init+0x190>)
    1672:	2100      	movs	r1, #0
    1674:	0018      	movs	r0, r3
    1676:	4b32      	ldr	r3, [pc, #200]	; (1740 <sd_mmc_spi_card_init+0x17c>)
    1678:	4798      	blx	r3
    167a:	0003      	movs	r3, r0
    167c:	001a      	movs	r2, r3
    167e:	2301      	movs	r3, #1
    1680:	4053      	eors	r3, r2
    1682:	b2db      	uxtb	r3, r3
    1684:	2b00      	cmp	r3, #0
    1686:	d001      	beq.n	168c <sd_mmc_spi_card_init+0xc8>
			return false;
    1688:	2300      	movs	r3, #0
    168a:	e051      	b.n	1730 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    168c:	4b2a      	ldr	r3, [pc, #168]	; (1738 <sd_mmc_spi_card_init+0x174>)
    168e:	681b      	ldr	r3, [r3, #0]
    1690:	7adb      	ldrb	r3, [r3, #11]
    1692:	001a      	movs	r2, r3
    1694:	2301      	movs	r3, #1
    1696:	4013      	ands	r3, r2
    1698:	d017      	beq.n	16ca <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    169a:	4b2f      	ldr	r3, [pc, #188]	; (1758 <sd_mmc_spi_card_init+0x194>)
    169c:	4798      	blx	r3
    169e:	0003      	movs	r3, r0
    16a0:	001a      	movs	r2, r3
    16a2:	2301      	movs	r3, #1
    16a4:	4053      	eors	r3, r2
    16a6:	b2db      	uxtb	r3, r3
    16a8:	2b00      	cmp	r3, #0
    16aa:	d001      	beq.n	16b0 <sd_mmc_spi_card_init+0xec>
			return false;
    16ac:	2300      	movs	r3, #0
    16ae:	e03f      	b.n	1730 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    16b0:	4b2a      	ldr	r3, [pc, #168]	; (175c <sd_mmc_spi_card_init+0x198>)
    16b2:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    16b4:	4b2a      	ldr	r3, [pc, #168]	; (1760 <sd_mmc_spi_card_init+0x19c>)
    16b6:	4798      	blx	r3
    16b8:	0003      	movs	r3, r0
    16ba:	001a      	movs	r2, r3
    16bc:	2301      	movs	r3, #1
    16be:	4053      	eors	r3, r2
    16c0:	b2db      	uxtb	r3, r3
    16c2:	2b00      	cmp	r3, #0
    16c4:	d001      	beq.n	16ca <sd_mmc_spi_card_init+0x106>
			return false;
    16c6:	2300      	movs	r3, #0
    16c8:	e032      	b.n	1730 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    16ca:	4b1b      	ldr	r3, [pc, #108]	; (1738 <sd_mmc_spi_card_init+0x174>)
    16cc:	681b      	ldr	r3, [r3, #0]
    16ce:	7adb      	ldrb	r3, [r3, #11]
    16d0:	001a      	movs	r2, r3
    16d2:	2301      	movs	r3, #1
    16d4:	4013      	ands	r3, r2
    16d6:	d016      	beq.n	1706 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    16d8:	4b17      	ldr	r3, [pc, #92]	; (1738 <sd_mmc_spi_card_init+0x174>)
    16da:	681b      	ldr	r3, [r3, #0]
    16dc:	7adb      	ldrb	r3, [r3, #11]
    16de:	001a      	movs	r2, r3
    16e0:	2308      	movs	r3, #8
    16e2:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    16e4:	d10f      	bne.n	1706 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    16e6:	2380      	movs	r3, #128	; 0x80
    16e8:	009b      	lsls	r3, r3, #2
    16ea:	4a1e      	ldr	r2, [pc, #120]	; (1764 <sd_mmc_spi_card_init+0x1a0>)
    16ec:	0019      	movs	r1, r3
    16ee:	0010      	movs	r0, r2
    16f0:	4b13      	ldr	r3, [pc, #76]	; (1740 <sd_mmc_spi_card_init+0x17c>)
    16f2:	4798      	blx	r3
    16f4:	0003      	movs	r3, r0
    16f6:	001a      	movs	r2, r3
    16f8:	2301      	movs	r3, #1
    16fa:	4053      	eors	r3, r2
    16fc:	b2db      	uxtb	r3, r3
    16fe:	2b00      	cmp	r3, #0
    1700:	d001      	beq.n	1706 <sd_mmc_spi_card_init+0x142>
			return false;
    1702:	2300      	movs	r3, #0
    1704:	e014      	b.n	1730 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1706:	4b0c      	ldr	r3, [pc, #48]	; (1738 <sd_mmc_spi_card_init+0x174>)
    1708:	681b      	ldr	r3, [r3, #0]
    170a:	7adb      	ldrb	r3, [r3, #11]
    170c:	001a      	movs	r2, r3
    170e:	2301      	movs	r3, #1
    1710:	4013      	ands	r3, r2
    1712:	d00a      	beq.n	172a <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    1714:	4b14      	ldr	r3, [pc, #80]	; (1768 <sd_mmc_spi_card_init+0x1a4>)
    1716:	4798      	blx	r3
    1718:	0003      	movs	r3, r0
    171a:	001a      	movs	r2, r3
    171c:	2301      	movs	r3, #1
    171e:	4053      	eors	r3, r2
    1720:	b2db      	uxtb	r3, r3
    1722:	2b00      	cmp	r3, #0
    1724:	d001      	beq.n	172a <sd_mmc_spi_card_init+0x166>
			return false;
    1726:	2300      	movs	r3, #0
    1728:	e002      	b.n	1730 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    172a:	4b10      	ldr	r3, [pc, #64]	; (176c <sd_mmc_spi_card_init+0x1a8>)
    172c:	4798      	blx	r3
	return true;
    172e:	2301      	movs	r3, #1
}
    1730:	0018      	movs	r0, r3
    1732:	46bd      	mov	sp, r7
    1734:	b002      	add	sp, #8
    1736:	bd80      	pop	{r7, pc}
    1738:	200000e0 	.word	0x200000e0
    173c:	000027c9 	.word	0x000027c9
    1740:	00002815 	.word	0x00002815
    1744:	00000f19 	.word	0x00000f19
    1748:	00000f0d 	.word	0x00000f0d
    174c:	00000e29 	.word	0x00000e29
    1750:	00001771 	.word	0x00001771
    1754:	0000113b 	.word	0x0000113b
    1758:	000010b5 	.word	0x000010b5
    175c:	00001255 	.word	0x00001255
    1760:	0000139d 	.word	0x0000139d
    1764:	00001110 	.word	0x00001110
    1768:	00001341 	.word	0x00001341
    176c:	00001569 	.word	0x00001569

00001770 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    1770:	b580      	push	{r7, lr}
    1772:	b082      	sub	sp, #8
    1774:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1776:	2388      	movs	r3, #136	; 0x88
    1778:	015b      	lsls	r3, r3, #5
    177a:	2100      	movs	r1, #0
    177c:	0018      	movs	r0, r3
    177e:	4b32      	ldr	r3, [pc, #200]	; (1848 <sd_mmc_spi_install_mmc+0xd8>)
    1780:	4798      	blx	r3
    1782:	0003      	movs	r3, r0
    1784:	001a      	movs	r2, r3
    1786:	2301      	movs	r3, #1
    1788:	4053      	eors	r3, r2
    178a:	b2db      	uxtb	r3, r3
    178c:	2b00      	cmp	r3, #0
    178e:	d001      	beq.n	1794 <sd_mmc_spi_install_mmc+0x24>
		return false;
    1790:	2300      	movs	r3, #0
    1792:	e055      	b.n	1840 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    1794:	4b2d      	ldr	r3, [pc, #180]	; (184c <sd_mmc_spi_install_mmc+0xdc>)
    1796:	4798      	blx	r3
    1798:	0003      	movs	r3, r0
    179a:	001a      	movs	r2, r3
    179c:	2301      	movs	r3, #1
    179e:	4053      	eors	r3, r2
    17a0:	b2db      	uxtb	r3, r3
    17a2:	2b00      	cmp	r3, #0
    17a4:	d001      	beq.n	17aa <sd_mmc_spi_install_mmc+0x3a>
		return false;
    17a6:	2300      	movs	r3, #0
    17a8:	e04a      	b.n	1840 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    17aa:	4b29      	ldr	r3, [pc, #164]	; (1850 <sd_mmc_spi_install_mmc+0xe0>)
    17ac:	2100      	movs	r1, #0
    17ae:	0018      	movs	r0, r3
    17b0:	4b25      	ldr	r3, [pc, #148]	; (1848 <sd_mmc_spi_install_mmc+0xd8>)
    17b2:	4798      	blx	r3
    17b4:	0003      	movs	r3, r0
    17b6:	001a      	movs	r2, r3
    17b8:	2301      	movs	r3, #1
    17ba:	4053      	eors	r3, r2
    17bc:	b2db      	uxtb	r3, r3
    17be:	2b00      	cmp	r3, #0
    17c0:	d001      	beq.n	17c6 <sd_mmc_spi_install_mmc+0x56>
		return false;
    17c2:	2300      	movs	r3, #0
    17c4:	e03c      	b.n	1840 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    17c6:	4b23      	ldr	r3, [pc, #140]	; (1854 <sd_mmc_spi_install_mmc+0xe4>)
    17c8:	4798      	blx	r3
    17ca:	0003      	movs	r3, r0
    17cc:	001a      	movs	r2, r3
    17ce:	2301      	movs	r3, #1
    17d0:	4053      	eors	r3, r2
    17d2:	b2db      	uxtb	r3, r3
    17d4:	2b00      	cmp	r3, #0
    17d6:	d001      	beq.n	17dc <sd_mmc_spi_install_mmc+0x6c>
		return false;
    17d8:	2300      	movs	r3, #0
    17da:	e031      	b.n	1840 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    17dc:	4b1e      	ldr	r3, [pc, #120]	; (1858 <sd_mmc_spi_install_mmc+0xe8>)
    17de:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    17e0:	4b1e      	ldr	r3, [pc, #120]	; (185c <sd_mmc_spi_install_mmc+0xec>)
    17e2:	681b      	ldr	r3, [r3, #0]
    17e4:	7b1b      	ldrb	r3, [r3, #12]
    17e6:	2b3f      	cmp	r3, #63	; 0x3f
    17e8:	d90c      	bls.n	1804 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    17ea:	1dfb      	adds	r3, r7, #7
    17ec:	0018      	movs	r0, r3
    17ee:	4b1c      	ldr	r3, [pc, #112]	; (1860 <sd_mmc_spi_install_mmc+0xf0>)
    17f0:	4798      	blx	r3
    17f2:	0003      	movs	r3, r0
    17f4:	001a      	movs	r2, r3
    17f6:	2301      	movs	r3, #1
    17f8:	4053      	eors	r3, r2
    17fa:	b2db      	uxtb	r3, r3
    17fc:	2b00      	cmp	r3, #0
    17fe:	d001      	beq.n	1804 <sd_mmc_spi_install_mmc+0x94>
			return false;
    1800:	2300      	movs	r3, #0
    1802:	e01d      	b.n	1840 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1804:	2380      	movs	r3, #128	; 0x80
    1806:	009b      	lsls	r3, r3, #2
    1808:	4a16      	ldr	r2, [pc, #88]	; (1864 <sd_mmc_spi_install_mmc+0xf4>)
    180a:	0019      	movs	r1, r3
    180c:	0010      	movs	r0, r2
    180e:	4b0e      	ldr	r3, [pc, #56]	; (1848 <sd_mmc_spi_install_mmc+0xd8>)
    1810:	4798      	blx	r3
    1812:	0003      	movs	r3, r0
    1814:	001a      	movs	r2, r3
    1816:	2301      	movs	r3, #1
    1818:	4053      	eors	r3, r2
    181a:	b2db      	uxtb	r3, r3
    181c:	2b00      	cmp	r3, #0
    181e:	d001      	beq.n	1824 <sd_mmc_spi_install_mmc+0xb4>
		return false;
    1820:	2300      	movs	r3, #0
    1822:	e00d      	b.n	1840 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    1824:	4b10      	ldr	r3, [pc, #64]	; (1868 <sd_mmc_spi_install_mmc+0xf8>)
    1826:	4798      	blx	r3
    1828:	0003      	movs	r3, r0
    182a:	001a      	movs	r2, r3
    182c:	2301      	movs	r3, #1
    182e:	4053      	eors	r3, r2
    1830:	b2db      	uxtb	r3, r3
    1832:	2b00      	cmp	r3, #0
    1834:	d001      	beq.n	183a <sd_mmc_spi_install_mmc+0xca>
		return false;
    1836:	2300      	movs	r3, #0
    1838:	e002      	b.n	1840 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    183a:	4b0c      	ldr	r3, [pc, #48]	; (186c <sd_mmc_spi_install_mmc+0xfc>)
    183c:	4798      	blx	r3
	return true;
    183e:	2301      	movs	r3, #1
}
    1840:	0018      	movs	r0, r3
    1842:	46bd      	mov	sp, r7
    1844:	b002      	add	sp, #8
    1846:	bd80      	pop	{r7, pc}
    1848:	00002815 	.word	0x00002815
    184c:	00000d7d 	.word	0x00000d7d
    1850:	0000113b 	.word	0x0000113b
    1854:	000010b5 	.word	0x000010b5
    1858:	00001125 	.word	0x00001125
    185c:	200000e0 	.word	0x200000e0
    1860:	00000f89 	.word	0x00000f89
    1864:	00001110 	.word	0x00001110
    1868:	00001341 	.word	0x00001341
    186c:	00001569 	.word	0x00001569

00001870 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
    1870:	b580      	push	{r7, lr}
    1872:	b082      	sub	sp, #8
    1874:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1876:	1dfb      	adds	r3, r7, #7
    1878:	2200      	movs	r2, #0
    187a:	701a      	strb	r2, [r3, #0]
    187c:	e00c      	b.n	1898 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    187e:	1dfb      	adds	r3, r7, #7
    1880:	781b      	ldrb	r3, [r3, #0]
    1882:	4a0c      	ldr	r2, [pc, #48]	; (18b4 <sd_mmc_init+0x44>)
    1884:	015b      	lsls	r3, r3, #5
    1886:	18d3      	adds	r3, r2, r3
    1888:	330a      	adds	r3, #10
    188a:	2204      	movs	r2, #4
    188c:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    188e:	1dfb      	adds	r3, r7, #7
    1890:	781a      	ldrb	r2, [r3, #0]
    1892:	1dfb      	adds	r3, r7, #7
    1894:	3201      	adds	r2, #1
    1896:	701a      	strb	r2, [r3, #0]
    1898:	1dfb      	adds	r3, r7, #7
    189a:	781b      	ldrb	r3, [r3, #0]
    189c:	2b00      	cmp	r3, #0
    189e:	d0ee      	beq.n	187e <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    18a0:	4b05      	ldr	r3, [pc, #20]	; (18b8 <sd_mmc_init+0x48>)
    18a2:	22ff      	movs	r2, #255	; 0xff
    18a4:	701a      	strb	r2, [r3, #0]
	driver_init();
    18a6:	4b05      	ldr	r3, [pc, #20]	; (18bc <sd_mmc_init+0x4c>)
    18a8:	4798      	blx	r3
}
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	46bd      	mov	sp, r7
    18ae:	b002      	add	sp, #8
    18b0:	bd80      	pop	{r7, pc}
    18b2:	46c0      	nop			; (mov r8, r8)
    18b4:	200000bc 	.word	0x200000bc
    18b8:	200000dc 	.word	0x200000dc
    18bc:	00002635 	.word	0x00002635

000018c0 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    18c0:	b590      	push	{r4, r7, lr}
    18c2:	b085      	sub	sp, #20
    18c4:	af00      	add	r7, sp, #0
    18c6:	0002      	movs	r2, r0
    18c8:	1dfb      	adds	r3, r7, #7
    18ca:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    18cc:	230f      	movs	r3, #15
    18ce:	18fc      	adds	r4, r7, r3
    18d0:	1dfb      	adds	r3, r7, #7
    18d2:	781b      	ldrb	r3, [r3, #0]
    18d4:	0018      	movs	r0, r3
    18d6:	4b13      	ldr	r3, [pc, #76]	; (1924 <sd_mmc_check+0x64>)
    18d8:	4798      	blx	r3
    18da:	0003      	movs	r3, r0
    18dc:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    18de:	230f      	movs	r3, #15
    18e0:	18fb      	adds	r3, r7, r3
    18e2:	781b      	ldrb	r3, [r3, #0]
    18e4:	2b01      	cmp	r3, #1
    18e6:	d005      	beq.n	18f4 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    18e8:	4b0f      	ldr	r3, [pc, #60]	; (1928 <sd_mmc_check+0x68>)
    18ea:	4798      	blx	r3
		return sd_mmc_err;
    18ec:	230f      	movs	r3, #15
    18ee:	18fb      	adds	r3, r7, r3
    18f0:	781b      	ldrb	r3, [r3, #0]
    18f2:	e012      	b.n	191a <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    18f4:	4b0d      	ldr	r3, [pc, #52]	; (192c <sd_mmc_check+0x6c>)
    18f6:	4798      	blx	r3
    18f8:	1e03      	subs	r3, r0, #0
    18fa:	d007      	beq.n	190c <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    18fc:	4b0c      	ldr	r3, [pc, #48]	; (1930 <sd_mmc_check+0x70>)
    18fe:	681b      	ldr	r3, [r3, #0]
    1900:	2200      	movs	r2, #0
    1902:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    1904:	4b08      	ldr	r3, [pc, #32]	; (1928 <sd_mmc_check+0x68>)
    1906:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    1908:	2301      	movs	r3, #1
    190a:	e006      	b.n	191a <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    190c:	4b08      	ldr	r3, [pc, #32]	; (1930 <sd_mmc_check+0x70>)
    190e:	681b      	ldr	r3, [r3, #0]
    1910:	2203      	movs	r2, #3
    1912:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    1914:	4b04      	ldr	r3, [pc, #16]	; (1928 <sd_mmc_check+0x68>)
    1916:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    1918:	2303      	movs	r3, #3
}
    191a:	0018      	movs	r0, r3
    191c:	46bd      	mov	sp, r7
    191e:	b005      	add	sp, #20
    1920:	bd90      	pop	{r4, r7, pc}
    1922:	46c0      	nop			; (mov r8, r8)
    1924:	000014a5 	.word	0x000014a5
    1928:	000015a1 	.word	0x000015a1
    192c:	000015c5 	.word	0x000015c5
    1930:	200000e0 	.word	0x200000e0

00001934 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    1934:	b580      	push	{r7, lr}
    1936:	b082      	sub	sp, #8
    1938:	af00      	add	r7, sp, #0
    193a:	0002      	movs	r2, r0
    193c:	1dfb      	adds	r3, r7, #7
    193e:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1940:	1dfb      	adds	r3, r7, #7
    1942:	781b      	ldrb	r3, [r3, #0]
    1944:	0018      	movs	r0, r3
    1946:	4b07      	ldr	r3, [pc, #28]	; (1964 <sd_mmc_get_type+0x30>)
    1948:	4798      	blx	r3
    194a:	1e03      	subs	r3, r0, #0
    194c:	d001      	beq.n	1952 <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    194e:	2300      	movs	r3, #0
    1950:	e004      	b.n	195c <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    1952:	4b05      	ldr	r3, [pc, #20]	; (1968 <sd_mmc_get_type+0x34>)
    1954:	4798      	blx	r3
	return sd_mmc_card->type;
    1956:	4b05      	ldr	r3, [pc, #20]	; (196c <sd_mmc_get_type+0x38>)
    1958:	681b      	ldr	r3, [r3, #0]
    195a:	7adb      	ldrb	r3, [r3, #11]
}
    195c:	0018      	movs	r0, r3
    195e:	46bd      	mov	sp, r7
    1960:	b002      	add	sp, #8
    1962:	bd80      	pop	{r7, pc}
    1964:	000014a5 	.word	0x000014a5
    1968:	000015a1 	.word	0x000015a1
    196c:	200000e0 	.word	0x200000e0

00001970 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    1970:	b580      	push	{r7, lr}
    1972:	b082      	sub	sp, #8
    1974:	af00      	add	r7, sp, #0
    1976:	0002      	movs	r2, r0
    1978:	1dfb      	adds	r3, r7, #7
    197a:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    197c:	1dfb      	adds	r3, r7, #7
    197e:	781b      	ldrb	r3, [r3, #0]
    1980:	0018      	movs	r0, r3
    1982:	4b07      	ldr	r3, [pc, #28]	; (19a0 <sd_mmc_get_capacity+0x30>)
    1984:	4798      	blx	r3
    1986:	1e03      	subs	r3, r0, #0
    1988:	d001      	beq.n	198e <sd_mmc_get_capacity+0x1e>
		return 0;
    198a:	2300      	movs	r3, #0
    198c:	e004      	b.n	1998 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    198e:	4b05      	ldr	r3, [pc, #20]	; (19a4 <sd_mmc_get_capacity+0x34>)
    1990:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1992:	4b05      	ldr	r3, [pc, #20]	; (19a8 <sd_mmc_get_capacity+0x38>)
    1994:	681b      	ldr	r3, [r3, #0]
    1996:	685b      	ldr	r3, [r3, #4]
}
    1998:	0018      	movs	r0, r3
    199a:	46bd      	mov	sp, r7
    199c:	b002      	add	sp, #8
    199e:	bd80      	pop	{r7, pc}
    19a0:	000014a5 	.word	0x000014a5
    19a4:	000015a1 	.word	0x000015a1
    19a8:	200000e0 	.word	0x200000e0

000019ac <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    19ac:	b580      	push	{r7, lr}
    19ae:	b082      	sub	sp, #8
    19b0:	af00      	add	r7, sp, #0
    19b2:	0002      	movs	r2, r0
    19b4:	1dfb      	adds	r3, r7, #7
    19b6:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    19b8:	2300      	movs	r3, #0
}
    19ba:	0018      	movs	r0, r3
    19bc:	46bd      	mov	sp, r7
    19be:	b002      	add	sp, #8
    19c0:	bd80      	pop	{r7, pc}
	...

000019c4 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    19c4:	b590      	push	{r4, r7, lr}
    19c6:	b089      	sub	sp, #36	; 0x24
    19c8:	af02      	add	r7, sp, #8
    19ca:	6039      	str	r1, [r7, #0]
    19cc:	0011      	movs	r1, r2
    19ce:	1dfb      	adds	r3, r7, #7
    19d0:	1c02      	adds	r2, r0, #0
    19d2:	701a      	strb	r2, [r3, #0]
    19d4:	1d3b      	adds	r3, r7, #4
    19d6:	1c0a      	adds	r2, r1, #0
    19d8:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    19da:	230f      	movs	r3, #15
    19dc:	18fc      	adds	r4, r7, r3
    19de:	1dfb      	adds	r3, r7, #7
    19e0:	781b      	ldrb	r3, [r3, #0]
    19e2:	0018      	movs	r0, r3
    19e4:	4b29      	ldr	r3, [pc, #164]	; (1a8c <sd_mmc_init_read_blocks+0xc8>)
    19e6:	4798      	blx	r3
    19e8:	0003      	movs	r3, r0
    19ea:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    19ec:	230f      	movs	r3, #15
    19ee:	18fb      	adds	r3, r7, r3
    19f0:	781b      	ldrb	r3, [r3, #0]
    19f2:	2b00      	cmp	r3, #0
    19f4:	d003      	beq.n	19fe <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    19f6:	230f      	movs	r3, #15
    19f8:	18fb      	adds	r3, r7, r3
    19fa:	781b      	ldrb	r3, [r3, #0]
    19fc:	e041      	b.n	1a82 <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    19fe:	4b24      	ldr	r3, [pc, #144]	; (1a90 <sd_mmc_init_read_blocks+0xcc>)
    1a00:	4798      	blx	r3
    1a02:	0003      	movs	r3, r0
    1a04:	001a      	movs	r2, r3
    1a06:	2301      	movs	r3, #1
    1a08:	4053      	eors	r3, r2
    1a0a:	b2db      	uxtb	r3, r3
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	d003      	beq.n	1a18 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    1a10:	4b20      	ldr	r3, [pc, #128]	; (1a94 <sd_mmc_init_read_blocks+0xd0>)
    1a12:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1a14:	2305      	movs	r3, #5
    1a16:	e034      	b.n	1a82 <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
    1a18:	1d3b      	adds	r3, r7, #4
    1a1a:	881b      	ldrh	r3, [r3, #0]
    1a1c:	2b01      	cmp	r3, #1
    1a1e:	d902      	bls.n	1a26 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    1a20:	4b1d      	ldr	r3, [pc, #116]	; (1a98 <sd_mmc_init_read_blocks+0xd4>)
    1a22:	617b      	str	r3, [r7, #20]
    1a24:	e001      	b.n	1a2a <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    1a26:	4b1d      	ldr	r3, [pc, #116]	; (1a9c <sd_mmc_init_read_blocks+0xd8>)
    1a28:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1a2a:	4b1d      	ldr	r3, [pc, #116]	; (1aa0 <sd_mmc_init_read_blocks+0xdc>)
    1a2c:	681b      	ldr	r3, [r3, #0]
    1a2e:	7adb      	ldrb	r3, [r3, #11]
    1a30:	001a      	movs	r2, r3
    1a32:	2308      	movs	r3, #8
    1a34:	4013      	ands	r3, r2
    1a36:	d002      	beq.n	1a3e <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    1a38:	683b      	ldr	r3, [r7, #0]
    1a3a:	613b      	str	r3, [r7, #16]
    1a3c:	e002      	b.n	1a44 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1a3e:	683b      	ldr	r3, [r7, #0]
    1a40:	025b      	lsls	r3, r3, #9
    1a42:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1a44:	1d3b      	adds	r3, r7, #4
    1a46:	881c      	ldrh	r4, [r3, #0]
    1a48:	2380      	movs	r3, #128	; 0x80
    1a4a:	009a      	lsls	r2, r3, #2
    1a4c:	6939      	ldr	r1, [r7, #16]
    1a4e:	6978      	ldr	r0, [r7, #20]
    1a50:	2301      	movs	r3, #1
    1a52:	9300      	str	r3, [sp, #0]
    1a54:	0023      	movs	r3, r4
    1a56:	4c13      	ldr	r4, [pc, #76]	; (1aa4 <sd_mmc_init_read_blocks+0xe0>)
    1a58:	47a0      	blx	r4
    1a5a:	0003      	movs	r3, r0
    1a5c:	001a      	movs	r2, r3
    1a5e:	2301      	movs	r3, #1
    1a60:	4053      	eors	r3, r2
    1a62:	b2db      	uxtb	r3, r3
    1a64:	2b00      	cmp	r3, #0
    1a66:	d003      	beq.n	1a70 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    1a68:	4b0a      	ldr	r3, [pc, #40]	; (1a94 <sd_mmc_init_read_blocks+0xd0>)
    1a6a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1a6c:	2305      	movs	r3, #5
    1a6e:	e008      	b.n	1a82 <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1a70:	4b0d      	ldr	r3, [pc, #52]	; (1aa8 <sd_mmc_init_read_blocks+0xe4>)
    1a72:	1d3a      	adds	r2, r7, #4
    1a74:	8812      	ldrh	r2, [r2, #0]
    1a76:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1a78:	4b0c      	ldr	r3, [pc, #48]	; (1aac <sd_mmc_init_read_blocks+0xe8>)
    1a7a:	1d3a      	adds	r2, r7, #4
    1a7c:	8812      	ldrh	r2, [r2, #0]
    1a7e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1a80:	2300      	movs	r3, #0
}
    1a82:	0018      	movs	r0, r3
    1a84:	46bd      	mov	sp, r7
    1a86:	b007      	add	sp, #28
    1a88:	bd90      	pop	{r4, r7, pc}
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	000014a5 	.word	0x000014a5
    1a90:	00001341 	.word	0x00001341
    1a94:	000015a1 	.word	0x000015a1
    1a98:	00101112 	.word	0x00101112
    1a9c:	00081111 	.word	0x00081111
    1aa0:	200000e0 	.word	0x200000e0
    1aa4:	0000283d 	.word	0x0000283d
    1aa8:	200000e6 	.word	0x200000e6
    1aac:	200000e4 	.word	0x200000e4

00001ab0 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    1ab0:	b580      	push	{r7, lr}
    1ab2:	b082      	sub	sp, #8
    1ab4:	af00      	add	r7, sp, #0
    1ab6:	6078      	str	r0, [r7, #4]
    1ab8:	000a      	movs	r2, r1
    1aba:	1cbb      	adds	r3, r7, #2
    1abc:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    1abe:	1cbb      	adds	r3, r7, #2
    1ac0:	881a      	ldrh	r2, [r3, #0]
    1ac2:	687b      	ldr	r3, [r7, #4]
    1ac4:	0011      	movs	r1, r2
    1ac6:	0018      	movs	r0, r3
    1ac8:	4b0d      	ldr	r3, [pc, #52]	; (1b00 <sd_mmc_start_read_blocks+0x50>)
    1aca:	4798      	blx	r3
    1acc:	0003      	movs	r3, r0
    1ace:	001a      	movs	r2, r3
    1ad0:	2301      	movs	r3, #1
    1ad2:	4053      	eors	r3, r2
    1ad4:	b2db      	uxtb	r3, r3
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d004      	beq.n	1ae4 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    1ada:	4b0a      	ldr	r3, [pc, #40]	; (1b04 <sd_mmc_start_read_blocks+0x54>)
    1adc:	2200      	movs	r2, #0
    1ade:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1ae0:	2305      	movs	r3, #5
    1ae2:	e008      	b.n	1af6 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    1ae4:	4b07      	ldr	r3, [pc, #28]	; (1b04 <sd_mmc_start_read_blocks+0x54>)
    1ae6:	881a      	ldrh	r2, [r3, #0]
    1ae8:	1cbb      	adds	r3, r7, #2
    1aea:	881b      	ldrh	r3, [r3, #0]
    1aec:	1ad3      	subs	r3, r2, r3
    1aee:	b29a      	uxth	r2, r3
    1af0:	4b04      	ldr	r3, [pc, #16]	; (1b04 <sd_mmc_start_read_blocks+0x54>)
    1af2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1af4:	2300      	movs	r3, #0
}
    1af6:	0018      	movs	r0, r3
    1af8:	46bd      	mov	sp, r7
    1afa:	b002      	add	sp, #8
    1afc:	bd80      	pop	{r7, pc}
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	00002b0d 	.word	0x00002b0d
    1b04:	200000e6 	.word	0x200000e6

00001b08 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    1b08:	b580      	push	{r7, lr}
    1b0a:	b082      	sub	sp, #8
    1b0c:	af00      	add	r7, sp, #0
    1b0e:	0002      	movs	r2, r0
    1b10:	1dfb      	adds	r3, r7, #7
    1b12:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    1b14:	4b1c      	ldr	r3, [pc, #112]	; (1b88 <sd_mmc_wait_end_of_read_blocks+0x80>)
    1b16:	4798      	blx	r3
    1b18:	0003      	movs	r3, r0
    1b1a:	001a      	movs	r2, r3
    1b1c:	2301      	movs	r3, #1
    1b1e:	4053      	eors	r3, r2
    1b20:	b2db      	uxtb	r3, r3
    1b22:	2b00      	cmp	r3, #0
    1b24:	d001      	beq.n	1b2a <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    1b26:	2305      	movs	r3, #5
    1b28:	e029      	b.n	1b7e <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    1b2a:	1dfb      	adds	r3, r7, #7
    1b2c:	781b      	ldrb	r3, [r3, #0]
    1b2e:	2b00      	cmp	r3, #0
    1b30:	d003      	beq.n	1b3a <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    1b32:	4b16      	ldr	r3, [pc, #88]	; (1b8c <sd_mmc_wait_end_of_read_blocks+0x84>)
    1b34:	2200      	movs	r2, #0
    1b36:	801a      	strh	r2, [r3, #0]
    1b38:	e005      	b.n	1b46 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    1b3a:	4b14      	ldr	r3, [pc, #80]	; (1b8c <sd_mmc_wait_end_of_read_blocks+0x84>)
    1b3c:	881b      	ldrh	r3, [r3, #0]
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d001      	beq.n	1b46 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    1b42:	2300      	movs	r3, #0
    1b44:	e01b      	b.n	1b7e <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1b46:	4b12      	ldr	r3, [pc, #72]	; (1b90 <sd_mmc_wait_end_of_read_blocks+0x88>)
    1b48:	881b      	ldrh	r3, [r3, #0]
    1b4a:	2b01      	cmp	r3, #1
    1b4c:	d103      	bne.n	1b56 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    1b4e:	4b11      	ldr	r3, [pc, #68]	; (1b94 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    1b50:	4798      	blx	r3
		return SD_MMC_OK;
    1b52:	2300      	movs	r3, #0
    1b54:	e013      	b.n	1b7e <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1b56:	4b10      	ldr	r3, [pc, #64]	; (1b98 <sd_mmc_wait_end_of_read_blocks+0x90>)
    1b58:	2100      	movs	r1, #0
    1b5a:	0018      	movs	r0, r3
    1b5c:	4b0f      	ldr	r3, [pc, #60]	; (1b9c <sd_mmc_wait_end_of_read_blocks+0x94>)
    1b5e:	4798      	blx	r3
    1b60:	0003      	movs	r3, r0
    1b62:	001a      	movs	r2, r3
    1b64:	2301      	movs	r3, #1
    1b66:	4053      	eors	r3, r2
    1b68:	b2db      	uxtb	r3, r3
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	d004      	beq.n	1b78 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    1b6e:	4b0a      	ldr	r3, [pc, #40]	; (1b98 <sd_mmc_wait_end_of_read_blocks+0x90>)
    1b70:	2100      	movs	r1, #0
    1b72:	0018      	movs	r0, r3
    1b74:	4b09      	ldr	r3, [pc, #36]	; (1b9c <sd_mmc_wait_end_of_read_blocks+0x94>)
    1b76:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    1b78:	4b06      	ldr	r3, [pc, #24]	; (1b94 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    1b7a:	4798      	blx	r3
	return SD_MMC_OK;
    1b7c:	2300      	movs	r3, #0
}
    1b7e:	0018      	movs	r0, r3
    1b80:	46bd      	mov	sp, r7
    1b82:	b002      	add	sp, #8
    1b84:	bd80      	pop	{r7, pc}
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	00002bb1 	.word	0x00002bb1
    1b8c:	200000e6 	.word	0x200000e6
    1b90:	200000e4 	.word	0x200000e4
    1b94:	000015a1 	.word	0x000015a1
    1b98:	0000310c 	.word	0x0000310c
    1b9c:	00002815 	.word	0x00002815

00001ba0 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1ba0:	b590      	push	{r4, r7, lr}
    1ba2:	b089      	sub	sp, #36	; 0x24
    1ba4:	af02      	add	r7, sp, #8
    1ba6:	6039      	str	r1, [r7, #0]
    1ba8:	0011      	movs	r1, r2
    1baa:	1dfb      	adds	r3, r7, #7
    1bac:	1c02      	adds	r2, r0, #0
    1bae:	701a      	strb	r2, [r3, #0]
    1bb0:	1d3b      	adds	r3, r7, #4
    1bb2:	1c0a      	adds	r2, r1, #0
    1bb4:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1bb6:	230f      	movs	r3, #15
    1bb8:	18fc      	adds	r4, r7, r3
    1bba:	1dfb      	adds	r3, r7, #7
    1bbc:	781b      	ldrb	r3, [r3, #0]
    1bbe:	0018      	movs	r0, r3
    1bc0:	4b28      	ldr	r3, [pc, #160]	; (1c64 <sd_mmc_init_write_blocks+0xc4>)
    1bc2:	4798      	blx	r3
    1bc4:	0003      	movs	r3, r0
    1bc6:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1bc8:	230f      	movs	r3, #15
    1bca:	18fb      	adds	r3, r7, r3
    1bcc:	781b      	ldrb	r3, [r3, #0]
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d003      	beq.n	1bda <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    1bd2:	230f      	movs	r3, #15
    1bd4:	18fb      	adds	r3, r7, r3
    1bd6:	781b      	ldrb	r3, [r3, #0]
    1bd8:	e03f      	b.n	1c5a <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    1bda:	1dfb      	adds	r3, r7, #7
    1bdc:	781b      	ldrb	r3, [r3, #0]
    1bde:	0018      	movs	r0, r3
    1be0:	4b21      	ldr	r3, [pc, #132]	; (1c68 <sd_mmc_init_write_blocks+0xc8>)
    1be2:	4798      	blx	r3
    1be4:	1e03      	subs	r3, r0, #0
    1be6:	d003      	beq.n	1bf0 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    1be8:	4b20      	ldr	r3, [pc, #128]	; (1c6c <sd_mmc_init_write_blocks+0xcc>)
    1bea:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    1bec:	2307      	movs	r3, #7
    1bee:	e034      	b.n	1c5a <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    1bf0:	1d3b      	adds	r3, r7, #4
    1bf2:	881b      	ldrh	r3, [r3, #0]
    1bf4:	2b01      	cmp	r3, #1
    1bf6:	d902      	bls.n	1bfe <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    1bf8:	4b1d      	ldr	r3, [pc, #116]	; (1c70 <sd_mmc_init_write_blocks+0xd0>)
    1bfa:	617b      	str	r3, [r7, #20]
    1bfc:	e001      	b.n	1c02 <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    1bfe:	4b1d      	ldr	r3, [pc, #116]	; (1c74 <sd_mmc_init_write_blocks+0xd4>)
    1c00:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1c02:	4b1d      	ldr	r3, [pc, #116]	; (1c78 <sd_mmc_init_write_blocks+0xd8>)
    1c04:	681b      	ldr	r3, [r3, #0]
    1c06:	7adb      	ldrb	r3, [r3, #11]
    1c08:	001a      	movs	r2, r3
    1c0a:	2308      	movs	r3, #8
    1c0c:	4013      	ands	r3, r2
    1c0e:	d002      	beq.n	1c16 <sd_mmc_init_write_blocks+0x76>
		arg = start;
    1c10:	683b      	ldr	r3, [r7, #0]
    1c12:	613b      	str	r3, [r7, #16]
    1c14:	e002      	b.n	1c1c <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1c16:	683b      	ldr	r3, [r7, #0]
    1c18:	025b      	lsls	r3, r3, #9
    1c1a:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1c1c:	1d3b      	adds	r3, r7, #4
    1c1e:	881c      	ldrh	r4, [r3, #0]
    1c20:	2380      	movs	r3, #128	; 0x80
    1c22:	009a      	lsls	r2, r3, #2
    1c24:	6939      	ldr	r1, [r7, #16]
    1c26:	6978      	ldr	r0, [r7, #20]
    1c28:	2301      	movs	r3, #1
    1c2a:	9300      	str	r3, [sp, #0]
    1c2c:	0023      	movs	r3, r4
    1c2e:	4c13      	ldr	r4, [pc, #76]	; (1c7c <sd_mmc_init_write_blocks+0xdc>)
    1c30:	47a0      	blx	r4
    1c32:	0003      	movs	r3, r0
    1c34:	001a      	movs	r2, r3
    1c36:	2301      	movs	r3, #1
    1c38:	4053      	eors	r3, r2
    1c3a:	b2db      	uxtb	r3, r3
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d003      	beq.n	1c48 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    1c40:	4b0a      	ldr	r3, [pc, #40]	; (1c6c <sd_mmc_init_write_blocks+0xcc>)
    1c42:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1c44:	2305      	movs	r3, #5
    1c46:	e008      	b.n	1c5a <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1c48:	4b0d      	ldr	r3, [pc, #52]	; (1c80 <sd_mmc_init_write_blocks+0xe0>)
    1c4a:	1d3a      	adds	r2, r7, #4
    1c4c:	8812      	ldrh	r2, [r2, #0]
    1c4e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1c50:	4b0c      	ldr	r3, [pc, #48]	; (1c84 <sd_mmc_init_write_blocks+0xe4>)
    1c52:	1d3a      	adds	r2, r7, #4
    1c54:	8812      	ldrh	r2, [r2, #0]
    1c56:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1c58:	2300      	movs	r3, #0
}
    1c5a:	0018      	movs	r0, r3
    1c5c:	46bd      	mov	sp, r7
    1c5e:	b007      	add	sp, #28
    1c60:	bd90      	pop	{r4, r7, pc}
    1c62:	46c0      	nop			; (mov r8, r8)
    1c64:	000014a5 	.word	0x000014a5
    1c68:	000019ad 	.word	0x000019ad
    1c6c:	000015a1 	.word	0x000015a1
    1c70:	00109119 	.word	0x00109119
    1c74:	00089118 	.word	0x00089118
    1c78:	200000e0 	.word	0x200000e0
    1c7c:	0000283d 	.word	0x0000283d
    1c80:	200000e6 	.word	0x200000e6
    1c84:	200000e4 	.word	0x200000e4

00001c88 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1c88:	b580      	push	{r7, lr}
    1c8a:	b082      	sub	sp, #8
    1c8c:	af00      	add	r7, sp, #0
    1c8e:	6078      	str	r0, [r7, #4]
    1c90:	000a      	movs	r2, r1
    1c92:	1cbb      	adds	r3, r7, #2
    1c94:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    1c96:	1cbb      	adds	r3, r7, #2
    1c98:	881a      	ldrh	r2, [r3, #0]
    1c9a:	687b      	ldr	r3, [r7, #4]
    1c9c:	0011      	movs	r1, r2
    1c9e:	0018      	movs	r0, r3
    1ca0:	4b0d      	ldr	r3, [pc, #52]	; (1cd8 <sd_mmc_start_write_blocks+0x50>)
    1ca2:	4798      	blx	r3
    1ca4:	0003      	movs	r3, r0
    1ca6:	001a      	movs	r2, r3
    1ca8:	2301      	movs	r3, #1
    1caa:	4053      	eors	r3, r2
    1cac:	b2db      	uxtb	r3, r3
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d004      	beq.n	1cbc <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    1cb2:	4b0a      	ldr	r3, [pc, #40]	; (1cdc <sd_mmc_start_write_blocks+0x54>)
    1cb4:	2200      	movs	r2, #0
    1cb6:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1cb8:	2305      	movs	r3, #5
    1cba:	e008      	b.n	1cce <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    1cbc:	4b07      	ldr	r3, [pc, #28]	; (1cdc <sd_mmc_start_write_blocks+0x54>)
    1cbe:	881a      	ldrh	r2, [r3, #0]
    1cc0:	1cbb      	adds	r3, r7, #2
    1cc2:	881b      	ldrh	r3, [r3, #0]
    1cc4:	1ad3      	subs	r3, r2, r3
    1cc6:	b29a      	uxth	r2, r3
    1cc8:	4b04      	ldr	r3, [pc, #16]	; (1cdc <sd_mmc_start_write_blocks+0x54>)
    1cca:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1ccc:	2300      	movs	r3, #0
}
    1cce:	0018      	movs	r0, r3
    1cd0:	46bd      	mov	sp, r7
    1cd2:	b002      	add	sp, #8
    1cd4:	bd80      	pop	{r7, pc}
    1cd6:	46c0      	nop			; (mov r8, r8)
    1cd8:	00002bbd 	.word	0x00002bbd
    1cdc:	200000e6 	.word	0x200000e6

00001ce0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    1ce0:	b580      	push	{r7, lr}
    1ce2:	b082      	sub	sp, #8
    1ce4:	af00      	add	r7, sp, #0
    1ce6:	0002      	movs	r2, r0
    1ce8:	1dfb      	adds	r3, r7, #7
    1cea:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    1cec:	4b13      	ldr	r3, [pc, #76]	; (1d3c <sd_mmc_wait_end_of_write_blocks+0x5c>)
    1cee:	4798      	blx	r3
    1cf0:	0003      	movs	r3, r0
    1cf2:	001a      	movs	r2, r3
    1cf4:	2301      	movs	r3, #1
    1cf6:	4053      	eors	r3, r2
    1cf8:	b2db      	uxtb	r3, r3
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	d001      	beq.n	1d02 <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    1cfe:	2305      	movs	r3, #5
    1d00:	e018      	b.n	1d34 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    1d02:	1dfb      	adds	r3, r7, #7
    1d04:	781b      	ldrb	r3, [r3, #0]
    1d06:	2b00      	cmp	r3, #0
    1d08:	d003      	beq.n	1d12 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    1d0a:	4b0d      	ldr	r3, [pc, #52]	; (1d40 <sd_mmc_wait_end_of_write_blocks+0x60>)
    1d0c:	2200      	movs	r2, #0
    1d0e:	801a      	strh	r2, [r3, #0]
    1d10:	e005      	b.n	1d1e <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    1d12:	4b0b      	ldr	r3, [pc, #44]	; (1d40 <sd_mmc_wait_end_of_write_blocks+0x60>)
    1d14:	881b      	ldrh	r3, [r3, #0]
    1d16:	2b00      	cmp	r3, #0
    1d18:	d001      	beq.n	1d1e <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    1d1a:	2300      	movs	r3, #0
    1d1c:	e00a      	b.n	1d34 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1d1e:	4b09      	ldr	r3, [pc, #36]	; (1d44 <sd_mmc_wait_end_of_write_blocks+0x64>)
    1d20:	881b      	ldrh	r3, [r3, #0]
    1d22:	2b01      	cmp	r3, #1
    1d24:	d103      	bne.n	1d2e <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    1d26:	4b08      	ldr	r3, [pc, #32]	; (1d48 <sd_mmc_wait_end_of_write_blocks+0x68>)
    1d28:	4798      	blx	r3
		return SD_MMC_OK;
    1d2a:	2300      	movs	r3, #0
    1d2c:	e002      	b.n	1d34 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    1d2e:	4b06      	ldr	r3, [pc, #24]	; (1d48 <sd_mmc_wait_end_of_write_blocks+0x68>)
    1d30:	4798      	blx	r3
	return SD_MMC_OK;
    1d32:	2300      	movs	r3, #0
}
    1d34:	0018      	movs	r0, r3
    1d36:	46bd      	mov	sp, r7
    1d38:	b002      	add	sp, #8
    1d3a:	bd80      	pop	{r7, pc}
    1d3c:	00002c7d 	.word	0x00002c7d
    1d40:	200000e6 	.word	0x200000e6
    1d44:	200000e4 	.word	0x200000e4
    1d48:	000015a1 	.word	0x000015a1

00001d4c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    1d4c:	b580      	push	{r7, lr}
    1d4e:	b082      	sub	sp, #8
    1d50:	af00      	add	r7, sp, #0
    1d52:	0002      	movs	r2, r0
    1d54:	1dfb      	adds	r3, r7, #7
    1d56:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    1d58:	1dfb      	adds	r3, r7, #7
    1d5a:	781b      	ldrb	r3, [r3, #0]
    1d5c:	0018      	movs	r0, r3
    1d5e:	4b16      	ldr	r3, [pc, #88]	; (1db8 <sd_mmc_test_unit_ready+0x6c>)
    1d60:	4798      	blx	r3
    1d62:	0003      	movs	r3, r0
    1d64:	2b01      	cmp	r3, #1
    1d66:	d019      	beq.n	1d9c <sd_mmc_test_unit_ready+0x50>
    1d68:	2b02      	cmp	r3, #2
    1d6a:	d019      	beq.n	1da0 <sd_mmc_test_unit_ready+0x54>
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d11e      	bne.n	1dae <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    1d70:	1dfb      	adds	r3, r7, #7
    1d72:	781b      	ldrb	r3, [r3, #0]
    1d74:	4a11      	ldr	r2, [pc, #68]	; (1dbc <sd_mmc_test_unit_ready+0x70>)
    1d76:	5cd3      	ldrb	r3, [r2, r3]
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d001      	beq.n	1d80 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    1d7c:	2302      	movs	r3, #2
    1d7e:	e017      	b.n	1db0 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    1d80:	1dfb      	adds	r3, r7, #7
    1d82:	781b      	ldrb	r3, [r3, #0]
    1d84:	0018      	movs	r0, r3
    1d86:	4b0e      	ldr	r3, [pc, #56]	; (1dc0 <sd_mmc_test_unit_ready+0x74>)
    1d88:	4798      	blx	r3
    1d8a:	0003      	movs	r3, r0
    1d8c:	001a      	movs	r2, r3
    1d8e:	2303      	movs	r3, #3
    1d90:	4013      	ands	r3, r2
    1d92:	d001      	beq.n	1d98 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    1d94:	2300      	movs	r3, #0
    1d96:	e00b      	b.n	1db0 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    1d98:	2302      	movs	r3, #2
    1d9a:	e009      	b.n	1db0 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    1d9c:	2303      	movs	r3, #3
    1d9e:	e007      	b.n	1db0 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    1da0:	1dfb      	adds	r3, r7, #7
    1da2:	781b      	ldrb	r3, [r3, #0]
    1da4:	4a05      	ldr	r2, [pc, #20]	; (1dbc <sd_mmc_test_unit_ready+0x70>)
    1da6:	2100      	movs	r1, #0
    1da8:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    1daa:	2302      	movs	r3, #2
    1dac:	e000      	b.n	1db0 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    1dae:	2301      	movs	r3, #1
	}
}
    1db0:	0018      	movs	r0, r3
    1db2:	46bd      	mov	sp, r7
    1db4:	b002      	add	sp, #8
    1db6:	bd80      	pop	{r7, pc}
    1db8:	000018c1 	.word	0x000018c1
    1dbc:	200000e8 	.word	0x200000e8
    1dc0:	00001935 	.word	0x00001935

00001dc4 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    1dc4:	b580      	push	{r7, lr}
    1dc6:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    1dc8:	2000      	movs	r0, #0
    1dca:	4b03      	ldr	r3, [pc, #12]	; (1dd8 <sd_mmc_test_unit_ready_0+0x14>)
    1dcc:	4798      	blx	r3
    1dce:	0003      	movs	r3, r0
}
    1dd0:	0018      	movs	r0, r3
    1dd2:	46bd      	mov	sp, r7
    1dd4:	bd80      	pop	{r7, pc}
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	00001d4d 	.word	0x00001d4d

00001ddc <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    1ddc:	b580      	push	{r7, lr}
    1dde:	b082      	sub	sp, #8
    1de0:	af00      	add	r7, sp, #0
    1de2:	0002      	movs	r2, r0
    1de4:	6039      	str	r1, [r7, #0]
    1de6:	1dfb      	adds	r3, r7, #7
    1de8:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    1dea:	1dfb      	adds	r3, r7, #7
    1dec:	781b      	ldrb	r3, [r3, #0]
    1dee:	0018      	movs	r0, r3
    1df0:	4b08      	ldr	r3, [pc, #32]	; (1e14 <sd_mmc_read_capacity+0x38>)
    1df2:	4798      	blx	r3
    1df4:	0003      	movs	r3, r0
    1df6:	005b      	lsls	r3, r3, #1
    1df8:	1e5a      	subs	r2, r3, #1
    1dfa:	683b      	ldr	r3, [r7, #0]
    1dfc:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    1dfe:	1dfb      	adds	r3, r7, #7
    1e00:	781b      	ldrb	r3, [r3, #0]
    1e02:	0018      	movs	r0, r3
    1e04:	4b04      	ldr	r3, [pc, #16]	; (1e18 <sd_mmc_read_capacity+0x3c>)
    1e06:	4798      	blx	r3
    1e08:	0003      	movs	r3, r0
}
    1e0a:	0018      	movs	r0, r3
    1e0c:	46bd      	mov	sp, r7
    1e0e:	b002      	add	sp, #8
    1e10:	bd80      	pop	{r7, pc}
    1e12:	46c0      	nop			; (mov r8, r8)
    1e14:	00001971 	.word	0x00001971
    1e18:	00001d4d 	.word	0x00001d4d

00001e1c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    1e1c:	b580      	push	{r7, lr}
    1e1e:	b082      	sub	sp, #8
    1e20:	af00      	add	r7, sp, #0
    1e22:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    1e24:	687b      	ldr	r3, [r7, #4]
    1e26:	0019      	movs	r1, r3
    1e28:	2000      	movs	r0, #0
    1e2a:	4b03      	ldr	r3, [pc, #12]	; (1e38 <sd_mmc_read_capacity_0+0x1c>)
    1e2c:	4798      	blx	r3
    1e2e:	0003      	movs	r3, r0
}
    1e30:	0018      	movs	r0, r3
    1e32:	46bd      	mov	sp, r7
    1e34:	b002      	add	sp, #8
    1e36:	bd80      	pop	{r7, pc}
    1e38:	00001ddd 	.word	0x00001ddd

00001e3c <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    1e3c:	b580      	push	{r7, lr}
    1e3e:	b082      	sub	sp, #8
    1e40:	af00      	add	r7, sp, #0
    1e42:	0002      	movs	r2, r0
    1e44:	1dfb      	adds	r3, r7, #7
    1e46:	701a      	strb	r2, [r3, #0]
    1e48:	1dbb      	adds	r3, r7, #6
    1e4a:	1c0a      	adds	r2, r1, #0
    1e4c:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    1e4e:	1dfb      	adds	r3, r7, #7
    1e50:	781b      	ldrb	r3, [r3, #0]
    1e52:	4a04      	ldr	r2, [pc, #16]	; (1e64 <sd_mmc_unload+0x28>)
    1e54:	1db9      	adds	r1, r7, #6
    1e56:	7809      	ldrb	r1, [r1, #0]
    1e58:	54d1      	strb	r1, [r2, r3]
	return true;
    1e5a:	2301      	movs	r3, #1
}
    1e5c:	0018      	movs	r0, r3
    1e5e:	46bd      	mov	sp, r7
    1e60:	b002      	add	sp, #8
    1e62:	bd80      	pop	{r7, pc}
    1e64:	200000e8 	.word	0x200000e8

00001e68 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    1e68:	b580      	push	{r7, lr}
    1e6a:	b082      	sub	sp, #8
    1e6c:	af00      	add	r7, sp, #0
    1e6e:	0002      	movs	r2, r0
    1e70:	1dfb      	adds	r3, r7, #7
    1e72:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    1e74:	1dfb      	adds	r3, r7, #7
    1e76:	781b      	ldrb	r3, [r3, #0]
    1e78:	0019      	movs	r1, r3
    1e7a:	2000      	movs	r0, #0
    1e7c:	4b03      	ldr	r3, [pc, #12]	; (1e8c <sd_mmc_unload_0+0x24>)
    1e7e:	4798      	blx	r3
    1e80:	0003      	movs	r3, r0
}
    1e82:	0018      	movs	r0, r3
    1e84:	46bd      	mov	sp, r7
    1e86:	b002      	add	sp, #8
    1e88:	bd80      	pop	{r7, pc}
    1e8a:	46c0      	nop			; (mov r8, r8)
    1e8c:	00001e3d 	.word	0x00001e3d

00001e90 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    1e90:	b580      	push	{r7, lr}
    1e92:	b082      	sub	sp, #8
    1e94:	af00      	add	r7, sp, #0
    1e96:	0002      	movs	r2, r0
    1e98:	1dfb      	adds	r3, r7, #7
    1e9a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    1e9c:	1dfb      	adds	r3, r7, #7
    1e9e:	781b      	ldrb	r3, [r3, #0]
    1ea0:	0018      	movs	r0, r3
    1ea2:	4b03      	ldr	r3, [pc, #12]	; (1eb0 <sd_mmc_wr_protect+0x20>)
    1ea4:	4798      	blx	r3
    1ea6:	0003      	movs	r3, r0
}
    1ea8:	0018      	movs	r0, r3
    1eaa:	46bd      	mov	sp, r7
    1eac:	b002      	add	sp, #8
    1eae:	bd80      	pop	{r7, pc}
    1eb0:	000019ad 	.word	0x000019ad

00001eb4 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    1eb4:	b580      	push	{r7, lr}
    1eb6:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    1eb8:	2000      	movs	r0, #0
    1eba:	4b03      	ldr	r3, [pc, #12]	; (1ec8 <sd_mmc_wr_protect_0+0x14>)
    1ebc:	4798      	blx	r3
    1ebe:	0003      	movs	r3, r0
}
    1ec0:	0018      	movs	r0, r3
    1ec2:	46bd      	mov	sp, r7
    1ec4:	bd80      	pop	{r7, pc}
    1ec6:	46c0      	nop			; (mov r8, r8)
    1ec8:	00001e91 	.word	0x00001e91

00001ecc <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    1ecc:	b580      	push	{r7, lr}
    1ece:	b082      	sub	sp, #8
    1ed0:	af00      	add	r7, sp, #0
    1ed2:	0002      	movs	r2, r0
    1ed4:	1dfb      	adds	r3, r7, #7
    1ed6:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    1ed8:	2301      	movs	r3, #1
}
    1eda:	0018      	movs	r0, r3
    1edc:	46bd      	mov	sp, r7
    1ede:	b002      	add	sp, #8
    1ee0:	bd80      	pop	{r7, pc}
	...

00001ee4 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    1ee4:	b580      	push	{r7, lr}
    1ee6:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    1ee8:	2000      	movs	r0, #0
    1eea:	4b03      	ldr	r3, [pc, #12]	; (1ef8 <sd_mmc_removal_0+0x14>)
    1eec:	4798      	blx	r3
    1eee:	0003      	movs	r3, r0
}
    1ef0:	0018      	movs	r0, r3
    1ef2:	46bd      	mov	sp, r7
    1ef4:	bd80      	pop	{r7, pc}
    1ef6:	46c0      	nop			; (mov r8, r8)
    1ef8:	00001ecd 	.word	0x00001ecd

00001efc <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    1efc:	b580      	push	{r7, lr}
    1efe:	b084      	sub	sp, #16
    1f00:	af00      	add	r7, sp, #0
    1f02:	60b9      	str	r1, [r7, #8]
    1f04:	607a      	str	r2, [r7, #4]
    1f06:	230f      	movs	r3, #15
    1f08:	18fb      	adds	r3, r7, r3
    1f0a:	1c02      	adds	r2, r0, #0
    1f0c:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    1f0e:	68b9      	ldr	r1, [r7, #8]
    1f10:	230f      	movs	r3, #15
    1f12:	18fb      	adds	r3, r7, r3
    1f14:	781b      	ldrb	r3, [r3, #0]
    1f16:	2201      	movs	r2, #1
    1f18:	0018      	movs	r0, r3
    1f1a:	4b10      	ldr	r3, [pc, #64]	; (1f5c <sd_mmc_mem_2_ram+0x60>)
    1f1c:	4798      	blx	r3
    1f1e:	1e03      	subs	r3, r0, #0
    1f20:	d005      	beq.n	1f2e <sd_mmc_mem_2_ram+0x32>
    1f22:	2b02      	cmp	r3, #2
    1f24:	d101      	bne.n	1f2a <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    1f26:	2302      	movs	r3, #2
    1f28:	e013      	b.n	1f52 <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    1f2a:	2301      	movs	r3, #1
    1f2c:	e011      	b.n	1f52 <sd_mmc_mem_2_ram+0x56>
		break;
    1f2e:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    1f30:	687b      	ldr	r3, [r7, #4]
    1f32:	2101      	movs	r1, #1
    1f34:	0018      	movs	r0, r3
    1f36:	4b0a      	ldr	r3, [pc, #40]	; (1f60 <sd_mmc_mem_2_ram+0x64>)
    1f38:	4798      	blx	r3
    1f3a:	1e03      	subs	r3, r0, #0
    1f3c:	d001      	beq.n	1f42 <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    1f3e:	2301      	movs	r3, #1
    1f40:	e007      	b.n	1f52 <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    1f42:	2000      	movs	r0, #0
    1f44:	4b07      	ldr	r3, [pc, #28]	; (1f64 <sd_mmc_mem_2_ram+0x68>)
    1f46:	4798      	blx	r3
    1f48:	1e03      	subs	r3, r0, #0
    1f4a:	d001      	beq.n	1f50 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    1f4c:	2301      	movs	r3, #1
    1f4e:	e000      	b.n	1f52 <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    1f50:	2300      	movs	r3, #0
}
    1f52:	0018      	movs	r0, r3
    1f54:	46bd      	mov	sp, r7
    1f56:	b004      	add	sp, #16
    1f58:	bd80      	pop	{r7, pc}
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	000019c5 	.word	0x000019c5
    1f60:	00001ab1 	.word	0x00001ab1
    1f64:	00001b09 	.word	0x00001b09

00001f68 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    1f68:	b580      	push	{r7, lr}
    1f6a:	b082      	sub	sp, #8
    1f6c:	af00      	add	r7, sp, #0
    1f6e:	6078      	str	r0, [r7, #4]
    1f70:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    1f72:	683a      	ldr	r2, [r7, #0]
    1f74:	687b      	ldr	r3, [r7, #4]
    1f76:	0019      	movs	r1, r3
    1f78:	2000      	movs	r0, #0
    1f7a:	4b03      	ldr	r3, [pc, #12]	; (1f88 <sd_mmc_mem_2_ram_0+0x20>)
    1f7c:	4798      	blx	r3
    1f7e:	0003      	movs	r3, r0
}
    1f80:	0018      	movs	r0, r3
    1f82:	46bd      	mov	sp, r7
    1f84:	b002      	add	sp, #8
    1f86:	bd80      	pop	{r7, pc}
    1f88:	00001efd 	.word	0x00001efd

00001f8c <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    1f8c:	b580      	push	{r7, lr}
    1f8e:	b084      	sub	sp, #16
    1f90:	af00      	add	r7, sp, #0
    1f92:	60b9      	str	r1, [r7, #8]
    1f94:	607a      	str	r2, [r7, #4]
    1f96:	230f      	movs	r3, #15
    1f98:	18fb      	adds	r3, r7, r3
    1f9a:	1c02      	adds	r2, r0, #0
    1f9c:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    1f9e:	68b9      	ldr	r1, [r7, #8]
    1fa0:	230f      	movs	r3, #15
    1fa2:	18fb      	adds	r3, r7, r3
    1fa4:	781b      	ldrb	r3, [r3, #0]
    1fa6:	2201      	movs	r2, #1
    1fa8:	0018      	movs	r0, r3
    1faa:	4b10      	ldr	r3, [pc, #64]	; (1fec <sd_mmc_ram_2_mem+0x60>)
    1fac:	4798      	blx	r3
    1fae:	1e03      	subs	r3, r0, #0
    1fb0:	d005      	beq.n	1fbe <sd_mmc_ram_2_mem+0x32>
    1fb2:	2b02      	cmp	r3, #2
    1fb4:	d101      	bne.n	1fba <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    1fb6:	2302      	movs	r3, #2
    1fb8:	e013      	b.n	1fe2 <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    1fba:	2301      	movs	r3, #1
    1fbc:	e011      	b.n	1fe2 <sd_mmc_ram_2_mem+0x56>
		break;
    1fbe:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    1fc0:	687b      	ldr	r3, [r7, #4]
    1fc2:	2101      	movs	r1, #1
    1fc4:	0018      	movs	r0, r3
    1fc6:	4b0a      	ldr	r3, [pc, #40]	; (1ff0 <sd_mmc_ram_2_mem+0x64>)
    1fc8:	4798      	blx	r3
    1fca:	1e03      	subs	r3, r0, #0
    1fcc:	d001      	beq.n	1fd2 <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    1fce:	2301      	movs	r3, #1
    1fd0:	e007      	b.n	1fe2 <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    1fd2:	2000      	movs	r0, #0
    1fd4:	4b07      	ldr	r3, [pc, #28]	; (1ff4 <sd_mmc_ram_2_mem+0x68>)
    1fd6:	4798      	blx	r3
    1fd8:	1e03      	subs	r3, r0, #0
    1fda:	d001      	beq.n	1fe0 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    1fdc:	2301      	movs	r3, #1
    1fde:	e000      	b.n	1fe2 <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    1fe0:	2300      	movs	r3, #0
}
    1fe2:	0018      	movs	r0, r3
    1fe4:	46bd      	mov	sp, r7
    1fe6:	b004      	add	sp, #16
    1fe8:	bd80      	pop	{r7, pc}
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	00001ba1 	.word	0x00001ba1
    1ff0:	00001c89 	.word	0x00001c89
    1ff4:	00001ce1 	.word	0x00001ce1

00001ff8 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    1ff8:	b580      	push	{r7, lr}
    1ffa:	b082      	sub	sp, #8
    1ffc:	af00      	add	r7, sp, #0
    1ffe:	6078      	str	r0, [r7, #4]
    2000:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    2002:	683a      	ldr	r2, [r7, #0]
    2004:	687b      	ldr	r3, [r7, #4]
    2006:	0019      	movs	r1, r3
    2008:	2000      	movs	r0, #0
    200a:	4b03      	ldr	r3, [pc, #12]	; (2018 <STACK_SIZE+0x18>)
    200c:	4798      	blx	r3
    200e:	0003      	movs	r3, r0
}
    2010:	0018      	movs	r0, r3
    2012:	46bd      	mov	sp, r7
    2014:	b002      	add	sp, #8
    2016:	bd80      	pop	{r7, pc}
    2018:	00001f8d 	.word	0x00001f8d

0000201c <system_pinmux_get_group_from_gpio_pin>:
{
    201c:	b580      	push	{r7, lr}
    201e:	b084      	sub	sp, #16
    2020:	af00      	add	r7, sp, #0
    2022:	0002      	movs	r2, r0
    2024:	1dfb      	adds	r3, r7, #7
    2026:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2028:	230f      	movs	r3, #15
    202a:	18fb      	adds	r3, r7, r3
    202c:	1dfa      	adds	r2, r7, #7
    202e:	7812      	ldrb	r2, [r2, #0]
    2030:	09d2      	lsrs	r2, r2, #7
    2032:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2034:	230e      	movs	r3, #14
    2036:	18fb      	adds	r3, r7, r3
    2038:	1dfa      	adds	r2, r7, #7
    203a:	7812      	ldrb	r2, [r2, #0]
    203c:	0952      	lsrs	r2, r2, #5
    203e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2040:	4b0d      	ldr	r3, [pc, #52]	; (2078 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2042:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    2044:	230f      	movs	r3, #15
    2046:	18fb      	adds	r3, r7, r3
    2048:	781b      	ldrb	r3, [r3, #0]
    204a:	2b00      	cmp	r3, #0
    204c:	d10f      	bne.n	206e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    204e:	230f      	movs	r3, #15
    2050:	18fb      	adds	r3, r7, r3
    2052:	781b      	ldrb	r3, [r3, #0]
    2054:	009b      	lsls	r3, r3, #2
    2056:	2210      	movs	r2, #16
    2058:	4694      	mov	ip, r2
    205a:	44bc      	add	ip, r7
    205c:	4463      	add	r3, ip
    205e:	3b08      	subs	r3, #8
    2060:	681a      	ldr	r2, [r3, #0]
    2062:	230e      	movs	r3, #14
    2064:	18fb      	adds	r3, r7, r3
    2066:	781b      	ldrb	r3, [r3, #0]
    2068:	01db      	lsls	r3, r3, #7
    206a:	18d3      	adds	r3, r2, r3
    206c:	e000      	b.n	2070 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    206e:	2300      	movs	r3, #0
}
    2070:	0018      	movs	r0, r3
    2072:	46bd      	mov	sp, r7
    2074:	b004      	add	sp, #16
    2076:	bd80      	pop	{r7, pc}
    2078:	41004400 	.word	0x41004400

0000207c <port_get_group_from_gpio_pin>:
{
    207c:	b580      	push	{r7, lr}
    207e:	b082      	sub	sp, #8
    2080:	af00      	add	r7, sp, #0
    2082:	0002      	movs	r2, r0
    2084:	1dfb      	adds	r3, r7, #7
    2086:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2088:	1dfb      	adds	r3, r7, #7
    208a:	781b      	ldrb	r3, [r3, #0]
    208c:	0018      	movs	r0, r3
    208e:	4b03      	ldr	r3, [pc, #12]	; (209c <port_get_group_from_gpio_pin+0x20>)
    2090:	4798      	blx	r3
    2092:	0003      	movs	r3, r0
}
    2094:	0018      	movs	r0, r3
    2096:	46bd      	mov	sp, r7
    2098:	b002      	add	sp, #8
    209a:	bd80      	pop	{r7, pc}
    209c:	0000201d 	.word	0x0000201d

000020a0 <port_get_config_defaults>:
{
    20a0:	b580      	push	{r7, lr}
    20a2:	b082      	sub	sp, #8
    20a4:	af00      	add	r7, sp, #0
    20a6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    20a8:	687b      	ldr	r3, [r7, #4]
    20aa:	2200      	movs	r2, #0
    20ac:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    20ae:	687b      	ldr	r3, [r7, #4]
    20b0:	2201      	movs	r2, #1
    20b2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	2200      	movs	r2, #0
    20b8:	709a      	strb	r2, [r3, #2]
}
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	46bd      	mov	sp, r7
    20be:	b002      	add	sp, #8
    20c0:	bd80      	pop	{r7, pc}
	...

000020c4 <port_pin_set_output_level>:
{
    20c4:	b580      	push	{r7, lr}
    20c6:	b084      	sub	sp, #16
    20c8:	af00      	add	r7, sp, #0
    20ca:	0002      	movs	r2, r0
    20cc:	1dfb      	adds	r3, r7, #7
    20ce:	701a      	strb	r2, [r3, #0]
    20d0:	1dbb      	adds	r3, r7, #6
    20d2:	1c0a      	adds	r2, r1, #0
    20d4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    20d6:	1dfb      	adds	r3, r7, #7
    20d8:	781b      	ldrb	r3, [r3, #0]
    20da:	0018      	movs	r0, r3
    20dc:	4b0d      	ldr	r3, [pc, #52]	; (2114 <port_pin_set_output_level+0x50>)
    20de:	4798      	blx	r3
    20e0:	0003      	movs	r3, r0
    20e2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    20e4:	1dfb      	adds	r3, r7, #7
    20e6:	781b      	ldrb	r3, [r3, #0]
    20e8:	221f      	movs	r2, #31
    20ea:	4013      	ands	r3, r2
    20ec:	2201      	movs	r2, #1
    20ee:	409a      	lsls	r2, r3
    20f0:	0013      	movs	r3, r2
    20f2:	60bb      	str	r3, [r7, #8]
	if (level) {
    20f4:	1dbb      	adds	r3, r7, #6
    20f6:	781b      	ldrb	r3, [r3, #0]
    20f8:	2b00      	cmp	r3, #0
    20fa:	d003      	beq.n	2104 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    20fc:	68fb      	ldr	r3, [r7, #12]
    20fe:	68ba      	ldr	r2, [r7, #8]
    2100:	619a      	str	r2, [r3, #24]
}
    2102:	e002      	b.n	210a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2104:	68fb      	ldr	r3, [r7, #12]
    2106:	68ba      	ldr	r2, [r7, #8]
    2108:	615a      	str	r2, [r3, #20]
}
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	46bd      	mov	sp, r7
    210e:	b004      	add	sp, #16
    2110:	bd80      	pop	{r7, pc}
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	0000207d 	.word	0x0000207d

00002118 <system_interrupt_enable>:
{
    2118:	b580      	push	{r7, lr}
    211a:	b082      	sub	sp, #8
    211c:	af00      	add	r7, sp, #0
    211e:	0002      	movs	r2, r0
    2120:	1dfb      	adds	r3, r7, #7
    2122:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2124:	4b06      	ldr	r3, [pc, #24]	; (2140 <system_interrupt_enable+0x28>)
    2126:	1dfa      	adds	r2, r7, #7
    2128:	7812      	ldrb	r2, [r2, #0]
    212a:	0011      	movs	r1, r2
    212c:	221f      	movs	r2, #31
    212e:	400a      	ands	r2, r1
    2130:	2101      	movs	r1, #1
    2132:	4091      	lsls	r1, r2
    2134:	000a      	movs	r2, r1
    2136:	601a      	str	r2, [r3, #0]
}
    2138:	46c0      	nop			; (mov r8, r8)
    213a:	46bd      	mov	sp, r7
    213c:	b002      	add	sp, #8
    213e:	bd80      	pop	{r7, pc}
    2140:	e000e100 	.word	0xe000e100

00002144 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    2144:	b580      	push	{r7, lr}
    2146:	b084      	sub	sp, #16
    2148:	af00      	add	r7, sp, #0
    214a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    214c:	687b      	ldr	r3, [r7, #4]
    214e:	681b      	ldr	r3, [r3, #0]
    2150:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    2152:	68fb      	ldr	r3, [r7, #12]
    2154:	69db      	ldr	r3, [r3, #28]
    2156:	1e5a      	subs	r2, r3, #1
    2158:	4193      	sbcs	r3, r2
    215a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    215c:	0018      	movs	r0, r3
    215e:	46bd      	mov	sp, r7
    2160:	b004      	add	sp, #16
    2162:	bd80      	pop	{r7, pc}

00002164 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2164:	b580      	push	{r7, lr}
    2166:	b082      	sub	sp, #8
    2168:	af00      	add	r7, sp, #0
    216a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    216c:	687b      	ldr	r3, [r7, #4]
    216e:	2201      	movs	r2, #1
    2170:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	2200      	movs	r2, #0
    2176:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2178:	687b      	ldr	r3, [r7, #4]
    217a:	2200      	movs	r2, #0
    217c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    217e:	687b      	ldr	r3, [r7, #4]
    2180:	22c0      	movs	r2, #192	; 0xc0
    2182:	0392      	lsls	r2, r2, #14
    2184:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2186:	687b      	ldr	r3, [r7, #4]
    2188:	2200      	movs	r2, #0
    218a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    218c:	687b      	ldr	r3, [r7, #4]
    218e:	2200      	movs	r2, #0
    2190:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    2192:	687b      	ldr	r3, [r7, #4]
    2194:	2201      	movs	r2, #1
    2196:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    2198:	687b      	ldr	r3, [r7, #4]
    219a:	2201      	movs	r2, #1
    219c:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    219e:	687b      	ldr	r3, [r7, #4]
    21a0:	2200      	movs	r2, #0
    21a2:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    21a4:	687b      	ldr	r3, [r7, #4]
    21a6:	2224      	movs	r2, #36	; 0x24
    21a8:	2100      	movs	r1, #0
    21aa:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    21ac:	687b      	ldr	r3, [r7, #4]
    21ae:	3318      	adds	r3, #24
    21b0:	220c      	movs	r2, #12
    21b2:	2100      	movs	r1, #0
    21b4:	0018      	movs	r0, r3
    21b6:	4b0a      	ldr	r3, [pc, #40]	; (21e0 <spi_get_config_defaults+0x7c>)
    21b8:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    21ba:	687b      	ldr	r3, [r7, #4]
    21bc:	4a09      	ldr	r2, [pc, #36]	; (21e4 <spi_get_config_defaults+0x80>)
    21be:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    21c0:	687b      	ldr	r3, [r7, #4]
    21c2:	2200      	movs	r2, #0
    21c4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    21c6:	687b      	ldr	r3, [r7, #4]
    21c8:	2200      	movs	r2, #0
    21ca:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    21cc:	687b      	ldr	r3, [r7, #4]
    21ce:	2200      	movs	r2, #0
    21d0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	2200      	movs	r2, #0
    21d6:	635a      	str	r2, [r3, #52]	; 0x34

};
    21d8:	46c0      	nop			; (mov r8, r8)
    21da:	46bd      	mov	sp, r7
    21dc:	b002      	add	sp, #8
    21de:	bd80      	pop	{r7, pc}
    21e0:	0000a65b 	.word	0x0000a65b
    21e4:	000186a0 	.word	0x000186a0

000021e8 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    21e8:	b580      	push	{r7, lr}
    21ea:	b082      	sub	sp, #8
    21ec:	af00      	add	r7, sp, #0
    21ee:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    21f0:	687b      	ldr	r3, [r7, #4]
    21f2:	220a      	movs	r2, #10
    21f4:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    21f6:	687b      	ldr	r3, [r7, #4]
    21f8:	2200      	movs	r2, #0
    21fa:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    21fc:	687b      	ldr	r3, [r7, #4]
    21fe:	2200      	movs	r2, #0
    2200:	709a      	strb	r2, [r3, #2]
}
    2202:	46c0      	nop			; (mov r8, r8)
    2204:	46bd      	mov	sp, r7
    2206:	b002      	add	sp, #8
    2208:	bd80      	pop	{r7, pc}
	...

0000220c <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    220c:	b580      	push	{r7, lr}
    220e:	b084      	sub	sp, #16
    2210:	af00      	add	r7, sp, #0
    2212:	6078      	str	r0, [r7, #4]
    2214:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    2216:	683b      	ldr	r3, [r7, #0]
    2218:	781a      	ldrb	r2, [r3, #0]
    221a:	687b      	ldr	r3, [r7, #4]
    221c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    221e:	683b      	ldr	r3, [r7, #0]
    2220:	785a      	ldrb	r2, [r3, #1]
    2222:	687b      	ldr	r3, [r7, #4]
    2224:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    2226:	683b      	ldr	r3, [r7, #0]
    2228:	789a      	ldrb	r2, [r3, #2]
    222a:	687b      	ldr	r3, [r7, #4]
    222c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    222e:	230c      	movs	r3, #12
    2230:	18fb      	adds	r3, r7, r3
    2232:	0018      	movs	r0, r3
    2234:	4b0b      	ldr	r3, [pc, #44]	; (2264 <spi_attach_slave+0x58>)
    2236:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2238:	230c      	movs	r3, #12
    223a:	18fb      	adds	r3, r7, r3
    223c:	2201      	movs	r2, #1
    223e:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2240:	687b      	ldr	r3, [r7, #4]
    2242:	781b      	ldrb	r3, [r3, #0]
    2244:	220c      	movs	r2, #12
    2246:	18ba      	adds	r2, r7, r2
    2248:	0011      	movs	r1, r2
    224a:	0018      	movs	r0, r3
    224c:	4b06      	ldr	r3, [pc, #24]	; (2268 <spi_attach_slave+0x5c>)
    224e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2250:	687b      	ldr	r3, [r7, #4]
    2252:	781b      	ldrb	r3, [r3, #0]
    2254:	2101      	movs	r1, #1
    2256:	0018      	movs	r0, r3
    2258:	4b04      	ldr	r3, [pc, #16]	; (226c <spi_attach_slave+0x60>)
    225a:	4798      	blx	r3
}
    225c:	46c0      	nop			; (mov r8, r8)
    225e:	46bd      	mov	sp, r7
    2260:	b004      	add	sp, #16
    2262:	bd80      	pop	{r7, pc}
    2264:	000020a1 	.word	0x000020a1
    2268:	00002f19 	.word	0x00002f19
    226c:	000020c5 	.word	0x000020c5

00002270 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    2270:	b580      	push	{r7, lr}
    2272:	b084      	sub	sp, #16
    2274:	af00      	add	r7, sp, #0
    2276:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	681b      	ldr	r3, [r3, #0]
    227c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    227e:	687b      	ldr	r3, [r7, #4]
    2280:	681b      	ldr	r3, [r3, #0]
    2282:	0018      	movs	r0, r3
    2284:	4b0b      	ldr	r3, [pc, #44]	; (22b4 <spi_enable+0x44>)
    2286:	4798      	blx	r3
    2288:	0003      	movs	r3, r0
    228a:	0018      	movs	r0, r3
    228c:	4b0a      	ldr	r3, [pc, #40]	; (22b8 <spi_enable+0x48>)
    228e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    2290:	46c0      	nop			; (mov r8, r8)
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	0018      	movs	r0, r3
    2296:	4b09      	ldr	r3, [pc, #36]	; (22bc <spi_enable+0x4c>)
    2298:	4798      	blx	r3
    229a:	1e03      	subs	r3, r0, #0
    229c:	d1f9      	bne.n	2292 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    229e:	68fb      	ldr	r3, [r7, #12]
    22a0:	681b      	ldr	r3, [r3, #0]
    22a2:	2202      	movs	r2, #2
    22a4:	431a      	orrs	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	601a      	str	r2, [r3, #0]
}
    22aa:	46c0      	nop			; (mov r8, r8)
    22ac:	46bd      	mov	sp, r7
    22ae:	b004      	add	sp, #16
    22b0:	bd80      	pop	{r7, pc}
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	00003aa5 	.word	0x00003aa5
    22b8:	00002119 	.word	0x00002119
    22bc:	00002145 	.word	0x00002145

000022c0 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    22c0:	b580      	push	{r7, lr}
    22c2:	b084      	sub	sp, #16
    22c4:	af00      	add	r7, sp, #0
    22c6:	6078      	str	r0, [r7, #4]
    22c8:	000a      	movs	r2, r1
    22ca:	1cfb      	adds	r3, r7, #3
    22cc:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    22ce:	230f      	movs	r3, #15
    22d0:	18fb      	adds	r3, r7, r3
    22d2:	2200      	movs	r2, #0
    22d4:	701a      	strb	r2, [r3, #0]
	while (size--) {
    22d6:	e038      	b.n	234a <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    22d8:	687b      	ldr	r3, [r7, #4]
    22da:	1c5a      	adds	r2, r3, #1
    22dc:	607a      	str	r2, [r7, #4]
    22de:	220e      	movs	r2, #14
    22e0:	18ba      	adds	r2, r7, r2
    22e2:	781b      	ldrb	r3, [r3, #0]
    22e4:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    22e6:	230d      	movs	r3, #13
    22e8:	18fb      	adds	r3, r7, r3
    22ea:	2200      	movs	r2, #0
    22ec:	701a      	strb	r2, [r3, #0]
    22ee:	e027      	b.n	2340 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    22f0:	230f      	movs	r3, #15
    22f2:	18fa      	adds	r2, r7, r3
    22f4:	230f      	movs	r3, #15
    22f6:	18fb      	adds	r3, r7, r3
    22f8:	781b      	ldrb	r3, [r3, #0]
    22fa:	18db      	adds	r3, r3, r3
    22fc:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    22fe:	230e      	movs	r3, #14
    2300:	18fa      	adds	r2, r7, r3
    2302:	230f      	movs	r3, #15
    2304:	18fb      	adds	r3, r7, r3
    2306:	7812      	ldrb	r2, [r2, #0]
    2308:	781b      	ldrb	r3, [r3, #0]
    230a:	4053      	eors	r3, r2
    230c:	b2db      	uxtb	r3, r3
    230e:	b25b      	sxtb	r3, r3
    2310:	2b00      	cmp	r3, #0
    2312:	da07      	bge.n	2324 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    2314:	230f      	movs	r3, #15
    2316:	18fb      	adds	r3, r7, r3
    2318:	220f      	movs	r2, #15
    231a:	18ba      	adds	r2, r7, r2
    231c:	7812      	ldrb	r2, [r2, #0]
    231e:	2109      	movs	r1, #9
    2320:	404a      	eors	r2, r1
    2322:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    2324:	230e      	movs	r3, #14
    2326:	18fa      	adds	r2, r7, r3
    2328:	230e      	movs	r3, #14
    232a:	18fb      	adds	r3, r7, r3
    232c:	781b      	ldrb	r3, [r3, #0]
    232e:	18db      	adds	r3, r3, r3
    2330:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    2332:	230d      	movs	r3, #13
    2334:	18fb      	adds	r3, r7, r3
    2336:	781a      	ldrb	r2, [r3, #0]
    2338:	230d      	movs	r3, #13
    233a:	18fb      	adds	r3, r7, r3
    233c:	3201      	adds	r2, #1
    233e:	701a      	strb	r2, [r3, #0]
    2340:	230d      	movs	r3, #13
    2342:	18fb      	adds	r3, r7, r3
    2344:	781b      	ldrb	r3, [r3, #0]
    2346:	2b07      	cmp	r3, #7
    2348:	d9d2      	bls.n	22f0 <sd_mmc_spi_crc7+0x30>
	while (size--) {
    234a:	1cfb      	adds	r3, r7, #3
    234c:	781b      	ldrb	r3, [r3, #0]
    234e:	1cfa      	adds	r2, r7, #3
    2350:	1e59      	subs	r1, r3, #1
    2352:	7011      	strb	r1, [r2, #0]
    2354:	2b00      	cmp	r3, #0
    2356:	d1bf      	bne.n	22d8 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    2358:	230f      	movs	r3, #15
    235a:	18fb      	adds	r3, r7, r3
    235c:	781b      	ldrb	r3, [r3, #0]
    235e:	005b      	lsls	r3, r3, #1
    2360:	b25b      	sxtb	r3, r3
    2362:	2201      	movs	r2, #1
    2364:	4313      	orrs	r3, r2
    2366:	b25a      	sxtb	r2, r3
    2368:	230f      	movs	r3, #15
    236a:	18fb      	adds	r3, r7, r3
    236c:	701a      	strb	r2, [r3, #0]
	return crc;
    236e:	230f      	movs	r3, #15
    2370:	18fb      	adds	r3, r7, r3
    2372:	781b      	ldrb	r3, [r3, #0]
}
    2374:	0018      	movs	r0, r3
    2376:	46bd      	mov	sp, r7
    2378:	b004      	add	sp, #16
    237a:	bd80      	pop	{r7, pc}

0000237c <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    237c:	b590      	push	{r4, r7, lr}
    237e:	b083      	sub	sp, #12
    2380:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    2382:	1c7b      	adds	r3, r7, #1
    2384:	22ff      	movs	r2, #255	; 0xff
    2386:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    2388:	1cbb      	adds	r3, r7, #2
    238a:	22ff      	movs	r2, #255	; 0xff
    238c:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    238e:	1cbb      	adds	r3, r7, #2
    2390:	881b      	ldrh	r3, [r3, #0]
    2392:	1c79      	adds	r1, r7, #1
    2394:	4811      	ldr	r0, [pc, #68]	; (23dc <sd_mmc_spi_wait_busy+0x60>)
    2396:	2201      	movs	r2, #1
    2398:	4c11      	ldr	r4, [pc, #68]	; (23e0 <sd_mmc_spi_wait_busy+0x64>)
    239a:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    239c:	4b11      	ldr	r3, [pc, #68]	; (23e4 <sd_mmc_spi_wait_busy+0x68>)
    239e:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    23a0:	1cbb      	adds	r3, r7, #2
    23a2:	881b      	ldrh	r3, [r3, #0]
    23a4:	1c79      	adds	r1, r7, #1
    23a6:	480d      	ldr	r0, [pc, #52]	; (23dc <sd_mmc_spi_wait_busy+0x60>)
    23a8:	2201      	movs	r2, #1
    23aa:	4c0d      	ldr	r4, [pc, #52]	; (23e0 <sd_mmc_spi_wait_busy+0x64>)
    23ac:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    23ae:	1cbb      	adds	r3, r7, #2
    23b0:	881b      	ldrh	r3, [r3, #0]
    23b2:	1c79      	adds	r1, r7, #1
    23b4:	4809      	ldr	r0, [pc, #36]	; (23dc <sd_mmc_spi_wait_busy+0x60>)
    23b6:	2201      	movs	r2, #1
    23b8:	4c09      	ldr	r4, [pc, #36]	; (23e0 <sd_mmc_spi_wait_busy+0x64>)
    23ba:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    23bc:	687b      	ldr	r3, [r7, #4]
    23be:	1e5a      	subs	r2, r3, #1
    23c0:	607a      	str	r2, [r7, #4]
    23c2:	2b00      	cmp	r3, #0
    23c4:	d101      	bne.n	23ca <sd_mmc_spi_wait_busy+0x4e>
			return false;
    23c6:	2300      	movs	r3, #0
    23c8:	e004      	b.n	23d4 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    23ca:	1c7b      	adds	r3, r7, #1
    23cc:	781b      	ldrb	r3, [r3, #0]
    23ce:	2bff      	cmp	r3, #255	; 0xff
    23d0:	d1ed      	bne.n	23ae <sd_mmc_spi_wait_busy+0x32>
	return true;
    23d2:	2301      	movs	r3, #1
}
    23d4:	0018      	movs	r0, r3
    23d6:	46bd      	mov	sp, r7
    23d8:	b003      	add	sp, #12
    23da:	bd90      	pop	{r4, r7, pc}
    23dc:	200000ec 	.word	0x200000ec
    23e0:	00004425 	.word	0x00004425
    23e4:	00030d40 	.word	0x00030d40

000023e8 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    23e8:	b590      	push	{r4, r7, lr}
    23ea:	b083      	sub	sp, #12
    23ec:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    23ee:	1cbb      	adds	r3, r7, #2
    23f0:	22ff      	movs	r2, #255	; 0xff
    23f2:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    23f4:	1c7b      	adds	r3, r7, #1
    23f6:	2200      	movs	r2, #0
    23f8:	701a      	strb	r2, [r3, #0]
	i = 500000;
    23fa:	4b18      	ldr	r3, [pc, #96]	; (245c <sd_mmc_spi_start_read_block+0x74>)
    23fc:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    23fe:	687b      	ldr	r3, [r7, #4]
    2400:	1e5a      	subs	r2, r3, #1
    2402:	607a      	str	r2, [r7, #4]
    2404:	2b00      	cmp	r3, #0
    2406:	d104      	bne.n	2412 <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    2408:	4b15      	ldr	r3, [pc, #84]	; (2460 <sd_mmc_spi_start_read_block+0x78>)
    240a:	2204      	movs	r2, #4
    240c:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    240e:	2300      	movs	r3, #0
    2410:	e020      	b.n	2454 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    2412:	1cbb      	adds	r3, r7, #2
    2414:	881b      	ldrh	r3, [r3, #0]
    2416:	1c79      	adds	r1, r7, #1
    2418:	4812      	ldr	r0, [pc, #72]	; (2464 <sd_mmc_spi_start_read_block+0x7c>)
    241a:	2201      	movs	r2, #1
    241c:	4c12      	ldr	r4, [pc, #72]	; (2468 <sd_mmc_spi_start_read_block+0x80>)
    241e:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    2420:	1c7b      	adds	r3, r7, #1
    2422:	781b      	ldrb	r3, [r3, #0]
    2424:	001a      	movs	r2, r3
    2426:	23f0      	movs	r3, #240	; 0xf0
    2428:	4013      	ands	r3, r2
    242a:	d10e      	bne.n	244a <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    242c:	1c7b      	adds	r3, r7, #1
    242e:	781b      	ldrb	r3, [r3, #0]
    2430:	001a      	movs	r2, r3
    2432:	2307      	movs	r3, #7
    2434:	4013      	ands	r3, r2
    2436:	d003      	beq.n	2440 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    2438:	4b09      	ldr	r3, [pc, #36]	; (2460 <sd_mmc_spi_start_read_block+0x78>)
    243a:	2207      	movs	r2, #7
    243c:	701a      	strb	r2, [r3, #0]
    243e:	e002      	b.n	2446 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    2440:	4b07      	ldr	r3, [pc, #28]	; (2460 <sd_mmc_spi_start_read_block+0x78>)
    2442:	220b      	movs	r2, #11
    2444:	701a      	strb	r2, [r3, #0]
			}
			return false;
    2446:	2300      	movs	r3, #0
    2448:	e004      	b.n	2454 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    244a:	1c7b      	adds	r3, r7, #1
    244c:	781b      	ldrb	r3, [r3, #0]
    244e:	2bfe      	cmp	r3, #254	; 0xfe
    2450:	d1d5      	bne.n	23fe <sd_mmc_spi_start_read_block+0x16>

	return true;
    2452:	2301      	movs	r3, #1
}
    2454:	0018      	movs	r0, r3
    2456:	46bd      	mov	sp, r7
    2458:	b003      	add	sp, #12
    245a:	bd90      	pop	{r4, r7, pc}
    245c:	0007a120 	.word	0x0007a120
    2460:	2000012f 	.word	0x2000012f
    2464:	200000ec 	.word	0x200000ec
    2468:	00004425 	.word	0x00004425

0000246c <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    246c:	b590      	push	{r4, r7, lr}
    246e:	b083      	sub	sp, #12
    2470:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    2472:	1dbb      	adds	r3, r7, #6
    2474:	22ff      	movs	r2, #255	; 0xff
    2476:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    2478:	1dbb      	adds	r3, r7, #6
    247a:	881b      	ldrh	r3, [r3, #0]
    247c:	1d39      	adds	r1, r7, #4
    247e:	4804      	ldr	r0, [pc, #16]	; (2490 <sd_mmc_spi_stop_read_block+0x24>)
    2480:	2202      	movs	r2, #2
    2482:	4c04      	ldr	r4, [pc, #16]	; (2494 <sd_mmc_spi_stop_read_block+0x28>)
    2484:	47a0      	blx	r4
			dummy);
}
    2486:	46c0      	nop			; (mov r8, r8)
    2488:	46bd      	mov	sp, r7
    248a:	b003      	add	sp, #12
    248c:	bd90      	pop	{r4, r7, pc}
    248e:	46c0      	nop			; (mov r8, r8)
    2490:	200000ec 	.word	0x200000ec
    2494:	00004425 	.word	0x00004425

00002498 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    2498:	b580      	push	{r7, lr}
    249a:	b082      	sub	sp, #8
    249c:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    249e:	1dfb      	adds	r3, r7, #7
    24a0:	22ff      	movs	r2, #255	; 0xff
    24a2:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    24a4:	1df9      	adds	r1, r7, #7
    24a6:	4b0d      	ldr	r3, [pc, #52]	; (24dc <sd_mmc_spi_start_write_block+0x44>)
    24a8:	2201      	movs	r2, #1
    24aa:	0018      	movs	r0, r3
    24ac:	4b0c      	ldr	r3, [pc, #48]	; (24e0 <sd_mmc_spi_start_write_block+0x48>)
    24ae:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    24b0:	4b0c      	ldr	r3, [pc, #48]	; (24e4 <sd_mmc_spi_start_write_block+0x4c>)
    24b2:	881b      	ldrh	r3, [r3, #0]
    24b4:	2b01      	cmp	r3, #1
    24b6:	d103      	bne.n	24c0 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    24b8:	1dbb      	adds	r3, r7, #6
    24ba:	22fe      	movs	r2, #254	; 0xfe
    24bc:	701a      	strb	r2, [r3, #0]
    24be:	e002      	b.n	24c6 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    24c0:	1dbb      	adds	r3, r7, #6
    24c2:	22fc      	movs	r2, #252	; 0xfc
    24c4:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    24c6:	1db9      	adds	r1, r7, #6
    24c8:	4b04      	ldr	r3, [pc, #16]	; (24dc <sd_mmc_spi_start_write_block+0x44>)
    24ca:	2201      	movs	r2, #1
    24cc:	0018      	movs	r0, r3
    24ce:	4b04      	ldr	r3, [pc, #16]	; (24e0 <sd_mmc_spi_start_write_block+0x48>)
    24d0:	4798      	blx	r3
}
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	46bd      	mov	sp, r7
    24d6:	b002      	add	sp, #8
    24d8:	bd80      	pop	{r7, pc}
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	200000ec 	.word	0x200000ec
    24e0:	00004649 	.word	0x00004649
    24e4:	2000013a 	.word	0x2000013a

000024e8 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    24e8:	b590      	push	{r4, r7, lr}
    24ea:	b083      	sub	sp, #12
    24ec:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    24ee:	1dbb      	adds	r3, r7, #6
    24f0:	22ff      	movs	r2, #255	; 0xff
    24f2:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    24f4:	1cbb      	adds	r3, r7, #2
    24f6:	2201      	movs	r2, #1
    24f8:	4252      	negs	r2, r2
    24fa:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    24fc:	1cb9      	adds	r1, r7, #2
    24fe:	4b1b      	ldr	r3, [pc, #108]	; (256c <sd_mmc_spi_stop_write_block+0x84>)
    2500:	2202      	movs	r2, #2
    2502:	0018      	movs	r0, r3
    2504:	4b1a      	ldr	r3, [pc, #104]	; (2570 <sd_mmc_spi_stop_write_block+0x88>)
    2506:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    2508:	1dbb      	adds	r3, r7, #6
    250a:	881b      	ldrh	r3, [r3, #0]
    250c:	1d79      	adds	r1, r7, #5
    250e:	4817      	ldr	r0, [pc, #92]	; (256c <sd_mmc_spi_stop_write_block+0x84>)
    2510:	2201      	movs	r2, #1
    2512:	4c18      	ldr	r4, [pc, #96]	; (2574 <sd_mmc_spi_stop_write_block+0x8c>)
    2514:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    2516:	1d7b      	adds	r3, r7, #5
    2518:	781b      	ldrb	r3, [r3, #0]
    251a:	001a      	movs	r2, r3
    251c:	2310      	movs	r3, #16
    251e:	4013      	ands	r3, r2
    2520:	d105      	bne.n	252e <sd_mmc_spi_stop_write_block+0x46>
    2522:	1d7b      	adds	r3, r7, #5
    2524:	781b      	ldrb	r3, [r3, #0]
    2526:	001a      	movs	r2, r3
    2528:	2301      	movs	r3, #1
    252a:	4013      	ands	r3, r2
    252c:	d104      	bne.n	2538 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    252e:	4b12      	ldr	r3, [pc, #72]	; (2578 <sd_mmc_spi_stop_write_block+0x90>)
    2530:	2201      	movs	r2, #1
    2532:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    2534:	2300      	movs	r3, #0
    2536:	e014      	b.n	2562 <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    2538:	1d7b      	adds	r3, r7, #5
    253a:	781b      	ldrb	r3, [r3, #0]
    253c:	001a      	movs	r2, r3
    253e:	231e      	movs	r3, #30
    2540:	4013      	ands	r3, r2
    2542:	2b04      	cmp	r3, #4
    2544:	d00b      	beq.n	255e <sd_mmc_spi_stop_write_block+0x76>
    2546:	2b0a      	cmp	r3, #10
    2548:	d104      	bne.n	2554 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    254a:	4b0b      	ldr	r3, [pc, #44]	; (2578 <sd_mmc_spi_stop_write_block+0x90>)
    254c:	2208      	movs	r2, #8
    254e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    2550:	2300      	movs	r3, #0
    2552:	e006      	b.n	2562 <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    2554:	4b08      	ldr	r3, [pc, #32]	; (2578 <sd_mmc_spi_stop_write_block+0x90>)
    2556:	220a      	movs	r2, #10
    2558:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    255a:	2300      	movs	r3, #0
    255c:	e001      	b.n	2562 <sd_mmc_spi_stop_write_block+0x7a>
		break;
    255e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    2560:	2301      	movs	r3, #1
}
    2562:	0018      	movs	r0, r3
    2564:	46bd      	mov	sp, r7
    2566:	b003      	add	sp, #12
    2568:	bd90      	pop	{r4, r7, pc}
    256a:	46c0      	nop			; (mov r8, r8)
    256c:	200000ec 	.word	0x200000ec
    2570:	00004649 	.word	0x00004649
    2574:	00004425 	.word	0x00004425
    2578:	2000012f 	.word	0x2000012f

0000257c <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    257c:	b590      	push	{r4, r7, lr}
    257e:	b083      	sub	sp, #12
    2580:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    2582:	4b1d      	ldr	r3, [pc, #116]	; (25f8 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    2584:	881b      	ldrh	r3, [r3, #0]
    2586:	2b01      	cmp	r3, #1
    2588:	d101      	bne.n	258e <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    258a:	2301      	movs	r3, #1
    258c:	e030      	b.n	25f0 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    258e:	4b1a      	ldr	r3, [pc, #104]	; (25f8 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    2590:	881b      	ldrh	r3, [r3, #0]
    2592:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    2594:	4b19      	ldr	r3, [pc, #100]	; (25fc <sd_mmc_spi_stop_multiwrite_block+0x80>)
    2596:	681a      	ldr	r2, [r3, #0]
    2598:	4b19      	ldr	r3, [pc, #100]	; (2600 <sd_mmc_spi_stop_multiwrite_block+0x84>)
    259a:	881b      	ldrh	r3, [r3, #0]
    259c:	0019      	movs	r1, r3
    259e:	4b19      	ldr	r3, [pc, #100]	; (2604 <sd_mmc_spi_stop_multiwrite_block+0x88>)
    25a0:	0010      	movs	r0, r2
    25a2:	4798      	blx	r3
    25a4:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    25a6:	429c      	cmp	r4, r3
    25a8:	d901      	bls.n	25ae <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    25aa:	2301      	movs	r3, #1
    25ac:	e020      	b.n	25f0 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    25ae:	1dfb      	adds	r3, r7, #7
    25b0:	22ff      	movs	r2, #255	; 0xff
    25b2:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    25b4:	1df9      	adds	r1, r7, #7
    25b6:	4b14      	ldr	r3, [pc, #80]	; (2608 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    25b8:	2201      	movs	r2, #1
    25ba:	0018      	movs	r0, r3
    25bc:	4b13      	ldr	r3, [pc, #76]	; (260c <sd_mmc_spi_stop_multiwrite_block+0x90>)
    25be:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    25c0:	1dfb      	adds	r3, r7, #7
    25c2:	22fd      	movs	r2, #253	; 0xfd
    25c4:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    25c6:	1df9      	adds	r1, r7, #7
    25c8:	4b0f      	ldr	r3, [pc, #60]	; (2608 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    25ca:	2201      	movs	r2, #1
    25cc:	0018      	movs	r0, r3
    25ce:	4b0f      	ldr	r3, [pc, #60]	; (260c <sd_mmc_spi_stop_multiwrite_block+0x90>)
    25d0:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    25d2:	4b0f      	ldr	r3, [pc, #60]	; (2610 <sd_mmc_spi_stop_multiwrite_block+0x94>)
    25d4:	4798      	blx	r3
    25d6:	0003      	movs	r3, r0
    25d8:	001a      	movs	r2, r3
    25da:	2301      	movs	r3, #1
    25dc:	4053      	eors	r3, r2
    25de:	b2db      	uxtb	r3, r3
    25e0:	2b00      	cmp	r3, #0
    25e2:	d004      	beq.n	25ee <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    25e4:	4b0b      	ldr	r3, [pc, #44]	; (2614 <sd_mmc_spi_stop_multiwrite_block+0x98>)
    25e6:	2205      	movs	r2, #5
    25e8:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    25ea:	2300      	movs	r3, #0
    25ec:	e000      	b.n	25f0 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    25ee:	2301      	movs	r3, #1
}
    25f0:	0018      	movs	r0, r3
    25f2:	46bd      	mov	sp, r7
    25f4:	b003      	add	sp, #12
    25f6:	bd90      	pop	{r4, r7, pc}
    25f8:	2000013a 	.word	0x2000013a
    25fc:	20000134 	.word	0x20000134
    2600:	20000138 	.word	0x20000138
    2604:	0000a2ad 	.word	0x0000a2ad
    2608:	200000ec 	.word	0x200000ec
    260c:	00004649 	.word	0x00004649
    2610:	0000237d 	.word	0x0000237d
    2614:	2000012f 	.word	0x2000012f

00002618 <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    2618:	b580      	push	{r7, lr}
    261a:	af00      	add	r7, sp, #0
	spi_reset(&sd_mmc_master);
    261c:	4b03      	ldr	r3, [pc, #12]	; (262c <sd_mmc_deinit+0x14>)
    261e:	0018      	movs	r0, r3
    2620:	4b03      	ldr	r3, [pc, #12]	; (2630 <sd_mmc_deinit+0x18>)
    2622:	4798      	blx	r3
}
    2624:	46c0      	nop			; (mov r8, r8)
    2626:	46bd      	mov	sp, r7
    2628:	bd80      	pop	{r7, pc}
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	200000ec 	.word	0x200000ec
    2630:	00003f7d 	.word	0x00003f7d

00002634 <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    2634:	b580      	push	{r7, lr}
    2636:	b090      	sub	sp, #64	; 0x40
    2638:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    263a:	4b1f      	ldr	r3, [pc, #124]	; (26b8 <sd_mmc_spi_init+0x84>)
    263c:	2200      	movs	r2, #0
    263e:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2640:	233c      	movs	r3, #60	; 0x3c
    2642:	18fb      	adds	r3, r7, r3
    2644:	0018      	movs	r0, r3
    2646:	4b1d      	ldr	r3, [pc, #116]	; (26bc <sd_mmc_spi_init+0x88>)
    2648:	4798      	blx	r3
	//pin_conf.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    264a:	1d3b      	adds	r3, r7, #4
    264c:	0018      	movs	r0, r3
    264e:	4b1c      	ldr	r3, [pc, #112]	; (26c0 <sd_mmc_spi_init+0x8c>)
    2650:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    2652:	1d3b      	adds	r3, r7, #4
    2654:	2280      	movs	r2, #128	; 0x80
    2656:	0252      	lsls	r2, r2, #9
    2658:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    265a:	1d3b      	adds	r3, r7, #4
    265c:	4a19      	ldr	r2, [pc, #100]	; (26c4 <sd_mmc_spi_init+0x90>)
    265e:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    2660:	1d3b      	adds	r3, r7, #4
    2662:	4a19      	ldr	r2, [pc, #100]	; (26c8 <sd_mmc_spi_init+0x94>)
    2664:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    2666:	1d3b      	adds	r3, r7, #4
    2668:	4a18      	ldr	r2, [pc, #96]	; (26cc <sd_mmc_spi_init+0x98>)
    266a:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    266c:	1d3b      	adds	r3, r7, #4
    266e:	4a18      	ldr	r2, [pc, #96]	; (26d0 <sd_mmc_spi_init+0x9c>)
    2670:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    2672:	1d3b      	adds	r3, r7, #4
    2674:	2224      	movs	r2, #36	; 0x24
    2676:	2100      	movs	r1, #0
    2678:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    267a:	1d3b      	adds	r3, r7, #4
    267c:	4a15      	ldr	r2, [pc, #84]	; (26d4 <sd_mmc_spi_init+0xa0>)
    267e:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    2680:	1d3a      	adds	r2, r7, #4
    2682:	4915      	ldr	r1, [pc, #84]	; (26d8 <sd_mmc_spi_init+0xa4>)
    2684:	4b15      	ldr	r3, [pc, #84]	; (26dc <sd_mmc_spi_init+0xa8>)
    2686:	0018      	movs	r0, r3
    2688:	4b15      	ldr	r3, [pc, #84]	; (26e0 <sd_mmc_spi_init+0xac>)
    268a:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    268c:	4b13      	ldr	r3, [pc, #76]	; (26dc <sd_mmc_spi_init+0xa8>)
    268e:	0018      	movs	r0, r3
    2690:	4b14      	ldr	r3, [pc, #80]	; (26e4 <sd_mmc_spi_init+0xb0>)
    2692:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    2694:	4b14      	ldr	r3, [pc, #80]	; (26e8 <sd_mmc_spi_init+0xb4>)
    2696:	0018      	movs	r0, r3
    2698:	4b14      	ldr	r3, [pc, #80]	; (26ec <sd_mmc_spi_init+0xb8>)
    269a:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    269c:	4b14      	ldr	r3, [pc, #80]	; (26f0 <sd_mmc_spi_init+0xbc>)
    269e:	781a      	ldrb	r2, [r3, #0]
    26a0:	4b11      	ldr	r3, [pc, #68]	; (26e8 <sd_mmc_spi_init+0xb4>)
    26a2:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    26a4:	4a10      	ldr	r2, [pc, #64]	; (26e8 <sd_mmc_spi_init+0xb4>)
    26a6:	4b13      	ldr	r3, [pc, #76]	; (26f4 <sd_mmc_spi_init+0xc0>)
    26a8:	0011      	movs	r1, r2
    26aa:	0018      	movs	r0, r3
    26ac:	4b12      	ldr	r3, [pc, #72]	; (26f8 <sd_mmc_spi_init+0xc4>)
    26ae:	4798      	blx	r3
}
    26b0:	46c0      	nop			; (mov r8, r8)
    26b2:	46bd      	mov	sp, r7
    26b4:	b010      	add	sp, #64	; 0x40
    26b6:	bd80      	pop	{r7, pc}
    26b8:	2000012f 	.word	0x2000012f
    26bc:	000020a1 	.word	0x000020a1
    26c0:	00002165 	.word	0x00002165
    26c4:	00100002 	.word	0x00100002
    26c8:	00110002 	.word	0x00110002
    26cc:	00120002 	.word	0x00120002
    26d0:	00130002 	.word	0x00130002
    26d4:	00061a80 	.word	0x00061a80
    26d8:	42000c00 	.word	0x42000c00
    26dc:	200000ec 	.word	0x200000ec
    26e0:	00004295 	.word	0x00004295
    26e4:	00002271 	.word	0x00002271
    26e8:	2000012c 	.word	0x2000012c
    26ec:	000021e9 	.word	0x000021e9
    26f0:	20000008 	.word	0x20000008
    26f4:	20000128 	.word	0x20000128
    26f8:	0000220d 	.word	0x0000220d

000026fc <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    26fc:	b590      	push	{r4, r7, lr}
    26fe:	b083      	sub	sp, #12
    2700:	af00      	add	r7, sp, #0
    2702:	0004      	movs	r4, r0
    2704:	6039      	str	r1, [r7, #0]
    2706:	0010      	movs	r0, r2
    2708:	0019      	movs	r1, r3
    270a:	1dfb      	adds	r3, r7, #7
    270c:	1c22      	adds	r2, r4, #0
    270e:	701a      	strb	r2, [r3, #0]
    2710:	1dbb      	adds	r3, r7, #6
    2712:	1c02      	adds	r2, r0, #0
    2714:	701a      	strb	r2, [r3, #0]
    2716:	1d7b      	adds	r3, r7, #5
    2718:	1c0a      	adds	r2, r1, #0
    271a:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    271c:	4b13      	ldr	r3, [pc, #76]	; (276c <sd_mmc_spi_select_device+0x70>)
    271e:	2200      	movs	r2, #0
    2720:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    2722:	683b      	ldr	r3, [r7, #0]
    2724:	4a12      	ldr	r2, [pc, #72]	; (2770 <sd_mmc_spi_select_device+0x74>)
    2726:	4293      	cmp	r3, r2
    2728:	d907      	bls.n	273a <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    272a:	4b11      	ldr	r3, [pc, #68]	; (2770 <sd_mmc_spi_select_device+0x74>)
    272c:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    272e:	e004      	b.n	273a <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    2730:	683b      	ldr	r3, [r7, #0]
    2732:	08db      	lsrs	r3, r3, #3
    2734:	683a      	ldr	r2, [r7, #0]
    2736:	1ad3      	subs	r3, r2, r3
    2738:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    273a:	683a      	ldr	r2, [r7, #0]
    273c:	4b0d      	ldr	r3, [pc, #52]	; (2774 <sd_mmc_spi_select_device+0x78>)
    273e:	0011      	movs	r1, r2
    2740:	0018      	movs	r0, r3
    2742:	4b0d      	ldr	r3, [pc, #52]	; (2778 <sd_mmc_spi_select_device+0x7c>)
    2744:	4798      	blx	r3
    2746:	0003      	movs	r3, r0
    2748:	2b17      	cmp	r3, #23
    274a:	d0f1      	beq.n	2730 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    274c:	1dfb      	adds	r3, r7, #7
    274e:	781a      	ldrb	r2, [r3, #0]
    2750:	0013      	movs	r3, r2
    2752:	005b      	lsls	r3, r3, #1
    2754:	189b      	adds	r3, r3, r2
    2756:	4a09      	ldr	r2, [pc, #36]	; (277c <sd_mmc_spi_select_device+0x80>)
    2758:	1899      	adds	r1, r3, r2
    275a:	4b06      	ldr	r3, [pc, #24]	; (2774 <sd_mmc_spi_select_device+0x78>)
    275c:	2201      	movs	r2, #1
    275e:	0018      	movs	r0, r3
    2760:	4b07      	ldr	r3, [pc, #28]	; (2780 <sd_mmc_spi_select_device+0x84>)
    2762:	4798      	blx	r3
}
    2764:	46c0      	nop			; (mov r8, r8)
    2766:	46bd      	mov	sp, r7
    2768:	b003      	add	sp, #12
    276a:	bd90      	pop	{r4, r7, pc}
    276c:	2000012f 	.word	0x2000012f
    2770:	00989680 	.word	0x00989680
    2774:	200000ec 	.word	0x200000ec
    2778:	00003fbd 	.word	0x00003fbd
    277c:	20000128 	.word	0x20000128
    2780:	00004559 	.word	0x00004559

00002784 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    2784:	b580      	push	{r7, lr}
    2786:	b082      	sub	sp, #8
    2788:	af00      	add	r7, sp, #0
    278a:	0002      	movs	r2, r0
    278c:	1dfb      	adds	r3, r7, #7
    278e:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2790:	4b09      	ldr	r3, [pc, #36]	; (27b8 <sd_mmc_spi_deselect_device+0x34>)
    2792:	2200      	movs	r2, #0
    2794:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    2796:	1dfb      	adds	r3, r7, #7
    2798:	781a      	ldrb	r2, [r3, #0]
    279a:	0013      	movs	r3, r2
    279c:	005b      	lsls	r3, r3, #1
    279e:	189b      	adds	r3, r3, r2
    27a0:	4a06      	ldr	r2, [pc, #24]	; (27bc <sd_mmc_spi_deselect_device+0x38>)
    27a2:	1899      	adds	r1, r3, r2
    27a4:	4b06      	ldr	r3, [pc, #24]	; (27c0 <sd_mmc_spi_deselect_device+0x3c>)
    27a6:	2200      	movs	r2, #0
    27a8:	0018      	movs	r0, r3
    27aa:	4b06      	ldr	r3, [pc, #24]	; (27c4 <sd_mmc_spi_deselect_device+0x40>)
    27ac:	4798      	blx	r3
}
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	46bd      	mov	sp, r7
    27b2:	b002      	add	sp, #8
    27b4:	bd80      	pop	{r7, pc}
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	2000012f 	.word	0x2000012f
    27bc:	20000128 	.word	0x20000128
    27c0:	200000ec 	.word	0x200000ec
    27c4:	00004559 	.word	0x00004559

000027c8 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    27c8:	b580      	push	{r7, lr}
    27ca:	b082      	sub	sp, #8
    27cc:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    27ce:	1dbb      	adds	r3, r7, #6
    27d0:	22ff      	movs	r2, #255	; 0xff
    27d2:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    27d4:	4b0c      	ldr	r3, [pc, #48]	; (2808 <sd_mmc_spi_send_clock+0x40>)
    27d6:	2200      	movs	r2, #0
    27d8:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    27da:	1dfb      	adds	r3, r7, #7
    27dc:	2200      	movs	r2, #0
    27de:	701a      	strb	r2, [r3, #0]
    27e0:	e00a      	b.n	27f8 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    27e2:	1db9      	adds	r1, r7, #6
    27e4:	4b09      	ldr	r3, [pc, #36]	; (280c <sd_mmc_spi_send_clock+0x44>)
    27e6:	2201      	movs	r2, #1
    27e8:	0018      	movs	r0, r3
    27ea:	4b09      	ldr	r3, [pc, #36]	; (2810 <sd_mmc_spi_send_clock+0x48>)
    27ec:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    27ee:	1dfb      	adds	r3, r7, #7
    27f0:	781a      	ldrb	r2, [r3, #0]
    27f2:	1dfb      	adds	r3, r7, #7
    27f4:	3201      	adds	r2, #1
    27f6:	701a      	strb	r2, [r3, #0]
    27f8:	1dfb      	adds	r3, r7, #7
    27fa:	781b      	ldrb	r3, [r3, #0]
    27fc:	2b09      	cmp	r3, #9
    27fe:	d9f0      	bls.n	27e2 <sd_mmc_spi_send_clock+0x1a>
	}
}
    2800:	46c0      	nop			; (mov r8, r8)
    2802:	46bd      	mov	sp, r7
    2804:	b002      	add	sp, #8
    2806:	bd80      	pop	{r7, pc}
    2808:	2000012f 	.word	0x2000012f
    280c:	200000ec 	.word	0x200000ec
    2810:	00004649 	.word	0x00004649

00002814 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    2814:	b590      	push	{r4, r7, lr}
    2816:	b085      	sub	sp, #20
    2818:	af02      	add	r7, sp, #8
    281a:	6078      	str	r0, [r7, #4]
    281c:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    281e:	6839      	ldr	r1, [r7, #0]
    2820:	6878      	ldr	r0, [r7, #4]
    2822:	2300      	movs	r3, #0
    2824:	9300      	str	r3, [sp, #0]
    2826:	2300      	movs	r3, #0
    2828:	2200      	movs	r2, #0
    282a:	4c03      	ldr	r4, [pc, #12]	; (2838 <sd_mmc_spi_send_cmd+0x24>)
    282c:	47a0      	blx	r4
    282e:	0003      	movs	r3, r0
}
    2830:	0018      	movs	r0, r3
    2832:	46bd      	mov	sp, r7
    2834:	b003      	add	sp, #12
    2836:	bd90      	pop	{r4, r7, pc}
    2838:	0000283d 	.word	0x0000283d

0000283c <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    283c:	b590      	push	{r4, r7, lr}
    283e:	b089      	sub	sp, #36	; 0x24
    2840:	af00      	add	r7, sp, #0
    2842:	60f8      	str	r0, [r7, #12]
    2844:	60b9      	str	r1, [r7, #8]
    2846:	0019      	movs	r1, r3
    2848:	1dbb      	adds	r3, r7, #6
    284a:	801a      	strh	r2, [r3, #0]
    284c:	1d3b      	adds	r3, r7, #4
    284e:	1c0a      	adds	r2, r1, #0
    2850:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    2852:	231b      	movs	r3, #27
    2854:	18fb      	adds	r3, r7, r3
    2856:	22ff      	movs	r2, #255	; 0xff
    2858:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    285a:	231c      	movs	r3, #28
    285c:	18fb      	adds	r3, r7, r3
    285e:	22ff      	movs	r2, #255	; 0xff
    2860:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2862:	4b72      	ldr	r3, [pc, #456]	; (2a2c <sd_mmc_spi_adtc_start+0x1f0>)
    2864:	2200      	movs	r2, #0
    2866:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    2868:	68fb      	ldr	r3, [r7, #12]
    286a:	b2db      	uxtb	r3, r3
    286c:	223f      	movs	r2, #63	; 0x3f
    286e:	4013      	ands	r3, r2
    2870:	b2db      	uxtb	r3, r3
    2872:	2240      	movs	r2, #64	; 0x40
    2874:	4313      	orrs	r3, r2
    2876:	b2da      	uxtb	r2, r3
    2878:	2314      	movs	r3, #20
    287a:	18fb      	adds	r3, r7, r3
    287c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    287e:	68bb      	ldr	r3, [r7, #8]
    2880:	0e1b      	lsrs	r3, r3, #24
    2882:	b2da      	uxtb	r2, r3
    2884:	2314      	movs	r3, #20
    2886:	18fb      	adds	r3, r7, r3
    2888:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    288a:	68bb      	ldr	r3, [r7, #8]
    288c:	0c1b      	lsrs	r3, r3, #16
    288e:	b2da      	uxtb	r2, r3
    2890:	2314      	movs	r3, #20
    2892:	18fb      	adds	r3, r7, r3
    2894:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    2896:	68bb      	ldr	r3, [r7, #8]
    2898:	0a1b      	lsrs	r3, r3, #8
    289a:	b2da      	uxtb	r2, r3
    289c:	2314      	movs	r3, #20
    289e:	18fb      	adds	r3, r7, r3
    28a0:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    28a2:	68bb      	ldr	r3, [r7, #8]
    28a4:	b2da      	uxtb	r2, r3
    28a6:	2314      	movs	r3, #20
    28a8:	18fb      	adds	r3, r7, r3
    28aa:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    28ac:	2314      	movs	r3, #20
    28ae:	18fb      	adds	r3, r7, r3
    28b0:	2105      	movs	r1, #5
    28b2:	0018      	movs	r0, r3
    28b4:	4b5e      	ldr	r3, [pc, #376]	; (2a30 <sd_mmc_spi_adtc_start+0x1f4>)
    28b6:	4798      	blx	r3
    28b8:	0003      	movs	r3, r0
    28ba:	001a      	movs	r2, r3
    28bc:	2314      	movs	r3, #20
    28be:	18fb      	adds	r3, r7, r3
    28c0:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    28c2:	231b      	movs	r3, #27
    28c4:	18f9      	adds	r1, r7, r3
    28c6:	4b5b      	ldr	r3, [pc, #364]	; (2a34 <sd_mmc_spi_adtc_start+0x1f8>)
    28c8:	2201      	movs	r2, #1
    28ca:	0018      	movs	r0, r3
    28cc:	4b5a      	ldr	r3, [pc, #360]	; (2a38 <sd_mmc_spi_adtc_start+0x1fc>)
    28ce:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    28d0:	2314      	movs	r3, #20
    28d2:	18f9      	adds	r1, r7, r3
    28d4:	4b57      	ldr	r3, [pc, #348]	; (2a34 <sd_mmc_spi_adtc_start+0x1f8>)
    28d6:	2206      	movs	r2, #6
    28d8:	0018      	movs	r0, r3
    28da:	4b57      	ldr	r3, [pc, #348]	; (2a38 <sd_mmc_spi_adtc_start+0x1fc>)
    28dc:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    28de:	2313      	movs	r3, #19
    28e0:	18fb      	adds	r3, r7, r3
    28e2:	22ff      	movs	r2, #255	; 0xff
    28e4:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    28e6:	231c      	movs	r3, #28
    28e8:	18fb      	adds	r3, r7, r3
    28ea:	881b      	ldrh	r3, [r3, #0]
    28ec:	2213      	movs	r2, #19
    28ee:	18b9      	adds	r1, r7, r2
    28f0:	4850      	ldr	r0, [pc, #320]	; (2a34 <sd_mmc_spi_adtc_start+0x1f8>)
    28f2:	2201      	movs	r2, #1
    28f4:	4c51      	ldr	r4, [pc, #324]	; (2a3c <sd_mmc_spi_adtc_start+0x200>)
    28f6:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    28f8:	231f      	movs	r3, #31
    28fa:	18fb      	adds	r3, r7, r3
    28fc:	2207      	movs	r2, #7
    28fe:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2900:	231c      	movs	r3, #28
    2902:	18fb      	adds	r3, r7, r3
    2904:	881b      	ldrh	r3, [r3, #0]
    2906:	2213      	movs	r2, #19
    2908:	18b9      	adds	r1, r7, r2
    290a:	484a      	ldr	r0, [pc, #296]	; (2a34 <sd_mmc_spi_adtc_start+0x1f8>)
    290c:	2201      	movs	r2, #1
    290e:	4c4b      	ldr	r4, [pc, #300]	; (2a3c <sd_mmc_spi_adtc_start+0x200>)
    2910:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    2912:	2313      	movs	r3, #19
    2914:	18fb      	adds	r3, r7, r3
    2916:	781b      	ldrb	r3, [r3, #0]
    2918:	b25b      	sxtb	r3, r3
    291a:	2b00      	cmp	r3, #0
    291c:	da10      	bge.n	2940 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    291e:	231f      	movs	r3, #31
    2920:	18fb      	adds	r3, r7, r3
    2922:	221f      	movs	r2, #31
    2924:	18ba      	adds	r2, r7, r2
    2926:	7812      	ldrb	r2, [r2, #0]
    2928:	3a01      	subs	r2, #1
    292a:	701a      	strb	r2, [r3, #0]
    292c:	231f      	movs	r3, #31
    292e:	18fb      	adds	r3, r7, r3
    2930:	781b      	ldrb	r3, [r3, #0]
    2932:	2b00      	cmp	r3, #0
    2934:	d1e4      	bne.n	2900 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    2936:	4b3d      	ldr	r3, [pc, #244]	; (2a2c <sd_mmc_spi_adtc_start+0x1f0>)
    2938:	2202      	movs	r2, #2
    293a:	701a      	strb	r2, [r3, #0]
			return false;
    293c:	2300      	movs	r3, #0
    293e:	e070      	b.n	2a22 <sd_mmc_spi_adtc_start+0x1e6>
			break;
    2940:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    2942:	2313      	movs	r3, #19
    2944:	18fb      	adds	r3, r7, r3
    2946:	781b      	ldrb	r3, [r3, #0]
    2948:	001a      	movs	r2, r3
    294a:	4b3d      	ldr	r3, [pc, #244]	; (2a40 <sd_mmc_spi_adtc_start+0x204>)
    294c:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    294e:	2313      	movs	r3, #19
    2950:	18fb      	adds	r3, r7, r3
    2952:	781b      	ldrb	r3, [r3, #0]
    2954:	001a      	movs	r2, r3
    2956:	2308      	movs	r3, #8
    2958:	4013      	ands	r3, r2
    295a:	d004      	beq.n	2966 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    295c:	4b33      	ldr	r3, [pc, #204]	; (2a2c <sd_mmc_spi_adtc_start+0x1f0>)
    295e:	2206      	movs	r2, #6
    2960:	701a      	strb	r2, [r3, #0]
		return false;
    2962:	2300      	movs	r3, #0
    2964:	e05d      	b.n	2a22 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    2966:	2313      	movs	r3, #19
    2968:	18fb      	adds	r3, r7, r3
    296a:	781b      	ldrb	r3, [r3, #0]
    296c:	001a      	movs	r2, r3
    296e:	2304      	movs	r3, #4
    2970:	4013      	ands	r3, r2
    2972:	d004      	beq.n	297e <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    2974:	4b2d      	ldr	r3, [pc, #180]	; (2a2c <sd_mmc_spi_adtc_start+0x1f0>)
    2976:	2209      	movs	r2, #9
    2978:	701a      	strb	r2, [r3, #0]
		return false;
    297a:	2300      	movs	r3, #0
    297c:	e051      	b.n	2a22 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    297e:	2313      	movs	r3, #19
    2980:	18fb      	adds	r3, r7, r3
    2982:	781b      	ldrb	r3, [r3, #0]
    2984:	001a      	movs	r2, r3
    2986:	2301      	movs	r3, #1
    2988:	439a      	bics	r2, r3
    298a:	1e13      	subs	r3, r2, #0
    298c:	d004      	beq.n	2998 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    298e:	4b27      	ldr	r3, [pc, #156]	; (2a2c <sd_mmc_spi_adtc_start+0x1f0>)
    2990:	2201      	movs	r2, #1
    2992:	701a      	strb	r2, [r3, #0]
		return false;
    2994:	2300      	movs	r3, #0
    2996:	e044      	b.n	2a22 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    2998:	68fa      	ldr	r2, [r7, #12]
    299a:	2380      	movs	r3, #128	; 0x80
    299c:	019b      	lsls	r3, r3, #6
    299e:	4013      	ands	r3, r2
    29a0:	d00d      	beq.n	29be <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    29a2:	4b28      	ldr	r3, [pc, #160]	; (2a44 <sd_mmc_spi_adtc_start+0x208>)
    29a4:	4798      	blx	r3
    29a6:	0003      	movs	r3, r0
    29a8:	001a      	movs	r2, r3
    29aa:	2301      	movs	r3, #1
    29ac:	4053      	eors	r3, r2
    29ae:	b2db      	uxtb	r3, r3
    29b0:	2b00      	cmp	r3, #0
    29b2:	d004      	beq.n	29be <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    29b4:	4b1d      	ldr	r3, [pc, #116]	; (2a2c <sd_mmc_spi_adtc_start+0x1f0>)
    29b6:	2203      	movs	r2, #3
    29b8:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    29ba:	2300      	movs	r3, #0
    29bc:	e031      	b.n	2a22 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    29be:	68fa      	ldr	r2, [r7, #12]
    29c0:	2380      	movs	r3, #128	; 0x80
    29c2:	009b      	lsls	r3, r3, #2
    29c4:	4013      	ands	r3, r2
    29c6:	d00e      	beq.n	29e6 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    29c8:	4b1d      	ldr	r3, [pc, #116]	; (2a40 <sd_mmc_spi_adtc_start+0x204>)
    29ca:	2200      	movs	r2, #0
    29cc:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    29ce:	231c      	movs	r3, #28
    29d0:	18fb      	adds	r3, r7, r3
    29d2:	881b      	ldrh	r3, [r3, #0]
    29d4:	491a      	ldr	r1, [pc, #104]	; (2a40 <sd_mmc_spi_adtc_start+0x204>)
    29d6:	4817      	ldr	r0, [pc, #92]	; (2a34 <sd_mmc_spi_adtc_start+0x1f8>)
    29d8:	2201      	movs	r2, #1
    29da:	4c18      	ldr	r4, [pc, #96]	; (2a3c <sd_mmc_spi_adtc_start+0x200>)
    29dc:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    29de:	4b18      	ldr	r3, [pc, #96]	; (2a40 <sd_mmc_spi_adtc_start+0x204>)
    29e0:	681a      	ldr	r2, [r3, #0]
    29e2:	4b17      	ldr	r3, [pc, #92]	; (2a40 <sd_mmc_spi_adtc_start+0x204>)
    29e4:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    29e6:	68fa      	ldr	r2, [r7, #12]
    29e8:	2380      	movs	r3, #128	; 0x80
    29ea:	00db      	lsls	r3, r3, #3
    29ec:	4013      	ands	r3, r2
    29ee:	d00c      	beq.n	2a0a <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    29f0:	231c      	movs	r3, #28
    29f2:	18fb      	adds	r3, r7, r3
    29f4:	881b      	ldrh	r3, [r3, #0]
    29f6:	4912      	ldr	r1, [pc, #72]	; (2a40 <sd_mmc_spi_adtc_start+0x204>)
    29f8:	480e      	ldr	r0, [pc, #56]	; (2a34 <sd_mmc_spi_adtc_start+0x1f8>)
    29fa:	2204      	movs	r2, #4
    29fc:	4c0f      	ldr	r4, [pc, #60]	; (2a3c <sd_mmc_spi_adtc_start+0x200>)
    29fe:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    2a00:	4b0f      	ldr	r3, [pc, #60]	; (2a40 <sd_mmc_spi_adtc_start+0x204>)
    2a02:	681b      	ldr	r3, [r3, #0]
    2a04:	ba1a      	rev	r2, r3
    2a06:	4b0e      	ldr	r3, [pc, #56]	; (2a40 <sd_mmc_spi_adtc_start+0x204>)
    2a08:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    2a0a:	4b0f      	ldr	r3, [pc, #60]	; (2a48 <sd_mmc_spi_adtc_start+0x20c>)
    2a0c:	1dba      	adds	r2, r7, #6
    2a0e:	8812      	ldrh	r2, [r2, #0]
    2a10:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    2a12:	4b0e      	ldr	r3, [pc, #56]	; (2a4c <sd_mmc_spi_adtc_start+0x210>)
    2a14:	1d3a      	adds	r2, r7, #4
    2a16:	8812      	ldrh	r2, [r2, #0]
    2a18:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    2a1a:	4b0d      	ldr	r3, [pc, #52]	; (2a50 <sd_mmc_spi_adtc_start+0x214>)
    2a1c:	2200      	movs	r2, #0
    2a1e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    2a20:	2301      	movs	r3, #1
}
    2a22:	0018      	movs	r0, r3
    2a24:	46bd      	mov	sp, r7
    2a26:	b009      	add	sp, #36	; 0x24
    2a28:	bd90      	pop	{r4, r7, pc}
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	2000012f 	.word	0x2000012f
    2a30:	000022c1 	.word	0x000022c1
    2a34:	200000ec 	.word	0x200000ec
    2a38:	00004649 	.word	0x00004649
    2a3c:	00004425 	.word	0x00004425
    2a40:	20000130 	.word	0x20000130
    2a44:	0000237d 	.word	0x0000237d
    2a48:	20000138 	.word	0x20000138
    2a4c:	2000013a 	.word	0x2000013a
    2a50:	20000134 	.word	0x20000134

00002a54 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    2a54:	b580      	push	{r7, lr}
    2a56:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    2a58:	4b02      	ldr	r3, [pc, #8]	; (2a64 <sd_mmc_spi_get_response+0x10>)
    2a5a:	681b      	ldr	r3, [r3, #0]
}
    2a5c:	0018      	movs	r0, r3
    2a5e:	46bd      	mov	sp, r7
    2a60:	bd80      	pop	{r7, pc}
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	20000130 	.word	0x20000130

00002a68 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    2a68:	b590      	push	{r4, r7, lr}
    2a6a:	b085      	sub	sp, #20
    2a6c:	af00      	add	r7, sp, #0
    2a6e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    2a70:	230e      	movs	r3, #14
    2a72:	18fb      	adds	r3, r7, r3
    2a74:	22ff      	movs	r2, #255	; 0xff
    2a76:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2a78:	4b1c      	ldr	r3, [pc, #112]	; (2aec <sd_mmc_spi_read_word+0x84>)
    2a7a:	2200      	movs	r2, #0
    2a7c:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    2a7e:	4b1c      	ldr	r3, [pc, #112]	; (2af0 <sd_mmc_spi_read_word+0x88>)
    2a80:	681a      	ldr	r2, [r3, #0]
    2a82:	4b1c      	ldr	r3, [pc, #112]	; (2af4 <sd_mmc_spi_read_word+0x8c>)
    2a84:	881b      	ldrh	r3, [r3, #0]
    2a86:	0019      	movs	r1, r3
    2a88:	4b1b      	ldr	r3, [pc, #108]	; (2af8 <sd_mmc_spi_read_word+0x90>)
    2a8a:	0010      	movs	r0, r2
    2a8c:	4798      	blx	r3
    2a8e:	1e0b      	subs	r3, r1, #0
    2a90:	d10a      	bne.n	2aa8 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    2a92:	4b1a      	ldr	r3, [pc, #104]	; (2afc <sd_mmc_spi_read_word+0x94>)
    2a94:	4798      	blx	r3
    2a96:	0003      	movs	r3, r0
    2a98:	001a      	movs	r2, r3
    2a9a:	2301      	movs	r3, #1
    2a9c:	4053      	eors	r3, r2
    2a9e:	b2db      	uxtb	r3, r3
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	d001      	beq.n	2aa8 <sd_mmc_spi_read_word+0x40>
			return false;
    2aa4:	2300      	movs	r3, #0
    2aa6:	e01d      	b.n	2ae4 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    2aa8:	230e      	movs	r3, #14
    2aaa:	18fb      	adds	r3, r7, r3
    2aac:	881b      	ldrh	r3, [r3, #0]
    2aae:	1d39      	adds	r1, r7, #4
    2ab0:	4813      	ldr	r0, [pc, #76]	; (2b00 <sd_mmc_spi_read_word+0x98>)
    2ab2:	2204      	movs	r2, #4
    2ab4:	4c13      	ldr	r4, [pc, #76]	; (2b04 <sd_mmc_spi_read_word+0x9c>)
    2ab6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    2ab8:	687b      	ldr	r3, [r7, #4]
    2aba:	687a      	ldr	r2, [r7, #4]
    2abc:	6812      	ldr	r2, [r2, #0]
    2abe:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    2ac0:	4b0b      	ldr	r3, [pc, #44]	; (2af0 <sd_mmc_spi_read_word+0x88>)
    2ac2:	681b      	ldr	r3, [r3, #0]
    2ac4:	1d1a      	adds	r2, r3, #4
    2ac6:	4b0a      	ldr	r3, [pc, #40]	; (2af0 <sd_mmc_spi_read_word+0x88>)
    2ac8:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    2aca:	4b09      	ldr	r3, [pc, #36]	; (2af0 <sd_mmc_spi_read_word+0x88>)
    2acc:	681a      	ldr	r2, [r3, #0]
    2ace:	4b09      	ldr	r3, [pc, #36]	; (2af4 <sd_mmc_spi_read_word+0x8c>)
    2ad0:	881b      	ldrh	r3, [r3, #0]
    2ad2:	0019      	movs	r1, r3
    2ad4:	4b08      	ldr	r3, [pc, #32]	; (2af8 <sd_mmc_spi_read_word+0x90>)
    2ad6:	0010      	movs	r0, r2
    2ad8:	4798      	blx	r3
    2ada:	1e0b      	subs	r3, r1, #0
    2adc:	d101      	bne.n	2ae2 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    2ade:	4b0a      	ldr	r3, [pc, #40]	; (2b08 <sd_mmc_spi_read_word+0xa0>)
    2ae0:	4798      	blx	r3
	}
	return true;
    2ae2:	2301      	movs	r3, #1
}
    2ae4:	0018      	movs	r0, r3
    2ae6:	46bd      	mov	sp, r7
    2ae8:	b005      	add	sp, #20
    2aea:	bd90      	pop	{r4, r7, pc}
    2aec:	2000012f 	.word	0x2000012f
    2af0:	20000134 	.word	0x20000134
    2af4:	20000138 	.word	0x20000138
    2af8:	0000a3b9 	.word	0x0000a3b9
    2afc:	000023e9 	.word	0x000023e9
    2b00:	200000ec 	.word	0x200000ec
    2b04:	00004425 	.word	0x00004425
    2b08:	0000246d 	.word	0x0000246d

00002b0c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    2b0c:	b590      	push	{r4, r7, lr}
    2b0e:	b085      	sub	sp, #20
    2b10:	af00      	add	r7, sp, #0
    2b12:	6078      	str	r0, [r7, #4]
    2b14:	000a      	movs	r2, r1
    2b16:	1cbb      	adds	r3, r7, #2
    2b18:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    2b1a:	230a      	movs	r3, #10
    2b1c:	18fb      	adds	r3, r7, r3
    2b1e:	22ff      	movs	r2, #255	; 0xff
    2b20:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2b22:	4b1c      	ldr	r3, [pc, #112]	; (2b94 <sd_mmc_spi_start_read_blocks+0x88>)
    2b24:	2200      	movs	r2, #0
    2b26:	701a      	strb	r2, [r3, #0]
	pos = 0;
    2b28:	2300      	movs	r3, #0
    2b2a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    2b2c:	e025      	b.n	2b7a <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    2b2e:	4b1a      	ldr	r3, [pc, #104]	; (2b98 <sd_mmc_spi_start_read_blocks+0x8c>)
    2b30:	4798      	blx	r3
    2b32:	0003      	movs	r3, r0
    2b34:	001a      	movs	r2, r3
    2b36:	2301      	movs	r3, #1
    2b38:	4053      	eors	r3, r2
    2b3a:	b2db      	uxtb	r3, r3
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d001      	beq.n	2b44 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    2b40:	2300      	movs	r3, #0
    2b42:	e022      	b.n	2b8a <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    2b44:	687a      	ldr	r2, [r7, #4]
    2b46:	68fb      	ldr	r3, [r7, #12]
    2b48:	18d1      	adds	r1, r2, r3
    2b4a:	4b14      	ldr	r3, [pc, #80]	; (2b9c <sd_mmc_spi_start_read_blocks+0x90>)
    2b4c:	881a      	ldrh	r2, [r3, #0]
    2b4e:	230a      	movs	r3, #10
    2b50:	18fb      	adds	r3, r7, r3
    2b52:	881b      	ldrh	r3, [r3, #0]
    2b54:	4812      	ldr	r0, [pc, #72]	; (2ba0 <sd_mmc_spi_start_read_blocks+0x94>)
    2b56:	4c13      	ldr	r4, [pc, #76]	; (2ba4 <sd_mmc_spi_start_read_blocks+0x98>)
    2b58:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    2b5a:	4b10      	ldr	r3, [pc, #64]	; (2b9c <sd_mmc_spi_start_read_blocks+0x90>)
    2b5c:	881b      	ldrh	r3, [r3, #0]
    2b5e:	001a      	movs	r2, r3
    2b60:	68fb      	ldr	r3, [r7, #12]
    2b62:	189b      	adds	r3, r3, r2
    2b64:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    2b66:	4b0d      	ldr	r3, [pc, #52]	; (2b9c <sd_mmc_spi_start_read_blocks+0x90>)
    2b68:	881b      	ldrh	r3, [r3, #0]
    2b6a:	001a      	movs	r2, r3
    2b6c:	4b0e      	ldr	r3, [pc, #56]	; (2ba8 <sd_mmc_spi_start_read_blocks+0x9c>)
    2b6e:	681b      	ldr	r3, [r3, #0]
    2b70:	18d2      	adds	r2, r2, r3
    2b72:	4b0d      	ldr	r3, [pc, #52]	; (2ba8 <sd_mmc_spi_start_read_blocks+0x9c>)
    2b74:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    2b76:	4b0d      	ldr	r3, [pc, #52]	; (2bac <sd_mmc_spi_start_read_blocks+0xa0>)
    2b78:	4798      	blx	r3
	while (nb_block--) {
    2b7a:	1cbb      	adds	r3, r7, #2
    2b7c:	881b      	ldrh	r3, [r3, #0]
    2b7e:	1cba      	adds	r2, r7, #2
    2b80:	1e59      	subs	r1, r3, #1
    2b82:	8011      	strh	r1, [r2, #0]
    2b84:	2b00      	cmp	r3, #0
    2b86:	d1d2      	bne.n	2b2e <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    2b88:	2301      	movs	r3, #1
}
    2b8a:	0018      	movs	r0, r3
    2b8c:	46bd      	mov	sp, r7
    2b8e:	b005      	add	sp, #20
    2b90:	bd90      	pop	{r4, r7, pc}
    2b92:	46c0      	nop			; (mov r8, r8)
    2b94:	2000012f 	.word	0x2000012f
    2b98:	000023e9 	.word	0x000023e9
    2b9c:	20000138 	.word	0x20000138
    2ba0:	200000ec 	.word	0x200000ec
    2ba4:	00004425 	.word	0x00004425
    2ba8:	20000134 	.word	0x20000134
    2bac:	0000246d 	.word	0x0000246d

00002bb0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    2bb0:	b580      	push	{r7, lr}
    2bb2:	af00      	add	r7, sp, #0
	return true;
    2bb4:	2301      	movs	r3, #1
}
    2bb6:	0018      	movs	r0, r3
    2bb8:	46bd      	mov	sp, r7
    2bba:	bd80      	pop	{r7, pc}

00002bbc <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    2bbc:	b580      	push	{r7, lr}
    2bbe:	b084      	sub	sp, #16
    2bc0:	af00      	add	r7, sp, #0
    2bc2:	6078      	str	r0, [r7, #4]
    2bc4:	000a      	movs	r2, r1
    2bc6:	1cbb      	adds	r3, r7, #2
    2bc8:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2bca:	4b24      	ldr	r3, [pc, #144]	; (2c5c <sd_mmc_spi_start_write_blocks+0xa0>)
    2bcc:	2200      	movs	r2, #0
    2bce:	701a      	strb	r2, [r3, #0]
	pos = 0;
    2bd0:	2300      	movs	r3, #0
    2bd2:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    2bd4:	e035      	b.n	2c42 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    2bd6:	4b22      	ldr	r3, [pc, #136]	; (2c60 <sd_mmc_spi_start_write_blocks+0xa4>)
    2bd8:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    2bda:	687a      	ldr	r2, [r7, #4]
    2bdc:	68fb      	ldr	r3, [r7, #12]
    2bde:	18d1      	adds	r1, r2, r3
    2be0:	4b20      	ldr	r3, [pc, #128]	; (2c64 <sd_mmc_spi_start_write_blocks+0xa8>)
    2be2:	881a      	ldrh	r2, [r3, #0]
    2be4:	4b20      	ldr	r3, [pc, #128]	; (2c68 <sd_mmc_spi_start_write_blocks+0xac>)
    2be6:	0018      	movs	r0, r3
    2be8:	4b20      	ldr	r3, [pc, #128]	; (2c6c <sd_mmc_spi_start_write_blocks+0xb0>)
    2bea:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    2bec:	4b1d      	ldr	r3, [pc, #116]	; (2c64 <sd_mmc_spi_start_write_blocks+0xa8>)
    2bee:	881b      	ldrh	r3, [r3, #0]
    2bf0:	001a      	movs	r2, r3
    2bf2:	68fb      	ldr	r3, [r7, #12]
    2bf4:	189b      	adds	r3, r3, r2
    2bf6:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    2bf8:	4b1a      	ldr	r3, [pc, #104]	; (2c64 <sd_mmc_spi_start_write_blocks+0xa8>)
    2bfa:	881b      	ldrh	r3, [r3, #0]
    2bfc:	001a      	movs	r2, r3
    2bfe:	4b1c      	ldr	r3, [pc, #112]	; (2c70 <sd_mmc_spi_start_write_blocks+0xb4>)
    2c00:	681b      	ldr	r3, [r3, #0]
    2c02:	18d2      	adds	r2, r2, r3
    2c04:	4b1a      	ldr	r3, [pc, #104]	; (2c70 <sd_mmc_spi_start_write_blocks+0xb4>)
    2c06:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    2c08:	4b1a      	ldr	r3, [pc, #104]	; (2c74 <sd_mmc_spi_start_write_blocks+0xb8>)
    2c0a:	4798      	blx	r3
    2c0c:	0003      	movs	r3, r0
    2c0e:	001a      	movs	r2, r3
    2c10:	2301      	movs	r3, #1
    2c12:	4053      	eors	r3, r2
    2c14:	b2db      	uxtb	r3, r3
    2c16:	2b00      	cmp	r3, #0
    2c18:	d001      	beq.n	2c1e <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    2c1a:	2300      	movs	r3, #0
    2c1c:	e019      	b.n	2c52 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    2c1e:	1cbb      	adds	r3, r7, #2
    2c20:	881b      	ldrh	r3, [r3, #0]
    2c22:	2b00      	cmp	r3, #0
    2c24:	d00d      	beq.n	2c42 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    2c26:	4b14      	ldr	r3, [pc, #80]	; (2c78 <sd_mmc_spi_start_write_blocks+0xbc>)
    2c28:	4798      	blx	r3
    2c2a:	0003      	movs	r3, r0
    2c2c:	001a      	movs	r2, r3
    2c2e:	2301      	movs	r3, #1
    2c30:	4053      	eors	r3, r2
    2c32:	b2db      	uxtb	r3, r3
    2c34:	2b00      	cmp	r3, #0
    2c36:	d004      	beq.n	2c42 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2c38:	4b08      	ldr	r3, [pc, #32]	; (2c5c <sd_mmc_spi_start_write_blocks+0xa0>)
    2c3a:	2205      	movs	r2, #5
    2c3c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    2c3e:	2300      	movs	r3, #0
    2c40:	e007      	b.n	2c52 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    2c42:	1cbb      	adds	r3, r7, #2
    2c44:	881b      	ldrh	r3, [r3, #0]
    2c46:	1cba      	adds	r2, r7, #2
    2c48:	1e59      	subs	r1, r3, #1
    2c4a:	8011      	strh	r1, [r2, #0]
    2c4c:	2b00      	cmp	r3, #0
    2c4e:	d1c2      	bne.n	2bd6 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    2c50:	2301      	movs	r3, #1
}
    2c52:	0018      	movs	r0, r3
    2c54:	46bd      	mov	sp, r7
    2c56:	b004      	add	sp, #16
    2c58:	bd80      	pop	{r7, pc}
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	2000012f 	.word	0x2000012f
    2c60:	00002499 	.word	0x00002499
    2c64:	20000138 	.word	0x20000138
    2c68:	200000ec 	.word	0x200000ec
    2c6c:	00004649 	.word	0x00004649
    2c70:	20000134 	.word	0x20000134
    2c74:	000024e9 	.word	0x000024e9
    2c78:	0000237d 	.word	0x0000237d

00002c7c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    2c7c:	b580      	push	{r7, lr}
    2c7e:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    2c80:	4b09      	ldr	r3, [pc, #36]	; (2ca8 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    2c82:	4798      	blx	r3
    2c84:	0003      	movs	r3, r0
    2c86:	001a      	movs	r2, r3
    2c88:	2301      	movs	r3, #1
    2c8a:	4053      	eors	r3, r2
    2c8c:	b2db      	uxtb	r3, r3
    2c8e:	2b00      	cmp	r3, #0
    2c90:	d004      	beq.n	2c9c <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2c92:	4b06      	ldr	r3, [pc, #24]	; (2cac <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    2c94:	2205      	movs	r2, #5
    2c96:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    2c98:	2300      	movs	r3, #0
    2c9a:	e002      	b.n	2ca2 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    2c9c:	4b04      	ldr	r3, [pc, #16]	; (2cb0 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    2c9e:	4798      	blx	r3
    2ca0:	0003      	movs	r3, r0
}
    2ca2:	0018      	movs	r0, r3
    2ca4:	46bd      	mov	sp, r7
    2ca6:	bd80      	pop	{r7, pc}
    2ca8:	0000237d 	.word	0x0000237d
    2cac:	2000012f 	.word	0x2000012f
    2cb0:	0000257d 	.word	0x0000257d

00002cb4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    2cb4:	b580      	push	{r7, lr}
    2cb6:	b084      	sub	sp, #16
    2cb8:	af00      	add	r7, sp, #0
    2cba:	0002      	movs	r2, r0
    2cbc:	1dfb      	adds	r3, r7, #7
    2cbe:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    2cc0:	1dfb      	adds	r3, r7, #7
    2cc2:	781b      	ldrb	r3, [r3, #0]
    2cc4:	2b00      	cmp	r3, #0
    2cc6:	d108      	bne.n	2cda <mem_test_unit_ready+0x26>
    2cc8:	1dfb      	adds	r3, r7, #7
    2cca:	781a      	ldrb	r2, [r3, #0]
    2ccc:	4b08      	ldr	r3, [pc, #32]	; (2cf0 <mem_test_unit_ready+0x3c>)
    2cce:	0152      	lsls	r2, r2, #5
    2cd0:	58d3      	ldr	r3, [r2, r3]
    2cd2:	4798      	blx	r3
    2cd4:	0003      	movs	r3, r0
    2cd6:	001a      	movs	r2, r3
    2cd8:	e000      	b.n	2cdc <mem_test_unit_ready+0x28>
    2cda:	2201      	movs	r2, #1
  status =
    2cdc:	230f      	movs	r3, #15
    2cde:	18fb      	adds	r3, r7, r3
    2ce0:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    2ce2:	230f      	movs	r3, #15
    2ce4:	18fb      	adds	r3, r7, r3
    2ce6:	781b      	ldrb	r3, [r3, #0]
}
    2ce8:	0018      	movs	r0, r3
    2cea:	46bd      	mov	sp, r7
    2cec:	b004      	add	sp, #16
    2cee:	bd80      	pop	{r7, pc}
    2cf0:	0000aed8 	.word	0x0000aed8

00002cf4 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    2cf4:	b580      	push	{r7, lr}
    2cf6:	b084      	sub	sp, #16
    2cf8:	af00      	add	r7, sp, #0
    2cfa:	0002      	movs	r2, r0
    2cfc:	6039      	str	r1, [r7, #0]
    2cfe:	1dfb      	adds	r3, r7, #7
    2d00:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    2d02:	1dfb      	adds	r3, r7, #7
    2d04:	781b      	ldrb	r3, [r3, #0]
    2d06:	2b00      	cmp	r3, #0
    2d08:	d10c      	bne.n	2d24 <mem_read_capacity+0x30>
    2d0a:	1dfb      	adds	r3, r7, #7
    2d0c:	781b      	ldrb	r3, [r3, #0]
    2d0e:	4a0b      	ldr	r2, [pc, #44]	; (2d3c <mem_read_capacity+0x48>)
    2d10:	015b      	lsls	r3, r3, #5
    2d12:	18d3      	adds	r3, r2, r3
    2d14:	3304      	adds	r3, #4
    2d16:	681b      	ldr	r3, [r3, #0]
    2d18:	683a      	ldr	r2, [r7, #0]
    2d1a:	0010      	movs	r0, r2
    2d1c:	4798      	blx	r3
    2d1e:	0003      	movs	r3, r0
    2d20:	001a      	movs	r2, r3
    2d22:	e000      	b.n	2d26 <mem_read_capacity+0x32>
    2d24:	2201      	movs	r2, #1
  status =
    2d26:	230f      	movs	r3, #15
    2d28:	18fb      	adds	r3, r7, r3
    2d2a:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    2d2c:	230f      	movs	r3, #15
    2d2e:	18fb      	adds	r3, r7, r3
    2d30:	781b      	ldrb	r3, [r3, #0]
}
    2d32:	0018      	movs	r0, r3
    2d34:	46bd      	mov	sp, r7
    2d36:	b004      	add	sp, #16
    2d38:	bd80      	pop	{r7, pc}
    2d3a:	46c0      	nop			; (mov r8, r8)
    2d3c:	0000aed8 	.word	0x0000aed8

00002d40 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    2d40:	b580      	push	{r7, lr}
    2d42:	b084      	sub	sp, #16
    2d44:	af00      	add	r7, sp, #0
    2d46:	0002      	movs	r2, r0
    2d48:	1dfb      	adds	r3, r7, #7
    2d4a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    2d4c:	1dfb      	adds	r3, r7, #7
    2d4e:	781b      	ldrb	r3, [r3, #0]
    2d50:	425a      	negs	r2, r3
    2d52:	4153      	adcs	r3, r2
    2d54:	b2da      	uxtb	r2, r3
  sector_size =
    2d56:	230f      	movs	r3, #15
    2d58:	18fb      	adds	r3, r7, r3
    2d5a:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    2d5c:	230f      	movs	r3, #15
    2d5e:	18fb      	adds	r3, r7, r3
    2d60:	781b      	ldrb	r3, [r3, #0]
}
    2d62:	0018      	movs	r0, r3
    2d64:	46bd      	mov	sp, r7
    2d66:	b004      	add	sp, #16
    2d68:	bd80      	pop	{r7, pc}
	...

00002d6c <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    2d6c:	b580      	push	{r7, lr}
    2d6e:	b084      	sub	sp, #16
    2d70:	af00      	add	r7, sp, #0
    2d72:	0002      	movs	r2, r0
    2d74:	1dfb      	adds	r3, r7, #7
    2d76:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    2d78:	1dfb      	adds	r3, r7, #7
    2d7a:	781b      	ldrb	r3, [r3, #0]
    2d7c:	2b00      	cmp	r3, #0
    2d7e:	d109      	bne.n	2d94 <mem_wr_protect+0x28>
    2d80:	1dfb      	adds	r3, r7, #7
    2d82:	781b      	ldrb	r3, [r3, #0]
    2d84:	4a0a      	ldr	r2, [pc, #40]	; (2db0 <mem_wr_protect+0x44>)
    2d86:	015b      	lsls	r3, r3, #5
    2d88:	18d3      	adds	r3, r2, r3
    2d8a:	330c      	adds	r3, #12
    2d8c:	681b      	ldr	r3, [r3, #0]
    2d8e:	4798      	blx	r3
    2d90:	1e03      	subs	r3, r0, #0
    2d92:	d001      	beq.n	2d98 <mem_wr_protect+0x2c>
    2d94:	2201      	movs	r2, #1
    2d96:	e000      	b.n	2d9a <mem_wr_protect+0x2e>
    2d98:	2200      	movs	r2, #0
  wr_protect =
    2d9a:	230f      	movs	r3, #15
    2d9c:	18fb      	adds	r3, r7, r3
    2d9e:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    2da0:	230f      	movs	r3, #15
    2da2:	18fb      	adds	r3, r7, r3
    2da4:	781b      	ldrb	r3, [r3, #0]
}
    2da6:	0018      	movs	r0, r3
    2da8:	46bd      	mov	sp, r7
    2daa:	b004      	add	sp, #16
    2dac:	bd80      	pop	{r7, pc}
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	0000aed8 	.word	0x0000aed8

00002db4 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    2db4:	b580      	push	{r7, lr}
    2db6:	b086      	sub	sp, #24
    2db8:	af00      	add	r7, sp, #0
    2dba:	60b9      	str	r1, [r7, #8]
    2dbc:	607a      	str	r2, [r7, #4]
    2dbe:	230f      	movs	r3, #15
    2dc0:	18fb      	adds	r3, r7, r3
    2dc2:	1c02      	adds	r2, r0, #0
    2dc4:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    2dc6:	230f      	movs	r3, #15
    2dc8:	18fb      	adds	r3, r7, r3
    2dca:	781b      	ldrb	r3, [r3, #0]
    2dcc:	2b00      	cmp	r3, #0
    2dce:	d10e      	bne.n	2dee <memory_2_ram+0x3a>
    2dd0:	230f      	movs	r3, #15
    2dd2:	18fb      	adds	r3, r7, r3
    2dd4:	781b      	ldrb	r3, [r3, #0]
    2dd6:	4a0b      	ldr	r2, [pc, #44]	; (2e04 <memory_2_ram+0x50>)
    2dd8:	015b      	lsls	r3, r3, #5
    2dda:	18d3      	adds	r3, r2, r3
    2ddc:	3314      	adds	r3, #20
    2dde:	681b      	ldr	r3, [r3, #0]
    2de0:	6879      	ldr	r1, [r7, #4]
    2de2:	68ba      	ldr	r2, [r7, #8]
    2de4:	0010      	movs	r0, r2
    2de6:	4798      	blx	r3
    2de8:	0003      	movs	r3, r0
    2dea:	001a      	movs	r2, r3
    2dec:	e000      	b.n	2df0 <memory_2_ram+0x3c>
    2dee:	2201      	movs	r2, #1
  status =
    2df0:	2317      	movs	r3, #23
    2df2:	18fb      	adds	r3, r7, r3
    2df4:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
    2df6:	2317      	movs	r3, #23
    2df8:	18fb      	adds	r3, r7, r3
    2dfa:	781b      	ldrb	r3, [r3, #0]
}
    2dfc:	0018      	movs	r0, r3
    2dfe:	46bd      	mov	sp, r7
    2e00:	b006      	add	sp, #24
    2e02:	bd80      	pop	{r7, pc}
    2e04:	0000aed8 	.word	0x0000aed8

00002e08 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    2e08:	b580      	push	{r7, lr}
    2e0a:	b086      	sub	sp, #24
    2e0c:	af00      	add	r7, sp, #0
    2e0e:	60b9      	str	r1, [r7, #8]
    2e10:	607a      	str	r2, [r7, #4]
    2e12:	230f      	movs	r3, #15
    2e14:	18fb      	adds	r3, r7, r3
    2e16:	1c02      	adds	r2, r0, #0
    2e18:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    2e1a:	230f      	movs	r3, #15
    2e1c:	18fb      	adds	r3, r7, r3
    2e1e:	781b      	ldrb	r3, [r3, #0]
    2e20:	2b00      	cmp	r3, #0
    2e22:	d10e      	bne.n	2e42 <ram_2_memory+0x3a>
    2e24:	230f      	movs	r3, #15
    2e26:	18fb      	adds	r3, r7, r3
    2e28:	781b      	ldrb	r3, [r3, #0]
    2e2a:	4a0b      	ldr	r2, [pc, #44]	; (2e58 <ram_2_memory+0x50>)
    2e2c:	015b      	lsls	r3, r3, #5
    2e2e:	18d3      	adds	r3, r2, r3
    2e30:	3318      	adds	r3, #24
    2e32:	681b      	ldr	r3, [r3, #0]
    2e34:	6879      	ldr	r1, [r7, #4]
    2e36:	68ba      	ldr	r2, [r7, #8]
    2e38:	0010      	movs	r0, r2
    2e3a:	4798      	blx	r3
    2e3c:	0003      	movs	r3, r0
    2e3e:	001a      	movs	r2, r3
    2e40:	e000      	b.n	2e44 <ram_2_memory+0x3c>
    2e42:	2201      	movs	r2, #1
  status =
    2e44:	2317      	movs	r3, #23
    2e46:	18fb      	adds	r3, r7, r3
    2e48:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
    2e4a:	2317      	movs	r3, #23
    2e4c:	18fb      	adds	r3, r7, r3
    2e4e:	781b      	ldrb	r3, [r3, #0]
}
    2e50:	0018      	movs	r0, r3
    2e52:	46bd      	mov	sp, r7
    2e54:	b006      	add	sp, #24
    2e56:	bd80      	pop	{r7, pc}
    2e58:	0000aed8 	.word	0x0000aed8

00002e5c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    2e5c:	b580      	push	{r7, lr}
    2e5e:	b082      	sub	sp, #8
    2e60:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    2e62:	4b10      	ldr	r3, [pc, #64]	; (2ea4 <cpu_irq_enter_critical+0x48>)
    2e64:	681b      	ldr	r3, [r3, #0]
    2e66:	2b00      	cmp	r3, #0
    2e68:	d112      	bne.n	2e90 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e6a:	f3ef 8310 	mrs	r3, PRIMASK
    2e6e:	607b      	str	r3, [r7, #4]
  return(result);
    2e70:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    2e72:	2b00      	cmp	r3, #0
    2e74:	d109      	bne.n	2e8a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    2e76:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2e78:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2e7c:	4b0a      	ldr	r3, [pc, #40]	; (2ea8 <cpu_irq_enter_critical+0x4c>)
    2e7e:	2200      	movs	r2, #0
    2e80:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2e82:	4b0a      	ldr	r3, [pc, #40]	; (2eac <cpu_irq_enter_critical+0x50>)
    2e84:	2201      	movs	r2, #1
    2e86:	701a      	strb	r2, [r3, #0]
    2e88:	e002      	b.n	2e90 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2e8a:	4b08      	ldr	r3, [pc, #32]	; (2eac <cpu_irq_enter_critical+0x50>)
    2e8c:	2200      	movs	r2, #0
    2e8e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2e90:	4b04      	ldr	r3, [pc, #16]	; (2ea4 <cpu_irq_enter_critical+0x48>)
    2e92:	681b      	ldr	r3, [r3, #0]
    2e94:	1c5a      	adds	r2, r3, #1
    2e96:	4b03      	ldr	r3, [pc, #12]	; (2ea4 <cpu_irq_enter_critical+0x48>)
    2e98:	601a      	str	r2, [r3, #0]
}
    2e9a:	46c0      	nop			; (mov r8, r8)
    2e9c:	46bd      	mov	sp, r7
    2e9e:	b002      	add	sp, #8
    2ea0:	bd80      	pop	{r7, pc}
    2ea2:	46c0      	nop			; (mov r8, r8)
    2ea4:	2000013c 	.word	0x2000013c
    2ea8:	20000009 	.word	0x20000009
    2eac:	20000140 	.word	0x20000140

00002eb0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    2eb0:	b580      	push	{r7, lr}
    2eb2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2eb4:	4b0b      	ldr	r3, [pc, #44]	; (2ee4 <cpu_irq_leave_critical+0x34>)
    2eb6:	681b      	ldr	r3, [r3, #0]
    2eb8:	1e5a      	subs	r2, r3, #1
    2eba:	4b0a      	ldr	r3, [pc, #40]	; (2ee4 <cpu_irq_leave_critical+0x34>)
    2ebc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2ebe:	4b09      	ldr	r3, [pc, #36]	; (2ee4 <cpu_irq_leave_critical+0x34>)
    2ec0:	681b      	ldr	r3, [r3, #0]
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	d10a      	bne.n	2edc <cpu_irq_leave_critical+0x2c>
    2ec6:	4b08      	ldr	r3, [pc, #32]	; (2ee8 <cpu_irq_leave_critical+0x38>)
    2ec8:	781b      	ldrb	r3, [r3, #0]
    2eca:	b2db      	uxtb	r3, r3
    2ecc:	2b00      	cmp	r3, #0
    2ece:	d005      	beq.n	2edc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    2ed0:	4b06      	ldr	r3, [pc, #24]	; (2eec <cpu_irq_leave_critical+0x3c>)
    2ed2:	2201      	movs	r2, #1
    2ed4:	701a      	strb	r2, [r3, #0]
    2ed6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2eda:	b662      	cpsie	i
	}
}
    2edc:	46c0      	nop			; (mov r8, r8)
    2ede:	46bd      	mov	sp, r7
    2ee0:	bd80      	pop	{r7, pc}
    2ee2:	46c0      	nop			; (mov r8, r8)
    2ee4:	2000013c 	.word	0x2000013c
    2ee8:	20000140 	.word	0x20000140
    2eec:	20000009 	.word	0x20000009

00002ef0 <system_pinmux_get_config_defaults>:
{
    2ef0:	b580      	push	{r7, lr}
    2ef2:	b082      	sub	sp, #8
    2ef4:	af00      	add	r7, sp, #0
    2ef6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2ef8:	687b      	ldr	r3, [r7, #4]
    2efa:	2280      	movs	r2, #128	; 0x80
    2efc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2efe:	687b      	ldr	r3, [r7, #4]
    2f00:	2200      	movs	r2, #0
    2f02:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2f04:	687b      	ldr	r3, [r7, #4]
    2f06:	2201      	movs	r2, #1
    2f08:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2f0a:	687b      	ldr	r3, [r7, #4]
    2f0c:	2200      	movs	r2, #0
    2f0e:	70da      	strb	r2, [r3, #3]
}
    2f10:	46c0      	nop			; (mov r8, r8)
    2f12:	46bd      	mov	sp, r7
    2f14:	b002      	add	sp, #8
    2f16:	bd80      	pop	{r7, pc}

00002f18 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2f18:	b580      	push	{r7, lr}
    2f1a:	b084      	sub	sp, #16
    2f1c:	af00      	add	r7, sp, #0
    2f1e:	0002      	movs	r2, r0
    2f20:	6039      	str	r1, [r7, #0]
    2f22:	1dfb      	adds	r3, r7, #7
    2f24:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    2f26:	230c      	movs	r3, #12
    2f28:	18fb      	adds	r3, r7, r3
    2f2a:	0018      	movs	r0, r3
    2f2c:	4b10      	ldr	r3, [pc, #64]	; (2f70 <port_pin_set_config+0x58>)
    2f2e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    2f30:	230c      	movs	r3, #12
    2f32:	18fb      	adds	r3, r7, r3
    2f34:	2280      	movs	r2, #128	; 0x80
    2f36:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2f38:	683b      	ldr	r3, [r7, #0]
    2f3a:	781a      	ldrb	r2, [r3, #0]
    2f3c:	230c      	movs	r3, #12
    2f3e:	18fb      	adds	r3, r7, r3
    2f40:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2f42:	683b      	ldr	r3, [r7, #0]
    2f44:	785a      	ldrb	r2, [r3, #1]
    2f46:	230c      	movs	r3, #12
    2f48:	18fb      	adds	r3, r7, r3
    2f4a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2f4c:	683b      	ldr	r3, [r7, #0]
    2f4e:	789a      	ldrb	r2, [r3, #2]
    2f50:	230c      	movs	r3, #12
    2f52:	18fb      	adds	r3, r7, r3
    2f54:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2f56:	230c      	movs	r3, #12
    2f58:	18fa      	adds	r2, r7, r3
    2f5a:	1dfb      	adds	r3, r7, #7
    2f5c:	781b      	ldrb	r3, [r3, #0]
    2f5e:	0011      	movs	r1, r2
    2f60:	0018      	movs	r0, r3
    2f62:	4b04      	ldr	r3, [pc, #16]	; (2f74 <port_pin_set_config+0x5c>)
    2f64:	4798      	blx	r3
}
    2f66:	46c0      	nop			; (mov r8, r8)
    2f68:	46bd      	mov	sp, r7
    2f6a:	b004      	add	sp, #16
    2f6c:	bd80      	pop	{r7, pc}
    2f6e:	46c0      	nop			; (mov r8, r8)
    2f70:	00002ef1 	.word	0x00002ef1
    2f74:	000067d5 	.word	0x000067d5

00002f78 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2f78:	b580      	push	{r7, lr}
    2f7a:	b082      	sub	sp, #8
    2f7c:	af00      	add	r7, sp, #0
    2f7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2f80:	687b      	ldr	r3, [r7, #4]
    2f82:	2200      	movs	r2, #0
    2f84:	701a      	strb	r2, [r3, #0]
}
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	46bd      	mov	sp, r7
    2f8a:	b002      	add	sp, #8
    2f8c:	bd80      	pop	{r7, pc}
	...

00002f90 <system_apb_clock_set_mask>:
{
    2f90:	b580      	push	{r7, lr}
    2f92:	b082      	sub	sp, #8
    2f94:	af00      	add	r7, sp, #0
    2f96:	0002      	movs	r2, r0
    2f98:	6039      	str	r1, [r7, #0]
    2f9a:	1dfb      	adds	r3, r7, #7
    2f9c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2f9e:	1dfb      	adds	r3, r7, #7
    2fa0:	781b      	ldrb	r3, [r3, #0]
    2fa2:	2b01      	cmp	r3, #1
    2fa4:	d00a      	beq.n	2fbc <system_apb_clock_set_mask+0x2c>
    2fa6:	2b02      	cmp	r3, #2
    2fa8:	d00f      	beq.n	2fca <system_apb_clock_set_mask+0x3a>
    2faa:	2b00      	cmp	r3, #0
    2fac:	d114      	bne.n	2fd8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2fae:	4b0e      	ldr	r3, [pc, #56]	; (2fe8 <system_apb_clock_set_mask+0x58>)
    2fb0:	4a0d      	ldr	r2, [pc, #52]	; (2fe8 <system_apb_clock_set_mask+0x58>)
    2fb2:	6991      	ldr	r1, [r2, #24]
    2fb4:	683a      	ldr	r2, [r7, #0]
    2fb6:	430a      	orrs	r2, r1
    2fb8:	619a      	str	r2, [r3, #24]
			break;
    2fba:	e00f      	b.n	2fdc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2fbc:	4b0a      	ldr	r3, [pc, #40]	; (2fe8 <system_apb_clock_set_mask+0x58>)
    2fbe:	4a0a      	ldr	r2, [pc, #40]	; (2fe8 <system_apb_clock_set_mask+0x58>)
    2fc0:	69d1      	ldr	r1, [r2, #28]
    2fc2:	683a      	ldr	r2, [r7, #0]
    2fc4:	430a      	orrs	r2, r1
    2fc6:	61da      	str	r2, [r3, #28]
			break;
    2fc8:	e008      	b.n	2fdc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2fca:	4b07      	ldr	r3, [pc, #28]	; (2fe8 <system_apb_clock_set_mask+0x58>)
    2fcc:	4a06      	ldr	r2, [pc, #24]	; (2fe8 <system_apb_clock_set_mask+0x58>)
    2fce:	6a11      	ldr	r1, [r2, #32]
    2fd0:	683a      	ldr	r2, [r7, #0]
    2fd2:	430a      	orrs	r2, r1
    2fd4:	621a      	str	r2, [r3, #32]
			break;
    2fd6:	e001      	b.n	2fdc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2fd8:	2317      	movs	r3, #23
    2fda:	e000      	b.n	2fde <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2fdc:	2300      	movs	r3, #0
}
    2fde:	0018      	movs	r0, r3
    2fe0:	46bd      	mov	sp, r7
    2fe2:	b002      	add	sp, #8
    2fe4:	bd80      	pop	{r7, pc}
    2fe6:	46c0      	nop			; (mov r8, r8)
    2fe8:	40000400 	.word	0x40000400

00002fec <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    2fec:	b580      	push	{r7, lr}
    2fee:	b084      	sub	sp, #16
    2ff0:	af00      	add	r7, sp, #0
    2ff2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2ff4:	687b      	ldr	r3, [r7, #4]
    2ff6:	681b      	ldr	r3, [r3, #0]
    2ff8:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2ffa:	68fb      	ldr	r3, [r7, #12]
    2ffc:	7a9b      	ldrb	r3, [r3, #10]
    2ffe:	b2db      	uxtb	r3, r3
    3000:	b25b      	sxtb	r3, r3
    3002:	2b00      	cmp	r3, #0
    3004:	da01      	bge.n	300a <rtc_calendar_is_syncing+0x1e>
                return true;
    3006:	2301      	movs	r3, #1
    3008:	e000      	b.n	300c <rtc_calendar_is_syncing+0x20>
        }

        return false;
    300a:	2300      	movs	r3, #0
}
    300c:	0018      	movs	r0, r3
    300e:	46bd      	mov	sp, r7
    3010:	b004      	add	sp, #16
    3012:	bd80      	pop	{r7, pc}

00003014 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    3014:	b580      	push	{r7, lr}
    3016:	b084      	sub	sp, #16
    3018:	af00      	add	r7, sp, #0
    301a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    301c:	687b      	ldr	r3, [r7, #4]
    301e:	681b      	ldr	r3, [r3, #0]
    3020:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    3022:	46c0      	nop			; (mov r8, r8)
    3024:	687b      	ldr	r3, [r7, #4]
    3026:	0018      	movs	r0, r3
    3028:	4b07      	ldr	r3, [pc, #28]	; (3048 <rtc_calendar_enable+0x34>)
    302a:	4798      	blx	r3
    302c:	1e03      	subs	r3, r0, #0
    302e:	d1f9      	bne.n	3024 <rtc_calendar_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    3030:	68fb      	ldr	r3, [r7, #12]
    3032:	881b      	ldrh	r3, [r3, #0]
    3034:	b29b      	uxth	r3, r3
    3036:	2202      	movs	r2, #2
    3038:	4313      	orrs	r3, r2
    303a:	b29a      	uxth	r2, r3
    303c:	68fb      	ldr	r3, [r7, #12]
    303e:	801a      	strh	r2, [r3, #0]
}
    3040:	46c0      	nop			; (mov r8, r8)
    3042:	46bd      	mov	sp, r7
    3044:	b004      	add	sp, #16
    3046:	bd80      	pop	{r7, pc}
    3048:	00002fed 	.word	0x00002fed

0000304c <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    304c:	b580      	push	{r7, lr}
    304e:	b084      	sub	sp, #16
    3050:	af00      	add	r7, sp, #0
    3052:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3054:	687b      	ldr	r3, [r7, #4]
    3056:	681b      	ldr	r3, [r3, #0]
    3058:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    305a:	46c0      	nop			; (mov r8, r8)
    305c:	687b      	ldr	r3, [r7, #4]
    305e:	0018      	movs	r0, r3
    3060:	4b0a      	ldr	r3, [pc, #40]	; (308c <rtc_calendar_disable+0x40>)
    3062:	4798      	blx	r3
    3064:	1e03      	subs	r3, r0, #0
    3066:	d1f9      	bne.n	305c <rtc_calendar_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    3068:	68fb      	ldr	r3, [r7, #12]
    306a:	22c1      	movs	r2, #193	; 0xc1
    306c:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    306e:	68fb      	ldr	r3, [r7, #12]
    3070:	22c1      	movs	r2, #193	; 0xc1
    3072:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    3074:	68fb      	ldr	r3, [r7, #12]
    3076:	881b      	ldrh	r3, [r3, #0]
    3078:	b29b      	uxth	r3, r3
    307a:	2202      	movs	r2, #2
    307c:	4393      	bics	r3, r2
    307e:	b29a      	uxth	r2, r3
    3080:	68fb      	ldr	r3, [r7, #12]
    3082:	801a      	strh	r2, [r3, #0]
}
    3084:	46c0      	nop			; (mov r8, r8)
    3086:	46bd      	mov	sp, r7
    3088:	b004      	add	sp, #16
    308a:	bd80      	pop	{r7, pc}
    308c:	00002fed 	.word	0x00002fed

00003090 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    3090:	b580      	push	{r7, lr}
    3092:	b084      	sub	sp, #16
    3094:	af00      	add	r7, sp, #0
    3096:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3098:	687b      	ldr	r3, [r7, #4]
    309a:	681b      	ldr	r3, [r3, #0]
    309c:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    309e:	687b      	ldr	r3, [r7, #4]
    30a0:	0018      	movs	r0, r3
    30a2:	4b0a      	ldr	r3, [pc, #40]	; (30cc <rtc_calendar_reset+0x3c>)
    30a4:	4798      	blx	r3
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    30a6:	46c0      	nop			; (mov r8, r8)
    30a8:	687b      	ldr	r3, [r7, #4]
    30aa:	0018      	movs	r0, r3
    30ac:	4b08      	ldr	r3, [pc, #32]	; (30d0 <rtc_calendar_reset+0x40>)
    30ae:	4798      	blx	r3
    30b0:	1e03      	subs	r3, r0, #0
    30b2:	d1f9      	bne.n	30a8 <rtc_calendar_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    30b4:	68fb      	ldr	r3, [r7, #12]
    30b6:	881b      	ldrh	r3, [r3, #0]
    30b8:	b29b      	uxth	r3, r3
    30ba:	2201      	movs	r2, #1
    30bc:	4313      	orrs	r3, r2
    30be:	b29a      	uxth	r2, r3
    30c0:	68fb      	ldr	r3, [r7, #12]
    30c2:	801a      	strh	r2, [r3, #0]
}
    30c4:	46c0      	nop			; (mov r8, r8)
    30c6:	46bd      	mov	sp, r7
    30c8:	b004      	add	sp, #16
    30ca:	bd80      	pop	{r7, pc}
    30cc:	0000304d 	.word	0x0000304d
    30d0:	00002fed 	.word	0x00002fed

000030d4 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    30d4:	b580      	push	{r7, lr}
    30d6:	b084      	sub	sp, #16
    30d8:	af00      	add	r7, sp, #0
    30da:	6078      	str	r0, [r7, #4]
    30dc:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    30de:	683b      	ldr	r3, [r7, #0]
    30e0:	88db      	ldrh	r3, [r3, #6]
    30e2:	001a      	movs	r2, r3
    30e4:	687b      	ldr	r3, [r7, #4]
    30e6:	88db      	ldrh	r3, [r3, #6]
    30e8:	1ad3      	subs	r3, r2, r3
    30ea:	069b      	lsls	r3, r3, #26
    30ec:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    30ee:	683b      	ldr	r3, [r7, #0]
    30f0:	795b      	ldrb	r3, [r3, #5]
    30f2:	059b      	lsls	r3, r3, #22
    30f4:	001a      	movs	r2, r3
    30f6:	68fb      	ldr	r3, [r7, #12]
    30f8:	4313      	orrs	r3, r2
    30fa:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    30fc:	683b      	ldr	r3, [r7, #0]
    30fe:	791b      	ldrb	r3, [r3, #4]
    3100:	045b      	lsls	r3, r3, #17
    3102:	001a      	movs	r2, r3
    3104:	68fb      	ldr	r3, [r7, #12]
    3106:	4313      	orrs	r3, r2
    3108:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    310a:	683b      	ldr	r3, [r7, #0]
    310c:	789b      	ldrb	r3, [r3, #2]
    310e:	031b      	lsls	r3, r3, #12
    3110:	001a      	movs	r2, r3
    3112:	68fb      	ldr	r3, [r7, #12]
    3114:	4313      	orrs	r3, r2
    3116:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    3118:	687b      	ldr	r3, [r7, #4]
    311a:	791b      	ldrb	r3, [r3, #4]
    311c:	2201      	movs	r2, #1
    311e:	4053      	eors	r3, r2
    3120:	b2db      	uxtb	r3, r3
    3122:	2b00      	cmp	r3, #0
    3124:	d008      	beq.n	3138 <rtc_calendar_time_to_register_value+0x64>
    3126:	683b      	ldr	r3, [r7, #0]
    3128:	78db      	ldrb	r3, [r3, #3]
    312a:	2b00      	cmp	r3, #0
    312c:	d004      	beq.n	3138 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    312e:	68fb      	ldr	r3, [r7, #12]
    3130:	2280      	movs	r2, #128	; 0x80
    3132:	0252      	lsls	r2, r2, #9
    3134:	4313      	orrs	r3, r2
    3136:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    3138:	683b      	ldr	r3, [r7, #0]
    313a:	785b      	ldrb	r3, [r3, #1]
    313c:	019b      	lsls	r3, r3, #6
    313e:	001a      	movs	r2, r3
    3140:	68fb      	ldr	r3, [r7, #12]
    3142:	4313      	orrs	r3, r2
    3144:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    3146:	683b      	ldr	r3, [r7, #0]
    3148:	781b      	ldrb	r3, [r3, #0]
    314a:	001a      	movs	r2, r3
    314c:	68fb      	ldr	r3, [r7, #12]
    314e:	4313      	orrs	r3, r2
    3150:	60fb      	str	r3, [r7, #12]

	return register_value;
    3152:	68fb      	ldr	r3, [r7, #12]
}
    3154:	0018      	movs	r0, r3
    3156:	46bd      	mov	sp, r7
    3158:	b004      	add	sp, #16
    315a:	bd80      	pop	{r7, pc}

0000315c <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    315c:	b580      	push	{r7, lr}
    315e:	b084      	sub	sp, #16
    3160:	af00      	add	r7, sp, #0
    3162:	60f8      	str	r0, [r7, #12]
    3164:	60b9      	str	r1, [r7, #8]
    3166:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    3168:	68bb      	ldr	r3, [r7, #8]
    316a:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    316c:	b29a      	uxth	r2, r3
    316e:	68fb      	ldr	r3, [r7, #12]
    3170:	88db      	ldrh	r3, [r3, #6]
    3172:	18d3      	adds	r3, r2, r3
    3174:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    317a:	68bb      	ldr	r3, [r7, #8]
    317c:	0d9b      	lsrs	r3, r3, #22
    317e:	b2db      	uxtb	r3, r3
    3180:	220f      	movs	r2, #15
    3182:	4013      	ands	r3, r2
    3184:	b2da      	uxtb	r2, r3
    3186:	687b      	ldr	r3, [r7, #4]
    3188:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    318a:	68bb      	ldr	r3, [r7, #8]
    318c:	0c5b      	lsrs	r3, r3, #17
    318e:	b2db      	uxtb	r3, r3
    3190:	221f      	movs	r2, #31
    3192:	4013      	ands	r3, r2
    3194:	b2da      	uxtb	r2, r3
    3196:	687b      	ldr	r3, [r7, #4]
    3198:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    319a:	68fb      	ldr	r3, [r7, #12]
    319c:	791b      	ldrb	r3, [r3, #4]
    319e:	2b00      	cmp	r3, #0
    31a0:	d008      	beq.n	31b4 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    31a2:	68bb      	ldr	r3, [r7, #8]
    31a4:	0b1b      	lsrs	r3, r3, #12
    31a6:	b2db      	uxtb	r3, r3
    31a8:	221f      	movs	r2, #31
    31aa:	4013      	ands	r3, r2
    31ac:	b2da      	uxtb	r2, r3
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	709a      	strb	r2, [r3, #2]
    31b2:	e010      	b.n	31d6 <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    31b4:	68bb      	ldr	r3, [r7, #8]
    31b6:	0b1b      	lsrs	r3, r3, #12
    31b8:	b2db      	uxtb	r3, r3
    31ba:	220f      	movs	r2, #15
    31bc:	4013      	ands	r3, r2
    31be:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
    31c0:	687b      	ldr	r3, [r7, #4]
    31c2:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    31c4:	68ba      	ldr	r2, [r7, #8]
    31c6:	2380      	movs	r3, #128	; 0x80
    31c8:	025b      	lsls	r3, r3, #9
    31ca:	4013      	ands	r3, r2
    31cc:	1e5a      	subs	r2, r3, #1
    31ce:	4193      	sbcs	r3, r2
    31d0:	b2da      	uxtb	r2, r3
    31d2:	687b      	ldr	r3, [r7, #4]
    31d4:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    31d6:	68bb      	ldr	r3, [r7, #8]
    31d8:	099b      	lsrs	r3, r3, #6
    31da:	b2db      	uxtb	r3, r3
    31dc:	223f      	movs	r2, #63	; 0x3f
    31de:	4013      	ands	r3, r2
    31e0:	b2da      	uxtb	r2, r3
    31e2:	687b      	ldr	r3, [r7, #4]
    31e4:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    31e6:	68bb      	ldr	r3, [r7, #8]
    31e8:	b2db      	uxtb	r3, r3
    31ea:	223f      	movs	r2, #63	; 0x3f
    31ec:	4013      	ands	r3, r2
    31ee:	b2da      	uxtb	r2, r3
    31f0:	687b      	ldr	r3, [r7, #4]
    31f2:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    31f4:	46c0      	nop			; (mov r8, r8)
    31f6:	46bd      	mov	sp, r7
    31f8:	b004      	add	sp, #16
    31fa:	bd80      	pop	{r7, pc}

000031fc <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    31fc:	b580      	push	{r7, lr}
    31fe:	b084      	sub	sp, #16
    3200:	af00      	add	r7, sp, #0
    3202:	6078      	str	r0, [r7, #4]
    3204:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3206:	687b      	ldr	r3, [r7, #4]
    3208:	681b      	ldr	r3, [r3, #0]
    320a:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    320c:	683b      	ldr	r3, [r7, #0]
    320e:	881a      	ldrh	r2, [r3, #0]
    3210:	230e      	movs	r3, #14
    3212:	18fb      	adds	r3, r7, r3
    3214:	2108      	movs	r1, #8
    3216:	430a      	orrs	r2, r1
    3218:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    321a:	683b      	ldr	r3, [r7, #0]
    321c:	791b      	ldrb	r3, [r3, #4]
    321e:	2201      	movs	r2, #1
    3220:	4053      	eors	r3, r2
    3222:	b2db      	uxtb	r3, r3
    3224:	2b00      	cmp	r3, #0
    3226:	d007      	beq.n	3238 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    3228:	230e      	movs	r3, #14
    322a:	18fb      	adds	r3, r7, r3
    322c:	220e      	movs	r2, #14
    322e:	18ba      	adds	r2, r7, r2
    3230:	8812      	ldrh	r2, [r2, #0]
    3232:	2140      	movs	r1, #64	; 0x40
    3234:	430a      	orrs	r2, r1
    3236:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    3238:	683b      	ldr	r3, [r7, #0]
    323a:	789b      	ldrb	r3, [r3, #2]
    323c:	2b00      	cmp	r3, #0
    323e:	d007      	beq.n	3250 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    3240:	230e      	movs	r3, #14
    3242:	18fb      	adds	r3, r7, r3
    3244:	220e      	movs	r2, #14
    3246:	18ba      	adds	r2, r7, r2
    3248:	8812      	ldrh	r2, [r2, #0]
    324a:	2180      	movs	r1, #128	; 0x80
    324c:	430a      	orrs	r2, r1
    324e:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    3250:	68bb      	ldr	r3, [r7, #8]
    3252:	220e      	movs	r2, #14
    3254:	18ba      	adds	r2, r7, r2
    3256:	8812      	ldrh	r2, [r2, #0]
    3258:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    325a:	683b      	ldr	r3, [r7, #0]
    325c:	78db      	ldrb	r3, [r3, #3]
    325e:	2b00      	cmp	r3, #0
    3260:	d008      	beq.n	3274 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    3262:	68bb      	ldr	r3, [r7, #8]
    3264:	885b      	ldrh	r3, [r3, #2]
    3266:	b29b      	uxth	r3, r3
    3268:	2280      	movs	r2, #128	; 0x80
    326a:	01d2      	lsls	r2, r2, #7
    326c:	4313      	orrs	r3, r2
    326e:	b29a      	uxth	r2, r3
    3270:	68bb      	ldr	r3, [r7, #8]
    3272:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    3274:	230d      	movs	r3, #13
    3276:	18fb      	adds	r3, r7, r3
    3278:	2200      	movs	r2, #0
    327a:	701a      	strb	r2, [r3, #0]
    327c:	e017      	b.n	32ae <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    327e:	230d      	movs	r3, #13
    3280:	18fb      	adds	r3, r7, r3
    3282:	781a      	ldrb	r2, [r3, #0]
    3284:	0013      	movs	r3, r2
    3286:	009b      	lsls	r3, r3, #2
    3288:	189b      	adds	r3, r3, r2
    328a:	005b      	lsls	r3, r3, #1
    328c:	3308      	adds	r3, #8
    328e:	683a      	ldr	r2, [r7, #0]
    3290:	18d1      	adds	r1, r2, r3
    3292:	230d      	movs	r3, #13
    3294:	18fb      	adds	r3, r7, r3
    3296:	781a      	ldrb	r2, [r3, #0]
    3298:	687b      	ldr	r3, [r7, #4]
    329a:	0018      	movs	r0, r3
    329c:	4b08      	ldr	r3, [pc, #32]	; (32c0 <_rtc_calendar_set_config+0xc4>)
    329e:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    32a0:	230d      	movs	r3, #13
    32a2:	18fb      	adds	r3, r7, r3
    32a4:	781a      	ldrb	r2, [r3, #0]
    32a6:	230d      	movs	r3, #13
    32a8:	18fb      	adds	r3, r7, r3
    32aa:	3201      	adds	r2, #1
    32ac:	701a      	strb	r2, [r3, #0]
    32ae:	230d      	movs	r3, #13
    32b0:	18fb      	adds	r3, r7, r3
    32b2:	781b      	ldrb	r3, [r3, #0]
    32b4:	2b00      	cmp	r3, #0
    32b6:	d0e2      	beq.n	327e <_rtc_calendar_set_config+0x82>
	}
}
    32b8:	46c0      	nop			; (mov r8, r8)
    32ba:	46bd      	mov	sp, r7
    32bc:	b004      	add	sp, #16
    32be:	bd80      	pop	{r7, pc}
    32c0:	000033e5 	.word	0x000033e5

000032c4 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    32c4:	b580      	push	{r7, lr}
    32c6:	b086      	sub	sp, #24
    32c8:	af00      	add	r7, sp, #0
    32ca:	60f8      	str	r0, [r7, #12]
    32cc:	60b9      	str	r1, [r7, #8]
    32ce:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    32d0:	68fb      	ldr	r3, [r7, #12]
    32d2:	68ba      	ldr	r2, [r7, #8]
    32d4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    32d6:	2120      	movs	r1, #32
    32d8:	2000      	movs	r0, #0
    32da:	4b18      	ldr	r3, [pc, #96]	; (333c <rtc_calendar_init+0x78>)
    32dc:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    32de:	2314      	movs	r3, #20
    32e0:	18fb      	adds	r3, r7, r3
    32e2:	0018      	movs	r0, r3
    32e4:	4b16      	ldr	r3, [pc, #88]	; (3340 <rtc_calendar_init+0x7c>)
    32e6:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    32e8:	2314      	movs	r3, #20
    32ea:	18fb      	adds	r3, r7, r3
    32ec:	2202      	movs	r2, #2
    32ee:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    32f0:	2314      	movs	r3, #20
    32f2:	18fb      	adds	r3, r7, r3
    32f4:	0019      	movs	r1, r3
    32f6:	2004      	movs	r0, #4
    32f8:	4b12      	ldr	r3, [pc, #72]	; (3344 <rtc_calendar_init+0x80>)
    32fa:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    32fc:	2004      	movs	r0, #4
    32fe:	4b12      	ldr	r3, [pc, #72]	; (3348 <rtc_calendar_init+0x84>)
    3300:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    3302:	68fb      	ldr	r3, [r7, #12]
    3304:	0018      	movs	r0, r3
    3306:	4b11      	ldr	r3, [pc, #68]	; (334c <rtc_calendar_init+0x88>)
    3308:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    330a:	687b      	ldr	r3, [r7, #4]
    330c:	791a      	ldrb	r2, [r3, #4]
    330e:	68fb      	ldr	r3, [r7, #12]
    3310:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    3312:	687b      	ldr	r3, [r7, #4]
    3314:	78da      	ldrb	r2, [r3, #3]
    3316:	68fb      	ldr	r3, [r7, #12]
    3318:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    331a:	687b      	ldr	r3, [r7, #4]
    331c:	88da      	ldrh	r2, [r3, #6]
    331e:	68fb      	ldr	r3, [r7, #12]
    3320:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    3322:	4b0b      	ldr	r3, [pc, #44]	; (3350 <rtc_calendar_init+0x8c>)
    3324:	68fa      	ldr	r2, [r7, #12]
    3326:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    3328:	687a      	ldr	r2, [r7, #4]
    332a:	68fb      	ldr	r3, [r7, #12]
    332c:	0011      	movs	r1, r2
    332e:	0018      	movs	r0, r3
    3330:	4b08      	ldr	r3, [pc, #32]	; (3354 <rtc_calendar_init+0x90>)
    3332:	4798      	blx	r3
}
    3334:	46c0      	nop			; (mov r8, r8)
    3336:	46bd      	mov	sp, r7
    3338:	b006      	add	sp, #24
    333a:	bd80      	pop	{r7, pc}
    333c:	00002f91 	.word	0x00002f91
    3340:	00002f79 	.word	0x00002f79
    3344:	000064e9 	.word	0x000064e9
    3348:	0000652d 	.word	0x0000652d
    334c:	00003091 	.word	0x00003091
    3350:	200009d0 	.word	0x200009d0
    3354:	000031fd 	.word	0x000031fd

00003358 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    3358:	b580      	push	{r7, lr}
    335a:	b084      	sub	sp, #16
    335c:	af00      	add	r7, sp, #0
    335e:	6078      	str	r0, [r7, #4]
    3360:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3362:	687b      	ldr	r3, [r7, #4]
    3364:	681b      	ldr	r3, [r3, #0]
    3366:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    3368:	687b      	ldr	r3, [r7, #4]
    336a:	795b      	ldrb	r3, [r3, #5]
    336c:	2201      	movs	r2, #1
    336e:	4053      	eors	r3, r2
    3370:	b2db      	uxtb	r3, r3
    3372:	2b00      	cmp	r3, #0
    3374:	d00a      	beq.n	338c <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    3376:	68fb      	ldr	r3, [r7, #12]
    3378:	4a16      	ldr	r2, [pc, #88]	; (33d4 <rtc_calendar_get_time+0x7c>)
    337a:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
    337c:	46c0      	nop			; (mov r8, r8)
    337e:	687b      	ldr	r3, [r7, #4]
    3380:	0018      	movs	r0, r3
    3382:	4b15      	ldr	r3, [pc, #84]	; (33d8 <rtc_calendar_get_time+0x80>)
    3384:	4798      	blx	r3
    3386:	1e03      	subs	r3, r0, #0
    3388:	d1f9      	bne.n	337e <rtc_calendar_get_time+0x26>
    338a:	e016      	b.n	33ba <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    338c:	68fb      	ldr	r3, [r7, #12]
    338e:	885b      	ldrh	r3, [r3, #2]
    3390:	b29b      	uxth	r3, r3
    3392:	001a      	movs	r2, r3
    3394:	2380      	movs	r3, #128	; 0x80
    3396:	01db      	lsls	r3, r3, #7
    3398:	4013      	ands	r3, r2
    339a:	d10e      	bne.n	33ba <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    339c:	68fb      	ldr	r3, [r7, #12]
    339e:	885b      	ldrh	r3, [r3, #2]
    33a0:	b29b      	uxth	r3, r3
    33a2:	4a0e      	ldr	r2, [pc, #56]	; (33dc <rtc_calendar_get_time+0x84>)
    33a4:	4313      	orrs	r3, r2
    33a6:	b29a      	uxth	r2, r3
    33a8:	68fb      	ldr	r3, [r7, #12]
    33aa:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
    33ac:	46c0      	nop			; (mov r8, r8)
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	0018      	movs	r0, r3
    33b2:	4b09      	ldr	r3, [pc, #36]	; (33d8 <rtc_calendar_get_time+0x80>)
    33b4:	4798      	blx	r3
    33b6:	1e03      	subs	r3, r0, #0
    33b8:	d1f9      	bne.n	33ae <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    33ba:	68fb      	ldr	r3, [r7, #12]
    33bc:	691b      	ldr	r3, [r3, #16]
    33be:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    33c0:	683a      	ldr	r2, [r7, #0]
    33c2:	68b9      	ldr	r1, [r7, #8]
    33c4:	687b      	ldr	r3, [r7, #4]
    33c6:	0018      	movs	r0, r3
    33c8:	4b05      	ldr	r3, [pc, #20]	; (33e0 <rtc_calendar_get_time+0x88>)
    33ca:	4798      	blx	r3
}
    33cc:	46c0      	nop			; (mov r8, r8)
    33ce:	46bd      	mov	sp, r7
    33d0:	b004      	add	sp, #16
    33d2:	bd80      	pop	{r7, pc}
    33d4:	ffff8000 	.word	0xffff8000
    33d8:	00002fed 	.word	0x00002fed
    33dc:	ffffc000 	.word	0xffffc000
    33e0:	0000315d 	.word	0x0000315d

000033e4 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    33e4:	b580      	push	{r7, lr}
    33e6:	b086      	sub	sp, #24
    33e8:	af00      	add	r7, sp, #0
    33ea:	60f8      	str	r0, [r7, #12]
    33ec:	60b9      	str	r1, [r7, #8]
    33ee:	1dfb      	adds	r3, r7, #7
    33f0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    33f2:	68fb      	ldr	r3, [r7, #12]
    33f4:	681b      	ldr	r3, [r3, #0]
    33f6:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    33f8:	1dfb      	adds	r3, r7, #7
    33fa:	781b      	ldrb	r3, [r3, #0]
    33fc:	2b01      	cmp	r3, #1
    33fe:	d901      	bls.n	3404 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
    3400:	2317      	movs	r3, #23
    3402:	e021      	b.n	3448 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    3404:	68ba      	ldr	r2, [r7, #8]
    3406:	68fb      	ldr	r3, [r7, #12]
    3408:	0011      	movs	r1, r2
    340a:	0018      	movs	r0, r3
    340c:	4b10      	ldr	r3, [pc, #64]	; (3450 <rtc_calendar_set_alarm+0x6c>)
    340e:	4798      	blx	r3
    3410:	0003      	movs	r3, r0
    3412:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    3414:	46c0      	nop			; (mov r8, r8)
    3416:	68fb      	ldr	r3, [r7, #12]
    3418:	0018      	movs	r0, r3
    341a:	4b0e      	ldr	r3, [pc, #56]	; (3454 <rtc_calendar_set_alarm+0x70>)
    341c:	4798      	blx	r3
    341e:	1e03      	subs	r3, r0, #0
    3420:	d1f9      	bne.n	3416 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    3422:	1dfb      	adds	r3, r7, #7
    3424:	781a      	ldrb	r2, [r3, #0]
    3426:	697b      	ldr	r3, [r7, #20]
    3428:	3203      	adds	r2, #3
    342a:	00d2      	lsls	r2, r2, #3
    342c:	6939      	ldr	r1, [r7, #16]
    342e:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    3430:	1dfb      	adds	r3, r7, #7
    3432:	781b      	ldrb	r3, [r3, #0]
    3434:	68ba      	ldr	r2, [r7, #8]
    3436:	7a11      	ldrb	r1, [r2, #8]
    3438:	697a      	ldr	r2, [r7, #20]
    343a:	3303      	adds	r3, #3
    343c:	00db      	lsls	r3, r3, #3
    343e:	18d3      	adds	r3, r2, r3
    3440:	3304      	adds	r3, #4
    3442:	1c0a      	adds	r2, r1, #0
    3444:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    3446:	2300      	movs	r3, #0
}
    3448:	0018      	movs	r0, r3
    344a:	46bd      	mov	sp, r7
    344c:	b006      	add	sp, #24
    344e:	bd80      	pop	{r7, pc}
    3450:	000030d5 	.word	0x000030d5
    3454:	00002fed 	.word	0x00002fed

00003458 <system_gclk_chan_get_config_defaults>:
{
    3458:	b580      	push	{r7, lr}
    345a:	b082      	sub	sp, #8
    345c:	af00      	add	r7, sp, #0
    345e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3460:	687b      	ldr	r3, [r7, #4]
    3462:	2200      	movs	r2, #0
    3464:	701a      	strb	r2, [r3, #0]
}
    3466:	46c0      	nop			; (mov r8, r8)
    3468:	46bd      	mov	sp, r7
    346a:	b002      	add	sp, #8
    346c:	bd80      	pop	{r7, pc}

0000346e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    346e:	b5f0      	push	{r4, r5, r6, r7, lr}
    3470:	b08d      	sub	sp, #52	; 0x34
    3472:	af00      	add	r7, sp, #0
    3474:	60b8      	str	r0, [r7, #8]
    3476:	60f9      	str	r1, [r7, #12]
    3478:	603a      	str	r2, [r7, #0]
    347a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    347c:	2300      	movs	r3, #0
    347e:	2400      	movs	r4, #0
    3480:	623b      	str	r3, [r7, #32]
    3482:	627c      	str	r4, [r7, #36]	; 0x24
    3484:	2300      	movs	r3, #0
    3486:	2400      	movs	r4, #0
    3488:	61bb      	str	r3, [r7, #24]
    348a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    348c:	233f      	movs	r3, #63	; 0x3f
    348e:	62fb      	str	r3, [r7, #44]	; 0x2c
    3490:	e053      	b.n	353a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    3492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3494:	3b20      	subs	r3, #32
    3496:	2b00      	cmp	r3, #0
    3498:	db04      	blt.n	34a4 <long_division+0x36>
    349a:	2201      	movs	r2, #1
    349c:	409a      	lsls	r2, r3
    349e:	0013      	movs	r3, r2
    34a0:	617b      	str	r3, [r7, #20]
    34a2:	e00b      	b.n	34bc <long_division+0x4e>
    34a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    34a6:	2220      	movs	r2, #32
    34a8:	1ad3      	subs	r3, r2, r3
    34aa:	2201      	movs	r2, #1
    34ac:	40da      	lsrs	r2, r3
    34ae:	0013      	movs	r3, r2
    34b0:	2100      	movs	r1, #0
    34b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    34b4:	4091      	lsls	r1, r2
    34b6:	000a      	movs	r2, r1
    34b8:	4313      	orrs	r3, r2
    34ba:	617b      	str	r3, [r7, #20]
    34bc:	2201      	movs	r2, #1
    34be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    34c0:	409a      	lsls	r2, r3
    34c2:	0013      	movs	r3, r2
    34c4:	613b      	str	r3, [r7, #16]

		r = r << 1;
    34c6:	69bb      	ldr	r3, [r7, #24]
    34c8:	69fc      	ldr	r4, [r7, #28]
    34ca:	18db      	adds	r3, r3, r3
    34cc:	4164      	adcs	r4, r4
    34ce:	61bb      	str	r3, [r7, #24]
    34d0:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    34d2:	68bb      	ldr	r3, [r7, #8]
    34d4:	693a      	ldr	r2, [r7, #16]
    34d6:	401a      	ands	r2, r3
    34d8:	0015      	movs	r5, r2
    34da:	68fb      	ldr	r3, [r7, #12]
    34dc:	697a      	ldr	r2, [r7, #20]
    34de:	401a      	ands	r2, r3
    34e0:	0016      	movs	r6, r2
    34e2:	002b      	movs	r3, r5
    34e4:	4333      	orrs	r3, r6
    34e6:	d007      	beq.n	34f8 <long_division+0x8a>
			r |= 0x01;
    34e8:	69bb      	ldr	r3, [r7, #24]
    34ea:	2201      	movs	r2, #1
    34ec:	4313      	orrs	r3, r2
    34ee:	61bb      	str	r3, [r7, #24]
    34f0:	69fb      	ldr	r3, [r7, #28]
    34f2:	2200      	movs	r2, #0
    34f4:	4313      	orrs	r3, r2
    34f6:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    34f8:	687a      	ldr	r2, [r7, #4]
    34fa:	69fb      	ldr	r3, [r7, #28]
    34fc:	429a      	cmp	r2, r3
    34fe:	d819      	bhi.n	3534 <long_division+0xc6>
    3500:	687a      	ldr	r2, [r7, #4]
    3502:	69fb      	ldr	r3, [r7, #28]
    3504:	429a      	cmp	r2, r3
    3506:	d103      	bne.n	3510 <long_division+0xa2>
    3508:	683a      	ldr	r2, [r7, #0]
    350a:	69bb      	ldr	r3, [r7, #24]
    350c:	429a      	cmp	r2, r3
    350e:	d811      	bhi.n	3534 <long_division+0xc6>
			r = r - d;
    3510:	69b9      	ldr	r1, [r7, #24]
    3512:	69fa      	ldr	r2, [r7, #28]
    3514:	683b      	ldr	r3, [r7, #0]
    3516:	687c      	ldr	r4, [r7, #4]
    3518:	1ac9      	subs	r1, r1, r3
    351a:	41a2      	sbcs	r2, r4
    351c:	000b      	movs	r3, r1
    351e:	0014      	movs	r4, r2
    3520:	61bb      	str	r3, [r7, #24]
    3522:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    3524:	6a3a      	ldr	r2, [r7, #32]
    3526:	693b      	ldr	r3, [r7, #16]
    3528:	4313      	orrs	r3, r2
    352a:	623b      	str	r3, [r7, #32]
    352c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    352e:	697b      	ldr	r3, [r7, #20]
    3530:	4313      	orrs	r3, r2
    3532:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    3534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3536:	3b01      	subs	r3, #1
    3538:	62fb      	str	r3, [r7, #44]	; 0x2c
    353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    353c:	2b00      	cmp	r3, #0
    353e:	daa8      	bge.n	3492 <long_division+0x24>
		}
	}

	return q;
    3540:	6a3b      	ldr	r3, [r7, #32]
    3542:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    3544:	0018      	movs	r0, r3
    3546:	0021      	movs	r1, r4
    3548:	46bd      	mov	sp, r7
    354a:	b00d      	add	sp, #52	; 0x34
    354c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000354e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    354e:	b580      	push	{r7, lr}
    3550:	b086      	sub	sp, #24
    3552:	af00      	add	r7, sp, #0
    3554:	60f8      	str	r0, [r7, #12]
    3556:	60b9      	str	r1, [r7, #8]
    3558:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    355a:	2316      	movs	r3, #22
    355c:	18fb      	adds	r3, r7, r3
    355e:	2200      	movs	r2, #0
    3560:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    3562:	68bb      	ldr	r3, [r7, #8]
    3564:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3566:	68bb      	ldr	r3, [r7, #8]
    3568:	085a      	lsrs	r2, r3, #1
    356a:	68fb      	ldr	r3, [r7, #12]
    356c:	429a      	cmp	r2, r3
    356e:	d201      	bcs.n	3574 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3570:	2340      	movs	r3, #64	; 0x40
    3572:	e026      	b.n	35c2 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    3574:	68bb      	ldr	r3, [r7, #8]
    3576:	085b      	lsrs	r3, r3, #1
    3578:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    357a:	e00a      	b.n	3592 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    357c:	693a      	ldr	r2, [r7, #16]
    357e:	68fb      	ldr	r3, [r7, #12]
    3580:	1ad3      	subs	r3, r2, r3
    3582:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    3584:	2316      	movs	r3, #22
    3586:	18fb      	adds	r3, r7, r3
    3588:	881a      	ldrh	r2, [r3, #0]
    358a:	2316      	movs	r3, #22
    358c:	18fb      	adds	r3, r7, r3
    358e:	3201      	adds	r2, #1
    3590:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    3592:	693a      	ldr	r2, [r7, #16]
    3594:	68fb      	ldr	r3, [r7, #12]
    3596:	429a      	cmp	r2, r3
    3598:	d2f0      	bcs.n	357c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    359a:	2316      	movs	r3, #22
    359c:	18fb      	adds	r3, r7, r3
    359e:	2216      	movs	r2, #22
    35a0:	18ba      	adds	r2, r7, r2
    35a2:	8812      	ldrh	r2, [r2, #0]
    35a4:	3a01      	subs	r2, #1
    35a6:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    35a8:	2316      	movs	r3, #22
    35aa:	18fb      	adds	r3, r7, r3
    35ac:	881b      	ldrh	r3, [r3, #0]
    35ae:	2bff      	cmp	r3, #255	; 0xff
    35b0:	d901      	bls.n	35b6 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    35b2:	2340      	movs	r3, #64	; 0x40
    35b4:	e005      	b.n	35c2 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    35b6:	687b      	ldr	r3, [r7, #4]
    35b8:	2216      	movs	r2, #22
    35ba:	18ba      	adds	r2, r7, r2
    35bc:	8812      	ldrh	r2, [r2, #0]
    35be:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    35c0:	2300      	movs	r3, #0
	}
}
    35c2:	0018      	movs	r0, r3
    35c4:	46bd      	mov	sp, r7
    35c6:	b006      	add	sp, #24
    35c8:	bd80      	pop	{r7, pc}
	...

000035cc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    35cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ce:	b0a1      	sub	sp, #132	; 0x84
    35d0:	af00      	add	r7, sp, #0
    35d2:	64f8      	str	r0, [r7, #76]	; 0x4c
    35d4:	64b9      	str	r1, [r7, #72]	; 0x48
    35d6:	647a      	str	r2, [r7, #68]	; 0x44
    35d8:	2243      	movs	r2, #67	; 0x43
    35da:	18ba      	adds	r2, r7, r2
    35dc:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    35de:	2300      	movs	r3, #0
    35e0:	2400      	movs	r4, #0
    35e2:	673b      	str	r3, [r7, #112]	; 0x70
    35e4:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    35e6:	2300      	movs	r3, #0
    35e8:	2400      	movs	r4, #0
    35ea:	66bb      	str	r3, [r7, #104]	; 0x68
    35ec:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    35ee:	2300      	movs	r3, #0
    35f0:	2400      	movs	r4, #0
    35f2:	67bb      	str	r3, [r7, #120]	; 0x78
    35f4:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    35f6:	2300      	movs	r3, #0
    35f8:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    35fa:	2358      	movs	r3, #88	; 0x58
    35fc:	2240      	movs	r2, #64	; 0x40
    35fe:	4694      	mov	ip, r2
    3600:	44bc      	add	ip, r7
    3602:	4463      	add	r3, ip
    3604:	781a      	ldrb	r2, [r3, #0]
    3606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3608:	435a      	muls	r2, r3
    360a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    360c:	429a      	cmp	r2, r3
    360e:	d901      	bls.n	3614 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3610:	2340      	movs	r3, #64	; 0x40
    3612:	e0b3      	b.n	377c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3614:	2343      	movs	r3, #67	; 0x43
    3616:	18fb      	adds	r3, r7, r3
    3618:	781b      	ldrb	r3, [r3, #0]
    361a:	2b00      	cmp	r3, #0
    361c:	d13d      	bne.n	369a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    361e:	2358      	movs	r3, #88	; 0x58
    3620:	2240      	movs	r2, #64	; 0x40
    3622:	4694      	mov	ip, r2
    3624:	44bc      	add	ip, r7
    3626:	4463      	add	r3, ip
    3628:	781b      	ldrb	r3, [r3, #0]
    362a:	b2db      	uxtb	r3, r3
    362c:	613b      	str	r3, [r7, #16]
    362e:	2300      	movs	r3, #0
    3630:	617b      	str	r3, [r7, #20]
    3632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3634:	60bb      	str	r3, [r7, #8]
    3636:	2300      	movs	r3, #0
    3638:	60fb      	str	r3, [r7, #12]
    363a:	4c52      	ldr	r4, [pc, #328]	; (3784 <_sercom_get_async_baud_val+0x1b8>)
    363c:	68ba      	ldr	r2, [r7, #8]
    363e:	68fb      	ldr	r3, [r7, #12]
    3640:	6938      	ldr	r0, [r7, #16]
    3642:	6979      	ldr	r1, [r7, #20]
    3644:	47a0      	blx	r4
    3646:	0003      	movs	r3, r0
    3648:	000c      	movs	r4, r1
    364a:	001b      	movs	r3, r3
    364c:	65fb      	str	r3, [r7, #92]	; 0x5c
    364e:	2300      	movs	r3, #0
    3650:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    3652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3654:	603b      	str	r3, [r7, #0]
    3656:	2300      	movs	r3, #0
    3658:	607b      	str	r3, [r7, #4]
    365a:	6db8      	ldr	r0, [r7, #88]	; 0x58
    365c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    365e:	683a      	ldr	r2, [r7, #0]
    3660:	687b      	ldr	r3, [r7, #4]
    3662:	4c49      	ldr	r4, [pc, #292]	; (3788 <_sercom_get_async_baud_val+0x1bc>)
    3664:	47a0      	blx	r4
    3666:	0003      	movs	r3, r0
    3668:	000c      	movs	r4, r1
    366a:	673b      	str	r3, [r7, #112]	; 0x70
    366c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    366e:	2100      	movs	r1, #0
    3670:	2201      	movs	r2, #1
    3672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3674:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    3676:	1ac9      	subs	r1, r1, r3
    3678:	41a2      	sbcs	r2, r4
    367a:	000b      	movs	r3, r1
    367c:	0014      	movs	r4, r2
    367e:	66bb      	str	r3, [r7, #104]	; 0x68
    3680:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    3682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3684:	0c1b      	lsrs	r3, r3, #16
    3686:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3688:	0416      	lsls	r6, r2, #16
    368a:	431e      	orrs	r6, r3
    368c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    368e:	041d      	lsls	r5, r3, #16
    3690:	0033      	movs	r3, r6
    3692:	67bb      	str	r3, [r7, #120]	; 0x78
    3694:	2300      	movs	r3, #0
    3696:	67fb      	str	r3, [r7, #124]	; 0x7c
    3698:	e06a      	b.n	3770 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    369a:	2343      	movs	r3, #67	; 0x43
    369c:	18fb      	adds	r3, r7, r3
    369e:	781b      	ldrb	r3, [r3, #0]
    36a0:	2b01      	cmp	r3, #1
    36a2:	d165      	bne.n	3770 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    36a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    36a6:	633b      	str	r3, [r7, #48]	; 0x30
    36a8:	2300      	movs	r3, #0
    36aa:	637b      	str	r3, [r7, #52]	; 0x34
    36ac:	2358      	movs	r3, #88	; 0x58
    36ae:	2240      	movs	r2, #64	; 0x40
    36b0:	4694      	mov	ip, r2
    36b2:	44bc      	add	ip, r7
    36b4:	4463      	add	r3, ip
    36b6:	781b      	ldrb	r3, [r3, #0]
    36b8:	b2db      	uxtb	r3, r3
    36ba:	62bb      	str	r3, [r7, #40]	; 0x28
    36bc:	2300      	movs	r3, #0
    36be:	62fb      	str	r3, [r7, #44]	; 0x2c
    36c0:	4c30      	ldr	r4, [pc, #192]	; (3784 <_sercom_get_async_baud_val+0x1b8>)
    36c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    36c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    36c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
    36ca:	47a0      	blx	r4
    36cc:	0003      	movs	r3, r0
    36ce:	000c      	movs	r4, r1
    36d0:	65bb      	str	r3, [r7, #88]	; 0x58
    36d2:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    36d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    36d6:	623b      	str	r3, [r7, #32]
    36d8:	2300      	movs	r3, #0
    36da:	627b      	str	r3, [r7, #36]	; 0x24
    36dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    36de:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    36e0:	001a      	movs	r2, r3
    36e2:	0023      	movs	r3, r4
    36e4:	6a38      	ldr	r0, [r7, #32]
    36e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    36e8:	4c27      	ldr	r4, [pc, #156]	; (3788 <_sercom_get_async_baud_val+0x1bc>)
    36ea:	47a0      	blx	r4
    36ec:	0003      	movs	r3, r0
    36ee:	000c      	movs	r4, r1
    36f0:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    36f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    36f4:	2380      	movs	r3, #128	; 0x80
    36f6:	019b      	lsls	r3, r3, #6
    36f8:	429a      	cmp	r2, r3
    36fa:	d901      	bls.n	3700 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    36fc:	2340      	movs	r3, #64	; 0x40
    36fe:	e03d      	b.n	377c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    3700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3702:	61bb      	str	r3, [r7, #24]
    3704:	2300      	movs	r3, #0
    3706:	61fb      	str	r3, [r7, #28]
    3708:	69b9      	ldr	r1, [r7, #24]
    370a:	69fa      	ldr	r2, [r7, #28]
    370c:	000b      	movs	r3, r1
    370e:	0f5b      	lsrs	r3, r3, #29
    3710:	0010      	movs	r0, r2
    3712:	00c0      	lsls	r0, r0, #3
    3714:	63f8      	str	r0, [r7, #60]	; 0x3c
    3716:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3718:	4318      	orrs	r0, r3
    371a:	63f8      	str	r0, [r7, #60]	; 0x3c
    371c:	000b      	movs	r3, r1
    371e:	00db      	lsls	r3, r3, #3
    3720:	63bb      	str	r3, [r7, #56]	; 0x38
    3722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3724:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3726:	001a      	movs	r2, r3
    3728:	0023      	movs	r3, r4
    372a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    372c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    372e:	4c16      	ldr	r4, [pc, #88]	; (3788 <_sercom_get_async_baud_val+0x1bc>)
    3730:	47a0      	blx	r4
    3732:	0003      	movs	r3, r0
    3734:	000c      	movs	r4, r1
    3736:	65bb      	str	r3, [r7, #88]	; 0x58
    3738:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    373a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    373c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    373e:	b2d9      	uxtb	r1, r3
    3740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3742:	b2db      	uxtb	r3, r3
    3744:	00db      	lsls	r3, r3, #3
    3746:	b2da      	uxtb	r2, r3
    3748:	2317      	movs	r3, #23
    374a:	2040      	movs	r0, #64	; 0x40
    374c:	4684      	mov	ip, r0
    374e:	44bc      	add	ip, r7
    3750:	4463      	add	r3, ip
    3752:	1a8a      	subs	r2, r1, r2
    3754:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    3756:	2317      	movs	r3, #23
    3758:	2240      	movs	r2, #64	; 0x40
    375a:	4694      	mov	ip, r2
    375c:	44bc      	add	ip, r7
    375e:	4463      	add	r3, ip
    3760:	781b      	ldrb	r3, [r3, #0]
    3762:	035b      	lsls	r3, r3, #13
    3764:	001a      	movs	r2, r3
    3766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3768:	4313      	orrs	r3, r2
    376a:	67bb      	str	r3, [r7, #120]	; 0x78
    376c:	2300      	movs	r3, #0
    376e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    3770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3772:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    3774:	b29a      	uxth	r2, r3
    3776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3778:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    377a:	2300      	movs	r3, #0
}
    377c:	0018      	movs	r0, r3
    377e:	46bd      	mov	sp, r7
    3780:	b021      	add	sp, #132	; 0x84
    3782:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3784:	0000a599 	.word	0x0000a599
    3788:	0000346f 	.word	0x0000346f

0000378c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    378c:	b580      	push	{r7, lr}
    378e:	b084      	sub	sp, #16
    3790:	af00      	add	r7, sp, #0
    3792:	0002      	movs	r2, r0
    3794:	1dfb      	adds	r3, r7, #7
    3796:	701a      	strb	r2, [r3, #0]
    3798:	1dbb      	adds	r3, r7, #6
    379a:	1c0a      	adds	r2, r1, #0
    379c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    379e:	4b1a      	ldr	r3, [pc, #104]	; (3808 <sercom_set_gclk_generator+0x7c>)
    37a0:	781b      	ldrb	r3, [r3, #0]
    37a2:	2201      	movs	r2, #1
    37a4:	4053      	eors	r3, r2
    37a6:	b2db      	uxtb	r3, r3
    37a8:	2b00      	cmp	r3, #0
    37aa:	d103      	bne.n	37b4 <sercom_set_gclk_generator+0x28>
    37ac:	1dbb      	adds	r3, r7, #6
    37ae:	781b      	ldrb	r3, [r3, #0]
    37b0:	2b00      	cmp	r3, #0
    37b2:	d01b      	beq.n	37ec <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    37b4:	230c      	movs	r3, #12
    37b6:	18fb      	adds	r3, r7, r3
    37b8:	0018      	movs	r0, r3
    37ba:	4b14      	ldr	r3, [pc, #80]	; (380c <sercom_set_gclk_generator+0x80>)
    37bc:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    37be:	230c      	movs	r3, #12
    37c0:	18fb      	adds	r3, r7, r3
    37c2:	1dfa      	adds	r2, r7, #7
    37c4:	7812      	ldrb	r2, [r2, #0]
    37c6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    37c8:	230c      	movs	r3, #12
    37ca:	18fb      	adds	r3, r7, r3
    37cc:	0019      	movs	r1, r3
    37ce:	2013      	movs	r0, #19
    37d0:	4b0f      	ldr	r3, [pc, #60]	; (3810 <sercom_set_gclk_generator+0x84>)
    37d2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    37d4:	2013      	movs	r0, #19
    37d6:	4b0f      	ldr	r3, [pc, #60]	; (3814 <sercom_set_gclk_generator+0x88>)
    37d8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    37da:	4b0b      	ldr	r3, [pc, #44]	; (3808 <sercom_set_gclk_generator+0x7c>)
    37dc:	1dfa      	adds	r2, r7, #7
    37de:	7812      	ldrb	r2, [r2, #0]
    37e0:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    37e2:	4b09      	ldr	r3, [pc, #36]	; (3808 <sercom_set_gclk_generator+0x7c>)
    37e4:	2201      	movs	r2, #1
    37e6:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    37e8:	2300      	movs	r3, #0
    37ea:	e008      	b.n	37fe <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    37ec:	4b06      	ldr	r3, [pc, #24]	; (3808 <sercom_set_gclk_generator+0x7c>)
    37ee:	785b      	ldrb	r3, [r3, #1]
    37f0:	1dfa      	adds	r2, r7, #7
    37f2:	7812      	ldrb	r2, [r2, #0]
    37f4:	429a      	cmp	r2, r3
    37f6:	d101      	bne.n	37fc <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    37f8:	2300      	movs	r3, #0
    37fa:	e000      	b.n	37fe <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    37fc:	231d      	movs	r3, #29
}
    37fe:	0018      	movs	r0, r3
    3800:	46bd      	mov	sp, r7
    3802:	b004      	add	sp, #16
    3804:	bd80      	pop	{r7, pc}
    3806:	46c0      	nop			; (mov r8, r8)
    3808:	20000144 	.word	0x20000144
    380c:	00003459 	.word	0x00003459
    3810:	000064e9 	.word	0x000064e9
    3814:	0000652d 	.word	0x0000652d

00003818 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3818:	b580      	push	{r7, lr}
    381a:	b082      	sub	sp, #8
    381c:	af00      	add	r7, sp, #0
    381e:	6078      	str	r0, [r7, #4]
    3820:	000a      	movs	r2, r1
    3822:	1cfb      	adds	r3, r7, #3
    3824:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3826:	687b      	ldr	r3, [r7, #4]
    3828:	4a4d      	ldr	r2, [pc, #308]	; (3960 <_sercom_get_default_pad+0x148>)
    382a:	4293      	cmp	r3, r2
    382c:	d03f      	beq.n	38ae <_sercom_get_default_pad+0x96>
    382e:	4a4c      	ldr	r2, [pc, #304]	; (3960 <_sercom_get_default_pad+0x148>)
    3830:	4293      	cmp	r3, r2
    3832:	d806      	bhi.n	3842 <_sercom_get_default_pad+0x2a>
    3834:	4a4b      	ldr	r2, [pc, #300]	; (3964 <_sercom_get_default_pad+0x14c>)
    3836:	4293      	cmp	r3, r2
    3838:	d00f      	beq.n	385a <_sercom_get_default_pad+0x42>
    383a:	4a4b      	ldr	r2, [pc, #300]	; (3968 <_sercom_get_default_pad+0x150>)
    383c:	4293      	cmp	r3, r2
    383e:	d021      	beq.n	3884 <_sercom_get_default_pad+0x6c>
    3840:	e089      	b.n	3956 <_sercom_get_default_pad+0x13e>
    3842:	4a4a      	ldr	r2, [pc, #296]	; (396c <_sercom_get_default_pad+0x154>)
    3844:	4293      	cmp	r3, r2
    3846:	d100      	bne.n	384a <_sercom_get_default_pad+0x32>
    3848:	e05b      	b.n	3902 <_sercom_get_default_pad+0xea>
    384a:	4a49      	ldr	r2, [pc, #292]	; (3970 <_sercom_get_default_pad+0x158>)
    384c:	4293      	cmp	r3, r2
    384e:	d100      	bne.n	3852 <_sercom_get_default_pad+0x3a>
    3850:	e06c      	b.n	392c <_sercom_get_default_pad+0x114>
    3852:	4a48      	ldr	r2, [pc, #288]	; (3974 <_sercom_get_default_pad+0x15c>)
    3854:	4293      	cmp	r3, r2
    3856:	d03f      	beq.n	38d8 <_sercom_get_default_pad+0xc0>
    3858:	e07d      	b.n	3956 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    385a:	1cfb      	adds	r3, r7, #3
    385c:	781b      	ldrb	r3, [r3, #0]
    385e:	2b01      	cmp	r3, #1
    3860:	d00a      	beq.n	3878 <_sercom_get_default_pad+0x60>
    3862:	dc02      	bgt.n	386a <_sercom_get_default_pad+0x52>
    3864:	2b00      	cmp	r3, #0
    3866:	d005      	beq.n	3874 <_sercom_get_default_pad+0x5c>
    3868:	e075      	b.n	3956 <_sercom_get_default_pad+0x13e>
    386a:	2b02      	cmp	r3, #2
    386c:	d006      	beq.n	387c <_sercom_get_default_pad+0x64>
    386e:	2b03      	cmp	r3, #3
    3870:	d006      	beq.n	3880 <_sercom_get_default_pad+0x68>
    3872:	e070      	b.n	3956 <_sercom_get_default_pad+0x13e>
    3874:	4b40      	ldr	r3, [pc, #256]	; (3978 <_sercom_get_default_pad+0x160>)
    3876:	e06f      	b.n	3958 <_sercom_get_default_pad+0x140>
    3878:	4b40      	ldr	r3, [pc, #256]	; (397c <_sercom_get_default_pad+0x164>)
    387a:	e06d      	b.n	3958 <_sercom_get_default_pad+0x140>
    387c:	4b40      	ldr	r3, [pc, #256]	; (3980 <_sercom_get_default_pad+0x168>)
    387e:	e06b      	b.n	3958 <_sercom_get_default_pad+0x140>
    3880:	4b40      	ldr	r3, [pc, #256]	; (3984 <_sercom_get_default_pad+0x16c>)
    3882:	e069      	b.n	3958 <_sercom_get_default_pad+0x140>
    3884:	1cfb      	adds	r3, r7, #3
    3886:	781b      	ldrb	r3, [r3, #0]
    3888:	2b01      	cmp	r3, #1
    388a:	d00a      	beq.n	38a2 <_sercom_get_default_pad+0x8a>
    388c:	dc02      	bgt.n	3894 <_sercom_get_default_pad+0x7c>
    388e:	2b00      	cmp	r3, #0
    3890:	d005      	beq.n	389e <_sercom_get_default_pad+0x86>
    3892:	e060      	b.n	3956 <_sercom_get_default_pad+0x13e>
    3894:	2b02      	cmp	r3, #2
    3896:	d006      	beq.n	38a6 <_sercom_get_default_pad+0x8e>
    3898:	2b03      	cmp	r3, #3
    389a:	d006      	beq.n	38aa <_sercom_get_default_pad+0x92>
    389c:	e05b      	b.n	3956 <_sercom_get_default_pad+0x13e>
    389e:	2303      	movs	r3, #3
    38a0:	e05a      	b.n	3958 <_sercom_get_default_pad+0x140>
    38a2:	4b39      	ldr	r3, [pc, #228]	; (3988 <_sercom_get_default_pad+0x170>)
    38a4:	e058      	b.n	3958 <_sercom_get_default_pad+0x140>
    38a6:	4b39      	ldr	r3, [pc, #228]	; (398c <_sercom_get_default_pad+0x174>)
    38a8:	e056      	b.n	3958 <_sercom_get_default_pad+0x140>
    38aa:	4b39      	ldr	r3, [pc, #228]	; (3990 <_sercom_get_default_pad+0x178>)
    38ac:	e054      	b.n	3958 <_sercom_get_default_pad+0x140>
    38ae:	1cfb      	adds	r3, r7, #3
    38b0:	781b      	ldrb	r3, [r3, #0]
    38b2:	2b01      	cmp	r3, #1
    38b4:	d00a      	beq.n	38cc <_sercom_get_default_pad+0xb4>
    38b6:	dc02      	bgt.n	38be <_sercom_get_default_pad+0xa6>
    38b8:	2b00      	cmp	r3, #0
    38ba:	d005      	beq.n	38c8 <_sercom_get_default_pad+0xb0>
    38bc:	e04b      	b.n	3956 <_sercom_get_default_pad+0x13e>
    38be:	2b02      	cmp	r3, #2
    38c0:	d006      	beq.n	38d0 <_sercom_get_default_pad+0xb8>
    38c2:	2b03      	cmp	r3, #3
    38c4:	d006      	beq.n	38d4 <_sercom_get_default_pad+0xbc>
    38c6:	e046      	b.n	3956 <_sercom_get_default_pad+0x13e>
    38c8:	4b32      	ldr	r3, [pc, #200]	; (3994 <_sercom_get_default_pad+0x17c>)
    38ca:	e045      	b.n	3958 <_sercom_get_default_pad+0x140>
    38cc:	4b32      	ldr	r3, [pc, #200]	; (3998 <_sercom_get_default_pad+0x180>)
    38ce:	e043      	b.n	3958 <_sercom_get_default_pad+0x140>
    38d0:	4b32      	ldr	r3, [pc, #200]	; (399c <_sercom_get_default_pad+0x184>)
    38d2:	e041      	b.n	3958 <_sercom_get_default_pad+0x140>
    38d4:	4b32      	ldr	r3, [pc, #200]	; (39a0 <_sercom_get_default_pad+0x188>)
    38d6:	e03f      	b.n	3958 <_sercom_get_default_pad+0x140>
    38d8:	1cfb      	adds	r3, r7, #3
    38da:	781b      	ldrb	r3, [r3, #0]
    38dc:	2b01      	cmp	r3, #1
    38de:	d00a      	beq.n	38f6 <_sercom_get_default_pad+0xde>
    38e0:	dc02      	bgt.n	38e8 <_sercom_get_default_pad+0xd0>
    38e2:	2b00      	cmp	r3, #0
    38e4:	d005      	beq.n	38f2 <_sercom_get_default_pad+0xda>
    38e6:	e036      	b.n	3956 <_sercom_get_default_pad+0x13e>
    38e8:	2b02      	cmp	r3, #2
    38ea:	d006      	beq.n	38fa <_sercom_get_default_pad+0xe2>
    38ec:	2b03      	cmp	r3, #3
    38ee:	d006      	beq.n	38fe <_sercom_get_default_pad+0xe6>
    38f0:	e031      	b.n	3956 <_sercom_get_default_pad+0x13e>
    38f2:	4b2c      	ldr	r3, [pc, #176]	; (39a4 <_sercom_get_default_pad+0x18c>)
    38f4:	e030      	b.n	3958 <_sercom_get_default_pad+0x140>
    38f6:	4b2c      	ldr	r3, [pc, #176]	; (39a8 <_sercom_get_default_pad+0x190>)
    38f8:	e02e      	b.n	3958 <_sercom_get_default_pad+0x140>
    38fa:	4b2c      	ldr	r3, [pc, #176]	; (39ac <_sercom_get_default_pad+0x194>)
    38fc:	e02c      	b.n	3958 <_sercom_get_default_pad+0x140>
    38fe:	4b2c      	ldr	r3, [pc, #176]	; (39b0 <_sercom_get_default_pad+0x198>)
    3900:	e02a      	b.n	3958 <_sercom_get_default_pad+0x140>
    3902:	1cfb      	adds	r3, r7, #3
    3904:	781b      	ldrb	r3, [r3, #0]
    3906:	2b01      	cmp	r3, #1
    3908:	d00a      	beq.n	3920 <_sercom_get_default_pad+0x108>
    390a:	dc02      	bgt.n	3912 <_sercom_get_default_pad+0xfa>
    390c:	2b00      	cmp	r3, #0
    390e:	d005      	beq.n	391c <_sercom_get_default_pad+0x104>
    3910:	e021      	b.n	3956 <_sercom_get_default_pad+0x13e>
    3912:	2b02      	cmp	r3, #2
    3914:	d006      	beq.n	3924 <_sercom_get_default_pad+0x10c>
    3916:	2b03      	cmp	r3, #3
    3918:	d006      	beq.n	3928 <_sercom_get_default_pad+0x110>
    391a:	e01c      	b.n	3956 <_sercom_get_default_pad+0x13e>
    391c:	4b25      	ldr	r3, [pc, #148]	; (39b4 <_sercom_get_default_pad+0x19c>)
    391e:	e01b      	b.n	3958 <_sercom_get_default_pad+0x140>
    3920:	4b25      	ldr	r3, [pc, #148]	; (39b8 <_sercom_get_default_pad+0x1a0>)
    3922:	e019      	b.n	3958 <_sercom_get_default_pad+0x140>
    3924:	4b25      	ldr	r3, [pc, #148]	; (39bc <_sercom_get_default_pad+0x1a4>)
    3926:	e017      	b.n	3958 <_sercom_get_default_pad+0x140>
    3928:	4b25      	ldr	r3, [pc, #148]	; (39c0 <_sercom_get_default_pad+0x1a8>)
    392a:	e015      	b.n	3958 <_sercom_get_default_pad+0x140>
    392c:	1cfb      	adds	r3, r7, #3
    392e:	781b      	ldrb	r3, [r3, #0]
    3930:	2b01      	cmp	r3, #1
    3932:	d00a      	beq.n	394a <_sercom_get_default_pad+0x132>
    3934:	dc02      	bgt.n	393c <_sercom_get_default_pad+0x124>
    3936:	2b00      	cmp	r3, #0
    3938:	d005      	beq.n	3946 <_sercom_get_default_pad+0x12e>
    393a:	e00c      	b.n	3956 <_sercom_get_default_pad+0x13e>
    393c:	2b02      	cmp	r3, #2
    393e:	d006      	beq.n	394e <_sercom_get_default_pad+0x136>
    3940:	2b03      	cmp	r3, #3
    3942:	d006      	beq.n	3952 <_sercom_get_default_pad+0x13a>
    3944:	e007      	b.n	3956 <_sercom_get_default_pad+0x13e>
    3946:	4b1f      	ldr	r3, [pc, #124]	; (39c4 <_sercom_get_default_pad+0x1ac>)
    3948:	e006      	b.n	3958 <_sercom_get_default_pad+0x140>
    394a:	4b1f      	ldr	r3, [pc, #124]	; (39c8 <_sercom_get_default_pad+0x1b0>)
    394c:	e004      	b.n	3958 <_sercom_get_default_pad+0x140>
    394e:	4b1f      	ldr	r3, [pc, #124]	; (39cc <_sercom_get_default_pad+0x1b4>)
    3950:	e002      	b.n	3958 <_sercom_get_default_pad+0x140>
    3952:	4b1f      	ldr	r3, [pc, #124]	; (39d0 <_sercom_get_default_pad+0x1b8>)
    3954:	e000      	b.n	3958 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3956:	2300      	movs	r3, #0
}
    3958:	0018      	movs	r0, r3
    395a:	46bd      	mov	sp, r7
    395c:	b002      	add	sp, #8
    395e:	bd80      	pop	{r7, pc}
    3960:	42001000 	.word	0x42001000
    3964:	42000800 	.word	0x42000800
    3968:	42000c00 	.word	0x42000c00
    396c:	42001800 	.word	0x42001800
    3970:	42001c00 	.word	0x42001c00
    3974:	42001400 	.word	0x42001400
    3978:	00040003 	.word	0x00040003
    397c:	00050003 	.word	0x00050003
    3980:	00060003 	.word	0x00060003
    3984:	00070003 	.word	0x00070003
    3988:	00010003 	.word	0x00010003
    398c:	001e0003 	.word	0x001e0003
    3990:	001f0003 	.word	0x001f0003
    3994:	00080003 	.word	0x00080003
    3998:	00090003 	.word	0x00090003
    399c:	000a0003 	.word	0x000a0003
    39a0:	000b0003 	.word	0x000b0003
    39a4:	00100003 	.word	0x00100003
    39a8:	00110003 	.word	0x00110003
    39ac:	00120003 	.word	0x00120003
    39b0:	00130003 	.word	0x00130003
    39b4:	000c0003 	.word	0x000c0003
    39b8:	000d0003 	.word	0x000d0003
    39bc:	000e0003 	.word	0x000e0003
    39c0:	000f0003 	.word	0x000f0003
    39c4:	00160003 	.word	0x00160003
    39c8:	00170003 	.word	0x00170003
    39cc:	00180003 	.word	0x00180003
    39d0:	00190003 	.word	0x00190003

000039d4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    39d4:	b590      	push	{r4, r7, lr}
    39d6:	b08b      	sub	sp, #44	; 0x2c
    39d8:	af00      	add	r7, sp, #0
    39da:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    39dc:	230c      	movs	r3, #12
    39de:	18fb      	adds	r3, r7, r3
    39e0:	4a0f      	ldr	r2, [pc, #60]	; (3a20 <_sercom_get_sercom_inst_index+0x4c>)
    39e2:	ca13      	ldmia	r2!, {r0, r1, r4}
    39e4:	c313      	stmia	r3!, {r0, r1, r4}
    39e6:	ca13      	ldmia	r2!, {r0, r1, r4}
    39e8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    39ea:	2300      	movs	r3, #0
    39ec:	627b      	str	r3, [r7, #36]	; 0x24
    39ee:	e00e      	b.n	3a0e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    39f0:	230c      	movs	r3, #12
    39f2:	18fb      	adds	r3, r7, r3
    39f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    39f6:	0092      	lsls	r2, r2, #2
    39f8:	58d3      	ldr	r3, [r2, r3]
    39fa:	001a      	movs	r2, r3
    39fc:	687b      	ldr	r3, [r7, #4]
    39fe:	429a      	cmp	r2, r3
    3a00:	d102      	bne.n	3a08 <_sercom_get_sercom_inst_index+0x34>
			return i;
    3a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a04:	b2db      	uxtb	r3, r3
    3a06:	e006      	b.n	3a16 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a0a:	3301      	adds	r3, #1
    3a0c:	627b      	str	r3, [r7, #36]	; 0x24
    3a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a10:	2b05      	cmp	r3, #5
    3a12:	d9ed      	bls.n	39f0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3a14:	2300      	movs	r3, #0
}
    3a16:	0018      	movs	r0, r3
    3a18:	46bd      	mov	sp, r7
    3a1a:	b00b      	add	sp, #44	; 0x2c
    3a1c:	bd90      	pop	{r4, r7, pc}
    3a1e:	46c0      	nop			; (mov r8, r8)
    3a20:	0000aef8 	.word	0x0000aef8

00003a24 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3a24:	b580      	push	{r7, lr}
    3a26:	b082      	sub	sp, #8
    3a28:	af00      	add	r7, sp, #0
    3a2a:	0002      	movs	r2, r0
    3a2c:	1dfb      	adds	r3, r7, #7
    3a2e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3a30:	46c0      	nop			; (mov r8, r8)
    3a32:	46bd      	mov	sp, r7
    3a34:	b002      	add	sp, #8
    3a36:	bd80      	pop	{r7, pc}

00003a38 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3a38:	b580      	push	{r7, lr}
    3a3a:	b084      	sub	sp, #16
    3a3c:	af00      	add	r7, sp, #0
    3a3e:	0002      	movs	r2, r0
    3a40:	6039      	str	r1, [r7, #0]
    3a42:	1dfb      	adds	r3, r7, #7
    3a44:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3a46:	4b13      	ldr	r3, [pc, #76]	; (3a94 <_sercom_set_handler+0x5c>)
    3a48:	781b      	ldrb	r3, [r3, #0]
    3a4a:	2201      	movs	r2, #1
    3a4c:	4053      	eors	r3, r2
    3a4e:	b2db      	uxtb	r3, r3
    3a50:	2b00      	cmp	r3, #0
    3a52:	d015      	beq.n	3a80 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3a54:	2300      	movs	r3, #0
    3a56:	60fb      	str	r3, [r7, #12]
    3a58:	e00c      	b.n	3a74 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3a5a:	4b0f      	ldr	r3, [pc, #60]	; (3a98 <_sercom_set_handler+0x60>)
    3a5c:	68fa      	ldr	r2, [r7, #12]
    3a5e:	0092      	lsls	r2, r2, #2
    3a60:	490e      	ldr	r1, [pc, #56]	; (3a9c <_sercom_set_handler+0x64>)
    3a62:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3a64:	4b0e      	ldr	r3, [pc, #56]	; (3aa0 <_sercom_set_handler+0x68>)
    3a66:	68fa      	ldr	r2, [r7, #12]
    3a68:	0092      	lsls	r2, r2, #2
    3a6a:	2100      	movs	r1, #0
    3a6c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3a6e:	68fb      	ldr	r3, [r7, #12]
    3a70:	3301      	adds	r3, #1
    3a72:	60fb      	str	r3, [r7, #12]
    3a74:	68fb      	ldr	r3, [r7, #12]
    3a76:	2b05      	cmp	r3, #5
    3a78:	d9ef      	bls.n	3a5a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    3a7a:	4b06      	ldr	r3, [pc, #24]	; (3a94 <_sercom_set_handler+0x5c>)
    3a7c:	2201      	movs	r2, #1
    3a7e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3a80:	1dfb      	adds	r3, r7, #7
    3a82:	781a      	ldrb	r2, [r3, #0]
    3a84:	4b04      	ldr	r3, [pc, #16]	; (3a98 <_sercom_set_handler+0x60>)
    3a86:	0092      	lsls	r2, r2, #2
    3a88:	6839      	ldr	r1, [r7, #0]
    3a8a:	50d1      	str	r1, [r2, r3]
}
    3a8c:	46c0      	nop			; (mov r8, r8)
    3a8e:	46bd      	mov	sp, r7
    3a90:	b004      	add	sp, #16
    3a92:	bd80      	pop	{r7, pc}
    3a94:	20000146 	.word	0x20000146
    3a98:	20000148 	.word	0x20000148
    3a9c:	00003a25 	.word	0x00003a25
    3aa0:	200009d4 	.word	0x200009d4

00003aa4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3aa4:	b590      	push	{r4, r7, lr}
    3aa6:	b085      	sub	sp, #20
    3aa8:	af00      	add	r7, sp, #0
    3aaa:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3aac:	2308      	movs	r3, #8
    3aae:	18fb      	adds	r3, r7, r3
    3ab0:	4a0b      	ldr	r2, [pc, #44]	; (3ae0 <_sercom_get_interrupt_vector+0x3c>)
    3ab2:	6811      	ldr	r1, [r2, #0]
    3ab4:	6019      	str	r1, [r3, #0]
    3ab6:	8892      	ldrh	r2, [r2, #4]
    3ab8:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3aba:	230f      	movs	r3, #15
    3abc:	18fc      	adds	r4, r7, r3
    3abe:	687b      	ldr	r3, [r7, #4]
    3ac0:	0018      	movs	r0, r3
    3ac2:	4b08      	ldr	r3, [pc, #32]	; (3ae4 <_sercom_get_interrupt_vector+0x40>)
    3ac4:	4798      	blx	r3
    3ac6:	0003      	movs	r3, r0
    3ac8:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3aca:	230f      	movs	r3, #15
    3acc:	18fb      	adds	r3, r7, r3
    3ace:	781b      	ldrb	r3, [r3, #0]
    3ad0:	2208      	movs	r2, #8
    3ad2:	18ba      	adds	r2, r7, r2
    3ad4:	5cd3      	ldrb	r3, [r2, r3]
    3ad6:	b25b      	sxtb	r3, r3
}
    3ad8:	0018      	movs	r0, r3
    3ada:	46bd      	mov	sp, r7
    3adc:	b005      	add	sp, #20
    3ade:	bd90      	pop	{r4, r7, pc}
    3ae0:	0000af10 	.word	0x0000af10
    3ae4:	000039d5 	.word	0x000039d5

00003ae8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3ae8:	b580      	push	{r7, lr}
    3aea:	af00      	add	r7, sp, #0
    3aec:	4b03      	ldr	r3, [pc, #12]	; (3afc <SERCOM0_Handler+0x14>)
    3aee:	681b      	ldr	r3, [r3, #0]
    3af0:	2000      	movs	r0, #0
    3af2:	4798      	blx	r3
    3af4:	46c0      	nop			; (mov r8, r8)
    3af6:	46bd      	mov	sp, r7
    3af8:	bd80      	pop	{r7, pc}
    3afa:	46c0      	nop			; (mov r8, r8)
    3afc:	20000148 	.word	0x20000148

00003b00 <SERCOM1_Handler>:
    3b00:	b580      	push	{r7, lr}
    3b02:	af00      	add	r7, sp, #0
    3b04:	4b03      	ldr	r3, [pc, #12]	; (3b14 <SERCOM1_Handler+0x14>)
    3b06:	685b      	ldr	r3, [r3, #4]
    3b08:	2001      	movs	r0, #1
    3b0a:	4798      	blx	r3
    3b0c:	46c0      	nop			; (mov r8, r8)
    3b0e:	46bd      	mov	sp, r7
    3b10:	bd80      	pop	{r7, pc}
    3b12:	46c0      	nop			; (mov r8, r8)
    3b14:	20000148 	.word	0x20000148

00003b18 <SERCOM2_Handler>:
    3b18:	b580      	push	{r7, lr}
    3b1a:	af00      	add	r7, sp, #0
    3b1c:	4b03      	ldr	r3, [pc, #12]	; (3b2c <SERCOM2_Handler+0x14>)
    3b1e:	689b      	ldr	r3, [r3, #8]
    3b20:	2002      	movs	r0, #2
    3b22:	4798      	blx	r3
    3b24:	46c0      	nop			; (mov r8, r8)
    3b26:	46bd      	mov	sp, r7
    3b28:	bd80      	pop	{r7, pc}
    3b2a:	46c0      	nop			; (mov r8, r8)
    3b2c:	20000148 	.word	0x20000148

00003b30 <SERCOM3_Handler>:
    3b30:	b580      	push	{r7, lr}
    3b32:	af00      	add	r7, sp, #0
    3b34:	4b03      	ldr	r3, [pc, #12]	; (3b44 <SERCOM3_Handler+0x14>)
    3b36:	68db      	ldr	r3, [r3, #12]
    3b38:	2003      	movs	r0, #3
    3b3a:	4798      	blx	r3
    3b3c:	46c0      	nop			; (mov r8, r8)
    3b3e:	46bd      	mov	sp, r7
    3b40:	bd80      	pop	{r7, pc}
    3b42:	46c0      	nop			; (mov r8, r8)
    3b44:	20000148 	.word	0x20000148

00003b48 <SERCOM4_Handler>:
    3b48:	b580      	push	{r7, lr}
    3b4a:	af00      	add	r7, sp, #0
    3b4c:	4b03      	ldr	r3, [pc, #12]	; (3b5c <SERCOM4_Handler+0x14>)
    3b4e:	691b      	ldr	r3, [r3, #16]
    3b50:	2004      	movs	r0, #4
    3b52:	4798      	blx	r3
    3b54:	46c0      	nop			; (mov r8, r8)
    3b56:	46bd      	mov	sp, r7
    3b58:	bd80      	pop	{r7, pc}
    3b5a:	46c0      	nop			; (mov r8, r8)
    3b5c:	20000148 	.word	0x20000148

00003b60 <SERCOM5_Handler>:
    3b60:	b580      	push	{r7, lr}
    3b62:	af00      	add	r7, sp, #0
    3b64:	4b03      	ldr	r3, [pc, #12]	; (3b74 <SERCOM5_Handler+0x14>)
    3b66:	695b      	ldr	r3, [r3, #20]
    3b68:	2005      	movs	r0, #5
    3b6a:	4798      	blx	r3
    3b6c:	46c0      	nop			; (mov r8, r8)
    3b6e:	46bd      	mov	sp, r7
    3b70:	bd80      	pop	{r7, pc}
    3b72:	46c0      	nop			; (mov r8, r8)
    3b74:	20000148 	.word	0x20000148

00003b78 <system_pinmux_get_config_defaults>:
{
    3b78:	b580      	push	{r7, lr}
    3b7a:	b082      	sub	sp, #8
    3b7c:	af00      	add	r7, sp, #0
    3b7e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3b80:	687b      	ldr	r3, [r7, #4]
    3b82:	2280      	movs	r2, #128	; 0x80
    3b84:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3b86:	687b      	ldr	r3, [r7, #4]
    3b88:	2200      	movs	r2, #0
    3b8a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3b8c:	687b      	ldr	r3, [r7, #4]
    3b8e:	2201      	movs	r2, #1
    3b90:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3b92:	687b      	ldr	r3, [r7, #4]
    3b94:	2200      	movs	r2, #0
    3b96:	70da      	strb	r2, [r3, #3]
}
    3b98:	46c0      	nop			; (mov r8, r8)
    3b9a:	46bd      	mov	sp, r7
    3b9c:	b002      	add	sp, #8
    3b9e:	bd80      	pop	{r7, pc}

00003ba0 <system_pinmux_get_group_from_gpio_pin>:
{
    3ba0:	b580      	push	{r7, lr}
    3ba2:	b084      	sub	sp, #16
    3ba4:	af00      	add	r7, sp, #0
    3ba6:	0002      	movs	r2, r0
    3ba8:	1dfb      	adds	r3, r7, #7
    3baa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3bac:	230f      	movs	r3, #15
    3bae:	18fb      	adds	r3, r7, r3
    3bb0:	1dfa      	adds	r2, r7, #7
    3bb2:	7812      	ldrb	r2, [r2, #0]
    3bb4:	09d2      	lsrs	r2, r2, #7
    3bb6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3bb8:	230e      	movs	r3, #14
    3bba:	18fb      	adds	r3, r7, r3
    3bbc:	1dfa      	adds	r2, r7, #7
    3bbe:	7812      	ldrb	r2, [r2, #0]
    3bc0:	0952      	lsrs	r2, r2, #5
    3bc2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3bc4:	4b0d      	ldr	r3, [pc, #52]	; (3bfc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3bc6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3bc8:	230f      	movs	r3, #15
    3bca:	18fb      	adds	r3, r7, r3
    3bcc:	781b      	ldrb	r3, [r3, #0]
    3bce:	2b00      	cmp	r3, #0
    3bd0:	d10f      	bne.n	3bf2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3bd2:	230f      	movs	r3, #15
    3bd4:	18fb      	adds	r3, r7, r3
    3bd6:	781b      	ldrb	r3, [r3, #0]
    3bd8:	009b      	lsls	r3, r3, #2
    3bda:	2210      	movs	r2, #16
    3bdc:	4694      	mov	ip, r2
    3bde:	44bc      	add	ip, r7
    3be0:	4463      	add	r3, ip
    3be2:	3b08      	subs	r3, #8
    3be4:	681a      	ldr	r2, [r3, #0]
    3be6:	230e      	movs	r3, #14
    3be8:	18fb      	adds	r3, r7, r3
    3bea:	781b      	ldrb	r3, [r3, #0]
    3bec:	01db      	lsls	r3, r3, #7
    3bee:	18d3      	adds	r3, r2, r3
    3bf0:	e000      	b.n	3bf4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3bf2:	2300      	movs	r3, #0
}
    3bf4:	0018      	movs	r0, r3
    3bf6:	46bd      	mov	sp, r7
    3bf8:	b004      	add	sp, #16
    3bfa:	bd80      	pop	{r7, pc}
    3bfc:	41004400 	.word	0x41004400

00003c00 <port_get_group_from_gpio_pin>:
{
    3c00:	b580      	push	{r7, lr}
    3c02:	b082      	sub	sp, #8
    3c04:	af00      	add	r7, sp, #0
    3c06:	0002      	movs	r2, r0
    3c08:	1dfb      	adds	r3, r7, #7
    3c0a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3c0c:	1dfb      	adds	r3, r7, #7
    3c0e:	781b      	ldrb	r3, [r3, #0]
    3c10:	0018      	movs	r0, r3
    3c12:	4b03      	ldr	r3, [pc, #12]	; (3c20 <port_get_group_from_gpio_pin+0x20>)
    3c14:	4798      	blx	r3
    3c16:	0003      	movs	r3, r0
}
    3c18:	0018      	movs	r0, r3
    3c1a:	46bd      	mov	sp, r7
    3c1c:	b002      	add	sp, #8
    3c1e:	bd80      	pop	{r7, pc}
    3c20:	00003ba1 	.word	0x00003ba1

00003c24 <port_pin_set_output_level>:
{
    3c24:	b580      	push	{r7, lr}
    3c26:	b084      	sub	sp, #16
    3c28:	af00      	add	r7, sp, #0
    3c2a:	0002      	movs	r2, r0
    3c2c:	1dfb      	adds	r3, r7, #7
    3c2e:	701a      	strb	r2, [r3, #0]
    3c30:	1dbb      	adds	r3, r7, #6
    3c32:	1c0a      	adds	r2, r1, #0
    3c34:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3c36:	1dfb      	adds	r3, r7, #7
    3c38:	781b      	ldrb	r3, [r3, #0]
    3c3a:	0018      	movs	r0, r3
    3c3c:	4b0d      	ldr	r3, [pc, #52]	; (3c74 <port_pin_set_output_level+0x50>)
    3c3e:	4798      	blx	r3
    3c40:	0003      	movs	r3, r0
    3c42:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c44:	1dfb      	adds	r3, r7, #7
    3c46:	781b      	ldrb	r3, [r3, #0]
    3c48:	221f      	movs	r2, #31
    3c4a:	4013      	ands	r3, r2
    3c4c:	2201      	movs	r2, #1
    3c4e:	409a      	lsls	r2, r3
    3c50:	0013      	movs	r3, r2
    3c52:	60bb      	str	r3, [r7, #8]
	if (level) {
    3c54:	1dbb      	adds	r3, r7, #6
    3c56:	781b      	ldrb	r3, [r3, #0]
    3c58:	2b00      	cmp	r3, #0
    3c5a:	d003      	beq.n	3c64 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3c5c:	68fb      	ldr	r3, [r7, #12]
    3c5e:	68ba      	ldr	r2, [r7, #8]
    3c60:	619a      	str	r2, [r3, #24]
}
    3c62:	e002      	b.n	3c6a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3c64:	68fb      	ldr	r3, [r7, #12]
    3c66:	68ba      	ldr	r2, [r7, #8]
    3c68:	615a      	str	r2, [r3, #20]
}
    3c6a:	46c0      	nop			; (mov r8, r8)
    3c6c:	46bd      	mov	sp, r7
    3c6e:	b004      	add	sp, #16
    3c70:	bd80      	pop	{r7, pc}
    3c72:	46c0      	nop			; (mov r8, r8)
    3c74:	00003c01 	.word	0x00003c01

00003c78 <system_gclk_chan_get_config_defaults>:
{
    3c78:	b580      	push	{r7, lr}
    3c7a:	b082      	sub	sp, #8
    3c7c:	af00      	add	r7, sp, #0
    3c7e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3c80:	687b      	ldr	r3, [r7, #4]
    3c82:	2200      	movs	r2, #0
    3c84:	701a      	strb	r2, [r3, #0]
}
    3c86:	46c0      	nop			; (mov r8, r8)
    3c88:	46bd      	mov	sp, r7
    3c8a:	b002      	add	sp, #8
    3c8c:	bd80      	pop	{r7, pc}
	...

00003c90 <system_apb_clock_set_mask>:
{
    3c90:	b580      	push	{r7, lr}
    3c92:	b082      	sub	sp, #8
    3c94:	af00      	add	r7, sp, #0
    3c96:	0002      	movs	r2, r0
    3c98:	6039      	str	r1, [r7, #0]
    3c9a:	1dfb      	adds	r3, r7, #7
    3c9c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3c9e:	1dfb      	adds	r3, r7, #7
    3ca0:	781b      	ldrb	r3, [r3, #0]
    3ca2:	2b01      	cmp	r3, #1
    3ca4:	d00a      	beq.n	3cbc <system_apb_clock_set_mask+0x2c>
    3ca6:	2b02      	cmp	r3, #2
    3ca8:	d00f      	beq.n	3cca <system_apb_clock_set_mask+0x3a>
    3caa:	2b00      	cmp	r3, #0
    3cac:	d114      	bne.n	3cd8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3cae:	4b0e      	ldr	r3, [pc, #56]	; (3ce8 <system_apb_clock_set_mask+0x58>)
    3cb0:	4a0d      	ldr	r2, [pc, #52]	; (3ce8 <system_apb_clock_set_mask+0x58>)
    3cb2:	6991      	ldr	r1, [r2, #24]
    3cb4:	683a      	ldr	r2, [r7, #0]
    3cb6:	430a      	orrs	r2, r1
    3cb8:	619a      	str	r2, [r3, #24]
			break;
    3cba:	e00f      	b.n	3cdc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3cbc:	4b0a      	ldr	r3, [pc, #40]	; (3ce8 <system_apb_clock_set_mask+0x58>)
    3cbe:	4a0a      	ldr	r2, [pc, #40]	; (3ce8 <system_apb_clock_set_mask+0x58>)
    3cc0:	69d1      	ldr	r1, [r2, #28]
    3cc2:	683a      	ldr	r2, [r7, #0]
    3cc4:	430a      	orrs	r2, r1
    3cc6:	61da      	str	r2, [r3, #28]
			break;
    3cc8:	e008      	b.n	3cdc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3cca:	4b07      	ldr	r3, [pc, #28]	; (3ce8 <system_apb_clock_set_mask+0x58>)
    3ccc:	4a06      	ldr	r2, [pc, #24]	; (3ce8 <system_apb_clock_set_mask+0x58>)
    3cce:	6a11      	ldr	r1, [r2, #32]
    3cd0:	683a      	ldr	r2, [r7, #0]
    3cd2:	430a      	orrs	r2, r1
    3cd4:	621a      	str	r2, [r3, #32]
			break;
    3cd6:	e001      	b.n	3cdc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3cd8:	2317      	movs	r3, #23
    3cda:	e000      	b.n	3cde <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3cdc:	2300      	movs	r3, #0
}
    3cde:	0018      	movs	r0, r3
    3ce0:	46bd      	mov	sp, r7
    3ce2:	b002      	add	sp, #8
    3ce4:	bd80      	pop	{r7, pc}
    3ce6:	46c0      	nop			; (mov r8, r8)
    3ce8:	40000400 	.word	0x40000400

00003cec <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    3cec:	b580      	push	{r7, lr}
    3cee:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3cf0:	4b05      	ldr	r3, [pc, #20]	; (3d08 <system_is_debugger_present+0x1c>)
    3cf2:	789b      	ldrb	r3, [r3, #2]
    3cf4:	b2db      	uxtb	r3, r3
    3cf6:	001a      	movs	r2, r3
    3cf8:	2302      	movs	r3, #2
    3cfa:	4013      	ands	r3, r2
    3cfc:	1e5a      	subs	r2, r3, #1
    3cfe:	4193      	sbcs	r3, r2
    3d00:	b2db      	uxtb	r3, r3
}
    3d02:	0018      	movs	r0, r3
    3d04:	46bd      	mov	sp, r7
    3d06:	bd80      	pop	{r7, pc}
    3d08:	41002000 	.word	0x41002000

00003d0c <system_interrupt_enable>:
{
    3d0c:	b580      	push	{r7, lr}
    3d0e:	b082      	sub	sp, #8
    3d10:	af00      	add	r7, sp, #0
    3d12:	0002      	movs	r2, r0
    3d14:	1dfb      	adds	r3, r7, #7
    3d16:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3d18:	4b06      	ldr	r3, [pc, #24]	; (3d34 <system_interrupt_enable+0x28>)
    3d1a:	1dfa      	adds	r2, r7, #7
    3d1c:	7812      	ldrb	r2, [r2, #0]
    3d1e:	0011      	movs	r1, r2
    3d20:	221f      	movs	r2, #31
    3d22:	400a      	ands	r2, r1
    3d24:	2101      	movs	r1, #1
    3d26:	4091      	lsls	r1, r2
    3d28:	000a      	movs	r2, r1
    3d2a:	601a      	str	r2, [r3, #0]
}
    3d2c:	46c0      	nop			; (mov r8, r8)
    3d2e:	46bd      	mov	sp, r7
    3d30:	b002      	add	sp, #8
    3d32:	bd80      	pop	{r7, pc}
    3d34:	e000e100 	.word	0xe000e100

00003d38 <system_interrupt_disable>:
{
    3d38:	b580      	push	{r7, lr}
    3d3a:	b082      	sub	sp, #8
    3d3c:	af00      	add	r7, sp, #0
    3d3e:	0002      	movs	r2, r0
    3d40:	1dfb      	adds	r3, r7, #7
    3d42:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3d44:	4a07      	ldr	r2, [pc, #28]	; (3d64 <system_interrupt_disable+0x2c>)
    3d46:	1dfb      	adds	r3, r7, #7
    3d48:	781b      	ldrb	r3, [r3, #0]
    3d4a:	0019      	movs	r1, r3
    3d4c:	231f      	movs	r3, #31
    3d4e:	400b      	ands	r3, r1
    3d50:	2101      	movs	r1, #1
    3d52:	4099      	lsls	r1, r3
    3d54:	000b      	movs	r3, r1
    3d56:	0019      	movs	r1, r3
    3d58:	2380      	movs	r3, #128	; 0x80
    3d5a:	50d1      	str	r1, [r2, r3]
}
    3d5c:	46c0      	nop			; (mov r8, r8)
    3d5e:	46bd      	mov	sp, r7
    3d60:	b002      	add	sp, #8
    3d62:	bd80      	pop	{r7, pc}
    3d64:	e000e100 	.word	0xe000e100

00003d68 <spi_is_syncing>:
{
    3d68:	b580      	push	{r7, lr}
    3d6a:	b084      	sub	sp, #16
    3d6c:	af00      	add	r7, sp, #0
    3d6e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3d70:	687b      	ldr	r3, [r7, #4]
    3d72:	681b      	ldr	r3, [r3, #0]
    3d74:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    3d76:	68fb      	ldr	r3, [r7, #12]
    3d78:	69db      	ldr	r3, [r3, #28]
    3d7a:	1e5a      	subs	r2, r3, #1
    3d7c:	4193      	sbcs	r3, r2
    3d7e:	b2db      	uxtb	r3, r3
}
    3d80:	0018      	movs	r0, r3
    3d82:	46bd      	mov	sp, r7
    3d84:	b004      	add	sp, #16
    3d86:	bd80      	pop	{r7, pc}

00003d88 <spi_enable>:
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b084      	sub	sp, #16
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3d90:	687b      	ldr	r3, [r7, #4]
    3d92:	681b      	ldr	r3, [r3, #0]
    3d94:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3d96:	687b      	ldr	r3, [r7, #4]
    3d98:	681b      	ldr	r3, [r3, #0]
    3d9a:	0018      	movs	r0, r3
    3d9c:	4b0b      	ldr	r3, [pc, #44]	; (3dcc <spi_enable+0x44>)
    3d9e:	4798      	blx	r3
    3da0:	0003      	movs	r3, r0
    3da2:	0018      	movs	r0, r3
    3da4:	4b0a      	ldr	r3, [pc, #40]	; (3dd0 <spi_enable+0x48>)
    3da6:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    3da8:	46c0      	nop			; (mov r8, r8)
    3daa:	687b      	ldr	r3, [r7, #4]
    3dac:	0018      	movs	r0, r3
    3dae:	4b09      	ldr	r3, [pc, #36]	; (3dd4 <spi_enable+0x4c>)
    3db0:	4798      	blx	r3
    3db2:	1e03      	subs	r3, r0, #0
    3db4:	d1f9      	bne.n	3daa <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3db6:	68fb      	ldr	r3, [r7, #12]
    3db8:	681b      	ldr	r3, [r3, #0]
    3dba:	2202      	movs	r2, #2
    3dbc:	431a      	orrs	r2, r3
    3dbe:	68fb      	ldr	r3, [r7, #12]
    3dc0:	601a      	str	r2, [r3, #0]
}
    3dc2:	46c0      	nop			; (mov r8, r8)
    3dc4:	46bd      	mov	sp, r7
    3dc6:	b004      	add	sp, #16
    3dc8:	bd80      	pop	{r7, pc}
    3dca:	46c0      	nop			; (mov r8, r8)
    3dcc:	00003aa5 	.word	0x00003aa5
    3dd0:	00003d0d 	.word	0x00003d0d
    3dd4:	00003d69 	.word	0x00003d69

00003dd8 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    3dd8:	b580      	push	{r7, lr}
    3dda:	b084      	sub	sp, #16
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3de0:	687b      	ldr	r3, [r7, #4]
    3de2:	681b      	ldr	r3, [r3, #0]
    3de4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3de6:	687b      	ldr	r3, [r7, #4]
    3de8:	681b      	ldr	r3, [r3, #0]
    3dea:	0018      	movs	r0, r3
    3dec:	4b0e      	ldr	r3, [pc, #56]	; (3e28 <spi_disable+0x50>)
    3dee:	4798      	blx	r3
    3df0:	0003      	movs	r3, r0
    3df2:	0018      	movs	r0, r3
    3df4:	4b0d      	ldr	r3, [pc, #52]	; (3e2c <spi_disable+0x54>)
    3df6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    3df8:	46c0      	nop			; (mov r8, r8)
    3dfa:	687b      	ldr	r3, [r7, #4]
    3dfc:	0018      	movs	r0, r3
    3dfe:	4b0c      	ldr	r3, [pc, #48]	; (3e30 <spi_disable+0x58>)
    3e00:	4798      	blx	r3
    3e02:	1e03      	subs	r3, r0, #0
    3e04:	d1f9      	bne.n	3dfa <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    3e06:	68fb      	ldr	r3, [r7, #12]
    3e08:	228f      	movs	r2, #143	; 0x8f
    3e0a:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    3e0c:	68fb      	ldr	r3, [r7, #12]
    3e0e:	228f      	movs	r2, #143	; 0x8f
    3e10:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3e12:	68fb      	ldr	r3, [r7, #12]
    3e14:	681b      	ldr	r3, [r3, #0]
    3e16:	2202      	movs	r2, #2
    3e18:	4393      	bics	r3, r2
    3e1a:	001a      	movs	r2, r3
    3e1c:	68fb      	ldr	r3, [r7, #12]
    3e1e:	601a      	str	r2, [r3, #0]
}
    3e20:	46c0      	nop			; (mov r8, r8)
    3e22:	46bd      	mov	sp, r7
    3e24:	b004      	add	sp, #16
    3e26:	bd80      	pop	{r7, pc}
    3e28:	00003aa5 	.word	0x00003aa5
    3e2c:	00003d39 	.word	0x00003d39
    3e30:	00003d69 	.word	0x00003d69

00003e34 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    3e34:	b580      	push	{r7, lr}
    3e36:	b084      	sub	sp, #16
    3e38:	af00      	add	r7, sp, #0
    3e3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e3c:	687b      	ldr	r3, [r7, #4]
    3e3e:	681b      	ldr	r3, [r3, #0]
    3e40:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3e42:	68fb      	ldr	r3, [r7, #12]
    3e44:	7e1b      	ldrb	r3, [r3, #24]
    3e46:	b2db      	uxtb	r3, r3
    3e48:	001a      	movs	r2, r3
    3e4a:	2302      	movs	r3, #2
    3e4c:	4013      	ands	r3, r2
    3e4e:	1e5a      	subs	r2, r3, #1
    3e50:	4193      	sbcs	r3, r2
    3e52:	b2db      	uxtb	r3, r3
}
    3e54:	0018      	movs	r0, r3
    3e56:	46bd      	mov	sp, r7
    3e58:	b004      	add	sp, #16
    3e5a:	bd80      	pop	{r7, pc}

00003e5c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    3e5c:	b580      	push	{r7, lr}
    3e5e:	b084      	sub	sp, #16
    3e60:	af00      	add	r7, sp, #0
    3e62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e64:	687b      	ldr	r3, [r7, #4]
    3e66:	681b      	ldr	r3, [r3, #0]
    3e68:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3e6a:	68fb      	ldr	r3, [r7, #12]
    3e6c:	7e1b      	ldrb	r3, [r3, #24]
    3e6e:	b2db      	uxtb	r3, r3
    3e70:	001a      	movs	r2, r3
    3e72:	2301      	movs	r3, #1
    3e74:	4013      	ands	r3, r2
    3e76:	1e5a      	subs	r2, r3, #1
    3e78:	4193      	sbcs	r3, r2
    3e7a:	b2db      	uxtb	r3, r3
}
    3e7c:	0018      	movs	r0, r3
    3e7e:	46bd      	mov	sp, r7
    3e80:	b004      	add	sp, #16
    3e82:	bd80      	pop	{r7, pc}

00003e84 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    3e84:	b580      	push	{r7, lr}
    3e86:	b084      	sub	sp, #16
    3e88:	af00      	add	r7, sp, #0
    3e8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e8c:	687b      	ldr	r3, [r7, #4]
    3e8e:	681b      	ldr	r3, [r3, #0]
    3e90:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3e92:	68fb      	ldr	r3, [r7, #12]
    3e94:	7e1b      	ldrb	r3, [r3, #24]
    3e96:	b2db      	uxtb	r3, r3
    3e98:	001a      	movs	r2, r3
    3e9a:	2304      	movs	r3, #4
    3e9c:	4013      	ands	r3, r2
    3e9e:	1e5a      	subs	r2, r3, #1
    3ea0:	4193      	sbcs	r3, r2
    3ea2:	b2db      	uxtb	r3, r3
}
    3ea4:	0018      	movs	r0, r3
    3ea6:	46bd      	mov	sp, r7
    3ea8:	b004      	add	sp, #16
    3eaa:	bd80      	pop	{r7, pc}

00003eac <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    3eac:	b580      	push	{r7, lr}
    3eae:	b084      	sub	sp, #16
    3eb0:	af00      	add	r7, sp, #0
    3eb2:	6078      	str	r0, [r7, #4]
    3eb4:	000a      	movs	r2, r1
    3eb6:	1cbb      	adds	r3, r7, #2
    3eb8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3eba:	687b      	ldr	r3, [r7, #4]
    3ebc:	681b      	ldr	r3, [r3, #0]
    3ebe:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3ec0:	687b      	ldr	r3, [r7, #4]
    3ec2:	0018      	movs	r0, r3
    3ec4:	4b0a      	ldr	r3, [pc, #40]	; (3ef0 <spi_write+0x44>)
    3ec6:	4798      	blx	r3
    3ec8:	0003      	movs	r3, r0
    3eca:	001a      	movs	r2, r3
    3ecc:	2301      	movs	r3, #1
    3ece:	4053      	eors	r3, r2
    3ed0:	b2db      	uxtb	r3, r3
    3ed2:	2b00      	cmp	r3, #0
    3ed4:	d001      	beq.n	3eda <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    3ed6:	2305      	movs	r3, #5
    3ed8:	e006      	b.n	3ee8 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3eda:	1cbb      	adds	r3, r7, #2
    3edc:	881b      	ldrh	r3, [r3, #0]
    3ede:	05db      	lsls	r3, r3, #23
    3ee0:	0dda      	lsrs	r2, r3, #23
    3ee2:	68fb      	ldr	r3, [r7, #12]
    3ee4:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    3ee6:	2300      	movs	r3, #0
}
    3ee8:	0018      	movs	r0, r3
    3eea:	46bd      	mov	sp, r7
    3eec:	b004      	add	sp, #16
    3eee:	bd80      	pop	{r7, pc}
    3ef0:	00003e5d 	.word	0x00003e5d

00003ef4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    3ef4:	b580      	push	{r7, lr}
    3ef6:	b084      	sub	sp, #16
    3ef8:	af00      	add	r7, sp, #0
    3efa:	6078      	str	r0, [r7, #4]
    3efc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3efe:	687b      	ldr	r3, [r7, #4]
    3f00:	681b      	ldr	r3, [r3, #0]
    3f02:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3f04:	687b      	ldr	r3, [r7, #4]
    3f06:	0018      	movs	r0, r3
    3f08:	4b1b      	ldr	r3, [pc, #108]	; (3f78 <spi_read+0x84>)
    3f0a:	4798      	blx	r3
    3f0c:	0003      	movs	r3, r0
    3f0e:	001a      	movs	r2, r3
    3f10:	2301      	movs	r3, #1
    3f12:	4053      	eors	r3, r2
    3f14:	b2db      	uxtb	r3, r3
    3f16:	2b00      	cmp	r3, #0
    3f18:	d001      	beq.n	3f1e <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    3f1a:	2310      	movs	r3, #16
    3f1c:	e027      	b.n	3f6e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    3f1e:	230f      	movs	r3, #15
    3f20:	18fb      	adds	r3, r7, r3
    3f22:	2200      	movs	r2, #0
    3f24:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3f26:	68bb      	ldr	r3, [r7, #8]
    3f28:	8b5b      	ldrh	r3, [r3, #26]
    3f2a:	b29b      	uxth	r3, r3
    3f2c:	001a      	movs	r2, r3
    3f2e:	2304      	movs	r3, #4
    3f30:	4013      	ands	r3, r2
    3f32:	d006      	beq.n	3f42 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    3f34:	230f      	movs	r3, #15
    3f36:	18fb      	adds	r3, r7, r3
    3f38:	221e      	movs	r2, #30
    3f3a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3f3c:	68bb      	ldr	r3, [r7, #8]
    3f3e:	2204      	movs	r2, #4
    3f40:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	799b      	ldrb	r3, [r3, #6]
    3f46:	2b01      	cmp	r3, #1
    3f48:	d108      	bne.n	3f5c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3f4a:	68bb      	ldr	r3, [r7, #8]
    3f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f4e:	b29b      	uxth	r3, r3
    3f50:	05db      	lsls	r3, r3, #23
    3f52:	0ddb      	lsrs	r3, r3, #23
    3f54:	b29a      	uxth	r2, r3
    3f56:	683b      	ldr	r3, [r7, #0]
    3f58:	801a      	strh	r2, [r3, #0]
    3f5a:	e005      	b.n	3f68 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3f5c:	68bb      	ldr	r3, [r7, #8]
    3f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f60:	b2db      	uxtb	r3, r3
    3f62:	b29a      	uxth	r2, r3
    3f64:	683b      	ldr	r3, [r7, #0]
    3f66:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    3f68:	230f      	movs	r3, #15
    3f6a:	18fb      	adds	r3, r7, r3
    3f6c:	781b      	ldrb	r3, [r3, #0]
}
    3f6e:	0018      	movs	r0, r3
    3f70:	46bd      	mov	sp, r7
    3f72:	b004      	add	sp, #16
    3f74:	bd80      	pop	{r7, pc}
    3f76:	46c0      	nop			; (mov r8, r8)
    3f78:	00003e85 	.word	0x00003e85

00003f7c <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    3f7c:	b580      	push	{r7, lr}
    3f7e:	b084      	sub	sp, #16
    3f80:	af00      	add	r7, sp, #0
    3f82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3f84:	687b      	ldr	r3, [r7, #4]
    3f86:	681b      	ldr	r3, [r3, #0]
    3f88:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
    3f8a:	687b      	ldr	r3, [r7, #4]
    3f8c:	0018      	movs	r0, r3
    3f8e:	4b09      	ldr	r3, [pc, #36]	; (3fb4 <spi_reset+0x38>)
    3f90:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    3f92:	46c0      	nop			; (mov r8, r8)
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	0018      	movs	r0, r3
    3f98:	4b07      	ldr	r3, [pc, #28]	; (3fb8 <spi_reset+0x3c>)
    3f9a:	4798      	blx	r3
    3f9c:	1e03      	subs	r3, r0, #0
    3f9e:	d1f9      	bne.n	3f94 <spi_reset+0x18>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    3fa0:	68fb      	ldr	r3, [r7, #12]
    3fa2:	681b      	ldr	r3, [r3, #0]
    3fa4:	2201      	movs	r2, #1
    3fa6:	431a      	orrs	r2, r3
    3fa8:	68fb      	ldr	r3, [r7, #12]
    3faa:	601a      	str	r2, [r3, #0]
}
    3fac:	46c0      	nop			; (mov r8, r8)
    3fae:	46bd      	mov	sp, r7
    3fb0:	b004      	add	sp, #16
    3fb2:	bd80      	pop	{r7, pc}
    3fb4:	00003dd9 	.word	0x00003dd9
    3fb8:	00003d69 	.word	0x00003d69

00003fbc <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    3fbc:	b590      	push	{r4, r7, lr}
    3fbe:	b089      	sub	sp, #36	; 0x24
    3fc0:	af00      	add	r7, sp, #0
    3fc2:	6078      	str	r0, [r7, #4]
    3fc4:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    3fc6:	230c      	movs	r3, #12
    3fc8:	18fb      	adds	r3, r7, r3
    3fca:	2200      	movs	r2, #0
    3fcc:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    3fce:	687b      	ldr	r3, [r7, #4]
    3fd0:	681b      	ldr	r3, [r3, #0]
    3fd2:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
    3fd4:	687b      	ldr	r3, [r7, #4]
    3fd6:	0018      	movs	r0, r3
    3fd8:	4b24      	ldr	r3, [pc, #144]	; (406c <spi_set_baudrate+0xb0>)
    3fda:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    3fdc:	46c0      	nop			; (mov r8, r8)
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	0018      	movs	r0, r3
    3fe2:	4b23      	ldr	r3, [pc, #140]	; (4070 <spi_set_baudrate+0xb4>)
    3fe4:	4798      	blx	r3
    3fe6:	1e03      	subs	r3, r0, #0
    3fe8:	d1f9      	bne.n	3fde <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3fea:	687b      	ldr	r3, [r7, #4]
    3fec:	681b      	ldr	r3, [r3, #0]
    3fee:	0018      	movs	r0, r3
    3ff0:	4b20      	ldr	r3, [pc, #128]	; (4074 <spi_set_baudrate+0xb8>)
    3ff2:	4798      	blx	r3
    3ff4:	0003      	movs	r3, r0
    3ff6:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3ff8:	69bb      	ldr	r3, [r7, #24]
    3ffa:	3314      	adds	r3, #20
    3ffc:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3ffe:	697b      	ldr	r3, [r7, #20]
    4000:	b2db      	uxtb	r3, r3
    4002:	0018      	movs	r0, r3
    4004:	4b1c      	ldr	r3, [pc, #112]	; (4078 <spi_set_baudrate+0xbc>)
    4006:	4798      	blx	r3
    4008:	0003      	movs	r3, r0
    400a:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    400c:	230f      	movs	r3, #15
    400e:	18fc      	adds	r4, r7, r3
    4010:	230c      	movs	r3, #12
    4012:	18fa      	adds	r2, r7, r3
    4014:	6939      	ldr	r1, [r7, #16]
    4016:	683b      	ldr	r3, [r7, #0]
    4018:	0018      	movs	r0, r3
    401a:	4b18      	ldr	r3, [pc, #96]	; (407c <spi_set_baudrate+0xc0>)
    401c:	4798      	blx	r3
    401e:	0003      	movs	r3, r0
    4020:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    4022:	230f      	movs	r3, #15
    4024:	18fb      	adds	r3, r7, r3
    4026:	781b      	ldrb	r3, [r3, #0]
    4028:	2b00      	cmp	r3, #0
    402a:	d001      	beq.n	4030 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    402c:	2317      	movs	r3, #23
    402e:	e018      	b.n	4062 <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
    4030:	230c      	movs	r3, #12
    4032:	18fb      	adds	r3, r7, r3
    4034:	881b      	ldrh	r3, [r3, #0]
    4036:	b2da      	uxtb	r2, r3
    4038:	69fb      	ldr	r3, [r7, #28]
    403a:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
    403c:	46c0      	nop			; (mov r8, r8)
    403e:	687b      	ldr	r3, [r7, #4]
    4040:	0018      	movs	r0, r3
    4042:	4b0b      	ldr	r3, [pc, #44]	; (4070 <spi_set_baudrate+0xb4>)
    4044:	4798      	blx	r3
    4046:	1e03      	subs	r3, r0, #0
    4048:	d1f9      	bne.n	403e <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
    404a:	687b      	ldr	r3, [r7, #4]
    404c:	0018      	movs	r0, r3
    404e:	4b0c      	ldr	r3, [pc, #48]	; (4080 <spi_set_baudrate+0xc4>)
    4050:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    4052:	46c0      	nop			; (mov r8, r8)
    4054:	687b      	ldr	r3, [r7, #4]
    4056:	0018      	movs	r0, r3
    4058:	4b05      	ldr	r3, [pc, #20]	; (4070 <spi_set_baudrate+0xb4>)
    405a:	4798      	blx	r3
    405c:	1e03      	subs	r3, r0, #0
    405e:	d1f9      	bne.n	4054 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
    4060:	2300      	movs	r3, #0
}
    4062:	0018      	movs	r0, r3
    4064:	46bd      	mov	sp, r7
    4066:	b009      	add	sp, #36	; 0x24
    4068:	bd90      	pop	{r4, r7, pc}
    406a:	46c0      	nop			; (mov r8, r8)
    406c:	00003dd9 	.word	0x00003dd9
    4070:	00003d69 	.word	0x00003d69
    4074:	000039d5 	.word	0x000039d5
    4078:	0000660d 	.word	0x0000660d
    407c:	0000354f 	.word	0x0000354f
    4080:	00003d89 	.word	0x00003d89

00004084 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    4084:	b590      	push	{r4, r7, lr}
    4086:	b093      	sub	sp, #76	; 0x4c
    4088:	af00      	add	r7, sp, #0
    408a:	6078      	str	r0, [r7, #4]
    408c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    408e:	687b      	ldr	r3, [r7, #4]
    4090:	681b      	ldr	r3, [r3, #0]
    4092:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    4094:	687b      	ldr	r3, [r7, #4]
    4096:	681b      	ldr	r3, [r3, #0]
    4098:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    409a:	231c      	movs	r3, #28
    409c:	18fb      	adds	r3, r7, r3
    409e:	0018      	movs	r0, r3
    40a0:	4b75      	ldr	r3, [pc, #468]	; (4278 <_spi_set_config+0x1f4>)
    40a2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    40a4:	231c      	movs	r3, #28
    40a6:	18fb      	adds	r3, r7, r3
    40a8:	2200      	movs	r2, #0
    40aa:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    40ac:	683b      	ldr	r3, [r7, #0]
    40ae:	781b      	ldrb	r3, [r3, #0]
    40b0:	2b00      	cmp	r3, #0
    40b2:	d103      	bne.n	40bc <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    40b4:	231c      	movs	r3, #28
    40b6:	18fb      	adds	r3, r7, r3
    40b8:	2200      	movs	r2, #0
    40ba:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    40bc:	683b      	ldr	r3, [r7, #0]
    40be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    40c0:	230c      	movs	r3, #12
    40c2:	18fb      	adds	r3, r7, r3
    40c4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    40c6:	683b      	ldr	r3, [r7, #0]
    40c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    40ca:	230c      	movs	r3, #12
    40cc:	18fb      	adds	r3, r7, r3
    40ce:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    40d0:	683b      	ldr	r3, [r7, #0]
    40d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    40d4:	230c      	movs	r3, #12
    40d6:	18fb      	adds	r3, r7, r3
    40d8:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    40da:	683b      	ldr	r3, [r7, #0]
    40dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    40de:	230c      	movs	r3, #12
    40e0:	18fb      	adds	r3, r7, r3
    40e2:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    40e4:	2347      	movs	r3, #71	; 0x47
    40e6:	18fb      	adds	r3, r7, r3
    40e8:	2200      	movs	r2, #0
    40ea:	701a      	strb	r2, [r3, #0]
    40ec:	e02c      	b.n	4148 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    40ee:	2347      	movs	r3, #71	; 0x47
    40f0:	18fb      	adds	r3, r7, r3
    40f2:	781a      	ldrb	r2, [r3, #0]
    40f4:	230c      	movs	r3, #12
    40f6:	18fb      	adds	r3, r7, r3
    40f8:	0092      	lsls	r2, r2, #2
    40fa:	58d3      	ldr	r3, [r2, r3]
    40fc:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    40fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4100:	2b00      	cmp	r3, #0
    4102:	d109      	bne.n	4118 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4104:	2347      	movs	r3, #71	; 0x47
    4106:	18fb      	adds	r3, r7, r3
    4108:	781a      	ldrb	r2, [r3, #0]
    410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    410c:	0011      	movs	r1, r2
    410e:	0018      	movs	r0, r3
    4110:	4b5a      	ldr	r3, [pc, #360]	; (427c <_spi_set_config+0x1f8>)
    4112:	4798      	blx	r3
    4114:	0003      	movs	r3, r0
    4116:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    411a:	3301      	adds	r3, #1
    411c:	d00d      	beq.n	413a <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    411e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4120:	b2da      	uxtb	r2, r3
    4122:	231c      	movs	r3, #28
    4124:	18fb      	adds	r3, r7, r3
    4126:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    412a:	0c1b      	lsrs	r3, r3, #16
    412c:	b2db      	uxtb	r3, r3
    412e:	221c      	movs	r2, #28
    4130:	18ba      	adds	r2, r7, r2
    4132:	0011      	movs	r1, r2
    4134:	0018      	movs	r0, r3
    4136:	4b52      	ldr	r3, [pc, #328]	; (4280 <_spi_set_config+0x1fc>)
    4138:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    413a:	2347      	movs	r3, #71	; 0x47
    413c:	18fb      	adds	r3, r7, r3
    413e:	781a      	ldrb	r2, [r3, #0]
    4140:	2347      	movs	r3, #71	; 0x47
    4142:	18fb      	adds	r3, r7, r3
    4144:	3201      	adds	r2, #1
    4146:	701a      	strb	r2, [r3, #0]
    4148:	2347      	movs	r3, #71	; 0x47
    414a:	18fb      	adds	r3, r7, r3
    414c:	781b      	ldrb	r3, [r3, #0]
    414e:	2b03      	cmp	r3, #3
    4150:	d9cd      	bls.n	40ee <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    4152:	683b      	ldr	r3, [r7, #0]
    4154:	781a      	ldrb	r2, [r3, #0]
    4156:	687b      	ldr	r3, [r7, #4]
    4158:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    415a:	683b      	ldr	r3, [r7, #0]
    415c:	7c1a      	ldrb	r2, [r3, #16]
    415e:	687b      	ldr	r3, [r7, #4]
    4160:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    4162:	683b      	ldr	r3, [r7, #0]
    4164:	7c9a      	ldrb	r2, [r3, #18]
    4166:	687b      	ldr	r3, [r7, #4]
    4168:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    416a:	683b      	ldr	r3, [r7, #0]
    416c:	7d1a      	ldrb	r2, [r3, #20]
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4172:	230a      	movs	r3, #10
    4174:	18fb      	adds	r3, r7, r3
    4176:	2200      	movs	r2, #0
    4178:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    417a:	2300      	movs	r3, #0
    417c:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    417e:	2300      	movs	r3, #0
    4180:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    4182:	683b      	ldr	r3, [r7, #0]
    4184:	781b      	ldrb	r3, [r3, #0]
    4186:	2b01      	cmp	r3, #1
    4188:	d129      	bne.n	41de <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    418a:	687b      	ldr	r3, [r7, #4]
    418c:	681b      	ldr	r3, [r3, #0]
    418e:	0018      	movs	r0, r3
    4190:	4b3c      	ldr	r3, [pc, #240]	; (4284 <_spi_set_config+0x200>)
    4192:	4798      	blx	r3
    4194:	0003      	movs	r3, r0
    4196:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    419a:	3314      	adds	r3, #20
    419c:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    41a0:	b2db      	uxtb	r3, r3
    41a2:	0018      	movs	r0, r3
    41a4:	4b38      	ldr	r3, [pc, #224]	; (4288 <_spi_set_config+0x204>)
    41a6:	4798      	blx	r3
    41a8:	0003      	movs	r3, r0
    41aa:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    41ac:	683b      	ldr	r3, [r7, #0]
    41ae:	699b      	ldr	r3, [r3, #24]
    41b0:	2223      	movs	r2, #35	; 0x23
    41b2:	18bc      	adds	r4, r7, r2
    41b4:	220a      	movs	r2, #10
    41b6:	18ba      	adds	r2, r7, r2
    41b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    41ba:	0018      	movs	r0, r3
    41bc:	4b33      	ldr	r3, [pc, #204]	; (428c <_spi_set_config+0x208>)
    41be:	4798      	blx	r3
    41c0:	0003      	movs	r3, r0
    41c2:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    41c4:	2323      	movs	r3, #35	; 0x23
    41c6:	18fb      	adds	r3, r7, r3
    41c8:	781b      	ldrb	r3, [r3, #0]
    41ca:	2b00      	cmp	r3, #0
    41cc:	d001      	beq.n	41d2 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    41ce:	2317      	movs	r3, #23
    41d0:	e04e      	b.n	4270 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    41d2:	230a      	movs	r3, #10
    41d4:	18fb      	adds	r3, r7, r3
    41d6:	881b      	ldrh	r3, [r3, #0]
    41d8:	b2da      	uxtb	r2, r3
    41da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    41dc:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    41de:	683b      	ldr	r3, [r7, #0]
    41e0:	685b      	ldr	r3, [r3, #4]
    41e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    41e4:	4313      	orrs	r3, r2
    41e6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    41e8:	683b      	ldr	r3, [r7, #0]
    41ea:	689b      	ldr	r3, [r3, #8]
    41ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    41ee:	4313      	orrs	r3, r2
    41f0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    41f2:	683b      	ldr	r3, [r7, #0]
    41f4:	68db      	ldr	r3, [r3, #12]
    41f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    41f8:	4313      	orrs	r3, r2
    41fa:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    41fc:	683b      	ldr	r3, [r7, #0]
    41fe:	7c1b      	ldrb	r3, [r3, #16]
    4200:	001a      	movs	r2, r3
    4202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4204:	4313      	orrs	r3, r2
    4206:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4208:	683b      	ldr	r3, [r7, #0]
    420a:	7c5b      	ldrb	r3, [r3, #17]
    420c:	2b00      	cmp	r3, #0
    420e:	d103      	bne.n	4218 <_spi_set_config+0x194>
    4210:	4b1f      	ldr	r3, [pc, #124]	; (4290 <_spi_set_config+0x20c>)
    4212:	4798      	blx	r3
    4214:	1e03      	subs	r3, r0, #0
    4216:	d003      	beq.n	4220 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    421a:	2280      	movs	r2, #128	; 0x80
    421c:	4313      	orrs	r3, r2
    421e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    4220:	683b      	ldr	r3, [r7, #0]
    4222:	7c9b      	ldrb	r3, [r3, #18]
    4224:	2b00      	cmp	r3, #0
    4226:	d004      	beq.n	4232 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    422a:	2280      	movs	r2, #128	; 0x80
    422c:	0292      	lsls	r2, r2, #10
    422e:	4313      	orrs	r3, r2
    4230:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    4232:	683b      	ldr	r3, [r7, #0]
    4234:	7cdb      	ldrb	r3, [r3, #19]
    4236:	2b00      	cmp	r3, #0
    4238:	d004      	beq.n	4244 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    423a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    423c:	2280      	movs	r2, #128	; 0x80
    423e:	0092      	lsls	r2, r2, #2
    4240:	4313      	orrs	r3, r2
    4242:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    4244:	683b      	ldr	r3, [r7, #0]
    4246:	7d1b      	ldrb	r3, [r3, #20]
    4248:	2b00      	cmp	r3, #0
    424a:	d004      	beq.n	4256 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    424e:	2280      	movs	r2, #128	; 0x80
    4250:	0192      	lsls	r2, r2, #6
    4252:	4313      	orrs	r3, r2
    4254:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    4256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4258:	681a      	ldr	r2, [r3, #0]
    425a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    425c:	431a      	orrs	r2, r3
    425e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4260:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    4262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4264:	685a      	ldr	r2, [r3, #4]
    4266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4268:	431a      	orrs	r2, r3
    426a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    426c:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    426e:	2300      	movs	r3, #0
}
    4270:	0018      	movs	r0, r3
    4272:	46bd      	mov	sp, r7
    4274:	b013      	add	sp, #76	; 0x4c
    4276:	bd90      	pop	{r4, r7, pc}
    4278:	00003b79 	.word	0x00003b79
    427c:	00003819 	.word	0x00003819
    4280:	000067d5 	.word	0x000067d5
    4284:	000039d5 	.word	0x000039d5
    4288:	0000660d 	.word	0x0000660d
    428c:	0000354f 	.word	0x0000354f
    4290:	00003ced 	.word	0x00003ced

00004294 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4294:	b590      	push	{r4, r7, lr}
    4296:	b08b      	sub	sp, #44	; 0x2c
    4298:	af00      	add	r7, sp, #0
    429a:	60f8      	str	r0, [r7, #12]
    429c:	60b9      	str	r1, [r7, #8]
    429e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    42a0:	68fb      	ldr	r3, [r7, #12]
    42a2:	68ba      	ldr	r2, [r7, #8]
    42a4:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    42a6:	68fb      	ldr	r3, [r7, #12]
    42a8:	681b      	ldr	r3, [r3, #0]
    42aa:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    42ac:	6a3b      	ldr	r3, [r7, #32]
    42ae:	681b      	ldr	r3, [r3, #0]
    42b0:	2202      	movs	r2, #2
    42b2:	4013      	ands	r3, r2
    42b4:	d001      	beq.n	42ba <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    42b6:	231c      	movs	r3, #28
    42b8:	e09c      	b.n	43f4 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    42ba:	6a3b      	ldr	r3, [r7, #32]
    42bc:	681b      	ldr	r3, [r3, #0]
    42be:	2201      	movs	r2, #1
    42c0:	4013      	ands	r3, r2
    42c2:	d001      	beq.n	42c8 <spi_init+0x34>
		return STATUS_BUSY;
    42c4:	2305      	movs	r3, #5
    42c6:	e095      	b.n	43f4 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    42c8:	68fb      	ldr	r3, [r7, #12]
    42ca:	681b      	ldr	r3, [r3, #0]
    42cc:	0018      	movs	r0, r3
    42ce:	4b4b      	ldr	r3, [pc, #300]	; (43fc <spi_init+0x168>)
    42d0:	4798      	blx	r3
    42d2:	0003      	movs	r3, r0
    42d4:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    42d6:	69fb      	ldr	r3, [r7, #28]
    42d8:	3302      	adds	r3, #2
    42da:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    42dc:	69fb      	ldr	r3, [r7, #28]
    42de:	3314      	adds	r3, #20
    42e0:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    42e2:	2201      	movs	r2, #1
    42e4:	69bb      	ldr	r3, [r7, #24]
    42e6:	409a      	lsls	r2, r3
    42e8:	0013      	movs	r3, r2
    42ea:	0019      	movs	r1, r3
    42ec:	2002      	movs	r0, #2
    42ee:	4b44      	ldr	r3, [pc, #272]	; (4400 <spi_init+0x16c>)
    42f0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    42f2:	2310      	movs	r3, #16
    42f4:	18fb      	adds	r3, r7, r3
    42f6:	0018      	movs	r0, r3
    42f8:	4b42      	ldr	r3, [pc, #264]	; (4404 <spi_init+0x170>)
    42fa:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    42fc:	687b      	ldr	r3, [r7, #4]
    42fe:	2224      	movs	r2, #36	; 0x24
    4300:	5c9a      	ldrb	r2, [r3, r2]
    4302:	2310      	movs	r3, #16
    4304:	18fb      	adds	r3, r7, r3
    4306:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4308:	697b      	ldr	r3, [r7, #20]
    430a:	b2db      	uxtb	r3, r3
    430c:	2210      	movs	r2, #16
    430e:	18ba      	adds	r2, r7, r2
    4310:	0011      	movs	r1, r2
    4312:	0018      	movs	r0, r3
    4314:	4b3c      	ldr	r3, [pc, #240]	; (4408 <spi_init+0x174>)
    4316:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4318:	697b      	ldr	r3, [r7, #20]
    431a:	b2db      	uxtb	r3, r3
    431c:	0018      	movs	r0, r3
    431e:	4b3b      	ldr	r3, [pc, #236]	; (440c <spi_init+0x178>)
    4320:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4322:	687b      	ldr	r3, [r7, #4]
    4324:	2224      	movs	r2, #36	; 0x24
    4326:	5c9b      	ldrb	r3, [r3, r2]
    4328:	2100      	movs	r1, #0
    432a:	0018      	movs	r0, r3
    432c:	4b38      	ldr	r3, [pc, #224]	; (4410 <spi_init+0x17c>)
    432e:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    4330:	687b      	ldr	r3, [r7, #4]
    4332:	781b      	ldrb	r3, [r3, #0]
    4334:	2b01      	cmp	r3, #1
    4336:	d105      	bne.n	4344 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4338:	6a3b      	ldr	r3, [r7, #32]
    433a:	681b      	ldr	r3, [r3, #0]
    433c:	220c      	movs	r2, #12
    433e:	431a      	orrs	r2, r3
    4340:	6a3b      	ldr	r3, [r7, #32]
    4342:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4344:	2327      	movs	r3, #39	; 0x27
    4346:	18fb      	adds	r3, r7, r3
    4348:	2200      	movs	r2, #0
    434a:	701a      	strb	r2, [r3, #0]
    434c:	e010      	b.n	4370 <spi_init+0xdc>
		module->callback[i]        = NULL;
    434e:	2327      	movs	r3, #39	; 0x27
    4350:	18fb      	adds	r3, r7, r3
    4352:	781b      	ldrb	r3, [r3, #0]
    4354:	68fa      	ldr	r2, [r7, #12]
    4356:	3302      	adds	r3, #2
    4358:	009b      	lsls	r3, r3, #2
    435a:	18d3      	adds	r3, r2, r3
    435c:	3304      	adds	r3, #4
    435e:	2200      	movs	r2, #0
    4360:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4362:	2327      	movs	r3, #39	; 0x27
    4364:	18fb      	adds	r3, r7, r3
    4366:	781a      	ldrb	r2, [r3, #0]
    4368:	2327      	movs	r3, #39	; 0x27
    436a:	18fb      	adds	r3, r7, r3
    436c:	3201      	adds	r2, #1
    436e:	701a      	strb	r2, [r3, #0]
    4370:	2327      	movs	r3, #39	; 0x27
    4372:	18fb      	adds	r3, r7, r3
    4374:	781b      	ldrb	r3, [r3, #0]
    4376:	2b06      	cmp	r3, #6
    4378:	d9e9      	bls.n	434e <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    437a:	68fb      	ldr	r3, [r7, #12]
    437c:	2200      	movs	r2, #0
    437e:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4380:	68fb      	ldr	r3, [r7, #12]
    4382:	2200      	movs	r2, #0
    4384:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    4386:	68fb      	ldr	r3, [r7, #12]
    4388:	2200      	movs	r2, #0
    438a:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    438c:	68fb      	ldr	r3, [r7, #12]
    438e:	2200      	movs	r2, #0
    4390:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    4392:	68fb      	ldr	r3, [r7, #12]
    4394:	2236      	movs	r2, #54	; 0x36
    4396:	2100      	movs	r1, #0
    4398:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    439a:	68fb      	ldr	r3, [r7, #12]
    439c:	2237      	movs	r2, #55	; 0x37
    439e:	2100      	movs	r1, #0
    43a0:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    43a2:	68fb      	ldr	r3, [r7, #12]
    43a4:	2238      	movs	r2, #56	; 0x38
    43a6:	2100      	movs	r1, #0
    43a8:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    43aa:	68fb      	ldr	r3, [r7, #12]
    43ac:	2203      	movs	r2, #3
    43ae:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    43b0:	68fb      	ldr	r3, [r7, #12]
    43b2:	2200      	movs	r2, #0
    43b4:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    43b6:	68fb      	ldr	r3, [r7, #12]
    43b8:	681b      	ldr	r3, [r3, #0]
    43ba:	2213      	movs	r2, #19
    43bc:	18bc      	adds	r4, r7, r2
    43be:	0018      	movs	r0, r3
    43c0:	4b0e      	ldr	r3, [pc, #56]	; (43fc <spi_init+0x168>)
    43c2:	4798      	blx	r3
    43c4:	0003      	movs	r3, r0
    43c6:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    43c8:	4a12      	ldr	r2, [pc, #72]	; (4414 <spi_init+0x180>)
    43ca:	2313      	movs	r3, #19
    43cc:	18fb      	adds	r3, r7, r3
    43ce:	781b      	ldrb	r3, [r3, #0]
    43d0:	0011      	movs	r1, r2
    43d2:	0018      	movs	r0, r3
    43d4:	4b10      	ldr	r3, [pc, #64]	; (4418 <spi_init+0x184>)
    43d6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    43d8:	2313      	movs	r3, #19
    43da:	18fb      	adds	r3, r7, r3
    43dc:	781a      	ldrb	r2, [r3, #0]
    43de:	4b0f      	ldr	r3, [pc, #60]	; (441c <spi_init+0x188>)
    43e0:	0092      	lsls	r2, r2, #2
    43e2:	68f9      	ldr	r1, [r7, #12]
    43e4:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    43e6:	687a      	ldr	r2, [r7, #4]
    43e8:	68fb      	ldr	r3, [r7, #12]
    43ea:	0011      	movs	r1, r2
    43ec:	0018      	movs	r0, r3
    43ee:	4b0c      	ldr	r3, [pc, #48]	; (4420 <spi_init+0x18c>)
    43f0:	4798      	blx	r3
    43f2:	0003      	movs	r3, r0
}
    43f4:	0018      	movs	r0, r3
    43f6:	46bd      	mov	sp, r7
    43f8:	b00b      	add	sp, #44	; 0x2c
    43fa:	bd90      	pop	{r4, r7, pc}
    43fc:	000039d5 	.word	0x000039d5
    4400:	00003c91 	.word	0x00003c91
    4404:	00003c79 	.word	0x00003c79
    4408:	000064e9 	.word	0x000064e9
    440c:	0000652d 	.word	0x0000652d
    4410:	0000378d 	.word	0x0000378d
    4414:	000048ed 	.word	0x000048ed
    4418:	00003a39 	.word	0x00003a39
    441c:	200009d4 	.word	0x200009d4
    4420:	00004085 	.word	0x00004085

00004424 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    4424:	b590      	push	{r4, r7, lr}
    4426:	b087      	sub	sp, #28
    4428:	af00      	add	r7, sp, #0
    442a:	60f8      	str	r0, [r7, #12]
    442c:	60b9      	str	r1, [r7, #8]
    442e:	0019      	movs	r1, r3
    4430:	1dbb      	adds	r3, r7, #6
    4432:	801a      	strh	r2, [r3, #0]
    4434:	1d3b      	adds	r3, r7, #4
    4436:	1c0a      	adds	r2, r1, #0
    4438:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    443a:	68fb      	ldr	r3, [r7, #12]
    443c:	2238      	movs	r2, #56	; 0x38
    443e:	5c9b      	ldrb	r3, [r3, r2]
    4440:	b2db      	uxtb	r3, r3
    4442:	2b05      	cmp	r3, #5
    4444:	d101      	bne.n	444a <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4446:	2305      	movs	r3, #5
    4448:	e07a      	b.n	4540 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    444a:	1dbb      	adds	r3, r7, #6
    444c:	881b      	ldrh	r3, [r3, #0]
    444e:	2b00      	cmp	r3, #0
    4450:	d101      	bne.n	4456 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    4452:	2317      	movs	r3, #23
    4454:	e074      	b.n	4540 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    4456:	68fb      	ldr	r3, [r7, #12]
    4458:	79db      	ldrb	r3, [r3, #7]
    445a:	2201      	movs	r2, #1
    445c:	4053      	eors	r3, r2
    445e:	b2db      	uxtb	r3, r3
    4460:	2b00      	cmp	r3, #0
    4462:	d001      	beq.n	4468 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    4464:	231c      	movs	r3, #28
    4466:	e06b      	b.n	4540 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    4468:	2316      	movs	r3, #22
    446a:	18fb      	adds	r3, r7, r3
    446c:	2200      	movs	r2, #0
    446e:	801a      	strh	r2, [r3, #0]

	while (length--) {
    4470:	e05e      	b.n	4530 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    4472:	68fb      	ldr	r3, [r7, #12]
    4474:	795b      	ldrb	r3, [r3, #5]
    4476:	2b01      	cmp	r3, #1
    4478:	d112      	bne.n	44a0 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    447a:	46c0      	nop			; (mov r8, r8)
    447c:	68fb      	ldr	r3, [r7, #12]
    447e:	0018      	movs	r0, r3
    4480:	4b31      	ldr	r3, [pc, #196]	; (4548 <spi_read_buffer_wait+0x124>)
    4482:	4798      	blx	r3
    4484:	0003      	movs	r3, r0
    4486:	001a      	movs	r2, r3
    4488:	2301      	movs	r3, #1
    448a:	4053      	eors	r3, r2
    448c:	b2db      	uxtb	r3, r3
    448e:	2b00      	cmp	r3, #0
    4490:	d1f4      	bne.n	447c <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    4492:	1d3b      	adds	r3, r7, #4
    4494:	881a      	ldrh	r2, [r3, #0]
    4496:	68fb      	ldr	r3, [r7, #12]
    4498:	0011      	movs	r1, r2
    449a:	0018      	movs	r0, r3
    449c:	4b2b      	ldr	r3, [pc, #172]	; (454c <spi_read_buffer_wait+0x128>)
    449e:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    44a0:	46c0      	nop			; (mov r8, r8)
    44a2:	68fb      	ldr	r3, [r7, #12]
    44a4:	0018      	movs	r0, r3
    44a6:	4b2a      	ldr	r3, [pc, #168]	; (4550 <spi_read_buffer_wait+0x12c>)
    44a8:	4798      	blx	r3
    44aa:	0003      	movs	r3, r0
    44ac:	001a      	movs	r2, r3
    44ae:	2301      	movs	r3, #1
    44b0:	4053      	eors	r3, r2
    44b2:	b2db      	uxtb	r3, r3
    44b4:	2b00      	cmp	r3, #0
    44b6:	d1f4      	bne.n	44a2 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    44b8:	2312      	movs	r3, #18
    44ba:	18fb      	adds	r3, r7, r3
    44bc:	2200      	movs	r2, #0
    44be:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    44c0:	2315      	movs	r3, #21
    44c2:	18fc      	adds	r4, r7, r3
    44c4:	2312      	movs	r3, #18
    44c6:	18fa      	adds	r2, r7, r3
    44c8:	68fb      	ldr	r3, [r7, #12]
    44ca:	0011      	movs	r1, r2
    44cc:	0018      	movs	r0, r3
    44ce:	4b21      	ldr	r3, [pc, #132]	; (4554 <spi_read_buffer_wait+0x130>)
    44d0:	4798      	blx	r3
    44d2:	0003      	movs	r3, r0
    44d4:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    44d6:	2315      	movs	r3, #21
    44d8:	18fb      	adds	r3, r7, r3
    44da:	781b      	ldrb	r3, [r3, #0]
    44dc:	2b00      	cmp	r3, #0
    44de:	d003      	beq.n	44e8 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    44e0:	2315      	movs	r3, #21
    44e2:	18fb      	adds	r3, r7, r3
    44e4:	781b      	ldrb	r3, [r3, #0]
    44e6:	e02b      	b.n	4540 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    44e8:	2316      	movs	r3, #22
    44ea:	18fb      	adds	r3, r7, r3
    44ec:	881b      	ldrh	r3, [r3, #0]
    44ee:	2216      	movs	r2, #22
    44f0:	18ba      	adds	r2, r7, r2
    44f2:	1c59      	adds	r1, r3, #1
    44f4:	8011      	strh	r1, [r2, #0]
    44f6:	001a      	movs	r2, r3
    44f8:	68bb      	ldr	r3, [r7, #8]
    44fa:	189b      	adds	r3, r3, r2
    44fc:	2212      	movs	r2, #18
    44fe:	18ba      	adds	r2, r7, r2
    4500:	8812      	ldrh	r2, [r2, #0]
    4502:	b2d2      	uxtb	r2, r2
    4504:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4506:	68fb      	ldr	r3, [r7, #12]
    4508:	799b      	ldrb	r3, [r3, #6]
    450a:	2b01      	cmp	r3, #1
    450c:	d110      	bne.n	4530 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    450e:	2316      	movs	r3, #22
    4510:	18fb      	adds	r3, r7, r3
    4512:	881b      	ldrh	r3, [r3, #0]
    4514:	2216      	movs	r2, #22
    4516:	18ba      	adds	r2, r7, r2
    4518:	1c59      	adds	r1, r3, #1
    451a:	8011      	strh	r1, [r2, #0]
    451c:	001a      	movs	r2, r3
    451e:	68bb      	ldr	r3, [r7, #8]
    4520:	189b      	adds	r3, r3, r2
    4522:	2212      	movs	r2, #18
    4524:	18ba      	adds	r2, r7, r2
    4526:	8812      	ldrh	r2, [r2, #0]
    4528:	0a12      	lsrs	r2, r2, #8
    452a:	b292      	uxth	r2, r2
    452c:	b2d2      	uxtb	r2, r2
    452e:	701a      	strb	r2, [r3, #0]
	while (length--) {
    4530:	1dbb      	adds	r3, r7, #6
    4532:	881b      	ldrh	r3, [r3, #0]
    4534:	1dba      	adds	r2, r7, #6
    4536:	1e59      	subs	r1, r3, #1
    4538:	8011      	strh	r1, [r2, #0]
    453a:	2b00      	cmp	r3, #0
    453c:	d199      	bne.n	4472 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    453e:	2300      	movs	r3, #0
}
    4540:	0018      	movs	r0, r3
    4542:	46bd      	mov	sp, r7
    4544:	b007      	add	sp, #28
    4546:	bd90      	pop	{r4, r7, pc}
    4548:	00003e5d 	.word	0x00003e5d
    454c:	00003ead 	.word	0x00003ead
    4550:	00003e85 	.word	0x00003e85
    4554:	00003ef5 	.word	0x00003ef5

00004558 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4558:	b580      	push	{r7, lr}
    455a:	b086      	sub	sp, #24
    455c:	af00      	add	r7, sp, #0
    455e:	60f8      	str	r0, [r7, #12]
    4560:	60b9      	str	r1, [r7, #8]
    4562:	1dfb      	adds	r3, r7, #7
    4564:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4566:	68fb      	ldr	r3, [r7, #12]
    4568:	795b      	ldrb	r3, [r3, #5]
    456a:	2b01      	cmp	r3, #1
    456c:	d001      	beq.n	4572 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    456e:	2315      	movs	r3, #21
    4570:	e05c      	b.n	462c <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    4572:	68fb      	ldr	r3, [r7, #12]
    4574:	7a1b      	ldrb	r3, [r3, #8]
    4576:	2201      	movs	r2, #1
    4578:	4053      	eors	r3, r2
    457a:	b2db      	uxtb	r3, r3
    457c:	2b00      	cmp	r3, #0
    457e:	d054      	beq.n	462a <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    4580:	1dfb      	adds	r3, r7, #7
    4582:	781b      	ldrb	r3, [r3, #0]
    4584:	2b00      	cmp	r3, #0
    4586:	d04a      	beq.n	461e <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    4588:	68bb      	ldr	r3, [r7, #8]
    458a:	785b      	ldrb	r3, [r3, #1]
    458c:	2b00      	cmp	r3, #0
    458e:	d03f      	beq.n	4610 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    4590:	68fb      	ldr	r3, [r7, #12]
    4592:	0018      	movs	r0, r3
    4594:	4b27      	ldr	r3, [pc, #156]	; (4634 <spi_select_slave+0xdc>)
    4596:	4798      	blx	r3
    4598:	0003      	movs	r3, r0
    459a:	001a      	movs	r2, r3
    459c:	2301      	movs	r3, #1
    459e:	4053      	eors	r3, r2
    45a0:	b2db      	uxtb	r3, r3
    45a2:	2b00      	cmp	r3, #0
    45a4:	d007      	beq.n	45b6 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    45a6:	68bb      	ldr	r3, [r7, #8]
    45a8:	781b      	ldrb	r3, [r3, #0]
    45aa:	2101      	movs	r1, #1
    45ac:	0018      	movs	r0, r3
    45ae:	4b22      	ldr	r3, [pc, #136]	; (4638 <spi_select_slave+0xe0>)
    45b0:	4798      	blx	r3
					return STATUS_BUSY;
    45b2:	2305      	movs	r3, #5
    45b4:	e03a      	b.n	462c <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    45b6:	68bb      	ldr	r3, [r7, #8]
    45b8:	781b      	ldrb	r3, [r3, #0]
    45ba:	2100      	movs	r1, #0
    45bc:	0018      	movs	r0, r3
    45be:	4b1e      	ldr	r3, [pc, #120]	; (4638 <spi_select_slave+0xe0>)
    45c0:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    45c2:	68bb      	ldr	r3, [r7, #8]
    45c4:	789b      	ldrb	r3, [r3, #2]
    45c6:	b29a      	uxth	r2, r3
    45c8:	68fb      	ldr	r3, [r7, #12]
    45ca:	0011      	movs	r1, r2
    45cc:	0018      	movs	r0, r3
    45ce:	4b1b      	ldr	r3, [pc, #108]	; (463c <spi_select_slave+0xe4>)
    45d0:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    45d2:	68fb      	ldr	r3, [r7, #12]
    45d4:	79db      	ldrb	r3, [r3, #7]
    45d6:	2201      	movs	r2, #1
    45d8:	4053      	eors	r3, r2
    45da:	b2db      	uxtb	r3, r3
    45dc:	2b00      	cmp	r3, #0
    45de:	d024      	beq.n	462a <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    45e0:	46c0      	nop			; (mov r8, r8)
    45e2:	68fb      	ldr	r3, [r7, #12]
    45e4:	0018      	movs	r0, r3
    45e6:	4b16      	ldr	r3, [pc, #88]	; (4640 <spi_select_slave+0xe8>)
    45e8:	4798      	blx	r3
    45ea:	0003      	movs	r3, r0
    45ec:	001a      	movs	r2, r3
    45ee:	2301      	movs	r3, #1
    45f0:	4053      	eors	r3, r2
    45f2:	b2db      	uxtb	r3, r3
    45f4:	2b00      	cmp	r3, #0
    45f6:	d1f4      	bne.n	45e2 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    45f8:	2316      	movs	r3, #22
    45fa:	18fb      	adds	r3, r7, r3
    45fc:	2200      	movs	r2, #0
    45fe:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    4600:	2316      	movs	r3, #22
    4602:	18fa      	adds	r2, r7, r3
    4604:	68fb      	ldr	r3, [r7, #12]
    4606:	0011      	movs	r1, r2
    4608:	0018      	movs	r0, r3
    460a:	4b0e      	ldr	r3, [pc, #56]	; (4644 <spi_select_slave+0xec>)
    460c:	4798      	blx	r3
    460e:	e00c      	b.n	462a <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4610:	68bb      	ldr	r3, [r7, #8]
    4612:	781b      	ldrb	r3, [r3, #0]
    4614:	2100      	movs	r1, #0
    4616:	0018      	movs	r0, r3
    4618:	4b07      	ldr	r3, [pc, #28]	; (4638 <spi_select_slave+0xe0>)
    461a:	4798      	blx	r3
    461c:	e005      	b.n	462a <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    461e:	68bb      	ldr	r3, [r7, #8]
    4620:	781b      	ldrb	r3, [r3, #0]
    4622:	2101      	movs	r1, #1
    4624:	0018      	movs	r0, r3
    4626:	4b04      	ldr	r3, [pc, #16]	; (4638 <spi_select_slave+0xe0>)
    4628:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    462a:	2300      	movs	r3, #0
}
    462c:	0018      	movs	r0, r3
    462e:	46bd      	mov	sp, r7
    4630:	b006      	add	sp, #24
    4632:	bd80      	pop	{r7, pc}
    4634:	00003e5d 	.word	0x00003e5d
    4638:	00003c25 	.word	0x00003c25
    463c:	00003ead 	.word	0x00003ead
    4640:	00003e85 	.word	0x00003e85
    4644:	00003ef5 	.word	0x00003ef5

00004648 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    4648:	b580      	push	{r7, lr}
    464a:	b086      	sub	sp, #24
    464c:	af00      	add	r7, sp, #0
    464e:	60f8      	str	r0, [r7, #12]
    4650:	60b9      	str	r1, [r7, #8]
    4652:	1dbb      	adds	r3, r7, #6
    4654:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4656:	68fb      	ldr	r3, [r7, #12]
    4658:	2238      	movs	r2, #56	; 0x38
    465a:	5c9b      	ldrb	r3, [r3, r2]
    465c:	b2db      	uxtb	r3, r3
    465e:	2b05      	cmp	r3, #5
    4660:	d101      	bne.n	4666 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4662:	2305      	movs	r3, #5
    4664:	e087      	b.n	4776 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    4666:	1dbb      	adds	r3, r7, #6
    4668:	881b      	ldrh	r3, [r3, #0]
    466a:	2b00      	cmp	r3, #0
    466c:	d101      	bne.n	4672 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    466e:	2317      	movs	r3, #23
    4670:	e081      	b.n	4776 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    4672:	2316      	movs	r3, #22
    4674:	18fb      	adds	r3, r7, r3
    4676:	2200      	movs	r2, #0
    4678:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    467a:	2314      	movs	r3, #20
    467c:	18fb      	adds	r3, r7, r3
    467e:	1dba      	adds	r2, r7, #6
    4680:	8812      	ldrh	r2, [r2, #0]
    4682:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    4684:	e05f      	b.n	4746 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    4686:	46c0      	nop			; (mov r8, r8)
    4688:	68fb      	ldr	r3, [r7, #12]
    468a:	0018      	movs	r0, r3
    468c:	4b3c      	ldr	r3, [pc, #240]	; (4780 <spi_write_buffer_wait+0x138>)
    468e:	4798      	blx	r3
    4690:	0003      	movs	r3, r0
    4692:	001a      	movs	r2, r3
    4694:	2301      	movs	r3, #1
    4696:	4053      	eors	r3, r2
    4698:	b2db      	uxtb	r3, r3
    469a:	2b00      	cmp	r3, #0
    469c:	d1f4      	bne.n	4688 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    469e:	2316      	movs	r3, #22
    46a0:	18fb      	adds	r3, r7, r3
    46a2:	881b      	ldrh	r3, [r3, #0]
    46a4:	2216      	movs	r2, #22
    46a6:	18ba      	adds	r2, r7, r2
    46a8:	1c59      	adds	r1, r3, #1
    46aa:	8011      	strh	r1, [r2, #0]
    46ac:	001a      	movs	r2, r3
    46ae:	68bb      	ldr	r3, [r7, #8]
    46b0:	189b      	adds	r3, r3, r2
    46b2:	781a      	ldrb	r2, [r3, #0]
    46b4:	2312      	movs	r3, #18
    46b6:	18fb      	adds	r3, r7, r3
    46b8:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    46ba:	68fb      	ldr	r3, [r7, #12]
    46bc:	799b      	ldrb	r3, [r3, #6]
    46be:	2b01      	cmp	r3, #1
    46c0:	d115      	bne.n	46ee <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    46c2:	2316      	movs	r3, #22
    46c4:	18fb      	adds	r3, r7, r3
    46c6:	881b      	ldrh	r3, [r3, #0]
    46c8:	2216      	movs	r2, #22
    46ca:	18ba      	adds	r2, r7, r2
    46cc:	1c59      	adds	r1, r3, #1
    46ce:	8011      	strh	r1, [r2, #0]
    46d0:	001a      	movs	r2, r3
    46d2:	68bb      	ldr	r3, [r7, #8]
    46d4:	189b      	adds	r3, r3, r2
    46d6:	781b      	ldrb	r3, [r3, #0]
    46d8:	021b      	lsls	r3, r3, #8
    46da:	b21a      	sxth	r2, r3
    46dc:	2312      	movs	r3, #18
    46de:	18fb      	adds	r3, r7, r3
    46e0:	2100      	movs	r1, #0
    46e2:	5e5b      	ldrsh	r3, [r3, r1]
    46e4:	4313      	orrs	r3, r2
    46e6:	b21a      	sxth	r2, r3
    46e8:	2312      	movs	r3, #18
    46ea:	18fb      	adds	r3, r7, r3
    46ec:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    46ee:	2312      	movs	r3, #18
    46f0:	18fb      	adds	r3, r7, r3
    46f2:	881a      	ldrh	r2, [r3, #0]
    46f4:	68fb      	ldr	r3, [r7, #12]
    46f6:	0011      	movs	r1, r2
    46f8:	0018      	movs	r0, r3
    46fa:	4b22      	ldr	r3, [pc, #136]	; (4784 <spi_write_buffer_wait+0x13c>)
    46fc:	4798      	blx	r3

		if (module->receiver_enabled) {
    46fe:	68fb      	ldr	r3, [r7, #12]
    4700:	79db      	ldrb	r3, [r3, #7]
    4702:	2214      	movs	r2, #20
    4704:	18ba      	adds	r2, r7, r2
    4706:	2114      	movs	r1, #20
    4708:	1879      	adds	r1, r7, r1
    470a:	8809      	ldrh	r1, [r1, #0]
    470c:	8011      	strh	r1, [r2, #0]
    470e:	2b00      	cmp	r3, #0
    4710:	d019      	beq.n	4746 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    4712:	46c0      	nop			; (mov r8, r8)
    4714:	68fb      	ldr	r3, [r7, #12]
    4716:	0018      	movs	r0, r3
    4718:	4b1b      	ldr	r3, [pc, #108]	; (4788 <spi_write_buffer_wait+0x140>)
    471a:	4798      	blx	r3
    471c:	0003      	movs	r3, r0
    471e:	001a      	movs	r2, r3
    4720:	2301      	movs	r3, #1
    4722:	4053      	eors	r3, r2
    4724:	b2db      	uxtb	r3, r3
    4726:	2b00      	cmp	r3, #0
    4728:	d1f4      	bne.n	4714 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    472a:	2310      	movs	r3, #16
    472c:	18fa      	adds	r2, r7, r3
    472e:	68fb      	ldr	r3, [r7, #12]
    4730:	0011      	movs	r1, r2
    4732:	0018      	movs	r0, r3
    4734:	4b15      	ldr	r3, [pc, #84]	; (478c <spi_write_buffer_wait+0x144>)
    4736:	4798      	blx	r3
			flush_length--;
    4738:	2314      	movs	r3, #20
    473a:	18fb      	adds	r3, r7, r3
    473c:	881a      	ldrh	r2, [r3, #0]
    473e:	2314      	movs	r3, #20
    4740:	18fb      	adds	r3, r7, r3
    4742:	3a01      	subs	r2, #1
    4744:	801a      	strh	r2, [r3, #0]
	while (length--) {
    4746:	1dbb      	adds	r3, r7, #6
    4748:	881b      	ldrh	r3, [r3, #0]
    474a:	1dba      	adds	r2, r7, #6
    474c:	1e59      	subs	r1, r3, #1
    474e:	8011      	strh	r1, [r2, #0]
    4750:	2b00      	cmp	r3, #0
    4752:	d198      	bne.n	4686 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    4754:	68fb      	ldr	r3, [r7, #12]
    4756:	795b      	ldrb	r3, [r3, #5]
    4758:	2b01      	cmp	r3, #1
    475a:	d10b      	bne.n	4774 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    475c:	46c0      	nop			; (mov r8, r8)
    475e:	68fb      	ldr	r3, [r7, #12]
    4760:	0018      	movs	r0, r3
    4762:	4b0b      	ldr	r3, [pc, #44]	; (4790 <spi_write_buffer_wait+0x148>)
    4764:	4798      	blx	r3
    4766:	0003      	movs	r3, r0
    4768:	001a      	movs	r2, r3
    476a:	2301      	movs	r3, #1
    476c:	4053      	eors	r3, r2
    476e:	b2db      	uxtb	r3, r3
    4770:	2b00      	cmp	r3, #0
    4772:	d1f4      	bne.n	475e <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    4774:	2300      	movs	r3, #0
}
    4776:	0018      	movs	r0, r3
    4778:	46bd      	mov	sp, r7
    477a:	b006      	add	sp, #24
    477c:	bd80      	pop	{r7, pc}
    477e:	46c0      	nop			; (mov r8, r8)
    4780:	00003e5d 	.word	0x00003e5d
    4784:	00003ead 	.word	0x00003ead
    4788:	00003e85 	.word	0x00003e85
    478c:	00003ef5 	.word	0x00003ef5
    4790:	00003e35 	.word	0x00003e35

00004794 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    4794:	b580      	push	{r7, lr}
    4796:	b084      	sub	sp, #16
    4798:	af00      	add	r7, sp, #0
    479a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    479c:	687b      	ldr	r3, [r7, #4]
    479e:	681b      	ldr	r3, [r3, #0]
    47a0:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    47a2:	687b      	ldr	r3, [r7, #4]
    47a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    47a6:	781b      	ldrb	r3, [r3, #0]
    47a8:	b2da      	uxtb	r2, r3
    47aa:	230e      	movs	r3, #14
    47ac:	18fb      	adds	r3, r7, r3
    47ae:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    47b0:	687b      	ldr	r3, [r7, #4]
    47b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    47b4:	1c5a      	adds	r2, r3, #1
    47b6:	687b      	ldr	r3, [r7, #4]
    47b8:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    47ba:	687b      	ldr	r3, [r7, #4]
    47bc:	799b      	ldrb	r3, [r3, #6]
    47be:	2b01      	cmp	r3, #1
    47c0:	d113      	bne.n	47ea <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    47c2:	687b      	ldr	r3, [r7, #4]
    47c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    47c6:	781b      	ldrb	r3, [r3, #0]
    47c8:	b2db      	uxtb	r3, r3
    47ca:	021b      	lsls	r3, r3, #8
    47cc:	b21a      	sxth	r2, r3
    47ce:	230e      	movs	r3, #14
    47d0:	18fb      	adds	r3, r7, r3
    47d2:	2100      	movs	r1, #0
    47d4:	5e5b      	ldrsh	r3, [r3, r1]
    47d6:	4313      	orrs	r3, r2
    47d8:	b21a      	sxth	r2, r3
    47da:	230e      	movs	r3, #14
    47dc:	18fb      	adds	r3, r7, r3
    47de:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    47e0:	687b      	ldr	r3, [r7, #4]
    47e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    47e4:	1c5a      	adds	r2, r3, #1
    47e6:	687b      	ldr	r3, [r7, #4]
    47e8:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    47ea:	230e      	movs	r3, #14
    47ec:	18fb      	adds	r3, r7, r3
    47ee:	881b      	ldrh	r3, [r3, #0]
    47f0:	05db      	lsls	r3, r3, #23
    47f2:	0dda      	lsrs	r2, r3, #23
    47f4:	68bb      	ldr	r3, [r7, #8]
    47f6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    47f8:	687b      	ldr	r3, [r7, #4]
    47fa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    47fc:	b29b      	uxth	r3, r3
    47fe:	3b01      	subs	r3, #1
    4800:	b29a      	uxth	r2, r3
    4802:	687b      	ldr	r3, [r7, #4]
    4804:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4806:	46c0      	nop			; (mov r8, r8)
    4808:	46bd      	mov	sp, r7
    480a:	b004      	add	sp, #16
    480c:	bd80      	pop	{r7, pc}
	...

00004810 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    4810:	b580      	push	{r7, lr}
    4812:	b084      	sub	sp, #16
    4814:	af00      	add	r7, sp, #0
    4816:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4818:	687b      	ldr	r3, [r7, #4]
    481a:	681b      	ldr	r3, [r3, #0]
    481c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    481e:	4b08      	ldr	r3, [pc, #32]	; (4840 <_spi_write_dummy+0x30>)
    4820:	881b      	ldrh	r3, [r3, #0]
    4822:	001a      	movs	r2, r3
    4824:	68fb      	ldr	r3, [r7, #12]
    4826:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4828:	687b      	ldr	r3, [r7, #4]
    482a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    482c:	b29b      	uxth	r3, r3
    482e:	3b01      	subs	r3, #1
    4830:	b29a      	uxth	r2, r3
    4832:	687b      	ldr	r3, [r7, #4]
    4834:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4836:	46c0      	nop			; (mov r8, r8)
    4838:	46bd      	mov	sp, r7
    483a:	b004      	add	sp, #16
    483c:	bd80      	pop	{r7, pc}
    483e:	46c0      	nop			; (mov r8, r8)
    4840:	200009ec 	.word	0x200009ec

00004844 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    4844:	b580      	push	{r7, lr}
    4846:	b084      	sub	sp, #16
    4848:	af00      	add	r7, sp, #0
    484a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    484c:	687b      	ldr	r3, [r7, #4]
    484e:	681b      	ldr	r3, [r3, #0]
    4850:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    4852:	230a      	movs	r3, #10
    4854:	18fb      	adds	r3, r7, r3
    4856:	2200      	movs	r2, #0
    4858:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    485a:	68fb      	ldr	r3, [r7, #12]
    485c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    485e:	230a      	movs	r3, #10
    4860:	18fb      	adds	r3, r7, r3
    4862:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4864:	687b      	ldr	r3, [r7, #4]
    4866:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4868:	b29b      	uxth	r3, r3
    486a:	3b01      	subs	r3, #1
    486c:	b29a      	uxth	r2, r3
    486e:	687b      	ldr	r3, [r7, #4]
    4870:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4872:	46c0      	nop			; (mov r8, r8)
    4874:	46bd      	mov	sp, r7
    4876:	b004      	add	sp, #16
    4878:	bd80      	pop	{r7, pc}

0000487a <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    487a:	b580      	push	{r7, lr}
    487c:	b084      	sub	sp, #16
    487e:	af00      	add	r7, sp, #0
    4880:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4882:	687b      	ldr	r3, [r7, #4]
    4884:	681b      	ldr	r3, [r3, #0]
    4886:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4888:	68fb      	ldr	r3, [r7, #12]
    488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    488c:	b29a      	uxth	r2, r3
    488e:	230a      	movs	r3, #10
    4890:	18fb      	adds	r3, r7, r3
    4892:	05d2      	lsls	r2, r2, #23
    4894:	0dd2      	lsrs	r2, r2, #23
    4896:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    4898:	687b      	ldr	r3, [r7, #4]
    489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    489c:	220a      	movs	r2, #10
    489e:	18ba      	adds	r2, r7, r2
    48a0:	8812      	ldrh	r2, [r2, #0]
    48a2:	b2d2      	uxtb	r2, r2
    48a4:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    48a6:	687b      	ldr	r3, [r7, #4]
    48a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48aa:	1c5a      	adds	r2, r3, #1
    48ac:	687b      	ldr	r3, [r7, #4]
    48ae:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    48b0:	687b      	ldr	r3, [r7, #4]
    48b2:	799b      	ldrb	r3, [r3, #6]
    48b4:	2b01      	cmp	r3, #1
    48b6:	d10d      	bne.n	48d4 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    48b8:	687b      	ldr	r3, [r7, #4]
    48ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48bc:	220a      	movs	r2, #10
    48be:	18ba      	adds	r2, r7, r2
    48c0:	8812      	ldrh	r2, [r2, #0]
    48c2:	0a12      	lsrs	r2, r2, #8
    48c4:	b292      	uxth	r2, r2
    48c6:	b2d2      	uxtb	r2, r2
    48c8:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    48ca:	687b      	ldr	r3, [r7, #4]
    48cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48ce:	1c5a      	adds	r2, r3, #1
    48d0:	687b      	ldr	r3, [r7, #4]
    48d2:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    48d8:	b29b      	uxth	r3, r3
    48da:	3b01      	subs	r3, #1
    48dc:	b29a      	uxth	r2, r3
    48de:	687b      	ldr	r3, [r7, #4]
    48e0:	861a      	strh	r2, [r3, #48]	; 0x30
}
    48e2:	46c0      	nop			; (mov r8, r8)
    48e4:	46bd      	mov	sp, r7
    48e6:	b004      	add	sp, #16
    48e8:	bd80      	pop	{r7, pc}
	...

000048ec <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    48ec:	b580      	push	{r7, lr}
    48ee:	b086      	sub	sp, #24
    48f0:	af00      	add	r7, sp, #0
    48f2:	0002      	movs	r2, r0
    48f4:	1dfb      	adds	r3, r7, #7
    48f6:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    48f8:	1dfb      	adds	r3, r7, #7
    48fa:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    48fc:	4b96      	ldr	r3, [pc, #600]	; (4b58 <_spi_interrupt_handler+0x26c>)
    48fe:	0092      	lsls	r2, r2, #2
    4900:	58d3      	ldr	r3, [r2, r3]
    4902:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4904:	697b      	ldr	r3, [r7, #20]
    4906:	681b      	ldr	r3, [r3, #0]
    4908:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    490a:	697b      	ldr	r3, [r7, #20]
    490c:	2237      	movs	r2, #55	; 0x37
    490e:	5c9a      	ldrb	r2, [r3, r2]
    4910:	697b      	ldr	r3, [r7, #20]
    4912:	2136      	movs	r1, #54	; 0x36
    4914:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    4916:	230f      	movs	r3, #15
    4918:	18fb      	adds	r3, r7, r3
    491a:	400a      	ands	r2, r1
    491c:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    491e:	693b      	ldr	r3, [r7, #16]
    4920:	7e1b      	ldrb	r3, [r3, #24]
    4922:	b2da      	uxtb	r2, r3
    4924:	230c      	movs	r3, #12
    4926:	18fb      	adds	r3, r7, r3
    4928:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    492a:	693b      	ldr	r3, [r7, #16]
    492c:	7d9b      	ldrb	r3, [r3, #22]
    492e:	b2db      	uxtb	r3, r3
    4930:	b29a      	uxth	r2, r3
    4932:	230c      	movs	r3, #12
    4934:	18fb      	adds	r3, r7, r3
    4936:	210c      	movs	r1, #12
    4938:	1879      	adds	r1, r7, r1
    493a:	8809      	ldrh	r1, [r1, #0]
    493c:	400a      	ands	r2, r1
    493e:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4940:	230c      	movs	r3, #12
    4942:	18fb      	adds	r3, r7, r3
    4944:	881b      	ldrh	r3, [r3, #0]
    4946:	2201      	movs	r2, #1
    4948:	4013      	ands	r3, r2
    494a:	d038      	beq.n	49be <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    494c:	697b      	ldr	r3, [r7, #20]
    494e:	795b      	ldrb	r3, [r3, #5]
    4950:	2b01      	cmp	r3, #1
    4952:	d110      	bne.n	4976 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    4954:	697b      	ldr	r3, [r7, #20]
    4956:	7a5b      	ldrb	r3, [r3, #9]
    4958:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    495a:	2b00      	cmp	r3, #0
    495c:	d10b      	bne.n	4976 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    495e:	697b      	ldr	r3, [r7, #20]
    4960:	0018      	movs	r0, r3
    4962:	4b7e      	ldr	r3, [pc, #504]	; (4b5c <_spi_interrupt_handler+0x270>)
    4964:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    4966:	697b      	ldr	r3, [r7, #20]
    4968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    496a:	b29b      	uxth	r3, r3
    496c:	2b00      	cmp	r3, #0
    496e:	d102      	bne.n	4976 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4970:	693b      	ldr	r3, [r7, #16]
    4972:	2201      	movs	r2, #1
    4974:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    4976:	697b      	ldr	r3, [r7, #20]
    4978:	795b      	ldrb	r3, [r3, #5]
		if (0
    497a:	2b01      	cmp	r3, #1
    497c:	d11f      	bne.n	49be <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    497e:	697b      	ldr	r3, [r7, #20]
    4980:	7a5b      	ldrb	r3, [r3, #9]
    4982:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    4984:	2b00      	cmp	r3, #0
    4986:	d01a      	beq.n	49be <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    4988:	697b      	ldr	r3, [r7, #20]
    498a:	0018      	movs	r0, r3
    498c:	4b74      	ldr	r3, [pc, #464]	; (4b60 <_spi_interrupt_handler+0x274>)
    498e:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    4990:	697b      	ldr	r3, [r7, #20]
    4992:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4994:	b29b      	uxth	r3, r3
    4996:	2b00      	cmp	r3, #0
    4998:	d111      	bne.n	49be <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    499a:	693b      	ldr	r3, [r7, #16]
    499c:	2201      	movs	r2, #1
    499e:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    49a0:	697b      	ldr	r3, [r7, #20]
    49a2:	7a5b      	ldrb	r3, [r3, #9]
    49a4:	b2db      	uxtb	r3, r3
    49a6:	2b01      	cmp	r3, #1
    49a8:	d109      	bne.n	49be <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    49aa:	697b      	ldr	r3, [r7, #20]
    49ac:	79db      	ldrb	r3, [r3, #7]
    49ae:	2201      	movs	r2, #1
    49b0:	4053      	eors	r3, r2
    49b2:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    49b4:	2b00      	cmp	r3, #0
    49b6:	d002      	beq.n	49be <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    49b8:	693b      	ldr	r3, [r7, #16]
    49ba:	2202      	movs	r2, #2
    49bc:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    49be:	230c      	movs	r3, #12
    49c0:	18fb      	adds	r3, r7, r3
    49c2:	881b      	ldrh	r3, [r3, #0]
    49c4:	2204      	movs	r2, #4
    49c6:	4013      	ands	r3, r2
    49c8:	d100      	bne.n	49cc <_spi_interrupt_handler+0xe0>
    49ca:	e07e      	b.n	4aca <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    49cc:	693b      	ldr	r3, [r7, #16]
    49ce:	8b5b      	ldrh	r3, [r3, #26]
    49d0:	b29b      	uxth	r3, r3
    49d2:	001a      	movs	r2, r3
    49d4:	2304      	movs	r3, #4
    49d6:	4013      	ands	r3, r2
    49d8:	d022      	beq.n	4a20 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    49da:	697b      	ldr	r3, [r7, #20]
    49dc:	7a5b      	ldrb	r3, [r3, #9]
    49de:	b2db      	uxtb	r3, r3
    49e0:	2b01      	cmp	r3, #1
    49e2:	d014      	beq.n	4a0e <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    49e4:	697b      	ldr	r3, [r7, #20]
    49e6:	2238      	movs	r2, #56	; 0x38
    49e8:	211e      	movs	r1, #30
    49ea:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    49ec:	697b      	ldr	r3, [r7, #20]
    49ee:	2203      	movs	r2, #3
    49f0:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    49f2:	693b      	ldr	r3, [r7, #16]
    49f4:	2205      	movs	r2, #5
    49f6:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    49f8:	230f      	movs	r3, #15
    49fa:	18fb      	adds	r3, r7, r3
    49fc:	781b      	ldrb	r3, [r3, #0]
    49fe:	2208      	movs	r2, #8
    4a00:	4013      	ands	r3, r2
    4a02:	d004      	beq.n	4a0e <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4a04:	697b      	ldr	r3, [r7, #20]
    4a06:	699b      	ldr	r3, [r3, #24]
    4a08:	697a      	ldr	r2, [r7, #20]
    4a0a:	0010      	movs	r0, r2
    4a0c:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4a0e:	693b      	ldr	r3, [r7, #16]
    4a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4a12:	230a      	movs	r3, #10
    4a14:	18fb      	adds	r3, r7, r3
    4a16:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4a18:	693b      	ldr	r3, [r7, #16]
    4a1a:	2204      	movs	r2, #4
    4a1c:	835a      	strh	r2, [r3, #26]
    4a1e:	e054      	b.n	4aca <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    4a20:	697b      	ldr	r3, [r7, #20]
    4a22:	7a5b      	ldrb	r3, [r3, #9]
    4a24:	b2db      	uxtb	r3, r3
    4a26:	2b01      	cmp	r3, #1
    4a28:	d11e      	bne.n	4a68 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    4a2a:	697b      	ldr	r3, [r7, #20]
    4a2c:	0018      	movs	r0, r3
    4a2e:	4b4d      	ldr	r3, [pc, #308]	; (4b64 <_spi_interrupt_handler+0x278>)
    4a30:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    4a32:	697b      	ldr	r3, [r7, #20]
    4a34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4a36:	b29b      	uxth	r3, r3
    4a38:	2b00      	cmp	r3, #0
    4a3a:	d146      	bne.n	4aca <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4a3c:	693b      	ldr	r3, [r7, #16]
    4a3e:	2204      	movs	r2, #4
    4a40:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    4a42:	697b      	ldr	r3, [r7, #20]
    4a44:	2238      	movs	r2, #56	; 0x38
    4a46:	2100      	movs	r1, #0
    4a48:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    4a4a:	697b      	ldr	r3, [r7, #20]
    4a4c:	2203      	movs	r2, #3
    4a4e:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    4a50:	230f      	movs	r3, #15
    4a52:	18fb      	adds	r3, r7, r3
    4a54:	781b      	ldrb	r3, [r3, #0]
    4a56:	2201      	movs	r2, #1
    4a58:	4013      	ands	r3, r2
    4a5a:	d036      	beq.n	4aca <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4a5c:	697b      	ldr	r3, [r7, #20]
    4a5e:	68db      	ldr	r3, [r3, #12]
    4a60:	697a      	ldr	r2, [r7, #20]
    4a62:	0010      	movs	r0, r2
    4a64:	4798      	blx	r3
    4a66:	e030      	b.n	4aca <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    4a68:	697b      	ldr	r3, [r7, #20]
    4a6a:	0018      	movs	r0, r3
    4a6c:	4b3e      	ldr	r3, [pc, #248]	; (4b68 <_spi_interrupt_handler+0x27c>)
    4a6e:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    4a70:	697b      	ldr	r3, [r7, #20]
    4a72:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4a74:	b29b      	uxth	r3, r3
    4a76:	2b00      	cmp	r3, #0
    4a78:	d127      	bne.n	4aca <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    4a7a:	697b      	ldr	r3, [r7, #20]
    4a7c:	2238      	movs	r2, #56	; 0x38
    4a7e:	2100      	movs	r1, #0
    4a80:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4a82:	693b      	ldr	r3, [r7, #16]
    4a84:	2204      	movs	r2, #4
    4a86:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4a88:	697b      	ldr	r3, [r7, #20]
    4a8a:	7a5b      	ldrb	r3, [r3, #9]
    4a8c:	b2db      	uxtb	r3, r3
    4a8e:	2b02      	cmp	r3, #2
    4a90:	d10b      	bne.n	4aaa <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4a92:	230f      	movs	r3, #15
    4a94:	18fb      	adds	r3, r7, r3
    4a96:	781b      	ldrb	r3, [r3, #0]
    4a98:	2204      	movs	r2, #4
    4a9a:	4013      	ands	r3, r2
    4a9c:	d015      	beq.n	4aca <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4a9e:	697b      	ldr	r3, [r7, #20]
    4aa0:	695b      	ldr	r3, [r3, #20]
    4aa2:	697a      	ldr	r2, [r7, #20]
    4aa4:	0010      	movs	r0, r2
    4aa6:	4798      	blx	r3
    4aa8:	e00f      	b.n	4aca <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    4aaa:	697b      	ldr	r3, [r7, #20]
    4aac:	7a5b      	ldrb	r3, [r3, #9]
    4aae:	b2db      	uxtb	r3, r3
    4ab0:	2b00      	cmp	r3, #0
    4ab2:	d10a      	bne.n	4aca <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4ab4:	230f      	movs	r3, #15
    4ab6:	18fb      	adds	r3, r7, r3
    4ab8:	781b      	ldrb	r3, [r3, #0]
    4aba:	2202      	movs	r2, #2
    4abc:	4013      	ands	r3, r2
    4abe:	d004      	beq.n	4aca <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4ac0:	697b      	ldr	r3, [r7, #20]
    4ac2:	691b      	ldr	r3, [r3, #16]
    4ac4:	697a      	ldr	r2, [r7, #20]
    4ac6:	0010      	movs	r0, r2
    4ac8:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4aca:	230c      	movs	r3, #12
    4acc:	18fb      	adds	r3, r7, r3
    4ace:	881b      	ldrh	r3, [r3, #0]
    4ad0:	2202      	movs	r2, #2
    4ad2:	4013      	ands	r3, r2
    4ad4:	d024      	beq.n	4b20 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4ad6:	697b      	ldr	r3, [r7, #20]
    4ad8:	795b      	ldrb	r3, [r3, #5]
    4ada:	2b01      	cmp	r3, #1
    4adc:	d120      	bne.n	4b20 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4ade:	697b      	ldr	r3, [r7, #20]
    4ae0:	7a5b      	ldrb	r3, [r3, #9]
    4ae2:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4ae4:	2b01      	cmp	r3, #1
    4ae6:	d11b      	bne.n	4b20 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4ae8:	697b      	ldr	r3, [r7, #20]
    4aea:	79db      	ldrb	r3, [r3, #7]
    4aec:	2201      	movs	r2, #1
    4aee:	4053      	eors	r3, r2
    4af0:	b2db      	uxtb	r3, r3
    4af2:	2b00      	cmp	r3, #0
    4af4:	d014      	beq.n	4b20 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4af6:	693b      	ldr	r3, [r7, #16]
    4af8:	2202      	movs	r2, #2
    4afa:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    4afc:	697b      	ldr	r3, [r7, #20]
    4afe:	2203      	movs	r2, #3
    4b00:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    4b02:	697b      	ldr	r3, [r7, #20]
    4b04:	2238      	movs	r2, #56	; 0x38
    4b06:	2100      	movs	r1, #0
    4b08:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4b0a:	230f      	movs	r3, #15
    4b0c:	18fb      	adds	r3, r7, r3
    4b0e:	781b      	ldrb	r3, [r3, #0]
    4b10:	2201      	movs	r2, #1
    4b12:	4013      	ands	r3, r2
    4b14:	d004      	beq.n	4b20 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4b16:	697b      	ldr	r3, [r7, #20]
    4b18:	68db      	ldr	r3, [r3, #12]
    4b1a:	697a      	ldr	r2, [r7, #20]
    4b1c:	0010      	movs	r0, r2
    4b1e:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4b20:	230c      	movs	r3, #12
    4b22:	18fb      	adds	r3, r7, r3
    4b24:	881b      	ldrh	r3, [r3, #0]
    4b26:	2280      	movs	r2, #128	; 0x80
    4b28:	4013      	ands	r3, r2
    4b2a:	d010      	beq.n	4b4e <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4b2c:	693b      	ldr	r3, [r7, #16]
    4b2e:	2280      	movs	r2, #128	; 0x80
    4b30:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4b32:	693b      	ldr	r3, [r7, #16]
    4b34:	2280      	movs	r2, #128	; 0x80
    4b36:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4b38:	230f      	movs	r3, #15
    4b3a:	18fb      	adds	r3, r7, r3
    4b3c:	781b      	ldrb	r3, [r3, #0]
    4b3e:	2240      	movs	r2, #64	; 0x40
    4b40:	4013      	ands	r3, r2
    4b42:	d004      	beq.n	4b4e <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4b44:	697b      	ldr	r3, [r7, #20]
    4b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4b48:	697a      	ldr	r2, [r7, #20]
    4b4a:	0010      	movs	r0, r2
    4b4c:	4798      	blx	r3
		}
	}
#  endif
}
    4b4e:	46c0      	nop			; (mov r8, r8)
    4b50:	46bd      	mov	sp, r7
    4b52:	b006      	add	sp, #24
    4b54:	bd80      	pop	{r7, pc}
    4b56:	46c0      	nop			; (mov r8, r8)
    4b58:	200009d4 	.word	0x200009d4
    4b5c:	00004811 	.word	0x00004811
    4b60:	00004795 	.word	0x00004795
    4b64:	00004845 	.word	0x00004845
    4b68:	0000487b 	.word	0x0000487b

00004b6c <system_gclk_chan_get_config_defaults>:
{
    4b6c:	b580      	push	{r7, lr}
    4b6e:	b082      	sub	sp, #8
    4b70:	af00      	add	r7, sp, #0
    4b72:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4b74:	687b      	ldr	r3, [r7, #4]
    4b76:	2200      	movs	r2, #0
    4b78:	701a      	strb	r2, [r3, #0]
}
    4b7a:	46c0      	nop			; (mov r8, r8)
    4b7c:	46bd      	mov	sp, r7
    4b7e:	b002      	add	sp, #8
    4b80:	bd80      	pop	{r7, pc}
	...

00004b84 <system_apb_clock_set_mask>:
{
    4b84:	b580      	push	{r7, lr}
    4b86:	b082      	sub	sp, #8
    4b88:	af00      	add	r7, sp, #0
    4b8a:	0002      	movs	r2, r0
    4b8c:	6039      	str	r1, [r7, #0]
    4b8e:	1dfb      	adds	r3, r7, #7
    4b90:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4b92:	1dfb      	adds	r3, r7, #7
    4b94:	781b      	ldrb	r3, [r3, #0]
    4b96:	2b01      	cmp	r3, #1
    4b98:	d00a      	beq.n	4bb0 <system_apb_clock_set_mask+0x2c>
    4b9a:	2b02      	cmp	r3, #2
    4b9c:	d00f      	beq.n	4bbe <system_apb_clock_set_mask+0x3a>
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	d114      	bne.n	4bcc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4ba2:	4b0e      	ldr	r3, [pc, #56]	; (4bdc <system_apb_clock_set_mask+0x58>)
    4ba4:	4a0d      	ldr	r2, [pc, #52]	; (4bdc <system_apb_clock_set_mask+0x58>)
    4ba6:	6991      	ldr	r1, [r2, #24]
    4ba8:	683a      	ldr	r2, [r7, #0]
    4baa:	430a      	orrs	r2, r1
    4bac:	619a      	str	r2, [r3, #24]
			break;
    4bae:	e00f      	b.n	4bd0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4bb0:	4b0a      	ldr	r3, [pc, #40]	; (4bdc <system_apb_clock_set_mask+0x58>)
    4bb2:	4a0a      	ldr	r2, [pc, #40]	; (4bdc <system_apb_clock_set_mask+0x58>)
    4bb4:	69d1      	ldr	r1, [r2, #28]
    4bb6:	683a      	ldr	r2, [r7, #0]
    4bb8:	430a      	orrs	r2, r1
    4bba:	61da      	str	r2, [r3, #28]
			break;
    4bbc:	e008      	b.n	4bd0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4bbe:	4b07      	ldr	r3, [pc, #28]	; (4bdc <system_apb_clock_set_mask+0x58>)
    4bc0:	4a06      	ldr	r2, [pc, #24]	; (4bdc <system_apb_clock_set_mask+0x58>)
    4bc2:	6a11      	ldr	r1, [r2, #32]
    4bc4:	683a      	ldr	r2, [r7, #0]
    4bc6:	430a      	orrs	r2, r1
    4bc8:	621a      	str	r2, [r3, #32]
			break;
    4bca:	e001      	b.n	4bd0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4bcc:	2317      	movs	r3, #23
    4bce:	e000      	b.n	4bd2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4bd0:	2300      	movs	r3, #0
}
    4bd2:	0018      	movs	r0, r3
    4bd4:	46bd      	mov	sp, r7
    4bd6:	b002      	add	sp, #8
    4bd8:	bd80      	pop	{r7, pc}
    4bda:	46c0      	nop			; (mov r8, r8)
    4bdc:	40000400 	.word	0x40000400

00004be0 <system_pinmux_get_config_defaults>:
{
    4be0:	b580      	push	{r7, lr}
    4be2:	b082      	sub	sp, #8
    4be4:	af00      	add	r7, sp, #0
    4be6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4be8:	687b      	ldr	r3, [r7, #4]
    4bea:	2280      	movs	r2, #128	; 0x80
    4bec:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4bee:	687b      	ldr	r3, [r7, #4]
    4bf0:	2200      	movs	r2, #0
    4bf2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4bf4:	687b      	ldr	r3, [r7, #4]
    4bf6:	2201      	movs	r2, #1
    4bf8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4bfa:	687b      	ldr	r3, [r7, #4]
    4bfc:	2200      	movs	r2, #0
    4bfe:	70da      	strb	r2, [r3, #3]
}
    4c00:	46c0      	nop			; (mov r8, r8)
    4c02:	46bd      	mov	sp, r7
    4c04:	b002      	add	sp, #8
    4c06:	bd80      	pop	{r7, pc}

00004c08 <system_is_debugger_present>:
{
    4c08:	b580      	push	{r7, lr}
    4c0a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4c0c:	4b05      	ldr	r3, [pc, #20]	; (4c24 <system_is_debugger_present+0x1c>)
    4c0e:	789b      	ldrb	r3, [r3, #2]
    4c10:	b2db      	uxtb	r3, r3
    4c12:	001a      	movs	r2, r3
    4c14:	2302      	movs	r3, #2
    4c16:	4013      	ands	r3, r2
    4c18:	1e5a      	subs	r2, r3, #1
    4c1a:	4193      	sbcs	r3, r2
    4c1c:	b2db      	uxtb	r3, r3
}
    4c1e:	0018      	movs	r0, r3
    4c20:	46bd      	mov	sp, r7
    4c22:	bd80      	pop	{r7, pc}
    4c24:	41002000 	.word	0x41002000

00004c28 <usart_is_syncing>:
{
    4c28:	b580      	push	{r7, lr}
    4c2a:	b084      	sub	sp, #16
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4c30:	687b      	ldr	r3, [r7, #4]
    4c32:	681b      	ldr	r3, [r3, #0]
    4c34:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    4c36:	68fb      	ldr	r3, [r7, #12]
    4c38:	69db      	ldr	r3, [r3, #28]
    4c3a:	1e5a      	subs	r2, r3, #1
    4c3c:	4193      	sbcs	r3, r2
    4c3e:	b2db      	uxtb	r3, r3
}
    4c40:	0018      	movs	r0, r3
    4c42:	46bd      	mov	sp, r7
    4c44:	b004      	add	sp, #16
    4c46:	bd80      	pop	{r7, pc}

00004c48 <_usart_wait_for_sync>:
{
    4c48:	b580      	push	{r7, lr}
    4c4a:	b082      	sub	sp, #8
    4c4c:	af00      	add	r7, sp, #0
    4c4e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    4c50:	46c0      	nop			; (mov r8, r8)
    4c52:	687b      	ldr	r3, [r7, #4]
    4c54:	0018      	movs	r0, r3
    4c56:	4b04      	ldr	r3, [pc, #16]	; (4c68 <_usart_wait_for_sync+0x20>)
    4c58:	4798      	blx	r3
    4c5a:	1e03      	subs	r3, r0, #0
    4c5c:	d1f9      	bne.n	4c52 <_usart_wait_for_sync+0xa>
}
    4c5e:	46c0      	nop			; (mov r8, r8)
    4c60:	46bd      	mov	sp, r7
    4c62:	b002      	add	sp, #8
    4c64:	bd80      	pop	{r7, pc}
    4c66:	46c0      	nop			; (mov r8, r8)
    4c68:	00004c29 	.word	0x00004c29

00004c6c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    4c6c:	b5b0      	push	{r4, r5, r7, lr}
    4c6e:	b08c      	sub	sp, #48	; 0x30
    4c70:	af02      	add	r7, sp, #8
    4c72:	6078      	str	r0, [r7, #4]
    4c74:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4c76:	687b      	ldr	r3, [r7, #4]
    4c78:	681b      	ldr	r3, [r3, #0]
    4c7a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	681b      	ldr	r3, [r3, #0]
    4c80:	0018      	movs	r0, r3
    4c82:	4bab      	ldr	r3, [pc, #684]	; (4f30 <_usart_set_config+0x2c4>)
    4c84:	4798      	blx	r3
    4c86:	0003      	movs	r3, r0
    4c88:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4c8a:	697b      	ldr	r3, [r7, #20]
    4c8c:	3314      	adds	r3, #20
    4c8e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    4c90:	2300      	movs	r3, #0
    4c92:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    4c94:	2300      	movs	r3, #0
    4c96:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    4c98:	230a      	movs	r3, #10
    4c9a:	18fb      	adds	r3, r7, r3
    4c9c:	2200      	movs	r2, #0
    4c9e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4ca0:	231f      	movs	r3, #31
    4ca2:	18fb      	adds	r3, r7, r3
    4ca4:	2200      	movs	r2, #0
    4ca6:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4ca8:	231e      	movs	r3, #30
    4caa:	18fb      	adds	r3, r7, r3
    4cac:	2210      	movs	r2, #16
    4cae:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    4cb0:	683b      	ldr	r3, [r7, #0]
    4cb2:	8a1b      	ldrh	r3, [r3, #16]
    4cb4:	2280      	movs	r2, #128	; 0x80
    4cb6:	01d2      	lsls	r2, r2, #7
    4cb8:	4293      	cmp	r3, r2
    4cba:	d01c      	beq.n	4cf6 <_usart_set_config+0x8a>
    4cbc:	2280      	movs	r2, #128	; 0x80
    4cbe:	01d2      	lsls	r2, r2, #7
    4cc0:	4293      	cmp	r3, r2
    4cc2:	dc06      	bgt.n	4cd2 <_usart_set_config+0x66>
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d00d      	beq.n	4ce4 <_usart_set_config+0x78>
    4cc8:	2280      	movs	r2, #128	; 0x80
    4cca:	0192      	lsls	r2, r2, #6
    4ccc:	4293      	cmp	r3, r2
    4cce:	d024      	beq.n	4d1a <_usart_set_config+0xae>
    4cd0:	e035      	b.n	4d3e <_usart_set_config+0xd2>
    4cd2:	22c0      	movs	r2, #192	; 0xc0
    4cd4:	01d2      	lsls	r2, r2, #7
    4cd6:	4293      	cmp	r3, r2
    4cd8:	d028      	beq.n	4d2c <_usart_set_config+0xc0>
    4cda:	2280      	movs	r2, #128	; 0x80
    4cdc:	0212      	lsls	r2, r2, #8
    4cde:	4293      	cmp	r3, r2
    4ce0:	d012      	beq.n	4d08 <_usart_set_config+0x9c>
    4ce2:	e02c      	b.n	4d3e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4ce4:	231f      	movs	r3, #31
    4ce6:	18fb      	adds	r3, r7, r3
    4ce8:	2200      	movs	r2, #0
    4cea:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4cec:	231e      	movs	r3, #30
    4cee:	18fb      	adds	r3, r7, r3
    4cf0:	2210      	movs	r2, #16
    4cf2:	701a      	strb	r2, [r3, #0]
			break;
    4cf4:	e023      	b.n	4d3e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4cf6:	231f      	movs	r3, #31
    4cf8:	18fb      	adds	r3, r7, r3
    4cfa:	2200      	movs	r2, #0
    4cfc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4cfe:	231e      	movs	r3, #30
    4d00:	18fb      	adds	r3, r7, r3
    4d02:	2208      	movs	r2, #8
    4d04:	701a      	strb	r2, [r3, #0]
			break;
    4d06:	e01a      	b.n	4d3e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4d08:	231f      	movs	r3, #31
    4d0a:	18fb      	adds	r3, r7, r3
    4d0c:	2200      	movs	r2, #0
    4d0e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4d10:	231e      	movs	r3, #30
    4d12:	18fb      	adds	r3, r7, r3
    4d14:	2203      	movs	r2, #3
    4d16:	701a      	strb	r2, [r3, #0]
			break;
    4d18:	e011      	b.n	4d3e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4d1a:	231f      	movs	r3, #31
    4d1c:	18fb      	adds	r3, r7, r3
    4d1e:	2201      	movs	r2, #1
    4d20:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4d22:	231e      	movs	r3, #30
    4d24:	18fb      	adds	r3, r7, r3
    4d26:	2210      	movs	r2, #16
    4d28:	701a      	strb	r2, [r3, #0]
			break;
    4d2a:	e008      	b.n	4d3e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4d2c:	231f      	movs	r3, #31
    4d2e:	18fb      	adds	r3, r7, r3
    4d30:	2201      	movs	r2, #1
    4d32:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4d34:	231e      	movs	r3, #30
    4d36:	18fb      	adds	r3, r7, r3
    4d38:	2208      	movs	r2, #8
    4d3a:	701a      	strb	r2, [r3, #0]
			break;
    4d3c:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4d3e:	683b      	ldr	r3, [r7, #0]
    4d40:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    4d42:	683b      	ldr	r3, [r7, #0]
    4d44:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    4d46:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4d48:	683b      	ldr	r3, [r7, #0]
    4d4a:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    4d4c:	4313      	orrs	r3, r2
		config->sample_rate |
    4d4e:	683a      	ldr	r2, [r7, #0]
    4d50:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    4d52:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4d54:	683a      	ldr	r2, [r7, #0]
    4d56:	7e12      	ldrb	r2, [r2, #24]
    4d58:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    4d5a:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4d5c:	683a      	ldr	r2, [r7, #0]
    4d5e:	2126      	movs	r1, #38	; 0x26
    4d60:	5c52      	ldrb	r2, [r2, r1]
    4d62:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    4d64:	4313      	orrs	r3, r2
    4d66:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    4d68:	231d      	movs	r3, #29
    4d6a:	18fb      	adds	r3, r7, r3
    4d6c:	2200      	movs	r2, #0
    4d6e:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    4d70:	683b      	ldr	r3, [r7, #0]
    4d72:	685b      	ldr	r3, [r3, #4]
    4d74:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    4d76:	68fb      	ldr	r3, [r7, #12]
    4d78:	2b00      	cmp	r3, #0
    4d7a:	d01e      	beq.n	4dba <_usart_set_config+0x14e>
    4d7c:	2280      	movs	r2, #128	; 0x80
    4d7e:	0552      	lsls	r2, r2, #21
    4d80:	4293      	cmp	r3, r2
    4d82:	d14f      	bne.n	4e24 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    4d84:	683b      	ldr	r3, [r7, #0]
    4d86:	2227      	movs	r2, #39	; 0x27
    4d88:	5c9b      	ldrb	r3, [r3, r2]
    4d8a:	2201      	movs	r2, #1
    4d8c:	4053      	eors	r3, r2
    4d8e:	b2db      	uxtb	r3, r3
    4d90:	2b00      	cmp	r3, #0
    4d92:	d046      	beq.n	4e22 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4d94:	683b      	ldr	r3, [r7, #0]
    4d96:	6a1d      	ldr	r5, [r3, #32]
    4d98:	693b      	ldr	r3, [r7, #16]
    4d9a:	b2db      	uxtb	r3, r3
    4d9c:	0018      	movs	r0, r3
    4d9e:	4b65      	ldr	r3, [pc, #404]	; (4f34 <_usart_set_config+0x2c8>)
    4da0:	4798      	blx	r3
    4da2:	0001      	movs	r1, r0
    4da4:	231d      	movs	r3, #29
    4da6:	18fc      	adds	r4, r7, r3
    4da8:	230a      	movs	r3, #10
    4daa:	18fb      	adds	r3, r7, r3
    4dac:	001a      	movs	r2, r3
    4dae:	0028      	movs	r0, r5
    4db0:	4b61      	ldr	r3, [pc, #388]	; (4f38 <_usart_set_config+0x2cc>)
    4db2:	4798      	blx	r3
    4db4:	0003      	movs	r3, r0
    4db6:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    4db8:	e033      	b.n	4e22 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    4dba:	683b      	ldr	r3, [r7, #0]
    4dbc:	2227      	movs	r2, #39	; 0x27
    4dbe:	5c9b      	ldrb	r3, [r3, r2]
    4dc0:	2b00      	cmp	r3, #0
    4dc2:	d014      	beq.n	4dee <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4dc4:	683b      	ldr	r3, [r7, #0]
    4dc6:	6a18      	ldr	r0, [r3, #32]
    4dc8:	683b      	ldr	r3, [r7, #0]
    4dca:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    4dcc:	231d      	movs	r3, #29
    4dce:	18fc      	adds	r4, r7, r3
    4dd0:	231f      	movs	r3, #31
    4dd2:	18fb      	adds	r3, r7, r3
    4dd4:	781d      	ldrb	r5, [r3, #0]
    4dd6:	230a      	movs	r3, #10
    4dd8:	18fa      	adds	r2, r7, r3
    4dda:	231e      	movs	r3, #30
    4ddc:	18fb      	adds	r3, r7, r3
    4dde:	781b      	ldrb	r3, [r3, #0]
    4de0:	9300      	str	r3, [sp, #0]
    4de2:	002b      	movs	r3, r5
    4de4:	4d55      	ldr	r5, [pc, #340]	; (4f3c <_usart_set_config+0x2d0>)
    4de6:	47a8      	blx	r5
    4de8:	0003      	movs	r3, r0
    4dea:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4dec:	e01a      	b.n	4e24 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    4dee:	683b      	ldr	r3, [r7, #0]
    4df0:	6a1d      	ldr	r5, [r3, #32]
    4df2:	693b      	ldr	r3, [r7, #16]
    4df4:	b2db      	uxtb	r3, r3
    4df6:	0018      	movs	r0, r3
    4df8:	4b4e      	ldr	r3, [pc, #312]	; (4f34 <_usart_set_config+0x2c8>)
    4dfa:	4798      	blx	r3
				status_code =
    4dfc:	231d      	movs	r3, #29
    4dfe:	18fc      	adds	r4, r7, r3
    4e00:	231f      	movs	r3, #31
    4e02:	18fb      	adds	r3, r7, r3
    4e04:	7819      	ldrb	r1, [r3, #0]
    4e06:	230a      	movs	r3, #10
    4e08:	18fa      	adds	r2, r7, r3
    4e0a:	231e      	movs	r3, #30
    4e0c:	18fb      	adds	r3, r7, r3
    4e0e:	781b      	ldrb	r3, [r3, #0]
    4e10:	9300      	str	r3, [sp, #0]
    4e12:	000b      	movs	r3, r1
    4e14:	0001      	movs	r1, r0
    4e16:	0028      	movs	r0, r5
    4e18:	4d48      	ldr	r5, [pc, #288]	; (4f3c <_usart_set_config+0x2d0>)
    4e1a:	47a8      	blx	r5
    4e1c:	0003      	movs	r3, r0
    4e1e:	7023      	strb	r3, [r4, #0]
			break;
    4e20:	e000      	b.n	4e24 <_usart_set_config+0x1b8>
			break;
    4e22:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    4e24:	231d      	movs	r3, #29
    4e26:	18fb      	adds	r3, r7, r3
    4e28:	781b      	ldrb	r3, [r3, #0]
    4e2a:	2b00      	cmp	r3, #0
    4e2c:	d003      	beq.n	4e36 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    4e2e:	231d      	movs	r3, #29
    4e30:	18fb      	adds	r3, r7, r3
    4e32:	781b      	ldrb	r3, [r3, #0]
    4e34:	e077      	b.n	4f26 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    4e36:	683b      	ldr	r3, [r7, #0]
    4e38:	7e5b      	ldrb	r3, [r3, #25]
    4e3a:	2b00      	cmp	r3, #0
    4e3c:	d003      	beq.n	4e46 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4e3e:	683b      	ldr	r3, [r7, #0]
    4e40:	7e9a      	ldrb	r2, [r3, #26]
    4e42:	69bb      	ldr	r3, [r7, #24]
    4e44:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	0018      	movs	r0, r3
    4e4a:	4b3d      	ldr	r3, [pc, #244]	; (4f40 <_usart_set_config+0x2d4>)
    4e4c:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4e4e:	230a      	movs	r3, #10
    4e50:	18fb      	adds	r3, r7, r3
    4e52:	881a      	ldrh	r2, [r3, #0]
    4e54:	69bb      	ldr	r3, [r7, #24]
    4e56:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    4e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4e5a:	68fb      	ldr	r3, [r7, #12]
    4e5c:	4313      	orrs	r3, r2
    4e5e:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    4e60:	683b      	ldr	r3, [r7, #0]
    4e62:	2227      	movs	r2, #39	; 0x27
    4e64:	5c9b      	ldrb	r3, [r3, r2]
    4e66:	2201      	movs	r2, #1
    4e68:	4053      	eors	r3, r2
    4e6a:	b2db      	uxtb	r3, r3
    4e6c:	2b00      	cmp	r3, #0
    4e6e:	d003      	beq.n	4e78 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4e72:	2204      	movs	r2, #4
    4e74:	4313      	orrs	r3, r2
    4e76:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4e78:	683b      	ldr	r3, [r7, #0]
    4e7a:	7e5b      	ldrb	r3, [r3, #25]
    4e7c:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4e7e:	683b      	ldr	r3, [r7, #0]
    4e80:	7f1b      	ldrb	r3, [r3, #28]
    4e82:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4e84:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4e86:	683b      	ldr	r3, [r7, #0]
    4e88:	7f5b      	ldrb	r3, [r3, #29]
    4e8a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4e8c:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4e8e:	683b      	ldr	r3, [r7, #0]
    4e90:	2124      	movs	r1, #36	; 0x24
    4e92:	5c5b      	ldrb	r3, [r3, r1]
    4e94:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4e96:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4e98:	683b      	ldr	r3, [r7, #0]
    4e9a:	2125      	movs	r1, #37	; 0x25
    4e9c:	5c5b      	ldrb	r3, [r3, r1]
    4e9e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4ea0:	4313      	orrs	r3, r2
	ctrlb =  
    4ea2:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    4ea4:	683b      	ldr	r3, [r7, #0]
    4ea6:	7a9b      	ldrb	r3, [r3, #10]
    4ea8:	001a      	movs	r2, r3
    4eaa:	6a3b      	ldr	r3, [r7, #32]
    4eac:	4313      	orrs	r3, r2
    4eae:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    4eb0:	683b      	ldr	r3, [r7, #0]
    4eb2:	7adb      	ldrb	r3, [r3, #11]
    4eb4:	001a      	movs	r2, r3
    4eb6:	6a3b      	ldr	r3, [r7, #32]
    4eb8:	4313      	orrs	r3, r2
    4eba:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    4ebc:	683b      	ldr	r3, [r7, #0]
    4ebe:	891b      	ldrh	r3, [r3, #8]
    4ec0:	2bff      	cmp	r3, #255	; 0xff
    4ec2:	d00b      	beq.n	4edc <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ec6:	2280      	movs	r2, #128	; 0x80
    4ec8:	0452      	lsls	r2, r2, #17
    4eca:	4313      	orrs	r3, r2
    4ecc:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    4ece:	683b      	ldr	r3, [r7, #0]
    4ed0:	891b      	ldrh	r3, [r3, #8]
    4ed2:	001a      	movs	r2, r3
    4ed4:	6a3b      	ldr	r3, [r7, #32]
    4ed6:	4313      	orrs	r3, r2
    4ed8:	623b      	str	r3, [r7, #32]
    4eda:	e008      	b.n	4eee <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    4edc:	683b      	ldr	r3, [r7, #0]
    4ede:	7edb      	ldrb	r3, [r3, #27]
    4ee0:	2b00      	cmp	r3, #0
    4ee2:	d004      	beq.n	4eee <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ee6:	2280      	movs	r2, #128	; 0x80
    4ee8:	04d2      	lsls	r2, r2, #19
    4eea:	4313      	orrs	r3, r2
    4eec:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4eee:	683b      	ldr	r3, [r7, #0]
    4ef0:	222c      	movs	r2, #44	; 0x2c
    4ef2:	5c9b      	ldrb	r3, [r3, r2]
    4ef4:	2b00      	cmp	r3, #0
    4ef6:	d103      	bne.n	4f00 <_usart_set_config+0x294>
    4ef8:	4b12      	ldr	r3, [pc, #72]	; (4f44 <_usart_set_config+0x2d8>)
    4efa:	4798      	blx	r3
    4efc:	1e03      	subs	r3, r0, #0
    4efe:	d003      	beq.n	4f08 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4f02:	2280      	movs	r2, #128	; 0x80
    4f04:	4313      	orrs	r3, r2
    4f06:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4f08:	687b      	ldr	r3, [r7, #4]
    4f0a:	0018      	movs	r0, r3
    4f0c:	4b0c      	ldr	r3, [pc, #48]	; (4f40 <_usart_set_config+0x2d4>)
    4f0e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    4f10:	69bb      	ldr	r3, [r7, #24]
    4f12:	6a3a      	ldr	r2, [r7, #32]
    4f14:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4f16:	687b      	ldr	r3, [r7, #4]
    4f18:	0018      	movs	r0, r3
    4f1a:	4b09      	ldr	r3, [pc, #36]	; (4f40 <_usart_set_config+0x2d4>)
    4f1c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    4f1e:	69bb      	ldr	r3, [r7, #24]
    4f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4f22:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    4f24:	2300      	movs	r3, #0
}
    4f26:	0018      	movs	r0, r3
    4f28:	46bd      	mov	sp, r7
    4f2a:	b00a      	add	sp, #40	; 0x28
    4f2c:	bdb0      	pop	{r4, r5, r7, pc}
    4f2e:	46c0      	nop			; (mov r8, r8)
    4f30:	000039d5 	.word	0x000039d5
    4f34:	0000660d 	.word	0x0000660d
    4f38:	0000354f 	.word	0x0000354f
    4f3c:	000035cd 	.word	0x000035cd
    4f40:	00004c49 	.word	0x00004c49
    4f44:	00004c09 	.word	0x00004c09

00004f48 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4f48:	b590      	push	{r4, r7, lr}
    4f4a:	b093      	sub	sp, #76	; 0x4c
    4f4c:	af00      	add	r7, sp, #0
    4f4e:	60f8      	str	r0, [r7, #12]
    4f50:	60b9      	str	r1, [r7, #8]
    4f52:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    4f54:	233b      	movs	r3, #59	; 0x3b
    4f56:	18fb      	adds	r3, r7, r3
    4f58:	2200      	movs	r2, #0
    4f5a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4f5c:	68fb      	ldr	r3, [r7, #12]
    4f5e:	68ba      	ldr	r2, [r7, #8]
    4f60:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4f62:	68fb      	ldr	r3, [r7, #12]
    4f64:	681b      	ldr	r3, [r3, #0]
    4f66:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4f68:	68fb      	ldr	r3, [r7, #12]
    4f6a:	681b      	ldr	r3, [r3, #0]
    4f6c:	0018      	movs	r0, r3
    4f6e:	4b86      	ldr	r3, [pc, #536]	; (5188 <usart_init+0x240>)
    4f70:	4798      	blx	r3
    4f72:	0003      	movs	r3, r0
    4f74:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4f78:	3302      	adds	r3, #2
    4f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4f7e:	3314      	adds	r3, #20
    4f80:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f84:	681b      	ldr	r3, [r3, #0]
    4f86:	2201      	movs	r2, #1
    4f88:	4013      	ands	r3, r2
    4f8a:	d001      	beq.n	4f90 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4f8c:	2305      	movs	r3, #5
    4f8e:	e0f6      	b.n	517e <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f92:	681b      	ldr	r3, [r3, #0]
    4f94:	2202      	movs	r2, #2
    4f96:	4013      	ands	r3, r2
    4f98:	d001      	beq.n	4f9e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    4f9a:	231c      	movs	r3, #28
    4f9c:	e0ef      	b.n	517e <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4f9e:	2201      	movs	r2, #1
    4fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4fa2:	409a      	lsls	r2, r3
    4fa4:	0013      	movs	r3, r2
    4fa6:	0019      	movs	r1, r3
    4fa8:	2002      	movs	r0, #2
    4faa:	4b78      	ldr	r3, [pc, #480]	; (518c <usart_init+0x244>)
    4fac:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4fae:	2324      	movs	r3, #36	; 0x24
    4fb0:	18fb      	adds	r3, r7, r3
    4fb2:	0018      	movs	r0, r3
    4fb4:	4b76      	ldr	r3, [pc, #472]	; (5190 <usart_init+0x248>)
    4fb6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4fb8:	687b      	ldr	r3, [r7, #4]
    4fba:	222d      	movs	r2, #45	; 0x2d
    4fbc:	5c9a      	ldrb	r2, [r3, r2]
    4fbe:	2324      	movs	r3, #36	; 0x24
    4fc0:	18fb      	adds	r3, r7, r3
    4fc2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4fc6:	b2db      	uxtb	r3, r3
    4fc8:	2224      	movs	r2, #36	; 0x24
    4fca:	18ba      	adds	r2, r7, r2
    4fcc:	0011      	movs	r1, r2
    4fce:	0018      	movs	r0, r3
    4fd0:	4b70      	ldr	r3, [pc, #448]	; (5194 <usart_init+0x24c>)
    4fd2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4fd6:	b2db      	uxtb	r3, r3
    4fd8:	0018      	movs	r0, r3
    4fda:	4b6f      	ldr	r3, [pc, #444]	; (5198 <usart_init+0x250>)
    4fdc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4fde:	687b      	ldr	r3, [r7, #4]
    4fe0:	222d      	movs	r2, #45	; 0x2d
    4fe2:	5c9b      	ldrb	r3, [r3, r2]
    4fe4:	2100      	movs	r1, #0
    4fe6:	0018      	movs	r0, r3
    4fe8:	4b6c      	ldr	r3, [pc, #432]	; (519c <usart_init+0x254>)
    4fea:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    4fec:	687b      	ldr	r3, [r7, #4]
    4fee:	7ada      	ldrb	r2, [r3, #11]
    4ff0:	68fb      	ldr	r3, [r7, #12]
    4ff2:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	2224      	movs	r2, #36	; 0x24
    4ff8:	5c9a      	ldrb	r2, [r3, r2]
    4ffa:	68fb      	ldr	r3, [r7, #12]
    4ffc:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4ffe:	687b      	ldr	r3, [r7, #4]
    5000:	2225      	movs	r2, #37	; 0x25
    5002:	5c9a      	ldrb	r2, [r3, r2]
    5004:	68fb      	ldr	r3, [r7, #12]
    5006:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    5008:	687b      	ldr	r3, [r7, #4]
    500a:	7eda      	ldrb	r2, [r3, #27]
    500c:	68fb      	ldr	r3, [r7, #12]
    500e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5010:	687b      	ldr	r3, [r7, #4]
    5012:	7f1a      	ldrb	r2, [r3, #28]
    5014:	68fb      	ldr	r3, [r7, #12]
    5016:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    5018:	233b      	movs	r3, #59	; 0x3b
    501a:	18fc      	adds	r4, r7, r3
    501c:	687a      	ldr	r2, [r7, #4]
    501e:	68fb      	ldr	r3, [r7, #12]
    5020:	0011      	movs	r1, r2
    5022:	0018      	movs	r0, r3
    5024:	4b5e      	ldr	r3, [pc, #376]	; (51a0 <usart_init+0x258>)
    5026:	4798      	blx	r3
    5028:	0003      	movs	r3, r0
    502a:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    502c:	233b      	movs	r3, #59	; 0x3b
    502e:	18fb      	adds	r3, r7, r3
    5030:	781b      	ldrb	r3, [r3, #0]
    5032:	2b00      	cmp	r3, #0
    5034:	d003      	beq.n	503e <usart_init+0xf6>
		return status_code;
    5036:	233b      	movs	r3, #59	; 0x3b
    5038:	18fb      	adds	r3, r7, r3
    503a:	781b      	ldrb	r3, [r3, #0]
    503c:	e09f      	b.n	517e <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    503e:	2320      	movs	r3, #32
    5040:	18fb      	adds	r3, r7, r3
    5042:	0018      	movs	r0, r3
    5044:	4b57      	ldr	r3, [pc, #348]	; (51a4 <usart_init+0x25c>)
    5046:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5048:	2320      	movs	r3, #32
    504a:	18fb      	adds	r3, r7, r3
    504c:	2200      	movs	r2, #0
    504e:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5050:	2320      	movs	r3, #32
    5052:	18fb      	adds	r3, r7, r3
    5054:	2200      	movs	r2, #0
    5056:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    5058:	687b      	ldr	r3, [r7, #4]
    505a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    505c:	2310      	movs	r3, #16
    505e:	18fb      	adds	r3, r7, r3
    5060:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    5062:	687b      	ldr	r3, [r7, #4]
    5064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    5066:	2310      	movs	r3, #16
    5068:	18fb      	adds	r3, r7, r3
    506a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    506c:	687b      	ldr	r3, [r7, #4]
    506e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    5070:	2310      	movs	r3, #16
    5072:	18fb      	adds	r3, r7, r3
    5074:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    5076:	687b      	ldr	r3, [r7, #4]
    5078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    507a:	2310      	movs	r3, #16
    507c:	18fb      	adds	r3, r7, r3
    507e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5080:	2347      	movs	r3, #71	; 0x47
    5082:	18fb      	adds	r3, r7, r3
    5084:	2200      	movs	r2, #0
    5086:	701a      	strb	r2, [r3, #0]
    5088:	e02c      	b.n	50e4 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    508a:	2347      	movs	r3, #71	; 0x47
    508c:	18fb      	adds	r3, r7, r3
    508e:	781a      	ldrb	r2, [r3, #0]
    5090:	2310      	movs	r3, #16
    5092:	18fb      	adds	r3, r7, r3
    5094:	0092      	lsls	r2, r2, #2
    5096:	58d3      	ldr	r3, [r2, r3]
    5098:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    509a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    509c:	2b00      	cmp	r3, #0
    509e:	d109      	bne.n	50b4 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    50a0:	2347      	movs	r3, #71	; 0x47
    50a2:	18fb      	adds	r3, r7, r3
    50a4:	781a      	ldrb	r2, [r3, #0]
    50a6:	68bb      	ldr	r3, [r7, #8]
    50a8:	0011      	movs	r1, r2
    50aa:	0018      	movs	r0, r3
    50ac:	4b3e      	ldr	r3, [pc, #248]	; (51a8 <usart_init+0x260>)
    50ae:	4798      	blx	r3
    50b0:	0003      	movs	r3, r0
    50b2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    50b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    50b6:	3301      	adds	r3, #1
    50b8:	d00d      	beq.n	50d6 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    50ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    50bc:	b2da      	uxtb	r2, r3
    50be:	2320      	movs	r3, #32
    50c0:	18fb      	adds	r3, r7, r3
    50c2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    50c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    50c6:	0c1b      	lsrs	r3, r3, #16
    50c8:	b2db      	uxtb	r3, r3
    50ca:	2220      	movs	r2, #32
    50cc:	18ba      	adds	r2, r7, r2
    50ce:	0011      	movs	r1, r2
    50d0:	0018      	movs	r0, r3
    50d2:	4b36      	ldr	r3, [pc, #216]	; (51ac <usart_init+0x264>)
    50d4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    50d6:	2347      	movs	r3, #71	; 0x47
    50d8:	18fb      	adds	r3, r7, r3
    50da:	781a      	ldrb	r2, [r3, #0]
    50dc:	2347      	movs	r3, #71	; 0x47
    50de:	18fb      	adds	r3, r7, r3
    50e0:	3201      	adds	r2, #1
    50e2:	701a      	strb	r2, [r3, #0]
    50e4:	2347      	movs	r3, #71	; 0x47
    50e6:	18fb      	adds	r3, r7, r3
    50e8:	781b      	ldrb	r3, [r3, #0]
    50ea:	2b03      	cmp	r3, #3
    50ec:	d9cd      	bls.n	508a <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    50ee:	2300      	movs	r3, #0
    50f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    50f2:	e00a      	b.n	510a <usart_init+0x1c2>
		module->callback[i]            = NULL;
    50f4:	68fa      	ldr	r2, [r7, #12]
    50f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    50f8:	3302      	adds	r3, #2
    50fa:	009b      	lsls	r3, r3, #2
    50fc:	18d3      	adds	r3, r2, r3
    50fe:	3304      	adds	r3, #4
    5100:	2200      	movs	r2, #0
    5102:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5106:	3301      	adds	r3, #1
    5108:	63fb      	str	r3, [r7, #60]	; 0x3c
    510a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    510c:	2b05      	cmp	r3, #5
    510e:	d9f1      	bls.n	50f4 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    5110:	68fb      	ldr	r3, [r7, #12]
    5112:	2200      	movs	r2, #0
    5114:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5116:	68fb      	ldr	r3, [r7, #12]
    5118:	2200      	movs	r2, #0
    511a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    511c:	68fb      	ldr	r3, [r7, #12]
    511e:	2200      	movs	r2, #0
    5120:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5122:	68fb      	ldr	r3, [r7, #12]
    5124:	2200      	movs	r2, #0
    5126:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5128:	68fb      	ldr	r3, [r7, #12]
    512a:	2230      	movs	r2, #48	; 0x30
    512c:	2100      	movs	r1, #0
    512e:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    5130:	68fb      	ldr	r3, [r7, #12]
    5132:	2231      	movs	r2, #49	; 0x31
    5134:	2100      	movs	r1, #0
    5136:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    5138:	68fb      	ldr	r3, [r7, #12]
    513a:	2232      	movs	r2, #50	; 0x32
    513c:	2100      	movs	r1, #0
    513e:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    5140:	68fb      	ldr	r3, [r7, #12]
    5142:	2233      	movs	r2, #51	; 0x33
    5144:	2100      	movs	r1, #0
    5146:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5148:	68fb      	ldr	r3, [r7, #12]
    514a:	681b      	ldr	r3, [r3, #0]
    514c:	2227      	movs	r2, #39	; 0x27
    514e:	18bc      	adds	r4, r7, r2
    5150:	0018      	movs	r0, r3
    5152:	4b0d      	ldr	r3, [pc, #52]	; (5188 <usart_init+0x240>)
    5154:	4798      	blx	r3
    5156:	0003      	movs	r3, r0
    5158:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    515a:	4a15      	ldr	r2, [pc, #84]	; (51b0 <usart_init+0x268>)
    515c:	2327      	movs	r3, #39	; 0x27
    515e:	18fb      	adds	r3, r7, r3
    5160:	781b      	ldrb	r3, [r3, #0]
    5162:	0011      	movs	r1, r2
    5164:	0018      	movs	r0, r3
    5166:	4b13      	ldr	r3, [pc, #76]	; (51b4 <usart_init+0x26c>)
    5168:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    516a:	2327      	movs	r3, #39	; 0x27
    516c:	18fb      	adds	r3, r7, r3
    516e:	781a      	ldrb	r2, [r3, #0]
    5170:	4b11      	ldr	r3, [pc, #68]	; (51b8 <usart_init+0x270>)
    5172:	0092      	lsls	r2, r2, #2
    5174:	68f9      	ldr	r1, [r7, #12]
    5176:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    5178:	233b      	movs	r3, #59	; 0x3b
    517a:	18fb      	adds	r3, r7, r3
    517c:	781b      	ldrb	r3, [r3, #0]
}
    517e:	0018      	movs	r0, r3
    5180:	46bd      	mov	sp, r7
    5182:	b013      	add	sp, #76	; 0x4c
    5184:	bd90      	pop	{r4, r7, pc}
    5186:	46c0      	nop			; (mov r8, r8)
    5188:	000039d5 	.word	0x000039d5
    518c:	00004b85 	.word	0x00004b85
    5190:	00004b6d 	.word	0x00004b6d
    5194:	000064e9 	.word	0x000064e9
    5198:	0000652d 	.word	0x0000652d
    519c:	0000378d 	.word	0x0000378d
    51a0:	00004c6d 	.word	0x00004c6d
    51a4:	00004be1 	.word	0x00004be1
    51a8:	00003819 	.word	0x00003819
    51ac:	000067d5 	.word	0x000067d5
    51b0:	00005575 	.word	0x00005575
    51b4:	00003a39 	.word	0x00003a39
    51b8:	200009d4 	.word	0x200009d4

000051bc <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    51bc:	b580      	push	{r7, lr}
    51be:	b084      	sub	sp, #16
    51c0:	af00      	add	r7, sp, #0
    51c2:	6078      	str	r0, [r7, #4]
    51c4:	000a      	movs	r2, r1
    51c6:	1cbb      	adds	r3, r7, #2
    51c8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    51ca:	687b      	ldr	r3, [r7, #4]
    51cc:	681b      	ldr	r3, [r3, #0]
    51ce:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    51d0:	687b      	ldr	r3, [r7, #4]
    51d2:	79db      	ldrb	r3, [r3, #7]
    51d4:	2201      	movs	r2, #1
    51d6:	4053      	eors	r3, r2
    51d8:	b2db      	uxtb	r3, r3
    51da:	2b00      	cmp	r3, #0
    51dc:	d001      	beq.n	51e2 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    51de:	231c      	movs	r3, #28
    51e0:	e017      	b.n	5212 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    51e2:	687b      	ldr	r3, [r7, #4]
    51e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    51e6:	b29b      	uxth	r3, r3
    51e8:	2b00      	cmp	r3, #0
    51ea:	d001      	beq.n	51f0 <usart_write_wait+0x34>
		return STATUS_BUSY;
    51ec:	2305      	movs	r3, #5
    51ee:	e010      	b.n	5212 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    51f0:	687b      	ldr	r3, [r7, #4]
    51f2:	0018      	movs	r0, r3
    51f4:	4b09      	ldr	r3, [pc, #36]	; (521c <usart_write_wait+0x60>)
    51f6:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    51f8:	68fb      	ldr	r3, [r7, #12]
    51fa:	1cba      	adds	r2, r7, #2
    51fc:	8812      	ldrh	r2, [r2, #0]
    51fe:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5200:	46c0      	nop			; (mov r8, r8)
    5202:	68fb      	ldr	r3, [r7, #12]
    5204:	7e1b      	ldrb	r3, [r3, #24]
    5206:	b2db      	uxtb	r3, r3
    5208:	001a      	movs	r2, r3
    520a:	2302      	movs	r3, #2
    520c:	4013      	ands	r3, r2
    520e:	d0f8      	beq.n	5202 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    5210:	2300      	movs	r3, #0
}
    5212:	0018      	movs	r0, r3
    5214:	46bd      	mov	sp, r7
    5216:	b004      	add	sp, #16
    5218:	bd80      	pop	{r7, pc}
    521a:	46c0      	nop			; (mov r8, r8)
    521c:	00004c49 	.word	0x00004c49

00005220 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    5220:	b580      	push	{r7, lr}
    5222:	b084      	sub	sp, #16
    5224:	af00      	add	r7, sp, #0
    5226:	6078      	str	r0, [r7, #4]
    5228:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    522a:	687b      	ldr	r3, [r7, #4]
    522c:	681b      	ldr	r3, [r3, #0]
    522e:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5230:	687b      	ldr	r3, [r7, #4]
    5232:	799b      	ldrb	r3, [r3, #6]
    5234:	2201      	movs	r2, #1
    5236:	4053      	eors	r3, r2
    5238:	b2db      	uxtb	r3, r3
    523a:	2b00      	cmp	r3, #0
    523c:	d001      	beq.n	5242 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    523e:	231c      	movs	r3, #28
    5240:	e05e      	b.n	5300 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    5242:	687b      	ldr	r3, [r7, #4]
    5244:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5246:	b29b      	uxth	r3, r3
    5248:	2b00      	cmp	r3, #0
    524a:	d001      	beq.n	5250 <usart_read_wait+0x30>
		return STATUS_BUSY;
    524c:	2305      	movs	r3, #5
    524e:	e057      	b.n	5300 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    5250:	68fb      	ldr	r3, [r7, #12]
    5252:	7e1b      	ldrb	r3, [r3, #24]
    5254:	b2db      	uxtb	r3, r3
    5256:	001a      	movs	r2, r3
    5258:	2304      	movs	r3, #4
    525a:	4013      	ands	r3, r2
    525c:	d101      	bne.n	5262 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    525e:	2305      	movs	r3, #5
    5260:	e04e      	b.n	5300 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5262:	687b      	ldr	r3, [r7, #4]
    5264:	0018      	movs	r0, r3
    5266:	4b28      	ldr	r3, [pc, #160]	; (5308 <usart_read_wait+0xe8>)
    5268:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    526a:	68fb      	ldr	r3, [r7, #12]
    526c:	8b5b      	ldrh	r3, [r3, #26]
    526e:	b29b      	uxth	r3, r3
    5270:	b2da      	uxtb	r2, r3
    5272:	230b      	movs	r3, #11
    5274:	18fb      	adds	r3, r7, r3
    5276:	213f      	movs	r1, #63	; 0x3f
    5278:	400a      	ands	r2, r1
    527a:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    527c:	230b      	movs	r3, #11
    527e:	18fb      	adds	r3, r7, r3
    5280:	781b      	ldrb	r3, [r3, #0]
    5282:	2b00      	cmp	r3, #0
    5284:	d036      	beq.n	52f4 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    5286:	230b      	movs	r3, #11
    5288:	18fb      	adds	r3, r7, r3
    528a:	781b      	ldrb	r3, [r3, #0]
    528c:	2202      	movs	r2, #2
    528e:	4013      	ands	r3, r2
    5290:	d004      	beq.n	529c <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5292:	68fb      	ldr	r3, [r7, #12]
    5294:	2202      	movs	r2, #2
    5296:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    5298:	231a      	movs	r3, #26
    529a:	e031      	b.n	5300 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    529c:	230b      	movs	r3, #11
    529e:	18fb      	adds	r3, r7, r3
    52a0:	781b      	ldrb	r3, [r3, #0]
    52a2:	2204      	movs	r2, #4
    52a4:	4013      	ands	r3, r2
    52a6:	d004      	beq.n	52b2 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    52a8:	68fb      	ldr	r3, [r7, #12]
    52aa:	2204      	movs	r2, #4
    52ac:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    52ae:	231e      	movs	r3, #30
    52b0:	e026      	b.n	5300 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    52b2:	230b      	movs	r3, #11
    52b4:	18fb      	adds	r3, r7, r3
    52b6:	781b      	ldrb	r3, [r3, #0]
    52b8:	2201      	movs	r2, #1
    52ba:	4013      	ands	r3, r2
    52bc:	d004      	beq.n	52c8 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    52be:	68fb      	ldr	r3, [r7, #12]
    52c0:	2201      	movs	r2, #1
    52c2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    52c4:	2313      	movs	r3, #19
    52c6:	e01b      	b.n	5300 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    52c8:	230b      	movs	r3, #11
    52ca:	18fb      	adds	r3, r7, r3
    52cc:	781b      	ldrb	r3, [r3, #0]
    52ce:	2210      	movs	r2, #16
    52d0:	4013      	ands	r3, r2
    52d2:	d004      	beq.n	52de <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    52d4:	68fb      	ldr	r3, [r7, #12]
    52d6:	2210      	movs	r2, #16
    52d8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    52da:	2342      	movs	r3, #66	; 0x42
    52dc:	e010      	b.n	5300 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    52de:	230b      	movs	r3, #11
    52e0:	18fb      	adds	r3, r7, r3
    52e2:	781b      	ldrb	r3, [r3, #0]
    52e4:	2220      	movs	r2, #32
    52e6:	4013      	ands	r3, r2
    52e8:	d004      	beq.n	52f4 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    52ea:	68fb      	ldr	r3, [r7, #12]
    52ec:	2220      	movs	r2, #32
    52ee:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    52f0:	2341      	movs	r3, #65	; 0x41
    52f2:	e005      	b.n	5300 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    52f4:	68fb      	ldr	r3, [r7, #12]
    52f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    52f8:	b29a      	uxth	r2, r3
    52fa:	683b      	ldr	r3, [r7, #0]
    52fc:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    52fe:	2300      	movs	r3, #0
}
    5300:	0018      	movs	r0, r3
    5302:	46bd      	mov	sp, r7
    5304:	b004      	add	sp, #16
    5306:	bd80      	pop	{r7, pc}
    5308:	00004c49 	.word	0x00004c49

0000530c <system_interrupt_enter_critical_section>:
{
    530c:	b580      	push	{r7, lr}
    530e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5310:	4b02      	ldr	r3, [pc, #8]	; (531c <system_interrupt_enter_critical_section+0x10>)
    5312:	4798      	blx	r3
}
    5314:	46c0      	nop			; (mov r8, r8)
    5316:	46bd      	mov	sp, r7
    5318:	bd80      	pop	{r7, pc}
    531a:	46c0      	nop			; (mov r8, r8)
    531c:	00002e5d 	.word	0x00002e5d

00005320 <system_interrupt_leave_critical_section>:
{
    5320:	b580      	push	{r7, lr}
    5322:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5324:	4b02      	ldr	r3, [pc, #8]	; (5330 <system_interrupt_leave_critical_section+0x10>)
    5326:	4798      	blx	r3
}
    5328:	46c0      	nop			; (mov r8, r8)
    532a:	46bd      	mov	sp, r7
    532c:	bd80      	pop	{r7, pc}
    532e:	46c0      	nop			; (mov r8, r8)
    5330:	00002eb1 	.word	0x00002eb1

00005334 <usart_is_syncing>:
{
    5334:	b580      	push	{r7, lr}
    5336:	b084      	sub	sp, #16
    5338:	af00      	add	r7, sp, #0
    533a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    533c:	687b      	ldr	r3, [r7, #4]
    533e:	681b      	ldr	r3, [r3, #0]
    5340:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    5342:	68fb      	ldr	r3, [r7, #12]
    5344:	69db      	ldr	r3, [r3, #28]
    5346:	1e5a      	subs	r2, r3, #1
    5348:	4193      	sbcs	r3, r2
    534a:	b2db      	uxtb	r3, r3
}
    534c:	0018      	movs	r0, r3
    534e:	46bd      	mov	sp, r7
    5350:	b004      	add	sp, #16
    5352:	bd80      	pop	{r7, pc}

00005354 <_usart_wait_for_sync>:
{
    5354:	b580      	push	{r7, lr}
    5356:	b082      	sub	sp, #8
    5358:	af00      	add	r7, sp, #0
    535a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    535c:	46c0      	nop			; (mov r8, r8)
    535e:	687b      	ldr	r3, [r7, #4]
    5360:	0018      	movs	r0, r3
    5362:	4b04      	ldr	r3, [pc, #16]	; (5374 <_usart_wait_for_sync+0x20>)
    5364:	4798      	blx	r3
    5366:	1e03      	subs	r3, r0, #0
    5368:	d1f9      	bne.n	535e <_usart_wait_for_sync+0xa>
}
    536a:	46c0      	nop			; (mov r8, r8)
    536c:	46bd      	mov	sp, r7
    536e:	b002      	add	sp, #8
    5370:	bd80      	pop	{r7, pc}
    5372:	46c0      	nop			; (mov r8, r8)
    5374:	00005335 	.word	0x00005335

00005378 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5378:	b580      	push	{r7, lr}
    537a:	b086      	sub	sp, #24
    537c:	af00      	add	r7, sp, #0
    537e:	60f8      	str	r0, [r7, #12]
    5380:	60b9      	str	r1, [r7, #8]
    5382:	1dbb      	adds	r3, r7, #6
    5384:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5386:	68fb      	ldr	r3, [r7, #12]
    5388:	681b      	ldr	r3, [r3, #0]
    538a:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    538c:	4b0f      	ldr	r3, [pc, #60]	; (53cc <_usart_write_buffer+0x54>)
    538e:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    5390:	68fb      	ldr	r3, [r7, #12]
    5392:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5394:	b29b      	uxth	r3, r3
    5396:	2b00      	cmp	r3, #0
    5398:	d003      	beq.n	53a2 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    539a:	4b0d      	ldr	r3, [pc, #52]	; (53d0 <_usart_write_buffer+0x58>)
    539c:	4798      	blx	r3
		return STATUS_BUSY;
    539e:	2305      	movs	r3, #5
    53a0:	e010      	b.n	53c4 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    53a2:	68fb      	ldr	r3, [r7, #12]
    53a4:	1dba      	adds	r2, r7, #6
    53a6:	8812      	ldrh	r2, [r2, #0]
    53a8:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    53aa:	4b09      	ldr	r3, [pc, #36]	; (53d0 <_usart_write_buffer+0x58>)
    53ac:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    53ae:	68fb      	ldr	r3, [r7, #12]
    53b0:	68ba      	ldr	r2, [r7, #8]
    53b2:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    53b4:	68fb      	ldr	r3, [r7, #12]
    53b6:	2233      	movs	r2, #51	; 0x33
    53b8:	2105      	movs	r1, #5
    53ba:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    53bc:	697b      	ldr	r3, [r7, #20]
    53be:	2201      	movs	r2, #1
    53c0:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    53c2:	2300      	movs	r3, #0
}
    53c4:	0018      	movs	r0, r3
    53c6:	46bd      	mov	sp, r7
    53c8:	b006      	add	sp, #24
    53ca:	bd80      	pop	{r7, pc}
    53cc:	0000530d 	.word	0x0000530d
    53d0:	00005321 	.word	0x00005321

000053d4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    53d4:	b580      	push	{r7, lr}
    53d6:	b086      	sub	sp, #24
    53d8:	af00      	add	r7, sp, #0
    53da:	60f8      	str	r0, [r7, #12]
    53dc:	60b9      	str	r1, [r7, #8]
    53de:	1dbb      	adds	r3, r7, #6
    53e0:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    53e2:	68fb      	ldr	r3, [r7, #12]
    53e4:	681b      	ldr	r3, [r3, #0]
    53e6:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    53e8:	4b16      	ldr	r3, [pc, #88]	; (5444 <_usart_read_buffer+0x70>)
    53ea:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    53ec:	68fb      	ldr	r3, [r7, #12]
    53ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    53f0:	b29b      	uxth	r3, r3
    53f2:	2b00      	cmp	r3, #0
    53f4:	d003      	beq.n	53fe <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    53f6:	4b14      	ldr	r3, [pc, #80]	; (5448 <_usart_read_buffer+0x74>)
    53f8:	4798      	blx	r3
		return STATUS_BUSY;
    53fa:	2305      	movs	r3, #5
    53fc:	e01e      	b.n	543c <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    53fe:	68fb      	ldr	r3, [r7, #12]
    5400:	1dba      	adds	r2, r7, #6
    5402:	8812      	ldrh	r2, [r2, #0]
    5404:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    5406:	4b10      	ldr	r3, [pc, #64]	; (5448 <_usart_read_buffer+0x74>)
    5408:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    540a:	68fb      	ldr	r3, [r7, #12]
    540c:	68ba      	ldr	r2, [r7, #8]
    540e:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    5410:	68fb      	ldr	r3, [r7, #12]
    5412:	2232      	movs	r2, #50	; 0x32
    5414:	2105      	movs	r1, #5
    5416:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    5418:	697b      	ldr	r3, [r7, #20]
    541a:	2204      	movs	r2, #4
    541c:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    541e:	68fb      	ldr	r3, [r7, #12]
    5420:	7a1b      	ldrb	r3, [r3, #8]
    5422:	2b00      	cmp	r3, #0
    5424:	d002      	beq.n	542c <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    5426:	697b      	ldr	r3, [r7, #20]
    5428:	2220      	movs	r2, #32
    542a:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    542c:	68fb      	ldr	r3, [r7, #12]
    542e:	7a5b      	ldrb	r3, [r3, #9]
    5430:	2b00      	cmp	r3, #0
    5432:	d002      	beq.n	543a <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    5434:	697b      	ldr	r3, [r7, #20]
    5436:	2208      	movs	r2, #8
    5438:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    543a:	2300      	movs	r3, #0
}
    543c:	0018      	movs	r0, r3
    543e:	46bd      	mov	sp, r7
    5440:	b006      	add	sp, #24
    5442:	bd80      	pop	{r7, pc}
    5444:	0000530d 	.word	0x0000530d
    5448:	00005321 	.word	0x00005321

0000544c <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    544c:	b580      	push	{r7, lr}
    544e:	b084      	sub	sp, #16
    5450:	af00      	add	r7, sp, #0
    5452:	60f8      	str	r0, [r7, #12]
    5454:	60b9      	str	r1, [r7, #8]
    5456:	1dfb      	adds	r3, r7, #7
    5458:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    545a:	1dfb      	adds	r3, r7, #7
    545c:	781b      	ldrb	r3, [r3, #0]
    545e:	68fa      	ldr	r2, [r7, #12]
    5460:	3302      	adds	r3, #2
    5462:	009b      	lsls	r3, r3, #2
    5464:	18d3      	adds	r3, r2, r3
    5466:	3304      	adds	r3, #4
    5468:	68ba      	ldr	r2, [r7, #8]
    546a:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    546c:	68fb      	ldr	r3, [r7, #12]
    546e:	2230      	movs	r2, #48	; 0x30
    5470:	5c9b      	ldrb	r3, [r3, r2]
    5472:	b25a      	sxtb	r2, r3
    5474:	1dfb      	adds	r3, r7, #7
    5476:	781b      	ldrb	r3, [r3, #0]
    5478:	2101      	movs	r1, #1
    547a:	4099      	lsls	r1, r3
    547c:	000b      	movs	r3, r1
    547e:	b25b      	sxtb	r3, r3
    5480:	4313      	orrs	r3, r2
    5482:	b25b      	sxtb	r3, r3
    5484:	b2d9      	uxtb	r1, r3
    5486:	68fb      	ldr	r3, [r7, #12]
    5488:	2230      	movs	r2, #48	; 0x30
    548a:	5499      	strb	r1, [r3, r2]
}
    548c:	46c0      	nop			; (mov r8, r8)
    548e:	46bd      	mov	sp, r7
    5490:	b004      	add	sp, #16
    5492:	bd80      	pop	{r7, pc}

00005494 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5494:	b580      	push	{r7, lr}
    5496:	b084      	sub	sp, #16
    5498:	af00      	add	r7, sp, #0
    549a:	60f8      	str	r0, [r7, #12]
    549c:	60b9      	str	r1, [r7, #8]
    549e:	1dbb      	adds	r3, r7, #6
    54a0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    54a2:	1dbb      	adds	r3, r7, #6
    54a4:	881b      	ldrh	r3, [r3, #0]
    54a6:	2b00      	cmp	r3, #0
    54a8:	d101      	bne.n	54ae <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    54aa:	2317      	movs	r3, #23
    54ac:	e010      	b.n	54d0 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    54ae:	68fb      	ldr	r3, [r7, #12]
    54b0:	79db      	ldrb	r3, [r3, #7]
    54b2:	2201      	movs	r2, #1
    54b4:	4053      	eors	r3, r2
    54b6:	b2db      	uxtb	r3, r3
    54b8:	2b00      	cmp	r3, #0
    54ba:	d001      	beq.n	54c0 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    54bc:	231c      	movs	r3, #28
    54be:	e007      	b.n	54d0 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    54c0:	1dbb      	adds	r3, r7, #6
    54c2:	881a      	ldrh	r2, [r3, #0]
    54c4:	68b9      	ldr	r1, [r7, #8]
    54c6:	68fb      	ldr	r3, [r7, #12]
    54c8:	0018      	movs	r0, r3
    54ca:	4b03      	ldr	r3, [pc, #12]	; (54d8 <usart_write_buffer_job+0x44>)
    54cc:	4798      	blx	r3
    54ce:	0003      	movs	r3, r0
}
    54d0:	0018      	movs	r0, r3
    54d2:	46bd      	mov	sp, r7
    54d4:	b004      	add	sp, #16
    54d6:	bd80      	pop	{r7, pc}
    54d8:	00005379 	.word	0x00005379

000054dc <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    54dc:	b580      	push	{r7, lr}
    54de:	b084      	sub	sp, #16
    54e0:	af00      	add	r7, sp, #0
    54e2:	60f8      	str	r0, [r7, #12]
    54e4:	60b9      	str	r1, [r7, #8]
    54e6:	1dbb      	adds	r3, r7, #6
    54e8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    54ea:	1dbb      	adds	r3, r7, #6
    54ec:	881b      	ldrh	r3, [r3, #0]
    54ee:	2b00      	cmp	r3, #0
    54f0:	d101      	bne.n	54f6 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    54f2:	2317      	movs	r3, #23
    54f4:	e010      	b.n	5518 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    54f6:	68fb      	ldr	r3, [r7, #12]
    54f8:	799b      	ldrb	r3, [r3, #6]
    54fa:	2201      	movs	r2, #1
    54fc:	4053      	eors	r3, r2
    54fe:	b2db      	uxtb	r3, r3
    5500:	2b00      	cmp	r3, #0
    5502:	d001      	beq.n	5508 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5504:	231c      	movs	r3, #28
    5506:	e007      	b.n	5518 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    5508:	1dbb      	adds	r3, r7, #6
    550a:	881a      	ldrh	r2, [r3, #0]
    550c:	68b9      	ldr	r1, [r7, #8]
    550e:	68fb      	ldr	r3, [r7, #12]
    5510:	0018      	movs	r0, r3
    5512:	4b03      	ldr	r3, [pc, #12]	; (5520 <usart_read_buffer_job+0x44>)
    5514:	4798      	blx	r3
    5516:	0003      	movs	r3, r0
}
    5518:	0018      	movs	r0, r3
    551a:	46bd      	mov	sp, r7
    551c:	b004      	add	sp, #16
    551e:	bd80      	pop	{r7, pc}
    5520:	000053d5 	.word	0x000053d5

00005524 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    5524:	b580      	push	{r7, lr}
    5526:	b084      	sub	sp, #16
    5528:	af00      	add	r7, sp, #0
    552a:	6078      	str	r0, [r7, #4]
    552c:	000a      	movs	r2, r1
    552e:	1cfb      	adds	r3, r7, #3
    5530:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    5532:	1cfb      	adds	r3, r7, #3
    5534:	781b      	ldrb	r3, [r3, #0]
    5536:	2b00      	cmp	r3, #0
    5538:	d002      	beq.n	5540 <usart_get_job_status+0x1c>
    553a:	2b01      	cmp	r3, #1
    553c:	d007      	beq.n	554e <usart_get_job_status+0x2a>
    553e:	e00d      	b.n	555c <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    5540:	230f      	movs	r3, #15
    5542:	18fb      	adds	r3, r7, r3
    5544:	687a      	ldr	r2, [r7, #4]
    5546:	2132      	movs	r1, #50	; 0x32
    5548:	5c52      	ldrb	r2, [r2, r1]
    554a:	701a      	strb	r2, [r3, #0]
			break;
    554c:	e00b      	b.n	5566 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    554e:	230f      	movs	r3, #15
    5550:	18fb      	adds	r3, r7, r3
    5552:	687a      	ldr	r2, [r7, #4]
    5554:	2133      	movs	r1, #51	; 0x33
    5556:	5c52      	ldrb	r2, [r2, r1]
    5558:	701a      	strb	r2, [r3, #0]
			break;
    555a:	e004      	b.n	5566 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    555c:	230f      	movs	r3, #15
    555e:	18fb      	adds	r3, r7, r3
    5560:	2217      	movs	r2, #23
    5562:	701a      	strb	r2, [r3, #0]
			break;
    5564:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    5566:	230f      	movs	r3, #15
    5568:	18fb      	adds	r3, r7, r3
    556a:	781b      	ldrb	r3, [r3, #0]
}
    556c:	0018      	movs	r0, r3
    556e:	46bd      	mov	sp, r7
    5570:	b004      	add	sp, #16
    5572:	bd80      	pop	{r7, pc}

00005574 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5574:	b580      	push	{r7, lr}
    5576:	b088      	sub	sp, #32
    5578:	af00      	add	r7, sp, #0
    557a:	0002      	movs	r2, r0
    557c:	1dfb      	adds	r3, r7, #7
    557e:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    5580:	1dfb      	adds	r3, r7, #7
    5582:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    5584:	4ba3      	ldr	r3, [pc, #652]	; (5814 <_usart_interrupt_handler+0x2a0>)
    5586:	0092      	lsls	r2, r2, #2
    5588:	58d3      	ldr	r3, [r2, r3]
    558a:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    558c:	69bb      	ldr	r3, [r7, #24]
    558e:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    5590:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    5592:	69bb      	ldr	r3, [r7, #24]
    5594:	0018      	movs	r0, r3
    5596:	4ba0      	ldr	r3, [pc, #640]	; (5818 <_usart_interrupt_handler+0x2a4>)
    5598:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    559a:	697b      	ldr	r3, [r7, #20]
    559c:	7e1b      	ldrb	r3, [r3, #24]
    559e:	b2da      	uxtb	r2, r3
    55a0:	2312      	movs	r3, #18
    55a2:	18fb      	adds	r3, r7, r3
    55a4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    55a6:	697b      	ldr	r3, [r7, #20]
    55a8:	7d9b      	ldrb	r3, [r3, #22]
    55aa:	b2db      	uxtb	r3, r3
    55ac:	b29a      	uxth	r2, r3
    55ae:	2312      	movs	r3, #18
    55b0:	18fb      	adds	r3, r7, r3
    55b2:	2112      	movs	r1, #18
    55b4:	1879      	adds	r1, r7, r1
    55b6:	8809      	ldrh	r1, [r1, #0]
    55b8:	400a      	ands	r2, r1
    55ba:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    55bc:	69bb      	ldr	r3, [r7, #24]
    55be:	2230      	movs	r2, #48	; 0x30
    55c0:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    55c2:	69ba      	ldr	r2, [r7, #24]
    55c4:	2131      	movs	r1, #49	; 0x31
    55c6:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    55c8:	4013      	ands	r3, r2
    55ca:	b2da      	uxtb	r2, r3
    55cc:	2310      	movs	r3, #16
    55ce:	18fb      	adds	r3, r7, r3
    55d0:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    55d2:	2312      	movs	r3, #18
    55d4:	18fb      	adds	r3, r7, r3
    55d6:	881b      	ldrh	r3, [r3, #0]
    55d8:	2201      	movs	r2, #1
    55da:	4013      	ands	r3, r2
    55dc:	d044      	beq.n	5668 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    55de:	69bb      	ldr	r3, [r7, #24]
    55e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    55e2:	b29b      	uxth	r3, r3
    55e4:	2b00      	cmp	r3, #0
    55e6:	d03c      	beq.n	5662 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    55e8:	69bb      	ldr	r3, [r7, #24]
    55ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    55ec:	781b      	ldrb	r3, [r3, #0]
    55ee:	b2da      	uxtb	r2, r3
    55f0:	231c      	movs	r3, #28
    55f2:	18fb      	adds	r3, r7, r3
    55f4:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    55f6:	69bb      	ldr	r3, [r7, #24]
    55f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    55fa:	1c5a      	adds	r2, r3, #1
    55fc:	69bb      	ldr	r3, [r7, #24]
    55fe:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5600:	69bb      	ldr	r3, [r7, #24]
    5602:	795b      	ldrb	r3, [r3, #5]
    5604:	2b01      	cmp	r3, #1
    5606:	d113      	bne.n	5630 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5608:	69bb      	ldr	r3, [r7, #24]
    560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    560c:	781b      	ldrb	r3, [r3, #0]
    560e:	b2db      	uxtb	r3, r3
    5610:	021b      	lsls	r3, r3, #8
    5612:	b21a      	sxth	r2, r3
    5614:	231c      	movs	r3, #28
    5616:	18fb      	adds	r3, r7, r3
    5618:	2100      	movs	r1, #0
    561a:	5e5b      	ldrsh	r3, [r3, r1]
    561c:	4313      	orrs	r3, r2
    561e:	b21a      	sxth	r2, r3
    5620:	231c      	movs	r3, #28
    5622:	18fb      	adds	r3, r7, r3
    5624:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    5626:	69bb      	ldr	r3, [r7, #24]
    5628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    562a:	1c5a      	adds	r2, r3, #1
    562c:	69bb      	ldr	r3, [r7, #24]
    562e:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5630:	231c      	movs	r3, #28
    5632:	18fb      	adds	r3, r7, r3
    5634:	881b      	ldrh	r3, [r3, #0]
    5636:	05db      	lsls	r3, r3, #23
    5638:	0ddb      	lsrs	r3, r3, #23
    563a:	b29a      	uxth	r2, r3
    563c:	697b      	ldr	r3, [r7, #20]
    563e:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5640:	69bb      	ldr	r3, [r7, #24]
    5642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5644:	b29b      	uxth	r3, r3
    5646:	3b01      	subs	r3, #1
    5648:	b29b      	uxth	r3, r3
    564a:	69ba      	ldr	r2, [r7, #24]
    564c:	1c19      	adds	r1, r3, #0
    564e:	85d1      	strh	r1, [r2, #46]	; 0x2e
    5650:	2b00      	cmp	r3, #0
    5652:	d109      	bne.n	5668 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5654:	697b      	ldr	r3, [r7, #20]
    5656:	2201      	movs	r2, #1
    5658:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    565a:	697b      	ldr	r3, [r7, #20]
    565c:	2202      	movs	r2, #2
    565e:	759a      	strb	r2, [r3, #22]
    5660:	e002      	b.n	5668 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5662:	697b      	ldr	r3, [r7, #20]
    5664:	2201      	movs	r2, #1
    5666:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5668:	2312      	movs	r3, #18
    566a:	18fb      	adds	r3, r7, r3
    566c:	881b      	ldrh	r3, [r3, #0]
    566e:	2202      	movs	r2, #2
    5670:	4013      	ands	r3, r2
    5672:	d011      	beq.n	5698 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5674:	697b      	ldr	r3, [r7, #20]
    5676:	2202      	movs	r2, #2
    5678:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    567a:	69bb      	ldr	r3, [r7, #24]
    567c:	2233      	movs	r2, #51	; 0x33
    567e:	2100      	movs	r1, #0
    5680:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5682:	2310      	movs	r3, #16
    5684:	18fb      	adds	r3, r7, r3
    5686:	881b      	ldrh	r3, [r3, #0]
    5688:	2201      	movs	r2, #1
    568a:	4013      	ands	r3, r2
    568c:	d004      	beq.n	5698 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    568e:	69bb      	ldr	r3, [r7, #24]
    5690:	68db      	ldr	r3, [r3, #12]
    5692:	69ba      	ldr	r2, [r7, #24]
    5694:	0010      	movs	r0, r2
    5696:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5698:	2312      	movs	r3, #18
    569a:	18fb      	adds	r3, r7, r3
    569c:	881b      	ldrh	r3, [r3, #0]
    569e:	2204      	movs	r2, #4
    56a0:	4013      	ands	r3, r2
    56a2:	d100      	bne.n	56a6 <_usart_interrupt_handler+0x132>
    56a4:	e0bd      	b.n	5822 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    56a6:	69bb      	ldr	r3, [r7, #24]
    56a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    56aa:	b29b      	uxth	r3, r3
    56ac:	2b00      	cmp	r3, #0
    56ae:	d100      	bne.n	56b2 <_usart_interrupt_handler+0x13e>
    56b0:	e0b4      	b.n	581c <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    56b2:	697b      	ldr	r3, [r7, #20]
    56b4:	8b5b      	ldrh	r3, [r3, #26]
    56b6:	b29b      	uxth	r3, r3
    56b8:	b2da      	uxtb	r2, r3
    56ba:	231f      	movs	r3, #31
    56bc:	18fb      	adds	r3, r7, r3
    56be:	213f      	movs	r1, #63	; 0x3f
    56c0:	400a      	ands	r2, r1
    56c2:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    56c4:	231f      	movs	r3, #31
    56c6:	18fb      	adds	r3, r7, r3
    56c8:	781b      	ldrb	r3, [r3, #0]
    56ca:	2208      	movs	r2, #8
    56cc:	4013      	ands	r3, r2
    56ce:	d007      	beq.n	56e0 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    56d0:	231f      	movs	r3, #31
    56d2:	18fb      	adds	r3, r7, r3
    56d4:	221f      	movs	r2, #31
    56d6:	18ba      	adds	r2, r7, r2
    56d8:	7812      	ldrb	r2, [r2, #0]
    56da:	2108      	movs	r1, #8
    56dc:	438a      	bics	r2, r1
    56de:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    56e0:	231f      	movs	r3, #31
    56e2:	18fb      	adds	r3, r7, r3
    56e4:	781b      	ldrb	r3, [r3, #0]
    56e6:	2b00      	cmp	r3, #0
    56e8:	d050      	beq.n	578c <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    56ea:	231f      	movs	r3, #31
    56ec:	18fb      	adds	r3, r7, r3
    56ee:	781b      	ldrb	r3, [r3, #0]
    56f0:	2202      	movs	r2, #2
    56f2:	4013      	ands	r3, r2
    56f4:	d007      	beq.n	5706 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    56f6:	69bb      	ldr	r3, [r7, #24]
    56f8:	2232      	movs	r2, #50	; 0x32
    56fa:	211a      	movs	r1, #26
    56fc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    56fe:	697b      	ldr	r3, [r7, #20]
    5700:	2202      	movs	r2, #2
    5702:	835a      	strh	r2, [r3, #26]
    5704:	e036      	b.n	5774 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5706:	231f      	movs	r3, #31
    5708:	18fb      	adds	r3, r7, r3
    570a:	781b      	ldrb	r3, [r3, #0]
    570c:	2204      	movs	r2, #4
    570e:	4013      	ands	r3, r2
    5710:	d007      	beq.n	5722 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5712:	69bb      	ldr	r3, [r7, #24]
    5714:	2232      	movs	r2, #50	; 0x32
    5716:	211e      	movs	r1, #30
    5718:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    571a:	697b      	ldr	r3, [r7, #20]
    571c:	2204      	movs	r2, #4
    571e:	835a      	strh	r2, [r3, #26]
    5720:	e028      	b.n	5774 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5722:	231f      	movs	r3, #31
    5724:	18fb      	adds	r3, r7, r3
    5726:	781b      	ldrb	r3, [r3, #0]
    5728:	2201      	movs	r2, #1
    572a:	4013      	ands	r3, r2
    572c:	d007      	beq.n	573e <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    572e:	69bb      	ldr	r3, [r7, #24]
    5730:	2232      	movs	r2, #50	; 0x32
    5732:	2113      	movs	r1, #19
    5734:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5736:	697b      	ldr	r3, [r7, #20]
    5738:	2201      	movs	r2, #1
    573a:	835a      	strh	r2, [r3, #26]
    573c:	e01a      	b.n	5774 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    573e:	231f      	movs	r3, #31
    5740:	18fb      	adds	r3, r7, r3
    5742:	781b      	ldrb	r3, [r3, #0]
    5744:	2210      	movs	r2, #16
    5746:	4013      	ands	r3, r2
    5748:	d007      	beq.n	575a <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    574a:	69bb      	ldr	r3, [r7, #24]
    574c:	2232      	movs	r2, #50	; 0x32
    574e:	2142      	movs	r1, #66	; 0x42
    5750:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5752:	697b      	ldr	r3, [r7, #20]
    5754:	2210      	movs	r2, #16
    5756:	835a      	strh	r2, [r3, #26]
    5758:	e00c      	b.n	5774 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    575a:	231f      	movs	r3, #31
    575c:	18fb      	adds	r3, r7, r3
    575e:	781b      	ldrb	r3, [r3, #0]
    5760:	2220      	movs	r2, #32
    5762:	4013      	ands	r3, r2
    5764:	d006      	beq.n	5774 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5766:	69bb      	ldr	r3, [r7, #24]
    5768:	2232      	movs	r2, #50	; 0x32
    576a:	2141      	movs	r1, #65	; 0x41
    576c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    576e:	697b      	ldr	r3, [r7, #20]
    5770:	2220      	movs	r2, #32
    5772:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    5774:	2310      	movs	r3, #16
    5776:	18fb      	adds	r3, r7, r3
    5778:	881b      	ldrh	r3, [r3, #0]
    577a:	2204      	movs	r2, #4
    577c:	4013      	ands	r3, r2
				if (callback_status
    577e:	d050      	beq.n	5822 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5780:	69bb      	ldr	r3, [r7, #24]
    5782:	695b      	ldr	r3, [r3, #20]
    5784:	69ba      	ldr	r2, [r7, #24]
    5786:	0010      	movs	r0, r2
    5788:	4798      	blx	r3
    578a:	e04a      	b.n	5822 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    578c:	697b      	ldr	r3, [r7, #20]
    578e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5790:	b29a      	uxth	r2, r3
    5792:	230e      	movs	r3, #14
    5794:	18fb      	adds	r3, r7, r3
    5796:	05d2      	lsls	r2, r2, #23
    5798:	0dd2      	lsrs	r2, r2, #23
    579a:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    579c:	69bb      	ldr	r3, [r7, #24]
    579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    57a0:	220e      	movs	r2, #14
    57a2:	18ba      	adds	r2, r7, r2
    57a4:	8812      	ldrh	r2, [r2, #0]
    57a6:	b2d2      	uxtb	r2, r2
    57a8:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    57aa:	69bb      	ldr	r3, [r7, #24]
    57ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    57ae:	1c5a      	adds	r2, r3, #1
    57b0:	69bb      	ldr	r3, [r7, #24]
    57b2:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    57b4:	69bb      	ldr	r3, [r7, #24]
    57b6:	795b      	ldrb	r3, [r3, #5]
    57b8:	2b01      	cmp	r3, #1
    57ba:	d10d      	bne.n	57d8 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    57bc:	69bb      	ldr	r3, [r7, #24]
    57be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    57c0:	220e      	movs	r2, #14
    57c2:	18ba      	adds	r2, r7, r2
    57c4:	8812      	ldrh	r2, [r2, #0]
    57c6:	0a12      	lsrs	r2, r2, #8
    57c8:	b292      	uxth	r2, r2
    57ca:	b2d2      	uxtb	r2, r2
    57cc:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    57ce:	69bb      	ldr	r3, [r7, #24]
    57d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    57d2:	1c5a      	adds	r2, r3, #1
    57d4:	69bb      	ldr	r3, [r7, #24]
    57d6:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    57d8:	69bb      	ldr	r3, [r7, #24]
    57da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    57dc:	b29b      	uxth	r3, r3
    57de:	3b01      	subs	r3, #1
    57e0:	b29b      	uxth	r3, r3
    57e2:	69ba      	ldr	r2, [r7, #24]
    57e4:	1c19      	adds	r1, r3, #0
    57e6:	8591      	strh	r1, [r2, #44]	; 0x2c
    57e8:	2b00      	cmp	r3, #0
    57ea:	d11a      	bne.n	5822 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    57ec:	697b      	ldr	r3, [r7, #20]
    57ee:	2204      	movs	r2, #4
    57f0:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    57f2:	69bb      	ldr	r3, [r7, #24]
    57f4:	2232      	movs	r2, #50	; 0x32
    57f6:	2100      	movs	r1, #0
    57f8:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    57fa:	2310      	movs	r3, #16
    57fc:	18fb      	adds	r3, r7, r3
    57fe:	881b      	ldrh	r3, [r3, #0]
    5800:	2202      	movs	r2, #2
    5802:	4013      	ands	r3, r2
					if (callback_status
    5804:	d00d      	beq.n	5822 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5806:	69bb      	ldr	r3, [r7, #24]
    5808:	691b      	ldr	r3, [r3, #16]
    580a:	69ba      	ldr	r2, [r7, #24]
    580c:	0010      	movs	r0, r2
    580e:	4798      	blx	r3
    5810:	e007      	b.n	5822 <_usart_interrupt_handler+0x2ae>
    5812:	46c0      	nop			; (mov r8, r8)
    5814:	200009d4 	.word	0x200009d4
    5818:	00005355 	.word	0x00005355
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    581c:	697b      	ldr	r3, [r7, #20]
    581e:	2204      	movs	r2, #4
    5820:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5822:	2312      	movs	r3, #18
    5824:	18fb      	adds	r3, r7, r3
    5826:	881b      	ldrh	r3, [r3, #0]
    5828:	2210      	movs	r2, #16
    582a:	4013      	ands	r3, r2
    582c:	d010      	beq.n	5850 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    582e:	697b      	ldr	r3, [r7, #20]
    5830:	2210      	movs	r2, #16
    5832:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5834:	697b      	ldr	r3, [r7, #20]
    5836:	2210      	movs	r2, #16
    5838:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    583a:	2310      	movs	r3, #16
    583c:	18fb      	adds	r3, r7, r3
    583e:	881b      	ldrh	r3, [r3, #0]
    5840:	2210      	movs	r2, #16
    5842:	4013      	ands	r3, r2
    5844:	d004      	beq.n	5850 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5846:	69bb      	ldr	r3, [r7, #24]
    5848:	69db      	ldr	r3, [r3, #28]
    584a:	69ba      	ldr	r2, [r7, #24]
    584c:	0010      	movs	r0, r2
    584e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5850:	2312      	movs	r3, #18
    5852:	18fb      	adds	r3, r7, r3
    5854:	881b      	ldrh	r3, [r3, #0]
    5856:	2220      	movs	r2, #32
    5858:	4013      	ands	r3, r2
    585a:	d010      	beq.n	587e <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    585c:	697b      	ldr	r3, [r7, #20]
    585e:	2220      	movs	r2, #32
    5860:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5862:	697b      	ldr	r3, [r7, #20]
    5864:	2220      	movs	r2, #32
    5866:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5868:	2310      	movs	r3, #16
    586a:	18fb      	adds	r3, r7, r3
    586c:	881b      	ldrh	r3, [r3, #0]
    586e:	2208      	movs	r2, #8
    5870:	4013      	ands	r3, r2
    5872:	d004      	beq.n	587e <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5874:	69bb      	ldr	r3, [r7, #24]
    5876:	699b      	ldr	r3, [r3, #24]
    5878:	69ba      	ldr	r2, [r7, #24]
    587a:	0010      	movs	r0, r2
    587c:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    587e:	2312      	movs	r3, #18
    5880:	18fb      	adds	r3, r7, r3
    5882:	881b      	ldrh	r3, [r3, #0]
    5884:	2208      	movs	r2, #8
    5886:	4013      	ands	r3, r2
    5888:	d010      	beq.n	58ac <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    588a:	697b      	ldr	r3, [r7, #20]
    588c:	2208      	movs	r2, #8
    588e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5890:	697b      	ldr	r3, [r7, #20]
    5892:	2208      	movs	r2, #8
    5894:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5896:	2310      	movs	r3, #16
    5898:	18fb      	adds	r3, r7, r3
    589a:	881b      	ldrh	r3, [r3, #0]
    589c:	2220      	movs	r2, #32
    589e:	4013      	ands	r3, r2
    58a0:	d004      	beq.n	58ac <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    58a2:	69bb      	ldr	r3, [r7, #24]
    58a4:	6a1b      	ldr	r3, [r3, #32]
    58a6:	69ba      	ldr	r2, [r7, #24]
    58a8:	0010      	movs	r0, r2
    58aa:	4798      	blx	r3
		}
	}
#endif
}
    58ac:	46c0      	nop			; (mov r8, r8)
    58ae:	46bd      	mov	sp, r7
    58b0:	b008      	add	sp, #32
    58b2:	bd80      	pop	{r7, pc}

000058b4 <system_gclk_gen_get_config_defaults>:
{
    58b4:	b580      	push	{r7, lr}
    58b6:	b082      	sub	sp, #8
    58b8:	af00      	add	r7, sp, #0
    58ba:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    58bc:	687b      	ldr	r3, [r7, #4]
    58be:	2201      	movs	r2, #1
    58c0:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    58c2:	687b      	ldr	r3, [r7, #4]
    58c4:	2200      	movs	r2, #0
    58c6:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    58c8:	687b      	ldr	r3, [r7, #4]
    58ca:	2206      	movs	r2, #6
    58cc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    58ce:	687b      	ldr	r3, [r7, #4]
    58d0:	2200      	movs	r2, #0
    58d2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    58d4:	687b      	ldr	r3, [r7, #4]
    58d6:	2200      	movs	r2, #0
    58d8:	725a      	strb	r2, [r3, #9]
}
    58da:	46c0      	nop			; (mov r8, r8)
    58dc:	46bd      	mov	sp, r7
    58de:	b002      	add	sp, #8
    58e0:	bd80      	pop	{r7, pc}

000058e2 <system_gclk_chan_get_config_defaults>:
{
    58e2:	b580      	push	{r7, lr}
    58e4:	b082      	sub	sp, #8
    58e6:	af00      	add	r7, sp, #0
    58e8:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    58ea:	687b      	ldr	r3, [r7, #4]
    58ec:	2200      	movs	r2, #0
    58ee:	701a      	strb	r2, [r3, #0]
}
    58f0:	46c0      	nop			; (mov r8, r8)
    58f2:	46bd      	mov	sp, r7
    58f4:	b002      	add	sp, #8
    58f6:	bd80      	pop	{r7, pc}

000058f8 <system_clock_source_xosc32k_get_config_defaults>:
{
    58f8:	b580      	push	{r7, lr}
    58fa:	b082      	sub	sp, #8
    58fc:	af00      	add	r7, sp, #0
    58fe:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5900:	687b      	ldr	r3, [r7, #4]
    5902:	2200      	movs	r2, #0
    5904:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    5906:	687b      	ldr	r3, [r7, #4]
    5908:	2204      	movs	r2, #4
    590a:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    590c:	687b      	ldr	r3, [r7, #4]
    590e:	2200      	movs	r2, #0
    5910:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    5912:	687b      	ldr	r3, [r7, #4]
    5914:	2280      	movs	r2, #128	; 0x80
    5916:	0212      	lsls	r2, r2, #8
    5918:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    591a:	687b      	ldr	r3, [r7, #4]
    591c:	2200      	movs	r2, #0
    591e:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    5920:	687b      	ldr	r3, [r7, #4]
    5922:	2201      	movs	r2, #1
    5924:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    5926:	687b      	ldr	r3, [r7, #4]
    5928:	2200      	movs	r2, #0
    592a:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    592c:	687b      	ldr	r3, [r7, #4]
    592e:	2201      	movs	r2, #1
    5930:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    5932:	687b      	ldr	r3, [r7, #4]
    5934:	2200      	movs	r2, #0
    5936:	739a      	strb	r2, [r3, #14]
}
    5938:	46c0      	nop			; (mov r8, r8)
    593a:	46bd      	mov	sp, r7
    593c:	b002      	add	sp, #8
    593e:	bd80      	pop	{r7, pc}

00005940 <system_clock_source_osc8m_get_config_defaults>:
{
    5940:	b580      	push	{r7, lr}
    5942:	b082      	sub	sp, #8
    5944:	af00      	add	r7, sp, #0
    5946:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5948:	687b      	ldr	r3, [r7, #4]
    594a:	2203      	movs	r2, #3
    594c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    594e:	687b      	ldr	r3, [r7, #4]
    5950:	2200      	movs	r2, #0
    5952:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5954:	687b      	ldr	r3, [r7, #4]
    5956:	2201      	movs	r2, #1
    5958:	709a      	strb	r2, [r3, #2]
}
    595a:	46c0      	nop			; (mov r8, r8)
    595c:	46bd      	mov	sp, r7
    595e:	b002      	add	sp, #8
    5960:	bd80      	pop	{r7, pc}

00005962 <system_clock_source_dfll_get_config_defaults>:
{
    5962:	b580      	push	{r7, lr}
    5964:	b082      	sub	sp, #8
    5966:	af00      	add	r7, sp, #0
    5968:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    596a:	687b      	ldr	r3, [r7, #4]
    596c:	2200      	movs	r2, #0
    596e:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5970:	687b      	ldr	r3, [r7, #4]
    5972:	2200      	movs	r2, #0
    5974:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5976:	687b      	ldr	r3, [r7, #4]
    5978:	2200      	movs	r2, #0
    597a:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    597c:	687b      	ldr	r3, [r7, #4]
    597e:	2200      	movs	r2, #0
    5980:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5982:	687b      	ldr	r3, [r7, #4]
    5984:	2200      	movs	r2, #0
    5986:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5988:	687b      	ldr	r3, [r7, #4]
    598a:	2201      	movs	r2, #1
    598c:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    598e:	687b      	ldr	r3, [r7, #4]
    5990:	2207      	movs	r2, #7
    5992:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5994:	687b      	ldr	r3, [r7, #4]
    5996:	223f      	movs	r2, #63	; 0x3f
    5998:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    599a:	687b      	ldr	r3, [r7, #4]
    599c:	2201      	movs	r2, #1
    599e:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    59a0:	687b      	ldr	r3, [r7, #4]
    59a2:	2201      	movs	r2, #1
    59a4:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    59a6:	687b      	ldr	r3, [r7, #4]
    59a8:	2206      	movs	r2, #6
    59aa:	821a      	strh	r2, [r3, #16]
}
    59ac:	46c0      	nop			; (mov r8, r8)
    59ae:	46bd      	mov	sp, r7
    59b0:	b002      	add	sp, #8
    59b2:	bd80      	pop	{r7, pc}

000059b4 <system_cpu_clock_set_divider>:
{
    59b4:	b580      	push	{r7, lr}
    59b6:	b082      	sub	sp, #8
    59b8:	af00      	add	r7, sp, #0
    59ba:	0002      	movs	r2, r0
    59bc:	1dfb      	adds	r3, r7, #7
    59be:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    59c0:	4a03      	ldr	r2, [pc, #12]	; (59d0 <system_cpu_clock_set_divider+0x1c>)
    59c2:	1dfb      	adds	r3, r7, #7
    59c4:	781b      	ldrb	r3, [r3, #0]
    59c6:	7213      	strb	r3, [r2, #8]
}
    59c8:	46c0      	nop			; (mov r8, r8)
    59ca:	46bd      	mov	sp, r7
    59cc:	b002      	add	sp, #8
    59ce:	bd80      	pop	{r7, pc}
    59d0:	40000400 	.word	0x40000400

000059d4 <system_apb_clock_set_divider>:
{
    59d4:	b580      	push	{r7, lr}
    59d6:	b082      	sub	sp, #8
    59d8:	af00      	add	r7, sp, #0
    59da:	0002      	movs	r2, r0
    59dc:	1dfb      	adds	r3, r7, #7
    59de:	701a      	strb	r2, [r3, #0]
    59e0:	1dbb      	adds	r3, r7, #6
    59e2:	1c0a      	adds	r2, r1, #0
    59e4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    59e6:	1dfb      	adds	r3, r7, #7
    59e8:	781b      	ldrb	r3, [r3, #0]
    59ea:	2b01      	cmp	r3, #1
    59ec:	d008      	beq.n	5a00 <system_apb_clock_set_divider+0x2c>
    59ee:	2b02      	cmp	r3, #2
    59f0:	d00b      	beq.n	5a0a <system_apb_clock_set_divider+0x36>
    59f2:	2b00      	cmp	r3, #0
    59f4:	d10e      	bne.n	5a14 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    59f6:	4a0b      	ldr	r2, [pc, #44]	; (5a24 <system_apb_clock_set_divider+0x50>)
    59f8:	1dbb      	adds	r3, r7, #6
    59fa:	781b      	ldrb	r3, [r3, #0]
    59fc:	7253      	strb	r3, [r2, #9]
			break;
    59fe:	e00b      	b.n	5a18 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    5a00:	4a08      	ldr	r2, [pc, #32]	; (5a24 <system_apb_clock_set_divider+0x50>)
    5a02:	1dbb      	adds	r3, r7, #6
    5a04:	781b      	ldrb	r3, [r3, #0]
    5a06:	7293      	strb	r3, [r2, #10]
			break;
    5a08:	e006      	b.n	5a18 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    5a0a:	4a06      	ldr	r2, [pc, #24]	; (5a24 <system_apb_clock_set_divider+0x50>)
    5a0c:	1dbb      	adds	r3, r7, #6
    5a0e:	781b      	ldrb	r3, [r3, #0]
    5a10:	72d3      	strb	r3, [r2, #11]
			break;
    5a12:	e001      	b.n	5a18 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    5a14:	2317      	movs	r3, #23
    5a16:	e000      	b.n	5a1a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    5a18:	2300      	movs	r3, #0
}
    5a1a:	0018      	movs	r0, r3
    5a1c:	46bd      	mov	sp, r7
    5a1e:	b002      	add	sp, #8
    5a20:	bd80      	pop	{r7, pc}
    5a22:	46c0      	nop			; (mov r8, r8)
    5a24:	40000400 	.word	0x40000400

00005a28 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5a28:	b580      	push	{r7, lr}
    5a2a:	b082      	sub	sp, #8
    5a2c:	af00      	add	r7, sp, #0
    5a2e:	0002      	movs	r2, r0
    5a30:	1dfb      	adds	r3, r7, #7
    5a32:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5a34:	4a08      	ldr	r2, [pc, #32]	; (5a58 <system_flash_set_waitstates+0x30>)
    5a36:	1dfb      	adds	r3, r7, #7
    5a38:	781b      	ldrb	r3, [r3, #0]
    5a3a:	210f      	movs	r1, #15
    5a3c:	400b      	ands	r3, r1
    5a3e:	b2d9      	uxtb	r1, r3
    5a40:	6853      	ldr	r3, [r2, #4]
    5a42:	200f      	movs	r0, #15
    5a44:	4001      	ands	r1, r0
    5a46:	0049      	lsls	r1, r1, #1
    5a48:	201e      	movs	r0, #30
    5a4a:	4383      	bics	r3, r0
    5a4c:	430b      	orrs	r3, r1
    5a4e:	6053      	str	r3, [r2, #4]
}
    5a50:	46c0      	nop			; (mov r8, r8)
    5a52:	46bd      	mov	sp, r7
    5a54:	b002      	add	sp, #8
    5a56:	bd80      	pop	{r7, pc}
    5a58:	41004000 	.word	0x41004000

00005a5c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5a5c:	b580      	push	{r7, lr}
    5a5e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5a60:	46c0      	nop			; (mov r8, r8)
    5a62:	4b04      	ldr	r3, [pc, #16]	; (5a74 <_system_dfll_wait_for_sync+0x18>)
    5a64:	68db      	ldr	r3, [r3, #12]
    5a66:	2210      	movs	r2, #16
    5a68:	4013      	ands	r3, r2
    5a6a:	d0fa      	beq.n	5a62 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    5a6c:	46c0      	nop			; (mov r8, r8)
    5a6e:	46bd      	mov	sp, r7
    5a70:	bd80      	pop	{r7, pc}
    5a72:	46c0      	nop			; (mov r8, r8)
    5a74:	40000800 	.word	0x40000800

00005a78 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    5a78:	b580      	push	{r7, lr}
    5a7a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5a7c:	4b0c      	ldr	r3, [pc, #48]	; (5ab0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5a7e:	2202      	movs	r2, #2
    5a80:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5a82:	4b0c      	ldr	r3, [pc, #48]	; (5ab4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5a84:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5a86:	4a0a      	ldr	r2, [pc, #40]	; (5ab0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5a88:	4b0b      	ldr	r3, [pc, #44]	; (5ab8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5a8a:	689b      	ldr	r3, [r3, #8]
    5a8c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5a8e:	4a08      	ldr	r2, [pc, #32]	; (5ab0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5a90:	4b09      	ldr	r3, [pc, #36]	; (5ab8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5a92:	685b      	ldr	r3, [r3, #4]
    5a94:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    5a96:	4b06      	ldr	r3, [pc, #24]	; (5ab0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5a98:	2200      	movs	r2, #0
    5a9a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5a9c:	4b05      	ldr	r3, [pc, #20]	; (5ab4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5a9e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5aa0:	4a03      	ldr	r2, [pc, #12]	; (5ab0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5aa2:	4b05      	ldr	r3, [pc, #20]	; (5ab8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5aa4:	681b      	ldr	r3, [r3, #0]
    5aa6:	b29b      	uxth	r3, r3
    5aa8:	8493      	strh	r3, [r2, #36]	; 0x24
}
    5aaa:	46c0      	nop			; (mov r8, r8)
    5aac:	46bd      	mov	sp, r7
    5aae:	bd80      	pop	{r7, pc}
    5ab0:	40000800 	.word	0x40000800
    5ab4:	00005a5d 	.word	0x00005a5d
    5ab8:	20000160 	.word	0x20000160

00005abc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5abc:	b580      	push	{r7, lr}
    5abe:	b082      	sub	sp, #8
    5ac0:	af00      	add	r7, sp, #0
    5ac2:	0002      	movs	r2, r0
    5ac4:	1dfb      	adds	r3, r7, #7
    5ac6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5ac8:	1dfb      	adds	r3, r7, #7
    5aca:	781b      	ldrb	r3, [r3, #0]
    5acc:	2b08      	cmp	r3, #8
    5ace:	d841      	bhi.n	5b54 <system_clock_source_get_hz+0x98>
    5ad0:	009a      	lsls	r2, r3, #2
    5ad2:	4b23      	ldr	r3, [pc, #140]	; (5b60 <system_clock_source_get_hz+0xa4>)
    5ad4:	18d3      	adds	r3, r2, r3
    5ad6:	681b      	ldr	r3, [r3, #0]
    5ad8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    5ada:	4b22      	ldr	r3, [pc, #136]	; (5b64 <system_clock_source_get_hz+0xa8>)
    5adc:	691b      	ldr	r3, [r3, #16]
    5ade:	e03a      	b.n	5b56 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5ae0:	4b21      	ldr	r3, [pc, #132]	; (5b68 <system_clock_source_get_hz+0xac>)
    5ae2:	6a1b      	ldr	r3, [r3, #32]
    5ae4:	059b      	lsls	r3, r3, #22
    5ae6:	0f9b      	lsrs	r3, r3, #30
    5ae8:	b2db      	uxtb	r3, r3
    5aea:	001a      	movs	r2, r3
    5aec:	4b1f      	ldr	r3, [pc, #124]	; (5b6c <system_clock_source_get_hz+0xb0>)
    5aee:	40d3      	lsrs	r3, r2
    5af0:	e031      	b.n	5b56 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5af2:	2380      	movs	r3, #128	; 0x80
    5af4:	021b      	lsls	r3, r3, #8
    5af6:	e02e      	b.n	5b56 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    5af8:	2380      	movs	r3, #128	; 0x80
    5afa:	021b      	lsls	r3, r3, #8
    5afc:	e02b      	b.n	5b56 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5afe:	4b19      	ldr	r3, [pc, #100]	; (5b64 <system_clock_source_get_hz+0xa8>)
    5b00:	695b      	ldr	r3, [r3, #20]
    5b02:	e028      	b.n	5b56 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5b04:	4b17      	ldr	r3, [pc, #92]	; (5b64 <system_clock_source_get_hz+0xa8>)
    5b06:	681b      	ldr	r3, [r3, #0]
    5b08:	2202      	movs	r2, #2
    5b0a:	4013      	ands	r3, r2
    5b0c:	d101      	bne.n	5b12 <system_clock_source_get_hz+0x56>
			return 0;
    5b0e:	2300      	movs	r3, #0
    5b10:	e021      	b.n	5b56 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    5b12:	4b17      	ldr	r3, [pc, #92]	; (5b70 <system_clock_source_get_hz+0xb4>)
    5b14:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    5b16:	4b13      	ldr	r3, [pc, #76]	; (5b64 <system_clock_source_get_hz+0xa8>)
    5b18:	681b      	ldr	r3, [r3, #0]
    5b1a:	2224      	movs	r2, #36	; 0x24
    5b1c:	4013      	ands	r3, r2
    5b1e:	2b04      	cmp	r3, #4
    5b20:	d109      	bne.n	5b36 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5b22:	2000      	movs	r0, #0
    5b24:	4b13      	ldr	r3, [pc, #76]	; (5b74 <system_clock_source_get_hz+0xb8>)
    5b26:	4798      	blx	r3
    5b28:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    5b2a:	4b0e      	ldr	r3, [pc, #56]	; (5b64 <system_clock_source_get_hz+0xa8>)
    5b2c:	689b      	ldr	r3, [r3, #8]
    5b2e:	041b      	lsls	r3, r3, #16
    5b30:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5b32:	4353      	muls	r3, r2
    5b34:	e00f      	b.n	5b56 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    5b36:	4b10      	ldr	r3, [pc, #64]	; (5b78 <system_clock_source_get_hz+0xbc>)
    5b38:	e00d      	b.n	5b56 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5b3a:	4a0b      	ldr	r2, [pc, #44]	; (5b68 <system_clock_source_get_hz+0xac>)
    5b3c:	2350      	movs	r3, #80	; 0x50
    5b3e:	5cd3      	ldrb	r3, [r2, r3]
    5b40:	b2db      	uxtb	r3, r3
    5b42:	001a      	movs	r2, r3
    5b44:	2304      	movs	r3, #4
    5b46:	4013      	ands	r3, r2
    5b48:	d101      	bne.n	5b4e <system_clock_source_get_hz+0x92>
			return 0;
    5b4a:	2300      	movs	r3, #0
    5b4c:	e003      	b.n	5b56 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    5b4e:	4b05      	ldr	r3, [pc, #20]	; (5b64 <system_clock_source_get_hz+0xa8>)
    5b50:	68db      	ldr	r3, [r3, #12]
    5b52:	e000      	b.n	5b56 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    5b54:	2300      	movs	r3, #0
	}
}
    5b56:	0018      	movs	r0, r3
    5b58:	46bd      	mov	sp, r7
    5b5a:	b002      	add	sp, #8
    5b5c:	bd80      	pop	{r7, pc}
    5b5e:	46c0      	nop			; (mov r8, r8)
    5b60:	0000af18 	.word	0x0000af18
    5b64:	20000160 	.word	0x20000160
    5b68:	40000800 	.word	0x40000800
    5b6c:	007a1200 	.word	0x007a1200
    5b70:	00005a5d 	.word	0x00005a5d
    5b74:	0000660d 	.word	0x0000660d
    5b78:	02dc6c00 	.word	0x02dc6c00

00005b7c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5b7c:	b580      	push	{r7, lr}
    5b7e:	b084      	sub	sp, #16
    5b80:	af00      	add	r7, sp, #0
    5b82:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5b84:	4b1a      	ldr	r3, [pc, #104]	; (5bf0 <system_clock_source_osc8m_set_config+0x74>)
    5b86:	6a1b      	ldr	r3, [r3, #32]
    5b88:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5b8a:	687b      	ldr	r3, [r7, #4]
    5b8c:	781b      	ldrb	r3, [r3, #0]
    5b8e:	1c1a      	adds	r2, r3, #0
    5b90:	2303      	movs	r3, #3
    5b92:	4013      	ands	r3, r2
    5b94:	b2da      	uxtb	r2, r3
    5b96:	230d      	movs	r3, #13
    5b98:	18fb      	adds	r3, r7, r3
    5b9a:	2103      	movs	r1, #3
    5b9c:	400a      	ands	r2, r1
    5b9e:	0010      	movs	r0, r2
    5ba0:	781a      	ldrb	r2, [r3, #0]
    5ba2:	2103      	movs	r1, #3
    5ba4:	438a      	bics	r2, r1
    5ba6:	1c11      	adds	r1, r2, #0
    5ba8:	1c02      	adds	r2, r0, #0
    5baa:	430a      	orrs	r2, r1
    5bac:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5bae:	687b      	ldr	r3, [r7, #4]
    5bb0:	789a      	ldrb	r2, [r3, #2]
    5bb2:	230c      	movs	r3, #12
    5bb4:	18fb      	adds	r3, r7, r3
    5bb6:	01d0      	lsls	r0, r2, #7
    5bb8:	781a      	ldrb	r2, [r3, #0]
    5bba:	217f      	movs	r1, #127	; 0x7f
    5bbc:	400a      	ands	r2, r1
    5bbe:	1c11      	adds	r1, r2, #0
    5bc0:	1c02      	adds	r2, r0, #0
    5bc2:	430a      	orrs	r2, r1
    5bc4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5bc6:	687b      	ldr	r3, [r7, #4]
    5bc8:	785a      	ldrb	r2, [r3, #1]
    5bca:	230c      	movs	r3, #12
    5bcc:	18fb      	adds	r3, r7, r3
    5bce:	2101      	movs	r1, #1
    5bd0:	400a      	ands	r2, r1
    5bd2:	0190      	lsls	r0, r2, #6
    5bd4:	781a      	ldrb	r2, [r3, #0]
    5bd6:	2140      	movs	r1, #64	; 0x40
    5bd8:	438a      	bics	r2, r1
    5bda:	1c11      	adds	r1, r2, #0
    5bdc:	1c02      	adds	r2, r0, #0
    5bde:	430a      	orrs	r2, r1
    5be0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    5be2:	4b03      	ldr	r3, [pc, #12]	; (5bf0 <system_clock_source_osc8m_set_config+0x74>)
    5be4:	68fa      	ldr	r2, [r7, #12]
    5be6:	621a      	str	r2, [r3, #32]
}
    5be8:	46c0      	nop			; (mov r8, r8)
    5bea:	46bd      	mov	sp, r7
    5bec:	b004      	add	sp, #16
    5bee:	bd80      	pop	{r7, pc}
    5bf0:	40000800 	.word	0x40000800

00005bf4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5bf4:	b580      	push	{r7, lr}
    5bf6:	b084      	sub	sp, #16
    5bf8:	af00      	add	r7, sp, #0
    5bfa:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5bfc:	4a43      	ldr	r2, [pc, #268]	; (5d0c <system_clock_source_xosc32k_set_config+0x118>)
    5bfe:	230c      	movs	r3, #12
    5c00:	18fb      	adds	r3, r7, r3
    5c02:	8a92      	ldrh	r2, [r2, #20]
    5c04:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    5c06:	687b      	ldr	r3, [r7, #4]
    5c08:	785b      	ldrb	r3, [r3, #1]
    5c0a:	1c1a      	adds	r2, r3, #0
    5c0c:	2307      	movs	r3, #7
    5c0e:	4013      	ands	r3, r2
    5c10:	b2da      	uxtb	r2, r3
    5c12:	230c      	movs	r3, #12
    5c14:	18fb      	adds	r3, r7, r3
    5c16:	2107      	movs	r1, #7
    5c18:	400a      	ands	r2, r1
    5c1a:	0010      	movs	r0, r2
    5c1c:	785a      	ldrb	r2, [r3, #1]
    5c1e:	2107      	movs	r1, #7
    5c20:	438a      	bics	r2, r1
    5c22:	1c11      	adds	r1, r2, #0
    5c24:	1c02      	adds	r2, r0, #0
    5c26:	430a      	orrs	r2, r1
    5c28:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5c2a:	687b      	ldr	r3, [r7, #4]
    5c2c:	781b      	ldrb	r3, [r3, #0]
    5c2e:	2b00      	cmp	r3, #0
    5c30:	d106      	bne.n	5c40 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    5c32:	230c      	movs	r3, #12
    5c34:	18fb      	adds	r3, r7, r3
    5c36:	781a      	ldrb	r2, [r3, #0]
    5c38:	2104      	movs	r1, #4
    5c3a:	430a      	orrs	r2, r1
    5c3c:	701a      	strb	r2, [r3, #0]
    5c3e:	e005      	b.n	5c4c <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    5c40:	230c      	movs	r3, #12
    5c42:	18fb      	adds	r3, r7, r3
    5c44:	781a      	ldrb	r2, [r3, #0]
    5c46:	2104      	movs	r1, #4
    5c48:	438a      	bics	r2, r1
    5c4a:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5c4c:	687b      	ldr	r3, [r7, #4]
    5c4e:	789a      	ldrb	r2, [r3, #2]
    5c50:	230c      	movs	r3, #12
    5c52:	18fb      	adds	r3, r7, r3
    5c54:	2101      	movs	r1, #1
    5c56:	400a      	ands	r2, r1
    5c58:	0150      	lsls	r0, r2, #5
    5c5a:	781a      	ldrb	r2, [r3, #0]
    5c5c:	2120      	movs	r1, #32
    5c5e:	438a      	bics	r2, r1
    5c60:	1c11      	adds	r1, r2, #0
    5c62:	1c02      	adds	r2, r0, #0
    5c64:	430a      	orrs	r2, r1
    5c66:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    5c68:	687b      	ldr	r3, [r7, #4]
    5c6a:	78da      	ldrb	r2, [r3, #3]
    5c6c:	230c      	movs	r3, #12
    5c6e:	18fb      	adds	r3, r7, r3
    5c70:	2101      	movs	r1, #1
    5c72:	400a      	ands	r2, r1
    5c74:	0110      	lsls	r0, r2, #4
    5c76:	781a      	ldrb	r2, [r3, #0]
    5c78:	2110      	movs	r1, #16
    5c7a:	438a      	bics	r2, r1
    5c7c:	1c11      	adds	r1, r2, #0
    5c7e:	1c02      	adds	r2, r0, #0
    5c80:	430a      	orrs	r2, r1
    5c82:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    5c84:	687b      	ldr	r3, [r7, #4]
    5c86:	791a      	ldrb	r2, [r3, #4]
    5c88:	230c      	movs	r3, #12
    5c8a:	18fb      	adds	r3, r7, r3
    5c8c:	2101      	movs	r1, #1
    5c8e:	400a      	ands	r2, r1
    5c90:	00d0      	lsls	r0, r2, #3
    5c92:	781a      	ldrb	r2, [r3, #0]
    5c94:	2108      	movs	r1, #8
    5c96:	438a      	bics	r2, r1
    5c98:	1c11      	adds	r1, r2, #0
    5c9a:	1c02      	adds	r2, r0, #0
    5c9c:	430a      	orrs	r2, r1
    5c9e:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    5ca0:	687b      	ldr	r3, [r7, #4]
    5ca2:	7b5a      	ldrb	r2, [r3, #13]
    5ca4:	230c      	movs	r3, #12
    5ca6:	18fb      	adds	r3, r7, r3
    5ca8:	01d0      	lsls	r0, r2, #7
    5caa:	781a      	ldrb	r2, [r3, #0]
    5cac:	217f      	movs	r1, #127	; 0x7f
    5cae:	400a      	ands	r2, r1
    5cb0:	1c11      	adds	r1, r2, #0
    5cb2:	1c02      	adds	r2, r0, #0
    5cb4:	430a      	orrs	r2, r1
    5cb6:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5cb8:	687b      	ldr	r3, [r7, #4]
    5cba:	7b1a      	ldrb	r2, [r3, #12]
    5cbc:	230c      	movs	r3, #12
    5cbe:	18fb      	adds	r3, r7, r3
    5cc0:	2101      	movs	r1, #1
    5cc2:	400a      	ands	r2, r1
    5cc4:	0190      	lsls	r0, r2, #6
    5cc6:	781a      	ldrb	r2, [r3, #0]
    5cc8:	2140      	movs	r1, #64	; 0x40
    5cca:	438a      	bics	r2, r1
    5ccc:	1c11      	adds	r1, r2, #0
    5cce:	1c02      	adds	r2, r0, #0
    5cd0:	430a      	orrs	r2, r1
    5cd2:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    5cd4:	687b      	ldr	r3, [r7, #4]
    5cd6:	7b9a      	ldrb	r2, [r3, #14]
    5cd8:	230c      	movs	r3, #12
    5cda:	18fb      	adds	r3, r7, r3
    5cdc:	2101      	movs	r1, #1
    5cde:	400a      	ands	r2, r1
    5ce0:	0110      	lsls	r0, r2, #4
    5ce2:	785a      	ldrb	r2, [r3, #1]
    5ce4:	2110      	movs	r1, #16
    5ce6:	438a      	bics	r2, r1
    5ce8:	1c11      	adds	r1, r2, #0
    5cea:	1c02      	adds	r2, r0, #0
    5cec:	430a      	orrs	r2, r1
    5cee:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5cf0:	687b      	ldr	r3, [r7, #4]
    5cf2:	689a      	ldr	r2, [r3, #8]
    5cf4:	4b06      	ldr	r3, [pc, #24]	; (5d10 <system_clock_source_xosc32k_set_config+0x11c>)
    5cf6:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    5cf8:	4a04      	ldr	r2, [pc, #16]	; (5d0c <system_clock_source_xosc32k_set_config+0x118>)
    5cfa:	230c      	movs	r3, #12
    5cfc:	18fb      	adds	r3, r7, r3
    5cfe:	881b      	ldrh	r3, [r3, #0]
    5d00:	8293      	strh	r3, [r2, #20]
}
    5d02:	46c0      	nop			; (mov r8, r8)
    5d04:	46bd      	mov	sp, r7
    5d06:	b004      	add	sp, #16
    5d08:	bd80      	pop	{r7, pc}
    5d0a:	46c0      	nop			; (mov r8, r8)
    5d0c:	40000800 	.word	0x40000800
    5d10:	20000160 	.word	0x20000160

00005d14 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5d14:	b580      	push	{r7, lr}
    5d16:	b082      	sub	sp, #8
    5d18:	af00      	add	r7, sp, #0
    5d1a:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5d1c:	687b      	ldr	r3, [r7, #4]
    5d1e:	7a1b      	ldrb	r3, [r3, #8]
    5d20:	029b      	lsls	r3, r3, #10
    5d22:	041b      	lsls	r3, r3, #16
    5d24:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5d26:	687b      	ldr	r3, [r7, #4]
    5d28:	895b      	ldrh	r3, [r3, #10]
    5d2a:	059b      	lsls	r3, r3, #22
    5d2c:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5d2e:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    5d30:	4b2a      	ldr	r3, [pc, #168]	; (5ddc <system_clock_source_dfll_set_config+0xc8>)
    5d32:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5d34:	687b      	ldr	r3, [r7, #4]
    5d36:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    5d38:	687b      	ldr	r3, [r7, #4]
    5d3a:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    5d3c:	4313      	orrs	r3, r2
    5d3e:	b2db      	uxtb	r3, r3
    5d40:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    5d42:	687b      	ldr	r3, [r7, #4]
    5d44:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    5d46:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    5d48:	687a      	ldr	r2, [r7, #4]
    5d4a:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    5d4c:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5d4e:	687b      	ldr	r3, [r7, #4]
    5d50:	785b      	ldrb	r3, [r3, #1]
    5d52:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    5d54:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    5d56:	4b21      	ldr	r3, [pc, #132]	; (5ddc <system_clock_source_dfll_set_config+0xc8>)
    5d58:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5d5a:	687b      	ldr	r3, [r7, #4]
    5d5c:	781b      	ldrb	r3, [r3, #0]
    5d5e:	2b04      	cmp	r3, #4
    5d60:	d116      	bne.n	5d90 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5d62:	687b      	ldr	r3, [r7, #4]
    5d64:	7b1b      	ldrb	r3, [r3, #12]
    5d66:	069b      	lsls	r3, r3, #26
    5d68:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5d6a:	687b      	ldr	r3, [r7, #4]
    5d6c:	89db      	ldrh	r3, [r3, #14]
    5d6e:	041b      	lsls	r3, r3, #16
    5d70:	0019      	movs	r1, r3
    5d72:	4b1b      	ldr	r3, [pc, #108]	; (5de0 <system_clock_source_dfll_set_config+0xcc>)
    5d74:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5d76:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5d78:	687a      	ldr	r2, [r7, #4]
    5d7a:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5d7c:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    5d7e:	4b17      	ldr	r3, [pc, #92]	; (5ddc <system_clock_source_dfll_set_config+0xc8>)
    5d80:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    5d82:	4b16      	ldr	r3, [pc, #88]	; (5ddc <system_clock_source_dfll_set_config+0xc8>)
    5d84:	681b      	ldr	r3, [r3, #0]
    5d86:	687a      	ldr	r2, [r7, #4]
    5d88:	7812      	ldrb	r2, [r2, #0]
    5d8a:	431a      	orrs	r2, r3
    5d8c:	4b13      	ldr	r3, [pc, #76]	; (5ddc <system_clock_source_dfll_set_config+0xc8>)
    5d8e:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5d90:	687b      	ldr	r3, [r7, #4]
    5d92:	781b      	ldrb	r3, [r3, #0]
    5d94:	2b20      	cmp	r3, #32
    5d96:	d11c      	bne.n	5dd2 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5d98:	687b      	ldr	r3, [r7, #4]
    5d9a:	7b1b      	ldrb	r3, [r3, #12]
    5d9c:	069b      	lsls	r3, r3, #26
    5d9e:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5da0:	687b      	ldr	r3, [r7, #4]
    5da2:	89db      	ldrh	r3, [r3, #14]
    5da4:	041b      	lsls	r3, r3, #16
    5da6:	0019      	movs	r1, r3
    5da8:	4b0d      	ldr	r3, [pc, #52]	; (5de0 <system_clock_source_dfll_set_config+0xcc>)
    5daa:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5dac:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5dae:	687a      	ldr	r2, [r7, #4]
    5db0:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5db2:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    5db4:	4b09      	ldr	r3, [pc, #36]	; (5ddc <system_clock_source_dfll_set_config+0xc8>)
    5db6:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5db8:	4b08      	ldr	r3, [pc, #32]	; (5ddc <system_clock_source_dfll_set_config+0xc8>)
    5dba:	681b      	ldr	r3, [r3, #0]
    5dbc:	687a      	ldr	r2, [r7, #4]
    5dbe:	7812      	ldrb	r2, [r2, #0]
    5dc0:	2104      	movs	r1, #4
    5dc2:	430a      	orrs	r2, r1
    5dc4:	b2d2      	uxtb	r2, r2
    5dc6:	4313      	orrs	r3, r2
    5dc8:	2280      	movs	r2, #128	; 0x80
    5dca:	00d2      	lsls	r2, r2, #3
    5dcc:	431a      	orrs	r2, r3
    5dce:	4b03      	ldr	r3, [pc, #12]	; (5ddc <system_clock_source_dfll_set_config+0xc8>)
    5dd0:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    5dd2:	46c0      	nop			; (mov r8, r8)
    5dd4:	46bd      	mov	sp, r7
    5dd6:	b002      	add	sp, #8
    5dd8:	bd80      	pop	{r7, pc}
    5dda:	46c0      	nop			; (mov r8, r8)
    5ddc:	20000160 	.word	0x20000160
    5de0:	03ff0000 	.word	0x03ff0000

00005de4 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    5de4:	b580      	push	{r7, lr}
    5de6:	b082      	sub	sp, #8
    5de8:	af00      	add	r7, sp, #0
    5dea:	0002      	movs	r2, r0
    5dec:	1dfb      	adds	r3, r7, #7
    5dee:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5df0:	1dfb      	adds	r3, r7, #7
    5df2:	781b      	ldrb	r3, [r3, #0]
    5df4:	2b08      	cmp	r3, #8
    5df6:	d83b      	bhi.n	5e70 <system_clock_source_enable+0x8c>
    5df8:	009a      	lsls	r2, r3, #2
    5dfa:	4b21      	ldr	r3, [pc, #132]	; (5e80 <system_clock_source_enable+0x9c>)
    5dfc:	18d3      	adds	r3, r2, r3
    5dfe:	681b      	ldr	r3, [r3, #0]
    5e00:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5e02:	4b20      	ldr	r3, [pc, #128]	; (5e84 <system_clock_source_enable+0xa0>)
    5e04:	4a1f      	ldr	r2, [pc, #124]	; (5e84 <system_clock_source_enable+0xa0>)
    5e06:	6a12      	ldr	r2, [r2, #32]
    5e08:	2102      	movs	r1, #2
    5e0a:	430a      	orrs	r2, r1
    5e0c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    5e0e:	2300      	movs	r3, #0
    5e10:	e031      	b.n	5e76 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5e12:	4b1c      	ldr	r3, [pc, #112]	; (5e84 <system_clock_source_enable+0xa0>)
    5e14:	4a1b      	ldr	r2, [pc, #108]	; (5e84 <system_clock_source_enable+0xa0>)
    5e16:	6992      	ldr	r2, [r2, #24]
    5e18:	2102      	movs	r1, #2
    5e1a:	430a      	orrs	r2, r1
    5e1c:	619a      	str	r2, [r3, #24]
		break;
    5e1e:	e029      	b.n	5e74 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5e20:	4a18      	ldr	r2, [pc, #96]	; (5e84 <system_clock_source_enable+0xa0>)
    5e22:	4b18      	ldr	r3, [pc, #96]	; (5e84 <system_clock_source_enable+0xa0>)
    5e24:	8a1b      	ldrh	r3, [r3, #16]
    5e26:	b29b      	uxth	r3, r3
    5e28:	2102      	movs	r1, #2
    5e2a:	430b      	orrs	r3, r1
    5e2c:	b29b      	uxth	r3, r3
    5e2e:	8213      	strh	r3, [r2, #16]
		break;
    5e30:	e020      	b.n	5e74 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5e32:	4a14      	ldr	r2, [pc, #80]	; (5e84 <system_clock_source_enable+0xa0>)
    5e34:	4b13      	ldr	r3, [pc, #76]	; (5e84 <system_clock_source_enable+0xa0>)
    5e36:	8a9b      	ldrh	r3, [r3, #20]
    5e38:	b29b      	uxth	r3, r3
    5e3a:	2102      	movs	r1, #2
    5e3c:	430b      	orrs	r3, r1
    5e3e:	b29b      	uxth	r3, r3
    5e40:	8293      	strh	r3, [r2, #20]
		break;
    5e42:	e017      	b.n	5e74 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5e44:	4b10      	ldr	r3, [pc, #64]	; (5e88 <system_clock_source_enable+0xa4>)
    5e46:	681b      	ldr	r3, [r3, #0]
    5e48:	2202      	movs	r2, #2
    5e4a:	431a      	orrs	r2, r3
    5e4c:	4b0e      	ldr	r3, [pc, #56]	; (5e88 <system_clock_source_enable+0xa4>)
    5e4e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    5e50:	4b0e      	ldr	r3, [pc, #56]	; (5e8c <system_clock_source_enable+0xa8>)
    5e52:	4798      	blx	r3
		break;
    5e54:	e00e      	b.n	5e74 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5e56:	4a0b      	ldr	r2, [pc, #44]	; (5e84 <system_clock_source_enable+0xa0>)
    5e58:	490a      	ldr	r1, [pc, #40]	; (5e84 <system_clock_source_enable+0xa0>)
    5e5a:	2344      	movs	r3, #68	; 0x44
    5e5c:	5ccb      	ldrb	r3, [r1, r3]
    5e5e:	b2db      	uxtb	r3, r3
    5e60:	2102      	movs	r1, #2
    5e62:	430b      	orrs	r3, r1
    5e64:	b2d9      	uxtb	r1, r3
    5e66:	2344      	movs	r3, #68	; 0x44
    5e68:	54d1      	strb	r1, [r2, r3]
		break;
    5e6a:	e003      	b.n	5e74 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    5e6c:	2300      	movs	r3, #0
    5e6e:	e002      	b.n	5e76 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5e70:	2317      	movs	r3, #23
    5e72:	e000      	b.n	5e76 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    5e74:	2300      	movs	r3, #0
}
    5e76:	0018      	movs	r0, r3
    5e78:	46bd      	mov	sp, r7
    5e7a:	b002      	add	sp, #8
    5e7c:	bd80      	pop	{r7, pc}
    5e7e:	46c0      	nop			; (mov r8, r8)
    5e80:	0000af3c 	.word	0x0000af3c
    5e84:	40000800 	.word	0x40000800
    5e88:	20000160 	.word	0x20000160
    5e8c:	00005a79 	.word	0x00005a79

00005e90 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    5e90:	b580      	push	{r7, lr}
    5e92:	b084      	sub	sp, #16
    5e94:	af00      	add	r7, sp, #0
    5e96:	0002      	movs	r2, r0
    5e98:	1dfb      	adds	r3, r7, #7
    5e9a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    5e9c:	2300      	movs	r3, #0
    5e9e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    5ea0:	1dfb      	adds	r3, r7, #7
    5ea2:	781b      	ldrb	r3, [r3, #0]
    5ea4:	2b08      	cmp	r3, #8
    5ea6:	d821      	bhi.n	5eec <system_clock_source_is_ready+0x5c>
    5ea8:	009a      	lsls	r2, r3, #2
    5eaa:	4b18      	ldr	r3, [pc, #96]	; (5f0c <system_clock_source_is_ready+0x7c>)
    5eac:	18d3      	adds	r3, r2, r3
    5eae:	681b      	ldr	r3, [r3, #0]
    5eb0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    5eb2:	2308      	movs	r3, #8
    5eb4:	60fb      	str	r3, [r7, #12]
		break;
    5eb6:	e01b      	b.n	5ef0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    5eb8:	2304      	movs	r3, #4
    5eba:	60fb      	str	r3, [r7, #12]
		break;
    5ebc:	e018      	b.n	5ef0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    5ebe:	2301      	movs	r3, #1
    5ec0:	60fb      	str	r3, [r7, #12]
		break;
    5ec2:	e015      	b.n	5ef0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    5ec4:	2302      	movs	r3, #2
    5ec6:	60fb      	str	r3, [r7, #12]
		break;
    5ec8:	e012      	b.n	5ef0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    5eca:	23d0      	movs	r3, #208	; 0xd0
    5ecc:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    5ece:	e00f      	b.n	5ef0 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    5ed0:	4a0f      	ldr	r2, [pc, #60]	; (5f10 <system_clock_source_is_ready+0x80>)
    5ed2:	2350      	movs	r3, #80	; 0x50
    5ed4:	5cd3      	ldrb	r3, [r2, r3]
    5ed6:	b2db      	uxtb	r3, r3
    5ed8:	001a      	movs	r2, r3
    5eda:	2303      	movs	r3, #3
    5edc:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    5ede:	3b03      	subs	r3, #3
    5ee0:	425a      	negs	r2, r3
    5ee2:	4153      	adcs	r3, r2
    5ee4:	b2db      	uxtb	r3, r3
    5ee6:	e00c      	b.n	5f02 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    5ee8:	2301      	movs	r3, #1
    5eea:	e00a      	b.n	5f02 <system_clock_source_is_ready+0x72>

	default:
		return false;
    5eec:	2300      	movs	r3, #0
    5eee:	e008      	b.n	5f02 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5ef0:	4b07      	ldr	r3, [pc, #28]	; (5f10 <system_clock_source_is_ready+0x80>)
    5ef2:	68db      	ldr	r3, [r3, #12]
    5ef4:	68fa      	ldr	r2, [r7, #12]
    5ef6:	401a      	ands	r2, r3
    5ef8:	68fb      	ldr	r3, [r7, #12]
    5efa:	1ad3      	subs	r3, r2, r3
    5efc:	425a      	negs	r2, r3
    5efe:	4153      	adcs	r3, r2
    5f00:	b2db      	uxtb	r3, r3
}
    5f02:	0018      	movs	r0, r3
    5f04:	46bd      	mov	sp, r7
    5f06:	b004      	add	sp, #16
    5f08:	bd80      	pop	{r7, pc}
    5f0a:	46c0      	nop			; (mov r8, r8)
    5f0c:	0000af60 	.word	0x0000af60
    5f10:	40000800 	.word	0x40000800

00005f14 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    5f14:	b580      	push	{r7, lr}
    5f16:	b082      	sub	sp, #8
    5f18:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    5f1a:	003b      	movs	r3, r7
    5f1c:	2202      	movs	r2, #2
    5f1e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5f20:	2300      	movs	r3, #0
    5f22:	607b      	str	r3, [r7, #4]
    5f24:	e009      	b.n	5f3a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5f26:	687b      	ldr	r3, [r7, #4]
    5f28:	b2db      	uxtb	r3, r3
    5f2a:	003a      	movs	r2, r7
    5f2c:	0011      	movs	r1, r2
    5f2e:	0018      	movs	r0, r3
    5f30:	4b05      	ldr	r3, [pc, #20]	; (5f48 <_switch_peripheral_gclk+0x34>)
    5f32:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5f34:	687b      	ldr	r3, [r7, #4]
    5f36:	3301      	adds	r3, #1
    5f38:	607b      	str	r3, [r7, #4]
    5f3a:	687b      	ldr	r3, [r7, #4]
    5f3c:	2b24      	cmp	r3, #36	; 0x24
    5f3e:	d9f2      	bls.n	5f26 <_switch_peripheral_gclk+0x12>
	}
}
    5f40:	46c0      	nop			; (mov r8, r8)
    5f42:	46bd      	mov	sp, r7
    5f44:	b002      	add	sp, #8
    5f46:	bd80      	pop	{r7, pc}
    5f48:	000064e9 	.word	0x000064e9

00005f4c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5f4c:	b580      	push	{r7, lr}
    5f4e:	b0aa      	sub	sp, #168	; 0xa8
    5f50:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5f52:	4b85      	ldr	r3, [pc, #532]	; (6168 <system_clock_init+0x21c>)
    5f54:	22c2      	movs	r2, #194	; 0xc2
    5f56:	00d2      	lsls	r2, r2, #3
    5f58:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    5f5a:	2002      	movs	r0, #2
    5f5c:	4b83      	ldr	r3, [pc, #524]	; (616c <system_clock_init+0x220>)
    5f5e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    5f60:	4b83      	ldr	r3, [pc, #524]	; (6170 <system_clock_init+0x224>)
    5f62:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    5f64:	2394      	movs	r3, #148	; 0x94
    5f66:	18fb      	adds	r3, r7, r3
    5f68:	0018      	movs	r0, r3
    5f6a:	4b82      	ldr	r3, [pc, #520]	; (6174 <system_clock_init+0x228>)
    5f6c:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    5f6e:	2394      	movs	r3, #148	; 0x94
    5f70:	18fb      	adds	r3, r7, r3
    5f72:	2280      	movs	r2, #128	; 0x80
    5f74:	0212      	lsls	r2, r2, #8
    5f76:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    5f78:	2394      	movs	r3, #148	; 0x94
    5f7a:	18fb      	adds	r3, r7, r3
    5f7c:	2200      	movs	r2, #0
    5f7e:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5f80:	2394      	movs	r3, #148	; 0x94
    5f82:	18fb      	adds	r3, r7, r3
    5f84:	2206      	movs	r2, #6
    5f86:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    5f88:	2394      	movs	r3, #148	; 0x94
    5f8a:	18fb      	adds	r3, r7, r3
    5f8c:	2200      	movs	r2, #0
    5f8e:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    5f90:	2394      	movs	r3, #148	; 0x94
    5f92:	18fb      	adds	r3, r7, r3
    5f94:	2200      	movs	r2, #0
    5f96:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    5f98:	2394      	movs	r3, #148	; 0x94
    5f9a:	18fb      	adds	r3, r7, r3
    5f9c:	2201      	movs	r2, #1
    5f9e:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    5fa0:	2394      	movs	r3, #148	; 0x94
    5fa2:	18fb      	adds	r3, r7, r3
    5fa4:	2200      	movs	r2, #0
    5fa6:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    5fa8:	2394      	movs	r3, #148	; 0x94
    5faa:	18fb      	adds	r3, r7, r3
    5fac:	2201      	movs	r2, #1
    5fae:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5fb0:	2394      	movs	r3, #148	; 0x94
    5fb2:	18fb      	adds	r3, r7, r3
    5fb4:	0018      	movs	r0, r3
    5fb6:	4b70      	ldr	r3, [pc, #448]	; (6178 <system_clock_init+0x22c>)
    5fb8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    5fba:	2005      	movs	r0, #5
    5fbc:	4b6f      	ldr	r3, [pc, #444]	; (617c <system_clock_init+0x230>)
    5fbe:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5fc0:	46c0      	nop			; (mov r8, r8)
    5fc2:	2005      	movs	r0, #5
    5fc4:	4b6e      	ldr	r3, [pc, #440]	; (6180 <system_clock_init+0x234>)
    5fc6:	4798      	blx	r3
    5fc8:	0003      	movs	r3, r0
    5fca:	001a      	movs	r2, r3
    5fcc:	2301      	movs	r3, #1
    5fce:	4053      	eors	r3, r2
    5fd0:	b2db      	uxtb	r3, r3
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d1f5      	bne.n	5fc2 <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    5fd6:	2380      	movs	r3, #128	; 0x80
    5fd8:	18fb      	adds	r3, r7, r3
    5fda:	0018      	movs	r0, r3
    5fdc:	4b69      	ldr	r3, [pc, #420]	; (6184 <system_clock_init+0x238>)
    5fde:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5fe0:	2380      	movs	r3, #128	; 0x80
    5fe2:	18fb      	adds	r3, r7, r3
    5fe4:	2204      	movs	r2, #4
    5fe6:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    5fe8:	2380      	movs	r3, #128	; 0x80
    5fea:	18fb      	adds	r3, r7, r3
    5fec:	2200      	movs	r2, #0
    5fee:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    5ff0:	4b65      	ldr	r3, [pc, #404]	; (6188 <system_clock_init+0x23c>)
    5ff2:	681b      	ldr	r3, [r3, #0]
    5ff4:	0e9b      	lsrs	r3, r3, #26
    5ff6:	22a4      	movs	r2, #164	; 0xa4
    5ff8:	18ba      	adds	r2, r7, r2
    5ffa:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    5ffc:	23a4      	movs	r3, #164	; 0xa4
    5ffe:	18fb      	adds	r3, r7, r3
    6000:	681b      	ldr	r3, [r3, #0]
    6002:	2b3f      	cmp	r3, #63	; 0x3f
    6004:	d103      	bne.n	600e <system_clock_init+0xc2>
		coarse = 0x1f;
    6006:	231f      	movs	r3, #31
    6008:	22a4      	movs	r2, #164	; 0xa4
    600a:	18ba      	adds	r2, r7, r2
    600c:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    600e:	23a4      	movs	r3, #164	; 0xa4
    6010:	18fb      	adds	r3, r7, r3
    6012:	681b      	ldr	r3, [r3, #0]
    6014:	b2da      	uxtb	r2, r3
    6016:	2380      	movs	r3, #128	; 0x80
    6018:	18fb      	adds	r3, r7, r3
    601a:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    601c:	2380      	movs	r3, #128	; 0x80
    601e:	18fb      	adds	r3, r7, r3
    6020:	2200      	movs	r2, #0
    6022:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6024:	2380      	movs	r3, #128	; 0x80
    6026:	18fb      	adds	r3, r7, r3
    6028:	2200      	movs	r2, #0
    602a:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    602c:	2380      	movs	r3, #128	; 0x80
    602e:	18fb      	adds	r3, r7, r3
    6030:	2200      	movs	r2, #0
    6032:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6034:	2380      	movs	r3, #128	; 0x80
    6036:	18fb      	adds	r3, r7, r3
    6038:	2200      	movs	r2, #0
    603a:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    603c:	2380      	movs	r3, #128	; 0x80
    603e:	18fb      	adds	r3, r7, r3
    6040:	22b7      	movs	r2, #183	; 0xb7
    6042:	00d2      	lsls	r2, r2, #3
    6044:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    6046:	2380      	movs	r3, #128	; 0x80
    6048:	18fb      	adds	r3, r7, r3
    604a:	2203      	movs	r2, #3
    604c:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    604e:	2380      	movs	r3, #128	; 0x80
    6050:	18fb      	adds	r3, r7, r3
    6052:	221f      	movs	r2, #31
    6054:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    6056:	2380      	movs	r3, #128	; 0x80
    6058:	18fb      	adds	r3, r7, r3
    605a:	0018      	movs	r0, r3
    605c:	4b4b      	ldr	r3, [pc, #300]	; (618c <system_clock_init+0x240>)
    605e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    6060:	237c      	movs	r3, #124	; 0x7c
    6062:	18fb      	adds	r3, r7, r3
    6064:	0018      	movs	r0, r3
    6066:	4b4a      	ldr	r3, [pc, #296]	; (6190 <system_clock_init+0x244>)
    6068:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    606a:	237c      	movs	r3, #124	; 0x7c
    606c:	18fb      	adds	r3, r7, r3
    606e:	2200      	movs	r2, #0
    6070:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    6072:	237c      	movs	r3, #124	; 0x7c
    6074:	18fb      	adds	r3, r7, r3
    6076:	2201      	movs	r2, #1
    6078:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    607a:	237c      	movs	r3, #124	; 0x7c
    607c:	18fb      	adds	r3, r7, r3
    607e:	2201      	movs	r2, #1
    6080:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    6082:	237c      	movs	r3, #124	; 0x7c
    6084:	18fb      	adds	r3, r7, r3
    6086:	0018      	movs	r0, r3
    6088:	4b42      	ldr	r3, [pc, #264]	; (6194 <system_clock_init+0x248>)
    608a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    608c:	2006      	movs	r0, #6
    608e:	4b3b      	ldr	r3, [pc, #236]	; (617c <system_clock_init+0x230>)
    6090:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6092:	4b41      	ldr	r3, [pc, #260]	; (6198 <system_clock_init+0x24c>)
    6094:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    6096:	2364      	movs	r3, #100	; 0x64
    6098:	18fb      	adds	r3, r7, r3
    609a:	0018      	movs	r0, r3
    609c:	4b3f      	ldr	r3, [pc, #252]	; (619c <system_clock_init+0x250>)
    609e:	4798      	blx	r3
    60a0:	2364      	movs	r3, #100	; 0x64
    60a2:	18fb      	adds	r3, r7, r3
    60a4:	2205      	movs	r2, #5
    60a6:	701a      	strb	r2, [r3, #0]
    60a8:	2364      	movs	r3, #100	; 0x64
    60aa:	18fb      	adds	r3, r7, r3
    60ac:	2201      	movs	r2, #1
    60ae:	605a      	str	r2, [r3, #4]
    60b0:	2364      	movs	r3, #100	; 0x64
    60b2:	18fb      	adds	r3, r7, r3
    60b4:	2200      	movs	r2, #0
    60b6:	721a      	strb	r2, [r3, #8]
    60b8:	2364      	movs	r3, #100	; 0x64
    60ba:	18fb      	adds	r3, r7, r3
    60bc:	2200      	movs	r2, #0
    60be:	725a      	strb	r2, [r3, #9]
    60c0:	2364      	movs	r3, #100	; 0x64
    60c2:	18fb      	adds	r3, r7, r3
    60c4:	0019      	movs	r1, r3
    60c6:	2001      	movs	r0, #1
    60c8:	4b35      	ldr	r3, [pc, #212]	; (61a0 <system_clock_init+0x254>)
    60ca:	4798      	blx	r3
    60cc:	2001      	movs	r0, #1
    60ce:	4b35      	ldr	r3, [pc, #212]	; (61a4 <system_clock_init+0x258>)
    60d0:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    60d2:	230c      	movs	r3, #12
    60d4:	18fb      	adds	r3, r7, r3
    60d6:	0018      	movs	r0, r3
    60d8:	4b33      	ldr	r3, [pc, #204]	; (61a8 <system_clock_init+0x25c>)
    60da:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    60dc:	230c      	movs	r3, #12
    60de:	18fb      	adds	r3, r7, r3
    60e0:	2201      	movs	r2, #1
    60e2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    60e4:	230c      	movs	r3, #12
    60e6:	18fb      	adds	r3, r7, r3
    60e8:	0019      	movs	r1, r3
    60ea:	2000      	movs	r0, #0
    60ec:	4b2f      	ldr	r3, [pc, #188]	; (61ac <system_clock_init+0x260>)
    60ee:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    60f0:	2000      	movs	r0, #0
    60f2:	4b2f      	ldr	r3, [pc, #188]	; (61b0 <system_clock_init+0x264>)
    60f4:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    60f6:	2007      	movs	r0, #7
    60f8:	4b20      	ldr	r3, [pc, #128]	; (617c <system_clock_init+0x230>)
    60fa:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    60fc:	46c0      	nop			; (mov r8, r8)
    60fe:	2007      	movs	r0, #7
    6100:	4b1f      	ldr	r3, [pc, #124]	; (6180 <system_clock_init+0x234>)
    6102:	4798      	blx	r3
    6104:	0003      	movs	r3, r0
    6106:	001a      	movs	r2, r3
    6108:	2301      	movs	r3, #1
    610a:	4053      	eors	r3, r2
    610c:	b2db      	uxtb	r3, r3
    610e:	2b00      	cmp	r3, #0
    6110:	d1f5      	bne.n	60fe <system_clock_init+0x1b2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    6112:	2000      	movs	r0, #0
    6114:	4b27      	ldr	r3, [pc, #156]	; (61b4 <system_clock_init+0x268>)
    6116:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    6118:	2100      	movs	r1, #0
    611a:	2000      	movs	r0, #0
    611c:	4b26      	ldr	r3, [pc, #152]	; (61b8 <system_clock_init+0x26c>)
    611e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    6120:	2100      	movs	r1, #0
    6122:	2001      	movs	r0, #1
    6124:	4b24      	ldr	r3, [pc, #144]	; (61b8 <system_clock_init+0x26c>)
    6126:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    6128:	2100      	movs	r1, #0
    612a:	2002      	movs	r0, #2
    612c:	4b22      	ldr	r3, [pc, #136]	; (61b8 <system_clock_init+0x26c>)
    612e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6130:	003b      	movs	r3, r7
    6132:	0018      	movs	r0, r3
    6134:	4b19      	ldr	r3, [pc, #100]	; (619c <system_clock_init+0x250>)
    6136:	4798      	blx	r3
    6138:	003b      	movs	r3, r7
    613a:	2207      	movs	r2, #7
    613c:	701a      	strb	r2, [r3, #0]
    613e:	003b      	movs	r3, r7
    6140:	2201      	movs	r2, #1
    6142:	605a      	str	r2, [r3, #4]
    6144:	003b      	movs	r3, r7
    6146:	2201      	movs	r2, #1
    6148:	721a      	strb	r2, [r3, #8]
    614a:	003b      	movs	r3, r7
    614c:	2200      	movs	r2, #0
    614e:	725a      	strb	r2, [r3, #9]
    6150:	003b      	movs	r3, r7
    6152:	0019      	movs	r1, r3
    6154:	2000      	movs	r0, #0
    6156:	4b12      	ldr	r3, [pc, #72]	; (61a0 <system_clock_init+0x254>)
    6158:	4798      	blx	r3
    615a:	2000      	movs	r0, #0
    615c:	4b11      	ldr	r3, [pc, #68]	; (61a4 <system_clock_init+0x258>)
    615e:	4798      	blx	r3
#endif
}
    6160:	46c0      	nop			; (mov r8, r8)
    6162:	46bd      	mov	sp, r7
    6164:	b02a      	add	sp, #168	; 0xa8
    6166:	bd80      	pop	{r7, pc}
    6168:	40000800 	.word	0x40000800
    616c:	00005a29 	.word	0x00005a29
    6170:	00005f15 	.word	0x00005f15
    6174:	000058f9 	.word	0x000058f9
    6178:	00005bf5 	.word	0x00005bf5
    617c:	00005de5 	.word	0x00005de5
    6180:	00005e91 	.word	0x00005e91
    6184:	00005963 	.word	0x00005963
    6188:	00806024 	.word	0x00806024
    618c:	00005d15 	.word	0x00005d15
    6190:	00005941 	.word	0x00005941
    6194:	00005b7d 	.word	0x00005b7d
    6198:	00006261 	.word	0x00006261
    619c:	000058b5 	.word	0x000058b5
    61a0:	00006291 	.word	0x00006291
    61a4:	000063b5 	.word	0x000063b5
    61a8:	000058e3 	.word	0x000058e3
    61ac:	000064e9 	.word	0x000064e9
    61b0:	0000652d 	.word	0x0000652d
    61b4:	000059b5 	.word	0x000059b5
    61b8:	000059d5 	.word	0x000059d5

000061bc <system_apb_clock_set_mask>:
{
    61bc:	b580      	push	{r7, lr}
    61be:	b082      	sub	sp, #8
    61c0:	af00      	add	r7, sp, #0
    61c2:	0002      	movs	r2, r0
    61c4:	6039      	str	r1, [r7, #0]
    61c6:	1dfb      	adds	r3, r7, #7
    61c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    61ca:	1dfb      	adds	r3, r7, #7
    61cc:	781b      	ldrb	r3, [r3, #0]
    61ce:	2b01      	cmp	r3, #1
    61d0:	d00a      	beq.n	61e8 <system_apb_clock_set_mask+0x2c>
    61d2:	2b02      	cmp	r3, #2
    61d4:	d00f      	beq.n	61f6 <system_apb_clock_set_mask+0x3a>
    61d6:	2b00      	cmp	r3, #0
    61d8:	d114      	bne.n	6204 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    61da:	4b0e      	ldr	r3, [pc, #56]	; (6214 <system_apb_clock_set_mask+0x58>)
    61dc:	4a0d      	ldr	r2, [pc, #52]	; (6214 <system_apb_clock_set_mask+0x58>)
    61de:	6991      	ldr	r1, [r2, #24]
    61e0:	683a      	ldr	r2, [r7, #0]
    61e2:	430a      	orrs	r2, r1
    61e4:	619a      	str	r2, [r3, #24]
			break;
    61e6:	e00f      	b.n	6208 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    61e8:	4b0a      	ldr	r3, [pc, #40]	; (6214 <system_apb_clock_set_mask+0x58>)
    61ea:	4a0a      	ldr	r2, [pc, #40]	; (6214 <system_apb_clock_set_mask+0x58>)
    61ec:	69d1      	ldr	r1, [r2, #28]
    61ee:	683a      	ldr	r2, [r7, #0]
    61f0:	430a      	orrs	r2, r1
    61f2:	61da      	str	r2, [r3, #28]
			break;
    61f4:	e008      	b.n	6208 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    61f6:	4b07      	ldr	r3, [pc, #28]	; (6214 <system_apb_clock_set_mask+0x58>)
    61f8:	4a06      	ldr	r2, [pc, #24]	; (6214 <system_apb_clock_set_mask+0x58>)
    61fa:	6a11      	ldr	r1, [r2, #32]
    61fc:	683a      	ldr	r2, [r7, #0]
    61fe:	430a      	orrs	r2, r1
    6200:	621a      	str	r2, [r3, #32]
			break;
    6202:	e001      	b.n	6208 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6204:	2317      	movs	r3, #23
    6206:	e000      	b.n	620a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6208:	2300      	movs	r3, #0
}
    620a:	0018      	movs	r0, r3
    620c:	46bd      	mov	sp, r7
    620e:	b002      	add	sp, #8
    6210:	bd80      	pop	{r7, pc}
    6212:	46c0      	nop			; (mov r8, r8)
    6214:	40000400 	.word	0x40000400

00006218 <system_interrupt_enter_critical_section>:
{
    6218:	b580      	push	{r7, lr}
    621a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    621c:	4b02      	ldr	r3, [pc, #8]	; (6228 <system_interrupt_enter_critical_section+0x10>)
    621e:	4798      	blx	r3
}
    6220:	46c0      	nop			; (mov r8, r8)
    6222:	46bd      	mov	sp, r7
    6224:	bd80      	pop	{r7, pc}
    6226:	46c0      	nop			; (mov r8, r8)
    6228:	00002e5d 	.word	0x00002e5d

0000622c <system_interrupt_leave_critical_section>:
{
    622c:	b580      	push	{r7, lr}
    622e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6230:	4b02      	ldr	r3, [pc, #8]	; (623c <system_interrupt_leave_critical_section+0x10>)
    6232:	4798      	blx	r3
}
    6234:	46c0      	nop			; (mov r8, r8)
    6236:	46bd      	mov	sp, r7
    6238:	bd80      	pop	{r7, pc}
    623a:	46c0      	nop			; (mov r8, r8)
    623c:	00002eb1 	.word	0x00002eb1

00006240 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    6240:	b580      	push	{r7, lr}
    6242:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6244:	4b05      	ldr	r3, [pc, #20]	; (625c <system_gclk_is_syncing+0x1c>)
    6246:	785b      	ldrb	r3, [r3, #1]
    6248:	b2db      	uxtb	r3, r3
    624a:	b25b      	sxtb	r3, r3
    624c:	2b00      	cmp	r3, #0
    624e:	da01      	bge.n	6254 <system_gclk_is_syncing+0x14>
		return true;
    6250:	2301      	movs	r3, #1
    6252:	e000      	b.n	6256 <system_gclk_is_syncing+0x16>
	}

	return false;
    6254:	2300      	movs	r3, #0
}
    6256:	0018      	movs	r0, r3
    6258:	46bd      	mov	sp, r7
    625a:	bd80      	pop	{r7, pc}
    625c:	40000c00 	.word	0x40000c00

00006260 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    6260:	b580      	push	{r7, lr}
    6262:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    6264:	2108      	movs	r1, #8
    6266:	2000      	movs	r0, #0
    6268:	4b07      	ldr	r3, [pc, #28]	; (6288 <system_gclk_init+0x28>)
    626a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    626c:	4b07      	ldr	r3, [pc, #28]	; (628c <system_gclk_init+0x2c>)
    626e:	2201      	movs	r2, #1
    6270:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    6272:	46c0      	nop			; (mov r8, r8)
    6274:	4b05      	ldr	r3, [pc, #20]	; (628c <system_gclk_init+0x2c>)
    6276:	781b      	ldrb	r3, [r3, #0]
    6278:	b2db      	uxtb	r3, r3
    627a:	001a      	movs	r2, r3
    627c:	2301      	movs	r3, #1
    627e:	4013      	ands	r3, r2
    6280:	d1f8      	bne.n	6274 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    6282:	46c0      	nop			; (mov r8, r8)
    6284:	46bd      	mov	sp, r7
    6286:	bd80      	pop	{r7, pc}
    6288:	000061bd 	.word	0x000061bd
    628c:	40000c00 	.word	0x40000c00

00006290 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6290:	b580      	push	{r7, lr}
    6292:	b086      	sub	sp, #24
    6294:	af00      	add	r7, sp, #0
    6296:	0002      	movs	r2, r0
    6298:	6039      	str	r1, [r7, #0]
    629a:	1dfb      	adds	r3, r7, #7
    629c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    629e:	1dfb      	adds	r3, r7, #7
    62a0:	781b      	ldrb	r3, [r3, #0]
    62a2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    62a4:	1dfb      	adds	r3, r7, #7
    62a6:	781b      	ldrb	r3, [r3, #0]
    62a8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    62aa:	683b      	ldr	r3, [r7, #0]
    62ac:	781b      	ldrb	r3, [r3, #0]
    62ae:	021b      	lsls	r3, r3, #8
    62b0:	001a      	movs	r2, r3
    62b2:	697b      	ldr	r3, [r7, #20]
    62b4:	4313      	orrs	r3, r2
    62b6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    62b8:	683b      	ldr	r3, [r7, #0]
    62ba:	785b      	ldrb	r3, [r3, #1]
    62bc:	2b00      	cmp	r3, #0
    62be:	d004      	beq.n	62ca <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    62c0:	697b      	ldr	r3, [r7, #20]
    62c2:	2280      	movs	r2, #128	; 0x80
    62c4:	02d2      	lsls	r2, r2, #11
    62c6:	4313      	orrs	r3, r2
    62c8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    62ca:	683b      	ldr	r3, [r7, #0]
    62cc:	7a5b      	ldrb	r3, [r3, #9]
    62ce:	2b00      	cmp	r3, #0
    62d0:	d004      	beq.n	62dc <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    62d2:	697b      	ldr	r3, [r7, #20]
    62d4:	2280      	movs	r2, #128	; 0x80
    62d6:	0312      	lsls	r2, r2, #12
    62d8:	4313      	orrs	r3, r2
    62da:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    62dc:	683b      	ldr	r3, [r7, #0]
    62de:	685b      	ldr	r3, [r3, #4]
    62e0:	2b01      	cmp	r3, #1
    62e2:	d92c      	bls.n	633e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    62e4:	683b      	ldr	r3, [r7, #0]
    62e6:	685a      	ldr	r2, [r3, #4]
    62e8:	683b      	ldr	r3, [r7, #0]
    62ea:	685b      	ldr	r3, [r3, #4]
    62ec:	3b01      	subs	r3, #1
    62ee:	4013      	ands	r3, r2
    62f0:	d11a      	bne.n	6328 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    62f2:	2300      	movs	r3, #0
    62f4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    62f6:	2302      	movs	r3, #2
    62f8:	60bb      	str	r3, [r7, #8]
    62fa:	e005      	b.n	6308 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    62fc:	68fb      	ldr	r3, [r7, #12]
    62fe:	3301      	adds	r3, #1
    6300:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    6302:	68bb      	ldr	r3, [r7, #8]
    6304:	005b      	lsls	r3, r3, #1
    6306:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    6308:	683b      	ldr	r3, [r7, #0]
    630a:	685a      	ldr	r2, [r3, #4]
    630c:	68bb      	ldr	r3, [r7, #8]
    630e:	429a      	cmp	r2, r3
    6310:	d8f4      	bhi.n	62fc <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6312:	68fb      	ldr	r3, [r7, #12]
    6314:	021b      	lsls	r3, r3, #8
    6316:	693a      	ldr	r2, [r7, #16]
    6318:	4313      	orrs	r3, r2
    631a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    631c:	697b      	ldr	r3, [r7, #20]
    631e:	2280      	movs	r2, #128	; 0x80
    6320:	0352      	lsls	r2, r2, #13
    6322:	4313      	orrs	r3, r2
    6324:	617b      	str	r3, [r7, #20]
    6326:	e00a      	b.n	633e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6328:	683b      	ldr	r3, [r7, #0]
    632a:	685b      	ldr	r3, [r3, #4]
    632c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    632e:	693a      	ldr	r2, [r7, #16]
    6330:	4313      	orrs	r3, r2
    6332:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6334:	697b      	ldr	r3, [r7, #20]
    6336:	2280      	movs	r2, #128	; 0x80
    6338:	0292      	lsls	r2, r2, #10
    633a:	4313      	orrs	r3, r2
    633c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    633e:	683b      	ldr	r3, [r7, #0]
    6340:	7a1b      	ldrb	r3, [r3, #8]
    6342:	2b00      	cmp	r3, #0
    6344:	d004      	beq.n	6350 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6346:	697b      	ldr	r3, [r7, #20]
    6348:	2280      	movs	r2, #128	; 0x80
    634a:	0392      	lsls	r2, r2, #14
    634c:	4313      	orrs	r3, r2
    634e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    6350:	46c0      	nop			; (mov r8, r8)
    6352:	4b13      	ldr	r3, [pc, #76]	; (63a0 <system_gclk_gen_set_config+0x110>)
    6354:	4798      	blx	r3
    6356:	1e03      	subs	r3, r0, #0
    6358:	d1fb      	bne.n	6352 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    635a:	4b12      	ldr	r3, [pc, #72]	; (63a4 <system_gclk_gen_set_config+0x114>)
    635c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    635e:	4a12      	ldr	r2, [pc, #72]	; (63a8 <system_gclk_gen_set_config+0x118>)
    6360:	1dfb      	adds	r3, r7, #7
    6362:	781b      	ldrb	r3, [r3, #0]
    6364:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6366:	46c0      	nop			; (mov r8, r8)
    6368:	4b0d      	ldr	r3, [pc, #52]	; (63a0 <system_gclk_gen_set_config+0x110>)
    636a:	4798      	blx	r3
    636c:	1e03      	subs	r3, r0, #0
    636e:	d1fb      	bne.n	6368 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6370:	4b0e      	ldr	r3, [pc, #56]	; (63ac <system_gclk_gen_set_config+0x11c>)
    6372:	693a      	ldr	r2, [r7, #16]
    6374:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    6376:	46c0      	nop			; (mov r8, r8)
    6378:	4b09      	ldr	r3, [pc, #36]	; (63a0 <system_gclk_gen_set_config+0x110>)
    637a:	4798      	blx	r3
    637c:	1e03      	subs	r3, r0, #0
    637e:	d1fb      	bne.n	6378 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6380:	4b0a      	ldr	r3, [pc, #40]	; (63ac <system_gclk_gen_set_config+0x11c>)
    6382:	4a0a      	ldr	r2, [pc, #40]	; (63ac <system_gclk_gen_set_config+0x11c>)
    6384:	6851      	ldr	r1, [r2, #4]
    6386:	2280      	movs	r2, #128	; 0x80
    6388:	0252      	lsls	r2, r2, #9
    638a:	4011      	ands	r1, r2
    638c:	697a      	ldr	r2, [r7, #20]
    638e:	430a      	orrs	r2, r1
    6390:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6392:	4b07      	ldr	r3, [pc, #28]	; (63b0 <system_gclk_gen_set_config+0x120>)
    6394:	4798      	blx	r3
}
    6396:	46c0      	nop			; (mov r8, r8)
    6398:	46bd      	mov	sp, r7
    639a:	b006      	add	sp, #24
    639c:	bd80      	pop	{r7, pc}
    639e:	46c0      	nop			; (mov r8, r8)
    63a0:	00006241 	.word	0x00006241
    63a4:	00006219 	.word	0x00006219
    63a8:	40000c08 	.word	0x40000c08
    63ac:	40000c00 	.word	0x40000c00
    63b0:	0000622d 	.word	0x0000622d

000063b4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    63b4:	b580      	push	{r7, lr}
    63b6:	b082      	sub	sp, #8
    63b8:	af00      	add	r7, sp, #0
    63ba:	0002      	movs	r2, r0
    63bc:	1dfb      	adds	r3, r7, #7
    63be:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    63c0:	46c0      	nop			; (mov r8, r8)
    63c2:	4b0e      	ldr	r3, [pc, #56]	; (63fc <system_gclk_gen_enable+0x48>)
    63c4:	4798      	blx	r3
    63c6:	1e03      	subs	r3, r0, #0
    63c8:	d1fb      	bne.n	63c2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    63ca:	4b0d      	ldr	r3, [pc, #52]	; (6400 <system_gclk_gen_enable+0x4c>)
    63cc:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    63ce:	4a0d      	ldr	r2, [pc, #52]	; (6404 <system_gclk_gen_enable+0x50>)
    63d0:	1dfb      	adds	r3, r7, #7
    63d2:	781b      	ldrb	r3, [r3, #0]
    63d4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    63d6:	46c0      	nop			; (mov r8, r8)
    63d8:	4b08      	ldr	r3, [pc, #32]	; (63fc <system_gclk_gen_enable+0x48>)
    63da:	4798      	blx	r3
    63dc:	1e03      	subs	r3, r0, #0
    63de:	d1fb      	bne.n	63d8 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    63e0:	4b09      	ldr	r3, [pc, #36]	; (6408 <system_gclk_gen_enable+0x54>)
    63e2:	4a09      	ldr	r2, [pc, #36]	; (6408 <system_gclk_gen_enable+0x54>)
    63e4:	6852      	ldr	r2, [r2, #4]
    63e6:	2180      	movs	r1, #128	; 0x80
    63e8:	0249      	lsls	r1, r1, #9
    63ea:	430a      	orrs	r2, r1
    63ec:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    63ee:	4b07      	ldr	r3, [pc, #28]	; (640c <system_gclk_gen_enable+0x58>)
    63f0:	4798      	blx	r3
}
    63f2:	46c0      	nop			; (mov r8, r8)
    63f4:	46bd      	mov	sp, r7
    63f6:	b002      	add	sp, #8
    63f8:	bd80      	pop	{r7, pc}
    63fa:	46c0      	nop			; (mov r8, r8)
    63fc:	00006241 	.word	0x00006241
    6400:	00006219 	.word	0x00006219
    6404:	40000c04 	.word	0x40000c04
    6408:	40000c00 	.word	0x40000c00
    640c:	0000622d 	.word	0x0000622d

00006410 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6410:	b580      	push	{r7, lr}
    6412:	b086      	sub	sp, #24
    6414:	af00      	add	r7, sp, #0
    6416:	0002      	movs	r2, r0
    6418:	1dfb      	adds	r3, r7, #7
    641a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    641c:	46c0      	nop			; (mov r8, r8)
    641e:	4b2a      	ldr	r3, [pc, #168]	; (64c8 <system_gclk_gen_get_hz+0xb8>)
    6420:	4798      	blx	r3
    6422:	1e03      	subs	r3, r0, #0
    6424:	d1fb      	bne.n	641e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6426:	4b29      	ldr	r3, [pc, #164]	; (64cc <system_gclk_gen_get_hz+0xbc>)
    6428:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    642a:	4a29      	ldr	r2, [pc, #164]	; (64d0 <system_gclk_gen_get_hz+0xc0>)
    642c:	1dfb      	adds	r3, r7, #7
    642e:	781b      	ldrb	r3, [r3, #0]
    6430:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6432:	46c0      	nop			; (mov r8, r8)
    6434:	4b24      	ldr	r3, [pc, #144]	; (64c8 <system_gclk_gen_get_hz+0xb8>)
    6436:	4798      	blx	r3
    6438:	1e03      	subs	r3, r0, #0
    643a:	d1fb      	bne.n	6434 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    643c:	4b25      	ldr	r3, [pc, #148]	; (64d4 <system_gclk_gen_get_hz+0xc4>)
    643e:	685b      	ldr	r3, [r3, #4]
    6440:	04db      	lsls	r3, r3, #19
    6442:	0edb      	lsrs	r3, r3, #27
    6444:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6446:	0018      	movs	r0, r3
    6448:	4b23      	ldr	r3, [pc, #140]	; (64d8 <system_gclk_gen_get_hz+0xc8>)
    644a:	4798      	blx	r3
    644c:	0003      	movs	r3, r0
    644e:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6450:	4a1f      	ldr	r2, [pc, #124]	; (64d0 <system_gclk_gen_get_hz+0xc0>)
    6452:	1dfb      	adds	r3, r7, #7
    6454:	781b      	ldrb	r3, [r3, #0]
    6456:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6458:	4b1e      	ldr	r3, [pc, #120]	; (64d4 <system_gclk_gen_get_hz+0xc4>)
    645a:	685b      	ldr	r3, [r3, #4]
    645c:	02db      	lsls	r3, r3, #11
    645e:	0fdb      	lsrs	r3, r3, #31
    6460:	b2da      	uxtb	r2, r3
    6462:	2313      	movs	r3, #19
    6464:	18fb      	adds	r3, r7, r3
    6466:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6468:	4a1c      	ldr	r2, [pc, #112]	; (64dc <system_gclk_gen_get_hz+0xcc>)
    646a:	1dfb      	adds	r3, r7, #7
    646c:	781b      	ldrb	r3, [r3, #0]
    646e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6470:	46c0      	nop			; (mov r8, r8)
    6472:	4b15      	ldr	r3, [pc, #84]	; (64c8 <system_gclk_gen_get_hz+0xb8>)
    6474:	4798      	blx	r3
    6476:	1e03      	subs	r3, r0, #0
    6478:	d1fb      	bne.n	6472 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    647a:	4b16      	ldr	r3, [pc, #88]	; (64d4 <system_gclk_gen_get_hz+0xc4>)
    647c:	689b      	ldr	r3, [r3, #8]
    647e:	021b      	lsls	r3, r3, #8
    6480:	0c1b      	lsrs	r3, r3, #16
    6482:	b29b      	uxth	r3, r3
    6484:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    6486:	4b16      	ldr	r3, [pc, #88]	; (64e0 <system_gclk_gen_get_hz+0xd0>)
    6488:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    648a:	2313      	movs	r3, #19
    648c:	18fb      	adds	r3, r7, r3
    648e:	781b      	ldrb	r3, [r3, #0]
    6490:	2b00      	cmp	r3, #0
    6492:	d109      	bne.n	64a8 <system_gclk_gen_get_hz+0x98>
    6494:	68fb      	ldr	r3, [r7, #12]
    6496:	2b01      	cmp	r3, #1
    6498:	d906      	bls.n	64a8 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    649a:	4b12      	ldr	r3, [pc, #72]	; (64e4 <system_gclk_gen_get_hz+0xd4>)
    649c:	68f9      	ldr	r1, [r7, #12]
    649e:	6978      	ldr	r0, [r7, #20]
    64a0:	4798      	blx	r3
    64a2:	0003      	movs	r3, r0
    64a4:	617b      	str	r3, [r7, #20]
    64a6:	e00a      	b.n	64be <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    64a8:	2313      	movs	r3, #19
    64aa:	18fb      	adds	r3, r7, r3
    64ac:	781b      	ldrb	r3, [r3, #0]
    64ae:	2b00      	cmp	r3, #0
    64b0:	d005      	beq.n	64be <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    64b2:	68fb      	ldr	r3, [r7, #12]
    64b4:	3301      	adds	r3, #1
    64b6:	697a      	ldr	r2, [r7, #20]
    64b8:	40da      	lsrs	r2, r3
    64ba:	0013      	movs	r3, r2
    64bc:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    64be:	697b      	ldr	r3, [r7, #20]
}
    64c0:	0018      	movs	r0, r3
    64c2:	46bd      	mov	sp, r7
    64c4:	b006      	add	sp, #24
    64c6:	bd80      	pop	{r7, pc}
    64c8:	00006241 	.word	0x00006241
    64cc:	00006219 	.word	0x00006219
    64d0:	40000c04 	.word	0x40000c04
    64d4:	40000c00 	.word	0x40000c00
    64d8:	00005abd 	.word	0x00005abd
    64dc:	40000c08 	.word	0x40000c08
    64e0:	0000622d 	.word	0x0000622d
    64e4:	0000a2ad 	.word	0x0000a2ad

000064e8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    64e8:	b580      	push	{r7, lr}
    64ea:	b084      	sub	sp, #16
    64ec:	af00      	add	r7, sp, #0
    64ee:	0002      	movs	r2, r0
    64f0:	6039      	str	r1, [r7, #0]
    64f2:	1dfb      	adds	r3, r7, #7
    64f4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    64f6:	1dfb      	adds	r3, r7, #7
    64f8:	781b      	ldrb	r3, [r3, #0]
    64fa:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    64fc:	683b      	ldr	r3, [r7, #0]
    64fe:	781b      	ldrb	r3, [r3, #0]
    6500:	021b      	lsls	r3, r3, #8
    6502:	001a      	movs	r2, r3
    6504:	68fb      	ldr	r3, [r7, #12]
    6506:	4313      	orrs	r3, r2
    6508:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    650a:	1dfb      	adds	r3, r7, #7
    650c:	781b      	ldrb	r3, [r3, #0]
    650e:	0018      	movs	r0, r3
    6510:	4b04      	ldr	r3, [pc, #16]	; (6524 <system_gclk_chan_set_config+0x3c>)
    6512:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6514:	4b04      	ldr	r3, [pc, #16]	; (6528 <system_gclk_chan_set_config+0x40>)
    6516:	68fa      	ldr	r2, [r7, #12]
    6518:	b292      	uxth	r2, r2
    651a:	805a      	strh	r2, [r3, #2]
}
    651c:	46c0      	nop			; (mov r8, r8)
    651e:	46bd      	mov	sp, r7
    6520:	b004      	add	sp, #16
    6522:	bd80      	pop	{r7, pc}
    6524:	00006575 	.word	0x00006575
    6528:	40000c00 	.word	0x40000c00

0000652c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    652c:	b580      	push	{r7, lr}
    652e:	b082      	sub	sp, #8
    6530:	af00      	add	r7, sp, #0
    6532:	0002      	movs	r2, r0
    6534:	1dfb      	adds	r3, r7, #7
    6536:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6538:	4b0a      	ldr	r3, [pc, #40]	; (6564 <system_gclk_chan_enable+0x38>)
    653a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    653c:	4a0a      	ldr	r2, [pc, #40]	; (6568 <system_gclk_chan_enable+0x3c>)
    653e:	1dfb      	adds	r3, r7, #7
    6540:	781b      	ldrb	r3, [r3, #0]
    6542:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6544:	4909      	ldr	r1, [pc, #36]	; (656c <system_gclk_chan_enable+0x40>)
    6546:	4b09      	ldr	r3, [pc, #36]	; (656c <system_gclk_chan_enable+0x40>)
    6548:	885b      	ldrh	r3, [r3, #2]
    654a:	b29b      	uxth	r3, r3
    654c:	2280      	movs	r2, #128	; 0x80
    654e:	01d2      	lsls	r2, r2, #7
    6550:	4313      	orrs	r3, r2
    6552:	b29b      	uxth	r3, r3
    6554:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    6556:	4b06      	ldr	r3, [pc, #24]	; (6570 <system_gclk_chan_enable+0x44>)
    6558:	4798      	blx	r3
}
    655a:	46c0      	nop			; (mov r8, r8)
    655c:	46bd      	mov	sp, r7
    655e:	b002      	add	sp, #8
    6560:	bd80      	pop	{r7, pc}
    6562:	46c0      	nop			; (mov r8, r8)
    6564:	00006219 	.word	0x00006219
    6568:	40000c02 	.word	0x40000c02
    656c:	40000c00 	.word	0x40000c00
    6570:	0000622d 	.word	0x0000622d

00006574 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6574:	b580      	push	{r7, lr}
    6576:	b084      	sub	sp, #16
    6578:	af00      	add	r7, sp, #0
    657a:	0002      	movs	r2, r0
    657c:	1dfb      	adds	r3, r7, #7
    657e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6580:	4b1c      	ldr	r3, [pc, #112]	; (65f4 <system_gclk_chan_disable+0x80>)
    6582:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6584:	4a1c      	ldr	r2, [pc, #112]	; (65f8 <system_gclk_chan_disable+0x84>)
    6586:	1dfb      	adds	r3, r7, #7
    6588:	781b      	ldrb	r3, [r3, #0]
    658a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    658c:	4b1b      	ldr	r3, [pc, #108]	; (65fc <system_gclk_chan_disable+0x88>)
    658e:	885b      	ldrh	r3, [r3, #2]
    6590:	051b      	lsls	r3, r3, #20
    6592:	0f1b      	lsrs	r3, r3, #28
    6594:	b2db      	uxtb	r3, r3
    6596:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    6598:	4a18      	ldr	r2, [pc, #96]	; (65fc <system_gclk_chan_disable+0x88>)
    659a:	8853      	ldrh	r3, [r2, #2]
    659c:	4918      	ldr	r1, [pc, #96]	; (6600 <system_gclk_chan_disable+0x8c>)
    659e:	400b      	ands	r3, r1
    65a0:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    65a2:	4a16      	ldr	r2, [pc, #88]	; (65fc <system_gclk_chan_disable+0x88>)
    65a4:	4b15      	ldr	r3, [pc, #84]	; (65fc <system_gclk_chan_disable+0x88>)
    65a6:	885b      	ldrh	r3, [r3, #2]
    65a8:	b29b      	uxth	r3, r3
    65aa:	4916      	ldr	r1, [pc, #88]	; (6604 <system_gclk_chan_disable+0x90>)
    65ac:	400b      	ands	r3, r1
    65ae:	b29b      	uxth	r3, r3
    65b0:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    65b2:	46c0      	nop			; (mov r8, r8)
    65b4:	4b11      	ldr	r3, [pc, #68]	; (65fc <system_gclk_chan_disable+0x88>)
    65b6:	885b      	ldrh	r3, [r3, #2]
    65b8:	b29b      	uxth	r3, r3
    65ba:	001a      	movs	r2, r3
    65bc:	2380      	movs	r3, #128	; 0x80
    65be:	01db      	lsls	r3, r3, #7
    65c0:	4013      	ands	r3, r2
    65c2:	d1f7      	bne.n	65b4 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    65c4:	4a0d      	ldr	r2, [pc, #52]	; (65fc <system_gclk_chan_disable+0x88>)
    65c6:	68fb      	ldr	r3, [r7, #12]
    65c8:	b2db      	uxtb	r3, r3
    65ca:	1c19      	adds	r1, r3, #0
    65cc:	230f      	movs	r3, #15
    65ce:	400b      	ands	r3, r1
    65d0:	b2d9      	uxtb	r1, r3
    65d2:	8853      	ldrh	r3, [r2, #2]
    65d4:	1c08      	adds	r0, r1, #0
    65d6:	210f      	movs	r1, #15
    65d8:	4001      	ands	r1, r0
    65da:	0208      	lsls	r0, r1, #8
    65dc:	4908      	ldr	r1, [pc, #32]	; (6600 <system_gclk_chan_disable+0x8c>)
    65de:	400b      	ands	r3, r1
    65e0:	1c19      	adds	r1, r3, #0
    65e2:	1c03      	adds	r3, r0, #0
    65e4:	430b      	orrs	r3, r1
    65e6:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    65e8:	4b07      	ldr	r3, [pc, #28]	; (6608 <system_gclk_chan_disable+0x94>)
    65ea:	4798      	blx	r3
}
    65ec:	46c0      	nop			; (mov r8, r8)
    65ee:	46bd      	mov	sp, r7
    65f0:	b004      	add	sp, #16
    65f2:	bd80      	pop	{r7, pc}
    65f4:	00006219 	.word	0x00006219
    65f8:	40000c02 	.word	0x40000c02
    65fc:	40000c00 	.word	0x40000c00
    6600:	fffff0ff 	.word	0xfffff0ff
    6604:	ffffbfff 	.word	0xffffbfff
    6608:	0000622d 	.word	0x0000622d

0000660c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    660c:	b580      	push	{r7, lr}
    660e:	b084      	sub	sp, #16
    6610:	af00      	add	r7, sp, #0
    6612:	0002      	movs	r2, r0
    6614:	1dfb      	adds	r3, r7, #7
    6616:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6618:	4b0d      	ldr	r3, [pc, #52]	; (6650 <system_gclk_chan_get_hz+0x44>)
    661a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    661c:	4a0d      	ldr	r2, [pc, #52]	; (6654 <system_gclk_chan_get_hz+0x48>)
    661e:	1dfb      	adds	r3, r7, #7
    6620:	781b      	ldrb	r3, [r3, #0]
    6622:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6624:	4b0c      	ldr	r3, [pc, #48]	; (6658 <system_gclk_chan_get_hz+0x4c>)
    6626:	885b      	ldrh	r3, [r3, #2]
    6628:	051b      	lsls	r3, r3, #20
    662a:	0f1b      	lsrs	r3, r3, #28
    662c:	b2da      	uxtb	r2, r3
    662e:	230f      	movs	r3, #15
    6630:	18fb      	adds	r3, r7, r3
    6632:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6634:	4b09      	ldr	r3, [pc, #36]	; (665c <system_gclk_chan_get_hz+0x50>)
    6636:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6638:	230f      	movs	r3, #15
    663a:	18fb      	adds	r3, r7, r3
    663c:	781b      	ldrb	r3, [r3, #0]
    663e:	0018      	movs	r0, r3
    6640:	4b07      	ldr	r3, [pc, #28]	; (6660 <system_gclk_chan_get_hz+0x54>)
    6642:	4798      	blx	r3
    6644:	0003      	movs	r3, r0
}
    6646:	0018      	movs	r0, r3
    6648:	46bd      	mov	sp, r7
    664a:	b004      	add	sp, #16
    664c:	bd80      	pop	{r7, pc}
    664e:	46c0      	nop			; (mov r8, r8)
    6650:	00006219 	.word	0x00006219
    6654:	40000c02 	.word	0x40000c02
    6658:	40000c00 	.word	0x40000c00
    665c:	0000622d 	.word	0x0000622d
    6660:	00006411 	.word	0x00006411

00006664 <system_pinmux_get_group_from_gpio_pin>:
{
    6664:	b580      	push	{r7, lr}
    6666:	b084      	sub	sp, #16
    6668:	af00      	add	r7, sp, #0
    666a:	0002      	movs	r2, r0
    666c:	1dfb      	adds	r3, r7, #7
    666e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6670:	230f      	movs	r3, #15
    6672:	18fb      	adds	r3, r7, r3
    6674:	1dfa      	adds	r2, r7, #7
    6676:	7812      	ldrb	r2, [r2, #0]
    6678:	09d2      	lsrs	r2, r2, #7
    667a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    667c:	230e      	movs	r3, #14
    667e:	18fb      	adds	r3, r7, r3
    6680:	1dfa      	adds	r2, r7, #7
    6682:	7812      	ldrb	r2, [r2, #0]
    6684:	0952      	lsrs	r2, r2, #5
    6686:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6688:	4b0d      	ldr	r3, [pc, #52]	; (66c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    668a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    668c:	230f      	movs	r3, #15
    668e:	18fb      	adds	r3, r7, r3
    6690:	781b      	ldrb	r3, [r3, #0]
    6692:	2b00      	cmp	r3, #0
    6694:	d10f      	bne.n	66b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6696:	230f      	movs	r3, #15
    6698:	18fb      	adds	r3, r7, r3
    669a:	781b      	ldrb	r3, [r3, #0]
    669c:	009b      	lsls	r3, r3, #2
    669e:	2210      	movs	r2, #16
    66a0:	4694      	mov	ip, r2
    66a2:	44bc      	add	ip, r7
    66a4:	4463      	add	r3, ip
    66a6:	3b08      	subs	r3, #8
    66a8:	681a      	ldr	r2, [r3, #0]
    66aa:	230e      	movs	r3, #14
    66ac:	18fb      	adds	r3, r7, r3
    66ae:	781b      	ldrb	r3, [r3, #0]
    66b0:	01db      	lsls	r3, r3, #7
    66b2:	18d3      	adds	r3, r2, r3
    66b4:	e000      	b.n	66b8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    66b6:	2300      	movs	r3, #0
}
    66b8:	0018      	movs	r0, r3
    66ba:	46bd      	mov	sp, r7
    66bc:	b004      	add	sp, #16
    66be:	bd80      	pop	{r7, pc}
    66c0:	41004400 	.word	0x41004400

000066c4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    66c4:	b580      	push	{r7, lr}
    66c6:	b088      	sub	sp, #32
    66c8:	af00      	add	r7, sp, #0
    66ca:	60f8      	str	r0, [r7, #12]
    66cc:	60b9      	str	r1, [r7, #8]
    66ce:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    66d0:	2300      	movs	r3, #0
    66d2:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    66d4:	687b      	ldr	r3, [r7, #4]
    66d6:	78db      	ldrb	r3, [r3, #3]
    66d8:	2201      	movs	r2, #1
    66da:	4053      	eors	r3, r2
    66dc:	b2db      	uxtb	r3, r3
    66de:	2b00      	cmp	r3, #0
    66e0:	d035      	beq.n	674e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    66e2:	687b      	ldr	r3, [r7, #4]
    66e4:	781b      	ldrb	r3, [r3, #0]
    66e6:	2b80      	cmp	r3, #128	; 0x80
    66e8:	d00b      	beq.n	6702 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    66ea:	69fb      	ldr	r3, [r7, #28]
    66ec:	2280      	movs	r2, #128	; 0x80
    66ee:	0252      	lsls	r2, r2, #9
    66f0:	4313      	orrs	r3, r2
    66f2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    66f4:	687b      	ldr	r3, [r7, #4]
    66f6:	781b      	ldrb	r3, [r3, #0]
    66f8:	061b      	lsls	r3, r3, #24
    66fa:	001a      	movs	r2, r3
    66fc:	69fb      	ldr	r3, [r7, #28]
    66fe:	4313      	orrs	r3, r2
    6700:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6702:	687b      	ldr	r3, [r7, #4]
    6704:	785b      	ldrb	r3, [r3, #1]
    6706:	2b00      	cmp	r3, #0
    6708:	d003      	beq.n	6712 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    670a:	687b      	ldr	r3, [r7, #4]
    670c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    670e:	2b02      	cmp	r3, #2
    6710:	d110      	bne.n	6734 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6712:	69fb      	ldr	r3, [r7, #28]
    6714:	2280      	movs	r2, #128	; 0x80
    6716:	0292      	lsls	r2, r2, #10
    6718:	4313      	orrs	r3, r2
    671a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    671c:	687b      	ldr	r3, [r7, #4]
    671e:	789b      	ldrb	r3, [r3, #2]
    6720:	2b00      	cmp	r3, #0
    6722:	d004      	beq.n	672e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6724:	69fb      	ldr	r3, [r7, #28]
    6726:	2280      	movs	r2, #128	; 0x80
    6728:	02d2      	lsls	r2, r2, #11
    672a:	4313      	orrs	r3, r2
    672c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    672e:	68fb      	ldr	r3, [r7, #12]
    6730:	68ba      	ldr	r2, [r7, #8]
    6732:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6734:	687b      	ldr	r3, [r7, #4]
    6736:	785b      	ldrb	r3, [r3, #1]
    6738:	2b01      	cmp	r3, #1
    673a:	d003      	beq.n	6744 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    673c:	687b      	ldr	r3, [r7, #4]
    673e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6740:	2b02      	cmp	r3, #2
    6742:	d107      	bne.n	6754 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6744:	69fb      	ldr	r3, [r7, #28]
    6746:	4a22      	ldr	r2, [pc, #136]	; (67d0 <_system_pinmux_config+0x10c>)
    6748:	4013      	ands	r3, r2
    674a:	61fb      	str	r3, [r7, #28]
    674c:	e002      	b.n	6754 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    674e:	68fb      	ldr	r3, [r7, #12]
    6750:	68ba      	ldr	r2, [r7, #8]
    6752:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6754:	68bb      	ldr	r3, [r7, #8]
    6756:	041b      	lsls	r3, r3, #16
    6758:	0c1b      	lsrs	r3, r3, #16
    675a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    675c:	68bb      	ldr	r3, [r7, #8]
    675e:	0c1b      	lsrs	r3, r3, #16
    6760:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6762:	69ba      	ldr	r2, [r7, #24]
    6764:	69fb      	ldr	r3, [r7, #28]
    6766:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6768:	22a0      	movs	r2, #160	; 0xa0
    676a:	05d2      	lsls	r2, r2, #23
    676c:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    676e:	68fb      	ldr	r3, [r7, #12]
    6770:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6772:	697a      	ldr	r2, [r7, #20]
    6774:	69fb      	ldr	r3, [r7, #28]
    6776:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6778:	22d0      	movs	r2, #208	; 0xd0
    677a:	0612      	lsls	r2, r2, #24
    677c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    677e:	68fb      	ldr	r3, [r7, #12]
    6780:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6782:	687b      	ldr	r3, [r7, #4]
    6784:	78db      	ldrb	r3, [r3, #3]
    6786:	2201      	movs	r2, #1
    6788:	4053      	eors	r3, r2
    678a:	b2db      	uxtb	r3, r3
    678c:	2b00      	cmp	r3, #0
    678e:	d01a      	beq.n	67c6 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6790:	69fa      	ldr	r2, [r7, #28]
    6792:	2380      	movs	r3, #128	; 0x80
    6794:	02db      	lsls	r3, r3, #11
    6796:	4013      	ands	r3, r2
    6798:	d00a      	beq.n	67b0 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    679a:	687b      	ldr	r3, [r7, #4]
    679c:	789b      	ldrb	r3, [r3, #2]
    679e:	2b01      	cmp	r3, #1
    67a0:	d103      	bne.n	67aa <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    67a2:	68fb      	ldr	r3, [r7, #12]
    67a4:	68ba      	ldr	r2, [r7, #8]
    67a6:	619a      	str	r2, [r3, #24]
    67a8:	e002      	b.n	67b0 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    67aa:	68fb      	ldr	r3, [r7, #12]
    67ac:	68ba      	ldr	r2, [r7, #8]
    67ae:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    67b0:	687b      	ldr	r3, [r7, #4]
    67b2:	785b      	ldrb	r3, [r3, #1]
    67b4:	2b01      	cmp	r3, #1
    67b6:	d003      	beq.n	67c0 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    67b8:	687b      	ldr	r3, [r7, #4]
    67ba:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    67bc:	2b02      	cmp	r3, #2
    67be:	d102      	bne.n	67c6 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    67c0:	68fb      	ldr	r3, [r7, #12]
    67c2:	68ba      	ldr	r2, [r7, #8]
    67c4:	609a      	str	r2, [r3, #8]
		}
	}
}
    67c6:	46c0      	nop			; (mov r8, r8)
    67c8:	46bd      	mov	sp, r7
    67ca:	b008      	add	sp, #32
    67cc:	bd80      	pop	{r7, pc}
    67ce:	46c0      	nop			; (mov r8, r8)
    67d0:	fffbffff 	.word	0xfffbffff

000067d4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    67d4:	b580      	push	{r7, lr}
    67d6:	b084      	sub	sp, #16
    67d8:	af00      	add	r7, sp, #0
    67da:	0002      	movs	r2, r0
    67dc:	6039      	str	r1, [r7, #0]
    67de:	1dfb      	adds	r3, r7, #7
    67e0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    67e2:	1dfb      	adds	r3, r7, #7
    67e4:	781b      	ldrb	r3, [r3, #0]
    67e6:	0018      	movs	r0, r3
    67e8:	4b0a      	ldr	r3, [pc, #40]	; (6814 <system_pinmux_pin_set_config+0x40>)
    67ea:	4798      	blx	r3
    67ec:	0003      	movs	r3, r0
    67ee:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    67f0:	1dfb      	adds	r3, r7, #7
    67f2:	781b      	ldrb	r3, [r3, #0]
    67f4:	221f      	movs	r2, #31
    67f6:	4013      	ands	r3, r2
    67f8:	2201      	movs	r2, #1
    67fa:	409a      	lsls	r2, r3
    67fc:	0013      	movs	r3, r2
    67fe:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6800:	683a      	ldr	r2, [r7, #0]
    6802:	68b9      	ldr	r1, [r7, #8]
    6804:	68fb      	ldr	r3, [r7, #12]
    6806:	0018      	movs	r0, r3
    6808:	4b03      	ldr	r3, [pc, #12]	; (6818 <system_pinmux_pin_set_config+0x44>)
    680a:	4798      	blx	r3
}
    680c:	46c0      	nop			; (mov r8, r8)
    680e:	46bd      	mov	sp, r7
    6810:	b004      	add	sp, #16
    6812:	bd80      	pop	{r7, pc}
    6814:	00006665 	.word	0x00006665
    6818:	000066c5 	.word	0x000066c5

0000681c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    681c:	b580      	push	{r7, lr}
    681e:	af00      	add	r7, sp, #0
	return;
    6820:	46c0      	nop			; (mov r8, r8)
}
    6822:	46bd      	mov	sp, r7
    6824:	bd80      	pop	{r7, pc}
	...

00006828 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6828:	b580      	push	{r7, lr}
    682a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    682c:	4b06      	ldr	r3, [pc, #24]	; (6848 <system_init+0x20>)
    682e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6830:	4b06      	ldr	r3, [pc, #24]	; (684c <system_init+0x24>)
    6832:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6834:	4b06      	ldr	r3, [pc, #24]	; (6850 <system_init+0x28>)
    6836:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6838:	4b06      	ldr	r3, [pc, #24]	; (6854 <system_init+0x2c>)
    683a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    683c:	4b06      	ldr	r3, [pc, #24]	; (6858 <system_init+0x30>)
    683e:	4798      	blx	r3
}
    6840:	46c0      	nop			; (mov r8, r8)
    6842:	46bd      	mov	sp, r7
    6844:	bd80      	pop	{r7, pc}
    6846:	46c0      	nop			; (mov r8, r8)
    6848:	00005f4d 	.word	0x00005f4d
    684c:	000002f9 	.word	0x000002f9
    6850:	0000681d 	.word	0x0000681d
    6854:	0000681d 	.word	0x0000681d
    6858:	0000681d 	.word	0x0000681d

0000685c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    685c:	b580      	push	{r7, lr}
    685e:	b082      	sub	sp, #8
    6860:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    6862:	4b2f      	ldr	r3, [pc, #188]	; (6920 <Reset_Handler+0xc4>)
    6864:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6866:	4b2f      	ldr	r3, [pc, #188]	; (6924 <Reset_Handler+0xc8>)
    6868:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    686a:	687a      	ldr	r2, [r7, #4]
    686c:	683b      	ldr	r3, [r7, #0]
    686e:	429a      	cmp	r2, r3
    6870:	d00c      	beq.n	688c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6872:	e007      	b.n	6884 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6874:	683b      	ldr	r3, [r7, #0]
    6876:	1d1a      	adds	r2, r3, #4
    6878:	603a      	str	r2, [r7, #0]
    687a:	687a      	ldr	r2, [r7, #4]
    687c:	1d11      	adds	r1, r2, #4
    687e:	6079      	str	r1, [r7, #4]
    6880:	6812      	ldr	r2, [r2, #0]
    6882:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    6884:	683a      	ldr	r2, [r7, #0]
    6886:	4b28      	ldr	r3, [pc, #160]	; (6928 <Reset_Handler+0xcc>)
    6888:	429a      	cmp	r2, r3
    688a:	d3f3      	bcc.n	6874 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    688c:	4b27      	ldr	r3, [pc, #156]	; (692c <Reset_Handler+0xd0>)
    688e:	603b      	str	r3, [r7, #0]
    6890:	e004      	b.n	689c <Reset_Handler+0x40>
                *pDest++ = 0;
    6892:	683b      	ldr	r3, [r7, #0]
    6894:	1d1a      	adds	r2, r3, #4
    6896:	603a      	str	r2, [r7, #0]
    6898:	2200      	movs	r2, #0
    689a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    689c:	683a      	ldr	r2, [r7, #0]
    689e:	4b24      	ldr	r3, [pc, #144]	; (6930 <Reset_Handler+0xd4>)
    68a0:	429a      	cmp	r2, r3
    68a2:	d3f6      	bcc.n	6892 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    68a4:	4b23      	ldr	r3, [pc, #140]	; (6934 <Reset_Handler+0xd8>)
    68a6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    68a8:	4b23      	ldr	r3, [pc, #140]	; (6938 <Reset_Handler+0xdc>)
    68aa:	687a      	ldr	r2, [r7, #4]
    68ac:	21ff      	movs	r1, #255	; 0xff
    68ae:	438a      	bics	r2, r1
    68b0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    68b2:	4a22      	ldr	r2, [pc, #136]	; (693c <Reset_Handler+0xe0>)
    68b4:	2390      	movs	r3, #144	; 0x90
    68b6:	005b      	lsls	r3, r3, #1
    68b8:	2102      	movs	r1, #2
    68ba:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    68bc:	4a20      	ldr	r2, [pc, #128]	; (6940 <Reset_Handler+0xe4>)
    68be:	78d3      	ldrb	r3, [r2, #3]
    68c0:	2103      	movs	r1, #3
    68c2:	438b      	bics	r3, r1
    68c4:	1c19      	adds	r1, r3, #0
    68c6:	2302      	movs	r3, #2
    68c8:	430b      	orrs	r3, r1
    68ca:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    68cc:	4a1c      	ldr	r2, [pc, #112]	; (6940 <Reset_Handler+0xe4>)
    68ce:	78d3      	ldrb	r3, [r2, #3]
    68d0:	210c      	movs	r1, #12
    68d2:	438b      	bics	r3, r1
    68d4:	1c19      	adds	r1, r3, #0
    68d6:	2308      	movs	r3, #8
    68d8:	430b      	orrs	r3, r1
    68da:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    68dc:	4a19      	ldr	r2, [pc, #100]	; (6944 <Reset_Handler+0xe8>)
    68de:	7b93      	ldrb	r3, [r2, #14]
    68e0:	2130      	movs	r1, #48	; 0x30
    68e2:	438b      	bics	r3, r1
    68e4:	1c19      	adds	r1, r3, #0
    68e6:	2320      	movs	r3, #32
    68e8:	430b      	orrs	r3, r1
    68ea:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    68ec:	4a15      	ldr	r2, [pc, #84]	; (6944 <Reset_Handler+0xe8>)
    68ee:	7b93      	ldrb	r3, [r2, #14]
    68f0:	210c      	movs	r1, #12
    68f2:	438b      	bics	r3, r1
    68f4:	1c19      	adds	r1, r3, #0
    68f6:	2308      	movs	r3, #8
    68f8:	430b      	orrs	r3, r1
    68fa:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    68fc:	4a11      	ldr	r2, [pc, #68]	; (6944 <Reset_Handler+0xe8>)
    68fe:	7b93      	ldrb	r3, [r2, #14]
    6900:	2103      	movs	r1, #3
    6902:	438b      	bics	r3, r1
    6904:	1c19      	adds	r1, r3, #0
    6906:	2302      	movs	r3, #2
    6908:	430b      	orrs	r3, r1
    690a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    690c:	4a0e      	ldr	r2, [pc, #56]	; (6948 <Reset_Handler+0xec>)
    690e:	6853      	ldr	r3, [r2, #4]
    6910:	2180      	movs	r1, #128	; 0x80
    6912:	430b      	orrs	r3, r1
    6914:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6916:	4b0d      	ldr	r3, [pc, #52]	; (694c <Reset_Handler+0xf0>)
    6918:	4798      	blx	r3

        /* Branch to main function */
        main();
    691a:	4b0d      	ldr	r3, [pc, #52]	; (6950 <Reset_Handler+0xf4>)
    691c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    691e:	e7fe      	b.n	691e <Reset_Handler+0xc2>
    6920:	0000b7d0 	.word	0x0000b7d0
    6924:	20000000 	.word	0x20000000
    6928:	20000094 	.word	0x20000094
    692c:	20000094 	.word	0x20000094
    6930:	20000c94 	.word	0x20000c94
    6934:	00000000 	.word	0x00000000
    6938:	e000ed00 	.word	0xe000ed00
    693c:	41007000 	.word	0x41007000
    6940:	41005000 	.word	0x41005000
    6944:	41004800 	.word	0x41004800
    6948:	41004000 	.word	0x41004000
    694c:	0000a5ed 	.word	0x0000a5ed
    6950:	00009ebd 	.word	0x00009ebd

00006954 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6954:	b580      	push	{r7, lr}
    6956:	af00      	add	r7, sp, #0
        while (1) {
    6958:	e7fe      	b.n	6958 <Dummy_Handler+0x4>
	...

0000695c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    695c:	b580      	push	{r7, lr}
    695e:	b086      	sub	sp, #24
    6960:	af00      	add	r7, sp, #0
    6962:	60f8      	str	r0, [r7, #12]
    6964:	60b9      	str	r1, [r7, #8]
    6966:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6968:	2300      	movs	r3, #0
    696a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    696c:	68fb      	ldr	r3, [r7, #12]
    696e:	2b00      	cmp	r3, #0
    6970:	d012      	beq.n	6998 <_read+0x3c>
		return -1;
    6972:	2301      	movs	r3, #1
    6974:	425b      	negs	r3, r3
    6976:	e013      	b.n	69a0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    6978:	4b0b      	ldr	r3, [pc, #44]	; (69a8 <_read+0x4c>)
    697a:	681a      	ldr	r2, [r3, #0]
    697c:	4b0b      	ldr	r3, [pc, #44]	; (69ac <_read+0x50>)
    697e:	681b      	ldr	r3, [r3, #0]
    6980:	68b9      	ldr	r1, [r7, #8]
    6982:	0018      	movs	r0, r3
    6984:	4790      	blx	r2
		ptr++;
    6986:	68bb      	ldr	r3, [r7, #8]
    6988:	3301      	adds	r3, #1
    698a:	60bb      	str	r3, [r7, #8]
		nChars++;
    698c:	697b      	ldr	r3, [r7, #20]
    698e:	3301      	adds	r3, #1
    6990:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    6992:	687b      	ldr	r3, [r7, #4]
    6994:	3b01      	subs	r3, #1
    6996:	607b      	str	r3, [r7, #4]
    6998:	687b      	ldr	r3, [r7, #4]
    699a:	2b00      	cmp	r3, #0
    699c:	dcec      	bgt.n	6978 <_read+0x1c>
	}
	return nChars;
    699e:	697b      	ldr	r3, [r7, #20]
}
    69a0:	0018      	movs	r0, r3
    69a2:	46bd      	mov	sp, r7
    69a4:	b006      	add	sp, #24
    69a6:	bd80      	pop	{r7, pc}
    69a8:	200009f0 	.word	0x200009f0
    69ac:	200009f8 	.word	0x200009f8

000069b0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    69b0:	b580      	push	{r7, lr}
    69b2:	b086      	sub	sp, #24
    69b4:	af00      	add	r7, sp, #0
    69b6:	60f8      	str	r0, [r7, #12]
    69b8:	60b9      	str	r1, [r7, #8]
    69ba:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    69bc:	2300      	movs	r3, #0
    69be:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    69c0:	68fb      	ldr	r3, [r7, #12]
    69c2:	2b01      	cmp	r3, #1
    69c4:	d01d      	beq.n	6a02 <_write+0x52>
    69c6:	68fb      	ldr	r3, [r7, #12]
    69c8:	2b02      	cmp	r3, #2
    69ca:	d01a      	beq.n	6a02 <_write+0x52>
    69cc:	68fb      	ldr	r3, [r7, #12]
    69ce:	2b03      	cmp	r3, #3
    69d0:	d017      	beq.n	6a02 <_write+0x52>
		return -1;
    69d2:	2301      	movs	r3, #1
    69d4:	425b      	negs	r3, r3
    69d6:	e018      	b.n	6a0a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    69d8:	4b0e      	ldr	r3, [pc, #56]	; (6a14 <_write+0x64>)
    69da:	681a      	ldr	r2, [r3, #0]
    69dc:	4b0e      	ldr	r3, [pc, #56]	; (6a18 <_write+0x68>)
    69de:	6818      	ldr	r0, [r3, #0]
    69e0:	68bb      	ldr	r3, [r7, #8]
    69e2:	1c59      	adds	r1, r3, #1
    69e4:	60b9      	str	r1, [r7, #8]
    69e6:	781b      	ldrb	r3, [r3, #0]
    69e8:	0019      	movs	r1, r3
    69ea:	4790      	blx	r2
    69ec:	1e03      	subs	r3, r0, #0
    69ee:	da02      	bge.n	69f6 <_write+0x46>
			return -1;
    69f0:	2301      	movs	r3, #1
    69f2:	425b      	negs	r3, r3
    69f4:	e009      	b.n	6a0a <_write+0x5a>
		}
		++nChars;
    69f6:	697b      	ldr	r3, [r7, #20]
    69f8:	3301      	adds	r3, #1
    69fa:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    69fc:	687b      	ldr	r3, [r7, #4]
    69fe:	3b01      	subs	r3, #1
    6a00:	607b      	str	r3, [r7, #4]
    6a02:	687b      	ldr	r3, [r7, #4]
    6a04:	2b00      	cmp	r3, #0
    6a06:	d1e7      	bne.n	69d8 <_write+0x28>
	}
	return nChars;
    6a08:	697b      	ldr	r3, [r7, #20]
}
    6a0a:	0018      	movs	r0, r3
    6a0c:	46bd      	mov	sp, r7
    6a0e:	b006      	add	sp, #24
    6a10:	bd80      	pop	{r7, pc}
    6a12:	46c0      	nop			; (mov r8, r8)
    6a14:	200009f4 	.word	0x200009f4
    6a18:	200009f8 	.word	0x200009f8

00006a1c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6a1c:	b580      	push	{r7, lr}
    6a1e:	b084      	sub	sp, #16
    6a20:	af00      	add	r7, sp, #0
    6a22:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6a24:	4b0a      	ldr	r3, [pc, #40]	; (6a50 <_sbrk+0x34>)
    6a26:	681b      	ldr	r3, [r3, #0]
    6a28:	2b00      	cmp	r3, #0
    6a2a:	d102      	bne.n	6a32 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    6a2c:	4b08      	ldr	r3, [pc, #32]	; (6a50 <_sbrk+0x34>)
    6a2e:	4a09      	ldr	r2, [pc, #36]	; (6a54 <_sbrk+0x38>)
    6a30:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6a32:	4b07      	ldr	r3, [pc, #28]	; (6a50 <_sbrk+0x34>)
    6a34:	681b      	ldr	r3, [r3, #0]
    6a36:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6a38:	4b05      	ldr	r3, [pc, #20]	; (6a50 <_sbrk+0x34>)
    6a3a:	681a      	ldr	r2, [r3, #0]
    6a3c:	687b      	ldr	r3, [r7, #4]
    6a3e:	18d2      	adds	r2, r2, r3
    6a40:	4b03      	ldr	r3, [pc, #12]	; (6a50 <_sbrk+0x34>)
    6a42:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    6a44:	68fb      	ldr	r3, [r7, #12]
}
    6a46:	0018      	movs	r0, r3
    6a48:	46bd      	mov	sp, r7
    6a4a:	b004      	add	sp, #16
    6a4c:	bd80      	pop	{r7, pc}
    6a4e:	46c0      	nop			; (mov r8, r8)
    6a50:	20000178 	.word	0x20000178
    6a54:	20002c98 	.word	0x20002c98

00006a58 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6a58:	b580      	push	{r7, lr}
    6a5a:	b082      	sub	sp, #8
    6a5c:	af00      	add	r7, sp, #0
    6a5e:	6078      	str	r0, [r7, #4]
	return -1;
    6a60:	2301      	movs	r3, #1
    6a62:	425b      	negs	r3, r3
}
    6a64:	0018      	movs	r0, r3
    6a66:	46bd      	mov	sp, r7
    6a68:	b002      	add	sp, #8
    6a6a:	bd80      	pop	{r7, pc}

00006a6c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    6a6c:	b580      	push	{r7, lr}
    6a6e:	b082      	sub	sp, #8
    6a70:	af00      	add	r7, sp, #0
    6a72:	6078      	str	r0, [r7, #4]
    6a74:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    6a76:	683b      	ldr	r3, [r7, #0]
    6a78:	2280      	movs	r2, #128	; 0x80
    6a7a:	0192      	lsls	r2, r2, #6
    6a7c:	605a      	str	r2, [r3, #4]

	return 0;
    6a7e:	2300      	movs	r3, #0
}
    6a80:	0018      	movs	r0, r3
    6a82:	46bd      	mov	sp, r7
    6a84:	b002      	add	sp, #8
    6a86:	bd80      	pop	{r7, pc}

00006a88 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
    6a88:	b580      	push	{r7, lr}
    6a8a:	b084      	sub	sp, #16
    6a8c:	af00      	add	r7, sp, #0
    6a8e:	60f8      	str	r0, [r7, #12]
    6a90:	60b9      	str	r1, [r7, #8]
    6a92:	607a      	str	r2, [r7, #4]
	return 0;
    6a94:	2300      	movs	r3, #0
}
    6a96:	0018      	movs	r0, r3
    6a98:	46bd      	mov	sp, r7
    6a9a:	b004      	add	sp, #16
    6a9c:	bd80      	pop	{r7, pc}

00006a9e <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    6a9e:	b580      	push	{r7, lr}
    6aa0:	b082      	sub	sp, #8
    6aa2:	af00      	add	r7, sp, #0
    6aa4:	6078      	str	r0, [r7, #4]
	time->second = 0;
    6aa6:	687b      	ldr	r3, [r7, #4]
    6aa8:	2200      	movs	r2, #0
    6aaa:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    6aac:	687b      	ldr	r3, [r7, #4]
    6aae:	2200      	movs	r2, #0
    6ab0:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    6ab2:	687b      	ldr	r3, [r7, #4]
    6ab4:	2200      	movs	r2, #0
    6ab6:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    6ab8:	687b      	ldr	r3, [r7, #4]
    6aba:	2200      	movs	r2, #0
    6abc:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    6abe:	687b      	ldr	r3, [r7, #4]
    6ac0:	2201      	movs	r2, #1
    6ac2:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    6ac4:	687b      	ldr	r3, [r7, #4]
    6ac6:	2201      	movs	r2, #1
    6ac8:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    6aca:	687b      	ldr	r3, [r7, #4]
    6acc:	22fa      	movs	r2, #250	; 0xfa
    6ace:	00d2      	lsls	r2, r2, #3
    6ad0:	80da      	strh	r2, [r3, #6]
}
    6ad2:	46c0      	nop			; (mov r8, r8)
    6ad4:	46bd      	mov	sp, r7
    6ad6:	b002      	add	sp, #8
    6ad8:	bd80      	pop	{r7, pc}
	...

00006adc <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    6adc:	b580      	push	{r7, lr}
    6ade:	b086      	sub	sp, #24
    6ae0:	af00      	add	r7, sp, #0
    6ae2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    6ae4:	230c      	movs	r3, #12
    6ae6:	18fb      	adds	r3, r7, r3
    6ae8:	0018      	movs	r0, r3
    6aea:	4b23      	ldr	r3, [pc, #140]	; (6b78 <rtc_calendar_get_config_defaults+0x9c>)
    6aec:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    6aee:	687b      	ldr	r3, [r7, #4]
    6af0:	22a0      	movs	r2, #160	; 0xa0
    6af2:	0112      	lsls	r2, r2, #4
    6af4:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    6af6:	687b      	ldr	r3, [r7, #4]
    6af8:	2200      	movs	r2, #0
    6afa:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    6afc:	687b      	ldr	r3, [r7, #4]
    6afe:	2200      	movs	r2, #0
    6b00:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    6b02:	687b      	ldr	r3, [r7, #4]
    6b04:	2200      	movs	r2, #0
    6b06:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    6b08:	687b      	ldr	r3, [r7, #4]
    6b0a:	22fa      	movs	r2, #250	; 0xfa
    6b0c:	00d2      	lsls	r2, r2, #3
    6b0e:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    6b10:	2317      	movs	r3, #23
    6b12:	18fb      	adds	r3, r7, r3
    6b14:	2200      	movs	r2, #0
    6b16:	701a      	strb	r2, [r3, #0]
    6b18:	e025      	b.n	6b66 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
    6b1a:	2317      	movs	r3, #23
    6b1c:	18fb      	adds	r3, r7, r3
    6b1e:	781a      	ldrb	r2, [r3, #0]
    6b20:	6879      	ldr	r1, [r7, #4]
    6b22:	2008      	movs	r0, #8
    6b24:	0013      	movs	r3, r2
    6b26:	009b      	lsls	r3, r3, #2
    6b28:	189b      	adds	r3, r3, r2
    6b2a:	005b      	lsls	r3, r3, #1
    6b2c:	18cb      	adds	r3, r1, r3
    6b2e:	181a      	adds	r2, r3, r0
    6b30:	230c      	movs	r3, #12
    6b32:	18fb      	adds	r3, r7, r3
    6b34:	0010      	movs	r0, r2
    6b36:	0019      	movs	r1, r3
    6b38:	2308      	movs	r3, #8
    6b3a:	001a      	movs	r2, r3
    6b3c:	4b0f      	ldr	r3, [pc, #60]	; (6b7c <rtc_calendar_get_config_defaults+0xa0>)
    6b3e:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    6b40:	2317      	movs	r3, #23
    6b42:	18fb      	adds	r3, r7, r3
    6b44:	781a      	ldrb	r2, [r3, #0]
    6b46:	6879      	ldr	r1, [r7, #4]
    6b48:	0013      	movs	r3, r2
    6b4a:	009b      	lsls	r3, r3, #2
    6b4c:	189b      	adds	r3, r3, r2
    6b4e:	005b      	lsls	r3, r3, #1
    6b50:	18cb      	adds	r3, r1, r3
    6b52:	3310      	adds	r3, #16
    6b54:	2206      	movs	r2, #6
    6b56:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    6b58:	2317      	movs	r3, #23
    6b5a:	18fb      	adds	r3, r7, r3
    6b5c:	781a      	ldrb	r2, [r3, #0]
    6b5e:	2317      	movs	r3, #23
    6b60:	18fb      	adds	r3, r7, r3
    6b62:	3201      	adds	r2, #1
    6b64:	701a      	strb	r2, [r3, #0]
    6b66:	2317      	movs	r3, #23
    6b68:	18fb      	adds	r3, r7, r3
    6b6a:	781b      	ldrb	r3, [r3, #0]
    6b6c:	2b00      	cmp	r3, #0
    6b6e:	d0d4      	beq.n	6b1a <rtc_calendar_get_config_defaults+0x3e>
	}
}
    6b70:	46c0      	nop			; (mov r8, r8)
    6b72:	46bd      	mov	sp, r7
    6b74:	b006      	add	sp, #24
    6b76:	bd80      	pop	{r7, pc}
    6b78:	00006a9f 	.word	0x00006a9f
    6b7c:	0000a649 	.word	0x0000a649

00006b80 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
    6b80:	b580      	push	{r7, lr}
    6b82:	b088      	sub	sp, #32
    6b84:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    6b86:	230c      	movs	r3, #12
    6b88:	18fb      	adds	r3, r7, r3
    6b8a:	0018      	movs	r0, r3
    6b8c:	4b1a      	ldr	r3, [pc, #104]	; (6bf8 <configure_rtc_calendar+0x78>)
    6b8e:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
    6b90:	1d3b      	adds	r3, r7, #4
    6b92:	0018      	movs	r0, r3
    6b94:	4b19      	ldr	r3, [pc, #100]	; (6bfc <configure_rtc_calendar+0x7c>)
    6b96:	4798      	blx	r3
	init_time.year   = 2014;
    6b98:	1d3b      	adds	r3, r7, #4
    6b9a:	4a19      	ldr	r2, [pc, #100]	; (6c00 <configure_rtc_calendar+0x80>)
    6b9c:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
    6b9e:	1d3b      	adds	r3, r7, #4
    6ba0:	2201      	movs	r2, #1
    6ba2:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
    6ba4:	1d3b      	adds	r3, r7, #4
    6ba6:	2201      	movs	r2, #1
    6ba8:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
    6baa:	1d3b      	adds	r3, r7, #4
    6bac:	2200      	movs	r2, #0
    6bae:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
    6bb0:	1d3b      	adds	r3, r7, #4
    6bb2:	2200      	movs	r2, #0
    6bb4:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
    6bb6:	1d3b      	adds	r3, r7, #4
    6bb8:	2204      	movs	r2, #4
    6bba:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
    6bbc:	230c      	movs	r3, #12
    6bbe:	18fb      	adds	r3, r7, r3
    6bc0:	2201      	movs	r2, #1
    6bc2:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    6bc4:	230c      	movs	r3, #12
    6bc6:	18fb      	adds	r3, r7, r3
    6bc8:	1d3a      	adds	r2, r7, #4
    6bca:	3308      	adds	r3, #8
    6bcc:	ca03      	ldmia	r2!, {r0, r1}
    6bce:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    6bd0:	230c      	movs	r3, #12
    6bd2:	18fb      	adds	r3, r7, r3
    6bd4:	2206      	movs	r2, #6
    6bd6:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    6bd8:	230c      	movs	r3, #12
    6bda:	18fa      	adds	r2, r7, r3
    6bdc:	4909      	ldr	r1, [pc, #36]	; (6c04 <configure_rtc_calendar+0x84>)
    6bde:	4b0a      	ldr	r3, [pc, #40]	; (6c08 <configure_rtc_calendar+0x88>)
    6be0:	0018      	movs	r0, r3
    6be2:	4b0a      	ldr	r3, [pc, #40]	; (6c0c <configure_rtc_calendar+0x8c>)
    6be4:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
    6be6:	4b08      	ldr	r3, [pc, #32]	; (6c08 <configure_rtc_calendar+0x88>)
    6be8:	0018      	movs	r0, r3
    6bea:	4b09      	ldr	r3, [pc, #36]	; (6c10 <configure_rtc_calendar+0x90>)
    6bec:	4798      	blx	r3
}
    6bee:	46c0      	nop			; (mov r8, r8)
    6bf0:	46bd      	mov	sp, r7
    6bf2:	b008      	add	sp, #32
    6bf4:	bd80      	pop	{r7, pc}
    6bf6:	46c0      	nop			; (mov r8, r8)
    6bf8:	00006add 	.word	0x00006add
    6bfc:	00006a9f 	.word	0x00006a9f
    6c00:	000007de 	.word	0x000007de
    6c04:	40001400 	.word	0x40001400
    6c08:	200009fc 	.word	0x200009fc
    6c0c:	000032c5 	.word	0x000032c5
    6c10:	00003015 	.word	0x00003015

00006c14 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    6c14:	b590      	push	{r4, r7, lr}
    6c16:	b085      	sub	sp, #20
    6c18:	af00      	add	r7, sp, #0
    6c1a:	0002      	movs	r2, r0
    6c1c:	1dfb      	adds	r3, r7, #7
    6c1e:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
    6c20:	4b1a      	ldr	r3, [pc, #104]	; (6c8c <disk_initialize+0x78>)
    6c22:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    6c24:	1dfb      	adds	r3, r7, #7
    6c26:	781b      	ldrb	r3, [r3, #0]
    6c28:	2b01      	cmp	r3, #1
    6c2a:	d901      	bls.n	6c30 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    6c2c:	2301      	movs	r3, #1
    6c2e:	e029      	b.n	6c84 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    6c30:	2300      	movs	r3, #0
    6c32:	60fb      	str	r3, [r7, #12]
    6c34:	e010      	b.n	6c58 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
    6c36:	230b      	movs	r3, #11
    6c38:	18fc      	adds	r4, r7, r3
    6c3a:	1dfb      	adds	r3, r7, #7
    6c3c:	781b      	ldrb	r3, [r3, #0]
    6c3e:	0018      	movs	r0, r3
    6c40:	4b13      	ldr	r3, [pc, #76]	; (6c90 <disk_initialize+0x7c>)
    6c42:	4798      	blx	r3
    6c44:	0003      	movs	r3, r0
    6c46:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
    6c48:	230b      	movs	r3, #11
    6c4a:	18fb      	adds	r3, r7, r3
    6c4c:	781b      	ldrb	r3, [r3, #0]
    6c4e:	2b03      	cmp	r3, #3
    6c50:	d106      	bne.n	6c60 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
    6c52:	68fb      	ldr	r3, [r7, #12]
    6c54:	3301      	adds	r3, #1
    6c56:	60fb      	str	r3, [r7, #12]
    6c58:	68fb      	ldr	r3, [r7, #12]
    6c5a:	2b01      	cmp	r3, #1
    6c5c:	ddeb      	ble.n	6c36 <disk_initialize+0x22>
    6c5e:	e000      	b.n	6c62 <disk_initialize+0x4e>
			break;
    6c60:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
    6c62:	230b      	movs	r3, #11
    6c64:	18fb      	adds	r3, r7, r3
    6c66:	781b      	ldrb	r3, [r3, #0]
    6c68:	2b00      	cmp	r3, #0
    6c6a:	d001      	beq.n	6c70 <disk_initialize+0x5c>
		return STA_NOINIT;
    6c6c:	2301      	movs	r3, #1
    6c6e:	e009      	b.n	6c84 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    6c70:	1dfb      	adds	r3, r7, #7
    6c72:	781b      	ldrb	r3, [r3, #0]
    6c74:	0018      	movs	r0, r3
    6c76:	4b07      	ldr	r3, [pc, #28]	; (6c94 <disk_initialize+0x80>)
    6c78:	4798      	blx	r3
    6c7a:	1e03      	subs	r3, r0, #0
    6c7c:	d001      	beq.n	6c82 <disk_initialize+0x6e>
		return STA_PROTECT;
    6c7e:	2304      	movs	r3, #4
    6c80:	e000      	b.n	6c84 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
    6c82:	2300      	movs	r3, #0
}
    6c84:	0018      	movs	r0, r3
    6c86:	46bd      	mov	sp, r7
    6c88:	b005      	add	sp, #20
    6c8a:	bd90      	pop	{r4, r7, pc}
    6c8c:	00006b81 	.word	0x00006b81
    6c90:	00002cb5 	.word	0x00002cb5
    6c94:	00002d6d 	.word	0x00002d6d

00006c98 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    6c98:	b580      	push	{r7, lr}
    6c9a:	b082      	sub	sp, #8
    6c9c:	af00      	add	r7, sp, #0
    6c9e:	0002      	movs	r2, r0
    6ca0:	1dfb      	adds	r3, r7, #7
    6ca2:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
    6ca4:	1dfb      	adds	r3, r7, #7
    6ca6:	781b      	ldrb	r3, [r3, #0]
    6ca8:	0018      	movs	r0, r3
    6caa:	4b08      	ldr	r3, [pc, #32]	; (6ccc <disk_status+0x34>)
    6cac:	4798      	blx	r3
    6cae:	1e03      	subs	r3, r0, #0
    6cb0:	d002      	beq.n	6cb8 <disk_status+0x20>
    6cb2:	2b02      	cmp	r3, #2
    6cb4:	d002      	beq.n	6cbc <disk_status+0x24>
    6cb6:	e003      	b.n	6cc0 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
    6cb8:	2300      	movs	r3, #0
    6cba:	e002      	b.n	6cc2 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    6cbc:	2303      	movs	r3, #3
    6cbe:	e000      	b.n	6cc2 <disk_status+0x2a>
	default:
		return STA_NOINIT;
    6cc0:	2301      	movs	r3, #1
	}
}
    6cc2:	0018      	movs	r0, r3
    6cc4:	46bd      	mov	sp, r7
    6cc6:	b002      	add	sp, #8
    6cc8:	bd80      	pop	{r7, pc}
    6cca:	46c0      	nop			; (mov r8, r8)
    6ccc:	00002cb5 	.word	0x00002cb5

00006cd0 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    6cd0:	b590      	push	{r4, r7, lr}
    6cd2:	b089      	sub	sp, #36	; 0x24
    6cd4:	af00      	add	r7, sp, #0
    6cd6:	60b9      	str	r1, [r7, #8]
    6cd8:	607a      	str	r2, [r7, #4]
    6cda:	0019      	movs	r1, r3
    6cdc:	230f      	movs	r3, #15
    6cde:	18fb      	adds	r3, r7, r3
    6ce0:	1c02      	adds	r2, r0, #0
    6ce2:	701a      	strb	r2, [r3, #0]
    6ce4:	230e      	movs	r3, #14
    6ce6:	18fb      	adds	r3, r7, r3
    6ce8:	1c0a      	adds	r2, r1, #0
    6cea:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    6cec:	231b      	movs	r3, #27
    6cee:	18fc      	adds	r4, r7, r3
    6cf0:	230f      	movs	r3, #15
    6cf2:	18fb      	adds	r3, r7, r3
    6cf4:	781b      	ldrb	r3, [r3, #0]
    6cf6:	0018      	movs	r0, r3
    6cf8:	4b28      	ldr	r3, [pc, #160]	; (6d9c <disk_read+0xcc>)
    6cfa:	4798      	blx	r3
    6cfc:	0003      	movs	r3, r0
    6cfe:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    6d00:	231b      	movs	r3, #27
    6d02:	18fb      	adds	r3, r7, r3
    6d04:	781b      	ldrb	r3, [r3, #0]
    6d06:	2b00      	cmp	r3, #0
    6d08:	d101      	bne.n	6d0e <disk_read+0x3e>
		return RES_ERROR;
    6d0a:	2301      	movs	r3, #1
    6d0c:	e042      	b.n	6d94 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    6d0e:	2314      	movs	r3, #20
    6d10:	18fa      	adds	r2, r7, r3
    6d12:	230f      	movs	r3, #15
    6d14:	18fb      	adds	r3, r7, r3
    6d16:	781b      	ldrb	r3, [r3, #0]
    6d18:	0011      	movs	r1, r2
    6d1a:	0018      	movs	r0, r3
    6d1c:	4b20      	ldr	r3, [pc, #128]	; (6da0 <disk_read+0xd0>)
    6d1e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    6d20:	230e      	movs	r3, #14
    6d22:	18fb      	adds	r3, r7, r3
    6d24:	781b      	ldrb	r3, [r3, #0]
    6d26:	221b      	movs	r2, #27
    6d28:	18ba      	adds	r2, r7, r2
    6d2a:	7812      	ldrb	r2, [r2, #0]
    6d2c:	4353      	muls	r3, r2
    6d2e:	001a      	movs	r2, r3
    6d30:	687b      	ldr	r3, [r7, #4]
    6d32:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    6d34:	697b      	ldr	r3, [r7, #20]
    6d36:	3301      	adds	r3, #1
    6d38:	211b      	movs	r1, #27
    6d3a:	1879      	adds	r1, r7, r1
    6d3c:	7809      	ldrb	r1, [r1, #0]
    6d3e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    6d40:	429a      	cmp	r2, r3
    6d42:	d901      	bls.n	6d48 <disk_read+0x78>
		return RES_PARERR;
    6d44:	2304      	movs	r3, #4
    6d46:	e025      	b.n	6d94 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    6d48:	2300      	movs	r3, #0
    6d4a:	61fb      	str	r3, [r7, #28]
    6d4c:	e01b      	b.n	6d86 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    6d4e:	231b      	movs	r3, #27
    6d50:	18fb      	adds	r3, r7, r3
    6d52:	781b      	ldrb	r3, [r3, #0]
    6d54:	69fa      	ldr	r2, [r7, #28]
    6d56:	435a      	muls	r2, r3
    6d58:	687b      	ldr	r3, [r7, #4]
    6d5a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    6d5c:	231b      	movs	r3, #27
    6d5e:	18fb      	adds	r3, r7, r3
    6d60:	781b      	ldrb	r3, [r3, #0]
    6d62:	69fa      	ldr	r2, [r7, #28]
    6d64:	4353      	muls	r3, r2
    6d66:	025b      	lsls	r3, r3, #9
    6d68:	68ba      	ldr	r2, [r7, #8]
    6d6a:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    6d6c:	230f      	movs	r3, #15
    6d6e:	18fb      	adds	r3, r7, r3
    6d70:	781b      	ldrb	r3, [r3, #0]
    6d72:	0018      	movs	r0, r3
    6d74:	4b0b      	ldr	r3, [pc, #44]	; (6da4 <disk_read+0xd4>)
    6d76:	4798      	blx	r3
    6d78:	1e03      	subs	r3, r0, #0
    6d7a:	d001      	beq.n	6d80 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    6d7c:	2301      	movs	r3, #1
    6d7e:	e009      	b.n	6d94 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
    6d80:	69fb      	ldr	r3, [r7, #28]
    6d82:	3301      	adds	r3, #1
    6d84:	61fb      	str	r3, [r7, #28]
    6d86:	230e      	movs	r3, #14
    6d88:	18fb      	adds	r3, r7, r3
    6d8a:	781a      	ldrb	r2, [r3, #0]
    6d8c:	69fb      	ldr	r3, [r7, #28]
    6d8e:	429a      	cmp	r2, r3
    6d90:	d8dd      	bhi.n	6d4e <disk_read+0x7e>
		}
	}

	return RES_OK;
    6d92:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    6d94:	0018      	movs	r0, r3
    6d96:	46bd      	mov	sp, r7
    6d98:	b009      	add	sp, #36	; 0x24
    6d9a:	bd90      	pop	{r4, r7, pc}
    6d9c:	00002d41 	.word	0x00002d41
    6da0:	00002cf5 	.word	0x00002cf5
    6da4:	00002db5 	.word	0x00002db5

00006da8 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    6da8:	b590      	push	{r4, r7, lr}
    6daa:	b089      	sub	sp, #36	; 0x24
    6dac:	af00      	add	r7, sp, #0
    6dae:	60b9      	str	r1, [r7, #8]
    6db0:	607a      	str	r2, [r7, #4]
    6db2:	0019      	movs	r1, r3
    6db4:	230f      	movs	r3, #15
    6db6:	18fb      	adds	r3, r7, r3
    6db8:	1c02      	adds	r2, r0, #0
    6dba:	701a      	strb	r2, [r3, #0]
    6dbc:	230e      	movs	r3, #14
    6dbe:	18fb      	adds	r3, r7, r3
    6dc0:	1c0a      	adds	r2, r1, #0
    6dc2:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    6dc4:	231b      	movs	r3, #27
    6dc6:	18fc      	adds	r4, r7, r3
    6dc8:	230f      	movs	r3, #15
    6dca:	18fb      	adds	r3, r7, r3
    6dcc:	781b      	ldrb	r3, [r3, #0]
    6dce:	0018      	movs	r0, r3
    6dd0:	4b28      	ldr	r3, [pc, #160]	; (6e74 <disk_write+0xcc>)
    6dd2:	4798      	blx	r3
    6dd4:	0003      	movs	r3, r0
    6dd6:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    6dd8:	231b      	movs	r3, #27
    6dda:	18fb      	adds	r3, r7, r3
    6ddc:	781b      	ldrb	r3, [r3, #0]
    6dde:	2b00      	cmp	r3, #0
    6de0:	d101      	bne.n	6de6 <disk_write+0x3e>
		return RES_ERROR;
    6de2:	2301      	movs	r3, #1
    6de4:	e042      	b.n	6e6c <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    6de6:	2314      	movs	r3, #20
    6de8:	18fa      	adds	r2, r7, r3
    6dea:	230f      	movs	r3, #15
    6dec:	18fb      	adds	r3, r7, r3
    6dee:	781b      	ldrb	r3, [r3, #0]
    6df0:	0011      	movs	r1, r2
    6df2:	0018      	movs	r0, r3
    6df4:	4b20      	ldr	r3, [pc, #128]	; (6e78 <disk_write+0xd0>)
    6df6:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    6df8:	230e      	movs	r3, #14
    6dfa:	18fb      	adds	r3, r7, r3
    6dfc:	781b      	ldrb	r3, [r3, #0]
    6dfe:	221b      	movs	r2, #27
    6e00:	18ba      	adds	r2, r7, r2
    6e02:	7812      	ldrb	r2, [r2, #0]
    6e04:	4353      	muls	r3, r2
    6e06:	001a      	movs	r2, r3
    6e08:	687b      	ldr	r3, [r7, #4]
    6e0a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    6e0c:	697b      	ldr	r3, [r7, #20]
    6e0e:	3301      	adds	r3, #1
    6e10:	211b      	movs	r1, #27
    6e12:	1879      	adds	r1, r7, r1
    6e14:	7809      	ldrb	r1, [r1, #0]
    6e16:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    6e18:	429a      	cmp	r2, r3
    6e1a:	d901      	bls.n	6e20 <disk_write+0x78>
		return RES_PARERR;
    6e1c:	2304      	movs	r3, #4
    6e1e:	e025      	b.n	6e6c <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    6e20:	2300      	movs	r3, #0
    6e22:	61fb      	str	r3, [r7, #28]
    6e24:	e01b      	b.n	6e5e <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    6e26:	231b      	movs	r3, #27
    6e28:	18fb      	adds	r3, r7, r3
    6e2a:	781b      	ldrb	r3, [r3, #0]
    6e2c:	69fa      	ldr	r2, [r7, #28]
    6e2e:	435a      	muls	r2, r3
    6e30:	687b      	ldr	r3, [r7, #4]
    6e32:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    6e34:	231b      	movs	r3, #27
    6e36:	18fb      	adds	r3, r7, r3
    6e38:	781b      	ldrb	r3, [r3, #0]
    6e3a:	69fa      	ldr	r2, [r7, #28]
    6e3c:	4353      	muls	r3, r2
    6e3e:	025b      	lsls	r3, r3, #9
    6e40:	68ba      	ldr	r2, [r7, #8]
    6e42:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    6e44:	230f      	movs	r3, #15
    6e46:	18fb      	adds	r3, r7, r3
    6e48:	781b      	ldrb	r3, [r3, #0]
    6e4a:	0018      	movs	r0, r3
    6e4c:	4b0b      	ldr	r3, [pc, #44]	; (6e7c <disk_write+0xd4>)
    6e4e:	4798      	blx	r3
    6e50:	1e03      	subs	r3, r0, #0
    6e52:	d001      	beq.n	6e58 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    6e54:	2301      	movs	r3, #1
    6e56:	e009      	b.n	6e6c <disk_write+0xc4>
	for (i = 0; i < count; i++) {
    6e58:	69fb      	ldr	r3, [r7, #28]
    6e5a:	3301      	adds	r3, #1
    6e5c:	61fb      	str	r3, [r7, #28]
    6e5e:	230e      	movs	r3, #14
    6e60:	18fb      	adds	r3, r7, r3
    6e62:	781a      	ldrb	r2, [r3, #0]
    6e64:	69fb      	ldr	r3, [r7, #28]
    6e66:	429a      	cmp	r2, r3
    6e68:	d8dd      	bhi.n	6e26 <disk_write+0x7e>
		}
	}

	return RES_OK;
    6e6a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    6e6c:	0018      	movs	r0, r3
    6e6e:	46bd      	mov	sp, r7
    6e70:	b009      	add	sp, #36	; 0x24
    6e72:	bd90      	pop	{r4, r7, pc}
    6e74:	00002d41 	.word	0x00002d41
    6e78:	00002cf5 	.word	0x00002cf5
    6e7c:	00002e09 	.word	0x00002e09

00006e80 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    6e80:	b590      	push	{r4, r7, lr}
    6e82:	b085      	sub	sp, #20
    6e84:	af00      	add	r7, sp, #0
    6e86:	603a      	str	r2, [r7, #0]
    6e88:	1dfb      	adds	r3, r7, #7
    6e8a:	1c02      	adds	r2, r0, #0
    6e8c:	701a      	strb	r2, [r3, #0]
    6e8e:	1dbb      	adds	r3, r7, #6
    6e90:	1c0a      	adds	r2, r1, #0
    6e92:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
    6e94:	230f      	movs	r3, #15
    6e96:	18fb      	adds	r3, r7, r3
    6e98:	2204      	movs	r2, #4
    6e9a:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
    6e9c:	1dbb      	adds	r3, r7, #6
    6e9e:	781b      	ldrb	r3, [r3, #0]
    6ea0:	2b01      	cmp	r3, #1
    6ea2:	d00f      	beq.n	6ec4 <disk_ioctl+0x44>
    6ea4:	dc02      	bgt.n	6eac <disk_ioctl+0x2c>
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	d044      	beq.n	6f34 <disk_ioctl+0xb4>
    6eaa:	e054      	b.n	6f56 <disk_ioctl+0xd6>
    6eac:	2b02      	cmp	r3, #2
    6eae:	d01a      	beq.n	6ee6 <disk_ioctl+0x66>
    6eb0:	2b03      	cmp	r3, #3
    6eb2:	d150      	bne.n	6f56 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    6eb4:	683b      	ldr	r3, [r7, #0]
    6eb6:	2201      	movs	r2, #1
    6eb8:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    6eba:	230f      	movs	r3, #15
    6ebc:	18fb      	adds	r3, r7, r3
    6ebe:	2200      	movs	r2, #0
    6ec0:	701a      	strb	r2, [r3, #0]
		break;
    6ec2:	e04c      	b.n	6f5e <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    6ec4:	2308      	movs	r3, #8
    6ec6:	18fa      	adds	r2, r7, r3
    6ec8:	1dfb      	adds	r3, r7, #7
    6eca:	781b      	ldrb	r3, [r3, #0]
    6ecc:	0011      	movs	r1, r2
    6ece:	0018      	movs	r0, r3
    6ed0:	4b26      	ldr	r3, [pc, #152]	; (6f6c <disk_ioctl+0xec>)
    6ed2:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    6ed4:	68bb      	ldr	r3, [r7, #8]
    6ed6:	1c5a      	adds	r2, r3, #1
    6ed8:	683b      	ldr	r3, [r7, #0]
    6eda:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    6edc:	230f      	movs	r3, #15
    6ede:	18fb      	adds	r3, r7, r3
    6ee0:	2200      	movs	r2, #0
    6ee2:	701a      	strb	r2, [r3, #0]
	}
	break;
    6ee4:	e03b      	b.n	6f5e <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    6ee6:	230e      	movs	r3, #14
    6ee8:	18fc      	adds	r4, r7, r3
    6eea:	1dfb      	adds	r3, r7, #7
    6eec:	781b      	ldrb	r3, [r3, #0]
    6eee:	0018      	movs	r0, r3
    6ef0:	4b1f      	ldr	r3, [pc, #124]	; (6f70 <disk_ioctl+0xf0>)
    6ef2:	4798      	blx	r3
    6ef4:	0003      	movs	r3, r0
    6ef6:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    6ef8:	230e      	movs	r3, #14
    6efa:	18fb      	adds	r3, r7, r3
    6efc:	781b      	ldrb	r3, [r3, #0]
    6efe:	2b01      	cmp	r3, #1
    6f00:	d010      	beq.n	6f24 <disk_ioctl+0xa4>
    6f02:	230e      	movs	r3, #14
    6f04:	18fb      	adds	r3, r7, r3
    6f06:	781b      	ldrb	r3, [r3, #0]
    6f08:	2b02      	cmp	r3, #2
    6f0a:	d00b      	beq.n	6f24 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    6f0c:	230e      	movs	r3, #14
    6f0e:	18fb      	adds	r3, r7, r3
    6f10:	781b      	ldrb	r3, [r3, #0]
    6f12:	2b04      	cmp	r3, #4
    6f14:	d006      	beq.n	6f24 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    6f16:	230e      	movs	r3, #14
    6f18:	18fb      	adds	r3, r7, r3
    6f1a:	781b      	ldrb	r3, [r3, #0]
    6f1c:	2b08      	cmp	r3, #8
    6f1e:	d001      	beq.n	6f24 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    6f20:	2301      	movs	r3, #1
    6f22:	e01f      	b.n	6f64 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    6f24:	683b      	ldr	r3, [r7, #0]
    6f26:	2200      	movs	r2, #0
    6f28:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    6f2a:	230f      	movs	r3, #15
    6f2c:	18fb      	adds	r3, r7, r3
    6f2e:	2200      	movs	r2, #0
    6f30:	701a      	strb	r2, [r3, #0]
	}
	break;
    6f32:	e014      	b.n	6f5e <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    6f34:	1dfb      	adds	r3, r7, #7
    6f36:	781b      	ldrb	r3, [r3, #0]
    6f38:	0018      	movs	r0, r3
    6f3a:	4b0e      	ldr	r3, [pc, #56]	; (6f74 <disk_ioctl+0xf4>)
    6f3c:	4798      	blx	r3
    6f3e:	1e03      	subs	r3, r0, #0
    6f40:	d104      	bne.n	6f4c <disk_ioctl+0xcc>
			res = RES_OK;
    6f42:	230f      	movs	r3, #15
    6f44:	18fb      	adds	r3, r7, r3
    6f46:	2200      	movs	r2, #0
    6f48:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
    6f4a:	e008      	b.n	6f5e <disk_ioctl+0xde>
			res = RES_NOTRDY;
    6f4c:	230f      	movs	r3, #15
    6f4e:	18fb      	adds	r3, r7, r3
    6f50:	2203      	movs	r2, #3
    6f52:	701a      	strb	r2, [r3, #0]
		break;
    6f54:	e003      	b.n	6f5e <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
    6f56:	230f      	movs	r3, #15
    6f58:	18fb      	adds	r3, r7, r3
    6f5a:	2204      	movs	r2, #4
    6f5c:	701a      	strb	r2, [r3, #0]
	}

	return res;
    6f5e:	230f      	movs	r3, #15
    6f60:	18fb      	adds	r3, r7, r3
    6f62:	781b      	ldrb	r3, [r3, #0]
}
    6f64:	0018      	movs	r0, r3
    6f66:	46bd      	mov	sp, r7
    6f68:	b005      	add	sp, #20
    6f6a:	bd90      	pop	{r4, r7, pc}
    6f6c:	00002cf5 	.word	0x00002cf5
    6f70:	00002d41 	.word	0x00002d41
    6f74:	00002cb5 	.word	0x00002cb5

00006f78 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    6f78:	b580      	push	{r7, lr}
    6f7a:	b084      	sub	sp, #16
    6f7c:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    6f7e:	1d3a      	adds	r2, r7, #4
    6f80:	4b12      	ldr	r3, [pc, #72]	; (6fcc <get_fattime+0x54>)
    6f82:	0011      	movs	r1, r2
    6f84:	0018      	movs	r0, r3
    6f86:	4b12      	ldr	r3, [pc, #72]	; (6fd0 <get_fattime+0x58>)
    6f88:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
    6f8a:	1d3b      	adds	r3, r7, #4
    6f8c:	88db      	ldrh	r3, [r3, #6]
    6f8e:	4a11      	ldr	r2, [pc, #68]	; (6fd4 <get_fattime+0x5c>)
    6f90:	4694      	mov	ip, r2
    6f92:	4463      	add	r3, ip
    6f94:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
    6f96:	1d3b      	adds	r3, r7, #4
    6f98:	795b      	ldrb	r3, [r3, #5]
    6f9a:	055b      	lsls	r3, r3, #21
    6f9c:	431a      	orrs	r2, r3
			| (current_time.day << 16)
    6f9e:	1d3b      	adds	r3, r7, #4
    6fa0:	791b      	ldrb	r3, [r3, #4]
    6fa2:	041b      	lsls	r3, r3, #16
    6fa4:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
    6fa6:	1d3b      	adds	r3, r7, #4
    6fa8:	789b      	ldrb	r3, [r3, #2]
    6faa:	02db      	lsls	r3, r3, #11
    6fac:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
    6fae:	1d3b      	adds	r3, r7, #4
    6fb0:	785b      	ldrb	r3, [r3, #1]
    6fb2:	015b      	lsls	r3, r3, #5
    6fb4:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
    6fb6:	1d3a      	adds	r2, r7, #4
    6fb8:	7812      	ldrb	r2, [r2, #0]
    6fba:	0852      	lsrs	r2, r2, #1
    6fbc:	b2d2      	uxtb	r2, r2
    6fbe:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
    6fc0:	60fb      	str	r3, [r7, #12]

	return ul_time;
    6fc2:	68fb      	ldr	r3, [r7, #12]
}
    6fc4:	0018      	movs	r0, r3
    6fc6:	46bd      	mov	sp, r7
    6fc8:	b004      	add	sp, #16
    6fca:	bd80      	pop	{r7, pc}
    6fcc:	200009fc 	.word	0x200009fc
    6fd0:	00003359 	.word	0x00003359
    6fd4:	fffff844 	.word	0xfffff844

00006fd8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    6fd8:	b580      	push	{r7, lr}
    6fda:	b086      	sub	sp, #24
    6fdc:	af00      	add	r7, sp, #0
    6fde:	60f8      	str	r0, [r7, #12]
    6fe0:	60b9      	str	r1, [r7, #8]
    6fe2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    6fe4:	68fb      	ldr	r3, [r7, #12]
    6fe6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    6fe8:	68bb      	ldr	r3, [r7, #8]
    6fea:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    6fec:	e007      	b.n	6ffe <mem_cpy+0x26>
		*d++ = *s++;
    6fee:	697b      	ldr	r3, [r7, #20]
    6ff0:	1c5a      	adds	r2, r3, #1
    6ff2:	617a      	str	r2, [r7, #20]
    6ff4:	693a      	ldr	r2, [r7, #16]
    6ff6:	1c51      	adds	r1, r2, #1
    6ff8:	6139      	str	r1, [r7, #16]
    6ffa:	7812      	ldrb	r2, [r2, #0]
    6ffc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    6ffe:	687b      	ldr	r3, [r7, #4]
    7000:	1e5a      	subs	r2, r3, #1
    7002:	607a      	str	r2, [r7, #4]
    7004:	2b00      	cmp	r3, #0
    7006:	d1f2      	bne.n	6fee <mem_cpy+0x16>
}
    7008:	46c0      	nop			; (mov r8, r8)
    700a:	46bd      	mov	sp, r7
    700c:	b006      	add	sp, #24
    700e:	bd80      	pop	{r7, pc}

00007010 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    7010:	b580      	push	{r7, lr}
    7012:	b086      	sub	sp, #24
    7014:	af00      	add	r7, sp, #0
    7016:	60f8      	str	r0, [r7, #12]
    7018:	60b9      	str	r1, [r7, #8]
    701a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    701c:	68fb      	ldr	r3, [r7, #12]
    701e:	617b      	str	r3, [r7, #20]

	while (cnt--)
    7020:	e005      	b.n	702e <mem_set+0x1e>
		*d++ = (BYTE)val;
    7022:	697b      	ldr	r3, [r7, #20]
    7024:	1c5a      	adds	r2, r3, #1
    7026:	617a      	str	r2, [r7, #20]
    7028:	68ba      	ldr	r2, [r7, #8]
    702a:	b2d2      	uxtb	r2, r2
    702c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    702e:	687b      	ldr	r3, [r7, #4]
    7030:	1e5a      	subs	r2, r3, #1
    7032:	607a      	str	r2, [r7, #4]
    7034:	2b00      	cmp	r3, #0
    7036:	d1f4      	bne.n	7022 <mem_set+0x12>
}
    7038:	46c0      	nop			; (mov r8, r8)
    703a:	46bd      	mov	sp, r7
    703c:	b006      	add	sp, #24
    703e:	bd80      	pop	{r7, pc}

00007040 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    7040:	b580      	push	{r7, lr}
    7042:	b088      	sub	sp, #32
    7044:	af00      	add	r7, sp, #0
    7046:	60f8      	str	r0, [r7, #12]
    7048:	60b9      	str	r1, [r7, #8]
    704a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    704c:	68fb      	ldr	r3, [r7, #12]
    704e:	61fb      	str	r3, [r7, #28]
    7050:	68bb      	ldr	r3, [r7, #8]
    7052:	61bb      	str	r3, [r7, #24]
	int r = 0;
    7054:	2300      	movs	r3, #0
    7056:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    7058:	46c0      	nop			; (mov r8, r8)
    705a:	687b      	ldr	r3, [r7, #4]
    705c:	1e5a      	subs	r2, r3, #1
    705e:	607a      	str	r2, [r7, #4]
    7060:	2b00      	cmp	r3, #0
    7062:	d00d      	beq.n	7080 <mem_cmp+0x40>
    7064:	69fb      	ldr	r3, [r7, #28]
    7066:	1c5a      	adds	r2, r3, #1
    7068:	61fa      	str	r2, [r7, #28]
    706a:	781b      	ldrb	r3, [r3, #0]
    706c:	0019      	movs	r1, r3
    706e:	69bb      	ldr	r3, [r7, #24]
    7070:	1c5a      	adds	r2, r3, #1
    7072:	61ba      	str	r2, [r7, #24]
    7074:	781b      	ldrb	r3, [r3, #0]
    7076:	1acb      	subs	r3, r1, r3
    7078:	617b      	str	r3, [r7, #20]
    707a:	697b      	ldr	r3, [r7, #20]
    707c:	2b00      	cmp	r3, #0
    707e:	d0ec      	beq.n	705a <mem_cmp+0x1a>
	return r;
    7080:	697b      	ldr	r3, [r7, #20]
}
    7082:	0018      	movs	r0, r3
    7084:	46bd      	mov	sp, r7
    7086:	b008      	add	sp, #32
    7088:	bd80      	pop	{r7, pc}

0000708a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    708a:	b580      	push	{r7, lr}
    708c:	b082      	sub	sp, #8
    708e:	af00      	add	r7, sp, #0
    7090:	6078      	str	r0, [r7, #4]
    7092:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    7094:	e002      	b.n	709c <chk_chr+0x12>
    7096:	687b      	ldr	r3, [r7, #4]
    7098:	3301      	adds	r3, #1
    709a:	607b      	str	r3, [r7, #4]
    709c:	687b      	ldr	r3, [r7, #4]
    709e:	781b      	ldrb	r3, [r3, #0]
    70a0:	2b00      	cmp	r3, #0
    70a2:	d005      	beq.n	70b0 <chk_chr+0x26>
    70a4:	687b      	ldr	r3, [r7, #4]
    70a6:	781b      	ldrb	r3, [r3, #0]
    70a8:	001a      	movs	r2, r3
    70aa:	683b      	ldr	r3, [r7, #0]
    70ac:	429a      	cmp	r2, r3
    70ae:	d1f2      	bne.n	7096 <chk_chr+0xc>
	return *str;
    70b0:	687b      	ldr	r3, [r7, #4]
    70b2:	781b      	ldrb	r3, [r3, #0]
}
    70b4:	0018      	movs	r0, r3
    70b6:	46bd      	mov	sp, r7
    70b8:	b002      	add	sp, #8
    70ba:	bd80      	pop	{r7, pc}

000070bc <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    70bc:	b590      	push	{r4, r7, lr}
    70be:	b085      	sub	sp, #20
    70c0:	af00      	add	r7, sp, #0
    70c2:	6078      	str	r0, [r7, #4]
    70c4:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
    70c6:	687b      	ldr	r3, [r7, #4]
    70c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    70ca:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
    70cc:	68fa      	ldr	r2, [r7, #12]
    70ce:	683b      	ldr	r3, [r7, #0]
    70d0:	429a      	cmp	r2, r3
    70d2:	d04e      	beq.n	7172 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    70d4:	687b      	ldr	r3, [r7, #4]
    70d6:	791b      	ldrb	r3, [r3, #4]
    70d8:	2b00      	cmp	r3, #0
    70da:	d037      	beq.n	714c <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    70dc:	687b      	ldr	r3, [r7, #4]
    70de:	7858      	ldrb	r0, [r3, #1]
    70e0:	687b      	ldr	r3, [r7, #4]
    70e2:	3330      	adds	r3, #48	; 0x30
    70e4:	0019      	movs	r1, r3
    70e6:	68fa      	ldr	r2, [r7, #12]
    70e8:	2301      	movs	r3, #1
    70ea:	4c24      	ldr	r4, [pc, #144]	; (717c <move_window+0xc0>)
    70ec:	47a0      	blx	r4
    70ee:	1e03      	subs	r3, r0, #0
    70f0:	d001      	beq.n	70f6 <move_window+0x3a>
				return FR_DISK_ERR;
    70f2:	2301      	movs	r3, #1
    70f4:	e03e      	b.n	7174 <move_window+0xb8>
			fs->wflag = 0;
    70f6:	687b      	ldr	r3, [r7, #4]
    70f8:	2200      	movs	r2, #0
    70fa:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    70fc:	687b      	ldr	r3, [r7, #4]
    70fe:	6a1a      	ldr	r2, [r3, #32]
    7100:	687b      	ldr	r3, [r7, #4]
    7102:	69db      	ldr	r3, [r3, #28]
    7104:	18d2      	adds	r2, r2, r3
    7106:	68fb      	ldr	r3, [r7, #12]
    7108:	429a      	cmp	r2, r3
    710a:	d91f      	bls.n	714c <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    710c:	230b      	movs	r3, #11
    710e:	18fb      	adds	r3, r7, r3
    7110:	687a      	ldr	r2, [r7, #4]
    7112:	78d2      	ldrb	r2, [r2, #3]
    7114:	701a      	strb	r2, [r3, #0]
    7116:	e014      	b.n	7142 <move_window+0x86>
					wsect += fs->fsize;
    7118:	687b      	ldr	r3, [r7, #4]
    711a:	69db      	ldr	r3, [r3, #28]
    711c:	68fa      	ldr	r2, [r7, #12]
    711e:	18d3      	adds	r3, r2, r3
    7120:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
    7122:	687b      	ldr	r3, [r7, #4]
    7124:	7858      	ldrb	r0, [r3, #1]
    7126:	687b      	ldr	r3, [r7, #4]
    7128:	3330      	adds	r3, #48	; 0x30
    712a:	0019      	movs	r1, r3
    712c:	68fa      	ldr	r2, [r7, #12]
    712e:	2301      	movs	r3, #1
    7130:	4c12      	ldr	r4, [pc, #72]	; (717c <move_window+0xc0>)
    7132:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    7134:	230b      	movs	r3, #11
    7136:	18fb      	adds	r3, r7, r3
    7138:	781a      	ldrb	r2, [r3, #0]
    713a:	230b      	movs	r3, #11
    713c:	18fb      	adds	r3, r7, r3
    713e:	3a01      	subs	r2, #1
    7140:	701a      	strb	r2, [r3, #0]
    7142:	230b      	movs	r3, #11
    7144:	18fb      	adds	r3, r7, r3
    7146:	781b      	ldrb	r3, [r3, #0]
    7148:	2b01      	cmp	r3, #1
    714a:	d8e5      	bhi.n	7118 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
    714c:	683b      	ldr	r3, [r7, #0]
    714e:	2b00      	cmp	r3, #0
    7150:	d00f      	beq.n	7172 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    7152:	687b      	ldr	r3, [r7, #4]
    7154:	7858      	ldrb	r0, [r3, #1]
    7156:	687b      	ldr	r3, [r7, #4]
    7158:	3330      	adds	r3, #48	; 0x30
    715a:	0019      	movs	r1, r3
    715c:	683a      	ldr	r2, [r7, #0]
    715e:	2301      	movs	r3, #1
    7160:	4c07      	ldr	r4, [pc, #28]	; (7180 <move_window+0xc4>)
    7162:	47a0      	blx	r4
    7164:	1e03      	subs	r3, r0, #0
    7166:	d001      	beq.n	716c <move_window+0xb0>
				return FR_DISK_ERR;
    7168:	2301      	movs	r3, #1
    716a:	e003      	b.n	7174 <move_window+0xb8>
			fs->winsect = sector;
    716c:	687b      	ldr	r3, [r7, #4]
    716e:	683a      	ldr	r2, [r7, #0]
    7170:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
    7172:	2300      	movs	r3, #0
}
    7174:	0018      	movs	r0, r3
    7176:	46bd      	mov	sp, r7
    7178:	b005      	add	sp, #20
    717a:	bd90      	pop	{r4, r7, pc}
    717c:	00006da9 	.word	0x00006da9
    7180:	00006cd1 	.word	0x00006cd1

00007184 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    7184:	b590      	push	{r4, r7, lr}
    7186:	b085      	sub	sp, #20
    7188:	af00      	add	r7, sp, #0
    718a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
    718c:	230f      	movs	r3, #15
    718e:	18fc      	adds	r4, r7, r3
    7190:	687b      	ldr	r3, [r7, #4]
    7192:	2100      	movs	r1, #0
    7194:	0018      	movs	r0, r3
    7196:	4b52      	ldr	r3, [pc, #328]	; (72e0 <sync+0x15c>)
    7198:	4798      	blx	r3
    719a:	0003      	movs	r3, r0
    719c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    719e:	230f      	movs	r3, #15
    71a0:	18fb      	adds	r3, r7, r3
    71a2:	781b      	ldrb	r3, [r3, #0]
    71a4:	2b00      	cmp	r3, #0
    71a6:	d000      	beq.n	71aa <sync+0x26>
    71a8:	e093      	b.n	72d2 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    71aa:	687b      	ldr	r3, [r7, #4]
    71ac:	781b      	ldrb	r3, [r3, #0]
    71ae:	2b03      	cmp	r3, #3
    71b0:	d000      	beq.n	71b4 <sync+0x30>
    71b2:	e081      	b.n	72b8 <sync+0x134>
    71b4:	687b      	ldr	r3, [r7, #4]
    71b6:	795b      	ldrb	r3, [r3, #5]
    71b8:	2b00      	cmp	r3, #0
    71ba:	d07d      	beq.n	72b8 <sync+0x134>
			fs->winsect = 0;
    71bc:	687b      	ldr	r3, [r7, #4]
    71be:	2200      	movs	r2, #0
    71c0:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    71c2:	687b      	ldr	r3, [r7, #4]
    71c4:	3330      	adds	r3, #48	; 0x30
    71c6:	0018      	movs	r0, r3
    71c8:	2380      	movs	r3, #128	; 0x80
    71ca:	009b      	lsls	r3, r3, #2
    71cc:	001a      	movs	r2, r3
    71ce:	2100      	movs	r1, #0
    71d0:	4b44      	ldr	r3, [pc, #272]	; (72e4 <sync+0x160>)
    71d2:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    71d4:	687b      	ldr	r3, [r7, #4]
    71d6:	4a44      	ldr	r2, [pc, #272]	; (72e8 <sync+0x164>)
    71d8:	2155      	movs	r1, #85	; 0x55
    71da:	5499      	strb	r1, [r3, r2]
    71dc:	687b      	ldr	r3, [r7, #4]
    71de:	4a43      	ldr	r2, [pc, #268]	; (72ec <sync+0x168>)
    71e0:	21aa      	movs	r1, #170	; 0xaa
    71e2:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    71e4:	687b      	ldr	r3, [r7, #4]
    71e6:	2230      	movs	r2, #48	; 0x30
    71e8:	2152      	movs	r1, #82	; 0x52
    71ea:	5499      	strb	r1, [r3, r2]
    71ec:	687b      	ldr	r3, [r7, #4]
    71ee:	2231      	movs	r2, #49	; 0x31
    71f0:	2152      	movs	r1, #82	; 0x52
    71f2:	5499      	strb	r1, [r3, r2]
    71f4:	687b      	ldr	r3, [r7, #4]
    71f6:	2232      	movs	r2, #50	; 0x32
    71f8:	2161      	movs	r1, #97	; 0x61
    71fa:	5499      	strb	r1, [r3, r2]
    71fc:	687b      	ldr	r3, [r7, #4]
    71fe:	2233      	movs	r2, #51	; 0x33
    7200:	2141      	movs	r1, #65	; 0x41
    7202:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    7204:	687a      	ldr	r2, [r7, #4]
    7206:	2385      	movs	r3, #133	; 0x85
    7208:	009b      	lsls	r3, r3, #2
    720a:	2172      	movs	r1, #114	; 0x72
    720c:	54d1      	strb	r1, [r2, r3]
    720e:	687b      	ldr	r3, [r7, #4]
    7210:	4a37      	ldr	r2, [pc, #220]	; (72f0 <sync+0x16c>)
    7212:	2172      	movs	r1, #114	; 0x72
    7214:	5499      	strb	r1, [r3, r2]
    7216:	687b      	ldr	r3, [r7, #4]
    7218:	4a36      	ldr	r2, [pc, #216]	; (72f4 <sync+0x170>)
    721a:	2141      	movs	r1, #65	; 0x41
    721c:	5499      	strb	r1, [r3, r2]
    721e:	687b      	ldr	r3, [r7, #4]
    7220:	4a35      	ldr	r2, [pc, #212]	; (72f8 <sync+0x174>)
    7222:	2161      	movs	r1, #97	; 0x61
    7224:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    7226:	687b      	ldr	r3, [r7, #4]
    7228:	691b      	ldr	r3, [r3, #16]
    722a:	b2d9      	uxtb	r1, r3
    722c:	687a      	ldr	r2, [r7, #4]
    722e:	2386      	movs	r3, #134	; 0x86
    7230:	009b      	lsls	r3, r3, #2
    7232:	54d1      	strb	r1, [r2, r3]
    7234:	687b      	ldr	r3, [r7, #4]
    7236:	691b      	ldr	r3, [r3, #16]
    7238:	b29b      	uxth	r3, r3
    723a:	0a1b      	lsrs	r3, r3, #8
    723c:	b29b      	uxth	r3, r3
    723e:	b2d9      	uxtb	r1, r3
    7240:	687b      	ldr	r3, [r7, #4]
    7242:	4a2e      	ldr	r2, [pc, #184]	; (72fc <sync+0x178>)
    7244:	5499      	strb	r1, [r3, r2]
    7246:	687b      	ldr	r3, [r7, #4]
    7248:	691b      	ldr	r3, [r3, #16]
    724a:	0c1b      	lsrs	r3, r3, #16
    724c:	b2d9      	uxtb	r1, r3
    724e:	687b      	ldr	r3, [r7, #4]
    7250:	4a2b      	ldr	r2, [pc, #172]	; (7300 <sync+0x17c>)
    7252:	5499      	strb	r1, [r3, r2]
    7254:	687b      	ldr	r3, [r7, #4]
    7256:	691b      	ldr	r3, [r3, #16]
    7258:	0e1b      	lsrs	r3, r3, #24
    725a:	b2d9      	uxtb	r1, r3
    725c:	687b      	ldr	r3, [r7, #4]
    725e:	4a29      	ldr	r2, [pc, #164]	; (7304 <sync+0x180>)
    7260:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    7262:	687b      	ldr	r3, [r7, #4]
    7264:	68db      	ldr	r3, [r3, #12]
    7266:	b2d9      	uxtb	r1, r3
    7268:	687a      	ldr	r2, [r7, #4]
    726a:	2387      	movs	r3, #135	; 0x87
    726c:	009b      	lsls	r3, r3, #2
    726e:	54d1      	strb	r1, [r2, r3]
    7270:	687b      	ldr	r3, [r7, #4]
    7272:	68db      	ldr	r3, [r3, #12]
    7274:	b29b      	uxth	r3, r3
    7276:	0a1b      	lsrs	r3, r3, #8
    7278:	b29b      	uxth	r3, r3
    727a:	b2d9      	uxtb	r1, r3
    727c:	687b      	ldr	r3, [r7, #4]
    727e:	4a22      	ldr	r2, [pc, #136]	; (7308 <sync+0x184>)
    7280:	5499      	strb	r1, [r3, r2]
    7282:	687b      	ldr	r3, [r7, #4]
    7284:	68db      	ldr	r3, [r3, #12]
    7286:	0c1b      	lsrs	r3, r3, #16
    7288:	b2d9      	uxtb	r1, r3
    728a:	687b      	ldr	r3, [r7, #4]
    728c:	4a1f      	ldr	r2, [pc, #124]	; (730c <sync+0x188>)
    728e:	5499      	strb	r1, [r3, r2]
    7290:	687b      	ldr	r3, [r7, #4]
    7292:	68db      	ldr	r3, [r3, #12]
    7294:	0e1b      	lsrs	r3, r3, #24
    7296:	b2d9      	uxtb	r1, r3
    7298:	687b      	ldr	r3, [r7, #4]
    729a:	4a1d      	ldr	r2, [pc, #116]	; (7310 <sync+0x18c>)
    729c:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    729e:	687b      	ldr	r3, [r7, #4]
    72a0:	7858      	ldrb	r0, [r3, #1]
    72a2:	687b      	ldr	r3, [r7, #4]
    72a4:	3330      	adds	r3, #48	; 0x30
    72a6:	0019      	movs	r1, r3
    72a8:	687b      	ldr	r3, [r7, #4]
    72aa:	695a      	ldr	r2, [r3, #20]
    72ac:	2301      	movs	r3, #1
    72ae:	4c19      	ldr	r4, [pc, #100]	; (7314 <sync+0x190>)
    72b0:	47a0      	blx	r4
			fs->fsi_flag = 0;
    72b2:	687b      	ldr	r3, [r7, #4]
    72b4:	2200      	movs	r2, #0
    72b6:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    72b8:	687b      	ldr	r3, [r7, #4]
    72ba:	785b      	ldrb	r3, [r3, #1]
    72bc:	2200      	movs	r2, #0
    72be:	2100      	movs	r1, #0
    72c0:	0018      	movs	r0, r3
    72c2:	4b15      	ldr	r3, [pc, #84]	; (7318 <sync+0x194>)
    72c4:	4798      	blx	r3
    72c6:	1e03      	subs	r3, r0, #0
    72c8:	d003      	beq.n	72d2 <sync+0x14e>
			res = FR_DISK_ERR;
    72ca:	230f      	movs	r3, #15
    72cc:	18fb      	adds	r3, r7, r3
    72ce:	2201      	movs	r2, #1
    72d0:	701a      	strb	r2, [r3, #0]
	}

	return res;
    72d2:	230f      	movs	r3, #15
    72d4:	18fb      	adds	r3, r7, r3
    72d6:	781b      	ldrb	r3, [r3, #0]
}
    72d8:	0018      	movs	r0, r3
    72da:	46bd      	mov	sp, r7
    72dc:	b005      	add	sp, #20
    72de:	bd90      	pop	{r4, r7, pc}
    72e0:	000070bd 	.word	0x000070bd
    72e4:	00007011 	.word	0x00007011
    72e8:	0000022e 	.word	0x0000022e
    72ec:	0000022f 	.word	0x0000022f
    72f0:	00000215 	.word	0x00000215
    72f4:	00000216 	.word	0x00000216
    72f8:	00000217 	.word	0x00000217
    72fc:	00000219 	.word	0x00000219
    7300:	0000021a 	.word	0x0000021a
    7304:	0000021b 	.word	0x0000021b
    7308:	0000021d 	.word	0x0000021d
    730c:	0000021e 	.word	0x0000021e
    7310:	0000021f 	.word	0x0000021f
    7314:	00006da9 	.word	0x00006da9
    7318:	00006e81 	.word	0x00006e81

0000731c <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    731c:	b580      	push	{r7, lr}
    731e:	b082      	sub	sp, #8
    7320:	af00      	add	r7, sp, #0
    7322:	6078      	str	r0, [r7, #4]
    7324:	6039      	str	r1, [r7, #0]
	clst -= 2;
    7326:	683b      	ldr	r3, [r7, #0]
    7328:	3b02      	subs	r3, #2
    732a:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    732c:	687b      	ldr	r3, [r7, #4]
    732e:	699b      	ldr	r3, [r3, #24]
    7330:	1e9a      	subs	r2, r3, #2
    7332:	683b      	ldr	r3, [r7, #0]
    7334:	429a      	cmp	r2, r3
    7336:	d801      	bhi.n	733c <clust2sect+0x20>
    7338:	2300      	movs	r3, #0
    733a:	e007      	b.n	734c <clust2sect+0x30>
	return clst * fs->csize + fs->database;
    733c:	687b      	ldr	r3, [r7, #4]
    733e:	789b      	ldrb	r3, [r3, #2]
    7340:	001a      	movs	r2, r3
    7342:	683b      	ldr	r3, [r7, #0]
    7344:	435a      	muls	r2, r3
    7346:	687b      	ldr	r3, [r7, #4]
    7348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    734a:	18d3      	adds	r3, r2, r3
}
    734c:	0018      	movs	r0, r3
    734e:	46bd      	mov	sp, r7
    7350:	b002      	add	sp, #8
    7352:	bd80      	pop	{r7, pc}

00007354 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    7354:	b580      	push	{r7, lr}
    7356:	b086      	sub	sp, #24
    7358:	af00      	add	r7, sp, #0
    735a:	6078      	str	r0, [r7, #4]
    735c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    735e:	683b      	ldr	r3, [r7, #0]
    7360:	2b01      	cmp	r3, #1
    7362:	d904      	bls.n	736e <get_fat+0x1a>
    7364:	687b      	ldr	r3, [r7, #4]
    7366:	699a      	ldr	r2, [r3, #24]
    7368:	683b      	ldr	r3, [r7, #0]
    736a:	429a      	cmp	r2, r3
    736c:	d801      	bhi.n	7372 <get_fat+0x1e>
		return 1;
    736e:	2301      	movs	r3, #1
    7370:	e09f      	b.n	74b2 <get_fat+0x15e>

	switch (fs->fs_type) {
    7372:	687b      	ldr	r3, [r7, #4]
    7374:	781b      	ldrb	r3, [r3, #0]
    7376:	2b02      	cmp	r3, #2
    7378:	d048      	beq.n	740c <get_fat+0xb8>
    737a:	2b03      	cmp	r3, #3
    737c:	d067      	beq.n	744e <get_fat+0xfa>
    737e:	2b01      	cmp	r3, #1
    7380:	d000      	beq.n	7384 <get_fat+0x30>
    7382:	e094      	b.n	74ae <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    7384:	683b      	ldr	r3, [r7, #0]
    7386:	617b      	str	r3, [r7, #20]
    7388:	697b      	ldr	r3, [r7, #20]
    738a:	085b      	lsrs	r3, r3, #1
    738c:	697a      	ldr	r2, [r7, #20]
    738e:	18d3      	adds	r3, r2, r3
    7390:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7392:	687b      	ldr	r3, [r7, #4]
    7394:	6a1a      	ldr	r2, [r3, #32]
    7396:	697b      	ldr	r3, [r7, #20]
    7398:	0a5b      	lsrs	r3, r3, #9
    739a:	18d2      	adds	r2, r2, r3
    739c:	687b      	ldr	r3, [r7, #4]
    739e:	0011      	movs	r1, r2
    73a0:	0018      	movs	r0, r3
    73a2:	4b46      	ldr	r3, [pc, #280]	; (74bc <get_fat+0x168>)
    73a4:	4798      	blx	r3
    73a6:	1e03      	subs	r3, r0, #0
    73a8:	d000      	beq.n	73ac <get_fat+0x58>
    73aa:	e079      	b.n	74a0 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
    73ac:	697b      	ldr	r3, [r7, #20]
    73ae:	05db      	lsls	r3, r3, #23
    73b0:	0ddb      	lsrs	r3, r3, #23
    73b2:	687a      	ldr	r2, [r7, #4]
    73b4:	2130      	movs	r1, #48	; 0x30
    73b6:	18d3      	adds	r3, r2, r3
    73b8:	185b      	adds	r3, r3, r1
    73ba:	781b      	ldrb	r3, [r3, #0]
    73bc:	613b      	str	r3, [r7, #16]
    73be:	697b      	ldr	r3, [r7, #20]
    73c0:	3301      	adds	r3, #1
    73c2:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    73c4:	687b      	ldr	r3, [r7, #4]
    73c6:	6a1a      	ldr	r2, [r3, #32]
    73c8:	697b      	ldr	r3, [r7, #20]
    73ca:	0a5b      	lsrs	r3, r3, #9
    73cc:	18d2      	adds	r2, r2, r3
    73ce:	687b      	ldr	r3, [r7, #4]
    73d0:	0011      	movs	r1, r2
    73d2:	0018      	movs	r0, r3
    73d4:	4b39      	ldr	r3, [pc, #228]	; (74bc <get_fat+0x168>)
    73d6:	4798      	blx	r3
    73d8:	1e03      	subs	r3, r0, #0
    73da:	d163      	bne.n	74a4 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
    73dc:	697b      	ldr	r3, [r7, #20]
    73de:	05db      	lsls	r3, r3, #23
    73e0:	0ddb      	lsrs	r3, r3, #23
    73e2:	687a      	ldr	r2, [r7, #4]
    73e4:	2130      	movs	r1, #48	; 0x30
    73e6:	18d3      	adds	r3, r2, r3
    73e8:	185b      	adds	r3, r3, r1
    73ea:	781b      	ldrb	r3, [r3, #0]
    73ec:	021b      	lsls	r3, r3, #8
    73ee:	001a      	movs	r2, r3
    73f0:	693b      	ldr	r3, [r7, #16]
    73f2:	4313      	orrs	r3, r2
    73f4:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    73f6:	683b      	ldr	r3, [r7, #0]
    73f8:	2201      	movs	r2, #1
    73fa:	4013      	ands	r3, r2
    73fc:	d002      	beq.n	7404 <get_fat+0xb0>
    73fe:	693b      	ldr	r3, [r7, #16]
    7400:	091b      	lsrs	r3, r3, #4
    7402:	e056      	b.n	74b2 <get_fat+0x15e>
    7404:	693b      	ldr	r3, [r7, #16]
    7406:	051b      	lsls	r3, r3, #20
    7408:	0d1b      	lsrs	r3, r3, #20
    740a:	e052      	b.n	74b2 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    740c:	687b      	ldr	r3, [r7, #4]
    740e:	6a1a      	ldr	r2, [r3, #32]
    7410:	683b      	ldr	r3, [r7, #0]
    7412:	0a1b      	lsrs	r3, r3, #8
    7414:	18d2      	adds	r2, r2, r3
    7416:	687b      	ldr	r3, [r7, #4]
    7418:	0011      	movs	r1, r2
    741a:	0018      	movs	r0, r3
    741c:	4b27      	ldr	r3, [pc, #156]	; (74bc <get_fat+0x168>)
    741e:	4798      	blx	r3
    7420:	1e03      	subs	r3, r0, #0
    7422:	d141      	bne.n	74a8 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
    7424:	683b      	ldr	r3, [r7, #0]
    7426:	005a      	lsls	r2, r3, #1
    7428:	23ff      	movs	r3, #255	; 0xff
    742a:	005b      	lsls	r3, r3, #1
    742c:	4013      	ands	r3, r2
    742e:	3330      	adds	r3, #48	; 0x30
    7430:	687a      	ldr	r2, [r7, #4]
    7432:	18d3      	adds	r3, r2, r3
    7434:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
    7436:	68fb      	ldr	r3, [r7, #12]
    7438:	3301      	adds	r3, #1
    743a:	781b      	ldrb	r3, [r3, #0]
    743c:	021b      	lsls	r3, r3, #8
    743e:	b21a      	sxth	r2, r3
    7440:	68fb      	ldr	r3, [r7, #12]
    7442:	781b      	ldrb	r3, [r3, #0]
    7444:	b21b      	sxth	r3, r3
    7446:	4313      	orrs	r3, r2
    7448:	b21b      	sxth	r3, r3
    744a:	b29b      	uxth	r3, r3
    744c:	e031      	b.n	74b2 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    744e:	687b      	ldr	r3, [r7, #4]
    7450:	6a1a      	ldr	r2, [r3, #32]
    7452:	683b      	ldr	r3, [r7, #0]
    7454:	09db      	lsrs	r3, r3, #7
    7456:	18d2      	adds	r2, r2, r3
    7458:	687b      	ldr	r3, [r7, #4]
    745a:	0011      	movs	r1, r2
    745c:	0018      	movs	r0, r3
    745e:	4b17      	ldr	r3, [pc, #92]	; (74bc <get_fat+0x168>)
    7460:	4798      	blx	r3
    7462:	1e03      	subs	r3, r0, #0
    7464:	d122      	bne.n	74ac <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
    7466:	683b      	ldr	r3, [r7, #0]
    7468:	009a      	lsls	r2, r3, #2
    746a:	23fe      	movs	r3, #254	; 0xfe
    746c:	005b      	lsls	r3, r3, #1
    746e:	4013      	ands	r3, r2
    7470:	3330      	adds	r3, #48	; 0x30
    7472:	687a      	ldr	r2, [r7, #4]
    7474:	18d3      	adds	r3, r2, r3
    7476:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
    7478:	68fb      	ldr	r3, [r7, #12]
    747a:	3303      	adds	r3, #3
    747c:	781b      	ldrb	r3, [r3, #0]
    747e:	061a      	lsls	r2, r3, #24
    7480:	68fb      	ldr	r3, [r7, #12]
    7482:	3302      	adds	r3, #2
    7484:	781b      	ldrb	r3, [r3, #0]
    7486:	041b      	lsls	r3, r3, #16
    7488:	4313      	orrs	r3, r2
    748a:	68fa      	ldr	r2, [r7, #12]
    748c:	3201      	adds	r2, #1
    748e:	7812      	ldrb	r2, [r2, #0]
    7490:	0212      	lsls	r2, r2, #8
    7492:	4313      	orrs	r3, r2
    7494:	68fa      	ldr	r2, [r7, #12]
    7496:	7812      	ldrb	r2, [r2, #0]
    7498:	4313      	orrs	r3, r2
    749a:	011b      	lsls	r3, r3, #4
    749c:	091b      	lsrs	r3, r3, #4
    749e:	e008      	b.n	74b2 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    74a0:	46c0      	nop			; (mov r8, r8)
    74a2:	e004      	b.n	74ae <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    74a4:	46c0      	nop			; (mov r8, r8)
    74a6:	e002      	b.n	74ae <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    74a8:	46c0      	nop			; (mov r8, r8)
    74aa:	e000      	b.n	74ae <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    74ac:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    74ae:	2301      	movs	r3, #1
    74b0:	425b      	negs	r3, r3
}
    74b2:	0018      	movs	r0, r3
    74b4:	46bd      	mov	sp, r7
    74b6:	b006      	add	sp, #24
    74b8:	bd80      	pop	{r7, pc}
    74ba:	46c0      	nop			; (mov r8, r8)
    74bc:	000070bd 	.word	0x000070bd

000074c0 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    74c0:	b590      	push	{r4, r7, lr}
    74c2:	b089      	sub	sp, #36	; 0x24
    74c4:	af00      	add	r7, sp, #0
    74c6:	60f8      	str	r0, [r7, #12]
    74c8:	60b9      	str	r1, [r7, #8]
    74ca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    74cc:	68bb      	ldr	r3, [r7, #8]
    74ce:	2b01      	cmp	r3, #1
    74d0:	d904      	bls.n	74dc <put_fat+0x1c>
    74d2:	68fb      	ldr	r3, [r7, #12]
    74d4:	699a      	ldr	r2, [r3, #24]
    74d6:	68bb      	ldr	r3, [r7, #8]
    74d8:	429a      	cmp	r2, r3
    74da:	d804      	bhi.n	74e6 <put_fat+0x26>
		res = FR_INT_ERR;
    74dc:	231f      	movs	r3, #31
    74de:	18fb      	adds	r3, r7, r3
    74e0:	2202      	movs	r2, #2
    74e2:	701a      	strb	r2, [r3, #0]
    74e4:	e100      	b.n	76e8 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
    74e6:	68fb      	ldr	r3, [r7, #12]
    74e8:	781b      	ldrb	r3, [r3, #0]
    74ea:	2b02      	cmp	r3, #2
    74ec:	d100      	bne.n	74f0 <put_fat+0x30>
    74ee:	e078      	b.n	75e2 <put_fat+0x122>
    74f0:	2b03      	cmp	r3, #3
    74f2:	d100      	bne.n	74f6 <put_fat+0x36>
    74f4:	e09e      	b.n	7634 <put_fat+0x174>
    74f6:	2b01      	cmp	r3, #1
    74f8:	d000      	beq.n	74fc <put_fat+0x3c>
    74fa:	e0e6      	b.n	76ca <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    74fc:	68bb      	ldr	r3, [r7, #8]
    74fe:	61bb      	str	r3, [r7, #24]
    7500:	69bb      	ldr	r3, [r7, #24]
    7502:	085b      	lsrs	r3, r3, #1
    7504:	69ba      	ldr	r2, [r7, #24]
    7506:	18d3      	adds	r3, r2, r3
    7508:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    750a:	68fb      	ldr	r3, [r7, #12]
    750c:	6a1a      	ldr	r2, [r3, #32]
    750e:	69bb      	ldr	r3, [r7, #24]
    7510:	0a5b      	lsrs	r3, r3, #9
    7512:	18d2      	adds	r2, r2, r3
    7514:	231f      	movs	r3, #31
    7516:	18fc      	adds	r4, r7, r3
    7518:	68fb      	ldr	r3, [r7, #12]
    751a:	0011      	movs	r1, r2
    751c:	0018      	movs	r0, r3
    751e:	4b76      	ldr	r3, [pc, #472]	; (76f8 <put_fat+0x238>)
    7520:	4798      	blx	r3
    7522:	0003      	movs	r3, r0
    7524:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7526:	231f      	movs	r3, #31
    7528:	18fb      	adds	r3, r7, r3
    752a:	781b      	ldrb	r3, [r3, #0]
    752c:	2b00      	cmp	r3, #0
    752e:	d000      	beq.n	7532 <put_fat+0x72>
    7530:	e0d0      	b.n	76d4 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
    7532:	69bb      	ldr	r3, [r7, #24]
    7534:	05db      	lsls	r3, r3, #23
    7536:	0ddb      	lsrs	r3, r3, #23
    7538:	3330      	adds	r3, #48	; 0x30
    753a:	68fa      	ldr	r2, [r7, #12]
    753c:	18d3      	adds	r3, r2, r3
    753e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7540:	68bb      	ldr	r3, [r7, #8]
    7542:	2201      	movs	r2, #1
    7544:	4013      	ands	r3, r2
    7546:	d00d      	beq.n	7564 <put_fat+0xa4>
    7548:	697b      	ldr	r3, [r7, #20]
    754a:	781b      	ldrb	r3, [r3, #0]
    754c:	b25b      	sxtb	r3, r3
    754e:	220f      	movs	r2, #15
    7550:	4013      	ands	r3, r2
    7552:	b25a      	sxtb	r2, r3
    7554:	687b      	ldr	r3, [r7, #4]
    7556:	b2db      	uxtb	r3, r3
    7558:	011b      	lsls	r3, r3, #4
    755a:	b25b      	sxtb	r3, r3
    755c:	4313      	orrs	r3, r2
    755e:	b25b      	sxtb	r3, r3
    7560:	b2db      	uxtb	r3, r3
    7562:	e001      	b.n	7568 <put_fat+0xa8>
    7564:	687b      	ldr	r3, [r7, #4]
    7566:	b2db      	uxtb	r3, r3
    7568:	697a      	ldr	r2, [r7, #20]
    756a:	7013      	strb	r3, [r2, #0]
			bc++;
    756c:	69bb      	ldr	r3, [r7, #24]
    756e:	3301      	adds	r3, #1
    7570:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
    7572:	68fb      	ldr	r3, [r7, #12]
    7574:	2201      	movs	r2, #1
    7576:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7578:	68fb      	ldr	r3, [r7, #12]
    757a:	6a1a      	ldr	r2, [r3, #32]
    757c:	69bb      	ldr	r3, [r7, #24]
    757e:	0a5b      	lsrs	r3, r3, #9
    7580:	18d2      	adds	r2, r2, r3
    7582:	231f      	movs	r3, #31
    7584:	18fc      	adds	r4, r7, r3
    7586:	68fb      	ldr	r3, [r7, #12]
    7588:	0011      	movs	r1, r2
    758a:	0018      	movs	r0, r3
    758c:	4b5a      	ldr	r3, [pc, #360]	; (76f8 <put_fat+0x238>)
    758e:	4798      	blx	r3
    7590:	0003      	movs	r3, r0
    7592:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7594:	231f      	movs	r3, #31
    7596:	18fb      	adds	r3, r7, r3
    7598:	781b      	ldrb	r3, [r3, #0]
    759a:	2b00      	cmp	r3, #0
    759c:	d000      	beq.n	75a0 <put_fat+0xe0>
    759e:	e09b      	b.n	76d8 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
    75a0:	69bb      	ldr	r3, [r7, #24]
    75a2:	05db      	lsls	r3, r3, #23
    75a4:	0ddb      	lsrs	r3, r3, #23
    75a6:	3330      	adds	r3, #48	; 0x30
    75a8:	68fa      	ldr	r2, [r7, #12]
    75aa:	18d3      	adds	r3, r2, r3
    75ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    75ae:	68bb      	ldr	r3, [r7, #8]
    75b0:	2201      	movs	r2, #1
    75b2:	4013      	ands	r3, r2
    75b4:	d003      	beq.n	75be <put_fat+0xfe>
    75b6:	687b      	ldr	r3, [r7, #4]
    75b8:	091b      	lsrs	r3, r3, #4
    75ba:	b2db      	uxtb	r3, r3
    75bc:	e00e      	b.n	75dc <put_fat+0x11c>
    75be:	697b      	ldr	r3, [r7, #20]
    75c0:	781b      	ldrb	r3, [r3, #0]
    75c2:	b25b      	sxtb	r3, r3
    75c4:	220f      	movs	r2, #15
    75c6:	4393      	bics	r3, r2
    75c8:	b25a      	sxtb	r2, r3
    75ca:	687b      	ldr	r3, [r7, #4]
    75cc:	0a1b      	lsrs	r3, r3, #8
    75ce:	b25b      	sxtb	r3, r3
    75d0:	210f      	movs	r1, #15
    75d2:	400b      	ands	r3, r1
    75d4:	b25b      	sxtb	r3, r3
    75d6:	4313      	orrs	r3, r2
    75d8:	b25b      	sxtb	r3, r3
    75da:	b2db      	uxtb	r3, r3
    75dc:	697a      	ldr	r2, [r7, #20]
    75de:	7013      	strb	r3, [r2, #0]
			break;
    75e0:	e07f      	b.n	76e2 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    75e2:	68fb      	ldr	r3, [r7, #12]
    75e4:	6a1a      	ldr	r2, [r3, #32]
    75e6:	68bb      	ldr	r3, [r7, #8]
    75e8:	0a1b      	lsrs	r3, r3, #8
    75ea:	18d2      	adds	r2, r2, r3
    75ec:	231f      	movs	r3, #31
    75ee:	18fc      	adds	r4, r7, r3
    75f0:	68fb      	ldr	r3, [r7, #12]
    75f2:	0011      	movs	r1, r2
    75f4:	0018      	movs	r0, r3
    75f6:	4b40      	ldr	r3, [pc, #256]	; (76f8 <put_fat+0x238>)
    75f8:	4798      	blx	r3
    75fa:	0003      	movs	r3, r0
    75fc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    75fe:	231f      	movs	r3, #31
    7600:	18fb      	adds	r3, r7, r3
    7602:	781b      	ldrb	r3, [r3, #0]
    7604:	2b00      	cmp	r3, #0
    7606:	d169      	bne.n	76dc <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
    7608:	68bb      	ldr	r3, [r7, #8]
    760a:	005a      	lsls	r2, r3, #1
    760c:	23ff      	movs	r3, #255	; 0xff
    760e:	005b      	lsls	r3, r3, #1
    7610:	4013      	ands	r3, r2
    7612:	3330      	adds	r3, #48	; 0x30
    7614:	68fa      	ldr	r2, [r7, #12]
    7616:	18d3      	adds	r3, r2, r3
    7618:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
    761a:	687b      	ldr	r3, [r7, #4]
    761c:	b2da      	uxtb	r2, r3
    761e:	697b      	ldr	r3, [r7, #20]
    7620:	701a      	strb	r2, [r3, #0]
    7622:	697b      	ldr	r3, [r7, #20]
    7624:	3301      	adds	r3, #1
    7626:	687a      	ldr	r2, [r7, #4]
    7628:	b292      	uxth	r2, r2
    762a:	0a12      	lsrs	r2, r2, #8
    762c:	b292      	uxth	r2, r2
    762e:	b2d2      	uxtb	r2, r2
    7630:	701a      	strb	r2, [r3, #0]
			break;
    7632:	e056      	b.n	76e2 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    7634:	68fb      	ldr	r3, [r7, #12]
    7636:	6a1a      	ldr	r2, [r3, #32]
    7638:	68bb      	ldr	r3, [r7, #8]
    763a:	09db      	lsrs	r3, r3, #7
    763c:	18d2      	adds	r2, r2, r3
    763e:	231f      	movs	r3, #31
    7640:	18fc      	adds	r4, r7, r3
    7642:	68fb      	ldr	r3, [r7, #12]
    7644:	0011      	movs	r1, r2
    7646:	0018      	movs	r0, r3
    7648:	4b2b      	ldr	r3, [pc, #172]	; (76f8 <put_fat+0x238>)
    764a:	4798      	blx	r3
    764c:	0003      	movs	r3, r0
    764e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7650:	231f      	movs	r3, #31
    7652:	18fb      	adds	r3, r7, r3
    7654:	781b      	ldrb	r3, [r3, #0]
    7656:	2b00      	cmp	r3, #0
    7658:	d142      	bne.n	76e0 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
    765a:	68bb      	ldr	r3, [r7, #8]
    765c:	009a      	lsls	r2, r3, #2
    765e:	23fe      	movs	r3, #254	; 0xfe
    7660:	005b      	lsls	r3, r3, #1
    7662:	4013      	ands	r3, r2
    7664:	3330      	adds	r3, #48	; 0x30
    7666:	68fa      	ldr	r2, [r7, #12]
    7668:	18d3      	adds	r3, r2, r3
    766a:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
    766c:	697b      	ldr	r3, [r7, #20]
    766e:	3303      	adds	r3, #3
    7670:	781b      	ldrb	r3, [r3, #0]
    7672:	061a      	lsls	r2, r3, #24
    7674:	697b      	ldr	r3, [r7, #20]
    7676:	3302      	adds	r3, #2
    7678:	781b      	ldrb	r3, [r3, #0]
    767a:	041b      	lsls	r3, r3, #16
    767c:	4313      	orrs	r3, r2
    767e:	697a      	ldr	r2, [r7, #20]
    7680:	3201      	adds	r2, #1
    7682:	7812      	ldrb	r2, [r2, #0]
    7684:	0212      	lsls	r2, r2, #8
    7686:	4313      	orrs	r3, r2
    7688:	697a      	ldr	r2, [r7, #20]
    768a:	7812      	ldrb	r2, [r2, #0]
    768c:	4313      	orrs	r3, r2
    768e:	0f1b      	lsrs	r3, r3, #28
    7690:	071b      	lsls	r3, r3, #28
    7692:	687a      	ldr	r2, [r7, #4]
    7694:	4313      	orrs	r3, r2
    7696:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
    7698:	687b      	ldr	r3, [r7, #4]
    769a:	b2da      	uxtb	r2, r3
    769c:	697b      	ldr	r3, [r7, #20]
    769e:	701a      	strb	r2, [r3, #0]
    76a0:	697b      	ldr	r3, [r7, #20]
    76a2:	3301      	adds	r3, #1
    76a4:	687a      	ldr	r2, [r7, #4]
    76a6:	b292      	uxth	r2, r2
    76a8:	0a12      	lsrs	r2, r2, #8
    76aa:	b292      	uxth	r2, r2
    76ac:	b2d2      	uxtb	r2, r2
    76ae:	701a      	strb	r2, [r3, #0]
    76b0:	697b      	ldr	r3, [r7, #20]
    76b2:	3302      	adds	r3, #2
    76b4:	687a      	ldr	r2, [r7, #4]
    76b6:	0c12      	lsrs	r2, r2, #16
    76b8:	b2d2      	uxtb	r2, r2
    76ba:	701a      	strb	r2, [r3, #0]
    76bc:	697b      	ldr	r3, [r7, #20]
    76be:	3303      	adds	r3, #3
    76c0:	687a      	ldr	r2, [r7, #4]
    76c2:	0e12      	lsrs	r2, r2, #24
    76c4:	b2d2      	uxtb	r2, r2
    76c6:	701a      	strb	r2, [r3, #0]
			break;
    76c8:	e00b      	b.n	76e2 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
    76ca:	231f      	movs	r3, #31
    76cc:	18fb      	adds	r3, r7, r3
    76ce:	2202      	movs	r2, #2
    76d0:	701a      	strb	r2, [r3, #0]
    76d2:	e006      	b.n	76e2 <put_fat+0x222>
			if (res != FR_OK) break;
    76d4:	46c0      	nop			; (mov r8, r8)
    76d6:	e004      	b.n	76e2 <put_fat+0x222>
			if (res != FR_OK) break;
    76d8:	46c0      	nop			; (mov r8, r8)
    76da:	e002      	b.n	76e2 <put_fat+0x222>
			if (res != FR_OK) break;
    76dc:	46c0      	nop			; (mov r8, r8)
    76de:	e000      	b.n	76e2 <put_fat+0x222>
			if (res != FR_OK) break;
    76e0:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
    76e2:	68fb      	ldr	r3, [r7, #12]
    76e4:	2201      	movs	r2, #1
    76e6:	711a      	strb	r2, [r3, #4]
	}

	return res;
    76e8:	231f      	movs	r3, #31
    76ea:	18fb      	adds	r3, r7, r3
    76ec:	781b      	ldrb	r3, [r3, #0]
}
    76ee:	0018      	movs	r0, r3
    76f0:	46bd      	mov	sp, r7
    76f2:	b009      	add	sp, #36	; 0x24
    76f4:	bd90      	pop	{r4, r7, pc}
    76f6:	46c0      	nop			; (mov r8, r8)
    76f8:	000070bd 	.word	0x000070bd

000076fc <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    76fc:	b590      	push	{r4, r7, lr}
    76fe:	b085      	sub	sp, #20
    7700:	af00      	add	r7, sp, #0
    7702:	6078      	str	r0, [r7, #4]
    7704:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7706:	683b      	ldr	r3, [r7, #0]
    7708:	2b01      	cmp	r3, #1
    770a:	d904      	bls.n	7716 <remove_chain+0x1a>
    770c:	687b      	ldr	r3, [r7, #4]
    770e:	699a      	ldr	r2, [r3, #24]
    7710:	683b      	ldr	r3, [r7, #0]
    7712:	429a      	cmp	r2, r3
    7714:	d804      	bhi.n	7720 <remove_chain+0x24>
		res = FR_INT_ERR;
    7716:	230f      	movs	r3, #15
    7718:	18fb      	adds	r3, r7, r3
    771a:	2202      	movs	r2, #2
    771c:	701a      	strb	r2, [r3, #0]
    771e:	e045      	b.n	77ac <remove_chain+0xb0>

	} else {
		res = FR_OK;
    7720:	230f      	movs	r3, #15
    7722:	18fb      	adds	r3, r7, r3
    7724:	2200      	movs	r2, #0
    7726:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7728:	e037      	b.n	779a <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    772a:	683a      	ldr	r2, [r7, #0]
    772c:	687b      	ldr	r3, [r7, #4]
    772e:	0011      	movs	r1, r2
    7730:	0018      	movs	r0, r3
    7732:	4b22      	ldr	r3, [pc, #136]	; (77bc <remove_chain+0xc0>)
    7734:	4798      	blx	r3
    7736:	0003      	movs	r3, r0
    7738:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
    773a:	68bb      	ldr	r3, [r7, #8]
    773c:	2b00      	cmp	r3, #0
    773e:	d032      	beq.n	77a6 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7740:	68bb      	ldr	r3, [r7, #8]
    7742:	2b01      	cmp	r3, #1
    7744:	d104      	bne.n	7750 <remove_chain+0x54>
    7746:	230f      	movs	r3, #15
    7748:	18fb      	adds	r3, r7, r3
    774a:	2202      	movs	r2, #2
    774c:	701a      	strb	r2, [r3, #0]
    774e:	e02d      	b.n	77ac <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7750:	68bb      	ldr	r3, [r7, #8]
    7752:	3301      	adds	r3, #1
    7754:	d104      	bne.n	7760 <remove_chain+0x64>
    7756:	230f      	movs	r3, #15
    7758:	18fb      	adds	r3, r7, r3
    775a:	2201      	movs	r2, #1
    775c:	701a      	strb	r2, [r3, #0]
    775e:	e025      	b.n	77ac <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7760:	230f      	movs	r3, #15
    7762:	18fc      	adds	r4, r7, r3
    7764:	6839      	ldr	r1, [r7, #0]
    7766:	687b      	ldr	r3, [r7, #4]
    7768:	2200      	movs	r2, #0
    776a:	0018      	movs	r0, r3
    776c:	4b14      	ldr	r3, [pc, #80]	; (77c0 <remove_chain+0xc4>)
    776e:	4798      	blx	r3
    7770:	0003      	movs	r3, r0
    7772:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7774:	230f      	movs	r3, #15
    7776:	18fb      	adds	r3, r7, r3
    7778:	781b      	ldrb	r3, [r3, #0]
    777a:	2b00      	cmp	r3, #0
    777c:	d115      	bne.n	77aa <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    777e:	687b      	ldr	r3, [r7, #4]
    7780:	691b      	ldr	r3, [r3, #16]
    7782:	3301      	adds	r3, #1
    7784:	d007      	beq.n	7796 <remove_chain+0x9a>
				fs->free_clust++;
    7786:	687b      	ldr	r3, [r7, #4]
    7788:	691b      	ldr	r3, [r3, #16]
    778a:	1c5a      	adds	r2, r3, #1
    778c:	687b      	ldr	r3, [r7, #4]
    778e:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
    7790:	687b      	ldr	r3, [r7, #4]
    7792:	2201      	movs	r2, #1
    7794:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    7796:	68bb      	ldr	r3, [r7, #8]
    7798:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    779a:	687b      	ldr	r3, [r7, #4]
    779c:	699a      	ldr	r2, [r3, #24]
    779e:	683b      	ldr	r3, [r7, #0]
    77a0:	429a      	cmp	r2, r3
    77a2:	d8c2      	bhi.n	772a <remove_chain+0x2e>
    77a4:	e002      	b.n	77ac <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
    77a6:	46c0      	nop			; (mov r8, r8)
    77a8:	e000      	b.n	77ac <remove_chain+0xb0>
			if (res != FR_OK) break;
    77aa:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    77ac:	230f      	movs	r3, #15
    77ae:	18fb      	adds	r3, r7, r3
    77b0:	781b      	ldrb	r3, [r3, #0]
}
    77b2:	0018      	movs	r0, r3
    77b4:	46bd      	mov	sp, r7
    77b6:	b005      	add	sp, #20
    77b8:	bd90      	pop	{r4, r7, pc}
    77ba:	46c0      	nop			; (mov r8, r8)
    77bc:	00007355 	.word	0x00007355
    77c0:	000074c1 	.word	0x000074c1

000077c4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    77c4:	b590      	push	{r4, r7, lr}
    77c6:	b087      	sub	sp, #28
    77c8:	af00      	add	r7, sp, #0
    77ca:	6078      	str	r0, [r7, #4]
    77cc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    77ce:	683b      	ldr	r3, [r7, #0]
    77d0:	2b00      	cmp	r3, #0
    77d2:	d10d      	bne.n	77f0 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
    77d4:	687b      	ldr	r3, [r7, #4]
    77d6:	68db      	ldr	r3, [r3, #12]
    77d8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    77da:	693b      	ldr	r3, [r7, #16]
    77dc:	2b00      	cmp	r3, #0
    77de:	d004      	beq.n	77ea <create_chain+0x26>
    77e0:	687b      	ldr	r3, [r7, #4]
    77e2:	699a      	ldr	r2, [r3, #24]
    77e4:	693b      	ldr	r3, [r7, #16]
    77e6:	429a      	cmp	r2, r3
    77e8:	d818      	bhi.n	781c <create_chain+0x58>
    77ea:	2301      	movs	r3, #1
    77ec:	613b      	str	r3, [r7, #16]
    77ee:	e015      	b.n	781c <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    77f0:	683a      	ldr	r2, [r7, #0]
    77f2:	687b      	ldr	r3, [r7, #4]
    77f4:	0011      	movs	r1, r2
    77f6:	0018      	movs	r0, r3
    77f8:	4b3e      	ldr	r3, [pc, #248]	; (78f4 <create_chain+0x130>)
    77fa:	4798      	blx	r3
    77fc:	0003      	movs	r3, r0
    77fe:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7800:	68bb      	ldr	r3, [r7, #8]
    7802:	2b01      	cmp	r3, #1
    7804:	d801      	bhi.n	780a <create_chain+0x46>
    7806:	2301      	movs	r3, #1
    7808:	e070      	b.n	78ec <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    780a:	687b      	ldr	r3, [r7, #4]
    780c:	699a      	ldr	r2, [r3, #24]
    780e:	68bb      	ldr	r3, [r7, #8]
    7810:	429a      	cmp	r2, r3
    7812:	d901      	bls.n	7818 <create_chain+0x54>
    7814:	68bb      	ldr	r3, [r7, #8]
    7816:	e069      	b.n	78ec <create_chain+0x128>
		scl = clst;
    7818:	683b      	ldr	r3, [r7, #0]
    781a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
    781c:	693b      	ldr	r3, [r7, #16]
    781e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
    7820:	697b      	ldr	r3, [r7, #20]
    7822:	3301      	adds	r3, #1
    7824:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    7826:	687b      	ldr	r3, [r7, #4]
    7828:	699a      	ldr	r2, [r3, #24]
    782a:	697b      	ldr	r3, [r7, #20]
    782c:	429a      	cmp	r2, r3
    782e:	d807      	bhi.n	7840 <create_chain+0x7c>
			ncl = 2;
    7830:	2302      	movs	r3, #2
    7832:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
    7834:	697a      	ldr	r2, [r7, #20]
    7836:	693b      	ldr	r3, [r7, #16]
    7838:	429a      	cmp	r2, r3
    783a:	d901      	bls.n	7840 <create_chain+0x7c>
    783c:	2300      	movs	r3, #0
    783e:	e055      	b.n	78ec <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    7840:	697a      	ldr	r2, [r7, #20]
    7842:	687b      	ldr	r3, [r7, #4]
    7844:	0011      	movs	r1, r2
    7846:	0018      	movs	r0, r3
    7848:	4b2a      	ldr	r3, [pc, #168]	; (78f4 <create_chain+0x130>)
    784a:	4798      	blx	r3
    784c:	0003      	movs	r3, r0
    784e:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
    7850:	68bb      	ldr	r3, [r7, #8]
    7852:	2b00      	cmp	r3, #0
    7854:	d00d      	beq.n	7872 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    7856:	68bb      	ldr	r3, [r7, #8]
    7858:	3301      	adds	r3, #1
    785a:	d002      	beq.n	7862 <create_chain+0x9e>
    785c:	68bb      	ldr	r3, [r7, #8]
    785e:	2b01      	cmp	r3, #1
    7860:	d101      	bne.n	7866 <create_chain+0xa2>
			return cs;
    7862:	68bb      	ldr	r3, [r7, #8]
    7864:	e042      	b.n	78ec <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
    7866:	697a      	ldr	r2, [r7, #20]
    7868:	693b      	ldr	r3, [r7, #16]
    786a:	429a      	cmp	r2, r3
    786c:	d1d8      	bne.n	7820 <create_chain+0x5c>
    786e:	2300      	movs	r3, #0
    7870:	e03c      	b.n	78ec <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
    7872:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    7874:	230f      	movs	r3, #15
    7876:	18fc      	adds	r4, r7, r3
    7878:	4a1f      	ldr	r2, [pc, #124]	; (78f8 <create_chain+0x134>)
    787a:	6979      	ldr	r1, [r7, #20]
    787c:	687b      	ldr	r3, [r7, #4]
    787e:	0018      	movs	r0, r3
    7880:	4b1e      	ldr	r3, [pc, #120]	; (78fc <create_chain+0x138>)
    7882:	4798      	blx	r3
    7884:	0003      	movs	r3, r0
    7886:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
    7888:	230f      	movs	r3, #15
    788a:	18fb      	adds	r3, r7, r3
    788c:	781b      	ldrb	r3, [r3, #0]
    788e:	2b00      	cmp	r3, #0
    7890:	d10c      	bne.n	78ac <create_chain+0xe8>
    7892:	683b      	ldr	r3, [r7, #0]
    7894:	2b00      	cmp	r3, #0
    7896:	d009      	beq.n	78ac <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    7898:	230f      	movs	r3, #15
    789a:	18fc      	adds	r4, r7, r3
    789c:	697a      	ldr	r2, [r7, #20]
    789e:	6839      	ldr	r1, [r7, #0]
    78a0:	687b      	ldr	r3, [r7, #4]
    78a2:	0018      	movs	r0, r3
    78a4:	4b15      	ldr	r3, [pc, #84]	; (78fc <create_chain+0x138>)
    78a6:	4798      	blx	r3
    78a8:	0003      	movs	r3, r0
    78aa:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
    78ac:	230f      	movs	r3, #15
    78ae:	18fb      	adds	r3, r7, r3
    78b0:	781b      	ldrb	r3, [r3, #0]
    78b2:	2b00      	cmp	r3, #0
    78b4:	d10f      	bne.n	78d6 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
    78b6:	687b      	ldr	r3, [r7, #4]
    78b8:	697a      	ldr	r2, [r7, #20]
    78ba:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    78bc:	687b      	ldr	r3, [r7, #4]
    78be:	691b      	ldr	r3, [r3, #16]
    78c0:	3301      	adds	r3, #1
    78c2:	d012      	beq.n	78ea <create_chain+0x126>
			fs->free_clust--;
    78c4:	687b      	ldr	r3, [r7, #4]
    78c6:	691b      	ldr	r3, [r3, #16]
    78c8:	1e5a      	subs	r2, r3, #1
    78ca:	687b      	ldr	r3, [r7, #4]
    78cc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
    78ce:	687b      	ldr	r3, [r7, #4]
    78d0:	2201      	movs	r2, #1
    78d2:	715a      	strb	r2, [r3, #5]
    78d4:	e009      	b.n	78ea <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    78d6:	230f      	movs	r3, #15
    78d8:	18fb      	adds	r3, r7, r3
    78da:	781b      	ldrb	r3, [r3, #0]
    78dc:	2b01      	cmp	r3, #1
    78de:	d102      	bne.n	78e6 <create_chain+0x122>
    78e0:	2301      	movs	r3, #1
    78e2:	425b      	negs	r3, r3
    78e4:	e000      	b.n	78e8 <create_chain+0x124>
    78e6:	2301      	movs	r3, #1
    78e8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
    78ea:	697b      	ldr	r3, [r7, #20]
}
    78ec:	0018      	movs	r0, r3
    78ee:	46bd      	mov	sp, r7
    78f0:	b007      	add	sp, #28
    78f2:	bd90      	pop	{r4, r7, pc}
    78f4:	00007355 	.word	0x00007355
    78f8:	0fffffff 	.word	0x0fffffff
    78fc:	000074c1 	.word	0x000074c1

00007900 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    7900:	b580      	push	{r7, lr}
    7902:	b084      	sub	sp, #16
    7904:	af00      	add	r7, sp, #0
    7906:	6078      	str	r0, [r7, #4]
    7908:	000a      	movs	r2, r1
    790a:	1cbb      	adds	r3, r7, #2
    790c:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
    790e:	687b      	ldr	r3, [r7, #4]
    7910:	1cba      	adds	r2, r7, #2
    7912:	8812      	ldrh	r2, [r2, #0]
    7914:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
    7916:	687b      	ldr	r3, [r7, #4]
    7918:	689b      	ldr	r3, [r3, #8]
    791a:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    791c:	68fb      	ldr	r3, [r7, #12]
    791e:	2b01      	cmp	r3, #1
    7920:	d005      	beq.n	792e <dir_sdi+0x2e>
    7922:	687b      	ldr	r3, [r7, #4]
    7924:	681b      	ldr	r3, [r3, #0]
    7926:	699a      	ldr	r2, [r3, #24]
    7928:	68fb      	ldr	r3, [r7, #12]
    792a:	429a      	cmp	r2, r3
    792c:	d801      	bhi.n	7932 <dir_sdi+0x32>
		return FR_INT_ERR;
    792e:	2302      	movs	r3, #2
    7930:	e075      	b.n	7a1e <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    7932:	68fb      	ldr	r3, [r7, #12]
    7934:	2b00      	cmp	r3, #0
    7936:	d108      	bne.n	794a <dir_sdi+0x4a>
    7938:	687b      	ldr	r3, [r7, #4]
    793a:	681b      	ldr	r3, [r3, #0]
    793c:	781b      	ldrb	r3, [r3, #0]
    793e:	2b03      	cmp	r3, #3
    7940:	d103      	bne.n	794a <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
    7942:	687b      	ldr	r3, [r7, #4]
    7944:	681b      	ldr	r3, [r3, #0]
    7946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7948:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    794a:	68fb      	ldr	r3, [r7, #12]
    794c:	2b00      	cmp	r3, #0
    794e:	d116      	bne.n	797e <dir_sdi+0x7e>
		dj->clust = clst;
    7950:	687b      	ldr	r3, [r7, #4]
    7952:	68fa      	ldr	r2, [r7, #12]
    7954:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7956:	687b      	ldr	r3, [r7, #4]
    7958:	681b      	ldr	r3, [r3, #0]
    795a:	891b      	ldrh	r3, [r3, #8]
    795c:	1cba      	adds	r2, r7, #2
    795e:	8812      	ldrh	r2, [r2, #0]
    7960:	429a      	cmp	r2, r3
    7962:	d301      	bcc.n	7968 <dir_sdi+0x68>
			return FR_INT_ERR;
    7964:	2302      	movs	r3, #2
    7966:	e05a      	b.n	7a1e <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7968:	687b      	ldr	r3, [r7, #4]
    796a:	681b      	ldr	r3, [r3, #0]
    796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    796e:	1cba      	adds	r2, r7, #2
    7970:	8812      	ldrh	r2, [r2, #0]
    7972:	0912      	lsrs	r2, r2, #4
    7974:	b292      	uxth	r2, r2
    7976:	189a      	adds	r2, r3, r2
    7978:	687b      	ldr	r3, [r7, #4]
    797a:	611a      	str	r2, [r3, #16]
    797c:	e042      	b.n	7a04 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    797e:	687b      	ldr	r3, [r7, #4]
    7980:	681b      	ldr	r3, [r3, #0]
    7982:	789b      	ldrb	r3, [r3, #2]
    7984:	b29a      	uxth	r2, r3
    7986:	230a      	movs	r3, #10
    7988:	18fb      	adds	r3, r7, r3
    798a:	0112      	lsls	r2, r2, #4
    798c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    798e:	e020      	b.n	79d2 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    7990:	687b      	ldr	r3, [r7, #4]
    7992:	681b      	ldr	r3, [r3, #0]
    7994:	68fa      	ldr	r2, [r7, #12]
    7996:	0011      	movs	r1, r2
    7998:	0018      	movs	r0, r3
    799a:	4b23      	ldr	r3, [pc, #140]	; (7a28 <dir_sdi+0x128>)
    799c:	4798      	blx	r3
    799e:	0003      	movs	r3, r0
    79a0:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    79a2:	68fb      	ldr	r3, [r7, #12]
    79a4:	3301      	adds	r3, #1
    79a6:	d101      	bne.n	79ac <dir_sdi+0xac>
    79a8:	2301      	movs	r3, #1
    79aa:	e038      	b.n	7a1e <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    79ac:	68fb      	ldr	r3, [r7, #12]
    79ae:	2b01      	cmp	r3, #1
    79b0:	d905      	bls.n	79be <dir_sdi+0xbe>
    79b2:	687b      	ldr	r3, [r7, #4]
    79b4:	681b      	ldr	r3, [r3, #0]
    79b6:	699a      	ldr	r2, [r3, #24]
    79b8:	68fb      	ldr	r3, [r7, #12]
    79ba:	429a      	cmp	r2, r3
    79bc:	d801      	bhi.n	79c2 <dir_sdi+0xc2>
				return FR_INT_ERR;
    79be:	2302      	movs	r3, #2
    79c0:	e02d      	b.n	7a1e <dir_sdi+0x11e>
			idx -= ic;
    79c2:	1cbb      	adds	r3, r7, #2
    79c4:	1cb9      	adds	r1, r7, #2
    79c6:	220a      	movs	r2, #10
    79c8:	18ba      	adds	r2, r7, r2
    79ca:	8809      	ldrh	r1, [r1, #0]
    79cc:	8812      	ldrh	r2, [r2, #0]
    79ce:	1a8a      	subs	r2, r1, r2
    79d0:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    79d2:	1cba      	adds	r2, r7, #2
    79d4:	230a      	movs	r3, #10
    79d6:	18fb      	adds	r3, r7, r3
    79d8:	8812      	ldrh	r2, [r2, #0]
    79da:	881b      	ldrh	r3, [r3, #0]
    79dc:	429a      	cmp	r2, r3
    79de:	d2d7      	bcs.n	7990 <dir_sdi+0x90>
		}
		dj->clust = clst;
    79e0:	687b      	ldr	r3, [r7, #4]
    79e2:	68fa      	ldr	r2, [r7, #12]
    79e4:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    79e6:	687b      	ldr	r3, [r7, #4]
    79e8:	681b      	ldr	r3, [r3, #0]
    79ea:	68fa      	ldr	r2, [r7, #12]
    79ec:	0011      	movs	r1, r2
    79ee:	0018      	movs	r0, r3
    79f0:	4b0e      	ldr	r3, [pc, #56]	; (7a2c <dir_sdi+0x12c>)
    79f2:	4798      	blx	r3
    79f4:	0002      	movs	r2, r0
    79f6:	1cbb      	adds	r3, r7, #2
    79f8:	881b      	ldrh	r3, [r3, #0]
    79fa:	091b      	lsrs	r3, r3, #4
    79fc:	b29b      	uxth	r3, r3
    79fe:	18d2      	adds	r2, r2, r3
    7a00:	687b      	ldr	r3, [r7, #4]
    7a02:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    7a04:	687b      	ldr	r3, [r7, #4]
    7a06:	681b      	ldr	r3, [r3, #0]
    7a08:	3330      	adds	r3, #48	; 0x30
    7a0a:	001a      	movs	r2, r3
    7a0c:	1cbb      	adds	r3, r7, #2
    7a0e:	881b      	ldrh	r3, [r3, #0]
    7a10:	210f      	movs	r1, #15
    7a12:	400b      	ands	r3, r1
    7a14:	015b      	lsls	r3, r3, #5
    7a16:	18d2      	adds	r2, r2, r3
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
    7a1c:	2300      	movs	r3, #0
}
    7a1e:	0018      	movs	r0, r3
    7a20:	46bd      	mov	sp, r7
    7a22:	b004      	add	sp, #16
    7a24:	bd80      	pop	{r7, pc}
    7a26:	46c0      	nop			; (mov r8, r8)
    7a28:	00007355 	.word	0x00007355
    7a2c:	0000731d 	.word	0x0000731d

00007a30 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    7a30:	b590      	push	{r4, r7, lr}
    7a32:	b085      	sub	sp, #20
    7a34:	af00      	add	r7, sp, #0
    7a36:	6078      	str	r0, [r7, #4]
    7a38:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    7a3a:	687b      	ldr	r3, [r7, #4]
    7a3c:	88da      	ldrh	r2, [r3, #6]
    7a3e:	2308      	movs	r3, #8
    7a40:	18fb      	adds	r3, r7, r3
    7a42:	3201      	adds	r2, #1
    7a44:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7a46:	2308      	movs	r3, #8
    7a48:	18fb      	adds	r3, r7, r3
    7a4a:	881b      	ldrh	r3, [r3, #0]
    7a4c:	2b00      	cmp	r3, #0
    7a4e:	d003      	beq.n	7a58 <dir_next+0x28>
    7a50:	687b      	ldr	r3, [r7, #4]
    7a52:	691b      	ldr	r3, [r3, #16]
    7a54:	2b00      	cmp	r3, #0
    7a56:	d101      	bne.n	7a5c <dir_next+0x2c>
		return FR_NO_FILE;
    7a58:	2304      	movs	r3, #4
    7a5a:	e0d2      	b.n	7c02 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    7a5c:	2308      	movs	r3, #8
    7a5e:	18fb      	adds	r3, r7, r3
    7a60:	881b      	ldrh	r3, [r3, #0]
    7a62:	220f      	movs	r2, #15
    7a64:	4013      	ands	r3, r2
    7a66:	b29b      	uxth	r3, r3
    7a68:	2b00      	cmp	r3, #0
    7a6a:	d000      	beq.n	7a6e <dir_next+0x3e>
    7a6c:	e0b6      	b.n	7bdc <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
    7a6e:	687b      	ldr	r3, [r7, #4]
    7a70:	691b      	ldr	r3, [r3, #16]
    7a72:	1c5a      	adds	r2, r3, #1
    7a74:	687b      	ldr	r3, [r7, #4]
    7a76:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
    7a78:	687b      	ldr	r3, [r7, #4]
    7a7a:	68db      	ldr	r3, [r3, #12]
    7a7c:	2b00      	cmp	r3, #0
    7a7e:	d10a      	bne.n	7a96 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    7a80:	687b      	ldr	r3, [r7, #4]
    7a82:	681b      	ldr	r3, [r3, #0]
    7a84:	891b      	ldrh	r3, [r3, #8]
    7a86:	2208      	movs	r2, #8
    7a88:	18ba      	adds	r2, r7, r2
    7a8a:	8812      	ldrh	r2, [r2, #0]
    7a8c:	429a      	cmp	r2, r3
    7a8e:	d200      	bcs.n	7a92 <dir_next+0x62>
    7a90:	e0a4      	b.n	7bdc <dir_next+0x1ac>
				return FR_NO_FILE;
    7a92:	2304      	movs	r3, #4
    7a94:	e0b5      	b.n	7c02 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    7a96:	2308      	movs	r3, #8
    7a98:	18fb      	adds	r3, r7, r3
    7a9a:	881b      	ldrh	r3, [r3, #0]
    7a9c:	091b      	lsrs	r3, r3, #4
    7a9e:	b29b      	uxth	r3, r3
    7aa0:	001a      	movs	r2, r3
    7aa2:	687b      	ldr	r3, [r7, #4]
    7aa4:	681b      	ldr	r3, [r3, #0]
    7aa6:	789b      	ldrb	r3, [r3, #2]
    7aa8:	3b01      	subs	r3, #1
    7aaa:	4013      	ands	r3, r2
    7aac:	d000      	beq.n	7ab0 <dir_next+0x80>
    7aae:	e095      	b.n	7bdc <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    7ab0:	687b      	ldr	r3, [r7, #4]
    7ab2:	681a      	ldr	r2, [r3, #0]
    7ab4:	687b      	ldr	r3, [r7, #4]
    7ab6:	68db      	ldr	r3, [r3, #12]
    7ab8:	0019      	movs	r1, r3
    7aba:	0010      	movs	r0, r2
    7abc:	4b53      	ldr	r3, [pc, #332]	; (7c0c <dir_next+0x1dc>)
    7abe:	4798      	blx	r3
    7ac0:	0003      	movs	r3, r0
    7ac2:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
    7ac4:	68fb      	ldr	r3, [r7, #12]
    7ac6:	2b01      	cmp	r3, #1
    7ac8:	d801      	bhi.n	7ace <dir_next+0x9e>
    7aca:	2302      	movs	r3, #2
    7acc:	e099      	b.n	7c02 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7ace:	68fb      	ldr	r3, [r7, #12]
    7ad0:	3301      	adds	r3, #1
    7ad2:	d101      	bne.n	7ad8 <dir_next+0xa8>
    7ad4:	2301      	movs	r3, #1
    7ad6:	e094      	b.n	7c02 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    7ad8:	687b      	ldr	r3, [r7, #4]
    7ada:	681b      	ldr	r3, [r3, #0]
    7adc:	699a      	ldr	r2, [r3, #24]
    7ade:	68fb      	ldr	r3, [r7, #12]
    7ae0:	429a      	cmp	r2, r3
    7ae2:	d900      	bls.n	7ae6 <dir_next+0xb6>
    7ae4:	e06d      	b.n	7bc2 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    7ae6:	683b      	ldr	r3, [r7, #0]
    7ae8:	2b00      	cmp	r3, #0
    7aea:	d101      	bne.n	7af0 <dir_next+0xc0>
    7aec:	2304      	movs	r3, #4
    7aee:	e088      	b.n	7c02 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    7af0:	687b      	ldr	r3, [r7, #4]
    7af2:	681a      	ldr	r2, [r3, #0]
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	68db      	ldr	r3, [r3, #12]
    7af8:	0019      	movs	r1, r3
    7afa:	0010      	movs	r0, r2
    7afc:	4b44      	ldr	r3, [pc, #272]	; (7c10 <dir_next+0x1e0>)
    7afe:	4798      	blx	r3
    7b00:	0003      	movs	r3, r0
    7b02:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    7b04:	68fb      	ldr	r3, [r7, #12]
    7b06:	2b00      	cmp	r3, #0
    7b08:	d101      	bne.n	7b0e <dir_next+0xde>
    7b0a:	2307      	movs	r3, #7
    7b0c:	e079      	b.n	7c02 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
    7b0e:	68fb      	ldr	r3, [r7, #12]
    7b10:	2b01      	cmp	r3, #1
    7b12:	d101      	bne.n	7b18 <dir_next+0xe8>
    7b14:	2302      	movs	r3, #2
    7b16:	e074      	b.n	7c02 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7b18:	68fb      	ldr	r3, [r7, #12]
    7b1a:	3301      	adds	r3, #1
    7b1c:	d101      	bne.n	7b22 <dir_next+0xf2>
    7b1e:	2301      	movs	r3, #1
    7b20:	e06f      	b.n	7c02 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    7b22:	687b      	ldr	r3, [r7, #4]
    7b24:	681b      	ldr	r3, [r3, #0]
    7b26:	2100      	movs	r1, #0
    7b28:	0018      	movs	r0, r3
    7b2a:	4b3a      	ldr	r3, [pc, #232]	; (7c14 <dir_next+0x1e4>)
    7b2c:	4798      	blx	r3
    7b2e:	1e03      	subs	r3, r0, #0
    7b30:	d001      	beq.n	7b36 <dir_next+0x106>
    7b32:	2301      	movs	r3, #1
    7b34:	e065      	b.n	7c02 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    7b36:	687b      	ldr	r3, [r7, #4]
    7b38:	681b      	ldr	r3, [r3, #0]
    7b3a:	3330      	adds	r3, #48	; 0x30
    7b3c:	0018      	movs	r0, r3
    7b3e:	2380      	movs	r3, #128	; 0x80
    7b40:	009b      	lsls	r3, r3, #2
    7b42:	001a      	movs	r2, r3
    7b44:	2100      	movs	r1, #0
    7b46:	4b34      	ldr	r3, [pc, #208]	; (7c18 <dir_next+0x1e8>)
    7b48:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    7b4a:	687b      	ldr	r3, [r7, #4]
    7b4c:	681c      	ldr	r4, [r3, #0]
    7b4e:	687b      	ldr	r3, [r7, #4]
    7b50:	681b      	ldr	r3, [r3, #0]
    7b52:	68fa      	ldr	r2, [r7, #12]
    7b54:	0011      	movs	r1, r2
    7b56:	0018      	movs	r0, r3
    7b58:	4b30      	ldr	r3, [pc, #192]	; (7c1c <dir_next+0x1ec>)
    7b5a:	4798      	blx	r3
    7b5c:	0003      	movs	r3, r0
    7b5e:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7b60:	230b      	movs	r3, #11
    7b62:	18fb      	adds	r3, r7, r3
    7b64:	2200      	movs	r2, #0
    7b66:	701a      	strb	r2, [r3, #0]
    7b68:	e019      	b.n	7b9e <dir_next+0x16e>
						dj->fs->wflag = 1;
    7b6a:	687b      	ldr	r3, [r7, #4]
    7b6c:	681b      	ldr	r3, [r3, #0]
    7b6e:	2201      	movs	r2, #1
    7b70:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    7b72:	687b      	ldr	r3, [r7, #4]
    7b74:	681b      	ldr	r3, [r3, #0]
    7b76:	2100      	movs	r1, #0
    7b78:	0018      	movs	r0, r3
    7b7a:	4b26      	ldr	r3, [pc, #152]	; (7c14 <dir_next+0x1e4>)
    7b7c:	4798      	blx	r3
    7b7e:	1e03      	subs	r3, r0, #0
    7b80:	d001      	beq.n	7b86 <dir_next+0x156>
    7b82:	2301      	movs	r3, #1
    7b84:	e03d      	b.n	7c02 <dir_next+0x1d2>
						dj->fs->winsect++;
    7b86:	687b      	ldr	r3, [r7, #4]
    7b88:	681b      	ldr	r3, [r3, #0]
    7b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7b8c:	3201      	adds	r2, #1
    7b8e:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7b90:	230b      	movs	r3, #11
    7b92:	18fb      	adds	r3, r7, r3
    7b94:	781a      	ldrb	r2, [r3, #0]
    7b96:	230b      	movs	r3, #11
    7b98:	18fb      	adds	r3, r7, r3
    7b9a:	3201      	adds	r2, #1
    7b9c:	701a      	strb	r2, [r3, #0]
    7b9e:	687b      	ldr	r3, [r7, #4]
    7ba0:	681b      	ldr	r3, [r3, #0]
    7ba2:	789b      	ldrb	r3, [r3, #2]
    7ba4:	220b      	movs	r2, #11
    7ba6:	18ba      	adds	r2, r7, r2
    7ba8:	7812      	ldrb	r2, [r2, #0]
    7baa:	429a      	cmp	r2, r3
    7bac:	d3dd      	bcc.n	7b6a <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    7bae:	687b      	ldr	r3, [r7, #4]
    7bb0:	681b      	ldr	r3, [r3, #0]
    7bb2:	687a      	ldr	r2, [r7, #4]
    7bb4:	6812      	ldr	r2, [r2, #0]
    7bb6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    7bb8:	220b      	movs	r2, #11
    7bba:	18ba      	adds	r2, r7, r2
    7bbc:	7812      	ldrb	r2, [r2, #0]
    7bbe:	1a8a      	subs	r2, r1, r2
    7bc0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    7bc2:	687b      	ldr	r3, [r7, #4]
    7bc4:	68fa      	ldr	r2, [r7, #12]
    7bc6:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
    7bc8:	687b      	ldr	r3, [r7, #4]
    7bca:	681b      	ldr	r3, [r3, #0]
    7bcc:	68fa      	ldr	r2, [r7, #12]
    7bce:	0011      	movs	r1, r2
    7bd0:	0018      	movs	r0, r3
    7bd2:	4b12      	ldr	r3, [pc, #72]	; (7c1c <dir_next+0x1ec>)
    7bd4:	4798      	blx	r3
    7bd6:	0002      	movs	r2, r0
    7bd8:	687b      	ldr	r3, [r7, #4]
    7bda:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
    7bdc:	687b      	ldr	r3, [r7, #4]
    7bde:	2208      	movs	r2, #8
    7be0:	18ba      	adds	r2, r7, r2
    7be2:	8812      	ldrh	r2, [r2, #0]
    7be4:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    7be6:	687b      	ldr	r3, [r7, #4]
    7be8:	681b      	ldr	r3, [r3, #0]
    7bea:	3330      	adds	r3, #48	; 0x30
    7bec:	001a      	movs	r2, r3
    7bee:	2308      	movs	r3, #8
    7bf0:	18fb      	adds	r3, r7, r3
    7bf2:	881b      	ldrh	r3, [r3, #0]
    7bf4:	210f      	movs	r1, #15
    7bf6:	400b      	ands	r3, r1
    7bf8:	015b      	lsls	r3, r3, #5
    7bfa:	18d2      	adds	r2, r2, r3
    7bfc:	687b      	ldr	r3, [r7, #4]
    7bfe:	615a      	str	r2, [r3, #20]

	return FR_OK;
    7c00:	2300      	movs	r3, #0
}
    7c02:	0018      	movs	r0, r3
    7c04:	46bd      	mov	sp, r7
    7c06:	b005      	add	sp, #20
    7c08:	bd90      	pop	{r4, r7, pc}
    7c0a:	46c0      	nop			; (mov r8, r8)
    7c0c:	00007355 	.word	0x00007355
    7c10:	000077c5 	.word	0x000077c5
    7c14:	000070bd 	.word	0x000070bd
    7c18:	00007011 	.word	0x00007011
    7c1c:	0000731d 	.word	0x0000731d

00007c20 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
    7c20:	b590      	push	{r4, r7, lr}
    7c22:	b087      	sub	sp, #28
    7c24:	af00      	add	r7, sp, #0
    7c26:	6078      	str	r0, [r7, #4]
    7c28:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    7c2a:	683b      	ldr	r3, [r7, #0]
    7c2c:	781b      	ldrb	r3, [r3, #0]
    7c2e:	001a      	movs	r2, r3
    7c30:	2340      	movs	r3, #64	; 0x40
    7c32:	439a      	bics	r2, r3
    7c34:	0013      	movs	r3, r2
    7c36:	1e5a      	subs	r2, r3, #1
    7c38:	0013      	movs	r3, r2
    7c3a:	005b      	lsls	r3, r3, #1
    7c3c:	189b      	adds	r3, r3, r2
    7c3e:	009b      	lsls	r3, r3, #2
    7c40:	189b      	adds	r3, r3, r2
    7c42:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
    7c44:	2300      	movs	r3, #0
    7c46:	613b      	str	r3, [r7, #16]
    7c48:	230e      	movs	r3, #14
    7c4a:	18fb      	adds	r3, r7, r3
    7c4c:	2201      	movs	r2, #1
    7c4e:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    7c50:	4a31      	ldr	r2, [pc, #196]	; (7d18 <cmp_lfn+0xf8>)
    7c52:	693b      	ldr	r3, [r7, #16]
    7c54:	18d3      	adds	r3, r2, r3
    7c56:	781b      	ldrb	r3, [r3, #0]
    7c58:	3301      	adds	r3, #1
    7c5a:	683a      	ldr	r2, [r7, #0]
    7c5c:	18d3      	adds	r3, r2, r3
    7c5e:	781b      	ldrb	r3, [r3, #0]
    7c60:	021b      	lsls	r3, r3, #8
    7c62:	b21a      	sxth	r2, r3
    7c64:	492c      	ldr	r1, [pc, #176]	; (7d18 <cmp_lfn+0xf8>)
    7c66:	693b      	ldr	r3, [r7, #16]
    7c68:	18cb      	adds	r3, r1, r3
    7c6a:	781b      	ldrb	r3, [r3, #0]
    7c6c:	0019      	movs	r1, r3
    7c6e:	683b      	ldr	r3, [r7, #0]
    7c70:	185b      	adds	r3, r3, r1
    7c72:	781b      	ldrb	r3, [r3, #0]
    7c74:	b21b      	sxth	r3, r3
    7c76:	4313      	orrs	r3, r2
    7c78:	b21a      	sxth	r2, r3
    7c7a:	230c      	movs	r3, #12
    7c7c:	18fb      	adds	r3, r7, r3
    7c7e:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    7c80:	230e      	movs	r3, #14
    7c82:	18fb      	adds	r3, r7, r3
    7c84:	881b      	ldrh	r3, [r3, #0]
    7c86:	2b00      	cmp	r3, #0
    7c88:	d01f      	beq.n	7cca <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    7c8a:	230e      	movs	r3, #14
    7c8c:	18fc      	adds	r4, r7, r3
    7c8e:	230c      	movs	r3, #12
    7c90:	18fb      	adds	r3, r7, r3
    7c92:	881b      	ldrh	r3, [r3, #0]
    7c94:	0018      	movs	r0, r3
    7c96:	4b21      	ldr	r3, [pc, #132]	; (7d1c <cmp_lfn+0xfc>)
    7c98:	4798      	blx	r3
    7c9a:	0003      	movs	r3, r0
    7c9c:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    7c9e:	697b      	ldr	r3, [r7, #20]
    7ca0:	2bfe      	cmp	r3, #254	; 0xfe
    7ca2:	d810      	bhi.n	7cc6 <cmp_lfn+0xa6>
    7ca4:	697b      	ldr	r3, [r7, #20]
    7ca6:	1c5a      	adds	r2, r3, #1
    7ca8:	617a      	str	r2, [r7, #20]
    7caa:	005b      	lsls	r3, r3, #1
    7cac:	687a      	ldr	r2, [r7, #4]
    7cae:	18d3      	adds	r3, r2, r3
    7cb0:	881b      	ldrh	r3, [r3, #0]
    7cb2:	0018      	movs	r0, r3
    7cb4:	4b19      	ldr	r3, [pc, #100]	; (7d1c <cmp_lfn+0xfc>)
    7cb6:	4798      	blx	r3
    7cb8:	0003      	movs	r3, r0
    7cba:	001a      	movs	r2, r3
    7cbc:	230e      	movs	r3, #14
    7cbe:	18fb      	adds	r3, r7, r3
    7cc0:	881b      	ldrh	r3, [r3, #0]
    7cc2:	4293      	cmp	r3, r2
    7cc4:	d009      	beq.n	7cda <cmp_lfn+0xba>
				return 0;				/* Not matched */
    7cc6:	2300      	movs	r3, #0
    7cc8:	e022      	b.n	7d10 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
    7cca:	230c      	movs	r3, #12
    7ccc:	18fb      	adds	r3, r7, r3
    7cce:	881b      	ldrh	r3, [r3, #0]
    7cd0:	4a13      	ldr	r2, [pc, #76]	; (7d20 <cmp_lfn+0x100>)
    7cd2:	4293      	cmp	r3, r2
    7cd4:	d001      	beq.n	7cda <cmp_lfn+0xba>
    7cd6:	2300      	movs	r3, #0
    7cd8:	e01a      	b.n	7d10 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    7cda:	693b      	ldr	r3, [r7, #16]
    7cdc:	3301      	adds	r3, #1
    7cde:	613b      	str	r3, [r7, #16]
    7ce0:	693b      	ldr	r3, [r7, #16]
    7ce2:	2b0c      	cmp	r3, #12
    7ce4:	d9b4      	bls.n	7c50 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    7ce6:	683b      	ldr	r3, [r7, #0]
    7ce8:	781b      	ldrb	r3, [r3, #0]
    7cea:	001a      	movs	r2, r3
    7cec:	2340      	movs	r3, #64	; 0x40
    7cee:	4013      	ands	r3, r2
    7cf0:	d00d      	beq.n	7d0e <cmp_lfn+0xee>
    7cf2:	230e      	movs	r3, #14
    7cf4:	18fb      	adds	r3, r7, r3
    7cf6:	881b      	ldrh	r3, [r3, #0]
    7cf8:	2b00      	cmp	r3, #0
    7cfa:	d008      	beq.n	7d0e <cmp_lfn+0xee>
    7cfc:	697b      	ldr	r3, [r7, #20]
    7cfe:	005b      	lsls	r3, r3, #1
    7d00:	687a      	ldr	r2, [r7, #4]
    7d02:	18d3      	adds	r3, r2, r3
    7d04:	881b      	ldrh	r3, [r3, #0]
    7d06:	2b00      	cmp	r3, #0
    7d08:	d001      	beq.n	7d0e <cmp_lfn+0xee>
		return 0;
    7d0a:	2300      	movs	r3, #0
    7d0c:	e000      	b.n	7d10 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
    7d0e:	2301      	movs	r3, #1
}
    7d10:	0018      	movs	r0, r3
    7d12:	46bd      	mov	sp, r7
    7d14:	b007      	add	sp, #28
    7d16:	bd90      	pop	{r4, r7, pc}
    7d18:	0000af84 	.word	0x0000af84
    7d1c:	00009d61 	.word	0x00009d61
    7d20:	0000ffff 	.word	0x0000ffff

00007d24 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
    7d24:	b580      	push	{r7, lr}
    7d26:	b088      	sub	sp, #32
    7d28:	af00      	add	r7, sp, #0
    7d2a:	60f8      	str	r0, [r7, #12]
    7d2c:	60b9      	str	r1, [r7, #8]
    7d2e:	0019      	movs	r1, r3
    7d30:	1dfb      	adds	r3, r7, #7
    7d32:	701a      	strb	r2, [r3, #0]
    7d34:	1dbb      	adds	r3, r7, #6
    7d36:	1c0a      	adds	r2, r1, #0
    7d38:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
    7d3a:	68bb      	ldr	r3, [r7, #8]
    7d3c:	330d      	adds	r3, #13
    7d3e:	1dba      	adds	r2, r7, #6
    7d40:	7812      	ldrb	r2, [r2, #0]
    7d42:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    7d44:	68bb      	ldr	r3, [r7, #8]
    7d46:	330b      	adds	r3, #11
    7d48:	220f      	movs	r2, #15
    7d4a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
    7d4c:	68bb      	ldr	r3, [r7, #8]
    7d4e:	330c      	adds	r3, #12
    7d50:	2200      	movs	r2, #0
    7d52:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    7d54:	68bb      	ldr	r3, [r7, #8]
    7d56:	331a      	adds	r3, #26
    7d58:	2200      	movs	r2, #0
    7d5a:	701a      	strb	r2, [r3, #0]
    7d5c:	68bb      	ldr	r3, [r7, #8]
    7d5e:	331b      	adds	r3, #27
    7d60:	2200      	movs	r2, #0
    7d62:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    7d64:	1dfb      	adds	r3, r7, #7
    7d66:	781b      	ldrb	r3, [r3, #0]
    7d68:	1e5a      	subs	r2, r3, #1
    7d6a:	0013      	movs	r3, r2
    7d6c:	005b      	lsls	r3, r3, #1
    7d6e:	189b      	adds	r3, r3, r2
    7d70:	009b      	lsls	r3, r3, #2
    7d72:	189b      	adds	r3, r3, r2
    7d74:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
    7d76:	2316      	movs	r3, #22
    7d78:	18fb      	adds	r3, r7, r3
    7d7a:	2200      	movs	r2, #0
    7d7c:	801a      	strh	r2, [r3, #0]
    7d7e:	2300      	movs	r3, #0
    7d80:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    7d82:	2316      	movs	r3, #22
    7d84:	18fb      	adds	r3, r7, r3
    7d86:	881b      	ldrh	r3, [r3, #0]
    7d88:	4a28      	ldr	r2, [pc, #160]	; (7e2c <fit_lfn+0x108>)
    7d8a:	4293      	cmp	r3, r2
    7d8c:	d009      	beq.n	7da2 <fit_lfn+0x7e>
    7d8e:	69fb      	ldr	r3, [r7, #28]
    7d90:	1c5a      	adds	r2, r3, #1
    7d92:	61fa      	str	r2, [r7, #28]
    7d94:	005b      	lsls	r3, r3, #1
    7d96:	68fa      	ldr	r2, [r7, #12]
    7d98:	18d2      	adds	r2, r2, r3
    7d9a:	2316      	movs	r3, #22
    7d9c:	18fb      	adds	r3, r7, r3
    7d9e:	8812      	ldrh	r2, [r2, #0]
    7da0:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    7da2:	4a23      	ldr	r2, [pc, #140]	; (7e30 <fit_lfn+0x10c>)
    7da4:	69bb      	ldr	r3, [r7, #24]
    7da6:	18d3      	adds	r3, r2, r3
    7da8:	781b      	ldrb	r3, [r3, #0]
    7daa:	001a      	movs	r2, r3
    7dac:	68bb      	ldr	r3, [r7, #8]
    7dae:	189b      	adds	r3, r3, r2
    7db0:	2216      	movs	r2, #22
    7db2:	18ba      	adds	r2, r7, r2
    7db4:	8812      	ldrh	r2, [r2, #0]
    7db6:	b2d2      	uxtb	r2, r2
    7db8:	701a      	strb	r2, [r3, #0]
    7dba:	4a1d      	ldr	r2, [pc, #116]	; (7e30 <fit_lfn+0x10c>)
    7dbc:	69bb      	ldr	r3, [r7, #24]
    7dbe:	18d3      	adds	r3, r2, r3
    7dc0:	781b      	ldrb	r3, [r3, #0]
    7dc2:	3301      	adds	r3, #1
    7dc4:	68ba      	ldr	r2, [r7, #8]
    7dc6:	18d3      	adds	r3, r2, r3
    7dc8:	2216      	movs	r2, #22
    7dca:	18ba      	adds	r2, r7, r2
    7dcc:	8812      	ldrh	r2, [r2, #0]
    7dce:	0a12      	lsrs	r2, r2, #8
    7dd0:	b292      	uxth	r2, r2
    7dd2:	b2d2      	uxtb	r2, r2
    7dd4:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    7dd6:	2316      	movs	r3, #22
    7dd8:	18fb      	adds	r3, r7, r3
    7dda:	881b      	ldrh	r3, [r3, #0]
    7ddc:	2b00      	cmp	r3, #0
    7dde:	d104      	bne.n	7dea <fit_lfn+0xc6>
    7de0:	2316      	movs	r3, #22
    7de2:	18fb      	adds	r3, r7, r3
    7de4:	2201      	movs	r2, #1
    7de6:	4252      	negs	r2, r2
    7de8:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
    7dea:	69bb      	ldr	r3, [r7, #24]
    7dec:	3301      	adds	r3, #1
    7dee:	61bb      	str	r3, [r7, #24]
    7df0:	69bb      	ldr	r3, [r7, #24]
    7df2:	2b0c      	cmp	r3, #12
    7df4:	d9c5      	bls.n	7d82 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    7df6:	2316      	movs	r3, #22
    7df8:	18fb      	adds	r3, r7, r3
    7dfa:	881b      	ldrh	r3, [r3, #0]
    7dfc:	4a0b      	ldr	r2, [pc, #44]	; (7e2c <fit_lfn+0x108>)
    7dfe:	4293      	cmp	r3, r2
    7e00:	d006      	beq.n	7e10 <fit_lfn+0xec>
    7e02:	69fb      	ldr	r3, [r7, #28]
    7e04:	005b      	lsls	r3, r3, #1
    7e06:	68fa      	ldr	r2, [r7, #12]
    7e08:	18d3      	adds	r3, r2, r3
    7e0a:	881b      	ldrh	r3, [r3, #0]
    7e0c:	2b00      	cmp	r3, #0
    7e0e:	d105      	bne.n	7e1c <fit_lfn+0xf8>
    7e10:	1dfb      	adds	r3, r7, #7
    7e12:	1dfa      	adds	r2, r7, #7
    7e14:	7812      	ldrb	r2, [r2, #0]
    7e16:	2140      	movs	r1, #64	; 0x40
    7e18:	430a      	orrs	r2, r1
    7e1a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    7e1c:	68bb      	ldr	r3, [r7, #8]
    7e1e:	1dfa      	adds	r2, r7, #7
    7e20:	7812      	ldrb	r2, [r2, #0]
    7e22:	701a      	strb	r2, [r3, #0]
}
    7e24:	46c0      	nop			; (mov r8, r8)
    7e26:	46bd      	mov	sp, r7
    7e28:	b008      	add	sp, #32
    7e2a:	bd80      	pop	{r7, pc}
    7e2c:	0000ffff 	.word	0x0000ffff
    7e30:	0000af84 	.word	0x0000af84

00007e34 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
    7e34:	b580      	push	{r7, lr}
    7e36:	b08a      	sub	sp, #40	; 0x28
    7e38:	af00      	add	r7, sp, #0
    7e3a:	60f8      	str	r0, [r7, #12]
    7e3c:	60b9      	str	r1, [r7, #8]
    7e3e:	607a      	str	r2, [r7, #4]
    7e40:	001a      	movs	r2, r3
    7e42:	1cbb      	adds	r3, r7, #2
    7e44:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
    7e46:	68b9      	ldr	r1, [r7, #8]
    7e48:	68fb      	ldr	r3, [r7, #12]
    7e4a:	220b      	movs	r2, #11
    7e4c:	0018      	movs	r0, r3
    7e4e:	4b38      	ldr	r3, [pc, #224]	; (7f30 <gen_numname+0xfc>)
    7e50:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    7e52:	1cbb      	adds	r3, r7, #2
    7e54:	881b      	ldrh	r3, [r3, #0]
    7e56:	2b05      	cmp	r3, #5
    7e58:	d911      	bls.n	7e7e <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    7e5a:	1cbb      	adds	r3, r7, #2
    7e5c:	881b      	ldrh	r3, [r3, #0]
    7e5e:	b29a      	uxth	r2, r3
    7e60:	0852      	lsrs	r2, r2, #1
    7e62:	03db      	lsls	r3, r3, #15
    7e64:	4313      	orrs	r3, r2
    7e66:	b299      	uxth	r1, r3
    7e68:	687b      	ldr	r3, [r7, #4]
    7e6a:	1c9a      	adds	r2, r3, #2
    7e6c:	607a      	str	r2, [r7, #4]
    7e6e:	881a      	ldrh	r2, [r3, #0]
    7e70:	1cbb      	adds	r3, r7, #2
    7e72:	188a      	adds	r2, r1, r2
    7e74:	801a      	strh	r2, [r3, #0]
    7e76:	687b      	ldr	r3, [r7, #4]
    7e78:	881b      	ldrh	r3, [r3, #0]
    7e7a:	2b00      	cmp	r3, #0
    7e7c:	d1ed      	bne.n	7e5a <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
    7e7e:	2307      	movs	r3, #7
    7e80:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
    7e82:	1cbb      	adds	r3, r7, #2
    7e84:	881b      	ldrh	r3, [r3, #0]
    7e86:	b2db      	uxtb	r3, r3
    7e88:	220f      	movs	r2, #15
    7e8a:	4013      	ands	r3, r2
    7e8c:	b2da      	uxtb	r2, r3
    7e8e:	2327      	movs	r3, #39	; 0x27
    7e90:	18fb      	adds	r3, r7, r3
    7e92:	3230      	adds	r2, #48	; 0x30
    7e94:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
    7e96:	2327      	movs	r3, #39	; 0x27
    7e98:	18fb      	adds	r3, r7, r3
    7e9a:	781b      	ldrb	r3, [r3, #0]
    7e9c:	2b39      	cmp	r3, #57	; 0x39
    7e9e:	d906      	bls.n	7eae <gen_numname+0x7a>
    7ea0:	2327      	movs	r3, #39	; 0x27
    7ea2:	18fb      	adds	r3, r7, r3
    7ea4:	2227      	movs	r2, #39	; 0x27
    7ea6:	18ba      	adds	r2, r7, r2
    7ea8:	7812      	ldrb	r2, [r2, #0]
    7eaa:	3207      	adds	r2, #7
    7eac:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
    7eae:	6a3b      	ldr	r3, [r7, #32]
    7eb0:	1e5a      	subs	r2, r3, #1
    7eb2:	623a      	str	r2, [r7, #32]
    7eb4:	2214      	movs	r2, #20
    7eb6:	18ba      	adds	r2, r7, r2
    7eb8:	2127      	movs	r1, #39	; 0x27
    7eba:	1879      	adds	r1, r7, r1
    7ebc:	7809      	ldrb	r1, [r1, #0]
    7ebe:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
    7ec0:	1cbb      	adds	r3, r7, #2
    7ec2:	1cba      	adds	r2, r7, #2
    7ec4:	8812      	ldrh	r2, [r2, #0]
    7ec6:	0912      	lsrs	r2, r2, #4
    7ec8:	801a      	strh	r2, [r3, #0]
	} while (seq);
    7eca:	1cbb      	adds	r3, r7, #2
    7ecc:	881b      	ldrh	r3, [r3, #0]
    7ece:	2b00      	cmp	r3, #0
    7ed0:	d1d7      	bne.n	7e82 <gen_numname+0x4e>
	ns[i] = '~';
    7ed2:	2314      	movs	r3, #20
    7ed4:	18fa      	adds	r2, r7, r3
    7ed6:	6a3b      	ldr	r3, [r7, #32]
    7ed8:	18d3      	adds	r3, r2, r3
    7eda:	227e      	movs	r2, #126	; 0x7e
    7edc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    7ede:	2300      	movs	r3, #0
    7ee0:	61fb      	str	r3, [r7, #28]
    7ee2:	e002      	b.n	7eea <gen_numname+0xb6>
    7ee4:	69fb      	ldr	r3, [r7, #28]
    7ee6:	3301      	adds	r3, #1
    7ee8:	61fb      	str	r3, [r7, #28]
    7eea:	69fa      	ldr	r2, [r7, #28]
    7eec:	6a3b      	ldr	r3, [r7, #32]
    7eee:	429a      	cmp	r2, r3
    7ef0:	d205      	bcs.n	7efe <gen_numname+0xca>
    7ef2:	68fa      	ldr	r2, [r7, #12]
    7ef4:	69fb      	ldr	r3, [r7, #28]
    7ef6:	18d3      	adds	r3, r2, r3
    7ef8:	781b      	ldrb	r3, [r3, #0]
    7efa:	2b20      	cmp	r3, #32
    7efc:	d1f2      	bne.n	7ee4 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    7efe:	69fb      	ldr	r3, [r7, #28]
    7f00:	1c5a      	adds	r2, r3, #1
    7f02:	61fa      	str	r2, [r7, #28]
    7f04:	68fa      	ldr	r2, [r7, #12]
    7f06:	18d2      	adds	r2, r2, r3
    7f08:	6a3b      	ldr	r3, [r7, #32]
    7f0a:	2b07      	cmp	r3, #7
    7f0c:	d806      	bhi.n	7f1c <gen_numname+0xe8>
    7f0e:	6a3b      	ldr	r3, [r7, #32]
    7f10:	1c59      	adds	r1, r3, #1
    7f12:	6239      	str	r1, [r7, #32]
    7f14:	2114      	movs	r1, #20
    7f16:	1879      	adds	r1, r7, r1
    7f18:	5ccb      	ldrb	r3, [r1, r3]
    7f1a:	e000      	b.n	7f1e <gen_numname+0xea>
    7f1c:	2320      	movs	r3, #32
    7f1e:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    7f20:	69fb      	ldr	r3, [r7, #28]
    7f22:	2b07      	cmp	r3, #7
    7f24:	d9eb      	bls.n	7efe <gen_numname+0xca>
}
    7f26:	46c0      	nop			; (mov r8, r8)
    7f28:	46bd      	mov	sp, r7
    7f2a:	b00a      	add	sp, #40	; 0x28
    7f2c:	bd80      	pop	{r7, pc}
    7f2e:	46c0      	nop			; (mov r8, r8)
    7f30:	00006fd9 	.word	0x00006fd9

00007f34 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    7f34:	b580      	push	{r7, lr}
    7f36:	b084      	sub	sp, #16
    7f38:	af00      	add	r7, sp, #0
    7f3a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
    7f3c:	230f      	movs	r3, #15
    7f3e:	18fb      	adds	r3, r7, r3
    7f40:	2200      	movs	r2, #0
    7f42:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
    7f44:	230b      	movs	r3, #11
    7f46:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    7f48:	230f      	movs	r3, #15
    7f4a:	18fb      	adds	r3, r7, r3
    7f4c:	781b      	ldrb	r3, [r3, #0]
    7f4e:	b2da      	uxtb	r2, r3
    7f50:	0852      	lsrs	r2, r2, #1
    7f52:	01db      	lsls	r3, r3, #7
    7f54:	4313      	orrs	r3, r2
    7f56:	b2d9      	uxtb	r1, r3
    7f58:	687b      	ldr	r3, [r7, #4]
    7f5a:	1c5a      	adds	r2, r3, #1
    7f5c:	607a      	str	r2, [r7, #4]
    7f5e:	781a      	ldrb	r2, [r3, #0]
    7f60:	230f      	movs	r3, #15
    7f62:	18fb      	adds	r3, r7, r3
    7f64:	188a      	adds	r2, r1, r2
    7f66:	701a      	strb	r2, [r3, #0]
    7f68:	68bb      	ldr	r3, [r7, #8]
    7f6a:	3b01      	subs	r3, #1
    7f6c:	60bb      	str	r3, [r7, #8]
    7f6e:	68bb      	ldr	r3, [r7, #8]
    7f70:	2b00      	cmp	r3, #0
    7f72:	d1e9      	bne.n	7f48 <sum_sfn+0x14>
	return sum;
    7f74:	230f      	movs	r3, #15
    7f76:	18fb      	adds	r3, r7, r3
    7f78:	781b      	ldrb	r3, [r3, #0]
}
    7f7a:	0018      	movs	r0, r3
    7f7c:	46bd      	mov	sp, r7
    7f7e:	b004      	add	sp, #16
    7f80:	bd80      	pop	{r7, pc}
	...

00007f84 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    7f84:	b590      	push	{r4, r7, lr}
    7f86:	b087      	sub	sp, #28
    7f88:	af00      	add	r7, sp, #0
    7f8a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    7f8c:	2317      	movs	r3, #23
    7f8e:	18fc      	adds	r4, r7, r3
    7f90:	687b      	ldr	r3, [r7, #4]
    7f92:	2100      	movs	r1, #0
    7f94:	0018      	movs	r0, r3
    7f96:	4b74      	ldr	r3, [pc, #464]	; (8168 <dir_find+0x1e4>)
    7f98:	4798      	blx	r3
    7f9a:	0003      	movs	r3, r0
    7f9c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    7f9e:	2317      	movs	r3, #23
    7fa0:	18fb      	adds	r3, r7, r3
    7fa2:	781b      	ldrb	r3, [r3, #0]
    7fa4:	2b00      	cmp	r3, #0
    7fa6:	d003      	beq.n	7fb0 <dir_find+0x2c>
    7fa8:	2317      	movs	r3, #23
    7faa:	18fb      	adds	r3, r7, r3
    7fac:	781b      	ldrb	r3, [r3, #0]
    7fae:	e0d6      	b.n	815e <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
    7fb0:	2314      	movs	r3, #20
    7fb2:	18fb      	adds	r3, r7, r3
    7fb4:	22ff      	movs	r2, #255	; 0xff
    7fb6:	701a      	strb	r2, [r3, #0]
    7fb8:	2315      	movs	r3, #21
    7fba:	18fb      	adds	r3, r7, r3
    7fbc:	2214      	movs	r2, #20
    7fbe:	18ba      	adds	r2, r7, r2
    7fc0:	7812      	ldrb	r2, [r2, #0]
    7fc2:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    7fc4:	687b      	ldr	r3, [r7, #4]
    7fc6:	681a      	ldr	r2, [r3, #0]
    7fc8:	687b      	ldr	r3, [r7, #4]
    7fca:	691b      	ldr	r3, [r3, #16]
    7fcc:	2117      	movs	r1, #23
    7fce:	187c      	adds	r4, r7, r1
    7fd0:	0019      	movs	r1, r3
    7fd2:	0010      	movs	r0, r2
    7fd4:	4b65      	ldr	r3, [pc, #404]	; (816c <dir_find+0x1e8>)
    7fd6:	4798      	blx	r3
    7fd8:	0003      	movs	r3, r0
    7fda:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    7fdc:	2317      	movs	r3, #23
    7fde:	18fb      	adds	r3, r7, r3
    7fe0:	781b      	ldrb	r3, [r3, #0]
    7fe2:	2b00      	cmp	r3, #0
    7fe4:	d000      	beq.n	7fe8 <dir_find+0x64>
    7fe6:	e0b2      	b.n	814e <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    7fe8:	687b      	ldr	r3, [r7, #4]
    7fea:	695b      	ldr	r3, [r3, #20]
    7fec:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    7fee:	2316      	movs	r3, #22
    7ff0:	18fb      	adds	r3, r7, r3
    7ff2:	693a      	ldr	r2, [r7, #16]
    7ff4:	7812      	ldrb	r2, [r2, #0]
    7ff6:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    7ff8:	2316      	movs	r3, #22
    7ffa:	18fb      	adds	r3, r7, r3
    7ffc:	781b      	ldrb	r3, [r3, #0]
    7ffe:	2b00      	cmp	r3, #0
    8000:	d104      	bne.n	800c <dir_find+0x88>
    8002:	2317      	movs	r3, #23
    8004:	18fb      	adds	r3, r7, r3
    8006:	2204      	movs	r2, #4
    8008:	701a      	strb	r2, [r3, #0]
    800a:	e0a5      	b.n	8158 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    800c:	693b      	ldr	r3, [r7, #16]
    800e:	330b      	adds	r3, #11
    8010:	781a      	ldrb	r2, [r3, #0]
    8012:	230f      	movs	r3, #15
    8014:	18fb      	adds	r3, r7, r3
    8016:	213f      	movs	r1, #63	; 0x3f
    8018:	400a      	ands	r2, r1
    801a:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    801c:	2316      	movs	r3, #22
    801e:	18fb      	adds	r3, r7, r3
    8020:	781b      	ldrb	r3, [r3, #0]
    8022:	2be5      	cmp	r3, #229	; 0xe5
    8024:	d00a      	beq.n	803c <dir_find+0xb8>
    8026:	230f      	movs	r3, #15
    8028:	18fb      	adds	r3, r7, r3
    802a:	781b      	ldrb	r3, [r3, #0]
    802c:	2208      	movs	r2, #8
    802e:	4013      	ands	r3, r2
    8030:	d009      	beq.n	8046 <dir_find+0xc2>
    8032:	230f      	movs	r3, #15
    8034:	18fb      	adds	r3, r7, r3
    8036:	781b      	ldrb	r3, [r3, #0]
    8038:	2b0f      	cmp	r3, #15
    803a:	d004      	beq.n	8046 <dir_find+0xc2>
			ord = 0xFF;
    803c:	2315      	movs	r3, #21
    803e:	18fb      	adds	r3, r7, r3
    8040:	22ff      	movs	r2, #255	; 0xff
    8042:	701a      	strb	r2, [r3, #0]
    8044:	e073      	b.n	812e <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    8046:	230f      	movs	r3, #15
    8048:	18fb      	adds	r3, r7, r3
    804a:	781b      	ldrb	r3, [r3, #0]
    804c:	2b0f      	cmp	r3, #15
    804e:	d145      	bne.n	80dc <dir_find+0x158>
				if (dj->lfn) {
    8050:	687b      	ldr	r3, [r7, #4]
    8052:	69db      	ldr	r3, [r3, #28]
    8054:	2b00      	cmp	r3, #0
    8056:	d100      	bne.n	805a <dir_find+0xd6>
    8058:	e069      	b.n	812e <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    805a:	2316      	movs	r3, #22
    805c:	18fb      	adds	r3, r7, r3
    805e:	781b      	ldrb	r3, [r3, #0]
    8060:	2240      	movs	r2, #64	; 0x40
    8062:	4013      	ands	r3, r2
    8064:	d016      	beq.n	8094 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
    8066:	2314      	movs	r3, #20
    8068:	18fb      	adds	r3, r7, r3
    806a:	693a      	ldr	r2, [r7, #16]
    806c:	7b52      	ldrb	r2, [r2, #13]
    806e:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
    8070:	2316      	movs	r3, #22
    8072:	18fb      	adds	r3, r7, r3
    8074:	2216      	movs	r2, #22
    8076:	18ba      	adds	r2, r7, r2
    8078:	7812      	ldrb	r2, [r2, #0]
    807a:	2140      	movs	r1, #64	; 0x40
    807c:	438a      	bics	r2, r1
    807e:	701a      	strb	r2, [r3, #0]
    8080:	2315      	movs	r3, #21
    8082:	18fb      	adds	r3, r7, r3
    8084:	2216      	movs	r2, #22
    8086:	18ba      	adds	r2, r7, r2
    8088:	7812      	ldrb	r2, [r2, #0]
    808a:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
    808c:	687b      	ldr	r3, [r7, #4]
    808e:	88da      	ldrh	r2, [r3, #6]
    8090:	687b      	ldr	r3, [r7, #4]
    8092:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    8094:	2316      	movs	r3, #22
    8096:	18fa      	adds	r2, r7, r3
    8098:	2315      	movs	r3, #21
    809a:	18fb      	adds	r3, r7, r3
    809c:	7812      	ldrb	r2, [r2, #0]
    809e:	781b      	ldrb	r3, [r3, #0]
    80a0:	429a      	cmp	r2, r3
    80a2:	d116      	bne.n	80d2 <dir_find+0x14e>
    80a4:	693b      	ldr	r3, [r7, #16]
    80a6:	330d      	adds	r3, #13
    80a8:	781b      	ldrb	r3, [r3, #0]
    80aa:	2214      	movs	r2, #20
    80ac:	18ba      	adds	r2, r7, r2
    80ae:	7812      	ldrb	r2, [r2, #0]
    80b0:	429a      	cmp	r2, r3
    80b2:	d10e      	bne.n	80d2 <dir_find+0x14e>
    80b4:	687b      	ldr	r3, [r7, #4]
    80b6:	69db      	ldr	r3, [r3, #28]
    80b8:	693a      	ldr	r2, [r7, #16]
    80ba:	0011      	movs	r1, r2
    80bc:	0018      	movs	r0, r3
    80be:	4b2c      	ldr	r3, [pc, #176]	; (8170 <dir_find+0x1ec>)
    80c0:	4798      	blx	r3
    80c2:	1e03      	subs	r3, r0, #0
    80c4:	d005      	beq.n	80d2 <dir_find+0x14e>
    80c6:	2315      	movs	r3, #21
    80c8:	18fb      	adds	r3, r7, r3
    80ca:	781b      	ldrb	r3, [r3, #0]
    80cc:	3b01      	subs	r3, #1
    80ce:	b2da      	uxtb	r2, r3
    80d0:	e000      	b.n	80d4 <dir_find+0x150>
    80d2:	22ff      	movs	r2, #255	; 0xff
    80d4:	2315      	movs	r3, #21
    80d6:	18fb      	adds	r3, r7, r3
    80d8:	701a      	strb	r2, [r3, #0]
    80da:	e028      	b.n	812e <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    80dc:	2315      	movs	r3, #21
    80de:	18fb      	adds	r3, r7, r3
    80e0:	781b      	ldrb	r3, [r3, #0]
    80e2:	2b00      	cmp	r3, #0
    80e4:	d10a      	bne.n	80fc <dir_find+0x178>
    80e6:	693b      	ldr	r3, [r7, #16]
    80e8:	0018      	movs	r0, r3
    80ea:	4b22      	ldr	r3, [pc, #136]	; (8174 <dir_find+0x1f0>)
    80ec:	4798      	blx	r3
    80ee:	0003      	movs	r3, r0
    80f0:	001a      	movs	r2, r3
    80f2:	2314      	movs	r3, #20
    80f4:	18fb      	adds	r3, r7, r3
    80f6:	781b      	ldrb	r3, [r3, #0]
    80f8:	4293      	cmp	r3, r2
    80fa:	d02a      	beq.n	8152 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    80fc:	2315      	movs	r3, #21
    80fe:	18fb      	adds	r3, r7, r3
    8100:	22ff      	movs	r2, #255	; 0xff
    8102:	701a      	strb	r2, [r3, #0]
    8104:	687b      	ldr	r3, [r7, #4]
    8106:	2201      	movs	r2, #1
    8108:	4252      	negs	r2, r2
    810a:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    810c:	687b      	ldr	r3, [r7, #4]
    810e:	699b      	ldr	r3, [r3, #24]
    8110:	330b      	adds	r3, #11
    8112:	781b      	ldrb	r3, [r3, #0]
    8114:	001a      	movs	r2, r3
    8116:	2301      	movs	r3, #1
    8118:	4013      	ands	r3, r2
    811a:	d108      	bne.n	812e <dir_find+0x1aa>
    811c:	687b      	ldr	r3, [r7, #4]
    811e:	6999      	ldr	r1, [r3, #24]
    8120:	693b      	ldr	r3, [r7, #16]
    8122:	220b      	movs	r2, #11
    8124:	0018      	movs	r0, r3
    8126:	4b14      	ldr	r3, [pc, #80]	; (8178 <dir_find+0x1f4>)
    8128:	4798      	blx	r3
    812a:	1e03      	subs	r3, r0, #0
    812c:	d013      	beq.n	8156 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    812e:	2317      	movs	r3, #23
    8130:	18fc      	adds	r4, r7, r3
    8132:	687b      	ldr	r3, [r7, #4]
    8134:	2100      	movs	r1, #0
    8136:	0018      	movs	r0, r3
    8138:	4b10      	ldr	r3, [pc, #64]	; (817c <dir_find+0x1f8>)
    813a:	4798      	blx	r3
    813c:	0003      	movs	r3, r0
    813e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    8140:	2317      	movs	r3, #23
    8142:	18fb      	adds	r3, r7, r3
    8144:	781b      	ldrb	r3, [r3, #0]
    8146:	2b00      	cmp	r3, #0
    8148:	d100      	bne.n	814c <dir_find+0x1c8>
    814a:	e73b      	b.n	7fc4 <dir_find+0x40>
    814c:	e004      	b.n	8158 <dir_find+0x1d4>
		if (res != FR_OK) break;
    814e:	46c0      	nop			; (mov r8, r8)
    8150:	e002      	b.n	8158 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    8152:	46c0      	nop			; (mov r8, r8)
    8154:	e000      	b.n	8158 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    8156:	46c0      	nop			; (mov r8, r8)

	return res;
    8158:	2317      	movs	r3, #23
    815a:	18fb      	adds	r3, r7, r3
    815c:	781b      	ldrb	r3, [r3, #0]
}
    815e:	0018      	movs	r0, r3
    8160:	46bd      	mov	sp, r7
    8162:	b007      	add	sp, #28
    8164:	bd90      	pop	{r4, r7, pc}
    8166:	46c0      	nop			; (mov r8, r8)
    8168:	00007901 	.word	0x00007901
    816c:	000070bd 	.word	0x000070bd
    8170:	00007c21 	.word	0x00007c21
    8174:	00007f35 	.word	0x00007f35
    8178:	00007041 	.word	0x00007041
    817c:	00007a31 	.word	0x00007a31

00008180 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    8180:	b590      	push	{r4, r7, lr}
    8182:	b08d      	sub	sp, #52	; 0x34
    8184:	af00      	add	r7, sp, #0
    8186:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    8188:	687b      	ldr	r3, [r7, #4]
    818a:	699b      	ldr	r3, [r3, #24]
    818c:	627b      	str	r3, [r7, #36]	; 0x24
    818e:	687b      	ldr	r3, [r7, #4]
    8190:	69db      	ldr	r3, [r3, #28]
    8192:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
    8194:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8196:	230c      	movs	r3, #12
    8198:	18fb      	adds	r3, r7, r3
    819a:	220c      	movs	r2, #12
    819c:	0018      	movs	r0, r3
    819e:	4bc8      	ldr	r3, [pc, #800]	; (84c0 <dir_register+0x340>)
    81a0:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    81a2:	230c      	movs	r3, #12
    81a4:	18fb      	adds	r3, r7, r3
    81a6:	7adb      	ldrb	r3, [r3, #11]
    81a8:	001a      	movs	r2, r3
    81aa:	2301      	movs	r3, #1
    81ac:	4013      	ands	r3, r2
    81ae:	d048      	beq.n	8242 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    81b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    81b2:	330b      	adds	r3, #11
    81b4:	2200      	movs	r2, #0
    81b6:	701a      	strb	r2, [r3, #0]
    81b8:	687b      	ldr	r3, [r7, #4]
    81ba:	2200      	movs	r2, #0
    81bc:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
    81be:	232c      	movs	r3, #44	; 0x2c
    81c0:	18fb      	adds	r3, r7, r3
    81c2:	2201      	movs	r2, #1
    81c4:	801a      	strh	r2, [r3, #0]
    81c6:	e01c      	b.n	8202 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
    81c8:	232c      	movs	r3, #44	; 0x2c
    81ca:	18fb      	adds	r3, r7, r3
    81cc:	881b      	ldrh	r3, [r3, #0]
    81ce:	6a3a      	ldr	r2, [r7, #32]
    81d0:	210c      	movs	r1, #12
    81d2:	1879      	adds	r1, r7, r1
    81d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    81d6:	4cbb      	ldr	r4, [pc, #748]	; (84c4 <dir_register+0x344>)
    81d8:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    81da:	232f      	movs	r3, #47	; 0x2f
    81dc:	18fc      	adds	r4, r7, r3
    81de:	687b      	ldr	r3, [r7, #4]
    81e0:	0018      	movs	r0, r3
    81e2:	4bb9      	ldr	r3, [pc, #740]	; (84c8 <dir_register+0x348>)
    81e4:	4798      	blx	r3
    81e6:	0003      	movs	r3, r0
    81e8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    81ea:	232f      	movs	r3, #47	; 0x2f
    81ec:	18fb      	adds	r3, r7, r3
    81ee:	781b      	ldrb	r3, [r3, #0]
    81f0:	2b00      	cmp	r3, #0
    81f2:	d10c      	bne.n	820e <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
    81f4:	232c      	movs	r3, #44	; 0x2c
    81f6:	18fb      	adds	r3, r7, r3
    81f8:	881a      	ldrh	r2, [r3, #0]
    81fa:	232c      	movs	r3, #44	; 0x2c
    81fc:	18fb      	adds	r3, r7, r3
    81fe:	3201      	adds	r2, #1
    8200:	801a      	strh	r2, [r3, #0]
    8202:	232c      	movs	r3, #44	; 0x2c
    8204:	18fb      	adds	r3, r7, r3
    8206:	881b      	ldrh	r3, [r3, #0]
    8208:	2b63      	cmp	r3, #99	; 0x63
    820a:	d9dd      	bls.n	81c8 <dir_register+0x48>
    820c:	e000      	b.n	8210 <dir_register+0x90>
			if (res != FR_OK) break;
    820e:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    8210:	232c      	movs	r3, #44	; 0x2c
    8212:	18fb      	adds	r3, r7, r3
    8214:	881b      	ldrh	r3, [r3, #0]
    8216:	2b64      	cmp	r3, #100	; 0x64
    8218:	d101      	bne.n	821e <dir_register+0x9e>
    821a:	2307      	movs	r3, #7
    821c:	e14c      	b.n	84b8 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    821e:	232f      	movs	r3, #47	; 0x2f
    8220:	18fb      	adds	r3, r7, r3
    8222:	781b      	ldrb	r3, [r3, #0]
    8224:	2b04      	cmp	r3, #4
    8226:	d003      	beq.n	8230 <dir_register+0xb0>
    8228:	232f      	movs	r3, #47	; 0x2f
    822a:	18fb      	adds	r3, r7, r3
    822c:	781b      	ldrb	r3, [r3, #0]
    822e:	e143      	b.n	84b8 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    8230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8232:	330b      	adds	r3, #11
    8234:	220c      	movs	r2, #12
    8236:	18ba      	adds	r2, r7, r2
    8238:	7ad2      	ldrb	r2, [r2, #11]
    823a:	701a      	strb	r2, [r3, #0]
    823c:	687b      	ldr	r3, [r7, #4]
    823e:	6a3a      	ldr	r2, [r7, #32]
    8240:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    8242:	230c      	movs	r3, #12
    8244:	18fb      	adds	r3, r7, r3
    8246:	7adb      	ldrb	r3, [r3, #11]
    8248:	001a      	movs	r2, r3
    824a:	2302      	movs	r3, #2
    824c:	4013      	ands	r3, r2
    824e:	d023      	beq.n	8298 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
    8250:	232a      	movs	r3, #42	; 0x2a
    8252:	18fb      	adds	r3, r7, r3
    8254:	2200      	movs	r2, #0
    8256:	801a      	strh	r2, [r3, #0]
    8258:	e006      	b.n	8268 <dir_register+0xe8>
    825a:	232a      	movs	r3, #42	; 0x2a
    825c:	18fb      	adds	r3, r7, r3
    825e:	881a      	ldrh	r2, [r3, #0]
    8260:	232a      	movs	r3, #42	; 0x2a
    8262:	18fb      	adds	r3, r7, r3
    8264:	3201      	adds	r2, #1
    8266:	801a      	strh	r2, [r3, #0]
    8268:	232a      	movs	r3, #42	; 0x2a
    826a:	18fb      	adds	r3, r7, r3
    826c:	881b      	ldrh	r3, [r3, #0]
    826e:	005b      	lsls	r3, r3, #1
    8270:	6a3a      	ldr	r2, [r7, #32]
    8272:	18d3      	adds	r3, r2, r3
    8274:	881b      	ldrh	r3, [r3, #0]
    8276:	2b00      	cmp	r3, #0
    8278:	d1ef      	bne.n	825a <dir_register+0xda>
		ne = (ne + 25) / 13;
    827a:	232a      	movs	r3, #42	; 0x2a
    827c:	18fb      	adds	r3, r7, r3
    827e:	881b      	ldrh	r3, [r3, #0]
    8280:	3319      	adds	r3, #25
    8282:	001a      	movs	r2, r3
    8284:	4b91      	ldr	r3, [pc, #580]	; (84cc <dir_register+0x34c>)
    8286:	210d      	movs	r1, #13
    8288:	0010      	movs	r0, r2
    828a:	4798      	blx	r3
    828c:	0003      	movs	r3, r0
    828e:	001a      	movs	r2, r3
    8290:	232a      	movs	r3, #42	; 0x2a
    8292:	18fb      	adds	r3, r7, r3
    8294:	801a      	strh	r2, [r3, #0]
    8296:	e003      	b.n	82a0 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
    8298:	232a      	movs	r3, #42	; 0x2a
    829a:	18fb      	adds	r3, r7, r3
    829c:	2201      	movs	r2, #1
    829e:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    82a0:	232f      	movs	r3, #47	; 0x2f
    82a2:	18fc      	adds	r4, r7, r3
    82a4:	687b      	ldr	r3, [r7, #4]
    82a6:	2100      	movs	r1, #0
    82a8:	0018      	movs	r0, r3
    82aa:	4b89      	ldr	r3, [pc, #548]	; (84d0 <dir_register+0x350>)
    82ac:	4798      	blx	r3
    82ae:	0003      	movs	r3, r0
    82b0:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    82b2:	232f      	movs	r3, #47	; 0x2f
    82b4:	18fb      	adds	r3, r7, r3
    82b6:	781b      	ldrb	r3, [r3, #0]
    82b8:	2b00      	cmp	r3, #0
    82ba:	d003      	beq.n	82c4 <dir_register+0x144>
    82bc:	232f      	movs	r3, #47	; 0x2f
    82be:	18fb      	adds	r3, r7, r3
    82c0:	781b      	ldrb	r3, [r3, #0]
    82c2:	e0f9      	b.n	84b8 <dir_register+0x338>
	n = is = 0;
    82c4:	2328      	movs	r3, #40	; 0x28
    82c6:	18fb      	adds	r3, r7, r3
    82c8:	2200      	movs	r2, #0
    82ca:	801a      	strh	r2, [r3, #0]
    82cc:	232c      	movs	r3, #44	; 0x2c
    82ce:	18fb      	adds	r3, r7, r3
    82d0:	2228      	movs	r2, #40	; 0x28
    82d2:	18ba      	adds	r2, r7, r2
    82d4:	8812      	ldrh	r2, [r2, #0]
    82d6:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
    82d8:	687b      	ldr	r3, [r7, #4]
    82da:	681a      	ldr	r2, [r3, #0]
    82dc:	687b      	ldr	r3, [r7, #4]
    82de:	691b      	ldr	r3, [r3, #16]
    82e0:	212f      	movs	r1, #47	; 0x2f
    82e2:	187c      	adds	r4, r7, r1
    82e4:	0019      	movs	r1, r3
    82e6:	0010      	movs	r0, r2
    82e8:	4b7a      	ldr	r3, [pc, #488]	; (84d4 <dir_register+0x354>)
    82ea:	4798      	blx	r3
    82ec:	0003      	movs	r3, r0
    82ee:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    82f0:	232f      	movs	r3, #47	; 0x2f
    82f2:	18fb      	adds	r3, r7, r3
    82f4:	781b      	ldrb	r3, [r3, #0]
    82f6:	2b00      	cmp	r3, #0
    82f8:	d13c      	bne.n	8374 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
    82fa:	687b      	ldr	r3, [r7, #4]
    82fc:	695a      	ldr	r2, [r3, #20]
    82fe:	231f      	movs	r3, #31
    8300:	18fb      	adds	r3, r7, r3
    8302:	7812      	ldrb	r2, [r2, #0]
    8304:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    8306:	231f      	movs	r3, #31
    8308:	18fb      	adds	r3, r7, r3
    830a:	781b      	ldrb	r3, [r3, #0]
    830c:	2be5      	cmp	r3, #229	; 0xe5
    830e:	d004      	beq.n	831a <dir_register+0x19a>
    8310:	231f      	movs	r3, #31
    8312:	18fb      	adds	r3, r7, r3
    8314:	781b      	ldrb	r3, [r3, #0]
    8316:	2b00      	cmp	r3, #0
    8318:	d119      	bne.n	834e <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    831a:	232c      	movs	r3, #44	; 0x2c
    831c:	18fb      	adds	r3, r7, r3
    831e:	881b      	ldrh	r3, [r3, #0]
    8320:	2b00      	cmp	r3, #0
    8322:	d104      	bne.n	832e <dir_register+0x1ae>
    8324:	2328      	movs	r3, #40	; 0x28
    8326:	18fb      	adds	r3, r7, r3
    8328:	687a      	ldr	r2, [r7, #4]
    832a:	88d2      	ldrh	r2, [r2, #6]
    832c:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    832e:	232c      	movs	r3, #44	; 0x2c
    8330:	18fb      	adds	r3, r7, r3
    8332:	222c      	movs	r2, #44	; 0x2c
    8334:	18ba      	adds	r2, r7, r2
    8336:	8812      	ldrh	r2, [r2, #0]
    8338:	3201      	adds	r2, #1
    833a:	801a      	strh	r2, [r3, #0]
    833c:	232c      	movs	r3, #44	; 0x2c
    833e:	18fa      	adds	r2, r7, r3
    8340:	232a      	movs	r3, #42	; 0x2a
    8342:	18fb      	adds	r3, r7, r3
    8344:	8812      	ldrh	r2, [r2, #0]
    8346:	881b      	ldrh	r3, [r3, #0]
    8348:	429a      	cmp	r2, r3
    834a:	d104      	bne.n	8356 <dir_register+0x1d6>
    834c:	e013      	b.n	8376 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
    834e:	232c      	movs	r3, #44	; 0x2c
    8350:	18fb      	adds	r3, r7, r3
    8352:	2200      	movs	r2, #0
    8354:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    8356:	232f      	movs	r3, #47	; 0x2f
    8358:	18fc      	adds	r4, r7, r3
    835a:	687b      	ldr	r3, [r7, #4]
    835c:	2101      	movs	r1, #1
    835e:	0018      	movs	r0, r3
    8360:	4b5d      	ldr	r3, [pc, #372]	; (84d8 <dir_register+0x358>)
    8362:	4798      	blx	r3
    8364:	0003      	movs	r3, r0
    8366:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    8368:	232f      	movs	r3, #47	; 0x2f
    836a:	18fb      	adds	r3, r7, r3
    836c:	781b      	ldrb	r3, [r3, #0]
    836e:	2b00      	cmp	r3, #0
    8370:	d0b2      	beq.n	82d8 <dir_register+0x158>
    8372:	e000      	b.n	8376 <dir_register+0x1f6>
		if (res != FR_OK) break;
    8374:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    8376:	232f      	movs	r3, #47	; 0x2f
    8378:	18fb      	adds	r3, r7, r3
    837a:	781b      	ldrb	r3, [r3, #0]
    837c:	2b00      	cmp	r3, #0
    837e:	d163      	bne.n	8448 <dir_register+0x2c8>
    8380:	232a      	movs	r3, #42	; 0x2a
    8382:	18fb      	adds	r3, r7, r3
    8384:	881b      	ldrh	r3, [r3, #0]
    8386:	2b01      	cmp	r3, #1
    8388:	d95e      	bls.n	8448 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
    838a:	232f      	movs	r3, #47	; 0x2f
    838c:	18fc      	adds	r4, r7, r3
    838e:	2328      	movs	r3, #40	; 0x28
    8390:	18fb      	adds	r3, r7, r3
    8392:	881a      	ldrh	r2, [r3, #0]
    8394:	687b      	ldr	r3, [r7, #4]
    8396:	0011      	movs	r1, r2
    8398:	0018      	movs	r0, r3
    839a:	4b4d      	ldr	r3, [pc, #308]	; (84d0 <dir_register+0x350>)
    839c:	4798      	blx	r3
    839e:	0003      	movs	r3, r0
    83a0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    83a2:	232f      	movs	r3, #47	; 0x2f
    83a4:	18fb      	adds	r3, r7, r3
    83a6:	781b      	ldrb	r3, [r3, #0]
    83a8:	2b00      	cmp	r3, #0
    83aa:	d14d      	bne.n	8448 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    83ac:	687b      	ldr	r3, [r7, #4]
    83ae:	699b      	ldr	r3, [r3, #24]
    83b0:	221e      	movs	r2, #30
    83b2:	18bc      	adds	r4, r7, r2
    83b4:	0018      	movs	r0, r3
    83b6:	4b49      	ldr	r3, [pc, #292]	; (84dc <dir_register+0x35c>)
    83b8:	4798      	blx	r3
    83ba:	0003      	movs	r3, r0
    83bc:	7023      	strb	r3, [r4, #0]
			ne--;
    83be:	232a      	movs	r3, #42	; 0x2a
    83c0:	18fb      	adds	r3, r7, r3
    83c2:	881a      	ldrh	r2, [r3, #0]
    83c4:	232a      	movs	r3, #42	; 0x2a
    83c6:	18fb      	adds	r3, r7, r3
    83c8:	3a01      	subs	r2, #1
    83ca:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
    83cc:	687b      	ldr	r3, [r7, #4]
    83ce:	681a      	ldr	r2, [r3, #0]
    83d0:	687b      	ldr	r3, [r7, #4]
    83d2:	691b      	ldr	r3, [r3, #16]
    83d4:	212f      	movs	r1, #47	; 0x2f
    83d6:	187c      	adds	r4, r7, r1
    83d8:	0019      	movs	r1, r3
    83da:	0010      	movs	r0, r2
    83dc:	4b3d      	ldr	r3, [pc, #244]	; (84d4 <dir_register+0x354>)
    83de:	4798      	blx	r3
    83e0:	0003      	movs	r3, r0
    83e2:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
    83e4:	232f      	movs	r3, #47	; 0x2f
    83e6:	18fb      	adds	r3, r7, r3
    83e8:	781b      	ldrb	r3, [r3, #0]
    83ea:	2b00      	cmp	r3, #0
    83ec:	d12b      	bne.n	8446 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    83ee:	687b      	ldr	r3, [r7, #4]
    83f0:	69d8      	ldr	r0, [r3, #28]
    83f2:	687b      	ldr	r3, [r7, #4]
    83f4:	6959      	ldr	r1, [r3, #20]
    83f6:	232a      	movs	r3, #42	; 0x2a
    83f8:	18fb      	adds	r3, r7, r3
    83fa:	881b      	ldrh	r3, [r3, #0]
    83fc:	b2da      	uxtb	r2, r3
    83fe:	231e      	movs	r3, #30
    8400:	18fb      	adds	r3, r7, r3
    8402:	781b      	ldrb	r3, [r3, #0]
    8404:	4c36      	ldr	r4, [pc, #216]	; (84e0 <dir_register+0x360>)
    8406:	47a0      	blx	r4
				dj->fs->wflag = 1;
    8408:	687b      	ldr	r3, [r7, #4]
    840a:	681b      	ldr	r3, [r3, #0]
    840c:	2201      	movs	r2, #1
    840e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
    8410:	232f      	movs	r3, #47	; 0x2f
    8412:	18fc      	adds	r4, r7, r3
    8414:	687b      	ldr	r3, [r7, #4]
    8416:	2100      	movs	r1, #0
    8418:	0018      	movs	r0, r3
    841a:	4b2f      	ldr	r3, [pc, #188]	; (84d8 <dir_register+0x358>)
    841c:	4798      	blx	r3
    841e:	0003      	movs	r3, r0
    8420:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
    8422:	232f      	movs	r3, #47	; 0x2f
    8424:	18fb      	adds	r3, r7, r3
    8426:	781b      	ldrb	r3, [r3, #0]
    8428:	2b00      	cmp	r3, #0
    842a:	d10d      	bne.n	8448 <dir_register+0x2c8>
    842c:	232a      	movs	r3, #42	; 0x2a
    842e:	18fb      	adds	r3, r7, r3
    8430:	222a      	movs	r2, #42	; 0x2a
    8432:	18ba      	adds	r2, r7, r2
    8434:	8812      	ldrh	r2, [r2, #0]
    8436:	3a01      	subs	r2, #1
    8438:	801a      	strh	r2, [r3, #0]
    843a:	232a      	movs	r3, #42	; 0x2a
    843c:	18fb      	adds	r3, r7, r3
    843e:	881b      	ldrh	r3, [r3, #0]
    8440:	2b00      	cmp	r3, #0
    8442:	d1c3      	bne.n	83cc <dir_register+0x24c>
    8444:	e000      	b.n	8448 <dir_register+0x2c8>
				if (res != FR_OK) break;
    8446:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    8448:	232f      	movs	r3, #47	; 0x2f
    844a:	18fb      	adds	r3, r7, r3
    844c:	781b      	ldrb	r3, [r3, #0]
    844e:	2b00      	cmp	r3, #0
    8450:	d12f      	bne.n	84b2 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
    8452:	687b      	ldr	r3, [r7, #4]
    8454:	681a      	ldr	r2, [r3, #0]
    8456:	687b      	ldr	r3, [r7, #4]
    8458:	691b      	ldr	r3, [r3, #16]
    845a:	212f      	movs	r1, #47	; 0x2f
    845c:	187c      	adds	r4, r7, r1
    845e:	0019      	movs	r1, r3
    8460:	0010      	movs	r0, r2
    8462:	4b1c      	ldr	r3, [pc, #112]	; (84d4 <dir_register+0x354>)
    8464:	4798      	blx	r3
    8466:	0003      	movs	r3, r0
    8468:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    846a:	232f      	movs	r3, #47	; 0x2f
    846c:	18fb      	adds	r3, r7, r3
    846e:	781b      	ldrb	r3, [r3, #0]
    8470:	2b00      	cmp	r3, #0
    8472:	d11e      	bne.n	84b2 <dir_register+0x332>
			dir = dj->dir;
    8474:	687b      	ldr	r3, [r7, #4]
    8476:	695b      	ldr	r3, [r3, #20]
    8478:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    847a:	69bb      	ldr	r3, [r7, #24]
    847c:	2220      	movs	r2, #32
    847e:	2100      	movs	r1, #0
    8480:	0018      	movs	r0, r3
    8482:	4b18      	ldr	r3, [pc, #96]	; (84e4 <dir_register+0x364>)
    8484:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    8486:	687b      	ldr	r3, [r7, #4]
    8488:	6999      	ldr	r1, [r3, #24]
    848a:	69bb      	ldr	r3, [r7, #24]
    848c:	220b      	movs	r2, #11
    848e:	0018      	movs	r0, r3
    8490:	4b0b      	ldr	r3, [pc, #44]	; (84c0 <dir_register+0x340>)
    8492:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    8494:	69bb      	ldr	r3, [r7, #24]
    8496:	330c      	adds	r3, #12
    8498:	001a      	movs	r2, r3
    849a:	687b      	ldr	r3, [r7, #4]
    849c:	699b      	ldr	r3, [r3, #24]
    849e:	330b      	adds	r3, #11
    84a0:	781b      	ldrb	r3, [r3, #0]
    84a2:	2118      	movs	r1, #24
    84a4:	400b      	ands	r3, r1
    84a6:	b2db      	uxtb	r3, r3
    84a8:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
    84aa:	687b      	ldr	r3, [r7, #4]
    84ac:	681b      	ldr	r3, [r3, #0]
    84ae:	2201      	movs	r2, #1
    84b0:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
    84b2:	232f      	movs	r3, #47	; 0x2f
    84b4:	18fb      	adds	r3, r7, r3
    84b6:	781b      	ldrb	r3, [r3, #0]
}
    84b8:	0018      	movs	r0, r3
    84ba:	46bd      	mov	sp, r7
    84bc:	b00d      	add	sp, #52	; 0x34
    84be:	bd90      	pop	{r4, r7, pc}
    84c0:	00006fd9 	.word	0x00006fd9
    84c4:	00007e35 	.word	0x00007e35
    84c8:	00007f85 	.word	0x00007f85
    84cc:	0000a3c1 	.word	0x0000a3c1
    84d0:	00007901 	.word	0x00007901
    84d4:	000070bd 	.word	0x000070bd
    84d8:	00007a31 	.word	0x00007a31
    84dc:	00007f35 	.word	0x00007f35
    84e0:	00007d25 	.word	0x00007d25
    84e4:	00007011 	.word	0x00007011

000084e8 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    84e8:	b590      	push	{r4, r7, lr}
    84ea:	b08b      	sub	sp, #44	; 0x2c
    84ec:	af00      	add	r7, sp, #0
    84ee:	6078      	str	r0, [r7, #4]
    84f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    84f2:	683b      	ldr	r3, [r7, #0]
    84f4:	681b      	ldr	r3, [r3, #0]
    84f6:	613b      	str	r3, [r7, #16]
    84f8:	e002      	b.n	8500 <create_name+0x18>
    84fa:	693b      	ldr	r3, [r7, #16]
    84fc:	3301      	adds	r3, #1
    84fe:	613b      	str	r3, [r7, #16]
    8500:	693b      	ldr	r3, [r7, #16]
    8502:	781b      	ldrb	r3, [r3, #0]
    8504:	2b2f      	cmp	r3, #47	; 0x2f
    8506:	d0f8      	beq.n	84fa <create_name+0x12>
    8508:	693b      	ldr	r3, [r7, #16]
    850a:	781b      	ldrb	r3, [r3, #0]
    850c:	2b5c      	cmp	r3, #92	; 0x5c
    850e:	d0f4      	beq.n	84fa <create_name+0x12>
	lfn = dj->lfn;
    8510:	687b      	ldr	r3, [r7, #4]
    8512:	69db      	ldr	r3, [r3, #28]
    8514:	60fb      	str	r3, [r7, #12]
	si = di = 0;
    8516:	2300      	movs	r3, #0
    8518:	617b      	str	r3, [r7, #20]
    851a:	697b      	ldr	r3, [r7, #20]
    851c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
    851e:	69bb      	ldr	r3, [r7, #24]
    8520:	1c5a      	adds	r2, r3, #1
    8522:	61ba      	str	r2, [r7, #24]
    8524:	693a      	ldr	r2, [r7, #16]
    8526:	18d3      	adds	r3, r2, r3
    8528:	781a      	ldrb	r2, [r3, #0]
    852a:	2324      	movs	r3, #36	; 0x24
    852c:	18fb      	adds	r3, r7, r3
    852e:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    8530:	2324      	movs	r3, #36	; 0x24
    8532:	18fb      	adds	r3, r7, r3
    8534:	881b      	ldrh	r3, [r3, #0]
    8536:	2b1f      	cmp	r3, #31
    8538:	d944      	bls.n	85c4 <create_name+0xdc>
    853a:	2324      	movs	r3, #36	; 0x24
    853c:	18fb      	adds	r3, r7, r3
    853e:	881b      	ldrh	r3, [r3, #0]
    8540:	2b2f      	cmp	r3, #47	; 0x2f
    8542:	d03f      	beq.n	85c4 <create_name+0xdc>
    8544:	2324      	movs	r3, #36	; 0x24
    8546:	18fb      	adds	r3, r7, r3
    8548:	881b      	ldrh	r3, [r3, #0]
    854a:	2b5c      	cmp	r3, #92	; 0x5c
    854c:	d03a      	beq.n	85c4 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
    854e:	697b      	ldr	r3, [r7, #20]
    8550:	2bfe      	cmp	r3, #254	; 0xfe
    8552:	d901      	bls.n	8558 <create_name+0x70>
			return FR_INVALID_NAME;
    8554:	2306      	movs	r3, #6
    8556:	e1e7      	b.n	8928 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
    8558:	2324      	movs	r3, #36	; 0x24
    855a:	18fb      	adds	r3, r7, r3
    855c:	2224      	movs	r2, #36	; 0x24
    855e:	18ba      	adds	r2, r7, r2
    8560:	8812      	ldrh	r2, [r2, #0]
    8562:	21ff      	movs	r1, #255	; 0xff
    8564:	400a      	ands	r2, r1
    8566:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    8568:	2324      	movs	r3, #36	; 0x24
    856a:	18fc      	adds	r4, r7, r3
    856c:	2324      	movs	r3, #36	; 0x24
    856e:	18fb      	adds	r3, r7, r3
    8570:	881b      	ldrh	r3, [r3, #0]
    8572:	2101      	movs	r1, #1
    8574:	0018      	movs	r0, r3
    8576:	4bba      	ldr	r3, [pc, #744]	; (8860 <create_name+0x378>)
    8578:	4798      	blx	r3
    857a:	0003      	movs	r3, r0
    857c:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    857e:	2324      	movs	r3, #36	; 0x24
    8580:	18fb      	adds	r3, r7, r3
    8582:	881b      	ldrh	r3, [r3, #0]
    8584:	2b00      	cmp	r3, #0
    8586:	d101      	bne.n	858c <create_name+0xa4>
    8588:	2306      	movs	r3, #6
    858a:	e1cd      	b.n	8928 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    858c:	2324      	movs	r3, #36	; 0x24
    858e:	18fb      	adds	r3, r7, r3
    8590:	881b      	ldrh	r3, [r3, #0]
    8592:	2b7f      	cmp	r3, #127	; 0x7f
    8594:	d80b      	bhi.n	85ae <create_name+0xc6>
    8596:	2324      	movs	r3, #36	; 0x24
    8598:	18fb      	adds	r3, r7, r3
    859a:	881a      	ldrh	r2, [r3, #0]
    859c:	4bb1      	ldr	r3, [pc, #708]	; (8864 <create_name+0x37c>)
    859e:	0011      	movs	r1, r2
    85a0:	0018      	movs	r0, r3
    85a2:	4bb1      	ldr	r3, [pc, #708]	; (8868 <create_name+0x380>)
    85a4:	4798      	blx	r3
    85a6:	1e03      	subs	r3, r0, #0
    85a8:	d001      	beq.n	85ae <create_name+0xc6>
			return FR_INVALID_NAME;
    85aa:	2306      	movs	r3, #6
    85ac:	e1bc      	b.n	8928 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
    85ae:	697b      	ldr	r3, [r7, #20]
    85b0:	1c5a      	adds	r2, r3, #1
    85b2:	617a      	str	r2, [r7, #20]
    85b4:	005b      	lsls	r3, r3, #1
    85b6:	68fa      	ldr	r2, [r7, #12]
    85b8:	18d3      	adds	r3, r2, r3
    85ba:	2224      	movs	r2, #36	; 0x24
    85bc:	18ba      	adds	r2, r7, r2
    85be:	8812      	ldrh	r2, [r2, #0]
    85c0:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
    85c2:	e7ac      	b.n	851e <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
    85c4:	693a      	ldr	r2, [r7, #16]
    85c6:	69bb      	ldr	r3, [r7, #24]
    85c8:	18d2      	adds	r2, r2, r3
    85ca:	683b      	ldr	r3, [r7, #0]
    85cc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    85ce:	2324      	movs	r3, #36	; 0x24
    85d0:	18fb      	adds	r3, r7, r3
    85d2:	881b      	ldrh	r3, [r3, #0]
    85d4:	2b1f      	cmp	r3, #31
    85d6:	d801      	bhi.n	85dc <create_name+0xf4>
    85d8:	2204      	movs	r2, #4
    85da:	e000      	b.n	85de <create_name+0xf6>
    85dc:	2200      	movs	r2, #0
    85de:	2326      	movs	r3, #38	; 0x26
    85e0:	18fb      	adds	r3, r7, r3
    85e2:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
    85e4:	e017      	b.n	8616 <create_name+0x12e>
		w = lfn[di-1];
    85e6:	697b      	ldr	r3, [r7, #20]
    85e8:	4aa0      	ldr	r2, [pc, #640]	; (886c <create_name+0x384>)
    85ea:	4694      	mov	ip, r2
    85ec:	4463      	add	r3, ip
    85ee:	005b      	lsls	r3, r3, #1
    85f0:	68fa      	ldr	r2, [r7, #12]
    85f2:	18d2      	adds	r2, r2, r3
    85f4:	2324      	movs	r3, #36	; 0x24
    85f6:	18fb      	adds	r3, r7, r3
    85f8:	8812      	ldrh	r2, [r2, #0]
    85fa:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    85fc:	2324      	movs	r3, #36	; 0x24
    85fe:	18fb      	adds	r3, r7, r3
    8600:	881b      	ldrh	r3, [r3, #0]
    8602:	2b20      	cmp	r3, #32
    8604:	d004      	beq.n	8610 <create_name+0x128>
    8606:	2324      	movs	r3, #36	; 0x24
    8608:	18fb      	adds	r3, r7, r3
    860a:	881b      	ldrh	r3, [r3, #0]
    860c:	2b2e      	cmp	r3, #46	; 0x2e
    860e:	d106      	bne.n	861e <create_name+0x136>
		di--;
    8610:	697b      	ldr	r3, [r7, #20]
    8612:	3b01      	subs	r3, #1
    8614:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
    8616:	697b      	ldr	r3, [r7, #20]
    8618:	2b00      	cmp	r3, #0
    861a:	d1e4      	bne.n	85e6 <create_name+0xfe>
    861c:	e000      	b.n	8620 <create_name+0x138>
		if (w != ' ' && w != '.') break;
    861e:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    8620:	697b      	ldr	r3, [r7, #20]
    8622:	2b00      	cmp	r3, #0
    8624:	d101      	bne.n	862a <create_name+0x142>
    8626:	2306      	movs	r3, #6
    8628:	e17e      	b.n	8928 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
    862a:	697b      	ldr	r3, [r7, #20]
    862c:	005b      	lsls	r3, r3, #1
    862e:	68fa      	ldr	r2, [r7, #12]
    8630:	18d3      	adds	r3, r2, r3
    8632:	2200      	movs	r2, #0
    8634:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
    8636:	687b      	ldr	r3, [r7, #4]
    8638:	699b      	ldr	r3, [r3, #24]
    863a:	220b      	movs	r2, #11
    863c:	2120      	movs	r1, #32
    863e:	0018      	movs	r0, r3
    8640:	4b8b      	ldr	r3, [pc, #556]	; (8870 <create_name+0x388>)
    8642:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    8644:	2300      	movs	r3, #0
    8646:	61bb      	str	r3, [r7, #24]
    8648:	e002      	b.n	8650 <create_name+0x168>
    864a:	69bb      	ldr	r3, [r7, #24]
    864c:	3301      	adds	r3, #1
    864e:	61bb      	str	r3, [r7, #24]
    8650:	69bb      	ldr	r3, [r7, #24]
    8652:	005b      	lsls	r3, r3, #1
    8654:	68fa      	ldr	r2, [r7, #12]
    8656:	18d3      	adds	r3, r2, r3
    8658:	881b      	ldrh	r3, [r3, #0]
    865a:	2b20      	cmp	r3, #32
    865c:	d0f5      	beq.n	864a <create_name+0x162>
    865e:	69bb      	ldr	r3, [r7, #24]
    8660:	005b      	lsls	r3, r3, #1
    8662:	68fa      	ldr	r2, [r7, #12]
    8664:	18d3      	adds	r3, r2, r3
    8666:	881b      	ldrh	r3, [r3, #0]
    8668:	2b2e      	cmp	r3, #46	; 0x2e
    866a:	d0ee      	beq.n	864a <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
    866c:	69bb      	ldr	r3, [r7, #24]
    866e:	2b00      	cmp	r3, #0
    8670:	d00b      	beq.n	868a <create_name+0x1a2>
    8672:	2326      	movs	r3, #38	; 0x26
    8674:	18fb      	adds	r3, r7, r3
    8676:	2226      	movs	r2, #38	; 0x26
    8678:	18ba      	adds	r2, r7, r2
    867a:	7812      	ldrb	r2, [r2, #0]
    867c:	2103      	movs	r1, #3
    867e:	430a      	orrs	r2, r1
    8680:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    8682:	e002      	b.n	868a <create_name+0x1a2>
    8684:	697b      	ldr	r3, [r7, #20]
    8686:	3b01      	subs	r3, #1
    8688:	617b      	str	r3, [r7, #20]
    868a:	697b      	ldr	r3, [r7, #20]
    868c:	2b00      	cmp	r3, #0
    868e:	d009      	beq.n	86a4 <create_name+0x1bc>
    8690:	697b      	ldr	r3, [r7, #20]
    8692:	4a76      	ldr	r2, [pc, #472]	; (886c <create_name+0x384>)
    8694:	4694      	mov	ip, r2
    8696:	4463      	add	r3, ip
    8698:	005b      	lsls	r3, r3, #1
    869a:	68fa      	ldr	r2, [r7, #12]
    869c:	18d3      	adds	r3, r2, r3
    869e:	881b      	ldrh	r3, [r3, #0]
    86a0:	2b2e      	cmp	r3, #46	; 0x2e
    86a2:	d1ef      	bne.n	8684 <create_name+0x19c>

	b = i = 0; ni = 8;
    86a4:	2300      	movs	r3, #0
    86a6:	623b      	str	r3, [r7, #32]
    86a8:	2327      	movs	r3, #39	; 0x27
    86aa:	18fb      	adds	r3, r7, r3
    86ac:	2200      	movs	r2, #0
    86ae:	701a      	strb	r2, [r3, #0]
    86b0:	2308      	movs	r3, #8
    86b2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    86b4:	69bb      	ldr	r3, [r7, #24]
    86b6:	1c5a      	adds	r2, r3, #1
    86b8:	61ba      	str	r2, [r7, #24]
    86ba:	005b      	lsls	r3, r3, #1
    86bc:	68fa      	ldr	r2, [r7, #12]
    86be:	18d2      	adds	r2, r2, r3
    86c0:	2324      	movs	r3, #36	; 0x24
    86c2:	18fb      	adds	r3, r7, r3
    86c4:	8812      	ldrh	r2, [r2, #0]
    86c6:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
    86c8:	2324      	movs	r3, #36	; 0x24
    86ca:	18fb      	adds	r3, r7, r3
    86cc:	881b      	ldrh	r3, [r3, #0]
    86ce:	2b00      	cmp	r3, #0
    86d0:	d100      	bne.n	86d4 <create_name+0x1ec>
    86d2:	e0c3      	b.n	885c <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    86d4:	2324      	movs	r3, #36	; 0x24
    86d6:	18fb      	adds	r3, r7, r3
    86d8:	881b      	ldrh	r3, [r3, #0]
    86da:	2b20      	cmp	r3, #32
    86dc:	d008      	beq.n	86f0 <create_name+0x208>
    86de:	2324      	movs	r3, #36	; 0x24
    86e0:	18fb      	adds	r3, r7, r3
    86e2:	881b      	ldrh	r3, [r3, #0]
    86e4:	2b2e      	cmp	r3, #46	; 0x2e
    86e6:	d10c      	bne.n	8702 <create_name+0x21a>
    86e8:	69ba      	ldr	r2, [r7, #24]
    86ea:	697b      	ldr	r3, [r7, #20]
    86ec:	429a      	cmp	r2, r3
    86ee:	d008      	beq.n	8702 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
    86f0:	2326      	movs	r3, #38	; 0x26
    86f2:	18fb      	adds	r3, r7, r3
    86f4:	2226      	movs	r2, #38	; 0x26
    86f6:	18ba      	adds	r2, r7, r2
    86f8:	7812      	ldrb	r2, [r2, #0]
    86fa:	2103      	movs	r1, #3
    86fc:	430a      	orrs	r2, r1
    86fe:	701a      	strb	r2, [r3, #0]
    8700:	e0ab      	b.n	885a <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
    8702:	6a3a      	ldr	r2, [r7, #32]
    8704:	69fb      	ldr	r3, [r7, #28]
    8706:	429a      	cmp	r2, r3
    8708:	d203      	bcs.n	8712 <create_name+0x22a>
    870a:	69ba      	ldr	r2, [r7, #24]
    870c:	697b      	ldr	r3, [r7, #20]
    870e:	429a      	cmp	r2, r3
    8710:	d12a      	bne.n	8768 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
    8712:	69fb      	ldr	r3, [r7, #28]
    8714:	2b0b      	cmp	r3, #11
    8716:	d108      	bne.n	872a <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
    8718:	2326      	movs	r3, #38	; 0x26
    871a:	18fb      	adds	r3, r7, r3
    871c:	2226      	movs	r2, #38	; 0x26
    871e:	18ba      	adds	r2, r7, r2
    8720:	7812      	ldrb	r2, [r2, #0]
    8722:	2103      	movs	r1, #3
    8724:	430a      	orrs	r2, r1
    8726:	701a      	strb	r2, [r3, #0]
    8728:	e0a9      	b.n	887e <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    872a:	69ba      	ldr	r2, [r7, #24]
    872c:	697b      	ldr	r3, [r7, #20]
    872e:	429a      	cmp	r2, r3
    8730:	d007      	beq.n	8742 <create_name+0x25a>
    8732:	2326      	movs	r3, #38	; 0x26
    8734:	18fb      	adds	r3, r7, r3
    8736:	2226      	movs	r2, #38	; 0x26
    8738:	18ba      	adds	r2, r7, r2
    873a:	7812      	ldrb	r2, [r2, #0]
    873c:	2103      	movs	r1, #3
    873e:	430a      	orrs	r2, r1
    8740:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
    8742:	69ba      	ldr	r2, [r7, #24]
    8744:	697b      	ldr	r3, [r7, #20]
    8746:	429a      	cmp	r2, r3
    8748:	d900      	bls.n	874c <create_name+0x264>
    874a:	e097      	b.n	887c <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
    874c:	697b      	ldr	r3, [r7, #20]
    874e:	61bb      	str	r3, [r7, #24]
    8750:	2308      	movs	r3, #8
    8752:	623b      	str	r3, [r7, #32]
    8754:	230b      	movs	r3, #11
    8756:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
    8758:	2327      	movs	r3, #39	; 0x27
    875a:	18fb      	adds	r3, r7, r3
    875c:	2227      	movs	r2, #39	; 0x27
    875e:	18ba      	adds	r2, r7, r2
    8760:	7812      	ldrb	r2, [r2, #0]
    8762:	0092      	lsls	r2, r2, #2
    8764:	701a      	strb	r2, [r3, #0]
    8766:	e078      	b.n	885a <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
    8768:	2324      	movs	r3, #36	; 0x24
    876a:	18fb      	adds	r3, r7, r3
    876c:	881b      	ldrh	r3, [r3, #0]
    876e:	2b7f      	cmp	r3, #127	; 0x7f
    8770:	d920      	bls.n	87b4 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    8772:	2324      	movs	r3, #36	; 0x24
    8774:	18fc      	adds	r4, r7, r3
    8776:	2324      	movs	r3, #36	; 0x24
    8778:	18fb      	adds	r3, r7, r3
    877a:	881b      	ldrh	r3, [r3, #0]
    877c:	2100      	movs	r1, #0
    877e:	0018      	movs	r0, r3
    8780:	4b37      	ldr	r3, [pc, #220]	; (8860 <create_name+0x378>)
    8782:	4798      	blx	r3
    8784:	0003      	movs	r3, r0
    8786:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    8788:	2324      	movs	r3, #36	; 0x24
    878a:	18fb      	adds	r3, r7, r3
    878c:	881b      	ldrh	r3, [r3, #0]
    878e:	2b00      	cmp	r3, #0
    8790:	d008      	beq.n	87a4 <create_name+0x2bc>
    8792:	2324      	movs	r3, #36	; 0x24
    8794:	18fb      	adds	r3, r7, r3
    8796:	881b      	ldrh	r3, [r3, #0]
    8798:	3b80      	subs	r3, #128	; 0x80
    879a:	4a36      	ldr	r2, [pc, #216]	; (8874 <create_name+0x38c>)
    879c:	5cd2      	ldrb	r2, [r2, r3]
    879e:	2324      	movs	r3, #36	; 0x24
    87a0:	18fb      	adds	r3, r7, r3
    87a2:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    87a4:	2326      	movs	r3, #38	; 0x26
    87a6:	18fb      	adds	r3, r7, r3
    87a8:	2226      	movs	r2, #38	; 0x26
    87aa:	18ba      	adds	r2, r7, r2
    87ac:	7812      	ldrb	r2, [r2, #0]
    87ae:	2102      	movs	r1, #2
    87b0:	430a      	orrs	r2, r1
    87b2:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    87b4:	2324      	movs	r3, #36	; 0x24
    87b6:	18fb      	adds	r3, r7, r3
    87b8:	881b      	ldrh	r3, [r3, #0]
    87ba:	2b00      	cmp	r3, #0
    87bc:	d009      	beq.n	87d2 <create_name+0x2ea>
    87be:	2324      	movs	r3, #36	; 0x24
    87c0:	18fb      	adds	r3, r7, r3
    87c2:	881a      	ldrh	r2, [r3, #0]
    87c4:	4b2c      	ldr	r3, [pc, #176]	; (8878 <create_name+0x390>)
    87c6:	0011      	movs	r1, r2
    87c8:	0018      	movs	r0, r3
    87ca:	4b27      	ldr	r3, [pc, #156]	; (8868 <create_name+0x380>)
    87cc:	4798      	blx	r3
    87ce:	1e03      	subs	r3, r0, #0
    87d0:	d00c      	beq.n	87ec <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    87d2:	2324      	movs	r3, #36	; 0x24
    87d4:	18fb      	adds	r3, r7, r3
    87d6:	225f      	movs	r2, #95	; 0x5f
    87d8:	801a      	strh	r2, [r3, #0]
    87da:	2326      	movs	r3, #38	; 0x26
    87dc:	18fb      	adds	r3, r7, r3
    87de:	2226      	movs	r2, #38	; 0x26
    87e0:	18ba      	adds	r2, r7, r2
    87e2:	7812      	ldrb	r2, [r2, #0]
    87e4:	2103      	movs	r1, #3
    87e6:	430a      	orrs	r2, r1
    87e8:	701a      	strb	r2, [r3, #0]
    87ea:	e02b      	b.n	8844 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
    87ec:	2324      	movs	r3, #36	; 0x24
    87ee:	18fb      	adds	r3, r7, r3
    87f0:	881b      	ldrh	r3, [r3, #0]
    87f2:	2b40      	cmp	r3, #64	; 0x40
    87f4:	d90d      	bls.n	8812 <create_name+0x32a>
    87f6:	2324      	movs	r3, #36	; 0x24
    87f8:	18fb      	adds	r3, r7, r3
    87fa:	881b      	ldrh	r3, [r3, #0]
    87fc:	2b5a      	cmp	r3, #90	; 0x5a
    87fe:	d808      	bhi.n	8812 <create_name+0x32a>
					b |= 2;
    8800:	2327      	movs	r3, #39	; 0x27
    8802:	18fb      	adds	r3, r7, r3
    8804:	2227      	movs	r2, #39	; 0x27
    8806:	18ba      	adds	r2, r7, r2
    8808:	7812      	ldrb	r2, [r2, #0]
    880a:	2102      	movs	r1, #2
    880c:	430a      	orrs	r2, r1
    880e:	701a      	strb	r2, [r3, #0]
    8810:	e018      	b.n	8844 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
    8812:	2324      	movs	r3, #36	; 0x24
    8814:	18fb      	adds	r3, r7, r3
    8816:	881b      	ldrh	r3, [r3, #0]
    8818:	2b60      	cmp	r3, #96	; 0x60
    881a:	d913      	bls.n	8844 <create_name+0x35c>
    881c:	2324      	movs	r3, #36	; 0x24
    881e:	18fb      	adds	r3, r7, r3
    8820:	881b      	ldrh	r3, [r3, #0]
    8822:	2b7a      	cmp	r3, #122	; 0x7a
    8824:	d80e      	bhi.n	8844 <create_name+0x35c>
						b |= 1; w -= 0x20;
    8826:	2327      	movs	r3, #39	; 0x27
    8828:	18fb      	adds	r3, r7, r3
    882a:	2227      	movs	r2, #39	; 0x27
    882c:	18ba      	adds	r2, r7, r2
    882e:	7812      	ldrb	r2, [r2, #0]
    8830:	2101      	movs	r1, #1
    8832:	430a      	orrs	r2, r1
    8834:	701a      	strb	r2, [r3, #0]
    8836:	2324      	movs	r3, #36	; 0x24
    8838:	18fb      	adds	r3, r7, r3
    883a:	2224      	movs	r2, #36	; 0x24
    883c:	18ba      	adds	r2, r7, r2
    883e:	8812      	ldrh	r2, [r2, #0]
    8840:	3a20      	subs	r2, #32
    8842:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
    8844:	687b      	ldr	r3, [r7, #4]
    8846:	699a      	ldr	r2, [r3, #24]
    8848:	6a3b      	ldr	r3, [r7, #32]
    884a:	1c59      	adds	r1, r3, #1
    884c:	6239      	str	r1, [r7, #32]
    884e:	18d3      	adds	r3, r2, r3
    8850:	2224      	movs	r2, #36	; 0x24
    8852:	18ba      	adds	r2, r7, r2
    8854:	8812      	ldrh	r2, [r2, #0]
    8856:	b2d2      	uxtb	r2, r2
    8858:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
    885a:	e72b      	b.n	86b4 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
    885c:	46c0      	nop			; (mov r8, r8)
    885e:	e00e      	b.n	887e <create_name+0x396>
    8860:	00009cb5 	.word	0x00009cb5
    8864:	0000af94 	.word	0x0000af94
    8868:	0000708b 	.word	0x0000708b
    886c:	7fffffff 	.word	0x7fffffff
    8870:	00007011 	.word	0x00007011
    8874:	0000afdc 	.word	0x0000afdc
    8878:	0000afa0 	.word	0x0000afa0
			if (si > di) break;			/* No extension */
    887c:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    887e:	687b      	ldr	r3, [r7, #4]
    8880:	699b      	ldr	r3, [r3, #24]
    8882:	781b      	ldrb	r3, [r3, #0]
    8884:	2be5      	cmp	r3, #229	; 0xe5
    8886:	d103      	bne.n	8890 <create_name+0x3a8>
    8888:	687b      	ldr	r3, [r7, #4]
    888a:	699b      	ldr	r3, [r3, #24]
    888c:	2205      	movs	r2, #5
    888e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
    8890:	69fb      	ldr	r3, [r7, #28]
    8892:	2b08      	cmp	r3, #8
    8894:	d106      	bne.n	88a4 <create_name+0x3bc>
    8896:	2327      	movs	r3, #39	; 0x27
    8898:	18fb      	adds	r3, r7, r3
    889a:	2227      	movs	r2, #39	; 0x27
    889c:	18ba      	adds	r2, r7, r2
    889e:	7812      	ldrb	r2, [r2, #0]
    88a0:	0092      	lsls	r2, r2, #2
    88a2:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    88a4:	2327      	movs	r3, #39	; 0x27
    88a6:	18fb      	adds	r3, r7, r3
    88a8:	781b      	ldrb	r3, [r3, #0]
    88aa:	220c      	movs	r2, #12
    88ac:	4013      	ands	r3, r2
    88ae:	2b0c      	cmp	r3, #12
    88b0:	d006      	beq.n	88c0 <create_name+0x3d8>
    88b2:	2327      	movs	r3, #39	; 0x27
    88b4:	18fb      	adds	r3, r7, r3
    88b6:	781b      	ldrb	r3, [r3, #0]
    88b8:	2203      	movs	r2, #3
    88ba:	4013      	ands	r3, r2
    88bc:	2b03      	cmp	r3, #3
    88be:	d107      	bne.n	88d0 <create_name+0x3e8>
		cf |= NS_LFN;
    88c0:	2326      	movs	r3, #38	; 0x26
    88c2:	18fb      	adds	r3, r7, r3
    88c4:	2226      	movs	r2, #38	; 0x26
    88c6:	18ba      	adds	r2, r7, r2
    88c8:	7812      	ldrb	r2, [r2, #0]
    88ca:	2102      	movs	r1, #2
    88cc:	430a      	orrs	r2, r1
    88ce:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    88d0:	2326      	movs	r3, #38	; 0x26
    88d2:	18fb      	adds	r3, r7, r3
    88d4:	781b      	ldrb	r3, [r3, #0]
    88d6:	2202      	movs	r2, #2
    88d8:	4013      	ands	r3, r2
    88da:	d11d      	bne.n	8918 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    88dc:	2327      	movs	r3, #39	; 0x27
    88de:	18fb      	adds	r3, r7, r3
    88e0:	781b      	ldrb	r3, [r3, #0]
    88e2:	2203      	movs	r2, #3
    88e4:	4013      	ands	r3, r2
    88e6:	2b01      	cmp	r3, #1
    88e8:	d107      	bne.n	88fa <create_name+0x412>
    88ea:	2326      	movs	r3, #38	; 0x26
    88ec:	18fb      	adds	r3, r7, r3
    88ee:	2226      	movs	r2, #38	; 0x26
    88f0:	18ba      	adds	r2, r7, r2
    88f2:	7812      	ldrb	r2, [r2, #0]
    88f4:	2110      	movs	r1, #16
    88f6:	430a      	orrs	r2, r1
    88f8:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    88fa:	2327      	movs	r3, #39	; 0x27
    88fc:	18fb      	adds	r3, r7, r3
    88fe:	781b      	ldrb	r3, [r3, #0]
    8900:	220c      	movs	r2, #12
    8902:	4013      	ands	r3, r2
    8904:	2b04      	cmp	r3, #4
    8906:	d107      	bne.n	8918 <create_name+0x430>
    8908:	2326      	movs	r3, #38	; 0x26
    890a:	18fb      	adds	r3, r7, r3
    890c:	2226      	movs	r2, #38	; 0x26
    890e:	18ba      	adds	r2, r7, r2
    8910:	7812      	ldrb	r2, [r2, #0]
    8912:	2108      	movs	r1, #8
    8914:	430a      	orrs	r2, r1
    8916:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
    8918:	687b      	ldr	r3, [r7, #4]
    891a:	699b      	ldr	r3, [r3, #24]
    891c:	330b      	adds	r3, #11
    891e:	2226      	movs	r2, #38	; 0x26
    8920:	18ba      	adds	r2, r7, r2
    8922:	7812      	ldrb	r2, [r2, #0]
    8924:	701a      	strb	r2, [r3, #0]

	return FR_OK;
    8926:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
    8928:	0018      	movs	r0, r3
    892a:	46bd      	mov	sp, r7
    892c:	b00b      	add	sp, #44	; 0x2c
    892e:	bd90      	pop	{r4, r7, pc}

00008930 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    8930:	b590      	push	{r4, r7, lr}
    8932:	b085      	sub	sp, #20
    8934:	af00      	add	r7, sp, #0
    8936:	6078      	str	r0, [r7, #4]
    8938:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    893a:	683b      	ldr	r3, [r7, #0]
    893c:	781b      	ldrb	r3, [r3, #0]
    893e:	2b2f      	cmp	r3, #47	; 0x2f
    8940:	d003      	beq.n	894a <follow_path+0x1a>
    8942:	683b      	ldr	r3, [r7, #0]
    8944:	781b      	ldrb	r3, [r3, #0]
    8946:	2b5c      	cmp	r3, #92	; 0x5c
    8948:	d102      	bne.n	8950 <follow_path+0x20>
		path++;
    894a:	683b      	ldr	r3, [r7, #0]
    894c:	3301      	adds	r3, #1
    894e:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
    8950:	687b      	ldr	r3, [r7, #4]
    8952:	2200      	movs	r2, #0
    8954:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    8956:	683b      	ldr	r3, [r7, #0]
    8958:	781b      	ldrb	r3, [r3, #0]
    895a:	2b1f      	cmp	r3, #31
    895c:	d80c      	bhi.n	8978 <follow_path+0x48>
		res = dir_sdi(dj, 0);
    895e:	230f      	movs	r3, #15
    8960:	18fc      	adds	r4, r7, r3
    8962:	687b      	ldr	r3, [r7, #4]
    8964:	2100      	movs	r1, #0
    8966:	0018      	movs	r0, r3
    8968:	4b3c      	ldr	r3, [pc, #240]	; (8a5c <follow_path+0x12c>)
    896a:	4798      	blx	r3
    896c:	0003      	movs	r3, r0
    896e:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
    8970:	687b      	ldr	r3, [r7, #4]
    8972:	2200      	movs	r2, #0
    8974:	615a      	str	r2, [r3, #20]
    8976:	e06a      	b.n	8a4e <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    8978:	230f      	movs	r3, #15
    897a:	18fc      	adds	r4, r7, r3
    897c:	003a      	movs	r2, r7
    897e:	687b      	ldr	r3, [r7, #4]
    8980:	0011      	movs	r1, r2
    8982:	0018      	movs	r0, r3
    8984:	4b36      	ldr	r3, [pc, #216]	; (8a60 <follow_path+0x130>)
    8986:	4798      	blx	r3
    8988:	0003      	movs	r3, r0
    898a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    898c:	230f      	movs	r3, #15
    898e:	18fb      	adds	r3, r7, r3
    8990:	781b      	ldrb	r3, [r3, #0]
    8992:	2b00      	cmp	r3, #0
    8994:	d154      	bne.n	8a40 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
    8996:	230f      	movs	r3, #15
    8998:	18fc      	adds	r4, r7, r3
    899a:	687b      	ldr	r3, [r7, #4]
    899c:	0018      	movs	r0, r3
    899e:	4b31      	ldr	r3, [pc, #196]	; (8a64 <follow_path+0x134>)
    89a0:	4798      	blx	r3
    89a2:	0003      	movs	r3, r0
    89a4:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
    89a6:	687b      	ldr	r3, [r7, #4]
    89a8:	699a      	ldr	r2, [r3, #24]
    89aa:	230e      	movs	r3, #14
    89ac:	18fb      	adds	r3, r7, r3
    89ae:	7ad2      	ldrb	r2, [r2, #11]
    89b0:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
    89b2:	230f      	movs	r3, #15
    89b4:	18fb      	adds	r3, r7, r3
    89b6:	781b      	ldrb	r3, [r3, #0]
    89b8:	2b00      	cmp	r3, #0
    89ba:	d00f      	beq.n	89dc <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    89bc:	230f      	movs	r3, #15
    89be:	18fb      	adds	r3, r7, r3
    89c0:	781b      	ldrb	r3, [r3, #0]
    89c2:	2b04      	cmp	r3, #4
    89c4:	d13e      	bne.n	8a44 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    89c6:	230e      	movs	r3, #14
    89c8:	18fb      	adds	r3, r7, r3
    89ca:	781b      	ldrb	r3, [r3, #0]
    89cc:	2204      	movs	r2, #4
    89ce:	4013      	ands	r3, r2
    89d0:	d13a      	bne.n	8a48 <follow_path+0x118>
    89d2:	230f      	movs	r3, #15
    89d4:	18fb      	adds	r3, r7, r3
    89d6:	2205      	movs	r2, #5
    89d8:	701a      	strb	r2, [r3, #0]
				}
				break;
    89da:	e035      	b.n	8a48 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    89dc:	230e      	movs	r3, #14
    89de:	18fb      	adds	r3, r7, r3
    89e0:	781b      	ldrb	r3, [r3, #0]
    89e2:	2204      	movs	r2, #4
    89e4:	4013      	ands	r3, r2
    89e6:	d131      	bne.n	8a4c <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    89e8:	687b      	ldr	r3, [r7, #4]
    89ea:	695b      	ldr	r3, [r3, #20]
    89ec:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    89ee:	68bb      	ldr	r3, [r7, #8]
    89f0:	330b      	adds	r3, #11
    89f2:	781b      	ldrb	r3, [r3, #0]
    89f4:	001a      	movs	r2, r3
    89f6:	2310      	movs	r3, #16
    89f8:	4013      	ands	r3, r2
    89fa:	d104      	bne.n	8a06 <follow_path+0xd6>
				res = FR_NO_PATH; break;
    89fc:	230f      	movs	r3, #15
    89fe:	18fb      	adds	r3, r7, r3
    8a00:	2205      	movs	r2, #5
    8a02:	701a      	strb	r2, [r3, #0]
    8a04:	e023      	b.n	8a4e <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
    8a06:	68bb      	ldr	r3, [r7, #8]
    8a08:	3315      	adds	r3, #21
    8a0a:	781b      	ldrb	r3, [r3, #0]
    8a0c:	021b      	lsls	r3, r3, #8
    8a0e:	b21a      	sxth	r2, r3
    8a10:	68bb      	ldr	r3, [r7, #8]
    8a12:	3314      	adds	r3, #20
    8a14:	781b      	ldrb	r3, [r3, #0]
    8a16:	b21b      	sxth	r3, r3
    8a18:	4313      	orrs	r3, r2
    8a1a:	b21b      	sxth	r3, r3
    8a1c:	b29b      	uxth	r3, r3
    8a1e:	041b      	lsls	r3, r3, #16
    8a20:	68ba      	ldr	r2, [r7, #8]
    8a22:	321b      	adds	r2, #27
    8a24:	7812      	ldrb	r2, [r2, #0]
    8a26:	0212      	lsls	r2, r2, #8
    8a28:	b211      	sxth	r1, r2
    8a2a:	68ba      	ldr	r2, [r7, #8]
    8a2c:	321a      	adds	r2, #26
    8a2e:	7812      	ldrb	r2, [r2, #0]
    8a30:	b212      	sxth	r2, r2
    8a32:	430a      	orrs	r2, r1
    8a34:	b212      	sxth	r2, r2
    8a36:	b292      	uxth	r2, r2
    8a38:	431a      	orrs	r2, r3
    8a3a:	687b      	ldr	r3, [r7, #4]
    8a3c:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
    8a3e:	e79b      	b.n	8978 <follow_path+0x48>
			if (res != FR_OK) break;
    8a40:	46c0      	nop			; (mov r8, r8)
    8a42:	e004      	b.n	8a4e <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    8a44:	46c0      	nop			; (mov r8, r8)
    8a46:	e002      	b.n	8a4e <follow_path+0x11e>
				break;
    8a48:	46c0      	nop			; (mov r8, r8)
    8a4a:	e000      	b.n	8a4e <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    8a4c:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    8a4e:	230f      	movs	r3, #15
    8a50:	18fb      	adds	r3, r7, r3
    8a52:	781b      	ldrb	r3, [r3, #0]
}
    8a54:	0018      	movs	r0, r3
    8a56:	46bd      	mov	sp, r7
    8a58:	b005      	add	sp, #20
    8a5a:	bd90      	pop	{r4, r7, pc}
    8a5c:	00007901 	.word	0x00007901
    8a60:	000084e9 	.word	0x000084e9
    8a64:	00007f85 	.word	0x00007f85

00008a68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    8a68:	b590      	push	{r4, r7, lr}
    8a6a:	b083      	sub	sp, #12
    8a6c:	af00      	add	r7, sp, #0
    8a6e:	6078      	str	r0, [r7, #4]
    8a70:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    8a72:	687b      	ldr	r3, [r7, #4]
    8a74:	7858      	ldrb	r0, [r3, #1]
    8a76:	687b      	ldr	r3, [r7, #4]
    8a78:	3330      	adds	r3, #48	; 0x30
    8a7a:	0019      	movs	r1, r3
    8a7c:	683a      	ldr	r2, [r7, #0]
    8a7e:	2301      	movs	r3, #1
    8a80:	4c2a      	ldr	r4, [pc, #168]	; (8b2c <check_fs+0xc4>)
    8a82:	47a0      	blx	r4
    8a84:	1e03      	subs	r3, r0, #0
    8a86:	d001      	beq.n	8a8c <check_fs+0x24>
		return 3;
    8a88:	2303      	movs	r3, #3
    8a8a:	e04b      	b.n	8b24 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    8a8c:	687b      	ldr	r3, [r7, #4]
    8a8e:	4a28      	ldr	r2, [pc, #160]	; (8b30 <check_fs+0xc8>)
    8a90:	4694      	mov	ip, r2
    8a92:	4463      	add	r3, ip
    8a94:	3301      	adds	r3, #1
    8a96:	781b      	ldrb	r3, [r3, #0]
    8a98:	021b      	lsls	r3, r3, #8
    8a9a:	b21a      	sxth	r2, r3
    8a9c:	687b      	ldr	r3, [r7, #4]
    8a9e:	4924      	ldr	r1, [pc, #144]	; (8b30 <check_fs+0xc8>)
    8aa0:	5c5b      	ldrb	r3, [r3, r1]
    8aa2:	b21b      	sxth	r3, r3
    8aa4:	4313      	orrs	r3, r2
    8aa6:	b21b      	sxth	r3, r3
    8aa8:	4a22      	ldr	r2, [pc, #136]	; (8b34 <check_fs+0xcc>)
    8aaa:	4293      	cmp	r3, r2
    8aac:	d001      	beq.n	8ab2 <check_fs+0x4a>
		return 2;
    8aae:	2302      	movs	r3, #2
    8ab0:	e038      	b.n	8b24 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    8ab2:	687b      	ldr	r3, [r7, #4]
    8ab4:	3366      	adds	r3, #102	; 0x66
    8ab6:	3303      	adds	r3, #3
    8ab8:	781b      	ldrb	r3, [r3, #0]
    8aba:	061a      	lsls	r2, r3, #24
    8abc:	687b      	ldr	r3, [r7, #4]
    8abe:	3366      	adds	r3, #102	; 0x66
    8ac0:	3302      	adds	r3, #2
    8ac2:	781b      	ldrb	r3, [r3, #0]
    8ac4:	041b      	lsls	r3, r3, #16
    8ac6:	4313      	orrs	r3, r2
    8ac8:	687a      	ldr	r2, [r7, #4]
    8aca:	3266      	adds	r2, #102	; 0x66
    8acc:	3201      	adds	r2, #1
    8ace:	7812      	ldrb	r2, [r2, #0]
    8ad0:	0212      	lsls	r2, r2, #8
    8ad2:	4313      	orrs	r3, r2
    8ad4:	687a      	ldr	r2, [r7, #4]
    8ad6:	2166      	movs	r1, #102	; 0x66
    8ad8:	5c52      	ldrb	r2, [r2, r1]
    8ada:	4313      	orrs	r3, r2
    8adc:	021b      	lsls	r3, r3, #8
    8ade:	0a1b      	lsrs	r3, r3, #8
    8ae0:	4a15      	ldr	r2, [pc, #84]	; (8b38 <check_fs+0xd0>)
    8ae2:	4293      	cmp	r3, r2
    8ae4:	d101      	bne.n	8aea <check_fs+0x82>
		return 0;
    8ae6:	2300      	movs	r3, #0
    8ae8:	e01c      	b.n	8b24 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    8aea:	687b      	ldr	r3, [r7, #4]
    8aec:	3382      	adds	r3, #130	; 0x82
    8aee:	3303      	adds	r3, #3
    8af0:	781b      	ldrb	r3, [r3, #0]
    8af2:	061a      	lsls	r2, r3, #24
    8af4:	687b      	ldr	r3, [r7, #4]
    8af6:	3382      	adds	r3, #130	; 0x82
    8af8:	3302      	adds	r3, #2
    8afa:	781b      	ldrb	r3, [r3, #0]
    8afc:	041b      	lsls	r3, r3, #16
    8afe:	4313      	orrs	r3, r2
    8b00:	687a      	ldr	r2, [r7, #4]
    8b02:	3282      	adds	r2, #130	; 0x82
    8b04:	3201      	adds	r2, #1
    8b06:	7812      	ldrb	r2, [r2, #0]
    8b08:	0212      	lsls	r2, r2, #8
    8b0a:	4313      	orrs	r3, r2
    8b0c:	687a      	ldr	r2, [r7, #4]
    8b0e:	2182      	movs	r1, #130	; 0x82
    8b10:	5c52      	ldrb	r2, [r2, r1]
    8b12:	4313      	orrs	r3, r2
    8b14:	021b      	lsls	r3, r3, #8
    8b16:	0a1b      	lsrs	r3, r3, #8
    8b18:	4a07      	ldr	r2, [pc, #28]	; (8b38 <check_fs+0xd0>)
    8b1a:	4293      	cmp	r3, r2
    8b1c:	d101      	bne.n	8b22 <check_fs+0xba>
		return 0;
    8b1e:	2300      	movs	r3, #0
    8b20:	e000      	b.n	8b24 <check_fs+0xbc>

	return 1;
    8b22:	2301      	movs	r3, #1
}
    8b24:	0018      	movs	r0, r3
    8b26:	46bd      	mov	sp, r7
    8b28:	b003      	add	sp, #12
    8b2a:	bd90      	pop	{r4, r7, pc}
    8b2c:	00006cd1 	.word	0x00006cd1
    8b30:	0000022e 	.word	0x0000022e
    8b34:	ffffaa55 	.word	0xffffaa55
    8b38:	00544146 	.word	0x00544146

00008b3c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    8b3c:	b590      	push	{r4, r7, lr}
    8b3e:	b093      	sub	sp, #76	; 0x4c
    8b40:	af00      	add	r7, sp, #0
    8b42:	60f8      	str	r0, [r7, #12]
    8b44:	60b9      	str	r1, [r7, #8]
    8b46:	1dfb      	adds	r3, r7, #7
    8b48:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    8b4a:	68fb      	ldr	r3, [r7, #12]
    8b4c:	681b      	ldr	r3, [r3, #0]
    8b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    8b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8b52:	781b      	ldrb	r3, [r3, #0]
    8b54:	3b30      	subs	r3, #48	; 0x30
    8b56:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    8b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8b5a:	2b09      	cmp	r3, #9
    8b5c:	d80b      	bhi.n	8b76 <chk_mounted+0x3a>
    8b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8b60:	3301      	adds	r3, #1
    8b62:	781b      	ldrb	r3, [r3, #0]
    8b64:	2b3a      	cmp	r3, #58	; 0x3a
    8b66:	d106      	bne.n	8b76 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
    8b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8b6a:	3302      	adds	r3, #2
    8b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    8b6e:	68fb      	ldr	r3, [r7, #12]
    8b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8b72:	601a      	str	r2, [r3, #0]
    8b74:	e001      	b.n	8b7a <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    8b76:	2300      	movs	r3, #0
    8b78:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    8b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8b7c:	2b00      	cmp	r3, #0
    8b7e:	d001      	beq.n	8b84 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
    8b80:	230b      	movs	r3, #11
    8b82:	e2af      	b.n	90e4 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    8b84:	4bc5      	ldr	r3, [pc, #788]	; (8e9c <chk_mounted+0x360>)
    8b86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    8b88:	0092      	lsls	r2, r2, #2
    8b8a:	58d3      	ldr	r3, [r2, r3]
    8b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    8b8e:	68bb      	ldr	r3, [r7, #8]
    8b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8b92:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    8b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8b96:	2b00      	cmp	r3, #0
    8b98:	d101      	bne.n	8b9e <chk_mounted+0x62>
    8b9a:	230c      	movs	r3, #12
    8b9c:	e2a2      	b.n	90e4 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    8b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8ba0:	781b      	ldrb	r3, [r3, #0]
    8ba2:	2b00      	cmp	r3, #0
    8ba4:	d01c      	beq.n	8be0 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
    8ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8ba8:	785b      	ldrb	r3, [r3, #1]
    8baa:	2227      	movs	r2, #39	; 0x27
    8bac:	18bc      	adds	r4, r7, r2
    8bae:	0018      	movs	r0, r3
    8bb0:	4bbb      	ldr	r3, [pc, #748]	; (8ea0 <chk_mounted+0x364>)
    8bb2:	4798      	blx	r3
    8bb4:	0003      	movs	r3, r0
    8bb6:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    8bb8:	2327      	movs	r3, #39	; 0x27
    8bba:	18fb      	adds	r3, r7, r3
    8bbc:	781b      	ldrb	r3, [r3, #0]
    8bbe:	2201      	movs	r2, #1
    8bc0:	4013      	ands	r3, r2
    8bc2:	d10d      	bne.n	8be0 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    8bc4:	1dfb      	adds	r3, r7, #7
    8bc6:	781b      	ldrb	r3, [r3, #0]
    8bc8:	2b00      	cmp	r3, #0
    8bca:	d007      	beq.n	8bdc <chk_mounted+0xa0>
    8bcc:	2327      	movs	r3, #39	; 0x27
    8bce:	18fb      	adds	r3, r7, r3
    8bd0:	781b      	ldrb	r3, [r3, #0]
    8bd2:	2204      	movs	r2, #4
    8bd4:	4013      	ands	r3, r2
    8bd6:	d001      	beq.n	8bdc <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
    8bd8:	230a      	movs	r3, #10
    8bda:	e283      	b.n	90e4 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
    8bdc:	2300      	movs	r3, #0
    8bde:	e281      	b.n	90e4 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    8be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8be2:	2200      	movs	r2, #0
    8be4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    8be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8be8:	b2da      	uxtb	r2, r3
    8bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8bec:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    8bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8bf0:	785b      	ldrb	r3, [r3, #1]
    8bf2:	2227      	movs	r2, #39	; 0x27
    8bf4:	18bc      	adds	r4, r7, r2
    8bf6:	0018      	movs	r0, r3
    8bf8:	4baa      	ldr	r3, [pc, #680]	; (8ea4 <chk_mounted+0x368>)
    8bfa:	4798      	blx	r3
    8bfc:	0003      	movs	r3, r0
    8bfe:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    8c00:	2327      	movs	r3, #39	; 0x27
    8c02:	18fb      	adds	r3, r7, r3
    8c04:	781b      	ldrb	r3, [r3, #0]
    8c06:	2201      	movs	r2, #1
    8c08:	4013      	ands	r3, r2
    8c0a:	d001      	beq.n	8c10 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    8c0c:	2303      	movs	r3, #3
    8c0e:	e269      	b.n	90e4 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    8c10:	1dfb      	adds	r3, r7, #7
    8c12:	781b      	ldrb	r3, [r3, #0]
    8c14:	2b00      	cmp	r3, #0
    8c16:	d007      	beq.n	8c28 <chk_mounted+0xec>
    8c18:	2327      	movs	r3, #39	; 0x27
    8c1a:	18fb      	adds	r3, r7, r3
    8c1c:	781b      	ldrb	r3, [r3, #0]
    8c1e:	2204      	movs	r2, #4
    8c20:	4013      	ands	r3, r2
    8c22:	d001      	beq.n	8c28 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
    8c24:	230a      	movs	r3, #10
    8c26:	e25d      	b.n	90e4 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    8c28:	2300      	movs	r3, #0
    8c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    8c2c:	2347      	movs	r3, #71	; 0x47
    8c2e:	18fc      	adds	r4, r7, r3
    8c30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8c34:	0011      	movs	r1, r2
    8c36:	0018      	movs	r0, r3
    8c38:	4b9b      	ldr	r3, [pc, #620]	; (8ea8 <chk_mounted+0x36c>)
    8c3a:	4798      	blx	r3
    8c3c:	0003      	movs	r3, r0
    8c3e:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    8c40:	2347      	movs	r3, #71	; 0x47
    8c42:	18fb      	adds	r3, r7, r3
    8c44:	781b      	ldrb	r3, [r3, #0]
    8c46:	2b01      	cmp	r3, #1
    8c48:	d13b      	bne.n	8cc2 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    8c4a:	2346      	movs	r3, #70	; 0x46
    8c4c:	18fb      	adds	r3, r7, r3
    8c4e:	2200      	movs	r2, #0
    8c50:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
    8c52:	2346      	movs	r3, #70	; 0x46
    8c54:	18fb      	adds	r3, r7, r3
    8c56:	781b      	ldrb	r3, [r3, #0]
    8c58:	2b00      	cmp	r3, #0
    8c5a:	d006      	beq.n	8c6a <chk_mounted+0x12e>
    8c5c:	2346      	movs	r3, #70	; 0x46
    8c5e:	18fb      	adds	r3, r7, r3
    8c60:	781a      	ldrb	r2, [r3, #0]
    8c62:	2346      	movs	r3, #70	; 0x46
    8c64:	18fb      	adds	r3, r7, r3
    8c66:	3a01      	subs	r2, #1
    8c68:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    8c6a:	2346      	movs	r3, #70	; 0x46
    8c6c:	18fb      	adds	r3, r7, r3
    8c6e:	781b      	ldrb	r3, [r3, #0]
    8c70:	011b      	lsls	r3, r3, #4
    8c72:	33bf      	adds	r3, #191	; 0xbf
    8c74:	33ff      	adds	r3, #255	; 0xff
    8c76:	3330      	adds	r3, #48	; 0x30
    8c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8c7a:	18d3      	adds	r3, r2, r3
    8c7c:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
    8c7e:	6a3b      	ldr	r3, [r7, #32]
    8c80:	3304      	adds	r3, #4
    8c82:	781b      	ldrb	r3, [r3, #0]
    8c84:	2b00      	cmp	r3, #0
    8c86:	d01c      	beq.n	8cc2 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    8c88:	6a3b      	ldr	r3, [r7, #32]
    8c8a:	330b      	adds	r3, #11
    8c8c:	781b      	ldrb	r3, [r3, #0]
    8c8e:	061a      	lsls	r2, r3, #24
    8c90:	6a3b      	ldr	r3, [r7, #32]
    8c92:	330a      	adds	r3, #10
    8c94:	781b      	ldrb	r3, [r3, #0]
    8c96:	041b      	lsls	r3, r3, #16
    8c98:	4313      	orrs	r3, r2
    8c9a:	6a3a      	ldr	r2, [r7, #32]
    8c9c:	3209      	adds	r2, #9
    8c9e:	7812      	ldrb	r2, [r2, #0]
    8ca0:	0212      	lsls	r2, r2, #8
    8ca2:	4313      	orrs	r3, r2
    8ca4:	6a3a      	ldr	r2, [r7, #32]
    8ca6:	3208      	adds	r2, #8
    8ca8:	7812      	ldrb	r2, [r2, #0]
    8caa:	4313      	orrs	r3, r2
    8cac:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
    8cae:	2347      	movs	r3, #71	; 0x47
    8cb0:	18fc      	adds	r4, r7, r3
    8cb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8cb6:	0011      	movs	r1, r2
    8cb8:	0018      	movs	r0, r3
    8cba:	4b7b      	ldr	r3, [pc, #492]	; (8ea8 <chk_mounted+0x36c>)
    8cbc:	4798      	blx	r3
    8cbe:	0003      	movs	r3, r0
    8cc0:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    8cc2:	2347      	movs	r3, #71	; 0x47
    8cc4:	18fb      	adds	r3, r7, r3
    8cc6:	781b      	ldrb	r3, [r3, #0]
    8cc8:	2b03      	cmp	r3, #3
    8cca:	d101      	bne.n	8cd0 <chk_mounted+0x194>
    8ccc:	2301      	movs	r3, #1
    8cce:	e209      	b.n	90e4 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    8cd0:	2347      	movs	r3, #71	; 0x47
    8cd2:	18fb      	adds	r3, r7, r3
    8cd4:	781b      	ldrb	r3, [r3, #0]
    8cd6:	2b00      	cmp	r3, #0
    8cd8:	d001      	beq.n	8cde <chk_mounted+0x1a2>
    8cda:	230d      	movs	r3, #13
    8cdc:	e202      	b.n	90e4 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    8cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8ce0:	223c      	movs	r2, #60	; 0x3c
    8ce2:	5c9b      	ldrb	r3, [r3, r2]
    8ce4:	021b      	lsls	r3, r3, #8
    8ce6:	b21a      	sxth	r2, r3
    8ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8cea:	213b      	movs	r1, #59	; 0x3b
    8cec:	5c5b      	ldrb	r3, [r3, r1]
    8cee:	b21b      	sxth	r3, r3
    8cf0:	4313      	orrs	r3, r2
    8cf2:	b21a      	sxth	r2, r3
    8cf4:	2380      	movs	r3, #128	; 0x80
    8cf6:	009b      	lsls	r3, r3, #2
    8cf8:	429a      	cmp	r2, r3
    8cfa:	d001      	beq.n	8d00 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
    8cfc:	230d      	movs	r3, #13
    8cfe:	e1f1      	b.n	90e4 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    8d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d02:	2247      	movs	r2, #71	; 0x47
    8d04:	5c9b      	ldrb	r3, [r3, r2]
    8d06:	021b      	lsls	r3, r3, #8
    8d08:	b21a      	sxth	r2, r3
    8d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d0c:	2146      	movs	r1, #70	; 0x46
    8d0e:	5c5b      	ldrb	r3, [r3, r1]
    8d10:	b21b      	sxth	r3, r3
    8d12:	4313      	orrs	r3, r2
    8d14:	b21b      	sxth	r3, r3
    8d16:	b29b      	uxth	r3, r3
    8d18:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    8d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8d1c:	2b00      	cmp	r3, #0
    8d1e:	d112      	bne.n	8d46 <chk_mounted+0x20a>
    8d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d22:	2257      	movs	r2, #87	; 0x57
    8d24:	5c9b      	ldrb	r3, [r3, r2]
    8d26:	061a      	lsls	r2, r3, #24
    8d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d2a:	2156      	movs	r1, #86	; 0x56
    8d2c:	5c5b      	ldrb	r3, [r3, r1]
    8d2e:	041b      	lsls	r3, r3, #16
    8d30:	4313      	orrs	r3, r2
    8d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8d34:	2155      	movs	r1, #85	; 0x55
    8d36:	5c52      	ldrb	r2, [r2, r1]
    8d38:	0212      	lsls	r2, r2, #8
    8d3a:	4313      	orrs	r3, r2
    8d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8d3e:	2154      	movs	r1, #84	; 0x54
    8d40:	5c52      	ldrb	r2, [r2, r1]
    8d42:	4313      	orrs	r3, r2
    8d44:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
    8d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
    8d4a:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    8d4c:	231f      	movs	r3, #31
    8d4e:	18fb      	adds	r3, r7, r3
    8d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8d52:	2140      	movs	r1, #64	; 0x40
    8d54:	5c52      	ldrb	r2, [r2, r1]
    8d56:	701a      	strb	r2, [r3, #0]
    8d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d5a:	221f      	movs	r2, #31
    8d5c:	18ba      	adds	r2, r7, r2
    8d5e:	7812      	ldrb	r2, [r2, #0]
    8d60:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    8d62:	231f      	movs	r3, #31
    8d64:	18fb      	adds	r3, r7, r3
    8d66:	781b      	ldrb	r3, [r3, #0]
    8d68:	2b01      	cmp	r3, #1
    8d6a:	d006      	beq.n	8d7a <chk_mounted+0x23e>
    8d6c:	231f      	movs	r3, #31
    8d6e:	18fb      	adds	r3, r7, r3
    8d70:	781b      	ldrb	r3, [r3, #0]
    8d72:	2b02      	cmp	r3, #2
    8d74:	d001      	beq.n	8d7a <chk_mounted+0x23e>
    8d76:	230d      	movs	r3, #13
    8d78:	e1b4      	b.n	90e4 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
    8d7a:	231f      	movs	r3, #31
    8d7c:	18fb      	adds	r3, r7, r3
    8d7e:	781a      	ldrb	r2, [r3, #0]
    8d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8d82:	4353      	muls	r3, r2
    8d84:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    8d86:	231f      	movs	r3, #31
    8d88:	18fb      	adds	r3, r7, r3
    8d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8d8c:	213d      	movs	r1, #61	; 0x3d
    8d8e:	5c52      	ldrb	r2, [r2, r1]
    8d90:	701a      	strb	r2, [r3, #0]
    8d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d94:	221f      	movs	r2, #31
    8d96:	18ba      	adds	r2, r7, r2
    8d98:	7812      	ldrb	r2, [r2, #0]
    8d9a:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    8d9c:	231f      	movs	r3, #31
    8d9e:	18fb      	adds	r3, r7, r3
    8da0:	781b      	ldrb	r3, [r3, #0]
    8da2:	2b00      	cmp	r3, #0
    8da4:	d008      	beq.n	8db8 <chk_mounted+0x27c>
    8da6:	231f      	movs	r3, #31
    8da8:	18fb      	adds	r3, r7, r3
    8daa:	781b      	ldrb	r3, [r3, #0]
    8dac:	221f      	movs	r2, #31
    8dae:	18ba      	adds	r2, r7, r2
    8db0:	7812      	ldrb	r2, [r2, #0]
    8db2:	3a01      	subs	r2, #1
    8db4:	4013      	ands	r3, r2
    8db6:	d001      	beq.n	8dbc <chk_mounted+0x280>
    8db8:	230d      	movs	r3, #13
    8dba:	e193      	b.n	90e4 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    8dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8dbe:	2242      	movs	r2, #66	; 0x42
    8dc0:	5c9b      	ldrb	r3, [r3, r2]
    8dc2:	021b      	lsls	r3, r3, #8
    8dc4:	b21a      	sxth	r2, r3
    8dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8dc8:	2141      	movs	r1, #65	; 0x41
    8dca:	5c5b      	ldrb	r3, [r3, r1]
    8dcc:	b21b      	sxth	r3, r3
    8dce:	4313      	orrs	r3, r2
    8dd0:	b21b      	sxth	r3, r3
    8dd2:	b29a      	uxth	r2, r3
    8dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8dd6:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    8dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8dda:	891b      	ldrh	r3, [r3, #8]
    8ddc:	220f      	movs	r2, #15
    8dde:	4013      	ands	r3, r2
    8de0:	b29b      	uxth	r3, r3
    8de2:	2b00      	cmp	r3, #0
    8de4:	d001      	beq.n	8dea <chk_mounted+0x2ae>
    8de6:	230d      	movs	r3, #13
    8de8:	e17c      	b.n	90e4 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    8dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8dec:	2244      	movs	r2, #68	; 0x44
    8dee:	5c9b      	ldrb	r3, [r3, r2]
    8df0:	021b      	lsls	r3, r3, #8
    8df2:	b21a      	sxth	r2, r3
    8df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8df6:	2143      	movs	r1, #67	; 0x43
    8df8:	5c5b      	ldrb	r3, [r3, r1]
    8dfa:	b21b      	sxth	r3, r3
    8dfc:	4313      	orrs	r3, r2
    8dfe:	b21b      	sxth	r3, r3
    8e00:	b29b      	uxth	r3, r3
    8e02:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    8e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8e06:	2b00      	cmp	r3, #0
    8e08:	d112      	bne.n	8e30 <chk_mounted+0x2f4>
    8e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e0c:	2253      	movs	r2, #83	; 0x53
    8e0e:	5c9b      	ldrb	r3, [r3, r2]
    8e10:	061a      	lsls	r2, r3, #24
    8e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e14:	2152      	movs	r1, #82	; 0x52
    8e16:	5c5b      	ldrb	r3, [r3, r1]
    8e18:	041b      	lsls	r3, r3, #16
    8e1a:	4313      	orrs	r3, r2
    8e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8e1e:	2151      	movs	r1, #81	; 0x51
    8e20:	5c52      	ldrb	r2, [r2, r1]
    8e22:	0212      	lsls	r2, r2, #8
    8e24:	4313      	orrs	r3, r2
    8e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8e28:	2150      	movs	r1, #80	; 0x50
    8e2a:	5c52      	ldrb	r2, [r2, r1]
    8e2c:	4313      	orrs	r3, r2
    8e2e:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    8e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e32:	223f      	movs	r2, #63	; 0x3f
    8e34:	5c9b      	ldrb	r3, [r3, r2]
    8e36:	021b      	lsls	r3, r3, #8
    8e38:	b21a      	sxth	r2, r3
    8e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e3c:	213e      	movs	r1, #62	; 0x3e
    8e3e:	5c5b      	ldrb	r3, [r3, r1]
    8e40:	b21b      	sxth	r3, r3
    8e42:	4313      	orrs	r3, r2
    8e44:	b21a      	sxth	r2, r3
    8e46:	231c      	movs	r3, #28
    8e48:	18fb      	adds	r3, r7, r3
    8e4a:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    8e4c:	231c      	movs	r3, #28
    8e4e:	18fb      	adds	r3, r7, r3
    8e50:	881b      	ldrh	r3, [r3, #0]
    8e52:	2b00      	cmp	r3, #0
    8e54:	d101      	bne.n	8e5a <chk_mounted+0x31e>
    8e56:	230d      	movs	r3, #13
    8e58:	e144      	b.n	90e4 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    8e5a:	231c      	movs	r3, #28
    8e5c:	18fb      	adds	r3, r7, r3
    8e5e:	881a      	ldrh	r2, [r3, #0]
    8e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8e62:	18d3      	adds	r3, r2, r3
    8e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8e66:	8912      	ldrh	r2, [r2, #8]
    8e68:	0912      	lsrs	r2, r2, #4
    8e6a:	b292      	uxth	r2, r2
    8e6c:	189b      	adds	r3, r3, r2
    8e6e:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    8e70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8e72:	69bb      	ldr	r3, [r7, #24]
    8e74:	429a      	cmp	r2, r3
    8e76:	d201      	bcs.n	8e7c <chk_mounted+0x340>
    8e78:	230d      	movs	r3, #13
    8e7a:	e133      	b.n	90e4 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    8e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8e7e:	69bb      	ldr	r3, [r7, #24]
    8e80:	1ad2      	subs	r2, r2, r3
    8e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e84:	789b      	ldrb	r3, [r3, #2]
    8e86:	0019      	movs	r1, r3
    8e88:	4b08      	ldr	r3, [pc, #32]	; (8eac <chk_mounted+0x370>)
    8e8a:	0010      	movs	r0, r2
    8e8c:	4798      	blx	r3
    8e8e:	0003      	movs	r3, r0
    8e90:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    8e92:	697b      	ldr	r3, [r7, #20]
    8e94:	2b00      	cmp	r3, #0
    8e96:	d10b      	bne.n	8eb0 <chk_mounted+0x374>
    8e98:	230d      	movs	r3, #13
    8e9a:	e123      	b.n	90e4 <chk_mounted+0x5a8>
    8e9c:	2000017c 	.word	0x2000017c
    8ea0:	00006c99 	.word	0x00006c99
    8ea4:	00006c15 	.word	0x00006c15
    8ea8:	00008a69 	.word	0x00008a69
    8eac:	0000a2ad 	.word	0x0000a2ad
	fmt = FS_FAT12;
    8eb0:	2347      	movs	r3, #71	; 0x47
    8eb2:	18fb      	adds	r3, r7, r3
    8eb4:	2201      	movs	r2, #1
    8eb6:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    8eb8:	697b      	ldr	r3, [r7, #20]
    8eba:	4a8c      	ldr	r2, [pc, #560]	; (90ec <chk_mounted+0x5b0>)
    8ebc:	4293      	cmp	r3, r2
    8ebe:	d903      	bls.n	8ec8 <chk_mounted+0x38c>
    8ec0:	2347      	movs	r3, #71	; 0x47
    8ec2:	18fb      	adds	r3, r7, r3
    8ec4:	2202      	movs	r2, #2
    8ec6:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    8ec8:	697b      	ldr	r3, [r7, #20]
    8eca:	4a89      	ldr	r2, [pc, #548]	; (90f0 <chk_mounted+0x5b4>)
    8ecc:	4293      	cmp	r3, r2
    8ece:	d903      	bls.n	8ed8 <chk_mounted+0x39c>
    8ed0:	2347      	movs	r3, #71	; 0x47
    8ed2:	18fb      	adds	r3, r7, r3
    8ed4:	2203      	movs	r2, #3
    8ed6:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    8ed8:	697b      	ldr	r3, [r7, #20]
    8eda:	1c9a      	adds	r2, r3, #2
    8edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8ede:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    8ee0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8ee2:	69bb      	ldr	r3, [r7, #24]
    8ee4:	18d2      	adds	r2, r2, r3
    8ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8ee8:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    8eea:	231c      	movs	r3, #28
    8eec:	18fb      	adds	r3, r7, r3
    8eee:	881a      	ldrh	r2, [r3, #0]
    8ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8ef2:	18d2      	adds	r2, r2, r3
    8ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8ef6:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
    8ef8:	2347      	movs	r3, #71	; 0x47
    8efa:	18fb      	adds	r3, r7, r3
    8efc:	781b      	ldrb	r3, [r3, #0]
    8efe:	2b03      	cmp	r3, #3
    8f00:	d11e      	bne.n	8f40 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    8f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f04:	891b      	ldrh	r3, [r3, #8]
    8f06:	2b00      	cmp	r3, #0
    8f08:	d001      	beq.n	8f0e <chk_mounted+0x3d2>
    8f0a:	230d      	movs	r3, #13
    8f0c:	e0ea      	b.n	90e4 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    8f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f10:	225f      	movs	r2, #95	; 0x5f
    8f12:	5c9b      	ldrb	r3, [r3, r2]
    8f14:	061a      	lsls	r2, r3, #24
    8f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f18:	215e      	movs	r1, #94	; 0x5e
    8f1a:	5c5b      	ldrb	r3, [r3, r1]
    8f1c:	041b      	lsls	r3, r3, #16
    8f1e:	4313      	orrs	r3, r2
    8f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8f22:	215d      	movs	r1, #93	; 0x5d
    8f24:	5c52      	ldrb	r2, [r2, r1]
    8f26:	0212      	lsls	r2, r2, #8
    8f28:	4313      	orrs	r3, r2
    8f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8f2c:	215c      	movs	r1, #92	; 0x5c
    8f2e:	5c52      	ldrb	r2, [r2, r1]
    8f30:	431a      	orrs	r2, r3
    8f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f34:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    8f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f38:	699b      	ldr	r3, [r3, #24]
    8f3a:	009b      	lsls	r3, r3, #2
    8f3c:	633b      	str	r3, [r7, #48]	; 0x30
    8f3e:	e020      	b.n	8f82 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    8f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f42:	891b      	ldrh	r3, [r3, #8]
    8f44:	2b00      	cmp	r3, #0
    8f46:	d101      	bne.n	8f4c <chk_mounted+0x410>
    8f48:	230d      	movs	r3, #13
    8f4a:	e0cb      	b.n	90e4 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    8f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f4e:	6a1a      	ldr	r2, [r3, #32]
    8f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8f52:	18d2      	adds	r2, r2, r3
    8f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f56:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    8f58:	2347      	movs	r3, #71	; 0x47
    8f5a:	18fb      	adds	r3, r7, r3
    8f5c:	781b      	ldrb	r3, [r3, #0]
    8f5e:	2b02      	cmp	r3, #2
    8f60:	d103      	bne.n	8f6a <chk_mounted+0x42e>
    8f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f64:	699b      	ldr	r3, [r3, #24]
    8f66:	005b      	lsls	r3, r3, #1
    8f68:	e00a      	b.n	8f80 <chk_mounted+0x444>
    8f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f6c:	699a      	ldr	r2, [r3, #24]
    8f6e:	0013      	movs	r3, r2
    8f70:	005b      	lsls	r3, r3, #1
    8f72:	189b      	adds	r3, r3, r2
    8f74:	085a      	lsrs	r2, r3, #1
    8f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f78:	699b      	ldr	r3, [r3, #24]
    8f7a:	2101      	movs	r1, #1
    8f7c:	400b      	ands	r3, r1
    8f7e:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    8f80:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    8f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f84:	69da      	ldr	r2, [r3, #28]
    8f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8f88:	495a      	ldr	r1, [pc, #360]	; (90f4 <chk_mounted+0x5b8>)
    8f8a:	468c      	mov	ip, r1
    8f8c:	4463      	add	r3, ip
    8f8e:	0a5b      	lsrs	r3, r3, #9
    8f90:	429a      	cmp	r2, r3
    8f92:	d201      	bcs.n	8f98 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
    8f94:	230d      	movs	r3, #13
    8f96:	e0a5      	b.n	90e4 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    8f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f9a:	2201      	movs	r2, #1
    8f9c:	4252      	negs	r2, r2
    8f9e:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
    8fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fa2:	2200      	movs	r2, #0
    8fa4:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    8fa6:	2347      	movs	r3, #71	; 0x47
    8fa8:	18fb      	adds	r3, r7, r3
    8faa:	781b      	ldrb	r3, [r3, #0]
    8fac:	2b03      	cmp	r3, #3
    8fae:	d000      	beq.n	8fb2 <chk_mounted+0x476>
    8fb0:	e082      	b.n	90b8 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
    8fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fb4:	2200      	movs	r2, #0
    8fb6:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    8fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fba:	2261      	movs	r2, #97	; 0x61
    8fbc:	5c9b      	ldrb	r3, [r3, r2]
    8fbe:	021b      	lsls	r3, r3, #8
    8fc0:	b21a      	sxth	r2, r3
    8fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fc4:	2160      	movs	r1, #96	; 0x60
    8fc6:	5c5b      	ldrb	r3, [r3, r1]
    8fc8:	b21b      	sxth	r3, r3
    8fca:	4313      	orrs	r3, r2
    8fcc:	b21b      	sxth	r3, r3
    8fce:	b29b      	uxth	r3, r3
    8fd0:	001a      	movs	r2, r3
    8fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8fd4:	18d2      	adds	r2, r2, r3
    8fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fd8:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    8fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fdc:	7858      	ldrb	r0, [r3, #1]
    8fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fe0:	3330      	adds	r3, #48	; 0x30
    8fe2:	0019      	movs	r1, r3
    8fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fe6:	695a      	ldr	r2, [r3, #20]
    8fe8:	2301      	movs	r3, #1
    8fea:	4c43      	ldr	r4, [pc, #268]	; (90f8 <chk_mounted+0x5bc>)
    8fec:	47a0      	blx	r4
    8fee:	1e03      	subs	r3, r0, #0
    8ff0:	d162      	bne.n	90b8 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    8ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8ff4:	4a41      	ldr	r2, [pc, #260]	; (90fc <chk_mounted+0x5c0>)
    8ff6:	5c9b      	ldrb	r3, [r3, r2]
    8ff8:	021b      	lsls	r3, r3, #8
    8ffa:	b21a      	sxth	r2, r3
    8ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8ffe:	4940      	ldr	r1, [pc, #256]	; (9100 <chk_mounted+0x5c4>)
    9000:	5c5b      	ldrb	r3, [r3, r1]
    9002:	b21b      	sxth	r3, r3
    9004:	4313      	orrs	r3, r2
    9006:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    9008:	4a3e      	ldr	r2, [pc, #248]	; (9104 <chk_mounted+0x5c8>)
    900a:	4293      	cmp	r3, r2
    900c:	d154      	bne.n	90b8 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9010:	2233      	movs	r2, #51	; 0x33
    9012:	5c9b      	ldrb	r3, [r3, r2]
    9014:	061a      	lsls	r2, r3, #24
    9016:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9018:	2132      	movs	r1, #50	; 0x32
    901a:	5c5b      	ldrb	r3, [r3, r1]
    901c:	041b      	lsls	r3, r3, #16
    901e:	4313      	orrs	r3, r2
    9020:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9022:	2131      	movs	r1, #49	; 0x31
    9024:	5c52      	ldrb	r2, [r2, r1]
    9026:	0212      	lsls	r2, r2, #8
    9028:	4313      	orrs	r3, r2
    902a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    902c:	2130      	movs	r1, #48	; 0x30
    902e:	5c52      	ldrb	r2, [r2, r1]
    9030:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    9032:	4a35      	ldr	r2, [pc, #212]	; (9108 <chk_mounted+0x5cc>)
    9034:	4293      	cmp	r3, r2
    9036:	d13f      	bne.n	90b8 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    9038:	6abb      	ldr	r3, [r7, #40]	; 0x28
    903a:	4a34      	ldr	r2, [pc, #208]	; (910c <chk_mounted+0x5d0>)
    903c:	5c9b      	ldrb	r3, [r3, r2]
    903e:	061a      	lsls	r2, r3, #24
    9040:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9042:	4933      	ldr	r1, [pc, #204]	; (9110 <chk_mounted+0x5d4>)
    9044:	5c5b      	ldrb	r3, [r3, r1]
    9046:	041b      	lsls	r3, r3, #16
    9048:	4313      	orrs	r3, r2
    904a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    904c:	4931      	ldr	r1, [pc, #196]	; (9114 <chk_mounted+0x5d8>)
    904e:	5c52      	ldrb	r2, [r2, r1]
    9050:	0212      	lsls	r2, r2, #8
    9052:	4313      	orrs	r3, r2
    9054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9056:	2285      	movs	r2, #133	; 0x85
    9058:	0092      	lsls	r2, r2, #2
    905a:	5c8a      	ldrb	r2, [r1, r2]
    905c:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    905e:	4a2e      	ldr	r2, [pc, #184]	; (9118 <chk_mounted+0x5dc>)
    9060:	4293      	cmp	r3, r2
    9062:	d129      	bne.n	90b8 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    9064:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9066:	4a2d      	ldr	r2, [pc, #180]	; (911c <chk_mounted+0x5e0>)
    9068:	5c9b      	ldrb	r3, [r3, r2]
    906a:	061a      	lsls	r2, r3, #24
    906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    906e:	492c      	ldr	r1, [pc, #176]	; (9120 <chk_mounted+0x5e4>)
    9070:	5c5b      	ldrb	r3, [r3, r1]
    9072:	041b      	lsls	r3, r3, #16
    9074:	4313      	orrs	r3, r2
    9076:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9078:	492a      	ldr	r1, [pc, #168]	; (9124 <chk_mounted+0x5e8>)
    907a:	5c52      	ldrb	r2, [r2, r1]
    907c:	0212      	lsls	r2, r2, #8
    907e:	4313      	orrs	r3, r2
    9080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9082:	2287      	movs	r2, #135	; 0x87
    9084:	0092      	lsls	r2, r2, #2
    9086:	5c8a      	ldrb	r2, [r1, r2]
    9088:	431a      	orrs	r2, r3
    908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    908c:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9090:	4a25      	ldr	r2, [pc, #148]	; (9128 <chk_mounted+0x5ec>)
    9092:	5c9b      	ldrb	r3, [r3, r2]
    9094:	061a      	lsls	r2, r3, #24
    9096:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9098:	4924      	ldr	r1, [pc, #144]	; (912c <chk_mounted+0x5f0>)
    909a:	5c5b      	ldrb	r3, [r3, r1]
    909c:	041b      	lsls	r3, r3, #16
    909e:	4313      	orrs	r3, r2
    90a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    90a2:	4923      	ldr	r1, [pc, #140]	; (9130 <chk_mounted+0x5f4>)
    90a4:	5c52      	ldrb	r2, [r2, r1]
    90a6:	0212      	lsls	r2, r2, #8
    90a8:	4313      	orrs	r3, r2
    90aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    90ac:	2286      	movs	r2, #134	; 0x86
    90ae:	0092      	lsls	r2, r2, #2
    90b0:	5c8a      	ldrb	r2, [r1, r2]
    90b2:	431a      	orrs	r2, r3
    90b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90b6:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    90b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90ba:	2247      	movs	r2, #71	; 0x47
    90bc:	18ba      	adds	r2, r7, r2
    90be:	7812      	ldrb	r2, [r2, #0]
    90c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    90c2:	4b1c      	ldr	r3, [pc, #112]	; (9134 <chk_mounted+0x5f8>)
    90c4:	881b      	ldrh	r3, [r3, #0]
    90c6:	3301      	adds	r3, #1
    90c8:	b29a      	uxth	r2, r3
    90ca:	4b1a      	ldr	r3, [pc, #104]	; (9134 <chk_mounted+0x5f8>)
    90cc:	801a      	strh	r2, [r3, #0]
    90ce:	4b19      	ldr	r3, [pc, #100]	; (9134 <chk_mounted+0x5f8>)
    90d0:	881a      	ldrh	r2, [r3, #0]
    90d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90d4:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    90d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90d8:	2200      	movs	r2, #0
    90da:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
    90dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90de:	2200      	movs	r2, #0
    90e0:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    90e2:	2300      	movs	r3, #0
}
    90e4:	0018      	movs	r0, r3
    90e6:	46bd      	mov	sp, r7
    90e8:	b013      	add	sp, #76	; 0x4c
    90ea:	bd90      	pop	{r4, r7, pc}
    90ec:	00000ff5 	.word	0x00000ff5
    90f0:	0000fff5 	.word	0x0000fff5
    90f4:	000001ff 	.word	0x000001ff
    90f8:	00006cd1 	.word	0x00006cd1
    90fc:	0000022f 	.word	0x0000022f
    9100:	0000022e 	.word	0x0000022e
    9104:	ffffaa55 	.word	0xffffaa55
    9108:	41615252 	.word	0x41615252
    910c:	00000217 	.word	0x00000217
    9110:	00000216 	.word	0x00000216
    9114:	00000215 	.word	0x00000215
    9118:	61417272 	.word	0x61417272
    911c:	0000021f 	.word	0x0000021f
    9120:	0000021e 	.word	0x0000021e
    9124:	0000021d 	.word	0x0000021d
    9128:	0000021b 	.word	0x0000021b
    912c:	0000021a 	.word	0x0000021a
    9130:	00000219 	.word	0x00000219
    9134:	20000180 	.word	0x20000180

00009138 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    9138:	b580      	push	{r7, lr}
    913a:	b082      	sub	sp, #8
    913c:	af00      	add	r7, sp, #0
    913e:	6078      	str	r0, [r7, #4]
    9140:	000a      	movs	r2, r1
    9142:	1cbb      	adds	r3, r7, #2
    9144:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
    9146:	687b      	ldr	r3, [r7, #4]
    9148:	2b00      	cmp	r3, #0
    914a:	d009      	beq.n	9160 <validate+0x28>
    914c:	687b      	ldr	r3, [r7, #4]
    914e:	781b      	ldrb	r3, [r3, #0]
    9150:	2b00      	cmp	r3, #0
    9152:	d005      	beq.n	9160 <validate+0x28>
    9154:	687b      	ldr	r3, [r7, #4]
    9156:	88db      	ldrh	r3, [r3, #6]
    9158:	1cba      	adds	r2, r7, #2
    915a:	8812      	ldrh	r2, [r2, #0]
    915c:	429a      	cmp	r2, r3
    915e:	d001      	beq.n	9164 <validate+0x2c>
		return FR_INVALID_OBJECT;
    9160:	2309      	movs	r3, #9
    9162:	e00c      	b.n	917e <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    9164:	687b      	ldr	r3, [r7, #4]
    9166:	785b      	ldrb	r3, [r3, #1]
    9168:	0018      	movs	r0, r3
    916a:	4b07      	ldr	r3, [pc, #28]	; (9188 <validate+0x50>)
    916c:	4798      	blx	r3
    916e:	0003      	movs	r3, r0
    9170:	001a      	movs	r2, r3
    9172:	2301      	movs	r3, #1
    9174:	4013      	ands	r3, r2
    9176:	d001      	beq.n	917c <validate+0x44>
		return FR_NOT_READY;
    9178:	2303      	movs	r3, #3
    917a:	e000      	b.n	917e <validate+0x46>

	return FR_OK;
    917c:	2300      	movs	r3, #0
}
    917e:	0018      	movs	r0, r3
    9180:	46bd      	mov	sp, r7
    9182:	b002      	add	sp, #8
    9184:	bd80      	pop	{r7, pc}
    9186:	46c0      	nop			; (mov r8, r8)
    9188:	00006c99 	.word	0x00006c99

0000918c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    918c:	b580      	push	{r7, lr}
    918e:	b084      	sub	sp, #16
    9190:	af00      	add	r7, sp, #0
    9192:	0002      	movs	r2, r0
    9194:	6039      	str	r1, [r7, #0]
    9196:	1dfb      	adds	r3, r7, #7
    9198:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    919a:	1dfb      	adds	r3, r7, #7
    919c:	781b      	ldrb	r3, [r3, #0]
    919e:	2b00      	cmp	r3, #0
    91a0:	d001      	beq.n	91a6 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
    91a2:	230b      	movs	r3, #11
    91a4:	e018      	b.n	91d8 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
    91a6:	1dfb      	adds	r3, r7, #7
    91a8:	781a      	ldrb	r2, [r3, #0]
    91aa:	4b0d      	ldr	r3, [pc, #52]	; (91e0 <f_mount+0x54>)
    91ac:	0092      	lsls	r2, r2, #2
    91ae:	58d3      	ldr	r3, [r2, r3]
    91b0:	60fb      	str	r3, [r7, #12]

	if (rfs) {
    91b2:	68fb      	ldr	r3, [r7, #12]
    91b4:	2b00      	cmp	r3, #0
    91b6:	d002      	beq.n	91be <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    91b8:	68fb      	ldr	r3, [r7, #12]
    91ba:	2200      	movs	r2, #0
    91bc:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    91be:	683b      	ldr	r3, [r7, #0]
    91c0:	2b00      	cmp	r3, #0
    91c2:	d002      	beq.n	91ca <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
    91c4:	683b      	ldr	r3, [r7, #0]
    91c6:	2200      	movs	r2, #0
    91c8:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    91ca:	1dfb      	adds	r3, r7, #7
    91cc:	781a      	ldrb	r2, [r3, #0]
    91ce:	4b04      	ldr	r3, [pc, #16]	; (91e0 <f_mount+0x54>)
    91d0:	0092      	lsls	r2, r2, #2
    91d2:	6839      	ldr	r1, [r7, #0]
    91d4:	50d1      	str	r1, [r2, r3]

	return FR_OK;
    91d6:	2300      	movs	r3, #0
}
    91d8:	0018      	movs	r0, r3
    91da:	46bd      	mov	sp, r7
    91dc:	b004      	add	sp, #16
    91de:	bd80      	pop	{r7, pc}
    91e0:	2000017c 	.word	0x2000017c

000091e4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    91e4:	b590      	push	{r4, r7, lr}
    91e6:	4ce5      	ldr	r4, [pc, #916]	; (957c <f_open+0x398>)
    91e8:	44a5      	add	sp, r4
    91ea:	af00      	add	r7, sp, #0
    91ec:	60f8      	str	r0, [r7, #12]
    91ee:	60b9      	str	r1, [r7, #8]
    91f0:	4be3      	ldr	r3, [pc, #908]	; (9580 <f_open+0x39c>)
    91f2:	2194      	movs	r1, #148	; 0x94
    91f4:	0089      	lsls	r1, r1, #2
    91f6:	468c      	mov	ip, r1
    91f8:	44bc      	add	ip, r7
    91fa:	4463      	add	r3, ip
    91fc:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    91fe:	68fb      	ldr	r3, [r7, #12]
    9200:	2200      	movs	r2, #0
    9202:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    9204:	4bde      	ldr	r3, [pc, #888]	; (9580 <f_open+0x39c>)
    9206:	2294      	movs	r2, #148	; 0x94
    9208:	0092      	lsls	r2, r2, #2
    920a:	4694      	mov	ip, r2
    920c:	44bc      	add	ip, r7
    920e:	4463      	add	r3, ip
    9210:	4adb      	ldr	r2, [pc, #876]	; (9580 <f_open+0x39c>)
    9212:	2194      	movs	r1, #148	; 0x94
    9214:	0089      	lsls	r1, r1, #2
    9216:	468c      	mov	ip, r1
    9218:	44bc      	add	ip, r7
    921a:	4462      	add	r2, ip
    921c:	7812      	ldrb	r2, [r2, #0]
    921e:	211f      	movs	r1, #31
    9220:	400a      	ands	r2, r1
    9222:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    9224:	4bd6      	ldr	r3, [pc, #856]	; (9580 <f_open+0x39c>)
    9226:	2294      	movs	r2, #148	; 0x94
    9228:	0092      	lsls	r2, r2, #2
    922a:	4694      	mov	ip, r2
    922c:	44bc      	add	ip, r7
    922e:	4463      	add	r3, ip
    9230:	781b      	ldrb	r3, [r3, #0]
    9232:	2201      	movs	r2, #1
    9234:	4393      	bics	r3, r2
    9236:	b2da      	uxtb	r2, r3
    9238:	4bd2      	ldr	r3, [pc, #840]	; (9584 <f_open+0x3a0>)
    923a:	18fc      	adds	r4, r7, r3
    923c:	2387      	movs	r3, #135	; 0x87
    923e:	009b      	lsls	r3, r3, #2
    9240:	18f9      	adds	r1, r7, r3
    9242:	2308      	movs	r3, #8
    9244:	18fb      	adds	r3, r7, r3
    9246:	0018      	movs	r0, r3
    9248:	4bcf      	ldr	r3, [pc, #828]	; (9588 <f_open+0x3a4>)
    924a:	4798      	blx	r3
    924c:	0003      	movs	r3, r0
    924e:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    9250:	2387      	movs	r3, #135	; 0x87
    9252:	009b      	lsls	r3, r3, #2
    9254:	18fb      	adds	r3, r7, r3
    9256:	2284      	movs	r2, #132	; 0x84
    9258:	0092      	lsls	r2, r2, #2
    925a:	18ba      	adds	r2, r7, r2
    925c:	619a      	str	r2, [r3, #24]
    925e:	2387      	movs	r3, #135	; 0x87
    9260:	009b      	lsls	r3, r3, #2
    9262:	18fb      	adds	r3, r7, r3
    9264:	2210      	movs	r2, #16
    9266:	18ba      	adds	r2, r7, r2
    9268:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
    926a:	4bc6      	ldr	r3, [pc, #792]	; (9584 <f_open+0x3a0>)
    926c:	18fb      	adds	r3, r7, r3
    926e:	781b      	ldrb	r3, [r3, #0]
    9270:	2b00      	cmp	r3, #0
    9272:	d10b      	bne.n	928c <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
    9274:	68ba      	ldr	r2, [r7, #8]
    9276:	4bc3      	ldr	r3, [pc, #780]	; (9584 <f_open+0x3a0>)
    9278:	18fc      	adds	r4, r7, r3
    927a:	2387      	movs	r3, #135	; 0x87
    927c:	009b      	lsls	r3, r3, #2
    927e:	18fb      	adds	r3, r7, r3
    9280:	0011      	movs	r1, r2
    9282:	0018      	movs	r0, r3
    9284:	4bc1      	ldr	r3, [pc, #772]	; (958c <f_open+0x3a8>)
    9286:	4798      	blx	r3
    9288:	0003      	movs	r3, r0
    928a:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
    928c:	2387      	movs	r3, #135	; 0x87
    928e:	009b      	lsls	r3, r3, #2
    9290:	18fb      	adds	r3, r7, r3
    9292:	695b      	ldr	r3, [r3, #20]
    9294:	2292      	movs	r2, #146	; 0x92
    9296:	0092      	lsls	r2, r2, #2
    9298:	18ba      	adds	r2, r7, r2
    929a:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    929c:	4bb9      	ldr	r3, [pc, #740]	; (9584 <f_open+0x3a0>)
    929e:	18fb      	adds	r3, r7, r3
    92a0:	781b      	ldrb	r3, [r3, #0]
    92a2:	2b00      	cmp	r3, #0
    92a4:	d109      	bne.n	92ba <f_open+0xd6>
		if (!dir)	/* Current dir itself */
    92a6:	2392      	movs	r3, #146	; 0x92
    92a8:	009b      	lsls	r3, r3, #2
    92aa:	18fb      	adds	r3, r7, r3
    92ac:	681b      	ldr	r3, [r3, #0]
    92ae:	2b00      	cmp	r3, #0
    92b0:	d103      	bne.n	92ba <f_open+0xd6>
			res = FR_INVALID_NAME;
    92b2:	4bb4      	ldr	r3, [pc, #720]	; (9584 <f_open+0x3a0>)
    92b4:	18fb      	adds	r3, r7, r3
    92b6:	2206      	movs	r2, #6
    92b8:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    92ba:	4bb1      	ldr	r3, [pc, #708]	; (9580 <f_open+0x39c>)
    92bc:	2294      	movs	r2, #148	; 0x94
    92be:	0092      	lsls	r2, r2, #2
    92c0:	4694      	mov	ip, r2
    92c2:	44bc      	add	ip, r7
    92c4:	4463      	add	r3, ip
    92c6:	781b      	ldrb	r3, [r3, #0]
    92c8:	221c      	movs	r2, #28
    92ca:	4013      	ands	r3, r2
    92cc:	d100      	bne.n	92d0 <f_open+0xec>
    92ce:	e141      	b.n	9554 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    92d0:	4bac      	ldr	r3, [pc, #688]	; (9584 <f_open+0x3a0>)
    92d2:	18fb      	adds	r3, r7, r3
    92d4:	781b      	ldrb	r3, [r3, #0]
    92d6:	2b00      	cmp	r3, #0
    92d8:	d027      	beq.n	932a <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    92da:	4baa      	ldr	r3, [pc, #680]	; (9584 <f_open+0x3a0>)
    92dc:	18fb      	adds	r3, r7, r3
    92de:	781b      	ldrb	r3, [r3, #0]
    92e0:	2b04      	cmp	r3, #4
    92e2:	d109      	bne.n	92f8 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    92e4:	4ba7      	ldr	r3, [pc, #668]	; (9584 <f_open+0x3a0>)
    92e6:	18fc      	adds	r4, r7, r3
    92e8:	2387      	movs	r3, #135	; 0x87
    92ea:	009b      	lsls	r3, r3, #2
    92ec:	18fb      	adds	r3, r7, r3
    92ee:	0018      	movs	r0, r3
    92f0:	4ba7      	ldr	r3, [pc, #668]	; (9590 <f_open+0x3ac>)
    92f2:	4798      	blx	r3
    92f4:	0003      	movs	r3, r0
    92f6:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    92f8:	4ba1      	ldr	r3, [pc, #644]	; (9580 <f_open+0x39c>)
    92fa:	2294      	movs	r2, #148	; 0x94
    92fc:	0092      	lsls	r2, r2, #2
    92fe:	4694      	mov	ip, r2
    9300:	44bc      	add	ip, r7
    9302:	4463      	add	r3, ip
    9304:	4a9e      	ldr	r2, [pc, #632]	; (9580 <f_open+0x39c>)
    9306:	2194      	movs	r1, #148	; 0x94
    9308:	0089      	lsls	r1, r1, #2
    930a:	468c      	mov	ip, r1
    930c:	44bc      	add	ip, r7
    930e:	4462      	add	r2, ip
    9310:	7812      	ldrb	r2, [r2, #0]
    9312:	2108      	movs	r1, #8
    9314:	430a      	orrs	r2, r1
    9316:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
    9318:	2387      	movs	r3, #135	; 0x87
    931a:	009b      	lsls	r3, r3, #2
    931c:	18fb      	adds	r3, r7, r3
    931e:	695b      	ldr	r3, [r3, #20]
    9320:	2292      	movs	r2, #146	; 0x92
    9322:	0092      	lsls	r2, r2, #2
    9324:	18ba      	adds	r2, r7, r2
    9326:	6013      	str	r3, [r2, #0]
    9328:	e01c      	b.n	9364 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    932a:	2392      	movs	r3, #146	; 0x92
    932c:	009b      	lsls	r3, r3, #2
    932e:	18fb      	adds	r3, r7, r3
    9330:	681b      	ldr	r3, [r3, #0]
    9332:	330b      	adds	r3, #11
    9334:	781b      	ldrb	r3, [r3, #0]
    9336:	001a      	movs	r2, r3
    9338:	2311      	movs	r3, #17
    933a:	4013      	ands	r3, r2
    933c:	d004      	beq.n	9348 <f_open+0x164>
				res = FR_DENIED;
    933e:	4b91      	ldr	r3, [pc, #580]	; (9584 <f_open+0x3a0>)
    9340:	18fb      	adds	r3, r7, r3
    9342:	2207      	movs	r2, #7
    9344:	701a      	strb	r2, [r3, #0]
    9346:	e00d      	b.n	9364 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    9348:	4b8d      	ldr	r3, [pc, #564]	; (9580 <f_open+0x39c>)
    934a:	2294      	movs	r2, #148	; 0x94
    934c:	0092      	lsls	r2, r2, #2
    934e:	4694      	mov	ip, r2
    9350:	44bc      	add	ip, r7
    9352:	4463      	add	r3, ip
    9354:	781b      	ldrb	r3, [r3, #0]
    9356:	2204      	movs	r2, #4
    9358:	4013      	ands	r3, r2
    935a:	d003      	beq.n	9364 <f_open+0x180>
					res = FR_EXIST;
    935c:	4b89      	ldr	r3, [pc, #548]	; (9584 <f_open+0x3a0>)
    935e:	18fb      	adds	r3, r7, r3
    9360:	2208      	movs	r2, #8
    9362:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    9364:	4b87      	ldr	r3, [pc, #540]	; (9584 <f_open+0x3a0>)
    9366:	18fb      	adds	r3, r7, r3
    9368:	781b      	ldrb	r3, [r3, #0]
    936a:	2b00      	cmp	r3, #0
    936c:	d000      	beq.n	9370 <f_open+0x18c>
    936e:	e12f      	b.n	95d0 <f_open+0x3ec>
    9370:	4b83      	ldr	r3, [pc, #524]	; (9580 <f_open+0x39c>)
    9372:	2294      	movs	r2, #148	; 0x94
    9374:	0092      	lsls	r2, r2, #2
    9376:	4694      	mov	ip, r2
    9378:	44bc      	add	ip, r7
    937a:	4463      	add	r3, ip
    937c:	781b      	ldrb	r3, [r3, #0]
    937e:	2208      	movs	r2, #8
    9380:	4013      	ands	r3, r2
    9382:	d100      	bne.n	9386 <f_open+0x1a2>
    9384:	e124      	b.n	95d0 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
    9386:	4b83      	ldr	r3, [pc, #524]	; (9594 <f_open+0x3b0>)
    9388:	4798      	blx	r3
    938a:	0003      	movs	r3, r0
    938c:	2291      	movs	r2, #145	; 0x91
    938e:	0092      	lsls	r2, r2, #2
    9390:	18ba      	adds	r2, r7, r2
    9392:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
    9394:	2392      	movs	r3, #146	; 0x92
    9396:	009b      	lsls	r3, r3, #2
    9398:	18fb      	adds	r3, r7, r3
    939a:	681b      	ldr	r3, [r3, #0]
    939c:	330e      	adds	r3, #14
    939e:	2291      	movs	r2, #145	; 0x91
    93a0:	0092      	lsls	r2, r2, #2
    93a2:	18ba      	adds	r2, r7, r2
    93a4:	6812      	ldr	r2, [r2, #0]
    93a6:	b2d2      	uxtb	r2, r2
    93a8:	701a      	strb	r2, [r3, #0]
    93aa:	2392      	movs	r3, #146	; 0x92
    93ac:	009b      	lsls	r3, r3, #2
    93ae:	18fb      	adds	r3, r7, r3
    93b0:	681b      	ldr	r3, [r3, #0]
    93b2:	330f      	adds	r3, #15
    93b4:	2291      	movs	r2, #145	; 0x91
    93b6:	0092      	lsls	r2, r2, #2
    93b8:	18ba      	adds	r2, r7, r2
    93ba:	6812      	ldr	r2, [r2, #0]
    93bc:	b292      	uxth	r2, r2
    93be:	0a12      	lsrs	r2, r2, #8
    93c0:	b292      	uxth	r2, r2
    93c2:	b2d2      	uxtb	r2, r2
    93c4:	701a      	strb	r2, [r3, #0]
    93c6:	2392      	movs	r3, #146	; 0x92
    93c8:	009b      	lsls	r3, r3, #2
    93ca:	18fb      	adds	r3, r7, r3
    93cc:	681b      	ldr	r3, [r3, #0]
    93ce:	3310      	adds	r3, #16
    93d0:	2291      	movs	r2, #145	; 0x91
    93d2:	0092      	lsls	r2, r2, #2
    93d4:	18ba      	adds	r2, r7, r2
    93d6:	6812      	ldr	r2, [r2, #0]
    93d8:	0c12      	lsrs	r2, r2, #16
    93da:	b2d2      	uxtb	r2, r2
    93dc:	701a      	strb	r2, [r3, #0]
    93de:	2392      	movs	r3, #146	; 0x92
    93e0:	009b      	lsls	r3, r3, #2
    93e2:	18fb      	adds	r3, r7, r3
    93e4:	681b      	ldr	r3, [r3, #0]
    93e6:	3311      	adds	r3, #17
    93e8:	2291      	movs	r2, #145	; 0x91
    93ea:	0092      	lsls	r2, r2, #2
    93ec:	18ba      	adds	r2, r7, r2
    93ee:	6812      	ldr	r2, [r2, #0]
    93f0:	0e12      	lsrs	r2, r2, #24
    93f2:	b2d2      	uxtb	r2, r2
    93f4:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    93f6:	2392      	movs	r3, #146	; 0x92
    93f8:	009b      	lsls	r3, r3, #2
    93fa:	18fb      	adds	r3, r7, r3
    93fc:	681b      	ldr	r3, [r3, #0]
    93fe:	330b      	adds	r3, #11
    9400:	2200      	movs	r2, #0
    9402:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    9404:	2392      	movs	r3, #146	; 0x92
    9406:	009b      	lsls	r3, r3, #2
    9408:	18fb      	adds	r3, r7, r3
    940a:	681b      	ldr	r3, [r3, #0]
    940c:	331c      	adds	r3, #28
    940e:	2200      	movs	r2, #0
    9410:	701a      	strb	r2, [r3, #0]
    9412:	2392      	movs	r3, #146	; 0x92
    9414:	009b      	lsls	r3, r3, #2
    9416:	18fb      	adds	r3, r7, r3
    9418:	681b      	ldr	r3, [r3, #0]
    941a:	331d      	adds	r3, #29
    941c:	2200      	movs	r2, #0
    941e:	701a      	strb	r2, [r3, #0]
    9420:	2392      	movs	r3, #146	; 0x92
    9422:	009b      	lsls	r3, r3, #2
    9424:	18fb      	adds	r3, r7, r3
    9426:	681b      	ldr	r3, [r3, #0]
    9428:	331e      	adds	r3, #30
    942a:	2200      	movs	r2, #0
    942c:	701a      	strb	r2, [r3, #0]
    942e:	2392      	movs	r3, #146	; 0x92
    9430:	009b      	lsls	r3, r3, #2
    9432:	18fb      	adds	r3, r7, r3
    9434:	681b      	ldr	r3, [r3, #0]
    9436:	331f      	adds	r3, #31
    9438:	2200      	movs	r2, #0
    943a:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
    943c:	2392      	movs	r3, #146	; 0x92
    943e:	009b      	lsls	r3, r3, #2
    9440:	18fb      	adds	r3, r7, r3
    9442:	681b      	ldr	r3, [r3, #0]
    9444:	3315      	adds	r3, #21
    9446:	781b      	ldrb	r3, [r3, #0]
    9448:	021b      	lsls	r3, r3, #8
    944a:	b21a      	sxth	r2, r3
    944c:	2392      	movs	r3, #146	; 0x92
    944e:	009b      	lsls	r3, r3, #2
    9450:	18fb      	adds	r3, r7, r3
    9452:	681b      	ldr	r3, [r3, #0]
    9454:	3314      	adds	r3, #20
    9456:	781b      	ldrb	r3, [r3, #0]
    9458:	b21b      	sxth	r3, r3
    945a:	4313      	orrs	r3, r2
    945c:	b21b      	sxth	r3, r3
    945e:	b29b      	uxth	r3, r3
    9460:	041b      	lsls	r3, r3, #16
    9462:	2292      	movs	r2, #146	; 0x92
    9464:	0092      	lsls	r2, r2, #2
    9466:	18ba      	adds	r2, r7, r2
    9468:	6812      	ldr	r2, [r2, #0]
    946a:	321b      	adds	r2, #27
    946c:	7812      	ldrb	r2, [r2, #0]
    946e:	0212      	lsls	r2, r2, #8
    9470:	b211      	sxth	r1, r2
    9472:	2292      	movs	r2, #146	; 0x92
    9474:	0092      	lsls	r2, r2, #2
    9476:	18ba      	adds	r2, r7, r2
    9478:	6812      	ldr	r2, [r2, #0]
    947a:	321a      	adds	r2, #26
    947c:	7812      	ldrb	r2, [r2, #0]
    947e:	b212      	sxth	r2, r2
    9480:	430a      	orrs	r2, r1
    9482:	b212      	sxth	r2, r2
    9484:	b292      	uxth	r2, r2
    9486:	4313      	orrs	r3, r2
    9488:	2290      	movs	r2, #144	; 0x90
    948a:	0092      	lsls	r2, r2, #2
    948c:	18ba      	adds	r2, r7, r2
    948e:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
    9490:	2392      	movs	r3, #146	; 0x92
    9492:	009b      	lsls	r3, r3, #2
    9494:	18fb      	adds	r3, r7, r3
    9496:	681b      	ldr	r3, [r3, #0]
    9498:	331a      	adds	r3, #26
    949a:	2200      	movs	r2, #0
    949c:	701a      	strb	r2, [r3, #0]
    949e:	2392      	movs	r3, #146	; 0x92
    94a0:	009b      	lsls	r3, r3, #2
    94a2:	18fb      	adds	r3, r7, r3
    94a4:	681b      	ldr	r3, [r3, #0]
    94a6:	331b      	adds	r3, #27
    94a8:	2200      	movs	r2, #0
    94aa:	701a      	strb	r2, [r3, #0]
    94ac:	2392      	movs	r3, #146	; 0x92
    94ae:	009b      	lsls	r3, r3, #2
    94b0:	18fb      	adds	r3, r7, r3
    94b2:	681b      	ldr	r3, [r3, #0]
    94b4:	3314      	adds	r3, #20
    94b6:	2200      	movs	r2, #0
    94b8:	701a      	strb	r2, [r3, #0]
    94ba:	2392      	movs	r3, #146	; 0x92
    94bc:	009b      	lsls	r3, r3, #2
    94be:	18fb      	adds	r3, r7, r3
    94c0:	681b      	ldr	r3, [r3, #0]
    94c2:	3315      	adds	r3, #21
    94c4:	2200      	movs	r2, #0
    94c6:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
    94c8:	2387      	movs	r3, #135	; 0x87
    94ca:	009b      	lsls	r3, r3, #2
    94cc:	18fb      	adds	r3, r7, r3
    94ce:	681b      	ldr	r3, [r3, #0]
    94d0:	2201      	movs	r2, #1
    94d2:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    94d4:	2390      	movs	r3, #144	; 0x90
    94d6:	009b      	lsls	r3, r3, #2
    94d8:	18fb      	adds	r3, r7, r3
    94da:	681b      	ldr	r3, [r3, #0]
    94dc:	2b00      	cmp	r3, #0
    94de:	d100      	bne.n	94e2 <f_open+0x2fe>
    94e0:	e076      	b.n	95d0 <f_open+0x3ec>
				dw = dj.fs->winsect;
    94e2:	2387      	movs	r3, #135	; 0x87
    94e4:	009b      	lsls	r3, r3, #2
    94e6:	18fb      	adds	r3, r7, r3
    94e8:	681b      	ldr	r3, [r3, #0]
    94ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    94ec:	2291      	movs	r2, #145	; 0x91
    94ee:	0092      	lsls	r2, r2, #2
    94f0:	18ba      	adds	r2, r7, r2
    94f2:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
    94f4:	2387      	movs	r3, #135	; 0x87
    94f6:	009b      	lsls	r3, r3, #2
    94f8:	18fb      	adds	r3, r7, r3
    94fa:	681b      	ldr	r3, [r3, #0]
    94fc:	4a21      	ldr	r2, [pc, #132]	; (9584 <f_open+0x3a0>)
    94fe:	18bc      	adds	r4, r7, r2
    9500:	2290      	movs	r2, #144	; 0x90
    9502:	0092      	lsls	r2, r2, #2
    9504:	18ba      	adds	r2, r7, r2
    9506:	6812      	ldr	r2, [r2, #0]
    9508:	0011      	movs	r1, r2
    950a:	0018      	movs	r0, r3
    950c:	4b22      	ldr	r3, [pc, #136]	; (9598 <f_open+0x3b4>)
    950e:	4798      	blx	r3
    9510:	0003      	movs	r3, r0
    9512:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    9514:	4b1b      	ldr	r3, [pc, #108]	; (9584 <f_open+0x3a0>)
    9516:	18fb      	adds	r3, r7, r3
    9518:	781b      	ldrb	r3, [r3, #0]
    951a:	2b00      	cmp	r3, #0
    951c:	d158      	bne.n	95d0 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    951e:	2387      	movs	r3, #135	; 0x87
    9520:	009b      	lsls	r3, r3, #2
    9522:	18fb      	adds	r3, r7, r3
    9524:	681b      	ldr	r3, [r3, #0]
    9526:	2290      	movs	r2, #144	; 0x90
    9528:	0092      	lsls	r2, r2, #2
    952a:	18ba      	adds	r2, r7, r2
    952c:	6812      	ldr	r2, [r2, #0]
    952e:	3a01      	subs	r2, #1
    9530:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
    9532:	2387      	movs	r3, #135	; 0x87
    9534:	009b      	lsls	r3, r3, #2
    9536:	18fb      	adds	r3, r7, r3
    9538:	681b      	ldr	r3, [r3, #0]
    953a:	4a12      	ldr	r2, [pc, #72]	; (9584 <f_open+0x3a0>)
    953c:	18bc      	adds	r4, r7, r2
    953e:	2291      	movs	r2, #145	; 0x91
    9540:	0092      	lsls	r2, r2, #2
    9542:	18ba      	adds	r2, r7, r2
    9544:	6812      	ldr	r2, [r2, #0]
    9546:	0011      	movs	r1, r2
    9548:	0018      	movs	r0, r3
    954a:	4b14      	ldr	r3, [pc, #80]	; (959c <f_open+0x3b8>)
    954c:	4798      	blx	r3
    954e:	0003      	movs	r3, r0
    9550:	7023      	strb	r3, [r4, #0]
    9552:	e03d      	b.n	95d0 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    9554:	4b0b      	ldr	r3, [pc, #44]	; (9584 <f_open+0x3a0>)
    9556:	18fb      	adds	r3, r7, r3
    9558:	781b      	ldrb	r3, [r3, #0]
    955a:	2b00      	cmp	r3, #0
    955c:	d138      	bne.n	95d0 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    955e:	2392      	movs	r3, #146	; 0x92
    9560:	009b      	lsls	r3, r3, #2
    9562:	18fb      	adds	r3, r7, r3
    9564:	681b      	ldr	r3, [r3, #0]
    9566:	330b      	adds	r3, #11
    9568:	781b      	ldrb	r3, [r3, #0]
    956a:	001a      	movs	r2, r3
    956c:	2310      	movs	r3, #16
    956e:	4013      	ands	r3, r2
    9570:	d016      	beq.n	95a0 <f_open+0x3bc>
				res = FR_NO_FILE;
    9572:	4b04      	ldr	r3, [pc, #16]	; (9584 <f_open+0x3a0>)
    9574:	18fb      	adds	r3, r7, r3
    9576:	2204      	movs	r2, #4
    9578:	701a      	strb	r2, [r3, #0]
    957a:	e029      	b.n	95d0 <f_open+0x3ec>
    957c:	fffffdac 	.word	0xfffffdac
    9580:	fffffdb7 	.word	0xfffffdb7
    9584:	0000024f 	.word	0x0000024f
    9588:	00008b3d 	.word	0x00008b3d
    958c:	00008931 	.word	0x00008931
    9590:	00008181 	.word	0x00008181
    9594:	00006f79 	.word	0x00006f79
    9598:	000076fd 	.word	0x000076fd
    959c:	000070bd 	.word	0x000070bd
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    95a0:	4b5a      	ldr	r3, [pc, #360]	; (970c <f_open+0x528>)
    95a2:	2294      	movs	r2, #148	; 0x94
    95a4:	0092      	lsls	r2, r2, #2
    95a6:	4694      	mov	ip, r2
    95a8:	44bc      	add	ip, r7
    95aa:	4463      	add	r3, ip
    95ac:	781b      	ldrb	r3, [r3, #0]
    95ae:	2202      	movs	r2, #2
    95b0:	4013      	ands	r3, r2
    95b2:	d00d      	beq.n	95d0 <f_open+0x3ec>
    95b4:	2392      	movs	r3, #146	; 0x92
    95b6:	009b      	lsls	r3, r3, #2
    95b8:	18fb      	adds	r3, r7, r3
    95ba:	681b      	ldr	r3, [r3, #0]
    95bc:	330b      	adds	r3, #11
    95be:	781b      	ldrb	r3, [r3, #0]
    95c0:	001a      	movs	r2, r3
    95c2:	2301      	movs	r3, #1
    95c4:	4013      	ands	r3, r2
    95c6:	d003      	beq.n	95d0 <f_open+0x3ec>
					res = FR_DENIED;
    95c8:	4b51      	ldr	r3, [pc, #324]	; (9710 <f_open+0x52c>)
    95ca:	18fb      	adds	r3, r7, r3
    95cc:	2207      	movs	r2, #7
    95ce:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
    95d0:	4b4f      	ldr	r3, [pc, #316]	; (9710 <f_open+0x52c>)
    95d2:	18fb      	adds	r3, r7, r3
    95d4:	781b      	ldrb	r3, [r3, #0]
    95d6:	2b00      	cmp	r3, #0
    95d8:	d126      	bne.n	9628 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    95da:	4b4c      	ldr	r3, [pc, #304]	; (970c <f_open+0x528>)
    95dc:	2294      	movs	r2, #148	; 0x94
    95de:	0092      	lsls	r2, r2, #2
    95e0:	4694      	mov	ip, r2
    95e2:	44bc      	add	ip, r7
    95e4:	4463      	add	r3, ip
    95e6:	781b      	ldrb	r3, [r3, #0]
    95e8:	2208      	movs	r2, #8
    95ea:	4013      	ands	r3, r2
    95ec:	d00f      	beq.n	960e <f_open+0x42a>
			mode |= FA__WRITTEN;
    95ee:	4b47      	ldr	r3, [pc, #284]	; (970c <f_open+0x528>)
    95f0:	2294      	movs	r2, #148	; 0x94
    95f2:	0092      	lsls	r2, r2, #2
    95f4:	4694      	mov	ip, r2
    95f6:	44bc      	add	ip, r7
    95f8:	4463      	add	r3, ip
    95fa:	4a44      	ldr	r2, [pc, #272]	; (970c <f_open+0x528>)
    95fc:	2194      	movs	r1, #148	; 0x94
    95fe:	0089      	lsls	r1, r1, #2
    9600:	468c      	mov	ip, r1
    9602:	44bc      	add	ip, r7
    9604:	4462      	add	r2, ip
    9606:	7812      	ldrb	r2, [r2, #0]
    9608:	2120      	movs	r1, #32
    960a:	430a      	orrs	r2, r1
    960c:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    960e:	2387      	movs	r3, #135	; 0x87
    9610:	009b      	lsls	r3, r3, #2
    9612:	18fb      	adds	r3, r7, r3
    9614:	681b      	ldr	r3, [r3, #0]
    9616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9618:	68fb      	ldr	r3, [r7, #12]
    961a:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
    961c:	68fb      	ldr	r3, [r7, #12]
    961e:	2292      	movs	r2, #146	; 0x92
    9620:	0092      	lsls	r2, r2, #2
    9622:	18ba      	adds	r2, r7, r2
    9624:	6812      	ldr	r2, [r2, #0]
    9626:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    9628:	4b39      	ldr	r3, [pc, #228]	; (9710 <f_open+0x52c>)
    962a:	18fb      	adds	r3, r7, r3
    962c:	781b      	ldrb	r3, [r3, #0]
    962e:	2b00      	cmp	r3, #0
    9630:	d163      	bne.n	96fa <f_open+0x516>
		fp->flag = mode;					/* File access mode */
    9632:	68fb      	ldr	r3, [r7, #12]
    9634:	4a35      	ldr	r2, [pc, #212]	; (970c <f_open+0x528>)
    9636:	2194      	movs	r1, #148	; 0x94
    9638:	0089      	lsls	r1, r1, #2
    963a:	468c      	mov	ip, r1
    963c:	44bc      	add	ip, r7
    963e:	4462      	add	r2, ip
    9640:	7812      	ldrb	r2, [r2, #0]
    9642:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    9644:	2392      	movs	r3, #146	; 0x92
    9646:	009b      	lsls	r3, r3, #2
    9648:	18fb      	adds	r3, r7, r3
    964a:	681b      	ldr	r3, [r3, #0]
    964c:	3315      	adds	r3, #21
    964e:	781b      	ldrb	r3, [r3, #0]
    9650:	021b      	lsls	r3, r3, #8
    9652:	b21a      	sxth	r2, r3
    9654:	2392      	movs	r3, #146	; 0x92
    9656:	009b      	lsls	r3, r3, #2
    9658:	18fb      	adds	r3, r7, r3
    965a:	681b      	ldr	r3, [r3, #0]
    965c:	3314      	adds	r3, #20
    965e:	781b      	ldrb	r3, [r3, #0]
    9660:	b21b      	sxth	r3, r3
    9662:	4313      	orrs	r3, r2
    9664:	b21b      	sxth	r3, r3
    9666:	b29b      	uxth	r3, r3
    9668:	041b      	lsls	r3, r3, #16
    966a:	2292      	movs	r2, #146	; 0x92
    966c:	0092      	lsls	r2, r2, #2
    966e:	18ba      	adds	r2, r7, r2
    9670:	6812      	ldr	r2, [r2, #0]
    9672:	321b      	adds	r2, #27
    9674:	7812      	ldrb	r2, [r2, #0]
    9676:	0212      	lsls	r2, r2, #8
    9678:	b211      	sxth	r1, r2
    967a:	2292      	movs	r2, #146	; 0x92
    967c:	0092      	lsls	r2, r2, #2
    967e:	18ba      	adds	r2, r7, r2
    9680:	6812      	ldr	r2, [r2, #0]
    9682:	321a      	adds	r2, #26
    9684:	7812      	ldrb	r2, [r2, #0]
    9686:	b212      	sxth	r2, r2
    9688:	430a      	orrs	r2, r1
    968a:	b212      	sxth	r2, r2
    968c:	b292      	uxth	r2, r2
    968e:	431a      	orrs	r2, r3
    9690:	68fb      	ldr	r3, [r7, #12]
    9692:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    9694:	2392      	movs	r3, #146	; 0x92
    9696:	009b      	lsls	r3, r3, #2
    9698:	18fb      	adds	r3, r7, r3
    969a:	681b      	ldr	r3, [r3, #0]
    969c:	331f      	adds	r3, #31
    969e:	781b      	ldrb	r3, [r3, #0]
    96a0:	061a      	lsls	r2, r3, #24
    96a2:	2392      	movs	r3, #146	; 0x92
    96a4:	009b      	lsls	r3, r3, #2
    96a6:	18fb      	adds	r3, r7, r3
    96a8:	681b      	ldr	r3, [r3, #0]
    96aa:	331e      	adds	r3, #30
    96ac:	781b      	ldrb	r3, [r3, #0]
    96ae:	041b      	lsls	r3, r3, #16
    96b0:	4313      	orrs	r3, r2
    96b2:	2292      	movs	r2, #146	; 0x92
    96b4:	0092      	lsls	r2, r2, #2
    96b6:	18ba      	adds	r2, r7, r2
    96b8:	6812      	ldr	r2, [r2, #0]
    96ba:	321d      	adds	r2, #29
    96bc:	7812      	ldrb	r2, [r2, #0]
    96be:	0212      	lsls	r2, r2, #8
    96c0:	4313      	orrs	r3, r2
    96c2:	2292      	movs	r2, #146	; 0x92
    96c4:	0092      	lsls	r2, r2, #2
    96c6:	18ba      	adds	r2, r7, r2
    96c8:	6812      	ldr	r2, [r2, #0]
    96ca:	321c      	adds	r2, #28
    96cc:	7812      	ldrb	r2, [r2, #0]
    96ce:	431a      	orrs	r2, r3
    96d0:	68fb      	ldr	r3, [r7, #12]
    96d2:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
    96d4:	68fb      	ldr	r3, [r7, #12]
    96d6:	2200      	movs	r2, #0
    96d8:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
    96da:	68fb      	ldr	r3, [r7, #12]
    96dc:	2200      	movs	r2, #0
    96de:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    96e0:	2387      	movs	r3, #135	; 0x87
    96e2:	009b      	lsls	r3, r3, #2
    96e4:	18fb      	adds	r3, r7, r3
    96e6:	681a      	ldr	r2, [r3, #0]
    96e8:	68fb      	ldr	r3, [r7, #12]
    96ea:	601a      	str	r2, [r3, #0]
    96ec:	2387      	movs	r3, #135	; 0x87
    96ee:	009b      	lsls	r3, r3, #2
    96f0:	18fb      	adds	r3, r7, r3
    96f2:	681b      	ldr	r3, [r3, #0]
    96f4:	88da      	ldrh	r2, [r3, #6]
    96f6:	68fb      	ldr	r3, [r7, #12]
    96f8:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
    96fa:	4b05      	ldr	r3, [pc, #20]	; (9710 <f_open+0x52c>)
    96fc:	18fb      	adds	r3, r7, r3
    96fe:	781b      	ldrb	r3, [r3, #0]
}
    9700:	0018      	movs	r0, r3
    9702:	46bd      	mov	sp, r7
    9704:	2395      	movs	r3, #149	; 0x95
    9706:	009b      	lsls	r3, r3, #2
    9708:	449d      	add	sp, r3
    970a:	bd90      	pop	{r4, r7, pc}
    970c:	fffffdb7 	.word	0xfffffdb7
    9710:	0000024f 	.word	0x0000024f

00009714 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    9714:	b590      	push	{r4, r7, lr}
    9716:	b08b      	sub	sp, #44	; 0x2c
    9718:	af00      	add	r7, sp, #0
    971a:	60f8      	str	r0, [r7, #12]
    971c:	60b9      	str	r1, [r7, #8]
    971e:	607a      	str	r2, [r7, #4]
    9720:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    9722:	68bb      	ldr	r3, [r7, #8]
    9724:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    9726:	683b      	ldr	r3, [r7, #0]
    9728:	2200      	movs	r2, #0
    972a:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    972c:	68fb      	ldr	r3, [r7, #12]
    972e:	681a      	ldr	r2, [r3, #0]
    9730:	68fb      	ldr	r3, [r7, #12]
    9732:	889b      	ldrh	r3, [r3, #4]
    9734:	2117      	movs	r1, #23
    9736:	187c      	adds	r4, r7, r1
    9738:	0019      	movs	r1, r3
    973a:	0010      	movs	r0, r2
    973c:	4bc3      	ldr	r3, [pc, #780]	; (9a4c <f_write+0x338>)
    973e:	4798      	blx	r3
    9740:	0003      	movs	r3, r0
    9742:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    9744:	2317      	movs	r3, #23
    9746:	18fb      	adds	r3, r7, r3
    9748:	781b      	ldrb	r3, [r3, #0]
    974a:	2b00      	cmp	r3, #0
    974c:	d003      	beq.n	9756 <f_write+0x42>
    974e:	2317      	movs	r3, #23
    9750:	18fb      	adds	r3, r7, r3
    9752:	781b      	ldrb	r3, [r3, #0]
    9754:	e176      	b.n	9a44 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    9756:	68fb      	ldr	r3, [r7, #12]
    9758:	799b      	ldrb	r3, [r3, #6]
    975a:	b25b      	sxtb	r3, r3
    975c:	2b00      	cmp	r3, #0
    975e:	da01      	bge.n	9764 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    9760:	2302      	movs	r3, #2
    9762:	e16f      	b.n	9a44 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    9764:	68fb      	ldr	r3, [r7, #12]
    9766:	799b      	ldrb	r3, [r3, #6]
    9768:	001a      	movs	r2, r3
    976a:	2302      	movs	r3, #2
    976c:	4013      	ands	r3, r2
    976e:	d101      	bne.n	9774 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    9770:	2307      	movs	r3, #7
    9772:	e167      	b.n	9a44 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    9774:	68fb      	ldr	r3, [r7, #12]
    9776:	68da      	ldr	r2, [r3, #12]
    9778:	687b      	ldr	r3, [r7, #4]
    977a:	18d2      	adds	r2, r2, r3
    977c:	68fb      	ldr	r3, [r7, #12]
    977e:	68db      	ldr	r3, [r3, #12]
    9780:	429a      	cmp	r2, r3
    9782:	d300      	bcc.n	9786 <f_write+0x72>
    9784:	e146      	b.n	9a14 <f_write+0x300>
    9786:	2300      	movs	r3, #0
    9788:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
    978a:	e143      	b.n	9a14 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    978c:	68fb      	ldr	r3, [r7, #12]
    978e:	689b      	ldr	r3, [r3, #8]
    9790:	05db      	lsls	r3, r3, #23
    9792:	0ddb      	lsrs	r3, r3, #23
    9794:	d000      	beq.n	9798 <f_write+0x84>
    9796:	e0f6      	b.n	9986 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    9798:	68fb      	ldr	r3, [r7, #12]
    979a:	689b      	ldr	r3, [r3, #8]
    979c:	0a5b      	lsrs	r3, r3, #9
    979e:	b2da      	uxtb	r2, r3
    97a0:	68fb      	ldr	r3, [r7, #12]
    97a2:	681b      	ldr	r3, [r3, #0]
    97a4:	789b      	ldrb	r3, [r3, #2]
    97a6:	3b01      	subs	r3, #1
    97a8:	b2d9      	uxtb	r1, r3
    97aa:	2316      	movs	r3, #22
    97ac:	18fb      	adds	r3, r7, r3
    97ae:	400a      	ands	r2, r1
    97b0:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
    97b2:	2316      	movs	r3, #22
    97b4:	18fb      	adds	r3, r7, r3
    97b6:	781b      	ldrb	r3, [r3, #0]
    97b8:	2b00      	cmp	r3, #0
    97ba:	d140      	bne.n	983e <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    97bc:	68fb      	ldr	r3, [r7, #12]
    97be:	689b      	ldr	r3, [r3, #8]
    97c0:	2b00      	cmp	r3, #0
    97c2:	d111      	bne.n	97e8 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    97c4:	68fb      	ldr	r3, [r7, #12]
    97c6:	691b      	ldr	r3, [r3, #16]
    97c8:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
    97ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    97cc:	2b00      	cmp	r3, #0
    97ce:	d115      	bne.n	97fc <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    97d0:	68fb      	ldr	r3, [r7, #12]
    97d2:	681b      	ldr	r3, [r3, #0]
    97d4:	2100      	movs	r1, #0
    97d6:	0018      	movs	r0, r3
    97d8:	4b9d      	ldr	r3, [pc, #628]	; (9a50 <f_write+0x33c>)
    97da:	4798      	blx	r3
    97dc:	0003      	movs	r3, r0
    97de:	627b      	str	r3, [r7, #36]	; 0x24
    97e0:	68fb      	ldr	r3, [r7, #12]
    97e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    97e4:	611a      	str	r2, [r3, #16]
    97e6:	e009      	b.n	97fc <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    97e8:	68fb      	ldr	r3, [r7, #12]
    97ea:	681a      	ldr	r2, [r3, #0]
    97ec:	68fb      	ldr	r3, [r7, #12]
    97ee:	695b      	ldr	r3, [r3, #20]
    97f0:	0019      	movs	r1, r3
    97f2:	0010      	movs	r0, r2
    97f4:	4b96      	ldr	r3, [pc, #600]	; (9a50 <f_write+0x33c>)
    97f6:	4798      	blx	r3
    97f8:	0003      	movs	r3, r0
    97fa:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    97fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    97fe:	2b00      	cmp	r3, #0
    9800:	d100      	bne.n	9804 <f_write+0xf0>
    9802:	e10c      	b.n	9a1e <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    9804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9806:	2b01      	cmp	r3, #1
    9808:	d109      	bne.n	981e <f_write+0x10a>
    980a:	68fb      	ldr	r3, [r7, #12]
    980c:	799b      	ldrb	r3, [r3, #6]
    980e:	2280      	movs	r2, #128	; 0x80
    9810:	4252      	negs	r2, r2
    9812:	4313      	orrs	r3, r2
    9814:	b2da      	uxtb	r2, r3
    9816:	68fb      	ldr	r3, [r7, #12]
    9818:	719a      	strb	r2, [r3, #6]
    981a:	2302      	movs	r3, #2
    981c:	e112      	b.n	9a44 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9820:	3301      	adds	r3, #1
    9822:	d109      	bne.n	9838 <f_write+0x124>
    9824:	68fb      	ldr	r3, [r7, #12]
    9826:	799b      	ldrb	r3, [r3, #6]
    9828:	2280      	movs	r2, #128	; 0x80
    982a:	4252      	negs	r2, r2
    982c:	4313      	orrs	r3, r2
    982e:	b2da      	uxtb	r2, r3
    9830:	68fb      	ldr	r3, [r7, #12]
    9832:	719a      	strb	r2, [r3, #6]
    9834:	2301      	movs	r3, #1
    9836:	e105      	b.n	9a44 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
    9838:	68fb      	ldr	r3, [r7, #12]
    983a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    983c:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    983e:	68fb      	ldr	r3, [r7, #12]
    9840:	681b      	ldr	r3, [r3, #0]
    9842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9844:	68fb      	ldr	r3, [r7, #12]
    9846:	699b      	ldr	r3, [r3, #24]
    9848:	429a      	cmp	r2, r3
    984a:	d111      	bne.n	9870 <f_write+0x15c>
    984c:	68fb      	ldr	r3, [r7, #12]
    984e:	681b      	ldr	r3, [r3, #0]
    9850:	2100      	movs	r1, #0
    9852:	0018      	movs	r0, r3
    9854:	4b7f      	ldr	r3, [pc, #508]	; (9a54 <f_write+0x340>)
    9856:	4798      	blx	r3
    9858:	1e03      	subs	r3, r0, #0
    985a:	d009      	beq.n	9870 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    985c:	68fb      	ldr	r3, [r7, #12]
    985e:	799b      	ldrb	r3, [r3, #6]
    9860:	2280      	movs	r2, #128	; 0x80
    9862:	4252      	negs	r2, r2
    9864:	4313      	orrs	r3, r2
    9866:	b2da      	uxtb	r2, r3
    9868:	68fb      	ldr	r3, [r7, #12]
    986a:	719a      	strb	r2, [r3, #6]
    986c:	2301      	movs	r3, #1
    986e:	e0e9      	b.n	9a44 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    9870:	68fb      	ldr	r3, [r7, #12]
    9872:	681a      	ldr	r2, [r3, #0]
    9874:	68fb      	ldr	r3, [r7, #12]
    9876:	695b      	ldr	r3, [r3, #20]
    9878:	0019      	movs	r1, r3
    987a:	0010      	movs	r0, r2
    987c:	4b76      	ldr	r3, [pc, #472]	; (9a58 <f_write+0x344>)
    987e:	4798      	blx	r3
    9880:	0003      	movs	r3, r0
    9882:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    9884:	693b      	ldr	r3, [r7, #16]
    9886:	2b00      	cmp	r3, #0
    9888:	d109      	bne.n	989e <f_write+0x18a>
    988a:	68fb      	ldr	r3, [r7, #12]
    988c:	799b      	ldrb	r3, [r3, #6]
    988e:	2280      	movs	r2, #128	; 0x80
    9890:	4252      	negs	r2, r2
    9892:	4313      	orrs	r3, r2
    9894:	b2da      	uxtb	r2, r3
    9896:	68fb      	ldr	r3, [r7, #12]
    9898:	719a      	strb	r2, [r3, #6]
    989a:	2302      	movs	r3, #2
    989c:	e0d2      	b.n	9a44 <f_write+0x330>
			sect += csect;
    989e:	2316      	movs	r3, #22
    98a0:	18fb      	adds	r3, r7, r3
    98a2:	781b      	ldrb	r3, [r3, #0]
    98a4:	693a      	ldr	r2, [r7, #16]
    98a6:	18d3      	adds	r3, r2, r3
    98a8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    98aa:	687b      	ldr	r3, [r7, #4]
    98ac:	0a5b      	lsrs	r3, r3, #9
    98ae:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
    98b0:	69fb      	ldr	r3, [r7, #28]
    98b2:	2b00      	cmp	r3, #0
    98b4:	d048      	beq.n	9948 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    98b6:	2316      	movs	r3, #22
    98b8:	18fb      	adds	r3, r7, r3
    98ba:	781a      	ldrb	r2, [r3, #0]
    98bc:	69fb      	ldr	r3, [r7, #28]
    98be:	18d2      	adds	r2, r2, r3
    98c0:	68fb      	ldr	r3, [r7, #12]
    98c2:	681b      	ldr	r3, [r3, #0]
    98c4:	789b      	ldrb	r3, [r3, #2]
    98c6:	429a      	cmp	r2, r3
    98c8:	d908      	bls.n	98dc <f_write+0x1c8>
					cc = fp->fs->csize - csect;
    98ca:	68fb      	ldr	r3, [r7, #12]
    98cc:	681b      	ldr	r3, [r3, #0]
    98ce:	789b      	ldrb	r3, [r3, #2]
    98d0:	001a      	movs	r2, r3
    98d2:	2316      	movs	r3, #22
    98d4:	18fb      	adds	r3, r7, r3
    98d6:	781b      	ldrb	r3, [r3, #0]
    98d8:	1ad3      	subs	r3, r2, r3
    98da:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    98dc:	68fb      	ldr	r3, [r7, #12]
    98de:	681b      	ldr	r3, [r3, #0]
    98e0:	7858      	ldrb	r0, [r3, #1]
    98e2:	69fb      	ldr	r3, [r7, #28]
    98e4:	b2db      	uxtb	r3, r3
    98e6:	693a      	ldr	r2, [r7, #16]
    98e8:	69b9      	ldr	r1, [r7, #24]
    98ea:	4c5c      	ldr	r4, [pc, #368]	; (9a5c <f_write+0x348>)
    98ec:	47a0      	blx	r4
    98ee:	1e03      	subs	r3, r0, #0
    98f0:	d009      	beq.n	9906 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
    98f2:	68fb      	ldr	r3, [r7, #12]
    98f4:	799b      	ldrb	r3, [r3, #6]
    98f6:	2280      	movs	r2, #128	; 0x80
    98f8:	4252      	negs	r2, r2
    98fa:	4313      	orrs	r3, r2
    98fc:	b2da      	uxtb	r2, r3
    98fe:	68fb      	ldr	r3, [r7, #12]
    9900:	719a      	strb	r2, [r3, #6]
    9902:	2301      	movs	r3, #1
    9904:	e09e      	b.n	9a44 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    9906:	68fb      	ldr	r3, [r7, #12]
    9908:	681b      	ldr	r3, [r3, #0]
    990a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    990c:	693b      	ldr	r3, [r7, #16]
    990e:	1ad2      	subs	r2, r2, r3
    9910:	69fb      	ldr	r3, [r7, #28]
    9912:	429a      	cmp	r2, r3
    9914:	d214      	bcs.n	9940 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    9916:	68fb      	ldr	r3, [r7, #12]
    9918:	681b      	ldr	r3, [r3, #0]
    991a:	3330      	adds	r3, #48	; 0x30
    991c:	0018      	movs	r0, r3
    991e:	68fb      	ldr	r3, [r7, #12]
    9920:	681b      	ldr	r3, [r3, #0]
    9922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9924:	693b      	ldr	r3, [r7, #16]
    9926:	1ad3      	subs	r3, r2, r3
    9928:	025b      	lsls	r3, r3, #9
    992a:	69ba      	ldr	r2, [r7, #24]
    992c:	18d1      	adds	r1, r2, r3
    992e:	2380      	movs	r3, #128	; 0x80
    9930:	009b      	lsls	r3, r3, #2
    9932:	001a      	movs	r2, r3
    9934:	4b4a      	ldr	r3, [pc, #296]	; (9a60 <f_write+0x34c>)
    9936:	4798      	blx	r3
					fp->fs->wflag = 0;
    9938:	68fb      	ldr	r3, [r7, #12]
    993a:	681b      	ldr	r3, [r3, #0]
    993c:	2200      	movs	r2, #0
    993e:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    9940:	69fb      	ldr	r3, [r7, #28]
    9942:	025b      	lsls	r3, r3, #9
    9944:	623b      	str	r3, [r7, #32]
				continue;
    9946:	e051      	b.n	99ec <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    9948:	68fb      	ldr	r3, [r7, #12]
    994a:	689a      	ldr	r2, [r3, #8]
    994c:	68fb      	ldr	r3, [r7, #12]
    994e:	68db      	ldr	r3, [r3, #12]
    9950:	429a      	cmp	r2, r3
    9952:	d315      	bcc.n	9980 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    9954:	68fb      	ldr	r3, [r7, #12]
    9956:	681b      	ldr	r3, [r3, #0]
    9958:	2100      	movs	r1, #0
    995a:	0018      	movs	r0, r3
    995c:	4b3d      	ldr	r3, [pc, #244]	; (9a54 <f_write+0x340>)
    995e:	4798      	blx	r3
    9960:	1e03      	subs	r3, r0, #0
    9962:	d009      	beq.n	9978 <f_write+0x264>
    9964:	68fb      	ldr	r3, [r7, #12]
    9966:	799b      	ldrb	r3, [r3, #6]
    9968:	2280      	movs	r2, #128	; 0x80
    996a:	4252      	negs	r2, r2
    996c:	4313      	orrs	r3, r2
    996e:	b2da      	uxtb	r2, r3
    9970:	68fb      	ldr	r3, [r7, #12]
    9972:	719a      	strb	r2, [r3, #6]
    9974:	2301      	movs	r3, #1
    9976:	e065      	b.n	9a44 <f_write+0x330>
				fp->fs->winsect = sect;
    9978:	68fb      	ldr	r3, [r7, #12]
    997a:	681b      	ldr	r3, [r3, #0]
    997c:	693a      	ldr	r2, [r7, #16]
    997e:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    9980:	68fb      	ldr	r3, [r7, #12]
    9982:	693a      	ldr	r2, [r7, #16]
    9984:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    9986:	68fb      	ldr	r3, [r7, #12]
    9988:	689b      	ldr	r3, [r3, #8]
    998a:	05db      	lsls	r3, r3, #23
    998c:	0ddb      	lsrs	r3, r3, #23
    998e:	2280      	movs	r2, #128	; 0x80
    9990:	0092      	lsls	r2, r2, #2
    9992:	1ad3      	subs	r3, r2, r3
    9994:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
    9996:	6a3a      	ldr	r2, [r7, #32]
    9998:	687b      	ldr	r3, [r7, #4]
    999a:	429a      	cmp	r2, r3
    999c:	d901      	bls.n	99a2 <f_write+0x28e>
    999e:	687b      	ldr	r3, [r7, #4]
    99a0:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    99a2:	68fb      	ldr	r3, [r7, #12]
    99a4:	681a      	ldr	r2, [r3, #0]
    99a6:	68fb      	ldr	r3, [r7, #12]
    99a8:	699b      	ldr	r3, [r3, #24]
    99aa:	0019      	movs	r1, r3
    99ac:	0010      	movs	r0, r2
    99ae:	4b29      	ldr	r3, [pc, #164]	; (9a54 <f_write+0x340>)
    99b0:	4798      	blx	r3
    99b2:	1e03      	subs	r3, r0, #0
    99b4:	d009      	beq.n	99ca <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
    99b6:	68fb      	ldr	r3, [r7, #12]
    99b8:	799b      	ldrb	r3, [r3, #6]
    99ba:	2280      	movs	r2, #128	; 0x80
    99bc:	4252      	negs	r2, r2
    99be:	4313      	orrs	r3, r2
    99c0:	b2da      	uxtb	r2, r3
    99c2:	68fb      	ldr	r3, [r7, #12]
    99c4:	719a      	strb	r2, [r3, #6]
    99c6:	2301      	movs	r3, #1
    99c8:	e03c      	b.n	9a44 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    99ca:	68fb      	ldr	r3, [r7, #12]
    99cc:	681a      	ldr	r2, [r3, #0]
    99ce:	68fb      	ldr	r3, [r7, #12]
    99d0:	689b      	ldr	r3, [r3, #8]
    99d2:	05db      	lsls	r3, r3, #23
    99d4:	0ddb      	lsrs	r3, r3, #23
    99d6:	3330      	adds	r3, #48	; 0x30
    99d8:	18d3      	adds	r3, r2, r3
    99da:	6a3a      	ldr	r2, [r7, #32]
    99dc:	69b9      	ldr	r1, [r7, #24]
    99de:	0018      	movs	r0, r3
    99e0:	4b1f      	ldr	r3, [pc, #124]	; (9a60 <f_write+0x34c>)
    99e2:	4798      	blx	r3
		fp->fs->wflag = 1;
    99e4:	68fb      	ldr	r3, [r7, #12]
    99e6:	681b      	ldr	r3, [r3, #0]
    99e8:	2201      	movs	r2, #1
    99ea:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    99ec:	69ba      	ldr	r2, [r7, #24]
    99ee:	6a3b      	ldr	r3, [r7, #32]
    99f0:	18d3      	adds	r3, r2, r3
    99f2:	61bb      	str	r3, [r7, #24]
    99f4:	68fb      	ldr	r3, [r7, #12]
    99f6:	689a      	ldr	r2, [r3, #8]
    99f8:	6a3b      	ldr	r3, [r7, #32]
    99fa:	18d2      	adds	r2, r2, r3
    99fc:	68fb      	ldr	r3, [r7, #12]
    99fe:	609a      	str	r2, [r3, #8]
    9a00:	683b      	ldr	r3, [r7, #0]
    9a02:	681a      	ldr	r2, [r3, #0]
    9a04:	6a3b      	ldr	r3, [r7, #32]
    9a06:	18d2      	adds	r2, r2, r3
    9a08:	683b      	ldr	r3, [r7, #0]
    9a0a:	601a      	str	r2, [r3, #0]
    9a0c:	687a      	ldr	r2, [r7, #4]
    9a0e:	6a3b      	ldr	r3, [r7, #32]
    9a10:	1ad3      	subs	r3, r2, r3
    9a12:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
    9a14:	687b      	ldr	r3, [r7, #4]
    9a16:	2b00      	cmp	r3, #0
    9a18:	d000      	beq.n	9a1c <f_write+0x308>
    9a1a:	e6b7      	b.n	978c <f_write+0x78>
    9a1c:	e000      	b.n	9a20 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    9a1e:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    9a20:	68fb      	ldr	r3, [r7, #12]
    9a22:	689a      	ldr	r2, [r3, #8]
    9a24:	68fb      	ldr	r3, [r7, #12]
    9a26:	68db      	ldr	r3, [r3, #12]
    9a28:	429a      	cmp	r2, r3
    9a2a:	d903      	bls.n	9a34 <f_write+0x320>
    9a2c:	68fb      	ldr	r3, [r7, #12]
    9a2e:	689a      	ldr	r2, [r3, #8]
    9a30:	68fb      	ldr	r3, [r7, #12]
    9a32:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    9a34:	68fb      	ldr	r3, [r7, #12]
    9a36:	799b      	ldrb	r3, [r3, #6]
    9a38:	2220      	movs	r2, #32
    9a3a:	4313      	orrs	r3, r2
    9a3c:	b2da      	uxtb	r2, r3
    9a3e:	68fb      	ldr	r3, [r7, #12]
    9a40:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
    9a42:	2300      	movs	r3, #0
}
    9a44:	0018      	movs	r0, r3
    9a46:	46bd      	mov	sp, r7
    9a48:	b00b      	add	sp, #44	; 0x2c
    9a4a:	bd90      	pop	{r4, r7, pc}
    9a4c:	00009139 	.word	0x00009139
    9a50:	000077c5 	.word	0x000077c5
    9a54:	000070bd 	.word	0x000070bd
    9a58:	0000731d 	.word	0x0000731d
    9a5c:	00006da9 	.word	0x00006da9
    9a60:	00006fd9 	.word	0x00006fd9

00009a64 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    9a64:	b590      	push	{r4, r7, lr}
    9a66:	b087      	sub	sp, #28
    9a68:	af00      	add	r7, sp, #0
    9a6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    9a6c:	687b      	ldr	r3, [r7, #4]
    9a6e:	681a      	ldr	r2, [r3, #0]
    9a70:	687b      	ldr	r3, [r7, #4]
    9a72:	889b      	ldrh	r3, [r3, #4]
    9a74:	2117      	movs	r1, #23
    9a76:	187c      	adds	r4, r7, r1
    9a78:	0019      	movs	r1, r3
    9a7a:	0010      	movs	r0, r2
    9a7c:	4b55      	ldr	r3, [pc, #340]	; (9bd4 <f_sync+0x170>)
    9a7e:	4798      	blx	r3
    9a80:	0003      	movs	r3, r0
    9a82:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    9a84:	2317      	movs	r3, #23
    9a86:	18fb      	adds	r3, r7, r3
    9a88:	781b      	ldrb	r3, [r3, #0]
    9a8a:	2b00      	cmp	r3, #0
    9a8c:	d000      	beq.n	9a90 <f_sync+0x2c>
    9a8e:	e09a      	b.n	9bc6 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    9a90:	687b      	ldr	r3, [r7, #4]
    9a92:	799b      	ldrb	r3, [r3, #6]
    9a94:	001a      	movs	r2, r3
    9a96:	2320      	movs	r3, #32
    9a98:	4013      	ands	r3, r2
    9a9a:	d100      	bne.n	9a9e <f_sync+0x3a>
    9a9c:	e093      	b.n	9bc6 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    9a9e:	687b      	ldr	r3, [r7, #4]
    9aa0:	681a      	ldr	r2, [r3, #0]
    9aa2:	687b      	ldr	r3, [r7, #4]
    9aa4:	69db      	ldr	r3, [r3, #28]
    9aa6:	2117      	movs	r1, #23
    9aa8:	187c      	adds	r4, r7, r1
    9aaa:	0019      	movs	r1, r3
    9aac:	0010      	movs	r0, r2
    9aae:	4b4a      	ldr	r3, [pc, #296]	; (9bd8 <f_sync+0x174>)
    9ab0:	4798      	blx	r3
    9ab2:	0003      	movs	r3, r0
    9ab4:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
    9ab6:	2317      	movs	r3, #23
    9ab8:	18fb      	adds	r3, r7, r3
    9aba:	781b      	ldrb	r3, [r3, #0]
    9abc:	2b00      	cmp	r3, #0
    9abe:	d000      	beq.n	9ac2 <f_sync+0x5e>
    9ac0:	e081      	b.n	9bc6 <f_sync+0x162>
				dir = fp->dir_ptr;
    9ac2:	687b      	ldr	r3, [r7, #4]
    9ac4:	6a1b      	ldr	r3, [r3, #32]
    9ac6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    9ac8:	693b      	ldr	r3, [r7, #16]
    9aca:	330b      	adds	r3, #11
    9acc:	693a      	ldr	r2, [r7, #16]
    9ace:	320b      	adds	r2, #11
    9ad0:	7812      	ldrb	r2, [r2, #0]
    9ad2:	2120      	movs	r1, #32
    9ad4:	430a      	orrs	r2, r1
    9ad6:	b2d2      	uxtb	r2, r2
    9ad8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    9ada:	693b      	ldr	r3, [r7, #16]
    9adc:	331c      	adds	r3, #28
    9ade:	001a      	movs	r2, r3
    9ae0:	687b      	ldr	r3, [r7, #4]
    9ae2:	68db      	ldr	r3, [r3, #12]
    9ae4:	b2db      	uxtb	r3, r3
    9ae6:	7013      	strb	r3, [r2, #0]
    9ae8:	693b      	ldr	r3, [r7, #16]
    9aea:	331d      	adds	r3, #29
    9aec:	001a      	movs	r2, r3
    9aee:	687b      	ldr	r3, [r7, #4]
    9af0:	68db      	ldr	r3, [r3, #12]
    9af2:	b29b      	uxth	r3, r3
    9af4:	0a1b      	lsrs	r3, r3, #8
    9af6:	b29b      	uxth	r3, r3
    9af8:	b2db      	uxtb	r3, r3
    9afa:	7013      	strb	r3, [r2, #0]
    9afc:	693b      	ldr	r3, [r7, #16]
    9afe:	331e      	adds	r3, #30
    9b00:	001a      	movs	r2, r3
    9b02:	687b      	ldr	r3, [r7, #4]
    9b04:	68db      	ldr	r3, [r3, #12]
    9b06:	0c1b      	lsrs	r3, r3, #16
    9b08:	b2db      	uxtb	r3, r3
    9b0a:	7013      	strb	r3, [r2, #0]
    9b0c:	693b      	ldr	r3, [r7, #16]
    9b0e:	331f      	adds	r3, #31
    9b10:	001a      	movs	r2, r3
    9b12:	687b      	ldr	r3, [r7, #4]
    9b14:	68db      	ldr	r3, [r3, #12]
    9b16:	0e1b      	lsrs	r3, r3, #24
    9b18:	b2db      	uxtb	r3, r3
    9b1a:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    9b1c:	693b      	ldr	r3, [r7, #16]
    9b1e:	331a      	adds	r3, #26
    9b20:	001a      	movs	r2, r3
    9b22:	687b      	ldr	r3, [r7, #4]
    9b24:	691b      	ldr	r3, [r3, #16]
    9b26:	b2db      	uxtb	r3, r3
    9b28:	7013      	strb	r3, [r2, #0]
    9b2a:	693b      	ldr	r3, [r7, #16]
    9b2c:	331b      	adds	r3, #27
    9b2e:	001a      	movs	r2, r3
    9b30:	687b      	ldr	r3, [r7, #4]
    9b32:	691b      	ldr	r3, [r3, #16]
    9b34:	b29b      	uxth	r3, r3
    9b36:	0a1b      	lsrs	r3, r3, #8
    9b38:	b29b      	uxth	r3, r3
    9b3a:	b2db      	uxtb	r3, r3
    9b3c:	7013      	strb	r3, [r2, #0]
    9b3e:	693b      	ldr	r3, [r7, #16]
    9b40:	3314      	adds	r3, #20
    9b42:	001a      	movs	r2, r3
    9b44:	687b      	ldr	r3, [r7, #4]
    9b46:	691b      	ldr	r3, [r3, #16]
    9b48:	0c1b      	lsrs	r3, r3, #16
    9b4a:	b2db      	uxtb	r3, r3
    9b4c:	7013      	strb	r3, [r2, #0]
    9b4e:	693b      	ldr	r3, [r7, #16]
    9b50:	3315      	adds	r3, #21
    9b52:	001a      	movs	r2, r3
    9b54:	687b      	ldr	r3, [r7, #4]
    9b56:	691b      	ldr	r3, [r3, #16]
    9b58:	0c1b      	lsrs	r3, r3, #16
    9b5a:	b29b      	uxth	r3, r3
    9b5c:	0a1b      	lsrs	r3, r3, #8
    9b5e:	b29b      	uxth	r3, r3
    9b60:	b2db      	uxtb	r3, r3
    9b62:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
    9b64:	4b1d      	ldr	r3, [pc, #116]	; (9bdc <f_sync+0x178>)
    9b66:	4798      	blx	r3
    9b68:	0003      	movs	r3, r0
    9b6a:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
    9b6c:	693b      	ldr	r3, [r7, #16]
    9b6e:	3316      	adds	r3, #22
    9b70:	68fa      	ldr	r2, [r7, #12]
    9b72:	b2d2      	uxtb	r2, r2
    9b74:	701a      	strb	r2, [r3, #0]
    9b76:	693b      	ldr	r3, [r7, #16]
    9b78:	3317      	adds	r3, #23
    9b7a:	68fa      	ldr	r2, [r7, #12]
    9b7c:	b292      	uxth	r2, r2
    9b7e:	0a12      	lsrs	r2, r2, #8
    9b80:	b292      	uxth	r2, r2
    9b82:	b2d2      	uxtb	r2, r2
    9b84:	701a      	strb	r2, [r3, #0]
    9b86:	693b      	ldr	r3, [r7, #16]
    9b88:	3318      	adds	r3, #24
    9b8a:	68fa      	ldr	r2, [r7, #12]
    9b8c:	0c12      	lsrs	r2, r2, #16
    9b8e:	b2d2      	uxtb	r2, r2
    9b90:	701a      	strb	r2, [r3, #0]
    9b92:	693b      	ldr	r3, [r7, #16]
    9b94:	3319      	adds	r3, #25
    9b96:	68fa      	ldr	r2, [r7, #12]
    9b98:	0e12      	lsrs	r2, r2, #24
    9b9a:	b2d2      	uxtb	r2, r2
    9b9c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
    9b9e:	687b      	ldr	r3, [r7, #4]
    9ba0:	799b      	ldrb	r3, [r3, #6]
    9ba2:	2220      	movs	r2, #32
    9ba4:	4393      	bics	r3, r2
    9ba6:	b2da      	uxtb	r2, r3
    9ba8:	687b      	ldr	r3, [r7, #4]
    9baa:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
    9bac:	687b      	ldr	r3, [r7, #4]
    9bae:	681b      	ldr	r3, [r3, #0]
    9bb0:	2201      	movs	r2, #1
    9bb2:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
    9bb4:	687b      	ldr	r3, [r7, #4]
    9bb6:	681b      	ldr	r3, [r3, #0]
    9bb8:	2217      	movs	r2, #23
    9bba:	18bc      	adds	r4, r7, r2
    9bbc:	0018      	movs	r0, r3
    9bbe:	4b08      	ldr	r3, [pc, #32]	; (9be0 <f_sync+0x17c>)
    9bc0:	4798      	blx	r3
    9bc2:	0003      	movs	r3, r0
    9bc4:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
    9bc6:	2317      	movs	r3, #23
    9bc8:	18fb      	adds	r3, r7, r3
    9bca:	781b      	ldrb	r3, [r3, #0]
}
    9bcc:	0018      	movs	r0, r3
    9bce:	46bd      	mov	sp, r7
    9bd0:	b007      	add	sp, #28
    9bd2:	bd90      	pop	{r4, r7, pc}
    9bd4:	00009139 	.word	0x00009139
    9bd8:	000070bd 	.word	0x000070bd
    9bdc:	00006f79 	.word	0x00006f79
    9be0:	00007185 	.word	0x00007185

00009be4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    9be4:	b590      	push	{r4, r7, lr}
    9be6:	b085      	sub	sp, #20
    9be8:	af00      	add	r7, sp, #0
    9bea:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    9bec:	230f      	movs	r3, #15
    9bee:	18fc      	adds	r4, r7, r3
    9bf0:	687b      	ldr	r3, [r7, #4]
    9bf2:	0018      	movs	r0, r3
    9bf4:	4b09      	ldr	r3, [pc, #36]	; (9c1c <f_close+0x38>)
    9bf6:	4798      	blx	r3
    9bf8:	0003      	movs	r3, r0
    9bfa:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    9bfc:	230f      	movs	r3, #15
    9bfe:	18fb      	adds	r3, r7, r3
    9c00:	781b      	ldrb	r3, [r3, #0]
    9c02:	2b00      	cmp	r3, #0
    9c04:	d102      	bne.n	9c0c <f_close+0x28>
    9c06:	687b      	ldr	r3, [r7, #4]
    9c08:	2200      	movs	r2, #0
    9c0a:	601a      	str	r2, [r3, #0]
	return res;
    9c0c:	230f      	movs	r3, #15
    9c0e:	18fb      	adds	r3, r7, r3
    9c10:	781b      	ldrb	r3, [r3, #0]
#endif
}
    9c12:	0018      	movs	r0, r3
    9c14:	46bd      	mov	sp, r7
    9c16:	b005      	add	sp, #20
    9c18:	bd90      	pop	{r4, r7, pc}
    9c1a:	46c0      	nop			; (mov r8, r8)
    9c1c:	00009a65 	.word	0x00009a65

00009c20 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    9c20:	b590      	push	{r4, r7, lr}
    9c22:	b087      	sub	sp, #28
    9c24:	af00      	add	r7, sp, #0
    9c26:	0002      	movs	r2, r0
    9c28:	6039      	str	r1, [r7, #0]
    9c2a:	1dfb      	adds	r3, r7, #7
    9c2c:	701a      	strb	r2, [r3, #0]
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    9c2e:	230c      	movs	r3, #12
    9c30:	18fb      	adds	r3, r7, r3
    9c32:	1dfa      	adds	r2, r7, #7
    9c34:	7812      	ldrb	r2, [r2, #0]
    9c36:	701a      	strb	r2, [r3, #0]
	btw = 1;
    9c38:	2301      	movs	r3, #1
    9c3a:	617b      	str	r3, [r7, #20]
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    9c3c:	2310      	movs	r3, #16
    9c3e:	18fb      	adds	r3, r7, r3
    9c40:	697a      	ldr	r2, [r7, #20]
    9c42:	210c      	movs	r1, #12
    9c44:	1879      	adds	r1, r7, r1
    9c46:	6838      	ldr	r0, [r7, #0]
    9c48:	4c06      	ldr	r4, [pc, #24]	; (9c64 <f_putc+0x44>)
    9c4a:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    9c4c:	693a      	ldr	r2, [r7, #16]
    9c4e:	697b      	ldr	r3, [r7, #20]
    9c50:	429a      	cmp	r2, r3
    9c52:	d101      	bne.n	9c58 <f_putc+0x38>
    9c54:	2301      	movs	r3, #1
    9c56:	e001      	b.n	9c5c <f_putc+0x3c>
    9c58:	2301      	movs	r3, #1
    9c5a:	425b      	negs	r3, r3
}
    9c5c:	0018      	movs	r0, r3
    9c5e:	46bd      	mov	sp, r7
    9c60:	b007      	add	sp, #28
    9c62:	bd90      	pop	{r4, r7, pc}
    9c64:	00009715 	.word	0x00009715

00009c68 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    9c68:	b580      	push	{r7, lr}
    9c6a:	b084      	sub	sp, #16
    9c6c:	af00      	add	r7, sp, #0
    9c6e:	6078      	str	r0, [r7, #4]
    9c70:	6039      	str	r1, [r7, #0]
	int n;


	for (n = 0; *str; str++, n++) {
    9c72:	2300      	movs	r3, #0
    9c74:	60fb      	str	r3, [r7, #12]
    9c76:	e012      	b.n	9c9e <f_puts+0x36>
		if (f_putc(*str, fil) == EOF) return EOF;
    9c78:	687b      	ldr	r3, [r7, #4]
    9c7a:	781b      	ldrb	r3, [r3, #0]
    9c7c:	683a      	ldr	r2, [r7, #0]
    9c7e:	0011      	movs	r1, r2
    9c80:	0018      	movs	r0, r3
    9c82:	4b0b      	ldr	r3, [pc, #44]	; (9cb0 <f_puts+0x48>)
    9c84:	4798      	blx	r3
    9c86:	0003      	movs	r3, r0
    9c88:	3301      	adds	r3, #1
    9c8a:	d102      	bne.n	9c92 <f_puts+0x2a>
    9c8c:	2301      	movs	r3, #1
    9c8e:	425b      	negs	r3, r3
    9c90:	e00a      	b.n	9ca8 <f_puts+0x40>
	for (n = 0; *str; str++, n++) {
    9c92:	687b      	ldr	r3, [r7, #4]
    9c94:	3301      	adds	r3, #1
    9c96:	607b      	str	r3, [r7, #4]
    9c98:	68fb      	ldr	r3, [r7, #12]
    9c9a:	3301      	adds	r3, #1
    9c9c:	60fb      	str	r3, [r7, #12]
    9c9e:	687b      	ldr	r3, [r7, #4]
    9ca0:	781b      	ldrb	r3, [r3, #0]
    9ca2:	2b00      	cmp	r3, #0
    9ca4:	d1e8      	bne.n	9c78 <f_puts+0x10>
	}
	return n;
    9ca6:	68fb      	ldr	r3, [r7, #12]
}
    9ca8:	0018      	movs	r0, r3
    9caa:	46bd      	mov	sp, r7
    9cac:	b004      	add	sp, #16
    9cae:	bd80      	pop	{r7, pc}
    9cb0:	00009c21 	.word	0x00009c21

00009cb4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    9cb4:	b580      	push	{r7, lr}
    9cb6:	b084      	sub	sp, #16
    9cb8:	af00      	add	r7, sp, #0
    9cba:	0002      	movs	r2, r0
    9cbc:	6039      	str	r1, [r7, #0]
    9cbe:	1dbb      	adds	r3, r7, #6
    9cc0:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
    9cc2:	1dbb      	adds	r3, r7, #6
    9cc4:	881b      	ldrh	r3, [r3, #0]
    9cc6:	2b7f      	cmp	r3, #127	; 0x7f
    9cc8:	d805      	bhi.n	9cd6 <ff_convert+0x22>
		c = src;
    9cca:	230e      	movs	r3, #14
    9ccc:	18fb      	adds	r3, r7, r3
    9cce:	1dba      	adds	r2, r7, #6
    9cd0:	8812      	ldrh	r2, [r2, #0]
    9cd2:	801a      	strh	r2, [r3, #0]
    9cd4:	e03a      	b.n	9d4c <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    9cd6:	683b      	ldr	r3, [r7, #0]
    9cd8:	2b00      	cmp	r3, #0
    9cda:	d010      	beq.n	9cfe <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    9cdc:	1dbb      	adds	r3, r7, #6
    9cde:	881b      	ldrh	r3, [r3, #0]
    9ce0:	2bff      	cmp	r3, #255	; 0xff
    9ce2:	d807      	bhi.n	9cf4 <ff_convert+0x40>
    9ce4:	1dbb      	adds	r3, r7, #6
    9ce6:	881b      	ldrh	r3, [r3, #0]
    9ce8:	3b80      	subs	r3, #128	; 0x80
    9cea:	001a      	movs	r2, r3
    9cec:	4b1b      	ldr	r3, [pc, #108]	; (9d5c <ff_convert+0xa8>)
    9cee:	0052      	lsls	r2, r2, #1
    9cf0:	5ad2      	ldrh	r2, [r2, r3]
    9cf2:	e000      	b.n	9cf6 <ff_convert+0x42>
    9cf4:	2200      	movs	r2, #0
    9cf6:	230e      	movs	r3, #14
    9cf8:	18fb      	adds	r3, r7, r3
    9cfa:	801a      	strh	r2, [r3, #0]
    9cfc:	e026      	b.n	9d4c <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    9cfe:	230e      	movs	r3, #14
    9d00:	18fb      	adds	r3, r7, r3
    9d02:	2200      	movs	r2, #0
    9d04:	801a      	strh	r2, [r3, #0]
    9d06:	e010      	b.n	9d2a <ff_convert+0x76>
				if (src == Tbl[c]) break;
    9d08:	230e      	movs	r3, #14
    9d0a:	18fb      	adds	r3, r7, r3
    9d0c:	881a      	ldrh	r2, [r3, #0]
    9d0e:	4b13      	ldr	r3, [pc, #76]	; (9d5c <ff_convert+0xa8>)
    9d10:	0052      	lsls	r2, r2, #1
    9d12:	5ad3      	ldrh	r3, [r2, r3]
    9d14:	1dba      	adds	r2, r7, #6
    9d16:	8812      	ldrh	r2, [r2, #0]
    9d18:	429a      	cmp	r2, r3
    9d1a:	d00c      	beq.n	9d36 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
    9d1c:	230e      	movs	r3, #14
    9d1e:	18fb      	adds	r3, r7, r3
    9d20:	881a      	ldrh	r2, [r3, #0]
    9d22:	230e      	movs	r3, #14
    9d24:	18fb      	adds	r3, r7, r3
    9d26:	3201      	adds	r2, #1
    9d28:	801a      	strh	r2, [r3, #0]
    9d2a:	230e      	movs	r3, #14
    9d2c:	18fb      	adds	r3, r7, r3
    9d2e:	881b      	ldrh	r3, [r3, #0]
    9d30:	2b7f      	cmp	r3, #127	; 0x7f
    9d32:	d9e9      	bls.n	9d08 <ff_convert+0x54>
    9d34:	e000      	b.n	9d38 <ff_convert+0x84>
				if (src == Tbl[c]) break;
    9d36:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
    9d38:	230e      	movs	r3, #14
    9d3a:	18fb      	adds	r3, r7, r3
    9d3c:	881b      	ldrh	r3, [r3, #0]
    9d3e:	3380      	adds	r3, #128	; 0x80
    9d40:	b29a      	uxth	r2, r3
    9d42:	230e      	movs	r3, #14
    9d44:	18fb      	adds	r3, r7, r3
    9d46:	21ff      	movs	r1, #255	; 0xff
    9d48:	400a      	ands	r2, r1
    9d4a:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
    9d4c:	230e      	movs	r3, #14
    9d4e:	18fb      	adds	r3, r7, r3
    9d50:	881b      	ldrh	r3, [r3, #0]
}
    9d52:	0018      	movs	r0, r3
    9d54:	46bd      	mov	sp, r7
    9d56:	b004      	add	sp, #16
    9d58:	bd80      	pop	{r7, pc}
    9d5a:	46c0      	nop			; (mov r8, r8)
    9d5c:	0000b05c 	.word	0x0000b05c

00009d60 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
    9d60:	b580      	push	{r7, lr}
    9d62:	b084      	sub	sp, #16
    9d64:	af00      	add	r7, sp, #0
    9d66:	0002      	movs	r2, r0
    9d68:	1dbb      	adds	r3, r7, #6
    9d6a:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    9d6c:	2300      	movs	r3, #0
    9d6e:	60fb      	str	r3, [r7, #12]
    9d70:	e002      	b.n	9d78 <ff_wtoupper+0x18>
    9d72:	68fb      	ldr	r3, [r7, #12]
    9d74:	3301      	adds	r3, #1
    9d76:	60fb      	str	r3, [r7, #12]
    9d78:	4b0f      	ldr	r3, [pc, #60]	; (9db8 <ff_wtoupper+0x58>)
    9d7a:	68fa      	ldr	r2, [r7, #12]
    9d7c:	0052      	lsls	r2, r2, #1
    9d7e:	5ad3      	ldrh	r3, [r2, r3]
    9d80:	2b00      	cmp	r3, #0
    9d82:	d007      	beq.n	9d94 <ff_wtoupper+0x34>
    9d84:	4b0c      	ldr	r3, [pc, #48]	; (9db8 <ff_wtoupper+0x58>)
    9d86:	68fa      	ldr	r2, [r7, #12]
    9d88:	0052      	lsls	r2, r2, #1
    9d8a:	5ad3      	ldrh	r3, [r2, r3]
    9d8c:	1dba      	adds	r2, r7, #6
    9d8e:	8812      	ldrh	r2, [r2, #0]
    9d90:	429a      	cmp	r2, r3
    9d92:	d1ee      	bne.n	9d72 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    9d94:	4b08      	ldr	r3, [pc, #32]	; (9db8 <ff_wtoupper+0x58>)
    9d96:	68fa      	ldr	r2, [r7, #12]
    9d98:	0052      	lsls	r2, r2, #1
    9d9a:	5ad3      	ldrh	r3, [r2, r3]
    9d9c:	2b00      	cmp	r3, #0
    9d9e:	d004      	beq.n	9daa <ff_wtoupper+0x4a>
    9da0:	4b06      	ldr	r3, [pc, #24]	; (9dbc <ff_wtoupper+0x5c>)
    9da2:	68fa      	ldr	r2, [r7, #12]
    9da4:	0052      	lsls	r2, r2, #1
    9da6:	5ad3      	ldrh	r3, [r2, r3]
    9da8:	e001      	b.n	9dae <ff_wtoupper+0x4e>
    9daa:	1dbb      	adds	r3, r7, #6
    9dac:	881b      	ldrh	r3, [r3, #0]
}
    9dae:	0018      	movs	r0, r3
    9db0:	46bd      	mov	sp, r7
    9db2:	b004      	add	sp, #16
    9db4:	bd80      	pop	{r7, pc}
    9db6:	46c0      	nop			; (mov r8, r8)
    9db8:	0000b15c 	.word	0x0000b15c
    9dbc:	0000b33c 	.word	0x0000b33c

00009dc0 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    9dc0:	b580      	push	{r7, lr}
    9dc2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    9dc4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    9dc8:	4b02      	ldr	r3, [pc, #8]	; (9dd4 <NVIC_SystemReset+0x14>)
    9dca:	4a03      	ldr	r2, [pc, #12]	; (9dd8 <NVIC_SystemReset+0x18>)
    9dcc:	60da      	str	r2, [r3, #12]
    9dce:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    9dd2:	e7fe      	b.n	9dd2 <NVIC_SystemReset+0x12>
    9dd4:	e000ed00 	.word	0xe000ed00
    9dd8:	05fa0004 	.word	0x05fa0004

00009ddc <system_apb_clock_set_mask>:
{
    9ddc:	b580      	push	{r7, lr}
    9dde:	b082      	sub	sp, #8
    9de0:	af00      	add	r7, sp, #0
    9de2:	0002      	movs	r2, r0
    9de4:	6039      	str	r1, [r7, #0]
    9de6:	1dfb      	adds	r3, r7, #7
    9de8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    9dea:	1dfb      	adds	r3, r7, #7
    9dec:	781b      	ldrb	r3, [r3, #0]
    9dee:	2b01      	cmp	r3, #1
    9df0:	d00a      	beq.n	9e08 <system_apb_clock_set_mask+0x2c>
    9df2:	2b02      	cmp	r3, #2
    9df4:	d00f      	beq.n	9e16 <system_apb_clock_set_mask+0x3a>
    9df6:	2b00      	cmp	r3, #0
    9df8:	d114      	bne.n	9e24 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    9dfa:	4b0e      	ldr	r3, [pc, #56]	; (9e34 <system_apb_clock_set_mask+0x58>)
    9dfc:	4a0d      	ldr	r2, [pc, #52]	; (9e34 <system_apb_clock_set_mask+0x58>)
    9dfe:	6991      	ldr	r1, [r2, #24]
    9e00:	683a      	ldr	r2, [r7, #0]
    9e02:	430a      	orrs	r2, r1
    9e04:	619a      	str	r2, [r3, #24]
			break;
    9e06:	e00f      	b.n	9e28 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    9e08:	4b0a      	ldr	r3, [pc, #40]	; (9e34 <system_apb_clock_set_mask+0x58>)
    9e0a:	4a0a      	ldr	r2, [pc, #40]	; (9e34 <system_apb_clock_set_mask+0x58>)
    9e0c:	69d1      	ldr	r1, [r2, #28]
    9e0e:	683a      	ldr	r2, [r7, #0]
    9e10:	430a      	orrs	r2, r1
    9e12:	61da      	str	r2, [r3, #28]
			break;
    9e14:	e008      	b.n	9e28 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    9e16:	4b07      	ldr	r3, [pc, #28]	; (9e34 <system_apb_clock_set_mask+0x58>)
    9e18:	4a06      	ldr	r2, [pc, #24]	; (9e34 <system_apb_clock_set_mask+0x58>)
    9e1a:	6a11      	ldr	r1, [r2, #32]
    9e1c:	683a      	ldr	r2, [r7, #0]
    9e1e:	430a      	orrs	r2, r1
    9e20:	621a      	str	r2, [r3, #32]
			break;
    9e22:	e001      	b.n	9e28 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    9e24:	2317      	movs	r3, #23
    9e26:	e000      	b.n	9e2a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    9e28:	2300      	movs	r3, #0
}
    9e2a:	0018      	movs	r0, r3
    9e2c:	46bd      	mov	sp, r7
    9e2e:	b002      	add	sp, #8
    9e30:	bd80      	pop	{r7, pc}
    9e32:	46c0      	nop			; (mov r8, r8)
    9e34:	40000400 	.word	0x40000400

00009e38 <nvm_get_config_defaults>:
{
    9e38:	b580      	push	{r7, lr}
    9e3a:	b082      	sub	sp, #8
    9e3c:	af00      	add	r7, sp, #0
    9e3e:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    9e40:	687b      	ldr	r3, [r7, #4]
    9e42:	2200      	movs	r2, #0
    9e44:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    9e46:	687b      	ldr	r3, [r7, #4]
    9e48:	2201      	movs	r2, #1
    9e4a:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    9e4c:	4b08      	ldr	r3, [pc, #32]	; (9e70 <nvm_get_config_defaults+0x38>)
    9e4e:	685b      	ldr	r3, [r3, #4]
    9e50:	06db      	lsls	r3, r3, #27
    9e52:	0f1b      	lsrs	r3, r3, #28
    9e54:	b2db      	uxtb	r3, r3
    9e56:	001a      	movs	r2, r3
    9e58:	687b      	ldr	r3, [r7, #4]
    9e5a:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    9e5c:	687b      	ldr	r3, [r7, #4]
    9e5e:	2200      	movs	r2, #0
    9e60:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    9e62:	687b      	ldr	r3, [r7, #4]
    9e64:	2200      	movs	r2, #0
    9e66:	711a      	strb	r2, [r3, #4]
}
    9e68:	46c0      	nop			; (mov r8, r8)
    9e6a:	46bd      	mov	sp, r7
    9e6c:	b002      	add	sp, #8
    9e6e:	bd80      	pop	{r7, pc}
    9e70:	41004000 	.word	0x41004000

00009e74 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    9e74:	b580      	push	{r7, lr}
    9e76:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    9e78:	4b02      	ldr	r3, [pc, #8]	; (9e84 <system_reset+0x10>)
    9e7a:	4798      	blx	r3
}
    9e7c:	46c0      	nop			; (mov r8, r8)
    9e7e:	46bd      	mov	sp, r7
    9e80:	bd80      	pop	{r7, pc}
    9e82:	46c0      	nop			; (mov r8, r8)
    9e84:	00009dc1 	.word	0x00009dc1

00009e88 <system_interrupt_enable_global>:
{
    9e88:	b580      	push	{r7, lr}
    9e8a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    9e8c:	4b04      	ldr	r3, [pc, #16]	; (9ea0 <system_interrupt_enable_global+0x18>)
    9e8e:	2201      	movs	r2, #1
    9e90:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    9e92:	f3bf 8f5f 	dmb	sy
    9e96:	b662      	cpsie	i
}
    9e98:	46c0      	nop			; (mov r8, r8)
    9e9a:	46bd      	mov	sp, r7
    9e9c:	bd80      	pop	{r7, pc}
    9e9e:	46c0      	nop			; (mov r8, r8)
    9ea0:	20000009 	.word	0x20000009

00009ea4 <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    9ea4:	b580      	push	{r7, lr}
    9ea6:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    9ea8:	2102      	movs	r1, #2
    9eaa:	2001      	movs	r0, #1
    9eac:	4b02      	ldr	r3, [pc, #8]	; (9eb8 <dsu_crc32_init+0x14>)
    9eae:	4798      	blx	r3
#endif

}
    9eb0:	46c0      	nop			; (mov r8, r8)
    9eb2:	46bd      	mov	sp, r7
    9eb4:	bd80      	pop	{r7, pc}
    9eb6:	46c0      	nop			; (mov r8, r8)
    9eb8:	00009ddd 	.word	0x00009ddd

00009ebc <main>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/

int main(void) {
    9ebc:	b580      	push	{r7, lr}
    9ebe:	af00      	add	r7, sp, #0

    /*1.) INIT SYSTEM PERIPHERALS INITIALIZATION*/
    system_init();
    9ec0:	4b22      	ldr	r3, [pc, #136]	; (9f4c <main+0x90>)
    9ec2:	4798      	blx	r3
    delay_init();
    9ec4:	4b22      	ldr	r3, [pc, #136]	; (9f50 <main+0x94>)
    9ec6:	4798      	blx	r3
    InitializeSerialConsole();
    9ec8:	4b22      	ldr	r3, [pc, #136]	; (9f54 <main+0x98>)
    9eca:	4798      	blx	r3
    system_interrupt_enable_global();
    9ecc:	4b22      	ldr	r3, [pc, #136]	; (9f58 <main+0x9c>)
    9ece:	4798      	blx	r3

    /* Initialize SD MMC stack */
    sd_mmc_init();
    9ed0:	4b22      	ldr	r3, [pc, #136]	; (9f5c <main+0xa0>)
    9ed2:	4798      	blx	r3

    // Initialize the NVM driver
    configure_nvm();
    9ed4:	4b22      	ldr	r3, [pc, #136]	; (9f60 <main+0xa4>)
    9ed6:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
    9ed8:	4b22      	ldr	r3, [pc, #136]	; (9f64 <main+0xa8>)
    9eda:	2201      	movs	r2, #1
    9edc:	701a      	strb	r2, [r3, #0]
    9ede:	f3bf 8f5f 	dmb	sy
    9ee2:	b662      	cpsie	i

    // Configure CRC32
    dsu_crc32_init();
    9ee4:	4b20      	ldr	r3, [pc, #128]	; (9f68 <main+0xac>)
    9ee6:	4798      	blx	r3

    SerialConsoleWriteString("ESE5160 - ENTER BOOTLOADER");   // Order to add string to TX Buffer
    9ee8:	4b20      	ldr	r3, [pc, #128]	; (9f6c <main+0xb0>)
    9eea:	0018      	movs	r0, r3
    9eec:	4b20      	ldr	r3, [pc, #128]	; (9f70 <main+0xb4>)
    9eee:	4798      	blx	r3

    /*2.) STARTS SIMPLE SD CARD MOUNTING AND TEST!*/

    // EXAMPLE CODE ON MOUNTING THE SD CARD AND WRITING TO A FILE
    // See function inside to see how to open a file
    SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    9ef0:	4b20      	ldr	r3, [pc, #128]	; (9f74 <main+0xb8>)
    9ef2:	0018      	movs	r0, r3
    9ef4:	4b1e      	ldr	r3, [pc, #120]	; (9f70 <main+0xb4>)
    9ef6:	4798      	blx	r3

    if (StartFilesystemAndTest() == false) {
    9ef8:	4b1f      	ldr	r3, [pc, #124]	; (9f78 <main+0xbc>)
    9efa:	4798      	blx	r3
    9efc:	0003      	movs	r3, r0
    9efe:	001a      	movs	r2, r3
    9f00:	2301      	movs	r3, #1
    9f02:	4053      	eors	r3, r2
    9f04:	b2db      	uxtb	r3, r3
    9f06:	2b00      	cmp	r3, #0
    9f08:	d00a      	beq.n	9f20 <main+0x64>
        SerialConsoleWriteString("SD CARD failed! Check your connections. System will restart in 5 seconds...");
    9f0a:	4b1c      	ldr	r3, [pc, #112]	; (9f7c <main+0xc0>)
    9f0c:	0018      	movs	r0, r3
    9f0e:	4b18      	ldr	r3, [pc, #96]	; (9f70 <main+0xb4>)
    9f10:	4798      	blx	r3
        delay_cycles_ms(5000);
    9f12:	4b1b      	ldr	r3, [pc, #108]	; (9f80 <main+0xc4>)
    9f14:	0018      	movs	r0, r3
    9f16:	4b1b      	ldr	r3, [pc, #108]	; (9f84 <main+0xc8>)
    9f18:	4798      	blx	r3
        system_reset();
    9f1a:	4b1b      	ldr	r3, [pc, #108]	; (9f88 <main+0xcc>)
    9f1c:	4798      	blx	r3
    9f1e:	e003      	b.n	9f28 <main+0x6c>
    } else {
        SerialConsoleWriteString("SD CARD mount success! Filesystem also mounted. \r\n");
    9f20:	4b1a      	ldr	r3, [pc, #104]	; (9f8c <main+0xd0>)
    9f22:	0018      	movs	r0, r3
    9f24:	4b12      	ldr	r3, [pc, #72]	; (9f70 <main+0xb4>)
    9f26:	4798      	blx	r3
    // Students - this is your mission!

    /* END BOOTLOADER HERE!*/

    // 4.) DEINITIALIZE HW AND JUMP TO MAIN APPLICATION!
    SerialConsoleWriteString("ESE5160 - EXIT BOOTLOADER");   // Order to add string to TX Buffer
    9f28:	4b19      	ldr	r3, [pc, #100]	; (9f90 <main+0xd4>)
    9f2a:	0018      	movs	r0, r3
    9f2c:	4b10      	ldr	r3, [pc, #64]	; (9f70 <main+0xb4>)
    9f2e:	4798      	blx	r3
    delay_cycles_ms(100);                                    // Delay to allow print
    9f30:	2064      	movs	r0, #100	; 0x64
    9f32:	4b14      	ldr	r3, [pc, #80]	; (9f84 <main+0xc8>)
    9f34:	4798      	blx	r3

    // Deinitialize HW - deinitialize started HW here!
    DeinitializeSerialConsole();   // Deinitializes UART
    9f36:	4b17      	ldr	r3, [pc, #92]	; (9f94 <main+0xd8>)
    9f38:	4798      	blx	r3
    sd_mmc_deinit();               // Deinitialize SD CARD
    9f3a:	4b17      	ldr	r3, [pc, #92]	; (9f98 <main+0xdc>)
    9f3c:	4798      	blx	r3

    // Jump to application
    jumpToApplication();
    9f3e:	4b17      	ldr	r3, [pc, #92]	; (9f9c <main+0xe0>)
    9f40:	4798      	blx	r3
    9f42:	2300      	movs	r3, #0

    // Should not reach here! The device should have jumped to the main FW.
}
    9f44:	0018      	movs	r0, r3
    9f46:	46bd      	mov	sp, r7
    9f48:	bd80      	pop	{r7, pc}
    9f4a:	46c0      	nop			; (mov r8, r8)
    9f4c:	00006829 	.word	0x00006829
    9f50:	00000149 	.word	0x00000149
    9f54:	000009c5 	.word	0x000009c5
    9f58:	00009e89 	.word	0x00009e89
    9f5c:	00001871 	.word	0x00001871
    9f60:	0000a281 	.word	0x0000a281
    9f64:	20000009 	.word	0x20000009
    9f68:	00009ea5 	.word	0x00009ea5
    9f6c:	0000b51c 	.word	0x0000b51c
    9f70:	00000a51 	.word	0x00000a51
    9f74:	0000b538 	.word	0x0000b538
    9f78:	00009fa1 	.word	0x00009fa1
    9f7c:	0000b560 	.word	0x0000b560
    9f80:	00001388 	.word	0x00001388
    9f84:	000001a1 	.word	0x000001a1
    9f88:	00009e75 	.word	0x00009e75
    9f8c:	0000b5ac 	.word	0x0000b5ac
    9f90:	0000b5e0 	.word	0x0000b5e0
    9f94:	00000a35 	.word	0x00000a35
    9f98:	00002619 	.word	0x00002619
    9f9c:	0000a249 	.word	0x0000a249

00009fa0 <StartFilesystemAndTest>:
 * @brief        Starts the filesystem and tests it. Sets the filesystem to the global variable fs
 * @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
 *				before performing the jump!
 * @return       Returns true is SD card and file system test passed. False otherwise.
 ******************************************************************************/
static bool StartFilesystemAndTest(void) {
    9fa0:	b590      	push	{r4, r7, lr}
    9fa2:	b0c5      	sub	sp, #276	; 0x114
    9fa4:	af00      	add	r7, sp, #0
    bool sdCardPass = true;
    9fa6:	2310      	movs	r3, #16
    9fa8:	33ff      	adds	r3, #255	; 0xff
    9faa:	18fb      	adds	r3, r7, r3
    9fac:	2201      	movs	r2, #1
    9fae:	701a      	strb	r2, [r3, #0]
    uint8_t binbuff[256];

    // Before we begin - fill buffer for binary write test
    // Fill binbuff with values 0x00 - 0xFF
    for (int i = 0; i < 256; i++) {
    9fb0:	2300      	movs	r3, #0
    9fb2:	2284      	movs	r2, #132	; 0x84
    9fb4:	0052      	lsls	r2, r2, #1
    9fb6:	18ba      	adds	r2, r7, r2
    9fb8:	6013      	str	r3, [r2, #0]
    9fba:	e019      	b.n	9ff0 <StartFilesystemAndTest+0x50>
        binbuff[i] = i;
    9fbc:	2384      	movs	r3, #132	; 0x84
    9fbe:	005b      	lsls	r3, r3, #1
    9fc0:	18fb      	adds	r3, r7, r3
    9fc2:	681b      	ldr	r3, [r3, #0]
    9fc4:	b2d9      	uxtb	r1, r3
    9fc6:	4b84      	ldr	r3, [pc, #528]	; (a1d8 <StartFilesystemAndTest+0x238>)
    9fc8:	2288      	movs	r2, #136	; 0x88
    9fca:	0052      	lsls	r2, r2, #1
    9fcc:	18ba      	adds	r2, r7, r2
    9fce:	18d2      	adds	r2, r2, r3
    9fd0:	2384      	movs	r3, #132	; 0x84
    9fd2:	005b      	lsls	r3, r3, #1
    9fd4:	18fb      	adds	r3, r7, r3
    9fd6:	681b      	ldr	r3, [r3, #0]
    9fd8:	18d3      	adds	r3, r2, r3
    9fda:	1c0a      	adds	r2, r1, #0
    9fdc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 256; i++) {
    9fde:	2384      	movs	r3, #132	; 0x84
    9fe0:	005b      	lsls	r3, r3, #1
    9fe2:	18fb      	adds	r3, r7, r3
    9fe4:	681b      	ldr	r3, [r3, #0]
    9fe6:	3301      	adds	r3, #1
    9fe8:	2284      	movs	r2, #132	; 0x84
    9fea:	0052      	lsls	r2, r2, #1
    9fec:	18ba      	adds	r2, r7, r2
    9fee:	6013      	str	r3, [r2, #0]
    9ff0:	2384      	movs	r3, #132	; 0x84
    9ff2:	005b      	lsls	r3, r3, #1
    9ff4:	18fb      	adds	r3, r7, r3
    9ff6:	681b      	ldr	r3, [r3, #0]
    9ff8:	2bff      	cmp	r3, #255	; 0xff
    9ffa:	dddf      	ble.n	9fbc <StartFilesystemAndTest+0x1c>
    }

    // MOUNT SD CARD
    Ctrl_status sdStatus = SdCard_Initiate();
    9ffc:	2308      	movs	r3, #8
    9ffe:	33ff      	adds	r3, #255	; 0xff
    a000:	18fc      	adds	r4, r7, r3
    a002:	4b76      	ldr	r3, [pc, #472]	; (a1dc <StartFilesystemAndTest+0x23c>)
    a004:	4798      	blx	r3
    a006:	0003      	movs	r3, r0
    a008:	7023      	strb	r3, [r4, #0]
    if (sdStatus == CTRL_GOOD)   // If the SD card is good we continue mounting the system!
    a00a:	2308      	movs	r3, #8
    a00c:	33ff      	adds	r3, #255	; 0xff
    a00e:	18fb      	adds	r3, r7, r3
    a010:	781b      	ldrb	r3, [r3, #0]
    a012:	2b00      	cmp	r3, #0
    a014:	d000      	beq.n	a018 <StartFilesystemAndTest+0x78>
    a016:	e0ce      	b.n	a1b6 <StartFilesystemAndTest+0x216>
    {
        SerialConsoleWriteString("SD Card initiated correctly!\n\r");
    a018:	4b71      	ldr	r3, [pc, #452]	; (a1e0 <StartFilesystemAndTest+0x240>)
    a01a:	0018      	movs	r0, r3
    a01c:	4b71      	ldr	r3, [pc, #452]	; (a1e4 <StartFilesystemAndTest+0x244>)
    a01e:	4798      	blx	r3

        // Attempt to mount a FAT file system on the SD Card using FATFS
        SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    a020:	4b71      	ldr	r3, [pc, #452]	; (a1e8 <StartFilesystemAndTest+0x248>)
    a022:	0018      	movs	r0, r3
    a024:	4b6f      	ldr	r3, [pc, #444]	; (a1e4 <StartFilesystemAndTest+0x244>)
    a026:	4798      	blx	r3
        memset(&fs, 0, sizeof(FATFS));
    a028:	238c      	movs	r3, #140	; 0x8c
    a02a:	009a      	lsls	r2, r3, #2
    a02c:	4b6f      	ldr	r3, [pc, #444]	; (a1ec <StartFilesystemAndTest+0x24c>)
    a02e:	2100      	movs	r1, #0
    a030:	0018      	movs	r0, r3
    a032:	4b6f      	ldr	r3, [pc, #444]	; (a1f0 <StartFilesystemAndTest+0x250>)
    a034:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);   // Order FATFS Mount
    a036:	4b6d      	ldr	r3, [pc, #436]	; (a1ec <StartFilesystemAndTest+0x24c>)
    a038:	0019      	movs	r1, r3
    a03a:	2000      	movs	r0, #0
    a03c:	4b6d      	ldr	r3, [pc, #436]	; (a1f4 <StartFilesystemAndTest+0x254>)
    a03e:	4798      	blx	r3
    a040:	0003      	movs	r3, r0
    a042:	001a      	movs	r2, r3
    a044:	4b6c      	ldr	r3, [pc, #432]	; (a1f8 <StartFilesystemAndTest+0x258>)
    a046:	701a      	strb	r2, [r3, #0]
        if (FR_INVALID_DRIVE == res) {
    a048:	4b6b      	ldr	r3, [pc, #428]	; (a1f8 <StartFilesystemAndTest+0x258>)
    a04a:	781b      	ldrb	r3, [r3, #0]
    a04c:	2b0b      	cmp	r3, #11
    a04e:	d10d      	bne.n	a06c <StartFilesystemAndTest+0xcc>
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    a050:	4b69      	ldr	r3, [pc, #420]	; (a1f8 <StartFilesystemAndTest+0x258>)
    a052:	781b      	ldrb	r3, [r3, #0]
    a054:	001a      	movs	r2, r3
    a056:	4b69      	ldr	r3, [pc, #420]	; (a1fc <StartFilesystemAndTest+0x25c>)
    a058:	0019      	movs	r1, r3
    a05a:	2000      	movs	r0, #0
    a05c:	4b68      	ldr	r3, [pc, #416]	; (a200 <StartFilesystemAndTest+0x260>)
    a05e:	4798      	blx	r3
            sdCardPass = false;
    a060:	2310      	movs	r3, #16
    a062:	33ff      	adds	r3, #255	; 0xff
    a064:	18fb      	adds	r3, r7, r3
    a066:	2200      	movs	r2, #0
    a068:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    a06a:	e09f      	b.n	a1ac <StartFilesystemAndTest+0x20c>
        }
        SerialConsoleWriteString("[OK]\r\n");
    a06c:	4b65      	ldr	r3, [pc, #404]	; (a204 <StartFilesystemAndTest+0x264>)
    a06e:	0018      	movs	r0, r3
    a070:	4b5c      	ldr	r3, [pc, #368]	; (a1e4 <StartFilesystemAndTest+0x244>)
    a072:	4798      	blx	r3

        // Create and open a file
        SerialConsoleWriteString("Create a file (f_open)...\r\n");
    a074:	4b64      	ldr	r3, [pc, #400]	; (a208 <StartFilesystemAndTest+0x268>)
    a076:	0018      	movs	r0, r3
    a078:	4b5a      	ldr	r3, [pc, #360]	; (a1e4 <StartFilesystemAndTest+0x244>)
    a07a:	4798      	blx	r3

        test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    a07c:	4b63      	ldr	r3, [pc, #396]	; (a20c <StartFilesystemAndTest+0x26c>)
    a07e:	2230      	movs	r2, #48	; 0x30
    a080:	701a      	strb	r2, [r3, #0]
        res = f_open(&file_object, (char const *) test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    a082:	4962      	ldr	r1, [pc, #392]	; (a20c <StartFilesystemAndTest+0x26c>)
    a084:	4b62      	ldr	r3, [pc, #392]	; (a210 <StartFilesystemAndTest+0x270>)
    a086:	220a      	movs	r2, #10
    a088:	0018      	movs	r0, r3
    a08a:	4b62      	ldr	r3, [pc, #392]	; (a214 <StartFilesystemAndTest+0x274>)
    a08c:	4798      	blx	r3
    a08e:	0003      	movs	r3, r0
    a090:	001a      	movs	r2, r3
    a092:	4b59      	ldr	r3, [pc, #356]	; (a1f8 <StartFilesystemAndTest+0x258>)
    a094:	701a      	strb	r2, [r3, #0]

        if (res != FR_OK) {
    a096:	4b58      	ldr	r3, [pc, #352]	; (a1f8 <StartFilesystemAndTest+0x258>)
    a098:	781b      	ldrb	r3, [r3, #0]
    a09a:	2b00      	cmp	r3, #0
    a09c:	d00d      	beq.n	a0ba <StartFilesystemAndTest+0x11a>
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    a09e:	4b56      	ldr	r3, [pc, #344]	; (a1f8 <StartFilesystemAndTest+0x258>)
    a0a0:	781b      	ldrb	r3, [r3, #0]
    a0a2:	001a      	movs	r2, r3
    a0a4:	4b55      	ldr	r3, [pc, #340]	; (a1fc <StartFilesystemAndTest+0x25c>)
    a0a6:	0019      	movs	r1, r3
    a0a8:	2000      	movs	r0, #0
    a0aa:	4b55      	ldr	r3, [pc, #340]	; (a200 <StartFilesystemAndTest+0x260>)
    a0ac:	4798      	blx	r3
            sdCardPass = false;
    a0ae:	2310      	movs	r3, #16
    a0b0:	33ff      	adds	r3, #255	; 0xff
    a0b2:	18fb      	adds	r3, r7, r3
    a0b4:	2200      	movs	r2, #0
    a0b6:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    a0b8:	e078      	b.n	a1ac <StartFilesystemAndTest+0x20c>
        }

        SerialConsoleWriteString("[OK]\r\n");
    a0ba:	4b52      	ldr	r3, [pc, #328]	; (a204 <StartFilesystemAndTest+0x264>)
    a0bc:	0018      	movs	r0, r3
    a0be:	4b49      	ldr	r3, [pc, #292]	; (a1e4 <StartFilesystemAndTest+0x244>)
    a0c0:	4798      	blx	r3

        // Write to a file
        SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    a0c2:	4b55      	ldr	r3, [pc, #340]	; (a218 <StartFilesystemAndTest+0x278>)
    a0c4:	0018      	movs	r0, r3
    a0c6:	4b47      	ldr	r3, [pc, #284]	; (a1e4 <StartFilesystemAndTest+0x244>)
    a0c8:	4798      	blx	r3

        if (0 == f_puts("Test SD/MMC stack\n", &file_object)) {
    a0ca:	4a51      	ldr	r2, [pc, #324]	; (a210 <StartFilesystemAndTest+0x270>)
    a0cc:	4b53      	ldr	r3, [pc, #332]	; (a21c <StartFilesystemAndTest+0x27c>)
    a0ce:	0011      	movs	r1, r2
    a0d0:	0018      	movs	r0, r3
    a0d2:	4b53      	ldr	r3, [pc, #332]	; (a220 <StartFilesystemAndTest+0x280>)
    a0d4:	4798      	blx	r3
    a0d6:	1e03      	subs	r3, r0, #0
    a0d8:	d10e      	bne.n	a0f8 <StartFilesystemAndTest+0x158>
            f_close(&file_object);
    a0da:	4b4d      	ldr	r3, [pc, #308]	; (a210 <StartFilesystemAndTest+0x270>)
    a0dc:	0018      	movs	r0, r3
    a0de:	4b51      	ldr	r3, [pc, #324]	; (a224 <StartFilesystemAndTest+0x284>)
    a0e0:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL]\r\n");
    a0e2:	4b51      	ldr	r3, [pc, #324]	; (a228 <StartFilesystemAndTest+0x288>)
    a0e4:	0019      	movs	r1, r3
    a0e6:	2000      	movs	r0, #0
    a0e8:	4b45      	ldr	r3, [pc, #276]	; (a200 <StartFilesystemAndTest+0x260>)
    a0ea:	4798      	blx	r3
            sdCardPass = false;
    a0ec:	2310      	movs	r3, #16
    a0ee:	33ff      	adds	r3, #255	; 0xff
    a0f0:	18fb      	adds	r3, r7, r3
    a0f2:	2200      	movs	r2, #0
    a0f4:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    a0f6:	e059      	b.n	a1ac <StartFilesystemAndTest+0x20c>
        }

        SerialConsoleWriteString("[OK]\r\n");
    a0f8:	4b42      	ldr	r3, [pc, #264]	; (a204 <StartFilesystemAndTest+0x264>)
    a0fa:	0018      	movs	r0, r3
    a0fc:	4b39      	ldr	r3, [pc, #228]	; (a1e4 <StartFilesystemAndTest+0x244>)
    a0fe:	4798      	blx	r3
        f_close(&file_object);   // Close file
    a100:	4b43      	ldr	r3, [pc, #268]	; (a210 <StartFilesystemAndTest+0x270>)
    a102:	0018      	movs	r0, r3
    a104:	4b47      	ldr	r3, [pc, #284]	; (a224 <StartFilesystemAndTest+0x284>)
    a106:	4798      	blx	r3
        SerialConsoleWriteString("Test is successful.\n\r");
    a108:	4b48      	ldr	r3, [pc, #288]	; (a22c <StartFilesystemAndTest+0x28c>)
    a10a:	0018      	movs	r0, r3
    a10c:	4b35      	ldr	r3, [pc, #212]	; (a1e4 <StartFilesystemAndTest+0x244>)
    a10e:	4798      	blx	r3

        // Write binary file
        // Read SD Card File
        test_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    a110:	4b47      	ldr	r3, [pc, #284]	; (a230 <StartFilesystemAndTest+0x290>)
    a112:	2230      	movs	r2, #48	; 0x30
    a114:	701a      	strb	r2, [r3, #0]
        res = f_open(&file_object, (char const *) test_bin_file, FA_WRITE | FA_CREATE_ALWAYS);
    a116:	4946      	ldr	r1, [pc, #280]	; (a230 <StartFilesystemAndTest+0x290>)
    a118:	4b3d      	ldr	r3, [pc, #244]	; (a210 <StartFilesystemAndTest+0x270>)
    a11a:	220a      	movs	r2, #10
    a11c:	0018      	movs	r0, r3
    a11e:	4b3d      	ldr	r3, [pc, #244]	; (a214 <StartFilesystemAndTest+0x274>)
    a120:	4798      	blx	r3
    a122:	0003      	movs	r3, r0
    a124:	001a      	movs	r2, r3
    a126:	4b34      	ldr	r3, [pc, #208]	; (a1f8 <StartFilesystemAndTest+0x258>)
    a128:	701a      	strb	r2, [r3, #0]

        if (res != FR_OK) {
    a12a:	4b33      	ldr	r3, [pc, #204]	; (a1f8 <StartFilesystemAndTest+0x258>)
    a12c:	781b      	ldrb	r3, [r3, #0]
    a12e:	2b00      	cmp	r3, #0
    a130:	d011      	beq.n	a156 <StartFilesystemAndTest+0x1b6>
            SerialConsoleWriteString("Could not open binary file!\r\n");
    a132:	4b40      	ldr	r3, [pc, #256]	; (a234 <StartFilesystemAndTest+0x294>)
    a134:	0018      	movs	r0, r3
    a136:	4b2b      	ldr	r3, [pc, #172]	; (a1e4 <StartFilesystemAndTest+0x244>)
    a138:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    a13a:	4b2f      	ldr	r3, [pc, #188]	; (a1f8 <StartFilesystemAndTest+0x258>)
    a13c:	781b      	ldrb	r3, [r3, #0]
    a13e:	001a      	movs	r2, r3
    a140:	4b2e      	ldr	r3, [pc, #184]	; (a1fc <StartFilesystemAndTest+0x25c>)
    a142:	0019      	movs	r1, r3
    a144:	2000      	movs	r0, #0
    a146:	4b2e      	ldr	r3, [pc, #184]	; (a200 <StartFilesystemAndTest+0x260>)
    a148:	4798      	blx	r3
            sdCardPass = false;
    a14a:	2310      	movs	r3, #16
    a14c:	33ff      	adds	r3, #255	; 0xff
    a14e:	18fb      	adds	r3, r7, r3
    a150:	2200      	movs	r2, #0
    a152:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    a154:	e02a      	b.n	a1ac <StartFilesystemAndTest+0x20c>
        }

        // Write to a binaryfile
        SerialConsoleWriteString("Write to test file (f_write)...\r\n");
    a156:	4b38      	ldr	r3, [pc, #224]	; (a238 <StartFilesystemAndTest+0x298>)
    a158:	0018      	movs	r0, r3
    a15a:	4b22      	ldr	r3, [pc, #136]	; (a1e4 <StartFilesystemAndTest+0x244>)
    a15c:	4798      	blx	r3
        uint32_t varWrite = 0;
    a15e:	2300      	movs	r3, #0
    a160:	603b      	str	r3, [r7, #0]
        if (0 != f_write(&file_object, binbuff, 256, &varWrite)) {
    a162:	003c      	movs	r4, r7
    a164:	2380      	movs	r3, #128	; 0x80
    a166:	005a      	lsls	r2, r3, #1
    a168:	1d39      	adds	r1, r7, #4
    a16a:	4829      	ldr	r0, [pc, #164]	; (a210 <StartFilesystemAndTest+0x270>)
    a16c:	0023      	movs	r3, r4
    a16e:	4c33      	ldr	r4, [pc, #204]	; (a23c <StartFilesystemAndTest+0x29c>)
    a170:	47a0      	blx	r4
    a172:	1e03      	subs	r3, r0, #0
    a174:	d00e      	beq.n	a194 <StartFilesystemAndTest+0x1f4>
            f_close(&file_object);
    a176:	4b26      	ldr	r3, [pc, #152]	; (a210 <StartFilesystemAndTest+0x270>)
    a178:	0018      	movs	r0, r3
    a17a:	4b2a      	ldr	r3, [pc, #168]	; (a224 <StartFilesystemAndTest+0x284>)
    a17c:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL]\r\n");
    a17e:	4b2a      	ldr	r3, [pc, #168]	; (a228 <StartFilesystemAndTest+0x288>)
    a180:	0019      	movs	r1, r3
    a182:	2000      	movs	r0, #0
    a184:	4b1e      	ldr	r3, [pc, #120]	; (a200 <StartFilesystemAndTest+0x260>)
    a186:	4798      	blx	r3
            sdCardPass = false;
    a188:	2310      	movs	r3, #16
    a18a:	33ff      	adds	r3, #255	; 0xff
    a18c:	18fb      	adds	r3, r7, r3
    a18e:	2200      	movs	r2, #0
    a190:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    a192:	e00b      	b.n	a1ac <StartFilesystemAndTest+0x20c>
        }

        SerialConsoleWriteString("[OK]\r\n");
    a194:	4b1b      	ldr	r3, [pc, #108]	; (a204 <StartFilesystemAndTest+0x264>)
    a196:	0018      	movs	r0, r3
    a198:	4b12      	ldr	r3, [pc, #72]	; (a1e4 <StartFilesystemAndTest+0x244>)
    a19a:	4798      	blx	r3
        f_close(&file_object);   // Close file
    a19c:	4b1c      	ldr	r3, [pc, #112]	; (a210 <StartFilesystemAndTest+0x270>)
    a19e:	0018      	movs	r0, r3
    a1a0:	4b20      	ldr	r3, [pc, #128]	; (a224 <StartFilesystemAndTest+0x284>)
    a1a2:	4798      	blx	r3
        SerialConsoleWriteString("Test is successful.\n\r");
    a1a4:	4b21      	ldr	r3, [pc, #132]	; (a22c <StartFilesystemAndTest+0x28c>)
    a1a6:	0018      	movs	r0, r3
    a1a8:	4b0e      	ldr	r3, [pc, #56]	; (a1e4 <StartFilesystemAndTest+0x244>)
    a1aa:	4798      	blx	r3

    main_end_of_test:
        SerialConsoleWriteString("End of Test.\n\r");
    a1ac:	4b24      	ldr	r3, [pc, #144]	; (a240 <StartFilesystemAndTest+0x2a0>)
    a1ae:	0018      	movs	r0, r3
    a1b0:	4b0c      	ldr	r3, [pc, #48]	; (a1e4 <StartFilesystemAndTest+0x244>)
    a1b2:	4798      	blx	r3
    a1b4:	e008      	b.n	a1c8 <StartFilesystemAndTest+0x228>

    } else {
        SerialConsoleWriteString("SD Card failed initiation! Check connections!\n\r");
    a1b6:	4b23      	ldr	r3, [pc, #140]	; (a244 <StartFilesystemAndTest+0x2a4>)
    a1b8:	0018      	movs	r0, r3
    a1ba:	4b0a      	ldr	r3, [pc, #40]	; (a1e4 <StartFilesystemAndTest+0x244>)
    a1bc:	4798      	blx	r3
        sdCardPass = false;
    a1be:	2310      	movs	r3, #16
    a1c0:	33ff      	adds	r3, #255	; 0xff
    a1c2:	18fb      	adds	r3, r7, r3
    a1c4:	2200      	movs	r2, #0
    a1c6:	701a      	strb	r2, [r3, #0]
    }

    return sdCardPass;
    a1c8:	2310      	movs	r3, #16
    a1ca:	33ff      	adds	r3, #255	; 0xff
    a1cc:	18fb      	adds	r3, r7, r3
    a1ce:	781b      	ldrb	r3, [r3, #0]
}
    a1d0:	0018      	movs	r0, r3
    a1d2:	46bd      	mov	sp, r7
    a1d4:	b045      	add	sp, #276	; 0x114
    a1d6:	bd90      	pop	{r4, r7, pc}
    a1d8:	fffffef4 	.word	0xfffffef4
    a1dc:	000004a5 	.word	0x000004a5
    a1e0:	0000b5fc 	.word	0x0000b5fc
    a1e4:	00000a51 	.word	0x00000a51
    a1e8:	0000b61c 	.word	0x0000b61c
    a1ec:	20000a04 	.word	0x20000a04
    a1f0:	0000a65b 	.word	0x0000a65b
    a1f4:	0000918d 	.word	0x0000918d
    a1f8:	20000c8c 	.word	0x20000c8c
    a1fc:	0000b638 	.word	0x0000b638
    a200:	00000add 	.word	0x00000add
    a204:	0000b648 	.word	0x0000b648
    a208:	0000b650 	.word	0x0000b650
    a20c:	2000000c 	.word	0x2000000c
    a210:	20000c34 	.word	0x20000c34
    a214:	000091e5 	.word	0x000091e5
    a218:	0000b66c 	.word	0x0000b66c
    a21c:	0000b690 	.word	0x0000b690
    a220:	00009c69 	.word	0x00009c69
    a224:	00009be5 	.word	0x00009be5
    a228:	0000b6a4 	.word	0x0000b6a4
    a22c:	0000b6b0 	.word	0x0000b6b0
    a230:	20000020 	.word	0x20000020
    a234:	0000b6c8 	.word	0x0000b6c8
    a238:	0000b6e8 	.word	0x0000b6e8
    a23c:	00009715 	.word	0x00009715
    a240:	0000b70c 	.word	0x0000b70c
    a244:	0000b71c 	.word	0x0000b71c

0000a248 <jumpToApplication>:
 * @brief        Jumps to main application
 * @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
 *				before performing the jump!
 * @return
 ******************************************************************************/
static void jumpToApplication(void) {
    a248:	b580      	push	{r7, lr}
    a24a:	b082      	sub	sp, #8
    a24c:	af00      	add	r7, sp, #0
    // Function pointer to application section
    void (*applicationCodeEntry)(void);

    // Rebase stack pointer
    __set_MSP(*(uint32_t *) APP_START_ADDRESS);
    a24e:	2390      	movs	r3, #144	; 0x90
    a250:	025b      	lsls	r3, r3, #9
    a252:	681b      	ldr	r3, [r3, #0]
    a254:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    a256:	683b      	ldr	r3, [r7, #0]
    a258:	f383 8808 	msr	MSP, r3

    // Rebase vector table
    SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    a25c:	4b06      	ldr	r3, [pc, #24]	; (a278 <jumpToApplication+0x30>)
    a25e:	2290      	movs	r2, #144	; 0x90
    a260:	0252      	lsls	r2, r2, #9
    a262:	609a      	str	r2, [r3, #8]

    // Set pointer to application section
    applicationCodeEntry = (void (*)(void))(unsigned *) (*(unsigned *) (APP_START_RESET_VEC_ADDRESS));
    a264:	4b05      	ldr	r3, [pc, #20]	; (a27c <jumpToApplication+0x34>)
    a266:	681b      	ldr	r3, [r3, #0]
    a268:	607b      	str	r3, [r7, #4]

    // Jump to application. By calling applicationCodeEntry() as a function we move the PC to the point in memory pointed by applicationCodeEntry,
    // which should be the start of the main FW.
    applicationCodeEntry();
    a26a:	687b      	ldr	r3, [r7, #4]
    a26c:	4798      	blx	r3
}
    a26e:	46c0      	nop			; (mov r8, r8)
    a270:	46bd      	mov	sp, r7
    a272:	b002      	add	sp, #8
    a274:	bd80      	pop	{r7, pc}
    a276:	46c0      	nop			; (mov r8, r8)
    a278:	e000ed00 	.word	0xe000ed00
    a27c:	00012004 	.word	0x00012004

0000a280 <configure_nvm>:
 * function      static void configure_nvm(void)
 * @brief        Configures the NVM driver
 * @details
 * @return
 ******************************************************************************/
static void configure_nvm(void) {
    a280:	b580      	push	{r7, lr}
    a282:	b082      	sub	sp, #8
    a284:	af00      	add	r7, sp, #0
    struct nvm_config config_nvm;
    nvm_get_config_defaults(&config_nvm);
    a286:	003b      	movs	r3, r7
    a288:	0018      	movs	r0, r3
    a28a:	4b06      	ldr	r3, [pc, #24]	; (a2a4 <configure_nvm+0x24>)
    a28c:	4798      	blx	r3
    config_nvm.manual_page_write = false;
    a28e:	003b      	movs	r3, r7
    a290:	2200      	movs	r2, #0
    a292:	705a      	strb	r2, [r3, #1]
    nvm_set_config(&config_nvm);
    a294:	003b      	movs	r3, r7
    a296:	0018      	movs	r0, r3
    a298:	4b03      	ldr	r3, [pc, #12]	; (a2a8 <configure_nvm+0x28>)
    a29a:	4798      	blx	r3
}
    a29c:	46c0      	nop			; (mov r8, r8)
    a29e:	46bd      	mov	sp, r7
    a2a0:	b002      	add	sp, #8
    a2a2:	bd80      	pop	{r7, pc}
    a2a4:	00009e39 	.word	0x00009e39
    a2a8:	000003cd 	.word	0x000003cd

0000a2ac <__udivsi3>:
    a2ac:	2200      	movs	r2, #0
    a2ae:	0843      	lsrs	r3, r0, #1
    a2b0:	428b      	cmp	r3, r1
    a2b2:	d374      	bcc.n	a39e <__udivsi3+0xf2>
    a2b4:	0903      	lsrs	r3, r0, #4
    a2b6:	428b      	cmp	r3, r1
    a2b8:	d35f      	bcc.n	a37a <__udivsi3+0xce>
    a2ba:	0a03      	lsrs	r3, r0, #8
    a2bc:	428b      	cmp	r3, r1
    a2be:	d344      	bcc.n	a34a <__udivsi3+0x9e>
    a2c0:	0b03      	lsrs	r3, r0, #12
    a2c2:	428b      	cmp	r3, r1
    a2c4:	d328      	bcc.n	a318 <__udivsi3+0x6c>
    a2c6:	0c03      	lsrs	r3, r0, #16
    a2c8:	428b      	cmp	r3, r1
    a2ca:	d30d      	bcc.n	a2e8 <__udivsi3+0x3c>
    a2cc:	22ff      	movs	r2, #255	; 0xff
    a2ce:	0209      	lsls	r1, r1, #8
    a2d0:	ba12      	rev	r2, r2
    a2d2:	0c03      	lsrs	r3, r0, #16
    a2d4:	428b      	cmp	r3, r1
    a2d6:	d302      	bcc.n	a2de <__udivsi3+0x32>
    a2d8:	1212      	asrs	r2, r2, #8
    a2da:	0209      	lsls	r1, r1, #8
    a2dc:	d065      	beq.n	a3aa <__udivsi3+0xfe>
    a2de:	0b03      	lsrs	r3, r0, #12
    a2e0:	428b      	cmp	r3, r1
    a2e2:	d319      	bcc.n	a318 <__udivsi3+0x6c>
    a2e4:	e000      	b.n	a2e8 <__udivsi3+0x3c>
    a2e6:	0a09      	lsrs	r1, r1, #8
    a2e8:	0bc3      	lsrs	r3, r0, #15
    a2ea:	428b      	cmp	r3, r1
    a2ec:	d301      	bcc.n	a2f2 <__udivsi3+0x46>
    a2ee:	03cb      	lsls	r3, r1, #15
    a2f0:	1ac0      	subs	r0, r0, r3
    a2f2:	4152      	adcs	r2, r2
    a2f4:	0b83      	lsrs	r3, r0, #14
    a2f6:	428b      	cmp	r3, r1
    a2f8:	d301      	bcc.n	a2fe <__udivsi3+0x52>
    a2fa:	038b      	lsls	r3, r1, #14
    a2fc:	1ac0      	subs	r0, r0, r3
    a2fe:	4152      	adcs	r2, r2
    a300:	0b43      	lsrs	r3, r0, #13
    a302:	428b      	cmp	r3, r1
    a304:	d301      	bcc.n	a30a <__udivsi3+0x5e>
    a306:	034b      	lsls	r3, r1, #13
    a308:	1ac0      	subs	r0, r0, r3
    a30a:	4152      	adcs	r2, r2
    a30c:	0b03      	lsrs	r3, r0, #12
    a30e:	428b      	cmp	r3, r1
    a310:	d301      	bcc.n	a316 <__udivsi3+0x6a>
    a312:	030b      	lsls	r3, r1, #12
    a314:	1ac0      	subs	r0, r0, r3
    a316:	4152      	adcs	r2, r2
    a318:	0ac3      	lsrs	r3, r0, #11
    a31a:	428b      	cmp	r3, r1
    a31c:	d301      	bcc.n	a322 <__udivsi3+0x76>
    a31e:	02cb      	lsls	r3, r1, #11
    a320:	1ac0      	subs	r0, r0, r3
    a322:	4152      	adcs	r2, r2
    a324:	0a83      	lsrs	r3, r0, #10
    a326:	428b      	cmp	r3, r1
    a328:	d301      	bcc.n	a32e <__udivsi3+0x82>
    a32a:	028b      	lsls	r3, r1, #10
    a32c:	1ac0      	subs	r0, r0, r3
    a32e:	4152      	adcs	r2, r2
    a330:	0a43      	lsrs	r3, r0, #9
    a332:	428b      	cmp	r3, r1
    a334:	d301      	bcc.n	a33a <__udivsi3+0x8e>
    a336:	024b      	lsls	r3, r1, #9
    a338:	1ac0      	subs	r0, r0, r3
    a33a:	4152      	adcs	r2, r2
    a33c:	0a03      	lsrs	r3, r0, #8
    a33e:	428b      	cmp	r3, r1
    a340:	d301      	bcc.n	a346 <__udivsi3+0x9a>
    a342:	020b      	lsls	r3, r1, #8
    a344:	1ac0      	subs	r0, r0, r3
    a346:	4152      	adcs	r2, r2
    a348:	d2cd      	bcs.n	a2e6 <__udivsi3+0x3a>
    a34a:	09c3      	lsrs	r3, r0, #7
    a34c:	428b      	cmp	r3, r1
    a34e:	d301      	bcc.n	a354 <__udivsi3+0xa8>
    a350:	01cb      	lsls	r3, r1, #7
    a352:	1ac0      	subs	r0, r0, r3
    a354:	4152      	adcs	r2, r2
    a356:	0983      	lsrs	r3, r0, #6
    a358:	428b      	cmp	r3, r1
    a35a:	d301      	bcc.n	a360 <__udivsi3+0xb4>
    a35c:	018b      	lsls	r3, r1, #6
    a35e:	1ac0      	subs	r0, r0, r3
    a360:	4152      	adcs	r2, r2
    a362:	0943      	lsrs	r3, r0, #5
    a364:	428b      	cmp	r3, r1
    a366:	d301      	bcc.n	a36c <__udivsi3+0xc0>
    a368:	014b      	lsls	r3, r1, #5
    a36a:	1ac0      	subs	r0, r0, r3
    a36c:	4152      	adcs	r2, r2
    a36e:	0903      	lsrs	r3, r0, #4
    a370:	428b      	cmp	r3, r1
    a372:	d301      	bcc.n	a378 <__udivsi3+0xcc>
    a374:	010b      	lsls	r3, r1, #4
    a376:	1ac0      	subs	r0, r0, r3
    a378:	4152      	adcs	r2, r2
    a37a:	08c3      	lsrs	r3, r0, #3
    a37c:	428b      	cmp	r3, r1
    a37e:	d301      	bcc.n	a384 <__udivsi3+0xd8>
    a380:	00cb      	lsls	r3, r1, #3
    a382:	1ac0      	subs	r0, r0, r3
    a384:	4152      	adcs	r2, r2
    a386:	0883      	lsrs	r3, r0, #2
    a388:	428b      	cmp	r3, r1
    a38a:	d301      	bcc.n	a390 <__udivsi3+0xe4>
    a38c:	008b      	lsls	r3, r1, #2
    a38e:	1ac0      	subs	r0, r0, r3
    a390:	4152      	adcs	r2, r2
    a392:	0843      	lsrs	r3, r0, #1
    a394:	428b      	cmp	r3, r1
    a396:	d301      	bcc.n	a39c <__udivsi3+0xf0>
    a398:	004b      	lsls	r3, r1, #1
    a39a:	1ac0      	subs	r0, r0, r3
    a39c:	4152      	adcs	r2, r2
    a39e:	1a41      	subs	r1, r0, r1
    a3a0:	d200      	bcs.n	a3a4 <__udivsi3+0xf8>
    a3a2:	4601      	mov	r1, r0
    a3a4:	4152      	adcs	r2, r2
    a3a6:	4610      	mov	r0, r2
    a3a8:	4770      	bx	lr
    a3aa:	e7ff      	b.n	a3ac <__udivsi3+0x100>
    a3ac:	b501      	push	{r0, lr}
    a3ae:	2000      	movs	r0, #0
    a3b0:	f000 f8f0 	bl	a594 <__aeabi_idiv0>
    a3b4:	bd02      	pop	{r1, pc}
    a3b6:	46c0      	nop			; (mov r8, r8)

0000a3b8 <__aeabi_uidivmod>:
    a3b8:	2900      	cmp	r1, #0
    a3ba:	d0f7      	beq.n	a3ac <__udivsi3+0x100>
    a3bc:	e776      	b.n	a2ac <__udivsi3>
    a3be:	4770      	bx	lr

0000a3c0 <__divsi3>:
    a3c0:	4603      	mov	r3, r0
    a3c2:	430b      	orrs	r3, r1
    a3c4:	d47f      	bmi.n	a4c6 <__divsi3+0x106>
    a3c6:	2200      	movs	r2, #0
    a3c8:	0843      	lsrs	r3, r0, #1
    a3ca:	428b      	cmp	r3, r1
    a3cc:	d374      	bcc.n	a4b8 <__divsi3+0xf8>
    a3ce:	0903      	lsrs	r3, r0, #4
    a3d0:	428b      	cmp	r3, r1
    a3d2:	d35f      	bcc.n	a494 <__divsi3+0xd4>
    a3d4:	0a03      	lsrs	r3, r0, #8
    a3d6:	428b      	cmp	r3, r1
    a3d8:	d344      	bcc.n	a464 <__divsi3+0xa4>
    a3da:	0b03      	lsrs	r3, r0, #12
    a3dc:	428b      	cmp	r3, r1
    a3de:	d328      	bcc.n	a432 <__divsi3+0x72>
    a3e0:	0c03      	lsrs	r3, r0, #16
    a3e2:	428b      	cmp	r3, r1
    a3e4:	d30d      	bcc.n	a402 <__divsi3+0x42>
    a3e6:	22ff      	movs	r2, #255	; 0xff
    a3e8:	0209      	lsls	r1, r1, #8
    a3ea:	ba12      	rev	r2, r2
    a3ec:	0c03      	lsrs	r3, r0, #16
    a3ee:	428b      	cmp	r3, r1
    a3f0:	d302      	bcc.n	a3f8 <__divsi3+0x38>
    a3f2:	1212      	asrs	r2, r2, #8
    a3f4:	0209      	lsls	r1, r1, #8
    a3f6:	d065      	beq.n	a4c4 <__divsi3+0x104>
    a3f8:	0b03      	lsrs	r3, r0, #12
    a3fa:	428b      	cmp	r3, r1
    a3fc:	d319      	bcc.n	a432 <__divsi3+0x72>
    a3fe:	e000      	b.n	a402 <__divsi3+0x42>
    a400:	0a09      	lsrs	r1, r1, #8
    a402:	0bc3      	lsrs	r3, r0, #15
    a404:	428b      	cmp	r3, r1
    a406:	d301      	bcc.n	a40c <__divsi3+0x4c>
    a408:	03cb      	lsls	r3, r1, #15
    a40a:	1ac0      	subs	r0, r0, r3
    a40c:	4152      	adcs	r2, r2
    a40e:	0b83      	lsrs	r3, r0, #14
    a410:	428b      	cmp	r3, r1
    a412:	d301      	bcc.n	a418 <__divsi3+0x58>
    a414:	038b      	lsls	r3, r1, #14
    a416:	1ac0      	subs	r0, r0, r3
    a418:	4152      	adcs	r2, r2
    a41a:	0b43      	lsrs	r3, r0, #13
    a41c:	428b      	cmp	r3, r1
    a41e:	d301      	bcc.n	a424 <__divsi3+0x64>
    a420:	034b      	lsls	r3, r1, #13
    a422:	1ac0      	subs	r0, r0, r3
    a424:	4152      	adcs	r2, r2
    a426:	0b03      	lsrs	r3, r0, #12
    a428:	428b      	cmp	r3, r1
    a42a:	d301      	bcc.n	a430 <__divsi3+0x70>
    a42c:	030b      	lsls	r3, r1, #12
    a42e:	1ac0      	subs	r0, r0, r3
    a430:	4152      	adcs	r2, r2
    a432:	0ac3      	lsrs	r3, r0, #11
    a434:	428b      	cmp	r3, r1
    a436:	d301      	bcc.n	a43c <__divsi3+0x7c>
    a438:	02cb      	lsls	r3, r1, #11
    a43a:	1ac0      	subs	r0, r0, r3
    a43c:	4152      	adcs	r2, r2
    a43e:	0a83      	lsrs	r3, r0, #10
    a440:	428b      	cmp	r3, r1
    a442:	d301      	bcc.n	a448 <__divsi3+0x88>
    a444:	028b      	lsls	r3, r1, #10
    a446:	1ac0      	subs	r0, r0, r3
    a448:	4152      	adcs	r2, r2
    a44a:	0a43      	lsrs	r3, r0, #9
    a44c:	428b      	cmp	r3, r1
    a44e:	d301      	bcc.n	a454 <__divsi3+0x94>
    a450:	024b      	lsls	r3, r1, #9
    a452:	1ac0      	subs	r0, r0, r3
    a454:	4152      	adcs	r2, r2
    a456:	0a03      	lsrs	r3, r0, #8
    a458:	428b      	cmp	r3, r1
    a45a:	d301      	bcc.n	a460 <__divsi3+0xa0>
    a45c:	020b      	lsls	r3, r1, #8
    a45e:	1ac0      	subs	r0, r0, r3
    a460:	4152      	adcs	r2, r2
    a462:	d2cd      	bcs.n	a400 <__divsi3+0x40>
    a464:	09c3      	lsrs	r3, r0, #7
    a466:	428b      	cmp	r3, r1
    a468:	d301      	bcc.n	a46e <__divsi3+0xae>
    a46a:	01cb      	lsls	r3, r1, #7
    a46c:	1ac0      	subs	r0, r0, r3
    a46e:	4152      	adcs	r2, r2
    a470:	0983      	lsrs	r3, r0, #6
    a472:	428b      	cmp	r3, r1
    a474:	d301      	bcc.n	a47a <__divsi3+0xba>
    a476:	018b      	lsls	r3, r1, #6
    a478:	1ac0      	subs	r0, r0, r3
    a47a:	4152      	adcs	r2, r2
    a47c:	0943      	lsrs	r3, r0, #5
    a47e:	428b      	cmp	r3, r1
    a480:	d301      	bcc.n	a486 <__divsi3+0xc6>
    a482:	014b      	lsls	r3, r1, #5
    a484:	1ac0      	subs	r0, r0, r3
    a486:	4152      	adcs	r2, r2
    a488:	0903      	lsrs	r3, r0, #4
    a48a:	428b      	cmp	r3, r1
    a48c:	d301      	bcc.n	a492 <__divsi3+0xd2>
    a48e:	010b      	lsls	r3, r1, #4
    a490:	1ac0      	subs	r0, r0, r3
    a492:	4152      	adcs	r2, r2
    a494:	08c3      	lsrs	r3, r0, #3
    a496:	428b      	cmp	r3, r1
    a498:	d301      	bcc.n	a49e <__divsi3+0xde>
    a49a:	00cb      	lsls	r3, r1, #3
    a49c:	1ac0      	subs	r0, r0, r3
    a49e:	4152      	adcs	r2, r2
    a4a0:	0883      	lsrs	r3, r0, #2
    a4a2:	428b      	cmp	r3, r1
    a4a4:	d301      	bcc.n	a4aa <__divsi3+0xea>
    a4a6:	008b      	lsls	r3, r1, #2
    a4a8:	1ac0      	subs	r0, r0, r3
    a4aa:	4152      	adcs	r2, r2
    a4ac:	0843      	lsrs	r3, r0, #1
    a4ae:	428b      	cmp	r3, r1
    a4b0:	d301      	bcc.n	a4b6 <__divsi3+0xf6>
    a4b2:	004b      	lsls	r3, r1, #1
    a4b4:	1ac0      	subs	r0, r0, r3
    a4b6:	4152      	adcs	r2, r2
    a4b8:	1a41      	subs	r1, r0, r1
    a4ba:	d200      	bcs.n	a4be <__divsi3+0xfe>
    a4bc:	4601      	mov	r1, r0
    a4be:	4152      	adcs	r2, r2
    a4c0:	4610      	mov	r0, r2
    a4c2:	4770      	bx	lr
    a4c4:	e05d      	b.n	a582 <__divsi3+0x1c2>
    a4c6:	0fca      	lsrs	r2, r1, #31
    a4c8:	d000      	beq.n	a4cc <__divsi3+0x10c>
    a4ca:	4249      	negs	r1, r1
    a4cc:	1003      	asrs	r3, r0, #32
    a4ce:	d300      	bcc.n	a4d2 <__divsi3+0x112>
    a4d0:	4240      	negs	r0, r0
    a4d2:	4053      	eors	r3, r2
    a4d4:	2200      	movs	r2, #0
    a4d6:	469c      	mov	ip, r3
    a4d8:	0903      	lsrs	r3, r0, #4
    a4da:	428b      	cmp	r3, r1
    a4dc:	d32d      	bcc.n	a53a <__divsi3+0x17a>
    a4de:	0a03      	lsrs	r3, r0, #8
    a4e0:	428b      	cmp	r3, r1
    a4e2:	d312      	bcc.n	a50a <__divsi3+0x14a>
    a4e4:	22fc      	movs	r2, #252	; 0xfc
    a4e6:	0189      	lsls	r1, r1, #6
    a4e8:	ba12      	rev	r2, r2
    a4ea:	0a03      	lsrs	r3, r0, #8
    a4ec:	428b      	cmp	r3, r1
    a4ee:	d30c      	bcc.n	a50a <__divsi3+0x14a>
    a4f0:	0189      	lsls	r1, r1, #6
    a4f2:	1192      	asrs	r2, r2, #6
    a4f4:	428b      	cmp	r3, r1
    a4f6:	d308      	bcc.n	a50a <__divsi3+0x14a>
    a4f8:	0189      	lsls	r1, r1, #6
    a4fa:	1192      	asrs	r2, r2, #6
    a4fc:	428b      	cmp	r3, r1
    a4fe:	d304      	bcc.n	a50a <__divsi3+0x14a>
    a500:	0189      	lsls	r1, r1, #6
    a502:	d03a      	beq.n	a57a <__divsi3+0x1ba>
    a504:	1192      	asrs	r2, r2, #6
    a506:	e000      	b.n	a50a <__divsi3+0x14a>
    a508:	0989      	lsrs	r1, r1, #6
    a50a:	09c3      	lsrs	r3, r0, #7
    a50c:	428b      	cmp	r3, r1
    a50e:	d301      	bcc.n	a514 <__divsi3+0x154>
    a510:	01cb      	lsls	r3, r1, #7
    a512:	1ac0      	subs	r0, r0, r3
    a514:	4152      	adcs	r2, r2
    a516:	0983      	lsrs	r3, r0, #6
    a518:	428b      	cmp	r3, r1
    a51a:	d301      	bcc.n	a520 <__divsi3+0x160>
    a51c:	018b      	lsls	r3, r1, #6
    a51e:	1ac0      	subs	r0, r0, r3
    a520:	4152      	adcs	r2, r2
    a522:	0943      	lsrs	r3, r0, #5
    a524:	428b      	cmp	r3, r1
    a526:	d301      	bcc.n	a52c <__divsi3+0x16c>
    a528:	014b      	lsls	r3, r1, #5
    a52a:	1ac0      	subs	r0, r0, r3
    a52c:	4152      	adcs	r2, r2
    a52e:	0903      	lsrs	r3, r0, #4
    a530:	428b      	cmp	r3, r1
    a532:	d301      	bcc.n	a538 <__divsi3+0x178>
    a534:	010b      	lsls	r3, r1, #4
    a536:	1ac0      	subs	r0, r0, r3
    a538:	4152      	adcs	r2, r2
    a53a:	08c3      	lsrs	r3, r0, #3
    a53c:	428b      	cmp	r3, r1
    a53e:	d301      	bcc.n	a544 <__divsi3+0x184>
    a540:	00cb      	lsls	r3, r1, #3
    a542:	1ac0      	subs	r0, r0, r3
    a544:	4152      	adcs	r2, r2
    a546:	0883      	lsrs	r3, r0, #2
    a548:	428b      	cmp	r3, r1
    a54a:	d301      	bcc.n	a550 <__divsi3+0x190>
    a54c:	008b      	lsls	r3, r1, #2
    a54e:	1ac0      	subs	r0, r0, r3
    a550:	4152      	adcs	r2, r2
    a552:	d2d9      	bcs.n	a508 <__divsi3+0x148>
    a554:	0843      	lsrs	r3, r0, #1
    a556:	428b      	cmp	r3, r1
    a558:	d301      	bcc.n	a55e <__divsi3+0x19e>
    a55a:	004b      	lsls	r3, r1, #1
    a55c:	1ac0      	subs	r0, r0, r3
    a55e:	4152      	adcs	r2, r2
    a560:	1a41      	subs	r1, r0, r1
    a562:	d200      	bcs.n	a566 <__divsi3+0x1a6>
    a564:	4601      	mov	r1, r0
    a566:	4663      	mov	r3, ip
    a568:	4152      	adcs	r2, r2
    a56a:	105b      	asrs	r3, r3, #1
    a56c:	4610      	mov	r0, r2
    a56e:	d301      	bcc.n	a574 <__divsi3+0x1b4>
    a570:	4240      	negs	r0, r0
    a572:	2b00      	cmp	r3, #0
    a574:	d500      	bpl.n	a578 <__divsi3+0x1b8>
    a576:	4249      	negs	r1, r1
    a578:	4770      	bx	lr
    a57a:	4663      	mov	r3, ip
    a57c:	105b      	asrs	r3, r3, #1
    a57e:	d300      	bcc.n	a582 <__divsi3+0x1c2>
    a580:	4240      	negs	r0, r0
    a582:	b501      	push	{r0, lr}
    a584:	2000      	movs	r0, #0
    a586:	f000 f805 	bl	a594 <__aeabi_idiv0>
    a58a:	bd02      	pop	{r1, pc}

0000a58c <__aeabi_idivmod>:
    a58c:	2900      	cmp	r1, #0
    a58e:	d0f8      	beq.n	a582 <__divsi3+0x1c2>
    a590:	e716      	b.n	a3c0 <__divsi3>
    a592:	4770      	bx	lr

0000a594 <__aeabi_idiv0>:
    a594:	4770      	bx	lr
    a596:	46c0      	nop			; (mov r8, r8)

0000a598 <__aeabi_lmul>:
    a598:	b5f0      	push	{r4, r5, r6, r7, lr}
    a59a:	46ce      	mov	lr, r9
    a59c:	4647      	mov	r7, r8
    a59e:	0415      	lsls	r5, r2, #16
    a5a0:	0c2d      	lsrs	r5, r5, #16
    a5a2:	002e      	movs	r6, r5
    a5a4:	b580      	push	{r7, lr}
    a5a6:	0407      	lsls	r7, r0, #16
    a5a8:	0c14      	lsrs	r4, r2, #16
    a5aa:	0c3f      	lsrs	r7, r7, #16
    a5ac:	4699      	mov	r9, r3
    a5ae:	0c03      	lsrs	r3, r0, #16
    a5b0:	437e      	muls	r6, r7
    a5b2:	435d      	muls	r5, r3
    a5b4:	4367      	muls	r7, r4
    a5b6:	4363      	muls	r3, r4
    a5b8:	197f      	adds	r7, r7, r5
    a5ba:	0c34      	lsrs	r4, r6, #16
    a5bc:	19e4      	adds	r4, r4, r7
    a5be:	469c      	mov	ip, r3
    a5c0:	42a5      	cmp	r5, r4
    a5c2:	d903      	bls.n	a5cc <__aeabi_lmul+0x34>
    a5c4:	2380      	movs	r3, #128	; 0x80
    a5c6:	025b      	lsls	r3, r3, #9
    a5c8:	4698      	mov	r8, r3
    a5ca:	44c4      	add	ip, r8
    a5cc:	464b      	mov	r3, r9
    a5ce:	4351      	muls	r1, r2
    a5d0:	4343      	muls	r3, r0
    a5d2:	0436      	lsls	r6, r6, #16
    a5d4:	0c36      	lsrs	r6, r6, #16
    a5d6:	0c25      	lsrs	r5, r4, #16
    a5d8:	0424      	lsls	r4, r4, #16
    a5da:	4465      	add	r5, ip
    a5dc:	19a4      	adds	r4, r4, r6
    a5de:	1859      	adds	r1, r3, r1
    a5e0:	1949      	adds	r1, r1, r5
    a5e2:	0020      	movs	r0, r4
    a5e4:	bc0c      	pop	{r2, r3}
    a5e6:	4690      	mov	r8, r2
    a5e8:	4699      	mov	r9, r3
    a5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a5ec <__libc_init_array>:
    a5ec:	b570      	push	{r4, r5, r6, lr}
    a5ee:	2600      	movs	r6, #0
    a5f0:	4d0c      	ldr	r5, [pc, #48]	; (a624 <__libc_init_array+0x38>)
    a5f2:	4c0d      	ldr	r4, [pc, #52]	; (a628 <__libc_init_array+0x3c>)
    a5f4:	1b64      	subs	r4, r4, r5
    a5f6:	10a4      	asrs	r4, r4, #2
    a5f8:	42a6      	cmp	r6, r4
    a5fa:	d109      	bne.n	a610 <__libc_init_array+0x24>
    a5fc:	2600      	movs	r6, #0
    a5fe:	f001 f8d7 	bl	b7b0 <_init>
    a602:	4d0a      	ldr	r5, [pc, #40]	; (a62c <__libc_init_array+0x40>)
    a604:	4c0a      	ldr	r4, [pc, #40]	; (a630 <__libc_init_array+0x44>)
    a606:	1b64      	subs	r4, r4, r5
    a608:	10a4      	asrs	r4, r4, #2
    a60a:	42a6      	cmp	r6, r4
    a60c:	d105      	bne.n	a61a <__libc_init_array+0x2e>
    a60e:	bd70      	pop	{r4, r5, r6, pc}
    a610:	00b3      	lsls	r3, r6, #2
    a612:	58eb      	ldr	r3, [r5, r3]
    a614:	4798      	blx	r3
    a616:	3601      	adds	r6, #1
    a618:	e7ee      	b.n	a5f8 <__libc_init_array+0xc>
    a61a:	00b3      	lsls	r3, r6, #2
    a61c:	58eb      	ldr	r3, [r5, r3]
    a61e:	4798      	blx	r3
    a620:	3601      	adds	r6, #1
    a622:	e7f2      	b.n	a60a <__libc_init_array+0x1e>
    a624:	0000b7bc 	.word	0x0000b7bc
    a628:	0000b7bc 	.word	0x0000b7bc
    a62c:	0000b7bc 	.word	0x0000b7bc
    a630:	0000b7c0 	.word	0x0000b7c0

0000a634 <malloc>:
    a634:	b510      	push	{r4, lr}
    a636:	4b03      	ldr	r3, [pc, #12]	; (a644 <malloc+0x10>)
    a638:	0001      	movs	r1, r0
    a63a:	6818      	ldr	r0, [r3, #0]
    a63c:	f000 f860 	bl	a700 <_malloc_r>
    a640:	bd10      	pop	{r4, pc}
    a642:	46c0      	nop			; (mov r8, r8)
    a644:	20000030 	.word	0x20000030

0000a648 <memcpy>:
    a648:	2300      	movs	r3, #0
    a64a:	b510      	push	{r4, lr}
    a64c:	429a      	cmp	r2, r3
    a64e:	d100      	bne.n	a652 <memcpy+0xa>
    a650:	bd10      	pop	{r4, pc}
    a652:	5ccc      	ldrb	r4, [r1, r3]
    a654:	54c4      	strb	r4, [r0, r3]
    a656:	3301      	adds	r3, #1
    a658:	e7f8      	b.n	a64c <memcpy+0x4>

0000a65a <memset>:
    a65a:	0003      	movs	r3, r0
    a65c:	1882      	adds	r2, r0, r2
    a65e:	4293      	cmp	r3, r2
    a660:	d100      	bne.n	a664 <memset+0xa>
    a662:	4770      	bx	lr
    a664:	7019      	strb	r1, [r3, #0]
    a666:	3301      	adds	r3, #1
    a668:	e7f9      	b.n	a65e <memset+0x4>
	...

0000a66c <_free_r>:
    a66c:	b570      	push	{r4, r5, r6, lr}
    a66e:	0005      	movs	r5, r0
    a670:	2900      	cmp	r1, #0
    a672:	d010      	beq.n	a696 <_free_r+0x2a>
    a674:	1f0c      	subs	r4, r1, #4
    a676:	6823      	ldr	r3, [r4, #0]
    a678:	2b00      	cmp	r3, #0
    a67a:	da00      	bge.n	a67e <_free_r+0x12>
    a67c:	18e4      	adds	r4, r4, r3
    a67e:	0028      	movs	r0, r5
    a680:	f000 fb22 	bl	acc8 <__malloc_lock>
    a684:	4a1d      	ldr	r2, [pc, #116]	; (a6fc <_free_r+0x90>)
    a686:	6813      	ldr	r3, [r2, #0]
    a688:	2b00      	cmp	r3, #0
    a68a:	d105      	bne.n	a698 <_free_r+0x2c>
    a68c:	6063      	str	r3, [r4, #4]
    a68e:	6014      	str	r4, [r2, #0]
    a690:	0028      	movs	r0, r5
    a692:	f000 fb1a 	bl	acca <__malloc_unlock>
    a696:	bd70      	pop	{r4, r5, r6, pc}
    a698:	42a3      	cmp	r3, r4
    a69a:	d909      	bls.n	a6b0 <_free_r+0x44>
    a69c:	6821      	ldr	r1, [r4, #0]
    a69e:	1860      	adds	r0, r4, r1
    a6a0:	4283      	cmp	r3, r0
    a6a2:	d1f3      	bne.n	a68c <_free_r+0x20>
    a6a4:	6818      	ldr	r0, [r3, #0]
    a6a6:	685b      	ldr	r3, [r3, #4]
    a6a8:	1841      	adds	r1, r0, r1
    a6aa:	6021      	str	r1, [r4, #0]
    a6ac:	e7ee      	b.n	a68c <_free_r+0x20>
    a6ae:	0013      	movs	r3, r2
    a6b0:	685a      	ldr	r2, [r3, #4]
    a6b2:	2a00      	cmp	r2, #0
    a6b4:	d001      	beq.n	a6ba <_free_r+0x4e>
    a6b6:	42a2      	cmp	r2, r4
    a6b8:	d9f9      	bls.n	a6ae <_free_r+0x42>
    a6ba:	6819      	ldr	r1, [r3, #0]
    a6bc:	1858      	adds	r0, r3, r1
    a6be:	42a0      	cmp	r0, r4
    a6c0:	d10b      	bne.n	a6da <_free_r+0x6e>
    a6c2:	6820      	ldr	r0, [r4, #0]
    a6c4:	1809      	adds	r1, r1, r0
    a6c6:	1858      	adds	r0, r3, r1
    a6c8:	6019      	str	r1, [r3, #0]
    a6ca:	4282      	cmp	r2, r0
    a6cc:	d1e0      	bne.n	a690 <_free_r+0x24>
    a6ce:	6810      	ldr	r0, [r2, #0]
    a6d0:	6852      	ldr	r2, [r2, #4]
    a6d2:	1841      	adds	r1, r0, r1
    a6d4:	6019      	str	r1, [r3, #0]
    a6d6:	605a      	str	r2, [r3, #4]
    a6d8:	e7da      	b.n	a690 <_free_r+0x24>
    a6da:	42a0      	cmp	r0, r4
    a6dc:	d902      	bls.n	a6e4 <_free_r+0x78>
    a6de:	230c      	movs	r3, #12
    a6e0:	602b      	str	r3, [r5, #0]
    a6e2:	e7d5      	b.n	a690 <_free_r+0x24>
    a6e4:	6821      	ldr	r1, [r4, #0]
    a6e6:	1860      	adds	r0, r4, r1
    a6e8:	4282      	cmp	r2, r0
    a6ea:	d103      	bne.n	a6f4 <_free_r+0x88>
    a6ec:	6810      	ldr	r0, [r2, #0]
    a6ee:	6852      	ldr	r2, [r2, #4]
    a6f0:	1841      	adds	r1, r0, r1
    a6f2:	6021      	str	r1, [r4, #0]
    a6f4:	6062      	str	r2, [r4, #4]
    a6f6:	605c      	str	r4, [r3, #4]
    a6f8:	e7ca      	b.n	a690 <_free_r+0x24>
    a6fa:	46c0      	nop			; (mov r8, r8)
    a6fc:	20000184 	.word	0x20000184

0000a700 <_malloc_r>:
    a700:	2303      	movs	r3, #3
    a702:	b570      	push	{r4, r5, r6, lr}
    a704:	1ccd      	adds	r5, r1, #3
    a706:	439d      	bics	r5, r3
    a708:	3508      	adds	r5, #8
    a70a:	0006      	movs	r6, r0
    a70c:	2d0c      	cmp	r5, #12
    a70e:	d21e      	bcs.n	a74e <_malloc_r+0x4e>
    a710:	250c      	movs	r5, #12
    a712:	42a9      	cmp	r1, r5
    a714:	d81d      	bhi.n	a752 <_malloc_r+0x52>
    a716:	0030      	movs	r0, r6
    a718:	f000 fad6 	bl	acc8 <__malloc_lock>
    a71c:	4a25      	ldr	r2, [pc, #148]	; (a7b4 <_malloc_r+0xb4>)
    a71e:	6814      	ldr	r4, [r2, #0]
    a720:	0021      	movs	r1, r4
    a722:	2900      	cmp	r1, #0
    a724:	d119      	bne.n	a75a <_malloc_r+0x5a>
    a726:	4c24      	ldr	r4, [pc, #144]	; (a7b8 <_malloc_r+0xb8>)
    a728:	6823      	ldr	r3, [r4, #0]
    a72a:	2b00      	cmp	r3, #0
    a72c:	d103      	bne.n	a736 <_malloc_r+0x36>
    a72e:	0030      	movs	r0, r6
    a730:	f000 f844 	bl	a7bc <_sbrk_r>
    a734:	6020      	str	r0, [r4, #0]
    a736:	0029      	movs	r1, r5
    a738:	0030      	movs	r0, r6
    a73a:	f000 f83f 	bl	a7bc <_sbrk_r>
    a73e:	1c43      	adds	r3, r0, #1
    a740:	d12c      	bne.n	a79c <_malloc_r+0x9c>
    a742:	230c      	movs	r3, #12
    a744:	0030      	movs	r0, r6
    a746:	6033      	str	r3, [r6, #0]
    a748:	f000 fabf 	bl	acca <__malloc_unlock>
    a74c:	e003      	b.n	a756 <_malloc_r+0x56>
    a74e:	2d00      	cmp	r5, #0
    a750:	dadf      	bge.n	a712 <_malloc_r+0x12>
    a752:	230c      	movs	r3, #12
    a754:	6033      	str	r3, [r6, #0]
    a756:	2000      	movs	r0, #0
    a758:	bd70      	pop	{r4, r5, r6, pc}
    a75a:	680b      	ldr	r3, [r1, #0]
    a75c:	1b5b      	subs	r3, r3, r5
    a75e:	d41a      	bmi.n	a796 <_malloc_r+0x96>
    a760:	2b0b      	cmp	r3, #11
    a762:	d903      	bls.n	a76c <_malloc_r+0x6c>
    a764:	600b      	str	r3, [r1, #0]
    a766:	18cc      	adds	r4, r1, r3
    a768:	6025      	str	r5, [r4, #0]
    a76a:	e003      	b.n	a774 <_malloc_r+0x74>
    a76c:	428c      	cmp	r4, r1
    a76e:	d10e      	bne.n	a78e <_malloc_r+0x8e>
    a770:	6863      	ldr	r3, [r4, #4]
    a772:	6013      	str	r3, [r2, #0]
    a774:	0030      	movs	r0, r6
    a776:	f000 faa8 	bl	acca <__malloc_unlock>
    a77a:	0020      	movs	r0, r4
    a77c:	2207      	movs	r2, #7
    a77e:	300b      	adds	r0, #11
    a780:	1d23      	adds	r3, r4, #4
    a782:	4390      	bics	r0, r2
    a784:	1ac3      	subs	r3, r0, r3
    a786:	d0e7      	beq.n	a758 <_malloc_r+0x58>
    a788:	425a      	negs	r2, r3
    a78a:	50e2      	str	r2, [r4, r3]
    a78c:	e7e4      	b.n	a758 <_malloc_r+0x58>
    a78e:	684b      	ldr	r3, [r1, #4]
    a790:	6063      	str	r3, [r4, #4]
    a792:	000c      	movs	r4, r1
    a794:	e7ee      	b.n	a774 <_malloc_r+0x74>
    a796:	000c      	movs	r4, r1
    a798:	6849      	ldr	r1, [r1, #4]
    a79a:	e7c2      	b.n	a722 <_malloc_r+0x22>
    a79c:	2303      	movs	r3, #3
    a79e:	1cc4      	adds	r4, r0, #3
    a7a0:	439c      	bics	r4, r3
    a7a2:	42a0      	cmp	r0, r4
    a7a4:	d0e0      	beq.n	a768 <_malloc_r+0x68>
    a7a6:	1a21      	subs	r1, r4, r0
    a7a8:	0030      	movs	r0, r6
    a7aa:	f000 f807 	bl	a7bc <_sbrk_r>
    a7ae:	1c43      	adds	r3, r0, #1
    a7b0:	d1da      	bne.n	a768 <_malloc_r+0x68>
    a7b2:	e7c6      	b.n	a742 <_malloc_r+0x42>
    a7b4:	20000184 	.word	0x20000184
    a7b8:	20000188 	.word	0x20000188

0000a7bc <_sbrk_r>:
    a7bc:	2300      	movs	r3, #0
    a7be:	b570      	push	{r4, r5, r6, lr}
    a7c0:	4c06      	ldr	r4, [pc, #24]	; (a7dc <_sbrk_r+0x20>)
    a7c2:	0005      	movs	r5, r0
    a7c4:	0008      	movs	r0, r1
    a7c6:	6023      	str	r3, [r4, #0]
    a7c8:	f7fc f928 	bl	6a1c <_sbrk>
    a7cc:	1c43      	adds	r3, r0, #1
    a7ce:	d103      	bne.n	a7d8 <_sbrk_r+0x1c>
    a7d0:	6823      	ldr	r3, [r4, #0]
    a7d2:	2b00      	cmp	r3, #0
    a7d4:	d000      	beq.n	a7d8 <_sbrk_r+0x1c>
    a7d6:	602b      	str	r3, [r5, #0]
    a7d8:	bd70      	pop	{r4, r5, r6, pc}
    a7da:	46c0      	nop			; (mov r8, r8)
    a7dc:	20000c90 	.word	0x20000c90

0000a7e0 <setbuf>:
    a7e0:	424a      	negs	r2, r1
    a7e2:	414a      	adcs	r2, r1
    a7e4:	2380      	movs	r3, #128	; 0x80
    a7e6:	b510      	push	{r4, lr}
    a7e8:	0052      	lsls	r2, r2, #1
    a7ea:	00db      	lsls	r3, r3, #3
    a7ec:	f000 f802 	bl	a7f4 <setvbuf>
    a7f0:	bd10      	pop	{r4, pc}
	...

0000a7f4 <setvbuf>:
    a7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7f6:	001d      	movs	r5, r3
    a7f8:	4b4f      	ldr	r3, [pc, #316]	; (a938 <setvbuf+0x144>)
    a7fa:	b085      	sub	sp, #20
    a7fc:	681e      	ldr	r6, [r3, #0]
    a7fe:	0004      	movs	r4, r0
    a800:	000f      	movs	r7, r1
    a802:	9200      	str	r2, [sp, #0]
    a804:	2e00      	cmp	r6, #0
    a806:	d005      	beq.n	a814 <setvbuf+0x20>
    a808:	69b3      	ldr	r3, [r6, #24]
    a80a:	2b00      	cmp	r3, #0
    a80c:	d102      	bne.n	a814 <setvbuf+0x20>
    a80e:	0030      	movs	r0, r6
    a810:	f000 f99c 	bl	ab4c <__sinit>
    a814:	4b49      	ldr	r3, [pc, #292]	; (a93c <setvbuf+0x148>)
    a816:	429c      	cmp	r4, r3
    a818:	d150      	bne.n	a8bc <setvbuf+0xc8>
    a81a:	6874      	ldr	r4, [r6, #4]
    a81c:	9b00      	ldr	r3, [sp, #0]
    a81e:	2b02      	cmp	r3, #2
    a820:	d005      	beq.n	a82e <setvbuf+0x3a>
    a822:	2b01      	cmp	r3, #1
    a824:	d900      	bls.n	a828 <setvbuf+0x34>
    a826:	e084      	b.n	a932 <setvbuf+0x13e>
    a828:	2d00      	cmp	r5, #0
    a82a:	da00      	bge.n	a82e <setvbuf+0x3a>
    a82c:	e081      	b.n	a932 <setvbuf+0x13e>
    a82e:	0021      	movs	r1, r4
    a830:	0030      	movs	r0, r6
    a832:	f000 f91d 	bl	aa70 <_fflush_r>
    a836:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a838:	2900      	cmp	r1, #0
    a83a:	d008      	beq.n	a84e <setvbuf+0x5a>
    a83c:	0023      	movs	r3, r4
    a83e:	3344      	adds	r3, #68	; 0x44
    a840:	4299      	cmp	r1, r3
    a842:	d002      	beq.n	a84a <setvbuf+0x56>
    a844:	0030      	movs	r0, r6
    a846:	f7ff ff11 	bl	a66c <_free_r>
    a84a:	2300      	movs	r3, #0
    a84c:	6363      	str	r3, [r4, #52]	; 0x34
    a84e:	2300      	movs	r3, #0
    a850:	61a3      	str	r3, [r4, #24]
    a852:	6063      	str	r3, [r4, #4]
    a854:	89a3      	ldrh	r3, [r4, #12]
    a856:	061b      	lsls	r3, r3, #24
    a858:	d503      	bpl.n	a862 <setvbuf+0x6e>
    a85a:	6921      	ldr	r1, [r4, #16]
    a85c:	0030      	movs	r0, r6
    a85e:	f7ff ff05 	bl	a66c <_free_r>
    a862:	89a3      	ldrh	r3, [r4, #12]
    a864:	4a36      	ldr	r2, [pc, #216]	; (a940 <setvbuf+0x14c>)
    a866:	4013      	ands	r3, r2
    a868:	81a3      	strh	r3, [r4, #12]
    a86a:	9b00      	ldr	r3, [sp, #0]
    a86c:	2b02      	cmp	r3, #2
    a86e:	d05a      	beq.n	a926 <setvbuf+0x132>
    a870:	ab03      	add	r3, sp, #12
    a872:	aa02      	add	r2, sp, #8
    a874:	0021      	movs	r1, r4
    a876:	0030      	movs	r0, r6
    a878:	f000 f9fe 	bl	ac78 <__swhatbuf_r>
    a87c:	89a3      	ldrh	r3, [r4, #12]
    a87e:	4318      	orrs	r0, r3
    a880:	81a0      	strh	r0, [r4, #12]
    a882:	2d00      	cmp	r5, #0
    a884:	d124      	bne.n	a8d0 <setvbuf+0xdc>
    a886:	9d02      	ldr	r5, [sp, #8]
    a888:	0028      	movs	r0, r5
    a88a:	f7ff fed3 	bl	a634 <malloc>
    a88e:	9501      	str	r5, [sp, #4]
    a890:	1e07      	subs	r7, r0, #0
    a892:	d142      	bne.n	a91a <setvbuf+0x126>
    a894:	9b02      	ldr	r3, [sp, #8]
    a896:	9301      	str	r3, [sp, #4]
    a898:	42ab      	cmp	r3, r5
    a89a:	d139      	bne.n	a910 <setvbuf+0x11c>
    a89c:	2001      	movs	r0, #1
    a89e:	4240      	negs	r0, r0
    a8a0:	2302      	movs	r3, #2
    a8a2:	89a2      	ldrh	r2, [r4, #12]
    a8a4:	4313      	orrs	r3, r2
    a8a6:	81a3      	strh	r3, [r4, #12]
    a8a8:	2300      	movs	r3, #0
    a8aa:	60a3      	str	r3, [r4, #8]
    a8ac:	0023      	movs	r3, r4
    a8ae:	3347      	adds	r3, #71	; 0x47
    a8b0:	6023      	str	r3, [r4, #0]
    a8b2:	6123      	str	r3, [r4, #16]
    a8b4:	2301      	movs	r3, #1
    a8b6:	6163      	str	r3, [r4, #20]
    a8b8:	b005      	add	sp, #20
    a8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a8bc:	4b21      	ldr	r3, [pc, #132]	; (a944 <setvbuf+0x150>)
    a8be:	429c      	cmp	r4, r3
    a8c0:	d101      	bne.n	a8c6 <setvbuf+0xd2>
    a8c2:	68b4      	ldr	r4, [r6, #8]
    a8c4:	e7aa      	b.n	a81c <setvbuf+0x28>
    a8c6:	4b20      	ldr	r3, [pc, #128]	; (a948 <setvbuf+0x154>)
    a8c8:	429c      	cmp	r4, r3
    a8ca:	d1a7      	bne.n	a81c <setvbuf+0x28>
    a8cc:	68f4      	ldr	r4, [r6, #12]
    a8ce:	e7a5      	b.n	a81c <setvbuf+0x28>
    a8d0:	2f00      	cmp	r7, #0
    a8d2:	d0d9      	beq.n	a888 <setvbuf+0x94>
    a8d4:	69b3      	ldr	r3, [r6, #24]
    a8d6:	2b00      	cmp	r3, #0
    a8d8:	d102      	bne.n	a8e0 <setvbuf+0xec>
    a8da:	0030      	movs	r0, r6
    a8dc:	f000 f936 	bl	ab4c <__sinit>
    a8e0:	9b00      	ldr	r3, [sp, #0]
    a8e2:	2b01      	cmp	r3, #1
    a8e4:	d103      	bne.n	a8ee <setvbuf+0xfa>
    a8e6:	89a3      	ldrh	r3, [r4, #12]
    a8e8:	9a00      	ldr	r2, [sp, #0]
    a8ea:	431a      	orrs	r2, r3
    a8ec:	81a2      	strh	r2, [r4, #12]
    a8ee:	2008      	movs	r0, #8
    a8f0:	89a3      	ldrh	r3, [r4, #12]
    a8f2:	6027      	str	r7, [r4, #0]
    a8f4:	6127      	str	r7, [r4, #16]
    a8f6:	6165      	str	r5, [r4, #20]
    a8f8:	4018      	ands	r0, r3
    a8fa:	d018      	beq.n	a92e <setvbuf+0x13a>
    a8fc:	2001      	movs	r0, #1
    a8fe:	4018      	ands	r0, r3
    a900:	2300      	movs	r3, #0
    a902:	4298      	cmp	r0, r3
    a904:	d011      	beq.n	a92a <setvbuf+0x136>
    a906:	426d      	negs	r5, r5
    a908:	60a3      	str	r3, [r4, #8]
    a90a:	61a5      	str	r5, [r4, #24]
    a90c:	0018      	movs	r0, r3
    a90e:	e7d3      	b.n	a8b8 <setvbuf+0xc4>
    a910:	9801      	ldr	r0, [sp, #4]
    a912:	f7ff fe8f 	bl	a634 <malloc>
    a916:	1e07      	subs	r7, r0, #0
    a918:	d0c0      	beq.n	a89c <setvbuf+0xa8>
    a91a:	2380      	movs	r3, #128	; 0x80
    a91c:	89a2      	ldrh	r2, [r4, #12]
    a91e:	9d01      	ldr	r5, [sp, #4]
    a920:	4313      	orrs	r3, r2
    a922:	81a3      	strh	r3, [r4, #12]
    a924:	e7d6      	b.n	a8d4 <setvbuf+0xe0>
    a926:	2000      	movs	r0, #0
    a928:	e7ba      	b.n	a8a0 <setvbuf+0xac>
    a92a:	60a5      	str	r5, [r4, #8]
    a92c:	e7c4      	b.n	a8b8 <setvbuf+0xc4>
    a92e:	60a0      	str	r0, [r4, #8]
    a930:	e7c2      	b.n	a8b8 <setvbuf+0xc4>
    a932:	2001      	movs	r0, #1
    a934:	4240      	negs	r0, r0
    a936:	e7bf      	b.n	a8b8 <setvbuf+0xc4>
    a938:	20000030 	.word	0x20000030
    a93c:	0000b770 	.word	0x0000b770
    a940:	fffff35c 	.word	0xfffff35c
    a944:	0000b790 	.word	0x0000b790
    a948:	0000b750 	.word	0x0000b750

0000a94c <strlen>:
    a94c:	2300      	movs	r3, #0
    a94e:	5cc2      	ldrb	r2, [r0, r3]
    a950:	3301      	adds	r3, #1
    a952:	2a00      	cmp	r2, #0
    a954:	d1fb      	bne.n	a94e <strlen+0x2>
    a956:	1e58      	subs	r0, r3, #1
    a958:	4770      	bx	lr
	...

0000a95c <__sflush_r>:
    a95c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a95e:	898a      	ldrh	r2, [r1, #12]
    a960:	0005      	movs	r5, r0
    a962:	000c      	movs	r4, r1
    a964:	0713      	lsls	r3, r2, #28
    a966:	d460      	bmi.n	aa2a <__sflush_r+0xce>
    a968:	684b      	ldr	r3, [r1, #4]
    a96a:	2b00      	cmp	r3, #0
    a96c:	dc04      	bgt.n	a978 <__sflush_r+0x1c>
    a96e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    a970:	2b00      	cmp	r3, #0
    a972:	dc01      	bgt.n	a978 <__sflush_r+0x1c>
    a974:	2000      	movs	r0, #0
    a976:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a978:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    a97a:	2f00      	cmp	r7, #0
    a97c:	d0fa      	beq.n	a974 <__sflush_r+0x18>
    a97e:	2300      	movs	r3, #0
    a980:	682e      	ldr	r6, [r5, #0]
    a982:	602b      	str	r3, [r5, #0]
    a984:	2380      	movs	r3, #128	; 0x80
    a986:	015b      	lsls	r3, r3, #5
    a988:	401a      	ands	r2, r3
    a98a:	d034      	beq.n	a9f6 <__sflush_r+0x9a>
    a98c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    a98e:	89a3      	ldrh	r3, [r4, #12]
    a990:	075b      	lsls	r3, r3, #29
    a992:	d506      	bpl.n	a9a2 <__sflush_r+0x46>
    a994:	6863      	ldr	r3, [r4, #4]
    a996:	1ac0      	subs	r0, r0, r3
    a998:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a99a:	2b00      	cmp	r3, #0
    a99c:	d001      	beq.n	a9a2 <__sflush_r+0x46>
    a99e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a9a0:	1ac0      	subs	r0, r0, r3
    a9a2:	0002      	movs	r2, r0
    a9a4:	6a21      	ldr	r1, [r4, #32]
    a9a6:	2300      	movs	r3, #0
    a9a8:	0028      	movs	r0, r5
    a9aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    a9ac:	47b8      	blx	r7
    a9ae:	89a1      	ldrh	r1, [r4, #12]
    a9b0:	1c43      	adds	r3, r0, #1
    a9b2:	d106      	bne.n	a9c2 <__sflush_r+0x66>
    a9b4:	682b      	ldr	r3, [r5, #0]
    a9b6:	2b1d      	cmp	r3, #29
    a9b8:	d831      	bhi.n	aa1e <__sflush_r+0xc2>
    a9ba:	4a2c      	ldr	r2, [pc, #176]	; (aa6c <__sflush_r+0x110>)
    a9bc:	40da      	lsrs	r2, r3
    a9be:	07d3      	lsls	r3, r2, #31
    a9c0:	d52d      	bpl.n	aa1e <__sflush_r+0xc2>
    a9c2:	2300      	movs	r3, #0
    a9c4:	6063      	str	r3, [r4, #4]
    a9c6:	6923      	ldr	r3, [r4, #16]
    a9c8:	6023      	str	r3, [r4, #0]
    a9ca:	04cb      	lsls	r3, r1, #19
    a9cc:	d505      	bpl.n	a9da <__sflush_r+0x7e>
    a9ce:	1c43      	adds	r3, r0, #1
    a9d0:	d102      	bne.n	a9d8 <__sflush_r+0x7c>
    a9d2:	682b      	ldr	r3, [r5, #0]
    a9d4:	2b00      	cmp	r3, #0
    a9d6:	d100      	bne.n	a9da <__sflush_r+0x7e>
    a9d8:	6560      	str	r0, [r4, #84]	; 0x54
    a9da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a9dc:	602e      	str	r6, [r5, #0]
    a9de:	2900      	cmp	r1, #0
    a9e0:	d0c8      	beq.n	a974 <__sflush_r+0x18>
    a9e2:	0023      	movs	r3, r4
    a9e4:	3344      	adds	r3, #68	; 0x44
    a9e6:	4299      	cmp	r1, r3
    a9e8:	d002      	beq.n	a9f0 <__sflush_r+0x94>
    a9ea:	0028      	movs	r0, r5
    a9ec:	f7ff fe3e 	bl	a66c <_free_r>
    a9f0:	2000      	movs	r0, #0
    a9f2:	6360      	str	r0, [r4, #52]	; 0x34
    a9f4:	e7bf      	b.n	a976 <__sflush_r+0x1a>
    a9f6:	2301      	movs	r3, #1
    a9f8:	6a21      	ldr	r1, [r4, #32]
    a9fa:	0028      	movs	r0, r5
    a9fc:	47b8      	blx	r7
    a9fe:	1c43      	adds	r3, r0, #1
    aa00:	d1c5      	bne.n	a98e <__sflush_r+0x32>
    aa02:	682b      	ldr	r3, [r5, #0]
    aa04:	2b00      	cmp	r3, #0
    aa06:	d0c2      	beq.n	a98e <__sflush_r+0x32>
    aa08:	2b1d      	cmp	r3, #29
    aa0a:	d001      	beq.n	aa10 <__sflush_r+0xb4>
    aa0c:	2b16      	cmp	r3, #22
    aa0e:	d101      	bne.n	aa14 <__sflush_r+0xb8>
    aa10:	602e      	str	r6, [r5, #0]
    aa12:	e7af      	b.n	a974 <__sflush_r+0x18>
    aa14:	2340      	movs	r3, #64	; 0x40
    aa16:	89a2      	ldrh	r2, [r4, #12]
    aa18:	4313      	orrs	r3, r2
    aa1a:	81a3      	strh	r3, [r4, #12]
    aa1c:	e7ab      	b.n	a976 <__sflush_r+0x1a>
    aa1e:	2340      	movs	r3, #64	; 0x40
    aa20:	430b      	orrs	r3, r1
    aa22:	2001      	movs	r0, #1
    aa24:	81a3      	strh	r3, [r4, #12]
    aa26:	4240      	negs	r0, r0
    aa28:	e7a5      	b.n	a976 <__sflush_r+0x1a>
    aa2a:	690f      	ldr	r7, [r1, #16]
    aa2c:	2f00      	cmp	r7, #0
    aa2e:	d0a1      	beq.n	a974 <__sflush_r+0x18>
    aa30:	680b      	ldr	r3, [r1, #0]
    aa32:	600f      	str	r7, [r1, #0]
    aa34:	1bdb      	subs	r3, r3, r7
    aa36:	9301      	str	r3, [sp, #4]
    aa38:	2300      	movs	r3, #0
    aa3a:	0792      	lsls	r2, r2, #30
    aa3c:	d100      	bne.n	aa40 <__sflush_r+0xe4>
    aa3e:	694b      	ldr	r3, [r1, #20]
    aa40:	60a3      	str	r3, [r4, #8]
    aa42:	9b01      	ldr	r3, [sp, #4]
    aa44:	2b00      	cmp	r3, #0
    aa46:	dc00      	bgt.n	aa4a <__sflush_r+0xee>
    aa48:	e794      	b.n	a974 <__sflush_r+0x18>
    aa4a:	9b01      	ldr	r3, [sp, #4]
    aa4c:	003a      	movs	r2, r7
    aa4e:	6a21      	ldr	r1, [r4, #32]
    aa50:	0028      	movs	r0, r5
    aa52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    aa54:	47b0      	blx	r6
    aa56:	2800      	cmp	r0, #0
    aa58:	dc03      	bgt.n	aa62 <__sflush_r+0x106>
    aa5a:	2340      	movs	r3, #64	; 0x40
    aa5c:	89a2      	ldrh	r2, [r4, #12]
    aa5e:	4313      	orrs	r3, r2
    aa60:	e7df      	b.n	aa22 <__sflush_r+0xc6>
    aa62:	9b01      	ldr	r3, [sp, #4]
    aa64:	183f      	adds	r7, r7, r0
    aa66:	1a1b      	subs	r3, r3, r0
    aa68:	9301      	str	r3, [sp, #4]
    aa6a:	e7ea      	b.n	aa42 <__sflush_r+0xe6>
    aa6c:	20400001 	.word	0x20400001

0000aa70 <_fflush_r>:
    aa70:	690b      	ldr	r3, [r1, #16]
    aa72:	b570      	push	{r4, r5, r6, lr}
    aa74:	0005      	movs	r5, r0
    aa76:	000c      	movs	r4, r1
    aa78:	2b00      	cmp	r3, #0
    aa7a:	d101      	bne.n	aa80 <_fflush_r+0x10>
    aa7c:	2000      	movs	r0, #0
    aa7e:	bd70      	pop	{r4, r5, r6, pc}
    aa80:	2800      	cmp	r0, #0
    aa82:	d004      	beq.n	aa8e <_fflush_r+0x1e>
    aa84:	6983      	ldr	r3, [r0, #24]
    aa86:	2b00      	cmp	r3, #0
    aa88:	d101      	bne.n	aa8e <_fflush_r+0x1e>
    aa8a:	f000 f85f 	bl	ab4c <__sinit>
    aa8e:	4b0b      	ldr	r3, [pc, #44]	; (aabc <_fflush_r+0x4c>)
    aa90:	429c      	cmp	r4, r3
    aa92:	d109      	bne.n	aaa8 <_fflush_r+0x38>
    aa94:	686c      	ldr	r4, [r5, #4]
    aa96:	220c      	movs	r2, #12
    aa98:	5ea3      	ldrsh	r3, [r4, r2]
    aa9a:	2b00      	cmp	r3, #0
    aa9c:	d0ee      	beq.n	aa7c <_fflush_r+0xc>
    aa9e:	0021      	movs	r1, r4
    aaa0:	0028      	movs	r0, r5
    aaa2:	f7ff ff5b 	bl	a95c <__sflush_r>
    aaa6:	e7ea      	b.n	aa7e <_fflush_r+0xe>
    aaa8:	4b05      	ldr	r3, [pc, #20]	; (aac0 <_fflush_r+0x50>)
    aaaa:	429c      	cmp	r4, r3
    aaac:	d101      	bne.n	aab2 <_fflush_r+0x42>
    aaae:	68ac      	ldr	r4, [r5, #8]
    aab0:	e7f1      	b.n	aa96 <_fflush_r+0x26>
    aab2:	4b04      	ldr	r3, [pc, #16]	; (aac4 <_fflush_r+0x54>)
    aab4:	429c      	cmp	r4, r3
    aab6:	d1ee      	bne.n	aa96 <_fflush_r+0x26>
    aab8:	68ec      	ldr	r4, [r5, #12]
    aaba:	e7ec      	b.n	aa96 <_fflush_r+0x26>
    aabc:	0000b770 	.word	0x0000b770
    aac0:	0000b790 	.word	0x0000b790
    aac4:	0000b750 	.word	0x0000b750

0000aac8 <_cleanup_r>:
    aac8:	b510      	push	{r4, lr}
    aaca:	4902      	ldr	r1, [pc, #8]	; (aad4 <_cleanup_r+0xc>)
    aacc:	f000 f8b2 	bl	ac34 <_fwalk_reent>
    aad0:	bd10      	pop	{r4, pc}
    aad2:	46c0      	nop			; (mov r8, r8)
    aad4:	0000aa71 	.word	0x0000aa71

0000aad8 <std.isra.0>:
    aad8:	2300      	movs	r3, #0
    aada:	b510      	push	{r4, lr}
    aadc:	0004      	movs	r4, r0
    aade:	6003      	str	r3, [r0, #0]
    aae0:	6043      	str	r3, [r0, #4]
    aae2:	6083      	str	r3, [r0, #8]
    aae4:	8181      	strh	r1, [r0, #12]
    aae6:	6643      	str	r3, [r0, #100]	; 0x64
    aae8:	81c2      	strh	r2, [r0, #14]
    aaea:	6103      	str	r3, [r0, #16]
    aaec:	6143      	str	r3, [r0, #20]
    aaee:	6183      	str	r3, [r0, #24]
    aaf0:	0019      	movs	r1, r3
    aaf2:	2208      	movs	r2, #8
    aaf4:	305c      	adds	r0, #92	; 0x5c
    aaf6:	f7ff fdb0 	bl	a65a <memset>
    aafa:	4b05      	ldr	r3, [pc, #20]	; (ab10 <std.isra.0+0x38>)
    aafc:	6224      	str	r4, [r4, #32]
    aafe:	6263      	str	r3, [r4, #36]	; 0x24
    ab00:	4b04      	ldr	r3, [pc, #16]	; (ab14 <std.isra.0+0x3c>)
    ab02:	62a3      	str	r3, [r4, #40]	; 0x28
    ab04:	4b04      	ldr	r3, [pc, #16]	; (ab18 <std.isra.0+0x40>)
    ab06:	62e3      	str	r3, [r4, #44]	; 0x2c
    ab08:	4b04      	ldr	r3, [pc, #16]	; (ab1c <std.isra.0+0x44>)
    ab0a:	6323      	str	r3, [r4, #48]	; 0x30
    ab0c:	bd10      	pop	{r4, pc}
    ab0e:	46c0      	nop			; (mov r8, r8)
    ab10:	0000accd 	.word	0x0000accd
    ab14:	0000acf5 	.word	0x0000acf5
    ab18:	0000ad2d 	.word	0x0000ad2d
    ab1c:	0000ad59 	.word	0x0000ad59

0000ab20 <__sfmoreglue>:
    ab20:	b570      	push	{r4, r5, r6, lr}
    ab22:	2568      	movs	r5, #104	; 0x68
    ab24:	1e4a      	subs	r2, r1, #1
    ab26:	4355      	muls	r5, r2
    ab28:	000e      	movs	r6, r1
    ab2a:	0029      	movs	r1, r5
    ab2c:	3174      	adds	r1, #116	; 0x74
    ab2e:	f7ff fde7 	bl	a700 <_malloc_r>
    ab32:	1e04      	subs	r4, r0, #0
    ab34:	d008      	beq.n	ab48 <__sfmoreglue+0x28>
    ab36:	2100      	movs	r1, #0
    ab38:	002a      	movs	r2, r5
    ab3a:	6001      	str	r1, [r0, #0]
    ab3c:	6046      	str	r6, [r0, #4]
    ab3e:	300c      	adds	r0, #12
    ab40:	60a0      	str	r0, [r4, #8]
    ab42:	3268      	adds	r2, #104	; 0x68
    ab44:	f7ff fd89 	bl	a65a <memset>
    ab48:	0020      	movs	r0, r4
    ab4a:	bd70      	pop	{r4, r5, r6, pc}

0000ab4c <__sinit>:
    ab4c:	6983      	ldr	r3, [r0, #24]
    ab4e:	b513      	push	{r0, r1, r4, lr}
    ab50:	0004      	movs	r4, r0
    ab52:	2b00      	cmp	r3, #0
    ab54:	d128      	bne.n	aba8 <__sinit+0x5c>
    ab56:	6483      	str	r3, [r0, #72]	; 0x48
    ab58:	64c3      	str	r3, [r0, #76]	; 0x4c
    ab5a:	6503      	str	r3, [r0, #80]	; 0x50
    ab5c:	4b13      	ldr	r3, [pc, #76]	; (abac <__sinit+0x60>)
    ab5e:	4a14      	ldr	r2, [pc, #80]	; (abb0 <__sinit+0x64>)
    ab60:	681b      	ldr	r3, [r3, #0]
    ab62:	6282      	str	r2, [r0, #40]	; 0x28
    ab64:	9301      	str	r3, [sp, #4]
    ab66:	4298      	cmp	r0, r3
    ab68:	d101      	bne.n	ab6e <__sinit+0x22>
    ab6a:	2301      	movs	r3, #1
    ab6c:	6183      	str	r3, [r0, #24]
    ab6e:	0020      	movs	r0, r4
    ab70:	f000 f820 	bl	abb4 <__sfp>
    ab74:	6060      	str	r0, [r4, #4]
    ab76:	0020      	movs	r0, r4
    ab78:	f000 f81c 	bl	abb4 <__sfp>
    ab7c:	60a0      	str	r0, [r4, #8]
    ab7e:	0020      	movs	r0, r4
    ab80:	f000 f818 	bl	abb4 <__sfp>
    ab84:	2200      	movs	r2, #0
    ab86:	60e0      	str	r0, [r4, #12]
    ab88:	2104      	movs	r1, #4
    ab8a:	6860      	ldr	r0, [r4, #4]
    ab8c:	f7ff ffa4 	bl	aad8 <std.isra.0>
    ab90:	2201      	movs	r2, #1
    ab92:	2109      	movs	r1, #9
    ab94:	68a0      	ldr	r0, [r4, #8]
    ab96:	f7ff ff9f 	bl	aad8 <std.isra.0>
    ab9a:	2202      	movs	r2, #2
    ab9c:	2112      	movs	r1, #18
    ab9e:	68e0      	ldr	r0, [r4, #12]
    aba0:	f7ff ff9a 	bl	aad8 <std.isra.0>
    aba4:	2301      	movs	r3, #1
    aba6:	61a3      	str	r3, [r4, #24]
    aba8:	bd13      	pop	{r0, r1, r4, pc}
    abaa:	46c0      	nop			; (mov r8, r8)
    abac:	0000b74c 	.word	0x0000b74c
    abb0:	0000aac9 	.word	0x0000aac9

0000abb4 <__sfp>:
    abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abb6:	4b1e      	ldr	r3, [pc, #120]	; (ac30 <__sfp+0x7c>)
    abb8:	0007      	movs	r7, r0
    abba:	681e      	ldr	r6, [r3, #0]
    abbc:	69b3      	ldr	r3, [r6, #24]
    abbe:	2b00      	cmp	r3, #0
    abc0:	d102      	bne.n	abc8 <__sfp+0x14>
    abc2:	0030      	movs	r0, r6
    abc4:	f7ff ffc2 	bl	ab4c <__sinit>
    abc8:	3648      	adds	r6, #72	; 0x48
    abca:	68b4      	ldr	r4, [r6, #8]
    abcc:	6873      	ldr	r3, [r6, #4]
    abce:	3b01      	subs	r3, #1
    abd0:	d504      	bpl.n	abdc <__sfp+0x28>
    abd2:	6833      	ldr	r3, [r6, #0]
    abd4:	2b00      	cmp	r3, #0
    abd6:	d007      	beq.n	abe8 <__sfp+0x34>
    abd8:	6836      	ldr	r6, [r6, #0]
    abda:	e7f6      	b.n	abca <__sfp+0x16>
    abdc:	220c      	movs	r2, #12
    abde:	5ea5      	ldrsh	r5, [r4, r2]
    abe0:	2d00      	cmp	r5, #0
    abe2:	d00d      	beq.n	ac00 <__sfp+0x4c>
    abe4:	3468      	adds	r4, #104	; 0x68
    abe6:	e7f2      	b.n	abce <__sfp+0x1a>
    abe8:	2104      	movs	r1, #4
    abea:	0038      	movs	r0, r7
    abec:	f7ff ff98 	bl	ab20 <__sfmoreglue>
    abf0:	6030      	str	r0, [r6, #0]
    abf2:	2800      	cmp	r0, #0
    abf4:	d1f0      	bne.n	abd8 <__sfp+0x24>
    abf6:	230c      	movs	r3, #12
    abf8:	0004      	movs	r4, r0
    abfa:	603b      	str	r3, [r7, #0]
    abfc:	0020      	movs	r0, r4
    abfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac00:	2301      	movs	r3, #1
    ac02:	0020      	movs	r0, r4
    ac04:	425b      	negs	r3, r3
    ac06:	81e3      	strh	r3, [r4, #14]
    ac08:	3302      	adds	r3, #2
    ac0a:	81a3      	strh	r3, [r4, #12]
    ac0c:	6665      	str	r5, [r4, #100]	; 0x64
    ac0e:	6025      	str	r5, [r4, #0]
    ac10:	60a5      	str	r5, [r4, #8]
    ac12:	6065      	str	r5, [r4, #4]
    ac14:	6125      	str	r5, [r4, #16]
    ac16:	6165      	str	r5, [r4, #20]
    ac18:	61a5      	str	r5, [r4, #24]
    ac1a:	2208      	movs	r2, #8
    ac1c:	0029      	movs	r1, r5
    ac1e:	305c      	adds	r0, #92	; 0x5c
    ac20:	f7ff fd1b 	bl	a65a <memset>
    ac24:	6365      	str	r5, [r4, #52]	; 0x34
    ac26:	63a5      	str	r5, [r4, #56]	; 0x38
    ac28:	64a5      	str	r5, [r4, #72]	; 0x48
    ac2a:	64e5      	str	r5, [r4, #76]	; 0x4c
    ac2c:	e7e6      	b.n	abfc <__sfp+0x48>
    ac2e:	46c0      	nop			; (mov r8, r8)
    ac30:	0000b74c 	.word	0x0000b74c

0000ac34 <_fwalk_reent>:
    ac34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ac36:	0004      	movs	r4, r0
    ac38:	0007      	movs	r7, r0
    ac3a:	2600      	movs	r6, #0
    ac3c:	9101      	str	r1, [sp, #4]
    ac3e:	3448      	adds	r4, #72	; 0x48
    ac40:	2c00      	cmp	r4, #0
    ac42:	d101      	bne.n	ac48 <_fwalk_reent+0x14>
    ac44:	0030      	movs	r0, r6
    ac46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ac48:	6863      	ldr	r3, [r4, #4]
    ac4a:	68a5      	ldr	r5, [r4, #8]
    ac4c:	9300      	str	r3, [sp, #0]
    ac4e:	9b00      	ldr	r3, [sp, #0]
    ac50:	3b01      	subs	r3, #1
    ac52:	9300      	str	r3, [sp, #0]
    ac54:	d501      	bpl.n	ac5a <_fwalk_reent+0x26>
    ac56:	6824      	ldr	r4, [r4, #0]
    ac58:	e7f2      	b.n	ac40 <_fwalk_reent+0xc>
    ac5a:	89ab      	ldrh	r3, [r5, #12]
    ac5c:	2b01      	cmp	r3, #1
    ac5e:	d908      	bls.n	ac72 <_fwalk_reent+0x3e>
    ac60:	220e      	movs	r2, #14
    ac62:	5eab      	ldrsh	r3, [r5, r2]
    ac64:	3301      	adds	r3, #1
    ac66:	d004      	beq.n	ac72 <_fwalk_reent+0x3e>
    ac68:	0029      	movs	r1, r5
    ac6a:	0038      	movs	r0, r7
    ac6c:	9b01      	ldr	r3, [sp, #4]
    ac6e:	4798      	blx	r3
    ac70:	4306      	orrs	r6, r0
    ac72:	3568      	adds	r5, #104	; 0x68
    ac74:	e7eb      	b.n	ac4e <_fwalk_reent+0x1a>
	...

0000ac78 <__swhatbuf_r>:
    ac78:	b570      	push	{r4, r5, r6, lr}
    ac7a:	000e      	movs	r6, r1
    ac7c:	001d      	movs	r5, r3
    ac7e:	230e      	movs	r3, #14
    ac80:	5ec9      	ldrsh	r1, [r1, r3]
    ac82:	b090      	sub	sp, #64	; 0x40
    ac84:	0014      	movs	r4, r2
    ac86:	2900      	cmp	r1, #0
    ac88:	da07      	bge.n	ac9a <__swhatbuf_r+0x22>
    ac8a:	2300      	movs	r3, #0
    ac8c:	602b      	str	r3, [r5, #0]
    ac8e:	89b3      	ldrh	r3, [r6, #12]
    ac90:	061b      	lsls	r3, r3, #24
    ac92:	d411      	bmi.n	acb8 <__swhatbuf_r+0x40>
    ac94:	2380      	movs	r3, #128	; 0x80
    ac96:	00db      	lsls	r3, r3, #3
    ac98:	e00f      	b.n	acba <__swhatbuf_r+0x42>
    ac9a:	aa01      	add	r2, sp, #4
    ac9c:	f000 f888 	bl	adb0 <_fstat_r>
    aca0:	2800      	cmp	r0, #0
    aca2:	dbf2      	blt.n	ac8a <__swhatbuf_r+0x12>
    aca4:	22f0      	movs	r2, #240	; 0xf0
    aca6:	9b02      	ldr	r3, [sp, #8]
    aca8:	0212      	lsls	r2, r2, #8
    acaa:	4013      	ands	r3, r2
    acac:	4a05      	ldr	r2, [pc, #20]	; (acc4 <__swhatbuf_r+0x4c>)
    acae:	189b      	adds	r3, r3, r2
    acb0:	425a      	negs	r2, r3
    acb2:	4153      	adcs	r3, r2
    acb4:	602b      	str	r3, [r5, #0]
    acb6:	e7ed      	b.n	ac94 <__swhatbuf_r+0x1c>
    acb8:	2340      	movs	r3, #64	; 0x40
    acba:	2000      	movs	r0, #0
    acbc:	6023      	str	r3, [r4, #0]
    acbe:	b010      	add	sp, #64	; 0x40
    acc0:	bd70      	pop	{r4, r5, r6, pc}
    acc2:	46c0      	nop			; (mov r8, r8)
    acc4:	ffffe000 	.word	0xffffe000

0000acc8 <__malloc_lock>:
    acc8:	4770      	bx	lr

0000acca <__malloc_unlock>:
    acca:	4770      	bx	lr

0000accc <__sread>:
    accc:	b570      	push	{r4, r5, r6, lr}
    acce:	000c      	movs	r4, r1
    acd0:	250e      	movs	r5, #14
    acd2:	5f49      	ldrsh	r1, [r1, r5]
    acd4:	f000 f892 	bl	adfc <_read_r>
    acd8:	2800      	cmp	r0, #0
    acda:	db03      	blt.n	ace4 <__sread+0x18>
    acdc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    acde:	181b      	adds	r3, r3, r0
    ace0:	6563      	str	r3, [r4, #84]	; 0x54
    ace2:	bd70      	pop	{r4, r5, r6, pc}
    ace4:	89a3      	ldrh	r3, [r4, #12]
    ace6:	4a02      	ldr	r2, [pc, #8]	; (acf0 <__sread+0x24>)
    ace8:	4013      	ands	r3, r2
    acea:	81a3      	strh	r3, [r4, #12]
    acec:	e7f9      	b.n	ace2 <__sread+0x16>
    acee:	46c0      	nop			; (mov r8, r8)
    acf0:	ffffefff 	.word	0xffffefff

0000acf4 <__swrite>:
    acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    acf6:	001f      	movs	r7, r3
    acf8:	898b      	ldrh	r3, [r1, #12]
    acfa:	0005      	movs	r5, r0
    acfc:	000c      	movs	r4, r1
    acfe:	0016      	movs	r6, r2
    ad00:	05db      	lsls	r3, r3, #23
    ad02:	d505      	bpl.n	ad10 <__swrite+0x1c>
    ad04:	230e      	movs	r3, #14
    ad06:	5ec9      	ldrsh	r1, [r1, r3]
    ad08:	2200      	movs	r2, #0
    ad0a:	2302      	movs	r3, #2
    ad0c:	f000 f862 	bl	add4 <_lseek_r>
    ad10:	89a3      	ldrh	r3, [r4, #12]
    ad12:	4a05      	ldr	r2, [pc, #20]	; (ad28 <__swrite+0x34>)
    ad14:	0028      	movs	r0, r5
    ad16:	4013      	ands	r3, r2
    ad18:	81a3      	strh	r3, [r4, #12]
    ad1a:	0032      	movs	r2, r6
    ad1c:	230e      	movs	r3, #14
    ad1e:	5ee1      	ldrsh	r1, [r4, r3]
    ad20:	003b      	movs	r3, r7
    ad22:	f000 f81f 	bl	ad64 <_write_r>
    ad26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ad28:	ffffefff 	.word	0xffffefff

0000ad2c <__sseek>:
    ad2c:	b570      	push	{r4, r5, r6, lr}
    ad2e:	000c      	movs	r4, r1
    ad30:	250e      	movs	r5, #14
    ad32:	5f49      	ldrsh	r1, [r1, r5]
    ad34:	f000 f84e 	bl	add4 <_lseek_r>
    ad38:	89a3      	ldrh	r3, [r4, #12]
    ad3a:	1c42      	adds	r2, r0, #1
    ad3c:	d103      	bne.n	ad46 <__sseek+0x1a>
    ad3e:	4a05      	ldr	r2, [pc, #20]	; (ad54 <__sseek+0x28>)
    ad40:	4013      	ands	r3, r2
    ad42:	81a3      	strh	r3, [r4, #12]
    ad44:	bd70      	pop	{r4, r5, r6, pc}
    ad46:	2280      	movs	r2, #128	; 0x80
    ad48:	0152      	lsls	r2, r2, #5
    ad4a:	4313      	orrs	r3, r2
    ad4c:	81a3      	strh	r3, [r4, #12]
    ad4e:	6560      	str	r0, [r4, #84]	; 0x54
    ad50:	e7f8      	b.n	ad44 <__sseek+0x18>
    ad52:	46c0      	nop			; (mov r8, r8)
    ad54:	ffffefff 	.word	0xffffefff

0000ad58 <__sclose>:
    ad58:	b510      	push	{r4, lr}
    ad5a:	230e      	movs	r3, #14
    ad5c:	5ec9      	ldrsh	r1, [r1, r3]
    ad5e:	f000 f815 	bl	ad8c <_close_r>
    ad62:	bd10      	pop	{r4, pc}

0000ad64 <_write_r>:
    ad64:	b570      	push	{r4, r5, r6, lr}
    ad66:	0005      	movs	r5, r0
    ad68:	0008      	movs	r0, r1
    ad6a:	0011      	movs	r1, r2
    ad6c:	2200      	movs	r2, #0
    ad6e:	4c06      	ldr	r4, [pc, #24]	; (ad88 <_write_r+0x24>)
    ad70:	6022      	str	r2, [r4, #0]
    ad72:	001a      	movs	r2, r3
    ad74:	f7fb fe1c 	bl	69b0 <_write>
    ad78:	1c43      	adds	r3, r0, #1
    ad7a:	d103      	bne.n	ad84 <_write_r+0x20>
    ad7c:	6823      	ldr	r3, [r4, #0]
    ad7e:	2b00      	cmp	r3, #0
    ad80:	d000      	beq.n	ad84 <_write_r+0x20>
    ad82:	602b      	str	r3, [r5, #0]
    ad84:	bd70      	pop	{r4, r5, r6, pc}
    ad86:	46c0      	nop			; (mov r8, r8)
    ad88:	20000c90 	.word	0x20000c90

0000ad8c <_close_r>:
    ad8c:	2300      	movs	r3, #0
    ad8e:	b570      	push	{r4, r5, r6, lr}
    ad90:	4c06      	ldr	r4, [pc, #24]	; (adac <_close_r+0x20>)
    ad92:	0005      	movs	r5, r0
    ad94:	0008      	movs	r0, r1
    ad96:	6023      	str	r3, [r4, #0]
    ad98:	f7fb fe5e 	bl	6a58 <_close>
    ad9c:	1c43      	adds	r3, r0, #1
    ad9e:	d103      	bne.n	ada8 <_close_r+0x1c>
    ada0:	6823      	ldr	r3, [r4, #0]
    ada2:	2b00      	cmp	r3, #0
    ada4:	d000      	beq.n	ada8 <_close_r+0x1c>
    ada6:	602b      	str	r3, [r5, #0]
    ada8:	bd70      	pop	{r4, r5, r6, pc}
    adaa:	46c0      	nop			; (mov r8, r8)
    adac:	20000c90 	.word	0x20000c90

0000adb0 <_fstat_r>:
    adb0:	2300      	movs	r3, #0
    adb2:	b570      	push	{r4, r5, r6, lr}
    adb4:	4c06      	ldr	r4, [pc, #24]	; (add0 <_fstat_r+0x20>)
    adb6:	0005      	movs	r5, r0
    adb8:	0008      	movs	r0, r1
    adba:	0011      	movs	r1, r2
    adbc:	6023      	str	r3, [r4, #0]
    adbe:	f7fb fe55 	bl	6a6c <_fstat>
    adc2:	1c43      	adds	r3, r0, #1
    adc4:	d103      	bne.n	adce <_fstat_r+0x1e>
    adc6:	6823      	ldr	r3, [r4, #0]
    adc8:	2b00      	cmp	r3, #0
    adca:	d000      	beq.n	adce <_fstat_r+0x1e>
    adcc:	602b      	str	r3, [r5, #0]
    adce:	bd70      	pop	{r4, r5, r6, pc}
    add0:	20000c90 	.word	0x20000c90

0000add4 <_lseek_r>:
    add4:	b570      	push	{r4, r5, r6, lr}
    add6:	0005      	movs	r5, r0
    add8:	0008      	movs	r0, r1
    adda:	0011      	movs	r1, r2
    addc:	2200      	movs	r2, #0
    adde:	4c06      	ldr	r4, [pc, #24]	; (adf8 <_lseek_r+0x24>)
    ade0:	6022      	str	r2, [r4, #0]
    ade2:	001a      	movs	r2, r3
    ade4:	f7fb fe50 	bl	6a88 <_lseek>
    ade8:	1c43      	adds	r3, r0, #1
    adea:	d103      	bne.n	adf4 <_lseek_r+0x20>
    adec:	6823      	ldr	r3, [r4, #0]
    adee:	2b00      	cmp	r3, #0
    adf0:	d000      	beq.n	adf4 <_lseek_r+0x20>
    adf2:	602b      	str	r3, [r5, #0]
    adf4:	bd70      	pop	{r4, r5, r6, pc}
    adf6:	46c0      	nop			; (mov r8, r8)
    adf8:	20000c90 	.word	0x20000c90

0000adfc <_read_r>:
    adfc:	b570      	push	{r4, r5, r6, lr}
    adfe:	0005      	movs	r5, r0
    ae00:	0008      	movs	r0, r1
    ae02:	0011      	movs	r1, r2
    ae04:	2200      	movs	r2, #0
    ae06:	4c06      	ldr	r4, [pc, #24]	; (ae20 <_read_r+0x24>)
    ae08:	6022      	str	r2, [r4, #0]
    ae0a:	001a      	movs	r2, r3
    ae0c:	f7fb fda6 	bl	695c <_read>
    ae10:	1c43      	adds	r3, r0, #1
    ae12:	d103      	bne.n	ae1c <_read_r+0x20>
    ae14:	6823      	ldr	r3, [r4, #0]
    ae16:	2b00      	cmp	r3, #0
    ae18:	d000      	beq.n	ae1c <_read_r+0x20>
    ae1a:	602b      	str	r3, [r5, #0]
    ae1c:	bd70      	pop	{r4, r5, r6, pc}
    ae1e:	46c0      	nop			; (mov r8, r8)
    ae20:	20000c90 	.word	0x20000c90

0000ae24 <sd_mmc_trans_units>:
    ae24:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000ae40 <sd_trans_multipliers>:
    ae40:	00000000 0000000a 0000000c 0000000d     ................
    ae50:	0000000f 00000014 00000019 0000001e     ................
    ae60:	00000023 00000028 0000002d 00000032     #...(...-...2...
    ae70:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000ae80 <mmc_trans_multipliers>:
    ae80:	00000000 0000000a 0000000c 0000000d     ................
    ae90:	0000000f 00000014 0000001a 0000001e     ................
    aea0:	00000023 00000028 0000002d 00000034     #...(...-...4...
    aeb0:	00000037 0000003c 00000046 00000050     7...<...F...P...
    aec0:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
    aed0:	22302074 00000000                       t 0"....

0000aed8 <lun_desc>:
    aed8:	00001dc5 00001e1d 00001e69 00001eb5     ........i.......
    aee8:	00001ee5 00001f69 00001ff9 0000aec0     ....i...........
    aef8:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    af08:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
    af18:	00005ada 00005b54 00005b54 00005af8     .Z..T[..T[...Z..
    af28:	00005af2 00005afe 00005ae0 00005b04     .Z...Z...Z...[..
    af38:	00005b3a 00005e20 00005e70 00005e70     :[.. ^..p^..p^..
    af48:	00005e6c 00005e12 00005e32 00005e02     l^...^..2^...^..
    af58:	00005e44 00005e56 00005ebe 00005eec     D^..V^...^...^..
    af68:	00005eec 00005ee8 00005eb8 00005ec4     .^...^...^...^..
    af78:	00005eb2 00005eca 00005ed0              .^...^...^..

0000af84 <LfnOfs>:
    af84:	07050301 12100e09 1c181614 0000001e     ................
    af94:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    afa4:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
    afb4:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
    afc4:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
    afd4:	20205441 00202020                       AT     .

0000afdc <excvt.4558>:
    afdc:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    afec:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    affc:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    b00c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    b01c:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    b02c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    b03c:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    b04c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0000b05c <Tbl>:
    b05c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    b06c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    b07c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    b08c:	00d600ff 00f800dc 00d800a3 019200d7     ................
    b09c:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    b0ac:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    b0bc:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    b0cc:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    b0dc:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    b0ec:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    b0fc:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    b10c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    b11c:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    b12c:	00da00de 00d900db 00dd00fd 00b400af     ................
    b13c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    b14c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0000b15c <tbl_lower.4308>:
    b15c:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    b16c:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    b17c:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    b18c:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    b19c:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    b1ac:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    b1bc:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    b1cc:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    b1dc:	01050103 01090107 010d010b 0111010f     ................
    b1ec:	01150113 01190117 011d011b 0121011f     ..............!.
    b1fc:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    b20c:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    b21c:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    b22c:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    b23c:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    b24c:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    b25c:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    b26c:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    b27c:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    b28c:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    b29c:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    b2ac:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    b2bc:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    b2cc:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    b2dc:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    b2ec:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    b2fc:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    b30c:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    b31c:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    b32c:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0000b33c <tbl_upper.4309>:
    b33c:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    b34c:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    b35c:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    b36c:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    b37c:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    b38c:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    b39c:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    b3ac:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    b3bc:	01040102 01080106 010c010a 0110010e     ................
    b3cc:	01140112 01180116 011c011a 0120011e     .............. .
    b3dc:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    b3ec:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    b3fc:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    b40c:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    b41c:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    b42c:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    b43c:	03940393 03960395 03980397 039a0399     ................
    b44c:	039c039b 039e039d 03a0039f 03a303a1     ................
    b45c:	03a503a4 03a703a6 03a903a8 041003aa     ................
    b46c:	04120411 04140413 04160415 04180417     ................
    b47c:	041a0419 041c041b 041e041d 0420041f     .............. .
    b48c:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    b49c:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    b4ac:	04030402 04050404 04070406 04090408     ................
    b4bc:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    b4cc:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    b4dc:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    b4ec:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    b4fc:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    b50c:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    b51c:	35455345 20303631 4e45202d 20524554     ESE5160 - ENTER 
    b52c:	544f4f42 44414f4c 00005245 2d0d0a0c     BOOTLOADER.....-
    b53c:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    b54c:	6c706d61 6e6f2065 74614620 2d207346     ample on FatFs -
    b55c:	000d0a2d 43204453 20445241 6c696166     -...SD CARD fail
    b56c:	20216465 63656843 6f79206b 63207275     ed! Check your c
    b57c:	656e6e6f 6f697463 202e736e 74737953     onnections. Syst
    b58c:	77206d65 206c6c69 74736572 20747261     em will restart 
    b59c:	35206e69 63657320 73646e6f 002e2e2e     in 5 seconds....
    b5ac:	43204453 20445241 6e756f6d 75732074     SD CARD mount su
    b5bc:	73656363 46202173 73656c69 65747379     ccess! Filesyste
    b5cc:	6c61206d 6d206f73 746e756f 202e6465     m also mounted. 
    b5dc:	00000a0d 35455345 20303631 5845202d     ....ESE5160 - EX
    b5ec:	42205449 4c544f4f 4544414f 00000052     IT BOOTLOADER...
    b5fc:	43204453 20647261 74696e69 65746169     SD Card initiate
    b60c:	6f632064 63657272 21796c74 00000d0a     d correctly!....
    b61c:	6e756f4d 69642074 28206b73 6f6d5f66     Mount disk (f_mo
    b62c:	29746e75 0d2e2e2e 0000000a 4941465b     unt)........[FAI
    b63c:	72205d4c 25207365 000a0d64 5d4b4f5b     L] res %d...[OK]
    b64c:	00000a0d 61657243 61206574 6c696620     ....Create a fil
    b65c:	66282065 65706f5f 2e2e296e 000a0d2e     e (f_open)......
    b66c:	74697257 6f742065 73657420 69662074     Write to test fi
    b67c:	2820656c 75705f66 2e297374 0a0d2e2e     le (f_puts).....
    b68c:	00000000 74736554 2f445320 20434d4d     ....Test SD/MMC 
    b69c:	63617473 00000a6b 4941465b 0a0d5d4c     stack...[FAIL]..
    b6ac:	00000000 74736554 20736920 63637573     ....Test is succ
    b6bc:	66737365 0a2e6c75 0000000d 6c756f43     essful......Coul
    b6cc:	6f6e2064 706f2074 62206e65 72616e69     d not open binar
    b6dc:	69662079 0d21656c 0000000a 74697257     y file!.....Writ
    b6ec:	6f742065 73657420 69662074 2820656c     e to test file (
    b6fc:	72775f66 29657469 0d2e2e2e 0000000a     f_write)........
    b70c:	20646e45 5420666f 2e747365 00000d0a     End of Test.....
    b71c:	43204453 20647261 6c696166 69206465     SD Card failed i
    b72c:	6974696e 6f697461 4320216e 6b636568     nitiation! Check
    b73c:	6e6f6320 7463656e 736e6f69 000d0a21      connections!...

0000b74c <_global_impure_ptr>:
    b74c:	20000034                                4.. 

0000b750 <__sf_fake_stderr>:
	...

0000b770 <__sf_fake_stdin>:
	...

0000b790 <__sf_fake_stdout>:
	...

0000b7b0 <_init>:
    b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b7b2:	46c0      	nop			; (mov r8, r8)
    b7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b7b6:	bc08      	pop	{r3}
    b7b8:	469e      	mov	lr, r3
    b7ba:	4770      	bx	lr

0000b7bc <__init_array_start>:
    b7bc:	000000dd 	.word	0x000000dd

0000b7c0 <_fini>:
    b7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b7c2:	46c0      	nop			; (mov r8, r8)
    b7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b7c6:	bc08      	pop	{r3}
    b7c8:	469e      	mov	lr, r3
    b7ca:	4770      	bx	lr

0000b7cc <__fini_array_start>:
    b7cc:	000000b5 	.word	0x000000b5
