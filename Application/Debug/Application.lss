
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00025620  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002e0  20000000  00037620  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005324  200002e0  00037900  000302e0  2**4
                  ALLOC
  3 .stack        00002004  20005604  0003cc24  000302e0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
  6 .debug_info   000f7ff2  00000000  00000000  00030361  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000f2d3  00000000  00000000  00128353  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00011513  00000000  00000000  00137626  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002fd8  00000000  00000000  00148b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002c90  00000000  00000000  0014bb11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00026f54  00000000  00000000  0014e7a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0004e03d  00000000  00000000  001756f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000b84ca  00000000  00000000  001c3732  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000b388  00000000  00000000  0027bbfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	08 76 00 20 0d 8b 02 00 05 8c 02 00 05 8c 02 00     .v. ............
	...
   1202c:	a5 7c 01 00 00 00 00 00 00 00 00 00 c1 7d 01 00     .|...........}..
   1203c:	09 7e 01 00 05 8c 02 00 05 8c 02 00 05 8c 02 00     .~..............
   1204c:	5d 4c 02 00 89 41 02 00 05 8c 02 00 61 24 01 00     ]L...A......a$..
   1205c:	05 8c 02 00 a5 25 01 00 01 53 02 00 19 53 02 00     .....%...S...S..
   1206c:	31 53 02 00 49 53 02 00 61 53 02 00 79 53 02 00     1S..IS..aS..yS..
   1207c:	55 8a 02 00 69 8a 02 00 7d 8a 02 00 91 59 01 00     U...i...}....Y..
   1208c:	a5 59 01 00 b9 59 01 00 00 00 00 00 00 00 00 00     .Y...Y..........
   1209c:	e9 22 01 00 05 8c 02 00 25 24 01 00 05 8c 02 00     ."......%$......
   120ac:	05 8c 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002e0 	.word	0x200002e0
   120d4:	00000000 	.word	0x00000000
   120d8:	00037620 	.word	0x00037620

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002e4 	.word	0x200002e4
   12108:	00037620 	.word	0x00037620
   1210c:	00037620 	.word	0x00037620
   12110:	00000000 	.word	0x00000000

00012114 <adc_is_syncing>:
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	60fb      	str	r3, [r7, #12]
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	7e5b      	ldrb	r3, [r3, #25]
   12126:	b2db      	uxtb	r3, r3
   12128:	b25b      	sxtb	r3, r3
   1212a:	2b00      	cmp	r3, #0
   1212c:	da01      	bge.n	12132 <adc_is_syncing+0x1e>
   1212e:	2301      	movs	r3, #1
   12130:	e000      	b.n	12134 <adc_is_syncing+0x20>
   12132:	2300      	movs	r3, #0
   12134:	0018      	movs	r0, r3
   12136:	46bd      	mov	sp, r7
   12138:	b004      	add	sp, #16
   1213a:	bd80      	pop	{r7, pc}

0001213c <adc_start_conversion>:
   1213c:	b580      	push	{r7, lr}
   1213e:	b084      	sub	sp, #16
   12140:	af00      	add	r7, sp, #0
   12142:	6078      	str	r0, [r7, #4]
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	681b      	ldr	r3, [r3, #0]
   12148:	60fb      	str	r3, [r7, #12]
   1214a:	46c0      	nop			; (mov r8, r8)
   1214c:	687b      	ldr	r3, [r7, #4]
   1214e:	0018      	movs	r0, r3
   12150:	4b0b      	ldr	r3, [pc, #44]	; (12180 <adc_start_conversion+0x44>)
   12152:	4798      	blx	r3
   12154:	1e03      	subs	r3, r0, #0
   12156:	d1f9      	bne.n	1214c <adc_start_conversion+0x10>
   12158:	68fb      	ldr	r3, [r7, #12]
   1215a:	7b1b      	ldrb	r3, [r3, #12]
   1215c:	b2db      	uxtb	r3, r3
   1215e:	2202      	movs	r2, #2
   12160:	4313      	orrs	r3, r2
   12162:	b2da      	uxtb	r2, r3
   12164:	68fb      	ldr	r3, [r7, #12]
   12166:	731a      	strb	r2, [r3, #12]
   12168:	46c0      	nop			; (mov r8, r8)
   1216a:	687b      	ldr	r3, [r7, #4]
   1216c:	0018      	movs	r0, r3
   1216e:	4b04      	ldr	r3, [pc, #16]	; (12180 <adc_start_conversion+0x44>)
   12170:	4798      	blx	r3
   12172:	1e03      	subs	r3, r0, #0
   12174:	d1f9      	bne.n	1216a <adc_start_conversion+0x2e>
   12176:	46c0      	nop			; (mov r8, r8)
   12178:	46bd      	mov	sp, r7
   1217a:	b004      	add	sp, #16
   1217c:	bd80      	pop	{r7, pc}
   1217e:	46c0      	nop			; (mov r8, r8)
   12180:	00012115 	.word	0x00012115

00012184 <adc_disable_interrupt>:
   12184:	b580      	push	{r7, lr}
   12186:	b084      	sub	sp, #16
   12188:	af00      	add	r7, sp, #0
   1218a:	6078      	str	r0, [r7, #4]
   1218c:	000a      	movs	r2, r1
   1218e:	1cfb      	adds	r3, r7, #3
   12190:	701a      	strb	r2, [r3, #0]
   12192:	687b      	ldr	r3, [r7, #4]
   12194:	681b      	ldr	r3, [r3, #0]
   12196:	60fb      	str	r3, [r7, #12]
   12198:	68fb      	ldr	r3, [r7, #12]
   1219a:	1cfa      	adds	r2, r7, #3
   1219c:	7812      	ldrb	r2, [r2, #0]
   1219e:	759a      	strb	r2, [r3, #22]
   121a0:	46c0      	nop			; (mov r8, r8)
   121a2:	46bd      	mov	sp, r7
   121a4:	b004      	add	sp, #16
   121a6:	bd80      	pop	{r7, pc}

000121a8 <_adc_interrupt_handler>:
   121a8:	b580      	push	{r7, lr}
   121aa:	b084      	sub	sp, #16
   121ac:	af00      	add	r7, sp, #0
   121ae:	0002      	movs	r2, r0
   121b0:	1dfb      	adds	r3, r7, #7
   121b2:	701a      	strb	r2, [r3, #0]
   121b4:	1dfb      	adds	r3, r7, #7
   121b6:	781a      	ldrb	r2, [r3, #0]
   121b8:	4b47      	ldr	r3, [pc, #284]	; (122d8 <_adc_interrupt_handler+0x130>)
   121ba:	0092      	lsls	r2, r2, #2
   121bc:	58d3      	ldr	r3, [r2, r3]
   121be:	60fb      	str	r3, [r7, #12]
   121c0:	68fb      	ldr	r3, [r7, #12]
   121c2:	681b      	ldr	r3, [r3, #0]
   121c4:	7e1b      	ldrb	r3, [r3, #24]
   121c6:	b2da      	uxtb	r2, r3
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	681b      	ldr	r3, [r3, #0]
   121cc:	7ddb      	ldrb	r3, [r3, #23]
   121ce:	b2db      	uxtb	r3, r3
   121d0:	4013      	ands	r3, r2
   121d2:	b2db      	uxtb	r3, r3
   121d4:	60bb      	str	r3, [r7, #8]
   121d6:	68bb      	ldr	r3, [r7, #8]
   121d8:	2201      	movs	r2, #1
   121da:	4013      	ands	r3, r2
   121dc:	d045      	beq.n	1226a <_adc_interrupt_handler+0xc2>
   121de:	68fb      	ldr	r3, [r7, #12]
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	2201      	movs	r2, #1
   121e4:	761a      	strb	r2, [r3, #24]
   121e6:	46c0      	nop			; (mov r8, r8)
   121e8:	68fb      	ldr	r3, [r7, #12]
   121ea:	0018      	movs	r0, r3
   121ec:	4b3b      	ldr	r3, [pc, #236]	; (122dc <_adc_interrupt_handler+0x134>)
   121ee:	4798      	blx	r3
   121f0:	1e03      	subs	r3, r0, #0
   121f2:	d1f9      	bne.n	121e8 <_adc_interrupt_handler+0x40>
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	695b      	ldr	r3, [r3, #20]
   121f8:	1c99      	adds	r1, r3, #2
   121fa:	68fa      	ldr	r2, [r7, #12]
   121fc:	6151      	str	r1, [r2, #20]
   121fe:	68fa      	ldr	r2, [r7, #12]
   12200:	6812      	ldr	r2, [r2, #0]
   12202:	8b52      	ldrh	r2, [r2, #26]
   12204:	b292      	uxth	r2, r2
   12206:	801a      	strh	r2, [r3, #0]
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	8b1b      	ldrh	r3, [r3, #24]
   1220c:	b29b      	uxth	r3, r3
   1220e:	3b01      	subs	r3, #1
   12210:	b29b      	uxth	r3, r3
   12212:	68fa      	ldr	r2, [r7, #12]
   12214:	1c19      	adds	r1, r3, #0
   12216:	8311      	strh	r1, [r2, #24]
   12218:	2b00      	cmp	r3, #0
   1221a:	d008      	beq.n	1222e <_adc_interrupt_handler+0x86>
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	7f5b      	ldrb	r3, [r3, #29]
   12220:	2b00      	cmp	r3, #0
   12222:	d022      	beq.n	1226a <_adc_interrupt_handler+0xc2>
   12224:	68fb      	ldr	r3, [r7, #12]
   12226:	0018      	movs	r0, r3
   12228:	4b2d      	ldr	r3, [pc, #180]	; (122e0 <_adc_interrupt_handler+0x138>)
   1222a:	4798      	blx	r3
   1222c:	e01d      	b.n	1226a <_adc_interrupt_handler+0xc2>
   1222e:	68fb      	ldr	r3, [r7, #12]
   12230:	2101      	movs	r1, #1
   12232:	0018      	movs	r0, r3
   12234:	4b2b      	ldr	r3, [pc, #172]	; (122e4 <_adc_interrupt_handler+0x13c>)
   12236:	4798      	blx	r3
   12238:	68fb      	ldr	r3, [r7, #12]
   1223a:	7f1b      	ldrb	r3, [r3, #28]
   1223c:	b2db      	uxtb	r3, r3
   1223e:	2b05      	cmp	r3, #5
   12240:	d113      	bne.n	1226a <_adc_interrupt_handler+0xc2>
   12242:	68fb      	ldr	r3, [r7, #12]
   12244:	2200      	movs	r2, #0
   12246:	771a      	strb	r2, [r3, #28]
   12248:	68fb      	ldr	r3, [r7, #12]
   1224a:	7edb      	ldrb	r3, [r3, #27]
   1224c:	001a      	movs	r2, r3
   1224e:	2301      	movs	r3, #1
   12250:	4013      	ands	r3, r2
   12252:	d00a      	beq.n	1226a <_adc_interrupt_handler+0xc2>
   12254:	68fb      	ldr	r3, [r7, #12]
   12256:	7e9b      	ldrb	r3, [r3, #26]
   12258:	001a      	movs	r2, r3
   1225a:	2301      	movs	r3, #1
   1225c:	4013      	ands	r3, r2
   1225e:	d004      	beq.n	1226a <_adc_interrupt_handler+0xc2>
   12260:	68fb      	ldr	r3, [r7, #12]
   12262:	689b      	ldr	r3, [r3, #8]
   12264:	68fa      	ldr	r2, [r7, #12]
   12266:	0010      	movs	r0, r2
   12268:	4798      	blx	r3
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	2204      	movs	r2, #4
   1226e:	4013      	ands	r3, r2
   12270:	d014      	beq.n	1229c <_adc_interrupt_handler+0xf4>
   12272:	68fb      	ldr	r3, [r7, #12]
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	2204      	movs	r2, #4
   12278:	761a      	strb	r2, [r3, #24]
   1227a:	68fb      	ldr	r3, [r7, #12]
   1227c:	7edb      	ldrb	r3, [r3, #27]
   1227e:	001a      	movs	r2, r3
   12280:	2302      	movs	r3, #2
   12282:	4013      	ands	r3, r2
   12284:	d00a      	beq.n	1229c <_adc_interrupt_handler+0xf4>
   12286:	68fb      	ldr	r3, [r7, #12]
   12288:	7e9b      	ldrb	r3, [r3, #26]
   1228a:	001a      	movs	r2, r3
   1228c:	2302      	movs	r3, #2
   1228e:	4013      	ands	r3, r2
   12290:	d004      	beq.n	1229c <_adc_interrupt_handler+0xf4>
   12292:	68fb      	ldr	r3, [r7, #12]
   12294:	68db      	ldr	r3, [r3, #12]
   12296:	68fa      	ldr	r2, [r7, #12]
   12298:	0010      	movs	r0, r2
   1229a:	4798      	blx	r3
   1229c:	68bb      	ldr	r3, [r7, #8]
   1229e:	2202      	movs	r2, #2
   122a0:	4013      	ands	r3, r2
   122a2:	d014      	beq.n	122ce <_adc_interrupt_handler+0x126>
   122a4:	68fb      	ldr	r3, [r7, #12]
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	2202      	movs	r2, #2
   122aa:	761a      	strb	r2, [r3, #24]
   122ac:	68fb      	ldr	r3, [r7, #12]
   122ae:	7edb      	ldrb	r3, [r3, #27]
   122b0:	001a      	movs	r2, r3
   122b2:	2304      	movs	r3, #4
   122b4:	4013      	ands	r3, r2
   122b6:	d00a      	beq.n	122ce <_adc_interrupt_handler+0x126>
   122b8:	68fb      	ldr	r3, [r7, #12]
   122ba:	7e9b      	ldrb	r3, [r3, #26]
   122bc:	001a      	movs	r2, r3
   122be:	2304      	movs	r3, #4
   122c0:	4013      	ands	r3, r2
   122c2:	d004      	beq.n	122ce <_adc_interrupt_handler+0x126>
   122c4:	68fb      	ldr	r3, [r7, #12]
   122c6:	691b      	ldr	r3, [r3, #16]
   122c8:	68fa      	ldr	r2, [r7, #12]
   122ca:	0010      	movs	r0, r2
   122cc:	4798      	blx	r3
   122ce:	46c0      	nop			; (mov r8, r8)
   122d0:	46bd      	mov	sp, r7
   122d2:	b004      	add	sp, #16
   122d4:	bd80      	pop	{r7, pc}
   122d6:	46c0      	nop			; (mov r8, r8)
   122d8:	20004180 	.word	0x20004180
   122dc:	00012115 	.word	0x00012115
   122e0:	0001213d 	.word	0x0001213d
   122e4:	00012185 	.word	0x00012185

000122e8 <ADC_Handler>:
   122e8:	b580      	push	{r7, lr}
   122ea:	af00      	add	r7, sp, #0
   122ec:	2000      	movs	r0, #0
   122ee:	4b02      	ldr	r3, [pc, #8]	; (122f8 <ADC_Handler+0x10>)
   122f0:	4798      	blx	r3
   122f2:	46c0      	nop			; (mov r8, r8)
   122f4:	46bd      	mov	sp, r7
   122f6:	bd80      	pop	{r7, pc}
   122f8:	000121a9 	.word	0x000121a9

000122fc <system_interrupt_disable>:
   122fc:	b580      	push	{r7, lr}
   122fe:	b082      	sub	sp, #8
   12300:	af00      	add	r7, sp, #0
   12302:	0002      	movs	r2, r0
   12304:	1dfb      	adds	r3, r7, #7
   12306:	701a      	strb	r2, [r3, #0]
   12308:	4a07      	ldr	r2, [pc, #28]	; (12328 <system_interrupt_disable+0x2c>)
   1230a:	1dfb      	adds	r3, r7, #7
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	0019      	movs	r1, r3
   12310:	231f      	movs	r3, #31
   12312:	400b      	ands	r3, r1
   12314:	2101      	movs	r1, #1
   12316:	4099      	lsls	r1, r3
   12318:	000b      	movs	r3, r1
   1231a:	0019      	movs	r1, r3
   1231c:	2380      	movs	r3, #128	; 0x80
   1231e:	50d1      	str	r1, [r2, r3]
   12320:	46c0      	nop			; (mov r8, r8)
   12322:	46bd      	mov	sp, r7
   12324:	b002      	add	sp, #8
   12326:	bd80      	pop	{r7, pc}
   12328:	e000e100 	.word	0xe000e100

0001232c <_dac_interrupt_handler>:
   1232c:	b580      	push	{r7, lr}
   1232e:	b084      	sub	sp, #16
   12330:	af00      	add	r7, sp, #0
   12332:	0002      	movs	r2, r0
   12334:	1dfb      	adds	r3, r7, #7
   12336:	701a      	strb	r2, [r3, #0]
   12338:	1dfb      	adds	r3, r7, #7
   1233a:	781a      	ldrb	r2, [r3, #0]
   1233c:	4b37      	ldr	r3, [pc, #220]	; (1241c <_dac_interrupt_handler+0xf0>)
   1233e:	0092      	lsls	r2, r2, #2
   12340:	58d3      	ldr	r3, [r2, r3]
   12342:	60fb      	str	r3, [r7, #12]
   12344:	68fb      	ldr	r3, [r7, #12]
   12346:	681b      	ldr	r3, [r3, #0]
   12348:	60bb      	str	r3, [r7, #8]
   1234a:	68bb      	ldr	r3, [r7, #8]
   1234c:	799b      	ldrb	r3, [r3, #6]
   1234e:	b2db      	uxtb	r3, r3
   12350:	001a      	movs	r2, r3
   12352:	2301      	movs	r3, #1
   12354:	4013      	ands	r3, r2
   12356:	d00e      	beq.n	12376 <_dac_interrupt_handler+0x4a>
   12358:	68bb      	ldr	r3, [r7, #8]
   1235a:	2201      	movs	r2, #1
   1235c:	719a      	strb	r2, [r3, #6]
   1235e:	68fb      	ldr	r3, [r7, #12]
   12360:	3314      	adds	r3, #20
   12362:	2b00      	cmp	r3, #0
   12364:	d007      	beq.n	12376 <_dac_interrupt_handler+0x4a>
   12366:	68fb      	ldr	r3, [r7, #12]
   12368:	7c5b      	ldrb	r3, [r3, #17]
   1236a:	2b00      	cmp	r3, #0
   1236c:	d003      	beq.n	12376 <_dac_interrupt_handler+0x4a>
   1236e:	68fb      	ldr	r3, [r7, #12]
   12370:	699b      	ldr	r3, [r3, #24]
   12372:	2000      	movs	r0, #0
   12374:	4798      	blx	r3
   12376:	68bb      	ldr	r3, [r7, #8]
   12378:	799b      	ldrb	r3, [r3, #6]
   1237a:	b2db      	uxtb	r3, r3
   1237c:	001a      	movs	r2, r3
   1237e:	2302      	movs	r3, #2
   12380:	4013      	ands	r3, r2
   12382:	d047      	beq.n	12414 <_dac_interrupt_handler+0xe8>
   12384:	68bb      	ldr	r3, [r7, #8]
   12386:	2202      	movs	r2, #2
   12388:	719a      	strb	r2, [r3, #6]
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	899b      	ldrh	r3, [r3, #12]
   1238e:	b29b      	uxth	r3, r3
   12390:	2b00      	cmp	r3, #0
   12392:	d033      	beq.n	123fc <_dac_interrupt_handler+0xd0>
   12394:	68fb      	ldr	r3, [r7, #12]
   12396:	689a      	ldr	r2, [r3, #8]
   12398:	68fb      	ldr	r3, [r7, #12]
   1239a:	89db      	ldrh	r3, [r3, #14]
   1239c:	b29b      	uxth	r3, r3
   1239e:	1c59      	adds	r1, r3, #1
   123a0:	b288      	uxth	r0, r1
   123a2:	68f9      	ldr	r1, [r7, #12]
   123a4:	81c8      	strh	r0, [r1, #14]
   123a6:	005b      	lsls	r3, r3, #1
   123a8:	18d3      	adds	r3, r2, r3
   123aa:	881b      	ldrh	r3, [r3, #0]
   123ac:	b29a      	uxth	r2, r3
   123ae:	68bb      	ldr	r3, [r7, #8]
   123b0:	819a      	strh	r2, [r3, #12]
   123b2:	68fb      	ldr	r3, [r7, #12]
   123b4:	899b      	ldrh	r3, [r3, #12]
   123b6:	b29b      	uxth	r3, r3
   123b8:	3b01      	subs	r3, #1
   123ba:	b29a      	uxth	r2, r3
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	819a      	strh	r2, [r3, #12]
   123c0:	68fb      	ldr	r3, [r7, #12]
   123c2:	899b      	ldrh	r3, [r3, #12]
   123c4:	b29b      	uxth	r3, r3
   123c6:	2b00      	cmp	r3, #0
   123c8:	d118      	bne.n	123fc <_dac_interrupt_handler+0xd0>
   123ca:	68fb      	ldr	r3, [r7, #12]
   123cc:	2220      	movs	r2, #32
   123ce:	2100      	movs	r1, #0
   123d0:	5499      	strb	r1, [r3, r2]
   123d2:	68bb      	ldr	r3, [r7, #8]
   123d4:	2202      	movs	r2, #2
   123d6:	711a      	strb	r2, [r3, #4]
   123d8:	68bb      	ldr	r3, [r7, #8]
   123da:	2202      	movs	r2, #2
   123dc:	719a      	strb	r2, [r3, #6]
   123de:	2019      	movs	r0, #25
   123e0:	4b0f      	ldr	r3, [pc, #60]	; (12420 <_dac_interrupt_handler+0xf4>)
   123e2:	4798      	blx	r3
   123e4:	68fb      	ldr	r3, [r7, #12]
   123e6:	3314      	adds	r3, #20
   123e8:	2b00      	cmp	r3, #0
   123ea:	d007      	beq.n	123fc <_dac_interrupt_handler+0xd0>
   123ec:	68fb      	ldr	r3, [r7, #12]
   123ee:	7c9b      	ldrb	r3, [r3, #18]
   123f0:	2b00      	cmp	r3, #0
   123f2:	d003      	beq.n	123fc <_dac_interrupt_handler+0xd0>
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	69db      	ldr	r3, [r3, #28]
   123f8:	2000      	movs	r0, #0
   123fa:	4798      	blx	r3
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	3314      	adds	r3, #20
   12400:	2b00      	cmp	r3, #0
   12402:	d007      	beq.n	12414 <_dac_interrupt_handler+0xe8>
   12404:	68fb      	ldr	r3, [r7, #12]
   12406:	7c1b      	ldrb	r3, [r3, #16]
   12408:	2b00      	cmp	r3, #0
   1240a:	d003      	beq.n	12414 <_dac_interrupt_handler+0xe8>
   1240c:	68fb      	ldr	r3, [r7, #12]
   1240e:	695b      	ldr	r3, [r3, #20]
   12410:	2000      	movs	r0, #0
   12412:	4798      	blx	r3
   12414:	46c0      	nop			; (mov r8, r8)
   12416:	46bd      	mov	sp, r7
   12418:	b004      	add	sp, #16
   1241a:	bd80      	pop	{r7, pc}
   1241c:	20004184 	.word	0x20004184
   12420:	000122fd 	.word	0x000122fd

00012424 <DAC_Handler>:
   12424:	b580      	push	{r7, lr}
   12426:	af00      	add	r7, sp, #0
   12428:	2000      	movs	r0, #0
   1242a:	4b02      	ldr	r3, [pc, #8]	; (12434 <DAC_Handler+0x10>)
   1242c:	4798      	blx	r3
   1242e:	46c0      	nop			; (mov r8, r8)
   12430:	46bd      	mov	sp, r7
   12432:	bd80      	pop	{r7, pc}
   12434:	0001232d 	.word	0x0001232d

00012438 <system_interrupt_enter_critical_section>:
   12438:	b580      	push	{r7, lr}
   1243a:	af00      	add	r7, sp, #0
   1243c:	4b02      	ldr	r3, [pc, #8]	; (12448 <system_interrupt_enter_critical_section+0x10>)
   1243e:	4798      	blx	r3
   12440:	46c0      	nop			; (mov r8, r8)
   12442:	46bd      	mov	sp, r7
   12444:	bd80      	pop	{r7, pc}
   12446:	46c0      	nop			; (mov r8, r8)
   12448:	00023de9 	.word	0x00023de9

0001244c <system_interrupt_leave_critical_section>:
   1244c:	b580      	push	{r7, lr}
   1244e:	af00      	add	r7, sp, #0
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <system_interrupt_leave_critical_section+0x10>)
   12452:	4798      	blx	r3
   12454:	46c0      	nop			; (mov r8, r8)
   12456:	46bd      	mov	sp, r7
   12458:	bd80      	pop	{r7, pc}
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	00023e3d 	.word	0x00023e3d

00012460 <DMAC_Handler>:
   12460:	b580      	push	{r7, lr}
   12462:	b086      	sub	sp, #24
   12464:	af00      	add	r7, sp, #0
   12466:	4b49      	ldr	r3, [pc, #292]	; (1258c <DMAC_Handler+0x12c>)
   12468:	4798      	blx	r3
   1246a:	4b49      	ldr	r3, [pc, #292]	; (12590 <DMAC_Handler+0x130>)
   1246c:	8c1b      	ldrh	r3, [r3, #32]
   1246e:	b29b      	uxth	r3, r3
   12470:	b2da      	uxtb	r2, r3
   12472:	2317      	movs	r3, #23
   12474:	18fb      	adds	r3, r7, r3
   12476:	210f      	movs	r1, #15
   12478:	400a      	ands	r2, r1
   1247a:	701a      	strb	r2, [r3, #0]
   1247c:	2317      	movs	r3, #23
   1247e:	18fb      	adds	r3, r7, r3
   12480:	781a      	ldrb	r2, [r3, #0]
   12482:	4b44      	ldr	r3, [pc, #272]	; (12594 <DMAC_Handler+0x134>)
   12484:	0092      	lsls	r2, r2, #2
   12486:	58d3      	ldr	r3, [r2, r3]
   12488:	613b      	str	r3, [r7, #16]
   1248a:	4a41      	ldr	r2, [pc, #260]	; (12590 <DMAC_Handler+0x130>)
   1248c:	693b      	ldr	r3, [r7, #16]
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	210f      	movs	r1, #15
   12492:	400b      	ands	r3, r1
   12494:	b2d9      	uxtb	r1, r3
   12496:	233f      	movs	r3, #63	; 0x3f
   12498:	54d1      	strb	r1, [r2, r3]
   1249a:	493d      	ldr	r1, [pc, #244]	; (12590 <DMAC_Handler+0x130>)
   1249c:	230f      	movs	r3, #15
   1249e:	18fb      	adds	r3, r7, r3
   124a0:	224e      	movs	r2, #78	; 0x4e
   124a2:	5c8a      	ldrb	r2, [r1, r2]
   124a4:	701a      	strb	r2, [r3, #0]
   124a6:	693b      	ldr	r3, [r7, #16]
   124a8:	781b      	ldrb	r3, [r3, #0]
   124aa:	4a3b      	ldr	r2, [pc, #236]	; (12598 <DMAC_Handler+0x138>)
   124ac:	011b      	lsls	r3, r3, #4
   124ae:	18d3      	adds	r3, r2, r3
   124b0:	3302      	adds	r3, #2
   124b2:	881b      	ldrh	r3, [r3, #0]
   124b4:	b29b      	uxth	r3, r3
   124b6:	60bb      	str	r3, [r7, #8]
   124b8:	693b      	ldr	r3, [r7, #16]
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	4a37      	ldr	r2, [pc, #220]	; (1259c <DMAC_Handler+0x13c>)
   124be:	011b      	lsls	r3, r3, #4
   124c0:	18d3      	adds	r3, r2, r3
   124c2:	3302      	adds	r3, #2
   124c4:	881b      	ldrh	r3, [r3, #0]
   124c6:	b29b      	uxth	r3, r3
   124c8:	607b      	str	r3, [r7, #4]
   124ca:	68ba      	ldr	r2, [r7, #8]
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	1ad2      	subs	r2, r2, r3
   124d0:	693b      	ldr	r3, [r7, #16]
   124d2:	615a      	str	r2, [r3, #20]
   124d4:	230f      	movs	r3, #15
   124d6:	18fb      	adds	r3, r7, r3
   124d8:	781b      	ldrb	r3, [r3, #0]
   124da:	2201      	movs	r2, #1
   124dc:	4013      	ands	r3, r2
   124de:	d016      	beq.n	1250e <DMAC_Handler+0xae>
   124e0:	4a2b      	ldr	r2, [pc, #172]	; (12590 <DMAC_Handler+0x130>)
   124e2:	234e      	movs	r3, #78	; 0x4e
   124e4:	2101      	movs	r1, #1
   124e6:	54d1      	strb	r1, [r2, r3]
   124e8:	693b      	ldr	r3, [r7, #16]
   124ea:	2210      	movs	r2, #16
   124ec:	745a      	strb	r2, [r3, #17]
   124ee:	693b      	ldr	r3, [r7, #16]
   124f0:	7c1b      	ldrb	r3, [r3, #16]
   124f2:	001a      	movs	r2, r3
   124f4:	2301      	movs	r3, #1
   124f6:	4013      	ands	r3, r2
   124f8:	d042      	beq.n	12580 <DMAC_Handler+0x120>
   124fa:	693b      	ldr	r3, [r7, #16]
   124fc:	685b      	ldr	r3, [r3, #4]
   124fe:	2b00      	cmp	r3, #0
   12500:	d03e      	beq.n	12580 <DMAC_Handler+0x120>
   12502:	693b      	ldr	r3, [r7, #16]
   12504:	685b      	ldr	r3, [r3, #4]
   12506:	693a      	ldr	r2, [r7, #16]
   12508:	0010      	movs	r0, r2
   1250a:	4798      	blx	r3
   1250c:	e038      	b.n	12580 <DMAC_Handler+0x120>
   1250e:	230f      	movs	r3, #15
   12510:	18fb      	adds	r3, r7, r3
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	2202      	movs	r2, #2
   12516:	4013      	ands	r3, r2
   12518:	d016      	beq.n	12548 <DMAC_Handler+0xe8>
   1251a:	4a1d      	ldr	r2, [pc, #116]	; (12590 <DMAC_Handler+0x130>)
   1251c:	234e      	movs	r3, #78	; 0x4e
   1251e:	2102      	movs	r1, #2
   12520:	54d1      	strb	r1, [r2, r3]
   12522:	693b      	ldr	r3, [r7, #16]
   12524:	2200      	movs	r2, #0
   12526:	745a      	strb	r2, [r3, #17]
   12528:	693b      	ldr	r3, [r7, #16]
   1252a:	7c1b      	ldrb	r3, [r3, #16]
   1252c:	001a      	movs	r2, r3
   1252e:	2302      	movs	r3, #2
   12530:	4013      	ands	r3, r2
   12532:	d025      	beq.n	12580 <DMAC_Handler+0x120>
   12534:	693b      	ldr	r3, [r7, #16]
   12536:	689b      	ldr	r3, [r3, #8]
   12538:	2b00      	cmp	r3, #0
   1253a:	d021      	beq.n	12580 <DMAC_Handler+0x120>
   1253c:	693b      	ldr	r3, [r7, #16]
   1253e:	689b      	ldr	r3, [r3, #8]
   12540:	693a      	ldr	r2, [r7, #16]
   12542:	0010      	movs	r0, r2
   12544:	4798      	blx	r3
   12546:	e01b      	b.n	12580 <DMAC_Handler+0x120>
   12548:	230f      	movs	r3, #15
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2204      	movs	r2, #4
   12550:	4013      	ands	r3, r2
   12552:	d015      	beq.n	12580 <DMAC_Handler+0x120>
   12554:	4a0e      	ldr	r2, [pc, #56]	; (12590 <DMAC_Handler+0x130>)
   12556:	234e      	movs	r3, #78	; 0x4e
   12558:	2104      	movs	r1, #4
   1255a:	54d1      	strb	r1, [r2, r3]
   1255c:	693b      	ldr	r3, [r7, #16]
   1255e:	2206      	movs	r2, #6
   12560:	745a      	strb	r2, [r3, #17]
   12562:	693b      	ldr	r3, [r7, #16]
   12564:	7c1b      	ldrb	r3, [r3, #16]
   12566:	001a      	movs	r2, r3
   12568:	2304      	movs	r3, #4
   1256a:	4013      	ands	r3, r2
   1256c:	d008      	beq.n	12580 <DMAC_Handler+0x120>
   1256e:	693b      	ldr	r3, [r7, #16]
   12570:	68db      	ldr	r3, [r3, #12]
   12572:	2b00      	cmp	r3, #0
   12574:	d004      	beq.n	12580 <DMAC_Handler+0x120>
   12576:	693b      	ldr	r3, [r7, #16]
   12578:	68db      	ldr	r3, [r3, #12]
   1257a:	693a      	ldr	r2, [r7, #16]
   1257c:	0010      	movs	r0, r2
   1257e:	4798      	blx	r3
   12580:	4b07      	ldr	r3, [pc, #28]	; (125a0 <DMAC_Handler+0x140>)
   12582:	4798      	blx	r3
   12584:	46c0      	nop			; (mov r8, r8)
   12586:	46bd      	mov	sp, r7
   12588:	b006      	add	sp, #24
   1258a:	bd80      	pop	{r7, pc}
   1258c:	00012439 	.word	0x00012439
   12590:	41004800 	.word	0x41004800
   12594:	20000350 	.word	0x20000350
   12598:	20004190 	.word	0x20004190
   1259c:	20000300 	.word	0x20000300
   125a0:	0001244d 	.word	0x0001244d

000125a4 <EVSYS_Handler>:
   125a4:	b580      	push	{r7, lr}
   125a6:	b082      	sub	sp, #8
   125a8:	af00      	add	r7, sp, #0
   125aa:	4b15      	ldr	r3, [pc, #84]	; (12600 <EVSYS_Handler+0x5c>)
   125ac:	691b      	ldr	r3, [r3, #16]
   125ae:	607b      	str	r3, [r7, #4]
   125b0:	4b14      	ldr	r3, [pc, #80]	; (12604 <EVSYS_Handler+0x60>)
   125b2:	699b      	ldr	r3, [r3, #24]
   125b4:	603b      	str	r3, [r7, #0]
   125b6:	4b12      	ldr	r3, [pc, #72]	; (12600 <EVSYS_Handler+0x5c>)
   125b8:	689a      	ldr	r2, [r3, #8]
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	431a      	orrs	r2, r3
   125be:	4b10      	ldr	r3, [pc, #64]	; (12600 <EVSYS_Handler+0x5c>)
   125c0:	609a      	str	r2, [r3, #8]
   125c2:	4b10      	ldr	r3, [pc, #64]	; (12604 <EVSYS_Handler+0x60>)
   125c4:	4a10      	ldr	r2, [pc, #64]	; (12608 <EVSYS_Handler+0x64>)
   125c6:	619a      	str	r2, [r3, #24]
   125c8:	e008      	b.n	125dc <EVSYS_Handler+0x38>
   125ca:	687b      	ldr	r3, [r7, #4]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	0018      	movs	r0, r3
   125d4:	4790      	blx	r2
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	689b      	ldr	r3, [r3, #8]
   125da:	607b      	str	r3, [r7, #4]
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	2b00      	cmp	r3, #0
   125e0:	d1f3      	bne.n	125ca <EVSYS_Handler+0x26>
   125e2:	4b07      	ldr	r3, [pc, #28]	; (12600 <EVSYS_Handler+0x5c>)
   125e4:	68db      	ldr	r3, [r3, #12]
   125e6:	603b      	str	r3, [r7, #0]
   125e8:	4b05      	ldr	r3, [pc, #20]	; (12600 <EVSYS_Handler+0x5c>)
   125ea:	689b      	ldr	r3, [r3, #8]
   125ec:	683a      	ldr	r2, [r7, #0]
   125ee:	43d2      	mvns	r2, r2
   125f0:	401a      	ands	r2, r3
   125f2:	4b03      	ldr	r3, [pc, #12]	; (12600 <EVSYS_Handler+0x5c>)
   125f4:	609a      	str	r2, [r3, #8]
   125f6:	46c0      	nop			; (mov r8, r8)
   125f8:	46bd      	mov	sp, r7
   125fa:	b002      	add	sp, #8
   125fc:	bd80      	pop	{r7, pc}
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	20000000 	.word	0x20000000
   12604:	42000400 	.word	0x42000400
   12608:	0f0fffff 	.word	0x0f0fffff

0001260c <system_apb_clock_set_mask>:
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
   12612:	0002      	movs	r2, r0
   12614:	6039      	str	r1, [r7, #0]
   12616:	1dfb      	adds	r3, r7, #7
   12618:	701a      	strb	r2, [r3, #0]
   1261a:	1dfb      	adds	r3, r7, #7
   1261c:	781b      	ldrb	r3, [r3, #0]
   1261e:	2b01      	cmp	r3, #1
   12620:	d00a      	beq.n	12638 <system_apb_clock_set_mask+0x2c>
   12622:	2b02      	cmp	r3, #2
   12624:	d00f      	beq.n	12646 <system_apb_clock_set_mask+0x3a>
   12626:	2b00      	cmp	r3, #0
   12628:	d114      	bne.n	12654 <system_apb_clock_set_mask+0x48>
   1262a:	4b0e      	ldr	r3, [pc, #56]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262c:	4a0d      	ldr	r2, [pc, #52]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262e:	6991      	ldr	r1, [r2, #24]
   12630:	683a      	ldr	r2, [r7, #0]
   12632:	430a      	orrs	r2, r1
   12634:	619a      	str	r2, [r3, #24]
   12636:	e00f      	b.n	12658 <system_apb_clock_set_mask+0x4c>
   12638:	4b0a      	ldr	r3, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263a:	4a0a      	ldr	r2, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263c:	69d1      	ldr	r1, [r2, #28]
   1263e:	683a      	ldr	r2, [r7, #0]
   12640:	430a      	orrs	r2, r1
   12642:	61da      	str	r2, [r3, #28]
   12644:	e008      	b.n	12658 <system_apb_clock_set_mask+0x4c>
   12646:	4b07      	ldr	r3, [pc, #28]	; (12664 <system_apb_clock_set_mask+0x58>)
   12648:	4a06      	ldr	r2, [pc, #24]	; (12664 <system_apb_clock_set_mask+0x58>)
   1264a:	6a11      	ldr	r1, [r2, #32]
   1264c:	683a      	ldr	r2, [r7, #0]
   1264e:	430a      	orrs	r2, r1
   12650:	621a      	str	r2, [r3, #32]
   12652:	e001      	b.n	12658 <system_apb_clock_set_mask+0x4c>
   12654:	2317      	movs	r3, #23
   12656:	e000      	b.n	1265a <system_apb_clock_set_mask+0x4e>
   12658:	2300      	movs	r3, #0
   1265a:	0018      	movs	r0, r3
   1265c:	46bd      	mov	sp, r7
   1265e:	b002      	add	sp, #8
   12660:	bd80      	pop	{r7, pc}
   12662:	46c0      	nop			; (mov r8, r8)
   12664:	40000400 	.word	0x40000400

00012668 <_system_events_init>:
   12668:	b580      	push	{r7, lr}
   1266a:	af00      	add	r7, sp, #0
   1266c:	2102      	movs	r1, #2
   1266e:	2002      	movs	r0, #2
   12670:	4b07      	ldr	r3, [pc, #28]	; (12690 <_system_events_init+0x28>)
   12672:	4798      	blx	r3
   12674:	4b07      	ldr	r3, [pc, #28]	; (12694 <_system_events_init+0x2c>)
   12676:	2201      	movs	r2, #1
   12678:	701a      	strb	r2, [r3, #0]
   1267a:	46c0      	nop			; (mov r8, r8)
   1267c:	4b05      	ldr	r3, [pc, #20]	; (12694 <_system_events_init+0x2c>)
   1267e:	781b      	ldrb	r3, [r3, #0]
   12680:	b2db      	uxtb	r3, r3
   12682:	001a      	movs	r2, r3
   12684:	2301      	movs	r3, #1
   12686:	4013      	ands	r3, r2
   12688:	d1f8      	bne.n	1267c <_system_events_init+0x14>
   1268a:	46c0      	nop			; (mov r8, r8)
   1268c:	46bd      	mov	sp, r7
   1268e:	bd80      	pop	{r7, pc}
   12690:	0001260d 	.word	0x0001260d
   12694:	42000400 	.word	0x42000400

00012698 <i2c_master_is_syncing>:
   12698:	b580      	push	{r7, lr}
   1269a:	b084      	sub	sp, #16
   1269c:	af00      	add	r7, sp, #0
   1269e:	6078      	str	r0, [r7, #4]
   126a0:	687b      	ldr	r3, [r7, #4]
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	60fb      	str	r3, [r7, #12]
   126a6:	68fb      	ldr	r3, [r7, #12]
   126a8:	69db      	ldr	r3, [r3, #28]
   126aa:	2207      	movs	r2, #7
   126ac:	4013      	ands	r3, r2
   126ae:	1e5a      	subs	r2, r3, #1
   126b0:	4193      	sbcs	r3, r2
   126b2:	b2db      	uxtb	r3, r3
   126b4:	0018      	movs	r0, r3
   126b6:	46bd      	mov	sp, r7
   126b8:	b004      	add	sp, #16
   126ba:	bd80      	pop	{r7, pc}

000126bc <_i2c_master_wait_for_sync>:
   126bc:	b580      	push	{r7, lr}
   126be:	b082      	sub	sp, #8
   126c0:	af00      	add	r7, sp, #0
   126c2:	6078      	str	r0, [r7, #4]
   126c4:	46c0      	nop			; (mov r8, r8)
   126c6:	687b      	ldr	r3, [r7, #4]
   126c8:	0018      	movs	r0, r3
   126ca:	4b04      	ldr	r3, [pc, #16]	; (126dc <_i2c_master_wait_for_sync+0x20>)
   126cc:	4798      	blx	r3
   126ce:	1e03      	subs	r3, r0, #0
   126d0:	d1f9      	bne.n	126c6 <_i2c_master_wait_for_sync+0xa>
   126d2:	46c0      	nop			; (mov r8, r8)
   126d4:	46bd      	mov	sp, r7
   126d6:	b002      	add	sp, #8
   126d8:	bd80      	pop	{r7, pc}
   126da:	46c0      	nop			; (mov r8, r8)
   126dc:	00012699 	.word	0x00012699

000126e0 <_i2c_master_read>:
   126e0:	b580      	push	{r7, lr}
   126e2:	b084      	sub	sp, #16
   126e4:	af00      	add	r7, sp, #0
   126e6:	6078      	str	r0, [r7, #4]
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	681b      	ldr	r3, [r3, #0]
   126ec:	60fb      	str	r3, [r7, #12]
   126ee:	68fb      	ldr	r3, [r7, #12]
   126f0:	681b      	ldr	r3, [r3, #0]
   126f2:	011b      	lsls	r3, r3, #4
   126f4:	0fdb      	lsrs	r3, r3, #31
   126f6:	b2db      	uxtb	r3, r3
   126f8:	001a      	movs	r2, r3
   126fa:	230b      	movs	r3, #11
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	1e51      	subs	r1, r2, #1
   12700:	418a      	sbcs	r2, r1
   12702:	701a      	strb	r2, [r3, #0]
   12704:	2308      	movs	r3, #8
   12706:	18fb      	adds	r3, r7, r3
   12708:	687a      	ldr	r2, [r7, #4]
   1270a:	8b52      	ldrh	r2, [r2, #26]
   1270c:	801a      	strh	r2, [r3, #0]
   1270e:	687b      	ldr	r3, [r7, #4]
   12710:	8b9b      	ldrh	r3, [r3, #28]
   12712:	b29a      	uxth	r2, r3
   12714:	2308      	movs	r3, #8
   12716:	18fb      	adds	r3, r7, r3
   12718:	2108      	movs	r1, #8
   1271a:	1879      	adds	r1, r7, r1
   1271c:	8809      	ldrh	r1, [r1, #0]
   1271e:	1a8a      	subs	r2, r1, r2
   12720:	801a      	strh	r2, [r3, #0]
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	8b9b      	ldrh	r3, [r3, #28]
   12726:	b29b      	uxth	r3, r3
   12728:	3b01      	subs	r3, #1
   1272a:	b29a      	uxth	r2, r3
   1272c:	687b      	ldr	r3, [r7, #4]
   1272e:	839a      	strh	r2, [r3, #28]
   12730:	230b      	movs	r3, #11
   12732:	18fb      	adds	r3, r7, r3
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	2b00      	cmp	r3, #0
   12738:	d010      	beq.n	1275c <_i2c_master_read+0x7c>
   1273a:	687b      	ldr	r3, [r7, #4]
   1273c:	7adb      	ldrb	r3, [r3, #11]
   1273e:	2b00      	cmp	r3, #0
   12740:	d01c      	beq.n	1277c <_i2c_master_read+0x9c>
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	8b9b      	ldrh	r3, [r3, #28]
   12746:	b29b      	uxth	r3, r3
   12748:	2b01      	cmp	r3, #1
   1274a:	d117      	bne.n	1277c <_i2c_master_read+0x9c>
   1274c:	68fb      	ldr	r3, [r7, #12]
   1274e:	685b      	ldr	r3, [r3, #4]
   12750:	2280      	movs	r2, #128	; 0x80
   12752:	02d2      	lsls	r2, r2, #11
   12754:	431a      	orrs	r2, r3
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	605a      	str	r2, [r3, #4]
   1275a:	e00f      	b.n	1277c <_i2c_master_read+0x9c>
   1275c:	687b      	ldr	r3, [r7, #4]
   1275e:	7adb      	ldrb	r3, [r3, #11]
   12760:	2b00      	cmp	r3, #0
   12762:	d00b      	beq.n	1277c <_i2c_master_read+0x9c>
   12764:	687b      	ldr	r3, [r7, #4]
   12766:	8b9b      	ldrh	r3, [r3, #28]
   12768:	b29b      	uxth	r3, r3
   1276a:	2b00      	cmp	r3, #0
   1276c:	d106      	bne.n	1277c <_i2c_master_read+0x9c>
   1276e:	68fb      	ldr	r3, [r7, #12]
   12770:	685b      	ldr	r3, [r3, #4]
   12772:	2280      	movs	r2, #128	; 0x80
   12774:	02d2      	lsls	r2, r2, #11
   12776:	431a      	orrs	r2, r3
   12778:	68fb      	ldr	r3, [r7, #12]
   1277a:	605a      	str	r2, [r3, #4]
   1277c:	687b      	ldr	r3, [r7, #4]
   1277e:	8b9b      	ldrh	r3, [r3, #28]
   12780:	b29b      	uxth	r3, r3
   12782:	2b00      	cmp	r3, #0
   12784:	d10e      	bne.n	127a4 <_i2c_master_read+0xc4>
   12786:	687b      	ldr	r3, [r7, #4]
   12788:	7a9b      	ldrb	r3, [r3, #10]
   1278a:	2b00      	cmp	r3, #0
   1278c:	d00a      	beq.n	127a4 <_i2c_master_read+0xc4>
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	0018      	movs	r0, r3
   12792:	4b0e      	ldr	r3, [pc, #56]	; (127cc <_i2c_master_read+0xec>)
   12794:	4798      	blx	r3
   12796:	68fb      	ldr	r3, [r7, #12]
   12798:	685b      	ldr	r3, [r3, #4]
   1279a:	22c0      	movs	r2, #192	; 0xc0
   1279c:	0292      	lsls	r2, r2, #10
   1279e:	431a      	orrs	r2, r3
   127a0:	68fb      	ldr	r3, [r7, #12]
   127a2:	605a      	str	r2, [r3, #4]
   127a4:	687b      	ldr	r3, [r7, #4]
   127a6:	0018      	movs	r0, r3
   127a8:	4b08      	ldr	r3, [pc, #32]	; (127cc <_i2c_master_read+0xec>)
   127aa:	4798      	blx	r3
   127ac:	687b      	ldr	r3, [r7, #4]
   127ae:	6a1a      	ldr	r2, [r3, #32]
   127b0:	2308      	movs	r3, #8
   127b2:	18fb      	adds	r3, r7, r3
   127b4:	881b      	ldrh	r3, [r3, #0]
   127b6:	18d3      	adds	r3, r2, r3
   127b8:	68fa      	ldr	r2, [r7, #12]
   127ba:	2128      	movs	r1, #40	; 0x28
   127bc:	5c52      	ldrb	r2, [r2, r1]
   127be:	b2d2      	uxtb	r2, r2
   127c0:	701a      	strb	r2, [r3, #0]
   127c2:	46c0      	nop			; (mov r8, r8)
   127c4:	46bd      	mov	sp, r7
   127c6:	b004      	add	sp, #16
   127c8:	bd80      	pop	{r7, pc}
   127ca:	46c0      	nop			; (mov r8, r8)
   127cc:	000126bd 	.word	0x000126bd

000127d0 <_i2c_master_write>:
   127d0:	b580      	push	{r7, lr}
   127d2:	b084      	sub	sp, #16
   127d4:	af00      	add	r7, sp, #0
   127d6:	6078      	str	r0, [r7, #4]
   127d8:	687b      	ldr	r3, [r7, #4]
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	60fb      	str	r3, [r7, #12]
   127de:	68fb      	ldr	r3, [r7, #12]
   127e0:	8b5b      	ldrh	r3, [r3, #26]
   127e2:	b29b      	uxth	r3, r3
   127e4:	001a      	movs	r2, r3
   127e6:	2304      	movs	r3, #4
   127e8:	4013      	ands	r3, r2
   127ea:	d004      	beq.n	127f6 <_i2c_master_write+0x26>
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	2225      	movs	r2, #37	; 0x25
   127f0:	211e      	movs	r1, #30
   127f2:	5499      	strb	r1, [r3, r2]
   127f4:	e024      	b.n	12840 <_i2c_master_write+0x70>
   127f6:	230a      	movs	r3, #10
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	687a      	ldr	r2, [r7, #4]
   127fc:	8b52      	ldrh	r2, [r2, #26]
   127fe:	801a      	strh	r2, [r3, #0]
   12800:	687b      	ldr	r3, [r7, #4]
   12802:	8b9b      	ldrh	r3, [r3, #28]
   12804:	b29a      	uxth	r2, r3
   12806:	230a      	movs	r3, #10
   12808:	18fb      	adds	r3, r7, r3
   1280a:	210a      	movs	r1, #10
   1280c:	1879      	adds	r1, r7, r1
   1280e:	8809      	ldrh	r1, [r1, #0]
   12810:	1a8a      	subs	r2, r1, r2
   12812:	801a      	strh	r2, [r3, #0]
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	8b9b      	ldrh	r3, [r3, #28]
   12818:	b29b      	uxth	r3, r3
   1281a:	3b01      	subs	r3, #1
   1281c:	b29a      	uxth	r2, r3
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	839a      	strh	r2, [r3, #28]
   12822:	687b      	ldr	r3, [r7, #4]
   12824:	0018      	movs	r0, r3
   12826:	4b08      	ldr	r3, [pc, #32]	; (12848 <_i2c_master_write+0x78>)
   12828:	4798      	blx	r3
   1282a:	687b      	ldr	r3, [r7, #4]
   1282c:	6a1a      	ldr	r2, [r3, #32]
   1282e:	230a      	movs	r3, #10
   12830:	18fb      	adds	r3, r7, r3
   12832:	881b      	ldrh	r3, [r3, #0]
   12834:	18d3      	adds	r3, r2, r3
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	b2d9      	uxtb	r1, r3
   1283a:	68fb      	ldr	r3, [r7, #12]
   1283c:	2228      	movs	r2, #40	; 0x28
   1283e:	5499      	strb	r1, [r3, r2]
   12840:	46bd      	mov	sp, r7
   12842:	b004      	add	sp, #16
   12844:	bd80      	pop	{r7, pc}
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	000126bd 	.word	0x000126bd

0001284c <_i2c_master_async_address_response>:
   1284c:	b580      	push	{r7, lr}
   1284e:	b084      	sub	sp, #16
   12850:	af00      	add	r7, sp, #0
   12852:	6078      	str	r0, [r7, #4]
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	681b      	ldr	r3, [r3, #0]
   12858:	60fb      	str	r3, [r7, #12]
   1285a:	68fb      	ldr	r3, [r7, #12]
   1285c:	7e1b      	ldrb	r3, [r3, #24]
   1285e:	b2db      	uxtb	r3, r3
   12860:	001a      	movs	r2, r3
   12862:	2301      	movs	r3, #1
   12864:	4013      	ands	r3, r2
   12866:	d02b      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
   12868:	68fb      	ldr	r3, [r7, #12]
   1286a:	2201      	movs	r2, #1
   1286c:	761a      	strb	r2, [r3, #24]
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	8b5b      	ldrh	r3, [r3, #26]
   12872:	b29b      	uxth	r3, r3
   12874:	001a      	movs	r2, r3
   12876:	2302      	movs	r3, #2
   12878:	4013      	ands	r3, r2
   1287a:	d004      	beq.n	12886 <_i2c_master_async_address_response+0x3a>
   1287c:	687b      	ldr	r3, [r7, #4]
   1287e:	2225      	movs	r2, #37	; 0x25
   12880:	2141      	movs	r1, #65	; 0x41
   12882:	5499      	strb	r1, [r3, r2]
   12884:	e01c      	b.n	128c0 <_i2c_master_async_address_response+0x74>
   12886:	68fb      	ldr	r3, [r7, #12]
   12888:	8b5b      	ldrh	r3, [r3, #26]
   1288a:	b29b      	uxth	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2304      	movs	r3, #4
   12890:	4013      	ands	r3, r2
   12892:	d015      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	2225      	movs	r2, #37	; 0x25
   12898:	2118      	movs	r1, #24
   1289a:	5499      	strb	r1, [r3, r2]
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	2200      	movs	r2, #0
   128a0:	839a      	strh	r2, [r3, #28]
   128a2:	687b      	ldr	r3, [r7, #4]
   128a4:	7a9b      	ldrb	r3, [r3, #10]
   128a6:	2b00      	cmp	r3, #0
   128a8:	d00a      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	0018      	movs	r0, r3
   128ae:	4b13      	ldr	r3, [pc, #76]	; (128fc <_i2c_master_async_address_response+0xb0>)
   128b0:	4798      	blx	r3
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	685b      	ldr	r3, [r3, #4]
   128b6:	22c0      	movs	r2, #192	; 0xc0
   128b8:	0292      	lsls	r2, r2, #10
   128ba:	431a      	orrs	r2, r3
   128bc:	68fb      	ldr	r3, [r7, #12]
   128be:	605a      	str	r2, [r3, #4]
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	8b9b      	ldrh	r3, [r3, #28]
   128c4:	b29a      	uxth	r2, r3
   128c6:	687b      	ldr	r3, [r7, #4]
   128c8:	835a      	strh	r2, [r3, #26]
   128ca:	687b      	ldr	r3, [r7, #4]
   128cc:	2225      	movs	r2, #37	; 0x25
   128ce:	5c9b      	ldrb	r3, [r3, r2]
   128d0:	b2db      	uxtb	r3, r3
   128d2:	2b05      	cmp	r3, #5
   128d4:	d10e      	bne.n	128f4 <_i2c_master_async_address_response+0xa8>
   128d6:	687b      	ldr	r3, [r7, #4]
   128d8:	2224      	movs	r2, #36	; 0x24
   128da:	5c9b      	ldrb	r3, [r3, r2]
   128dc:	b2db      	uxtb	r3, r3
   128de:	2b00      	cmp	r3, #0
   128e0:	d104      	bne.n	128ec <_i2c_master_async_address_response+0xa0>
   128e2:	687b      	ldr	r3, [r7, #4]
   128e4:	0018      	movs	r0, r3
   128e6:	4b06      	ldr	r3, [pc, #24]	; (12900 <_i2c_master_async_address_response+0xb4>)
   128e8:	4798      	blx	r3
   128ea:	e003      	b.n	128f4 <_i2c_master_async_address_response+0xa8>
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	0018      	movs	r0, r3
   128f0:	4b04      	ldr	r3, [pc, #16]	; (12904 <_i2c_master_async_address_response+0xb8>)
   128f2:	4798      	blx	r3
   128f4:	46c0      	nop			; (mov r8, r8)
   128f6:	46bd      	mov	sp, r7
   128f8:	b004      	add	sp, #16
   128fa:	bd80      	pop	{r7, pc}
   128fc:	000126bd 	.word	0x000126bd
   12900:	000127d1 	.word	0x000127d1
   12904:	000126e1 	.word	0x000126e1

00012908 <i2c_master_register_callback>:
   12908:	b580      	push	{r7, lr}
   1290a:	b084      	sub	sp, #16
   1290c:	af00      	add	r7, sp, #0
   1290e:	60f8      	str	r0, [r7, #12]
   12910:	60b9      	str	r1, [r7, #8]
   12912:	1dfb      	adds	r3, r7, #7
   12914:	701a      	strb	r2, [r3, #0]
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	68fa      	ldr	r2, [r7, #12]
   1291c:	3302      	adds	r3, #2
   1291e:	009b      	lsls	r3, r3, #2
   12920:	18d3      	adds	r3, r2, r3
   12922:	3304      	adds	r3, #4
   12924:	68ba      	ldr	r2, [r7, #8]
   12926:	601a      	str	r2, [r3, #0]
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	7e1b      	ldrb	r3, [r3, #24]
   1292c:	b2db      	uxtb	r3, r3
   1292e:	b25a      	sxtb	r2, r3
   12930:	1dfb      	adds	r3, r7, #7
   12932:	781b      	ldrb	r3, [r3, #0]
   12934:	2101      	movs	r1, #1
   12936:	4099      	lsls	r1, r3
   12938:	000b      	movs	r3, r1
   1293a:	b25b      	sxtb	r3, r3
   1293c:	4313      	orrs	r3, r2
   1293e:	b25b      	sxtb	r3, r3
   12940:	b2da      	uxtb	r2, r3
   12942:	68fb      	ldr	r3, [r7, #12]
   12944:	761a      	strb	r2, [r3, #24]
   12946:	46c0      	nop			; (mov r8, r8)
   12948:	46bd      	mov	sp, r7
   1294a:	b004      	add	sp, #16
   1294c:	bd80      	pop	{r7, pc}
	...

00012950 <_i2c_master_write_packet>:
   12950:	b580      	push	{r7, lr}
   12952:	b084      	sub	sp, #16
   12954:	af00      	add	r7, sp, #0
   12956:	6078      	str	r0, [r7, #4]
   12958:	6039      	str	r1, [r7, #0]
   1295a:	687b      	ldr	r3, [r7, #4]
   1295c:	681b      	ldr	r3, [r3, #0]
   1295e:	60fb      	str	r3, [r7, #12]
   12960:	683b      	ldr	r3, [r7, #0]
   12962:	7a5b      	ldrb	r3, [r3, #9]
   12964:	2b00      	cmp	r3, #0
   12966:	d006      	beq.n	12976 <_i2c_master_write_packet+0x26>
   12968:	683b      	ldr	r3, [r7, #0]
   1296a:	7a9a      	ldrb	r2, [r3, #10]
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	0011      	movs	r1, r2
   12970:	0018      	movs	r0, r3
   12972:	4b1e      	ldr	r3, [pc, #120]	; (129ec <_i2c_master_write_packet+0x9c>)
   12974:	4798      	blx	r3
   12976:	68fb      	ldr	r3, [r7, #12]
   12978:	685b      	ldr	r3, [r3, #4]
   1297a:	4a1d      	ldr	r2, [pc, #116]	; (129f0 <_i2c_master_write_packet+0xa0>)
   1297c:	401a      	ands	r2, r3
   1297e:	68fb      	ldr	r3, [r7, #12]
   12980:	605a      	str	r2, [r3, #4]
   12982:	683b      	ldr	r3, [r7, #0]
   12984:	685a      	ldr	r2, [r3, #4]
   12986:	687b      	ldr	r3, [r7, #4]
   12988:	621a      	str	r2, [r3, #32]
   1298a:	683b      	ldr	r3, [r7, #0]
   1298c:	885a      	ldrh	r2, [r3, #2]
   1298e:	687b      	ldr	r3, [r7, #4]
   12990:	839a      	strh	r2, [r3, #28]
   12992:	687b      	ldr	r3, [r7, #4]
   12994:	2224      	movs	r2, #36	; 0x24
   12996:	2100      	movs	r1, #0
   12998:	5499      	strb	r1, [r3, r2]
   1299a:	687b      	ldr	r3, [r7, #4]
   1299c:	2225      	movs	r2, #37	; 0x25
   1299e:	2105      	movs	r1, #5
   129a0:	5499      	strb	r1, [r3, r2]
   129a2:	68fb      	ldr	r3, [r7, #12]
   129a4:	2203      	movs	r2, #3
   129a6:	759a      	strb	r2, [r3, #22]
   129a8:	683b      	ldr	r3, [r7, #0]
   129aa:	7a1b      	ldrb	r3, [r3, #8]
   129ac:	2b00      	cmp	r3, #0
   129ae:	d00d      	beq.n	129cc <_i2c_master_write_packet+0x7c>
   129b0:	683b      	ldr	r3, [r7, #0]
   129b2:	881b      	ldrh	r3, [r3, #0]
   129b4:	005a      	lsls	r2, r3, #1
   129b6:	683b      	ldr	r3, [r7, #0]
   129b8:	7a5b      	ldrb	r3, [r3, #9]
   129ba:	039b      	lsls	r3, r3, #14
   129bc:	4313      	orrs	r3, r2
   129be:	001a      	movs	r2, r3
   129c0:	2380      	movs	r3, #128	; 0x80
   129c2:	021b      	lsls	r3, r3, #8
   129c4:	431a      	orrs	r2, r3
   129c6:	68fb      	ldr	r3, [r7, #12]
   129c8:	625a      	str	r2, [r3, #36]	; 0x24
   129ca:	e009      	b.n	129e0 <_i2c_master_write_packet+0x90>
   129cc:	683b      	ldr	r3, [r7, #0]
   129ce:	881b      	ldrh	r3, [r3, #0]
   129d0:	005a      	lsls	r2, r3, #1
   129d2:	683b      	ldr	r3, [r7, #0]
   129d4:	7a5b      	ldrb	r3, [r3, #9]
   129d6:	039b      	lsls	r3, r3, #14
   129d8:	4313      	orrs	r3, r2
   129da:	001a      	movs	r2, r3
   129dc:	68fb      	ldr	r3, [r7, #12]
   129de:	625a      	str	r2, [r3, #36]	; 0x24
   129e0:	2300      	movs	r3, #0
   129e2:	0018      	movs	r0, r3
   129e4:	46bd      	mov	sp, r7
   129e6:	b004      	add	sp, #16
   129e8:	bd80      	pop	{r7, pc}
   129ea:	46c0      	nop			; (mov r8, r8)
   129ec:	0001593d 	.word	0x0001593d
   129f0:	fffbffff 	.word	0xfffbffff

000129f4 <i2c_master_write_packet_job>:
   129f4:	b580      	push	{r7, lr}
   129f6:	b082      	sub	sp, #8
   129f8:	af00      	add	r7, sp, #0
   129fa:	6078      	str	r0, [r7, #4]
   129fc:	6039      	str	r1, [r7, #0]
   129fe:	687b      	ldr	r3, [r7, #4]
   12a00:	8b9b      	ldrh	r3, [r3, #28]
   12a02:	b29b      	uxth	r3, r3
   12a04:	2b00      	cmp	r3, #0
   12a06:	d001      	beq.n	12a0c <i2c_master_write_packet_job+0x18>
   12a08:	2305      	movs	r3, #5
   12a0a:	e00c      	b.n	12a26 <i2c_master_write_packet_job+0x32>
   12a0c:	687b      	ldr	r3, [r7, #4]
   12a0e:	2201      	movs	r2, #1
   12a10:	729a      	strb	r2, [r3, #10]
   12a12:	687b      	ldr	r3, [r7, #4]
   12a14:	2201      	movs	r2, #1
   12a16:	72da      	strb	r2, [r3, #11]
   12a18:	683a      	ldr	r2, [r7, #0]
   12a1a:	687b      	ldr	r3, [r7, #4]
   12a1c:	0011      	movs	r1, r2
   12a1e:	0018      	movs	r0, r3
   12a20:	4b03      	ldr	r3, [pc, #12]	; (12a30 <i2c_master_write_packet_job+0x3c>)
   12a22:	4798      	blx	r3
   12a24:	0003      	movs	r3, r0
   12a26:	0018      	movs	r0, r3
   12a28:	46bd      	mov	sp, r7
   12a2a:	b002      	add	sp, #8
   12a2c:	bd80      	pop	{r7, pc}
   12a2e:	46c0      	nop			; (mov r8, r8)
   12a30:	00012951 	.word	0x00012951

00012a34 <_i2c_master_interrupt_handler>:
   12a34:	b580      	push	{r7, lr}
   12a36:	b086      	sub	sp, #24
   12a38:	af00      	add	r7, sp, #0
   12a3a:	0002      	movs	r2, r0
   12a3c:	1dfb      	adds	r3, r7, #7
   12a3e:	701a      	strb	r2, [r3, #0]
   12a40:	1dfb      	adds	r3, r7, #7
   12a42:	781a      	ldrb	r2, [r3, #0]
   12a44:	4b93      	ldr	r3, [pc, #588]	; (12c94 <_i2c_master_interrupt_handler+0x260>)
   12a46:	0092      	lsls	r2, r2, #2
   12a48:	58d3      	ldr	r3, [r2, r3]
   12a4a:	617b      	str	r3, [r7, #20]
   12a4c:	697b      	ldr	r3, [r7, #20]
   12a4e:	681b      	ldr	r3, [r3, #0]
   12a50:	613b      	str	r3, [r7, #16]
   12a52:	693b      	ldr	r3, [r7, #16]
   12a54:	681b      	ldr	r3, [r3, #0]
   12a56:	011b      	lsls	r3, r3, #4
   12a58:	0fdb      	lsrs	r3, r3, #31
   12a5a:	b2db      	uxtb	r3, r3
   12a5c:	001a      	movs	r2, r3
   12a5e:	230f      	movs	r3, #15
   12a60:	18fb      	adds	r3, r7, r3
   12a62:	1e51      	subs	r1, r2, #1
   12a64:	418a      	sbcs	r2, r1
   12a66:	701a      	strb	r2, [r3, #0]
   12a68:	230e      	movs	r3, #14
   12a6a:	18fb      	adds	r3, r7, r3
   12a6c:	697a      	ldr	r2, [r7, #20]
   12a6e:	7e52      	ldrb	r2, [r2, #25]
   12a70:	701a      	strb	r2, [r3, #0]
   12a72:	697b      	ldr	r3, [r7, #20]
   12a74:	7e1b      	ldrb	r3, [r3, #24]
   12a76:	b2da      	uxtb	r2, r3
   12a78:	230e      	movs	r3, #14
   12a7a:	18fb      	adds	r3, r7, r3
   12a7c:	210e      	movs	r1, #14
   12a7e:	1879      	adds	r1, r7, r1
   12a80:	7809      	ldrb	r1, [r1, #0]
   12a82:	400a      	ands	r2, r1
   12a84:	701a      	strb	r2, [r3, #0]
   12a86:	697b      	ldr	r3, [r7, #20]
   12a88:	8b5b      	ldrh	r3, [r3, #26]
   12a8a:	b29b      	uxth	r3, r3
   12a8c:	2b00      	cmp	r3, #0
   12a8e:	d109      	bne.n	12aa4 <_i2c_master_interrupt_handler+0x70>
   12a90:	697b      	ldr	r3, [r7, #20]
   12a92:	8b9b      	ldrh	r3, [r3, #28]
   12a94:	b29b      	uxth	r3, r3
   12a96:	2b00      	cmp	r3, #0
   12a98:	d004      	beq.n	12aa4 <_i2c_master_interrupt_handler+0x70>
   12a9a:	697b      	ldr	r3, [r7, #20]
   12a9c:	0018      	movs	r0, r3
   12a9e:	4b7e      	ldr	r3, [pc, #504]	; (12c98 <_i2c_master_interrupt_handler+0x264>)
   12aa0:	4798      	blx	r3
   12aa2:	e070      	b.n	12b86 <_i2c_master_interrupt_handler+0x152>
   12aa4:	697b      	ldr	r3, [r7, #20]
   12aa6:	8b5b      	ldrh	r3, [r3, #26]
   12aa8:	b29b      	uxth	r3, r3
   12aaa:	2b00      	cmp	r3, #0
   12aac:	d039      	beq.n	12b22 <_i2c_master_interrupt_handler+0xee>
   12aae:	697b      	ldr	r3, [r7, #20]
   12ab0:	8b9b      	ldrh	r3, [r3, #28]
   12ab2:	b29b      	uxth	r3, r3
   12ab4:	2b00      	cmp	r3, #0
   12ab6:	d134      	bne.n	12b22 <_i2c_master_interrupt_handler+0xee>
   12ab8:	697b      	ldr	r3, [r7, #20]
   12aba:	2225      	movs	r2, #37	; 0x25
   12abc:	5c9b      	ldrb	r3, [r3, r2]
   12abe:	b2db      	uxtb	r3, r3
   12ac0:	2b05      	cmp	r3, #5
   12ac2:	d12e      	bne.n	12b22 <_i2c_master_interrupt_handler+0xee>
   12ac4:	697b      	ldr	r3, [r7, #20]
   12ac6:	2224      	movs	r2, #36	; 0x24
   12ac8:	5c9b      	ldrb	r3, [r3, r2]
   12aca:	b2db      	uxtb	r3, r3
   12acc:	2b00      	cmp	r3, #0
   12ace:	d128      	bne.n	12b22 <_i2c_master_interrupt_handler+0xee>
   12ad0:	693b      	ldr	r3, [r7, #16]
   12ad2:	2203      	movs	r2, #3
   12ad4:	751a      	strb	r2, [r3, #20]
   12ad6:	697b      	ldr	r3, [r7, #20]
   12ad8:	2200      	movs	r2, #0
   12ada:	835a      	strh	r2, [r3, #26]
   12adc:	697b      	ldr	r3, [r7, #20]
   12ade:	2225      	movs	r2, #37	; 0x25
   12ae0:	2100      	movs	r1, #0
   12ae2:	5499      	strb	r1, [r3, r2]
   12ae4:	697b      	ldr	r3, [r7, #20]
   12ae6:	7a9b      	ldrb	r3, [r3, #10]
   12ae8:	2b00      	cmp	r3, #0
   12aea:	d00b      	beq.n	12b04 <_i2c_master_interrupt_handler+0xd0>
   12aec:	697b      	ldr	r3, [r7, #20]
   12aee:	0018      	movs	r0, r3
   12af0:	4b6a      	ldr	r3, [pc, #424]	; (12c9c <_i2c_master_interrupt_handler+0x268>)
   12af2:	4798      	blx	r3
   12af4:	693b      	ldr	r3, [r7, #16]
   12af6:	685b      	ldr	r3, [r3, #4]
   12af8:	22c0      	movs	r2, #192	; 0xc0
   12afa:	0292      	lsls	r2, r2, #10
   12afc:	431a      	orrs	r2, r3
   12afe:	693b      	ldr	r3, [r7, #16]
   12b00:	605a      	str	r2, [r3, #4]
   12b02:	e002      	b.n	12b0a <_i2c_master_interrupt_handler+0xd6>
   12b04:	693b      	ldr	r3, [r7, #16]
   12b06:	2201      	movs	r2, #1
   12b08:	761a      	strb	r2, [r3, #24]
   12b0a:	230e      	movs	r3, #14
   12b0c:	18fb      	adds	r3, r7, r3
   12b0e:	781b      	ldrb	r3, [r3, #0]
   12b10:	2201      	movs	r2, #1
   12b12:	4013      	ands	r3, r2
   12b14:	d037      	beq.n	12b86 <_i2c_master_interrupt_handler+0x152>
   12b16:	697b      	ldr	r3, [r7, #20]
   12b18:	68db      	ldr	r3, [r3, #12]
   12b1a:	697a      	ldr	r2, [r7, #20]
   12b1c:	0010      	movs	r0, r2
   12b1e:	4798      	blx	r3
   12b20:	e031      	b.n	12b86 <_i2c_master_interrupt_handler+0x152>
   12b22:	697b      	ldr	r3, [r7, #20]
   12b24:	8b5b      	ldrh	r3, [r3, #26]
   12b26:	b29b      	uxth	r3, r3
   12b28:	2b00      	cmp	r3, #0
   12b2a:	d02c      	beq.n	12b86 <_i2c_master_interrupt_handler+0x152>
   12b2c:	697b      	ldr	r3, [r7, #20]
   12b2e:	8b9b      	ldrh	r3, [r3, #28]
   12b30:	b29b      	uxth	r3, r3
   12b32:	2b00      	cmp	r3, #0
   12b34:	d027      	beq.n	12b86 <_i2c_master_interrupt_handler+0x152>
   12b36:	693b      	ldr	r3, [r7, #16]
   12b38:	8b5b      	ldrh	r3, [r3, #26]
   12b3a:	b29b      	uxth	r3, r3
   12b3c:	001a      	movs	r2, r3
   12b3e:	2320      	movs	r3, #32
   12b40:	4013      	ands	r3, r2
   12b42:	d111      	bne.n	12b68 <_i2c_master_interrupt_handler+0x134>
   12b44:	230f      	movs	r3, #15
   12b46:	18fb      	adds	r3, r7, r3
   12b48:	781b      	ldrb	r3, [r3, #0]
   12b4a:	2201      	movs	r2, #1
   12b4c:	4053      	eors	r3, r2
   12b4e:	b2db      	uxtb	r3, r3
   12b50:	2b00      	cmp	r3, #0
   12b52:	d104      	bne.n	12b5e <_i2c_master_interrupt_handler+0x12a>
   12b54:	697b      	ldr	r3, [r7, #20]
   12b56:	8b9b      	ldrh	r3, [r3, #28]
   12b58:	b29b      	uxth	r3, r3
   12b5a:	2b01      	cmp	r3, #1
   12b5c:	d004      	beq.n	12b68 <_i2c_master_interrupt_handler+0x134>
   12b5e:	697b      	ldr	r3, [r7, #20]
   12b60:	2225      	movs	r2, #37	; 0x25
   12b62:	2141      	movs	r1, #65	; 0x41
   12b64:	5499      	strb	r1, [r3, r2]
   12b66:	e00e      	b.n	12b86 <_i2c_master_interrupt_handler+0x152>
   12b68:	697b      	ldr	r3, [r7, #20]
   12b6a:	2224      	movs	r2, #36	; 0x24
   12b6c:	5c9b      	ldrb	r3, [r3, r2]
   12b6e:	b2db      	uxtb	r3, r3
   12b70:	2b00      	cmp	r3, #0
   12b72:	d104      	bne.n	12b7e <_i2c_master_interrupt_handler+0x14a>
   12b74:	697b      	ldr	r3, [r7, #20]
   12b76:	0018      	movs	r0, r3
   12b78:	4b49      	ldr	r3, [pc, #292]	; (12ca0 <_i2c_master_interrupt_handler+0x26c>)
   12b7a:	4798      	blx	r3
   12b7c:	e003      	b.n	12b86 <_i2c_master_interrupt_handler+0x152>
   12b7e:	697b      	ldr	r3, [r7, #20]
   12b80:	0018      	movs	r0, r3
   12b82:	4b48      	ldr	r3, [pc, #288]	; (12ca4 <_i2c_master_interrupt_handler+0x270>)
   12b84:	4798      	blx	r3
   12b86:	697b      	ldr	r3, [r7, #20]
   12b88:	8b5b      	ldrh	r3, [r3, #26]
   12b8a:	b29b      	uxth	r3, r3
   12b8c:	2b00      	cmp	r3, #0
   12b8e:	d047      	beq.n	12c20 <_i2c_master_interrupt_handler+0x1ec>
   12b90:	697b      	ldr	r3, [r7, #20]
   12b92:	8b9b      	ldrh	r3, [r3, #28]
   12b94:	b29b      	uxth	r3, r3
   12b96:	2b00      	cmp	r3, #0
   12b98:	d142      	bne.n	12c20 <_i2c_master_interrupt_handler+0x1ec>
   12b9a:	697b      	ldr	r3, [r7, #20]
   12b9c:	2225      	movs	r2, #37	; 0x25
   12b9e:	5c9b      	ldrb	r3, [r3, r2]
   12ba0:	b2db      	uxtb	r3, r3
   12ba2:	2b05      	cmp	r3, #5
   12ba4:	d13c      	bne.n	12c20 <_i2c_master_interrupt_handler+0x1ec>
   12ba6:	697b      	ldr	r3, [r7, #20]
   12ba8:	2224      	movs	r2, #36	; 0x24
   12baa:	5c9b      	ldrb	r3, [r3, r2]
   12bac:	b2db      	uxtb	r3, r3
   12bae:	2b01      	cmp	r3, #1
   12bb0:	d136      	bne.n	12c20 <_i2c_master_interrupt_handler+0x1ec>
   12bb2:	693b      	ldr	r3, [r7, #16]
   12bb4:	7e1b      	ldrb	r3, [r3, #24]
   12bb6:	b2db      	uxtb	r3, r3
   12bb8:	001a      	movs	r2, r3
   12bba:	2302      	movs	r3, #2
   12bbc:	4013      	ands	r3, r2
   12bbe:	d002      	beq.n	12bc6 <_i2c_master_interrupt_handler+0x192>
   12bc0:	693b      	ldr	r3, [r7, #16]
   12bc2:	2202      	movs	r2, #2
   12bc4:	761a      	strb	r2, [r3, #24]
   12bc6:	693b      	ldr	r3, [r7, #16]
   12bc8:	2203      	movs	r2, #3
   12bca:	751a      	strb	r2, [r3, #20]
   12bcc:	697b      	ldr	r3, [r7, #20]
   12bce:	2200      	movs	r2, #0
   12bd0:	835a      	strh	r2, [r3, #26]
   12bd2:	697b      	ldr	r3, [r7, #20]
   12bd4:	2225      	movs	r2, #37	; 0x25
   12bd6:	2100      	movs	r1, #0
   12bd8:	5499      	strb	r1, [r3, r2]
   12bda:	230e      	movs	r3, #14
   12bdc:	18fb      	adds	r3, r7, r3
   12bde:	781b      	ldrb	r3, [r3, #0]
   12be0:	2202      	movs	r2, #2
   12be2:	4013      	ands	r3, r2
   12be4:	d00b      	beq.n	12bfe <_i2c_master_interrupt_handler+0x1ca>
   12be6:	697b      	ldr	r3, [r7, #20]
   12be8:	2224      	movs	r2, #36	; 0x24
   12bea:	5c9b      	ldrb	r3, [r3, r2]
   12bec:	b2db      	uxtb	r3, r3
   12bee:	2b01      	cmp	r3, #1
   12bf0:	d105      	bne.n	12bfe <_i2c_master_interrupt_handler+0x1ca>
   12bf2:	697b      	ldr	r3, [r7, #20]
   12bf4:	691b      	ldr	r3, [r3, #16]
   12bf6:	697a      	ldr	r2, [r7, #20]
   12bf8:	0010      	movs	r0, r2
   12bfa:	4798      	blx	r3
   12bfc:	e010      	b.n	12c20 <_i2c_master_interrupt_handler+0x1ec>
   12bfe:	230e      	movs	r3, #14
   12c00:	18fb      	adds	r3, r7, r3
   12c02:	781b      	ldrb	r3, [r3, #0]
   12c04:	2201      	movs	r2, #1
   12c06:	4013      	ands	r3, r2
   12c08:	d00a      	beq.n	12c20 <_i2c_master_interrupt_handler+0x1ec>
   12c0a:	697b      	ldr	r3, [r7, #20]
   12c0c:	2224      	movs	r2, #36	; 0x24
   12c0e:	5c9b      	ldrb	r3, [r3, r2]
   12c10:	b2db      	uxtb	r3, r3
   12c12:	2b00      	cmp	r3, #0
   12c14:	d104      	bne.n	12c20 <_i2c_master_interrupt_handler+0x1ec>
   12c16:	697b      	ldr	r3, [r7, #20]
   12c18:	68db      	ldr	r3, [r3, #12]
   12c1a:	697a      	ldr	r2, [r7, #20]
   12c1c:	0010      	movs	r0, r2
   12c1e:	4798      	blx	r3
   12c20:	697b      	ldr	r3, [r7, #20]
   12c22:	2225      	movs	r2, #37	; 0x25
   12c24:	5c9b      	ldrb	r3, [r3, r2]
   12c26:	b2db      	uxtb	r3, r3
   12c28:	2b05      	cmp	r3, #5
   12c2a:	d02e      	beq.n	12c8a <_i2c_master_interrupt_handler+0x256>
   12c2c:	697b      	ldr	r3, [r7, #20]
   12c2e:	2225      	movs	r2, #37	; 0x25
   12c30:	5c9b      	ldrb	r3, [r3, r2]
   12c32:	b2db      	uxtb	r3, r3
   12c34:	2b00      	cmp	r3, #0
   12c36:	d028      	beq.n	12c8a <_i2c_master_interrupt_handler+0x256>
   12c38:	693b      	ldr	r3, [r7, #16]
   12c3a:	2203      	movs	r2, #3
   12c3c:	751a      	strb	r2, [r3, #20]
   12c3e:	697b      	ldr	r3, [r7, #20]
   12c40:	2200      	movs	r2, #0
   12c42:	835a      	strh	r2, [r3, #26]
   12c44:	697b      	ldr	r3, [r7, #20]
   12c46:	2200      	movs	r2, #0
   12c48:	839a      	strh	r2, [r3, #28]
   12c4a:	697b      	ldr	r3, [r7, #20]
   12c4c:	2225      	movs	r2, #37	; 0x25
   12c4e:	5c9b      	ldrb	r3, [r3, r2]
   12c50:	b2db      	uxtb	r3, r3
   12c52:	2b41      	cmp	r3, #65	; 0x41
   12c54:	d00e      	beq.n	12c74 <_i2c_master_interrupt_handler+0x240>
   12c56:	697b      	ldr	r3, [r7, #20]
   12c58:	7a9b      	ldrb	r3, [r3, #10]
   12c5a:	2b00      	cmp	r3, #0
   12c5c:	d00a      	beq.n	12c74 <_i2c_master_interrupt_handler+0x240>
   12c5e:	697b      	ldr	r3, [r7, #20]
   12c60:	0018      	movs	r0, r3
   12c62:	4b0e      	ldr	r3, [pc, #56]	; (12c9c <_i2c_master_interrupt_handler+0x268>)
   12c64:	4798      	blx	r3
   12c66:	693b      	ldr	r3, [r7, #16]
   12c68:	685b      	ldr	r3, [r3, #4]
   12c6a:	22e0      	movs	r2, #224	; 0xe0
   12c6c:	02d2      	lsls	r2, r2, #11
   12c6e:	431a      	orrs	r2, r3
   12c70:	693b      	ldr	r3, [r7, #16]
   12c72:	605a      	str	r2, [r3, #4]
   12c74:	230e      	movs	r3, #14
   12c76:	18fb      	adds	r3, r7, r3
   12c78:	781b      	ldrb	r3, [r3, #0]
   12c7a:	2204      	movs	r2, #4
   12c7c:	4013      	ands	r3, r2
   12c7e:	d004      	beq.n	12c8a <_i2c_master_interrupt_handler+0x256>
   12c80:	697b      	ldr	r3, [r7, #20]
   12c82:	695b      	ldr	r3, [r3, #20]
   12c84:	697a      	ldr	r2, [r7, #20]
   12c86:	0010      	movs	r0, r2
   12c88:	4798      	blx	r3
   12c8a:	46c0      	nop			; (mov r8, r8)
   12c8c:	46bd      	mov	sp, r7
   12c8e:	b006      	add	sp, #24
   12c90:	bd80      	pop	{r7, pc}
   12c92:	46c0      	nop			; (mov r8, r8)
   12c94:	20005578 	.word	0x20005578
   12c98:	0001284d 	.word	0x0001284d
   12c9c:	000126bd 	.word	0x000126bd
   12ca0:	000127d1 	.word	0x000127d1
   12ca4:	000126e1 	.word	0x000126e1

00012ca8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   12ca8:	b580      	push	{r7, lr}
   12caa:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   12cac:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   12cb0:	4b02      	ldr	r3, [pc, #8]	; (12cbc <NVIC_SystemReset+0x14>)
   12cb2:	4a03      	ldr	r2, [pc, #12]	; (12cc0 <NVIC_SystemReset+0x18>)
   12cb4:	60da      	str	r2, [r3, #12]
   12cb6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   12cba:	e7fe      	b.n	12cba <NVIC_SystemReset+0x12>
   12cbc:	e000ed00 	.word	0xe000ed00
   12cc0:	05fa0004 	.word	0x05fa0004

00012cc4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   12cc4:	b580      	push	{r7, lr}
   12cc6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   12cc8:	4b02      	ldr	r3, [pc, #8]	; (12cd4 <system_reset+0x10>)
   12cca:	4798      	blx	r3
}
   12ccc:	46c0      	nop			; (mov r8, r8)
   12cce:	46bd      	mov	sp, r7
   12cd0:	bd80      	pop	{r7, pc}
   12cd2:	46c0      	nop			; (mov r8, r8)
   12cd4:	00012ca9 	.word	0x00012ca9

00012cd8 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   12cd8:	b580      	push	{r7, lr}
   12cda:	b086      	sub	sp, #24
   12cdc:	af00      	add	r7, sp, #0
   12cde:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   12ce0:	4b98      	ldr	r3, [pc, #608]	; (12f44 <vCommandConsoleTask+0x26c>)
   12ce2:	0018      	movs	r0, r3
   12ce4:	4b98      	ldr	r3, [pc, #608]	; (12f48 <vCommandConsoleTask+0x270>)
   12ce6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   12ce8:	4b98      	ldr	r3, [pc, #608]	; (12f4c <vCommandConsoleTask+0x274>)
   12cea:	0018      	movs	r0, r3
   12cec:	4b96      	ldr	r3, [pc, #600]	; (12f48 <vCommandConsoleTask+0x270>)
   12cee:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   12cf0:	4b97      	ldr	r3, [pc, #604]	; (12f50 <vCommandConsoleTask+0x278>)
   12cf2:	0018      	movs	r0, r3
   12cf4:	4b94      	ldr	r3, [pc, #592]	; (12f48 <vCommandConsoleTask+0x270>)
   12cf6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xI2cScan);
   12cf8:	4b96      	ldr	r3, [pc, #600]	; (12f54 <vCommandConsoleTask+0x27c>)
   12cfa:	0018      	movs	r0, r3
   12cfc:	4b92      	ldr	r3, [pc, #584]	; (12f48 <vCommandConsoleTask+0x270>)
   12cfe:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xVersion);
   12d00:	4b95      	ldr	r3, [pc, #596]	; (12f58 <vCommandConsoleTask+0x280>)
   12d02:	0018      	movs	r0, r3
   12d04:	4b90      	ldr	r3, [pc, #576]	; (12f48 <vCommandConsoleTask+0x270>)
   12d06:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xTicks);
   12d08:	4b94      	ldr	r3, [pc, #592]	; (12f5c <vCommandConsoleTask+0x284>)
   12d0a:	0018      	movs	r0, r3
   12d0c:	4b8e      	ldr	r3, [pc, #568]	; (12f48 <vCommandConsoleTask+0x270>)
   12d0e:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   12d10:	2317      	movs	r3, #23
   12d12:	18fb      	adds	r3, r7, r3
   12d14:	2200      	movs	r2, #0
   12d16:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   12d18:	4b91      	ldr	r3, [pc, #580]	; (12f60 <vCommandConsoleTask+0x288>)
   12d1a:	0018      	movs	r0, r3
   12d1c:	4b91      	ldr	r3, [pc, #580]	; (12f64 <vCommandConsoleTask+0x28c>)
   12d1e:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   12d20:	2203      	movs	r2, #3
   12d22:	2100      	movs	r1, #0
   12d24:	2001      	movs	r0, #1
   12d26:	4b90      	ldr	r3, [pc, #576]	; (12f68 <vCommandConsoleTask+0x290>)
   12d28:	4798      	blx	r3
   12d2a:	0002      	movs	r2, r0
   12d2c:	4b8f      	ldr	r3, [pc, #572]	; (12f6c <vCommandConsoleTask+0x294>)
   12d2e:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   12d30:	4b8e      	ldr	r3, [pc, #568]	; (12f6c <vCommandConsoleTask+0x294>)
   12d32:	681b      	ldr	r3, [r3, #0]
   12d34:	2b00      	cmp	r3, #0
   12d36:	d107      	bne.n	12d48 <vCommandConsoleTask+0x70>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   12d38:	4b8d      	ldr	r3, [pc, #564]	; (12f70 <vCommandConsoleTask+0x298>)
   12d3a:	0019      	movs	r1, r3
   12d3c:	2003      	movs	r0, #3
   12d3e:	4b8d      	ldr	r3, [pc, #564]	; (12f74 <vCommandConsoleTask+0x29c>)
   12d40:	4798      	blx	r3
        vTaskSuspend(NULL);
   12d42:	2000      	movs	r0, #0
   12d44:	4b8c      	ldr	r3, [pc, #560]	; (12f78 <vCommandConsoleTask+0x2a0>)
   12d46:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   12d48:	230c      	movs	r3, #12
   12d4a:	18fb      	adds	r3, r7, r3
   12d4c:	0018      	movs	r0, r3
   12d4e:	4b8b      	ldr	r3, [pc, #556]	; (12f7c <vCommandConsoleTask+0x2a4>)
   12d50:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   12d52:	230c      	movs	r3, #12
   12d54:	18fb      	adds	r3, r7, r3
   12d56:	781b      	ldrb	r3, [r3, #0]
   12d58:	2b0a      	cmp	r3, #10
   12d5a:	d004      	beq.n	12d66 <vCommandConsoleTask+0x8e>
   12d5c:	230c      	movs	r3, #12
   12d5e:	18fb      	adds	r3, r7, r3
   12d60:	781b      	ldrb	r3, [r3, #0]
   12d62:	2b0d      	cmp	r3, #13
   12d64:	d137      	bne.n	12dd6 <vCommandConsoleTask+0xfe>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   12d66:	4b86      	ldr	r3, [pc, #536]	; (12f80 <vCommandConsoleTask+0x2a8>)
   12d68:	0018      	movs	r0, r3
   12d6a:	4b7e      	ldr	r3, [pc, #504]	; (12f64 <vCommandConsoleTask+0x28c>)
   12d6c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   12d6e:	4b85      	ldr	r3, [pc, #532]	; (12f84 <vCommandConsoleTask+0x2ac>)
   12d70:	2200      	movs	r2, #0
   12d72:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   12d74:	4b84      	ldr	r3, [pc, #528]	; (12f88 <vCommandConsoleTask+0x2b0>)
   12d76:	2200      	movs	r2, #0
   12d78:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   12d7a:	4984      	ldr	r1, [pc, #528]	; (12f8c <vCommandConsoleTask+0x2b4>)
   12d7c:	4b84      	ldr	r3, [pc, #528]	; (12f90 <vCommandConsoleTask+0x2b8>)
   12d7e:	2231      	movs	r2, #49	; 0x31
   12d80:	0018      	movs	r0, r3
   12d82:	4b84      	ldr	r3, [pc, #528]	; (12f94 <vCommandConsoleTask+0x2bc>)
   12d84:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   12d86:	4b82      	ldr	r3, [pc, #520]	; (12f90 <vCommandConsoleTask+0x2b8>)
   12d88:	2231      	movs	r2, #49	; 0x31
   12d8a:	2100      	movs	r1, #0
   12d8c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   12d8e:	4982      	ldr	r1, [pc, #520]	; (12f98 <vCommandConsoleTask+0x2c0>)
   12d90:	4b7e      	ldr	r3, [pc, #504]	; (12f8c <vCommandConsoleTask+0x2b4>)
   12d92:	2264      	movs	r2, #100	; 0x64
   12d94:	0018      	movs	r0, r3
   12d96:	4b81      	ldr	r3, [pc, #516]	; (12f9c <vCommandConsoleTask+0x2c4>)
   12d98:	4798      	blx	r3
   12d9a:	0003      	movs	r3, r0
   12d9c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12d9e:	4b7e      	ldr	r3, [pc, #504]	; (12f98 <vCommandConsoleTask+0x2c0>)
   12da0:	2263      	movs	r2, #99	; 0x63
   12da2:	2100      	movs	r1, #0
   12da4:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   12da6:	4b7c      	ldr	r3, [pc, #496]	; (12f98 <vCommandConsoleTask+0x2c0>)
   12da8:	0018      	movs	r0, r3
   12daa:	4b6e      	ldr	r3, [pc, #440]	; (12f64 <vCommandConsoleTask+0x28c>)
   12dac:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   12dae:	693b      	ldr	r3, [r7, #16]
   12db0:	2b00      	cmp	r3, #0
   12db2:	d1ec      	bne.n	12d8e <vCommandConsoleTask+0xb6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   12db4:	2317      	movs	r3, #23
   12db6:	18fb      	adds	r3, r7, r3
   12db8:	2200      	movs	r2, #0
   12dba:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12dbc:	4b73      	ldr	r3, [pc, #460]	; (12f8c <vCommandConsoleTask+0x2b4>)
   12dbe:	2232      	movs	r2, #50	; 0x32
   12dc0:	2100      	movs	r1, #0
   12dc2:	0018      	movs	r0, r3
   12dc4:	4b76      	ldr	r3, [pc, #472]	; (12fa0 <vCommandConsoleTask+0x2c8>)
   12dc6:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   12dc8:	4b73      	ldr	r3, [pc, #460]	; (12f98 <vCommandConsoleTask+0x2c0>)
   12dca:	2264      	movs	r2, #100	; 0x64
   12dcc:	2100      	movs	r1, #0
   12dce:	0018      	movs	r0, r3
   12dd0:	4b73      	ldr	r3, [pc, #460]	; (12fa0 <vCommandConsoleTask+0x2c8>)
   12dd2:	4798      	blx	r3
   12dd4:	e0b5      	b.n	12f42 <vCommandConsoleTask+0x26a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   12dd6:	4b6b      	ldr	r3, [pc, #428]	; (12f84 <vCommandConsoleTask+0x2ac>)
   12dd8:	781b      	ldrb	r3, [r3, #0]
   12dda:	2b00      	cmp	r3, #0
   12ddc:	d059      	beq.n	12e92 <vCommandConsoleTask+0x1ba>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   12dde:	4b6a      	ldr	r3, [pc, #424]	; (12f88 <vCommandConsoleTask+0x2b0>)
   12de0:	781b      	ldrb	r3, [r3, #0]
   12de2:	2b03      	cmp	r3, #3
   12de4:	d80c      	bhi.n	12e00 <vCommandConsoleTask+0x128>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   12de6:	4b68      	ldr	r3, [pc, #416]	; (12f88 <vCommandConsoleTask+0x2b0>)
   12de8:	781b      	ldrb	r3, [r3, #0]
   12dea:	1c5a      	adds	r2, r3, #1
   12dec:	b2d1      	uxtb	r1, r2
   12dee:	4a66      	ldr	r2, [pc, #408]	; (12f88 <vCommandConsoleTask+0x2b0>)
   12df0:	7011      	strb	r1, [r2, #0]
   12df2:	001a      	movs	r2, r3
   12df4:	230c      	movs	r3, #12
   12df6:	18fb      	adds	r3, r7, r3
   12df8:	7819      	ldrb	r1, [r3, #0]
   12dfa:	4b6a      	ldr	r3, [pc, #424]	; (12fa4 <vCommandConsoleTask+0x2cc>)
   12dfc:	5499      	strb	r1, [r3, r2]
   12dfe:	e005      	b.n	12e0c <vCommandConsoleTask+0x134>
                } else {
                    isEscapeCode = false;
   12e00:	4b60      	ldr	r3, [pc, #384]	; (12f84 <vCommandConsoleTask+0x2ac>)
   12e02:	2200      	movs	r2, #0
   12e04:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   12e06:	4b60      	ldr	r3, [pc, #384]	; (12f88 <vCommandConsoleTask+0x2b0>)
   12e08:	2200      	movs	r2, #0
   12e0a:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   12e0c:	4b5e      	ldr	r3, [pc, #376]	; (12f88 <vCommandConsoleTask+0x2b0>)
   12e0e:	781b      	ldrb	r3, [r3, #0]
   12e10:	2b01      	cmp	r3, #1
   12e12:	d999      	bls.n	12d48 <vCommandConsoleTask+0x70>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   12e14:	4a64      	ldr	r2, [pc, #400]	; (12fa8 <vCommandConsoleTask+0x2d0>)
   12e16:	4b63      	ldr	r3, [pc, #396]	; (12fa4 <vCommandConsoleTask+0x2cc>)
   12e18:	0011      	movs	r1, r2
   12e1a:	0018      	movs	r0, r3
   12e1c:	4b63      	ldr	r3, [pc, #396]	; (12fac <vCommandConsoleTask+0x2d4>)
   12e1e:	4798      	blx	r3
   12e20:	1e03      	subs	r3, r0, #0
   12e22:	d02f      	beq.n	12e84 <vCommandConsoleTask+0x1ac>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   12e24:	4962      	ldr	r1, [pc, #392]	; (12fb0 <vCommandConsoleTask+0x2d8>)
   12e26:	4b59      	ldr	r3, [pc, #356]	; (12f8c <vCommandConsoleTask+0x2b4>)
   12e28:	221b      	movs	r2, #27
   12e2a:	0018      	movs	r0, r3
   12e2c:	4b61      	ldr	r3, [pc, #388]	; (12fb4 <vCommandConsoleTask+0x2dc>)
   12e2e:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   12e30:	4b56      	ldr	r3, [pc, #344]	; (12f8c <vCommandConsoleTask+0x2b4>)
   12e32:	0018      	movs	r0, r3
   12e34:	4b4b      	ldr	r3, [pc, #300]	; (12f64 <vCommandConsoleTask+0x28c>)
   12e36:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   12e38:	2317      	movs	r3, #23
   12e3a:	18fb      	adds	r3, r7, r3
   12e3c:	2200      	movs	r2, #0
   12e3e:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12e40:	4b52      	ldr	r3, [pc, #328]	; (12f8c <vCommandConsoleTask+0x2b4>)
   12e42:	2232      	movs	r2, #50	; 0x32
   12e44:	2100      	movs	r1, #0
   12e46:	0018      	movs	r0, r3
   12e48:	4b55      	ldr	r3, [pc, #340]	; (12fa0 <vCommandConsoleTask+0x2c8>)
   12e4a:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   12e4c:	4950      	ldr	r1, [pc, #320]	; (12f90 <vCommandConsoleTask+0x2b8>)
   12e4e:	4b4f      	ldr	r3, [pc, #316]	; (12f8c <vCommandConsoleTask+0x2b4>)
   12e50:	2231      	movs	r2, #49	; 0x31
   12e52:	0018      	movs	r0, r3
   12e54:	4b4f      	ldr	r3, [pc, #316]	; (12f94 <vCommandConsoleTask+0x2bc>)
   12e56:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   12e58:	4b4c      	ldr	r3, [pc, #304]	; (12f8c <vCommandConsoleTask+0x2b4>)
   12e5a:	0018      	movs	r0, r3
   12e5c:	4b56      	ldr	r3, [pc, #344]	; (12fb8 <vCommandConsoleTask+0x2e0>)
   12e5e:	4798      	blx	r3
   12e60:	0003      	movs	r3, r0
   12e62:	2b30      	cmp	r3, #48	; 0x30
   12e64:	d806      	bhi.n	12e74 <vCommandConsoleTask+0x19c>
   12e66:	4b4a      	ldr	r3, [pc, #296]	; (12f90 <vCommandConsoleTask+0x2b8>)
   12e68:	0018      	movs	r0, r3
   12e6a:	4b53      	ldr	r3, [pc, #332]	; (12fb8 <vCommandConsoleTask+0x2e0>)
   12e6c:	4798      	blx	r3
   12e6e:	0003      	movs	r3, r0
   12e70:	b2da      	uxtb	r2, r3
   12e72:	e000      	b.n	12e76 <vCommandConsoleTask+0x19e>
   12e74:	2231      	movs	r2, #49	; 0x31
   12e76:	2317      	movs	r3, #23
   12e78:	18fb      	adds	r3, r7, r3
   12e7a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   12e7c:	4b43      	ldr	r3, [pc, #268]	; (12f8c <vCommandConsoleTask+0x2b4>)
   12e7e:	0018      	movs	r0, r3
   12e80:	4b38      	ldr	r3, [pc, #224]	; (12f64 <vCommandConsoleTask+0x28c>)
   12e82:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   12e84:	4b3f      	ldr	r3, [pc, #252]	; (12f84 <vCommandConsoleTask+0x2ac>)
   12e86:	2200      	movs	r2, #0
   12e88:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   12e8a:	4b3f      	ldr	r3, [pc, #252]	; (12f88 <vCommandConsoleTask+0x2b0>)
   12e8c:	2200      	movs	r2, #0
   12e8e:	701a      	strb	r2, [r3, #0]
   12e90:	e75a      	b.n	12d48 <vCommandConsoleTask+0x70>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   12e92:	230c      	movs	r3, #12
   12e94:	18fb      	adds	r3, r7, r3
   12e96:	781b      	ldrb	r3, [r3, #0]
   12e98:	2b0d      	cmp	r3, #13
   12e9a:	d100      	bne.n	12e9e <vCommandConsoleTask+0x1c6>
   12e9c:	e754      	b.n	12d48 <vCommandConsoleTask+0x70>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   12e9e:	230c      	movs	r3, #12
   12ea0:	18fb      	adds	r3, r7, r3
   12ea2:	781b      	ldrb	r3, [r3, #0]
   12ea4:	2b08      	cmp	r3, #8
   12ea6:	d004      	beq.n	12eb2 <vCommandConsoleTask+0x1da>
   12ea8:	230c      	movs	r3, #12
   12eaa:	18fb      	adds	r3, r7, r3
   12eac:	781b      	ldrb	r3, [r3, #0]
   12eae:	2b7f      	cmp	r3, #127	; 0x7f
   12eb0:	d11c      	bne.n	12eec <vCommandConsoleTask+0x214>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   12eb2:	2308      	movs	r3, #8
   12eb4:	18fb      	adds	r3, r7, r3
   12eb6:	4a41      	ldr	r2, [pc, #260]	; (12fbc <vCommandConsoleTask+0x2e4>)
   12eb8:	6812      	ldr	r2, [r2, #0]
   12eba:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   12ebc:	2308      	movs	r3, #8
   12ebe:	18fb      	adds	r3, r7, r3
   12ec0:	0018      	movs	r0, r3
   12ec2:	4b28      	ldr	r3, [pc, #160]	; (12f64 <vCommandConsoleTask+0x28c>)
   12ec4:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   12ec6:	2317      	movs	r3, #23
   12ec8:	18fb      	adds	r3, r7, r3
   12eca:	781b      	ldrb	r3, [r3, #0]
   12ecc:	2b00      	cmp	r3, #0
   12ece:	d037      	beq.n	12f40 <vCommandConsoleTask+0x268>
                    cInputIndex--;
   12ed0:	2317      	movs	r3, #23
   12ed2:	18fb      	adds	r3, r7, r3
   12ed4:	781a      	ldrb	r2, [r3, #0]
   12ed6:	2317      	movs	r3, #23
   12ed8:	18fb      	adds	r3, r7, r3
   12eda:	3a01      	subs	r2, #1
   12edc:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   12ede:	2317      	movs	r3, #23
   12ee0:	18fb      	adds	r3, r7, r3
   12ee2:	781b      	ldrb	r3, [r3, #0]
   12ee4:	4a29      	ldr	r2, [pc, #164]	; (12f8c <vCommandConsoleTask+0x2b4>)
   12ee6:	2100      	movs	r1, #0
   12ee8:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   12eea:	e029      	b.n	12f40 <vCommandConsoleTask+0x268>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   12eec:	230c      	movs	r3, #12
   12eee:	18fb      	adds	r3, r7, r3
   12ef0:	781b      	ldrb	r3, [r3, #0]
   12ef2:	2b1b      	cmp	r3, #27
   12ef4:	d106      	bne.n	12f04 <vCommandConsoleTask+0x22c>
                isEscapeCode = true;  // Next characters will be code arguments
   12ef6:	4b23      	ldr	r3, [pc, #140]	; (12f84 <vCommandConsoleTask+0x2ac>)
   12ef8:	2201      	movs	r2, #1
   12efa:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   12efc:	4b22      	ldr	r3, [pc, #136]	; (12f88 <vCommandConsoleTask+0x2b0>)
   12efe:	2200      	movs	r2, #0
   12f00:	701a      	strb	r2, [r3, #0]
   12f02:	e721      	b.n	12d48 <vCommandConsoleTask+0x70>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   12f04:	2317      	movs	r3, #23
   12f06:	18fb      	adds	r3, r7, r3
   12f08:	781b      	ldrb	r3, [r3, #0]
   12f0a:	2b31      	cmp	r3, #49	; 0x31
   12f0c:	d80e      	bhi.n	12f2c <vCommandConsoleTask+0x254>
                    pcInputString[cInputIndex] = cRxedChar[0];
   12f0e:	2317      	movs	r3, #23
   12f10:	18fb      	adds	r3, r7, r3
   12f12:	781b      	ldrb	r3, [r3, #0]
   12f14:	220c      	movs	r2, #12
   12f16:	18ba      	adds	r2, r7, r2
   12f18:	7811      	ldrb	r1, [r2, #0]
   12f1a:	4a1c      	ldr	r2, [pc, #112]	; (12f8c <vCommandConsoleTask+0x2b4>)
   12f1c:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   12f1e:	2317      	movs	r3, #23
   12f20:	18fb      	adds	r3, r7, r3
   12f22:	781a      	ldrb	r2, [r3, #0]
   12f24:	2317      	movs	r3, #23
   12f26:	18fb      	adds	r3, r7, r3
   12f28:	3201      	adds	r2, #1
   12f2a:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   12f2c:	230c      	movs	r3, #12
   12f2e:	18fb      	adds	r3, r7, r3
   12f30:	2200      	movs	r2, #0
   12f32:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   12f34:	230c      	movs	r3, #12
   12f36:	18fb      	adds	r3, r7, r3
   12f38:	0018      	movs	r0, r3
   12f3a:	4b0a      	ldr	r3, [pc, #40]	; (12f64 <vCommandConsoleTask+0x28c>)
   12f3c:	4798      	blx	r3
   12f3e:	e703      	b.n	12d48 <vCommandConsoleTask+0x70>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   12f40:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   12f42:	e701      	b.n	12d48 <vCommandConsoleTask+0x70>
   12f44:	000337ac 	.word	0x000337ac
   12f48:	00015a85 	.word	0x00015a85
   12f4c:	000337fc 	.word	0x000337fc
   12f50:	000337bc 	.word	0x000337bc
   12f54:	000337cc 	.word	0x000337cc
   12f58:	000337dc 	.word	0x000337dc
   12f5c:	000337ec 	.word	0x000337ec
   12f60:	00033580 	.word	0x00033580
   12f64:	0001b9a9 	.word	0x0001b9a9
   12f68:	00018049 	.word	0x00018049
   12f6c:	200041e0 	.word	0x200041e0
   12f70:	000336dc 	.word	0x000336dc
   12f74:	0001ba95 	.word	0x0001ba95
   12f78:	00019e35 	.word	0x00019e35
   12f7c:	00012fc1 	.word	0x00012fc1
   12f80:	000336fc 	.word	0x000336fc
   12f84:	20000374 	.word	0x20000374
   12f88:	20000375 	.word	0x20000375
   12f8c:	200003ac 	.word	0x200003ac
   12f90:	20000378 	.word	0x20000378
   12f94:	0003258b 	.word	0x0003258b
   12f98:	200003e0 	.word	0x200003e0
   12f9c:	00015af5 	.word	0x00015af5
   12fa0:	000321a3 	.word	0x000321a3
   12fa4:	20000444 	.word	0x20000444
   12fa8:	00033700 	.word	0x00033700
   12fac:	000324a5 	.word	0x000324a5
   12fb0:	00033704 	.word	0x00033704
   12fb4:	00032461 	.word	0x00032461
   12fb8:	0003255b 	.word	0x0003255b
   12fbc:	0003370c 	.word	0x0003370c

00012fc0 <FreeRTOS_read>:
* @details		STUDENTS TO COMPLETE.
* @note
*****************************************************************************/
extern cbuf_handle_t cbufRx;   ///< Circular buffer handler for receiving characters from the Serial Interface
static void FreeRTOS_read(char *character)
{
   12fc0:	b580      	push	{r7, lr}
   12fc2:	b082      	sub	sp, #8
   12fc4:	af00      	add	r7, sp, #0
   12fc6:	6078      	str	r0, [r7, #4]
	if(xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY) == pdTRUE)
   12fc8:	4b09      	ldr	r3, [pc, #36]	; (12ff0 <FreeRTOS_read+0x30>)
   12fca:	681a      	ldr	r2, [r3, #0]
   12fcc:	2301      	movs	r3, #1
   12fce:	425b      	negs	r3, r3
   12fd0:	0019      	movs	r1, r3
   12fd2:	0010      	movs	r0, r2
   12fd4:	4b07      	ldr	r3, [pc, #28]	; (12ff4 <FreeRTOS_read+0x34>)
   12fd6:	4798      	blx	r3
   12fd8:	0003      	movs	r3, r0
   12fda:	2b01      	cmp	r3, #1
   12fdc:	d103      	bne.n	12fe6 <FreeRTOS_read+0x26>
		SerialConsoleReadCharacter(character);
   12fde:	687b      	ldr	r3, [r7, #4]
   12fe0:	0018      	movs	r0, r3
   12fe2:	4b05      	ldr	r3, [pc, #20]	; (12ff8 <FreeRTOS_read+0x38>)
   12fe4:	4798      	blx	r3
}
   12fe6:	46c0      	nop			; (mov r8, r8)
   12fe8:	46bd      	mov	sp, r7
   12fea:	b002      	add	sp, #8
   12fec:	bd80      	pop	{r7, pc}
   12fee:	46c0      	nop			; (mov r8, r8)
   12ff0:	200041e0 	.word	0x200041e0
   12ff4:	00019001 	.word	0x00019001
   12ff8:	0001ba45 	.word	0x0001ba45

00012ffc <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   12ffc:	b580      	push	{r7, lr}
   12ffe:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13000:	4b0a      	ldr	r3, [pc, #40]	; (1302c <CliCharReadySemaphoreGiveFromISR+0x30>)
   13002:	2200      	movs	r2, #0
   13004:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13006:	4b0a      	ldr	r3, [pc, #40]	; (13030 <CliCharReadySemaphoreGiveFromISR+0x34>)
   13008:	681b      	ldr	r3, [r3, #0]
   1300a:	4a08      	ldr	r2, [pc, #32]	; (1302c <CliCharReadySemaphoreGiveFromISR+0x30>)
   1300c:	0011      	movs	r1, r2
   1300e:	0018      	movs	r0, r3
   13010:	4b08      	ldr	r3, [pc, #32]	; (13034 <CliCharReadySemaphoreGiveFromISR+0x38>)
   13012:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13014:	4b05      	ldr	r3, [pc, #20]	; (1302c <CliCharReadySemaphoreGiveFromISR+0x30>)
   13016:	681b      	ldr	r3, [r3, #0]
   13018:	2b00      	cmp	r3, #0
   1301a:	d003      	beq.n	13024 <CliCharReadySemaphoreGiveFromISR+0x28>
   1301c:	4b06      	ldr	r3, [pc, #24]	; (13038 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   1301e:	2280      	movs	r2, #128	; 0x80
   13020:	0552      	lsls	r2, r2, #21
   13022:	601a      	str	r2, [r3, #0]
}
   13024:	46c0      	nop			; (mov r8, r8)
   13026:	46bd      	mov	sp, r7
   13028:	bd80      	pop	{r7, pc}
   1302a:	46c0      	nop			; (mov r8, r8)
   1302c:	20000448 	.word	0x20000448
   13030:	200041e0 	.word	0x200041e0
   13034:	00018979 	.word	0x00018979
   13038:	e000ed04 	.word	0xe000ed04

0001303c <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1303c:	b590      	push	{r4, r7, lr}
   1303e:	b087      	sub	sp, #28
   13040:	af00      	add	r7, sp, #0
   13042:	60f8      	str	r0, [r7, #12]
   13044:	60b9      	str	r1, [r7, #8]
   13046:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13048:	2317      	movs	r3, #23
   1304a:	18fb      	adds	r3, r7, r3
   1304c:	221b      	movs	r2, #27
   1304e:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13050:	2317      	movs	r3, #23
   13052:	18fb      	adds	r3, r7, r3
   13054:	781b      	ldrb	r3, [r3, #0]
   13056:	4a08      	ldr	r2, [pc, #32]	; (13078 <xCliClearTerminalScreen+0x3c>)
   13058:	4808      	ldr	r0, [pc, #32]	; (1307c <xCliClearTerminalScreen+0x40>)
   1305a:	210f      	movs	r1, #15
   1305c:	4c08      	ldr	r4, [pc, #32]	; (13080 <xCliClearTerminalScreen+0x44>)
   1305e:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13060:	4a06      	ldr	r2, [pc, #24]	; (1307c <xCliClearTerminalScreen+0x40>)
   13062:	68b9      	ldr	r1, [r7, #8]
   13064:	68fb      	ldr	r3, [r7, #12]
   13066:	0018      	movs	r0, r3
   13068:	4b05      	ldr	r3, [pc, #20]	; (13080 <xCliClearTerminalScreen+0x44>)
   1306a:	4798      	blx	r3
    return pdFALSE;
   1306c:	2300      	movs	r3, #0
}
   1306e:	0018      	movs	r0, r3
   13070:	46bd      	mov	sp, r7
   13072:	b007      	add	sp, #28
   13074:	bd90      	pop	{r4, r7, pc}
   13076:	46c0      	nop			; (mov r8, r8)
   13078:	00033710 	.word	0x00033710
   1307c:	20000364 	.word	0x20000364
   13080:	000323fd 	.word	0x000323fd

00013084 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13084:	b580      	push	{r7, lr}
   13086:	b084      	sub	sp, #16
   13088:	af00      	add	r7, sp, #0
   1308a:	60f8      	str	r0, [r7, #12]
   1308c:	60b9      	str	r1, [r7, #8]
   1308e:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13090:	2002      	movs	r0, #2
   13092:	4b07      	ldr	r3, [pc, #28]	; (130b0 <CLI_OTAU+0x2c>)
   13094:	4798      	blx	r3

    vTaskDelay(8000);
   13096:	23fa      	movs	r3, #250	; 0xfa
   13098:	015b      	lsls	r3, r3, #5
   1309a:	0018      	movs	r0, r3
   1309c:	4b05      	ldr	r3, [pc, #20]	; (130b4 <CLI_OTAU+0x30>)
   1309e:	4798      	blx	r3
    system_reset();
   130a0:	4b05      	ldr	r3, [pc, #20]	; (130b8 <CLI_OTAU+0x34>)
   130a2:	4798      	blx	r3

    return pdFALSE;
   130a4:	2300      	movs	r3, #0
}
   130a6:	0018      	movs	r0, r3
   130a8:	46bd      	mov	sp, r7
   130aa:	b004      	add	sp, #16
   130ac:	bd80      	pop	{r7, pc}
   130ae:	46c0      	nop			; (mov r8, r8)
   130b0:	00015149 	.word	0x00015149
   130b4:	00019d55 	.word	0x00019d55
   130b8:	00012cc5 	.word	0x00012cc5

000130bc <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   130bc:	b580      	push	{r7, lr}
   130be:	b084      	sub	sp, #16
   130c0:	af00      	add	r7, sp, #0
   130c2:	60f8      	str	r0, [r7, #12]
   130c4:	60b9      	str	r1, [r7, #8]
   130c6:	607a      	str	r2, [r7, #4]
    system_reset();
   130c8:	4b03      	ldr	r3, [pc, #12]	; (130d8 <CLI_ResetDevice+0x1c>)
   130ca:	4798      	blx	r3
    return pdFALSE;
   130cc:	2300      	movs	r3, #0
}
   130ce:	0018      	movs	r0, r3
   130d0:	46bd      	mov	sp, r7
   130d2:	b004      	add	sp, #16
   130d4:	bd80      	pop	{r7, pc}
   130d6:	46c0      	nop			; (mov r8, r8)
   130d8:	00012cc5 	.word	0x00012cc5

000130dc <CLI_version>:
 * @param    p_cli
 * @param    argc
 * @param    argv
 ******************************************************************************/
BaseType_t CLI_version(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   130dc:	b580      	push	{r7, lr}
   130de:	b084      	sub	sp, #16
   130e0:	af00      	add	r7, sp, #0
   130e2:	60f8      	str	r0, [r7, #12]
   130e4:	60b9      	str	r1, [r7, #8]
   130e6:	607a      	str	r2, [r7, #4]
	SerialConsoleWriteString("\r\nVersion Number: ");
   130e8:	4b08      	ldr	r3, [pc, #32]	; (1310c <CLI_version+0x30>)
   130ea:	0018      	movs	r0, r3
   130ec:	4b08      	ldr	r3, [pc, #32]	; (13110 <CLI_version+0x34>)
   130ee:	4798      	blx	r3
	SerialConsoleWriteString(VERSION_NUMBER);
   130f0:	4b08      	ldr	r3, [pc, #32]	; (13114 <CLI_version+0x38>)
   130f2:	0018      	movs	r0, r3
   130f4:	4b06      	ldr	r3, [pc, #24]	; (13110 <CLI_version+0x34>)
   130f6:	4798      	blx	r3
	SerialConsoleWriteString("\r\n\r\n");
   130f8:	4b07      	ldr	r3, [pc, #28]	; (13118 <CLI_version+0x3c>)
   130fa:	0018      	movs	r0, r3
   130fc:	4b04      	ldr	r3, [pc, #16]	; (13110 <CLI_version+0x34>)
   130fe:	4798      	blx	r3
	return pdFALSE;
   13100:	2300      	movs	r3, #0
}
   13102:	0018      	movs	r0, r3
   13104:	46bd      	mov	sp, r7
   13106:	b004      	add	sp, #16
   13108:	bd80      	pop	{r7, pc}
   1310a:	46c0      	nop			; (mov r8, r8)
   1310c:	00033718 	.word	0x00033718
   13110:	0001b9a9 	.word	0x0001b9a9
   13114:	0003372c 	.word	0x0003372c
   13118:	00033738 	.word	0x00033738

0001311c <CLI_ticks>:
 * @param    p_cli
 * @param    argc
 * @param    argv
 ******************************************************************************/
BaseType_t CLI_ticks(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1311c:	b580      	push	{r7, lr}
   1311e:	b086      	sub	sp, #24
   13120:	af00      	add	r7, sp, #0
   13122:	60f8      	str	r0, [r7, #12]
   13124:	60b9      	str	r1, [r7, #8]
   13126:	607a      	str	r2, [r7, #4]
	TickType_t ticks;
	ticks = xTaskGetTickCount();
   13128:	4b0b      	ldr	r3, [pc, #44]	; (13158 <CLI_ticks+0x3c>)
   1312a:	4798      	blx	r3
   1312c:	0003      	movs	r3, r0
   1312e:	617b      	str	r3, [r7, #20]
	SerialConsoleWriteString("\r\nTicks since start of scheduler: ");
   13130:	4b0a      	ldr	r3, [pc, #40]	; (1315c <CLI_ticks+0x40>)
   13132:	0018      	movs	r0, r3
   13134:	4b0a      	ldr	r3, [pc, #40]	; (13160 <CLI_ticks+0x44>)
   13136:	4798      	blx	r3
	sprintf(bufCli, "%lu\r\n", ticks);
   13138:	697a      	ldr	r2, [r7, #20]
   1313a:	490a      	ldr	r1, [pc, #40]	; (13164 <CLI_ticks+0x48>)
   1313c:	4b0a      	ldr	r3, [pc, #40]	; (13168 <CLI_ticks+0x4c>)
   1313e:	0018      	movs	r0, r3
   13140:	4b0a      	ldr	r3, [pc, #40]	; (1316c <CLI_ticks+0x50>)
   13142:	4798      	blx	r3
	SerialConsoleWriteString(bufCli);
   13144:	4b08      	ldr	r3, [pc, #32]	; (13168 <CLI_ticks+0x4c>)
   13146:	0018      	movs	r0, r3
   13148:	4b05      	ldr	r3, [pc, #20]	; (13160 <CLI_ticks+0x44>)
   1314a:	4798      	blx	r3
	return pdFALSE;
   1314c:	2300      	movs	r3, #0
}
   1314e:	0018      	movs	r0, r3
   13150:	46bd      	mov	sp, r7
   13152:	b006      	add	sp, #24
   13154:	bd80      	pop	{r7, pc}
   13156:	46c0      	nop			; (mov r8, r8)
   13158:	0001a19d 	.word	0x0001a19d
   1315c:	00033740 	.word	0x00033740
   13160:	0001b9a9 	.word	0x0001b9a9
   13164:	00033764 	.word	0x00033764
   13168:	20000364 	.word	0x20000364
   1316c:	00032461 	.word	0x00032461

00013170 <CLI_i2cScan>:
 * @param    p_cli
 * @param    argc
 * @param    argv
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13170:	b590      	push	{r4, r7, lr}
   13172:	b08f      	sub	sp, #60	; 0x3c
   13174:	af00      	add	r7, sp, #0
   13176:	60f8      	str	r0, [r7, #12]
   13178:	60b9      	str	r1, [r7, #8]
   1317a:	607a      	str	r2, [r7, #4]
    I2C_Data i2cDevice;
    uint8_t address;
    // Send 0 command byte
    uint8_t dataOut[2] = {0, 0};
   1317c:	2318      	movs	r3, #24
   1317e:	18fb      	adds	r3, r7, r3
   13180:	2200      	movs	r2, #0
   13182:	701a      	strb	r2, [r3, #0]
   13184:	2318      	movs	r3, #24
   13186:	18fb      	adds	r3, r7, r3
   13188:	2200      	movs	r2, #0
   1318a:	705a      	strb	r2, [r3, #1]
    uint8_t dataIn[2];
    dataOut[0] = 0;
   1318c:	2318      	movs	r3, #24
   1318e:	18fb      	adds	r3, r7, r3
   13190:	2200      	movs	r2, #0
   13192:	701a      	strb	r2, [r3, #0]
    dataOut[1] = 0;
   13194:	2318      	movs	r3, #24
   13196:	18fb      	adds	r3, r7, r3
   13198:	2200      	movs	r2, #0
   1319a:	705a      	strb	r2, [r3, #1]
    i2cDevice.address = 0;
   1319c:	231c      	movs	r3, #28
   1319e:	18fb      	adds	r3, r7, r3
   131a0:	2200      	movs	r2, #0
   131a2:	701a      	strb	r2, [r3, #0]
    i2cDevice.msgIn = (uint8_t *)&dataIn[0];
   131a4:	231c      	movs	r3, #28
   131a6:	18fb      	adds	r3, r7, r3
   131a8:	2214      	movs	r2, #20
   131aa:	18ba      	adds	r2, r7, r2
   131ac:	609a      	str	r2, [r3, #8]
    i2cDevice.lenOut = 1;
   131ae:	231c      	movs	r3, #28
   131b0:	18fb      	adds	r3, r7, r3
   131b2:	2201      	movs	r2, #1
   131b4:	81da      	strh	r2, [r3, #14]
    i2cDevice.msgOut = (const uint8_t *)&dataOut[0];
   131b6:	231c      	movs	r3, #28
   131b8:	18fb      	adds	r3, r7, r3
   131ba:	2218      	movs	r2, #24
   131bc:	18ba      	adds	r2, r7, r2
   131be:	605a      	str	r2, [r3, #4]
    i2cDevice.lenIn = 1;
   131c0:	231c      	movs	r3, #28
   131c2:	18fb      	adds	r3, r7, r3
   131c4:	2201      	movs	r2, #1
   131c6:	819a      	strh	r2, [r3, #12]

    SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   131c8:	4b2c      	ldr	r3, [pc, #176]	; (1327c <CLI_i2cScan+0x10c>)
   131ca:	0018      	movs	r0, r3
   131cc:	4b2c      	ldr	r3, [pc, #176]	; (13280 <CLI_i2cScan+0x110>)
   131ce:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
   131d0:	2300      	movs	r3, #0
   131d2:	637b      	str	r3, [r7, #52]	; 0x34
   131d4:	e046      	b.n	13264 <CLI_i2cScan+0xf4>
        snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   131d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   131d8:	4a2a      	ldr	r2, [pc, #168]	; (13284 <CLI_i2cScan+0x114>)
   131da:	482b      	ldr	r0, [pc, #172]	; (13288 <CLI_i2cScan+0x118>)
   131dc:	210f      	movs	r1, #15
   131de:	4c2b      	ldr	r4, [pc, #172]	; (1328c <CLI_i2cScan+0x11c>)
   131e0:	47a0      	blx	r4
        SerialConsoleWriteString(bufCli);
   131e2:	4b29      	ldr	r3, [pc, #164]	; (13288 <CLI_i2cScan+0x118>)
   131e4:	0018      	movs	r0, r3
   131e6:	4b26      	ldr	r3, [pc, #152]	; (13280 <CLI_i2cScan+0x110>)
   131e8:	4798      	blx	r3

        for (int j = 0; j < 16; j++) {
   131ea:	2300      	movs	r3, #0
   131ec:	633b      	str	r3, [r7, #48]	; 0x30
   131ee:	e02f      	b.n	13250 <CLI_i2cScan+0xe0>
            i2cDevice.address = (i + j) << 1;
   131f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   131f2:	b2da      	uxtb	r2, r3
   131f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   131f6:	b2db      	uxtb	r3, r3
   131f8:	18d3      	adds	r3, r2, r3
   131fa:	b2db      	uxtb	r3, r3
   131fc:	18db      	adds	r3, r3, r3
   131fe:	b2da      	uxtb	r2, r3
   13200:	231c      	movs	r3, #28
   13202:	18fb      	adds	r3, r7, r3
   13204:	701a      	strb	r2, [r3, #0]

            int32_t ret = I2cWriteDataWait(&i2cDevice, 100);
   13206:	231c      	movs	r3, #28
   13208:	18fb      	adds	r3, r7, r3
   1320a:	2164      	movs	r1, #100	; 0x64
   1320c:	0018      	movs	r0, r3
   1320e:	4b20      	ldr	r3, [pc, #128]	; (13290 <CLI_i2cScan+0x120>)
   13210:	4798      	blx	r3
   13212:	0003      	movs	r3, r0
   13214:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (ret == 0) {
   13216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13218:	2b00      	cmp	r3, #0
   1321a:	d10c      	bne.n	13236 <CLI_i2cScan+0xc6>
                snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cDevice.address);
   1321c:	231c      	movs	r3, #28
   1321e:	18fb      	adds	r3, r7, r3
   13220:	781b      	ldrb	r3, [r3, #0]
   13222:	4a18      	ldr	r2, [pc, #96]	; (13284 <CLI_i2cScan+0x114>)
   13224:	4818      	ldr	r0, [pc, #96]	; (13288 <CLI_i2cScan+0x118>)
   13226:	210f      	movs	r1, #15
   13228:	4c18      	ldr	r4, [pc, #96]	; (1328c <CLI_i2cScan+0x11c>)
   1322a:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   1322c:	4b16      	ldr	r3, [pc, #88]	; (13288 <CLI_i2cScan+0x118>)
   1322e:	0018      	movs	r0, r3
   13230:	4b13      	ldr	r3, [pc, #76]	; (13280 <CLI_i2cScan+0x110>)
   13232:	4798      	blx	r3
   13234:	e009      	b.n	1324a <CLI_i2cScan+0xda>
            } else {
                snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   13236:	4b14      	ldr	r3, [pc, #80]	; (13288 <CLI_i2cScan+0x118>)
   13238:	4a16      	ldr	r2, [pc, #88]	; (13294 <CLI_i2cScan+0x124>)
   1323a:	8811      	ldrh	r1, [r2, #0]
   1323c:	8019      	strh	r1, [r3, #0]
   1323e:	7892      	ldrb	r2, [r2, #2]
   13240:	709a      	strb	r2, [r3, #2]
                SerialConsoleWriteString(bufCli);
   13242:	4b11      	ldr	r3, [pc, #68]	; (13288 <CLI_i2cScan+0x118>)
   13244:	0018      	movs	r0, r3
   13246:	4b0e      	ldr	r3, [pc, #56]	; (13280 <CLI_i2cScan+0x110>)
   13248:	4798      	blx	r3
        for (int j = 0; j < 16; j++) {
   1324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1324c:	3301      	adds	r3, #1
   1324e:	633b      	str	r3, [r7, #48]	; 0x30
   13250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13252:	2b0f      	cmp	r3, #15
   13254:	ddcc      	ble.n	131f0 <CLI_i2cScan+0x80>
            }
        }
        SerialConsoleWriteString("\r\n");
   13256:	4b10      	ldr	r3, [pc, #64]	; (13298 <CLI_i2cScan+0x128>)
   13258:	0018      	movs	r0, r3
   1325a:	4b09      	ldr	r3, [pc, #36]	; (13280 <CLI_i2cScan+0x110>)
   1325c:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
   1325e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13260:	3310      	adds	r3, #16
   13262:	637b      	str	r3, [r7, #52]	; 0x34
   13264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13266:	2b7f      	cmp	r3, #127	; 0x7f
   13268:	ddb5      	ble.n	131d6 <CLI_i2cScan+0x66>
    }
    SerialConsoleWriteString("\r\n");
   1326a:	4b0b      	ldr	r3, [pc, #44]	; (13298 <CLI_i2cScan+0x128>)
   1326c:	0018      	movs	r0, r3
   1326e:	4b04      	ldr	r3, [pc, #16]	; (13280 <CLI_i2cScan+0x110>)
   13270:	4798      	blx	r3
    return pdFALSE;
   13272:	2300      	movs	r3, #0
}
   13274:	0018      	movs	r0, r3
   13276:	46bd      	mov	sp, r7
   13278:	b00f      	add	sp, #60	; 0x3c
   1327a:	bd90      	pop	{r4, r7, pc}
   1327c:	0003376c 	.word	0x0003376c
   13280:	0001b9a9 	.word	0x0001b9a9
   13284:	000337a0 	.word	0x000337a0
   13288:	20000364 	.word	0x20000364
   1328c:	000323fd 	.word	0x000323fd
   13290:	00013819 	.word	0x00013819
   13294:	000337a8 	.word	0x000337a8
   13298:	000336fc 	.word	0x000336fc

0001329c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   1329c:	b580      	push	{r7, lr}
   1329e:	b082      	sub	sp, #8
   132a0:	af00      	add	r7, sp, #0
   132a2:	0002      	movs	r2, r0
   132a4:	1dfb      	adds	r3, r7, #7
   132a6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   132a8:	4b06      	ldr	r3, [pc, #24]	; (132c4 <system_interrupt_enable+0x28>)
   132aa:	1dfa      	adds	r2, r7, #7
   132ac:	7812      	ldrb	r2, [r2, #0]
   132ae:	0011      	movs	r1, r2
   132b0:	221f      	movs	r2, #31
   132b2:	400a      	ands	r2, r1
   132b4:	2101      	movs	r1, #1
   132b6:	4091      	lsls	r1, r2
   132b8:	000a      	movs	r2, r1
   132ba:	601a      	str	r2, [r3, #0]
}
   132bc:	46c0      	nop			; (mov r8, r8)
   132be:	46bd      	mov	sp, r7
   132c0:	b002      	add	sp, #8
   132c2:	bd80      	pop	{r7, pc}
   132c4:	e000e100 	.word	0xe000e100

000132c8 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   132c8:	b580      	push	{r7, lr}
   132ca:	b084      	sub	sp, #16
   132cc:	af00      	add	r7, sp, #0
   132ce:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   132d0:	687b      	ldr	r3, [r7, #4]
   132d2:	681b      	ldr	r3, [r3, #0]
   132d4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   132d6:	68fb      	ldr	r3, [r7, #12]
   132d8:	69db      	ldr	r3, [r3, #28]
   132da:	2207      	movs	r2, #7
   132dc:	4013      	ands	r3, r2
   132de:	1e5a      	subs	r2, r3, #1
   132e0:	4193      	sbcs	r3, r2
   132e2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   132e4:	0018      	movs	r0, r3
   132e6:	46bd      	mov	sp, r7
   132e8:	b004      	add	sp, #16
   132ea:	bd80      	pop	{r7, pc}

000132ec <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   132ec:	b580      	push	{r7, lr}
   132ee:	b082      	sub	sp, #8
   132f0:	af00      	add	r7, sp, #0
   132f2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   132f4:	46c0      	nop			; (mov r8, r8)
   132f6:	687b      	ldr	r3, [r7, #4]
   132f8:	0018      	movs	r0, r3
   132fa:	4b04      	ldr	r3, [pc, #16]	; (1330c <_i2c_master_wait_for_sync+0x20>)
   132fc:	4798      	blx	r3
   132fe:	1e03      	subs	r3, r0, #0
   13300:	d1f9      	bne.n	132f6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   13302:	46c0      	nop			; (mov r8, r8)
   13304:	46bd      	mov	sp, r7
   13306:	b002      	add	sp, #8
   13308:	bd80      	pop	{r7, pc}
   1330a:	46c0      	nop			; (mov r8, r8)
   1330c:	000132c9 	.word	0x000132c9

00013310 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   13310:	b580      	push	{r7, lr}
   13312:	b082      	sub	sp, #8
   13314:	af00      	add	r7, sp, #0
   13316:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	2264      	movs	r2, #100	; 0x64
   1331c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   1331e:	687b      	ldr	r3, [r7, #4]
   13320:	4a1b      	ldr	r2, [pc, #108]	; (13390 <i2c_master_get_config_defaults+0x80>)
   13322:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   13324:	687b      	ldr	r3, [r7, #4]
   13326:	2200      	movs	r2, #0
   13328:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   1332a:	687b      	ldr	r3, [r7, #4]
   1332c:	2200      	movs	r2, #0
   1332e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   13330:	687b      	ldr	r3, [r7, #4]
   13332:	2200      	movs	r2, #0
   13334:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   13336:	687b      	ldr	r3, [r7, #4]
   13338:	2280      	movs	r2, #128	; 0x80
   1333a:	0392      	lsls	r2, r2, #14
   1333c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   1333e:	687b      	ldr	r3, [r7, #4]
   13340:	2201      	movs	r2, #1
   13342:	4252      	negs	r2, r2
   13344:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   13346:	687b      	ldr	r3, [r7, #4]
   13348:	2201      	movs	r2, #1
   1334a:	4252      	negs	r2, r2
   1334c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1334e:	687b      	ldr	r3, [r7, #4]
   13350:	2200      	movs	r2, #0
   13352:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   13354:	687b      	ldr	r3, [r7, #4]
   13356:	2200      	movs	r2, #0
   13358:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   1335a:	687b      	ldr	r3, [r7, #4]
   1335c:	2224      	movs	r2, #36	; 0x24
   1335e:	2100      	movs	r1, #0
   13360:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   13362:	687b      	ldr	r3, [r7, #4]
   13364:	2200      	movs	r2, #0
   13366:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   13368:	687b      	ldr	r3, [r7, #4]
   1336a:	222c      	movs	r2, #44	; 0x2c
   1336c:	2100      	movs	r1, #0
   1336e:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   13370:	687b      	ldr	r3, [r7, #4]
   13372:	222d      	movs	r2, #45	; 0x2d
   13374:	2100      	movs	r1, #0
   13376:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   13378:	687b      	ldr	r3, [r7, #4]
   1337a:	222e      	movs	r2, #46	; 0x2e
   1337c:	2100      	movs	r1, #0
   1337e:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13380:	687b      	ldr	r3, [r7, #4]
   13382:	22d7      	movs	r2, #215	; 0xd7
   13384:	861a      	strh	r2, [r3, #48]	; 0x30
}
   13386:	46c0      	nop			; (mov r8, r8)
   13388:	46bd      	mov	sp, r7
   1338a:	b002      	add	sp, #8
   1338c:	bd80      	pop	{r7, pc}
   1338e:	46c0      	nop			; (mov r8, r8)
   13390:	00000d48 	.word	0x00000d48

00013394 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   13394:	b580      	push	{r7, lr}
   13396:	b084      	sub	sp, #16
   13398:	af00      	add	r7, sp, #0
   1339a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1339c:	687b      	ldr	r3, [r7, #4]
   1339e:	681b      	ldr	r3, [r3, #0]
   133a0:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   133a2:	2300      	movs	r3, #0
   133a4:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   133a6:	687b      	ldr	r3, [r7, #4]
   133a8:	0018      	movs	r0, r3
   133aa:	4b14      	ldr	r3, [pc, #80]	; (133fc <i2c_master_enable+0x68>)
   133ac:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   133ae:	68bb      	ldr	r3, [r7, #8]
   133b0:	681b      	ldr	r3, [r3, #0]
   133b2:	2202      	movs	r2, #2
   133b4:	431a      	orrs	r2, r3
   133b6:	68bb      	ldr	r3, [r7, #8]
   133b8:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   133ba:	687b      	ldr	r3, [r7, #4]
   133bc:	681b      	ldr	r3, [r3, #0]
   133be:	0018      	movs	r0, r3
   133c0:	4b0f      	ldr	r3, [pc, #60]	; (13400 <i2c_master_enable+0x6c>)
   133c2:	4798      	blx	r3
   133c4:	0003      	movs	r3, r0
   133c6:	0018      	movs	r0, r3
   133c8:	4b0e      	ldr	r3, [pc, #56]	; (13404 <i2c_master_enable+0x70>)
   133ca:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   133cc:	e00c      	b.n	133e8 <i2c_master_enable+0x54>
		timeout_counter++;
   133ce:	68fb      	ldr	r3, [r7, #12]
   133d0:	3301      	adds	r3, #1
   133d2:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   133d4:	687b      	ldr	r3, [r7, #4]
   133d6:	88db      	ldrh	r3, [r3, #6]
   133d8:	001a      	movs	r2, r3
   133da:	68fb      	ldr	r3, [r7, #12]
   133dc:	429a      	cmp	r2, r3
   133de:	d803      	bhi.n	133e8 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   133e0:	68bb      	ldr	r3, [r7, #8]
   133e2:	2210      	movs	r2, #16
   133e4:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   133e6:	e006      	b.n	133f6 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   133e8:	68bb      	ldr	r3, [r7, #8]
   133ea:	8b5b      	ldrh	r3, [r3, #26]
   133ec:	b29b      	uxth	r3, r3
   133ee:	001a      	movs	r2, r3
   133f0:	2310      	movs	r3, #16
   133f2:	4013      	ands	r3, r2
   133f4:	d0eb      	beq.n	133ce <i2c_master_enable+0x3a>
		}
	}
}
   133f6:	46bd      	mov	sp, r7
   133f8:	b004      	add	sp, #16
   133fa:	bd80      	pop	{r7, pc}
   133fc:	000132ed 	.word	0x000132ed
   13400:	000252bd 	.word	0x000252bd
   13404:	0001329d 	.word	0x0001329d

00013408 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   13408:	b580      	push	{r7, lr}
   1340a:	b082      	sub	sp, #8
   1340c:	af00      	add	r7, sp, #0
   1340e:	6078      	str	r0, [r7, #4]
   13410:	000a      	movs	r2, r1
   13412:	1cfb      	adds	r3, r7, #3
   13414:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   13416:	687b      	ldr	r3, [r7, #4]
   13418:	7e5b      	ldrb	r3, [r3, #25]
   1341a:	b2db      	uxtb	r3, r3
   1341c:	b25a      	sxtb	r2, r3
   1341e:	1cfb      	adds	r3, r7, #3
   13420:	781b      	ldrb	r3, [r3, #0]
   13422:	2101      	movs	r1, #1
   13424:	4099      	lsls	r1, r3
   13426:	000b      	movs	r3, r1
   13428:	b25b      	sxtb	r3, r3
   1342a:	4313      	orrs	r3, r2
   1342c:	b25b      	sxtb	r3, r3
   1342e:	b2da      	uxtb	r2, r3
   13430:	687b      	ldr	r3, [r7, #4]
   13432:	765a      	strb	r2, [r3, #25]
}
   13434:	46c0      	nop			; (mov r8, r8)
   13436:	46bd      	mov	sp, r7
   13438:	b002      	add	sp, #8
   1343a:	bd80      	pop	{r7, pc}

0001343c <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   1343c:	b590      	push	{r4, r7, lr}
   1343e:	b091      	sub	sp, #68	; 0x44
   13440:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13442:	2300      	movs	r3, #0
   13444:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   13446:	233a      	movs	r3, #58	; 0x3a
   13448:	18fb      	adds	r3, r7, r3
   1344a:	2200      	movs	r2, #0
   1344c:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   1344e:	1d3b      	adds	r3, r7, #4
   13450:	0018      	movs	r0, r3
   13452:	4b21      	ldr	r3, [pc, #132]	; (134d8 <I2cDriverConfigureSensorBus+0x9c>)
   13454:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   13456:	1d3b      	adds	r3, r7, #4
   13458:	4a20      	ldr	r2, [pc, #128]	; (134dc <I2cDriverConfigureSensorBus+0xa0>)
   1345a:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   1345c:	1d3b      	adds	r3, r7, #4
   1345e:	4a20      	ldr	r2, [pc, #128]	; (134e0 <I2cDriverConfigureSensorBus+0xa4>)
   13460:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   13462:	1d3b      	adds	r3, r7, #4
   13464:	22fa      	movs	r2, #250	; 0xfa
   13466:	0092      	lsls	r2, r2, #2
   13468:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   1346a:	233b      	movs	r3, #59	; 0x3b
   1346c:	18fb      	adds	r3, r7, r3
   1346e:	2203      	movs	r2, #3
   13470:	701a      	strb	r2, [r3, #0]
   13472:	e01e      	b.n	134b2 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   13474:	233a      	movs	r3, #58	; 0x3a
   13476:	18fc      	adds	r4, r7, r3
   13478:	1d3a      	adds	r2, r7, #4
   1347a:	491a      	ldr	r1, [pc, #104]	; (134e4 <I2cDriverConfigureSensorBus+0xa8>)
   1347c:	4b1a      	ldr	r3, [pc, #104]	; (134e8 <I2cDriverConfigureSensorBus+0xac>)
   1347e:	0018      	movs	r0, r3
   13480:	4b1a      	ldr	r3, [pc, #104]	; (134ec <I2cDriverConfigureSensorBus+0xb0>)
   13482:	4798      	blx	r3
   13484:	0003      	movs	r3, r0
   13486:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   13488:	233a      	movs	r3, #58	; 0x3a
   1348a:	18fb      	adds	r3, r7, r3
   1348c:	781b      	ldrb	r3, [r3, #0]
   1348e:	2b00      	cmp	r3, #0
   13490:	d104      	bne.n	1349c <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   13492:	233a      	movs	r3, #58	; 0x3a
   13494:	18fb      	adds	r3, r7, r3
   13496:	781b      	ldrb	r3, [r3, #0]
   13498:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   1349a:	e00f      	b.n	134bc <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   1349c:	4b12      	ldr	r3, [pc, #72]	; (134e8 <I2cDriverConfigureSensorBus+0xac>)
   1349e:	0018      	movs	r0, r3
   134a0:	4b13      	ldr	r3, [pc, #76]	; (134f0 <I2cDriverConfigureSensorBus+0xb4>)
   134a2:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   134a4:	233b      	movs	r3, #59	; 0x3b
   134a6:	18fb      	adds	r3, r7, r3
   134a8:	781a      	ldrb	r2, [r3, #0]
   134aa:	233b      	movs	r3, #59	; 0x3b
   134ac:	18fb      	adds	r3, r7, r3
   134ae:	3a01      	subs	r2, #1
   134b0:	701a      	strb	r2, [r3, #0]
   134b2:	233b      	movs	r3, #59	; 0x3b
   134b4:	18fb      	adds	r3, r7, r3
   134b6:	781b      	ldrb	r3, [r3, #0]
   134b8:	2b00      	cmp	r3, #0
   134ba:	d1db      	bne.n	13474 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   134bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   134be:	2b00      	cmp	r3, #0
   134c0:	d104      	bne.n	134cc <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   134c2:	4b09      	ldr	r3, [pc, #36]	; (134e8 <I2cDriverConfigureSensorBus+0xac>)
   134c4:	0018      	movs	r0, r3
   134c6:	4b0b      	ldr	r3, [pc, #44]	; (134f4 <I2cDriverConfigureSensorBus+0xb8>)
   134c8:	4798      	blx	r3
   134ca:	e000      	b.n	134ce <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   134cc:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   134ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   134d0:	0018      	movs	r0, r3
   134d2:	46bd      	mov	sp, r7
   134d4:	b011      	add	sp, #68	; 0x44
   134d6:	bd90      	pop	{r4, r7, pc}
   134d8:	00013311 	.word	0x00013311
   134dc:	00080002 	.word	0x00080002
   134e0:	00090002 	.word	0x00090002
   134e4:	42000800 	.word	0x42000800
   134e8:	200041e8 	.word	0x200041e8
   134ec:	00015741 	.word	0x00015741
   134f0:	00015875 	.word	0x00015875
   134f4:	00013395 	.word	0x00013395

000134f8 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   134f8:	b580      	push	{r7, lr}
   134fa:	b084      	sub	sp, #16
   134fc:	af00      	add	r7, sp, #0
   134fe:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13500:	4b0e      	ldr	r3, [pc, #56]	; (1353c <I2cSensorsTxComplete+0x44>)
   13502:	2200      	movs	r2, #0
   13504:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13506:	4b0d      	ldr	r3, [pc, #52]	; (1353c <I2cSensorsTxComplete+0x44>)
   13508:	2201      	movs	r2, #1
   1350a:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1350c:	2300      	movs	r3, #0
   1350e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13510:	4b0b      	ldr	r3, [pc, #44]	; (13540 <I2cSensorsTxComplete+0x48>)
   13512:	681b      	ldr	r3, [r3, #0]
   13514:	220c      	movs	r2, #12
   13516:	18ba      	adds	r2, r7, r2
   13518:	0011      	movs	r1, r2
   1351a:	0018      	movs	r0, r3
   1351c:	4b09      	ldr	r3, [pc, #36]	; (13544 <I2cSensorsTxComplete+0x4c>)
   1351e:	4798      	blx	r3
    sensorTransmitError = false;
   13520:	4b09      	ldr	r3, [pc, #36]	; (13548 <I2cSensorsTxComplete+0x50>)
   13522:	2200      	movs	r2, #0
   13524:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13526:	68fb      	ldr	r3, [r7, #12]
   13528:	2b00      	cmp	r3, #0
   1352a:	d003      	beq.n	13534 <I2cSensorsTxComplete+0x3c>
   1352c:	4b07      	ldr	r3, [pc, #28]	; (1354c <I2cSensorsTxComplete+0x54>)
   1352e:	2280      	movs	r2, #128	; 0x80
   13530:	0552      	lsls	r2, r2, #21
   13532:	601a      	str	r2, [r3, #0]
}
   13534:	46c0      	nop			; (mov r8, r8)
   13536:	46bd      	mov	sp, r7
   13538:	b004      	add	sp, #16
   1353a:	bd80      	pop	{r7, pc}
   1353c:	20000450 	.word	0x20000450
   13540:	20004210 	.word	0x20004210
   13544:	00018979 	.word	0x00018979
   13548:	2000044c 	.word	0x2000044c
   1354c:	e000ed04 	.word	0xe000ed04

00013550 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   13550:	b580      	push	{r7, lr}
   13552:	b084      	sub	sp, #16
   13554:	af00      	add	r7, sp, #0
   13556:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13558:	4b0e      	ldr	r3, [pc, #56]	; (13594 <I2cSensorsRxComplete+0x44>)
   1355a:	2200      	movs	r2, #0
   1355c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   1355e:	4b0d      	ldr	r3, [pc, #52]	; (13594 <I2cSensorsRxComplete+0x44>)
   13560:	2201      	movs	r2, #1
   13562:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13564:	2300      	movs	r3, #0
   13566:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13568:	4b0b      	ldr	r3, [pc, #44]	; (13598 <I2cSensorsRxComplete+0x48>)
   1356a:	681b      	ldr	r3, [r3, #0]
   1356c:	220c      	movs	r2, #12
   1356e:	18ba      	adds	r2, r7, r2
   13570:	0011      	movs	r1, r2
   13572:	0018      	movs	r0, r3
   13574:	4b09      	ldr	r3, [pc, #36]	; (1359c <I2cSensorsRxComplete+0x4c>)
   13576:	4798      	blx	r3
    sensorTransmitError = false;
   13578:	4b09      	ldr	r3, [pc, #36]	; (135a0 <I2cSensorsRxComplete+0x50>)
   1357a:	2200      	movs	r2, #0
   1357c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1357e:	68fb      	ldr	r3, [r7, #12]
   13580:	2b00      	cmp	r3, #0
   13582:	d003      	beq.n	1358c <I2cSensorsRxComplete+0x3c>
   13584:	4b07      	ldr	r3, [pc, #28]	; (135a4 <I2cSensorsRxComplete+0x54>)
   13586:	2280      	movs	r2, #128	; 0x80
   13588:	0552      	lsls	r2, r2, #21
   1358a:	601a      	str	r2, [r3, #0]
}
   1358c:	46c0      	nop			; (mov r8, r8)
   1358e:	46bd      	mov	sp, r7
   13590:	b004      	add	sp, #16
   13592:	bd80      	pop	{r7, pc}
   13594:	20000450 	.word	0x20000450
   13598:	20004210 	.word	0x20004210
   1359c:	00018979 	.word	0x00018979
   135a0:	2000044c 	.word	0x2000044c
   135a4:	e000ed04 	.word	0xe000ed04

000135a8 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   135a8:	b580      	push	{r7, lr}
   135aa:	b084      	sub	sp, #16
   135ac:	af00      	add	r7, sp, #0
   135ae:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   135b0:	4b0e      	ldr	r3, [pc, #56]	; (135ec <I2cSensorsError+0x44>)
   135b2:	2200      	movs	r2, #0
   135b4:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   135b6:	4b0d      	ldr	r3, [pc, #52]	; (135ec <I2cSensorsError+0x44>)
   135b8:	2201      	movs	r2, #1
   135ba:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   135bc:	2300      	movs	r3, #0
   135be:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   135c0:	4b0b      	ldr	r3, [pc, #44]	; (135f0 <I2cSensorsError+0x48>)
   135c2:	681b      	ldr	r3, [r3, #0]
   135c4:	220c      	movs	r2, #12
   135c6:	18ba      	adds	r2, r7, r2
   135c8:	0011      	movs	r1, r2
   135ca:	0018      	movs	r0, r3
   135cc:	4b09      	ldr	r3, [pc, #36]	; (135f4 <I2cSensorsError+0x4c>)
   135ce:	4798      	blx	r3
    sensorTransmitError = true;
   135d0:	4b09      	ldr	r3, [pc, #36]	; (135f8 <I2cSensorsError+0x50>)
   135d2:	2201      	movs	r2, #1
   135d4:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   135d6:	68fb      	ldr	r3, [r7, #12]
   135d8:	2b00      	cmp	r3, #0
   135da:	d003      	beq.n	135e4 <I2cSensorsError+0x3c>
   135dc:	4b07      	ldr	r3, [pc, #28]	; (135fc <I2cSensorsError+0x54>)
   135de:	2280      	movs	r2, #128	; 0x80
   135e0:	0552      	lsls	r2, r2, #21
   135e2:	601a      	str	r2, [r3, #0]
}
   135e4:	46c0      	nop			; (mov r8, r8)
   135e6:	46bd      	mov	sp, r7
   135e8:	b004      	add	sp, #16
   135ea:	bd80      	pop	{r7, pc}
   135ec:	20000450 	.word	0x20000450
   135f0:	20004210 	.word	0x20004210
   135f4:	00018979 	.word	0x00018979
   135f8:	2000044c 	.word	0x2000044c
   135fc:	e000ed04 	.word	0xe000ed04

00013600 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   13600:	b580      	push	{r7, lr}
   13602:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13604:	4911      	ldr	r1, [pc, #68]	; (1364c <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   13606:	4b12      	ldr	r3, [pc, #72]	; (13650 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13608:	2200      	movs	r2, #0
   1360a:	0018      	movs	r0, r3
   1360c:	4b11      	ldr	r3, [pc, #68]	; (13654 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1360e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13610:	4b0f      	ldr	r3, [pc, #60]	; (13650 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13612:	2100      	movs	r1, #0
   13614:	0018      	movs	r0, r3
   13616:	4b10      	ldr	r3, [pc, #64]	; (13658 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13618:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   1361a:	4910      	ldr	r1, [pc, #64]	; (1365c <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   1361c:	4b0c      	ldr	r3, [pc, #48]	; (13650 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1361e:	2201      	movs	r2, #1
   13620:	0018      	movs	r0, r3
   13622:	4b0c      	ldr	r3, [pc, #48]	; (13654 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13624:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13626:	4b0a      	ldr	r3, [pc, #40]	; (13650 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13628:	2101      	movs	r1, #1
   1362a:	0018      	movs	r0, r3
   1362c:	4b0a      	ldr	r3, [pc, #40]	; (13658 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   1362e:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   13630:	490b      	ldr	r1, [pc, #44]	; (13660 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   13632:	4b07      	ldr	r3, [pc, #28]	; (13650 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13634:	2202      	movs	r2, #2
   13636:	0018      	movs	r0, r3
   13638:	4b06      	ldr	r3, [pc, #24]	; (13654 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1363a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   1363c:	4b04      	ldr	r3, [pc, #16]	; (13650 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1363e:	2102      	movs	r1, #2
   13640:	0018      	movs	r0, r3
   13642:	4b05      	ldr	r3, [pc, #20]	; (13658 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13644:	4798      	blx	r3
}
   13646:	46c0      	nop			; (mov r8, r8)
   13648:	46bd      	mov	sp, r7
   1364a:	bd80      	pop	{r7, pc}
   1364c:	000134f9 	.word	0x000134f9
   13650:	200041e8 	.word	0x200041e8
   13654:	00012909 	.word	0x00012909
   13658:	00013409 	.word	0x00013409
   1365c:	00013551 	.word	0x00013551
   13660:	000135a9 	.word	0x000135a9

00013664 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   13664:	b580      	push	{r7, lr}
   13666:	b082      	sub	sp, #8
   13668:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   1366a:	2300      	movs	r3, #0
   1366c:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   1366e:	4b14      	ldr	r3, [pc, #80]	; (136c0 <I2cInitializeDriver+0x5c>)
   13670:	4798      	blx	r3
   13672:	0003      	movs	r3, r0
   13674:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   13676:	687b      	ldr	r3, [r7, #4]
   13678:	2b00      	cmp	r3, #0
   1367a:	d11a      	bne.n	136b2 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   1367c:	4b11      	ldr	r3, [pc, #68]	; (136c4 <I2cInitializeDriver+0x60>)
   1367e:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   13680:	2001      	movs	r0, #1
   13682:	4b11      	ldr	r3, [pc, #68]	; (136c8 <I2cInitializeDriver+0x64>)
   13684:	4798      	blx	r3
   13686:	0002      	movs	r2, r0
   13688:	4b10      	ldr	r3, [pc, #64]	; (136cc <I2cInitializeDriver+0x68>)
   1368a:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   1368c:	2203      	movs	r2, #3
   1368e:	2100      	movs	r1, #0
   13690:	2001      	movs	r0, #1
   13692:	4b0f      	ldr	r3, [pc, #60]	; (136d0 <I2cInitializeDriver+0x6c>)
   13694:	4798      	blx	r3
   13696:	0002      	movs	r2, r0
   13698:	4b0e      	ldr	r3, [pc, #56]	; (136d4 <I2cInitializeDriver+0x70>)
   1369a:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   1369c:	4b0b      	ldr	r3, [pc, #44]	; (136cc <I2cInitializeDriver+0x68>)
   1369e:	681b      	ldr	r3, [r3, #0]
   136a0:	2b00      	cmp	r3, #0
   136a2:	d003      	beq.n	136ac <I2cInitializeDriver+0x48>
   136a4:	4b0b      	ldr	r3, [pc, #44]	; (136d4 <I2cInitializeDriver+0x70>)
   136a6:	681b      	ldr	r3, [r3, #0]
   136a8:	2b00      	cmp	r3, #0
   136aa:	d103      	bne.n	136b4 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   136ac:	2306      	movs	r3, #6
   136ae:	607b      	str	r3, [r7, #4]
        goto exit;
   136b0:	e000      	b.n	136b4 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   136b2:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   136b4:	687b      	ldr	r3, [r7, #4]
}
   136b6:	0018      	movs	r0, r3
   136b8:	46bd      	mov	sp, r7
   136ba:	b002      	add	sp, #8
   136bc:	bd80      	pop	{r7, pc}
   136be:	46c0      	nop			; (mov r8, r8)
   136c0:	0001343d 	.word	0x0001343d
   136c4:	00013601 	.word	0x00013601
   136c8:	000182b1 	.word	0x000182b1
   136cc:	200041e4 	.word	0x200041e4
   136d0:	00018049 	.word	0x00018049
   136d4:	20004210 	.word	0x20004210

000136d8 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   136d8:	b590      	push	{r4, r7, lr}
   136da:	b085      	sub	sp, #20
   136dc:	af00      	add	r7, sp, #0
   136de:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   136e0:	2300      	movs	r3, #0
   136e2:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   136e4:	687b      	ldr	r3, [r7, #4]
   136e6:	2b00      	cmp	r3, #0
   136e8:	d003      	beq.n	136f2 <I2cWriteData+0x1a>
   136ea:	687b      	ldr	r3, [r7, #4]
   136ec:	685b      	ldr	r3, [r3, #4]
   136ee:	2b00      	cmp	r3, #0
   136f0:	d103      	bne.n	136fa <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   136f2:	2308      	movs	r3, #8
   136f4:	425b      	negs	r3, r3
   136f6:	60fb      	str	r3, [r7, #12]
        goto exit;
   136f8:	e01f      	b.n	1373a <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   136fa:	687b      	ldr	r3, [r7, #4]
   136fc:	781b      	ldrb	r3, [r3, #0]
   136fe:	b29a      	uxth	r2, r3
   13700:	4b10      	ldr	r3, [pc, #64]	; (13744 <I2cWriteData+0x6c>)
   13702:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   13704:	687b      	ldr	r3, [r7, #4]
   13706:	685a      	ldr	r2, [r3, #4]
   13708:	4b0e      	ldr	r3, [pc, #56]	; (13744 <I2cWriteData+0x6c>)
   1370a:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   1370c:	687b      	ldr	r3, [r7, #4]
   1370e:	89da      	ldrh	r2, [r3, #14]
   13710:	4b0c      	ldr	r3, [pc, #48]	; (13744 <I2cWriteData+0x6c>)
   13712:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13714:	230b      	movs	r3, #11
   13716:	18fc      	adds	r4, r7, r3
   13718:	4a0a      	ldr	r2, [pc, #40]	; (13744 <I2cWriteData+0x6c>)
   1371a:	4b0b      	ldr	r3, [pc, #44]	; (13748 <I2cWriteData+0x70>)
   1371c:	0011      	movs	r1, r2
   1371e:	0018      	movs	r0, r3
   13720:	4b0a      	ldr	r3, [pc, #40]	; (1374c <I2cWriteData+0x74>)
   13722:	4798      	blx	r3
   13724:	0003      	movs	r3, r0
   13726:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13728:	230b      	movs	r3, #11
   1372a:	18fb      	adds	r3, r7, r3
   1372c:	781b      	ldrb	r3, [r3, #0]
   1372e:	2b00      	cmp	r3, #0
   13730:	d003      	beq.n	1373a <I2cWriteData+0x62>
        error = ERROR_IO;
   13732:	2306      	movs	r3, #6
   13734:	425b      	negs	r3, r3
   13736:	60fb      	str	r3, [r7, #12]
        goto exit;
   13738:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   1373a:	68fb      	ldr	r3, [r7, #12]
}
   1373c:	0018      	movs	r0, r3
   1373e:	46bd      	mov	sp, r7
   13740:	b005      	add	sp, #20
   13742:	bd90      	pop	{r4, r7, pc}
   13744:	20004214 	.word	0x20004214
   13748:	200041e8 	.word	0x200041e8
   1374c:	000129f5 	.word	0x000129f5

00013750 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   13750:	b590      	push	{r4, r7, lr}
   13752:	b083      	sub	sp, #12
   13754:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   13756:	2300      	movs	r3, #0
   13758:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   1375a:	4b09      	ldr	r3, [pc, #36]	; (13780 <I2cFreeMutex+0x30>)
   1375c:	6818      	ldr	r0, [r3, #0]
   1375e:	2300      	movs	r3, #0
   13760:	2200      	movs	r2, #0
   13762:	2100      	movs	r1, #0
   13764:	4c07      	ldr	r4, [pc, #28]	; (13784 <I2cFreeMutex+0x34>)
   13766:	47a0      	blx	r4
   13768:	0003      	movs	r3, r0
   1376a:	2b01      	cmp	r3, #1
   1376c:	d002      	beq.n	13774 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   1376e:	2314      	movs	r3, #20
   13770:	425b      	negs	r3, r3
   13772:	607b      	str	r3, [r7, #4]
    }
    return error;
   13774:	687b      	ldr	r3, [r7, #4]
}
   13776:	0018      	movs	r0, r3
   13778:	46bd      	mov	sp, r7
   1377a:	b003      	add	sp, #12
   1377c:	bd90      	pop	{r4, r7, pc}
   1377e:	46c0      	nop			; (mov r8, r8)
   13780:	200041e4 	.word	0x200041e4
   13784:	000182f1 	.word	0x000182f1

00013788 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   13788:	b580      	push	{r7, lr}
   1378a:	b084      	sub	sp, #16
   1378c:	af00      	add	r7, sp, #0
   1378e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13790:	2300      	movs	r3, #0
   13792:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   13794:	4b08      	ldr	r3, [pc, #32]	; (137b8 <I2cGetMutex+0x30>)
   13796:	681b      	ldr	r3, [r3, #0]
   13798:	687a      	ldr	r2, [r7, #4]
   1379a:	0011      	movs	r1, r2
   1379c:	0018      	movs	r0, r3
   1379e:	4b07      	ldr	r3, [pc, #28]	; (137bc <I2cGetMutex+0x34>)
   137a0:	4798      	blx	r3
   137a2:	0003      	movs	r3, r0
   137a4:	2b01      	cmp	r3, #1
   137a6:	d002      	beq.n	137ae <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   137a8:	231d      	movs	r3, #29
   137aa:	425b      	negs	r3, r3
   137ac:	60fb      	str	r3, [r7, #12]
    }
    return error;
   137ae:	68fb      	ldr	r3, [r7, #12]
}
   137b0:	0018      	movs	r0, r3
   137b2:	46bd      	mov	sp, r7
   137b4:	b004      	add	sp, #16
   137b6:	bd80      	pop	{r7, pc}
   137b8:	200041e4 	.word	0x200041e4
   137bc:	00019001 	.word	0x00019001

000137c0 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   137c0:	b580      	push	{r7, lr}
   137c2:	b084      	sub	sp, #16
   137c4:	af00      	add	r7, sp, #0
   137c6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   137c8:	2300      	movs	r3, #0
   137ca:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   137cc:	4b04      	ldr	r3, [pc, #16]	; (137e0 <I2cGetSemaphoreHandle+0x20>)
   137ce:	681a      	ldr	r2, [r3, #0]
   137d0:	687b      	ldr	r3, [r7, #4]
   137d2:	601a      	str	r2, [r3, #0]
    return error;
   137d4:	68fb      	ldr	r3, [r7, #12]
}
   137d6:	0018      	movs	r0, r3
   137d8:	46bd      	mov	sp, r7
   137da:	b004      	add	sp, #16
   137dc:	bd80      	pop	{r7, pc}
   137de:	46c0      	nop			; (mov r8, r8)
   137e0:	20004210 	.word	0x20004210

000137e4 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   137e4:	b580      	push	{r7, lr}
   137e6:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   137e8:	4b02      	ldr	r3, [pc, #8]	; (137f4 <I2cGetTaskErrorStatus+0x10>)
   137ea:	781b      	ldrb	r3, [r3, #0]
}
   137ec:	0018      	movs	r0, r3
   137ee:	46bd      	mov	sp, r7
   137f0:	bd80      	pop	{r7, pc}
   137f2:	46c0      	nop			; (mov r8, r8)
   137f4:	2000044c 	.word	0x2000044c

000137f8 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   137f8:	b580      	push	{r7, lr}
   137fa:	b082      	sub	sp, #8
   137fc:	af00      	add	r7, sp, #0
   137fe:	0002      	movs	r2, r0
   13800:	1dfb      	adds	r3, r7, #7
   13802:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   13804:	4b03      	ldr	r3, [pc, #12]	; (13814 <I2cSetTaskErrorStatus+0x1c>)
   13806:	1dfa      	adds	r2, r7, #7
   13808:	7812      	ldrb	r2, [r2, #0]
   1380a:	701a      	strb	r2, [r3, #0]
}
   1380c:	46c0      	nop			; (mov r8, r8)
   1380e:	46bd      	mov	sp, r7
   13810:	b002      	add	sp, #8
   13812:	bd80      	pop	{r7, pc}
   13814:	2000044c 	.word	0x2000044c

00013818 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   13818:	b580      	push	{r7, lr}
   1381a:	b084      	sub	sp, #16
   1381c:	af00      	add	r7, sp, #0
   1381e:	6078      	str	r0, [r7, #4]
   13820:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   13822:	2300      	movs	r3, #0
   13824:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   13826:	2300      	movs	r3, #0
   13828:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   1382a:	2396      	movs	r3, #150	; 0x96
   1382c:	005b      	lsls	r3, r3, #1
   1382e:	0018      	movs	r0, r3
   13830:	4b28      	ldr	r3, [pc, #160]	; (138d4 <I2cWriteDataWait+0xbc>)
   13832:	4798      	blx	r3
   13834:	0003      	movs	r3, r0
   13836:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   13838:	68fb      	ldr	r3, [r7, #12]
   1383a:	2b00      	cmp	r3, #0
   1383c:	d138      	bne.n	138b0 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   1383e:	2308      	movs	r3, #8
   13840:	18fb      	adds	r3, r7, r3
   13842:	0018      	movs	r0, r3
   13844:	4b24      	ldr	r3, [pc, #144]	; (138d8 <I2cWriteDataWait+0xc0>)
   13846:	4798      	blx	r3
   13848:	0003      	movs	r3, r0
   1384a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   1384c:	68fb      	ldr	r3, [r7, #12]
   1384e:	2b00      	cmp	r3, #0
   13850:	d130      	bne.n	138b4 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   13852:	687b      	ldr	r3, [r7, #4]
   13854:	0018      	movs	r0, r3
   13856:	4b21      	ldr	r3, [pc, #132]	; (138dc <I2cWriteDataWait+0xc4>)
   13858:	4798      	blx	r3
   1385a:	0003      	movs	r3, r0
   1385c:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   1385e:	68fb      	ldr	r3, [r7, #12]
   13860:	2b00      	cmp	r3, #0
   13862:	d12a      	bne.n	138ba <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13864:	68bb      	ldr	r3, [r7, #8]
   13866:	683a      	ldr	r2, [r7, #0]
   13868:	0011      	movs	r1, r2
   1386a:	0018      	movs	r0, r3
   1386c:	4b1c      	ldr	r3, [pc, #112]	; (138e0 <I2cWriteDataWait+0xc8>)
   1386e:	4798      	blx	r3
   13870:	0003      	movs	r3, r0
   13872:	2b01      	cmp	r3, #1
   13874:	d111      	bne.n	1389a <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   13876:	4b1b      	ldr	r3, [pc, #108]	; (138e4 <I2cWriteDataWait+0xcc>)
   13878:	4798      	blx	r3
   1387a:	1e03      	subs	r3, r0, #0
   1387c:	d011      	beq.n	138a2 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   1387e:	2000      	movs	r0, #0
   13880:	4b19      	ldr	r3, [pc, #100]	; (138e8 <I2cWriteDataWait+0xd0>)
   13882:	4798      	blx	r3
            if (error != ERROR_NONE) {
   13884:	68fb      	ldr	r3, [r7, #12]
   13886:	2b00      	cmp	r3, #0
   13888:	d003      	beq.n	13892 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   1388a:	2321      	movs	r3, #33	; 0x21
   1388c:	425b      	negs	r3, r3
   1388e:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   13890:	e014      	b.n	138bc <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   13892:	2303      	movs	r3, #3
   13894:	425b      	negs	r3, r3
   13896:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   13898:	e010      	b.n	138bc <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1389a:	2303      	movs	r3, #3
   1389c:	425b      	negs	r3, r3
   1389e:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   138a0:	e00c      	b.n	138bc <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   138a2:	4b12      	ldr	r3, [pc, #72]	; (138ec <I2cWriteDataWait+0xd4>)
   138a4:	4798      	blx	r3
   138a6:	0002      	movs	r2, r0
   138a8:	68fb      	ldr	r3, [r7, #12]
   138aa:	4313      	orrs	r3, r2
   138ac:	60fb      	str	r3, [r7, #12]
   138ae:	e002      	b.n	138b6 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   138b0:	46c0      	nop			; (mov r8, r8)
   138b2:	e000      	b.n	138b6 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   138b4:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   138b6:	68fb      	ldr	r3, [r7, #12]
   138b8:	e007      	b.n	138ca <I2cWriteDataWait+0xb2>
        goto exitError0;
   138ba:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   138bc:	4b0b      	ldr	r3, [pc, #44]	; (138ec <I2cWriteDataWait+0xd4>)
   138be:	4798      	blx	r3
   138c0:	0002      	movs	r2, r0
   138c2:	68fb      	ldr	r3, [r7, #12]
   138c4:	4313      	orrs	r3, r2
   138c6:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   138c8:	68fb      	ldr	r3, [r7, #12]
}
   138ca:	0018      	movs	r0, r3
   138cc:	46bd      	mov	sp, r7
   138ce:	b004      	add	sp, #16
   138d0:	bd80      	pop	{r7, pc}
   138d2:	46c0      	nop			; (mov r8, r8)
   138d4:	00013789 	.word	0x00013789
   138d8:	000137c1 	.word	0x000137c1
   138dc:	000136d9 	.word	0x000136d9
   138e0:	00019001 	.word	0x00019001
   138e4:	000137e5 	.word	0x000137e5
   138e8:	000137f9 	.word	0x000137f9
   138ec:	00013751 	.word	0x00013751

000138f0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   138f0:	b580      	push	{r7, lr}
   138f2:	b084      	sub	sp, #16
   138f4:	af00      	add	r7, sp, #0
   138f6:	0002      	movs	r2, r0
   138f8:	1dfb      	adds	r3, r7, #7
   138fa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   138fc:	230f      	movs	r3, #15
   138fe:	18fb      	adds	r3, r7, r3
   13900:	1dfa      	adds	r2, r7, #7
   13902:	7812      	ldrb	r2, [r2, #0]
   13904:	09d2      	lsrs	r2, r2, #7
   13906:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13908:	230e      	movs	r3, #14
   1390a:	18fb      	adds	r3, r7, r3
   1390c:	1dfa      	adds	r2, r7, #7
   1390e:	7812      	ldrb	r2, [r2, #0]
   13910:	0952      	lsrs	r2, r2, #5
   13912:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13914:	4b0d      	ldr	r3, [pc, #52]	; (1394c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13916:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   13918:	230f      	movs	r3, #15
   1391a:	18fb      	adds	r3, r7, r3
   1391c:	781b      	ldrb	r3, [r3, #0]
   1391e:	2b00      	cmp	r3, #0
   13920:	d10f      	bne.n	13942 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13922:	230f      	movs	r3, #15
   13924:	18fb      	adds	r3, r7, r3
   13926:	781b      	ldrb	r3, [r3, #0]
   13928:	009b      	lsls	r3, r3, #2
   1392a:	2210      	movs	r2, #16
   1392c:	4694      	mov	ip, r2
   1392e:	44bc      	add	ip, r7
   13930:	4463      	add	r3, ip
   13932:	3b08      	subs	r3, #8
   13934:	681a      	ldr	r2, [r3, #0]
   13936:	230e      	movs	r3, #14
   13938:	18fb      	adds	r3, r7, r3
   1393a:	781b      	ldrb	r3, [r3, #0]
   1393c:	01db      	lsls	r3, r3, #7
   1393e:	18d3      	adds	r3, r2, r3
   13940:	e000      	b.n	13944 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   13942:	2300      	movs	r3, #0
	}
}
   13944:	0018      	movs	r0, r3
   13946:	46bd      	mov	sp, r7
   13948:	b004      	add	sp, #16
   1394a:	bd80      	pop	{r7, pc}
   1394c:	41004400 	.word	0x41004400

00013950 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   13950:	b580      	push	{r7, lr}
   13952:	b082      	sub	sp, #8
   13954:	af00      	add	r7, sp, #0
   13956:	0002      	movs	r2, r0
   13958:	1dfb      	adds	r3, r7, #7
   1395a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1395c:	1dfb      	adds	r3, r7, #7
   1395e:	781b      	ldrb	r3, [r3, #0]
   13960:	0018      	movs	r0, r3
   13962:	4b03      	ldr	r3, [pc, #12]	; (13970 <port_get_group_from_gpio_pin+0x20>)
   13964:	4798      	blx	r3
   13966:	0003      	movs	r3, r0
}
   13968:	0018      	movs	r0, r3
   1396a:	46bd      	mov	sp, r7
   1396c:	b002      	add	sp, #8
   1396e:	bd80      	pop	{r7, pc}
   13970:	000138f1 	.word	0x000138f1

00013974 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
   13974:	b580      	push	{r7, lr}
   13976:	b084      	sub	sp, #16
   13978:	af00      	add	r7, sp, #0
   1397a:	0002      	movs	r2, r0
   1397c:	1dfb      	adds	r3, r7, #7
   1397e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   13980:	1dfb      	adds	r3, r7, #7
   13982:	781b      	ldrb	r3, [r3, #0]
   13984:	0018      	movs	r0, r3
   13986:	4b0b      	ldr	r3, [pc, #44]	; (139b4 <port_pin_get_input_level+0x40>)
   13988:	4798      	blx	r3
   1398a:	0003      	movs	r3, r0
   1398c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1398e:	1dfb      	adds	r3, r7, #7
   13990:	781b      	ldrb	r3, [r3, #0]
   13992:	221f      	movs	r2, #31
   13994:	4013      	ands	r3, r2
   13996:	2201      	movs	r2, #1
   13998:	409a      	lsls	r2, r3
   1399a:	0013      	movs	r3, r2
   1399c:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
   1399e:	68fb      	ldr	r3, [r7, #12]
   139a0:	6a1b      	ldr	r3, [r3, #32]
   139a2:	68ba      	ldr	r2, [r7, #8]
   139a4:	4013      	ands	r3, r2
   139a6:	1e5a      	subs	r2, r3, #1
   139a8:	4193      	sbcs	r3, r2
   139aa:	b2db      	uxtb	r3, r3
}
   139ac:	0018      	movs	r0, r3
   139ae:	46bd      	mov	sp, r7
   139b0:	b004      	add	sp, #16
   139b2:	bd80      	pop	{r7, pc}
   139b4:	00013951 	.word	0x00013951

000139b8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   139b8:	b580      	push	{r7, lr}
   139ba:	b084      	sub	sp, #16
   139bc:	af00      	add	r7, sp, #0
   139be:	0002      	movs	r2, r0
   139c0:	1dfb      	adds	r3, r7, #7
   139c2:	701a      	strb	r2, [r3, #0]
   139c4:	1dbb      	adds	r3, r7, #6
   139c6:	1c0a      	adds	r2, r1, #0
   139c8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   139ca:	1dfb      	adds	r3, r7, #7
   139cc:	781b      	ldrb	r3, [r3, #0]
   139ce:	0018      	movs	r0, r3
   139d0:	4b0d      	ldr	r3, [pc, #52]	; (13a08 <port_pin_set_output_level+0x50>)
   139d2:	4798      	blx	r3
   139d4:	0003      	movs	r3, r0
   139d6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   139d8:	1dfb      	adds	r3, r7, #7
   139da:	781b      	ldrb	r3, [r3, #0]
   139dc:	221f      	movs	r2, #31
   139de:	4013      	ands	r3, r2
   139e0:	2201      	movs	r2, #1
   139e2:	409a      	lsls	r2, r3
   139e4:	0013      	movs	r3, r2
   139e6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   139e8:	1dbb      	adds	r3, r7, #6
   139ea:	781b      	ldrb	r3, [r3, #0]
   139ec:	2b00      	cmp	r3, #0
   139ee:	d003      	beq.n	139f8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   139f0:	68fb      	ldr	r3, [r7, #12]
   139f2:	68ba      	ldr	r2, [r7, #8]
   139f4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   139f6:	e002      	b.n	139fe <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   139f8:	68fb      	ldr	r3, [r7, #12]
   139fa:	68ba      	ldr	r2, [r7, #8]
   139fc:	615a      	str	r2, [r3, #20]
}
   139fe:	46c0      	nop			; (mov r8, r8)
   13a00:	46bd      	mov	sp, r7
   13a02:	b004      	add	sp, #16
   13a04:	bd80      	pop	{r7, pc}
   13a06:	46c0      	nop			; (mov r8, r8)
   13a08:	00013951 	.word	0x00013951

00013a0c <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
   13a0c:	b580      	push	{r7, lr}
   13a0e:	b084      	sub	sp, #16
   13a10:	af00      	add	r7, sp, #0
   13a12:	0002      	movs	r2, r0
   13a14:	1dfb      	adds	r3, r7, #7
   13a16:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   13a18:	1dfb      	adds	r3, r7, #7
   13a1a:	781b      	ldrb	r3, [r3, #0]
   13a1c:	0018      	movs	r0, r3
   13a1e:	4b09      	ldr	r3, [pc, #36]	; (13a44 <port_pin_toggle_output_level+0x38>)
   13a20:	4798      	blx	r3
   13a22:	0003      	movs	r3, r0
   13a24:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   13a26:	1dfb      	adds	r3, r7, #7
   13a28:	781b      	ldrb	r3, [r3, #0]
   13a2a:	221f      	movs	r2, #31
   13a2c:	4013      	ands	r3, r2
   13a2e:	2201      	movs	r2, #1
   13a30:	409a      	lsls	r2, r3
   13a32:	0013      	movs	r3, r2
   13a34:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
   13a36:	68fb      	ldr	r3, [r7, #12]
   13a38:	68ba      	ldr	r2, [r7, #8]
   13a3a:	61da      	str	r2, [r3, #28]
}
   13a3c:	46c0      	nop			; (mov r8, r8)
   13a3e:	46bd      	mov	sp, r7
   13a40:	b004      	add	sp, #16
   13a42:	bd80      	pop	{r7, pc}
   13a44:	00013951 	.word	0x00013951

00013a48 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   13a48:	b580      	push	{r7, lr}
   13a4a:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   13a4c:	4b02      	ldr	r3, [pc, #8]	; (13a58 <init_state+0x10>)
   13a4e:	2200      	movs	r2, #0
   13a50:	701a      	strb	r2, [r3, #0]
}
   13a52:	46c0      	nop			; (mov r8, r8)
   13a54:	46bd      	mov	sp, r7
   13a56:	bd80      	pop	{r7, pc}
   13a58:	20000479 	.word	0x20000479

00013a5c <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   13a5c:	b580      	push	{r7, lr}
   13a5e:	b082      	sub	sp, #8
   13a60:	af00      	add	r7, sp, #0
   13a62:	0002      	movs	r2, r0
   13a64:	1dfb      	adds	r3, r7, #7
   13a66:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   13a68:	1dfb      	adds	r3, r7, #7
   13a6a:	781b      	ldrb	r3, [r3, #0]
   13a6c:	b25b      	sxtb	r3, r3
   13a6e:	43db      	mvns	r3, r3
   13a70:	b25b      	sxtb	r3, r3
   13a72:	4a06      	ldr	r2, [pc, #24]	; (13a8c <clear_state+0x30>)
   13a74:	7812      	ldrb	r2, [r2, #0]
   13a76:	b252      	sxtb	r2, r2
   13a78:	4013      	ands	r3, r2
   13a7a:	b25b      	sxtb	r3, r3
   13a7c:	b2da      	uxtb	r2, r3
   13a7e:	4b03      	ldr	r3, [pc, #12]	; (13a8c <clear_state+0x30>)
   13a80:	701a      	strb	r2, [r3, #0]
}
   13a82:	46c0      	nop			; (mov r8, r8)
   13a84:	46bd      	mov	sp, r7
   13a86:	b002      	add	sp, #8
   13a88:	bd80      	pop	{r7, pc}
   13a8a:	46c0      	nop			; (mov r8, r8)
   13a8c:	20000479 	.word	0x20000479

00013a90 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   13a90:	b580      	push	{r7, lr}
   13a92:	b082      	sub	sp, #8
   13a94:	af00      	add	r7, sp, #0
   13a96:	0002      	movs	r2, r0
   13a98:	1dfb      	adds	r3, r7, #7
   13a9a:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   13a9c:	4b05      	ldr	r3, [pc, #20]	; (13ab4 <add_state+0x24>)
   13a9e:	781a      	ldrb	r2, [r3, #0]
   13aa0:	1dfb      	adds	r3, r7, #7
   13aa2:	781b      	ldrb	r3, [r3, #0]
   13aa4:	4313      	orrs	r3, r2
   13aa6:	b2da      	uxtb	r2, r3
   13aa8:	4b02      	ldr	r3, [pc, #8]	; (13ab4 <add_state+0x24>)
   13aaa:	701a      	strb	r2, [r3, #0]
}
   13aac:	46c0      	nop			; (mov r8, r8)
   13aae:	46bd      	mov	sp, r7
   13ab0:	b002      	add	sp, #8
   13ab2:	bd80      	pop	{r7, pc}
   13ab4:	20000479 	.word	0x20000479

00013ab8 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   13ab8:	b580      	push	{r7, lr}
   13aba:	b082      	sub	sp, #8
   13abc:	af00      	add	r7, sp, #0
   13abe:	0002      	movs	r2, r0
   13ac0:	1dfb      	adds	r3, r7, #7
   13ac2:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   13ac4:	4b06      	ldr	r3, [pc, #24]	; (13ae0 <is_state_set+0x28>)
   13ac6:	781b      	ldrb	r3, [r3, #0]
   13ac8:	1dfa      	adds	r2, r7, #7
   13aca:	7812      	ldrb	r2, [r2, #0]
   13acc:	4013      	ands	r3, r2
   13ace:	b2db      	uxtb	r3, r3
   13ad0:	1e5a      	subs	r2, r3, #1
   13ad2:	4193      	sbcs	r3, r2
   13ad4:	b2db      	uxtb	r3, r3
}
   13ad6:	0018      	movs	r0, r3
   13ad8:	46bd      	mov	sp, r7
   13ada:	b002      	add	sp, #8
   13adc:	bd80      	pop	{r7, pc}
   13ade:	46c0      	nop			; (mov r8, r8)
   13ae0:	20000479 	.word	0x20000479

00013ae4 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   13ae4:	b590      	push	{r4, r7, lr}
   13ae6:	b085      	sub	sp, #20
   13ae8:	af00      	add	r7, sp, #0
   13aea:	6078      	str	r0, [r7, #4]
   13aec:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   13aee:	687b      	ldr	r3, [r7, #4]
   13af0:	2b00      	cmp	r3, #0
   13af2:	d002      	beq.n	13afa <is_exist_file+0x16>
   13af4:	683b      	ldr	r3, [r7, #0]
   13af6:	2b00      	cmp	r3, #0
   13af8:	d101      	bne.n	13afe <is_exist_file+0x1a>
        return false;
   13afa:	2300      	movs	r3, #0
   13afc:	e013      	b.n	13b26 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   13afe:	230f      	movs	r3, #15
   13b00:	18fc      	adds	r4, r7, r3
   13b02:	6839      	ldr	r1, [r7, #0]
   13b04:	4b0a      	ldr	r3, [pc, #40]	; (13b30 <is_exist_file+0x4c>)
   13b06:	2200      	movs	r2, #0
   13b08:	0018      	movs	r0, r3
   13b0a:	4b0a      	ldr	r3, [pc, #40]	; (13b34 <is_exist_file+0x50>)
   13b0c:	4798      	blx	r3
   13b0e:	0003      	movs	r3, r0
   13b10:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   13b12:	4b07      	ldr	r3, [pc, #28]	; (13b30 <is_exist_file+0x4c>)
   13b14:	0018      	movs	r0, r3
   13b16:	4b08      	ldr	r3, [pc, #32]	; (13b38 <is_exist_file+0x54>)
   13b18:	4798      	blx	r3
    return (ret == FR_OK);
   13b1a:	230f      	movs	r3, #15
   13b1c:	18fb      	adds	r3, r7, r3
   13b1e:	781b      	ldrb	r3, [r3, #0]
   13b20:	425a      	negs	r2, r3
   13b22:	4153      	adcs	r3, r2
   13b24:	b2db      	uxtb	r3, r3
}
   13b26:	0018      	movs	r0, r3
   13b28:	46bd      	mov	sp, r7
   13b2a:	b005      	add	sp, #20
   13b2c:	bd90      	pop	{r4, r7, pc}
   13b2e:	46c0      	nop			; (mov r8, r8)
   13b30:	200006ac 	.word	0x200006ac
   13b34:	0002b541 	.word	0x0002b541
   13b38:	0002bf41 	.word	0x0002bf41

00013b3c <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   13b3c:	b580      	push	{r7, lr}
   13b3e:	b09e      	sub	sp, #120	; 0x78
   13b40:	af00      	add	r7, sp, #0
   13b42:	60f8      	str	r0, [r7, #12]
   13b44:	60b9      	str	r1, [r7, #8]
   13b46:	1dfb      	adds	r3, r7, #7
   13b48:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   13b4a:	2376      	movs	r3, #118	; 0x76
   13b4c:	18fb      	adds	r3, r7, r3
   13b4e:	2201      	movs	r2, #1
   13b50:	801a      	strh	r2, [r3, #0]
   13b52:	2374      	movs	r3, #116	; 0x74
   13b54:	18fb      	adds	r3, r7, r3
   13b56:	2200      	movs	r2, #0
   13b58:	801a      	strh	r2, [r3, #0]
   13b5a:	236e      	movs	r3, #110	; 0x6e
   13b5c:	18fb      	adds	r3, r7, r3
   13b5e:	2200      	movs	r2, #0
   13b60:	801a      	strh	r2, [r3, #0]
   13b62:	2372      	movs	r3, #114	; 0x72
   13b64:	18fb      	adds	r3, r7, r3
   13b66:	2200      	movs	r2, #0
   13b68:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   13b6a:	2324      	movs	r3, #36	; 0x24
   13b6c:	18fb      	adds	r3, r7, r3
   13b6e:	0018      	movs	r0, r3
   13b70:	2341      	movs	r3, #65	; 0x41
   13b72:	001a      	movs	r2, r3
   13b74:	2100      	movs	r1, #0
   13b76:	4b92      	ldr	r3, [pc, #584]	; (13dc0 <rename_to_unique+0x284>)
   13b78:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   13b7a:	2318      	movs	r3, #24
   13b7c:	18fb      	adds	r3, r7, r3
   13b7e:	0018      	movs	r0, r3
   13b80:	2309      	movs	r3, #9
   13b82:	001a      	movs	r2, r3
   13b84:	2100      	movs	r1, #0
   13b86:	4b8e      	ldr	r3, [pc, #568]	; (13dc0 <rename_to_unique+0x284>)
   13b88:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   13b8a:	2314      	movs	r3, #20
   13b8c:	18fb      	adds	r3, r7, r3
   13b8e:	2200      	movs	r2, #0
   13b90:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   13b92:	2300      	movs	r3, #0
   13b94:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   13b96:	2371      	movs	r3, #113	; 0x71
   13b98:	18fb      	adds	r3, r7, r3
   13b9a:	2200      	movs	r2, #0
   13b9c:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   13b9e:	68bb      	ldr	r3, [r7, #8]
   13ba0:	2b00      	cmp	r3, #0
   13ba2:	d101      	bne.n	13ba8 <rename_to_unique+0x6c>
        return false;
   13ba4:	2300      	movs	r3, #0
   13ba6:	e106      	b.n	13db6 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   13ba8:	68ba      	ldr	r2, [r7, #8]
   13baa:	68fb      	ldr	r3, [r7, #12]
   13bac:	0011      	movs	r1, r2
   13bae:	0018      	movs	r0, r3
   13bb0:	4b84      	ldr	r3, [pc, #528]	; (13dc4 <rename_to_unique+0x288>)
   13bb2:	4798      	blx	r3
   13bb4:	0003      	movs	r3, r0
   13bb6:	001a      	movs	r2, r3
   13bb8:	2301      	movs	r3, #1
   13bba:	4053      	eors	r3, r2
   13bbc:	b2db      	uxtb	r3, r3
   13bbe:	2b00      	cmp	r3, #0
   13bc0:	d001      	beq.n	13bc6 <rename_to_unique+0x8a>
        return true;
   13bc2:	2301      	movs	r3, #1
   13bc4:	e0f7      	b.n	13db6 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   13bc6:	68bb      	ldr	r3, [r7, #8]
   13bc8:	0018      	movs	r0, r3
   13bca:	4b7f      	ldr	r3, [pc, #508]	; (13dc8 <rename_to_unique+0x28c>)
   13bcc:	4798      	blx	r3
   13bce:	0003      	movs	r3, r0
   13bd0:	2b40      	cmp	r3, #64	; 0x40
   13bd2:	d901      	bls.n	13bd8 <rename_to_unique+0x9c>
        return false;
   13bd4:	2300      	movs	r3, #0
   13bd6:	e0ee      	b.n	13db6 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   13bd8:	68bb      	ldr	r3, [r7, #8]
   13bda:	212e      	movs	r1, #46	; 0x2e
   13bdc:	0018      	movs	r0, r3
   13bde:	4b7b      	ldr	r3, [pc, #492]	; (13dcc <rename_to_unique+0x290>)
   13be0:	4798      	blx	r3
   13be2:	0003      	movs	r3, r0
   13be4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   13be6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   13be8:	2b00      	cmp	r3, #0
   13bea:	d052      	beq.n	13c92 <rename_to_unique+0x156>
        ext_len = strlen(p);
   13bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   13bee:	0018      	movs	r0, r3
   13bf0:	4b75      	ldr	r3, [pc, #468]	; (13dc8 <rename_to_unique+0x28c>)
   13bf2:	4798      	blx	r3
   13bf4:	0002      	movs	r2, r0
   13bf6:	236e      	movs	r3, #110	; 0x6e
   13bf8:	18fb      	adds	r3, r7, r3
   13bfa:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   13bfc:	236e      	movs	r3, #110	; 0x6e
   13bfe:	18fb      	adds	r3, r7, r3
   13c00:	881b      	ldrh	r3, [r3, #0]
   13c02:	2b07      	cmp	r3, #7
   13c04:	d837      	bhi.n	13c76 <rename_to_unique+0x13a>
            valid_ext = true;
   13c06:	2371      	movs	r3, #113	; 0x71
   13c08:	18fb      	adds	r3, r7, r3
   13c0a:	2201      	movs	r2, #1
   13c0c:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   13c0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   13c10:	2318      	movs	r3, #24
   13c12:	18fb      	adds	r3, r7, r3
   13c14:	0011      	movs	r1, r2
   13c16:	0018      	movs	r0, r3
   13c18:	4b6d      	ldr	r3, [pc, #436]	; (13dd0 <rename_to_unique+0x294>)
   13c1a:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   13c1c:	68bb      	ldr	r3, [r7, #8]
   13c1e:	0018      	movs	r0, r3
   13c20:	4b69      	ldr	r3, [pc, #420]	; (13dc8 <rename_to_unique+0x28c>)
   13c22:	4798      	blx	r3
   13c24:	0002      	movs	r2, r0
   13c26:	236e      	movs	r3, #110	; 0x6e
   13c28:	18fb      	adds	r3, r7, r3
   13c2a:	881b      	ldrh	r3, [r3, #0]
   13c2c:	1ad3      	subs	r3, r2, r3
   13c2e:	2b3c      	cmp	r3, #60	; 0x3c
   13c30:	d911      	bls.n	13c56 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   13c32:	2374      	movs	r3, #116	; 0x74
   13c34:	18fb      	adds	r3, r7, r3
   13c36:	226e      	movs	r2, #110	; 0x6e
   13c38:	18ba      	adds	r2, r7, r2
   13c3a:	8812      	ldrh	r2, [r2, #0]
   13c3c:	213c      	movs	r1, #60	; 0x3c
   13c3e:	1a8a      	subs	r2, r1, r2
   13c40:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   13c42:	2374      	movs	r3, #116	; 0x74
   13c44:	18fb      	adds	r3, r7, r3
   13c46:	881a      	ldrh	r2, [r3, #0]
   13c48:	68b9      	ldr	r1, [r7, #8]
   13c4a:	2324      	movs	r3, #36	; 0x24
   13c4c:	18fb      	adds	r3, r7, r3
   13c4e:	0018      	movs	r0, r3
   13c50:	4b60      	ldr	r3, [pc, #384]	; (13dd4 <rename_to_unique+0x298>)
   13c52:	4798      	blx	r3
   13c54:	e02a      	b.n	13cac <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   13c56:	6eba      	ldr	r2, [r7, #104]	; 0x68
   13c58:	68bb      	ldr	r3, [r7, #8]
   13c5a:	1ad2      	subs	r2, r2, r3
   13c5c:	2374      	movs	r3, #116	; 0x74
   13c5e:	18fb      	adds	r3, r7, r3
   13c60:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   13c62:	2374      	movs	r3, #116	; 0x74
   13c64:	18fb      	adds	r3, r7, r3
   13c66:	881a      	ldrh	r2, [r3, #0]
   13c68:	68b9      	ldr	r1, [r7, #8]
   13c6a:	2324      	movs	r3, #36	; 0x24
   13c6c:	18fb      	adds	r3, r7, r3
   13c6e:	0018      	movs	r0, r3
   13c70:	4b58      	ldr	r3, [pc, #352]	; (13dd4 <rename_to_unique+0x298>)
   13c72:	4798      	blx	r3
   13c74:	e01a      	b.n	13cac <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   13c76:	2374      	movs	r3, #116	; 0x74
   13c78:	18fb      	adds	r3, r7, r3
   13c7a:	223c      	movs	r2, #60	; 0x3c
   13c7c:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   13c7e:	2374      	movs	r3, #116	; 0x74
   13c80:	18fb      	adds	r3, r7, r3
   13c82:	881a      	ldrh	r2, [r3, #0]
   13c84:	68b9      	ldr	r1, [r7, #8]
   13c86:	2324      	movs	r3, #36	; 0x24
   13c88:	18fb      	adds	r3, r7, r3
   13c8a:	0018      	movs	r0, r3
   13c8c:	4b51      	ldr	r3, [pc, #324]	; (13dd4 <rename_to_unique+0x298>)
   13c8e:	4798      	blx	r3
   13c90:	e00c      	b.n	13cac <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   13c92:	2374      	movs	r3, #116	; 0x74
   13c94:	18fb      	adds	r3, r7, r3
   13c96:	223c      	movs	r2, #60	; 0x3c
   13c98:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   13c9a:	2374      	movs	r3, #116	; 0x74
   13c9c:	18fb      	adds	r3, r7, r3
   13c9e:	881a      	ldrh	r2, [r3, #0]
   13ca0:	68b9      	ldr	r1, [r7, #8]
   13ca2:	2324      	movs	r3, #36	; 0x24
   13ca4:	18fb      	adds	r3, r7, r3
   13ca6:	0018      	movs	r0, r3
   13ca8:	4b4a      	ldr	r3, [pc, #296]	; (13dd4 <rename_to_unique+0x298>)
   13caa:	4798      	blx	r3
    }

    name[name_len++] = '-';
   13cac:	2374      	movs	r3, #116	; 0x74
   13cae:	18fb      	adds	r3, r7, r3
   13cb0:	881b      	ldrh	r3, [r3, #0]
   13cb2:	2274      	movs	r2, #116	; 0x74
   13cb4:	18ba      	adds	r2, r7, r2
   13cb6:	1c59      	adds	r1, r3, #1
   13cb8:	8011      	strh	r1, [r2, #0]
   13cba:	001a      	movs	r2, r3
   13cbc:	2324      	movs	r3, #36	; 0x24
   13cbe:	18fb      	adds	r3, r7, r3
   13cc0:	212d      	movs	r1, #45	; 0x2d
   13cc2:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   13cc4:	2376      	movs	r3, #118	; 0x76
   13cc6:	18fb      	adds	r3, r7, r3
   13cc8:	2200      	movs	r2, #0
   13cca:	801a      	strh	r2, [r3, #0]
   13ccc:	2372      	movs	r3, #114	; 0x72
   13cce:	18fb      	adds	r3, r7, r3
   13cd0:	2201      	movs	r2, #1
   13cd2:	801a      	strh	r2, [r3, #0]
   13cd4:	e010      	b.n	13cf8 <rename_to_unique+0x1bc>
        count *= 10;
   13cd6:	2372      	movs	r3, #114	; 0x72
   13cd8:	18fa      	adds	r2, r7, r3
   13cda:	2372      	movs	r3, #114	; 0x72
   13cdc:	18fb      	adds	r3, r7, r3
   13cde:	881b      	ldrh	r3, [r3, #0]
   13ce0:	1c19      	adds	r1, r3, #0
   13ce2:	0089      	lsls	r1, r1, #2
   13ce4:	18cb      	adds	r3, r1, r3
   13ce6:	18db      	adds	r3, r3, r3
   13ce8:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   13cea:	2376      	movs	r3, #118	; 0x76
   13cec:	18fb      	adds	r3, r7, r3
   13cee:	881a      	ldrh	r2, [r3, #0]
   13cf0:	2376      	movs	r3, #118	; 0x76
   13cf2:	18fb      	adds	r3, r7, r3
   13cf4:	3201      	adds	r2, #1
   13cf6:	801a      	strh	r2, [r3, #0]
   13cf8:	2376      	movs	r3, #118	; 0x76
   13cfa:	18fb      	adds	r3, r7, r3
   13cfc:	881b      	ldrh	r3, [r3, #0]
   13cfe:	2b02      	cmp	r3, #2
   13d00:	d9e9      	bls.n	13cd6 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   13d02:	2376      	movs	r3, #118	; 0x76
   13d04:	18fb      	adds	r3, r7, r3
   13d06:	2201      	movs	r2, #1
   13d08:	801a      	strh	r2, [r3, #0]
   13d0a:	e04b      	b.n	13da4 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   13d0c:	2376      	movs	r3, #118	; 0x76
   13d0e:	18fb      	adds	r3, r7, r3
   13d10:	881a      	ldrh	r2, [r3, #0]
   13d12:	4931      	ldr	r1, [pc, #196]	; (13dd8 <rename_to_unique+0x29c>)
   13d14:	2314      	movs	r3, #20
   13d16:	18fb      	adds	r3, r7, r3
   13d18:	0018      	movs	r0, r3
   13d1a:	4b30      	ldr	r3, [pc, #192]	; (13ddc <rename_to_unique+0x2a0>)
   13d1c:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   13d1e:	2374      	movs	r3, #116	; 0x74
   13d20:	18fb      	adds	r3, r7, r3
   13d22:	881b      	ldrh	r3, [r3, #0]
   13d24:	2224      	movs	r2, #36	; 0x24
   13d26:	18ba      	adds	r2, r7, r2
   13d28:	18d3      	adds	r3, r2, r3
   13d2a:	2214      	movs	r2, #20
   13d2c:	18b9      	adds	r1, r7, r2
   13d2e:	2203      	movs	r2, #3
   13d30:	0018      	movs	r0, r3
   13d32:	4b28      	ldr	r3, [pc, #160]	; (13dd4 <rename_to_unique+0x298>)
   13d34:	4798      	blx	r3
        if (valid_ext) {
   13d36:	2371      	movs	r3, #113	; 0x71
   13d38:	18fb      	adds	r3, r7, r3
   13d3a:	781b      	ldrb	r3, [r3, #0]
   13d3c:	2b00      	cmp	r3, #0
   13d3e:	d00c      	beq.n	13d5a <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   13d40:	2374      	movs	r3, #116	; 0x74
   13d42:	18fb      	adds	r3, r7, r3
   13d44:	881b      	ldrh	r3, [r3, #0]
   13d46:	3303      	adds	r3, #3
   13d48:	2224      	movs	r2, #36	; 0x24
   13d4a:	18ba      	adds	r2, r7, r2
   13d4c:	18d3      	adds	r3, r2, r3
   13d4e:	2218      	movs	r2, #24
   13d50:	18ba      	adds	r2, r7, r2
   13d52:	0011      	movs	r1, r2
   13d54:	0018      	movs	r0, r3
   13d56:	4b1e      	ldr	r3, [pc, #120]	; (13dd0 <rename_to_unique+0x294>)
   13d58:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   13d5a:	2324      	movs	r3, #36	; 0x24
   13d5c:	18fa      	adds	r2, r7, r3
   13d5e:	68fb      	ldr	r3, [r7, #12]
   13d60:	0011      	movs	r1, r2
   13d62:	0018      	movs	r0, r3
   13d64:	4b17      	ldr	r3, [pc, #92]	; (13dc4 <rename_to_unique+0x288>)
   13d66:	4798      	blx	r3
   13d68:	0003      	movs	r3, r0
   13d6a:	001a      	movs	r2, r3
   13d6c:	2301      	movs	r3, #1
   13d6e:	4053      	eors	r3, r2
   13d70:	b2db      	uxtb	r3, r3
   13d72:	2b00      	cmp	r3, #0
   13d74:	d00f      	beq.n	13d96 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   13d76:	1dfb      	adds	r3, r7, #7
   13d78:	781a      	ldrb	r2, [r3, #0]
   13d7a:	68bb      	ldr	r3, [r7, #8]
   13d7c:	2100      	movs	r1, #0
   13d7e:	0018      	movs	r0, r3
   13d80:	4b0f      	ldr	r3, [pc, #60]	; (13dc0 <rename_to_unique+0x284>)
   13d82:	4798      	blx	r3
            strcpy(file_path_name, name);
   13d84:	2324      	movs	r3, #36	; 0x24
   13d86:	18fa      	adds	r2, r7, r3
   13d88:	68bb      	ldr	r3, [r7, #8]
   13d8a:	0011      	movs	r1, r2
   13d8c:	0018      	movs	r0, r3
   13d8e:	4b10      	ldr	r3, [pc, #64]	; (13dd0 <rename_to_unique+0x294>)
   13d90:	4798      	blx	r3
            return true;
   13d92:	2301      	movs	r3, #1
   13d94:	e00f      	b.n	13db6 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   13d96:	2376      	movs	r3, #118	; 0x76
   13d98:	18fb      	adds	r3, r7, r3
   13d9a:	881a      	ldrh	r2, [r3, #0]
   13d9c:	2376      	movs	r3, #118	; 0x76
   13d9e:	18fb      	adds	r3, r7, r3
   13da0:	3201      	adds	r2, #1
   13da2:	801a      	strh	r2, [r3, #0]
   13da4:	2376      	movs	r3, #118	; 0x76
   13da6:	18fa      	adds	r2, r7, r3
   13da8:	2372      	movs	r3, #114	; 0x72
   13daa:	18fb      	adds	r3, r7, r3
   13dac:	8812      	ldrh	r2, [r2, #0]
   13dae:	881b      	ldrh	r3, [r3, #0]
   13db0:	429a      	cmp	r2, r3
   13db2:	d3ab      	bcc.n	13d0c <rename_to_unique+0x1d0>
        }
    }
    return false;
   13db4:	2300      	movs	r3, #0
}
   13db6:	0018      	movs	r0, r3
   13db8:	46bd      	mov	sp, r7
   13dba:	b01e      	add	sp, #120	; 0x78
   13dbc:	bd80      	pop	{r7, pc}
   13dbe:	46c0      	nop			; (mov r8, r8)
   13dc0:	000321a3 	.word	0x000321a3
   13dc4:	00013ae5 	.word	0x00013ae5
   13dc8:	0003255b 	.word	0x0003255b
   13dcc:	000325b5 	.word	0x000325b5
   13dd0:	0003250f 	.word	0x0003250f
   13dd4:	0003258b 	.word	0x0003258b
   13dd8:	0003381c 	.word	0x0003381c
   13ddc:	00032461 	.word	0x00032461

00013de0 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   13de0:	b590      	push	{r4, r7, lr}
   13de2:	b085      	sub	sp, #20
   13de4:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   13de6:	2001      	movs	r0, #1
   13de8:	4b23      	ldr	r3, [pc, #140]	; (13e78 <start_download+0x98>)
   13dea:	4798      	blx	r3
   13dec:	0003      	movs	r3, r0
   13dee:	001a      	movs	r2, r3
   13df0:	2301      	movs	r3, #1
   13df2:	4053      	eors	r3, r2
   13df4:	b2db      	uxtb	r3, r3
   13df6:	2b00      	cmp	r3, #0
   13df8:	d005      	beq.n	13e06 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   13dfa:	4b20      	ldr	r3, [pc, #128]	; (13e7c <start_download+0x9c>)
   13dfc:	0019      	movs	r1, r3
   13dfe:	2001      	movs	r0, #1
   13e00:	4b1f      	ldr	r3, [pc, #124]	; (13e80 <start_download+0xa0>)
   13e02:	4798      	blx	r3
        return;
   13e04:	e034      	b.n	13e70 <start_download+0x90>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   13e06:	2002      	movs	r0, #2
   13e08:	4b1b      	ldr	r3, [pc, #108]	; (13e78 <start_download+0x98>)
   13e0a:	4798      	blx	r3
   13e0c:	0003      	movs	r3, r0
   13e0e:	001a      	movs	r2, r3
   13e10:	2301      	movs	r3, #1
   13e12:	4053      	eors	r3, r2
   13e14:	b2db      	uxtb	r3, r3
   13e16:	2b00      	cmp	r3, #0
   13e18:	d005      	beq.n	13e26 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   13e1a:	4b1a      	ldr	r3, [pc, #104]	; (13e84 <start_download+0xa4>)
   13e1c:	0019      	movs	r1, r3
   13e1e:	2001      	movs	r0, #1
   13e20:	4b17      	ldr	r3, [pc, #92]	; (13e80 <start_download+0xa0>)
   13e22:	4798      	blx	r3
        return;
   13e24:	e024      	b.n	13e70 <start_download+0x90>
    }

    if (is_state_set(GET_REQUESTED)) {
   13e26:	2004      	movs	r0, #4
   13e28:	4b13      	ldr	r3, [pc, #76]	; (13e78 <start_download+0x98>)
   13e2a:	4798      	blx	r3
   13e2c:	1e03      	subs	r3, r0, #0
   13e2e:	d005      	beq.n	13e3c <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   13e30:	4b15      	ldr	r3, [pc, #84]	; (13e88 <start_download+0xa8>)
   13e32:	0019      	movs	r1, r3
   13e34:	2001      	movs	r0, #1
   13e36:	4b12      	ldr	r3, [pc, #72]	; (13e80 <start_download+0xa0>)
   13e38:	4798      	blx	r3
        return;
   13e3a:	e019      	b.n	13e70 <start_download+0x90>
    }

    if (is_state_set(DOWNLOADING)) {
   13e3c:	2008      	movs	r0, #8
   13e3e:	4b0e      	ldr	r3, [pc, #56]	; (13e78 <start_download+0x98>)
   13e40:	4798      	blx	r3
   13e42:	1e03      	subs	r3, r0, #0
   13e44:	d005      	beq.n	13e52 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   13e46:	4b11      	ldr	r3, [pc, #68]	; (13e8c <start_download+0xac>)
   13e48:	0019      	movs	r1, r3
   13e4a:	2001      	movs	r0, #1
   13e4c:	4b0c      	ldr	r3, [pc, #48]	; (13e80 <start_download+0xa0>)
   13e4e:	4798      	blx	r3
        return;
   13e50:	e00e      	b.n	13e70 <start_download+0x90>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   13e52:	4b0f      	ldr	r3, [pc, #60]	; (13e90 <start_download+0xb0>)
   13e54:	0019      	movs	r1, r3
   13e56:	2001      	movs	r0, #1
   13e58:	4b09      	ldr	r3, [pc, #36]	; (13e80 <start_download+0xa0>)
   13e5a:	4798      	blx	r3
    int http_req_status = http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   13e5c:	490d      	ldr	r1, [pc, #52]	; (13e94 <start_download+0xb4>)
   13e5e:	480e      	ldr	r0, [pc, #56]	; (13e98 <start_download+0xb8>)
   13e60:	2300      	movs	r3, #0
   13e62:	9300      	str	r3, [sp, #0]
   13e64:	2300      	movs	r3, #0
   13e66:	2201      	movs	r2, #1
   13e68:	4c0c      	ldr	r4, [pc, #48]	; (13e9c <start_download+0xbc>)
   13e6a:	47a0      	blx	r4
   13e6c:	0003      	movs	r3, r0
   13e6e:	607b      	str	r3, [r7, #4]
}
   13e70:	46bd      	mov	sp, r7
   13e72:	b003      	add	sp, #12
   13e74:	bd90      	pop	{r4, r7, pc}
   13e76:	46c0      	nop			; (mov r8, r8)
   13e78:	00013ab9 	.word	0x00013ab9
   13e7c:	00033824 	.word	0x00033824
   13e80:	0001ba95 	.word	0x0001ba95
   13e84:	00033850 	.word	0x00033850
   13e88:	0003387c 	.word	0x0003387c
   13e8c:	000338a8 	.word	0x000338a8
   13e90:	000338d4 	.word	0x000338d4
   13e94:	00033900 	.word	0x00033900
   13e98:	20004278 	.word	0x20004278
   13e9c:	0002eb95 	.word	0x0002eb95

00013ea0 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   13ea0:	b5b0      	push	{r4, r5, r7, lr}
   13ea2:	b086      	sub	sp, #24
   13ea4:	af00      	add	r7, sp, #0
   13ea6:	6078      	str	r0, [r7, #4]
   13ea8:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   13eaa:	687b      	ldr	r3, [r7, #4]
   13eac:	2b00      	cmp	r3, #0
   13eae:	d002      	beq.n	13eb6 <store_file_packet+0x16>
   13eb0:	683b      	ldr	r3, [r7, #0]
   13eb2:	2b00      	cmp	r3, #0
   13eb4:	d105      	bne.n	13ec2 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   13eb6:	4b58      	ldr	r3, [pc, #352]	; (14018 <store_file_packet+0x178>)
   13eb8:	0019      	movs	r1, r3
   13eba:	2001      	movs	r0, #1
   13ebc:	4b57      	ldr	r3, [pc, #348]	; (1401c <store_file_packet+0x17c>)
   13ebe:	4798      	blx	r3
        return;
   13ec0:	e0a6      	b.n	14010 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   13ec2:	2008      	movs	r0, #8
   13ec4:	4b56      	ldr	r3, [pc, #344]	; (14020 <store_file_packet+0x180>)
   13ec6:	4798      	blx	r3
   13ec8:	0003      	movs	r3, r0
   13eca:	001a      	movs	r2, r3
   13ecc:	2301      	movs	r3, #1
   13ece:	4053      	eors	r3, r2
   13ed0:	b2db      	uxtb	r3, r3
   13ed2:	2b00      	cmp	r3, #0
   13ed4:	d055      	beq.n	13f82 <store_file_packet+0xe2>
        char *cp = NULL;
   13ed6:	2300      	movs	r3, #0
   13ed8:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   13eda:	4b52      	ldr	r3, [pc, #328]	; (14024 <store_file_packet+0x184>)
   13edc:	2230      	movs	r2, #48	; 0x30
   13ede:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   13ee0:	4b50      	ldr	r3, [pc, #320]	; (14024 <store_file_packet+0x184>)
   13ee2:	223a      	movs	r2, #58	; 0x3a
   13ee4:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   13ee6:	4b50      	ldr	r3, [pc, #320]	; (14028 <store_file_packet+0x188>)
   13ee8:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   13eea:	e002      	b.n	13ef2 <store_file_packet+0x52>
            cp--;
   13eec:	697b      	ldr	r3, [r7, #20]
   13eee:	3b01      	subs	r3, #1
   13ef0:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   13ef2:	697b      	ldr	r3, [r7, #20]
   13ef4:	781b      	ldrb	r3, [r3, #0]
   13ef6:	2b2f      	cmp	r3, #47	; 0x2f
   13ef8:	d1f8      	bne.n	13eec <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   13efa:	697b      	ldr	r3, [r7, #20]
   13efc:	0018      	movs	r0, r3
   13efe:	4b4b      	ldr	r3, [pc, #300]	; (1402c <store_file_packet+0x18c>)
   13f00:	4798      	blx	r3
   13f02:	0003      	movs	r3, r0
   13f04:	2b01      	cmp	r3, #1
   13f06:	d924      	bls.n	13f52 <store_file_packet+0xb2>
            cp++;
   13f08:	697b      	ldr	r3, [r7, #20]
   13f0a:	3301      	adds	r3, #1
   13f0c:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   13f0e:	697a      	ldr	r2, [r7, #20]
   13f10:	4b47      	ldr	r3, [pc, #284]	; (14030 <store_file_packet+0x190>)
   13f12:	0011      	movs	r1, r2
   13f14:	0018      	movs	r0, r3
   13f16:	4b47      	ldr	r3, [pc, #284]	; (14034 <store_file_packet+0x194>)
   13f18:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   13f1a:	4942      	ldr	r1, [pc, #264]	; (14024 <store_file_packet+0x184>)
   13f1c:	4b46      	ldr	r3, [pc, #280]	; (14038 <store_file_packet+0x198>)
   13f1e:	2240      	movs	r2, #64	; 0x40
   13f20:	0018      	movs	r0, r3
   13f22:	4b46      	ldr	r3, [pc, #280]	; (1403c <store_file_packet+0x19c>)
   13f24:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   13f26:	4a3f      	ldr	r2, [pc, #252]	; (14024 <store_file_packet+0x184>)
   13f28:	4b45      	ldr	r3, [pc, #276]	; (14040 <store_file_packet+0x1a0>)
   13f2a:	0019      	movs	r1, r3
   13f2c:	2001      	movs	r0, #1
   13f2e:	4b3b      	ldr	r3, [pc, #236]	; (1401c <store_file_packet+0x17c>)
   13f30:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   13f32:	2313      	movs	r3, #19
   13f34:	18fc      	adds	r4, r7, r3
   13f36:	493b      	ldr	r1, [pc, #236]	; (14024 <store_file_packet+0x184>)
   13f38:	4b3f      	ldr	r3, [pc, #252]	; (14038 <store_file_packet+0x198>)
   13f3a:	220a      	movs	r2, #10
   13f3c:	0018      	movs	r0, r3
   13f3e:	4b41      	ldr	r3, [pc, #260]	; (14044 <store_file_packet+0x1a4>)
   13f40:	4798      	blx	r3
   13f42:	0003      	movs	r3, r0
   13f44:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   13f46:	2313      	movs	r3, #19
   13f48:	18fb      	adds	r3, r7, r3
   13f4a:	781b      	ldrb	r3, [r3, #0]
   13f4c:	2b00      	cmp	r3, #0
   13f4e:	d012      	beq.n	13f76 <store_file_packet+0xd6>
   13f50:	e008      	b.n	13f64 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   13f52:	4b3d      	ldr	r3, [pc, #244]	; (14048 <store_file_packet+0x1a8>)
   13f54:	0019      	movs	r1, r3
   13f56:	2001      	movs	r0, #1
   13f58:	4b30      	ldr	r3, [pc, #192]	; (1401c <store_file_packet+0x17c>)
   13f5a:	4798      	blx	r3
            add_state(CANCELED);
   13f5c:	2020      	movs	r0, #32
   13f5e:	4b3b      	ldr	r3, [pc, #236]	; (1404c <store_file_packet+0x1ac>)
   13f60:	4798      	blx	r3
            return;
   13f62:	e055      	b.n	14010 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   13f64:	2313      	movs	r3, #19
   13f66:	18fb      	adds	r3, r7, r3
   13f68:	781a      	ldrb	r2, [r3, #0]
   13f6a:	4b39      	ldr	r3, [pc, #228]	; (14050 <store_file_packet+0x1b0>)
   13f6c:	0019      	movs	r1, r3
   13f6e:	2001      	movs	r0, #1
   13f70:	4b2a      	ldr	r3, [pc, #168]	; (1401c <store_file_packet+0x17c>)
   13f72:	4798      	blx	r3
            return;
   13f74:	e04c      	b.n	14010 <store_file_packet+0x170>
        }

        received_file_size = 0;
   13f76:	4b37      	ldr	r3, [pc, #220]	; (14054 <store_file_packet+0x1b4>)
   13f78:	2200      	movs	r2, #0
   13f7a:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   13f7c:	2008      	movs	r0, #8
   13f7e:	4b33      	ldr	r3, [pc, #204]	; (1404c <store_file_packet+0x1ac>)
   13f80:	4798      	blx	r3
    }

    if (data != NULL) {
   13f82:	687b      	ldr	r3, [r7, #4]
   13f84:	2b00      	cmp	r3, #0
   13f86:	d043      	beq.n	14010 <store_file_packet+0x170>
        UINT wsize = 0;
   13f88:	2300      	movs	r3, #0
   13f8a:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   13f8c:	2313      	movs	r3, #19
   13f8e:	18fc      	adds	r4, r7, r3
   13f90:	230c      	movs	r3, #12
   13f92:	18fb      	adds	r3, r7, r3
   13f94:	683a      	ldr	r2, [r7, #0]
   13f96:	6879      	ldr	r1, [r7, #4]
   13f98:	4827      	ldr	r0, [pc, #156]	; (14038 <store_file_packet+0x198>)
   13f9a:	4d2f      	ldr	r5, [pc, #188]	; (14058 <store_file_packet+0x1b8>)
   13f9c:	47a8      	blx	r5
   13f9e:	0003      	movs	r3, r0
   13fa0:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   13fa2:	2313      	movs	r3, #19
   13fa4:	18fb      	adds	r3, r7, r3
   13fa6:	781b      	ldrb	r3, [r3, #0]
   13fa8:	2b00      	cmp	r3, #0
   13faa:	d00c      	beq.n	13fc6 <store_file_packet+0x126>
            f_close(&file_object);
   13fac:	4b22      	ldr	r3, [pc, #136]	; (14038 <store_file_packet+0x198>)
   13fae:	0018      	movs	r0, r3
   13fb0:	4b2a      	ldr	r3, [pc, #168]	; (1405c <store_file_packet+0x1bc>)
   13fb2:	4798      	blx	r3
            add_state(CANCELED);
   13fb4:	2020      	movs	r0, #32
   13fb6:	4b25      	ldr	r3, [pc, #148]	; (1404c <store_file_packet+0x1ac>)
   13fb8:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   13fba:	4b29      	ldr	r3, [pc, #164]	; (14060 <store_file_packet+0x1c0>)
   13fbc:	0019      	movs	r1, r3
   13fbe:	2001      	movs	r0, #1
   13fc0:	4b16      	ldr	r3, [pc, #88]	; (1401c <store_file_packet+0x17c>)
   13fc2:	4798      	blx	r3
            return;
   13fc4:	e024      	b.n	14010 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   13fc6:	4b23      	ldr	r3, [pc, #140]	; (14054 <store_file_packet+0x1b4>)
   13fc8:	681a      	ldr	r2, [r3, #0]
   13fca:	68fb      	ldr	r3, [r7, #12]
   13fcc:	18d2      	adds	r2, r2, r3
   13fce:	4b21      	ldr	r3, [pc, #132]	; (14054 <store_file_packet+0x1b4>)
   13fd0:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   13fd2:	4b20      	ldr	r3, [pc, #128]	; (14054 <store_file_packet+0x1b4>)
   13fd4:	681a      	ldr	r2, [r3, #0]
   13fd6:	4b23      	ldr	r3, [pc, #140]	; (14064 <store_file_packet+0x1c4>)
   13fd8:	681b      	ldr	r3, [r3, #0]
   13fda:	4923      	ldr	r1, [pc, #140]	; (14068 <store_file_packet+0x1c8>)
   13fdc:	2001      	movs	r0, #1
   13fde:	4c0f      	ldr	r4, [pc, #60]	; (1401c <store_file_packet+0x17c>)
   13fe0:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   13fe2:	4b1c      	ldr	r3, [pc, #112]	; (14054 <store_file_packet+0x1b4>)
   13fe4:	681a      	ldr	r2, [r3, #0]
   13fe6:	4b1f      	ldr	r3, [pc, #124]	; (14064 <store_file_packet+0x1c4>)
   13fe8:	681b      	ldr	r3, [r3, #0]
   13fea:	429a      	cmp	r2, r3
   13fec:	d310      	bcc.n	14010 <store_file_packet+0x170>
            f_close(&file_object);
   13fee:	4b12      	ldr	r3, [pc, #72]	; (14038 <store_file_packet+0x198>)
   13ff0:	0018      	movs	r0, r3
   13ff2:	4b1a      	ldr	r3, [pc, #104]	; (1405c <store_file_packet+0x1bc>)
   13ff4:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   13ff6:	4b1d      	ldr	r3, [pc, #116]	; (1406c <store_file_packet+0x1cc>)
   13ff8:	0019      	movs	r1, r3
   13ffa:	2001      	movs	r0, #1
   13ffc:	4b07      	ldr	r3, [pc, #28]	; (1401c <store_file_packet+0x17c>)
   13ffe:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   14000:	2100      	movs	r1, #0
   14002:	2017      	movs	r0, #23
   14004:	4b1a      	ldr	r3, [pc, #104]	; (14070 <store_file_packet+0x1d0>)
   14006:	4798      	blx	r3
            add_state(COMPLETED);
   14008:	2010      	movs	r0, #16
   1400a:	4b10      	ldr	r3, [pc, #64]	; (1404c <store_file_packet+0x1ac>)
   1400c:	4798      	blx	r3
            return;
   1400e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   14010:	46bd      	mov	sp, r7
   14012:	b006      	add	sp, #24
   14014:	bdb0      	pop	{r4, r5, r7, pc}
   14016:	46c0      	nop			; (mov r8, r8)
   14018:	00033920 	.word	0x00033920
   1401c:	0001ba95 	.word	0x0001ba95
   14020:	00013ab9 	.word	0x00013ab9
   14024:	20000094 	.word	0x20000094
   14028:	0003391e 	.word	0x0003391e
   1402c:	0003255b 	.word	0x0003255b
   14030:	20000096 	.word	0x20000096
   14034:	0003250f 	.word	0x0003250f
   14038:	200006ac 	.word	0x200006ac
   1403c:	00013b3d 	.word	0x00013b3d
   14040:	00033984 	.word	0x00033984
   14044:	0002b541 	.word	0x0002b541
   14048:	00033944 	.word	0x00033944
   1404c:	00013a91 	.word	0x00013a91
   14050:	000339ac 	.word	0x000339ac
   14054:	200006d4 	.word	0x200006d4
   14058:	0002ba71 	.word	0x0002ba71
   1405c:	0002bf41 	.word	0x0002bf41
   14060:	000339e0 	.word	0x000339e0
   14064:	200006d0 	.word	0x200006d0
   14068:	00033a1c 	.word	0x00033a1c
   1406c:	00033a50 	.word	0x00033a50
   14070:	000139b9 	.word	0x000139b9

00014074 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   14074:	b590      	push	{r4, r7, lr}
   14076:	b085      	sub	sp, #20
   14078:	af00      	add	r7, sp, #0
   1407a:	60f8      	str	r0, [r7, #12]
   1407c:	60b9      	str	r1, [r7, #8]
   1407e:	607a      	str	r2, [r7, #4]
    switch (type) {
   14080:	68bb      	ldr	r3, [r7, #8]
   14082:	2b04      	cmp	r3, #4
   14084:	d900      	bls.n	14088 <http_client_callback+0x14>
   14086:	e077      	b.n	14178 <http_client_callback+0x104>
   14088:	68bb      	ldr	r3, [r7, #8]
   1408a:	009a      	lsls	r2, r3, #2
   1408c:	4b3c      	ldr	r3, [pc, #240]	; (14180 <http_client_callback+0x10c>)
   1408e:	18d3      	adds	r3, r2, r3
   14090:	681b      	ldr	r3, [r3, #0]
   14092:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   14094:	4b3b      	ldr	r3, [pc, #236]	; (14184 <http_client_callback+0x110>)
   14096:	0019      	movs	r1, r3
   14098:	2001      	movs	r0, #1
   1409a:	4b3b      	ldr	r3, [pc, #236]	; (14188 <http_client_callback+0x114>)
   1409c:	4798      	blx	r3
            break;
   1409e:	e06b      	b.n	14178 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   140a0:	4b3a      	ldr	r3, [pc, #232]	; (1418c <http_client_callback+0x118>)
   140a2:	0019      	movs	r1, r3
   140a4:	2001      	movs	r0, #1
   140a6:	4b38      	ldr	r3, [pc, #224]	; (14188 <http_client_callback+0x114>)
   140a8:	4798      	blx	r3
            add_state(GET_REQUESTED);
   140aa:	2004      	movs	r0, #4
   140ac:	4b38      	ldr	r3, [pc, #224]	; (14190 <http_client_callback+0x11c>)
   140ae:	4798      	blx	r3
            break;
   140b0:	e062      	b.n	14178 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   140b2:	687b      	ldr	r3, [r7, #4]
   140b4:	881b      	ldrh	r3, [r3, #0]
   140b6:	001a      	movs	r2, r3
   140b8:	687b      	ldr	r3, [r7, #4]
   140ba:	685b      	ldr	r3, [r3, #4]
   140bc:	4935      	ldr	r1, [pc, #212]	; (14194 <http_client_callback+0x120>)
   140be:	2001      	movs	r0, #1
   140c0:	4c31      	ldr	r4, [pc, #196]	; (14188 <http_client_callback+0x114>)
   140c2:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   140c4:	687b      	ldr	r3, [r7, #4]
   140c6:	881b      	ldrh	r3, [r3, #0]
   140c8:	2bc8      	cmp	r3, #200	; 0xc8
   140ca:	d10d      	bne.n	140e8 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   140cc:	687b      	ldr	r3, [r7, #4]
   140ce:	685a      	ldr	r2, [r3, #4]
   140d0:	4b31      	ldr	r3, [pc, #196]	; (14198 <http_client_callback+0x124>)
   140d2:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   140d4:	4b31      	ldr	r3, [pc, #196]	; (1419c <http_client_callback+0x128>)
   140d6:	2200      	movs	r2, #0
   140d8:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   140da:	687b      	ldr	r3, [r7, #4]
   140dc:	685a      	ldr	r2, [r3, #4]
   140de:	2380      	movs	r3, #128	; 0x80
   140e0:	009b      	lsls	r3, r3, #2
   140e2:	429a      	cmp	r2, r3
   140e4:	d843      	bhi.n	1416e <http_client_callback+0xfa>
   140e6:	e003      	b.n	140f0 <http_client_callback+0x7c>
                add_state(CANCELED);
   140e8:	2020      	movs	r0, #32
   140ea:	4b29      	ldr	r3, [pc, #164]	; (14190 <http_client_callback+0x11c>)
   140ec:	4798      	blx	r3
                return;
   140ee:	e043      	b.n	14178 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   140f0:	687b      	ldr	r3, [r7, #4]
   140f2:	689a      	ldr	r2, [r3, #8]
   140f4:	687b      	ldr	r3, [r7, #4]
   140f6:	685b      	ldr	r3, [r3, #4]
   140f8:	0019      	movs	r1, r3
   140fa:	0010      	movs	r0, r2
   140fc:	4b28      	ldr	r3, [pc, #160]	; (141a0 <http_client_callback+0x12c>)
   140fe:	4798      	blx	r3
                add_state(COMPLETED);
   14100:	2010      	movs	r0, #16
   14102:	4b23      	ldr	r3, [pc, #140]	; (14190 <http_client_callback+0x11c>)
   14104:	4798      	blx	r3
            }
            break;
   14106:	e032      	b.n	1416e <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   14108:	687b      	ldr	r3, [r7, #4]
   1410a:	685a      	ldr	r2, [r3, #4]
   1410c:	687b      	ldr	r3, [r7, #4]
   1410e:	681b      	ldr	r3, [r3, #0]
   14110:	0019      	movs	r1, r3
   14112:	0010      	movs	r0, r2
   14114:	4b22      	ldr	r3, [pc, #136]	; (141a0 <http_client_callback+0x12c>)
   14116:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   14118:	687b      	ldr	r3, [r7, #4]
   1411a:	7a1b      	ldrb	r3, [r3, #8]
   1411c:	2b00      	cmp	r3, #0
   1411e:	d028      	beq.n	14172 <http_client_callback+0xfe>
                add_state(COMPLETED);
   14120:	2010      	movs	r0, #16
   14122:	4b1b      	ldr	r3, [pc, #108]	; (14190 <http_client_callback+0x11c>)
   14124:	4798      	blx	r3
            }

            break;
   14126:	e024      	b.n	14172 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   14128:	687b      	ldr	r3, [r7, #4]
   1412a:	681a      	ldr	r2, [r3, #0]
   1412c:	4b1d      	ldr	r3, [pc, #116]	; (141a4 <http_client_callback+0x130>)
   1412e:	0019      	movs	r1, r3
   14130:	2001      	movs	r0, #1
   14132:	4b15      	ldr	r3, [pc, #84]	; (14188 <http_client_callback+0x114>)
   14134:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   14136:	687b      	ldr	r3, [r7, #4]
   14138:	681b      	ldr	r3, [r3, #0]
   1413a:	330b      	adds	r3, #11
   1413c:	d11b      	bne.n	14176 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   1413e:	2008      	movs	r0, #8
   14140:	4b19      	ldr	r3, [pc, #100]	; (141a8 <http_client_callback+0x134>)
   14142:	4798      	blx	r3
   14144:	1e03      	subs	r3, r0, #0
   14146:	d006      	beq.n	14156 <http_client_callback+0xe2>
                    f_close(&file_object);
   14148:	4b18      	ldr	r3, [pc, #96]	; (141ac <http_client_callback+0x138>)
   1414a:	0018      	movs	r0, r3
   1414c:	4b18      	ldr	r3, [pc, #96]	; (141b0 <http_client_callback+0x13c>)
   1414e:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   14150:	2008      	movs	r0, #8
   14152:	4b18      	ldr	r3, [pc, #96]	; (141b4 <http_client_callback+0x140>)
   14154:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   14156:	2004      	movs	r0, #4
   14158:	4b13      	ldr	r3, [pc, #76]	; (141a8 <http_client_callback+0x134>)
   1415a:	4798      	blx	r3
   1415c:	1e03      	subs	r3, r0, #0
   1415e:	d002      	beq.n	14166 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   14160:	2004      	movs	r0, #4
   14162:	4b14      	ldr	r3, [pc, #80]	; (141b4 <http_client_callback+0x140>)
   14164:	4798      	blx	r3
                }

                start_download();
   14166:	4b14      	ldr	r3, [pc, #80]	; (141b8 <http_client_callback+0x144>)
   14168:	4798      	blx	r3
            }

            break;
   1416a:	46c0      	nop			; (mov r8, r8)
   1416c:	e003      	b.n	14176 <http_client_callback+0x102>
            break;
   1416e:	46c0      	nop			; (mov r8, r8)
   14170:	e002      	b.n	14178 <http_client_callback+0x104>
            break;
   14172:	46c0      	nop			; (mov r8, r8)
   14174:	e000      	b.n	14178 <http_client_callback+0x104>
            break;
   14176:	46c0      	nop			; (mov r8, r8)
    }
}
   14178:	46bd      	mov	sp, r7
   1417a:	b005      	add	sp, #20
   1417c:	bd90      	pop	{r4, r7, pc}
   1417e:	46c0      	nop			; (mov r8, r8)
   14180:	000341a8 	.word	0x000341a8
   14184:	00033a84 	.word	0x00033a84
   14188:	0001ba95 	.word	0x0001ba95
   1418c:	00033abc 	.word	0x00033abc
   14190:	00013a91 	.word	0x00013a91
   14194:	00033ae8 	.word	0x00033ae8
   14198:	200006d0 	.word	0x200006d0
   1419c:	200006d4 	.word	0x200006d4
   141a0:	00013ea1 	.word	0x00013ea1
   141a4:	00033b24 	.word	0x00033b24
   141a8:	00013ab9 	.word	0x00013ab9
   141ac:	200006ac 	.word	0x200006ac
   141b0:	0002bf41 	.word	0x0002bf41
   141b4:	00013a5d 	.word	0x00013a5d
   141b8:	00013de1 	.word	0x00013de1

000141bc <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   141bc:	b580      	push	{r7, lr}
   141be:	b082      	sub	sp, #8
   141c0:	af00      	add	r7, sp, #0
   141c2:	603a      	str	r2, [r7, #0]
   141c4:	1dfb      	adds	r3, r7, #7
   141c6:	1c02      	adds	r2, r0, #0
   141c8:	701a      	strb	r2, [r3, #0]
   141ca:	1dbb      	adds	r3, r7, #6
   141cc:	1c0a      	adds	r2, r1, #0
   141ce:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   141d0:	683a      	ldr	r2, [r7, #0]
   141d2:	1dbb      	adds	r3, r7, #6
   141d4:	7819      	ldrb	r1, [r3, #0]
   141d6:	1dfb      	adds	r3, r7, #7
   141d8:	781b      	ldrb	r3, [r3, #0]
   141da:	b25b      	sxtb	r3, r3
   141dc:	0018      	movs	r0, r3
   141de:	4b03      	ldr	r3, [pc, #12]	; (141ec <socket_cb+0x30>)
   141e0:	4798      	blx	r3
}
   141e2:	46c0      	nop			; (mov r8, r8)
   141e4:	46bd      	mov	sp, r7
   141e6:	b002      	add	sp, #8
   141e8:	bd80      	pop	{r7, pc}
   141ea:	46c0      	nop			; (mov r8, r8)
   141ec:	0002e8a5 	.word	0x0002e8a5

000141f0 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   141f0:	b5b0      	push	{r4, r5, r7, lr}
   141f2:	b086      	sub	sp, #24
   141f4:	af04      	add	r7, sp, #16
   141f6:	6078      	str	r0, [r7, #4]
   141f8:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   141fa:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   141fc:	22ff      	movs	r2, #255	; 0xff
   141fe:	4013      	ands	r3, r2
   14200:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   14202:	683b      	ldr	r3, [r7, #0]
   14204:	0a1b      	lsrs	r3, r3, #8
   14206:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   14208:	23ff      	movs	r3, #255	; 0xff
   1420a:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   1420c:	683a      	ldr	r2, [r7, #0]
   1420e:	0c12      	lsrs	r2, r2, #16
   14210:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   14212:	22ff      	movs	r2, #255	; 0xff
   14214:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   14216:	6839      	ldr	r1, [r7, #0]
   14218:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   1421a:	000d      	movs	r5, r1
   1421c:	6878      	ldr	r0, [r7, #4]
   1421e:	4909      	ldr	r1, [pc, #36]	; (14244 <resolve_cb+0x54>)
   14220:	9502      	str	r5, [sp, #8]
   14222:	9201      	str	r2, [sp, #4]
   14224:	9300      	str	r3, [sp, #0]
   14226:	0023      	movs	r3, r4
   14228:	0002      	movs	r2, r0
   1422a:	2001      	movs	r0, #1
   1422c:	4c06      	ldr	r4, [pc, #24]	; (14248 <resolve_cb+0x58>)
   1422e:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   14230:	683a      	ldr	r2, [r7, #0]
   14232:	687b      	ldr	r3, [r7, #4]
   14234:	0011      	movs	r1, r2
   14236:	0018      	movs	r0, r3
   14238:	4b04      	ldr	r3, [pc, #16]	; (1424c <resolve_cb+0x5c>)
   1423a:	4798      	blx	r3
}
   1423c:	46c0      	nop			; (mov r8, r8)
   1423e:	46bd      	mov	sp, r7
   14240:	b002      	add	sp, #8
   14242:	bdb0      	pop	{r4, r5, r7, pc}
   14244:	00033b54 	.word	0x00033b54
   14248:	0001ba95 	.word	0x0001ba95
   1424c:	0002ea09 	.word	0x0002ea09

00014250 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   14250:	b590      	push	{r4, r7, lr}
   14252:	b087      	sub	sp, #28
   14254:	af02      	add	r7, sp, #8
   14256:	0002      	movs	r2, r0
   14258:	6039      	str	r1, [r7, #0]
   1425a:	1dfb      	adds	r3, r7, #7
   1425c:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   1425e:	1dfb      	adds	r3, r7, #7
   14260:	781b      	ldrb	r3, [r3, #0]
   14262:	2b2c      	cmp	r3, #44	; 0x2c
   14264:	d002      	beq.n	1426c <wifi_cb+0x1c>
   14266:	2b32      	cmp	r3, #50	; 0x32
   14268:	d03d      	beq.n	142e6 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   1426a:	e06f      	b.n	1434c <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   1426c:	683b      	ldr	r3, [r7, #0]
   1426e:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   14270:	68fb      	ldr	r3, [r7, #12]
   14272:	781b      	ldrb	r3, [r3, #0]
   14274:	2b01      	cmp	r3, #1
   14276:	d107      	bne.n	14288 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   14278:	4b36      	ldr	r3, [pc, #216]	; (14354 <wifi_cb+0x104>)
   1427a:	0019      	movs	r1, r3
   1427c:	2001      	movs	r0, #1
   1427e:	4b36      	ldr	r3, [pc, #216]	; (14358 <wifi_cb+0x108>)
   14280:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   14282:	4b36      	ldr	r3, [pc, #216]	; (1435c <wifi_cb+0x10c>)
   14284:	4798      	blx	r3
            break;
   14286:	e05e      	b.n	14346 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   14288:	68fb      	ldr	r3, [r7, #12]
   1428a:	781b      	ldrb	r3, [r3, #0]
   1428c:	2b00      	cmp	r3, #0
   1428e:	d15a      	bne.n	14346 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   14290:	4b33      	ldr	r3, [pc, #204]	; (14360 <wifi_cb+0x110>)
   14292:	0019      	movs	r1, r3
   14294:	2001      	movs	r0, #1
   14296:	4b30      	ldr	r3, [pc, #192]	; (14358 <wifi_cb+0x108>)
   14298:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   1429a:	2002      	movs	r0, #2
   1429c:	4b31      	ldr	r3, [pc, #196]	; (14364 <wifi_cb+0x114>)
   1429e:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   142a0:	2008      	movs	r0, #8
   142a2:	4b31      	ldr	r3, [pc, #196]	; (14368 <wifi_cb+0x118>)
   142a4:	4798      	blx	r3
   142a6:	1e03      	subs	r3, r0, #0
   142a8:	d006      	beq.n	142b8 <wifi_cb+0x68>
                    f_close(&file_object);
   142aa:	4b30      	ldr	r3, [pc, #192]	; (1436c <wifi_cb+0x11c>)
   142ac:	0018      	movs	r0, r3
   142ae:	4b30      	ldr	r3, [pc, #192]	; (14370 <wifi_cb+0x120>)
   142b0:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   142b2:	2008      	movs	r0, #8
   142b4:	4b2b      	ldr	r3, [pc, #172]	; (14364 <wifi_cb+0x114>)
   142b6:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   142b8:	2004      	movs	r0, #4
   142ba:	4b2b      	ldr	r3, [pc, #172]	; (14368 <wifi_cb+0x118>)
   142bc:	4798      	blx	r3
   142be:	1e03      	subs	r3, r0, #0
   142c0:	d002      	beq.n	142c8 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   142c2:	2004      	movs	r0, #4
   142c4:	4b27      	ldr	r3, [pc, #156]	; (14364 <wifi_cb+0x114>)
   142c6:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   142c8:	4b2a      	ldr	r3, [pc, #168]	; (14374 <wifi_cb+0x124>)
   142ca:	2101      	movs	r1, #1
   142cc:	0018      	movs	r0, r3
   142ce:	4b2a      	ldr	r3, [pc, #168]	; (14378 <wifi_cb+0x128>)
   142d0:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   142d2:	4a2a      	ldr	r2, [pc, #168]	; (1437c <wifi_cb+0x12c>)
   142d4:	482a      	ldr	r0, [pc, #168]	; (14380 <wifi_cb+0x130>)
   142d6:	23ff      	movs	r3, #255	; 0xff
   142d8:	9300      	str	r3, [sp, #0]
   142da:	0013      	movs	r3, r2
   142dc:	2202      	movs	r2, #2
   142de:	2112      	movs	r1, #18
   142e0:	4c28      	ldr	r4, [pc, #160]	; (14384 <wifi_cb+0x134>)
   142e2:	47a0      	blx	r4
            break;
   142e4:	e02f      	b.n	14346 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   142e6:	683b      	ldr	r3, [r7, #0]
   142e8:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   142ea:	68bb      	ldr	r3, [r7, #8]
   142ec:	781b      	ldrb	r3, [r3, #0]
   142ee:	0018      	movs	r0, r3
   142f0:	68bb      	ldr	r3, [r7, #8]
   142f2:	3301      	adds	r3, #1
   142f4:	781b      	ldrb	r3, [r3, #0]
   142f6:	001c      	movs	r4, r3
   142f8:	68bb      	ldr	r3, [r7, #8]
   142fa:	3302      	adds	r3, #2
   142fc:	781b      	ldrb	r3, [r3, #0]
   142fe:	001a      	movs	r2, r3
   14300:	68bb      	ldr	r3, [r7, #8]
   14302:	3303      	adds	r3, #3
   14304:	781b      	ldrb	r3, [r3, #0]
   14306:	4920      	ldr	r1, [pc, #128]	; (14388 <wifi_cb+0x138>)
   14308:	9301      	str	r3, [sp, #4]
   1430a:	9200      	str	r2, [sp, #0]
   1430c:	0023      	movs	r3, r4
   1430e:	0002      	movs	r2, r0
   14310:	2001      	movs	r0, #1
   14312:	4c11      	ldr	r4, [pc, #68]	; (14358 <wifi_cb+0x108>)
   14314:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   14316:	2002      	movs	r0, #2
   14318:	4b1c      	ldr	r3, [pc, #112]	; (1438c <wifi_cb+0x13c>)
   1431a:	4798      	blx	r3
            if (do_download_flag == 1) {
   1431c:	4b1c      	ldr	r3, [pc, #112]	; (14390 <wifi_cb+0x140>)
   1431e:	781b      	ldrb	r3, [r3, #0]
   14320:	2b01      	cmp	r3, #1
   14322:	d102      	bne.n	1432a <wifi_cb+0xda>
                start_download();
   14324:	4b1b      	ldr	r3, [pc, #108]	; (14394 <wifi_cb+0x144>)
   14326:	4798      	blx	r3
        } break;
   14328:	e00f      	b.n	1434a <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   1432a:	4a1b      	ldr	r2, [pc, #108]	; (14398 <wifi_cb+0x148>)
   1432c:	4b11      	ldr	r3, [pc, #68]	; (14374 <wifi_cb+0x124>)
   1432e:	0011      	movs	r1, r2
   14330:	0018      	movs	r0, r3
   14332:	4b1a      	ldr	r3, [pc, #104]	; (1439c <wifi_cb+0x14c>)
   14334:	4798      	blx	r3
   14336:	1e03      	subs	r3, r0, #0
   14338:	d007      	beq.n	1434a <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   1433a:	4b19      	ldr	r3, [pc, #100]	; (143a0 <wifi_cb+0x150>)
   1433c:	0019      	movs	r1, r3
   1433e:	2001      	movs	r0, #1
   14340:	4b05      	ldr	r3, [pc, #20]	; (14358 <wifi_cb+0x108>)
   14342:	4798      	blx	r3
        } break;
   14344:	e001      	b.n	1434a <wifi_cb+0xfa>
            break;
   14346:	46c0      	nop			; (mov r8, r8)
   14348:	e000      	b.n	1434c <wifi_cb+0xfc>
        } break;
   1434a:	46c0      	nop			; (mov r8, r8)
    }
}
   1434c:	46c0      	nop			; (mov r8, r8)
   1434e:	46bd      	mov	sp, r7
   14350:	b005      	add	sp, #20
   14352:	bd90      	pop	{r4, r7, pc}
   14354:	00033b84 	.word	0x00033b84
   14358:	0001ba95 	.word	0x0001ba95
   1435c:	00020075 	.word	0x00020075
   14360:	00033ba4 	.word	0x00033ba4
   14364:	00013a5d 	.word	0x00013a5d
   14368:	00013ab9 	.word	0x00013ab9
   1436c:	200006ac 	.word	0x200006ac
   14370:	0002bf41 	.word	0x0002bf41
   14374:	200006d8 	.word	0x200006d8
   14378:	0002d551 	.word	0x0002d551
   1437c:	00033bc8 	.word	0x00033bc8
   14380:	00033bd8 	.word	0x00033bd8
   14384:	0001fba1 	.word	0x0001fba1
   14388:	00033bec 	.word	0x00033bec
   1438c:	00013a91 	.word	0x00013a91
   14390:	20000478 	.word	0x20000478
   14394:	00013de1 	.word	0x00013de1
   14398:	0003380c 	.word	0x0003380c
   1439c:	0002d41d 	.word	0x0002d41d
   143a0:	00033c14 	.word	0x00033c14

000143a4 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   143a4:	b590      	push	{r4, r7, lr}
   143a6:	b083      	sub	sp, #12
   143a8:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   143aa:	4b29      	ldr	r3, [pc, #164]	; (14450 <init_storage+0xac>)
   143ac:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   143ae:	4b29      	ldr	r3, [pc, #164]	; (14454 <init_storage+0xb0>)
   143b0:	0019      	movs	r1, r3
   143b2:	2001      	movs	r0, #1
   143b4:	4b28      	ldr	r3, [pc, #160]	; (14458 <init_storage+0xb4>)
   143b6:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   143b8:	1dfc      	adds	r4, r7, #7
   143ba:	2000      	movs	r0, #0
   143bc:	4b27      	ldr	r3, [pc, #156]	; (1445c <init_storage+0xb8>)
   143be:	4798      	blx	r3
   143c0:	0003      	movs	r3, r0
   143c2:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   143c4:	1dfb      	adds	r3, r7, #7
   143c6:	781b      	ldrb	r3, [r3, #0]
   143c8:	2b01      	cmp	r3, #1
   143ca:	d110      	bne.n	143ee <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   143cc:	4b24      	ldr	r3, [pc, #144]	; (14460 <init_storage+0xbc>)
   143ce:	0019      	movs	r1, r3
   143d0:	2001      	movs	r0, #1
   143d2:	4b21      	ldr	r3, [pc, #132]	; (14458 <init_storage+0xb4>)
   143d4:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   143d6:	4b23      	ldr	r3, [pc, #140]	; (14464 <init_storage+0xc0>)
   143d8:	0019      	movs	r1, r3
   143da:	2001      	movs	r0, #1
   143dc:	4b1e      	ldr	r3, [pc, #120]	; (14458 <init_storage+0xb4>)
   143de:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   143e0:	46c0      	nop			; (mov r8, r8)
   143e2:	2000      	movs	r0, #0
   143e4:	4b20      	ldr	r3, [pc, #128]	; (14468 <init_storage+0xc4>)
   143e6:	4798      	blx	r3
   143e8:	0003      	movs	r3, r0
   143ea:	2b02      	cmp	r3, #2
   143ec:	d1f9      	bne.n	143e2 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   143ee:	1dfb      	adds	r3, r7, #7
   143f0:	781b      	ldrb	r3, [r3, #0]
   143f2:	2b00      	cmp	r3, #0
   143f4:	d1e0      	bne.n	143b8 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   143f6:	4b1d      	ldr	r3, [pc, #116]	; (1446c <init_storage+0xc8>)
   143f8:	0019      	movs	r1, r3
   143fa:	2001      	movs	r0, #1
   143fc:	4b16      	ldr	r3, [pc, #88]	; (14458 <init_storage+0xb4>)
   143fe:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   14400:	238c      	movs	r3, #140	; 0x8c
   14402:	009a      	lsls	r2, r3, #2
   14404:	4b1a      	ldr	r3, [pc, #104]	; (14470 <init_storage+0xcc>)
   14406:	2100      	movs	r1, #0
   14408:	0018      	movs	r0, r3
   1440a:	4b1a      	ldr	r3, [pc, #104]	; (14474 <init_storage+0xd0>)
   1440c:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   1440e:	1dbc      	adds	r4, r7, #6
   14410:	4b17      	ldr	r3, [pc, #92]	; (14470 <init_storage+0xcc>)
   14412:	0019      	movs	r1, r3
   14414:	2000      	movs	r0, #0
   14416:	4b18      	ldr	r3, [pc, #96]	; (14478 <init_storage+0xd4>)
   14418:	4798      	blx	r3
   1441a:	0003      	movs	r3, r0
   1441c:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   1441e:	1dbb      	adds	r3, r7, #6
   14420:	781b      	ldrb	r3, [r3, #0]
   14422:	2b0b      	cmp	r3, #11
   14424:	d107      	bne.n	14436 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   14426:	1dbb      	adds	r3, r7, #6
   14428:	781a      	ldrb	r2, [r3, #0]
   1442a:	4b14      	ldr	r3, [pc, #80]	; (1447c <init_storage+0xd8>)
   1442c:	0019      	movs	r1, r3
   1442e:	2001      	movs	r0, #1
   14430:	4b09      	ldr	r3, [pc, #36]	; (14458 <init_storage+0xb4>)
   14432:	4798      	blx	r3
            return;
   14434:	e008      	b.n	14448 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   14436:	4b12      	ldr	r3, [pc, #72]	; (14480 <init_storage+0xdc>)
   14438:	0019      	movs	r1, r3
   1443a:	2001      	movs	r0, #1
   1443c:	4b06      	ldr	r3, [pc, #24]	; (14458 <init_storage+0xb4>)
   1443e:	4798      	blx	r3
        add_state(STORAGE_READY);
   14440:	2001      	movs	r0, #1
   14442:	4b10      	ldr	r3, [pc, #64]	; (14484 <init_storage+0xe0>)
   14444:	4798      	blx	r3
        return;
   14446:	46c0      	nop			; (mov r8, r8)
    }
}
   14448:	46bd      	mov	sp, r7
   1444a:	b003      	add	sp, #12
   1444c:	bd90      	pop	{r4, r7, pc}
   1444e:	46c0      	nop			; (mov r8, r8)
   14450:	0001c8ad 	.word	0x0001c8ad
   14454:	00033c38 	.word	0x00033c38
   14458:	0001ba95 	.word	0x0001ba95
   1445c:	0001cd89 	.word	0x0001cd89
   14460:	00033c70 	.word	0x00033c70
   14464:	00033c98 	.word	0x00033c98
   14468:	0001c8fd 	.word	0x0001c8fd
   1446c:	00033ccc 	.word	0x00033ccc
   14470:	2000047c 	.word	0x2000047c
   14474:	000321a3 	.word	0x000321a3
   14478:	0002b4e9 	.word	0x0002b4e9
   1447c:	00033cf0 	.word	0x00033cf0
   14480:	00033d20 	.word	0x00033d20
   14484:	00013a91 	.word	0x00013a91

00014488 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   14488:	b580      	push	{r7, lr}
   1448a:	b082      	sub	sp, #8
   1448c:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   1448e:	1d3b      	adds	r3, r7, #4
   14490:	0018      	movs	r0, r3
   14492:	4b08      	ldr	r3, [pc, #32]	; (144b4 <configure_timer+0x2c>)
   14494:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   14496:	1d3a      	adds	r2, r7, #4
   14498:	4b07      	ldr	r3, [pc, #28]	; (144b8 <configure_timer+0x30>)
   1449a:	0011      	movs	r1, r2
   1449c:	0018      	movs	r0, r3
   1449e:	4b07      	ldr	r3, [pc, #28]	; (144bc <configure_timer+0x34>)
   144a0:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   144a2:	4b05      	ldr	r3, [pc, #20]	; (144b8 <configure_timer+0x30>)
   144a4:	0018      	movs	r0, r3
   144a6:	4b06      	ldr	r3, [pc, #24]	; (144c0 <configure_timer+0x38>)
   144a8:	4798      	blx	r3
}
   144aa:	46c0      	nop			; (mov r8, r8)
   144ac:	46bd      	mov	sp, r7
   144ae:	b002      	add	sp, #8
   144b0:	bd80      	pop	{r7, pc}
   144b2:	46c0      	nop			; (mov r8, r8)
   144b4:	00030039 	.word	0x00030039
   144b8:	20004220 	.word	0x20004220
   144bc:	0003005d 	.word	0x0003005d
   144c0:	00030149 	.word	0x00030149

000144c4 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   144c4:	b580      	push	{r7, lr}
   144c6:	b088      	sub	sp, #32
   144c8:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   144ca:	003b      	movs	r3, r7
   144cc:	0018      	movs	r0, r3
   144ce:	4b15      	ldr	r3, [pc, #84]	; (14524 <configure_http_client+0x60>)
   144d0:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   144d2:	003b      	movs	r3, r7
   144d4:	2280      	movs	r2, #128	; 0x80
   144d6:	0092      	lsls	r2, r2, #2
   144d8:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   144da:	003b      	movs	r3, r7
   144dc:	4a12      	ldr	r2, [pc, #72]	; (14528 <configure_http_client+0x64>)
   144de:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 80;
   144e0:	003b      	movs	r3, r7
   144e2:	2250      	movs	r2, #80	; 0x50
   144e4:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 0;
   144e6:	003b      	movs	r3, r7
   144e8:	2200      	movs	r2, #0
   144ea:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   144ec:	003a      	movs	r2, r7
   144ee:	4b0f      	ldr	r3, [pc, #60]	; (1452c <configure_http_client+0x68>)
   144f0:	0011      	movs	r1, r2
   144f2:	0018      	movs	r0, r3
   144f4:	4b0e      	ldr	r3, [pc, #56]	; (14530 <configure_http_client+0x6c>)
   144f6:	4798      	blx	r3
   144f8:	0003      	movs	r3, r0
   144fa:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   144fc:	69fb      	ldr	r3, [r7, #28]
   144fe:	2b00      	cmp	r3, #0
   14500:	da06      	bge.n	14510 <configure_http_client+0x4c>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   14502:	69fa      	ldr	r2, [r7, #28]
   14504:	4b0b      	ldr	r3, [pc, #44]	; (14534 <configure_http_client+0x70>)
   14506:	0019      	movs	r1, r3
   14508:	2001      	movs	r0, #1
   1450a:	4b0b      	ldr	r3, [pc, #44]	; (14538 <configure_http_client+0x74>)
   1450c:	4798      	blx	r3
        while (1) {
   1450e:	e7fe      	b.n	1450e <configure_http_client+0x4a>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   14510:	4a0a      	ldr	r2, [pc, #40]	; (1453c <configure_http_client+0x78>)
   14512:	4b06      	ldr	r3, [pc, #24]	; (1452c <configure_http_client+0x68>)
   14514:	0011      	movs	r1, r2
   14516:	0018      	movs	r0, r3
   14518:	4b09      	ldr	r3, [pc, #36]	; (14540 <configure_http_client+0x7c>)
   1451a:	4798      	blx	r3
}
   1451c:	46c0      	nop			; (mov r8, r8)
   1451e:	46bd      	mov	sp, r7
   14520:	b008      	add	sp, #32
   14522:	bd80      	pop	{r7, pc}
   14524:	0002e6cd 	.word	0x0002e6cd
   14528:	20004220 	.word	0x20004220
   1452c:	20004278 	.word	0x20004278
   14530:	0002e719 	.word	0x0002e719
   14534:	00033d44 	.word	0x00033d44
   14538:	0001ba95 	.word	0x0001ba95
   1453c:	00014075 	.word	0x00014075
   14540:	0002e805 	.word	0x0002e805

00014544 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   14544:	b580      	push	{r7, lr}
   14546:	b082      	sub	sp, #8
   14548:	af00      	add	r7, sp, #0
   1454a:	603a      	str	r2, [r7, #0]
   1454c:	1dfb      	adds	r3, r7, #7
   1454e:	1c02      	adds	r2, r0, #0
   14550:	701a      	strb	r2, [r3, #0]
   14552:	1dbb      	adds	r3, r7, #6
   14554:	1c0a      	adds	r2, r1, #0
   14556:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   14558:	683a      	ldr	r2, [r7, #0]
   1455a:	1dbb      	adds	r3, r7, #6
   1455c:	7819      	ldrb	r1, [r3, #0]
   1455e:	1dfb      	adds	r3, r7, #7
   14560:	781b      	ldrb	r3, [r3, #0]
   14562:	b25b      	sxtb	r3, r3
   14564:	0018      	movs	r0, r3
   14566:	4b03      	ldr	r3, [pc, #12]	; (14574 <socket_event_handler+0x30>)
   14568:	4798      	blx	r3
}
   1456a:	46c0      	nop			; (mov r8, r8)
   1456c:	46bd      	mov	sp, r7
   1456e:	b002      	add	sp, #8
   14570:	bd80      	pop	{r7, pc}
   14572:	46c0      	nop			; (mov r8, r8)
   14574:	0002d3c5 	.word	0x0002d3c5

00014578 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   14578:	b580      	push	{r7, lr}
   1457a:	b082      	sub	sp, #8
   1457c:	af00      	add	r7, sp, #0
   1457e:	6078      	str	r0, [r7, #4]
   14580:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   14582:	683a      	ldr	r2, [r7, #0]
   14584:	687b      	ldr	r3, [r7, #4]
   14586:	0011      	movs	r1, r2
   14588:	0018      	movs	r0, r3
   1458a:	4b03      	ldr	r3, [pc, #12]	; (14598 <socket_resolve_handler+0x20>)
   1458c:	4798      	blx	r3
}
   1458e:	46c0      	nop			; (mov r8, r8)
   14590:	46bd      	mov	sp, r7
   14592:	b002      	add	sp, #8
   14594:	bd80      	pop	{r7, pc}
   14596:	46c0      	nop			; (mov r8, r8)
   14598:	0002d3f9 	.word	0x0002d3f9

0001459c <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   1459c:	b590      	push	{r4, r7, lr}
   1459e:	b089      	sub	sp, #36	; 0x24
   145a0:	af02      	add	r7, sp, #8
   145a2:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   145a4:	2310      	movs	r3, #16
   145a6:	18fb      	adds	r3, r7, r3
   145a8:	2200      	movs	r2, #0
   145aa:	701a      	strb	r2, [r3, #0]
   145ac:	2310      	movs	r3, #16
   145ae:	18fb      	adds	r3, r7, r3
   145b0:	2200      	movs	r2, #0
   145b2:	705a      	strb	r2, [r3, #1]
   145b4:	2310      	movs	r3, #16
   145b6:	18fb      	adds	r3, r7, r3
   145b8:	2200      	movs	r2, #0
   145ba:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   145bc:	687b      	ldr	r3, [r7, #4]
   145be:	685b      	ldr	r3, [r3, #4]
   145c0:	685a      	ldr	r2, [r3, #4]
   145c2:	687b      	ldr	r3, [r7, #4]
   145c4:	685b      	ldr	r3, [r3, #4]
   145c6:	689b      	ldr	r3, [r3, #8]
   145c8:	4924      	ldr	r1, [pc, #144]	; (1465c <SubscribeHandlerLedTopic+0xc0>)
   145ca:	2001      	movs	r0, #1
   145cc:	4c24      	ldr	r4, [pc, #144]	; (14660 <SubscribeHandlerLedTopic+0xc4>)
   145ce:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   145d0:	687b      	ldr	r3, [r7, #4]
   145d2:	681b      	ldr	r3, [r3, #0]
   145d4:	689b      	ldr	r3, [r3, #8]
   145d6:	4923      	ldr	r1, [pc, #140]	; (14664 <SubscribeHandlerLedTopic+0xc8>)
   145d8:	2204      	movs	r2, #4
   145da:	0018      	movs	r0, r3
   145dc:	4b22      	ldr	r3, [pc, #136]	; (14668 <SubscribeHandlerLedTopic+0xcc>)
   145de:	4798      	blx	r3
   145e0:	1e03      	subs	r3, r0, #0
   145e2:	d137      	bne.n	14654 <SubscribeHandlerLedTopic+0xb8>
        char *p = (char *)&msgData->message->payload[4];
   145e4:	687b      	ldr	r3, [r7, #4]
   145e6:	681b      	ldr	r3, [r3, #0]
   145e8:	689b      	ldr	r3, [r3, #8]
   145ea:	3304      	adds	r3, #4
   145ec:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   145ee:	2300      	movs	r3, #0
   145f0:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   145f2:	e015      	b.n	14620 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   145f4:	697c      	ldr	r4, [r7, #20]
   145f6:	1c63      	adds	r3, r4, #1
   145f8:	617b      	str	r3, [r7, #20]
   145fa:	68fb      	ldr	r3, [r7, #12]
   145fc:	220c      	movs	r2, #12
   145fe:	18b9      	adds	r1, r7, r2
   14600:	220a      	movs	r2, #10
   14602:	0018      	movs	r0, r3
   14604:	4b19      	ldr	r3, [pc, #100]	; (1466c <SubscribeHandlerLedTopic+0xd0>)
   14606:	4798      	blx	r3
   14608:	0003      	movs	r3, r0
   1460a:	b2da      	uxtb	r2, r3
   1460c:	2310      	movs	r3, #16
   1460e:	18fb      	adds	r3, r7, r3
   14610:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   14612:	68fb      	ldr	r3, [r7, #12]
   14614:	781b      	ldrb	r3, [r3, #0]
   14616:	2b2c      	cmp	r3, #44	; 0x2c
   14618:	d10a      	bne.n	14630 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   1461a:	68fb      	ldr	r3, [r7, #12]
   1461c:	3301      	adds	r3, #1
   1461e:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   14620:	697b      	ldr	r3, [r7, #20]
   14622:	2b02      	cmp	r3, #2
   14624:	dc05      	bgt.n	14632 <SubscribeHandlerLedTopic+0x96>
   14626:	68fb      	ldr	r3, [r7, #12]
   14628:	781b      	ldrb	r3, [r3, #0]
   1462a:	2b00      	cmp	r3, #0
   1462c:	d1e2      	bne.n	145f4 <SubscribeHandlerLedTopic+0x58>
   1462e:	e000      	b.n	14632 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   14630:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   14632:	2310      	movs	r3, #16
   14634:	18fb      	adds	r3, r7, r3
   14636:	781b      	ldrb	r3, [r3, #0]
   14638:	001a      	movs	r2, r3
   1463a:	2310      	movs	r3, #16
   1463c:	18fb      	adds	r3, r7, r3
   1463e:	785b      	ldrb	r3, [r3, #1]
   14640:	0018      	movs	r0, r3
   14642:	2310      	movs	r3, #16
   14644:	18fb      	adds	r3, r7, r3
   14646:	789b      	ldrb	r3, [r3, #2]
   14648:	4909      	ldr	r1, [pc, #36]	; (14670 <SubscribeHandlerLedTopic+0xd4>)
   1464a:	9300      	str	r3, [sp, #0]
   1464c:	0003      	movs	r3, r0
   1464e:	2001      	movs	r0, #1
   14650:	4c03      	ldr	r4, [pc, #12]	; (14660 <SubscribeHandlerLedTopic+0xc4>)
   14652:	47a0      	blx	r4
    }
}
   14654:	46c0      	nop			; (mov r8, r8)
   14656:	46bd      	mov	sp, r7
   14658:	b007      	add	sp, #28
   1465a:	bd90      	pop	{r4, r7, pc}
   1465c:	00033d8c 	.word	0x00033d8c
   14660:	0001ba95 	.word	0x0001ba95
   14664:	00033d94 	.word	0x00033d94
   14668:	00032569 	.word	0x00032569
   1466c:	00032715 	.word	0x00032715
   14670:	00033d9c 	.word	0x00033d9c

00014674 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   14674:	b590      	push	{r4, r7, lr}
   14676:	b08b      	sub	sp, #44	; 0x2c
   14678:	af00      	add	r7, sp, #0
   1467a:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   1467c:	230c      	movs	r3, #12
   1467e:	18fb      	adds	r3, r7, r3
   14680:	2214      	movs	r2, #20
   14682:	21ff      	movs	r1, #255	; 0xff
   14684:	0018      	movs	r0, r3
   14686:	4b41      	ldr	r3, [pc, #260]	; (1478c <SubscribeHandlerGameTopic+0x118>)
   14688:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   1468a:	687b      	ldr	r3, [r7, #4]
   1468c:	681b      	ldr	r3, [r3, #0]
   1468e:	689b      	ldr	r3, [r3, #8]
   14690:	493f      	ldr	r1, [pc, #252]	; (14790 <SubscribeHandlerGameTopic+0x11c>)
   14692:	2209      	movs	r2, #9
   14694:	0018      	movs	r0, r3
   14696:	4b3f      	ldr	r3, [pc, #252]	; (14794 <SubscribeHandlerGameTopic+0x120>)
   14698:	4798      	blx	r3
   1469a:	1e03      	subs	r3, r0, #0
   1469c:	d159      	bne.n	14752 <SubscribeHandlerGameTopic+0xde>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   1469e:	4b3e      	ldr	r3, [pc, #248]	; (14798 <SubscribeHandlerGameTopic+0x124>)
   146a0:	0019      	movs	r1, r3
   146a2:	2001      	movs	r0, #1
   146a4:	4b3d      	ldr	r3, [pc, #244]	; (1479c <SubscribeHandlerGameTopic+0x128>)
   146a6:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   146a8:	687b      	ldr	r3, [r7, #4]
   146aa:	685b      	ldr	r3, [r3, #4]
   146ac:	685a      	ldr	r2, [r3, #4]
   146ae:	687b      	ldr	r3, [r7, #4]
   146b0:	685b      	ldr	r3, [r3, #4]
   146b2:	689b      	ldr	r3, [r3, #8]
   146b4:	493a      	ldr	r1, [pc, #232]	; (147a0 <SubscribeHandlerGameTopic+0x12c>)
   146b6:	2001      	movs	r0, #1
   146b8:	4c38      	ldr	r4, [pc, #224]	; (1479c <SubscribeHandlerGameTopic+0x128>)
   146ba:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   146bc:	687b      	ldr	r3, [r7, #4]
   146be:	681b      	ldr	r3, [r3, #0]
   146c0:	68da      	ldr	r2, [r3, #12]
   146c2:	687b      	ldr	r3, [r7, #4]
   146c4:	681b      	ldr	r3, [r3, #0]
   146c6:	689b      	ldr	r3, [r3, #8]
   146c8:	4936      	ldr	r1, [pc, #216]	; (147a4 <SubscribeHandlerGameTopic+0x130>)
   146ca:	2001      	movs	r0, #1
   146cc:	4c33      	ldr	r4, [pc, #204]	; (1479c <SubscribeHandlerGameTopic+0x128>)
   146ce:	47a0      	blx	r4

        int nb = 0;
   146d0:	2300      	movs	r3, #0
   146d2:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   146d4:	687b      	ldr	r3, [r7, #4]
   146d6:	681b      	ldr	r3, [r3, #0]
   146d8:	689b      	ldr	r3, [r3, #8]
   146da:	3309      	adds	r3, #9
   146dc:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   146de:	e015      	b.n	1470c <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   146e0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   146e2:	1c63      	adds	r3, r4, #1
   146e4:	627b      	str	r3, [r7, #36]	; 0x24
   146e6:	68bb      	ldr	r3, [r7, #8]
   146e8:	2208      	movs	r2, #8
   146ea:	18b9      	adds	r1, r7, r2
   146ec:	220a      	movs	r2, #10
   146ee:	0018      	movs	r0, r3
   146f0:	4b2d      	ldr	r3, [pc, #180]	; (147a8 <SubscribeHandlerGameTopic+0x134>)
   146f2:	4798      	blx	r3
   146f4:	0003      	movs	r3, r0
   146f6:	b2da      	uxtb	r2, r3
   146f8:	230c      	movs	r3, #12
   146fa:	18fb      	adds	r3, r7, r3
   146fc:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   146fe:	68bb      	ldr	r3, [r7, #8]
   14700:	781b      	ldrb	r3, [r3, #0]
   14702:	2b2c      	cmp	r3, #44	; 0x2c
   14704:	d10a      	bne.n	1471c <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   14706:	68bb      	ldr	r3, [r7, #8]
   14708:	3301      	adds	r3, #1
   1470a:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   1470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1470e:	2b13      	cmp	r3, #19
   14710:	dc05      	bgt.n	1471e <SubscribeHandlerGameTopic+0xaa>
   14712:	68bb      	ldr	r3, [r7, #8]
   14714:	781b      	ldrb	r3, [r3, #0]
   14716:	2b00      	cmp	r3, #0
   14718:	d1e2      	bne.n	146e0 <SubscribeHandlerGameTopic+0x6c>
   1471a:	e000      	b.n	1471e <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   1471c:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   1471e:	4b23      	ldr	r3, [pc, #140]	; (147ac <SubscribeHandlerGameTopic+0x138>)
   14720:	0019      	movs	r1, r3
   14722:	2001      	movs	r0, #1
   14724:	4b1d      	ldr	r3, [pc, #116]	; (1479c <SubscribeHandlerGameTopic+0x128>)
   14726:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   14728:	2300      	movs	r3, #0
   1472a:	623b      	str	r3, [r7, #32]
   1472c:	e00d      	b.n	1474a <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   1472e:	230c      	movs	r3, #12
   14730:	18fa      	adds	r2, r7, r3
   14732:	6a3b      	ldr	r3, [r7, #32]
   14734:	18d3      	adds	r3, r2, r3
   14736:	781b      	ldrb	r3, [r3, #0]
   14738:	001a      	movs	r2, r3
   1473a:	4b1d      	ldr	r3, [pc, #116]	; (147b0 <SubscribeHandlerGameTopic+0x13c>)
   1473c:	0019      	movs	r1, r3
   1473e:	2001      	movs	r0, #1
   14740:	4b16      	ldr	r3, [pc, #88]	; (1479c <SubscribeHandlerGameTopic+0x128>)
   14742:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   14744:	6a3b      	ldr	r3, [r7, #32]
   14746:	3301      	adds	r3, #1
   14748:	623b      	str	r3, [r7, #32]
   1474a:	6a3b      	ldr	r3, [r7, #32]
   1474c:	2b13      	cmp	r3, #19
   1474e:	ddee      	ble.n	1472e <SubscribeHandlerGameTopic+0xba>
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   14750:	e018      	b.n	14784 <SubscribeHandlerGameTopic+0x110>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   14752:	4b18      	ldr	r3, [pc, #96]	; (147b4 <SubscribeHandlerGameTopic+0x140>)
   14754:	0019      	movs	r1, r3
   14756:	2001      	movs	r0, #1
   14758:	4b10      	ldr	r3, [pc, #64]	; (1479c <SubscribeHandlerGameTopic+0x128>)
   1475a:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1475c:	687b      	ldr	r3, [r7, #4]
   1475e:	685b      	ldr	r3, [r3, #4]
   14760:	685a      	ldr	r2, [r3, #4]
   14762:	687b      	ldr	r3, [r7, #4]
   14764:	685b      	ldr	r3, [r3, #4]
   14766:	689b      	ldr	r3, [r3, #8]
   14768:	490d      	ldr	r1, [pc, #52]	; (147a0 <SubscribeHandlerGameTopic+0x12c>)
   1476a:	2001      	movs	r0, #1
   1476c:	4c0b      	ldr	r4, [pc, #44]	; (1479c <SubscribeHandlerGameTopic+0x128>)
   1476e:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   14770:	687b      	ldr	r3, [r7, #4]
   14772:	681b      	ldr	r3, [r3, #0]
   14774:	68da      	ldr	r2, [r3, #12]
   14776:	687b      	ldr	r3, [r7, #4]
   14778:	681b      	ldr	r3, [r3, #0]
   1477a:	689b      	ldr	r3, [r3, #8]
   1477c:	4909      	ldr	r1, [pc, #36]	; (147a4 <SubscribeHandlerGameTopic+0x130>)
   1477e:	2001      	movs	r0, #1
   14780:	4c06      	ldr	r4, [pc, #24]	; (1479c <SubscribeHandlerGameTopic+0x128>)
   14782:	47a0      	blx	r4
}
   14784:	46c0      	nop			; (mov r8, r8)
   14786:	46bd      	mov	sp, r7
   14788:	b00b      	add	sp, #44	; 0x2c
   1478a:	bd90      	pop	{r4, r7, pc}
   1478c:	000321a3 	.word	0x000321a3
   14790:	00033db0 	.word	0x00033db0
   14794:	00032569 	.word	0x00032569
   14798:	00033dbc 	.word	0x00033dbc
   1479c:	0001ba95 	.word	0x0001ba95
   147a0:	00033d8c 	.word	0x00033d8c
   147a4:	00033dd8 	.word	0x00033dd8
   147a8:	00032715 	.word	0x00032715
   147ac:	00033de0 	.word	0x00033de0
   147b0:	00033df4 	.word	0x00033df4
   147b4:	00033df8 	.word	0x00033df8

000147b8 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   147b8:	b590      	push	{r4, r7, lr}
   147ba:	b083      	sub	sp, #12
   147bc:	af00      	add	r7, sp, #0
   147be:	6078      	str	r0, [r7, #4]
    LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
   147c0:	4b09      	ldr	r3, [pc, #36]	; (147e8 <SubscribeHandlerImuTopic+0x30>)
   147c2:	0019      	movs	r1, r3
   147c4:	2001      	movs	r0, #1
   147c6:	4b09      	ldr	r3, [pc, #36]	; (147ec <SubscribeHandlerImuTopic+0x34>)
   147c8:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   147ca:	687b      	ldr	r3, [r7, #4]
   147cc:	685b      	ldr	r3, [r3, #4]
   147ce:	685a      	ldr	r2, [r3, #4]
   147d0:	687b      	ldr	r3, [r7, #4]
   147d2:	685b      	ldr	r3, [r3, #4]
   147d4:	689b      	ldr	r3, [r3, #8]
   147d6:	4906      	ldr	r1, [pc, #24]	; (147f0 <SubscribeHandlerImuTopic+0x38>)
   147d8:	2001      	movs	r0, #1
   147da:	4c04      	ldr	r4, [pc, #16]	; (147ec <SubscribeHandlerImuTopic+0x34>)
   147dc:	47a0      	blx	r4
}
   147de:	46c0      	nop			; (mov r8, r8)
   147e0:	46bd      	mov	sp, r7
   147e2:	b003      	add	sp, #12
   147e4:	bd90      	pop	{r4, r7, pc}
   147e6:	46c0      	nop			; (mov r8, r8)
   147e8:	00033e28 	.word	0x00033e28
   147ec:	0001ba95 	.word	0x0001ba95
   147f0:	00033d8c 	.word	0x00033d8c

000147f4 <SubscribeHandlerDebug1Topic>:
        }
    }
}

void SubscribeHandlerDebug1Topic(MessageData *msgData)
{
   147f4:	b580      	push	{r7, lr}
   147f6:	b082      	sub	sp, #8
   147f8:	af00      	add	r7, sp, #0
   147fa:	6078      	str	r0, [r7, #4]
    port_pin_toggle_output_level(LED_0_PIN);
   147fc:	2017      	movs	r0, #23
   147fe:	4b03      	ldr	r3, [pc, #12]	; (1480c <SubscribeHandlerDebug1Topic+0x18>)
   14800:	4798      	blx	r3
}
   14802:	46c0      	nop			; (mov r8, r8)
   14804:	46bd      	mov	sp, r7
   14806:	b002      	add	sp, #8
   14808:	bd80      	pop	{r7, pc}
   1480a:	46c0      	nop			; (mov r8, r8)
   1480c:	00013a0d 	.word	0x00013a0d

00014810 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   14810:	b590      	push	{r4, r7, lr}
   14812:	b08b      	sub	sp, #44	; 0x2c
   14814:	af06      	add	r7, sp, #24
   14816:	60f8      	str	r0, [r7, #12]
   14818:	60b9      	str	r1, [r7, #8]
   1481a:	607a      	str	r2, [r7, #4]
    switch (type) {
   1481c:	68bb      	ldr	r3, [r7, #8]
   1481e:	2b01      	cmp	r3, #1
   14820:	d03b      	beq.n	1489a <mqtt_callback+0x8a>
   14822:	2b05      	cmp	r3, #5
   14824:	d064      	beq.n	148f0 <mqtt_callback+0xe0>
   14826:	2b00      	cmp	r3, #0
   14828:	d000      	beq.n	1482c <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   1482a:	e067      	b.n	148fc <mqtt_callback+0xec>
            if (data->sock_connected.result >= 0) {
   1482c:	687b      	ldr	r3, [r7, #4]
   1482e:	681b      	ldr	r3, [r3, #0]
   14830:	2b00      	cmp	r3, #0
   14832:	db25      	blt.n	14880 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   14834:	4b33      	ldr	r3, [pc, #204]	; (14904 <mqtt_callback+0xf4>)
   14836:	0019      	movs	r1, r3
   14838:	2001      	movs	r0, #1
   1483a:	4b33      	ldr	r3, [pc, #204]	; (14908 <mqtt_callback+0xf8>)
   1483c:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   1483e:	4933      	ldr	r1, [pc, #204]	; (1490c <mqtt_callback+0xfc>)
   14840:	4a33      	ldr	r2, [pc, #204]	; (14910 <mqtt_callback+0x100>)
   14842:	68f8      	ldr	r0, [r7, #12]
   14844:	2300      	movs	r3, #0
   14846:	9305      	str	r3, [sp, #20]
   14848:	2300      	movs	r3, #0
   1484a:	9304      	str	r3, [sp, #16]
   1484c:	2300      	movs	r3, #0
   1484e:	9303      	str	r3, [sp, #12]
   14850:	2300      	movs	r3, #0
   14852:	9302      	str	r3, [sp, #8]
   14854:	2300      	movs	r3, #0
   14856:	9301      	str	r3, [sp, #4]
   14858:	4b2d      	ldr	r3, [pc, #180]	; (14910 <mqtt_callback+0x100>)
   1485a:	9300      	str	r3, [sp, #0]
   1485c:	000b      	movs	r3, r1
   1485e:	2101      	movs	r1, #1
   14860:	4c2c      	ldr	r4, [pc, #176]	; (14914 <mqtt_callback+0x104>)
   14862:	47a0      	blx	r4
   14864:	1e03      	subs	r3, r0, #0
   14866:	d005      	beq.n	14874 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   14868:	4b2b      	ldr	r3, [pc, #172]	; (14918 <mqtt_callback+0x108>)
   1486a:	0019      	movs	r1, r3
   1486c:	2001      	movs	r0, #1
   1486e:	4b26      	ldr	r3, [pc, #152]	; (14908 <mqtt_callback+0xf8>)
   14870:	4798      	blx	r3
        } break;
   14872:	e043      	b.n	148fc <mqtt_callback+0xec>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   14874:	4b29      	ldr	r3, [pc, #164]	; (1491c <mqtt_callback+0x10c>)
   14876:	0019      	movs	r1, r3
   14878:	2001      	movs	r0, #1
   1487a:	4b23      	ldr	r3, [pc, #140]	; (14908 <mqtt_callback+0xf8>)
   1487c:	4798      	blx	r3
        } break;
   1487e:	e03d      	b.n	148fc <mqtt_callback+0xec>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   14880:	4a27      	ldr	r2, [pc, #156]	; (14920 <mqtt_callback+0x110>)
   14882:	4b28      	ldr	r3, [pc, #160]	; (14924 <mqtt_callback+0x114>)
   14884:	0019      	movs	r1, r3
   14886:	2001      	movs	r0, #1
   14888:	4b1f      	ldr	r3, [pc, #124]	; (14908 <mqtt_callback+0xf8>)
   1488a:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   1488c:	4a24      	ldr	r2, [pc, #144]	; (14920 <mqtt_callback+0x110>)
   1488e:	68fb      	ldr	r3, [r7, #12]
   14890:	0011      	movs	r1, r2
   14892:	0018      	movs	r0, r3
   14894:	4b24      	ldr	r3, [pc, #144]	; (14928 <mqtt_callback+0x118>)
   14896:	4798      	blx	r3
        } break;
   14898:	e030      	b.n	148fc <mqtt_callback+0xec>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   1489a:	687b      	ldr	r3, [r7, #4]
   1489c:	781b      	ldrb	r3, [r3, #0]
   1489e:	2b00      	cmp	r3, #0
   148a0:	d11d      	bne.n	148de <mqtt_callback+0xce>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   148a2:	4b22      	ldr	r3, [pc, #136]	; (1492c <mqtt_callback+0x11c>)
   148a4:	4922      	ldr	r1, [pc, #136]	; (14930 <mqtt_callback+0x120>)
   148a6:	68f8      	ldr	r0, [r7, #12]
   148a8:	2202      	movs	r2, #2
   148aa:	4c22      	ldr	r4, [pc, #136]	; (14934 <mqtt_callback+0x124>)
   148ac:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   148ae:	4b22      	ldr	r3, [pc, #136]	; (14938 <mqtt_callback+0x128>)
   148b0:	4922      	ldr	r1, [pc, #136]	; (1493c <mqtt_callback+0x12c>)
   148b2:	68f8      	ldr	r0, [r7, #12]
   148b4:	2202      	movs	r2, #2
   148b6:	4c1f      	ldr	r4, [pc, #124]	; (14934 <mqtt_callback+0x124>)
   148b8:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   148ba:	4b21      	ldr	r3, [pc, #132]	; (14940 <mqtt_callback+0x130>)
   148bc:	4921      	ldr	r1, [pc, #132]	; (14944 <mqtt_callback+0x134>)
   148be:	68f8      	ldr	r0, [r7, #12]
   148c0:	2202      	movs	r2, #2
   148c2:	4c1c      	ldr	r4, [pc, #112]	; (14934 <mqtt_callback+0x124>)
   148c4:	47a0      	blx	r4
                mqtt_subscribe(module_inst, DEBUG_TOPIC_1, 2, SubscribeHandlerDebug1Topic);
   148c6:	4b20      	ldr	r3, [pc, #128]	; (14948 <mqtt_callback+0x138>)
   148c8:	4920      	ldr	r1, [pc, #128]	; (1494c <mqtt_callback+0x13c>)
   148ca:	68f8      	ldr	r0, [r7, #12]
   148cc:	2202      	movs	r2, #2
   148ce:	4c19      	ldr	r4, [pc, #100]	; (14934 <mqtt_callback+0x124>)
   148d0:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   148d2:	4b1f      	ldr	r3, [pc, #124]	; (14950 <mqtt_callback+0x140>)
   148d4:	0019      	movs	r1, r3
   148d6:	2001      	movs	r0, #1
   148d8:	4b0b      	ldr	r3, [pc, #44]	; (14908 <mqtt_callback+0xf8>)
   148da:	4798      	blx	r3
            break;
   148dc:	e00e      	b.n	148fc <mqtt_callback+0xec>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   148de:	687b      	ldr	r3, [r7, #4]
   148e0:	781b      	ldrb	r3, [r3, #0]
   148e2:	001a      	movs	r2, r3
   148e4:	4b1b      	ldr	r3, [pc, #108]	; (14954 <mqtt_callback+0x144>)
   148e6:	0019      	movs	r1, r3
   148e8:	2001      	movs	r0, #1
   148ea:	4b07      	ldr	r3, [pc, #28]	; (14908 <mqtt_callback+0xf8>)
   148ec:	4798      	blx	r3
            break;
   148ee:	e005      	b.n	148fc <mqtt_callback+0xec>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   148f0:	4b19      	ldr	r3, [pc, #100]	; (14958 <mqtt_callback+0x148>)
   148f2:	0019      	movs	r1, r3
   148f4:	2001      	movs	r0, #1
   148f6:	4b04      	ldr	r3, [pc, #16]	; (14908 <mqtt_callback+0xf8>)
   148f8:	4798      	blx	r3
            break;
   148fa:	46c0      	nop			; (mov r8, r8)
}
   148fc:	46c0      	nop			; (mov r8, r8)
   148fe:	46bd      	mov	sp, r7
   14900:	b005      	add	sp, #20
   14902:	bd90      	pop	{r4, r7, pc}
   14904:	00033e8c 	.word	0x00033e8c
   14908:	0001ba95 	.word	0x0001ba95
   1490c:	00033ea8 	.word	0x00033ea8
   14910:	00033eb8 	.word	0x00033eb8
   14914:	0002d465 	.word	0x0002d465
   14918:	00033ec4 	.word	0x00033ec4
   1491c:	00033eec 	.word	0x00033eec
   14920:	0003380c 	.word	0x0003380c
   14924:	00033f08 	.word	0x00033f08
   14928:	0002d41d 	.word	0x0002d41d
   1492c:	00014675 	.word	0x00014675
   14930:	00033f40 	.word	0x00033f40
   14934:	0002d605 	.word	0x0002d605
   14938:	0001459d 	.word	0x0001459d
   1493c:	00033e68 	.word	0x00033e68
   14940:	000147b9 	.word	0x000147b9
   14944:	00033f54 	.word	0x00033f54
   14948:	000147f5 	.word	0x000147f5
   1494c:	00033f68 	.word	0x00033f68
   14950:	00033f74 	.word	0x00033f74
   14954:	00033f88 	.word	0x00033f88
   14958:	00033fbc 	.word	0x00033fbc

0001495c <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   1495c:	b580      	push	{r7, lr}
   1495e:	b088      	sub	sp, #32
   14960:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   14962:	1d3b      	adds	r3, r7, #4
   14964:	0018      	movs	r0, r3
   14966:	4b1f      	ldr	r3, [pc, #124]	; (149e4 <configure_mqtt+0x88>)
   14968:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   1496a:	1d3b      	adds	r3, r7, #4
   1496c:	4a1e      	ldr	r2, [pc, #120]	; (149e8 <configure_mqtt+0x8c>)
   1496e:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   14970:	1d3b      	adds	r3, r7, #4
   14972:	2280      	movs	r2, #128	; 0x80
   14974:	0092      	lsls	r2, r2, #2
   14976:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   14978:	1d3b      	adds	r3, r7, #4
   1497a:	4a1c      	ldr	r2, [pc, #112]	; (149ec <configure_mqtt+0x90>)
   1497c:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1497e:	1d3b      	adds	r3, r7, #4
   14980:	2280      	movs	r2, #128	; 0x80
   14982:	0092      	lsls	r2, r2, #2
   14984:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   14986:	1d3b      	adds	r3, r7, #4
   14988:	4a19      	ldr	r2, [pc, #100]	; (149f0 <configure_mqtt+0x94>)
   1498a:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   1498c:	1d3b      	adds	r3, r7, #4
   1498e:	4a19      	ldr	r2, [pc, #100]	; (149f4 <configure_mqtt+0x98>)
   14990:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   14992:	1d3a      	adds	r2, r7, #4
   14994:	4b18      	ldr	r3, [pc, #96]	; (149f8 <configure_mqtt+0x9c>)
   14996:	0011      	movs	r1, r2
   14998:	0018      	movs	r0, r3
   1499a:	4b18      	ldr	r3, [pc, #96]	; (149fc <configure_mqtt+0xa0>)
   1499c:	4798      	blx	r3
   1499e:	0003      	movs	r3, r0
   149a0:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   149a2:	69fb      	ldr	r3, [r7, #28]
   149a4:	2b00      	cmp	r3, #0
   149a6:	da06      	bge.n	149b6 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   149a8:	69fa      	ldr	r2, [r7, #28]
   149aa:	4b15      	ldr	r3, [pc, #84]	; (14a00 <configure_mqtt+0xa4>)
   149ac:	0019      	movs	r1, r3
   149ae:	2001      	movs	r0, #1
   149b0:	4b14      	ldr	r3, [pc, #80]	; (14a04 <configure_mqtt+0xa8>)
   149b2:	4798      	blx	r3
        while (1) {
   149b4:	e7fe      	b.n	149b4 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   149b6:	4a14      	ldr	r2, [pc, #80]	; (14a08 <configure_mqtt+0xac>)
   149b8:	4b0f      	ldr	r3, [pc, #60]	; (149f8 <configure_mqtt+0x9c>)
   149ba:	0011      	movs	r1, r2
   149bc:	0018      	movs	r0, r3
   149be:	4b13      	ldr	r3, [pc, #76]	; (14a0c <configure_mqtt+0xb0>)
   149c0:	4798      	blx	r3
   149c2:	0003      	movs	r3, r0
   149c4:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   149c6:	69fb      	ldr	r3, [r7, #28]
   149c8:	2b00      	cmp	r3, #0
   149ca:	da06      	bge.n	149da <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   149cc:	69fa      	ldr	r2, [r7, #28]
   149ce:	4b10      	ldr	r3, [pc, #64]	; (14a10 <configure_mqtt+0xb4>)
   149d0:	0019      	movs	r1, r3
   149d2:	2001      	movs	r0, #1
   149d4:	4b0b      	ldr	r3, [pc, #44]	; (14a04 <configure_mqtt+0xa8>)
   149d6:	4798      	blx	r3
        while (1) {
   149d8:	e7fe      	b.n	149d8 <configure_mqtt+0x7c>
        }
    }
}
   149da:	46c0      	nop			; (mov r8, r8)
   149dc:	46bd      	mov	sp, r7
   149de:	b008      	add	sp, #32
   149e0:	bd80      	pop	{r7, pc}
   149e2:	46c0      	nop			; (mov r8, r8)
   149e4:	0002d35d 	.word	0x0002d35d
   149e8:	20000710 	.word	0x20000710
   149ec:	20000910 	.word	0x20000910
   149f0:	0000075b 	.word	0x0000075b
   149f4:	00001770 	.word	0x00001770
   149f8:	200006d8 	.word	0x200006d8
   149fc:	0002d2ad 	.word	0x0002d2ad
   14a00:	00033fd0 	.word	0x00033fd0
   14a04:	0001ba95 	.word	0x0001ba95
   14a08:	00014811 	.word	0x00014811
   14a0c:	0002d39d 	.word	0x0002d39d
   14a10:	00034004 	.word	0x00034004

00014a14 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   14a14:	b580      	push	{r7, lr}
   14a16:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   14a18:	4a15      	ldr	r2, [pc, #84]	; (14a70 <HTTP_DownloadFileInit+0x5c>)
   14a1a:	4b16      	ldr	r3, [pc, #88]	; (14a74 <HTTP_DownloadFileInit+0x60>)
   14a1c:	0011      	movs	r1, r2
   14a1e:	0018      	movs	r0, r3
   14a20:	4b15      	ldr	r3, [pc, #84]	; (14a78 <HTTP_DownloadFileInit+0x64>)
   14a22:	4798      	blx	r3
   14a24:	1e03      	subs	r3, r0, #0
   14a26:	d008      	beq.n	14a3a <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   14a28:	4b14      	ldr	r3, [pc, #80]	; (14a7c <HTTP_DownloadFileInit+0x68>)
   14a2a:	0019      	movs	r1, r3
   14a2c:	2001      	movs	r0, #1
   14a2e:	4b14      	ldr	r3, [pc, #80]	; (14a80 <HTTP_DownloadFileInit+0x6c>)
   14a30:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   14a32:	e002      	b.n	14a3a <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   14a34:	2000      	movs	r0, #0
   14a36:	4b13      	ldr	r3, [pc, #76]	; (14a84 <HTTP_DownloadFileInit+0x70>)
   14a38:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   14a3a:	4b0e      	ldr	r3, [pc, #56]	; (14a74 <HTTP_DownloadFileInit+0x60>)
   14a3c:	2234      	movs	r2, #52	; 0x34
   14a3e:	5c9b      	ldrb	r3, [r3, r2]
   14a40:	2b00      	cmp	r3, #0
   14a42:	d1f7      	bne.n	14a34 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   14a44:	4b10      	ldr	r3, [pc, #64]	; (14a88 <HTTP_DownloadFileInit+0x74>)
   14a46:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   14a48:	4b10      	ldr	r3, [pc, #64]	; (14a8c <HTTP_DownloadFileInit+0x78>)
   14a4a:	2201      	movs	r2, #1
   14a4c:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   14a4e:	4a10      	ldr	r2, [pc, #64]	; (14a90 <HTTP_DownloadFileInit+0x7c>)
   14a50:	4b10      	ldr	r3, [pc, #64]	; (14a94 <HTTP_DownloadFileInit+0x80>)
   14a52:	0011      	movs	r1, r2
   14a54:	0018      	movs	r0, r3
   14a56:	4b10      	ldr	r3, [pc, #64]	; (14a98 <HTTP_DownloadFileInit+0x84>)
   14a58:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   14a5a:	4b10      	ldr	r3, [pc, #64]	; (14a9c <HTTP_DownloadFileInit+0x88>)
   14a5c:	4798      	blx	r3

    start_download();
   14a5e:	4b10      	ldr	r3, [pc, #64]	; (14aa0 <HTTP_DownloadFileInit+0x8c>)
   14a60:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   14a62:	4b10      	ldr	r3, [pc, #64]	; (14aa4 <HTTP_DownloadFileInit+0x90>)
   14a64:	2203      	movs	r2, #3
   14a66:	701a      	strb	r2, [r3, #0]
}
   14a68:	46c0      	nop			; (mov r8, r8)
   14a6a:	46bd      	mov	sp, r7
   14a6c:	bd80      	pop	{r7, pc}
   14a6e:	46c0      	nop			; (mov r8, r8)
   14a70:	0003380c 	.word	0x0003380c
   14a74:	200006d8 	.word	0x200006d8
   14a78:	0002d551 	.word	0x0002d551
   14a7c:	00033c14 	.word	0x00033c14
   14a80:	0001ba95 	.word	0x0001ba95
   14a84:	0001fb85 	.word	0x0001fb85
   14a88:	00023141 	.word	0x00023141
   14a8c:	20000478 	.word	0x20000478
   14a90:	000141f1 	.word	0x000141f1
   14a94:	000141bd 	.word	0x000141bd
   14a98:	00023189 	.word	0x00023189
   14a9c:	000230f1 	.word	0x000230f1
   14aa0:	00013de1 	.word	0x00013de1
   14aa4:	20000464 	.word	0x20000464

00014aa8 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   14aa8:	b590      	push	{r4, r7, lr}
   14aaa:	b085      	sub	sp, #20
   14aac:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   14aae:	e009      	b.n	14ac4 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   14ab0:	2000      	movs	r0, #0
   14ab2:	4b2a      	ldr	r3, [pc, #168]	; (14b5c <HTTP_DownloadFileTransaction+0xb4>)
   14ab4:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   14ab6:	4b2a      	ldr	r3, [pc, #168]	; (14b60 <HTTP_DownloadFileTransaction+0xb8>)
   14ab8:	0018      	movs	r0, r3
   14aba:	4b2a      	ldr	r3, [pc, #168]	; (14b64 <HTTP_DownloadFileTransaction+0xbc>)
   14abc:	4798      	blx	r3
        vTaskDelay(5);
   14abe:	2005      	movs	r0, #5
   14ac0:	4b29      	ldr	r3, [pc, #164]	; (14b68 <HTTP_DownloadFileTransaction+0xc0>)
   14ac2:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   14ac4:	2010      	movs	r0, #16
   14ac6:	4b29      	ldr	r3, [pc, #164]	; (14b6c <HTTP_DownloadFileTransaction+0xc4>)
   14ac8:	4798      	blx	r3
   14aca:	0003      	movs	r3, r0
   14acc:	001a      	movs	r2, r3
   14ace:	2301      	movs	r3, #1
   14ad0:	4053      	eors	r3, r2
   14ad2:	b2db      	uxtb	r3, r3
   14ad4:	2b00      	cmp	r3, #0
   14ad6:	d009      	beq.n	14aec <HTTP_DownloadFileTransaction+0x44>
   14ad8:	2020      	movs	r0, #32
   14ada:	4b24      	ldr	r3, [pc, #144]	; (14b6c <HTTP_DownloadFileTransaction+0xc4>)
   14adc:	4798      	blx	r3
   14ade:	0003      	movs	r3, r0
   14ae0:	001a      	movs	r2, r3
   14ae2:	2301      	movs	r3, #1
   14ae4:	4053      	eors	r3, r2
   14ae6:	b2db      	uxtb	r3, r3
   14ae8:	2b00      	cmp	r3, #0
   14aea:	d1e1      	bne.n	14ab0 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   14aec:	4b20      	ldr	r3, [pc, #128]	; (14b70 <HTTP_DownloadFileTransaction+0xc8>)
   14aee:	4798      	blx	r3
    vTaskDelay(1000);
   14af0:	23fa      	movs	r3, #250	; 0xfa
   14af2:	009b      	lsls	r3, r3, #2
   14af4:	0018      	movs	r0, r3
   14af6:	4b1c      	ldr	r3, [pc, #112]	; (14b68 <HTTP_DownloadFileTransaction+0xc0>)
   14af8:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   14afa:	4b1e      	ldr	r3, [pc, #120]	; (14b74 <HTTP_DownloadFileTransaction+0xcc>)
   14afc:	2200      	movs	r2, #0
   14afe:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   14b00:	003b      	movs	r3, r7
   14b02:	4a1d      	ldr	r2, [pc, #116]	; (14b78 <HTTP_DownloadFileTransaction+0xd0>)
   14b04:	ca13      	ldmia	r2!, {r0, r1, r4}
   14b06:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   14b08:	003b      	movs	r3, r7
   14b0a:	2230      	movs	r2, #48	; 0x30
   14b0c:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   14b0e:	230f      	movs	r3, #15
   14b10:	18fc      	adds	r4, r7, r3
   14b12:	0039      	movs	r1, r7
   14b14:	4b19      	ldr	r3, [pc, #100]	; (14b7c <HTTP_DownloadFileTransaction+0xd4>)
   14b16:	220a      	movs	r2, #10
   14b18:	0018      	movs	r0, r3
   14b1a:	4b19      	ldr	r3, [pc, #100]	; (14b80 <HTTP_DownloadFileTransaction+0xd8>)
   14b1c:	4798      	blx	r3
   14b1e:	0003      	movs	r3, r0
   14b20:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   14b22:	230f      	movs	r3, #15
   14b24:	18fb      	adds	r3, r7, r3
   14b26:	781b      	ldrb	r3, [r3, #0]
   14b28:	2b00      	cmp	r3, #0
   14b2a:	d008      	beq.n	14b3e <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   14b2c:	230f      	movs	r3, #15
   14b2e:	18fb      	adds	r3, r7, r3
   14b30:	781a      	ldrb	r2, [r3, #0]
   14b32:	4b14      	ldr	r3, [pc, #80]	; (14b84 <HTTP_DownloadFileTransaction+0xdc>)
   14b34:	0019      	movs	r1, r3
   14b36:	2000      	movs	r0, #0
   14b38:	4b13      	ldr	r3, [pc, #76]	; (14b88 <HTTP_DownloadFileTransaction+0xe0>)
   14b3a:	4798      	blx	r3
   14b3c:	e003      	b.n	14b46 <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   14b3e:	4b13      	ldr	r3, [pc, #76]	; (14b8c <HTTP_DownloadFileTransaction+0xe4>)
   14b40:	0018      	movs	r0, r3
   14b42:	4b13      	ldr	r3, [pc, #76]	; (14b90 <HTTP_DownloadFileTransaction+0xe8>)
   14b44:	4798      	blx	r3
    }

    f_close(&file_object);
   14b46:	4b0d      	ldr	r3, [pc, #52]	; (14b7c <HTTP_DownloadFileTransaction+0xd4>)
   14b48:	0018      	movs	r0, r3
   14b4a:	4b12      	ldr	r3, [pc, #72]	; (14b94 <HTTP_DownloadFileTransaction+0xec>)
   14b4c:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   14b4e:	4b12      	ldr	r3, [pc, #72]	; (14b98 <HTTP_DownloadFileTransaction+0xf0>)
   14b50:	2200      	movs	r2, #0
   14b52:	701a      	strb	r2, [r3, #0]
}
   14b54:	46c0      	nop			; (mov r8, r8)
   14b56:	46bd      	mov	sp, r7
   14b58:	b005      	add	sp, #20
   14b5a:	bd90      	pop	{r4, r7, pc}
   14b5c:	0001fb85 	.word	0x0001fb85
   14b60:	20004220 	.word	0x20004220
   14b64:	00030279 	.word	0x00030279
   14b68:	00019d55 	.word	0x00019d55
   14b6c:	00013ab9 	.word	0x00013ab9
   14b70:	00023141 	.word	0x00023141
   14b74:	20000478 	.word	0x20000478
   14b78:	00034070 	.word	0x00034070
   14b7c:	200006ac 	.word	0x200006ac
   14b80:	0002b541 	.word	0x0002b541
   14b84:	0003404c 	.word	0x0003404c
   14b88:	0001ba95 	.word	0x0001ba95
   14b8c:	0003405c 	.word	0x0003405c
   14b90:	0001b9a9 	.word	0x0001b9a9
   14b94:	0002bf41 	.word	0x0002bf41
   14b98:	20000464 	.word	0x20000464

00014b9c <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   14b9c:	b580      	push	{r7, lr}
   14b9e:	af00      	add	r7, sp, #0
    socketDeinit();
   14ba0:	4b18      	ldr	r3, [pc, #96]	; (14c04 <MQTT_InitRoutine+0x68>)
   14ba2:	4798      	blx	r3
    configure_mqtt();
   14ba4:	4b18      	ldr	r3, [pc, #96]	; (14c08 <MQTT_InitRoutine+0x6c>)
   14ba6:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   14ba8:	4a18      	ldr	r2, [pc, #96]	; (14c0c <MQTT_InitRoutine+0x70>)
   14baa:	4b19      	ldr	r3, [pc, #100]	; (14c10 <MQTT_InitRoutine+0x74>)
   14bac:	0011      	movs	r1, r2
   14bae:	0018      	movs	r0, r3
   14bb0:	4b18      	ldr	r3, [pc, #96]	; (14c14 <MQTT_InitRoutine+0x78>)
   14bb2:	4798      	blx	r3
    socketInit();
   14bb4:	4b18      	ldr	r3, [pc, #96]	; (14c18 <MQTT_InitRoutine+0x7c>)
   14bb6:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   14bb8:	4b18      	ldr	r3, [pc, #96]	; (14c1c <MQTT_InitRoutine+0x80>)
   14bba:	2234      	movs	r2, #52	; 0x34
   14bbc:	5c9b      	ldrb	r3, [r3, r2]
   14bbe:	2201      	movs	r2, #1
   14bc0:	4053      	eors	r3, r2
   14bc2:	b2db      	uxtb	r3, r3
   14bc4:	2b00      	cmp	r3, #0
   14bc6:	d00c      	beq.n	14be2 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   14bc8:	4a15      	ldr	r2, [pc, #84]	; (14c20 <MQTT_InitRoutine+0x84>)
   14bca:	4b14      	ldr	r3, [pc, #80]	; (14c1c <MQTT_InitRoutine+0x80>)
   14bcc:	0011      	movs	r1, r2
   14bce:	0018      	movs	r0, r3
   14bd0:	4b14      	ldr	r3, [pc, #80]	; (14c24 <MQTT_InitRoutine+0x88>)
   14bd2:	4798      	blx	r3
   14bd4:	1e03      	subs	r3, r0, #0
   14bd6:	d004      	beq.n	14be2 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   14bd8:	4b13      	ldr	r3, [pc, #76]	; (14c28 <MQTT_InitRoutine+0x8c>)
   14bda:	0019      	movs	r1, r3
   14bdc:	2001      	movs	r0, #1
   14bde:	4b13      	ldr	r3, [pc, #76]	; (14c2c <MQTT_InitRoutine+0x90>)
   14be0:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   14be2:	4b0e      	ldr	r3, [pc, #56]	; (14c1c <MQTT_InitRoutine+0x80>)
   14be4:	2234      	movs	r2, #52	; 0x34
   14be6:	5c9b      	ldrb	r3, [r3, r2]
   14be8:	2b00      	cmp	r3, #0
   14bea:	d004      	beq.n	14bf6 <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   14bec:	4b10      	ldr	r3, [pc, #64]	; (14c30 <MQTT_InitRoutine+0x94>)
   14bee:	0019      	movs	r1, r3
   14bf0:	2001      	movs	r0, #1
   14bf2:	4b0e      	ldr	r3, [pc, #56]	; (14c2c <MQTT_InitRoutine+0x90>)
   14bf4:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   14bf6:	4b0f      	ldr	r3, [pc, #60]	; (14c34 <MQTT_InitRoutine+0x98>)
   14bf8:	2201      	movs	r2, #1
   14bfa:	701a      	strb	r2, [r3, #0]
}
   14bfc:	46c0      	nop			; (mov r8, r8)
   14bfe:	46bd      	mov	sp, r7
   14c00:	bd80      	pop	{r7, pc}
   14c02:	46c0      	nop			; (mov r8, r8)
   14c04:	00023141 	.word	0x00023141
   14c08:	0001495d 	.word	0x0001495d
   14c0c:	00014579 	.word	0x00014579
   14c10:	00014545 	.word	0x00014545
   14c14:	00023189 	.word	0x00023189
   14c18:	000230f1 	.word	0x000230f1
   14c1c:	200006d8 	.word	0x200006d8
   14c20:	0003380c 	.word	0x0003380c
   14c24:	0002d41d 	.word	0x0002d41d
   14c28:	00033c14 	.word	0x00033c14
   14c2c:	0001ba95 	.word	0x0001ba95
   14c30:	0003407c 	.word	0x0003407c
   14c34:	20000464 	.word	0x20000464

00014c38 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   14c38:	b580      	push	{r7, lr}
   14c3a:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   14c3c:	2000      	movs	r0, #0
   14c3e:	4b0c      	ldr	r3, [pc, #48]	; (14c70 <MQTT_HandleTransactions+0x38>)
   14c40:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   14c42:	4b0c      	ldr	r3, [pc, #48]	; (14c74 <MQTT_HandleTransactions+0x3c>)
   14c44:	0018      	movs	r0, r3
   14c46:	4b0c      	ldr	r3, [pc, #48]	; (14c78 <MQTT_HandleTransactions+0x40>)
   14c48:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   14c4a:	4b0c      	ldr	r3, [pc, #48]	; (14c7c <MQTT_HandleTransactions+0x44>)
   14c4c:	4798      	blx	r3
    MQTT_HandleImuMessages();
   14c4e:	4b0c      	ldr	r3, [pc, #48]	; (14c80 <MQTT_HandleTransactions+0x48>)
   14c50:	4798      	blx	r3
	
	MQTT_HandleDebugMessages();
   14c52:	4b0c      	ldr	r3, [pc, #48]	; (14c84 <MQTT_HandleTransactions+0x4c>)
   14c54:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   14c56:	4b0c      	ldr	r3, [pc, #48]	; (14c88 <MQTT_HandleTransactions+0x50>)
   14c58:	2234      	movs	r2, #52	; 0x34
   14c5a:	5c9b      	ldrb	r3, [r3, r2]
   14c5c:	2b00      	cmp	r3, #0
   14c5e:	d004      	beq.n	14c6a <MQTT_HandleTransactions+0x32>
   14c60:	4b09      	ldr	r3, [pc, #36]	; (14c88 <MQTT_HandleTransactions+0x50>)
   14c62:	2164      	movs	r1, #100	; 0x64
   14c64:	0018      	movs	r0, r3
   14c66:	4b09      	ldr	r3, [pc, #36]	; (14c8c <MQTT_HandleTransactions+0x54>)
   14c68:	4798      	blx	r3
}
   14c6a:	46c0      	nop			; (mov r8, r8)
   14c6c:	46bd      	mov	sp, r7
   14c6e:	bd80      	pop	{r7, pc}
   14c70:	0001fb85 	.word	0x0001fb85
   14c74:	20004220 	.word	0x20004220
   14c78:	00030279 	.word	0x00030279
   14c7c:	00014d1d 	.word	0x00014d1d
   14c80:	00014c91 	.word	0x00014c91
   14c84:	00014e45 	.word	0x00014e45
   14c88:	200006d8 	.word	0x200006d8
   14c8c:	0002d64d 	.word	0x0002d64d

00014c90 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   14c90:	b590      	push	{r4, r7, lr}
   14c92:	b085      	sub	sp, #20
   14c94:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   14c96:	4b18      	ldr	r3, [pc, #96]	; (14cf8 <MQTT_HandleImuMessages+0x68>)
   14c98:	681b      	ldr	r3, [r3, #0]
   14c9a:	0039      	movs	r1, r7
   14c9c:	2200      	movs	r2, #0
   14c9e:	0018      	movs	r0, r3
   14ca0:	4b16      	ldr	r3, [pc, #88]	; (14cfc <MQTT_HandleImuMessages+0x6c>)
   14ca2:	4798      	blx	r3
   14ca4:	0003      	movs	r3, r0
   14ca6:	2b01      	cmp	r3, #1
   14ca8:	d121      	bne.n	14cee <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   14caa:	003b      	movs	r3, r7
   14cac:	2200      	movs	r2, #0
   14cae:	5e9b      	ldrsh	r3, [r3, r2]
   14cb0:	001c      	movs	r4, r3
   14cb2:	003b      	movs	r3, r7
   14cb4:	2202      	movs	r2, #2
   14cb6:	5e9b      	ldrsh	r3, [r3, r2]
   14cb8:	0019      	movs	r1, r3
   14cba:	003b      	movs	r3, r7
   14cbc:	2204      	movs	r2, #4
   14cbe:	5e9b      	ldrsh	r3, [r3, r2]
   14cc0:	4a0f      	ldr	r2, [pc, #60]	; (14d00 <MQTT_HandleImuMessages+0x70>)
   14cc2:	4810      	ldr	r0, [pc, #64]	; (14d04 <MQTT_HandleImuMessages+0x74>)
   14cc4:	9301      	str	r3, [sp, #4]
   14cc6:	9100      	str	r1, [sp, #0]
   14cc8:	0023      	movs	r3, r4
   14cca:	213f      	movs	r1, #63	; 0x3f
   14ccc:	4c0e      	ldr	r4, [pc, #56]	; (14d08 <MQTT_HandleImuMessages+0x78>)
   14cce:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   14cd0:	4b0c      	ldr	r3, [pc, #48]	; (14d04 <MQTT_HandleImuMessages+0x74>)
   14cd2:	0018      	movs	r0, r3
   14cd4:	4b0d      	ldr	r3, [pc, #52]	; (14d0c <MQTT_HandleImuMessages+0x7c>)
   14cd6:	4798      	blx	r3
   14cd8:	0004      	movs	r4, r0
   14cda:	4a0a      	ldr	r2, [pc, #40]	; (14d04 <MQTT_HandleImuMessages+0x74>)
   14cdc:	490c      	ldr	r1, [pc, #48]	; (14d10 <MQTT_HandleImuMessages+0x80>)
   14cde:	480d      	ldr	r0, [pc, #52]	; (14d14 <MQTT_HandleImuMessages+0x84>)
   14ce0:	2300      	movs	r3, #0
   14ce2:	9301      	str	r3, [sp, #4]
   14ce4:	2301      	movs	r3, #1
   14ce6:	9300      	str	r3, [sp, #0]
   14ce8:	0023      	movs	r3, r4
   14cea:	4c0b      	ldr	r4, [pc, #44]	; (14d18 <MQTT_HandleImuMessages+0x88>)
   14cec:	47a0      	blx	r4
    }
}
   14cee:	46c0      	nop			; (mov r8, r8)
   14cf0:	46bd      	mov	sp, r7
   14cf2:	b003      	add	sp, #12
   14cf4:	bd90      	pop	{r4, r7, pc}
   14cf6:	46c0      	nop			; (mov r8, r8)
   14cf8:	20000470 	.word	0x20000470
   14cfc:	00018ba9 	.word	0x00018ba9
   14d00:	00034098 	.word	0x00034098
   14d04:	20000014 	.word	0x20000014
   14d08:	000323fd 	.word	0x000323fd
   14d0c:	0003255b 	.word	0x0003255b
   14d10:	00033f54 	.word	0x00033f54
   14d14:	200006d8 	.word	0x200006d8
   14d18:	0002d599 	.word	0x0002d599

00014d1c <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   14d1c:	b590      	push	{r4, r7, lr}
   14d1e:	b08b      	sub	sp, #44	; 0x2c
   14d20:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   14d22:	4b39      	ldr	r3, [pc, #228]	; (14e08 <MQTT_HandleGameMessages+0xec>)
   14d24:	681b      	ldr	r3, [r3, #0]
   14d26:	2208      	movs	r2, #8
   14d28:	18b9      	adds	r1, r7, r2
   14d2a:	2200      	movs	r2, #0
   14d2c:	0018      	movs	r0, r3
   14d2e:	4b37      	ldr	r3, [pc, #220]	; (14e0c <MQTT_HandleGameMessages+0xf0>)
   14d30:	4798      	blx	r3
   14d32:	0003      	movs	r3, r0
   14d34:	2b01      	cmp	r3, #1
   14d36:	d163      	bne.n	14e00 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   14d38:	4b35      	ldr	r3, [pc, #212]	; (14e10 <MQTT_HandleGameMessages+0xf4>)
   14d3a:	4a36      	ldr	r2, [pc, #216]	; (14e14 <MQTT_HandleGameMessages+0xf8>)
   14d3c:	ca03      	ldmia	r2!, {r0, r1}
   14d3e:	c303      	stmia	r3!, {r0, r1}
   14d40:	8812      	ldrh	r2, [r2, #0]
   14d42:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   14d44:	2300      	movs	r3, #0
   14d46:	61fb      	str	r3, [r7, #28]
   14d48:	e02d      	b.n	14da6 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   14d4a:	2308      	movs	r3, #8
   14d4c:	18fa      	adds	r2, r7, r3
   14d4e:	69fb      	ldr	r3, [r7, #28]
   14d50:	18d3      	adds	r3, r2, r3
   14d52:	781b      	ldrb	r3, [r3, #0]
   14d54:	2bff      	cmp	r3, #255	; 0xff
   14d56:	d02a      	beq.n	14dae <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   14d58:	2308      	movs	r3, #8
   14d5a:	18fa      	adds	r2, r7, r3
   14d5c:	69fb      	ldr	r3, [r7, #28]
   14d5e:	18d3      	adds	r3, r2, r3
   14d60:	781b      	ldrb	r3, [r3, #0]
   14d62:	4a2d      	ldr	r2, [pc, #180]	; (14e18 <MQTT_HandleGameMessages+0xfc>)
   14d64:	0038      	movs	r0, r7
   14d66:	2103      	movs	r1, #3
   14d68:	4c2c      	ldr	r4, [pc, #176]	; (14e1c <MQTT_HandleGameMessages+0x100>)
   14d6a:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   14d6c:	003a      	movs	r2, r7
   14d6e:	4b28      	ldr	r3, [pc, #160]	; (14e10 <MQTT_HandleGameMessages+0xf4>)
   14d70:	0011      	movs	r1, r2
   14d72:	0018      	movs	r0, r3
   14d74:	4b2a      	ldr	r3, [pc, #168]	; (14e20 <MQTT_HandleGameMessages+0x104>)
   14d76:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   14d78:	69fb      	ldr	r3, [r7, #28]
   14d7a:	3301      	adds	r3, #1
   14d7c:	2208      	movs	r2, #8
   14d7e:	18ba      	adds	r2, r7, r2
   14d80:	5cd3      	ldrb	r3, [r2, r3]
   14d82:	2bff      	cmp	r3, #255	; 0xff
   14d84:	d00c      	beq.n	14da0 <MQTT_HandleGameMessages+0x84>
   14d86:	69fb      	ldr	r3, [r7, #28]
   14d88:	3301      	adds	r3, #1
   14d8a:	2b13      	cmp	r3, #19
   14d8c:	dc08      	bgt.n	14da0 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   14d8e:	003b      	movs	r3, r7
   14d90:	222c      	movs	r2, #44	; 0x2c
   14d92:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   14d94:	003a      	movs	r2, r7
   14d96:	4b1e      	ldr	r3, [pc, #120]	; (14e10 <MQTT_HandleGameMessages+0xf4>)
   14d98:	0011      	movs	r1, r2
   14d9a:	0018      	movs	r0, r3
   14d9c:	4b20      	ldr	r3, [pc, #128]	; (14e20 <MQTT_HandleGameMessages+0x104>)
   14d9e:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   14da0:	69fb      	ldr	r3, [r7, #28]
   14da2:	3301      	adds	r3, #1
   14da4:	61fb      	str	r3, [r7, #28]
   14da6:	69fb      	ldr	r3, [r7, #28]
   14da8:	2b13      	cmp	r3, #19
   14daa:	ddce      	ble.n	14d4a <MQTT_HandleGameMessages+0x2e>
   14dac:	e000      	b.n	14db0 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   14dae:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   14db0:	4b17      	ldr	r3, [pc, #92]	; (14e10 <MQTT_HandleGameMessages+0xf4>)
   14db2:	0018      	movs	r0, r3
   14db4:	4b1b      	ldr	r3, [pc, #108]	; (14e24 <MQTT_HandleGameMessages+0x108>)
   14db6:	4798      	blx	r3
   14db8:	0003      	movs	r3, r0
   14dba:	001a      	movs	r2, r3
   14dbc:	4b14      	ldr	r3, [pc, #80]	; (14e10 <MQTT_HandleGameMessages+0xf4>)
   14dbe:	18d2      	adds	r2, r2, r3
   14dc0:	4b19      	ldr	r3, [pc, #100]	; (14e28 <MQTT_HandleGameMessages+0x10c>)
   14dc2:	0010      	movs	r0, r2
   14dc4:	0019      	movs	r1, r3
   14dc6:	2303      	movs	r3, #3
   14dc8:	001a      	movs	r2, r3
   14dca:	4b18      	ldr	r3, [pc, #96]	; (14e2c <MQTT_HandleGameMessages+0x110>)
   14dcc:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   14dce:	4b10      	ldr	r3, [pc, #64]	; (14e10 <MQTT_HandleGameMessages+0xf4>)
   14dd0:	0019      	movs	r1, r3
   14dd2:	2001      	movs	r0, #1
   14dd4:	4b16      	ldr	r3, [pc, #88]	; (14e30 <MQTT_HandleGameMessages+0x114>)
   14dd6:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   14dd8:	4b16      	ldr	r3, [pc, #88]	; (14e34 <MQTT_HandleGameMessages+0x118>)
   14dda:	0019      	movs	r1, r3
   14ddc:	2001      	movs	r0, #1
   14dde:	4b14      	ldr	r3, [pc, #80]	; (14e30 <MQTT_HandleGameMessages+0x114>)
   14de0:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   14de2:	4b0b      	ldr	r3, [pc, #44]	; (14e10 <MQTT_HandleGameMessages+0xf4>)
   14de4:	0018      	movs	r0, r3
   14de6:	4b0f      	ldr	r3, [pc, #60]	; (14e24 <MQTT_HandleGameMessages+0x108>)
   14de8:	4798      	blx	r3
   14dea:	0004      	movs	r4, r0
   14dec:	4a08      	ldr	r2, [pc, #32]	; (14e10 <MQTT_HandleGameMessages+0xf4>)
   14dee:	4912      	ldr	r1, [pc, #72]	; (14e38 <MQTT_HandleGameMessages+0x11c>)
   14df0:	4812      	ldr	r0, [pc, #72]	; (14e3c <MQTT_HandleGameMessages+0x120>)
   14df2:	2300      	movs	r3, #0
   14df4:	9301      	str	r3, [sp, #4]
   14df6:	2301      	movs	r3, #1
   14df8:	9300      	str	r3, [sp, #0]
   14dfa:	0023      	movs	r3, r4
   14dfc:	4c10      	ldr	r4, [pc, #64]	; (14e40 <MQTT_HandleGameMessages+0x124>)
   14dfe:	47a0      	blx	r4
    }
}
   14e00:	46c0      	nop			; (mov r8, r8)
   14e02:	46bd      	mov	sp, r7
   14e04:	b009      	add	sp, #36	; 0x24
   14e06:	bd90      	pop	{r4, r7, pc}
   14e08:	2000046c 	.word	0x2000046c
   14e0c:	00018ba9 	.word	0x00018ba9
   14e10:	20000014 	.word	0x20000014
   14e14:	00033db0 	.word	0x00033db0
   14e18:	000340bc 	.word	0x000340bc
   14e1c:	000323fd 	.word	0x000323fd
   14e20:	000324e1 	.word	0x000324e1
   14e24:	0003255b 	.word	0x0003255b
   14e28:	000340c0 	.word	0x000340c0
   14e2c:	0003216d 	.word	0x0003216d
   14e30:	0001ba95 	.word	0x0001ba95
   14e34:	000340c4 	.word	0x000340c4
   14e38:	000340c8 	.word	0x000340c8
   14e3c:	200006d8 	.word	0x200006d8
   14e40:	0002d599 	.word	0x0002d599

00014e44 <MQTT_HandleDebugMessages>:

void MQTT_HandleDebugMessages()
{
   14e44:	b590      	push	{r4, r7, lr}
   14e46:	b085      	sub	sp, #20
   14e48:	af02      	add	r7, sp, #8
	bool led = port_pin_get_input_level(BUTTON_0_PIN);
   14e4a:	1dfc      	adds	r4, r7, #7
   14e4c:	2037      	movs	r0, #55	; 0x37
   14e4e:	4b11      	ldr	r3, [pc, #68]	; (14e94 <MQTT_HandleDebugMessages+0x50>)
   14e50:	4798      	blx	r3
   14e52:	0003      	movs	r3, r0
   14e54:	7023      	strb	r3, [r4, #0]
	if(led == true)
   14e56:	1dfb      	adds	r3, r7, #7
   14e58:	781b      	ldrb	r3, [r3, #0]
   14e5a:	2b00      	cmp	r3, #0
   14e5c:	d003      	beq.n	14e66 <MQTT_HandleDebugMessages+0x22>
	{
		sprintf(mqtt_msg, "1");
   14e5e:	4b0e      	ldr	r3, [pc, #56]	; (14e98 <MQTT_HandleDebugMessages+0x54>)
   14e60:	2231      	movs	r2, #49	; 0x31
   14e62:	801a      	strh	r2, [r3, #0]
   14e64:	e002      	b.n	14e6c <MQTT_HandleDebugMessages+0x28>
	}
	else
	{
		sprintf(mqtt_msg, "0");
   14e66:	4b0c      	ldr	r3, [pc, #48]	; (14e98 <MQTT_HandleDebugMessages+0x54>)
   14e68:	2230      	movs	r2, #48	; 0x30
   14e6a:	801a      	strh	r2, [r3, #0]
	}
	mqtt_publish(&mqtt_inst, DEBUG_TOPIC_0, mqtt_msg, strlen(mqtt_msg), 1, 0);
   14e6c:	4b0a      	ldr	r3, [pc, #40]	; (14e98 <MQTT_HandleDebugMessages+0x54>)
   14e6e:	0018      	movs	r0, r3
   14e70:	4b0a      	ldr	r3, [pc, #40]	; (14e9c <MQTT_HandleDebugMessages+0x58>)
   14e72:	4798      	blx	r3
   14e74:	0004      	movs	r4, r0
   14e76:	4a08      	ldr	r2, [pc, #32]	; (14e98 <MQTT_HandleDebugMessages+0x54>)
   14e78:	4909      	ldr	r1, [pc, #36]	; (14ea0 <MQTT_HandleDebugMessages+0x5c>)
   14e7a:	480a      	ldr	r0, [pc, #40]	; (14ea4 <MQTT_HandleDebugMessages+0x60>)
   14e7c:	2300      	movs	r3, #0
   14e7e:	9301      	str	r3, [sp, #4]
   14e80:	2301      	movs	r3, #1
   14e82:	9300      	str	r3, [sp, #0]
   14e84:	0023      	movs	r3, r4
   14e86:	4c08      	ldr	r4, [pc, #32]	; (14ea8 <MQTT_HandleDebugMessages+0x64>)
   14e88:	47a0      	blx	r4
}
   14e8a:	46c0      	nop			; (mov r8, r8)
   14e8c:	46bd      	mov	sp, r7
   14e8e:	b003      	add	sp, #12
   14e90:	bd90      	pop	{r4, r7, pc}
   14e92:	46c0      	nop			; (mov r8, r8)
   14e94:	00013975 	.word	0x00013975
   14e98:	20000014 	.word	0x20000014
   14e9c:	0003255b 	.word	0x0003255b
   14ea0:	000340dc 	.word	0x000340dc
   14ea4:	200006d8 	.word	0x200006d8
   14ea8:	0002d599 	.word	0x0002d599

00014eac <vWifiTask>:
 *
 * \return program return value.
 */

void vWifiTask(void *pvParameters)
{
   14eac:	b590      	push	{r4, r7, lr}
   14eae:	b08d      	sub	sp, #52	; 0x34
   14eb0:	af02      	add	r7, sp, #8
   14eb2:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   14eb4:	2064      	movs	r0, #100	; 0x64
   14eb6:	4b77      	ldr	r3, [pc, #476]	; (15094 <vWifiTask+0x1e8>)
   14eb8:	4798      	blx	r3
    init_state();
   14eba:	4b77      	ldr	r3, [pc, #476]	; (15098 <vWifiTask+0x1ec>)
   14ebc:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   14ebe:	2200      	movs	r2, #0
   14ec0:	2104      	movs	r1, #4
   14ec2:	2005      	movs	r0, #5
   14ec4:	4b75      	ldr	r3, [pc, #468]	; (1509c <vWifiTask+0x1f0>)
   14ec6:	4798      	blx	r3
   14ec8:	0002      	movs	r2, r0
   14eca:	4b75      	ldr	r3, [pc, #468]	; (150a0 <vWifiTask+0x1f4>)
   14ecc:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   14ece:	2200      	movs	r2, #0
   14ed0:	2106      	movs	r1, #6
   14ed2:	2005      	movs	r0, #5
   14ed4:	4b71      	ldr	r3, [pc, #452]	; (1509c <vWifiTask+0x1f0>)
   14ed6:	4798      	blx	r3
   14ed8:	0002      	movs	r2, r0
   14eda:	4b72      	ldr	r3, [pc, #456]	; (150a4 <vWifiTask+0x1f8>)
   14edc:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   14ede:	2200      	movs	r2, #0
   14ee0:	2114      	movs	r1, #20
   14ee2:	2002      	movs	r0, #2
   14ee4:	4b6d      	ldr	r3, [pc, #436]	; (1509c <vWifiTask+0x1f0>)
   14ee6:	4798      	blx	r3
   14ee8:	0002      	movs	r2, r0
   14eea:	4b6f      	ldr	r3, [pc, #444]	; (150a8 <vWifiTask+0x1fc>)
   14eec:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   14eee:	2200      	movs	r2, #0
   14ef0:	2102      	movs	r1, #2
   14ef2:	2005      	movs	r0, #5
   14ef4:	4b69      	ldr	r3, [pc, #420]	; (1509c <vWifiTask+0x1f0>)
   14ef6:	4798      	blx	r3
   14ef8:	0002      	movs	r2, r0
   14efa:	4b6c      	ldr	r3, [pc, #432]	; (150ac <vWifiTask+0x200>)
   14efc:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   14efe:	4b68      	ldr	r3, [pc, #416]	; (150a0 <vWifiTask+0x1f4>)
   14f00:	681b      	ldr	r3, [r3, #0]
   14f02:	2b00      	cmp	r3, #0
   14f04:	d00b      	beq.n	14f1e <vWifiTask+0x72>
   14f06:	4b67      	ldr	r3, [pc, #412]	; (150a4 <vWifiTask+0x1f8>)
   14f08:	681b      	ldr	r3, [r3, #0]
   14f0a:	2b00      	cmp	r3, #0
   14f0c:	d007      	beq.n	14f1e <vWifiTask+0x72>
   14f0e:	4b66      	ldr	r3, [pc, #408]	; (150a8 <vWifiTask+0x1fc>)
   14f10:	681b      	ldr	r3, [r3, #0]
   14f12:	2b00      	cmp	r3, #0
   14f14:	d003      	beq.n	14f1e <vWifiTask+0x72>
   14f16:	4b65      	ldr	r3, [pc, #404]	; (150ac <vWifiTask+0x200>)
   14f18:	681b      	ldr	r3, [r3, #0]
   14f1a:	2b00      	cmp	r3, #0
   14f1c:	d103      	bne.n	14f26 <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   14f1e:	4b64      	ldr	r3, [pc, #400]	; (150b0 <vWifiTask+0x204>)
   14f20:	0018      	movs	r0, r3
   14f22:	4b64      	ldr	r3, [pc, #400]	; (150b4 <vWifiTask+0x208>)
   14f24:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   14f26:	4b64      	ldr	r3, [pc, #400]	; (150b8 <vWifiTask+0x20c>)
   14f28:	0018      	movs	r0, r3
   14f2a:	4b62      	ldr	r3, [pc, #392]	; (150b4 <vWifiTask+0x208>)
   14f2c:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   14f2e:	4b63      	ldr	r3, [pc, #396]	; (150bc <vWifiTask+0x210>)
   14f30:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   14f32:	4b63      	ldr	r3, [pc, #396]	; (150c0 <vWifiTask+0x214>)
   14f34:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   14f36:	4b63      	ldr	r3, [pc, #396]	; (150c4 <vWifiTask+0x218>)
   14f38:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   14f3a:	4b63      	ldr	r3, [pc, #396]	; (150c8 <vWifiTask+0x21c>)
   14f3c:	4798      	blx	r3
    /*Initialize BUTTON 0 as an external interrupt*/
    // configure_extint_channel();
    // configure_extint_callbacks();

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   14f3e:	230c      	movs	r3, #12
   14f40:	18fb      	adds	r3, r7, r3
   14f42:	2218      	movs	r2, #24
   14f44:	2100      	movs	r1, #0
   14f46:	0018      	movs	r0, r3
   14f48:	4b60      	ldr	r3, [pc, #384]	; (150cc <vWifiTask+0x220>)
   14f4a:	4798      	blx	r3

    nm_bsp_init();
   14f4c:	4b60      	ldr	r3, [pc, #384]	; (150d0 <vWifiTask+0x224>)
   14f4e:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   14f50:	230c      	movs	r3, #12
   14f52:	18fb      	adds	r3, r7, r3
   14f54:	4a5f      	ldr	r2, [pc, #380]	; (150d4 <vWifiTask+0x228>)
   14f56:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   14f58:	2327      	movs	r3, #39	; 0x27
   14f5a:	18fc      	adds	r4, r7, r3
   14f5c:	230c      	movs	r3, #12
   14f5e:	18fb      	adds	r3, r7, r3
   14f60:	0018      	movs	r0, r3
   14f62:	4b5d      	ldr	r3, [pc, #372]	; (150d8 <vWifiTask+0x22c>)
   14f64:	4798      	blx	r3
   14f66:	0003      	movs	r3, r0
   14f68:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   14f6a:	2327      	movs	r3, #39	; 0x27
   14f6c:	18fb      	adds	r3, r7, r3
   14f6e:	781b      	ldrb	r3, [r3, #0]
   14f70:	b25b      	sxtb	r3, r3
   14f72:	2b00      	cmp	r3, #0
   14f74:	d009      	beq.n	14f8a <vWifiTask+0xde>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   14f76:	2327      	movs	r3, #39	; 0x27
   14f78:	18fb      	adds	r3, r7, r3
   14f7a:	2200      	movs	r2, #0
   14f7c:	569a      	ldrsb	r2, [r3, r2]
   14f7e:	4b57      	ldr	r3, [pc, #348]	; (150dc <vWifiTask+0x230>)
   14f80:	0019      	movs	r1, r3
   14f82:	2001      	movs	r0, #1
   14f84:	4b56      	ldr	r3, [pc, #344]	; (150e0 <vWifiTask+0x234>)
   14f86:	4798      	blx	r3
        while (1) {
   14f88:	e7fe      	b.n	14f88 <vWifiTask+0xdc>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   14f8a:	4a56      	ldr	r2, [pc, #344]	; (150e4 <vWifiTask+0x238>)
   14f8c:	4b56      	ldr	r3, [pc, #344]	; (150e8 <vWifiTask+0x23c>)
   14f8e:	0019      	movs	r1, r3
   14f90:	2001      	movs	r0, #1
   14f92:	4b53      	ldr	r3, [pc, #332]	; (150e0 <vWifiTask+0x234>)
   14f94:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   14f96:	4b55      	ldr	r3, [pc, #340]	; (150ec <vWifiTask+0x240>)
   14f98:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   14f9a:	4a55      	ldr	r2, [pc, #340]	; (150f0 <vWifiTask+0x244>)
   14f9c:	4b55      	ldr	r3, [pc, #340]	; (150f4 <vWifiTask+0x248>)
   14f9e:	0011      	movs	r1, r2
   14fa0:	0018      	movs	r0, r3
   14fa2:	4b55      	ldr	r3, [pc, #340]	; (150f8 <vWifiTask+0x24c>)
   14fa4:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   14fa6:	4a55      	ldr	r2, [pc, #340]	; (150fc <vWifiTask+0x250>)
   14fa8:	484e      	ldr	r0, [pc, #312]	; (150e4 <vWifiTask+0x238>)
   14faa:	23ff      	movs	r3, #255	; 0xff
   14fac:	9300      	str	r3, [sp, #0]
   14fae:	0013      	movs	r3, r2
   14fb0:	2202      	movs	r2, #2
   14fb2:	2112      	movs	r1, #18
   14fb4:	4c52      	ldr	r4, [pc, #328]	; (15100 <vWifiTask+0x254>)
   14fb6:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   14fb8:	e006      	b.n	14fc8 <vWifiTask+0x11c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   14fba:	2000      	movs	r0, #0
   14fbc:	4b51      	ldr	r3, [pc, #324]	; (15104 <vWifiTask+0x258>)
   14fbe:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   14fc0:	4b51      	ldr	r3, [pc, #324]	; (15108 <vWifiTask+0x25c>)
   14fc2:	0018      	movs	r0, r3
   14fc4:	4b51      	ldr	r3, [pc, #324]	; (1510c <vWifiTask+0x260>)
   14fc6:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   14fc8:	2002      	movs	r0, #2
   14fca:	4b51      	ldr	r3, [pc, #324]	; (15110 <vWifiTask+0x264>)
   14fcc:	4798      	blx	r3
   14fce:	0003      	movs	r3, r0
   14fd0:	001a      	movs	r2, r3
   14fd2:	2301      	movs	r3, #1
   14fd4:	4053      	eors	r3, r2
   14fd6:	b2db      	uxtb	r3, r3
   14fd8:	2b00      	cmp	r3, #0
   14fda:	d1ee      	bne.n	14fba <vWifiTask+0x10e>
    }

    vTaskDelay(1000);
   14fdc:	23fa      	movs	r3, #250	; 0xfa
   14fde:	009b      	lsls	r3, r3, #2
   14fe0:	0018      	movs	r0, r3
   14fe2:	4b2c      	ldr	r3, [pc, #176]	; (15094 <vWifiTask+0x1e8>)
   14fe4:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   14fe6:	4b4b      	ldr	r3, [pc, #300]	; (15114 <vWifiTask+0x268>)
   14fe8:	2201      	movs	r2, #1
   14fea:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   14fec:	4b49      	ldr	r3, [pc, #292]	; (15114 <vWifiTask+0x268>)
   14fee:	781b      	ldrb	r3, [r3, #0]
   14ff0:	b25b      	sxtb	r3, r3
   14ff2:	2b01      	cmp	r3, #1
   14ff4:	d00b      	beq.n	1500e <vWifiTask+0x162>
   14ff6:	dc02      	bgt.n	14ffe <vWifiTask+0x152>
   14ff8:	2b00      	cmp	r3, #0
   14ffa:	d005      	beq.n	15008 <vWifiTask+0x15c>
   14ffc:	e010      	b.n	15020 <vWifiTask+0x174>
   14ffe:	2b02      	cmp	r3, #2
   15000:	d008      	beq.n	15014 <vWifiTask+0x168>
   15002:	2b03      	cmp	r3, #3
   15004:	d009      	beq.n	1501a <vWifiTask+0x16e>
   15006:	e00b      	b.n	15020 <vWifiTask+0x174>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   15008:	4b43      	ldr	r3, [pc, #268]	; (15118 <vWifiTask+0x26c>)
   1500a:	4798      	blx	r3

                break;
   1500c:	e00c      	b.n	15028 <vWifiTask+0x17c>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   1500e:	4b43      	ldr	r3, [pc, #268]	; (1511c <vWifiTask+0x270>)
   15010:	4798      	blx	r3
                break;
   15012:	e009      	b.n	15028 <vWifiTask+0x17c>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   15014:	4b42      	ldr	r3, [pc, #264]	; (15120 <vWifiTask+0x274>)
   15016:	4798      	blx	r3
                break;
   15018:	e006      	b.n	15028 <vWifiTask+0x17c>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   1501a:	4b42      	ldr	r3, [pc, #264]	; (15124 <vWifiTask+0x278>)
   1501c:	4798      	blx	r3
                break;
   1501e:	e003      	b.n	15028 <vWifiTask+0x17c>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   15020:	4b3c      	ldr	r3, [pc, #240]	; (15114 <vWifiTask+0x268>)
   15022:	2200      	movs	r2, #0
   15024:	701a      	strb	r2, [r3, #0]
                break;
   15026:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   15028:	230b      	movs	r3, #11
   1502a:	18fb      	adds	r3, r7, r3
   1502c:	2200      	movs	r2, #0
   1502e:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   15030:	4b1b      	ldr	r3, [pc, #108]	; (150a0 <vWifiTask+0x1f4>)
   15032:	681b      	ldr	r3, [r3, #0]
   15034:	220b      	movs	r2, #11
   15036:	18b9      	adds	r1, r7, r2
   15038:	2200      	movs	r2, #0
   1503a:	0018      	movs	r0, r3
   1503c:	4b3a      	ldr	r3, [pc, #232]	; (15128 <vWifiTask+0x27c>)
   1503e:	4798      	blx	r3
   15040:	0003      	movs	r3, r0
   15042:	2b01      	cmp	r3, #1
   15044:	d105      	bne.n	15052 <vWifiTask+0x1a6>
            wifiStateMachine = DataToReceive;  // Update new state
   15046:	230b      	movs	r3, #11
   15048:	18fb      	adds	r3, r7, r3
   1504a:	781b      	ldrb	r3, [r3, #0]
   1504c:	b25a      	sxtb	r2, r3
   1504e:	4b31      	ldr	r3, [pc, #196]	; (15114 <vWifiTask+0x268>)
   15050:	701a      	strb	r2, [r3, #0]
        }

        // Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if (isPressed) {
   15052:	4b36      	ldr	r3, [pc, #216]	; (1512c <vWifiTask+0x280>)
   15054:	781b      	ldrb	r3, [r3, #0]
   15056:	b2db      	uxtb	r3, r3
   15058:	2b00      	cmp	r3, #0
   1505a:	d017      	beq.n	1508c <vWifiTask+0x1e0>
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   1505c:	4b34      	ldr	r3, [pc, #208]	; (15130 <vWifiTask+0x284>)
   1505e:	0018      	movs	r0, r3
   15060:	4b34      	ldr	r3, [pc, #208]	; (15134 <vWifiTask+0x288>)
   15062:	4798      	blx	r3
   15064:	0004      	movs	r4, r0
   15066:	4a32      	ldr	r2, [pc, #200]	; (15130 <vWifiTask+0x284>)
   15068:	4933      	ldr	r1, [pc, #204]	; (15138 <vWifiTask+0x28c>)
   1506a:	4834      	ldr	r0, [pc, #208]	; (1513c <vWifiTask+0x290>)
   1506c:	2300      	movs	r3, #0
   1506e:	9301      	str	r3, [sp, #4]
   15070:	2301      	movs	r3, #1
   15072:	9300      	str	r3, [sp, #0]
   15074:	0023      	movs	r3, r4
   15076:	4c32      	ldr	r4, [pc, #200]	; (15140 <vWifiTask+0x294>)
   15078:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   1507a:	4a2d      	ldr	r2, [pc, #180]	; (15130 <vWifiTask+0x284>)
   1507c:	4b31      	ldr	r3, [pc, #196]	; (15144 <vWifiTask+0x298>)
   1507e:	0019      	movs	r1, r3
   15080:	2001      	movs	r0, #1
   15082:	4b17      	ldr	r3, [pc, #92]	; (150e0 <vWifiTask+0x234>)
   15084:	4798      	blx	r3
            isPressed = false;
   15086:	4b29      	ldr	r3, [pc, #164]	; (1512c <vWifiTask+0x280>)
   15088:	2200      	movs	r2, #0
   1508a:	701a      	strb	r2, [r3, #0]
        }

        vTaskDelay(100);
   1508c:	2064      	movs	r0, #100	; 0x64
   1508e:	4b01      	ldr	r3, [pc, #4]	; (15094 <vWifiTask+0x1e8>)
   15090:	4798      	blx	r3
    while (1) {
   15092:	e7ab      	b.n	14fec <vWifiTask+0x140>
   15094:	00019d55 	.word	0x00019d55
   15098:	00013a49 	.word	0x00013a49
   1509c:	00018049 	.word	0x00018049
   150a0:	20000468 	.word	0x20000468
   150a4:	20000470 	.word	0x20000470
   150a8:	2000046c 	.word	0x2000046c
   150ac:	20000474 	.word	0x20000474
   150b0:	000340e8 	.word	0x000340e8
   150b4:	0001b9a9 	.word	0x0001b9a9
   150b8:	00034110 	.word	0x00034110
   150bc:	00014489 	.word	0x00014489
   150c0:	000144c5 	.word	0x000144c5
   150c4:	0001495d 	.word	0x0001495d
   150c8:	000143a5 	.word	0x000143a5
   150cc:	000321a3 	.word	0x000321a3
   150d0:	0001deb9 	.word	0x0001deb9
   150d4:	00014251 	.word	0x00014251
   150d8:	0001f991 	.word	0x0001f991
   150dc:	0003412c 	.word	0x0003412c
   150e0:	0001ba95 	.word	0x0001ba95
   150e4:	00033bd8 	.word	0x00033bd8
   150e8:	00034158 	.word	0x00034158
   150ec:	000230f1 	.word	0x000230f1
   150f0:	00014579 	.word	0x00014579
   150f4:	00014545 	.word	0x00014545
   150f8:	00023189 	.word	0x00023189
   150fc:	00033bc8 	.word	0x00033bc8
   15100:	0001fba1 	.word	0x0001fba1
   15104:	0001fb85 	.word	0x0001fb85
   15108:	20004220 	.word	0x20004220
   1510c:	00030279 	.word	0x00030279
   15110:	00013ab9 	.word	0x00013ab9
   15114:	20000464 	.word	0x20000464
   15118:	00014b9d 	.word	0x00014b9d
   1511c:	00014c39 	.word	0x00014c39
   15120:	00014a15 	.word	0x00014a15
   15124:	00014aa9 	.word	0x00014aa9
   15128:	00018ba9 	.word	0x00018ba9
   1512c:	20000b10 	.word	0x20000b10
   15130:	20000054 	.word	0x20000054
   15134:	0003255b 	.word	0x0003255b
   15138:	0003417c 	.word	0x0003417c
   1513c:	200006d8 	.word	0x200006d8
   15140:	0002d599 	.word	0x0002d599
   15144:	00034198 	.word	0x00034198

00015148 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   15148:	b590      	push	{r4, r7, lr}
   1514a:	b083      	sub	sp, #12
   1514c:	af00      	add	r7, sp, #0
   1514e:	0002      	movs	r2, r0
   15150:	1dfb      	adds	r3, r7, #7
   15152:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   15154:	1dfb      	adds	r3, r7, #7
   15156:	781b      	ldrb	r3, [r3, #0]
   15158:	2b03      	cmp	r3, #3
   1515a:	d806      	bhi.n	1516a <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   1515c:	4b05      	ldr	r3, [pc, #20]	; (15174 <WifiHandlerSetState+0x2c>)
   1515e:	6818      	ldr	r0, [r3, #0]
   15160:	1df9      	adds	r1, r7, #7
   15162:	2300      	movs	r3, #0
   15164:	220a      	movs	r2, #10
   15166:	4c04      	ldr	r4, [pc, #16]	; (15178 <WifiHandlerSetState+0x30>)
   15168:	47a0      	blx	r4
    }
}
   1516a:	46c0      	nop			; (mov r8, r8)
   1516c:	46bd      	mov	sp, r7
   1516e:	b003      	add	sp, #12
   15170:	bd90      	pop	{r4, r7, pc}
   15172:	46c0      	nop			; (mov r8, r8)
   15174:	20000468 	.word	0x20000468
   15178:	000182f1 	.word	0x000182f1

0001517c <system_gclk_chan_get_config_defaults>:
   1517c:	b580      	push	{r7, lr}
   1517e:	b082      	sub	sp, #8
   15180:	af00      	add	r7, sp, #0
   15182:	6078      	str	r0, [r7, #4]
   15184:	687b      	ldr	r3, [r7, #4]
   15186:	2200      	movs	r2, #0
   15188:	701a      	strb	r2, [r3, #0]
   1518a:	46c0      	nop			; (mov r8, r8)
   1518c:	46bd      	mov	sp, r7
   1518e:	b002      	add	sp, #8
   15190:	bd80      	pop	{r7, pc}
	...

00015194 <system_apb_clock_set_mask>:
   15194:	b580      	push	{r7, lr}
   15196:	b082      	sub	sp, #8
   15198:	af00      	add	r7, sp, #0
   1519a:	0002      	movs	r2, r0
   1519c:	6039      	str	r1, [r7, #0]
   1519e:	1dfb      	adds	r3, r7, #7
   151a0:	701a      	strb	r2, [r3, #0]
   151a2:	1dfb      	adds	r3, r7, #7
   151a4:	781b      	ldrb	r3, [r3, #0]
   151a6:	2b01      	cmp	r3, #1
   151a8:	d00a      	beq.n	151c0 <system_apb_clock_set_mask+0x2c>
   151aa:	2b02      	cmp	r3, #2
   151ac:	d00f      	beq.n	151ce <system_apb_clock_set_mask+0x3a>
   151ae:	2b00      	cmp	r3, #0
   151b0:	d114      	bne.n	151dc <system_apb_clock_set_mask+0x48>
   151b2:	4b0e      	ldr	r3, [pc, #56]	; (151ec <system_apb_clock_set_mask+0x58>)
   151b4:	4a0d      	ldr	r2, [pc, #52]	; (151ec <system_apb_clock_set_mask+0x58>)
   151b6:	6991      	ldr	r1, [r2, #24]
   151b8:	683a      	ldr	r2, [r7, #0]
   151ba:	430a      	orrs	r2, r1
   151bc:	619a      	str	r2, [r3, #24]
   151be:	e00f      	b.n	151e0 <system_apb_clock_set_mask+0x4c>
   151c0:	4b0a      	ldr	r3, [pc, #40]	; (151ec <system_apb_clock_set_mask+0x58>)
   151c2:	4a0a      	ldr	r2, [pc, #40]	; (151ec <system_apb_clock_set_mask+0x58>)
   151c4:	69d1      	ldr	r1, [r2, #28]
   151c6:	683a      	ldr	r2, [r7, #0]
   151c8:	430a      	orrs	r2, r1
   151ca:	61da      	str	r2, [r3, #28]
   151cc:	e008      	b.n	151e0 <system_apb_clock_set_mask+0x4c>
   151ce:	4b07      	ldr	r3, [pc, #28]	; (151ec <system_apb_clock_set_mask+0x58>)
   151d0:	4a06      	ldr	r2, [pc, #24]	; (151ec <system_apb_clock_set_mask+0x58>)
   151d2:	6a11      	ldr	r1, [r2, #32]
   151d4:	683a      	ldr	r2, [r7, #0]
   151d6:	430a      	orrs	r2, r1
   151d8:	621a      	str	r2, [r3, #32]
   151da:	e001      	b.n	151e0 <system_apb_clock_set_mask+0x4c>
   151dc:	2317      	movs	r3, #23
   151de:	e000      	b.n	151e2 <system_apb_clock_set_mask+0x4e>
   151e0:	2300      	movs	r3, #0
   151e2:	0018      	movs	r0, r3
   151e4:	46bd      	mov	sp, r7
   151e6:	b002      	add	sp, #8
   151e8:	bd80      	pop	{r7, pc}
   151ea:	46c0      	nop			; (mov r8, r8)
   151ec:	40000400 	.word	0x40000400

000151f0 <system_pinmux_get_config_defaults>:
   151f0:	b580      	push	{r7, lr}
   151f2:	b082      	sub	sp, #8
   151f4:	af00      	add	r7, sp, #0
   151f6:	6078      	str	r0, [r7, #4]
   151f8:	687b      	ldr	r3, [r7, #4]
   151fa:	2280      	movs	r2, #128	; 0x80
   151fc:	701a      	strb	r2, [r3, #0]
   151fe:	687b      	ldr	r3, [r7, #4]
   15200:	2200      	movs	r2, #0
   15202:	705a      	strb	r2, [r3, #1]
   15204:	687b      	ldr	r3, [r7, #4]
   15206:	2201      	movs	r2, #1
   15208:	709a      	strb	r2, [r3, #2]
   1520a:	687b      	ldr	r3, [r7, #4]
   1520c:	2200      	movs	r2, #0
   1520e:	70da      	strb	r2, [r3, #3]
   15210:	46c0      	nop			; (mov r8, r8)
   15212:	46bd      	mov	sp, r7
   15214:	b002      	add	sp, #8
   15216:	bd80      	pop	{r7, pc}

00015218 <system_is_debugger_present>:
   15218:	b580      	push	{r7, lr}
   1521a:	af00      	add	r7, sp, #0
   1521c:	4b05      	ldr	r3, [pc, #20]	; (15234 <system_is_debugger_present+0x1c>)
   1521e:	789b      	ldrb	r3, [r3, #2]
   15220:	b2db      	uxtb	r3, r3
   15222:	001a      	movs	r2, r3
   15224:	2302      	movs	r3, #2
   15226:	4013      	ands	r3, r2
   15228:	1e5a      	subs	r2, r3, #1
   1522a:	4193      	sbcs	r3, r2
   1522c:	b2db      	uxtb	r3, r3
   1522e:	0018      	movs	r0, r3
   15230:	46bd      	mov	sp, r7
   15232:	bd80      	pop	{r7, pc}
   15234:	41002000 	.word	0x41002000

00015238 <system_interrupt_enter_critical_section>:
   15238:	b580      	push	{r7, lr}
   1523a:	af00      	add	r7, sp, #0
   1523c:	4b02      	ldr	r3, [pc, #8]	; (15248 <system_interrupt_enter_critical_section+0x10>)
   1523e:	4798      	blx	r3
   15240:	46c0      	nop			; (mov r8, r8)
   15242:	46bd      	mov	sp, r7
   15244:	bd80      	pop	{r7, pc}
   15246:	46c0      	nop			; (mov r8, r8)
   15248:	00023de9 	.word	0x00023de9

0001524c <system_interrupt_leave_critical_section>:
   1524c:	b580      	push	{r7, lr}
   1524e:	af00      	add	r7, sp, #0
   15250:	4b02      	ldr	r3, [pc, #8]	; (1525c <system_interrupt_leave_critical_section+0x10>)
   15252:	4798      	blx	r3
   15254:	46c0      	nop			; (mov r8, r8)
   15256:	46bd      	mov	sp, r7
   15258:	bd80      	pop	{r7, pc}
   1525a:	46c0      	nop			; (mov r8, r8)
   1525c:	00023e3d 	.word	0x00023e3d

00015260 <system_interrupt_disable>:
   15260:	b580      	push	{r7, lr}
   15262:	b082      	sub	sp, #8
   15264:	af00      	add	r7, sp, #0
   15266:	0002      	movs	r2, r0
   15268:	1dfb      	adds	r3, r7, #7
   1526a:	701a      	strb	r2, [r3, #0]
   1526c:	4a07      	ldr	r2, [pc, #28]	; (1528c <system_interrupt_disable+0x2c>)
   1526e:	1dfb      	adds	r3, r7, #7
   15270:	781b      	ldrb	r3, [r3, #0]
   15272:	0019      	movs	r1, r3
   15274:	231f      	movs	r3, #31
   15276:	400b      	ands	r3, r1
   15278:	2101      	movs	r1, #1
   1527a:	4099      	lsls	r1, r3
   1527c:	000b      	movs	r3, r1
   1527e:	0019      	movs	r1, r3
   15280:	2380      	movs	r3, #128	; 0x80
   15282:	50d1      	str	r1, [r2, r3]
   15284:	46c0      	nop			; (mov r8, r8)
   15286:	46bd      	mov	sp, r7
   15288:	b002      	add	sp, #8
   1528a:	bd80      	pop	{r7, pc}
   1528c:	e000e100 	.word	0xe000e100

00015290 <i2c_master_is_syncing>:
   15290:	b580      	push	{r7, lr}
   15292:	b084      	sub	sp, #16
   15294:	af00      	add	r7, sp, #0
   15296:	6078      	str	r0, [r7, #4]
   15298:	687b      	ldr	r3, [r7, #4]
   1529a:	681b      	ldr	r3, [r3, #0]
   1529c:	60fb      	str	r3, [r7, #12]
   1529e:	68fb      	ldr	r3, [r7, #12]
   152a0:	69db      	ldr	r3, [r3, #28]
   152a2:	2207      	movs	r2, #7
   152a4:	4013      	ands	r3, r2
   152a6:	1e5a      	subs	r2, r3, #1
   152a8:	4193      	sbcs	r3, r2
   152aa:	b2db      	uxtb	r3, r3
   152ac:	0018      	movs	r0, r3
   152ae:	46bd      	mov	sp, r7
   152b0:	b004      	add	sp, #16
   152b2:	bd80      	pop	{r7, pc}

000152b4 <_i2c_master_wait_for_sync>:
   152b4:	b580      	push	{r7, lr}
   152b6:	b082      	sub	sp, #8
   152b8:	af00      	add	r7, sp, #0
   152ba:	6078      	str	r0, [r7, #4]
   152bc:	46c0      	nop			; (mov r8, r8)
   152be:	687b      	ldr	r3, [r7, #4]
   152c0:	0018      	movs	r0, r3
   152c2:	4b04      	ldr	r3, [pc, #16]	; (152d4 <_i2c_master_wait_for_sync+0x20>)
   152c4:	4798      	blx	r3
   152c6:	1e03      	subs	r3, r0, #0
   152c8:	d1f9      	bne.n	152be <_i2c_master_wait_for_sync+0xa>
   152ca:	46c0      	nop			; (mov r8, r8)
   152cc:	46bd      	mov	sp, r7
   152ce:	b002      	add	sp, #8
   152d0:	bd80      	pop	{r7, pc}
   152d2:	46c0      	nop			; (mov r8, r8)
   152d4:	00015291 	.word	0x00015291

000152d8 <i2c_master_disable>:
   152d8:	b580      	push	{r7, lr}
   152da:	b084      	sub	sp, #16
   152dc:	af00      	add	r7, sp, #0
   152de:	6078      	str	r0, [r7, #4]
   152e0:	687b      	ldr	r3, [r7, #4]
   152e2:	681b      	ldr	r3, [r3, #0]
   152e4:	60fb      	str	r3, [r7, #12]
   152e6:	687b      	ldr	r3, [r7, #4]
   152e8:	681b      	ldr	r3, [r3, #0]
   152ea:	0018      	movs	r0, r3
   152ec:	4b0d      	ldr	r3, [pc, #52]	; (15324 <i2c_master_disable+0x4c>)
   152ee:	4798      	blx	r3
   152f0:	0003      	movs	r3, r0
   152f2:	0018      	movs	r0, r3
   152f4:	4b0c      	ldr	r3, [pc, #48]	; (15328 <i2c_master_disable+0x50>)
   152f6:	4798      	blx	r3
   152f8:	687b      	ldr	r3, [r7, #4]
   152fa:	0018      	movs	r0, r3
   152fc:	4b0b      	ldr	r3, [pc, #44]	; (1532c <i2c_master_disable+0x54>)
   152fe:	4798      	blx	r3
   15300:	68fb      	ldr	r3, [r7, #12]
   15302:	2283      	movs	r2, #131	; 0x83
   15304:	751a      	strb	r2, [r3, #20]
   15306:	68fb      	ldr	r3, [r7, #12]
   15308:	2283      	movs	r2, #131	; 0x83
   1530a:	761a      	strb	r2, [r3, #24]
   1530c:	68fb      	ldr	r3, [r7, #12]
   1530e:	681b      	ldr	r3, [r3, #0]
   15310:	2202      	movs	r2, #2
   15312:	4393      	bics	r3, r2
   15314:	001a      	movs	r2, r3
   15316:	68fb      	ldr	r3, [r7, #12]
   15318:	601a      	str	r2, [r3, #0]
   1531a:	46c0      	nop			; (mov r8, r8)
   1531c:	46bd      	mov	sp, r7
   1531e:	b004      	add	sp, #16
   15320:	bd80      	pop	{r7, pc}
   15322:	46c0      	nop			; (mov r8, r8)
   15324:	000252bd 	.word	0x000252bd
   15328:	00015261 	.word	0x00015261
   1532c:	000152b5 	.word	0x000152b5

00015330 <_i2c_master_set_config>:
   15330:	b5f0      	push	{r4, r5, r6, r7, lr}
   15332:	b097      	sub	sp, #92	; 0x5c
   15334:	af00      	add	r7, sp, #0
   15336:	6178      	str	r0, [r7, #20]
   15338:	6139      	str	r1, [r7, #16]
   1533a:	2300      	movs	r3, #0
   1533c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1533e:	2300      	movs	r3, #0
   15340:	653b      	str	r3, [r7, #80]	; 0x50
   15342:	2300      	movs	r3, #0
   15344:	64fb      	str	r3, [r7, #76]	; 0x4c
   15346:	233b      	movs	r3, #59	; 0x3b
   15348:	2210      	movs	r2, #16
   1534a:	4694      	mov	ip, r2
   1534c:	44bc      	add	ip, r7
   1534e:	4463      	add	r3, ip
   15350:	2200      	movs	r2, #0
   15352:	701a      	strb	r2, [r3, #0]
   15354:	697b      	ldr	r3, [r7, #20]
   15356:	681b      	ldr	r3, [r3, #0]
   15358:	63bb      	str	r3, [r7, #56]	; 0x38
   1535a:	697b      	ldr	r3, [r7, #20]
   1535c:	681b      	ldr	r3, [r3, #0]
   1535e:	637b      	str	r3, [r7, #52]	; 0x34
   15360:	2323      	movs	r3, #35	; 0x23
   15362:	2210      	movs	r2, #16
   15364:	18ba      	adds	r2, r7, r2
   15366:	18d4      	adds	r4, r2, r3
   15368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1536a:	0018      	movs	r0, r3
   1536c:	4bc0      	ldr	r3, [pc, #768]	; (15670 <_i2c_master_set_config+0x340>)
   1536e:	4798      	blx	r3
   15370:	0003      	movs	r3, r0
   15372:	7023      	strb	r3, [r4, #0]
   15374:	230c      	movs	r3, #12
   15376:	2210      	movs	r2, #16
   15378:	4694      	mov	ip, r2
   1537a:	44bc      	add	ip, r7
   1537c:	4463      	add	r3, ip
   1537e:	0018      	movs	r0, r3
   15380:	4bbc      	ldr	r3, [pc, #752]	; (15674 <_i2c_master_set_config+0x344>)
   15382:	4798      	blx	r3
   15384:	693b      	ldr	r3, [r7, #16]
   15386:	69db      	ldr	r3, [r3, #28]
   15388:	647b      	str	r3, [r7, #68]	; 0x44
   1538a:	693b      	ldr	r3, [r7, #16]
   1538c:	6a1b      	ldr	r3, [r3, #32]
   1538e:	643b      	str	r3, [r7, #64]	; 0x40
   15390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15392:	2b00      	cmp	r3, #0
   15394:	d106      	bne.n	153a4 <_i2c_master_set_config+0x74>
   15396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15398:	2100      	movs	r1, #0
   1539a:	0018      	movs	r0, r3
   1539c:	4bb6      	ldr	r3, [pc, #728]	; (15678 <_i2c_master_set_config+0x348>)
   1539e:	4798      	blx	r3
   153a0:	0003      	movs	r3, r0
   153a2:	647b      	str	r3, [r7, #68]	; 0x44
   153a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   153a6:	b2da      	uxtb	r2, r3
   153a8:	230c      	movs	r3, #12
   153aa:	2110      	movs	r1, #16
   153ac:	468c      	mov	ip, r1
   153ae:	44bc      	add	ip, r7
   153b0:	4463      	add	r3, ip
   153b2:	701a      	strb	r2, [r3, #0]
   153b4:	230c      	movs	r3, #12
   153b6:	2210      	movs	r2, #16
   153b8:	4694      	mov	ip, r2
   153ba:	44bc      	add	ip, r7
   153bc:	4463      	add	r3, ip
   153be:	2202      	movs	r2, #2
   153c0:	705a      	strb	r2, [r3, #1]
   153c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   153c4:	0c1b      	lsrs	r3, r3, #16
   153c6:	b2db      	uxtb	r3, r3
   153c8:	220c      	movs	r2, #12
   153ca:	2110      	movs	r1, #16
   153cc:	468c      	mov	ip, r1
   153ce:	44bc      	add	ip, r7
   153d0:	4462      	add	r2, ip
   153d2:	0011      	movs	r1, r2
   153d4:	0018      	movs	r0, r3
   153d6:	4ba9      	ldr	r3, [pc, #676]	; (1567c <_i2c_master_set_config+0x34c>)
   153d8:	4798      	blx	r3
   153da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   153dc:	2b00      	cmp	r3, #0
   153de:	d106      	bne.n	153ee <_i2c_master_set_config+0xbe>
   153e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   153e2:	2101      	movs	r1, #1
   153e4:	0018      	movs	r0, r3
   153e6:	4ba4      	ldr	r3, [pc, #656]	; (15678 <_i2c_master_set_config+0x348>)
   153e8:	4798      	blx	r3
   153ea:	0003      	movs	r3, r0
   153ec:	643b      	str	r3, [r7, #64]	; 0x40
   153ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   153f0:	b2da      	uxtb	r2, r3
   153f2:	230c      	movs	r3, #12
   153f4:	2110      	movs	r1, #16
   153f6:	468c      	mov	ip, r1
   153f8:	44bc      	add	ip, r7
   153fa:	4463      	add	r3, ip
   153fc:	701a      	strb	r2, [r3, #0]
   153fe:	230c      	movs	r3, #12
   15400:	2210      	movs	r2, #16
   15402:	4694      	mov	ip, r2
   15404:	44bc      	add	ip, r7
   15406:	4463      	add	r3, ip
   15408:	2202      	movs	r2, #2
   1540a:	705a      	strb	r2, [r3, #1]
   1540c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1540e:	0c1b      	lsrs	r3, r3, #16
   15410:	b2db      	uxtb	r3, r3
   15412:	220c      	movs	r2, #12
   15414:	2110      	movs	r1, #16
   15416:	468c      	mov	ip, r1
   15418:	44bc      	add	ip, r7
   1541a:	4462      	add	r2, ip
   1541c:	0011      	movs	r1, r2
   1541e:	0018      	movs	r0, r3
   15420:	4b96      	ldr	r3, [pc, #600]	; (1567c <_i2c_master_set_config+0x34c>)
   15422:	4798      	blx	r3
   15424:	693b      	ldr	r3, [r7, #16]
   15426:	8a9a      	ldrh	r2, [r3, #20]
   15428:	697b      	ldr	r3, [r7, #20]
   1542a:	80da      	strh	r2, [r3, #6]
   1542c:	693b      	ldr	r3, [r7, #16]
   1542e:	8ada      	ldrh	r2, [r3, #22]
   15430:	697b      	ldr	r3, [r7, #20]
   15432:	811a      	strh	r2, [r3, #8]
   15434:	693b      	ldr	r3, [r7, #16]
   15436:	7e1b      	ldrb	r3, [r3, #24]
   15438:	2b00      	cmp	r3, #0
   1543a:	d103      	bne.n	15444 <_i2c_master_set_config+0x114>
   1543c:	4b90      	ldr	r3, [pc, #576]	; (15680 <_i2c_master_set_config+0x350>)
   1543e:	4798      	blx	r3
   15440:	1e03      	subs	r3, r0, #0
   15442:	d002      	beq.n	1544a <_i2c_master_set_config+0x11a>
   15444:	2380      	movs	r3, #128	; 0x80
   15446:	657b      	str	r3, [r7, #84]	; 0x54
   15448:	e001      	b.n	1544e <_i2c_master_set_config+0x11e>
   1544a:	2300      	movs	r3, #0
   1544c:	657b      	str	r3, [r7, #84]	; 0x54
   1544e:	693b      	ldr	r3, [r7, #16]
   15450:	691b      	ldr	r3, [r3, #16]
   15452:	2b00      	cmp	r3, #0
   15454:	d004      	beq.n	15460 <_i2c_master_set_config+0x130>
   15456:	693b      	ldr	r3, [r7, #16]
   15458:	691b      	ldr	r3, [r3, #16]
   1545a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1545c:	4313      	orrs	r3, r2
   1545e:	657b      	str	r3, [r7, #84]	; 0x54
   15460:	693b      	ldr	r3, [r7, #16]
   15462:	689b      	ldr	r3, [r3, #8]
   15464:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   15466:	4313      	orrs	r3, r2
   15468:	657b      	str	r3, [r7, #84]	; 0x54
   1546a:	693b      	ldr	r3, [r7, #16]
   1546c:	2224      	movs	r2, #36	; 0x24
   1546e:	5c9b      	ldrb	r3, [r3, r2]
   15470:	2b00      	cmp	r3, #0
   15472:	d004      	beq.n	1547e <_i2c_master_set_config+0x14e>
   15474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15476:	2280      	movs	r2, #128	; 0x80
   15478:	05d2      	lsls	r2, r2, #23
   1547a:	4313      	orrs	r3, r2
   1547c:	657b      	str	r3, [r7, #84]	; 0x54
   1547e:	693b      	ldr	r3, [r7, #16]
   15480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15482:	2b00      	cmp	r3, #0
   15484:	d004      	beq.n	15490 <_i2c_master_set_config+0x160>
   15486:	693b      	ldr	r3, [r7, #16]
   15488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1548a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1548c:	4313      	orrs	r3, r2
   1548e:	657b      	str	r3, [r7, #84]	; 0x54
   15490:	693b      	ldr	r3, [r7, #16]
   15492:	222c      	movs	r2, #44	; 0x2c
   15494:	5c9b      	ldrb	r3, [r3, r2]
   15496:	2b00      	cmp	r3, #0
   15498:	d105      	bne.n	154a6 <_i2c_master_set_config+0x176>
   1549a:	693b      	ldr	r3, [r7, #16]
   1549c:	689a      	ldr	r2, [r3, #8]
   1549e:	2380      	movs	r3, #128	; 0x80
   154a0:	049b      	lsls	r3, r3, #18
   154a2:	429a      	cmp	r2, r3
   154a4:	d104      	bne.n	154b0 <_i2c_master_set_config+0x180>
   154a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   154a8:	2280      	movs	r2, #128	; 0x80
   154aa:	0512      	lsls	r2, r2, #20
   154ac:	4313      	orrs	r3, r2
   154ae:	657b      	str	r3, [r7, #84]	; 0x54
   154b0:	693b      	ldr	r3, [r7, #16]
   154b2:	222d      	movs	r2, #45	; 0x2d
   154b4:	5c9b      	ldrb	r3, [r3, r2]
   154b6:	2b00      	cmp	r3, #0
   154b8:	d004      	beq.n	154c4 <_i2c_master_set_config+0x194>
   154ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   154bc:	2280      	movs	r2, #128	; 0x80
   154be:	0412      	lsls	r2, r2, #16
   154c0:	4313      	orrs	r3, r2
   154c2:	657b      	str	r3, [r7, #84]	; 0x54
   154c4:	693b      	ldr	r3, [r7, #16]
   154c6:	222e      	movs	r2, #46	; 0x2e
   154c8:	5c9b      	ldrb	r3, [r3, r2]
   154ca:	2b00      	cmp	r3, #0
   154cc:	d004      	beq.n	154d8 <_i2c_master_set_config+0x1a8>
   154ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   154d0:	2280      	movs	r2, #128	; 0x80
   154d2:	03d2      	lsls	r2, r2, #15
   154d4:	4313      	orrs	r3, r2
   154d6:	657b      	str	r3, [r7, #84]	; 0x54
   154d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   154da:	681a      	ldr	r2, [r3, #0]
   154dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   154de:	431a      	orrs	r2, r3
   154e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   154e2:	601a      	str	r2, [r3, #0]
   154e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   154e6:	2280      	movs	r2, #128	; 0x80
   154e8:	0052      	lsls	r2, r2, #1
   154ea:	605a      	str	r2, [r3, #4]
   154ec:	2323      	movs	r3, #35	; 0x23
   154ee:	2210      	movs	r2, #16
   154f0:	4694      	mov	ip, r2
   154f2:	44bc      	add	ip, r7
   154f4:	4463      	add	r3, ip
   154f6:	781b      	ldrb	r3, [r3, #0]
   154f8:	3314      	adds	r3, #20
   154fa:	b2db      	uxtb	r3, r3
   154fc:	0018      	movs	r0, r3
   154fe:	4b61      	ldr	r3, [pc, #388]	; (15684 <_i2c_master_set_config+0x354>)
   15500:	4798      	blx	r3
   15502:	0003      	movs	r3, r0
   15504:	62fb      	str	r3, [r7, #44]	; 0x2c
   15506:	693b      	ldr	r3, [r7, #16]
   15508:	681b      	ldr	r3, [r3, #0]
   1550a:	22fa      	movs	r2, #250	; 0xfa
   1550c:	0092      	lsls	r2, r2, #2
   1550e:	4353      	muls	r3, r2
   15510:	62bb      	str	r3, [r7, #40]	; 0x28
   15512:	693b      	ldr	r3, [r7, #16]
   15514:	685b      	ldr	r3, [r3, #4]
   15516:	22fa      	movs	r2, #250	; 0xfa
   15518:	0092      	lsls	r2, r2, #2
   1551a:	4353      	muls	r3, r2
   1551c:	627b      	str	r3, [r7, #36]	; 0x24
   1551e:	693b      	ldr	r3, [r7, #16]
   15520:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   15522:	623b      	str	r3, [r7, #32]
   15524:	4b58      	ldr	r3, [pc, #352]	; (15688 <_i2c_master_set_config+0x358>)
   15526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15528:	4798      	blx	r3
   1552a:	0005      	movs	r5, r0
   1552c:	000e      	movs	r6, r1
   1552e:	4b56      	ldr	r3, [pc, #344]	; (15688 <_i2c_master_set_config+0x358>)
   15530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   15532:	4798      	blx	r3
   15534:	60b8      	str	r0, [r7, #8]
   15536:	60f9      	str	r1, [r7, #12]
   15538:	4b53      	ldr	r3, [pc, #332]	; (15688 <_i2c_master_set_config+0x358>)
   1553a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1553c:	4798      	blx	r3
   1553e:	4c53      	ldr	r4, [pc, #332]	; (1568c <_i2c_master_set_config+0x35c>)
   15540:	4a53      	ldr	r2, [pc, #332]	; (15690 <_i2c_master_set_config+0x360>)
   15542:	4b54      	ldr	r3, [pc, #336]	; (15694 <_i2c_master_set_config+0x364>)
   15544:	47a0      	blx	r4
   15546:	0003      	movs	r3, r0
   15548:	000c      	movs	r4, r1
   1554a:	603b      	str	r3, [r7, #0]
   1554c:	607c      	str	r4, [r7, #4]
   1554e:	4b4e      	ldr	r3, [pc, #312]	; (15688 <_i2c_master_set_config+0x358>)
   15550:	6a38      	ldr	r0, [r7, #32]
   15552:	4798      	blx	r3
   15554:	0002      	movs	r2, r0
   15556:	000b      	movs	r3, r1
   15558:	4c4c      	ldr	r4, [pc, #304]	; (1568c <_i2c_master_set_config+0x35c>)
   1555a:	6838      	ldr	r0, [r7, #0]
   1555c:	6879      	ldr	r1, [r7, #4]
   1555e:	47a0      	blx	r4
   15560:	0003      	movs	r3, r0
   15562:	000c      	movs	r4, r1
   15564:	0018      	movs	r0, r3
   15566:	0021      	movs	r1, r4
   15568:	4c4b      	ldr	r4, [pc, #300]	; (15698 <_i2c_master_set_config+0x368>)
   1556a:	2200      	movs	r2, #0
   1556c:	4b4b      	ldr	r3, [pc, #300]	; (1569c <_i2c_master_set_config+0x36c>)
   1556e:	47a0      	blx	r4
   15570:	0003      	movs	r3, r0
   15572:	000c      	movs	r4, r1
   15574:	001a      	movs	r2, r3
   15576:	0023      	movs	r3, r4
   15578:	4c44      	ldr	r4, [pc, #272]	; (1568c <_i2c_master_set_config+0x35c>)
   1557a:	68b8      	ldr	r0, [r7, #8]
   1557c:	68f9      	ldr	r1, [r7, #12]
   1557e:	47a0      	blx	r4
   15580:	0003      	movs	r3, r0
   15582:	000c      	movs	r4, r1
   15584:	001a      	movs	r2, r3
   15586:	0023      	movs	r3, r4
   15588:	4c45      	ldr	r4, [pc, #276]	; (156a0 <_i2c_master_set_config+0x370>)
   1558a:	0028      	movs	r0, r5
   1558c:	0031      	movs	r1, r6
   1558e:	47a0      	blx	r4
   15590:	0003      	movs	r3, r0
   15592:	000c      	movs	r4, r1
   15594:	001d      	movs	r5, r3
   15596:	0026      	movs	r6, r4
   15598:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1559a:	005a      	lsls	r2, r3, #1
   1559c:	4b3a      	ldr	r3, [pc, #232]	; (15688 <_i2c_master_set_config+0x358>)
   1559e:	0010      	movs	r0, r2
   155a0:	4798      	blx	r3
   155a2:	0002      	movs	r2, r0
   155a4:	000b      	movs	r3, r1
   155a6:	4c3c      	ldr	r4, [pc, #240]	; (15698 <_i2c_master_set_config+0x368>)
   155a8:	0028      	movs	r0, r5
   155aa:	0031      	movs	r1, r6
   155ac:	47a0      	blx	r4
   155ae:	0003      	movs	r3, r0
   155b0:	000c      	movs	r4, r1
   155b2:	0018      	movs	r0, r3
   155b4:	0021      	movs	r1, r4
   155b6:	4c3a      	ldr	r4, [pc, #232]	; (156a0 <_i2c_master_set_config+0x370>)
   155b8:	2200      	movs	r2, #0
   155ba:	4b3a      	ldr	r3, [pc, #232]	; (156a4 <_i2c_master_set_config+0x374>)
   155bc:	47a0      	blx	r4
   155be:	0003      	movs	r3, r0
   155c0:	000c      	movs	r4, r1
   155c2:	001d      	movs	r5, r3
   155c4:	0026      	movs	r6, r4
   155c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   155c8:	005a      	lsls	r2, r3, #1
   155ca:	4b2f      	ldr	r3, [pc, #188]	; (15688 <_i2c_master_set_config+0x358>)
   155cc:	0010      	movs	r0, r2
   155ce:	4798      	blx	r3
   155d0:	0002      	movs	r2, r0
   155d2:	000b      	movs	r3, r1
   155d4:	4c34      	ldr	r4, [pc, #208]	; (156a8 <_i2c_master_set_config+0x378>)
   155d6:	0028      	movs	r0, r5
   155d8:	0031      	movs	r1, r6
   155da:	47a0      	blx	r4
   155dc:	0003      	movs	r3, r0
   155de:	000c      	movs	r4, r1
   155e0:	0019      	movs	r1, r3
   155e2:	0022      	movs	r2, r4
   155e4:	4b31      	ldr	r3, [pc, #196]	; (156ac <_i2c_master_set_config+0x37c>)
   155e6:	0008      	movs	r0, r1
   155e8:	0011      	movs	r1, r2
   155ea:	4798      	blx	r3
   155ec:	0003      	movs	r3, r0
   155ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   155f0:	693b      	ldr	r3, [r7, #16]
   155f2:	689a      	ldr	r2, [r3, #8]
   155f4:	2380      	movs	r3, #128	; 0x80
   155f6:	049b      	lsls	r3, r3, #18
   155f8:	429a      	cmp	r2, r3
   155fa:	d16a      	bne.n	156d2 <_i2c_master_set_config+0x3a2>
   155fc:	4b22      	ldr	r3, [pc, #136]	; (15688 <_i2c_master_set_config+0x358>)
   155fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15600:	4798      	blx	r3
   15602:	4c25      	ldr	r4, [pc, #148]	; (15698 <_i2c_master_set_config+0x368>)
   15604:	0002      	movs	r2, r0
   15606:	000b      	movs	r3, r1
   15608:	47a0      	blx	r4
   1560a:	0003      	movs	r3, r0
   1560c:	000c      	movs	r4, r1
   1560e:	001d      	movs	r5, r3
   15610:	0026      	movs	r6, r4
   15612:	4b1d      	ldr	r3, [pc, #116]	; (15688 <_i2c_master_set_config+0x358>)
   15614:	6a78      	ldr	r0, [r7, #36]	; 0x24
   15616:	4798      	blx	r3
   15618:	4c1c      	ldr	r4, [pc, #112]	; (1568c <_i2c_master_set_config+0x35c>)
   1561a:	2200      	movs	r2, #0
   1561c:	4b24      	ldr	r3, [pc, #144]	; (156b0 <_i2c_master_set_config+0x380>)
   1561e:	47a0      	blx	r4
   15620:	0003      	movs	r3, r0
   15622:	000c      	movs	r4, r1
   15624:	001a      	movs	r2, r3
   15626:	0023      	movs	r3, r4
   15628:	4c1f      	ldr	r4, [pc, #124]	; (156a8 <_i2c_master_set_config+0x378>)
   1562a:	0028      	movs	r0, r5
   1562c:	0031      	movs	r1, r6
   1562e:	47a0      	blx	r4
   15630:	0003      	movs	r3, r0
   15632:	000c      	movs	r4, r1
   15634:	0018      	movs	r0, r3
   15636:	0021      	movs	r1, r4
   15638:	4c19      	ldr	r4, [pc, #100]	; (156a0 <_i2c_master_set_config+0x370>)
   1563a:	2200      	movs	r2, #0
   1563c:	4b19      	ldr	r3, [pc, #100]	; (156a4 <_i2c_master_set_config+0x374>)
   1563e:	47a0      	blx	r4
   15640:	0003      	movs	r3, r0
   15642:	000c      	movs	r4, r1
   15644:	0019      	movs	r1, r3
   15646:	0022      	movs	r2, r4
   15648:	4b18      	ldr	r3, [pc, #96]	; (156ac <_i2c_master_set_config+0x37c>)
   1564a:	0008      	movs	r0, r1
   1564c:	0011      	movs	r1, r2
   1564e:	4798      	blx	r3
   15650:	0003      	movs	r3, r0
   15652:	64fb      	str	r3, [r7, #76]	; 0x4c
   15654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15656:	2b00      	cmp	r3, #0
   15658:	d02e      	beq.n	156b8 <_i2c_master_set_config+0x388>
   1565a:	4b16      	ldr	r3, [pc, #88]	; (156b4 <_i2c_master_set_config+0x384>)
   1565c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1565e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15660:	4798      	blx	r3
   15662:	0003      	movs	r3, r0
   15664:	1e9a      	subs	r2, r3, #2
   15666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15668:	1ad3      	subs	r3, r2, r3
   1566a:	653b      	str	r3, [r7, #80]	; 0x50
   1566c:	e031      	b.n	156d2 <_i2c_master_set_config+0x3a2>
   1566e:	46c0      	nop			; (mov r8, r8)
   15670:	000251ed 	.word	0x000251ed
   15674:	000151f1 	.word	0x000151f1
   15678:	00025031 	.word	0x00025031
   1567c:	00027ddd 	.word	0x00027ddd
   15680:	00015219 	.word	0x00015219
   15684:	00027ba1 	.word	0x00027ba1
   15688:	00032045 	.word	0x00032045
   1568c:	000314b1 	.word	0x000314b1
   15690:	e826d695 	.word	0xe826d695
   15694:	3e112e0b 	.word	0x3e112e0b
   15698:	00030829 	.word	0x00030829
   1569c:	40240000 	.word	0x40240000
   156a0:	000319b1 	.word	0x000319b1
   156a4:	3ff00000 	.word	0x3ff00000
   156a8:	00030e49 	.word	0x00030e49
   156ac:	00031fdd 	.word	0x00031fdd
   156b0:	40080000 	.word	0x40080000
   156b4:	000304e9 	.word	0x000304e9
   156b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   156ba:	005a      	lsls	r2, r3, #1
   156bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   156be:	18d3      	adds	r3, r2, r3
   156c0:	1e5a      	subs	r2, r3, #1
   156c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   156c4:	0059      	lsls	r1, r3, #1
   156c6:	4b1d      	ldr	r3, [pc, #116]	; (1573c <_i2c_master_set_config+0x40c>)
   156c8:	0010      	movs	r0, r2
   156ca:	4798      	blx	r3
   156cc:	0003      	movs	r3, r0
   156ce:	3b01      	subs	r3, #1
   156d0:	653b      	str	r3, [r7, #80]	; 0x50
   156d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   156d4:	2bff      	cmp	r3, #255	; 0xff
   156d6:	dc08      	bgt.n	156ea <_i2c_master_set_config+0x3ba>
   156d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   156da:	2b00      	cmp	r3, #0
   156dc:	db05      	blt.n	156ea <_i2c_master_set_config+0x3ba>
   156de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   156e0:	2bff      	cmp	r3, #255	; 0xff
   156e2:	dc02      	bgt.n	156ea <_i2c_master_set_config+0x3ba>
   156e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   156e6:	2b00      	cmp	r3, #0
   156e8:	da06      	bge.n	156f8 <_i2c_master_set_config+0x3c8>
   156ea:	233b      	movs	r3, #59	; 0x3b
   156ec:	2210      	movs	r2, #16
   156ee:	4694      	mov	ip, r2
   156f0:	44bc      	add	ip, r7
   156f2:	4463      	add	r3, ip
   156f4:	2240      	movs	r2, #64	; 0x40
   156f6:	701a      	strb	r2, [r3, #0]
   156f8:	233b      	movs	r3, #59	; 0x3b
   156fa:	2210      	movs	r2, #16
   156fc:	4694      	mov	ip, r2
   156fe:	44bc      	add	ip, r7
   15700:	4463      	add	r3, ip
   15702:	781b      	ldrb	r3, [r3, #0]
   15704:	2b40      	cmp	r3, #64	; 0x40
   15706:	d00e      	beq.n	15726 <_i2c_master_set_config+0x3f6>
   15708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1570a:	22ff      	movs	r2, #255	; 0xff
   1570c:	401a      	ands	r2, r3
   1570e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   15710:	041b      	lsls	r3, r3, #16
   15712:	0019      	movs	r1, r3
   15714:	23ff      	movs	r3, #255	; 0xff
   15716:	041b      	lsls	r3, r3, #16
   15718:	400b      	ands	r3, r1
   1571a:	4313      	orrs	r3, r2
   1571c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1571e:	0612      	lsls	r2, r2, #24
   15720:	431a      	orrs	r2, r3
   15722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15724:	60da      	str	r2, [r3, #12]
   15726:	233b      	movs	r3, #59	; 0x3b
   15728:	2210      	movs	r2, #16
   1572a:	4694      	mov	ip, r2
   1572c:	44bc      	add	ip, r7
   1572e:	4463      	add	r3, ip
   15730:	781b      	ldrb	r3, [r3, #0]
   15732:	0018      	movs	r0, r3
   15734:	46bd      	mov	sp, r7
   15736:	b017      	add	sp, #92	; 0x5c
   15738:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1573a:	46c0      	nop			; (mov r8, r8)
   1573c:	000304e9 	.word	0x000304e9

00015740 <i2c_master_init>:
   15740:	b590      	push	{r4, r7, lr}
   15742:	b08b      	sub	sp, #44	; 0x2c
   15744:	af00      	add	r7, sp, #0
   15746:	60f8      	str	r0, [r7, #12]
   15748:	60b9      	str	r1, [r7, #8]
   1574a:	607a      	str	r2, [r7, #4]
   1574c:	68fb      	ldr	r3, [r7, #12]
   1574e:	68ba      	ldr	r2, [r7, #8]
   15750:	601a      	str	r2, [r3, #0]
   15752:	68fb      	ldr	r3, [r7, #12]
   15754:	681b      	ldr	r3, [r3, #0]
   15756:	627b      	str	r3, [r7, #36]	; 0x24
   15758:	68fb      	ldr	r3, [r7, #12]
   1575a:	681b      	ldr	r3, [r3, #0]
   1575c:	0018      	movs	r0, r3
   1575e:	4b3b      	ldr	r3, [pc, #236]	; (1584c <i2c_master_init+0x10c>)
   15760:	4798      	blx	r3
   15762:	0003      	movs	r3, r0
   15764:	623b      	str	r3, [r7, #32]
   15766:	6a3b      	ldr	r3, [r7, #32]
   15768:	3302      	adds	r3, #2
   1576a:	61fb      	str	r3, [r7, #28]
   1576c:	6a3b      	ldr	r3, [r7, #32]
   1576e:	3314      	adds	r3, #20
   15770:	61bb      	str	r3, [r7, #24]
   15772:	2201      	movs	r2, #1
   15774:	69fb      	ldr	r3, [r7, #28]
   15776:	409a      	lsls	r2, r3
   15778:	0013      	movs	r3, r2
   1577a:	0019      	movs	r1, r3
   1577c:	2002      	movs	r0, #2
   1577e:	4b34      	ldr	r3, [pc, #208]	; (15850 <i2c_master_init+0x110>)
   15780:	4798      	blx	r3
   15782:	2314      	movs	r3, #20
   15784:	18fb      	adds	r3, r7, r3
   15786:	0018      	movs	r0, r3
   15788:	4b32      	ldr	r3, [pc, #200]	; (15854 <i2c_master_init+0x114>)
   1578a:	4798      	blx	r3
   1578c:	687b      	ldr	r3, [r7, #4]
   1578e:	7b1a      	ldrb	r2, [r3, #12]
   15790:	2314      	movs	r3, #20
   15792:	18fb      	adds	r3, r7, r3
   15794:	701a      	strb	r2, [r3, #0]
   15796:	69bb      	ldr	r3, [r7, #24]
   15798:	b2db      	uxtb	r3, r3
   1579a:	2214      	movs	r2, #20
   1579c:	18ba      	adds	r2, r7, r2
   1579e:	0011      	movs	r1, r2
   157a0:	0018      	movs	r0, r3
   157a2:	4b2d      	ldr	r3, [pc, #180]	; (15858 <i2c_master_init+0x118>)
   157a4:	4798      	blx	r3
   157a6:	69bb      	ldr	r3, [r7, #24]
   157a8:	b2db      	uxtb	r3, r3
   157aa:	0018      	movs	r0, r3
   157ac:	4b2b      	ldr	r3, [pc, #172]	; (1585c <i2c_master_init+0x11c>)
   157ae:	4798      	blx	r3
   157b0:	687b      	ldr	r3, [r7, #4]
   157b2:	7b1b      	ldrb	r3, [r3, #12]
   157b4:	2100      	movs	r1, #0
   157b6:	0018      	movs	r0, r3
   157b8:	4b29      	ldr	r3, [pc, #164]	; (15860 <i2c_master_init+0x120>)
   157ba:	4798      	blx	r3
   157bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   157be:	681b      	ldr	r3, [r3, #0]
   157c0:	2202      	movs	r2, #2
   157c2:	4013      	ands	r3, r2
   157c4:	d001      	beq.n	157ca <i2c_master_init+0x8a>
   157c6:	231c      	movs	r3, #28
   157c8:	e03b      	b.n	15842 <i2c_master_init+0x102>
   157ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   157cc:	681b      	ldr	r3, [r3, #0]
   157ce:	2201      	movs	r2, #1
   157d0:	4013      	ands	r3, r2
   157d2:	d001      	beq.n	157d8 <i2c_master_init+0x98>
   157d4:	2305      	movs	r3, #5
   157d6:	e034      	b.n	15842 <i2c_master_init+0x102>
   157d8:	68fb      	ldr	r3, [r7, #12]
   157da:	681b      	ldr	r3, [r3, #0]
   157dc:	2217      	movs	r2, #23
   157de:	18bc      	adds	r4, r7, r2
   157e0:	0018      	movs	r0, r3
   157e2:	4b1a      	ldr	r3, [pc, #104]	; (1584c <i2c_master_init+0x10c>)
   157e4:	4798      	blx	r3
   157e6:	0003      	movs	r3, r0
   157e8:	7023      	strb	r3, [r4, #0]
   157ea:	4a1e      	ldr	r2, [pc, #120]	; (15864 <i2c_master_init+0x124>)
   157ec:	2317      	movs	r3, #23
   157ee:	18fb      	adds	r3, r7, r3
   157f0:	781b      	ldrb	r3, [r3, #0]
   157f2:	0011      	movs	r1, r2
   157f4:	0018      	movs	r0, r3
   157f6:	4b1c      	ldr	r3, [pc, #112]	; (15868 <i2c_master_init+0x128>)
   157f8:	4798      	blx	r3
   157fa:	2317      	movs	r3, #23
   157fc:	18fb      	adds	r3, r7, r3
   157fe:	781a      	ldrb	r2, [r3, #0]
   15800:	4b1a      	ldr	r3, [pc, #104]	; (1586c <i2c_master_init+0x12c>)
   15802:	0092      	lsls	r2, r2, #2
   15804:	68f9      	ldr	r1, [r7, #12]
   15806:	50d1      	str	r1, [r2, r3]
   15808:	68fb      	ldr	r3, [r7, #12]
   1580a:	2200      	movs	r2, #0
   1580c:	761a      	strb	r2, [r3, #24]
   1580e:	68fb      	ldr	r3, [r7, #12]
   15810:	2200      	movs	r2, #0
   15812:	765a      	strb	r2, [r3, #25]
   15814:	68fb      	ldr	r3, [r7, #12]
   15816:	2200      	movs	r2, #0
   15818:	835a      	strh	r2, [r3, #26]
   1581a:	68fb      	ldr	r3, [r7, #12]
   1581c:	2200      	movs	r2, #0
   1581e:	839a      	strh	r2, [r3, #28]
   15820:	68fb      	ldr	r3, [r7, #12]
   15822:	2225      	movs	r2, #37	; 0x25
   15824:	2100      	movs	r1, #0
   15826:	5499      	strb	r1, [r3, r2]
   15828:	68fb      	ldr	r3, [r7, #12]
   1582a:	2200      	movs	r2, #0
   1582c:	621a      	str	r2, [r3, #32]
   1582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15830:	2214      	movs	r2, #20
   15832:	601a      	str	r2, [r3, #0]
   15834:	687a      	ldr	r2, [r7, #4]
   15836:	68fb      	ldr	r3, [r7, #12]
   15838:	0011      	movs	r1, r2
   1583a:	0018      	movs	r0, r3
   1583c:	4b0c      	ldr	r3, [pc, #48]	; (15870 <i2c_master_init+0x130>)
   1583e:	4798      	blx	r3
   15840:	0003      	movs	r3, r0
   15842:	0018      	movs	r0, r3
   15844:	46bd      	mov	sp, r7
   15846:	b00b      	add	sp, #44	; 0x2c
   15848:	bd90      	pop	{r4, r7, pc}
   1584a:	46c0      	nop			; (mov r8, r8)
   1584c:	000251ed 	.word	0x000251ed
   15850:	00015195 	.word	0x00015195
   15854:	0001517d 	.word	0x0001517d
   15858:	00027a7d 	.word	0x00027a7d
   1585c:	00027ac1 	.word	0x00027ac1
   15860:	00024fa5 	.word	0x00024fa5
   15864:	00012a35 	.word	0x00012a35
   15868:	00025251 	.word	0x00025251
   1586c:	20005578 	.word	0x20005578
   15870:	00015331 	.word	0x00015331

00015874 <i2c_master_reset>:
   15874:	b580      	push	{r7, lr}
   15876:	b084      	sub	sp, #16
   15878:	af00      	add	r7, sp, #0
   1587a:	6078      	str	r0, [r7, #4]
   1587c:	687b      	ldr	r3, [r7, #4]
   1587e:	681b      	ldr	r3, [r3, #0]
   15880:	60fb      	str	r3, [r7, #12]
   15882:	687b      	ldr	r3, [r7, #4]
   15884:	0018      	movs	r0, r3
   15886:	4b0f      	ldr	r3, [pc, #60]	; (158c4 <i2c_master_reset+0x50>)
   15888:	4798      	blx	r3
   1588a:	687b      	ldr	r3, [r7, #4]
   1588c:	0018      	movs	r0, r3
   1588e:	4b0e      	ldr	r3, [pc, #56]	; (158c8 <i2c_master_reset+0x54>)
   15890:	4798      	blx	r3
   15892:	4b0e      	ldr	r3, [pc, #56]	; (158cc <i2c_master_reset+0x58>)
   15894:	4798      	blx	r3
   15896:	687b      	ldr	r3, [r7, #4]
   15898:	681b      	ldr	r3, [r3, #0]
   1589a:	0018      	movs	r0, r3
   1589c:	4b0c      	ldr	r3, [pc, #48]	; (158d0 <i2c_master_reset+0x5c>)
   1589e:	4798      	blx	r3
   158a0:	0003      	movs	r3, r0
   158a2:	0018      	movs	r0, r3
   158a4:	4b0b      	ldr	r3, [pc, #44]	; (158d4 <i2c_master_reset+0x60>)
   158a6:	4798      	blx	r3
   158a8:	4b0b      	ldr	r3, [pc, #44]	; (158d8 <i2c_master_reset+0x64>)
   158aa:	4798      	blx	r3
   158ac:	687b      	ldr	r3, [r7, #4]
   158ae:	0018      	movs	r0, r3
   158b0:	4b04      	ldr	r3, [pc, #16]	; (158c4 <i2c_master_reset+0x50>)
   158b2:	4798      	blx	r3
   158b4:	68fb      	ldr	r3, [r7, #12]
   158b6:	2201      	movs	r2, #1
   158b8:	601a      	str	r2, [r3, #0]
   158ba:	46c0      	nop			; (mov r8, r8)
   158bc:	46bd      	mov	sp, r7
   158be:	b004      	add	sp, #16
   158c0:	bd80      	pop	{r7, pc}
   158c2:	46c0      	nop			; (mov r8, r8)
   158c4:	000152b5 	.word	0x000152b5
   158c8:	000152d9 	.word	0x000152d9
   158cc:	00015239 	.word	0x00015239
   158d0:	000252bd 	.word	0x000252bd
   158d4:	00027bf9 	.word	0x00027bf9
   158d8:	0001524d 	.word	0x0001524d

000158dc <_i2c_master_wait_for_bus>:
   158dc:	b580      	push	{r7, lr}
   158de:	b084      	sub	sp, #16
   158e0:	af00      	add	r7, sp, #0
   158e2:	6078      	str	r0, [r7, #4]
   158e4:	687b      	ldr	r3, [r7, #4]
   158e6:	681b      	ldr	r3, [r3, #0]
   158e8:	60bb      	str	r3, [r7, #8]
   158ea:	230e      	movs	r3, #14
   158ec:	18fb      	adds	r3, r7, r3
   158ee:	2200      	movs	r2, #0
   158f0:	801a      	strh	r2, [r3, #0]
   158f2:	e00f      	b.n	15914 <_i2c_master_wait_for_bus+0x38>
   158f4:	230e      	movs	r3, #14
   158f6:	18fb      	adds	r3, r7, r3
   158f8:	220e      	movs	r2, #14
   158fa:	18ba      	adds	r2, r7, r2
   158fc:	8812      	ldrh	r2, [r2, #0]
   158fe:	3201      	adds	r2, #1
   15900:	801a      	strh	r2, [r3, #0]
   15902:	687b      	ldr	r3, [r7, #4]
   15904:	891b      	ldrh	r3, [r3, #8]
   15906:	220e      	movs	r2, #14
   15908:	18ba      	adds	r2, r7, r2
   1590a:	8812      	ldrh	r2, [r2, #0]
   1590c:	429a      	cmp	r2, r3
   1590e:	d301      	bcc.n	15914 <_i2c_master_wait_for_bus+0x38>
   15910:	2312      	movs	r3, #18
   15912:	e00e      	b.n	15932 <_i2c_master_wait_for_bus+0x56>
   15914:	68bb      	ldr	r3, [r7, #8]
   15916:	7e1b      	ldrb	r3, [r3, #24]
   15918:	b2db      	uxtb	r3, r3
   1591a:	001a      	movs	r2, r3
   1591c:	2301      	movs	r3, #1
   1591e:	4013      	ands	r3, r2
   15920:	d106      	bne.n	15930 <_i2c_master_wait_for_bus+0x54>
   15922:	68bb      	ldr	r3, [r7, #8]
   15924:	7e1b      	ldrb	r3, [r3, #24]
   15926:	b2db      	uxtb	r3, r3
   15928:	001a      	movs	r2, r3
   1592a:	2302      	movs	r3, #2
   1592c:	4013      	ands	r3, r2
   1592e:	d0e1      	beq.n	158f4 <_i2c_master_wait_for_bus+0x18>
   15930:	2300      	movs	r3, #0
   15932:	0018      	movs	r0, r3
   15934:	46bd      	mov	sp, r7
   15936:	b004      	add	sp, #16
   15938:	bd80      	pop	{r7, pc}
	...

0001593c <_i2c_master_send_hs_master_code>:
   1593c:	b590      	push	{r4, r7, lr}
   1593e:	b085      	sub	sp, #20
   15940:	af00      	add	r7, sp, #0
   15942:	6078      	str	r0, [r7, #4]
   15944:	000a      	movs	r2, r1
   15946:	1cfb      	adds	r3, r7, #3
   15948:	701a      	strb	r2, [r3, #0]
   1594a:	687b      	ldr	r3, [r7, #4]
   1594c:	681b      	ldr	r3, [r3, #0]
   1594e:	60fb      	str	r3, [r7, #12]
   15950:	68fb      	ldr	r3, [r7, #12]
   15952:	685b      	ldr	r3, [r3, #4]
   15954:	2280      	movs	r2, #128	; 0x80
   15956:	02d2      	lsls	r2, r2, #11
   15958:	431a      	orrs	r2, r3
   1595a:	68fb      	ldr	r3, [r7, #12]
   1595c:	605a      	str	r2, [r3, #4]
   1595e:	1cfb      	adds	r3, r7, #3
   15960:	781a      	ldrb	r2, [r3, #0]
   15962:	68fb      	ldr	r3, [r7, #12]
   15964:	625a      	str	r2, [r3, #36]	; 0x24
   15966:	230b      	movs	r3, #11
   15968:	18fc      	adds	r4, r7, r3
   1596a:	687b      	ldr	r3, [r7, #4]
   1596c:	0018      	movs	r0, r3
   1596e:	4b07      	ldr	r3, [pc, #28]	; (1598c <_i2c_master_send_hs_master_code+0x50>)
   15970:	4798      	blx	r3
   15972:	0003      	movs	r3, r0
   15974:	7023      	strb	r3, [r4, #0]
   15976:	68fb      	ldr	r3, [r7, #12]
   15978:	2201      	movs	r2, #1
   1597a:	761a      	strb	r2, [r3, #24]
   1597c:	230b      	movs	r3, #11
   1597e:	18fb      	adds	r3, r7, r3
   15980:	781b      	ldrb	r3, [r3, #0]
   15982:	0018      	movs	r0, r3
   15984:	46bd      	mov	sp, r7
   15986:	b005      	add	sp, #20
   15988:	bd90      	pop	{r4, r7, pc}
   1598a:	46c0      	nop			; (mov r8, r8)
   1598c:	000158dd 	.word	0x000158dd

00015990 <TC3_Handler>:
   15990:	b580      	push	{r7, lr}
   15992:	af00      	add	r7, sp, #0
   15994:	2000      	movs	r0, #0
   15996:	4b02      	ldr	r3, [pc, #8]	; (159a0 <TC3_Handler+0x10>)
   15998:	4798      	blx	r3
   1599a:	46c0      	nop			; (mov r8, r8)
   1599c:	46bd      	mov	sp, r7
   1599e:	bd80      	pop	{r7, pc}
   159a0:	000159cd 	.word	0x000159cd

000159a4 <TC4_Handler>:
   159a4:	b580      	push	{r7, lr}
   159a6:	af00      	add	r7, sp, #0
   159a8:	2001      	movs	r0, #1
   159aa:	4b02      	ldr	r3, [pc, #8]	; (159b4 <TC4_Handler+0x10>)
   159ac:	4798      	blx	r3
   159ae:	46c0      	nop			; (mov r8, r8)
   159b0:	46bd      	mov	sp, r7
   159b2:	bd80      	pop	{r7, pc}
   159b4:	000159cd 	.word	0x000159cd

000159b8 <TC5_Handler>:
   159b8:	b580      	push	{r7, lr}
   159ba:	af00      	add	r7, sp, #0
   159bc:	2002      	movs	r0, #2
   159be:	4b02      	ldr	r3, [pc, #8]	; (159c8 <TC5_Handler+0x10>)
   159c0:	4798      	blx	r3
   159c2:	46c0      	nop			; (mov r8, r8)
   159c4:	46bd      	mov	sp, r7
   159c6:	bd80      	pop	{r7, pc}
   159c8:	000159cd 	.word	0x000159cd

000159cc <_tc_interrupt_handler>:
   159cc:	b580      	push	{r7, lr}
   159ce:	b084      	sub	sp, #16
   159d0:	af00      	add	r7, sp, #0
   159d2:	0002      	movs	r2, r0
   159d4:	1dfb      	adds	r3, r7, #7
   159d6:	701a      	strb	r2, [r3, #0]
   159d8:	1dfb      	adds	r3, r7, #7
   159da:	781a      	ldrb	r2, [r3, #0]
   159dc:	4b28      	ldr	r3, [pc, #160]	; (15a80 <_tc_interrupt_handler+0xb4>)
   159de:	0092      	lsls	r2, r2, #2
   159e0:	58d3      	ldr	r3, [r2, r3]
   159e2:	60fb      	str	r3, [r7, #12]
   159e4:	68fb      	ldr	r3, [r7, #12]
   159e6:	681b      	ldr	r3, [r3, #0]
   159e8:	7b9b      	ldrb	r3, [r3, #14]
   159ea:	b2db      	uxtb	r3, r3
   159ec:	68fa      	ldr	r2, [r7, #12]
   159ee:	7e12      	ldrb	r2, [r2, #24]
   159f0:	4013      	ands	r3, r2
   159f2:	b2da      	uxtb	r2, r3
   159f4:	68fb      	ldr	r3, [r7, #12]
   159f6:	7e59      	ldrb	r1, [r3, #25]
   159f8:	230b      	movs	r3, #11
   159fa:	18fb      	adds	r3, r7, r3
   159fc:	400a      	ands	r2, r1
   159fe:	701a      	strb	r2, [r3, #0]
   15a00:	230b      	movs	r3, #11
   15a02:	18fb      	adds	r3, r7, r3
   15a04:	781b      	ldrb	r3, [r3, #0]
   15a06:	2201      	movs	r2, #1
   15a08:	4013      	ands	r3, r2
   15a0a:	d008      	beq.n	15a1e <_tc_interrupt_handler+0x52>
   15a0c:	68fb      	ldr	r3, [r7, #12]
   15a0e:	689b      	ldr	r3, [r3, #8]
   15a10:	68fa      	ldr	r2, [r7, #12]
   15a12:	0010      	movs	r0, r2
   15a14:	4798      	blx	r3
   15a16:	68fb      	ldr	r3, [r7, #12]
   15a18:	681b      	ldr	r3, [r3, #0]
   15a1a:	2201      	movs	r2, #1
   15a1c:	739a      	strb	r2, [r3, #14]
   15a1e:	230b      	movs	r3, #11
   15a20:	18fb      	adds	r3, r7, r3
   15a22:	781b      	ldrb	r3, [r3, #0]
   15a24:	2202      	movs	r2, #2
   15a26:	4013      	ands	r3, r2
   15a28:	d008      	beq.n	15a3c <_tc_interrupt_handler+0x70>
   15a2a:	68fb      	ldr	r3, [r7, #12]
   15a2c:	68db      	ldr	r3, [r3, #12]
   15a2e:	68fa      	ldr	r2, [r7, #12]
   15a30:	0010      	movs	r0, r2
   15a32:	4798      	blx	r3
   15a34:	68fb      	ldr	r3, [r7, #12]
   15a36:	681b      	ldr	r3, [r3, #0]
   15a38:	2202      	movs	r2, #2
   15a3a:	739a      	strb	r2, [r3, #14]
   15a3c:	230b      	movs	r3, #11
   15a3e:	18fb      	adds	r3, r7, r3
   15a40:	781b      	ldrb	r3, [r3, #0]
   15a42:	2210      	movs	r2, #16
   15a44:	4013      	ands	r3, r2
   15a46:	d008      	beq.n	15a5a <_tc_interrupt_handler+0x8e>
   15a48:	68fb      	ldr	r3, [r7, #12]
   15a4a:	691b      	ldr	r3, [r3, #16]
   15a4c:	68fa      	ldr	r2, [r7, #12]
   15a4e:	0010      	movs	r0, r2
   15a50:	4798      	blx	r3
   15a52:	68fb      	ldr	r3, [r7, #12]
   15a54:	681b      	ldr	r3, [r3, #0]
   15a56:	2210      	movs	r2, #16
   15a58:	739a      	strb	r2, [r3, #14]
   15a5a:	230b      	movs	r3, #11
   15a5c:	18fb      	adds	r3, r7, r3
   15a5e:	781b      	ldrb	r3, [r3, #0]
   15a60:	2220      	movs	r2, #32
   15a62:	4013      	ands	r3, r2
   15a64:	d008      	beq.n	15a78 <_tc_interrupt_handler+0xac>
   15a66:	68fb      	ldr	r3, [r7, #12]
   15a68:	695b      	ldr	r3, [r3, #20]
   15a6a:	68fa      	ldr	r2, [r7, #12]
   15a6c:	0010      	movs	r0, r2
   15a6e:	4798      	blx	r3
   15a70:	68fb      	ldr	r3, [r7, #12]
   15a72:	681b      	ldr	r3, [r3, #0]
   15a74:	2220      	movs	r2, #32
   15a76:	739a      	strb	r2, [r3, #14]
   15a78:	46c0      	nop			; (mov r8, r8)
   15a7a:	46bd      	mov	sp, r7
   15a7c:	b004      	add	sp, #16
   15a7e:	bd80      	pop	{r7, pc}
   15a80:	20004360 	.word	0x20004360

00015a84 <FreeRTOS_CLIRegisterCommand>:
   15a84:	b580      	push	{r7, lr}
   15a86:	b084      	sub	sp, #16
   15a88:	af00      	add	r7, sp, #0
   15a8a:	6078      	str	r0, [r7, #4]
   15a8c:	2300      	movs	r3, #0
   15a8e:	60fb      	str	r3, [r7, #12]
   15a90:	687b      	ldr	r3, [r7, #4]
   15a92:	2b00      	cmp	r3, #0
   15a94:	d101      	bne.n	15a9a <FreeRTOS_CLIRegisterCommand+0x16>
   15a96:	b672      	cpsid	i
   15a98:	e7fe      	b.n	15a98 <FreeRTOS_CLIRegisterCommand+0x14>
   15a9a:	2008      	movs	r0, #8
   15a9c:	4b11      	ldr	r3, [pc, #68]	; (15ae4 <FreeRTOS_CLIRegisterCommand+0x60>)
   15a9e:	4798      	blx	r3
   15aa0:	0003      	movs	r3, r0
   15aa2:	60bb      	str	r3, [r7, #8]
   15aa4:	68bb      	ldr	r3, [r7, #8]
   15aa6:	2b00      	cmp	r3, #0
   15aa8:	d101      	bne.n	15aae <FreeRTOS_CLIRegisterCommand+0x2a>
   15aaa:	b672      	cpsid	i
   15aac:	e7fe      	b.n	15aac <FreeRTOS_CLIRegisterCommand+0x28>
   15aae:	68bb      	ldr	r3, [r7, #8]
   15ab0:	2b00      	cmp	r3, #0
   15ab2:	d012      	beq.n	15ada <FreeRTOS_CLIRegisterCommand+0x56>
   15ab4:	4b0c      	ldr	r3, [pc, #48]	; (15ae8 <FreeRTOS_CLIRegisterCommand+0x64>)
   15ab6:	4798      	blx	r3
   15ab8:	68bb      	ldr	r3, [r7, #8]
   15aba:	687a      	ldr	r2, [r7, #4]
   15abc:	601a      	str	r2, [r3, #0]
   15abe:	68bb      	ldr	r3, [r7, #8]
   15ac0:	2200      	movs	r2, #0
   15ac2:	605a      	str	r2, [r3, #4]
   15ac4:	4b09      	ldr	r3, [pc, #36]	; (15aec <FreeRTOS_CLIRegisterCommand+0x68>)
   15ac6:	681b      	ldr	r3, [r3, #0]
   15ac8:	68ba      	ldr	r2, [r7, #8]
   15aca:	605a      	str	r2, [r3, #4]
   15acc:	4b07      	ldr	r3, [pc, #28]	; (15aec <FreeRTOS_CLIRegisterCommand+0x68>)
   15ace:	68ba      	ldr	r2, [r7, #8]
   15ad0:	601a      	str	r2, [r3, #0]
   15ad2:	4b07      	ldr	r3, [pc, #28]	; (15af0 <FreeRTOS_CLIRegisterCommand+0x6c>)
   15ad4:	4798      	blx	r3
   15ad6:	2301      	movs	r3, #1
   15ad8:	60fb      	str	r3, [r7, #12]
   15ada:	68fb      	ldr	r3, [r7, #12]
   15adc:	0018      	movs	r0, r3
   15ade:	46bd      	mov	sp, r7
   15ae0:	b004      	add	sp, #16
   15ae2:	bd80      	pop	{r7, pc}
   15ae4:	00017e91 	.word	0x00017e91
   15ae8:	00017d59 	.word	0x00017d59
   15aec:	200000e0 	.word	0x200000e0
   15af0:	00017d7d 	.word	0x00017d7d

00015af4 <FreeRTOS_CLIProcessCommand>:
   15af4:	b580      	push	{r7, lr}
   15af6:	b088      	sub	sp, #32
   15af8:	af00      	add	r7, sp, #0
   15afa:	60f8      	str	r0, [r7, #12]
   15afc:	60b9      	str	r1, [r7, #8]
   15afe:	607a      	str	r2, [r7, #4]
   15b00:	2301      	movs	r3, #1
   15b02:	61fb      	str	r3, [r7, #28]
   15b04:	4b3d      	ldr	r3, [pc, #244]	; (15bfc <FreeRTOS_CLIProcessCommand+0x108>)
   15b06:	681b      	ldr	r3, [r3, #0]
   15b08:	2b00      	cmp	r3, #0
   15b0a:	d144      	bne.n	15b96 <FreeRTOS_CLIProcessCommand+0xa2>
   15b0c:	4b3b      	ldr	r3, [pc, #236]	; (15bfc <FreeRTOS_CLIProcessCommand+0x108>)
   15b0e:	4a3c      	ldr	r2, [pc, #240]	; (15c00 <FreeRTOS_CLIProcessCommand+0x10c>)
   15b10:	601a      	str	r2, [r3, #0]
   15b12:	e03a      	b.n	15b8a <FreeRTOS_CLIProcessCommand+0x96>
   15b14:	4b39      	ldr	r3, [pc, #228]	; (15bfc <FreeRTOS_CLIProcessCommand+0x108>)
   15b16:	681b      	ldr	r3, [r3, #0]
   15b18:	681b      	ldr	r3, [r3, #0]
   15b1a:	681b      	ldr	r3, [r3, #0]
   15b1c:	61bb      	str	r3, [r7, #24]
   15b1e:	69bb      	ldr	r3, [r7, #24]
   15b20:	0018      	movs	r0, r3
   15b22:	4b38      	ldr	r3, [pc, #224]	; (15c04 <FreeRTOS_CLIProcessCommand+0x110>)
   15b24:	4798      	blx	r3
   15b26:	0003      	movs	r3, r0
   15b28:	617b      	str	r3, [r7, #20]
   15b2a:	68fa      	ldr	r2, [r7, #12]
   15b2c:	697b      	ldr	r3, [r7, #20]
   15b2e:	18d3      	adds	r3, r2, r3
   15b30:	781b      	ldrb	r3, [r3, #0]
   15b32:	2b20      	cmp	r3, #32
   15b34:	d005      	beq.n	15b42 <FreeRTOS_CLIProcessCommand+0x4e>
   15b36:	68fa      	ldr	r2, [r7, #12]
   15b38:	697b      	ldr	r3, [r7, #20]
   15b3a:	18d3      	adds	r3, r2, r3
   15b3c:	781b      	ldrb	r3, [r3, #0]
   15b3e:	2b00      	cmp	r3, #0
   15b40:	d11e      	bne.n	15b80 <FreeRTOS_CLIProcessCommand+0x8c>
   15b42:	697a      	ldr	r2, [r7, #20]
   15b44:	69b9      	ldr	r1, [r7, #24]
   15b46:	68fb      	ldr	r3, [r7, #12]
   15b48:	0018      	movs	r0, r3
   15b4a:	4b2f      	ldr	r3, [pc, #188]	; (15c08 <FreeRTOS_CLIProcessCommand+0x114>)
   15b4c:	4798      	blx	r3
   15b4e:	1e03      	subs	r3, r0, #0
   15b50:	d116      	bne.n	15b80 <FreeRTOS_CLIProcessCommand+0x8c>
   15b52:	4b2a      	ldr	r3, [pc, #168]	; (15bfc <FreeRTOS_CLIProcessCommand+0x108>)
   15b54:	681b      	ldr	r3, [r3, #0]
   15b56:	681b      	ldr	r3, [r3, #0]
   15b58:	7b1b      	ldrb	r3, [r3, #12]
   15b5a:	b25b      	sxtb	r3, r3
   15b5c:	2b00      	cmp	r3, #0
   15b5e:	db19      	blt.n	15b94 <FreeRTOS_CLIProcessCommand+0xa0>
   15b60:	68fb      	ldr	r3, [r7, #12]
   15b62:	0018      	movs	r0, r3
   15b64:	4b29      	ldr	r3, [pc, #164]	; (15c0c <FreeRTOS_CLIProcessCommand+0x118>)
   15b66:	4798      	blx	r3
   15b68:	0003      	movs	r3, r0
   15b6a:	001a      	movs	r2, r3
   15b6c:	4b23      	ldr	r3, [pc, #140]	; (15bfc <FreeRTOS_CLIProcessCommand+0x108>)
   15b6e:	681b      	ldr	r3, [r3, #0]
   15b70:	681b      	ldr	r3, [r3, #0]
   15b72:	7b1b      	ldrb	r3, [r3, #12]
   15b74:	b25b      	sxtb	r3, r3
   15b76:	429a      	cmp	r2, r3
   15b78:	d00c      	beq.n	15b94 <FreeRTOS_CLIProcessCommand+0xa0>
   15b7a:	2300      	movs	r3, #0
   15b7c:	61fb      	str	r3, [r7, #28]
   15b7e:	e009      	b.n	15b94 <FreeRTOS_CLIProcessCommand+0xa0>
   15b80:	4b1e      	ldr	r3, [pc, #120]	; (15bfc <FreeRTOS_CLIProcessCommand+0x108>)
   15b82:	681b      	ldr	r3, [r3, #0]
   15b84:	685a      	ldr	r2, [r3, #4]
   15b86:	4b1d      	ldr	r3, [pc, #116]	; (15bfc <FreeRTOS_CLIProcessCommand+0x108>)
   15b88:	601a      	str	r2, [r3, #0]
   15b8a:	4b1c      	ldr	r3, [pc, #112]	; (15bfc <FreeRTOS_CLIProcessCommand+0x108>)
   15b8c:	681b      	ldr	r3, [r3, #0]
   15b8e:	2b00      	cmp	r3, #0
   15b90:	d1c0      	bne.n	15b14 <FreeRTOS_CLIProcessCommand+0x20>
   15b92:	e000      	b.n	15b96 <FreeRTOS_CLIProcessCommand+0xa2>
   15b94:	46c0      	nop			; (mov r8, r8)
   15b96:	4b19      	ldr	r3, [pc, #100]	; (15bfc <FreeRTOS_CLIProcessCommand+0x108>)
   15b98:	681b      	ldr	r3, [r3, #0]
   15b9a:	2b00      	cmp	r3, #0
   15b9c:	d00c      	beq.n	15bb8 <FreeRTOS_CLIProcessCommand+0xc4>
   15b9e:	69fb      	ldr	r3, [r7, #28]
   15ba0:	2b00      	cmp	r3, #0
   15ba2:	d109      	bne.n	15bb8 <FreeRTOS_CLIProcessCommand+0xc4>
   15ba4:	687a      	ldr	r2, [r7, #4]
   15ba6:	491a      	ldr	r1, [pc, #104]	; (15c10 <FreeRTOS_CLIProcessCommand+0x11c>)
   15ba8:	68bb      	ldr	r3, [r7, #8]
   15baa:	0018      	movs	r0, r3
   15bac:	4b19      	ldr	r3, [pc, #100]	; (15c14 <FreeRTOS_CLIProcessCommand+0x120>)
   15bae:	4798      	blx	r3
   15bb0:	4b12      	ldr	r3, [pc, #72]	; (15bfc <FreeRTOS_CLIProcessCommand+0x108>)
   15bb2:	2200      	movs	r2, #0
   15bb4:	601a      	str	r2, [r3, #0]
   15bb6:	e01c      	b.n	15bf2 <FreeRTOS_CLIProcessCommand+0xfe>
   15bb8:	4b10      	ldr	r3, [pc, #64]	; (15bfc <FreeRTOS_CLIProcessCommand+0x108>)
   15bba:	681b      	ldr	r3, [r3, #0]
   15bbc:	2b00      	cmp	r3, #0
   15bbe:	d010      	beq.n	15be2 <FreeRTOS_CLIProcessCommand+0xee>
   15bc0:	4b0e      	ldr	r3, [pc, #56]	; (15bfc <FreeRTOS_CLIProcessCommand+0x108>)
   15bc2:	681b      	ldr	r3, [r3, #0]
   15bc4:	681b      	ldr	r3, [r3, #0]
   15bc6:	689b      	ldr	r3, [r3, #8]
   15bc8:	68fa      	ldr	r2, [r7, #12]
   15bca:	6879      	ldr	r1, [r7, #4]
   15bcc:	68b8      	ldr	r0, [r7, #8]
   15bce:	4798      	blx	r3
   15bd0:	0003      	movs	r3, r0
   15bd2:	61fb      	str	r3, [r7, #28]
   15bd4:	69fb      	ldr	r3, [r7, #28]
   15bd6:	2b00      	cmp	r3, #0
   15bd8:	d10b      	bne.n	15bf2 <FreeRTOS_CLIProcessCommand+0xfe>
   15bda:	4b08      	ldr	r3, [pc, #32]	; (15bfc <FreeRTOS_CLIProcessCommand+0x108>)
   15bdc:	2200      	movs	r2, #0
   15bde:	601a      	str	r2, [r3, #0]
   15be0:	e007      	b.n	15bf2 <FreeRTOS_CLIProcessCommand+0xfe>
   15be2:	687a      	ldr	r2, [r7, #4]
   15be4:	490c      	ldr	r1, [pc, #48]	; (15c18 <FreeRTOS_CLIProcessCommand+0x124>)
   15be6:	68bb      	ldr	r3, [r7, #8]
   15be8:	0018      	movs	r0, r3
   15bea:	4b0a      	ldr	r3, [pc, #40]	; (15c14 <FreeRTOS_CLIProcessCommand+0x120>)
   15bec:	4798      	blx	r3
   15bee:	2300      	movs	r3, #0
   15bf0:	61fb      	str	r3, [r7, #28]
   15bf2:	69fb      	ldr	r3, [r7, #28]
   15bf4:	0018      	movs	r0, r3
   15bf6:	46bd      	mov	sp, r7
   15bf8:	b008      	add	sp, #32
   15bfa:	bd80      	pop	{r7, pc}
   15bfc:	20000b14 	.word	0x20000b14
   15c00:	200000d8 	.word	0x200000d8
   15c04:	0003255b 	.word	0x0003255b
   15c08:	00032569 	.word	0x00032569
   15c0c:	00015c7d 	.word	0x00015c7d
   15c10:	000341f4 	.word	0x000341f4
   15c14:	0003258b 	.word	0x0003258b
   15c18:	0003424c 	.word	0x0003424c

00015c1c <prvHelpCommand>:
   15c1c:	b580      	push	{r7, lr}
   15c1e:	b086      	sub	sp, #24
   15c20:	af00      	add	r7, sp, #0
   15c22:	60f8      	str	r0, [r7, #12]
   15c24:	60b9      	str	r1, [r7, #8]
   15c26:	607a      	str	r2, [r7, #4]
   15c28:	4b11      	ldr	r3, [pc, #68]	; (15c70 <prvHelpCommand+0x54>)
   15c2a:	681b      	ldr	r3, [r3, #0]
   15c2c:	2b00      	cmp	r3, #0
   15c2e:	d102      	bne.n	15c36 <prvHelpCommand+0x1a>
   15c30:	4b0f      	ldr	r3, [pc, #60]	; (15c70 <prvHelpCommand+0x54>)
   15c32:	4a10      	ldr	r2, [pc, #64]	; (15c74 <prvHelpCommand+0x58>)
   15c34:	601a      	str	r2, [r3, #0]
   15c36:	4b0e      	ldr	r3, [pc, #56]	; (15c70 <prvHelpCommand+0x54>)
   15c38:	681b      	ldr	r3, [r3, #0]
   15c3a:	681b      	ldr	r3, [r3, #0]
   15c3c:	6859      	ldr	r1, [r3, #4]
   15c3e:	68ba      	ldr	r2, [r7, #8]
   15c40:	68fb      	ldr	r3, [r7, #12]
   15c42:	0018      	movs	r0, r3
   15c44:	4b0c      	ldr	r3, [pc, #48]	; (15c78 <prvHelpCommand+0x5c>)
   15c46:	4798      	blx	r3
   15c48:	4b09      	ldr	r3, [pc, #36]	; (15c70 <prvHelpCommand+0x54>)
   15c4a:	681b      	ldr	r3, [r3, #0]
   15c4c:	685a      	ldr	r2, [r3, #4]
   15c4e:	4b08      	ldr	r3, [pc, #32]	; (15c70 <prvHelpCommand+0x54>)
   15c50:	601a      	str	r2, [r3, #0]
   15c52:	4b07      	ldr	r3, [pc, #28]	; (15c70 <prvHelpCommand+0x54>)
   15c54:	681b      	ldr	r3, [r3, #0]
   15c56:	2b00      	cmp	r3, #0
   15c58:	d102      	bne.n	15c60 <prvHelpCommand+0x44>
   15c5a:	2300      	movs	r3, #0
   15c5c:	617b      	str	r3, [r7, #20]
   15c5e:	e001      	b.n	15c64 <prvHelpCommand+0x48>
   15c60:	2301      	movs	r3, #1
   15c62:	617b      	str	r3, [r7, #20]
   15c64:	697b      	ldr	r3, [r7, #20]
   15c66:	0018      	movs	r0, r3
   15c68:	46bd      	mov	sp, r7
   15c6a:	b006      	add	sp, #24
   15c6c:	bd80      	pop	{r7, pc}
   15c6e:	46c0      	nop			; (mov r8, r8)
   15c70:	20000b18 	.word	0x20000b18
   15c74:	200000d8 	.word	0x200000d8
   15c78:	0003258b 	.word	0x0003258b

00015c7c <prvGetNumberOfParameters>:
   15c7c:	b580      	push	{r7, lr}
   15c7e:	b084      	sub	sp, #16
   15c80:	af00      	add	r7, sp, #0
   15c82:	6078      	str	r0, [r7, #4]
   15c84:	230f      	movs	r3, #15
   15c86:	18fb      	adds	r3, r7, r3
   15c88:	2200      	movs	r2, #0
   15c8a:	701a      	strb	r2, [r3, #0]
   15c8c:	2300      	movs	r3, #0
   15c8e:	60bb      	str	r3, [r7, #8]
   15c90:	e018      	b.n	15cc4 <prvGetNumberOfParameters+0x48>
   15c92:	687b      	ldr	r3, [r7, #4]
   15c94:	781b      	ldrb	r3, [r3, #0]
   15c96:	2b20      	cmp	r3, #32
   15c98:	d10f      	bne.n	15cba <prvGetNumberOfParameters+0x3e>
   15c9a:	68bb      	ldr	r3, [r7, #8]
   15c9c:	2b01      	cmp	r3, #1
   15c9e:	d00e      	beq.n	15cbe <prvGetNumberOfParameters+0x42>
   15ca0:	230f      	movs	r3, #15
   15ca2:	18fb      	adds	r3, r7, r3
   15ca4:	781b      	ldrb	r3, [r3, #0]
   15ca6:	b25b      	sxtb	r3, r3
   15ca8:	b2db      	uxtb	r3, r3
   15caa:	3301      	adds	r3, #1
   15cac:	b2da      	uxtb	r2, r3
   15cae:	230f      	movs	r3, #15
   15cb0:	18fb      	adds	r3, r7, r3
   15cb2:	701a      	strb	r2, [r3, #0]
   15cb4:	2301      	movs	r3, #1
   15cb6:	60bb      	str	r3, [r7, #8]
   15cb8:	e001      	b.n	15cbe <prvGetNumberOfParameters+0x42>
   15cba:	2300      	movs	r3, #0
   15cbc:	60bb      	str	r3, [r7, #8]
   15cbe:	687b      	ldr	r3, [r7, #4]
   15cc0:	3301      	adds	r3, #1
   15cc2:	607b      	str	r3, [r7, #4]
   15cc4:	687b      	ldr	r3, [r7, #4]
   15cc6:	781b      	ldrb	r3, [r3, #0]
   15cc8:	2b00      	cmp	r3, #0
   15cca:	d1e2      	bne.n	15c92 <prvGetNumberOfParameters+0x16>
   15ccc:	68bb      	ldr	r3, [r7, #8]
   15cce:	2b01      	cmp	r3, #1
   15cd0:	d109      	bne.n	15ce6 <prvGetNumberOfParameters+0x6a>
   15cd2:	230f      	movs	r3, #15
   15cd4:	18fb      	adds	r3, r7, r3
   15cd6:	781b      	ldrb	r3, [r3, #0]
   15cd8:	b25b      	sxtb	r3, r3
   15cda:	b2db      	uxtb	r3, r3
   15cdc:	3b01      	subs	r3, #1
   15cde:	b2da      	uxtb	r2, r3
   15ce0:	230f      	movs	r3, #15
   15ce2:	18fb      	adds	r3, r7, r3
   15ce4:	701a      	strb	r2, [r3, #0]
   15ce6:	230f      	movs	r3, #15
   15ce8:	18fb      	adds	r3, r7, r3
   15cea:	781b      	ldrb	r3, [r3, #0]
   15cec:	b25b      	sxtb	r3, r3
   15cee:	0018      	movs	r0, r3
   15cf0:	46bd      	mov	sp, r7
   15cf2:	b004      	add	sp, #16
   15cf4:	bd80      	pop	{r7, pc}
	...

00015cf8 <prvTraceGetQueueNumber>:
   15cf8:	b580      	push	{r7, lr}
   15cfa:	b082      	sub	sp, #8
   15cfc:	af00      	add	r7, sp, #0
   15cfe:	6078      	str	r0, [r7, #4]
   15d00:	687b      	ldr	r3, [r7, #4]
   15d02:	0018      	movs	r0, r3
   15d04:	4b03      	ldr	r3, [pc, #12]	; (15d14 <prvTraceGetQueueNumber+0x1c>)
   15d06:	4798      	blx	r3
   15d08:	0003      	movs	r3, r0
   15d0a:	0018      	movs	r0, r3
   15d0c:	46bd      	mov	sp, r7
   15d0e:	b002      	add	sp, #8
   15d10:	bd80      	pop	{r7, pc}
   15d12:	46c0      	nop			; (mov r8, r8)
   15d14:	000194b9 	.word	0x000194b9

00015d18 <prvTraceGetQueueType>:
   15d18:	b580      	push	{r7, lr}
   15d1a:	b082      	sub	sp, #8
   15d1c:	af00      	add	r7, sp, #0
   15d1e:	6078      	str	r0, [r7, #4]
   15d20:	687b      	ldr	r3, [r7, #4]
   15d22:	0018      	movs	r0, r3
   15d24:	4b03      	ldr	r3, [pc, #12]	; (15d34 <prvTraceGetQueueType+0x1c>)
   15d26:	4798      	blx	r3
   15d28:	0003      	movs	r3, r0
   15d2a:	0018      	movs	r0, r3
   15d2c:	46bd      	mov	sp, r7
   15d2e:	b002      	add	sp, #8
   15d30:	bd80      	pop	{r7, pc}
   15d32:	46c0      	nop			; (mov r8, r8)
   15d34:	000194e5 	.word	0x000194e5

00015d38 <prvTraceGetTaskNumberLow16>:
   15d38:	b580      	push	{r7, lr}
   15d3a:	b082      	sub	sp, #8
   15d3c:	af00      	add	r7, sp, #0
   15d3e:	6078      	str	r0, [r7, #4]
   15d40:	687b      	ldr	r3, [r7, #4]
   15d42:	0018      	movs	r0, r3
   15d44:	4b03      	ldr	r3, [pc, #12]	; (15d54 <prvTraceGetTaskNumberLow16+0x1c>)
   15d46:	4798      	blx	r3
   15d48:	0003      	movs	r3, r0
   15d4a:	b29b      	uxth	r3, r3
   15d4c:	0018      	movs	r0, r3
   15d4e:	46bd      	mov	sp, r7
   15d50:	b002      	add	sp, #8
   15d52:	bd80      	pop	{r7, pc}
   15d54:	0001a815 	.word	0x0001a815

00015d58 <prvTraceGetTaskNumberHigh16>:
   15d58:	b580      	push	{r7, lr}
   15d5a:	b082      	sub	sp, #8
   15d5c:	af00      	add	r7, sp, #0
   15d5e:	6078      	str	r0, [r7, #4]
   15d60:	687b      	ldr	r3, [r7, #4]
   15d62:	0018      	movs	r0, r3
   15d64:	4b04      	ldr	r3, [pc, #16]	; (15d78 <prvTraceGetTaskNumberHigh16+0x20>)
   15d66:	4798      	blx	r3
   15d68:	0003      	movs	r3, r0
   15d6a:	0c1b      	lsrs	r3, r3, #16
   15d6c:	b29b      	uxth	r3, r3
   15d6e:	0018      	movs	r0, r3
   15d70:	46bd      	mov	sp, r7
   15d72:	b002      	add	sp, #8
   15d74:	bd80      	pop	{r7, pc}
   15d76:	46c0      	nop			; (mov r8, r8)
   15d78:	0001a815 	.word	0x0001a815

00015d7c <prvTraceSetTaskNumberLow16>:
   15d7c:	b580      	push	{r7, lr}
   15d7e:	b082      	sub	sp, #8
   15d80:	af00      	add	r7, sp, #0
   15d82:	6078      	str	r0, [r7, #4]
   15d84:	000a      	movs	r2, r1
   15d86:	1cbb      	adds	r3, r7, #2
   15d88:	801a      	strh	r2, [r3, #0]
   15d8a:	687b      	ldr	r3, [r7, #4]
   15d8c:	0018      	movs	r0, r3
   15d8e:	4b08      	ldr	r3, [pc, #32]	; (15db0 <prvTraceSetTaskNumberLow16+0x34>)
   15d90:	4798      	blx	r3
   15d92:	0003      	movs	r3, r0
   15d94:	0c1b      	lsrs	r3, r3, #16
   15d96:	041a      	lsls	r2, r3, #16
   15d98:	1cbb      	adds	r3, r7, #2
   15d9a:	881b      	ldrh	r3, [r3, #0]
   15d9c:	431a      	orrs	r2, r3
   15d9e:	687b      	ldr	r3, [r7, #4]
   15da0:	0011      	movs	r1, r2
   15da2:	0018      	movs	r0, r3
   15da4:	4b03      	ldr	r3, [pc, #12]	; (15db4 <prvTraceSetTaskNumberLow16+0x38>)
   15da6:	4798      	blx	r3
   15da8:	46c0      	nop			; (mov r8, r8)
   15daa:	46bd      	mov	sp, r7
   15dac:	b002      	add	sp, #8
   15dae:	bd80      	pop	{r7, pc}
   15db0:	0001a815 	.word	0x0001a815
   15db4:	0001a83d 	.word	0x0001a83d

00015db8 <prvTraceSetTaskNumberHigh16>:
   15db8:	b580      	push	{r7, lr}
   15dba:	b082      	sub	sp, #8
   15dbc:	af00      	add	r7, sp, #0
   15dbe:	6078      	str	r0, [r7, #4]
   15dc0:	000a      	movs	r2, r1
   15dc2:	1cbb      	adds	r3, r7, #2
   15dc4:	801a      	strh	r2, [r3, #0]
   15dc6:	687b      	ldr	r3, [r7, #4]
   15dc8:	0018      	movs	r0, r3
   15dca:	4b09      	ldr	r3, [pc, #36]	; (15df0 <prvTraceSetTaskNumberHigh16+0x38>)
   15dcc:	4798      	blx	r3
   15dce:	0003      	movs	r3, r0
   15dd0:	041b      	lsls	r3, r3, #16
   15dd2:	0c1a      	lsrs	r2, r3, #16
   15dd4:	1cbb      	adds	r3, r7, #2
   15dd6:	881b      	ldrh	r3, [r3, #0]
   15dd8:	041b      	lsls	r3, r3, #16
   15dda:	431a      	orrs	r2, r3
   15ddc:	687b      	ldr	r3, [r7, #4]
   15dde:	0011      	movs	r1, r2
   15de0:	0018      	movs	r0, r3
   15de2:	4b04      	ldr	r3, [pc, #16]	; (15df4 <prvTraceSetTaskNumberHigh16+0x3c>)
   15de4:	4798      	blx	r3
   15de6:	46c0      	nop			; (mov r8, r8)
   15de8:	46bd      	mov	sp, r7
   15dea:	b002      	add	sp, #8
   15dec:	bd80      	pop	{r7, pc}
   15dee:	46c0      	nop			; (mov r8, r8)
   15df0:	0001a815 	.word	0x0001a815
   15df4:	0001a83d 	.word	0x0001a83d

00015df8 <prvTraceGetQueueNumberLow16>:
   15df8:	b580      	push	{r7, lr}
   15dfa:	b082      	sub	sp, #8
   15dfc:	af00      	add	r7, sp, #0
   15dfe:	6078      	str	r0, [r7, #4]
   15e00:	687b      	ldr	r3, [r7, #4]
   15e02:	0018      	movs	r0, r3
   15e04:	4b03      	ldr	r3, [pc, #12]	; (15e14 <prvTraceGetQueueNumberLow16+0x1c>)
   15e06:	4798      	blx	r3
   15e08:	0003      	movs	r3, r0
   15e0a:	b29b      	uxth	r3, r3
   15e0c:	0018      	movs	r0, r3
   15e0e:	46bd      	mov	sp, r7
   15e10:	b002      	add	sp, #8
   15e12:	bd80      	pop	{r7, pc}
   15e14:	00015cf9 	.word	0x00015cf9

00015e18 <prvTraceGetQueueNumberHigh16>:
   15e18:	b580      	push	{r7, lr}
   15e1a:	b082      	sub	sp, #8
   15e1c:	af00      	add	r7, sp, #0
   15e1e:	6078      	str	r0, [r7, #4]
   15e20:	687b      	ldr	r3, [r7, #4]
   15e22:	0018      	movs	r0, r3
   15e24:	4b04      	ldr	r3, [pc, #16]	; (15e38 <prvTraceGetQueueNumberHigh16+0x20>)
   15e26:	4798      	blx	r3
   15e28:	0003      	movs	r3, r0
   15e2a:	0c1b      	lsrs	r3, r3, #16
   15e2c:	b29b      	uxth	r3, r3
   15e2e:	0018      	movs	r0, r3
   15e30:	46bd      	mov	sp, r7
   15e32:	b002      	add	sp, #8
   15e34:	bd80      	pop	{r7, pc}
   15e36:	46c0      	nop			; (mov r8, r8)
   15e38:	00015cf9 	.word	0x00015cf9

00015e3c <prvTraceSetQueueNumberLow16>:
   15e3c:	b580      	push	{r7, lr}
   15e3e:	b082      	sub	sp, #8
   15e40:	af00      	add	r7, sp, #0
   15e42:	6078      	str	r0, [r7, #4]
   15e44:	000a      	movs	r2, r1
   15e46:	1cbb      	adds	r3, r7, #2
   15e48:	801a      	strh	r2, [r3, #0]
   15e4a:	687b      	ldr	r3, [r7, #4]
   15e4c:	0018      	movs	r0, r3
   15e4e:	4b08      	ldr	r3, [pc, #32]	; (15e70 <prvTraceSetQueueNumberLow16+0x34>)
   15e50:	4798      	blx	r3
   15e52:	0003      	movs	r3, r0
   15e54:	0c1b      	lsrs	r3, r3, #16
   15e56:	041a      	lsls	r2, r3, #16
   15e58:	1cbb      	adds	r3, r7, #2
   15e5a:	881b      	ldrh	r3, [r3, #0]
   15e5c:	431a      	orrs	r2, r3
   15e5e:	687b      	ldr	r3, [r7, #4]
   15e60:	0011      	movs	r1, r2
   15e62:	0018      	movs	r0, r3
   15e64:	4b03      	ldr	r3, [pc, #12]	; (15e74 <prvTraceSetQueueNumberLow16+0x38>)
   15e66:	4798      	blx	r3
   15e68:	46c0      	nop			; (mov r8, r8)
   15e6a:	46bd      	mov	sp, r7
   15e6c:	b002      	add	sp, #8
   15e6e:	bd80      	pop	{r7, pc}
   15e70:	00015cf9 	.word	0x00015cf9
   15e74:	000194cd 	.word	0x000194cd

00015e78 <prvTraceSetQueueNumberHigh16>:
   15e78:	b580      	push	{r7, lr}
   15e7a:	b082      	sub	sp, #8
   15e7c:	af00      	add	r7, sp, #0
   15e7e:	6078      	str	r0, [r7, #4]
   15e80:	000a      	movs	r2, r1
   15e82:	1cbb      	adds	r3, r7, #2
   15e84:	801a      	strh	r2, [r3, #0]
   15e86:	687b      	ldr	r3, [r7, #4]
   15e88:	0018      	movs	r0, r3
   15e8a:	4b09      	ldr	r3, [pc, #36]	; (15eb0 <prvTraceSetQueueNumberHigh16+0x38>)
   15e8c:	4798      	blx	r3
   15e8e:	0003      	movs	r3, r0
   15e90:	041b      	lsls	r3, r3, #16
   15e92:	0c1a      	lsrs	r2, r3, #16
   15e94:	1cbb      	adds	r3, r7, #2
   15e96:	881b      	ldrh	r3, [r3, #0]
   15e98:	041b      	lsls	r3, r3, #16
   15e9a:	431a      	orrs	r2, r3
   15e9c:	687b      	ldr	r3, [r7, #4]
   15e9e:	0011      	movs	r1, r2
   15ea0:	0018      	movs	r0, r3
   15ea2:	4b04      	ldr	r3, [pc, #16]	; (15eb4 <prvTraceSetQueueNumberHigh16+0x3c>)
   15ea4:	4798      	blx	r3
   15ea6:	46c0      	nop			; (mov r8, r8)
   15ea8:	46bd      	mov	sp, r7
   15eaa:	b002      	add	sp, #8
   15eac:	bd80      	pop	{r7, pc}
   15eae:	46c0      	nop			; (mov r8, r8)
   15eb0:	00015cf9 	.word	0x00015cf9
   15eb4:	000194cd 	.word	0x000194cd

00015eb8 <prvAddTaskToStackMonitor>:
   15eb8:	b580      	push	{r7, lr}
   15eba:	b084      	sub	sp, #16
   15ebc:	af00      	add	r7, sp, #0
   15ebe:	6078      	str	r0, [r7, #4]
   15ec0:	2300      	movs	r3, #0
   15ec2:	60fb      	str	r3, [r7, #12]
   15ec4:	2300      	movs	r3, #0
   15ec6:	60bb      	str	r3, [r7, #8]
   15ec8:	e018      	b.n	15efc <prvAddTaskToStackMonitor+0x44>
   15eca:	4b14      	ldr	r3, [pc, #80]	; (15f1c <prvAddTaskToStackMonitor+0x64>)
   15ecc:	68ba      	ldr	r2, [r7, #8]
   15ece:	00d2      	lsls	r2, r2, #3
   15ed0:	58d3      	ldr	r3, [r2, r3]
   15ed2:	2b00      	cmp	r3, #0
   15ed4:	d10f      	bne.n	15ef6 <prvAddTaskToStackMonitor+0x3e>
   15ed6:	4b11      	ldr	r3, [pc, #68]	; (15f1c <prvAddTaskToStackMonitor+0x64>)
   15ed8:	68ba      	ldr	r2, [r7, #8]
   15eda:	00d2      	lsls	r2, r2, #3
   15edc:	6879      	ldr	r1, [r7, #4]
   15ede:	50d1      	str	r1, [r2, r3]
   15ee0:	4a0e      	ldr	r2, [pc, #56]	; (15f1c <prvAddTaskToStackMonitor+0x64>)
   15ee2:	68bb      	ldr	r3, [r7, #8]
   15ee4:	00db      	lsls	r3, r3, #3
   15ee6:	18d3      	adds	r3, r2, r3
   15ee8:	3304      	adds	r3, #4
   15eea:	2201      	movs	r2, #1
   15eec:	4252      	negs	r2, r2
   15eee:	601a      	str	r2, [r3, #0]
   15ef0:	2301      	movs	r3, #1
   15ef2:	60fb      	str	r3, [r7, #12]
   15ef4:	e005      	b.n	15f02 <prvAddTaskToStackMonitor+0x4a>
   15ef6:	68bb      	ldr	r3, [r7, #8]
   15ef8:	3301      	adds	r3, #1
   15efa:	60bb      	str	r3, [r7, #8]
   15efc:	68bb      	ldr	r3, [r7, #8]
   15efe:	2b09      	cmp	r3, #9
   15f00:	dde3      	ble.n	15eca <prvAddTaskToStackMonitor+0x12>
   15f02:	68fb      	ldr	r3, [r7, #12]
   15f04:	2b00      	cmp	r3, #0
   15f06:	d104      	bne.n	15f12 <prvAddTaskToStackMonitor+0x5a>
   15f08:	4b05      	ldr	r3, [pc, #20]	; (15f20 <prvAddTaskToStackMonitor+0x68>)
   15f0a:	681b      	ldr	r3, [r3, #0]
   15f0c:	1c5a      	adds	r2, r3, #1
   15f0e:	4b04      	ldr	r3, [pc, #16]	; (15f20 <prvAddTaskToStackMonitor+0x68>)
   15f10:	601a      	str	r2, [r3, #0]
   15f12:	46c0      	nop			; (mov r8, r8)
   15f14:	46bd      	mov	sp, r7
   15f16:	b004      	add	sp, #16
   15f18:	bd80      	pop	{r7, pc}
   15f1a:	46c0      	nop			; (mov r8, r8)
   15f1c:	20000b20 	.word	0x20000b20
   15f20:	20000b70 	.word	0x20000b70

00015f24 <prvReportStackUsage>:
   15f24:	b590      	push	{r4, r7, lr}
   15f26:	b085      	sub	sp, #20
   15f28:	af00      	add	r7, sp, #0
   15f2a:	2300      	movs	r3, #0
   15f2c:	60fb      	str	r3, [r7, #12]
   15f2e:	4b2b      	ldr	r3, [pc, #172]	; (15fdc <prvReportStackUsage+0xb8>)
   15f30:	681b      	ldr	r3, [r3, #0]
   15f32:	60bb      	str	r3, [r7, #8]
   15f34:	4b29      	ldr	r3, [pc, #164]	; (15fdc <prvReportStackUsage+0xb8>)
   15f36:	681a      	ldr	r2, [r3, #0]
   15f38:	4b29      	ldr	r3, [pc, #164]	; (15fe0 <prvReportStackUsage+0xbc>)
   15f3a:	00d2      	lsls	r2, r2, #3
   15f3c:	58d3      	ldr	r3, [r2, r3]
   15f3e:	2b00      	cmp	r3, #0
   15f40:	d035      	beq.n	15fae <prvReportStackUsage+0x8a>
   15f42:	4b26      	ldr	r3, [pc, #152]	; (15fdc <prvReportStackUsage+0xb8>)
   15f44:	681a      	ldr	r2, [r3, #0]
   15f46:	4b26      	ldr	r3, [pc, #152]	; (15fe0 <prvReportStackUsage+0xbc>)
   15f48:	00d2      	lsls	r2, r2, #3
   15f4a:	58d3      	ldr	r3, [r2, r3]
   15f4c:	0018      	movs	r0, r3
   15f4e:	4b25      	ldr	r3, [pc, #148]	; (15fe4 <prvReportStackUsage+0xc0>)
   15f50:	4798      	blx	r3
   15f52:	0003      	movs	r3, r0
   15f54:	607b      	str	r3, [r7, #4]
   15f56:	4b21      	ldr	r3, [pc, #132]	; (15fdc <prvReportStackUsage+0xb8>)
   15f58:	681b      	ldr	r3, [r3, #0]
   15f5a:	4a21      	ldr	r2, [pc, #132]	; (15fe0 <prvReportStackUsage+0xbc>)
   15f5c:	00db      	lsls	r3, r3, #3
   15f5e:	18d3      	adds	r3, r2, r3
   15f60:	3304      	adds	r3, #4
   15f62:	681a      	ldr	r2, [r3, #0]
   15f64:	687b      	ldr	r3, [r7, #4]
   15f66:	429a      	cmp	r2, r3
   15f68:	d907      	bls.n	15f7a <prvReportStackUsage+0x56>
   15f6a:	4b1c      	ldr	r3, [pc, #112]	; (15fdc <prvReportStackUsage+0xb8>)
   15f6c:	681b      	ldr	r3, [r3, #0]
   15f6e:	4a1c      	ldr	r2, [pc, #112]	; (15fe0 <prvReportStackUsage+0xbc>)
   15f70:	00db      	lsls	r3, r3, #3
   15f72:	18d3      	adds	r3, r2, r3
   15f74:	3304      	adds	r3, #4
   15f76:	687a      	ldr	r2, [r7, #4]
   15f78:	601a      	str	r2, [r3, #0]
   15f7a:	4b18      	ldr	r3, [pc, #96]	; (15fdc <prvReportStackUsage+0xb8>)
   15f7c:	681a      	ldr	r2, [r3, #0]
   15f7e:	4b18      	ldr	r3, [pc, #96]	; (15fe0 <prvReportStackUsage+0xbc>)
   15f80:	00d2      	lsls	r2, r2, #3
   15f82:	58d3      	ldr	r3, [r2, r3]
   15f84:	0018      	movs	r0, r3
   15f86:	4b18      	ldr	r3, [pc, #96]	; (15fe8 <prvReportStackUsage+0xc4>)
   15f88:	4798      	blx	r3
   15f8a:	0003      	movs	r3, r0
   15f8c:	b2db      	uxtb	r3, r3
   15f8e:	0019      	movs	r1, r3
   15f90:	4b12      	ldr	r3, [pc, #72]	; (15fdc <prvReportStackUsage+0xb8>)
   15f92:	681b      	ldr	r3, [r3, #0]
   15f94:	4a12      	ldr	r2, [pc, #72]	; (15fe0 <prvReportStackUsage+0xbc>)
   15f96:	00db      	lsls	r3, r3, #3
   15f98:	18d3      	adds	r3, r2, r3
   15f9a:	3304      	adds	r3, #4
   15f9c:	681b      	ldr	r3, [r3, #0]
   15f9e:	000a      	movs	r2, r1
   15fa0:	2103      	movs	r1, #3
   15fa2:	20ea      	movs	r0, #234	; 0xea
   15fa4:	4c11      	ldr	r4, [pc, #68]	; (15fec <prvReportStackUsage+0xc8>)
   15fa6:	47a0      	blx	r4
   15fa8:	68fb      	ldr	r3, [r7, #12]
   15faa:	3301      	adds	r3, #1
   15fac:	60fb      	str	r3, [r7, #12]
   15fae:	4b0b      	ldr	r3, [pc, #44]	; (15fdc <prvReportStackUsage+0xb8>)
   15fb0:	681b      	ldr	r3, [r3, #0]
   15fb2:	1c5a      	adds	r2, r3, #1
   15fb4:	4b0e      	ldr	r3, [pc, #56]	; (15ff0 <prvReportStackUsage+0xcc>)
   15fb6:	210a      	movs	r1, #10
   15fb8:	0010      	movs	r0, r2
   15fba:	4798      	blx	r3
   15fbc:	000b      	movs	r3, r1
   15fbe:	001a      	movs	r2, r3
   15fc0:	4b06      	ldr	r3, [pc, #24]	; (15fdc <prvReportStackUsage+0xb8>)
   15fc2:	601a      	str	r2, [r3, #0]
   15fc4:	68fb      	ldr	r3, [r7, #12]
   15fc6:	2b00      	cmp	r3, #0
   15fc8:	dc04      	bgt.n	15fd4 <prvReportStackUsage+0xb0>
   15fca:	4b04      	ldr	r3, [pc, #16]	; (15fdc <prvReportStackUsage+0xb8>)
   15fcc:	681a      	ldr	r2, [r3, #0]
   15fce:	68bb      	ldr	r3, [r7, #8]
   15fd0:	429a      	cmp	r2, r3
   15fd2:	d1af      	bne.n	15f34 <prvReportStackUsage+0x10>
   15fd4:	46c0      	nop			; (mov r8, r8)
   15fd6:	46bd      	mov	sp, r7
   15fd8:	b005      	add	sp, #20
   15fda:	bd90      	pop	{r4, r7, pc}
   15fdc:	20000b74 	.word	0x20000b74
   15fe0:	20000b20 	.word	0x20000b20
   15fe4:	0001a9b5 	.word	0x0001a9b5
   15fe8:	00015d39 	.word	0x00015d39
   15fec:	00016881 	.word	0x00016881
   15ff0:	000307c9 	.word	0x000307c9

00015ff4 <prvTraceGetCurrentTaskHandle>:
   15ff4:	b580      	push	{r7, lr}
   15ff6:	af00      	add	r7, sp, #0
   15ff8:	4b02      	ldr	r3, [pc, #8]	; (16004 <prvTraceGetCurrentTaskHandle+0x10>)
   15ffa:	4798      	blx	r3
   15ffc:	0003      	movs	r3, r0
   15ffe:	0018      	movs	r0, r3
   16000:	46bd      	mov	sp, r7
   16002:	bd80      	pop	{r7, pc}
   16004:	0001aa61 	.word	0x0001aa61

00016008 <vTraceEnable>:
   16008:	b590      	push	{r4, r7, lr}
   1600a:	b085      	sub	sp, #20
   1600c:	af02      	add	r7, sp, #8
   1600e:	6078      	str	r0, [r7, #4]
   16010:	4b14      	ldr	r3, [pc, #80]	; (16064 <vTraceEnable+0x5c>)
   16012:	4798      	blx	r3
   16014:	687b      	ldr	r3, [r7, #4]
   16016:	2b01      	cmp	r3, #1
   16018:	d102      	bne.n	16020 <vTraceEnable+0x18>
   1601a:	4b13      	ldr	r3, [pc, #76]	; (16068 <vTraceEnable+0x60>)
   1601c:	4798      	blx	r3
   1601e:	e00e      	b.n	1603e <vTraceEnable+0x36>
   16020:	687b      	ldr	r3, [r7, #4]
   16022:	2b02      	cmp	r3, #2
   16024:	d104      	bne.n	16030 <vTraceEnable+0x28>
   16026:	4b11      	ldr	r3, [pc, #68]	; (1606c <vTraceEnable+0x64>)
   16028:	0018      	movs	r0, r3
   1602a:	4b11      	ldr	r3, [pc, #68]	; (16070 <vTraceEnable+0x68>)
   1602c:	4798      	blx	r3
   1602e:	e006      	b.n	1603e <vTraceEnable+0x36>
   16030:	687b      	ldr	r3, [r7, #4]
   16032:	2b00      	cmp	r3, #0
   16034:	d003      	beq.n	1603e <vTraceEnable+0x36>
   16036:	4b0f      	ldr	r3, [pc, #60]	; (16074 <vTraceEnable+0x6c>)
   16038:	0018      	movs	r0, r3
   1603a:	4b0d      	ldr	r3, [pc, #52]	; (16070 <vTraceEnable+0x68>)
   1603c:	4798      	blx	r3
   1603e:	4b0e      	ldr	r3, [pc, #56]	; (16078 <vTraceEnable+0x70>)
   16040:	681b      	ldr	r3, [r3, #0]
   16042:	2b00      	cmp	r3, #0
   16044:	d109      	bne.n	1605a <vTraceEnable+0x52>
   16046:	490d      	ldr	r1, [pc, #52]	; (1607c <vTraceEnable+0x74>)
   16048:	480d      	ldr	r0, [pc, #52]	; (16080 <vTraceEnable+0x78>)
   1604a:	4b0b      	ldr	r3, [pc, #44]	; (16078 <vTraceEnable+0x70>)
   1604c:	9301      	str	r3, [sp, #4]
   1604e:	2304      	movs	r3, #4
   16050:	9300      	str	r3, [sp, #0]
   16052:	2300      	movs	r3, #0
   16054:	22c8      	movs	r2, #200	; 0xc8
   16056:	4c0b      	ldr	r4, [pc, #44]	; (16084 <vTraceEnable+0x7c>)
   16058:	47a0      	blx	r4
   1605a:	46c0      	nop			; (mov r8, r8)
   1605c:	46bd      	mov	sp, r7
   1605e:	b003      	add	sp, #12
   16060:	bd90      	pop	{r4, r7, pc}
   16062:	46c0      	nop			; (mov r8, r8)
   16064:	00016f4d 	.word	0x00016f4d
   16068:	000164a5 	.word	0x000164a5
   1606c:	000342ac 	.word	0x000342ac
   16070:	000175f5 	.word	0x000175f5
   16074:	000342ec 	.word	0x000342ec
   16078:	20000b1c 	.word	0x20000b1c
   1607c:	00034320 	.word	0x00034320
   16080:	00016089 	.word	0x00016089
   16084:	000199b9 	.word	0x000199b9

00016088 <TzCtrl>:
   16088:	b580      	push	{r7, lr}
   1608a:	b082      	sub	sp, #8
   1608c:	af00      	add	r7, sp, #0
   1608e:	6078      	str	r0, [r7, #4]
   16090:	4b04      	ldr	r3, [pc, #16]	; (160a4 <TzCtrl+0x1c>)
   16092:	4798      	blx	r3
   16094:	1e03      	subs	r3, r0, #0
   16096:	d001      	beq.n	1609c <TzCtrl+0x14>
   16098:	4b03      	ldr	r3, [pc, #12]	; (160a8 <TzCtrl+0x20>)
   1609a:	4798      	blx	r3
   1609c:	2004      	movs	r0, #4
   1609e:	4b03      	ldr	r3, [pc, #12]	; (160ac <TzCtrl+0x24>)
   160a0:	4798      	blx	r3
   160a2:	e7f5      	b.n	16090 <TzCtrl+0x8>
   160a4:	000164e9 	.word	0x000164e9
   160a8:	00015f25 	.word	0x00015f25
   160ac:	00019d55 	.word	0x00019d55

000160b0 <vTraceInitObjectPropertyTable>:
   160b0:	b580      	push	{r7, lr}
   160b2:	af00      	add	r7, sp, #0
   160b4:	4b60      	ldr	r3, [pc, #384]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   160b6:	681b      	ldr	r3, [r3, #0]
   160b8:	2209      	movs	r2, #9
   160ba:	65da      	str	r2, [r3, #92]	; 0x5c
   160bc:	4b5e      	ldr	r3, [pc, #376]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   160be:	681b      	ldr	r3, [r3, #0]
   160c0:	2264      	movs	r2, #100	; 0x64
   160c2:	210a      	movs	r1, #10
   160c4:	5499      	strb	r1, [r3, r2]
   160c6:	4b5c      	ldr	r3, [pc, #368]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   160c8:	681b      	ldr	r3, [r3, #0]
   160ca:	2265      	movs	r2, #101	; 0x65
   160cc:	210a      	movs	r1, #10
   160ce:	5499      	strb	r1, [r3, r2]
   160d0:	4b59      	ldr	r3, [pc, #356]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   160d2:	681b      	ldr	r3, [r3, #0]
   160d4:	2266      	movs	r2, #102	; 0x66
   160d6:	210a      	movs	r1, #10
   160d8:	5499      	strb	r1, [r3, r2]
   160da:	4b57      	ldr	r3, [pc, #348]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   160dc:	681b      	ldr	r3, [r3, #0]
   160de:	2267      	movs	r2, #103	; 0x67
   160e0:	210f      	movs	r1, #15
   160e2:	5499      	strb	r1, [r3, r2]
   160e4:	4b54      	ldr	r3, [pc, #336]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   160e6:	681b      	ldr	r3, [r3, #0]
   160e8:	2268      	movs	r2, #104	; 0x68
   160ea:	2105      	movs	r1, #5
   160ec:	5499      	strb	r1, [r3, r2]
   160ee:	4b52      	ldr	r3, [pc, #328]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   160f0:	681b      	ldr	r3, [r3, #0]
   160f2:	2269      	movs	r2, #105	; 0x69
   160f4:	2105      	movs	r1, #5
   160f6:	5499      	strb	r1, [r3, r2]
   160f8:	4b4f      	ldr	r3, [pc, #316]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   160fa:	681b      	ldr	r3, [r3, #0]
   160fc:	226a      	movs	r2, #106	; 0x6a
   160fe:	2105      	movs	r1, #5
   16100:	5499      	strb	r1, [r3, r2]
   16102:	4b4d      	ldr	r3, [pc, #308]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   16104:	681b      	ldr	r3, [r3, #0]
   16106:	226b      	movs	r2, #107	; 0x6b
   16108:	2105      	movs	r1, #5
   1610a:	5499      	strb	r1, [r3, r2]
   1610c:	4b4a      	ldr	r3, [pc, #296]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   1610e:	681b      	ldr	r3, [r3, #0]
   16110:	226c      	movs	r2, #108	; 0x6c
   16112:	2105      	movs	r1, #5
   16114:	5499      	strb	r1, [r3, r2]
   16116:	4b48      	ldr	r3, [pc, #288]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   16118:	681b      	ldr	r3, [r3, #0]
   1611a:	2270      	movs	r2, #112	; 0x70
   1611c:	210f      	movs	r1, #15
   1611e:	5499      	strb	r1, [r3, r2]
   16120:	4b45      	ldr	r3, [pc, #276]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   16122:	681b      	ldr	r3, [r3, #0]
   16124:	2271      	movs	r2, #113	; 0x71
   16126:	210f      	movs	r1, #15
   16128:	5499      	strb	r1, [r3, r2]
   1612a:	4b43      	ldr	r3, [pc, #268]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   1612c:	681b      	ldr	r3, [r3, #0]
   1612e:	2272      	movs	r2, #114	; 0x72
   16130:	210f      	movs	r1, #15
   16132:	5499      	strb	r1, [r3, r2]
   16134:	4b40      	ldr	r3, [pc, #256]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   16136:	681b      	ldr	r3, [r3, #0]
   16138:	2273      	movs	r2, #115	; 0x73
   1613a:	210f      	movs	r1, #15
   1613c:	5499      	strb	r1, [r3, r2]
   1613e:	4b3e      	ldr	r3, [pc, #248]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   16140:	681b      	ldr	r3, [r3, #0]
   16142:	2274      	movs	r2, #116	; 0x74
   16144:	210f      	movs	r1, #15
   16146:	5499      	strb	r1, [r3, r2]
   16148:	4b3b      	ldr	r3, [pc, #236]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   1614a:	681b      	ldr	r3, [r3, #0]
   1614c:	2275      	movs	r2, #117	; 0x75
   1614e:	210f      	movs	r1, #15
   16150:	5499      	strb	r1, [r3, r2]
   16152:	4b39      	ldr	r3, [pc, #228]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   16154:	681b      	ldr	r3, [r3, #0]
   16156:	2276      	movs	r2, #118	; 0x76
   16158:	210f      	movs	r1, #15
   1615a:	5499      	strb	r1, [r3, r2]
   1615c:	4b36      	ldr	r3, [pc, #216]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   1615e:	681b      	ldr	r3, [r3, #0]
   16160:	2277      	movs	r2, #119	; 0x77
   16162:	210f      	movs	r1, #15
   16164:	5499      	strb	r1, [r3, r2]
   16166:	4b34      	ldr	r3, [pc, #208]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   16168:	681b      	ldr	r3, [r3, #0]
   1616a:	2278      	movs	r2, #120	; 0x78
   1616c:	210f      	movs	r1, #15
   1616e:	5499      	strb	r1, [r3, r2]
   16170:	4b31      	ldr	r3, [pc, #196]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   16172:	681b      	ldr	r3, [r3, #0]
   16174:	227c      	movs	r2, #124	; 0x7c
   16176:	2110      	movs	r1, #16
   16178:	5499      	strb	r1, [r3, r2]
   1617a:	4b2f      	ldr	r3, [pc, #188]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   1617c:	681b      	ldr	r3, [r3, #0]
   1617e:	227d      	movs	r2, #125	; 0x7d
   16180:	2110      	movs	r1, #16
   16182:	5499      	strb	r1, [r3, r2]
   16184:	4b2c      	ldr	r3, [pc, #176]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   16186:	681b      	ldr	r3, [r3, #0]
   16188:	227e      	movs	r2, #126	; 0x7e
   1618a:	2110      	movs	r1, #16
   1618c:	5499      	strb	r1, [r3, r2]
   1618e:	4b2a      	ldr	r3, [pc, #168]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   16190:	681b      	ldr	r3, [r3, #0]
   16192:	227f      	movs	r2, #127	; 0x7f
   16194:	2113      	movs	r1, #19
   16196:	5499      	strb	r1, [r3, r2]
   16198:	4b27      	ldr	r3, [pc, #156]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   1619a:	681b      	ldr	r3, [r3, #0]
   1619c:	2280      	movs	r2, #128	; 0x80
   1619e:	2111      	movs	r1, #17
   161a0:	5499      	strb	r1, [r3, r2]
   161a2:	4b25      	ldr	r3, [pc, #148]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   161a4:	681b      	ldr	r3, [r3, #0]
   161a6:	2281      	movs	r2, #129	; 0x81
   161a8:	2110      	movs	r1, #16
   161aa:	5499      	strb	r1, [r3, r2]
   161ac:	4b22      	ldr	r3, [pc, #136]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   161ae:	681b      	ldr	r3, [r3, #0]
   161b0:	2282      	movs	r2, #130	; 0x82
   161b2:	2113      	movs	r1, #19
   161b4:	5499      	strb	r1, [r3, r2]
   161b6:	4b20      	ldr	r3, [pc, #128]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   161b8:	681b      	ldr	r3, [r3, #0]
   161ba:	2283      	movs	r2, #131	; 0x83
   161bc:	2113      	movs	r1, #19
   161be:	5499      	strb	r1, [r3, r2]
   161c0:	4b1d      	ldr	r3, [pc, #116]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   161c2:	681b      	ldr	r3, [r3, #0]
   161c4:	2284      	movs	r2, #132	; 0x84
   161c6:	2113      	movs	r1, #19
   161c8:	5499      	strb	r1, [r3, r2]
   161ca:	4b1b      	ldr	r3, [pc, #108]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   161cc:	681b      	ldr	r3, [r3, #0]
   161ce:	2288      	movs	r2, #136	; 0x88
   161d0:	2100      	movs	r1, #0
   161d2:	5299      	strh	r1, [r3, r2]
   161d4:	4b18      	ldr	r3, [pc, #96]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   161d6:	681b      	ldr	r3, [r3, #0]
   161d8:	228a      	movs	r2, #138	; 0x8a
   161da:	21a0      	movs	r1, #160	; 0xa0
   161dc:	5299      	strh	r1, [r3, r2]
   161de:	4b16      	ldr	r3, [pc, #88]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   161e0:	681b      	ldr	r3, [r3, #0]
   161e2:	228c      	movs	r2, #140	; 0x8c
   161e4:	21a0      	movs	r1, #160	; 0xa0
   161e6:	0049      	lsls	r1, r1, #1
   161e8:	5299      	strh	r1, [r3, r2]
   161ea:	4b13      	ldr	r3, [pc, #76]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   161ec:	681b      	ldr	r3, [r3, #0]
   161ee:	228e      	movs	r2, #142	; 0x8e
   161f0:	21f0      	movs	r1, #240	; 0xf0
   161f2:	0049      	lsls	r1, r1, #1
   161f4:	5299      	strh	r1, [r3, r2]
   161f6:	4b10      	ldr	r3, [pc, #64]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   161f8:	681b      	ldr	r3, [r3, #0]
   161fa:	2290      	movs	r2, #144	; 0x90
   161fc:	490f      	ldr	r1, [pc, #60]	; (1623c <vTraceInitObjectPropertyTable+0x18c>)
   161fe:	5299      	strh	r1, [r3, r2]
   16200:	4b0d      	ldr	r3, [pc, #52]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   16202:	681b      	ldr	r3, [r3, #0]
   16204:	2292      	movs	r2, #146	; 0x92
   16206:	490e      	ldr	r1, [pc, #56]	; (16240 <vTraceInitObjectPropertyTable+0x190>)
   16208:	5299      	strh	r1, [r3, r2]
   1620a:	4b0b      	ldr	r3, [pc, #44]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   1620c:	681b      	ldr	r3, [r3, #0]
   1620e:	2294      	movs	r2, #148	; 0x94
   16210:	490c      	ldr	r1, [pc, #48]	; (16244 <vTraceInitObjectPropertyTable+0x194>)
   16212:	5299      	strh	r1, [r3, r2]
   16214:	4b08      	ldr	r3, [pc, #32]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   16216:	681b      	ldr	r3, [r3, #0]
   16218:	2296      	movs	r2, #150	; 0x96
   1621a:	490b      	ldr	r1, [pc, #44]	; (16248 <vTraceInitObjectPropertyTable+0x198>)
   1621c:	5299      	strh	r1, [r3, r2]
   1621e:	4b06      	ldr	r3, [pc, #24]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   16220:	681b      	ldr	r3, [r3, #0]
   16222:	2298      	movs	r2, #152	; 0x98
   16224:	218c      	movs	r1, #140	; 0x8c
   16226:	00c9      	lsls	r1, r1, #3
   16228:	5299      	strh	r1, [r3, r2]
   1622a:	4b03      	ldr	r3, [pc, #12]	; (16238 <vTraceInitObjectPropertyTable+0x188>)
   1622c:	681b      	ldr	r3, [r3, #0]
   1622e:	4a07      	ldr	r2, [pc, #28]	; (1624c <vTraceInitObjectPropertyTable+0x19c>)
   16230:	661a      	str	r2, [r3, #96]	; 0x60
   16232:	46c0      	nop			; (mov r8, r8)
   16234:	46bd      	mov	sp, r7
   16236:	bd80      	pop	{r7, pc}
   16238:	20000c34 	.word	0x20000c34
   1623c:	000002fd 	.word	0x000002fd
   16240:	00000352 	.word	0x00000352
   16244:	000003a2 	.word	0x000003a2
   16248:	00000401 	.word	0x00000401
   1624c:	000004bf 	.word	0x000004bf

00016250 <vTraceInitObjectHandleStack>:
   16250:	b580      	push	{r7, lr}
   16252:	af00      	add	r7, sp, #0
   16254:	4b2e      	ldr	r3, [pc, #184]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   16256:	2200      	movs	r2, #0
   16258:	825a      	strh	r2, [r3, #18]
   1625a:	4b2d      	ldr	r3, [pc, #180]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   1625c:	8a5a      	ldrh	r2, [r3, #18]
   1625e:	4b2c      	ldr	r3, [pc, #176]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   16260:	801a      	strh	r2, [r3, #0]
   16262:	4b2b      	ldr	r3, [pc, #172]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   16264:	220a      	movs	r2, #10
   16266:	829a      	strh	r2, [r3, #20]
   16268:	4b29      	ldr	r3, [pc, #164]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   1626a:	8a9a      	ldrh	r2, [r3, #20]
   1626c:	4b28      	ldr	r3, [pc, #160]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   1626e:	805a      	strh	r2, [r3, #2]
   16270:	4b27      	ldr	r3, [pc, #156]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   16272:	2214      	movs	r2, #20
   16274:	82da      	strh	r2, [r3, #22]
   16276:	4b26      	ldr	r3, [pc, #152]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   16278:	8ada      	ldrh	r2, [r3, #22]
   1627a:	4b25      	ldr	r3, [pc, #148]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   1627c:	809a      	strh	r2, [r3, #4]
   1627e:	4b24      	ldr	r3, [pc, #144]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   16280:	221e      	movs	r2, #30
   16282:	831a      	strh	r2, [r3, #24]
   16284:	4b22      	ldr	r3, [pc, #136]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   16286:	8b1a      	ldrh	r2, [r3, #24]
   16288:	4b21      	ldr	r3, [pc, #132]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   1628a:	80da      	strh	r2, [r3, #6]
   1628c:	4b20      	ldr	r3, [pc, #128]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   1628e:	222d      	movs	r2, #45	; 0x2d
   16290:	835a      	strh	r2, [r3, #26]
   16292:	4b1f      	ldr	r3, [pc, #124]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   16294:	8b5a      	ldrh	r2, [r3, #26]
   16296:	4b1e      	ldr	r3, [pc, #120]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   16298:	811a      	strh	r2, [r3, #8]
   1629a:	4b1d      	ldr	r3, [pc, #116]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   1629c:	2232      	movs	r2, #50	; 0x32
   1629e:	839a      	strh	r2, [r3, #28]
   162a0:	4b1b      	ldr	r3, [pc, #108]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162a2:	8b9a      	ldrh	r2, [r3, #28]
   162a4:	4b1a      	ldr	r3, [pc, #104]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162a6:	815a      	strh	r2, [r3, #10]
   162a8:	4b19      	ldr	r3, [pc, #100]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162aa:	2237      	movs	r2, #55	; 0x37
   162ac:	83da      	strh	r2, [r3, #30]
   162ae:	4b18      	ldr	r3, [pc, #96]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162b0:	8bda      	ldrh	r2, [r3, #30]
   162b2:	4b17      	ldr	r3, [pc, #92]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162b4:	819a      	strh	r2, [r3, #12]
   162b6:	4b16      	ldr	r3, [pc, #88]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162b8:	223c      	movs	r2, #60	; 0x3c
   162ba:	841a      	strh	r2, [r3, #32]
   162bc:	4b14      	ldr	r3, [pc, #80]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162be:	8c1a      	ldrh	r2, [r3, #32]
   162c0:	4b13      	ldr	r3, [pc, #76]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162c2:	81da      	strh	r2, [r3, #14]
   162c4:	4b12      	ldr	r3, [pc, #72]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162c6:	2241      	movs	r2, #65	; 0x41
   162c8:	845a      	strh	r2, [r3, #34]	; 0x22
   162ca:	4b11      	ldr	r3, [pc, #68]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162cc:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   162ce:	4b10      	ldr	r3, [pc, #64]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162d0:	821a      	strh	r2, [r3, #16]
   162d2:	4b0f      	ldr	r3, [pc, #60]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162d4:	2209      	movs	r2, #9
   162d6:	849a      	strh	r2, [r3, #36]	; 0x24
   162d8:	4b0d      	ldr	r3, [pc, #52]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162da:	2213      	movs	r2, #19
   162dc:	84da      	strh	r2, [r3, #38]	; 0x26
   162de:	4b0c      	ldr	r3, [pc, #48]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162e0:	221d      	movs	r2, #29
   162e2:	851a      	strh	r2, [r3, #40]	; 0x28
   162e4:	4b0a      	ldr	r3, [pc, #40]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162e6:	222c      	movs	r2, #44	; 0x2c
   162e8:	855a      	strh	r2, [r3, #42]	; 0x2a
   162ea:	4b09      	ldr	r3, [pc, #36]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162ec:	2231      	movs	r2, #49	; 0x31
   162ee:	859a      	strh	r2, [r3, #44]	; 0x2c
   162f0:	4b07      	ldr	r3, [pc, #28]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162f2:	2236      	movs	r2, #54	; 0x36
   162f4:	85da      	strh	r2, [r3, #46]	; 0x2e
   162f6:	4b06      	ldr	r3, [pc, #24]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162f8:	223b      	movs	r2, #59	; 0x3b
   162fa:	861a      	strh	r2, [r3, #48]	; 0x30
   162fc:	4b04      	ldr	r3, [pc, #16]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   162fe:	2240      	movs	r2, #64	; 0x40
   16300:	865a      	strh	r2, [r3, #50]	; 0x32
   16302:	4b03      	ldr	r3, [pc, #12]	; (16310 <vTraceInitObjectHandleStack+0xc0>)
   16304:	2245      	movs	r2, #69	; 0x45
   16306:	869a      	strh	r2, [r3, #52]	; 0x34
   16308:	46c0      	nop			; (mov r8, r8)
   1630a:	46bd      	mov	sp, r7
   1630c:	bd80      	pop	{r7, pc}
   1630e:	46c0      	nop			; (mov r8, r8)
   16310:	20000ba4 	.word	0x20000ba4

00016314 <pszTraceGetErrorNotEnoughHandles>:
   16314:	b580      	push	{r7, lr}
   16316:	b082      	sub	sp, #8
   16318:	af00      	add	r7, sp, #0
   1631a:	0002      	movs	r2, r0
   1631c:	1dfb      	adds	r3, r7, #7
   1631e:	701a      	strb	r2, [r3, #0]
   16320:	1dfb      	adds	r3, r7, #7
   16322:	781b      	ldrb	r3, [r3, #0]
   16324:	2b08      	cmp	r3, #8
   16326:	d816      	bhi.n	16356 <pszTraceGetErrorNotEnoughHandles+0x42>
   16328:	009a      	lsls	r2, r3, #2
   1632a:	4b0d      	ldr	r3, [pc, #52]	; (16360 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   1632c:	18d3      	adds	r3, r2, r3
   1632e:	681b      	ldr	r3, [r3, #0]
   16330:	469f      	mov	pc, r3
   16332:	4b0c      	ldr	r3, [pc, #48]	; (16364 <pszTraceGetErrorNotEnoughHandles+0x50>)
   16334:	e010      	b.n	16358 <pszTraceGetErrorNotEnoughHandles+0x44>
   16336:	4b0c      	ldr	r3, [pc, #48]	; (16368 <pszTraceGetErrorNotEnoughHandles+0x54>)
   16338:	e00e      	b.n	16358 <pszTraceGetErrorNotEnoughHandles+0x44>
   1633a:	4b0c      	ldr	r3, [pc, #48]	; (1636c <pszTraceGetErrorNotEnoughHandles+0x58>)
   1633c:	e00c      	b.n	16358 <pszTraceGetErrorNotEnoughHandles+0x44>
   1633e:	4b0c      	ldr	r3, [pc, #48]	; (16370 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   16340:	e00a      	b.n	16358 <pszTraceGetErrorNotEnoughHandles+0x44>
   16342:	4b0c      	ldr	r3, [pc, #48]	; (16374 <pszTraceGetErrorNotEnoughHandles+0x60>)
   16344:	e008      	b.n	16358 <pszTraceGetErrorNotEnoughHandles+0x44>
   16346:	4b0c      	ldr	r3, [pc, #48]	; (16378 <pszTraceGetErrorNotEnoughHandles+0x64>)
   16348:	e006      	b.n	16358 <pszTraceGetErrorNotEnoughHandles+0x44>
   1634a:	4b0c      	ldr	r3, [pc, #48]	; (1637c <pszTraceGetErrorNotEnoughHandles+0x68>)
   1634c:	e004      	b.n	16358 <pszTraceGetErrorNotEnoughHandles+0x44>
   1634e:	4b0c      	ldr	r3, [pc, #48]	; (16380 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   16350:	e002      	b.n	16358 <pszTraceGetErrorNotEnoughHandles+0x44>
   16352:	4b0c      	ldr	r3, [pc, #48]	; (16384 <pszTraceGetErrorNotEnoughHandles+0x70>)
   16354:	e000      	b.n	16358 <pszTraceGetErrorNotEnoughHandles+0x44>
   16356:	4b0c      	ldr	r3, [pc, #48]	; (16388 <pszTraceGetErrorNotEnoughHandles+0x74>)
   16358:	0018      	movs	r0, r3
   1635a:	46bd      	mov	sp, r7
   1635c:	b002      	add	sp, #8
   1635e:	bd80      	pop	{r7, pc}
   16360:	00034628 	.word	0x00034628
   16364:	00034328 	.word	0x00034328
   16368:	00034370 	.word	0x00034370
   1636c:	000343b8 	.word	0x000343b8
   16370:	0003440c 	.word	0x0003440c
   16374:	00034458 	.word	0x00034458
   16378:	000344a4 	.word	0x000344a4
   1637c:	000344f0 	.word	0x000344f0
   16380:	00034544 	.word	0x00034544
   16384:	0003459c 	.word	0x0003459c
   16388:	000345f8 	.word	0x000345f8

0001638c <uiTraceStart>:
   1638c:	b590      	push	{r4, r7, lr}
   1638e:	b087      	sub	sp, #28
   16390:	af00      	add	r7, sp, #0
   16392:	2317      	movs	r3, #23
   16394:	18fb      	adds	r3, r7, r3
   16396:	2200      	movs	r2, #0
   16398:	701a      	strb	r2, [r3, #0]
   1639a:	4b36      	ldr	r3, [pc, #216]	; (16474 <uiTraceStart+0xe8>)
   1639c:	681b      	ldr	r3, [r3, #0]
   1639e:	2b00      	cmp	r3, #0
   163a0:	d10b      	bne.n	163ba <uiTraceStart+0x2e>
   163a2:	4b34      	ldr	r3, [pc, #208]	; (16474 <uiTraceStart+0xe8>)
   163a4:	681b      	ldr	r3, [r3, #0]
   163a6:	2b00      	cmp	r3, #0
   163a8:	d105      	bne.n	163b6 <uiTraceStart+0x2a>
   163aa:	4b33      	ldr	r3, [pc, #204]	; (16478 <uiTraceStart+0xec>)
   163ac:	0018      	movs	r0, r3
   163ae:	4b33      	ldr	r3, [pc, #204]	; (1647c <uiTraceStart+0xf0>)
   163b0:	4798      	blx	r3
   163b2:	2300      	movs	r3, #0
   163b4:	e059      	b.n	1646a <uiTraceStart+0xde>
   163b6:	2300      	movs	r3, #0
   163b8:	e057      	b.n	1646a <uiTraceStart+0xde>
   163ba:	4b2e      	ldr	r3, [pc, #184]	; (16474 <uiTraceStart+0xe8>)
   163bc:	681b      	ldr	r3, [r3, #0]
   163be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   163c0:	2b01      	cmp	r3, #1
   163c2:	d101      	bne.n	163c8 <uiTraceStart+0x3c>
   163c4:	2301      	movs	r3, #1
   163c6:	e050      	b.n	1646a <uiTraceStart+0xde>
   163c8:	4b2d      	ldr	r3, [pc, #180]	; (16480 <uiTraceStart+0xf4>)
   163ca:	681b      	ldr	r3, [r3, #0]
   163cc:	2b00      	cmp	r3, #0
   163ce:	d149      	bne.n	16464 <uiTraceStart+0xd8>
   163d0:	f3ef 8310 	mrs	r3, PRIMASK
   163d4:	60bb      	str	r3, [r7, #8]
   163d6:	68bb      	ldr	r3, [r7, #8]
   163d8:	613b      	str	r3, [r7, #16]
   163da:	2301      	movs	r3, #1
   163dc:	60fb      	str	r3, [r7, #12]
   163de:	68fb      	ldr	r3, [r7, #12]
   163e0:	f383 8810 	msr	PRIMASK, r3
   163e4:	4b27      	ldr	r3, [pc, #156]	; (16484 <uiTraceStart+0xf8>)
   163e6:	681b      	ldr	r3, [r3, #0]
   163e8:	1c5a      	adds	r2, r3, #1
   163ea:	4b26      	ldr	r3, [pc, #152]	; (16484 <uiTraceStart+0xf8>)
   163ec:	601a      	str	r2, [r3, #0]
   163ee:	4b21      	ldr	r3, [pc, #132]	; (16474 <uiTraceStart+0xe8>)
   163f0:	681b      	ldr	r3, [r3, #0]
   163f2:	2201      	movs	r2, #1
   163f4:	631a      	str	r2, [r3, #48]	; 0x30
   163f6:	4b24      	ldr	r3, [pc, #144]	; (16488 <uiTraceStart+0xfc>)
   163f8:	4798      	blx	r3
   163fa:	0003      	movs	r3, r0
   163fc:	0018      	movs	r0, r3
   163fe:	4b23      	ldr	r3, [pc, #140]	; (1648c <uiTraceStart+0x100>)
   16400:	4798      	blx	r3
   16402:	0003      	movs	r3, r0
   16404:	001a      	movs	r2, r3
   16406:	2317      	movs	r3, #23
   16408:	18fb      	adds	r3, r7, r3
   1640a:	701a      	strb	r2, [r3, #0]
   1640c:	2317      	movs	r3, #23
   1640e:	18fb      	adds	r3, r7, r3
   16410:	781b      	ldrb	r3, [r3, #0]
   16412:	2b00      	cmp	r3, #0
   16414:	d116      	bne.n	16444 <uiTraceStart+0xb8>
   16416:	2317      	movs	r3, #23
   16418:	18fc      	adds	r4, r7, r3
   1641a:	2003      	movs	r0, #3
   1641c:	4b1c      	ldr	r3, [pc, #112]	; (16490 <uiTraceStart+0x104>)
   1641e:	4798      	blx	r3
   16420:	0003      	movs	r3, r0
   16422:	7023      	strb	r3, [r4, #0]
   16424:	4a1b      	ldr	r2, [pc, #108]	; (16494 <uiTraceStart+0x108>)
   16426:	2317      	movs	r3, #23
   16428:	18fb      	adds	r3, r7, r3
   1642a:	781b      	ldrb	r3, [r3, #0]
   1642c:	0019      	movs	r1, r3
   1642e:	2003      	movs	r0, #3
   16430:	4b19      	ldr	r3, [pc, #100]	; (16498 <uiTraceStart+0x10c>)
   16432:	4798      	blx	r3
   16434:	2317      	movs	r3, #23
   16436:	18fb      	adds	r3, r7, r3
   16438:	781b      	ldrb	r3, [r3, #0]
   1643a:	2200      	movs	r2, #0
   1643c:	0019      	movs	r1, r3
   1643e:	2003      	movs	r0, #3
   16440:	4b16      	ldr	r3, [pc, #88]	; (1649c <uiTraceStart+0x110>)
   16442:	4798      	blx	r3
   16444:	2317      	movs	r3, #23
   16446:	18fb      	adds	r3, r7, r3
   16448:	781b      	ldrb	r3, [r3, #0]
   1644a:	0018      	movs	r0, r3
   1644c:	4b14      	ldr	r3, [pc, #80]	; (164a0 <uiTraceStart+0x114>)
   1644e:	4798      	blx	r3
   16450:	4b0c      	ldr	r3, [pc, #48]	; (16484 <uiTraceStart+0xf8>)
   16452:	681b      	ldr	r3, [r3, #0]
   16454:	1e5a      	subs	r2, r3, #1
   16456:	4b0b      	ldr	r3, [pc, #44]	; (16484 <uiTraceStart+0xf8>)
   16458:	601a      	str	r2, [r3, #0]
   1645a:	693b      	ldr	r3, [r7, #16]
   1645c:	607b      	str	r3, [r7, #4]
   1645e:	687b      	ldr	r3, [r7, #4]
   16460:	f383 8810 	msr	PRIMASK, r3
   16464:	4b03      	ldr	r3, [pc, #12]	; (16474 <uiTraceStart+0xe8>)
   16466:	681b      	ldr	r3, [r3, #0]
   16468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1646a:	0018      	movs	r0, r3
   1646c:	46bd      	mov	sp, r7
   1646e:	b007      	add	sp, #28
   16470:	bd90      	pop	{r4, r7, pc}
   16472:	46c0      	nop			; (mov r8, r8)
   16474:	20000c34 	.word	0x20000c34
   16478:	0003464c 	.word	0x0003464c
   1647c:	000175f5 	.word	0x000175f5
   16480:	20000b94 	.word	0x20000b94
   16484:	20000b8c 	.word	0x20000b8c
   16488:	00015ff5 	.word	0x00015ff5
   1648c:	00015d39 	.word	0x00015d39
   16490:	000172d9 	.word	0x000172d9
   16494:	00034690 	.word	0x00034690
   16498:	00017509 	.word	0x00017509
   1649c:	00016c6d 	.word	0x00016c6d
   164a0:	00016b55 	.word	0x00016b55

000164a4 <vTraceStart>:
   164a4:	b580      	push	{r7, lr}
   164a6:	af00      	add	r7, sp, #0
   164a8:	4b02      	ldr	r3, [pc, #8]	; (164b4 <vTraceStart+0x10>)
   164aa:	4798      	blx	r3
   164ac:	46c0      	nop			; (mov r8, r8)
   164ae:	46bd      	mov	sp, r7
   164b0:	bd80      	pop	{r7, pc}
   164b2:	46c0      	nop			; (mov r8, r8)
   164b4:	0001638d 	.word	0x0001638d

000164b8 <vTraceStop>:
   164b8:	b580      	push	{r7, lr}
   164ba:	af00      	add	r7, sp, #0
   164bc:	4b08      	ldr	r3, [pc, #32]	; (164e0 <vTraceStop+0x28>)
   164be:	681b      	ldr	r3, [r3, #0]
   164c0:	2b00      	cmp	r3, #0
   164c2:	d003      	beq.n	164cc <vTraceStop+0x14>
   164c4:	4b06      	ldr	r3, [pc, #24]	; (164e0 <vTraceStop+0x28>)
   164c6:	681b      	ldr	r3, [r3, #0]
   164c8:	2200      	movs	r2, #0
   164ca:	631a      	str	r2, [r3, #48]	; 0x30
   164cc:	4b05      	ldr	r3, [pc, #20]	; (164e4 <vTraceStop+0x2c>)
   164ce:	681b      	ldr	r3, [r3, #0]
   164d0:	2b00      	cmp	r3, #0
   164d2:	d002      	beq.n	164da <vTraceStop+0x22>
   164d4:	4b03      	ldr	r3, [pc, #12]	; (164e4 <vTraceStop+0x2c>)
   164d6:	681b      	ldr	r3, [r3, #0]
   164d8:	4798      	blx	r3
   164da:	46c0      	nop			; (mov r8, r8)
   164dc:	46bd      	mov	sp, r7
   164de:	bd80      	pop	{r7, pc}
   164e0:	20000c34 	.word	0x20000c34
   164e4:	20000b9c 	.word	0x20000b9c

000164e8 <xTraceIsRecordingEnabled>:
   164e8:	b580      	push	{r7, lr}
   164ea:	af00      	add	r7, sp, #0
   164ec:	4b05      	ldr	r3, [pc, #20]	; (16504 <xTraceIsRecordingEnabled+0x1c>)
   164ee:	681b      	ldr	r3, [r3, #0]
   164f0:	2b00      	cmp	r3, #0
   164f2:	d003      	beq.n	164fc <xTraceIsRecordingEnabled+0x14>
   164f4:	4b03      	ldr	r3, [pc, #12]	; (16504 <xTraceIsRecordingEnabled+0x1c>)
   164f6:	681b      	ldr	r3, [r3, #0]
   164f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   164fa:	e000      	b.n	164fe <xTraceIsRecordingEnabled+0x16>
   164fc:	2300      	movs	r3, #0
   164fe:	0018      	movs	r0, r3
   16500:	46bd      	mov	sp, r7
   16502:	bd80      	pop	{r7, pc}
   16504:	20000c34 	.word	0x20000c34

00016508 <prvTraceStoreTaskReady>:
   16508:	b590      	push	{r4, r7, lr}
   1650a:	b089      	sub	sp, #36	; 0x24
   1650c:	af00      	add	r7, sp, #0
   1650e:	0002      	movs	r2, r0
   16510:	1dfb      	adds	r3, r7, #7
   16512:	701a      	strb	r2, [r3, #0]
   16514:	1dfb      	adds	r3, r7, #7
   16516:	781b      	ldrb	r3, [r3, #0]
   16518:	2b00      	cmp	r3, #0
   1651a:	d057      	beq.n	165cc <prvTraceStoreTaskReady+0xc4>
   1651c:	4b2e      	ldr	r3, [pc, #184]	; (165d8 <prvTraceStoreTaskReady+0xd0>)
   1651e:	681b      	ldr	r3, [r3, #0]
   16520:	2b00      	cmp	r3, #0
   16522:	d055      	beq.n	165d0 <prvTraceStoreTaskReady+0xc8>
   16524:	1dfb      	adds	r3, r7, #7
   16526:	781b      	ldrb	r3, [r3, #0]
   16528:	2b0f      	cmp	r3, #15
   1652a:	d904      	bls.n	16536 <prvTraceStoreTaskReady+0x2e>
   1652c:	4b2b      	ldr	r3, [pc, #172]	; (165dc <prvTraceStoreTaskReady+0xd4>)
   1652e:	0018      	movs	r0, r3
   16530:	4b2b      	ldr	r3, [pc, #172]	; (165e0 <prvTraceStoreTaskReady+0xd8>)
   16532:	4798      	blx	r3
   16534:	e04d      	b.n	165d2 <prvTraceStoreTaskReady+0xca>
   16536:	4b2b      	ldr	r3, [pc, #172]	; (165e4 <prvTraceStoreTaskReady+0xdc>)
   16538:	681b      	ldr	r3, [r3, #0]
   1653a:	2b00      	cmp	r3, #0
   1653c:	d004      	beq.n	16548 <prvTraceStoreTaskReady+0x40>
   1653e:	4b2a      	ldr	r3, [pc, #168]	; (165e8 <prvTraceStoreTaskReady+0xe0>)
   16540:	0018      	movs	r0, r3
   16542:	4b27      	ldr	r3, [pc, #156]	; (165e0 <prvTraceStoreTaskReady+0xd8>)
   16544:	4798      	blx	r3
   16546:	e044      	b.n	165d2 <prvTraceStoreTaskReady+0xca>
   16548:	f3ef 8310 	mrs	r3, PRIMASK
   1654c:	60fb      	str	r3, [r7, #12]
   1654e:	68fb      	ldr	r3, [r7, #12]
   16550:	61fb      	str	r3, [r7, #28]
   16552:	2301      	movs	r3, #1
   16554:	613b      	str	r3, [r7, #16]
   16556:	693b      	ldr	r3, [r7, #16]
   16558:	f383 8810 	msr	PRIMASK, r3
   1655c:	4b21      	ldr	r3, [pc, #132]	; (165e4 <prvTraceStoreTaskReady+0xdc>)
   1655e:	681b      	ldr	r3, [r3, #0]
   16560:	1c5a      	adds	r2, r3, #1
   16562:	4b20      	ldr	r3, [pc, #128]	; (165e4 <prvTraceStoreTaskReady+0xdc>)
   16564:	601a      	str	r2, [r3, #0]
   16566:	4b21      	ldr	r3, [pc, #132]	; (165ec <prvTraceStoreTaskReady+0xe4>)
   16568:	681b      	ldr	r3, [r3, #0]
   1656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1656c:	2b00      	cmp	r3, #0
   1656e:	d022      	beq.n	165b6 <prvTraceStoreTaskReady+0xae>
   16570:	231a      	movs	r3, #26
   16572:	18fc      	adds	r4, r7, r3
   16574:	4b1e      	ldr	r3, [pc, #120]	; (165f0 <prvTraceStoreTaskReady+0xe8>)
   16576:	0018      	movs	r0, r3
   16578:	4b1e      	ldr	r3, [pc, #120]	; (165f4 <prvTraceStoreTaskReady+0xec>)
   1657a:	4798      	blx	r3
   1657c:	0003      	movs	r3, r0
   1657e:	8023      	strh	r3, [r4, #0]
   16580:	2319      	movs	r3, #25
   16582:	18fb      	adds	r3, r7, r3
   16584:	1dfa      	adds	r2, r7, #7
   16586:	7812      	ldrb	r2, [r2, #0]
   16588:	701a      	strb	r2, [r3, #0]
   1658a:	4b1b      	ldr	r3, [pc, #108]	; (165f8 <prvTraceStoreTaskReady+0xf0>)
   1658c:	4798      	blx	r3
   1658e:	0003      	movs	r3, r0
   16590:	617b      	str	r3, [r7, #20]
   16592:	697b      	ldr	r3, [r7, #20]
   16594:	2b00      	cmp	r3, #0
   16596:	d00e      	beq.n	165b6 <prvTraceStoreTaskReady+0xae>
   16598:	697b      	ldr	r3, [r7, #20]
   1659a:	2202      	movs	r2, #2
   1659c:	701a      	strb	r2, [r3, #0]
   1659e:	697b      	ldr	r3, [r7, #20]
   165a0:	221a      	movs	r2, #26
   165a2:	18ba      	adds	r2, r7, r2
   165a4:	8812      	ldrh	r2, [r2, #0]
   165a6:	805a      	strh	r2, [r3, #2]
   165a8:	697b      	ldr	r3, [r7, #20]
   165aa:	2219      	movs	r2, #25
   165ac:	18ba      	adds	r2, r7, r2
   165ae:	7812      	ldrb	r2, [r2, #0]
   165b0:	705a      	strb	r2, [r3, #1]
   165b2:	4b12      	ldr	r3, [pc, #72]	; (165fc <prvTraceStoreTaskReady+0xf4>)
   165b4:	4798      	blx	r3
   165b6:	4b0b      	ldr	r3, [pc, #44]	; (165e4 <prvTraceStoreTaskReady+0xdc>)
   165b8:	681b      	ldr	r3, [r3, #0]
   165ba:	1e5a      	subs	r2, r3, #1
   165bc:	4b09      	ldr	r3, [pc, #36]	; (165e4 <prvTraceStoreTaskReady+0xdc>)
   165be:	601a      	str	r2, [r3, #0]
   165c0:	69fb      	ldr	r3, [r7, #28]
   165c2:	60bb      	str	r3, [r7, #8]
   165c4:	68bb      	ldr	r3, [r7, #8]
   165c6:	f383 8810 	msr	PRIMASK, r3
   165ca:	e002      	b.n	165d2 <prvTraceStoreTaskReady+0xca>
   165cc:	46c0      	nop			; (mov r8, r8)
   165ce:	e000      	b.n	165d2 <prvTraceStoreTaskReady+0xca>
   165d0:	46c0      	nop			; (mov r8, r8)
   165d2:	46bd      	mov	sp, r7
   165d4:	b009      	add	sp, #36	; 0x24
   165d6:	bd90      	pop	{r4, r7, pc}
   165d8:	200000ec 	.word	0x200000ec
   165dc:	000349f8 	.word	0x000349f8
   165e0:	000175f5 	.word	0x000175f5
   165e4:	20000b8c 	.word	0x20000b8c
   165e8:	00034a38 	.word	0x00034a38
   165ec:	20000c34 	.word	0x20000c34
   165f0:	0000ffff 	.word	0x0000ffff
   165f4:	00017809 	.word	0x00017809
   165f8:	000171ad 	.word	0x000171ad
   165fc:	000177b1 	.word	0x000177b1

00016600 <vTraceStoreMemMangEvent>:
   16600:	b580      	push	{r7, lr}
   16602:	b08e      	sub	sp, #56	; 0x38
   16604:	af00      	add	r7, sp, #0
   16606:	60f8      	str	r0, [r7, #12]
   16608:	60b9      	str	r1, [r7, #8]
   1660a:	607a      	str	r2, [r7, #4]
   1660c:	4b48      	ldr	r3, [pc, #288]	; (16730 <vTraceStoreMemMangEvent+0x130>)
   1660e:	681b      	ldr	r3, [r3, #0]
   16610:	2b00      	cmp	r3, #0
   16612:	d100      	bne.n	16616 <vTraceStoreMemMangEvent+0x16>
   16614:	e088      	b.n	16728 <vTraceStoreMemMangEvent+0x128>
   16616:	687b      	ldr	r3, [r7, #4]
   16618:	2b00      	cmp	r3, #0
   1661a:	da03      	bge.n	16624 <vTraceStoreMemMangEvent+0x24>
   1661c:	687b      	ldr	r3, [r7, #4]
   1661e:	425b      	negs	r3, r3
   16620:	637b      	str	r3, [r7, #52]	; 0x34
   16622:	e001      	b.n	16628 <vTraceStoreMemMangEvent+0x28>
   16624:	687b      	ldr	r3, [r7, #4]
   16626:	637b      	str	r3, [r7, #52]	; 0x34
   16628:	f3ef 8310 	mrs	r3, PRIMASK
   1662c:	61bb      	str	r3, [r7, #24]
   1662e:	69bb      	ldr	r3, [r7, #24]
   16630:	633b      	str	r3, [r7, #48]	; 0x30
   16632:	2301      	movs	r3, #1
   16634:	61fb      	str	r3, [r7, #28]
   16636:	69fb      	ldr	r3, [r7, #28]
   16638:	f383 8810 	msr	PRIMASK, r3
   1663c:	4b3d      	ldr	r3, [pc, #244]	; (16734 <vTraceStoreMemMangEvent+0x134>)
   1663e:	681b      	ldr	r3, [r3, #0]
   16640:	1c5a      	adds	r2, r3, #1
   16642:	4b3c      	ldr	r3, [pc, #240]	; (16734 <vTraceStoreMemMangEvent+0x134>)
   16644:	601a      	str	r2, [r3, #0]
   16646:	68bb      	ldr	r3, [r7, #8]
   16648:	2b00      	cmp	r3, #0
   1664a:	d005      	beq.n	16658 <vTraceStoreMemMangEvent+0x58>
   1664c:	4b3a      	ldr	r3, [pc, #232]	; (16738 <vTraceStoreMemMangEvent+0x138>)
   1664e:	681a      	ldr	r2, [r3, #0]
   16650:	687b      	ldr	r3, [r7, #4]
   16652:	18d2      	adds	r2, r2, r3
   16654:	4b38      	ldr	r3, [pc, #224]	; (16738 <vTraceStoreMemMangEvent+0x138>)
   16656:	601a      	str	r2, [r3, #0]
   16658:	4b35      	ldr	r3, [pc, #212]	; (16730 <vTraceStoreMemMangEvent+0x130>)
   1665a:	681b      	ldr	r3, [r3, #0]
   1665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1665e:	2b00      	cmp	r3, #0
   16660:	d057      	beq.n	16712 <vTraceStoreMemMangEvent+0x112>
   16662:	20ff      	movs	r0, #255	; 0xff
   16664:	4b35      	ldr	r3, [pc, #212]	; (1673c <vTraceStoreMemMangEvent+0x13c>)
   16666:	4798      	blx	r3
   16668:	0003      	movs	r3, r0
   1666a:	001a      	movs	r2, r3
   1666c:	232f      	movs	r3, #47	; 0x2f
   1666e:	18fb      	adds	r3, r7, r3
   16670:	701a      	strb	r2, [r3, #0]
   16672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16674:	4a32      	ldr	r2, [pc, #200]	; (16740 <vTraceStoreMemMangEvent+0x140>)
   16676:	0019      	movs	r1, r3
   16678:	0010      	movs	r0, r2
   1667a:	4b32      	ldr	r3, [pc, #200]	; (16744 <vTraceStoreMemMangEvent+0x144>)
   1667c:	4798      	blx	r3
   1667e:	0002      	movs	r2, r0
   16680:	232c      	movs	r3, #44	; 0x2c
   16682:	18fb      	adds	r3, r7, r3
   16684:	801a      	strh	r2, [r3, #0]
   16686:	4b30      	ldr	r3, [pc, #192]	; (16748 <vTraceStoreMemMangEvent+0x148>)
   16688:	4798      	blx	r3
   1668a:	0003      	movs	r3, r0
   1668c:	62bb      	str	r3, [r7, #40]	; 0x28
   1668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16690:	2b00      	cmp	r3, #0
   16692:	d03e      	beq.n	16712 <vTraceStoreMemMangEvent+0x112>
   16694:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16696:	222f      	movs	r2, #47	; 0x2f
   16698:	18ba      	adds	r2, r7, r2
   1669a:	7812      	ldrb	r2, [r2, #0]
   1669c:	705a      	strb	r2, [r3, #1]
   1669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   166a0:	2200      	movs	r2, #0
   166a2:	701a      	strb	r2, [r3, #0]
   166a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   166a6:	222c      	movs	r2, #44	; 0x2c
   166a8:	18ba      	adds	r2, r7, r2
   166aa:	8812      	ldrh	r2, [r2, #0]
   166ac:	805a      	strh	r2, [r3, #2]
   166ae:	4b27      	ldr	r3, [pc, #156]	; (1674c <vTraceStoreMemMangEvent+0x14c>)
   166b0:	4798      	blx	r3
   166b2:	68bb      	ldr	r3, [r7, #8]
   166b4:	4a22      	ldr	r2, [pc, #136]	; (16740 <vTraceStoreMemMangEvent+0x140>)
   166b6:	0019      	movs	r1, r3
   166b8:	0010      	movs	r0, r2
   166ba:	4b22      	ldr	r3, [pc, #136]	; (16744 <vTraceStoreMemMangEvent+0x144>)
   166bc:	4798      	blx	r3
   166be:	0002      	movs	r2, r0
   166c0:	2326      	movs	r3, #38	; 0x26
   166c2:	18fb      	adds	r3, r7, r3
   166c4:	801a      	strh	r2, [r3, #0]
   166c6:	2325      	movs	r3, #37	; 0x25
   166c8:	18fb      	adds	r3, r7, r3
   166ca:	2200      	movs	r2, #0
   166cc:	701a      	strb	r2, [r3, #0]
   166ce:	4b1e      	ldr	r3, [pc, #120]	; (16748 <vTraceStoreMemMangEvent+0x148>)
   166d0:	4798      	blx	r3
   166d2:	0003      	movs	r3, r0
   166d4:	623b      	str	r3, [r7, #32]
   166d6:	6a3b      	ldr	r3, [r7, #32]
   166d8:	2b00      	cmp	r3, #0
   166da:	d01a      	beq.n	16712 <vTraceStoreMemMangEvent+0x112>
   166dc:	6a3b      	ldr	r3, [r7, #32]
   166de:	2226      	movs	r2, #38	; 0x26
   166e0:	18ba      	adds	r2, r7, r2
   166e2:	8812      	ldrh	r2, [r2, #0]
   166e4:	805a      	strh	r2, [r3, #2]
   166e6:	6a3b      	ldr	r3, [r7, #32]
   166e8:	2225      	movs	r2, #37	; 0x25
   166ea:	18ba      	adds	r2, r7, r2
   166ec:	7812      	ldrb	r2, [r2, #0]
   166ee:	705a      	strb	r2, [r3, #1]
   166f0:	68fb      	ldr	r3, [r7, #12]
   166f2:	b2db      	uxtb	r3, r3
   166f4:	3301      	adds	r3, #1
   166f6:	b2da      	uxtb	r2, r3
   166f8:	6a3b      	ldr	r3, [r7, #32]
   166fa:	701a      	strb	r2, [r3, #0]
   166fc:	68fb      	ldr	r3, [r7, #12]
   166fe:	b2da      	uxtb	r2, r3
   16700:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16702:	701a      	strb	r2, [r3, #0]
   16704:	4b11      	ldr	r3, [pc, #68]	; (1674c <vTraceStoreMemMangEvent+0x14c>)
   16706:	4798      	blx	r3
   16708:	4b09      	ldr	r3, [pc, #36]	; (16730 <vTraceStoreMemMangEvent+0x130>)
   1670a:	681b      	ldr	r3, [r3, #0]
   1670c:	4a0a      	ldr	r2, [pc, #40]	; (16738 <vTraceStoreMemMangEvent+0x138>)
   1670e:	6812      	ldr	r2, [r2, #0]
   16710:	651a      	str	r2, [r3, #80]	; 0x50
   16712:	4b08      	ldr	r3, [pc, #32]	; (16734 <vTraceStoreMemMangEvent+0x134>)
   16714:	681b      	ldr	r3, [r3, #0]
   16716:	1e5a      	subs	r2, r3, #1
   16718:	4b06      	ldr	r3, [pc, #24]	; (16734 <vTraceStoreMemMangEvent+0x134>)
   1671a:	601a      	str	r2, [r3, #0]
   1671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1671e:	617b      	str	r3, [r7, #20]
   16720:	697b      	ldr	r3, [r7, #20]
   16722:	f383 8810 	msr	PRIMASK, r3
   16726:	e000      	b.n	1672a <vTraceStoreMemMangEvent+0x12a>
   16728:	46c0      	nop			; (mov r8, r8)
   1672a:	46bd      	mov	sp, r7
   1672c:	b00e      	add	sp, #56	; 0x38
   1672e:	bd80      	pop	{r7, pc}
   16730:	20000c34 	.word	0x20000c34
   16734:	20000b8c 	.word	0x20000b8c
   16738:	20000ba0 	.word	0x20000ba0
   1673c:	00017809 	.word	0x00017809
   16740:	0000ffff 	.word	0x0000ffff
   16744:	000169cd 	.word	0x000169cd
   16748:	000171ad 	.word	0x000171ad
   1674c:	000177b1 	.word	0x000177b1

00016750 <prvTraceStoreKernelCall>:
   16750:	b590      	push	{r4, r7, lr}
   16752:	b08b      	sub	sp, #44	; 0x2c
   16754:	af00      	add	r7, sp, #0
   16756:	60f8      	str	r0, [r7, #12]
   16758:	607a      	str	r2, [r7, #4]
   1675a:	230b      	movs	r3, #11
   1675c:	18fb      	adds	r3, r7, r3
   1675e:	1c0a      	adds	r2, r1, #0
   16760:	701a      	strb	r2, [r3, #0]
   16762:	68fb      	ldr	r3, [r7, #12]
   16764:	2bfe      	cmp	r3, #254	; 0xfe
   16766:	d904      	bls.n	16772 <prvTraceStoreKernelCall+0x22>
   16768:	4b39      	ldr	r3, [pc, #228]	; (16850 <prvTraceStoreKernelCall+0x100>)
   1676a:	0018      	movs	r0, r3
   1676c:	4b39      	ldr	r3, [pc, #228]	; (16854 <prvTraceStoreKernelCall+0x104>)
   1676e:	4798      	blx	r3
   16770:	e06b      	b.n	1684a <prvTraceStoreKernelCall+0xfa>
   16772:	230b      	movs	r3, #11
   16774:	18fb      	adds	r3, r7, r3
   16776:	781b      	ldrb	r3, [r3, #0]
   16778:	2b08      	cmp	r3, #8
   1677a:	d904      	bls.n	16786 <prvTraceStoreKernelCall+0x36>
   1677c:	4b36      	ldr	r3, [pc, #216]	; (16858 <prvTraceStoreKernelCall+0x108>)
   1677e:	0018      	movs	r0, r3
   16780:	4b34      	ldr	r3, [pc, #208]	; (16854 <prvTraceStoreKernelCall+0x104>)
   16782:	4798      	blx	r3
   16784:	e061      	b.n	1684a <prvTraceStoreKernelCall+0xfa>
   16786:	4b35      	ldr	r3, [pc, #212]	; (1685c <prvTraceStoreKernelCall+0x10c>)
   16788:	681a      	ldr	r2, [r3, #0]
   1678a:	230b      	movs	r3, #11
   1678c:	18fb      	adds	r3, r7, r3
   1678e:	781b      	ldrb	r3, [r3, #0]
   16790:	2164      	movs	r1, #100	; 0x64
   16792:	18d3      	adds	r3, r2, r3
   16794:	185b      	adds	r3, r3, r1
   16796:	781b      	ldrb	r3, [r3, #0]
   16798:	001a      	movs	r2, r3
   1679a:	687b      	ldr	r3, [r7, #4]
   1679c:	429a      	cmp	r2, r3
   1679e:	d204      	bcs.n	167aa <prvTraceStoreKernelCall+0x5a>
   167a0:	4b2f      	ldr	r3, [pc, #188]	; (16860 <prvTraceStoreKernelCall+0x110>)
   167a2:	0018      	movs	r0, r3
   167a4:	4b2b      	ldr	r3, [pc, #172]	; (16854 <prvTraceStoreKernelCall+0x104>)
   167a6:	4798      	blx	r3
   167a8:	e04f      	b.n	1684a <prvTraceStoreKernelCall+0xfa>
   167aa:	4b2e      	ldr	r3, [pc, #184]	; (16864 <prvTraceStoreKernelCall+0x114>)
   167ac:	681b      	ldr	r3, [r3, #0]
   167ae:	2b00      	cmp	r3, #0
   167b0:	d004      	beq.n	167bc <prvTraceStoreKernelCall+0x6c>
   167b2:	4b2d      	ldr	r3, [pc, #180]	; (16868 <prvTraceStoreKernelCall+0x118>)
   167b4:	0018      	movs	r0, r3
   167b6:	4b27      	ldr	r3, [pc, #156]	; (16854 <prvTraceStoreKernelCall+0x104>)
   167b8:	4798      	blx	r3
   167ba:	e046      	b.n	1684a <prvTraceStoreKernelCall+0xfa>
   167bc:	4b2b      	ldr	r3, [pc, #172]	; (1686c <prvTraceStoreKernelCall+0x11c>)
   167be:	781b      	ldrb	r3, [r3, #0]
   167c0:	2b00      	cmp	r3, #0
   167c2:	d041      	beq.n	16848 <prvTraceStoreKernelCall+0xf8>
   167c4:	f3ef 8310 	mrs	r3, PRIMASK
   167c8:	617b      	str	r3, [r7, #20]
   167ca:	697b      	ldr	r3, [r7, #20]
   167cc:	627b      	str	r3, [r7, #36]	; 0x24
   167ce:	2301      	movs	r3, #1
   167d0:	61bb      	str	r3, [r7, #24]
   167d2:	69bb      	ldr	r3, [r7, #24]
   167d4:	f383 8810 	msr	PRIMASK, r3
   167d8:	4b22      	ldr	r3, [pc, #136]	; (16864 <prvTraceStoreKernelCall+0x114>)
   167da:	681b      	ldr	r3, [r3, #0]
   167dc:	1c5a      	adds	r2, r3, #1
   167de:	4b21      	ldr	r3, [pc, #132]	; (16864 <prvTraceStoreKernelCall+0x114>)
   167e0:	601a      	str	r2, [r3, #0]
   167e2:	4b1e      	ldr	r3, [pc, #120]	; (1685c <prvTraceStoreKernelCall+0x10c>)
   167e4:	681b      	ldr	r3, [r3, #0]
   167e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   167e8:	2b00      	cmp	r3, #0
   167ea:	d022      	beq.n	16832 <prvTraceStoreKernelCall+0xe2>
   167ec:	2322      	movs	r3, #34	; 0x22
   167ee:	18fc      	adds	r4, r7, r3
   167f0:	4b1f      	ldr	r3, [pc, #124]	; (16870 <prvTraceStoreKernelCall+0x120>)
   167f2:	0018      	movs	r0, r3
   167f4:	4b1f      	ldr	r3, [pc, #124]	; (16874 <prvTraceStoreKernelCall+0x124>)
   167f6:	4798      	blx	r3
   167f8:	0003      	movs	r3, r0
   167fa:	8023      	strh	r3, [r4, #0]
   167fc:	2321      	movs	r3, #33	; 0x21
   167fe:	18fb      	adds	r3, r7, r3
   16800:	687a      	ldr	r2, [r7, #4]
   16802:	701a      	strb	r2, [r3, #0]
   16804:	4b1c      	ldr	r3, [pc, #112]	; (16878 <prvTraceStoreKernelCall+0x128>)
   16806:	4798      	blx	r3
   16808:	0003      	movs	r3, r0
   1680a:	61fb      	str	r3, [r7, #28]
   1680c:	69fb      	ldr	r3, [r7, #28]
   1680e:	2b00      	cmp	r3, #0
   16810:	d00f      	beq.n	16832 <prvTraceStoreKernelCall+0xe2>
   16812:	69fb      	ldr	r3, [r7, #28]
   16814:	2222      	movs	r2, #34	; 0x22
   16816:	18ba      	adds	r2, r7, r2
   16818:	8812      	ldrh	r2, [r2, #0]
   1681a:	805a      	strh	r2, [r3, #2]
   1681c:	68fb      	ldr	r3, [r7, #12]
   1681e:	b2da      	uxtb	r2, r3
   16820:	69fb      	ldr	r3, [r7, #28]
   16822:	701a      	strb	r2, [r3, #0]
   16824:	69fb      	ldr	r3, [r7, #28]
   16826:	2221      	movs	r2, #33	; 0x21
   16828:	18ba      	adds	r2, r7, r2
   1682a:	7812      	ldrb	r2, [r2, #0]
   1682c:	705a      	strb	r2, [r3, #1]
   1682e:	4b13      	ldr	r3, [pc, #76]	; (1687c <prvTraceStoreKernelCall+0x12c>)
   16830:	4798      	blx	r3
   16832:	4b0c      	ldr	r3, [pc, #48]	; (16864 <prvTraceStoreKernelCall+0x114>)
   16834:	681b      	ldr	r3, [r3, #0]
   16836:	1e5a      	subs	r2, r3, #1
   16838:	4b0a      	ldr	r3, [pc, #40]	; (16864 <prvTraceStoreKernelCall+0x114>)
   1683a:	601a      	str	r2, [r3, #0]
   1683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1683e:	613b      	str	r3, [r7, #16]
   16840:	693b      	ldr	r3, [r7, #16]
   16842:	f383 8810 	msr	PRIMASK, r3
   16846:	e000      	b.n	1684a <prvTraceStoreKernelCall+0xfa>
   16848:	46c0      	nop			; (mov r8, r8)
   1684a:	46bd      	mov	sp, r7
   1684c:	b00b      	add	sp, #44	; 0x2c
   1684e:	bd90      	pop	{r4, r7, pc}
   16850:	00034aa8 	.word	0x00034aa8
   16854:	000175f5 	.word	0x000175f5
   16858:	00034ae0 	.word	0x00034ae0
   1685c:	20000c34 	.word	0x20000c34
   16860:	00034b28 	.word	0x00034b28
   16864:	20000b8c 	.word	0x20000b8c
   16868:	00034b70 	.word	0x00034b70
   1686c:	20000b98 	.word	0x20000b98
   16870:	0000ffff 	.word	0x0000ffff
   16874:	00017809 	.word	0x00017809
   16878:	000171ad 	.word	0x000171ad
   1687c:	000177b1 	.word	0x000177b1

00016880 <prvTraceStoreKernelCallWithParam>:
   16880:	b580      	push	{r7, lr}
   16882:	b08a      	sub	sp, #40	; 0x28
   16884:	af00      	add	r7, sp, #0
   16886:	60f8      	str	r0, [r7, #12]
   16888:	607a      	str	r2, [r7, #4]
   1688a:	603b      	str	r3, [r7, #0]
   1688c:	230b      	movs	r3, #11
   1688e:	18fb      	adds	r3, r7, r3
   16890:	1c0a      	adds	r2, r1, #0
   16892:	701a      	strb	r2, [r3, #0]
   16894:	68fb      	ldr	r3, [r7, #12]
   16896:	2bfe      	cmp	r3, #254	; 0xfe
   16898:	d904      	bls.n	168a4 <prvTraceStoreKernelCallWithParam+0x24>
   1689a:	4b40      	ldr	r3, [pc, #256]	; (1699c <prvTraceStoreKernelCallWithParam+0x11c>)
   1689c:	0018      	movs	r0, r3
   1689e:	4b40      	ldr	r3, [pc, #256]	; (169a0 <prvTraceStoreKernelCallWithParam+0x120>)
   168a0:	4798      	blx	r3
   168a2:	e077      	b.n	16994 <prvTraceStoreKernelCallWithParam+0x114>
   168a4:	230b      	movs	r3, #11
   168a6:	18fb      	adds	r3, r7, r3
   168a8:	781b      	ldrb	r3, [r3, #0]
   168aa:	2b08      	cmp	r3, #8
   168ac:	d904      	bls.n	168b8 <prvTraceStoreKernelCallWithParam+0x38>
   168ae:	4b3d      	ldr	r3, [pc, #244]	; (169a4 <prvTraceStoreKernelCallWithParam+0x124>)
   168b0:	0018      	movs	r0, r3
   168b2:	4b3b      	ldr	r3, [pc, #236]	; (169a0 <prvTraceStoreKernelCallWithParam+0x120>)
   168b4:	4798      	blx	r3
   168b6:	e06d      	b.n	16994 <prvTraceStoreKernelCallWithParam+0x114>
   168b8:	4b3b      	ldr	r3, [pc, #236]	; (169a8 <prvTraceStoreKernelCallWithParam+0x128>)
   168ba:	681a      	ldr	r2, [r3, #0]
   168bc:	230b      	movs	r3, #11
   168be:	18fb      	adds	r3, r7, r3
   168c0:	781b      	ldrb	r3, [r3, #0]
   168c2:	2164      	movs	r1, #100	; 0x64
   168c4:	18d3      	adds	r3, r2, r3
   168c6:	185b      	adds	r3, r3, r1
   168c8:	781b      	ldrb	r3, [r3, #0]
   168ca:	001a      	movs	r2, r3
   168cc:	687b      	ldr	r3, [r7, #4]
   168ce:	429a      	cmp	r2, r3
   168d0:	d204      	bcs.n	168dc <prvTraceStoreKernelCallWithParam+0x5c>
   168d2:	4b36      	ldr	r3, [pc, #216]	; (169ac <prvTraceStoreKernelCallWithParam+0x12c>)
   168d4:	0018      	movs	r0, r3
   168d6:	4b32      	ldr	r3, [pc, #200]	; (169a0 <prvTraceStoreKernelCallWithParam+0x120>)
   168d8:	4798      	blx	r3
   168da:	e05b      	b.n	16994 <prvTraceStoreKernelCallWithParam+0x114>
   168dc:	4b34      	ldr	r3, [pc, #208]	; (169b0 <prvTraceStoreKernelCallWithParam+0x130>)
   168de:	681b      	ldr	r3, [r3, #0]
   168e0:	2b00      	cmp	r3, #0
   168e2:	d004      	beq.n	168ee <prvTraceStoreKernelCallWithParam+0x6e>
   168e4:	4b33      	ldr	r3, [pc, #204]	; (169b4 <prvTraceStoreKernelCallWithParam+0x134>)
   168e6:	0018      	movs	r0, r3
   168e8:	4b2d      	ldr	r3, [pc, #180]	; (169a0 <prvTraceStoreKernelCallWithParam+0x120>)
   168ea:	4798      	blx	r3
   168ec:	e052      	b.n	16994 <prvTraceStoreKernelCallWithParam+0x114>
   168ee:	f3ef 8310 	mrs	r3, PRIMASK
   168f2:	617b      	str	r3, [r7, #20]
   168f4:	697b      	ldr	r3, [r7, #20]
   168f6:	627b      	str	r3, [r7, #36]	; 0x24
   168f8:	2301      	movs	r3, #1
   168fa:	61bb      	str	r3, [r7, #24]
   168fc:	69bb      	ldr	r3, [r7, #24]
   168fe:	f383 8810 	msr	PRIMASK, r3
   16902:	4b2b      	ldr	r3, [pc, #172]	; (169b0 <prvTraceStoreKernelCallWithParam+0x130>)
   16904:	681b      	ldr	r3, [r3, #0]
   16906:	1c5a      	adds	r2, r3, #1
   16908:	4b29      	ldr	r3, [pc, #164]	; (169b0 <prvTraceStoreKernelCallWithParam+0x130>)
   1690a:	601a      	str	r2, [r3, #0]
   1690c:	4b26      	ldr	r3, [pc, #152]	; (169a8 <prvTraceStoreKernelCallWithParam+0x128>)
   1690e:	681b      	ldr	r3, [r3, #0]
   16910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16912:	2b00      	cmp	r3, #0
   16914:	d034      	beq.n	16980 <prvTraceStoreKernelCallWithParam+0x100>
   16916:	4b28      	ldr	r3, [pc, #160]	; (169b8 <prvTraceStoreKernelCallWithParam+0x138>)
   16918:	781b      	ldrb	r3, [r3, #0]
   1691a:	2b00      	cmp	r3, #0
   1691c:	d030      	beq.n	16980 <prvTraceStoreKernelCallWithParam+0x100>
   1691e:	20ff      	movs	r0, #255	; 0xff
   16920:	4b26      	ldr	r3, [pc, #152]	; (169bc <prvTraceStoreKernelCallWithParam+0x13c>)
   16922:	4798      	blx	r3
   16924:	0003      	movs	r3, r0
   16926:	001a      	movs	r2, r3
   16928:	2323      	movs	r3, #35	; 0x23
   1692a:	18fb      	adds	r3, r7, r3
   1692c:	701a      	strb	r2, [r3, #0]
   1692e:	683b      	ldr	r3, [r7, #0]
   16930:	0019      	movs	r1, r3
   16932:	20ff      	movs	r0, #255	; 0xff
   16934:	4b22      	ldr	r3, [pc, #136]	; (169c0 <prvTraceStoreKernelCallWithParam+0x140>)
   16936:	4798      	blx	r3
   16938:	0002      	movs	r2, r0
   1693a:	2322      	movs	r3, #34	; 0x22
   1693c:	18fb      	adds	r3, r7, r3
   1693e:	701a      	strb	r2, [r3, #0]
   16940:	2321      	movs	r3, #33	; 0x21
   16942:	18fb      	adds	r3, r7, r3
   16944:	687a      	ldr	r2, [r7, #4]
   16946:	701a      	strb	r2, [r3, #0]
   16948:	4b1e      	ldr	r3, [pc, #120]	; (169c4 <prvTraceStoreKernelCallWithParam+0x144>)
   1694a:	4798      	blx	r3
   1694c:	0003      	movs	r3, r0
   1694e:	61fb      	str	r3, [r7, #28]
   16950:	69fb      	ldr	r3, [r7, #28]
   16952:	2b00      	cmp	r3, #0
   16954:	d014      	beq.n	16980 <prvTraceStoreKernelCallWithParam+0x100>
   16956:	69fb      	ldr	r3, [r7, #28]
   16958:	2223      	movs	r2, #35	; 0x23
   1695a:	18ba      	adds	r2, r7, r2
   1695c:	7812      	ldrb	r2, [r2, #0]
   1695e:	70da      	strb	r2, [r3, #3]
   16960:	68fb      	ldr	r3, [r7, #12]
   16962:	b2da      	uxtb	r2, r3
   16964:	69fb      	ldr	r3, [r7, #28]
   16966:	701a      	strb	r2, [r3, #0]
   16968:	69fb      	ldr	r3, [r7, #28]
   1696a:	2221      	movs	r2, #33	; 0x21
   1696c:	18ba      	adds	r2, r7, r2
   1696e:	7812      	ldrb	r2, [r2, #0]
   16970:	705a      	strb	r2, [r3, #1]
   16972:	69fb      	ldr	r3, [r7, #28]
   16974:	2222      	movs	r2, #34	; 0x22
   16976:	18ba      	adds	r2, r7, r2
   16978:	7812      	ldrb	r2, [r2, #0]
   1697a:	709a      	strb	r2, [r3, #2]
   1697c:	4b12      	ldr	r3, [pc, #72]	; (169c8 <prvTraceStoreKernelCallWithParam+0x148>)
   1697e:	4798      	blx	r3
   16980:	4b0b      	ldr	r3, [pc, #44]	; (169b0 <prvTraceStoreKernelCallWithParam+0x130>)
   16982:	681b      	ldr	r3, [r3, #0]
   16984:	1e5a      	subs	r2, r3, #1
   16986:	4b0a      	ldr	r3, [pc, #40]	; (169b0 <prvTraceStoreKernelCallWithParam+0x130>)
   16988:	601a      	str	r2, [r3, #0]
   1698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1698c:	613b      	str	r3, [r7, #16]
   1698e:	693b      	ldr	r3, [r7, #16]
   16990:	f383 8810 	msr	PRIMASK, r3
   16994:	46bd      	mov	sp, r7
   16996:	b00a      	add	sp, #40	; 0x28
   16998:	bd80      	pop	{r7, pc}
   1699a:	46c0      	nop			; (mov r8, r8)
   1699c:	00034ba8 	.word	0x00034ba8
   169a0:	000175f5 	.word	0x000175f5
   169a4:	00034be8 	.word	0x00034be8
   169a8:	20000c34 	.word	0x20000c34
   169ac:	00034c38 	.word	0x00034c38
   169b0:	20000b8c 	.word	0x20000b8c
   169b4:	00034c88 	.word	0x00034c88
   169b8:	20000b98 	.word	0x20000b98
   169bc:	00017809 	.word	0x00017809
   169c0:	000169cd 	.word	0x000169cd
   169c4:	000171ad 	.word	0x000171ad
   169c8:	000177b1 	.word	0x000177b1

000169cc <prvTraceGetParam>:
   169cc:	b580      	push	{r7, lr}
   169ce:	b084      	sub	sp, #16
   169d0:	af00      	add	r7, sp, #0
   169d2:	6078      	str	r0, [r7, #4]
   169d4:	6039      	str	r1, [r7, #0]
   169d6:	687b      	ldr	r3, [r7, #4]
   169d8:	2bff      	cmp	r3, #255	; 0xff
   169da:	d009      	beq.n	169f0 <prvTraceGetParam+0x24>
   169dc:	687b      	ldr	r3, [r7, #4]
   169de:	4a19      	ldr	r2, [pc, #100]	; (16a44 <prvTraceGetParam+0x78>)
   169e0:	4293      	cmp	r3, r2
   169e2:	d005      	beq.n	169f0 <prvTraceGetParam+0x24>
   169e4:	4b18      	ldr	r3, [pc, #96]	; (16a48 <prvTraceGetParam+0x7c>)
   169e6:	0018      	movs	r0, r3
   169e8:	4b18      	ldr	r3, [pc, #96]	; (16a4c <prvTraceGetParam+0x80>)
   169ea:	4798      	blx	r3
   169ec:	683b      	ldr	r3, [r7, #0]
   169ee:	e024      	b.n	16a3a <prvTraceGetParam+0x6e>
   169f0:	683a      	ldr	r2, [r7, #0]
   169f2:	687b      	ldr	r3, [r7, #4]
   169f4:	429a      	cmp	r2, r3
   169f6:	d801      	bhi.n	169fc <prvTraceGetParam+0x30>
   169f8:	683b      	ldr	r3, [r7, #0]
   169fa:	e01e      	b.n	16a3a <prvTraceGetParam+0x6e>
   169fc:	4b14      	ldr	r3, [pc, #80]	; (16a50 <prvTraceGetParam+0x84>)
   169fe:	4798      	blx	r3
   16a00:	0003      	movs	r3, r0
   16a02:	60fb      	str	r3, [r7, #12]
   16a04:	68fb      	ldr	r3, [r7, #12]
   16a06:	2b00      	cmp	r3, #0
   16a08:	d014      	beq.n	16a34 <prvTraceGetParam+0x68>
   16a0a:	68fb      	ldr	r3, [r7, #12]
   16a0c:	2201      	movs	r2, #1
   16a0e:	701a      	strb	r2, [r3, #0]
   16a10:	687b      	ldr	r3, [r7, #4]
   16a12:	43db      	mvns	r3, r3
   16a14:	683a      	ldr	r2, [r7, #0]
   16a16:	4013      	ands	r3, r2
   16a18:	0a1b      	lsrs	r3, r3, #8
   16a1a:	b2da      	uxtb	r2, r3
   16a1c:	68fb      	ldr	r3, [r7, #12]
   16a1e:	705a      	strb	r2, [r3, #1]
   16a20:	687b      	ldr	r3, [r7, #4]
   16a22:	43db      	mvns	r3, r3
   16a24:	683a      	ldr	r2, [r7, #0]
   16a26:	4013      	ands	r3, r2
   16a28:	0c1b      	lsrs	r3, r3, #16
   16a2a:	b29a      	uxth	r2, r3
   16a2c:	68fb      	ldr	r3, [r7, #12]
   16a2e:	805a      	strh	r2, [r3, #2]
   16a30:	4b08      	ldr	r3, [pc, #32]	; (16a54 <prvTraceGetParam+0x88>)
   16a32:	4798      	blx	r3
   16a34:	683b      	ldr	r3, [r7, #0]
   16a36:	687a      	ldr	r2, [r7, #4]
   16a38:	4013      	ands	r3, r2
   16a3a:	0018      	movs	r0, r3
   16a3c:	46bd      	mov	sp, r7
   16a3e:	b004      	add	sp, #16
   16a40:	bd80      	pop	{r7, pc}
   16a42:	46c0      	nop			; (mov r8, r8)
   16a44:	0000ffff 	.word	0x0000ffff
   16a48:	00034cc0 	.word	0x00034cc0
   16a4c:	000175f5 	.word	0x000175f5
   16a50:	000171ad 	.word	0x000171ad
   16a54:	000177b1 	.word	0x000177b1

00016a58 <prvTraceStoreKernelCallWithNumericParamOnly>:
   16a58:	b580      	push	{r7, lr}
   16a5a:	b08a      	sub	sp, #40	; 0x28
   16a5c:	af00      	add	r7, sp, #0
   16a5e:	6078      	str	r0, [r7, #4]
   16a60:	6039      	str	r1, [r7, #0]
   16a62:	2326      	movs	r3, #38	; 0x26
   16a64:	18fb      	adds	r3, r7, r3
   16a66:	2200      	movs	r2, #0
   16a68:	801a      	strh	r2, [r3, #0]
   16a6a:	687b      	ldr	r3, [r7, #4]
   16a6c:	2bfe      	cmp	r3, #254	; 0xfe
   16a6e:	d904      	bls.n	16a7a <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   16a70:	4b2d      	ldr	r3, [pc, #180]	; (16b28 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   16a72:	0018      	movs	r0, r3
   16a74:	4b2d      	ldr	r3, [pc, #180]	; (16b2c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   16a76:	4798      	blx	r3
   16a78:	e053      	b.n	16b22 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
   16a7a:	4b2d      	ldr	r3, [pc, #180]	; (16b30 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   16a7c:	681b      	ldr	r3, [r3, #0]
   16a7e:	2b00      	cmp	r3, #0
   16a80:	d004      	beq.n	16a8c <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
   16a82:	4b2c      	ldr	r3, [pc, #176]	; (16b34 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   16a84:	0018      	movs	r0, r3
   16a86:	4b29      	ldr	r3, [pc, #164]	; (16b2c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   16a88:	4798      	blx	r3
   16a8a:	e04a      	b.n	16b22 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
   16a8c:	f3ef 8310 	mrs	r3, PRIMASK
   16a90:	613b      	str	r3, [r7, #16]
   16a92:	693b      	ldr	r3, [r7, #16]
   16a94:	623b      	str	r3, [r7, #32]
   16a96:	2301      	movs	r3, #1
   16a98:	617b      	str	r3, [r7, #20]
   16a9a:	697b      	ldr	r3, [r7, #20]
   16a9c:	f383 8810 	msr	PRIMASK, r3
   16aa0:	4b23      	ldr	r3, [pc, #140]	; (16b30 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   16aa2:	681b      	ldr	r3, [r3, #0]
   16aa4:	1c5a      	adds	r2, r3, #1
   16aa6:	4b22      	ldr	r3, [pc, #136]	; (16b30 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   16aa8:	601a      	str	r2, [r3, #0]
   16aaa:	4b23      	ldr	r3, [pc, #140]	; (16b38 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   16aac:	681b      	ldr	r3, [r3, #0]
   16aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16ab0:	2b00      	cmp	r3, #0
   16ab2:	d02c      	beq.n	16b0e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   16ab4:	4b21      	ldr	r3, [pc, #132]	; (16b3c <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   16ab6:	781b      	ldrb	r3, [r3, #0]
   16ab8:	2b00      	cmp	r3, #0
   16aba:	d028      	beq.n	16b0e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   16abc:	20ff      	movs	r0, #255	; 0xff
   16abe:	4b20      	ldr	r3, [pc, #128]	; (16b40 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   16ac0:	4798      	blx	r3
   16ac2:	0003      	movs	r3, r0
   16ac4:	001a      	movs	r2, r3
   16ac6:	231f      	movs	r3, #31
   16ac8:	18fb      	adds	r3, r7, r3
   16aca:	701a      	strb	r2, [r3, #0]
   16acc:	683b      	ldr	r3, [r7, #0]
   16ace:	4a1d      	ldr	r2, [pc, #116]	; (16b44 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   16ad0:	0019      	movs	r1, r3
   16ad2:	0010      	movs	r0, r2
   16ad4:	4b1c      	ldr	r3, [pc, #112]	; (16b48 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   16ad6:	4798      	blx	r3
   16ad8:	0002      	movs	r2, r0
   16ada:	2326      	movs	r3, #38	; 0x26
   16adc:	18fb      	adds	r3, r7, r3
   16ade:	801a      	strh	r2, [r3, #0]
   16ae0:	4b1a      	ldr	r3, [pc, #104]	; (16b4c <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   16ae2:	4798      	blx	r3
   16ae4:	0003      	movs	r3, r0
   16ae6:	61bb      	str	r3, [r7, #24]
   16ae8:	69bb      	ldr	r3, [r7, #24]
   16aea:	2b00      	cmp	r3, #0
   16aec:	d00f      	beq.n	16b0e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   16aee:	69bb      	ldr	r3, [r7, #24]
   16af0:	221f      	movs	r2, #31
   16af2:	18ba      	adds	r2, r7, r2
   16af4:	7812      	ldrb	r2, [r2, #0]
   16af6:	705a      	strb	r2, [r3, #1]
   16af8:	687b      	ldr	r3, [r7, #4]
   16afa:	b2da      	uxtb	r2, r3
   16afc:	69bb      	ldr	r3, [r7, #24]
   16afe:	701a      	strb	r2, [r3, #0]
   16b00:	69bb      	ldr	r3, [r7, #24]
   16b02:	2226      	movs	r2, #38	; 0x26
   16b04:	18ba      	adds	r2, r7, r2
   16b06:	8812      	ldrh	r2, [r2, #0]
   16b08:	805a      	strh	r2, [r3, #2]
   16b0a:	4b11      	ldr	r3, [pc, #68]	; (16b50 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   16b0c:	4798      	blx	r3
   16b0e:	4b08      	ldr	r3, [pc, #32]	; (16b30 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   16b10:	681b      	ldr	r3, [r3, #0]
   16b12:	1e5a      	subs	r2, r3, #1
   16b14:	4b06      	ldr	r3, [pc, #24]	; (16b30 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   16b16:	601a      	str	r2, [r3, #0]
   16b18:	6a3b      	ldr	r3, [r7, #32]
   16b1a:	60fb      	str	r3, [r7, #12]
   16b1c:	68fb      	ldr	r3, [r7, #12]
   16b1e:	f383 8810 	msr	PRIMASK, r3
   16b22:	46bd      	mov	sp, r7
   16b24:	b00a      	add	sp, #40	; 0x28
   16b26:	bd80      	pop	{r7, pc}
   16b28:	00034cfc 	.word	0x00034cfc
   16b2c:	000175f5 	.word	0x000175f5
   16b30:	20000b8c 	.word	0x20000b8c
   16b34:	00034d54 	.word	0x00034d54
   16b38:	20000c34 	.word	0x20000c34
   16b3c:	20000b98 	.word	0x20000b98
   16b40:	00017809 	.word	0x00017809
   16b44:	0000ffff 	.word	0x0000ffff
   16b48:	000169cd 	.word	0x000169cd
   16b4c:	000171ad 	.word	0x000171ad
   16b50:	000177b1 	.word	0x000177b1

00016b54 <prvTraceStoreTaskswitch>:
   16b54:	b590      	push	{r4, r7, lr}
   16b56:	b089      	sub	sp, #36	; 0x24
   16b58:	af00      	add	r7, sp, #0
   16b5a:	0002      	movs	r2, r0
   16b5c:	1dfb      	adds	r3, r7, #7
   16b5e:	701a      	strb	r2, [r3, #0]
   16b60:	1dfb      	adds	r3, r7, #7
   16b62:	781b      	ldrb	r3, [r3, #0]
   16b64:	2b0f      	cmp	r3, #15
   16b66:	d904      	bls.n	16b72 <prvTraceStoreTaskswitch+0x1e>
   16b68:	4b34      	ldr	r3, [pc, #208]	; (16c3c <prvTraceStoreTaskswitch+0xe8>)
   16b6a:	0018      	movs	r0, r3
   16b6c:	4b34      	ldr	r3, [pc, #208]	; (16c40 <prvTraceStoreTaskswitch+0xec>)
   16b6e:	4798      	blx	r3
   16b70:	e061      	b.n	16c36 <prvTraceStoreTaskswitch+0xe2>
   16b72:	f3ef 8310 	mrs	r3, PRIMASK
   16b76:	60fb      	str	r3, [r7, #12]
   16b78:	68fb      	ldr	r3, [r7, #12]
   16b7a:	61fb      	str	r3, [r7, #28]
   16b7c:	2301      	movs	r3, #1
   16b7e:	613b      	str	r3, [r7, #16]
   16b80:	693b      	ldr	r3, [r7, #16]
   16b82:	f383 8810 	msr	PRIMASK, r3
   16b86:	4b2f      	ldr	r3, [pc, #188]	; (16c44 <prvTraceStoreTaskswitch+0xf0>)
   16b88:	681b      	ldr	r3, [r3, #0]
   16b8a:	1c5a      	adds	r2, r3, #1
   16b8c:	4b2d      	ldr	r3, [pc, #180]	; (16c44 <prvTraceStoreTaskswitch+0xf0>)
   16b8e:	601a      	str	r2, [r3, #0]
   16b90:	4b2d      	ldr	r3, [pc, #180]	; (16c48 <prvTraceStoreTaskswitch+0xf4>)
   16b92:	781b      	ldrb	r3, [r3, #0]
   16b94:	1dfa      	adds	r2, r7, #7
   16b96:	7812      	ldrb	r2, [r2, #0]
   16b98:	429a      	cmp	r2, r3
   16b9a:	d042      	beq.n	16c22 <prvTraceStoreTaskswitch+0xce>
   16b9c:	4b2b      	ldr	r3, [pc, #172]	; (16c4c <prvTraceStoreTaskswitch+0xf8>)
   16b9e:	681b      	ldr	r3, [r3, #0]
   16ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16ba2:	2b00      	cmp	r3, #0
   16ba4:	d03d      	beq.n	16c22 <prvTraceStoreTaskswitch+0xce>
   16ba6:	4b2a      	ldr	r3, [pc, #168]	; (16c50 <prvTraceStoreTaskswitch+0xfc>)
   16ba8:	2200      	movs	r2, #0
   16baa:	601a      	str	r2, [r3, #0]
   16bac:	231a      	movs	r3, #26
   16bae:	18fc      	adds	r4, r7, r3
   16bb0:	4b28      	ldr	r3, [pc, #160]	; (16c54 <prvTraceStoreTaskswitch+0x100>)
   16bb2:	0018      	movs	r0, r3
   16bb4:	4b28      	ldr	r3, [pc, #160]	; (16c58 <prvTraceStoreTaskswitch+0x104>)
   16bb6:	4798      	blx	r3
   16bb8:	0003      	movs	r3, r0
   16bba:	8023      	strh	r3, [r4, #0]
   16bbc:	4b22      	ldr	r3, [pc, #136]	; (16c48 <prvTraceStoreTaskswitch+0xf4>)
   16bbe:	1dfa      	adds	r2, r7, #7
   16bc0:	7812      	ldrb	r2, [r2, #0]
   16bc2:	701a      	strb	r2, [r3, #0]
   16bc4:	2319      	movs	r3, #25
   16bc6:	18fb      	adds	r3, r7, r3
   16bc8:	4a1f      	ldr	r2, [pc, #124]	; (16c48 <prvTraceStoreTaskswitch+0xf4>)
   16bca:	7812      	ldrb	r2, [r2, #0]
   16bcc:	701a      	strb	r2, [r3, #0]
   16bce:	4b23      	ldr	r3, [pc, #140]	; (16c5c <prvTraceStoreTaskswitch+0x108>)
   16bd0:	4798      	blx	r3
   16bd2:	0003      	movs	r3, r0
   16bd4:	617b      	str	r3, [r7, #20]
   16bd6:	697b      	ldr	r3, [r7, #20]
   16bd8:	2b00      	cmp	r3, #0
   16bda:	d022      	beq.n	16c22 <prvTraceStoreTaskswitch+0xce>
   16bdc:	4b1a      	ldr	r3, [pc, #104]	; (16c48 <prvTraceStoreTaskswitch+0xf4>)
   16bde:	781b      	ldrb	r3, [r3, #0]
   16be0:	0019      	movs	r1, r3
   16be2:	2003      	movs	r0, #3
   16be4:	4b1e      	ldr	r3, [pc, #120]	; (16c60 <prvTraceStoreTaskswitch+0x10c>)
   16be6:	4798      	blx	r3
   16be8:	0003      	movs	r3, r0
   16bea:	2b01      	cmp	r3, #1
   16bec:	d103      	bne.n	16bf6 <prvTraceStoreTaskswitch+0xa2>
   16bee:	697b      	ldr	r3, [r7, #20]
   16bf0:	2207      	movs	r2, #7
   16bf2:	701a      	strb	r2, [r3, #0]
   16bf4:	e002      	b.n	16bfc <prvTraceStoreTaskswitch+0xa8>
   16bf6:	697b      	ldr	r3, [r7, #20]
   16bf8:	2206      	movs	r2, #6
   16bfa:	701a      	strb	r2, [r3, #0]
   16bfc:	697b      	ldr	r3, [r7, #20]
   16bfe:	221a      	movs	r2, #26
   16c00:	18ba      	adds	r2, r7, r2
   16c02:	8812      	ldrh	r2, [r2, #0]
   16c04:	805a      	strh	r2, [r3, #2]
   16c06:	697b      	ldr	r3, [r7, #20]
   16c08:	2219      	movs	r2, #25
   16c0a:	18ba      	adds	r2, r7, r2
   16c0c:	7812      	ldrb	r2, [r2, #0]
   16c0e:	705a      	strb	r2, [r3, #1]
   16c10:	4b0d      	ldr	r3, [pc, #52]	; (16c48 <prvTraceStoreTaskswitch+0xf4>)
   16c12:	781b      	ldrb	r3, [r3, #0]
   16c14:	2201      	movs	r2, #1
   16c16:	0019      	movs	r1, r3
   16c18:	2003      	movs	r0, #3
   16c1a:	4b12      	ldr	r3, [pc, #72]	; (16c64 <prvTraceStoreTaskswitch+0x110>)
   16c1c:	4798      	blx	r3
   16c1e:	4b12      	ldr	r3, [pc, #72]	; (16c68 <prvTraceStoreTaskswitch+0x114>)
   16c20:	4798      	blx	r3
   16c22:	4b08      	ldr	r3, [pc, #32]	; (16c44 <prvTraceStoreTaskswitch+0xf0>)
   16c24:	681b      	ldr	r3, [r3, #0]
   16c26:	1e5a      	subs	r2, r3, #1
   16c28:	4b06      	ldr	r3, [pc, #24]	; (16c44 <prvTraceStoreTaskswitch+0xf0>)
   16c2a:	601a      	str	r2, [r3, #0]
   16c2c:	69fb      	ldr	r3, [r7, #28]
   16c2e:	60bb      	str	r3, [r7, #8]
   16c30:	68bb      	ldr	r3, [r7, #8]
   16c32:	f383 8810 	msr	PRIMASK, r3
   16c36:	46bd      	mov	sp, r7
   16c38:	b009      	add	sp, #36	; 0x24
   16c3a:	bd90      	pop	{r4, r7, pc}
   16c3c:	00034d8c 	.word	0x00034d8c
   16c40:	000175f5 	.word	0x000175f5
   16c44:	20000b8c 	.word	0x20000b8c
   16c48:	20000b98 	.word	0x20000b98
   16c4c:	20000c34 	.word	0x20000c34
   16c50:	20000b78 	.word	0x20000b78
   16c54:	0000ffff 	.word	0x0000ffff
   16c58:	00017809 	.word	0x00017809
   16c5c:	000171ad 	.word	0x000171ad
   16c60:	00016e51 	.word	0x00016e51
   16c64:	00016dad 	.word	0x00016dad
   16c68:	000177b1 	.word	0x000177b1

00016c6c <prvTraceSetPriorityProperty>:
   16c6c:	b590      	push	{r4, r7, lr}
   16c6e:	b083      	sub	sp, #12
   16c70:	af00      	add	r7, sp, #0
   16c72:	0004      	movs	r4, r0
   16c74:	0008      	movs	r0, r1
   16c76:	0011      	movs	r1, r2
   16c78:	1dfb      	adds	r3, r7, #7
   16c7a:	1c22      	adds	r2, r4, #0
   16c7c:	701a      	strb	r2, [r3, #0]
   16c7e:	1dbb      	adds	r3, r7, #6
   16c80:	1c02      	adds	r2, r0, #0
   16c82:	701a      	strb	r2, [r3, #0]
   16c84:	1d7b      	adds	r3, r7, #5
   16c86:	1c0a      	adds	r2, r1, #0
   16c88:	701a      	strb	r2, [r3, #0]
   16c8a:	1dfb      	adds	r3, r7, #7
   16c8c:	781b      	ldrb	r3, [r3, #0]
   16c8e:	2b08      	cmp	r3, #8
   16c90:	d904      	bls.n	16c9c <prvTraceSetPriorityProperty+0x30>
   16c92:	4b1a      	ldr	r3, [pc, #104]	; (16cfc <prvTraceSetPriorityProperty+0x90>)
   16c94:	0018      	movs	r0, r3
   16c96:	4b1a      	ldr	r3, [pc, #104]	; (16d00 <prvTraceSetPriorityProperty+0x94>)
   16c98:	4798      	blx	r3
   16c9a:	e02c      	b.n	16cf6 <prvTraceSetPriorityProperty+0x8a>
   16c9c:	4b19      	ldr	r3, [pc, #100]	; (16d04 <prvTraceSetPriorityProperty+0x98>)
   16c9e:	681a      	ldr	r2, [r3, #0]
   16ca0:	1dfb      	adds	r3, r7, #7
   16ca2:	781b      	ldrb	r3, [r3, #0]
   16ca4:	2164      	movs	r1, #100	; 0x64
   16ca6:	18d3      	adds	r3, r2, r3
   16ca8:	185b      	adds	r3, r3, r1
   16caa:	781b      	ldrb	r3, [r3, #0]
   16cac:	1dba      	adds	r2, r7, #6
   16cae:	7812      	ldrb	r2, [r2, #0]
   16cb0:	429a      	cmp	r2, r3
   16cb2:	d904      	bls.n	16cbe <prvTraceSetPriorityProperty+0x52>
   16cb4:	4b14      	ldr	r3, [pc, #80]	; (16d08 <prvTraceSetPriorityProperty+0x9c>)
   16cb6:	0018      	movs	r0, r3
   16cb8:	4b11      	ldr	r3, [pc, #68]	; (16d00 <prvTraceSetPriorityProperty+0x94>)
   16cba:	4798      	blx	r3
   16cbc:	e01b      	b.n	16cf6 <prvTraceSetPriorityProperty+0x8a>
   16cbe:	4b11      	ldr	r3, [pc, #68]	; (16d04 <prvTraceSetPriorityProperty+0x98>)
   16cc0:	681c      	ldr	r4, [r3, #0]
   16cc2:	1dfb      	adds	r3, r7, #7
   16cc4:	781a      	ldrb	r2, [r3, #0]
   16cc6:	1dbb      	adds	r3, r7, #6
   16cc8:	781b      	ldrb	r3, [r3, #0]
   16cca:	0011      	movs	r1, r2
   16ccc:	0018      	movs	r0, r3
   16cce:	4b0f      	ldr	r3, [pc, #60]	; (16d0c <prvTraceSetPriorityProperty+0xa0>)
   16cd0:	4798      	blx	r3
   16cd2:	0003      	movs	r3, r0
   16cd4:	0018      	movs	r0, r3
   16cd6:	4b0b      	ldr	r3, [pc, #44]	; (16d04 <prvTraceSetPriorityProperty+0x98>)
   16cd8:	681a      	ldr	r2, [r3, #0]
   16cda:	1dfb      	adds	r3, r7, #7
   16cdc:	781b      	ldrb	r3, [r3, #0]
   16cde:	2170      	movs	r1, #112	; 0x70
   16ce0:	18d3      	adds	r3, r2, r3
   16ce2:	185b      	adds	r3, r3, r1
   16ce4:	781b      	ldrb	r3, [r3, #0]
   16ce6:	18c3      	adds	r3, r0, r3
   16ce8:	3301      	adds	r3, #1
   16cea:	229c      	movs	r2, #156	; 0x9c
   16cec:	18e3      	adds	r3, r4, r3
   16cee:	189b      	adds	r3, r3, r2
   16cf0:	1d7a      	adds	r2, r7, #5
   16cf2:	7812      	ldrb	r2, [r2, #0]
   16cf4:	701a      	strb	r2, [r3, #0]
   16cf6:	46bd      	mov	sp, r7
   16cf8:	b003      	add	sp, #12
   16cfa:	bd90      	pop	{r4, r7, pc}
   16cfc:	00034f20 	.word	0x00034f20
   16d00:	000175f5 	.word	0x000175f5
   16d04:	20000c34 	.word	0x20000c34
   16d08:	00034f6c 	.word	0x00034f6c
   16d0c:	00017201 	.word	0x00017201

00016d10 <prvTraceGetPriorityProperty>:
   16d10:	b590      	push	{r4, r7, lr}
   16d12:	b083      	sub	sp, #12
   16d14:	af00      	add	r7, sp, #0
   16d16:	0002      	movs	r2, r0
   16d18:	1dfb      	adds	r3, r7, #7
   16d1a:	701a      	strb	r2, [r3, #0]
   16d1c:	1dbb      	adds	r3, r7, #6
   16d1e:	1c0a      	adds	r2, r1, #0
   16d20:	701a      	strb	r2, [r3, #0]
   16d22:	1dfb      	adds	r3, r7, #7
   16d24:	781b      	ldrb	r3, [r3, #0]
   16d26:	2b08      	cmp	r3, #8
   16d28:	d905      	bls.n	16d36 <prvTraceGetPriorityProperty+0x26>
   16d2a:	4b1b      	ldr	r3, [pc, #108]	; (16d98 <prvTraceGetPriorityProperty+0x88>)
   16d2c:	0018      	movs	r0, r3
   16d2e:	4b1b      	ldr	r3, [pc, #108]	; (16d9c <prvTraceGetPriorityProperty+0x8c>)
   16d30:	4798      	blx	r3
   16d32:	2300      	movs	r3, #0
   16d34:	e02b      	b.n	16d8e <prvTraceGetPriorityProperty+0x7e>
   16d36:	4b1a      	ldr	r3, [pc, #104]	; (16da0 <prvTraceGetPriorityProperty+0x90>)
   16d38:	681a      	ldr	r2, [r3, #0]
   16d3a:	1dfb      	adds	r3, r7, #7
   16d3c:	781b      	ldrb	r3, [r3, #0]
   16d3e:	2164      	movs	r1, #100	; 0x64
   16d40:	18d3      	adds	r3, r2, r3
   16d42:	185b      	adds	r3, r3, r1
   16d44:	781b      	ldrb	r3, [r3, #0]
   16d46:	1dba      	adds	r2, r7, #6
   16d48:	7812      	ldrb	r2, [r2, #0]
   16d4a:	429a      	cmp	r2, r3
   16d4c:	d905      	bls.n	16d5a <prvTraceGetPriorityProperty+0x4a>
   16d4e:	4b15      	ldr	r3, [pc, #84]	; (16da4 <prvTraceGetPriorityProperty+0x94>)
   16d50:	0018      	movs	r0, r3
   16d52:	4b12      	ldr	r3, [pc, #72]	; (16d9c <prvTraceGetPriorityProperty+0x8c>)
   16d54:	4798      	blx	r3
   16d56:	2300      	movs	r3, #0
   16d58:	e019      	b.n	16d8e <prvTraceGetPriorityProperty+0x7e>
   16d5a:	4b11      	ldr	r3, [pc, #68]	; (16da0 <prvTraceGetPriorityProperty+0x90>)
   16d5c:	681c      	ldr	r4, [r3, #0]
   16d5e:	1dfb      	adds	r3, r7, #7
   16d60:	781a      	ldrb	r2, [r3, #0]
   16d62:	1dbb      	adds	r3, r7, #6
   16d64:	781b      	ldrb	r3, [r3, #0]
   16d66:	0011      	movs	r1, r2
   16d68:	0018      	movs	r0, r3
   16d6a:	4b0f      	ldr	r3, [pc, #60]	; (16da8 <prvTraceGetPriorityProperty+0x98>)
   16d6c:	4798      	blx	r3
   16d6e:	0003      	movs	r3, r0
   16d70:	0018      	movs	r0, r3
   16d72:	4b0b      	ldr	r3, [pc, #44]	; (16da0 <prvTraceGetPriorityProperty+0x90>)
   16d74:	681a      	ldr	r2, [r3, #0]
   16d76:	1dfb      	adds	r3, r7, #7
   16d78:	781b      	ldrb	r3, [r3, #0]
   16d7a:	2170      	movs	r1, #112	; 0x70
   16d7c:	18d3      	adds	r3, r2, r3
   16d7e:	185b      	adds	r3, r3, r1
   16d80:	781b      	ldrb	r3, [r3, #0]
   16d82:	18c3      	adds	r3, r0, r3
   16d84:	3301      	adds	r3, #1
   16d86:	229c      	movs	r2, #156	; 0x9c
   16d88:	18e3      	adds	r3, r4, r3
   16d8a:	189b      	adds	r3, r3, r2
   16d8c:	781b      	ldrb	r3, [r3, #0]
   16d8e:	0018      	movs	r0, r3
   16d90:	46bd      	mov	sp, r7
   16d92:	b003      	add	sp, #12
   16d94:	bd90      	pop	{r4, r7, pc}
   16d96:	46c0      	nop			; (mov r8, r8)
   16d98:	00034fac 	.word	0x00034fac
   16d9c:	000175f5 	.word	0x000175f5
   16da0:	20000c34 	.word	0x20000c34
   16da4:	00034ff8 	.word	0x00034ff8
   16da8:	00017201 	.word	0x00017201

00016dac <prvTraceSetObjectState>:
   16dac:	b590      	push	{r4, r7, lr}
   16dae:	b083      	sub	sp, #12
   16db0:	af00      	add	r7, sp, #0
   16db2:	0004      	movs	r4, r0
   16db4:	0008      	movs	r0, r1
   16db6:	0011      	movs	r1, r2
   16db8:	1dfb      	adds	r3, r7, #7
   16dba:	1c22      	adds	r2, r4, #0
   16dbc:	701a      	strb	r2, [r3, #0]
   16dbe:	1dbb      	adds	r3, r7, #6
   16dc0:	1c02      	adds	r2, r0, #0
   16dc2:	701a      	strb	r2, [r3, #0]
   16dc4:	1d7b      	adds	r3, r7, #5
   16dc6:	1c0a      	adds	r2, r1, #0
   16dc8:	701a      	strb	r2, [r3, #0]
   16dca:	1dfb      	adds	r3, r7, #7
   16dcc:	781b      	ldrb	r3, [r3, #0]
   16dce:	2b08      	cmp	r3, #8
   16dd0:	d904      	bls.n	16ddc <prvTraceSetObjectState+0x30>
   16dd2:	4b1a      	ldr	r3, [pc, #104]	; (16e3c <prvTraceSetObjectState+0x90>)
   16dd4:	0018      	movs	r0, r3
   16dd6:	4b1a      	ldr	r3, [pc, #104]	; (16e40 <prvTraceSetObjectState+0x94>)
   16dd8:	4798      	blx	r3
   16dda:	e02b      	b.n	16e34 <prvTraceSetObjectState+0x88>
   16ddc:	4b19      	ldr	r3, [pc, #100]	; (16e44 <prvTraceSetObjectState+0x98>)
   16dde:	681a      	ldr	r2, [r3, #0]
   16de0:	1dfb      	adds	r3, r7, #7
   16de2:	781b      	ldrb	r3, [r3, #0]
   16de4:	2164      	movs	r1, #100	; 0x64
   16de6:	18d3      	adds	r3, r2, r3
   16de8:	185b      	adds	r3, r3, r1
   16dea:	781b      	ldrb	r3, [r3, #0]
   16dec:	1dba      	adds	r2, r7, #6
   16dee:	7812      	ldrb	r2, [r2, #0]
   16df0:	429a      	cmp	r2, r3
   16df2:	d904      	bls.n	16dfe <prvTraceSetObjectState+0x52>
   16df4:	4b14      	ldr	r3, [pc, #80]	; (16e48 <prvTraceSetObjectState+0x9c>)
   16df6:	0018      	movs	r0, r3
   16df8:	4b11      	ldr	r3, [pc, #68]	; (16e40 <prvTraceSetObjectState+0x94>)
   16dfa:	4798      	blx	r3
   16dfc:	e01a      	b.n	16e34 <prvTraceSetObjectState+0x88>
   16dfe:	4b11      	ldr	r3, [pc, #68]	; (16e44 <prvTraceSetObjectState+0x98>)
   16e00:	681c      	ldr	r4, [r3, #0]
   16e02:	1dfb      	adds	r3, r7, #7
   16e04:	781a      	ldrb	r2, [r3, #0]
   16e06:	1dbb      	adds	r3, r7, #6
   16e08:	781b      	ldrb	r3, [r3, #0]
   16e0a:	0011      	movs	r1, r2
   16e0c:	0018      	movs	r0, r3
   16e0e:	4b0f      	ldr	r3, [pc, #60]	; (16e4c <prvTraceSetObjectState+0xa0>)
   16e10:	4798      	blx	r3
   16e12:	0003      	movs	r3, r0
   16e14:	0018      	movs	r0, r3
   16e16:	4b0b      	ldr	r3, [pc, #44]	; (16e44 <prvTraceSetObjectState+0x98>)
   16e18:	681a      	ldr	r2, [r3, #0]
   16e1a:	1dfb      	adds	r3, r7, #7
   16e1c:	781b      	ldrb	r3, [r3, #0]
   16e1e:	2170      	movs	r1, #112	; 0x70
   16e20:	18d3      	adds	r3, r2, r3
   16e22:	185b      	adds	r3, r3, r1
   16e24:	781b      	ldrb	r3, [r3, #0]
   16e26:	18c3      	adds	r3, r0, r3
   16e28:	229c      	movs	r2, #156	; 0x9c
   16e2a:	18e3      	adds	r3, r4, r3
   16e2c:	189b      	adds	r3, r3, r2
   16e2e:	1d7a      	adds	r2, r7, #5
   16e30:	7812      	ldrb	r2, [r2, #0]
   16e32:	701a      	strb	r2, [r3, #0]
   16e34:	46bd      	mov	sp, r7
   16e36:	b003      	add	sp, #12
   16e38:	bd90      	pop	{r4, r7, pc}
   16e3a:	46c0      	nop			; (mov r8, r8)
   16e3c:	00035038 	.word	0x00035038
   16e40:	000175f5 	.word	0x000175f5
   16e44:	20000c34 	.word	0x20000c34
   16e48:	0003507c 	.word	0x0003507c
   16e4c:	00017201 	.word	0x00017201

00016e50 <prvTraceGetObjectState>:
   16e50:	b590      	push	{r4, r7, lr}
   16e52:	b083      	sub	sp, #12
   16e54:	af00      	add	r7, sp, #0
   16e56:	0002      	movs	r2, r0
   16e58:	1dfb      	adds	r3, r7, #7
   16e5a:	701a      	strb	r2, [r3, #0]
   16e5c:	1dbb      	adds	r3, r7, #6
   16e5e:	1c0a      	adds	r2, r1, #0
   16e60:	701a      	strb	r2, [r3, #0]
   16e62:	1dfb      	adds	r3, r7, #7
   16e64:	781b      	ldrb	r3, [r3, #0]
   16e66:	2b08      	cmp	r3, #8
   16e68:	d905      	bls.n	16e76 <prvTraceGetObjectState+0x26>
   16e6a:	4b1a      	ldr	r3, [pc, #104]	; (16ed4 <prvTraceGetObjectState+0x84>)
   16e6c:	0018      	movs	r0, r3
   16e6e:	4b1a      	ldr	r3, [pc, #104]	; (16ed8 <prvTraceGetObjectState+0x88>)
   16e70:	4798      	blx	r3
   16e72:	2300      	movs	r3, #0
   16e74:	e02a      	b.n	16ecc <prvTraceGetObjectState+0x7c>
   16e76:	4b19      	ldr	r3, [pc, #100]	; (16edc <prvTraceGetObjectState+0x8c>)
   16e78:	681a      	ldr	r2, [r3, #0]
   16e7a:	1dfb      	adds	r3, r7, #7
   16e7c:	781b      	ldrb	r3, [r3, #0]
   16e7e:	2164      	movs	r1, #100	; 0x64
   16e80:	18d3      	adds	r3, r2, r3
   16e82:	185b      	adds	r3, r3, r1
   16e84:	781b      	ldrb	r3, [r3, #0]
   16e86:	1dba      	adds	r2, r7, #6
   16e88:	7812      	ldrb	r2, [r2, #0]
   16e8a:	429a      	cmp	r2, r3
   16e8c:	d905      	bls.n	16e9a <prvTraceGetObjectState+0x4a>
   16e8e:	4b14      	ldr	r3, [pc, #80]	; (16ee0 <prvTraceGetObjectState+0x90>)
   16e90:	0018      	movs	r0, r3
   16e92:	4b11      	ldr	r3, [pc, #68]	; (16ed8 <prvTraceGetObjectState+0x88>)
   16e94:	4798      	blx	r3
   16e96:	2300      	movs	r3, #0
   16e98:	e018      	b.n	16ecc <prvTraceGetObjectState+0x7c>
   16e9a:	4b10      	ldr	r3, [pc, #64]	; (16edc <prvTraceGetObjectState+0x8c>)
   16e9c:	681c      	ldr	r4, [r3, #0]
   16e9e:	1dfb      	adds	r3, r7, #7
   16ea0:	781a      	ldrb	r2, [r3, #0]
   16ea2:	1dbb      	adds	r3, r7, #6
   16ea4:	781b      	ldrb	r3, [r3, #0]
   16ea6:	0011      	movs	r1, r2
   16ea8:	0018      	movs	r0, r3
   16eaa:	4b0e      	ldr	r3, [pc, #56]	; (16ee4 <prvTraceGetObjectState+0x94>)
   16eac:	4798      	blx	r3
   16eae:	0003      	movs	r3, r0
   16eb0:	0018      	movs	r0, r3
   16eb2:	4b0a      	ldr	r3, [pc, #40]	; (16edc <prvTraceGetObjectState+0x8c>)
   16eb4:	681a      	ldr	r2, [r3, #0]
   16eb6:	1dfb      	adds	r3, r7, #7
   16eb8:	781b      	ldrb	r3, [r3, #0]
   16eba:	2170      	movs	r1, #112	; 0x70
   16ebc:	18d3      	adds	r3, r2, r3
   16ebe:	185b      	adds	r3, r3, r1
   16ec0:	781b      	ldrb	r3, [r3, #0]
   16ec2:	18c3      	adds	r3, r0, r3
   16ec4:	229c      	movs	r2, #156	; 0x9c
   16ec6:	18e3      	adds	r3, r4, r3
   16ec8:	189b      	adds	r3, r3, r2
   16eca:	781b      	ldrb	r3, [r3, #0]
   16ecc:	0018      	movs	r0, r3
   16ece:	46bd      	mov	sp, r7
   16ed0:	b003      	add	sp, #12
   16ed2:	bd90      	pop	{r4, r7, pc}
   16ed4:	000350b8 	.word	0x000350b8
   16ed8:	000175f5 	.word	0x000175f5
   16edc:	20000c34 	.word	0x20000c34
   16ee0:	000350fc 	.word	0x000350fc
   16ee4:	00017201 	.word	0x00017201

00016ee8 <prvTraceSetTaskInstanceFinished>:
   16ee8:	b590      	push	{r4, r7, lr}
   16eea:	b083      	sub	sp, #12
   16eec:	af00      	add	r7, sp, #0
   16eee:	0002      	movs	r2, r0
   16ef0:	1dfb      	adds	r3, r7, #7
   16ef2:	701a      	strb	r2, [r3, #0]
   16ef4:	4b11      	ldr	r3, [pc, #68]	; (16f3c <prvTraceSetTaskInstanceFinished+0x54>)
   16ef6:	681b      	ldr	r3, [r3, #0]
   16ef8:	2267      	movs	r2, #103	; 0x67
   16efa:	5c9b      	ldrb	r3, [r3, r2]
   16efc:	1dfa      	adds	r2, r7, #7
   16efe:	7812      	ldrb	r2, [r2, #0]
   16f00:	429a      	cmp	r2, r3
   16f02:	d904      	bls.n	16f0e <prvTraceSetTaskInstanceFinished+0x26>
   16f04:	4b0e      	ldr	r3, [pc, #56]	; (16f40 <prvTraceSetTaskInstanceFinished+0x58>)
   16f06:	0018      	movs	r0, r3
   16f08:	4b0e      	ldr	r3, [pc, #56]	; (16f44 <prvTraceSetTaskInstanceFinished+0x5c>)
   16f0a:	4798      	blx	r3
   16f0c:	e013      	b.n	16f36 <prvTraceSetTaskInstanceFinished+0x4e>
   16f0e:	4b0b      	ldr	r3, [pc, #44]	; (16f3c <prvTraceSetTaskInstanceFinished+0x54>)
   16f10:	681c      	ldr	r4, [r3, #0]
   16f12:	1dfb      	adds	r3, r7, #7
   16f14:	781b      	ldrb	r3, [r3, #0]
   16f16:	2103      	movs	r1, #3
   16f18:	0018      	movs	r0, r3
   16f1a:	4b0b      	ldr	r3, [pc, #44]	; (16f48 <prvTraceSetTaskInstanceFinished+0x60>)
   16f1c:	4798      	blx	r3
   16f1e:	0003      	movs	r3, r0
   16f20:	0019      	movs	r1, r3
   16f22:	4b06      	ldr	r3, [pc, #24]	; (16f3c <prvTraceSetTaskInstanceFinished+0x54>)
   16f24:	681b      	ldr	r3, [r3, #0]
   16f26:	2273      	movs	r2, #115	; 0x73
   16f28:	5c9b      	ldrb	r3, [r3, r2]
   16f2a:	18cb      	adds	r3, r1, r3
   16f2c:	229c      	movs	r2, #156	; 0x9c
   16f2e:	18e3      	adds	r3, r4, r3
   16f30:	189b      	adds	r3, r3, r2
   16f32:	2200      	movs	r2, #0
   16f34:	701a      	strb	r2, [r3, #0]
   16f36:	46bd      	mov	sp, r7
   16f38:	b003      	add	sp, #12
   16f3a:	bd90      	pop	{r4, r7, pc}
   16f3c:	20000c34 	.word	0x20000c34
   16f40:	00035138 	.word	0x00035138
   16f44:	000175f5 	.word	0x000175f5
   16f48:	00017201 	.word	0x00017201

00016f4c <prvTraceInitTraceData>:
   16f4c:	b580      	push	{r7, lr}
   16f4e:	af00      	add	r7, sp, #0
   16f50:	4b75      	ldr	r3, [pc, #468]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16f52:	681b      	ldr	r3, [r3, #0]
   16f54:	2b00      	cmp	r3, #0
   16f56:	d103      	bne.n	16f60 <prvTraceInitTraceData+0x14>
   16f58:	4b73      	ldr	r3, [pc, #460]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16f5a:	4a74      	ldr	r2, [pc, #464]	; (1712c <prvTraceInitTraceData+0x1e0>)
   16f5c:	601a      	str	r2, [r3, #0]
   16f5e:	e006      	b.n	16f6e <prvTraceInitTraceData+0x22>
   16f60:	4b71      	ldr	r3, [pc, #452]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16f62:	681b      	ldr	r3, [r3, #0]
   16f64:	781b      	ldrb	r3, [r3, #0]
   16f66:	b2db      	uxtb	r3, r3
   16f68:	2b01      	cmp	r3, #1
   16f6a:	d100      	bne.n	16f6e <prvTraceInitTraceData+0x22>
   16f6c:	e0d8      	b.n	17120 <prvTraceInitTraceData+0x1d4>
   16f6e:	4b70      	ldr	r3, [pc, #448]	; (17130 <prvTraceInitTraceData+0x1e4>)
   16f70:	681a      	ldr	r2, [r3, #0]
   16f72:	4b70      	ldr	r3, [pc, #448]	; (17134 <prvTraceInitTraceData+0x1e8>)
   16f74:	601a      	str	r2, [r3, #0]
   16f76:	4b6c      	ldr	r3, [pc, #432]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16f78:	6818      	ldr	r0, [r3, #0]
   16f7a:	23bd      	movs	r3, #189	; 0xbd
   16f7c:	011b      	lsls	r3, r3, #4
   16f7e:	001a      	movs	r2, r3
   16f80:	2100      	movs	r1, #0
   16f82:	4b6d      	ldr	r3, [pc, #436]	; (17138 <prvTraceInitTraceData+0x1ec>)
   16f84:	4798      	blx	r3
   16f86:	4b68      	ldr	r3, [pc, #416]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16f88:	681b      	ldr	r3, [r3, #0]
   16f8a:	4a6c      	ldr	r2, [pc, #432]	; (1713c <prvTraceInitTraceData+0x1f0>)
   16f8c:	819a      	strh	r2, [r3, #12]
   16f8e:	4b66      	ldr	r3, [pc, #408]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16f90:	681b      	ldr	r3, [r3, #0]
   16f92:	2205      	movs	r2, #5
   16f94:	739a      	strb	r2, [r3, #14]
   16f96:	4b64      	ldr	r3, [pc, #400]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16f98:	681b      	ldr	r3, [r3, #0]
   16f9a:	2200      	movs	r2, #0
   16f9c:	73da      	strb	r2, [r3, #15]
   16f9e:	4b62      	ldr	r3, [pc, #392]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16fa0:	681b      	ldr	r3, [r3, #0]
   16fa2:	22bd      	movs	r2, #189	; 0xbd
   16fa4:	0112      	lsls	r2, r2, #4
   16fa6:	611a      	str	r2, [r3, #16]
   16fa8:	4b5f      	ldr	r3, [pc, #380]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16faa:	681b      	ldr	r3, [r3, #0]
   16fac:	2296      	movs	r2, #150	; 0x96
   16fae:	0052      	lsls	r2, r2, #1
   16fb0:	619a      	str	r2, [r3, #24]
   16fb2:	4b5d      	ldr	r3, [pc, #372]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16fb4:	681b      	ldr	r3, [r3, #0]
   16fb6:	4a62      	ldr	r2, [pc, #392]	; (17140 <prvTraceInitTraceData+0x1f4>)
   16fb8:	655a      	str	r2, [r3, #84]	; 0x54
   16fba:	4b5b      	ldr	r3, [pc, #364]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16fbc:	681b      	ldr	r3, [r3, #0]
   16fbe:	2200      	movs	r2, #0
   16fc0:	659a      	str	r2, [r3, #88]	; 0x58
   16fc2:	4b59      	ldr	r3, [pc, #356]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16fc4:	681b      	ldr	r3, [r3, #0]
   16fc6:	2200      	movs	r2, #0
   16fc8:	635a      	str	r2, [r3, #52]	; 0x34
   16fca:	4b5e      	ldr	r3, [pc, #376]	; (17144 <prvTraceInitTraceData+0x1f8>)
   16fcc:	4798      	blx	r3
   16fce:	4b56      	ldr	r3, [pc, #344]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16fd0:	681b      	ldr	r3, [r3, #0]
   16fd2:	4a5d      	ldr	r2, [pc, #372]	; (17148 <prvTraceInitTraceData+0x1fc>)
   16fd4:	495d      	ldr	r1, [pc, #372]	; (1714c <prvTraceInitTraceData+0x200>)
   16fd6:	5099      	str	r1, [r3, r2]
   16fd8:	4b53      	ldr	r3, [pc, #332]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16fda:	681a      	ldr	r2, [r3, #0]
   16fdc:	23ac      	movs	r3, #172	; 0xac
   16fde:	00db      	lsls	r3, r3, #3
   16fe0:	21c8      	movs	r1, #200	; 0xc8
   16fe2:	50d1      	str	r1, [r2, r3]
   16fe4:	4b50      	ldr	r3, [pc, #320]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16fe6:	681b      	ldr	r3, [r3, #0]
   16fe8:	4a59      	ldr	r2, [pc, #356]	; (17150 <prvTraceInitTraceData+0x204>)
   16fea:	2101      	movs	r1, #1
   16fec:	5099      	str	r1, [r3, r2]
   16fee:	4b4e      	ldr	r3, [pc, #312]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16ff0:	681a      	ldr	r2, [r3, #0]
   16ff2:	23d7      	movs	r3, #215	; 0xd7
   16ff4:	00db      	lsls	r3, r3, #3
   16ff6:	4957      	ldr	r1, [pc, #348]	; (17154 <prvTraceInitTraceData+0x208>)
   16ff8:	50d1      	str	r1, [r2, r3]
   16ffa:	4b4b      	ldr	r3, [pc, #300]	; (17128 <prvTraceInitTraceData+0x1dc>)
   16ffc:	681b      	ldr	r3, [r3, #0]
   16ffe:	4a56      	ldr	r2, [pc, #344]	; (17158 <prvTraceInitTraceData+0x20c>)
   17000:	4694      	mov	ip, r2
   17002:	4463      	add	r3, ip
   17004:	4955      	ldr	r1, [pc, #340]	; (1715c <prvTraceInitTraceData+0x210>)
   17006:	2250      	movs	r2, #80	; 0x50
   17008:	0018      	movs	r0, r3
   1700a:	4b55      	ldr	r3, [pc, #340]	; (17160 <prvTraceInitTraceData+0x214>)
   1700c:	4798      	blx	r3
   1700e:	4b46      	ldr	r3, [pc, #280]	; (17128 <prvTraceInitTraceData+0x1dc>)
   17010:	681b      	ldr	r3, [r3, #0]
   17012:	4a54      	ldr	r2, [pc, #336]	; (17164 <prvTraceInitTraceData+0x218>)
   17014:	4954      	ldr	r1, [pc, #336]	; (17168 <prvTraceInitTraceData+0x21c>)
   17016:	5099      	str	r1, [r3, r2]
   17018:	4b43      	ldr	r3, [pc, #268]	; (17128 <prvTraceInitTraceData+0x1dc>)
   1701a:	681b      	ldr	r3, [r3, #0]
   1701c:	4a53      	ldr	r2, [pc, #332]	; (1716c <prvTraceInitTraceData+0x220>)
   1701e:	210a      	movs	r1, #10
   17020:	5499      	strb	r1, [r3, r2]
   17022:	4b41      	ldr	r3, [pc, #260]	; (17128 <prvTraceInitTraceData+0x1dc>)
   17024:	681b      	ldr	r3, [r3, #0]
   17026:	4a52      	ldr	r2, [pc, #328]	; (17170 <prvTraceInitTraceData+0x224>)
   17028:	210b      	movs	r1, #11
   1702a:	5499      	strb	r1, [r3, r2]
   1702c:	4b3e      	ldr	r3, [pc, #248]	; (17128 <prvTraceInitTraceData+0x1dc>)
   1702e:	681b      	ldr	r3, [r3, #0]
   17030:	4a50      	ldr	r2, [pc, #320]	; (17174 <prvTraceInitTraceData+0x228>)
   17032:	210c      	movs	r1, #12
   17034:	5499      	strb	r1, [r3, r2]
   17036:	4b3c      	ldr	r3, [pc, #240]	; (17128 <prvTraceInitTraceData+0x1dc>)
   17038:	681b      	ldr	r3, [r3, #0]
   1703a:	4a4f      	ldr	r2, [pc, #316]	; (17178 <prvTraceInitTraceData+0x22c>)
   1703c:	210d      	movs	r1, #13
   1703e:	5499      	strb	r1, [r3, r2]
   17040:	4b39      	ldr	r3, [pc, #228]	; (17128 <prvTraceInitTraceData+0x1dc>)
   17042:	681b      	ldr	r3, [r3, #0]
   17044:	4a4d      	ldr	r2, [pc, #308]	; (1717c <prvTraceInitTraceData+0x230>)
   17046:	2171      	movs	r1, #113	; 0x71
   17048:	5499      	strb	r1, [r3, r2]
   1704a:	4b37      	ldr	r3, [pc, #220]	; (17128 <prvTraceInitTraceData+0x1dc>)
   1704c:	681b      	ldr	r3, [r3, #0]
   1704e:	4a4c      	ldr	r2, [pc, #304]	; (17180 <prvTraceInitTraceData+0x234>)
   17050:	2172      	movs	r1, #114	; 0x72
   17052:	5499      	strb	r1, [r3, r2]
   17054:	4b34      	ldr	r3, [pc, #208]	; (17128 <prvTraceInitTraceData+0x1dc>)
   17056:	681b      	ldr	r3, [r3, #0]
   17058:	4a4a      	ldr	r2, [pc, #296]	; (17184 <prvTraceInitTraceData+0x238>)
   1705a:	2173      	movs	r1, #115	; 0x73
   1705c:	5499      	strb	r1, [r3, r2]
   1705e:	4b32      	ldr	r3, [pc, #200]	; (17128 <prvTraceInitTraceData+0x1dc>)
   17060:	681b      	ldr	r3, [r3, #0]
   17062:	4a49      	ldr	r2, [pc, #292]	; (17188 <prvTraceInitTraceData+0x23c>)
   17064:	2174      	movs	r1, #116	; 0x74
   17066:	5499      	strb	r1, [r3, r2]
   17068:	4b2f      	ldr	r3, [pc, #188]	; (17128 <prvTraceInitTraceData+0x1dc>)
   1706a:	681b      	ldr	r3, [r3, #0]
   1706c:	4a47      	ldr	r2, [pc, #284]	; (1718c <prvTraceInitTraceData+0x240>)
   1706e:	21f1      	movs	r1, #241	; 0xf1
   17070:	5499      	strb	r1, [r3, r2]
   17072:	4b2d      	ldr	r3, [pc, #180]	; (17128 <prvTraceInitTraceData+0x1dc>)
   17074:	681b      	ldr	r3, [r3, #0]
   17076:	4a46      	ldr	r2, [pc, #280]	; (17190 <prvTraceInitTraceData+0x244>)
   17078:	21f2      	movs	r1, #242	; 0xf2
   1707a:	5499      	strb	r1, [r3, r2]
   1707c:	4b2a      	ldr	r3, [pc, #168]	; (17128 <prvTraceInitTraceData+0x1dc>)
   1707e:	681b      	ldr	r3, [r3, #0]
   17080:	4a44      	ldr	r2, [pc, #272]	; (17194 <prvTraceInitTraceData+0x248>)
   17082:	21f3      	movs	r1, #243	; 0xf3
   17084:	5499      	strb	r1, [r3, r2]
   17086:	4b28      	ldr	r3, [pc, #160]	; (17128 <prvTraceInitTraceData+0x1dc>)
   17088:	681b      	ldr	r3, [r3, #0]
   1708a:	4a43      	ldr	r2, [pc, #268]	; (17198 <prvTraceInitTraceData+0x24c>)
   1708c:	21f4      	movs	r1, #244	; 0xf4
   1708e:	5499      	strb	r1, [r3, r2]
   17090:	4b42      	ldr	r3, [pc, #264]	; (1719c <prvTraceInitTraceData+0x250>)
   17092:	4798      	blx	r3
   17094:	4b24      	ldr	r3, [pc, #144]	; (17128 <prvTraceInitTraceData+0x1dc>)
   17096:	681b      	ldr	r3, [r3, #0]
   17098:	22f4      	movs	r2, #244	; 0xf4
   1709a:	72da      	strb	r2, [r3, #11]
   1709c:	4b22      	ldr	r3, [pc, #136]	; (17128 <prvTraceInitTraceData+0x1dc>)
   1709e:	681b      	ldr	r3, [r3, #0]
   170a0:	22f3      	movs	r2, #243	; 0xf3
   170a2:	729a      	strb	r2, [r3, #10]
   170a4:	4b20      	ldr	r3, [pc, #128]	; (17128 <prvTraceInitTraceData+0x1dc>)
   170a6:	681b      	ldr	r3, [r3, #0]
   170a8:	22f2      	movs	r2, #242	; 0xf2
   170aa:	725a      	strb	r2, [r3, #9]
   170ac:	4b1e      	ldr	r3, [pc, #120]	; (17128 <prvTraceInitTraceData+0x1dc>)
   170ae:	681b      	ldr	r3, [r3, #0]
   170b0:	22f1      	movs	r2, #241	; 0xf1
   170b2:	721a      	strb	r2, [r3, #8]
   170b4:	4b1c      	ldr	r3, [pc, #112]	; (17128 <prvTraceInitTraceData+0x1dc>)
   170b6:	681b      	ldr	r3, [r3, #0]
   170b8:	2274      	movs	r2, #116	; 0x74
   170ba:	71da      	strb	r2, [r3, #7]
   170bc:	4b1a      	ldr	r3, [pc, #104]	; (17128 <prvTraceInitTraceData+0x1dc>)
   170be:	681b      	ldr	r3, [r3, #0]
   170c0:	2273      	movs	r2, #115	; 0x73
   170c2:	719a      	strb	r2, [r3, #6]
   170c4:	4b18      	ldr	r3, [pc, #96]	; (17128 <prvTraceInitTraceData+0x1dc>)
   170c6:	681b      	ldr	r3, [r3, #0]
   170c8:	2272      	movs	r2, #114	; 0x72
   170ca:	715a      	strb	r2, [r3, #5]
   170cc:	4b16      	ldr	r3, [pc, #88]	; (17128 <prvTraceInitTraceData+0x1dc>)
   170ce:	681b      	ldr	r3, [r3, #0]
   170d0:	2271      	movs	r2, #113	; 0x71
   170d2:	711a      	strb	r2, [r3, #4]
   170d4:	4b14      	ldr	r3, [pc, #80]	; (17128 <prvTraceInitTraceData+0x1dc>)
   170d6:	681b      	ldr	r3, [r3, #0]
   170d8:	2204      	movs	r2, #4
   170da:	70da      	strb	r2, [r3, #3]
   170dc:	4b12      	ldr	r3, [pc, #72]	; (17128 <prvTraceInitTraceData+0x1dc>)
   170de:	681b      	ldr	r3, [r3, #0]
   170e0:	2203      	movs	r2, #3
   170e2:	709a      	strb	r2, [r3, #2]
   170e4:	4b10      	ldr	r3, [pc, #64]	; (17128 <prvTraceInitTraceData+0x1dc>)
   170e6:	681b      	ldr	r3, [r3, #0]
   170e8:	2202      	movs	r2, #2
   170ea:	705a      	strb	r2, [r3, #1]
   170ec:	4b0e      	ldr	r3, [pc, #56]	; (17128 <prvTraceInitTraceData+0x1dc>)
   170ee:	681b      	ldr	r3, [r3, #0]
   170f0:	2201      	movs	r2, #1
   170f2:	701a      	strb	r2, [r3, #0]
   170f4:	4b2a      	ldr	r3, [pc, #168]	; (171a0 <prvTraceInitTraceData+0x254>)
   170f6:	681b      	ldr	r3, [r3, #0]
   170f8:	2b00      	cmp	r3, #0
   170fa:	d012      	beq.n	17122 <prvTraceInitTraceData+0x1d6>
   170fc:	4b0a      	ldr	r3, [pc, #40]	; (17128 <prvTraceInitTraceData+0x1dc>)
   170fe:	681b      	ldr	r3, [r3, #0]
   17100:	4a15      	ldr	r2, [pc, #84]	; (17158 <prvTraceInitTraceData+0x20c>)
   17102:	1898      	adds	r0, r3, r2
   17104:	4b26      	ldr	r3, [pc, #152]	; (171a0 <prvTraceInitTraceData+0x254>)
   17106:	681b      	ldr	r3, [r3, #0]
   17108:	2250      	movs	r2, #80	; 0x50
   1710a:	0019      	movs	r1, r3
   1710c:	4b14      	ldr	r3, [pc, #80]	; (17160 <prvTraceInitTraceData+0x214>)
   1710e:	4798      	blx	r3
   17110:	4b05      	ldr	r3, [pc, #20]	; (17128 <prvTraceInitTraceData+0x1dc>)
   17112:	681b      	ldr	r3, [r3, #0]
   17114:	4a23      	ldr	r2, [pc, #140]	; (171a4 <prvTraceInitTraceData+0x258>)
   17116:	2101      	movs	r1, #1
   17118:	5099      	str	r1, [r3, r2]
   1711a:	4b23      	ldr	r3, [pc, #140]	; (171a8 <prvTraceInitTraceData+0x25c>)
   1711c:	4798      	blx	r3
   1711e:	e000      	b.n	17122 <prvTraceInitTraceData+0x1d6>
   17120:	46c0      	nop			; (mov r8, r8)
   17122:	46bd      	mov	sp, r7
   17124:	bd80      	pop	{r7, pc}
   17126:	46c0      	nop			; (mov r8, r8)
   17128:	20000c34 	.word	0x20000c34
   1712c:	2000436c 	.word	0x2000436c
   17130:	e000e018 	.word	0xe000e018
   17134:	20004f3c 	.word	0x20004f3c
   17138:	000321a3 	.word	0x000321a3
   1713c:	00001aa1 	.word	0x00001aa1
   17140:	f0f0f0f0 	.word	0xf0f0f0f0
   17144:	000160b1 	.word	0x000160b1
   17148:	0000055c 	.word	0x0000055c
   1714c:	f1f1f1f1 	.word	0xf1f1f1f1
   17150:	00000564 	.word	0x00000564
   17154:	f2f2f2f2 	.word	0xf2f2f2f2
   17158:	000006bc 	.word	0x000006bc
   1715c:	00035180 	.word	0x00035180
   17160:	000174c1 	.word	0x000174c1
   17164:	0000070c 	.word	0x0000070c
   17168:	f3f3f3f3 	.word	0xf3f3f3f3
   1716c:	00000bc4 	.word	0x00000bc4
   17170:	00000bc5 	.word	0x00000bc5
   17174:	00000bc6 	.word	0x00000bc6
   17178:	00000bc7 	.word	0x00000bc7
   1717c:	00000bc8 	.word	0x00000bc8
   17180:	00000bc9 	.word	0x00000bc9
   17184:	00000bca 	.word	0x00000bca
   17188:	00000bcb 	.word	0x00000bcb
   1718c:	00000bcc 	.word	0x00000bcc
   17190:	00000bcd 	.word	0x00000bcd
   17194:	00000bce 	.word	0x00000bce
   17198:	00000bcf 	.word	0x00000bcf
   1719c:	00016251 	.word	0x00016251
   171a0:	20000b94 	.word	0x20000b94
   171a4:	000006b4 	.word	0x000006b4
   171a8:	000164b9 	.word	0x000164b9

000171ac <prvTraceNextFreeEventBufferSlot>:
   171ac:	b580      	push	{r7, lr}
   171ae:	af00      	add	r7, sp, #0
   171b0:	4b10      	ldr	r3, [pc, #64]	; (171f4 <prvTraceNextFreeEventBufferSlot+0x48>)
   171b2:	681b      	ldr	r3, [r3, #0]
   171b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   171b6:	2b00      	cmp	r3, #0
   171b8:	d101      	bne.n	171be <prvTraceNextFreeEventBufferSlot+0x12>
   171ba:	2300      	movs	r3, #0
   171bc:	e017      	b.n	171ee <prvTraceNextFreeEventBufferSlot+0x42>
   171be:	4b0d      	ldr	r3, [pc, #52]	; (171f4 <prvTraceNextFreeEventBufferSlot+0x48>)
   171c0:	681b      	ldr	r3, [r3, #0]
   171c2:	69da      	ldr	r2, [r3, #28]
   171c4:	232c      	movs	r3, #44	; 0x2c
   171c6:	33ff      	adds	r3, #255	; 0xff
   171c8:	429a      	cmp	r2, r3
   171ca:	d905      	bls.n	171d8 <prvTraceNextFreeEventBufferSlot+0x2c>
   171cc:	4b0a      	ldr	r3, [pc, #40]	; (171f8 <prvTraceNextFreeEventBufferSlot+0x4c>)
   171ce:	0018      	movs	r0, r3
   171d0:	4b0a      	ldr	r3, [pc, #40]	; (171fc <prvTraceNextFreeEventBufferSlot+0x50>)
   171d2:	4798      	blx	r3
   171d4:	2300      	movs	r3, #0
   171d6:	e00a      	b.n	171ee <prvTraceNextFreeEventBufferSlot+0x42>
   171d8:	4b06      	ldr	r3, [pc, #24]	; (171f4 <prvTraceNextFreeEventBufferSlot+0x48>)
   171da:	681a      	ldr	r2, [r3, #0]
   171dc:	4b05      	ldr	r3, [pc, #20]	; (171f4 <prvTraceNextFreeEventBufferSlot+0x48>)
   171de:	681b      	ldr	r3, [r3, #0]
   171e0:	69db      	ldr	r3, [r3, #28]
   171e2:	009b      	lsls	r3, r3, #2
   171e4:	21e2      	movs	r1, #226	; 0xe2
   171e6:	00c9      	lsls	r1, r1, #3
   171e8:	468c      	mov	ip, r1
   171ea:	4463      	add	r3, ip
   171ec:	18d3      	adds	r3, r2, r3
   171ee:	0018      	movs	r0, r3
   171f0:	46bd      	mov	sp, r7
   171f2:	bd80      	pop	{r7, pc}
   171f4:	20000c34 	.word	0x20000c34
   171f8:	00035194 	.word	0x00035194
   171fc:	000175f5 	.word	0x000175f5

00017200 <uiIndexOfObject>:
   17200:	b580      	push	{r7, lr}
   17202:	b082      	sub	sp, #8
   17204:	af00      	add	r7, sp, #0
   17206:	0002      	movs	r2, r0
   17208:	1dfb      	adds	r3, r7, #7
   1720a:	701a      	strb	r2, [r3, #0]
   1720c:	1dbb      	adds	r3, r7, #6
   1720e:	1c0a      	adds	r2, r1, #0
   17210:	701a      	strb	r2, [r3, #0]
   17212:	1dbb      	adds	r3, r7, #6
   17214:	781b      	ldrb	r3, [r3, #0]
   17216:	2b08      	cmp	r3, #8
   17218:	d905      	bls.n	17226 <uiIndexOfObject+0x26>
   1721a:	4b2a      	ldr	r3, [pc, #168]	; (172c4 <uiIndexOfObject+0xc4>)
   1721c:	0018      	movs	r0, r3
   1721e:	4b2a      	ldr	r3, [pc, #168]	; (172c8 <uiIndexOfObject+0xc8>)
   17220:	4798      	blx	r3
   17222:	2300      	movs	r3, #0
   17224:	e049      	b.n	172ba <uiIndexOfObject+0xba>
   17226:	1dfb      	adds	r3, r7, #7
   17228:	781b      	ldrb	r3, [r3, #0]
   1722a:	2b00      	cmp	r3, #0
   1722c:	d00b      	beq.n	17246 <uiIndexOfObject+0x46>
   1722e:	4b27      	ldr	r3, [pc, #156]	; (172cc <uiIndexOfObject+0xcc>)
   17230:	681a      	ldr	r2, [r3, #0]
   17232:	1dbb      	adds	r3, r7, #6
   17234:	781b      	ldrb	r3, [r3, #0]
   17236:	2164      	movs	r1, #100	; 0x64
   17238:	18d3      	adds	r3, r2, r3
   1723a:	185b      	adds	r3, r3, r1
   1723c:	781b      	ldrb	r3, [r3, #0]
   1723e:	1dfa      	adds	r2, r7, #7
   17240:	7812      	ldrb	r2, [r2, #0]
   17242:	429a      	cmp	r2, r3
   17244:	d905      	bls.n	17252 <uiIndexOfObject+0x52>
   17246:	4b22      	ldr	r3, [pc, #136]	; (172d0 <uiIndexOfObject+0xd0>)
   17248:	0018      	movs	r0, r3
   1724a:	4b1f      	ldr	r3, [pc, #124]	; (172c8 <uiIndexOfObject+0xc8>)
   1724c:	4798      	blx	r3
   1724e:	2300      	movs	r3, #0
   17250:	e033      	b.n	172ba <uiIndexOfObject+0xba>
   17252:	1dbb      	adds	r3, r7, #6
   17254:	781b      	ldrb	r3, [r3, #0]
   17256:	2b08      	cmp	r3, #8
   17258:	d82a      	bhi.n	172b0 <uiIndexOfObject+0xb0>
   1725a:	1dfb      	adds	r3, r7, #7
   1725c:	781b      	ldrb	r3, [r3, #0]
   1725e:	2b00      	cmp	r3, #0
   17260:	d026      	beq.n	172b0 <uiIndexOfObject+0xb0>
   17262:	4b1a      	ldr	r3, [pc, #104]	; (172cc <uiIndexOfObject+0xcc>)
   17264:	681a      	ldr	r2, [r3, #0]
   17266:	1dbb      	adds	r3, r7, #6
   17268:	781b      	ldrb	r3, [r3, #0]
   1726a:	2164      	movs	r1, #100	; 0x64
   1726c:	18d3      	adds	r3, r2, r3
   1726e:	185b      	adds	r3, r3, r1
   17270:	781b      	ldrb	r3, [r3, #0]
   17272:	1dfa      	adds	r2, r7, #7
   17274:	7812      	ldrb	r2, [r2, #0]
   17276:	429a      	cmp	r2, r3
   17278:	d81a      	bhi.n	172b0 <uiIndexOfObject+0xb0>
   1727a:	4b14      	ldr	r3, [pc, #80]	; (172cc <uiIndexOfObject+0xcc>)
   1727c:	681a      	ldr	r2, [r3, #0]
   1727e:	1dbb      	adds	r3, r7, #6
   17280:	781b      	ldrb	r3, [r3, #0]
   17282:	3340      	adds	r3, #64	; 0x40
   17284:	005b      	lsls	r3, r3, #1
   17286:	18d3      	adds	r3, r2, r3
   17288:	3308      	adds	r3, #8
   1728a:	881a      	ldrh	r2, [r3, #0]
   1728c:	4b0f      	ldr	r3, [pc, #60]	; (172cc <uiIndexOfObject+0xcc>)
   1728e:	6819      	ldr	r1, [r3, #0]
   17290:	1dbb      	adds	r3, r7, #6
   17292:	781b      	ldrb	r3, [r3, #0]
   17294:	207c      	movs	r0, #124	; 0x7c
   17296:	18cb      	adds	r3, r1, r3
   17298:	181b      	adds	r3, r3, r0
   1729a:	781b      	ldrb	r3, [r3, #0]
   1729c:	b29b      	uxth	r3, r3
   1729e:	1df9      	adds	r1, r7, #7
   172a0:	7809      	ldrb	r1, [r1, #0]
   172a2:	3901      	subs	r1, #1
   172a4:	b289      	uxth	r1, r1
   172a6:	434b      	muls	r3, r1
   172a8:	b29b      	uxth	r3, r3
   172aa:	18d3      	adds	r3, r2, r3
   172ac:	b29b      	uxth	r3, r3
   172ae:	e004      	b.n	172ba <uiIndexOfObject+0xba>
   172b0:	4b08      	ldr	r3, [pc, #32]	; (172d4 <uiIndexOfObject+0xd4>)
   172b2:	0018      	movs	r0, r3
   172b4:	4b04      	ldr	r3, [pc, #16]	; (172c8 <uiIndexOfObject+0xc8>)
   172b6:	4798      	blx	r3
   172b8:	2300      	movs	r3, #0
   172ba:	0018      	movs	r0, r3
   172bc:	46bd      	mov	sp, r7
   172be:	b002      	add	sp, #8
   172c0:	bd80      	pop	{r7, pc}
   172c2:	46c0      	nop			; (mov r8, r8)
   172c4:	000351bc 	.word	0x000351bc
   172c8:	000175f5 	.word	0x000175f5
   172cc:	20000c34 	.word	0x20000c34
   172d0:	000351fc 	.word	0x000351fc
   172d4:	0003523c 	.word	0x0003523c

000172d8 <prvTraceGetObjectHandle>:
   172d8:	b580      	push	{r7, lr}
   172da:	b088      	sub	sp, #32
   172dc:	af00      	add	r7, sp, #0
   172de:	0002      	movs	r2, r0
   172e0:	1dfb      	adds	r3, r7, #7
   172e2:	701a      	strb	r2, [r3, #0]
   172e4:	4b5a      	ldr	r3, [pc, #360]	; (17450 <prvTraceGetObjectHandle+0x178>)
   172e6:	681b      	ldr	r3, [r3, #0]
   172e8:	2b00      	cmp	r3, #0
   172ea:	d105      	bne.n	172f8 <prvTraceGetObjectHandle+0x20>
   172ec:	4b59      	ldr	r3, [pc, #356]	; (17454 <prvTraceGetObjectHandle+0x17c>)
   172ee:	0018      	movs	r0, r3
   172f0:	4b59      	ldr	r3, [pc, #356]	; (17458 <prvTraceGetObjectHandle+0x180>)
   172f2:	4798      	blx	r3
   172f4:	2300      	movs	r3, #0
   172f6:	e0a7      	b.n	17448 <prvTraceGetObjectHandle+0x170>
   172f8:	1dfb      	adds	r3, r7, #7
   172fa:	781b      	ldrb	r3, [r3, #0]
   172fc:	2b08      	cmp	r3, #8
   172fe:	d905      	bls.n	1730c <prvTraceGetObjectHandle+0x34>
   17300:	4b56      	ldr	r3, [pc, #344]	; (1745c <prvTraceGetObjectHandle+0x184>)
   17302:	0018      	movs	r0, r3
   17304:	4b54      	ldr	r3, [pc, #336]	; (17458 <prvTraceGetObjectHandle+0x180>)
   17306:	4798      	blx	r3
   17308:	2300      	movs	r3, #0
   1730a:	e09d      	b.n	17448 <prvTraceGetObjectHandle+0x170>
   1730c:	f3ef 8310 	mrs	r3, PRIMASK
   17310:	60fb      	str	r3, [r7, #12]
   17312:	68fb      	ldr	r3, [r7, #12]
   17314:	61bb      	str	r3, [r7, #24]
   17316:	2301      	movs	r3, #1
   17318:	613b      	str	r3, [r7, #16]
   1731a:	693b      	ldr	r3, [r7, #16]
   1731c:	f383 8810 	msr	PRIMASK, r3
   17320:	4b4f      	ldr	r3, [pc, #316]	; (17460 <prvTraceGetObjectHandle+0x188>)
   17322:	681b      	ldr	r3, [r3, #0]
   17324:	1c5a      	adds	r2, r3, #1
   17326:	4b4e      	ldr	r3, [pc, #312]	; (17460 <prvTraceGetObjectHandle+0x188>)
   17328:	601a      	str	r2, [r3, #0]
   1732a:	1dfb      	adds	r3, r7, #7
   1732c:	781a      	ldrb	r2, [r3, #0]
   1732e:	4b4d      	ldr	r3, [pc, #308]	; (17464 <prvTraceGetObjectHandle+0x18c>)
   17330:	0052      	lsls	r2, r2, #1
   17332:	5ad3      	ldrh	r3, [r2, r3]
   17334:	001a      	movs	r2, r3
   17336:	4b4c      	ldr	r3, [pc, #304]	; (17468 <prvTraceGetObjectHandle+0x190>)
   17338:	601a      	str	r2, [r3, #0]
   1733a:	4b4b      	ldr	r3, [pc, #300]	; (17468 <prvTraceGetObjectHandle+0x190>)
   1733c:	681b      	ldr	r3, [r3, #0]
   1733e:	4a49      	ldr	r2, [pc, #292]	; (17464 <prvTraceGetObjectHandle+0x18c>)
   17340:	2148      	movs	r1, #72	; 0x48
   17342:	18d3      	adds	r3, r2, r3
   17344:	185b      	adds	r3, r3, r1
   17346:	781b      	ldrb	r3, [r3, #0]
   17348:	2b00      	cmp	r3, #0
   1734a:	d117      	bne.n	1737c <prvTraceGetObjectHandle+0xa4>
   1734c:	4b46      	ldr	r3, [pc, #280]	; (17468 <prvTraceGetObjectHandle+0x190>)
   1734e:	681a      	ldr	r2, [r3, #0]
   17350:	4b45      	ldr	r3, [pc, #276]	; (17468 <prvTraceGetObjectHandle+0x190>)
   17352:	681b      	ldr	r3, [r3, #0]
   17354:	b2d9      	uxtb	r1, r3
   17356:	1dfb      	adds	r3, r7, #7
   17358:	781b      	ldrb	r3, [r3, #0]
   1735a:	4842      	ldr	r0, [pc, #264]	; (17464 <prvTraceGetObjectHandle+0x18c>)
   1735c:	3308      	adds	r3, #8
   1735e:	005b      	lsls	r3, r3, #1
   17360:	18c3      	adds	r3, r0, r3
   17362:	3302      	adds	r3, #2
   17364:	881b      	ldrh	r3, [r3, #0]
   17366:	b2db      	uxtb	r3, r3
   17368:	1acb      	subs	r3, r1, r3
   1736a:	b2db      	uxtb	r3, r3
   1736c:	3301      	adds	r3, #1
   1736e:	b2d8      	uxtb	r0, r3
   17370:	4b3c      	ldr	r3, [pc, #240]	; (17464 <prvTraceGetObjectHandle+0x18c>)
   17372:	2148      	movs	r1, #72	; 0x48
   17374:	189b      	adds	r3, r3, r2
   17376:	185b      	adds	r3, r3, r1
   17378:	1c02      	adds	r2, r0, #0
   1737a:	701a      	strb	r2, [r3, #0]
   1737c:	4b3a      	ldr	r3, [pc, #232]	; (17468 <prvTraceGetObjectHandle+0x190>)
   1737e:	681a      	ldr	r2, [r3, #0]
   17380:	231f      	movs	r3, #31
   17382:	18fb      	adds	r3, r7, r3
   17384:	4937      	ldr	r1, [pc, #220]	; (17464 <prvTraceGetObjectHandle+0x18c>)
   17386:	2048      	movs	r0, #72	; 0x48
   17388:	188a      	adds	r2, r1, r2
   1738a:	1812      	adds	r2, r2, r0
   1738c:	7812      	ldrb	r2, [r2, #0]
   1738e:	701a      	strb	r2, [r3, #0]
   17390:	1dfb      	adds	r3, r7, #7
   17392:	781a      	ldrb	r2, [r3, #0]
   17394:	4b33      	ldr	r3, [pc, #204]	; (17464 <prvTraceGetObjectHandle+0x18c>)
   17396:	0052      	lsls	r2, r2, #1
   17398:	5ad2      	ldrh	r2, [r2, r3]
   1739a:	1dfb      	adds	r3, r7, #7
   1739c:	781b      	ldrb	r3, [r3, #0]
   1739e:	4931      	ldr	r1, [pc, #196]	; (17464 <prvTraceGetObjectHandle+0x18c>)
   173a0:	3310      	adds	r3, #16
   173a2:	005b      	lsls	r3, r3, #1
   173a4:	18cb      	adds	r3, r1, r3
   173a6:	3304      	adds	r3, #4
   173a8:	881b      	ldrh	r3, [r3, #0]
   173aa:	429a      	cmp	r2, r3
   173ac:	d90d      	bls.n	173ca <prvTraceGetObjectHandle+0xf2>
   173ae:	1dfb      	adds	r3, r7, #7
   173b0:	781b      	ldrb	r3, [r3, #0]
   173b2:	0018      	movs	r0, r3
   173b4:	4b2d      	ldr	r3, [pc, #180]	; (1746c <prvTraceGetObjectHandle+0x194>)
   173b6:	4798      	blx	r3
   173b8:	0003      	movs	r3, r0
   173ba:	0018      	movs	r0, r3
   173bc:	4b26      	ldr	r3, [pc, #152]	; (17458 <prvTraceGetObjectHandle+0x180>)
   173be:	4798      	blx	r3
   173c0:	231f      	movs	r3, #31
   173c2:	18fb      	adds	r3, r7, r3
   173c4:	2200      	movs	r2, #0
   173c6:	701a      	strb	r2, [r3, #0]
   173c8:	e031      	b.n	1742e <prvTraceGetObjectHandle+0x156>
   173ca:	1dfb      	adds	r3, r7, #7
   173cc:	781b      	ldrb	r3, [r3, #0]
   173ce:	4a25      	ldr	r2, [pc, #148]	; (17464 <prvTraceGetObjectHandle+0x18c>)
   173d0:	0059      	lsls	r1, r3, #1
   173d2:	5a8a      	ldrh	r2, [r1, r2]
   173d4:	3201      	adds	r2, #1
   173d6:	b291      	uxth	r1, r2
   173d8:	4a22      	ldr	r2, [pc, #136]	; (17464 <prvTraceGetObjectHandle+0x18c>)
   173da:	005b      	lsls	r3, r3, #1
   173dc:	5299      	strh	r1, [r3, r2]
   173de:	1dfb      	adds	r3, r7, #7
   173e0:	781a      	ldrb	r2, [r3, #0]
   173e2:	4b20      	ldr	r3, [pc, #128]	; (17464 <prvTraceGetObjectHandle+0x18c>)
   173e4:	0052      	lsls	r2, r2, #1
   173e6:	5ad3      	ldrh	r3, [r2, r3]
   173e8:	0019      	movs	r1, r3
   173ea:	1dfb      	adds	r3, r7, #7
   173ec:	781b      	ldrb	r3, [r3, #0]
   173ee:	4a1d      	ldr	r2, [pc, #116]	; (17464 <prvTraceGetObjectHandle+0x18c>)
   173f0:	3308      	adds	r3, #8
   173f2:	005b      	lsls	r3, r3, #1
   173f4:	18d3      	adds	r3, r2, r3
   173f6:	3302      	adds	r3, #2
   173f8:	881b      	ldrh	r3, [r3, #0]
   173fa:	1acb      	subs	r3, r1, r3
   173fc:	617b      	str	r3, [r7, #20]
   173fe:	1dfb      	adds	r3, r7, #7
   17400:	781b      	ldrb	r3, [r3, #0]
   17402:	4a18      	ldr	r2, [pc, #96]	; (17464 <prvTraceGetObjectHandle+0x18c>)
   17404:	3318      	adds	r3, #24
   17406:	005b      	lsls	r3, r3, #1
   17408:	18d3      	adds	r3, r2, r3
   1740a:	3306      	adds	r3, #6
   1740c:	881b      	ldrh	r3, [r3, #0]
   1740e:	001a      	movs	r2, r3
   17410:	697b      	ldr	r3, [r7, #20]
   17412:	429a      	cmp	r2, r3
   17414:	da0b      	bge.n	1742e <prvTraceGetObjectHandle+0x156>
   17416:	1dfb      	adds	r3, r7, #7
   17418:	781b      	ldrb	r3, [r3, #0]
   1741a:	697a      	ldr	r2, [r7, #20]
   1741c:	b2d2      	uxtb	r2, r2
   1741e:	b291      	uxth	r1, r2
   17420:	4a10      	ldr	r2, [pc, #64]	; (17464 <prvTraceGetObjectHandle+0x18c>)
   17422:	3318      	adds	r3, #24
   17424:	005b      	lsls	r3, r3, #1
   17426:	18d3      	adds	r3, r2, r3
   17428:	3306      	adds	r3, #6
   1742a:	1c0a      	adds	r2, r1, #0
   1742c:	801a      	strh	r2, [r3, #0]
   1742e:	4b0c      	ldr	r3, [pc, #48]	; (17460 <prvTraceGetObjectHandle+0x188>)
   17430:	681b      	ldr	r3, [r3, #0]
   17432:	1e5a      	subs	r2, r3, #1
   17434:	4b0a      	ldr	r3, [pc, #40]	; (17460 <prvTraceGetObjectHandle+0x188>)
   17436:	601a      	str	r2, [r3, #0]
   17438:	69bb      	ldr	r3, [r7, #24]
   1743a:	60bb      	str	r3, [r7, #8]
   1743c:	68bb      	ldr	r3, [r7, #8]
   1743e:	f383 8810 	msr	PRIMASK, r3
   17442:	231f      	movs	r3, #31
   17444:	18fb      	adds	r3, r7, r3
   17446:	781b      	ldrb	r3, [r3, #0]
   17448:	0018      	movs	r0, r3
   1744a:	46bd      	mov	sp, r7
   1744c:	b008      	add	sp, #32
   1744e:	bd80      	pop	{r7, pc}
   17450:	20000c34 	.word	0x20000c34
   17454:	0003469c 	.word	0x0003469c
   17458:	000175f5 	.word	0x000175f5
   1745c:	0003527c 	.word	0x0003527c
   17460:	20000b8c 	.word	0x20000b8c
   17464:	20000ba4 	.word	0x20000ba4
   17468:	20000c38 	.word	0x20000c38
   1746c:	00016315 	.word	0x00016315

00017470 <prvMarkObjectAsUsed>:
   17470:	b590      	push	{r4, r7, lr}
   17472:	b085      	sub	sp, #20
   17474:	af00      	add	r7, sp, #0
   17476:	0002      	movs	r2, r0
   17478:	1dfb      	adds	r3, r7, #7
   1747a:	701a      	strb	r2, [r3, #0]
   1747c:	1dbb      	adds	r3, r7, #6
   1747e:	1c0a      	adds	r2, r1, #0
   17480:	701a      	strb	r2, [r3, #0]
   17482:	230e      	movs	r3, #14
   17484:	18fc      	adds	r4, r7, r3
   17486:	1dfb      	adds	r3, r7, #7
   17488:	781a      	ldrb	r2, [r3, #0]
   1748a:	1dbb      	adds	r3, r7, #6
   1748c:	781b      	ldrb	r3, [r3, #0]
   1748e:	0011      	movs	r1, r2
   17490:	0018      	movs	r0, r3
   17492:	4b09      	ldr	r3, [pc, #36]	; (174b8 <prvMarkObjectAsUsed+0x48>)
   17494:	4798      	blx	r3
   17496:	0003      	movs	r3, r0
   17498:	8023      	strh	r3, [r4, #0]
   1749a:	4b08      	ldr	r3, [pc, #32]	; (174bc <prvMarkObjectAsUsed+0x4c>)
   1749c:	681a      	ldr	r2, [r3, #0]
   1749e:	230e      	movs	r3, #14
   174a0:	18fb      	adds	r3, r7, r3
   174a2:	881b      	ldrh	r3, [r3, #0]
   174a4:	219c      	movs	r1, #156	; 0x9c
   174a6:	18d3      	adds	r3, r2, r3
   174a8:	185b      	adds	r3, r3, r1
   174aa:	2201      	movs	r2, #1
   174ac:	701a      	strb	r2, [r3, #0]
   174ae:	46c0      	nop			; (mov r8, r8)
   174b0:	46bd      	mov	sp, r7
   174b2:	b005      	add	sp, #20
   174b4:	bd90      	pop	{r4, r7, pc}
   174b6:	46c0      	nop			; (mov r8, r8)
   174b8:	00017201 	.word	0x00017201
   174bc:	20000c34 	.word	0x20000c34

000174c0 <prvStrncpy>:
   174c0:	b580      	push	{r7, lr}
   174c2:	b086      	sub	sp, #24
   174c4:	af00      	add	r7, sp, #0
   174c6:	60f8      	str	r0, [r7, #12]
   174c8:	60b9      	str	r1, [r7, #8]
   174ca:	607a      	str	r2, [r7, #4]
   174cc:	2300      	movs	r3, #0
   174ce:	617b      	str	r3, [r7, #20]
   174d0:	e010      	b.n	174f4 <prvStrncpy+0x34>
   174d2:	68fa      	ldr	r2, [r7, #12]
   174d4:	697b      	ldr	r3, [r7, #20]
   174d6:	18d3      	adds	r3, r2, r3
   174d8:	68b9      	ldr	r1, [r7, #8]
   174da:	697a      	ldr	r2, [r7, #20]
   174dc:	188a      	adds	r2, r1, r2
   174de:	7812      	ldrb	r2, [r2, #0]
   174e0:	701a      	strb	r2, [r3, #0]
   174e2:	68ba      	ldr	r2, [r7, #8]
   174e4:	697b      	ldr	r3, [r7, #20]
   174e6:	18d3      	adds	r3, r2, r3
   174e8:	781b      	ldrb	r3, [r3, #0]
   174ea:	2b00      	cmp	r3, #0
   174ec:	d007      	beq.n	174fe <prvStrncpy+0x3e>
   174ee:	697b      	ldr	r3, [r7, #20]
   174f0:	3301      	adds	r3, #1
   174f2:	617b      	str	r3, [r7, #20]
   174f4:	697a      	ldr	r2, [r7, #20]
   174f6:	687b      	ldr	r3, [r7, #4]
   174f8:	429a      	cmp	r2, r3
   174fa:	d3ea      	bcc.n	174d2 <prvStrncpy+0x12>
   174fc:	e000      	b.n	17500 <prvStrncpy+0x40>
   174fe:	46c0      	nop			; (mov r8, r8)
   17500:	46c0      	nop			; (mov r8, r8)
   17502:	46bd      	mov	sp, r7
   17504:	b006      	add	sp, #24
   17506:	bd80      	pop	{r7, pc}

00017508 <prvTraceSetObjectName>:
   17508:	b580      	push	{r7, lr}
   1750a:	b082      	sub	sp, #8
   1750c:	af00      	add	r7, sp, #0
   1750e:	603a      	str	r2, [r7, #0]
   17510:	1dfb      	adds	r3, r7, #7
   17512:	1c02      	adds	r2, r0, #0
   17514:	701a      	strb	r2, [r3, #0]
   17516:	1dbb      	adds	r3, r7, #6
   17518:	1c0a      	adds	r2, r1, #0
   1751a:	701a      	strb	r2, [r3, #0]
   1751c:	683b      	ldr	r3, [r7, #0]
   1751e:	2b00      	cmp	r3, #0
   17520:	d104      	bne.n	1752c <prvTraceSetObjectName+0x24>
   17522:	4b2a      	ldr	r3, [pc, #168]	; (175cc <prvTraceSetObjectName+0xc4>)
   17524:	0018      	movs	r0, r3
   17526:	4b2a      	ldr	r3, [pc, #168]	; (175d0 <prvTraceSetObjectName+0xc8>)
   17528:	4798      	blx	r3
   1752a:	e04b      	b.n	175c4 <prvTraceSetObjectName+0xbc>
   1752c:	1dfb      	adds	r3, r7, #7
   1752e:	781b      	ldrb	r3, [r3, #0]
   17530:	2b08      	cmp	r3, #8
   17532:	d904      	bls.n	1753e <prvTraceSetObjectName+0x36>
   17534:	4b27      	ldr	r3, [pc, #156]	; (175d4 <prvTraceSetObjectName+0xcc>)
   17536:	0018      	movs	r0, r3
   17538:	4b25      	ldr	r3, [pc, #148]	; (175d0 <prvTraceSetObjectName+0xc8>)
   1753a:	4798      	blx	r3
   1753c:	e042      	b.n	175c4 <prvTraceSetObjectName+0xbc>
   1753e:	1dbb      	adds	r3, r7, #6
   17540:	781b      	ldrb	r3, [r3, #0]
   17542:	2b00      	cmp	r3, #0
   17544:	d104      	bne.n	17550 <prvTraceSetObjectName+0x48>
   17546:	4b24      	ldr	r3, [pc, #144]	; (175d8 <prvTraceSetObjectName+0xd0>)
   17548:	0018      	movs	r0, r3
   1754a:	4b21      	ldr	r3, [pc, #132]	; (175d0 <prvTraceSetObjectName+0xc8>)
   1754c:	4798      	blx	r3
   1754e:	e039      	b.n	175c4 <prvTraceSetObjectName+0xbc>
   17550:	4b22      	ldr	r3, [pc, #136]	; (175dc <prvTraceSetObjectName+0xd4>)
   17552:	681a      	ldr	r2, [r3, #0]
   17554:	1dfb      	adds	r3, r7, #7
   17556:	781b      	ldrb	r3, [r3, #0]
   17558:	2164      	movs	r1, #100	; 0x64
   1755a:	18d3      	adds	r3, r2, r3
   1755c:	185b      	adds	r3, r3, r1
   1755e:	781b      	ldrb	r3, [r3, #0]
   17560:	1dba      	adds	r2, r7, #6
   17562:	7812      	ldrb	r2, [r2, #0]
   17564:	429a      	cmp	r2, r3
   17566:	d909      	bls.n	1757c <prvTraceSetObjectName+0x74>
   17568:	1dfb      	adds	r3, r7, #7
   1756a:	781b      	ldrb	r3, [r3, #0]
   1756c:	0018      	movs	r0, r3
   1756e:	4b1c      	ldr	r3, [pc, #112]	; (175e0 <prvTraceSetObjectName+0xd8>)
   17570:	4798      	blx	r3
   17572:	0003      	movs	r3, r0
   17574:	0018      	movs	r0, r3
   17576:	4b16      	ldr	r3, [pc, #88]	; (175d0 <prvTraceSetObjectName+0xc8>)
   17578:	4798      	blx	r3
   1757a:	e023      	b.n	175c4 <prvTraceSetObjectName+0xbc>
   1757c:	1dfb      	adds	r3, r7, #7
   1757e:	781a      	ldrb	r2, [r3, #0]
   17580:	1dbb      	adds	r3, r7, #6
   17582:	781b      	ldrb	r3, [r3, #0]
   17584:	0011      	movs	r1, r2
   17586:	0018      	movs	r0, r3
   17588:	4b16      	ldr	r3, [pc, #88]	; (175e4 <prvTraceSetObjectName+0xdc>)
   1758a:	4798      	blx	r3
   1758c:	0003      	movs	r3, r0
   1758e:	001a      	movs	r2, r3
   17590:	4b15      	ldr	r3, [pc, #84]	; (175e8 <prvTraceSetObjectName+0xe0>)
   17592:	801a      	strh	r2, [r3, #0]
   17594:	4b15      	ldr	r3, [pc, #84]	; (175ec <prvTraceSetObjectName+0xe4>)
   17596:	681b      	ldr	r3, [r3, #0]
   17598:	2b00      	cmp	r3, #0
   1759a:	d113      	bne.n	175c4 <prvTraceSetObjectName+0xbc>
   1759c:	4b0f      	ldr	r3, [pc, #60]	; (175dc <prvTraceSetObjectName+0xd4>)
   1759e:	681a      	ldr	r2, [r3, #0]
   175a0:	4b11      	ldr	r3, [pc, #68]	; (175e8 <prvTraceSetObjectName+0xe0>)
   175a2:	881b      	ldrh	r3, [r3, #0]
   175a4:	3398      	adds	r3, #152	; 0x98
   175a6:	18d3      	adds	r3, r2, r3
   175a8:	1d18      	adds	r0, r3, #4
   175aa:	4b0c      	ldr	r3, [pc, #48]	; (175dc <prvTraceSetObjectName+0xd4>)
   175ac:	681a      	ldr	r2, [r3, #0]
   175ae:	1dfb      	adds	r3, r7, #7
   175b0:	781b      	ldrb	r3, [r3, #0]
   175b2:	2170      	movs	r1, #112	; 0x70
   175b4:	18d3      	adds	r3, r2, r3
   175b6:	185b      	adds	r3, r3, r1
   175b8:	781b      	ldrb	r3, [r3, #0]
   175ba:	001a      	movs	r2, r3
   175bc:	683b      	ldr	r3, [r7, #0]
   175be:	0019      	movs	r1, r3
   175c0:	4b0b      	ldr	r3, [pc, #44]	; (175f0 <prvTraceSetObjectName+0xe8>)
   175c2:	4798      	blx	r3
   175c4:	46bd      	mov	sp, r7
   175c6:	b002      	add	sp, #8
   175c8:	bd80      	pop	{r7, pc}
   175ca:	46c0      	nop			; (mov r8, r8)
   175cc:	00035380 	.word	0x00035380
   175d0:	000175f5 	.word	0x000175f5
   175d4:	000353b4 	.word	0x000353b4
   175d8:	000353e4 	.word	0x000353e4
   175dc:	20000c34 	.word	0x20000c34
   175e0:	00016315 	.word	0x00016315
   175e4:	00017201 	.word	0x00017201
   175e8:	20000c3c 	.word	0x20000c3c
   175ec:	20000b94 	.word	0x20000b94
   175f0:	000174c1 	.word	0x000174c1

000175f4 <prvTraceError>:
   175f4:	b580      	push	{r7, lr}
   175f6:	b082      	sub	sp, #8
   175f8:	af00      	add	r7, sp, #0
   175fa:	6078      	str	r0, [r7, #4]
   175fc:	4b11      	ldr	r3, [pc, #68]	; (17644 <prvTraceError+0x50>)
   175fe:	681b      	ldr	r3, [r3, #0]
   17600:	2b00      	cmp	r3, #0
   17602:	d001      	beq.n	17608 <prvTraceError+0x14>
   17604:	4b10      	ldr	r3, [pc, #64]	; (17648 <prvTraceError+0x54>)
   17606:	4798      	blx	r3
   17608:	4b10      	ldr	r3, [pc, #64]	; (1764c <prvTraceError+0x58>)
   1760a:	681b      	ldr	r3, [r3, #0]
   1760c:	2b00      	cmp	r3, #0
   1760e:	d115      	bne.n	1763c <prvTraceError+0x48>
   17610:	4b0e      	ldr	r3, [pc, #56]	; (1764c <prvTraceError+0x58>)
   17612:	687a      	ldr	r2, [r7, #4]
   17614:	601a      	str	r2, [r3, #0]
   17616:	4b0b      	ldr	r3, [pc, #44]	; (17644 <prvTraceError+0x50>)
   17618:	681b      	ldr	r3, [r3, #0]
   1761a:	2b00      	cmp	r3, #0
   1761c:	d00e      	beq.n	1763c <prvTraceError+0x48>
   1761e:	4b09      	ldr	r3, [pc, #36]	; (17644 <prvTraceError+0x50>)
   17620:	681b      	ldr	r3, [r3, #0]
   17622:	4a0b      	ldr	r2, [pc, #44]	; (17650 <prvTraceError+0x5c>)
   17624:	1898      	adds	r0, r3, r2
   17626:	4b09      	ldr	r3, [pc, #36]	; (1764c <prvTraceError+0x58>)
   17628:	681b      	ldr	r3, [r3, #0]
   1762a:	2250      	movs	r2, #80	; 0x50
   1762c:	0019      	movs	r1, r3
   1762e:	4b09      	ldr	r3, [pc, #36]	; (17654 <prvTraceError+0x60>)
   17630:	4798      	blx	r3
   17632:	4b04      	ldr	r3, [pc, #16]	; (17644 <prvTraceError+0x50>)
   17634:	681b      	ldr	r3, [r3, #0]
   17636:	4a08      	ldr	r2, [pc, #32]	; (17658 <prvTraceError+0x64>)
   17638:	2101      	movs	r1, #1
   1763a:	5099      	str	r1, [r3, r2]
   1763c:	46c0      	nop			; (mov r8, r8)
   1763e:	46bd      	mov	sp, r7
   17640:	b002      	add	sp, #8
   17642:	bd80      	pop	{r7, pc}
   17644:	20000c34 	.word	0x20000c34
   17648:	000164b9 	.word	0x000164b9
   1764c:	20000b94 	.word	0x20000b94
   17650:	000006bc 	.word	0x000006bc
   17654:	000174c1 	.word	0x000174c1
   17658:	000006b4 	.word	0x000006b4

0001765c <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
   1765c:	b580      	push	{r7, lr}
   1765e:	b086      	sub	sp, #24
   17660:	af00      	add	r7, sp, #0
   17662:	0002      	movs	r2, r0
   17664:	1dfb      	adds	r3, r7, #7
   17666:	701a      	strb	r2, [r3, #0]
   17668:	2300      	movs	r3, #0
   1766a:	617b      	str	r3, [r7, #20]
   1766c:	2300      	movs	r3, #0
   1766e:	613b      	str	r3, [r7, #16]
   17670:	1dfb      	adds	r3, r7, #7
   17672:	781b      	ldrb	r3, [r3, #0]
   17674:	2b00      	cmp	r3, #0
   17676:	d000      	beq.n	1767a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   17678:	e089      	b.n	1778e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1767a:	4b49      	ldr	r3, [pc, #292]	; (177a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1767c:	0018      	movs	r0, r3
   1767e:	4b49      	ldr	r3, [pc, #292]	; (177a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   17680:	4798      	blx	r3
   17682:	e08a      	b.n	1779a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   17684:	4b48      	ldr	r3, [pc, #288]	; (177a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   17686:	681b      	ldr	r3, [r3, #0]
   17688:	69da      	ldr	r2, [r3, #28]
   1768a:	697b      	ldr	r3, [r7, #20]
   1768c:	18d3      	adds	r3, r2, r3
   1768e:	613b      	str	r3, [r7, #16]
   17690:	4b45      	ldr	r3, [pc, #276]	; (177a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   17692:	6819      	ldr	r1, [r3, #0]
   17694:	693b      	ldr	r3, [r7, #16]
   17696:	009a      	lsls	r2, r3, #2
   17698:	23e2      	movs	r3, #226	; 0xe2
   1769a:	00db      	lsls	r3, r3, #3
   1769c:	188a      	adds	r2, r1, r2
   1769e:	18d3      	adds	r3, r2, r3
   176a0:	781b      	ldrb	r3, [r3, #0]
   176a2:	2b98      	cmp	r3, #152	; 0x98
   176a4:	d934      	bls.n	17710 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
   176a6:	4b40      	ldr	r3, [pc, #256]	; (177a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   176a8:	6819      	ldr	r1, [r3, #0]
   176aa:	693b      	ldr	r3, [r7, #16]
   176ac:	009a      	lsls	r2, r3, #2
   176ae:	23e2      	movs	r3, #226	; 0xe2
   176b0:	00db      	lsls	r3, r3, #3
   176b2:	188a      	adds	r2, r1, r2
   176b4:	18d3      	adds	r3, r2, r3
   176b6:	781b      	ldrb	r3, [r3, #0]
   176b8:	2ba7      	cmp	r3, #167	; 0xa7
   176ba:	d829      	bhi.n	17710 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
   176bc:	4b3a      	ldr	r3, [pc, #232]	; (177a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   176be:	6819      	ldr	r1, [r3, #0]
   176c0:	693b      	ldr	r3, [r7, #16]
   176c2:	009a      	lsls	r2, r3, #2
   176c4:	23e2      	movs	r3, #226	; 0xe2
   176c6:	00db      	lsls	r3, r3, #3
   176c8:	188a      	adds	r2, r1, r2
   176ca:	18d3      	adds	r3, r2, r3
   176cc:	781a      	ldrb	r2, [r3, #0]
   176ce:	230f      	movs	r3, #15
   176d0:	18fb      	adds	r3, r7, r3
   176d2:	3268      	adds	r2, #104	; 0x68
   176d4:	701a      	strb	r2, [r3, #0]
   176d6:	230f      	movs	r3, #15
   176d8:	18fb      	adds	r3, r7, r3
   176da:	781a      	ldrb	r2, [r3, #0]
   176dc:	693b      	ldr	r3, [r7, #16]
   176de:	18d2      	adds	r2, r2, r3
   176e0:	4b31      	ldr	r3, [pc, #196]	; (177a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   176e2:	681b      	ldr	r3, [r3, #0]
   176e4:	699b      	ldr	r3, [r3, #24]
   176e6:	429a      	cmp	r2, r3
   176e8:	d24d      	bcs.n	17786 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
   176ea:	4b2f      	ldr	r3, [pc, #188]	; (177a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   176ec:	681a      	ldr	r2, [r3, #0]
   176ee:	693b      	ldr	r3, [r7, #16]
   176f0:	009b      	lsls	r3, r3, #2
   176f2:	21e2      	movs	r1, #226	; 0xe2
   176f4:	00c9      	lsls	r1, r1, #3
   176f6:	468c      	mov	ip, r1
   176f8:	4463      	add	r3, ip
   176fa:	18d0      	adds	r0, r2, r3
   176fc:	230f      	movs	r3, #15
   176fe:	18fb      	adds	r3, r7, r3
   17700:	781b      	ldrb	r3, [r3, #0]
   17702:	3301      	adds	r3, #1
   17704:	009b      	lsls	r3, r3, #2
   17706:	001a      	movs	r2, r3
   17708:	2100      	movs	r1, #0
   1770a:	4b28      	ldr	r3, [pc, #160]	; (177ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1770c:	4798      	blx	r3
   1770e:	e03a      	b.n	17786 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
   17710:	4b25      	ldr	r3, [pc, #148]	; (177a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   17712:	6819      	ldr	r1, [r3, #0]
   17714:	693b      	ldr	r3, [r7, #16]
   17716:	009a      	lsls	r2, r3, #2
   17718:	23e2      	movs	r3, #226	; 0xe2
   1771a:	00db      	lsls	r3, r3, #3
   1771c:	188a      	adds	r2, r1, r2
   1771e:	18d3      	adds	r3, r2, r3
   17720:	781b      	ldrb	r3, [r3, #0]
   17722:	2b01      	cmp	r3, #1
   17724:	d130      	bne.n	17788 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
   17726:	693b      	ldr	r3, [r7, #16]
   17728:	1c5a      	adds	r2, r3, #1
   1772a:	4b1f      	ldr	r3, [pc, #124]	; (177a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1772c:	681b      	ldr	r3, [r3, #0]
   1772e:	699b      	ldr	r3, [r3, #24]
   17730:	429a      	cmp	r2, r3
   17732:	d20e      	bcs.n	17752 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
   17734:	4b1c      	ldr	r3, [pc, #112]	; (177a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   17736:	681a      	ldr	r2, [r3, #0]
   17738:	693b      	ldr	r3, [r7, #16]
   1773a:	009b      	lsls	r3, r3, #2
   1773c:	21e2      	movs	r1, #226	; 0xe2
   1773e:	00c9      	lsls	r1, r1, #3
   17740:	468c      	mov	ip, r1
   17742:	4463      	add	r3, ip
   17744:	18d3      	adds	r3, r2, r3
   17746:	2208      	movs	r2, #8
   17748:	2100      	movs	r1, #0
   1774a:	0018      	movs	r0, r3
   1774c:	4b17      	ldr	r3, [pc, #92]	; (177ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1774e:	4798      	blx	r3
   17750:	e01a      	b.n	17788 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
   17752:	4b15      	ldr	r3, [pc, #84]	; (177a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   17754:	681b      	ldr	r3, [r3, #0]
   17756:	22e2      	movs	r2, #226	; 0xe2
   17758:	00d2      	lsls	r2, r2, #3
   1775a:	4694      	mov	ip, r2
   1775c:	4463      	add	r3, ip
   1775e:	2204      	movs	r2, #4
   17760:	2100      	movs	r1, #0
   17762:	0018      	movs	r0, r3
   17764:	4b11      	ldr	r3, [pc, #68]	; (177ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   17766:	4798      	blx	r3
   17768:	4b0f      	ldr	r3, [pc, #60]	; (177a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1776a:	681a      	ldr	r2, [r3, #0]
   1776c:	693b      	ldr	r3, [r7, #16]
   1776e:	009b      	lsls	r3, r3, #2
   17770:	21e2      	movs	r1, #226	; 0xe2
   17772:	00c9      	lsls	r1, r1, #3
   17774:	468c      	mov	ip, r1
   17776:	4463      	add	r3, ip
   17778:	18d3      	adds	r3, r2, r3
   1777a:	2204      	movs	r2, #4
   1777c:	2100      	movs	r1, #0
   1777e:	0018      	movs	r0, r3
   17780:	4b0a      	ldr	r3, [pc, #40]	; (177ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   17782:	4798      	blx	r3
   17784:	e000      	b.n	17788 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
   17786:	46c0      	nop			; (mov r8, r8)
   17788:	697b      	ldr	r3, [r7, #20]
   1778a:	3301      	adds	r3, #1
   1778c:	617b      	str	r3, [r7, #20]
   1778e:	1dfb      	adds	r3, r7, #7
   17790:	781a      	ldrb	r2, [r3, #0]
   17792:	697b      	ldr	r3, [r7, #20]
   17794:	429a      	cmp	r2, r3
   17796:	d900      	bls.n	1779a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   17798:	e774      	b.n	17684 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
   1779a:	46bd      	mov	sp, r7
   1779c:	b006      	add	sp, #24
   1779e:	bd80      	pop	{r7, pc}
   177a0:	00035444 	.word	0x00035444
   177a4:	000175f5 	.word	0x000175f5
   177a8:	20000c34 	.word	0x20000c34
   177ac:	000321a3 	.word	0x000321a3

000177b0 <prvTraceUpdateCounters>:
   177b0:	b580      	push	{r7, lr}
   177b2:	af00      	add	r7, sp, #0
   177b4:	4b12      	ldr	r3, [pc, #72]	; (17800 <prvTraceUpdateCounters+0x50>)
   177b6:	681b      	ldr	r3, [r3, #0]
   177b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   177ba:	2b00      	cmp	r3, #0
   177bc:	d01c      	beq.n	177f8 <prvTraceUpdateCounters+0x48>
   177be:	4b10      	ldr	r3, [pc, #64]	; (17800 <prvTraceUpdateCounters+0x50>)
   177c0:	681b      	ldr	r3, [r3, #0]
   177c2:	695a      	ldr	r2, [r3, #20]
   177c4:	3201      	adds	r2, #1
   177c6:	615a      	str	r2, [r3, #20]
   177c8:	4b0d      	ldr	r3, [pc, #52]	; (17800 <prvTraceUpdateCounters+0x50>)
   177ca:	681b      	ldr	r3, [r3, #0]
   177cc:	69da      	ldr	r2, [r3, #28]
   177ce:	3201      	adds	r2, #1
   177d0:	61da      	str	r2, [r3, #28]
   177d2:	4b0b      	ldr	r3, [pc, #44]	; (17800 <prvTraceUpdateCounters+0x50>)
   177d4:	681b      	ldr	r3, [r3, #0]
   177d6:	69da      	ldr	r2, [r3, #28]
   177d8:	232c      	movs	r3, #44	; 0x2c
   177da:	33ff      	adds	r3, #255	; 0xff
   177dc:	429a      	cmp	r2, r3
   177de:	d907      	bls.n	177f0 <prvTraceUpdateCounters+0x40>
   177e0:	4b07      	ldr	r3, [pc, #28]	; (17800 <prvTraceUpdateCounters+0x50>)
   177e2:	681b      	ldr	r3, [r3, #0]
   177e4:	2201      	movs	r2, #1
   177e6:	621a      	str	r2, [r3, #32]
   177e8:	4b05      	ldr	r3, [pc, #20]	; (17800 <prvTraceUpdateCounters+0x50>)
   177ea:	681b      	ldr	r3, [r3, #0]
   177ec:	2200      	movs	r2, #0
   177ee:	61da      	str	r2, [r3, #28]
   177f0:	2001      	movs	r0, #1
   177f2:	4b04      	ldr	r3, [pc, #16]	; (17804 <prvTraceUpdateCounters+0x54>)
   177f4:	4798      	blx	r3
   177f6:	e000      	b.n	177fa <prvTraceUpdateCounters+0x4a>
   177f8:	46c0      	nop			; (mov r8, r8)
   177fa:	46bd      	mov	sp, r7
   177fc:	bd80      	pop	{r7, pc}
   177fe:	46c0      	nop			; (mov r8, r8)
   17800:	20000c34 	.word	0x20000c34
   17804:	0001765d 	.word	0x0001765d

00017808 <prvTraceGetDTS>:
   17808:	b5b0      	push	{r4, r5, r7, lr}
   1780a:	b086      	sub	sp, #24
   1780c:	af00      	add	r7, sp, #0
   1780e:	0002      	movs	r2, r0
   17810:	1dbb      	adds	r3, r7, #6
   17812:	801a      	strh	r2, [r3, #0]
   17814:	2300      	movs	r3, #0
   17816:	617b      	str	r3, [r7, #20]
   17818:	2300      	movs	r3, #0
   1781a:	613b      	str	r3, [r7, #16]
   1781c:	2300      	movs	r3, #0
   1781e:	60fb      	str	r3, [r7, #12]
   17820:	1dbb      	adds	r3, r7, #6
   17822:	881b      	ldrh	r3, [r3, #0]
   17824:	2bff      	cmp	r3, #255	; 0xff
   17826:	d00a      	beq.n	1783e <prvTraceGetDTS+0x36>
   17828:	1dbb      	adds	r3, r7, #6
   1782a:	881b      	ldrh	r3, [r3, #0]
   1782c:	4a60      	ldr	r2, [pc, #384]	; (179b0 <prvTraceGetDTS+0x1a8>)
   1782e:	4293      	cmp	r3, r2
   17830:	d005      	beq.n	1783e <prvTraceGetDTS+0x36>
   17832:	4b60      	ldr	r3, [pc, #384]	; (179b4 <prvTraceGetDTS+0x1ac>)
   17834:	0018      	movs	r0, r3
   17836:	4b60      	ldr	r3, [pc, #384]	; (179b8 <prvTraceGetDTS+0x1b0>)
   17838:	4798      	blx	r3
   1783a:	2300      	movs	r3, #0
   1783c:	e0b3      	b.n	179a6 <prvTraceGetDTS+0x19e>
   1783e:	4b5f      	ldr	r3, [pc, #380]	; (179bc <prvTraceGetDTS+0x1b4>)
   17840:	681b      	ldr	r3, [r3, #0]
   17842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17844:	2b00      	cmp	r3, #0
   17846:	d118      	bne.n	1787a <prvTraceGetDTS+0x72>
   17848:	4b5d      	ldr	r3, [pc, #372]	; (179c0 <prvTraceGetDTS+0x1b8>)
   1784a:	681b      	ldr	r3, [r3, #0]
   1784c:	2b00      	cmp	r3, #0
   1784e:	d006      	beq.n	1785e <prvTraceGetDTS+0x56>
   17850:	4b5a      	ldr	r3, [pc, #360]	; (179bc <prvTraceGetDTS+0x1b4>)
   17852:	681b      	ldr	r3, [r3, #0]
   17854:	4a5a      	ldr	r2, [pc, #360]	; (179c0 <prvTraceGetDTS+0x1b8>)
   17856:	6812      	ldr	r2, [r2, #0]
   17858:	0892      	lsrs	r2, r2, #2
   1785a:	625a      	str	r2, [r3, #36]	; 0x24
   1785c:	e00d      	b.n	1787a <prvTraceGetDTS+0x72>
   1785e:	4b59      	ldr	r3, [pc, #356]	; (179c4 <prvTraceGetDTS+0x1bc>)
   17860:	681a      	ldr	r2, [r3, #0]
   17862:	4b59      	ldr	r3, [pc, #356]	; (179c8 <prvTraceGetDTS+0x1c0>)
   17864:	681b      	ldr	r3, [r3, #0]
   17866:	429a      	cmp	r2, r3
   17868:	d007      	beq.n	1787a <prvTraceGetDTS+0x72>
   1786a:	4b54      	ldr	r3, [pc, #336]	; (179bc <prvTraceGetDTS+0x1b4>)
   1786c:	681c      	ldr	r4, [r3, #0]
   1786e:	2000      	movs	r0, #0
   17870:	4b56      	ldr	r3, [pc, #344]	; (179cc <prvTraceGetDTS+0x1c4>)
   17872:	4798      	blx	r3
   17874:	0003      	movs	r3, r0
   17876:	089b      	lsrs	r3, r3, #2
   17878:	6263      	str	r3, [r4, #36]	; 0x24
   1787a:	230c      	movs	r3, #12
   1787c:	18fb      	adds	r3, r7, r3
   1787e:	0018      	movs	r0, r3
   17880:	4b53      	ldr	r3, [pc, #332]	; (179d0 <prvTraceGetDTS+0x1c8>)
   17882:	4798      	blx	r3
   17884:	68fa      	ldr	r2, [r7, #12]
   17886:	4b53      	ldr	r3, [pc, #332]	; (179d4 <prvTraceGetDTS+0x1cc>)
   17888:	681b      	ldr	r3, [r3, #0]
   1788a:	1ad3      	subs	r3, r2, r3
   1788c:	613b      	str	r3, [r7, #16]
   1788e:	68fa      	ldr	r2, [r7, #12]
   17890:	4b50      	ldr	r3, [pc, #320]	; (179d4 <prvTraceGetDTS+0x1cc>)
   17892:	601a      	str	r2, [r3, #0]
   17894:	4b49      	ldr	r3, [pc, #292]	; (179bc <prvTraceGetDTS+0x1b4>)
   17896:	681b      	ldr	r3, [r3, #0]
   17898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1789a:	2b00      	cmp	r3, #0
   1789c:	d044      	beq.n	17928 <prvTraceGetDTS+0x120>
   1789e:	4b47      	ldr	r3, [pc, #284]	; (179bc <prvTraceGetDTS+0x1b4>)
   178a0:	681b      	ldr	r3, [r3, #0]
   178a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   178a4:	693b      	ldr	r3, [r7, #16]
   178a6:	429a      	cmp	r2, r3
   178a8:	d21e      	bcs.n	178e8 <prvTraceGetDTS+0xe0>
   178aa:	4b44      	ldr	r3, [pc, #272]	; (179bc <prvTraceGetDTS+0x1b4>)
   178ac:	681c      	ldr	r4, [r3, #0]
   178ae:	4b43      	ldr	r3, [pc, #268]	; (179bc <prvTraceGetDTS+0x1b4>)
   178b0:	681b      	ldr	r3, [r3, #0]
   178b2:	6add      	ldr	r5, [r3, #44]	; 0x2c
   178b4:	4b41      	ldr	r3, [pc, #260]	; (179bc <prvTraceGetDTS+0x1b4>)
   178b6:	681b      	ldr	r3, [r3, #0]
   178b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   178ba:	4b47      	ldr	r3, [pc, #284]	; (179d8 <prvTraceGetDTS+0x1d0>)
   178bc:	0011      	movs	r1, r2
   178be:	6938      	ldr	r0, [r7, #16]
   178c0:	4798      	blx	r3
   178c2:	0003      	movs	r3, r0
   178c4:	18eb      	adds	r3, r5, r3
   178c6:	62e3      	str	r3, [r4, #44]	; 0x2c
   178c8:	4b3c      	ldr	r3, [pc, #240]	; (179bc <prvTraceGetDTS+0x1b4>)
   178ca:	681c      	ldr	r4, [r3, #0]
   178cc:	4b3b      	ldr	r3, [pc, #236]	; (179bc <prvTraceGetDTS+0x1b4>)
   178ce:	681b      	ldr	r3, [r3, #0]
   178d0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   178d2:	4b3a      	ldr	r3, [pc, #232]	; (179bc <prvTraceGetDTS+0x1b4>)
   178d4:	681b      	ldr	r3, [r3, #0]
   178d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
   178d8:	693a      	ldr	r2, [r7, #16]
   178da:	4b40      	ldr	r3, [pc, #256]	; (179dc <prvTraceGetDTS+0x1d4>)
   178dc:	0010      	movs	r0, r2
   178de:	4798      	blx	r3
   178e0:	000b      	movs	r3, r1
   178e2:	18eb      	adds	r3, r5, r3
   178e4:	62a3      	str	r3, [r4, #40]	; 0x28
   178e6:	e007      	b.n	178f8 <prvTraceGetDTS+0xf0>
   178e8:	4b34      	ldr	r3, [pc, #208]	; (179bc <prvTraceGetDTS+0x1b4>)
   178ea:	681b      	ldr	r3, [r3, #0]
   178ec:	4a33      	ldr	r2, [pc, #204]	; (179bc <prvTraceGetDTS+0x1b4>)
   178ee:	6812      	ldr	r2, [r2, #0]
   178f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
   178f2:	693a      	ldr	r2, [r7, #16]
   178f4:	188a      	adds	r2, r1, r2
   178f6:	629a      	str	r2, [r3, #40]	; 0x28
   178f8:	4b30      	ldr	r3, [pc, #192]	; (179bc <prvTraceGetDTS+0x1b4>)
   178fa:	681b      	ldr	r3, [r3, #0]
   178fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   178fe:	4b2f      	ldr	r3, [pc, #188]	; (179bc <prvTraceGetDTS+0x1b4>)
   17900:	681b      	ldr	r3, [r3, #0]
   17902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17904:	429a      	cmp	r2, r3
   17906:	d313      	bcc.n	17930 <prvTraceGetDTS+0x128>
   17908:	4b2c      	ldr	r3, [pc, #176]	; (179bc <prvTraceGetDTS+0x1b4>)
   1790a:	681b      	ldr	r3, [r3, #0]
   1790c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1790e:	3201      	adds	r2, #1
   17910:	62da      	str	r2, [r3, #44]	; 0x2c
   17912:	4b2a      	ldr	r3, [pc, #168]	; (179bc <prvTraceGetDTS+0x1b4>)
   17914:	681b      	ldr	r3, [r3, #0]
   17916:	4a29      	ldr	r2, [pc, #164]	; (179bc <prvTraceGetDTS+0x1b4>)
   17918:	6812      	ldr	r2, [r2, #0]
   1791a:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1791c:	4a27      	ldr	r2, [pc, #156]	; (179bc <prvTraceGetDTS+0x1b4>)
   1791e:	6812      	ldr	r2, [r2, #0]
   17920:	6a52      	ldr	r2, [r2, #36]	; 0x24
   17922:	1a8a      	subs	r2, r1, r2
   17924:	629a      	str	r2, [r3, #40]	; 0x28
   17926:	e003      	b.n	17930 <prvTraceGetDTS+0x128>
   17928:	4b24      	ldr	r3, [pc, #144]	; (179bc <prvTraceGetDTS+0x1b4>)
   1792a:	681b      	ldr	r3, [r3, #0]
   1792c:	68fa      	ldr	r2, [r7, #12]
   1792e:	629a      	str	r2, [r3, #40]	; 0x28
   17930:	1dbb      	adds	r3, r7, #6
   17932:	881a      	ldrh	r2, [r3, #0]
   17934:	693b      	ldr	r3, [r7, #16]
   17936:	429a      	cmp	r2, r3
   17938:	d22f      	bcs.n	1799a <prvTraceGetDTS+0x192>
   1793a:	4b29      	ldr	r3, [pc, #164]	; (179e0 <prvTraceGetDTS+0x1d8>)
   1793c:	4798      	blx	r3
   1793e:	0003      	movs	r3, r0
   17940:	617b      	str	r3, [r7, #20]
   17942:	697b      	ldr	r3, [r7, #20]
   17944:	2b00      	cmp	r3, #0
   17946:	d028      	beq.n	1799a <prvTraceGetDTS+0x192>
   17948:	1dbb      	adds	r3, r7, #6
   1794a:	881b      	ldrh	r3, [r3, #0]
   1794c:	4a18      	ldr	r2, [pc, #96]	; (179b0 <prvTraceGetDTS+0x1a8>)
   1794e:	4293      	cmp	r3, r2
   17950:	d10b      	bne.n	1796a <prvTraceGetDTS+0x162>
   17952:	697b      	ldr	r3, [r7, #20]
   17954:	22a9      	movs	r2, #169	; 0xa9
   17956:	701a      	strb	r2, [r3, #0]
   17958:	693b      	ldr	r3, [r7, #16]
   1795a:	0c1b      	lsrs	r3, r3, #16
   1795c:	b29a      	uxth	r2, r3
   1795e:	697b      	ldr	r3, [r7, #20]
   17960:	805a      	strh	r2, [r3, #2]
   17962:	697b      	ldr	r3, [r7, #20]
   17964:	2200      	movs	r2, #0
   17966:	705a      	strb	r2, [r3, #1]
   17968:	e015      	b.n	17996 <prvTraceGetDTS+0x18e>
   1796a:	1dbb      	adds	r3, r7, #6
   1796c:	881b      	ldrh	r3, [r3, #0]
   1796e:	2bff      	cmp	r3, #255	; 0xff
   17970:	d10d      	bne.n	1798e <prvTraceGetDTS+0x186>
   17972:	697b      	ldr	r3, [r7, #20]
   17974:	22a8      	movs	r2, #168	; 0xa8
   17976:	701a      	strb	r2, [r3, #0]
   17978:	693b      	ldr	r3, [r7, #16]
   1797a:	0a1b      	lsrs	r3, r3, #8
   1797c:	b29a      	uxth	r2, r3
   1797e:	697b      	ldr	r3, [r7, #20]
   17980:	805a      	strh	r2, [r3, #2]
   17982:	693b      	ldr	r3, [r7, #16]
   17984:	0e1b      	lsrs	r3, r3, #24
   17986:	b2da      	uxtb	r2, r3
   17988:	697b      	ldr	r3, [r7, #20]
   1798a:	705a      	strb	r2, [r3, #1]
   1798c:	e003      	b.n	17996 <prvTraceGetDTS+0x18e>
   1798e:	4b15      	ldr	r3, [pc, #84]	; (179e4 <prvTraceGetDTS+0x1dc>)
   17990:	0018      	movs	r0, r3
   17992:	4b09      	ldr	r3, [pc, #36]	; (179b8 <prvTraceGetDTS+0x1b0>)
   17994:	4798      	blx	r3
   17996:	4b14      	ldr	r3, [pc, #80]	; (179e8 <prvTraceGetDTS+0x1e0>)
   17998:	4798      	blx	r3
   1799a:	693b      	ldr	r3, [r7, #16]
   1799c:	b29b      	uxth	r3, r3
   1799e:	1dba      	adds	r2, r7, #6
   179a0:	8812      	ldrh	r2, [r2, #0]
   179a2:	4013      	ands	r3, r2
   179a4:	b29b      	uxth	r3, r3
   179a6:	0018      	movs	r0, r3
   179a8:	46bd      	mov	sp, r7
   179aa:	b006      	add	sp, #24
   179ac:	bdb0      	pop	{r4, r5, r7, pc}
   179ae:	46c0      	nop			; (mov r8, r8)
   179b0:	0000ffff 	.word	0x0000ffff
   179b4:	0003549c 	.word	0x0003549c
   179b8:	000175f5 	.word	0x000175f5
   179bc:	20000c34 	.word	0x20000c34
   179c0:	20000b90 	.word	0x20000b90
   179c4:	e000e018 	.word	0xe000e018
   179c8:	20004f3c 	.word	0x20004f3c
   179cc:	000279a5 	.word	0x000279a5
   179d0:	000179ed 	.word	0x000179ed
   179d4:	20000c40 	.word	0x20000c40
   179d8:	000304e9 	.word	0x000304e9
   179dc:	000305f5 	.word	0x000305f5
   179e0:	000171ad 	.word	0x000171ad
   179e4:	000354dc 	.word	0x000354dc
   179e8:	000177b1 	.word	0x000177b1

000179ec <prvTracePortGetTimeStamp>:
   179ec:	b580      	push	{r7, lr}
   179ee:	b084      	sub	sp, #16
   179f0:	af00      	add	r7, sp, #0
   179f2:	6078      	str	r0, [r7, #4]
   179f4:	2300      	movs	r3, #0
   179f6:	60bb      	str	r3, [r7, #8]
   179f8:	2300      	movs	r3, #0
   179fa:	60fb      	str	r3, [r7, #12]
   179fc:	4b2d      	ldr	r3, [pc, #180]	; (17ab4 <prvTracePortGetTimeStamp+0xc8>)
   179fe:	681b      	ldr	r3, [r3, #0]
   17a00:	2b01      	cmp	r3, #1
   17a02:	d107      	bne.n	17a14 <prvTracePortGetTimeStamp+0x28>
   17a04:	687b      	ldr	r3, [r7, #4]
   17a06:	2b00      	cmp	r3, #0
   17a08:	d04f      	beq.n	17aaa <prvTracePortGetTimeStamp+0xbe>
   17a0a:	4b2b      	ldr	r3, [pc, #172]	; (17ab8 <prvTracePortGetTimeStamp+0xcc>)
   17a0c:	681a      	ldr	r2, [r3, #0]
   17a0e:	687b      	ldr	r3, [r7, #4]
   17a10:	601a      	str	r2, [r3, #0]
   17a12:	e04a      	b.n	17aaa <prvTracePortGetTimeStamp+0xbe>
   17a14:	4b29      	ldr	r3, [pc, #164]	; (17abc <prvTracePortGetTimeStamp+0xd0>)
   17a16:	681a      	ldr	r2, [r3, #0]
   17a18:	4b29      	ldr	r3, [pc, #164]	; (17ac0 <prvTracePortGetTimeStamp+0xd4>)
   17a1a:	681b      	ldr	r3, [r3, #0]
   17a1c:	1ad3      	subs	r3, r2, r3
   17a1e:	3301      	adds	r3, #1
   17a20:	60bb      	str	r3, [r7, #8]
   17a22:	4b28      	ldr	r3, [pc, #160]	; (17ac4 <prvTracePortGetTimeStamp+0xd8>)
   17a24:	681a      	ldr	r2, [r3, #0]
   17a26:	4b28      	ldr	r3, [pc, #160]	; (17ac8 <prvTracePortGetTimeStamp+0xdc>)
   17a28:	681b      	ldr	r3, [r3, #0]
   17a2a:	1ad3      	subs	r3, r2, r3
   17a2c:	3b01      	subs	r3, #1
   17a2e:	2b00      	cmp	r3, #0
   17a30:	db03      	blt.n	17a3a <prvTracePortGetTimeStamp+0x4e>
   17a32:	4b24      	ldr	r3, [pc, #144]	; (17ac4 <prvTracePortGetTimeStamp+0xd8>)
   17a34:	681b      	ldr	r3, [r3, #0]
   17a36:	60fb      	str	r3, [r7, #12]
   17a38:	e002      	b.n	17a40 <prvTracePortGetTimeStamp+0x54>
   17a3a:	4b23      	ldr	r3, [pc, #140]	; (17ac8 <prvTracePortGetTimeStamp+0xdc>)
   17a3c:	681b      	ldr	r3, [r3, #0]
   17a3e:	60fb      	str	r3, [r7, #12]
   17a40:	4b20      	ldr	r3, [pc, #128]	; (17ac4 <prvTracePortGetTimeStamp+0xd8>)
   17a42:	681b      	ldr	r3, [r3, #0]
   17a44:	68fa      	ldr	r2, [r7, #12]
   17a46:	429a      	cmp	r2, r3
   17a48:	d107      	bne.n	17a5a <prvTracePortGetTimeStamp+0x6e>
   17a4a:	4b20      	ldr	r3, [pc, #128]	; (17acc <prvTracePortGetTimeStamp+0xe0>)
   17a4c:	681b      	ldr	r3, [r3, #0]
   17a4e:	68ba      	ldr	r2, [r7, #8]
   17a50:	429a      	cmp	r2, r3
   17a52:	d202      	bcs.n	17a5a <prvTracePortGetTimeStamp+0x6e>
   17a54:	68fb      	ldr	r3, [r7, #12]
   17a56:	3301      	adds	r3, #1
   17a58:	60fb      	str	r3, [r7, #12]
   17a5a:	687b      	ldr	r3, [r7, #4]
   17a5c:	2b00      	cmp	r3, #0
   17a5e:	d016      	beq.n	17a8e <prvTracePortGetTimeStamp+0xa2>
   17a60:	4b16      	ldr	r3, [pc, #88]	; (17abc <prvTracePortGetTimeStamp+0xd0>)
   17a62:	681b      	ldr	r3, [r3, #0]
   17a64:	3301      	adds	r3, #1
   17a66:	089b      	lsrs	r3, r3, #2
   17a68:	68fa      	ldr	r2, [r7, #12]
   17a6a:	435a      	muls	r2, r3
   17a6c:	4b12      	ldr	r3, [pc, #72]	; (17ab8 <prvTracePortGetTimeStamp+0xcc>)
   17a6e:	601a      	str	r2, [r3, #0]
   17a70:	4b12      	ldr	r3, [pc, #72]	; (17abc <prvTracePortGetTimeStamp+0xd0>)
   17a72:	681b      	ldr	r3, [r3, #0]
   17a74:	3301      	adds	r3, #1
   17a76:	2203      	movs	r2, #3
   17a78:	4013      	ands	r3, r2
   17a7a:	68fa      	ldr	r2, [r7, #12]
   17a7c:	435a      	muls	r2, r3
   17a7e:	68bb      	ldr	r3, [r7, #8]
   17a80:	18d3      	adds	r3, r2, r3
   17a82:	089a      	lsrs	r2, r3, #2
   17a84:	4b0c      	ldr	r3, [pc, #48]	; (17ab8 <prvTracePortGetTimeStamp+0xcc>)
   17a86:	681b      	ldr	r3, [r3, #0]
   17a88:	18d2      	adds	r2, r2, r3
   17a8a:	4b0b      	ldr	r3, [pc, #44]	; (17ab8 <prvTracePortGetTimeStamp+0xcc>)
   17a8c:	601a      	str	r2, [r3, #0]
   17a8e:	4b0d      	ldr	r3, [pc, #52]	; (17ac4 <prvTracePortGetTimeStamp+0xd8>)
   17a90:	68fa      	ldr	r2, [r7, #12]
   17a92:	601a      	str	r2, [r3, #0]
   17a94:	687b      	ldr	r3, [r7, #4]
   17a96:	2b00      	cmp	r3, #0
   17a98:	d003      	beq.n	17aa2 <prvTracePortGetTimeStamp+0xb6>
   17a9a:	4b07      	ldr	r3, [pc, #28]	; (17ab8 <prvTracePortGetTimeStamp+0xcc>)
   17a9c:	681a      	ldr	r2, [r3, #0]
   17a9e:	687b      	ldr	r3, [r7, #4]
   17aa0:	601a      	str	r2, [r3, #0]
   17aa2:	4b0a      	ldr	r3, [pc, #40]	; (17acc <prvTracePortGetTimeStamp+0xe0>)
   17aa4:	68ba      	ldr	r2, [r7, #8]
   17aa6:	601a      	str	r2, [r3, #0]
   17aa8:	e000      	b.n	17aac <prvTracePortGetTimeStamp+0xc0>
   17aaa:	46c0      	nop			; (mov r8, r8)
   17aac:	46bd      	mov	sp, r7
   17aae:	b004      	add	sp, #16
   17ab0:	bd80      	pop	{r7, pc}
   17ab2:	46c0      	nop			; (mov r8, r8)
   17ab4:	20000b80 	.word	0x20000b80
   17ab8:	20000b84 	.word	0x20000b84
   17abc:	e000e014 	.word	0xe000e014
   17ac0:	e000e018 	.word	0xe000e018
   17ac4:	20000c44 	.word	0x20000c44
   17ac8:	20000b7c 	.word	0x20000b7c
   17acc:	20000c48 	.word	0x20000c48

00017ad0 <vListInitialise>:
   17ad0:	b580      	push	{r7, lr}
   17ad2:	b082      	sub	sp, #8
   17ad4:	af00      	add	r7, sp, #0
   17ad6:	6078      	str	r0, [r7, #4]
   17ad8:	687b      	ldr	r3, [r7, #4]
   17ada:	3308      	adds	r3, #8
   17adc:	001a      	movs	r2, r3
   17ade:	687b      	ldr	r3, [r7, #4]
   17ae0:	605a      	str	r2, [r3, #4]
   17ae2:	687b      	ldr	r3, [r7, #4]
   17ae4:	2201      	movs	r2, #1
   17ae6:	4252      	negs	r2, r2
   17ae8:	609a      	str	r2, [r3, #8]
   17aea:	687b      	ldr	r3, [r7, #4]
   17aec:	3308      	adds	r3, #8
   17aee:	001a      	movs	r2, r3
   17af0:	687b      	ldr	r3, [r7, #4]
   17af2:	60da      	str	r2, [r3, #12]
   17af4:	687b      	ldr	r3, [r7, #4]
   17af6:	3308      	adds	r3, #8
   17af8:	001a      	movs	r2, r3
   17afa:	687b      	ldr	r3, [r7, #4]
   17afc:	611a      	str	r2, [r3, #16]
   17afe:	687b      	ldr	r3, [r7, #4]
   17b00:	2200      	movs	r2, #0
   17b02:	601a      	str	r2, [r3, #0]
   17b04:	46c0      	nop			; (mov r8, r8)
   17b06:	46bd      	mov	sp, r7
   17b08:	b002      	add	sp, #8
   17b0a:	bd80      	pop	{r7, pc}

00017b0c <vListInitialiseItem>:
   17b0c:	b580      	push	{r7, lr}
   17b0e:	b082      	sub	sp, #8
   17b10:	af00      	add	r7, sp, #0
   17b12:	6078      	str	r0, [r7, #4]
   17b14:	687b      	ldr	r3, [r7, #4]
   17b16:	2200      	movs	r2, #0
   17b18:	611a      	str	r2, [r3, #16]
   17b1a:	46c0      	nop			; (mov r8, r8)
   17b1c:	46bd      	mov	sp, r7
   17b1e:	b002      	add	sp, #8
   17b20:	bd80      	pop	{r7, pc}

00017b22 <vListInsertEnd>:
   17b22:	b580      	push	{r7, lr}
   17b24:	b084      	sub	sp, #16
   17b26:	af00      	add	r7, sp, #0
   17b28:	6078      	str	r0, [r7, #4]
   17b2a:	6039      	str	r1, [r7, #0]
   17b2c:	687b      	ldr	r3, [r7, #4]
   17b2e:	685b      	ldr	r3, [r3, #4]
   17b30:	60fb      	str	r3, [r7, #12]
   17b32:	683b      	ldr	r3, [r7, #0]
   17b34:	68fa      	ldr	r2, [r7, #12]
   17b36:	605a      	str	r2, [r3, #4]
   17b38:	68fb      	ldr	r3, [r7, #12]
   17b3a:	689a      	ldr	r2, [r3, #8]
   17b3c:	683b      	ldr	r3, [r7, #0]
   17b3e:	609a      	str	r2, [r3, #8]
   17b40:	68fb      	ldr	r3, [r7, #12]
   17b42:	689b      	ldr	r3, [r3, #8]
   17b44:	683a      	ldr	r2, [r7, #0]
   17b46:	605a      	str	r2, [r3, #4]
   17b48:	68fb      	ldr	r3, [r7, #12]
   17b4a:	683a      	ldr	r2, [r7, #0]
   17b4c:	609a      	str	r2, [r3, #8]
   17b4e:	683b      	ldr	r3, [r7, #0]
   17b50:	687a      	ldr	r2, [r7, #4]
   17b52:	611a      	str	r2, [r3, #16]
   17b54:	687b      	ldr	r3, [r7, #4]
   17b56:	681b      	ldr	r3, [r3, #0]
   17b58:	1c5a      	adds	r2, r3, #1
   17b5a:	687b      	ldr	r3, [r7, #4]
   17b5c:	601a      	str	r2, [r3, #0]
   17b5e:	46c0      	nop			; (mov r8, r8)
   17b60:	46bd      	mov	sp, r7
   17b62:	b004      	add	sp, #16
   17b64:	bd80      	pop	{r7, pc}

00017b66 <vListInsert>:
   17b66:	b580      	push	{r7, lr}
   17b68:	b084      	sub	sp, #16
   17b6a:	af00      	add	r7, sp, #0
   17b6c:	6078      	str	r0, [r7, #4]
   17b6e:	6039      	str	r1, [r7, #0]
   17b70:	683b      	ldr	r3, [r7, #0]
   17b72:	681b      	ldr	r3, [r3, #0]
   17b74:	60bb      	str	r3, [r7, #8]
   17b76:	68bb      	ldr	r3, [r7, #8]
   17b78:	3301      	adds	r3, #1
   17b7a:	d103      	bne.n	17b84 <vListInsert+0x1e>
   17b7c:	687b      	ldr	r3, [r7, #4]
   17b7e:	691b      	ldr	r3, [r3, #16]
   17b80:	60fb      	str	r3, [r7, #12]
   17b82:	e00c      	b.n	17b9e <vListInsert+0x38>
   17b84:	687b      	ldr	r3, [r7, #4]
   17b86:	3308      	adds	r3, #8
   17b88:	60fb      	str	r3, [r7, #12]
   17b8a:	e002      	b.n	17b92 <vListInsert+0x2c>
   17b8c:	68fb      	ldr	r3, [r7, #12]
   17b8e:	685b      	ldr	r3, [r3, #4]
   17b90:	60fb      	str	r3, [r7, #12]
   17b92:	68fb      	ldr	r3, [r7, #12]
   17b94:	685b      	ldr	r3, [r3, #4]
   17b96:	681a      	ldr	r2, [r3, #0]
   17b98:	68bb      	ldr	r3, [r7, #8]
   17b9a:	429a      	cmp	r2, r3
   17b9c:	d9f6      	bls.n	17b8c <vListInsert+0x26>
   17b9e:	68fb      	ldr	r3, [r7, #12]
   17ba0:	685a      	ldr	r2, [r3, #4]
   17ba2:	683b      	ldr	r3, [r7, #0]
   17ba4:	605a      	str	r2, [r3, #4]
   17ba6:	683b      	ldr	r3, [r7, #0]
   17ba8:	685b      	ldr	r3, [r3, #4]
   17baa:	683a      	ldr	r2, [r7, #0]
   17bac:	609a      	str	r2, [r3, #8]
   17bae:	683b      	ldr	r3, [r7, #0]
   17bb0:	68fa      	ldr	r2, [r7, #12]
   17bb2:	609a      	str	r2, [r3, #8]
   17bb4:	68fb      	ldr	r3, [r7, #12]
   17bb6:	683a      	ldr	r2, [r7, #0]
   17bb8:	605a      	str	r2, [r3, #4]
   17bba:	683b      	ldr	r3, [r7, #0]
   17bbc:	687a      	ldr	r2, [r7, #4]
   17bbe:	611a      	str	r2, [r3, #16]
   17bc0:	687b      	ldr	r3, [r7, #4]
   17bc2:	681b      	ldr	r3, [r3, #0]
   17bc4:	1c5a      	adds	r2, r3, #1
   17bc6:	687b      	ldr	r3, [r7, #4]
   17bc8:	601a      	str	r2, [r3, #0]
   17bca:	46c0      	nop			; (mov r8, r8)
   17bcc:	46bd      	mov	sp, r7
   17bce:	b004      	add	sp, #16
   17bd0:	bd80      	pop	{r7, pc}

00017bd2 <uxListRemove>:
   17bd2:	b580      	push	{r7, lr}
   17bd4:	b084      	sub	sp, #16
   17bd6:	af00      	add	r7, sp, #0
   17bd8:	6078      	str	r0, [r7, #4]
   17bda:	687b      	ldr	r3, [r7, #4]
   17bdc:	691b      	ldr	r3, [r3, #16]
   17bde:	60fb      	str	r3, [r7, #12]
   17be0:	687b      	ldr	r3, [r7, #4]
   17be2:	685b      	ldr	r3, [r3, #4]
   17be4:	687a      	ldr	r2, [r7, #4]
   17be6:	6892      	ldr	r2, [r2, #8]
   17be8:	609a      	str	r2, [r3, #8]
   17bea:	687b      	ldr	r3, [r7, #4]
   17bec:	689b      	ldr	r3, [r3, #8]
   17bee:	687a      	ldr	r2, [r7, #4]
   17bf0:	6852      	ldr	r2, [r2, #4]
   17bf2:	605a      	str	r2, [r3, #4]
   17bf4:	68fb      	ldr	r3, [r7, #12]
   17bf6:	685a      	ldr	r2, [r3, #4]
   17bf8:	687b      	ldr	r3, [r7, #4]
   17bfa:	429a      	cmp	r2, r3
   17bfc:	d103      	bne.n	17c06 <uxListRemove+0x34>
   17bfe:	687b      	ldr	r3, [r7, #4]
   17c00:	689a      	ldr	r2, [r3, #8]
   17c02:	68fb      	ldr	r3, [r7, #12]
   17c04:	605a      	str	r2, [r3, #4]
   17c06:	687b      	ldr	r3, [r7, #4]
   17c08:	2200      	movs	r2, #0
   17c0a:	611a      	str	r2, [r3, #16]
   17c0c:	68fb      	ldr	r3, [r7, #12]
   17c0e:	681b      	ldr	r3, [r3, #0]
   17c10:	1e5a      	subs	r2, r3, #1
   17c12:	68fb      	ldr	r3, [r7, #12]
   17c14:	601a      	str	r2, [r3, #0]
   17c16:	68fb      	ldr	r3, [r7, #12]
   17c18:	681b      	ldr	r3, [r3, #0]
   17c1a:	0018      	movs	r0, r3
   17c1c:	46bd      	mov	sp, r7
   17c1e:	b004      	add	sp, #16
   17c20:	bd80      	pop	{r7, pc}
	...

00017c24 <pxPortInitialiseStack>:
   17c24:	b580      	push	{r7, lr}
   17c26:	b084      	sub	sp, #16
   17c28:	af00      	add	r7, sp, #0
   17c2a:	60f8      	str	r0, [r7, #12]
   17c2c:	60b9      	str	r1, [r7, #8]
   17c2e:	607a      	str	r2, [r7, #4]
   17c30:	68fb      	ldr	r3, [r7, #12]
   17c32:	3b04      	subs	r3, #4
   17c34:	60fb      	str	r3, [r7, #12]
   17c36:	68fb      	ldr	r3, [r7, #12]
   17c38:	2280      	movs	r2, #128	; 0x80
   17c3a:	0452      	lsls	r2, r2, #17
   17c3c:	601a      	str	r2, [r3, #0]
   17c3e:	68fb      	ldr	r3, [r7, #12]
   17c40:	3b04      	subs	r3, #4
   17c42:	60fb      	str	r3, [r7, #12]
   17c44:	68ba      	ldr	r2, [r7, #8]
   17c46:	68fb      	ldr	r3, [r7, #12]
   17c48:	601a      	str	r2, [r3, #0]
   17c4a:	68fb      	ldr	r3, [r7, #12]
   17c4c:	3b04      	subs	r3, #4
   17c4e:	60fb      	str	r3, [r7, #12]
   17c50:	4a08      	ldr	r2, [pc, #32]	; (17c74 <pxPortInitialiseStack+0x50>)
   17c52:	68fb      	ldr	r3, [r7, #12]
   17c54:	601a      	str	r2, [r3, #0]
   17c56:	68fb      	ldr	r3, [r7, #12]
   17c58:	3b14      	subs	r3, #20
   17c5a:	60fb      	str	r3, [r7, #12]
   17c5c:	687a      	ldr	r2, [r7, #4]
   17c5e:	68fb      	ldr	r3, [r7, #12]
   17c60:	601a      	str	r2, [r3, #0]
   17c62:	68fb      	ldr	r3, [r7, #12]
   17c64:	3b20      	subs	r3, #32
   17c66:	60fb      	str	r3, [r7, #12]
   17c68:	68fb      	ldr	r3, [r7, #12]
   17c6a:	0018      	movs	r0, r3
   17c6c:	46bd      	mov	sp, r7
   17c6e:	b004      	add	sp, #16
   17c70:	bd80      	pop	{r7, pc}
   17c72:	46c0      	nop			; (mov r8, r8)
   17c74:	00017c79 	.word	0x00017c79

00017c78 <prvTaskExitError>:
   17c78:	b580      	push	{r7, lr}
   17c7a:	b082      	sub	sp, #8
   17c7c:	af00      	add	r7, sp, #0
   17c7e:	2300      	movs	r3, #0
   17c80:	607b      	str	r3, [r7, #4]
   17c82:	4b07      	ldr	r3, [pc, #28]	; (17ca0 <prvTaskExitError+0x28>)
   17c84:	681b      	ldr	r3, [r3, #0]
   17c86:	3301      	adds	r3, #1
   17c88:	d001      	beq.n	17c8e <prvTaskExitError+0x16>
   17c8a:	b672      	cpsid	i
   17c8c:	e7fe      	b.n	17c8c <prvTaskExitError+0x14>
   17c8e:	b672      	cpsid	i
   17c90:	46c0      	nop			; (mov r8, r8)
   17c92:	687b      	ldr	r3, [r7, #4]
   17c94:	2b00      	cmp	r3, #0
   17c96:	d0fc      	beq.n	17c92 <prvTaskExitError+0x1a>
   17c98:	46c0      	nop			; (mov r8, r8)
   17c9a:	46bd      	mov	sp, r7
   17c9c:	b002      	add	sp, #8
   17c9e:	bd80      	pop	{r7, pc}
   17ca0:	200000f4 	.word	0x200000f4

00017ca4 <SVC_Handler>:
   17ca4:	b580      	push	{r7, lr}
   17ca6:	af00      	add	r7, sp, #0
   17ca8:	46c0      	nop			; (mov r8, r8)
   17caa:	46bd      	mov	sp, r7
   17cac:	bd80      	pop	{r7, pc}
	...

00017cb0 <vPortStartFirstTask>:
   17cb0:	4a0b      	ldr	r2, [pc, #44]	; (17ce0 <pxCurrentTCBConst2>)
   17cb2:	6813      	ldr	r3, [r2, #0]
   17cb4:	6818      	ldr	r0, [r3, #0]
   17cb6:	3020      	adds	r0, #32
   17cb8:	f380 8809 	msr	PSP, r0
   17cbc:	2002      	movs	r0, #2
   17cbe:	f380 8814 	msr	CONTROL, r0
   17cc2:	f3bf 8f6f 	isb	sy
   17cc6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   17cc8:	46ae      	mov	lr, r5
   17cca:	bc08      	pop	{r3}
   17ccc:	bc04      	pop	{r2}
   17cce:	b662      	cpsie	i
   17cd0:	4718      	bx	r3
   17cd2:	46c0      	nop			; (mov r8, r8)
   17cd4:	46c0      	nop			; (mov r8, r8)
   17cd6:	46c0      	nop			; (mov r8, r8)
   17cd8:	46c0      	nop			; (mov r8, r8)
   17cda:	46c0      	nop			; (mov r8, r8)
   17cdc:	46c0      	nop			; (mov r8, r8)
   17cde:	46c0      	nop			; (mov r8, r8)

00017ce0 <pxCurrentTCBConst2>:
   17ce0:	20003b34 	.word	0x20003b34
   17ce4:	46c0      	nop			; (mov r8, r8)
   17ce6:	46c0      	nop			; (mov r8, r8)

00017ce8 <xPortStartScheduler>:
   17ce8:	b580      	push	{r7, lr}
   17cea:	af00      	add	r7, sp, #0
   17cec:	4b0e      	ldr	r3, [pc, #56]	; (17d28 <xPortStartScheduler+0x40>)
   17cee:	4a0e      	ldr	r2, [pc, #56]	; (17d28 <xPortStartScheduler+0x40>)
   17cf0:	6812      	ldr	r2, [r2, #0]
   17cf2:	21ff      	movs	r1, #255	; 0xff
   17cf4:	0409      	lsls	r1, r1, #16
   17cf6:	430a      	orrs	r2, r1
   17cf8:	601a      	str	r2, [r3, #0]
   17cfa:	4b0b      	ldr	r3, [pc, #44]	; (17d28 <xPortStartScheduler+0x40>)
   17cfc:	4a0a      	ldr	r2, [pc, #40]	; (17d28 <xPortStartScheduler+0x40>)
   17cfe:	6812      	ldr	r2, [r2, #0]
   17d00:	21ff      	movs	r1, #255	; 0xff
   17d02:	0609      	lsls	r1, r1, #24
   17d04:	430a      	orrs	r2, r1
   17d06:	601a      	str	r2, [r3, #0]
   17d08:	4b08      	ldr	r3, [pc, #32]	; (17d2c <xPortStartScheduler+0x44>)
   17d0a:	4798      	blx	r3
   17d0c:	4b08      	ldr	r3, [pc, #32]	; (17d30 <xPortStartScheduler+0x48>)
   17d0e:	2200      	movs	r2, #0
   17d10:	601a      	str	r2, [r3, #0]
   17d12:	4b08      	ldr	r3, [pc, #32]	; (17d34 <xPortStartScheduler+0x4c>)
   17d14:	4798      	blx	r3
   17d16:	4b08      	ldr	r3, [pc, #32]	; (17d38 <xPortStartScheduler+0x50>)
   17d18:	4798      	blx	r3
   17d1a:	4b08      	ldr	r3, [pc, #32]	; (17d3c <xPortStartScheduler+0x54>)
   17d1c:	4798      	blx	r3
   17d1e:	2300      	movs	r3, #0
   17d20:	0018      	movs	r0, r3
   17d22:	46bd      	mov	sp, r7
   17d24:	bd80      	pop	{r7, pc}
   17d26:	46c0      	nop			; (mov r8, r8)
   17d28:	e000ed20 	.word	0xe000ed20
   17d2c:	00017e49 	.word	0x00017e49
   17d30:	200000f4 	.word	0x200000f4
   17d34:	00017cb1 	.word	0x00017cb1
   17d38:	0001a3a9 	.word	0x0001a3a9
   17d3c:	00017c79 	.word	0x00017c79

00017d40 <vPortYield>:
   17d40:	b580      	push	{r7, lr}
   17d42:	af00      	add	r7, sp, #0
   17d44:	4b03      	ldr	r3, [pc, #12]	; (17d54 <vPortYield+0x14>)
   17d46:	2280      	movs	r2, #128	; 0x80
   17d48:	0552      	lsls	r2, r2, #21
   17d4a:	601a      	str	r2, [r3, #0]
   17d4c:	46c0      	nop			; (mov r8, r8)
   17d4e:	46bd      	mov	sp, r7
   17d50:	bd80      	pop	{r7, pc}
   17d52:	46c0      	nop			; (mov r8, r8)
   17d54:	e000ed04 	.word	0xe000ed04

00017d58 <vPortEnterCritical>:
   17d58:	b580      	push	{r7, lr}
   17d5a:	af00      	add	r7, sp, #0
   17d5c:	b672      	cpsid	i
   17d5e:	4b06      	ldr	r3, [pc, #24]	; (17d78 <vPortEnterCritical+0x20>)
   17d60:	681b      	ldr	r3, [r3, #0]
   17d62:	1c5a      	adds	r2, r3, #1
   17d64:	4b04      	ldr	r3, [pc, #16]	; (17d78 <vPortEnterCritical+0x20>)
   17d66:	601a      	str	r2, [r3, #0]
   17d68:	f3bf 8f4f 	dsb	sy
   17d6c:	f3bf 8f6f 	isb	sy
   17d70:	46c0      	nop			; (mov r8, r8)
   17d72:	46bd      	mov	sp, r7
   17d74:	bd80      	pop	{r7, pc}
   17d76:	46c0      	nop			; (mov r8, r8)
   17d78:	200000f4 	.word	0x200000f4

00017d7c <vPortExitCritical>:
   17d7c:	b580      	push	{r7, lr}
   17d7e:	af00      	add	r7, sp, #0
   17d80:	4b09      	ldr	r3, [pc, #36]	; (17da8 <vPortExitCritical+0x2c>)
   17d82:	681b      	ldr	r3, [r3, #0]
   17d84:	2b00      	cmp	r3, #0
   17d86:	d101      	bne.n	17d8c <vPortExitCritical+0x10>
   17d88:	b672      	cpsid	i
   17d8a:	e7fe      	b.n	17d8a <vPortExitCritical+0xe>
   17d8c:	4b06      	ldr	r3, [pc, #24]	; (17da8 <vPortExitCritical+0x2c>)
   17d8e:	681b      	ldr	r3, [r3, #0]
   17d90:	1e5a      	subs	r2, r3, #1
   17d92:	4b05      	ldr	r3, [pc, #20]	; (17da8 <vPortExitCritical+0x2c>)
   17d94:	601a      	str	r2, [r3, #0]
   17d96:	4b04      	ldr	r3, [pc, #16]	; (17da8 <vPortExitCritical+0x2c>)
   17d98:	681b      	ldr	r3, [r3, #0]
   17d9a:	2b00      	cmp	r3, #0
   17d9c:	d100      	bne.n	17da0 <vPortExitCritical+0x24>
   17d9e:	b662      	cpsie	i
   17da0:	46c0      	nop			; (mov r8, r8)
   17da2:	46bd      	mov	sp, r7
   17da4:	bd80      	pop	{r7, pc}
   17da6:	46c0      	nop			; (mov r8, r8)
   17da8:	200000f4 	.word	0x200000f4

00017dac <ulSetInterruptMaskFromISR>:
   17dac:	f3ef 8010 	mrs	r0, PRIMASK
   17db0:	b672      	cpsid	i
   17db2:	4770      	bx	lr
   17db4:	46c0      	nop			; (mov r8, r8)
   17db6:	0018      	movs	r0, r3

00017db8 <vClearInterruptMaskFromISR>:
   17db8:	f380 8810 	msr	PRIMASK, r0
   17dbc:	4770      	bx	lr
   17dbe:	46c0      	nop			; (mov r8, r8)

00017dc0 <PendSV_Handler>:
   17dc0:	f3ef 8009 	mrs	r0, PSP
   17dc4:	4b0e      	ldr	r3, [pc, #56]	; (17e00 <pxCurrentTCBConst>)
   17dc6:	681a      	ldr	r2, [r3, #0]
   17dc8:	3820      	subs	r0, #32
   17dca:	6010      	str	r0, [r2, #0]
   17dcc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   17dce:	4644      	mov	r4, r8
   17dd0:	464d      	mov	r5, r9
   17dd2:	4656      	mov	r6, sl
   17dd4:	465f      	mov	r7, fp
   17dd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   17dd8:	b508      	push	{r3, lr}
   17dda:	b672      	cpsid	i
   17ddc:	f002 fae4 	bl	1a3a8 <vTaskSwitchContext>
   17de0:	b662      	cpsie	i
   17de2:	bc0c      	pop	{r2, r3}
   17de4:	6811      	ldr	r1, [r2, #0]
   17de6:	6808      	ldr	r0, [r1, #0]
   17de8:	3010      	adds	r0, #16
   17dea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   17dec:	46a0      	mov	r8, r4
   17dee:	46a9      	mov	r9, r5
   17df0:	46b2      	mov	sl, r6
   17df2:	46bb      	mov	fp, r7
   17df4:	f380 8809 	msr	PSP, r0
   17df8:	3820      	subs	r0, #32
   17dfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   17dfc:	4718      	bx	r3
   17dfe:	46c0      	nop			; (mov r8, r8)

00017e00 <pxCurrentTCBConst>:
   17e00:	20003b34 	.word	0x20003b34
   17e04:	46c0      	nop			; (mov r8, r8)
   17e06:	46c0      	nop			; (mov r8, r8)

00017e08 <SysTick_Handler>:
   17e08:	b580      	push	{r7, lr}
   17e0a:	b082      	sub	sp, #8
   17e0c:	af00      	add	r7, sp, #0
   17e0e:	4b0a      	ldr	r3, [pc, #40]	; (17e38 <SysTick_Handler+0x30>)
   17e10:	4798      	blx	r3
   17e12:	0003      	movs	r3, r0
   17e14:	607b      	str	r3, [r7, #4]
   17e16:	4b09      	ldr	r3, [pc, #36]	; (17e3c <SysTick_Handler+0x34>)
   17e18:	4798      	blx	r3
   17e1a:	1e03      	subs	r3, r0, #0
   17e1c:	d003      	beq.n	17e26 <SysTick_Handler+0x1e>
   17e1e:	4b08      	ldr	r3, [pc, #32]	; (17e40 <SysTick_Handler+0x38>)
   17e20:	2280      	movs	r2, #128	; 0x80
   17e22:	0552      	lsls	r2, r2, #21
   17e24:	601a      	str	r2, [r3, #0]
   17e26:	687b      	ldr	r3, [r7, #4]
   17e28:	0018      	movs	r0, r3
   17e2a:	4b06      	ldr	r3, [pc, #24]	; (17e44 <SysTick_Handler+0x3c>)
   17e2c:	4798      	blx	r3
   17e2e:	46c0      	nop			; (mov r8, r8)
   17e30:	46bd      	mov	sp, r7
   17e32:	b002      	add	sp, #8
   17e34:	bd80      	pop	{r7, pc}
   17e36:	46c0      	nop			; (mov r8, r8)
   17e38:	00017dad 	.word	0x00017dad
   17e3c:	0001a1b9 	.word	0x0001a1b9
   17e40:	e000ed04 	.word	0xe000ed04
   17e44:	00017db9 	.word	0x00017db9

00017e48 <prvSetupTimerInterrupt>:
   17e48:	b5b0      	push	{r4, r5, r7, lr}
   17e4a:	af00      	add	r7, sp, #0
   17e4c:	4b0b      	ldr	r3, [pc, #44]	; (17e7c <prvSetupTimerInterrupt+0x34>)
   17e4e:	2200      	movs	r2, #0
   17e50:	601a      	str	r2, [r3, #0]
   17e52:	4b0b      	ldr	r3, [pc, #44]	; (17e80 <prvSetupTimerInterrupt+0x38>)
   17e54:	2200      	movs	r2, #0
   17e56:	601a      	str	r2, [r3, #0]
   17e58:	4c0a      	ldr	r4, [pc, #40]	; (17e84 <prvSetupTimerInterrupt+0x3c>)
   17e5a:	2000      	movs	r0, #0
   17e5c:	4b0a      	ldr	r3, [pc, #40]	; (17e88 <prvSetupTimerInterrupt+0x40>)
   17e5e:	4798      	blx	r3
   17e60:	4b0a      	ldr	r3, [pc, #40]	; (17e8c <prvSetupTimerInterrupt+0x44>)
   17e62:	22fa      	movs	r2, #250	; 0xfa
   17e64:	0091      	lsls	r1, r2, #2
   17e66:	4798      	blx	r3
   17e68:	0003      	movs	r3, r0
   17e6a:	3b01      	subs	r3, #1
   17e6c:	6023      	str	r3, [r4, #0]
   17e6e:	4b03      	ldr	r3, [pc, #12]	; (17e7c <prvSetupTimerInterrupt+0x34>)
   17e70:	2207      	movs	r2, #7
   17e72:	601a      	str	r2, [r3, #0]
   17e74:	46c0      	nop			; (mov r8, r8)
   17e76:	46bd      	mov	sp, r7
   17e78:	bdb0      	pop	{r4, r5, r7, pc}
   17e7a:	46c0      	nop			; (mov r8, r8)
   17e7c:	e000e010 	.word	0xe000e010
   17e80:	e000e018 	.word	0xe000e018
   17e84:	e000e014 	.word	0xe000e014
   17e88:	000279a5 	.word	0x000279a5
   17e8c:	000304e9 	.word	0x000304e9

00017e90 <pvPortMalloc>:
   17e90:	b580      	push	{r7, lr}
   17e92:	b084      	sub	sp, #16
   17e94:	af00      	add	r7, sp, #0
   17e96:	6078      	str	r0, [r7, #4]
   17e98:	2300      	movs	r3, #0
   17e9a:	60fb      	str	r3, [r7, #12]
   17e9c:	687b      	ldr	r3, [r7, #4]
   17e9e:	2207      	movs	r2, #7
   17ea0:	4013      	ands	r3, r2
   17ea2:	d004      	beq.n	17eae <pvPortMalloc+0x1e>
   17ea4:	687b      	ldr	r3, [r7, #4]
   17ea6:	2207      	movs	r2, #7
   17ea8:	4393      	bics	r3, r2
   17eaa:	3308      	adds	r3, #8
   17eac:	607b      	str	r3, [r7, #4]
   17eae:	4b21      	ldr	r3, [pc, #132]	; (17f34 <pvPortMalloc+0xa4>)
   17eb0:	4798      	blx	r3
   17eb2:	4b21      	ldr	r3, [pc, #132]	; (17f38 <pvPortMalloc+0xa8>)
   17eb4:	681b      	ldr	r3, [r3, #0]
   17eb6:	2b00      	cmp	r3, #0
   17eb8:	d105      	bne.n	17ec6 <pvPortMalloc+0x36>
   17eba:	4b20      	ldr	r3, [pc, #128]	; (17f3c <pvPortMalloc+0xac>)
   17ebc:	2207      	movs	r2, #7
   17ebe:	4393      	bics	r3, r2
   17ec0:	001a      	movs	r2, r3
   17ec2:	4b1d      	ldr	r3, [pc, #116]	; (17f38 <pvPortMalloc+0xa8>)
   17ec4:	601a      	str	r2, [r3, #0]
   17ec6:	4b1e      	ldr	r3, [pc, #120]	; (17f40 <pvPortMalloc+0xb0>)
   17ec8:	681a      	ldr	r2, [r3, #0]
   17eca:	687b      	ldr	r3, [r7, #4]
   17ecc:	18d3      	adds	r3, r2, r3
   17ece:	4a1d      	ldr	r2, [pc, #116]	; (17f44 <pvPortMalloc+0xb4>)
   17ed0:	4293      	cmp	r3, r2
   17ed2:	d813      	bhi.n	17efc <pvPortMalloc+0x6c>
   17ed4:	4b1a      	ldr	r3, [pc, #104]	; (17f40 <pvPortMalloc+0xb0>)
   17ed6:	681a      	ldr	r2, [r3, #0]
   17ed8:	687b      	ldr	r3, [r7, #4]
   17eda:	18d2      	adds	r2, r2, r3
   17edc:	4b18      	ldr	r3, [pc, #96]	; (17f40 <pvPortMalloc+0xb0>)
   17ede:	681b      	ldr	r3, [r3, #0]
   17ee0:	429a      	cmp	r2, r3
   17ee2:	d90b      	bls.n	17efc <pvPortMalloc+0x6c>
   17ee4:	4b14      	ldr	r3, [pc, #80]	; (17f38 <pvPortMalloc+0xa8>)
   17ee6:	681a      	ldr	r2, [r3, #0]
   17ee8:	4b15      	ldr	r3, [pc, #84]	; (17f40 <pvPortMalloc+0xb0>)
   17eea:	681b      	ldr	r3, [r3, #0]
   17eec:	18d3      	adds	r3, r2, r3
   17eee:	60fb      	str	r3, [r7, #12]
   17ef0:	4b13      	ldr	r3, [pc, #76]	; (17f40 <pvPortMalloc+0xb0>)
   17ef2:	681a      	ldr	r2, [r3, #0]
   17ef4:	687b      	ldr	r3, [r7, #4]
   17ef6:	18d2      	adds	r2, r2, r3
   17ef8:	4b11      	ldr	r3, [pc, #68]	; (17f40 <pvPortMalloc+0xb0>)
   17efa:	601a      	str	r2, [r3, #0]
   17efc:	68fb      	ldr	r3, [r7, #12]
   17efe:	2b00      	cmp	r3, #0
   17f00:	d006      	beq.n	17f10 <pvPortMalloc+0x80>
   17f02:	68fb      	ldr	r3, [r7, #12]
   17f04:	687a      	ldr	r2, [r7, #4]
   17f06:	0019      	movs	r1, r3
   17f08:	2094      	movs	r0, #148	; 0x94
   17f0a:	4b0f      	ldr	r3, [pc, #60]	; (17f48 <pvPortMalloc+0xb8>)
   17f0c:	4798      	blx	r3
   17f0e:	e005      	b.n	17f1c <pvPortMalloc+0x8c>
   17f10:	68fb      	ldr	r3, [r7, #12]
   17f12:	687a      	ldr	r2, [r7, #4]
   17f14:	0019      	movs	r1, r3
   17f16:	20e8      	movs	r0, #232	; 0xe8
   17f18:	4b0b      	ldr	r3, [pc, #44]	; (17f48 <pvPortMalloc+0xb8>)
   17f1a:	4798      	blx	r3
   17f1c:	4b0b      	ldr	r3, [pc, #44]	; (17f4c <pvPortMalloc+0xbc>)
   17f1e:	4798      	blx	r3
   17f20:	68fb      	ldr	r3, [r7, #12]
   17f22:	2b00      	cmp	r3, #0
   17f24:	d101      	bne.n	17f2a <pvPortMalloc+0x9a>
   17f26:	4b0a      	ldr	r3, [pc, #40]	; (17f50 <pvPortMalloc+0xc0>)
   17f28:	4798      	blx	r3
   17f2a:	68fb      	ldr	r3, [r7, #12]
   17f2c:	0018      	movs	r0, r3
   17f2e:	46bd      	mov	sp, r7
   17f30:	b004      	add	sp, #16
   17f32:	bd80      	pop	{r7, pc}
   17f34:	0001a015 	.word	0x0001a015
   17f38:	20003b30 	.word	0x20003b30
   17f3c:	20000c54 	.word	0x20000c54
   17f40:	20003b2c 	.word	0x20003b2c
   17f44:	00002ed7 	.word	0x00002ed7
   17f48:	00016601 	.word	0x00016601
   17f4c:	0001a02d 	.word	0x0001a02d
   17f50:	000304b9 	.word	0x000304b9

00017f54 <vPortFree>:
   17f54:	b580      	push	{r7, lr}
   17f56:	b082      	sub	sp, #8
   17f58:	af00      	add	r7, sp, #0
   17f5a:	6078      	str	r0, [r7, #4]
   17f5c:	687b      	ldr	r3, [r7, #4]
   17f5e:	2b00      	cmp	r3, #0
   17f60:	d001      	beq.n	17f66 <vPortFree+0x12>
   17f62:	b672      	cpsid	i
   17f64:	e7fe      	b.n	17f64 <vPortFree+0x10>
   17f66:	46c0      	nop			; (mov r8, r8)
   17f68:	46bd      	mov	sp, r7
   17f6a:	b002      	add	sp, #8
   17f6c:	bd80      	pop	{r7, pc}
	...

00017f70 <xPortGetFreeHeapSize>:
   17f70:	b580      	push	{r7, lr}
   17f72:	af00      	add	r7, sp, #0
   17f74:	4b03      	ldr	r3, [pc, #12]	; (17f84 <xPortGetFreeHeapSize+0x14>)
   17f76:	681b      	ldr	r3, [r3, #0]
   17f78:	4a03      	ldr	r2, [pc, #12]	; (17f88 <xPortGetFreeHeapSize+0x18>)
   17f7a:	1ad3      	subs	r3, r2, r3
   17f7c:	0018      	movs	r0, r3
   17f7e:	46bd      	mov	sp, r7
   17f80:	bd80      	pop	{r7, pc}
   17f82:	46c0      	nop			; (mov r8, r8)
   17f84:	20003b2c 	.word	0x20003b2c
   17f88:	00002ed8 	.word	0x00002ed8

00017f8c <xQueueGenericReset>:
   17f8c:	b580      	push	{r7, lr}
   17f8e:	b084      	sub	sp, #16
   17f90:	af00      	add	r7, sp, #0
   17f92:	6078      	str	r0, [r7, #4]
   17f94:	6039      	str	r1, [r7, #0]
   17f96:	687b      	ldr	r3, [r7, #4]
   17f98:	60fb      	str	r3, [r7, #12]
   17f9a:	68fb      	ldr	r3, [r7, #12]
   17f9c:	2b00      	cmp	r3, #0
   17f9e:	d101      	bne.n	17fa4 <xQueueGenericReset+0x18>
   17fa0:	b672      	cpsid	i
   17fa2:	e7fe      	b.n	17fa2 <xQueueGenericReset+0x16>
   17fa4:	4b23      	ldr	r3, [pc, #140]	; (18034 <xQueueGenericReset+0xa8>)
   17fa6:	4798      	blx	r3
   17fa8:	68fb      	ldr	r3, [r7, #12]
   17faa:	681a      	ldr	r2, [r3, #0]
   17fac:	68fb      	ldr	r3, [r7, #12]
   17fae:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   17fb0:	68fb      	ldr	r3, [r7, #12]
   17fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   17fb4:	434b      	muls	r3, r1
   17fb6:	18d2      	adds	r2, r2, r3
   17fb8:	68fb      	ldr	r3, [r7, #12]
   17fba:	605a      	str	r2, [r3, #4]
   17fbc:	68fb      	ldr	r3, [r7, #12]
   17fbe:	2200      	movs	r2, #0
   17fc0:	639a      	str	r2, [r3, #56]	; 0x38
   17fc2:	68fb      	ldr	r3, [r7, #12]
   17fc4:	681a      	ldr	r2, [r3, #0]
   17fc6:	68fb      	ldr	r3, [r7, #12]
   17fc8:	609a      	str	r2, [r3, #8]
   17fca:	68fb      	ldr	r3, [r7, #12]
   17fcc:	681a      	ldr	r2, [r3, #0]
   17fce:	68fb      	ldr	r3, [r7, #12]
   17fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17fd2:	1e59      	subs	r1, r3, #1
   17fd4:	68fb      	ldr	r3, [r7, #12]
   17fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   17fd8:	434b      	muls	r3, r1
   17fda:	18d2      	adds	r2, r2, r3
   17fdc:	68fb      	ldr	r3, [r7, #12]
   17fde:	60da      	str	r2, [r3, #12]
   17fe0:	68fb      	ldr	r3, [r7, #12]
   17fe2:	2244      	movs	r2, #68	; 0x44
   17fe4:	21ff      	movs	r1, #255	; 0xff
   17fe6:	5499      	strb	r1, [r3, r2]
   17fe8:	68fb      	ldr	r3, [r7, #12]
   17fea:	2245      	movs	r2, #69	; 0x45
   17fec:	21ff      	movs	r1, #255	; 0xff
   17fee:	5499      	strb	r1, [r3, r2]
   17ff0:	683b      	ldr	r3, [r7, #0]
   17ff2:	2b00      	cmp	r3, #0
   17ff4:	d10d      	bne.n	18012 <xQueueGenericReset+0x86>
   17ff6:	68fb      	ldr	r3, [r7, #12]
   17ff8:	691b      	ldr	r3, [r3, #16]
   17ffa:	2b00      	cmp	r3, #0
   17ffc:	d013      	beq.n	18026 <xQueueGenericReset+0x9a>
   17ffe:	68fb      	ldr	r3, [r7, #12]
   18000:	3310      	adds	r3, #16
   18002:	0018      	movs	r0, r3
   18004:	4b0c      	ldr	r3, [pc, #48]	; (18038 <xQueueGenericReset+0xac>)
   18006:	4798      	blx	r3
   18008:	1e03      	subs	r3, r0, #0
   1800a:	d00c      	beq.n	18026 <xQueueGenericReset+0x9a>
   1800c:	4b0b      	ldr	r3, [pc, #44]	; (1803c <xQueueGenericReset+0xb0>)
   1800e:	4798      	blx	r3
   18010:	e009      	b.n	18026 <xQueueGenericReset+0x9a>
   18012:	68fb      	ldr	r3, [r7, #12]
   18014:	3310      	adds	r3, #16
   18016:	0018      	movs	r0, r3
   18018:	4b09      	ldr	r3, [pc, #36]	; (18040 <xQueueGenericReset+0xb4>)
   1801a:	4798      	blx	r3
   1801c:	68fb      	ldr	r3, [r7, #12]
   1801e:	3324      	adds	r3, #36	; 0x24
   18020:	0018      	movs	r0, r3
   18022:	4b07      	ldr	r3, [pc, #28]	; (18040 <xQueueGenericReset+0xb4>)
   18024:	4798      	blx	r3
   18026:	4b07      	ldr	r3, [pc, #28]	; (18044 <xQueueGenericReset+0xb8>)
   18028:	4798      	blx	r3
   1802a:	2301      	movs	r3, #1
   1802c:	0018      	movs	r0, r3
   1802e:	46bd      	mov	sp, r7
   18030:	b004      	add	sp, #16
   18032:	bd80      	pop	{r7, pc}
   18034:	00017d59 	.word	0x00017d59
   18038:	0001a5ed 	.word	0x0001a5ed
   1803c:	00017d41 	.word	0x00017d41
   18040:	00017ad1 	.word	0x00017ad1
   18044:	00017d7d 	.word	0x00017d7d

00018048 <xQueueGenericCreate>:
   18048:	b590      	push	{r4, r7, lr}
   1804a:	b08b      	sub	sp, #44	; 0x2c
   1804c:	af02      	add	r7, sp, #8
   1804e:	60f8      	str	r0, [r7, #12]
   18050:	60b9      	str	r1, [r7, #8]
   18052:	1dfb      	adds	r3, r7, #7
   18054:	701a      	strb	r2, [r3, #0]
   18056:	68fb      	ldr	r3, [r7, #12]
   18058:	2b00      	cmp	r3, #0
   1805a:	d101      	bne.n	18060 <xQueueGenericCreate+0x18>
   1805c:	b672      	cpsid	i
   1805e:	e7fe      	b.n	1805e <xQueueGenericCreate+0x16>
   18060:	68bb      	ldr	r3, [r7, #8]
   18062:	2b00      	cmp	r3, #0
   18064:	d102      	bne.n	1806c <xQueueGenericCreate+0x24>
   18066:	2300      	movs	r3, #0
   18068:	61fb      	str	r3, [r7, #28]
   1806a:	e003      	b.n	18074 <xQueueGenericCreate+0x2c>
   1806c:	68fb      	ldr	r3, [r7, #12]
   1806e:	68ba      	ldr	r2, [r7, #8]
   18070:	4353      	muls	r3, r2
   18072:	61fb      	str	r3, [r7, #28]
   18074:	69fb      	ldr	r3, [r7, #28]
   18076:	3354      	adds	r3, #84	; 0x54
   18078:	0018      	movs	r0, r3
   1807a:	4b19      	ldr	r3, [pc, #100]	; (180e0 <xQueueGenericCreate+0x98>)
   1807c:	4798      	blx	r3
   1807e:	0003      	movs	r3, r0
   18080:	61bb      	str	r3, [r7, #24]
   18082:	69bb      	ldr	r3, [r7, #24]
   18084:	2b00      	cmp	r3, #0
   18086:	d00d      	beq.n	180a4 <xQueueGenericCreate+0x5c>
   18088:	69bb      	ldr	r3, [r7, #24]
   1808a:	3354      	adds	r3, #84	; 0x54
   1808c:	617b      	str	r3, [r7, #20]
   1808e:	1dfb      	adds	r3, r7, #7
   18090:	781c      	ldrb	r4, [r3, #0]
   18092:	697a      	ldr	r2, [r7, #20]
   18094:	68b9      	ldr	r1, [r7, #8]
   18096:	68f8      	ldr	r0, [r7, #12]
   18098:	69bb      	ldr	r3, [r7, #24]
   1809a:	9300      	str	r3, [sp, #0]
   1809c:	0023      	movs	r3, r4
   1809e:	4c11      	ldr	r4, [pc, #68]	; (180e4 <xQueueGenericCreate+0x9c>)
   180a0:	47a0      	blx	r4
   180a2:	e017      	b.n	180d4 <xQueueGenericCreate+0x8c>
   180a4:	4b10      	ldr	r3, [pc, #64]	; (180e8 <xQueueGenericCreate+0xa0>)
   180a6:	4798      	blx	r3
   180a8:	0003      	movs	r3, r0
   180aa:	0018      	movs	r0, r3
   180ac:	4b0f      	ldr	r3, [pc, #60]	; (180ec <xQueueGenericCreate+0xa4>)
   180ae:	4798      	blx	r3
   180b0:	0003      	movs	r3, r0
   180b2:	001a      	movs	r2, r3
   180b4:	4b0e      	ldr	r3, [pc, #56]	; (180f0 <xQueueGenericCreate+0xa8>)
   180b6:	881b      	ldrh	r3, [r3, #0]
   180b8:	4013      	ands	r3, r2
   180ba:	b29b      	uxth	r3, r3
   180bc:	2b00      	cmp	r3, #0
   180be:	d009      	beq.n	180d4 <xQueueGenericCreate+0x8c>
   180c0:	1dfb      	adds	r3, r7, #7
   180c2:	781b      	ldrb	r3, [r3, #0]
   180c4:	4a0b      	ldr	r2, [pc, #44]	; (180f4 <xQueueGenericCreate+0xac>)
   180c6:	5cd3      	ldrb	r3, [r2, r3]
   180c8:	3340      	adds	r3, #64	; 0x40
   180ca:	b2db      	uxtb	r3, r3
   180cc:	2100      	movs	r1, #0
   180ce:	0018      	movs	r0, r3
   180d0:	4b09      	ldr	r3, [pc, #36]	; (180f8 <xQueueGenericCreate+0xb0>)
   180d2:	4798      	blx	r3
   180d4:	69bb      	ldr	r3, [r7, #24]
   180d6:	0018      	movs	r0, r3
   180d8:	46bd      	mov	sp, r7
   180da:	b009      	add	sp, #36	; 0x24
   180dc:	bd90      	pop	{r4, r7, pc}
   180de:	46c0      	nop			; (mov r8, r8)
   180e0:	00017e91 	.word	0x00017e91
   180e4:	000180fd 	.word	0x000180fd
   180e8:	00015ff5 	.word	0x00015ff5
   180ec:	00015d59 	.word	0x00015d59
   180f0:	200000f0 	.word	0x200000f0
   180f4:	200000e4 	.word	0x200000e4
   180f8:	00016a59 	.word	0x00016a59

000180fc <prvInitialiseNewQueue>:
   180fc:	b5b0      	push	{r4, r5, r7, lr}
   180fe:	b084      	sub	sp, #16
   18100:	af00      	add	r7, sp, #0
   18102:	60f8      	str	r0, [r7, #12]
   18104:	60b9      	str	r1, [r7, #8]
   18106:	607a      	str	r2, [r7, #4]
   18108:	001a      	movs	r2, r3
   1810a:	1cfb      	adds	r3, r7, #3
   1810c:	701a      	strb	r2, [r3, #0]
   1810e:	68bb      	ldr	r3, [r7, #8]
   18110:	2b00      	cmp	r3, #0
   18112:	d103      	bne.n	1811c <prvInitialiseNewQueue+0x20>
   18114:	6a3b      	ldr	r3, [r7, #32]
   18116:	6a3a      	ldr	r2, [r7, #32]
   18118:	601a      	str	r2, [r3, #0]
   1811a:	e002      	b.n	18122 <prvInitialiseNewQueue+0x26>
   1811c:	6a3b      	ldr	r3, [r7, #32]
   1811e:	687a      	ldr	r2, [r7, #4]
   18120:	601a      	str	r2, [r3, #0]
   18122:	6a3b      	ldr	r3, [r7, #32]
   18124:	68fa      	ldr	r2, [r7, #12]
   18126:	63da      	str	r2, [r3, #60]	; 0x3c
   18128:	6a3b      	ldr	r3, [r7, #32]
   1812a:	68ba      	ldr	r2, [r7, #8]
   1812c:	641a      	str	r2, [r3, #64]	; 0x40
   1812e:	6a3b      	ldr	r3, [r7, #32]
   18130:	2101      	movs	r1, #1
   18132:	0018      	movs	r0, r3
   18134:	4b41      	ldr	r3, [pc, #260]	; (1823c <prvInitialiseNewQueue+0x140>)
   18136:	4798      	blx	r3
   18138:	6a3b      	ldr	r3, [r7, #32]
   1813a:	1cfa      	adds	r2, r7, #3
   1813c:	2150      	movs	r1, #80	; 0x50
   1813e:	7812      	ldrb	r2, [r2, #0]
   18140:	545a      	strb	r2, [r3, r1]
   18142:	6a3b      	ldr	r3, [r7, #32]
   18144:	2200      	movs	r2, #0
   18146:	649a      	str	r2, [r3, #72]	; 0x48
   18148:	6a3b      	ldr	r3, [r7, #32]
   1814a:	0018      	movs	r0, r3
   1814c:	4b3c      	ldr	r3, [pc, #240]	; (18240 <prvInitialiseNewQueue+0x144>)
   1814e:	4798      	blx	r3
   18150:	0003      	movs	r3, r0
   18152:	001a      	movs	r2, r3
   18154:	4b3b      	ldr	r3, [pc, #236]	; (18244 <prvInitialiseNewQueue+0x148>)
   18156:	5c9b      	ldrb	r3, [r3, r2]
   18158:	0018      	movs	r0, r3
   1815a:	4b3b      	ldr	r3, [pc, #236]	; (18248 <prvInitialiseNewQueue+0x14c>)
   1815c:	4798      	blx	r3
   1815e:	0003      	movs	r3, r0
   18160:	b29a      	uxth	r2, r3
   18162:	6a3b      	ldr	r3, [r7, #32]
   18164:	0011      	movs	r1, r2
   18166:	0018      	movs	r0, r3
   18168:	4b38      	ldr	r3, [pc, #224]	; (1824c <prvInitialiseNewQueue+0x150>)
   1816a:	4798      	blx	r3
   1816c:	4b38      	ldr	r3, [pc, #224]	; (18250 <prvInitialiseNewQueue+0x154>)
   1816e:	881a      	ldrh	r2, [r3, #0]
   18170:	6a3b      	ldr	r3, [r7, #32]
   18172:	0011      	movs	r1, r2
   18174:	0018      	movs	r0, r3
   18176:	4b37      	ldr	r3, [pc, #220]	; (18254 <prvInitialiseNewQueue+0x158>)
   18178:	4798      	blx	r3
   1817a:	6a3b      	ldr	r3, [r7, #32]
   1817c:	0018      	movs	r0, r3
   1817e:	4b30      	ldr	r3, [pc, #192]	; (18240 <prvInitialiseNewQueue+0x144>)
   18180:	4798      	blx	r3
   18182:	0003      	movs	r3, r0
   18184:	001a      	movs	r2, r3
   18186:	4b2f      	ldr	r3, [pc, #188]	; (18244 <prvInitialiseNewQueue+0x148>)
   18188:	5c9c      	ldrb	r4, [r3, r2]
   1818a:	6a3b      	ldr	r3, [r7, #32]
   1818c:	0018      	movs	r0, r3
   1818e:	4b32      	ldr	r3, [pc, #200]	; (18258 <prvInitialiseNewQueue+0x15c>)
   18190:	4798      	blx	r3
   18192:	0003      	movs	r3, r0
   18194:	b2db      	uxtb	r3, r3
   18196:	0019      	movs	r1, r3
   18198:	0020      	movs	r0, r4
   1819a:	4b30      	ldr	r3, [pc, #192]	; (1825c <prvInitialiseNewQueue+0x160>)
   1819c:	4798      	blx	r3
   1819e:	4b30      	ldr	r3, [pc, #192]	; (18260 <prvInitialiseNewQueue+0x164>)
   181a0:	4798      	blx	r3
   181a2:	0003      	movs	r3, r0
   181a4:	0018      	movs	r0, r3
   181a6:	4b2f      	ldr	r3, [pc, #188]	; (18264 <prvInitialiseNewQueue+0x168>)
   181a8:	4798      	blx	r3
   181aa:	0003      	movs	r3, r0
   181ac:	001a      	movs	r2, r3
   181ae:	4b2e      	ldr	r3, [pc, #184]	; (18268 <prvInitialiseNewQueue+0x16c>)
   181b0:	881b      	ldrh	r3, [r3, #0]
   181b2:	4013      	ands	r3, r2
   181b4:	b29b      	uxth	r3, r3
   181b6:	2b00      	cmp	r3, #0
   181b8:	d029      	beq.n	1820e <prvInitialiseNewQueue+0x112>
   181ba:	6a3b      	ldr	r3, [r7, #32]
   181bc:	0018      	movs	r0, r3
   181be:	4b2b      	ldr	r3, [pc, #172]	; (1826c <prvInitialiseNewQueue+0x170>)
   181c0:	4798      	blx	r3
   181c2:	0003      	movs	r3, r0
   181c4:	001a      	movs	r2, r3
   181c6:	4b28      	ldr	r3, [pc, #160]	; (18268 <prvInitialiseNewQueue+0x16c>)
   181c8:	881b      	ldrh	r3, [r3, #0]
   181ca:	4013      	ands	r3, r2
   181cc:	b29b      	uxth	r3, r3
   181ce:	2b00      	cmp	r3, #0
   181d0:	d01d      	beq.n	1820e <prvInitialiseNewQueue+0x112>
   181d2:	6a3b      	ldr	r3, [r7, #32]
   181d4:	0018      	movs	r0, r3
   181d6:	4b1a      	ldr	r3, [pc, #104]	; (18240 <prvInitialiseNewQueue+0x144>)
   181d8:	4798      	blx	r3
   181da:	0003      	movs	r3, r0
   181dc:	001a      	movs	r2, r3
   181de:	4b19      	ldr	r3, [pc, #100]	; (18244 <prvInitialiseNewQueue+0x148>)
   181e0:	5c9b      	ldrb	r3, [r3, r2]
   181e2:	3318      	adds	r3, #24
   181e4:	b2db      	uxtb	r3, r3
   181e6:	001d      	movs	r5, r3
   181e8:	6a3b      	ldr	r3, [r7, #32]
   181ea:	0018      	movs	r0, r3
   181ec:	4b14      	ldr	r3, [pc, #80]	; (18240 <prvInitialiseNewQueue+0x144>)
   181ee:	4798      	blx	r3
   181f0:	0003      	movs	r3, r0
   181f2:	001a      	movs	r2, r3
   181f4:	4b13      	ldr	r3, [pc, #76]	; (18244 <prvInitialiseNewQueue+0x148>)
   181f6:	5c9c      	ldrb	r4, [r3, r2]
   181f8:	6a3b      	ldr	r3, [r7, #32]
   181fa:	0018      	movs	r0, r3
   181fc:	4b16      	ldr	r3, [pc, #88]	; (18258 <prvInitialiseNewQueue+0x15c>)
   181fe:	4798      	blx	r3
   18200:	0003      	movs	r3, r0
   18202:	b2db      	uxtb	r3, r3
   18204:	001a      	movs	r2, r3
   18206:	0021      	movs	r1, r4
   18208:	0028      	movs	r0, r5
   1820a:	4b19      	ldr	r3, [pc, #100]	; (18270 <prvInitialiseNewQueue+0x174>)
   1820c:	4798      	blx	r3
   1820e:	6a3b      	ldr	r3, [r7, #32]
   18210:	0018      	movs	r0, r3
   18212:	4b0b      	ldr	r3, [pc, #44]	; (18240 <prvInitialiseNewQueue+0x144>)
   18214:	4798      	blx	r3
   18216:	0003      	movs	r3, r0
   18218:	001a      	movs	r2, r3
   1821a:	4b0a      	ldr	r3, [pc, #40]	; (18244 <prvInitialiseNewQueue+0x148>)
   1821c:	5c9c      	ldrb	r4, [r3, r2]
   1821e:	6a3b      	ldr	r3, [r7, #32]
   18220:	0018      	movs	r0, r3
   18222:	4b0d      	ldr	r3, [pc, #52]	; (18258 <prvInitialiseNewQueue+0x15c>)
   18224:	4798      	blx	r3
   18226:	0003      	movs	r3, r0
   18228:	b2db      	uxtb	r3, r3
   1822a:	2200      	movs	r2, #0
   1822c:	0019      	movs	r1, r3
   1822e:	0020      	movs	r0, r4
   18230:	4b10      	ldr	r3, [pc, #64]	; (18274 <prvInitialiseNewQueue+0x178>)
   18232:	4798      	blx	r3
   18234:	46c0      	nop			; (mov r8, r8)
   18236:	46bd      	mov	sp, r7
   18238:	b004      	add	sp, #16
   1823a:	bdb0      	pop	{r4, r5, r7, pc}
   1823c:	00017f8d 	.word	0x00017f8d
   18240:	00015d19 	.word	0x00015d19
   18244:	200000e4 	.word	0x200000e4
   18248:	000172d9 	.word	0x000172d9
   1824c:	00015e3d 	.word	0x00015e3d
   18250:	200000f2 	.word	0x200000f2
   18254:	00015e79 	.word	0x00015e79
   18258:	00015df9 	.word	0x00015df9
   1825c:	00017471 	.word	0x00017471
   18260:	00015ff5 	.word	0x00015ff5
   18264:	00015d59 	.word	0x00015d59
   18268:	200000f0 	.word	0x200000f0
   1826c:	00015e19 	.word	0x00015e19
   18270:	00016751 	.word	0x00016751
   18274:	00016dad 	.word	0x00016dad

00018278 <prvInitialiseMutex>:
   18278:	b590      	push	{r4, r7, lr}
   1827a:	b083      	sub	sp, #12
   1827c:	af00      	add	r7, sp, #0
   1827e:	6078      	str	r0, [r7, #4]
   18280:	687b      	ldr	r3, [r7, #4]
   18282:	2b00      	cmp	r3, #0
   18284:	d00e      	beq.n	182a4 <prvInitialiseMutex+0x2c>
   18286:	687b      	ldr	r3, [r7, #4]
   18288:	2200      	movs	r2, #0
   1828a:	605a      	str	r2, [r3, #4]
   1828c:	687b      	ldr	r3, [r7, #4]
   1828e:	2200      	movs	r2, #0
   18290:	601a      	str	r2, [r3, #0]
   18292:	687b      	ldr	r3, [r7, #4]
   18294:	2200      	movs	r2, #0
   18296:	60da      	str	r2, [r3, #12]
   18298:	6878      	ldr	r0, [r7, #4]
   1829a:	2300      	movs	r3, #0
   1829c:	2200      	movs	r2, #0
   1829e:	2100      	movs	r1, #0
   182a0:	4c02      	ldr	r4, [pc, #8]	; (182ac <prvInitialiseMutex+0x34>)
   182a2:	47a0      	blx	r4
   182a4:	46c0      	nop			; (mov r8, r8)
   182a6:	46bd      	mov	sp, r7
   182a8:	b003      	add	sp, #12
   182aa:	bd90      	pop	{r4, r7, pc}
   182ac:	000182f1 	.word	0x000182f1

000182b0 <xQueueCreateMutex>:
   182b0:	b580      	push	{r7, lr}
   182b2:	b086      	sub	sp, #24
   182b4:	af00      	add	r7, sp, #0
   182b6:	0002      	movs	r2, r0
   182b8:	1dfb      	adds	r3, r7, #7
   182ba:	701a      	strb	r2, [r3, #0]
   182bc:	2301      	movs	r3, #1
   182be:	617b      	str	r3, [r7, #20]
   182c0:	2300      	movs	r3, #0
   182c2:	613b      	str	r3, [r7, #16]
   182c4:	1dfb      	adds	r3, r7, #7
   182c6:	781a      	ldrb	r2, [r3, #0]
   182c8:	6939      	ldr	r1, [r7, #16]
   182ca:	697b      	ldr	r3, [r7, #20]
   182cc:	0018      	movs	r0, r3
   182ce:	4b06      	ldr	r3, [pc, #24]	; (182e8 <xQueueCreateMutex+0x38>)
   182d0:	4798      	blx	r3
   182d2:	0003      	movs	r3, r0
   182d4:	60fb      	str	r3, [r7, #12]
   182d6:	68fb      	ldr	r3, [r7, #12]
   182d8:	0018      	movs	r0, r3
   182da:	4b04      	ldr	r3, [pc, #16]	; (182ec <xQueueCreateMutex+0x3c>)
   182dc:	4798      	blx	r3
   182de:	68fb      	ldr	r3, [r7, #12]
   182e0:	0018      	movs	r0, r3
   182e2:	46bd      	mov	sp, r7
   182e4:	b006      	add	sp, #24
   182e6:	bd80      	pop	{r7, pc}
   182e8:	00018049 	.word	0x00018049
   182ec:	00018279 	.word	0x00018279

000182f0 <xQueueGenericSend>:
   182f0:	b5b0      	push	{r4, r5, r7, lr}
   182f2:	b08a      	sub	sp, #40	; 0x28
   182f4:	af00      	add	r7, sp, #0
   182f6:	60f8      	str	r0, [r7, #12]
   182f8:	60b9      	str	r1, [r7, #8]
   182fa:	607a      	str	r2, [r7, #4]
   182fc:	603b      	str	r3, [r7, #0]
   182fe:	2300      	movs	r3, #0
   18300:	627b      	str	r3, [r7, #36]	; 0x24
   18302:	68fb      	ldr	r3, [r7, #12]
   18304:	623b      	str	r3, [r7, #32]
   18306:	6a3b      	ldr	r3, [r7, #32]
   18308:	2b00      	cmp	r3, #0
   1830a:	d101      	bne.n	18310 <xQueueGenericSend+0x20>
   1830c:	b672      	cpsid	i
   1830e:	e7fe      	b.n	1830e <xQueueGenericSend+0x1e>
   18310:	68bb      	ldr	r3, [r7, #8]
   18312:	2b00      	cmp	r3, #0
   18314:	d103      	bne.n	1831e <xQueueGenericSend+0x2e>
   18316:	6a3b      	ldr	r3, [r7, #32]
   18318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1831a:	2b00      	cmp	r3, #0
   1831c:	d101      	bne.n	18322 <xQueueGenericSend+0x32>
   1831e:	2301      	movs	r3, #1
   18320:	e000      	b.n	18324 <xQueueGenericSend+0x34>
   18322:	2300      	movs	r3, #0
   18324:	2b00      	cmp	r3, #0
   18326:	d101      	bne.n	1832c <xQueueGenericSend+0x3c>
   18328:	b672      	cpsid	i
   1832a:	e7fe      	b.n	1832a <xQueueGenericSend+0x3a>
   1832c:	683b      	ldr	r3, [r7, #0]
   1832e:	2b02      	cmp	r3, #2
   18330:	d103      	bne.n	1833a <xQueueGenericSend+0x4a>
   18332:	6a3b      	ldr	r3, [r7, #32]
   18334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18336:	2b01      	cmp	r3, #1
   18338:	d101      	bne.n	1833e <xQueueGenericSend+0x4e>
   1833a:	2301      	movs	r3, #1
   1833c:	e000      	b.n	18340 <xQueueGenericSend+0x50>
   1833e:	2300      	movs	r3, #0
   18340:	2b00      	cmp	r3, #0
   18342:	d101      	bne.n	18348 <xQueueGenericSend+0x58>
   18344:	b672      	cpsid	i
   18346:	e7fe      	b.n	18346 <xQueueGenericSend+0x56>
   18348:	4bbc      	ldr	r3, [pc, #752]	; (1863c <xQueueGenericSend+0x34c>)
   1834a:	4798      	blx	r3
   1834c:	1e03      	subs	r3, r0, #0
   1834e:	d102      	bne.n	18356 <xQueueGenericSend+0x66>
   18350:	687b      	ldr	r3, [r7, #4]
   18352:	2b00      	cmp	r3, #0
   18354:	d101      	bne.n	1835a <xQueueGenericSend+0x6a>
   18356:	2301      	movs	r3, #1
   18358:	e000      	b.n	1835c <xQueueGenericSend+0x6c>
   1835a:	2300      	movs	r3, #0
   1835c:	2b00      	cmp	r3, #0
   1835e:	d101      	bne.n	18364 <xQueueGenericSend+0x74>
   18360:	b672      	cpsid	i
   18362:	e7fe      	b.n	18362 <xQueueGenericSend+0x72>
   18364:	4bb6      	ldr	r3, [pc, #728]	; (18640 <xQueueGenericSend+0x350>)
   18366:	4798      	blx	r3
   18368:	6a3b      	ldr	r3, [r7, #32]
   1836a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1836c:	6a3b      	ldr	r3, [r7, #32]
   1836e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18370:	429a      	cmp	r2, r3
   18372:	d303      	bcc.n	1837c <xQueueGenericSend+0x8c>
   18374:	683b      	ldr	r3, [r7, #0]
   18376:	2b02      	cmp	r3, #2
   18378:	d000      	beq.n	1837c <xQueueGenericSend+0x8c>
   1837a:	e08e      	b.n	1849a <xQueueGenericSend+0x1aa>
   1837c:	4bb1      	ldr	r3, [pc, #708]	; (18644 <xQueueGenericSend+0x354>)
   1837e:	4798      	blx	r3
   18380:	0003      	movs	r3, r0
   18382:	0018      	movs	r0, r3
   18384:	4bb0      	ldr	r3, [pc, #704]	; (18648 <xQueueGenericSend+0x358>)
   18386:	4798      	blx	r3
   18388:	0003      	movs	r3, r0
   1838a:	001a      	movs	r2, r3
   1838c:	4baf      	ldr	r3, [pc, #700]	; (1864c <xQueueGenericSend+0x35c>)
   1838e:	881b      	ldrh	r3, [r3, #0]
   18390:	4013      	ands	r3, r2
   18392:	b29b      	uxth	r3, r3
   18394:	2b00      	cmp	r3, #0
   18396:	d02e      	beq.n	183f6 <xQueueGenericSend+0x106>
   18398:	6a3b      	ldr	r3, [r7, #32]
   1839a:	0018      	movs	r0, r3
   1839c:	4bac      	ldr	r3, [pc, #688]	; (18650 <xQueueGenericSend+0x360>)
   1839e:	4798      	blx	r3
   183a0:	0003      	movs	r3, r0
   183a2:	001a      	movs	r2, r3
   183a4:	4ba9      	ldr	r3, [pc, #676]	; (1864c <xQueueGenericSend+0x35c>)
   183a6:	881b      	ldrh	r3, [r3, #0]
   183a8:	4013      	ands	r3, r2
   183aa:	b29b      	uxth	r3, r3
   183ac:	2b00      	cmp	r3, #0
   183ae:	d022      	beq.n	183f6 <xQueueGenericSend+0x106>
   183b0:	683b      	ldr	r3, [r7, #0]
   183b2:	2b00      	cmp	r3, #0
   183b4:	d10b      	bne.n	183ce <xQueueGenericSend+0xde>
   183b6:	6a3b      	ldr	r3, [r7, #32]
   183b8:	0018      	movs	r0, r3
   183ba:	4ba6      	ldr	r3, [pc, #664]	; (18654 <xQueueGenericSend+0x364>)
   183bc:	4798      	blx	r3
   183be:	0003      	movs	r3, r0
   183c0:	001a      	movs	r2, r3
   183c2:	4ba5      	ldr	r3, [pc, #660]	; (18658 <xQueueGenericSend+0x368>)
   183c4:	5c9b      	ldrb	r3, [r3, r2]
   183c6:	3320      	adds	r3, #32
   183c8:	b2db      	uxtb	r3, r3
   183ca:	001d      	movs	r5, r3
   183cc:	e000      	b.n	183d0 <xQueueGenericSend+0xe0>
   183ce:	2525      	movs	r5, #37	; 0x25
   183d0:	6a3b      	ldr	r3, [r7, #32]
   183d2:	0018      	movs	r0, r3
   183d4:	4b9f      	ldr	r3, [pc, #636]	; (18654 <xQueueGenericSend+0x364>)
   183d6:	4798      	blx	r3
   183d8:	0003      	movs	r3, r0
   183da:	001a      	movs	r2, r3
   183dc:	4b9e      	ldr	r3, [pc, #632]	; (18658 <xQueueGenericSend+0x368>)
   183de:	5c9c      	ldrb	r4, [r3, r2]
   183e0:	6a3b      	ldr	r3, [r7, #32]
   183e2:	0018      	movs	r0, r3
   183e4:	4b9d      	ldr	r3, [pc, #628]	; (1865c <xQueueGenericSend+0x36c>)
   183e6:	4798      	blx	r3
   183e8:	0003      	movs	r3, r0
   183ea:	b2db      	uxtb	r3, r3
   183ec:	001a      	movs	r2, r3
   183ee:	0021      	movs	r1, r4
   183f0:	0028      	movs	r0, r5
   183f2:	4b9b      	ldr	r3, [pc, #620]	; (18660 <xQueueGenericSend+0x370>)
   183f4:	4798      	blx	r3
   183f6:	6a3b      	ldr	r3, [r7, #32]
   183f8:	0018      	movs	r0, r3
   183fa:	4b96      	ldr	r3, [pc, #600]	; (18654 <xQueueGenericSend+0x364>)
   183fc:	4798      	blx	r3
   183fe:	0003      	movs	r3, r0
   18400:	001a      	movs	r2, r3
   18402:	4b95      	ldr	r3, [pc, #596]	; (18658 <xQueueGenericSend+0x368>)
   18404:	5c9c      	ldrb	r4, [r3, r2]
   18406:	6a3b      	ldr	r3, [r7, #32]
   18408:	0018      	movs	r0, r3
   1840a:	4b94      	ldr	r3, [pc, #592]	; (1865c <xQueueGenericSend+0x36c>)
   1840c:	4798      	blx	r3
   1840e:	0003      	movs	r3, r0
   18410:	b2dd      	uxtb	r5, r3
   18412:	6a3b      	ldr	r3, [r7, #32]
   18414:	0018      	movs	r0, r3
   18416:	4b8f      	ldr	r3, [pc, #572]	; (18654 <xQueueGenericSend+0x364>)
   18418:	4798      	blx	r3
   1841a:	0003      	movs	r3, r0
   1841c:	001a      	movs	r2, r3
   1841e:	4b8e      	ldr	r3, [pc, #568]	; (18658 <xQueueGenericSend+0x368>)
   18420:	5c9b      	ldrb	r3, [r3, r2]
   18422:	2b02      	cmp	r3, #2
   18424:	d005      	beq.n	18432 <xQueueGenericSend+0x142>
   18426:	6a3b      	ldr	r3, [r7, #32]
   18428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1842a:	b2db      	uxtb	r3, r3
   1842c:	3301      	adds	r3, #1
   1842e:	b2db      	uxtb	r3, r3
   18430:	e000      	b.n	18434 <xQueueGenericSend+0x144>
   18432:	2300      	movs	r3, #0
   18434:	001a      	movs	r2, r3
   18436:	0029      	movs	r1, r5
   18438:	0020      	movs	r0, r4
   1843a:	4b8a      	ldr	r3, [pc, #552]	; (18664 <xQueueGenericSend+0x374>)
   1843c:	4798      	blx	r3
   1843e:	683a      	ldr	r2, [r7, #0]
   18440:	68b9      	ldr	r1, [r7, #8]
   18442:	6a3b      	ldr	r3, [r7, #32]
   18444:	0018      	movs	r0, r3
   18446:	4b88      	ldr	r3, [pc, #544]	; (18668 <xQueueGenericSend+0x378>)
   18448:	4798      	blx	r3
   1844a:	0003      	movs	r3, r0
   1844c:	61fb      	str	r3, [r7, #28]
   1844e:	6a3b      	ldr	r3, [r7, #32]
   18450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   18452:	2b00      	cmp	r3, #0
   18454:	d00a      	beq.n	1846c <xQueueGenericSend+0x17c>
   18456:	683a      	ldr	r2, [r7, #0]
   18458:	6a3b      	ldr	r3, [r7, #32]
   1845a:	0011      	movs	r1, r2
   1845c:	0018      	movs	r0, r3
   1845e:	4b83      	ldr	r3, [pc, #524]	; (1866c <xQueueGenericSend+0x37c>)
   18460:	4798      	blx	r3
   18462:	1e03      	subs	r3, r0, #0
   18464:	d015      	beq.n	18492 <xQueueGenericSend+0x1a2>
   18466:	4b82      	ldr	r3, [pc, #520]	; (18670 <xQueueGenericSend+0x380>)
   18468:	4798      	blx	r3
   1846a:	e012      	b.n	18492 <xQueueGenericSend+0x1a2>
   1846c:	6a3b      	ldr	r3, [r7, #32]
   1846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18470:	2b00      	cmp	r3, #0
   18472:	d009      	beq.n	18488 <xQueueGenericSend+0x198>
   18474:	6a3b      	ldr	r3, [r7, #32]
   18476:	3324      	adds	r3, #36	; 0x24
   18478:	0018      	movs	r0, r3
   1847a:	4b7e      	ldr	r3, [pc, #504]	; (18674 <xQueueGenericSend+0x384>)
   1847c:	4798      	blx	r3
   1847e:	1e03      	subs	r3, r0, #0
   18480:	d007      	beq.n	18492 <xQueueGenericSend+0x1a2>
   18482:	4b7b      	ldr	r3, [pc, #492]	; (18670 <xQueueGenericSend+0x380>)
   18484:	4798      	blx	r3
   18486:	e004      	b.n	18492 <xQueueGenericSend+0x1a2>
   18488:	69fb      	ldr	r3, [r7, #28]
   1848a:	2b00      	cmp	r3, #0
   1848c:	d001      	beq.n	18492 <xQueueGenericSend+0x1a2>
   1848e:	4b78      	ldr	r3, [pc, #480]	; (18670 <xQueueGenericSend+0x380>)
   18490:	4798      	blx	r3
   18492:	4b79      	ldr	r3, [pc, #484]	; (18678 <xQueueGenericSend+0x388>)
   18494:	4798      	blx	r3
   18496:	2301      	movs	r3, #1
   18498:	e142      	b.n	18720 <xQueueGenericSend+0x430>
   1849a:	687b      	ldr	r3, [r7, #4]
   1849c:	2b00      	cmp	r3, #0
   1849e:	d140      	bne.n	18522 <xQueueGenericSend+0x232>
   184a0:	4b75      	ldr	r3, [pc, #468]	; (18678 <xQueueGenericSend+0x388>)
   184a2:	4798      	blx	r3
   184a4:	4b67      	ldr	r3, [pc, #412]	; (18644 <xQueueGenericSend+0x354>)
   184a6:	4798      	blx	r3
   184a8:	0003      	movs	r3, r0
   184aa:	0018      	movs	r0, r3
   184ac:	4b66      	ldr	r3, [pc, #408]	; (18648 <xQueueGenericSend+0x358>)
   184ae:	4798      	blx	r3
   184b0:	0003      	movs	r3, r0
   184b2:	001a      	movs	r2, r3
   184b4:	4b65      	ldr	r3, [pc, #404]	; (1864c <xQueueGenericSend+0x35c>)
   184b6:	881b      	ldrh	r3, [r3, #0]
   184b8:	4013      	ands	r3, r2
   184ba:	b29b      	uxth	r3, r3
   184bc:	2b00      	cmp	r3, #0
   184be:	d02e      	beq.n	1851e <xQueueGenericSend+0x22e>
   184c0:	6a3b      	ldr	r3, [r7, #32]
   184c2:	0018      	movs	r0, r3
   184c4:	4b62      	ldr	r3, [pc, #392]	; (18650 <xQueueGenericSend+0x360>)
   184c6:	4798      	blx	r3
   184c8:	0003      	movs	r3, r0
   184ca:	001a      	movs	r2, r3
   184cc:	4b5f      	ldr	r3, [pc, #380]	; (1864c <xQueueGenericSend+0x35c>)
   184ce:	881b      	ldrh	r3, [r3, #0]
   184d0:	4013      	ands	r3, r2
   184d2:	b29b      	uxth	r3, r3
   184d4:	2b00      	cmp	r3, #0
   184d6:	d022      	beq.n	1851e <xQueueGenericSend+0x22e>
   184d8:	683b      	ldr	r3, [r7, #0]
   184da:	2b00      	cmp	r3, #0
   184dc:	d10b      	bne.n	184f6 <xQueueGenericSend+0x206>
   184de:	6a3b      	ldr	r3, [r7, #32]
   184e0:	0018      	movs	r0, r3
   184e2:	4b5c      	ldr	r3, [pc, #368]	; (18654 <xQueueGenericSend+0x364>)
   184e4:	4798      	blx	r3
   184e6:	0003      	movs	r3, r0
   184e8:	001a      	movs	r2, r3
   184ea:	4b5b      	ldr	r3, [pc, #364]	; (18658 <xQueueGenericSend+0x368>)
   184ec:	5c9b      	ldrb	r3, [r3, r2]
   184ee:	3348      	adds	r3, #72	; 0x48
   184f0:	b2db      	uxtb	r3, r3
   184f2:	001d      	movs	r5, r3
   184f4:	e000      	b.n	184f8 <xQueueGenericSend+0x208>
   184f6:	254d      	movs	r5, #77	; 0x4d
   184f8:	6a3b      	ldr	r3, [r7, #32]
   184fa:	0018      	movs	r0, r3
   184fc:	4b55      	ldr	r3, [pc, #340]	; (18654 <xQueueGenericSend+0x364>)
   184fe:	4798      	blx	r3
   18500:	0003      	movs	r3, r0
   18502:	001a      	movs	r2, r3
   18504:	4b54      	ldr	r3, [pc, #336]	; (18658 <xQueueGenericSend+0x368>)
   18506:	5c9c      	ldrb	r4, [r3, r2]
   18508:	6a3b      	ldr	r3, [r7, #32]
   1850a:	0018      	movs	r0, r3
   1850c:	4b53      	ldr	r3, [pc, #332]	; (1865c <xQueueGenericSend+0x36c>)
   1850e:	4798      	blx	r3
   18510:	0003      	movs	r3, r0
   18512:	b2db      	uxtb	r3, r3
   18514:	001a      	movs	r2, r3
   18516:	0021      	movs	r1, r4
   18518:	0028      	movs	r0, r5
   1851a:	4b51      	ldr	r3, [pc, #324]	; (18660 <xQueueGenericSend+0x370>)
   1851c:	4798      	blx	r3
   1851e:	2300      	movs	r3, #0
   18520:	e0fe      	b.n	18720 <xQueueGenericSend+0x430>
   18522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18524:	2b00      	cmp	r3, #0
   18526:	d106      	bne.n	18536 <xQueueGenericSend+0x246>
   18528:	2314      	movs	r3, #20
   1852a:	18fb      	adds	r3, r7, r3
   1852c:	0018      	movs	r0, r3
   1852e:	4b53      	ldr	r3, [pc, #332]	; (1867c <xQueueGenericSend+0x38c>)
   18530:	4798      	blx	r3
   18532:	2301      	movs	r3, #1
   18534:	627b      	str	r3, [r7, #36]	; 0x24
   18536:	4b50      	ldr	r3, [pc, #320]	; (18678 <xQueueGenericSend+0x388>)
   18538:	4798      	blx	r3
   1853a:	4b51      	ldr	r3, [pc, #324]	; (18680 <xQueueGenericSend+0x390>)
   1853c:	4798      	blx	r3
   1853e:	4b40      	ldr	r3, [pc, #256]	; (18640 <xQueueGenericSend+0x350>)
   18540:	4798      	blx	r3
   18542:	6a3b      	ldr	r3, [r7, #32]
   18544:	2244      	movs	r2, #68	; 0x44
   18546:	5c9b      	ldrb	r3, [r3, r2]
   18548:	b25b      	sxtb	r3, r3
   1854a:	3301      	adds	r3, #1
   1854c:	d103      	bne.n	18556 <xQueueGenericSend+0x266>
   1854e:	6a3b      	ldr	r3, [r7, #32]
   18550:	2244      	movs	r2, #68	; 0x44
   18552:	2100      	movs	r1, #0
   18554:	5499      	strb	r1, [r3, r2]
   18556:	6a3b      	ldr	r3, [r7, #32]
   18558:	2245      	movs	r2, #69	; 0x45
   1855a:	5c9b      	ldrb	r3, [r3, r2]
   1855c:	b25b      	sxtb	r3, r3
   1855e:	3301      	adds	r3, #1
   18560:	d103      	bne.n	1856a <xQueueGenericSend+0x27a>
   18562:	6a3b      	ldr	r3, [r7, #32]
   18564:	2245      	movs	r2, #69	; 0x45
   18566:	2100      	movs	r1, #0
   18568:	5499      	strb	r1, [r3, r2]
   1856a:	4b43      	ldr	r3, [pc, #268]	; (18678 <xQueueGenericSend+0x388>)
   1856c:	4798      	blx	r3
   1856e:	1d3a      	adds	r2, r7, #4
   18570:	2314      	movs	r3, #20
   18572:	18fb      	adds	r3, r7, r3
   18574:	0011      	movs	r1, r2
   18576:	0018      	movs	r0, r3
   18578:	4b42      	ldr	r3, [pc, #264]	; (18684 <xQueueGenericSend+0x394>)
   1857a:	4798      	blx	r3
   1857c:	1e03      	subs	r3, r0, #0
   1857e:	d000      	beq.n	18582 <xQueueGenericSend+0x292>
   18580:	e08a      	b.n	18698 <xQueueGenericSend+0x3a8>
   18582:	6a3b      	ldr	r3, [r7, #32]
   18584:	0018      	movs	r0, r3
   18586:	4b40      	ldr	r3, [pc, #256]	; (18688 <xQueueGenericSend+0x398>)
   18588:	4798      	blx	r3
   1858a:	1e03      	subs	r3, r0, #0
   1858c:	d04f      	beq.n	1862e <xQueueGenericSend+0x33e>
   1858e:	4b2d      	ldr	r3, [pc, #180]	; (18644 <xQueueGenericSend+0x354>)
   18590:	4798      	blx	r3
   18592:	0003      	movs	r3, r0
   18594:	0018      	movs	r0, r3
   18596:	4b2c      	ldr	r3, [pc, #176]	; (18648 <xQueueGenericSend+0x358>)
   18598:	4798      	blx	r3
   1859a:	0003      	movs	r3, r0
   1859c:	001a      	movs	r2, r3
   1859e:	4b2b      	ldr	r3, [pc, #172]	; (1864c <xQueueGenericSend+0x35c>)
   185a0:	881b      	ldrh	r3, [r3, #0]
   185a2:	4013      	ands	r3, r2
   185a4:	b29b      	uxth	r3, r3
   185a6:	2b00      	cmp	r3, #0
   185a8:	d02e      	beq.n	18608 <xQueueGenericSend+0x318>
   185aa:	6a3b      	ldr	r3, [r7, #32]
   185ac:	0018      	movs	r0, r3
   185ae:	4b28      	ldr	r3, [pc, #160]	; (18650 <xQueueGenericSend+0x360>)
   185b0:	4798      	blx	r3
   185b2:	0003      	movs	r3, r0
   185b4:	001a      	movs	r2, r3
   185b6:	4b25      	ldr	r3, [pc, #148]	; (1864c <xQueueGenericSend+0x35c>)
   185b8:	881b      	ldrh	r3, [r3, #0]
   185ba:	4013      	ands	r3, r2
   185bc:	b29b      	uxth	r3, r3
   185be:	2b00      	cmp	r3, #0
   185c0:	d022      	beq.n	18608 <xQueueGenericSend+0x318>
   185c2:	683b      	ldr	r3, [r7, #0]
   185c4:	2b00      	cmp	r3, #0
   185c6:	d10b      	bne.n	185e0 <xQueueGenericSend+0x2f0>
   185c8:	6a3b      	ldr	r3, [r7, #32]
   185ca:	0018      	movs	r0, r3
   185cc:	4b21      	ldr	r3, [pc, #132]	; (18654 <xQueueGenericSend+0x364>)
   185ce:	4798      	blx	r3
   185d0:	0003      	movs	r3, r0
   185d2:	001a      	movs	r2, r3
   185d4:	4b20      	ldr	r3, [pc, #128]	; (18658 <xQueueGenericSend+0x368>)
   185d6:	5c9b      	ldrb	r3, [r3, r2]
   185d8:	3370      	adds	r3, #112	; 0x70
   185da:	b2db      	uxtb	r3, r3
   185dc:	001d      	movs	r5, r3
   185de:	e000      	b.n	185e2 <xQueueGenericSend+0x2f2>
   185e0:	2575      	movs	r5, #117	; 0x75
   185e2:	6a3b      	ldr	r3, [r7, #32]
   185e4:	0018      	movs	r0, r3
   185e6:	4b1b      	ldr	r3, [pc, #108]	; (18654 <xQueueGenericSend+0x364>)
   185e8:	4798      	blx	r3
   185ea:	0003      	movs	r3, r0
   185ec:	001a      	movs	r2, r3
   185ee:	4b1a      	ldr	r3, [pc, #104]	; (18658 <xQueueGenericSend+0x368>)
   185f0:	5c9c      	ldrb	r4, [r3, r2]
   185f2:	6a3b      	ldr	r3, [r7, #32]
   185f4:	0018      	movs	r0, r3
   185f6:	4b19      	ldr	r3, [pc, #100]	; (1865c <xQueueGenericSend+0x36c>)
   185f8:	4798      	blx	r3
   185fa:	0003      	movs	r3, r0
   185fc:	b2db      	uxtb	r3, r3
   185fe:	001a      	movs	r2, r3
   18600:	0021      	movs	r1, r4
   18602:	0028      	movs	r0, r5
   18604:	4b16      	ldr	r3, [pc, #88]	; (18660 <xQueueGenericSend+0x370>)
   18606:	4798      	blx	r3
   18608:	6a3b      	ldr	r3, [r7, #32]
   1860a:	3310      	adds	r3, #16
   1860c:	687a      	ldr	r2, [r7, #4]
   1860e:	0011      	movs	r1, r2
   18610:	0018      	movs	r0, r3
   18612:	4b1e      	ldr	r3, [pc, #120]	; (1868c <xQueueGenericSend+0x39c>)
   18614:	4798      	blx	r3
   18616:	6a3b      	ldr	r3, [r7, #32]
   18618:	0018      	movs	r0, r3
   1861a:	4b1d      	ldr	r3, [pc, #116]	; (18690 <xQueueGenericSend+0x3a0>)
   1861c:	4798      	blx	r3
   1861e:	4b1d      	ldr	r3, [pc, #116]	; (18694 <xQueueGenericSend+0x3a4>)
   18620:	4798      	blx	r3
   18622:	1e03      	subs	r3, r0, #0
   18624:	d000      	beq.n	18628 <xQueueGenericSend+0x338>
   18626:	e69d      	b.n	18364 <xQueueGenericSend+0x74>
   18628:	4b11      	ldr	r3, [pc, #68]	; (18670 <xQueueGenericSend+0x380>)
   1862a:	4798      	blx	r3
   1862c:	e69a      	b.n	18364 <xQueueGenericSend+0x74>
   1862e:	6a3b      	ldr	r3, [r7, #32]
   18630:	0018      	movs	r0, r3
   18632:	4b17      	ldr	r3, [pc, #92]	; (18690 <xQueueGenericSend+0x3a0>)
   18634:	4798      	blx	r3
   18636:	4b17      	ldr	r3, [pc, #92]	; (18694 <xQueueGenericSend+0x3a4>)
   18638:	4798      	blx	r3
   1863a:	e693      	b.n	18364 <xQueueGenericSend+0x74>
   1863c:	0001aa7d 	.word	0x0001aa7d
   18640:	00017d59 	.word	0x00017d59
   18644:	00015ff5 	.word	0x00015ff5
   18648:	00015d59 	.word	0x00015d59
   1864c:	200000f0 	.word	0x200000f0
   18650:	00015e19 	.word	0x00015e19
   18654:	00015d19 	.word	0x00015d19
   18658:	200000e4 	.word	0x200000e4
   1865c:	00015df9 	.word	0x00015df9
   18660:	00016751 	.word	0x00016751
   18664:	00016dad 	.word	0x00016dad
   18668:	00019529 	.word	0x00019529
   1866c:	0001982d 	.word	0x0001982d
   18670:	00017d41 	.word	0x00017d41
   18674:	0001a5ed 	.word	0x0001a5ed
   18678:	00017d7d 	.word	0x00017d7d
   1867c:	0001a72d 	.word	0x0001a72d
   18680:	0001a015 	.word	0x0001a015
   18684:	0001a755 	.word	0x0001a755
   18688:	0001977d 	.word	0x0001977d
   1868c:	0001a4c9 	.word	0x0001a4c9
   18690:	00019659 	.word	0x00019659
   18694:	0001a02d 	.word	0x0001a02d
   18698:	6a3b      	ldr	r3, [r7, #32]
   1869a:	0018      	movs	r0, r3
   1869c:	4b22      	ldr	r3, [pc, #136]	; (18728 <xQueueGenericSend+0x438>)
   1869e:	4798      	blx	r3
   186a0:	4b22      	ldr	r3, [pc, #136]	; (1872c <xQueueGenericSend+0x43c>)
   186a2:	4798      	blx	r3
   186a4:	4b22      	ldr	r3, [pc, #136]	; (18730 <xQueueGenericSend+0x440>)
   186a6:	4798      	blx	r3
   186a8:	0003      	movs	r3, r0
   186aa:	0018      	movs	r0, r3
   186ac:	4b21      	ldr	r3, [pc, #132]	; (18734 <xQueueGenericSend+0x444>)
   186ae:	4798      	blx	r3
   186b0:	0003      	movs	r3, r0
   186b2:	001a      	movs	r2, r3
   186b4:	4b20      	ldr	r3, [pc, #128]	; (18738 <xQueueGenericSend+0x448>)
   186b6:	881b      	ldrh	r3, [r3, #0]
   186b8:	4013      	ands	r3, r2
   186ba:	b29b      	uxth	r3, r3
   186bc:	2b00      	cmp	r3, #0
   186be:	d02e      	beq.n	1871e <xQueueGenericSend+0x42e>
   186c0:	6a3b      	ldr	r3, [r7, #32]
   186c2:	0018      	movs	r0, r3
   186c4:	4b1d      	ldr	r3, [pc, #116]	; (1873c <xQueueGenericSend+0x44c>)
   186c6:	4798      	blx	r3
   186c8:	0003      	movs	r3, r0
   186ca:	001a      	movs	r2, r3
   186cc:	4b1a      	ldr	r3, [pc, #104]	; (18738 <xQueueGenericSend+0x448>)
   186ce:	881b      	ldrh	r3, [r3, #0]
   186d0:	4013      	ands	r3, r2
   186d2:	b29b      	uxth	r3, r3
   186d4:	2b00      	cmp	r3, #0
   186d6:	d022      	beq.n	1871e <xQueueGenericSend+0x42e>
   186d8:	683b      	ldr	r3, [r7, #0]
   186da:	2b00      	cmp	r3, #0
   186dc:	d10b      	bne.n	186f6 <xQueueGenericSend+0x406>
   186de:	6a3b      	ldr	r3, [r7, #32]
   186e0:	0018      	movs	r0, r3
   186e2:	4b17      	ldr	r3, [pc, #92]	; (18740 <xQueueGenericSend+0x450>)
   186e4:	4798      	blx	r3
   186e6:	0003      	movs	r3, r0
   186e8:	001a      	movs	r2, r3
   186ea:	4b16      	ldr	r3, [pc, #88]	; (18744 <xQueueGenericSend+0x454>)
   186ec:	5c9b      	ldrb	r3, [r3, r2]
   186ee:	3348      	adds	r3, #72	; 0x48
   186f0:	b2db      	uxtb	r3, r3
   186f2:	001d      	movs	r5, r3
   186f4:	e000      	b.n	186f8 <xQueueGenericSend+0x408>
   186f6:	254d      	movs	r5, #77	; 0x4d
   186f8:	6a3b      	ldr	r3, [r7, #32]
   186fa:	0018      	movs	r0, r3
   186fc:	4b10      	ldr	r3, [pc, #64]	; (18740 <xQueueGenericSend+0x450>)
   186fe:	4798      	blx	r3
   18700:	0003      	movs	r3, r0
   18702:	001a      	movs	r2, r3
   18704:	4b0f      	ldr	r3, [pc, #60]	; (18744 <xQueueGenericSend+0x454>)
   18706:	5c9c      	ldrb	r4, [r3, r2]
   18708:	6a3b      	ldr	r3, [r7, #32]
   1870a:	0018      	movs	r0, r3
   1870c:	4b0e      	ldr	r3, [pc, #56]	; (18748 <xQueueGenericSend+0x458>)
   1870e:	4798      	blx	r3
   18710:	0003      	movs	r3, r0
   18712:	b2db      	uxtb	r3, r3
   18714:	001a      	movs	r2, r3
   18716:	0021      	movs	r1, r4
   18718:	0028      	movs	r0, r5
   1871a:	4b0c      	ldr	r3, [pc, #48]	; (1874c <xQueueGenericSend+0x45c>)
   1871c:	4798      	blx	r3
   1871e:	2300      	movs	r3, #0
   18720:	0018      	movs	r0, r3
   18722:	46bd      	mov	sp, r7
   18724:	b00a      	add	sp, #40	; 0x28
   18726:	bdb0      	pop	{r4, r5, r7, pc}
   18728:	00019659 	.word	0x00019659
   1872c:	0001a02d 	.word	0x0001a02d
   18730:	00015ff5 	.word	0x00015ff5
   18734:	00015d59 	.word	0x00015d59
   18738:	200000f0 	.word	0x200000f0
   1873c:	00015e19 	.word	0x00015e19
   18740:	00015d19 	.word	0x00015d19
   18744:	200000e4 	.word	0x200000e4
   18748:	00015df9 	.word	0x00015df9
   1874c:	00016751 	.word	0x00016751

00018750 <xQueueGenericSendFromISR>:
   18750:	b5b0      	push	{r4, r5, r7, lr}
   18752:	b088      	sub	sp, #32
   18754:	af00      	add	r7, sp, #0
   18756:	60f8      	str	r0, [r7, #12]
   18758:	60b9      	str	r1, [r7, #8]
   1875a:	607a      	str	r2, [r7, #4]
   1875c:	603b      	str	r3, [r7, #0]
   1875e:	68fb      	ldr	r3, [r7, #12]
   18760:	61bb      	str	r3, [r7, #24]
   18762:	69bb      	ldr	r3, [r7, #24]
   18764:	2b00      	cmp	r3, #0
   18766:	d101      	bne.n	1876c <xQueueGenericSendFromISR+0x1c>
   18768:	b672      	cpsid	i
   1876a:	e7fe      	b.n	1876a <xQueueGenericSendFromISR+0x1a>
   1876c:	68bb      	ldr	r3, [r7, #8]
   1876e:	2b00      	cmp	r3, #0
   18770:	d103      	bne.n	1877a <xQueueGenericSendFromISR+0x2a>
   18772:	69bb      	ldr	r3, [r7, #24]
   18774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18776:	2b00      	cmp	r3, #0
   18778:	d101      	bne.n	1877e <xQueueGenericSendFromISR+0x2e>
   1877a:	2301      	movs	r3, #1
   1877c:	e000      	b.n	18780 <xQueueGenericSendFromISR+0x30>
   1877e:	2300      	movs	r3, #0
   18780:	2b00      	cmp	r3, #0
   18782:	d101      	bne.n	18788 <xQueueGenericSendFromISR+0x38>
   18784:	b672      	cpsid	i
   18786:	e7fe      	b.n	18786 <xQueueGenericSendFromISR+0x36>
   18788:	683b      	ldr	r3, [r7, #0]
   1878a:	2b02      	cmp	r3, #2
   1878c:	d103      	bne.n	18796 <xQueueGenericSendFromISR+0x46>
   1878e:	69bb      	ldr	r3, [r7, #24]
   18790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18792:	2b01      	cmp	r3, #1
   18794:	d101      	bne.n	1879a <xQueueGenericSendFromISR+0x4a>
   18796:	2301      	movs	r3, #1
   18798:	e000      	b.n	1879c <xQueueGenericSendFromISR+0x4c>
   1879a:	2300      	movs	r3, #0
   1879c:	2b00      	cmp	r3, #0
   1879e:	d101      	bne.n	187a4 <xQueueGenericSendFromISR+0x54>
   187a0:	b672      	cpsid	i
   187a2:	e7fe      	b.n	187a2 <xQueueGenericSendFromISR+0x52>
   187a4:	4b68      	ldr	r3, [pc, #416]	; (18948 <xQueueGenericSendFromISR+0x1f8>)
   187a6:	4798      	blx	r3
   187a8:	0003      	movs	r3, r0
   187aa:	617b      	str	r3, [r7, #20]
   187ac:	69bb      	ldr	r3, [r7, #24]
   187ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   187b0:	69bb      	ldr	r3, [r7, #24]
   187b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   187b4:	429a      	cmp	r2, r3
   187b6:	d303      	bcc.n	187c0 <xQueueGenericSendFromISR+0x70>
   187b8:	683b      	ldr	r3, [r7, #0]
   187ba:	2b02      	cmp	r3, #2
   187bc:	d000      	beq.n	187c0 <xQueueGenericSendFromISR+0x70>
   187be:	e088      	b.n	188d2 <xQueueGenericSendFromISR+0x182>
   187c0:	2313      	movs	r3, #19
   187c2:	18fb      	adds	r3, r7, r3
   187c4:	69ba      	ldr	r2, [r7, #24]
   187c6:	2145      	movs	r1, #69	; 0x45
   187c8:	5c52      	ldrb	r2, [r2, r1]
   187ca:	701a      	strb	r2, [r3, #0]
   187cc:	69bb      	ldr	r3, [r7, #24]
   187ce:	0018      	movs	r0, r3
   187d0:	4b5e      	ldr	r3, [pc, #376]	; (1894c <xQueueGenericSendFromISR+0x1fc>)
   187d2:	4798      	blx	r3
   187d4:	0003      	movs	r3, r0
   187d6:	001a      	movs	r2, r3
   187d8:	4b5d      	ldr	r3, [pc, #372]	; (18950 <xQueueGenericSendFromISR+0x200>)
   187da:	881b      	ldrh	r3, [r3, #0]
   187dc:	4013      	ands	r3, r2
   187de:	b29b      	uxth	r3, r3
   187e0:	2b00      	cmp	r3, #0
   187e2:	d022      	beq.n	1882a <xQueueGenericSendFromISR+0xda>
   187e4:	683b      	ldr	r3, [r7, #0]
   187e6:	2b00      	cmp	r3, #0
   187e8:	d10b      	bne.n	18802 <xQueueGenericSendFromISR+0xb2>
   187ea:	69bb      	ldr	r3, [r7, #24]
   187ec:	0018      	movs	r0, r3
   187ee:	4b59      	ldr	r3, [pc, #356]	; (18954 <xQueueGenericSendFromISR+0x204>)
   187f0:	4798      	blx	r3
   187f2:	0003      	movs	r3, r0
   187f4:	001a      	movs	r2, r3
   187f6:	4b58      	ldr	r3, [pc, #352]	; (18958 <xQueueGenericSendFromISR+0x208>)
   187f8:	5c9b      	ldrb	r3, [r3, r2]
   187fa:	3330      	adds	r3, #48	; 0x30
   187fc:	b2db      	uxtb	r3, r3
   187fe:	001d      	movs	r5, r3
   18800:	e000      	b.n	18804 <xQueueGenericSendFromISR+0xb4>
   18802:	2535      	movs	r5, #53	; 0x35
   18804:	69bb      	ldr	r3, [r7, #24]
   18806:	0018      	movs	r0, r3
   18808:	4b52      	ldr	r3, [pc, #328]	; (18954 <xQueueGenericSendFromISR+0x204>)
   1880a:	4798      	blx	r3
   1880c:	0003      	movs	r3, r0
   1880e:	001a      	movs	r2, r3
   18810:	4b51      	ldr	r3, [pc, #324]	; (18958 <xQueueGenericSendFromISR+0x208>)
   18812:	5c9c      	ldrb	r4, [r3, r2]
   18814:	69bb      	ldr	r3, [r7, #24]
   18816:	0018      	movs	r0, r3
   18818:	4b50      	ldr	r3, [pc, #320]	; (1895c <xQueueGenericSendFromISR+0x20c>)
   1881a:	4798      	blx	r3
   1881c:	0003      	movs	r3, r0
   1881e:	b2db      	uxtb	r3, r3
   18820:	001a      	movs	r2, r3
   18822:	0021      	movs	r1, r4
   18824:	0028      	movs	r0, r5
   18826:	4b4e      	ldr	r3, [pc, #312]	; (18960 <xQueueGenericSendFromISR+0x210>)
   18828:	4798      	blx	r3
   1882a:	69bb      	ldr	r3, [r7, #24]
   1882c:	0018      	movs	r0, r3
   1882e:	4b49      	ldr	r3, [pc, #292]	; (18954 <xQueueGenericSendFromISR+0x204>)
   18830:	4798      	blx	r3
   18832:	0003      	movs	r3, r0
   18834:	001a      	movs	r2, r3
   18836:	4b48      	ldr	r3, [pc, #288]	; (18958 <xQueueGenericSendFromISR+0x208>)
   18838:	5c9c      	ldrb	r4, [r3, r2]
   1883a:	69bb      	ldr	r3, [r7, #24]
   1883c:	0018      	movs	r0, r3
   1883e:	4b47      	ldr	r3, [pc, #284]	; (1895c <xQueueGenericSendFromISR+0x20c>)
   18840:	4798      	blx	r3
   18842:	0003      	movs	r3, r0
   18844:	b2d9      	uxtb	r1, r3
   18846:	69bb      	ldr	r3, [r7, #24]
   18848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1884a:	b2db      	uxtb	r3, r3
   1884c:	3301      	adds	r3, #1
   1884e:	b2db      	uxtb	r3, r3
   18850:	001a      	movs	r2, r3
   18852:	0020      	movs	r0, r4
   18854:	4b43      	ldr	r3, [pc, #268]	; (18964 <xQueueGenericSendFromISR+0x214>)
   18856:	4798      	blx	r3
   18858:	683a      	ldr	r2, [r7, #0]
   1885a:	68b9      	ldr	r1, [r7, #8]
   1885c:	69bb      	ldr	r3, [r7, #24]
   1885e:	0018      	movs	r0, r3
   18860:	4b41      	ldr	r3, [pc, #260]	; (18968 <xQueueGenericSendFromISR+0x218>)
   18862:	4798      	blx	r3
   18864:	2313      	movs	r3, #19
   18866:	18fb      	adds	r3, r7, r3
   18868:	781b      	ldrb	r3, [r3, #0]
   1886a:	b25b      	sxtb	r3, r3
   1886c:	3301      	adds	r3, #1
   1886e:	d124      	bne.n	188ba <xQueueGenericSendFromISR+0x16a>
   18870:	69bb      	ldr	r3, [r7, #24]
   18872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   18874:	2b00      	cmp	r3, #0
   18876:	d00e      	beq.n	18896 <xQueueGenericSendFromISR+0x146>
   18878:	683a      	ldr	r2, [r7, #0]
   1887a:	69bb      	ldr	r3, [r7, #24]
   1887c:	0011      	movs	r1, r2
   1887e:	0018      	movs	r0, r3
   18880:	4b3a      	ldr	r3, [pc, #232]	; (1896c <xQueueGenericSendFromISR+0x21c>)
   18882:	4798      	blx	r3
   18884:	1e03      	subs	r3, r0, #0
   18886:	d021      	beq.n	188cc <xQueueGenericSendFromISR+0x17c>
   18888:	687b      	ldr	r3, [r7, #4]
   1888a:	2b00      	cmp	r3, #0
   1888c:	d01e      	beq.n	188cc <xQueueGenericSendFromISR+0x17c>
   1888e:	687b      	ldr	r3, [r7, #4]
   18890:	2201      	movs	r2, #1
   18892:	601a      	str	r2, [r3, #0]
   18894:	e01a      	b.n	188cc <xQueueGenericSendFromISR+0x17c>
   18896:	69bb      	ldr	r3, [r7, #24]
   18898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1889a:	2b00      	cmp	r3, #0
   1889c:	d016      	beq.n	188cc <xQueueGenericSendFromISR+0x17c>
   1889e:	69bb      	ldr	r3, [r7, #24]
   188a0:	3324      	adds	r3, #36	; 0x24
   188a2:	0018      	movs	r0, r3
   188a4:	4b32      	ldr	r3, [pc, #200]	; (18970 <xQueueGenericSendFromISR+0x220>)
   188a6:	4798      	blx	r3
   188a8:	1e03      	subs	r3, r0, #0
   188aa:	d00f      	beq.n	188cc <xQueueGenericSendFromISR+0x17c>
   188ac:	687b      	ldr	r3, [r7, #4]
   188ae:	2b00      	cmp	r3, #0
   188b0:	d00c      	beq.n	188cc <xQueueGenericSendFromISR+0x17c>
   188b2:	687b      	ldr	r3, [r7, #4]
   188b4:	2201      	movs	r2, #1
   188b6:	601a      	str	r2, [r3, #0]
   188b8:	e008      	b.n	188cc <xQueueGenericSendFromISR+0x17c>
   188ba:	2313      	movs	r3, #19
   188bc:	18fb      	adds	r3, r7, r3
   188be:	781b      	ldrb	r3, [r3, #0]
   188c0:	3301      	adds	r3, #1
   188c2:	b2db      	uxtb	r3, r3
   188c4:	b259      	sxtb	r1, r3
   188c6:	69bb      	ldr	r3, [r7, #24]
   188c8:	2245      	movs	r2, #69	; 0x45
   188ca:	5499      	strb	r1, [r3, r2]
   188cc:	2301      	movs	r3, #1
   188ce:	61fb      	str	r3, [r7, #28]
   188d0:	e030      	b.n	18934 <xQueueGenericSendFromISR+0x1e4>
   188d2:	69bb      	ldr	r3, [r7, #24]
   188d4:	0018      	movs	r0, r3
   188d6:	4b1d      	ldr	r3, [pc, #116]	; (1894c <xQueueGenericSendFromISR+0x1fc>)
   188d8:	4798      	blx	r3
   188da:	0003      	movs	r3, r0
   188dc:	001a      	movs	r2, r3
   188de:	4b1c      	ldr	r3, [pc, #112]	; (18950 <xQueueGenericSendFromISR+0x200>)
   188e0:	881b      	ldrh	r3, [r3, #0]
   188e2:	4013      	ands	r3, r2
   188e4:	b29b      	uxth	r3, r3
   188e6:	2b00      	cmp	r3, #0
   188e8:	d022      	beq.n	18930 <xQueueGenericSendFromISR+0x1e0>
   188ea:	683b      	ldr	r3, [r7, #0]
   188ec:	2b00      	cmp	r3, #0
   188ee:	d10b      	bne.n	18908 <xQueueGenericSendFromISR+0x1b8>
   188f0:	69bb      	ldr	r3, [r7, #24]
   188f2:	0018      	movs	r0, r3
   188f4:	4b17      	ldr	r3, [pc, #92]	; (18954 <xQueueGenericSendFromISR+0x204>)
   188f6:	4798      	blx	r3
   188f8:	0003      	movs	r3, r0
   188fa:	001a      	movs	r2, r3
   188fc:	4b16      	ldr	r3, [pc, #88]	; (18958 <xQueueGenericSendFromISR+0x208>)
   188fe:	5c9b      	ldrb	r3, [r3, r2]
   18900:	3358      	adds	r3, #88	; 0x58
   18902:	b2db      	uxtb	r3, r3
   18904:	001d      	movs	r5, r3
   18906:	e000      	b.n	1890a <xQueueGenericSendFromISR+0x1ba>
   18908:	255d      	movs	r5, #93	; 0x5d
   1890a:	69bb      	ldr	r3, [r7, #24]
   1890c:	0018      	movs	r0, r3
   1890e:	4b11      	ldr	r3, [pc, #68]	; (18954 <xQueueGenericSendFromISR+0x204>)
   18910:	4798      	blx	r3
   18912:	0003      	movs	r3, r0
   18914:	001a      	movs	r2, r3
   18916:	4b10      	ldr	r3, [pc, #64]	; (18958 <xQueueGenericSendFromISR+0x208>)
   18918:	5c9c      	ldrb	r4, [r3, r2]
   1891a:	69bb      	ldr	r3, [r7, #24]
   1891c:	0018      	movs	r0, r3
   1891e:	4b0f      	ldr	r3, [pc, #60]	; (1895c <xQueueGenericSendFromISR+0x20c>)
   18920:	4798      	blx	r3
   18922:	0003      	movs	r3, r0
   18924:	b2db      	uxtb	r3, r3
   18926:	001a      	movs	r2, r3
   18928:	0021      	movs	r1, r4
   1892a:	0028      	movs	r0, r5
   1892c:	4b0c      	ldr	r3, [pc, #48]	; (18960 <xQueueGenericSendFromISR+0x210>)
   1892e:	4798      	blx	r3
   18930:	2300      	movs	r3, #0
   18932:	61fb      	str	r3, [r7, #28]
   18934:	697b      	ldr	r3, [r7, #20]
   18936:	0018      	movs	r0, r3
   18938:	4b0e      	ldr	r3, [pc, #56]	; (18974 <xQueueGenericSendFromISR+0x224>)
   1893a:	4798      	blx	r3
   1893c:	69fb      	ldr	r3, [r7, #28]
   1893e:	0018      	movs	r0, r3
   18940:	46bd      	mov	sp, r7
   18942:	b008      	add	sp, #32
   18944:	bdb0      	pop	{r4, r5, r7, pc}
   18946:	46c0      	nop			; (mov r8, r8)
   18948:	00017dad 	.word	0x00017dad
   1894c:	00015e19 	.word	0x00015e19
   18950:	200000f0 	.word	0x200000f0
   18954:	00015d19 	.word	0x00015d19
   18958:	200000e4 	.word	0x200000e4
   1895c:	00015df9 	.word	0x00015df9
   18960:	00016751 	.word	0x00016751
   18964:	00016dad 	.word	0x00016dad
   18968:	00019529 	.word	0x00019529
   1896c:	0001982d 	.word	0x0001982d
   18970:	0001a5ed 	.word	0x0001a5ed
   18974:	00017db9 	.word	0x00017db9

00018978 <xQueueGiveFromISR>:
   18978:	b580      	push	{r7, lr}
   1897a:	b082      	sub	sp, #8
   1897c:	af00      	add	r7, sp, #0
   1897e:	6078      	str	r0, [r7, #4]
   18980:	6039      	str	r1, [r7, #0]
   18982:	6839      	ldr	r1, [r7, #0]
   18984:	687b      	ldr	r3, [r7, #4]
   18986:	2200      	movs	r2, #0
   18988:	0018      	movs	r0, r3
   1898a:	4b03      	ldr	r3, [pc, #12]	; (18998 <xQueueGiveFromISR+0x20>)
   1898c:	4798      	blx	r3
   1898e:	0003      	movs	r3, r0
   18990:	0018      	movs	r0, r3
   18992:	46bd      	mov	sp, r7
   18994:	b002      	add	sp, #8
   18996:	bd80      	pop	{r7, pc}
   18998:	0001899d 	.word	0x0001899d

0001899c <MyWrapper>:
   1899c:	b5b0      	push	{r4, r5, r7, lr}
   1899e:	b08a      	sub	sp, #40	; 0x28
   189a0:	af00      	add	r7, sp, #0
   189a2:	60f8      	str	r0, [r7, #12]
   189a4:	60b9      	str	r1, [r7, #8]
   189a6:	607a      	str	r2, [r7, #4]
   189a8:	68fb      	ldr	r3, [r7, #12]
   189aa:	623b      	str	r3, [r7, #32]
   189ac:	6a3b      	ldr	r3, [r7, #32]
   189ae:	2b00      	cmp	r3, #0
   189b0:	d101      	bne.n	189b6 <MyWrapper+0x1a>
   189b2:	b672      	cpsid	i
   189b4:	e7fe      	b.n	189b4 <MyWrapper+0x18>
   189b6:	6a3b      	ldr	r3, [r7, #32]
   189b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   189ba:	2b00      	cmp	r3, #0
   189bc:	d001      	beq.n	189c2 <MyWrapper+0x26>
   189be:	b672      	cpsid	i
   189c0:	e7fe      	b.n	189c0 <MyWrapper+0x24>
   189c2:	6a3b      	ldr	r3, [r7, #32]
   189c4:	681b      	ldr	r3, [r3, #0]
   189c6:	2b00      	cmp	r3, #0
   189c8:	d103      	bne.n	189d2 <MyWrapper+0x36>
   189ca:	6a3b      	ldr	r3, [r7, #32]
   189cc:	685b      	ldr	r3, [r3, #4]
   189ce:	2b00      	cmp	r3, #0
   189d0:	d101      	bne.n	189d6 <MyWrapper+0x3a>
   189d2:	2301      	movs	r3, #1
   189d4:	e000      	b.n	189d8 <MyWrapper+0x3c>
   189d6:	2300      	movs	r3, #0
   189d8:	2b00      	cmp	r3, #0
   189da:	d101      	bne.n	189e0 <MyWrapper+0x44>
   189dc:	b672      	cpsid	i
   189de:	e7fe      	b.n	189de <MyWrapper+0x42>
   189e0:	4b66      	ldr	r3, [pc, #408]	; (18b7c <MyWrapper+0x1e0>)
   189e2:	4798      	blx	r3
   189e4:	0003      	movs	r3, r0
   189e6:	61fb      	str	r3, [r7, #28]
   189e8:	6a3b      	ldr	r3, [r7, #32]
   189ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   189ec:	61bb      	str	r3, [r7, #24]
   189ee:	6a3b      	ldr	r3, [r7, #32]
   189f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   189f2:	69bb      	ldr	r3, [r7, #24]
   189f4:	429a      	cmp	r2, r3
   189f6:	d800      	bhi.n	189fa <MyWrapper+0x5e>
   189f8:	e085      	b.n	18b06 <MyWrapper+0x16a>
   189fa:	2317      	movs	r3, #23
   189fc:	18fb      	adds	r3, r7, r3
   189fe:	6a3a      	ldr	r2, [r7, #32]
   18a00:	2145      	movs	r1, #69	; 0x45
   18a02:	5c52      	ldrb	r2, [r2, r1]
   18a04:	701a      	strb	r2, [r3, #0]
   18a06:	6a3b      	ldr	r3, [r7, #32]
   18a08:	0018      	movs	r0, r3
   18a0a:	4b5d      	ldr	r3, [pc, #372]	; (18b80 <MyWrapper+0x1e4>)
   18a0c:	4798      	blx	r3
   18a0e:	0003      	movs	r3, r0
   18a10:	001a      	movs	r2, r3
   18a12:	4b5c      	ldr	r3, [pc, #368]	; (18b84 <MyWrapper+0x1e8>)
   18a14:	881b      	ldrh	r3, [r3, #0]
   18a16:	4013      	ands	r3, r2
   18a18:	b29b      	uxth	r3, r3
   18a1a:	2b00      	cmp	r3, #0
   18a1c:	d022      	beq.n	18a64 <MyWrapper+0xc8>
   18a1e:	687b      	ldr	r3, [r7, #4]
   18a20:	2b00      	cmp	r3, #0
   18a22:	d10b      	bne.n	18a3c <MyWrapper+0xa0>
   18a24:	6a3b      	ldr	r3, [r7, #32]
   18a26:	0018      	movs	r0, r3
   18a28:	4b57      	ldr	r3, [pc, #348]	; (18b88 <MyWrapper+0x1ec>)
   18a2a:	4798      	blx	r3
   18a2c:	0003      	movs	r3, r0
   18a2e:	001a      	movs	r2, r3
   18a30:	4b56      	ldr	r3, [pc, #344]	; (18b8c <MyWrapper+0x1f0>)
   18a32:	5c9b      	ldrb	r3, [r3, r2]
   18a34:	3330      	adds	r3, #48	; 0x30
   18a36:	b2db      	uxtb	r3, r3
   18a38:	001d      	movs	r5, r3
   18a3a:	e000      	b.n	18a3e <MyWrapper+0xa2>
   18a3c:	2535      	movs	r5, #53	; 0x35
   18a3e:	6a3b      	ldr	r3, [r7, #32]
   18a40:	0018      	movs	r0, r3
   18a42:	4b51      	ldr	r3, [pc, #324]	; (18b88 <MyWrapper+0x1ec>)
   18a44:	4798      	blx	r3
   18a46:	0003      	movs	r3, r0
   18a48:	001a      	movs	r2, r3
   18a4a:	4b50      	ldr	r3, [pc, #320]	; (18b8c <MyWrapper+0x1f0>)
   18a4c:	5c9c      	ldrb	r4, [r3, r2]
   18a4e:	6a3b      	ldr	r3, [r7, #32]
   18a50:	0018      	movs	r0, r3
   18a52:	4b4f      	ldr	r3, [pc, #316]	; (18b90 <MyWrapper+0x1f4>)
   18a54:	4798      	blx	r3
   18a56:	0003      	movs	r3, r0
   18a58:	b2db      	uxtb	r3, r3
   18a5a:	001a      	movs	r2, r3
   18a5c:	0021      	movs	r1, r4
   18a5e:	0028      	movs	r0, r5
   18a60:	4b4c      	ldr	r3, [pc, #304]	; (18b94 <MyWrapper+0x1f8>)
   18a62:	4798      	blx	r3
   18a64:	6a3b      	ldr	r3, [r7, #32]
   18a66:	0018      	movs	r0, r3
   18a68:	4b47      	ldr	r3, [pc, #284]	; (18b88 <MyWrapper+0x1ec>)
   18a6a:	4798      	blx	r3
   18a6c:	0003      	movs	r3, r0
   18a6e:	001a      	movs	r2, r3
   18a70:	4b46      	ldr	r3, [pc, #280]	; (18b8c <MyWrapper+0x1f0>)
   18a72:	5c9c      	ldrb	r4, [r3, r2]
   18a74:	6a3b      	ldr	r3, [r7, #32]
   18a76:	0018      	movs	r0, r3
   18a78:	4b45      	ldr	r3, [pc, #276]	; (18b90 <MyWrapper+0x1f4>)
   18a7a:	4798      	blx	r3
   18a7c:	0003      	movs	r3, r0
   18a7e:	b2d9      	uxtb	r1, r3
   18a80:	6a3b      	ldr	r3, [r7, #32]
   18a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18a84:	b2db      	uxtb	r3, r3
   18a86:	3301      	adds	r3, #1
   18a88:	b2db      	uxtb	r3, r3
   18a8a:	001a      	movs	r2, r3
   18a8c:	0020      	movs	r0, r4
   18a8e:	4b42      	ldr	r3, [pc, #264]	; (18b98 <MyWrapper+0x1fc>)
   18a90:	4798      	blx	r3
   18a92:	69bb      	ldr	r3, [r7, #24]
   18a94:	1c5a      	adds	r2, r3, #1
   18a96:	6a3b      	ldr	r3, [r7, #32]
   18a98:	639a      	str	r2, [r3, #56]	; 0x38
   18a9a:	2317      	movs	r3, #23
   18a9c:	18fb      	adds	r3, r7, r3
   18a9e:	781b      	ldrb	r3, [r3, #0]
   18aa0:	b25b      	sxtb	r3, r3
   18aa2:	3301      	adds	r3, #1
   18aa4:	d123      	bne.n	18aee <MyWrapper+0x152>
   18aa6:	6a3b      	ldr	r3, [r7, #32]
   18aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   18aaa:	2b00      	cmp	r3, #0
   18aac:	d00d      	beq.n	18aca <MyWrapper+0x12e>
   18aae:	6a3b      	ldr	r3, [r7, #32]
   18ab0:	2100      	movs	r1, #0
   18ab2:	0018      	movs	r0, r3
   18ab4:	4b39      	ldr	r3, [pc, #228]	; (18b9c <MyWrapper+0x200>)
   18ab6:	4798      	blx	r3
   18ab8:	1e03      	subs	r3, r0, #0
   18aba:	d021      	beq.n	18b00 <MyWrapper+0x164>
   18abc:	68bb      	ldr	r3, [r7, #8]
   18abe:	2b00      	cmp	r3, #0
   18ac0:	d01e      	beq.n	18b00 <MyWrapper+0x164>
   18ac2:	68bb      	ldr	r3, [r7, #8]
   18ac4:	2201      	movs	r2, #1
   18ac6:	601a      	str	r2, [r3, #0]
   18ac8:	e01a      	b.n	18b00 <MyWrapper+0x164>
   18aca:	6a3b      	ldr	r3, [r7, #32]
   18acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18ace:	2b00      	cmp	r3, #0
   18ad0:	d016      	beq.n	18b00 <MyWrapper+0x164>
   18ad2:	6a3b      	ldr	r3, [r7, #32]
   18ad4:	3324      	adds	r3, #36	; 0x24
   18ad6:	0018      	movs	r0, r3
   18ad8:	4b31      	ldr	r3, [pc, #196]	; (18ba0 <MyWrapper+0x204>)
   18ada:	4798      	blx	r3
   18adc:	1e03      	subs	r3, r0, #0
   18ade:	d00f      	beq.n	18b00 <MyWrapper+0x164>
   18ae0:	68bb      	ldr	r3, [r7, #8]
   18ae2:	2b00      	cmp	r3, #0
   18ae4:	d00c      	beq.n	18b00 <MyWrapper+0x164>
   18ae6:	68bb      	ldr	r3, [r7, #8]
   18ae8:	2201      	movs	r2, #1
   18aea:	601a      	str	r2, [r3, #0]
   18aec:	e008      	b.n	18b00 <MyWrapper+0x164>
   18aee:	2317      	movs	r3, #23
   18af0:	18fb      	adds	r3, r7, r3
   18af2:	781b      	ldrb	r3, [r3, #0]
   18af4:	3301      	adds	r3, #1
   18af6:	b2db      	uxtb	r3, r3
   18af8:	b259      	sxtb	r1, r3
   18afa:	6a3b      	ldr	r3, [r7, #32]
   18afc:	2245      	movs	r2, #69	; 0x45
   18afe:	5499      	strb	r1, [r3, r2]
   18b00:	2301      	movs	r3, #1
   18b02:	627b      	str	r3, [r7, #36]	; 0x24
   18b04:	e030      	b.n	18b68 <MyWrapper+0x1cc>
   18b06:	6a3b      	ldr	r3, [r7, #32]
   18b08:	0018      	movs	r0, r3
   18b0a:	4b1d      	ldr	r3, [pc, #116]	; (18b80 <MyWrapper+0x1e4>)
   18b0c:	4798      	blx	r3
   18b0e:	0003      	movs	r3, r0
   18b10:	001a      	movs	r2, r3
   18b12:	4b1c      	ldr	r3, [pc, #112]	; (18b84 <MyWrapper+0x1e8>)
   18b14:	881b      	ldrh	r3, [r3, #0]
   18b16:	4013      	ands	r3, r2
   18b18:	b29b      	uxth	r3, r3
   18b1a:	2b00      	cmp	r3, #0
   18b1c:	d022      	beq.n	18b64 <MyWrapper+0x1c8>
   18b1e:	687b      	ldr	r3, [r7, #4]
   18b20:	2b00      	cmp	r3, #0
   18b22:	d10b      	bne.n	18b3c <MyWrapper+0x1a0>
   18b24:	6a3b      	ldr	r3, [r7, #32]
   18b26:	0018      	movs	r0, r3
   18b28:	4b17      	ldr	r3, [pc, #92]	; (18b88 <MyWrapper+0x1ec>)
   18b2a:	4798      	blx	r3
   18b2c:	0003      	movs	r3, r0
   18b2e:	001a      	movs	r2, r3
   18b30:	4b16      	ldr	r3, [pc, #88]	; (18b8c <MyWrapper+0x1f0>)
   18b32:	5c9b      	ldrb	r3, [r3, r2]
   18b34:	3358      	adds	r3, #88	; 0x58
   18b36:	b2db      	uxtb	r3, r3
   18b38:	001d      	movs	r5, r3
   18b3a:	e000      	b.n	18b3e <MyWrapper+0x1a2>
   18b3c:	255d      	movs	r5, #93	; 0x5d
   18b3e:	6a3b      	ldr	r3, [r7, #32]
   18b40:	0018      	movs	r0, r3
   18b42:	4b11      	ldr	r3, [pc, #68]	; (18b88 <MyWrapper+0x1ec>)
   18b44:	4798      	blx	r3
   18b46:	0003      	movs	r3, r0
   18b48:	001a      	movs	r2, r3
   18b4a:	4b10      	ldr	r3, [pc, #64]	; (18b8c <MyWrapper+0x1f0>)
   18b4c:	5c9c      	ldrb	r4, [r3, r2]
   18b4e:	6a3b      	ldr	r3, [r7, #32]
   18b50:	0018      	movs	r0, r3
   18b52:	4b0f      	ldr	r3, [pc, #60]	; (18b90 <MyWrapper+0x1f4>)
   18b54:	4798      	blx	r3
   18b56:	0003      	movs	r3, r0
   18b58:	b2db      	uxtb	r3, r3
   18b5a:	001a      	movs	r2, r3
   18b5c:	0021      	movs	r1, r4
   18b5e:	0028      	movs	r0, r5
   18b60:	4b0c      	ldr	r3, [pc, #48]	; (18b94 <MyWrapper+0x1f8>)
   18b62:	4798      	blx	r3
   18b64:	2300      	movs	r3, #0
   18b66:	627b      	str	r3, [r7, #36]	; 0x24
   18b68:	69fb      	ldr	r3, [r7, #28]
   18b6a:	0018      	movs	r0, r3
   18b6c:	4b0d      	ldr	r3, [pc, #52]	; (18ba4 <MyWrapper+0x208>)
   18b6e:	4798      	blx	r3
   18b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18b72:	0018      	movs	r0, r3
   18b74:	46bd      	mov	sp, r7
   18b76:	b00a      	add	sp, #40	; 0x28
   18b78:	bdb0      	pop	{r4, r5, r7, pc}
   18b7a:	46c0      	nop			; (mov r8, r8)
   18b7c:	00017dad 	.word	0x00017dad
   18b80:	00015e19 	.word	0x00015e19
   18b84:	200000f0 	.word	0x200000f0
   18b88:	00015d19 	.word	0x00015d19
   18b8c:	200000e4 	.word	0x200000e4
   18b90:	00015df9 	.word	0x00015df9
   18b94:	00016751 	.word	0x00016751
   18b98:	00016dad 	.word	0x00016dad
   18b9c:	0001982d 	.word	0x0001982d
   18ba0:	0001a5ed 	.word	0x0001a5ed
   18ba4:	00017db9 	.word	0x00017db9

00018ba8 <xQueueReceive>:
   18ba8:	b5b0      	push	{r4, r5, r7, lr}
   18baa:	b08a      	sub	sp, #40	; 0x28
   18bac:	af00      	add	r7, sp, #0
   18bae:	60f8      	str	r0, [r7, #12]
   18bb0:	60b9      	str	r1, [r7, #8]
   18bb2:	607a      	str	r2, [r7, #4]
   18bb4:	2300      	movs	r3, #0
   18bb6:	627b      	str	r3, [r7, #36]	; 0x24
   18bb8:	68fb      	ldr	r3, [r7, #12]
   18bba:	623b      	str	r3, [r7, #32]
   18bbc:	6a3b      	ldr	r3, [r7, #32]
   18bbe:	2b00      	cmp	r3, #0
   18bc0:	d101      	bne.n	18bc6 <xQueueReceive+0x1e>
   18bc2:	b672      	cpsid	i
   18bc4:	e7fe      	b.n	18bc4 <xQueueReceive+0x1c>
   18bc6:	68bb      	ldr	r3, [r7, #8]
   18bc8:	2b00      	cmp	r3, #0
   18bca:	d103      	bne.n	18bd4 <xQueueReceive+0x2c>
   18bcc:	6a3b      	ldr	r3, [r7, #32]
   18bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18bd0:	2b00      	cmp	r3, #0
   18bd2:	d101      	bne.n	18bd8 <xQueueReceive+0x30>
   18bd4:	2301      	movs	r3, #1
   18bd6:	e000      	b.n	18bda <xQueueReceive+0x32>
   18bd8:	2300      	movs	r3, #0
   18bda:	2b00      	cmp	r3, #0
   18bdc:	d101      	bne.n	18be2 <xQueueReceive+0x3a>
   18bde:	b672      	cpsid	i
   18be0:	e7fe      	b.n	18be0 <xQueueReceive+0x38>
   18be2:	4bbf      	ldr	r3, [pc, #764]	; (18ee0 <xQueueReceive+0x338>)
   18be4:	4798      	blx	r3
   18be6:	1e03      	subs	r3, r0, #0
   18be8:	d102      	bne.n	18bf0 <xQueueReceive+0x48>
   18bea:	687b      	ldr	r3, [r7, #4]
   18bec:	2b00      	cmp	r3, #0
   18bee:	d101      	bne.n	18bf4 <xQueueReceive+0x4c>
   18bf0:	2301      	movs	r3, #1
   18bf2:	e000      	b.n	18bf6 <xQueueReceive+0x4e>
   18bf4:	2300      	movs	r3, #0
   18bf6:	2b00      	cmp	r3, #0
   18bf8:	d101      	bne.n	18bfe <xQueueReceive+0x56>
   18bfa:	b672      	cpsid	i
   18bfc:	e7fe      	b.n	18bfc <xQueueReceive+0x54>
   18bfe:	4bb9      	ldr	r3, [pc, #740]	; (18ee4 <xQueueReceive+0x33c>)
   18c00:	4798      	blx	r3
   18c02:	6a3b      	ldr	r3, [r7, #32]
   18c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18c06:	61fb      	str	r3, [r7, #28]
   18c08:	69fb      	ldr	r3, [r7, #28]
   18c0a:	2b00      	cmp	r3, #0
   18c0c:	d100      	bne.n	18c10 <xQueueReceive+0x68>
   18c0e:	e07d      	b.n	18d0c <xQueueReceive+0x164>
   18c10:	68ba      	ldr	r2, [r7, #8]
   18c12:	6a3b      	ldr	r3, [r7, #32]
   18c14:	0011      	movs	r1, r2
   18c16:	0018      	movs	r0, r3
   18c18:	4bb3      	ldr	r3, [pc, #716]	; (18ee8 <xQueueReceive+0x340>)
   18c1a:	4798      	blx	r3
   18c1c:	4bb3      	ldr	r3, [pc, #716]	; (18eec <xQueueReceive+0x344>)
   18c1e:	4798      	blx	r3
   18c20:	0003      	movs	r3, r0
   18c22:	0018      	movs	r0, r3
   18c24:	4bb2      	ldr	r3, [pc, #712]	; (18ef0 <xQueueReceive+0x348>)
   18c26:	4798      	blx	r3
   18c28:	0003      	movs	r3, r0
   18c2a:	001a      	movs	r2, r3
   18c2c:	4bb1      	ldr	r3, [pc, #708]	; (18ef4 <xQueueReceive+0x34c>)
   18c2e:	881b      	ldrh	r3, [r3, #0]
   18c30:	4013      	ands	r3, r2
   18c32:	b29b      	uxth	r3, r3
   18c34:	2b00      	cmp	r3, #0
   18c36:	d029      	beq.n	18c8c <xQueueReceive+0xe4>
   18c38:	6a3b      	ldr	r3, [r7, #32]
   18c3a:	0018      	movs	r0, r3
   18c3c:	4bae      	ldr	r3, [pc, #696]	; (18ef8 <xQueueReceive+0x350>)
   18c3e:	4798      	blx	r3
   18c40:	0003      	movs	r3, r0
   18c42:	001a      	movs	r2, r3
   18c44:	4bab      	ldr	r3, [pc, #684]	; (18ef4 <xQueueReceive+0x34c>)
   18c46:	881b      	ldrh	r3, [r3, #0]
   18c48:	4013      	ands	r3, r2
   18c4a:	b29b      	uxth	r3, r3
   18c4c:	2b00      	cmp	r3, #0
   18c4e:	d01d      	beq.n	18c8c <xQueueReceive+0xe4>
   18c50:	6a3b      	ldr	r3, [r7, #32]
   18c52:	0018      	movs	r0, r3
   18c54:	4ba9      	ldr	r3, [pc, #676]	; (18efc <xQueueReceive+0x354>)
   18c56:	4798      	blx	r3
   18c58:	0003      	movs	r3, r0
   18c5a:	001a      	movs	r2, r3
   18c5c:	4ba8      	ldr	r3, [pc, #672]	; (18f00 <xQueueReceive+0x358>)
   18c5e:	5c9b      	ldrb	r3, [r3, r2]
   18c60:	3328      	adds	r3, #40	; 0x28
   18c62:	b2db      	uxtb	r3, r3
   18c64:	001d      	movs	r5, r3
   18c66:	6a3b      	ldr	r3, [r7, #32]
   18c68:	0018      	movs	r0, r3
   18c6a:	4ba4      	ldr	r3, [pc, #656]	; (18efc <xQueueReceive+0x354>)
   18c6c:	4798      	blx	r3
   18c6e:	0003      	movs	r3, r0
   18c70:	001a      	movs	r2, r3
   18c72:	4ba3      	ldr	r3, [pc, #652]	; (18f00 <xQueueReceive+0x358>)
   18c74:	5c9c      	ldrb	r4, [r3, r2]
   18c76:	6a3b      	ldr	r3, [r7, #32]
   18c78:	0018      	movs	r0, r3
   18c7a:	4ba2      	ldr	r3, [pc, #648]	; (18f04 <xQueueReceive+0x35c>)
   18c7c:	4798      	blx	r3
   18c7e:	0003      	movs	r3, r0
   18c80:	b2db      	uxtb	r3, r3
   18c82:	001a      	movs	r2, r3
   18c84:	0021      	movs	r1, r4
   18c86:	0028      	movs	r0, r5
   18c88:	4b9f      	ldr	r3, [pc, #636]	; (18f08 <xQueueReceive+0x360>)
   18c8a:	4798      	blx	r3
   18c8c:	6a3b      	ldr	r3, [r7, #32]
   18c8e:	0018      	movs	r0, r3
   18c90:	4b9a      	ldr	r3, [pc, #616]	; (18efc <xQueueReceive+0x354>)
   18c92:	4798      	blx	r3
   18c94:	0003      	movs	r3, r0
   18c96:	001a      	movs	r2, r3
   18c98:	4b99      	ldr	r3, [pc, #612]	; (18f00 <xQueueReceive+0x358>)
   18c9a:	5c9c      	ldrb	r4, [r3, r2]
   18c9c:	6a3b      	ldr	r3, [r7, #32]
   18c9e:	0018      	movs	r0, r3
   18ca0:	4b98      	ldr	r3, [pc, #608]	; (18f04 <xQueueReceive+0x35c>)
   18ca2:	4798      	blx	r3
   18ca4:	0003      	movs	r3, r0
   18ca6:	b2dd      	uxtb	r5, r3
   18ca8:	6a3b      	ldr	r3, [r7, #32]
   18caa:	0018      	movs	r0, r3
   18cac:	4b93      	ldr	r3, [pc, #588]	; (18efc <xQueueReceive+0x354>)
   18cae:	4798      	blx	r3
   18cb0:	0003      	movs	r3, r0
   18cb2:	001a      	movs	r2, r3
   18cb4:	4b92      	ldr	r3, [pc, #584]	; (18f00 <xQueueReceive+0x358>)
   18cb6:	5c9b      	ldrb	r3, [r3, r2]
   18cb8:	2b02      	cmp	r3, #2
   18cba:	d108      	bne.n	18cce <xQueueReceive+0x126>
   18cbc:	4b8b      	ldr	r3, [pc, #556]	; (18eec <xQueueReceive+0x344>)
   18cbe:	4798      	blx	r3
   18cc0:	0003      	movs	r3, r0
   18cc2:	0018      	movs	r0, r3
   18cc4:	4b91      	ldr	r3, [pc, #580]	; (18f0c <xQueueReceive+0x364>)
   18cc6:	4798      	blx	r3
   18cc8:	0003      	movs	r3, r0
   18cca:	b2db      	uxtb	r3, r3
   18ccc:	e004      	b.n	18cd8 <xQueueReceive+0x130>
   18cce:	6a3b      	ldr	r3, [r7, #32]
   18cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18cd2:	b2db      	uxtb	r3, r3
   18cd4:	3b01      	subs	r3, #1
   18cd6:	b2db      	uxtb	r3, r3
   18cd8:	001a      	movs	r2, r3
   18cda:	0029      	movs	r1, r5
   18cdc:	0020      	movs	r0, r4
   18cde:	4b8c      	ldr	r3, [pc, #560]	; (18f10 <xQueueReceive+0x368>)
   18ce0:	4798      	blx	r3
   18ce2:	69fb      	ldr	r3, [r7, #28]
   18ce4:	1e5a      	subs	r2, r3, #1
   18ce6:	6a3b      	ldr	r3, [r7, #32]
   18ce8:	639a      	str	r2, [r3, #56]	; 0x38
   18cea:	6a3b      	ldr	r3, [r7, #32]
   18cec:	691b      	ldr	r3, [r3, #16]
   18cee:	2b00      	cmp	r3, #0
   18cf0:	d008      	beq.n	18d04 <xQueueReceive+0x15c>
   18cf2:	6a3b      	ldr	r3, [r7, #32]
   18cf4:	3310      	adds	r3, #16
   18cf6:	0018      	movs	r0, r3
   18cf8:	4b86      	ldr	r3, [pc, #536]	; (18f14 <xQueueReceive+0x36c>)
   18cfa:	4798      	blx	r3
   18cfc:	1e03      	subs	r3, r0, #0
   18cfe:	d001      	beq.n	18d04 <xQueueReceive+0x15c>
   18d00:	4b85      	ldr	r3, [pc, #532]	; (18f18 <xQueueReceive+0x370>)
   18d02:	4798      	blx	r3
   18d04:	4b85      	ldr	r3, [pc, #532]	; (18f1c <xQueueReceive+0x374>)
   18d06:	4798      	blx	r3
   18d08:	2301      	movs	r3, #1
   18d0a:	e15f      	b.n	18fcc <xQueueReceive+0x424>
   18d0c:	687b      	ldr	r3, [r7, #4]
   18d0e:	2b00      	cmp	r3, #0
   18d10:	d13b      	bne.n	18d8a <xQueueReceive+0x1e2>
   18d12:	4b82      	ldr	r3, [pc, #520]	; (18f1c <xQueueReceive+0x374>)
   18d14:	4798      	blx	r3
   18d16:	4b75      	ldr	r3, [pc, #468]	; (18eec <xQueueReceive+0x344>)
   18d18:	4798      	blx	r3
   18d1a:	0003      	movs	r3, r0
   18d1c:	0018      	movs	r0, r3
   18d1e:	4b74      	ldr	r3, [pc, #464]	; (18ef0 <xQueueReceive+0x348>)
   18d20:	4798      	blx	r3
   18d22:	0003      	movs	r3, r0
   18d24:	001a      	movs	r2, r3
   18d26:	4b73      	ldr	r3, [pc, #460]	; (18ef4 <xQueueReceive+0x34c>)
   18d28:	881b      	ldrh	r3, [r3, #0]
   18d2a:	4013      	ands	r3, r2
   18d2c:	b29b      	uxth	r3, r3
   18d2e:	2b00      	cmp	r3, #0
   18d30:	d029      	beq.n	18d86 <xQueueReceive+0x1de>
   18d32:	6a3b      	ldr	r3, [r7, #32]
   18d34:	0018      	movs	r0, r3
   18d36:	4b70      	ldr	r3, [pc, #448]	; (18ef8 <xQueueReceive+0x350>)
   18d38:	4798      	blx	r3
   18d3a:	0003      	movs	r3, r0
   18d3c:	001a      	movs	r2, r3
   18d3e:	4b6d      	ldr	r3, [pc, #436]	; (18ef4 <xQueueReceive+0x34c>)
   18d40:	881b      	ldrh	r3, [r3, #0]
   18d42:	4013      	ands	r3, r2
   18d44:	b29b      	uxth	r3, r3
   18d46:	2b00      	cmp	r3, #0
   18d48:	d01d      	beq.n	18d86 <xQueueReceive+0x1de>
   18d4a:	6a3b      	ldr	r3, [r7, #32]
   18d4c:	0018      	movs	r0, r3
   18d4e:	4b6b      	ldr	r3, [pc, #428]	; (18efc <xQueueReceive+0x354>)
   18d50:	4798      	blx	r3
   18d52:	0003      	movs	r3, r0
   18d54:	001a      	movs	r2, r3
   18d56:	4b6a      	ldr	r3, [pc, #424]	; (18f00 <xQueueReceive+0x358>)
   18d58:	5c9b      	ldrb	r3, [r3, r2]
   18d5a:	3350      	adds	r3, #80	; 0x50
   18d5c:	b2db      	uxtb	r3, r3
   18d5e:	001d      	movs	r5, r3
   18d60:	6a3b      	ldr	r3, [r7, #32]
   18d62:	0018      	movs	r0, r3
   18d64:	4b65      	ldr	r3, [pc, #404]	; (18efc <xQueueReceive+0x354>)
   18d66:	4798      	blx	r3
   18d68:	0003      	movs	r3, r0
   18d6a:	001a      	movs	r2, r3
   18d6c:	4b64      	ldr	r3, [pc, #400]	; (18f00 <xQueueReceive+0x358>)
   18d6e:	5c9c      	ldrb	r4, [r3, r2]
   18d70:	6a3b      	ldr	r3, [r7, #32]
   18d72:	0018      	movs	r0, r3
   18d74:	4b63      	ldr	r3, [pc, #396]	; (18f04 <xQueueReceive+0x35c>)
   18d76:	4798      	blx	r3
   18d78:	0003      	movs	r3, r0
   18d7a:	b2db      	uxtb	r3, r3
   18d7c:	001a      	movs	r2, r3
   18d7e:	0021      	movs	r1, r4
   18d80:	0028      	movs	r0, r5
   18d82:	4b61      	ldr	r3, [pc, #388]	; (18f08 <xQueueReceive+0x360>)
   18d84:	4798      	blx	r3
   18d86:	2300      	movs	r3, #0
   18d88:	e120      	b.n	18fcc <xQueueReceive+0x424>
   18d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18d8c:	2b00      	cmp	r3, #0
   18d8e:	d106      	bne.n	18d9e <xQueueReceive+0x1f6>
   18d90:	2314      	movs	r3, #20
   18d92:	18fb      	adds	r3, r7, r3
   18d94:	0018      	movs	r0, r3
   18d96:	4b62      	ldr	r3, [pc, #392]	; (18f20 <xQueueReceive+0x378>)
   18d98:	4798      	blx	r3
   18d9a:	2301      	movs	r3, #1
   18d9c:	627b      	str	r3, [r7, #36]	; 0x24
   18d9e:	4b5f      	ldr	r3, [pc, #380]	; (18f1c <xQueueReceive+0x374>)
   18da0:	4798      	blx	r3
   18da2:	4b60      	ldr	r3, [pc, #384]	; (18f24 <xQueueReceive+0x37c>)
   18da4:	4798      	blx	r3
   18da6:	4b4f      	ldr	r3, [pc, #316]	; (18ee4 <xQueueReceive+0x33c>)
   18da8:	4798      	blx	r3
   18daa:	6a3b      	ldr	r3, [r7, #32]
   18dac:	2244      	movs	r2, #68	; 0x44
   18dae:	5c9b      	ldrb	r3, [r3, r2]
   18db0:	b25b      	sxtb	r3, r3
   18db2:	3301      	adds	r3, #1
   18db4:	d103      	bne.n	18dbe <xQueueReceive+0x216>
   18db6:	6a3b      	ldr	r3, [r7, #32]
   18db8:	2244      	movs	r2, #68	; 0x44
   18dba:	2100      	movs	r1, #0
   18dbc:	5499      	strb	r1, [r3, r2]
   18dbe:	6a3b      	ldr	r3, [r7, #32]
   18dc0:	2245      	movs	r2, #69	; 0x45
   18dc2:	5c9b      	ldrb	r3, [r3, r2]
   18dc4:	b25b      	sxtb	r3, r3
   18dc6:	3301      	adds	r3, #1
   18dc8:	d103      	bne.n	18dd2 <xQueueReceive+0x22a>
   18dca:	6a3b      	ldr	r3, [r7, #32]
   18dcc:	2245      	movs	r2, #69	; 0x45
   18dce:	2100      	movs	r1, #0
   18dd0:	5499      	strb	r1, [r3, r2]
   18dd2:	4b52      	ldr	r3, [pc, #328]	; (18f1c <xQueueReceive+0x374>)
   18dd4:	4798      	blx	r3
   18dd6:	1d3a      	adds	r2, r7, #4
   18dd8:	2314      	movs	r3, #20
   18dda:	18fb      	adds	r3, r7, r3
   18ddc:	0011      	movs	r1, r2
   18dde:	0018      	movs	r0, r3
   18de0:	4b51      	ldr	r3, [pc, #324]	; (18f28 <xQueueReceive+0x380>)
   18de2:	4798      	blx	r3
   18de4:	1e03      	subs	r3, r0, #0
   18de6:	d000      	beq.n	18dea <xQueueReceive+0x242>
   18de8:	e0aa      	b.n	18f40 <xQueueReceive+0x398>
   18dea:	6a3b      	ldr	r3, [r7, #32]
   18dec:	0018      	movs	r0, r3
   18dee:	4b4f      	ldr	r3, [pc, #316]	; (18f2c <xQueueReceive+0x384>)
   18df0:	4798      	blx	r3
   18df2:	1e03      	subs	r3, r0, #0
   18df4:	d06d      	beq.n	18ed2 <xQueueReceive+0x32a>
   18df6:	4b3d      	ldr	r3, [pc, #244]	; (18eec <xQueueReceive+0x344>)
   18df8:	4798      	blx	r3
   18dfa:	0003      	movs	r3, r0
   18dfc:	0018      	movs	r0, r3
   18dfe:	4b3c      	ldr	r3, [pc, #240]	; (18ef0 <xQueueReceive+0x348>)
   18e00:	4798      	blx	r3
   18e02:	0003      	movs	r3, r0
   18e04:	001a      	movs	r2, r3
   18e06:	4b3b      	ldr	r3, [pc, #236]	; (18ef4 <xQueueReceive+0x34c>)
   18e08:	881b      	ldrh	r3, [r3, #0]
   18e0a:	4013      	ands	r3, r2
   18e0c:	b29b      	uxth	r3, r3
   18e0e:	2b00      	cmp	r3, #0
   18e10:	d029      	beq.n	18e66 <xQueueReceive+0x2be>
   18e12:	6a3b      	ldr	r3, [r7, #32]
   18e14:	0018      	movs	r0, r3
   18e16:	4b38      	ldr	r3, [pc, #224]	; (18ef8 <xQueueReceive+0x350>)
   18e18:	4798      	blx	r3
   18e1a:	0003      	movs	r3, r0
   18e1c:	001a      	movs	r2, r3
   18e1e:	4b35      	ldr	r3, [pc, #212]	; (18ef4 <xQueueReceive+0x34c>)
   18e20:	881b      	ldrh	r3, [r3, #0]
   18e22:	4013      	ands	r3, r2
   18e24:	b29b      	uxth	r3, r3
   18e26:	2b00      	cmp	r3, #0
   18e28:	d01d      	beq.n	18e66 <xQueueReceive+0x2be>
   18e2a:	6a3b      	ldr	r3, [r7, #32]
   18e2c:	0018      	movs	r0, r3
   18e2e:	4b33      	ldr	r3, [pc, #204]	; (18efc <xQueueReceive+0x354>)
   18e30:	4798      	blx	r3
   18e32:	0003      	movs	r3, r0
   18e34:	001a      	movs	r2, r3
   18e36:	4b32      	ldr	r3, [pc, #200]	; (18f00 <xQueueReceive+0x358>)
   18e38:	5c9b      	ldrb	r3, [r3, r2]
   18e3a:	3368      	adds	r3, #104	; 0x68
   18e3c:	b2db      	uxtb	r3, r3
   18e3e:	001d      	movs	r5, r3
   18e40:	6a3b      	ldr	r3, [r7, #32]
   18e42:	0018      	movs	r0, r3
   18e44:	4b2d      	ldr	r3, [pc, #180]	; (18efc <xQueueReceive+0x354>)
   18e46:	4798      	blx	r3
   18e48:	0003      	movs	r3, r0
   18e4a:	001a      	movs	r2, r3
   18e4c:	4b2c      	ldr	r3, [pc, #176]	; (18f00 <xQueueReceive+0x358>)
   18e4e:	5c9c      	ldrb	r4, [r3, r2]
   18e50:	6a3b      	ldr	r3, [r7, #32]
   18e52:	0018      	movs	r0, r3
   18e54:	4b2b      	ldr	r3, [pc, #172]	; (18f04 <xQueueReceive+0x35c>)
   18e56:	4798      	blx	r3
   18e58:	0003      	movs	r3, r0
   18e5a:	b2db      	uxtb	r3, r3
   18e5c:	001a      	movs	r2, r3
   18e5e:	0021      	movs	r1, r4
   18e60:	0028      	movs	r0, r5
   18e62:	4b29      	ldr	r3, [pc, #164]	; (18f08 <xQueueReceive+0x360>)
   18e64:	4798      	blx	r3
   18e66:	6a3b      	ldr	r3, [r7, #32]
   18e68:	0018      	movs	r0, r3
   18e6a:	4b24      	ldr	r3, [pc, #144]	; (18efc <xQueueReceive+0x354>)
   18e6c:	4798      	blx	r3
   18e6e:	0003      	movs	r3, r0
   18e70:	001a      	movs	r2, r3
   18e72:	4b23      	ldr	r3, [pc, #140]	; (18f00 <xQueueReceive+0x358>)
   18e74:	5c9b      	ldrb	r3, [r3, r2]
   18e76:	2b02      	cmp	r3, #2
   18e78:	d018      	beq.n	18eac <xQueueReceive+0x304>
   18e7a:	4b1c      	ldr	r3, [pc, #112]	; (18eec <xQueueReceive+0x344>)
   18e7c:	4798      	blx	r3
   18e7e:	0003      	movs	r3, r0
   18e80:	0018      	movs	r0, r3
   18e82:	4b1b      	ldr	r3, [pc, #108]	; (18ef0 <xQueueReceive+0x348>)
   18e84:	4798      	blx	r3
   18e86:	0003      	movs	r3, r0
   18e88:	001a      	movs	r2, r3
   18e8a:	4b1a      	ldr	r3, [pc, #104]	; (18ef4 <xQueueReceive+0x34c>)
   18e8c:	881b      	ldrh	r3, [r3, #0]
   18e8e:	4013      	ands	r3, r2
   18e90:	b29b      	uxth	r3, r3
   18e92:	2b00      	cmp	r3, #0
   18e94:	d00a      	beq.n	18eac <xQueueReceive+0x304>
   18e96:	4b15      	ldr	r3, [pc, #84]	; (18eec <xQueueReceive+0x344>)
   18e98:	4798      	blx	r3
   18e9a:	0003      	movs	r3, r0
   18e9c:	0018      	movs	r0, r3
   18e9e:	4b1b      	ldr	r3, [pc, #108]	; (18f0c <xQueueReceive+0x364>)
   18ea0:	4798      	blx	r3
   18ea2:	0003      	movs	r3, r0
   18ea4:	b2db      	uxtb	r3, r3
   18ea6:	0018      	movs	r0, r3
   18ea8:	4b21      	ldr	r3, [pc, #132]	; (18f30 <xQueueReceive+0x388>)
   18eaa:	4798      	blx	r3
   18eac:	6a3b      	ldr	r3, [r7, #32]
   18eae:	3324      	adds	r3, #36	; 0x24
   18eb0:	687a      	ldr	r2, [r7, #4]
   18eb2:	0011      	movs	r1, r2
   18eb4:	0018      	movs	r0, r3
   18eb6:	4b1f      	ldr	r3, [pc, #124]	; (18f34 <xQueueReceive+0x38c>)
   18eb8:	4798      	blx	r3
   18eba:	6a3b      	ldr	r3, [r7, #32]
   18ebc:	0018      	movs	r0, r3
   18ebe:	4b1e      	ldr	r3, [pc, #120]	; (18f38 <xQueueReceive+0x390>)
   18ec0:	4798      	blx	r3
   18ec2:	4b1e      	ldr	r3, [pc, #120]	; (18f3c <xQueueReceive+0x394>)
   18ec4:	4798      	blx	r3
   18ec6:	1e03      	subs	r3, r0, #0
   18ec8:	d000      	beq.n	18ecc <xQueueReceive+0x324>
   18eca:	e698      	b.n	18bfe <xQueueReceive+0x56>
   18ecc:	4b12      	ldr	r3, [pc, #72]	; (18f18 <xQueueReceive+0x370>)
   18ece:	4798      	blx	r3
   18ed0:	e695      	b.n	18bfe <xQueueReceive+0x56>
   18ed2:	6a3b      	ldr	r3, [r7, #32]
   18ed4:	0018      	movs	r0, r3
   18ed6:	4b18      	ldr	r3, [pc, #96]	; (18f38 <xQueueReceive+0x390>)
   18ed8:	4798      	blx	r3
   18eda:	4b18      	ldr	r3, [pc, #96]	; (18f3c <xQueueReceive+0x394>)
   18edc:	4798      	blx	r3
   18ede:	e68e      	b.n	18bfe <xQueueReceive+0x56>
   18ee0:	0001aa7d 	.word	0x0001aa7d
   18ee4:	00017d59 	.word	0x00017d59
   18ee8:	00019609 	.word	0x00019609
   18eec:	00015ff5 	.word	0x00015ff5
   18ef0:	00015d59 	.word	0x00015d59
   18ef4:	200000f0 	.word	0x200000f0
   18ef8:	00015e19 	.word	0x00015e19
   18efc:	00015d19 	.word	0x00015d19
   18f00:	200000e4 	.word	0x200000e4
   18f04:	00015df9 	.word	0x00015df9
   18f08:	00016751 	.word	0x00016751
   18f0c:	00015d39 	.word	0x00015d39
   18f10:	00016dad 	.word	0x00016dad
   18f14:	0001a5ed 	.word	0x0001a5ed
   18f18:	00017d41 	.word	0x00017d41
   18f1c:	00017d7d 	.word	0x00017d7d
   18f20:	0001a72d 	.word	0x0001a72d
   18f24:	0001a015 	.word	0x0001a015
   18f28:	0001a755 	.word	0x0001a755
   18f2c:	00019749 	.word	0x00019749
   18f30:	00016ee9 	.word	0x00016ee9
   18f34:	0001a4c9 	.word	0x0001a4c9
   18f38:	00019659 	.word	0x00019659
   18f3c:	0001a02d 	.word	0x0001a02d
   18f40:	6a3b      	ldr	r3, [r7, #32]
   18f42:	0018      	movs	r0, r3
   18f44:	4b23      	ldr	r3, [pc, #140]	; (18fd4 <xQueueReceive+0x42c>)
   18f46:	4798      	blx	r3
   18f48:	4b23      	ldr	r3, [pc, #140]	; (18fd8 <xQueueReceive+0x430>)
   18f4a:	4798      	blx	r3
   18f4c:	6a3b      	ldr	r3, [r7, #32]
   18f4e:	0018      	movs	r0, r3
   18f50:	4b22      	ldr	r3, [pc, #136]	; (18fdc <xQueueReceive+0x434>)
   18f52:	4798      	blx	r3
   18f54:	1e03      	subs	r3, r0, #0
   18f56:	d100      	bne.n	18f5a <xQueueReceive+0x3b2>
   18f58:	e651      	b.n	18bfe <xQueueReceive+0x56>
   18f5a:	4b21      	ldr	r3, [pc, #132]	; (18fe0 <xQueueReceive+0x438>)
   18f5c:	4798      	blx	r3
   18f5e:	0003      	movs	r3, r0
   18f60:	0018      	movs	r0, r3
   18f62:	4b20      	ldr	r3, [pc, #128]	; (18fe4 <xQueueReceive+0x43c>)
   18f64:	4798      	blx	r3
   18f66:	0003      	movs	r3, r0
   18f68:	001a      	movs	r2, r3
   18f6a:	4b1f      	ldr	r3, [pc, #124]	; (18fe8 <xQueueReceive+0x440>)
   18f6c:	881b      	ldrh	r3, [r3, #0]
   18f6e:	4013      	ands	r3, r2
   18f70:	b29b      	uxth	r3, r3
   18f72:	2b00      	cmp	r3, #0
   18f74:	d029      	beq.n	18fca <xQueueReceive+0x422>
   18f76:	6a3b      	ldr	r3, [r7, #32]
   18f78:	0018      	movs	r0, r3
   18f7a:	4b1c      	ldr	r3, [pc, #112]	; (18fec <xQueueReceive+0x444>)
   18f7c:	4798      	blx	r3
   18f7e:	0003      	movs	r3, r0
   18f80:	001a      	movs	r2, r3
   18f82:	4b19      	ldr	r3, [pc, #100]	; (18fe8 <xQueueReceive+0x440>)
   18f84:	881b      	ldrh	r3, [r3, #0]
   18f86:	4013      	ands	r3, r2
   18f88:	b29b      	uxth	r3, r3
   18f8a:	2b00      	cmp	r3, #0
   18f8c:	d01d      	beq.n	18fca <xQueueReceive+0x422>
   18f8e:	6a3b      	ldr	r3, [r7, #32]
   18f90:	0018      	movs	r0, r3
   18f92:	4b17      	ldr	r3, [pc, #92]	; (18ff0 <xQueueReceive+0x448>)
   18f94:	4798      	blx	r3
   18f96:	0003      	movs	r3, r0
   18f98:	001a      	movs	r2, r3
   18f9a:	4b16      	ldr	r3, [pc, #88]	; (18ff4 <xQueueReceive+0x44c>)
   18f9c:	5c9b      	ldrb	r3, [r3, r2]
   18f9e:	3350      	adds	r3, #80	; 0x50
   18fa0:	b2db      	uxtb	r3, r3
   18fa2:	001d      	movs	r5, r3
   18fa4:	6a3b      	ldr	r3, [r7, #32]
   18fa6:	0018      	movs	r0, r3
   18fa8:	4b11      	ldr	r3, [pc, #68]	; (18ff0 <xQueueReceive+0x448>)
   18faa:	4798      	blx	r3
   18fac:	0003      	movs	r3, r0
   18fae:	001a      	movs	r2, r3
   18fb0:	4b10      	ldr	r3, [pc, #64]	; (18ff4 <xQueueReceive+0x44c>)
   18fb2:	5c9c      	ldrb	r4, [r3, r2]
   18fb4:	6a3b      	ldr	r3, [r7, #32]
   18fb6:	0018      	movs	r0, r3
   18fb8:	4b0f      	ldr	r3, [pc, #60]	; (18ff8 <xQueueReceive+0x450>)
   18fba:	4798      	blx	r3
   18fbc:	0003      	movs	r3, r0
   18fbe:	b2db      	uxtb	r3, r3
   18fc0:	001a      	movs	r2, r3
   18fc2:	0021      	movs	r1, r4
   18fc4:	0028      	movs	r0, r5
   18fc6:	4b0d      	ldr	r3, [pc, #52]	; (18ffc <xQueueReceive+0x454>)
   18fc8:	4798      	blx	r3
   18fca:	2300      	movs	r3, #0
   18fcc:	0018      	movs	r0, r3
   18fce:	46bd      	mov	sp, r7
   18fd0:	b00a      	add	sp, #40	; 0x28
   18fd2:	bdb0      	pop	{r4, r5, r7, pc}
   18fd4:	00019659 	.word	0x00019659
   18fd8:	0001a02d 	.word	0x0001a02d
   18fdc:	00019749 	.word	0x00019749
   18fe0:	00015ff5 	.word	0x00015ff5
   18fe4:	00015d59 	.word	0x00015d59
   18fe8:	200000f0 	.word	0x200000f0
   18fec:	00015e19 	.word	0x00015e19
   18ff0:	00015d19 	.word	0x00015d19
   18ff4:	200000e4 	.word	0x200000e4
   18ff8:	00015df9 	.word	0x00015df9
   18ffc:	00016751 	.word	0x00016751

00019000 <xQueueSemaphoreTake>:
   19000:	b5b0      	push	{r4, r5, r7, lr}
   19002:	b08a      	sub	sp, #40	; 0x28
   19004:	af00      	add	r7, sp, #0
   19006:	6078      	str	r0, [r7, #4]
   19008:	6039      	str	r1, [r7, #0]
   1900a:	2300      	movs	r3, #0
   1900c:	627b      	str	r3, [r7, #36]	; 0x24
   1900e:	687b      	ldr	r3, [r7, #4]
   19010:	61fb      	str	r3, [r7, #28]
   19012:	2300      	movs	r3, #0
   19014:	623b      	str	r3, [r7, #32]
   19016:	69fb      	ldr	r3, [r7, #28]
   19018:	2b00      	cmp	r3, #0
   1901a:	d101      	bne.n	19020 <xQueueSemaphoreTake+0x20>
   1901c:	b672      	cpsid	i
   1901e:	e7fe      	b.n	1901e <xQueueSemaphoreTake+0x1e>
   19020:	69fb      	ldr	r3, [r7, #28]
   19022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19024:	2b00      	cmp	r3, #0
   19026:	d001      	beq.n	1902c <xQueueSemaphoreTake+0x2c>
   19028:	b672      	cpsid	i
   1902a:	e7fe      	b.n	1902a <xQueueSemaphoreTake+0x2a>
   1902c:	4bcb      	ldr	r3, [pc, #812]	; (1935c <xQueueSemaphoreTake+0x35c>)
   1902e:	4798      	blx	r3
   19030:	1e03      	subs	r3, r0, #0
   19032:	d102      	bne.n	1903a <xQueueSemaphoreTake+0x3a>
   19034:	683b      	ldr	r3, [r7, #0]
   19036:	2b00      	cmp	r3, #0
   19038:	d101      	bne.n	1903e <xQueueSemaphoreTake+0x3e>
   1903a:	2301      	movs	r3, #1
   1903c:	e000      	b.n	19040 <xQueueSemaphoreTake+0x40>
   1903e:	2300      	movs	r3, #0
   19040:	2b00      	cmp	r3, #0
   19042:	d101      	bne.n	19048 <xQueueSemaphoreTake+0x48>
   19044:	b672      	cpsid	i
   19046:	e7fe      	b.n	19046 <xQueueSemaphoreTake+0x46>
   19048:	4bc5      	ldr	r3, [pc, #788]	; (19360 <xQueueSemaphoreTake+0x360>)
   1904a:	4798      	blx	r3
   1904c:	69fb      	ldr	r3, [r7, #28]
   1904e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19050:	61bb      	str	r3, [r7, #24]
   19052:	69bb      	ldr	r3, [r7, #24]
   19054:	2b00      	cmp	r3, #0
   19056:	d100      	bne.n	1905a <xQueueSemaphoreTake+0x5a>
   19058:	e080      	b.n	1915c <xQueueSemaphoreTake+0x15c>
   1905a:	4bc2      	ldr	r3, [pc, #776]	; (19364 <xQueueSemaphoreTake+0x364>)
   1905c:	4798      	blx	r3
   1905e:	0003      	movs	r3, r0
   19060:	0018      	movs	r0, r3
   19062:	4bc1      	ldr	r3, [pc, #772]	; (19368 <xQueueSemaphoreTake+0x368>)
   19064:	4798      	blx	r3
   19066:	0003      	movs	r3, r0
   19068:	001a      	movs	r2, r3
   1906a:	4bc0      	ldr	r3, [pc, #768]	; (1936c <xQueueSemaphoreTake+0x36c>)
   1906c:	881b      	ldrh	r3, [r3, #0]
   1906e:	4013      	ands	r3, r2
   19070:	b29b      	uxth	r3, r3
   19072:	2b00      	cmp	r3, #0
   19074:	d029      	beq.n	190ca <xQueueSemaphoreTake+0xca>
   19076:	69fb      	ldr	r3, [r7, #28]
   19078:	0018      	movs	r0, r3
   1907a:	4bbd      	ldr	r3, [pc, #756]	; (19370 <xQueueSemaphoreTake+0x370>)
   1907c:	4798      	blx	r3
   1907e:	0003      	movs	r3, r0
   19080:	001a      	movs	r2, r3
   19082:	4bba      	ldr	r3, [pc, #744]	; (1936c <xQueueSemaphoreTake+0x36c>)
   19084:	881b      	ldrh	r3, [r3, #0]
   19086:	4013      	ands	r3, r2
   19088:	b29b      	uxth	r3, r3
   1908a:	2b00      	cmp	r3, #0
   1908c:	d01d      	beq.n	190ca <xQueueSemaphoreTake+0xca>
   1908e:	69fb      	ldr	r3, [r7, #28]
   19090:	0018      	movs	r0, r3
   19092:	4bb8      	ldr	r3, [pc, #736]	; (19374 <xQueueSemaphoreTake+0x374>)
   19094:	4798      	blx	r3
   19096:	0003      	movs	r3, r0
   19098:	001a      	movs	r2, r3
   1909a:	4bb7      	ldr	r3, [pc, #732]	; (19378 <xQueueSemaphoreTake+0x378>)
   1909c:	5c9b      	ldrb	r3, [r3, r2]
   1909e:	3328      	adds	r3, #40	; 0x28
   190a0:	b2db      	uxtb	r3, r3
   190a2:	001d      	movs	r5, r3
   190a4:	69fb      	ldr	r3, [r7, #28]
   190a6:	0018      	movs	r0, r3
   190a8:	4bb2      	ldr	r3, [pc, #712]	; (19374 <xQueueSemaphoreTake+0x374>)
   190aa:	4798      	blx	r3
   190ac:	0003      	movs	r3, r0
   190ae:	001a      	movs	r2, r3
   190b0:	4bb1      	ldr	r3, [pc, #708]	; (19378 <xQueueSemaphoreTake+0x378>)
   190b2:	5c9c      	ldrb	r4, [r3, r2]
   190b4:	69fb      	ldr	r3, [r7, #28]
   190b6:	0018      	movs	r0, r3
   190b8:	4bb0      	ldr	r3, [pc, #704]	; (1937c <xQueueSemaphoreTake+0x37c>)
   190ba:	4798      	blx	r3
   190bc:	0003      	movs	r3, r0
   190be:	b2db      	uxtb	r3, r3
   190c0:	001a      	movs	r2, r3
   190c2:	0021      	movs	r1, r4
   190c4:	0028      	movs	r0, r5
   190c6:	4bae      	ldr	r3, [pc, #696]	; (19380 <xQueueSemaphoreTake+0x380>)
   190c8:	4798      	blx	r3
   190ca:	69fb      	ldr	r3, [r7, #28]
   190cc:	0018      	movs	r0, r3
   190ce:	4ba9      	ldr	r3, [pc, #676]	; (19374 <xQueueSemaphoreTake+0x374>)
   190d0:	4798      	blx	r3
   190d2:	0003      	movs	r3, r0
   190d4:	001a      	movs	r2, r3
   190d6:	4ba8      	ldr	r3, [pc, #672]	; (19378 <xQueueSemaphoreTake+0x378>)
   190d8:	5c9c      	ldrb	r4, [r3, r2]
   190da:	69fb      	ldr	r3, [r7, #28]
   190dc:	0018      	movs	r0, r3
   190de:	4ba7      	ldr	r3, [pc, #668]	; (1937c <xQueueSemaphoreTake+0x37c>)
   190e0:	4798      	blx	r3
   190e2:	0003      	movs	r3, r0
   190e4:	b2dd      	uxtb	r5, r3
   190e6:	69fb      	ldr	r3, [r7, #28]
   190e8:	0018      	movs	r0, r3
   190ea:	4ba2      	ldr	r3, [pc, #648]	; (19374 <xQueueSemaphoreTake+0x374>)
   190ec:	4798      	blx	r3
   190ee:	0003      	movs	r3, r0
   190f0:	001a      	movs	r2, r3
   190f2:	4ba1      	ldr	r3, [pc, #644]	; (19378 <xQueueSemaphoreTake+0x378>)
   190f4:	5c9b      	ldrb	r3, [r3, r2]
   190f6:	2b02      	cmp	r3, #2
   190f8:	d108      	bne.n	1910c <xQueueSemaphoreTake+0x10c>
   190fa:	4b9a      	ldr	r3, [pc, #616]	; (19364 <xQueueSemaphoreTake+0x364>)
   190fc:	4798      	blx	r3
   190fe:	0003      	movs	r3, r0
   19100:	0018      	movs	r0, r3
   19102:	4ba0      	ldr	r3, [pc, #640]	; (19384 <xQueueSemaphoreTake+0x384>)
   19104:	4798      	blx	r3
   19106:	0003      	movs	r3, r0
   19108:	b2db      	uxtb	r3, r3
   1910a:	e004      	b.n	19116 <xQueueSemaphoreTake+0x116>
   1910c:	69fb      	ldr	r3, [r7, #28]
   1910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19110:	b2db      	uxtb	r3, r3
   19112:	3b01      	subs	r3, #1
   19114:	b2db      	uxtb	r3, r3
   19116:	001a      	movs	r2, r3
   19118:	0029      	movs	r1, r5
   1911a:	0020      	movs	r0, r4
   1911c:	4b9a      	ldr	r3, [pc, #616]	; (19388 <xQueueSemaphoreTake+0x388>)
   1911e:	4798      	blx	r3
   19120:	69bb      	ldr	r3, [r7, #24]
   19122:	1e5a      	subs	r2, r3, #1
   19124:	69fb      	ldr	r3, [r7, #28]
   19126:	639a      	str	r2, [r3, #56]	; 0x38
   19128:	69fb      	ldr	r3, [r7, #28]
   1912a:	681b      	ldr	r3, [r3, #0]
   1912c:	2b00      	cmp	r3, #0
   1912e:	d104      	bne.n	1913a <xQueueSemaphoreTake+0x13a>
   19130:	4b96      	ldr	r3, [pc, #600]	; (1938c <xQueueSemaphoreTake+0x38c>)
   19132:	4798      	blx	r3
   19134:	0002      	movs	r2, r0
   19136:	69fb      	ldr	r3, [r7, #28]
   19138:	605a      	str	r2, [r3, #4]
   1913a:	69fb      	ldr	r3, [r7, #28]
   1913c:	691b      	ldr	r3, [r3, #16]
   1913e:	2b00      	cmp	r3, #0
   19140:	d008      	beq.n	19154 <xQueueSemaphoreTake+0x154>
   19142:	69fb      	ldr	r3, [r7, #28]
   19144:	3310      	adds	r3, #16
   19146:	0018      	movs	r0, r3
   19148:	4b91      	ldr	r3, [pc, #580]	; (19390 <xQueueSemaphoreTake+0x390>)
   1914a:	4798      	blx	r3
   1914c:	1e03      	subs	r3, r0, #0
   1914e:	d001      	beq.n	19154 <xQueueSemaphoreTake+0x154>
   19150:	4b90      	ldr	r3, [pc, #576]	; (19394 <xQueueSemaphoreTake+0x394>)
   19152:	4798      	blx	r3
   19154:	4b90      	ldr	r3, [pc, #576]	; (19398 <xQueueSemaphoreTake+0x398>)
   19156:	4798      	blx	r3
   19158:	2301      	movs	r3, #1
   1915a:	e18b      	b.n	19474 <xQueueSemaphoreTake+0x474>
   1915c:	683b      	ldr	r3, [r7, #0]
   1915e:	2b00      	cmp	r3, #0
   19160:	d140      	bne.n	191e4 <xQueueSemaphoreTake+0x1e4>
   19162:	6a3b      	ldr	r3, [r7, #32]
   19164:	2b00      	cmp	r3, #0
   19166:	d001      	beq.n	1916c <xQueueSemaphoreTake+0x16c>
   19168:	b672      	cpsid	i
   1916a:	e7fe      	b.n	1916a <xQueueSemaphoreTake+0x16a>
   1916c:	4b8a      	ldr	r3, [pc, #552]	; (19398 <xQueueSemaphoreTake+0x398>)
   1916e:	4798      	blx	r3
   19170:	4b7c      	ldr	r3, [pc, #496]	; (19364 <xQueueSemaphoreTake+0x364>)
   19172:	4798      	blx	r3
   19174:	0003      	movs	r3, r0
   19176:	0018      	movs	r0, r3
   19178:	4b7b      	ldr	r3, [pc, #492]	; (19368 <xQueueSemaphoreTake+0x368>)
   1917a:	4798      	blx	r3
   1917c:	0003      	movs	r3, r0
   1917e:	001a      	movs	r2, r3
   19180:	4b7a      	ldr	r3, [pc, #488]	; (1936c <xQueueSemaphoreTake+0x36c>)
   19182:	881b      	ldrh	r3, [r3, #0]
   19184:	4013      	ands	r3, r2
   19186:	b29b      	uxth	r3, r3
   19188:	2b00      	cmp	r3, #0
   1918a:	d029      	beq.n	191e0 <xQueueSemaphoreTake+0x1e0>
   1918c:	69fb      	ldr	r3, [r7, #28]
   1918e:	0018      	movs	r0, r3
   19190:	4b77      	ldr	r3, [pc, #476]	; (19370 <xQueueSemaphoreTake+0x370>)
   19192:	4798      	blx	r3
   19194:	0003      	movs	r3, r0
   19196:	001a      	movs	r2, r3
   19198:	4b74      	ldr	r3, [pc, #464]	; (1936c <xQueueSemaphoreTake+0x36c>)
   1919a:	881b      	ldrh	r3, [r3, #0]
   1919c:	4013      	ands	r3, r2
   1919e:	b29b      	uxth	r3, r3
   191a0:	2b00      	cmp	r3, #0
   191a2:	d01d      	beq.n	191e0 <xQueueSemaphoreTake+0x1e0>
   191a4:	69fb      	ldr	r3, [r7, #28]
   191a6:	0018      	movs	r0, r3
   191a8:	4b72      	ldr	r3, [pc, #456]	; (19374 <xQueueSemaphoreTake+0x374>)
   191aa:	4798      	blx	r3
   191ac:	0003      	movs	r3, r0
   191ae:	001a      	movs	r2, r3
   191b0:	4b71      	ldr	r3, [pc, #452]	; (19378 <xQueueSemaphoreTake+0x378>)
   191b2:	5c9b      	ldrb	r3, [r3, r2]
   191b4:	3350      	adds	r3, #80	; 0x50
   191b6:	b2db      	uxtb	r3, r3
   191b8:	001d      	movs	r5, r3
   191ba:	69fb      	ldr	r3, [r7, #28]
   191bc:	0018      	movs	r0, r3
   191be:	4b6d      	ldr	r3, [pc, #436]	; (19374 <xQueueSemaphoreTake+0x374>)
   191c0:	4798      	blx	r3
   191c2:	0003      	movs	r3, r0
   191c4:	001a      	movs	r2, r3
   191c6:	4b6c      	ldr	r3, [pc, #432]	; (19378 <xQueueSemaphoreTake+0x378>)
   191c8:	5c9c      	ldrb	r4, [r3, r2]
   191ca:	69fb      	ldr	r3, [r7, #28]
   191cc:	0018      	movs	r0, r3
   191ce:	4b6b      	ldr	r3, [pc, #428]	; (1937c <xQueueSemaphoreTake+0x37c>)
   191d0:	4798      	blx	r3
   191d2:	0003      	movs	r3, r0
   191d4:	b2db      	uxtb	r3, r3
   191d6:	001a      	movs	r2, r3
   191d8:	0021      	movs	r1, r4
   191da:	0028      	movs	r0, r5
   191dc:	4b68      	ldr	r3, [pc, #416]	; (19380 <xQueueSemaphoreTake+0x380>)
   191de:	4798      	blx	r3
   191e0:	2300      	movs	r3, #0
   191e2:	e147      	b.n	19474 <xQueueSemaphoreTake+0x474>
   191e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   191e6:	2b00      	cmp	r3, #0
   191e8:	d106      	bne.n	191f8 <xQueueSemaphoreTake+0x1f8>
   191ea:	230c      	movs	r3, #12
   191ec:	18fb      	adds	r3, r7, r3
   191ee:	0018      	movs	r0, r3
   191f0:	4b6a      	ldr	r3, [pc, #424]	; (1939c <xQueueSemaphoreTake+0x39c>)
   191f2:	4798      	blx	r3
   191f4:	2301      	movs	r3, #1
   191f6:	627b      	str	r3, [r7, #36]	; 0x24
   191f8:	4b67      	ldr	r3, [pc, #412]	; (19398 <xQueueSemaphoreTake+0x398>)
   191fa:	4798      	blx	r3
   191fc:	4b68      	ldr	r3, [pc, #416]	; (193a0 <xQueueSemaphoreTake+0x3a0>)
   191fe:	4798      	blx	r3
   19200:	4b57      	ldr	r3, [pc, #348]	; (19360 <xQueueSemaphoreTake+0x360>)
   19202:	4798      	blx	r3
   19204:	69fb      	ldr	r3, [r7, #28]
   19206:	2244      	movs	r2, #68	; 0x44
   19208:	5c9b      	ldrb	r3, [r3, r2]
   1920a:	b25b      	sxtb	r3, r3
   1920c:	3301      	adds	r3, #1
   1920e:	d103      	bne.n	19218 <xQueueSemaphoreTake+0x218>
   19210:	69fb      	ldr	r3, [r7, #28]
   19212:	2244      	movs	r2, #68	; 0x44
   19214:	2100      	movs	r1, #0
   19216:	5499      	strb	r1, [r3, r2]
   19218:	69fb      	ldr	r3, [r7, #28]
   1921a:	2245      	movs	r2, #69	; 0x45
   1921c:	5c9b      	ldrb	r3, [r3, r2]
   1921e:	b25b      	sxtb	r3, r3
   19220:	3301      	adds	r3, #1
   19222:	d103      	bne.n	1922c <xQueueSemaphoreTake+0x22c>
   19224:	69fb      	ldr	r3, [r7, #28]
   19226:	2245      	movs	r2, #69	; 0x45
   19228:	2100      	movs	r1, #0
   1922a:	5499      	strb	r1, [r3, r2]
   1922c:	4b5a      	ldr	r3, [pc, #360]	; (19398 <xQueueSemaphoreTake+0x398>)
   1922e:	4798      	blx	r3
   19230:	003a      	movs	r2, r7
   19232:	230c      	movs	r3, #12
   19234:	18fb      	adds	r3, r7, r3
   19236:	0011      	movs	r1, r2
   19238:	0018      	movs	r0, r3
   1923a:	4b5a      	ldr	r3, [pc, #360]	; (193a4 <xQueueSemaphoreTake+0x3a4>)
   1923c:	4798      	blx	r3
   1923e:	1e03      	subs	r3, r0, #0
   19240:	d000      	beq.n	19244 <xQueueSemaphoreTake+0x244>
   19242:	e0bd      	b.n	193c0 <xQueueSemaphoreTake+0x3c0>
   19244:	69fb      	ldr	r3, [r7, #28]
   19246:	0018      	movs	r0, r3
   19248:	4b57      	ldr	r3, [pc, #348]	; (193a8 <xQueueSemaphoreTake+0x3a8>)
   1924a:	4798      	blx	r3
   1924c:	1e03      	subs	r3, r0, #0
   1924e:	d100      	bne.n	19252 <xQueueSemaphoreTake+0x252>
   19250:	e07c      	b.n	1934c <xQueueSemaphoreTake+0x34c>
   19252:	4b44      	ldr	r3, [pc, #272]	; (19364 <xQueueSemaphoreTake+0x364>)
   19254:	4798      	blx	r3
   19256:	0003      	movs	r3, r0
   19258:	0018      	movs	r0, r3
   1925a:	4b43      	ldr	r3, [pc, #268]	; (19368 <xQueueSemaphoreTake+0x368>)
   1925c:	4798      	blx	r3
   1925e:	0003      	movs	r3, r0
   19260:	001a      	movs	r2, r3
   19262:	4b42      	ldr	r3, [pc, #264]	; (1936c <xQueueSemaphoreTake+0x36c>)
   19264:	881b      	ldrh	r3, [r3, #0]
   19266:	4013      	ands	r3, r2
   19268:	b29b      	uxth	r3, r3
   1926a:	2b00      	cmp	r3, #0
   1926c:	d029      	beq.n	192c2 <xQueueSemaphoreTake+0x2c2>
   1926e:	69fb      	ldr	r3, [r7, #28]
   19270:	0018      	movs	r0, r3
   19272:	4b3f      	ldr	r3, [pc, #252]	; (19370 <xQueueSemaphoreTake+0x370>)
   19274:	4798      	blx	r3
   19276:	0003      	movs	r3, r0
   19278:	001a      	movs	r2, r3
   1927a:	4b3c      	ldr	r3, [pc, #240]	; (1936c <xQueueSemaphoreTake+0x36c>)
   1927c:	881b      	ldrh	r3, [r3, #0]
   1927e:	4013      	ands	r3, r2
   19280:	b29b      	uxth	r3, r3
   19282:	2b00      	cmp	r3, #0
   19284:	d01d      	beq.n	192c2 <xQueueSemaphoreTake+0x2c2>
   19286:	69fb      	ldr	r3, [r7, #28]
   19288:	0018      	movs	r0, r3
   1928a:	4b3a      	ldr	r3, [pc, #232]	; (19374 <xQueueSemaphoreTake+0x374>)
   1928c:	4798      	blx	r3
   1928e:	0003      	movs	r3, r0
   19290:	001a      	movs	r2, r3
   19292:	4b39      	ldr	r3, [pc, #228]	; (19378 <xQueueSemaphoreTake+0x378>)
   19294:	5c9b      	ldrb	r3, [r3, r2]
   19296:	3368      	adds	r3, #104	; 0x68
   19298:	b2db      	uxtb	r3, r3
   1929a:	001d      	movs	r5, r3
   1929c:	69fb      	ldr	r3, [r7, #28]
   1929e:	0018      	movs	r0, r3
   192a0:	4b34      	ldr	r3, [pc, #208]	; (19374 <xQueueSemaphoreTake+0x374>)
   192a2:	4798      	blx	r3
   192a4:	0003      	movs	r3, r0
   192a6:	001a      	movs	r2, r3
   192a8:	4b33      	ldr	r3, [pc, #204]	; (19378 <xQueueSemaphoreTake+0x378>)
   192aa:	5c9c      	ldrb	r4, [r3, r2]
   192ac:	69fb      	ldr	r3, [r7, #28]
   192ae:	0018      	movs	r0, r3
   192b0:	4b32      	ldr	r3, [pc, #200]	; (1937c <xQueueSemaphoreTake+0x37c>)
   192b2:	4798      	blx	r3
   192b4:	0003      	movs	r3, r0
   192b6:	b2db      	uxtb	r3, r3
   192b8:	001a      	movs	r2, r3
   192ba:	0021      	movs	r1, r4
   192bc:	0028      	movs	r0, r5
   192be:	4b30      	ldr	r3, [pc, #192]	; (19380 <xQueueSemaphoreTake+0x380>)
   192c0:	4798      	blx	r3
   192c2:	69fb      	ldr	r3, [r7, #28]
   192c4:	0018      	movs	r0, r3
   192c6:	4b2b      	ldr	r3, [pc, #172]	; (19374 <xQueueSemaphoreTake+0x374>)
   192c8:	4798      	blx	r3
   192ca:	0003      	movs	r3, r0
   192cc:	001a      	movs	r2, r3
   192ce:	4b2a      	ldr	r3, [pc, #168]	; (19378 <xQueueSemaphoreTake+0x378>)
   192d0:	5c9b      	ldrb	r3, [r3, r2]
   192d2:	2b02      	cmp	r3, #2
   192d4:	d018      	beq.n	19308 <xQueueSemaphoreTake+0x308>
   192d6:	4b23      	ldr	r3, [pc, #140]	; (19364 <xQueueSemaphoreTake+0x364>)
   192d8:	4798      	blx	r3
   192da:	0003      	movs	r3, r0
   192dc:	0018      	movs	r0, r3
   192de:	4b22      	ldr	r3, [pc, #136]	; (19368 <xQueueSemaphoreTake+0x368>)
   192e0:	4798      	blx	r3
   192e2:	0003      	movs	r3, r0
   192e4:	001a      	movs	r2, r3
   192e6:	4b21      	ldr	r3, [pc, #132]	; (1936c <xQueueSemaphoreTake+0x36c>)
   192e8:	881b      	ldrh	r3, [r3, #0]
   192ea:	4013      	ands	r3, r2
   192ec:	b29b      	uxth	r3, r3
   192ee:	2b00      	cmp	r3, #0
   192f0:	d00a      	beq.n	19308 <xQueueSemaphoreTake+0x308>
   192f2:	4b1c      	ldr	r3, [pc, #112]	; (19364 <xQueueSemaphoreTake+0x364>)
   192f4:	4798      	blx	r3
   192f6:	0003      	movs	r3, r0
   192f8:	0018      	movs	r0, r3
   192fa:	4b22      	ldr	r3, [pc, #136]	; (19384 <xQueueSemaphoreTake+0x384>)
   192fc:	4798      	blx	r3
   192fe:	0003      	movs	r3, r0
   19300:	b2db      	uxtb	r3, r3
   19302:	0018      	movs	r0, r3
   19304:	4b29      	ldr	r3, [pc, #164]	; (193ac <xQueueSemaphoreTake+0x3ac>)
   19306:	4798      	blx	r3
   19308:	69fb      	ldr	r3, [r7, #28]
   1930a:	681b      	ldr	r3, [r3, #0]
   1930c:	2b00      	cmp	r3, #0
   1930e:	d10a      	bne.n	19326 <xQueueSemaphoreTake+0x326>
   19310:	4b13      	ldr	r3, [pc, #76]	; (19360 <xQueueSemaphoreTake+0x360>)
   19312:	4798      	blx	r3
   19314:	69fb      	ldr	r3, [r7, #28]
   19316:	685b      	ldr	r3, [r3, #4]
   19318:	0018      	movs	r0, r3
   1931a:	4b25      	ldr	r3, [pc, #148]	; (193b0 <xQueueSemaphoreTake+0x3b0>)
   1931c:	4798      	blx	r3
   1931e:	0003      	movs	r3, r0
   19320:	623b      	str	r3, [r7, #32]
   19322:	4b1d      	ldr	r3, [pc, #116]	; (19398 <xQueueSemaphoreTake+0x398>)
   19324:	4798      	blx	r3
   19326:	69fb      	ldr	r3, [r7, #28]
   19328:	3324      	adds	r3, #36	; 0x24
   1932a:	683a      	ldr	r2, [r7, #0]
   1932c:	0011      	movs	r1, r2
   1932e:	0018      	movs	r0, r3
   19330:	4b20      	ldr	r3, [pc, #128]	; (193b4 <xQueueSemaphoreTake+0x3b4>)
   19332:	4798      	blx	r3
   19334:	69fb      	ldr	r3, [r7, #28]
   19336:	0018      	movs	r0, r3
   19338:	4b1f      	ldr	r3, [pc, #124]	; (193b8 <xQueueSemaphoreTake+0x3b8>)
   1933a:	4798      	blx	r3
   1933c:	4b1f      	ldr	r3, [pc, #124]	; (193bc <xQueueSemaphoreTake+0x3bc>)
   1933e:	4798      	blx	r3
   19340:	1e03      	subs	r3, r0, #0
   19342:	d000      	beq.n	19346 <xQueueSemaphoreTake+0x346>
   19344:	e680      	b.n	19048 <xQueueSemaphoreTake+0x48>
   19346:	4b13      	ldr	r3, [pc, #76]	; (19394 <xQueueSemaphoreTake+0x394>)
   19348:	4798      	blx	r3
   1934a:	e67d      	b.n	19048 <xQueueSemaphoreTake+0x48>
   1934c:	69fb      	ldr	r3, [r7, #28]
   1934e:	0018      	movs	r0, r3
   19350:	4b19      	ldr	r3, [pc, #100]	; (193b8 <xQueueSemaphoreTake+0x3b8>)
   19352:	4798      	blx	r3
   19354:	4b19      	ldr	r3, [pc, #100]	; (193bc <xQueueSemaphoreTake+0x3bc>)
   19356:	4798      	blx	r3
   19358:	e676      	b.n	19048 <xQueueSemaphoreTake+0x48>
   1935a:	46c0      	nop			; (mov r8, r8)
   1935c:	0001aa7d 	.word	0x0001aa7d
   19360:	00017d59 	.word	0x00017d59
   19364:	00015ff5 	.word	0x00015ff5
   19368:	00015d59 	.word	0x00015d59
   1936c:	200000f0 	.word	0x200000f0
   19370:	00015e19 	.word	0x00015e19
   19374:	00015d19 	.word	0x00015d19
   19378:	200000e4 	.word	0x200000e4
   1937c:	00015df9 	.word	0x00015df9
   19380:	00016751 	.word	0x00016751
   19384:	00015d39 	.word	0x00015d39
   19388:	00016dad 	.word	0x00016dad
   1938c:	0001af49 	.word	0x0001af49
   19390:	0001a5ed 	.word	0x0001a5ed
   19394:	00017d41 	.word	0x00017d41
   19398:	00017d7d 	.word	0x00017d7d
   1939c:	0001a72d 	.word	0x0001a72d
   193a0:	0001a015 	.word	0x0001a015
   193a4:	0001a755 	.word	0x0001a755
   193a8:	00019749 	.word	0x00019749
   193ac:	00016ee9 	.word	0x00016ee9
   193b0:	0001aab5 	.word	0x0001aab5
   193b4:	0001a4c9 	.word	0x0001a4c9
   193b8:	00019659 	.word	0x00019659
   193bc:	0001a02d 	.word	0x0001a02d
   193c0:	69fb      	ldr	r3, [r7, #28]
   193c2:	0018      	movs	r0, r3
   193c4:	4b2d      	ldr	r3, [pc, #180]	; (1947c <xQueueSemaphoreTake+0x47c>)
   193c6:	4798      	blx	r3
   193c8:	4b2d      	ldr	r3, [pc, #180]	; (19480 <xQueueSemaphoreTake+0x480>)
   193ca:	4798      	blx	r3
   193cc:	69fb      	ldr	r3, [r7, #28]
   193ce:	0018      	movs	r0, r3
   193d0:	4b2c      	ldr	r3, [pc, #176]	; (19484 <xQueueSemaphoreTake+0x484>)
   193d2:	4798      	blx	r3
   193d4:	1e03      	subs	r3, r0, #0
   193d6:	d100      	bne.n	193da <xQueueSemaphoreTake+0x3da>
   193d8:	e636      	b.n	19048 <xQueueSemaphoreTake+0x48>
   193da:	6a3b      	ldr	r3, [r7, #32]
   193dc:	2b00      	cmp	r3, #0
   193de:	d010      	beq.n	19402 <xQueueSemaphoreTake+0x402>
   193e0:	4b29      	ldr	r3, [pc, #164]	; (19488 <xQueueSemaphoreTake+0x488>)
   193e2:	4798      	blx	r3
   193e4:	69fb      	ldr	r3, [r7, #28]
   193e6:	0018      	movs	r0, r3
   193e8:	4b28      	ldr	r3, [pc, #160]	; (1948c <xQueueSemaphoreTake+0x48c>)
   193ea:	4798      	blx	r3
   193ec:	0003      	movs	r3, r0
   193ee:	617b      	str	r3, [r7, #20]
   193f0:	69fb      	ldr	r3, [r7, #28]
   193f2:	685b      	ldr	r3, [r3, #4]
   193f4:	697a      	ldr	r2, [r7, #20]
   193f6:	0011      	movs	r1, r2
   193f8:	0018      	movs	r0, r3
   193fa:	4b25      	ldr	r3, [pc, #148]	; (19490 <xQueueSemaphoreTake+0x490>)
   193fc:	4798      	blx	r3
   193fe:	4b25      	ldr	r3, [pc, #148]	; (19494 <xQueueSemaphoreTake+0x494>)
   19400:	4798      	blx	r3
   19402:	4b25      	ldr	r3, [pc, #148]	; (19498 <xQueueSemaphoreTake+0x498>)
   19404:	4798      	blx	r3
   19406:	0003      	movs	r3, r0
   19408:	0018      	movs	r0, r3
   1940a:	4b24      	ldr	r3, [pc, #144]	; (1949c <xQueueSemaphoreTake+0x49c>)
   1940c:	4798      	blx	r3
   1940e:	0003      	movs	r3, r0
   19410:	001a      	movs	r2, r3
   19412:	4b23      	ldr	r3, [pc, #140]	; (194a0 <xQueueSemaphoreTake+0x4a0>)
   19414:	881b      	ldrh	r3, [r3, #0]
   19416:	4013      	ands	r3, r2
   19418:	b29b      	uxth	r3, r3
   1941a:	2b00      	cmp	r3, #0
   1941c:	d029      	beq.n	19472 <xQueueSemaphoreTake+0x472>
   1941e:	69fb      	ldr	r3, [r7, #28]
   19420:	0018      	movs	r0, r3
   19422:	4b20      	ldr	r3, [pc, #128]	; (194a4 <xQueueSemaphoreTake+0x4a4>)
   19424:	4798      	blx	r3
   19426:	0003      	movs	r3, r0
   19428:	001a      	movs	r2, r3
   1942a:	4b1d      	ldr	r3, [pc, #116]	; (194a0 <xQueueSemaphoreTake+0x4a0>)
   1942c:	881b      	ldrh	r3, [r3, #0]
   1942e:	4013      	ands	r3, r2
   19430:	b29b      	uxth	r3, r3
   19432:	2b00      	cmp	r3, #0
   19434:	d01d      	beq.n	19472 <xQueueSemaphoreTake+0x472>
   19436:	69fb      	ldr	r3, [r7, #28]
   19438:	0018      	movs	r0, r3
   1943a:	4b1b      	ldr	r3, [pc, #108]	; (194a8 <xQueueSemaphoreTake+0x4a8>)
   1943c:	4798      	blx	r3
   1943e:	0003      	movs	r3, r0
   19440:	001a      	movs	r2, r3
   19442:	4b1a      	ldr	r3, [pc, #104]	; (194ac <xQueueSemaphoreTake+0x4ac>)
   19444:	5c9b      	ldrb	r3, [r3, r2]
   19446:	3350      	adds	r3, #80	; 0x50
   19448:	b2db      	uxtb	r3, r3
   1944a:	001d      	movs	r5, r3
   1944c:	69fb      	ldr	r3, [r7, #28]
   1944e:	0018      	movs	r0, r3
   19450:	4b15      	ldr	r3, [pc, #84]	; (194a8 <xQueueSemaphoreTake+0x4a8>)
   19452:	4798      	blx	r3
   19454:	0003      	movs	r3, r0
   19456:	001a      	movs	r2, r3
   19458:	4b14      	ldr	r3, [pc, #80]	; (194ac <xQueueSemaphoreTake+0x4ac>)
   1945a:	5c9c      	ldrb	r4, [r3, r2]
   1945c:	69fb      	ldr	r3, [r7, #28]
   1945e:	0018      	movs	r0, r3
   19460:	4b13      	ldr	r3, [pc, #76]	; (194b0 <xQueueSemaphoreTake+0x4b0>)
   19462:	4798      	blx	r3
   19464:	0003      	movs	r3, r0
   19466:	b2db      	uxtb	r3, r3
   19468:	001a      	movs	r2, r3
   1946a:	0021      	movs	r1, r4
   1946c:	0028      	movs	r0, r5
   1946e:	4b11      	ldr	r3, [pc, #68]	; (194b4 <xQueueSemaphoreTake+0x4b4>)
   19470:	4798      	blx	r3
   19472:	2300      	movs	r3, #0
   19474:	0018      	movs	r0, r3
   19476:	46bd      	mov	sp, r7
   19478:	b00a      	add	sp, #40	; 0x28
   1947a:	bdb0      	pop	{r4, r5, r7, pc}
   1947c:	00019659 	.word	0x00019659
   19480:	0001a02d 	.word	0x0001a02d
   19484:	00019749 	.word	0x00019749
   19488:	00017d59 	.word	0x00017d59
   1948c:	000194fb 	.word	0x000194fb
   19490:	0001adad 	.word	0x0001adad
   19494:	00017d7d 	.word	0x00017d7d
   19498:	00015ff5 	.word	0x00015ff5
   1949c:	00015d59 	.word	0x00015d59
   194a0:	200000f0 	.word	0x200000f0
   194a4:	00015e19 	.word	0x00015e19
   194a8:	00015d19 	.word	0x00015d19
   194ac:	200000e4 	.word	0x200000e4
   194b0:	00015df9 	.word	0x00015df9
   194b4:	00016751 	.word	0x00016751

000194b8 <uxQueueGetQueueNumber>:
   194b8:	b580      	push	{r7, lr}
   194ba:	b082      	sub	sp, #8
   194bc:	af00      	add	r7, sp, #0
   194be:	6078      	str	r0, [r7, #4]
   194c0:	687b      	ldr	r3, [r7, #4]
   194c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   194c4:	0018      	movs	r0, r3
   194c6:	46bd      	mov	sp, r7
   194c8:	b002      	add	sp, #8
   194ca:	bd80      	pop	{r7, pc}

000194cc <vQueueSetQueueNumber>:
   194cc:	b580      	push	{r7, lr}
   194ce:	b082      	sub	sp, #8
   194d0:	af00      	add	r7, sp, #0
   194d2:	6078      	str	r0, [r7, #4]
   194d4:	6039      	str	r1, [r7, #0]
   194d6:	687b      	ldr	r3, [r7, #4]
   194d8:	683a      	ldr	r2, [r7, #0]
   194da:	64da      	str	r2, [r3, #76]	; 0x4c
   194dc:	46c0      	nop			; (mov r8, r8)
   194de:	46bd      	mov	sp, r7
   194e0:	b002      	add	sp, #8
   194e2:	bd80      	pop	{r7, pc}

000194e4 <ucQueueGetQueueType>:
   194e4:	b580      	push	{r7, lr}
   194e6:	b082      	sub	sp, #8
   194e8:	af00      	add	r7, sp, #0
   194ea:	6078      	str	r0, [r7, #4]
   194ec:	687b      	ldr	r3, [r7, #4]
   194ee:	2250      	movs	r2, #80	; 0x50
   194f0:	5c9b      	ldrb	r3, [r3, r2]
   194f2:	0018      	movs	r0, r3
   194f4:	46bd      	mov	sp, r7
   194f6:	b002      	add	sp, #8
   194f8:	bd80      	pop	{r7, pc}

000194fa <prvGetDisinheritPriorityAfterTimeout>:
   194fa:	b580      	push	{r7, lr}
   194fc:	b084      	sub	sp, #16
   194fe:	af00      	add	r7, sp, #0
   19500:	6078      	str	r0, [r7, #4]
   19502:	687b      	ldr	r3, [r7, #4]
   19504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19506:	2b00      	cmp	r3, #0
   19508:	d006      	beq.n	19518 <prvGetDisinheritPriorityAfterTimeout+0x1e>
   1950a:	687b      	ldr	r3, [r7, #4]
   1950c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1950e:	681b      	ldr	r3, [r3, #0]
   19510:	2205      	movs	r2, #5
   19512:	1ad3      	subs	r3, r2, r3
   19514:	60fb      	str	r3, [r7, #12]
   19516:	e001      	b.n	1951c <prvGetDisinheritPriorityAfterTimeout+0x22>
   19518:	2300      	movs	r3, #0
   1951a:	60fb      	str	r3, [r7, #12]
   1951c:	68fb      	ldr	r3, [r7, #12]
   1951e:	0018      	movs	r0, r3
   19520:	46bd      	mov	sp, r7
   19522:	b004      	add	sp, #16
   19524:	bd80      	pop	{r7, pc}
	...

00019528 <prvCopyDataToQueue>:
   19528:	b580      	push	{r7, lr}
   1952a:	b086      	sub	sp, #24
   1952c:	af00      	add	r7, sp, #0
   1952e:	60f8      	str	r0, [r7, #12]
   19530:	60b9      	str	r1, [r7, #8]
   19532:	607a      	str	r2, [r7, #4]
   19534:	2300      	movs	r3, #0
   19536:	617b      	str	r3, [r7, #20]
   19538:	68fb      	ldr	r3, [r7, #12]
   1953a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1953c:	613b      	str	r3, [r7, #16]
   1953e:	68fb      	ldr	r3, [r7, #12]
   19540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19542:	2b00      	cmp	r3, #0
   19544:	d10e      	bne.n	19564 <prvCopyDataToQueue+0x3c>
   19546:	68fb      	ldr	r3, [r7, #12]
   19548:	681b      	ldr	r3, [r3, #0]
   1954a:	2b00      	cmp	r3, #0
   1954c:	d14e      	bne.n	195ec <prvCopyDataToQueue+0xc4>
   1954e:	68fb      	ldr	r3, [r7, #12]
   19550:	685b      	ldr	r3, [r3, #4]
   19552:	0018      	movs	r0, r3
   19554:	4b2a      	ldr	r3, [pc, #168]	; (19600 <prvCopyDataToQueue+0xd8>)
   19556:	4798      	blx	r3
   19558:	0003      	movs	r3, r0
   1955a:	617b      	str	r3, [r7, #20]
   1955c:	68fb      	ldr	r3, [r7, #12]
   1955e:	2200      	movs	r2, #0
   19560:	605a      	str	r2, [r3, #4]
   19562:	e043      	b.n	195ec <prvCopyDataToQueue+0xc4>
   19564:	687b      	ldr	r3, [r7, #4]
   19566:	2b00      	cmp	r3, #0
   19568:	d119      	bne.n	1959e <prvCopyDataToQueue+0x76>
   1956a:	68fb      	ldr	r3, [r7, #12]
   1956c:	6898      	ldr	r0, [r3, #8]
   1956e:	68fb      	ldr	r3, [r7, #12]
   19570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   19572:	68bb      	ldr	r3, [r7, #8]
   19574:	0019      	movs	r1, r3
   19576:	4b23      	ldr	r3, [pc, #140]	; (19604 <prvCopyDataToQueue+0xdc>)
   19578:	4798      	blx	r3
   1957a:	68fb      	ldr	r3, [r7, #12]
   1957c:	689a      	ldr	r2, [r3, #8]
   1957e:	68fb      	ldr	r3, [r7, #12]
   19580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19582:	18d2      	adds	r2, r2, r3
   19584:	68fb      	ldr	r3, [r7, #12]
   19586:	609a      	str	r2, [r3, #8]
   19588:	68fb      	ldr	r3, [r7, #12]
   1958a:	689a      	ldr	r2, [r3, #8]
   1958c:	68fb      	ldr	r3, [r7, #12]
   1958e:	685b      	ldr	r3, [r3, #4]
   19590:	429a      	cmp	r2, r3
   19592:	d32b      	bcc.n	195ec <prvCopyDataToQueue+0xc4>
   19594:	68fb      	ldr	r3, [r7, #12]
   19596:	681a      	ldr	r2, [r3, #0]
   19598:	68fb      	ldr	r3, [r7, #12]
   1959a:	609a      	str	r2, [r3, #8]
   1959c:	e026      	b.n	195ec <prvCopyDataToQueue+0xc4>
   1959e:	68fb      	ldr	r3, [r7, #12]
   195a0:	68d8      	ldr	r0, [r3, #12]
   195a2:	68fb      	ldr	r3, [r7, #12]
   195a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   195a6:	68bb      	ldr	r3, [r7, #8]
   195a8:	0019      	movs	r1, r3
   195aa:	4b16      	ldr	r3, [pc, #88]	; (19604 <prvCopyDataToQueue+0xdc>)
   195ac:	4798      	blx	r3
   195ae:	68fb      	ldr	r3, [r7, #12]
   195b0:	68da      	ldr	r2, [r3, #12]
   195b2:	68fb      	ldr	r3, [r7, #12]
   195b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   195b6:	425b      	negs	r3, r3
   195b8:	18d2      	adds	r2, r2, r3
   195ba:	68fb      	ldr	r3, [r7, #12]
   195bc:	60da      	str	r2, [r3, #12]
   195be:	68fb      	ldr	r3, [r7, #12]
   195c0:	68da      	ldr	r2, [r3, #12]
   195c2:	68fb      	ldr	r3, [r7, #12]
   195c4:	681b      	ldr	r3, [r3, #0]
   195c6:	429a      	cmp	r2, r3
   195c8:	d207      	bcs.n	195da <prvCopyDataToQueue+0xb2>
   195ca:	68fb      	ldr	r3, [r7, #12]
   195cc:	685a      	ldr	r2, [r3, #4]
   195ce:	68fb      	ldr	r3, [r7, #12]
   195d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   195d2:	425b      	negs	r3, r3
   195d4:	18d2      	adds	r2, r2, r3
   195d6:	68fb      	ldr	r3, [r7, #12]
   195d8:	60da      	str	r2, [r3, #12]
   195da:	687b      	ldr	r3, [r7, #4]
   195dc:	2b02      	cmp	r3, #2
   195de:	d105      	bne.n	195ec <prvCopyDataToQueue+0xc4>
   195e0:	693b      	ldr	r3, [r7, #16]
   195e2:	2b00      	cmp	r3, #0
   195e4:	d002      	beq.n	195ec <prvCopyDataToQueue+0xc4>
   195e6:	693b      	ldr	r3, [r7, #16]
   195e8:	3b01      	subs	r3, #1
   195ea:	613b      	str	r3, [r7, #16]
   195ec:	693b      	ldr	r3, [r7, #16]
   195ee:	1c5a      	adds	r2, r3, #1
   195f0:	68fb      	ldr	r3, [r7, #12]
   195f2:	639a      	str	r2, [r3, #56]	; 0x38
   195f4:	697b      	ldr	r3, [r7, #20]
   195f6:	0018      	movs	r0, r3
   195f8:	46bd      	mov	sp, r7
   195fa:	b006      	add	sp, #24
   195fc:	bd80      	pop	{r7, pc}
   195fe:	46c0      	nop			; (mov r8, r8)
   19600:	0001ac45 	.word	0x0001ac45
   19604:	0003216d 	.word	0x0003216d

00019608 <prvCopyDataFromQueue>:
   19608:	b580      	push	{r7, lr}
   1960a:	b082      	sub	sp, #8
   1960c:	af00      	add	r7, sp, #0
   1960e:	6078      	str	r0, [r7, #4]
   19610:	6039      	str	r1, [r7, #0]
   19612:	687b      	ldr	r3, [r7, #4]
   19614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19616:	2b00      	cmp	r3, #0
   19618:	d018      	beq.n	1964c <prvCopyDataFromQueue+0x44>
   1961a:	687b      	ldr	r3, [r7, #4]
   1961c:	68da      	ldr	r2, [r3, #12]
   1961e:	687b      	ldr	r3, [r7, #4]
   19620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19622:	18d2      	adds	r2, r2, r3
   19624:	687b      	ldr	r3, [r7, #4]
   19626:	60da      	str	r2, [r3, #12]
   19628:	687b      	ldr	r3, [r7, #4]
   1962a:	68da      	ldr	r2, [r3, #12]
   1962c:	687b      	ldr	r3, [r7, #4]
   1962e:	685b      	ldr	r3, [r3, #4]
   19630:	429a      	cmp	r2, r3
   19632:	d303      	bcc.n	1963c <prvCopyDataFromQueue+0x34>
   19634:	687b      	ldr	r3, [r7, #4]
   19636:	681a      	ldr	r2, [r3, #0]
   19638:	687b      	ldr	r3, [r7, #4]
   1963a:	60da      	str	r2, [r3, #12]
   1963c:	687b      	ldr	r3, [r7, #4]
   1963e:	68d9      	ldr	r1, [r3, #12]
   19640:	687b      	ldr	r3, [r7, #4]
   19642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   19644:	683b      	ldr	r3, [r7, #0]
   19646:	0018      	movs	r0, r3
   19648:	4b02      	ldr	r3, [pc, #8]	; (19654 <prvCopyDataFromQueue+0x4c>)
   1964a:	4798      	blx	r3
   1964c:	46c0      	nop			; (mov r8, r8)
   1964e:	46bd      	mov	sp, r7
   19650:	b002      	add	sp, #8
   19652:	bd80      	pop	{r7, pc}
   19654:	0003216d 	.word	0x0003216d

00019658 <prvUnlockQueue>:
   19658:	b580      	push	{r7, lr}
   1965a:	b084      	sub	sp, #16
   1965c:	af00      	add	r7, sp, #0
   1965e:	6078      	str	r0, [r7, #4]
   19660:	4b34      	ldr	r3, [pc, #208]	; (19734 <prvUnlockQueue+0xdc>)
   19662:	4798      	blx	r3
   19664:	230f      	movs	r3, #15
   19666:	18fb      	adds	r3, r7, r3
   19668:	687a      	ldr	r2, [r7, #4]
   1966a:	2145      	movs	r1, #69	; 0x45
   1966c:	5c52      	ldrb	r2, [r2, r1]
   1966e:	701a      	strb	r2, [r3, #0]
   19670:	e022      	b.n	196b8 <prvUnlockQueue+0x60>
   19672:	687b      	ldr	r3, [r7, #4]
   19674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19676:	2b00      	cmp	r3, #0
   19678:	d009      	beq.n	1968e <prvUnlockQueue+0x36>
   1967a:	687b      	ldr	r3, [r7, #4]
   1967c:	2100      	movs	r1, #0
   1967e:	0018      	movs	r0, r3
   19680:	4b2d      	ldr	r3, [pc, #180]	; (19738 <prvUnlockQueue+0xe0>)
   19682:	4798      	blx	r3
   19684:	1e03      	subs	r3, r0, #0
   19686:	d00f      	beq.n	196a8 <prvUnlockQueue+0x50>
   19688:	4b2c      	ldr	r3, [pc, #176]	; (1973c <prvUnlockQueue+0xe4>)
   1968a:	4798      	blx	r3
   1968c:	e00c      	b.n	196a8 <prvUnlockQueue+0x50>
   1968e:	687b      	ldr	r3, [r7, #4]
   19690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19692:	2b00      	cmp	r3, #0
   19694:	d017      	beq.n	196c6 <prvUnlockQueue+0x6e>
   19696:	687b      	ldr	r3, [r7, #4]
   19698:	3324      	adds	r3, #36	; 0x24
   1969a:	0018      	movs	r0, r3
   1969c:	4b28      	ldr	r3, [pc, #160]	; (19740 <prvUnlockQueue+0xe8>)
   1969e:	4798      	blx	r3
   196a0:	1e03      	subs	r3, r0, #0
   196a2:	d001      	beq.n	196a8 <prvUnlockQueue+0x50>
   196a4:	4b25      	ldr	r3, [pc, #148]	; (1973c <prvUnlockQueue+0xe4>)
   196a6:	4798      	blx	r3
   196a8:	230f      	movs	r3, #15
   196aa:	18fb      	adds	r3, r7, r3
   196ac:	781b      	ldrb	r3, [r3, #0]
   196ae:	3b01      	subs	r3, #1
   196b0:	b2da      	uxtb	r2, r3
   196b2:	230f      	movs	r3, #15
   196b4:	18fb      	adds	r3, r7, r3
   196b6:	701a      	strb	r2, [r3, #0]
   196b8:	230f      	movs	r3, #15
   196ba:	18fb      	adds	r3, r7, r3
   196bc:	781b      	ldrb	r3, [r3, #0]
   196be:	b25b      	sxtb	r3, r3
   196c0:	2b00      	cmp	r3, #0
   196c2:	dcd6      	bgt.n	19672 <prvUnlockQueue+0x1a>
   196c4:	e000      	b.n	196c8 <prvUnlockQueue+0x70>
   196c6:	46c0      	nop			; (mov r8, r8)
   196c8:	687b      	ldr	r3, [r7, #4]
   196ca:	2245      	movs	r2, #69	; 0x45
   196cc:	21ff      	movs	r1, #255	; 0xff
   196ce:	5499      	strb	r1, [r3, r2]
   196d0:	4b1c      	ldr	r3, [pc, #112]	; (19744 <prvUnlockQueue+0xec>)
   196d2:	4798      	blx	r3
   196d4:	4b17      	ldr	r3, [pc, #92]	; (19734 <prvUnlockQueue+0xdc>)
   196d6:	4798      	blx	r3
   196d8:	230e      	movs	r3, #14
   196da:	18fb      	adds	r3, r7, r3
   196dc:	687a      	ldr	r2, [r7, #4]
   196de:	2144      	movs	r1, #68	; 0x44
   196e0:	5c52      	ldrb	r2, [r2, r1]
   196e2:	701a      	strb	r2, [r3, #0]
   196e4:	e014      	b.n	19710 <prvUnlockQueue+0xb8>
   196e6:	687b      	ldr	r3, [r7, #4]
   196e8:	691b      	ldr	r3, [r3, #16]
   196ea:	2b00      	cmp	r3, #0
   196ec:	d017      	beq.n	1971e <prvUnlockQueue+0xc6>
   196ee:	687b      	ldr	r3, [r7, #4]
   196f0:	3310      	adds	r3, #16
   196f2:	0018      	movs	r0, r3
   196f4:	4b12      	ldr	r3, [pc, #72]	; (19740 <prvUnlockQueue+0xe8>)
   196f6:	4798      	blx	r3
   196f8:	1e03      	subs	r3, r0, #0
   196fa:	d001      	beq.n	19700 <prvUnlockQueue+0xa8>
   196fc:	4b0f      	ldr	r3, [pc, #60]	; (1973c <prvUnlockQueue+0xe4>)
   196fe:	4798      	blx	r3
   19700:	230e      	movs	r3, #14
   19702:	18fb      	adds	r3, r7, r3
   19704:	781b      	ldrb	r3, [r3, #0]
   19706:	3b01      	subs	r3, #1
   19708:	b2da      	uxtb	r2, r3
   1970a:	230e      	movs	r3, #14
   1970c:	18fb      	adds	r3, r7, r3
   1970e:	701a      	strb	r2, [r3, #0]
   19710:	230e      	movs	r3, #14
   19712:	18fb      	adds	r3, r7, r3
   19714:	781b      	ldrb	r3, [r3, #0]
   19716:	b25b      	sxtb	r3, r3
   19718:	2b00      	cmp	r3, #0
   1971a:	dce4      	bgt.n	196e6 <prvUnlockQueue+0x8e>
   1971c:	e000      	b.n	19720 <prvUnlockQueue+0xc8>
   1971e:	46c0      	nop			; (mov r8, r8)
   19720:	687b      	ldr	r3, [r7, #4]
   19722:	2244      	movs	r2, #68	; 0x44
   19724:	21ff      	movs	r1, #255	; 0xff
   19726:	5499      	strb	r1, [r3, r2]
   19728:	4b06      	ldr	r3, [pc, #24]	; (19744 <prvUnlockQueue+0xec>)
   1972a:	4798      	blx	r3
   1972c:	46c0      	nop			; (mov r8, r8)
   1972e:	46bd      	mov	sp, r7
   19730:	b004      	add	sp, #16
   19732:	bd80      	pop	{r7, pc}
   19734:	00017d59 	.word	0x00017d59
   19738:	0001982d 	.word	0x0001982d
   1973c:	0001a801 	.word	0x0001a801
   19740:	0001a5ed 	.word	0x0001a5ed
   19744:	00017d7d 	.word	0x00017d7d

00019748 <prvIsQueueEmpty>:
   19748:	b580      	push	{r7, lr}
   1974a:	b084      	sub	sp, #16
   1974c:	af00      	add	r7, sp, #0
   1974e:	6078      	str	r0, [r7, #4]
   19750:	4b08      	ldr	r3, [pc, #32]	; (19774 <prvIsQueueEmpty+0x2c>)
   19752:	4798      	blx	r3
   19754:	687b      	ldr	r3, [r7, #4]
   19756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19758:	2b00      	cmp	r3, #0
   1975a:	d102      	bne.n	19762 <prvIsQueueEmpty+0x1a>
   1975c:	2301      	movs	r3, #1
   1975e:	60fb      	str	r3, [r7, #12]
   19760:	e001      	b.n	19766 <prvIsQueueEmpty+0x1e>
   19762:	2300      	movs	r3, #0
   19764:	60fb      	str	r3, [r7, #12]
   19766:	4b04      	ldr	r3, [pc, #16]	; (19778 <prvIsQueueEmpty+0x30>)
   19768:	4798      	blx	r3
   1976a:	68fb      	ldr	r3, [r7, #12]
   1976c:	0018      	movs	r0, r3
   1976e:	46bd      	mov	sp, r7
   19770:	b004      	add	sp, #16
   19772:	bd80      	pop	{r7, pc}
   19774:	00017d59 	.word	0x00017d59
   19778:	00017d7d 	.word	0x00017d7d

0001977c <prvIsQueueFull>:
   1977c:	b580      	push	{r7, lr}
   1977e:	b084      	sub	sp, #16
   19780:	af00      	add	r7, sp, #0
   19782:	6078      	str	r0, [r7, #4]
   19784:	4b09      	ldr	r3, [pc, #36]	; (197ac <prvIsQueueFull+0x30>)
   19786:	4798      	blx	r3
   19788:	687b      	ldr	r3, [r7, #4]
   1978a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1978c:	687b      	ldr	r3, [r7, #4]
   1978e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19790:	429a      	cmp	r2, r3
   19792:	d102      	bne.n	1979a <prvIsQueueFull+0x1e>
   19794:	2301      	movs	r3, #1
   19796:	60fb      	str	r3, [r7, #12]
   19798:	e001      	b.n	1979e <prvIsQueueFull+0x22>
   1979a:	2300      	movs	r3, #0
   1979c:	60fb      	str	r3, [r7, #12]
   1979e:	4b04      	ldr	r3, [pc, #16]	; (197b0 <prvIsQueueFull+0x34>)
   197a0:	4798      	blx	r3
   197a2:	68fb      	ldr	r3, [r7, #12]
   197a4:	0018      	movs	r0, r3
   197a6:	46bd      	mov	sp, r7
   197a8:	b004      	add	sp, #16
   197aa:	bd80      	pop	{r7, pc}
   197ac:	00017d59 	.word	0x00017d59
   197b0:	00017d7d 	.word	0x00017d7d

000197b4 <vQueueWaitForMessageRestricted>:
   197b4:	b580      	push	{r7, lr}
   197b6:	b086      	sub	sp, #24
   197b8:	af00      	add	r7, sp, #0
   197ba:	60f8      	str	r0, [r7, #12]
   197bc:	60b9      	str	r1, [r7, #8]
   197be:	607a      	str	r2, [r7, #4]
   197c0:	68fb      	ldr	r3, [r7, #12]
   197c2:	617b      	str	r3, [r7, #20]
   197c4:	4b15      	ldr	r3, [pc, #84]	; (1981c <vQueueWaitForMessageRestricted+0x68>)
   197c6:	4798      	blx	r3
   197c8:	697b      	ldr	r3, [r7, #20]
   197ca:	2244      	movs	r2, #68	; 0x44
   197cc:	5c9b      	ldrb	r3, [r3, r2]
   197ce:	b25b      	sxtb	r3, r3
   197d0:	3301      	adds	r3, #1
   197d2:	d103      	bne.n	197dc <vQueueWaitForMessageRestricted+0x28>
   197d4:	697b      	ldr	r3, [r7, #20]
   197d6:	2244      	movs	r2, #68	; 0x44
   197d8:	2100      	movs	r1, #0
   197da:	5499      	strb	r1, [r3, r2]
   197dc:	697b      	ldr	r3, [r7, #20]
   197de:	2245      	movs	r2, #69	; 0x45
   197e0:	5c9b      	ldrb	r3, [r3, r2]
   197e2:	b25b      	sxtb	r3, r3
   197e4:	3301      	adds	r3, #1
   197e6:	d103      	bne.n	197f0 <vQueueWaitForMessageRestricted+0x3c>
   197e8:	697b      	ldr	r3, [r7, #20]
   197ea:	2245      	movs	r2, #69	; 0x45
   197ec:	2100      	movs	r1, #0
   197ee:	5499      	strb	r1, [r3, r2]
   197f0:	4b0b      	ldr	r3, [pc, #44]	; (19820 <vQueueWaitForMessageRestricted+0x6c>)
   197f2:	4798      	blx	r3
   197f4:	697b      	ldr	r3, [r7, #20]
   197f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   197f8:	2b00      	cmp	r3, #0
   197fa:	d106      	bne.n	1980a <vQueueWaitForMessageRestricted+0x56>
   197fc:	697b      	ldr	r3, [r7, #20]
   197fe:	3324      	adds	r3, #36	; 0x24
   19800:	687a      	ldr	r2, [r7, #4]
   19802:	68b9      	ldr	r1, [r7, #8]
   19804:	0018      	movs	r0, r3
   19806:	4b07      	ldr	r3, [pc, #28]	; (19824 <vQueueWaitForMessageRestricted+0x70>)
   19808:	4798      	blx	r3
   1980a:	697b      	ldr	r3, [r7, #20]
   1980c:	0018      	movs	r0, r3
   1980e:	4b06      	ldr	r3, [pc, #24]	; (19828 <vQueueWaitForMessageRestricted+0x74>)
   19810:	4798      	blx	r3
   19812:	46c0      	nop			; (mov r8, r8)
   19814:	46bd      	mov	sp, r7
   19816:	b006      	add	sp, #24
   19818:	bd80      	pop	{r7, pc}
   1981a:	46c0      	nop			; (mov r8, r8)
   1981c:	00017d59 	.word	0x00017d59
   19820:	00017d7d 	.word	0x00017d7d
   19824:	0001a50d 	.word	0x0001a50d
   19828:	00019659 	.word	0x00019659

0001982c <prvNotifyQueueSetContainer>:
   1982c:	b5b0      	push	{r4, r5, r7, lr}
   1982e:	b086      	sub	sp, #24
   19830:	af00      	add	r7, sp, #0
   19832:	6078      	str	r0, [r7, #4]
   19834:	6039      	str	r1, [r7, #0]
   19836:	687b      	ldr	r3, [r7, #4]
   19838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1983a:	613b      	str	r3, [r7, #16]
   1983c:	2300      	movs	r3, #0
   1983e:	617b      	str	r3, [r7, #20]
   19840:	693b      	ldr	r3, [r7, #16]
   19842:	2b00      	cmp	r3, #0
   19844:	d101      	bne.n	1984a <prvNotifyQueueSetContainer+0x1e>
   19846:	b672      	cpsid	i
   19848:	e7fe      	b.n	19848 <prvNotifyQueueSetContainer+0x1c>
   1984a:	693b      	ldr	r3, [r7, #16]
   1984c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1984e:	693b      	ldr	r3, [r7, #16]
   19850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19852:	429a      	cmp	r2, r3
   19854:	d301      	bcc.n	1985a <prvNotifyQueueSetContainer+0x2e>
   19856:	b672      	cpsid	i
   19858:	e7fe      	b.n	19858 <prvNotifyQueueSetContainer+0x2c>
   1985a:	693b      	ldr	r3, [r7, #16]
   1985c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1985e:	693b      	ldr	r3, [r7, #16]
   19860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19862:	429a      	cmp	r2, r3
   19864:	d300      	bcc.n	19868 <prvNotifyQueueSetContainer+0x3c>
   19866:	e08b      	b.n	19980 <prvNotifyQueueSetContainer+0x154>
   19868:	230f      	movs	r3, #15
   1986a:	18fb      	adds	r3, r7, r3
   1986c:	693a      	ldr	r2, [r7, #16]
   1986e:	2145      	movs	r1, #69	; 0x45
   19870:	5c52      	ldrb	r2, [r2, r1]
   19872:	701a      	strb	r2, [r3, #0]
   19874:	4b45      	ldr	r3, [pc, #276]	; (1998c <prvNotifyQueueSetContainer+0x160>)
   19876:	4798      	blx	r3
   19878:	0003      	movs	r3, r0
   1987a:	0018      	movs	r0, r3
   1987c:	4b44      	ldr	r3, [pc, #272]	; (19990 <prvNotifyQueueSetContainer+0x164>)
   1987e:	4798      	blx	r3
   19880:	0003      	movs	r3, r0
   19882:	001a      	movs	r2, r3
   19884:	4b43      	ldr	r3, [pc, #268]	; (19994 <prvNotifyQueueSetContainer+0x168>)
   19886:	881b      	ldrh	r3, [r3, #0]
   19888:	4013      	ands	r3, r2
   1988a:	b29b      	uxth	r3, r3
   1988c:	2b00      	cmp	r3, #0
   1988e:	d02e      	beq.n	198ee <prvNotifyQueueSetContainer+0xc2>
   19890:	693b      	ldr	r3, [r7, #16]
   19892:	0018      	movs	r0, r3
   19894:	4b40      	ldr	r3, [pc, #256]	; (19998 <prvNotifyQueueSetContainer+0x16c>)
   19896:	4798      	blx	r3
   19898:	0003      	movs	r3, r0
   1989a:	001a      	movs	r2, r3
   1989c:	4b3d      	ldr	r3, [pc, #244]	; (19994 <prvNotifyQueueSetContainer+0x168>)
   1989e:	881b      	ldrh	r3, [r3, #0]
   198a0:	4013      	ands	r3, r2
   198a2:	b29b      	uxth	r3, r3
   198a4:	2b00      	cmp	r3, #0
   198a6:	d022      	beq.n	198ee <prvNotifyQueueSetContainer+0xc2>
   198a8:	683b      	ldr	r3, [r7, #0]
   198aa:	2b00      	cmp	r3, #0
   198ac:	d10b      	bne.n	198c6 <prvNotifyQueueSetContainer+0x9a>
   198ae:	693b      	ldr	r3, [r7, #16]
   198b0:	0018      	movs	r0, r3
   198b2:	4b3a      	ldr	r3, [pc, #232]	; (1999c <prvNotifyQueueSetContainer+0x170>)
   198b4:	4798      	blx	r3
   198b6:	0003      	movs	r3, r0
   198b8:	001a      	movs	r2, r3
   198ba:	4b39      	ldr	r3, [pc, #228]	; (199a0 <prvNotifyQueueSetContainer+0x174>)
   198bc:	5c9b      	ldrb	r3, [r3, r2]
   198be:	3320      	adds	r3, #32
   198c0:	b2db      	uxtb	r3, r3
   198c2:	001d      	movs	r5, r3
   198c4:	e000      	b.n	198c8 <prvNotifyQueueSetContainer+0x9c>
   198c6:	2525      	movs	r5, #37	; 0x25
   198c8:	693b      	ldr	r3, [r7, #16]
   198ca:	0018      	movs	r0, r3
   198cc:	4b33      	ldr	r3, [pc, #204]	; (1999c <prvNotifyQueueSetContainer+0x170>)
   198ce:	4798      	blx	r3
   198d0:	0003      	movs	r3, r0
   198d2:	001a      	movs	r2, r3
   198d4:	4b32      	ldr	r3, [pc, #200]	; (199a0 <prvNotifyQueueSetContainer+0x174>)
   198d6:	5c9c      	ldrb	r4, [r3, r2]
   198d8:	693b      	ldr	r3, [r7, #16]
   198da:	0018      	movs	r0, r3
   198dc:	4b31      	ldr	r3, [pc, #196]	; (199a4 <prvNotifyQueueSetContainer+0x178>)
   198de:	4798      	blx	r3
   198e0:	0003      	movs	r3, r0
   198e2:	b2db      	uxtb	r3, r3
   198e4:	001a      	movs	r2, r3
   198e6:	0021      	movs	r1, r4
   198e8:	0028      	movs	r0, r5
   198ea:	4b2f      	ldr	r3, [pc, #188]	; (199a8 <prvNotifyQueueSetContainer+0x17c>)
   198ec:	4798      	blx	r3
   198ee:	693b      	ldr	r3, [r7, #16]
   198f0:	0018      	movs	r0, r3
   198f2:	4b2a      	ldr	r3, [pc, #168]	; (1999c <prvNotifyQueueSetContainer+0x170>)
   198f4:	4798      	blx	r3
   198f6:	0003      	movs	r3, r0
   198f8:	001a      	movs	r2, r3
   198fa:	4b29      	ldr	r3, [pc, #164]	; (199a0 <prvNotifyQueueSetContainer+0x174>)
   198fc:	5c9c      	ldrb	r4, [r3, r2]
   198fe:	693b      	ldr	r3, [r7, #16]
   19900:	0018      	movs	r0, r3
   19902:	4b28      	ldr	r3, [pc, #160]	; (199a4 <prvNotifyQueueSetContainer+0x178>)
   19904:	4798      	blx	r3
   19906:	0003      	movs	r3, r0
   19908:	b2dd      	uxtb	r5, r3
   1990a:	693b      	ldr	r3, [r7, #16]
   1990c:	0018      	movs	r0, r3
   1990e:	4b23      	ldr	r3, [pc, #140]	; (1999c <prvNotifyQueueSetContainer+0x170>)
   19910:	4798      	blx	r3
   19912:	0003      	movs	r3, r0
   19914:	001a      	movs	r2, r3
   19916:	4b22      	ldr	r3, [pc, #136]	; (199a0 <prvNotifyQueueSetContainer+0x174>)
   19918:	5c9b      	ldrb	r3, [r3, r2]
   1991a:	2b02      	cmp	r3, #2
   1991c:	d005      	beq.n	1992a <prvNotifyQueueSetContainer+0xfe>
   1991e:	693b      	ldr	r3, [r7, #16]
   19920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19922:	b2db      	uxtb	r3, r3
   19924:	3301      	adds	r3, #1
   19926:	b2db      	uxtb	r3, r3
   19928:	e000      	b.n	1992c <prvNotifyQueueSetContainer+0x100>
   1992a:	2300      	movs	r3, #0
   1992c:	001a      	movs	r2, r3
   1992e:	0029      	movs	r1, r5
   19930:	0020      	movs	r0, r4
   19932:	4b1e      	ldr	r3, [pc, #120]	; (199ac <prvNotifyQueueSetContainer+0x180>)
   19934:	4798      	blx	r3
   19936:	683a      	ldr	r2, [r7, #0]
   19938:	1d39      	adds	r1, r7, #4
   1993a:	693b      	ldr	r3, [r7, #16]
   1993c:	0018      	movs	r0, r3
   1993e:	4b1c      	ldr	r3, [pc, #112]	; (199b0 <prvNotifyQueueSetContainer+0x184>)
   19940:	4798      	blx	r3
   19942:	0003      	movs	r3, r0
   19944:	617b      	str	r3, [r7, #20]
   19946:	230f      	movs	r3, #15
   19948:	18fb      	adds	r3, r7, r3
   1994a:	781b      	ldrb	r3, [r3, #0]
   1994c:	b25b      	sxtb	r3, r3
   1994e:	3301      	adds	r3, #1
   19950:	d10d      	bne.n	1996e <prvNotifyQueueSetContainer+0x142>
   19952:	693b      	ldr	r3, [r7, #16]
   19954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19956:	2b00      	cmp	r3, #0
   19958:	d012      	beq.n	19980 <prvNotifyQueueSetContainer+0x154>
   1995a:	693b      	ldr	r3, [r7, #16]
   1995c:	3324      	adds	r3, #36	; 0x24
   1995e:	0018      	movs	r0, r3
   19960:	4b14      	ldr	r3, [pc, #80]	; (199b4 <prvNotifyQueueSetContainer+0x188>)
   19962:	4798      	blx	r3
   19964:	1e03      	subs	r3, r0, #0
   19966:	d00b      	beq.n	19980 <prvNotifyQueueSetContainer+0x154>
   19968:	2301      	movs	r3, #1
   1996a:	617b      	str	r3, [r7, #20]
   1996c:	e008      	b.n	19980 <prvNotifyQueueSetContainer+0x154>
   1996e:	230f      	movs	r3, #15
   19970:	18fb      	adds	r3, r7, r3
   19972:	781b      	ldrb	r3, [r3, #0]
   19974:	3301      	adds	r3, #1
   19976:	b2db      	uxtb	r3, r3
   19978:	b259      	sxtb	r1, r3
   1997a:	693b      	ldr	r3, [r7, #16]
   1997c:	2245      	movs	r2, #69	; 0x45
   1997e:	5499      	strb	r1, [r3, r2]
   19980:	697b      	ldr	r3, [r7, #20]
   19982:	0018      	movs	r0, r3
   19984:	46bd      	mov	sp, r7
   19986:	b006      	add	sp, #24
   19988:	bdb0      	pop	{r4, r5, r7, pc}
   1998a:	46c0      	nop			; (mov r8, r8)
   1998c:	00015ff5 	.word	0x00015ff5
   19990:	00015d59 	.word	0x00015d59
   19994:	200000f0 	.word	0x200000f0
   19998:	00015e19 	.word	0x00015e19
   1999c:	00015d19 	.word	0x00015d19
   199a0:	200000e4 	.word	0x200000e4
   199a4:	00015df9 	.word	0x00015df9
   199a8:	00016751 	.word	0x00016751
   199ac:	00016dad 	.word	0x00016dad
   199b0:	00019529 	.word	0x00019529
   199b4:	0001a5ed 	.word	0x0001a5ed

000199b8 <xTaskCreate>:
   199b8:	b590      	push	{r4, r7, lr}
   199ba:	b08d      	sub	sp, #52	; 0x34
   199bc:	af04      	add	r7, sp, #16
   199be:	60f8      	str	r0, [r7, #12]
   199c0:	60b9      	str	r1, [r7, #8]
   199c2:	603b      	str	r3, [r7, #0]
   199c4:	1dbb      	adds	r3, r7, #6
   199c6:	801a      	strh	r2, [r3, #0]
   199c8:	1dbb      	adds	r3, r7, #6
   199ca:	881b      	ldrh	r3, [r3, #0]
   199cc:	009b      	lsls	r3, r3, #2
   199ce:	0018      	movs	r0, r3
   199d0:	4b1d      	ldr	r3, [pc, #116]	; (19a48 <xTaskCreate+0x90>)
   199d2:	4798      	blx	r3
   199d4:	0003      	movs	r3, r0
   199d6:	617b      	str	r3, [r7, #20]
   199d8:	697b      	ldr	r3, [r7, #20]
   199da:	2b00      	cmp	r3, #0
   199dc:	d010      	beq.n	19a00 <xTaskCreate+0x48>
   199de:	2054      	movs	r0, #84	; 0x54
   199e0:	4b19      	ldr	r3, [pc, #100]	; (19a48 <xTaskCreate+0x90>)
   199e2:	4798      	blx	r3
   199e4:	0003      	movs	r3, r0
   199e6:	61fb      	str	r3, [r7, #28]
   199e8:	69fb      	ldr	r3, [r7, #28]
   199ea:	2b00      	cmp	r3, #0
   199ec:	d003      	beq.n	199f6 <xTaskCreate+0x3e>
   199ee:	69fb      	ldr	r3, [r7, #28]
   199f0:	697a      	ldr	r2, [r7, #20]
   199f2:	631a      	str	r2, [r3, #48]	; 0x30
   199f4:	e006      	b.n	19a04 <xTaskCreate+0x4c>
   199f6:	697b      	ldr	r3, [r7, #20]
   199f8:	0018      	movs	r0, r3
   199fa:	4b14      	ldr	r3, [pc, #80]	; (19a4c <xTaskCreate+0x94>)
   199fc:	4798      	blx	r3
   199fe:	e001      	b.n	19a04 <xTaskCreate+0x4c>
   19a00:	2300      	movs	r3, #0
   19a02:	61fb      	str	r3, [r7, #28]
   19a04:	69fb      	ldr	r3, [r7, #28]
   19a06:	2b00      	cmp	r3, #0
   19a08:	d016      	beq.n	19a38 <xTaskCreate+0x80>
   19a0a:	1dbb      	adds	r3, r7, #6
   19a0c:	881a      	ldrh	r2, [r3, #0]
   19a0e:	683c      	ldr	r4, [r7, #0]
   19a10:	68b9      	ldr	r1, [r7, #8]
   19a12:	68f8      	ldr	r0, [r7, #12]
   19a14:	2300      	movs	r3, #0
   19a16:	9303      	str	r3, [sp, #12]
   19a18:	69fb      	ldr	r3, [r7, #28]
   19a1a:	9302      	str	r3, [sp, #8]
   19a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19a1e:	9301      	str	r3, [sp, #4]
   19a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19a22:	9300      	str	r3, [sp, #0]
   19a24:	0023      	movs	r3, r4
   19a26:	4c0a      	ldr	r4, [pc, #40]	; (19a50 <xTaskCreate+0x98>)
   19a28:	47a0      	blx	r4
   19a2a:	69fb      	ldr	r3, [r7, #28]
   19a2c:	0018      	movs	r0, r3
   19a2e:	4b09      	ldr	r3, [pc, #36]	; (19a54 <xTaskCreate+0x9c>)
   19a30:	4798      	blx	r3
   19a32:	2301      	movs	r3, #1
   19a34:	61bb      	str	r3, [r7, #24]
   19a36:	e002      	b.n	19a3e <xTaskCreate+0x86>
   19a38:	2301      	movs	r3, #1
   19a3a:	425b      	negs	r3, r3
   19a3c:	61bb      	str	r3, [r7, #24]
   19a3e:	69bb      	ldr	r3, [r7, #24]
   19a40:	0018      	movs	r0, r3
   19a42:	46bd      	mov	sp, r7
   19a44:	b009      	add	sp, #36	; 0x24
   19a46:	bd90      	pop	{r4, r7, pc}
   19a48:	00017e91 	.word	0x00017e91
   19a4c:	00017f55 	.word	0x00017f55
   19a50:	00019a59 	.word	0x00019a59
   19a54:	00019b69 	.word	0x00019b69

00019a58 <prvInitialiseNewTask>:
   19a58:	b580      	push	{r7, lr}
   19a5a:	b086      	sub	sp, #24
   19a5c:	af00      	add	r7, sp, #0
   19a5e:	60f8      	str	r0, [r7, #12]
   19a60:	60b9      	str	r1, [r7, #8]
   19a62:	607a      	str	r2, [r7, #4]
   19a64:	603b      	str	r3, [r7, #0]
   19a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a68:	6b18      	ldr	r0, [r3, #48]	; 0x30
   19a6a:	687b      	ldr	r3, [r7, #4]
   19a6c:	009b      	lsls	r3, r3, #2
   19a6e:	001a      	movs	r2, r3
   19a70:	21a5      	movs	r1, #165	; 0xa5
   19a72:	4b39      	ldr	r3, [pc, #228]	; (19b58 <prvInitialiseNewTask+0x100>)
   19a74:	4798      	blx	r3
   19a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   19a7a:	687b      	ldr	r3, [r7, #4]
   19a7c:	4937      	ldr	r1, [pc, #220]	; (19b5c <prvInitialiseNewTask+0x104>)
   19a7e:	468c      	mov	ip, r1
   19a80:	4463      	add	r3, ip
   19a82:	009b      	lsls	r3, r3, #2
   19a84:	18d3      	adds	r3, r2, r3
   19a86:	613b      	str	r3, [r7, #16]
   19a88:	693b      	ldr	r3, [r7, #16]
   19a8a:	2207      	movs	r2, #7
   19a8c:	4393      	bics	r3, r2
   19a8e:	613b      	str	r3, [r7, #16]
   19a90:	693b      	ldr	r3, [r7, #16]
   19a92:	2207      	movs	r2, #7
   19a94:	4013      	ands	r3, r2
   19a96:	d001      	beq.n	19a9c <prvInitialiseNewTask+0x44>
   19a98:	b672      	cpsid	i
   19a9a:	e7fe      	b.n	19a9a <prvInitialiseNewTask+0x42>
   19a9c:	2300      	movs	r3, #0
   19a9e:	617b      	str	r3, [r7, #20]
   19aa0:	e013      	b.n	19aca <prvInitialiseNewTask+0x72>
   19aa2:	68ba      	ldr	r2, [r7, #8]
   19aa4:	697b      	ldr	r3, [r7, #20]
   19aa6:	18d3      	adds	r3, r2, r3
   19aa8:	7818      	ldrb	r0, [r3, #0]
   19aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19aac:	2134      	movs	r1, #52	; 0x34
   19aae:	697b      	ldr	r3, [r7, #20]
   19ab0:	18d3      	adds	r3, r2, r3
   19ab2:	185b      	adds	r3, r3, r1
   19ab4:	1c02      	adds	r2, r0, #0
   19ab6:	701a      	strb	r2, [r3, #0]
   19ab8:	68ba      	ldr	r2, [r7, #8]
   19aba:	697b      	ldr	r3, [r7, #20]
   19abc:	18d3      	adds	r3, r2, r3
   19abe:	781b      	ldrb	r3, [r3, #0]
   19ac0:	2b00      	cmp	r3, #0
   19ac2:	d006      	beq.n	19ad2 <prvInitialiseNewTask+0x7a>
   19ac4:	697b      	ldr	r3, [r7, #20]
   19ac6:	3301      	adds	r3, #1
   19ac8:	617b      	str	r3, [r7, #20]
   19aca:	697b      	ldr	r3, [r7, #20]
   19acc:	2b07      	cmp	r3, #7
   19ace:	d9e8      	bls.n	19aa2 <prvInitialiseNewTask+0x4a>
   19ad0:	e000      	b.n	19ad4 <prvInitialiseNewTask+0x7c>
   19ad2:	46c0      	nop			; (mov r8, r8)
   19ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19ad6:	223b      	movs	r2, #59	; 0x3b
   19ad8:	2100      	movs	r1, #0
   19ada:	5499      	strb	r1, [r3, r2]
   19adc:	6a3b      	ldr	r3, [r7, #32]
   19ade:	2b04      	cmp	r3, #4
   19ae0:	d901      	bls.n	19ae6 <prvInitialiseNewTask+0x8e>
   19ae2:	2304      	movs	r3, #4
   19ae4:	623b      	str	r3, [r7, #32]
   19ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19ae8:	6a3a      	ldr	r2, [r7, #32]
   19aea:	62da      	str	r2, [r3, #44]	; 0x2c
   19aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19aee:	6a3a      	ldr	r2, [r7, #32]
   19af0:	645a      	str	r2, [r3, #68]	; 0x44
   19af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19af4:	2200      	movs	r2, #0
   19af6:	649a      	str	r2, [r3, #72]	; 0x48
   19af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19afa:	3304      	adds	r3, #4
   19afc:	0018      	movs	r0, r3
   19afe:	4b18      	ldr	r3, [pc, #96]	; (19b60 <prvInitialiseNewTask+0x108>)
   19b00:	4798      	blx	r3
   19b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b04:	3318      	adds	r3, #24
   19b06:	0018      	movs	r0, r3
   19b08:	4b15      	ldr	r3, [pc, #84]	; (19b60 <prvInitialiseNewTask+0x108>)
   19b0a:	4798      	blx	r3
   19b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19b10:	611a      	str	r2, [r3, #16]
   19b12:	6a3b      	ldr	r3, [r7, #32]
   19b14:	2205      	movs	r2, #5
   19b16:	1ad2      	subs	r2, r2, r3
   19b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b1a:	619a      	str	r2, [r3, #24]
   19b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19b20:	625a      	str	r2, [r3, #36]	; 0x24
   19b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b24:	2200      	movs	r2, #0
   19b26:	64da      	str	r2, [r3, #76]	; 0x4c
   19b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b2a:	2250      	movs	r2, #80	; 0x50
   19b2c:	2100      	movs	r1, #0
   19b2e:	5499      	strb	r1, [r3, r2]
   19b30:	683a      	ldr	r2, [r7, #0]
   19b32:	68f9      	ldr	r1, [r7, #12]
   19b34:	693b      	ldr	r3, [r7, #16]
   19b36:	0018      	movs	r0, r3
   19b38:	4b0a      	ldr	r3, [pc, #40]	; (19b64 <prvInitialiseNewTask+0x10c>)
   19b3a:	4798      	blx	r3
   19b3c:	0002      	movs	r2, r0
   19b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19b40:	601a      	str	r2, [r3, #0]
   19b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b44:	2b00      	cmp	r3, #0
   19b46:	d002      	beq.n	19b4e <prvInitialiseNewTask+0xf6>
   19b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19b4c:	601a      	str	r2, [r3, #0]
   19b4e:	46c0      	nop			; (mov r8, r8)
   19b50:	46bd      	mov	sp, r7
   19b52:	b006      	add	sp, #24
   19b54:	bd80      	pop	{r7, pc}
   19b56:	46c0      	nop			; (mov r8, r8)
   19b58:	000321a3 	.word	0x000321a3
   19b5c:	3fffffff 	.word	0x3fffffff
   19b60:	00017b0d 	.word	0x00017b0d
   19b64:	00017c25 	.word	0x00017c25

00019b68 <prvAddNewTaskToReadyList>:
   19b68:	b580      	push	{r7, lr}
   19b6a:	b082      	sub	sp, #8
   19b6c:	af00      	add	r7, sp, #0
   19b6e:	6078      	str	r0, [r7, #4]
   19b70:	4b60      	ldr	r3, [pc, #384]	; (19cf4 <prvAddNewTaskToReadyList+0x18c>)
   19b72:	4798      	blx	r3
   19b74:	4b60      	ldr	r3, [pc, #384]	; (19cf8 <prvAddNewTaskToReadyList+0x190>)
   19b76:	681b      	ldr	r3, [r3, #0]
   19b78:	1c5a      	adds	r2, r3, #1
   19b7a:	4b5f      	ldr	r3, [pc, #380]	; (19cf8 <prvAddNewTaskToReadyList+0x190>)
   19b7c:	601a      	str	r2, [r3, #0]
   19b7e:	4b5f      	ldr	r3, [pc, #380]	; (19cfc <prvAddNewTaskToReadyList+0x194>)
   19b80:	681b      	ldr	r3, [r3, #0]
   19b82:	2b00      	cmp	r3, #0
   19b84:	d109      	bne.n	19b9a <prvAddNewTaskToReadyList+0x32>
   19b86:	4b5d      	ldr	r3, [pc, #372]	; (19cfc <prvAddNewTaskToReadyList+0x194>)
   19b88:	687a      	ldr	r2, [r7, #4]
   19b8a:	601a      	str	r2, [r3, #0]
   19b8c:	4b5a      	ldr	r3, [pc, #360]	; (19cf8 <prvAddNewTaskToReadyList+0x190>)
   19b8e:	681b      	ldr	r3, [r3, #0]
   19b90:	2b01      	cmp	r3, #1
   19b92:	d110      	bne.n	19bb6 <prvAddNewTaskToReadyList+0x4e>
   19b94:	4b5a      	ldr	r3, [pc, #360]	; (19d00 <prvAddNewTaskToReadyList+0x198>)
   19b96:	4798      	blx	r3
   19b98:	e00d      	b.n	19bb6 <prvAddNewTaskToReadyList+0x4e>
   19b9a:	4b5a      	ldr	r3, [pc, #360]	; (19d04 <prvAddNewTaskToReadyList+0x19c>)
   19b9c:	681b      	ldr	r3, [r3, #0]
   19b9e:	2b00      	cmp	r3, #0
   19ba0:	d109      	bne.n	19bb6 <prvAddNewTaskToReadyList+0x4e>
   19ba2:	4b56      	ldr	r3, [pc, #344]	; (19cfc <prvAddNewTaskToReadyList+0x194>)
   19ba4:	681b      	ldr	r3, [r3, #0]
   19ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19ba8:	687b      	ldr	r3, [r7, #4]
   19baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19bac:	429a      	cmp	r2, r3
   19bae:	d802      	bhi.n	19bb6 <prvAddNewTaskToReadyList+0x4e>
   19bb0:	4b52      	ldr	r3, [pc, #328]	; (19cfc <prvAddNewTaskToReadyList+0x194>)
   19bb2:	687a      	ldr	r2, [r7, #4]
   19bb4:	601a      	str	r2, [r3, #0]
   19bb6:	4b54      	ldr	r3, [pc, #336]	; (19d08 <prvAddNewTaskToReadyList+0x1a0>)
   19bb8:	681b      	ldr	r3, [r3, #0]
   19bba:	1c5a      	adds	r2, r3, #1
   19bbc:	4b52      	ldr	r3, [pc, #328]	; (19d08 <prvAddNewTaskToReadyList+0x1a0>)
   19bbe:	601a      	str	r2, [r3, #0]
   19bc0:	4b51      	ldr	r3, [pc, #324]	; (19d08 <prvAddNewTaskToReadyList+0x1a0>)
   19bc2:	681a      	ldr	r2, [r3, #0]
   19bc4:	687b      	ldr	r3, [r7, #4]
   19bc6:	63da      	str	r2, [r3, #60]	; 0x3c
   19bc8:	687b      	ldr	r3, [r7, #4]
   19bca:	2b00      	cmp	r3, #0
   19bcc:	d052      	beq.n	19c74 <prvAddNewTaskToReadyList+0x10c>
   19bce:	2003      	movs	r0, #3
   19bd0:	4b4e      	ldr	r3, [pc, #312]	; (19d0c <prvAddNewTaskToReadyList+0x1a4>)
   19bd2:	4798      	blx	r3
   19bd4:	0003      	movs	r3, r0
   19bd6:	b29a      	uxth	r2, r3
   19bd8:	687b      	ldr	r3, [r7, #4]
   19bda:	0011      	movs	r1, r2
   19bdc:	0018      	movs	r0, r3
   19bde:	4b4c      	ldr	r3, [pc, #304]	; (19d10 <prvAddNewTaskToReadyList+0x1a8>)
   19be0:	4798      	blx	r3
   19be2:	4b4c      	ldr	r3, [pc, #304]	; (19d14 <prvAddNewTaskToReadyList+0x1ac>)
   19be4:	881a      	ldrh	r2, [r3, #0]
   19be6:	687b      	ldr	r3, [r7, #4]
   19be8:	0011      	movs	r1, r2
   19bea:	0018      	movs	r0, r3
   19bec:	4b4a      	ldr	r3, [pc, #296]	; (19d18 <prvAddNewTaskToReadyList+0x1b0>)
   19bee:	4798      	blx	r3
   19bf0:	687b      	ldr	r3, [r7, #4]
   19bf2:	0018      	movs	r0, r3
   19bf4:	4b49      	ldr	r3, [pc, #292]	; (19d1c <prvAddNewTaskToReadyList+0x1b4>)
   19bf6:	4798      	blx	r3
   19bf8:	0003      	movs	r3, r0
   19bfa:	b2d9      	uxtb	r1, r3
   19bfc:	687b      	ldr	r3, [r7, #4]
   19bfe:	3334      	adds	r3, #52	; 0x34
   19c00:	001a      	movs	r2, r3
   19c02:	2003      	movs	r0, #3
   19c04:	4b46      	ldr	r3, [pc, #280]	; (19d20 <prvAddNewTaskToReadyList+0x1b8>)
   19c06:	4798      	blx	r3
   19c08:	687b      	ldr	r3, [r7, #4]
   19c0a:	0018      	movs	r0, r3
   19c0c:	4b43      	ldr	r3, [pc, #268]	; (19d1c <prvAddNewTaskToReadyList+0x1b4>)
   19c0e:	4798      	blx	r3
   19c10:	0003      	movs	r3, r0
   19c12:	b2d9      	uxtb	r1, r3
   19c14:	687b      	ldr	r3, [r7, #4]
   19c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19c18:	b2db      	uxtb	r3, r3
   19c1a:	001a      	movs	r2, r3
   19c1c:	2003      	movs	r0, #3
   19c1e:	4b41      	ldr	r3, [pc, #260]	; (19d24 <prvAddNewTaskToReadyList+0x1bc>)
   19c20:	4798      	blx	r3
   19c22:	4b41      	ldr	r3, [pc, #260]	; (19d28 <prvAddNewTaskToReadyList+0x1c0>)
   19c24:	4798      	blx	r3
   19c26:	0003      	movs	r3, r0
   19c28:	0018      	movs	r0, r3
   19c2a:	4b40      	ldr	r3, [pc, #256]	; (19d2c <prvAddNewTaskToReadyList+0x1c4>)
   19c2c:	4798      	blx	r3
   19c2e:	0003      	movs	r3, r0
   19c30:	001a      	movs	r2, r3
   19c32:	4b3f      	ldr	r3, [pc, #252]	; (19d30 <prvAddNewTaskToReadyList+0x1c8>)
   19c34:	881b      	ldrh	r3, [r3, #0]
   19c36:	4013      	ands	r3, r2
   19c38:	b29b      	uxth	r3, r3
   19c3a:	2b00      	cmp	r3, #0
   19c3c:	d016      	beq.n	19c6c <prvAddNewTaskToReadyList+0x104>
   19c3e:	687b      	ldr	r3, [r7, #4]
   19c40:	0018      	movs	r0, r3
   19c42:	4b3a      	ldr	r3, [pc, #232]	; (19d2c <prvAddNewTaskToReadyList+0x1c4>)
   19c44:	4798      	blx	r3
   19c46:	0003      	movs	r3, r0
   19c48:	001a      	movs	r2, r3
   19c4a:	4b39      	ldr	r3, [pc, #228]	; (19d30 <prvAddNewTaskToReadyList+0x1c8>)
   19c4c:	881b      	ldrh	r3, [r3, #0]
   19c4e:	4013      	ands	r3, r2
   19c50:	b29b      	uxth	r3, r3
   19c52:	2b00      	cmp	r3, #0
   19c54:	d00a      	beq.n	19c6c <prvAddNewTaskToReadyList+0x104>
   19c56:	687b      	ldr	r3, [r7, #4]
   19c58:	0018      	movs	r0, r3
   19c5a:	4b30      	ldr	r3, [pc, #192]	; (19d1c <prvAddNewTaskToReadyList+0x1b4>)
   19c5c:	4798      	blx	r3
   19c5e:	0003      	movs	r3, r0
   19c60:	b2db      	uxtb	r3, r3
   19c62:	001a      	movs	r2, r3
   19c64:	2103      	movs	r1, #3
   19c66:	201b      	movs	r0, #27
   19c68:	4b32      	ldr	r3, [pc, #200]	; (19d34 <prvAddNewTaskToReadyList+0x1cc>)
   19c6a:	4798      	blx	r3
   19c6c:	687b      	ldr	r3, [r7, #4]
   19c6e:	0018      	movs	r0, r3
   19c70:	4b31      	ldr	r3, [pc, #196]	; (19d38 <prvAddNewTaskToReadyList+0x1d0>)
   19c72:	4798      	blx	r3
   19c74:	687b      	ldr	r3, [r7, #4]
   19c76:	0018      	movs	r0, r3
   19c78:	4b2c      	ldr	r3, [pc, #176]	; (19d2c <prvAddNewTaskToReadyList+0x1c4>)
   19c7a:	4798      	blx	r3
   19c7c:	0003      	movs	r3, r0
   19c7e:	001a      	movs	r2, r3
   19c80:	4b2b      	ldr	r3, [pc, #172]	; (19d30 <prvAddNewTaskToReadyList+0x1c8>)
   19c82:	881b      	ldrh	r3, [r3, #0]
   19c84:	4013      	ands	r3, r2
   19c86:	b29b      	uxth	r3, r3
   19c88:	2b00      	cmp	r3, #0
   19c8a:	d008      	beq.n	19c9e <prvAddNewTaskToReadyList+0x136>
   19c8c:	687b      	ldr	r3, [r7, #4]
   19c8e:	0018      	movs	r0, r3
   19c90:	4b22      	ldr	r3, [pc, #136]	; (19d1c <prvAddNewTaskToReadyList+0x1b4>)
   19c92:	4798      	blx	r3
   19c94:	0003      	movs	r3, r0
   19c96:	b2db      	uxtb	r3, r3
   19c98:	0018      	movs	r0, r3
   19c9a:	4b28      	ldr	r3, [pc, #160]	; (19d3c <prvAddNewTaskToReadyList+0x1d4>)
   19c9c:	4798      	blx	r3
   19c9e:	687b      	ldr	r3, [r7, #4]
   19ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19ca2:	4b27      	ldr	r3, [pc, #156]	; (19d40 <prvAddNewTaskToReadyList+0x1d8>)
   19ca4:	681b      	ldr	r3, [r3, #0]
   19ca6:	429a      	cmp	r2, r3
   19ca8:	d903      	bls.n	19cb2 <prvAddNewTaskToReadyList+0x14a>
   19caa:	687b      	ldr	r3, [r7, #4]
   19cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19cae:	4b24      	ldr	r3, [pc, #144]	; (19d40 <prvAddNewTaskToReadyList+0x1d8>)
   19cb0:	601a      	str	r2, [r3, #0]
   19cb2:	687b      	ldr	r3, [r7, #4]
   19cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19cb6:	0013      	movs	r3, r2
   19cb8:	009b      	lsls	r3, r3, #2
   19cba:	189b      	adds	r3, r3, r2
   19cbc:	009b      	lsls	r3, r3, #2
   19cbe:	4a21      	ldr	r2, [pc, #132]	; (19d44 <prvAddNewTaskToReadyList+0x1dc>)
   19cc0:	189a      	adds	r2, r3, r2
   19cc2:	687b      	ldr	r3, [r7, #4]
   19cc4:	3304      	adds	r3, #4
   19cc6:	0019      	movs	r1, r3
   19cc8:	0010      	movs	r0, r2
   19cca:	4b1f      	ldr	r3, [pc, #124]	; (19d48 <prvAddNewTaskToReadyList+0x1e0>)
   19ccc:	4798      	blx	r3
   19cce:	4b1f      	ldr	r3, [pc, #124]	; (19d4c <prvAddNewTaskToReadyList+0x1e4>)
   19cd0:	4798      	blx	r3
   19cd2:	4b0c      	ldr	r3, [pc, #48]	; (19d04 <prvAddNewTaskToReadyList+0x19c>)
   19cd4:	681b      	ldr	r3, [r3, #0]
   19cd6:	2b00      	cmp	r3, #0
   19cd8:	d008      	beq.n	19cec <prvAddNewTaskToReadyList+0x184>
   19cda:	4b08      	ldr	r3, [pc, #32]	; (19cfc <prvAddNewTaskToReadyList+0x194>)
   19cdc:	681b      	ldr	r3, [r3, #0]
   19cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19ce0:	687b      	ldr	r3, [r7, #4]
   19ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19ce4:	429a      	cmp	r2, r3
   19ce6:	d201      	bcs.n	19cec <prvAddNewTaskToReadyList+0x184>
   19ce8:	4b19      	ldr	r3, [pc, #100]	; (19d50 <prvAddNewTaskToReadyList+0x1e8>)
   19cea:	4798      	blx	r3
   19cec:	46c0      	nop			; (mov r8, r8)
   19cee:	46bd      	mov	sp, r7
   19cf0:	b002      	add	sp, #8
   19cf2:	bd80      	pop	{r7, pc}
   19cf4:	00017d59 	.word	0x00017d59
   19cf8:	20003c0c 	.word	0x20003c0c
   19cfc:	20003b34 	.word	0x20003b34
   19d00:	0001a889 	.word	0x0001a889
   19d04:	20003c18 	.word	0x20003c18
   19d08:	20003c28 	.word	0x20003c28
   19d0c:	000172d9 	.word	0x000172d9
   19d10:	00015d7d 	.word	0x00015d7d
   19d14:	200000f2 	.word	0x200000f2
   19d18:	00015db9 	.word	0x00015db9
   19d1c:	00015d39 	.word	0x00015d39
   19d20:	00017509 	.word	0x00017509
   19d24:	00016c6d 	.word	0x00016c6d
   19d28:	00015ff5 	.word	0x00015ff5
   19d2c:	00015d59 	.word	0x00015d59
   19d30:	200000f0 	.word	0x200000f0
   19d34:	00016751 	.word	0x00016751
   19d38:	00015eb9 	.word	0x00015eb9
   19d3c:	00016509 	.word	0x00016509
   19d40:	20003c14 	.word	0x20003c14
   19d44:	20003b38 	.word	0x20003b38
   19d48:	00017b23 	.word	0x00017b23
   19d4c:	00017d7d 	.word	0x00017d7d
   19d50:	00017d41 	.word	0x00017d41

00019d54 <vTaskDelay>:
   19d54:	b580      	push	{r7, lr}
   19d56:	b084      	sub	sp, #16
   19d58:	af00      	add	r7, sp, #0
   19d5a:	6078      	str	r0, [r7, #4]
   19d5c:	2300      	movs	r3, #0
   19d5e:	60fb      	str	r3, [r7, #12]
   19d60:	687b      	ldr	r3, [r7, #4]
   19d62:	2b00      	cmp	r3, #0
   19d64:	d045      	beq.n	19df2 <vTaskDelay+0x9e>
   19d66:	4b27      	ldr	r3, [pc, #156]	; (19e04 <vTaskDelay+0xb0>)
   19d68:	681b      	ldr	r3, [r3, #0]
   19d6a:	2b00      	cmp	r3, #0
   19d6c:	d001      	beq.n	19d72 <vTaskDelay+0x1e>
   19d6e:	b672      	cpsid	i
   19d70:	e7fe      	b.n	19d70 <vTaskDelay+0x1c>
   19d72:	4b25      	ldr	r3, [pc, #148]	; (19e08 <vTaskDelay+0xb4>)
   19d74:	4798      	blx	r3
   19d76:	4b25      	ldr	r3, [pc, #148]	; (19e0c <vTaskDelay+0xb8>)
   19d78:	681b      	ldr	r3, [r3, #0]
   19d7a:	0018      	movs	r0, r3
   19d7c:	4b24      	ldr	r3, [pc, #144]	; (19e10 <vTaskDelay+0xbc>)
   19d7e:	4798      	blx	r3
   19d80:	0003      	movs	r3, r0
   19d82:	001a      	movs	r2, r3
   19d84:	4b23      	ldr	r3, [pc, #140]	; (19e14 <vTaskDelay+0xc0>)
   19d86:	881b      	ldrh	r3, [r3, #0]
   19d88:	4013      	ands	r3, r2
   19d8a:	b29b      	uxth	r3, r3
   19d8c:	2b00      	cmp	r3, #0
   19d8e:	d00e      	beq.n	19dae <vTaskDelay+0x5a>
   19d90:	687b      	ldr	r3, [r7, #4]
   19d92:	0019      	movs	r1, r3
   19d94:	2089      	movs	r0, #137	; 0x89
   19d96:	4b20      	ldr	r3, [pc, #128]	; (19e18 <vTaskDelay+0xc4>)
   19d98:	4798      	blx	r3
   19d9a:	4b1c      	ldr	r3, [pc, #112]	; (19e0c <vTaskDelay+0xb8>)
   19d9c:	681b      	ldr	r3, [r3, #0]
   19d9e:	0018      	movs	r0, r3
   19da0:	4b1e      	ldr	r3, [pc, #120]	; (19e1c <vTaskDelay+0xc8>)
   19da2:	4798      	blx	r3
   19da4:	0003      	movs	r3, r0
   19da6:	b2db      	uxtb	r3, r3
   19da8:	0018      	movs	r0, r3
   19daa:	4b1d      	ldr	r3, [pc, #116]	; (19e20 <vTaskDelay+0xcc>)
   19dac:	4798      	blx	r3
   19dae:	4b1d      	ldr	r3, [pc, #116]	; (19e24 <vTaskDelay+0xd0>)
   19db0:	4798      	blx	r3
   19db2:	0003      	movs	r3, r0
   19db4:	0018      	movs	r0, r3
   19db6:	4b16      	ldr	r3, [pc, #88]	; (19e10 <vTaskDelay+0xbc>)
   19db8:	4798      	blx	r3
   19dba:	0003      	movs	r3, r0
   19dbc:	001a      	movs	r2, r3
   19dbe:	4b15      	ldr	r3, [pc, #84]	; (19e14 <vTaskDelay+0xc0>)
   19dc0:	881b      	ldrh	r3, [r3, #0]
   19dc2:	4013      	ands	r3, r2
   19dc4:	b29b      	uxth	r3, r3
   19dc6:	2b00      	cmp	r3, #0
   19dc8:	d00a      	beq.n	19de0 <vTaskDelay+0x8c>
   19dca:	4b16      	ldr	r3, [pc, #88]	; (19e24 <vTaskDelay+0xd0>)
   19dcc:	4798      	blx	r3
   19dce:	0003      	movs	r3, r0
   19dd0:	0018      	movs	r0, r3
   19dd2:	4b12      	ldr	r3, [pc, #72]	; (19e1c <vTaskDelay+0xc8>)
   19dd4:	4798      	blx	r3
   19dd6:	0003      	movs	r3, r0
   19dd8:	b2db      	uxtb	r3, r3
   19dda:	0018      	movs	r0, r3
   19ddc:	4b10      	ldr	r3, [pc, #64]	; (19e20 <vTaskDelay+0xcc>)
   19dde:	4798      	blx	r3
   19de0:	687b      	ldr	r3, [r7, #4]
   19de2:	2100      	movs	r1, #0
   19de4:	0018      	movs	r0, r3
   19de6:	4b10      	ldr	r3, [pc, #64]	; (19e28 <vTaskDelay+0xd4>)
   19de8:	4798      	blx	r3
   19dea:	4b10      	ldr	r3, [pc, #64]	; (19e2c <vTaskDelay+0xd8>)
   19dec:	4798      	blx	r3
   19dee:	0003      	movs	r3, r0
   19df0:	60fb      	str	r3, [r7, #12]
   19df2:	68fb      	ldr	r3, [r7, #12]
   19df4:	2b00      	cmp	r3, #0
   19df6:	d101      	bne.n	19dfc <vTaskDelay+0xa8>
   19df8:	4b0d      	ldr	r3, [pc, #52]	; (19e30 <vTaskDelay+0xdc>)
   19dfa:	4798      	blx	r3
   19dfc:	46c0      	nop			; (mov r8, r8)
   19dfe:	46bd      	mov	sp, r7
   19e00:	b004      	add	sp, #16
   19e02:	bd80      	pop	{r7, pc}
   19e04:	20003c34 	.word	0x20003c34
   19e08:	0001a015 	.word	0x0001a015
   19e0c:	20003b34 	.word	0x20003b34
   19e10:	00015d59 	.word	0x00015d59
   19e14:	200000f0 	.word	0x200000f0
   19e18:	00016a59 	.word	0x00016a59
   19e1c:	00015d39 	.word	0x00015d39
   19e20:	00016ee9 	.word	0x00016ee9
   19e24:	00015ff5 	.word	0x00015ff5
   19e28:	0001af6d 	.word	0x0001af6d
   19e2c:	0001a02d 	.word	0x0001a02d
   19e30:	00017d41 	.word	0x00017d41

00019e34 <vTaskSuspend>:
   19e34:	b580      	push	{r7, lr}
   19e36:	b084      	sub	sp, #16
   19e38:	af00      	add	r7, sp, #0
   19e3a:	6078      	str	r0, [r7, #4]
   19e3c:	4b42      	ldr	r3, [pc, #264]	; (19f48 <vTaskSuspend+0x114>)
   19e3e:	4798      	blx	r3
   19e40:	687b      	ldr	r3, [r7, #4]
   19e42:	2b00      	cmp	r3, #0
   19e44:	d102      	bne.n	19e4c <vTaskSuspend+0x18>
   19e46:	4b41      	ldr	r3, [pc, #260]	; (19f4c <vTaskSuspend+0x118>)
   19e48:	681b      	ldr	r3, [r3, #0]
   19e4a:	e000      	b.n	19e4e <vTaskSuspend+0x1a>
   19e4c:	687b      	ldr	r3, [r7, #4]
   19e4e:	60fb      	str	r3, [r7, #12]
   19e50:	4b3f      	ldr	r3, [pc, #252]	; (19f50 <vTaskSuspend+0x11c>)
   19e52:	4798      	blx	r3
   19e54:	0003      	movs	r3, r0
   19e56:	0018      	movs	r0, r3
   19e58:	4b3e      	ldr	r3, [pc, #248]	; (19f54 <vTaskSuspend+0x120>)
   19e5a:	4798      	blx	r3
   19e5c:	0003      	movs	r3, r0
   19e5e:	001a      	movs	r2, r3
   19e60:	4b3d      	ldr	r3, [pc, #244]	; (19f58 <vTaskSuspend+0x124>)
   19e62:	881b      	ldrh	r3, [r3, #0]
   19e64:	4013      	ands	r3, r2
   19e66:	b29b      	uxth	r3, r3
   19e68:	2b00      	cmp	r3, #0
   19e6a:	d016      	beq.n	19e9a <vTaskSuspend+0x66>
   19e6c:	68fb      	ldr	r3, [r7, #12]
   19e6e:	0018      	movs	r0, r3
   19e70:	4b38      	ldr	r3, [pc, #224]	; (19f54 <vTaskSuspend+0x120>)
   19e72:	4798      	blx	r3
   19e74:	0003      	movs	r3, r0
   19e76:	001a      	movs	r2, r3
   19e78:	4b37      	ldr	r3, [pc, #220]	; (19f58 <vTaskSuspend+0x124>)
   19e7a:	881b      	ldrh	r3, [r3, #0]
   19e7c:	4013      	ands	r3, r2
   19e7e:	b29b      	uxth	r3, r3
   19e80:	2b00      	cmp	r3, #0
   19e82:	d00a      	beq.n	19e9a <vTaskSuspend+0x66>
   19e84:	68fb      	ldr	r3, [r7, #12]
   19e86:	0018      	movs	r0, r3
   19e88:	4b34      	ldr	r3, [pc, #208]	; (19f5c <vTaskSuspend+0x128>)
   19e8a:	4798      	blx	r3
   19e8c:	0003      	movs	r3, r0
   19e8e:	b2db      	uxtb	r3, r3
   19e90:	001a      	movs	r2, r3
   19e92:	2103      	movs	r1, #3
   19e94:	208a      	movs	r0, #138	; 0x8a
   19e96:	4b32      	ldr	r3, [pc, #200]	; (19f60 <vTaskSuspend+0x12c>)
   19e98:	4798      	blx	r3
   19e9a:	68fb      	ldr	r3, [r7, #12]
   19e9c:	0018      	movs	r0, r3
   19e9e:	4b2f      	ldr	r3, [pc, #188]	; (19f5c <vTaskSuspend+0x128>)
   19ea0:	4798      	blx	r3
   19ea2:	0003      	movs	r3, r0
   19ea4:	b2db      	uxtb	r3, r3
   19ea6:	0018      	movs	r0, r3
   19ea8:	4b2e      	ldr	r3, [pc, #184]	; (19f64 <vTaskSuspend+0x130>)
   19eaa:	4798      	blx	r3
   19eac:	68fb      	ldr	r3, [r7, #12]
   19eae:	3304      	adds	r3, #4
   19eb0:	0018      	movs	r0, r3
   19eb2:	4b2d      	ldr	r3, [pc, #180]	; (19f68 <vTaskSuspend+0x134>)
   19eb4:	4798      	blx	r3
   19eb6:	68fb      	ldr	r3, [r7, #12]
   19eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19eba:	2b00      	cmp	r3, #0
   19ebc:	d004      	beq.n	19ec8 <vTaskSuspend+0x94>
   19ebe:	68fb      	ldr	r3, [r7, #12]
   19ec0:	3318      	adds	r3, #24
   19ec2:	0018      	movs	r0, r3
   19ec4:	4b28      	ldr	r3, [pc, #160]	; (19f68 <vTaskSuspend+0x134>)
   19ec6:	4798      	blx	r3
   19ec8:	68fb      	ldr	r3, [r7, #12]
   19eca:	1d1a      	adds	r2, r3, #4
   19ecc:	4b27      	ldr	r3, [pc, #156]	; (19f6c <vTaskSuspend+0x138>)
   19ece:	0011      	movs	r1, r2
   19ed0:	0018      	movs	r0, r3
   19ed2:	4b27      	ldr	r3, [pc, #156]	; (19f70 <vTaskSuspend+0x13c>)
   19ed4:	4798      	blx	r3
   19ed6:	68fb      	ldr	r3, [r7, #12]
   19ed8:	2250      	movs	r2, #80	; 0x50
   19eda:	5c9b      	ldrb	r3, [r3, r2]
   19edc:	b2db      	uxtb	r3, r3
   19ede:	2b01      	cmp	r3, #1
   19ee0:	d103      	bne.n	19eea <vTaskSuspend+0xb6>
   19ee2:	68fb      	ldr	r3, [r7, #12]
   19ee4:	2250      	movs	r2, #80	; 0x50
   19ee6:	2100      	movs	r1, #0
   19ee8:	5499      	strb	r1, [r3, r2]
   19eea:	4b22      	ldr	r3, [pc, #136]	; (19f74 <vTaskSuspend+0x140>)
   19eec:	4798      	blx	r3
   19eee:	4b22      	ldr	r3, [pc, #136]	; (19f78 <vTaskSuspend+0x144>)
   19ef0:	681b      	ldr	r3, [r3, #0]
   19ef2:	2b00      	cmp	r3, #0
   19ef4:	d005      	beq.n	19f02 <vTaskSuspend+0xce>
   19ef6:	4b14      	ldr	r3, [pc, #80]	; (19f48 <vTaskSuspend+0x114>)
   19ef8:	4798      	blx	r3
   19efa:	4b20      	ldr	r3, [pc, #128]	; (19f7c <vTaskSuspend+0x148>)
   19efc:	4798      	blx	r3
   19efe:	4b1d      	ldr	r3, [pc, #116]	; (19f74 <vTaskSuspend+0x140>)
   19f00:	4798      	blx	r3
   19f02:	4b12      	ldr	r3, [pc, #72]	; (19f4c <vTaskSuspend+0x118>)
   19f04:	681b      	ldr	r3, [r3, #0]
   19f06:	68fa      	ldr	r2, [r7, #12]
   19f08:	429a      	cmp	r2, r3
   19f0a:	d118      	bne.n	19f3e <vTaskSuspend+0x10a>
   19f0c:	4b1a      	ldr	r3, [pc, #104]	; (19f78 <vTaskSuspend+0x144>)
   19f0e:	681b      	ldr	r3, [r3, #0]
   19f10:	2b00      	cmp	r3, #0
   19f12:	d008      	beq.n	19f26 <vTaskSuspend+0xf2>
   19f14:	4b1a      	ldr	r3, [pc, #104]	; (19f80 <vTaskSuspend+0x14c>)
   19f16:	681b      	ldr	r3, [r3, #0]
   19f18:	2b00      	cmp	r3, #0
   19f1a:	d001      	beq.n	19f20 <vTaskSuspend+0xec>
   19f1c:	b672      	cpsid	i
   19f1e:	e7fe      	b.n	19f1e <vTaskSuspend+0xea>
   19f20:	4b18      	ldr	r3, [pc, #96]	; (19f84 <vTaskSuspend+0x150>)
   19f22:	4798      	blx	r3
   19f24:	e00b      	b.n	19f3e <vTaskSuspend+0x10a>
   19f26:	4b11      	ldr	r3, [pc, #68]	; (19f6c <vTaskSuspend+0x138>)
   19f28:	681a      	ldr	r2, [r3, #0]
   19f2a:	4b17      	ldr	r3, [pc, #92]	; (19f88 <vTaskSuspend+0x154>)
   19f2c:	681b      	ldr	r3, [r3, #0]
   19f2e:	429a      	cmp	r2, r3
   19f30:	d103      	bne.n	19f3a <vTaskSuspend+0x106>
   19f32:	4b06      	ldr	r3, [pc, #24]	; (19f4c <vTaskSuspend+0x118>)
   19f34:	2200      	movs	r2, #0
   19f36:	601a      	str	r2, [r3, #0]
   19f38:	e001      	b.n	19f3e <vTaskSuspend+0x10a>
   19f3a:	4b14      	ldr	r3, [pc, #80]	; (19f8c <vTaskSuspend+0x158>)
   19f3c:	4798      	blx	r3
   19f3e:	46c0      	nop			; (mov r8, r8)
   19f40:	46bd      	mov	sp, r7
   19f42:	b004      	add	sp, #16
   19f44:	bd80      	pop	{r7, pc}
   19f46:	46c0      	nop			; (mov r8, r8)
   19f48:	00017d59 	.word	0x00017d59
   19f4c:	20003b34 	.word	0x20003b34
   19f50:	00015ff5 	.word	0x00015ff5
   19f54:	00015d59 	.word	0x00015d59
   19f58:	200000f0 	.word	0x200000f0
   19f5c:	00015d39 	.word	0x00015d39
   19f60:	00016751 	.word	0x00016751
   19f64:	00016ee9 	.word	0x00016ee9
   19f68:	00017bd3 	.word	0x00017bd3
   19f6c:	20003bf8 	.word	0x20003bf8
   19f70:	00017b23 	.word	0x00017b23
   19f74:	00017d7d 	.word	0x00017d7d
   19f78:	20003c18 	.word	0x20003c18
   19f7c:	0001aa19 	.word	0x0001aa19
   19f80:	20003c34 	.word	0x20003c34
   19f84:	00017d41 	.word	0x00017d41
   19f88:	20003c0c 	.word	0x20003c0c
   19f8c:	0001a3a9 	.word	0x0001a3a9

00019f90 <vTaskStartScheduler>:
   19f90:	b590      	push	{r4, r7, lr}
   19f92:	b085      	sub	sp, #20
   19f94:	af02      	add	r7, sp, #8
   19f96:	4916      	ldr	r1, [pc, #88]	; (19ff0 <vTaskStartScheduler+0x60>)
   19f98:	4816      	ldr	r0, [pc, #88]	; (19ff4 <vTaskStartScheduler+0x64>)
   19f9a:	4b17      	ldr	r3, [pc, #92]	; (19ff8 <vTaskStartScheduler+0x68>)
   19f9c:	9301      	str	r3, [sp, #4]
   19f9e:	2300      	movs	r3, #0
   19fa0:	9300      	str	r3, [sp, #0]
   19fa2:	2300      	movs	r3, #0
   19fa4:	2264      	movs	r2, #100	; 0x64
   19fa6:	4c15      	ldr	r4, [pc, #84]	; (19ffc <vTaskStartScheduler+0x6c>)
   19fa8:	47a0      	blx	r4
   19faa:	0003      	movs	r3, r0
   19fac:	607b      	str	r3, [r7, #4]
   19fae:	687b      	ldr	r3, [r7, #4]
   19fb0:	2b01      	cmp	r3, #1
   19fb2:	d103      	bne.n	19fbc <vTaskStartScheduler+0x2c>
   19fb4:	4b12      	ldr	r3, [pc, #72]	; (1a000 <vTaskStartScheduler+0x70>)
   19fb6:	4798      	blx	r3
   19fb8:	0003      	movs	r3, r0
   19fba:	607b      	str	r3, [r7, #4]
   19fbc:	687b      	ldr	r3, [r7, #4]
   19fbe:	2b01      	cmp	r3, #1
   19fc0:	d10d      	bne.n	19fde <vTaskStartScheduler+0x4e>
   19fc2:	b672      	cpsid	i
   19fc4:	4b0f      	ldr	r3, [pc, #60]	; (1a004 <vTaskStartScheduler+0x74>)
   19fc6:	2201      	movs	r2, #1
   19fc8:	4252      	negs	r2, r2
   19fca:	601a      	str	r2, [r3, #0]
   19fcc:	4b0e      	ldr	r3, [pc, #56]	; (1a008 <vTaskStartScheduler+0x78>)
   19fce:	2201      	movs	r2, #1
   19fd0:	601a      	str	r2, [r3, #0]
   19fd2:	4b0e      	ldr	r3, [pc, #56]	; (1a00c <vTaskStartScheduler+0x7c>)
   19fd4:	2200      	movs	r2, #0
   19fd6:	601a      	str	r2, [r3, #0]
   19fd8:	4b0d      	ldr	r3, [pc, #52]	; (1a010 <vTaskStartScheduler+0x80>)
   19fda:	4798      	blx	r3
   19fdc:	e004      	b.n	19fe8 <vTaskStartScheduler+0x58>
   19fde:	687b      	ldr	r3, [r7, #4]
   19fe0:	3301      	adds	r3, #1
   19fe2:	d101      	bne.n	19fe8 <vTaskStartScheduler+0x58>
   19fe4:	b672      	cpsid	i
   19fe6:	e7fe      	b.n	19fe6 <vTaskStartScheduler+0x56>
   19fe8:	46c0      	nop			; (mov r8, r8)
   19fea:	46bd      	mov	sp, r7
   19fec:	b003      	add	sp, #12
   19fee:	bd90      	pop	{r4, r7, pc}
   19ff0:	000356c8 	.word	0x000356c8
   19ff4:	0001a861 	.word	0x0001a861
   19ff8:	20003c30 	.word	0x20003c30
   19ffc:	000199b9 	.word	0x000199b9
   1a000:	0001b021 	.word	0x0001b021
   1a004:	20003c2c 	.word	0x20003c2c
   1a008:	20003c18 	.word	0x20003c18
   1a00c:	20003c10 	.word	0x20003c10
   1a010:	00017ce9 	.word	0x00017ce9

0001a014 <vTaskSuspendAll>:
   1a014:	b580      	push	{r7, lr}
   1a016:	af00      	add	r7, sp, #0
   1a018:	4b03      	ldr	r3, [pc, #12]	; (1a028 <vTaskSuspendAll+0x14>)
   1a01a:	681b      	ldr	r3, [r3, #0]
   1a01c:	1c5a      	adds	r2, r3, #1
   1a01e:	4b02      	ldr	r3, [pc, #8]	; (1a028 <vTaskSuspendAll+0x14>)
   1a020:	601a      	str	r2, [r3, #0]
   1a022:	46c0      	nop			; (mov r8, r8)
   1a024:	46bd      	mov	sp, r7
   1a026:	bd80      	pop	{r7, pc}
   1a028:	20003c34 	.word	0x20003c34

0001a02c <xTaskResumeAll>:
   1a02c:	b580      	push	{r7, lr}
   1a02e:	b084      	sub	sp, #16
   1a030:	af00      	add	r7, sp, #0
   1a032:	2300      	movs	r3, #0
   1a034:	60fb      	str	r3, [r7, #12]
   1a036:	2300      	movs	r3, #0
   1a038:	60bb      	str	r3, [r7, #8]
   1a03a:	4b45      	ldr	r3, [pc, #276]	; (1a150 <xTaskResumeAll+0x124>)
   1a03c:	681b      	ldr	r3, [r3, #0]
   1a03e:	2b00      	cmp	r3, #0
   1a040:	d101      	bne.n	1a046 <xTaskResumeAll+0x1a>
   1a042:	b672      	cpsid	i
   1a044:	e7fe      	b.n	1a044 <xTaskResumeAll+0x18>
   1a046:	4b43      	ldr	r3, [pc, #268]	; (1a154 <xTaskResumeAll+0x128>)
   1a048:	4798      	blx	r3
   1a04a:	4b41      	ldr	r3, [pc, #260]	; (1a150 <xTaskResumeAll+0x124>)
   1a04c:	681b      	ldr	r3, [r3, #0]
   1a04e:	1e5a      	subs	r2, r3, #1
   1a050:	4b3f      	ldr	r3, [pc, #252]	; (1a150 <xTaskResumeAll+0x124>)
   1a052:	601a      	str	r2, [r3, #0]
   1a054:	4b3e      	ldr	r3, [pc, #248]	; (1a150 <xTaskResumeAll+0x124>)
   1a056:	681b      	ldr	r3, [r3, #0]
   1a058:	2b00      	cmp	r3, #0
   1a05a:	d000      	beq.n	1a05e <xTaskResumeAll+0x32>
   1a05c:	e071      	b.n	1a142 <xTaskResumeAll+0x116>
   1a05e:	4b3e      	ldr	r3, [pc, #248]	; (1a158 <xTaskResumeAll+0x12c>)
   1a060:	681b      	ldr	r3, [r3, #0]
   1a062:	2b00      	cmp	r3, #0
   1a064:	d100      	bne.n	1a068 <xTaskResumeAll+0x3c>
   1a066:	e06c      	b.n	1a142 <xTaskResumeAll+0x116>
   1a068:	e044      	b.n	1a0f4 <xTaskResumeAll+0xc8>
   1a06a:	4b3c      	ldr	r3, [pc, #240]	; (1a15c <xTaskResumeAll+0x130>)
   1a06c:	68db      	ldr	r3, [r3, #12]
   1a06e:	68db      	ldr	r3, [r3, #12]
   1a070:	60fb      	str	r3, [r7, #12]
   1a072:	68fb      	ldr	r3, [r7, #12]
   1a074:	3318      	adds	r3, #24
   1a076:	0018      	movs	r0, r3
   1a078:	4b39      	ldr	r3, [pc, #228]	; (1a160 <xTaskResumeAll+0x134>)
   1a07a:	4798      	blx	r3
   1a07c:	68fb      	ldr	r3, [r7, #12]
   1a07e:	3304      	adds	r3, #4
   1a080:	0018      	movs	r0, r3
   1a082:	4b37      	ldr	r3, [pc, #220]	; (1a160 <xTaskResumeAll+0x134>)
   1a084:	4798      	blx	r3
   1a086:	68fb      	ldr	r3, [r7, #12]
   1a088:	0018      	movs	r0, r3
   1a08a:	4b36      	ldr	r3, [pc, #216]	; (1a164 <xTaskResumeAll+0x138>)
   1a08c:	4798      	blx	r3
   1a08e:	0003      	movs	r3, r0
   1a090:	001a      	movs	r2, r3
   1a092:	4b35      	ldr	r3, [pc, #212]	; (1a168 <xTaskResumeAll+0x13c>)
   1a094:	881b      	ldrh	r3, [r3, #0]
   1a096:	4013      	ands	r3, r2
   1a098:	b29b      	uxth	r3, r3
   1a09a:	2b00      	cmp	r3, #0
   1a09c:	d008      	beq.n	1a0b0 <xTaskResumeAll+0x84>
   1a09e:	68fb      	ldr	r3, [r7, #12]
   1a0a0:	0018      	movs	r0, r3
   1a0a2:	4b32      	ldr	r3, [pc, #200]	; (1a16c <xTaskResumeAll+0x140>)
   1a0a4:	4798      	blx	r3
   1a0a6:	0003      	movs	r3, r0
   1a0a8:	b2db      	uxtb	r3, r3
   1a0aa:	0018      	movs	r0, r3
   1a0ac:	4b30      	ldr	r3, [pc, #192]	; (1a170 <xTaskResumeAll+0x144>)
   1a0ae:	4798      	blx	r3
   1a0b0:	68fb      	ldr	r3, [r7, #12]
   1a0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a0b4:	4b2f      	ldr	r3, [pc, #188]	; (1a174 <xTaskResumeAll+0x148>)
   1a0b6:	681b      	ldr	r3, [r3, #0]
   1a0b8:	429a      	cmp	r2, r3
   1a0ba:	d903      	bls.n	1a0c4 <xTaskResumeAll+0x98>
   1a0bc:	68fb      	ldr	r3, [r7, #12]
   1a0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a0c0:	4b2c      	ldr	r3, [pc, #176]	; (1a174 <xTaskResumeAll+0x148>)
   1a0c2:	601a      	str	r2, [r3, #0]
   1a0c4:	68fb      	ldr	r3, [r7, #12]
   1a0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a0c8:	0013      	movs	r3, r2
   1a0ca:	009b      	lsls	r3, r3, #2
   1a0cc:	189b      	adds	r3, r3, r2
   1a0ce:	009b      	lsls	r3, r3, #2
   1a0d0:	4a29      	ldr	r2, [pc, #164]	; (1a178 <xTaskResumeAll+0x14c>)
   1a0d2:	189a      	adds	r2, r3, r2
   1a0d4:	68fb      	ldr	r3, [r7, #12]
   1a0d6:	3304      	adds	r3, #4
   1a0d8:	0019      	movs	r1, r3
   1a0da:	0010      	movs	r0, r2
   1a0dc:	4b27      	ldr	r3, [pc, #156]	; (1a17c <xTaskResumeAll+0x150>)
   1a0de:	4798      	blx	r3
   1a0e0:	68fb      	ldr	r3, [r7, #12]
   1a0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a0e4:	4b26      	ldr	r3, [pc, #152]	; (1a180 <xTaskResumeAll+0x154>)
   1a0e6:	681b      	ldr	r3, [r3, #0]
   1a0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a0ea:	429a      	cmp	r2, r3
   1a0ec:	d302      	bcc.n	1a0f4 <xTaskResumeAll+0xc8>
   1a0ee:	4b25      	ldr	r3, [pc, #148]	; (1a184 <xTaskResumeAll+0x158>)
   1a0f0:	2201      	movs	r2, #1
   1a0f2:	601a      	str	r2, [r3, #0]
   1a0f4:	4b19      	ldr	r3, [pc, #100]	; (1a15c <xTaskResumeAll+0x130>)
   1a0f6:	681b      	ldr	r3, [r3, #0]
   1a0f8:	2b00      	cmp	r3, #0
   1a0fa:	d1b6      	bne.n	1a06a <xTaskResumeAll+0x3e>
   1a0fc:	68fb      	ldr	r3, [r7, #12]
   1a0fe:	2b00      	cmp	r3, #0
   1a100:	d001      	beq.n	1a106 <xTaskResumeAll+0xda>
   1a102:	4b21      	ldr	r3, [pc, #132]	; (1a188 <xTaskResumeAll+0x15c>)
   1a104:	4798      	blx	r3
   1a106:	4b21      	ldr	r3, [pc, #132]	; (1a18c <xTaskResumeAll+0x160>)
   1a108:	681b      	ldr	r3, [r3, #0]
   1a10a:	607b      	str	r3, [r7, #4]
   1a10c:	687b      	ldr	r3, [r7, #4]
   1a10e:	2b00      	cmp	r3, #0
   1a110:	d00f      	beq.n	1a132 <xTaskResumeAll+0x106>
   1a112:	4b1f      	ldr	r3, [pc, #124]	; (1a190 <xTaskResumeAll+0x164>)
   1a114:	4798      	blx	r3
   1a116:	1e03      	subs	r3, r0, #0
   1a118:	d002      	beq.n	1a120 <xTaskResumeAll+0xf4>
   1a11a:	4b1a      	ldr	r3, [pc, #104]	; (1a184 <xTaskResumeAll+0x158>)
   1a11c:	2201      	movs	r2, #1
   1a11e:	601a      	str	r2, [r3, #0]
   1a120:	687b      	ldr	r3, [r7, #4]
   1a122:	3b01      	subs	r3, #1
   1a124:	607b      	str	r3, [r7, #4]
   1a126:	687b      	ldr	r3, [r7, #4]
   1a128:	2b00      	cmp	r3, #0
   1a12a:	d1f2      	bne.n	1a112 <xTaskResumeAll+0xe6>
   1a12c:	4b17      	ldr	r3, [pc, #92]	; (1a18c <xTaskResumeAll+0x160>)
   1a12e:	2200      	movs	r2, #0
   1a130:	601a      	str	r2, [r3, #0]
   1a132:	4b14      	ldr	r3, [pc, #80]	; (1a184 <xTaskResumeAll+0x158>)
   1a134:	681b      	ldr	r3, [r3, #0]
   1a136:	2b00      	cmp	r3, #0
   1a138:	d003      	beq.n	1a142 <xTaskResumeAll+0x116>
   1a13a:	2301      	movs	r3, #1
   1a13c:	60bb      	str	r3, [r7, #8]
   1a13e:	4b15      	ldr	r3, [pc, #84]	; (1a194 <xTaskResumeAll+0x168>)
   1a140:	4798      	blx	r3
   1a142:	4b15      	ldr	r3, [pc, #84]	; (1a198 <xTaskResumeAll+0x16c>)
   1a144:	4798      	blx	r3
   1a146:	68bb      	ldr	r3, [r7, #8]
   1a148:	0018      	movs	r0, r3
   1a14a:	46bd      	mov	sp, r7
   1a14c:	b004      	add	sp, #16
   1a14e:	bd80      	pop	{r7, pc}
   1a150:	20003c34 	.word	0x20003c34
   1a154:	00017d59 	.word	0x00017d59
   1a158:	20003c0c 	.word	0x20003c0c
   1a15c:	20003bcc 	.word	0x20003bcc
   1a160:	00017bd3 	.word	0x00017bd3
   1a164:	00015d59 	.word	0x00015d59
   1a168:	200000f0 	.word	0x200000f0
   1a16c:	00015d39 	.word	0x00015d39
   1a170:	00016509 	.word	0x00016509
   1a174:	20003c14 	.word	0x20003c14
   1a178:	20003b38 	.word	0x20003b38
   1a17c:	00017b23 	.word	0x00017b23
   1a180:	20003b34 	.word	0x20003b34
   1a184:	20003c20 	.word	0x20003c20
   1a188:	0001aa19 	.word	0x0001aa19
   1a18c:	20003c1c 	.word	0x20003c1c
   1a190:	0001a1b9 	.word	0x0001a1b9
   1a194:	00017d41 	.word	0x00017d41
   1a198:	00017d7d 	.word	0x00017d7d

0001a19c <xTaskGetTickCount>:
   1a19c:	b580      	push	{r7, lr}
   1a19e:	b082      	sub	sp, #8
   1a1a0:	af00      	add	r7, sp, #0
   1a1a2:	4b04      	ldr	r3, [pc, #16]	; (1a1b4 <xTaskGetTickCount+0x18>)
   1a1a4:	681b      	ldr	r3, [r3, #0]
   1a1a6:	607b      	str	r3, [r7, #4]
   1a1a8:	687b      	ldr	r3, [r7, #4]
   1a1aa:	0018      	movs	r0, r3
   1a1ac:	46bd      	mov	sp, r7
   1a1ae:	b002      	add	sp, #8
   1a1b0:	bd80      	pop	{r7, pc}
   1a1b2:	46c0      	nop			; (mov r8, r8)
   1a1b4:	20003c10 	.word	0x20003c10

0001a1b8 <xTaskIncrementTick>:
   1a1b8:	b580      	push	{r7, lr}
   1a1ba:	b086      	sub	sp, #24
   1a1bc:	af00      	add	r7, sp, #0
   1a1be:	2300      	movs	r3, #0
   1a1c0:	617b      	str	r3, [r7, #20]
   1a1c2:	4b64      	ldr	r3, [pc, #400]	; (1a354 <xTaskIncrementTick+0x19c>)
   1a1c4:	681b      	ldr	r3, [r3, #0]
   1a1c6:	2b01      	cmp	r3, #1
   1a1c8:	d003      	beq.n	1a1d2 <xTaskIncrementTick+0x1a>
   1a1ca:	4b63      	ldr	r3, [pc, #396]	; (1a358 <xTaskIncrementTick+0x1a0>)
   1a1cc:	681b      	ldr	r3, [r3, #0]
   1a1ce:	2b00      	cmp	r3, #0
   1a1d0:	d107      	bne.n	1a1e2 <xTaskIncrementTick+0x2a>
   1a1d2:	4b62      	ldr	r3, [pc, #392]	; (1a35c <xTaskIncrementTick+0x1a4>)
   1a1d4:	681b      	ldr	r3, [r3, #0]
   1a1d6:	1c5a      	adds	r2, r3, #1
   1a1d8:	4b60      	ldr	r3, [pc, #384]	; (1a35c <xTaskIncrementTick+0x1a4>)
   1a1da:	601a      	str	r2, [r3, #0]
   1a1dc:	2000      	movs	r0, #0
   1a1de:	4b60      	ldr	r3, [pc, #384]	; (1a360 <xTaskIncrementTick+0x1a8>)
   1a1e0:	4798      	blx	r3
   1a1e2:	4b5c      	ldr	r3, [pc, #368]	; (1a354 <xTaskIncrementTick+0x19c>)
   1a1e4:	681b      	ldr	r3, [r3, #0]
   1a1e6:	2b00      	cmp	r3, #0
   1a1e8:	d106      	bne.n	1a1f8 <xTaskIncrementTick+0x40>
   1a1ea:	4b5e      	ldr	r3, [pc, #376]	; (1a364 <xTaskIncrementTick+0x1ac>)
   1a1ec:	681b      	ldr	r3, [r3, #0]
   1a1ee:	3301      	adds	r3, #1
   1a1f0:	0019      	movs	r1, r3
   1a1f2:	2003      	movs	r0, #3
   1a1f4:	4b5c      	ldr	r3, [pc, #368]	; (1a368 <xTaskIncrementTick+0x1b0>)
   1a1f6:	4798      	blx	r3
   1a1f8:	4b56      	ldr	r3, [pc, #344]	; (1a354 <xTaskIncrementTick+0x19c>)
   1a1fa:	681b      	ldr	r3, [r3, #0]
   1a1fc:	2b00      	cmp	r3, #0
   1a1fe:	d000      	beq.n	1a202 <xTaskIncrementTick+0x4a>
   1a200:	e098      	b.n	1a334 <xTaskIncrementTick+0x17c>
   1a202:	4b58      	ldr	r3, [pc, #352]	; (1a364 <xTaskIncrementTick+0x1ac>)
   1a204:	681b      	ldr	r3, [r3, #0]
   1a206:	3301      	adds	r3, #1
   1a208:	613b      	str	r3, [r7, #16]
   1a20a:	4b56      	ldr	r3, [pc, #344]	; (1a364 <xTaskIncrementTick+0x1ac>)
   1a20c:	693a      	ldr	r2, [r7, #16]
   1a20e:	601a      	str	r2, [r3, #0]
   1a210:	693b      	ldr	r3, [r7, #16]
   1a212:	2b00      	cmp	r3, #0
   1a214:	d117      	bne.n	1a246 <xTaskIncrementTick+0x8e>
   1a216:	4b55      	ldr	r3, [pc, #340]	; (1a36c <xTaskIncrementTick+0x1b4>)
   1a218:	681b      	ldr	r3, [r3, #0]
   1a21a:	681b      	ldr	r3, [r3, #0]
   1a21c:	2b00      	cmp	r3, #0
   1a21e:	d001      	beq.n	1a224 <xTaskIncrementTick+0x6c>
   1a220:	b672      	cpsid	i
   1a222:	e7fe      	b.n	1a222 <xTaskIncrementTick+0x6a>
   1a224:	4b51      	ldr	r3, [pc, #324]	; (1a36c <xTaskIncrementTick+0x1b4>)
   1a226:	681b      	ldr	r3, [r3, #0]
   1a228:	60fb      	str	r3, [r7, #12]
   1a22a:	4b51      	ldr	r3, [pc, #324]	; (1a370 <xTaskIncrementTick+0x1b8>)
   1a22c:	681a      	ldr	r2, [r3, #0]
   1a22e:	4b4f      	ldr	r3, [pc, #316]	; (1a36c <xTaskIncrementTick+0x1b4>)
   1a230:	601a      	str	r2, [r3, #0]
   1a232:	4b4f      	ldr	r3, [pc, #316]	; (1a370 <xTaskIncrementTick+0x1b8>)
   1a234:	68fa      	ldr	r2, [r7, #12]
   1a236:	601a      	str	r2, [r3, #0]
   1a238:	4b4e      	ldr	r3, [pc, #312]	; (1a374 <xTaskIncrementTick+0x1bc>)
   1a23a:	681b      	ldr	r3, [r3, #0]
   1a23c:	1c5a      	adds	r2, r3, #1
   1a23e:	4b4d      	ldr	r3, [pc, #308]	; (1a374 <xTaskIncrementTick+0x1bc>)
   1a240:	601a      	str	r2, [r3, #0]
   1a242:	4b4d      	ldr	r3, [pc, #308]	; (1a378 <xTaskIncrementTick+0x1c0>)
   1a244:	4798      	blx	r3
   1a246:	4b4d      	ldr	r3, [pc, #308]	; (1a37c <xTaskIncrementTick+0x1c4>)
   1a248:	681b      	ldr	r3, [r3, #0]
   1a24a:	693a      	ldr	r2, [r7, #16]
   1a24c:	429a      	cmp	r2, r3
   1a24e:	d363      	bcc.n	1a318 <xTaskIncrementTick+0x160>
   1a250:	4b46      	ldr	r3, [pc, #280]	; (1a36c <xTaskIncrementTick+0x1b4>)
   1a252:	681b      	ldr	r3, [r3, #0]
   1a254:	681b      	ldr	r3, [r3, #0]
   1a256:	2b00      	cmp	r3, #0
   1a258:	d101      	bne.n	1a25e <xTaskIncrementTick+0xa6>
   1a25a:	2301      	movs	r3, #1
   1a25c:	e000      	b.n	1a260 <xTaskIncrementTick+0xa8>
   1a25e:	2300      	movs	r3, #0
   1a260:	2b00      	cmp	r3, #0
   1a262:	d004      	beq.n	1a26e <xTaskIncrementTick+0xb6>
   1a264:	4b45      	ldr	r3, [pc, #276]	; (1a37c <xTaskIncrementTick+0x1c4>)
   1a266:	2201      	movs	r2, #1
   1a268:	4252      	negs	r2, r2
   1a26a:	601a      	str	r2, [r3, #0]
   1a26c:	e054      	b.n	1a318 <xTaskIncrementTick+0x160>
   1a26e:	4b3f      	ldr	r3, [pc, #252]	; (1a36c <xTaskIncrementTick+0x1b4>)
   1a270:	681b      	ldr	r3, [r3, #0]
   1a272:	68db      	ldr	r3, [r3, #12]
   1a274:	68db      	ldr	r3, [r3, #12]
   1a276:	60bb      	str	r3, [r7, #8]
   1a278:	68bb      	ldr	r3, [r7, #8]
   1a27a:	685b      	ldr	r3, [r3, #4]
   1a27c:	607b      	str	r3, [r7, #4]
   1a27e:	693a      	ldr	r2, [r7, #16]
   1a280:	687b      	ldr	r3, [r7, #4]
   1a282:	429a      	cmp	r2, r3
   1a284:	d203      	bcs.n	1a28e <xTaskIncrementTick+0xd6>
   1a286:	4b3d      	ldr	r3, [pc, #244]	; (1a37c <xTaskIncrementTick+0x1c4>)
   1a288:	687a      	ldr	r2, [r7, #4]
   1a28a:	601a      	str	r2, [r3, #0]
   1a28c:	e044      	b.n	1a318 <xTaskIncrementTick+0x160>
   1a28e:	68bb      	ldr	r3, [r7, #8]
   1a290:	3304      	adds	r3, #4
   1a292:	0018      	movs	r0, r3
   1a294:	4b3a      	ldr	r3, [pc, #232]	; (1a380 <xTaskIncrementTick+0x1c8>)
   1a296:	4798      	blx	r3
   1a298:	68bb      	ldr	r3, [r7, #8]
   1a29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a29c:	2b00      	cmp	r3, #0
   1a29e:	d004      	beq.n	1a2aa <xTaskIncrementTick+0xf2>
   1a2a0:	68bb      	ldr	r3, [r7, #8]
   1a2a2:	3318      	adds	r3, #24
   1a2a4:	0018      	movs	r0, r3
   1a2a6:	4b36      	ldr	r3, [pc, #216]	; (1a380 <xTaskIncrementTick+0x1c8>)
   1a2a8:	4798      	blx	r3
   1a2aa:	68bb      	ldr	r3, [r7, #8]
   1a2ac:	0018      	movs	r0, r3
   1a2ae:	4b35      	ldr	r3, [pc, #212]	; (1a384 <xTaskIncrementTick+0x1cc>)
   1a2b0:	4798      	blx	r3
   1a2b2:	0003      	movs	r3, r0
   1a2b4:	001a      	movs	r2, r3
   1a2b6:	4b34      	ldr	r3, [pc, #208]	; (1a388 <xTaskIncrementTick+0x1d0>)
   1a2b8:	881b      	ldrh	r3, [r3, #0]
   1a2ba:	4013      	ands	r3, r2
   1a2bc:	b29b      	uxth	r3, r3
   1a2be:	2b00      	cmp	r3, #0
   1a2c0:	d008      	beq.n	1a2d4 <xTaskIncrementTick+0x11c>
   1a2c2:	68bb      	ldr	r3, [r7, #8]
   1a2c4:	0018      	movs	r0, r3
   1a2c6:	4b31      	ldr	r3, [pc, #196]	; (1a38c <xTaskIncrementTick+0x1d4>)
   1a2c8:	4798      	blx	r3
   1a2ca:	0003      	movs	r3, r0
   1a2cc:	b2db      	uxtb	r3, r3
   1a2ce:	0018      	movs	r0, r3
   1a2d0:	4b2f      	ldr	r3, [pc, #188]	; (1a390 <xTaskIncrementTick+0x1d8>)
   1a2d2:	4798      	blx	r3
   1a2d4:	68bb      	ldr	r3, [r7, #8]
   1a2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a2d8:	4b2e      	ldr	r3, [pc, #184]	; (1a394 <xTaskIncrementTick+0x1dc>)
   1a2da:	681b      	ldr	r3, [r3, #0]
   1a2dc:	429a      	cmp	r2, r3
   1a2de:	d903      	bls.n	1a2e8 <xTaskIncrementTick+0x130>
   1a2e0:	68bb      	ldr	r3, [r7, #8]
   1a2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a2e4:	4b2b      	ldr	r3, [pc, #172]	; (1a394 <xTaskIncrementTick+0x1dc>)
   1a2e6:	601a      	str	r2, [r3, #0]
   1a2e8:	68bb      	ldr	r3, [r7, #8]
   1a2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a2ec:	0013      	movs	r3, r2
   1a2ee:	009b      	lsls	r3, r3, #2
   1a2f0:	189b      	adds	r3, r3, r2
   1a2f2:	009b      	lsls	r3, r3, #2
   1a2f4:	4a28      	ldr	r2, [pc, #160]	; (1a398 <xTaskIncrementTick+0x1e0>)
   1a2f6:	189a      	adds	r2, r3, r2
   1a2f8:	68bb      	ldr	r3, [r7, #8]
   1a2fa:	3304      	adds	r3, #4
   1a2fc:	0019      	movs	r1, r3
   1a2fe:	0010      	movs	r0, r2
   1a300:	4b26      	ldr	r3, [pc, #152]	; (1a39c <xTaskIncrementTick+0x1e4>)
   1a302:	4798      	blx	r3
   1a304:	68bb      	ldr	r3, [r7, #8]
   1a306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a308:	4b25      	ldr	r3, [pc, #148]	; (1a3a0 <xTaskIncrementTick+0x1e8>)
   1a30a:	681b      	ldr	r3, [r3, #0]
   1a30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a30e:	429a      	cmp	r2, r3
   1a310:	d39e      	bcc.n	1a250 <xTaskIncrementTick+0x98>
   1a312:	2301      	movs	r3, #1
   1a314:	617b      	str	r3, [r7, #20]
   1a316:	e79b      	b.n	1a250 <xTaskIncrementTick+0x98>
   1a318:	4b21      	ldr	r3, [pc, #132]	; (1a3a0 <xTaskIncrementTick+0x1e8>)
   1a31a:	681b      	ldr	r3, [r3, #0]
   1a31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a31e:	491e      	ldr	r1, [pc, #120]	; (1a398 <xTaskIncrementTick+0x1e0>)
   1a320:	0013      	movs	r3, r2
   1a322:	009b      	lsls	r3, r3, #2
   1a324:	189b      	adds	r3, r3, r2
   1a326:	009b      	lsls	r3, r3, #2
   1a328:	585b      	ldr	r3, [r3, r1]
   1a32a:	2b01      	cmp	r3, #1
   1a32c:	d907      	bls.n	1a33e <xTaskIncrementTick+0x186>
   1a32e:	2301      	movs	r3, #1
   1a330:	617b      	str	r3, [r7, #20]
   1a332:	e004      	b.n	1a33e <xTaskIncrementTick+0x186>
   1a334:	4b08      	ldr	r3, [pc, #32]	; (1a358 <xTaskIncrementTick+0x1a0>)
   1a336:	681b      	ldr	r3, [r3, #0]
   1a338:	1c5a      	adds	r2, r3, #1
   1a33a:	4b07      	ldr	r3, [pc, #28]	; (1a358 <xTaskIncrementTick+0x1a0>)
   1a33c:	601a      	str	r2, [r3, #0]
   1a33e:	4b19      	ldr	r3, [pc, #100]	; (1a3a4 <xTaskIncrementTick+0x1ec>)
   1a340:	681b      	ldr	r3, [r3, #0]
   1a342:	2b00      	cmp	r3, #0
   1a344:	d001      	beq.n	1a34a <xTaskIncrementTick+0x192>
   1a346:	2301      	movs	r3, #1
   1a348:	617b      	str	r3, [r7, #20]
   1a34a:	697b      	ldr	r3, [r7, #20]
   1a34c:	0018      	movs	r0, r3
   1a34e:	46bd      	mov	sp, r7
   1a350:	b006      	add	sp, #24
   1a352:	bd80      	pop	{r7, pc}
   1a354:	20003c34 	.word	0x20003c34
   1a358:	20003c1c 	.word	0x20003c1c
   1a35c:	20000b7c 	.word	0x20000b7c
   1a360:	000179ed 	.word	0x000179ed
   1a364:	20003c10 	.word	0x20003c10
   1a368:	00016a59 	.word	0x00016a59
   1a36c:	20003bc4 	.word	0x20003bc4
   1a370:	20003bc8 	.word	0x20003bc8
   1a374:	20003c24 	.word	0x20003c24
   1a378:	0001aa19 	.word	0x0001aa19
   1a37c:	20003c2c 	.word	0x20003c2c
   1a380:	00017bd3 	.word	0x00017bd3
   1a384:	00015d59 	.word	0x00015d59
   1a388:	200000f0 	.word	0x200000f0
   1a38c:	00015d39 	.word	0x00015d39
   1a390:	00016509 	.word	0x00016509
   1a394:	20003c14 	.word	0x20003c14
   1a398:	20003b38 	.word	0x20003b38
   1a39c:	00017b23 	.word	0x00017b23
   1a3a0:	20003b34 	.word	0x20003b34
   1a3a4:	20003c20 	.word	0x20003c20

0001a3a8 <vTaskSwitchContext>:
   1a3a8:	b580      	push	{r7, lr}
   1a3aa:	b082      	sub	sp, #8
   1a3ac:	af00      	add	r7, sp, #0
   1a3ae:	4b3a      	ldr	r3, [pc, #232]	; (1a498 <vTaskSwitchContext+0xf0>)
   1a3b0:	681b      	ldr	r3, [r3, #0]
   1a3b2:	2b00      	cmp	r3, #0
   1a3b4:	d003      	beq.n	1a3be <vTaskSwitchContext+0x16>
   1a3b6:	4b39      	ldr	r3, [pc, #228]	; (1a49c <vTaskSwitchContext+0xf4>)
   1a3b8:	2201      	movs	r2, #1
   1a3ba:	601a      	str	r2, [r3, #0]
   1a3bc:	e067      	b.n	1a48e <vTaskSwitchContext+0xe6>
   1a3be:	4b37      	ldr	r3, [pc, #220]	; (1a49c <vTaskSwitchContext+0xf4>)
   1a3c0:	2200      	movs	r2, #0
   1a3c2:	601a      	str	r2, [r3, #0]
   1a3c4:	4b36      	ldr	r3, [pc, #216]	; (1a4a0 <vTaskSwitchContext+0xf8>)
   1a3c6:	681b      	ldr	r3, [r3, #0]
   1a3c8:	681a      	ldr	r2, [r3, #0]
   1a3ca:	4b35      	ldr	r3, [pc, #212]	; (1a4a0 <vTaskSwitchContext+0xf8>)
   1a3cc:	681b      	ldr	r3, [r3, #0]
   1a3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a3d0:	429a      	cmp	r2, r3
   1a3d2:	d808      	bhi.n	1a3e6 <vTaskSwitchContext+0x3e>
   1a3d4:	4b32      	ldr	r3, [pc, #200]	; (1a4a0 <vTaskSwitchContext+0xf8>)
   1a3d6:	681a      	ldr	r2, [r3, #0]
   1a3d8:	4b31      	ldr	r3, [pc, #196]	; (1a4a0 <vTaskSwitchContext+0xf8>)
   1a3da:	681b      	ldr	r3, [r3, #0]
   1a3dc:	3334      	adds	r3, #52	; 0x34
   1a3de:	0019      	movs	r1, r3
   1a3e0:	0010      	movs	r0, r2
   1a3e2:	4b30      	ldr	r3, [pc, #192]	; (1a4a4 <vTaskSwitchContext+0xfc>)
   1a3e4:	4798      	blx	r3
   1a3e6:	4b30      	ldr	r3, [pc, #192]	; (1a4a8 <vTaskSwitchContext+0x100>)
   1a3e8:	681b      	ldr	r3, [r3, #0]
   1a3ea:	607b      	str	r3, [r7, #4]
   1a3ec:	e007      	b.n	1a3fe <vTaskSwitchContext+0x56>
   1a3ee:	687b      	ldr	r3, [r7, #4]
   1a3f0:	2b00      	cmp	r3, #0
   1a3f2:	d101      	bne.n	1a3f8 <vTaskSwitchContext+0x50>
   1a3f4:	b672      	cpsid	i
   1a3f6:	e7fe      	b.n	1a3f6 <vTaskSwitchContext+0x4e>
   1a3f8:	687b      	ldr	r3, [r7, #4]
   1a3fa:	3b01      	subs	r3, #1
   1a3fc:	607b      	str	r3, [r7, #4]
   1a3fe:	492b      	ldr	r1, [pc, #172]	; (1a4ac <vTaskSwitchContext+0x104>)
   1a400:	687a      	ldr	r2, [r7, #4]
   1a402:	0013      	movs	r3, r2
   1a404:	009b      	lsls	r3, r3, #2
   1a406:	189b      	adds	r3, r3, r2
   1a408:	009b      	lsls	r3, r3, #2
   1a40a:	585b      	ldr	r3, [r3, r1]
   1a40c:	2b00      	cmp	r3, #0
   1a40e:	d0ee      	beq.n	1a3ee <vTaskSwitchContext+0x46>
   1a410:	687a      	ldr	r2, [r7, #4]
   1a412:	0013      	movs	r3, r2
   1a414:	009b      	lsls	r3, r3, #2
   1a416:	189b      	adds	r3, r3, r2
   1a418:	009b      	lsls	r3, r3, #2
   1a41a:	4a24      	ldr	r2, [pc, #144]	; (1a4ac <vTaskSwitchContext+0x104>)
   1a41c:	189b      	adds	r3, r3, r2
   1a41e:	603b      	str	r3, [r7, #0]
   1a420:	683b      	ldr	r3, [r7, #0]
   1a422:	685b      	ldr	r3, [r3, #4]
   1a424:	685a      	ldr	r2, [r3, #4]
   1a426:	683b      	ldr	r3, [r7, #0]
   1a428:	605a      	str	r2, [r3, #4]
   1a42a:	683b      	ldr	r3, [r7, #0]
   1a42c:	685a      	ldr	r2, [r3, #4]
   1a42e:	683b      	ldr	r3, [r7, #0]
   1a430:	3308      	adds	r3, #8
   1a432:	429a      	cmp	r2, r3
   1a434:	d104      	bne.n	1a440 <vTaskSwitchContext+0x98>
   1a436:	683b      	ldr	r3, [r7, #0]
   1a438:	685b      	ldr	r3, [r3, #4]
   1a43a:	685a      	ldr	r2, [r3, #4]
   1a43c:	683b      	ldr	r3, [r7, #0]
   1a43e:	605a      	str	r2, [r3, #4]
   1a440:	683b      	ldr	r3, [r7, #0]
   1a442:	685b      	ldr	r3, [r3, #4]
   1a444:	68da      	ldr	r2, [r3, #12]
   1a446:	4b16      	ldr	r3, [pc, #88]	; (1a4a0 <vTaskSwitchContext+0xf8>)
   1a448:	601a      	str	r2, [r3, #0]
   1a44a:	4b17      	ldr	r3, [pc, #92]	; (1a4a8 <vTaskSwitchContext+0x100>)
   1a44c:	687a      	ldr	r2, [r7, #4]
   1a44e:	601a      	str	r2, [r3, #0]
   1a450:	4b17      	ldr	r3, [pc, #92]	; (1a4b0 <vTaskSwitchContext+0x108>)
   1a452:	2201      	movs	r2, #1
   1a454:	601a      	str	r2, [r3, #0]
   1a456:	4b17      	ldr	r3, [pc, #92]	; (1a4b4 <vTaskSwitchContext+0x10c>)
   1a458:	4798      	blx	r3
   1a45a:	0003      	movs	r3, r0
   1a45c:	0018      	movs	r0, r3
   1a45e:	4b16      	ldr	r3, [pc, #88]	; (1a4b8 <vTaskSwitchContext+0x110>)
   1a460:	4798      	blx	r3
   1a462:	0003      	movs	r3, r0
   1a464:	001a      	movs	r2, r3
   1a466:	4b15      	ldr	r3, [pc, #84]	; (1a4bc <vTaskSwitchContext+0x114>)
   1a468:	881b      	ldrh	r3, [r3, #0]
   1a46a:	4013      	ands	r3, r2
   1a46c:	b29b      	uxth	r3, r3
   1a46e:	2b00      	cmp	r3, #0
   1a470:	d00a      	beq.n	1a488 <vTaskSwitchContext+0xe0>
   1a472:	4b10      	ldr	r3, [pc, #64]	; (1a4b4 <vTaskSwitchContext+0x10c>)
   1a474:	4798      	blx	r3
   1a476:	0003      	movs	r3, r0
   1a478:	0018      	movs	r0, r3
   1a47a:	4b11      	ldr	r3, [pc, #68]	; (1a4c0 <vTaskSwitchContext+0x118>)
   1a47c:	4798      	blx	r3
   1a47e:	0003      	movs	r3, r0
   1a480:	b2db      	uxtb	r3, r3
   1a482:	0018      	movs	r0, r3
   1a484:	4b0f      	ldr	r3, [pc, #60]	; (1a4c4 <vTaskSwitchContext+0x11c>)
   1a486:	4798      	blx	r3
   1a488:	4b09      	ldr	r3, [pc, #36]	; (1a4b0 <vTaskSwitchContext+0x108>)
   1a48a:	2202      	movs	r2, #2
   1a48c:	601a      	str	r2, [r3, #0]
   1a48e:	46c0      	nop			; (mov r8, r8)
   1a490:	46bd      	mov	sp, r7
   1a492:	b002      	add	sp, #8
   1a494:	bd80      	pop	{r7, pc}
   1a496:	46c0      	nop			; (mov r8, r8)
   1a498:	20003c34 	.word	0x20003c34
   1a49c:	20003c20 	.word	0x20003c20
   1a4a0:	20003b34 	.word	0x20003b34
   1a4a4:	000304d1 	.word	0x000304d1
   1a4a8:	20003c14 	.word	0x20003c14
   1a4ac:	20003b38 	.word	0x20003b38
   1a4b0:	20000b88 	.word	0x20000b88
   1a4b4:	00015ff5 	.word	0x00015ff5
   1a4b8:	00015d59 	.word	0x00015d59
   1a4bc:	200000f0 	.word	0x200000f0
   1a4c0:	00015d39 	.word	0x00015d39
   1a4c4:	00016b55 	.word	0x00016b55

0001a4c8 <vTaskPlaceOnEventList>:
   1a4c8:	b580      	push	{r7, lr}
   1a4ca:	b082      	sub	sp, #8
   1a4cc:	af00      	add	r7, sp, #0
   1a4ce:	6078      	str	r0, [r7, #4]
   1a4d0:	6039      	str	r1, [r7, #0]
   1a4d2:	687b      	ldr	r3, [r7, #4]
   1a4d4:	2b00      	cmp	r3, #0
   1a4d6:	d101      	bne.n	1a4dc <vTaskPlaceOnEventList+0x14>
   1a4d8:	b672      	cpsid	i
   1a4da:	e7fe      	b.n	1a4da <vTaskPlaceOnEventList+0x12>
   1a4dc:	4b08      	ldr	r3, [pc, #32]	; (1a500 <vTaskPlaceOnEventList+0x38>)
   1a4de:	681b      	ldr	r3, [r3, #0]
   1a4e0:	3318      	adds	r3, #24
   1a4e2:	001a      	movs	r2, r3
   1a4e4:	687b      	ldr	r3, [r7, #4]
   1a4e6:	0011      	movs	r1, r2
   1a4e8:	0018      	movs	r0, r3
   1a4ea:	4b06      	ldr	r3, [pc, #24]	; (1a504 <vTaskPlaceOnEventList+0x3c>)
   1a4ec:	4798      	blx	r3
   1a4ee:	683b      	ldr	r3, [r7, #0]
   1a4f0:	2101      	movs	r1, #1
   1a4f2:	0018      	movs	r0, r3
   1a4f4:	4b04      	ldr	r3, [pc, #16]	; (1a508 <vTaskPlaceOnEventList+0x40>)
   1a4f6:	4798      	blx	r3
   1a4f8:	46c0      	nop			; (mov r8, r8)
   1a4fa:	46bd      	mov	sp, r7
   1a4fc:	b002      	add	sp, #8
   1a4fe:	bd80      	pop	{r7, pc}
   1a500:	20003b34 	.word	0x20003b34
   1a504:	00017b67 	.word	0x00017b67
   1a508:	0001af6d 	.word	0x0001af6d

0001a50c <vTaskPlaceOnEventListRestricted>:
   1a50c:	b580      	push	{r7, lr}
   1a50e:	b084      	sub	sp, #16
   1a510:	af00      	add	r7, sp, #0
   1a512:	60f8      	str	r0, [r7, #12]
   1a514:	60b9      	str	r1, [r7, #8]
   1a516:	607a      	str	r2, [r7, #4]
   1a518:	68fb      	ldr	r3, [r7, #12]
   1a51a:	2b00      	cmp	r3, #0
   1a51c:	d101      	bne.n	1a522 <vTaskPlaceOnEventListRestricted+0x16>
   1a51e:	b672      	cpsid	i
   1a520:	e7fe      	b.n	1a520 <vTaskPlaceOnEventListRestricted+0x14>
   1a522:	4b28      	ldr	r3, [pc, #160]	; (1a5c4 <vTaskPlaceOnEventListRestricted+0xb8>)
   1a524:	681b      	ldr	r3, [r3, #0]
   1a526:	3318      	adds	r3, #24
   1a528:	001a      	movs	r2, r3
   1a52a:	68fb      	ldr	r3, [r7, #12]
   1a52c:	0011      	movs	r1, r2
   1a52e:	0018      	movs	r0, r3
   1a530:	4b25      	ldr	r3, [pc, #148]	; (1a5c8 <vTaskPlaceOnEventListRestricted+0xbc>)
   1a532:	4798      	blx	r3
   1a534:	687b      	ldr	r3, [r7, #4]
   1a536:	2b00      	cmp	r3, #0
   1a538:	d002      	beq.n	1a540 <vTaskPlaceOnEventListRestricted+0x34>
   1a53a:	2301      	movs	r3, #1
   1a53c:	425b      	negs	r3, r3
   1a53e:	60bb      	str	r3, [r7, #8]
   1a540:	4b20      	ldr	r3, [pc, #128]	; (1a5c4 <vTaskPlaceOnEventListRestricted+0xb8>)
   1a542:	681b      	ldr	r3, [r3, #0]
   1a544:	0018      	movs	r0, r3
   1a546:	4b21      	ldr	r3, [pc, #132]	; (1a5cc <vTaskPlaceOnEventListRestricted+0xc0>)
   1a548:	4798      	blx	r3
   1a54a:	0003      	movs	r3, r0
   1a54c:	001a      	movs	r2, r3
   1a54e:	4b20      	ldr	r3, [pc, #128]	; (1a5d0 <vTaskPlaceOnEventListRestricted+0xc4>)
   1a550:	881b      	ldrh	r3, [r3, #0]
   1a552:	4013      	ands	r3, r2
   1a554:	b29b      	uxth	r3, r3
   1a556:	2b00      	cmp	r3, #0
   1a558:	d011      	beq.n	1a57e <vTaskPlaceOnEventListRestricted+0x72>
   1a55a:	4b1e      	ldr	r3, [pc, #120]	; (1a5d4 <vTaskPlaceOnEventListRestricted+0xc8>)
   1a55c:	681a      	ldr	r2, [r3, #0]
   1a55e:	68bb      	ldr	r3, [r7, #8]
   1a560:	18d3      	adds	r3, r2, r3
   1a562:	0019      	movs	r1, r3
   1a564:	2088      	movs	r0, #136	; 0x88
   1a566:	4b1c      	ldr	r3, [pc, #112]	; (1a5d8 <vTaskPlaceOnEventListRestricted+0xcc>)
   1a568:	4798      	blx	r3
   1a56a:	4b16      	ldr	r3, [pc, #88]	; (1a5c4 <vTaskPlaceOnEventListRestricted+0xb8>)
   1a56c:	681b      	ldr	r3, [r3, #0]
   1a56e:	0018      	movs	r0, r3
   1a570:	4b1a      	ldr	r3, [pc, #104]	; (1a5dc <vTaskPlaceOnEventListRestricted+0xd0>)
   1a572:	4798      	blx	r3
   1a574:	0003      	movs	r3, r0
   1a576:	b2db      	uxtb	r3, r3
   1a578:	0018      	movs	r0, r3
   1a57a:	4b19      	ldr	r3, [pc, #100]	; (1a5e0 <vTaskPlaceOnEventListRestricted+0xd4>)
   1a57c:	4798      	blx	r3
   1a57e:	4b19      	ldr	r3, [pc, #100]	; (1a5e4 <vTaskPlaceOnEventListRestricted+0xd8>)
   1a580:	4798      	blx	r3
   1a582:	0003      	movs	r3, r0
   1a584:	0018      	movs	r0, r3
   1a586:	4b11      	ldr	r3, [pc, #68]	; (1a5cc <vTaskPlaceOnEventListRestricted+0xc0>)
   1a588:	4798      	blx	r3
   1a58a:	0003      	movs	r3, r0
   1a58c:	001a      	movs	r2, r3
   1a58e:	4b10      	ldr	r3, [pc, #64]	; (1a5d0 <vTaskPlaceOnEventListRestricted+0xc4>)
   1a590:	881b      	ldrh	r3, [r3, #0]
   1a592:	4013      	ands	r3, r2
   1a594:	b29b      	uxth	r3, r3
   1a596:	2b00      	cmp	r3, #0
   1a598:	d00a      	beq.n	1a5b0 <vTaskPlaceOnEventListRestricted+0xa4>
   1a59a:	4b12      	ldr	r3, [pc, #72]	; (1a5e4 <vTaskPlaceOnEventListRestricted+0xd8>)
   1a59c:	4798      	blx	r3
   1a59e:	0003      	movs	r3, r0
   1a5a0:	0018      	movs	r0, r3
   1a5a2:	4b0e      	ldr	r3, [pc, #56]	; (1a5dc <vTaskPlaceOnEventListRestricted+0xd0>)
   1a5a4:	4798      	blx	r3
   1a5a6:	0003      	movs	r3, r0
   1a5a8:	b2db      	uxtb	r3, r3
   1a5aa:	0018      	movs	r0, r3
   1a5ac:	4b0c      	ldr	r3, [pc, #48]	; (1a5e0 <vTaskPlaceOnEventListRestricted+0xd4>)
   1a5ae:	4798      	blx	r3
   1a5b0:	687a      	ldr	r2, [r7, #4]
   1a5b2:	68bb      	ldr	r3, [r7, #8]
   1a5b4:	0011      	movs	r1, r2
   1a5b6:	0018      	movs	r0, r3
   1a5b8:	4b0b      	ldr	r3, [pc, #44]	; (1a5e8 <vTaskPlaceOnEventListRestricted+0xdc>)
   1a5ba:	4798      	blx	r3
   1a5bc:	46c0      	nop			; (mov r8, r8)
   1a5be:	46bd      	mov	sp, r7
   1a5c0:	b004      	add	sp, #16
   1a5c2:	bd80      	pop	{r7, pc}
   1a5c4:	20003b34 	.word	0x20003b34
   1a5c8:	00017b23 	.word	0x00017b23
   1a5cc:	00015d59 	.word	0x00015d59
   1a5d0:	200000f0 	.word	0x200000f0
   1a5d4:	20003c10 	.word	0x20003c10
   1a5d8:	00016a59 	.word	0x00016a59
   1a5dc:	00015d39 	.word	0x00015d39
   1a5e0:	00016ee9 	.word	0x00016ee9
   1a5e4:	00015ff5 	.word	0x00015ff5
   1a5e8:	0001af6d 	.word	0x0001af6d

0001a5ec <xTaskRemoveFromEventList>:
   1a5ec:	b580      	push	{r7, lr}
   1a5ee:	b084      	sub	sp, #16
   1a5f0:	af00      	add	r7, sp, #0
   1a5f2:	6078      	str	r0, [r7, #4]
   1a5f4:	687b      	ldr	r3, [r7, #4]
   1a5f6:	68db      	ldr	r3, [r3, #12]
   1a5f8:	68db      	ldr	r3, [r3, #12]
   1a5fa:	60bb      	str	r3, [r7, #8]
   1a5fc:	68bb      	ldr	r3, [r7, #8]
   1a5fe:	2b00      	cmp	r3, #0
   1a600:	d101      	bne.n	1a606 <xTaskRemoveFromEventList+0x1a>
   1a602:	b672      	cpsid	i
   1a604:	e7fe      	b.n	1a604 <xTaskRemoveFromEventList+0x18>
   1a606:	68bb      	ldr	r3, [r7, #8]
   1a608:	3318      	adds	r3, #24
   1a60a:	0018      	movs	r0, r3
   1a60c:	4b2a      	ldr	r3, [pc, #168]	; (1a6b8 <xTaskRemoveFromEventList+0xcc>)
   1a60e:	4798      	blx	r3
   1a610:	4b2a      	ldr	r3, [pc, #168]	; (1a6bc <xTaskRemoveFromEventList+0xd0>)
   1a612:	681b      	ldr	r3, [r3, #0]
   1a614:	2b00      	cmp	r3, #0
   1a616:	d132      	bne.n	1a67e <xTaskRemoveFromEventList+0x92>
   1a618:	68bb      	ldr	r3, [r7, #8]
   1a61a:	3304      	adds	r3, #4
   1a61c:	0018      	movs	r0, r3
   1a61e:	4b26      	ldr	r3, [pc, #152]	; (1a6b8 <xTaskRemoveFromEventList+0xcc>)
   1a620:	4798      	blx	r3
   1a622:	68bb      	ldr	r3, [r7, #8]
   1a624:	0018      	movs	r0, r3
   1a626:	4b26      	ldr	r3, [pc, #152]	; (1a6c0 <xTaskRemoveFromEventList+0xd4>)
   1a628:	4798      	blx	r3
   1a62a:	0003      	movs	r3, r0
   1a62c:	001a      	movs	r2, r3
   1a62e:	4b25      	ldr	r3, [pc, #148]	; (1a6c4 <xTaskRemoveFromEventList+0xd8>)
   1a630:	881b      	ldrh	r3, [r3, #0]
   1a632:	4013      	ands	r3, r2
   1a634:	b29b      	uxth	r3, r3
   1a636:	2b00      	cmp	r3, #0
   1a638:	d008      	beq.n	1a64c <xTaskRemoveFromEventList+0x60>
   1a63a:	68bb      	ldr	r3, [r7, #8]
   1a63c:	0018      	movs	r0, r3
   1a63e:	4b22      	ldr	r3, [pc, #136]	; (1a6c8 <xTaskRemoveFromEventList+0xdc>)
   1a640:	4798      	blx	r3
   1a642:	0003      	movs	r3, r0
   1a644:	b2db      	uxtb	r3, r3
   1a646:	0018      	movs	r0, r3
   1a648:	4b20      	ldr	r3, [pc, #128]	; (1a6cc <xTaskRemoveFromEventList+0xe0>)
   1a64a:	4798      	blx	r3
   1a64c:	68bb      	ldr	r3, [r7, #8]
   1a64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a650:	4b1f      	ldr	r3, [pc, #124]	; (1a6d0 <xTaskRemoveFromEventList+0xe4>)
   1a652:	681b      	ldr	r3, [r3, #0]
   1a654:	429a      	cmp	r2, r3
   1a656:	d903      	bls.n	1a660 <xTaskRemoveFromEventList+0x74>
   1a658:	68bb      	ldr	r3, [r7, #8]
   1a65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a65c:	4b1c      	ldr	r3, [pc, #112]	; (1a6d0 <xTaskRemoveFromEventList+0xe4>)
   1a65e:	601a      	str	r2, [r3, #0]
   1a660:	68bb      	ldr	r3, [r7, #8]
   1a662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a664:	0013      	movs	r3, r2
   1a666:	009b      	lsls	r3, r3, #2
   1a668:	189b      	adds	r3, r3, r2
   1a66a:	009b      	lsls	r3, r3, #2
   1a66c:	4a19      	ldr	r2, [pc, #100]	; (1a6d4 <xTaskRemoveFromEventList+0xe8>)
   1a66e:	189a      	adds	r2, r3, r2
   1a670:	68bb      	ldr	r3, [r7, #8]
   1a672:	3304      	adds	r3, #4
   1a674:	0019      	movs	r1, r3
   1a676:	0010      	movs	r0, r2
   1a678:	4b17      	ldr	r3, [pc, #92]	; (1a6d8 <xTaskRemoveFromEventList+0xec>)
   1a67a:	4798      	blx	r3
   1a67c:	e007      	b.n	1a68e <xTaskRemoveFromEventList+0xa2>
   1a67e:	68bb      	ldr	r3, [r7, #8]
   1a680:	3318      	adds	r3, #24
   1a682:	001a      	movs	r2, r3
   1a684:	4b15      	ldr	r3, [pc, #84]	; (1a6dc <xTaskRemoveFromEventList+0xf0>)
   1a686:	0011      	movs	r1, r2
   1a688:	0018      	movs	r0, r3
   1a68a:	4b13      	ldr	r3, [pc, #76]	; (1a6d8 <xTaskRemoveFromEventList+0xec>)
   1a68c:	4798      	blx	r3
   1a68e:	68bb      	ldr	r3, [r7, #8]
   1a690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a692:	4b13      	ldr	r3, [pc, #76]	; (1a6e0 <xTaskRemoveFromEventList+0xf4>)
   1a694:	681b      	ldr	r3, [r3, #0]
   1a696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a698:	429a      	cmp	r2, r3
   1a69a:	d905      	bls.n	1a6a8 <xTaskRemoveFromEventList+0xbc>
   1a69c:	2301      	movs	r3, #1
   1a69e:	60fb      	str	r3, [r7, #12]
   1a6a0:	4b10      	ldr	r3, [pc, #64]	; (1a6e4 <xTaskRemoveFromEventList+0xf8>)
   1a6a2:	2201      	movs	r2, #1
   1a6a4:	601a      	str	r2, [r3, #0]
   1a6a6:	e001      	b.n	1a6ac <xTaskRemoveFromEventList+0xc0>
   1a6a8:	2300      	movs	r3, #0
   1a6aa:	60fb      	str	r3, [r7, #12]
   1a6ac:	68fb      	ldr	r3, [r7, #12]
   1a6ae:	0018      	movs	r0, r3
   1a6b0:	46bd      	mov	sp, r7
   1a6b2:	b004      	add	sp, #16
   1a6b4:	bd80      	pop	{r7, pc}
   1a6b6:	46c0      	nop			; (mov r8, r8)
   1a6b8:	00017bd3 	.word	0x00017bd3
   1a6bc:	20003c34 	.word	0x20003c34
   1a6c0:	00015d59 	.word	0x00015d59
   1a6c4:	200000f0 	.word	0x200000f0
   1a6c8:	00015d39 	.word	0x00015d39
   1a6cc:	00016509 	.word	0x00016509
   1a6d0:	20003c14 	.word	0x20003c14
   1a6d4:	20003b38 	.word	0x20003b38
   1a6d8:	00017b23 	.word	0x00017b23
   1a6dc:	20003bcc 	.word	0x20003bcc
   1a6e0:	20003b34 	.word	0x20003b34
   1a6e4:	20003c20 	.word	0x20003c20

0001a6e8 <vTaskSetTimeOutState>:
   1a6e8:	b580      	push	{r7, lr}
   1a6ea:	b082      	sub	sp, #8
   1a6ec:	af00      	add	r7, sp, #0
   1a6ee:	6078      	str	r0, [r7, #4]
   1a6f0:	687b      	ldr	r3, [r7, #4]
   1a6f2:	2b00      	cmp	r3, #0
   1a6f4:	d101      	bne.n	1a6fa <vTaskSetTimeOutState+0x12>
   1a6f6:	b672      	cpsid	i
   1a6f8:	e7fe      	b.n	1a6f8 <vTaskSetTimeOutState+0x10>
   1a6fa:	4b08      	ldr	r3, [pc, #32]	; (1a71c <vTaskSetTimeOutState+0x34>)
   1a6fc:	4798      	blx	r3
   1a6fe:	4b08      	ldr	r3, [pc, #32]	; (1a720 <vTaskSetTimeOutState+0x38>)
   1a700:	681a      	ldr	r2, [r3, #0]
   1a702:	687b      	ldr	r3, [r7, #4]
   1a704:	601a      	str	r2, [r3, #0]
   1a706:	4b07      	ldr	r3, [pc, #28]	; (1a724 <vTaskSetTimeOutState+0x3c>)
   1a708:	681a      	ldr	r2, [r3, #0]
   1a70a:	687b      	ldr	r3, [r7, #4]
   1a70c:	605a      	str	r2, [r3, #4]
   1a70e:	4b06      	ldr	r3, [pc, #24]	; (1a728 <vTaskSetTimeOutState+0x40>)
   1a710:	4798      	blx	r3
   1a712:	46c0      	nop			; (mov r8, r8)
   1a714:	46bd      	mov	sp, r7
   1a716:	b002      	add	sp, #8
   1a718:	bd80      	pop	{r7, pc}
   1a71a:	46c0      	nop			; (mov r8, r8)
   1a71c:	00017d59 	.word	0x00017d59
   1a720:	20003c24 	.word	0x20003c24
   1a724:	20003c10 	.word	0x20003c10
   1a728:	00017d7d 	.word	0x00017d7d

0001a72c <vTaskInternalSetTimeOutState>:
   1a72c:	b580      	push	{r7, lr}
   1a72e:	b082      	sub	sp, #8
   1a730:	af00      	add	r7, sp, #0
   1a732:	6078      	str	r0, [r7, #4]
   1a734:	4b05      	ldr	r3, [pc, #20]	; (1a74c <vTaskInternalSetTimeOutState+0x20>)
   1a736:	681a      	ldr	r2, [r3, #0]
   1a738:	687b      	ldr	r3, [r7, #4]
   1a73a:	601a      	str	r2, [r3, #0]
   1a73c:	4b04      	ldr	r3, [pc, #16]	; (1a750 <vTaskInternalSetTimeOutState+0x24>)
   1a73e:	681a      	ldr	r2, [r3, #0]
   1a740:	687b      	ldr	r3, [r7, #4]
   1a742:	605a      	str	r2, [r3, #4]
   1a744:	46c0      	nop			; (mov r8, r8)
   1a746:	46bd      	mov	sp, r7
   1a748:	b002      	add	sp, #8
   1a74a:	bd80      	pop	{r7, pc}
   1a74c:	20003c24 	.word	0x20003c24
   1a750:	20003c10 	.word	0x20003c10

0001a754 <xTaskCheckForTimeOut>:
   1a754:	b580      	push	{r7, lr}
   1a756:	b086      	sub	sp, #24
   1a758:	af00      	add	r7, sp, #0
   1a75a:	6078      	str	r0, [r7, #4]
   1a75c:	6039      	str	r1, [r7, #0]
   1a75e:	687b      	ldr	r3, [r7, #4]
   1a760:	2b00      	cmp	r3, #0
   1a762:	d101      	bne.n	1a768 <xTaskCheckForTimeOut+0x14>
   1a764:	b672      	cpsid	i
   1a766:	e7fe      	b.n	1a766 <xTaskCheckForTimeOut+0x12>
   1a768:	683b      	ldr	r3, [r7, #0]
   1a76a:	2b00      	cmp	r3, #0
   1a76c:	d101      	bne.n	1a772 <xTaskCheckForTimeOut+0x1e>
   1a76e:	b672      	cpsid	i
   1a770:	e7fe      	b.n	1a770 <xTaskCheckForTimeOut+0x1c>
   1a772:	4b1e      	ldr	r3, [pc, #120]	; (1a7ec <xTaskCheckForTimeOut+0x98>)
   1a774:	4798      	blx	r3
   1a776:	4b1e      	ldr	r3, [pc, #120]	; (1a7f0 <xTaskCheckForTimeOut+0x9c>)
   1a778:	681b      	ldr	r3, [r3, #0]
   1a77a:	613b      	str	r3, [r7, #16]
   1a77c:	687b      	ldr	r3, [r7, #4]
   1a77e:	685b      	ldr	r3, [r3, #4]
   1a780:	693a      	ldr	r2, [r7, #16]
   1a782:	1ad3      	subs	r3, r2, r3
   1a784:	60fb      	str	r3, [r7, #12]
   1a786:	683b      	ldr	r3, [r7, #0]
   1a788:	681b      	ldr	r3, [r3, #0]
   1a78a:	3301      	adds	r3, #1
   1a78c:	d102      	bne.n	1a794 <xTaskCheckForTimeOut+0x40>
   1a78e:	2300      	movs	r3, #0
   1a790:	617b      	str	r3, [r7, #20]
   1a792:	e024      	b.n	1a7de <xTaskCheckForTimeOut+0x8a>
   1a794:	687b      	ldr	r3, [r7, #4]
   1a796:	681a      	ldr	r2, [r3, #0]
   1a798:	4b16      	ldr	r3, [pc, #88]	; (1a7f4 <xTaskCheckForTimeOut+0xa0>)
   1a79a:	681b      	ldr	r3, [r3, #0]
   1a79c:	429a      	cmp	r2, r3
   1a79e:	d007      	beq.n	1a7b0 <xTaskCheckForTimeOut+0x5c>
   1a7a0:	687b      	ldr	r3, [r7, #4]
   1a7a2:	685a      	ldr	r2, [r3, #4]
   1a7a4:	693b      	ldr	r3, [r7, #16]
   1a7a6:	429a      	cmp	r2, r3
   1a7a8:	d802      	bhi.n	1a7b0 <xTaskCheckForTimeOut+0x5c>
   1a7aa:	2301      	movs	r3, #1
   1a7ac:	617b      	str	r3, [r7, #20]
   1a7ae:	e016      	b.n	1a7de <xTaskCheckForTimeOut+0x8a>
   1a7b0:	683b      	ldr	r3, [r7, #0]
   1a7b2:	681a      	ldr	r2, [r3, #0]
   1a7b4:	68fb      	ldr	r3, [r7, #12]
   1a7b6:	429a      	cmp	r2, r3
   1a7b8:	d90c      	bls.n	1a7d4 <xTaskCheckForTimeOut+0x80>
   1a7ba:	683b      	ldr	r3, [r7, #0]
   1a7bc:	681a      	ldr	r2, [r3, #0]
   1a7be:	68fb      	ldr	r3, [r7, #12]
   1a7c0:	1ad2      	subs	r2, r2, r3
   1a7c2:	683b      	ldr	r3, [r7, #0]
   1a7c4:	601a      	str	r2, [r3, #0]
   1a7c6:	687b      	ldr	r3, [r7, #4]
   1a7c8:	0018      	movs	r0, r3
   1a7ca:	4b0b      	ldr	r3, [pc, #44]	; (1a7f8 <xTaskCheckForTimeOut+0xa4>)
   1a7cc:	4798      	blx	r3
   1a7ce:	2300      	movs	r3, #0
   1a7d0:	617b      	str	r3, [r7, #20]
   1a7d2:	e004      	b.n	1a7de <xTaskCheckForTimeOut+0x8a>
   1a7d4:	683b      	ldr	r3, [r7, #0]
   1a7d6:	2200      	movs	r2, #0
   1a7d8:	601a      	str	r2, [r3, #0]
   1a7da:	2301      	movs	r3, #1
   1a7dc:	617b      	str	r3, [r7, #20]
   1a7de:	4b07      	ldr	r3, [pc, #28]	; (1a7fc <xTaskCheckForTimeOut+0xa8>)
   1a7e0:	4798      	blx	r3
   1a7e2:	697b      	ldr	r3, [r7, #20]
   1a7e4:	0018      	movs	r0, r3
   1a7e6:	46bd      	mov	sp, r7
   1a7e8:	b006      	add	sp, #24
   1a7ea:	bd80      	pop	{r7, pc}
   1a7ec:	00017d59 	.word	0x00017d59
   1a7f0:	20003c10 	.word	0x20003c10
   1a7f4:	20003c24 	.word	0x20003c24
   1a7f8:	0001a72d 	.word	0x0001a72d
   1a7fc:	00017d7d 	.word	0x00017d7d

0001a800 <vTaskMissedYield>:
   1a800:	b580      	push	{r7, lr}
   1a802:	af00      	add	r7, sp, #0
   1a804:	4b02      	ldr	r3, [pc, #8]	; (1a810 <vTaskMissedYield+0x10>)
   1a806:	2201      	movs	r2, #1
   1a808:	601a      	str	r2, [r3, #0]
   1a80a:	46c0      	nop			; (mov r8, r8)
   1a80c:	46bd      	mov	sp, r7
   1a80e:	bd80      	pop	{r7, pc}
   1a810:	20003c20 	.word	0x20003c20

0001a814 <uxTaskGetTaskNumber>:
   1a814:	b580      	push	{r7, lr}
   1a816:	b084      	sub	sp, #16
   1a818:	af00      	add	r7, sp, #0
   1a81a:	6078      	str	r0, [r7, #4]
   1a81c:	687b      	ldr	r3, [r7, #4]
   1a81e:	2b00      	cmp	r3, #0
   1a820:	d005      	beq.n	1a82e <uxTaskGetTaskNumber+0x1a>
   1a822:	687b      	ldr	r3, [r7, #4]
   1a824:	60bb      	str	r3, [r7, #8]
   1a826:	68bb      	ldr	r3, [r7, #8]
   1a828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a82a:	60fb      	str	r3, [r7, #12]
   1a82c:	e001      	b.n	1a832 <uxTaskGetTaskNumber+0x1e>
   1a82e:	2300      	movs	r3, #0
   1a830:	60fb      	str	r3, [r7, #12]
   1a832:	68fb      	ldr	r3, [r7, #12]
   1a834:	0018      	movs	r0, r3
   1a836:	46bd      	mov	sp, r7
   1a838:	b004      	add	sp, #16
   1a83a:	bd80      	pop	{r7, pc}

0001a83c <vTaskSetTaskNumber>:
   1a83c:	b580      	push	{r7, lr}
   1a83e:	b084      	sub	sp, #16
   1a840:	af00      	add	r7, sp, #0
   1a842:	6078      	str	r0, [r7, #4]
   1a844:	6039      	str	r1, [r7, #0]
   1a846:	687b      	ldr	r3, [r7, #4]
   1a848:	2b00      	cmp	r3, #0
   1a84a:	d004      	beq.n	1a856 <vTaskSetTaskNumber+0x1a>
   1a84c:	687b      	ldr	r3, [r7, #4]
   1a84e:	60fb      	str	r3, [r7, #12]
   1a850:	68fb      	ldr	r3, [r7, #12]
   1a852:	683a      	ldr	r2, [r7, #0]
   1a854:	641a      	str	r2, [r3, #64]	; 0x40
   1a856:	46c0      	nop			; (mov r8, r8)
   1a858:	46bd      	mov	sp, r7
   1a85a:	b004      	add	sp, #16
   1a85c:	bd80      	pop	{r7, pc}
	...

0001a860 <prvIdleTask>:
   1a860:	b580      	push	{r7, lr}
   1a862:	b082      	sub	sp, #8
   1a864:	af00      	add	r7, sp, #0
   1a866:	6078      	str	r0, [r7, #4]
   1a868:	4b04      	ldr	r3, [pc, #16]	; (1a87c <prvIdleTask+0x1c>)
   1a86a:	4798      	blx	r3
   1a86c:	4b04      	ldr	r3, [pc, #16]	; (1a880 <prvIdleTask+0x20>)
   1a86e:	681b      	ldr	r3, [r3, #0]
   1a870:	2b01      	cmp	r3, #1
   1a872:	d9f9      	bls.n	1a868 <prvIdleTask+0x8>
   1a874:	4b03      	ldr	r3, [pc, #12]	; (1a884 <prvIdleTask+0x24>)
   1a876:	4798      	blx	r3
   1a878:	e7f6      	b.n	1a868 <prvIdleTask+0x8>
   1a87a:	46c0      	nop			; (mov r8, r8)
   1a87c:	0001a915 	.word	0x0001a915
   1a880:	20003b38 	.word	0x20003b38
   1a884:	00017d41 	.word	0x00017d41

0001a888 <prvInitialiseTaskLists>:
   1a888:	b580      	push	{r7, lr}
   1a88a:	b082      	sub	sp, #8
   1a88c:	af00      	add	r7, sp, #0
   1a88e:	2300      	movs	r3, #0
   1a890:	607b      	str	r3, [r7, #4]
   1a892:	e00c      	b.n	1a8ae <prvInitialiseTaskLists+0x26>
   1a894:	687a      	ldr	r2, [r7, #4]
   1a896:	0013      	movs	r3, r2
   1a898:	009b      	lsls	r3, r3, #2
   1a89a:	189b      	adds	r3, r3, r2
   1a89c:	009b      	lsls	r3, r3, #2
   1a89e:	4a14      	ldr	r2, [pc, #80]	; (1a8f0 <prvInitialiseTaskLists+0x68>)
   1a8a0:	189b      	adds	r3, r3, r2
   1a8a2:	0018      	movs	r0, r3
   1a8a4:	4b13      	ldr	r3, [pc, #76]	; (1a8f4 <prvInitialiseTaskLists+0x6c>)
   1a8a6:	4798      	blx	r3
   1a8a8:	687b      	ldr	r3, [r7, #4]
   1a8aa:	3301      	adds	r3, #1
   1a8ac:	607b      	str	r3, [r7, #4]
   1a8ae:	687b      	ldr	r3, [r7, #4]
   1a8b0:	2b04      	cmp	r3, #4
   1a8b2:	d9ef      	bls.n	1a894 <prvInitialiseTaskLists+0xc>
   1a8b4:	4b10      	ldr	r3, [pc, #64]	; (1a8f8 <prvInitialiseTaskLists+0x70>)
   1a8b6:	0018      	movs	r0, r3
   1a8b8:	4b0e      	ldr	r3, [pc, #56]	; (1a8f4 <prvInitialiseTaskLists+0x6c>)
   1a8ba:	4798      	blx	r3
   1a8bc:	4b0f      	ldr	r3, [pc, #60]	; (1a8fc <prvInitialiseTaskLists+0x74>)
   1a8be:	0018      	movs	r0, r3
   1a8c0:	4b0c      	ldr	r3, [pc, #48]	; (1a8f4 <prvInitialiseTaskLists+0x6c>)
   1a8c2:	4798      	blx	r3
   1a8c4:	4b0e      	ldr	r3, [pc, #56]	; (1a900 <prvInitialiseTaskLists+0x78>)
   1a8c6:	0018      	movs	r0, r3
   1a8c8:	4b0a      	ldr	r3, [pc, #40]	; (1a8f4 <prvInitialiseTaskLists+0x6c>)
   1a8ca:	4798      	blx	r3
   1a8cc:	4b0d      	ldr	r3, [pc, #52]	; (1a904 <prvInitialiseTaskLists+0x7c>)
   1a8ce:	0018      	movs	r0, r3
   1a8d0:	4b08      	ldr	r3, [pc, #32]	; (1a8f4 <prvInitialiseTaskLists+0x6c>)
   1a8d2:	4798      	blx	r3
   1a8d4:	4b0c      	ldr	r3, [pc, #48]	; (1a908 <prvInitialiseTaskLists+0x80>)
   1a8d6:	0018      	movs	r0, r3
   1a8d8:	4b06      	ldr	r3, [pc, #24]	; (1a8f4 <prvInitialiseTaskLists+0x6c>)
   1a8da:	4798      	blx	r3
   1a8dc:	4b0b      	ldr	r3, [pc, #44]	; (1a90c <prvInitialiseTaskLists+0x84>)
   1a8de:	4a06      	ldr	r2, [pc, #24]	; (1a8f8 <prvInitialiseTaskLists+0x70>)
   1a8e0:	601a      	str	r2, [r3, #0]
   1a8e2:	4b0b      	ldr	r3, [pc, #44]	; (1a910 <prvInitialiseTaskLists+0x88>)
   1a8e4:	4a05      	ldr	r2, [pc, #20]	; (1a8fc <prvInitialiseTaskLists+0x74>)
   1a8e6:	601a      	str	r2, [r3, #0]
   1a8e8:	46c0      	nop			; (mov r8, r8)
   1a8ea:	46bd      	mov	sp, r7
   1a8ec:	b002      	add	sp, #8
   1a8ee:	bd80      	pop	{r7, pc}
   1a8f0:	20003b38 	.word	0x20003b38
   1a8f4:	00017ad1 	.word	0x00017ad1
   1a8f8:	20003b9c 	.word	0x20003b9c
   1a8fc:	20003bb0 	.word	0x20003bb0
   1a900:	20003bcc 	.word	0x20003bcc
   1a904:	20003be0 	.word	0x20003be0
   1a908:	20003bf8 	.word	0x20003bf8
   1a90c:	20003bc4 	.word	0x20003bc4
   1a910:	20003bc8 	.word	0x20003bc8

0001a914 <prvCheckTasksWaitingTermination>:
   1a914:	b580      	push	{r7, lr}
   1a916:	b082      	sub	sp, #8
   1a918:	af00      	add	r7, sp, #0
   1a91a:	e01a      	b.n	1a952 <prvCheckTasksWaitingTermination+0x3e>
   1a91c:	4b11      	ldr	r3, [pc, #68]	; (1a964 <prvCheckTasksWaitingTermination+0x50>)
   1a91e:	4798      	blx	r3
   1a920:	4b11      	ldr	r3, [pc, #68]	; (1a968 <prvCheckTasksWaitingTermination+0x54>)
   1a922:	68db      	ldr	r3, [r3, #12]
   1a924:	68db      	ldr	r3, [r3, #12]
   1a926:	607b      	str	r3, [r7, #4]
   1a928:	687b      	ldr	r3, [r7, #4]
   1a92a:	3304      	adds	r3, #4
   1a92c:	0018      	movs	r0, r3
   1a92e:	4b0f      	ldr	r3, [pc, #60]	; (1a96c <prvCheckTasksWaitingTermination+0x58>)
   1a930:	4798      	blx	r3
   1a932:	4b0f      	ldr	r3, [pc, #60]	; (1a970 <prvCheckTasksWaitingTermination+0x5c>)
   1a934:	681b      	ldr	r3, [r3, #0]
   1a936:	1e5a      	subs	r2, r3, #1
   1a938:	4b0d      	ldr	r3, [pc, #52]	; (1a970 <prvCheckTasksWaitingTermination+0x5c>)
   1a93a:	601a      	str	r2, [r3, #0]
   1a93c:	4b0d      	ldr	r3, [pc, #52]	; (1a974 <prvCheckTasksWaitingTermination+0x60>)
   1a93e:	681b      	ldr	r3, [r3, #0]
   1a940:	1e5a      	subs	r2, r3, #1
   1a942:	4b0c      	ldr	r3, [pc, #48]	; (1a974 <prvCheckTasksWaitingTermination+0x60>)
   1a944:	601a      	str	r2, [r3, #0]
   1a946:	4b0c      	ldr	r3, [pc, #48]	; (1a978 <prvCheckTasksWaitingTermination+0x64>)
   1a948:	4798      	blx	r3
   1a94a:	687b      	ldr	r3, [r7, #4]
   1a94c:	0018      	movs	r0, r3
   1a94e:	4b0b      	ldr	r3, [pc, #44]	; (1a97c <prvCheckTasksWaitingTermination+0x68>)
   1a950:	4798      	blx	r3
   1a952:	4b08      	ldr	r3, [pc, #32]	; (1a974 <prvCheckTasksWaitingTermination+0x60>)
   1a954:	681b      	ldr	r3, [r3, #0]
   1a956:	2b00      	cmp	r3, #0
   1a958:	d1e0      	bne.n	1a91c <prvCheckTasksWaitingTermination+0x8>
   1a95a:	46c0      	nop			; (mov r8, r8)
   1a95c:	46bd      	mov	sp, r7
   1a95e:	b002      	add	sp, #8
   1a960:	bd80      	pop	{r7, pc}
   1a962:	46c0      	nop			; (mov r8, r8)
   1a964:	00017d59 	.word	0x00017d59
   1a968:	20003be0 	.word	0x20003be0
   1a96c:	00017bd3 	.word	0x00017bd3
   1a970:	20003c0c 	.word	0x20003c0c
   1a974:	20003bf4 	.word	0x20003bf4
   1a978:	00017d7d 	.word	0x00017d7d
   1a97c:	0001a9f1 	.word	0x0001a9f1

0001a980 <prvTaskCheckFreeStackSpace>:
   1a980:	b580      	push	{r7, lr}
   1a982:	b084      	sub	sp, #16
   1a984:	af00      	add	r7, sp, #0
   1a986:	6078      	str	r0, [r7, #4]
   1a988:	2300      	movs	r3, #0
   1a98a:	60fb      	str	r3, [r7, #12]
   1a98c:	e005      	b.n	1a99a <prvTaskCheckFreeStackSpace+0x1a>
   1a98e:	687b      	ldr	r3, [r7, #4]
   1a990:	3301      	adds	r3, #1
   1a992:	607b      	str	r3, [r7, #4]
   1a994:	68fb      	ldr	r3, [r7, #12]
   1a996:	3301      	adds	r3, #1
   1a998:	60fb      	str	r3, [r7, #12]
   1a99a:	687b      	ldr	r3, [r7, #4]
   1a99c:	781b      	ldrb	r3, [r3, #0]
   1a99e:	2ba5      	cmp	r3, #165	; 0xa5
   1a9a0:	d0f5      	beq.n	1a98e <prvTaskCheckFreeStackSpace+0xe>
   1a9a2:	68fb      	ldr	r3, [r7, #12]
   1a9a4:	089b      	lsrs	r3, r3, #2
   1a9a6:	60fb      	str	r3, [r7, #12]
   1a9a8:	68fb      	ldr	r3, [r7, #12]
   1a9aa:	b29b      	uxth	r3, r3
   1a9ac:	0018      	movs	r0, r3
   1a9ae:	46bd      	mov	sp, r7
   1a9b0:	b004      	add	sp, #16
   1a9b2:	bd80      	pop	{r7, pc}

0001a9b4 <uxTaskGetStackHighWaterMark>:
   1a9b4:	b580      	push	{r7, lr}
   1a9b6:	b086      	sub	sp, #24
   1a9b8:	af00      	add	r7, sp, #0
   1a9ba:	6078      	str	r0, [r7, #4]
   1a9bc:	687b      	ldr	r3, [r7, #4]
   1a9be:	2b00      	cmp	r3, #0
   1a9c0:	d102      	bne.n	1a9c8 <uxTaskGetStackHighWaterMark+0x14>
   1a9c2:	4b09      	ldr	r3, [pc, #36]	; (1a9e8 <uxTaskGetStackHighWaterMark+0x34>)
   1a9c4:	681b      	ldr	r3, [r3, #0]
   1a9c6:	e000      	b.n	1a9ca <uxTaskGetStackHighWaterMark+0x16>
   1a9c8:	687b      	ldr	r3, [r7, #4]
   1a9ca:	617b      	str	r3, [r7, #20]
   1a9cc:	697b      	ldr	r3, [r7, #20]
   1a9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a9d0:	613b      	str	r3, [r7, #16]
   1a9d2:	693b      	ldr	r3, [r7, #16]
   1a9d4:	0018      	movs	r0, r3
   1a9d6:	4b05      	ldr	r3, [pc, #20]	; (1a9ec <uxTaskGetStackHighWaterMark+0x38>)
   1a9d8:	4798      	blx	r3
   1a9da:	0003      	movs	r3, r0
   1a9dc:	60fb      	str	r3, [r7, #12]
   1a9de:	68fb      	ldr	r3, [r7, #12]
   1a9e0:	0018      	movs	r0, r3
   1a9e2:	46bd      	mov	sp, r7
   1a9e4:	b006      	add	sp, #24
   1a9e6:	bd80      	pop	{r7, pc}
   1a9e8:	20003b34 	.word	0x20003b34
   1a9ec:	0001a981 	.word	0x0001a981

0001a9f0 <prvDeleteTCB>:
   1a9f0:	b580      	push	{r7, lr}
   1a9f2:	b082      	sub	sp, #8
   1a9f4:	af00      	add	r7, sp, #0
   1a9f6:	6078      	str	r0, [r7, #4]
   1a9f8:	687b      	ldr	r3, [r7, #4]
   1a9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a9fc:	0018      	movs	r0, r3
   1a9fe:	4b05      	ldr	r3, [pc, #20]	; (1aa14 <prvDeleteTCB+0x24>)
   1aa00:	4798      	blx	r3
   1aa02:	687b      	ldr	r3, [r7, #4]
   1aa04:	0018      	movs	r0, r3
   1aa06:	4b03      	ldr	r3, [pc, #12]	; (1aa14 <prvDeleteTCB+0x24>)
   1aa08:	4798      	blx	r3
   1aa0a:	46c0      	nop			; (mov r8, r8)
   1aa0c:	46bd      	mov	sp, r7
   1aa0e:	b002      	add	sp, #8
   1aa10:	bd80      	pop	{r7, pc}
   1aa12:	46c0      	nop			; (mov r8, r8)
   1aa14:	00017f55 	.word	0x00017f55

0001aa18 <prvResetNextTaskUnblockTime>:
   1aa18:	b580      	push	{r7, lr}
   1aa1a:	b082      	sub	sp, #8
   1aa1c:	af00      	add	r7, sp, #0
   1aa1e:	4b0e      	ldr	r3, [pc, #56]	; (1aa58 <prvResetNextTaskUnblockTime+0x40>)
   1aa20:	681b      	ldr	r3, [r3, #0]
   1aa22:	681b      	ldr	r3, [r3, #0]
   1aa24:	2b00      	cmp	r3, #0
   1aa26:	d101      	bne.n	1aa2c <prvResetNextTaskUnblockTime+0x14>
   1aa28:	2301      	movs	r3, #1
   1aa2a:	e000      	b.n	1aa2e <prvResetNextTaskUnblockTime+0x16>
   1aa2c:	2300      	movs	r3, #0
   1aa2e:	2b00      	cmp	r3, #0
   1aa30:	d004      	beq.n	1aa3c <prvResetNextTaskUnblockTime+0x24>
   1aa32:	4b0a      	ldr	r3, [pc, #40]	; (1aa5c <prvResetNextTaskUnblockTime+0x44>)
   1aa34:	2201      	movs	r2, #1
   1aa36:	4252      	negs	r2, r2
   1aa38:	601a      	str	r2, [r3, #0]
   1aa3a:	e008      	b.n	1aa4e <prvResetNextTaskUnblockTime+0x36>
   1aa3c:	4b06      	ldr	r3, [pc, #24]	; (1aa58 <prvResetNextTaskUnblockTime+0x40>)
   1aa3e:	681b      	ldr	r3, [r3, #0]
   1aa40:	68db      	ldr	r3, [r3, #12]
   1aa42:	68db      	ldr	r3, [r3, #12]
   1aa44:	607b      	str	r3, [r7, #4]
   1aa46:	687b      	ldr	r3, [r7, #4]
   1aa48:	685a      	ldr	r2, [r3, #4]
   1aa4a:	4b04      	ldr	r3, [pc, #16]	; (1aa5c <prvResetNextTaskUnblockTime+0x44>)
   1aa4c:	601a      	str	r2, [r3, #0]
   1aa4e:	46c0      	nop			; (mov r8, r8)
   1aa50:	46bd      	mov	sp, r7
   1aa52:	b002      	add	sp, #8
   1aa54:	bd80      	pop	{r7, pc}
   1aa56:	46c0      	nop			; (mov r8, r8)
   1aa58:	20003bc4 	.word	0x20003bc4
   1aa5c:	20003c2c 	.word	0x20003c2c

0001aa60 <xTaskGetCurrentTaskHandle>:
   1aa60:	b580      	push	{r7, lr}
   1aa62:	b082      	sub	sp, #8
   1aa64:	af00      	add	r7, sp, #0
   1aa66:	4b04      	ldr	r3, [pc, #16]	; (1aa78 <xTaskGetCurrentTaskHandle+0x18>)
   1aa68:	681b      	ldr	r3, [r3, #0]
   1aa6a:	607b      	str	r3, [r7, #4]
   1aa6c:	687b      	ldr	r3, [r7, #4]
   1aa6e:	0018      	movs	r0, r3
   1aa70:	46bd      	mov	sp, r7
   1aa72:	b002      	add	sp, #8
   1aa74:	bd80      	pop	{r7, pc}
   1aa76:	46c0      	nop			; (mov r8, r8)
   1aa78:	20003b34 	.word	0x20003b34

0001aa7c <xTaskGetSchedulerState>:
   1aa7c:	b580      	push	{r7, lr}
   1aa7e:	b082      	sub	sp, #8
   1aa80:	af00      	add	r7, sp, #0
   1aa82:	4b0a      	ldr	r3, [pc, #40]	; (1aaac <xTaskGetSchedulerState+0x30>)
   1aa84:	681b      	ldr	r3, [r3, #0]
   1aa86:	2b00      	cmp	r3, #0
   1aa88:	d102      	bne.n	1aa90 <xTaskGetSchedulerState+0x14>
   1aa8a:	2301      	movs	r3, #1
   1aa8c:	607b      	str	r3, [r7, #4]
   1aa8e:	e008      	b.n	1aaa2 <xTaskGetSchedulerState+0x26>
   1aa90:	4b07      	ldr	r3, [pc, #28]	; (1aab0 <xTaskGetSchedulerState+0x34>)
   1aa92:	681b      	ldr	r3, [r3, #0]
   1aa94:	2b00      	cmp	r3, #0
   1aa96:	d102      	bne.n	1aa9e <xTaskGetSchedulerState+0x22>
   1aa98:	2302      	movs	r3, #2
   1aa9a:	607b      	str	r3, [r7, #4]
   1aa9c:	e001      	b.n	1aaa2 <xTaskGetSchedulerState+0x26>
   1aa9e:	2300      	movs	r3, #0
   1aaa0:	607b      	str	r3, [r7, #4]
   1aaa2:	687b      	ldr	r3, [r7, #4]
   1aaa4:	0018      	movs	r0, r3
   1aaa6:	46bd      	mov	sp, r7
   1aaa8:	b002      	add	sp, #8
   1aaaa:	bd80      	pop	{r7, pc}
   1aaac:	20003c18 	.word	0x20003c18
   1aab0:	20003c34 	.word	0x20003c34

0001aab4 <xTaskPriorityInherit>:
   1aab4:	b590      	push	{r4, r7, lr}
   1aab6:	b085      	sub	sp, #20
   1aab8:	af00      	add	r7, sp, #0
   1aaba:	6078      	str	r0, [r7, #4]
   1aabc:	687b      	ldr	r3, [r7, #4]
   1aabe:	60bb      	str	r3, [r7, #8]
   1aac0:	2300      	movs	r3, #0
   1aac2:	60fb      	str	r3, [r7, #12]
   1aac4:	687b      	ldr	r3, [r7, #4]
   1aac6:	2b00      	cmp	r3, #0
   1aac8:	d100      	bne.n	1aacc <xTaskPriorityInherit+0x18>
   1aaca:	e09d      	b.n	1ac08 <xTaskPriorityInherit+0x154>
   1aacc:	68bb      	ldr	r3, [r7, #8]
   1aace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1aad0:	4b50      	ldr	r3, [pc, #320]	; (1ac14 <xTaskPriorityInherit+0x160>)
   1aad2:	681b      	ldr	r3, [r3, #0]
   1aad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1aad6:	429a      	cmp	r2, r3
   1aad8:	d300      	bcc.n	1aadc <xTaskPriorityInherit+0x28>
   1aada:	e08c      	b.n	1abf6 <xTaskPriorityInherit+0x142>
   1aadc:	68bb      	ldr	r3, [r7, #8]
   1aade:	699b      	ldr	r3, [r3, #24]
   1aae0:	2b00      	cmp	r3, #0
   1aae2:	db06      	blt.n	1aaf2 <xTaskPriorityInherit+0x3e>
   1aae4:	4b4b      	ldr	r3, [pc, #300]	; (1ac14 <xTaskPriorityInherit+0x160>)
   1aae6:	681b      	ldr	r3, [r3, #0]
   1aae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1aaea:	2205      	movs	r2, #5
   1aaec:	1ad2      	subs	r2, r2, r3
   1aaee:	68bb      	ldr	r3, [r7, #8]
   1aaf0:	619a      	str	r2, [r3, #24]
   1aaf2:	68bb      	ldr	r3, [r7, #8]
   1aaf4:	6959      	ldr	r1, [r3, #20]
   1aaf6:	68bb      	ldr	r3, [r7, #8]
   1aaf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1aafa:	0013      	movs	r3, r2
   1aafc:	009b      	lsls	r3, r3, #2
   1aafe:	189b      	adds	r3, r3, r2
   1ab00:	009b      	lsls	r3, r3, #2
   1ab02:	4a45      	ldr	r2, [pc, #276]	; (1ac18 <xTaskPriorityInherit+0x164>)
   1ab04:	189b      	adds	r3, r3, r2
   1ab06:	4299      	cmp	r1, r3
   1ab08:	d101      	bne.n	1ab0e <xTaskPriorityInherit+0x5a>
   1ab0a:	2301      	movs	r3, #1
   1ab0c:	e000      	b.n	1ab10 <xTaskPriorityInherit+0x5c>
   1ab0e:	2300      	movs	r3, #0
   1ab10:	2b00      	cmp	r3, #0
   1ab12:	d037      	beq.n	1ab84 <xTaskPriorityInherit+0xd0>
   1ab14:	68bb      	ldr	r3, [r7, #8]
   1ab16:	3304      	adds	r3, #4
   1ab18:	0018      	movs	r0, r3
   1ab1a:	4b40      	ldr	r3, [pc, #256]	; (1ac1c <xTaskPriorityInherit+0x168>)
   1ab1c:	4798      	blx	r3
   1ab1e:	4b3d      	ldr	r3, [pc, #244]	; (1ac14 <xTaskPriorityInherit+0x160>)
   1ab20:	681b      	ldr	r3, [r3, #0]
   1ab22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab24:	68bb      	ldr	r3, [r7, #8]
   1ab26:	62da      	str	r2, [r3, #44]	; 0x2c
   1ab28:	68bb      	ldr	r3, [r7, #8]
   1ab2a:	0018      	movs	r0, r3
   1ab2c:	4b3c      	ldr	r3, [pc, #240]	; (1ac20 <xTaskPriorityInherit+0x16c>)
   1ab2e:	4798      	blx	r3
   1ab30:	0003      	movs	r3, r0
   1ab32:	001a      	movs	r2, r3
   1ab34:	4b3b      	ldr	r3, [pc, #236]	; (1ac24 <xTaskPriorityInherit+0x170>)
   1ab36:	881b      	ldrh	r3, [r3, #0]
   1ab38:	4013      	ands	r3, r2
   1ab3a:	b29b      	uxth	r3, r3
   1ab3c:	2b00      	cmp	r3, #0
   1ab3e:	d008      	beq.n	1ab52 <xTaskPriorityInherit+0x9e>
   1ab40:	68bb      	ldr	r3, [r7, #8]
   1ab42:	0018      	movs	r0, r3
   1ab44:	4b38      	ldr	r3, [pc, #224]	; (1ac28 <xTaskPriorityInherit+0x174>)
   1ab46:	4798      	blx	r3
   1ab48:	0003      	movs	r3, r0
   1ab4a:	b2db      	uxtb	r3, r3
   1ab4c:	0018      	movs	r0, r3
   1ab4e:	4b37      	ldr	r3, [pc, #220]	; (1ac2c <xTaskPriorityInherit+0x178>)
   1ab50:	4798      	blx	r3
   1ab52:	68bb      	ldr	r3, [r7, #8]
   1ab54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab56:	4b36      	ldr	r3, [pc, #216]	; (1ac30 <xTaskPriorityInherit+0x17c>)
   1ab58:	681b      	ldr	r3, [r3, #0]
   1ab5a:	429a      	cmp	r2, r3
   1ab5c:	d903      	bls.n	1ab66 <xTaskPriorityInherit+0xb2>
   1ab5e:	68bb      	ldr	r3, [r7, #8]
   1ab60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab62:	4b33      	ldr	r3, [pc, #204]	; (1ac30 <xTaskPriorityInherit+0x17c>)
   1ab64:	601a      	str	r2, [r3, #0]
   1ab66:	68bb      	ldr	r3, [r7, #8]
   1ab68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab6a:	0013      	movs	r3, r2
   1ab6c:	009b      	lsls	r3, r3, #2
   1ab6e:	189b      	adds	r3, r3, r2
   1ab70:	009b      	lsls	r3, r3, #2
   1ab72:	4a29      	ldr	r2, [pc, #164]	; (1ac18 <xTaskPriorityInherit+0x164>)
   1ab74:	189a      	adds	r2, r3, r2
   1ab76:	68bb      	ldr	r3, [r7, #8]
   1ab78:	3304      	adds	r3, #4
   1ab7a:	0019      	movs	r1, r3
   1ab7c:	0010      	movs	r0, r2
   1ab7e:	4b2d      	ldr	r3, [pc, #180]	; (1ac34 <xTaskPriorityInherit+0x180>)
   1ab80:	4798      	blx	r3
   1ab82:	e004      	b.n	1ab8e <xTaskPriorityInherit+0xda>
   1ab84:	4b23      	ldr	r3, [pc, #140]	; (1ac14 <xTaskPriorityInherit+0x160>)
   1ab86:	681b      	ldr	r3, [r3, #0]
   1ab88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab8a:	68bb      	ldr	r3, [r7, #8]
   1ab8c:	62da      	str	r2, [r3, #44]	; 0x2c
   1ab8e:	68bb      	ldr	r3, [r7, #8]
   1ab90:	0018      	movs	r0, r3
   1ab92:	4b23      	ldr	r3, [pc, #140]	; (1ac20 <xTaskPriorityInherit+0x16c>)
   1ab94:	4798      	blx	r3
   1ab96:	0003      	movs	r3, r0
   1ab98:	001a      	movs	r2, r3
   1ab9a:	4b22      	ldr	r3, [pc, #136]	; (1ac24 <xTaskPriorityInherit+0x170>)
   1ab9c:	881b      	ldrh	r3, [r3, #0]
   1ab9e:	4013      	ands	r3, r2
   1aba0:	b29b      	uxth	r3, r3
   1aba2:	2b00      	cmp	r3, #0
   1aba4:	d024      	beq.n	1abf0 <xTaskPriorityInherit+0x13c>
   1aba6:	68bb      	ldr	r3, [r7, #8]
   1aba8:	0018      	movs	r0, r3
   1abaa:	4b1f      	ldr	r3, [pc, #124]	; (1ac28 <xTaskPriorityInherit+0x174>)
   1abac:	4798      	blx	r3
   1abae:	0003      	movs	r3, r0
   1abb0:	b2db      	uxtb	r3, r3
   1abb2:	001c      	movs	r4, r3
   1abb4:	68bb      	ldr	r3, [r7, #8]
   1abb6:	0018      	movs	r0, r3
   1abb8:	4b1b      	ldr	r3, [pc, #108]	; (1ac28 <xTaskPriorityInherit+0x174>)
   1abba:	4798      	blx	r3
   1abbc:	0003      	movs	r3, r0
   1abbe:	b2db      	uxtb	r3, r3
   1abc0:	0019      	movs	r1, r3
   1abc2:	2003      	movs	r0, #3
   1abc4:	4b1c      	ldr	r3, [pc, #112]	; (1ac38 <xTaskPriorityInherit+0x184>)
   1abc6:	4798      	blx	r3
   1abc8:	0003      	movs	r3, r0
   1abca:	0022      	movs	r2, r4
   1abcc:	2103      	movs	r1, #3
   1abce:	208e      	movs	r0, #142	; 0x8e
   1abd0:	4c1a      	ldr	r4, [pc, #104]	; (1ac3c <xTaskPriorityInherit+0x188>)
   1abd2:	47a0      	blx	r4
   1abd4:	68bb      	ldr	r3, [r7, #8]
   1abd6:	0018      	movs	r0, r3
   1abd8:	4b13      	ldr	r3, [pc, #76]	; (1ac28 <xTaskPriorityInherit+0x174>)
   1abda:	4798      	blx	r3
   1abdc:	0003      	movs	r3, r0
   1abde:	b2d9      	uxtb	r1, r3
   1abe0:	4b0c      	ldr	r3, [pc, #48]	; (1ac14 <xTaskPriorityInherit+0x160>)
   1abe2:	681b      	ldr	r3, [r3, #0]
   1abe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1abe6:	b2db      	uxtb	r3, r3
   1abe8:	001a      	movs	r2, r3
   1abea:	2003      	movs	r0, #3
   1abec:	4b14      	ldr	r3, [pc, #80]	; (1ac40 <xTaskPriorityInherit+0x18c>)
   1abee:	4798      	blx	r3
   1abf0:	2301      	movs	r3, #1
   1abf2:	60fb      	str	r3, [r7, #12]
   1abf4:	e008      	b.n	1ac08 <xTaskPriorityInherit+0x154>
   1abf6:	68bb      	ldr	r3, [r7, #8]
   1abf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1abfa:	4b06      	ldr	r3, [pc, #24]	; (1ac14 <xTaskPriorityInherit+0x160>)
   1abfc:	681b      	ldr	r3, [r3, #0]
   1abfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ac00:	429a      	cmp	r2, r3
   1ac02:	d201      	bcs.n	1ac08 <xTaskPriorityInherit+0x154>
   1ac04:	2301      	movs	r3, #1
   1ac06:	60fb      	str	r3, [r7, #12]
   1ac08:	68fb      	ldr	r3, [r7, #12]
   1ac0a:	0018      	movs	r0, r3
   1ac0c:	46bd      	mov	sp, r7
   1ac0e:	b005      	add	sp, #20
   1ac10:	bd90      	pop	{r4, r7, pc}
   1ac12:	46c0      	nop			; (mov r8, r8)
   1ac14:	20003b34 	.word	0x20003b34
   1ac18:	20003b38 	.word	0x20003b38
   1ac1c:	00017bd3 	.word	0x00017bd3
   1ac20:	00015d59 	.word	0x00015d59
   1ac24:	200000f0 	.word	0x200000f0
   1ac28:	00015d39 	.word	0x00015d39
   1ac2c:	00016509 	.word	0x00016509
   1ac30:	20003c14 	.word	0x20003c14
   1ac34:	00017b23 	.word	0x00017b23
   1ac38:	00016d11 	.word	0x00016d11
   1ac3c:	00016881 	.word	0x00016881
   1ac40:	00016c6d 	.word	0x00016c6d

0001ac44 <xTaskPriorityDisinherit>:
   1ac44:	b590      	push	{r4, r7, lr}
   1ac46:	b085      	sub	sp, #20
   1ac48:	af00      	add	r7, sp, #0
   1ac4a:	6078      	str	r0, [r7, #4]
   1ac4c:	687b      	ldr	r3, [r7, #4]
   1ac4e:	60bb      	str	r3, [r7, #8]
   1ac50:	2300      	movs	r3, #0
   1ac52:	60fb      	str	r3, [r7, #12]
   1ac54:	687b      	ldr	r3, [r7, #4]
   1ac56:	2b00      	cmp	r3, #0
   1ac58:	d100      	bne.n	1ac5c <xTaskPriorityDisinherit+0x18>
   1ac5a:	e089      	b.n	1ad70 <xTaskPriorityDisinherit+0x12c>
   1ac5c:	4b47      	ldr	r3, [pc, #284]	; (1ad7c <xTaskPriorityDisinherit+0x138>)
   1ac5e:	681b      	ldr	r3, [r3, #0]
   1ac60:	68ba      	ldr	r2, [r7, #8]
   1ac62:	429a      	cmp	r2, r3
   1ac64:	d001      	beq.n	1ac6a <xTaskPriorityDisinherit+0x26>
   1ac66:	b672      	cpsid	i
   1ac68:	e7fe      	b.n	1ac68 <xTaskPriorityDisinherit+0x24>
   1ac6a:	68bb      	ldr	r3, [r7, #8]
   1ac6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ac6e:	2b00      	cmp	r3, #0
   1ac70:	d101      	bne.n	1ac76 <xTaskPriorityDisinherit+0x32>
   1ac72:	b672      	cpsid	i
   1ac74:	e7fe      	b.n	1ac74 <xTaskPriorityDisinherit+0x30>
   1ac76:	68bb      	ldr	r3, [r7, #8]
   1ac78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ac7a:	1e5a      	subs	r2, r3, #1
   1ac7c:	68bb      	ldr	r3, [r7, #8]
   1ac7e:	649a      	str	r2, [r3, #72]	; 0x48
   1ac80:	68bb      	ldr	r3, [r7, #8]
   1ac82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ac84:	68bb      	ldr	r3, [r7, #8]
   1ac86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ac88:	429a      	cmp	r2, r3
   1ac8a:	d071      	beq.n	1ad70 <xTaskPriorityDisinherit+0x12c>
   1ac8c:	68bb      	ldr	r3, [r7, #8]
   1ac8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ac90:	2b00      	cmp	r3, #0
   1ac92:	d16d      	bne.n	1ad70 <xTaskPriorityDisinherit+0x12c>
   1ac94:	68bb      	ldr	r3, [r7, #8]
   1ac96:	3304      	adds	r3, #4
   1ac98:	0018      	movs	r0, r3
   1ac9a:	4b39      	ldr	r3, [pc, #228]	; (1ad80 <xTaskPriorityDisinherit+0x13c>)
   1ac9c:	4798      	blx	r3
   1ac9e:	68bb      	ldr	r3, [r7, #8]
   1aca0:	0018      	movs	r0, r3
   1aca2:	4b38      	ldr	r3, [pc, #224]	; (1ad84 <xTaskPriorityDisinherit+0x140>)
   1aca4:	4798      	blx	r3
   1aca6:	0003      	movs	r3, r0
   1aca8:	001a      	movs	r2, r3
   1acaa:	4b37      	ldr	r3, [pc, #220]	; (1ad88 <xTaskPriorityDisinherit+0x144>)
   1acac:	881b      	ldrh	r3, [r3, #0]
   1acae:	4013      	ands	r3, r2
   1acb0:	b29b      	uxth	r3, r3
   1acb2:	2b00      	cmp	r3, #0
   1acb4:	d023      	beq.n	1acfe <xTaskPriorityDisinherit+0xba>
   1acb6:	68bb      	ldr	r3, [r7, #8]
   1acb8:	0018      	movs	r0, r3
   1acba:	4b34      	ldr	r3, [pc, #208]	; (1ad8c <xTaskPriorityDisinherit+0x148>)
   1acbc:	4798      	blx	r3
   1acbe:	0003      	movs	r3, r0
   1acc0:	b2db      	uxtb	r3, r3
   1acc2:	001c      	movs	r4, r3
   1acc4:	68bb      	ldr	r3, [r7, #8]
   1acc6:	0018      	movs	r0, r3
   1acc8:	4b30      	ldr	r3, [pc, #192]	; (1ad8c <xTaskPriorityDisinherit+0x148>)
   1acca:	4798      	blx	r3
   1accc:	0003      	movs	r3, r0
   1acce:	b2db      	uxtb	r3, r3
   1acd0:	0019      	movs	r1, r3
   1acd2:	2003      	movs	r0, #3
   1acd4:	4b2e      	ldr	r3, [pc, #184]	; (1ad90 <xTaskPriorityDisinherit+0x14c>)
   1acd6:	4798      	blx	r3
   1acd8:	0003      	movs	r3, r0
   1acda:	0022      	movs	r2, r4
   1acdc:	2103      	movs	r1, #3
   1acde:	208f      	movs	r0, #143	; 0x8f
   1ace0:	4c2c      	ldr	r4, [pc, #176]	; (1ad94 <xTaskPriorityDisinherit+0x150>)
   1ace2:	47a0      	blx	r4
   1ace4:	68bb      	ldr	r3, [r7, #8]
   1ace6:	0018      	movs	r0, r3
   1ace8:	4b28      	ldr	r3, [pc, #160]	; (1ad8c <xTaskPriorityDisinherit+0x148>)
   1acea:	4798      	blx	r3
   1acec:	0003      	movs	r3, r0
   1acee:	b2d9      	uxtb	r1, r3
   1acf0:	68bb      	ldr	r3, [r7, #8]
   1acf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1acf4:	b2db      	uxtb	r3, r3
   1acf6:	001a      	movs	r2, r3
   1acf8:	2003      	movs	r0, #3
   1acfa:	4b27      	ldr	r3, [pc, #156]	; (1ad98 <xTaskPriorityDisinherit+0x154>)
   1acfc:	4798      	blx	r3
   1acfe:	68bb      	ldr	r3, [r7, #8]
   1ad00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1ad02:	68bb      	ldr	r3, [r7, #8]
   1ad04:	62da      	str	r2, [r3, #44]	; 0x2c
   1ad06:	68bb      	ldr	r3, [r7, #8]
   1ad08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ad0a:	2205      	movs	r2, #5
   1ad0c:	1ad2      	subs	r2, r2, r3
   1ad0e:	68bb      	ldr	r3, [r7, #8]
   1ad10:	619a      	str	r2, [r3, #24]
   1ad12:	68bb      	ldr	r3, [r7, #8]
   1ad14:	0018      	movs	r0, r3
   1ad16:	4b1b      	ldr	r3, [pc, #108]	; (1ad84 <xTaskPriorityDisinherit+0x140>)
   1ad18:	4798      	blx	r3
   1ad1a:	0003      	movs	r3, r0
   1ad1c:	001a      	movs	r2, r3
   1ad1e:	4b1a      	ldr	r3, [pc, #104]	; (1ad88 <xTaskPriorityDisinherit+0x144>)
   1ad20:	881b      	ldrh	r3, [r3, #0]
   1ad22:	4013      	ands	r3, r2
   1ad24:	b29b      	uxth	r3, r3
   1ad26:	2b00      	cmp	r3, #0
   1ad28:	d008      	beq.n	1ad3c <xTaskPriorityDisinherit+0xf8>
   1ad2a:	68bb      	ldr	r3, [r7, #8]
   1ad2c:	0018      	movs	r0, r3
   1ad2e:	4b17      	ldr	r3, [pc, #92]	; (1ad8c <xTaskPriorityDisinherit+0x148>)
   1ad30:	4798      	blx	r3
   1ad32:	0003      	movs	r3, r0
   1ad34:	b2db      	uxtb	r3, r3
   1ad36:	0018      	movs	r0, r3
   1ad38:	4b18      	ldr	r3, [pc, #96]	; (1ad9c <xTaskPriorityDisinherit+0x158>)
   1ad3a:	4798      	blx	r3
   1ad3c:	68bb      	ldr	r3, [r7, #8]
   1ad3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ad40:	4b17      	ldr	r3, [pc, #92]	; (1ada0 <xTaskPriorityDisinherit+0x15c>)
   1ad42:	681b      	ldr	r3, [r3, #0]
   1ad44:	429a      	cmp	r2, r3
   1ad46:	d903      	bls.n	1ad50 <xTaskPriorityDisinherit+0x10c>
   1ad48:	68bb      	ldr	r3, [r7, #8]
   1ad4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ad4c:	4b14      	ldr	r3, [pc, #80]	; (1ada0 <xTaskPriorityDisinherit+0x15c>)
   1ad4e:	601a      	str	r2, [r3, #0]
   1ad50:	68bb      	ldr	r3, [r7, #8]
   1ad52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ad54:	0013      	movs	r3, r2
   1ad56:	009b      	lsls	r3, r3, #2
   1ad58:	189b      	adds	r3, r3, r2
   1ad5a:	009b      	lsls	r3, r3, #2
   1ad5c:	4a11      	ldr	r2, [pc, #68]	; (1ada4 <xTaskPriorityDisinherit+0x160>)
   1ad5e:	189a      	adds	r2, r3, r2
   1ad60:	68bb      	ldr	r3, [r7, #8]
   1ad62:	3304      	adds	r3, #4
   1ad64:	0019      	movs	r1, r3
   1ad66:	0010      	movs	r0, r2
   1ad68:	4b0f      	ldr	r3, [pc, #60]	; (1ada8 <xTaskPriorityDisinherit+0x164>)
   1ad6a:	4798      	blx	r3
   1ad6c:	2301      	movs	r3, #1
   1ad6e:	60fb      	str	r3, [r7, #12]
   1ad70:	68fb      	ldr	r3, [r7, #12]
   1ad72:	0018      	movs	r0, r3
   1ad74:	46bd      	mov	sp, r7
   1ad76:	b005      	add	sp, #20
   1ad78:	bd90      	pop	{r4, r7, pc}
   1ad7a:	46c0      	nop			; (mov r8, r8)
   1ad7c:	20003b34 	.word	0x20003b34
   1ad80:	00017bd3 	.word	0x00017bd3
   1ad84:	00015d59 	.word	0x00015d59
   1ad88:	200000f0 	.word	0x200000f0
   1ad8c:	00015d39 	.word	0x00015d39
   1ad90:	00016d11 	.word	0x00016d11
   1ad94:	00016881 	.word	0x00016881
   1ad98:	00016c6d 	.word	0x00016c6d
   1ad9c:	00016509 	.word	0x00016509
   1ada0:	20003c14 	.word	0x20003c14
   1ada4:	20003b38 	.word	0x20003b38
   1ada8:	00017b23 	.word	0x00017b23

0001adac <vTaskPriorityDisinheritAfterTimeout>:
   1adac:	b590      	push	{r4, r7, lr}
   1adae:	b087      	sub	sp, #28
   1adb0:	af00      	add	r7, sp, #0
   1adb2:	6078      	str	r0, [r7, #4]
   1adb4:	6039      	str	r1, [r7, #0]
   1adb6:	687b      	ldr	r3, [r7, #4]
   1adb8:	613b      	str	r3, [r7, #16]
   1adba:	2301      	movs	r3, #1
   1adbc:	60fb      	str	r3, [r7, #12]
   1adbe:	687b      	ldr	r3, [r7, #4]
   1adc0:	2b00      	cmp	r3, #0
   1adc2:	d100      	bne.n	1adc6 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1adc4:	e0a4      	b.n	1af10 <vTaskPriorityDisinheritAfterTimeout+0x164>
   1adc6:	693b      	ldr	r3, [r7, #16]
   1adc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1adca:	2b00      	cmp	r3, #0
   1adcc:	d101      	bne.n	1add2 <vTaskPriorityDisinheritAfterTimeout+0x26>
   1adce:	b672      	cpsid	i
   1add0:	e7fe      	b.n	1add0 <vTaskPriorityDisinheritAfterTimeout+0x24>
   1add2:	693b      	ldr	r3, [r7, #16]
   1add4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1add6:	683b      	ldr	r3, [r7, #0]
   1add8:	429a      	cmp	r2, r3
   1adda:	d202      	bcs.n	1ade2 <vTaskPriorityDisinheritAfterTimeout+0x36>
   1addc:	683b      	ldr	r3, [r7, #0]
   1adde:	617b      	str	r3, [r7, #20]
   1ade0:	e002      	b.n	1ade8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
   1ade2:	693b      	ldr	r3, [r7, #16]
   1ade4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ade6:	617b      	str	r3, [r7, #20]
   1ade8:	693b      	ldr	r3, [r7, #16]
   1adea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1adec:	697b      	ldr	r3, [r7, #20]
   1adee:	429a      	cmp	r2, r3
   1adf0:	d100      	bne.n	1adf4 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1adf2:	e08d      	b.n	1af10 <vTaskPriorityDisinheritAfterTimeout+0x164>
   1adf4:	693b      	ldr	r3, [r7, #16]
   1adf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1adf8:	68fb      	ldr	r3, [r7, #12]
   1adfa:	429a      	cmp	r2, r3
   1adfc:	d000      	beq.n	1ae00 <vTaskPriorityDisinheritAfterTimeout+0x54>
   1adfe:	e087      	b.n	1af10 <vTaskPriorityDisinheritAfterTimeout+0x164>
   1ae00:	4b45      	ldr	r3, [pc, #276]	; (1af18 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1ae02:	681b      	ldr	r3, [r3, #0]
   1ae04:	693a      	ldr	r2, [r7, #16]
   1ae06:	429a      	cmp	r2, r3
   1ae08:	d101      	bne.n	1ae0e <vTaskPriorityDisinheritAfterTimeout+0x62>
   1ae0a:	b672      	cpsid	i
   1ae0c:	e7fe      	b.n	1ae0c <vTaskPriorityDisinheritAfterTimeout+0x60>
   1ae0e:	693b      	ldr	r3, [r7, #16]
   1ae10:	0018      	movs	r0, r3
   1ae12:	4b42      	ldr	r3, [pc, #264]	; (1af1c <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1ae14:	4798      	blx	r3
   1ae16:	0003      	movs	r3, r0
   1ae18:	001a      	movs	r2, r3
   1ae1a:	4b41      	ldr	r3, [pc, #260]	; (1af20 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1ae1c:	881b      	ldrh	r3, [r3, #0]
   1ae1e:	4013      	ands	r3, r2
   1ae20:	b29b      	uxth	r3, r3
   1ae22:	2b00      	cmp	r3, #0
   1ae24:	d023      	beq.n	1ae6e <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1ae26:	693b      	ldr	r3, [r7, #16]
   1ae28:	0018      	movs	r0, r3
   1ae2a:	4b3e      	ldr	r3, [pc, #248]	; (1af24 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ae2c:	4798      	blx	r3
   1ae2e:	0003      	movs	r3, r0
   1ae30:	b2db      	uxtb	r3, r3
   1ae32:	001c      	movs	r4, r3
   1ae34:	693b      	ldr	r3, [r7, #16]
   1ae36:	0018      	movs	r0, r3
   1ae38:	4b3a      	ldr	r3, [pc, #232]	; (1af24 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ae3a:	4798      	blx	r3
   1ae3c:	0003      	movs	r3, r0
   1ae3e:	b2db      	uxtb	r3, r3
   1ae40:	0019      	movs	r1, r3
   1ae42:	2003      	movs	r0, #3
   1ae44:	4b38      	ldr	r3, [pc, #224]	; (1af28 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1ae46:	4798      	blx	r3
   1ae48:	0003      	movs	r3, r0
   1ae4a:	0022      	movs	r2, r4
   1ae4c:	2103      	movs	r1, #3
   1ae4e:	208f      	movs	r0, #143	; 0x8f
   1ae50:	4c36      	ldr	r4, [pc, #216]	; (1af2c <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1ae52:	47a0      	blx	r4
   1ae54:	693b      	ldr	r3, [r7, #16]
   1ae56:	0018      	movs	r0, r3
   1ae58:	4b32      	ldr	r3, [pc, #200]	; (1af24 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ae5a:	4798      	blx	r3
   1ae5c:	0003      	movs	r3, r0
   1ae5e:	b2d9      	uxtb	r1, r3
   1ae60:	693b      	ldr	r3, [r7, #16]
   1ae62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ae64:	b2db      	uxtb	r3, r3
   1ae66:	001a      	movs	r2, r3
   1ae68:	2003      	movs	r0, #3
   1ae6a:	4b31      	ldr	r3, [pc, #196]	; (1af30 <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1ae6c:	4798      	blx	r3
   1ae6e:	693b      	ldr	r3, [r7, #16]
   1ae70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ae72:	60bb      	str	r3, [r7, #8]
   1ae74:	693b      	ldr	r3, [r7, #16]
   1ae76:	697a      	ldr	r2, [r7, #20]
   1ae78:	62da      	str	r2, [r3, #44]	; 0x2c
   1ae7a:	693b      	ldr	r3, [r7, #16]
   1ae7c:	699b      	ldr	r3, [r3, #24]
   1ae7e:	2b00      	cmp	r3, #0
   1ae80:	db04      	blt.n	1ae8c <vTaskPriorityDisinheritAfterTimeout+0xe0>
   1ae82:	697b      	ldr	r3, [r7, #20]
   1ae84:	2205      	movs	r2, #5
   1ae86:	1ad2      	subs	r2, r2, r3
   1ae88:	693b      	ldr	r3, [r7, #16]
   1ae8a:	619a      	str	r2, [r3, #24]
   1ae8c:	693b      	ldr	r3, [r7, #16]
   1ae8e:	6959      	ldr	r1, [r3, #20]
   1ae90:	68ba      	ldr	r2, [r7, #8]
   1ae92:	0013      	movs	r3, r2
   1ae94:	009b      	lsls	r3, r3, #2
   1ae96:	189b      	adds	r3, r3, r2
   1ae98:	009b      	lsls	r3, r3, #2
   1ae9a:	4a26      	ldr	r2, [pc, #152]	; (1af34 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1ae9c:	189b      	adds	r3, r3, r2
   1ae9e:	4299      	cmp	r1, r3
   1aea0:	d101      	bne.n	1aea6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1aea2:	2301      	movs	r3, #1
   1aea4:	e000      	b.n	1aea8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1aea6:	2300      	movs	r3, #0
   1aea8:	2b00      	cmp	r3, #0
   1aeaa:	d031      	beq.n	1af10 <vTaskPriorityDisinheritAfterTimeout+0x164>
   1aeac:	693b      	ldr	r3, [r7, #16]
   1aeae:	3304      	adds	r3, #4
   1aeb0:	0018      	movs	r0, r3
   1aeb2:	4b21      	ldr	r3, [pc, #132]	; (1af38 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1aeb4:	4798      	blx	r3
   1aeb6:	693b      	ldr	r3, [r7, #16]
   1aeb8:	0018      	movs	r0, r3
   1aeba:	4b18      	ldr	r3, [pc, #96]	; (1af1c <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1aebc:	4798      	blx	r3
   1aebe:	0003      	movs	r3, r0
   1aec0:	001a      	movs	r2, r3
   1aec2:	4b17      	ldr	r3, [pc, #92]	; (1af20 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1aec4:	881b      	ldrh	r3, [r3, #0]
   1aec6:	4013      	ands	r3, r2
   1aec8:	b29b      	uxth	r3, r3
   1aeca:	2b00      	cmp	r3, #0
   1aecc:	d008      	beq.n	1aee0 <vTaskPriorityDisinheritAfterTimeout+0x134>
   1aece:	693b      	ldr	r3, [r7, #16]
   1aed0:	0018      	movs	r0, r3
   1aed2:	4b14      	ldr	r3, [pc, #80]	; (1af24 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1aed4:	4798      	blx	r3
   1aed6:	0003      	movs	r3, r0
   1aed8:	b2db      	uxtb	r3, r3
   1aeda:	0018      	movs	r0, r3
   1aedc:	4b17      	ldr	r3, [pc, #92]	; (1af3c <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1aede:	4798      	blx	r3
   1aee0:	693b      	ldr	r3, [r7, #16]
   1aee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1aee4:	4b16      	ldr	r3, [pc, #88]	; (1af40 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1aee6:	681b      	ldr	r3, [r3, #0]
   1aee8:	429a      	cmp	r2, r3
   1aeea:	d903      	bls.n	1aef4 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1aeec:	693b      	ldr	r3, [r7, #16]
   1aeee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1aef0:	4b13      	ldr	r3, [pc, #76]	; (1af40 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1aef2:	601a      	str	r2, [r3, #0]
   1aef4:	693b      	ldr	r3, [r7, #16]
   1aef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1aef8:	0013      	movs	r3, r2
   1aefa:	009b      	lsls	r3, r3, #2
   1aefc:	189b      	adds	r3, r3, r2
   1aefe:	009b      	lsls	r3, r3, #2
   1af00:	4a0c      	ldr	r2, [pc, #48]	; (1af34 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1af02:	189a      	adds	r2, r3, r2
   1af04:	693b      	ldr	r3, [r7, #16]
   1af06:	3304      	adds	r3, #4
   1af08:	0019      	movs	r1, r3
   1af0a:	0010      	movs	r0, r2
   1af0c:	4b0d      	ldr	r3, [pc, #52]	; (1af44 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1af0e:	4798      	blx	r3
   1af10:	46c0      	nop			; (mov r8, r8)
   1af12:	46bd      	mov	sp, r7
   1af14:	b007      	add	sp, #28
   1af16:	bd90      	pop	{r4, r7, pc}
   1af18:	20003b34 	.word	0x20003b34
   1af1c:	00015d59 	.word	0x00015d59
   1af20:	200000f0 	.word	0x200000f0
   1af24:	00015d39 	.word	0x00015d39
   1af28:	00016d11 	.word	0x00016d11
   1af2c:	00016881 	.word	0x00016881
   1af30:	00016c6d 	.word	0x00016c6d
   1af34:	20003b38 	.word	0x20003b38
   1af38:	00017bd3 	.word	0x00017bd3
   1af3c:	00016509 	.word	0x00016509
   1af40:	20003c14 	.word	0x20003c14
   1af44:	00017b23 	.word	0x00017b23

0001af48 <pvTaskIncrementMutexHeldCount>:
   1af48:	b580      	push	{r7, lr}
   1af4a:	af00      	add	r7, sp, #0
   1af4c:	4b06      	ldr	r3, [pc, #24]	; (1af68 <pvTaskIncrementMutexHeldCount+0x20>)
   1af4e:	681b      	ldr	r3, [r3, #0]
   1af50:	2b00      	cmp	r3, #0
   1af52:	d004      	beq.n	1af5e <pvTaskIncrementMutexHeldCount+0x16>
   1af54:	4b04      	ldr	r3, [pc, #16]	; (1af68 <pvTaskIncrementMutexHeldCount+0x20>)
   1af56:	681b      	ldr	r3, [r3, #0]
   1af58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1af5a:	3201      	adds	r2, #1
   1af5c:	649a      	str	r2, [r3, #72]	; 0x48
   1af5e:	4b02      	ldr	r3, [pc, #8]	; (1af68 <pvTaskIncrementMutexHeldCount+0x20>)
   1af60:	681b      	ldr	r3, [r3, #0]
   1af62:	0018      	movs	r0, r3
   1af64:	46bd      	mov	sp, r7
   1af66:	bd80      	pop	{r7, pc}
   1af68:	20003b34 	.word	0x20003b34

0001af6c <prvAddCurrentTaskToDelayedList>:
   1af6c:	b580      	push	{r7, lr}
   1af6e:	b084      	sub	sp, #16
   1af70:	af00      	add	r7, sp, #0
   1af72:	6078      	str	r0, [r7, #4]
   1af74:	6039      	str	r1, [r7, #0]
   1af76:	4b21      	ldr	r3, [pc, #132]	; (1affc <prvAddCurrentTaskToDelayedList+0x90>)
   1af78:	681b      	ldr	r3, [r3, #0]
   1af7a:	60fb      	str	r3, [r7, #12]
   1af7c:	4b20      	ldr	r3, [pc, #128]	; (1b000 <prvAddCurrentTaskToDelayedList+0x94>)
   1af7e:	681b      	ldr	r3, [r3, #0]
   1af80:	3304      	adds	r3, #4
   1af82:	0018      	movs	r0, r3
   1af84:	4b1f      	ldr	r3, [pc, #124]	; (1b004 <prvAddCurrentTaskToDelayedList+0x98>)
   1af86:	4798      	blx	r3
   1af88:	687b      	ldr	r3, [r7, #4]
   1af8a:	3301      	adds	r3, #1
   1af8c:	d10b      	bne.n	1afa6 <prvAddCurrentTaskToDelayedList+0x3a>
   1af8e:	683b      	ldr	r3, [r7, #0]
   1af90:	2b00      	cmp	r3, #0
   1af92:	d008      	beq.n	1afa6 <prvAddCurrentTaskToDelayedList+0x3a>
   1af94:	4b1a      	ldr	r3, [pc, #104]	; (1b000 <prvAddCurrentTaskToDelayedList+0x94>)
   1af96:	681b      	ldr	r3, [r3, #0]
   1af98:	1d1a      	adds	r2, r3, #4
   1af9a:	4b1b      	ldr	r3, [pc, #108]	; (1b008 <prvAddCurrentTaskToDelayedList+0x9c>)
   1af9c:	0011      	movs	r1, r2
   1af9e:	0018      	movs	r0, r3
   1afa0:	4b1a      	ldr	r3, [pc, #104]	; (1b00c <prvAddCurrentTaskToDelayedList+0xa0>)
   1afa2:	4798      	blx	r3
   1afa4:	e026      	b.n	1aff4 <prvAddCurrentTaskToDelayedList+0x88>
   1afa6:	68fa      	ldr	r2, [r7, #12]
   1afa8:	687b      	ldr	r3, [r7, #4]
   1afaa:	18d3      	adds	r3, r2, r3
   1afac:	60bb      	str	r3, [r7, #8]
   1afae:	4b14      	ldr	r3, [pc, #80]	; (1b000 <prvAddCurrentTaskToDelayedList+0x94>)
   1afb0:	681b      	ldr	r3, [r3, #0]
   1afb2:	68ba      	ldr	r2, [r7, #8]
   1afb4:	605a      	str	r2, [r3, #4]
   1afb6:	68ba      	ldr	r2, [r7, #8]
   1afb8:	68fb      	ldr	r3, [r7, #12]
   1afba:	429a      	cmp	r2, r3
   1afbc:	d209      	bcs.n	1afd2 <prvAddCurrentTaskToDelayedList+0x66>
   1afbe:	4b14      	ldr	r3, [pc, #80]	; (1b010 <prvAddCurrentTaskToDelayedList+0xa4>)
   1afc0:	681a      	ldr	r2, [r3, #0]
   1afc2:	4b0f      	ldr	r3, [pc, #60]	; (1b000 <prvAddCurrentTaskToDelayedList+0x94>)
   1afc4:	681b      	ldr	r3, [r3, #0]
   1afc6:	3304      	adds	r3, #4
   1afc8:	0019      	movs	r1, r3
   1afca:	0010      	movs	r0, r2
   1afcc:	4b11      	ldr	r3, [pc, #68]	; (1b014 <prvAddCurrentTaskToDelayedList+0xa8>)
   1afce:	4798      	blx	r3
   1afd0:	e010      	b.n	1aff4 <prvAddCurrentTaskToDelayedList+0x88>
   1afd2:	4b11      	ldr	r3, [pc, #68]	; (1b018 <prvAddCurrentTaskToDelayedList+0xac>)
   1afd4:	681a      	ldr	r2, [r3, #0]
   1afd6:	4b0a      	ldr	r3, [pc, #40]	; (1b000 <prvAddCurrentTaskToDelayedList+0x94>)
   1afd8:	681b      	ldr	r3, [r3, #0]
   1afda:	3304      	adds	r3, #4
   1afdc:	0019      	movs	r1, r3
   1afde:	0010      	movs	r0, r2
   1afe0:	4b0c      	ldr	r3, [pc, #48]	; (1b014 <prvAddCurrentTaskToDelayedList+0xa8>)
   1afe2:	4798      	blx	r3
   1afe4:	4b0d      	ldr	r3, [pc, #52]	; (1b01c <prvAddCurrentTaskToDelayedList+0xb0>)
   1afe6:	681b      	ldr	r3, [r3, #0]
   1afe8:	68ba      	ldr	r2, [r7, #8]
   1afea:	429a      	cmp	r2, r3
   1afec:	d202      	bcs.n	1aff4 <prvAddCurrentTaskToDelayedList+0x88>
   1afee:	4b0b      	ldr	r3, [pc, #44]	; (1b01c <prvAddCurrentTaskToDelayedList+0xb0>)
   1aff0:	68ba      	ldr	r2, [r7, #8]
   1aff2:	601a      	str	r2, [r3, #0]
   1aff4:	46c0      	nop			; (mov r8, r8)
   1aff6:	46bd      	mov	sp, r7
   1aff8:	b004      	add	sp, #16
   1affa:	bd80      	pop	{r7, pc}
   1affc:	20003c10 	.word	0x20003c10
   1b000:	20003b34 	.word	0x20003b34
   1b004:	00017bd3 	.word	0x00017bd3
   1b008:	20003bf8 	.word	0x20003bf8
   1b00c:	00017b23 	.word	0x00017b23
   1b010:	20003bc8 	.word	0x20003bc8
   1b014:	00017b67 	.word	0x00017b67
   1b018:	20003bc4 	.word	0x20003bc4
   1b01c:	20003c2c 	.word	0x20003c2c

0001b020 <xTimerCreateTimerTask>:
   1b020:	b590      	push	{r4, r7, lr}
   1b022:	b085      	sub	sp, #20
   1b024:	af02      	add	r7, sp, #8
   1b026:	2300      	movs	r3, #0
   1b028:	607b      	str	r3, [r7, #4]
   1b02a:	4b0e      	ldr	r3, [pc, #56]	; (1b064 <xTimerCreateTimerTask+0x44>)
   1b02c:	4798      	blx	r3
   1b02e:	4b0e      	ldr	r3, [pc, #56]	; (1b068 <xTimerCreateTimerTask+0x48>)
   1b030:	681b      	ldr	r3, [r3, #0]
   1b032:	2b00      	cmp	r3, #0
   1b034:	d00b      	beq.n	1b04e <xTimerCreateTimerTask+0x2e>
   1b036:	490d      	ldr	r1, [pc, #52]	; (1b06c <xTimerCreateTimerTask+0x4c>)
   1b038:	480d      	ldr	r0, [pc, #52]	; (1b070 <xTimerCreateTimerTask+0x50>)
   1b03a:	4b0e      	ldr	r3, [pc, #56]	; (1b074 <xTimerCreateTimerTask+0x54>)
   1b03c:	9301      	str	r3, [sp, #4]
   1b03e:	2302      	movs	r3, #2
   1b040:	9300      	str	r3, [sp, #0]
   1b042:	2300      	movs	r3, #0
   1b044:	2280      	movs	r2, #128	; 0x80
   1b046:	4c0c      	ldr	r4, [pc, #48]	; (1b078 <xTimerCreateTimerTask+0x58>)
   1b048:	47a0      	blx	r4
   1b04a:	0003      	movs	r3, r0
   1b04c:	607b      	str	r3, [r7, #4]
   1b04e:	687b      	ldr	r3, [r7, #4]
   1b050:	2b00      	cmp	r3, #0
   1b052:	d101      	bne.n	1b058 <xTimerCreateTimerTask+0x38>
   1b054:	b672      	cpsid	i
   1b056:	e7fe      	b.n	1b056 <xTimerCreateTimerTask+0x36>
   1b058:	687b      	ldr	r3, [r7, #4]
   1b05a:	0018      	movs	r0, r3
   1b05c:	46bd      	mov	sp, r7
   1b05e:	b003      	add	sp, #12
   1b060:	bd90      	pop	{r4, r7, pc}
   1b062:	46c0      	nop			; (mov r8, r8)
   1b064:	0001b569 	.word	0x0001b569
   1b068:	20003c68 	.word	0x20003c68
   1b06c:	000356d0 	.word	0x000356d0
   1b070:	0001b1a1 	.word	0x0001b1a1
   1b074:	20003c6c 	.word	0x20003c6c
   1b078:	000199b9 	.word	0x000199b9

0001b07c <xTimerGenericCommand>:
   1b07c:	b590      	push	{r4, r7, lr}
   1b07e:	b089      	sub	sp, #36	; 0x24
   1b080:	af00      	add	r7, sp, #0
   1b082:	60f8      	str	r0, [r7, #12]
   1b084:	60b9      	str	r1, [r7, #8]
   1b086:	607a      	str	r2, [r7, #4]
   1b088:	603b      	str	r3, [r7, #0]
   1b08a:	2300      	movs	r3, #0
   1b08c:	61fb      	str	r3, [r7, #28]
   1b08e:	68fb      	ldr	r3, [r7, #12]
   1b090:	2b00      	cmp	r3, #0
   1b092:	d101      	bne.n	1b098 <xTimerGenericCommand+0x1c>
   1b094:	b672      	cpsid	i
   1b096:	e7fe      	b.n	1b096 <xTimerGenericCommand+0x1a>
   1b098:	4b1e      	ldr	r3, [pc, #120]	; (1b114 <xTimerGenericCommand+0x98>)
   1b09a:	681b      	ldr	r3, [r3, #0]
   1b09c:	2b00      	cmp	r3, #0
   1b09e:	d033      	beq.n	1b108 <xTimerGenericCommand+0x8c>
   1b0a0:	2310      	movs	r3, #16
   1b0a2:	18fb      	adds	r3, r7, r3
   1b0a4:	68ba      	ldr	r2, [r7, #8]
   1b0a6:	601a      	str	r2, [r3, #0]
   1b0a8:	2310      	movs	r3, #16
   1b0aa:	18fb      	adds	r3, r7, r3
   1b0ac:	687a      	ldr	r2, [r7, #4]
   1b0ae:	605a      	str	r2, [r3, #4]
   1b0b0:	2310      	movs	r3, #16
   1b0b2:	18fb      	adds	r3, r7, r3
   1b0b4:	68fa      	ldr	r2, [r7, #12]
   1b0b6:	609a      	str	r2, [r3, #8]
   1b0b8:	68bb      	ldr	r3, [r7, #8]
   1b0ba:	2b05      	cmp	r3, #5
   1b0bc:	dc1a      	bgt.n	1b0f4 <xTimerGenericCommand+0x78>
   1b0be:	4b16      	ldr	r3, [pc, #88]	; (1b118 <xTimerGenericCommand+0x9c>)
   1b0c0:	4798      	blx	r3
   1b0c2:	0003      	movs	r3, r0
   1b0c4:	2b02      	cmp	r3, #2
   1b0c6:	d10a      	bne.n	1b0de <xTimerGenericCommand+0x62>
   1b0c8:	4b12      	ldr	r3, [pc, #72]	; (1b114 <xTimerGenericCommand+0x98>)
   1b0ca:	6818      	ldr	r0, [r3, #0]
   1b0cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1b0ce:	2310      	movs	r3, #16
   1b0d0:	18f9      	adds	r1, r7, r3
   1b0d2:	2300      	movs	r3, #0
   1b0d4:	4c11      	ldr	r4, [pc, #68]	; (1b11c <xTimerGenericCommand+0xa0>)
   1b0d6:	47a0      	blx	r4
   1b0d8:	0003      	movs	r3, r0
   1b0da:	61fb      	str	r3, [r7, #28]
   1b0dc:	e014      	b.n	1b108 <xTimerGenericCommand+0x8c>
   1b0de:	4b0d      	ldr	r3, [pc, #52]	; (1b114 <xTimerGenericCommand+0x98>)
   1b0e0:	6818      	ldr	r0, [r3, #0]
   1b0e2:	2310      	movs	r3, #16
   1b0e4:	18f9      	adds	r1, r7, r3
   1b0e6:	2300      	movs	r3, #0
   1b0e8:	2200      	movs	r2, #0
   1b0ea:	4c0c      	ldr	r4, [pc, #48]	; (1b11c <xTimerGenericCommand+0xa0>)
   1b0ec:	47a0      	blx	r4
   1b0ee:	0003      	movs	r3, r0
   1b0f0:	61fb      	str	r3, [r7, #28]
   1b0f2:	e009      	b.n	1b108 <xTimerGenericCommand+0x8c>
   1b0f4:	4b07      	ldr	r3, [pc, #28]	; (1b114 <xTimerGenericCommand+0x98>)
   1b0f6:	6818      	ldr	r0, [r3, #0]
   1b0f8:	683a      	ldr	r2, [r7, #0]
   1b0fa:	2310      	movs	r3, #16
   1b0fc:	18f9      	adds	r1, r7, r3
   1b0fe:	2300      	movs	r3, #0
   1b100:	4c07      	ldr	r4, [pc, #28]	; (1b120 <xTimerGenericCommand+0xa4>)
   1b102:	47a0      	blx	r4
   1b104:	0003      	movs	r3, r0
   1b106:	61fb      	str	r3, [r7, #28]
   1b108:	69fb      	ldr	r3, [r7, #28]
   1b10a:	0018      	movs	r0, r3
   1b10c:	46bd      	mov	sp, r7
   1b10e:	b009      	add	sp, #36	; 0x24
   1b110:	bd90      	pop	{r4, r7, pc}
   1b112:	46c0      	nop			; (mov r8, r8)
   1b114:	20003c68 	.word	0x20003c68
   1b118:	0001aa7d 	.word	0x0001aa7d
   1b11c:	000182f1 	.word	0x000182f1
   1b120:	00018751 	.word	0x00018751

0001b124 <prvProcessExpiredTimer>:
   1b124:	b590      	push	{r4, r7, lr}
   1b126:	b087      	sub	sp, #28
   1b128:	af02      	add	r7, sp, #8
   1b12a:	6078      	str	r0, [r7, #4]
   1b12c:	6039      	str	r1, [r7, #0]
   1b12e:	4b18      	ldr	r3, [pc, #96]	; (1b190 <prvProcessExpiredTimer+0x6c>)
   1b130:	681b      	ldr	r3, [r3, #0]
   1b132:	68db      	ldr	r3, [r3, #12]
   1b134:	68db      	ldr	r3, [r3, #12]
   1b136:	60fb      	str	r3, [r7, #12]
   1b138:	68fb      	ldr	r3, [r7, #12]
   1b13a:	3304      	adds	r3, #4
   1b13c:	0018      	movs	r0, r3
   1b13e:	4b15      	ldr	r3, [pc, #84]	; (1b194 <prvProcessExpiredTimer+0x70>)
   1b140:	4798      	blx	r3
   1b142:	68fb      	ldr	r3, [r7, #12]
   1b144:	69db      	ldr	r3, [r3, #28]
   1b146:	2b01      	cmp	r3, #1
   1b148:	d119      	bne.n	1b17e <prvProcessExpiredTimer+0x5a>
   1b14a:	68fb      	ldr	r3, [r7, #12]
   1b14c:	699a      	ldr	r2, [r3, #24]
   1b14e:	687b      	ldr	r3, [r7, #4]
   1b150:	18d1      	adds	r1, r2, r3
   1b152:	687b      	ldr	r3, [r7, #4]
   1b154:	683a      	ldr	r2, [r7, #0]
   1b156:	68f8      	ldr	r0, [r7, #12]
   1b158:	4c0f      	ldr	r4, [pc, #60]	; (1b198 <prvProcessExpiredTimer+0x74>)
   1b15a:	47a0      	blx	r4
   1b15c:	1e03      	subs	r3, r0, #0
   1b15e:	d00e      	beq.n	1b17e <prvProcessExpiredTimer+0x5a>
   1b160:	687a      	ldr	r2, [r7, #4]
   1b162:	68f8      	ldr	r0, [r7, #12]
   1b164:	2300      	movs	r3, #0
   1b166:	9300      	str	r3, [sp, #0]
   1b168:	2300      	movs	r3, #0
   1b16a:	2100      	movs	r1, #0
   1b16c:	4c0b      	ldr	r4, [pc, #44]	; (1b19c <prvProcessExpiredTimer+0x78>)
   1b16e:	47a0      	blx	r4
   1b170:	0003      	movs	r3, r0
   1b172:	60bb      	str	r3, [r7, #8]
   1b174:	68bb      	ldr	r3, [r7, #8]
   1b176:	2b00      	cmp	r3, #0
   1b178:	d101      	bne.n	1b17e <prvProcessExpiredTimer+0x5a>
   1b17a:	b672      	cpsid	i
   1b17c:	e7fe      	b.n	1b17c <prvProcessExpiredTimer+0x58>
   1b17e:	68fb      	ldr	r3, [r7, #12]
   1b180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b182:	68fa      	ldr	r2, [r7, #12]
   1b184:	0010      	movs	r0, r2
   1b186:	4798      	blx	r3
   1b188:	46c0      	nop			; (mov r8, r8)
   1b18a:	46bd      	mov	sp, r7
   1b18c:	b005      	add	sp, #20
   1b18e:	bd90      	pop	{r4, r7, pc}
   1b190:	20003c60 	.word	0x20003c60
   1b194:	00017bd3 	.word	0x00017bd3
   1b198:	0001b309 	.word	0x0001b309
   1b19c:	0001b07d 	.word	0x0001b07d

0001b1a0 <prvTimerTask>:
   1b1a0:	b580      	push	{r7, lr}
   1b1a2:	b084      	sub	sp, #16
   1b1a4:	af00      	add	r7, sp, #0
   1b1a6:	6078      	str	r0, [r7, #4]
   1b1a8:	4b08      	ldr	r3, [pc, #32]	; (1b1cc <prvTimerTask+0x2c>)
   1b1aa:	4798      	blx	r3
   1b1ac:	2308      	movs	r3, #8
   1b1ae:	18fb      	adds	r3, r7, r3
   1b1b0:	0018      	movs	r0, r3
   1b1b2:	4b07      	ldr	r3, [pc, #28]	; (1b1d0 <prvTimerTask+0x30>)
   1b1b4:	4798      	blx	r3
   1b1b6:	0003      	movs	r3, r0
   1b1b8:	60fb      	str	r3, [r7, #12]
   1b1ba:	68ba      	ldr	r2, [r7, #8]
   1b1bc:	68fb      	ldr	r3, [r7, #12]
   1b1be:	0011      	movs	r1, r2
   1b1c0:	0018      	movs	r0, r3
   1b1c2:	4b04      	ldr	r3, [pc, #16]	; (1b1d4 <prvTimerTask+0x34>)
   1b1c4:	4798      	blx	r3
   1b1c6:	4b04      	ldr	r3, [pc, #16]	; (1b1d8 <prvTimerTask+0x38>)
   1b1c8:	4798      	blx	r3
   1b1ca:	e7ef      	b.n	1b1ac <prvTimerTask+0xc>
   1b1cc:	00030371 	.word	0x00030371
   1b1d0:	0001b281 	.word	0x0001b281
   1b1d4:	0001b1dd 	.word	0x0001b1dd
   1b1d8:	0001b391 	.word	0x0001b391

0001b1dc <prvProcessTimerOrBlockTask>:
   1b1dc:	b580      	push	{r7, lr}
   1b1de:	b084      	sub	sp, #16
   1b1e0:	af00      	add	r7, sp, #0
   1b1e2:	6078      	str	r0, [r7, #4]
   1b1e4:	6039      	str	r1, [r7, #0]
   1b1e6:	4b1e      	ldr	r3, [pc, #120]	; (1b260 <prvProcessTimerOrBlockTask+0x84>)
   1b1e8:	4798      	blx	r3
   1b1ea:	2308      	movs	r3, #8
   1b1ec:	18fb      	adds	r3, r7, r3
   1b1ee:	0018      	movs	r0, r3
   1b1f0:	4b1c      	ldr	r3, [pc, #112]	; (1b264 <prvProcessTimerOrBlockTask+0x88>)
   1b1f2:	4798      	blx	r3
   1b1f4:	0003      	movs	r3, r0
   1b1f6:	60fb      	str	r3, [r7, #12]
   1b1f8:	68bb      	ldr	r3, [r7, #8]
   1b1fa:	2b00      	cmp	r3, #0
   1b1fc:	d129      	bne.n	1b252 <prvProcessTimerOrBlockTask+0x76>
   1b1fe:	683b      	ldr	r3, [r7, #0]
   1b200:	2b00      	cmp	r3, #0
   1b202:	d10c      	bne.n	1b21e <prvProcessTimerOrBlockTask+0x42>
   1b204:	687a      	ldr	r2, [r7, #4]
   1b206:	68fb      	ldr	r3, [r7, #12]
   1b208:	429a      	cmp	r2, r3
   1b20a:	d808      	bhi.n	1b21e <prvProcessTimerOrBlockTask+0x42>
   1b20c:	4b16      	ldr	r3, [pc, #88]	; (1b268 <prvProcessTimerOrBlockTask+0x8c>)
   1b20e:	4798      	blx	r3
   1b210:	68fa      	ldr	r2, [r7, #12]
   1b212:	687b      	ldr	r3, [r7, #4]
   1b214:	0011      	movs	r1, r2
   1b216:	0018      	movs	r0, r3
   1b218:	4b14      	ldr	r3, [pc, #80]	; (1b26c <prvProcessTimerOrBlockTask+0x90>)
   1b21a:	4798      	blx	r3
   1b21c:	e01b      	b.n	1b256 <prvProcessTimerOrBlockTask+0x7a>
   1b21e:	683b      	ldr	r3, [r7, #0]
   1b220:	2b00      	cmp	r3, #0
   1b222:	d006      	beq.n	1b232 <prvProcessTimerOrBlockTask+0x56>
   1b224:	4b12      	ldr	r3, [pc, #72]	; (1b270 <prvProcessTimerOrBlockTask+0x94>)
   1b226:	681b      	ldr	r3, [r3, #0]
   1b228:	681b      	ldr	r3, [r3, #0]
   1b22a:	425a      	negs	r2, r3
   1b22c:	4153      	adcs	r3, r2
   1b22e:	b2db      	uxtb	r3, r3
   1b230:	603b      	str	r3, [r7, #0]
   1b232:	4b10      	ldr	r3, [pc, #64]	; (1b274 <prvProcessTimerOrBlockTask+0x98>)
   1b234:	6818      	ldr	r0, [r3, #0]
   1b236:	687a      	ldr	r2, [r7, #4]
   1b238:	68fb      	ldr	r3, [r7, #12]
   1b23a:	1ad3      	subs	r3, r2, r3
   1b23c:	683a      	ldr	r2, [r7, #0]
   1b23e:	0019      	movs	r1, r3
   1b240:	4b0d      	ldr	r3, [pc, #52]	; (1b278 <prvProcessTimerOrBlockTask+0x9c>)
   1b242:	4798      	blx	r3
   1b244:	4b08      	ldr	r3, [pc, #32]	; (1b268 <prvProcessTimerOrBlockTask+0x8c>)
   1b246:	4798      	blx	r3
   1b248:	1e03      	subs	r3, r0, #0
   1b24a:	d104      	bne.n	1b256 <prvProcessTimerOrBlockTask+0x7a>
   1b24c:	4b0b      	ldr	r3, [pc, #44]	; (1b27c <prvProcessTimerOrBlockTask+0xa0>)
   1b24e:	4798      	blx	r3
   1b250:	e001      	b.n	1b256 <prvProcessTimerOrBlockTask+0x7a>
   1b252:	4b05      	ldr	r3, [pc, #20]	; (1b268 <prvProcessTimerOrBlockTask+0x8c>)
   1b254:	4798      	blx	r3
   1b256:	46c0      	nop			; (mov r8, r8)
   1b258:	46bd      	mov	sp, r7
   1b25a:	b004      	add	sp, #16
   1b25c:	bd80      	pop	{r7, pc}
   1b25e:	46c0      	nop			; (mov r8, r8)
   1b260:	0001a015 	.word	0x0001a015
   1b264:	0001b2c1 	.word	0x0001b2c1
   1b268:	0001a02d 	.word	0x0001a02d
   1b26c:	0001b125 	.word	0x0001b125
   1b270:	20003c64 	.word	0x20003c64
   1b274:	20003c68 	.word	0x20003c68
   1b278:	000197b5 	.word	0x000197b5
   1b27c:	00017d41 	.word	0x00017d41

0001b280 <prvGetNextExpireTime>:
   1b280:	b580      	push	{r7, lr}
   1b282:	b084      	sub	sp, #16
   1b284:	af00      	add	r7, sp, #0
   1b286:	6078      	str	r0, [r7, #4]
   1b288:	4b0c      	ldr	r3, [pc, #48]	; (1b2bc <prvGetNextExpireTime+0x3c>)
   1b28a:	681b      	ldr	r3, [r3, #0]
   1b28c:	681b      	ldr	r3, [r3, #0]
   1b28e:	425a      	negs	r2, r3
   1b290:	4153      	adcs	r3, r2
   1b292:	b2db      	uxtb	r3, r3
   1b294:	001a      	movs	r2, r3
   1b296:	687b      	ldr	r3, [r7, #4]
   1b298:	601a      	str	r2, [r3, #0]
   1b29a:	687b      	ldr	r3, [r7, #4]
   1b29c:	681b      	ldr	r3, [r3, #0]
   1b29e:	2b00      	cmp	r3, #0
   1b2a0:	d105      	bne.n	1b2ae <prvGetNextExpireTime+0x2e>
   1b2a2:	4b06      	ldr	r3, [pc, #24]	; (1b2bc <prvGetNextExpireTime+0x3c>)
   1b2a4:	681b      	ldr	r3, [r3, #0]
   1b2a6:	68db      	ldr	r3, [r3, #12]
   1b2a8:	681b      	ldr	r3, [r3, #0]
   1b2aa:	60fb      	str	r3, [r7, #12]
   1b2ac:	e001      	b.n	1b2b2 <prvGetNextExpireTime+0x32>
   1b2ae:	2300      	movs	r3, #0
   1b2b0:	60fb      	str	r3, [r7, #12]
   1b2b2:	68fb      	ldr	r3, [r7, #12]
   1b2b4:	0018      	movs	r0, r3
   1b2b6:	46bd      	mov	sp, r7
   1b2b8:	b004      	add	sp, #16
   1b2ba:	bd80      	pop	{r7, pc}
   1b2bc:	20003c60 	.word	0x20003c60

0001b2c0 <prvSampleTimeNow>:
   1b2c0:	b580      	push	{r7, lr}
   1b2c2:	b084      	sub	sp, #16
   1b2c4:	af00      	add	r7, sp, #0
   1b2c6:	6078      	str	r0, [r7, #4]
   1b2c8:	4b0c      	ldr	r3, [pc, #48]	; (1b2fc <prvSampleTimeNow+0x3c>)
   1b2ca:	4798      	blx	r3
   1b2cc:	0003      	movs	r3, r0
   1b2ce:	60fb      	str	r3, [r7, #12]
   1b2d0:	4b0b      	ldr	r3, [pc, #44]	; (1b300 <prvSampleTimeNow+0x40>)
   1b2d2:	681b      	ldr	r3, [r3, #0]
   1b2d4:	68fa      	ldr	r2, [r7, #12]
   1b2d6:	429a      	cmp	r2, r3
   1b2d8:	d205      	bcs.n	1b2e6 <prvSampleTimeNow+0x26>
   1b2da:	4b0a      	ldr	r3, [pc, #40]	; (1b304 <prvSampleTimeNow+0x44>)
   1b2dc:	4798      	blx	r3
   1b2de:	687b      	ldr	r3, [r7, #4]
   1b2e0:	2201      	movs	r2, #1
   1b2e2:	601a      	str	r2, [r3, #0]
   1b2e4:	e002      	b.n	1b2ec <prvSampleTimeNow+0x2c>
   1b2e6:	687b      	ldr	r3, [r7, #4]
   1b2e8:	2200      	movs	r2, #0
   1b2ea:	601a      	str	r2, [r3, #0]
   1b2ec:	4b04      	ldr	r3, [pc, #16]	; (1b300 <prvSampleTimeNow+0x40>)
   1b2ee:	68fa      	ldr	r2, [r7, #12]
   1b2f0:	601a      	str	r2, [r3, #0]
   1b2f2:	68fb      	ldr	r3, [r7, #12]
   1b2f4:	0018      	movs	r0, r3
   1b2f6:	46bd      	mov	sp, r7
   1b2f8:	b004      	add	sp, #16
   1b2fa:	bd80      	pop	{r7, pc}
   1b2fc:	0001a19d 	.word	0x0001a19d
   1b300:	20003c70 	.word	0x20003c70
   1b304:	0001b4a9 	.word	0x0001b4a9

0001b308 <prvInsertTimerInActiveList>:
   1b308:	b580      	push	{r7, lr}
   1b30a:	b086      	sub	sp, #24
   1b30c:	af00      	add	r7, sp, #0
   1b30e:	60f8      	str	r0, [r7, #12]
   1b310:	60b9      	str	r1, [r7, #8]
   1b312:	607a      	str	r2, [r7, #4]
   1b314:	603b      	str	r3, [r7, #0]
   1b316:	2300      	movs	r3, #0
   1b318:	617b      	str	r3, [r7, #20]
   1b31a:	68fb      	ldr	r3, [r7, #12]
   1b31c:	68ba      	ldr	r2, [r7, #8]
   1b31e:	605a      	str	r2, [r3, #4]
   1b320:	68fb      	ldr	r3, [r7, #12]
   1b322:	68fa      	ldr	r2, [r7, #12]
   1b324:	611a      	str	r2, [r3, #16]
   1b326:	68ba      	ldr	r2, [r7, #8]
   1b328:	687b      	ldr	r3, [r7, #4]
   1b32a:	429a      	cmp	r2, r3
   1b32c:	d812      	bhi.n	1b354 <prvInsertTimerInActiveList+0x4c>
   1b32e:	687a      	ldr	r2, [r7, #4]
   1b330:	683b      	ldr	r3, [r7, #0]
   1b332:	1ad2      	subs	r2, r2, r3
   1b334:	68fb      	ldr	r3, [r7, #12]
   1b336:	699b      	ldr	r3, [r3, #24]
   1b338:	429a      	cmp	r2, r3
   1b33a:	d302      	bcc.n	1b342 <prvInsertTimerInActiveList+0x3a>
   1b33c:	2301      	movs	r3, #1
   1b33e:	617b      	str	r3, [r7, #20]
   1b340:	e01b      	b.n	1b37a <prvInsertTimerInActiveList+0x72>
   1b342:	4b10      	ldr	r3, [pc, #64]	; (1b384 <prvInsertTimerInActiveList+0x7c>)
   1b344:	681a      	ldr	r2, [r3, #0]
   1b346:	68fb      	ldr	r3, [r7, #12]
   1b348:	3304      	adds	r3, #4
   1b34a:	0019      	movs	r1, r3
   1b34c:	0010      	movs	r0, r2
   1b34e:	4b0e      	ldr	r3, [pc, #56]	; (1b388 <prvInsertTimerInActiveList+0x80>)
   1b350:	4798      	blx	r3
   1b352:	e012      	b.n	1b37a <prvInsertTimerInActiveList+0x72>
   1b354:	687a      	ldr	r2, [r7, #4]
   1b356:	683b      	ldr	r3, [r7, #0]
   1b358:	429a      	cmp	r2, r3
   1b35a:	d206      	bcs.n	1b36a <prvInsertTimerInActiveList+0x62>
   1b35c:	68ba      	ldr	r2, [r7, #8]
   1b35e:	683b      	ldr	r3, [r7, #0]
   1b360:	429a      	cmp	r2, r3
   1b362:	d302      	bcc.n	1b36a <prvInsertTimerInActiveList+0x62>
   1b364:	2301      	movs	r3, #1
   1b366:	617b      	str	r3, [r7, #20]
   1b368:	e007      	b.n	1b37a <prvInsertTimerInActiveList+0x72>
   1b36a:	4b08      	ldr	r3, [pc, #32]	; (1b38c <prvInsertTimerInActiveList+0x84>)
   1b36c:	681a      	ldr	r2, [r3, #0]
   1b36e:	68fb      	ldr	r3, [r7, #12]
   1b370:	3304      	adds	r3, #4
   1b372:	0019      	movs	r1, r3
   1b374:	0010      	movs	r0, r2
   1b376:	4b04      	ldr	r3, [pc, #16]	; (1b388 <prvInsertTimerInActiveList+0x80>)
   1b378:	4798      	blx	r3
   1b37a:	697b      	ldr	r3, [r7, #20]
   1b37c:	0018      	movs	r0, r3
   1b37e:	46bd      	mov	sp, r7
   1b380:	b006      	add	sp, #24
   1b382:	bd80      	pop	{r7, pc}
   1b384:	20003c64 	.word	0x20003c64
   1b388:	00017b67 	.word	0x00017b67
   1b38c:	20003c60 	.word	0x20003c60

0001b390 <prvProcessReceivedCommands>:
   1b390:	b590      	push	{r4, r7, lr}
   1b392:	b08b      	sub	sp, #44	; 0x2c
   1b394:	af02      	add	r7, sp, #8
   1b396:	e068      	b.n	1b46a <prvProcessReceivedCommands+0xda>
   1b398:	2308      	movs	r3, #8
   1b39a:	18fb      	adds	r3, r7, r3
   1b39c:	681b      	ldr	r3, [r3, #0]
   1b39e:	2b00      	cmp	r3, #0
   1b3a0:	db63      	blt.n	1b46a <prvProcessReceivedCommands+0xda>
   1b3a2:	2308      	movs	r3, #8
   1b3a4:	18fb      	adds	r3, r7, r3
   1b3a6:	689b      	ldr	r3, [r3, #8]
   1b3a8:	61fb      	str	r3, [r7, #28]
   1b3aa:	69fb      	ldr	r3, [r7, #28]
   1b3ac:	695b      	ldr	r3, [r3, #20]
   1b3ae:	2b00      	cmp	r3, #0
   1b3b0:	d004      	beq.n	1b3bc <prvProcessReceivedCommands+0x2c>
   1b3b2:	69fb      	ldr	r3, [r7, #28]
   1b3b4:	3304      	adds	r3, #4
   1b3b6:	0018      	movs	r0, r3
   1b3b8:	4b33      	ldr	r3, [pc, #204]	; (1b488 <prvProcessReceivedCommands+0xf8>)
   1b3ba:	4798      	blx	r3
   1b3bc:	1d3b      	adds	r3, r7, #4
   1b3be:	0018      	movs	r0, r3
   1b3c0:	4b32      	ldr	r3, [pc, #200]	; (1b48c <prvProcessReceivedCommands+0xfc>)
   1b3c2:	4798      	blx	r3
   1b3c4:	0003      	movs	r3, r0
   1b3c6:	61bb      	str	r3, [r7, #24]
   1b3c8:	2308      	movs	r3, #8
   1b3ca:	18fb      	adds	r3, r7, r3
   1b3cc:	681b      	ldr	r3, [r3, #0]
   1b3ce:	2b09      	cmp	r3, #9
   1b3d0:	d84a      	bhi.n	1b468 <prvProcessReceivedCommands+0xd8>
   1b3d2:	009a      	lsls	r2, r3, #2
   1b3d4:	4b2e      	ldr	r3, [pc, #184]	; (1b490 <prvProcessReceivedCommands+0x100>)
   1b3d6:	18d3      	adds	r3, r2, r3
   1b3d8:	681b      	ldr	r3, [r3, #0]
   1b3da:	469f      	mov	pc, r3
   1b3dc:	2308      	movs	r3, #8
   1b3de:	18fb      	adds	r3, r7, r3
   1b3e0:	685a      	ldr	r2, [r3, #4]
   1b3e2:	69fb      	ldr	r3, [r7, #28]
   1b3e4:	699b      	ldr	r3, [r3, #24]
   1b3e6:	18d1      	adds	r1, r2, r3
   1b3e8:	2308      	movs	r3, #8
   1b3ea:	18fb      	adds	r3, r7, r3
   1b3ec:	685b      	ldr	r3, [r3, #4]
   1b3ee:	69ba      	ldr	r2, [r7, #24]
   1b3f0:	69f8      	ldr	r0, [r7, #28]
   1b3f2:	4c28      	ldr	r4, [pc, #160]	; (1b494 <prvProcessReceivedCommands+0x104>)
   1b3f4:	47a0      	blx	r4
   1b3f6:	1e03      	subs	r3, r0, #0
   1b3f8:	d037      	beq.n	1b46a <prvProcessReceivedCommands+0xda>
   1b3fa:	69fb      	ldr	r3, [r7, #28]
   1b3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b3fe:	69fa      	ldr	r2, [r7, #28]
   1b400:	0010      	movs	r0, r2
   1b402:	4798      	blx	r3
   1b404:	69fb      	ldr	r3, [r7, #28]
   1b406:	69db      	ldr	r3, [r3, #28]
   1b408:	2b01      	cmp	r3, #1
   1b40a:	d12e      	bne.n	1b46a <prvProcessReceivedCommands+0xda>
   1b40c:	2308      	movs	r3, #8
   1b40e:	18fb      	adds	r3, r7, r3
   1b410:	685a      	ldr	r2, [r3, #4]
   1b412:	69fb      	ldr	r3, [r7, #28]
   1b414:	699b      	ldr	r3, [r3, #24]
   1b416:	18d2      	adds	r2, r2, r3
   1b418:	69f8      	ldr	r0, [r7, #28]
   1b41a:	2300      	movs	r3, #0
   1b41c:	9300      	str	r3, [sp, #0]
   1b41e:	2300      	movs	r3, #0
   1b420:	2100      	movs	r1, #0
   1b422:	4c1d      	ldr	r4, [pc, #116]	; (1b498 <prvProcessReceivedCommands+0x108>)
   1b424:	47a0      	blx	r4
   1b426:	0003      	movs	r3, r0
   1b428:	617b      	str	r3, [r7, #20]
   1b42a:	697b      	ldr	r3, [r7, #20]
   1b42c:	2b00      	cmp	r3, #0
   1b42e:	d11c      	bne.n	1b46a <prvProcessReceivedCommands+0xda>
   1b430:	b672      	cpsid	i
   1b432:	e7fe      	b.n	1b432 <prvProcessReceivedCommands+0xa2>
   1b434:	2308      	movs	r3, #8
   1b436:	18fb      	adds	r3, r7, r3
   1b438:	685a      	ldr	r2, [r3, #4]
   1b43a:	69fb      	ldr	r3, [r7, #28]
   1b43c:	619a      	str	r2, [r3, #24]
   1b43e:	69fb      	ldr	r3, [r7, #28]
   1b440:	699b      	ldr	r3, [r3, #24]
   1b442:	2b00      	cmp	r3, #0
   1b444:	d101      	bne.n	1b44a <prvProcessReceivedCommands+0xba>
   1b446:	b672      	cpsid	i
   1b448:	e7fe      	b.n	1b448 <prvProcessReceivedCommands+0xb8>
   1b44a:	69fb      	ldr	r3, [r7, #28]
   1b44c:	699a      	ldr	r2, [r3, #24]
   1b44e:	69bb      	ldr	r3, [r7, #24]
   1b450:	18d1      	adds	r1, r2, r3
   1b452:	69bb      	ldr	r3, [r7, #24]
   1b454:	69ba      	ldr	r2, [r7, #24]
   1b456:	69f8      	ldr	r0, [r7, #28]
   1b458:	4c0e      	ldr	r4, [pc, #56]	; (1b494 <prvProcessReceivedCommands+0x104>)
   1b45a:	47a0      	blx	r4
   1b45c:	e005      	b.n	1b46a <prvProcessReceivedCommands+0xda>
   1b45e:	69fb      	ldr	r3, [r7, #28]
   1b460:	0018      	movs	r0, r3
   1b462:	4b0e      	ldr	r3, [pc, #56]	; (1b49c <prvProcessReceivedCommands+0x10c>)
   1b464:	4798      	blx	r3
   1b466:	e000      	b.n	1b46a <prvProcessReceivedCommands+0xda>
   1b468:	46c0      	nop			; (mov r8, r8)
   1b46a:	4b0d      	ldr	r3, [pc, #52]	; (1b4a0 <prvProcessReceivedCommands+0x110>)
   1b46c:	681b      	ldr	r3, [r3, #0]
   1b46e:	2208      	movs	r2, #8
   1b470:	18b9      	adds	r1, r7, r2
   1b472:	2200      	movs	r2, #0
   1b474:	0018      	movs	r0, r3
   1b476:	4b0b      	ldr	r3, [pc, #44]	; (1b4a4 <prvProcessReceivedCommands+0x114>)
   1b478:	4798      	blx	r3
   1b47a:	1e03      	subs	r3, r0, #0
   1b47c:	d18c      	bne.n	1b398 <prvProcessReceivedCommands+0x8>
   1b47e:	46c0      	nop			; (mov r8, r8)
   1b480:	46bd      	mov	sp, r7
   1b482:	b009      	add	sp, #36	; 0x24
   1b484:	bd90      	pop	{r4, r7, pc}
   1b486:	46c0      	nop			; (mov r8, r8)
   1b488:	00017bd3 	.word	0x00017bd3
   1b48c:	0001b2c1 	.word	0x0001b2c1
   1b490:	000356d8 	.word	0x000356d8
   1b494:	0001b309 	.word	0x0001b309
   1b498:	0001b07d 	.word	0x0001b07d
   1b49c:	00017f55 	.word	0x00017f55
   1b4a0:	20003c68 	.word	0x20003c68
   1b4a4:	00018ba9 	.word	0x00018ba9

0001b4a8 <prvSwitchTimerLists>:
   1b4a8:	b590      	push	{r4, r7, lr}
   1b4aa:	b089      	sub	sp, #36	; 0x24
   1b4ac:	af02      	add	r7, sp, #8
   1b4ae:	e03e      	b.n	1b52e <prvSwitchTimerLists+0x86>
   1b4b0:	4b28      	ldr	r3, [pc, #160]	; (1b554 <prvSwitchTimerLists+0xac>)
   1b4b2:	681b      	ldr	r3, [r3, #0]
   1b4b4:	68db      	ldr	r3, [r3, #12]
   1b4b6:	681b      	ldr	r3, [r3, #0]
   1b4b8:	617b      	str	r3, [r7, #20]
   1b4ba:	4b26      	ldr	r3, [pc, #152]	; (1b554 <prvSwitchTimerLists+0xac>)
   1b4bc:	681b      	ldr	r3, [r3, #0]
   1b4be:	68db      	ldr	r3, [r3, #12]
   1b4c0:	68db      	ldr	r3, [r3, #12]
   1b4c2:	613b      	str	r3, [r7, #16]
   1b4c4:	693b      	ldr	r3, [r7, #16]
   1b4c6:	3304      	adds	r3, #4
   1b4c8:	0018      	movs	r0, r3
   1b4ca:	4b23      	ldr	r3, [pc, #140]	; (1b558 <prvSwitchTimerLists+0xb0>)
   1b4cc:	4798      	blx	r3
   1b4ce:	693b      	ldr	r3, [r7, #16]
   1b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b4d2:	693a      	ldr	r2, [r7, #16]
   1b4d4:	0010      	movs	r0, r2
   1b4d6:	4798      	blx	r3
   1b4d8:	693b      	ldr	r3, [r7, #16]
   1b4da:	69db      	ldr	r3, [r3, #28]
   1b4dc:	2b01      	cmp	r3, #1
   1b4de:	d126      	bne.n	1b52e <prvSwitchTimerLists+0x86>
   1b4e0:	693b      	ldr	r3, [r7, #16]
   1b4e2:	699a      	ldr	r2, [r3, #24]
   1b4e4:	697b      	ldr	r3, [r7, #20]
   1b4e6:	18d3      	adds	r3, r2, r3
   1b4e8:	60fb      	str	r3, [r7, #12]
   1b4ea:	68fa      	ldr	r2, [r7, #12]
   1b4ec:	697b      	ldr	r3, [r7, #20]
   1b4ee:	429a      	cmp	r2, r3
   1b4f0:	d90e      	bls.n	1b510 <prvSwitchTimerLists+0x68>
   1b4f2:	693b      	ldr	r3, [r7, #16]
   1b4f4:	68fa      	ldr	r2, [r7, #12]
   1b4f6:	605a      	str	r2, [r3, #4]
   1b4f8:	693b      	ldr	r3, [r7, #16]
   1b4fa:	693a      	ldr	r2, [r7, #16]
   1b4fc:	611a      	str	r2, [r3, #16]
   1b4fe:	4b15      	ldr	r3, [pc, #84]	; (1b554 <prvSwitchTimerLists+0xac>)
   1b500:	681a      	ldr	r2, [r3, #0]
   1b502:	693b      	ldr	r3, [r7, #16]
   1b504:	3304      	adds	r3, #4
   1b506:	0019      	movs	r1, r3
   1b508:	0010      	movs	r0, r2
   1b50a:	4b14      	ldr	r3, [pc, #80]	; (1b55c <prvSwitchTimerLists+0xb4>)
   1b50c:	4798      	blx	r3
   1b50e:	e00e      	b.n	1b52e <prvSwitchTimerLists+0x86>
   1b510:	697a      	ldr	r2, [r7, #20]
   1b512:	6938      	ldr	r0, [r7, #16]
   1b514:	2300      	movs	r3, #0
   1b516:	9300      	str	r3, [sp, #0]
   1b518:	2300      	movs	r3, #0
   1b51a:	2100      	movs	r1, #0
   1b51c:	4c10      	ldr	r4, [pc, #64]	; (1b560 <prvSwitchTimerLists+0xb8>)
   1b51e:	47a0      	blx	r4
   1b520:	0003      	movs	r3, r0
   1b522:	60bb      	str	r3, [r7, #8]
   1b524:	68bb      	ldr	r3, [r7, #8]
   1b526:	2b00      	cmp	r3, #0
   1b528:	d101      	bne.n	1b52e <prvSwitchTimerLists+0x86>
   1b52a:	b672      	cpsid	i
   1b52c:	e7fe      	b.n	1b52c <prvSwitchTimerLists+0x84>
   1b52e:	4b09      	ldr	r3, [pc, #36]	; (1b554 <prvSwitchTimerLists+0xac>)
   1b530:	681b      	ldr	r3, [r3, #0]
   1b532:	681b      	ldr	r3, [r3, #0]
   1b534:	2b00      	cmp	r3, #0
   1b536:	d1bb      	bne.n	1b4b0 <prvSwitchTimerLists+0x8>
   1b538:	4b06      	ldr	r3, [pc, #24]	; (1b554 <prvSwitchTimerLists+0xac>)
   1b53a:	681b      	ldr	r3, [r3, #0]
   1b53c:	607b      	str	r3, [r7, #4]
   1b53e:	4b09      	ldr	r3, [pc, #36]	; (1b564 <prvSwitchTimerLists+0xbc>)
   1b540:	681a      	ldr	r2, [r3, #0]
   1b542:	4b04      	ldr	r3, [pc, #16]	; (1b554 <prvSwitchTimerLists+0xac>)
   1b544:	601a      	str	r2, [r3, #0]
   1b546:	4b07      	ldr	r3, [pc, #28]	; (1b564 <prvSwitchTimerLists+0xbc>)
   1b548:	687a      	ldr	r2, [r7, #4]
   1b54a:	601a      	str	r2, [r3, #0]
   1b54c:	46c0      	nop			; (mov r8, r8)
   1b54e:	46bd      	mov	sp, r7
   1b550:	b007      	add	sp, #28
   1b552:	bd90      	pop	{r4, r7, pc}
   1b554:	20003c60 	.word	0x20003c60
   1b558:	00017bd3 	.word	0x00017bd3
   1b55c:	00017b67 	.word	0x00017b67
   1b560:	0001b07d 	.word	0x0001b07d
   1b564:	20003c64 	.word	0x20003c64

0001b568 <prvCheckForValidListAndQueue>:
   1b568:	b580      	push	{r7, lr}
   1b56a:	af00      	add	r7, sp, #0
   1b56c:	4b10      	ldr	r3, [pc, #64]	; (1b5b0 <prvCheckForValidListAndQueue+0x48>)
   1b56e:	4798      	blx	r3
   1b570:	4b10      	ldr	r3, [pc, #64]	; (1b5b4 <prvCheckForValidListAndQueue+0x4c>)
   1b572:	681b      	ldr	r3, [r3, #0]
   1b574:	2b00      	cmp	r3, #0
   1b576:	d115      	bne.n	1b5a4 <prvCheckForValidListAndQueue+0x3c>
   1b578:	4b0f      	ldr	r3, [pc, #60]	; (1b5b8 <prvCheckForValidListAndQueue+0x50>)
   1b57a:	0018      	movs	r0, r3
   1b57c:	4b0f      	ldr	r3, [pc, #60]	; (1b5bc <prvCheckForValidListAndQueue+0x54>)
   1b57e:	4798      	blx	r3
   1b580:	4b0f      	ldr	r3, [pc, #60]	; (1b5c0 <prvCheckForValidListAndQueue+0x58>)
   1b582:	0018      	movs	r0, r3
   1b584:	4b0d      	ldr	r3, [pc, #52]	; (1b5bc <prvCheckForValidListAndQueue+0x54>)
   1b586:	4798      	blx	r3
   1b588:	4b0e      	ldr	r3, [pc, #56]	; (1b5c4 <prvCheckForValidListAndQueue+0x5c>)
   1b58a:	4a0b      	ldr	r2, [pc, #44]	; (1b5b8 <prvCheckForValidListAndQueue+0x50>)
   1b58c:	601a      	str	r2, [r3, #0]
   1b58e:	4b0e      	ldr	r3, [pc, #56]	; (1b5c8 <prvCheckForValidListAndQueue+0x60>)
   1b590:	4a0b      	ldr	r2, [pc, #44]	; (1b5c0 <prvCheckForValidListAndQueue+0x58>)
   1b592:	601a      	str	r2, [r3, #0]
   1b594:	2200      	movs	r2, #0
   1b596:	210c      	movs	r1, #12
   1b598:	2005      	movs	r0, #5
   1b59a:	4b0c      	ldr	r3, [pc, #48]	; (1b5cc <prvCheckForValidListAndQueue+0x64>)
   1b59c:	4798      	blx	r3
   1b59e:	0002      	movs	r2, r0
   1b5a0:	4b04      	ldr	r3, [pc, #16]	; (1b5b4 <prvCheckForValidListAndQueue+0x4c>)
   1b5a2:	601a      	str	r2, [r3, #0]
   1b5a4:	4b0a      	ldr	r3, [pc, #40]	; (1b5d0 <prvCheckForValidListAndQueue+0x68>)
   1b5a6:	4798      	blx	r3
   1b5a8:	46c0      	nop			; (mov r8, r8)
   1b5aa:	46bd      	mov	sp, r7
   1b5ac:	bd80      	pop	{r7, pc}
   1b5ae:	46c0      	nop			; (mov r8, r8)
   1b5b0:	00017d59 	.word	0x00017d59
   1b5b4:	20003c68 	.word	0x20003c68
   1b5b8:	20003c38 	.word	0x20003c38
   1b5bc:	00017ad1 	.word	0x00017ad1
   1b5c0:	20003c4c 	.word	0x20003c4c
   1b5c4:	20003c60 	.word	0x20003c60
   1b5c8:	20003c64 	.word	0x20003c64
   1b5cc:	00018049 	.word	0x00018049
   1b5d0:	00017d7d 	.word	0x00017d7d

0001b5d4 <advance_pointer>:
   1b5d4:	b580      	push	{r7, lr}
   1b5d6:	b082      	sub	sp, #8
   1b5d8:	af00      	add	r7, sp, #0
   1b5da:	6078      	str	r0, [r7, #4]
   1b5dc:	687b      	ldr	r3, [r7, #4]
   1b5de:	7c1b      	ldrb	r3, [r3, #16]
   1b5e0:	2b00      	cmp	r3, #0
   1b5e2:	d00b      	beq.n	1b5fc <advance_pointer+0x28>
   1b5e4:	687b      	ldr	r3, [r7, #4]
   1b5e6:	689b      	ldr	r3, [r3, #8]
   1b5e8:	1c5a      	adds	r2, r3, #1
   1b5ea:	687b      	ldr	r3, [r7, #4]
   1b5ec:	68d9      	ldr	r1, [r3, #12]
   1b5ee:	4b10      	ldr	r3, [pc, #64]	; (1b630 <advance_pointer+0x5c>)
   1b5f0:	0010      	movs	r0, r2
   1b5f2:	4798      	blx	r3
   1b5f4:	000b      	movs	r3, r1
   1b5f6:	001a      	movs	r2, r3
   1b5f8:	687b      	ldr	r3, [r7, #4]
   1b5fa:	609a      	str	r2, [r3, #8]
   1b5fc:	687b      	ldr	r3, [r7, #4]
   1b5fe:	685b      	ldr	r3, [r3, #4]
   1b600:	1c5a      	adds	r2, r3, #1
   1b602:	687b      	ldr	r3, [r7, #4]
   1b604:	68d9      	ldr	r1, [r3, #12]
   1b606:	4b0a      	ldr	r3, [pc, #40]	; (1b630 <advance_pointer+0x5c>)
   1b608:	0010      	movs	r0, r2
   1b60a:	4798      	blx	r3
   1b60c:	000b      	movs	r3, r1
   1b60e:	001a      	movs	r2, r3
   1b610:	687b      	ldr	r3, [r7, #4]
   1b612:	605a      	str	r2, [r3, #4]
   1b614:	687b      	ldr	r3, [r7, #4]
   1b616:	685a      	ldr	r2, [r3, #4]
   1b618:	687b      	ldr	r3, [r7, #4]
   1b61a:	689b      	ldr	r3, [r3, #8]
   1b61c:	1ad3      	subs	r3, r2, r3
   1b61e:	425a      	negs	r2, r3
   1b620:	4153      	adcs	r3, r2
   1b622:	b2da      	uxtb	r2, r3
   1b624:	687b      	ldr	r3, [r7, #4]
   1b626:	741a      	strb	r2, [r3, #16]
   1b628:	46c0      	nop			; (mov r8, r8)
   1b62a:	46bd      	mov	sp, r7
   1b62c:	b002      	add	sp, #8
   1b62e:	bd80      	pop	{r7, pc}
   1b630:	000305f5 	.word	0x000305f5

0001b634 <retreat_pointer>:
   1b634:	b580      	push	{r7, lr}
   1b636:	b082      	sub	sp, #8
   1b638:	af00      	add	r7, sp, #0
   1b63a:	6078      	str	r0, [r7, #4]
   1b63c:	687b      	ldr	r3, [r7, #4]
   1b63e:	2200      	movs	r2, #0
   1b640:	741a      	strb	r2, [r3, #16]
   1b642:	687b      	ldr	r3, [r7, #4]
   1b644:	689b      	ldr	r3, [r3, #8]
   1b646:	1c5a      	adds	r2, r3, #1
   1b648:	687b      	ldr	r3, [r7, #4]
   1b64a:	68d9      	ldr	r1, [r3, #12]
   1b64c:	4b05      	ldr	r3, [pc, #20]	; (1b664 <retreat_pointer+0x30>)
   1b64e:	0010      	movs	r0, r2
   1b650:	4798      	blx	r3
   1b652:	000b      	movs	r3, r1
   1b654:	001a      	movs	r2, r3
   1b656:	687b      	ldr	r3, [r7, #4]
   1b658:	609a      	str	r2, [r3, #8]
   1b65a:	46c0      	nop			; (mov r8, r8)
   1b65c:	46bd      	mov	sp, r7
   1b65e:	b002      	add	sp, #8
   1b660:	bd80      	pop	{r7, pc}
   1b662:	46c0      	nop			; (mov r8, r8)
   1b664:	000305f5 	.word	0x000305f5

0001b668 <circular_buf_init>:
   1b668:	b580      	push	{r7, lr}
   1b66a:	b084      	sub	sp, #16
   1b66c:	af00      	add	r7, sp, #0
   1b66e:	6078      	str	r0, [r7, #4]
   1b670:	6039      	str	r1, [r7, #0]
   1b672:	2014      	movs	r0, #20
   1b674:	4b09      	ldr	r3, [pc, #36]	; (1b69c <circular_buf_init+0x34>)
   1b676:	4798      	blx	r3
   1b678:	0003      	movs	r3, r0
   1b67a:	60fb      	str	r3, [r7, #12]
   1b67c:	68fb      	ldr	r3, [r7, #12]
   1b67e:	687a      	ldr	r2, [r7, #4]
   1b680:	601a      	str	r2, [r3, #0]
   1b682:	68fb      	ldr	r3, [r7, #12]
   1b684:	683a      	ldr	r2, [r7, #0]
   1b686:	60da      	str	r2, [r3, #12]
   1b688:	68fb      	ldr	r3, [r7, #12]
   1b68a:	0018      	movs	r0, r3
   1b68c:	4b04      	ldr	r3, [pc, #16]	; (1b6a0 <circular_buf_init+0x38>)
   1b68e:	4798      	blx	r3
   1b690:	68fb      	ldr	r3, [r7, #12]
   1b692:	0018      	movs	r0, r3
   1b694:	46bd      	mov	sp, r7
   1b696:	b004      	add	sp, #16
   1b698:	bd80      	pop	{r7, pc}
   1b69a:	46c0      	nop			; (mov r8, r8)
   1b69c:	00032145 	.word	0x00032145
   1b6a0:	0001b6a5 	.word	0x0001b6a5

0001b6a4 <circular_buf_reset>:
   1b6a4:	b580      	push	{r7, lr}
   1b6a6:	b082      	sub	sp, #8
   1b6a8:	af00      	add	r7, sp, #0
   1b6aa:	6078      	str	r0, [r7, #4]
   1b6ac:	687b      	ldr	r3, [r7, #4]
   1b6ae:	2200      	movs	r2, #0
   1b6b0:	605a      	str	r2, [r3, #4]
   1b6b2:	687b      	ldr	r3, [r7, #4]
   1b6b4:	2200      	movs	r2, #0
   1b6b6:	609a      	str	r2, [r3, #8]
   1b6b8:	687b      	ldr	r3, [r7, #4]
   1b6ba:	2200      	movs	r2, #0
   1b6bc:	741a      	strb	r2, [r3, #16]
   1b6be:	46c0      	nop			; (mov r8, r8)
   1b6c0:	46bd      	mov	sp, r7
   1b6c2:	b002      	add	sp, #8
   1b6c4:	bd80      	pop	{r7, pc}
	...

0001b6c8 <circular_buf_put>:
   1b6c8:	b580      	push	{r7, lr}
   1b6ca:	b082      	sub	sp, #8
   1b6cc:	af00      	add	r7, sp, #0
   1b6ce:	6078      	str	r0, [r7, #4]
   1b6d0:	000a      	movs	r2, r1
   1b6d2:	1cfb      	adds	r3, r7, #3
   1b6d4:	701a      	strb	r2, [r3, #0]
   1b6d6:	687b      	ldr	r3, [r7, #4]
   1b6d8:	681a      	ldr	r2, [r3, #0]
   1b6da:	687b      	ldr	r3, [r7, #4]
   1b6dc:	685b      	ldr	r3, [r3, #4]
   1b6de:	18d3      	adds	r3, r2, r3
   1b6e0:	1cfa      	adds	r2, r7, #3
   1b6e2:	7812      	ldrb	r2, [r2, #0]
   1b6e4:	701a      	strb	r2, [r3, #0]
   1b6e6:	687b      	ldr	r3, [r7, #4]
   1b6e8:	0018      	movs	r0, r3
   1b6ea:	4b03      	ldr	r3, [pc, #12]	; (1b6f8 <circular_buf_put+0x30>)
   1b6ec:	4798      	blx	r3
   1b6ee:	46c0      	nop			; (mov r8, r8)
   1b6f0:	46bd      	mov	sp, r7
   1b6f2:	b002      	add	sp, #8
   1b6f4:	bd80      	pop	{r7, pc}
   1b6f6:	46c0      	nop			; (mov r8, r8)
   1b6f8:	0001b5d5 	.word	0x0001b5d5

0001b6fc <circular_buf_get>:
   1b6fc:	b580      	push	{r7, lr}
   1b6fe:	b084      	sub	sp, #16
   1b700:	af00      	add	r7, sp, #0
   1b702:	6078      	str	r0, [r7, #4]
   1b704:	6039      	str	r1, [r7, #0]
   1b706:	2301      	movs	r3, #1
   1b708:	425b      	negs	r3, r3
   1b70a:	60fb      	str	r3, [r7, #12]
   1b70c:	687b      	ldr	r3, [r7, #4]
   1b70e:	0018      	movs	r0, r3
   1b710:	4b0d      	ldr	r3, [pc, #52]	; (1b748 <circular_buf_get+0x4c>)
   1b712:	4798      	blx	r3
   1b714:	0003      	movs	r3, r0
   1b716:	001a      	movs	r2, r3
   1b718:	2301      	movs	r3, #1
   1b71a:	4053      	eors	r3, r2
   1b71c:	b2db      	uxtb	r3, r3
   1b71e:	2b00      	cmp	r3, #0
   1b720:	d00d      	beq.n	1b73e <circular_buf_get+0x42>
   1b722:	687b      	ldr	r3, [r7, #4]
   1b724:	681a      	ldr	r2, [r3, #0]
   1b726:	687b      	ldr	r3, [r7, #4]
   1b728:	689b      	ldr	r3, [r3, #8]
   1b72a:	18d3      	adds	r3, r2, r3
   1b72c:	781a      	ldrb	r2, [r3, #0]
   1b72e:	683b      	ldr	r3, [r7, #0]
   1b730:	701a      	strb	r2, [r3, #0]
   1b732:	687b      	ldr	r3, [r7, #4]
   1b734:	0018      	movs	r0, r3
   1b736:	4b05      	ldr	r3, [pc, #20]	; (1b74c <circular_buf_get+0x50>)
   1b738:	4798      	blx	r3
   1b73a:	2300      	movs	r3, #0
   1b73c:	60fb      	str	r3, [r7, #12]
   1b73e:	68fb      	ldr	r3, [r7, #12]
   1b740:	0018      	movs	r0, r3
   1b742:	46bd      	mov	sp, r7
   1b744:	b004      	add	sp, #16
   1b746:	bd80      	pop	{r7, pc}
   1b748:	0001b751 	.word	0x0001b751
   1b74c:	0001b635 	.word	0x0001b635

0001b750 <circular_buf_empty>:
   1b750:	b580      	push	{r7, lr}
   1b752:	b082      	sub	sp, #8
   1b754:	af00      	add	r7, sp, #0
   1b756:	6078      	str	r0, [r7, #4]
   1b758:	687b      	ldr	r3, [r7, #4]
   1b75a:	7c1b      	ldrb	r3, [r3, #16]
   1b75c:	2201      	movs	r2, #1
   1b75e:	4053      	eors	r3, r2
   1b760:	b2db      	uxtb	r3, r3
   1b762:	2b00      	cmp	r3, #0
   1b764:	d007      	beq.n	1b776 <circular_buf_empty+0x26>
   1b766:	687b      	ldr	r3, [r7, #4]
   1b768:	685a      	ldr	r2, [r3, #4]
   1b76a:	687b      	ldr	r3, [r7, #4]
   1b76c:	689b      	ldr	r3, [r3, #8]
   1b76e:	429a      	cmp	r2, r3
   1b770:	d101      	bne.n	1b776 <circular_buf_empty+0x26>
   1b772:	2301      	movs	r3, #1
   1b774:	e000      	b.n	1b778 <circular_buf_empty+0x28>
   1b776:	2300      	movs	r3, #0
   1b778:	1c1a      	adds	r2, r3, #0
   1b77a:	2301      	movs	r3, #1
   1b77c:	4013      	ands	r3, r2
   1b77e:	b2db      	uxtb	r3, r3
   1b780:	0018      	movs	r0, r3
   1b782:	46bd      	mov	sp, r7
   1b784:	b002      	add	sp, #8
   1b786:	bd80      	pop	{r7, pc}

0001b788 <system_interrupt_enable>:
{
   1b788:	b580      	push	{r7, lr}
   1b78a:	b082      	sub	sp, #8
   1b78c:	af00      	add	r7, sp, #0
   1b78e:	0002      	movs	r2, r0
   1b790:	1dfb      	adds	r3, r7, #7
   1b792:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1b794:	4b06      	ldr	r3, [pc, #24]	; (1b7b0 <system_interrupt_enable+0x28>)
   1b796:	1dfa      	adds	r2, r7, #7
   1b798:	7812      	ldrb	r2, [r2, #0]
   1b79a:	0011      	movs	r1, r2
   1b79c:	221f      	movs	r2, #31
   1b79e:	400a      	ands	r2, r1
   1b7a0:	2101      	movs	r1, #1
   1b7a2:	4091      	lsls	r1, r2
   1b7a4:	000a      	movs	r2, r1
   1b7a6:	601a      	str	r2, [r3, #0]
}
   1b7a8:	46c0      	nop			; (mov r8, r8)
   1b7aa:	46bd      	mov	sp, r7
   1b7ac:	b002      	add	sp, #8
   1b7ae:	bd80      	pop	{r7, pc}
   1b7b0:	e000e100 	.word	0xe000e100

0001b7b4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1b7b4:	b580      	push	{r7, lr}
   1b7b6:	b084      	sub	sp, #16
   1b7b8:	af00      	add	r7, sp, #0
   1b7ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1b7bc:	687b      	ldr	r3, [r7, #4]
   1b7be:	681b      	ldr	r3, [r3, #0]
   1b7c0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1b7c2:	68fb      	ldr	r3, [r7, #12]
   1b7c4:	69db      	ldr	r3, [r3, #28]
   1b7c6:	1e5a      	subs	r2, r3, #1
   1b7c8:	4193      	sbcs	r3, r2
   1b7ca:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1b7cc:	0018      	movs	r0, r3
   1b7ce:	46bd      	mov	sp, r7
   1b7d0:	b004      	add	sp, #16
   1b7d2:	bd80      	pop	{r7, pc}

0001b7d4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1b7d4:	b580      	push	{r7, lr}
   1b7d6:	b082      	sub	sp, #8
   1b7d8:	af00      	add	r7, sp, #0
   1b7da:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1b7dc:	46c0      	nop			; (mov r8, r8)
   1b7de:	687b      	ldr	r3, [r7, #4]
   1b7e0:	0018      	movs	r0, r3
   1b7e2:	4b04      	ldr	r3, [pc, #16]	; (1b7f4 <_usart_wait_for_sync+0x20>)
   1b7e4:	4798      	blx	r3
   1b7e6:	1e03      	subs	r3, r0, #0
   1b7e8:	d1f9      	bne.n	1b7de <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1b7ea:	46c0      	nop			; (mov r8, r8)
   1b7ec:	46bd      	mov	sp, r7
   1b7ee:	b002      	add	sp, #8
   1b7f0:	bd80      	pop	{r7, pc}
   1b7f2:	46c0      	nop			; (mov r8, r8)
   1b7f4:	0001b7b5 	.word	0x0001b7b5

0001b7f8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1b7f8:	b580      	push	{r7, lr}
   1b7fa:	b082      	sub	sp, #8
   1b7fc:	af00      	add	r7, sp, #0
   1b7fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1b800:	687b      	ldr	r3, [r7, #4]
   1b802:	2280      	movs	r2, #128	; 0x80
   1b804:	05d2      	lsls	r2, r2, #23
   1b806:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1b808:	687b      	ldr	r3, [r7, #4]
   1b80a:	2200      	movs	r2, #0
   1b80c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1b80e:	687b      	ldr	r3, [r7, #4]
   1b810:	22ff      	movs	r2, #255	; 0xff
   1b812:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1b814:	687b      	ldr	r3, [r7, #4]
   1b816:	2200      	movs	r2, #0
   1b818:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1b81a:	687b      	ldr	r3, [r7, #4]
   1b81c:	2200      	movs	r2, #0
   1b81e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1b820:	687b      	ldr	r3, [r7, #4]
   1b822:	2296      	movs	r2, #150	; 0x96
   1b824:	0192      	lsls	r2, r2, #6
   1b826:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1b828:	687b      	ldr	r3, [r7, #4]
   1b82a:	2224      	movs	r2, #36	; 0x24
   1b82c:	2101      	movs	r1, #1
   1b82e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1b830:	687b      	ldr	r3, [r7, #4]
   1b832:	2225      	movs	r2, #37	; 0x25
   1b834:	2101      	movs	r1, #1
   1b836:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1b838:	687b      	ldr	r3, [r7, #4]
   1b83a:	2226      	movs	r2, #38	; 0x26
   1b83c:	2100      	movs	r1, #0
   1b83e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1b840:	687b      	ldr	r3, [r7, #4]
   1b842:	2227      	movs	r2, #39	; 0x27
   1b844:	2100      	movs	r1, #0
   1b846:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1b848:	687b      	ldr	r3, [r7, #4]
   1b84a:	2200      	movs	r2, #0
   1b84c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1b84e:	687b      	ldr	r3, [r7, #4]
   1b850:	2288      	movs	r2, #136	; 0x88
   1b852:	0352      	lsls	r2, r2, #13
   1b854:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1b856:	687b      	ldr	r3, [r7, #4]
   1b858:	222c      	movs	r2, #44	; 0x2c
   1b85a:	2100      	movs	r1, #0
   1b85c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1b85e:	687b      	ldr	r3, [r7, #4]
   1b860:	222d      	movs	r2, #45	; 0x2d
   1b862:	2100      	movs	r1, #0
   1b864:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1b866:	687b      	ldr	r3, [r7, #4]
   1b868:	2200      	movs	r2, #0
   1b86a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1b86c:	687b      	ldr	r3, [r7, #4]
   1b86e:	2200      	movs	r2, #0
   1b870:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1b872:	687b      	ldr	r3, [r7, #4]
   1b874:	2200      	movs	r2, #0
   1b876:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1b878:	687b      	ldr	r3, [r7, #4]
   1b87a:	2200      	movs	r2, #0
   1b87c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1b87e:	687b      	ldr	r3, [r7, #4]
   1b880:	2200      	movs	r2, #0
   1b882:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1b884:	687b      	ldr	r3, [r7, #4]
   1b886:	2200      	movs	r2, #0
   1b888:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1b88a:	687b      	ldr	r3, [r7, #4]
   1b88c:	2200      	movs	r2, #0
   1b88e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1b890:	687b      	ldr	r3, [r7, #4]
   1b892:	2200      	movs	r2, #0
   1b894:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1b896:	687b      	ldr	r3, [r7, #4]
   1b898:	2200      	movs	r2, #0
   1b89a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1b89c:	687b      	ldr	r3, [r7, #4]
   1b89e:	2200      	movs	r2, #0
   1b8a0:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1b8a2:	687b      	ldr	r3, [r7, #4]
   1b8a4:	2213      	movs	r2, #19
   1b8a6:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1b8a8:	687b      	ldr	r3, [r7, #4]
   1b8aa:	2200      	movs	r2, #0
   1b8ac:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1b8ae:	46c0      	nop			; (mov r8, r8)
   1b8b0:	46bd      	mov	sp, r7
   1b8b2:	b002      	add	sp, #8
   1b8b4:	bd80      	pop	{r7, pc}
	...

0001b8b8 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1b8b8:	b580      	push	{r7, lr}
   1b8ba:	b084      	sub	sp, #16
   1b8bc:	af00      	add	r7, sp, #0
   1b8be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1b8c0:	687b      	ldr	r3, [r7, #4]
   1b8c2:	681b      	ldr	r3, [r3, #0]
   1b8c4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1b8c6:	687b      	ldr	r3, [r7, #4]
   1b8c8:	681b      	ldr	r3, [r3, #0]
   1b8ca:	0018      	movs	r0, r3
   1b8cc:	4b09      	ldr	r3, [pc, #36]	; (1b8f4 <usart_enable+0x3c>)
   1b8ce:	4798      	blx	r3
   1b8d0:	0003      	movs	r3, r0
   1b8d2:	0018      	movs	r0, r3
   1b8d4:	4b08      	ldr	r3, [pc, #32]	; (1b8f8 <usart_enable+0x40>)
   1b8d6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1b8d8:	687b      	ldr	r3, [r7, #4]
   1b8da:	0018      	movs	r0, r3
   1b8dc:	4b07      	ldr	r3, [pc, #28]	; (1b8fc <usart_enable+0x44>)
   1b8de:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1b8e0:	68fb      	ldr	r3, [r7, #12]
   1b8e2:	681b      	ldr	r3, [r3, #0]
   1b8e4:	2202      	movs	r2, #2
   1b8e6:	431a      	orrs	r2, r3
   1b8e8:	68fb      	ldr	r3, [r7, #12]
   1b8ea:	601a      	str	r2, [r3, #0]
}
   1b8ec:	46c0      	nop			; (mov r8, r8)
   1b8ee:	46bd      	mov	sp, r7
   1b8f0:	b004      	add	sp, #16
   1b8f2:	bd80      	pop	{r7, pc}
   1b8f4:	000252bd 	.word	0x000252bd
   1b8f8:	0001b789 	.word	0x0001b789
   1b8fc:	0001b7d5 	.word	0x0001b7d5

0001b900 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1b900:	b580      	push	{r7, lr}
   1b902:	b082      	sub	sp, #8
   1b904:	af00      	add	r7, sp, #0
   1b906:	6078      	str	r0, [r7, #4]
   1b908:	000a      	movs	r2, r1
   1b90a:	1cfb      	adds	r3, r7, #3
   1b90c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1b90e:	687b      	ldr	r3, [r7, #4]
   1b910:	2231      	movs	r2, #49	; 0x31
   1b912:	5c9b      	ldrb	r3, [r3, r2]
   1b914:	b25a      	sxtb	r2, r3
   1b916:	1cfb      	adds	r3, r7, #3
   1b918:	781b      	ldrb	r3, [r3, #0]
   1b91a:	2101      	movs	r1, #1
   1b91c:	4099      	lsls	r1, r3
   1b91e:	000b      	movs	r3, r1
   1b920:	b25b      	sxtb	r3, r3
   1b922:	4313      	orrs	r3, r2
   1b924:	b25b      	sxtb	r3, r3
   1b926:	b2d9      	uxtb	r1, r3
   1b928:	687b      	ldr	r3, [r7, #4]
   1b92a:	2231      	movs	r2, #49	; 0x31
   1b92c:	5499      	strb	r1, [r3, r2]

}
   1b92e:	46c0      	nop			; (mov r8, r8)
   1b930:	46bd      	mov	sp, r7
   1b932:	b002      	add	sp, #8
   1b934:	bd80      	pop	{r7, pc}
	...

0001b938 <InitializeSerialConsole>:
 * @details		Initializes the UART - sets up the SERCOM to act as UART and registers the callbacks for
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void) {
   1b938:	b580      	push	{r7, lr}
   1b93a:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *) rxCharacterBuffer, RX_BUFFER_SIZE);
   1b93c:	2380      	movs	r3, #128	; 0x80
   1b93e:	009a      	lsls	r2, r3, #2
   1b940:	4b0f      	ldr	r3, [pc, #60]	; (1b980 <InitializeSerialConsole+0x48>)
   1b942:	0011      	movs	r1, r2
   1b944:	0018      	movs	r0, r3
   1b946:	4b0f      	ldr	r3, [pc, #60]	; (1b984 <InitializeSerialConsole+0x4c>)
   1b948:	4798      	blx	r3
   1b94a:	0002      	movs	r2, r0
   1b94c:	4b0e      	ldr	r3, [pc, #56]	; (1b988 <InitializeSerialConsole+0x50>)
   1b94e:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *) txCharacterBuffer, RX_BUFFER_SIZE);
   1b950:	2380      	movs	r3, #128	; 0x80
   1b952:	009a      	lsls	r2, r3, #2
   1b954:	4b0d      	ldr	r3, [pc, #52]	; (1b98c <InitializeSerialConsole+0x54>)
   1b956:	0011      	movs	r1, r2
   1b958:	0018      	movs	r0, r3
   1b95a:	4b0a      	ldr	r3, [pc, #40]	; (1b984 <InitializeSerialConsole+0x4c>)
   1b95c:	4798      	blx	r3
   1b95e:	0002      	movs	r2, r0
   1b960:	4b0b      	ldr	r3, [pc, #44]	; (1b990 <InitializeSerialConsole+0x58>)
   1b962:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1b964:	4b0b      	ldr	r3, [pc, #44]	; (1b994 <InitializeSerialConsole+0x5c>)
   1b966:	4798      	blx	r3
    configure_usart_callbacks();
   1b968:	4b0b      	ldr	r3, [pc, #44]	; (1b998 <InitializeSerialConsole+0x60>)
   1b96a:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *) &latestRx, 1);   // Kicks off constant reading of characters
   1b96c:	490b      	ldr	r1, [pc, #44]	; (1b99c <InitializeSerialConsole+0x64>)
   1b96e:	4b0c      	ldr	r3, [pc, #48]	; (1b9a0 <InitializeSerialConsole+0x68>)
   1b970:	2201      	movs	r2, #1
   1b972:	0018      	movs	r0, r3
   1b974:	4b0b      	ldr	r3, [pc, #44]	; (1b9a4 <InitializeSerialConsole+0x6c>)
   1b976:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1b978:	46c0      	nop			; (mov r8, r8)
   1b97a:	46bd      	mov	sp, r7
   1b97c:	bd80      	pop	{r7, pc}
   1b97e:	46c0      	nop			; (mov r8, r8)
   1b980:	200051fc 	.word	0x200051fc
   1b984:	0001b669 	.word	0x0001b669
   1b988:	20004ff4 	.word	0x20004ff4
   1b98c:	20004ffc 	.word	0x20004ffc
   1b990:	20005400 	.word	0x20005400
   1b994:	0001bb0d 	.word	0x0001bb0d
   1b998:	0001bb85 	.word	0x0001bb85
   1b99c:	20004ff8 	.word	0x20004ff8
   1b9a0:	20004fc0 	.word	0x20004fc0
   1b9a4:	00026b65 	.word	0x00026b65

0001b9a8 <SerialConsoleWriteString>:
 *text send to the uart
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string) {
   1b9a8:	b580      	push	{r7, lr}
   1b9aa:	b084      	sub	sp, #16
   1b9ac:	af00      	add	r7, sp, #0
   1b9ae:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1b9b0:	4b1a      	ldr	r3, [pc, #104]	; (1ba1c <SerialConsoleWriteString+0x74>)
   1b9b2:	4798      	blx	r3
    if (string != NULL) {
   1b9b4:	687b      	ldr	r3, [r7, #4]
   1b9b6:	2b00      	cmp	r3, #0
   1b9b8:	d02a      	beq.n	1ba10 <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1b9ba:	2300      	movs	r3, #0
   1b9bc:	60fb      	str	r3, [r7, #12]
   1b9be:	e00b      	b.n	1b9d8 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1b9c0:	4b17      	ldr	r3, [pc, #92]	; (1ba20 <SerialConsoleWriteString+0x78>)
   1b9c2:	6818      	ldr	r0, [r3, #0]
   1b9c4:	687a      	ldr	r2, [r7, #4]
   1b9c6:	68fb      	ldr	r3, [r7, #12]
   1b9c8:	18d3      	adds	r3, r2, r3
   1b9ca:	781b      	ldrb	r3, [r3, #0]
   1b9cc:	0019      	movs	r1, r3
   1b9ce:	4b15      	ldr	r3, [pc, #84]	; (1ba24 <SerialConsoleWriteString+0x7c>)
   1b9d0:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1b9d2:	68fb      	ldr	r3, [r7, #12]
   1b9d4:	3301      	adds	r3, #1
   1b9d6:	60fb      	str	r3, [r7, #12]
   1b9d8:	687b      	ldr	r3, [r7, #4]
   1b9da:	0018      	movs	r0, r3
   1b9dc:	4b12      	ldr	r3, [pc, #72]	; (1ba28 <SerialConsoleWriteString+0x80>)
   1b9de:	4798      	blx	r3
   1b9e0:	0002      	movs	r2, r0
   1b9e2:	68fb      	ldr	r3, [r7, #12]
   1b9e4:	429a      	cmp	r2, r3
   1b9e6:	d8eb      	bhi.n	1b9c0 <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1b9e8:	4b10      	ldr	r3, [pc, #64]	; (1ba2c <SerialConsoleWriteString+0x84>)
   1b9ea:	2101      	movs	r1, #1
   1b9ec:	0018      	movs	r0, r3
   1b9ee:	4b10      	ldr	r3, [pc, #64]	; (1ba30 <SerialConsoleWriteString+0x88>)
   1b9f0:	4798      	blx	r3
   1b9f2:	1e03      	subs	r3, r0, #0
   1b9f4:	d10c      	bne.n	1ba10 <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *) &latestTx);   // Perform only if the SERCOM TX is free (not busy)
   1b9f6:	4b0a      	ldr	r3, [pc, #40]	; (1ba20 <SerialConsoleWriteString+0x78>)
   1b9f8:	681b      	ldr	r3, [r3, #0]
   1b9fa:	4a0e      	ldr	r2, [pc, #56]	; (1ba34 <SerialConsoleWriteString+0x8c>)
   1b9fc:	0011      	movs	r1, r2
   1b9fe:	0018      	movs	r0, r3
   1ba00:	4b0d      	ldr	r3, [pc, #52]	; (1ba38 <SerialConsoleWriteString+0x90>)
   1ba02:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
   1ba04:	490b      	ldr	r1, [pc, #44]	; (1ba34 <SerialConsoleWriteString+0x8c>)
   1ba06:	4b09      	ldr	r3, [pc, #36]	; (1ba2c <SerialConsoleWriteString+0x84>)
   1ba08:	2201      	movs	r2, #1
   1ba0a:	0018      	movs	r0, r3
   1ba0c:	4b0b      	ldr	r3, [pc, #44]	; (1ba3c <SerialConsoleWriteString+0x94>)
   1ba0e:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1ba10:	4b0b      	ldr	r3, [pc, #44]	; (1ba40 <SerialConsoleWriteString+0x98>)
   1ba12:	4798      	blx	r3
}
   1ba14:	46c0      	nop			; (mov r8, r8)
   1ba16:	46bd      	mov	sp, r7
   1ba18:	b004      	add	sp, #16
   1ba1a:	bd80      	pop	{r7, pc}
   1ba1c:	0001a015 	.word	0x0001a015
   1ba20:	20005400 	.word	0x20005400
   1ba24:	0001b6c9 	.word	0x0001b6c9
   1ba28:	0003255b 	.word	0x0003255b
   1ba2c:	20004fc0 	.word	0x20004fc0
   1ba30:	00026bad 	.word	0x00026bad
   1ba34:	200053fc 	.word	0x200053fc
   1ba38:	0001b6fd 	.word	0x0001b6fd
   1ba3c:	00026b1d 	.word	0x00026b1d
   1ba40:	0001a02d 	.word	0x0001a02d

0001ba44 <SerialConsoleReadCharacter>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar) {
   1ba44:	b580      	push	{r7, lr}
   1ba46:	b084      	sub	sp, #16
   1ba48:	af00      	add	r7, sp, #0
   1ba4a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ba4c:	4b08      	ldr	r3, [pc, #32]	; (1ba70 <SerialConsoleReadCharacter+0x2c>)
   1ba4e:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *) rxChar);
   1ba50:	4b08      	ldr	r3, [pc, #32]	; (1ba74 <SerialConsoleReadCharacter+0x30>)
   1ba52:	681b      	ldr	r3, [r3, #0]
   1ba54:	687a      	ldr	r2, [r7, #4]
   1ba56:	0011      	movs	r1, r2
   1ba58:	0018      	movs	r0, r3
   1ba5a:	4b07      	ldr	r3, [pc, #28]	; (1ba78 <SerialConsoleReadCharacter+0x34>)
   1ba5c:	4798      	blx	r3
   1ba5e:	0003      	movs	r3, r0
   1ba60:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1ba62:	4b06      	ldr	r3, [pc, #24]	; (1ba7c <SerialConsoleReadCharacter+0x38>)
   1ba64:	4798      	blx	r3
    return a;
   1ba66:	68fb      	ldr	r3, [r7, #12]
}
   1ba68:	0018      	movs	r0, r3
   1ba6a:	46bd      	mov	sp, r7
   1ba6c:	b004      	add	sp, #16
   1ba6e:	bd80      	pop	{r7, pc}
   1ba70:	0001a015 	.word	0x0001a015
   1ba74:	20004ff4 	.word	0x20004ff4
   1ba78:	0001b6fd 	.word	0x0001b6fd
   1ba7c:	0001a02d 	.word	0x0001a02d

0001ba80 <getLogLevel>:
 *				Debug logs below the given level will not be allowed to be printed on the system
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void) { return currentDebugLevel; }
   1ba80:	b580      	push	{r7, lr}
   1ba82:	af00      	add	r7, sp, #0
   1ba84:	4b02      	ldr	r3, [pc, #8]	; (1ba90 <getLogLevel+0x10>)
   1ba86:	781b      	ldrb	r3, [r3, #0]
   1ba88:	0018      	movs	r0, r3
   1ba8a:	46bd      	mov	sp, r7
   1ba8c:	bd80      	pop	{r7, pc}
   1ba8e:	46c0      	nop			; (mov r8, r8)
   1ba90:	20003c74 	.word	0x20003c74

0001ba94 <LogMessage>:
/**
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...){
   1ba94:	b40e      	push	{r1, r2, r3}
   1ba96:	b590      	push	{r4, r7, lr}
   1ba98:	b084      	sub	sp, #16
   1ba9a:	af00      	add	r7, sp, #0
   1ba9c:	0002      	movs	r2, r0
   1ba9e:	1dfb      	adds	r3, r7, #7
   1baa0:	701a      	strb	r2, [r3, #0]
	if(getLogLevel()<=level)
   1baa2:	4b0e      	ldr	r3, [pc, #56]	; (1badc <LogMessage+0x48>)
   1baa4:	4798      	blx	r3
   1baa6:	0003      	movs	r3, r0
   1baa8:	001a      	movs	r2, r3
   1baaa:	1dfb      	adds	r3, r7, #7
   1baac:	781b      	ldrb	r3, [r3, #0]
   1baae:	4293      	cmp	r3, r2
   1bab0:	d30c      	bcc.n	1bacc <LogMessage+0x38>
	{
		va_list ap;
		va_start(ap, format);
   1bab2:	2320      	movs	r3, #32
   1bab4:	18fb      	adds	r3, r7, r3
   1bab6:	60fb      	str	r3, [r7, #12]
		vsnprintf(debugBuffer, 127, format, ap);
   1bab8:	68fb      	ldr	r3, [r7, #12]
   1baba:	69fa      	ldr	r2, [r7, #28]
   1babc:	4808      	ldr	r0, [pc, #32]	; (1bae0 <LogMessage+0x4c>)
   1babe:	217f      	movs	r1, #127	; 0x7f
   1bac0:	4c08      	ldr	r4, [pc, #32]	; (1bae4 <LogMessage+0x50>)
   1bac2:	47a0      	blx	r4
		SerialConsoleWriteString(debugBuffer);
   1bac4:	4b06      	ldr	r3, [pc, #24]	; (1bae0 <LogMessage+0x4c>)
   1bac6:	0018      	movs	r0, r3
   1bac8:	4b07      	ldr	r3, [pc, #28]	; (1bae8 <LogMessage+0x54>)
   1baca:	4798      	blx	r3
		va_end(ap);
	}
}
   1bacc:	46c0      	nop			; (mov r8, r8)
   1bace:	46bd      	mov	sp, r7
   1bad0:	b004      	add	sp, #16
   1bad2:	bc90      	pop	{r4, r7}
   1bad4:	bc08      	pop	{r3}
   1bad6:	b003      	add	sp, #12
   1bad8:	4718      	bx	r3
   1bada:	46c0      	nop			; (mov r8, r8)
   1badc:	0001ba81 	.word	0x0001ba81
   1bae0:	20004f40 	.word	0x20004f40
   1bae4:	00032795 	.word	0x00032795
   1bae8:	0001b9a9 	.word	0x0001b9a9

0001baec <LogMessageDebug>:
/**
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...) { LogMessage(LOG_DEBUG_LVL, format); };
   1baec:	b40f      	push	{r0, r1, r2, r3}
   1baee:	b580      	push	{r7, lr}
   1baf0:	af00      	add	r7, sp, #0
   1baf2:	68bb      	ldr	r3, [r7, #8]
   1baf4:	0019      	movs	r1, r3
   1baf6:	2001      	movs	r0, #1
   1baf8:	4b03      	ldr	r3, [pc, #12]	; (1bb08 <LogMessageDebug+0x1c>)
   1bafa:	4798      	blx	r3
   1bafc:	46c0      	nop			; (mov r8, r8)
   1bafe:	46bd      	mov	sp, r7
   1bb00:	bc80      	pop	{r7}
   1bb02:	bc08      	pop	{r3}
   1bb04:	b004      	add	sp, #16
   1bb06:	4718      	bx	r3
   1bb08:	0001ba95 	.word	0x0001ba95

0001bb0c <configure_usart>:
/**
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void) {
   1bb0c:	b580      	push	{r7, lr}
   1bb0e:	b090      	sub	sp, #64	; 0x40
   1bb10:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1bb12:	003b      	movs	r3, r7
   1bb14:	0018      	movs	r0, r3
   1bb16:	4b14      	ldr	r3, [pc, #80]	; (1bb68 <configure_usart+0x5c>)
   1bb18:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1bb1a:	003b      	movs	r3, r7
   1bb1c:	22e1      	movs	r2, #225	; 0xe1
   1bb1e:	0252      	lsls	r2, r2, #9
   1bb20:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1bb22:	003b      	movs	r3, r7
   1bb24:	22c4      	movs	r2, #196	; 0xc4
   1bb26:	0392      	lsls	r2, r2, #14
   1bb28:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1bb2a:	003b      	movs	r3, r7
   1bb2c:	2201      	movs	r2, #1
   1bb2e:	4252      	negs	r2, r2
   1bb30:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1bb32:	003b      	movs	r3, r7
   1bb34:	2201      	movs	r2, #1
   1bb36:	4252      	negs	r2, r2
   1bb38:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1bb3a:	003b      	movs	r3, r7
   1bb3c:	4a0b      	ldr	r2, [pc, #44]	; (1bb6c <configure_usart+0x60>)
   1bb3e:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1bb40:	003b      	movs	r3, r7
   1bb42:	4a0b      	ldr	r2, [pc, #44]	; (1bb70 <configure_usart+0x64>)
   1bb44:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1bb46:	46c0      	nop			; (mov r8, r8)
   1bb48:	003a      	movs	r2, r7
   1bb4a:	490a      	ldr	r1, [pc, #40]	; (1bb74 <configure_usart+0x68>)
   1bb4c:	4b0a      	ldr	r3, [pc, #40]	; (1bb78 <configure_usart+0x6c>)
   1bb4e:	0018      	movs	r0, r3
   1bb50:	4b0a      	ldr	r3, [pc, #40]	; (1bb7c <configure_usart+0x70>)
   1bb52:	4798      	blx	r3
   1bb54:	1e03      	subs	r3, r0, #0
   1bb56:	d1f7      	bne.n	1bb48 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1bb58:	4b07      	ldr	r3, [pc, #28]	; (1bb78 <configure_usart+0x6c>)
   1bb5a:	0018      	movs	r0, r3
   1bb5c:	4b08      	ldr	r3, [pc, #32]	; (1bb80 <configure_usart+0x74>)
   1bb5e:	4798      	blx	r3
}
   1bb60:	46c0      	nop			; (mov r8, r8)
   1bb62:	46bd      	mov	sp, r7
   1bb64:	b010      	add	sp, #64	; 0x40
   1bb66:	bd80      	pop	{r7, pc}
   1bb68:	0001b7f9 	.word	0x0001b7f9
   1bb6c:	002a0003 	.word	0x002a0003
   1bb70:	002b0003 	.word	0x002b0003
   1bb74:	42001800 	.word	0x42001800
   1bb78:	20004fc0 	.word	0x20004fc0
   1bb7c:	00026721 	.word	0x00026721
   1bb80:	0001b8b9 	.word	0x0001b8b9

0001bb84 <configure_usart_callbacks>:
/**
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void) {
   1bb84:	b580      	push	{r7, lr}
   1bb86:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1bb88:	490c      	ldr	r1, [pc, #48]	; (1bbbc <configure_usart_callbacks+0x38>)
   1bb8a:	4b0d      	ldr	r3, [pc, #52]	; (1bbc0 <configure_usart_callbacks+0x3c>)
   1bb8c:	2200      	movs	r2, #0
   1bb8e:	0018      	movs	r0, r3
   1bb90:	4b0c      	ldr	r3, [pc, #48]	; (1bbc4 <configure_usart_callbacks+0x40>)
   1bb92:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1bb94:	490c      	ldr	r1, [pc, #48]	; (1bbc8 <configure_usart_callbacks+0x44>)
   1bb96:	4b0a      	ldr	r3, [pc, #40]	; (1bbc0 <configure_usart_callbacks+0x3c>)
   1bb98:	2201      	movs	r2, #1
   1bb9a:	0018      	movs	r0, r3
   1bb9c:	4b09      	ldr	r3, [pc, #36]	; (1bbc4 <configure_usart_callbacks+0x40>)
   1bb9e:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1bba0:	4b07      	ldr	r3, [pc, #28]	; (1bbc0 <configure_usart_callbacks+0x3c>)
   1bba2:	2100      	movs	r1, #0
   1bba4:	0018      	movs	r0, r3
   1bba6:	4b09      	ldr	r3, [pc, #36]	; (1bbcc <configure_usart_callbacks+0x48>)
   1bba8:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1bbaa:	4b05      	ldr	r3, [pc, #20]	; (1bbc0 <configure_usart_callbacks+0x3c>)
   1bbac:	2101      	movs	r1, #1
   1bbae:	0018      	movs	r0, r3
   1bbb0:	4b06      	ldr	r3, [pc, #24]	; (1bbcc <configure_usart_callbacks+0x48>)
   1bbb2:	4798      	blx	r3
}
   1bbb4:	46c0      	nop			; (mov r8, r8)
   1bbb6:	46bd      	mov	sp, r7
   1bbb8:	bd80      	pop	{r7, pc}
   1bbba:	46c0      	nop			; (mov r8, r8)
   1bbbc:	0001bc19 	.word	0x0001bc19
   1bbc0:	20004fc0 	.word	0x20004fc0
   1bbc4:	00026ad5 	.word	0x00026ad5
   1bbc8:	0001bbd1 	.word	0x0001bbd1
   1bbcc:	0001b901 	.word	0x0001b901

0001bbd0 <usart_read_callback>:
/**
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module) {
   1bbd0:	b580      	push	{r7, lr}
   1bbd2:	b082      	sub	sp, #8
   1bbd4:	af00      	add	r7, sp, #0
   1bbd6:	6078      	str	r0, [r7, #4]
	circular_buf_put(cbufRx, (uint8_t)latestRx);
   1bbd8:	4b09      	ldr	r3, [pc, #36]	; (1bc00 <usart_read_callback+0x30>)
   1bbda:	681a      	ldr	r2, [r3, #0]
   1bbdc:	4b09      	ldr	r3, [pc, #36]	; (1bc04 <usart_read_callback+0x34>)
   1bbde:	781b      	ldrb	r3, [r3, #0]
   1bbe0:	0019      	movs	r1, r3
   1bbe2:	0010      	movs	r0, r2
   1bbe4:	4b08      	ldr	r3, [pc, #32]	; (1bc08 <usart_read_callback+0x38>)
   1bbe6:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);
   1bbe8:	4906      	ldr	r1, [pc, #24]	; (1bc04 <usart_read_callback+0x34>)
   1bbea:	4b08      	ldr	r3, [pc, #32]	; (1bc0c <usart_read_callback+0x3c>)
   1bbec:	2201      	movs	r2, #1
   1bbee:	0018      	movs	r0, r3
   1bbf0:	4b07      	ldr	r3, [pc, #28]	; (1bc10 <usart_read_callback+0x40>)
   1bbf2:	4798      	blx	r3
	CliCharReadySemaphoreGiveFromISR();
   1bbf4:	4b07      	ldr	r3, [pc, #28]	; (1bc14 <usart_read_callback+0x44>)
   1bbf6:	4798      	blx	r3
}
   1bbf8:	46c0      	nop			; (mov r8, r8)
   1bbfa:	46bd      	mov	sp, r7
   1bbfc:	b002      	add	sp, #8
   1bbfe:	bd80      	pop	{r7, pc}
   1bc00:	20004ff4 	.word	0x20004ff4
   1bc04:	20004ff8 	.word	0x20004ff8
   1bc08:	0001b6c9 	.word	0x0001b6c9
   1bc0c:	20004fc0 	.word	0x20004fc0
   1bc10:	00026b65 	.word	0x00026b65
   1bc14:	00012ffd 	.word	0x00012ffd

0001bc18 <usart_write_callback>:
/**
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module) {
   1bc18:	b580      	push	{r7, lr}
   1bc1a:	b082      	sub	sp, #8
   1bc1c:	af00      	add	r7, sp, #0
   1bc1e:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *) &latestTx) != -1)   // Only continue if there are more characters to send
   1bc20:	4b09      	ldr	r3, [pc, #36]	; (1bc48 <usart_write_callback+0x30>)
   1bc22:	681b      	ldr	r3, [r3, #0]
   1bc24:	4a09      	ldr	r2, [pc, #36]	; (1bc4c <usart_write_callback+0x34>)
   1bc26:	0011      	movs	r1, r2
   1bc28:	0018      	movs	r0, r3
   1bc2a:	4b09      	ldr	r3, [pc, #36]	; (1bc50 <usart_write_callback+0x38>)
   1bc2c:	4798      	blx	r3
   1bc2e:	0003      	movs	r3, r0
   1bc30:	3301      	adds	r3, #1
   1bc32:	d005      	beq.n	1bc40 <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
   1bc34:	4905      	ldr	r1, [pc, #20]	; (1bc4c <usart_write_callback+0x34>)
   1bc36:	4b07      	ldr	r3, [pc, #28]	; (1bc54 <usart_write_callback+0x3c>)
   1bc38:	2201      	movs	r2, #1
   1bc3a:	0018      	movs	r0, r3
   1bc3c:	4b06      	ldr	r3, [pc, #24]	; (1bc58 <usart_write_callback+0x40>)
   1bc3e:	4798      	blx	r3
    }
}
   1bc40:	46c0      	nop			; (mov r8, r8)
   1bc42:	46bd      	mov	sp, r7
   1bc44:	b002      	add	sp, #8
   1bc46:	bd80      	pop	{r7, pc}
   1bc48:	20005400 	.word	0x20005400
   1bc4c:	200053fc 	.word	0x200053fc
   1bc50:	0001b6fd 	.word	0x0001b6fd
   1bc54:	20004fc0 	.word	0x20004fc0
   1bc58:	00026b1d 	.word	0x00026b1d

0001bc5c <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1bc5c:	b590      	push	{r4, r7, lr}
   1bc5e:	b087      	sub	sp, #28
   1bc60:	af00      	add	r7, sp, #0
   1bc62:	60f8      	str	r0, [r7, #12]
   1bc64:	000c      	movs	r4, r1
   1bc66:	0010      	movs	r0, r2
   1bc68:	0019      	movs	r1, r3
   1bc6a:	230a      	movs	r3, #10
   1bc6c:	18fb      	adds	r3, r7, r3
   1bc6e:	1c22      	adds	r2, r4, #0
   1bc70:	801a      	strh	r2, [r3, #0]
   1bc72:	2308      	movs	r3, #8
   1bc74:	18fb      	adds	r3, r7, r3
   1bc76:	1c02      	adds	r2, r0, #0
   1bc78:	801a      	strh	r2, [r3, #0]
   1bc7a:	1dfb      	adds	r3, r7, #7
   1bc7c:	1c0a      	adds	r2, r1, #0
   1bc7e:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1bc80:	230a      	movs	r3, #10
   1bc82:	18fb      	adds	r3, r7, r3
   1bc84:	881a      	ldrh	r2, [r3, #0]
   1bc86:	2308      	movs	r3, #8
   1bc88:	18fb      	adds	r3, r7, r3
   1bc8a:	881b      	ldrh	r3, [r3, #0]
   1bc8c:	1ad3      	subs	r3, r2, r3
   1bc8e:	3307      	adds	r3, #7
   1bc90:	2b00      	cmp	r3, #0
   1bc92:	da00      	bge.n	1bc96 <SDMMC_UNSTUFF_BITS+0x3a>
   1bc94:	3307      	adds	r3, #7
   1bc96:	10db      	asrs	r3, r3, #3
   1bc98:	3b01      	subs	r3, #1
   1bc9a:	68fa      	ldr	r2, [r7, #12]
   1bc9c:	18d3      	adds	r3, r2, r3
   1bc9e:	781b      	ldrb	r3, [r3, #0]
   1bca0:	0019      	movs	r1, r3
   1bca2:	2308      	movs	r3, #8
   1bca4:	18fb      	adds	r3, r7, r3
   1bca6:	881b      	ldrh	r3, [r3, #0]
   1bca8:	2207      	movs	r2, #7
   1bcaa:	4013      	ands	r3, r2
   1bcac:	4119      	asrs	r1, r3
   1bcae:	000b      	movs	r3, r1
   1bcb0:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1bcb2:	2308      	movs	r3, #8
   1bcb4:	18fb      	adds	r3, r7, r3
   1bcb6:	881b      	ldrh	r3, [r3, #0]
   1bcb8:	2207      	movs	r2, #7
   1bcba:	401a      	ands	r2, r3
   1bcbc:	1dfb      	adds	r3, r7, #7
   1bcbe:	781b      	ldrb	r3, [r3, #0]
   1bcc0:	18d3      	adds	r3, r2, r3
   1bcc2:	2b08      	cmp	r3, #8
   1bcc4:	dd1c      	ble.n	1bd00 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1bcc6:	230a      	movs	r3, #10
   1bcc8:	18fb      	adds	r3, r7, r3
   1bcca:	881a      	ldrh	r2, [r3, #0]
   1bccc:	2308      	movs	r3, #8
   1bcce:	18fb      	adds	r3, r7, r3
   1bcd0:	881b      	ldrh	r3, [r3, #0]
   1bcd2:	1ad3      	subs	r3, r2, r3
   1bcd4:	3307      	adds	r3, #7
   1bcd6:	2b00      	cmp	r3, #0
   1bcd8:	da00      	bge.n	1bcdc <SDMMC_UNSTUFF_BITS+0x80>
   1bcda:	3307      	adds	r3, #7
   1bcdc:	10db      	asrs	r3, r3, #3
   1bcde:	3b02      	subs	r3, #2
   1bce0:	68fa      	ldr	r2, [r7, #12]
   1bce2:	18d3      	adds	r3, r2, r3
   1bce4:	781b      	ldrb	r3, [r3, #0]
   1bce6:	0019      	movs	r1, r3
   1bce8:	2308      	movs	r3, #8
   1bcea:	18fb      	adds	r3, r7, r3
   1bcec:	881b      	ldrh	r3, [r3, #0]
   1bcee:	2207      	movs	r2, #7
   1bcf0:	4013      	ands	r3, r2
   1bcf2:	2208      	movs	r2, #8
   1bcf4:	1ad3      	subs	r3, r2, r3
   1bcf6:	4099      	lsls	r1, r3
   1bcf8:	000b      	movs	r3, r1
   1bcfa:	697a      	ldr	r2, [r7, #20]
   1bcfc:	4313      	orrs	r3, r2
   1bcfe:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1bd00:	2308      	movs	r3, #8
   1bd02:	18fb      	adds	r3, r7, r3
   1bd04:	881b      	ldrh	r3, [r3, #0]
   1bd06:	2207      	movs	r2, #7
   1bd08:	401a      	ands	r2, r3
   1bd0a:	1dfb      	adds	r3, r7, #7
   1bd0c:	781b      	ldrb	r3, [r3, #0]
   1bd0e:	18d3      	adds	r3, r2, r3
   1bd10:	2b10      	cmp	r3, #16
   1bd12:	dd1c      	ble.n	1bd4e <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1bd14:	230a      	movs	r3, #10
   1bd16:	18fb      	adds	r3, r7, r3
   1bd18:	881a      	ldrh	r2, [r3, #0]
   1bd1a:	2308      	movs	r3, #8
   1bd1c:	18fb      	adds	r3, r7, r3
   1bd1e:	881b      	ldrh	r3, [r3, #0]
   1bd20:	1ad3      	subs	r3, r2, r3
   1bd22:	3307      	adds	r3, #7
   1bd24:	2b00      	cmp	r3, #0
   1bd26:	da00      	bge.n	1bd2a <SDMMC_UNSTUFF_BITS+0xce>
   1bd28:	3307      	adds	r3, #7
   1bd2a:	10db      	asrs	r3, r3, #3
   1bd2c:	3b03      	subs	r3, #3
   1bd2e:	68fa      	ldr	r2, [r7, #12]
   1bd30:	18d3      	adds	r3, r2, r3
   1bd32:	781b      	ldrb	r3, [r3, #0]
   1bd34:	0019      	movs	r1, r3
   1bd36:	2308      	movs	r3, #8
   1bd38:	18fb      	adds	r3, r7, r3
   1bd3a:	881b      	ldrh	r3, [r3, #0]
   1bd3c:	2207      	movs	r2, #7
   1bd3e:	4013      	ands	r3, r2
   1bd40:	2210      	movs	r2, #16
   1bd42:	1ad3      	subs	r3, r2, r3
   1bd44:	4099      	lsls	r1, r3
   1bd46:	000b      	movs	r3, r1
   1bd48:	697a      	ldr	r2, [r7, #20]
   1bd4a:	4313      	orrs	r3, r2
   1bd4c:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1bd4e:	2308      	movs	r3, #8
   1bd50:	18fb      	adds	r3, r7, r3
   1bd52:	881b      	ldrh	r3, [r3, #0]
   1bd54:	2207      	movs	r2, #7
   1bd56:	401a      	ands	r2, r3
   1bd58:	1dfb      	adds	r3, r7, #7
   1bd5a:	781b      	ldrb	r3, [r3, #0]
   1bd5c:	18d3      	adds	r3, r2, r3
   1bd5e:	2b10      	cmp	r3, #16
   1bd60:	dd1c      	ble.n	1bd9c <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1bd62:	230a      	movs	r3, #10
   1bd64:	18fb      	adds	r3, r7, r3
   1bd66:	881a      	ldrh	r2, [r3, #0]
   1bd68:	2308      	movs	r3, #8
   1bd6a:	18fb      	adds	r3, r7, r3
   1bd6c:	881b      	ldrh	r3, [r3, #0]
   1bd6e:	1ad3      	subs	r3, r2, r3
   1bd70:	3307      	adds	r3, #7
   1bd72:	2b00      	cmp	r3, #0
   1bd74:	da00      	bge.n	1bd78 <SDMMC_UNSTUFF_BITS+0x11c>
   1bd76:	3307      	adds	r3, #7
   1bd78:	10db      	asrs	r3, r3, #3
   1bd7a:	3b03      	subs	r3, #3
   1bd7c:	68fa      	ldr	r2, [r7, #12]
   1bd7e:	18d3      	adds	r3, r2, r3
   1bd80:	781b      	ldrb	r3, [r3, #0]
   1bd82:	0019      	movs	r1, r3
   1bd84:	2308      	movs	r3, #8
   1bd86:	18fb      	adds	r3, r7, r3
   1bd88:	881b      	ldrh	r3, [r3, #0]
   1bd8a:	2207      	movs	r2, #7
   1bd8c:	4013      	ands	r3, r2
   1bd8e:	2210      	movs	r2, #16
   1bd90:	1ad3      	subs	r3, r2, r3
   1bd92:	4099      	lsls	r1, r3
   1bd94:	000b      	movs	r3, r1
   1bd96:	697a      	ldr	r2, [r7, #20]
   1bd98:	4313      	orrs	r3, r2
   1bd9a:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1bd9c:	1dfb      	adds	r3, r7, #7
   1bd9e:	781b      	ldrb	r3, [r3, #0]
   1bda0:	2201      	movs	r2, #1
   1bda2:	409a      	lsls	r2, r3
   1bda4:	0013      	movs	r3, r2
   1bda6:	1e5a      	subs	r2, r3, #1
   1bda8:	697b      	ldr	r3, [r7, #20]
   1bdaa:	4013      	ands	r3, r2
   1bdac:	617b      	str	r3, [r7, #20]
	return value;
   1bdae:	697b      	ldr	r3, [r7, #20]
}
   1bdb0:	0018      	movs	r0, r3
   1bdb2:	46bd      	mov	sp, r7
   1bdb4:	b007      	add	sp, #28
   1bdb6:	bd90      	pop	{r4, r7, pc}

0001bdb8 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1bdb8:	b580      	push	{r7, lr}
   1bdba:	b082      	sub	sp, #8
   1bdbc:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1bdbe:	4b23      	ldr	r3, [pc, #140]	; (1be4c <mmc_spi_op_cond+0x94>)
   1bdc0:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1bdc2:	4b23      	ldr	r3, [pc, #140]	; (1be50 <mmc_spi_op_cond+0x98>)
   1bdc4:	2100      	movs	r1, #0
   1bdc6:	0018      	movs	r0, r3
   1bdc8:	4b22      	ldr	r3, [pc, #136]	; (1be54 <mmc_spi_op_cond+0x9c>)
   1bdca:	4798      	blx	r3
   1bdcc:	0003      	movs	r3, r0
   1bdce:	001a      	movs	r2, r3
   1bdd0:	2301      	movs	r3, #1
   1bdd2:	4053      	eors	r3, r2
   1bdd4:	b2db      	uxtb	r3, r3
   1bdd6:	2b00      	cmp	r3, #0
   1bdd8:	d001      	beq.n	1bdde <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1bdda:	2300      	movs	r3, #0
   1bddc:	e031      	b.n	1be42 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1bdde:	4b1e      	ldr	r3, [pc, #120]	; (1be58 <mmc_spi_op_cond+0xa0>)
   1bde0:	4798      	blx	r3
   1bde2:	0003      	movs	r3, r0
   1bde4:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1bde6:	683b      	ldr	r3, [r7, #0]
   1bde8:	2201      	movs	r2, #1
   1bdea:	4013      	ands	r3, r2
   1bdec:	d006      	beq.n	1bdfc <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1bdee:	687b      	ldr	r3, [r7, #4]
   1bdf0:	1e5a      	subs	r2, r3, #1
   1bdf2:	607a      	str	r2, [r7, #4]
   1bdf4:	2b00      	cmp	r3, #0
   1bdf6:	d1e4      	bne.n	1bdc2 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1bdf8:	2300      	movs	r3, #0
   1bdfa:	e022      	b.n	1be42 <mmc_spi_op_cond+0x8a>
			break;
   1bdfc:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1bdfe:	4b17      	ldr	r3, [pc, #92]	; (1be5c <mmc_spi_op_cond+0xa4>)
   1be00:	2100      	movs	r1, #0
   1be02:	0018      	movs	r0, r3
   1be04:	4b13      	ldr	r3, [pc, #76]	; (1be54 <mmc_spi_op_cond+0x9c>)
   1be06:	4798      	blx	r3
   1be08:	0003      	movs	r3, r0
   1be0a:	001a      	movs	r2, r3
   1be0c:	2301      	movs	r3, #1
   1be0e:	4053      	eors	r3, r2
   1be10:	b2db      	uxtb	r3, r3
   1be12:	2b00      	cmp	r3, #0
   1be14:	d001      	beq.n	1be1a <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1be16:	2300      	movs	r3, #0
   1be18:	e013      	b.n	1be42 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1be1a:	4b0f      	ldr	r3, [pc, #60]	; (1be58 <mmc_spi_op_cond+0xa0>)
   1be1c:	4798      	blx	r3
   1be1e:	0002      	movs	r2, r0
   1be20:	23c0      	movs	r3, #192	; 0xc0
   1be22:	05db      	lsls	r3, r3, #23
   1be24:	401a      	ands	r2, r3
   1be26:	2380      	movs	r3, #128	; 0x80
   1be28:	05db      	lsls	r3, r3, #23
   1be2a:	429a      	cmp	r2, r3
   1be2c:	d108      	bne.n	1be40 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1be2e:	4b0c      	ldr	r3, [pc, #48]	; (1be60 <mmc_spi_op_cond+0xa8>)
   1be30:	681a      	ldr	r2, [r3, #0]
   1be32:	4b0b      	ldr	r3, [pc, #44]	; (1be60 <mmc_spi_op_cond+0xa8>)
   1be34:	681b      	ldr	r3, [r3, #0]
   1be36:	7adb      	ldrb	r3, [r3, #11]
   1be38:	2108      	movs	r1, #8
   1be3a:	430b      	orrs	r3, r1
   1be3c:	b2db      	uxtb	r3, r3
   1be3e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1be40:	2301      	movs	r3, #1
}
   1be42:	0018      	movs	r0, r3
   1be44:	46bd      	mov	sp, r7
   1be46:	b002      	add	sp, #8
   1be48:	bd80      	pop	{r7, pc}
   1be4a:	46c0      	nop			; (mov r8, r8)
   1be4c:	00001bee 	.word	0x00001bee
   1be50:	00001101 	.word	0x00001101
   1be54:	0001d835 	.word	0x0001d835
   1be58:	0001da75 	.word	0x0001da75
   1be5c:	0000053a 	.word	0x0000053a
   1be60:	20003c9c 	.word	0x20003c9c

0001be64 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1be64:	b580      	push	{r7, lr}
   1be66:	b086      	sub	sp, #24
   1be68:	af00      	add	r7, sp, #0
   1be6a:	0002      	movs	r2, r0
   1be6c:	1dfb      	adds	r3, r7, #7
   1be6e:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1be70:	4b2e      	ldr	r3, [pc, #184]	; (1bf2c <sd_spi_op_cond+0xc8>)
   1be72:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1be74:	4b2e      	ldr	r3, [pc, #184]	; (1bf30 <sd_spi_op_cond+0xcc>)
   1be76:	2100      	movs	r1, #0
   1be78:	0018      	movs	r0, r3
   1be7a:	4b2e      	ldr	r3, [pc, #184]	; (1bf34 <sd_spi_op_cond+0xd0>)
   1be7c:	4798      	blx	r3
   1be7e:	0003      	movs	r3, r0
   1be80:	001a      	movs	r2, r3
   1be82:	2301      	movs	r3, #1
   1be84:	4053      	eors	r3, r2
   1be86:	b2db      	uxtb	r3, r3
   1be88:	2b00      	cmp	r3, #0
   1be8a:	d001      	beq.n	1be90 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1be8c:	2300      	movs	r3, #0
   1be8e:	e048      	b.n	1bf22 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1be90:	2300      	movs	r3, #0
   1be92:	617b      	str	r3, [r7, #20]
		if (v2) {
   1be94:	1dfb      	adds	r3, r7, #7
   1be96:	781b      	ldrb	r3, [r3, #0]
   1be98:	2b00      	cmp	r3, #0
   1be9a:	d004      	beq.n	1bea6 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1be9c:	697b      	ldr	r3, [r7, #20]
   1be9e:	2280      	movs	r2, #128	; 0x80
   1bea0:	05d2      	lsls	r2, r2, #23
   1bea2:	4313      	orrs	r3, r2
   1bea4:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1bea6:	697b      	ldr	r3, [r7, #20]
   1bea8:	4a23      	ldr	r2, [pc, #140]	; (1bf38 <sd_spi_op_cond+0xd4>)
   1beaa:	0019      	movs	r1, r3
   1beac:	0010      	movs	r0, r2
   1beae:	4b21      	ldr	r3, [pc, #132]	; (1bf34 <sd_spi_op_cond+0xd0>)
   1beb0:	4798      	blx	r3
   1beb2:	0003      	movs	r3, r0
   1beb4:	001a      	movs	r2, r3
   1beb6:	2301      	movs	r3, #1
   1beb8:	4053      	eors	r3, r2
   1beba:	b2db      	uxtb	r3, r3
   1bebc:	2b00      	cmp	r3, #0
   1bebe:	d001      	beq.n	1bec4 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1bec0:	2300      	movs	r3, #0
   1bec2:	e02e      	b.n	1bf22 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1bec4:	4b1d      	ldr	r3, [pc, #116]	; (1bf3c <sd_spi_op_cond+0xd8>)
   1bec6:	4798      	blx	r3
   1bec8:	0003      	movs	r3, r0
   1beca:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1becc:	68fb      	ldr	r3, [r7, #12]
   1bece:	2201      	movs	r2, #1
   1bed0:	4013      	ands	r3, r2
   1bed2:	d006      	beq.n	1bee2 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1bed4:	693b      	ldr	r3, [r7, #16]
   1bed6:	1e5a      	subs	r2, r3, #1
   1bed8:	613a      	str	r2, [r7, #16]
   1beda:	2b00      	cmp	r3, #0
   1bedc:	d1ca      	bne.n	1be74 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1bede:	2300      	movs	r3, #0
   1bee0:	e01f      	b.n	1bf22 <sd_spi_op_cond+0xbe>
			break;
   1bee2:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1bee4:	4b16      	ldr	r3, [pc, #88]	; (1bf40 <sd_spi_op_cond+0xdc>)
   1bee6:	2100      	movs	r1, #0
   1bee8:	0018      	movs	r0, r3
   1beea:	4b12      	ldr	r3, [pc, #72]	; (1bf34 <sd_spi_op_cond+0xd0>)
   1beec:	4798      	blx	r3
   1beee:	0003      	movs	r3, r0
   1bef0:	001a      	movs	r2, r3
   1bef2:	2301      	movs	r3, #1
   1bef4:	4053      	eors	r3, r2
   1bef6:	b2db      	uxtb	r3, r3
   1bef8:	2b00      	cmp	r3, #0
   1befa:	d001      	beq.n	1bf00 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1befc:	2300      	movs	r3, #0
   1befe:	e010      	b.n	1bf22 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1bf00:	4b0e      	ldr	r3, [pc, #56]	; (1bf3c <sd_spi_op_cond+0xd8>)
   1bf02:	4798      	blx	r3
   1bf04:	0002      	movs	r2, r0
   1bf06:	2380      	movs	r3, #128	; 0x80
   1bf08:	05db      	lsls	r3, r3, #23
   1bf0a:	4013      	ands	r3, r2
   1bf0c:	d008      	beq.n	1bf20 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1bf0e:	4b0d      	ldr	r3, [pc, #52]	; (1bf44 <sd_spi_op_cond+0xe0>)
   1bf10:	681a      	ldr	r2, [r3, #0]
   1bf12:	4b0c      	ldr	r3, [pc, #48]	; (1bf44 <sd_spi_op_cond+0xe0>)
   1bf14:	681b      	ldr	r3, [r3, #0]
   1bf16:	7adb      	ldrb	r3, [r3, #11]
   1bf18:	2108      	movs	r1, #8
   1bf1a:	430b      	orrs	r3, r1
   1bf1c:	b2db      	uxtb	r3, r3
   1bf1e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1bf20:	2301      	movs	r3, #1
}
   1bf22:	0018      	movs	r0, r3
   1bf24:	46bd      	mov	sp, r7
   1bf26:	b006      	add	sp, #24
   1bf28:	bd80      	pop	{r7, pc}
   1bf2a:	46c0      	nop			; (mov r8, r8)
   1bf2c:	00001bee 	.word	0x00001bee
   1bf30:	00001137 	.word	0x00001137
   1bf34:	0001d835 	.word	0x0001d835
   1bf38:	00001129 	.word	0x00001129
   1bf3c:	0001da75 	.word	0x0001da75
   1bf40:	0000053a 	.word	0x0000053a
   1bf44:	20003c9c 	.word	0x20003c9c

0001bf48 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1bf48:	b580      	push	{r7, lr}
   1bf4a:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1bf4c:	2301      	movs	r3, #1
}
   1bf4e:	0018      	movs	r0, r3
   1bf50:	46bd      	mov	sp, r7
   1bf52:	bd80      	pop	{r7, pc}

0001bf54 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1bf54:	b580      	push	{r7, lr}
   1bf56:	b084      	sub	sp, #16
   1bf58:	af00      	add	r7, sp, #0
   1bf5a:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1bf5c:	687b      	ldr	r3, [r7, #4]
   1bf5e:	2200      	movs	r2, #0
   1bf60:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1bf62:	23d5      	movs	r3, #213	; 0xd5
   1bf64:	005b      	lsls	r3, r3, #1
   1bf66:	4a14      	ldr	r2, [pc, #80]	; (1bfb8 <sd_cmd8+0x64>)
   1bf68:	0019      	movs	r1, r3
   1bf6a:	0010      	movs	r0, r2
   1bf6c:	4b13      	ldr	r3, [pc, #76]	; (1bfbc <sd_cmd8+0x68>)
   1bf6e:	4798      	blx	r3
   1bf70:	0003      	movs	r3, r0
   1bf72:	001a      	movs	r2, r3
   1bf74:	2301      	movs	r3, #1
   1bf76:	4053      	eors	r3, r2
   1bf78:	b2db      	uxtb	r3, r3
   1bf7a:	2b00      	cmp	r3, #0
   1bf7c:	d001      	beq.n	1bf82 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1bf7e:	2301      	movs	r3, #1
   1bf80:	e015      	b.n	1bfae <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1bf82:	4b0f      	ldr	r3, [pc, #60]	; (1bfc0 <sd_cmd8+0x6c>)
   1bf84:	4798      	blx	r3
   1bf86:	0003      	movs	r3, r0
   1bf88:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1bf8a:	68fb      	ldr	r3, [r7, #12]
   1bf8c:	3301      	adds	r3, #1
   1bf8e:	d101      	bne.n	1bf94 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1bf90:	2301      	movs	r3, #1
   1bf92:	e00c      	b.n	1bfae <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1bf94:	68fb      	ldr	r3, [r7, #12]
   1bf96:	051b      	lsls	r3, r3, #20
   1bf98:	0d1a      	lsrs	r2, r3, #20
   1bf9a:	23d5      	movs	r3, #213	; 0xd5
   1bf9c:	005b      	lsls	r3, r3, #1
   1bf9e:	429a      	cmp	r2, r3
   1bfa0:	d001      	beq.n	1bfa6 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1bfa2:	2300      	movs	r3, #0
   1bfa4:	e003      	b.n	1bfae <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1bfa6:	687b      	ldr	r3, [r7, #4]
   1bfa8:	2201      	movs	r2, #1
   1bfaa:	701a      	strb	r2, [r3, #0]
	return true;
   1bfac:	2301      	movs	r3, #1
}
   1bfae:	0018      	movs	r0, r3
   1bfb0:	46bd      	mov	sp, r7
   1bfb2:	b004      	add	sp, #16
   1bfb4:	bd80      	pop	{r7, pc}
   1bfb6:	46c0      	nop			; (mov r8, r8)
   1bfb8:	00005508 	.word	0x00005508
   1bfbc:	0001d835 	.word	0x0001d835
   1bfc0:	0001da75 	.word	0x0001da75

0001bfc4 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1bfc4:	b590      	push	{r4, r7, lr}
   1bfc6:	b089      	sub	sp, #36	; 0x24
   1bfc8:	af02      	add	r7, sp, #8
   1bfca:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1bfcc:	2380      	movs	r3, #128	; 0x80
   1bfce:	009a      	lsls	r2, r3, #2
   1bfd0:	4841      	ldr	r0, [pc, #260]	; (1c0d8 <mmc_cmd8+0x114>)
   1bfd2:	2300      	movs	r3, #0
   1bfd4:	9300      	str	r3, [sp, #0]
   1bfd6:	2301      	movs	r3, #1
   1bfd8:	2100      	movs	r1, #0
   1bfda:	4c40      	ldr	r4, [pc, #256]	; (1c0dc <mmc_cmd8+0x118>)
   1bfdc:	47a0      	blx	r4
   1bfde:	0003      	movs	r3, r0
   1bfe0:	001a      	movs	r2, r3
   1bfe2:	2301      	movs	r3, #1
   1bfe4:	4053      	eors	r3, r2
   1bfe6:	b2db      	uxtb	r3, r3
   1bfe8:	2b00      	cmp	r3, #0
   1bfea:	d001      	beq.n	1bff0 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1bfec:	2300      	movs	r3, #0
   1bfee:	e06e      	b.n	1c0ce <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1bff0:	2316      	movs	r3, #22
   1bff2:	18fb      	adds	r3, r7, r3
   1bff4:	2200      	movs	r2, #0
   1bff6:	801a      	strh	r2, [r3, #0]
   1bff8:	e014      	b.n	1c024 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1bffa:	2310      	movs	r3, #16
   1bffc:	18fb      	adds	r3, r7, r3
   1bffe:	0018      	movs	r0, r3
   1c000:	4b37      	ldr	r3, [pc, #220]	; (1c0e0 <mmc_cmd8+0x11c>)
   1c002:	4798      	blx	r3
   1c004:	0003      	movs	r3, r0
   1c006:	001a      	movs	r2, r3
   1c008:	2301      	movs	r3, #1
   1c00a:	4053      	eors	r3, r2
   1c00c:	b2db      	uxtb	r3, r3
   1c00e:	2b00      	cmp	r3, #0
   1c010:	d001      	beq.n	1c016 <mmc_cmd8+0x52>
			return false;
   1c012:	2300      	movs	r3, #0
   1c014:	e05b      	b.n	1c0ce <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1c016:	2316      	movs	r3, #22
   1c018:	18fb      	adds	r3, r7, r3
   1c01a:	881a      	ldrh	r2, [r3, #0]
   1c01c:	2316      	movs	r3, #22
   1c01e:	18fb      	adds	r3, r7, r3
   1c020:	3201      	adds	r2, #1
   1c022:	801a      	strh	r2, [r3, #0]
   1c024:	2316      	movs	r3, #22
   1c026:	18fb      	adds	r3, r7, r3
   1c028:	881b      	ldrh	r3, [r3, #0]
   1c02a:	2b31      	cmp	r3, #49	; 0x31
   1c02c:	d9e5      	bls.n	1bffa <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1c02e:	693b      	ldr	r3, [r7, #16]
   1c030:	b2db      	uxtb	r3, r3
   1c032:	2202      	movs	r2, #2
   1c034:	4013      	ands	r3, r2
   1c036:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1c038:	687b      	ldr	r3, [r7, #4]
   1c03a:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1c03c:	4b29      	ldr	r3, [pc, #164]	; (1c0e4 <mmc_cmd8+0x120>)
   1c03e:	681b      	ldr	r3, [r3, #0]
   1c040:	330e      	adds	r3, #14
   1c042:	0018      	movs	r0, r3
   1c044:	230c      	movs	r3, #12
   1c046:	223e      	movs	r2, #62	; 0x3e
   1c048:	2180      	movs	r1, #128	; 0x80
   1c04a:	4c27      	ldr	r4, [pc, #156]	; (1c0e8 <mmc_cmd8+0x124>)
   1c04c:	47a0      	blx	r4
   1c04e:	0002      	movs	r2, r0
   1c050:	4b26      	ldr	r3, [pc, #152]	; (1c0ec <mmc_cmd8+0x128>)
   1c052:	429a      	cmp	r2, r3
   1c054:	d135      	bne.n	1c0c2 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1c056:	e014      	b.n	1c082 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1c058:	230c      	movs	r3, #12
   1c05a:	18fb      	adds	r3, r7, r3
   1c05c:	0018      	movs	r0, r3
   1c05e:	4b20      	ldr	r3, [pc, #128]	; (1c0e0 <mmc_cmd8+0x11c>)
   1c060:	4798      	blx	r3
   1c062:	0003      	movs	r3, r0
   1c064:	001a      	movs	r2, r3
   1c066:	2301      	movs	r3, #1
   1c068:	4053      	eors	r3, r2
   1c06a:	b2db      	uxtb	r3, r3
   1c06c:	2b00      	cmp	r3, #0
   1c06e:	d001      	beq.n	1c074 <mmc_cmd8+0xb0>
				return false;
   1c070:	2300      	movs	r3, #0
   1c072:	e02c      	b.n	1c0ce <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1c074:	2316      	movs	r3, #22
   1c076:	18fb      	adds	r3, r7, r3
   1c078:	881a      	ldrh	r2, [r3, #0]
   1c07a:	2316      	movs	r3, #22
   1c07c:	18fb      	adds	r3, r7, r3
   1c07e:	3201      	adds	r2, #1
   1c080:	801a      	strh	r2, [r3, #0]
   1c082:	2316      	movs	r3, #22
   1c084:	18fb      	adds	r3, r7, r3
   1c086:	881b      	ldrh	r3, [r3, #0]
   1c088:	2b35      	cmp	r3, #53	; 0x35
   1c08a:	d9e5      	bls.n	1c058 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1c08c:	4b15      	ldr	r3, [pc, #84]	; (1c0e4 <mmc_cmd8+0x120>)
   1c08e:	681b      	ldr	r3, [r3, #0]
   1c090:	68fa      	ldr	r2, [r7, #12]
   1c092:	0852      	lsrs	r2, r2, #1
   1c094:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1c096:	e014      	b.n	1c0c2 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1c098:	230c      	movs	r3, #12
   1c09a:	18fb      	adds	r3, r7, r3
   1c09c:	0018      	movs	r0, r3
   1c09e:	4b10      	ldr	r3, [pc, #64]	; (1c0e0 <mmc_cmd8+0x11c>)
   1c0a0:	4798      	blx	r3
   1c0a2:	0003      	movs	r3, r0
   1c0a4:	001a      	movs	r2, r3
   1c0a6:	2301      	movs	r3, #1
   1c0a8:	4053      	eors	r3, r2
   1c0aa:	b2db      	uxtb	r3, r3
   1c0ac:	2b00      	cmp	r3, #0
   1c0ae:	d001      	beq.n	1c0b4 <mmc_cmd8+0xf0>
			return false;
   1c0b0:	2300      	movs	r3, #0
   1c0b2:	e00c      	b.n	1c0ce <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1c0b4:	2316      	movs	r3, #22
   1c0b6:	18fb      	adds	r3, r7, r3
   1c0b8:	881a      	ldrh	r2, [r3, #0]
   1c0ba:	2316      	movs	r3, #22
   1c0bc:	18fb      	adds	r3, r7, r3
   1c0be:	3201      	adds	r2, #1
   1c0c0:	801a      	strh	r2, [r3, #0]
   1c0c2:	2316      	movs	r3, #22
   1c0c4:	18fb      	adds	r3, r7, r3
   1c0c6:	881b      	ldrh	r3, [r3, #0]
   1c0c8:	2b7f      	cmp	r3, #127	; 0x7f
   1c0ca:	d9e5      	bls.n	1c098 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1c0cc:	2301      	movs	r3, #1
}
   1c0ce:	0018      	movs	r0, r3
   1c0d0:	46bd      	mov	sp, r7
   1c0d2:	b007      	add	sp, #28
   1c0d4:	bd90      	pop	{r4, r7, pc}
   1c0d6:	46c0      	nop			; (mov r8, r8)
   1c0d8:	00081108 	.word	0x00081108
   1c0dc:	0001d85d 	.word	0x0001d85d
   1c0e0:	0001da89 	.word	0x0001da89
   1c0e4:	20003c9c 	.word	0x20003c9c
   1c0e8:	0001bc5d 	.word	0x0001bc5d
   1c0ec:	00000fff 	.word	0x00000fff

0001c0f0 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1c0f0:	b590      	push	{r4, r7, lr}
   1c0f2:	b083      	sub	sp, #12
   1c0f4:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1c0f6:	4b15      	ldr	r3, [pc, #84]	; (1c14c <sd_mmc_cmd9_spi+0x5c>)
   1c0f8:	681b      	ldr	r3, [r3, #0]
   1c0fa:	891b      	ldrh	r3, [r3, #8]
   1c0fc:	0419      	lsls	r1, r3, #16
   1c0fe:	4814      	ldr	r0, [pc, #80]	; (1c150 <sd_mmc_cmd9_spi+0x60>)
   1c100:	2301      	movs	r3, #1
   1c102:	9300      	str	r3, [sp, #0]
   1c104:	2301      	movs	r3, #1
   1c106:	2210      	movs	r2, #16
   1c108:	4c12      	ldr	r4, [pc, #72]	; (1c154 <sd_mmc_cmd9_spi+0x64>)
   1c10a:	47a0      	blx	r4
   1c10c:	0003      	movs	r3, r0
   1c10e:	001a      	movs	r2, r3
   1c110:	2301      	movs	r3, #1
   1c112:	4053      	eors	r3, r2
   1c114:	b2db      	uxtb	r3, r3
   1c116:	2b00      	cmp	r3, #0
   1c118:	d001      	beq.n	1c11e <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1c11a:	2300      	movs	r3, #0
   1c11c:	e012      	b.n	1c144 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1c11e:	4b0b      	ldr	r3, [pc, #44]	; (1c14c <sd_mmc_cmd9_spi+0x5c>)
   1c120:	681b      	ldr	r3, [r3, #0]
   1c122:	330e      	adds	r3, #14
   1c124:	2101      	movs	r1, #1
   1c126:	0018      	movs	r0, r3
   1c128:	4b0b      	ldr	r3, [pc, #44]	; (1c158 <sd_mmc_cmd9_spi+0x68>)
   1c12a:	4798      	blx	r3
   1c12c:	0003      	movs	r3, r0
   1c12e:	001a      	movs	r2, r3
   1c130:	2301      	movs	r3, #1
   1c132:	4053      	eors	r3, r2
   1c134:	b2db      	uxtb	r3, r3
   1c136:	2b00      	cmp	r3, #0
   1c138:	d001      	beq.n	1c13e <sd_mmc_cmd9_spi+0x4e>
		return false;
   1c13a:	2300      	movs	r3, #0
   1c13c:	e002      	b.n	1c144 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1c13e:	4b07      	ldr	r3, [pc, #28]	; (1c15c <sd_mmc_cmd9_spi+0x6c>)
   1c140:	4798      	blx	r3
   1c142:	0003      	movs	r3, r0
}
   1c144:	0018      	movs	r0, r3
   1c146:	46bd      	mov	sp, r7
   1c148:	b001      	add	sp, #4
   1c14a:	bd90      	pop	{r4, r7, pc}
   1c14c:	20003c9c 	.word	0x20003c9c
   1c150:	00081109 	.word	0x00081109
   1c154:	0001d85d 	.word	0x0001d85d
   1c158:	0001db2d 	.word	0x0001db2d
   1c15c:	0001dbd1 	.word	0x0001dbd1

0001c160 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1c160:	b5b0      	push	{r4, r5, r7, lr}
   1c162:	b084      	sub	sp, #16
   1c164:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1c166:	4b45      	ldr	r3, [pc, #276]	; (1c27c <mmc_decode_csd+0x11c>)
   1c168:	681b      	ldr	r3, [r3, #0]
   1c16a:	330e      	adds	r3, #14
   1c16c:	0018      	movs	r0, r3
   1c16e:	2304      	movs	r3, #4
   1c170:	227a      	movs	r2, #122	; 0x7a
   1c172:	2180      	movs	r1, #128	; 0x80
   1c174:	4c42      	ldr	r4, [pc, #264]	; (1c280 <mmc_decode_csd+0x120>)
   1c176:	47a0      	blx	r4
   1c178:	0003      	movs	r3, r0
   1c17a:	2b02      	cmp	r3, #2
   1c17c:	d011      	beq.n	1c1a2 <mmc_decode_csd+0x42>
   1c17e:	d802      	bhi.n	1c186 <mmc_decode_csd+0x26>
   1c180:	2b01      	cmp	r3, #1
   1c182:	d009      	beq.n	1c198 <mmc_decode_csd+0x38>
   1c184:	e003      	b.n	1c18e <mmc_decode_csd+0x2e>
   1c186:	2b03      	cmp	r3, #3
   1c188:	d010      	beq.n	1c1ac <mmc_decode_csd+0x4c>
   1c18a:	2b04      	cmp	r3, #4
   1c18c:	d013      	beq.n	1c1b6 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1c18e:	4b3b      	ldr	r3, [pc, #236]	; (1c27c <mmc_decode_csd+0x11c>)
   1c190:	681b      	ldr	r3, [r3, #0]
   1c192:	2212      	movs	r2, #18
   1c194:	731a      	strb	r2, [r3, #12]
		break;
   1c196:	e013      	b.n	1c1c0 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1c198:	4b38      	ldr	r3, [pc, #224]	; (1c27c <mmc_decode_csd+0x11c>)
   1c19a:	681b      	ldr	r3, [r3, #0]
   1c19c:	2214      	movs	r2, #20
   1c19e:	731a      	strb	r2, [r3, #12]
		break;
   1c1a0:	e00e      	b.n	1c1c0 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1c1a2:	4b36      	ldr	r3, [pc, #216]	; (1c27c <mmc_decode_csd+0x11c>)
   1c1a4:	681b      	ldr	r3, [r3, #0]
   1c1a6:	2222      	movs	r2, #34	; 0x22
   1c1a8:	731a      	strb	r2, [r3, #12]
		break;
   1c1aa:	e009      	b.n	1c1c0 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1c1ac:	4b33      	ldr	r3, [pc, #204]	; (1c27c <mmc_decode_csd+0x11c>)
   1c1ae:	681b      	ldr	r3, [r3, #0]
   1c1b0:	2230      	movs	r2, #48	; 0x30
   1c1b2:	731a      	strb	r2, [r3, #12]
		break;
   1c1b4:	e004      	b.n	1c1c0 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1c1b6:	4b31      	ldr	r3, [pc, #196]	; (1c27c <mmc_decode_csd+0x11c>)
   1c1b8:	681b      	ldr	r3, [r3, #0]
   1c1ba:	2240      	movs	r2, #64	; 0x40
   1c1bc:	731a      	strb	r2, [r3, #12]
		break;
   1c1be:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1c1c0:	4b2e      	ldr	r3, [pc, #184]	; (1c27c <mmc_decode_csd+0x11c>)
   1c1c2:	681b      	ldr	r3, [r3, #0]
   1c1c4:	330e      	adds	r3, #14
   1c1c6:	0018      	movs	r0, r3
   1c1c8:	2308      	movs	r3, #8
   1c1ca:	2260      	movs	r2, #96	; 0x60
   1c1cc:	2180      	movs	r1, #128	; 0x80
   1c1ce:	4c2c      	ldr	r4, [pc, #176]	; (1c280 <mmc_decode_csd+0x120>)
   1c1d0:	47a0      	blx	r4
   1c1d2:	0003      	movs	r3, r0
   1c1d4:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1c1d6:	68fb      	ldr	r3, [r7, #12]
   1c1d8:	2207      	movs	r2, #7
   1c1da:	401a      	ands	r2, r3
   1c1dc:	4b29      	ldr	r3, [pc, #164]	; (1c284 <mmc_decode_csd+0x124>)
   1c1de:	0092      	lsls	r2, r2, #2
   1c1e0:	58d3      	ldr	r3, [r2, r3]
   1c1e2:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1c1e4:	68fb      	ldr	r3, [r7, #12]
   1c1e6:	08db      	lsrs	r3, r3, #3
   1c1e8:	220f      	movs	r2, #15
   1c1ea:	401a      	ands	r2, r3
   1c1ec:	4b26      	ldr	r3, [pc, #152]	; (1c288 <mmc_decode_csd+0x128>)
   1c1ee:	0092      	lsls	r2, r2, #2
   1c1f0:	58d3      	ldr	r3, [r2, r3]
   1c1f2:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1c1f4:	4b21      	ldr	r3, [pc, #132]	; (1c27c <mmc_decode_csd+0x11c>)
   1c1f6:	681b      	ldr	r3, [r3, #0]
   1c1f8:	68ba      	ldr	r2, [r7, #8]
   1c1fa:	6879      	ldr	r1, [r7, #4]
   1c1fc:	434a      	muls	r2, r1
   1c1fe:	21fa      	movs	r1, #250	; 0xfa
   1c200:	0089      	lsls	r1, r1, #2
   1c202:	434a      	muls	r2, r1
   1c204:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1c206:	4b1d      	ldr	r3, [pc, #116]	; (1c27c <mmc_decode_csd+0x11c>)
   1c208:	681b      	ldr	r3, [r3, #0]
   1c20a:	330e      	adds	r3, #14
   1c20c:	0018      	movs	r0, r3
   1c20e:	230c      	movs	r3, #12
   1c210:	223e      	movs	r2, #62	; 0x3e
   1c212:	2180      	movs	r1, #128	; 0x80
   1c214:	4c1a      	ldr	r4, [pc, #104]	; (1c280 <mmc_decode_csd+0x120>)
   1c216:	47a0      	blx	r4
   1c218:	0002      	movs	r2, r0
   1c21a:	4b1c      	ldr	r3, [pc, #112]	; (1c28c <mmc_decode_csd+0x12c>)
   1c21c:	429a      	cmp	r2, r3
   1c21e:	d028      	beq.n	1c272 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1c220:	4b16      	ldr	r3, [pc, #88]	; (1c27c <mmc_decode_csd+0x11c>)
   1c222:	681b      	ldr	r3, [r3, #0]
   1c224:	330e      	adds	r3, #14
   1c226:	0018      	movs	r0, r3
   1c228:	230c      	movs	r3, #12
   1c22a:	223e      	movs	r2, #62	; 0x3e
   1c22c:	2180      	movs	r1, #128	; 0x80
   1c22e:	4c14      	ldr	r4, [pc, #80]	; (1c280 <mmc_decode_csd+0x120>)
   1c230:	47a0      	blx	r4
   1c232:	0003      	movs	r3, r0
   1c234:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1c236:	4b11      	ldr	r3, [pc, #68]	; (1c27c <mmc_decode_csd+0x11c>)
   1c238:	681b      	ldr	r3, [r3, #0]
   1c23a:	330e      	adds	r3, #14
   1c23c:	0018      	movs	r0, r3
   1c23e:	2303      	movs	r3, #3
   1c240:	222f      	movs	r2, #47	; 0x2f
   1c242:	2180      	movs	r1, #128	; 0x80
   1c244:	4d0e      	ldr	r5, [pc, #56]	; (1c280 <mmc_decode_csd+0x120>)
   1c246:	47a8      	blx	r5
   1c248:	0003      	movs	r3, r0
   1c24a:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1c24c:	409c      	lsls	r4, r3
   1c24e:	0023      	movs	r3, r4
   1c250:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1c252:	4b0a      	ldr	r3, [pc, #40]	; (1c27c <mmc_decode_csd+0x11c>)
   1c254:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1c256:	4b09      	ldr	r3, [pc, #36]	; (1c27c <mmc_decode_csd+0x11c>)
   1c258:	681b      	ldr	r3, [r3, #0]
   1c25a:	330e      	adds	r3, #14
   1c25c:	0018      	movs	r0, r3
   1c25e:	2304      	movs	r3, #4
   1c260:	2250      	movs	r2, #80	; 0x50
   1c262:	2180      	movs	r1, #128	; 0x80
   1c264:	4d06      	ldr	r5, [pc, #24]	; (1c280 <mmc_decode_csd+0x120>)
   1c266:	47a8      	blx	r5
   1c268:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1c26a:	683b      	ldr	r3, [r7, #0]
   1c26c:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1c26e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1c270:	6063      	str	r3, [r4, #4]
	}
}
   1c272:	46c0      	nop			; (mov r8, r8)
   1c274:	46bd      	mov	sp, r7
   1c276:	b004      	add	sp, #16
   1c278:	bdb0      	pop	{r4, r5, r7, pc}
   1c27a:	46c0      	nop			; (mov r8, r8)
   1c27c:	20003c9c 	.word	0x20003c9c
   1c280:	0001bc5d 	.word	0x0001bc5d
   1c284:	00035700 	.word	0x00035700
   1c288:	0003575c 	.word	0x0003575c
   1c28c:	00000fff 	.word	0x00000fff

0001c290 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1c290:	b5b0      	push	{r4, r5, r7, lr}
   1c292:	b084      	sub	sp, #16
   1c294:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1c296:	4b35      	ldr	r3, [pc, #212]	; (1c36c <sd_decode_csd+0xdc>)
   1c298:	681b      	ldr	r3, [r3, #0]
   1c29a:	330e      	adds	r3, #14
   1c29c:	0018      	movs	r0, r3
   1c29e:	2308      	movs	r3, #8
   1c2a0:	2260      	movs	r2, #96	; 0x60
   1c2a2:	2180      	movs	r1, #128	; 0x80
   1c2a4:	4c32      	ldr	r4, [pc, #200]	; (1c370 <sd_decode_csd+0xe0>)
   1c2a6:	47a0      	blx	r4
   1c2a8:	0003      	movs	r3, r0
   1c2aa:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1c2ac:	68fb      	ldr	r3, [r7, #12]
   1c2ae:	2207      	movs	r2, #7
   1c2b0:	401a      	ands	r2, r3
   1c2b2:	4b30      	ldr	r3, [pc, #192]	; (1c374 <sd_decode_csd+0xe4>)
   1c2b4:	0092      	lsls	r2, r2, #2
   1c2b6:	58d3      	ldr	r3, [r2, r3]
   1c2b8:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1c2ba:	68fb      	ldr	r3, [r7, #12]
   1c2bc:	08db      	lsrs	r3, r3, #3
   1c2be:	220f      	movs	r2, #15
   1c2c0:	401a      	ands	r2, r3
   1c2c2:	4b2d      	ldr	r3, [pc, #180]	; (1c378 <sd_decode_csd+0xe8>)
   1c2c4:	0092      	lsls	r2, r2, #2
   1c2c6:	58d3      	ldr	r3, [r2, r3]
   1c2c8:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1c2ca:	4b28      	ldr	r3, [pc, #160]	; (1c36c <sd_decode_csd+0xdc>)
   1c2cc:	681b      	ldr	r3, [r3, #0]
   1c2ce:	68ba      	ldr	r2, [r7, #8]
   1c2d0:	6879      	ldr	r1, [r7, #4]
   1c2d2:	434a      	muls	r2, r1
   1c2d4:	21fa      	movs	r1, #250	; 0xfa
   1c2d6:	0089      	lsls	r1, r1, #2
   1c2d8:	434a      	muls	r2, r1
   1c2da:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1c2dc:	4b23      	ldr	r3, [pc, #140]	; (1c36c <sd_decode_csd+0xdc>)
   1c2de:	681b      	ldr	r3, [r3, #0]
   1c2e0:	330e      	adds	r3, #14
   1c2e2:	0018      	movs	r0, r3
   1c2e4:	2302      	movs	r3, #2
   1c2e6:	227e      	movs	r2, #126	; 0x7e
   1c2e8:	2180      	movs	r1, #128	; 0x80
   1c2ea:	4c21      	ldr	r4, [pc, #132]	; (1c370 <sd_decode_csd+0xe0>)
   1c2ec:	47a0      	blx	r4
   1c2ee:	1e03      	subs	r3, r0, #0
   1c2f0:	d00f      	beq.n	1c312 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1c2f2:	4b1e      	ldr	r3, [pc, #120]	; (1c36c <sd_decode_csd+0xdc>)
   1c2f4:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1c2f6:	4b1d      	ldr	r3, [pc, #116]	; (1c36c <sd_decode_csd+0xdc>)
   1c2f8:	681b      	ldr	r3, [r3, #0]
   1c2fa:	330e      	adds	r3, #14
   1c2fc:	0018      	movs	r0, r3
   1c2fe:	2316      	movs	r3, #22
   1c300:	2230      	movs	r2, #48	; 0x30
   1c302:	2180      	movs	r1, #128	; 0x80
   1c304:	4d1a      	ldr	r5, [pc, #104]	; (1c370 <sd_decode_csd+0xe0>)
   1c306:	47a8      	blx	r5
   1c308:	0003      	movs	r3, r0
				* 512;
   1c30a:	3301      	adds	r3, #1
   1c30c:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1c30e:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1c310:	e028      	b.n	1c364 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1c312:	4b16      	ldr	r3, [pc, #88]	; (1c36c <sd_decode_csd+0xdc>)
   1c314:	681b      	ldr	r3, [r3, #0]
   1c316:	330e      	adds	r3, #14
   1c318:	0018      	movs	r0, r3
   1c31a:	230c      	movs	r3, #12
   1c31c:	223e      	movs	r2, #62	; 0x3e
   1c31e:	2180      	movs	r1, #128	; 0x80
   1c320:	4c13      	ldr	r4, [pc, #76]	; (1c370 <sd_decode_csd+0xe0>)
   1c322:	47a0      	blx	r4
   1c324:	0003      	movs	r3, r0
   1c326:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1c328:	4b10      	ldr	r3, [pc, #64]	; (1c36c <sd_decode_csd+0xdc>)
   1c32a:	681b      	ldr	r3, [r3, #0]
   1c32c:	330e      	adds	r3, #14
   1c32e:	0018      	movs	r0, r3
   1c330:	2303      	movs	r3, #3
   1c332:	222f      	movs	r2, #47	; 0x2f
   1c334:	2180      	movs	r1, #128	; 0x80
   1c336:	4d0e      	ldr	r5, [pc, #56]	; (1c370 <sd_decode_csd+0xe0>)
   1c338:	47a8      	blx	r5
   1c33a:	0003      	movs	r3, r0
   1c33c:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1c33e:	409c      	lsls	r4, r3
   1c340:	0023      	movs	r3, r4
   1c342:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1c344:	4b09      	ldr	r3, [pc, #36]	; (1c36c <sd_decode_csd+0xdc>)
   1c346:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1c348:	4b08      	ldr	r3, [pc, #32]	; (1c36c <sd_decode_csd+0xdc>)
   1c34a:	681b      	ldr	r3, [r3, #0]
   1c34c:	330e      	adds	r3, #14
   1c34e:	0018      	movs	r0, r3
   1c350:	2304      	movs	r3, #4
   1c352:	2250      	movs	r2, #80	; 0x50
   1c354:	2180      	movs	r1, #128	; 0x80
   1c356:	4d06      	ldr	r5, [pc, #24]	; (1c370 <sd_decode_csd+0xe0>)
   1c358:	47a8      	blx	r5
   1c35a:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1c35c:	683b      	ldr	r3, [r7, #0]
   1c35e:	4093      	lsls	r3, r2
				/ 1024;
   1c360:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1c362:	6063      	str	r3, [r4, #4]
}
   1c364:	46c0      	nop			; (mov r8, r8)
   1c366:	46bd      	mov	sp, r7
   1c368:	b004      	add	sp, #16
   1c36a:	bdb0      	pop	{r4, r5, r7, pc}
   1c36c:	20003c9c 	.word	0x20003c9c
   1c370:	0001bc5d 	.word	0x0001bc5d
   1c374:	00035700 	.word	0x00035700
   1c378:	0003571c 	.word	0x0003571c

0001c37c <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1c37c:	b580      	push	{r7, lr}
   1c37e:	b082      	sub	sp, #8
   1c380:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1c382:	4b11      	ldr	r3, [pc, #68]	; (1c3c8 <sd_mmc_cmd13+0x4c>)
   1c384:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1c386:	4b11      	ldr	r3, [pc, #68]	; (1c3cc <sd_mmc_cmd13+0x50>)
   1c388:	2100      	movs	r1, #0
   1c38a:	0018      	movs	r0, r3
   1c38c:	4b10      	ldr	r3, [pc, #64]	; (1c3d0 <sd_mmc_cmd13+0x54>)
   1c38e:	4798      	blx	r3
   1c390:	0003      	movs	r3, r0
   1c392:	001a      	movs	r2, r3
   1c394:	2301      	movs	r3, #1
   1c396:	4053      	eors	r3, r2
   1c398:	b2db      	uxtb	r3, r3
   1c39a:	2b00      	cmp	r3, #0
   1c39c:	d001      	beq.n	1c3a2 <sd_mmc_cmd13+0x26>
				return false;
   1c39e:	2300      	movs	r3, #0
   1c3a0:	e00e      	b.n	1c3c0 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1c3a2:	4b0c      	ldr	r3, [pc, #48]	; (1c3d4 <sd_mmc_cmd13+0x58>)
   1c3a4:	4798      	blx	r3
   1c3a6:	0002      	movs	r2, r0
   1c3a8:	23ff      	movs	r3, #255	; 0xff
   1c3aa:	4013      	ands	r3, r2
   1c3ac:	d006      	beq.n	1c3bc <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1c3ae:	687b      	ldr	r3, [r7, #4]
   1c3b0:	1e5a      	subs	r2, r3, #1
   1c3b2:	607a      	str	r2, [r7, #4]
   1c3b4:	2b00      	cmp	r3, #0
   1c3b6:	d1e6      	bne.n	1c386 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1c3b8:	2300      	movs	r3, #0
   1c3ba:	e001      	b.n	1c3c0 <sd_mmc_cmd13+0x44>
				break;
   1c3bc:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1c3be:	2301      	movs	r3, #1
}
   1c3c0:	0018      	movs	r0, r3
   1c3c2:	46bd      	mov	sp, r7
   1c3c4:	b002      	add	sp, #8
   1c3c6:	bd80      	pop	{r7, pc}
   1c3c8:	00030d40 	.word	0x00030d40
   1c3cc:	00001b0d 	.word	0x00001b0d
   1c3d0:	0001d835 	.word	0x0001d835
   1c3d4:	0001da75 	.word	0x0001da75

0001c3d8 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1c3d8:	b590      	push	{r4, r7, lr}
   1c3da:	b085      	sub	sp, #20
   1c3dc:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1c3de:	4b38      	ldr	r3, [pc, #224]	; (1c4c0 <sd_acmd51+0xe8>)
   1c3e0:	681b      	ldr	r3, [r3, #0]
   1c3e2:	891b      	ldrh	r3, [r3, #8]
   1c3e4:	041b      	lsls	r3, r3, #16
   1c3e6:	4a37      	ldr	r2, [pc, #220]	; (1c4c4 <sd_acmd51+0xec>)
   1c3e8:	0019      	movs	r1, r3
   1c3ea:	0010      	movs	r0, r2
   1c3ec:	4b36      	ldr	r3, [pc, #216]	; (1c4c8 <sd_acmd51+0xf0>)
   1c3ee:	4798      	blx	r3
   1c3f0:	0003      	movs	r3, r0
   1c3f2:	001a      	movs	r2, r3
   1c3f4:	2301      	movs	r3, #1
   1c3f6:	4053      	eors	r3, r2
   1c3f8:	b2db      	uxtb	r3, r3
   1c3fa:	2b00      	cmp	r3, #0
   1c3fc:	d001      	beq.n	1c402 <sd_acmd51+0x2a>
		return false;
   1c3fe:	2300      	movs	r3, #0
   1c400:	e059      	b.n	1c4b6 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1c402:	4832      	ldr	r0, [pc, #200]	; (1c4cc <sd_acmd51+0xf4>)
   1c404:	2301      	movs	r3, #1
   1c406:	9300      	str	r3, [sp, #0]
   1c408:	2301      	movs	r3, #1
   1c40a:	2208      	movs	r2, #8
   1c40c:	2100      	movs	r1, #0
   1c40e:	4c30      	ldr	r4, [pc, #192]	; (1c4d0 <sd_acmd51+0xf8>)
   1c410:	47a0      	blx	r4
   1c412:	0003      	movs	r3, r0
   1c414:	001a      	movs	r2, r3
   1c416:	2301      	movs	r3, #1
   1c418:	4053      	eors	r3, r2
   1c41a:	b2db      	uxtb	r3, r3
   1c41c:	2b00      	cmp	r3, #0
   1c41e:	d001      	beq.n	1c424 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1c420:	2300      	movs	r3, #0
   1c422:	e048      	b.n	1c4b6 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1c424:	003b      	movs	r3, r7
   1c426:	2101      	movs	r1, #1
   1c428:	0018      	movs	r0, r3
   1c42a:	4b2a      	ldr	r3, [pc, #168]	; (1c4d4 <sd_acmd51+0xfc>)
   1c42c:	4798      	blx	r3
   1c42e:	0003      	movs	r3, r0
   1c430:	001a      	movs	r2, r3
   1c432:	2301      	movs	r3, #1
   1c434:	4053      	eors	r3, r2
   1c436:	b2db      	uxtb	r3, r3
   1c438:	2b00      	cmp	r3, #0
   1c43a:	d001      	beq.n	1c440 <sd_acmd51+0x68>
		return false;
   1c43c:	2300      	movs	r3, #0
   1c43e:	e03a      	b.n	1c4b6 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1c440:	4b25      	ldr	r3, [pc, #148]	; (1c4d8 <sd_acmd51+0x100>)
   1c442:	4798      	blx	r3
   1c444:	0003      	movs	r3, r0
   1c446:	001a      	movs	r2, r3
   1c448:	2301      	movs	r3, #1
   1c44a:	4053      	eors	r3, r2
   1c44c:	b2db      	uxtb	r3, r3
   1c44e:	2b00      	cmp	r3, #0
   1c450:	d001      	beq.n	1c456 <sd_acmd51+0x7e>
		return false;
   1c452:	2300      	movs	r3, #0
   1c454:	e02f      	b.n	1c4b6 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1c456:	0038      	movs	r0, r7
   1c458:	2304      	movs	r3, #4
   1c45a:	2238      	movs	r2, #56	; 0x38
   1c45c:	2140      	movs	r1, #64	; 0x40
   1c45e:	4c1f      	ldr	r4, [pc, #124]	; (1c4dc <sd_acmd51+0x104>)
   1c460:	47a0      	blx	r4
   1c462:	0003      	movs	r3, r0
   1c464:	2b01      	cmp	r3, #1
   1c466:	d008      	beq.n	1c47a <sd_acmd51+0xa2>
   1c468:	d302      	bcc.n	1c470 <sd_acmd51+0x98>
   1c46a:	2b02      	cmp	r3, #2
   1c46c:	d00a      	beq.n	1c484 <sd_acmd51+0xac>
   1c46e:	e01c      	b.n	1c4aa <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1c470:	4b13      	ldr	r3, [pc, #76]	; (1c4c0 <sd_acmd51+0xe8>)
   1c472:	681b      	ldr	r3, [r3, #0]
   1c474:	2210      	movs	r2, #16
   1c476:	731a      	strb	r2, [r3, #12]
		break;
   1c478:	e01c      	b.n	1c4b4 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1c47a:	4b11      	ldr	r3, [pc, #68]	; (1c4c0 <sd_acmd51+0xe8>)
   1c47c:	681b      	ldr	r3, [r3, #0]
   1c47e:	221a      	movs	r2, #26
   1c480:	731a      	strb	r2, [r3, #12]
		break;
   1c482:	e017      	b.n	1c4b4 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1c484:	0038      	movs	r0, r7
   1c486:	2301      	movs	r3, #1
   1c488:	222f      	movs	r2, #47	; 0x2f
   1c48a:	2140      	movs	r1, #64	; 0x40
   1c48c:	4c13      	ldr	r4, [pc, #76]	; (1c4dc <sd_acmd51+0x104>)
   1c48e:	47a0      	blx	r4
   1c490:	0003      	movs	r3, r0
   1c492:	2b01      	cmp	r3, #1
   1c494:	d104      	bne.n	1c4a0 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1c496:	4b0a      	ldr	r3, [pc, #40]	; (1c4c0 <sd_acmd51+0xe8>)
   1c498:	681b      	ldr	r3, [r3, #0]
   1c49a:	2230      	movs	r2, #48	; 0x30
   1c49c:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1c49e:	e009      	b.n	1c4b4 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1c4a0:	4b07      	ldr	r3, [pc, #28]	; (1c4c0 <sd_acmd51+0xe8>)
   1c4a2:	681b      	ldr	r3, [r3, #0]
   1c4a4:	2220      	movs	r2, #32
   1c4a6:	731a      	strb	r2, [r3, #12]
		break;
   1c4a8:	e004      	b.n	1c4b4 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1c4aa:	4b05      	ldr	r3, [pc, #20]	; (1c4c0 <sd_acmd51+0xe8>)
   1c4ac:	681b      	ldr	r3, [r3, #0]
   1c4ae:	2210      	movs	r2, #16
   1c4b0:	731a      	strb	r2, [r3, #12]
		break;
   1c4b2:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1c4b4:	2301      	movs	r3, #1
}
   1c4b6:	0018      	movs	r0, r3
   1c4b8:	46bd      	mov	sp, r7
   1c4ba:	b003      	add	sp, #12
   1c4bc:	bd90      	pop	{r4, r7, pc}
   1c4be:	46c0      	nop			; (mov r8, r8)
   1c4c0:	20003c9c 	.word	0x20003c9c
   1c4c4:	00001137 	.word	0x00001137
   1c4c8:	0001d835 	.word	0x0001d835
   1c4cc:	00081133 	.word	0x00081133
   1c4d0:	0001d85d 	.word	0x0001d85d
   1c4d4:	0001db2d 	.word	0x0001db2d
   1c4d8:	0001dbd1 	.word	0x0001dbd1
   1c4dc:	0001bc5d 	.word	0x0001bc5d

0001c4e0 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1c4e0:	b580      	push	{r7, lr}
   1c4e2:	b082      	sub	sp, #8
   1c4e4:	af00      	add	r7, sp, #0
   1c4e6:	0002      	movs	r2, r0
   1c4e8:	1dfb      	adds	r3, r7, #7
   1c4ea:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1c4ec:	1dfb      	adds	r3, r7, #7
   1c4ee:	781b      	ldrb	r3, [r3, #0]
   1c4f0:	2b00      	cmp	r3, #0
   1c4f2:	d001      	beq.n	1c4f8 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1c4f4:	2304      	movs	r3, #4
   1c4f6:	e047      	b.n	1c588 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1c4f8:	1dfb      	adds	r3, r7, #7
   1c4fa:	781b      	ldrb	r3, [r3, #0]
   1c4fc:	4a24      	ldr	r2, [pc, #144]	; (1c590 <sd_mmc_select_slot+0xb0>)
   1c4fe:	015b      	lsls	r3, r3, #5
   1c500:	18d3      	adds	r3, r2, r3
   1c502:	330a      	adds	r3, #10
   1c504:	781b      	ldrb	r3, [r3, #0]
   1c506:	2b04      	cmp	r3, #4
   1c508:	d008      	beq.n	1c51c <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1c50a:	1dfb      	adds	r3, r7, #7
   1c50c:	781b      	ldrb	r3, [r3, #0]
   1c50e:	4a20      	ldr	r2, [pc, #128]	; (1c590 <sd_mmc_select_slot+0xb0>)
   1c510:	015b      	lsls	r3, r3, #5
   1c512:	18d3      	adds	r3, r2, r3
   1c514:	330a      	adds	r3, #10
   1c516:	781b      	ldrb	r3, [r3, #0]
   1c518:	2b03      	cmp	r3, #3
   1c51a:	d11d      	bne.n	1c558 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1c51c:	1dfb      	adds	r3, r7, #7
   1c51e:	781b      	ldrb	r3, [r3, #0]
   1c520:	4a1b      	ldr	r2, [pc, #108]	; (1c590 <sd_mmc_select_slot+0xb0>)
   1c522:	015b      	lsls	r3, r3, #5
   1c524:	18d3      	adds	r3, r2, r3
   1c526:	330a      	adds	r3, #10
   1c528:	2202      	movs	r2, #2
   1c52a:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1c52c:	1dfb      	adds	r3, r7, #7
   1c52e:	781a      	ldrb	r2, [r3, #0]
   1c530:	4b17      	ldr	r3, [pc, #92]	; (1c590 <sd_mmc_select_slot+0xb0>)
   1c532:	0152      	lsls	r2, r2, #5
   1c534:	4917      	ldr	r1, [pc, #92]	; (1c594 <sd_mmc_select_slot+0xb4>)
   1c536:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1c538:	1dfb      	adds	r3, r7, #7
   1c53a:	781b      	ldrb	r3, [r3, #0]
   1c53c:	4a14      	ldr	r2, [pc, #80]	; (1c590 <sd_mmc_select_slot+0xb0>)
   1c53e:	015b      	lsls	r3, r3, #5
   1c540:	18d3      	adds	r3, r2, r3
   1c542:	330d      	adds	r3, #13
   1c544:	2201      	movs	r2, #1
   1c546:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1c548:	1dfb      	adds	r3, r7, #7
   1c54a:	781b      	ldrb	r3, [r3, #0]
   1c54c:	4a10      	ldr	r2, [pc, #64]	; (1c590 <sd_mmc_select_slot+0xb0>)
   1c54e:	015b      	lsls	r3, r3, #5
   1c550:	18d3      	adds	r3, r2, r3
   1c552:	331e      	adds	r3, #30
   1c554:	2200      	movs	r2, #0
   1c556:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1c558:	4b0f      	ldr	r3, [pc, #60]	; (1c598 <sd_mmc_select_slot+0xb8>)
   1c55a:	1dfa      	adds	r2, r7, #7
   1c55c:	7812      	ldrb	r2, [r2, #0]
   1c55e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1c560:	1dfb      	adds	r3, r7, #7
   1c562:	781b      	ldrb	r3, [r3, #0]
   1c564:	015a      	lsls	r2, r3, #5
   1c566:	4b0a      	ldr	r3, [pc, #40]	; (1c590 <sd_mmc_select_slot+0xb0>)
   1c568:	18d2      	adds	r2, r2, r3
   1c56a:	4b0c      	ldr	r3, [pc, #48]	; (1c59c <sd_mmc_select_slot+0xbc>)
   1c56c:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1c56e:	4b0c      	ldr	r3, [pc, #48]	; (1c5a0 <sd_mmc_select_slot+0xc0>)
   1c570:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1c572:	1dfb      	adds	r3, r7, #7
   1c574:	781b      	ldrb	r3, [r3, #0]
   1c576:	4a06      	ldr	r2, [pc, #24]	; (1c590 <sd_mmc_select_slot+0xb0>)
   1c578:	015b      	lsls	r3, r3, #5
   1c57a:	18d3      	adds	r3, r2, r3
   1c57c:	330a      	adds	r3, #10
   1c57e:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1c580:	3b02      	subs	r3, #2
   1c582:	425a      	negs	r2, r3
   1c584:	4153      	adcs	r3, r2
   1c586:	b2db      	uxtb	r3, r3
}
   1c588:	0018      	movs	r0, r3
   1c58a:	46bd      	mov	sp, r7
   1c58c:	b002      	add	sp, #8
   1c58e:	bd80      	pop	{r7, pc}
   1c590:	20003c78 	.word	0x20003c78
   1c594:	00061a80 	.word	0x00061a80
   1c598:	20003c98 	.word	0x20003c98
   1c59c:	20003c9c 	.word	0x20003c9c
   1c5a0:	0001c5a5 	.word	0x0001c5a5

0001c5a4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1c5a4:	b5b0      	push	{r4, r5, r7, lr}
   1c5a6:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1c5a8:	4b09      	ldr	r3, [pc, #36]	; (1c5d0 <sd_mmc_configure_slot+0x2c>)
   1c5aa:	7818      	ldrb	r0, [r3, #0]
   1c5ac:	4b09      	ldr	r3, [pc, #36]	; (1c5d4 <sd_mmc_configure_slot+0x30>)
   1c5ae:	681b      	ldr	r3, [r3, #0]
   1c5b0:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1c5b2:	4b08      	ldr	r3, [pc, #32]	; (1c5d4 <sd_mmc_configure_slot+0x30>)
   1c5b4:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1c5b6:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1c5b8:	4b06      	ldr	r3, [pc, #24]	; (1c5d4 <sd_mmc_configure_slot+0x30>)
   1c5ba:	681b      	ldr	r3, [r3, #0]
   1c5bc:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1c5be:	1e5c      	subs	r4, r3, #1
   1c5c0:	41a3      	sbcs	r3, r4
   1c5c2:	b2db      	uxtb	r3, r3
   1c5c4:	4c04      	ldr	r4, [pc, #16]	; (1c5d8 <sd_mmc_configure_slot+0x34>)
   1c5c6:	47a0      	blx	r4
}
   1c5c8:	46c0      	nop			; (mov r8, r8)
   1c5ca:	46bd      	mov	sp, r7
   1c5cc:	bdb0      	pop	{r4, r5, r7, pc}
   1c5ce:	46c0      	nop			; (mov r8, r8)
   1c5d0:	20003c98 	.word	0x20003c98
   1c5d4:	20003c9c 	.word	0x20003c9c
   1c5d8:	0001d71d 	.word	0x0001d71d

0001c5dc <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1c5dc:	b580      	push	{r7, lr}
   1c5de:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1c5e0:	4b05      	ldr	r3, [pc, #20]	; (1c5f8 <sd_mmc_deselect_slot+0x1c>)
   1c5e2:	781b      	ldrb	r3, [r3, #0]
   1c5e4:	2b00      	cmp	r3, #0
   1c5e6:	d104      	bne.n	1c5f2 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1c5e8:	4b03      	ldr	r3, [pc, #12]	; (1c5f8 <sd_mmc_deselect_slot+0x1c>)
   1c5ea:	781b      	ldrb	r3, [r3, #0]
   1c5ec:	0018      	movs	r0, r3
   1c5ee:	4b03      	ldr	r3, [pc, #12]	; (1c5fc <sd_mmc_deselect_slot+0x20>)
   1c5f0:	4798      	blx	r3
	}
}
   1c5f2:	46c0      	nop			; (mov r8, r8)
   1c5f4:	46bd      	mov	sp, r7
   1c5f6:	bd80      	pop	{r7, pc}
   1c5f8:	20003c98 	.word	0x20003c98
   1c5fc:	0001d7a5 	.word	0x0001d7a5

0001c600 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1c600:	b580      	push	{r7, lr}
   1c602:	b082      	sub	sp, #8
   1c604:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1c606:	1dfb      	adds	r3, r7, #7
   1c608:	2200      	movs	r2, #0
   1c60a:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1c60c:	4b59      	ldr	r3, [pc, #356]	; (1c774 <sd_mmc_spi_card_init+0x174>)
   1c60e:	681b      	ldr	r3, [r3, #0]
   1c610:	2201      	movs	r2, #1
   1c612:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1c614:	4b57      	ldr	r3, [pc, #348]	; (1c774 <sd_mmc_spi_card_init+0x174>)
   1c616:	681b      	ldr	r3, [r3, #0]
   1c618:	2200      	movs	r2, #0
   1c61a:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1c61c:	4b55      	ldr	r3, [pc, #340]	; (1c774 <sd_mmc_spi_card_init+0x174>)
   1c61e:	681b      	ldr	r3, [r3, #0]
   1c620:	2200      	movs	r2, #0
   1c622:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1c624:	4b54      	ldr	r3, [pc, #336]	; (1c778 <sd_mmc_spi_card_init+0x178>)
   1c626:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1c628:	2388      	movs	r3, #136	; 0x88
   1c62a:	015b      	lsls	r3, r3, #5
   1c62c:	2100      	movs	r1, #0
   1c62e:	0018      	movs	r0, r3
   1c630:	4b52      	ldr	r3, [pc, #328]	; (1c77c <sd_mmc_spi_card_init+0x17c>)
   1c632:	4798      	blx	r3
   1c634:	0003      	movs	r3, r0
   1c636:	001a      	movs	r2, r3
   1c638:	2301      	movs	r3, #1
   1c63a:	4053      	eors	r3, r2
   1c63c:	b2db      	uxtb	r3, r3
   1c63e:	2b00      	cmp	r3, #0
   1c640:	d001      	beq.n	1c646 <sd_mmc_spi_card_init+0x46>
		return false;
   1c642:	2300      	movs	r3, #0
   1c644:	e092      	b.n	1c76c <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1c646:	1dfb      	adds	r3, r7, #7
   1c648:	0018      	movs	r0, r3
   1c64a:	4b4d      	ldr	r3, [pc, #308]	; (1c780 <sd_mmc_spi_card_init+0x180>)
   1c64c:	4798      	blx	r3
   1c64e:	0003      	movs	r3, r0
   1c650:	001a      	movs	r2, r3
   1c652:	2301      	movs	r3, #1
   1c654:	4053      	eors	r3, r2
   1c656:	b2db      	uxtb	r3, r3
   1c658:	2b00      	cmp	r3, #0
   1c65a:	d001      	beq.n	1c660 <sd_mmc_spi_card_init+0x60>
		return false;
   1c65c:	2300      	movs	r3, #0
   1c65e:	e085      	b.n	1c76c <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1c660:	4b48      	ldr	r3, [pc, #288]	; (1c784 <sd_mmc_spi_card_init+0x184>)
   1c662:	4798      	blx	r3
   1c664:	0003      	movs	r3, r0
   1c666:	001a      	movs	r2, r3
   1c668:	2301      	movs	r3, #1
   1c66a:	4053      	eors	r3, r2
   1c66c:	b2db      	uxtb	r3, r3
   1c66e:	2b00      	cmp	r3, #0
   1c670:	d001      	beq.n	1c676 <sd_mmc_spi_card_init+0x76>
		return false;
   1c672:	2300      	movs	r3, #0
   1c674:	e07a      	b.n	1c76c <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1c676:	4b3f      	ldr	r3, [pc, #252]	; (1c774 <sd_mmc_spi_card_init+0x174>)
   1c678:	681b      	ldr	r3, [r3, #0]
   1c67a:	7adb      	ldrb	r3, [r3, #11]
   1c67c:	001a      	movs	r2, r3
   1c67e:	2301      	movs	r3, #1
   1c680:	4013      	ands	r3, r2
   1c682:	d021      	beq.n	1c6c8 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1c684:	1dfb      	adds	r3, r7, #7
   1c686:	781b      	ldrb	r3, [r3, #0]
   1c688:	0018      	movs	r0, r3
   1c68a:	4b3f      	ldr	r3, [pc, #252]	; (1c788 <sd_mmc_spi_card_init+0x188>)
   1c68c:	4798      	blx	r3
   1c68e:	0003      	movs	r3, r0
   1c690:	001a      	movs	r2, r3
   1c692:	2301      	movs	r3, #1
   1c694:	4053      	eors	r3, r2
   1c696:	b2db      	uxtb	r3, r3
   1c698:	2b00      	cmp	r3, #0
   1c69a:	d007      	beq.n	1c6ac <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1c69c:	4b35      	ldr	r3, [pc, #212]	; (1c774 <sd_mmc_spi_card_init+0x174>)
   1c69e:	681b      	ldr	r3, [r3, #0]
   1c6a0:	2202      	movs	r2, #2
   1c6a2:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1c6a4:	4b39      	ldr	r3, [pc, #228]	; (1c78c <sd_mmc_spi_card_init+0x18c>)
   1c6a6:	4798      	blx	r3
   1c6a8:	0003      	movs	r3, r0
   1c6aa:	e05f      	b.n	1c76c <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1c6ac:	4b38      	ldr	r3, [pc, #224]	; (1c790 <sd_mmc_spi_card_init+0x190>)
   1c6ae:	2100      	movs	r1, #0
   1c6b0:	0018      	movs	r0, r3
   1c6b2:	4b32      	ldr	r3, [pc, #200]	; (1c77c <sd_mmc_spi_card_init+0x17c>)
   1c6b4:	4798      	blx	r3
   1c6b6:	0003      	movs	r3, r0
   1c6b8:	001a      	movs	r2, r3
   1c6ba:	2301      	movs	r3, #1
   1c6bc:	4053      	eors	r3, r2
   1c6be:	b2db      	uxtb	r3, r3
   1c6c0:	2b00      	cmp	r3, #0
   1c6c2:	d001      	beq.n	1c6c8 <sd_mmc_spi_card_init+0xc8>
			return false;
   1c6c4:	2300      	movs	r3, #0
   1c6c6:	e051      	b.n	1c76c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1c6c8:	4b2a      	ldr	r3, [pc, #168]	; (1c774 <sd_mmc_spi_card_init+0x174>)
   1c6ca:	681b      	ldr	r3, [r3, #0]
   1c6cc:	7adb      	ldrb	r3, [r3, #11]
   1c6ce:	001a      	movs	r2, r3
   1c6d0:	2301      	movs	r3, #1
   1c6d2:	4013      	ands	r3, r2
   1c6d4:	d017      	beq.n	1c706 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1c6d6:	4b2f      	ldr	r3, [pc, #188]	; (1c794 <sd_mmc_spi_card_init+0x194>)
   1c6d8:	4798      	blx	r3
   1c6da:	0003      	movs	r3, r0
   1c6dc:	001a      	movs	r2, r3
   1c6de:	2301      	movs	r3, #1
   1c6e0:	4053      	eors	r3, r2
   1c6e2:	b2db      	uxtb	r3, r3
   1c6e4:	2b00      	cmp	r3, #0
   1c6e6:	d001      	beq.n	1c6ec <sd_mmc_spi_card_init+0xec>
			return false;
   1c6e8:	2300      	movs	r3, #0
   1c6ea:	e03f      	b.n	1c76c <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1c6ec:	4b2a      	ldr	r3, [pc, #168]	; (1c798 <sd_mmc_spi_card_init+0x198>)
   1c6ee:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1c6f0:	4b2a      	ldr	r3, [pc, #168]	; (1c79c <sd_mmc_spi_card_init+0x19c>)
   1c6f2:	4798      	blx	r3
   1c6f4:	0003      	movs	r3, r0
   1c6f6:	001a      	movs	r2, r3
   1c6f8:	2301      	movs	r3, #1
   1c6fa:	4053      	eors	r3, r2
   1c6fc:	b2db      	uxtb	r3, r3
   1c6fe:	2b00      	cmp	r3, #0
   1c700:	d001      	beq.n	1c706 <sd_mmc_spi_card_init+0x106>
			return false;
   1c702:	2300      	movs	r3, #0
   1c704:	e032      	b.n	1c76c <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1c706:	4b1b      	ldr	r3, [pc, #108]	; (1c774 <sd_mmc_spi_card_init+0x174>)
   1c708:	681b      	ldr	r3, [r3, #0]
   1c70a:	7adb      	ldrb	r3, [r3, #11]
   1c70c:	001a      	movs	r2, r3
   1c70e:	2301      	movs	r3, #1
   1c710:	4013      	ands	r3, r2
   1c712:	d016      	beq.n	1c742 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1c714:	4b17      	ldr	r3, [pc, #92]	; (1c774 <sd_mmc_spi_card_init+0x174>)
   1c716:	681b      	ldr	r3, [r3, #0]
   1c718:	7adb      	ldrb	r3, [r3, #11]
   1c71a:	001a      	movs	r2, r3
   1c71c:	2308      	movs	r3, #8
   1c71e:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1c720:	d10f      	bne.n	1c742 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1c722:	2380      	movs	r3, #128	; 0x80
   1c724:	009b      	lsls	r3, r3, #2
   1c726:	4a1e      	ldr	r2, [pc, #120]	; (1c7a0 <sd_mmc_spi_card_init+0x1a0>)
   1c728:	0019      	movs	r1, r3
   1c72a:	0010      	movs	r0, r2
   1c72c:	4b13      	ldr	r3, [pc, #76]	; (1c77c <sd_mmc_spi_card_init+0x17c>)
   1c72e:	4798      	blx	r3
   1c730:	0003      	movs	r3, r0
   1c732:	001a      	movs	r2, r3
   1c734:	2301      	movs	r3, #1
   1c736:	4053      	eors	r3, r2
   1c738:	b2db      	uxtb	r3, r3
   1c73a:	2b00      	cmp	r3, #0
   1c73c:	d001      	beq.n	1c742 <sd_mmc_spi_card_init+0x142>
			return false;
   1c73e:	2300      	movs	r3, #0
   1c740:	e014      	b.n	1c76c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1c742:	4b0c      	ldr	r3, [pc, #48]	; (1c774 <sd_mmc_spi_card_init+0x174>)
   1c744:	681b      	ldr	r3, [r3, #0]
   1c746:	7adb      	ldrb	r3, [r3, #11]
   1c748:	001a      	movs	r2, r3
   1c74a:	2301      	movs	r3, #1
   1c74c:	4013      	ands	r3, r2
   1c74e:	d00a      	beq.n	1c766 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1c750:	4b14      	ldr	r3, [pc, #80]	; (1c7a4 <sd_mmc_spi_card_init+0x1a4>)
   1c752:	4798      	blx	r3
   1c754:	0003      	movs	r3, r0
   1c756:	001a      	movs	r2, r3
   1c758:	2301      	movs	r3, #1
   1c75a:	4053      	eors	r3, r2
   1c75c:	b2db      	uxtb	r3, r3
   1c75e:	2b00      	cmp	r3, #0
   1c760:	d001      	beq.n	1c766 <sd_mmc_spi_card_init+0x166>
			return false;
   1c762:	2300      	movs	r3, #0
   1c764:	e002      	b.n	1c76c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1c766:	4b10      	ldr	r3, [pc, #64]	; (1c7a8 <sd_mmc_spi_card_init+0x1a8>)
   1c768:	4798      	blx	r3
	return true;
   1c76a:	2301      	movs	r3, #1
}
   1c76c:	0018      	movs	r0, r3
   1c76e:	46bd      	mov	sp, r7
   1c770:	b002      	add	sp, #8
   1c772:	bd80      	pop	{r7, pc}
   1c774:	20003c9c 	.word	0x20003c9c
   1c778:	0001d7e9 	.word	0x0001d7e9
   1c77c:	0001d835 	.word	0x0001d835
   1c780:	0001bf55 	.word	0x0001bf55
   1c784:	0001bf49 	.word	0x0001bf49
   1c788:	0001be65 	.word	0x0001be65
   1c78c:	0001c7ad 	.word	0x0001c7ad
   1c790:	0000113b 	.word	0x0000113b
   1c794:	0001c0f1 	.word	0x0001c0f1
   1c798:	0001c291 	.word	0x0001c291
   1c79c:	0001c3d9 	.word	0x0001c3d9
   1c7a0:	00001110 	.word	0x00001110
   1c7a4:	0001c37d 	.word	0x0001c37d
   1c7a8:	0001c5a5 	.word	0x0001c5a5

0001c7ac <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1c7ac:	b580      	push	{r7, lr}
   1c7ae:	b082      	sub	sp, #8
   1c7b0:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1c7b2:	2388      	movs	r3, #136	; 0x88
   1c7b4:	015b      	lsls	r3, r3, #5
   1c7b6:	2100      	movs	r1, #0
   1c7b8:	0018      	movs	r0, r3
   1c7ba:	4b32      	ldr	r3, [pc, #200]	; (1c884 <sd_mmc_spi_install_mmc+0xd8>)
   1c7bc:	4798      	blx	r3
   1c7be:	0003      	movs	r3, r0
   1c7c0:	001a      	movs	r2, r3
   1c7c2:	2301      	movs	r3, #1
   1c7c4:	4053      	eors	r3, r2
   1c7c6:	b2db      	uxtb	r3, r3
   1c7c8:	2b00      	cmp	r3, #0
   1c7ca:	d001      	beq.n	1c7d0 <sd_mmc_spi_install_mmc+0x24>
		return false;
   1c7cc:	2300      	movs	r3, #0
   1c7ce:	e055      	b.n	1c87c <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1c7d0:	4b2d      	ldr	r3, [pc, #180]	; (1c888 <sd_mmc_spi_install_mmc+0xdc>)
   1c7d2:	4798      	blx	r3
   1c7d4:	0003      	movs	r3, r0
   1c7d6:	001a      	movs	r2, r3
   1c7d8:	2301      	movs	r3, #1
   1c7da:	4053      	eors	r3, r2
   1c7dc:	b2db      	uxtb	r3, r3
   1c7de:	2b00      	cmp	r3, #0
   1c7e0:	d001      	beq.n	1c7e6 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1c7e2:	2300      	movs	r3, #0
   1c7e4:	e04a      	b.n	1c87c <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1c7e6:	4b29      	ldr	r3, [pc, #164]	; (1c88c <sd_mmc_spi_install_mmc+0xe0>)
   1c7e8:	2100      	movs	r1, #0
   1c7ea:	0018      	movs	r0, r3
   1c7ec:	4b25      	ldr	r3, [pc, #148]	; (1c884 <sd_mmc_spi_install_mmc+0xd8>)
   1c7ee:	4798      	blx	r3
   1c7f0:	0003      	movs	r3, r0
   1c7f2:	001a      	movs	r2, r3
   1c7f4:	2301      	movs	r3, #1
   1c7f6:	4053      	eors	r3, r2
   1c7f8:	b2db      	uxtb	r3, r3
   1c7fa:	2b00      	cmp	r3, #0
   1c7fc:	d001      	beq.n	1c802 <sd_mmc_spi_install_mmc+0x56>
		return false;
   1c7fe:	2300      	movs	r3, #0
   1c800:	e03c      	b.n	1c87c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1c802:	4b23      	ldr	r3, [pc, #140]	; (1c890 <sd_mmc_spi_install_mmc+0xe4>)
   1c804:	4798      	blx	r3
   1c806:	0003      	movs	r3, r0
   1c808:	001a      	movs	r2, r3
   1c80a:	2301      	movs	r3, #1
   1c80c:	4053      	eors	r3, r2
   1c80e:	b2db      	uxtb	r3, r3
   1c810:	2b00      	cmp	r3, #0
   1c812:	d001      	beq.n	1c818 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1c814:	2300      	movs	r3, #0
   1c816:	e031      	b.n	1c87c <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1c818:	4b1e      	ldr	r3, [pc, #120]	; (1c894 <sd_mmc_spi_install_mmc+0xe8>)
   1c81a:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1c81c:	4b1e      	ldr	r3, [pc, #120]	; (1c898 <sd_mmc_spi_install_mmc+0xec>)
   1c81e:	681b      	ldr	r3, [r3, #0]
   1c820:	7b1b      	ldrb	r3, [r3, #12]
   1c822:	2b3f      	cmp	r3, #63	; 0x3f
   1c824:	d90c      	bls.n	1c840 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1c826:	1dfb      	adds	r3, r7, #7
   1c828:	0018      	movs	r0, r3
   1c82a:	4b1c      	ldr	r3, [pc, #112]	; (1c89c <sd_mmc_spi_install_mmc+0xf0>)
   1c82c:	4798      	blx	r3
   1c82e:	0003      	movs	r3, r0
   1c830:	001a      	movs	r2, r3
   1c832:	2301      	movs	r3, #1
   1c834:	4053      	eors	r3, r2
   1c836:	b2db      	uxtb	r3, r3
   1c838:	2b00      	cmp	r3, #0
   1c83a:	d001      	beq.n	1c840 <sd_mmc_spi_install_mmc+0x94>
			return false;
   1c83c:	2300      	movs	r3, #0
   1c83e:	e01d      	b.n	1c87c <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1c840:	2380      	movs	r3, #128	; 0x80
   1c842:	009b      	lsls	r3, r3, #2
   1c844:	4a16      	ldr	r2, [pc, #88]	; (1c8a0 <sd_mmc_spi_install_mmc+0xf4>)
   1c846:	0019      	movs	r1, r3
   1c848:	0010      	movs	r0, r2
   1c84a:	4b0e      	ldr	r3, [pc, #56]	; (1c884 <sd_mmc_spi_install_mmc+0xd8>)
   1c84c:	4798      	blx	r3
   1c84e:	0003      	movs	r3, r0
   1c850:	001a      	movs	r2, r3
   1c852:	2301      	movs	r3, #1
   1c854:	4053      	eors	r3, r2
   1c856:	b2db      	uxtb	r3, r3
   1c858:	2b00      	cmp	r3, #0
   1c85a:	d001      	beq.n	1c860 <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1c85c:	2300      	movs	r3, #0
   1c85e:	e00d      	b.n	1c87c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1c860:	4b10      	ldr	r3, [pc, #64]	; (1c8a4 <sd_mmc_spi_install_mmc+0xf8>)
   1c862:	4798      	blx	r3
   1c864:	0003      	movs	r3, r0
   1c866:	001a      	movs	r2, r3
   1c868:	2301      	movs	r3, #1
   1c86a:	4053      	eors	r3, r2
   1c86c:	b2db      	uxtb	r3, r3
   1c86e:	2b00      	cmp	r3, #0
   1c870:	d001      	beq.n	1c876 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1c872:	2300      	movs	r3, #0
   1c874:	e002      	b.n	1c87c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1c876:	4b0c      	ldr	r3, [pc, #48]	; (1c8a8 <sd_mmc_spi_install_mmc+0xfc>)
   1c878:	4798      	blx	r3
	return true;
   1c87a:	2301      	movs	r3, #1
}
   1c87c:	0018      	movs	r0, r3
   1c87e:	46bd      	mov	sp, r7
   1c880:	b002      	add	sp, #8
   1c882:	bd80      	pop	{r7, pc}
   1c884:	0001d835 	.word	0x0001d835
   1c888:	0001bdb9 	.word	0x0001bdb9
   1c88c:	0000113b 	.word	0x0000113b
   1c890:	0001c0f1 	.word	0x0001c0f1
   1c894:	0001c161 	.word	0x0001c161
   1c898:	20003c9c 	.word	0x20003c9c
   1c89c:	0001bfc5 	.word	0x0001bfc5
   1c8a0:	00001110 	.word	0x00001110
   1c8a4:	0001c37d 	.word	0x0001c37d
   1c8a8:	0001c5a5 	.word	0x0001c5a5

0001c8ac <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1c8ac:	b580      	push	{r7, lr}
   1c8ae:	b082      	sub	sp, #8
   1c8b0:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1c8b2:	1dfb      	adds	r3, r7, #7
   1c8b4:	2200      	movs	r2, #0
   1c8b6:	701a      	strb	r2, [r3, #0]
   1c8b8:	e00c      	b.n	1c8d4 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1c8ba:	1dfb      	adds	r3, r7, #7
   1c8bc:	781b      	ldrb	r3, [r3, #0]
   1c8be:	4a0c      	ldr	r2, [pc, #48]	; (1c8f0 <sd_mmc_init+0x44>)
   1c8c0:	015b      	lsls	r3, r3, #5
   1c8c2:	18d3      	adds	r3, r2, r3
   1c8c4:	330a      	adds	r3, #10
   1c8c6:	2204      	movs	r2, #4
   1c8c8:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1c8ca:	1dfb      	adds	r3, r7, #7
   1c8cc:	781a      	ldrb	r2, [r3, #0]
   1c8ce:	1dfb      	adds	r3, r7, #7
   1c8d0:	3201      	adds	r2, #1
   1c8d2:	701a      	strb	r2, [r3, #0]
   1c8d4:	1dfb      	adds	r3, r7, #7
   1c8d6:	781b      	ldrb	r3, [r3, #0]
   1c8d8:	2b00      	cmp	r3, #0
   1c8da:	d0ee      	beq.n	1c8ba <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1c8dc:	4b05      	ldr	r3, [pc, #20]	; (1c8f4 <sd_mmc_init+0x48>)
   1c8de:	22ff      	movs	r2, #255	; 0xff
   1c8e0:	701a      	strb	r2, [r3, #0]
	driver_init();
   1c8e2:	4b05      	ldr	r3, [pc, #20]	; (1c8f8 <sd_mmc_init+0x4c>)
   1c8e4:	4798      	blx	r3
}
   1c8e6:	46c0      	nop			; (mov r8, r8)
   1c8e8:	46bd      	mov	sp, r7
   1c8ea:	b002      	add	sp, #8
   1c8ec:	bd80      	pop	{r7, pc}
   1c8ee:	46c0      	nop			; (mov r8, r8)
   1c8f0:	20003c78 	.word	0x20003c78
   1c8f4:	20003c98 	.word	0x20003c98
   1c8f8:	0001d655 	.word	0x0001d655

0001c8fc <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1c8fc:	b590      	push	{r4, r7, lr}
   1c8fe:	b085      	sub	sp, #20
   1c900:	af00      	add	r7, sp, #0
   1c902:	0002      	movs	r2, r0
   1c904:	1dfb      	adds	r3, r7, #7
   1c906:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1c908:	230f      	movs	r3, #15
   1c90a:	18fc      	adds	r4, r7, r3
   1c90c:	1dfb      	adds	r3, r7, #7
   1c90e:	781b      	ldrb	r3, [r3, #0]
   1c910:	0018      	movs	r0, r3
   1c912:	4b13      	ldr	r3, [pc, #76]	; (1c960 <sd_mmc_check+0x64>)
   1c914:	4798      	blx	r3
   1c916:	0003      	movs	r3, r0
   1c918:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1c91a:	230f      	movs	r3, #15
   1c91c:	18fb      	adds	r3, r7, r3
   1c91e:	781b      	ldrb	r3, [r3, #0]
   1c920:	2b01      	cmp	r3, #1
   1c922:	d005      	beq.n	1c930 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1c924:	4b0f      	ldr	r3, [pc, #60]	; (1c964 <sd_mmc_check+0x68>)
   1c926:	4798      	blx	r3
		return sd_mmc_err;
   1c928:	230f      	movs	r3, #15
   1c92a:	18fb      	adds	r3, r7, r3
   1c92c:	781b      	ldrb	r3, [r3, #0]
   1c92e:	e012      	b.n	1c956 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1c930:	4b0d      	ldr	r3, [pc, #52]	; (1c968 <sd_mmc_check+0x6c>)
   1c932:	4798      	blx	r3
   1c934:	1e03      	subs	r3, r0, #0
   1c936:	d007      	beq.n	1c948 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1c938:	4b0c      	ldr	r3, [pc, #48]	; (1c96c <sd_mmc_check+0x70>)
   1c93a:	681b      	ldr	r3, [r3, #0]
   1c93c:	2200      	movs	r2, #0
   1c93e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1c940:	4b08      	ldr	r3, [pc, #32]	; (1c964 <sd_mmc_check+0x68>)
   1c942:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1c944:	2301      	movs	r3, #1
   1c946:	e006      	b.n	1c956 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1c948:	4b08      	ldr	r3, [pc, #32]	; (1c96c <sd_mmc_check+0x70>)
   1c94a:	681b      	ldr	r3, [r3, #0]
   1c94c:	2203      	movs	r2, #3
   1c94e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1c950:	4b04      	ldr	r3, [pc, #16]	; (1c964 <sd_mmc_check+0x68>)
   1c952:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1c954:	2303      	movs	r3, #3
}
   1c956:	0018      	movs	r0, r3
   1c958:	46bd      	mov	sp, r7
   1c95a:	b005      	add	sp, #20
   1c95c:	bd90      	pop	{r4, r7, pc}
   1c95e:	46c0      	nop			; (mov r8, r8)
   1c960:	0001c4e1 	.word	0x0001c4e1
   1c964:	0001c5dd 	.word	0x0001c5dd
   1c968:	0001c601 	.word	0x0001c601
   1c96c:	20003c9c 	.word	0x20003c9c

0001c970 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1c970:	b580      	push	{r7, lr}
   1c972:	b082      	sub	sp, #8
   1c974:	af00      	add	r7, sp, #0
   1c976:	0002      	movs	r2, r0
   1c978:	1dfb      	adds	r3, r7, #7
   1c97a:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1c97c:	1dfb      	adds	r3, r7, #7
   1c97e:	781b      	ldrb	r3, [r3, #0]
   1c980:	0018      	movs	r0, r3
   1c982:	4b07      	ldr	r3, [pc, #28]	; (1c9a0 <sd_mmc_get_type+0x30>)
   1c984:	4798      	blx	r3
   1c986:	1e03      	subs	r3, r0, #0
   1c988:	d001      	beq.n	1c98e <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1c98a:	2300      	movs	r3, #0
   1c98c:	e004      	b.n	1c998 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1c98e:	4b05      	ldr	r3, [pc, #20]	; (1c9a4 <sd_mmc_get_type+0x34>)
   1c990:	4798      	blx	r3
	return sd_mmc_card->type;
   1c992:	4b05      	ldr	r3, [pc, #20]	; (1c9a8 <sd_mmc_get_type+0x38>)
   1c994:	681b      	ldr	r3, [r3, #0]
   1c996:	7adb      	ldrb	r3, [r3, #11]
}
   1c998:	0018      	movs	r0, r3
   1c99a:	46bd      	mov	sp, r7
   1c99c:	b002      	add	sp, #8
   1c99e:	bd80      	pop	{r7, pc}
   1c9a0:	0001c4e1 	.word	0x0001c4e1
   1c9a4:	0001c5dd 	.word	0x0001c5dd
   1c9a8:	20003c9c 	.word	0x20003c9c

0001c9ac <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1c9ac:	b580      	push	{r7, lr}
   1c9ae:	b082      	sub	sp, #8
   1c9b0:	af00      	add	r7, sp, #0
   1c9b2:	0002      	movs	r2, r0
   1c9b4:	1dfb      	adds	r3, r7, #7
   1c9b6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1c9b8:	1dfb      	adds	r3, r7, #7
   1c9ba:	781b      	ldrb	r3, [r3, #0]
   1c9bc:	0018      	movs	r0, r3
   1c9be:	4b07      	ldr	r3, [pc, #28]	; (1c9dc <sd_mmc_get_capacity+0x30>)
   1c9c0:	4798      	blx	r3
   1c9c2:	1e03      	subs	r3, r0, #0
   1c9c4:	d001      	beq.n	1c9ca <sd_mmc_get_capacity+0x1e>
		return 0;
   1c9c6:	2300      	movs	r3, #0
   1c9c8:	e004      	b.n	1c9d4 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1c9ca:	4b05      	ldr	r3, [pc, #20]	; (1c9e0 <sd_mmc_get_capacity+0x34>)
   1c9cc:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1c9ce:	4b05      	ldr	r3, [pc, #20]	; (1c9e4 <sd_mmc_get_capacity+0x38>)
   1c9d0:	681b      	ldr	r3, [r3, #0]
   1c9d2:	685b      	ldr	r3, [r3, #4]
}
   1c9d4:	0018      	movs	r0, r3
   1c9d6:	46bd      	mov	sp, r7
   1c9d8:	b002      	add	sp, #8
   1c9da:	bd80      	pop	{r7, pc}
   1c9dc:	0001c4e1 	.word	0x0001c4e1
   1c9e0:	0001c5dd 	.word	0x0001c5dd
   1c9e4:	20003c9c 	.word	0x20003c9c

0001c9e8 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1c9e8:	b580      	push	{r7, lr}
   1c9ea:	b082      	sub	sp, #8
   1c9ec:	af00      	add	r7, sp, #0
   1c9ee:	0002      	movs	r2, r0
   1c9f0:	1dfb      	adds	r3, r7, #7
   1c9f2:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1c9f4:	2300      	movs	r3, #0
}
   1c9f6:	0018      	movs	r0, r3
   1c9f8:	46bd      	mov	sp, r7
   1c9fa:	b002      	add	sp, #8
   1c9fc:	bd80      	pop	{r7, pc}
	...

0001ca00 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1ca00:	b590      	push	{r4, r7, lr}
   1ca02:	b089      	sub	sp, #36	; 0x24
   1ca04:	af02      	add	r7, sp, #8
   1ca06:	6039      	str	r1, [r7, #0]
   1ca08:	0011      	movs	r1, r2
   1ca0a:	1dfb      	adds	r3, r7, #7
   1ca0c:	1c02      	adds	r2, r0, #0
   1ca0e:	701a      	strb	r2, [r3, #0]
   1ca10:	1d3b      	adds	r3, r7, #4
   1ca12:	1c0a      	adds	r2, r1, #0
   1ca14:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ca16:	230f      	movs	r3, #15
   1ca18:	18fc      	adds	r4, r7, r3
   1ca1a:	1dfb      	adds	r3, r7, #7
   1ca1c:	781b      	ldrb	r3, [r3, #0]
   1ca1e:	0018      	movs	r0, r3
   1ca20:	4b29      	ldr	r3, [pc, #164]	; (1cac8 <sd_mmc_init_read_blocks+0xc8>)
   1ca22:	4798      	blx	r3
   1ca24:	0003      	movs	r3, r0
   1ca26:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1ca28:	230f      	movs	r3, #15
   1ca2a:	18fb      	adds	r3, r7, r3
   1ca2c:	781b      	ldrb	r3, [r3, #0]
   1ca2e:	2b00      	cmp	r3, #0
   1ca30:	d003      	beq.n	1ca3a <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1ca32:	230f      	movs	r3, #15
   1ca34:	18fb      	adds	r3, r7, r3
   1ca36:	781b      	ldrb	r3, [r3, #0]
   1ca38:	e041      	b.n	1cabe <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1ca3a:	4b24      	ldr	r3, [pc, #144]	; (1cacc <sd_mmc_init_read_blocks+0xcc>)
   1ca3c:	4798      	blx	r3
   1ca3e:	0003      	movs	r3, r0
   1ca40:	001a      	movs	r2, r3
   1ca42:	2301      	movs	r3, #1
   1ca44:	4053      	eors	r3, r2
   1ca46:	b2db      	uxtb	r3, r3
   1ca48:	2b00      	cmp	r3, #0
   1ca4a:	d003      	beq.n	1ca54 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1ca4c:	4b20      	ldr	r3, [pc, #128]	; (1cad0 <sd_mmc_init_read_blocks+0xd0>)
   1ca4e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1ca50:	2305      	movs	r3, #5
   1ca52:	e034      	b.n	1cabe <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1ca54:	1d3b      	adds	r3, r7, #4
   1ca56:	881b      	ldrh	r3, [r3, #0]
   1ca58:	2b01      	cmp	r3, #1
   1ca5a:	d902      	bls.n	1ca62 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1ca5c:	4b1d      	ldr	r3, [pc, #116]	; (1cad4 <sd_mmc_init_read_blocks+0xd4>)
   1ca5e:	617b      	str	r3, [r7, #20]
   1ca60:	e001      	b.n	1ca66 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1ca62:	4b1d      	ldr	r3, [pc, #116]	; (1cad8 <sd_mmc_init_read_blocks+0xd8>)
   1ca64:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1ca66:	4b1d      	ldr	r3, [pc, #116]	; (1cadc <sd_mmc_init_read_blocks+0xdc>)
   1ca68:	681b      	ldr	r3, [r3, #0]
   1ca6a:	7adb      	ldrb	r3, [r3, #11]
   1ca6c:	001a      	movs	r2, r3
   1ca6e:	2308      	movs	r3, #8
   1ca70:	4013      	ands	r3, r2
   1ca72:	d002      	beq.n	1ca7a <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1ca74:	683b      	ldr	r3, [r7, #0]
   1ca76:	613b      	str	r3, [r7, #16]
   1ca78:	e002      	b.n	1ca80 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1ca7a:	683b      	ldr	r3, [r7, #0]
   1ca7c:	025b      	lsls	r3, r3, #9
   1ca7e:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1ca80:	1d3b      	adds	r3, r7, #4
   1ca82:	881c      	ldrh	r4, [r3, #0]
   1ca84:	2380      	movs	r3, #128	; 0x80
   1ca86:	009a      	lsls	r2, r3, #2
   1ca88:	6939      	ldr	r1, [r7, #16]
   1ca8a:	6978      	ldr	r0, [r7, #20]
   1ca8c:	2301      	movs	r3, #1
   1ca8e:	9300      	str	r3, [sp, #0]
   1ca90:	0023      	movs	r3, r4
   1ca92:	4c13      	ldr	r4, [pc, #76]	; (1cae0 <sd_mmc_init_read_blocks+0xe0>)
   1ca94:	47a0      	blx	r4
   1ca96:	0003      	movs	r3, r0
   1ca98:	001a      	movs	r2, r3
   1ca9a:	2301      	movs	r3, #1
   1ca9c:	4053      	eors	r3, r2
   1ca9e:	b2db      	uxtb	r3, r3
   1caa0:	2b00      	cmp	r3, #0
   1caa2:	d003      	beq.n	1caac <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1caa4:	4b0a      	ldr	r3, [pc, #40]	; (1cad0 <sd_mmc_init_read_blocks+0xd0>)
   1caa6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1caa8:	2305      	movs	r3, #5
   1caaa:	e008      	b.n	1cabe <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1caac:	4b0d      	ldr	r3, [pc, #52]	; (1cae4 <sd_mmc_init_read_blocks+0xe4>)
   1caae:	1d3a      	adds	r2, r7, #4
   1cab0:	8812      	ldrh	r2, [r2, #0]
   1cab2:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1cab4:	4b0c      	ldr	r3, [pc, #48]	; (1cae8 <sd_mmc_init_read_blocks+0xe8>)
   1cab6:	1d3a      	adds	r2, r7, #4
   1cab8:	8812      	ldrh	r2, [r2, #0]
   1caba:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1cabc:	2300      	movs	r3, #0
}
   1cabe:	0018      	movs	r0, r3
   1cac0:	46bd      	mov	sp, r7
   1cac2:	b007      	add	sp, #28
   1cac4:	bd90      	pop	{r4, r7, pc}
   1cac6:	46c0      	nop			; (mov r8, r8)
   1cac8:	0001c4e1 	.word	0x0001c4e1
   1cacc:	0001c37d 	.word	0x0001c37d
   1cad0:	0001c5dd 	.word	0x0001c5dd
   1cad4:	00101112 	.word	0x00101112
   1cad8:	00081111 	.word	0x00081111
   1cadc:	20003c9c 	.word	0x20003c9c
   1cae0:	0001d85d 	.word	0x0001d85d
   1cae4:	20003ca2 	.word	0x20003ca2
   1cae8:	20003ca0 	.word	0x20003ca0

0001caec <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1caec:	b580      	push	{r7, lr}
   1caee:	b082      	sub	sp, #8
   1caf0:	af00      	add	r7, sp, #0
   1caf2:	6078      	str	r0, [r7, #4]
   1caf4:	000a      	movs	r2, r1
   1caf6:	1cbb      	adds	r3, r7, #2
   1caf8:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1cafa:	1cbb      	adds	r3, r7, #2
   1cafc:	881a      	ldrh	r2, [r3, #0]
   1cafe:	687b      	ldr	r3, [r7, #4]
   1cb00:	0011      	movs	r1, r2
   1cb02:	0018      	movs	r0, r3
   1cb04:	4b0d      	ldr	r3, [pc, #52]	; (1cb3c <sd_mmc_start_read_blocks+0x50>)
   1cb06:	4798      	blx	r3
   1cb08:	0003      	movs	r3, r0
   1cb0a:	001a      	movs	r2, r3
   1cb0c:	2301      	movs	r3, #1
   1cb0e:	4053      	eors	r3, r2
   1cb10:	b2db      	uxtb	r3, r3
   1cb12:	2b00      	cmp	r3, #0
   1cb14:	d004      	beq.n	1cb20 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1cb16:	4b0a      	ldr	r3, [pc, #40]	; (1cb40 <sd_mmc_start_read_blocks+0x54>)
   1cb18:	2200      	movs	r2, #0
   1cb1a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1cb1c:	2305      	movs	r3, #5
   1cb1e:	e008      	b.n	1cb32 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1cb20:	4b07      	ldr	r3, [pc, #28]	; (1cb40 <sd_mmc_start_read_blocks+0x54>)
   1cb22:	881a      	ldrh	r2, [r3, #0]
   1cb24:	1cbb      	adds	r3, r7, #2
   1cb26:	881b      	ldrh	r3, [r3, #0]
   1cb28:	1ad3      	subs	r3, r2, r3
   1cb2a:	b29a      	uxth	r2, r3
   1cb2c:	4b04      	ldr	r3, [pc, #16]	; (1cb40 <sd_mmc_start_read_blocks+0x54>)
   1cb2e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1cb30:	2300      	movs	r3, #0
}
   1cb32:	0018      	movs	r0, r3
   1cb34:	46bd      	mov	sp, r7
   1cb36:	b002      	add	sp, #8
   1cb38:	bd80      	pop	{r7, pc}
   1cb3a:	46c0      	nop			; (mov r8, r8)
   1cb3c:	0001db2d 	.word	0x0001db2d
   1cb40:	20003ca2 	.word	0x20003ca2

0001cb44 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1cb44:	b580      	push	{r7, lr}
   1cb46:	b082      	sub	sp, #8
   1cb48:	af00      	add	r7, sp, #0
   1cb4a:	0002      	movs	r2, r0
   1cb4c:	1dfb      	adds	r3, r7, #7
   1cb4e:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1cb50:	4b1c      	ldr	r3, [pc, #112]	; (1cbc4 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1cb52:	4798      	blx	r3
   1cb54:	0003      	movs	r3, r0
   1cb56:	001a      	movs	r2, r3
   1cb58:	2301      	movs	r3, #1
   1cb5a:	4053      	eors	r3, r2
   1cb5c:	b2db      	uxtb	r3, r3
   1cb5e:	2b00      	cmp	r3, #0
   1cb60:	d001      	beq.n	1cb66 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1cb62:	2305      	movs	r3, #5
   1cb64:	e029      	b.n	1cbba <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1cb66:	1dfb      	adds	r3, r7, #7
   1cb68:	781b      	ldrb	r3, [r3, #0]
   1cb6a:	2b00      	cmp	r3, #0
   1cb6c:	d003      	beq.n	1cb76 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1cb6e:	4b16      	ldr	r3, [pc, #88]	; (1cbc8 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1cb70:	2200      	movs	r2, #0
   1cb72:	801a      	strh	r2, [r3, #0]
   1cb74:	e005      	b.n	1cb82 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1cb76:	4b14      	ldr	r3, [pc, #80]	; (1cbc8 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1cb78:	881b      	ldrh	r3, [r3, #0]
   1cb7a:	2b00      	cmp	r3, #0
   1cb7c:	d001      	beq.n	1cb82 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1cb7e:	2300      	movs	r3, #0
   1cb80:	e01b      	b.n	1cbba <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1cb82:	4b12      	ldr	r3, [pc, #72]	; (1cbcc <sd_mmc_wait_end_of_read_blocks+0x88>)
   1cb84:	881b      	ldrh	r3, [r3, #0]
   1cb86:	2b01      	cmp	r3, #1
   1cb88:	d103      	bne.n	1cb92 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1cb8a:	4b11      	ldr	r3, [pc, #68]	; (1cbd0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1cb8c:	4798      	blx	r3
		return SD_MMC_OK;
   1cb8e:	2300      	movs	r3, #0
   1cb90:	e013      	b.n	1cbba <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1cb92:	4b10      	ldr	r3, [pc, #64]	; (1cbd4 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1cb94:	2100      	movs	r1, #0
   1cb96:	0018      	movs	r0, r3
   1cb98:	4b0f      	ldr	r3, [pc, #60]	; (1cbd8 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1cb9a:	4798      	blx	r3
   1cb9c:	0003      	movs	r3, r0
   1cb9e:	001a      	movs	r2, r3
   1cba0:	2301      	movs	r3, #1
   1cba2:	4053      	eors	r3, r2
   1cba4:	b2db      	uxtb	r3, r3
   1cba6:	2b00      	cmp	r3, #0
   1cba8:	d004      	beq.n	1cbb4 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1cbaa:	4b0a      	ldr	r3, [pc, #40]	; (1cbd4 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1cbac:	2100      	movs	r1, #0
   1cbae:	0018      	movs	r0, r3
   1cbb0:	4b09      	ldr	r3, [pc, #36]	; (1cbd8 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1cbb2:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1cbb4:	4b06      	ldr	r3, [pc, #24]	; (1cbd0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1cbb6:	4798      	blx	r3
	return SD_MMC_OK;
   1cbb8:	2300      	movs	r3, #0
}
   1cbba:	0018      	movs	r0, r3
   1cbbc:	46bd      	mov	sp, r7
   1cbbe:	b002      	add	sp, #8
   1cbc0:	bd80      	pop	{r7, pc}
   1cbc2:	46c0      	nop			; (mov r8, r8)
   1cbc4:	0001dbd1 	.word	0x0001dbd1
   1cbc8:	20003ca2 	.word	0x20003ca2
   1cbcc:	20003ca0 	.word	0x20003ca0
   1cbd0:	0001c5dd 	.word	0x0001c5dd
   1cbd4:	0000310c 	.word	0x0000310c
   1cbd8:	0001d835 	.word	0x0001d835

0001cbdc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1cbdc:	b590      	push	{r4, r7, lr}
   1cbde:	b089      	sub	sp, #36	; 0x24
   1cbe0:	af02      	add	r7, sp, #8
   1cbe2:	6039      	str	r1, [r7, #0]
   1cbe4:	0011      	movs	r1, r2
   1cbe6:	1dfb      	adds	r3, r7, #7
   1cbe8:	1c02      	adds	r2, r0, #0
   1cbea:	701a      	strb	r2, [r3, #0]
   1cbec:	1d3b      	adds	r3, r7, #4
   1cbee:	1c0a      	adds	r2, r1, #0
   1cbf0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1cbf2:	230f      	movs	r3, #15
   1cbf4:	18fc      	adds	r4, r7, r3
   1cbf6:	1dfb      	adds	r3, r7, #7
   1cbf8:	781b      	ldrb	r3, [r3, #0]
   1cbfa:	0018      	movs	r0, r3
   1cbfc:	4b28      	ldr	r3, [pc, #160]	; (1cca0 <sd_mmc_init_write_blocks+0xc4>)
   1cbfe:	4798      	blx	r3
   1cc00:	0003      	movs	r3, r0
   1cc02:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1cc04:	230f      	movs	r3, #15
   1cc06:	18fb      	adds	r3, r7, r3
   1cc08:	781b      	ldrb	r3, [r3, #0]
   1cc0a:	2b00      	cmp	r3, #0
   1cc0c:	d003      	beq.n	1cc16 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1cc0e:	230f      	movs	r3, #15
   1cc10:	18fb      	adds	r3, r7, r3
   1cc12:	781b      	ldrb	r3, [r3, #0]
   1cc14:	e03f      	b.n	1cc96 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1cc16:	1dfb      	adds	r3, r7, #7
   1cc18:	781b      	ldrb	r3, [r3, #0]
   1cc1a:	0018      	movs	r0, r3
   1cc1c:	4b21      	ldr	r3, [pc, #132]	; (1cca4 <sd_mmc_init_write_blocks+0xc8>)
   1cc1e:	4798      	blx	r3
   1cc20:	1e03      	subs	r3, r0, #0
   1cc22:	d003      	beq.n	1cc2c <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1cc24:	4b20      	ldr	r3, [pc, #128]	; (1cca8 <sd_mmc_init_write_blocks+0xcc>)
   1cc26:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1cc28:	2307      	movs	r3, #7
   1cc2a:	e034      	b.n	1cc96 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1cc2c:	1d3b      	adds	r3, r7, #4
   1cc2e:	881b      	ldrh	r3, [r3, #0]
   1cc30:	2b01      	cmp	r3, #1
   1cc32:	d902      	bls.n	1cc3a <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1cc34:	4b1d      	ldr	r3, [pc, #116]	; (1ccac <sd_mmc_init_write_blocks+0xd0>)
   1cc36:	617b      	str	r3, [r7, #20]
   1cc38:	e001      	b.n	1cc3e <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1cc3a:	4b1d      	ldr	r3, [pc, #116]	; (1ccb0 <sd_mmc_init_write_blocks+0xd4>)
   1cc3c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1cc3e:	4b1d      	ldr	r3, [pc, #116]	; (1ccb4 <sd_mmc_init_write_blocks+0xd8>)
   1cc40:	681b      	ldr	r3, [r3, #0]
   1cc42:	7adb      	ldrb	r3, [r3, #11]
   1cc44:	001a      	movs	r2, r3
   1cc46:	2308      	movs	r3, #8
   1cc48:	4013      	ands	r3, r2
   1cc4a:	d002      	beq.n	1cc52 <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1cc4c:	683b      	ldr	r3, [r7, #0]
   1cc4e:	613b      	str	r3, [r7, #16]
   1cc50:	e002      	b.n	1cc58 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1cc52:	683b      	ldr	r3, [r7, #0]
   1cc54:	025b      	lsls	r3, r3, #9
   1cc56:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1cc58:	1d3b      	adds	r3, r7, #4
   1cc5a:	881c      	ldrh	r4, [r3, #0]
   1cc5c:	2380      	movs	r3, #128	; 0x80
   1cc5e:	009a      	lsls	r2, r3, #2
   1cc60:	6939      	ldr	r1, [r7, #16]
   1cc62:	6978      	ldr	r0, [r7, #20]
   1cc64:	2301      	movs	r3, #1
   1cc66:	9300      	str	r3, [sp, #0]
   1cc68:	0023      	movs	r3, r4
   1cc6a:	4c13      	ldr	r4, [pc, #76]	; (1ccb8 <sd_mmc_init_write_blocks+0xdc>)
   1cc6c:	47a0      	blx	r4
   1cc6e:	0003      	movs	r3, r0
   1cc70:	001a      	movs	r2, r3
   1cc72:	2301      	movs	r3, #1
   1cc74:	4053      	eors	r3, r2
   1cc76:	b2db      	uxtb	r3, r3
   1cc78:	2b00      	cmp	r3, #0
   1cc7a:	d003      	beq.n	1cc84 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1cc7c:	4b0a      	ldr	r3, [pc, #40]	; (1cca8 <sd_mmc_init_write_blocks+0xcc>)
   1cc7e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1cc80:	2305      	movs	r3, #5
   1cc82:	e008      	b.n	1cc96 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1cc84:	4b0d      	ldr	r3, [pc, #52]	; (1ccbc <sd_mmc_init_write_blocks+0xe0>)
   1cc86:	1d3a      	adds	r2, r7, #4
   1cc88:	8812      	ldrh	r2, [r2, #0]
   1cc8a:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1cc8c:	4b0c      	ldr	r3, [pc, #48]	; (1ccc0 <sd_mmc_init_write_blocks+0xe4>)
   1cc8e:	1d3a      	adds	r2, r7, #4
   1cc90:	8812      	ldrh	r2, [r2, #0]
   1cc92:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1cc94:	2300      	movs	r3, #0
}
   1cc96:	0018      	movs	r0, r3
   1cc98:	46bd      	mov	sp, r7
   1cc9a:	b007      	add	sp, #28
   1cc9c:	bd90      	pop	{r4, r7, pc}
   1cc9e:	46c0      	nop			; (mov r8, r8)
   1cca0:	0001c4e1 	.word	0x0001c4e1
   1cca4:	0001c9e9 	.word	0x0001c9e9
   1cca8:	0001c5dd 	.word	0x0001c5dd
   1ccac:	00109119 	.word	0x00109119
   1ccb0:	00089118 	.word	0x00089118
   1ccb4:	20003c9c 	.word	0x20003c9c
   1ccb8:	0001d85d 	.word	0x0001d85d
   1ccbc:	20003ca2 	.word	0x20003ca2
   1ccc0:	20003ca0 	.word	0x20003ca0

0001ccc4 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1ccc4:	b580      	push	{r7, lr}
   1ccc6:	b082      	sub	sp, #8
   1ccc8:	af00      	add	r7, sp, #0
   1ccca:	6078      	str	r0, [r7, #4]
   1cccc:	000a      	movs	r2, r1
   1ccce:	1cbb      	adds	r3, r7, #2
   1ccd0:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1ccd2:	1cbb      	adds	r3, r7, #2
   1ccd4:	881a      	ldrh	r2, [r3, #0]
   1ccd6:	687b      	ldr	r3, [r7, #4]
   1ccd8:	0011      	movs	r1, r2
   1ccda:	0018      	movs	r0, r3
   1ccdc:	4b0d      	ldr	r3, [pc, #52]	; (1cd14 <sd_mmc_start_write_blocks+0x50>)
   1ccde:	4798      	blx	r3
   1cce0:	0003      	movs	r3, r0
   1cce2:	001a      	movs	r2, r3
   1cce4:	2301      	movs	r3, #1
   1cce6:	4053      	eors	r3, r2
   1cce8:	b2db      	uxtb	r3, r3
   1ccea:	2b00      	cmp	r3, #0
   1ccec:	d004      	beq.n	1ccf8 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1ccee:	4b0a      	ldr	r3, [pc, #40]	; (1cd18 <sd_mmc_start_write_blocks+0x54>)
   1ccf0:	2200      	movs	r2, #0
   1ccf2:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1ccf4:	2305      	movs	r3, #5
   1ccf6:	e008      	b.n	1cd0a <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1ccf8:	4b07      	ldr	r3, [pc, #28]	; (1cd18 <sd_mmc_start_write_blocks+0x54>)
   1ccfa:	881a      	ldrh	r2, [r3, #0]
   1ccfc:	1cbb      	adds	r3, r7, #2
   1ccfe:	881b      	ldrh	r3, [r3, #0]
   1cd00:	1ad3      	subs	r3, r2, r3
   1cd02:	b29a      	uxth	r2, r3
   1cd04:	4b04      	ldr	r3, [pc, #16]	; (1cd18 <sd_mmc_start_write_blocks+0x54>)
   1cd06:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1cd08:	2300      	movs	r3, #0
}
   1cd0a:	0018      	movs	r0, r3
   1cd0c:	46bd      	mov	sp, r7
   1cd0e:	b002      	add	sp, #8
   1cd10:	bd80      	pop	{r7, pc}
   1cd12:	46c0      	nop			; (mov r8, r8)
   1cd14:	0001dbdd 	.word	0x0001dbdd
   1cd18:	20003ca2 	.word	0x20003ca2

0001cd1c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1cd1c:	b580      	push	{r7, lr}
   1cd1e:	b082      	sub	sp, #8
   1cd20:	af00      	add	r7, sp, #0
   1cd22:	0002      	movs	r2, r0
   1cd24:	1dfb      	adds	r3, r7, #7
   1cd26:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1cd28:	4b13      	ldr	r3, [pc, #76]	; (1cd78 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1cd2a:	4798      	blx	r3
   1cd2c:	0003      	movs	r3, r0
   1cd2e:	001a      	movs	r2, r3
   1cd30:	2301      	movs	r3, #1
   1cd32:	4053      	eors	r3, r2
   1cd34:	b2db      	uxtb	r3, r3
   1cd36:	2b00      	cmp	r3, #0
   1cd38:	d001      	beq.n	1cd3e <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1cd3a:	2305      	movs	r3, #5
   1cd3c:	e018      	b.n	1cd70 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1cd3e:	1dfb      	adds	r3, r7, #7
   1cd40:	781b      	ldrb	r3, [r3, #0]
   1cd42:	2b00      	cmp	r3, #0
   1cd44:	d003      	beq.n	1cd4e <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1cd46:	4b0d      	ldr	r3, [pc, #52]	; (1cd7c <sd_mmc_wait_end_of_write_blocks+0x60>)
   1cd48:	2200      	movs	r2, #0
   1cd4a:	801a      	strh	r2, [r3, #0]
   1cd4c:	e005      	b.n	1cd5a <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1cd4e:	4b0b      	ldr	r3, [pc, #44]	; (1cd7c <sd_mmc_wait_end_of_write_blocks+0x60>)
   1cd50:	881b      	ldrh	r3, [r3, #0]
   1cd52:	2b00      	cmp	r3, #0
   1cd54:	d001      	beq.n	1cd5a <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1cd56:	2300      	movs	r3, #0
   1cd58:	e00a      	b.n	1cd70 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1cd5a:	4b09      	ldr	r3, [pc, #36]	; (1cd80 <sd_mmc_wait_end_of_write_blocks+0x64>)
   1cd5c:	881b      	ldrh	r3, [r3, #0]
   1cd5e:	2b01      	cmp	r3, #1
   1cd60:	d103      	bne.n	1cd6a <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1cd62:	4b08      	ldr	r3, [pc, #32]	; (1cd84 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1cd64:	4798      	blx	r3
		return SD_MMC_OK;
   1cd66:	2300      	movs	r3, #0
   1cd68:	e002      	b.n	1cd70 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1cd6a:	4b06      	ldr	r3, [pc, #24]	; (1cd84 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1cd6c:	4798      	blx	r3
	return SD_MMC_OK;
   1cd6e:	2300      	movs	r3, #0
}
   1cd70:	0018      	movs	r0, r3
   1cd72:	46bd      	mov	sp, r7
   1cd74:	b002      	add	sp, #8
   1cd76:	bd80      	pop	{r7, pc}
   1cd78:	0001dc9d 	.word	0x0001dc9d
   1cd7c:	20003ca2 	.word	0x20003ca2
   1cd80:	20003ca0 	.word	0x20003ca0
   1cd84:	0001c5dd 	.word	0x0001c5dd

0001cd88 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1cd88:	b580      	push	{r7, lr}
   1cd8a:	b082      	sub	sp, #8
   1cd8c:	af00      	add	r7, sp, #0
   1cd8e:	0002      	movs	r2, r0
   1cd90:	1dfb      	adds	r3, r7, #7
   1cd92:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1cd94:	1dfb      	adds	r3, r7, #7
   1cd96:	781b      	ldrb	r3, [r3, #0]
   1cd98:	0018      	movs	r0, r3
   1cd9a:	4b16      	ldr	r3, [pc, #88]	; (1cdf4 <sd_mmc_test_unit_ready+0x6c>)
   1cd9c:	4798      	blx	r3
   1cd9e:	0003      	movs	r3, r0
   1cda0:	2b01      	cmp	r3, #1
   1cda2:	d019      	beq.n	1cdd8 <sd_mmc_test_unit_ready+0x50>
   1cda4:	2b02      	cmp	r3, #2
   1cda6:	d019      	beq.n	1cddc <sd_mmc_test_unit_ready+0x54>
   1cda8:	2b00      	cmp	r3, #0
   1cdaa:	d11e      	bne.n	1cdea <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1cdac:	1dfb      	adds	r3, r7, #7
   1cdae:	781b      	ldrb	r3, [r3, #0]
   1cdb0:	4a11      	ldr	r2, [pc, #68]	; (1cdf8 <sd_mmc_test_unit_ready+0x70>)
   1cdb2:	5cd3      	ldrb	r3, [r2, r3]
   1cdb4:	2b00      	cmp	r3, #0
   1cdb6:	d001      	beq.n	1cdbc <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1cdb8:	2302      	movs	r3, #2
   1cdba:	e017      	b.n	1cdec <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1cdbc:	1dfb      	adds	r3, r7, #7
   1cdbe:	781b      	ldrb	r3, [r3, #0]
   1cdc0:	0018      	movs	r0, r3
   1cdc2:	4b0e      	ldr	r3, [pc, #56]	; (1cdfc <sd_mmc_test_unit_ready+0x74>)
   1cdc4:	4798      	blx	r3
   1cdc6:	0003      	movs	r3, r0
   1cdc8:	001a      	movs	r2, r3
   1cdca:	2303      	movs	r3, #3
   1cdcc:	4013      	ands	r3, r2
   1cdce:	d001      	beq.n	1cdd4 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1cdd0:	2300      	movs	r3, #0
   1cdd2:	e00b      	b.n	1cdec <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1cdd4:	2302      	movs	r3, #2
   1cdd6:	e009      	b.n	1cdec <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1cdd8:	2303      	movs	r3, #3
   1cdda:	e007      	b.n	1cdec <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1cddc:	1dfb      	adds	r3, r7, #7
   1cdde:	781b      	ldrb	r3, [r3, #0]
   1cde0:	4a05      	ldr	r2, [pc, #20]	; (1cdf8 <sd_mmc_test_unit_ready+0x70>)
   1cde2:	2100      	movs	r1, #0
   1cde4:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1cde6:	2302      	movs	r3, #2
   1cde8:	e000      	b.n	1cdec <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1cdea:	2301      	movs	r3, #1
	}
}
   1cdec:	0018      	movs	r0, r3
   1cdee:	46bd      	mov	sp, r7
   1cdf0:	b002      	add	sp, #8
   1cdf2:	bd80      	pop	{r7, pc}
   1cdf4:	0001c8fd 	.word	0x0001c8fd
   1cdf8:	20003ca4 	.word	0x20003ca4
   1cdfc:	0001c971 	.word	0x0001c971

0001ce00 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1ce00:	b580      	push	{r7, lr}
   1ce02:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1ce04:	2000      	movs	r0, #0
   1ce06:	4b03      	ldr	r3, [pc, #12]	; (1ce14 <sd_mmc_test_unit_ready_0+0x14>)
   1ce08:	4798      	blx	r3
   1ce0a:	0003      	movs	r3, r0
}
   1ce0c:	0018      	movs	r0, r3
   1ce0e:	46bd      	mov	sp, r7
   1ce10:	bd80      	pop	{r7, pc}
   1ce12:	46c0      	nop			; (mov r8, r8)
   1ce14:	0001cd89 	.word	0x0001cd89

0001ce18 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1ce18:	b580      	push	{r7, lr}
   1ce1a:	b082      	sub	sp, #8
   1ce1c:	af00      	add	r7, sp, #0
   1ce1e:	0002      	movs	r2, r0
   1ce20:	6039      	str	r1, [r7, #0]
   1ce22:	1dfb      	adds	r3, r7, #7
   1ce24:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1ce26:	1dfb      	adds	r3, r7, #7
   1ce28:	781b      	ldrb	r3, [r3, #0]
   1ce2a:	0018      	movs	r0, r3
   1ce2c:	4b08      	ldr	r3, [pc, #32]	; (1ce50 <sd_mmc_read_capacity+0x38>)
   1ce2e:	4798      	blx	r3
   1ce30:	0003      	movs	r3, r0
   1ce32:	005b      	lsls	r3, r3, #1
   1ce34:	1e5a      	subs	r2, r3, #1
   1ce36:	683b      	ldr	r3, [r7, #0]
   1ce38:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1ce3a:	1dfb      	adds	r3, r7, #7
   1ce3c:	781b      	ldrb	r3, [r3, #0]
   1ce3e:	0018      	movs	r0, r3
   1ce40:	4b04      	ldr	r3, [pc, #16]	; (1ce54 <sd_mmc_read_capacity+0x3c>)
   1ce42:	4798      	blx	r3
   1ce44:	0003      	movs	r3, r0
}
   1ce46:	0018      	movs	r0, r3
   1ce48:	46bd      	mov	sp, r7
   1ce4a:	b002      	add	sp, #8
   1ce4c:	bd80      	pop	{r7, pc}
   1ce4e:	46c0      	nop			; (mov r8, r8)
   1ce50:	0001c9ad 	.word	0x0001c9ad
   1ce54:	0001cd89 	.word	0x0001cd89

0001ce58 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1ce58:	b580      	push	{r7, lr}
   1ce5a:	b082      	sub	sp, #8
   1ce5c:	af00      	add	r7, sp, #0
   1ce5e:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1ce60:	687b      	ldr	r3, [r7, #4]
   1ce62:	0019      	movs	r1, r3
   1ce64:	2000      	movs	r0, #0
   1ce66:	4b03      	ldr	r3, [pc, #12]	; (1ce74 <sd_mmc_read_capacity_0+0x1c>)
   1ce68:	4798      	blx	r3
   1ce6a:	0003      	movs	r3, r0
}
   1ce6c:	0018      	movs	r0, r3
   1ce6e:	46bd      	mov	sp, r7
   1ce70:	b002      	add	sp, #8
   1ce72:	bd80      	pop	{r7, pc}
   1ce74:	0001ce19 	.word	0x0001ce19

0001ce78 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1ce78:	b580      	push	{r7, lr}
   1ce7a:	b082      	sub	sp, #8
   1ce7c:	af00      	add	r7, sp, #0
   1ce7e:	0002      	movs	r2, r0
   1ce80:	1dfb      	adds	r3, r7, #7
   1ce82:	701a      	strb	r2, [r3, #0]
   1ce84:	1dbb      	adds	r3, r7, #6
   1ce86:	1c0a      	adds	r2, r1, #0
   1ce88:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1ce8a:	1dfb      	adds	r3, r7, #7
   1ce8c:	781b      	ldrb	r3, [r3, #0]
   1ce8e:	4a04      	ldr	r2, [pc, #16]	; (1cea0 <sd_mmc_unload+0x28>)
   1ce90:	1db9      	adds	r1, r7, #6
   1ce92:	7809      	ldrb	r1, [r1, #0]
   1ce94:	54d1      	strb	r1, [r2, r3]
	return true;
   1ce96:	2301      	movs	r3, #1
}
   1ce98:	0018      	movs	r0, r3
   1ce9a:	46bd      	mov	sp, r7
   1ce9c:	b002      	add	sp, #8
   1ce9e:	bd80      	pop	{r7, pc}
   1cea0:	20003ca4 	.word	0x20003ca4

0001cea4 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1cea4:	b580      	push	{r7, lr}
   1cea6:	b082      	sub	sp, #8
   1cea8:	af00      	add	r7, sp, #0
   1ceaa:	0002      	movs	r2, r0
   1ceac:	1dfb      	adds	r3, r7, #7
   1ceae:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1ceb0:	1dfb      	adds	r3, r7, #7
   1ceb2:	781b      	ldrb	r3, [r3, #0]
   1ceb4:	0019      	movs	r1, r3
   1ceb6:	2000      	movs	r0, #0
   1ceb8:	4b03      	ldr	r3, [pc, #12]	; (1cec8 <sd_mmc_unload_0+0x24>)
   1ceba:	4798      	blx	r3
   1cebc:	0003      	movs	r3, r0
}
   1cebe:	0018      	movs	r0, r3
   1cec0:	46bd      	mov	sp, r7
   1cec2:	b002      	add	sp, #8
   1cec4:	bd80      	pop	{r7, pc}
   1cec6:	46c0      	nop			; (mov r8, r8)
   1cec8:	0001ce79 	.word	0x0001ce79

0001cecc <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1cecc:	b580      	push	{r7, lr}
   1cece:	b082      	sub	sp, #8
   1ced0:	af00      	add	r7, sp, #0
   1ced2:	0002      	movs	r2, r0
   1ced4:	1dfb      	adds	r3, r7, #7
   1ced6:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1ced8:	1dfb      	adds	r3, r7, #7
   1ceda:	781b      	ldrb	r3, [r3, #0]
   1cedc:	0018      	movs	r0, r3
   1cede:	4b03      	ldr	r3, [pc, #12]	; (1ceec <sd_mmc_wr_protect+0x20>)
   1cee0:	4798      	blx	r3
   1cee2:	0003      	movs	r3, r0
}
   1cee4:	0018      	movs	r0, r3
   1cee6:	46bd      	mov	sp, r7
   1cee8:	b002      	add	sp, #8
   1ceea:	bd80      	pop	{r7, pc}
   1ceec:	0001c9e9 	.word	0x0001c9e9

0001cef0 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1cef0:	b580      	push	{r7, lr}
   1cef2:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1cef4:	2000      	movs	r0, #0
   1cef6:	4b03      	ldr	r3, [pc, #12]	; (1cf04 <sd_mmc_wr_protect_0+0x14>)
   1cef8:	4798      	blx	r3
   1cefa:	0003      	movs	r3, r0
}
   1cefc:	0018      	movs	r0, r3
   1cefe:	46bd      	mov	sp, r7
   1cf00:	bd80      	pop	{r7, pc}
   1cf02:	46c0      	nop			; (mov r8, r8)
   1cf04:	0001cecd 	.word	0x0001cecd

0001cf08 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1cf08:	b580      	push	{r7, lr}
   1cf0a:	b082      	sub	sp, #8
   1cf0c:	af00      	add	r7, sp, #0
   1cf0e:	0002      	movs	r2, r0
   1cf10:	1dfb      	adds	r3, r7, #7
   1cf12:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1cf14:	2301      	movs	r3, #1
}
   1cf16:	0018      	movs	r0, r3
   1cf18:	46bd      	mov	sp, r7
   1cf1a:	b002      	add	sp, #8
   1cf1c:	bd80      	pop	{r7, pc}
	...

0001cf20 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1cf20:	b580      	push	{r7, lr}
   1cf22:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1cf24:	2000      	movs	r0, #0
   1cf26:	4b03      	ldr	r3, [pc, #12]	; (1cf34 <sd_mmc_removal_0+0x14>)
   1cf28:	4798      	blx	r3
   1cf2a:	0003      	movs	r3, r0
}
   1cf2c:	0018      	movs	r0, r3
   1cf2e:	46bd      	mov	sp, r7
   1cf30:	bd80      	pop	{r7, pc}
   1cf32:	46c0      	nop			; (mov r8, r8)
   1cf34:	0001cf09 	.word	0x0001cf09

0001cf38 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1cf38:	b580      	push	{r7, lr}
   1cf3a:	b084      	sub	sp, #16
   1cf3c:	af00      	add	r7, sp, #0
   1cf3e:	60b9      	str	r1, [r7, #8]
   1cf40:	607a      	str	r2, [r7, #4]
   1cf42:	230f      	movs	r3, #15
   1cf44:	18fb      	adds	r3, r7, r3
   1cf46:	1c02      	adds	r2, r0, #0
   1cf48:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1cf4a:	68b9      	ldr	r1, [r7, #8]
   1cf4c:	230f      	movs	r3, #15
   1cf4e:	18fb      	adds	r3, r7, r3
   1cf50:	781b      	ldrb	r3, [r3, #0]
   1cf52:	2201      	movs	r2, #1
   1cf54:	0018      	movs	r0, r3
   1cf56:	4b10      	ldr	r3, [pc, #64]	; (1cf98 <sd_mmc_mem_2_ram+0x60>)
   1cf58:	4798      	blx	r3
   1cf5a:	1e03      	subs	r3, r0, #0
   1cf5c:	d005      	beq.n	1cf6a <sd_mmc_mem_2_ram+0x32>
   1cf5e:	2b02      	cmp	r3, #2
   1cf60:	d101      	bne.n	1cf66 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1cf62:	2302      	movs	r3, #2
   1cf64:	e013      	b.n	1cf8e <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1cf66:	2301      	movs	r3, #1
   1cf68:	e011      	b.n	1cf8e <sd_mmc_mem_2_ram+0x56>
		break;
   1cf6a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1cf6c:	687b      	ldr	r3, [r7, #4]
   1cf6e:	2101      	movs	r1, #1
   1cf70:	0018      	movs	r0, r3
   1cf72:	4b0a      	ldr	r3, [pc, #40]	; (1cf9c <sd_mmc_mem_2_ram+0x64>)
   1cf74:	4798      	blx	r3
   1cf76:	1e03      	subs	r3, r0, #0
   1cf78:	d001      	beq.n	1cf7e <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1cf7a:	2301      	movs	r3, #1
   1cf7c:	e007      	b.n	1cf8e <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1cf7e:	2000      	movs	r0, #0
   1cf80:	4b07      	ldr	r3, [pc, #28]	; (1cfa0 <sd_mmc_mem_2_ram+0x68>)
   1cf82:	4798      	blx	r3
   1cf84:	1e03      	subs	r3, r0, #0
   1cf86:	d001      	beq.n	1cf8c <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1cf88:	2301      	movs	r3, #1
   1cf8a:	e000      	b.n	1cf8e <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1cf8c:	2300      	movs	r3, #0
}
   1cf8e:	0018      	movs	r0, r3
   1cf90:	46bd      	mov	sp, r7
   1cf92:	b004      	add	sp, #16
   1cf94:	bd80      	pop	{r7, pc}
   1cf96:	46c0      	nop			; (mov r8, r8)
   1cf98:	0001ca01 	.word	0x0001ca01
   1cf9c:	0001caed 	.word	0x0001caed
   1cfa0:	0001cb45 	.word	0x0001cb45

0001cfa4 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1cfa4:	b580      	push	{r7, lr}
   1cfa6:	b082      	sub	sp, #8
   1cfa8:	af00      	add	r7, sp, #0
   1cfaa:	6078      	str	r0, [r7, #4]
   1cfac:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1cfae:	683a      	ldr	r2, [r7, #0]
   1cfb0:	687b      	ldr	r3, [r7, #4]
   1cfb2:	0019      	movs	r1, r3
   1cfb4:	2000      	movs	r0, #0
   1cfb6:	4b03      	ldr	r3, [pc, #12]	; (1cfc4 <sd_mmc_mem_2_ram_0+0x20>)
   1cfb8:	4798      	blx	r3
   1cfba:	0003      	movs	r3, r0
}
   1cfbc:	0018      	movs	r0, r3
   1cfbe:	46bd      	mov	sp, r7
   1cfc0:	b002      	add	sp, #8
   1cfc2:	bd80      	pop	{r7, pc}
   1cfc4:	0001cf39 	.word	0x0001cf39

0001cfc8 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1cfc8:	b580      	push	{r7, lr}
   1cfca:	b084      	sub	sp, #16
   1cfcc:	af00      	add	r7, sp, #0
   1cfce:	60b9      	str	r1, [r7, #8]
   1cfd0:	607a      	str	r2, [r7, #4]
   1cfd2:	230f      	movs	r3, #15
   1cfd4:	18fb      	adds	r3, r7, r3
   1cfd6:	1c02      	adds	r2, r0, #0
   1cfd8:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1cfda:	68b9      	ldr	r1, [r7, #8]
   1cfdc:	230f      	movs	r3, #15
   1cfde:	18fb      	adds	r3, r7, r3
   1cfe0:	781b      	ldrb	r3, [r3, #0]
   1cfe2:	2201      	movs	r2, #1
   1cfe4:	0018      	movs	r0, r3
   1cfe6:	4b10      	ldr	r3, [pc, #64]	; (1d028 <sd_mmc_ram_2_mem+0x60>)
   1cfe8:	4798      	blx	r3
   1cfea:	1e03      	subs	r3, r0, #0
   1cfec:	d005      	beq.n	1cffa <sd_mmc_ram_2_mem+0x32>
   1cfee:	2b02      	cmp	r3, #2
   1cff0:	d101      	bne.n	1cff6 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1cff2:	2302      	movs	r3, #2
   1cff4:	e013      	b.n	1d01e <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1cff6:	2301      	movs	r3, #1
   1cff8:	e011      	b.n	1d01e <sd_mmc_ram_2_mem+0x56>
		break;
   1cffa:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1cffc:	687b      	ldr	r3, [r7, #4]
   1cffe:	2101      	movs	r1, #1
   1d000:	0018      	movs	r0, r3
   1d002:	4b0a      	ldr	r3, [pc, #40]	; (1d02c <sd_mmc_ram_2_mem+0x64>)
   1d004:	4798      	blx	r3
   1d006:	1e03      	subs	r3, r0, #0
   1d008:	d001      	beq.n	1d00e <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1d00a:	2301      	movs	r3, #1
   1d00c:	e007      	b.n	1d01e <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1d00e:	2000      	movs	r0, #0
   1d010:	4b07      	ldr	r3, [pc, #28]	; (1d030 <sd_mmc_ram_2_mem+0x68>)
   1d012:	4798      	blx	r3
   1d014:	1e03      	subs	r3, r0, #0
   1d016:	d001      	beq.n	1d01c <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1d018:	2301      	movs	r3, #1
   1d01a:	e000      	b.n	1d01e <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1d01c:	2300      	movs	r3, #0
}
   1d01e:	0018      	movs	r0, r3
   1d020:	46bd      	mov	sp, r7
   1d022:	b004      	add	sp, #16
   1d024:	bd80      	pop	{r7, pc}
   1d026:	46c0      	nop			; (mov r8, r8)
   1d028:	0001cbdd 	.word	0x0001cbdd
   1d02c:	0001ccc5 	.word	0x0001ccc5
   1d030:	0001cd1d 	.word	0x0001cd1d

0001d034 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1d034:	b580      	push	{r7, lr}
   1d036:	b082      	sub	sp, #8
   1d038:	af00      	add	r7, sp, #0
   1d03a:	6078      	str	r0, [r7, #4]
   1d03c:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1d03e:	683a      	ldr	r2, [r7, #0]
   1d040:	687b      	ldr	r3, [r7, #4]
   1d042:	0019      	movs	r1, r3
   1d044:	2000      	movs	r0, #0
   1d046:	4b03      	ldr	r3, [pc, #12]	; (1d054 <sd_mmc_ram_2_mem_0+0x20>)
   1d048:	4798      	blx	r3
   1d04a:	0003      	movs	r3, r0
}
   1d04c:	0018      	movs	r0, r3
   1d04e:	46bd      	mov	sp, r7
   1d050:	b002      	add	sp, #8
   1d052:	bd80      	pop	{r7, pc}
   1d054:	0001cfc9 	.word	0x0001cfc9

0001d058 <system_pinmux_get_group_from_gpio_pin>:
{
   1d058:	b580      	push	{r7, lr}
   1d05a:	b084      	sub	sp, #16
   1d05c:	af00      	add	r7, sp, #0
   1d05e:	0002      	movs	r2, r0
   1d060:	1dfb      	adds	r3, r7, #7
   1d062:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1d064:	230f      	movs	r3, #15
   1d066:	18fb      	adds	r3, r7, r3
   1d068:	1dfa      	adds	r2, r7, #7
   1d06a:	7812      	ldrb	r2, [r2, #0]
   1d06c:	09d2      	lsrs	r2, r2, #7
   1d06e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1d070:	230e      	movs	r3, #14
   1d072:	18fb      	adds	r3, r7, r3
   1d074:	1dfa      	adds	r2, r7, #7
   1d076:	7812      	ldrb	r2, [r2, #0]
   1d078:	0952      	lsrs	r2, r2, #5
   1d07a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1d07c:	4b0d      	ldr	r3, [pc, #52]	; (1d0b4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1d07e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1d080:	230f      	movs	r3, #15
   1d082:	18fb      	adds	r3, r7, r3
   1d084:	781b      	ldrb	r3, [r3, #0]
   1d086:	2b00      	cmp	r3, #0
   1d088:	d10f      	bne.n	1d0aa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1d08a:	230f      	movs	r3, #15
   1d08c:	18fb      	adds	r3, r7, r3
   1d08e:	781b      	ldrb	r3, [r3, #0]
   1d090:	009b      	lsls	r3, r3, #2
   1d092:	2210      	movs	r2, #16
   1d094:	4694      	mov	ip, r2
   1d096:	44bc      	add	ip, r7
   1d098:	4463      	add	r3, ip
   1d09a:	3b08      	subs	r3, #8
   1d09c:	681a      	ldr	r2, [r3, #0]
   1d09e:	230e      	movs	r3, #14
   1d0a0:	18fb      	adds	r3, r7, r3
   1d0a2:	781b      	ldrb	r3, [r3, #0]
   1d0a4:	01db      	lsls	r3, r3, #7
   1d0a6:	18d3      	adds	r3, r2, r3
   1d0a8:	e000      	b.n	1d0ac <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1d0aa:	2300      	movs	r3, #0
}
   1d0ac:	0018      	movs	r0, r3
   1d0ae:	46bd      	mov	sp, r7
   1d0b0:	b004      	add	sp, #16
   1d0b2:	bd80      	pop	{r7, pc}
   1d0b4:	41004400 	.word	0x41004400

0001d0b8 <system_interrupt_enable>:
{
   1d0b8:	b580      	push	{r7, lr}
   1d0ba:	b082      	sub	sp, #8
   1d0bc:	af00      	add	r7, sp, #0
   1d0be:	0002      	movs	r2, r0
   1d0c0:	1dfb      	adds	r3, r7, #7
   1d0c2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d0c4:	4b06      	ldr	r3, [pc, #24]	; (1d0e0 <system_interrupt_enable+0x28>)
   1d0c6:	1dfa      	adds	r2, r7, #7
   1d0c8:	7812      	ldrb	r2, [r2, #0]
   1d0ca:	0011      	movs	r1, r2
   1d0cc:	221f      	movs	r2, #31
   1d0ce:	400a      	ands	r2, r1
   1d0d0:	2101      	movs	r1, #1
   1d0d2:	4091      	lsls	r1, r2
   1d0d4:	000a      	movs	r2, r1
   1d0d6:	601a      	str	r2, [r3, #0]
}
   1d0d8:	46c0      	nop			; (mov r8, r8)
   1d0da:	46bd      	mov	sp, r7
   1d0dc:	b002      	add	sp, #8
   1d0de:	bd80      	pop	{r7, pc}
   1d0e0:	e000e100 	.word	0xe000e100

0001d0e4 <port_get_group_from_gpio_pin>:
{
   1d0e4:	b580      	push	{r7, lr}
   1d0e6:	b082      	sub	sp, #8
   1d0e8:	af00      	add	r7, sp, #0
   1d0ea:	0002      	movs	r2, r0
   1d0ec:	1dfb      	adds	r3, r7, #7
   1d0ee:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1d0f0:	1dfb      	adds	r3, r7, #7
   1d0f2:	781b      	ldrb	r3, [r3, #0]
   1d0f4:	0018      	movs	r0, r3
   1d0f6:	4b03      	ldr	r3, [pc, #12]	; (1d104 <port_get_group_from_gpio_pin+0x20>)
   1d0f8:	4798      	blx	r3
   1d0fa:	0003      	movs	r3, r0
}
   1d0fc:	0018      	movs	r0, r3
   1d0fe:	46bd      	mov	sp, r7
   1d100:	b002      	add	sp, #8
   1d102:	bd80      	pop	{r7, pc}
   1d104:	0001d059 	.word	0x0001d059

0001d108 <port_get_config_defaults>:
{
   1d108:	b580      	push	{r7, lr}
   1d10a:	b082      	sub	sp, #8
   1d10c:	af00      	add	r7, sp, #0
   1d10e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1d110:	687b      	ldr	r3, [r7, #4]
   1d112:	2200      	movs	r2, #0
   1d114:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1d116:	687b      	ldr	r3, [r7, #4]
   1d118:	2201      	movs	r2, #1
   1d11a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1d11c:	687b      	ldr	r3, [r7, #4]
   1d11e:	2200      	movs	r2, #0
   1d120:	709a      	strb	r2, [r3, #2]
}
   1d122:	46c0      	nop			; (mov r8, r8)
   1d124:	46bd      	mov	sp, r7
   1d126:	b002      	add	sp, #8
   1d128:	bd80      	pop	{r7, pc}
	...

0001d12c <port_pin_set_output_level>:
{
   1d12c:	b580      	push	{r7, lr}
   1d12e:	b084      	sub	sp, #16
   1d130:	af00      	add	r7, sp, #0
   1d132:	0002      	movs	r2, r0
   1d134:	1dfb      	adds	r3, r7, #7
   1d136:	701a      	strb	r2, [r3, #0]
   1d138:	1dbb      	adds	r3, r7, #6
   1d13a:	1c0a      	adds	r2, r1, #0
   1d13c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1d13e:	1dfb      	adds	r3, r7, #7
   1d140:	781b      	ldrb	r3, [r3, #0]
   1d142:	0018      	movs	r0, r3
   1d144:	4b0d      	ldr	r3, [pc, #52]	; (1d17c <port_pin_set_output_level+0x50>)
   1d146:	4798      	blx	r3
   1d148:	0003      	movs	r3, r0
   1d14a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1d14c:	1dfb      	adds	r3, r7, #7
   1d14e:	781b      	ldrb	r3, [r3, #0]
   1d150:	221f      	movs	r2, #31
   1d152:	4013      	ands	r3, r2
   1d154:	2201      	movs	r2, #1
   1d156:	409a      	lsls	r2, r3
   1d158:	0013      	movs	r3, r2
   1d15a:	60bb      	str	r3, [r7, #8]
	if (level) {
   1d15c:	1dbb      	adds	r3, r7, #6
   1d15e:	781b      	ldrb	r3, [r3, #0]
   1d160:	2b00      	cmp	r3, #0
   1d162:	d003      	beq.n	1d16c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1d164:	68fb      	ldr	r3, [r7, #12]
   1d166:	68ba      	ldr	r2, [r7, #8]
   1d168:	619a      	str	r2, [r3, #24]
}
   1d16a:	e002      	b.n	1d172 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1d16c:	68fb      	ldr	r3, [r7, #12]
   1d16e:	68ba      	ldr	r2, [r7, #8]
   1d170:	615a      	str	r2, [r3, #20]
}
   1d172:	46c0      	nop			; (mov r8, r8)
   1d174:	46bd      	mov	sp, r7
   1d176:	b004      	add	sp, #16
   1d178:	bd80      	pop	{r7, pc}
   1d17a:	46c0      	nop			; (mov r8, r8)
   1d17c:	0001d0e5 	.word	0x0001d0e5

0001d180 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1d180:	b580      	push	{r7, lr}
   1d182:	b084      	sub	sp, #16
   1d184:	af00      	add	r7, sp, #0
   1d186:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1d188:	687b      	ldr	r3, [r7, #4]
   1d18a:	681b      	ldr	r3, [r3, #0]
   1d18c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1d18e:	68fb      	ldr	r3, [r7, #12]
   1d190:	69db      	ldr	r3, [r3, #28]
   1d192:	1e5a      	subs	r2, r3, #1
   1d194:	4193      	sbcs	r3, r2
   1d196:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1d198:	0018      	movs	r0, r3
   1d19a:	46bd      	mov	sp, r7
   1d19c:	b004      	add	sp, #16
   1d19e:	bd80      	pop	{r7, pc}

0001d1a0 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1d1a0:	b580      	push	{r7, lr}
   1d1a2:	b082      	sub	sp, #8
   1d1a4:	af00      	add	r7, sp, #0
   1d1a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1d1a8:	687b      	ldr	r3, [r7, #4]
   1d1aa:	2201      	movs	r2, #1
   1d1ac:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1d1ae:	687b      	ldr	r3, [r7, #4]
   1d1b0:	2200      	movs	r2, #0
   1d1b2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1d1b4:	687b      	ldr	r3, [r7, #4]
   1d1b6:	2200      	movs	r2, #0
   1d1b8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1d1ba:	687b      	ldr	r3, [r7, #4]
   1d1bc:	22c0      	movs	r2, #192	; 0xc0
   1d1be:	0392      	lsls	r2, r2, #14
   1d1c0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1d1c2:	687b      	ldr	r3, [r7, #4]
   1d1c4:	2200      	movs	r2, #0
   1d1c6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1d1c8:	687b      	ldr	r3, [r7, #4]
   1d1ca:	2200      	movs	r2, #0
   1d1cc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1d1ce:	687b      	ldr	r3, [r7, #4]
   1d1d0:	2201      	movs	r2, #1
   1d1d2:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1d1d4:	687b      	ldr	r3, [r7, #4]
   1d1d6:	2201      	movs	r2, #1
   1d1d8:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1d1da:	687b      	ldr	r3, [r7, #4]
   1d1dc:	2200      	movs	r2, #0
   1d1de:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1d1e0:	687b      	ldr	r3, [r7, #4]
   1d1e2:	2224      	movs	r2, #36	; 0x24
   1d1e4:	2100      	movs	r1, #0
   1d1e6:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1d1e8:	687b      	ldr	r3, [r7, #4]
   1d1ea:	3318      	adds	r3, #24
   1d1ec:	220c      	movs	r2, #12
   1d1ee:	2100      	movs	r1, #0
   1d1f0:	0018      	movs	r0, r3
   1d1f2:	4b0a      	ldr	r3, [pc, #40]	; (1d21c <spi_get_config_defaults+0x7c>)
   1d1f4:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1d1f6:	687b      	ldr	r3, [r7, #4]
   1d1f8:	4a09      	ldr	r2, [pc, #36]	; (1d220 <spi_get_config_defaults+0x80>)
   1d1fa:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1d1fc:	687b      	ldr	r3, [r7, #4]
   1d1fe:	2200      	movs	r2, #0
   1d200:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1d202:	687b      	ldr	r3, [r7, #4]
   1d204:	2200      	movs	r2, #0
   1d206:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1d208:	687b      	ldr	r3, [r7, #4]
   1d20a:	2200      	movs	r2, #0
   1d20c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1d20e:	687b      	ldr	r3, [r7, #4]
   1d210:	2200      	movs	r2, #0
   1d212:	635a      	str	r2, [r3, #52]	; 0x34

};
   1d214:	46c0      	nop			; (mov r8, r8)
   1d216:	46bd      	mov	sp, r7
   1d218:	b002      	add	sp, #8
   1d21a:	bd80      	pop	{r7, pc}
   1d21c:	000321a3 	.word	0x000321a3
   1d220:	000186a0 	.word	0x000186a0

0001d224 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1d224:	b580      	push	{r7, lr}
   1d226:	b082      	sub	sp, #8
   1d228:	af00      	add	r7, sp, #0
   1d22a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1d22c:	687b      	ldr	r3, [r7, #4]
   1d22e:	220a      	movs	r2, #10
   1d230:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1d232:	687b      	ldr	r3, [r7, #4]
   1d234:	2200      	movs	r2, #0
   1d236:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1d238:	687b      	ldr	r3, [r7, #4]
   1d23a:	2200      	movs	r2, #0
   1d23c:	709a      	strb	r2, [r3, #2]
}
   1d23e:	46c0      	nop			; (mov r8, r8)
   1d240:	46bd      	mov	sp, r7
   1d242:	b002      	add	sp, #8
   1d244:	bd80      	pop	{r7, pc}
	...

0001d248 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1d248:	b580      	push	{r7, lr}
   1d24a:	b084      	sub	sp, #16
   1d24c:	af00      	add	r7, sp, #0
   1d24e:	6078      	str	r0, [r7, #4]
   1d250:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1d252:	683b      	ldr	r3, [r7, #0]
   1d254:	781a      	ldrb	r2, [r3, #0]
   1d256:	687b      	ldr	r3, [r7, #4]
   1d258:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1d25a:	683b      	ldr	r3, [r7, #0]
   1d25c:	785a      	ldrb	r2, [r3, #1]
   1d25e:	687b      	ldr	r3, [r7, #4]
   1d260:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1d262:	683b      	ldr	r3, [r7, #0]
   1d264:	789a      	ldrb	r2, [r3, #2]
   1d266:	687b      	ldr	r3, [r7, #4]
   1d268:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1d26a:	230c      	movs	r3, #12
   1d26c:	18fb      	adds	r3, r7, r3
   1d26e:	0018      	movs	r0, r3
   1d270:	4b0b      	ldr	r3, [pc, #44]	; (1d2a0 <spi_attach_slave+0x58>)
   1d272:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1d274:	230c      	movs	r3, #12
   1d276:	18fb      	adds	r3, r7, r3
   1d278:	2201      	movs	r2, #1
   1d27a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1d27c:	687b      	ldr	r3, [r7, #4]
   1d27e:	781b      	ldrb	r3, [r3, #0]
   1d280:	220c      	movs	r2, #12
   1d282:	18ba      	adds	r2, r7, r2
   1d284:	0011      	movs	r1, r2
   1d286:	0018      	movs	r0, r3
   1d288:	4b06      	ldr	r3, [pc, #24]	; (1d2a4 <spi_attach_slave+0x5c>)
   1d28a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1d28c:	687b      	ldr	r3, [r7, #4]
   1d28e:	781b      	ldrb	r3, [r3, #0]
   1d290:	2101      	movs	r1, #1
   1d292:	0018      	movs	r0, r3
   1d294:	4b04      	ldr	r3, [pc, #16]	; (1d2a8 <spi_attach_slave+0x60>)
   1d296:	4798      	blx	r3
}
   1d298:	46c0      	nop			; (mov r8, r8)
   1d29a:	46bd      	mov	sp, r7
   1d29c:	b004      	add	sp, #16
   1d29e:	bd80      	pop	{r7, pc}
   1d2a0:	0001d109 	.word	0x0001d109
   1d2a4:	000245ed 	.word	0x000245ed
   1d2a8:	0001d12d 	.word	0x0001d12d

0001d2ac <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1d2ac:	b580      	push	{r7, lr}
   1d2ae:	b084      	sub	sp, #16
   1d2b0:	af00      	add	r7, sp, #0
   1d2b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1d2b4:	687b      	ldr	r3, [r7, #4]
   1d2b6:	681b      	ldr	r3, [r3, #0]
   1d2b8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1d2ba:	687b      	ldr	r3, [r7, #4]
   1d2bc:	681b      	ldr	r3, [r3, #0]
   1d2be:	0018      	movs	r0, r3
   1d2c0:	4b0b      	ldr	r3, [pc, #44]	; (1d2f0 <spi_enable+0x44>)
   1d2c2:	4798      	blx	r3
   1d2c4:	0003      	movs	r3, r0
   1d2c6:	0018      	movs	r0, r3
   1d2c8:	4b0a      	ldr	r3, [pc, #40]	; (1d2f4 <spi_enable+0x48>)
   1d2ca:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1d2cc:	46c0      	nop			; (mov r8, r8)
   1d2ce:	687b      	ldr	r3, [r7, #4]
   1d2d0:	0018      	movs	r0, r3
   1d2d2:	4b09      	ldr	r3, [pc, #36]	; (1d2f8 <spi_enable+0x4c>)
   1d2d4:	4798      	blx	r3
   1d2d6:	1e03      	subs	r3, r0, #0
   1d2d8:	d1f9      	bne.n	1d2ce <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1d2da:	68fb      	ldr	r3, [r7, #12]
   1d2dc:	681b      	ldr	r3, [r3, #0]
   1d2de:	2202      	movs	r2, #2
   1d2e0:	431a      	orrs	r2, r3
   1d2e2:	68fb      	ldr	r3, [r7, #12]
   1d2e4:	601a      	str	r2, [r3, #0]
}
   1d2e6:	46c0      	nop			; (mov r8, r8)
   1d2e8:	46bd      	mov	sp, r7
   1d2ea:	b004      	add	sp, #16
   1d2ec:	bd80      	pop	{r7, pc}
   1d2ee:	46c0      	nop			; (mov r8, r8)
   1d2f0:	000252bd 	.word	0x000252bd
   1d2f4:	0001d0b9 	.word	0x0001d0b9
   1d2f8:	0001d181 	.word	0x0001d181

0001d2fc <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1d2fc:	b580      	push	{r7, lr}
   1d2fe:	b084      	sub	sp, #16
   1d300:	af00      	add	r7, sp, #0
   1d302:	6078      	str	r0, [r7, #4]
   1d304:	000a      	movs	r2, r1
   1d306:	1cfb      	adds	r3, r7, #3
   1d308:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1d30a:	230f      	movs	r3, #15
   1d30c:	18fb      	adds	r3, r7, r3
   1d30e:	2200      	movs	r2, #0
   1d310:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1d312:	e038      	b.n	1d386 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1d314:	687b      	ldr	r3, [r7, #4]
   1d316:	1c5a      	adds	r2, r3, #1
   1d318:	607a      	str	r2, [r7, #4]
   1d31a:	220e      	movs	r2, #14
   1d31c:	18ba      	adds	r2, r7, r2
   1d31e:	781b      	ldrb	r3, [r3, #0]
   1d320:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1d322:	230d      	movs	r3, #13
   1d324:	18fb      	adds	r3, r7, r3
   1d326:	2200      	movs	r2, #0
   1d328:	701a      	strb	r2, [r3, #0]
   1d32a:	e027      	b.n	1d37c <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1d32c:	230f      	movs	r3, #15
   1d32e:	18fa      	adds	r2, r7, r3
   1d330:	230f      	movs	r3, #15
   1d332:	18fb      	adds	r3, r7, r3
   1d334:	781b      	ldrb	r3, [r3, #0]
   1d336:	18db      	adds	r3, r3, r3
   1d338:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1d33a:	230e      	movs	r3, #14
   1d33c:	18fa      	adds	r2, r7, r3
   1d33e:	230f      	movs	r3, #15
   1d340:	18fb      	adds	r3, r7, r3
   1d342:	7812      	ldrb	r2, [r2, #0]
   1d344:	781b      	ldrb	r3, [r3, #0]
   1d346:	4053      	eors	r3, r2
   1d348:	b2db      	uxtb	r3, r3
   1d34a:	b25b      	sxtb	r3, r3
   1d34c:	2b00      	cmp	r3, #0
   1d34e:	da07      	bge.n	1d360 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1d350:	230f      	movs	r3, #15
   1d352:	18fb      	adds	r3, r7, r3
   1d354:	220f      	movs	r2, #15
   1d356:	18ba      	adds	r2, r7, r2
   1d358:	7812      	ldrb	r2, [r2, #0]
   1d35a:	2109      	movs	r1, #9
   1d35c:	404a      	eors	r2, r1
   1d35e:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1d360:	230e      	movs	r3, #14
   1d362:	18fa      	adds	r2, r7, r3
   1d364:	230e      	movs	r3, #14
   1d366:	18fb      	adds	r3, r7, r3
   1d368:	781b      	ldrb	r3, [r3, #0]
   1d36a:	18db      	adds	r3, r3, r3
   1d36c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1d36e:	230d      	movs	r3, #13
   1d370:	18fb      	adds	r3, r7, r3
   1d372:	781a      	ldrb	r2, [r3, #0]
   1d374:	230d      	movs	r3, #13
   1d376:	18fb      	adds	r3, r7, r3
   1d378:	3201      	adds	r2, #1
   1d37a:	701a      	strb	r2, [r3, #0]
   1d37c:	230d      	movs	r3, #13
   1d37e:	18fb      	adds	r3, r7, r3
   1d380:	781b      	ldrb	r3, [r3, #0]
   1d382:	2b07      	cmp	r3, #7
   1d384:	d9d2      	bls.n	1d32c <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1d386:	1cfb      	adds	r3, r7, #3
   1d388:	781b      	ldrb	r3, [r3, #0]
   1d38a:	1cfa      	adds	r2, r7, #3
   1d38c:	1e59      	subs	r1, r3, #1
   1d38e:	7011      	strb	r1, [r2, #0]
   1d390:	2b00      	cmp	r3, #0
   1d392:	d1bf      	bne.n	1d314 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1d394:	230f      	movs	r3, #15
   1d396:	18fb      	adds	r3, r7, r3
   1d398:	781b      	ldrb	r3, [r3, #0]
   1d39a:	005b      	lsls	r3, r3, #1
   1d39c:	b25b      	sxtb	r3, r3
   1d39e:	2201      	movs	r2, #1
   1d3a0:	4313      	orrs	r3, r2
   1d3a2:	b25a      	sxtb	r2, r3
   1d3a4:	230f      	movs	r3, #15
   1d3a6:	18fb      	adds	r3, r7, r3
   1d3a8:	701a      	strb	r2, [r3, #0]
	return crc;
   1d3aa:	230f      	movs	r3, #15
   1d3ac:	18fb      	adds	r3, r7, r3
   1d3ae:	781b      	ldrb	r3, [r3, #0]
}
   1d3b0:	0018      	movs	r0, r3
   1d3b2:	46bd      	mov	sp, r7
   1d3b4:	b004      	add	sp, #16
   1d3b6:	bd80      	pop	{r7, pc}

0001d3b8 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1d3b8:	b590      	push	{r4, r7, lr}
   1d3ba:	b083      	sub	sp, #12
   1d3bc:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1d3be:	1c7b      	adds	r3, r7, #1
   1d3c0:	22ff      	movs	r2, #255	; 0xff
   1d3c2:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1d3c4:	1cbb      	adds	r3, r7, #2
   1d3c6:	22ff      	movs	r2, #255	; 0xff
   1d3c8:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1d3ca:	1cbb      	adds	r3, r7, #2
   1d3cc:	881b      	ldrh	r3, [r3, #0]
   1d3ce:	1c79      	adds	r1, r7, #1
   1d3d0:	4811      	ldr	r0, [pc, #68]	; (1d418 <sd_mmc_spi_wait_busy+0x60>)
   1d3d2:	2201      	movs	r2, #1
   1d3d4:	4c11      	ldr	r4, [pc, #68]	; (1d41c <sd_mmc_spi_wait_busy+0x64>)
   1d3d6:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1d3d8:	4b11      	ldr	r3, [pc, #68]	; (1d420 <sd_mmc_spi_wait_busy+0x68>)
   1d3da:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1d3dc:	1cbb      	adds	r3, r7, #2
   1d3de:	881b      	ldrh	r3, [r3, #0]
   1d3e0:	1c79      	adds	r1, r7, #1
   1d3e2:	480d      	ldr	r0, [pc, #52]	; (1d418 <sd_mmc_spi_wait_busy+0x60>)
   1d3e4:	2201      	movs	r2, #1
   1d3e6:	4c0d      	ldr	r4, [pc, #52]	; (1d41c <sd_mmc_spi_wait_busy+0x64>)
   1d3e8:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1d3ea:	1cbb      	adds	r3, r7, #2
   1d3ec:	881b      	ldrh	r3, [r3, #0]
   1d3ee:	1c79      	adds	r1, r7, #1
   1d3f0:	4809      	ldr	r0, [pc, #36]	; (1d418 <sd_mmc_spi_wait_busy+0x60>)
   1d3f2:	2201      	movs	r2, #1
   1d3f4:	4c09      	ldr	r4, [pc, #36]	; (1d41c <sd_mmc_spi_wait_busy+0x64>)
   1d3f6:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1d3f8:	687b      	ldr	r3, [r7, #4]
   1d3fa:	1e5a      	subs	r2, r3, #1
   1d3fc:	607a      	str	r2, [r7, #4]
   1d3fe:	2b00      	cmp	r3, #0
   1d400:	d101      	bne.n	1d406 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1d402:	2300      	movs	r3, #0
   1d404:	e004      	b.n	1d410 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1d406:	1c7b      	adds	r3, r7, #1
   1d408:	781b      	ldrb	r3, [r3, #0]
   1d40a:	2bff      	cmp	r3, #255	; 0xff
   1d40c:	d1ed      	bne.n	1d3ea <sd_mmc_spi_wait_busy+0x32>
	return true;
   1d40e:	2301      	movs	r3, #1
}
   1d410:	0018      	movs	r0, r3
   1d412:	46bd      	mov	sp, r7
   1d414:	b003      	add	sp, #12
   1d416:	bd90      	pop	{r4, r7, pc}
   1d418:	20003ca8 	.word	0x20003ca8
   1d41c:	00025bfd 	.word	0x00025bfd
   1d420:	00030d40 	.word	0x00030d40

0001d424 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1d424:	b590      	push	{r4, r7, lr}
   1d426:	b083      	sub	sp, #12
   1d428:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1d42a:	1cbb      	adds	r3, r7, #2
   1d42c:	22ff      	movs	r2, #255	; 0xff
   1d42e:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1d430:	1c7b      	adds	r3, r7, #1
   1d432:	2200      	movs	r2, #0
   1d434:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1d436:	4b18      	ldr	r3, [pc, #96]	; (1d498 <sd_mmc_spi_start_read_block+0x74>)
   1d438:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1d43a:	687b      	ldr	r3, [r7, #4]
   1d43c:	1e5a      	subs	r2, r3, #1
   1d43e:	607a      	str	r2, [r7, #4]
   1d440:	2b00      	cmp	r3, #0
   1d442:	d104      	bne.n	1d44e <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1d444:	4b15      	ldr	r3, [pc, #84]	; (1d49c <sd_mmc_spi_start_read_block+0x78>)
   1d446:	2204      	movs	r2, #4
   1d448:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1d44a:	2300      	movs	r3, #0
   1d44c:	e020      	b.n	1d490 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1d44e:	1cbb      	adds	r3, r7, #2
   1d450:	881b      	ldrh	r3, [r3, #0]
   1d452:	1c79      	adds	r1, r7, #1
   1d454:	4812      	ldr	r0, [pc, #72]	; (1d4a0 <sd_mmc_spi_start_read_block+0x7c>)
   1d456:	2201      	movs	r2, #1
   1d458:	4c12      	ldr	r4, [pc, #72]	; (1d4a4 <sd_mmc_spi_start_read_block+0x80>)
   1d45a:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1d45c:	1c7b      	adds	r3, r7, #1
   1d45e:	781b      	ldrb	r3, [r3, #0]
   1d460:	001a      	movs	r2, r3
   1d462:	23f0      	movs	r3, #240	; 0xf0
   1d464:	4013      	ands	r3, r2
   1d466:	d10e      	bne.n	1d486 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1d468:	1c7b      	adds	r3, r7, #1
   1d46a:	781b      	ldrb	r3, [r3, #0]
   1d46c:	001a      	movs	r2, r3
   1d46e:	2307      	movs	r3, #7
   1d470:	4013      	ands	r3, r2
   1d472:	d003      	beq.n	1d47c <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1d474:	4b09      	ldr	r3, [pc, #36]	; (1d49c <sd_mmc_spi_start_read_block+0x78>)
   1d476:	2207      	movs	r2, #7
   1d478:	701a      	strb	r2, [r3, #0]
   1d47a:	e002      	b.n	1d482 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1d47c:	4b07      	ldr	r3, [pc, #28]	; (1d49c <sd_mmc_spi_start_read_block+0x78>)
   1d47e:	220b      	movs	r2, #11
   1d480:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1d482:	2300      	movs	r3, #0
   1d484:	e004      	b.n	1d490 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1d486:	1c7b      	adds	r3, r7, #1
   1d488:	781b      	ldrb	r3, [r3, #0]
   1d48a:	2bfe      	cmp	r3, #254	; 0xfe
   1d48c:	d1d5      	bne.n	1d43a <sd_mmc_spi_start_read_block+0x16>

	return true;
   1d48e:	2301      	movs	r3, #1
}
   1d490:	0018      	movs	r0, r3
   1d492:	46bd      	mov	sp, r7
   1d494:	b003      	add	sp, #12
   1d496:	bd90      	pop	{r4, r7, pc}
   1d498:	0007a120 	.word	0x0007a120
   1d49c:	20003ceb 	.word	0x20003ceb
   1d4a0:	20003ca8 	.word	0x20003ca8
   1d4a4:	00025bfd 	.word	0x00025bfd

0001d4a8 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1d4a8:	b590      	push	{r4, r7, lr}
   1d4aa:	b083      	sub	sp, #12
   1d4ac:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1d4ae:	1dbb      	adds	r3, r7, #6
   1d4b0:	22ff      	movs	r2, #255	; 0xff
   1d4b2:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1d4b4:	1dbb      	adds	r3, r7, #6
   1d4b6:	881b      	ldrh	r3, [r3, #0]
   1d4b8:	1d39      	adds	r1, r7, #4
   1d4ba:	4804      	ldr	r0, [pc, #16]	; (1d4cc <sd_mmc_spi_stop_read_block+0x24>)
   1d4bc:	2202      	movs	r2, #2
   1d4be:	4c04      	ldr	r4, [pc, #16]	; (1d4d0 <sd_mmc_spi_stop_read_block+0x28>)
   1d4c0:	47a0      	blx	r4
			dummy);
}
   1d4c2:	46c0      	nop			; (mov r8, r8)
   1d4c4:	46bd      	mov	sp, r7
   1d4c6:	b003      	add	sp, #12
   1d4c8:	bd90      	pop	{r4, r7, pc}
   1d4ca:	46c0      	nop			; (mov r8, r8)
   1d4cc:	20003ca8 	.word	0x20003ca8
   1d4d0:	00025bfd 	.word	0x00025bfd

0001d4d4 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1d4d4:	b580      	push	{r7, lr}
   1d4d6:	b082      	sub	sp, #8
   1d4d8:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1d4da:	1dfb      	adds	r3, r7, #7
   1d4dc:	22ff      	movs	r2, #255	; 0xff
   1d4de:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1d4e0:	1df9      	adds	r1, r7, #7
   1d4e2:	4b0d      	ldr	r3, [pc, #52]	; (1d518 <sd_mmc_spi_start_write_block+0x44>)
   1d4e4:	2201      	movs	r2, #1
   1d4e6:	0018      	movs	r0, r3
   1d4e8:	4b0c      	ldr	r3, [pc, #48]	; (1d51c <sd_mmc_spi_start_write_block+0x48>)
   1d4ea:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1d4ec:	4b0c      	ldr	r3, [pc, #48]	; (1d520 <sd_mmc_spi_start_write_block+0x4c>)
   1d4ee:	881b      	ldrh	r3, [r3, #0]
   1d4f0:	2b01      	cmp	r3, #1
   1d4f2:	d103      	bne.n	1d4fc <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1d4f4:	1dbb      	adds	r3, r7, #6
   1d4f6:	22fe      	movs	r2, #254	; 0xfe
   1d4f8:	701a      	strb	r2, [r3, #0]
   1d4fa:	e002      	b.n	1d502 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1d4fc:	1dbb      	adds	r3, r7, #6
   1d4fe:	22fc      	movs	r2, #252	; 0xfc
   1d500:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1d502:	1db9      	adds	r1, r7, #6
   1d504:	4b04      	ldr	r3, [pc, #16]	; (1d518 <sd_mmc_spi_start_write_block+0x44>)
   1d506:	2201      	movs	r2, #1
   1d508:	0018      	movs	r0, r3
   1d50a:	4b04      	ldr	r3, [pc, #16]	; (1d51c <sd_mmc_spi_start_write_block+0x48>)
   1d50c:	4798      	blx	r3
}
   1d50e:	46c0      	nop			; (mov r8, r8)
   1d510:	46bd      	mov	sp, r7
   1d512:	b002      	add	sp, #8
   1d514:	bd80      	pop	{r7, pc}
   1d516:	46c0      	nop			; (mov r8, r8)
   1d518:	20003ca8 	.word	0x20003ca8
   1d51c:	00025e21 	.word	0x00025e21
   1d520:	20003cf6 	.word	0x20003cf6

0001d524 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1d524:	b590      	push	{r4, r7, lr}
   1d526:	b083      	sub	sp, #12
   1d528:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1d52a:	1dbb      	adds	r3, r7, #6
   1d52c:	22ff      	movs	r2, #255	; 0xff
   1d52e:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1d530:	1cbb      	adds	r3, r7, #2
   1d532:	2201      	movs	r2, #1
   1d534:	4252      	negs	r2, r2
   1d536:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1d538:	1cb9      	adds	r1, r7, #2
   1d53a:	4b1b      	ldr	r3, [pc, #108]	; (1d5a8 <sd_mmc_spi_stop_write_block+0x84>)
   1d53c:	2202      	movs	r2, #2
   1d53e:	0018      	movs	r0, r3
   1d540:	4b1a      	ldr	r3, [pc, #104]	; (1d5ac <sd_mmc_spi_stop_write_block+0x88>)
   1d542:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1d544:	1dbb      	adds	r3, r7, #6
   1d546:	881b      	ldrh	r3, [r3, #0]
   1d548:	1d79      	adds	r1, r7, #5
   1d54a:	4817      	ldr	r0, [pc, #92]	; (1d5a8 <sd_mmc_spi_stop_write_block+0x84>)
   1d54c:	2201      	movs	r2, #1
   1d54e:	4c18      	ldr	r4, [pc, #96]	; (1d5b0 <sd_mmc_spi_stop_write_block+0x8c>)
   1d550:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1d552:	1d7b      	adds	r3, r7, #5
   1d554:	781b      	ldrb	r3, [r3, #0]
   1d556:	001a      	movs	r2, r3
   1d558:	2310      	movs	r3, #16
   1d55a:	4013      	ands	r3, r2
   1d55c:	d105      	bne.n	1d56a <sd_mmc_spi_stop_write_block+0x46>
   1d55e:	1d7b      	adds	r3, r7, #5
   1d560:	781b      	ldrb	r3, [r3, #0]
   1d562:	001a      	movs	r2, r3
   1d564:	2301      	movs	r3, #1
   1d566:	4013      	ands	r3, r2
   1d568:	d104      	bne.n	1d574 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1d56a:	4b12      	ldr	r3, [pc, #72]	; (1d5b4 <sd_mmc_spi_stop_write_block+0x90>)
   1d56c:	2201      	movs	r2, #1
   1d56e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1d570:	2300      	movs	r3, #0
   1d572:	e014      	b.n	1d59e <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1d574:	1d7b      	adds	r3, r7, #5
   1d576:	781b      	ldrb	r3, [r3, #0]
   1d578:	001a      	movs	r2, r3
   1d57a:	231e      	movs	r3, #30
   1d57c:	4013      	ands	r3, r2
   1d57e:	2b04      	cmp	r3, #4
   1d580:	d00b      	beq.n	1d59a <sd_mmc_spi_stop_write_block+0x76>
   1d582:	2b0a      	cmp	r3, #10
   1d584:	d104      	bne.n	1d590 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1d586:	4b0b      	ldr	r3, [pc, #44]	; (1d5b4 <sd_mmc_spi_stop_write_block+0x90>)
   1d588:	2208      	movs	r2, #8
   1d58a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1d58c:	2300      	movs	r3, #0
   1d58e:	e006      	b.n	1d59e <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1d590:	4b08      	ldr	r3, [pc, #32]	; (1d5b4 <sd_mmc_spi_stop_write_block+0x90>)
   1d592:	220a      	movs	r2, #10
   1d594:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1d596:	2300      	movs	r3, #0
   1d598:	e001      	b.n	1d59e <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1d59a:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1d59c:	2301      	movs	r3, #1
}
   1d59e:	0018      	movs	r0, r3
   1d5a0:	46bd      	mov	sp, r7
   1d5a2:	b003      	add	sp, #12
   1d5a4:	bd90      	pop	{r4, r7, pc}
   1d5a6:	46c0      	nop			; (mov r8, r8)
   1d5a8:	20003ca8 	.word	0x20003ca8
   1d5ac:	00025e21 	.word	0x00025e21
   1d5b0:	00025bfd 	.word	0x00025bfd
   1d5b4:	20003ceb 	.word	0x20003ceb

0001d5b8 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1d5b8:	b590      	push	{r4, r7, lr}
   1d5ba:	b083      	sub	sp, #12
   1d5bc:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1d5be:	4b1d      	ldr	r3, [pc, #116]	; (1d634 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1d5c0:	881b      	ldrh	r3, [r3, #0]
   1d5c2:	2b01      	cmp	r3, #1
   1d5c4:	d101      	bne.n	1d5ca <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1d5c6:	2301      	movs	r3, #1
   1d5c8:	e030      	b.n	1d62c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1d5ca:	4b1a      	ldr	r3, [pc, #104]	; (1d634 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1d5cc:	881b      	ldrh	r3, [r3, #0]
   1d5ce:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1d5d0:	4b19      	ldr	r3, [pc, #100]	; (1d638 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1d5d2:	681a      	ldr	r2, [r3, #0]
   1d5d4:	4b19      	ldr	r3, [pc, #100]	; (1d63c <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1d5d6:	881b      	ldrh	r3, [r3, #0]
   1d5d8:	0019      	movs	r1, r3
   1d5da:	4b19      	ldr	r3, [pc, #100]	; (1d640 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1d5dc:	0010      	movs	r0, r2
   1d5de:	4798      	blx	r3
   1d5e0:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1d5e2:	429c      	cmp	r4, r3
   1d5e4:	d901      	bls.n	1d5ea <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1d5e6:	2301      	movs	r3, #1
   1d5e8:	e020      	b.n	1d62c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1d5ea:	1dfb      	adds	r3, r7, #7
   1d5ec:	22ff      	movs	r2, #255	; 0xff
   1d5ee:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1d5f0:	1df9      	adds	r1, r7, #7
   1d5f2:	4b14      	ldr	r3, [pc, #80]	; (1d644 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1d5f4:	2201      	movs	r2, #1
   1d5f6:	0018      	movs	r0, r3
   1d5f8:	4b13      	ldr	r3, [pc, #76]	; (1d648 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1d5fa:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1d5fc:	1dfb      	adds	r3, r7, #7
   1d5fe:	22fd      	movs	r2, #253	; 0xfd
   1d600:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1d602:	1df9      	adds	r1, r7, #7
   1d604:	4b0f      	ldr	r3, [pc, #60]	; (1d644 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1d606:	2201      	movs	r2, #1
   1d608:	0018      	movs	r0, r3
   1d60a:	4b0f      	ldr	r3, [pc, #60]	; (1d648 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1d60c:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1d60e:	4b0f      	ldr	r3, [pc, #60]	; (1d64c <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1d610:	4798      	blx	r3
   1d612:	0003      	movs	r3, r0
   1d614:	001a      	movs	r2, r3
   1d616:	2301      	movs	r3, #1
   1d618:	4053      	eors	r3, r2
   1d61a:	b2db      	uxtb	r3, r3
   1d61c:	2b00      	cmp	r3, #0
   1d61e:	d004      	beq.n	1d62a <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1d620:	4b0b      	ldr	r3, [pc, #44]	; (1d650 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1d622:	2205      	movs	r2, #5
   1d624:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1d626:	2300      	movs	r3, #0
   1d628:	e000      	b.n	1d62c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1d62a:	2301      	movs	r3, #1
}
   1d62c:	0018      	movs	r0, r3
   1d62e:	46bd      	mov	sp, r7
   1d630:	b003      	add	sp, #12
   1d632:	bd90      	pop	{r4, r7, pc}
   1d634:	20003cf6 	.word	0x20003cf6
   1d638:	20003cf0 	.word	0x20003cf0
   1d63c:	20003cf4 	.word	0x20003cf4
   1d640:	000304e9 	.word	0x000304e9
   1d644:	20003ca8 	.word	0x20003ca8
   1d648:	00025e21 	.word	0x00025e21
   1d64c:	0001d3b9 	.word	0x0001d3b9
   1d650:	20003ceb 	.word	0x20003ceb

0001d654 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1d654:	b580      	push	{r7, lr}
   1d656:	b090      	sub	sp, #64	; 0x40
   1d658:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1d65a:	4b1f      	ldr	r3, [pc, #124]	; (1d6d8 <sd_mmc_spi_init+0x84>)
   1d65c:	2200      	movs	r2, #0
   1d65e:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1d660:	233c      	movs	r3, #60	; 0x3c
   1d662:	18fb      	adds	r3, r7, r3
   1d664:	0018      	movs	r0, r3
   1d666:	4b1d      	ldr	r3, [pc, #116]	; (1d6dc <sd_mmc_spi_init+0x88>)
   1d668:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1d66a:	1d3b      	adds	r3, r7, #4
   1d66c:	0018      	movs	r0, r3
   1d66e:	4b1c      	ldr	r3, [pc, #112]	; (1d6e0 <sd_mmc_spi_init+0x8c>)
   1d670:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1d672:	1d3b      	adds	r3, r7, #4
   1d674:	2280      	movs	r2, #128	; 0x80
   1d676:	0252      	lsls	r2, r2, #9
   1d678:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1d67a:	1d3b      	adds	r3, r7, #4
   1d67c:	4a19      	ldr	r2, [pc, #100]	; (1d6e4 <sd_mmc_spi_init+0x90>)
   1d67e:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1d680:	1d3b      	adds	r3, r7, #4
   1d682:	4a19      	ldr	r2, [pc, #100]	; (1d6e8 <sd_mmc_spi_init+0x94>)
   1d684:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1d686:	1d3b      	adds	r3, r7, #4
   1d688:	4a18      	ldr	r2, [pc, #96]	; (1d6ec <sd_mmc_spi_init+0x98>)
   1d68a:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1d68c:	1d3b      	adds	r3, r7, #4
   1d68e:	4a18      	ldr	r2, [pc, #96]	; (1d6f0 <sd_mmc_spi_init+0x9c>)
   1d690:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1d692:	1d3b      	adds	r3, r7, #4
   1d694:	2224      	movs	r2, #36	; 0x24
   1d696:	2100      	movs	r1, #0
   1d698:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1d69a:	1d3b      	adds	r3, r7, #4
   1d69c:	4a15      	ldr	r2, [pc, #84]	; (1d6f4 <sd_mmc_spi_init+0xa0>)
   1d69e:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1d6a0:	1d3a      	adds	r2, r7, #4
   1d6a2:	4915      	ldr	r1, [pc, #84]	; (1d6f8 <sd_mmc_spi_init+0xa4>)
   1d6a4:	4b15      	ldr	r3, [pc, #84]	; (1d6fc <sd_mmc_spi_init+0xa8>)
   1d6a6:	0018      	movs	r0, r3
   1d6a8:	4b15      	ldr	r3, [pc, #84]	; (1d700 <sd_mmc_spi_init+0xac>)
   1d6aa:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1d6ac:	4b13      	ldr	r3, [pc, #76]	; (1d6fc <sd_mmc_spi_init+0xa8>)
   1d6ae:	0018      	movs	r0, r3
   1d6b0:	4b14      	ldr	r3, [pc, #80]	; (1d704 <sd_mmc_spi_init+0xb0>)
   1d6b2:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1d6b4:	4b14      	ldr	r3, [pc, #80]	; (1d708 <sd_mmc_spi_init+0xb4>)
   1d6b6:	0018      	movs	r0, r3
   1d6b8:	4b14      	ldr	r3, [pc, #80]	; (1d70c <sd_mmc_spi_init+0xb8>)
   1d6ba:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1d6bc:	4b14      	ldr	r3, [pc, #80]	; (1d710 <sd_mmc_spi_init+0xbc>)
   1d6be:	781a      	ldrb	r2, [r3, #0]
   1d6c0:	4b11      	ldr	r3, [pc, #68]	; (1d708 <sd_mmc_spi_init+0xb4>)
   1d6c2:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1d6c4:	4a10      	ldr	r2, [pc, #64]	; (1d708 <sd_mmc_spi_init+0xb4>)
   1d6c6:	4b13      	ldr	r3, [pc, #76]	; (1d714 <sd_mmc_spi_init+0xc0>)
   1d6c8:	0011      	movs	r1, r2
   1d6ca:	0018      	movs	r0, r3
   1d6cc:	4b12      	ldr	r3, [pc, #72]	; (1d718 <sd_mmc_spi_init+0xc4>)
   1d6ce:	4798      	blx	r3
}
   1d6d0:	46c0      	nop			; (mov r8, r8)
   1d6d2:	46bd      	mov	sp, r7
   1d6d4:	b010      	add	sp, #64	; 0x40
   1d6d6:	bd80      	pop	{r7, pc}
   1d6d8:	20003ceb 	.word	0x20003ceb
   1d6dc:	0001d109 	.word	0x0001d109
   1d6e0:	0001d1a1 	.word	0x0001d1a1
   1d6e4:	00100002 	.word	0x00100002
   1d6e8:	00110002 	.word	0x00110002
   1d6ec:	00120002 	.word	0x00120002
   1d6f0:	00130002 	.word	0x00130002
   1d6f4:	00061a80 	.word	0x00061a80
   1d6f8:	42000c00 	.word	0x42000c00
   1d6fc:	20003ca8 	.word	0x20003ca8
   1d700:	00025a6d 	.word	0x00025a6d
   1d704:	0001d2ad 	.word	0x0001d2ad
   1d708:	20003ce8 	.word	0x20003ce8
   1d70c:	0001d225 	.word	0x0001d225
   1d710:	200000f8 	.word	0x200000f8
   1d714:	20003ce4 	.word	0x20003ce4
   1d718:	0001d249 	.word	0x0001d249

0001d71c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1d71c:	b590      	push	{r4, r7, lr}
   1d71e:	b083      	sub	sp, #12
   1d720:	af00      	add	r7, sp, #0
   1d722:	0004      	movs	r4, r0
   1d724:	6039      	str	r1, [r7, #0]
   1d726:	0010      	movs	r0, r2
   1d728:	0019      	movs	r1, r3
   1d72a:	1dfb      	adds	r3, r7, #7
   1d72c:	1c22      	adds	r2, r4, #0
   1d72e:	701a      	strb	r2, [r3, #0]
   1d730:	1dbb      	adds	r3, r7, #6
   1d732:	1c02      	adds	r2, r0, #0
   1d734:	701a      	strb	r2, [r3, #0]
   1d736:	1d7b      	adds	r3, r7, #5
   1d738:	1c0a      	adds	r2, r1, #0
   1d73a:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1d73c:	4b13      	ldr	r3, [pc, #76]	; (1d78c <sd_mmc_spi_select_device+0x70>)
   1d73e:	2200      	movs	r2, #0
   1d740:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1d742:	683b      	ldr	r3, [r7, #0]
   1d744:	4a12      	ldr	r2, [pc, #72]	; (1d790 <sd_mmc_spi_select_device+0x74>)
   1d746:	4293      	cmp	r3, r2
   1d748:	d907      	bls.n	1d75a <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1d74a:	4b11      	ldr	r3, [pc, #68]	; (1d790 <sd_mmc_spi_select_device+0x74>)
   1d74c:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1d74e:	e004      	b.n	1d75a <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1d750:	683b      	ldr	r3, [r7, #0]
   1d752:	08db      	lsrs	r3, r3, #3
   1d754:	683a      	ldr	r2, [r7, #0]
   1d756:	1ad3      	subs	r3, r2, r3
   1d758:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1d75a:	683a      	ldr	r2, [r7, #0]
   1d75c:	4b0d      	ldr	r3, [pc, #52]	; (1d794 <sd_mmc_spi_select_device+0x78>)
   1d75e:	0011      	movs	r1, r2
   1d760:	0018      	movs	r0, r3
   1d762:	4b0d      	ldr	r3, [pc, #52]	; (1d798 <sd_mmc_spi_select_device+0x7c>)
   1d764:	4798      	blx	r3
   1d766:	0003      	movs	r3, r0
   1d768:	2b17      	cmp	r3, #23
   1d76a:	d0f1      	beq.n	1d750 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1d76c:	1dfb      	adds	r3, r7, #7
   1d76e:	781a      	ldrb	r2, [r3, #0]
   1d770:	0013      	movs	r3, r2
   1d772:	005b      	lsls	r3, r3, #1
   1d774:	189b      	adds	r3, r3, r2
   1d776:	4a09      	ldr	r2, [pc, #36]	; (1d79c <sd_mmc_spi_select_device+0x80>)
   1d778:	1899      	adds	r1, r3, r2
   1d77a:	4b06      	ldr	r3, [pc, #24]	; (1d794 <sd_mmc_spi_select_device+0x78>)
   1d77c:	2201      	movs	r2, #1
   1d77e:	0018      	movs	r0, r3
   1d780:	4b07      	ldr	r3, [pc, #28]	; (1d7a0 <sd_mmc_spi_select_device+0x84>)
   1d782:	4798      	blx	r3
}
   1d784:	46c0      	nop			; (mov r8, r8)
   1d786:	46bd      	mov	sp, r7
   1d788:	b003      	add	sp, #12
   1d78a:	bd90      	pop	{r4, r7, pc}
   1d78c:	20003ceb 	.word	0x20003ceb
   1d790:	00989680 	.word	0x00989680
   1d794:	20003ca8 	.word	0x20003ca8
   1d798:	00025795 	.word	0x00025795
   1d79c:	20003ce4 	.word	0x20003ce4
   1d7a0:	00025d31 	.word	0x00025d31

0001d7a4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1d7a4:	b580      	push	{r7, lr}
   1d7a6:	b082      	sub	sp, #8
   1d7a8:	af00      	add	r7, sp, #0
   1d7aa:	0002      	movs	r2, r0
   1d7ac:	1dfb      	adds	r3, r7, #7
   1d7ae:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1d7b0:	4b09      	ldr	r3, [pc, #36]	; (1d7d8 <sd_mmc_spi_deselect_device+0x34>)
   1d7b2:	2200      	movs	r2, #0
   1d7b4:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1d7b6:	1dfb      	adds	r3, r7, #7
   1d7b8:	781a      	ldrb	r2, [r3, #0]
   1d7ba:	0013      	movs	r3, r2
   1d7bc:	005b      	lsls	r3, r3, #1
   1d7be:	189b      	adds	r3, r3, r2
   1d7c0:	4a06      	ldr	r2, [pc, #24]	; (1d7dc <sd_mmc_spi_deselect_device+0x38>)
   1d7c2:	1899      	adds	r1, r3, r2
   1d7c4:	4b06      	ldr	r3, [pc, #24]	; (1d7e0 <sd_mmc_spi_deselect_device+0x3c>)
   1d7c6:	2200      	movs	r2, #0
   1d7c8:	0018      	movs	r0, r3
   1d7ca:	4b06      	ldr	r3, [pc, #24]	; (1d7e4 <sd_mmc_spi_deselect_device+0x40>)
   1d7cc:	4798      	blx	r3
}
   1d7ce:	46c0      	nop			; (mov r8, r8)
   1d7d0:	46bd      	mov	sp, r7
   1d7d2:	b002      	add	sp, #8
   1d7d4:	bd80      	pop	{r7, pc}
   1d7d6:	46c0      	nop			; (mov r8, r8)
   1d7d8:	20003ceb 	.word	0x20003ceb
   1d7dc:	20003ce4 	.word	0x20003ce4
   1d7e0:	20003ca8 	.word	0x20003ca8
   1d7e4:	00025d31 	.word	0x00025d31

0001d7e8 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1d7e8:	b580      	push	{r7, lr}
   1d7ea:	b082      	sub	sp, #8
   1d7ec:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1d7ee:	1dbb      	adds	r3, r7, #6
   1d7f0:	22ff      	movs	r2, #255	; 0xff
   1d7f2:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1d7f4:	4b0c      	ldr	r3, [pc, #48]	; (1d828 <sd_mmc_spi_send_clock+0x40>)
   1d7f6:	2200      	movs	r2, #0
   1d7f8:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1d7fa:	1dfb      	adds	r3, r7, #7
   1d7fc:	2200      	movs	r2, #0
   1d7fe:	701a      	strb	r2, [r3, #0]
   1d800:	e00a      	b.n	1d818 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1d802:	1db9      	adds	r1, r7, #6
   1d804:	4b09      	ldr	r3, [pc, #36]	; (1d82c <sd_mmc_spi_send_clock+0x44>)
   1d806:	2201      	movs	r2, #1
   1d808:	0018      	movs	r0, r3
   1d80a:	4b09      	ldr	r3, [pc, #36]	; (1d830 <sd_mmc_spi_send_clock+0x48>)
   1d80c:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1d80e:	1dfb      	adds	r3, r7, #7
   1d810:	781a      	ldrb	r2, [r3, #0]
   1d812:	1dfb      	adds	r3, r7, #7
   1d814:	3201      	adds	r2, #1
   1d816:	701a      	strb	r2, [r3, #0]
   1d818:	1dfb      	adds	r3, r7, #7
   1d81a:	781b      	ldrb	r3, [r3, #0]
   1d81c:	2b09      	cmp	r3, #9
   1d81e:	d9f0      	bls.n	1d802 <sd_mmc_spi_send_clock+0x1a>
	}
}
   1d820:	46c0      	nop			; (mov r8, r8)
   1d822:	46bd      	mov	sp, r7
   1d824:	b002      	add	sp, #8
   1d826:	bd80      	pop	{r7, pc}
   1d828:	20003ceb 	.word	0x20003ceb
   1d82c:	20003ca8 	.word	0x20003ca8
   1d830:	00025e21 	.word	0x00025e21

0001d834 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1d834:	b590      	push	{r4, r7, lr}
   1d836:	b085      	sub	sp, #20
   1d838:	af02      	add	r7, sp, #8
   1d83a:	6078      	str	r0, [r7, #4]
   1d83c:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1d83e:	6839      	ldr	r1, [r7, #0]
   1d840:	6878      	ldr	r0, [r7, #4]
   1d842:	2300      	movs	r3, #0
   1d844:	9300      	str	r3, [sp, #0]
   1d846:	2300      	movs	r3, #0
   1d848:	2200      	movs	r2, #0
   1d84a:	4c03      	ldr	r4, [pc, #12]	; (1d858 <sd_mmc_spi_send_cmd+0x24>)
   1d84c:	47a0      	blx	r4
   1d84e:	0003      	movs	r3, r0
}
   1d850:	0018      	movs	r0, r3
   1d852:	46bd      	mov	sp, r7
   1d854:	b003      	add	sp, #12
   1d856:	bd90      	pop	{r4, r7, pc}
   1d858:	0001d85d 	.word	0x0001d85d

0001d85c <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1d85c:	b590      	push	{r4, r7, lr}
   1d85e:	b089      	sub	sp, #36	; 0x24
   1d860:	af00      	add	r7, sp, #0
   1d862:	60f8      	str	r0, [r7, #12]
   1d864:	60b9      	str	r1, [r7, #8]
   1d866:	0019      	movs	r1, r3
   1d868:	1dbb      	adds	r3, r7, #6
   1d86a:	801a      	strh	r2, [r3, #0]
   1d86c:	1d3b      	adds	r3, r7, #4
   1d86e:	1c0a      	adds	r2, r1, #0
   1d870:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1d872:	231b      	movs	r3, #27
   1d874:	18fb      	adds	r3, r7, r3
   1d876:	22ff      	movs	r2, #255	; 0xff
   1d878:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1d87a:	231c      	movs	r3, #28
   1d87c:	18fb      	adds	r3, r7, r3
   1d87e:	22ff      	movs	r2, #255	; 0xff
   1d880:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1d882:	4b72      	ldr	r3, [pc, #456]	; (1da4c <sd_mmc_spi_adtc_start+0x1f0>)
   1d884:	2200      	movs	r2, #0
   1d886:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1d888:	68fb      	ldr	r3, [r7, #12]
   1d88a:	b2db      	uxtb	r3, r3
   1d88c:	223f      	movs	r2, #63	; 0x3f
   1d88e:	4013      	ands	r3, r2
   1d890:	b2db      	uxtb	r3, r3
   1d892:	2240      	movs	r2, #64	; 0x40
   1d894:	4313      	orrs	r3, r2
   1d896:	b2da      	uxtb	r2, r3
   1d898:	2314      	movs	r3, #20
   1d89a:	18fb      	adds	r3, r7, r3
   1d89c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1d89e:	68bb      	ldr	r3, [r7, #8]
   1d8a0:	0e1b      	lsrs	r3, r3, #24
   1d8a2:	b2da      	uxtb	r2, r3
   1d8a4:	2314      	movs	r3, #20
   1d8a6:	18fb      	adds	r3, r7, r3
   1d8a8:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1d8aa:	68bb      	ldr	r3, [r7, #8]
   1d8ac:	0c1b      	lsrs	r3, r3, #16
   1d8ae:	b2da      	uxtb	r2, r3
   1d8b0:	2314      	movs	r3, #20
   1d8b2:	18fb      	adds	r3, r7, r3
   1d8b4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1d8b6:	68bb      	ldr	r3, [r7, #8]
   1d8b8:	0a1b      	lsrs	r3, r3, #8
   1d8ba:	b2da      	uxtb	r2, r3
   1d8bc:	2314      	movs	r3, #20
   1d8be:	18fb      	adds	r3, r7, r3
   1d8c0:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1d8c2:	68bb      	ldr	r3, [r7, #8]
   1d8c4:	b2da      	uxtb	r2, r3
   1d8c6:	2314      	movs	r3, #20
   1d8c8:	18fb      	adds	r3, r7, r3
   1d8ca:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1d8cc:	2314      	movs	r3, #20
   1d8ce:	18fb      	adds	r3, r7, r3
   1d8d0:	2105      	movs	r1, #5
   1d8d2:	0018      	movs	r0, r3
   1d8d4:	4b5e      	ldr	r3, [pc, #376]	; (1da50 <sd_mmc_spi_adtc_start+0x1f4>)
   1d8d6:	4798      	blx	r3
   1d8d8:	0003      	movs	r3, r0
   1d8da:	001a      	movs	r2, r3
   1d8dc:	2314      	movs	r3, #20
   1d8de:	18fb      	adds	r3, r7, r3
   1d8e0:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1d8e2:	231b      	movs	r3, #27
   1d8e4:	18f9      	adds	r1, r7, r3
   1d8e6:	4b5b      	ldr	r3, [pc, #364]	; (1da54 <sd_mmc_spi_adtc_start+0x1f8>)
   1d8e8:	2201      	movs	r2, #1
   1d8ea:	0018      	movs	r0, r3
   1d8ec:	4b5a      	ldr	r3, [pc, #360]	; (1da58 <sd_mmc_spi_adtc_start+0x1fc>)
   1d8ee:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1d8f0:	2314      	movs	r3, #20
   1d8f2:	18f9      	adds	r1, r7, r3
   1d8f4:	4b57      	ldr	r3, [pc, #348]	; (1da54 <sd_mmc_spi_adtc_start+0x1f8>)
   1d8f6:	2206      	movs	r2, #6
   1d8f8:	0018      	movs	r0, r3
   1d8fa:	4b57      	ldr	r3, [pc, #348]	; (1da58 <sd_mmc_spi_adtc_start+0x1fc>)
   1d8fc:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1d8fe:	2313      	movs	r3, #19
   1d900:	18fb      	adds	r3, r7, r3
   1d902:	22ff      	movs	r2, #255	; 0xff
   1d904:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1d906:	231c      	movs	r3, #28
   1d908:	18fb      	adds	r3, r7, r3
   1d90a:	881b      	ldrh	r3, [r3, #0]
   1d90c:	2213      	movs	r2, #19
   1d90e:	18b9      	adds	r1, r7, r2
   1d910:	4850      	ldr	r0, [pc, #320]	; (1da54 <sd_mmc_spi_adtc_start+0x1f8>)
   1d912:	2201      	movs	r2, #1
   1d914:	4c51      	ldr	r4, [pc, #324]	; (1da5c <sd_mmc_spi_adtc_start+0x200>)
   1d916:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1d918:	231f      	movs	r3, #31
   1d91a:	18fb      	adds	r3, r7, r3
   1d91c:	2207      	movs	r2, #7
   1d91e:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1d920:	231c      	movs	r3, #28
   1d922:	18fb      	adds	r3, r7, r3
   1d924:	881b      	ldrh	r3, [r3, #0]
   1d926:	2213      	movs	r2, #19
   1d928:	18b9      	adds	r1, r7, r2
   1d92a:	484a      	ldr	r0, [pc, #296]	; (1da54 <sd_mmc_spi_adtc_start+0x1f8>)
   1d92c:	2201      	movs	r2, #1
   1d92e:	4c4b      	ldr	r4, [pc, #300]	; (1da5c <sd_mmc_spi_adtc_start+0x200>)
   1d930:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1d932:	2313      	movs	r3, #19
   1d934:	18fb      	adds	r3, r7, r3
   1d936:	781b      	ldrb	r3, [r3, #0]
   1d938:	b25b      	sxtb	r3, r3
   1d93a:	2b00      	cmp	r3, #0
   1d93c:	da10      	bge.n	1d960 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1d93e:	231f      	movs	r3, #31
   1d940:	18fb      	adds	r3, r7, r3
   1d942:	221f      	movs	r2, #31
   1d944:	18ba      	adds	r2, r7, r2
   1d946:	7812      	ldrb	r2, [r2, #0]
   1d948:	3a01      	subs	r2, #1
   1d94a:	701a      	strb	r2, [r3, #0]
   1d94c:	231f      	movs	r3, #31
   1d94e:	18fb      	adds	r3, r7, r3
   1d950:	781b      	ldrb	r3, [r3, #0]
   1d952:	2b00      	cmp	r3, #0
   1d954:	d1e4      	bne.n	1d920 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1d956:	4b3d      	ldr	r3, [pc, #244]	; (1da4c <sd_mmc_spi_adtc_start+0x1f0>)
   1d958:	2202      	movs	r2, #2
   1d95a:	701a      	strb	r2, [r3, #0]
			return false;
   1d95c:	2300      	movs	r3, #0
   1d95e:	e070      	b.n	1da42 <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1d960:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1d962:	2313      	movs	r3, #19
   1d964:	18fb      	adds	r3, r7, r3
   1d966:	781b      	ldrb	r3, [r3, #0]
   1d968:	001a      	movs	r2, r3
   1d96a:	4b3d      	ldr	r3, [pc, #244]	; (1da60 <sd_mmc_spi_adtc_start+0x204>)
   1d96c:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1d96e:	2313      	movs	r3, #19
   1d970:	18fb      	adds	r3, r7, r3
   1d972:	781b      	ldrb	r3, [r3, #0]
   1d974:	001a      	movs	r2, r3
   1d976:	2308      	movs	r3, #8
   1d978:	4013      	ands	r3, r2
   1d97a:	d004      	beq.n	1d986 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1d97c:	4b33      	ldr	r3, [pc, #204]	; (1da4c <sd_mmc_spi_adtc_start+0x1f0>)
   1d97e:	2206      	movs	r2, #6
   1d980:	701a      	strb	r2, [r3, #0]
		return false;
   1d982:	2300      	movs	r3, #0
   1d984:	e05d      	b.n	1da42 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1d986:	2313      	movs	r3, #19
   1d988:	18fb      	adds	r3, r7, r3
   1d98a:	781b      	ldrb	r3, [r3, #0]
   1d98c:	001a      	movs	r2, r3
   1d98e:	2304      	movs	r3, #4
   1d990:	4013      	ands	r3, r2
   1d992:	d004      	beq.n	1d99e <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1d994:	4b2d      	ldr	r3, [pc, #180]	; (1da4c <sd_mmc_spi_adtc_start+0x1f0>)
   1d996:	2209      	movs	r2, #9
   1d998:	701a      	strb	r2, [r3, #0]
		return false;
   1d99a:	2300      	movs	r3, #0
   1d99c:	e051      	b.n	1da42 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1d99e:	2313      	movs	r3, #19
   1d9a0:	18fb      	adds	r3, r7, r3
   1d9a2:	781b      	ldrb	r3, [r3, #0]
   1d9a4:	001a      	movs	r2, r3
   1d9a6:	2301      	movs	r3, #1
   1d9a8:	439a      	bics	r2, r3
   1d9aa:	1e13      	subs	r3, r2, #0
   1d9ac:	d004      	beq.n	1d9b8 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1d9ae:	4b27      	ldr	r3, [pc, #156]	; (1da4c <sd_mmc_spi_adtc_start+0x1f0>)
   1d9b0:	2201      	movs	r2, #1
   1d9b2:	701a      	strb	r2, [r3, #0]
		return false;
   1d9b4:	2300      	movs	r3, #0
   1d9b6:	e044      	b.n	1da42 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1d9b8:	68fa      	ldr	r2, [r7, #12]
   1d9ba:	2380      	movs	r3, #128	; 0x80
   1d9bc:	019b      	lsls	r3, r3, #6
   1d9be:	4013      	ands	r3, r2
   1d9c0:	d00d      	beq.n	1d9de <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1d9c2:	4b28      	ldr	r3, [pc, #160]	; (1da64 <sd_mmc_spi_adtc_start+0x208>)
   1d9c4:	4798      	blx	r3
   1d9c6:	0003      	movs	r3, r0
   1d9c8:	001a      	movs	r2, r3
   1d9ca:	2301      	movs	r3, #1
   1d9cc:	4053      	eors	r3, r2
   1d9ce:	b2db      	uxtb	r3, r3
   1d9d0:	2b00      	cmp	r3, #0
   1d9d2:	d004      	beq.n	1d9de <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1d9d4:	4b1d      	ldr	r3, [pc, #116]	; (1da4c <sd_mmc_spi_adtc_start+0x1f0>)
   1d9d6:	2203      	movs	r2, #3
   1d9d8:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1d9da:	2300      	movs	r3, #0
   1d9dc:	e031      	b.n	1da42 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1d9de:	68fa      	ldr	r2, [r7, #12]
   1d9e0:	2380      	movs	r3, #128	; 0x80
   1d9e2:	009b      	lsls	r3, r3, #2
   1d9e4:	4013      	ands	r3, r2
   1d9e6:	d00e      	beq.n	1da06 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1d9e8:	4b1d      	ldr	r3, [pc, #116]	; (1da60 <sd_mmc_spi_adtc_start+0x204>)
   1d9ea:	2200      	movs	r2, #0
   1d9ec:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1d9ee:	231c      	movs	r3, #28
   1d9f0:	18fb      	adds	r3, r7, r3
   1d9f2:	881b      	ldrh	r3, [r3, #0]
   1d9f4:	491a      	ldr	r1, [pc, #104]	; (1da60 <sd_mmc_spi_adtc_start+0x204>)
   1d9f6:	4817      	ldr	r0, [pc, #92]	; (1da54 <sd_mmc_spi_adtc_start+0x1f8>)
   1d9f8:	2201      	movs	r2, #1
   1d9fa:	4c18      	ldr	r4, [pc, #96]	; (1da5c <sd_mmc_spi_adtc_start+0x200>)
   1d9fc:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1d9fe:	4b18      	ldr	r3, [pc, #96]	; (1da60 <sd_mmc_spi_adtc_start+0x204>)
   1da00:	681a      	ldr	r2, [r3, #0]
   1da02:	4b17      	ldr	r3, [pc, #92]	; (1da60 <sd_mmc_spi_adtc_start+0x204>)
   1da04:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1da06:	68fa      	ldr	r2, [r7, #12]
   1da08:	2380      	movs	r3, #128	; 0x80
   1da0a:	00db      	lsls	r3, r3, #3
   1da0c:	4013      	ands	r3, r2
   1da0e:	d00c      	beq.n	1da2a <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1da10:	231c      	movs	r3, #28
   1da12:	18fb      	adds	r3, r7, r3
   1da14:	881b      	ldrh	r3, [r3, #0]
   1da16:	4912      	ldr	r1, [pc, #72]	; (1da60 <sd_mmc_spi_adtc_start+0x204>)
   1da18:	480e      	ldr	r0, [pc, #56]	; (1da54 <sd_mmc_spi_adtc_start+0x1f8>)
   1da1a:	2204      	movs	r2, #4
   1da1c:	4c0f      	ldr	r4, [pc, #60]	; (1da5c <sd_mmc_spi_adtc_start+0x200>)
   1da1e:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1da20:	4b0f      	ldr	r3, [pc, #60]	; (1da60 <sd_mmc_spi_adtc_start+0x204>)
   1da22:	681b      	ldr	r3, [r3, #0]
   1da24:	ba1a      	rev	r2, r3
   1da26:	4b0e      	ldr	r3, [pc, #56]	; (1da60 <sd_mmc_spi_adtc_start+0x204>)
   1da28:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1da2a:	4b0f      	ldr	r3, [pc, #60]	; (1da68 <sd_mmc_spi_adtc_start+0x20c>)
   1da2c:	1dba      	adds	r2, r7, #6
   1da2e:	8812      	ldrh	r2, [r2, #0]
   1da30:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1da32:	4b0e      	ldr	r3, [pc, #56]	; (1da6c <sd_mmc_spi_adtc_start+0x210>)
   1da34:	1d3a      	adds	r2, r7, #4
   1da36:	8812      	ldrh	r2, [r2, #0]
   1da38:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1da3a:	4b0d      	ldr	r3, [pc, #52]	; (1da70 <sd_mmc_spi_adtc_start+0x214>)
   1da3c:	2200      	movs	r2, #0
   1da3e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1da40:	2301      	movs	r3, #1
}
   1da42:	0018      	movs	r0, r3
   1da44:	46bd      	mov	sp, r7
   1da46:	b009      	add	sp, #36	; 0x24
   1da48:	bd90      	pop	{r4, r7, pc}
   1da4a:	46c0      	nop			; (mov r8, r8)
   1da4c:	20003ceb 	.word	0x20003ceb
   1da50:	0001d2fd 	.word	0x0001d2fd
   1da54:	20003ca8 	.word	0x20003ca8
   1da58:	00025e21 	.word	0x00025e21
   1da5c:	00025bfd 	.word	0x00025bfd
   1da60:	20003cec 	.word	0x20003cec
   1da64:	0001d3b9 	.word	0x0001d3b9
   1da68:	20003cf4 	.word	0x20003cf4
   1da6c:	20003cf6 	.word	0x20003cf6
   1da70:	20003cf0 	.word	0x20003cf0

0001da74 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1da74:	b580      	push	{r7, lr}
   1da76:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1da78:	4b02      	ldr	r3, [pc, #8]	; (1da84 <sd_mmc_spi_get_response+0x10>)
   1da7a:	681b      	ldr	r3, [r3, #0]
}
   1da7c:	0018      	movs	r0, r3
   1da7e:	46bd      	mov	sp, r7
   1da80:	bd80      	pop	{r7, pc}
   1da82:	46c0      	nop			; (mov r8, r8)
   1da84:	20003cec 	.word	0x20003cec

0001da88 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1da88:	b590      	push	{r4, r7, lr}
   1da8a:	b085      	sub	sp, #20
   1da8c:	af00      	add	r7, sp, #0
   1da8e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1da90:	230e      	movs	r3, #14
   1da92:	18fb      	adds	r3, r7, r3
   1da94:	22ff      	movs	r2, #255	; 0xff
   1da96:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1da98:	4b1c      	ldr	r3, [pc, #112]	; (1db0c <sd_mmc_spi_read_word+0x84>)
   1da9a:	2200      	movs	r2, #0
   1da9c:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1da9e:	4b1c      	ldr	r3, [pc, #112]	; (1db10 <sd_mmc_spi_read_word+0x88>)
   1daa0:	681a      	ldr	r2, [r3, #0]
   1daa2:	4b1c      	ldr	r3, [pc, #112]	; (1db14 <sd_mmc_spi_read_word+0x8c>)
   1daa4:	881b      	ldrh	r3, [r3, #0]
   1daa6:	0019      	movs	r1, r3
   1daa8:	4b1b      	ldr	r3, [pc, #108]	; (1db18 <sd_mmc_spi_read_word+0x90>)
   1daaa:	0010      	movs	r0, r2
   1daac:	4798      	blx	r3
   1daae:	1e0b      	subs	r3, r1, #0
   1dab0:	d10a      	bne.n	1dac8 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1dab2:	4b1a      	ldr	r3, [pc, #104]	; (1db1c <sd_mmc_spi_read_word+0x94>)
   1dab4:	4798      	blx	r3
   1dab6:	0003      	movs	r3, r0
   1dab8:	001a      	movs	r2, r3
   1daba:	2301      	movs	r3, #1
   1dabc:	4053      	eors	r3, r2
   1dabe:	b2db      	uxtb	r3, r3
   1dac0:	2b00      	cmp	r3, #0
   1dac2:	d001      	beq.n	1dac8 <sd_mmc_spi_read_word+0x40>
			return false;
   1dac4:	2300      	movs	r3, #0
   1dac6:	e01d      	b.n	1db04 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1dac8:	230e      	movs	r3, #14
   1daca:	18fb      	adds	r3, r7, r3
   1dacc:	881b      	ldrh	r3, [r3, #0]
   1dace:	1d39      	adds	r1, r7, #4
   1dad0:	4813      	ldr	r0, [pc, #76]	; (1db20 <sd_mmc_spi_read_word+0x98>)
   1dad2:	2204      	movs	r2, #4
   1dad4:	4c13      	ldr	r4, [pc, #76]	; (1db24 <sd_mmc_spi_read_word+0x9c>)
   1dad6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1dad8:	687b      	ldr	r3, [r7, #4]
   1dada:	687a      	ldr	r2, [r7, #4]
   1dadc:	6812      	ldr	r2, [r2, #0]
   1dade:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1dae0:	4b0b      	ldr	r3, [pc, #44]	; (1db10 <sd_mmc_spi_read_word+0x88>)
   1dae2:	681b      	ldr	r3, [r3, #0]
   1dae4:	1d1a      	adds	r2, r3, #4
   1dae6:	4b0a      	ldr	r3, [pc, #40]	; (1db10 <sd_mmc_spi_read_word+0x88>)
   1dae8:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1daea:	4b09      	ldr	r3, [pc, #36]	; (1db10 <sd_mmc_spi_read_word+0x88>)
   1daec:	681a      	ldr	r2, [r3, #0]
   1daee:	4b09      	ldr	r3, [pc, #36]	; (1db14 <sd_mmc_spi_read_word+0x8c>)
   1daf0:	881b      	ldrh	r3, [r3, #0]
   1daf2:	0019      	movs	r1, r3
   1daf4:	4b08      	ldr	r3, [pc, #32]	; (1db18 <sd_mmc_spi_read_word+0x90>)
   1daf6:	0010      	movs	r0, r2
   1daf8:	4798      	blx	r3
   1dafa:	1e0b      	subs	r3, r1, #0
   1dafc:	d101      	bne.n	1db02 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1dafe:	4b0a      	ldr	r3, [pc, #40]	; (1db28 <sd_mmc_spi_read_word+0xa0>)
   1db00:	4798      	blx	r3
	}
	return true;
   1db02:	2301      	movs	r3, #1
}
   1db04:	0018      	movs	r0, r3
   1db06:	46bd      	mov	sp, r7
   1db08:	b005      	add	sp, #20
   1db0a:	bd90      	pop	{r4, r7, pc}
   1db0c:	20003ceb 	.word	0x20003ceb
   1db10:	20003cf0 	.word	0x20003cf0
   1db14:	20003cf4 	.word	0x20003cf4
   1db18:	000305f5 	.word	0x000305f5
   1db1c:	0001d425 	.word	0x0001d425
   1db20:	20003ca8 	.word	0x20003ca8
   1db24:	00025bfd 	.word	0x00025bfd
   1db28:	0001d4a9 	.word	0x0001d4a9

0001db2c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1db2c:	b590      	push	{r4, r7, lr}
   1db2e:	b085      	sub	sp, #20
   1db30:	af00      	add	r7, sp, #0
   1db32:	6078      	str	r0, [r7, #4]
   1db34:	000a      	movs	r2, r1
   1db36:	1cbb      	adds	r3, r7, #2
   1db38:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1db3a:	230a      	movs	r3, #10
   1db3c:	18fb      	adds	r3, r7, r3
   1db3e:	22ff      	movs	r2, #255	; 0xff
   1db40:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1db42:	4b1c      	ldr	r3, [pc, #112]	; (1dbb4 <sd_mmc_spi_start_read_blocks+0x88>)
   1db44:	2200      	movs	r2, #0
   1db46:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1db48:	2300      	movs	r3, #0
   1db4a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1db4c:	e025      	b.n	1db9a <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1db4e:	4b1a      	ldr	r3, [pc, #104]	; (1dbb8 <sd_mmc_spi_start_read_blocks+0x8c>)
   1db50:	4798      	blx	r3
   1db52:	0003      	movs	r3, r0
   1db54:	001a      	movs	r2, r3
   1db56:	2301      	movs	r3, #1
   1db58:	4053      	eors	r3, r2
   1db5a:	b2db      	uxtb	r3, r3
   1db5c:	2b00      	cmp	r3, #0
   1db5e:	d001      	beq.n	1db64 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1db60:	2300      	movs	r3, #0
   1db62:	e022      	b.n	1dbaa <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1db64:	687a      	ldr	r2, [r7, #4]
   1db66:	68fb      	ldr	r3, [r7, #12]
   1db68:	18d1      	adds	r1, r2, r3
   1db6a:	4b14      	ldr	r3, [pc, #80]	; (1dbbc <sd_mmc_spi_start_read_blocks+0x90>)
   1db6c:	881a      	ldrh	r2, [r3, #0]
   1db6e:	230a      	movs	r3, #10
   1db70:	18fb      	adds	r3, r7, r3
   1db72:	881b      	ldrh	r3, [r3, #0]
   1db74:	4812      	ldr	r0, [pc, #72]	; (1dbc0 <sd_mmc_spi_start_read_blocks+0x94>)
   1db76:	4c13      	ldr	r4, [pc, #76]	; (1dbc4 <sd_mmc_spi_start_read_blocks+0x98>)
   1db78:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1db7a:	4b10      	ldr	r3, [pc, #64]	; (1dbbc <sd_mmc_spi_start_read_blocks+0x90>)
   1db7c:	881b      	ldrh	r3, [r3, #0]
   1db7e:	001a      	movs	r2, r3
   1db80:	68fb      	ldr	r3, [r7, #12]
   1db82:	189b      	adds	r3, r3, r2
   1db84:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1db86:	4b0d      	ldr	r3, [pc, #52]	; (1dbbc <sd_mmc_spi_start_read_blocks+0x90>)
   1db88:	881b      	ldrh	r3, [r3, #0]
   1db8a:	001a      	movs	r2, r3
   1db8c:	4b0e      	ldr	r3, [pc, #56]	; (1dbc8 <sd_mmc_spi_start_read_blocks+0x9c>)
   1db8e:	681b      	ldr	r3, [r3, #0]
   1db90:	18d2      	adds	r2, r2, r3
   1db92:	4b0d      	ldr	r3, [pc, #52]	; (1dbc8 <sd_mmc_spi_start_read_blocks+0x9c>)
   1db94:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1db96:	4b0d      	ldr	r3, [pc, #52]	; (1dbcc <sd_mmc_spi_start_read_blocks+0xa0>)
   1db98:	4798      	blx	r3
	while (nb_block--) {
   1db9a:	1cbb      	adds	r3, r7, #2
   1db9c:	881b      	ldrh	r3, [r3, #0]
   1db9e:	1cba      	adds	r2, r7, #2
   1dba0:	1e59      	subs	r1, r3, #1
   1dba2:	8011      	strh	r1, [r2, #0]
   1dba4:	2b00      	cmp	r3, #0
   1dba6:	d1d2      	bne.n	1db4e <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1dba8:	2301      	movs	r3, #1
}
   1dbaa:	0018      	movs	r0, r3
   1dbac:	46bd      	mov	sp, r7
   1dbae:	b005      	add	sp, #20
   1dbb0:	bd90      	pop	{r4, r7, pc}
   1dbb2:	46c0      	nop			; (mov r8, r8)
   1dbb4:	20003ceb 	.word	0x20003ceb
   1dbb8:	0001d425 	.word	0x0001d425
   1dbbc:	20003cf4 	.word	0x20003cf4
   1dbc0:	20003ca8 	.word	0x20003ca8
   1dbc4:	00025bfd 	.word	0x00025bfd
   1dbc8:	20003cf0 	.word	0x20003cf0
   1dbcc:	0001d4a9 	.word	0x0001d4a9

0001dbd0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1dbd0:	b580      	push	{r7, lr}
   1dbd2:	af00      	add	r7, sp, #0
	return true;
   1dbd4:	2301      	movs	r3, #1
}
   1dbd6:	0018      	movs	r0, r3
   1dbd8:	46bd      	mov	sp, r7
   1dbda:	bd80      	pop	{r7, pc}

0001dbdc <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1dbdc:	b580      	push	{r7, lr}
   1dbde:	b084      	sub	sp, #16
   1dbe0:	af00      	add	r7, sp, #0
   1dbe2:	6078      	str	r0, [r7, #4]
   1dbe4:	000a      	movs	r2, r1
   1dbe6:	1cbb      	adds	r3, r7, #2
   1dbe8:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1dbea:	4b24      	ldr	r3, [pc, #144]	; (1dc7c <sd_mmc_spi_start_write_blocks+0xa0>)
   1dbec:	2200      	movs	r2, #0
   1dbee:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1dbf0:	2300      	movs	r3, #0
   1dbf2:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1dbf4:	e035      	b.n	1dc62 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1dbf6:	4b22      	ldr	r3, [pc, #136]	; (1dc80 <sd_mmc_spi_start_write_blocks+0xa4>)
   1dbf8:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1dbfa:	687a      	ldr	r2, [r7, #4]
   1dbfc:	68fb      	ldr	r3, [r7, #12]
   1dbfe:	18d1      	adds	r1, r2, r3
   1dc00:	4b20      	ldr	r3, [pc, #128]	; (1dc84 <sd_mmc_spi_start_write_blocks+0xa8>)
   1dc02:	881a      	ldrh	r2, [r3, #0]
   1dc04:	4b20      	ldr	r3, [pc, #128]	; (1dc88 <sd_mmc_spi_start_write_blocks+0xac>)
   1dc06:	0018      	movs	r0, r3
   1dc08:	4b20      	ldr	r3, [pc, #128]	; (1dc8c <sd_mmc_spi_start_write_blocks+0xb0>)
   1dc0a:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1dc0c:	4b1d      	ldr	r3, [pc, #116]	; (1dc84 <sd_mmc_spi_start_write_blocks+0xa8>)
   1dc0e:	881b      	ldrh	r3, [r3, #0]
   1dc10:	001a      	movs	r2, r3
   1dc12:	68fb      	ldr	r3, [r7, #12]
   1dc14:	189b      	adds	r3, r3, r2
   1dc16:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1dc18:	4b1a      	ldr	r3, [pc, #104]	; (1dc84 <sd_mmc_spi_start_write_blocks+0xa8>)
   1dc1a:	881b      	ldrh	r3, [r3, #0]
   1dc1c:	001a      	movs	r2, r3
   1dc1e:	4b1c      	ldr	r3, [pc, #112]	; (1dc90 <sd_mmc_spi_start_write_blocks+0xb4>)
   1dc20:	681b      	ldr	r3, [r3, #0]
   1dc22:	18d2      	adds	r2, r2, r3
   1dc24:	4b1a      	ldr	r3, [pc, #104]	; (1dc90 <sd_mmc_spi_start_write_blocks+0xb4>)
   1dc26:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1dc28:	4b1a      	ldr	r3, [pc, #104]	; (1dc94 <sd_mmc_spi_start_write_blocks+0xb8>)
   1dc2a:	4798      	blx	r3
   1dc2c:	0003      	movs	r3, r0
   1dc2e:	001a      	movs	r2, r3
   1dc30:	2301      	movs	r3, #1
   1dc32:	4053      	eors	r3, r2
   1dc34:	b2db      	uxtb	r3, r3
   1dc36:	2b00      	cmp	r3, #0
   1dc38:	d001      	beq.n	1dc3e <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1dc3a:	2300      	movs	r3, #0
   1dc3c:	e019      	b.n	1dc72 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1dc3e:	1cbb      	adds	r3, r7, #2
   1dc40:	881b      	ldrh	r3, [r3, #0]
   1dc42:	2b00      	cmp	r3, #0
   1dc44:	d00d      	beq.n	1dc62 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1dc46:	4b14      	ldr	r3, [pc, #80]	; (1dc98 <sd_mmc_spi_start_write_blocks+0xbc>)
   1dc48:	4798      	blx	r3
   1dc4a:	0003      	movs	r3, r0
   1dc4c:	001a      	movs	r2, r3
   1dc4e:	2301      	movs	r3, #1
   1dc50:	4053      	eors	r3, r2
   1dc52:	b2db      	uxtb	r3, r3
   1dc54:	2b00      	cmp	r3, #0
   1dc56:	d004      	beq.n	1dc62 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1dc58:	4b08      	ldr	r3, [pc, #32]	; (1dc7c <sd_mmc_spi_start_write_blocks+0xa0>)
   1dc5a:	2205      	movs	r2, #5
   1dc5c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1dc5e:	2300      	movs	r3, #0
   1dc60:	e007      	b.n	1dc72 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1dc62:	1cbb      	adds	r3, r7, #2
   1dc64:	881b      	ldrh	r3, [r3, #0]
   1dc66:	1cba      	adds	r2, r7, #2
   1dc68:	1e59      	subs	r1, r3, #1
   1dc6a:	8011      	strh	r1, [r2, #0]
   1dc6c:	2b00      	cmp	r3, #0
   1dc6e:	d1c2      	bne.n	1dbf6 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1dc70:	2301      	movs	r3, #1
}
   1dc72:	0018      	movs	r0, r3
   1dc74:	46bd      	mov	sp, r7
   1dc76:	b004      	add	sp, #16
   1dc78:	bd80      	pop	{r7, pc}
   1dc7a:	46c0      	nop			; (mov r8, r8)
   1dc7c:	20003ceb 	.word	0x20003ceb
   1dc80:	0001d4d5 	.word	0x0001d4d5
   1dc84:	20003cf4 	.word	0x20003cf4
   1dc88:	20003ca8 	.word	0x20003ca8
   1dc8c:	00025e21 	.word	0x00025e21
   1dc90:	20003cf0 	.word	0x20003cf0
   1dc94:	0001d525 	.word	0x0001d525
   1dc98:	0001d3b9 	.word	0x0001d3b9

0001dc9c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1dc9c:	b580      	push	{r7, lr}
   1dc9e:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1dca0:	4b09      	ldr	r3, [pc, #36]	; (1dcc8 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1dca2:	4798      	blx	r3
   1dca4:	0003      	movs	r3, r0
   1dca6:	001a      	movs	r2, r3
   1dca8:	2301      	movs	r3, #1
   1dcaa:	4053      	eors	r3, r2
   1dcac:	b2db      	uxtb	r3, r3
   1dcae:	2b00      	cmp	r3, #0
   1dcb0:	d004      	beq.n	1dcbc <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1dcb2:	4b06      	ldr	r3, [pc, #24]	; (1dccc <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1dcb4:	2205      	movs	r2, #5
   1dcb6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1dcb8:	2300      	movs	r3, #0
   1dcba:	e002      	b.n	1dcc2 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1dcbc:	4b04      	ldr	r3, [pc, #16]	; (1dcd0 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1dcbe:	4798      	blx	r3
   1dcc0:	0003      	movs	r3, r0
}
   1dcc2:	0018      	movs	r0, r3
   1dcc4:	46bd      	mov	sp, r7
   1dcc6:	bd80      	pop	{r7, pc}
   1dcc8:	0001d3b9 	.word	0x0001d3b9
   1dccc:	20003ceb 	.word	0x20003ceb
   1dcd0:	0001d5b9 	.word	0x0001d5b9

0001dcd4 <delay_init>:
   1dcd4:	b580      	push	{r7, lr}
   1dcd6:	af00      	add	r7, sp, #0
   1dcd8:	2000      	movs	r0, #0
   1dcda:	4b0f      	ldr	r3, [pc, #60]	; (1dd18 <delay_init+0x44>)
   1dcdc:	4798      	blx	r3
   1dcde:	0002      	movs	r2, r0
   1dce0:	4b0e      	ldr	r3, [pc, #56]	; (1dd1c <delay_init+0x48>)
   1dce2:	601a      	str	r2, [r3, #0]
   1dce4:	4b0d      	ldr	r3, [pc, #52]	; (1dd1c <delay_init+0x48>)
   1dce6:	6818      	ldr	r0, [r3, #0]
   1dce8:	4b0d      	ldr	r3, [pc, #52]	; (1dd20 <delay_init+0x4c>)
   1dcea:	22fa      	movs	r2, #250	; 0xfa
   1dcec:	0091      	lsls	r1, r2, #2
   1dcee:	4798      	blx	r3
   1dcf0:	0003      	movs	r3, r0
   1dcf2:	001a      	movs	r2, r3
   1dcf4:	4b09      	ldr	r3, [pc, #36]	; (1dd1c <delay_init+0x48>)
   1dcf6:	601a      	str	r2, [r3, #0]
   1dcf8:	4b08      	ldr	r3, [pc, #32]	; (1dd1c <delay_init+0x48>)
   1dcfa:	6818      	ldr	r0, [r3, #0]
   1dcfc:	4b08      	ldr	r3, [pc, #32]	; (1dd20 <delay_init+0x4c>)
   1dcfe:	22fa      	movs	r2, #250	; 0xfa
   1dd00:	0091      	lsls	r1, r2, #2
   1dd02:	4798      	blx	r3
   1dd04:	0003      	movs	r3, r0
   1dd06:	001a      	movs	r2, r3
   1dd08:	4b06      	ldr	r3, [pc, #24]	; (1dd24 <delay_init+0x50>)
   1dd0a:	601a      	str	r2, [r3, #0]
   1dd0c:	4b06      	ldr	r3, [pc, #24]	; (1dd28 <delay_init+0x54>)
   1dd0e:	2205      	movs	r2, #5
   1dd10:	601a      	str	r2, [r3, #0]
   1dd12:	46c0      	nop			; (mov r8, r8)
   1dd14:	46bd      	mov	sp, r7
   1dd16:	bd80      	pop	{r7, pc}
   1dd18:	000279a5 	.word	0x000279a5
   1dd1c:	200000fc 	.word	0x200000fc
   1dd20:	000304e9 	.word	0x000304e9
   1dd24:	20000100 	.word	0x20000100
   1dd28:	e000e010 	.word	0xe000e010

0001dd2c <system_pinmux_get_group_from_gpio_pin>:
{
   1dd2c:	b580      	push	{r7, lr}
   1dd2e:	b084      	sub	sp, #16
   1dd30:	af00      	add	r7, sp, #0
   1dd32:	0002      	movs	r2, r0
   1dd34:	1dfb      	adds	r3, r7, #7
   1dd36:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1dd38:	230f      	movs	r3, #15
   1dd3a:	18fb      	adds	r3, r7, r3
   1dd3c:	1dfa      	adds	r2, r7, #7
   1dd3e:	7812      	ldrb	r2, [r2, #0]
   1dd40:	09d2      	lsrs	r2, r2, #7
   1dd42:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1dd44:	230e      	movs	r3, #14
   1dd46:	18fb      	adds	r3, r7, r3
   1dd48:	1dfa      	adds	r2, r7, #7
   1dd4a:	7812      	ldrb	r2, [r2, #0]
   1dd4c:	0952      	lsrs	r2, r2, #5
   1dd4e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1dd50:	4b0d      	ldr	r3, [pc, #52]	; (1dd88 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1dd52:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1dd54:	230f      	movs	r3, #15
   1dd56:	18fb      	adds	r3, r7, r3
   1dd58:	781b      	ldrb	r3, [r3, #0]
   1dd5a:	2b00      	cmp	r3, #0
   1dd5c:	d10f      	bne.n	1dd7e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1dd5e:	230f      	movs	r3, #15
   1dd60:	18fb      	adds	r3, r7, r3
   1dd62:	781b      	ldrb	r3, [r3, #0]
   1dd64:	009b      	lsls	r3, r3, #2
   1dd66:	2210      	movs	r2, #16
   1dd68:	4694      	mov	ip, r2
   1dd6a:	44bc      	add	ip, r7
   1dd6c:	4463      	add	r3, ip
   1dd6e:	3b08      	subs	r3, #8
   1dd70:	681a      	ldr	r2, [r3, #0]
   1dd72:	230e      	movs	r3, #14
   1dd74:	18fb      	adds	r3, r7, r3
   1dd76:	781b      	ldrb	r3, [r3, #0]
   1dd78:	01db      	lsls	r3, r3, #7
   1dd7a:	18d3      	adds	r3, r2, r3
   1dd7c:	e000      	b.n	1dd80 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1dd7e:	2300      	movs	r3, #0
}
   1dd80:	0018      	movs	r0, r3
   1dd82:	46bd      	mov	sp, r7
   1dd84:	b004      	add	sp, #16
   1dd86:	bd80      	pop	{r7, pc}
   1dd88:	41004400 	.word	0x41004400

0001dd8c <system_interrupt_enable_global>:
{
   1dd8c:	b580      	push	{r7, lr}
   1dd8e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1dd90:	4b04      	ldr	r3, [pc, #16]	; (1dda4 <system_interrupt_enable_global+0x18>)
   1dd92:	2201      	movs	r2, #1
   1dd94:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1dd96:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   1dd9a:	b662      	cpsie	i
}
   1dd9c:	46c0      	nop			; (mov r8, r8)
   1dd9e:	46bd      	mov	sp, r7
   1dda0:	bd80      	pop	{r7, pc}
   1dda2:	46c0      	nop			; (mov r8, r8)
   1dda4:	20000106 	.word	0x20000106

0001dda8 <port_get_group_from_gpio_pin>:
{
   1dda8:	b580      	push	{r7, lr}
   1ddaa:	b082      	sub	sp, #8
   1ddac:	af00      	add	r7, sp, #0
   1ddae:	0002      	movs	r2, r0
   1ddb0:	1dfb      	adds	r3, r7, #7
   1ddb2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1ddb4:	1dfb      	adds	r3, r7, #7
   1ddb6:	781b      	ldrb	r3, [r3, #0]
   1ddb8:	0018      	movs	r0, r3
   1ddba:	4b03      	ldr	r3, [pc, #12]	; (1ddc8 <port_get_group_from_gpio_pin+0x20>)
   1ddbc:	4798      	blx	r3
   1ddbe:	0003      	movs	r3, r0
}
   1ddc0:	0018      	movs	r0, r3
   1ddc2:	46bd      	mov	sp, r7
   1ddc4:	b002      	add	sp, #8
   1ddc6:	bd80      	pop	{r7, pc}
   1ddc8:	0001dd2d 	.word	0x0001dd2d

0001ddcc <port_get_config_defaults>:
{
   1ddcc:	b580      	push	{r7, lr}
   1ddce:	b082      	sub	sp, #8
   1ddd0:	af00      	add	r7, sp, #0
   1ddd2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1ddd4:	687b      	ldr	r3, [r7, #4]
   1ddd6:	2200      	movs	r2, #0
   1ddd8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1ddda:	687b      	ldr	r3, [r7, #4]
   1dddc:	2201      	movs	r2, #1
   1ddde:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1dde0:	687b      	ldr	r3, [r7, #4]
   1dde2:	2200      	movs	r2, #0
   1dde4:	709a      	strb	r2, [r3, #2]
}
   1dde6:	46c0      	nop			; (mov r8, r8)
   1dde8:	46bd      	mov	sp, r7
   1ddea:	b002      	add	sp, #8
   1ddec:	bd80      	pop	{r7, pc}
	...

0001ddf0 <port_pin_set_output_level>:
{
   1ddf0:	b580      	push	{r7, lr}
   1ddf2:	b084      	sub	sp, #16
   1ddf4:	af00      	add	r7, sp, #0
   1ddf6:	0002      	movs	r2, r0
   1ddf8:	1dfb      	adds	r3, r7, #7
   1ddfa:	701a      	strb	r2, [r3, #0]
   1ddfc:	1dbb      	adds	r3, r7, #6
   1ddfe:	1c0a      	adds	r2, r1, #0
   1de00:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1de02:	1dfb      	adds	r3, r7, #7
   1de04:	781b      	ldrb	r3, [r3, #0]
   1de06:	0018      	movs	r0, r3
   1de08:	4b0d      	ldr	r3, [pc, #52]	; (1de40 <port_pin_set_output_level+0x50>)
   1de0a:	4798      	blx	r3
   1de0c:	0003      	movs	r3, r0
   1de0e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1de10:	1dfb      	adds	r3, r7, #7
   1de12:	781b      	ldrb	r3, [r3, #0]
   1de14:	221f      	movs	r2, #31
   1de16:	4013      	ands	r3, r2
   1de18:	2201      	movs	r2, #1
   1de1a:	409a      	lsls	r2, r3
   1de1c:	0013      	movs	r3, r2
   1de1e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1de20:	1dbb      	adds	r3, r7, #6
   1de22:	781b      	ldrb	r3, [r3, #0]
   1de24:	2b00      	cmp	r3, #0
   1de26:	d003      	beq.n	1de30 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1de28:	68fb      	ldr	r3, [r7, #12]
   1de2a:	68ba      	ldr	r2, [r7, #8]
   1de2c:	619a      	str	r2, [r3, #24]
}
   1de2e:	e002      	b.n	1de36 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1de30:	68fb      	ldr	r3, [r7, #12]
   1de32:	68ba      	ldr	r2, [r7, #8]
   1de34:	615a      	str	r2, [r3, #20]
}
   1de36:	46c0      	nop			; (mov r8, r8)
   1de38:	46bd      	mov	sp, r7
   1de3a:	b004      	add	sp, #16
   1de3c:	bd80      	pop	{r7, pc}
   1de3e:	46c0      	nop			; (mov r8, r8)
   1de40:	0001dda9 	.word	0x0001dda9

0001de44 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1de44:	b580      	push	{r7, lr}
   1de46:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1de48:	4b04      	ldr	r3, [pc, #16]	; (1de5c <chip_isr+0x18>)
   1de4a:	681b      	ldr	r3, [r3, #0]
   1de4c:	2b00      	cmp	r3, #0
   1de4e:	d002      	beq.n	1de56 <chip_isr+0x12>
		gpfIsr();
   1de50:	4b02      	ldr	r3, [pc, #8]	; (1de5c <chip_isr+0x18>)
   1de52:	681b      	ldr	r3, [r3, #0]
   1de54:	4798      	blx	r3
	}
}
   1de56:	46c0      	nop			; (mov r8, r8)
   1de58:	46bd      	mov	sp, r7
   1de5a:	bd80      	pop	{r7, pc}
   1de5c:	20003cf8 	.word	0x20003cf8

0001de60 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1de60:	b580      	push	{r7, lr}
   1de62:	b082      	sub	sp, #8
   1de64:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1de66:	1d3b      	adds	r3, r7, #4
   1de68:	0018      	movs	r0, r3
   1de6a:	4b10      	ldr	r3, [pc, #64]	; (1deac <init_chip_pins+0x4c>)
   1de6c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1de6e:	1d3b      	adds	r3, r7, #4
   1de70:	2201      	movs	r2, #1
   1de72:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1de74:	1d3b      	adds	r3, r7, #4
   1de76:	0019      	movs	r1, r3
   1de78:	201b      	movs	r0, #27
   1de7a:	4b0d      	ldr	r3, [pc, #52]	; (1deb0 <init_chip_pins+0x50>)
   1de7c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1de7e:	1d3b      	adds	r3, r7, #4
   1de80:	0019      	movs	r1, r3
   1de82:	201c      	movs	r0, #28
   1de84:	4b0a      	ldr	r3, [pc, #40]	; (1deb0 <init_chip_pins+0x50>)
   1de86:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1de88:	1d3b      	adds	r3, r7, #4
   1de8a:	0019      	movs	r1, r3
   1de8c:	2028      	movs	r0, #40	; 0x28
   1de8e:	4b08      	ldr	r3, [pc, #32]	; (1deb0 <init_chip_pins+0x50>)
   1de90:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1de92:	2100      	movs	r1, #0
   1de94:	201c      	movs	r0, #28
   1de96:	4b07      	ldr	r3, [pc, #28]	; (1deb4 <init_chip_pins+0x54>)
   1de98:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1de9a:	2100      	movs	r1, #0
   1de9c:	201b      	movs	r0, #27
   1de9e:	4b05      	ldr	r3, [pc, #20]	; (1deb4 <init_chip_pins+0x54>)
   1dea0:	4798      	blx	r3
}
   1dea2:	46c0      	nop			; (mov r8, r8)
   1dea4:	46bd      	mov	sp, r7
   1dea6:	b002      	add	sp, #8
   1dea8:	bd80      	pop	{r7, pc}
   1deaa:	46c0      	nop			; (mov r8, r8)
   1deac:	0001ddcd 	.word	0x0001ddcd
   1deb0:	000245ed 	.word	0x000245ed
   1deb4:	0001ddf1 	.word	0x0001ddf1

0001deb8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1deb8:	b580      	push	{r7, lr}
   1deba:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1debc:	4b0b      	ldr	r3, [pc, #44]	; (1deec <nm_bsp_init+0x34>)
   1debe:	2200      	movs	r2, #0
   1dec0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1dec2:	4b0b      	ldr	r3, [pc, #44]	; (1def0 <nm_bsp_init+0x38>)
   1dec4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1dec6:	4b0b      	ldr	r3, [pc, #44]	; (1def4 <nm_bsp_init+0x3c>)
   1dec8:	681b      	ldr	r3, [r3, #0]
   1deca:	2201      	movs	r2, #1
   1decc:	4013      	ands	r3, r2
   1dece:	d004      	beq.n	1deda <nm_bsp_init+0x22>
   1ded0:	4b08      	ldr	r3, [pc, #32]	; (1def4 <nm_bsp_init+0x3c>)
   1ded2:	681b      	ldr	r3, [r3, #0]
   1ded4:	2202      	movs	r2, #2
   1ded6:	4013      	ands	r3, r2
   1ded8:	d101      	bne.n	1dede <nm_bsp_init+0x26>
	    delay_init();
   1deda:	4b07      	ldr	r3, [pc, #28]	; (1def8 <nm_bsp_init+0x40>)
   1dedc:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1dede:	4b07      	ldr	r3, [pc, #28]	; (1defc <nm_bsp_init+0x44>)
   1dee0:	4798      	blx	r3

	return M2M_SUCCESS;
   1dee2:	2300      	movs	r3, #0
}
   1dee4:	0018      	movs	r0, r3
   1dee6:	46bd      	mov	sp, r7
   1dee8:	bd80      	pop	{r7, pc}
   1deea:	46c0      	nop			; (mov r8, r8)
   1deec:	20003cf8 	.word	0x20003cf8
   1def0:	0001de61 	.word	0x0001de61
   1def4:	e000e010 	.word	0xe000e010
   1def8:	0001dcd5 	.word	0x0001dcd5
   1defc:	0001dd8d 	.word	0x0001dd8d

0001df00 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1df00:	b580      	push	{r7, lr}
   1df02:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1df04:	2100      	movs	r1, #0
   1df06:	201c      	movs	r0, #28
   1df08:	4b0b      	ldr	r3, [pc, #44]	; (1df38 <nm_bsp_reset+0x38>)
   1df0a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1df0c:	2100      	movs	r1, #0
   1df0e:	201b      	movs	r0, #27
   1df10:	4b09      	ldr	r3, [pc, #36]	; (1df38 <nm_bsp_reset+0x38>)
   1df12:	4798      	blx	r3
	nm_bsp_sleep(1);
   1df14:	2001      	movs	r0, #1
   1df16:	4b09      	ldr	r3, [pc, #36]	; (1df3c <nm_bsp_reset+0x3c>)
   1df18:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   1df1a:	2101      	movs	r1, #1
   1df1c:	201c      	movs	r0, #28
   1df1e:	4b06      	ldr	r3, [pc, #24]	; (1df38 <nm_bsp_reset+0x38>)
   1df20:	4798      	blx	r3
	nm_bsp_sleep(10);
   1df22:	200a      	movs	r0, #10
   1df24:	4b05      	ldr	r3, [pc, #20]	; (1df3c <nm_bsp_reset+0x3c>)
   1df26:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   1df28:	2101      	movs	r1, #1
   1df2a:	201b      	movs	r0, #27
   1df2c:	4b02      	ldr	r3, [pc, #8]	; (1df38 <nm_bsp_reset+0x38>)
   1df2e:	4798      	blx	r3
}
   1df30:	46c0      	nop			; (mov r8, r8)
   1df32:	46bd      	mov	sp, r7
   1df34:	bd80      	pop	{r7, pc}
   1df36:	46c0      	nop			; (mov r8, r8)
   1df38:	0001ddf1 	.word	0x0001ddf1
   1df3c:	0001df41 	.word	0x0001df41

0001df40 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1df40:	b580      	push	{r7, lr}
   1df42:	b082      	sub	sp, #8
   1df44:	af00      	add	r7, sp, #0
   1df46:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1df48:	687b      	ldr	r3, [r7, #4]
   1df4a:	0018      	movs	r0, r3
   1df4c:	4b02      	ldr	r3, [pc, #8]	; (1df58 <nm_bsp_sleep+0x18>)
   1df4e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1df50:	46c0      	nop			; (mov r8, r8)
   1df52:	46bd      	mov	sp, r7
   1df54:	b002      	add	sp, #8
   1df56:	bd80      	pop	{r7, pc}
   1df58:	00019d55 	.word	0x00019d55

0001df5c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1df5c:	b580      	push	{r7, lr}
   1df5e:	b086      	sub	sp, #24
   1df60:	af00      	add	r7, sp, #0
   1df62:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1df64:	4b15      	ldr	r3, [pc, #84]	; (1dfbc <nm_bsp_register_isr+0x60>)
   1df66:	687a      	ldr	r2, [r7, #4]
   1df68:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1df6a:	230c      	movs	r3, #12
   1df6c:	18fb      	adds	r3, r7, r3
   1df6e:	0018      	movs	r0, r3
   1df70:	4b13      	ldr	r3, [pc, #76]	; (1dfc0 <nm_bsp_register_isr+0x64>)
   1df72:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1df74:	230c      	movs	r3, #12
   1df76:	18fb      	adds	r3, r7, r3
   1df78:	2229      	movs	r2, #41	; 0x29
   1df7a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1df7c:	230c      	movs	r3, #12
   1df7e:	18fb      	adds	r3, r7, r3
   1df80:	2200      	movs	r2, #0
   1df82:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1df84:	230c      	movs	r3, #12
   1df86:	18fb      	adds	r3, r7, r3
   1df88:	2201      	movs	r2, #1
   1df8a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1df8c:	230c      	movs	r3, #12
   1df8e:	18fb      	adds	r3, r7, r3
   1df90:	2202      	movs	r2, #2
   1df92:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1df94:	230c      	movs	r3, #12
   1df96:	18fb      	adds	r3, r7, r3
   1df98:	0019      	movs	r1, r3
   1df9a:	2009      	movs	r0, #9
   1df9c:	4b09      	ldr	r3, [pc, #36]	; (1dfc4 <nm_bsp_register_isr+0x68>)
   1df9e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1dfa0:	4b09      	ldr	r3, [pc, #36]	; (1dfc8 <nm_bsp_register_isr+0x6c>)
   1dfa2:	2200      	movs	r2, #0
   1dfa4:	2109      	movs	r1, #9
   1dfa6:	0018      	movs	r0, r3
   1dfa8:	4b08      	ldr	r3, [pc, #32]	; (1dfcc <nm_bsp_register_isr+0x70>)
   1dfaa:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1dfac:	2100      	movs	r1, #0
   1dfae:	2009      	movs	r0, #9
   1dfb0:	4b07      	ldr	r3, [pc, #28]	; (1dfd0 <nm_bsp_register_isr+0x74>)
   1dfb2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1dfb4:	46c0      	nop			; (mov r8, r8)
   1dfb6:	46bd      	mov	sp, r7
   1dfb8:	b006      	add	sp, #24
   1dfba:	bd80      	pop	{r7, pc}
   1dfbc:	20003cf8 	.word	0x20003cf8
   1dfc0:	00024495 	.word	0x00024495
   1dfc4:	000244c9 	.word	0x000244c9
   1dfc8:	0001de45 	.word	0x0001de45
   1dfcc:	00024095 	.word	0x00024095
   1dfd0:	000240f9 	.word	0x000240f9

0001dfd4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1dfd4:	b580      	push	{r7, lr}
   1dfd6:	b082      	sub	sp, #8
   1dfd8:	af00      	add	r7, sp, #0
   1dfda:	0002      	movs	r2, r0
   1dfdc:	1dfb      	adds	r3, r7, #7
   1dfde:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   1dfe0:	1dfb      	adds	r3, r7, #7
   1dfe2:	781b      	ldrb	r3, [r3, #0]
   1dfe4:	2b00      	cmp	r3, #0
   1dfe6:	d004      	beq.n	1dff2 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1dfe8:	2100      	movs	r1, #0
   1dfea:	2009      	movs	r0, #9
   1dfec:	4b05      	ldr	r3, [pc, #20]	; (1e004 <nm_bsp_interrupt_ctrl+0x30>)
   1dfee:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1dff0:	e003      	b.n	1dffa <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1dff2:	2100      	movs	r1, #0
   1dff4:	2009      	movs	r0, #9
   1dff6:	4b04      	ldr	r3, [pc, #16]	; (1e008 <nm_bsp_interrupt_ctrl+0x34>)
   1dff8:	4798      	blx	r3
}
   1dffa:	46c0      	nop			; (mov r8, r8)
   1dffc:	46bd      	mov	sp, r7
   1dffe:	b002      	add	sp, #8
   1e000:	bd80      	pop	{r7, pc}
   1e002:	46c0      	nop			; (mov r8, r8)
   1e004:	000240f9 	.word	0x000240f9
   1e008:	00024141 	.word	0x00024141

0001e00c <system_pinmux_get_group_from_gpio_pin>:
{
   1e00c:	b580      	push	{r7, lr}
   1e00e:	b084      	sub	sp, #16
   1e010:	af00      	add	r7, sp, #0
   1e012:	0002      	movs	r2, r0
   1e014:	1dfb      	adds	r3, r7, #7
   1e016:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1e018:	230f      	movs	r3, #15
   1e01a:	18fb      	adds	r3, r7, r3
   1e01c:	1dfa      	adds	r2, r7, #7
   1e01e:	7812      	ldrb	r2, [r2, #0]
   1e020:	09d2      	lsrs	r2, r2, #7
   1e022:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1e024:	230e      	movs	r3, #14
   1e026:	18fb      	adds	r3, r7, r3
   1e028:	1dfa      	adds	r2, r7, #7
   1e02a:	7812      	ldrb	r2, [r2, #0]
   1e02c:	0952      	lsrs	r2, r2, #5
   1e02e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1e030:	4b0d      	ldr	r3, [pc, #52]	; (1e068 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1e032:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1e034:	230f      	movs	r3, #15
   1e036:	18fb      	adds	r3, r7, r3
   1e038:	781b      	ldrb	r3, [r3, #0]
   1e03a:	2b00      	cmp	r3, #0
   1e03c:	d10f      	bne.n	1e05e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1e03e:	230f      	movs	r3, #15
   1e040:	18fb      	adds	r3, r7, r3
   1e042:	781b      	ldrb	r3, [r3, #0]
   1e044:	009b      	lsls	r3, r3, #2
   1e046:	2210      	movs	r2, #16
   1e048:	4694      	mov	ip, r2
   1e04a:	44bc      	add	ip, r7
   1e04c:	4463      	add	r3, ip
   1e04e:	3b08      	subs	r3, #8
   1e050:	681a      	ldr	r2, [r3, #0]
   1e052:	230e      	movs	r3, #14
   1e054:	18fb      	adds	r3, r7, r3
   1e056:	781b      	ldrb	r3, [r3, #0]
   1e058:	01db      	lsls	r3, r3, #7
   1e05a:	18d3      	adds	r3, r2, r3
   1e05c:	e000      	b.n	1e060 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1e05e:	2300      	movs	r3, #0
}
   1e060:	0018      	movs	r0, r3
   1e062:	46bd      	mov	sp, r7
   1e064:	b004      	add	sp, #16
   1e066:	bd80      	pop	{r7, pc}
   1e068:	41004400 	.word	0x41004400

0001e06c <system_interrupt_enable>:
{
   1e06c:	b580      	push	{r7, lr}
   1e06e:	b082      	sub	sp, #8
   1e070:	af00      	add	r7, sp, #0
   1e072:	0002      	movs	r2, r0
   1e074:	1dfb      	adds	r3, r7, #7
   1e076:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e078:	4b06      	ldr	r3, [pc, #24]	; (1e094 <system_interrupt_enable+0x28>)
   1e07a:	1dfa      	adds	r2, r7, #7
   1e07c:	7812      	ldrb	r2, [r2, #0]
   1e07e:	0011      	movs	r1, r2
   1e080:	221f      	movs	r2, #31
   1e082:	400a      	ands	r2, r1
   1e084:	2101      	movs	r1, #1
   1e086:	4091      	lsls	r1, r2
   1e088:	000a      	movs	r2, r1
   1e08a:	601a      	str	r2, [r3, #0]
}
   1e08c:	46c0      	nop			; (mov r8, r8)
   1e08e:	46bd      	mov	sp, r7
   1e090:	b002      	add	sp, #8
   1e092:	bd80      	pop	{r7, pc}
   1e094:	e000e100 	.word	0xe000e100

0001e098 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   1e098:	b580      	push	{r7, lr}
   1e09a:	b082      	sub	sp, #8
   1e09c:	af00      	add	r7, sp, #0
   1e09e:	0002      	movs	r2, r0
   1e0a0:	1dfb      	adds	r3, r7, #7
   1e0a2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e0a4:	4a07      	ldr	r2, [pc, #28]	; (1e0c4 <system_interrupt_disable+0x2c>)
   1e0a6:	1dfb      	adds	r3, r7, #7
   1e0a8:	781b      	ldrb	r3, [r3, #0]
   1e0aa:	0019      	movs	r1, r3
   1e0ac:	231f      	movs	r3, #31
   1e0ae:	400b      	ands	r3, r1
   1e0b0:	2101      	movs	r1, #1
   1e0b2:	4099      	lsls	r1, r3
   1e0b4:	000b      	movs	r3, r1
   1e0b6:	0019      	movs	r1, r3
   1e0b8:	2380      	movs	r3, #128	; 0x80
   1e0ba:	50d1      	str	r1, [r2, r3]
}
   1e0bc:	46c0      	nop			; (mov r8, r8)
   1e0be:	46bd      	mov	sp, r7
   1e0c0:	b002      	add	sp, #8
   1e0c2:	bd80      	pop	{r7, pc}
   1e0c4:	e000e100 	.word	0xe000e100

0001e0c8 <port_get_group_from_gpio_pin>:
{
   1e0c8:	b580      	push	{r7, lr}
   1e0ca:	b082      	sub	sp, #8
   1e0cc:	af00      	add	r7, sp, #0
   1e0ce:	0002      	movs	r2, r0
   1e0d0:	1dfb      	adds	r3, r7, #7
   1e0d2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1e0d4:	1dfb      	adds	r3, r7, #7
   1e0d6:	781b      	ldrb	r3, [r3, #0]
   1e0d8:	0018      	movs	r0, r3
   1e0da:	4b03      	ldr	r3, [pc, #12]	; (1e0e8 <port_get_group_from_gpio_pin+0x20>)
   1e0dc:	4798      	blx	r3
   1e0de:	0003      	movs	r3, r0
}
   1e0e0:	0018      	movs	r0, r3
   1e0e2:	46bd      	mov	sp, r7
   1e0e4:	b002      	add	sp, #8
   1e0e6:	bd80      	pop	{r7, pc}
   1e0e8:	0001e00d 	.word	0x0001e00d

0001e0ec <port_get_config_defaults>:
{
   1e0ec:	b580      	push	{r7, lr}
   1e0ee:	b082      	sub	sp, #8
   1e0f0:	af00      	add	r7, sp, #0
   1e0f2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1e0f4:	687b      	ldr	r3, [r7, #4]
   1e0f6:	2200      	movs	r2, #0
   1e0f8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1e0fa:	687b      	ldr	r3, [r7, #4]
   1e0fc:	2201      	movs	r2, #1
   1e0fe:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1e100:	687b      	ldr	r3, [r7, #4]
   1e102:	2200      	movs	r2, #0
   1e104:	709a      	strb	r2, [r3, #2]
}
   1e106:	46c0      	nop			; (mov r8, r8)
   1e108:	46bd      	mov	sp, r7
   1e10a:	b002      	add	sp, #8
   1e10c:	bd80      	pop	{r7, pc}
	...

0001e110 <port_pin_set_output_level>:
{
   1e110:	b580      	push	{r7, lr}
   1e112:	b084      	sub	sp, #16
   1e114:	af00      	add	r7, sp, #0
   1e116:	0002      	movs	r2, r0
   1e118:	1dfb      	adds	r3, r7, #7
   1e11a:	701a      	strb	r2, [r3, #0]
   1e11c:	1dbb      	adds	r3, r7, #6
   1e11e:	1c0a      	adds	r2, r1, #0
   1e120:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1e122:	1dfb      	adds	r3, r7, #7
   1e124:	781b      	ldrb	r3, [r3, #0]
   1e126:	0018      	movs	r0, r3
   1e128:	4b0d      	ldr	r3, [pc, #52]	; (1e160 <port_pin_set_output_level+0x50>)
   1e12a:	4798      	blx	r3
   1e12c:	0003      	movs	r3, r0
   1e12e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e130:	1dfb      	adds	r3, r7, #7
   1e132:	781b      	ldrb	r3, [r3, #0]
   1e134:	221f      	movs	r2, #31
   1e136:	4013      	ands	r3, r2
   1e138:	2201      	movs	r2, #1
   1e13a:	409a      	lsls	r2, r3
   1e13c:	0013      	movs	r3, r2
   1e13e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1e140:	1dbb      	adds	r3, r7, #6
   1e142:	781b      	ldrb	r3, [r3, #0]
   1e144:	2b00      	cmp	r3, #0
   1e146:	d003      	beq.n	1e150 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1e148:	68fb      	ldr	r3, [r7, #12]
   1e14a:	68ba      	ldr	r2, [r7, #8]
   1e14c:	619a      	str	r2, [r3, #24]
}
   1e14e:	e002      	b.n	1e156 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1e150:	68fb      	ldr	r3, [r7, #12]
   1e152:	68ba      	ldr	r2, [r7, #8]
   1e154:	615a      	str	r2, [r3, #20]
}
   1e156:	46c0      	nop			; (mov r8, r8)
   1e158:	46bd      	mov	sp, r7
   1e15a:	b004      	add	sp, #16
   1e15c:	bd80      	pop	{r7, pc}
   1e15e:	46c0      	nop			; (mov r8, r8)
   1e160:	0001e0c9 	.word	0x0001e0c9

0001e164 <spi_is_syncing>:
{
   1e164:	b580      	push	{r7, lr}
   1e166:	b084      	sub	sp, #16
   1e168:	af00      	add	r7, sp, #0
   1e16a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e16c:	687b      	ldr	r3, [r7, #4]
   1e16e:	681b      	ldr	r3, [r3, #0]
   1e170:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1e172:	68fb      	ldr	r3, [r7, #12]
   1e174:	69db      	ldr	r3, [r3, #28]
   1e176:	1e5a      	subs	r2, r3, #1
   1e178:	4193      	sbcs	r3, r2
   1e17a:	b2db      	uxtb	r3, r3
}
   1e17c:	0018      	movs	r0, r3
   1e17e:	46bd      	mov	sp, r7
   1e180:	b004      	add	sp, #16
   1e182:	bd80      	pop	{r7, pc}

0001e184 <spi_get_config_defaults>:
{
   1e184:	b580      	push	{r7, lr}
   1e186:	b082      	sub	sp, #8
   1e188:	af00      	add	r7, sp, #0
   1e18a:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   1e18c:	687b      	ldr	r3, [r7, #4]
   1e18e:	2201      	movs	r2, #1
   1e190:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1e192:	687b      	ldr	r3, [r7, #4]
   1e194:	2200      	movs	r2, #0
   1e196:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1e198:	687b      	ldr	r3, [r7, #4]
   1e19a:	2200      	movs	r2, #0
   1e19c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1e19e:	687b      	ldr	r3, [r7, #4]
   1e1a0:	22c0      	movs	r2, #192	; 0xc0
   1e1a2:	0392      	lsls	r2, r2, #14
   1e1a4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1e1a6:	687b      	ldr	r3, [r7, #4]
   1e1a8:	2200      	movs	r2, #0
   1e1aa:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1e1ac:	687b      	ldr	r3, [r7, #4]
   1e1ae:	2200      	movs	r2, #0
   1e1b0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1e1b2:	687b      	ldr	r3, [r7, #4]
   1e1b4:	2201      	movs	r2, #1
   1e1b6:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   1e1b8:	687b      	ldr	r3, [r7, #4]
   1e1ba:	2201      	movs	r2, #1
   1e1bc:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   1e1be:	687b      	ldr	r3, [r7, #4]
   1e1c0:	2200      	movs	r2, #0
   1e1c2:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1e1c4:	687b      	ldr	r3, [r7, #4]
   1e1c6:	2224      	movs	r2, #36	; 0x24
   1e1c8:	2100      	movs	r1, #0
   1e1ca:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1e1cc:	687b      	ldr	r3, [r7, #4]
   1e1ce:	3318      	adds	r3, #24
   1e1d0:	220c      	movs	r2, #12
   1e1d2:	2100      	movs	r1, #0
   1e1d4:	0018      	movs	r0, r3
   1e1d6:	4b0a      	ldr	r3, [pc, #40]	; (1e200 <spi_get_config_defaults+0x7c>)
   1e1d8:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   1e1da:	687b      	ldr	r3, [r7, #4]
   1e1dc:	4a09      	ldr	r2, [pc, #36]	; (1e204 <spi_get_config_defaults+0x80>)
   1e1de:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1e1e0:	687b      	ldr	r3, [r7, #4]
   1e1e2:	2200      	movs	r2, #0
   1e1e4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1e1e6:	687b      	ldr	r3, [r7, #4]
   1e1e8:	2200      	movs	r2, #0
   1e1ea:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1e1ec:	687b      	ldr	r3, [r7, #4]
   1e1ee:	2200      	movs	r2, #0
   1e1f0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1e1f2:	687b      	ldr	r3, [r7, #4]
   1e1f4:	2200      	movs	r2, #0
   1e1f6:	635a      	str	r2, [r3, #52]	; 0x34
};
   1e1f8:	46c0      	nop			; (mov r8, r8)
   1e1fa:	46bd      	mov	sp, r7
   1e1fc:	b002      	add	sp, #8
   1e1fe:	bd80      	pop	{r7, pc}
   1e200:	000321a3 	.word	0x000321a3
   1e204:	000186a0 	.word	0x000186a0

0001e208 <spi_slave_inst_get_config_defaults>:
{
   1e208:	b580      	push	{r7, lr}
   1e20a:	b082      	sub	sp, #8
   1e20c:	af00      	add	r7, sp, #0
   1e20e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   1e210:	687b      	ldr	r3, [r7, #4]
   1e212:	220a      	movs	r2, #10
   1e214:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1e216:	687b      	ldr	r3, [r7, #4]
   1e218:	2200      	movs	r2, #0
   1e21a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1e21c:	687b      	ldr	r3, [r7, #4]
   1e21e:	2200      	movs	r2, #0
   1e220:	709a      	strb	r2, [r3, #2]
}
   1e222:	46c0      	nop			; (mov r8, r8)
   1e224:	46bd      	mov	sp, r7
   1e226:	b002      	add	sp, #8
   1e228:	bd80      	pop	{r7, pc}
	...

0001e22c <spi_attach_slave>:
{
   1e22c:	b580      	push	{r7, lr}
   1e22e:	b084      	sub	sp, #16
   1e230:	af00      	add	r7, sp, #0
   1e232:	6078      	str	r0, [r7, #4]
   1e234:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   1e236:	683b      	ldr	r3, [r7, #0]
   1e238:	781a      	ldrb	r2, [r3, #0]
   1e23a:	687b      	ldr	r3, [r7, #4]
   1e23c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1e23e:	683b      	ldr	r3, [r7, #0]
   1e240:	785a      	ldrb	r2, [r3, #1]
   1e242:	687b      	ldr	r3, [r7, #4]
   1e244:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1e246:	683b      	ldr	r3, [r7, #0]
   1e248:	789a      	ldrb	r2, [r3, #2]
   1e24a:	687b      	ldr	r3, [r7, #4]
   1e24c:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   1e24e:	230c      	movs	r3, #12
   1e250:	18fb      	adds	r3, r7, r3
   1e252:	0018      	movs	r0, r3
   1e254:	4b0b      	ldr	r3, [pc, #44]	; (1e284 <spi_attach_slave+0x58>)
   1e256:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1e258:	230c      	movs	r3, #12
   1e25a:	18fb      	adds	r3, r7, r3
   1e25c:	2201      	movs	r2, #1
   1e25e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1e260:	687b      	ldr	r3, [r7, #4]
   1e262:	781b      	ldrb	r3, [r3, #0]
   1e264:	220c      	movs	r2, #12
   1e266:	18ba      	adds	r2, r7, r2
   1e268:	0011      	movs	r1, r2
   1e26a:	0018      	movs	r0, r3
   1e26c:	4b06      	ldr	r3, [pc, #24]	; (1e288 <spi_attach_slave+0x5c>)
   1e26e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1e270:	687b      	ldr	r3, [r7, #4]
   1e272:	781b      	ldrb	r3, [r3, #0]
   1e274:	2101      	movs	r1, #1
   1e276:	0018      	movs	r0, r3
   1e278:	4b04      	ldr	r3, [pc, #16]	; (1e28c <spi_attach_slave+0x60>)
   1e27a:	4798      	blx	r3
}
   1e27c:	46c0      	nop			; (mov r8, r8)
   1e27e:	46bd      	mov	sp, r7
   1e280:	b004      	add	sp, #16
   1e282:	bd80      	pop	{r7, pc}
   1e284:	0001e0ed 	.word	0x0001e0ed
   1e288:	000245ed 	.word	0x000245ed
   1e28c:	0001e111 	.word	0x0001e111

0001e290 <spi_enable>:
{
   1e290:	b580      	push	{r7, lr}
   1e292:	b084      	sub	sp, #16
   1e294:	af00      	add	r7, sp, #0
   1e296:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e298:	687b      	ldr	r3, [r7, #4]
   1e29a:	681b      	ldr	r3, [r3, #0]
   1e29c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1e29e:	687b      	ldr	r3, [r7, #4]
   1e2a0:	681b      	ldr	r3, [r3, #0]
   1e2a2:	0018      	movs	r0, r3
   1e2a4:	4b0b      	ldr	r3, [pc, #44]	; (1e2d4 <spi_enable+0x44>)
   1e2a6:	4798      	blx	r3
   1e2a8:	0003      	movs	r3, r0
   1e2aa:	0018      	movs	r0, r3
   1e2ac:	4b0a      	ldr	r3, [pc, #40]	; (1e2d8 <spi_enable+0x48>)
   1e2ae:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   1e2b0:	46c0      	nop			; (mov r8, r8)
   1e2b2:	687b      	ldr	r3, [r7, #4]
   1e2b4:	0018      	movs	r0, r3
   1e2b6:	4b09      	ldr	r3, [pc, #36]	; (1e2dc <spi_enable+0x4c>)
   1e2b8:	4798      	blx	r3
   1e2ba:	1e03      	subs	r3, r0, #0
   1e2bc:	d1f9      	bne.n	1e2b2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1e2be:	68fb      	ldr	r3, [r7, #12]
   1e2c0:	681b      	ldr	r3, [r3, #0]
   1e2c2:	2202      	movs	r2, #2
   1e2c4:	431a      	orrs	r2, r3
   1e2c6:	68fb      	ldr	r3, [r7, #12]
   1e2c8:	601a      	str	r2, [r3, #0]
}
   1e2ca:	46c0      	nop			; (mov r8, r8)
   1e2cc:	46bd      	mov	sp, r7
   1e2ce:	b004      	add	sp, #16
   1e2d0:	bd80      	pop	{r7, pc}
   1e2d2:	46c0      	nop			; (mov r8, r8)
   1e2d4:	000252bd 	.word	0x000252bd
   1e2d8:	0001e06d 	.word	0x0001e06d
   1e2dc:	0001e165 	.word	0x0001e165

0001e2e0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   1e2e0:	b580      	push	{r7, lr}
   1e2e2:	b084      	sub	sp, #16
   1e2e4:	af00      	add	r7, sp, #0
   1e2e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e2e8:	687b      	ldr	r3, [r7, #4]
   1e2ea:	681b      	ldr	r3, [r3, #0]
   1e2ec:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1e2ee:	687b      	ldr	r3, [r7, #4]
   1e2f0:	681b      	ldr	r3, [r3, #0]
   1e2f2:	0018      	movs	r0, r3
   1e2f4:	4b0e      	ldr	r3, [pc, #56]	; (1e330 <spi_disable+0x50>)
   1e2f6:	4798      	blx	r3
   1e2f8:	0003      	movs	r3, r0
   1e2fa:	0018      	movs	r0, r3
   1e2fc:	4b0d      	ldr	r3, [pc, #52]	; (1e334 <spi_disable+0x54>)
   1e2fe:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1e300:	46c0      	nop			; (mov r8, r8)
   1e302:	687b      	ldr	r3, [r7, #4]
   1e304:	0018      	movs	r0, r3
   1e306:	4b0c      	ldr	r3, [pc, #48]	; (1e338 <spi_disable+0x58>)
   1e308:	4798      	blx	r3
   1e30a:	1e03      	subs	r3, r0, #0
   1e30c:	d1f9      	bne.n	1e302 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1e30e:	68fb      	ldr	r3, [r7, #12]
   1e310:	228f      	movs	r2, #143	; 0x8f
   1e312:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1e314:	68fb      	ldr	r3, [r7, #12]
   1e316:	228f      	movs	r2, #143	; 0x8f
   1e318:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1e31a:	68fb      	ldr	r3, [r7, #12]
   1e31c:	681b      	ldr	r3, [r3, #0]
   1e31e:	2202      	movs	r2, #2
   1e320:	4393      	bics	r3, r2
   1e322:	001a      	movs	r2, r3
   1e324:	68fb      	ldr	r3, [r7, #12]
   1e326:	601a      	str	r2, [r3, #0]
}
   1e328:	46c0      	nop			; (mov r8, r8)
   1e32a:	46bd      	mov	sp, r7
   1e32c:	b004      	add	sp, #16
   1e32e:	bd80      	pop	{r7, pc}
   1e330:	000252bd 	.word	0x000252bd
   1e334:	0001e099 	.word	0x0001e099
   1e338:	0001e165 	.word	0x0001e165

0001e33c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   1e33c:	b580      	push	{r7, lr}
   1e33e:	b084      	sub	sp, #16
   1e340:	af00      	add	r7, sp, #0
   1e342:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e344:	687b      	ldr	r3, [r7, #4]
   1e346:	681b      	ldr	r3, [r3, #0]
   1e348:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1e34a:	68fb      	ldr	r3, [r7, #12]
   1e34c:	7e1b      	ldrb	r3, [r3, #24]
   1e34e:	b2db      	uxtb	r3, r3
   1e350:	001a      	movs	r2, r3
   1e352:	2302      	movs	r3, #2
   1e354:	4013      	ands	r3, r2
   1e356:	1e5a      	subs	r2, r3, #1
   1e358:	4193      	sbcs	r3, r2
   1e35a:	b2db      	uxtb	r3, r3
}
   1e35c:	0018      	movs	r0, r3
   1e35e:	46bd      	mov	sp, r7
   1e360:	b004      	add	sp, #16
   1e362:	bd80      	pop	{r7, pc}

0001e364 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   1e364:	b580      	push	{r7, lr}
   1e366:	b084      	sub	sp, #16
   1e368:	af00      	add	r7, sp, #0
   1e36a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e36c:	687b      	ldr	r3, [r7, #4]
   1e36e:	681b      	ldr	r3, [r3, #0]
   1e370:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e372:	68fb      	ldr	r3, [r7, #12]
   1e374:	7e1b      	ldrb	r3, [r3, #24]
   1e376:	b2db      	uxtb	r3, r3
   1e378:	001a      	movs	r2, r3
   1e37a:	2301      	movs	r3, #1
   1e37c:	4013      	ands	r3, r2
   1e37e:	1e5a      	subs	r2, r3, #1
   1e380:	4193      	sbcs	r3, r2
   1e382:	b2db      	uxtb	r3, r3
}
   1e384:	0018      	movs	r0, r3
   1e386:	46bd      	mov	sp, r7
   1e388:	b004      	add	sp, #16
   1e38a:	bd80      	pop	{r7, pc}

0001e38c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   1e38c:	b580      	push	{r7, lr}
   1e38e:	b084      	sub	sp, #16
   1e390:	af00      	add	r7, sp, #0
   1e392:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e394:	687b      	ldr	r3, [r7, #4]
   1e396:	681b      	ldr	r3, [r3, #0]
   1e398:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1e39a:	68fb      	ldr	r3, [r7, #12]
   1e39c:	7e1b      	ldrb	r3, [r3, #24]
   1e39e:	b2db      	uxtb	r3, r3
   1e3a0:	001a      	movs	r2, r3
   1e3a2:	2304      	movs	r3, #4
   1e3a4:	4013      	ands	r3, r2
   1e3a6:	1e5a      	subs	r2, r3, #1
   1e3a8:	4193      	sbcs	r3, r2
   1e3aa:	b2db      	uxtb	r3, r3
}
   1e3ac:	0018      	movs	r0, r3
   1e3ae:	46bd      	mov	sp, r7
   1e3b0:	b004      	add	sp, #16
   1e3b2:	bd80      	pop	{r7, pc}

0001e3b4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   1e3b4:	b580      	push	{r7, lr}
   1e3b6:	b084      	sub	sp, #16
   1e3b8:	af00      	add	r7, sp, #0
   1e3ba:	6078      	str	r0, [r7, #4]
   1e3bc:	000a      	movs	r2, r1
   1e3be:	1cbb      	adds	r3, r7, #2
   1e3c0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e3c2:	687b      	ldr	r3, [r7, #4]
   1e3c4:	681b      	ldr	r3, [r3, #0]
   1e3c6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   1e3c8:	687b      	ldr	r3, [r7, #4]
   1e3ca:	0018      	movs	r0, r3
   1e3cc:	4b0a      	ldr	r3, [pc, #40]	; (1e3f8 <spi_write+0x44>)
   1e3ce:	4798      	blx	r3
   1e3d0:	0003      	movs	r3, r0
   1e3d2:	001a      	movs	r2, r3
   1e3d4:	2301      	movs	r3, #1
   1e3d6:	4053      	eors	r3, r2
   1e3d8:	b2db      	uxtb	r3, r3
   1e3da:	2b00      	cmp	r3, #0
   1e3dc:	d001      	beq.n	1e3e2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   1e3de:	2305      	movs	r3, #5
   1e3e0:	e006      	b.n	1e3f0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e3e2:	1cbb      	adds	r3, r7, #2
   1e3e4:	881b      	ldrh	r3, [r3, #0]
   1e3e6:	05db      	lsls	r3, r3, #23
   1e3e8:	0dda      	lsrs	r2, r3, #23
   1e3ea:	68fb      	ldr	r3, [r7, #12]
   1e3ec:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   1e3ee:	2300      	movs	r3, #0
}
   1e3f0:	0018      	movs	r0, r3
   1e3f2:	46bd      	mov	sp, r7
   1e3f4:	b004      	add	sp, #16
   1e3f6:	bd80      	pop	{r7, pc}
   1e3f8:	0001e365 	.word	0x0001e365

0001e3fc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   1e3fc:	b580      	push	{r7, lr}
   1e3fe:	b084      	sub	sp, #16
   1e400:	af00      	add	r7, sp, #0
   1e402:	6078      	str	r0, [r7, #4]
   1e404:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e406:	687b      	ldr	r3, [r7, #4]
   1e408:	681b      	ldr	r3, [r3, #0]
   1e40a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   1e40c:	687b      	ldr	r3, [r7, #4]
   1e40e:	0018      	movs	r0, r3
   1e410:	4b1b      	ldr	r3, [pc, #108]	; (1e480 <spi_read+0x84>)
   1e412:	4798      	blx	r3
   1e414:	0003      	movs	r3, r0
   1e416:	001a      	movs	r2, r3
   1e418:	2301      	movs	r3, #1
   1e41a:	4053      	eors	r3, r2
   1e41c:	b2db      	uxtb	r3, r3
   1e41e:	2b00      	cmp	r3, #0
   1e420:	d001      	beq.n	1e426 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   1e422:	2310      	movs	r3, #16
   1e424:	e027      	b.n	1e476 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   1e426:	230f      	movs	r3, #15
   1e428:	18fb      	adds	r3, r7, r3
   1e42a:	2200      	movs	r2, #0
   1e42c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e42e:	68bb      	ldr	r3, [r7, #8]
   1e430:	8b5b      	ldrh	r3, [r3, #26]
   1e432:	b29b      	uxth	r3, r3
   1e434:	001a      	movs	r2, r3
   1e436:	2304      	movs	r3, #4
   1e438:	4013      	ands	r3, r2
   1e43a:	d006      	beq.n	1e44a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   1e43c:	230f      	movs	r3, #15
   1e43e:	18fb      	adds	r3, r7, r3
   1e440:	221e      	movs	r2, #30
   1e442:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e444:	68bb      	ldr	r3, [r7, #8]
   1e446:	2204      	movs	r2, #4
   1e448:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e44a:	687b      	ldr	r3, [r7, #4]
   1e44c:	799b      	ldrb	r3, [r3, #6]
   1e44e:	2b01      	cmp	r3, #1
   1e450:	d108      	bne.n	1e464 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e452:	68bb      	ldr	r3, [r7, #8]
   1e454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e456:	b29b      	uxth	r3, r3
   1e458:	05db      	lsls	r3, r3, #23
   1e45a:	0ddb      	lsrs	r3, r3, #23
   1e45c:	b29a      	uxth	r2, r3
   1e45e:	683b      	ldr	r3, [r7, #0]
   1e460:	801a      	strh	r2, [r3, #0]
   1e462:	e005      	b.n	1e470 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1e464:	68bb      	ldr	r3, [r7, #8]
   1e466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e468:	b2db      	uxtb	r3, r3
   1e46a:	b29a      	uxth	r2, r3
   1e46c:	683b      	ldr	r3, [r7, #0]
   1e46e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   1e470:	230f      	movs	r3, #15
   1e472:	18fb      	adds	r3, r7, r3
   1e474:	781b      	ldrb	r3, [r3, #0]
}
   1e476:	0018      	movs	r0, r3
   1e478:	46bd      	mov	sp, r7
   1e47a:	b004      	add	sp, #16
   1e47c:	bd80      	pop	{r7, pc}
   1e47e:	46c0      	nop			; (mov r8, r8)
   1e480:	0001e38d 	.word	0x0001e38d

0001e484 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   1e484:	b580      	push	{r7, lr}
   1e486:	b086      	sub	sp, #24
   1e488:	af00      	add	r7, sp, #0
   1e48a:	60f8      	str	r0, [r7, #12]
   1e48c:	60b9      	str	r1, [r7, #8]
   1e48e:	1dbb      	adds	r3, r7, #6
   1e490:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   1e492:	2313      	movs	r3, #19
   1e494:	18fb      	adds	r3, r7, r3
   1e496:	22ff      	movs	r2, #255	; 0xff
   1e498:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1e49a:	2317      	movs	r3, #23
   1e49c:	18fb      	adds	r3, r7, r3
   1e49e:	2200      	movs	r2, #0
   1e4a0:	701a      	strb	r2, [r3, #0]
   1e4a2:	2316      	movs	r3, #22
   1e4a4:	18fb      	adds	r3, r7, r3
   1e4a6:	2200      	movs	r2, #0
   1e4a8:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   1e4aa:	2314      	movs	r3, #20
   1e4ac:	18fb      	adds	r3, r7, r3
   1e4ae:	2200      	movs	r2, #0
   1e4b0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   1e4b2:	2310      	movs	r3, #16
   1e4b4:	18fb      	adds	r3, r7, r3
   1e4b6:	2200      	movs	r2, #0
   1e4b8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1e4ba:	68bb      	ldr	r3, [r7, #8]
   1e4bc:	2b00      	cmp	r3, #0
   1e4be:	d102      	bne.n	1e4c6 <spi_rw+0x42>
   1e4c0:	68fb      	ldr	r3, [r7, #12]
   1e4c2:	2b00      	cmp	r3, #0
   1e4c4:	d003      	beq.n	1e4ce <spi_rw+0x4a>
   1e4c6:	1dbb      	adds	r3, r7, #6
   1e4c8:	881b      	ldrh	r3, [r3, #0]
   1e4ca:	2b00      	cmp	r3, #0
   1e4cc:	d102      	bne.n	1e4d4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   1e4ce:	230f      	movs	r3, #15
   1e4d0:	425b      	negs	r3, r3
   1e4d2:	e07e      	b.n	1e5d2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   1e4d4:	68fb      	ldr	r3, [r7, #12]
   1e4d6:	2b00      	cmp	r3, #0
   1e4d8:	d106      	bne.n	1e4e8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   1e4da:	2313      	movs	r3, #19
   1e4dc:	18fb      	adds	r3, r7, r3
   1e4de:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   1e4e0:	2317      	movs	r3, #23
   1e4e2:	18fb      	adds	r3, r7, r3
   1e4e4:	2201      	movs	r2, #1
   1e4e6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   1e4e8:	68bb      	ldr	r3, [r7, #8]
   1e4ea:	2b00      	cmp	r3, #0
   1e4ec:	d106      	bne.n	1e4fc <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   1e4ee:	2313      	movs	r3, #19
   1e4f0:	18fb      	adds	r3, r7, r3
   1e4f2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   1e4f4:	2316      	movs	r3, #22
   1e4f6:	18fb      	adds	r3, r7, r3
   1e4f8:	2201      	movs	r2, #1
   1e4fa:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   1e4fc:	4937      	ldr	r1, [pc, #220]	; (1e5dc <spi_rw+0x158>)
   1e4fe:	4b38      	ldr	r3, [pc, #224]	; (1e5e0 <spi_rw+0x15c>)
   1e500:	2201      	movs	r2, #1
   1e502:	0018      	movs	r0, r3
   1e504:	4b37      	ldr	r3, [pc, #220]	; (1e5e4 <spi_rw+0x160>)
   1e506:	4798      	blx	r3

	while (u16Sz) {
   1e508:	e04c      	b.n	1e5a4 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   1e50a:	68fb      	ldr	r3, [r7, #12]
   1e50c:	781a      	ldrb	r2, [r3, #0]
   1e50e:	2314      	movs	r3, #20
   1e510:	18fb      	adds	r3, r7, r3
   1e512:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   1e514:	46c0      	nop			; (mov r8, r8)
   1e516:	4b32      	ldr	r3, [pc, #200]	; (1e5e0 <spi_rw+0x15c>)
   1e518:	0018      	movs	r0, r3
   1e51a:	4b33      	ldr	r3, [pc, #204]	; (1e5e8 <spi_rw+0x164>)
   1e51c:	4798      	blx	r3
   1e51e:	0003      	movs	r3, r0
   1e520:	001a      	movs	r2, r3
   1e522:	2301      	movs	r3, #1
   1e524:	4053      	eors	r3, r2
   1e526:	b2db      	uxtb	r3, r3
   1e528:	2b00      	cmp	r3, #0
   1e52a:	d1f4      	bne.n	1e516 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   1e52c:	46c0      	nop			; (mov r8, r8)
   1e52e:	2314      	movs	r3, #20
   1e530:	18fb      	adds	r3, r7, r3
   1e532:	881a      	ldrh	r2, [r3, #0]
   1e534:	4b2a      	ldr	r3, [pc, #168]	; (1e5e0 <spi_rw+0x15c>)
   1e536:	0011      	movs	r1, r2
   1e538:	0018      	movs	r0, r3
   1e53a:	4b2c      	ldr	r3, [pc, #176]	; (1e5ec <spi_rw+0x168>)
   1e53c:	4798      	blx	r3
   1e53e:	1e03      	subs	r3, r0, #0
   1e540:	d1f5      	bne.n	1e52e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   1e542:	46c0      	nop			; (mov r8, r8)
   1e544:	4b26      	ldr	r3, [pc, #152]	; (1e5e0 <spi_rw+0x15c>)
   1e546:	0018      	movs	r0, r3
   1e548:	4b29      	ldr	r3, [pc, #164]	; (1e5f0 <spi_rw+0x16c>)
   1e54a:	4798      	blx	r3
   1e54c:	0003      	movs	r3, r0
   1e54e:	001a      	movs	r2, r3
   1e550:	2301      	movs	r3, #1
   1e552:	4053      	eors	r3, r2
   1e554:	b2db      	uxtb	r3, r3
   1e556:	2b00      	cmp	r3, #0
   1e558:	d1f4      	bne.n	1e544 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   1e55a:	46c0      	nop			; (mov r8, r8)
   1e55c:	2310      	movs	r3, #16
   1e55e:	18fa      	adds	r2, r7, r3
   1e560:	4b1f      	ldr	r3, [pc, #124]	; (1e5e0 <spi_rw+0x15c>)
   1e562:	0011      	movs	r1, r2
   1e564:	0018      	movs	r0, r3
   1e566:	4b23      	ldr	r3, [pc, #140]	; (1e5f4 <spi_rw+0x170>)
   1e568:	4798      	blx	r3
   1e56a:	1e03      	subs	r3, r0, #0
   1e56c:	d1f6      	bne.n	1e55c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   1e56e:	2310      	movs	r3, #16
   1e570:	18fb      	adds	r3, r7, r3
   1e572:	881b      	ldrh	r3, [r3, #0]
   1e574:	b2da      	uxtb	r2, r3
   1e576:	68bb      	ldr	r3, [r7, #8]
   1e578:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   1e57a:	1dbb      	adds	r3, r7, #6
   1e57c:	881a      	ldrh	r2, [r3, #0]
   1e57e:	1dbb      	adds	r3, r7, #6
   1e580:	3a01      	subs	r2, #1
   1e582:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   1e584:	2316      	movs	r3, #22
   1e586:	18fb      	adds	r3, r7, r3
   1e588:	781b      	ldrb	r3, [r3, #0]
   1e58a:	2b00      	cmp	r3, #0
   1e58c:	d102      	bne.n	1e594 <spi_rw+0x110>
			pu8Miso++;
   1e58e:	68bb      	ldr	r3, [r7, #8]
   1e590:	3301      	adds	r3, #1
   1e592:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   1e594:	2317      	movs	r3, #23
   1e596:	18fb      	adds	r3, r7, r3
   1e598:	781b      	ldrb	r3, [r3, #0]
   1e59a:	2b00      	cmp	r3, #0
   1e59c:	d102      	bne.n	1e5a4 <spi_rw+0x120>
			pu8Mosi++;
   1e59e:	68fb      	ldr	r3, [r7, #12]
   1e5a0:	3301      	adds	r3, #1
   1e5a2:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   1e5a4:	1dbb      	adds	r3, r7, #6
   1e5a6:	881b      	ldrh	r3, [r3, #0]
   1e5a8:	2b00      	cmp	r3, #0
   1e5aa:	d1ae      	bne.n	1e50a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   1e5ac:	46c0      	nop			; (mov r8, r8)
   1e5ae:	4b0c      	ldr	r3, [pc, #48]	; (1e5e0 <spi_rw+0x15c>)
   1e5b0:	0018      	movs	r0, r3
   1e5b2:	4b11      	ldr	r3, [pc, #68]	; (1e5f8 <spi_rw+0x174>)
   1e5b4:	4798      	blx	r3
   1e5b6:	0003      	movs	r3, r0
   1e5b8:	001a      	movs	r2, r3
   1e5ba:	2301      	movs	r3, #1
   1e5bc:	4053      	eors	r3, r2
   1e5be:	b2db      	uxtb	r3, r3
   1e5c0:	2b00      	cmp	r3, #0
   1e5c2:	d1f4      	bne.n	1e5ae <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   1e5c4:	4905      	ldr	r1, [pc, #20]	; (1e5dc <spi_rw+0x158>)
   1e5c6:	4b06      	ldr	r3, [pc, #24]	; (1e5e0 <spi_rw+0x15c>)
   1e5c8:	2200      	movs	r2, #0
   1e5ca:	0018      	movs	r0, r3
   1e5cc:	4b05      	ldr	r3, [pc, #20]	; (1e5e4 <spi_rw+0x160>)
   1e5ce:	4798      	blx	r3

	return M2M_SUCCESS;
   1e5d0:	2300      	movs	r3, #0
}
   1e5d2:	0018      	movs	r0, r3
   1e5d4:	46bd      	mov	sp, r7
   1e5d6:	b006      	add	sp, #24
   1e5d8:	bd80      	pop	{r7, pc}
   1e5da:	46c0      	nop			; (mov r8, r8)
   1e5dc:	20005404 	.word	0x20005404
   1e5e0:	20005408 	.word	0x20005408
   1e5e4:	00025d31 	.word	0x00025d31
   1e5e8:	0001e365 	.word	0x0001e365
   1e5ec:	0001e3b5 	.word	0x0001e3b5
   1e5f0:	0001e38d 	.word	0x0001e38d
   1e5f4:	0001e3fd 	.word	0x0001e3fd
   1e5f8:	0001e33d 	.word	0x0001e33d

0001e5fc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   1e5fc:	b580      	push	{r7, lr}
   1e5fe:	b092      	sub	sp, #72	; 0x48
   1e600:	af00      	add	r7, sp, #0
   1e602:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   1e604:	2347      	movs	r3, #71	; 0x47
   1e606:	18fb      	adds	r3, r7, r3
   1e608:	2200      	movs	r2, #0
   1e60a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   1e60c:	2308      	movs	r3, #8
   1e60e:	18fb      	adds	r3, r7, r3
   1e610:	0018      	movs	r0, r3
   1e612:	4b26      	ldr	r3, [pc, #152]	; (1e6ac <nm_bus_init+0xb0>)
   1e614:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   1e616:	2308      	movs	r3, #8
   1e618:	18fb      	adds	r3, r7, r3
   1e61a:	220e      	movs	r2, #14
   1e61c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   1e61e:	2308      	movs	r3, #8
   1e620:	18fa      	adds	r2, r7, r3
   1e622:	4b23      	ldr	r3, [pc, #140]	; (1e6b0 <nm_bus_init+0xb4>)
   1e624:	0011      	movs	r1, r2
   1e626:	0018      	movs	r0, r3
   1e628:	4b22      	ldr	r3, [pc, #136]	; (1e6b4 <nm_bus_init+0xb8>)
   1e62a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   1e62c:	230c      	movs	r3, #12
   1e62e:	18fb      	adds	r3, r7, r3
   1e630:	0018      	movs	r0, r3
   1e632:	4b21      	ldr	r3, [pc, #132]	; (1e6b8 <nm_bus_init+0xbc>)
   1e634:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   1e636:	230c      	movs	r3, #12
   1e638:	18fb      	adds	r3, r7, r3
   1e63a:	22c0      	movs	r2, #192	; 0xc0
   1e63c:	0392      	lsls	r2, r2, #14
   1e63e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   1e640:	230c      	movs	r3, #12
   1e642:	18fb      	adds	r3, r7, r3
   1e644:	4a1d      	ldr	r2, [pc, #116]	; (1e6bc <nm_bus_init+0xc0>)
   1e646:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   1e648:	230c      	movs	r3, #12
   1e64a:	18fb      	adds	r3, r7, r3
   1e64c:	4a1c      	ldr	r2, [pc, #112]	; (1e6c0 <nm_bus_init+0xc4>)
   1e64e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   1e650:	230c      	movs	r3, #12
   1e652:	18fb      	adds	r3, r7, r3
   1e654:	2201      	movs	r2, #1
   1e656:	4252      	negs	r2, r2
   1e658:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   1e65a:	230c      	movs	r3, #12
   1e65c:	18fb      	adds	r3, r7, r3
   1e65e:	4a19      	ldr	r2, [pc, #100]	; (1e6c4 <nm_bus_init+0xc8>)
   1e660:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   1e662:	230c      	movs	r3, #12
   1e664:	18fb      	adds	r3, r7, r3
   1e666:	2200      	movs	r2, #0
   1e668:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   1e66a:	230c      	movs	r3, #12
   1e66c:	18fb      	adds	r3, r7, r3
   1e66e:	4a16      	ldr	r2, [pc, #88]	; (1e6c8 <nm_bus_init+0xcc>)
   1e670:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   1e672:	230c      	movs	r3, #12
   1e674:	18fa      	adds	r2, r7, r3
   1e676:	4915      	ldr	r1, [pc, #84]	; (1e6cc <nm_bus_init+0xd0>)
   1e678:	4b15      	ldr	r3, [pc, #84]	; (1e6d0 <nm_bus_init+0xd4>)
   1e67a:	0018      	movs	r0, r3
   1e67c:	4b15      	ldr	r3, [pc, #84]	; (1e6d4 <nm_bus_init+0xd8>)
   1e67e:	4798      	blx	r3
   1e680:	1e03      	subs	r3, r0, #0
   1e682:	d002      	beq.n	1e68a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   1e684:	2306      	movs	r3, #6
   1e686:	425b      	negs	r3, r3
   1e688:	e00c      	b.n	1e6a4 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   1e68a:	4b11      	ldr	r3, [pc, #68]	; (1e6d0 <nm_bus_init+0xd4>)
   1e68c:	0018      	movs	r0, r3
   1e68e:	4b12      	ldr	r3, [pc, #72]	; (1e6d8 <nm_bus_init+0xdc>)
   1e690:	4798      	blx	r3

	nm_bsp_reset();
   1e692:	4b12      	ldr	r3, [pc, #72]	; (1e6dc <nm_bus_init+0xe0>)
   1e694:	4798      	blx	r3
	nm_bsp_sleep(1);
   1e696:	2001      	movs	r0, #1
   1e698:	4b11      	ldr	r3, [pc, #68]	; (1e6e0 <nm_bus_init+0xe4>)
   1e69a:	4798      	blx	r3
#endif
	return result;
   1e69c:	2347      	movs	r3, #71	; 0x47
   1e69e:	18fb      	adds	r3, r7, r3
   1e6a0:	781b      	ldrb	r3, [r3, #0]
   1e6a2:	b25b      	sxtb	r3, r3
}
   1e6a4:	0018      	movs	r0, r3
   1e6a6:	46bd      	mov	sp, r7
   1e6a8:	b012      	add	sp, #72	; 0x48
   1e6aa:	bd80      	pop	{r7, pc}
   1e6ac:	0001e209 	.word	0x0001e209
   1e6b0:	20005404 	.word	0x20005404
   1e6b4:	0001e22d 	.word	0x0001e22d
   1e6b8:	0001e185 	.word	0x0001e185
   1e6bc:	000c0002 	.word	0x000c0002
   1e6c0:	000d0002 	.word	0x000d0002
   1e6c4:	000f0002 	.word	0x000f0002
   1e6c8:	00124f80 	.word	0x00124f80
   1e6cc:	42001000 	.word	0x42001000
   1e6d0:	20005408 	.word	0x20005408
   1e6d4:	00025a6d 	.word	0x00025a6d
   1e6d8:	0001e291 	.word	0x0001e291
   1e6dc:	0001df01 	.word	0x0001df01
   1e6e0:	0001df41 	.word	0x0001df41

0001e6e4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   1e6e4:	b590      	push	{r4, r7, lr}
   1e6e6:	b085      	sub	sp, #20
   1e6e8:	af00      	add	r7, sp, #0
   1e6ea:	0002      	movs	r2, r0
   1e6ec:	6039      	str	r1, [r7, #0]
   1e6ee:	1dfb      	adds	r3, r7, #7
   1e6f0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   1e6f2:	230f      	movs	r3, #15
   1e6f4:	18fb      	adds	r3, r7, r3
   1e6f6:	2200      	movs	r2, #0
   1e6f8:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   1e6fa:	1dfb      	adds	r3, r7, #7
   1e6fc:	781b      	ldrb	r3, [r3, #0]
   1e6fe:	2b03      	cmp	r3, #3
   1e700:	d10f      	bne.n	1e722 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   1e702:	683b      	ldr	r3, [r7, #0]
   1e704:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   1e706:	68bb      	ldr	r3, [r7, #8]
   1e708:	6818      	ldr	r0, [r3, #0]
   1e70a:	68bb      	ldr	r3, [r7, #8]
   1e70c:	6859      	ldr	r1, [r3, #4]
   1e70e:	68bb      	ldr	r3, [r7, #8]
   1e710:	891b      	ldrh	r3, [r3, #8]
   1e712:	220f      	movs	r2, #15
   1e714:	18bc      	adds	r4, r7, r2
   1e716:	001a      	movs	r2, r3
   1e718:	4b10      	ldr	r3, [pc, #64]	; (1e75c <nm_bus_ioctl+0x78>)
   1e71a:	4798      	blx	r3
   1e71c:	0003      	movs	r3, r0
   1e71e:	7023      	strb	r3, [r4, #0]
		}
		break;
   1e720:	e013      	b.n	1e74a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   1e722:	230f      	movs	r3, #15
   1e724:	18fb      	adds	r3, r7, r3
   1e726:	22ff      	movs	r2, #255	; 0xff
   1e728:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   1e72a:	2383      	movs	r3, #131	; 0x83
   1e72c:	005a      	lsls	r2, r3, #1
   1e72e:	490c      	ldr	r1, [pc, #48]	; (1e760 <nm_bus_ioctl+0x7c>)
   1e730:	4b0c      	ldr	r3, [pc, #48]	; (1e764 <nm_bus_ioctl+0x80>)
   1e732:	0018      	movs	r0, r3
   1e734:	4b0c      	ldr	r3, [pc, #48]	; (1e768 <nm_bus_ioctl+0x84>)
   1e736:	4798      	blx	r3
   1e738:	4b0c      	ldr	r3, [pc, #48]	; (1e76c <nm_bus_ioctl+0x88>)
   1e73a:	0018      	movs	r0, r3
   1e73c:	4b0a      	ldr	r3, [pc, #40]	; (1e768 <nm_bus_ioctl+0x84>)
   1e73e:	4798      	blx	r3
   1e740:	4b0b      	ldr	r3, [pc, #44]	; (1e770 <nm_bus_ioctl+0x8c>)
   1e742:	0018      	movs	r0, r3
   1e744:	4b08      	ldr	r3, [pc, #32]	; (1e768 <nm_bus_ioctl+0x84>)
   1e746:	4798      	blx	r3
			break;
   1e748:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   1e74a:	230f      	movs	r3, #15
   1e74c:	18fb      	adds	r3, r7, r3
   1e74e:	781b      	ldrb	r3, [r3, #0]
   1e750:	b25b      	sxtb	r3, r3
}
   1e752:	0018      	movs	r0, r3
   1e754:	46bd      	mov	sp, r7
   1e756:	b005      	add	sp, #20
   1e758:	bd90      	pop	{r4, r7, pc}
   1e75a:	46c0      	nop			; (mov r8, r8)
   1e75c:	0001e485 	.word	0x0001e485
   1e760:	000357c8 	.word	0x000357c8
   1e764:	0003579c 	.word	0x0003579c
   1e768:	0001baed 	.word	0x0001baed
   1e76c:	000357b0 	.word	0x000357b0
   1e770:	000357c4 	.word	0x000357c4

0001e774 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   1e774:	b580      	push	{r7, lr}
   1e776:	b082      	sub	sp, #8
   1e778:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   1e77a:	1dfb      	adds	r3, r7, #7
   1e77c:	2200      	movs	r2, #0
   1e77e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   1e780:	1d3b      	adds	r3, r7, #4
   1e782:	0018      	movs	r0, r3
   1e784:	4b13      	ldr	r3, [pc, #76]	; (1e7d4 <nm_bus_deinit+0x60>)
   1e786:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1e788:	1d3b      	adds	r3, r7, #4
   1e78a:	2200      	movs	r2, #0
   1e78c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   1e78e:	1d3b      	adds	r3, r7, #4
   1e790:	2200      	movs	r2, #0
   1e792:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   1e794:	4b10      	ldr	r3, [pc, #64]	; (1e7d8 <nm_bus_deinit+0x64>)
   1e796:	0018      	movs	r0, r3
   1e798:	4b10      	ldr	r3, [pc, #64]	; (1e7dc <nm_bus_deinit+0x68>)
   1e79a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   1e79c:	1d3b      	adds	r3, r7, #4
   1e79e:	0019      	movs	r1, r3
   1e7a0:	200c      	movs	r0, #12
   1e7a2:	4b0f      	ldr	r3, [pc, #60]	; (1e7e0 <nm_bus_deinit+0x6c>)
   1e7a4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   1e7a6:	1d3b      	adds	r3, r7, #4
   1e7a8:	0019      	movs	r1, r3
   1e7aa:	200f      	movs	r0, #15
   1e7ac:	4b0c      	ldr	r3, [pc, #48]	; (1e7e0 <nm_bus_deinit+0x6c>)
   1e7ae:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   1e7b0:	1d3b      	adds	r3, r7, #4
   1e7b2:	0019      	movs	r1, r3
   1e7b4:	200d      	movs	r0, #13
   1e7b6:	4b0a      	ldr	r3, [pc, #40]	; (1e7e0 <nm_bus_deinit+0x6c>)
   1e7b8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   1e7ba:	1d3b      	adds	r3, r7, #4
   1e7bc:	0019      	movs	r1, r3
   1e7be:	200e      	movs	r0, #14
   1e7c0:	4b07      	ldr	r3, [pc, #28]	; (1e7e0 <nm_bus_deinit+0x6c>)
   1e7c2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   1e7c4:	1dfb      	adds	r3, r7, #7
   1e7c6:	781b      	ldrb	r3, [r3, #0]
   1e7c8:	b25b      	sxtb	r3, r3
}
   1e7ca:	0018      	movs	r0, r3
   1e7cc:	46bd      	mov	sp, r7
   1e7ce:	b002      	add	sp, #8
   1e7d0:	bd80      	pop	{r7, pc}
   1e7d2:	46c0      	nop			; (mov r8, r8)
   1e7d4:	0001e0ed 	.word	0x0001e0ed
   1e7d8:	20005408 	.word	0x20005408
   1e7dc:	0001e2e1 	.word	0x0001e2e1
   1e7e0:	000245ed 	.word	0x000245ed

0001e7e4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   1e7e4:	b580      	push	{r7, lr}
   1e7e6:	b084      	sub	sp, #16
   1e7e8:	af00      	add	r7, sp, #0
   1e7ea:	60f8      	str	r0, [r7, #12]
   1e7ec:	60b9      	str	r1, [r7, #8]
   1e7ee:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   1e7f0:	687b      	ldr	r3, [r7, #4]
   1e7f2:	2b00      	cmp	r3, #0
   1e7f4:	d010      	beq.n	1e818 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   1e7f6:	68bb      	ldr	r3, [r7, #8]
   1e7f8:	781a      	ldrb	r2, [r3, #0]
   1e7fa:	68fb      	ldr	r3, [r7, #12]
   1e7fc:	701a      	strb	r2, [r3, #0]
		pDst++;
   1e7fe:	68fb      	ldr	r3, [r7, #12]
   1e800:	3301      	adds	r3, #1
   1e802:	60fb      	str	r3, [r7, #12]
		pSrc++;
   1e804:	68bb      	ldr	r3, [r7, #8]
   1e806:	3301      	adds	r3, #1
   1e808:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   1e80a:	687b      	ldr	r3, [r7, #4]
   1e80c:	3b01      	subs	r3, #1
   1e80e:	607b      	str	r3, [r7, #4]
   1e810:	687b      	ldr	r3, [r7, #4]
   1e812:	2b00      	cmp	r3, #0
   1e814:	d1ef      	bne.n	1e7f6 <m2m_memcpy+0x12>
   1e816:	e000      	b.n	1e81a <m2m_memcpy+0x36>
	if(sz == 0) return;
   1e818:	46c0      	nop			; (mov r8, r8)
}
   1e81a:	46bd      	mov	sp, r7
   1e81c:	b004      	add	sp, #16
   1e81e:	bd80      	pop	{r7, pc}

0001e820 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   1e820:	b580      	push	{r7, lr}
   1e822:	b084      	sub	sp, #16
   1e824:	af00      	add	r7, sp, #0
   1e826:	60f8      	str	r0, [r7, #12]
   1e828:	607a      	str	r2, [r7, #4]
   1e82a:	230b      	movs	r3, #11
   1e82c:	18fb      	adds	r3, r7, r3
   1e82e:	1c0a      	adds	r2, r1, #0
   1e830:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   1e832:	687b      	ldr	r3, [r7, #4]
   1e834:	2b00      	cmp	r3, #0
   1e836:	d00e      	beq.n	1e856 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   1e838:	68fb      	ldr	r3, [r7, #12]
   1e83a:	220b      	movs	r2, #11
   1e83c:	18ba      	adds	r2, r7, r2
   1e83e:	7812      	ldrb	r2, [r2, #0]
   1e840:	701a      	strb	r2, [r3, #0]
		pBuf++;
   1e842:	68fb      	ldr	r3, [r7, #12]
   1e844:	3301      	adds	r3, #1
   1e846:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   1e848:	687b      	ldr	r3, [r7, #4]
   1e84a:	3b01      	subs	r3, #1
   1e84c:	607b      	str	r3, [r7, #4]
   1e84e:	687b      	ldr	r3, [r7, #4]
   1e850:	2b00      	cmp	r3, #0
   1e852:	d1f1      	bne.n	1e838 <m2m_memset+0x18>
   1e854:	e000      	b.n	1e858 <m2m_memset+0x38>
	if(sz == 0) return;
   1e856:	46c0      	nop			; (mov r8, r8)
}
   1e858:	46bd      	mov	sp, r7
   1e85a:	b004      	add	sp, #16
   1e85c:	bd80      	pop	{r7, pc}

0001e85e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   1e85e:	b580      	push	{r7, lr}
   1e860:	b084      	sub	sp, #16
   1e862:	af00      	add	r7, sp, #0
   1e864:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   1e866:	230e      	movs	r3, #14
   1e868:	18fb      	adds	r3, r7, r3
   1e86a:	2200      	movs	r2, #0
   1e86c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   1e86e:	e009      	b.n	1e884 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   1e870:	230e      	movs	r3, #14
   1e872:	18fb      	adds	r3, r7, r3
   1e874:	881a      	ldrh	r2, [r3, #0]
   1e876:	230e      	movs	r3, #14
   1e878:	18fb      	adds	r3, r7, r3
   1e87a:	3201      	adds	r2, #1
   1e87c:	801a      	strh	r2, [r3, #0]
		pcStr++;
   1e87e:	687b      	ldr	r3, [r7, #4]
   1e880:	3301      	adds	r3, #1
   1e882:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   1e884:	687b      	ldr	r3, [r7, #4]
   1e886:	781b      	ldrb	r3, [r3, #0]
   1e888:	2b00      	cmp	r3, #0
   1e88a:	d1f1      	bne.n	1e870 <m2m_strlen+0x12>
	}
	return u16StrLen;
   1e88c:	230e      	movs	r3, #14
   1e88e:	18fb      	adds	r3, r7, r3
   1e890:	881b      	ldrh	r3, [r3, #0]
}
   1e892:	0018      	movs	r0, r3
   1e894:	46bd      	mov	sp, r7
   1e896:	b004      	add	sp, #16
   1e898:	bd80      	pop	{r7, pc}
	...

0001e89c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   1e89c:	b580      	push	{r7, lr}
   1e89e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   1e8a0:	4b04      	ldr	r3, [pc, #16]	; (1e8b4 <isr+0x18>)
   1e8a2:	78db      	ldrb	r3, [r3, #3]
   1e8a4:	b2db      	uxtb	r3, r3
   1e8a6:	3301      	adds	r3, #1
   1e8a8:	b2da      	uxtb	r2, r3
   1e8aa:	4b02      	ldr	r3, [pc, #8]	; (1e8b4 <isr+0x18>)
   1e8ac:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   1e8ae:	46c0      	nop			; (mov r8, r8)
   1e8b0:	46bd      	mov	sp, r7
   1e8b2:	bd80      	pop	{r7, pc}
   1e8b4:	20005444 	.word	0x20005444

0001e8b8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   1e8b8:	b590      	push	{r4, r7, lr}
   1e8ba:	b083      	sub	sp, #12
   1e8bc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   1e8be:	1dfb      	adds	r3, r7, #7
   1e8c0:	2200      	movs	r2, #0
   1e8c2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   1e8c4:	4b14      	ldr	r3, [pc, #80]	; (1e918 <hif_set_rx_done+0x60>)
   1e8c6:	2200      	movs	r2, #0
   1e8c8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   1e8ca:	2001      	movs	r0, #1
   1e8cc:	4b13      	ldr	r3, [pc, #76]	; (1e91c <hif_set_rx_done+0x64>)
   1e8ce:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   1e8d0:	1dfc      	adds	r4, r7, #7
   1e8d2:	003b      	movs	r3, r7
   1e8d4:	4a12      	ldr	r2, [pc, #72]	; (1e920 <hif_set_rx_done+0x68>)
   1e8d6:	0019      	movs	r1, r3
   1e8d8:	0010      	movs	r0, r2
   1e8da:	4b12      	ldr	r3, [pc, #72]	; (1e924 <hif_set_rx_done+0x6c>)
   1e8dc:	4798      	blx	r3
   1e8de:	0003      	movs	r3, r0
   1e8e0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   1e8e2:	1dfb      	adds	r3, r7, #7
   1e8e4:	781b      	ldrb	r3, [r3, #0]
   1e8e6:	b25b      	sxtb	r3, r3
   1e8e8:	2b00      	cmp	r3, #0
   1e8ea:	d10d      	bne.n	1e908 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   1e8ec:	683b      	ldr	r3, [r7, #0]
   1e8ee:	2202      	movs	r2, #2
   1e8f0:	4313      	orrs	r3, r2
   1e8f2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1e8f4:	683b      	ldr	r3, [r7, #0]
   1e8f6:	1dfc      	adds	r4, r7, #7
   1e8f8:	4a09      	ldr	r2, [pc, #36]	; (1e920 <hif_set_rx_done+0x68>)
   1e8fa:	0019      	movs	r1, r3
   1e8fc:	0010      	movs	r0, r2
   1e8fe:	4b0a      	ldr	r3, [pc, #40]	; (1e928 <hif_set_rx_done+0x70>)
   1e900:	4798      	blx	r3
   1e902:	0003      	movs	r3, r0
   1e904:	7023      	strb	r3, [r4, #0]
   1e906:	e000      	b.n	1e90a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   1e908:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   1e90a:	1dfb      	adds	r3, r7, #7
   1e90c:	781b      	ldrb	r3, [r3, #0]
   1e90e:	b25b      	sxtb	r3, r3

}
   1e910:	0018      	movs	r0, r3
   1e912:	46bd      	mov	sp, r7
   1e914:	b003      	add	sp, #12
   1e916:	bd90      	pop	{r4, r7, pc}
   1e918:	20005444 	.word	0x20005444
   1e91c:	0001dfd5 	.word	0x0001dfd5
   1e920:	00001070 	.word	0x00001070
   1e924:	000208b1 	.word	0x000208b1
   1e928:	000208d5 	.word	0x000208d5

0001e92c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   1e92c:	b580      	push	{r7, lr}
   1e92e:	b082      	sub	sp, #8
   1e930:	af00      	add	r7, sp, #0
   1e932:	603a      	str	r2, [r7, #0]
   1e934:	1dfb      	adds	r3, r7, #7
   1e936:	1c02      	adds	r2, r0, #0
   1e938:	701a      	strb	r2, [r3, #0]
   1e93a:	1d3b      	adds	r3, r7, #4
   1e93c:	1c0a      	adds	r2, r1, #0
   1e93e:	801a      	strh	r2, [r3, #0]


}
   1e940:	46c0      	nop			; (mov r8, r8)
   1e942:	46bd      	mov	sp, r7
   1e944:	b002      	add	sp, #8
   1e946:	bd80      	pop	{r7, pc}

0001e948 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   1e948:	b590      	push	{r4, r7, lr}
   1e94a:	b083      	sub	sp, #12
   1e94c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1e94e:	1dfb      	adds	r3, r7, #7
   1e950:	2200      	movs	r2, #0
   1e952:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   1e954:	4b16      	ldr	r3, [pc, #88]	; (1e9b0 <hif_chip_wake+0x68>)
   1e956:	789b      	ldrb	r3, [r3, #2]
   1e958:	b2db      	uxtb	r3, r3
   1e95a:	2b00      	cmp	r3, #0
   1e95c:	d003      	beq.n	1e966 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   1e95e:	1dfb      	adds	r3, r7, #7
   1e960:	781b      	ldrb	r3, [r3, #0]
   1e962:	b25b      	sxtb	r3, r3
   1e964:	e01f      	b.n	1e9a6 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   1e966:	4b12      	ldr	r3, [pc, #72]	; (1e9b0 <hif_chip_wake+0x68>)
   1e968:	785b      	ldrb	r3, [r3, #1]
   1e96a:	b2db      	uxtb	r3, r3
   1e96c:	2b00      	cmp	r3, #0
   1e96e:	d10e      	bne.n	1e98e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1e970:	4b0f      	ldr	r3, [pc, #60]	; (1e9b0 <hif_chip_wake+0x68>)
   1e972:	781b      	ldrb	r3, [r3, #0]
   1e974:	b2db      	uxtb	r3, r3
   1e976:	2b00      	cmp	r3, #0
   1e978:	d009      	beq.n	1e98e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   1e97a:	1dfc      	adds	r4, r7, #7
   1e97c:	4b0d      	ldr	r3, [pc, #52]	; (1e9b4 <hif_chip_wake+0x6c>)
   1e97e:	4798      	blx	r3
   1e980:	0003      	movs	r3, r0
   1e982:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   1e984:	1dfb      	adds	r3, r7, #7
   1e986:	781b      	ldrb	r3, [r3, #0]
   1e988:	b25b      	sxtb	r3, r3
   1e98a:	2b00      	cmp	r3, #0
   1e98c:	d107      	bne.n	1e99e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   1e98e:	4b08      	ldr	r3, [pc, #32]	; (1e9b0 <hif_chip_wake+0x68>)
   1e990:	785b      	ldrb	r3, [r3, #1]
   1e992:	b2db      	uxtb	r3, r3
   1e994:	3301      	adds	r3, #1
   1e996:	b2da      	uxtb	r2, r3
   1e998:	4b05      	ldr	r3, [pc, #20]	; (1e9b0 <hif_chip_wake+0x68>)
   1e99a:	705a      	strb	r2, [r3, #1]
   1e99c:	e000      	b.n	1e9a0 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   1e99e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   1e9a0:	1dfb      	adds	r3, r7, #7
   1e9a2:	781b      	ldrb	r3, [r3, #0]
   1e9a4:	b25b      	sxtb	r3, r3
}
   1e9a6:	0018      	movs	r0, r3
   1e9a8:	46bd      	mov	sp, r7
   1e9aa:	b003      	add	sp, #12
   1e9ac:	bd90      	pop	{r4, r7, pc}
   1e9ae:	46c0      	nop			; (mov r8, r8)
   1e9b0:	20005444 	.word	0x20005444
   1e9b4:	00020381 	.word	0x00020381

0001e9b8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   1e9b8:	b580      	push	{r7, lr}
   1e9ba:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   1e9bc:	4b07      	ldr	r3, [pc, #28]	; (1e9dc <hif_chip_sleep_sc+0x24>)
   1e9be:	785b      	ldrb	r3, [r3, #1]
   1e9c0:	b2db      	uxtb	r3, r3
   1e9c2:	2b00      	cmp	r3, #0
   1e9c4:	d006      	beq.n	1e9d4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   1e9c6:	4b05      	ldr	r3, [pc, #20]	; (1e9dc <hif_chip_sleep_sc+0x24>)
   1e9c8:	785b      	ldrb	r3, [r3, #1]
   1e9ca:	b2db      	uxtb	r3, r3
   1e9cc:	3b01      	subs	r3, #1
   1e9ce:	b2da      	uxtb	r2, r3
   1e9d0:	4b02      	ldr	r3, [pc, #8]	; (1e9dc <hif_chip_sleep_sc+0x24>)
   1e9d2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   1e9d4:	2300      	movs	r3, #0
}
   1e9d6:	0018      	movs	r0, r3
   1e9d8:	46bd      	mov	sp, r7
   1e9da:	bd80      	pop	{r7, pc}
   1e9dc:	20005444 	.word	0x20005444

0001e9e0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   1e9e0:	b590      	push	{r4, r7, lr}
   1e9e2:	b083      	sub	sp, #12
   1e9e4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1e9e6:	1dfb      	adds	r3, r7, #7
   1e9e8:	2200      	movs	r2, #0
   1e9ea:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   1e9ec:	4b10      	ldr	r3, [pc, #64]	; (1ea30 <hif_chip_sleep+0x50>)
   1e9ee:	785b      	ldrb	r3, [r3, #1]
   1e9f0:	b2db      	uxtb	r3, r3
   1e9f2:	2b00      	cmp	r3, #0
   1e9f4:	d006      	beq.n	1ea04 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   1e9f6:	4b0e      	ldr	r3, [pc, #56]	; (1ea30 <hif_chip_sleep+0x50>)
   1e9f8:	785b      	ldrb	r3, [r3, #1]
   1e9fa:	b2db      	uxtb	r3, r3
   1e9fc:	3b01      	subs	r3, #1
   1e9fe:	b2da      	uxtb	r2, r3
   1ea00:	4b0b      	ldr	r3, [pc, #44]	; (1ea30 <hif_chip_sleep+0x50>)
   1ea02:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   1ea04:	4b0a      	ldr	r3, [pc, #40]	; (1ea30 <hif_chip_sleep+0x50>)
   1ea06:	785b      	ldrb	r3, [r3, #1]
   1ea08:	b2db      	uxtb	r3, r3
   1ea0a:	2b00      	cmp	r3, #0
   1ea0c:	d109      	bne.n	1ea22 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1ea0e:	4b08      	ldr	r3, [pc, #32]	; (1ea30 <hif_chip_sleep+0x50>)
   1ea10:	781b      	ldrb	r3, [r3, #0]
   1ea12:	b2db      	uxtb	r3, r3
   1ea14:	2b00      	cmp	r3, #0
   1ea16:	d004      	beq.n	1ea22 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   1ea18:	1dfc      	adds	r4, r7, #7
   1ea1a:	4b06      	ldr	r3, [pc, #24]	; (1ea34 <hif_chip_sleep+0x54>)
   1ea1c:	4798      	blx	r3
   1ea1e:	0003      	movs	r3, r0
   1ea20:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   1ea22:	1dfb      	adds	r3, r7, #7
   1ea24:	781b      	ldrb	r3, [r3, #0]
   1ea26:	b25b      	sxtb	r3, r3
}
   1ea28:	0018      	movs	r0, r3
   1ea2a:	46bd      	mov	sp, r7
   1ea2c:	b003      	add	sp, #12
   1ea2e:	bd90      	pop	{r4, r7, pc}
   1ea30:	20005444 	.word	0x20005444
   1ea34:	000202a9 	.word	0x000202a9

0001ea38 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   1ea38:	b580      	push	{r7, lr}
   1ea3a:	b082      	sub	sp, #8
   1ea3c:	af00      	add	r7, sp, #0
   1ea3e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   1ea40:	4b09      	ldr	r3, [pc, #36]	; (1ea68 <hif_init+0x30>)
   1ea42:	222c      	movs	r2, #44	; 0x2c
   1ea44:	2100      	movs	r1, #0
   1ea46:	0018      	movs	r0, r3
   1ea48:	4b08      	ldr	r3, [pc, #32]	; (1ea6c <hif_init+0x34>)
   1ea4a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   1ea4c:	4b08      	ldr	r3, [pc, #32]	; (1ea70 <hif_init+0x38>)
   1ea4e:	0018      	movs	r0, r3
   1ea50:	4b08      	ldr	r3, [pc, #32]	; (1ea74 <hif_init+0x3c>)
   1ea52:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   1ea54:	4b08      	ldr	r3, [pc, #32]	; (1ea78 <hif_init+0x40>)
   1ea56:	0019      	movs	r1, r3
   1ea58:	2003      	movs	r0, #3
   1ea5a:	4b08      	ldr	r3, [pc, #32]	; (1ea7c <hif_init+0x44>)
   1ea5c:	4798      	blx	r3
	return M2M_SUCCESS;
   1ea5e:	2300      	movs	r3, #0
}
   1ea60:	0018      	movs	r0, r3
   1ea62:	46bd      	mov	sp, r7
   1ea64:	b002      	add	sp, #8
   1ea66:	bd80      	pop	{r7, pc}
   1ea68:	20005444 	.word	0x20005444
   1ea6c:	0001e821 	.word	0x0001e821
   1ea70:	0001e89d 	.word	0x0001e89d
   1ea74:	0001df5d 	.word	0x0001df5d
   1ea78:	0001e92d 	.word	0x0001e92d
   1ea7c:	0001f51d 	.word	0x0001f51d

0001ea80 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   1ea80:	b590      	push	{r4, r7, lr}
   1ea82:	b089      	sub	sp, #36	; 0x24
   1ea84:	af00      	add	r7, sp, #0
   1ea86:	0004      	movs	r4, r0
   1ea88:	0008      	movs	r0, r1
   1ea8a:	603a      	str	r2, [r7, #0]
   1ea8c:	0019      	movs	r1, r3
   1ea8e:	1dfb      	adds	r3, r7, #7
   1ea90:	1c22      	adds	r2, r4, #0
   1ea92:	701a      	strb	r2, [r3, #0]
   1ea94:	1dbb      	adds	r3, r7, #6
   1ea96:	1c02      	adds	r2, r0, #0
   1ea98:	701a      	strb	r2, [r3, #0]
   1ea9a:	1d3b      	adds	r3, r7, #4
   1ea9c:	1c0a      	adds	r2, r1, #0
   1ea9e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   1eaa0:	231f      	movs	r3, #31
   1eaa2:	18fb      	adds	r3, r7, r3
   1eaa4:	22ff      	movs	r2, #255	; 0xff
   1eaa6:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   1eaa8:	1dbb      	adds	r3, r7, #6
   1eaaa:	781b      	ldrb	r3, [r3, #0]
   1eaac:	227f      	movs	r2, #127	; 0x7f
   1eaae:	4013      	ands	r3, r2
   1eab0:	b2da      	uxtb	r2, r3
   1eab2:	2318      	movs	r3, #24
   1eab4:	18fb      	adds	r3, r7, r3
   1eab6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   1eab8:	2318      	movs	r3, #24
   1eaba:	18fb      	adds	r3, r7, r3
   1eabc:	1dfa      	adds	r2, r7, #7
   1eabe:	7812      	ldrb	r2, [r2, #0]
   1eac0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   1eac2:	2318      	movs	r3, #24
   1eac4:	18fb      	adds	r3, r7, r3
   1eac6:	2208      	movs	r2, #8
   1eac8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   1eaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1eacc:	2b00      	cmp	r3, #0
   1eace:	d011      	beq.n	1eaf4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   1ead0:	2318      	movs	r3, #24
   1ead2:	18fb      	adds	r3, r7, r3
   1ead4:	885b      	ldrh	r3, [r3, #2]
   1ead6:	b29a      	uxth	r2, r3
   1ead8:	2338      	movs	r3, #56	; 0x38
   1eada:	18f9      	adds	r1, r7, r3
   1eadc:	2334      	movs	r3, #52	; 0x34
   1eade:	18fb      	adds	r3, r7, r3
   1eae0:	8809      	ldrh	r1, [r1, #0]
   1eae2:	881b      	ldrh	r3, [r3, #0]
   1eae4:	18cb      	adds	r3, r1, r3
   1eae6:	b29b      	uxth	r3, r3
   1eae8:	18d3      	adds	r3, r2, r3
   1eaea:	b29a      	uxth	r2, r3
   1eaec:	2318      	movs	r3, #24
   1eaee:	18fb      	adds	r3, r7, r3
   1eaf0:	805a      	strh	r2, [r3, #2]
   1eaf2:	e00a      	b.n	1eb0a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   1eaf4:	2318      	movs	r3, #24
   1eaf6:	18fb      	adds	r3, r7, r3
   1eaf8:	885b      	ldrh	r3, [r3, #2]
   1eafa:	b29a      	uxth	r2, r3
   1eafc:	1d3b      	adds	r3, r7, #4
   1eafe:	881b      	ldrh	r3, [r3, #0]
   1eb00:	18d3      	adds	r3, r2, r3
   1eb02:	b29a      	uxth	r2, r3
   1eb04:	2318      	movs	r3, #24
   1eb06:	18fb      	adds	r3, r7, r3
   1eb08:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   1eb0a:	231f      	movs	r3, #31
   1eb0c:	18fc      	adds	r4, r7, r3
   1eb0e:	4bb2      	ldr	r3, [pc, #712]	; (1edd8 <hif_send+0x358>)
   1eb10:	4798      	blx	r3
   1eb12:	0003      	movs	r3, r0
   1eb14:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   1eb16:	231f      	movs	r3, #31
   1eb18:	18fb      	adds	r3, r7, r3
   1eb1a:	781b      	ldrb	r3, [r3, #0]
   1eb1c:	b25b      	sxtb	r3, r3
   1eb1e:	2b00      	cmp	r3, #0
   1eb20:	d000      	beq.n	1eb24 <hif_send+0xa4>
   1eb22:	e129      	b.n	1ed78 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   1eb24:	2300      	movs	r3, #0
   1eb26:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   1eb28:	230e      	movs	r3, #14
   1eb2a:	18fb      	adds	r3, r7, r3
   1eb2c:	2200      	movs	r2, #0
   1eb2e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   1eb30:	2300      	movs	r3, #0
   1eb32:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   1eb34:	1dfb      	adds	r3, r7, #7
   1eb36:	781a      	ldrb	r2, [r3, #0]
   1eb38:	697b      	ldr	r3, [r7, #20]
   1eb3a:	4313      	orrs	r3, r2
   1eb3c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   1eb3e:	1dbb      	adds	r3, r7, #6
   1eb40:	781b      	ldrb	r3, [r3, #0]
   1eb42:	021a      	lsls	r2, r3, #8
   1eb44:	697b      	ldr	r3, [r7, #20]
   1eb46:	4313      	orrs	r3, r2
   1eb48:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   1eb4a:	2318      	movs	r3, #24
   1eb4c:	18fb      	adds	r3, r7, r3
   1eb4e:	885b      	ldrh	r3, [r3, #2]
   1eb50:	b29b      	uxth	r3, r3
   1eb52:	041a      	lsls	r2, r3, #16
   1eb54:	697b      	ldr	r3, [r7, #20]
   1eb56:	4313      	orrs	r3, r2
   1eb58:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   1eb5a:	697b      	ldr	r3, [r7, #20]
   1eb5c:	221f      	movs	r2, #31
   1eb5e:	18bc      	adds	r4, r7, r2
   1eb60:	4a9e      	ldr	r2, [pc, #632]	; (1eddc <hif_send+0x35c>)
   1eb62:	0019      	movs	r1, r3
   1eb64:	0010      	movs	r0, r2
   1eb66:	4b9e      	ldr	r3, [pc, #632]	; (1ede0 <hif_send+0x360>)
   1eb68:	4798      	blx	r3
   1eb6a:	0003      	movs	r3, r0
   1eb6c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   1eb6e:	231f      	movs	r3, #31
   1eb70:	18fb      	adds	r3, r7, r3
   1eb72:	781b      	ldrb	r3, [r3, #0]
   1eb74:	b25b      	sxtb	r3, r3
   1eb76:	2b00      	cmp	r3, #0
   1eb78:	d000      	beq.n	1eb7c <hif_send+0xfc>
   1eb7a:	e119      	b.n	1edb0 <hif_send+0x330>

		reg = 0UL;
   1eb7c:	2300      	movs	r3, #0
   1eb7e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   1eb80:	697b      	ldr	r3, [r7, #20]
   1eb82:	2202      	movs	r2, #2
   1eb84:	4313      	orrs	r3, r2
   1eb86:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   1eb88:	697b      	ldr	r3, [r7, #20]
   1eb8a:	221f      	movs	r2, #31
   1eb8c:	18bc      	adds	r4, r7, r2
   1eb8e:	4a95      	ldr	r2, [pc, #596]	; (1ede4 <hif_send+0x364>)
   1eb90:	0019      	movs	r1, r3
   1eb92:	0010      	movs	r0, r2
   1eb94:	4b92      	ldr	r3, [pc, #584]	; (1ede0 <hif_send+0x360>)
   1eb96:	4798      	blx	r3
   1eb98:	0003      	movs	r3, r0
   1eb9a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   1eb9c:	231f      	movs	r3, #31
   1eb9e:	18fb      	adds	r3, r7, r3
   1eba0:	781b      	ldrb	r3, [r3, #0]
   1eba2:	b25b      	sxtb	r3, r3
   1eba4:	2b00      	cmp	r3, #0
   1eba6:	d000      	beq.n	1ebaa <hif_send+0x12a>
   1eba8:	e104      	b.n	1edb4 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   1ebaa:	2300      	movs	r3, #0
   1ebac:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   1ebae:	230e      	movs	r3, #14
   1ebb0:	18fb      	adds	r3, r7, r3
   1ebb2:	2200      	movs	r2, #0
   1ebb4:	801a      	strh	r2, [r3, #0]
   1ebb6:	e050      	b.n	1ec5a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   1ebb8:	231f      	movs	r3, #31
   1ebba:	18fc      	adds	r4, r7, r3
   1ebbc:	2314      	movs	r3, #20
   1ebbe:	18fb      	adds	r3, r7, r3
   1ebc0:	4a88      	ldr	r2, [pc, #544]	; (1ede4 <hif_send+0x364>)
   1ebc2:	0019      	movs	r1, r3
   1ebc4:	0010      	movs	r0, r2
   1ebc6:	4b88      	ldr	r3, [pc, #544]	; (1ede8 <hif_send+0x368>)
   1ebc8:	4798      	blx	r3
   1ebca:	0003      	movs	r3, r0
   1ebcc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   1ebce:	231f      	movs	r3, #31
   1ebd0:	18fb      	adds	r3, r7, r3
   1ebd2:	781b      	ldrb	r3, [r3, #0]
   1ebd4:	b25b      	sxtb	r3, r3
   1ebd6:	2b00      	cmp	r3, #0
   1ebd8:	d147      	bne.n	1ec6a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   1ebda:	230e      	movs	r3, #14
   1ebdc:	18fb      	adds	r3, r7, r3
   1ebde:	881b      	ldrh	r3, [r3, #0]
   1ebe0:	b29a      	uxth	r2, r3
   1ebe2:	23f4      	movs	r3, #244	; 0xf4
   1ebe4:	33ff      	adds	r3, #255	; 0xff
   1ebe6:	429a      	cmp	r2, r3
   1ebe8:	d916      	bls.n	1ec18 <hif_send+0x198>
				if(cnt < 501) {
   1ebea:	230e      	movs	r3, #14
   1ebec:	18fb      	adds	r3, r7, r3
   1ebee:	881b      	ldrh	r3, [r3, #0]
   1ebf0:	b29a      	uxth	r2, r3
   1ebf2:	23fa      	movs	r3, #250	; 0xfa
   1ebf4:	005b      	lsls	r3, r3, #1
   1ebf6:	429a      	cmp	r2, r3
   1ebf8:	d80b      	bhi.n	1ec12 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   1ebfa:	4b7c      	ldr	r3, [pc, #496]	; (1edec <hif_send+0x36c>)
   1ebfc:	0018      	movs	r0, r3
   1ebfe:	4b7c      	ldr	r3, [pc, #496]	; (1edf0 <hif_send+0x370>)
   1ec00:	4798      	blx	r3
   1ec02:	4b7c      	ldr	r3, [pc, #496]	; (1edf4 <hif_send+0x374>)
   1ec04:	0018      	movs	r0, r3
   1ec06:	4b7a      	ldr	r3, [pc, #488]	; (1edf0 <hif_send+0x370>)
   1ec08:	4798      	blx	r3
   1ec0a:	4b7b      	ldr	r3, [pc, #492]	; (1edf8 <hif_send+0x378>)
   1ec0c:	0018      	movs	r0, r3
   1ec0e:	4b78      	ldr	r3, [pc, #480]	; (1edf0 <hif_send+0x370>)
   1ec10:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   1ec12:	2001      	movs	r0, #1
   1ec14:	4b79      	ldr	r3, [pc, #484]	; (1edfc <hif_send+0x37c>)
   1ec16:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   1ec18:	697b      	ldr	r3, [r7, #20]
   1ec1a:	2202      	movs	r2, #2
   1ec1c:	4013      	ands	r3, r2
   1ec1e:	d113      	bne.n	1ec48 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   1ec20:	231f      	movs	r3, #31
   1ec22:	18fc      	adds	r4, r7, r3
   1ec24:	2310      	movs	r3, #16
   1ec26:	18fb      	adds	r3, r7, r3
   1ec28:	4a75      	ldr	r2, [pc, #468]	; (1ee00 <hif_send+0x380>)
   1ec2a:	0019      	movs	r1, r3
   1ec2c:	0010      	movs	r0, r2
   1ec2e:	4b6e      	ldr	r3, [pc, #440]	; (1ede8 <hif_send+0x368>)
   1ec30:	4798      	blx	r3
   1ec32:	0003      	movs	r3, r0
   1ec34:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   1ec36:	231f      	movs	r3, #31
   1ec38:	18fb      	adds	r3, r7, r3
   1ec3a:	781b      	ldrb	r3, [r3, #0]
   1ec3c:	b25b      	sxtb	r3, r3
   1ec3e:	2b00      	cmp	r3, #0
   1ec40:	d015      	beq.n	1ec6e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   1ec42:	2300      	movs	r3, #0
   1ec44:	613b      	str	r3, [r7, #16]
					goto ERR1;
   1ec46:	e0bc      	b.n	1edc2 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   1ec48:	230e      	movs	r3, #14
   1ec4a:	18fb      	adds	r3, r7, r3
   1ec4c:	881b      	ldrh	r3, [r3, #0]
   1ec4e:	b29b      	uxth	r3, r3
   1ec50:	3301      	adds	r3, #1
   1ec52:	b29a      	uxth	r2, r3
   1ec54:	230e      	movs	r3, #14
   1ec56:	18fb      	adds	r3, r7, r3
   1ec58:	801a      	strh	r2, [r3, #0]
   1ec5a:	230e      	movs	r3, #14
   1ec5c:	18fb      	adds	r3, r7, r3
   1ec5e:	881b      	ldrh	r3, [r3, #0]
   1ec60:	b29b      	uxth	r3, r3
   1ec62:	4a68      	ldr	r2, [pc, #416]	; (1ee04 <hif_send+0x384>)
   1ec64:	4293      	cmp	r3, r2
   1ec66:	d9a7      	bls.n	1ebb8 <hif_send+0x138>
   1ec68:	e002      	b.n	1ec70 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   1ec6a:	46c0      	nop			; (mov r8, r8)
   1ec6c:	e000      	b.n	1ec70 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   1ec6e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   1ec70:	693b      	ldr	r3, [r7, #16]
   1ec72:	2b00      	cmp	r3, #0
   1ec74:	d100      	bne.n	1ec78 <hif_send+0x1f8>
   1ec76:	e074      	b.n	1ed62 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   1ec78:	693b      	ldr	r3, [r7, #16]
   1ec7a:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   1ec7c:	2318      	movs	r3, #24
   1ec7e:	18fb      	adds	r3, r7, r3
   1ec80:	885b      	ldrh	r3, [r3, #2]
   1ec82:	b29a      	uxth	r2, r3
   1ec84:	2318      	movs	r3, #24
   1ec86:	18fb      	adds	r3, r7, r3
   1ec88:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   1ec8a:	68bb      	ldr	r3, [r7, #8]
   1ec8c:	221f      	movs	r2, #31
   1ec8e:	18bc      	adds	r4, r7, r2
   1ec90:	2218      	movs	r2, #24
   1ec92:	18b9      	adds	r1, r7, r2
   1ec94:	2208      	movs	r2, #8
   1ec96:	0018      	movs	r0, r3
   1ec98:	4b5b      	ldr	r3, [pc, #364]	; (1ee08 <hif_send+0x388>)
   1ec9a:	4798      	blx	r3
   1ec9c:	0003      	movs	r3, r0
   1ec9e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   1eca0:	231f      	movs	r3, #31
   1eca2:	18fb      	adds	r3, r7, r3
   1eca4:	781b      	ldrb	r3, [r3, #0]
   1eca6:	b25b      	sxtb	r3, r3
   1eca8:	2b00      	cmp	r3, #0
   1ecaa:	d000      	beq.n	1ecae <hif_send+0x22e>
   1ecac:	e084      	b.n	1edb8 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   1ecae:	68bb      	ldr	r3, [r7, #8]
   1ecb0:	3308      	adds	r3, #8
   1ecb2:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   1ecb4:	683b      	ldr	r3, [r7, #0]
   1ecb6:	2b00      	cmp	r3, #0
   1ecb8:	d016      	beq.n	1ece8 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   1ecba:	68b8      	ldr	r0, [r7, #8]
   1ecbc:	1d3b      	adds	r3, r7, #4
   1ecbe:	881a      	ldrh	r2, [r3, #0]
   1ecc0:	231f      	movs	r3, #31
   1ecc2:	18fc      	adds	r4, r7, r3
   1ecc4:	683b      	ldr	r3, [r7, #0]
   1ecc6:	0019      	movs	r1, r3
   1ecc8:	4b4f      	ldr	r3, [pc, #316]	; (1ee08 <hif_send+0x388>)
   1ecca:	4798      	blx	r3
   1eccc:	0003      	movs	r3, r0
   1ecce:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   1ecd0:	231f      	movs	r3, #31
   1ecd2:	18fb      	adds	r3, r7, r3
   1ecd4:	781b      	ldrb	r3, [r3, #0]
   1ecd6:	b25b      	sxtb	r3, r3
   1ecd8:	2b00      	cmp	r3, #0
   1ecda:	d000      	beq.n	1ecde <hif_send+0x25e>
   1ecdc:	e06e      	b.n	1edbc <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   1ecde:	1d3b      	adds	r3, r7, #4
   1ece0:	881a      	ldrh	r2, [r3, #0]
   1ece2:	68bb      	ldr	r3, [r7, #8]
   1ece4:	18d3      	adds	r3, r2, r3
   1ece6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   1ece8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ecea:	2b00      	cmp	r3, #0
   1ecec:	d021      	beq.n	1ed32 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   1ecee:	2338      	movs	r3, #56	; 0x38
   1ecf0:	18fb      	adds	r3, r7, r3
   1ecf2:	881a      	ldrh	r2, [r3, #0]
   1ecf4:	1d3b      	adds	r3, r7, #4
   1ecf6:	881b      	ldrh	r3, [r3, #0]
   1ecf8:	1ad3      	subs	r3, r2, r3
   1ecfa:	001a      	movs	r2, r3
   1ecfc:	68bb      	ldr	r3, [r7, #8]
   1ecfe:	18d3      	adds	r3, r2, r3
   1ed00:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   1ed02:	68b8      	ldr	r0, [r7, #8]
   1ed04:	2334      	movs	r3, #52	; 0x34
   1ed06:	18fb      	adds	r3, r7, r3
   1ed08:	881a      	ldrh	r2, [r3, #0]
   1ed0a:	231f      	movs	r3, #31
   1ed0c:	18fc      	adds	r4, r7, r3
   1ed0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ed10:	0019      	movs	r1, r3
   1ed12:	4b3d      	ldr	r3, [pc, #244]	; (1ee08 <hif_send+0x388>)
   1ed14:	4798      	blx	r3
   1ed16:	0003      	movs	r3, r0
   1ed18:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   1ed1a:	231f      	movs	r3, #31
   1ed1c:	18fb      	adds	r3, r7, r3
   1ed1e:	781b      	ldrb	r3, [r3, #0]
   1ed20:	b25b      	sxtb	r3, r3
   1ed22:	2b00      	cmp	r3, #0
   1ed24:	d14c      	bne.n	1edc0 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   1ed26:	2334      	movs	r3, #52	; 0x34
   1ed28:	18fb      	adds	r3, r7, r3
   1ed2a:	881a      	ldrh	r2, [r3, #0]
   1ed2c:	68bb      	ldr	r3, [r7, #8]
   1ed2e:	18d3      	adds	r3, r2, r3
   1ed30:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   1ed32:	693b      	ldr	r3, [r7, #16]
   1ed34:	009b      	lsls	r3, r3, #2
   1ed36:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   1ed38:	697b      	ldr	r3, [r7, #20]
   1ed3a:	2202      	movs	r2, #2
   1ed3c:	4313      	orrs	r3, r2
   1ed3e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   1ed40:	697b      	ldr	r3, [r7, #20]
   1ed42:	221f      	movs	r2, #31
   1ed44:	18bc      	adds	r4, r7, r2
   1ed46:	4a31      	ldr	r2, [pc, #196]	; (1ee0c <hif_send+0x38c>)
   1ed48:	0019      	movs	r1, r3
   1ed4a:	0010      	movs	r0, r2
   1ed4c:	4b24      	ldr	r3, [pc, #144]	; (1ede0 <hif_send+0x360>)
   1ed4e:	4798      	blx	r3
   1ed50:	0003      	movs	r3, r0
   1ed52:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   1ed54:	231f      	movs	r3, #31
   1ed56:	18fb      	adds	r3, r7, r3
   1ed58:	781b      	ldrb	r3, [r3, #0]
   1ed5a:	b25b      	sxtb	r3, r3
   1ed5c:	2b00      	cmp	r3, #0
   1ed5e:	d01c      	beq.n	1ed9a <hif_send+0x31a>
   1ed60:	e02f      	b.n	1edc2 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   1ed62:	231f      	movs	r3, #31
   1ed64:	18fc      	adds	r4, r7, r3
   1ed66:	4b2a      	ldr	r3, [pc, #168]	; (1ee10 <hif_send+0x390>)
   1ed68:	4798      	blx	r3
   1ed6a:	0003      	movs	r3, r0
   1ed6c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   1ed6e:	231f      	movs	r3, #31
   1ed70:	18fb      	adds	r3, r7, r3
   1ed72:	22fd      	movs	r2, #253	; 0xfd
   1ed74:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   1ed76:	e026      	b.n	1edc6 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   1ed78:	2398      	movs	r3, #152	; 0x98
   1ed7a:	33ff      	adds	r3, #255	; 0xff
   1ed7c:	001a      	movs	r2, r3
   1ed7e:	4925      	ldr	r1, [pc, #148]	; (1ee14 <hif_send+0x394>)
   1ed80:	4b25      	ldr	r3, [pc, #148]	; (1ee18 <hif_send+0x398>)
   1ed82:	0018      	movs	r0, r3
   1ed84:	4b1a      	ldr	r3, [pc, #104]	; (1edf0 <hif_send+0x370>)
   1ed86:	4798      	blx	r3
   1ed88:	4b24      	ldr	r3, [pc, #144]	; (1ee1c <hif_send+0x39c>)
   1ed8a:	0018      	movs	r0, r3
   1ed8c:	4b18      	ldr	r3, [pc, #96]	; (1edf0 <hif_send+0x370>)
   1ed8e:	4798      	blx	r3
   1ed90:	4b19      	ldr	r3, [pc, #100]	; (1edf8 <hif_send+0x378>)
   1ed92:	0018      	movs	r0, r3
   1ed94:	4b16      	ldr	r3, [pc, #88]	; (1edf0 <hif_send+0x370>)
   1ed96:	4798      	blx	r3
		goto ERR2;
   1ed98:	e015      	b.n	1edc6 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   1ed9a:	231f      	movs	r3, #31
   1ed9c:	18fc      	adds	r4, r7, r3
   1ed9e:	4b1c      	ldr	r3, [pc, #112]	; (1ee10 <hif_send+0x390>)
   1eda0:	4798      	blx	r3
   1eda2:	0003      	movs	r3, r0
   1eda4:	7023      	strb	r3, [r4, #0]
	return ret;
   1eda6:	231f      	movs	r3, #31
   1eda8:	18fb      	adds	r3, r7, r3
   1edaa:	781b      	ldrb	r3, [r3, #0]
   1edac:	b25b      	sxtb	r3, r3
   1edae:	e00e      	b.n	1edce <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   1edb0:	46c0      	nop			; (mov r8, r8)
   1edb2:	e006      	b.n	1edc2 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   1edb4:	46c0      	nop			; (mov r8, r8)
   1edb6:	e004      	b.n	1edc2 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   1edb8:	46c0      	nop			; (mov r8, r8)
   1edba:	e002      	b.n	1edc2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   1edbc:	46c0      	nop			; (mov r8, r8)
   1edbe:	e000      	b.n	1edc2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   1edc0:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   1edc2:	4b17      	ldr	r3, [pc, #92]	; (1ee20 <hif_send+0x3a0>)
   1edc4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   1edc6:	231f      	movs	r3, #31
   1edc8:	18fb      	adds	r3, r7, r3
   1edca:	781b      	ldrb	r3, [r3, #0]
   1edcc:	b25b      	sxtb	r3, r3
}
   1edce:	0018      	movs	r0, r3
   1edd0:	46bd      	mov	sp, r7
   1edd2:	b009      	add	sp, #36	; 0x24
   1edd4:	bd90      	pop	{r4, r7, pc}
   1edd6:	46c0      	nop			; (mov r8, r8)
   1edd8:	0001e949 	.word	0x0001e949
   1eddc:	0000108c 	.word	0x0000108c
   1ede0:	000208d5 	.word	0x000208d5
   1ede4:	00001078 	.word	0x00001078
   1ede8:	000208b1 	.word	0x000208b1
   1edec:	000357d8 	.word	0x000357d8
   1edf0:	0001baed 	.word	0x0001baed
   1edf4:	000357e4 	.word	0x000357e4
   1edf8:	000357f8 	.word	0x000357f8
   1edfc:	0001df41 	.word	0x0001df41
   1ee00:	00150400 	.word	0x00150400
   1ee04:	000003e7 	.word	0x000003e7
   1ee08:	00020a1d 	.word	0x00020a1d
   1ee0c:	0000106c 	.word	0x0000106c
   1ee10:	0001e9e1 	.word	0x0001e9e1
   1ee14:	00035b00 	.word	0x00035b00
   1ee18:	000357fc 	.word	0x000357fc
   1ee1c:	00035810 	.word	0x00035810
   1ee20:	0001e9b9 	.word	0x0001e9b9

0001ee24 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   1ee24:	b590      	push	{r4, r7, lr}
   1ee26:	b087      	sub	sp, #28
   1ee28:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   1ee2a:	230f      	movs	r3, #15
   1ee2c:	18fb      	adds	r3, r7, r3
   1ee2e:	2200      	movs	r2, #0
   1ee30:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   1ee32:	230f      	movs	r3, #15
   1ee34:	18fc      	adds	r4, r7, r3
   1ee36:	2308      	movs	r3, #8
   1ee38:	18fb      	adds	r3, r7, r3
   1ee3a:	4adc      	ldr	r2, [pc, #880]	; (1f1ac <hif_isr+0x388>)
   1ee3c:	0019      	movs	r1, r3
   1ee3e:	0010      	movs	r0, r2
   1ee40:	4bdb      	ldr	r3, [pc, #876]	; (1f1b0 <hif_isr+0x38c>)
   1ee42:	4798      	blx	r3
   1ee44:	0003      	movs	r3, r0
   1ee46:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   1ee48:	230f      	movs	r3, #15
   1ee4a:	18fb      	adds	r3, r7, r3
   1ee4c:	781b      	ldrb	r3, [r3, #0]
   1ee4e:	b25b      	sxtb	r3, r3
   1ee50:	2b00      	cmp	r3, #0
   1ee52:	d000      	beq.n	1ee56 <hif_isr+0x32>
   1ee54:	e21e      	b.n	1f294 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   1ee56:	68bb      	ldr	r3, [r7, #8]
   1ee58:	2201      	movs	r2, #1
   1ee5a:	4013      	ands	r3, r2
   1ee5c:	d100      	bne.n	1ee60 <hif_isr+0x3c>
   1ee5e:	e204      	b.n	1f26a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   1ee60:	2000      	movs	r0, #0
   1ee62:	4bd4      	ldr	r3, [pc, #848]	; (1f1b4 <hif_isr+0x390>)
   1ee64:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   1ee66:	68bb      	ldr	r3, [r7, #8]
   1ee68:	2201      	movs	r2, #1
   1ee6a:	4393      	bics	r3, r2
   1ee6c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1ee6e:	68bb      	ldr	r3, [r7, #8]
   1ee70:	220f      	movs	r2, #15
   1ee72:	18bc      	adds	r4, r7, r2
   1ee74:	4acd      	ldr	r2, [pc, #820]	; (1f1ac <hif_isr+0x388>)
   1ee76:	0019      	movs	r1, r3
   1ee78:	0010      	movs	r0, r2
   1ee7a:	4bcf      	ldr	r3, [pc, #828]	; (1f1b8 <hif_isr+0x394>)
   1ee7c:	4798      	blx	r3
   1ee7e:	0003      	movs	r3, r0
   1ee80:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   1ee82:	230f      	movs	r3, #15
   1ee84:	18fb      	adds	r3, r7, r3
   1ee86:	781b      	ldrb	r3, [r3, #0]
   1ee88:	b25b      	sxtb	r3, r3
   1ee8a:	2b00      	cmp	r3, #0
   1ee8c:	d000      	beq.n	1ee90 <hif_isr+0x6c>
   1ee8e:	e210      	b.n	1f2b2 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   1ee90:	4bca      	ldr	r3, [pc, #808]	; (1f1bc <hif_isr+0x398>)
   1ee92:	2201      	movs	r2, #1
   1ee94:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   1ee96:	68bb      	ldr	r3, [r7, #8]
   1ee98:	089b      	lsrs	r3, r3, #2
   1ee9a:	b29a      	uxth	r2, r3
   1ee9c:	230c      	movs	r3, #12
   1ee9e:	18fb      	adds	r3, r7, r3
   1eea0:	0512      	lsls	r2, r2, #20
   1eea2:	0d12      	lsrs	r2, r2, #20
   1eea4:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   1eea6:	230c      	movs	r3, #12
   1eea8:	18fb      	adds	r3, r7, r3
   1eeaa:	881b      	ldrh	r3, [r3, #0]
   1eeac:	2b00      	cmp	r3, #0
   1eeae:	d100      	bne.n	1eeb2 <hif_isr+0x8e>
   1eeb0:	e1c8      	b.n	1f244 <hif_isr+0x420>
				uint32 address = 0;
   1eeb2:	2300      	movs	r3, #0
   1eeb4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   1eeb6:	230f      	movs	r3, #15
   1eeb8:	18fc      	adds	r4, r7, r3
   1eeba:	003b      	movs	r3, r7
   1eebc:	4ac0      	ldr	r2, [pc, #768]	; (1f1c0 <hif_isr+0x39c>)
   1eebe:	0019      	movs	r1, r3
   1eec0:	0010      	movs	r0, r2
   1eec2:	4bbb      	ldr	r3, [pc, #748]	; (1f1b0 <hif_isr+0x38c>)
   1eec4:	4798      	blx	r3
   1eec6:	0003      	movs	r3, r0
   1eec8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   1eeca:	230f      	movs	r3, #15
   1eecc:	18fb      	adds	r3, r7, r3
   1eece:	781b      	ldrb	r3, [r3, #0]
   1eed0:	b25b      	sxtb	r3, r3
   1eed2:	2b00      	cmp	r3, #0
   1eed4:	d012      	beq.n	1eefc <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   1eed6:	23e4      	movs	r3, #228	; 0xe4
   1eed8:	005a      	lsls	r2, r3, #1
   1eeda:	49ba      	ldr	r1, [pc, #744]	; (1f1c4 <hif_isr+0x3a0>)
   1eedc:	4bba      	ldr	r3, [pc, #744]	; (1f1c8 <hif_isr+0x3a4>)
   1eede:	0018      	movs	r0, r3
   1eee0:	4bba      	ldr	r3, [pc, #744]	; (1f1cc <hif_isr+0x3a8>)
   1eee2:	4798      	blx	r3
   1eee4:	4bba      	ldr	r3, [pc, #744]	; (1f1d0 <hif_isr+0x3ac>)
   1eee6:	0018      	movs	r0, r3
   1eee8:	4bb8      	ldr	r3, [pc, #736]	; (1f1cc <hif_isr+0x3a8>)
   1eeea:	4798      	blx	r3
   1eeec:	4bb9      	ldr	r3, [pc, #740]	; (1f1d4 <hif_isr+0x3b0>)
   1eeee:	0018      	movs	r0, r3
   1eef0:	4bb6      	ldr	r3, [pc, #728]	; (1f1cc <hif_isr+0x3a8>)
   1eef2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   1eef4:	2001      	movs	r0, #1
   1eef6:	4baf      	ldr	r3, [pc, #700]	; (1f1b4 <hif_isr+0x390>)
   1eef8:	4798      	blx	r3
					goto ERR1;
   1eefa:	e1db      	b.n	1f2b4 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   1eefc:	683a      	ldr	r2, [r7, #0]
   1eefe:	4baf      	ldr	r3, [pc, #700]	; (1f1bc <hif_isr+0x398>)
   1ef00:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   1ef02:	230c      	movs	r3, #12
   1ef04:	18fb      	adds	r3, r7, r3
   1ef06:	881a      	ldrh	r2, [r3, #0]
   1ef08:	4bac      	ldr	r3, [pc, #688]	; (1f1bc <hif_isr+0x398>)
   1ef0a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   1ef0c:	683b      	ldr	r3, [r7, #0]
   1ef0e:	220f      	movs	r2, #15
   1ef10:	18bc      	adds	r4, r7, r2
   1ef12:	1d39      	adds	r1, r7, #4
   1ef14:	2204      	movs	r2, #4
   1ef16:	0018      	movs	r0, r3
   1ef18:	4baf      	ldr	r3, [pc, #700]	; (1f1d8 <hif_isr+0x3b4>)
   1ef1a:	4798      	blx	r3
   1ef1c:	0003      	movs	r3, r0
   1ef1e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   1ef20:	1d3b      	adds	r3, r7, #4
   1ef22:	885b      	ldrh	r3, [r3, #2]
   1ef24:	b29a      	uxth	r2, r3
   1ef26:	1d3b      	adds	r3, r7, #4
   1ef28:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   1ef2a:	230f      	movs	r3, #15
   1ef2c:	18fb      	adds	r3, r7, r3
   1ef2e:	781b      	ldrb	r3, [r3, #0]
   1ef30:	b25b      	sxtb	r3, r3
   1ef32:	2b00      	cmp	r3, #0
   1ef34:	d012      	beq.n	1ef5c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   1ef36:	23e9      	movs	r3, #233	; 0xe9
   1ef38:	005a      	lsls	r2, r3, #1
   1ef3a:	49a2      	ldr	r1, [pc, #648]	; (1f1c4 <hif_isr+0x3a0>)
   1ef3c:	4ba2      	ldr	r3, [pc, #648]	; (1f1c8 <hif_isr+0x3a4>)
   1ef3e:	0018      	movs	r0, r3
   1ef40:	4ba2      	ldr	r3, [pc, #648]	; (1f1cc <hif_isr+0x3a8>)
   1ef42:	4798      	blx	r3
   1ef44:	4ba5      	ldr	r3, [pc, #660]	; (1f1dc <hif_isr+0x3b8>)
   1ef46:	0018      	movs	r0, r3
   1ef48:	4ba0      	ldr	r3, [pc, #640]	; (1f1cc <hif_isr+0x3a8>)
   1ef4a:	4798      	blx	r3
   1ef4c:	4ba1      	ldr	r3, [pc, #644]	; (1f1d4 <hif_isr+0x3b0>)
   1ef4e:	0018      	movs	r0, r3
   1ef50:	4b9e      	ldr	r3, [pc, #632]	; (1f1cc <hif_isr+0x3a8>)
   1ef52:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   1ef54:	2001      	movs	r0, #1
   1ef56:	4b97      	ldr	r3, [pc, #604]	; (1f1b4 <hif_isr+0x390>)
   1ef58:	4798      	blx	r3
					goto ERR1;
   1ef5a:	e1ab      	b.n	1f2b4 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   1ef5c:	1d3b      	adds	r3, r7, #4
   1ef5e:	885b      	ldrh	r3, [r3, #2]
   1ef60:	b29b      	uxth	r3, r3
   1ef62:	220c      	movs	r2, #12
   1ef64:	18ba      	adds	r2, r7, r2
   1ef66:	8812      	ldrh	r2, [r2, #0]
   1ef68:	429a      	cmp	r2, r3
   1ef6a:	d02f      	beq.n	1efcc <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   1ef6c:	230c      	movs	r3, #12
   1ef6e:	18fb      	adds	r3, r7, r3
   1ef70:	881b      	ldrh	r3, [r3, #0]
   1ef72:	1d3a      	adds	r2, r7, #4
   1ef74:	8852      	ldrh	r2, [r2, #2]
   1ef76:	b292      	uxth	r2, r2
   1ef78:	1a9b      	subs	r3, r3, r2
   1ef7a:	2b04      	cmp	r3, #4
   1ef7c:	dd26      	ble.n	1efcc <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   1ef7e:	23dc      	movs	r3, #220	; 0xdc
   1ef80:	33ff      	adds	r3, #255	; 0xff
   1ef82:	001a      	movs	r2, r3
   1ef84:	498f      	ldr	r1, [pc, #572]	; (1f1c4 <hif_isr+0x3a0>)
   1ef86:	4b90      	ldr	r3, [pc, #576]	; (1f1c8 <hif_isr+0x3a4>)
   1ef88:	0018      	movs	r0, r3
   1ef8a:	4b90      	ldr	r3, [pc, #576]	; (1f1cc <hif_isr+0x3a8>)
   1ef8c:	4798      	blx	r3
   1ef8e:	230c      	movs	r3, #12
   1ef90:	18fb      	adds	r3, r7, r3
   1ef92:	8819      	ldrh	r1, [r3, #0]
   1ef94:	1d3b      	adds	r3, r7, #4
   1ef96:	885b      	ldrh	r3, [r3, #2]
   1ef98:	b29b      	uxth	r3, r3
   1ef9a:	001a      	movs	r2, r3
   1ef9c:	1d3b      	adds	r3, r7, #4
   1ef9e:	781b      	ldrb	r3, [r3, #0]
   1efa0:	b2db      	uxtb	r3, r3
   1efa2:	001c      	movs	r4, r3
   1efa4:	1d3b      	adds	r3, r7, #4
   1efa6:	785b      	ldrb	r3, [r3, #1]
   1efa8:	b2db      	uxtb	r3, r3
   1efaa:	488d      	ldr	r0, [pc, #564]	; (1f1e0 <hif_isr+0x3bc>)
   1efac:	9300      	str	r3, [sp, #0]
   1efae:	0023      	movs	r3, r4
   1efb0:	4c86      	ldr	r4, [pc, #536]	; (1f1cc <hif_isr+0x3a8>)
   1efb2:	47a0      	blx	r4
   1efb4:	4b87      	ldr	r3, [pc, #540]	; (1f1d4 <hif_isr+0x3b0>)
   1efb6:	0018      	movs	r0, r3
   1efb8:	4b84      	ldr	r3, [pc, #528]	; (1f1cc <hif_isr+0x3a8>)
   1efba:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   1efbc:	2001      	movs	r0, #1
   1efbe:	4b7d      	ldr	r3, [pc, #500]	; (1f1b4 <hif_isr+0x390>)
   1efc0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   1efc2:	230f      	movs	r3, #15
   1efc4:	18fb      	adds	r3, r7, r3
   1efc6:	22fa      	movs	r2, #250	; 0xfa
   1efc8:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   1efca:	e173      	b.n	1f2b4 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   1efcc:	1d3b      	adds	r3, r7, #4
   1efce:	781b      	ldrb	r3, [r3, #0]
   1efd0:	b2db      	uxtb	r3, r3
   1efd2:	2b01      	cmp	r3, #1
   1efd4:	d122      	bne.n	1f01c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   1efd6:	4b79      	ldr	r3, [pc, #484]	; (1f1bc <hif_isr+0x398>)
   1efd8:	691b      	ldr	r3, [r3, #16]
   1efda:	2b00      	cmp	r3, #0
   1efdc:	d00d      	beq.n	1effa <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1efde:	4b77      	ldr	r3, [pc, #476]	; (1f1bc <hif_isr+0x398>)
   1efe0:	691b      	ldr	r3, [r3, #16]
   1efe2:	1d3a      	adds	r2, r7, #4
   1efe4:	7852      	ldrb	r2, [r2, #1]
   1efe6:	b2d0      	uxtb	r0, r2
   1efe8:	1d3a      	adds	r2, r7, #4
   1efea:	8852      	ldrh	r2, [r2, #2]
   1efec:	b292      	uxth	r2, r2
   1efee:	3a08      	subs	r2, #8
   1eff0:	b291      	uxth	r1, r2
   1eff2:	683a      	ldr	r2, [r7, #0]
   1eff4:	3208      	adds	r2, #8
   1eff6:	4798      	blx	r3
   1eff8:	e102      	b.n	1f200 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   1effa:	23e8      	movs	r3, #232	; 0xe8
   1effc:	33ff      	adds	r3, #255	; 0xff
   1effe:	001a      	movs	r2, r3
   1f000:	4970      	ldr	r1, [pc, #448]	; (1f1c4 <hif_isr+0x3a0>)
   1f002:	4b71      	ldr	r3, [pc, #452]	; (1f1c8 <hif_isr+0x3a4>)
   1f004:	0018      	movs	r0, r3
   1f006:	4b71      	ldr	r3, [pc, #452]	; (1f1cc <hif_isr+0x3a8>)
   1f008:	4798      	blx	r3
   1f00a:	4b76      	ldr	r3, [pc, #472]	; (1f1e4 <hif_isr+0x3c0>)
   1f00c:	0018      	movs	r0, r3
   1f00e:	4b6f      	ldr	r3, [pc, #444]	; (1f1cc <hif_isr+0x3a8>)
   1f010:	4798      	blx	r3
   1f012:	4b70      	ldr	r3, [pc, #448]	; (1f1d4 <hif_isr+0x3b0>)
   1f014:	0018      	movs	r0, r3
   1f016:	4b6d      	ldr	r3, [pc, #436]	; (1f1cc <hif_isr+0x3a8>)
   1f018:	4798      	blx	r3
   1f01a:	e0f1      	b.n	1f200 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   1f01c:	1d3b      	adds	r3, r7, #4
   1f01e:	781b      	ldrb	r3, [r3, #0]
   1f020:	b2db      	uxtb	r3, r3
   1f022:	2b02      	cmp	r3, #2
   1f024:	d122      	bne.n	1f06c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   1f026:	4b65      	ldr	r3, [pc, #404]	; (1f1bc <hif_isr+0x398>)
   1f028:	695b      	ldr	r3, [r3, #20]
   1f02a:	2b00      	cmp	r3, #0
   1f02c:	d00d      	beq.n	1f04a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1f02e:	4b63      	ldr	r3, [pc, #396]	; (1f1bc <hif_isr+0x398>)
   1f030:	695b      	ldr	r3, [r3, #20]
   1f032:	1d3a      	adds	r2, r7, #4
   1f034:	7852      	ldrb	r2, [r2, #1]
   1f036:	b2d0      	uxtb	r0, r2
   1f038:	1d3a      	adds	r2, r7, #4
   1f03a:	8852      	ldrh	r2, [r2, #2]
   1f03c:	b292      	uxth	r2, r2
   1f03e:	3a08      	subs	r2, #8
   1f040:	b291      	uxth	r1, r2
   1f042:	683a      	ldr	r2, [r7, #0]
   1f044:	3208      	adds	r2, #8
   1f046:	4798      	blx	r3
   1f048:	e0da      	b.n	1f200 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   1f04a:	23f0      	movs	r3, #240	; 0xf0
   1f04c:	33ff      	adds	r3, #255	; 0xff
   1f04e:	001a      	movs	r2, r3
   1f050:	495c      	ldr	r1, [pc, #368]	; (1f1c4 <hif_isr+0x3a0>)
   1f052:	4b5d      	ldr	r3, [pc, #372]	; (1f1c8 <hif_isr+0x3a4>)
   1f054:	0018      	movs	r0, r3
   1f056:	4b5d      	ldr	r3, [pc, #372]	; (1f1cc <hif_isr+0x3a8>)
   1f058:	4798      	blx	r3
   1f05a:	4b63      	ldr	r3, [pc, #396]	; (1f1e8 <hif_isr+0x3c4>)
   1f05c:	0018      	movs	r0, r3
   1f05e:	4b5b      	ldr	r3, [pc, #364]	; (1f1cc <hif_isr+0x3a8>)
   1f060:	4798      	blx	r3
   1f062:	4b5c      	ldr	r3, [pc, #368]	; (1f1d4 <hif_isr+0x3b0>)
   1f064:	0018      	movs	r0, r3
   1f066:	4b59      	ldr	r3, [pc, #356]	; (1f1cc <hif_isr+0x3a8>)
   1f068:	4798      	blx	r3
   1f06a:	e0c9      	b.n	1f200 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   1f06c:	1d3b      	adds	r3, r7, #4
   1f06e:	781b      	ldrb	r3, [r3, #0]
   1f070:	b2db      	uxtb	r3, r3
   1f072:	2b04      	cmp	r3, #4
   1f074:	d122      	bne.n	1f0bc <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   1f076:	4b51      	ldr	r3, [pc, #324]	; (1f1bc <hif_isr+0x398>)
   1f078:	699b      	ldr	r3, [r3, #24]
   1f07a:	2b00      	cmp	r3, #0
   1f07c:	d00d      	beq.n	1f09a <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1f07e:	4b4f      	ldr	r3, [pc, #316]	; (1f1bc <hif_isr+0x398>)
   1f080:	699b      	ldr	r3, [r3, #24]
   1f082:	1d3a      	adds	r2, r7, #4
   1f084:	7852      	ldrb	r2, [r2, #1]
   1f086:	b2d0      	uxtb	r0, r2
   1f088:	1d3a      	adds	r2, r7, #4
   1f08a:	8852      	ldrh	r2, [r2, #2]
   1f08c:	b292      	uxth	r2, r2
   1f08e:	3a08      	subs	r2, #8
   1f090:	b291      	uxth	r1, r2
   1f092:	683a      	ldr	r2, [r7, #0]
   1f094:	3208      	adds	r2, #8
   1f096:	4798      	blx	r3
   1f098:	e0b2      	b.n	1f200 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   1f09a:	23f8      	movs	r3, #248	; 0xf8
   1f09c:	33ff      	adds	r3, #255	; 0xff
   1f09e:	001a      	movs	r2, r3
   1f0a0:	4948      	ldr	r1, [pc, #288]	; (1f1c4 <hif_isr+0x3a0>)
   1f0a2:	4b49      	ldr	r3, [pc, #292]	; (1f1c8 <hif_isr+0x3a4>)
   1f0a4:	0018      	movs	r0, r3
   1f0a6:	4b49      	ldr	r3, [pc, #292]	; (1f1cc <hif_isr+0x3a8>)
   1f0a8:	4798      	blx	r3
   1f0aa:	4b50      	ldr	r3, [pc, #320]	; (1f1ec <hif_isr+0x3c8>)
   1f0ac:	0018      	movs	r0, r3
   1f0ae:	4b47      	ldr	r3, [pc, #284]	; (1f1cc <hif_isr+0x3a8>)
   1f0b0:	4798      	blx	r3
   1f0b2:	4b48      	ldr	r3, [pc, #288]	; (1f1d4 <hif_isr+0x3b0>)
   1f0b4:	0018      	movs	r0, r3
   1f0b6:	4b45      	ldr	r3, [pc, #276]	; (1f1cc <hif_isr+0x3a8>)
   1f0b8:	4798      	blx	r3
   1f0ba:	e0a1      	b.n	1f200 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   1f0bc:	1d3b      	adds	r3, r7, #4
   1f0be:	781b      	ldrb	r3, [r3, #0]
   1f0c0:	b2db      	uxtb	r3, r3
   1f0c2:	2b06      	cmp	r3, #6
   1f0c4:	d121      	bne.n	1f10a <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   1f0c6:	4b3d      	ldr	r3, [pc, #244]	; (1f1bc <hif_isr+0x398>)
   1f0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f0ca:	2b00      	cmp	r3, #0
   1f0cc:	d00d      	beq.n	1f0ea <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1f0ce:	4b3b      	ldr	r3, [pc, #236]	; (1f1bc <hif_isr+0x398>)
   1f0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f0d2:	1d3a      	adds	r2, r7, #4
   1f0d4:	7852      	ldrb	r2, [r2, #1]
   1f0d6:	b2d0      	uxtb	r0, r2
   1f0d8:	1d3a      	adds	r2, r7, #4
   1f0da:	8852      	ldrh	r2, [r2, #2]
   1f0dc:	b292      	uxth	r2, r2
   1f0de:	3a08      	subs	r2, #8
   1f0e0:	b291      	uxth	r1, r2
   1f0e2:	683a      	ldr	r2, [r7, #0]
   1f0e4:	3208      	adds	r2, #8
   1f0e6:	4798      	blx	r3
   1f0e8:	e08a      	b.n	1f200 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   1f0ea:	2380      	movs	r3, #128	; 0x80
   1f0ec:	009a      	lsls	r2, r3, #2
   1f0ee:	4935      	ldr	r1, [pc, #212]	; (1f1c4 <hif_isr+0x3a0>)
   1f0f0:	4b35      	ldr	r3, [pc, #212]	; (1f1c8 <hif_isr+0x3a4>)
   1f0f2:	0018      	movs	r0, r3
   1f0f4:	4b35      	ldr	r3, [pc, #212]	; (1f1cc <hif_isr+0x3a8>)
   1f0f6:	4798      	blx	r3
   1f0f8:	4b3d      	ldr	r3, [pc, #244]	; (1f1f0 <hif_isr+0x3cc>)
   1f0fa:	0018      	movs	r0, r3
   1f0fc:	4b33      	ldr	r3, [pc, #204]	; (1f1cc <hif_isr+0x3a8>)
   1f0fe:	4798      	blx	r3
   1f100:	4b34      	ldr	r3, [pc, #208]	; (1f1d4 <hif_isr+0x3b0>)
   1f102:	0018      	movs	r0, r3
   1f104:	4b31      	ldr	r3, [pc, #196]	; (1f1cc <hif_isr+0x3a8>)
   1f106:	4798      	blx	r3
   1f108:	e07a      	b.n	1f200 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   1f10a:	1d3b      	adds	r3, r7, #4
   1f10c:	781b      	ldrb	r3, [r3, #0]
   1f10e:	b2db      	uxtb	r3, r3
   1f110:	2b07      	cmp	r3, #7
   1f112:	d120      	bne.n	1f156 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   1f114:	4b29      	ldr	r3, [pc, #164]	; (1f1bc <hif_isr+0x398>)
   1f116:	69db      	ldr	r3, [r3, #28]
   1f118:	2b00      	cmp	r3, #0
   1f11a:	d00d      	beq.n	1f138 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1f11c:	4b27      	ldr	r3, [pc, #156]	; (1f1bc <hif_isr+0x398>)
   1f11e:	69db      	ldr	r3, [r3, #28]
   1f120:	1d3a      	adds	r2, r7, #4
   1f122:	7852      	ldrb	r2, [r2, #1]
   1f124:	b2d0      	uxtb	r0, r2
   1f126:	1d3a      	adds	r2, r7, #4
   1f128:	8852      	ldrh	r2, [r2, #2]
   1f12a:	b292      	uxth	r2, r2
   1f12c:	3a08      	subs	r2, #8
   1f12e:	b291      	uxth	r1, r2
   1f130:	683a      	ldr	r2, [r7, #0]
   1f132:	3208      	adds	r2, #8
   1f134:	4798      	blx	r3
   1f136:	e063      	b.n	1f200 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   1f138:	4a2e      	ldr	r2, [pc, #184]	; (1f1f4 <hif_isr+0x3d0>)
   1f13a:	4922      	ldr	r1, [pc, #136]	; (1f1c4 <hif_isr+0x3a0>)
   1f13c:	4b22      	ldr	r3, [pc, #136]	; (1f1c8 <hif_isr+0x3a4>)
   1f13e:	0018      	movs	r0, r3
   1f140:	4b22      	ldr	r3, [pc, #136]	; (1f1cc <hif_isr+0x3a8>)
   1f142:	4798      	blx	r3
   1f144:	4b2c      	ldr	r3, [pc, #176]	; (1f1f8 <hif_isr+0x3d4>)
   1f146:	0018      	movs	r0, r3
   1f148:	4b20      	ldr	r3, [pc, #128]	; (1f1cc <hif_isr+0x3a8>)
   1f14a:	4798      	blx	r3
   1f14c:	4b21      	ldr	r3, [pc, #132]	; (1f1d4 <hif_isr+0x3b0>)
   1f14e:	0018      	movs	r0, r3
   1f150:	4b1e      	ldr	r3, [pc, #120]	; (1f1cc <hif_isr+0x3a8>)
   1f152:	4798      	blx	r3
   1f154:	e054      	b.n	1f200 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   1f156:	1d3b      	adds	r3, r7, #4
   1f158:	781b      	ldrb	r3, [r3, #0]
   1f15a:	b2db      	uxtb	r3, r3
   1f15c:	2b05      	cmp	r3, #5
   1f15e:	d111      	bne.n	1f184 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   1f160:	4b16      	ldr	r3, [pc, #88]	; (1f1bc <hif_isr+0x398>)
   1f162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f164:	2b00      	cmp	r3, #0
   1f166:	d04b      	beq.n	1f200 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1f168:	4b14      	ldr	r3, [pc, #80]	; (1f1bc <hif_isr+0x398>)
   1f16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f16c:	1d3a      	adds	r2, r7, #4
   1f16e:	7852      	ldrb	r2, [r2, #1]
   1f170:	b2d0      	uxtb	r0, r2
   1f172:	1d3a      	adds	r2, r7, #4
   1f174:	8852      	ldrh	r2, [r2, #2]
   1f176:	b292      	uxth	r2, r2
   1f178:	3a08      	subs	r2, #8
   1f17a:	b291      	uxth	r1, r2
   1f17c:	683a      	ldr	r2, [r7, #0]
   1f17e:	3208      	adds	r2, #8
   1f180:	4798      	blx	r3
   1f182:	e03d      	b.n	1f200 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   1f184:	2384      	movs	r3, #132	; 0x84
   1f186:	009a      	lsls	r2, r3, #2
   1f188:	490e      	ldr	r1, [pc, #56]	; (1f1c4 <hif_isr+0x3a0>)
   1f18a:	4b0f      	ldr	r3, [pc, #60]	; (1f1c8 <hif_isr+0x3a4>)
   1f18c:	0018      	movs	r0, r3
   1f18e:	4b0f      	ldr	r3, [pc, #60]	; (1f1cc <hif_isr+0x3a8>)
   1f190:	4798      	blx	r3
   1f192:	4b1a      	ldr	r3, [pc, #104]	; (1f1fc <hif_isr+0x3d8>)
   1f194:	0018      	movs	r0, r3
   1f196:	4b0d      	ldr	r3, [pc, #52]	; (1f1cc <hif_isr+0x3a8>)
   1f198:	4798      	blx	r3
   1f19a:	4b0e      	ldr	r3, [pc, #56]	; (1f1d4 <hif_isr+0x3b0>)
   1f19c:	0018      	movs	r0, r3
   1f19e:	4b0b      	ldr	r3, [pc, #44]	; (1f1cc <hif_isr+0x3a8>)
   1f1a0:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   1f1a2:	230f      	movs	r3, #15
   1f1a4:	18fb      	adds	r3, r7, r3
   1f1a6:	22fa      	movs	r2, #250	; 0xfa
   1f1a8:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   1f1aa:	e083      	b.n	1f2b4 <hif_isr+0x490>
   1f1ac:	00001070 	.word	0x00001070
   1f1b0:	000208b1 	.word	0x000208b1
   1f1b4:	0001dfd5 	.word	0x0001dfd5
   1f1b8:	000208d5 	.word	0x000208d5
   1f1bc:	20005444 	.word	0x20005444
   1f1c0:	00001084 	.word	0x00001084
   1f1c4:	00035b0c 	.word	0x00035b0c
   1f1c8:	000357fc 	.word	0x000357fc
   1f1cc:	0001baed 	.word	0x0001baed
   1f1d0:	00035830 	.word	0x00035830
   1f1d4:	000357f8 	.word	0x000357f8
   1f1d8:	00020925 	.word	0x00020925
   1f1dc:	00035858 	.word	0x00035858
   1f1e0:	00035870 	.word	0x00035870
   1f1e4:	000358b0 	.word	0x000358b0
   1f1e8:	000358d4 	.word	0x000358d4
   1f1ec:	000358f8 	.word	0x000358f8
   1f1f0:	00035918 	.word	0x00035918
   1f1f4:	00000207 	.word	0x00000207
   1f1f8:	0003593c 	.word	0x0003593c
   1f1fc:	00035960 	.word	0x00035960
				}
				if(gstrHifCxt.u8HifRXDone)
   1f200:	4b30      	ldr	r3, [pc, #192]	; (1f2c4 <hif_isr+0x4a0>)
   1f202:	789b      	ldrb	r3, [r3, #2]
   1f204:	b2db      	uxtb	r3, r3
   1f206:	2b00      	cmp	r3, #0
   1f208:	d054      	beq.n	1f2b4 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   1f20a:	4a2f      	ldr	r2, [pc, #188]	; (1f2c8 <hif_isr+0x4a4>)
   1f20c:	492f      	ldr	r1, [pc, #188]	; (1f2cc <hif_isr+0x4a8>)
   1f20e:	4b30      	ldr	r3, [pc, #192]	; (1f2d0 <hif_isr+0x4ac>)
   1f210:	0018      	movs	r0, r3
   1f212:	4b30      	ldr	r3, [pc, #192]	; (1f2d4 <hif_isr+0x4b0>)
   1f214:	4798      	blx	r3
   1f216:	1d3b      	adds	r3, r7, #4
   1f218:	781b      	ldrb	r3, [r3, #0]
   1f21a:	b2db      	uxtb	r3, r3
   1f21c:	0019      	movs	r1, r3
   1f21e:	1d3b      	adds	r3, r7, #4
   1f220:	785b      	ldrb	r3, [r3, #1]
   1f222:	b2db      	uxtb	r3, r3
   1f224:	001a      	movs	r2, r3
   1f226:	4b2c      	ldr	r3, [pc, #176]	; (1f2d8 <hif_isr+0x4b4>)
   1f228:	0018      	movs	r0, r3
   1f22a:	4b2a      	ldr	r3, [pc, #168]	; (1f2d4 <hif_isr+0x4b0>)
   1f22c:	4798      	blx	r3
   1f22e:	4b2b      	ldr	r3, [pc, #172]	; (1f2dc <hif_isr+0x4b8>)
   1f230:	0018      	movs	r0, r3
   1f232:	4b28      	ldr	r3, [pc, #160]	; (1f2d4 <hif_isr+0x4b0>)
   1f234:	4798      	blx	r3
					ret = hif_set_rx_done();
   1f236:	230f      	movs	r3, #15
   1f238:	18fc      	adds	r4, r7, r3
   1f23a:	4b29      	ldr	r3, [pc, #164]	; (1f2e0 <hif_isr+0x4bc>)
   1f23c:	4798      	blx	r3
   1f23e:	0003      	movs	r3, r0
   1f240:	7023      	strb	r3, [r4, #0]
   1f242:	e037      	b.n	1f2b4 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   1f244:	4a27      	ldr	r2, [pc, #156]	; (1f2e4 <hif_isr+0x4c0>)
   1f246:	4921      	ldr	r1, [pc, #132]	; (1f2cc <hif_isr+0x4a8>)
   1f248:	4b21      	ldr	r3, [pc, #132]	; (1f2d0 <hif_isr+0x4ac>)
   1f24a:	0018      	movs	r0, r3
   1f24c:	4b21      	ldr	r3, [pc, #132]	; (1f2d4 <hif_isr+0x4b0>)
   1f24e:	4798      	blx	r3
   1f250:	4b25      	ldr	r3, [pc, #148]	; (1f2e8 <hif_isr+0x4c4>)
   1f252:	0018      	movs	r0, r3
   1f254:	4b1f      	ldr	r3, [pc, #124]	; (1f2d4 <hif_isr+0x4b0>)
   1f256:	4798      	blx	r3
   1f258:	4b20      	ldr	r3, [pc, #128]	; (1f2dc <hif_isr+0x4b8>)
   1f25a:	0018      	movs	r0, r3
   1f25c:	4b1d      	ldr	r3, [pc, #116]	; (1f2d4 <hif_isr+0x4b0>)
   1f25e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   1f260:	230f      	movs	r3, #15
   1f262:	18fb      	adds	r3, r7, r3
   1f264:	22fe      	movs	r2, #254	; 0xfe
   1f266:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   1f268:	e024      	b.n	1f2b4 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   1f26a:	4a20      	ldr	r2, [pc, #128]	; (1f2ec <hif_isr+0x4c8>)
   1f26c:	4917      	ldr	r1, [pc, #92]	; (1f2cc <hif_isr+0x4a8>)
   1f26e:	4b18      	ldr	r3, [pc, #96]	; (1f2d0 <hif_isr+0x4ac>)
   1f270:	0018      	movs	r0, r3
   1f272:	4b18      	ldr	r3, [pc, #96]	; (1f2d4 <hif_isr+0x4b0>)
   1f274:	4798      	blx	r3
   1f276:	68ba      	ldr	r2, [r7, #8]
   1f278:	4b1d      	ldr	r3, [pc, #116]	; (1f2f0 <hif_isr+0x4cc>)
   1f27a:	0011      	movs	r1, r2
   1f27c:	0018      	movs	r0, r3
   1f27e:	4b15      	ldr	r3, [pc, #84]	; (1f2d4 <hif_isr+0x4b0>)
   1f280:	4798      	blx	r3
   1f282:	4b16      	ldr	r3, [pc, #88]	; (1f2dc <hif_isr+0x4b8>)
   1f284:	0018      	movs	r0, r3
   1f286:	4b13      	ldr	r3, [pc, #76]	; (1f2d4 <hif_isr+0x4b0>)
   1f288:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1f28a:	230f      	movs	r3, #15
   1f28c:	18fb      	adds	r3, r7, r3
   1f28e:	22f4      	movs	r2, #244	; 0xf4
   1f290:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1f292:	e00f      	b.n	1f2b4 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   1f294:	4a17      	ldr	r2, [pc, #92]	; (1f2f4 <hif_isr+0x4d0>)
   1f296:	490d      	ldr	r1, [pc, #52]	; (1f2cc <hif_isr+0x4a8>)
   1f298:	4b0d      	ldr	r3, [pc, #52]	; (1f2d0 <hif_isr+0x4ac>)
   1f29a:	0018      	movs	r0, r3
   1f29c:	4b0d      	ldr	r3, [pc, #52]	; (1f2d4 <hif_isr+0x4b0>)
   1f29e:	4798      	blx	r3
   1f2a0:	4b15      	ldr	r3, [pc, #84]	; (1f2f8 <hif_isr+0x4d4>)
   1f2a2:	0018      	movs	r0, r3
   1f2a4:	4b0b      	ldr	r3, [pc, #44]	; (1f2d4 <hif_isr+0x4b0>)
   1f2a6:	4798      	blx	r3
   1f2a8:	4b0c      	ldr	r3, [pc, #48]	; (1f2dc <hif_isr+0x4b8>)
   1f2aa:	0018      	movs	r0, r3
   1f2ac:	4b09      	ldr	r3, [pc, #36]	; (1f2d4 <hif_isr+0x4b0>)
   1f2ae:	4798      	blx	r3
		goto ERR1;
   1f2b0:	e000      	b.n	1f2b4 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   1f2b2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   1f2b4:	230f      	movs	r3, #15
   1f2b6:	18fb      	adds	r3, r7, r3
   1f2b8:	781b      	ldrb	r3, [r3, #0]
   1f2ba:	b25b      	sxtb	r3, r3
}
   1f2bc:	0018      	movs	r0, r3
   1f2be:	46bd      	mov	sp, r7
   1f2c0:	b005      	add	sp, #20
   1f2c2:	bd90      	pop	{r4, r7, pc}
   1f2c4:	20005444 	.word	0x20005444
   1f2c8:	00000216 	.word	0x00000216
   1f2cc:	00035b0c 	.word	0x00035b0c
   1f2d0:	000357fc 	.word	0x000357fc
   1f2d4:	0001baed 	.word	0x0001baed
   1f2d8:	00035978 	.word	0x00035978
   1f2dc:	000357f8 	.word	0x000357f8
   1f2e0:	0001e8b9 	.word	0x0001e8b9
   1f2e4:	0000021d 	.word	0x0000021d
   1f2e8:	000359a4 	.word	0x000359a4
   1f2ec:	00000225 	.word	0x00000225
   1f2f0:	000359b8 	.word	0x000359b8
   1f2f4:	0000022e 	.word	0x0000022e
   1f2f8:	000359d4 	.word	0x000359d4

0001f2fc <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   1f2fc:	b590      	push	{r4, r7, lr}
   1f2fe:	b083      	sub	sp, #12
   1f300:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   1f302:	1dfb      	adds	r3, r7, #7
   1f304:	2200      	movs	r2, #0
   1f306:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   1f308:	4b1c      	ldr	r3, [pc, #112]	; (1f37c <hif_handle_isr+0x80>)
   1f30a:	2200      	movs	r2, #0
   1f30c:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1f30e:	e024      	b.n	1f35a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   1f310:	4b1a      	ldr	r3, [pc, #104]	; (1f37c <hif_handle_isr+0x80>)
   1f312:	78db      	ldrb	r3, [r3, #3]
   1f314:	b2db      	uxtb	r3, r3
   1f316:	3b01      	subs	r3, #1
   1f318:	b2da      	uxtb	r2, r3
   1f31a:	4b18      	ldr	r3, [pc, #96]	; (1f37c <hif_handle_isr+0x80>)
   1f31c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   1f31e:	1dfc      	adds	r4, r7, #7
   1f320:	4b17      	ldr	r3, [pc, #92]	; (1f380 <hif_handle_isr+0x84>)
   1f322:	4798      	blx	r3
   1f324:	0003      	movs	r3, r0
   1f326:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   1f328:	1dfb      	adds	r3, r7, #7
   1f32a:	781b      	ldrb	r3, [r3, #0]
   1f32c:	b25b      	sxtb	r3, r3
   1f32e:	2b00      	cmp	r3, #0
   1f330:	d100      	bne.n	1f334 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   1f332:	e012      	b.n	1f35a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   1f334:	4a13      	ldr	r2, [pc, #76]	; (1f384 <hif_handle_isr+0x88>)
   1f336:	4914      	ldr	r1, [pc, #80]	; (1f388 <hif_handle_isr+0x8c>)
   1f338:	4b14      	ldr	r3, [pc, #80]	; (1f38c <hif_handle_isr+0x90>)
   1f33a:	0018      	movs	r0, r3
   1f33c:	4b14      	ldr	r3, [pc, #80]	; (1f390 <hif_handle_isr+0x94>)
   1f33e:	4798      	blx	r3
   1f340:	1dfb      	adds	r3, r7, #7
   1f342:	2200      	movs	r2, #0
   1f344:	569a      	ldrsb	r2, [r3, r2]
   1f346:	4b13      	ldr	r3, [pc, #76]	; (1f394 <hif_handle_isr+0x98>)
   1f348:	0011      	movs	r1, r2
   1f34a:	0018      	movs	r0, r3
   1f34c:	4b10      	ldr	r3, [pc, #64]	; (1f390 <hif_handle_isr+0x94>)
   1f34e:	4798      	blx	r3
   1f350:	4b11      	ldr	r3, [pc, #68]	; (1f398 <hif_handle_isr+0x9c>)
   1f352:	0018      	movs	r0, r3
   1f354:	4b0e      	ldr	r3, [pc, #56]	; (1f390 <hif_handle_isr+0x94>)
   1f356:	4798      	blx	r3
			ret = hif_isr();
   1f358:	e7e1      	b.n	1f31e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1f35a:	4b08      	ldr	r3, [pc, #32]	; (1f37c <hif_handle_isr+0x80>)
   1f35c:	78db      	ldrb	r3, [r3, #3]
   1f35e:	b2db      	uxtb	r3, r3
   1f360:	2b00      	cmp	r3, #0
   1f362:	d004      	beq.n	1f36e <hif_handle_isr+0x72>
   1f364:	4b05      	ldr	r3, [pc, #20]	; (1f37c <hif_handle_isr+0x80>)
   1f366:	791b      	ldrb	r3, [r3, #4]
   1f368:	b2db      	uxtb	r3, r3
   1f36a:	2b00      	cmp	r3, #0
   1f36c:	d0d0      	beq.n	1f310 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   1f36e:	1dfb      	adds	r3, r7, #7
   1f370:	781b      	ldrb	r3, [r3, #0]
   1f372:	b25b      	sxtb	r3, r3
}
   1f374:	0018      	movs	r0, r3
   1f376:	46bd      	mov	sp, r7
   1f378:	b003      	add	sp, #12
   1f37a:	bd90      	pop	{r4, r7, pc}
   1f37c:	20005444 	.word	0x20005444
   1f380:	0001ee25 	.word	0x0001ee25
   1f384:	00000257 	.word	0x00000257
   1f388:	00035b14 	.word	0x00035b14
   1f38c:	000357fc 	.word	0x000357fc
   1f390:	0001baed 	.word	0x0001baed
   1f394:	000359f8 	.word	0x000359f8
   1f398:	000357f8 	.word	0x000357f8

0001f39c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   1f39c:	b590      	push	{r4, r7, lr}
   1f39e:	b087      	sub	sp, #28
   1f3a0:	af00      	add	r7, sp, #0
   1f3a2:	60f8      	str	r0, [r7, #12]
   1f3a4:	60b9      	str	r1, [r7, #8]
   1f3a6:	0019      	movs	r1, r3
   1f3a8:	1dbb      	adds	r3, r7, #6
   1f3aa:	801a      	strh	r2, [r3, #0]
   1f3ac:	1d7b      	adds	r3, r7, #5
   1f3ae:	1c0a      	adds	r2, r1, #0
   1f3b0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   1f3b2:	2317      	movs	r3, #23
   1f3b4:	18fb      	adds	r3, r7, r3
   1f3b6:	2200      	movs	r2, #0
   1f3b8:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   1f3ba:	68fb      	ldr	r3, [r7, #12]
   1f3bc:	2b00      	cmp	r3, #0
   1f3be:	d006      	beq.n	1f3ce <hif_receive+0x32>
   1f3c0:	68bb      	ldr	r3, [r7, #8]
   1f3c2:	2b00      	cmp	r3, #0
   1f3c4:	d003      	beq.n	1f3ce <hif_receive+0x32>
   1f3c6:	1dbb      	adds	r3, r7, #6
   1f3c8:	881b      	ldrh	r3, [r3, #0]
   1f3ca:	2b00      	cmp	r3, #0
   1f3cc:	d11e      	bne.n	1f40c <hif_receive+0x70>
	{
		if(isDone)
   1f3ce:	1d7b      	adds	r3, r7, #5
   1f3d0:	781b      	ldrb	r3, [r3, #0]
   1f3d2:	2b00      	cmp	r3, #0
   1f3d4:	d006      	beq.n	1f3e4 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   1f3d6:	2317      	movs	r3, #23
   1f3d8:	18fc      	adds	r4, r7, r3
   1f3da:	4b45      	ldr	r3, [pc, #276]	; (1f4f0 <hif_receive+0x154>)
   1f3dc:	4798      	blx	r3
   1f3de:	0003      	movs	r3, r0
   1f3e0:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   1f3e2:	e07c      	b.n	1f4de <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   1f3e4:	2317      	movs	r3, #23
   1f3e6:	18fb      	adds	r3, r7, r3
   1f3e8:	22f4      	movs	r2, #244	; 0xf4
   1f3ea:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   1f3ec:	239e      	movs	r3, #158	; 0x9e
   1f3ee:	009a      	lsls	r2, r3, #2
   1f3f0:	4940      	ldr	r1, [pc, #256]	; (1f4f4 <hif_receive+0x158>)
   1f3f2:	4b41      	ldr	r3, [pc, #260]	; (1f4f8 <hif_receive+0x15c>)
   1f3f4:	0018      	movs	r0, r3
   1f3f6:	4b41      	ldr	r3, [pc, #260]	; (1f4fc <hif_receive+0x160>)
   1f3f8:	4798      	blx	r3
   1f3fa:	4b41      	ldr	r3, [pc, #260]	; (1f500 <hif_receive+0x164>)
   1f3fc:	0018      	movs	r0, r3
   1f3fe:	4b3f      	ldr	r3, [pc, #252]	; (1f4fc <hif_receive+0x160>)
   1f400:	4798      	blx	r3
   1f402:	4b40      	ldr	r3, [pc, #256]	; (1f504 <hif_receive+0x168>)
   1f404:	0018      	movs	r0, r3
   1f406:	4b3d      	ldr	r3, [pc, #244]	; (1f4fc <hif_receive+0x160>)
   1f408:	4798      	blx	r3
		goto ERR1;
   1f40a:	e068      	b.n	1f4de <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   1f40c:	1dbb      	adds	r3, r7, #6
   1f40e:	881a      	ldrh	r2, [r3, #0]
   1f410:	4b3d      	ldr	r3, [pc, #244]	; (1f508 <hif_receive+0x16c>)
   1f412:	68db      	ldr	r3, [r3, #12]
   1f414:	429a      	cmp	r2, r3
   1f416:	d917      	bls.n	1f448 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   1f418:	2317      	movs	r3, #23
   1f41a:	18fb      	adds	r3, r7, r3
   1f41c:	22f4      	movs	r2, #244	; 0xf4
   1f41e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   1f420:	23a0      	movs	r3, #160	; 0xa0
   1f422:	009a      	lsls	r2, r3, #2
   1f424:	4933      	ldr	r1, [pc, #204]	; (1f4f4 <hif_receive+0x158>)
   1f426:	4b34      	ldr	r3, [pc, #208]	; (1f4f8 <hif_receive+0x15c>)
   1f428:	0018      	movs	r0, r3
   1f42a:	4b34      	ldr	r3, [pc, #208]	; (1f4fc <hif_receive+0x160>)
   1f42c:	4798      	blx	r3
   1f42e:	1dbb      	adds	r3, r7, #6
   1f430:	8819      	ldrh	r1, [r3, #0]
   1f432:	4b35      	ldr	r3, [pc, #212]	; (1f508 <hif_receive+0x16c>)
   1f434:	68da      	ldr	r2, [r3, #12]
   1f436:	4b35      	ldr	r3, [pc, #212]	; (1f50c <hif_receive+0x170>)
   1f438:	0018      	movs	r0, r3
   1f43a:	4b30      	ldr	r3, [pc, #192]	; (1f4fc <hif_receive+0x160>)
   1f43c:	4798      	blx	r3
   1f43e:	4b31      	ldr	r3, [pc, #196]	; (1f504 <hif_receive+0x168>)
   1f440:	0018      	movs	r0, r3
   1f442:	4b2e      	ldr	r3, [pc, #184]	; (1f4fc <hif_receive+0x160>)
   1f444:	4798      	blx	r3
		goto ERR1;
   1f446:	e04a      	b.n	1f4de <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   1f448:	4b2f      	ldr	r3, [pc, #188]	; (1f508 <hif_receive+0x16c>)
   1f44a:	689a      	ldr	r2, [r3, #8]
   1f44c:	68fb      	ldr	r3, [r7, #12]
   1f44e:	429a      	cmp	r2, r3
   1f450:	d80a      	bhi.n	1f468 <hif_receive+0xcc>
   1f452:	1dbb      	adds	r3, r7, #6
   1f454:	881a      	ldrh	r2, [r3, #0]
   1f456:	68fb      	ldr	r3, [r7, #12]
   1f458:	18d2      	adds	r2, r2, r3
   1f45a:	4b2b      	ldr	r3, [pc, #172]	; (1f508 <hif_receive+0x16c>)
   1f45c:	6899      	ldr	r1, [r3, #8]
   1f45e:	4b2a      	ldr	r3, [pc, #168]	; (1f508 <hif_receive+0x16c>)
   1f460:	68db      	ldr	r3, [r3, #12]
   1f462:	18cb      	adds	r3, r1, r3
   1f464:	429a      	cmp	r2, r3
   1f466:	d912      	bls.n	1f48e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   1f468:	2317      	movs	r3, #23
   1f46a:	18fb      	adds	r3, r7, r3
   1f46c:	22f4      	movs	r2, #244	; 0xf4
   1f46e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   1f470:	4a27      	ldr	r2, [pc, #156]	; (1f510 <hif_receive+0x174>)
   1f472:	4920      	ldr	r1, [pc, #128]	; (1f4f4 <hif_receive+0x158>)
   1f474:	4b20      	ldr	r3, [pc, #128]	; (1f4f8 <hif_receive+0x15c>)
   1f476:	0018      	movs	r0, r3
   1f478:	4b20      	ldr	r3, [pc, #128]	; (1f4fc <hif_receive+0x160>)
   1f47a:	4798      	blx	r3
   1f47c:	4b25      	ldr	r3, [pc, #148]	; (1f514 <hif_receive+0x178>)
   1f47e:	0018      	movs	r0, r3
   1f480:	4b1e      	ldr	r3, [pc, #120]	; (1f4fc <hif_receive+0x160>)
   1f482:	4798      	blx	r3
   1f484:	4b1f      	ldr	r3, [pc, #124]	; (1f504 <hif_receive+0x168>)
   1f486:	0018      	movs	r0, r3
   1f488:	4b1c      	ldr	r3, [pc, #112]	; (1f4fc <hif_receive+0x160>)
   1f48a:	4798      	blx	r3
		goto ERR1;
   1f48c:	e027      	b.n	1f4de <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   1f48e:	1dbb      	adds	r3, r7, #6
   1f490:	881a      	ldrh	r2, [r3, #0]
   1f492:	2317      	movs	r3, #23
   1f494:	18fc      	adds	r4, r7, r3
   1f496:	68b9      	ldr	r1, [r7, #8]
   1f498:	68fb      	ldr	r3, [r7, #12]
   1f49a:	0018      	movs	r0, r3
   1f49c:	4b1e      	ldr	r3, [pc, #120]	; (1f518 <hif_receive+0x17c>)
   1f49e:	4798      	blx	r3
   1f4a0:	0003      	movs	r3, r0
   1f4a2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   1f4a4:	2317      	movs	r3, #23
   1f4a6:	18fb      	adds	r3, r7, r3
   1f4a8:	781b      	ldrb	r3, [r3, #0]
   1f4aa:	b25b      	sxtb	r3, r3
   1f4ac:	2b00      	cmp	r3, #0
   1f4ae:	d115      	bne.n	1f4dc <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   1f4b0:	4b15      	ldr	r3, [pc, #84]	; (1f508 <hif_receive+0x16c>)
   1f4b2:	689a      	ldr	r2, [r3, #8]
   1f4b4:	4b14      	ldr	r3, [pc, #80]	; (1f508 <hif_receive+0x16c>)
   1f4b6:	68db      	ldr	r3, [r3, #12]
   1f4b8:	18d2      	adds	r2, r2, r3
   1f4ba:	1dbb      	adds	r3, r7, #6
   1f4bc:	8819      	ldrh	r1, [r3, #0]
   1f4be:	68fb      	ldr	r3, [r7, #12]
   1f4c0:	18cb      	adds	r3, r1, r3
   1f4c2:	429a      	cmp	r2, r3
   1f4c4:	d003      	beq.n	1f4ce <hif_receive+0x132>
   1f4c6:	1d7b      	adds	r3, r7, #5
   1f4c8:	781b      	ldrb	r3, [r3, #0]
   1f4ca:	2b00      	cmp	r3, #0
   1f4cc:	d007      	beq.n	1f4de <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   1f4ce:	2317      	movs	r3, #23
   1f4d0:	18fc      	adds	r4, r7, r3
   1f4d2:	4b07      	ldr	r3, [pc, #28]	; (1f4f0 <hif_receive+0x154>)
   1f4d4:	4798      	blx	r3
   1f4d6:	0003      	movs	r3, r0
   1f4d8:	7023      	strb	r3, [r4, #0]
   1f4da:	e000      	b.n	1f4de <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   1f4dc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   1f4de:	2317      	movs	r3, #23
   1f4e0:	18fb      	adds	r3, r7, r3
   1f4e2:	781b      	ldrb	r3, [r3, #0]
   1f4e4:	b25b      	sxtb	r3, r3
}
   1f4e6:	0018      	movs	r0, r3
   1f4e8:	46bd      	mov	sp, r7
   1f4ea:	b007      	add	sp, #28
   1f4ec:	bd90      	pop	{r4, r7, pc}
   1f4ee:	46c0      	nop			; (mov r8, r8)
   1f4f0:	0001e8b9 	.word	0x0001e8b9
   1f4f4:	00035b24 	.word	0x00035b24
   1f4f8:	000357fc 	.word	0x000357fc
   1f4fc:	0001baed 	.word	0x0001baed
   1f500:	00035a28 	.word	0x00035a28
   1f504:	000357f8 	.word	0x000357f8
   1f508:	20005444 	.word	0x20005444
   1f50c:	00035a48 	.word	0x00035a48
   1f510:	00000286 	.word	0x00000286
   1f514:	00035a90 	.word	0x00035a90
   1f518:	00020925 	.word	0x00020925

0001f51c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   1f51c:	b580      	push	{r7, lr}
   1f51e:	b084      	sub	sp, #16
   1f520:	af00      	add	r7, sp, #0
   1f522:	0002      	movs	r2, r0
   1f524:	6039      	str	r1, [r7, #0]
   1f526:	1dfb      	adds	r3, r7, #7
   1f528:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   1f52a:	230f      	movs	r3, #15
   1f52c:	18fb      	adds	r3, r7, r3
   1f52e:	2200      	movs	r2, #0
   1f530:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   1f532:	1dfb      	adds	r3, r7, #7
   1f534:	781b      	ldrb	r3, [r3, #0]
   1f536:	2b07      	cmp	r3, #7
   1f538:	d820      	bhi.n	1f57c <hif_register_cb+0x60>
   1f53a:	009a      	lsls	r2, r3, #2
   1f53c:	4b1e      	ldr	r3, [pc, #120]	; (1f5b8 <hif_register_cb+0x9c>)
   1f53e:	18d3      	adds	r3, r2, r3
   1f540:	681b      	ldr	r3, [r3, #0]
   1f542:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   1f544:	4b1d      	ldr	r3, [pc, #116]	; (1f5bc <hif_register_cb+0xa0>)
   1f546:	683a      	ldr	r2, [r7, #0]
   1f548:	615a      	str	r2, [r3, #20]
			break;
   1f54a:	e02d      	b.n	1f5a8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   1f54c:	4b1b      	ldr	r3, [pc, #108]	; (1f5bc <hif_register_cb+0xa0>)
   1f54e:	683a      	ldr	r2, [r7, #0]
   1f550:	611a      	str	r2, [r3, #16]
			break;
   1f552:	e029      	b.n	1f5a8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   1f554:	4b19      	ldr	r3, [pc, #100]	; (1f5bc <hif_register_cb+0xa0>)
   1f556:	683a      	ldr	r2, [r7, #0]
   1f558:	619a      	str	r2, [r3, #24]
			break;
   1f55a:	e025      	b.n	1f5a8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   1f55c:	4b17      	ldr	r3, [pc, #92]	; (1f5bc <hif_register_cb+0xa0>)
   1f55e:	683a      	ldr	r2, [r7, #0]
   1f560:	621a      	str	r2, [r3, #32]
			break;
   1f562:	e021      	b.n	1f5a8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   1f564:	4b15      	ldr	r3, [pc, #84]	; (1f5bc <hif_register_cb+0xa0>)
   1f566:	683a      	ldr	r2, [r7, #0]
   1f568:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   1f56a:	e01d      	b.n	1f5a8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   1f56c:	4b13      	ldr	r3, [pc, #76]	; (1f5bc <hif_register_cb+0xa0>)
   1f56e:	683a      	ldr	r2, [r7, #0]
   1f570:	61da      	str	r2, [r3, #28]
			break;
   1f572:	e019      	b.n	1f5a8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   1f574:	4b11      	ldr	r3, [pc, #68]	; (1f5bc <hif_register_cb+0xa0>)
   1f576:	683a      	ldr	r2, [r7, #0]
   1f578:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   1f57a:	e015      	b.n	1f5a8 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   1f57c:	4a10      	ldr	r2, [pc, #64]	; (1f5c0 <hif_register_cb+0xa4>)
   1f57e:	4911      	ldr	r1, [pc, #68]	; (1f5c4 <hif_register_cb+0xa8>)
   1f580:	4b11      	ldr	r3, [pc, #68]	; (1f5c8 <hif_register_cb+0xac>)
   1f582:	0018      	movs	r0, r3
   1f584:	4b11      	ldr	r3, [pc, #68]	; (1f5cc <hif_register_cb+0xb0>)
   1f586:	4798      	blx	r3
   1f588:	1dfb      	adds	r3, r7, #7
   1f58a:	781a      	ldrb	r2, [r3, #0]
   1f58c:	4b10      	ldr	r3, [pc, #64]	; (1f5d0 <hif_register_cb+0xb4>)
   1f58e:	0011      	movs	r1, r2
   1f590:	0018      	movs	r0, r3
   1f592:	4b0e      	ldr	r3, [pc, #56]	; (1f5cc <hif_register_cb+0xb0>)
   1f594:	4798      	blx	r3
   1f596:	4b0f      	ldr	r3, [pc, #60]	; (1f5d4 <hif_register_cb+0xb8>)
   1f598:	0018      	movs	r0, r3
   1f59a:	4b0c      	ldr	r3, [pc, #48]	; (1f5cc <hif_register_cb+0xb0>)
   1f59c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1f59e:	230f      	movs	r3, #15
   1f5a0:	18fb      	adds	r3, r7, r3
   1f5a2:	22f4      	movs	r2, #244	; 0xf4
   1f5a4:	701a      	strb	r2, [r3, #0]
			break;
   1f5a6:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   1f5a8:	230f      	movs	r3, #15
   1f5aa:	18fb      	adds	r3, r7, r3
   1f5ac:	781b      	ldrb	r3, [r3, #0]
   1f5ae:	b25b      	sxtb	r3, r3
}
   1f5b0:	0018      	movs	r0, r3
   1f5b2:	46bd      	mov	sp, r7
   1f5b4:	b004      	add	sp, #16
   1f5b6:	bd80      	pop	{r7, pc}
   1f5b8:	00035ae0 	.word	0x00035ae0
   1f5bc:	20005444 	.word	0x20005444
   1f5c0:	000002be 	.word	0x000002be
   1f5c4:	00035b30 	.word	0x00035b30
   1f5c8:	000357fc 	.word	0x000357fc
   1f5cc:	0001baed 	.word	0x0001baed
   1f5d0:	00035ad4 	.word	0x00035ad4
   1f5d4:	000357f8 	.word	0x000357f8

0001f5d8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   1f5d8:	b590      	push	{r4, r7, lr}
   1f5da:	b0af      	sub	sp, #188	; 0xbc
   1f5dc:	af02      	add	r7, sp, #8
   1f5de:	603a      	str	r2, [r7, #0]
   1f5e0:	1dfb      	adds	r3, r7, #7
   1f5e2:	1c02      	adds	r2, r0, #0
   1f5e4:	701a      	strb	r2, [r3, #0]
   1f5e6:	1d3b      	adds	r3, r7, #4
   1f5e8:	1c0a      	adds	r2, r1, #0
   1f5ea:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   1f5ec:	1dfb      	adds	r3, r7, #7
   1f5ee:	781b      	ldrb	r3, [r3, #0]
   1f5f0:	2b2c      	cmp	r3, #44	; 0x2c
   1f5f2:	d116      	bne.n	1f622 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   1f5f4:	23a4      	movs	r3, #164	; 0xa4
   1f5f6:	18f9      	adds	r1, r7, r3
   1f5f8:	6838      	ldr	r0, [r7, #0]
   1f5fa:	2300      	movs	r3, #0
   1f5fc:	2204      	movs	r2, #4
   1f5fe:	4cca      	ldr	r4, [pc, #808]	; (1f928 <m2m_wifi_cb+0x350>)
   1f600:	47a0      	blx	r4
   1f602:	1e03      	subs	r3, r0, #0
   1f604:	d000      	beq.n	1f608 <m2m_wifi_cb+0x30>
   1f606:	e1b4      	b.n	1f972 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   1f608:	4bc8      	ldr	r3, [pc, #800]	; (1f92c <m2m_wifi_cb+0x354>)
   1f60a:	681b      	ldr	r3, [r3, #0]
   1f60c:	2b00      	cmp	r3, #0
   1f60e:	d100      	bne.n	1f612 <m2m_wifi_cb+0x3a>
   1f610:	e1af      	b.n	1f972 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   1f612:	4bc6      	ldr	r3, [pc, #792]	; (1f92c <m2m_wifi_cb+0x354>)
   1f614:	681b      	ldr	r3, [r3, #0]
   1f616:	22a4      	movs	r2, #164	; 0xa4
   1f618:	18ba      	adds	r2, r7, r2
   1f61a:	0011      	movs	r1, r2
   1f61c:	202c      	movs	r0, #44	; 0x2c
   1f61e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   1f620:	e1a7      	b.n	1f972 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   1f622:	1dfb      	adds	r3, r7, #7
   1f624:	781b      	ldrb	r3, [r3, #0]
   1f626:	2b1b      	cmp	r3, #27
   1f628:	d116      	bne.n	1f658 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   1f62a:	239c      	movs	r3, #156	; 0x9c
   1f62c:	18f9      	adds	r1, r7, r3
   1f62e:	6838      	ldr	r0, [r7, #0]
   1f630:	2300      	movs	r3, #0
   1f632:	2208      	movs	r2, #8
   1f634:	4cbc      	ldr	r4, [pc, #752]	; (1f928 <m2m_wifi_cb+0x350>)
   1f636:	47a0      	blx	r4
   1f638:	1e03      	subs	r3, r0, #0
   1f63a:	d000      	beq.n	1f63e <m2m_wifi_cb+0x66>
   1f63c:	e199      	b.n	1f972 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1f63e:	4bbb      	ldr	r3, [pc, #748]	; (1f92c <m2m_wifi_cb+0x354>)
   1f640:	681b      	ldr	r3, [r3, #0]
   1f642:	2b00      	cmp	r3, #0
   1f644:	d100      	bne.n	1f648 <m2m_wifi_cb+0x70>
   1f646:	e194      	b.n	1f972 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   1f648:	4bb8      	ldr	r3, [pc, #736]	; (1f92c <m2m_wifi_cb+0x354>)
   1f64a:	681b      	ldr	r3, [r3, #0]
   1f64c:	229c      	movs	r2, #156	; 0x9c
   1f64e:	18ba      	adds	r2, r7, r2
   1f650:	0011      	movs	r1, r2
   1f652:	201b      	movs	r0, #27
   1f654:	4798      	blx	r3
}
   1f656:	e18c      	b.n	1f972 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   1f658:	1dfb      	adds	r3, r7, #7
   1f65a:	781b      	ldrb	r3, [r3, #0]
   1f65c:	2b06      	cmp	r3, #6
   1f65e:	d116      	bne.n	1f68e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   1f660:	230c      	movs	r3, #12
   1f662:	18f9      	adds	r1, r7, r3
   1f664:	6838      	ldr	r0, [r7, #0]
   1f666:	2301      	movs	r3, #1
   1f668:	2230      	movs	r2, #48	; 0x30
   1f66a:	4caf      	ldr	r4, [pc, #700]	; (1f928 <m2m_wifi_cb+0x350>)
   1f66c:	47a0      	blx	r4
   1f66e:	1e03      	subs	r3, r0, #0
   1f670:	d000      	beq.n	1f674 <m2m_wifi_cb+0x9c>
   1f672:	e17e      	b.n	1f972 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   1f674:	4bad      	ldr	r3, [pc, #692]	; (1f92c <m2m_wifi_cb+0x354>)
   1f676:	681b      	ldr	r3, [r3, #0]
   1f678:	2b00      	cmp	r3, #0
   1f67a:	d100      	bne.n	1f67e <m2m_wifi_cb+0xa6>
   1f67c:	e179      	b.n	1f972 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   1f67e:	4bab      	ldr	r3, [pc, #684]	; (1f92c <m2m_wifi_cb+0x354>)
   1f680:	681b      	ldr	r3, [r3, #0]
   1f682:	220c      	movs	r2, #12
   1f684:	18ba      	adds	r2, r7, r2
   1f686:	0011      	movs	r1, r2
   1f688:	2006      	movs	r0, #6
   1f68a:	4798      	blx	r3
}
   1f68c:	e171      	b.n	1f972 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   1f68e:	1dfb      	adds	r3, r7, #7
   1f690:	781b      	ldrb	r3, [r3, #0]
   1f692:	2b0e      	cmp	r3, #14
   1f694:	d100      	bne.n	1f698 <m2m_wifi_cb+0xc0>
   1f696:	e16c      	b.n	1f972 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   1f698:	1dfb      	adds	r3, r7, #7
   1f69a:	781b      	ldrb	r3, [r3, #0]
   1f69c:	2b32      	cmp	r3, #50	; 0x32
   1f69e:	d116      	bne.n	1f6ce <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   1f6a0:	2384      	movs	r3, #132	; 0x84
   1f6a2:	18f9      	adds	r1, r7, r3
   1f6a4:	6838      	ldr	r0, [r7, #0]
   1f6a6:	2300      	movs	r3, #0
   1f6a8:	2218      	movs	r2, #24
   1f6aa:	4c9f      	ldr	r4, [pc, #636]	; (1f928 <m2m_wifi_cb+0x350>)
   1f6ac:	47a0      	blx	r4
   1f6ae:	1e03      	subs	r3, r0, #0
   1f6b0:	d000      	beq.n	1f6b4 <m2m_wifi_cb+0xdc>
   1f6b2:	e15e      	b.n	1f972 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1f6b4:	4b9d      	ldr	r3, [pc, #628]	; (1f92c <m2m_wifi_cb+0x354>)
   1f6b6:	681b      	ldr	r3, [r3, #0]
   1f6b8:	2b00      	cmp	r3, #0
   1f6ba:	d100      	bne.n	1f6be <m2m_wifi_cb+0xe6>
   1f6bc:	e159      	b.n	1f972 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   1f6be:	4b9b      	ldr	r3, [pc, #620]	; (1f92c <m2m_wifi_cb+0x354>)
   1f6c0:	681b      	ldr	r3, [r3, #0]
   1f6c2:	2284      	movs	r2, #132	; 0x84
   1f6c4:	18ba      	adds	r2, r7, r2
   1f6c6:	0011      	movs	r1, r2
   1f6c8:	2032      	movs	r0, #50	; 0x32
   1f6ca:	4798      	blx	r3
}
   1f6cc:	e151      	b.n	1f972 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   1f6ce:	1dfb      	adds	r3, r7, #7
   1f6d0:	781b      	ldrb	r3, [r3, #0]
   1f6d2:	2b2f      	cmp	r3, #47	; 0x2f
   1f6d4:	d11d      	bne.n	1f712 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   1f6d6:	230c      	movs	r3, #12
   1f6d8:	18fb      	adds	r3, r7, r3
   1f6da:	2264      	movs	r2, #100	; 0x64
   1f6dc:	2100      	movs	r1, #0
   1f6de:	0018      	movs	r0, r3
   1f6e0:	4b93      	ldr	r3, [pc, #588]	; (1f930 <m2m_wifi_cb+0x358>)
   1f6e2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   1f6e4:	230c      	movs	r3, #12
   1f6e6:	18f9      	adds	r1, r7, r3
   1f6e8:	6838      	ldr	r0, [r7, #0]
   1f6ea:	2300      	movs	r3, #0
   1f6ec:	2264      	movs	r2, #100	; 0x64
   1f6ee:	4c8e      	ldr	r4, [pc, #568]	; (1f928 <m2m_wifi_cb+0x350>)
   1f6f0:	47a0      	blx	r4
   1f6f2:	1e03      	subs	r3, r0, #0
   1f6f4:	d000      	beq.n	1f6f8 <m2m_wifi_cb+0x120>
   1f6f6:	e13c      	b.n	1f972 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1f6f8:	4b8c      	ldr	r3, [pc, #560]	; (1f92c <m2m_wifi_cb+0x354>)
   1f6fa:	681b      	ldr	r3, [r3, #0]
   1f6fc:	2b00      	cmp	r3, #0
   1f6fe:	d100      	bne.n	1f702 <m2m_wifi_cb+0x12a>
   1f700:	e137      	b.n	1f972 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   1f702:	4b8a      	ldr	r3, [pc, #552]	; (1f92c <m2m_wifi_cb+0x354>)
   1f704:	681b      	ldr	r3, [r3, #0]
   1f706:	220c      	movs	r2, #12
   1f708:	18ba      	adds	r2, r7, r2
   1f70a:	0011      	movs	r1, r2
   1f70c:	202f      	movs	r0, #47	; 0x2f
   1f70e:	4798      	blx	r3
}
   1f710:	e12f      	b.n	1f972 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   1f712:	1dfb      	adds	r3, r7, #7
   1f714:	781b      	ldrb	r3, [r3, #0]
   1f716:	2b34      	cmp	r3, #52	; 0x34
   1f718:	d137      	bne.n	1f78a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   1f71a:	2380      	movs	r3, #128	; 0x80
   1f71c:	18f9      	adds	r1, r7, r3
   1f71e:	6838      	ldr	r0, [r7, #0]
   1f720:	2300      	movs	r3, #0
   1f722:	2204      	movs	r2, #4
   1f724:	4c80      	ldr	r4, [pc, #512]	; (1f928 <m2m_wifi_cb+0x350>)
   1f726:	47a0      	blx	r4
   1f728:	1e03      	subs	r3, r0, #0
   1f72a:	d000      	beq.n	1f72e <m2m_wifi_cb+0x156>
   1f72c:	e121      	b.n	1f972 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   1f72e:	4b81      	ldr	r3, [pc, #516]	; (1f934 <m2m_wifi_cb+0x35c>)
   1f730:	0018      	movs	r0, r3
   1f732:	4b81      	ldr	r3, [pc, #516]	; (1f938 <m2m_wifi_cb+0x360>)
   1f734:	4798      	blx	r3
   1f736:	2380      	movs	r3, #128	; 0x80
   1f738:	18fb      	adds	r3, r7, r3
   1f73a:	681b      	ldr	r3, [r3, #0]
   1f73c:	0e1b      	lsrs	r3, r3, #24
   1f73e:	b2db      	uxtb	r3, r3
   1f740:	0019      	movs	r1, r3
   1f742:	2380      	movs	r3, #128	; 0x80
   1f744:	18fb      	adds	r3, r7, r3
   1f746:	681b      	ldr	r3, [r3, #0]
   1f748:	0c1b      	lsrs	r3, r3, #16
   1f74a:	b2db      	uxtb	r3, r3
   1f74c:	001a      	movs	r2, r3
   1f74e:	2380      	movs	r3, #128	; 0x80
   1f750:	18fb      	adds	r3, r7, r3
   1f752:	681b      	ldr	r3, [r3, #0]
   1f754:	0a1b      	lsrs	r3, r3, #8
   1f756:	b2db      	uxtb	r3, r3
   1f758:	001c      	movs	r4, r3
   1f75a:	2380      	movs	r3, #128	; 0x80
   1f75c:	18fb      	adds	r3, r7, r3
   1f75e:	681b      	ldr	r3, [r3, #0]
   1f760:	b2db      	uxtb	r3, r3
   1f762:	4876      	ldr	r0, [pc, #472]	; (1f93c <m2m_wifi_cb+0x364>)
   1f764:	9300      	str	r3, [sp, #0]
   1f766:	0023      	movs	r3, r4
   1f768:	4c73      	ldr	r4, [pc, #460]	; (1f938 <m2m_wifi_cb+0x360>)
   1f76a:	47a0      	blx	r4
   1f76c:	4b74      	ldr	r3, [pc, #464]	; (1f940 <m2m_wifi_cb+0x368>)
   1f76e:	0018      	movs	r0, r3
   1f770:	4b71      	ldr	r3, [pc, #452]	; (1f938 <m2m_wifi_cb+0x360>)
   1f772:	4798      	blx	r3
			if (gpfAppWifiCb)
   1f774:	4b6d      	ldr	r3, [pc, #436]	; (1f92c <m2m_wifi_cb+0x354>)
   1f776:	681b      	ldr	r3, [r3, #0]
   1f778:	2b00      	cmp	r3, #0
   1f77a:	d100      	bne.n	1f77e <m2m_wifi_cb+0x1a6>
   1f77c:	e0f9      	b.n	1f972 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   1f77e:	4b6b      	ldr	r3, [pc, #428]	; (1f92c <m2m_wifi_cb+0x354>)
   1f780:	681b      	ldr	r3, [r3, #0]
   1f782:	2100      	movs	r1, #0
   1f784:	2034      	movs	r0, #52	; 0x34
   1f786:	4798      	blx	r3
}
   1f788:	e0f3      	b.n	1f972 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   1f78a:	1dfb      	adds	r3, r7, #7
   1f78c:	781b      	ldrb	r3, [r3, #0]
   1f78e:	2b11      	cmp	r3, #17
   1f790:	d11e      	bne.n	1f7d0 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   1f792:	4b6c      	ldr	r3, [pc, #432]	; (1f944 <m2m_wifi_cb+0x36c>)
   1f794:	2200      	movs	r2, #0
   1f796:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   1f798:	237c      	movs	r3, #124	; 0x7c
   1f79a:	18f9      	adds	r1, r7, r3
   1f79c:	6838      	ldr	r0, [r7, #0]
   1f79e:	2300      	movs	r3, #0
   1f7a0:	2204      	movs	r2, #4
   1f7a2:	4c61      	ldr	r4, [pc, #388]	; (1f928 <m2m_wifi_cb+0x350>)
   1f7a4:	47a0      	blx	r4
   1f7a6:	1e03      	subs	r3, r0, #0
   1f7a8:	d000      	beq.n	1f7ac <m2m_wifi_cb+0x1d4>
   1f7aa:	e0e2      	b.n	1f972 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   1f7ac:	237c      	movs	r3, #124	; 0x7c
   1f7ae:	18fb      	adds	r3, r7, r3
   1f7b0:	781a      	ldrb	r2, [r3, #0]
   1f7b2:	4b65      	ldr	r3, [pc, #404]	; (1f948 <m2m_wifi_cb+0x370>)
   1f7b4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   1f7b6:	4b5d      	ldr	r3, [pc, #372]	; (1f92c <m2m_wifi_cb+0x354>)
   1f7b8:	681b      	ldr	r3, [r3, #0]
   1f7ba:	2b00      	cmp	r3, #0
   1f7bc:	d100      	bne.n	1f7c0 <m2m_wifi_cb+0x1e8>
   1f7be:	e0d8      	b.n	1f972 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   1f7c0:	4b5a      	ldr	r3, [pc, #360]	; (1f92c <m2m_wifi_cb+0x354>)
   1f7c2:	681b      	ldr	r3, [r3, #0]
   1f7c4:	227c      	movs	r2, #124	; 0x7c
   1f7c6:	18ba      	adds	r2, r7, r2
   1f7c8:	0011      	movs	r1, r2
   1f7ca:	2011      	movs	r0, #17
   1f7cc:	4798      	blx	r3
}
   1f7ce:	e0d0      	b.n	1f972 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   1f7d0:	1dfb      	adds	r3, r7, #7
   1f7d2:	781b      	ldrb	r3, [r3, #0]
   1f7d4:	2b13      	cmp	r3, #19
   1f7d6:	d116      	bne.n	1f806 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   1f7d8:	230c      	movs	r3, #12
   1f7da:	18f9      	adds	r1, r7, r3
   1f7dc:	6838      	ldr	r0, [r7, #0]
   1f7de:	2300      	movs	r3, #0
   1f7e0:	222c      	movs	r2, #44	; 0x2c
   1f7e2:	4c51      	ldr	r4, [pc, #324]	; (1f928 <m2m_wifi_cb+0x350>)
   1f7e4:	47a0      	blx	r4
   1f7e6:	1e03      	subs	r3, r0, #0
   1f7e8:	d000      	beq.n	1f7ec <m2m_wifi_cb+0x214>
   1f7ea:	e0c2      	b.n	1f972 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1f7ec:	4b4f      	ldr	r3, [pc, #316]	; (1f92c <m2m_wifi_cb+0x354>)
   1f7ee:	681b      	ldr	r3, [r3, #0]
   1f7f0:	2b00      	cmp	r3, #0
   1f7f2:	d100      	bne.n	1f7f6 <m2m_wifi_cb+0x21e>
   1f7f4:	e0bd      	b.n	1f972 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   1f7f6:	4b4d      	ldr	r3, [pc, #308]	; (1f92c <m2m_wifi_cb+0x354>)
   1f7f8:	681b      	ldr	r3, [r3, #0]
   1f7fa:	220c      	movs	r2, #12
   1f7fc:	18ba      	adds	r2, r7, r2
   1f7fe:	0011      	movs	r1, r2
   1f800:	2013      	movs	r0, #19
   1f802:	4798      	blx	r3
}
   1f804:	e0b5      	b.n	1f972 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   1f806:	1dfb      	adds	r3, r7, #7
   1f808:	781b      	ldrb	r3, [r3, #0]
   1f80a:	2b04      	cmp	r3, #4
   1f80c:	d116      	bne.n	1f83c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   1f80e:	23a8      	movs	r3, #168	; 0xa8
   1f810:	18f9      	adds	r1, r7, r3
   1f812:	6838      	ldr	r0, [r7, #0]
   1f814:	2300      	movs	r3, #0
   1f816:	2204      	movs	r2, #4
   1f818:	4c43      	ldr	r4, [pc, #268]	; (1f928 <m2m_wifi_cb+0x350>)
   1f81a:	47a0      	blx	r4
   1f81c:	1e03      	subs	r3, r0, #0
   1f81e:	d000      	beq.n	1f822 <m2m_wifi_cb+0x24a>
   1f820:	e0a7      	b.n	1f972 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1f822:	4b42      	ldr	r3, [pc, #264]	; (1f92c <m2m_wifi_cb+0x354>)
   1f824:	681b      	ldr	r3, [r3, #0]
   1f826:	2b00      	cmp	r3, #0
   1f828:	d100      	bne.n	1f82c <m2m_wifi_cb+0x254>
   1f82a:	e0a2      	b.n	1f972 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   1f82c:	4b3f      	ldr	r3, [pc, #252]	; (1f92c <m2m_wifi_cb+0x354>)
   1f82e:	681b      	ldr	r3, [r3, #0]
   1f830:	22a8      	movs	r2, #168	; 0xa8
   1f832:	18ba      	adds	r2, r7, r2
   1f834:	0011      	movs	r1, r2
   1f836:	2004      	movs	r0, #4
   1f838:	4798      	blx	r3
}
   1f83a:	e09a      	b.n	1f972 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   1f83c:	1dfb      	adds	r3, r7, #7
   1f83e:	781b      	ldrb	r3, [r3, #0]
   1f840:	2b65      	cmp	r3, #101	; 0x65
   1f842:	d116      	bne.n	1f872 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   1f844:	23a8      	movs	r3, #168	; 0xa8
   1f846:	18f9      	adds	r1, r7, r3
   1f848:	6838      	ldr	r0, [r7, #0]
   1f84a:	2300      	movs	r3, #0
   1f84c:	2204      	movs	r2, #4
   1f84e:	4c36      	ldr	r4, [pc, #216]	; (1f928 <m2m_wifi_cb+0x350>)
   1f850:	47a0      	blx	r4
   1f852:	1e03      	subs	r3, r0, #0
   1f854:	d000      	beq.n	1f858 <m2m_wifi_cb+0x280>
   1f856:	e08c      	b.n	1f972 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1f858:	4b34      	ldr	r3, [pc, #208]	; (1f92c <m2m_wifi_cb+0x354>)
   1f85a:	681b      	ldr	r3, [r3, #0]
   1f85c:	2b00      	cmp	r3, #0
   1f85e:	d100      	bne.n	1f862 <m2m_wifi_cb+0x28a>
   1f860:	e087      	b.n	1f972 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   1f862:	4b32      	ldr	r3, [pc, #200]	; (1f92c <m2m_wifi_cb+0x354>)
   1f864:	681b      	ldr	r3, [r3, #0]
   1f866:	22a8      	movs	r2, #168	; 0xa8
   1f868:	18ba      	adds	r2, r7, r2
   1f86a:	0011      	movs	r1, r2
   1f86c:	2065      	movs	r0, #101	; 0x65
   1f86e:	4798      	blx	r3
}
   1f870:	e07f      	b.n	1f972 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   1f872:	1dfb      	adds	r3, r7, #7
   1f874:	781b      	ldrb	r3, [r3, #0]
   1f876:	2b09      	cmp	r3, #9
   1f878:	d116      	bne.n	1f8a8 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   1f87a:	230c      	movs	r3, #12
   1f87c:	18f9      	adds	r1, r7, r3
   1f87e:	6838      	ldr	r0, [r7, #0]
   1f880:	2301      	movs	r3, #1
   1f882:	2264      	movs	r2, #100	; 0x64
   1f884:	4c28      	ldr	r4, [pc, #160]	; (1f928 <m2m_wifi_cb+0x350>)
   1f886:	47a0      	blx	r4
   1f888:	1e03      	subs	r3, r0, #0
   1f88a:	d000      	beq.n	1f88e <m2m_wifi_cb+0x2b6>
   1f88c:	e071      	b.n	1f972 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   1f88e:	4b27      	ldr	r3, [pc, #156]	; (1f92c <m2m_wifi_cb+0x354>)
   1f890:	681b      	ldr	r3, [r3, #0]
   1f892:	2b00      	cmp	r3, #0
   1f894:	d100      	bne.n	1f898 <m2m_wifi_cb+0x2c0>
   1f896:	e06c      	b.n	1f972 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   1f898:	4b24      	ldr	r3, [pc, #144]	; (1f92c <m2m_wifi_cb+0x354>)
   1f89a:	681b      	ldr	r3, [r3, #0]
   1f89c:	220c      	movs	r2, #12
   1f89e:	18ba      	adds	r2, r7, r2
   1f8a0:	0011      	movs	r1, r2
   1f8a2:	2009      	movs	r0, #9
   1f8a4:	4798      	blx	r3
}
   1f8a6:	e064      	b.n	1f972 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   1f8a8:	1dfb      	adds	r3, r7, #7
   1f8aa:	781b      	ldrb	r3, [r3, #0]
   1f8ac:	2b2a      	cmp	r3, #42	; 0x2a
   1f8ae:	d114      	bne.n	1f8da <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   1f8b0:	2378      	movs	r3, #120	; 0x78
   1f8b2:	18f9      	adds	r1, r7, r3
   1f8b4:	6838      	ldr	r0, [r7, #0]
   1f8b6:	2301      	movs	r3, #1
   1f8b8:	2204      	movs	r2, #4
   1f8ba:	4c1b      	ldr	r4, [pc, #108]	; (1f928 <m2m_wifi_cb+0x350>)
   1f8bc:	47a0      	blx	r4
   1f8be:	1e03      	subs	r3, r0, #0
   1f8c0:	d157      	bne.n	1f972 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   1f8c2:	4b1a      	ldr	r3, [pc, #104]	; (1f92c <m2m_wifi_cb+0x354>)
   1f8c4:	681b      	ldr	r3, [r3, #0]
   1f8c6:	2b00      	cmp	r3, #0
   1f8c8:	d053      	beq.n	1f972 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   1f8ca:	4b18      	ldr	r3, [pc, #96]	; (1f92c <m2m_wifi_cb+0x354>)
   1f8cc:	681b      	ldr	r3, [r3, #0]
   1f8ce:	2278      	movs	r2, #120	; 0x78
   1f8d0:	18ba      	adds	r2, r7, r2
   1f8d2:	0011      	movs	r1, r2
   1f8d4:	202a      	movs	r0, #42	; 0x2a
   1f8d6:	4798      	blx	r3
}
   1f8d8:	e04b      	b.n	1f972 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   1f8da:	1dfb      	adds	r3, r7, #7
   1f8dc:	781b      	ldrb	r3, [r3, #0]
   1f8de:	2b20      	cmp	r3, #32
   1f8e0:	d134      	bne.n	1f94c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   1f8e2:	2370      	movs	r3, #112	; 0x70
   1f8e4:	18f9      	adds	r1, r7, r3
   1f8e6:	6838      	ldr	r0, [r7, #0]
   1f8e8:	2300      	movs	r3, #0
   1f8ea:	2208      	movs	r2, #8
   1f8ec:	4c0e      	ldr	r4, [pc, #56]	; (1f928 <m2m_wifi_cb+0x350>)
   1f8ee:	47a0      	blx	r4
   1f8f0:	1e03      	subs	r3, r0, #0
   1f8f2:	d13e      	bne.n	1f972 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   1f8f4:	683b      	ldr	r3, [r7, #0]
   1f8f6:	3308      	adds	r3, #8
   1f8f8:	0018      	movs	r0, r3
   1f8fa:	2370      	movs	r3, #112	; 0x70
   1f8fc:	18fb      	adds	r3, r7, r3
   1f8fe:	6819      	ldr	r1, [r3, #0]
   1f900:	2370      	movs	r3, #112	; 0x70
   1f902:	18fb      	adds	r3, r7, r3
   1f904:	889a      	ldrh	r2, [r3, #4]
   1f906:	2301      	movs	r3, #1
   1f908:	4c07      	ldr	r4, [pc, #28]	; (1f928 <m2m_wifi_cb+0x350>)
   1f90a:	47a0      	blx	r4
   1f90c:	1e03      	subs	r3, r0, #0
   1f90e:	d130      	bne.n	1f972 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   1f910:	4b06      	ldr	r3, [pc, #24]	; (1f92c <m2m_wifi_cb+0x354>)
   1f912:	681b      	ldr	r3, [r3, #0]
   1f914:	2b00      	cmp	r3, #0
   1f916:	d02c      	beq.n	1f972 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   1f918:	4b04      	ldr	r3, [pc, #16]	; (1f92c <m2m_wifi_cb+0x354>)
   1f91a:	681b      	ldr	r3, [r3, #0]
   1f91c:	2270      	movs	r2, #112	; 0x70
   1f91e:	18ba      	adds	r2, r7, r2
   1f920:	0011      	movs	r1, r2
   1f922:	2020      	movs	r0, #32
   1f924:	4798      	blx	r3
}
   1f926:	e024      	b.n	1f972 <m2m_wifi_cb+0x39a>
   1f928:	0001f39d 	.word	0x0001f39d
   1f92c:	20003d00 	.word	0x20003d00
   1f930:	0001e821 	.word	0x0001e821
   1f934:	00035b40 	.word	0x00035b40
   1f938:	0001baed 	.word	0x0001baed
   1f93c:	00035b4c 	.word	0x00035b4c
   1f940:	00035b6c 	.word	0x00035b6c
   1f944:	20003cfd 	.word	0x20003cfd
   1f948:	20003cfc 	.word	0x20003cfc
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   1f94c:	2324      	movs	r3, #36	; 0x24
   1f94e:	33ff      	adds	r3, #255	; 0xff
   1f950:	001a      	movs	r2, r3
   1f952:	490a      	ldr	r1, [pc, #40]	; (1f97c <m2m_wifi_cb+0x3a4>)
   1f954:	4b0a      	ldr	r3, [pc, #40]	; (1f980 <m2m_wifi_cb+0x3a8>)
   1f956:	0018      	movs	r0, r3
   1f958:	4b0a      	ldr	r3, [pc, #40]	; (1f984 <m2m_wifi_cb+0x3ac>)
   1f95a:	4798      	blx	r3
   1f95c:	1dfb      	adds	r3, r7, #7
   1f95e:	781a      	ldrb	r2, [r3, #0]
   1f960:	4b09      	ldr	r3, [pc, #36]	; (1f988 <m2m_wifi_cb+0x3b0>)
   1f962:	0011      	movs	r1, r2
   1f964:	0018      	movs	r0, r3
   1f966:	4b07      	ldr	r3, [pc, #28]	; (1f984 <m2m_wifi_cb+0x3ac>)
   1f968:	4798      	blx	r3
   1f96a:	4b08      	ldr	r3, [pc, #32]	; (1f98c <m2m_wifi_cb+0x3b4>)
   1f96c:	0018      	movs	r0, r3
   1f96e:	4b05      	ldr	r3, [pc, #20]	; (1f984 <m2m_wifi_cb+0x3ac>)
   1f970:	4798      	blx	r3
}
   1f972:	46c0      	nop			; (mov r8, r8)
   1f974:	46bd      	mov	sp, r7
   1f976:	b02d      	add	sp, #180	; 0xb4
   1f978:	bd90      	pop	{r4, r7, pc}
   1f97a:	46c0      	nop			; (mov r8, r8)
   1f97c:	00035f0c 	.word	0x00035f0c
   1f980:	00035b70 	.word	0x00035b70
   1f984:	0001baed 	.word	0x0001baed
   1f988:	00035b84 	.word	0x00035b84
   1f98c:	00035b6c 	.word	0x00035b6c

0001f990 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   1f990:	b590      	push	{r4, r7, lr}
   1f992:	b091      	sub	sp, #68	; 0x44
   1f994:	af02      	add	r7, sp, #8
   1f996:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   1f998:	2337      	movs	r3, #55	; 0x37
   1f99a:	18fb      	adds	r3, r7, r3
   1f99c:	2200      	movs	r2, #0
   1f99e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   1f9a0:	230b      	movs	r3, #11
   1f9a2:	18fb      	adds	r3, r7, r3
   1f9a4:	2201      	movs	r2, #1
   1f9a6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   1f9a8:	687b      	ldr	r3, [r7, #4]
   1f9aa:	2b00      	cmp	r3, #0
   1f9ac:	d104      	bne.n	1f9b8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   1f9ae:	2337      	movs	r3, #55	; 0x37
   1f9b0:	18fb      	adds	r3, r7, r3
   1f9b2:	22f4      	movs	r2, #244	; 0xf4
   1f9b4:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   1f9b6:	e0b3      	b.n	1fb20 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   1f9b8:	687b      	ldr	r3, [r7, #4]
   1f9ba:	681a      	ldr	r2, [r3, #0]
   1f9bc:	4b5c      	ldr	r3, [pc, #368]	; (1fb30 <m2m_wifi_init+0x1a0>)
   1f9be:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   1f9c0:	4b5c      	ldr	r3, [pc, #368]	; (1fb34 <m2m_wifi_init+0x1a4>)
   1f9c2:	2200      	movs	r2, #0
   1f9c4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   1f9c6:	2337      	movs	r3, #55	; 0x37
   1f9c8:	18fc      	adds	r4, r7, r3
   1f9ca:	230b      	movs	r3, #11
   1f9cc:	18fb      	adds	r3, r7, r3
   1f9ce:	0018      	movs	r0, r3
   1f9d0:	4b59      	ldr	r3, [pc, #356]	; (1fb38 <m2m_wifi_init+0x1a8>)
   1f9d2:	4798      	blx	r3
   1f9d4:	0003      	movs	r3, r0
   1f9d6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   1f9d8:	2337      	movs	r3, #55	; 0x37
   1f9da:	18fb      	adds	r3, r7, r3
   1f9dc:	781b      	ldrb	r3, [r3, #0]
   1f9de:	b25b      	sxtb	r3, r3
   1f9e0:	2b00      	cmp	r3, #0
   1f9e2:	d000      	beq.n	1f9e6 <m2m_wifi_init+0x56>
   1f9e4:	e099      	b.n	1fb1a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   1f9e6:	2337      	movs	r3, #55	; 0x37
   1f9e8:	18fc      	adds	r4, r7, r3
   1f9ea:	2000      	movs	r0, #0
   1f9ec:	4b53      	ldr	r3, [pc, #332]	; (1fb3c <m2m_wifi_init+0x1ac>)
   1f9ee:	4798      	blx	r3
   1f9f0:	0003      	movs	r3, r0
   1f9f2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   1f9f4:	2337      	movs	r3, #55	; 0x37
   1f9f6:	18fb      	adds	r3, r7, r3
   1f9f8:	781b      	ldrb	r3, [r3, #0]
   1f9fa:	b25b      	sxtb	r3, r3
   1f9fc:	2b00      	cmp	r3, #0
   1f9fe:	d000      	beq.n	1fa02 <m2m_wifi_init+0x72>
   1fa00:	e086      	b.n	1fb10 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   1fa02:	4b4f      	ldr	r3, [pc, #316]	; (1fb40 <m2m_wifi_init+0x1b0>)
   1fa04:	0019      	movs	r1, r3
   1fa06:	2001      	movs	r0, #1
   1fa08:	4b4e      	ldr	r3, [pc, #312]	; (1fb44 <m2m_wifi_init+0x1b4>)
   1fa0a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   1fa0c:	2337      	movs	r3, #55	; 0x37
   1fa0e:	18fc      	adds	r4, r7, r3
   1fa10:	230c      	movs	r3, #12
   1fa12:	18fb      	adds	r3, r7, r3
   1fa14:	0018      	movs	r0, r3
   1fa16:	4b4c      	ldr	r3, [pc, #304]	; (1fb48 <m2m_wifi_init+0x1b8>)
   1fa18:	4798      	blx	r3
   1fa1a:	0003      	movs	r3, r0
   1fa1c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   1fa1e:	4b4b      	ldr	r3, [pc, #300]	; (1fb4c <m2m_wifi_init+0x1bc>)
   1fa20:	0018      	movs	r0, r3
   1fa22:	4b4b      	ldr	r3, [pc, #300]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1fa24:	4798      	blx	r3
   1fa26:	230c      	movs	r3, #12
   1fa28:	18fb      	adds	r3, r7, r3
   1fa2a:	791b      	ldrb	r3, [r3, #4]
   1fa2c:	0019      	movs	r1, r3
   1fa2e:	230c      	movs	r3, #12
   1fa30:	18fb      	adds	r3, r7, r3
   1fa32:	795b      	ldrb	r3, [r3, #5]
   1fa34:	001a      	movs	r2, r3
   1fa36:	230c      	movs	r3, #12
   1fa38:	18fb      	adds	r3, r7, r3
   1fa3a:	799b      	ldrb	r3, [r3, #6]
   1fa3c:	001c      	movs	r4, r3
   1fa3e:	230c      	movs	r3, #12
   1fa40:	18fb      	adds	r3, r7, r3
   1fa42:	8c1b      	ldrh	r3, [r3, #32]
   1fa44:	4843      	ldr	r0, [pc, #268]	; (1fb54 <m2m_wifi_init+0x1c4>)
   1fa46:	9300      	str	r3, [sp, #0]
   1fa48:	0023      	movs	r3, r4
   1fa4a:	4c41      	ldr	r4, [pc, #260]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1fa4c:	47a0      	blx	r4
   1fa4e:	4b42      	ldr	r3, [pc, #264]	; (1fb58 <m2m_wifi_init+0x1c8>)
   1fa50:	0018      	movs	r0, r3
   1fa52:	4b3f      	ldr	r3, [pc, #252]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1fa54:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   1fa56:	4b3d      	ldr	r3, [pc, #244]	; (1fb4c <m2m_wifi_init+0x1bc>)
   1fa58:	0018      	movs	r0, r3
   1fa5a:	4b3d      	ldr	r3, [pc, #244]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1fa5c:	4798      	blx	r3
   1fa5e:	230c      	movs	r3, #12
   1fa60:	18fb      	adds	r3, r7, r3
   1fa62:	3316      	adds	r3, #22
   1fa64:	001a      	movs	r2, r3
   1fa66:	230c      	movs	r3, #12
   1fa68:	18fb      	adds	r3, r7, r3
   1fa6a:	330a      	adds	r3, #10
   1fa6c:	0019      	movs	r1, r3
   1fa6e:	4b3b      	ldr	r3, [pc, #236]	; (1fb5c <m2m_wifi_init+0x1cc>)
   1fa70:	0018      	movs	r0, r3
   1fa72:	4b37      	ldr	r3, [pc, #220]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1fa74:	4798      	blx	r3
   1fa76:	4b38      	ldr	r3, [pc, #224]	; (1fb58 <m2m_wifi_init+0x1c8>)
   1fa78:	0018      	movs	r0, r3
   1fa7a:	4b35      	ldr	r3, [pc, #212]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1fa7c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   1fa7e:	4b33      	ldr	r3, [pc, #204]	; (1fb4c <m2m_wifi_init+0x1bc>)
   1fa80:	0018      	movs	r0, r3
   1fa82:	4b33      	ldr	r3, [pc, #204]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1fa84:	4798      	blx	r3
   1fa86:	230c      	movs	r3, #12
   1fa88:	18fb      	adds	r3, r7, r3
   1fa8a:	79db      	ldrb	r3, [r3, #7]
   1fa8c:	0019      	movs	r1, r3
   1fa8e:	230c      	movs	r3, #12
   1fa90:	18fb      	adds	r3, r7, r3
   1fa92:	7a1b      	ldrb	r3, [r3, #8]
   1fa94:	001a      	movs	r2, r3
   1fa96:	230c      	movs	r3, #12
   1fa98:	18fb      	adds	r3, r7, r3
   1fa9a:	7a5b      	ldrb	r3, [r3, #9]
   1fa9c:	4830      	ldr	r0, [pc, #192]	; (1fb60 <m2m_wifi_init+0x1d0>)
   1fa9e:	4c2c      	ldr	r4, [pc, #176]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1faa0:	47a0      	blx	r4
   1faa2:	4b2d      	ldr	r3, [pc, #180]	; (1fb58 <m2m_wifi_init+0x1c8>)
   1faa4:	0018      	movs	r0, r3
   1faa6:	4b2a      	ldr	r3, [pc, #168]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1faa8:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   1faaa:	4b28      	ldr	r3, [pc, #160]	; (1fb4c <m2m_wifi_init+0x1bc>)
   1faac:	0018      	movs	r0, r3
   1faae:	4b28      	ldr	r3, [pc, #160]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1fab0:	4798      	blx	r3
   1fab2:	482c      	ldr	r0, [pc, #176]	; (1fb64 <m2m_wifi_init+0x1d4>)
   1fab4:	2304      	movs	r3, #4
   1fab6:	2205      	movs	r2, #5
   1fab8:	2113      	movs	r1, #19
   1faba:	4c25      	ldr	r4, [pc, #148]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1fabc:	47a0      	blx	r4
   1fabe:	4b26      	ldr	r3, [pc, #152]	; (1fb58 <m2m_wifi_init+0x1c8>)
   1fac0:	0018      	movs	r0, r3
   1fac2:	4b23      	ldr	r3, [pc, #140]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1fac4:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   1fac6:	4b21      	ldr	r3, [pc, #132]	; (1fb4c <m2m_wifi_init+0x1bc>)
   1fac8:	0018      	movs	r0, r3
   1faca:	4b21      	ldr	r3, [pc, #132]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1facc:	4798      	blx	r3
   1face:	4a26      	ldr	r2, [pc, #152]	; (1fb68 <m2m_wifi_init+0x1d8>)
   1fad0:	4926      	ldr	r1, [pc, #152]	; (1fb6c <m2m_wifi_init+0x1dc>)
   1fad2:	4b27      	ldr	r3, [pc, #156]	; (1fb70 <m2m_wifi_init+0x1e0>)
   1fad4:	0018      	movs	r0, r3
   1fad6:	4b1e      	ldr	r3, [pc, #120]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1fad8:	4798      	blx	r3
   1fada:	4b1f      	ldr	r3, [pc, #124]	; (1fb58 <m2m_wifi_init+0x1c8>)
   1fadc:	0018      	movs	r0, r3
   1fade:	4b1c      	ldr	r3, [pc, #112]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1fae0:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   1fae2:	2337      	movs	r3, #55	; 0x37
   1fae4:	18fb      	adds	r3, r7, r3
   1fae6:	781b      	ldrb	r3, [r3, #0]
   1fae8:	b25b      	sxtb	r3, r3
   1faea:	330d      	adds	r3, #13
   1faec:	d117      	bne.n	1fb1e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   1faee:	23e8      	movs	r3, #232	; 0xe8
   1faf0:	33ff      	adds	r3, #255	; 0xff
   1faf2:	001a      	movs	r2, r3
   1faf4:	491f      	ldr	r1, [pc, #124]	; (1fb74 <m2m_wifi_init+0x1e4>)
   1faf6:	4b20      	ldr	r3, [pc, #128]	; (1fb78 <m2m_wifi_init+0x1e8>)
   1faf8:	0018      	movs	r0, r3
   1fafa:	4b15      	ldr	r3, [pc, #84]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1fafc:	4798      	blx	r3
   1fafe:	4b1f      	ldr	r3, [pc, #124]	; (1fb7c <m2m_wifi_init+0x1ec>)
   1fb00:	0018      	movs	r0, r3
   1fb02:	4b13      	ldr	r3, [pc, #76]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1fb04:	4798      	blx	r3
   1fb06:	4b14      	ldr	r3, [pc, #80]	; (1fb58 <m2m_wifi_init+0x1c8>)
   1fb08:	0018      	movs	r0, r3
   1fb0a:	4b11      	ldr	r3, [pc, #68]	; (1fb50 <m2m_wifi_init+0x1c0>)
   1fb0c:	4798      	blx	r3
	}

	goto _EXIT0;
   1fb0e:	e006      	b.n	1fb1e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   1fb10:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   1fb12:	2000      	movs	r0, #0
   1fb14:	4b1a      	ldr	r3, [pc, #104]	; (1fb80 <m2m_wifi_init+0x1f0>)
   1fb16:	4798      	blx	r3
   1fb18:	e002      	b.n	1fb20 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   1fb1a:	46c0      	nop			; (mov r8, r8)
   1fb1c:	e000      	b.n	1fb20 <m2m_wifi_init+0x190>
	goto _EXIT0;
   1fb1e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   1fb20:	2337      	movs	r3, #55	; 0x37
   1fb22:	18fb      	adds	r3, r7, r3
   1fb24:	781b      	ldrb	r3, [r3, #0]
   1fb26:	b25b      	sxtb	r3, r3
}
   1fb28:	0018      	movs	r0, r3
   1fb2a:	46bd      	mov	sp, r7
   1fb2c:	b00f      	add	sp, #60	; 0x3c
   1fb2e:	bd90      	pop	{r4, r7, pc}
   1fb30:	20003d00 	.word	0x20003d00
   1fb34:	20003cfd 	.word	0x20003cfd
   1fb38:	00020cb5 	.word	0x00020cb5
   1fb3c:	0001ea39 	.word	0x0001ea39
   1fb40:	0001f5d9 	.word	0x0001f5d9
   1fb44:	0001f51d 	.word	0x0001f51d
   1fb48:	00020ae9 	.word	0x00020ae9
   1fb4c:	00035b40 	.word	0x00035b40
   1fb50:	0001baed 	.word	0x0001baed
   1fb54:	00035ce4 	.word	0x00035ce4
   1fb58:	00035b6c 	.word	0x00035b6c
   1fb5c:	00035d0c 	.word	0x00035d0c
   1fb60:	00035d28 	.word	0x00035d28
   1fb64:	00035d4c 	.word	0x00035d4c
   1fb68:	00035d64 	.word	0x00035d64
   1fb6c:	00035d70 	.word	0x00035d70
   1fb70:	00035d7c 	.word	0x00035d7c
   1fb74:	00035f18 	.word	0x00035f18
   1fb78:	00035b70 	.word	0x00035b70
   1fb7c:	00035d94 	.word	0x00035d94
   1fb80:	00020e45 	.word	0x00020e45

0001fb84 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   1fb84:	b580      	push	{r7, lr}
   1fb86:	b082      	sub	sp, #8
   1fb88:	af00      	add	r7, sp, #0
   1fb8a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   1fb8c:	4b03      	ldr	r3, [pc, #12]	; (1fb9c <m2m_wifi_handle_events+0x18>)
   1fb8e:	4798      	blx	r3
   1fb90:	0003      	movs	r3, r0
}
   1fb92:	0018      	movs	r0, r3
   1fb94:	46bd      	mov	sp, r7
   1fb96:	b002      	add	sp, #8
   1fb98:	bd80      	pop	{r7, pc}
   1fb9a:	46c0      	nop			; (mov r8, r8)
   1fb9c:	0001f2fd 	.word	0x0001f2fd

0001fba0 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   1fba0:	b590      	push	{r4, r7, lr}
   1fba2:	b087      	sub	sp, #28
   1fba4:	af02      	add	r7, sp, #8
   1fba6:	60f8      	str	r0, [r7, #12]
   1fba8:	0008      	movs	r0, r1
   1fbaa:	0011      	movs	r1, r2
   1fbac:	607b      	str	r3, [r7, #4]
   1fbae:	230b      	movs	r3, #11
   1fbb0:	18fb      	adds	r3, r7, r3
   1fbb2:	1c02      	adds	r2, r0, #0
   1fbb4:	701a      	strb	r2, [r3, #0]
   1fbb6:	230a      	movs	r3, #10
   1fbb8:	18fb      	adds	r3, r7, r3
   1fbba:	1c0a      	adds	r2, r1, #0
   1fbbc:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   1fbbe:	687c      	ldr	r4, [r7, #4]
   1fbc0:	230a      	movs	r3, #10
   1fbc2:	18fb      	adds	r3, r7, r3
   1fbc4:	781a      	ldrb	r2, [r3, #0]
   1fbc6:	230b      	movs	r3, #11
   1fbc8:	18fb      	adds	r3, r7, r3
   1fbca:	7819      	ldrb	r1, [r3, #0]
   1fbcc:	68f8      	ldr	r0, [r7, #12]
   1fbce:	2300      	movs	r3, #0
   1fbd0:	9301      	str	r3, [sp, #4]
   1fbd2:	2320      	movs	r3, #32
   1fbd4:	18fb      	adds	r3, r7, r3
   1fbd6:	881b      	ldrh	r3, [r3, #0]
   1fbd8:	9300      	str	r3, [sp, #0]
   1fbda:	0023      	movs	r3, r4
   1fbdc:	4c03      	ldr	r4, [pc, #12]	; (1fbec <m2m_wifi_connect+0x4c>)
   1fbde:	47a0      	blx	r4
   1fbe0:	0003      	movs	r3, r0
}
   1fbe2:	0018      	movs	r0, r3
   1fbe4:	46bd      	mov	sp, r7
   1fbe6:	b005      	add	sp, #20
   1fbe8:	bd90      	pop	{r4, r7, pc}
   1fbea:	46c0      	nop			; (mov r8, r8)
   1fbec:	0001fbf1 	.word	0x0001fbf1

0001fbf0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   1fbf0:	b5b0      	push	{r4, r5, r7, lr}
   1fbf2:	b0aa      	sub	sp, #168	; 0xa8
   1fbf4:	af04      	add	r7, sp, #16
   1fbf6:	60f8      	str	r0, [r7, #12]
   1fbf8:	0008      	movs	r0, r1
   1fbfa:	0011      	movs	r1, r2
   1fbfc:	607b      	str	r3, [r7, #4]
   1fbfe:	230b      	movs	r3, #11
   1fc00:	18fb      	adds	r3, r7, r3
   1fc02:	1c02      	adds	r2, r0, #0
   1fc04:	701a      	strb	r2, [r3, #0]
   1fc06:	230a      	movs	r3, #10
   1fc08:	18fb      	adds	r3, r7, r3
   1fc0a:	1c0a      	adds	r2, r1, #0
   1fc0c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   1fc0e:	2397      	movs	r3, #151	; 0x97
   1fc10:	18fb      	adds	r3, r7, r3
   1fc12:	2200      	movs	r2, #0
   1fc14:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   1fc16:	230a      	movs	r3, #10
   1fc18:	18fb      	adds	r3, r7, r3
   1fc1a:	781b      	ldrb	r3, [r3, #0]
   1fc1c:	2b01      	cmp	r3, #1
   1fc1e:	d100      	bne.n	1fc22 <m2m_wifi_connect_sc+0x32>
   1fc20:	e085      	b.n	1fd2e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   1fc22:	687b      	ldr	r3, [r7, #4]
   1fc24:	2b00      	cmp	r3, #0
   1fc26:	d112      	bne.n	1fc4e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   1fc28:	4ad8      	ldr	r2, [pc, #864]	; (1ff8c <m2m_wifi_connect_sc+0x39c>)
   1fc2a:	49d9      	ldr	r1, [pc, #868]	; (1ff90 <m2m_wifi_connect_sc+0x3a0>)
   1fc2c:	4bd9      	ldr	r3, [pc, #868]	; (1ff94 <m2m_wifi_connect_sc+0x3a4>)
   1fc2e:	0018      	movs	r0, r3
   1fc30:	4bd9      	ldr	r3, [pc, #868]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fc32:	4798      	blx	r3
   1fc34:	4bd9      	ldr	r3, [pc, #868]	; (1ff9c <m2m_wifi_connect_sc+0x3ac>)
   1fc36:	0018      	movs	r0, r3
   1fc38:	4bd7      	ldr	r3, [pc, #860]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fc3a:	4798      	blx	r3
   1fc3c:	4bd8      	ldr	r3, [pc, #864]	; (1ffa0 <m2m_wifi_connect_sc+0x3b0>)
   1fc3e:	0018      	movs	r0, r3
   1fc40:	4bd5      	ldr	r3, [pc, #852]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fc42:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1fc44:	2397      	movs	r3, #151	; 0x97
   1fc46:	18fb      	adds	r3, r7, r3
   1fc48:	22f4      	movs	r2, #244	; 0xf4
   1fc4a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1fc4c:	e1f9      	b.n	20042 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   1fc4e:	230a      	movs	r3, #10
   1fc50:	18fb      	adds	r3, r7, r3
   1fc52:	781b      	ldrb	r3, [r3, #0]
   1fc54:	2b02      	cmp	r3, #2
   1fc56:	d16a      	bne.n	1fd2e <m2m_wifi_connect_sc+0x13e>
   1fc58:	687b      	ldr	r3, [r7, #4]
   1fc5a:	0018      	movs	r0, r3
   1fc5c:	4bd1      	ldr	r3, [pc, #836]	; (1ffa4 <m2m_wifi_connect_sc+0x3b4>)
   1fc5e:	4798      	blx	r3
   1fc60:	0003      	movs	r3, r0
   1fc62:	2b40      	cmp	r3, #64	; 0x40
   1fc64:	d163      	bne.n	1fd2e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   1fc66:	2396      	movs	r3, #150	; 0x96
   1fc68:	18fb      	adds	r3, r7, r3
   1fc6a:	2200      	movs	r2, #0
   1fc6c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   1fc6e:	687b      	ldr	r3, [r7, #4]
   1fc70:	2290      	movs	r2, #144	; 0x90
   1fc72:	18ba      	adds	r2, r7, r2
   1fc74:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   1fc76:	e055      	b.n	1fd24 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   1fc78:	2396      	movs	r3, #150	; 0x96
   1fc7a:	18fb      	adds	r3, r7, r3
   1fc7c:	781b      	ldrb	r3, [r3, #0]
   1fc7e:	2290      	movs	r2, #144	; 0x90
   1fc80:	18ba      	adds	r2, r7, r2
   1fc82:	6812      	ldr	r2, [r2, #0]
   1fc84:	18d3      	adds	r3, r2, r3
   1fc86:	781b      	ldrb	r3, [r3, #0]
   1fc88:	2b2f      	cmp	r3, #47	; 0x2f
   1fc8a:	d931      	bls.n	1fcf0 <m2m_wifi_connect_sc+0x100>
   1fc8c:	2396      	movs	r3, #150	; 0x96
   1fc8e:	18fb      	adds	r3, r7, r3
   1fc90:	781b      	ldrb	r3, [r3, #0]
   1fc92:	2290      	movs	r2, #144	; 0x90
   1fc94:	18ba      	adds	r2, r7, r2
   1fc96:	6812      	ldr	r2, [r2, #0]
   1fc98:	18d3      	adds	r3, r2, r3
   1fc9a:	781b      	ldrb	r3, [r3, #0]
   1fc9c:	2b39      	cmp	r3, #57	; 0x39
   1fc9e:	d909      	bls.n	1fcb4 <m2m_wifi_connect_sc+0xc4>
   1fca0:	2396      	movs	r3, #150	; 0x96
   1fca2:	18fb      	adds	r3, r7, r3
   1fca4:	781b      	ldrb	r3, [r3, #0]
   1fca6:	2290      	movs	r2, #144	; 0x90
   1fca8:	18ba      	adds	r2, r7, r2
   1fcaa:	6812      	ldr	r2, [r2, #0]
   1fcac:	18d3      	adds	r3, r2, r3
   1fcae:	781b      	ldrb	r3, [r3, #0]
   1fcb0:	2b40      	cmp	r3, #64	; 0x40
   1fcb2:	d91d      	bls.n	1fcf0 <m2m_wifi_connect_sc+0x100>
   1fcb4:	2396      	movs	r3, #150	; 0x96
   1fcb6:	18fb      	adds	r3, r7, r3
   1fcb8:	781b      	ldrb	r3, [r3, #0]
   1fcba:	2290      	movs	r2, #144	; 0x90
   1fcbc:	18ba      	adds	r2, r7, r2
   1fcbe:	6812      	ldr	r2, [r2, #0]
   1fcc0:	18d3      	adds	r3, r2, r3
   1fcc2:	781b      	ldrb	r3, [r3, #0]
   1fcc4:	2b46      	cmp	r3, #70	; 0x46
   1fcc6:	d909      	bls.n	1fcdc <m2m_wifi_connect_sc+0xec>
   1fcc8:	2396      	movs	r3, #150	; 0x96
   1fcca:	18fb      	adds	r3, r7, r3
   1fccc:	781b      	ldrb	r3, [r3, #0]
   1fcce:	2290      	movs	r2, #144	; 0x90
   1fcd0:	18ba      	adds	r2, r7, r2
   1fcd2:	6812      	ldr	r2, [r2, #0]
   1fcd4:	18d3      	adds	r3, r2, r3
   1fcd6:	781b      	ldrb	r3, [r3, #0]
   1fcd8:	2b60      	cmp	r3, #96	; 0x60
   1fcda:	d909      	bls.n	1fcf0 <m2m_wifi_connect_sc+0x100>
   1fcdc:	2396      	movs	r3, #150	; 0x96
   1fcde:	18fb      	adds	r3, r7, r3
   1fce0:	781b      	ldrb	r3, [r3, #0]
   1fce2:	2290      	movs	r2, #144	; 0x90
   1fce4:	18ba      	adds	r2, r7, r2
   1fce6:	6812      	ldr	r2, [r2, #0]
   1fce8:	18d3      	adds	r3, r2, r3
   1fcea:	781b      	ldrb	r3, [r3, #0]
   1fcec:	2b66      	cmp	r3, #102	; 0x66
   1fcee:	d912      	bls.n	1fd16 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   1fcf0:	4aad      	ldr	r2, [pc, #692]	; (1ffa8 <m2m_wifi_connect_sc+0x3b8>)
   1fcf2:	49a7      	ldr	r1, [pc, #668]	; (1ff90 <m2m_wifi_connect_sc+0x3a0>)
   1fcf4:	4ba7      	ldr	r3, [pc, #668]	; (1ff94 <m2m_wifi_connect_sc+0x3a4>)
   1fcf6:	0018      	movs	r0, r3
   1fcf8:	4ba7      	ldr	r3, [pc, #668]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fcfa:	4798      	blx	r3
   1fcfc:	4bab      	ldr	r3, [pc, #684]	; (1ffac <m2m_wifi_connect_sc+0x3bc>)
   1fcfe:	0018      	movs	r0, r3
   1fd00:	4ba5      	ldr	r3, [pc, #660]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fd02:	4798      	blx	r3
   1fd04:	4ba6      	ldr	r3, [pc, #664]	; (1ffa0 <m2m_wifi_connect_sc+0x3b0>)
   1fd06:	0018      	movs	r0, r3
   1fd08:	4ba3      	ldr	r3, [pc, #652]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fd0a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   1fd0c:	2397      	movs	r3, #151	; 0x97
   1fd0e:	18fb      	adds	r3, r7, r3
   1fd10:	22f4      	movs	r2, #244	; 0xf4
   1fd12:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   1fd14:	e195      	b.n	20042 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   1fd16:	2396      	movs	r3, #150	; 0x96
   1fd18:	18fb      	adds	r3, r7, r3
   1fd1a:	781a      	ldrb	r2, [r3, #0]
   1fd1c:	2396      	movs	r3, #150	; 0x96
   1fd1e:	18fb      	adds	r3, r7, r3
   1fd20:	3201      	adds	r2, #1
   1fd22:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   1fd24:	2396      	movs	r3, #150	; 0x96
   1fd26:	18fb      	adds	r3, r7, r3
   1fd28:	781b      	ldrb	r3, [r3, #0]
   1fd2a:	2b3f      	cmp	r3, #63	; 0x3f
   1fd2c:	d9a4      	bls.n	1fc78 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   1fd2e:	230b      	movs	r3, #11
   1fd30:	18fb      	adds	r3, r7, r3
   1fd32:	781b      	ldrb	r3, [r3, #0]
   1fd34:	2b00      	cmp	r3, #0
   1fd36:	d004      	beq.n	1fd42 <m2m_wifi_connect_sc+0x152>
   1fd38:	230b      	movs	r3, #11
   1fd3a:	18fb      	adds	r3, r7, r3
   1fd3c:	781b      	ldrb	r3, [r3, #0]
   1fd3e:	2b20      	cmp	r3, #32
   1fd40:	d913      	bls.n	1fd6a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   1fd42:	238c      	movs	r3, #140	; 0x8c
   1fd44:	009a      	lsls	r2, r3, #2
   1fd46:	4992      	ldr	r1, [pc, #584]	; (1ff90 <m2m_wifi_connect_sc+0x3a0>)
   1fd48:	4b92      	ldr	r3, [pc, #584]	; (1ff94 <m2m_wifi_connect_sc+0x3a4>)
   1fd4a:	0018      	movs	r0, r3
   1fd4c:	4b92      	ldr	r3, [pc, #584]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fd4e:	4798      	blx	r3
   1fd50:	4b97      	ldr	r3, [pc, #604]	; (1ffb0 <m2m_wifi_connect_sc+0x3c0>)
   1fd52:	0018      	movs	r0, r3
   1fd54:	4b90      	ldr	r3, [pc, #576]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fd56:	4798      	blx	r3
   1fd58:	4b91      	ldr	r3, [pc, #580]	; (1ffa0 <m2m_wifi_connect_sc+0x3b0>)
   1fd5a:	0018      	movs	r0, r3
   1fd5c:	4b8e      	ldr	r3, [pc, #568]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fd5e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   1fd60:	2397      	movs	r3, #151	; 0x97
   1fd62:	18fb      	adds	r3, r7, r3
   1fd64:	22f4      	movs	r2, #244	; 0xf4
   1fd66:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   1fd68:	e16b      	b.n	20042 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   1fd6a:	23a8      	movs	r3, #168	; 0xa8
   1fd6c:	18fb      	adds	r3, r7, r3
   1fd6e:	881b      	ldrh	r3, [r3, #0]
   1fd70:	2b00      	cmp	r3, #0
   1fd72:	d004      	beq.n	1fd7e <m2m_wifi_connect_sc+0x18e>
   1fd74:	23a8      	movs	r3, #168	; 0xa8
   1fd76:	18fb      	adds	r3, r7, r3
   1fd78:	881b      	ldrh	r3, [r3, #0]
   1fd7a:	2b0e      	cmp	r3, #14
   1fd7c:	d917      	bls.n	1fdae <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   1fd7e:	23a8      	movs	r3, #168	; 0xa8
   1fd80:	18fb      	adds	r3, r7, r3
   1fd82:	881b      	ldrh	r3, [r3, #0]
   1fd84:	2bff      	cmp	r3, #255	; 0xff
   1fd86:	d012      	beq.n	1fdae <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   1fd88:	4a8a      	ldr	r2, [pc, #552]	; (1ffb4 <m2m_wifi_connect_sc+0x3c4>)
   1fd8a:	4981      	ldr	r1, [pc, #516]	; (1ff90 <m2m_wifi_connect_sc+0x3a0>)
   1fd8c:	4b81      	ldr	r3, [pc, #516]	; (1ff94 <m2m_wifi_connect_sc+0x3a4>)
   1fd8e:	0018      	movs	r0, r3
   1fd90:	4b81      	ldr	r3, [pc, #516]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fd92:	4798      	blx	r3
   1fd94:	4b88      	ldr	r3, [pc, #544]	; (1ffb8 <m2m_wifi_connect_sc+0x3c8>)
   1fd96:	0018      	movs	r0, r3
   1fd98:	4b7f      	ldr	r3, [pc, #508]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fd9a:	4798      	blx	r3
   1fd9c:	4b80      	ldr	r3, [pc, #512]	; (1ffa0 <m2m_wifi_connect_sc+0x3b0>)
   1fd9e:	0018      	movs	r0, r3
   1fda0:	4b7d      	ldr	r3, [pc, #500]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fda2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1fda4:	2397      	movs	r3, #151	; 0x97
   1fda6:	18fb      	adds	r3, r7, r3
   1fda8:	22f4      	movs	r2, #244	; 0xf4
   1fdaa:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1fdac:	e149      	b.n	20042 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   1fdae:	230b      	movs	r3, #11
   1fdb0:	18fb      	adds	r3, r7, r3
   1fdb2:	781a      	ldrb	r2, [r3, #0]
   1fdb4:	68f9      	ldr	r1, [r7, #12]
   1fdb6:	2314      	movs	r3, #20
   1fdb8:	18fb      	adds	r3, r7, r3
   1fdba:	3346      	adds	r3, #70	; 0x46
   1fdbc:	0018      	movs	r0, r3
   1fdbe:	4b7f      	ldr	r3, [pc, #508]	; (1ffbc <m2m_wifi_connect_sc+0x3cc>)
   1fdc0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   1fdc2:	230b      	movs	r3, #11
   1fdc4:	18fb      	adds	r3, r7, r3
   1fdc6:	781b      	ldrb	r3, [r3, #0]
   1fdc8:	2214      	movs	r2, #20
   1fdca:	18ba      	adds	r2, r7, r2
   1fdcc:	2146      	movs	r1, #70	; 0x46
   1fdce:	18d3      	adds	r3, r2, r3
   1fdd0:	185b      	adds	r3, r3, r1
   1fdd2:	2200      	movs	r2, #0
   1fdd4:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   1fdd6:	2314      	movs	r3, #20
   1fdd8:	18fb      	adds	r3, r7, r3
   1fdda:	22a8      	movs	r2, #168	; 0xa8
   1fddc:	18ba      	adds	r2, r7, r2
   1fdde:	2144      	movs	r1, #68	; 0x44
   1fde0:	8812      	ldrh	r2, [r2, #0]
   1fde2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   1fde4:	23ac      	movs	r3, #172	; 0xac
   1fde6:	18fb      	adds	r3, r7, r3
   1fde8:	781b      	ldrb	r3, [r3, #0]
   1fdea:	1e5a      	subs	r2, r3, #1
   1fdec:	4193      	sbcs	r3, r2
   1fdee:	b2db      	uxtb	r3, r3
   1fdf0:	0019      	movs	r1, r3
   1fdf2:	2314      	movs	r3, #20
   1fdf4:	18fb      	adds	r3, r7, r3
   1fdf6:	2267      	movs	r2, #103	; 0x67
   1fdf8:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   1fdfa:	2314      	movs	r3, #20
   1fdfc:	18fb      	adds	r3, r7, r3
   1fdfe:	228c      	movs	r2, #140	; 0x8c
   1fe00:	18ba      	adds	r2, r7, r2
   1fe02:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   1fe04:	238c      	movs	r3, #140	; 0x8c
   1fe06:	18fb      	adds	r3, r7, r3
   1fe08:	681b      	ldr	r3, [r3, #0]
   1fe0a:	220a      	movs	r2, #10
   1fe0c:	18ba      	adds	r2, r7, r2
   1fe0e:	2141      	movs	r1, #65	; 0x41
   1fe10:	7812      	ldrb	r2, [r2, #0]
   1fe12:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   1fe14:	230a      	movs	r3, #10
   1fe16:	18fb      	adds	r3, r7, r3
   1fe18:	781b      	ldrb	r3, [r3, #0]
   1fe1a:	2b03      	cmp	r3, #3
   1fe1c:	d000      	beq.n	1fe20 <m2m_wifi_connect_sc+0x230>
   1fe1e:	e07d      	b.n	1ff1c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   1fe20:	687b      	ldr	r3, [r7, #4]
   1fe22:	2288      	movs	r2, #136	; 0x88
   1fe24:	18ba      	adds	r2, r7, r2
   1fe26:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   1fe28:	238c      	movs	r3, #140	; 0x8c
   1fe2a:	18fb      	adds	r3, r7, r3
   1fe2c:	681b      	ldr	r3, [r3, #0]
   1fe2e:	2284      	movs	r2, #132	; 0x84
   1fe30:	18ba      	adds	r2, r7, r2
   1fe32:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   1fe34:	2388      	movs	r3, #136	; 0x88
   1fe36:	18fb      	adds	r3, r7, r3
   1fe38:	681b      	ldr	r3, [r3, #0]
   1fe3a:	781b      	ldrb	r3, [r3, #0]
   1fe3c:	3b01      	subs	r3, #1
   1fe3e:	b2da      	uxtb	r2, r3
   1fe40:	2384      	movs	r3, #132	; 0x84
   1fe42:	18fb      	adds	r3, r7, r3
   1fe44:	681b      	ldr	r3, [r3, #0]
   1fe46:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   1fe48:	2384      	movs	r3, #132	; 0x84
   1fe4a:	18fb      	adds	r3, r7, r3
   1fe4c:	681b      	ldr	r3, [r3, #0]
   1fe4e:	781b      	ldrb	r3, [r3, #0]
   1fe50:	2b03      	cmp	r3, #3
   1fe52:	d919      	bls.n	1fe88 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   1fe54:	2394      	movs	r3, #148	; 0x94
   1fe56:	009a      	lsls	r2, r3, #2
   1fe58:	494d      	ldr	r1, [pc, #308]	; (1ff90 <m2m_wifi_connect_sc+0x3a0>)
   1fe5a:	4b4e      	ldr	r3, [pc, #312]	; (1ff94 <m2m_wifi_connect_sc+0x3a4>)
   1fe5c:	0018      	movs	r0, r3
   1fe5e:	4b4e      	ldr	r3, [pc, #312]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fe60:	4798      	blx	r3
   1fe62:	2384      	movs	r3, #132	; 0x84
   1fe64:	18fb      	adds	r3, r7, r3
   1fe66:	681b      	ldr	r3, [r3, #0]
   1fe68:	781b      	ldrb	r3, [r3, #0]
   1fe6a:	001a      	movs	r2, r3
   1fe6c:	4b54      	ldr	r3, [pc, #336]	; (1ffc0 <m2m_wifi_connect_sc+0x3d0>)
   1fe6e:	0011      	movs	r1, r2
   1fe70:	0018      	movs	r0, r3
   1fe72:	4b49      	ldr	r3, [pc, #292]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fe74:	4798      	blx	r3
   1fe76:	4b4a      	ldr	r3, [pc, #296]	; (1ffa0 <m2m_wifi_connect_sc+0x3b0>)
   1fe78:	0018      	movs	r0, r3
   1fe7a:	4b47      	ldr	r3, [pc, #284]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fe7c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1fe7e:	2397      	movs	r3, #151	; 0x97
   1fe80:	18fb      	adds	r3, r7, r3
   1fe82:	22f4      	movs	r2, #244	; 0xf4
   1fe84:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1fe86:	e0dc      	b.n	20042 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   1fe88:	2388      	movs	r3, #136	; 0x88
   1fe8a:	18fb      	adds	r3, r7, r3
   1fe8c:	681b      	ldr	r3, [r3, #0]
   1fe8e:	785b      	ldrb	r3, [r3, #1]
   1fe90:	3b01      	subs	r3, #1
   1fe92:	b2da      	uxtb	r2, r3
   1fe94:	2384      	movs	r3, #132	; 0x84
   1fe96:	18fb      	adds	r3, r7, r3
   1fe98:	681b      	ldr	r3, [r3, #0]
   1fe9a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   1fe9c:	2384      	movs	r3, #132	; 0x84
   1fe9e:	18fb      	adds	r3, r7, r3
   1fea0:	681b      	ldr	r3, [r3, #0]
   1fea2:	785b      	ldrb	r3, [r3, #1]
   1fea4:	2b0a      	cmp	r3, #10
   1fea6:	d01e      	beq.n	1fee6 <m2m_wifi_connect_sc+0x2f6>
   1fea8:	2384      	movs	r3, #132	; 0x84
   1feaa:	18fb      	adds	r3, r7, r3
   1feac:	681b      	ldr	r3, [r3, #0]
   1feae:	785b      	ldrb	r3, [r3, #1]
   1feb0:	2b1a      	cmp	r3, #26
   1feb2:	d018      	beq.n	1fee6 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   1feb4:	4a43      	ldr	r2, [pc, #268]	; (1ffc4 <m2m_wifi_connect_sc+0x3d4>)
   1feb6:	4936      	ldr	r1, [pc, #216]	; (1ff90 <m2m_wifi_connect_sc+0x3a0>)
   1feb8:	4b36      	ldr	r3, [pc, #216]	; (1ff94 <m2m_wifi_connect_sc+0x3a4>)
   1feba:	0018      	movs	r0, r3
   1febc:	4b36      	ldr	r3, [pc, #216]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1febe:	4798      	blx	r3
   1fec0:	2384      	movs	r3, #132	; 0x84
   1fec2:	18fb      	adds	r3, r7, r3
   1fec4:	681b      	ldr	r3, [r3, #0]
   1fec6:	785b      	ldrb	r3, [r3, #1]
   1fec8:	001a      	movs	r2, r3
   1feca:	4b3f      	ldr	r3, [pc, #252]	; (1ffc8 <m2m_wifi_connect_sc+0x3d8>)
   1fecc:	0011      	movs	r1, r2
   1fece:	0018      	movs	r0, r3
   1fed0:	4b31      	ldr	r3, [pc, #196]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1fed2:	4798      	blx	r3
   1fed4:	4b32      	ldr	r3, [pc, #200]	; (1ffa0 <m2m_wifi_connect_sc+0x3b0>)
   1fed6:	0018      	movs	r0, r3
   1fed8:	4b2f      	ldr	r3, [pc, #188]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1feda:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1fedc:	2397      	movs	r3, #151	; 0x97
   1fede:	18fb      	adds	r3, r7, r3
   1fee0:	22f4      	movs	r2, #244	; 0xf4
   1fee2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1fee4:	e0ad      	b.n	20042 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   1fee6:	2384      	movs	r3, #132	; 0x84
   1fee8:	18fb      	adds	r3, r7, r3
   1feea:	681b      	ldr	r3, [r3, #0]
   1feec:	1c98      	adds	r0, r3, #2
   1feee:	2388      	movs	r3, #136	; 0x88
   1fef0:	18fb      	adds	r3, r7, r3
   1fef2:	681b      	ldr	r3, [r3, #0]
   1fef4:	1c99      	adds	r1, r3, #2
   1fef6:	2388      	movs	r3, #136	; 0x88
   1fef8:	18fb      	adds	r3, r7, r3
   1fefa:	681b      	ldr	r3, [r3, #0]
   1fefc:	785b      	ldrb	r3, [r3, #1]
   1fefe:	001a      	movs	r2, r3
   1ff00:	4b2e      	ldr	r3, [pc, #184]	; (1ffbc <m2m_wifi_connect_sc+0x3cc>)
   1ff02:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   1ff04:	2388      	movs	r3, #136	; 0x88
   1ff06:	18fb      	adds	r3, r7, r3
   1ff08:	681b      	ldr	r3, [r3, #0]
   1ff0a:	785b      	ldrb	r3, [r3, #1]
   1ff0c:	001a      	movs	r2, r3
   1ff0e:	2384      	movs	r3, #132	; 0x84
   1ff10:	18fb      	adds	r3, r7, r3
   1ff12:	681b      	ldr	r3, [r3, #0]
   1ff14:	189b      	adds	r3, r3, r2
   1ff16:	2200      	movs	r2, #0
   1ff18:	709a      	strb	r2, [r3, #2]
   1ff1a:	e081      	b.n	20020 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   1ff1c:	230a      	movs	r3, #10
   1ff1e:	18fb      	adds	r3, r7, r3
   1ff20:	781b      	ldrb	r3, [r3, #0]
   1ff22:	2b02      	cmp	r3, #2
   1ff24:	d156      	bne.n	1ffd4 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   1ff26:	2382      	movs	r3, #130	; 0x82
   1ff28:	18fc      	adds	r4, r7, r3
   1ff2a:	687b      	ldr	r3, [r7, #4]
   1ff2c:	0018      	movs	r0, r3
   1ff2e:	4b1d      	ldr	r3, [pc, #116]	; (1ffa4 <m2m_wifi_connect_sc+0x3b4>)
   1ff30:	4798      	blx	r3
   1ff32:	0003      	movs	r3, r0
   1ff34:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   1ff36:	2382      	movs	r3, #130	; 0x82
   1ff38:	18fb      	adds	r3, r7, r3
   1ff3a:	881b      	ldrh	r3, [r3, #0]
   1ff3c:	2b00      	cmp	r3, #0
   1ff3e:	d004      	beq.n	1ff4a <m2m_wifi_connect_sc+0x35a>
   1ff40:	2382      	movs	r3, #130	; 0x82
   1ff42:	18fb      	adds	r3, r7, r3
   1ff44:	881b      	ldrh	r3, [r3, #0]
   1ff46:	2b40      	cmp	r3, #64	; 0x40
   1ff48:	d912      	bls.n	1ff70 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   1ff4a:	4a20      	ldr	r2, [pc, #128]	; (1ffcc <m2m_wifi_connect_sc+0x3dc>)
   1ff4c:	4910      	ldr	r1, [pc, #64]	; (1ff90 <m2m_wifi_connect_sc+0x3a0>)
   1ff4e:	4b11      	ldr	r3, [pc, #68]	; (1ff94 <m2m_wifi_connect_sc+0x3a4>)
   1ff50:	0018      	movs	r0, r3
   1ff52:	4b11      	ldr	r3, [pc, #68]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1ff54:	4798      	blx	r3
   1ff56:	4b1e      	ldr	r3, [pc, #120]	; (1ffd0 <m2m_wifi_connect_sc+0x3e0>)
   1ff58:	0018      	movs	r0, r3
   1ff5a:	4b0f      	ldr	r3, [pc, #60]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1ff5c:	4798      	blx	r3
   1ff5e:	4b10      	ldr	r3, [pc, #64]	; (1ffa0 <m2m_wifi_connect_sc+0x3b0>)
   1ff60:	0018      	movs	r0, r3
   1ff62:	4b0d      	ldr	r3, [pc, #52]	; (1ff98 <m2m_wifi_connect_sc+0x3a8>)
   1ff64:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1ff66:	2397      	movs	r3, #151	; 0x97
   1ff68:	18fb      	adds	r3, r7, r3
   1ff6a:	22f4      	movs	r2, #244	; 0xf4
   1ff6c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1ff6e:	e068      	b.n	20042 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   1ff70:	238c      	movs	r3, #140	; 0x8c
   1ff72:	18fb      	adds	r3, r7, r3
   1ff74:	6818      	ldr	r0, [r3, #0]
   1ff76:	2382      	movs	r3, #130	; 0x82
   1ff78:	18fb      	adds	r3, r7, r3
   1ff7a:	881b      	ldrh	r3, [r3, #0]
   1ff7c:	3301      	adds	r3, #1
   1ff7e:	001a      	movs	r2, r3
   1ff80:	687b      	ldr	r3, [r7, #4]
   1ff82:	0019      	movs	r1, r3
   1ff84:	4b0d      	ldr	r3, [pc, #52]	; (1ffbc <m2m_wifi_connect_sc+0x3cc>)
   1ff86:	4798      	blx	r3
   1ff88:	e04a      	b.n	20020 <m2m_wifi_connect_sc+0x430>
   1ff8a:	46c0      	nop			; (mov r8, r8)
   1ff8c:	0000021a 	.word	0x0000021a
   1ff90:	00035f28 	.word	0x00035f28
   1ff94:	00035b70 	.word	0x00035b70
   1ff98:	0001baed 	.word	0x0001baed
   1ff9c:	00035db0 	.word	0x00035db0
   1ffa0:	00035b6c 	.word	0x00035b6c
   1ffa4:	0001e85f 	.word	0x0001e85f
   1ffa8:	00000226 	.word	0x00000226
   1ffac:	00035dc4 	.word	0x00035dc4
   1ffb0:	00035dd4 	.word	0x00035dd4
   1ffb4:	00000239 	.word	0x00000239
   1ffb8:	00035de8 	.word	0x00035de8
   1ffbc:	0001e7e5 	.word	0x0001e7e5
   1ffc0:	00035df4 	.word	0x00035df4
   1ffc4:	00000257 	.word	0x00000257
   1ffc8:	00035e10 	.word	0x00035e10
   1ffcc:	00000266 	.word	0x00000266
   1ffd0:	00035e2c 	.word	0x00035e2c
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   1ffd4:	230a      	movs	r3, #10
   1ffd6:	18fb      	adds	r3, r7, r3
   1ffd8:	781b      	ldrb	r3, [r3, #0]
   1ffda:	2b04      	cmp	r3, #4
   1ffdc:	d108      	bne.n	1fff0 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   1ffde:	238c      	movs	r3, #140	; 0x8c
   1ffe0:	18fb      	adds	r3, r7, r3
   1ffe2:	681b      	ldr	r3, [r3, #0]
   1ffe4:	6879      	ldr	r1, [r7, #4]
   1ffe6:	223e      	movs	r2, #62	; 0x3e
   1ffe8:	0018      	movs	r0, r3
   1ffea:	4b1a      	ldr	r3, [pc, #104]	; (20054 <m2m_wifi_connect_sc+0x464>)
   1ffec:	4798      	blx	r3
   1ffee:	e017      	b.n	20020 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   1fff0:	230a      	movs	r3, #10
   1fff2:	18fb      	adds	r3, r7, r3
   1fff4:	781b      	ldrb	r3, [r3, #0]
   1fff6:	2b01      	cmp	r3, #1
   1fff8:	d012      	beq.n	20020 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   1fffa:	4a17      	ldr	r2, [pc, #92]	; (20058 <m2m_wifi_connect_sc+0x468>)
   1fffc:	4917      	ldr	r1, [pc, #92]	; (2005c <m2m_wifi_connect_sc+0x46c>)
   1fffe:	4b18      	ldr	r3, [pc, #96]	; (20060 <m2m_wifi_connect_sc+0x470>)
   20000:	0018      	movs	r0, r3
   20002:	4b18      	ldr	r3, [pc, #96]	; (20064 <m2m_wifi_connect_sc+0x474>)
   20004:	4798      	blx	r3
   20006:	4b18      	ldr	r3, [pc, #96]	; (20068 <m2m_wifi_connect_sc+0x478>)
   20008:	0018      	movs	r0, r3
   2000a:	4b16      	ldr	r3, [pc, #88]	; (20064 <m2m_wifi_connect_sc+0x474>)
   2000c:	4798      	blx	r3
   2000e:	4b17      	ldr	r3, [pc, #92]	; (2006c <m2m_wifi_connect_sc+0x47c>)
   20010:	0018      	movs	r0, r3
   20012:	4b14      	ldr	r3, [pc, #80]	; (20064 <m2m_wifi_connect_sc+0x474>)
   20014:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   20016:	2397      	movs	r3, #151	; 0x97
   20018:	18fb      	adds	r3, r7, r3
   2001a:	22f4      	movs	r2, #244	; 0xf4
   2001c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   2001e:	e010      	b.n	20042 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   20020:	2397      	movs	r3, #151	; 0x97
   20022:	18fc      	adds	r4, r7, r3
   20024:	2314      	movs	r3, #20
   20026:	18fa      	adds	r2, r7, r3
   20028:	2300      	movs	r3, #0
   2002a:	9302      	str	r3, [sp, #8]
   2002c:	2300      	movs	r3, #0
   2002e:	9301      	str	r3, [sp, #4]
   20030:	2300      	movs	r3, #0
   20032:	9300      	str	r3, [sp, #0]
   20034:	236c      	movs	r3, #108	; 0x6c
   20036:	2128      	movs	r1, #40	; 0x28
   20038:	2001      	movs	r0, #1
   2003a:	4d0d      	ldr	r5, [pc, #52]	; (20070 <m2m_wifi_connect_sc+0x480>)
   2003c:	47a8      	blx	r5
   2003e:	0003      	movs	r3, r0
   20040:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   20042:	2397      	movs	r3, #151	; 0x97
   20044:	18fb      	adds	r3, r7, r3
   20046:	781b      	ldrb	r3, [r3, #0]
   20048:	b25b      	sxtb	r3, r3
}
   2004a:	0018      	movs	r0, r3
   2004c:	46bd      	mov	sp, r7
   2004e:	b026      	add	sp, #152	; 0x98
   20050:	bdb0      	pop	{r4, r5, r7, pc}
   20052:	46c0      	nop			; (mov r8, r8)
   20054:	0001e7e5 	.word	0x0001e7e5
   20058:	00000276 	.word	0x00000276
   2005c:	00035f28 	.word	0x00035f28
   20060:	00035b70 	.word	0x00035b70
   20064:	0001baed 	.word	0x0001baed
   20068:	00035e48 	.word	0x00035e48
   2006c:	00035b6c 	.word	0x00035b6c
   20070:	0001ea81 	.word	0x0001ea81

00020074 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   20074:	b580      	push	{r7, lr}
   20076:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   20078:	2300      	movs	r3, #0
}
   2007a:	0018      	movs	r0, r3
   2007c:	46bd      	mov	sp, r7
   2007e:	bd80      	pop	{r7, pc}

00020080 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   20080:	b590      	push	{r4, r7, lr}
   20082:	b087      	sub	sp, #28
   20084:	af00      	add	r7, sp, #0
   20086:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   20088:	2317      	movs	r3, #23
   2008a:	18fb      	adds	r3, r7, r3
   2008c:	2200      	movs	r2, #0
   2008e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   20090:	687b      	ldr	r3, [r7, #4]
   20092:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   20094:	693b      	ldr	r3, [r7, #16]
   20096:	2280      	movs	r2, #128	; 0x80
   20098:	0052      	lsls	r2, r2, #1
   2009a:	4313      	orrs	r3, r2
   2009c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   2009e:	693a      	ldr	r2, [r7, #16]
   200a0:	23a5      	movs	r3, #165	; 0xa5
   200a2:	015b      	lsls	r3, r3, #5
   200a4:	0011      	movs	r1, r2
   200a6:	0018      	movs	r0, r3
   200a8:	4b12      	ldr	r3, [pc, #72]	; (200f4 <chip_apply_conf+0x74>)
   200aa:	4798      	blx	r3
		if(val32 != 0) {		
   200ac:	693b      	ldr	r3, [r7, #16]
   200ae:	2b00      	cmp	r3, #0
   200b0:	d018      	beq.n	200e4 <chip_apply_conf+0x64>
			uint32 reg = 0;
   200b2:	2300      	movs	r3, #0
   200b4:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   200b6:	2317      	movs	r3, #23
   200b8:	18fc      	adds	r4, r7, r3
   200ba:	230c      	movs	r3, #12
   200bc:	18fa      	adds	r2, r7, r3
   200be:	23a5      	movs	r3, #165	; 0xa5
   200c0:	015b      	lsls	r3, r3, #5
   200c2:	0011      	movs	r1, r2
   200c4:	0018      	movs	r0, r3
   200c6:	4b0c      	ldr	r3, [pc, #48]	; (200f8 <chip_apply_conf+0x78>)
   200c8:	4798      	blx	r3
   200ca:	0003      	movs	r3, r0
   200cc:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   200ce:	2317      	movs	r3, #23
   200d0:	18fb      	adds	r3, r7, r3
   200d2:	781b      	ldrb	r3, [r3, #0]
   200d4:	b25b      	sxtb	r3, r3
   200d6:	2b00      	cmp	r3, #0
   200d8:	d1e1      	bne.n	2009e <chip_apply_conf+0x1e>
				if(reg == val32)
   200da:	68fa      	ldr	r2, [r7, #12]
   200dc:	693b      	ldr	r3, [r7, #16]
   200de:	429a      	cmp	r2, r3
   200e0:	d002      	beq.n	200e8 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   200e2:	e7dc      	b.n	2009e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   200e4:	46c0      	nop			; (mov r8, r8)
   200e6:	e000      	b.n	200ea <chip_apply_conf+0x6a>
					break;
   200e8:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   200ea:	2300      	movs	r3, #0
}
   200ec:	0018      	movs	r0, r3
   200ee:	46bd      	mov	sp, r7
   200f0:	b007      	add	sp, #28
   200f2:	bd90      	pop	{r4, r7, pc}
   200f4:	000208d5 	.word	0x000208d5
   200f8:	000208b1 	.word	0x000208b1

000200fc <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   200fc:	b590      	push	{r4, r7, lr}
   200fe:	b083      	sub	sp, #12
   20100:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   20102:	2300      	movs	r3, #0
   20104:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   20106:	1dfb      	adds	r3, r7, #7
   20108:	2200      	movs	r2, #0
   2010a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   2010c:	1dfc      	adds	r4, r7, #7
   2010e:	003b      	movs	r3, r7
   20110:	4a24      	ldr	r2, [pc, #144]	; (201a4 <enable_interrupts+0xa8>)
   20112:	0019      	movs	r1, r3
   20114:	0010      	movs	r0, r2
   20116:	4b24      	ldr	r3, [pc, #144]	; (201a8 <enable_interrupts+0xac>)
   20118:	4798      	blx	r3
   2011a:	0003      	movs	r3, r0
   2011c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2011e:	1dfb      	adds	r3, r7, #7
   20120:	781b      	ldrb	r3, [r3, #0]
   20122:	b25b      	sxtb	r3, r3
   20124:	2b00      	cmp	r3, #0
   20126:	d131      	bne.n	2018c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   20128:	683b      	ldr	r3, [r7, #0]
   2012a:	2280      	movs	r2, #128	; 0x80
   2012c:	0052      	lsls	r2, r2, #1
   2012e:	4313      	orrs	r3, r2
   20130:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   20132:	683b      	ldr	r3, [r7, #0]
   20134:	1dfc      	adds	r4, r7, #7
   20136:	4a1b      	ldr	r2, [pc, #108]	; (201a4 <enable_interrupts+0xa8>)
   20138:	0019      	movs	r1, r3
   2013a:	0010      	movs	r0, r2
   2013c:	4b1b      	ldr	r3, [pc, #108]	; (201ac <enable_interrupts+0xb0>)
   2013e:	4798      	blx	r3
   20140:	0003      	movs	r3, r0
   20142:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   20144:	1dfb      	adds	r3, r7, #7
   20146:	781b      	ldrb	r3, [r3, #0]
   20148:	b25b      	sxtb	r3, r3
   2014a:	2b00      	cmp	r3, #0
   2014c:	d120      	bne.n	20190 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   2014e:	1dfc      	adds	r4, r7, #7
   20150:	003a      	movs	r2, r7
   20152:	23d0      	movs	r3, #208	; 0xd0
   20154:	015b      	lsls	r3, r3, #5
   20156:	0011      	movs	r1, r2
   20158:	0018      	movs	r0, r3
   2015a:	4b13      	ldr	r3, [pc, #76]	; (201a8 <enable_interrupts+0xac>)
   2015c:	4798      	blx	r3
   2015e:	0003      	movs	r3, r0
   20160:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   20162:	1dfb      	adds	r3, r7, #7
   20164:	781b      	ldrb	r3, [r3, #0]
   20166:	b25b      	sxtb	r3, r3
   20168:	2b00      	cmp	r3, #0
   2016a:	d113      	bne.n	20194 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   2016c:	683b      	ldr	r3, [r7, #0]
   2016e:	2280      	movs	r2, #128	; 0x80
   20170:	0252      	lsls	r2, r2, #9
   20172:	4313      	orrs	r3, r2
   20174:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   20176:	683a      	ldr	r2, [r7, #0]
   20178:	1dfc      	adds	r4, r7, #7
   2017a:	23d0      	movs	r3, #208	; 0xd0
   2017c:	015b      	lsls	r3, r3, #5
   2017e:	0011      	movs	r1, r2
   20180:	0018      	movs	r0, r3
   20182:	4b0a      	ldr	r3, [pc, #40]	; (201ac <enable_interrupts+0xb0>)
   20184:	4798      	blx	r3
   20186:	0003      	movs	r3, r0
   20188:	7023      	strb	r3, [r4, #0]
   2018a:	e004      	b.n	20196 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   2018c:	46c0      	nop			; (mov r8, r8)
   2018e:	e002      	b.n	20196 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   20190:	46c0      	nop			; (mov r8, r8)
   20192:	e000      	b.n	20196 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   20194:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   20196:	1dfb      	adds	r3, r7, #7
   20198:	781b      	ldrb	r3, [r3, #0]
   2019a:	b25b      	sxtb	r3, r3
}
   2019c:	0018      	movs	r0, r3
   2019e:	46bd      	mov	sp, r7
   201a0:	b003      	add	sp, #12
   201a2:	bd90      	pop	{r4, r7, pc}
   201a4:	00001408 	.word	0x00001408
   201a8:	000208b1 	.word	0x000208b1
   201ac:	000208d5 	.word	0x000208d5

000201b0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   201b0:	b580      	push	{r7, lr}
   201b2:	b082      	sub	sp, #8
   201b4:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   201b6:	4b32      	ldr	r3, [pc, #200]	; (20280 <nmi_get_chipid+0xd0>)
   201b8:	681b      	ldr	r3, [r3, #0]
   201ba:	2b00      	cmp	r3, #0
   201bc:	d159      	bne.n	20272 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   201be:	4a30      	ldr	r2, [pc, #192]	; (20280 <nmi_get_chipid+0xd0>)
   201c0:	2380      	movs	r3, #128	; 0x80
   201c2:	015b      	lsls	r3, r3, #5
   201c4:	0011      	movs	r1, r2
   201c6:	0018      	movs	r0, r3
   201c8:	4b2e      	ldr	r3, [pc, #184]	; (20284 <nmi_get_chipid+0xd4>)
   201ca:	4798      	blx	r3
   201cc:	1e03      	subs	r3, r0, #0
   201ce:	d004      	beq.n	201da <nmi_get_chipid+0x2a>
			chipid = 0;
   201d0:	4b2b      	ldr	r3, [pc, #172]	; (20280 <nmi_get_chipid+0xd0>)
   201d2:	2200      	movs	r2, #0
   201d4:	601a      	str	r2, [r3, #0]
			return 0;
   201d6:	2300      	movs	r3, #0
   201d8:	e04d      	b.n	20276 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   201da:	1d3b      	adds	r3, r7, #4
   201dc:	4a2a      	ldr	r2, [pc, #168]	; (20288 <nmi_get_chipid+0xd8>)
   201de:	0019      	movs	r1, r3
   201e0:	0010      	movs	r0, r2
   201e2:	4b28      	ldr	r3, [pc, #160]	; (20284 <nmi_get_chipid+0xd4>)
   201e4:	4798      	blx	r3
   201e6:	1e03      	subs	r3, r0, #0
   201e8:	d004      	beq.n	201f4 <nmi_get_chipid+0x44>
			chipid = 0;
   201ea:	4b25      	ldr	r3, [pc, #148]	; (20280 <nmi_get_chipid+0xd0>)
   201ec:	2200      	movs	r2, #0
   201ee:	601a      	str	r2, [r3, #0]
			return 0;
   201f0:	2300      	movs	r3, #0
   201f2:	e040      	b.n	20276 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   201f4:	4b22      	ldr	r3, [pc, #136]	; (20280 <nmi_get_chipid+0xd0>)
   201f6:	681b      	ldr	r3, [r3, #0]
   201f8:	4a24      	ldr	r2, [pc, #144]	; (2028c <nmi_get_chipid+0xdc>)
   201fa:	4293      	cmp	r3, r2
   201fc:	d106      	bne.n	2020c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   201fe:	687b      	ldr	r3, [r7, #4]
   20200:	2b01      	cmp	r3, #1
   20202:	d029      	beq.n	20258 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   20204:	4b1e      	ldr	r3, [pc, #120]	; (20280 <nmi_get_chipid+0xd0>)
   20206:	4a22      	ldr	r2, [pc, #136]	; (20290 <nmi_get_chipid+0xe0>)
   20208:	601a      	str	r2, [r3, #0]
   2020a:	e025      	b.n	20258 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   2020c:	4b1c      	ldr	r3, [pc, #112]	; (20280 <nmi_get_chipid+0xd0>)
   2020e:	681b      	ldr	r3, [r3, #0]
   20210:	4a20      	ldr	r2, [pc, #128]	; (20294 <nmi_get_chipid+0xe4>)
   20212:	4293      	cmp	r3, r2
   20214:	d10d      	bne.n	20232 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   20216:	687b      	ldr	r3, [r7, #4]
   20218:	2b03      	cmp	r3, #3
   2021a:	d01d      	beq.n	20258 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   2021c:	687b      	ldr	r3, [r7, #4]
   2021e:	2b04      	cmp	r3, #4
   20220:	d103      	bne.n	2022a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   20222:	4b17      	ldr	r3, [pc, #92]	; (20280 <nmi_get_chipid+0xd0>)
   20224:	4a1c      	ldr	r2, [pc, #112]	; (20298 <nmi_get_chipid+0xe8>)
   20226:	601a      	str	r2, [r3, #0]
   20228:	e016      	b.n	20258 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   2022a:	4b15      	ldr	r3, [pc, #84]	; (20280 <nmi_get_chipid+0xd0>)
   2022c:	4a1b      	ldr	r2, [pc, #108]	; (2029c <nmi_get_chipid+0xec>)
   2022e:	601a      	str	r2, [r3, #0]
   20230:	e012      	b.n	20258 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   20232:	4b13      	ldr	r3, [pc, #76]	; (20280 <nmi_get_chipid+0xd0>)
   20234:	681b      	ldr	r3, [r3, #0]
   20236:	4a1a      	ldr	r2, [pc, #104]	; (202a0 <nmi_get_chipid+0xf0>)
   20238:	4293      	cmp	r3, r2
   2023a:	d10d      	bne.n	20258 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   2023c:	4a10      	ldr	r2, [pc, #64]	; (20280 <nmi_get_chipid+0xd0>)
   2023e:	23ec      	movs	r3, #236	; 0xec
   20240:	039b      	lsls	r3, r3, #14
   20242:	0011      	movs	r1, r2
   20244:	0018      	movs	r0, r3
   20246:	4b0f      	ldr	r3, [pc, #60]	; (20284 <nmi_get_chipid+0xd4>)
   20248:	4798      	blx	r3
   2024a:	1e03      	subs	r3, r0, #0
   2024c:	d004      	beq.n	20258 <nmi_get_chipid+0xa8>
			chipid = 0;
   2024e:	4b0c      	ldr	r3, [pc, #48]	; (20280 <nmi_get_chipid+0xd0>)
   20250:	2200      	movs	r2, #0
   20252:	601a      	str	r2, [r3, #0]
			return 0;
   20254:	2300      	movs	r3, #0
   20256:	e00e      	b.n	20276 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   20258:	4b09      	ldr	r3, [pc, #36]	; (20280 <nmi_get_chipid+0xd0>)
   2025a:	681b      	ldr	r3, [r3, #0]
   2025c:	4a11      	ldr	r2, [pc, #68]	; (202a4 <nmi_get_chipid+0xf4>)
   2025e:	401a      	ands	r2, r3
   20260:	4b07      	ldr	r3, [pc, #28]	; (20280 <nmi_get_chipid+0xd0>)
   20262:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   20264:	4b06      	ldr	r3, [pc, #24]	; (20280 <nmi_get_chipid+0xd0>)
   20266:	681b      	ldr	r3, [r3, #0]
   20268:	22a0      	movs	r2, #160	; 0xa0
   2026a:	02d2      	lsls	r2, r2, #11
   2026c:	431a      	orrs	r2, r3
   2026e:	4b04      	ldr	r3, [pc, #16]	; (20280 <nmi_get_chipid+0xd0>)
   20270:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   20272:	4b03      	ldr	r3, [pc, #12]	; (20280 <nmi_get_chipid+0xd0>)
   20274:	681b      	ldr	r3, [r3, #0]
}
   20276:	0018      	movs	r0, r3
   20278:	46bd      	mov	sp, r7
   2027a:	b002      	add	sp, #8
   2027c:	bd80      	pop	{r7, pc}
   2027e:	46c0      	nop			; (mov r8, r8)
   20280:	20003d04 	.word	0x20003d04
   20284:	000208b1 	.word	0x000208b1
   20288:	000013f4 	.word	0x000013f4
   2028c:	001002a0 	.word	0x001002a0
   20290:	001002a1 	.word	0x001002a1
   20294:	001002b0 	.word	0x001002b0
   20298:	001002b1 	.word	0x001002b1
   2029c:	001002b2 	.word	0x001002b2
   202a0:	001000f0 	.word	0x001000f0
   202a4:	fff0ffff 	.word	0xfff0ffff

000202a8 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   202a8:	b590      	push	{r4, r7, lr}
   202aa:	b083      	sub	sp, #12
   202ac:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   202ae:	1dfb      	adds	r3, r7, #7
   202b0:	2200      	movs	r2, #0
   202b2:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   202b4:	1dfc      	adds	r4, r7, #7
   202b6:	003b      	movs	r3, r7
   202b8:	0019      	movs	r1, r3
   202ba:	2010      	movs	r0, #16
   202bc:	4b2e      	ldr	r3, [pc, #184]	; (20378 <chip_sleep+0xd0>)
   202be:	4798      	blx	r3
   202c0:	0003      	movs	r3, r0
   202c2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   202c4:	1dfb      	adds	r3, r7, #7
   202c6:	781b      	ldrb	r3, [r3, #0]
   202c8:	b25b      	sxtb	r3, r3
   202ca:	2b00      	cmp	r3, #0
   202cc:	d145      	bne.n	2035a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   202ce:	683b      	ldr	r3, [r7, #0]
   202d0:	2201      	movs	r2, #1
   202d2:	4013      	ands	r3, r2
   202d4:	d000      	beq.n	202d8 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   202d6:	e7ed      	b.n	202b4 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   202d8:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   202da:	1dfc      	adds	r4, r7, #7
   202dc:	003b      	movs	r3, r7
   202de:	0019      	movs	r1, r3
   202e0:	2001      	movs	r0, #1
   202e2:	4b25      	ldr	r3, [pc, #148]	; (20378 <chip_sleep+0xd0>)
   202e4:	4798      	blx	r3
   202e6:	0003      	movs	r3, r0
   202e8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   202ea:	1dfb      	adds	r3, r7, #7
   202ec:	781b      	ldrb	r3, [r3, #0]
   202ee:	b25b      	sxtb	r3, r3
   202f0:	2b00      	cmp	r3, #0
   202f2:	d134      	bne.n	2035e <chip_sleep+0xb6>
	if(reg & NBIT1)
   202f4:	683b      	ldr	r3, [r7, #0]
   202f6:	2202      	movs	r2, #2
   202f8:	4013      	ands	r3, r2
   202fa:	d010      	beq.n	2031e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   202fc:	683b      	ldr	r3, [r7, #0]
   202fe:	2202      	movs	r2, #2
   20300:	4393      	bics	r3, r2
   20302:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   20304:	683b      	ldr	r3, [r7, #0]
   20306:	1dfc      	adds	r4, r7, #7
   20308:	0019      	movs	r1, r3
   2030a:	2001      	movs	r0, #1
   2030c:	4b1b      	ldr	r3, [pc, #108]	; (2037c <chip_sleep+0xd4>)
   2030e:	4798      	blx	r3
   20310:	0003      	movs	r3, r0
   20312:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   20314:	1dfb      	adds	r3, r7, #7
   20316:	781b      	ldrb	r3, [r3, #0]
   20318:	b25b      	sxtb	r3, r3
   2031a:	2b00      	cmp	r3, #0
   2031c:	d121      	bne.n	20362 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2031e:	1dfc      	adds	r4, r7, #7
   20320:	003b      	movs	r3, r7
   20322:	0019      	movs	r1, r3
   20324:	200b      	movs	r0, #11
   20326:	4b14      	ldr	r3, [pc, #80]	; (20378 <chip_sleep+0xd0>)
   20328:	4798      	blx	r3
   2032a:	0003      	movs	r3, r0
   2032c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2032e:	1dfb      	adds	r3, r7, #7
   20330:	781b      	ldrb	r3, [r3, #0]
   20332:	b25b      	sxtb	r3, r3
   20334:	2b00      	cmp	r3, #0
   20336:	d116      	bne.n	20366 <chip_sleep+0xbe>
	if(reg & NBIT0)
   20338:	683b      	ldr	r3, [r7, #0]
   2033a:	2201      	movs	r2, #1
   2033c:	4013      	ands	r3, r2
   2033e:	d013      	beq.n	20368 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   20340:	683b      	ldr	r3, [r7, #0]
   20342:	2201      	movs	r2, #1
   20344:	4393      	bics	r3, r2
   20346:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   20348:	683b      	ldr	r3, [r7, #0]
   2034a:	1dfc      	adds	r4, r7, #7
   2034c:	0019      	movs	r1, r3
   2034e:	200b      	movs	r0, #11
   20350:	4b0a      	ldr	r3, [pc, #40]	; (2037c <chip_sleep+0xd4>)
   20352:	4798      	blx	r3
   20354:	0003      	movs	r3, r0
   20356:	7023      	strb	r3, [r4, #0]
   20358:	e006      	b.n	20368 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   2035a:	46c0      	nop			; (mov r8, r8)
   2035c:	e004      	b.n	20368 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2035e:	46c0      	nop			; (mov r8, r8)
   20360:	e002      	b.n	20368 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   20362:	46c0      	nop			; (mov r8, r8)
   20364:	e000      	b.n	20368 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   20366:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   20368:	1dfb      	adds	r3, r7, #7
   2036a:	781b      	ldrb	r3, [r3, #0]
   2036c:	b25b      	sxtb	r3, r3
}
   2036e:	0018      	movs	r0, r3
   20370:	46bd      	mov	sp, r7
   20372:	b003      	add	sp, #12
   20374:	bd90      	pop	{r4, r7, pc}
   20376:	46c0      	nop			; (mov r8, r8)
   20378:	000208b1 	.word	0x000208b1
   2037c:	000208d5 	.word	0x000208d5

00020380 <chip_wake>:
sint8 chip_wake(void)
{
   20380:	b590      	push	{r4, r7, lr}
   20382:	b085      	sub	sp, #20
   20384:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   20386:	230f      	movs	r3, #15
   20388:	18fb      	adds	r3, r7, r3
   2038a:	2200      	movs	r2, #0
   2038c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   2038e:	2300      	movs	r3, #0
   20390:	607b      	str	r3, [r7, #4]
   20392:	2300      	movs	r3, #0
   20394:	603b      	str	r3, [r7, #0]
   20396:	2300      	movs	r3, #0
   20398:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2039a:	230f      	movs	r3, #15
   2039c:	18fc      	adds	r4, r7, r3
   2039e:	1d3b      	adds	r3, r7, #4
   203a0:	0019      	movs	r1, r3
   203a2:	200b      	movs	r0, #11
   203a4:	4b4e      	ldr	r3, [pc, #312]	; (204e0 <chip_wake+0x160>)
   203a6:	4798      	blx	r3
   203a8:	0003      	movs	r3, r0
   203aa:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   203ac:	230f      	movs	r3, #15
   203ae:	18fb      	adds	r3, r7, r3
   203b0:	781b      	ldrb	r3, [r3, #0]
   203b2:	b25b      	sxtb	r3, r3
   203b4:	2b00      	cmp	r3, #0
   203b6:	d000      	beq.n	203ba <chip_wake+0x3a>
   203b8:	e082      	b.n	204c0 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   203ba:	687b      	ldr	r3, [r7, #4]
   203bc:	2201      	movs	r2, #1
   203be:	4013      	ands	r3, r2
   203c0:	d111      	bne.n	203e6 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   203c2:	687b      	ldr	r3, [r7, #4]
   203c4:	2201      	movs	r2, #1
   203c6:	4313      	orrs	r3, r2
   203c8:	220f      	movs	r2, #15
   203ca:	18bc      	adds	r4, r7, r2
   203cc:	0019      	movs	r1, r3
   203ce:	200b      	movs	r0, #11
   203d0:	4b44      	ldr	r3, [pc, #272]	; (204e4 <chip_wake+0x164>)
   203d2:	4798      	blx	r3
   203d4:	0003      	movs	r3, r0
   203d6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   203d8:	230f      	movs	r3, #15
   203da:	18fb      	adds	r3, r7, r3
   203dc:	781b      	ldrb	r3, [r3, #0]
   203de:	b25b      	sxtb	r3, r3
   203e0:	2b00      	cmp	r3, #0
   203e2:	d000      	beq.n	203e6 <chip_wake+0x66>
   203e4:	e06e      	b.n	204c4 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   203e6:	230f      	movs	r3, #15
   203e8:	18fc      	adds	r4, r7, r3
   203ea:	1d3b      	adds	r3, r7, #4
   203ec:	0019      	movs	r1, r3
   203ee:	2001      	movs	r0, #1
   203f0:	4b3b      	ldr	r3, [pc, #236]	; (204e0 <chip_wake+0x160>)
   203f2:	4798      	blx	r3
   203f4:	0003      	movs	r3, r0
   203f6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   203f8:	230f      	movs	r3, #15
   203fa:	18fb      	adds	r3, r7, r3
   203fc:	781b      	ldrb	r3, [r3, #0]
   203fe:	b25b      	sxtb	r3, r3
   20400:	2b00      	cmp	r3, #0
   20402:	d161      	bne.n	204c8 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   20404:	687b      	ldr	r3, [r7, #4]
   20406:	2202      	movs	r2, #2
   20408:	4013      	ands	r3, r2
   2040a:	d110      	bne.n	2042e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   2040c:	687b      	ldr	r3, [r7, #4]
   2040e:	2202      	movs	r2, #2
   20410:	4313      	orrs	r3, r2
   20412:	220f      	movs	r2, #15
   20414:	18bc      	adds	r4, r7, r2
   20416:	0019      	movs	r1, r3
   20418:	2001      	movs	r0, #1
   2041a:	4b32      	ldr	r3, [pc, #200]	; (204e4 <chip_wake+0x164>)
   2041c:	4798      	blx	r3
   2041e:	0003      	movs	r3, r0
   20420:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   20422:	230f      	movs	r3, #15
   20424:	18fb      	adds	r3, r7, r3
   20426:	781b      	ldrb	r3, [r3, #0]
   20428:	b25b      	sxtb	r3, r3
   2042a:	2b00      	cmp	r3, #0
   2042c:	d14e      	bne.n	204cc <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2042e:	230f      	movs	r3, #15
   20430:	18fc      	adds	r4, r7, r3
   20432:	003b      	movs	r3, r7
   20434:	0019      	movs	r1, r3
   20436:	200f      	movs	r0, #15
   20438:	4b29      	ldr	r3, [pc, #164]	; (204e0 <chip_wake+0x160>)
   2043a:	4798      	blx	r3
   2043c:	0003      	movs	r3, r0
   2043e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   20440:	230f      	movs	r3, #15
   20442:	18fb      	adds	r3, r7, r3
   20444:	781b      	ldrb	r3, [r3, #0]
   20446:	b25b      	sxtb	r3, r3
   20448:	2b00      	cmp	r3, #0
   2044a:	d014      	beq.n	20476 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   2044c:	23a8      	movs	r3, #168	; 0xa8
   2044e:	005a      	lsls	r2, r3, #1
   20450:	4925      	ldr	r1, [pc, #148]	; (204e8 <chip_wake+0x168>)
   20452:	4b26      	ldr	r3, [pc, #152]	; (204ec <chip_wake+0x16c>)
   20454:	0018      	movs	r0, r3
   20456:	4b26      	ldr	r3, [pc, #152]	; (204f0 <chip_wake+0x170>)
   20458:	4798      	blx	r3
   2045a:	230f      	movs	r3, #15
   2045c:	18fb      	adds	r3, r7, r3
   2045e:	2100      	movs	r1, #0
   20460:	5659      	ldrsb	r1, [r3, r1]
   20462:	683a      	ldr	r2, [r7, #0]
   20464:	4b23      	ldr	r3, [pc, #140]	; (204f4 <chip_wake+0x174>)
   20466:	0018      	movs	r0, r3
   20468:	4b21      	ldr	r3, [pc, #132]	; (204f0 <chip_wake+0x170>)
   2046a:	4798      	blx	r3
   2046c:	4b22      	ldr	r3, [pc, #136]	; (204f8 <chip_wake+0x178>)
   2046e:	0018      	movs	r0, r3
   20470:	4b1f      	ldr	r3, [pc, #124]	; (204f0 <chip_wake+0x170>)
   20472:	4798      	blx	r3
			goto _WAKE_EXIT;
   20474:	e02b      	b.n	204ce <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   20476:	683b      	ldr	r3, [r7, #0]
   20478:	2204      	movs	r2, #4
   2047a:	4013      	ands	r3, r2
   2047c:	d11c      	bne.n	204b8 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   2047e:	2002      	movs	r0, #2
   20480:	4b1e      	ldr	r3, [pc, #120]	; (204fc <chip_wake+0x17c>)
   20482:	4798      	blx	r3
		trials++;
   20484:	68bb      	ldr	r3, [r7, #8]
   20486:	3301      	adds	r3, #1
   20488:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   2048a:	68bb      	ldr	r3, [r7, #8]
   2048c:	2b04      	cmp	r3, #4
   2048e:	d9ce      	bls.n	2042e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   20490:	23ad      	movs	r3, #173	; 0xad
   20492:	005a      	lsls	r2, r3, #1
   20494:	4914      	ldr	r1, [pc, #80]	; (204e8 <chip_wake+0x168>)
   20496:	4b15      	ldr	r3, [pc, #84]	; (204ec <chip_wake+0x16c>)
   20498:	0018      	movs	r0, r3
   2049a:	4b15      	ldr	r3, [pc, #84]	; (204f0 <chip_wake+0x170>)
   2049c:	4798      	blx	r3
   2049e:	4b18      	ldr	r3, [pc, #96]	; (20500 <chip_wake+0x180>)
   204a0:	0018      	movs	r0, r3
   204a2:	4b13      	ldr	r3, [pc, #76]	; (204f0 <chip_wake+0x170>)
   204a4:	4798      	blx	r3
   204a6:	4b14      	ldr	r3, [pc, #80]	; (204f8 <chip_wake+0x178>)
   204a8:	0018      	movs	r0, r3
   204aa:	4b11      	ldr	r3, [pc, #68]	; (204f0 <chip_wake+0x170>)
   204ac:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   204ae:	230f      	movs	r3, #15
   204b0:	18fb      	adds	r3, r7, r3
   204b2:	22fc      	movs	r2, #252	; 0xfc
   204b4:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   204b6:	e00a      	b.n	204ce <chip_wake+0x14e>
			break;
   204b8:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   204ba:	4b12      	ldr	r3, [pc, #72]	; (20504 <chip_wake+0x184>)
   204bc:	4798      	blx	r3
   204be:	e006      	b.n	204ce <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   204c0:	46c0      	nop			; (mov r8, r8)
   204c2:	e004      	b.n	204ce <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   204c4:	46c0      	nop			; (mov r8, r8)
   204c6:	e002      	b.n	204ce <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   204c8:	46c0      	nop			; (mov r8, r8)
   204ca:	e000      	b.n	204ce <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   204cc:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   204ce:	230f      	movs	r3, #15
   204d0:	18fb      	adds	r3, r7, r3
   204d2:	781b      	ldrb	r3, [r3, #0]
   204d4:	b25b      	sxtb	r3, r3
}
   204d6:	0018      	movs	r0, r3
   204d8:	46bd      	mov	sp, r7
   204da:	b005      	add	sp, #20
   204dc:	bd90      	pop	{r4, r7, pc}
   204de:	46c0      	nop			; (mov r8, r8)
   204e0:	000208b1 	.word	0x000208b1
   204e4:	000208d5 	.word	0x000208d5
   204e8:	00035fc8 	.word	0x00035fc8
   204ec:	00035f3c 	.word	0x00035f3c
   204f0:	0001baed 	.word	0x0001baed
   204f4:	00035f50 	.word	0x00035f50
   204f8:	00035f68 	.word	0x00035f68
   204fc:	0001df41 	.word	0x0001df41
   20500:	00035f6c 	.word	0x00035f6c
   20504:	00020871 	.word	0x00020871

00020508 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   20508:	b580      	push	{r7, lr}
   2050a:	b088      	sub	sp, #32
   2050c:	af00      	add	r7, sp, #0
   2050e:	0002      	movs	r2, r0
   20510:	1dfb      	adds	r3, r7, #7
   20512:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   20514:	2313      	movs	r3, #19
   20516:	18fb      	adds	r3, r7, r3
   20518:	2200      	movs	r2, #0
   2051a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   2051c:	2300      	movs	r3, #0
   2051e:	61fb      	str	r3, [r7, #28]
   20520:	2300      	movs	r3, #0
   20522:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   20524:	2300      	movs	r3, #0
   20526:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   20528:	4b4a      	ldr	r3, [pc, #296]	; (20654 <wait_for_bootrom+0x14c>)
   2052a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   2052c:	2300      	movs	r3, #0
   2052e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   20530:	4b49      	ldr	r3, [pc, #292]	; (20658 <wait_for_bootrom+0x150>)
   20532:	0018      	movs	r0, r3
   20534:	4b49      	ldr	r3, [pc, #292]	; (2065c <wait_for_bootrom+0x154>)
   20536:	4798      	blx	r3
   20538:	0003      	movs	r3, r0
   2053a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   2053c:	69fb      	ldr	r3, [r7, #28]
   2053e:	2b00      	cmp	r3, #0
   20540:	db03      	blt.n	2054a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   20542:	2001      	movs	r0, #1
   20544:	4b46      	ldr	r3, [pc, #280]	; (20660 <wait_for_bootrom+0x158>)
   20546:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   20548:	e7f2      	b.n	20530 <wait_for_bootrom+0x28>
			break;
   2054a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   2054c:	4b45      	ldr	r3, [pc, #276]	; (20664 <wait_for_bootrom+0x15c>)
   2054e:	0018      	movs	r0, r3
   20550:	4b42      	ldr	r3, [pc, #264]	; (2065c <wait_for_bootrom+0x154>)
   20552:	4798      	blx	r3
   20554:	0003      	movs	r3, r0
   20556:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   20558:	69fb      	ldr	r3, [r7, #28]
   2055a:	2201      	movs	r2, #1
   2055c:	4013      	ands	r3, r2
   2055e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   20560:	69fb      	ldr	r3, [r7, #28]
   20562:	2b00      	cmp	r3, #0
   20564:	d112      	bne.n	2058c <wait_for_bootrom+0x84>
	{
		reg = 0;
   20566:	2300      	movs	r3, #0
   20568:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   2056a:	e00b      	b.n	20584 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   2056c:	2001      	movs	r0, #1
   2056e:	4b3c      	ldr	r3, [pc, #240]	; (20660 <wait_for_bootrom+0x158>)
   20570:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   20572:	4b3d      	ldr	r3, [pc, #244]	; (20668 <wait_for_bootrom+0x160>)
   20574:	0018      	movs	r0, r3
   20576:	4b39      	ldr	r3, [pc, #228]	; (2065c <wait_for_bootrom+0x154>)
   20578:	4798      	blx	r3
   2057a:	0003      	movs	r3, r0
   2057c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   2057e:	69bb      	ldr	r3, [r7, #24]
   20580:	3301      	adds	r3, #1
   20582:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   20584:	69fb      	ldr	r3, [r7, #28]
   20586:	4a39      	ldr	r2, [pc, #228]	; (2066c <wait_for_bootrom+0x164>)
   20588:	4293      	cmp	r3, r2
   2058a:	d1ef      	bne.n	2056c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   2058c:	1dfb      	adds	r3, r7, #7
   2058e:	781b      	ldrb	r3, [r3, #0]
   20590:	2b02      	cmp	r3, #2
   20592:	d10d      	bne.n	205b0 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   20594:	4a36      	ldr	r2, [pc, #216]	; (20670 <wait_for_bootrom+0x168>)
   20596:	4b37      	ldr	r3, [pc, #220]	; (20674 <wait_for_bootrom+0x16c>)
   20598:	0011      	movs	r1, r2
   2059a:	0018      	movs	r0, r3
   2059c:	4b36      	ldr	r3, [pc, #216]	; (20678 <wait_for_bootrom+0x170>)
   2059e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   205a0:	2380      	movs	r3, #128	; 0x80
   205a2:	035b      	lsls	r3, r3, #13
   205a4:	4a35      	ldr	r2, [pc, #212]	; (2067c <wait_for_bootrom+0x174>)
   205a6:	0019      	movs	r1, r3
   205a8:	0010      	movs	r0, r2
   205aa:	4b33      	ldr	r3, [pc, #204]	; (20678 <wait_for_bootrom+0x170>)
   205ac:	4798      	blx	r3
   205ae:	e022      	b.n	205f6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   205b0:	1dfb      	adds	r3, r7, #7
   205b2:	781b      	ldrb	r3, [r3, #0]
   205b4:	2b03      	cmp	r3, #3
   205b6:	d10b      	bne.n	205d0 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   205b8:	4a2d      	ldr	r2, [pc, #180]	; (20670 <wait_for_bootrom+0x168>)
   205ba:	4b2e      	ldr	r3, [pc, #184]	; (20674 <wait_for_bootrom+0x16c>)
   205bc:	0011      	movs	r1, r2
   205be:	0018      	movs	r0, r3
   205c0:	4b2d      	ldr	r3, [pc, #180]	; (20678 <wait_for_bootrom+0x170>)
   205c2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   205c4:	4b2d      	ldr	r3, [pc, #180]	; (2067c <wait_for_bootrom+0x174>)
   205c6:	2100      	movs	r1, #0
   205c8:	0018      	movs	r0, r3
   205ca:	4b2b      	ldr	r3, [pc, #172]	; (20678 <wait_for_bootrom+0x170>)
   205cc:	4798      	blx	r3
   205ce:	e012      	b.n	205f6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   205d0:	1dfb      	adds	r3, r7, #7
   205d2:	781b      	ldrb	r3, [r3, #0]
   205d4:	2b04      	cmp	r3, #4
   205d6:	d108      	bne.n	205ea <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   205d8:	2380      	movs	r3, #128	; 0x80
   205da:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   205dc:	68fb      	ldr	r3, [r7, #12]
   205de:	4a27      	ldr	r2, [pc, #156]	; (2067c <wait_for_bootrom+0x174>)
   205e0:	0019      	movs	r1, r3
   205e2:	0010      	movs	r0, r2
   205e4:	4b24      	ldr	r3, [pc, #144]	; (20678 <wait_for_bootrom+0x170>)
   205e6:	4798      	blx	r3
   205e8:	e005      	b.n	205f6 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   205ea:	68fb      	ldr	r3, [r7, #12]
   205ec:	4a23      	ldr	r2, [pc, #140]	; (2067c <wait_for_bootrom+0x174>)
   205ee:	0019      	movs	r1, r3
   205f0:	0010      	movs	r0, r2
   205f2:	4b21      	ldr	r3, [pc, #132]	; (20678 <wait_for_bootrom+0x170>)
   205f4:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   205f6:	4b22      	ldr	r3, [pc, #136]	; (20680 <wait_for_bootrom+0x178>)
   205f8:	4798      	blx	r3
   205fa:	0003      	movs	r3, r0
   205fc:	051b      	lsls	r3, r3, #20
   205fe:	0d1b      	lsrs	r3, r3, #20
   20600:	4a20      	ldr	r2, [pc, #128]	; (20684 <wait_for_bootrom+0x17c>)
   20602:	4293      	cmp	r3, r2
   20604:	d906      	bls.n	20614 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   20606:	697b      	ldr	r3, [r7, #20]
   20608:	2202      	movs	r2, #2
   2060a:	4313      	orrs	r3, r2
   2060c:	0018      	movs	r0, r3
   2060e:	4b1e      	ldr	r3, [pc, #120]	; (20688 <wait_for_bootrom+0x180>)
   20610:	4798      	blx	r3
   20612:	e003      	b.n	2061c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   20614:	697b      	ldr	r3, [r7, #20]
   20616:	0018      	movs	r0, r3
   20618:	4b1b      	ldr	r3, [pc, #108]	; (20688 <wait_for_bootrom+0x180>)
   2061a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   2061c:	4b1b      	ldr	r3, [pc, #108]	; (2068c <wait_for_bootrom+0x184>)
   2061e:	0018      	movs	r0, r3
   20620:	4b1b      	ldr	r3, [pc, #108]	; (20690 <wait_for_bootrom+0x188>)
   20622:	4798      	blx	r3
   20624:	68fa      	ldr	r2, [r7, #12]
   20626:	4b1b      	ldr	r3, [pc, #108]	; (20694 <wait_for_bootrom+0x18c>)
   20628:	0011      	movs	r1, r2
   2062a:	0018      	movs	r0, r3
   2062c:	4b18      	ldr	r3, [pc, #96]	; (20690 <wait_for_bootrom+0x188>)
   2062e:	4798      	blx	r3
   20630:	4b19      	ldr	r3, [pc, #100]	; (20698 <wait_for_bootrom+0x190>)
   20632:	0018      	movs	r0, r3
   20634:	4b16      	ldr	r3, [pc, #88]	; (20690 <wait_for_bootrom+0x188>)
   20636:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   20638:	4a18      	ldr	r2, [pc, #96]	; (2069c <wait_for_bootrom+0x194>)
   2063a:	4b0b      	ldr	r3, [pc, #44]	; (20668 <wait_for_bootrom+0x160>)
   2063c:	0011      	movs	r1, r2
   2063e:	0018      	movs	r0, r3
   20640:	4b0d      	ldr	r3, [pc, #52]	; (20678 <wait_for_bootrom+0x170>)
   20642:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   20644:	2313      	movs	r3, #19
   20646:	18fb      	adds	r3, r7, r3
   20648:	781b      	ldrb	r3, [r3, #0]
   2064a:	b25b      	sxtb	r3, r3
}
   2064c:	0018      	movs	r0, r3
   2064e:	46bd      	mov	sp, r7
   20650:	b008      	add	sp, #32
   20652:	bd80      	pop	{r7, pc}
   20654:	13301354 	.word	0x13301354
   20658:	00001014 	.word	0x00001014
   2065c:	00020891 	.word	0x00020891
   20660:	0001df41 	.word	0x0001df41
   20664:	000207bc 	.word	0x000207bc
   20668:	000c000c 	.word	0x000c000c
   2066c:	10add09e 	.word	0x10add09e
   20670:	3c1cd57d 	.word	0x3c1cd57d
   20674:	000207ac 	.word	0x000207ac
   20678:	000208d5 	.word	0x000208d5
   2067c:	0000108c 	.word	0x0000108c
   20680:	000201b1 	.word	0x000201b1
   20684:	0000039f 	.word	0x0000039f
   20688:	00020081 	.word	0x00020081
   2068c:	00035f88 	.word	0x00035f88
   20690:	0001baed 	.word	0x0001baed
   20694:	00035f94 	.word	0x00035f94
   20698:	00035f68 	.word	0x00035f68
   2069c:	ef522f61 	.word	0xef522f61

000206a0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   206a0:	b580      	push	{r7, lr}
   206a2:	b088      	sub	sp, #32
   206a4:	af00      	add	r7, sp, #0
   206a6:	0002      	movs	r2, r0
   206a8:	1dfb      	adds	r3, r7, #7
   206aa:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   206ac:	231f      	movs	r3, #31
   206ae:	18fb      	adds	r3, r7, r3
   206b0:	2200      	movs	r2, #0
   206b2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   206b4:	2300      	movs	r3, #0
   206b6:	61bb      	str	r3, [r7, #24]
   206b8:	2300      	movs	r3, #0
   206ba:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   206bc:	2301      	movs	r3, #1
   206be:	425b      	negs	r3, r3
   206c0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   206c2:	4b1d      	ldr	r3, [pc, #116]	; (20738 <wait_for_firmware_start+0x98>)
   206c4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   206c6:	4b1d      	ldr	r3, [pc, #116]	; (2073c <wait_for_firmware_start+0x9c>)
   206c8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   206ca:	1dfb      	adds	r3, r7, #7
   206cc:	781b      	ldrb	r3, [r3, #0]
   206ce:	2b02      	cmp	r3, #2
   206d0:	d003      	beq.n	206da <wait_for_firmware_start+0x3a>
   206d2:	1dfb      	adds	r3, r7, #7
   206d4:	781b      	ldrb	r3, [r3, #0]
   206d6:	2b03      	cmp	r3, #3
   206d8:	d119      	bne.n	2070e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   206da:	4b19      	ldr	r3, [pc, #100]	; (20740 <wait_for_firmware_start+0xa0>)
   206dc:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   206de:	4b19      	ldr	r3, [pc, #100]	; (20744 <wait_for_firmware_start+0xa4>)
   206e0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   206e2:	e014      	b.n	2070e <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   206e4:	2002      	movs	r0, #2
   206e6:	4b18      	ldr	r3, [pc, #96]	; (20748 <wait_for_firmware_start+0xa8>)
   206e8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   206ea:	68fb      	ldr	r3, [r7, #12]
   206ec:	0018      	movs	r0, r3
   206ee:	4b17      	ldr	r3, [pc, #92]	; (2074c <wait_for_firmware_start+0xac>)
   206f0:	4798      	blx	r3
   206f2:	0003      	movs	r3, r0
   206f4:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   206f6:	697b      	ldr	r3, [r7, #20]
   206f8:	3301      	adds	r3, #1
   206fa:	617b      	str	r3, [r7, #20]
   206fc:	697a      	ldr	r2, [r7, #20]
   206fe:	693b      	ldr	r3, [r7, #16]
   20700:	429a      	cmp	r2, r3
   20702:	d304      	bcc.n	2070e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   20704:	231f      	movs	r3, #31
   20706:	18fb      	adds	r3, r7, r3
   20708:	22fb      	movs	r2, #251	; 0xfb
   2070a:	701a      	strb	r2, [r3, #0]
			goto ERR;
   2070c:	e00c      	b.n	20728 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   2070e:	68ba      	ldr	r2, [r7, #8]
   20710:	69bb      	ldr	r3, [r7, #24]
   20712:	429a      	cmp	r2, r3
   20714:	d1e6      	bne.n	206e4 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   20716:	68bb      	ldr	r3, [r7, #8]
   20718:	4a08      	ldr	r2, [pc, #32]	; (2073c <wait_for_firmware_start+0x9c>)
   2071a:	4293      	cmp	r3, r2
   2071c:	d104      	bne.n	20728 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   2071e:	4b06      	ldr	r3, [pc, #24]	; (20738 <wait_for_firmware_start+0x98>)
   20720:	2100      	movs	r1, #0
   20722:	0018      	movs	r0, r3
   20724:	4b0a      	ldr	r3, [pc, #40]	; (20750 <wait_for_firmware_start+0xb0>)
   20726:	4798      	blx	r3
	}
ERR:
	return ret;
   20728:	231f      	movs	r3, #31
   2072a:	18fb      	adds	r3, r7, r3
   2072c:	781b      	ldrb	r3, [r3, #0]
   2072e:	b25b      	sxtb	r3, r3
}
   20730:	0018      	movs	r0, r3
   20732:	46bd      	mov	sp, r7
   20734:	b008      	add	sp, #32
   20736:	bd80      	pop	{r7, pc}
   20738:	0000108c 	.word	0x0000108c
   2073c:	02532636 	.word	0x02532636
   20740:	000207ac 	.word	0x000207ac
   20744:	d75dc1c3 	.word	0xd75dc1c3
   20748:	0001df41 	.word	0x0001df41
   2074c:	00020891 	.word	0x00020891
   20750:	000208d5 	.word	0x000208d5

00020754 <chip_deinit>:

sint8 chip_deinit(void)
{
   20754:	b590      	push	{r4, r7, lr}
   20756:	b083      	sub	sp, #12
   20758:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   2075a:	2300      	movs	r3, #0
   2075c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   2075e:	1dfc      	adds	r4, r7, #7
   20760:	003a      	movs	r2, r7
   20762:	23a0      	movs	r3, #160	; 0xa0
   20764:	015b      	lsls	r3, r3, #5
   20766:	0011      	movs	r1, r2
   20768:	0018      	movs	r0, r3
   2076a:	4b20      	ldr	r3, [pc, #128]	; (207ec <chip_deinit+0x98>)
   2076c:	4798      	blx	r3
   2076e:	0003      	movs	r3, r0
   20770:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   20772:	1dfb      	adds	r3, r7, #7
   20774:	781b      	ldrb	r3, [r3, #0]
   20776:	b25b      	sxtb	r3, r3
   20778:	2b00      	cmp	r3, #0
   2077a:	d00e      	beq.n	2079a <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   2077c:	4a1c      	ldr	r2, [pc, #112]	; (207f0 <chip_deinit+0x9c>)
   2077e:	491d      	ldr	r1, [pc, #116]	; (207f4 <chip_deinit+0xa0>)
   20780:	4b1d      	ldr	r3, [pc, #116]	; (207f8 <chip_deinit+0xa4>)
   20782:	0018      	movs	r0, r3
   20784:	4b1d      	ldr	r3, [pc, #116]	; (207fc <chip_deinit+0xa8>)
   20786:	4798      	blx	r3
   20788:	4b1d      	ldr	r3, [pc, #116]	; (20800 <chip_deinit+0xac>)
   2078a:	0018      	movs	r0, r3
   2078c:	4b1b      	ldr	r3, [pc, #108]	; (207fc <chip_deinit+0xa8>)
   2078e:	4798      	blx	r3
   20790:	4b1c      	ldr	r3, [pc, #112]	; (20804 <chip_deinit+0xb0>)
   20792:	0018      	movs	r0, r3
   20794:	4b19      	ldr	r3, [pc, #100]	; (207fc <chip_deinit+0xa8>)
   20796:	4798      	blx	r3
		goto ERR1;
   20798:	e021      	b.n	207de <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   2079a:	683b      	ldr	r3, [r7, #0]
   2079c:	4a1a      	ldr	r2, [pc, #104]	; (20808 <chip_deinit+0xb4>)
   2079e:	4013      	ands	r3, r2
   207a0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   207a2:	683a      	ldr	r2, [r7, #0]
   207a4:	1dfc      	adds	r4, r7, #7
   207a6:	23a0      	movs	r3, #160	; 0xa0
   207a8:	015b      	lsls	r3, r3, #5
   207aa:	0011      	movs	r1, r2
   207ac:	0018      	movs	r0, r3
   207ae:	4b17      	ldr	r3, [pc, #92]	; (2080c <chip_deinit+0xb8>)
   207b0:	4798      	blx	r3
   207b2:	0003      	movs	r3, r0
   207b4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   207b6:	1dfb      	adds	r3, r7, #7
   207b8:	781b      	ldrb	r3, [r3, #0]
   207ba:	b25b      	sxtb	r3, r3
   207bc:	2b00      	cmp	r3, #0
   207be:	d00e      	beq.n	207de <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   207c0:	4a13      	ldr	r2, [pc, #76]	; (20810 <chip_deinit+0xbc>)
   207c2:	490c      	ldr	r1, [pc, #48]	; (207f4 <chip_deinit+0xa0>)
   207c4:	4b0c      	ldr	r3, [pc, #48]	; (207f8 <chip_deinit+0xa4>)
   207c6:	0018      	movs	r0, r3
   207c8:	4b0c      	ldr	r3, [pc, #48]	; (207fc <chip_deinit+0xa8>)
   207ca:	4798      	blx	r3
   207cc:	4b0c      	ldr	r3, [pc, #48]	; (20800 <chip_deinit+0xac>)
   207ce:	0018      	movs	r0, r3
   207d0:	4b0a      	ldr	r3, [pc, #40]	; (207fc <chip_deinit+0xa8>)
   207d2:	4798      	blx	r3
   207d4:	4b0b      	ldr	r3, [pc, #44]	; (20804 <chip_deinit+0xb0>)
   207d6:	0018      	movs	r0, r3
   207d8:	4b08      	ldr	r3, [pc, #32]	; (207fc <chip_deinit+0xa8>)
   207da:	4798      	blx	r3
		goto ERR1;
   207dc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   207de:	1dfb      	adds	r3, r7, #7
   207e0:	781b      	ldrb	r3, [r3, #0]
   207e2:	b25b      	sxtb	r3, r3
}
   207e4:	0018      	movs	r0, r3
   207e6:	46bd      	mov	sp, r7
   207e8:	b003      	add	sp, #12
   207ea:	bd90      	pop	{r4, r7, pc}
   207ec:	000208b1 	.word	0x000208b1
   207f0:	00000201 	.word	0x00000201
   207f4:	00035fd4 	.word	0x00035fd4
   207f8:	00035f3c 	.word	0x00035f3c
   207fc:	0001baed 	.word	0x0001baed
   20800:	00035fac 	.word	0x00035fac
   20804:	00035f68 	.word	0x00035f68
   20808:	fffffbff 	.word	0xfffffbff
   2080c:	000208d5 	.word	0x000208d5
   20810:	00000207 	.word	0x00000207

00020814 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   20814:	b590      	push	{r4, r7, lr}
   20816:	b085      	sub	sp, #20
   20818:	af00      	add	r7, sp, #0
   2081a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2081c:	230f      	movs	r3, #15
   2081e:	18fb      	adds	r3, r7, r3
   20820:	2200      	movs	r2, #0
   20822:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   20824:	230f      	movs	r3, #15
   20826:	18fc      	adds	r4, r7, r3
   20828:	687b      	ldr	r3, [r7, #4]
   2082a:	0018      	movs	r0, r3
   2082c:	4b05      	ldr	r3, [pc, #20]	; (20844 <nm_bus_iface_init+0x30>)
   2082e:	4798      	blx	r3
   20830:	0003      	movs	r3, r0
   20832:	7023      	strb	r3, [r4, #0]
	return ret;
   20834:	230f      	movs	r3, #15
   20836:	18fb      	adds	r3, r7, r3
   20838:	781b      	ldrb	r3, [r3, #0]
   2083a:	b25b      	sxtb	r3, r3
}
   2083c:	0018      	movs	r0, r3
   2083e:	46bd      	mov	sp, r7
   20840:	b005      	add	sp, #20
   20842:	bd90      	pop	{r4, r7, pc}
   20844:	0001e5fd 	.word	0x0001e5fd

00020848 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   20848:	b590      	push	{r4, r7, lr}
   2084a:	b083      	sub	sp, #12
   2084c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2084e:	1dfb      	adds	r3, r7, #7
   20850:	2200      	movs	r2, #0
   20852:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   20854:	1dfc      	adds	r4, r7, #7
   20856:	4b05      	ldr	r3, [pc, #20]	; (2086c <nm_bus_iface_deinit+0x24>)
   20858:	4798      	blx	r3
   2085a:	0003      	movs	r3, r0
   2085c:	7023      	strb	r3, [r4, #0]

	return ret;
   2085e:	1dfb      	adds	r3, r7, #7
   20860:	781b      	ldrb	r3, [r3, #0]
   20862:	b25b      	sxtb	r3, r3
}
   20864:	0018      	movs	r0, r3
   20866:	46bd      	mov	sp, r7
   20868:	b003      	add	sp, #12
   2086a:	bd90      	pop	{r4, r7, pc}
   2086c:	0001e775 	.word	0x0001e775

00020870 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   20870:	b580      	push	{r7, lr}
   20872:	b082      	sub	sp, #8
   20874:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   20876:	1dfb      	adds	r3, r7, #7
   20878:	2200      	movs	r2, #0
   2087a:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   2087c:	4b03      	ldr	r3, [pc, #12]	; (2088c <nm_bus_reset+0x1c>)
   2087e:	4798      	blx	r3
   20880:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   20882:	0018      	movs	r0, r3
   20884:	46bd      	mov	sp, r7
   20886:	b002      	add	sp, #8
   20888:	bd80      	pop	{r7, pc}
   2088a:	46c0      	nop			; (mov r8, r8)
   2088c:	0002269d 	.word	0x0002269d

00020890 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   20890:	b580      	push	{r7, lr}
   20892:	b082      	sub	sp, #8
   20894:	af00      	add	r7, sp, #0
   20896:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   20898:	687b      	ldr	r3, [r7, #4]
   2089a:	0018      	movs	r0, r3
   2089c:	4b03      	ldr	r3, [pc, #12]	; (208ac <nm_read_reg+0x1c>)
   2089e:	4798      	blx	r3
   208a0:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   208a2:	0018      	movs	r0, r3
   208a4:	46bd      	mov	sp, r7
   208a6:	b002      	add	sp, #8
   208a8:	bd80      	pop	{r7, pc}
   208aa:	46c0      	nop			; (mov r8, r8)
   208ac:	00022831 	.word	0x00022831

000208b0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   208b0:	b580      	push	{r7, lr}
   208b2:	b082      	sub	sp, #8
   208b4:	af00      	add	r7, sp, #0
   208b6:	6078      	str	r0, [r7, #4]
   208b8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   208ba:	683a      	ldr	r2, [r7, #0]
   208bc:	687b      	ldr	r3, [r7, #4]
   208be:	0011      	movs	r1, r2
   208c0:	0018      	movs	r0, r3
   208c2:	4b03      	ldr	r3, [pc, #12]	; (208d0 <nm_read_reg_with_ret+0x20>)
   208c4:	4798      	blx	r3
   208c6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   208c8:	0018      	movs	r0, r3
   208ca:	46bd      	mov	sp, r7
   208cc:	b002      	add	sp, #8
   208ce:	bd80      	pop	{r7, pc}
   208d0:	00022855 	.word	0x00022855

000208d4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   208d4:	b580      	push	{r7, lr}
   208d6:	b082      	sub	sp, #8
   208d8:	af00      	add	r7, sp, #0
   208da:	6078      	str	r0, [r7, #4]
   208dc:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   208de:	683a      	ldr	r2, [r7, #0]
   208e0:	687b      	ldr	r3, [r7, #4]
   208e2:	0011      	movs	r1, r2
   208e4:	0018      	movs	r0, r3
   208e6:	4b03      	ldr	r3, [pc, #12]	; (208f4 <nm_write_reg+0x20>)
   208e8:	4798      	blx	r3
   208ea:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   208ec:	0018      	movs	r0, r3
   208ee:	46bd      	mov	sp, r7
   208f0:	b002      	add	sp, #8
   208f2:	bd80      	pop	{r7, pc}
   208f4:	000228a5 	.word	0x000228a5

000208f8 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   208f8:	b580      	push	{r7, lr}
   208fa:	b084      	sub	sp, #16
   208fc:	af00      	add	r7, sp, #0
   208fe:	60f8      	str	r0, [r7, #12]
   20900:	60b9      	str	r1, [r7, #8]
   20902:	1dbb      	adds	r3, r7, #6
   20904:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   20906:	1dbb      	adds	r3, r7, #6
   20908:	881a      	ldrh	r2, [r3, #0]
   2090a:	68b9      	ldr	r1, [r7, #8]
   2090c:	68fb      	ldr	r3, [r7, #12]
   2090e:	0018      	movs	r0, r3
   20910:	4b03      	ldr	r3, [pc, #12]	; (20920 <p_nm_read_block+0x28>)
   20912:	4798      	blx	r3
   20914:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   20916:	0018      	movs	r0, r3
   20918:	46bd      	mov	sp, r7
   2091a:	b004      	add	sp, #16
   2091c:	bd80      	pop	{r7, pc}
   2091e:	46c0      	nop			; (mov r8, r8)
   20920:	000228f5 	.word	0x000228f5

00020924 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   20924:	b580      	push	{r7, lr}
   20926:	b086      	sub	sp, #24
   20928:	af00      	add	r7, sp, #0
   2092a:	60f8      	str	r0, [r7, #12]
   2092c:	60b9      	str	r1, [r7, #8]
   2092e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   20930:	4b2d      	ldr	r3, [pc, #180]	; (209e8 <nm_read_block+0xc4>)
   20932:	881a      	ldrh	r2, [r3, #0]
   20934:	2310      	movs	r3, #16
   20936:	18fb      	adds	r3, r7, r3
   20938:	3a08      	subs	r2, #8
   2093a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   2093c:	2300      	movs	r3, #0
   2093e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   20940:	2313      	movs	r3, #19
   20942:	18fb      	adds	r3, r7, r3
   20944:	2200      	movs	r2, #0
   20946:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   20948:	2310      	movs	r3, #16
   2094a:	18fb      	adds	r3, r7, r3
   2094c:	881a      	ldrh	r2, [r3, #0]
   2094e:	687b      	ldr	r3, [r7, #4]
   20950:	429a      	cmp	r2, r3
   20952:	d313      	bcc.n	2097c <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   20954:	68ba      	ldr	r2, [r7, #8]
   20956:	697b      	ldr	r3, [r7, #20]
   20958:	18d1      	adds	r1, r2, r3
   2095a:	687b      	ldr	r3, [r7, #4]
   2095c:	b29a      	uxth	r2, r3
   2095e:	68fb      	ldr	r3, [r7, #12]
   20960:	0018      	movs	r0, r3
   20962:	4b22      	ldr	r3, [pc, #136]	; (209ec <nm_read_block+0xc8>)
   20964:	4798      	blx	r3
   20966:	0003      	movs	r3, r0
   20968:	b2da      	uxtb	r2, r3
   2096a:	2313      	movs	r3, #19
   2096c:	18fb      	adds	r3, r7, r3
   2096e:	781b      	ldrb	r3, [r3, #0]
   20970:	18d3      	adds	r3, r2, r3
   20972:	b2da      	uxtb	r2, r3
   20974:	2313      	movs	r3, #19
   20976:	18fb      	adds	r3, r7, r3
   20978:	701a      	strb	r2, [r3, #0]
			break;
   2097a:	e02d      	b.n	209d8 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   2097c:	68ba      	ldr	r2, [r7, #8]
   2097e:	697b      	ldr	r3, [r7, #20]
   20980:	18d1      	adds	r1, r2, r3
   20982:	2310      	movs	r3, #16
   20984:	18fb      	adds	r3, r7, r3
   20986:	881a      	ldrh	r2, [r3, #0]
   20988:	68fb      	ldr	r3, [r7, #12]
   2098a:	0018      	movs	r0, r3
   2098c:	4b17      	ldr	r3, [pc, #92]	; (209ec <nm_read_block+0xc8>)
   2098e:	4798      	blx	r3
   20990:	0003      	movs	r3, r0
   20992:	b2da      	uxtb	r2, r3
   20994:	2313      	movs	r3, #19
   20996:	18fb      	adds	r3, r7, r3
   20998:	781b      	ldrb	r3, [r3, #0]
   2099a:	18d3      	adds	r3, r2, r3
   2099c:	b2da      	uxtb	r2, r3
   2099e:	2313      	movs	r3, #19
   209a0:	18fb      	adds	r3, r7, r3
   209a2:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   209a4:	2313      	movs	r3, #19
   209a6:	18fb      	adds	r3, r7, r3
   209a8:	781b      	ldrb	r3, [r3, #0]
   209aa:	b25b      	sxtb	r3, r3
   209ac:	2b00      	cmp	r3, #0
   209ae:	d112      	bne.n	209d6 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   209b0:	2310      	movs	r3, #16
   209b2:	18fb      	adds	r3, r7, r3
   209b4:	881b      	ldrh	r3, [r3, #0]
   209b6:	687a      	ldr	r2, [r7, #4]
   209b8:	1ad3      	subs	r3, r2, r3
   209ba:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   209bc:	2310      	movs	r3, #16
   209be:	18fb      	adds	r3, r7, r3
   209c0:	881b      	ldrh	r3, [r3, #0]
   209c2:	697a      	ldr	r2, [r7, #20]
   209c4:	18d3      	adds	r3, r2, r3
   209c6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   209c8:	2310      	movs	r3, #16
   209ca:	18fb      	adds	r3, r7, r3
   209cc:	881b      	ldrh	r3, [r3, #0]
   209ce:	68fa      	ldr	r2, [r7, #12]
   209d0:	18d3      	adds	r3, r2, r3
   209d2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   209d4:	e7b8      	b.n	20948 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   209d6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   209d8:	2313      	movs	r3, #19
   209da:	18fb      	adds	r3, r7, r3
   209dc:	781b      	ldrb	r3, [r3, #0]
   209de:	b25b      	sxtb	r3, r3
}
   209e0:	0018      	movs	r0, r3
   209e2:	46bd      	mov	sp, r7
   209e4:	b006      	add	sp, #24
   209e6:	bd80      	pop	{r7, pc}
   209e8:	20000104 	.word	0x20000104
   209ec:	000208f9 	.word	0x000208f9

000209f0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   209f0:	b580      	push	{r7, lr}
   209f2:	b084      	sub	sp, #16
   209f4:	af00      	add	r7, sp, #0
   209f6:	60f8      	str	r0, [r7, #12]
   209f8:	60b9      	str	r1, [r7, #8]
   209fa:	1dbb      	adds	r3, r7, #6
   209fc:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   209fe:	1dbb      	adds	r3, r7, #6
   20a00:	881a      	ldrh	r2, [r3, #0]
   20a02:	68b9      	ldr	r1, [r7, #8]
   20a04:	68fb      	ldr	r3, [r7, #12]
   20a06:	0018      	movs	r0, r3
   20a08:	4b03      	ldr	r3, [pc, #12]	; (20a18 <p_nm_write_block+0x28>)
   20a0a:	4798      	blx	r3
   20a0c:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   20a0e:	0018      	movs	r0, r3
   20a10:	46bd      	mov	sp, r7
   20a12:	b004      	add	sp, #16
   20a14:	bd80      	pop	{r7, pc}
   20a16:	46c0      	nop			; (mov r8, r8)
   20a18:	0002294d 	.word	0x0002294d

00020a1c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   20a1c:	b580      	push	{r7, lr}
   20a1e:	b086      	sub	sp, #24
   20a20:	af00      	add	r7, sp, #0
   20a22:	60f8      	str	r0, [r7, #12]
   20a24:	60b9      	str	r1, [r7, #8]
   20a26:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   20a28:	4b2d      	ldr	r3, [pc, #180]	; (20ae0 <nm_write_block+0xc4>)
   20a2a:	881a      	ldrh	r2, [r3, #0]
   20a2c:	2310      	movs	r3, #16
   20a2e:	18fb      	adds	r3, r7, r3
   20a30:	3a08      	subs	r2, #8
   20a32:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   20a34:	2300      	movs	r3, #0
   20a36:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   20a38:	2313      	movs	r3, #19
   20a3a:	18fb      	adds	r3, r7, r3
   20a3c:	2200      	movs	r2, #0
   20a3e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   20a40:	2310      	movs	r3, #16
   20a42:	18fb      	adds	r3, r7, r3
   20a44:	881a      	ldrh	r2, [r3, #0]
   20a46:	687b      	ldr	r3, [r7, #4]
   20a48:	429a      	cmp	r2, r3
   20a4a:	d313      	bcc.n	20a74 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   20a4c:	68ba      	ldr	r2, [r7, #8]
   20a4e:	697b      	ldr	r3, [r7, #20]
   20a50:	18d1      	adds	r1, r2, r3
   20a52:	687b      	ldr	r3, [r7, #4]
   20a54:	b29a      	uxth	r2, r3
   20a56:	68fb      	ldr	r3, [r7, #12]
   20a58:	0018      	movs	r0, r3
   20a5a:	4b22      	ldr	r3, [pc, #136]	; (20ae4 <nm_write_block+0xc8>)
   20a5c:	4798      	blx	r3
   20a5e:	0003      	movs	r3, r0
   20a60:	b2da      	uxtb	r2, r3
   20a62:	2313      	movs	r3, #19
   20a64:	18fb      	adds	r3, r7, r3
   20a66:	781b      	ldrb	r3, [r3, #0]
   20a68:	18d3      	adds	r3, r2, r3
   20a6a:	b2da      	uxtb	r2, r3
   20a6c:	2313      	movs	r3, #19
   20a6e:	18fb      	adds	r3, r7, r3
   20a70:	701a      	strb	r2, [r3, #0]
			break;
   20a72:	e02d      	b.n	20ad0 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   20a74:	68ba      	ldr	r2, [r7, #8]
   20a76:	697b      	ldr	r3, [r7, #20]
   20a78:	18d1      	adds	r1, r2, r3
   20a7a:	2310      	movs	r3, #16
   20a7c:	18fb      	adds	r3, r7, r3
   20a7e:	881a      	ldrh	r2, [r3, #0]
   20a80:	68fb      	ldr	r3, [r7, #12]
   20a82:	0018      	movs	r0, r3
   20a84:	4b17      	ldr	r3, [pc, #92]	; (20ae4 <nm_write_block+0xc8>)
   20a86:	4798      	blx	r3
   20a88:	0003      	movs	r3, r0
   20a8a:	b2da      	uxtb	r2, r3
   20a8c:	2313      	movs	r3, #19
   20a8e:	18fb      	adds	r3, r7, r3
   20a90:	781b      	ldrb	r3, [r3, #0]
   20a92:	18d3      	adds	r3, r2, r3
   20a94:	b2da      	uxtb	r2, r3
   20a96:	2313      	movs	r3, #19
   20a98:	18fb      	adds	r3, r7, r3
   20a9a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   20a9c:	2313      	movs	r3, #19
   20a9e:	18fb      	adds	r3, r7, r3
   20aa0:	781b      	ldrb	r3, [r3, #0]
   20aa2:	b25b      	sxtb	r3, r3
   20aa4:	2b00      	cmp	r3, #0
   20aa6:	d112      	bne.n	20ace <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   20aa8:	2310      	movs	r3, #16
   20aaa:	18fb      	adds	r3, r7, r3
   20aac:	881b      	ldrh	r3, [r3, #0]
   20aae:	687a      	ldr	r2, [r7, #4]
   20ab0:	1ad3      	subs	r3, r2, r3
   20ab2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   20ab4:	2310      	movs	r3, #16
   20ab6:	18fb      	adds	r3, r7, r3
   20ab8:	881b      	ldrh	r3, [r3, #0]
   20aba:	697a      	ldr	r2, [r7, #20]
   20abc:	18d3      	adds	r3, r2, r3
   20abe:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   20ac0:	2310      	movs	r3, #16
   20ac2:	18fb      	adds	r3, r7, r3
   20ac4:	881b      	ldrh	r3, [r3, #0]
   20ac6:	68fa      	ldr	r2, [r7, #12]
   20ac8:	18d3      	adds	r3, r2, r3
   20aca:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   20acc:	e7b8      	b.n	20a40 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   20ace:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   20ad0:	2313      	movs	r3, #19
   20ad2:	18fb      	adds	r3, r7, r3
   20ad4:	781b      	ldrb	r3, [r3, #0]
   20ad6:	b25b      	sxtb	r3, r3
}
   20ad8:	0018      	movs	r0, r3
   20ada:	46bd      	mov	sp, r7
   20adc:	b006      	add	sp, #24
   20ade:	bd80      	pop	{r7, pc}
   20ae0:	20000104 	.word	0x20000104
   20ae4:	000209f1 	.word	0x000209f1

00020ae8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   20ae8:	b590      	push	{r4, r7, lr}
   20aea:	b089      	sub	sp, #36	; 0x24
   20aec:	af00      	add	r7, sp, #0
   20aee:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   20af0:	2300      	movs	r3, #0
   20af2:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   20af4:	231f      	movs	r3, #31
   20af6:	18fb      	adds	r3, r7, r3
   20af8:	2200      	movs	r2, #0
   20afa:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   20afc:	230c      	movs	r3, #12
   20afe:	18fb      	adds	r3, r7, r3
   20b00:	0018      	movs	r0, r3
   20b02:	2308      	movs	r3, #8
   20b04:	001a      	movs	r2, r3
   20b06:	2100      	movs	r1, #0
   20b08:	4b64      	ldr	r3, [pc, #400]	; (20c9c <nm_get_firmware_full_info+0x1b4>)
   20b0a:	4798      	blx	r3
	if (pstrRev != NULL)
   20b0c:	687b      	ldr	r3, [r7, #4]
   20b0e:	2b00      	cmp	r3, #0
   20b10:	d100      	bne.n	20b14 <nm_get_firmware_full_info+0x2c>
   20b12:	e0ba      	b.n	20c8a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   20b14:	687b      	ldr	r3, [r7, #4]
   20b16:	2228      	movs	r2, #40	; 0x28
   20b18:	2100      	movs	r1, #0
   20b1a:	0018      	movs	r0, r3
   20b1c:	4b60      	ldr	r3, [pc, #384]	; (20ca0 <nm_get_firmware_full_info+0x1b8>)
   20b1e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   20b20:	231f      	movs	r3, #31
   20b22:	18fc      	adds	r4, r7, r3
   20b24:	2314      	movs	r3, #20
   20b26:	18fb      	adds	r3, r7, r3
   20b28:	4a5e      	ldr	r2, [pc, #376]	; (20ca4 <nm_get_firmware_full_info+0x1bc>)
   20b2a:	0019      	movs	r1, r3
   20b2c:	0010      	movs	r0, r2
   20b2e:	4b5e      	ldr	r3, [pc, #376]	; (20ca8 <nm_get_firmware_full_info+0x1c0>)
   20b30:	4798      	blx	r3
   20b32:	0003      	movs	r3, r0
   20b34:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   20b36:	231f      	movs	r3, #31
   20b38:	18fb      	adds	r3, r7, r3
   20b3a:	781b      	ldrb	r3, [r3, #0]
   20b3c:	b25b      	sxtb	r3, r3
   20b3e:	2b00      	cmp	r3, #0
   20b40:	d000      	beq.n	20b44 <nm_get_firmware_full_info+0x5c>
   20b42:	e0a2      	b.n	20c8a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   20b44:	697b      	ldr	r3, [r7, #20]
   20b46:	2b00      	cmp	r3, #0
   20b48:	d100      	bne.n	20b4c <nm_get_firmware_full_info+0x64>
   20b4a:	e09a      	b.n	20c82 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   20b4c:	697b      	ldr	r3, [r7, #20]
   20b4e:	22c0      	movs	r2, #192	; 0xc0
   20b50:	0292      	lsls	r2, r2, #10
   20b52:	4313      	orrs	r3, r2
   20b54:	221f      	movs	r2, #31
   20b56:	18bc      	adds	r4, r7, r2
   20b58:	220c      	movs	r2, #12
   20b5a:	18b9      	adds	r1, r7, r2
   20b5c:	2208      	movs	r2, #8
   20b5e:	0018      	movs	r0, r3
   20b60:	4b52      	ldr	r3, [pc, #328]	; (20cac <nm_get_firmware_full_info+0x1c4>)
   20b62:	4798      	blx	r3
   20b64:	0003      	movs	r3, r0
   20b66:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   20b68:	231f      	movs	r3, #31
   20b6a:	18fb      	adds	r3, r7, r3
   20b6c:	781b      	ldrb	r3, [r3, #0]
   20b6e:	b25b      	sxtb	r3, r3
   20b70:	2b00      	cmp	r3, #0
   20b72:	d000      	beq.n	20b76 <nm_get_firmware_full_info+0x8e>
   20b74:	e089      	b.n	20c8a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   20b76:	230c      	movs	r3, #12
   20b78:	18fb      	adds	r3, r7, r3
   20b7a:	685b      	ldr	r3, [r3, #4]
   20b7c:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   20b7e:	697b      	ldr	r3, [r7, #20]
   20b80:	041b      	lsls	r3, r3, #16
   20b82:	0c1b      	lsrs	r3, r3, #16
   20b84:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   20b86:	697b      	ldr	r3, [r7, #20]
   20b88:	2b00      	cmp	r3, #0
   20b8a:	d100      	bne.n	20b8e <nm_get_firmware_full_info+0xa6>
   20b8c:	e074      	b.n	20c78 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   20b8e:	697b      	ldr	r3, [r7, #20]
   20b90:	22c0      	movs	r2, #192	; 0xc0
   20b92:	0292      	lsls	r2, r2, #10
   20b94:	4313      	orrs	r3, r2
   20b96:	221f      	movs	r2, #31
   20b98:	18bc      	adds	r4, r7, r2
   20b9a:	6879      	ldr	r1, [r7, #4]
   20b9c:	2228      	movs	r2, #40	; 0x28
   20b9e:	0018      	movs	r0, r3
   20ba0:	4b42      	ldr	r3, [pc, #264]	; (20cac <nm_get_firmware_full_info+0x1c4>)
   20ba2:	4798      	blx	r3
   20ba4:	0003      	movs	r3, r0
   20ba6:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   20ba8:	231f      	movs	r3, #31
   20baa:	18fb      	adds	r3, r7, r3
   20bac:	781b      	ldrb	r3, [r3, #0]
   20bae:	b25b      	sxtb	r3, r3
   20bb0:	2b00      	cmp	r3, #0
   20bb2:	d16a      	bne.n	20c8a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   20bb4:	687b      	ldr	r3, [r7, #4]
   20bb6:	791b      	ldrb	r3, [r3, #4]
   20bb8:	021b      	lsls	r3, r3, #8
   20bba:	b21a      	sxth	r2, r3
   20bbc:	687b      	ldr	r3, [r7, #4]
   20bbe:	795b      	ldrb	r3, [r3, #5]
   20bc0:	011b      	lsls	r3, r3, #4
   20bc2:	b21b      	sxth	r3, r3
   20bc4:	21ff      	movs	r1, #255	; 0xff
   20bc6:	400b      	ands	r3, r1
   20bc8:	b21b      	sxth	r3, r3
   20bca:	4313      	orrs	r3, r2
   20bcc:	b21a      	sxth	r2, r3
   20bce:	687b      	ldr	r3, [r7, #4]
   20bd0:	799b      	ldrb	r3, [r3, #6]
   20bd2:	b21b      	sxth	r3, r3
   20bd4:	210f      	movs	r1, #15
   20bd6:	400b      	ands	r3, r1
   20bd8:	b21b      	sxth	r3, r3
   20bda:	4313      	orrs	r3, r2
   20bdc:	b21a      	sxth	r2, r3
   20bde:	231c      	movs	r3, #28
   20be0:	18fb      	adds	r3, r7, r3
   20be2:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   20be4:	231a      	movs	r3, #26
   20be6:	18fb      	adds	r3, r7, r3
   20be8:	4a31      	ldr	r2, [pc, #196]	; (20cb0 <nm_get_firmware_full_info+0x1c8>)
   20bea:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   20bec:	687b      	ldr	r3, [r7, #4]
   20bee:	79db      	ldrb	r3, [r3, #7]
   20bf0:	021b      	lsls	r3, r3, #8
   20bf2:	b21a      	sxth	r2, r3
   20bf4:	687b      	ldr	r3, [r7, #4]
   20bf6:	7a1b      	ldrb	r3, [r3, #8]
   20bf8:	011b      	lsls	r3, r3, #4
   20bfa:	b21b      	sxth	r3, r3
   20bfc:	21ff      	movs	r1, #255	; 0xff
   20bfe:	400b      	ands	r3, r1
   20c00:	b21b      	sxth	r3, r3
   20c02:	4313      	orrs	r3, r2
   20c04:	b21a      	sxth	r2, r3
   20c06:	687b      	ldr	r3, [r7, #4]
   20c08:	7a5b      	ldrb	r3, [r3, #9]
   20c0a:	b21b      	sxth	r3, r3
   20c0c:	210f      	movs	r1, #15
   20c0e:	400b      	ands	r3, r1
   20c10:	b21b      	sxth	r3, r3
   20c12:	4313      	orrs	r3, r2
   20c14:	b21a      	sxth	r2, r3
   20c16:	2318      	movs	r3, #24
   20c18:	18fb      	adds	r3, r7, r3
   20c1a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   20c1c:	231c      	movs	r3, #28
   20c1e:	18fb      	adds	r3, r7, r3
   20c20:	881b      	ldrh	r3, [r3, #0]
   20c22:	2b00      	cmp	r3, #0
   20c24:	d009      	beq.n	20c3a <nm_get_firmware_full_info+0x152>
   20c26:	2318      	movs	r3, #24
   20c28:	18fb      	adds	r3, r7, r3
   20c2a:	881b      	ldrh	r3, [r3, #0]
   20c2c:	2b00      	cmp	r3, #0
   20c2e:	d004      	beq.n	20c3a <nm_get_firmware_full_info+0x152>
   20c30:	2318      	movs	r3, #24
   20c32:	18fb      	adds	r3, r7, r3
   20c34:	881b      	ldrh	r3, [r3, #0]
   20c36:	2b00      	cmp	r3, #0
   20c38:	d104      	bne.n	20c44 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   20c3a:	231f      	movs	r3, #31
   20c3c:	18fb      	adds	r3, r7, r3
   20c3e:	22f4      	movs	r2, #244	; 0xf4
   20c40:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   20c42:	e022      	b.n	20c8a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   20c44:	231a      	movs	r3, #26
   20c46:	18fa      	adds	r2, r7, r3
   20c48:	2318      	movs	r3, #24
   20c4a:	18fb      	adds	r3, r7, r3
   20c4c:	8812      	ldrh	r2, [r2, #0]
   20c4e:	881b      	ldrh	r3, [r3, #0]
   20c50:	429a      	cmp	r2, r3
   20c52:	d204      	bcs.n	20c5e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   20c54:	231f      	movs	r3, #31
   20c56:	18fb      	adds	r3, r7, r3
   20c58:	22f3      	movs	r2, #243	; 0xf3
   20c5a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   20c5c:	e015      	b.n	20c8a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   20c5e:	231a      	movs	r3, #26
   20c60:	18fa      	adds	r2, r7, r3
   20c62:	231c      	movs	r3, #28
   20c64:	18fb      	adds	r3, r7, r3
   20c66:	8812      	ldrh	r2, [r2, #0]
   20c68:	881b      	ldrh	r3, [r3, #0]
   20c6a:	429a      	cmp	r2, r3
   20c6c:	d90d      	bls.n	20c8a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   20c6e:	231f      	movs	r3, #31
   20c70:	18fb      	adds	r3, r7, r3
   20c72:	22f3      	movs	r2, #243	; 0xf3
   20c74:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   20c76:	e008      	b.n	20c8a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   20c78:	231f      	movs	r3, #31
   20c7a:	18fb      	adds	r3, r7, r3
   20c7c:	22f4      	movs	r2, #244	; 0xf4
   20c7e:	701a      	strb	r2, [r3, #0]
   20c80:	e003      	b.n	20c8a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   20c82:	231f      	movs	r3, #31
   20c84:	18fb      	adds	r3, r7, r3
   20c86:	22f4      	movs	r2, #244	; 0xf4
   20c88:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   20c8a:	231f      	movs	r3, #31
   20c8c:	18fb      	adds	r3, r7, r3
   20c8e:	781b      	ldrb	r3, [r3, #0]
   20c90:	b25b      	sxtb	r3, r3
}
   20c92:	0018      	movs	r0, r3
   20c94:	46bd      	mov	sp, r7
   20c96:	b009      	add	sp, #36	; 0x24
   20c98:	bd90      	pop	{r4, r7, pc}
   20c9a:	46c0      	nop			; (mov r8, r8)
   20c9c:	000321a3 	.word	0x000321a3
   20ca0:	0001e821 	.word	0x0001e821
   20ca4:	000c0008 	.word	0x000c0008
   20ca8:	000208b1 	.word	0x000208b1
   20cac:	00020925 	.word	0x00020925
   20cb0:	00001354 	.word	0x00001354

00020cb4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   20cb4:	b590      	push	{r4, r7, lr}
   20cb6:	b085      	sub	sp, #20
   20cb8:	af00      	add	r7, sp, #0
   20cba:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   20cbc:	230f      	movs	r3, #15
   20cbe:	18fb      	adds	r3, r7, r3
   20cc0:	2200      	movs	r2, #0
   20cc2:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   20cc4:	687b      	ldr	r3, [r7, #4]
   20cc6:	2b00      	cmp	r3, #0
   20cc8:	d013      	beq.n	20cf2 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   20cca:	230e      	movs	r3, #14
   20ccc:	18fb      	adds	r3, r7, r3
   20cce:	687a      	ldr	r2, [r7, #4]
   20cd0:	7812      	ldrb	r2, [r2, #0]
   20cd2:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   20cd4:	230e      	movs	r3, #14
   20cd6:	18fb      	adds	r3, r7, r3
   20cd8:	781b      	ldrb	r3, [r3, #0]
   20cda:	2b00      	cmp	r3, #0
   20cdc:	d004      	beq.n	20ce8 <nm_drv_init+0x34>
   20cde:	230e      	movs	r3, #14
   20ce0:	18fb      	adds	r3, r7, r3
   20ce2:	781b      	ldrb	r3, [r3, #0]
   20ce4:	2b04      	cmp	r3, #4
   20ce6:	d908      	bls.n	20cfa <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   20ce8:	230e      	movs	r3, #14
   20cea:	18fb      	adds	r3, r7, r3
   20cec:	2201      	movs	r2, #1
   20cee:	701a      	strb	r2, [r3, #0]
   20cf0:	e003      	b.n	20cfa <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   20cf2:	230e      	movs	r3, #14
   20cf4:	18fb      	adds	r3, r7, r3
   20cf6:	2201      	movs	r2, #1
   20cf8:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   20cfa:	230f      	movs	r3, #15
   20cfc:	18fc      	adds	r4, r7, r3
   20cfe:	2000      	movs	r0, #0
   20d00:	4b41      	ldr	r3, [pc, #260]	; (20e08 <nm_drv_init+0x154>)
   20d02:	4798      	blx	r3
   20d04:	0003      	movs	r3, r0
   20d06:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   20d08:	230f      	movs	r3, #15
   20d0a:	18fb      	adds	r3, r7, r3
   20d0c:	781b      	ldrb	r3, [r3, #0]
   20d0e:	b25b      	sxtb	r3, r3
   20d10:	2b00      	cmp	r3, #0
   20d12:	d00f      	beq.n	20d34 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   20d14:	2390      	movs	r3, #144	; 0x90
   20d16:	005a      	lsls	r2, r3, #1
   20d18:	493c      	ldr	r1, [pc, #240]	; (20e0c <nm_drv_init+0x158>)
   20d1a:	4b3d      	ldr	r3, [pc, #244]	; (20e10 <nm_drv_init+0x15c>)
   20d1c:	0018      	movs	r0, r3
   20d1e:	4b3d      	ldr	r3, [pc, #244]	; (20e14 <nm_drv_init+0x160>)
   20d20:	4798      	blx	r3
   20d22:	4b3d      	ldr	r3, [pc, #244]	; (20e18 <nm_drv_init+0x164>)
   20d24:	0018      	movs	r0, r3
   20d26:	4b3b      	ldr	r3, [pc, #236]	; (20e14 <nm_drv_init+0x160>)
   20d28:	4798      	blx	r3
   20d2a:	4b3c      	ldr	r3, [pc, #240]	; (20e1c <nm_drv_init+0x168>)
   20d2c:	0018      	movs	r0, r3
   20d2e:	4b39      	ldr	r3, [pc, #228]	; (20e14 <nm_drv_init+0x160>)
   20d30:	4798      	blx	r3
		goto ERR1;
   20d32:	e061      	b.n	20df8 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   20d34:	4b3a      	ldr	r3, [pc, #232]	; (20e20 <nm_drv_init+0x16c>)
   20d36:	0018      	movs	r0, r3
   20d38:	4b36      	ldr	r3, [pc, #216]	; (20e14 <nm_drv_init+0x160>)
   20d3a:	4798      	blx	r3
   20d3c:	4b39      	ldr	r3, [pc, #228]	; (20e24 <nm_drv_init+0x170>)
   20d3e:	4798      	blx	r3
   20d40:	0002      	movs	r2, r0
   20d42:	4b39      	ldr	r3, [pc, #228]	; (20e28 <nm_drv_init+0x174>)
   20d44:	0011      	movs	r1, r2
   20d46:	0018      	movs	r0, r3
   20d48:	4b32      	ldr	r3, [pc, #200]	; (20e14 <nm_drv_init+0x160>)
   20d4a:	4798      	blx	r3
   20d4c:	4b33      	ldr	r3, [pc, #204]	; (20e1c <nm_drv_init+0x168>)
   20d4e:	0018      	movs	r0, r3
   20d50:	4b30      	ldr	r3, [pc, #192]	; (20e14 <nm_drv_init+0x160>)
   20d52:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   20d54:	4b35      	ldr	r3, [pc, #212]	; (20e2c <nm_drv_init+0x178>)
   20d56:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   20d58:	230f      	movs	r3, #15
   20d5a:	18fc      	adds	r4, r7, r3
   20d5c:	230e      	movs	r3, #14
   20d5e:	18fb      	adds	r3, r7, r3
   20d60:	781b      	ldrb	r3, [r3, #0]
   20d62:	0018      	movs	r0, r3
   20d64:	4b32      	ldr	r3, [pc, #200]	; (20e30 <nm_drv_init+0x17c>)
   20d66:	4798      	blx	r3
   20d68:	0003      	movs	r3, r0
   20d6a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   20d6c:	230f      	movs	r3, #15
   20d6e:	18fb      	adds	r3, r7, r3
   20d70:	781b      	ldrb	r3, [r3, #0]
   20d72:	b25b      	sxtb	r3, r3
   20d74:	2b00      	cmp	r3, #0
   20d76:	d13a      	bne.n	20dee <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   20d78:	230f      	movs	r3, #15
   20d7a:	18fc      	adds	r4, r7, r3
   20d7c:	230e      	movs	r3, #14
   20d7e:	18fb      	adds	r3, r7, r3
   20d80:	781b      	ldrb	r3, [r3, #0]
   20d82:	0018      	movs	r0, r3
   20d84:	4b2b      	ldr	r3, [pc, #172]	; (20e34 <nm_drv_init+0x180>)
   20d86:	4798      	blx	r3
   20d88:	0003      	movs	r3, r0
   20d8a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   20d8c:	230f      	movs	r3, #15
   20d8e:	18fb      	adds	r3, r7, r3
   20d90:	781b      	ldrb	r3, [r3, #0]
   20d92:	b25b      	sxtb	r3, r3
   20d94:	2b00      	cmp	r3, #0
   20d96:	d12c      	bne.n	20df2 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   20d98:	230e      	movs	r3, #14
   20d9a:	18fb      	adds	r3, r7, r3
   20d9c:	781b      	ldrb	r3, [r3, #0]
   20d9e:	2b02      	cmp	r3, #2
   20da0:	d02a      	beq.n	20df8 <nm_drv_init+0x144>
   20da2:	230e      	movs	r3, #14
   20da4:	18fb      	adds	r3, r7, r3
   20da6:	781b      	ldrb	r3, [r3, #0]
   20da8:	2b03      	cmp	r3, #3
   20daa:	d025      	beq.n	20df8 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   20dac:	230f      	movs	r3, #15
   20dae:	18fc      	adds	r4, r7, r3
   20db0:	4b21      	ldr	r3, [pc, #132]	; (20e38 <nm_drv_init+0x184>)
   20db2:	4798      	blx	r3
   20db4:	0003      	movs	r3, r0
   20db6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   20db8:	230f      	movs	r3, #15
   20dba:	18fb      	adds	r3, r7, r3
   20dbc:	781b      	ldrb	r3, [r3, #0]
   20dbe:	b25b      	sxtb	r3, r3
   20dc0:	2b00      	cmp	r3, #0
   20dc2:	d00f      	beq.n	20de4 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   20dc4:	23a7      	movs	r3, #167	; 0xa7
   20dc6:	005a      	lsls	r2, r3, #1
   20dc8:	4910      	ldr	r1, [pc, #64]	; (20e0c <nm_drv_init+0x158>)
   20dca:	4b11      	ldr	r3, [pc, #68]	; (20e10 <nm_drv_init+0x15c>)
   20dcc:	0018      	movs	r0, r3
   20dce:	4b11      	ldr	r3, [pc, #68]	; (20e14 <nm_drv_init+0x160>)
   20dd0:	4798      	blx	r3
   20dd2:	4b1a      	ldr	r3, [pc, #104]	; (20e3c <nm_drv_init+0x188>)
   20dd4:	0018      	movs	r0, r3
   20dd6:	4b0f      	ldr	r3, [pc, #60]	; (20e14 <nm_drv_init+0x160>)
   20dd8:	4798      	blx	r3
   20dda:	4b10      	ldr	r3, [pc, #64]	; (20e1c <nm_drv_init+0x168>)
   20ddc:	0018      	movs	r0, r3
   20dde:	4b0d      	ldr	r3, [pc, #52]	; (20e14 <nm_drv_init+0x160>)
   20de0:	4798      	blx	r3
		goto ERR2;
   20de2:	e007      	b.n	20df4 <nm_drv_init+0x140>
	}
	return ret;
   20de4:	230f      	movs	r3, #15
   20de6:	18fb      	adds	r3, r7, r3
   20de8:	781b      	ldrb	r3, [r3, #0]
   20dea:	b25b      	sxtb	r3, r3
   20dec:	e008      	b.n	20e00 <nm_drv_init+0x14c>
		goto ERR2;
   20dee:	46c0      	nop			; (mov r8, r8)
   20df0:	e000      	b.n	20df4 <nm_drv_init+0x140>
		goto ERR2;
   20df2:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   20df4:	4b12      	ldr	r3, [pc, #72]	; (20e40 <nm_drv_init+0x18c>)
   20df6:	4798      	blx	r3
ERR1:
	return ret;
   20df8:	230f      	movs	r3, #15
   20dfa:	18fb      	adds	r3, r7, r3
   20dfc:	781b      	ldrb	r3, [r3, #0]
   20dfe:	b25b      	sxtb	r3, r3
}
   20e00:	0018      	movs	r0, r3
   20e02:	46bd      	mov	sp, r7
   20e04:	b005      	add	sp, #20
   20e06:	bd90      	pop	{r4, r7, pc}
   20e08:	00020815 	.word	0x00020815
   20e0c:	000360b0 	.word	0x000360b0
   20e10:	00035fe0 	.word	0x00035fe0
   20e14:	0001baed 	.word	0x0001baed
   20e18:	00035ff4 	.word	0x00035ff4
   20e1c:	00036010 	.word	0x00036010
   20e20:	00036014 	.word	0x00036014
   20e24:	000201b1 	.word	0x000201b1
   20e28:	00036020 	.word	0x00036020
   20e2c:	000226cd 	.word	0x000226cd
   20e30:	00020509 	.word	0x00020509
   20e34:	000206a1 	.word	0x000206a1
   20e38:	000200fd 	.word	0x000200fd
   20e3c:	00036030 	.word	0x00036030
   20e40:	00020849 	.word	0x00020849

00020e44 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   20e44:	b590      	push	{r4, r7, lr}
   20e46:	b085      	sub	sp, #20
   20e48:	af00      	add	r7, sp, #0
   20e4a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   20e4c:	230f      	movs	r3, #15
   20e4e:	18fc      	adds	r4, r7, r3
   20e50:	4b2e      	ldr	r3, [pc, #184]	; (20f0c <nm_drv_deinit+0xc8>)
   20e52:	4798      	blx	r3
   20e54:	0003      	movs	r3, r0
   20e56:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   20e58:	230f      	movs	r3, #15
   20e5a:	18fb      	adds	r3, r7, r3
   20e5c:	781b      	ldrb	r3, [r3, #0]
   20e5e:	b25b      	sxtb	r3, r3
   20e60:	2b00      	cmp	r3, #0
   20e62:	d010      	beq.n	20e86 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   20e64:	2366      	movs	r3, #102	; 0x66
   20e66:	33ff      	adds	r3, #255	; 0xff
   20e68:	001a      	movs	r2, r3
   20e6a:	4929      	ldr	r1, [pc, #164]	; (20f10 <nm_drv_deinit+0xcc>)
   20e6c:	4b29      	ldr	r3, [pc, #164]	; (20f14 <nm_drv_deinit+0xd0>)
   20e6e:	0018      	movs	r0, r3
   20e70:	4b29      	ldr	r3, [pc, #164]	; (20f18 <nm_drv_deinit+0xd4>)
   20e72:	4798      	blx	r3
   20e74:	4b29      	ldr	r3, [pc, #164]	; (20f1c <nm_drv_deinit+0xd8>)
   20e76:	0018      	movs	r0, r3
   20e78:	4b27      	ldr	r3, [pc, #156]	; (20f18 <nm_drv_deinit+0xd4>)
   20e7a:	4798      	blx	r3
   20e7c:	4b28      	ldr	r3, [pc, #160]	; (20f20 <nm_drv_deinit+0xdc>)
   20e7e:	0018      	movs	r0, r3
   20e80:	4b25      	ldr	r3, [pc, #148]	; (20f18 <nm_drv_deinit+0xd4>)
   20e82:	4798      	blx	r3
		goto ERR1;
   20e84:	e03a      	b.n	20efc <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   20e86:	230f      	movs	r3, #15
   20e88:	18fc      	adds	r4, r7, r3
   20e8a:	2000      	movs	r0, #0
   20e8c:	4b25      	ldr	r3, [pc, #148]	; (20f24 <nm_drv_deinit+0xe0>)
   20e8e:	4798      	blx	r3
   20e90:	0003      	movs	r3, r0
   20e92:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   20e94:	230f      	movs	r3, #15
   20e96:	18fb      	adds	r3, r7, r3
   20e98:	781b      	ldrb	r3, [r3, #0]
   20e9a:	b25b      	sxtb	r3, r3
   20e9c:	2b00      	cmp	r3, #0
   20e9e:	d00f      	beq.n	20ec0 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   20ea0:	23b6      	movs	r3, #182	; 0xb6
   20ea2:	005a      	lsls	r2, r3, #1
   20ea4:	491a      	ldr	r1, [pc, #104]	; (20f10 <nm_drv_deinit+0xcc>)
   20ea6:	4b1b      	ldr	r3, [pc, #108]	; (20f14 <nm_drv_deinit+0xd0>)
   20ea8:	0018      	movs	r0, r3
   20eaa:	4b1b      	ldr	r3, [pc, #108]	; (20f18 <nm_drv_deinit+0xd4>)
   20eac:	4798      	blx	r3
   20eae:	4b1e      	ldr	r3, [pc, #120]	; (20f28 <nm_drv_deinit+0xe4>)
   20eb0:	0018      	movs	r0, r3
   20eb2:	4b19      	ldr	r3, [pc, #100]	; (20f18 <nm_drv_deinit+0xd4>)
   20eb4:	4798      	blx	r3
   20eb6:	4b1a      	ldr	r3, [pc, #104]	; (20f20 <nm_drv_deinit+0xdc>)
   20eb8:	0018      	movs	r0, r3
   20eba:	4b17      	ldr	r3, [pc, #92]	; (20f18 <nm_drv_deinit+0xd4>)
   20ebc:	4798      	blx	r3
		goto ERR1;
   20ebe:	e01d      	b.n	20efc <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   20ec0:	230f      	movs	r3, #15
   20ec2:	18fc      	adds	r4, r7, r3
   20ec4:	4b19      	ldr	r3, [pc, #100]	; (20f2c <nm_drv_deinit+0xe8>)
   20ec6:	4798      	blx	r3
   20ec8:	0003      	movs	r3, r0
   20eca:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   20ecc:	230f      	movs	r3, #15
   20ece:	18fb      	adds	r3, r7, r3
   20ed0:	781b      	ldrb	r3, [r3, #0]
   20ed2:	b25b      	sxtb	r3, r3
   20ed4:	2b00      	cmp	r3, #0
   20ed6:	d00f      	beq.n	20ef8 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   20ed8:	23b9      	movs	r3, #185	; 0xb9
   20eda:	005a      	lsls	r2, r3, #1
   20edc:	490c      	ldr	r1, [pc, #48]	; (20f10 <nm_drv_deinit+0xcc>)
   20ede:	4b0d      	ldr	r3, [pc, #52]	; (20f14 <nm_drv_deinit+0xd0>)
   20ee0:	0018      	movs	r0, r3
   20ee2:	4b0d      	ldr	r3, [pc, #52]	; (20f18 <nm_drv_deinit+0xd4>)
   20ee4:	4798      	blx	r3
   20ee6:	4b12      	ldr	r3, [pc, #72]	; (20f30 <nm_drv_deinit+0xec>)
   20ee8:	0018      	movs	r0, r3
   20eea:	4b0b      	ldr	r3, [pc, #44]	; (20f18 <nm_drv_deinit+0xd4>)
   20eec:	4798      	blx	r3
   20eee:	4b0c      	ldr	r3, [pc, #48]	; (20f20 <nm_drv_deinit+0xdc>)
   20ef0:	0018      	movs	r0, r3
   20ef2:	4b09      	ldr	r3, [pc, #36]	; (20f18 <nm_drv_deinit+0xd4>)
   20ef4:	4798      	blx	r3
		goto ERR1;
   20ef6:	e001      	b.n	20efc <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   20ef8:	4b0e      	ldr	r3, [pc, #56]	; (20f34 <nm_drv_deinit+0xf0>)
   20efa:	4798      	blx	r3
#endif

ERR1:
	return ret;
   20efc:	230f      	movs	r3, #15
   20efe:	18fb      	adds	r3, r7, r3
   20f00:	781b      	ldrb	r3, [r3, #0]
   20f02:	b25b      	sxtb	r3, r3
}
   20f04:	0018      	movs	r0, r3
   20f06:	46bd      	mov	sp, r7
   20f08:	b005      	add	sp, #20
   20f0a:	bd90      	pop	{r4, r7, pc}
   20f0c:	00020755 	.word	0x00020755
   20f10:	000360bc 	.word	0x000360bc
   20f14:	00035fe0 	.word	0x00035fe0
   20f18:	0001baed 	.word	0x0001baed
   20f1c:	00036050 	.word	0x00036050
   20f20:	00036010 	.word	0x00036010
   20f24:	00023b75 	.word	0x00023b75
   20f28:	00036070 	.word	0x00036070
   20f2c:	00020849 	.word	0x00020849
   20f30:	00036094 	.word	0x00036094
   20f34:	00022819 	.word	0x00022819

00020f38 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   20f38:	b580      	push	{r7, lr}
   20f3a:	b086      	sub	sp, #24
   20f3c:	af00      	add	r7, sp, #0
   20f3e:	6078      	str	r0, [r7, #4]
   20f40:	000a      	movs	r2, r1
   20f42:	1cbb      	adds	r3, r7, #2
   20f44:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   20f46:	230c      	movs	r3, #12
   20f48:	18fb      	adds	r3, r7, r3
   20f4a:	2200      	movs	r2, #0
   20f4c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   20f4e:	230c      	movs	r3, #12
   20f50:	18fb      	adds	r3, r7, r3
   20f52:	687a      	ldr	r2, [r7, #4]
   20f54:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   20f56:	230c      	movs	r3, #12
   20f58:	18fb      	adds	r3, r7, r3
   20f5a:	1cba      	adds	r2, r7, #2
   20f5c:	8812      	ldrh	r2, [r2, #0]
   20f5e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   20f60:	230c      	movs	r3, #12
   20f62:	18fb      	adds	r3, r7, r3
   20f64:	0019      	movs	r1, r3
   20f66:	2003      	movs	r0, #3
   20f68:	4b03      	ldr	r3, [pc, #12]	; (20f78 <nmi_spi_read+0x40>)
   20f6a:	4798      	blx	r3
   20f6c:	0003      	movs	r3, r0
}
   20f6e:	0018      	movs	r0, r3
   20f70:	46bd      	mov	sp, r7
   20f72:	b006      	add	sp, #24
   20f74:	bd80      	pop	{r7, pc}
   20f76:	46c0      	nop			; (mov r8, r8)
   20f78:	0001e6e5 	.word	0x0001e6e5

00020f7c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   20f7c:	b580      	push	{r7, lr}
   20f7e:	b086      	sub	sp, #24
   20f80:	af00      	add	r7, sp, #0
   20f82:	6078      	str	r0, [r7, #4]
   20f84:	000a      	movs	r2, r1
   20f86:	1cbb      	adds	r3, r7, #2
   20f88:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   20f8a:	230c      	movs	r3, #12
   20f8c:	18fb      	adds	r3, r7, r3
   20f8e:	687a      	ldr	r2, [r7, #4]
   20f90:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   20f92:	230c      	movs	r3, #12
   20f94:	18fb      	adds	r3, r7, r3
   20f96:	2200      	movs	r2, #0
   20f98:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   20f9a:	230c      	movs	r3, #12
   20f9c:	18fb      	adds	r3, r7, r3
   20f9e:	1cba      	adds	r2, r7, #2
   20fa0:	8812      	ldrh	r2, [r2, #0]
   20fa2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   20fa4:	230c      	movs	r3, #12
   20fa6:	18fb      	adds	r3, r7, r3
   20fa8:	0019      	movs	r1, r3
   20faa:	2003      	movs	r0, #3
   20fac:	4b03      	ldr	r3, [pc, #12]	; (20fbc <nmi_spi_write+0x40>)
   20fae:	4798      	blx	r3
   20fb0:	0003      	movs	r3, r0
}
   20fb2:	0018      	movs	r0, r3
   20fb4:	46bd      	mov	sp, r7
   20fb6:	b006      	add	sp, #24
   20fb8:	bd80      	pop	{r7, pc}
   20fba:	46c0      	nop			; (mov r8, r8)
   20fbc:	0001e6e5 	.word	0x0001e6e5

00020fc0 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   20fc0:	b580      	push	{r7, lr}
   20fc2:	b088      	sub	sp, #32
   20fc4:	af00      	add	r7, sp, #0
   20fc6:	60f8      	str	r0, [r7, #12]
   20fc8:	60b9      	str	r1, [r7, #8]
   20fca:	1dbb      	adds	r3, r7, #6
   20fcc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   20fce:	2314      	movs	r3, #20
   20fd0:	18fb      	adds	r3, r7, r3
   20fd2:	68fa      	ldr	r2, [r7, #12]
   20fd4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   20fd6:	2314      	movs	r3, #20
   20fd8:	18fb      	adds	r3, r7, r3
   20fda:	68ba      	ldr	r2, [r7, #8]
   20fdc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   20fde:	2314      	movs	r3, #20
   20fe0:	18fb      	adds	r3, r7, r3
   20fe2:	1dba      	adds	r2, r7, #6
   20fe4:	8812      	ldrh	r2, [r2, #0]
   20fe6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   20fe8:	2314      	movs	r3, #20
   20fea:	18fb      	adds	r3, r7, r3
   20fec:	0019      	movs	r1, r3
   20fee:	2003      	movs	r0, #3
   20ff0:	4b03      	ldr	r3, [pc, #12]	; (21000 <nmi_spi_rw+0x40>)
   20ff2:	4798      	blx	r3
   20ff4:	0003      	movs	r3, r0
}
   20ff6:	0018      	movs	r0, r3
   20ff8:	46bd      	mov	sp, r7
   20ffa:	b008      	add	sp, #32
   20ffc:	bd80      	pop	{r7, pc}
   20ffe:	46c0      	nop			; (mov r8, r8)
   21000:	0001e6e5 	.word	0x0001e6e5

00021004 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   21004:	b580      	push	{r7, lr}
   21006:	b082      	sub	sp, #8
   21008:	af00      	add	r7, sp, #0
   2100a:	0002      	movs	r2, r0
   2100c:	1dfb      	adds	r3, r7, #7
   2100e:	701a      	strb	r2, [r3, #0]
   21010:	1dbb      	adds	r3, r7, #6
   21012:	1c0a      	adds	r2, r1, #0
   21014:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   21016:	1dfb      	adds	r3, r7, #7
   21018:	781b      	ldrb	r3, [r3, #0]
   2101a:	005a      	lsls	r2, r3, #1
   2101c:	1dbb      	adds	r3, r7, #6
   2101e:	781b      	ldrb	r3, [r3, #0]
   21020:	4053      	eors	r3, r2
   21022:	4a03      	ldr	r2, [pc, #12]	; (21030 <crc7_byte+0x2c>)
   21024:	5cd3      	ldrb	r3, [r2, r3]
}
   21026:	0018      	movs	r0, r3
   21028:	46bd      	mov	sp, r7
   2102a:	b002      	add	sp, #8
   2102c:	bd80      	pop	{r7, pc}
   2102e:	46c0      	nop			; (mov r8, r8)
   21030:	000360cc 	.word	0x000360cc

00021034 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   21034:	b590      	push	{r4, r7, lr}
   21036:	b085      	sub	sp, #20
   21038:	af00      	add	r7, sp, #0
   2103a:	60b9      	str	r1, [r7, #8]
   2103c:	607a      	str	r2, [r7, #4]
   2103e:	230f      	movs	r3, #15
   21040:	18fb      	adds	r3, r7, r3
   21042:	1c02      	adds	r2, r0, #0
   21044:	701a      	strb	r2, [r3, #0]
	while (len--)
   21046:	e00e      	b.n	21066 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   21048:	68bb      	ldr	r3, [r7, #8]
   2104a:	1c5a      	adds	r2, r3, #1
   2104c:	60ba      	str	r2, [r7, #8]
   2104e:	781a      	ldrb	r2, [r3, #0]
   21050:	230f      	movs	r3, #15
   21052:	18fc      	adds	r4, r7, r3
   21054:	230f      	movs	r3, #15
   21056:	18fb      	adds	r3, r7, r3
   21058:	781b      	ldrb	r3, [r3, #0]
   2105a:	0011      	movs	r1, r2
   2105c:	0018      	movs	r0, r3
   2105e:	4b08      	ldr	r3, [pc, #32]	; (21080 <crc7+0x4c>)
   21060:	4798      	blx	r3
   21062:	0003      	movs	r3, r0
   21064:	7023      	strb	r3, [r4, #0]
	while (len--)
   21066:	687b      	ldr	r3, [r7, #4]
   21068:	1e5a      	subs	r2, r3, #1
   2106a:	607a      	str	r2, [r7, #4]
   2106c:	2b00      	cmp	r3, #0
   2106e:	d1eb      	bne.n	21048 <crc7+0x14>
	return crc;
   21070:	230f      	movs	r3, #15
   21072:	18fb      	adds	r3, r7, r3
   21074:	781b      	ldrb	r3, [r3, #0]
}
   21076:	0018      	movs	r0, r3
   21078:	46bd      	mov	sp, r7
   2107a:	b005      	add	sp, #20
   2107c:	bd90      	pop	{r4, r7, pc}
   2107e:	46c0      	nop			; (mov r8, r8)
   21080:	00021005 	.word	0x00021005

00021084 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   21084:	b590      	push	{r4, r7, lr}
   21086:	b089      	sub	sp, #36	; 0x24
   21088:	af00      	add	r7, sp, #0
   2108a:	60b9      	str	r1, [r7, #8]
   2108c:	607a      	str	r2, [r7, #4]
   2108e:	603b      	str	r3, [r7, #0]
   21090:	230f      	movs	r3, #15
   21092:	18fb      	adds	r3, r7, r3
   21094:	1c02      	adds	r2, r0, #0
   21096:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   21098:	231f      	movs	r3, #31
   2109a:	18fb      	adds	r3, r7, r3
   2109c:	2205      	movs	r2, #5
   2109e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   210a0:	231e      	movs	r3, #30
   210a2:	18fb      	adds	r3, r7, r3
   210a4:	2201      	movs	r2, #1
   210a6:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   210a8:	2314      	movs	r3, #20
   210aa:	18fb      	adds	r3, r7, r3
   210ac:	220f      	movs	r2, #15
   210ae:	18ba      	adds	r2, r7, r2
   210b0:	7812      	ldrb	r2, [r2, #0]
   210b2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   210b4:	230f      	movs	r3, #15
   210b6:	18fb      	adds	r3, r7, r3
   210b8:	781b      	ldrb	r3, [r3, #0]
   210ba:	3bc1      	subs	r3, #193	; 0xc1
   210bc:	2b0e      	cmp	r3, #14
   210be:	d900      	bls.n	210c2 <spi_cmd+0x3e>
   210c0:	e11b      	b.n	212fa <spi_cmd+0x276>
   210c2:	009a      	lsls	r2, r3, #2
   210c4:	4bb6      	ldr	r3, [pc, #728]	; (213a0 <spi_cmd+0x31c>)
   210c6:	18d3      	adds	r3, r2, r3
   210c8:	681b      	ldr	r3, [r3, #0]
   210ca:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   210cc:	68bb      	ldr	r3, [r7, #8]
   210ce:	0c1b      	lsrs	r3, r3, #16
   210d0:	b2da      	uxtb	r2, r3
   210d2:	2314      	movs	r3, #20
   210d4:	18fb      	adds	r3, r7, r3
   210d6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   210d8:	68bb      	ldr	r3, [r7, #8]
   210da:	0a1b      	lsrs	r3, r3, #8
   210dc:	b2da      	uxtb	r2, r3
   210de:	2314      	movs	r3, #20
   210e0:	18fb      	adds	r3, r7, r3
   210e2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   210e4:	68bb      	ldr	r3, [r7, #8]
   210e6:	b2da      	uxtb	r2, r3
   210e8:	2314      	movs	r3, #20
   210ea:	18fb      	adds	r3, r7, r3
   210ec:	70da      	strb	r2, [r3, #3]
		len = 5;
   210ee:	231f      	movs	r3, #31
   210f0:	18fb      	adds	r3, r7, r3
   210f2:	2205      	movs	r2, #5
   210f4:	701a      	strb	r2, [r3, #0]
		break;
   210f6:	e105      	b.n	21304 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   210f8:	68bb      	ldr	r3, [r7, #8]
   210fa:	0a1b      	lsrs	r3, r3, #8
   210fc:	b2da      	uxtb	r2, r3
   210fe:	2314      	movs	r3, #20
   21100:	18fb      	adds	r3, r7, r3
   21102:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   21104:	2330      	movs	r3, #48	; 0x30
   21106:	18fb      	adds	r3, r7, r3
   21108:	781b      	ldrb	r3, [r3, #0]
   2110a:	2b00      	cmp	r3, #0
   2110c:	d009      	beq.n	21122 <spi_cmd+0x9e>
   2110e:	2314      	movs	r3, #20
   21110:	18fb      	adds	r3, r7, r3
   21112:	785b      	ldrb	r3, [r3, #1]
   21114:	2280      	movs	r2, #128	; 0x80
   21116:	4252      	negs	r2, r2
   21118:	4313      	orrs	r3, r2
   2111a:	b2da      	uxtb	r2, r3
   2111c:	2314      	movs	r3, #20
   2111e:	18fb      	adds	r3, r7, r3
   21120:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   21122:	68bb      	ldr	r3, [r7, #8]
   21124:	b2da      	uxtb	r2, r3
   21126:	2314      	movs	r3, #20
   21128:	18fb      	adds	r3, r7, r3
   2112a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2112c:	2314      	movs	r3, #20
   2112e:	18fb      	adds	r3, r7, r3
   21130:	2200      	movs	r2, #0
   21132:	70da      	strb	r2, [r3, #3]
		len = 5;
   21134:	231f      	movs	r3, #31
   21136:	18fb      	adds	r3, r7, r3
   21138:	2205      	movs	r2, #5
   2113a:	701a      	strb	r2, [r3, #0]
		break;
   2113c:	e0e2      	b.n	21304 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   2113e:	2314      	movs	r3, #20
   21140:	18fb      	adds	r3, r7, r3
   21142:	2200      	movs	r2, #0
   21144:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   21146:	2314      	movs	r3, #20
   21148:	18fb      	adds	r3, r7, r3
   2114a:	2200      	movs	r2, #0
   2114c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2114e:	2314      	movs	r3, #20
   21150:	18fb      	adds	r3, r7, r3
   21152:	2200      	movs	r2, #0
   21154:	70da      	strb	r2, [r3, #3]
		len = 5;
   21156:	231f      	movs	r3, #31
   21158:	18fb      	adds	r3, r7, r3
   2115a:	2205      	movs	r2, #5
   2115c:	701a      	strb	r2, [r3, #0]
		break;
   2115e:	e0d1      	b.n	21304 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   21160:	2314      	movs	r3, #20
   21162:	18fb      	adds	r3, r7, r3
   21164:	2200      	movs	r2, #0
   21166:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   21168:	2314      	movs	r3, #20
   2116a:	18fb      	adds	r3, r7, r3
   2116c:	2200      	movs	r2, #0
   2116e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   21170:	2314      	movs	r3, #20
   21172:	18fb      	adds	r3, r7, r3
   21174:	2200      	movs	r2, #0
   21176:	70da      	strb	r2, [r3, #3]
		len = 5;
   21178:	231f      	movs	r3, #31
   2117a:	18fb      	adds	r3, r7, r3
   2117c:	2205      	movs	r2, #5
   2117e:	701a      	strb	r2, [r3, #0]
		break;
   21180:	e0c0      	b.n	21304 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   21182:	2314      	movs	r3, #20
   21184:	18fb      	adds	r3, r7, r3
   21186:	22ff      	movs	r2, #255	; 0xff
   21188:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   2118a:	2314      	movs	r3, #20
   2118c:	18fb      	adds	r3, r7, r3
   2118e:	22ff      	movs	r2, #255	; 0xff
   21190:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   21192:	2314      	movs	r3, #20
   21194:	18fb      	adds	r3, r7, r3
   21196:	22ff      	movs	r2, #255	; 0xff
   21198:	70da      	strb	r2, [r3, #3]
		len = 5;
   2119a:	231f      	movs	r3, #31
   2119c:	18fb      	adds	r3, r7, r3
   2119e:	2205      	movs	r2, #5
   211a0:	701a      	strb	r2, [r3, #0]
		break;
   211a2:	e0af      	b.n	21304 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   211a4:	68bb      	ldr	r3, [r7, #8]
   211a6:	0c1b      	lsrs	r3, r3, #16
   211a8:	b2da      	uxtb	r2, r3
   211aa:	2314      	movs	r3, #20
   211ac:	18fb      	adds	r3, r7, r3
   211ae:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   211b0:	68bb      	ldr	r3, [r7, #8]
   211b2:	0a1b      	lsrs	r3, r3, #8
   211b4:	b2da      	uxtb	r2, r3
   211b6:	2314      	movs	r3, #20
   211b8:	18fb      	adds	r3, r7, r3
   211ba:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   211bc:	68bb      	ldr	r3, [r7, #8]
   211be:	b2da      	uxtb	r2, r3
   211c0:	2314      	movs	r3, #20
   211c2:	18fb      	adds	r3, r7, r3
   211c4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   211c6:	683b      	ldr	r3, [r7, #0]
   211c8:	0a1b      	lsrs	r3, r3, #8
   211ca:	b2da      	uxtb	r2, r3
   211cc:	2314      	movs	r3, #20
   211ce:	18fb      	adds	r3, r7, r3
   211d0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   211d2:	683b      	ldr	r3, [r7, #0]
   211d4:	b2da      	uxtb	r2, r3
   211d6:	2314      	movs	r3, #20
   211d8:	18fb      	adds	r3, r7, r3
   211da:	715a      	strb	r2, [r3, #5]
		len = 7;
   211dc:	231f      	movs	r3, #31
   211de:	18fb      	adds	r3, r7, r3
   211e0:	2207      	movs	r2, #7
   211e2:	701a      	strb	r2, [r3, #0]
		break;
   211e4:	e08e      	b.n	21304 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   211e6:	68bb      	ldr	r3, [r7, #8]
   211e8:	0c1b      	lsrs	r3, r3, #16
   211ea:	b2da      	uxtb	r2, r3
   211ec:	2314      	movs	r3, #20
   211ee:	18fb      	adds	r3, r7, r3
   211f0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   211f2:	68bb      	ldr	r3, [r7, #8]
   211f4:	0a1b      	lsrs	r3, r3, #8
   211f6:	b2da      	uxtb	r2, r3
   211f8:	2314      	movs	r3, #20
   211fa:	18fb      	adds	r3, r7, r3
   211fc:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   211fe:	68bb      	ldr	r3, [r7, #8]
   21200:	b2da      	uxtb	r2, r3
   21202:	2314      	movs	r3, #20
   21204:	18fb      	adds	r3, r7, r3
   21206:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   21208:	683b      	ldr	r3, [r7, #0]
   2120a:	0c1b      	lsrs	r3, r3, #16
   2120c:	b2da      	uxtb	r2, r3
   2120e:	2314      	movs	r3, #20
   21210:	18fb      	adds	r3, r7, r3
   21212:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   21214:	683b      	ldr	r3, [r7, #0]
   21216:	0a1b      	lsrs	r3, r3, #8
   21218:	b2da      	uxtb	r2, r3
   2121a:	2314      	movs	r3, #20
   2121c:	18fb      	adds	r3, r7, r3
   2121e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   21220:	683b      	ldr	r3, [r7, #0]
   21222:	b2da      	uxtb	r2, r3
   21224:	2314      	movs	r3, #20
   21226:	18fb      	adds	r3, r7, r3
   21228:	719a      	strb	r2, [r3, #6]
		len = 8;
   2122a:	231f      	movs	r3, #31
   2122c:	18fb      	adds	r3, r7, r3
   2122e:	2208      	movs	r2, #8
   21230:	701a      	strb	r2, [r3, #0]
		break;
   21232:	e067      	b.n	21304 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   21234:	68bb      	ldr	r3, [r7, #8]
   21236:	0a1b      	lsrs	r3, r3, #8
   21238:	b2da      	uxtb	r2, r3
   2123a:	2314      	movs	r3, #20
   2123c:	18fb      	adds	r3, r7, r3
   2123e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   21240:	2330      	movs	r3, #48	; 0x30
   21242:	18fb      	adds	r3, r7, r3
   21244:	781b      	ldrb	r3, [r3, #0]
   21246:	2b00      	cmp	r3, #0
   21248:	d009      	beq.n	2125e <spi_cmd+0x1da>
   2124a:	2314      	movs	r3, #20
   2124c:	18fb      	adds	r3, r7, r3
   2124e:	785b      	ldrb	r3, [r3, #1]
   21250:	2280      	movs	r2, #128	; 0x80
   21252:	4252      	negs	r2, r2
   21254:	4313      	orrs	r3, r2
   21256:	b2da      	uxtb	r2, r3
   21258:	2314      	movs	r3, #20
   2125a:	18fb      	adds	r3, r7, r3
   2125c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   2125e:	68bb      	ldr	r3, [r7, #8]
   21260:	b2da      	uxtb	r2, r3
   21262:	2314      	movs	r3, #20
   21264:	18fb      	adds	r3, r7, r3
   21266:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   21268:	687b      	ldr	r3, [r7, #4]
   2126a:	0e1b      	lsrs	r3, r3, #24
   2126c:	b2da      	uxtb	r2, r3
   2126e:	2314      	movs	r3, #20
   21270:	18fb      	adds	r3, r7, r3
   21272:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   21274:	687b      	ldr	r3, [r7, #4]
   21276:	0c1b      	lsrs	r3, r3, #16
   21278:	b2da      	uxtb	r2, r3
   2127a:	2314      	movs	r3, #20
   2127c:	18fb      	adds	r3, r7, r3
   2127e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   21280:	687b      	ldr	r3, [r7, #4]
   21282:	0a1b      	lsrs	r3, r3, #8
   21284:	b2da      	uxtb	r2, r3
   21286:	2314      	movs	r3, #20
   21288:	18fb      	adds	r3, r7, r3
   2128a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   2128c:	687b      	ldr	r3, [r7, #4]
   2128e:	b2da      	uxtb	r2, r3
   21290:	2314      	movs	r3, #20
   21292:	18fb      	adds	r3, r7, r3
   21294:	719a      	strb	r2, [r3, #6]
		len = 8;
   21296:	231f      	movs	r3, #31
   21298:	18fb      	adds	r3, r7, r3
   2129a:	2208      	movs	r2, #8
   2129c:	701a      	strb	r2, [r3, #0]
		break;
   2129e:	e031      	b.n	21304 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   212a0:	68bb      	ldr	r3, [r7, #8]
   212a2:	0c1b      	lsrs	r3, r3, #16
   212a4:	b2da      	uxtb	r2, r3
   212a6:	2314      	movs	r3, #20
   212a8:	18fb      	adds	r3, r7, r3
   212aa:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   212ac:	68bb      	ldr	r3, [r7, #8]
   212ae:	0a1b      	lsrs	r3, r3, #8
   212b0:	b2da      	uxtb	r2, r3
   212b2:	2314      	movs	r3, #20
   212b4:	18fb      	adds	r3, r7, r3
   212b6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   212b8:	68bb      	ldr	r3, [r7, #8]
   212ba:	b2da      	uxtb	r2, r3
   212bc:	2314      	movs	r3, #20
   212be:	18fb      	adds	r3, r7, r3
   212c0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   212c2:	687b      	ldr	r3, [r7, #4]
   212c4:	0e1b      	lsrs	r3, r3, #24
   212c6:	b2da      	uxtb	r2, r3
   212c8:	2314      	movs	r3, #20
   212ca:	18fb      	adds	r3, r7, r3
   212cc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   212ce:	687b      	ldr	r3, [r7, #4]
   212d0:	0c1b      	lsrs	r3, r3, #16
   212d2:	b2da      	uxtb	r2, r3
   212d4:	2314      	movs	r3, #20
   212d6:	18fb      	adds	r3, r7, r3
   212d8:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   212da:	687b      	ldr	r3, [r7, #4]
   212dc:	0a1b      	lsrs	r3, r3, #8
   212de:	b2da      	uxtb	r2, r3
   212e0:	2314      	movs	r3, #20
   212e2:	18fb      	adds	r3, r7, r3
   212e4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   212e6:	687b      	ldr	r3, [r7, #4]
   212e8:	b2da      	uxtb	r2, r3
   212ea:	2314      	movs	r3, #20
   212ec:	18fb      	adds	r3, r7, r3
   212ee:	71da      	strb	r2, [r3, #7]
		len = 9;
   212f0:	231f      	movs	r3, #31
   212f2:	18fb      	adds	r3, r7, r3
   212f4:	2209      	movs	r2, #9
   212f6:	701a      	strb	r2, [r3, #0]
		break;
   212f8:	e004      	b.n	21304 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   212fa:	231e      	movs	r3, #30
   212fc:	18fb      	adds	r3, r7, r3
   212fe:	2200      	movs	r2, #0
   21300:	701a      	strb	r2, [r3, #0]
		break;
   21302:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   21304:	231e      	movs	r3, #30
   21306:	18fb      	adds	r3, r7, r3
   21308:	781b      	ldrb	r3, [r3, #0]
   2130a:	b25b      	sxtb	r3, r3
   2130c:	2b00      	cmp	r3, #0
   2130e:	d03f      	beq.n	21390 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   21310:	4b24      	ldr	r3, [pc, #144]	; (213a4 <spi_cmd+0x320>)
   21312:	781b      	ldrb	r3, [r3, #0]
   21314:	2b00      	cmp	r3, #0
   21316:	d115      	bne.n	21344 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   21318:	231f      	movs	r3, #31
   2131a:	18fb      	adds	r3, r7, r3
   2131c:	781b      	ldrb	r3, [r3, #0]
   2131e:	1e5c      	subs	r4, r3, #1
   21320:	231f      	movs	r3, #31
   21322:	18fb      	adds	r3, r7, r3
   21324:	781b      	ldrb	r3, [r3, #0]
   21326:	3b01      	subs	r3, #1
   21328:	001a      	movs	r2, r3
   2132a:	2314      	movs	r3, #20
   2132c:	18fb      	adds	r3, r7, r3
   2132e:	0019      	movs	r1, r3
   21330:	207f      	movs	r0, #127	; 0x7f
   21332:	4b1d      	ldr	r3, [pc, #116]	; (213a8 <spi_cmd+0x324>)
   21334:	4798      	blx	r3
   21336:	0003      	movs	r3, r0
   21338:	18db      	adds	r3, r3, r3
   2133a:	b2da      	uxtb	r2, r3
   2133c:	2314      	movs	r3, #20
   2133e:	18fb      	adds	r3, r7, r3
   21340:	551a      	strb	r2, [r3, r4]
   21342:	e006      	b.n	21352 <spi_cmd+0x2ce>
		else
			len-=1;
   21344:	231f      	movs	r3, #31
   21346:	18fb      	adds	r3, r7, r3
   21348:	221f      	movs	r2, #31
   2134a:	18ba      	adds	r2, r7, r2
   2134c:	7812      	ldrb	r2, [r2, #0]
   2134e:	3a01      	subs	r2, #1
   21350:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   21352:	231f      	movs	r3, #31
   21354:	18fb      	adds	r3, r7, r3
   21356:	781b      	ldrb	r3, [r3, #0]
   21358:	b29a      	uxth	r2, r3
   2135a:	2314      	movs	r3, #20
   2135c:	18fb      	adds	r3, r7, r3
   2135e:	0011      	movs	r1, r2
   21360:	0018      	movs	r0, r3
   21362:	4b12      	ldr	r3, [pc, #72]	; (213ac <spi_cmd+0x328>)
   21364:	4798      	blx	r3
   21366:	1e03      	subs	r3, r0, #0
   21368:	d012      	beq.n	21390 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2136a:	2390      	movs	r3, #144	; 0x90
   2136c:	005a      	lsls	r2, r3, #1
   2136e:	4910      	ldr	r1, [pc, #64]	; (213b0 <spi_cmd+0x32c>)
   21370:	4b10      	ldr	r3, [pc, #64]	; (213b4 <spi_cmd+0x330>)
   21372:	0018      	movs	r0, r3
   21374:	4b10      	ldr	r3, [pc, #64]	; (213b8 <spi_cmd+0x334>)
   21376:	4798      	blx	r3
   21378:	4b10      	ldr	r3, [pc, #64]	; (213bc <spi_cmd+0x338>)
   2137a:	0018      	movs	r0, r3
   2137c:	4b0e      	ldr	r3, [pc, #56]	; (213b8 <spi_cmd+0x334>)
   2137e:	4798      	blx	r3
   21380:	4b0f      	ldr	r3, [pc, #60]	; (213c0 <spi_cmd+0x33c>)
   21382:	0018      	movs	r0, r3
   21384:	4b0c      	ldr	r3, [pc, #48]	; (213b8 <spi_cmd+0x334>)
   21386:	4798      	blx	r3
			result = N_FAIL;
   21388:	231e      	movs	r3, #30
   2138a:	18fb      	adds	r3, r7, r3
   2138c:	2200      	movs	r2, #0
   2138e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   21390:	231e      	movs	r3, #30
   21392:	18fb      	adds	r3, r7, r3
   21394:	781b      	ldrb	r3, [r3, #0]
   21396:	b25b      	sxtb	r3, r3
}
   21398:	0018      	movs	r0, r3
   2139a:	46bd      	mov	sp, r7
   2139c:	b009      	add	sp, #36	; 0x24
   2139e:	bd90      	pop	{r4, r7, pc}
   213a0:	00036744 	.word	0x00036744
   213a4:	20003d08 	.word	0x20003d08
   213a8:	00021035 	.word	0x00021035
   213ac:	00020f7d 	.word	0x00020f7d
   213b0:	000367bc 	.word	0x000367bc
   213b4:	000361cc 	.word	0x000361cc
   213b8:	0001baed 	.word	0x0001baed
   213bc:	000361e0 	.word	0x000361e0
   213c0:	0003620c 	.word	0x0003620c

000213c4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   213c4:	b590      	push	{r4, r7, lr}
   213c6:	b085      	sub	sp, #20
   213c8:	af00      	add	r7, sp, #0
   213ca:	0002      	movs	r2, r0
   213cc:	1dfb      	adds	r3, r7, #7
   213ce:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   213d0:	230e      	movs	r3, #14
   213d2:	18fb      	adds	r3, r7, r3
   213d4:	2201      	movs	r2, #1
   213d6:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   213d8:	4b32      	ldr	r3, [pc, #200]	; (214a4 <spi_data_rsp+0xe0>)
   213da:	781b      	ldrb	r3, [r3, #0]
   213dc:	2b00      	cmp	r3, #0
   213de:	d104      	bne.n	213ea <spi_data_rsp+0x26>
		len = 2;
   213e0:	230f      	movs	r3, #15
   213e2:	18fb      	adds	r3, r7, r3
   213e4:	2202      	movs	r2, #2
   213e6:	701a      	strb	r2, [r3, #0]
   213e8:	e003      	b.n	213f2 <spi_data_rsp+0x2e>
	else
		len = 3;
   213ea:	230f      	movs	r3, #15
   213ec:	18fb      	adds	r3, r7, r3
   213ee:	2203      	movs	r2, #3
   213f0:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   213f2:	230f      	movs	r3, #15
   213f4:	18fb      	adds	r3, r7, r3
   213f6:	781b      	ldrb	r3, [r3, #0]
   213f8:	b29a      	uxth	r2, r3
   213fa:	2308      	movs	r3, #8
   213fc:	18fb      	adds	r3, r7, r3
   213fe:	0011      	movs	r1, r2
   21400:	0018      	movs	r0, r3
   21402:	4b29      	ldr	r3, [pc, #164]	; (214a8 <spi_data_rsp+0xe4>)
   21404:	4798      	blx	r3
   21406:	1e03      	subs	r3, r0, #0
   21408:	d013      	beq.n	21432 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   2140a:	239a      	movs	r3, #154	; 0x9a
   2140c:	005a      	lsls	r2, r3, #1
   2140e:	4927      	ldr	r1, [pc, #156]	; (214ac <spi_data_rsp+0xe8>)
   21410:	4b27      	ldr	r3, [pc, #156]	; (214b0 <spi_data_rsp+0xec>)
   21412:	0018      	movs	r0, r3
   21414:	4b27      	ldr	r3, [pc, #156]	; (214b4 <spi_data_rsp+0xf0>)
   21416:	4798      	blx	r3
   21418:	4b27      	ldr	r3, [pc, #156]	; (214b8 <spi_data_rsp+0xf4>)
   2141a:	0018      	movs	r0, r3
   2141c:	4b25      	ldr	r3, [pc, #148]	; (214b4 <spi_data_rsp+0xf0>)
   2141e:	4798      	blx	r3
   21420:	4b26      	ldr	r3, [pc, #152]	; (214bc <spi_data_rsp+0xf8>)
   21422:	0018      	movs	r0, r3
   21424:	4b23      	ldr	r3, [pc, #140]	; (214b4 <spi_data_rsp+0xf0>)
   21426:	4798      	blx	r3
		result = N_FAIL;
   21428:	230e      	movs	r3, #14
   2142a:	18fb      	adds	r3, r7, r3
   2142c:	2200      	movs	r2, #0
   2142e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   21430:	e030      	b.n	21494 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   21432:	230f      	movs	r3, #15
   21434:	18fb      	adds	r3, r7, r3
   21436:	781b      	ldrb	r3, [r3, #0]
   21438:	3b01      	subs	r3, #1
   2143a:	2208      	movs	r2, #8
   2143c:	18ba      	adds	r2, r7, r2
   2143e:	5cd3      	ldrb	r3, [r2, r3]
   21440:	2b00      	cmp	r3, #0
   21442:	d108      	bne.n	21456 <spi_data_rsp+0x92>
   21444:	230f      	movs	r3, #15
   21446:	18fb      	adds	r3, r7, r3
   21448:	781b      	ldrb	r3, [r3, #0]
   2144a:	3b02      	subs	r3, #2
   2144c:	2208      	movs	r2, #8
   2144e:	18ba      	adds	r2, r7, r2
   21450:	5cd3      	ldrb	r3, [r2, r3]
   21452:	2bc3      	cmp	r3, #195	; 0xc3
   21454:	d01e      	beq.n	21494 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   21456:	233c      	movs	r3, #60	; 0x3c
   21458:	33ff      	adds	r3, #255	; 0xff
   2145a:	001a      	movs	r2, r3
   2145c:	4913      	ldr	r1, [pc, #76]	; (214ac <spi_data_rsp+0xe8>)
   2145e:	4b14      	ldr	r3, [pc, #80]	; (214b0 <spi_data_rsp+0xec>)
   21460:	0018      	movs	r0, r3
   21462:	4b14      	ldr	r3, [pc, #80]	; (214b4 <spi_data_rsp+0xf0>)
   21464:	4798      	blx	r3
   21466:	2308      	movs	r3, #8
   21468:	18fb      	adds	r3, r7, r3
   2146a:	781b      	ldrb	r3, [r3, #0]
   2146c:	0019      	movs	r1, r3
   2146e:	2308      	movs	r3, #8
   21470:	18fb      	adds	r3, r7, r3
   21472:	785b      	ldrb	r3, [r3, #1]
   21474:	001a      	movs	r2, r3
   21476:	2308      	movs	r3, #8
   21478:	18fb      	adds	r3, r7, r3
   2147a:	789b      	ldrb	r3, [r3, #2]
   2147c:	4810      	ldr	r0, [pc, #64]	; (214c0 <spi_data_rsp+0xfc>)
   2147e:	4c0d      	ldr	r4, [pc, #52]	; (214b4 <spi_data_rsp+0xf0>)
   21480:	47a0      	blx	r4
   21482:	4b0e      	ldr	r3, [pc, #56]	; (214bc <spi_data_rsp+0xf8>)
   21484:	0018      	movs	r0, r3
   21486:	4b0b      	ldr	r3, [pc, #44]	; (214b4 <spi_data_rsp+0xf0>)
   21488:	4798      	blx	r3
		result = N_FAIL;
   2148a:	230e      	movs	r3, #14
   2148c:	18fb      	adds	r3, r7, r3
   2148e:	2200      	movs	r2, #0
   21490:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   21492:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   21494:	230e      	movs	r3, #14
   21496:	18fb      	adds	r3, r7, r3
   21498:	781b      	ldrb	r3, [r3, #0]
   2149a:	b25b      	sxtb	r3, r3
}
   2149c:	0018      	movs	r0, r3
   2149e:	46bd      	mov	sp, r7
   214a0:	b005      	add	sp, #20
   214a2:	bd90      	pop	{r4, r7, pc}
   214a4:	20003d08 	.word	0x20003d08
   214a8:	00020f39 	.word	0x00020f39
   214ac:	000367c4 	.word	0x000367c4
   214b0:	000361cc 	.word	0x000361cc
   214b4:	0001baed 	.word	0x0001baed
   214b8:	00036210 	.word	0x00036210
   214bc:	0003620c 	.word	0x0003620c
   214c0:	00036230 	.word	0x00036230

000214c4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   214c4:	b580      	push	{r7, lr}
   214c6:	b084      	sub	sp, #16
   214c8:	af00      	add	r7, sp, #0
   214ca:	0002      	movs	r2, r0
   214cc:	1dfb      	adds	r3, r7, #7
   214ce:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   214d0:	230f      	movs	r3, #15
   214d2:	18fb      	adds	r3, r7, r3
   214d4:	2201      	movs	r2, #1
   214d6:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   214d8:	1dfb      	adds	r3, r7, #7
   214da:	781b      	ldrb	r3, [r3, #0]
   214dc:	2bcf      	cmp	r3, #207	; 0xcf
   214de:	d007      	beq.n	214f0 <spi_cmd_rsp+0x2c>
   214e0:	1dfb      	adds	r3, r7, #7
   214e2:	781b      	ldrb	r3, [r3, #0]
   214e4:	2bc5      	cmp	r3, #197	; 0xc5
   214e6:	d003      	beq.n	214f0 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   214e8:	1dfb      	adds	r3, r7, #7
   214ea:	781b      	ldrb	r3, [r3, #0]
   214ec:	2bc6      	cmp	r3, #198	; 0xc6
   214ee:	d10c      	bne.n	2150a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   214f0:	230d      	movs	r3, #13
   214f2:	18fb      	adds	r3, r7, r3
   214f4:	2101      	movs	r1, #1
   214f6:	0018      	movs	r0, r3
   214f8:	4b3b      	ldr	r3, [pc, #236]	; (215e8 <spi_cmd_rsp+0x124>)
   214fa:	4798      	blx	r3
   214fc:	1e03      	subs	r3, r0, #0
   214fe:	d004      	beq.n	2150a <spi_cmd_rsp+0x46>
			result = N_FAIL;
   21500:	230f      	movs	r3, #15
   21502:	18fb      	adds	r3, r7, r3
   21504:	2200      	movs	r2, #0
   21506:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   21508:	e065      	b.n	215d6 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2150a:	230e      	movs	r3, #14
   2150c:	18fb      	adds	r3, r7, r3
   2150e:	220a      	movs	r2, #10
   21510:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   21512:	230d      	movs	r3, #13
   21514:	18fb      	adds	r3, r7, r3
   21516:	2101      	movs	r1, #1
   21518:	0018      	movs	r0, r3
   2151a:	4b33      	ldr	r3, [pc, #204]	; (215e8 <spi_cmd_rsp+0x124>)
   2151c:	4798      	blx	r3
   2151e:	1e03      	subs	r3, r0, #0
   21520:	d014      	beq.n	2154c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   21522:	235c      	movs	r3, #92	; 0x5c
   21524:	33ff      	adds	r3, #255	; 0xff
   21526:	001a      	movs	r2, r3
   21528:	4930      	ldr	r1, [pc, #192]	; (215ec <spi_cmd_rsp+0x128>)
   2152a:	4b31      	ldr	r3, [pc, #196]	; (215f0 <spi_cmd_rsp+0x12c>)
   2152c:	0018      	movs	r0, r3
   2152e:	4b31      	ldr	r3, [pc, #196]	; (215f4 <spi_cmd_rsp+0x130>)
   21530:	4798      	blx	r3
   21532:	4b31      	ldr	r3, [pc, #196]	; (215f8 <spi_cmd_rsp+0x134>)
   21534:	0018      	movs	r0, r3
   21536:	4b2f      	ldr	r3, [pc, #188]	; (215f4 <spi_cmd_rsp+0x130>)
   21538:	4798      	blx	r3
   2153a:	4b30      	ldr	r3, [pc, #192]	; (215fc <spi_cmd_rsp+0x138>)
   2153c:	0018      	movs	r0, r3
   2153e:	4b2d      	ldr	r3, [pc, #180]	; (215f4 <spi_cmd_rsp+0x130>)
   21540:	4798      	blx	r3
			result = N_FAIL;
   21542:	230f      	movs	r3, #15
   21544:	18fb      	adds	r3, r7, r3
   21546:	2200      	movs	r2, #0
   21548:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2154a:	e044      	b.n	215d6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   2154c:	230d      	movs	r3, #13
   2154e:	18fb      	adds	r3, r7, r3
   21550:	781b      	ldrb	r3, [r3, #0]
   21552:	1dfa      	adds	r2, r7, #7
   21554:	7812      	ldrb	r2, [r2, #0]
   21556:	429a      	cmp	r2, r3
   21558:	d00b      	beq.n	21572 <spi_cmd_rsp+0xae>
   2155a:	230e      	movs	r3, #14
   2155c:	18fb      	adds	r3, r7, r3
   2155e:	781b      	ldrb	r3, [r3, #0]
   21560:	b25b      	sxtb	r3, r3
   21562:	b2da      	uxtb	r2, r3
   21564:	3a01      	subs	r2, #1
   21566:	b2d1      	uxtb	r1, r2
   21568:	220e      	movs	r2, #14
   2156a:	18ba      	adds	r2, r7, r2
   2156c:	7011      	strb	r1, [r2, #0]
   2156e:	2b00      	cmp	r3, #0
   21570:	dccf      	bgt.n	21512 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   21572:	230e      	movs	r3, #14
   21574:	18fb      	adds	r3, r7, r3
   21576:	220a      	movs	r2, #10
   21578:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2157a:	230d      	movs	r3, #13
   2157c:	18fb      	adds	r3, r7, r3
   2157e:	2101      	movs	r1, #1
   21580:	0018      	movs	r0, r3
   21582:	4b19      	ldr	r3, [pc, #100]	; (215e8 <spi_cmd_rsp+0x124>)
   21584:	4798      	blx	r3
   21586:	1e03      	subs	r3, r0, #0
   21588:	d014      	beq.n	215b4 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2158a:	236a      	movs	r3, #106	; 0x6a
   2158c:	33ff      	adds	r3, #255	; 0xff
   2158e:	001a      	movs	r2, r3
   21590:	4916      	ldr	r1, [pc, #88]	; (215ec <spi_cmd_rsp+0x128>)
   21592:	4b17      	ldr	r3, [pc, #92]	; (215f0 <spi_cmd_rsp+0x12c>)
   21594:	0018      	movs	r0, r3
   21596:	4b17      	ldr	r3, [pc, #92]	; (215f4 <spi_cmd_rsp+0x130>)
   21598:	4798      	blx	r3
   2159a:	4b17      	ldr	r3, [pc, #92]	; (215f8 <spi_cmd_rsp+0x134>)
   2159c:	0018      	movs	r0, r3
   2159e:	4b15      	ldr	r3, [pc, #84]	; (215f4 <spi_cmd_rsp+0x130>)
   215a0:	4798      	blx	r3
   215a2:	4b16      	ldr	r3, [pc, #88]	; (215fc <spi_cmd_rsp+0x138>)
   215a4:	0018      	movs	r0, r3
   215a6:	4b13      	ldr	r3, [pc, #76]	; (215f4 <spi_cmd_rsp+0x130>)
   215a8:	4798      	blx	r3
			result = N_FAIL;
   215aa:	230f      	movs	r3, #15
   215ac:	18fb      	adds	r3, r7, r3
   215ae:	2200      	movs	r2, #0
   215b0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   215b2:	e010      	b.n	215d6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   215b4:	230d      	movs	r3, #13
   215b6:	18fb      	adds	r3, r7, r3
   215b8:	781b      	ldrb	r3, [r3, #0]
   215ba:	2b00      	cmp	r3, #0
   215bc:	d00b      	beq.n	215d6 <spi_cmd_rsp+0x112>
   215be:	230e      	movs	r3, #14
   215c0:	18fb      	adds	r3, r7, r3
   215c2:	781b      	ldrb	r3, [r3, #0]
   215c4:	b25b      	sxtb	r3, r3
   215c6:	b2da      	uxtb	r2, r3
   215c8:	3a01      	subs	r2, #1
   215ca:	b2d1      	uxtb	r1, r2
   215cc:	220e      	movs	r2, #14
   215ce:	18ba      	adds	r2, r7, r2
   215d0:	7011      	strb	r1, [r2, #0]
   215d2:	2b00      	cmp	r3, #0
   215d4:	dcd1      	bgt.n	2157a <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   215d6:	230f      	movs	r3, #15
   215d8:	18fb      	adds	r3, r7, r3
   215da:	781b      	ldrb	r3, [r3, #0]
   215dc:	b25b      	sxtb	r3, r3
}
   215de:	0018      	movs	r0, r3
   215e0:	46bd      	mov	sp, r7
   215e2:	b004      	add	sp, #16
   215e4:	bd80      	pop	{r7, pc}
   215e6:	46c0      	nop			; (mov r8, r8)
   215e8:	00020f39 	.word	0x00020f39
   215ec:	000367d4 	.word	0x000367d4
   215f0:	000361cc 	.word	0x000361cc
   215f4:	0001baed 	.word	0x0001baed
   215f8:	00036260 	.word	0x00036260
   215fc:	0003620c 	.word	0x0003620c

00021600 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   21600:	b590      	push	{r4, r7, lr}
   21602:	b09f      	sub	sp, #124	; 0x7c
   21604:	af00      	add	r7, sp, #0
   21606:	60b9      	str	r1, [r7, #8]
   21608:	607a      	str	r2, [r7, #4]
   2160a:	603b      	str	r3, [r7, #0]
   2160c:	230f      	movs	r3, #15
   2160e:	18fb      	adds	r3, r7, r3
   21610:	1c02      	adds	r2, r0, #0
   21612:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   21614:	2300      	movs	r3, #0
   21616:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   21618:	2301      	movs	r3, #1
   2161a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   2161c:	2338      	movs	r3, #56	; 0x38
   2161e:	18fb      	adds	r3, r7, r3
   21620:	220f      	movs	r2, #15
   21622:	18ba      	adds	r2, r7, r2
   21624:	7812      	ldrb	r2, [r2, #0]
   21626:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   21628:	230f      	movs	r3, #15
   2162a:	18fb      	adds	r3, r7, r3
   2162c:	781b      	ldrb	r3, [r3, #0]
   2162e:	3bc1      	subs	r3, #193	; 0xc1
   21630:	2b0e      	cmp	r3, #14
   21632:	d900      	bls.n	21636 <spi_cmd_complete+0x36>
   21634:	e103      	b.n	2183e <spi_cmd_complete+0x23e>
   21636:	009a      	lsls	r2, r3, #2
   21638:	4bd1      	ldr	r3, [pc, #836]	; (21980 <spi_cmd_complete+0x380>)
   2163a:	18d3      	adds	r3, r2, r3
   2163c:	681b      	ldr	r3, [r3, #0]
   2163e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   21640:	68bb      	ldr	r3, [r7, #8]
   21642:	0c1b      	lsrs	r3, r3, #16
   21644:	b2da      	uxtb	r2, r3
   21646:	2338      	movs	r3, #56	; 0x38
   21648:	18fb      	adds	r3, r7, r3
   2164a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2164c:	68bb      	ldr	r3, [r7, #8]
   2164e:	0a1b      	lsrs	r3, r3, #8
   21650:	b2da      	uxtb	r2, r3
   21652:	2338      	movs	r3, #56	; 0x38
   21654:	18fb      	adds	r3, r7, r3
   21656:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   21658:	68bb      	ldr	r3, [r7, #8]
   2165a:	b2da      	uxtb	r2, r3
   2165c:	2338      	movs	r3, #56	; 0x38
   2165e:	18fb      	adds	r3, r7, r3
   21660:	70da      	strb	r2, [r3, #3]
		len = 5;
   21662:	2305      	movs	r3, #5
   21664:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   21666:	e0ed      	b.n	21844 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   21668:	68bb      	ldr	r3, [r7, #8]
   2166a:	0a1b      	lsrs	r3, r3, #8
   2166c:	b2da      	uxtb	r2, r3
   2166e:	2338      	movs	r3, #56	; 0x38
   21670:	18fb      	adds	r3, r7, r3
   21672:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   21674:	2388      	movs	r3, #136	; 0x88
   21676:	18fb      	adds	r3, r7, r3
   21678:	781b      	ldrb	r3, [r3, #0]
   2167a:	2b01      	cmp	r3, #1
   2167c:	d109      	bne.n	21692 <spi_cmd_complete+0x92>
   2167e:	2338      	movs	r3, #56	; 0x38
   21680:	18fb      	adds	r3, r7, r3
   21682:	785b      	ldrb	r3, [r3, #1]
   21684:	2280      	movs	r2, #128	; 0x80
   21686:	4252      	negs	r2, r2
   21688:	4313      	orrs	r3, r2
   2168a:	b2da      	uxtb	r2, r3
   2168c:	2338      	movs	r3, #56	; 0x38
   2168e:	18fb      	adds	r3, r7, r3
   21690:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   21692:	68bb      	ldr	r3, [r7, #8]
   21694:	b2da      	uxtb	r2, r3
   21696:	2338      	movs	r3, #56	; 0x38
   21698:	18fb      	adds	r3, r7, r3
   2169a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2169c:	2338      	movs	r3, #56	; 0x38
   2169e:	18fb      	adds	r3, r7, r3
   216a0:	2200      	movs	r2, #0
   216a2:	70da      	strb	r2, [r3, #3]
		len = 5;
   216a4:	2305      	movs	r3, #5
   216a6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   216a8:	e0cc      	b.n	21844 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   216aa:	2338      	movs	r3, #56	; 0x38
   216ac:	18fb      	adds	r3, r7, r3
   216ae:	2200      	movs	r2, #0
   216b0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   216b2:	2338      	movs	r3, #56	; 0x38
   216b4:	18fb      	adds	r3, r7, r3
   216b6:	2200      	movs	r2, #0
   216b8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   216ba:	2338      	movs	r3, #56	; 0x38
   216bc:	18fb      	adds	r3, r7, r3
   216be:	2200      	movs	r2, #0
   216c0:	70da      	strb	r2, [r3, #3]
		len = 5;
   216c2:	2305      	movs	r3, #5
   216c4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   216c6:	e0bd      	b.n	21844 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   216c8:	2338      	movs	r3, #56	; 0x38
   216ca:	18fb      	adds	r3, r7, r3
   216cc:	2200      	movs	r2, #0
   216ce:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   216d0:	2338      	movs	r3, #56	; 0x38
   216d2:	18fb      	adds	r3, r7, r3
   216d4:	2200      	movs	r2, #0
   216d6:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   216d8:	2338      	movs	r3, #56	; 0x38
   216da:	18fb      	adds	r3, r7, r3
   216dc:	2200      	movs	r2, #0
   216de:	70da      	strb	r2, [r3, #3]
		len = 5;
   216e0:	2305      	movs	r3, #5
   216e2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   216e4:	e0ae      	b.n	21844 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   216e6:	2338      	movs	r3, #56	; 0x38
   216e8:	18fb      	adds	r3, r7, r3
   216ea:	22ff      	movs	r2, #255	; 0xff
   216ec:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   216ee:	2338      	movs	r3, #56	; 0x38
   216f0:	18fb      	adds	r3, r7, r3
   216f2:	22ff      	movs	r2, #255	; 0xff
   216f4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   216f6:	2338      	movs	r3, #56	; 0x38
   216f8:	18fb      	adds	r3, r7, r3
   216fa:	22ff      	movs	r2, #255	; 0xff
   216fc:	70da      	strb	r2, [r3, #3]
		len = 5;
   216fe:	2305      	movs	r3, #5
   21700:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   21702:	e09f      	b.n	21844 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   21704:	68bb      	ldr	r3, [r7, #8]
   21706:	0c1b      	lsrs	r3, r3, #16
   21708:	b2da      	uxtb	r2, r3
   2170a:	2338      	movs	r3, #56	; 0x38
   2170c:	18fb      	adds	r3, r7, r3
   2170e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   21710:	68bb      	ldr	r3, [r7, #8]
   21712:	0a1b      	lsrs	r3, r3, #8
   21714:	b2da      	uxtb	r2, r3
   21716:	2338      	movs	r3, #56	; 0x38
   21718:	18fb      	adds	r3, r7, r3
   2171a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2171c:	68bb      	ldr	r3, [r7, #8]
   2171e:	b2da      	uxtb	r2, r3
   21720:	2338      	movs	r3, #56	; 0x38
   21722:	18fb      	adds	r3, r7, r3
   21724:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   21726:	683b      	ldr	r3, [r7, #0]
   21728:	0a1b      	lsrs	r3, r3, #8
   2172a:	b2da      	uxtb	r2, r3
   2172c:	2338      	movs	r3, #56	; 0x38
   2172e:	18fb      	adds	r3, r7, r3
   21730:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   21732:	683b      	ldr	r3, [r7, #0]
   21734:	b2da      	uxtb	r2, r3
   21736:	2338      	movs	r3, #56	; 0x38
   21738:	18fb      	adds	r3, r7, r3
   2173a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2173c:	2307      	movs	r3, #7
   2173e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   21740:	e080      	b.n	21844 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   21742:	68bb      	ldr	r3, [r7, #8]
   21744:	0c1b      	lsrs	r3, r3, #16
   21746:	b2da      	uxtb	r2, r3
   21748:	2338      	movs	r3, #56	; 0x38
   2174a:	18fb      	adds	r3, r7, r3
   2174c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2174e:	68bb      	ldr	r3, [r7, #8]
   21750:	0a1b      	lsrs	r3, r3, #8
   21752:	b2da      	uxtb	r2, r3
   21754:	2338      	movs	r3, #56	; 0x38
   21756:	18fb      	adds	r3, r7, r3
   21758:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2175a:	68bb      	ldr	r3, [r7, #8]
   2175c:	b2da      	uxtb	r2, r3
   2175e:	2338      	movs	r3, #56	; 0x38
   21760:	18fb      	adds	r3, r7, r3
   21762:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   21764:	683b      	ldr	r3, [r7, #0]
   21766:	0c1b      	lsrs	r3, r3, #16
   21768:	b2da      	uxtb	r2, r3
   2176a:	2338      	movs	r3, #56	; 0x38
   2176c:	18fb      	adds	r3, r7, r3
   2176e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   21770:	683b      	ldr	r3, [r7, #0]
   21772:	0a1b      	lsrs	r3, r3, #8
   21774:	b2da      	uxtb	r2, r3
   21776:	2338      	movs	r3, #56	; 0x38
   21778:	18fb      	adds	r3, r7, r3
   2177a:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   2177c:	683b      	ldr	r3, [r7, #0]
   2177e:	b2da      	uxtb	r2, r3
   21780:	2338      	movs	r3, #56	; 0x38
   21782:	18fb      	adds	r3, r7, r3
   21784:	719a      	strb	r2, [r3, #6]
		len = 8;
   21786:	2308      	movs	r3, #8
   21788:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2178a:	e05b      	b.n	21844 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   2178c:	68bb      	ldr	r3, [r7, #8]
   2178e:	0a1b      	lsrs	r3, r3, #8
   21790:	b2da      	uxtb	r2, r3
   21792:	2338      	movs	r3, #56	; 0x38
   21794:	18fb      	adds	r3, r7, r3
   21796:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   21798:	2388      	movs	r3, #136	; 0x88
   2179a:	18fb      	adds	r3, r7, r3
   2179c:	781b      	ldrb	r3, [r3, #0]
   2179e:	2b01      	cmp	r3, #1
   217a0:	d109      	bne.n	217b6 <spi_cmd_complete+0x1b6>
   217a2:	2338      	movs	r3, #56	; 0x38
   217a4:	18fb      	adds	r3, r7, r3
   217a6:	785b      	ldrb	r3, [r3, #1]
   217a8:	2280      	movs	r2, #128	; 0x80
   217aa:	4252      	negs	r2, r2
   217ac:	4313      	orrs	r3, r2
   217ae:	b2da      	uxtb	r2, r3
   217b0:	2338      	movs	r3, #56	; 0x38
   217b2:	18fb      	adds	r3, r7, r3
   217b4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   217b6:	68bb      	ldr	r3, [r7, #8]
   217b8:	b2da      	uxtb	r2, r3
   217ba:	2338      	movs	r3, #56	; 0x38
   217bc:	18fb      	adds	r3, r7, r3
   217be:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   217c0:	687b      	ldr	r3, [r7, #4]
   217c2:	78da      	ldrb	r2, [r3, #3]
   217c4:	2338      	movs	r3, #56	; 0x38
   217c6:	18fb      	adds	r3, r7, r3
   217c8:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   217ca:	687b      	ldr	r3, [r7, #4]
   217cc:	789a      	ldrb	r2, [r3, #2]
   217ce:	2338      	movs	r3, #56	; 0x38
   217d0:	18fb      	adds	r3, r7, r3
   217d2:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   217d4:	687b      	ldr	r3, [r7, #4]
   217d6:	785a      	ldrb	r2, [r3, #1]
   217d8:	2338      	movs	r3, #56	; 0x38
   217da:	18fb      	adds	r3, r7, r3
   217dc:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   217de:	687b      	ldr	r3, [r7, #4]
   217e0:	781a      	ldrb	r2, [r3, #0]
   217e2:	2338      	movs	r3, #56	; 0x38
   217e4:	18fb      	adds	r3, r7, r3
   217e6:	719a      	strb	r2, [r3, #6]
		len = 8;
   217e8:	2308      	movs	r3, #8
   217ea:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   217ec:	e02a      	b.n	21844 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   217ee:	68bb      	ldr	r3, [r7, #8]
   217f0:	0c1b      	lsrs	r3, r3, #16
   217f2:	b2da      	uxtb	r2, r3
   217f4:	2338      	movs	r3, #56	; 0x38
   217f6:	18fb      	adds	r3, r7, r3
   217f8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   217fa:	68bb      	ldr	r3, [r7, #8]
   217fc:	0a1b      	lsrs	r3, r3, #8
   217fe:	b2da      	uxtb	r2, r3
   21800:	2338      	movs	r3, #56	; 0x38
   21802:	18fb      	adds	r3, r7, r3
   21804:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   21806:	68bb      	ldr	r3, [r7, #8]
   21808:	b2da      	uxtb	r2, r3
   2180a:	2338      	movs	r3, #56	; 0x38
   2180c:	18fb      	adds	r3, r7, r3
   2180e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   21810:	687b      	ldr	r3, [r7, #4]
   21812:	78da      	ldrb	r2, [r3, #3]
   21814:	2338      	movs	r3, #56	; 0x38
   21816:	18fb      	adds	r3, r7, r3
   21818:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2181a:	687b      	ldr	r3, [r7, #4]
   2181c:	789a      	ldrb	r2, [r3, #2]
   2181e:	2338      	movs	r3, #56	; 0x38
   21820:	18fb      	adds	r3, r7, r3
   21822:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   21824:	687b      	ldr	r3, [r7, #4]
   21826:	785a      	ldrb	r2, [r3, #1]
   21828:	2338      	movs	r3, #56	; 0x38
   2182a:	18fb      	adds	r3, r7, r3
   2182c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   2182e:	687b      	ldr	r3, [r7, #4]
   21830:	781a      	ldrb	r2, [r3, #0]
   21832:	2338      	movs	r3, #56	; 0x38
   21834:	18fb      	adds	r3, r7, r3
   21836:	71da      	strb	r2, [r3, #7]
		len = 9;
   21838:	2309      	movs	r3, #9
   2183a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2183c:	e002      	b.n	21844 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   2183e:	2300      	movs	r3, #0
   21840:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   21842:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   21844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21846:	2b01      	cmp	r3, #1
   21848:	d001      	beq.n	2184e <spi_cmd_complete+0x24e>
		return result;
   2184a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2184c:	e33a      	b.n	21ec4 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   2184e:	4b4d      	ldr	r3, [pc, #308]	; (21984 <spi_cmd_complete+0x384>)
   21850:	781b      	ldrb	r3, [r3, #0]
   21852:	2b00      	cmp	r3, #0
   21854:	d111      	bne.n	2187a <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   21856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   21858:	1e5c      	subs	r4, r3, #1
   2185a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2185c:	3b01      	subs	r3, #1
   2185e:	001a      	movs	r2, r3
   21860:	2338      	movs	r3, #56	; 0x38
   21862:	18fb      	adds	r3, r7, r3
   21864:	0019      	movs	r1, r3
   21866:	207f      	movs	r0, #127	; 0x7f
   21868:	4b47      	ldr	r3, [pc, #284]	; (21988 <spi_cmd_complete+0x388>)
   2186a:	4798      	blx	r3
   2186c:	0003      	movs	r3, r0
   2186e:	18db      	adds	r3, r3, r3
   21870:	b2da      	uxtb	r2, r3
   21872:	2338      	movs	r3, #56	; 0x38
   21874:	18fb      	adds	r3, r7, r3
   21876:	551a      	strb	r2, [r3, r4]
   21878:	e002      	b.n	21880 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   2187a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2187c:	3b01      	subs	r3, #1
   2187e:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   21880:	230f      	movs	r3, #15
   21882:	18fb      	adds	r3, r7, r3
   21884:	781b      	ldrb	r3, [r3, #0]
   21886:	2bcf      	cmp	r3, #207	; 0xcf
   21888:	d009      	beq.n	2189e <spi_cmd_complete+0x29e>
   2188a:	230f      	movs	r3, #15
   2188c:	18fb      	adds	r3, r7, r3
   2188e:	781b      	ldrb	r3, [r3, #0]
   21890:	2bc5      	cmp	r3, #197	; 0xc5
   21892:	d004      	beq.n	2189e <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   21894:	230f      	movs	r3, #15
   21896:	18fb      	adds	r3, r7, r3
   21898:	781b      	ldrb	r3, [r3, #0]
   2189a:	2bc6      	cmp	r3, #198	; 0xc6
   2189c:	d103      	bne.n	218a6 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   2189e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   218a0:	3306      	adds	r3, #6
   218a2:	673b      	str	r3, [r7, #112]	; 0x70
   218a4:	e018      	b.n	218d8 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   218a6:	230f      	movs	r3, #15
   218a8:	18fb      	adds	r3, r7, r3
   218aa:	781b      	ldrb	r3, [r3, #0]
   218ac:	2bc4      	cmp	r3, #196	; 0xc4
   218ae:	d004      	beq.n	218ba <spi_cmd_complete+0x2ba>
   218b0:	230f      	movs	r3, #15
   218b2:	18fb      	adds	r3, r7, r3
   218b4:	781b      	ldrb	r3, [r3, #0]
   218b6:	2bca      	cmp	r3, #202	; 0xca
   218b8:	d10b      	bne.n	218d2 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   218ba:	4b32      	ldr	r3, [pc, #200]	; (21984 <spi_cmd_complete+0x384>)
   218bc:	781b      	ldrb	r3, [r3, #0]
   218be:	2b00      	cmp	r3, #0
   218c0:	d103      	bne.n	218ca <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   218c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   218c4:	330c      	adds	r3, #12
   218c6:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   218c8:	e006      	b.n	218d8 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   218ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   218cc:	330a      	adds	r3, #10
   218ce:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   218d0:	e002      	b.n	218d8 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   218d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   218d4:	3305      	adds	r3, #5
   218d6:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   218d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   218da:	2b20      	cmp	r3, #32
   218dc:	d914      	bls.n	21908 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   218de:	23f7      	movs	r3, #247	; 0xf7
   218e0:	005a      	lsls	r2, r3, #1
   218e2:	492a      	ldr	r1, [pc, #168]	; (2198c <spi_cmd_complete+0x38c>)
   218e4:	4b2a      	ldr	r3, [pc, #168]	; (21990 <spi_cmd_complete+0x390>)
   218e6:	0018      	movs	r0, r3
   218e8:	4b2a      	ldr	r3, [pc, #168]	; (21994 <spi_cmd_complete+0x394>)
   218ea:	4798      	blx	r3
   218ec:	6f39      	ldr	r1, [r7, #112]	; 0x70
   218ee:	4b2a      	ldr	r3, [pc, #168]	; (21998 <spi_cmd_complete+0x398>)
   218f0:	2220      	movs	r2, #32
   218f2:	0018      	movs	r0, r3
   218f4:	4b27      	ldr	r3, [pc, #156]	; (21994 <spi_cmd_complete+0x394>)
   218f6:	4798      	blx	r3
   218f8:	4b28      	ldr	r3, [pc, #160]	; (2199c <spi_cmd_complete+0x39c>)
   218fa:	0018      	movs	r0, r3
   218fc:	4b25      	ldr	r3, [pc, #148]	; (21994 <spi_cmd_complete+0x394>)
   218fe:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   21900:	2300      	movs	r3, #0
   21902:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   21904:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21906:	e2dd      	b.n	21ec4 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   21908:	2377      	movs	r3, #119	; 0x77
   2190a:	18fb      	adds	r3, r7, r3
   2190c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2190e:	701a      	strb	r2, [r3, #0]
   21910:	e00d      	b.n	2192e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   21912:	2377      	movs	r3, #119	; 0x77
   21914:	18fb      	adds	r3, r7, r3
   21916:	781b      	ldrb	r3, [r3, #0]
   21918:	2238      	movs	r2, #56	; 0x38
   2191a:	18ba      	adds	r2, r7, r2
   2191c:	2100      	movs	r1, #0
   2191e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   21920:	2377      	movs	r3, #119	; 0x77
   21922:	18fb      	adds	r3, r7, r3
   21924:	781a      	ldrb	r2, [r3, #0]
   21926:	2377      	movs	r3, #119	; 0x77
   21928:	18fb      	adds	r3, r7, r3
   2192a:	3201      	adds	r2, #1
   2192c:	701a      	strb	r2, [r3, #0]
   2192e:	2377      	movs	r3, #119	; 0x77
   21930:	18fb      	adds	r3, r7, r3
   21932:	781a      	ldrb	r2, [r3, #0]
   21934:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   21936:	429a      	cmp	r2, r3
   21938:	d3eb      	bcc.n	21912 <spi_cmd_complete+0x312>
	}
	rix = len;
   2193a:	2376      	movs	r3, #118	; 0x76
   2193c:	18fb      	adds	r3, r7, r3
   2193e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   21940:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   21942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   21944:	b29a      	uxth	r2, r3
   21946:	2318      	movs	r3, #24
   21948:	18f9      	adds	r1, r7, r3
   2194a:	2338      	movs	r3, #56	; 0x38
   2194c:	18fb      	adds	r3, r7, r3
   2194e:	0018      	movs	r0, r3
   21950:	4b13      	ldr	r3, [pc, #76]	; (219a0 <spi_cmd_complete+0x3a0>)
   21952:	4798      	blx	r3
   21954:	1e03      	subs	r3, r0, #0
   21956:	d027      	beq.n	219a8 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   21958:	23fa      	movs	r3, #250	; 0xfa
   2195a:	33ff      	adds	r3, #255	; 0xff
   2195c:	001a      	movs	r2, r3
   2195e:	490b      	ldr	r1, [pc, #44]	; (2198c <spi_cmd_complete+0x38c>)
   21960:	4b0b      	ldr	r3, [pc, #44]	; (21990 <spi_cmd_complete+0x390>)
   21962:	0018      	movs	r0, r3
   21964:	4b0b      	ldr	r3, [pc, #44]	; (21994 <spi_cmd_complete+0x394>)
   21966:	4798      	blx	r3
   21968:	4b0e      	ldr	r3, [pc, #56]	; (219a4 <spi_cmd_complete+0x3a4>)
   2196a:	0018      	movs	r0, r3
   2196c:	4b09      	ldr	r3, [pc, #36]	; (21994 <spi_cmd_complete+0x394>)
   2196e:	4798      	blx	r3
   21970:	4b0a      	ldr	r3, [pc, #40]	; (2199c <spi_cmd_complete+0x39c>)
   21972:	0018      	movs	r0, r3
   21974:	4b07      	ldr	r3, [pc, #28]	; (21994 <spi_cmd_complete+0x394>)
   21976:	4798      	blx	r3
		result = N_FAIL;
   21978:	2300      	movs	r3, #0
   2197a:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2197c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2197e:	e2a1      	b.n	21ec4 <spi_cmd_complete+0x8c4>
   21980:	00036780 	.word	0x00036780
   21984:	20003d08 	.word	0x20003d08
   21988:	00021035 	.word	0x00021035
   2198c:	000367e0 	.word	0x000367e0
   21990:	000361cc 	.word	0x000361cc
   21994:	0001baed 	.word	0x0001baed
   21998:	00036294 	.word	0x00036294
   2199c:	0003620c 	.word	0x0003620c
   219a0:	00020fc1 	.word	0x00020fc1
   219a4:	000361e0 	.word	0x000361e0
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   219a8:	230f      	movs	r3, #15
   219aa:	18fb      	adds	r3, r7, r3
   219ac:	781b      	ldrb	r3, [r3, #0]
   219ae:	2bcf      	cmp	r3, #207	; 0xcf
   219b0:	d009      	beq.n	219c6 <spi_cmd_complete+0x3c6>
   219b2:	230f      	movs	r3, #15
   219b4:	18fb      	adds	r3, r7, r3
   219b6:	781b      	ldrb	r3, [r3, #0]
   219b8:	2bc5      	cmp	r3, #197	; 0xc5
   219ba:	d004      	beq.n	219c6 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   219bc:	230f      	movs	r3, #15
   219be:	18fb      	adds	r3, r7, r3
   219c0:	781b      	ldrb	r3, [r3, #0]
   219c2:	2bc6      	cmp	r3, #198	; 0xc6
   219c4:	d106      	bne.n	219d4 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   219c6:	2376      	movs	r3, #118	; 0x76
   219c8:	18fb      	adds	r3, r7, r3
   219ca:	781a      	ldrb	r2, [r3, #0]
   219cc:	2376      	movs	r3, #118	; 0x76
   219ce:	18fb      	adds	r3, r7, r3
   219d0:	3201      	adds	r2, #1
   219d2:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   219d4:	2376      	movs	r3, #118	; 0x76
   219d6:	18fb      	adds	r3, r7, r3
   219d8:	781b      	ldrb	r3, [r3, #0]
   219da:	2276      	movs	r2, #118	; 0x76
   219dc:	18ba      	adds	r2, r7, r2
   219de:	1c59      	adds	r1, r3, #1
   219e0:	7011      	strb	r1, [r2, #0]
   219e2:	001a      	movs	r2, r3
   219e4:	2318      	movs	r3, #24
   219e6:	18fb      	adds	r3, r7, r3
   219e8:	5c9a      	ldrb	r2, [r3, r2]
   219ea:	2317      	movs	r3, #23
   219ec:	18fb      	adds	r3, r7, r3
   219ee:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   219f0:	2317      	movs	r3, #23
   219f2:	18fb      	adds	r3, r7, r3
   219f4:	781b      	ldrb	r3, [r3, #0]
   219f6:	220f      	movs	r2, #15
   219f8:	18ba      	adds	r2, r7, r2
   219fa:	7812      	ldrb	r2, [r2, #0]
   219fc:	429a      	cmp	r2, r3
   219fe:	d018      	beq.n	21a32 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   21a00:	4add      	ldr	r2, [pc, #884]	; (21d78 <spi_cmd_complete+0x778>)
   21a02:	49de      	ldr	r1, [pc, #888]	; (21d7c <spi_cmd_complete+0x77c>)
   21a04:	4bde      	ldr	r3, [pc, #888]	; (21d80 <spi_cmd_complete+0x780>)
   21a06:	0018      	movs	r0, r3
   21a08:	4bde      	ldr	r3, [pc, #888]	; (21d84 <spi_cmd_complete+0x784>)
   21a0a:	4798      	blx	r3
   21a0c:	230f      	movs	r3, #15
   21a0e:	18fb      	adds	r3, r7, r3
   21a10:	7819      	ldrb	r1, [r3, #0]
   21a12:	2317      	movs	r3, #23
   21a14:	18fb      	adds	r3, r7, r3
   21a16:	781b      	ldrb	r3, [r3, #0]
   21a18:	001a      	movs	r2, r3
   21a1a:	4bdb      	ldr	r3, [pc, #876]	; (21d88 <spi_cmd_complete+0x788>)
   21a1c:	0018      	movs	r0, r3
   21a1e:	4bd9      	ldr	r3, [pc, #868]	; (21d84 <spi_cmd_complete+0x784>)
   21a20:	4798      	blx	r3
   21a22:	4bda      	ldr	r3, [pc, #872]	; (21d8c <spi_cmd_complete+0x78c>)
   21a24:	0018      	movs	r0, r3
   21a26:	4bd7      	ldr	r3, [pc, #860]	; (21d84 <spi_cmd_complete+0x784>)
   21a28:	4798      	blx	r3
		result = N_FAIL;
   21a2a:	2300      	movs	r3, #0
   21a2c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   21a2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21a30:	e248      	b.n	21ec4 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   21a32:	2376      	movs	r3, #118	; 0x76
   21a34:	18fb      	adds	r3, r7, r3
   21a36:	781b      	ldrb	r3, [r3, #0]
   21a38:	2276      	movs	r2, #118	; 0x76
   21a3a:	18ba      	adds	r2, r7, r2
   21a3c:	1c59      	adds	r1, r3, #1
   21a3e:	7011      	strb	r1, [r2, #0]
   21a40:	001a      	movs	r2, r3
   21a42:	2318      	movs	r3, #24
   21a44:	18fb      	adds	r3, r7, r3
   21a46:	5c9a      	ldrb	r2, [r3, r2]
   21a48:	2317      	movs	r3, #23
   21a4a:	18fb      	adds	r3, r7, r3
   21a4c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   21a4e:	2317      	movs	r3, #23
   21a50:	18fb      	adds	r3, r7, r3
   21a52:	781b      	ldrb	r3, [r3, #0]
   21a54:	2b00      	cmp	r3, #0
   21a56:	d016      	beq.n	21a86 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   21a58:	4acd      	ldr	r2, [pc, #820]	; (21d90 <spi_cmd_complete+0x790>)
   21a5a:	49c8      	ldr	r1, [pc, #800]	; (21d7c <spi_cmd_complete+0x77c>)
   21a5c:	4bc8      	ldr	r3, [pc, #800]	; (21d80 <spi_cmd_complete+0x780>)
   21a5e:	0018      	movs	r0, r3
   21a60:	4bc8      	ldr	r3, [pc, #800]	; (21d84 <spi_cmd_complete+0x784>)
   21a62:	4798      	blx	r3
   21a64:	2317      	movs	r3, #23
   21a66:	18fb      	adds	r3, r7, r3
   21a68:	781b      	ldrb	r3, [r3, #0]
   21a6a:	001a      	movs	r2, r3
   21a6c:	4bc9      	ldr	r3, [pc, #804]	; (21d94 <spi_cmd_complete+0x794>)
   21a6e:	0011      	movs	r1, r2
   21a70:	0018      	movs	r0, r3
   21a72:	4bc4      	ldr	r3, [pc, #784]	; (21d84 <spi_cmd_complete+0x784>)
   21a74:	4798      	blx	r3
   21a76:	4bc5      	ldr	r3, [pc, #788]	; (21d8c <spi_cmd_complete+0x78c>)
   21a78:	0018      	movs	r0, r3
   21a7a:	4bc2      	ldr	r3, [pc, #776]	; (21d84 <spi_cmd_complete+0x784>)
   21a7c:	4798      	blx	r3
		result = N_FAIL;
   21a7e:	2300      	movs	r3, #0
   21a80:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   21a82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21a84:	e21e      	b.n	21ec4 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   21a86:	230f      	movs	r3, #15
   21a88:	18fb      	adds	r3, r7, r3
   21a8a:	781b      	ldrb	r3, [r3, #0]
   21a8c:	2bc4      	cmp	r3, #196	; 0xc4
   21a8e:	d00f      	beq.n	21ab0 <spi_cmd_complete+0x4b0>
   21a90:	230f      	movs	r3, #15
   21a92:	18fb      	adds	r3, r7, r3
   21a94:	781b      	ldrb	r3, [r3, #0]
   21a96:	2bca      	cmp	r3, #202	; 0xca
   21a98:	d00a      	beq.n	21ab0 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   21a9a:	230f      	movs	r3, #15
   21a9c:	18fb      	adds	r3, r7, r3
   21a9e:	781b      	ldrb	r3, [r3, #0]
   21aa0:	2bc2      	cmp	r3, #194	; 0xc2
   21aa2:	d005      	beq.n	21ab0 <spi_cmd_complete+0x4b0>
   21aa4:	230f      	movs	r3, #15
   21aa6:	18fb      	adds	r3, r7, r3
   21aa8:	781b      	ldrb	r3, [r3, #0]
   21aaa:	2bc8      	cmp	r3, #200	; 0xc8
   21aac:	d000      	beq.n	21ab0 <spi_cmd_complete+0x4b0>
   21aae:	e208      	b.n	21ec2 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   21ab0:	230a      	movs	r3, #10
   21ab2:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   21ab4:	2376      	movs	r3, #118	; 0x76
   21ab6:	18fb      	adds	r3, r7, r3
   21ab8:	781a      	ldrb	r2, [r3, #0]
   21aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   21abc:	429a      	cmp	r2, r3
   21abe:	d218      	bcs.n	21af2 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   21ac0:	2376      	movs	r3, #118	; 0x76
   21ac2:	18fb      	adds	r3, r7, r3
   21ac4:	781b      	ldrb	r3, [r3, #0]
   21ac6:	2276      	movs	r2, #118	; 0x76
   21ac8:	18ba      	adds	r2, r7, r2
   21aca:	1c59      	adds	r1, r3, #1
   21acc:	7011      	strb	r1, [r2, #0]
   21ace:	001a      	movs	r2, r3
   21ad0:	2318      	movs	r3, #24
   21ad2:	18fb      	adds	r3, r7, r3
   21ad4:	5c9a      	ldrb	r2, [r3, r2]
   21ad6:	2317      	movs	r3, #23
   21ad8:	18fb      	adds	r3, r7, r3
   21ada:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   21adc:	2317      	movs	r3, #23
   21ade:	18fb      	adds	r3, r7, r3
   21ae0:	781b      	ldrb	r3, [r3, #0]
   21ae2:	091b      	lsrs	r3, r3, #4
   21ae4:	b2db      	uxtb	r3, r3
   21ae6:	001a      	movs	r2, r3
   21ae8:	230f      	movs	r3, #15
   21aea:	4013      	ands	r3, r2
   21aec:	2b0f      	cmp	r3, #15
   21aee:	d103      	bne.n	21af8 <spi_cmd_complete+0x4f8>
					break;
   21af0:	e007      	b.n	21b02 <spi_cmd_complete+0x502>
					retry = 0;
   21af2:	2300      	movs	r3, #0
   21af4:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   21af6:	e004      	b.n	21b02 <spi_cmd_complete+0x502>
			} while (retry--);
   21af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   21afa:	1e5a      	subs	r2, r3, #1
   21afc:	667a      	str	r2, [r7, #100]	; 0x64
   21afe:	2b00      	cmp	r3, #0
   21b00:	d1d8      	bne.n	21ab4 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   21b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   21b04:	2b00      	cmp	r3, #0
   21b06:	dc18      	bgt.n	21b3a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   21b08:	2395      	movs	r3, #149	; 0x95
   21b0a:	009a      	lsls	r2, r3, #2
   21b0c:	499b      	ldr	r1, [pc, #620]	; (21d7c <spi_cmd_complete+0x77c>)
   21b0e:	4b9c      	ldr	r3, [pc, #624]	; (21d80 <spi_cmd_complete+0x780>)
   21b10:	0018      	movs	r0, r3
   21b12:	4b9c      	ldr	r3, [pc, #624]	; (21d84 <spi_cmd_complete+0x784>)
   21b14:	4798      	blx	r3
   21b16:	2317      	movs	r3, #23
   21b18:	18fb      	adds	r3, r7, r3
   21b1a:	781b      	ldrb	r3, [r3, #0]
   21b1c:	001a      	movs	r2, r3
   21b1e:	4b9e      	ldr	r3, [pc, #632]	; (21d98 <spi_cmd_complete+0x798>)
   21b20:	0011      	movs	r1, r2
   21b22:	0018      	movs	r0, r3
   21b24:	4b97      	ldr	r3, [pc, #604]	; (21d84 <spi_cmd_complete+0x784>)
   21b26:	4798      	blx	r3
   21b28:	4b98      	ldr	r3, [pc, #608]	; (21d8c <spi_cmd_complete+0x78c>)
   21b2a:	0018      	movs	r0, r3
   21b2c:	4b95      	ldr	r3, [pc, #596]	; (21d84 <spi_cmd_complete+0x784>)
   21b2e:	4798      	blx	r3
				result = N_RESET;
   21b30:	2301      	movs	r3, #1
   21b32:	425b      	negs	r3, r3
   21b34:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   21b36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21b38:	e1c4      	b.n	21ec4 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   21b3a:	230f      	movs	r3, #15
   21b3c:	18fb      	adds	r3, r7, r3
   21b3e:	781b      	ldrb	r3, [r3, #0]
   21b40:	2bc4      	cmp	r3, #196	; 0xc4
   21b42:	d005      	beq.n	21b50 <spi_cmd_complete+0x550>
   21b44:	230f      	movs	r3, #15
   21b46:	18fb      	adds	r3, r7, r3
   21b48:	781b      	ldrb	r3, [r3, #0]
   21b4a:	2bca      	cmp	r3, #202	; 0xca
   21b4c:	d000      	beq.n	21b50 <spi_cmd_complete+0x550>
   21b4e:	e08e      	b.n	21c6e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   21b50:	2376      	movs	r3, #118	; 0x76
   21b52:	18fb      	adds	r3, r7, r3
   21b54:	781b      	ldrb	r3, [r3, #0]
   21b56:	3303      	adds	r3, #3
   21b58:	001a      	movs	r2, r3
   21b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   21b5c:	429a      	cmp	r2, r3
   21b5e:	d23c      	bcs.n	21bda <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   21b60:	2376      	movs	r3, #118	; 0x76
   21b62:	18fb      	adds	r3, r7, r3
   21b64:	781b      	ldrb	r3, [r3, #0]
   21b66:	2276      	movs	r2, #118	; 0x76
   21b68:	18ba      	adds	r2, r7, r2
   21b6a:	1c59      	adds	r1, r3, #1
   21b6c:	7011      	strb	r1, [r2, #0]
   21b6e:	001a      	movs	r2, r3
   21b70:	2318      	movs	r3, #24
   21b72:	18fb      	adds	r3, r7, r3
   21b74:	5c9a      	ldrb	r2, [r3, r2]
   21b76:	687b      	ldr	r3, [r7, #4]
   21b78:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   21b7a:	687b      	ldr	r3, [r7, #4]
   21b7c:	1c5a      	adds	r2, r3, #1
   21b7e:	2376      	movs	r3, #118	; 0x76
   21b80:	18fb      	adds	r3, r7, r3
   21b82:	781b      	ldrb	r3, [r3, #0]
   21b84:	2176      	movs	r1, #118	; 0x76
   21b86:	1879      	adds	r1, r7, r1
   21b88:	1c58      	adds	r0, r3, #1
   21b8a:	7008      	strb	r0, [r1, #0]
   21b8c:	0019      	movs	r1, r3
   21b8e:	2318      	movs	r3, #24
   21b90:	18fb      	adds	r3, r7, r3
   21b92:	5c5b      	ldrb	r3, [r3, r1]
   21b94:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   21b96:	687b      	ldr	r3, [r7, #4]
   21b98:	1c9a      	adds	r2, r3, #2
   21b9a:	2376      	movs	r3, #118	; 0x76
   21b9c:	18fb      	adds	r3, r7, r3
   21b9e:	781b      	ldrb	r3, [r3, #0]
   21ba0:	2176      	movs	r1, #118	; 0x76
   21ba2:	1879      	adds	r1, r7, r1
   21ba4:	1c58      	adds	r0, r3, #1
   21ba6:	7008      	strb	r0, [r1, #0]
   21ba8:	0019      	movs	r1, r3
   21baa:	2318      	movs	r3, #24
   21bac:	18fb      	adds	r3, r7, r3
   21bae:	5c5b      	ldrb	r3, [r3, r1]
   21bb0:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   21bb2:	687b      	ldr	r3, [r7, #4]
   21bb4:	1cda      	adds	r2, r3, #3
   21bb6:	2376      	movs	r3, #118	; 0x76
   21bb8:	18fb      	adds	r3, r7, r3
   21bba:	781b      	ldrb	r3, [r3, #0]
   21bbc:	2176      	movs	r1, #118	; 0x76
   21bbe:	1879      	adds	r1, r7, r1
   21bc0:	1c58      	adds	r0, r3, #1
   21bc2:	7008      	strb	r0, [r1, #0]
   21bc4:	0019      	movs	r1, r3
   21bc6:	2318      	movs	r3, #24
   21bc8:	18fb      	adds	r3, r7, r3
   21bca:	5c5b      	ldrb	r3, [r3, r1]
   21bcc:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   21bce:	4b73      	ldr	r3, [pc, #460]	; (21d9c <spi_cmd_complete+0x79c>)
   21bd0:	781b      	ldrb	r3, [r3, #0]
   21bd2:	2b00      	cmp	r3, #0
   21bd4:	d000      	beq.n	21bd8 <spi_cmd_complete+0x5d8>
   21bd6:	e174      	b.n	21ec2 <spi_cmd_complete+0x8c2>
   21bd8:	e011      	b.n	21bfe <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   21bda:	4a71      	ldr	r2, [pc, #452]	; (21da0 <spi_cmd_complete+0x7a0>)
   21bdc:	4967      	ldr	r1, [pc, #412]	; (21d7c <spi_cmd_complete+0x77c>)
   21bde:	4b68      	ldr	r3, [pc, #416]	; (21d80 <spi_cmd_complete+0x780>)
   21be0:	0018      	movs	r0, r3
   21be2:	4b68      	ldr	r3, [pc, #416]	; (21d84 <spi_cmd_complete+0x784>)
   21be4:	4798      	blx	r3
   21be6:	4b6f      	ldr	r3, [pc, #444]	; (21da4 <spi_cmd_complete+0x7a4>)
   21be8:	0018      	movs	r0, r3
   21bea:	4b66      	ldr	r3, [pc, #408]	; (21d84 <spi_cmd_complete+0x784>)
   21bec:	4798      	blx	r3
   21bee:	4b67      	ldr	r3, [pc, #412]	; (21d8c <spi_cmd_complete+0x78c>)
   21bf0:	0018      	movs	r0, r3
   21bf2:	4b64      	ldr	r3, [pc, #400]	; (21d84 <spi_cmd_complete+0x784>)
   21bf4:	4798      	blx	r3
					result = N_FAIL;
   21bf6:	2300      	movs	r3, #0
   21bf8:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   21bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21bfc:	e162      	b.n	21ec4 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   21bfe:	2376      	movs	r3, #118	; 0x76
   21c00:	18fb      	adds	r3, r7, r3
   21c02:	781b      	ldrb	r3, [r3, #0]
   21c04:	3301      	adds	r3, #1
   21c06:	001a      	movs	r2, r3
   21c08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   21c0a:	429a      	cmp	r2, r3
   21c0c:	d21c      	bcs.n	21c48 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   21c0e:	2376      	movs	r3, #118	; 0x76
   21c10:	18fb      	adds	r3, r7, r3
   21c12:	781b      	ldrb	r3, [r3, #0]
   21c14:	2276      	movs	r2, #118	; 0x76
   21c16:	18ba      	adds	r2, r7, r2
   21c18:	1c59      	adds	r1, r3, #1
   21c1a:	7011      	strb	r1, [r2, #0]
   21c1c:	001a      	movs	r2, r3
   21c1e:	2318      	movs	r3, #24
   21c20:	18fb      	adds	r3, r7, r3
   21c22:	5c9a      	ldrb	r2, [r3, r2]
   21c24:	2314      	movs	r3, #20
   21c26:	18fb      	adds	r3, r7, r3
   21c28:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   21c2a:	2376      	movs	r3, #118	; 0x76
   21c2c:	18fb      	adds	r3, r7, r3
   21c2e:	781b      	ldrb	r3, [r3, #0]
   21c30:	2276      	movs	r2, #118	; 0x76
   21c32:	18ba      	adds	r2, r7, r2
   21c34:	1c59      	adds	r1, r3, #1
   21c36:	7011      	strb	r1, [r2, #0]
   21c38:	001a      	movs	r2, r3
   21c3a:	2318      	movs	r3, #24
   21c3c:	18fb      	adds	r3, r7, r3
   21c3e:	5c9a      	ldrb	r2, [r3, r2]
   21c40:	2314      	movs	r3, #20
   21c42:	18fb      	adds	r3, r7, r3
   21c44:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   21c46:	e13c      	b.n	21ec2 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   21c48:	239c      	movs	r3, #156	; 0x9c
   21c4a:	009a      	lsls	r2, r3, #2
   21c4c:	494b      	ldr	r1, [pc, #300]	; (21d7c <spi_cmd_complete+0x77c>)
   21c4e:	4b4c      	ldr	r3, [pc, #304]	; (21d80 <spi_cmd_complete+0x780>)
   21c50:	0018      	movs	r0, r3
   21c52:	4b4c      	ldr	r3, [pc, #304]	; (21d84 <spi_cmd_complete+0x784>)
   21c54:	4798      	blx	r3
   21c56:	4b54      	ldr	r3, [pc, #336]	; (21da8 <spi_cmd_complete+0x7a8>)
   21c58:	0018      	movs	r0, r3
   21c5a:	4b4a      	ldr	r3, [pc, #296]	; (21d84 <spi_cmd_complete+0x784>)
   21c5c:	4798      	blx	r3
   21c5e:	4b4b      	ldr	r3, [pc, #300]	; (21d8c <spi_cmd_complete+0x78c>)
   21c60:	0018      	movs	r0, r3
   21c62:	4b48      	ldr	r3, [pc, #288]	; (21d84 <spi_cmd_complete+0x784>)
   21c64:	4798      	blx	r3
						result = N_FAIL;
   21c66:	2300      	movs	r3, #0
   21c68:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   21c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21c6c:	e12a      	b.n	21ec4 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   21c6e:	230f      	movs	r3, #15
   21c70:	18fb      	adds	r3, r7, r3
   21c72:	781b      	ldrb	r3, [r3, #0]
   21c74:	2bc2      	cmp	r3, #194	; 0xc2
   21c76:	d005      	beq.n	21c84 <spi_cmd_complete+0x684>
   21c78:	230f      	movs	r3, #15
   21c7a:	18fb      	adds	r3, r7, r3
   21c7c:	781b      	ldrb	r3, [r3, #0]
   21c7e:	2bc8      	cmp	r3, #200	; 0xc8
   21c80:	d000      	beq.n	21c84 <spi_cmd_complete+0x684>
   21c82:	e11e      	b.n	21ec2 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   21c84:	2300      	movs	r3, #0
   21c86:	663b      	str	r3, [r7, #96]	; 0x60
   21c88:	e011      	b.n	21cae <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   21c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21c8c:	1c5a      	adds	r2, r3, #1
   21c8e:	663a      	str	r2, [r7, #96]	; 0x60
   21c90:	001a      	movs	r2, r3
   21c92:	687b      	ldr	r3, [r7, #4]
   21c94:	189a      	adds	r2, r3, r2
   21c96:	2376      	movs	r3, #118	; 0x76
   21c98:	18fb      	adds	r3, r7, r3
   21c9a:	781b      	ldrb	r3, [r3, #0]
   21c9c:	2176      	movs	r1, #118	; 0x76
   21c9e:	1879      	adds	r1, r7, r1
   21ca0:	1c58      	adds	r0, r3, #1
   21ca2:	7008      	strb	r0, [r1, #0]
   21ca4:	0019      	movs	r1, r3
   21ca6:	2318      	movs	r3, #24
   21ca8:	18fb      	adds	r3, r7, r3
   21caa:	5c5b      	ldrb	r3, [r3, r1]
   21cac:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   21cae:	2376      	movs	r3, #118	; 0x76
   21cb0:	18fb      	adds	r3, r7, r3
   21cb2:	781a      	ldrb	r2, [r3, #0]
   21cb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   21cb6:	429a      	cmp	r2, r3
   21cb8:	d203      	bcs.n	21cc2 <spi_cmd_complete+0x6c2>
   21cba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   21cbc:	683b      	ldr	r3, [r7, #0]
   21cbe:	429a      	cmp	r2, r3
   21cc0:	d3e3      	bcc.n	21c8a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   21cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21cc4:	683a      	ldr	r2, [r7, #0]
   21cc6:	1ad3      	subs	r3, r2, r3
   21cc8:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   21cca:	683b      	ldr	r3, [r7, #0]
   21ccc:	2b00      	cmp	r3, #0
   21cce:	d100      	bne.n	21cd2 <spi_cmd_complete+0x6d2>
   21cd0:	e0f1      	b.n	21eb6 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   21cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21cd4:	2280      	movs	r2, #128	; 0x80
   21cd6:	0192      	lsls	r2, r2, #6
   21cd8:	1ad3      	subs	r3, r2, r3
   21cda:	001a      	movs	r2, r3
   21cdc:	683b      	ldr	r3, [r7, #0]
   21cde:	429a      	cmp	r2, r3
   21ce0:	d302      	bcc.n	21ce8 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   21ce2:	683b      	ldr	r3, [r7, #0]
   21ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
   21ce6:	e004      	b.n	21cf2 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   21ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21cea:	2280      	movs	r2, #128	; 0x80
   21cec:	0192      	lsls	r2, r2, #6
   21cee:	1ad3      	subs	r3, r2, r3
   21cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   21cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21cf4:	687a      	ldr	r2, [r7, #4]
   21cf6:	18d3      	adds	r3, r2, r3
   21cf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   21cfa:	b292      	uxth	r2, r2
   21cfc:	0011      	movs	r1, r2
   21cfe:	0018      	movs	r0, r3
   21d00:	4b2a      	ldr	r3, [pc, #168]	; (21dac <spi_cmd_complete+0x7ac>)
   21d02:	4798      	blx	r3
   21d04:	1e03      	subs	r3, r0, #0
   21d06:	d010      	beq.n	21d2a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   21d08:	4a29      	ldr	r2, [pc, #164]	; (21db0 <spi_cmd_complete+0x7b0>)
   21d0a:	491c      	ldr	r1, [pc, #112]	; (21d7c <spi_cmd_complete+0x77c>)
   21d0c:	4b1c      	ldr	r3, [pc, #112]	; (21d80 <spi_cmd_complete+0x780>)
   21d0e:	0018      	movs	r0, r3
   21d10:	4b1c      	ldr	r3, [pc, #112]	; (21d84 <spi_cmd_complete+0x784>)
   21d12:	4798      	blx	r3
   21d14:	4b27      	ldr	r3, [pc, #156]	; (21db4 <spi_cmd_complete+0x7b4>)
   21d16:	0018      	movs	r0, r3
   21d18:	4b1a      	ldr	r3, [pc, #104]	; (21d84 <spi_cmd_complete+0x784>)
   21d1a:	4798      	blx	r3
   21d1c:	4b1b      	ldr	r3, [pc, #108]	; (21d8c <spi_cmd_complete+0x78c>)
   21d1e:	0018      	movs	r0, r3
   21d20:	4b18      	ldr	r3, [pc, #96]	; (21d84 <spi_cmd_complete+0x784>)
   21d22:	4798      	blx	r3
						result = N_FAIL;
   21d24:	2300      	movs	r3, #0
   21d26:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   21d28:	e0cb      	b.n	21ec2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   21d2a:	4b1c      	ldr	r3, [pc, #112]	; (21d9c <spi_cmd_complete+0x79c>)
   21d2c:	781b      	ldrb	r3, [r3, #0]
   21d2e:	2b00      	cmp	r3, #0
   21d30:	d119      	bne.n	21d66 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   21d32:	2314      	movs	r3, #20
   21d34:	18fb      	adds	r3, r7, r3
   21d36:	2102      	movs	r1, #2
   21d38:	0018      	movs	r0, r3
   21d3a:	4b1c      	ldr	r3, [pc, #112]	; (21dac <spi_cmd_complete+0x7ac>)
   21d3c:	4798      	blx	r3
   21d3e:	1e03      	subs	r3, r0, #0
   21d40:	d011      	beq.n	21d66 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   21d42:	23a6      	movs	r3, #166	; 0xa6
   21d44:	009a      	lsls	r2, r3, #2
   21d46:	490d      	ldr	r1, [pc, #52]	; (21d7c <spi_cmd_complete+0x77c>)
   21d48:	4b0d      	ldr	r3, [pc, #52]	; (21d80 <spi_cmd_complete+0x780>)
   21d4a:	0018      	movs	r0, r3
   21d4c:	4b0d      	ldr	r3, [pc, #52]	; (21d84 <spi_cmd_complete+0x784>)
   21d4e:	4798      	blx	r3
   21d50:	4b19      	ldr	r3, [pc, #100]	; (21db8 <spi_cmd_complete+0x7b8>)
   21d52:	0018      	movs	r0, r3
   21d54:	4b0b      	ldr	r3, [pc, #44]	; (21d84 <spi_cmd_complete+0x784>)
   21d56:	4798      	blx	r3
   21d58:	4b0c      	ldr	r3, [pc, #48]	; (21d8c <spi_cmd_complete+0x78c>)
   21d5a:	0018      	movs	r0, r3
   21d5c:	4b09      	ldr	r3, [pc, #36]	; (21d84 <spi_cmd_complete+0x784>)
   21d5e:	4798      	blx	r3
							result = N_FAIL;
   21d60:	2300      	movs	r3, #0
   21d62:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   21d64:	e0ad      	b.n	21ec2 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   21d66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   21d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   21d6a:	18d3      	adds	r3, r2, r3
   21d6c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   21d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   21d70:	683a      	ldr	r2, [r7, #0]
   21d72:	1ad3      	subs	r3, r2, r3
   21d74:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   21d76:	e09e      	b.n	21eb6 <spi_cmd_complete+0x8b6>
   21d78:	0000022f 	.word	0x0000022f
   21d7c:	000367e0 	.word	0x000367e0
   21d80:	000361cc 	.word	0x000361cc
   21d84:	0001baed 	.word	0x0001baed
   21d88:	000362c4 	.word	0x000362c4
   21d8c:	0003620c 	.word	0x0003620c
   21d90:	00000239 	.word	0x00000239
   21d94:	00036300 	.word	0x00036300
   21d98:	00036334 	.word	0x00036334
   21d9c:	20003d08 	.word	0x20003d08
   21da0:	00000263 	.word	0x00000263
   21da4:	00036364 	.word	0x00036364
   21da8:	00036394 	.word	0x00036394
   21dac:	00020f39 	.word	0x00020f39
   21db0:	0000028e 	.word	0x0000028e
   21db4:	000363c4 	.word	0x000363c4
   21db8:	000363f8 	.word	0x000363f8
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   21dbc:	683a      	ldr	r2, [r7, #0]
   21dbe:	2380      	movs	r3, #128	; 0x80
   21dc0:	019b      	lsls	r3, r3, #6
   21dc2:	429a      	cmp	r2, r3
   21dc4:	d802      	bhi.n	21dcc <spi_cmd_complete+0x7cc>
						nbytes = sz;
   21dc6:	683b      	ldr	r3, [r7, #0]
   21dc8:	65bb      	str	r3, [r7, #88]	; 0x58
   21dca:	e002      	b.n	21dd2 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   21dcc:	2380      	movs	r3, #128	; 0x80
   21dce:	019b      	lsls	r3, r3, #6
   21dd0:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   21dd2:	230a      	movs	r3, #10
   21dd4:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   21dd6:	2317      	movs	r3, #23
   21dd8:	18fb      	adds	r3, r7, r3
   21dda:	2101      	movs	r1, #1
   21ddc:	0018      	movs	r0, r3
   21dde:	4b3b      	ldr	r3, [pc, #236]	; (21ecc <spi_cmd_complete+0x8cc>)
   21de0:	4798      	blx	r3
   21de2:	1e03      	subs	r3, r0, #0
   21de4:	d011      	beq.n	21e0a <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   21de6:	23ae      	movs	r3, #174	; 0xae
   21de8:	009a      	lsls	r2, r3, #2
   21dea:	4939      	ldr	r1, [pc, #228]	; (21ed0 <spi_cmd_complete+0x8d0>)
   21dec:	4b39      	ldr	r3, [pc, #228]	; (21ed4 <spi_cmd_complete+0x8d4>)
   21dee:	0018      	movs	r0, r3
   21df0:	4b39      	ldr	r3, [pc, #228]	; (21ed8 <spi_cmd_complete+0x8d8>)
   21df2:	4798      	blx	r3
   21df4:	4b39      	ldr	r3, [pc, #228]	; (21edc <spi_cmd_complete+0x8dc>)
   21df6:	0018      	movs	r0, r3
   21df8:	4b37      	ldr	r3, [pc, #220]	; (21ed8 <spi_cmd_complete+0x8d8>)
   21dfa:	4798      	blx	r3
   21dfc:	4b38      	ldr	r3, [pc, #224]	; (21ee0 <spi_cmd_complete+0x8e0>)
   21dfe:	0018      	movs	r0, r3
   21e00:	4b35      	ldr	r3, [pc, #212]	; (21ed8 <spi_cmd_complete+0x8d8>)
   21e02:	4798      	blx	r3
							result = N_FAIL;
   21e04:	2300      	movs	r3, #0
   21e06:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   21e08:	e010      	b.n	21e2c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   21e0a:	2317      	movs	r3, #23
   21e0c:	18fb      	adds	r3, r7, r3
   21e0e:	781b      	ldrb	r3, [r3, #0]
   21e10:	091b      	lsrs	r3, r3, #4
   21e12:	b2db      	uxtb	r3, r3
   21e14:	001a      	movs	r2, r3
   21e16:	230f      	movs	r3, #15
   21e18:	4013      	ands	r3, r2
   21e1a:	2b0f      	cmp	r3, #15
   21e1c:	d005      	beq.n	21e2a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   21e1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   21e20:	1e5a      	subs	r2, r3, #1
   21e22:	667a      	str	r2, [r7, #100]	; 0x64
   21e24:	2b00      	cmp	r3, #0
   21e26:	d1d6      	bne.n	21dd6 <spi_cmd_complete+0x7d6>
   21e28:	e000      	b.n	21e2c <spi_cmd_complete+0x82c>
							break;
   21e2a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   21e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   21e2e:	2b00      	cmp	r3, #0
   21e30:	d046      	beq.n	21ec0 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   21e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   21e34:	687a      	ldr	r2, [r7, #4]
   21e36:	18d3      	adds	r3, r2, r3
   21e38:	6dba      	ldr	r2, [r7, #88]	; 0x58
   21e3a:	b292      	uxth	r2, r2
   21e3c:	0011      	movs	r1, r2
   21e3e:	0018      	movs	r0, r3
   21e40:	4b22      	ldr	r3, [pc, #136]	; (21ecc <spi_cmd_complete+0x8cc>)
   21e42:	4798      	blx	r3
   21e44:	1e03      	subs	r3, r0, #0
   21e46:	d011      	beq.n	21e6c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   21e48:	23b2      	movs	r3, #178	; 0xb2
   21e4a:	009a      	lsls	r2, r3, #2
   21e4c:	4920      	ldr	r1, [pc, #128]	; (21ed0 <spi_cmd_complete+0x8d0>)
   21e4e:	4b21      	ldr	r3, [pc, #132]	; (21ed4 <spi_cmd_complete+0x8d4>)
   21e50:	0018      	movs	r0, r3
   21e52:	4b21      	ldr	r3, [pc, #132]	; (21ed8 <spi_cmd_complete+0x8d8>)
   21e54:	4798      	blx	r3
   21e56:	4b23      	ldr	r3, [pc, #140]	; (21ee4 <spi_cmd_complete+0x8e4>)
   21e58:	0018      	movs	r0, r3
   21e5a:	4b1f      	ldr	r3, [pc, #124]	; (21ed8 <spi_cmd_complete+0x8d8>)
   21e5c:	4798      	blx	r3
   21e5e:	4b20      	ldr	r3, [pc, #128]	; (21ee0 <spi_cmd_complete+0x8e0>)
   21e60:	0018      	movs	r0, r3
   21e62:	4b1d      	ldr	r3, [pc, #116]	; (21ed8 <spi_cmd_complete+0x8d8>)
   21e64:	4798      	blx	r3
						result = N_FAIL;
   21e66:	2300      	movs	r3, #0
   21e68:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   21e6a:	e02a      	b.n	21ec2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   21e6c:	4b1e      	ldr	r3, [pc, #120]	; (21ee8 <spi_cmd_complete+0x8e8>)
   21e6e:	781b      	ldrb	r3, [r3, #0]
   21e70:	2b00      	cmp	r3, #0
   21e72:	d118      	bne.n	21ea6 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   21e74:	2314      	movs	r3, #20
   21e76:	18fb      	adds	r3, r7, r3
   21e78:	2102      	movs	r1, #2
   21e7a:	0018      	movs	r0, r3
   21e7c:	4b13      	ldr	r3, [pc, #76]	; (21ecc <spi_cmd_complete+0x8cc>)
   21e7e:	4798      	blx	r3
   21e80:	1e03      	subs	r3, r0, #0
   21e82:	d010      	beq.n	21ea6 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   21e84:	4a19      	ldr	r2, [pc, #100]	; (21eec <spi_cmd_complete+0x8ec>)
   21e86:	4912      	ldr	r1, [pc, #72]	; (21ed0 <spi_cmd_complete+0x8d0>)
   21e88:	4b12      	ldr	r3, [pc, #72]	; (21ed4 <spi_cmd_complete+0x8d4>)
   21e8a:	0018      	movs	r0, r3
   21e8c:	4b12      	ldr	r3, [pc, #72]	; (21ed8 <spi_cmd_complete+0x8d8>)
   21e8e:	4798      	blx	r3
   21e90:	4b17      	ldr	r3, [pc, #92]	; (21ef0 <spi_cmd_complete+0x8f0>)
   21e92:	0018      	movs	r0, r3
   21e94:	4b10      	ldr	r3, [pc, #64]	; (21ed8 <spi_cmd_complete+0x8d8>)
   21e96:	4798      	blx	r3
   21e98:	4b11      	ldr	r3, [pc, #68]	; (21ee0 <spi_cmd_complete+0x8e0>)
   21e9a:	0018      	movs	r0, r3
   21e9c:	4b0e      	ldr	r3, [pc, #56]	; (21ed8 <spi_cmd_complete+0x8d8>)
   21e9e:	4798      	blx	r3
							result = N_FAIL;
   21ea0:	2300      	movs	r3, #0
   21ea2:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   21ea4:	e00d      	b.n	21ec2 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   21ea6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   21ea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   21eaa:	18d3      	adds	r3, r2, r3
   21eac:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   21eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   21eb0:	683a      	ldr	r2, [r7, #0]
   21eb2:	1ad3      	subs	r3, r2, r3
   21eb4:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   21eb6:	683b      	ldr	r3, [r7, #0]
   21eb8:	2b00      	cmp	r3, #0
   21eba:	d000      	beq.n	21ebe <spi_cmd_complete+0x8be>
   21ebc:	e77e      	b.n	21dbc <spi_cmd_complete+0x7bc>
   21ebe:	e000      	b.n	21ec2 <spi_cmd_complete+0x8c2>
						break;
   21ec0:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   21ec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   21ec4:	0018      	movs	r0, r3
   21ec6:	46bd      	mov	sp, r7
   21ec8:	b01f      	add	sp, #124	; 0x7c
   21eca:	bd90      	pop	{r4, r7, pc}
   21ecc:	00020f39 	.word	0x00020f39
   21ed0:	000367e0 	.word	0x000367e0
   21ed4:	000361cc 	.word	0x000361cc
   21ed8:	0001baed 	.word	0x0001baed
   21edc:	00036430 	.word	0x00036430
   21ee0:	0003620c 	.word	0x0003620c
   21ee4:	000363c4 	.word	0x000363c4
   21ee8:	20003d08 	.word	0x20003d08
   21eec:	000002d2 	.word	0x000002d2
   21ef0:	000363f8 	.word	0x000363f8

00021ef4 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   21ef4:	b580      	push	{r7, lr}
   21ef6:	b086      	sub	sp, #24
   21ef8:	af00      	add	r7, sp, #0
   21efa:	6078      	str	r0, [r7, #4]
   21efc:	000a      	movs	r2, r1
   21efe:	1cbb      	adds	r3, r7, #2
   21f00:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   21f02:	2313      	movs	r3, #19
   21f04:	18fb      	adds	r3, r7, r3
   21f06:	2201      	movs	r2, #1
   21f08:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   21f0a:	230c      	movs	r3, #12
   21f0c:	18fb      	adds	r3, r7, r3
   21f0e:	2200      	movs	r2, #0
   21f10:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   21f12:	2316      	movs	r3, #22
   21f14:	18fb      	adds	r3, r7, r3
   21f16:	2200      	movs	r2, #0
   21f18:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   21f1a:	1cbb      	adds	r3, r7, #2
   21f1c:	881a      	ldrh	r2, [r3, #0]
   21f1e:	2380      	movs	r3, #128	; 0x80
   21f20:	019b      	lsls	r3, r3, #6
   21f22:	429a      	cmp	r2, r3
   21f24:	d805      	bhi.n	21f32 <spi_data_write+0x3e>
			nbytes = sz;
   21f26:	2314      	movs	r3, #20
   21f28:	18fb      	adds	r3, r7, r3
   21f2a:	1cba      	adds	r2, r7, #2
   21f2c:	8812      	ldrh	r2, [r2, #0]
   21f2e:	801a      	strh	r2, [r3, #0]
   21f30:	e004      	b.n	21f3c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   21f32:	2314      	movs	r3, #20
   21f34:	18fb      	adds	r3, r7, r3
   21f36:	2280      	movs	r2, #128	; 0x80
   21f38:	0192      	lsls	r2, r2, #6
   21f3a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   21f3c:	2311      	movs	r3, #17
   21f3e:	18fb      	adds	r3, r7, r3
   21f40:	22f0      	movs	r2, #240	; 0xf0
   21f42:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   21f44:	2316      	movs	r3, #22
   21f46:	18fb      	adds	r3, r7, r3
   21f48:	2200      	movs	r2, #0
   21f4a:	5e9b      	ldrsh	r3, [r3, r2]
   21f4c:	2b00      	cmp	r3, #0
   21f4e:	d10f      	bne.n	21f70 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   21f50:	1cbb      	adds	r3, r7, #2
   21f52:	881a      	ldrh	r2, [r3, #0]
   21f54:	2380      	movs	r3, #128	; 0x80
   21f56:	019b      	lsls	r3, r3, #6
   21f58:	429a      	cmp	r2, r3
   21f5a:	d804      	bhi.n	21f66 <spi_data_write+0x72>
				order = 0x3;
   21f5c:	2312      	movs	r3, #18
   21f5e:	18fb      	adds	r3, r7, r3
   21f60:	2203      	movs	r2, #3
   21f62:	701a      	strb	r2, [r3, #0]
   21f64:	e013      	b.n	21f8e <spi_data_write+0x9a>
			else
				order = 0x1;
   21f66:	2312      	movs	r3, #18
   21f68:	18fb      	adds	r3, r7, r3
   21f6a:	2201      	movs	r2, #1
   21f6c:	701a      	strb	r2, [r3, #0]
   21f6e:	e00e      	b.n	21f8e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   21f70:	1cbb      	adds	r3, r7, #2
   21f72:	881a      	ldrh	r2, [r3, #0]
   21f74:	2380      	movs	r3, #128	; 0x80
   21f76:	019b      	lsls	r3, r3, #6
   21f78:	429a      	cmp	r2, r3
   21f7a:	d804      	bhi.n	21f86 <spi_data_write+0x92>
				order = 0x3;
   21f7c:	2312      	movs	r3, #18
   21f7e:	18fb      	adds	r3, r7, r3
   21f80:	2203      	movs	r2, #3
   21f82:	701a      	strb	r2, [r3, #0]
   21f84:	e003      	b.n	21f8e <spi_data_write+0x9a>
			else
				order = 0x2;
   21f86:	2312      	movs	r3, #18
   21f88:	18fb      	adds	r3, r7, r3
   21f8a:	2202      	movs	r2, #2
   21f8c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   21f8e:	2311      	movs	r3, #17
   21f90:	18fb      	adds	r3, r7, r3
   21f92:	781a      	ldrb	r2, [r3, #0]
   21f94:	2312      	movs	r3, #18
   21f96:	18fb      	adds	r3, r7, r3
   21f98:	781b      	ldrb	r3, [r3, #0]
   21f9a:	4313      	orrs	r3, r2
   21f9c:	b2da      	uxtb	r2, r3
   21f9e:	2311      	movs	r3, #17
   21fa0:	18fb      	adds	r3, r7, r3
   21fa2:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   21fa4:	2311      	movs	r3, #17
   21fa6:	18fb      	adds	r3, r7, r3
   21fa8:	2101      	movs	r1, #1
   21faa:	0018      	movs	r0, r3
   21fac:	4b3c      	ldr	r3, [pc, #240]	; (220a0 <spi_data_write+0x1ac>)
   21fae:	4798      	blx	r3
   21fb0:	1e03      	subs	r3, r0, #0
   21fb2:	d012      	beq.n	21fda <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   21fb4:	4a3b      	ldr	r2, [pc, #236]	; (220a4 <spi_data_write+0x1b0>)
   21fb6:	493c      	ldr	r1, [pc, #240]	; (220a8 <spi_data_write+0x1b4>)
   21fb8:	4b3c      	ldr	r3, [pc, #240]	; (220ac <spi_data_write+0x1b8>)
   21fba:	0018      	movs	r0, r3
   21fbc:	4b3c      	ldr	r3, [pc, #240]	; (220b0 <spi_data_write+0x1bc>)
   21fbe:	4798      	blx	r3
   21fc0:	4b3c      	ldr	r3, [pc, #240]	; (220b4 <spi_data_write+0x1c0>)
   21fc2:	0018      	movs	r0, r3
   21fc4:	4b3a      	ldr	r3, [pc, #232]	; (220b0 <spi_data_write+0x1bc>)
   21fc6:	4798      	blx	r3
   21fc8:	4b3b      	ldr	r3, [pc, #236]	; (220b8 <spi_data_write+0x1c4>)
   21fca:	0018      	movs	r0, r3
   21fcc:	4b38      	ldr	r3, [pc, #224]	; (220b0 <spi_data_write+0x1bc>)
   21fce:	4798      	blx	r3
			result = N_FAIL;
   21fd0:	2313      	movs	r3, #19
   21fd2:	18fb      	adds	r3, r7, r3
   21fd4:	2200      	movs	r2, #0
   21fd6:	701a      	strb	r2, [r3, #0]
			break;
   21fd8:	e059      	b.n	2208e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   21fda:	2316      	movs	r3, #22
   21fdc:	18fb      	adds	r3, r7, r3
   21fde:	2200      	movs	r2, #0
   21fe0:	5e9b      	ldrsh	r3, [r3, r2]
   21fe2:	687a      	ldr	r2, [r7, #4]
   21fe4:	18d2      	adds	r2, r2, r3
   21fe6:	2314      	movs	r3, #20
   21fe8:	18fb      	adds	r3, r7, r3
   21fea:	881b      	ldrh	r3, [r3, #0]
   21fec:	0019      	movs	r1, r3
   21fee:	0010      	movs	r0, r2
   21ff0:	4b2b      	ldr	r3, [pc, #172]	; (220a0 <spi_data_write+0x1ac>)
   21ff2:	4798      	blx	r3
   21ff4:	1e03      	subs	r3, r0, #0
   21ff6:	d012      	beq.n	2201e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   21ff8:	4a30      	ldr	r2, [pc, #192]	; (220bc <spi_data_write+0x1c8>)
   21ffa:	492b      	ldr	r1, [pc, #172]	; (220a8 <spi_data_write+0x1b4>)
   21ffc:	4b2b      	ldr	r3, [pc, #172]	; (220ac <spi_data_write+0x1b8>)
   21ffe:	0018      	movs	r0, r3
   22000:	4b2b      	ldr	r3, [pc, #172]	; (220b0 <spi_data_write+0x1bc>)
   22002:	4798      	blx	r3
   22004:	4b2e      	ldr	r3, [pc, #184]	; (220c0 <spi_data_write+0x1cc>)
   22006:	0018      	movs	r0, r3
   22008:	4b29      	ldr	r3, [pc, #164]	; (220b0 <spi_data_write+0x1bc>)
   2200a:	4798      	blx	r3
   2200c:	4b2a      	ldr	r3, [pc, #168]	; (220b8 <spi_data_write+0x1c4>)
   2200e:	0018      	movs	r0, r3
   22010:	4b27      	ldr	r3, [pc, #156]	; (220b0 <spi_data_write+0x1bc>)
   22012:	4798      	blx	r3
			result = N_FAIL;
   22014:	2313      	movs	r3, #19
   22016:	18fb      	adds	r3, r7, r3
   22018:	2200      	movs	r2, #0
   2201a:	701a      	strb	r2, [r3, #0]
			break;
   2201c:	e037      	b.n	2208e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   2201e:	4b29      	ldr	r3, [pc, #164]	; (220c4 <spi_data_write+0x1d0>)
   22020:	781b      	ldrb	r3, [r3, #0]
   22022:	2b00      	cmp	r3, #0
   22024:	d11b      	bne.n	2205e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   22026:	230c      	movs	r3, #12
   22028:	18fb      	adds	r3, r7, r3
   2202a:	2102      	movs	r1, #2
   2202c:	0018      	movs	r0, r3
   2202e:	4b1c      	ldr	r3, [pc, #112]	; (220a0 <spi_data_write+0x1ac>)
   22030:	4798      	blx	r3
   22032:	1e03      	subs	r3, r0, #0
   22034:	d013      	beq.n	2205e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   22036:	23d7      	movs	r3, #215	; 0xd7
   22038:	009a      	lsls	r2, r3, #2
   2203a:	491b      	ldr	r1, [pc, #108]	; (220a8 <spi_data_write+0x1b4>)
   2203c:	4b1b      	ldr	r3, [pc, #108]	; (220ac <spi_data_write+0x1b8>)
   2203e:	0018      	movs	r0, r3
   22040:	4b1b      	ldr	r3, [pc, #108]	; (220b0 <spi_data_write+0x1bc>)
   22042:	4798      	blx	r3
   22044:	4b20      	ldr	r3, [pc, #128]	; (220c8 <spi_data_write+0x1d4>)
   22046:	0018      	movs	r0, r3
   22048:	4b19      	ldr	r3, [pc, #100]	; (220b0 <spi_data_write+0x1bc>)
   2204a:	4798      	blx	r3
   2204c:	4b1a      	ldr	r3, [pc, #104]	; (220b8 <spi_data_write+0x1c4>)
   2204e:	0018      	movs	r0, r3
   22050:	4b17      	ldr	r3, [pc, #92]	; (220b0 <spi_data_write+0x1bc>)
   22052:	4798      	blx	r3
				result = N_FAIL;
   22054:	2313      	movs	r3, #19
   22056:	18fb      	adds	r3, r7, r3
   22058:	2200      	movs	r2, #0
   2205a:	701a      	strb	r2, [r3, #0]
				break;
   2205c:	e017      	b.n	2208e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   2205e:	2316      	movs	r3, #22
   22060:	18fb      	adds	r3, r7, r3
   22062:	881a      	ldrh	r2, [r3, #0]
   22064:	2314      	movs	r3, #20
   22066:	18fb      	adds	r3, r7, r3
   22068:	881b      	ldrh	r3, [r3, #0]
   2206a:	18d3      	adds	r3, r2, r3
   2206c:	b29a      	uxth	r2, r3
   2206e:	2316      	movs	r3, #22
   22070:	18fb      	adds	r3, r7, r3
   22072:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   22074:	1cbb      	adds	r3, r7, #2
   22076:	1cb9      	adds	r1, r7, #2
   22078:	2214      	movs	r2, #20
   2207a:	18ba      	adds	r2, r7, r2
   2207c:	8809      	ldrh	r1, [r1, #0]
   2207e:	8812      	ldrh	r2, [r2, #0]
   22080:	1a8a      	subs	r2, r1, r2
   22082:	801a      	strh	r2, [r3, #0]
	} while (sz);
   22084:	1cbb      	adds	r3, r7, #2
   22086:	881b      	ldrh	r3, [r3, #0]
   22088:	2b00      	cmp	r3, #0
   2208a:	d000      	beq.n	2208e <spi_data_write+0x19a>
   2208c:	e745      	b.n	21f1a <spi_data_write+0x26>


	return result;
   2208e:	2313      	movs	r3, #19
   22090:	18fb      	adds	r3, r7, r3
   22092:	781b      	ldrb	r3, [r3, #0]
   22094:	b25b      	sxtb	r3, r3
}
   22096:	0018      	movs	r0, r3
   22098:	46bd      	mov	sp, r7
   2209a:	b006      	add	sp, #24
   2209c:	bd80      	pop	{r7, pc}
   2209e:	46c0      	nop			; (mov r8, r8)
   220a0:	00020f7d 	.word	0x00020f7d
   220a4:	00000349 	.word	0x00000349
   220a8:	000367f4 	.word	0x000367f4
   220ac:	000361cc 	.word	0x000361cc
   220b0:	0001baed 	.word	0x0001baed
   220b4:	00036494 	.word	0x00036494
   220b8:	0003620c 	.word	0x0003620c
   220bc:	00000352 	.word	0x00000352
   220c0:	000364cc 	.word	0x000364cc
   220c4:	20003d08 	.word	0x20003d08
   220c8:	00036500 	.word	0x00036500

000220cc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   220cc:	b590      	push	{r4, r7, lr}
   220ce:	b087      	sub	sp, #28
   220d0:	af02      	add	r7, sp, #8
   220d2:	6078      	str	r0, [r7, #4]
   220d4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   220d6:	230f      	movs	r3, #15
   220d8:	18fb      	adds	r3, r7, r3
   220da:	220a      	movs	r2, #10
   220dc:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   220de:	230c      	movs	r3, #12
   220e0:	18fb      	adds	r3, r7, r3
   220e2:	2201      	movs	r2, #1
   220e4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   220e6:	230e      	movs	r3, #14
   220e8:	18fb      	adds	r3, r7, r3
   220ea:	22c9      	movs	r2, #201	; 0xc9
   220ec:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   220ee:	230d      	movs	r3, #13
   220f0:	18fb      	adds	r3, r7, r3
   220f2:	2200      	movs	r2, #0
   220f4:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   220f6:	687b      	ldr	r3, [r7, #4]
   220f8:	2b30      	cmp	r3, #48	; 0x30
   220fa:	d808      	bhi.n	2210e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   220fc:	230e      	movs	r3, #14
   220fe:	18fb      	adds	r3, r7, r3
   22100:	22c3      	movs	r2, #195	; 0xc3
   22102:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   22104:	230d      	movs	r3, #13
   22106:	18fb      	adds	r3, r7, r3
   22108:	2201      	movs	r2, #1
   2210a:	701a      	strb	r2, [r3, #0]
   2210c:	e007      	b.n	2211e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   2210e:	230e      	movs	r3, #14
   22110:	18fb      	adds	r3, r7, r3
   22112:	22c9      	movs	r2, #201	; 0xc9
   22114:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   22116:	230d      	movs	r3, #13
   22118:	18fb      	adds	r3, r7, r3
   2211a:	2200      	movs	r2, #0
   2211c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   2211e:	003a      	movs	r2, r7
   22120:	6879      	ldr	r1, [r7, #4]
   22122:	230e      	movs	r3, #14
   22124:	18fb      	adds	r3, r7, r3
   22126:	7818      	ldrb	r0, [r3, #0]
   22128:	230d      	movs	r3, #13
   2212a:	18fb      	adds	r3, r7, r3
   2212c:	781b      	ldrb	r3, [r3, #0]
   2212e:	9300      	str	r3, [sp, #0]
   22130:	2304      	movs	r3, #4
   22132:	4c2e      	ldr	r4, [pc, #184]	; (221ec <spi_write_reg+0x120>)
   22134:	47a0      	blx	r4
   22136:	0002      	movs	r2, r0
   22138:	230c      	movs	r3, #12
   2213a:	18fb      	adds	r3, r7, r3
   2213c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2213e:	230c      	movs	r3, #12
   22140:	18fb      	adds	r3, r7, r3
   22142:	781b      	ldrb	r3, [r3, #0]
   22144:	b25b      	sxtb	r3, r3
   22146:	2b01      	cmp	r3, #1
   22148:	d010      	beq.n	2216c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   2214a:	4a29      	ldr	r2, [pc, #164]	; (221f0 <spi_write_reg+0x124>)
   2214c:	4929      	ldr	r1, [pc, #164]	; (221f4 <spi_write_reg+0x128>)
   2214e:	4b2a      	ldr	r3, [pc, #168]	; (221f8 <spi_write_reg+0x12c>)
   22150:	0018      	movs	r0, r3
   22152:	4b2a      	ldr	r3, [pc, #168]	; (221fc <spi_write_reg+0x130>)
   22154:	4798      	blx	r3
   22156:	687a      	ldr	r2, [r7, #4]
   22158:	4b29      	ldr	r3, [pc, #164]	; (22200 <spi_write_reg+0x134>)
   2215a:	0011      	movs	r1, r2
   2215c:	0018      	movs	r0, r3
   2215e:	4b27      	ldr	r3, [pc, #156]	; (221fc <spi_write_reg+0x130>)
   22160:	4798      	blx	r3
   22162:	4b28      	ldr	r3, [pc, #160]	; (22204 <spi_write_reg+0x138>)
   22164:	0018      	movs	r0, r3
   22166:	4b25      	ldr	r3, [pc, #148]	; (221fc <spi_write_reg+0x130>)
   22168:	4798      	blx	r3
		goto _FAIL_;
   2216a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   2216c:	230c      	movs	r3, #12
   2216e:	18fb      	adds	r3, r7, r3
   22170:	781b      	ldrb	r3, [r3, #0]
   22172:	b25b      	sxtb	r3, r3
   22174:	2b01      	cmp	r3, #1
   22176:	d030      	beq.n	221da <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   22178:	2001      	movs	r0, #1
   2217a:	4b23      	ldr	r3, [pc, #140]	; (22208 <spi_write_reg+0x13c>)
   2217c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2217e:	2300      	movs	r3, #0
   22180:	9300      	str	r3, [sp, #0]
   22182:	2300      	movs	r3, #0
   22184:	2200      	movs	r2, #0
   22186:	2100      	movs	r1, #0
   22188:	20cf      	movs	r0, #207	; 0xcf
   2218a:	4c20      	ldr	r4, [pc, #128]	; (2220c <spi_write_reg+0x140>)
   2218c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2218e:	20cf      	movs	r0, #207	; 0xcf
   22190:	4b1f      	ldr	r3, [pc, #124]	; (22210 <spi_write_reg+0x144>)
   22192:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   22194:	23ea      	movs	r3, #234	; 0xea
   22196:	009a      	lsls	r2, r3, #2
   22198:	4916      	ldr	r1, [pc, #88]	; (221f4 <spi_write_reg+0x128>)
   2219a:	4b17      	ldr	r3, [pc, #92]	; (221f8 <spi_write_reg+0x12c>)
   2219c:	0018      	movs	r0, r3
   2219e:	4b17      	ldr	r3, [pc, #92]	; (221fc <spi_write_reg+0x130>)
   221a0:	4798      	blx	r3
   221a2:	230f      	movs	r3, #15
   221a4:	18fb      	adds	r3, r7, r3
   221a6:	7819      	ldrb	r1, [r3, #0]
   221a8:	683b      	ldr	r3, [r7, #0]
   221aa:	687a      	ldr	r2, [r7, #4]
   221ac:	4819      	ldr	r0, [pc, #100]	; (22214 <spi_write_reg+0x148>)
   221ae:	4c13      	ldr	r4, [pc, #76]	; (221fc <spi_write_reg+0x130>)
   221b0:	47a0      	blx	r4
   221b2:	4b14      	ldr	r3, [pc, #80]	; (22204 <spi_write_reg+0x138>)
   221b4:	0018      	movs	r0, r3
   221b6:	4b11      	ldr	r3, [pc, #68]	; (221fc <spi_write_reg+0x130>)
   221b8:	4798      	blx	r3
		nm_bsp_sleep(1);
   221ba:	2001      	movs	r0, #1
   221bc:	4b12      	ldr	r3, [pc, #72]	; (22208 <spi_write_reg+0x13c>)
   221be:	4798      	blx	r3
		retry--;
   221c0:	230f      	movs	r3, #15
   221c2:	18fb      	adds	r3, r7, r3
   221c4:	781a      	ldrb	r2, [r3, #0]
   221c6:	230f      	movs	r3, #15
   221c8:	18fb      	adds	r3, r7, r3
   221ca:	3a01      	subs	r2, #1
   221cc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   221ce:	230f      	movs	r3, #15
   221d0:	18fb      	adds	r3, r7, r3
   221d2:	781b      	ldrb	r3, [r3, #0]
   221d4:	2b00      	cmp	r3, #0
   221d6:	d000      	beq.n	221da <spi_write_reg+0x10e>
   221d8:	e78d      	b.n	220f6 <spi_write_reg+0x2a>
	}

	return result;
   221da:	230c      	movs	r3, #12
   221dc:	18fb      	adds	r3, r7, r3
   221de:	781b      	ldrb	r3, [r3, #0]
   221e0:	b25b      	sxtb	r3, r3
}
   221e2:	0018      	movs	r0, r3
   221e4:	46bd      	mov	sp, r7
   221e6:	b005      	add	sp, #20
   221e8:	bd90      	pop	{r4, r7, pc}
   221ea:	46c0      	nop			; (mov r8, r8)
   221ec:	00021601 	.word	0x00021601
   221f0:	0000039d 	.word	0x0000039d
   221f4:	00036804 	.word	0x00036804
   221f8:	000361cc 	.word	0x000361cc
   221fc:	0001baed 	.word	0x0001baed
   22200:	00036538 	.word	0x00036538
   22204:	0003620c 	.word	0x0003620c
   22208:	0001df41 	.word	0x0001df41
   2220c:	00021085 	.word	0x00021085
   22210:	000214c5 	.word	0x000214c5
   22214:	00036564 	.word	0x00036564

00022218 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   22218:	b590      	push	{r4, r7, lr}
   2221a:	b089      	sub	sp, #36	; 0x24
   2221c:	af02      	add	r7, sp, #8
   2221e:	60f8      	str	r0, [r7, #12]
   22220:	60b9      	str	r1, [r7, #8]
   22222:	1dbb      	adds	r3, r7, #6
   22224:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   22226:	2316      	movs	r3, #22
   22228:	18fb      	adds	r3, r7, r3
   2222a:	220a      	movs	r2, #10
   2222c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   2222e:	2315      	movs	r3, #21
   22230:	18fb      	adds	r3, r7, r3
   22232:	22c7      	movs	r2, #199	; 0xc7
   22234:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   22236:	1dbb      	adds	r3, r7, #6
   22238:	881a      	ldrh	r2, [r3, #0]
   2223a:	68f9      	ldr	r1, [r7, #12]
   2223c:	2315      	movs	r3, #21
   2223e:	18fb      	adds	r3, r7, r3
   22240:	7818      	ldrb	r0, [r3, #0]
   22242:	2300      	movs	r3, #0
   22244:	9300      	str	r3, [sp, #0]
   22246:	0013      	movs	r3, r2
   22248:	2200      	movs	r2, #0
   2224a:	4c4d      	ldr	r4, [pc, #308]	; (22380 <nm_spi_write+0x168>)
   2224c:	47a0      	blx	r4
   2224e:	0002      	movs	r2, r0
   22250:	2317      	movs	r3, #23
   22252:	18fb      	adds	r3, r7, r3
   22254:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   22256:	2317      	movs	r3, #23
   22258:	18fb      	adds	r3, r7, r3
   2225a:	781b      	ldrb	r3, [r3, #0]
   2225c:	b25b      	sxtb	r3, r3
   2225e:	2b01      	cmp	r3, #1
   22260:	d010      	beq.n	22284 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   22262:	4a48      	ldr	r2, [pc, #288]	; (22384 <nm_spi_write+0x16c>)
   22264:	4948      	ldr	r1, [pc, #288]	; (22388 <nm_spi_write+0x170>)
   22266:	4b49      	ldr	r3, [pc, #292]	; (2238c <nm_spi_write+0x174>)
   22268:	0018      	movs	r0, r3
   2226a:	4b49      	ldr	r3, [pc, #292]	; (22390 <nm_spi_write+0x178>)
   2226c:	4798      	blx	r3
   2226e:	68fa      	ldr	r2, [r7, #12]
   22270:	4b48      	ldr	r3, [pc, #288]	; (22394 <nm_spi_write+0x17c>)
   22272:	0011      	movs	r1, r2
   22274:	0018      	movs	r0, r3
   22276:	4b46      	ldr	r3, [pc, #280]	; (22390 <nm_spi_write+0x178>)
   22278:	4798      	blx	r3
   2227a:	4b47      	ldr	r3, [pc, #284]	; (22398 <nm_spi_write+0x180>)
   2227c:	0018      	movs	r0, r3
   2227e:	4b44      	ldr	r3, [pc, #272]	; (22390 <nm_spi_write+0x178>)
   22280:	4798      	blx	r3
		goto _FAIL_;
   22282:	e03e      	b.n	22302 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   22284:	2317      	movs	r3, #23
   22286:	18fc      	adds	r4, r7, r3
   22288:	1dbb      	adds	r3, r7, #6
   2228a:	881a      	ldrh	r2, [r3, #0]
   2228c:	68bb      	ldr	r3, [r7, #8]
   2228e:	0011      	movs	r1, r2
   22290:	0018      	movs	r0, r3
   22292:	4b42      	ldr	r3, [pc, #264]	; (2239c <nm_spi_write+0x184>)
   22294:	4798      	blx	r3
   22296:	0003      	movs	r3, r0
   22298:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2229a:	2317      	movs	r3, #23
   2229c:	18fb      	adds	r3, r7, r3
   2229e:	781b      	ldrb	r3, [r3, #0]
   222a0:	b25b      	sxtb	r3, r3
   222a2:	2b01      	cmp	r3, #1
   222a4:	d00e      	beq.n	222c4 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   222a6:	4a3e      	ldr	r2, [pc, #248]	; (223a0 <nm_spi_write+0x188>)
   222a8:	4937      	ldr	r1, [pc, #220]	; (22388 <nm_spi_write+0x170>)
   222aa:	4b38      	ldr	r3, [pc, #224]	; (2238c <nm_spi_write+0x174>)
   222ac:	0018      	movs	r0, r3
   222ae:	4b38      	ldr	r3, [pc, #224]	; (22390 <nm_spi_write+0x178>)
   222b0:	4798      	blx	r3
   222b2:	4b3c      	ldr	r3, [pc, #240]	; (223a4 <nm_spi_write+0x18c>)
   222b4:	0018      	movs	r0, r3
   222b6:	4b36      	ldr	r3, [pc, #216]	; (22390 <nm_spi_write+0x178>)
   222b8:	4798      	blx	r3
   222ba:	4b37      	ldr	r3, [pc, #220]	; (22398 <nm_spi_write+0x180>)
   222bc:	0018      	movs	r0, r3
   222be:	4b34      	ldr	r3, [pc, #208]	; (22390 <nm_spi_write+0x178>)
   222c0:	4798      	blx	r3
		goto _FAIL_;
   222c2:	e01e      	b.n	22302 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   222c4:	2317      	movs	r3, #23
   222c6:	18fc      	adds	r4, r7, r3
   222c8:	2315      	movs	r3, #21
   222ca:	18fb      	adds	r3, r7, r3
   222cc:	781b      	ldrb	r3, [r3, #0]
   222ce:	0018      	movs	r0, r3
   222d0:	4b35      	ldr	r3, [pc, #212]	; (223a8 <nm_spi_write+0x190>)
   222d2:	4798      	blx	r3
   222d4:	0003      	movs	r3, r0
   222d6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   222d8:	2317      	movs	r3, #23
   222da:	18fb      	adds	r3, r7, r3
   222dc:	781b      	ldrb	r3, [r3, #0]
   222de:	b25b      	sxtb	r3, r3
   222e0:	2b01      	cmp	r3, #1
   222e2:	d00e      	beq.n	22302 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   222e4:	4a31      	ldr	r2, [pc, #196]	; (223ac <nm_spi_write+0x194>)
   222e6:	4928      	ldr	r1, [pc, #160]	; (22388 <nm_spi_write+0x170>)
   222e8:	4b28      	ldr	r3, [pc, #160]	; (2238c <nm_spi_write+0x174>)
   222ea:	0018      	movs	r0, r3
   222ec:	4b28      	ldr	r3, [pc, #160]	; (22390 <nm_spi_write+0x178>)
   222ee:	4798      	blx	r3
   222f0:	4b2c      	ldr	r3, [pc, #176]	; (223a4 <nm_spi_write+0x18c>)
   222f2:	0018      	movs	r0, r3
   222f4:	4b26      	ldr	r3, [pc, #152]	; (22390 <nm_spi_write+0x178>)
   222f6:	4798      	blx	r3
   222f8:	4b27      	ldr	r3, [pc, #156]	; (22398 <nm_spi_write+0x180>)
   222fa:	0018      	movs	r0, r3
   222fc:	4b24      	ldr	r3, [pc, #144]	; (22390 <nm_spi_write+0x178>)
   222fe:	4798      	blx	r3
		goto _FAIL_;
   22300:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   22302:	2317      	movs	r3, #23
   22304:	18fb      	adds	r3, r7, r3
   22306:	781b      	ldrb	r3, [r3, #0]
   22308:	b25b      	sxtb	r3, r3
   2230a:	2b01      	cmp	r3, #1
   2230c:	d030      	beq.n	22370 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   2230e:	2001      	movs	r0, #1
   22310:	4b27      	ldr	r3, [pc, #156]	; (223b0 <nm_spi_write+0x198>)
   22312:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   22314:	2300      	movs	r3, #0
   22316:	9300      	str	r3, [sp, #0]
   22318:	2300      	movs	r3, #0
   2231a:	2200      	movs	r2, #0
   2231c:	2100      	movs	r1, #0
   2231e:	20cf      	movs	r0, #207	; 0xcf
   22320:	4c24      	ldr	r4, [pc, #144]	; (223b4 <nm_spi_write+0x19c>)
   22322:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   22324:	20cf      	movs	r0, #207	; 0xcf
   22326:	4b24      	ldr	r3, [pc, #144]	; (223b8 <nm_spi_write+0x1a0>)
   22328:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2232a:	4a24      	ldr	r2, [pc, #144]	; (223bc <nm_spi_write+0x1a4>)
   2232c:	4916      	ldr	r1, [pc, #88]	; (22388 <nm_spi_write+0x170>)
   2232e:	4b17      	ldr	r3, [pc, #92]	; (2238c <nm_spi_write+0x174>)
   22330:	0018      	movs	r0, r3
   22332:	4b17      	ldr	r3, [pc, #92]	; (22390 <nm_spi_write+0x178>)
   22334:	4798      	blx	r3
   22336:	2316      	movs	r3, #22
   22338:	18fb      	adds	r3, r7, r3
   2233a:	7819      	ldrb	r1, [r3, #0]
   2233c:	1dbb      	adds	r3, r7, #6
   2233e:	881b      	ldrh	r3, [r3, #0]
   22340:	68fa      	ldr	r2, [r7, #12]
   22342:	481f      	ldr	r0, [pc, #124]	; (223c0 <nm_spi_write+0x1a8>)
   22344:	4c12      	ldr	r4, [pc, #72]	; (22390 <nm_spi_write+0x178>)
   22346:	47a0      	blx	r4
   22348:	4b13      	ldr	r3, [pc, #76]	; (22398 <nm_spi_write+0x180>)
   2234a:	0018      	movs	r0, r3
   2234c:	4b10      	ldr	r3, [pc, #64]	; (22390 <nm_spi_write+0x178>)
   2234e:	4798      	blx	r3
		nm_bsp_sleep(1);
   22350:	2001      	movs	r0, #1
   22352:	4b17      	ldr	r3, [pc, #92]	; (223b0 <nm_spi_write+0x198>)
   22354:	4798      	blx	r3
		retry--;
   22356:	2316      	movs	r3, #22
   22358:	18fb      	adds	r3, r7, r3
   2235a:	781a      	ldrb	r2, [r3, #0]
   2235c:	2316      	movs	r3, #22
   2235e:	18fb      	adds	r3, r7, r3
   22360:	3a01      	subs	r2, #1
   22362:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   22364:	2316      	movs	r3, #22
   22366:	18fb      	adds	r3, r7, r3
   22368:	781b      	ldrb	r3, [r3, #0]
   2236a:	2b00      	cmp	r3, #0
   2236c:	d000      	beq.n	22370 <nm_spi_write+0x158>
   2236e:	e762      	b.n	22236 <nm_spi_write+0x1e>
	}


	return result;
   22370:	2317      	movs	r3, #23
   22372:	18fb      	adds	r3, r7, r3
   22374:	781b      	ldrb	r3, [r3, #0]
   22376:	b25b      	sxtb	r3, r3
}
   22378:	0018      	movs	r0, r3
   2237a:	46bd      	mov	sp, r7
   2237c:	b007      	add	sp, #28
   2237e:	bd90      	pop	{r4, r7, pc}
   22380:	00021601 	.word	0x00021601
   22384:	000003cf 	.word	0x000003cf
   22388:	00036814 	.word	0x00036814
   2238c:	000361cc 	.word	0x000361cc
   22390:	0001baed 	.word	0x0001baed
   22394:	00036580 	.word	0x00036580
   22398:	0003620c 	.word	0x0003620c
   2239c:	00021ef5 	.word	0x00021ef5
   223a0:	000003d9 	.word	0x000003d9
   223a4:	000365b0 	.word	0x000365b0
   223a8:	000213c5 	.word	0x000213c5
   223ac:	000003e1 	.word	0x000003e1
   223b0:	0001df41 	.word	0x0001df41
   223b4:	00021085 	.word	0x00021085
   223b8:	000214c5 	.word	0x000214c5
   223bc:	000003eb 	.word	0x000003eb
   223c0:	000365d8 	.word	0x000365d8

000223c4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   223c4:	b590      	push	{r4, r7, lr}
   223c6:	b087      	sub	sp, #28
   223c8:	af02      	add	r7, sp, #8
   223ca:	6078      	str	r0, [r7, #4]
   223cc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   223ce:	230f      	movs	r3, #15
   223d0:	18fb      	adds	r3, r7, r3
   223d2:	220a      	movs	r2, #10
   223d4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   223d6:	230c      	movs	r3, #12
   223d8:	18fb      	adds	r3, r7, r3
   223da:	2201      	movs	r2, #1
   223dc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   223de:	230e      	movs	r3, #14
   223e0:	18fb      	adds	r3, r7, r3
   223e2:	22ca      	movs	r2, #202	; 0xca
   223e4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   223e6:	230d      	movs	r3, #13
   223e8:	18fb      	adds	r3, r7, r3
   223ea:	2200      	movs	r2, #0
   223ec:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   223ee:	687b      	ldr	r3, [r7, #4]
   223f0:	2bff      	cmp	r3, #255	; 0xff
   223f2:	d808      	bhi.n	22406 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   223f4:	230e      	movs	r3, #14
   223f6:	18fb      	adds	r3, r7, r3
   223f8:	22c4      	movs	r2, #196	; 0xc4
   223fa:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   223fc:	230d      	movs	r3, #13
   223fe:	18fb      	adds	r3, r7, r3
   22400:	2201      	movs	r2, #1
   22402:	701a      	strb	r2, [r3, #0]
   22404:	e007      	b.n	22416 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   22406:	230e      	movs	r3, #14
   22408:	18fb      	adds	r3, r7, r3
   2240a:	22ca      	movs	r2, #202	; 0xca
   2240c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2240e:	230d      	movs	r3, #13
   22410:	18fb      	adds	r3, r7, r3
   22412:	2200      	movs	r2, #0
   22414:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   22416:	2308      	movs	r3, #8
   22418:	18fa      	adds	r2, r7, r3
   2241a:	6879      	ldr	r1, [r7, #4]
   2241c:	230e      	movs	r3, #14
   2241e:	18fb      	adds	r3, r7, r3
   22420:	7818      	ldrb	r0, [r3, #0]
   22422:	230d      	movs	r3, #13
   22424:	18fb      	adds	r3, r7, r3
   22426:	781b      	ldrb	r3, [r3, #0]
   22428:	9300      	str	r3, [sp, #0]
   2242a:	2304      	movs	r3, #4
   2242c:	4c37      	ldr	r4, [pc, #220]	; (2250c <spi_read_reg+0x148>)
   2242e:	47a0      	blx	r4
   22430:	0002      	movs	r2, r0
   22432:	230c      	movs	r3, #12
   22434:	18fb      	adds	r3, r7, r3
   22436:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   22438:	230c      	movs	r3, #12
   2243a:	18fb      	adds	r3, r7, r3
   2243c:	781b      	ldrb	r3, [r3, #0]
   2243e:	b25b      	sxtb	r3, r3
   22440:	2b01      	cmp	r3, #1
   22442:	d010      	beq.n	22466 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   22444:	4a32      	ldr	r2, [pc, #200]	; (22510 <spi_read_reg+0x14c>)
   22446:	4933      	ldr	r1, [pc, #204]	; (22514 <spi_read_reg+0x150>)
   22448:	4b33      	ldr	r3, [pc, #204]	; (22518 <spi_read_reg+0x154>)
   2244a:	0018      	movs	r0, r3
   2244c:	4b33      	ldr	r3, [pc, #204]	; (2251c <spi_read_reg+0x158>)
   2244e:	4798      	blx	r3
   22450:	687a      	ldr	r2, [r7, #4]
   22452:	4b33      	ldr	r3, [pc, #204]	; (22520 <spi_read_reg+0x15c>)
   22454:	0011      	movs	r1, r2
   22456:	0018      	movs	r0, r3
   22458:	4b30      	ldr	r3, [pc, #192]	; (2251c <spi_read_reg+0x158>)
   2245a:	4798      	blx	r3
   2245c:	4b31      	ldr	r3, [pc, #196]	; (22524 <spi_read_reg+0x160>)
   2245e:	0018      	movs	r0, r3
   22460:	4b2e      	ldr	r3, [pc, #184]	; (2251c <spi_read_reg+0x158>)
   22462:	4798      	blx	r3
		goto _FAIL_;
   22464:	e014      	b.n	22490 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   22466:	2308      	movs	r3, #8
   22468:	18fb      	adds	r3, r7, r3
   2246a:	781b      	ldrb	r3, [r3, #0]
   2246c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   2246e:	2308      	movs	r3, #8
   22470:	18fb      	adds	r3, r7, r3
   22472:	785b      	ldrb	r3, [r3, #1]
   22474:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   22476:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   22478:	2308      	movs	r3, #8
   2247a:	18fb      	adds	r3, r7, r3
   2247c:	789b      	ldrb	r3, [r3, #2]
   2247e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   22480:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   22482:	2308      	movs	r3, #8
   22484:	18fb      	adds	r3, r7, r3
   22486:	78db      	ldrb	r3, [r3, #3]
   22488:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2248a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   2248c:	683b      	ldr	r3, [r7, #0]
   2248e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   22490:	230c      	movs	r3, #12
   22492:	18fb      	adds	r3, r7, r3
   22494:	781b      	ldrb	r3, [r3, #0]
   22496:	b25b      	sxtb	r3, r3
   22498:	2b01      	cmp	r3, #1
   2249a:	d02f      	beq.n	224fc <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   2249c:	2001      	movs	r0, #1
   2249e:	4b22      	ldr	r3, [pc, #136]	; (22528 <spi_read_reg+0x164>)
   224a0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   224a2:	2300      	movs	r3, #0
   224a4:	9300      	str	r3, [sp, #0]
   224a6:	2300      	movs	r3, #0
   224a8:	2200      	movs	r2, #0
   224aa:	2100      	movs	r1, #0
   224ac:	20cf      	movs	r0, #207	; 0xcf
   224ae:	4c1f      	ldr	r4, [pc, #124]	; (2252c <spi_read_reg+0x168>)
   224b0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   224b2:	20cf      	movs	r0, #207	; 0xcf
   224b4:	4b1e      	ldr	r3, [pc, #120]	; (22530 <spi_read_reg+0x16c>)
   224b6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   224b8:	4a1e      	ldr	r2, [pc, #120]	; (22534 <spi_read_reg+0x170>)
   224ba:	4916      	ldr	r1, [pc, #88]	; (22514 <spi_read_reg+0x150>)
   224bc:	4b16      	ldr	r3, [pc, #88]	; (22518 <spi_read_reg+0x154>)
   224be:	0018      	movs	r0, r3
   224c0:	4b16      	ldr	r3, [pc, #88]	; (2251c <spi_read_reg+0x158>)
   224c2:	4798      	blx	r3
   224c4:	230f      	movs	r3, #15
   224c6:	18fb      	adds	r3, r7, r3
   224c8:	7819      	ldrb	r1, [r3, #0]
   224ca:	687a      	ldr	r2, [r7, #4]
   224cc:	4b1a      	ldr	r3, [pc, #104]	; (22538 <spi_read_reg+0x174>)
   224ce:	0018      	movs	r0, r3
   224d0:	4b12      	ldr	r3, [pc, #72]	; (2251c <spi_read_reg+0x158>)
   224d2:	4798      	blx	r3
   224d4:	4b13      	ldr	r3, [pc, #76]	; (22524 <spi_read_reg+0x160>)
   224d6:	0018      	movs	r0, r3
   224d8:	4b10      	ldr	r3, [pc, #64]	; (2251c <spi_read_reg+0x158>)
   224da:	4798      	blx	r3
		nm_bsp_sleep(1);
   224dc:	2001      	movs	r0, #1
   224de:	4b12      	ldr	r3, [pc, #72]	; (22528 <spi_read_reg+0x164>)
   224e0:	4798      	blx	r3
		retry--;
   224e2:	230f      	movs	r3, #15
   224e4:	18fb      	adds	r3, r7, r3
   224e6:	781a      	ldrb	r2, [r3, #0]
   224e8:	230f      	movs	r3, #15
   224ea:	18fb      	adds	r3, r7, r3
   224ec:	3a01      	subs	r2, #1
   224ee:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   224f0:	230f      	movs	r3, #15
   224f2:	18fb      	adds	r3, r7, r3
   224f4:	781b      	ldrb	r3, [r3, #0]
   224f6:	2b00      	cmp	r3, #0
   224f8:	d000      	beq.n	224fc <spi_read_reg+0x138>
   224fa:	e778      	b.n	223ee <spi_read_reg+0x2a>
	}
		
	return result;
   224fc:	230c      	movs	r3, #12
   224fe:	18fb      	adds	r3, r7, r3
   22500:	781b      	ldrb	r3, [r3, #0]
   22502:	b25b      	sxtb	r3, r3
}
   22504:	0018      	movs	r0, r3
   22506:	46bd      	mov	sp, r7
   22508:	b005      	add	sp, #20
   2250a:	bd90      	pop	{r4, r7, pc}
   2250c:	00021601 	.word	0x00021601
   22510:	00000423 	.word	0x00000423
   22514:	00036824 	.word	0x00036824
   22518:	000361cc 	.word	0x000361cc
   2251c:	0001baed 	.word	0x0001baed
   22520:	000365f4 	.word	0x000365f4
   22524:	0003620c 	.word	0x0003620c
   22528:	0001df41 	.word	0x0001df41
   2252c:	00021085 	.word	0x00021085
   22530:	000214c5 	.word	0x000214c5
   22534:	00000435 	.word	0x00000435
   22538:	00036620 	.word	0x00036620

0002253c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   2253c:	b590      	push	{r4, r7, lr}
   2253e:	b089      	sub	sp, #36	; 0x24
   22540:	af02      	add	r7, sp, #8
   22542:	60f8      	str	r0, [r7, #12]
   22544:	60b9      	str	r1, [r7, #8]
   22546:	1dbb      	adds	r3, r7, #6
   22548:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   2254a:	2316      	movs	r3, #22
   2254c:	18fb      	adds	r3, r7, r3
   2254e:	22c8      	movs	r2, #200	; 0xc8
   22550:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   22552:	2317      	movs	r3, #23
   22554:	18fb      	adds	r3, r7, r3
   22556:	220a      	movs	r2, #10
   22558:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   2255a:	1dbb      	adds	r3, r7, #6
   2255c:	881c      	ldrh	r4, [r3, #0]
   2255e:	68ba      	ldr	r2, [r7, #8]
   22560:	68f9      	ldr	r1, [r7, #12]
   22562:	2316      	movs	r3, #22
   22564:	18fb      	adds	r3, r7, r3
   22566:	7818      	ldrb	r0, [r3, #0]
   22568:	2300      	movs	r3, #0
   2256a:	9300      	str	r3, [sp, #0]
   2256c:	0023      	movs	r3, r4
   2256e:	4c2e      	ldr	r4, [pc, #184]	; (22628 <nm_spi_read+0xec>)
   22570:	47a0      	blx	r4
   22572:	0002      	movs	r2, r0
   22574:	2315      	movs	r3, #21
   22576:	18fb      	adds	r3, r7, r3
   22578:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2257a:	2315      	movs	r3, #21
   2257c:	18fb      	adds	r3, r7, r3
   2257e:	781b      	ldrb	r3, [r3, #0]
   22580:	b25b      	sxtb	r3, r3
   22582:	2b01      	cmp	r3, #1
   22584:	d010      	beq.n	225a8 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   22586:	4a29      	ldr	r2, [pc, #164]	; (2262c <nm_spi_read+0xf0>)
   22588:	4929      	ldr	r1, [pc, #164]	; (22630 <nm_spi_read+0xf4>)
   2258a:	4b2a      	ldr	r3, [pc, #168]	; (22634 <nm_spi_read+0xf8>)
   2258c:	0018      	movs	r0, r3
   2258e:	4b2a      	ldr	r3, [pc, #168]	; (22638 <nm_spi_read+0xfc>)
   22590:	4798      	blx	r3
   22592:	68fa      	ldr	r2, [r7, #12]
   22594:	4b29      	ldr	r3, [pc, #164]	; (2263c <nm_spi_read+0x100>)
   22596:	0011      	movs	r1, r2
   22598:	0018      	movs	r0, r3
   2259a:	4b27      	ldr	r3, [pc, #156]	; (22638 <nm_spi_read+0xfc>)
   2259c:	4798      	blx	r3
   2259e:	4b28      	ldr	r3, [pc, #160]	; (22640 <nm_spi_read+0x104>)
   225a0:	0018      	movs	r0, r3
   225a2:	4b25      	ldr	r3, [pc, #148]	; (22638 <nm_spi_read+0xfc>)
   225a4:	4798      	blx	r3
		goto _FAIL_;
   225a6:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   225a8:	2315      	movs	r3, #21
   225aa:	18fb      	adds	r3, r7, r3
   225ac:	781b      	ldrb	r3, [r3, #0]
   225ae:	b25b      	sxtb	r3, r3
   225b0:	2b01      	cmp	r3, #1
   225b2:	d030      	beq.n	22616 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   225b4:	2001      	movs	r0, #1
   225b6:	4b23      	ldr	r3, [pc, #140]	; (22644 <nm_spi_read+0x108>)
   225b8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   225ba:	2300      	movs	r3, #0
   225bc:	9300      	str	r3, [sp, #0]
   225be:	2300      	movs	r3, #0
   225c0:	2200      	movs	r2, #0
   225c2:	2100      	movs	r1, #0
   225c4:	20cf      	movs	r0, #207	; 0xcf
   225c6:	4c20      	ldr	r4, [pc, #128]	; (22648 <nm_spi_read+0x10c>)
   225c8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   225ca:	20cf      	movs	r0, #207	; 0xcf
   225cc:	4b1f      	ldr	r3, [pc, #124]	; (2264c <nm_spi_read+0x110>)
   225ce:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   225d0:	4a1f      	ldr	r2, [pc, #124]	; (22650 <nm_spi_read+0x114>)
   225d2:	4917      	ldr	r1, [pc, #92]	; (22630 <nm_spi_read+0xf4>)
   225d4:	4b17      	ldr	r3, [pc, #92]	; (22634 <nm_spi_read+0xf8>)
   225d6:	0018      	movs	r0, r3
   225d8:	4b17      	ldr	r3, [pc, #92]	; (22638 <nm_spi_read+0xfc>)
   225da:	4798      	blx	r3
   225dc:	2317      	movs	r3, #23
   225de:	18fb      	adds	r3, r7, r3
   225e0:	7819      	ldrb	r1, [r3, #0]
   225e2:	1dbb      	adds	r3, r7, #6
   225e4:	881b      	ldrh	r3, [r3, #0]
   225e6:	68fa      	ldr	r2, [r7, #12]
   225e8:	481a      	ldr	r0, [pc, #104]	; (22654 <nm_spi_read+0x118>)
   225ea:	4c13      	ldr	r4, [pc, #76]	; (22638 <nm_spi_read+0xfc>)
   225ec:	47a0      	blx	r4
   225ee:	4b14      	ldr	r3, [pc, #80]	; (22640 <nm_spi_read+0x104>)
   225f0:	0018      	movs	r0, r3
   225f2:	4b11      	ldr	r3, [pc, #68]	; (22638 <nm_spi_read+0xfc>)
   225f4:	4798      	blx	r3
		nm_bsp_sleep(1);
   225f6:	2001      	movs	r0, #1
   225f8:	4b12      	ldr	r3, [pc, #72]	; (22644 <nm_spi_read+0x108>)
   225fa:	4798      	blx	r3
		retry--;
   225fc:	2317      	movs	r3, #23
   225fe:	18fb      	adds	r3, r7, r3
   22600:	781a      	ldrb	r2, [r3, #0]
   22602:	2317      	movs	r3, #23
   22604:	18fb      	adds	r3, r7, r3
   22606:	3a01      	subs	r2, #1
   22608:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2260a:	2317      	movs	r3, #23
   2260c:	18fb      	adds	r3, r7, r3
   2260e:	781b      	ldrb	r3, [r3, #0]
   22610:	2b00      	cmp	r3, #0
   22612:	d000      	beq.n	22616 <nm_spi_read+0xda>
   22614:	e7a1      	b.n	2255a <nm_spi_read+0x1e>
	}

	return result;
   22616:	2315      	movs	r3, #21
   22618:	18fb      	adds	r3, r7, r3
   2261a:	781b      	ldrb	r3, [r3, #0]
   2261c:	b25b      	sxtb	r3, r3
}
   2261e:	0018      	movs	r0, r3
   22620:	46bd      	mov	sp, r7
   22622:	b007      	add	sp, #28
   22624:	bd90      	pop	{r4, r7, pc}
   22626:	46c0      	nop			; (mov r8, r8)
   22628:	00021601 	.word	0x00021601
   2262c:	00000472 	.word	0x00000472
   22630:	00036834 	.word	0x00036834
   22634:	000361cc 	.word	0x000361cc
   22638:	0001baed 	.word	0x0001baed
   2263c:	00036638 	.word	0x00036638
   22640:	0003620c 	.word	0x0003620c
   22644:	0001df41 	.word	0x0001df41
   22648:	00021085 	.word	0x00021085
   2264c:	000214c5 	.word	0x000214c5
   22650:	0000047d 	.word	0x0000047d
   22654:	000365d8 	.word	0x000365d8

00022658 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   22658:	b580      	push	{r7, lr}
   2265a:	b082      	sub	sp, #8
   2265c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   2265e:	4b0c      	ldr	r3, [pc, #48]	; (22690 <spi_init_pkt_sz+0x38>)
   22660:	0018      	movs	r0, r3
   22662:	4b0c      	ldr	r3, [pc, #48]	; (22694 <spi_init_pkt_sz+0x3c>)
   22664:	4798      	blx	r3
   22666:	0003      	movs	r3, r0
   22668:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   2266a:	687b      	ldr	r3, [r7, #4]
   2266c:	2270      	movs	r2, #112	; 0x70
   2266e:	4393      	bics	r3, r2
   22670:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   22672:	687b      	ldr	r3, [r7, #4]
   22674:	2250      	movs	r2, #80	; 0x50
   22676:	4313      	orrs	r3, r2
   22678:	607b      	str	r3, [r7, #4]
   2267a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   2267c:	687b      	ldr	r3, [r7, #4]
   2267e:	4a04      	ldr	r2, [pc, #16]	; (22690 <spi_init_pkt_sz+0x38>)
   22680:	0019      	movs	r1, r3
   22682:	0010      	movs	r0, r2
   22684:	4b04      	ldr	r3, [pc, #16]	; (22698 <spi_init_pkt_sz+0x40>)
   22686:	4798      	blx	r3
}
   22688:	46c0      	nop			; (mov r8, r8)
   2268a:	46bd      	mov	sp, r7
   2268c:	b002      	add	sp, #8
   2268e:	bd80      	pop	{r7, pc}
   22690:	0000e824 	.word	0x0000e824
   22694:	00022831 	.word	0x00022831
   22698:	000228a5 	.word	0x000228a5

0002269c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   2269c:	b590      	push	{r4, r7, lr}
   2269e:	b083      	sub	sp, #12
   226a0:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   226a2:	2300      	movs	r3, #0
   226a4:	9300      	str	r3, [sp, #0]
   226a6:	2300      	movs	r3, #0
   226a8:	2200      	movs	r2, #0
   226aa:	2100      	movs	r1, #0
   226ac:	20cf      	movs	r0, #207	; 0xcf
   226ae:	4c05      	ldr	r4, [pc, #20]	; (226c4 <nm_spi_reset+0x28>)
   226b0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   226b2:	20cf      	movs	r0, #207	; 0xcf
   226b4:	4b04      	ldr	r3, [pc, #16]	; (226c8 <nm_spi_reset+0x2c>)
   226b6:	4798      	blx	r3
	return M2M_SUCCESS;
   226b8:	2300      	movs	r3, #0
}
   226ba:	0018      	movs	r0, r3
   226bc:	46bd      	mov	sp, r7
   226be:	b001      	add	sp, #4
   226c0:	bd90      	pop	{r4, r7, pc}
   226c2:	46c0      	nop			; (mov r8, r8)
   226c4:	00021085 	.word	0x00021085
   226c8:	000214c5 	.word	0x000214c5

000226cc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   226cc:	b580      	push	{r7, lr}
   226ce:	b082      	sub	sp, #8
   226d0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   226d2:	2300      	movs	r3, #0
   226d4:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   226d6:	4b40      	ldr	r3, [pc, #256]	; (227d8 <nm_spi_init+0x10c>)
   226d8:	2200      	movs	r2, #0
   226da:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   226dc:	003b      	movs	r3, r7
   226de:	4a3f      	ldr	r2, [pc, #252]	; (227dc <nm_spi_init+0x110>)
   226e0:	0019      	movs	r1, r3
   226e2:	0010      	movs	r0, r2
   226e4:	4b3e      	ldr	r3, [pc, #248]	; (227e0 <nm_spi_init+0x114>)
   226e6:	4798      	blx	r3
   226e8:	1e03      	subs	r3, r0, #0
   226ea:	d129      	bne.n	22740 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   226ec:	4b3a      	ldr	r3, [pc, #232]	; (227d8 <nm_spi_init+0x10c>)
   226ee:	2201      	movs	r2, #1
   226f0:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   226f2:	2398      	movs	r3, #152	; 0x98
   226f4:	00da      	lsls	r2, r3, #3
   226f6:	493b      	ldr	r1, [pc, #236]	; (227e4 <nm_spi_init+0x118>)
   226f8:	4b3b      	ldr	r3, [pc, #236]	; (227e8 <nm_spi_init+0x11c>)
   226fa:	0018      	movs	r0, r3
   226fc:	4b3b      	ldr	r3, [pc, #236]	; (227ec <nm_spi_init+0x120>)
   226fe:	4798      	blx	r3
   22700:	4b3b      	ldr	r3, [pc, #236]	; (227f0 <nm_spi_init+0x124>)
   22702:	0018      	movs	r0, r3
   22704:	4b39      	ldr	r3, [pc, #228]	; (227ec <nm_spi_init+0x120>)
   22706:	4798      	blx	r3
   22708:	4b3a      	ldr	r3, [pc, #232]	; (227f4 <nm_spi_init+0x128>)
   2270a:	0018      	movs	r0, r3
   2270c:	4b37      	ldr	r3, [pc, #220]	; (227ec <nm_spi_init+0x120>)
   2270e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   22710:	003b      	movs	r3, r7
   22712:	4a32      	ldr	r2, [pc, #200]	; (227dc <nm_spi_init+0x110>)
   22714:	0019      	movs	r1, r3
   22716:	0010      	movs	r0, r2
   22718:	4b31      	ldr	r3, [pc, #196]	; (227e0 <nm_spi_init+0x114>)
   2271a:	4798      	blx	r3
   2271c:	1e03      	subs	r3, r0, #0
   2271e:	d10f      	bne.n	22740 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   22720:	4a35      	ldr	r2, [pc, #212]	; (227f8 <nm_spi_init+0x12c>)
   22722:	4930      	ldr	r1, [pc, #192]	; (227e4 <nm_spi_init+0x118>)
   22724:	4b30      	ldr	r3, [pc, #192]	; (227e8 <nm_spi_init+0x11c>)
   22726:	0018      	movs	r0, r3
   22728:	4b30      	ldr	r3, [pc, #192]	; (227ec <nm_spi_init+0x120>)
   2272a:	4798      	blx	r3
   2272c:	4b33      	ldr	r3, [pc, #204]	; (227fc <nm_spi_init+0x130>)
   2272e:	0018      	movs	r0, r3
   22730:	4b2e      	ldr	r3, [pc, #184]	; (227ec <nm_spi_init+0x120>)
   22732:	4798      	blx	r3
   22734:	4b2f      	ldr	r3, [pc, #188]	; (227f4 <nm_spi_init+0x128>)
   22736:	0018      	movs	r0, r3
   22738:	4b2c      	ldr	r3, [pc, #176]	; (227ec <nm_spi_init+0x120>)
   2273a:	4798      	blx	r3
			return 0;
   2273c:	2300      	movs	r3, #0
   2273e:	e047      	b.n	227d0 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   22740:	4b25      	ldr	r3, [pc, #148]	; (227d8 <nm_spi_init+0x10c>)
   22742:	781b      	ldrb	r3, [r3, #0]
   22744:	2b00      	cmp	r3, #0
   22746:	d126      	bne.n	22796 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   22748:	683b      	ldr	r3, [r7, #0]
   2274a:	220c      	movs	r2, #12
   2274c:	4393      	bics	r3, r2
   2274e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   22750:	683b      	ldr	r3, [r7, #0]
   22752:	2270      	movs	r2, #112	; 0x70
   22754:	4393      	bics	r3, r2
   22756:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   22758:	683b      	ldr	r3, [r7, #0]
   2275a:	2250      	movs	r2, #80	; 0x50
   2275c:	4313      	orrs	r3, r2
   2275e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   22760:	683b      	ldr	r3, [r7, #0]
   22762:	4a1e      	ldr	r2, [pc, #120]	; (227dc <nm_spi_init+0x110>)
   22764:	0019      	movs	r1, r3
   22766:	0010      	movs	r0, r2
   22768:	4b25      	ldr	r3, [pc, #148]	; (22800 <nm_spi_init+0x134>)
   2276a:	4798      	blx	r3
   2276c:	1e03      	subs	r3, r0, #0
   2276e:	d10f      	bne.n	22790 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   22770:	4a24      	ldr	r2, [pc, #144]	; (22804 <nm_spi_init+0x138>)
   22772:	491c      	ldr	r1, [pc, #112]	; (227e4 <nm_spi_init+0x118>)
   22774:	4b1c      	ldr	r3, [pc, #112]	; (227e8 <nm_spi_init+0x11c>)
   22776:	0018      	movs	r0, r3
   22778:	4b1c      	ldr	r3, [pc, #112]	; (227ec <nm_spi_init+0x120>)
   2277a:	4798      	blx	r3
   2277c:	4b22      	ldr	r3, [pc, #136]	; (22808 <nm_spi_init+0x13c>)
   2277e:	0018      	movs	r0, r3
   22780:	4b1a      	ldr	r3, [pc, #104]	; (227ec <nm_spi_init+0x120>)
   22782:	4798      	blx	r3
   22784:	4b1b      	ldr	r3, [pc, #108]	; (227f4 <nm_spi_init+0x128>)
   22786:	0018      	movs	r0, r3
   22788:	4b18      	ldr	r3, [pc, #96]	; (227ec <nm_spi_init+0x120>)
   2278a:	4798      	blx	r3
			return 0;
   2278c:	2300      	movs	r3, #0
   2278e:	e01f      	b.n	227d0 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   22790:	4b11      	ldr	r3, [pc, #68]	; (227d8 <nm_spi_init+0x10c>)
   22792:	2201      	movs	r2, #1
   22794:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   22796:	1d3a      	adds	r2, r7, #4
   22798:	2380      	movs	r3, #128	; 0x80
   2279a:	015b      	lsls	r3, r3, #5
   2279c:	0011      	movs	r1, r2
   2279e:	0018      	movs	r0, r3
   227a0:	4b0f      	ldr	r3, [pc, #60]	; (227e0 <nm_spi_init+0x114>)
   227a2:	4798      	blx	r3
   227a4:	1e03      	subs	r3, r0, #0
   227a6:	d110      	bne.n	227ca <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   227a8:	4a18      	ldr	r2, [pc, #96]	; (2280c <nm_spi_init+0x140>)
   227aa:	490e      	ldr	r1, [pc, #56]	; (227e4 <nm_spi_init+0x118>)
   227ac:	4b0e      	ldr	r3, [pc, #56]	; (227e8 <nm_spi_init+0x11c>)
   227ae:	0018      	movs	r0, r3
   227b0:	4b0e      	ldr	r3, [pc, #56]	; (227ec <nm_spi_init+0x120>)
   227b2:	4798      	blx	r3
   227b4:	4b16      	ldr	r3, [pc, #88]	; (22810 <nm_spi_init+0x144>)
   227b6:	0018      	movs	r0, r3
   227b8:	4b0c      	ldr	r3, [pc, #48]	; (227ec <nm_spi_init+0x120>)
   227ba:	4798      	blx	r3
   227bc:	4b0d      	ldr	r3, [pc, #52]	; (227f4 <nm_spi_init+0x128>)
   227be:	0018      	movs	r0, r3
   227c0:	4b0a      	ldr	r3, [pc, #40]	; (227ec <nm_spi_init+0x120>)
   227c2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   227c4:	2306      	movs	r3, #6
   227c6:	425b      	negs	r3, r3
   227c8:	e002      	b.n	227d0 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   227ca:	4b12      	ldr	r3, [pc, #72]	; (22814 <nm_spi_init+0x148>)
   227cc:	4798      	blx	r3


	return M2M_SUCCESS;
   227ce:	2300      	movs	r3, #0
}
   227d0:	0018      	movs	r0, r3
   227d2:	46bd      	mov	sp, r7
   227d4:	b002      	add	sp, #8
   227d6:	bd80      	pop	{r7, pc}
   227d8:	20003d08 	.word	0x20003d08
   227dc:	0000e824 	.word	0x0000e824
   227e0:	000223c5 	.word	0x000223c5
   227e4:	00036840 	.word	0x00036840
   227e8:	000361cc 	.word	0x000361cc
   227ec:	0001baed 	.word	0x0001baed
   227f0:	00036668 	.word	0x00036668
   227f4:	0003620c 	.word	0x0003620c
   227f8:	000004c3 	.word	0x000004c3
   227fc:	000366b8 	.word	0x000366b8
   22800:	000220cd 	.word	0x000220cd
   22804:	000004cd 	.word	0x000004cd
   22808:	000366e8 	.word	0x000366e8
   2280c:	000004d7 	.word	0x000004d7
   22810:	0003671c 	.word	0x0003671c
   22814:	00022659 	.word	0x00022659

00022818 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   22818:	b580      	push	{r7, lr}
   2281a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   2281c:	4b03      	ldr	r3, [pc, #12]	; (2282c <nm_spi_deinit+0x14>)
   2281e:	2200      	movs	r2, #0
   22820:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   22822:	2300      	movs	r3, #0
}
   22824:	0018      	movs	r0, r3
   22826:	46bd      	mov	sp, r7
   22828:	bd80      	pop	{r7, pc}
   2282a:	46c0      	nop			; (mov r8, r8)
   2282c:	20003d08 	.word	0x20003d08

00022830 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   22830:	b580      	push	{r7, lr}
   22832:	b084      	sub	sp, #16
   22834:	af00      	add	r7, sp, #0
   22836:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   22838:	230c      	movs	r3, #12
   2283a:	18fa      	adds	r2, r7, r3
   2283c:	687b      	ldr	r3, [r7, #4]
   2283e:	0011      	movs	r1, r2
   22840:	0018      	movs	r0, r3
   22842:	4b03      	ldr	r3, [pc, #12]	; (22850 <nm_spi_read_reg+0x20>)
   22844:	4798      	blx	r3

	return u32Val;
   22846:	68fb      	ldr	r3, [r7, #12]
}
   22848:	0018      	movs	r0, r3
   2284a:	46bd      	mov	sp, r7
   2284c:	b004      	add	sp, #16
   2284e:	bd80      	pop	{r7, pc}
   22850:	000223c5 	.word	0x000223c5

00022854 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   22854:	b590      	push	{r4, r7, lr}
   22856:	b085      	sub	sp, #20
   22858:	af00      	add	r7, sp, #0
   2285a:	6078      	str	r0, [r7, #4]
   2285c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   2285e:	230f      	movs	r3, #15
   22860:	18fc      	adds	r4, r7, r3
   22862:	683a      	ldr	r2, [r7, #0]
   22864:	687b      	ldr	r3, [r7, #4]
   22866:	0011      	movs	r1, r2
   22868:	0018      	movs	r0, r3
   2286a:	4b0d      	ldr	r3, [pc, #52]	; (228a0 <nm_spi_read_reg_with_ret+0x4c>)
   2286c:	4798      	blx	r3
   2286e:	0003      	movs	r3, r0
   22870:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   22872:	230f      	movs	r3, #15
   22874:	18fb      	adds	r3, r7, r3
   22876:	781b      	ldrb	r3, [r3, #0]
   22878:	b25b      	sxtb	r3, r3
   2287a:	2b01      	cmp	r3, #1
   2287c:	d104      	bne.n	22888 <nm_spi_read_reg_with_ret+0x34>
   2287e:	230f      	movs	r3, #15
   22880:	18fb      	adds	r3, r7, r3
   22882:	2200      	movs	r2, #0
   22884:	701a      	strb	r2, [r3, #0]
   22886:	e003      	b.n	22890 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   22888:	230f      	movs	r3, #15
   2288a:	18fb      	adds	r3, r7, r3
   2288c:	22fa      	movs	r2, #250	; 0xfa
   2288e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   22890:	230f      	movs	r3, #15
   22892:	18fb      	adds	r3, r7, r3
   22894:	781b      	ldrb	r3, [r3, #0]
   22896:	b25b      	sxtb	r3, r3
}
   22898:	0018      	movs	r0, r3
   2289a:	46bd      	mov	sp, r7
   2289c:	b005      	add	sp, #20
   2289e:	bd90      	pop	{r4, r7, pc}
   228a0:	000223c5 	.word	0x000223c5

000228a4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   228a4:	b590      	push	{r4, r7, lr}
   228a6:	b085      	sub	sp, #20
   228a8:	af00      	add	r7, sp, #0
   228aa:	6078      	str	r0, [r7, #4]
   228ac:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   228ae:	230f      	movs	r3, #15
   228b0:	18fc      	adds	r4, r7, r3
   228b2:	683a      	ldr	r2, [r7, #0]
   228b4:	687b      	ldr	r3, [r7, #4]
   228b6:	0011      	movs	r1, r2
   228b8:	0018      	movs	r0, r3
   228ba:	4b0d      	ldr	r3, [pc, #52]	; (228f0 <nm_spi_write_reg+0x4c>)
   228bc:	4798      	blx	r3
   228be:	0003      	movs	r3, r0
   228c0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   228c2:	230f      	movs	r3, #15
   228c4:	18fb      	adds	r3, r7, r3
   228c6:	781b      	ldrb	r3, [r3, #0]
   228c8:	b25b      	sxtb	r3, r3
   228ca:	2b01      	cmp	r3, #1
   228cc:	d104      	bne.n	228d8 <nm_spi_write_reg+0x34>
   228ce:	230f      	movs	r3, #15
   228d0:	18fb      	adds	r3, r7, r3
   228d2:	2200      	movs	r2, #0
   228d4:	701a      	strb	r2, [r3, #0]
   228d6:	e003      	b.n	228e0 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   228d8:	230f      	movs	r3, #15
   228da:	18fb      	adds	r3, r7, r3
   228dc:	22fa      	movs	r2, #250	; 0xfa
   228de:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   228e0:	230f      	movs	r3, #15
   228e2:	18fb      	adds	r3, r7, r3
   228e4:	781b      	ldrb	r3, [r3, #0]
   228e6:	b25b      	sxtb	r3, r3
}
   228e8:	0018      	movs	r0, r3
   228ea:	46bd      	mov	sp, r7
   228ec:	b005      	add	sp, #20
   228ee:	bd90      	pop	{r4, r7, pc}
   228f0:	000220cd 	.word	0x000220cd

000228f4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   228f4:	b590      	push	{r4, r7, lr}
   228f6:	b087      	sub	sp, #28
   228f8:	af00      	add	r7, sp, #0
   228fa:	60f8      	str	r0, [r7, #12]
   228fc:	60b9      	str	r1, [r7, #8]
   228fe:	1dbb      	adds	r3, r7, #6
   22900:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   22902:	2317      	movs	r3, #23
   22904:	18fc      	adds	r4, r7, r3
   22906:	1dbb      	adds	r3, r7, #6
   22908:	881a      	ldrh	r2, [r3, #0]
   2290a:	68b9      	ldr	r1, [r7, #8]
   2290c:	68fb      	ldr	r3, [r7, #12]
   2290e:	0018      	movs	r0, r3
   22910:	4b0d      	ldr	r3, [pc, #52]	; (22948 <nm_spi_read_block+0x54>)
   22912:	4798      	blx	r3
   22914:	0003      	movs	r3, r0
   22916:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   22918:	2317      	movs	r3, #23
   2291a:	18fb      	adds	r3, r7, r3
   2291c:	781b      	ldrb	r3, [r3, #0]
   2291e:	b25b      	sxtb	r3, r3
   22920:	2b01      	cmp	r3, #1
   22922:	d104      	bne.n	2292e <nm_spi_read_block+0x3a>
   22924:	2317      	movs	r3, #23
   22926:	18fb      	adds	r3, r7, r3
   22928:	2200      	movs	r2, #0
   2292a:	701a      	strb	r2, [r3, #0]
   2292c:	e003      	b.n	22936 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2292e:	2317      	movs	r3, #23
   22930:	18fb      	adds	r3, r7, r3
   22932:	22fa      	movs	r2, #250	; 0xfa
   22934:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   22936:	2317      	movs	r3, #23
   22938:	18fb      	adds	r3, r7, r3
   2293a:	781b      	ldrb	r3, [r3, #0]
   2293c:	b25b      	sxtb	r3, r3
}
   2293e:	0018      	movs	r0, r3
   22940:	46bd      	mov	sp, r7
   22942:	b007      	add	sp, #28
   22944:	bd90      	pop	{r4, r7, pc}
   22946:	46c0      	nop			; (mov r8, r8)
   22948:	0002253d 	.word	0x0002253d

0002294c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   2294c:	b590      	push	{r4, r7, lr}
   2294e:	b087      	sub	sp, #28
   22950:	af00      	add	r7, sp, #0
   22952:	60f8      	str	r0, [r7, #12]
   22954:	60b9      	str	r1, [r7, #8]
   22956:	1dbb      	adds	r3, r7, #6
   22958:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   2295a:	2317      	movs	r3, #23
   2295c:	18fc      	adds	r4, r7, r3
   2295e:	1dbb      	adds	r3, r7, #6
   22960:	881a      	ldrh	r2, [r3, #0]
   22962:	68b9      	ldr	r1, [r7, #8]
   22964:	68fb      	ldr	r3, [r7, #12]
   22966:	0018      	movs	r0, r3
   22968:	4b0d      	ldr	r3, [pc, #52]	; (229a0 <nm_spi_write_block+0x54>)
   2296a:	4798      	blx	r3
   2296c:	0003      	movs	r3, r0
   2296e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   22970:	2317      	movs	r3, #23
   22972:	18fb      	adds	r3, r7, r3
   22974:	781b      	ldrb	r3, [r3, #0]
   22976:	b25b      	sxtb	r3, r3
   22978:	2b01      	cmp	r3, #1
   2297a:	d104      	bne.n	22986 <nm_spi_write_block+0x3a>
   2297c:	2317      	movs	r3, #23
   2297e:	18fb      	adds	r3, r7, r3
   22980:	2200      	movs	r2, #0
   22982:	701a      	strb	r2, [r3, #0]
   22984:	e003      	b.n	2298e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   22986:	2317      	movs	r3, #23
   22988:	18fb      	adds	r3, r7, r3
   2298a:	22fa      	movs	r2, #250	; 0xfa
   2298c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2298e:	2317      	movs	r3, #23
   22990:	18fb      	adds	r3, r7, r3
   22992:	781b      	ldrb	r3, [r3, #0]
   22994:	b25b      	sxtb	r3, r3
}
   22996:	0018      	movs	r0, r3
   22998:	46bd      	mov	sp, r7
   2299a:	b007      	add	sp, #28
   2299c:	bd90      	pop	{r4, r7, pc}
   2299e:	46c0      	nop			; (mov r8, r8)
   229a0:	00022219 	.word	0x00022219

000229a4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   229a4:	b590      	push	{r4, r7, lr}
   229a6:	b089      	sub	sp, #36	; 0x24
   229a8:	af00      	add	r7, sp, #0
   229aa:	60b9      	str	r1, [r7, #8]
   229ac:	0011      	movs	r1, r2
   229ae:	607b      	str	r3, [r7, #4]
   229b0:	230f      	movs	r3, #15
   229b2:	18fb      	adds	r3, r7, r3
   229b4:	1c02      	adds	r2, r0, #0
   229b6:	701a      	strb	r2, [r3, #0]
   229b8:	230e      	movs	r3, #14
   229ba:	18fb      	adds	r3, r7, r3
   229bc:	1c0a      	adds	r2, r1, #0
   229be:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   229c0:	2330      	movs	r3, #48	; 0x30
   229c2:	18fb      	adds	r3, r7, r3
   229c4:	881b      	ldrh	r3, [r3, #0]
   229c6:	2b00      	cmp	r3, #0
   229c8:	d100      	bne.n	229cc <Socket_ReadSocketData+0x28>
   229ca:	e0d7      	b.n	22b7c <Socket_ReadSocketData+0x1d8>
   229cc:	230f      	movs	r3, #15
   229ce:	18fb      	adds	r3, r7, r3
   229d0:	2200      	movs	r2, #0
   229d2:	569a      	ldrsb	r2, [r3, r2]
   229d4:	4b6b      	ldr	r3, [pc, #428]	; (22b84 <Socket_ReadSocketData+0x1e0>)
   229d6:	0112      	lsls	r2, r2, #4
   229d8:	58d3      	ldr	r3, [r2, r3]
   229da:	2b00      	cmp	r3, #0
   229dc:	d100      	bne.n	229e0 <Socket_ReadSocketData+0x3c>
   229de:	e0cd      	b.n	22b7c <Socket_ReadSocketData+0x1d8>
   229e0:	230f      	movs	r3, #15
   229e2:	18fb      	adds	r3, r7, r3
   229e4:	781b      	ldrb	r3, [r3, #0]
   229e6:	b25b      	sxtb	r3, r3
   229e8:	4a66      	ldr	r2, [pc, #408]	; (22b84 <Socket_ReadSocketData+0x1e0>)
   229ea:	011b      	lsls	r3, r3, #4
   229ec:	18d3      	adds	r3, r2, r3
   229ee:	3304      	adds	r3, #4
   229f0:	881b      	ldrh	r3, [r3, #0]
   229f2:	b29b      	uxth	r3, r3
   229f4:	2b00      	cmp	r3, #0
   229f6:	d100      	bne.n	229fa <Socket_ReadSocketData+0x56>
   229f8:	e0c0      	b.n	22b7c <Socket_ReadSocketData+0x1d8>
   229fa:	230f      	movs	r3, #15
   229fc:	18fb      	adds	r3, r7, r3
   229fe:	781b      	ldrb	r3, [r3, #0]
   22a00:	b25b      	sxtb	r3, r3
   22a02:	4a60      	ldr	r2, [pc, #384]	; (22b84 <Socket_ReadSocketData+0x1e0>)
   22a04:	011b      	lsls	r3, r3, #4
   22a06:	18d3      	adds	r3, r2, r3
   22a08:	330a      	adds	r3, #10
   22a0a:	781b      	ldrb	r3, [r3, #0]
   22a0c:	b2db      	uxtb	r3, r3
   22a0e:	2b01      	cmp	r3, #1
   22a10:	d000      	beq.n	22a14 <Socket_ReadSocketData+0x70>
   22a12:	e0b3      	b.n	22b7c <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   22a14:	687b      	ldr	r3, [r7, #4]
   22a16:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   22a18:	68bb      	ldr	r3, [r7, #8]
   22a1a:	2230      	movs	r2, #48	; 0x30
   22a1c:	18ba      	adds	r2, r7, r2
   22a1e:	8812      	ldrh	r2, [r2, #0]
   22a20:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   22a22:	2319      	movs	r3, #25
   22a24:	18fb      	adds	r3, r7, r3
   22a26:	2201      	movs	r2, #1
   22a28:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   22a2a:	231a      	movs	r3, #26
   22a2c:	18fb      	adds	r3, r7, r3
   22a2e:	2230      	movs	r2, #48	; 0x30
   22a30:	18ba      	adds	r2, r7, r2
   22a32:	8812      	ldrh	r2, [r2, #0]
   22a34:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   22a36:	230f      	movs	r3, #15
   22a38:	18fb      	adds	r3, r7, r3
   22a3a:	781b      	ldrb	r3, [r3, #0]
   22a3c:	b25b      	sxtb	r3, r3
   22a3e:	4a51      	ldr	r2, [pc, #324]	; (22b84 <Socket_ReadSocketData+0x1e0>)
   22a40:	011b      	lsls	r3, r3, #4
   22a42:	18d3      	adds	r3, r2, r3
   22a44:	3304      	adds	r3, #4
   22a46:	881b      	ldrh	r3, [r3, #0]
   22a48:	b29b      	uxth	r3, r3
   22a4a:	221a      	movs	r2, #26
   22a4c:	18ba      	adds	r2, r7, r2
   22a4e:	8812      	ldrh	r2, [r2, #0]
   22a50:	1ad3      	subs	r3, r2, r3
   22a52:	b29a      	uxth	r2, r3
   22a54:	2316      	movs	r3, #22
   22a56:	18fb      	adds	r3, r7, r3
   22a58:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   22a5a:	2316      	movs	r3, #22
   22a5c:	18fb      	adds	r3, r7, r3
   22a5e:	2200      	movs	r2, #0
   22a60:	5e9b      	ldrsh	r3, [r3, r2]
   22a62:	2b00      	cmp	r3, #0
   22a64:	dd0f      	ble.n	22a86 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   22a66:	2319      	movs	r3, #25
   22a68:	18fb      	adds	r3, r7, r3
   22a6a:	2200      	movs	r2, #0
   22a6c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   22a6e:	230f      	movs	r3, #15
   22a70:	18fb      	adds	r3, r7, r3
   22a72:	2200      	movs	r2, #0
   22a74:	569a      	ldrsb	r2, [r3, r2]
   22a76:	231a      	movs	r3, #26
   22a78:	18fb      	adds	r3, r7, r3
   22a7a:	4942      	ldr	r1, [pc, #264]	; (22b84 <Socket_ReadSocketData+0x1e0>)
   22a7c:	0112      	lsls	r2, r2, #4
   22a7e:	188a      	adds	r2, r1, r2
   22a80:	3204      	adds	r2, #4
   22a82:	8812      	ldrh	r2, [r2, #0]
   22a84:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   22a86:	230f      	movs	r3, #15
   22a88:	18fb      	adds	r3, r7, r3
   22a8a:	2200      	movs	r2, #0
   22a8c:	569a      	ldrsb	r2, [r3, r2]
   22a8e:	4b3d      	ldr	r3, [pc, #244]	; (22b84 <Socket_ReadSocketData+0x1e0>)
   22a90:	0112      	lsls	r2, r2, #4
   22a92:	58d1      	ldr	r1, [r2, r3]
   22a94:	2319      	movs	r3, #25
   22a96:	18fb      	adds	r3, r7, r3
   22a98:	781c      	ldrb	r4, [r3, #0]
   22a9a:	231a      	movs	r3, #26
   22a9c:	18fb      	adds	r3, r7, r3
   22a9e:	881a      	ldrh	r2, [r3, #0]
   22aa0:	69f8      	ldr	r0, [r7, #28]
   22aa2:	0023      	movs	r3, r4
   22aa4:	4c38      	ldr	r4, [pc, #224]	; (22b88 <Socket_ReadSocketData+0x1e4>)
   22aa6:	47a0      	blx	r4
   22aa8:	1e03      	subs	r3, r0, #0
   22aaa:	d14f      	bne.n	22b4c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   22aac:	230f      	movs	r3, #15
   22aae:	18fb      	adds	r3, r7, r3
   22ab0:	2200      	movs	r2, #0
   22ab2:	569a      	ldrsb	r2, [r3, r2]
   22ab4:	4b33      	ldr	r3, [pc, #204]	; (22b84 <Socket_ReadSocketData+0x1e0>)
   22ab6:	0112      	lsls	r2, r2, #4
   22ab8:	58d2      	ldr	r2, [r2, r3]
   22aba:	68bb      	ldr	r3, [r7, #8]
   22abc:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   22abe:	231a      	movs	r3, #26
   22ac0:	18fb      	adds	r3, r7, r3
   22ac2:	2200      	movs	r2, #0
   22ac4:	5e9a      	ldrsh	r2, [r3, r2]
   22ac6:	68bb      	ldr	r3, [r7, #8]
   22ac8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   22aca:	68bb      	ldr	r3, [r7, #8]
   22acc:	88da      	ldrh	r2, [r3, #6]
   22ace:	231a      	movs	r3, #26
   22ad0:	18fb      	adds	r3, r7, r3
   22ad2:	881b      	ldrh	r3, [r3, #0]
   22ad4:	1ad3      	subs	r3, r2, r3
   22ad6:	b29a      	uxth	r2, r3
   22ad8:	68bb      	ldr	r3, [r7, #8]
   22ada:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   22adc:	4b2b      	ldr	r3, [pc, #172]	; (22b8c <Socket_ReadSocketData+0x1e8>)
   22ade:	681b      	ldr	r3, [r3, #0]
   22ae0:	2b00      	cmp	r3, #0
   22ae2:	d00b      	beq.n	22afc <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   22ae4:	4b29      	ldr	r3, [pc, #164]	; (22b8c <Socket_ReadSocketData+0x1e8>)
   22ae6:	681b      	ldr	r3, [r3, #0]
   22ae8:	68bc      	ldr	r4, [r7, #8]
   22aea:	220e      	movs	r2, #14
   22aec:	18ba      	adds	r2, r7, r2
   22aee:	7811      	ldrb	r1, [r2, #0]
   22af0:	220f      	movs	r2, #15
   22af2:	18ba      	adds	r2, r7, r2
   22af4:	2000      	movs	r0, #0
   22af6:	5610      	ldrsb	r0, [r2, r0]
   22af8:	0022      	movs	r2, r4
   22afa:	4798      	blx	r3

				u16ReadCount -= u16Read;
   22afc:	2330      	movs	r3, #48	; 0x30
   22afe:	18f9      	adds	r1, r7, r3
   22b00:	2330      	movs	r3, #48	; 0x30
   22b02:	18fa      	adds	r2, r7, r3
   22b04:	231a      	movs	r3, #26
   22b06:	18fb      	adds	r3, r7, r3
   22b08:	8812      	ldrh	r2, [r2, #0]
   22b0a:	881b      	ldrh	r3, [r3, #0]
   22b0c:	1ad3      	subs	r3, r2, r3
   22b0e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   22b10:	231a      	movs	r3, #26
   22b12:	18fb      	adds	r3, r7, r3
   22b14:	881b      	ldrh	r3, [r3, #0]
   22b16:	69fa      	ldr	r2, [r7, #28]
   22b18:	18d3      	adds	r3, r2, r3
   22b1a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   22b1c:	230f      	movs	r3, #15
   22b1e:	18fb      	adds	r3, r7, r3
   22b20:	781b      	ldrb	r3, [r3, #0]
   22b22:	b25b      	sxtb	r3, r3
   22b24:	4a17      	ldr	r2, [pc, #92]	; (22b84 <Socket_ReadSocketData+0x1e0>)
   22b26:	011b      	lsls	r3, r3, #4
   22b28:	18d3      	adds	r3, r2, r3
   22b2a:	330a      	adds	r3, #10
   22b2c:	781b      	ldrb	r3, [r3, #0]
   22b2e:	b2db      	uxtb	r3, r3
   22b30:	2b00      	cmp	r3, #0
   22b32:	d11c      	bne.n	22b6e <Socket_ReadSocketData+0x1ca>
   22b34:	2330      	movs	r3, #48	; 0x30
   22b36:	18fb      	adds	r3, r7, r3
   22b38:	881b      	ldrh	r3, [r3, #0]
   22b3a:	2b00      	cmp	r3, #0
   22b3c:	d017      	beq.n	22b6e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   22b3e:	2301      	movs	r3, #1
   22b40:	2200      	movs	r2, #0
   22b42:	2100      	movs	r1, #0
   22b44:	2000      	movs	r0, #0
   22b46:	4c10      	ldr	r4, [pc, #64]	; (22b88 <Socket_ReadSocketData+0x1e4>)
   22b48:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   22b4a:	e017      	b.n	22b7c <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   22b4c:	4b10      	ldr	r3, [pc, #64]	; (22b90 <Socket_ReadSocketData+0x1ec>)
   22b4e:	0018      	movs	r0, r3
   22b50:	4b10      	ldr	r3, [pc, #64]	; (22b94 <Socket_ReadSocketData+0x1f0>)
   22b52:	4798      	blx	r3
   22b54:	2330      	movs	r3, #48	; 0x30
   22b56:	18fb      	adds	r3, r7, r3
   22b58:	881a      	ldrh	r2, [r3, #0]
   22b5a:	4b0f      	ldr	r3, [pc, #60]	; (22b98 <Socket_ReadSocketData+0x1f4>)
   22b5c:	0011      	movs	r1, r2
   22b5e:	0018      	movs	r0, r3
   22b60:	4b0c      	ldr	r3, [pc, #48]	; (22b94 <Socket_ReadSocketData+0x1f0>)
   22b62:	4798      	blx	r3
   22b64:	4b0d      	ldr	r3, [pc, #52]	; (22b9c <Socket_ReadSocketData+0x1f8>)
   22b66:	0018      	movs	r0, r3
   22b68:	4b0a      	ldr	r3, [pc, #40]	; (22b94 <Socket_ReadSocketData+0x1f0>)
   22b6a:	4798      	blx	r3
				break;
   22b6c:	e006      	b.n	22b7c <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   22b6e:	2330      	movs	r3, #48	; 0x30
   22b70:	18fb      	adds	r3, r7, r3
   22b72:	881b      	ldrh	r3, [r3, #0]
   22b74:	2b00      	cmp	r3, #0
   22b76:	d000      	beq.n	22b7a <Socket_ReadSocketData+0x1d6>
   22b78:	e753      	b.n	22a22 <Socket_ReadSocketData+0x7e>
	}
}
   22b7a:	e7ff      	b.n	22b7c <Socket_ReadSocketData+0x1d8>
   22b7c:	46c0      	nop			; (mov r8, r8)
   22b7e:	46bd      	mov	sp, r7
   22b80:	b009      	add	sp, #36	; 0x24
   22b82:	bd90      	pop	{r4, r7, pc}
   22b84:	20005474 	.word	0x20005474
   22b88:	0001f39d 	.word	0x0001f39d
   22b8c:	20005524 	.word	0x20005524
   22b90:	0003684c 	.word	0x0003684c
   22b94:	0001baed 	.word	0x0001baed
   22b98:	00036858 	.word	0x00036858
   22b9c:	0003686c 	.word	0x0003686c

00022ba0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   22ba0:	b590      	push	{r4, r7, lr}
   22ba2:	b0bb      	sub	sp, #236	; 0xec
   22ba4:	af02      	add	r7, sp, #8
   22ba6:	603a      	str	r2, [r7, #0]
   22ba8:	1dfb      	adds	r3, r7, #7
   22baa:	1c02      	adds	r2, r0, #0
   22bac:	701a      	strb	r2, [r3, #0]
   22bae:	1d3b      	adds	r3, r7, #4
   22bb0:	1c0a      	adds	r2, r1, #0
   22bb2:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   22bb4:	1dfb      	adds	r3, r7, #7
   22bb6:	781b      	ldrb	r3, [r3, #0]
   22bb8:	2b41      	cmp	r3, #65	; 0x41
   22bba:	d003      	beq.n	22bc4 <m2m_ip_cb+0x24>
   22bbc:	1dfb      	adds	r3, r7, #7
   22bbe:	781b      	ldrb	r3, [r3, #0]
   22bc0:	2b54      	cmp	r3, #84	; 0x54
   22bc2:	d120      	bne.n	22c06 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   22bc4:	23cc      	movs	r3, #204	; 0xcc
   22bc6:	18f9      	adds	r1, r7, r3
   22bc8:	6838      	ldr	r0, [r7, #0]
   22bca:	2300      	movs	r3, #0
   22bcc:	2204      	movs	r2, #4
   22bce:	4c98      	ldr	r4, [pc, #608]	; (22e30 <m2m_ip_cb+0x290>)
   22bd0:	47a0      	blx	r4
   22bd2:	1e03      	subs	r3, r0, #0
   22bd4:	d000      	beq.n	22bd8 <m2m_ip_cb+0x38>
   22bd6:	e275      	b.n	230c4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   22bd8:	23cc      	movs	r3, #204	; 0xcc
   22bda:	18fb      	adds	r3, r7, r3
   22bdc:	2201      	movs	r2, #1
   22bde:	569a      	ldrsb	r2, [r3, r2]
   22be0:	23c8      	movs	r3, #200	; 0xc8
   22be2:	18fb      	adds	r3, r7, r3
   22be4:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   22be6:	4b93      	ldr	r3, [pc, #588]	; (22e34 <m2m_ip_cb+0x294>)
   22be8:	681b      	ldr	r3, [r3, #0]
   22bea:	2b00      	cmp	r3, #0
   22bec:	d100      	bne.n	22bf0 <m2m_ip_cb+0x50>
   22bee:	e269      	b.n	230c4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   22bf0:	4b90      	ldr	r3, [pc, #576]	; (22e34 <m2m_ip_cb+0x294>)
   22bf2:	681b      	ldr	r3, [r3, #0]
   22bf4:	22cc      	movs	r2, #204	; 0xcc
   22bf6:	18ba      	adds	r2, r7, r2
   22bf8:	2000      	movs	r0, #0
   22bfa:	5610      	ldrsb	r0, [r2, r0]
   22bfc:	22c8      	movs	r2, #200	; 0xc8
   22bfe:	18ba      	adds	r2, r7, r2
   22c00:	2101      	movs	r1, #1
   22c02:	4798      	blx	r3
	{
   22c04:	e25e      	b.n	230c4 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   22c06:	1dfb      	adds	r3, r7, #7
   22c08:	781b      	ldrb	r3, [r3, #0]
   22c0a:	2b42      	cmp	r3, #66	; 0x42
   22c0c:	d120      	bne.n	22c50 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   22c0e:	23c4      	movs	r3, #196	; 0xc4
   22c10:	18f9      	adds	r1, r7, r3
   22c12:	6838      	ldr	r0, [r7, #0]
   22c14:	2300      	movs	r3, #0
   22c16:	2204      	movs	r2, #4
   22c18:	4c85      	ldr	r4, [pc, #532]	; (22e30 <m2m_ip_cb+0x290>)
   22c1a:	47a0      	blx	r4
   22c1c:	1e03      	subs	r3, r0, #0
   22c1e:	d000      	beq.n	22c22 <m2m_ip_cb+0x82>
   22c20:	e257      	b.n	230d2 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   22c22:	23c4      	movs	r3, #196	; 0xc4
   22c24:	18fb      	adds	r3, r7, r3
   22c26:	2201      	movs	r2, #1
   22c28:	569a      	ldrsb	r2, [r3, r2]
   22c2a:	23c0      	movs	r3, #192	; 0xc0
   22c2c:	18fb      	adds	r3, r7, r3
   22c2e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   22c30:	4b80      	ldr	r3, [pc, #512]	; (22e34 <m2m_ip_cb+0x294>)
   22c32:	681b      	ldr	r3, [r3, #0]
   22c34:	2b00      	cmp	r3, #0
   22c36:	d100      	bne.n	22c3a <m2m_ip_cb+0x9a>
   22c38:	e24b      	b.n	230d2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   22c3a:	4b7e      	ldr	r3, [pc, #504]	; (22e34 <m2m_ip_cb+0x294>)
   22c3c:	681b      	ldr	r3, [r3, #0]
   22c3e:	22c4      	movs	r2, #196	; 0xc4
   22c40:	18ba      	adds	r2, r7, r2
   22c42:	2000      	movs	r0, #0
   22c44:	5610      	ldrsb	r0, [r2, r0]
   22c46:	22c0      	movs	r2, #192	; 0xc0
   22c48:	18ba      	adds	r2, r7, r2
   22c4a:	2102      	movs	r1, #2
   22c4c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   22c4e:	e240      	b.n	230d2 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   22c50:	1dfb      	adds	r3, r7, #7
   22c52:	781b      	ldrb	r3, [r3, #0]
   22c54:	2b43      	cmp	r3, #67	; 0x43
   22c56:	d000      	beq.n	22c5a <m2m_ip_cb+0xba>
   22c58:	e086      	b.n	22d68 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   22c5a:	23b4      	movs	r3, #180	; 0xb4
   22c5c:	18f9      	adds	r1, r7, r3
   22c5e:	6838      	ldr	r0, [r7, #0]
   22c60:	2300      	movs	r3, #0
   22c62:	220c      	movs	r2, #12
   22c64:	4c72      	ldr	r4, [pc, #456]	; (22e30 <m2m_ip_cb+0x290>)
   22c66:	47a0      	blx	r4
   22c68:	1e03      	subs	r3, r0, #0
   22c6a:	d000      	beq.n	22c6e <m2m_ip_cb+0xce>
   22c6c:	e231      	b.n	230d2 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   22c6e:	23b4      	movs	r3, #180	; 0xb4
   22c70:	18fb      	adds	r3, r7, r3
   22c72:	7a5b      	ldrb	r3, [r3, #9]
   22c74:	b25b      	sxtb	r3, r3
   22c76:	2b00      	cmp	r3, #0
   22c78:	db4f      	blt.n	22d1a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   22c7a:	23b4      	movs	r3, #180	; 0xb4
   22c7c:	18fb      	adds	r3, r7, r3
   22c7e:	7a5b      	ldrb	r3, [r3, #9]
   22c80:	b25b      	sxtb	r3, r3
   22c82:	0018      	movs	r0, r3
   22c84:	23b4      	movs	r3, #180	; 0xb4
   22c86:	18fb      	adds	r3, r7, r3
   22c88:	7a1b      	ldrb	r3, [r3, #8]
   22c8a:	b25b      	sxtb	r3, r3
   22c8c:	4a6a      	ldr	r2, [pc, #424]	; (22e38 <m2m_ip_cb+0x298>)
   22c8e:	011b      	lsls	r3, r3, #4
   22c90:	18d3      	adds	r3, r2, r3
   22c92:	330b      	adds	r3, #11
   22c94:	781b      	ldrb	r3, [r3, #0]
   22c96:	b2d9      	uxtb	r1, r3
   22c98:	4a67      	ldr	r2, [pc, #412]	; (22e38 <m2m_ip_cb+0x298>)
   22c9a:	0103      	lsls	r3, r0, #4
   22c9c:	18d3      	adds	r3, r2, r3
   22c9e:	330b      	adds	r3, #11
   22ca0:	1c0a      	adds	r2, r1, #0
   22ca2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   22ca4:	23b4      	movs	r3, #180	; 0xb4
   22ca6:	18fb      	adds	r3, r7, r3
   22ca8:	7a5b      	ldrb	r3, [r3, #9]
   22caa:	b25b      	sxtb	r3, r3
   22cac:	4a62      	ldr	r2, [pc, #392]	; (22e38 <m2m_ip_cb+0x298>)
   22cae:	011b      	lsls	r3, r3, #4
   22cb0:	18d3      	adds	r3, r2, r3
   22cb2:	330a      	adds	r3, #10
   22cb4:	2201      	movs	r2, #1
   22cb6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   22cb8:	23b4      	movs	r3, #180	; 0xb4
   22cba:	18fb      	adds	r3, r7, r3
   22cbc:	7a5b      	ldrb	r3, [r3, #9]
   22cbe:	b25b      	sxtb	r3, r3
   22cc0:	0018      	movs	r0, r3
   22cc2:	23b4      	movs	r3, #180	; 0xb4
   22cc4:	18fb      	adds	r3, r7, r3
   22cc6:	895b      	ldrh	r3, [r3, #10]
   22cc8:	3b08      	subs	r3, #8
   22cca:	b299      	uxth	r1, r3
   22ccc:	4a5a      	ldr	r2, [pc, #360]	; (22e38 <m2m_ip_cb+0x298>)
   22cce:	0103      	lsls	r3, r0, #4
   22cd0:	18d3      	adds	r3, r2, r3
   22cd2:	3308      	adds	r3, #8
   22cd4:	1c0a      	adds	r2, r1, #0
   22cd6:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   22cd8:	4b58      	ldr	r3, [pc, #352]	; (22e3c <m2m_ip_cb+0x29c>)
   22cda:	881b      	ldrh	r3, [r3, #0]
   22cdc:	b29b      	uxth	r3, r3
   22cde:	3301      	adds	r3, #1
   22ce0:	b29a      	uxth	r2, r3
   22ce2:	4b56      	ldr	r3, [pc, #344]	; (22e3c <m2m_ip_cb+0x29c>)
   22ce4:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   22ce6:	4b55      	ldr	r3, [pc, #340]	; (22e3c <m2m_ip_cb+0x29c>)
   22ce8:	881b      	ldrh	r3, [r3, #0]
   22cea:	b29b      	uxth	r3, r3
   22cec:	2b00      	cmp	r3, #0
   22cee:	d106      	bne.n	22cfe <m2m_ip_cb+0x15e>
					++gu16SessionID;
   22cf0:	4b52      	ldr	r3, [pc, #328]	; (22e3c <m2m_ip_cb+0x29c>)
   22cf2:	881b      	ldrh	r3, [r3, #0]
   22cf4:	b29b      	uxth	r3, r3
   22cf6:	3301      	adds	r3, #1
   22cf8:	b29a      	uxth	r2, r3
   22cfa:	4b50      	ldr	r3, [pc, #320]	; (22e3c <m2m_ip_cb+0x29c>)
   22cfc:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   22cfe:	23b4      	movs	r3, #180	; 0xb4
   22d00:	18fb      	adds	r3, r7, r3
   22d02:	7a5b      	ldrb	r3, [r3, #9]
   22d04:	b25b      	sxtb	r3, r3
   22d06:	0018      	movs	r0, r3
   22d08:	4b4c      	ldr	r3, [pc, #304]	; (22e3c <m2m_ip_cb+0x29c>)
   22d0a:	881b      	ldrh	r3, [r3, #0]
   22d0c:	b299      	uxth	r1, r3
   22d0e:	4a4a      	ldr	r2, [pc, #296]	; (22e38 <m2m_ip_cb+0x298>)
   22d10:	0103      	lsls	r3, r0, #4
   22d12:	18d3      	adds	r3, r2, r3
   22d14:	3306      	adds	r3, #6
   22d16:	1c0a      	adds	r2, r1, #0
   22d18:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   22d1a:	23b4      	movs	r3, #180	; 0xb4
   22d1c:	18fb      	adds	r3, r7, r3
   22d1e:	2209      	movs	r2, #9
   22d20:	569a      	ldrsb	r2, [r3, r2]
   22d22:	23a0      	movs	r3, #160	; 0xa0
   22d24:	18fb      	adds	r3, r7, r3
   22d26:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   22d28:	23a0      	movs	r3, #160	; 0xa0
   22d2a:	18fb      	adds	r3, r7, r3
   22d2c:	2202      	movs	r2, #2
   22d2e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   22d30:	23b4      	movs	r3, #180	; 0xb4
   22d32:	18fb      	adds	r3, r7, r3
   22d34:	885a      	ldrh	r2, [r3, #2]
   22d36:	23a0      	movs	r3, #160	; 0xa0
   22d38:	18fb      	adds	r3, r7, r3
   22d3a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   22d3c:	23b4      	movs	r3, #180	; 0xb4
   22d3e:	18fb      	adds	r3, r7, r3
   22d40:	685a      	ldr	r2, [r3, #4]
   22d42:	23a0      	movs	r3, #160	; 0xa0
   22d44:	18fb      	adds	r3, r7, r3
   22d46:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   22d48:	4b3a      	ldr	r3, [pc, #232]	; (22e34 <m2m_ip_cb+0x294>)
   22d4a:	681b      	ldr	r3, [r3, #0]
   22d4c:	2b00      	cmp	r3, #0
   22d4e:	d100      	bne.n	22d52 <m2m_ip_cb+0x1b2>
   22d50:	e1bf      	b.n	230d2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   22d52:	4b38      	ldr	r3, [pc, #224]	; (22e34 <m2m_ip_cb+0x294>)
   22d54:	681b      	ldr	r3, [r3, #0]
   22d56:	22b4      	movs	r2, #180	; 0xb4
   22d58:	18ba      	adds	r2, r7, r2
   22d5a:	2008      	movs	r0, #8
   22d5c:	5610      	ldrsb	r0, [r2, r0]
   22d5e:	22a0      	movs	r2, #160	; 0xa0
   22d60:	18ba      	adds	r2, r7, r2
   22d62:	2104      	movs	r1, #4
   22d64:	4798      	blx	r3
}
   22d66:	e1b4      	b.n	230d2 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   22d68:	1dfb      	adds	r3, r7, #7
   22d6a:	781b      	ldrb	r3, [r3, #0]
   22d6c:	2b44      	cmp	r3, #68	; 0x44
   22d6e:	d003      	beq.n	22d78 <m2m_ip_cb+0x1d8>
   22d70:	1dfb      	adds	r3, r7, #7
   22d72:	781b      	ldrb	r3, [r3, #0]
   22d74:	2b4b      	cmp	r3, #75	; 0x4b
   22d76:	d13d      	bne.n	22df4 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   22d78:	239c      	movs	r3, #156	; 0x9c
   22d7a:	18f9      	adds	r1, r7, r3
   22d7c:	6838      	ldr	r0, [r7, #0]
   22d7e:	2300      	movs	r3, #0
   22d80:	2204      	movs	r2, #4
   22d82:	4c2b      	ldr	r4, [pc, #172]	; (22e30 <m2m_ip_cb+0x290>)
   22d84:	47a0      	blx	r4
   22d86:	1e03      	subs	r3, r0, #0
   22d88:	d000      	beq.n	22d8c <m2m_ip_cb+0x1ec>
   22d8a:	e19d      	b.n	230c8 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   22d8c:	239c      	movs	r3, #156	; 0x9c
   22d8e:	18fb      	adds	r3, r7, r3
   22d90:	2200      	movs	r2, #0
   22d92:	569a      	ldrsb	r2, [r3, r2]
   22d94:	2398      	movs	r3, #152	; 0x98
   22d96:	18fb      	adds	r3, r7, r3
   22d98:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   22d9a:	239c      	movs	r3, #156	; 0x9c
   22d9c:	18fb      	adds	r3, r7, r3
   22d9e:	2201      	movs	r2, #1
   22da0:	569a      	ldrsb	r2, [r3, r2]
   22da2:	2398      	movs	r3, #152	; 0x98
   22da4:	18fb      	adds	r3, r7, r3
   22da6:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   22da8:	239c      	movs	r3, #156	; 0x9c
   22daa:	18fb      	adds	r3, r7, r3
   22dac:	785b      	ldrb	r3, [r3, #1]
   22dae:	b25b      	sxtb	r3, r3
   22db0:	2b00      	cmp	r3, #0
   22db2:	d10f      	bne.n	22dd4 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   22db4:	239c      	movs	r3, #156	; 0x9c
   22db6:	18fb      	adds	r3, r7, r3
   22db8:	781b      	ldrb	r3, [r3, #0]
   22dba:	b25b      	sxtb	r3, r3
   22dbc:	0018      	movs	r0, r3
   22dbe:	239c      	movs	r3, #156	; 0x9c
   22dc0:	18fb      	adds	r3, r7, r3
   22dc2:	885b      	ldrh	r3, [r3, #2]
   22dc4:	3b08      	subs	r3, #8
   22dc6:	b299      	uxth	r1, r3
   22dc8:	4a1b      	ldr	r2, [pc, #108]	; (22e38 <m2m_ip_cb+0x298>)
   22dca:	0103      	lsls	r3, r0, #4
   22dcc:	18d3      	adds	r3, r2, r3
   22dce:	3308      	adds	r3, #8
   22dd0:	1c0a      	adds	r2, r1, #0
   22dd2:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   22dd4:	4b17      	ldr	r3, [pc, #92]	; (22e34 <m2m_ip_cb+0x294>)
   22dd6:	681b      	ldr	r3, [r3, #0]
   22dd8:	2b00      	cmp	r3, #0
   22dda:	d100      	bne.n	22dde <m2m_ip_cb+0x23e>
   22ddc:	e174      	b.n	230c8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   22dde:	4b15      	ldr	r3, [pc, #84]	; (22e34 <m2m_ip_cb+0x294>)
   22de0:	681b      	ldr	r3, [r3, #0]
   22de2:	229c      	movs	r2, #156	; 0x9c
   22de4:	18ba      	adds	r2, r7, r2
   22de6:	2000      	movs	r0, #0
   22de8:	5610      	ldrsb	r0, [r2, r0]
   22dea:	2298      	movs	r2, #152	; 0x98
   22dec:	18ba      	adds	r2, r7, r2
   22dee:	2105      	movs	r1, #5
   22df0:	4798      	blx	r3
	{
   22df2:	e169      	b.n	230c8 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   22df4:	1dfb      	adds	r3, r7, #7
   22df6:	781b      	ldrb	r3, [r3, #0]
   22df8:	2b4a      	cmp	r3, #74	; 0x4a
   22dfa:	d123      	bne.n	22e44 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   22dfc:	230c      	movs	r3, #12
   22dfe:	18f9      	adds	r1, r7, r3
   22e00:	6838      	ldr	r0, [r7, #0]
   22e02:	2300      	movs	r3, #0
   22e04:	2244      	movs	r2, #68	; 0x44
   22e06:	4c0a      	ldr	r4, [pc, #40]	; (22e30 <m2m_ip_cb+0x290>)
   22e08:	47a0      	blx	r4
   22e0a:	1e03      	subs	r3, r0, #0
   22e0c:	d000      	beq.n	22e10 <m2m_ip_cb+0x270>
   22e0e:	e160      	b.n	230d2 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   22e10:	4b0b      	ldr	r3, [pc, #44]	; (22e40 <m2m_ip_cb+0x2a0>)
   22e12:	681b      	ldr	r3, [r3, #0]
   22e14:	2b00      	cmp	r3, #0
   22e16:	d100      	bne.n	22e1a <m2m_ip_cb+0x27a>
   22e18:	e15b      	b.n	230d2 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   22e1a:	4b09      	ldr	r3, [pc, #36]	; (22e40 <m2m_ip_cb+0x2a0>)
   22e1c:	681a      	ldr	r2, [r3, #0]
   22e1e:	230c      	movs	r3, #12
   22e20:	18fb      	adds	r3, r7, r3
   22e22:	6c19      	ldr	r1, [r3, #64]	; 0x40
   22e24:	230c      	movs	r3, #12
   22e26:	18fb      	adds	r3, r7, r3
   22e28:	0018      	movs	r0, r3
   22e2a:	4790      	blx	r2
}
   22e2c:	e151      	b.n	230d2 <m2m_ip_cb+0x532>
   22e2e:	46c0      	nop			; (mov r8, r8)
   22e30:	0001f39d 	.word	0x0001f39d
   22e34:	20005524 	.word	0x20005524
   22e38:	20005474 	.word	0x20005474
   22e3c:	20003d0a 	.word	0x20003d0a
   22e40:	2000552c 	.word	0x2000552c
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   22e44:	1dfb      	adds	r3, r7, #7
   22e46:	781b      	ldrb	r3, [r3, #0]
   22e48:	2b46      	cmp	r3, #70	; 0x46
   22e4a:	d008      	beq.n	22e5e <m2m_ip_cb+0x2be>
   22e4c:	1dfb      	adds	r3, r7, #7
   22e4e:	781b      	ldrb	r3, [r3, #0]
   22e50:	2b48      	cmp	r3, #72	; 0x48
   22e52:	d004      	beq.n	22e5e <m2m_ip_cb+0x2be>
   22e54:	1dfb      	adds	r3, r7, #7
   22e56:	781b      	ldrb	r3, [r3, #0]
   22e58:	2b4d      	cmp	r3, #77	; 0x4d
   22e5a:	d000      	beq.n	22e5e <m2m_ip_cb+0x2be>
   22e5c:	e0b4      	b.n	22fc8 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   22e5e:	23df      	movs	r3, #223	; 0xdf
   22e60:	18fb      	adds	r3, r7, r3
   22e62:	2206      	movs	r2, #6
   22e64:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   22e66:	1dfb      	adds	r3, r7, #7
   22e68:	781b      	ldrb	r3, [r3, #0]
   22e6a:	2b48      	cmp	r3, #72	; 0x48
   22e6c:	d103      	bne.n	22e76 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   22e6e:	23df      	movs	r3, #223	; 0xdf
   22e70:	18fb      	adds	r3, r7, r3
   22e72:	2209      	movs	r2, #9
   22e74:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   22e76:	23d8      	movs	r3, #216	; 0xd8
   22e78:	18fb      	adds	r3, r7, r3
   22e7a:	2210      	movs	r2, #16
   22e7c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   22e7e:	23d8      	movs	r3, #216	; 0xd8
   22e80:	18fb      	adds	r3, r7, r3
   22e82:	881a      	ldrh	r2, [r3, #0]
   22e84:	2388      	movs	r3, #136	; 0x88
   22e86:	18f9      	adds	r1, r7, r3
   22e88:	6838      	ldr	r0, [r7, #0]
   22e8a:	2300      	movs	r3, #0
   22e8c:	4c93      	ldr	r4, [pc, #588]	; (230dc <m2m_ip_cb+0x53c>)
   22e8e:	47a0      	blx	r4
   22e90:	1e03      	subs	r3, r0, #0
   22e92:	d000      	beq.n	22e96 <m2m_ip_cb+0x2f6>
   22e94:	e11a      	b.n	230cc <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   22e96:	23d6      	movs	r3, #214	; 0xd6
   22e98:	18fb      	adds	r3, r7, r3
   22e9a:	2200      	movs	r2, #0
   22e9c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   22e9e:	23d5      	movs	r3, #213	; 0xd5
   22ea0:	18fb      	adds	r3, r7, r3
   22ea2:	2288      	movs	r2, #136	; 0x88
   22ea4:	18ba      	adds	r2, r7, r2
   22ea6:	7b12      	ldrb	r2, [r2, #12]
   22ea8:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   22eaa:	23d6      	movs	r3, #214	; 0xd6
   22eac:	18fb      	adds	r3, r7, r3
   22eae:	2288      	movs	r2, #136	; 0x88
   22eb0:	18ba      	adds	r2, r7, r2
   22eb2:	89d2      	ldrh	r2, [r2, #14]
   22eb4:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   22eb6:	23d5      	movs	r3, #213	; 0xd5
   22eb8:	18fb      	adds	r3, r7, r3
   22eba:	781b      	ldrb	r3, [r3, #0]
   22ebc:	b25b      	sxtb	r3, r3
   22ebe:	4a88      	ldr	r2, [pc, #544]	; (230e0 <m2m_ip_cb+0x540>)
   22ec0:	011b      	lsls	r3, r3, #4
   22ec2:	18d3      	adds	r3, r2, r3
   22ec4:	330c      	adds	r3, #12
   22ec6:	2200      	movs	r2, #0
   22ec8:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   22eca:	23d2      	movs	r3, #210	; 0xd2
   22ecc:	18fb      	adds	r3, r7, r3
   22ece:	2288      	movs	r2, #136	; 0x88
   22ed0:	18ba      	adds	r2, r7, r2
   22ed2:	8912      	ldrh	r2, [r2, #8]
   22ed4:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   22ed6:	23d0      	movs	r3, #208	; 0xd0
   22ed8:	18fb      	adds	r3, r7, r3
   22eda:	2288      	movs	r2, #136	; 0x88
   22edc:	18ba      	adds	r2, r7, r2
   22ede:	8952      	ldrh	r2, [r2, #10]
   22ee0:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   22ee2:	2388      	movs	r3, #136	; 0x88
   22ee4:	18fb      	adds	r3, r7, r3
   22ee6:	885a      	ldrh	r2, [r3, #2]
   22ee8:	2370      	movs	r3, #112	; 0x70
   22eea:	18fb      	adds	r3, r7, r3
   22eec:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   22eee:	2388      	movs	r3, #136	; 0x88
   22ef0:	18fb      	adds	r3, r7, r3
   22ef2:	685a      	ldr	r2, [r3, #4]
   22ef4:	2370      	movs	r3, #112	; 0x70
   22ef6:	18fb      	adds	r3, r7, r3
   22ef8:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   22efa:	23d5      	movs	r3, #213	; 0xd5
   22efc:	18fb      	adds	r3, r7, r3
   22efe:	781b      	ldrb	r3, [r3, #0]
   22f00:	b25b      	sxtb	r3, r3
   22f02:	4a77      	ldr	r2, [pc, #476]	; (230e0 <m2m_ip_cb+0x540>)
   22f04:	011b      	lsls	r3, r3, #4
   22f06:	18d3      	adds	r3, r2, r3
   22f08:	3306      	adds	r3, #6
   22f0a:	881b      	ldrh	r3, [r3, #0]
   22f0c:	b29b      	uxth	r3, r3
   22f0e:	22d6      	movs	r2, #214	; 0xd6
   22f10:	18ba      	adds	r2, r7, r2
   22f12:	8812      	ldrh	r2, [r2, #0]
   22f14:	429a      	cmp	r2, r3
   22f16:	d148      	bne.n	22faa <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   22f18:	23d2      	movs	r3, #210	; 0xd2
   22f1a:	18fb      	adds	r3, r7, r3
   22f1c:	2200      	movs	r2, #0
   22f1e:	5e9b      	ldrsh	r3, [r3, r2]
   22f20:	2b00      	cmp	r3, #0
   22f22:	dd25      	ble.n	22f70 <m2m_ip_cb+0x3d0>
   22f24:	23d2      	movs	r3, #210	; 0xd2
   22f26:	18fb      	adds	r3, r7, r3
   22f28:	2200      	movs	r2, #0
   22f2a:	5e9a      	ldrsh	r2, [r3, r2]
   22f2c:	1d3b      	adds	r3, r7, #4
   22f2e:	881b      	ldrh	r3, [r3, #0]
   22f30:	429a      	cmp	r2, r3
   22f32:	da1d      	bge.n	22f70 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   22f34:	23d0      	movs	r3, #208	; 0xd0
   22f36:	18fb      	adds	r3, r7, r3
   22f38:	881b      	ldrh	r3, [r3, #0]
   22f3a:	683a      	ldr	r2, [r7, #0]
   22f3c:	18d3      	adds	r3, r2, r3
   22f3e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   22f40:	23d8      	movs	r3, #216	; 0xd8
   22f42:	18fb      	adds	r3, r7, r3
   22f44:	22d2      	movs	r2, #210	; 0xd2
   22f46:	18ba      	adds	r2, r7, r2
   22f48:	8812      	ldrh	r2, [r2, #0]
   22f4a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   22f4c:	683c      	ldr	r4, [r7, #0]
   22f4e:	23df      	movs	r3, #223	; 0xdf
   22f50:	18fb      	adds	r3, r7, r3
   22f52:	781a      	ldrb	r2, [r3, #0]
   22f54:	2370      	movs	r3, #112	; 0x70
   22f56:	18f9      	adds	r1, r7, r3
   22f58:	23d5      	movs	r3, #213	; 0xd5
   22f5a:	18fb      	adds	r3, r7, r3
   22f5c:	2000      	movs	r0, #0
   22f5e:	5618      	ldrsb	r0, [r3, r0]
   22f60:	23d8      	movs	r3, #216	; 0xd8
   22f62:	18fb      	adds	r3, r7, r3
   22f64:	881b      	ldrh	r3, [r3, #0]
   22f66:	9300      	str	r3, [sp, #0]
   22f68:	0023      	movs	r3, r4
   22f6a:	4c5e      	ldr	r4, [pc, #376]	; (230e4 <m2m_ip_cb+0x544>)
   22f6c:	47a0      	blx	r4
	{
   22f6e:	e0ad      	b.n	230cc <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   22f70:	2370      	movs	r3, #112	; 0x70
   22f72:	18fb      	adds	r3, r7, r3
   22f74:	22d2      	movs	r2, #210	; 0xd2
   22f76:	18ba      	adds	r2, r7, r2
   22f78:	8812      	ldrh	r2, [r2, #0]
   22f7a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   22f7c:	2370      	movs	r3, #112	; 0x70
   22f7e:	18fb      	adds	r3, r7, r3
   22f80:	2200      	movs	r2, #0
   22f82:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   22f84:	4b58      	ldr	r3, [pc, #352]	; (230e8 <m2m_ip_cb+0x548>)
   22f86:	681b      	ldr	r3, [r3, #0]
   22f88:	2b00      	cmp	r3, #0
   22f8a:	d100      	bne.n	22f8e <m2m_ip_cb+0x3ee>
   22f8c:	e09e      	b.n	230cc <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   22f8e:	4b56      	ldr	r3, [pc, #344]	; (230e8 <m2m_ip_cb+0x548>)
   22f90:	681b      	ldr	r3, [r3, #0]
   22f92:	2270      	movs	r2, #112	; 0x70
   22f94:	18bc      	adds	r4, r7, r2
   22f96:	22df      	movs	r2, #223	; 0xdf
   22f98:	18ba      	adds	r2, r7, r2
   22f9a:	7811      	ldrb	r1, [r2, #0]
   22f9c:	22d5      	movs	r2, #213	; 0xd5
   22f9e:	18ba      	adds	r2, r7, r2
   22fa0:	2000      	movs	r0, #0
   22fa2:	5610      	ldrsb	r0, [r2, r0]
   22fa4:	0022      	movs	r2, r4
   22fa6:	4798      	blx	r3
	{
   22fa8:	e090      	b.n	230cc <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   22faa:	23d8      	movs	r3, #216	; 0xd8
   22fac:	18fa      	adds	r2, r7, r3
   22fae:	1d3b      	adds	r3, r7, #4
   22fb0:	8812      	ldrh	r2, [r2, #0]
   22fb2:	881b      	ldrh	r3, [r3, #0]
   22fb4:	429a      	cmp	r2, r3
   22fb6:	d300      	bcc.n	22fba <m2m_ip_cb+0x41a>
   22fb8:	e088      	b.n	230cc <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   22fba:	2301      	movs	r3, #1
   22fbc:	2200      	movs	r2, #0
   22fbe:	2100      	movs	r1, #0
   22fc0:	2000      	movs	r0, #0
   22fc2:	4c46      	ldr	r4, [pc, #280]	; (230dc <m2m_ip_cb+0x53c>)
   22fc4:	47a0      	blx	r4
	{
   22fc6:	e081      	b.n	230cc <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   22fc8:	1dfb      	adds	r3, r7, #7
   22fca:	781b      	ldrb	r3, [r3, #0]
   22fcc:	2b45      	cmp	r3, #69	; 0x45
   22fce:	d007      	beq.n	22fe0 <m2m_ip_cb+0x440>
   22fd0:	1dfb      	adds	r3, r7, #7
   22fd2:	781b      	ldrb	r3, [r3, #0]
   22fd4:	2b47      	cmp	r3, #71	; 0x47
   22fd6:	d003      	beq.n	22fe0 <m2m_ip_cb+0x440>
   22fd8:	1dfb      	adds	r3, r7, #7
   22fda:	781b      	ldrb	r3, [r3, #0]
   22fdc:	2b4c      	cmp	r3, #76	; 0x4c
   22fde:	d14c      	bne.n	2307a <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   22fe0:	23de      	movs	r3, #222	; 0xde
   22fe2:	18fb      	adds	r3, r7, r3
   22fe4:	2207      	movs	r2, #7
   22fe6:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   22fe8:	1dfb      	adds	r3, r7, #7
   22fea:	781b      	ldrb	r3, [r3, #0]
   22fec:	2b47      	cmp	r3, #71	; 0x47
   22fee:	d103      	bne.n	22ff8 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   22ff0:	23de      	movs	r3, #222	; 0xde
   22ff2:	18fb      	adds	r3, r7, r3
   22ff4:	2208      	movs	r2, #8
   22ff6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   22ff8:	2364      	movs	r3, #100	; 0x64
   22ffa:	18f9      	adds	r1, r7, r3
   22ffc:	6838      	ldr	r0, [r7, #0]
   22ffe:	2300      	movs	r3, #0
   23000:	2208      	movs	r2, #8
   23002:	4c36      	ldr	r4, [pc, #216]	; (230dc <m2m_ip_cb+0x53c>)
   23004:	47a0      	blx	r4
   23006:	1e03      	subs	r3, r0, #0
   23008:	d162      	bne.n	230d0 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   2300a:	23dc      	movs	r3, #220	; 0xdc
   2300c:	18fb      	adds	r3, r7, r3
   2300e:	2200      	movs	r2, #0
   23010:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   23012:	23db      	movs	r3, #219	; 0xdb
   23014:	18fb      	adds	r3, r7, r3
   23016:	2264      	movs	r2, #100	; 0x64
   23018:	18ba      	adds	r2, r7, r2
   2301a:	7812      	ldrb	r2, [r2, #0]
   2301c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   2301e:	23dc      	movs	r3, #220	; 0xdc
   23020:	18fb      	adds	r3, r7, r3
   23022:	2264      	movs	r2, #100	; 0x64
   23024:	18ba      	adds	r2, r7, r2
   23026:	8892      	ldrh	r2, [r2, #4]
   23028:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   2302a:	2364      	movs	r3, #100	; 0x64
   2302c:	18fb      	adds	r3, r7, r3
   2302e:	2202      	movs	r2, #2
   23030:	5e9a      	ldrsh	r2, [r3, r2]
   23032:	236e      	movs	r3, #110	; 0x6e
   23034:	18fb      	adds	r3, r7, r3
   23036:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   23038:	23db      	movs	r3, #219	; 0xdb
   2303a:	18fb      	adds	r3, r7, r3
   2303c:	781b      	ldrb	r3, [r3, #0]
   2303e:	b25b      	sxtb	r3, r3
   23040:	4a27      	ldr	r2, [pc, #156]	; (230e0 <m2m_ip_cb+0x540>)
   23042:	011b      	lsls	r3, r3, #4
   23044:	18d3      	adds	r3, r2, r3
   23046:	3306      	adds	r3, #6
   23048:	881b      	ldrh	r3, [r3, #0]
   2304a:	b29b      	uxth	r3, r3
   2304c:	22dc      	movs	r2, #220	; 0xdc
   2304e:	18ba      	adds	r2, r7, r2
   23050:	8812      	ldrh	r2, [r2, #0]
   23052:	429a      	cmp	r2, r3
   23054:	d13c      	bne.n	230d0 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   23056:	4b24      	ldr	r3, [pc, #144]	; (230e8 <m2m_ip_cb+0x548>)
   23058:	681b      	ldr	r3, [r3, #0]
   2305a:	2b00      	cmp	r3, #0
   2305c:	d038      	beq.n	230d0 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   2305e:	4b22      	ldr	r3, [pc, #136]	; (230e8 <m2m_ip_cb+0x548>)
   23060:	681b      	ldr	r3, [r3, #0]
   23062:	226e      	movs	r2, #110	; 0x6e
   23064:	18bc      	adds	r4, r7, r2
   23066:	22de      	movs	r2, #222	; 0xde
   23068:	18ba      	adds	r2, r7, r2
   2306a:	7811      	ldrb	r1, [r2, #0]
   2306c:	22db      	movs	r2, #219	; 0xdb
   2306e:	18ba      	adds	r2, r7, r2
   23070:	2000      	movs	r0, #0
   23072:	5610      	ldrsb	r0, [r2, r0]
   23074:	0022      	movs	r2, r4
   23076:	4798      	blx	r3
	{
   23078:	e02a      	b.n	230d0 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   2307a:	1dfb      	adds	r3, r7, #7
   2307c:	781b      	ldrb	r3, [r3, #0]
   2307e:	2b52      	cmp	r3, #82	; 0x52
   23080:	d127      	bne.n	230d2 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   23082:	2350      	movs	r3, #80	; 0x50
   23084:	18f9      	adds	r1, r7, r3
   23086:	6838      	ldr	r0, [r7, #0]
   23088:	2301      	movs	r3, #1
   2308a:	2214      	movs	r2, #20
   2308c:	4c13      	ldr	r4, [pc, #76]	; (230dc <m2m_ip_cb+0x53c>)
   2308e:	47a0      	blx	r4
   23090:	1e03      	subs	r3, r0, #0
   23092:	d11e      	bne.n	230d2 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   23094:	2350      	movs	r3, #80	; 0x50
   23096:	18fb      	adds	r3, r7, r3
   23098:	685b      	ldr	r3, [r3, #4]
   2309a:	001a      	movs	r2, r3
   2309c:	4b13      	ldr	r3, [pc, #76]	; (230ec <m2m_ip_cb+0x54c>)
   2309e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   230a0:	4b12      	ldr	r3, [pc, #72]	; (230ec <m2m_ip_cb+0x54c>)
   230a2:	681b      	ldr	r3, [r3, #0]
   230a4:	2b00      	cmp	r3, #0
   230a6:	d014      	beq.n	230d2 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   230a8:	4b10      	ldr	r3, [pc, #64]	; (230ec <m2m_ip_cb+0x54c>)
   230aa:	681c      	ldr	r4, [r3, #0]
   230ac:	2350      	movs	r3, #80	; 0x50
   230ae:	18fb      	adds	r3, r7, r3
   230b0:	6818      	ldr	r0, [r3, #0]
   230b2:	2350      	movs	r3, #80	; 0x50
   230b4:	18fb      	adds	r3, r7, r3
   230b6:	6899      	ldr	r1, [r3, #8]
   230b8:	2350      	movs	r3, #80	; 0x50
   230ba:	18fb      	adds	r3, r7, r3
   230bc:	7c1b      	ldrb	r3, [r3, #16]
   230be:	001a      	movs	r2, r3
   230c0:	47a0      	blx	r4
}
   230c2:	e006      	b.n	230d2 <m2m_ip_cb+0x532>
	{
   230c4:	46c0      	nop			; (mov r8, r8)
   230c6:	e004      	b.n	230d2 <m2m_ip_cb+0x532>
	{
   230c8:	46c0      	nop			; (mov r8, r8)
   230ca:	e002      	b.n	230d2 <m2m_ip_cb+0x532>
	{
   230cc:	46c0      	nop			; (mov r8, r8)
   230ce:	e000      	b.n	230d2 <m2m_ip_cb+0x532>
	{
   230d0:	46c0      	nop			; (mov r8, r8)
}
   230d2:	46c0      	nop			; (mov r8, r8)
   230d4:	46bd      	mov	sp, r7
   230d6:	b039      	add	sp, #228	; 0xe4
   230d8:	bd90      	pop	{r4, r7, pc}
   230da:	46c0      	nop			; (mov r8, r8)
   230dc:	0001f39d 	.word	0x0001f39d
   230e0:	20005474 	.word	0x20005474
   230e4:	000229a5 	.word	0x000229a5
   230e8:	20005524 	.word	0x20005524
   230ec:	20005528 	.word	0x20005528

000230f0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   230f0:	b580      	push	{r7, lr}
   230f2:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   230f4:	4b0c      	ldr	r3, [pc, #48]	; (23128 <socketInit+0x38>)
   230f6:	781b      	ldrb	r3, [r3, #0]
   230f8:	b2db      	uxtb	r3, r3
   230fa:	2b00      	cmp	r3, #0
   230fc:	d110      	bne.n	23120 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   230fe:	4b0b      	ldr	r3, [pc, #44]	; (2312c <socketInit+0x3c>)
   23100:	22b0      	movs	r2, #176	; 0xb0
   23102:	2100      	movs	r1, #0
   23104:	0018      	movs	r0, r3
   23106:	4b0a      	ldr	r3, [pc, #40]	; (23130 <socketInit+0x40>)
   23108:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   2310a:	4b0a      	ldr	r3, [pc, #40]	; (23134 <socketInit+0x44>)
   2310c:	0019      	movs	r1, r3
   2310e:	2002      	movs	r0, #2
   23110:	4b09      	ldr	r3, [pc, #36]	; (23138 <socketInit+0x48>)
   23112:	4798      	blx	r3
		gbSocketInit	= 1;
   23114:	4b04      	ldr	r3, [pc, #16]	; (23128 <socketInit+0x38>)
   23116:	2201      	movs	r2, #1
   23118:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   2311a:	4b08      	ldr	r3, [pc, #32]	; (2313c <socketInit+0x4c>)
   2311c:	2200      	movs	r2, #0
   2311e:	801a      	strh	r2, [r3, #0]
	}
}
   23120:	46c0      	nop			; (mov r8, r8)
   23122:	46bd      	mov	sp, r7
   23124:	bd80      	pop	{r7, pc}
   23126:	46c0      	nop			; (mov r8, r8)
   23128:	20003d0c 	.word	0x20003d0c
   2312c:	20005474 	.word	0x20005474
   23130:	0001e821 	.word	0x0001e821
   23134:	00022ba1 	.word	0x00022ba1
   23138:	0001f51d 	.word	0x0001f51d
   2313c:	20003d0a 	.word	0x20003d0a

00023140 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   23140:	b580      	push	{r7, lr}
   23142:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   23144:	4b0a      	ldr	r3, [pc, #40]	; (23170 <socketDeinit+0x30>)
   23146:	22b0      	movs	r2, #176	; 0xb0
   23148:	2100      	movs	r1, #0
   2314a:	0018      	movs	r0, r3
   2314c:	4b09      	ldr	r3, [pc, #36]	; (23174 <socketDeinit+0x34>)
   2314e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   23150:	2100      	movs	r1, #0
   23152:	2002      	movs	r0, #2
   23154:	4b08      	ldr	r3, [pc, #32]	; (23178 <socketDeinit+0x38>)
   23156:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   23158:	4b08      	ldr	r3, [pc, #32]	; (2317c <socketDeinit+0x3c>)
   2315a:	2200      	movs	r2, #0
   2315c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   2315e:	4b08      	ldr	r3, [pc, #32]	; (23180 <socketDeinit+0x40>)
   23160:	2200      	movs	r2, #0
   23162:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   23164:	4b07      	ldr	r3, [pc, #28]	; (23184 <socketDeinit+0x44>)
   23166:	2200      	movs	r2, #0
   23168:	701a      	strb	r2, [r3, #0]
}
   2316a:	46c0      	nop			; (mov r8, r8)
   2316c:	46bd      	mov	sp, r7
   2316e:	bd80      	pop	{r7, pc}
   23170:	20005474 	.word	0x20005474
   23174:	0001e821 	.word	0x0001e821
   23178:	0001f51d 	.word	0x0001f51d
   2317c:	20005524 	.word	0x20005524
   23180:	2000552c 	.word	0x2000552c
   23184:	20003d0c 	.word	0x20003d0c

00023188 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   23188:	b580      	push	{r7, lr}
   2318a:	b082      	sub	sp, #8
   2318c:	af00      	add	r7, sp, #0
   2318e:	6078      	str	r0, [r7, #4]
   23190:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   23192:	4b05      	ldr	r3, [pc, #20]	; (231a8 <registerSocketCallback+0x20>)
   23194:	687a      	ldr	r2, [r7, #4]
   23196:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   23198:	4b04      	ldr	r3, [pc, #16]	; (231ac <registerSocketCallback+0x24>)
   2319a:	683a      	ldr	r2, [r7, #0]
   2319c:	601a      	str	r2, [r3, #0]
}
   2319e:	46c0      	nop			; (mov r8, r8)
   231a0:	46bd      	mov	sp, r7
   231a2:	b002      	add	sp, #8
   231a4:	bd80      	pop	{r7, pc}
   231a6:	46c0      	nop			; (mov r8, r8)
   231a8:	20005524 	.word	0x20005524
   231ac:	2000552c 	.word	0x2000552c

000231b0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   231b0:	b590      	push	{r4, r7, lr}
   231b2:	b08d      	sub	sp, #52	; 0x34
   231b4:	af04      	add	r7, sp, #16
   231b6:	0004      	movs	r4, r0
   231b8:	0008      	movs	r0, r1
   231ba:	0011      	movs	r1, r2
   231bc:	1dbb      	adds	r3, r7, #6
   231be:	1c22      	adds	r2, r4, #0
   231c0:	801a      	strh	r2, [r3, #0]
   231c2:	1d7b      	adds	r3, r7, #5
   231c4:	1c02      	adds	r2, r0, #0
   231c6:	701a      	strb	r2, [r3, #0]
   231c8:	1d3b      	adds	r3, r7, #4
   231ca:	1c0a      	adds	r2, r1, #0
   231cc:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   231ce:	231f      	movs	r3, #31
   231d0:	18fb      	adds	r3, r7, r3
   231d2:	22ff      	movs	r2, #255	; 0xff
   231d4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   231d6:	1dbb      	adds	r3, r7, #6
   231d8:	881b      	ldrh	r3, [r3, #0]
   231da:	2b02      	cmp	r3, #2
   231dc:	d000      	beq.n	231e0 <socket+0x30>
   231de:	e0ce      	b.n	2337e <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   231e0:	1d7b      	adds	r3, r7, #5
   231e2:	781b      	ldrb	r3, [r3, #0]
   231e4:	2b01      	cmp	r3, #1
   231e6:	d135      	bne.n	23254 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   231e8:	231e      	movs	r3, #30
   231ea:	18fb      	adds	r3, r7, r3
   231ec:	2200      	movs	r2, #0
   231ee:	701a      	strb	r2, [r3, #0]
   231f0:	e02a      	b.n	23248 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   231f2:	2317      	movs	r3, #23
   231f4:	18fb      	adds	r3, r7, r3
   231f6:	4a66      	ldr	r2, [pc, #408]	; (23390 <socket+0x1e0>)
   231f8:	7812      	ldrb	r2, [r2, #0]
   231fa:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   231fc:	4b64      	ldr	r3, [pc, #400]	; (23390 <socket+0x1e0>)
   231fe:	781b      	ldrb	r3, [r3, #0]
   23200:	b2db      	uxtb	r3, r3
   23202:	011a      	lsls	r2, r3, #4
   23204:	4b63      	ldr	r3, [pc, #396]	; (23394 <socket+0x1e4>)
   23206:	18d3      	adds	r3, r2, r3
   23208:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   2320a:	4b61      	ldr	r3, [pc, #388]	; (23390 <socket+0x1e0>)
   2320c:	781b      	ldrb	r3, [r3, #0]
   2320e:	b2db      	uxtb	r3, r3
   23210:	1c5a      	adds	r2, r3, #1
   23212:	4b61      	ldr	r3, [pc, #388]	; (23398 <socket+0x1e8>)
   23214:	2107      	movs	r1, #7
   23216:	0010      	movs	r0, r2
   23218:	4798      	blx	r3
   2321a:	000b      	movs	r3, r1
   2321c:	b2da      	uxtb	r2, r3
   2321e:	4b5c      	ldr	r3, [pc, #368]	; (23390 <socket+0x1e0>)
   23220:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   23222:	69bb      	ldr	r3, [r7, #24]
   23224:	7a9b      	ldrb	r3, [r3, #10]
   23226:	b2db      	uxtb	r3, r3
   23228:	2b00      	cmp	r3, #0
   2322a:	d106      	bne.n	2323a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   2322c:	231f      	movs	r3, #31
   2322e:	18fb      	adds	r3, r7, r3
   23230:	2217      	movs	r2, #23
   23232:	18ba      	adds	r2, r7, r2
   23234:	7812      	ldrb	r2, [r2, #0]
   23236:	701a      	strb	r2, [r3, #0]
					break;
   23238:	e04c      	b.n	232d4 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2323a:	231e      	movs	r3, #30
   2323c:	18fb      	adds	r3, r7, r3
   2323e:	781a      	ldrb	r2, [r3, #0]
   23240:	231e      	movs	r3, #30
   23242:	18fb      	adds	r3, r7, r3
   23244:	3201      	adds	r2, #1
   23246:	701a      	strb	r2, [r3, #0]
   23248:	231e      	movs	r3, #30
   2324a:	18fb      	adds	r3, r7, r3
   2324c:	781b      	ldrb	r3, [r3, #0]
   2324e:	2b06      	cmp	r3, #6
   23250:	d9cf      	bls.n	231f2 <socket+0x42>
   23252:	e03f      	b.n	232d4 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   23254:	1d7b      	adds	r3, r7, #5
   23256:	781b      	ldrb	r3, [r3, #0]
   23258:	2b02      	cmp	r3, #2
   2325a:	d13b      	bne.n	232d4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   2325c:	4b4f      	ldr	r3, [pc, #316]	; (2339c <socket+0x1ec>)
   2325e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   23260:	231e      	movs	r3, #30
   23262:	18fb      	adds	r3, r7, r3
   23264:	2200      	movs	r2, #0
   23266:	701a      	strb	r2, [r3, #0]
   23268:	e02f      	b.n	232ca <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   2326a:	2317      	movs	r3, #23
   2326c:	18fb      	adds	r3, r7, r3
   2326e:	4a4c      	ldr	r2, [pc, #304]	; (233a0 <socket+0x1f0>)
   23270:	7812      	ldrb	r2, [r2, #0]
   23272:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   23274:	4b4a      	ldr	r3, [pc, #296]	; (233a0 <socket+0x1f0>)
   23276:	781b      	ldrb	r3, [r3, #0]
   23278:	b2db      	uxtb	r3, r3
   2327a:	011b      	lsls	r3, r3, #4
   2327c:	693a      	ldr	r2, [r7, #16]
   2327e:	18d3      	adds	r3, r2, r3
   23280:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   23282:	4b47      	ldr	r3, [pc, #284]	; (233a0 <socket+0x1f0>)
   23284:	781b      	ldrb	r3, [r3, #0]
   23286:	b2db      	uxtb	r3, r3
   23288:	3301      	adds	r3, #1
   2328a:	4a46      	ldr	r2, [pc, #280]	; (233a4 <socket+0x1f4>)
   2328c:	4013      	ands	r3, r2
   2328e:	d504      	bpl.n	2329a <socket+0xea>
   23290:	3b01      	subs	r3, #1
   23292:	2204      	movs	r2, #4
   23294:	4252      	negs	r2, r2
   23296:	4313      	orrs	r3, r2
   23298:	3301      	adds	r3, #1
   2329a:	b2da      	uxtb	r2, r3
   2329c:	4b40      	ldr	r3, [pc, #256]	; (233a0 <socket+0x1f0>)
   2329e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   232a0:	69bb      	ldr	r3, [r7, #24]
   232a2:	7a9b      	ldrb	r3, [r3, #10]
   232a4:	b2db      	uxtb	r3, r3
   232a6:	2b00      	cmp	r3, #0
   232a8:	d108      	bne.n	232bc <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   232aa:	2317      	movs	r3, #23
   232ac:	18fb      	adds	r3, r7, r3
   232ae:	781b      	ldrb	r3, [r3, #0]
   232b0:	3307      	adds	r3, #7
   232b2:	b2da      	uxtb	r2, r3
   232b4:	231f      	movs	r3, #31
   232b6:	18fb      	adds	r3, r7, r3
   232b8:	701a      	strb	r2, [r3, #0]
					break;
   232ba:	e00b      	b.n	232d4 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   232bc:	231e      	movs	r3, #30
   232be:	18fb      	adds	r3, r7, r3
   232c0:	781a      	ldrb	r2, [r3, #0]
   232c2:	231e      	movs	r3, #30
   232c4:	18fb      	adds	r3, r7, r3
   232c6:	3201      	adds	r2, #1
   232c8:	701a      	strb	r2, [r3, #0]
   232ca:	231e      	movs	r3, #30
   232cc:	18fb      	adds	r3, r7, r3
   232ce:	781b      	ldrb	r3, [r3, #0]
   232d0:	2b03      	cmp	r3, #3
   232d2:	d9ca      	bls.n	2326a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   232d4:	231f      	movs	r3, #31
   232d6:	18fb      	adds	r3, r7, r3
   232d8:	781b      	ldrb	r3, [r3, #0]
   232da:	2b7f      	cmp	r3, #127	; 0x7f
   232dc:	d84f      	bhi.n	2337e <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   232de:	69bb      	ldr	r3, [r7, #24]
   232e0:	2210      	movs	r2, #16
   232e2:	2100      	movs	r1, #0
   232e4:	0018      	movs	r0, r3
   232e6:	4b30      	ldr	r3, [pc, #192]	; (233a8 <socket+0x1f8>)
   232e8:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   232ea:	69bb      	ldr	r3, [r7, #24]
   232ec:	2201      	movs	r2, #1
   232ee:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   232f0:	4b2e      	ldr	r3, [pc, #184]	; (233ac <socket+0x1fc>)
   232f2:	881b      	ldrh	r3, [r3, #0]
   232f4:	b29b      	uxth	r3, r3
   232f6:	3301      	adds	r3, #1
   232f8:	b29a      	uxth	r2, r3
   232fa:	4b2c      	ldr	r3, [pc, #176]	; (233ac <socket+0x1fc>)
   232fc:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   232fe:	4b2b      	ldr	r3, [pc, #172]	; (233ac <socket+0x1fc>)
   23300:	881b      	ldrh	r3, [r3, #0]
   23302:	b29b      	uxth	r3, r3
   23304:	2b00      	cmp	r3, #0
   23306:	d106      	bne.n	23316 <socket+0x166>
				++gu16SessionID;
   23308:	4b28      	ldr	r3, [pc, #160]	; (233ac <socket+0x1fc>)
   2330a:	881b      	ldrh	r3, [r3, #0]
   2330c:	b29b      	uxth	r3, r3
   2330e:	3301      	adds	r3, #1
   23310:	b29a      	uxth	r2, r3
   23312:	4b26      	ldr	r3, [pc, #152]	; (233ac <socket+0x1fc>)
   23314:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   23316:	4b25      	ldr	r3, [pc, #148]	; (233ac <socket+0x1fc>)
   23318:	881b      	ldrh	r3, [r3, #0]
   2331a:	b29a      	uxth	r2, r3
   2331c:	69bb      	ldr	r3, [r7, #24]
   2331e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   23320:	4b23      	ldr	r3, [pc, #140]	; (233b0 <socket+0x200>)
   23322:	0018      	movs	r0, r3
   23324:	4b23      	ldr	r3, [pc, #140]	; (233b4 <socket+0x204>)
   23326:	4798      	blx	r3
   23328:	231f      	movs	r3, #31
   2332a:	18fb      	adds	r3, r7, r3
   2332c:	2100      	movs	r1, #0
   2332e:	5659      	ldrsb	r1, [r3, r1]
   23330:	4b1e      	ldr	r3, [pc, #120]	; (233ac <socket+0x1fc>)
   23332:	881b      	ldrh	r3, [r3, #0]
   23334:	b29b      	uxth	r3, r3
   23336:	001a      	movs	r2, r3
   23338:	4b1f      	ldr	r3, [pc, #124]	; (233b8 <socket+0x208>)
   2333a:	0018      	movs	r0, r3
   2333c:	4b1d      	ldr	r3, [pc, #116]	; (233b4 <socket+0x204>)
   2333e:	4798      	blx	r3
   23340:	4b1e      	ldr	r3, [pc, #120]	; (233bc <socket+0x20c>)
   23342:	0018      	movs	r0, r3
   23344:	4b1b      	ldr	r3, [pc, #108]	; (233b4 <socket+0x204>)
   23346:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   23348:	1d3b      	adds	r3, r7, #4
   2334a:	781b      	ldrb	r3, [r3, #0]
   2334c:	2201      	movs	r2, #1
   2334e:	4013      	ands	r3, r2
   23350:	d015      	beq.n	2337e <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   23352:	230c      	movs	r3, #12
   23354:	18fb      	adds	r3, r7, r3
   23356:	221f      	movs	r2, #31
   23358:	18ba      	adds	r2, r7, r2
   2335a:	7812      	ldrb	r2, [r2, #0]
   2335c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2335e:	69bb      	ldr	r3, [r7, #24]
   23360:	2221      	movs	r2, #33	; 0x21
   23362:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   23364:	230c      	movs	r3, #12
   23366:	18fa      	adds	r2, r7, r3
   23368:	2300      	movs	r3, #0
   2336a:	9302      	str	r3, [sp, #8]
   2336c:	2300      	movs	r3, #0
   2336e:	9301      	str	r3, [sp, #4]
   23370:	2300      	movs	r3, #0
   23372:	9300      	str	r3, [sp, #0]
   23374:	2304      	movs	r3, #4
   23376:	2150      	movs	r1, #80	; 0x50
   23378:	2002      	movs	r0, #2
   2337a:	4c11      	ldr	r4, [pc, #68]	; (233c0 <socket+0x210>)
   2337c:	47a0      	blx	r4
			}
		}
	}
	return sock;
   2337e:	231f      	movs	r3, #31
   23380:	18fb      	adds	r3, r7, r3
   23382:	781b      	ldrb	r3, [r3, #0]
   23384:	b25b      	sxtb	r3, r3
}
   23386:	0018      	movs	r0, r3
   23388:	46bd      	mov	sp, r7
   2338a:	b009      	add	sp, #36	; 0x24
   2338c:	bd90      	pop	{r4, r7, pc}
   2338e:	46c0      	nop			; (mov r8, r8)
   23390:	20003d0d 	.word	0x20003d0d
   23394:	20005474 	.word	0x20005474
   23398:	000307c9 	.word	0x000307c9
   2339c:	200054e4 	.word	0x200054e4
   233a0:	20003d0e 	.word	0x20003d0e
   233a4:	80000003 	.word	0x80000003
   233a8:	0001e821 	.word	0x0001e821
   233ac:	20003d0a 	.word	0x20003d0a
   233b0:	0003684c 	.word	0x0003684c
   233b4:	0001baed 	.word	0x0001baed
   233b8:	00036870 	.word	0x00036870
   233bc:	0003686c 	.word	0x0003686c
   233c0:	0001ea81 	.word	0x0001ea81

000233c4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   233c4:	b5b0      	push	{r4, r5, r7, lr}
   233c6:	b08a      	sub	sp, #40	; 0x28
   233c8:	af04      	add	r7, sp, #16
   233ca:	6039      	str	r1, [r7, #0]
   233cc:	0011      	movs	r1, r2
   233ce:	1dfb      	adds	r3, r7, #7
   233d0:	1c02      	adds	r2, r0, #0
   233d2:	701a      	strb	r2, [r3, #0]
   233d4:	1dbb      	adds	r3, r7, #6
   233d6:	1c0a      	adds	r2, r1, #0
   233d8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   233da:	2317      	movs	r3, #23
   233dc:	18fb      	adds	r3, r7, r3
   233de:	22fa      	movs	r2, #250	; 0xfa
   233e0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   233e2:	1dfb      	adds	r3, r7, #7
   233e4:	781b      	ldrb	r3, [r3, #0]
   233e6:	2b7f      	cmp	r3, #127	; 0x7f
   233e8:	d867      	bhi.n	234ba <connect+0xf6>
   233ea:	683b      	ldr	r3, [r7, #0]
   233ec:	2b00      	cmp	r3, #0
   233ee:	d064      	beq.n	234ba <connect+0xf6>
   233f0:	1dfb      	adds	r3, r7, #7
   233f2:	781b      	ldrb	r3, [r3, #0]
   233f4:	b25b      	sxtb	r3, r3
   233f6:	4a35      	ldr	r2, [pc, #212]	; (234cc <connect+0x108>)
   233f8:	011b      	lsls	r3, r3, #4
   233fa:	18d3      	adds	r3, r2, r3
   233fc:	330a      	adds	r3, #10
   233fe:	781b      	ldrb	r3, [r3, #0]
   23400:	b2db      	uxtb	r3, r3
   23402:	2b01      	cmp	r3, #1
   23404:	d159      	bne.n	234ba <connect+0xf6>
   23406:	1dbb      	adds	r3, r7, #6
   23408:	781b      	ldrb	r3, [r3, #0]
   2340a:	2b00      	cmp	r3, #0
   2340c:	d055      	beq.n	234ba <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   2340e:	2316      	movs	r3, #22
   23410:	18fb      	adds	r3, r7, r3
   23412:	2244      	movs	r2, #68	; 0x44
   23414:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   23416:	1dfb      	adds	r3, r7, #7
   23418:	781b      	ldrb	r3, [r3, #0]
   2341a:	b25b      	sxtb	r3, r3
   2341c:	4a2b      	ldr	r2, [pc, #172]	; (234cc <connect+0x108>)
   2341e:	011b      	lsls	r3, r3, #4
   23420:	18d3      	adds	r3, r2, r3
   23422:	330b      	adds	r3, #11
   23424:	781b      	ldrb	r3, [r3, #0]
   23426:	b2db      	uxtb	r3, r3
   23428:	001a      	movs	r2, r3
   2342a:	2301      	movs	r3, #1
   2342c:	4013      	ands	r3, r2
   2342e:	d00f      	beq.n	23450 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   23430:	2316      	movs	r3, #22
   23432:	18fb      	adds	r3, r7, r3
   23434:	224b      	movs	r2, #75	; 0x4b
   23436:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   23438:	1dfb      	adds	r3, r7, #7
   2343a:	781b      	ldrb	r3, [r3, #0]
   2343c:	b25b      	sxtb	r3, r3
   2343e:	4a23      	ldr	r2, [pc, #140]	; (234cc <connect+0x108>)
   23440:	011b      	lsls	r3, r3, #4
   23442:	18d3      	adds	r3, r2, r3
   23444:	330b      	adds	r3, #11
   23446:	781b      	ldrb	r3, [r3, #0]
   23448:	b2da      	uxtb	r2, r3
   2344a:	2308      	movs	r3, #8
   2344c:	18fb      	adds	r3, r7, r3
   2344e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   23450:	2308      	movs	r3, #8
   23452:	18fb      	adds	r3, r7, r3
   23454:	1dfa      	adds	r2, r7, #7
   23456:	7812      	ldrb	r2, [r2, #0]
   23458:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2345a:	6839      	ldr	r1, [r7, #0]
   2345c:	2308      	movs	r3, #8
   2345e:	18fb      	adds	r3, r7, r3
   23460:	2208      	movs	r2, #8
   23462:	0018      	movs	r0, r3
   23464:	4b1a      	ldr	r3, [pc, #104]	; (234d0 <connect+0x10c>)
   23466:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   23468:	1dfb      	adds	r3, r7, #7
   2346a:	781b      	ldrb	r3, [r3, #0]
   2346c:	b25b      	sxtb	r3, r3
   2346e:	4a17      	ldr	r2, [pc, #92]	; (234cc <connect+0x108>)
   23470:	011b      	lsls	r3, r3, #4
   23472:	18d3      	adds	r3, r2, r3
   23474:	3306      	adds	r3, #6
   23476:	881b      	ldrh	r3, [r3, #0]
   23478:	b29a      	uxth	r2, r3
   2347a:	2308      	movs	r3, #8
   2347c:	18fb      	adds	r3, r7, r3
   2347e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   23480:	2317      	movs	r3, #23
   23482:	18fc      	adds	r4, r7, r3
   23484:	2308      	movs	r3, #8
   23486:	18fa      	adds	r2, r7, r3
   23488:	2316      	movs	r3, #22
   2348a:	18fb      	adds	r3, r7, r3
   2348c:	7819      	ldrb	r1, [r3, #0]
   2348e:	2300      	movs	r3, #0
   23490:	9302      	str	r3, [sp, #8]
   23492:	2300      	movs	r3, #0
   23494:	9301      	str	r3, [sp, #4]
   23496:	2300      	movs	r3, #0
   23498:	9300      	str	r3, [sp, #0]
   2349a:	230c      	movs	r3, #12
   2349c:	2002      	movs	r0, #2
   2349e:	4d0d      	ldr	r5, [pc, #52]	; (234d4 <connect+0x110>)
   234a0:	47a8      	blx	r5
   234a2:	0003      	movs	r3, r0
   234a4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   234a6:	2317      	movs	r3, #23
   234a8:	18fb      	adds	r3, r7, r3
   234aa:	781b      	ldrb	r3, [r3, #0]
   234ac:	b25b      	sxtb	r3, r3
   234ae:	2b00      	cmp	r3, #0
   234b0:	d003      	beq.n	234ba <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   234b2:	2317      	movs	r3, #23
   234b4:	18fb      	adds	r3, r7, r3
   234b6:	22f7      	movs	r2, #247	; 0xf7
   234b8:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   234ba:	2317      	movs	r3, #23
   234bc:	18fb      	adds	r3, r7, r3
   234be:	781b      	ldrb	r3, [r3, #0]
   234c0:	b25b      	sxtb	r3, r3
}
   234c2:	0018      	movs	r0, r3
   234c4:	46bd      	mov	sp, r7
   234c6:	b006      	add	sp, #24
   234c8:	bdb0      	pop	{r4, r5, r7, pc}
   234ca:	46c0      	nop			; (mov r8, r8)
   234cc:	20005474 	.word	0x20005474
   234d0:	0001e7e5 	.word	0x0001e7e5
   234d4:	0001ea81 	.word	0x0001ea81

000234d8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   234d8:	b590      	push	{r4, r7, lr}
   234da:	b08f      	sub	sp, #60	; 0x3c
   234dc:	af04      	add	r7, sp, #16
   234de:	0004      	movs	r4, r0
   234e0:	60b9      	str	r1, [r7, #8]
   234e2:	0010      	movs	r0, r2
   234e4:	0019      	movs	r1, r3
   234e6:	230f      	movs	r3, #15
   234e8:	18fb      	adds	r3, r7, r3
   234ea:	1c22      	adds	r2, r4, #0
   234ec:	701a      	strb	r2, [r3, #0]
   234ee:	230c      	movs	r3, #12
   234f0:	18fb      	adds	r3, r7, r3
   234f2:	1c02      	adds	r2, r0, #0
   234f4:	801a      	strh	r2, [r3, #0]
   234f6:	1dbb      	adds	r3, r7, #6
   234f8:	1c0a      	adds	r2, r1, #0
   234fa:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   234fc:	2326      	movs	r3, #38	; 0x26
   234fe:	18fb      	adds	r3, r7, r3
   23500:	2206      	movs	r2, #6
   23502:	4252      	negs	r2, r2
   23504:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   23506:	230f      	movs	r3, #15
   23508:	18fb      	adds	r3, r7, r3
   2350a:	781b      	ldrb	r3, [r3, #0]
   2350c:	2b7f      	cmp	r3, #127	; 0x7f
   2350e:	d900      	bls.n	23512 <send+0x3a>
   23510:	e087      	b.n	23622 <send+0x14a>
   23512:	68bb      	ldr	r3, [r7, #8]
   23514:	2b00      	cmp	r3, #0
   23516:	d100      	bne.n	2351a <send+0x42>
   23518:	e083      	b.n	23622 <send+0x14a>
   2351a:	230c      	movs	r3, #12
   2351c:	18fb      	adds	r3, r7, r3
   2351e:	881a      	ldrh	r2, [r3, #0]
   23520:	23af      	movs	r3, #175	; 0xaf
   23522:	00db      	lsls	r3, r3, #3
   23524:	429a      	cmp	r2, r3
   23526:	d900      	bls.n	2352a <send+0x52>
   23528:	e07b      	b.n	23622 <send+0x14a>
   2352a:	230f      	movs	r3, #15
   2352c:	18fb      	adds	r3, r7, r3
   2352e:	781b      	ldrb	r3, [r3, #0]
   23530:	b25b      	sxtb	r3, r3
   23532:	4a40      	ldr	r2, [pc, #256]	; (23634 <send+0x15c>)
   23534:	011b      	lsls	r3, r3, #4
   23536:	18d3      	adds	r3, r2, r3
   23538:	330a      	adds	r3, #10
   2353a:	781b      	ldrb	r3, [r3, #0]
   2353c:	b2db      	uxtb	r3, r3
   2353e:	2b01      	cmp	r3, #1
   23540:	d16f      	bne.n	23622 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   23542:	2323      	movs	r3, #35	; 0x23
   23544:	18fb      	adds	r3, r7, r3
   23546:	2245      	movs	r2, #69	; 0x45
   23548:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   2354a:	2324      	movs	r3, #36	; 0x24
   2354c:	18fb      	adds	r3, r7, r3
   2354e:	2250      	movs	r2, #80	; 0x50
   23550:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   23552:	2310      	movs	r3, #16
   23554:	18fb      	adds	r3, r7, r3
   23556:	220f      	movs	r2, #15
   23558:	18ba      	adds	r2, r7, r2
   2355a:	7812      	ldrb	r2, [r2, #0]
   2355c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   2355e:	2310      	movs	r3, #16
   23560:	18fb      	adds	r3, r7, r3
   23562:	220c      	movs	r2, #12
   23564:	18ba      	adds	r2, r7, r2
   23566:	8812      	ldrh	r2, [r2, #0]
   23568:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   2356a:	230f      	movs	r3, #15
   2356c:	18fb      	adds	r3, r7, r3
   2356e:	781b      	ldrb	r3, [r3, #0]
   23570:	b25b      	sxtb	r3, r3
   23572:	4a30      	ldr	r2, [pc, #192]	; (23634 <send+0x15c>)
   23574:	011b      	lsls	r3, r3, #4
   23576:	18d3      	adds	r3, r2, r3
   23578:	3306      	adds	r3, #6
   2357a:	881b      	ldrh	r3, [r3, #0]
   2357c:	b29a      	uxth	r2, r3
   2357e:	2310      	movs	r3, #16
   23580:	18fb      	adds	r3, r7, r3
   23582:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   23584:	230f      	movs	r3, #15
   23586:	18fb      	adds	r3, r7, r3
   23588:	781b      	ldrb	r3, [r3, #0]
   2358a:	b25b      	sxtb	r3, r3
   2358c:	2b06      	cmp	r3, #6
   2358e:	dd03      	ble.n	23598 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   23590:	2324      	movs	r3, #36	; 0x24
   23592:	18fb      	adds	r3, r7, r3
   23594:	2244      	movs	r2, #68	; 0x44
   23596:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   23598:	230f      	movs	r3, #15
   2359a:	18fb      	adds	r3, r7, r3
   2359c:	781b      	ldrb	r3, [r3, #0]
   2359e:	b25b      	sxtb	r3, r3
   235a0:	4a24      	ldr	r2, [pc, #144]	; (23634 <send+0x15c>)
   235a2:	011b      	lsls	r3, r3, #4
   235a4:	18d3      	adds	r3, r2, r3
   235a6:	330b      	adds	r3, #11
   235a8:	781b      	ldrb	r3, [r3, #0]
   235aa:	b2db      	uxtb	r3, r3
   235ac:	001a      	movs	r2, r3
   235ae:	2301      	movs	r3, #1
   235b0:	4013      	ands	r3, r2
   235b2:	d00f      	beq.n	235d4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   235b4:	2323      	movs	r3, #35	; 0x23
   235b6:	18fb      	adds	r3, r7, r3
   235b8:	224c      	movs	r2, #76	; 0x4c
   235ba:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   235bc:	230f      	movs	r3, #15
   235be:	18fb      	adds	r3, r7, r3
   235c0:	2200      	movs	r2, #0
   235c2:	569a      	ldrsb	r2, [r3, r2]
   235c4:	2324      	movs	r3, #36	; 0x24
   235c6:	18fb      	adds	r3, r7, r3
   235c8:	491a      	ldr	r1, [pc, #104]	; (23634 <send+0x15c>)
   235ca:	0112      	lsls	r2, r2, #4
   235cc:	188a      	adds	r2, r1, r2
   235ce:	3208      	adds	r2, #8
   235d0:	8812      	ldrh	r2, [r2, #0]
   235d2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   235d4:	2323      	movs	r3, #35	; 0x23
   235d6:	18fb      	adds	r3, r7, r3
   235d8:	781b      	ldrb	r3, [r3, #0]
   235da:	2280      	movs	r2, #128	; 0x80
   235dc:	4252      	negs	r2, r2
   235de:	4313      	orrs	r3, r2
   235e0:	b2d9      	uxtb	r1, r3
   235e2:	2310      	movs	r3, #16
   235e4:	18fa      	adds	r2, r7, r3
   235e6:	2324      	movs	r3, #36	; 0x24
   235e8:	18fb      	adds	r3, r7, r3
   235ea:	881b      	ldrh	r3, [r3, #0]
   235ec:	9302      	str	r3, [sp, #8]
   235ee:	230c      	movs	r3, #12
   235f0:	18fb      	adds	r3, r7, r3
   235f2:	881b      	ldrh	r3, [r3, #0]
   235f4:	9301      	str	r3, [sp, #4]
   235f6:	68bb      	ldr	r3, [r7, #8]
   235f8:	9300      	str	r3, [sp, #0]
   235fa:	2310      	movs	r3, #16
   235fc:	2002      	movs	r0, #2
   235fe:	4c0e      	ldr	r4, [pc, #56]	; (23638 <send+0x160>)
   23600:	47a0      	blx	r4
   23602:	0003      	movs	r3, r0
   23604:	001a      	movs	r2, r3
   23606:	2326      	movs	r3, #38	; 0x26
   23608:	18fb      	adds	r3, r7, r3
   2360a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   2360c:	2326      	movs	r3, #38	; 0x26
   2360e:	18fb      	adds	r3, r7, r3
   23610:	2200      	movs	r2, #0
   23612:	5e9b      	ldrsh	r3, [r3, r2]
   23614:	2b00      	cmp	r3, #0
   23616:	d004      	beq.n	23622 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   23618:	2326      	movs	r3, #38	; 0x26
   2361a:	18fb      	adds	r3, r7, r3
   2361c:	220e      	movs	r2, #14
   2361e:	4252      	negs	r2, r2
   23620:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   23622:	2326      	movs	r3, #38	; 0x26
   23624:	18fb      	adds	r3, r7, r3
   23626:	2200      	movs	r2, #0
   23628:	5e9b      	ldrsh	r3, [r3, r2]
}
   2362a:	0018      	movs	r0, r3
   2362c:	46bd      	mov	sp, r7
   2362e:	b00b      	add	sp, #44	; 0x2c
   23630:	bd90      	pop	{r4, r7, pc}
   23632:	46c0      	nop			; (mov r8, r8)
   23634:	20005474 	.word	0x20005474
   23638:	0001ea81 	.word	0x0001ea81

0002363c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   2363c:	b590      	push	{r4, r7, lr}
   2363e:	b08d      	sub	sp, #52	; 0x34
   23640:	af04      	add	r7, sp, #16
   23642:	60b9      	str	r1, [r7, #8]
   23644:	0011      	movs	r1, r2
   23646:	607b      	str	r3, [r7, #4]
   23648:	230f      	movs	r3, #15
   2364a:	18fb      	adds	r3, r7, r3
   2364c:	1c02      	adds	r2, r0, #0
   2364e:	701a      	strb	r2, [r3, #0]
   23650:	230c      	movs	r3, #12
   23652:	18fb      	adds	r3, r7, r3
   23654:	1c0a      	adds	r2, r1, #0
   23656:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   23658:	231e      	movs	r3, #30
   2365a:	18fb      	adds	r3, r7, r3
   2365c:	2206      	movs	r2, #6
   2365e:	4252      	negs	r2, r2
   23660:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   23662:	230f      	movs	r3, #15
   23664:	18fb      	adds	r3, r7, r3
   23666:	781b      	ldrb	r3, [r3, #0]
   23668:	2b7f      	cmp	r3, #127	; 0x7f
   2366a:	d900      	bls.n	2366e <recv+0x32>
   2366c:	e099      	b.n	237a2 <recv+0x166>
   2366e:	68bb      	ldr	r3, [r7, #8]
   23670:	2b00      	cmp	r3, #0
   23672:	d100      	bne.n	23676 <recv+0x3a>
   23674:	e095      	b.n	237a2 <recv+0x166>
   23676:	230c      	movs	r3, #12
   23678:	18fb      	adds	r3, r7, r3
   2367a:	881b      	ldrh	r3, [r3, #0]
   2367c:	2b00      	cmp	r3, #0
   2367e:	d100      	bne.n	23682 <recv+0x46>
   23680:	e08f      	b.n	237a2 <recv+0x166>
   23682:	230f      	movs	r3, #15
   23684:	18fb      	adds	r3, r7, r3
   23686:	781b      	ldrb	r3, [r3, #0]
   23688:	b25b      	sxtb	r3, r3
   2368a:	4a4a      	ldr	r2, [pc, #296]	; (237b4 <recv+0x178>)
   2368c:	011b      	lsls	r3, r3, #4
   2368e:	18d3      	adds	r3, r2, r3
   23690:	330a      	adds	r3, #10
   23692:	781b      	ldrb	r3, [r3, #0]
   23694:	b2db      	uxtb	r3, r3
   23696:	2b01      	cmp	r3, #1
   23698:	d000      	beq.n	2369c <recv+0x60>
   2369a:	e082      	b.n	237a2 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   2369c:	231e      	movs	r3, #30
   2369e:	18fb      	adds	r3, r7, r3
   236a0:	2200      	movs	r2, #0
   236a2:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   236a4:	230f      	movs	r3, #15
   236a6:	18fb      	adds	r3, r7, r3
   236a8:	2200      	movs	r2, #0
   236aa:	569a      	ldrsb	r2, [r3, r2]
   236ac:	4b41      	ldr	r3, [pc, #260]	; (237b4 <recv+0x178>)
   236ae:	0112      	lsls	r2, r2, #4
   236b0:	68b9      	ldr	r1, [r7, #8]
   236b2:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   236b4:	230f      	movs	r3, #15
   236b6:	18fb      	adds	r3, r7, r3
   236b8:	781b      	ldrb	r3, [r3, #0]
   236ba:	b25b      	sxtb	r3, r3
   236bc:	4a3d      	ldr	r2, [pc, #244]	; (237b4 <recv+0x178>)
   236be:	011b      	lsls	r3, r3, #4
   236c0:	18d3      	adds	r3, r2, r3
   236c2:	3304      	adds	r3, #4
   236c4:	220c      	movs	r2, #12
   236c6:	18ba      	adds	r2, r7, r2
   236c8:	8812      	ldrh	r2, [r2, #0]
   236ca:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   236cc:	230f      	movs	r3, #15
   236ce:	18fb      	adds	r3, r7, r3
   236d0:	781b      	ldrb	r3, [r3, #0]
   236d2:	b25b      	sxtb	r3, r3
   236d4:	4a37      	ldr	r2, [pc, #220]	; (237b4 <recv+0x178>)
   236d6:	011b      	lsls	r3, r3, #4
   236d8:	18d3      	adds	r3, r2, r3
   236da:	330c      	adds	r3, #12
   236dc:	781b      	ldrb	r3, [r3, #0]
   236de:	b2db      	uxtb	r3, r3
   236e0:	2b00      	cmp	r3, #0
   236e2:	d15e      	bne.n	237a2 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   236e4:	231d      	movs	r3, #29
   236e6:	18fb      	adds	r3, r7, r3
   236e8:	2246      	movs	r2, #70	; 0x46
   236ea:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   236ec:	230f      	movs	r3, #15
   236ee:	18fb      	adds	r3, r7, r3
   236f0:	781b      	ldrb	r3, [r3, #0]
   236f2:	b25b      	sxtb	r3, r3
   236f4:	4a2f      	ldr	r2, [pc, #188]	; (237b4 <recv+0x178>)
   236f6:	011b      	lsls	r3, r3, #4
   236f8:	18d3      	adds	r3, r2, r3
   236fa:	330c      	adds	r3, #12
   236fc:	2201      	movs	r2, #1
   236fe:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   23700:	230f      	movs	r3, #15
   23702:	18fb      	adds	r3, r7, r3
   23704:	781b      	ldrb	r3, [r3, #0]
   23706:	b25b      	sxtb	r3, r3
   23708:	4a2a      	ldr	r2, [pc, #168]	; (237b4 <recv+0x178>)
   2370a:	011b      	lsls	r3, r3, #4
   2370c:	18d3      	adds	r3, r2, r3
   2370e:	330b      	adds	r3, #11
   23710:	781b      	ldrb	r3, [r3, #0]
   23712:	b2db      	uxtb	r3, r3
   23714:	001a      	movs	r2, r3
   23716:	2301      	movs	r3, #1
   23718:	4013      	ands	r3, r2
   2371a:	d003      	beq.n	23724 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   2371c:	231d      	movs	r3, #29
   2371e:	18fb      	adds	r3, r7, r3
   23720:	224d      	movs	r2, #77	; 0x4d
   23722:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   23724:	687b      	ldr	r3, [r7, #4]
   23726:	2b00      	cmp	r3, #0
   23728:	d105      	bne.n	23736 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2372a:	2314      	movs	r3, #20
   2372c:	18fb      	adds	r3, r7, r3
   2372e:	2201      	movs	r2, #1
   23730:	4252      	negs	r2, r2
   23732:	601a      	str	r2, [r3, #0]
   23734:	e003      	b.n	2373e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   23736:	2314      	movs	r3, #20
   23738:	18fb      	adds	r3, r7, r3
   2373a:	687a      	ldr	r2, [r7, #4]
   2373c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   2373e:	2314      	movs	r3, #20
   23740:	18fb      	adds	r3, r7, r3
   23742:	220f      	movs	r2, #15
   23744:	18ba      	adds	r2, r7, r2
   23746:	7812      	ldrb	r2, [r2, #0]
   23748:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   2374a:	230f      	movs	r3, #15
   2374c:	18fb      	adds	r3, r7, r3
   2374e:	781b      	ldrb	r3, [r3, #0]
   23750:	b25b      	sxtb	r3, r3
   23752:	4a18      	ldr	r2, [pc, #96]	; (237b4 <recv+0x178>)
   23754:	011b      	lsls	r3, r3, #4
   23756:	18d3      	adds	r3, r2, r3
   23758:	3306      	adds	r3, #6
   2375a:	881b      	ldrh	r3, [r3, #0]
   2375c:	b29a      	uxth	r2, r3
   2375e:	2314      	movs	r3, #20
   23760:	18fb      	adds	r3, r7, r3
   23762:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   23764:	2314      	movs	r3, #20
   23766:	18fa      	adds	r2, r7, r3
   23768:	231d      	movs	r3, #29
   2376a:	18fb      	adds	r3, r7, r3
   2376c:	7819      	ldrb	r1, [r3, #0]
   2376e:	2300      	movs	r3, #0
   23770:	9302      	str	r3, [sp, #8]
   23772:	2300      	movs	r3, #0
   23774:	9301      	str	r3, [sp, #4]
   23776:	2300      	movs	r3, #0
   23778:	9300      	str	r3, [sp, #0]
   2377a:	2308      	movs	r3, #8
   2377c:	2002      	movs	r0, #2
   2377e:	4c0e      	ldr	r4, [pc, #56]	; (237b8 <recv+0x17c>)
   23780:	47a0      	blx	r4
   23782:	0003      	movs	r3, r0
   23784:	001a      	movs	r2, r3
   23786:	231e      	movs	r3, #30
   23788:	18fb      	adds	r3, r7, r3
   2378a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   2378c:	231e      	movs	r3, #30
   2378e:	18fb      	adds	r3, r7, r3
   23790:	2200      	movs	r2, #0
   23792:	5e9b      	ldrsh	r3, [r3, r2]
   23794:	2b00      	cmp	r3, #0
   23796:	d004      	beq.n	237a2 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   23798:	231e      	movs	r3, #30
   2379a:	18fb      	adds	r3, r7, r3
   2379c:	220e      	movs	r2, #14
   2379e:	4252      	negs	r2, r2
   237a0:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   237a2:	231e      	movs	r3, #30
   237a4:	18fb      	adds	r3, r7, r3
   237a6:	2200      	movs	r2, #0
   237a8:	5e9b      	ldrsh	r3, [r3, r2]
}
   237aa:	0018      	movs	r0, r3
   237ac:	46bd      	mov	sp, r7
   237ae:	b009      	add	sp, #36	; 0x24
   237b0:	bd90      	pop	{r4, r7, pc}
   237b2:	46c0      	nop			; (mov r8, r8)
   237b4:	20005474 	.word	0x20005474
   237b8:	0001ea81 	.word	0x0001ea81

000237bc <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   237bc:	b5b0      	push	{r4, r5, r7, lr}
   237be:	b088      	sub	sp, #32
   237c0:	af04      	add	r7, sp, #16
   237c2:	0002      	movs	r2, r0
   237c4:	1dfb      	adds	r3, r7, #7
   237c6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   237c8:	230f      	movs	r3, #15
   237ca:	18fb      	adds	r3, r7, r3
   237cc:	22fa      	movs	r2, #250	; 0xfa
   237ce:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   237d0:	4b43      	ldr	r3, [pc, #268]	; (238e0 <close+0x124>)
   237d2:	0018      	movs	r0, r3
   237d4:	4b43      	ldr	r3, [pc, #268]	; (238e4 <close+0x128>)
   237d6:	4798      	blx	r3
   237d8:	1dfb      	adds	r3, r7, #7
   237da:	2200      	movs	r2, #0
   237dc:	569a      	ldrsb	r2, [r3, r2]
   237de:	4b42      	ldr	r3, [pc, #264]	; (238e8 <close+0x12c>)
   237e0:	0011      	movs	r1, r2
   237e2:	0018      	movs	r0, r3
   237e4:	4b3f      	ldr	r3, [pc, #252]	; (238e4 <close+0x128>)
   237e6:	4798      	blx	r3
   237e8:	4b40      	ldr	r3, [pc, #256]	; (238ec <close+0x130>)
   237ea:	0018      	movs	r0, r3
   237ec:	4b3d      	ldr	r3, [pc, #244]	; (238e4 <close+0x128>)
   237ee:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   237f0:	1dfb      	adds	r3, r7, #7
   237f2:	781b      	ldrb	r3, [r3, #0]
   237f4:	2b7f      	cmp	r3, #127	; 0x7f
   237f6:	d86a      	bhi.n	238ce <close+0x112>
   237f8:	1dfb      	adds	r3, r7, #7
   237fa:	781b      	ldrb	r3, [r3, #0]
   237fc:	b25b      	sxtb	r3, r3
   237fe:	4a3c      	ldr	r2, [pc, #240]	; (238f0 <close+0x134>)
   23800:	011b      	lsls	r3, r3, #4
   23802:	18d3      	adds	r3, r2, r3
   23804:	330a      	adds	r3, #10
   23806:	781b      	ldrb	r3, [r3, #0]
   23808:	b2db      	uxtb	r3, r3
   2380a:	2b01      	cmp	r3, #1
   2380c:	d15f      	bne.n	238ce <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   2380e:	230e      	movs	r3, #14
   23810:	18fb      	adds	r3, r7, r3
   23812:	2249      	movs	r2, #73	; 0x49
   23814:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   23816:	2308      	movs	r3, #8
   23818:	18fb      	adds	r3, r7, r3
   2381a:	1dfa      	adds	r2, r7, #7
   2381c:	7812      	ldrb	r2, [r2, #0]
   2381e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   23820:	1dfb      	adds	r3, r7, #7
   23822:	781b      	ldrb	r3, [r3, #0]
   23824:	b25b      	sxtb	r3, r3
   23826:	4a32      	ldr	r2, [pc, #200]	; (238f0 <close+0x134>)
   23828:	011b      	lsls	r3, r3, #4
   2382a:	18d3      	adds	r3, r2, r3
   2382c:	3306      	adds	r3, #6
   2382e:	881b      	ldrh	r3, [r3, #0]
   23830:	b29a      	uxth	r2, r3
   23832:	2308      	movs	r3, #8
   23834:	18fb      	adds	r3, r7, r3
   23836:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   23838:	1dfb      	adds	r3, r7, #7
   2383a:	781b      	ldrb	r3, [r3, #0]
   2383c:	b25b      	sxtb	r3, r3
   2383e:	4a2c      	ldr	r2, [pc, #176]	; (238f0 <close+0x134>)
   23840:	011b      	lsls	r3, r3, #4
   23842:	18d3      	adds	r3, r2, r3
   23844:	330a      	adds	r3, #10
   23846:	2200      	movs	r2, #0
   23848:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   2384a:	1dfb      	adds	r3, r7, #7
   2384c:	781b      	ldrb	r3, [r3, #0]
   2384e:	b25b      	sxtb	r3, r3
   23850:	4a27      	ldr	r2, [pc, #156]	; (238f0 <close+0x134>)
   23852:	011b      	lsls	r3, r3, #4
   23854:	18d3      	adds	r3, r2, r3
   23856:	3306      	adds	r3, #6
   23858:	2200      	movs	r2, #0
   2385a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2385c:	1dfb      	adds	r3, r7, #7
   2385e:	781b      	ldrb	r3, [r3, #0]
   23860:	b25b      	sxtb	r3, r3
   23862:	4a23      	ldr	r2, [pc, #140]	; (238f0 <close+0x134>)
   23864:	011b      	lsls	r3, r3, #4
   23866:	18d3      	adds	r3, r2, r3
   23868:	330b      	adds	r3, #11
   2386a:	781b      	ldrb	r3, [r3, #0]
   2386c:	b2db      	uxtb	r3, r3
   2386e:	001a      	movs	r2, r3
   23870:	2301      	movs	r3, #1
   23872:	4013      	ands	r3, r2
   23874:	d003      	beq.n	2387e <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   23876:	230e      	movs	r3, #14
   23878:	18fb      	adds	r3, r7, r3
   2387a:	224e      	movs	r2, #78	; 0x4e
   2387c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   2387e:	230f      	movs	r3, #15
   23880:	18fc      	adds	r4, r7, r3
   23882:	2308      	movs	r3, #8
   23884:	18fa      	adds	r2, r7, r3
   23886:	230e      	movs	r3, #14
   23888:	18fb      	adds	r3, r7, r3
   2388a:	7819      	ldrb	r1, [r3, #0]
   2388c:	2300      	movs	r3, #0
   2388e:	9302      	str	r3, [sp, #8]
   23890:	2300      	movs	r3, #0
   23892:	9301      	str	r3, [sp, #4]
   23894:	2300      	movs	r3, #0
   23896:	9300      	str	r3, [sp, #0]
   23898:	2304      	movs	r3, #4
   2389a:	2002      	movs	r0, #2
   2389c:	4d15      	ldr	r5, [pc, #84]	; (238f4 <close+0x138>)
   2389e:	47a8      	blx	r5
   238a0:	0003      	movs	r3, r0
   238a2:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   238a4:	230f      	movs	r3, #15
   238a6:	18fb      	adds	r3, r7, r3
   238a8:	781b      	ldrb	r3, [r3, #0]
   238aa:	b25b      	sxtb	r3, r3
   238ac:	2b00      	cmp	r3, #0
   238ae:	d003      	beq.n	238b8 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   238b0:	230f      	movs	r3, #15
   238b2:	18fb      	adds	r3, r7, r3
   238b4:	22f7      	movs	r2, #247	; 0xf7
   238b6:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   238b8:	1dfb      	adds	r3, r7, #7
   238ba:	781b      	ldrb	r3, [r3, #0]
   238bc:	b25b      	sxtb	r3, r3
   238be:	011a      	lsls	r2, r3, #4
   238c0:	4b0b      	ldr	r3, [pc, #44]	; (238f0 <close+0x134>)
   238c2:	18d3      	adds	r3, r2, r3
   238c4:	2210      	movs	r2, #16
   238c6:	2100      	movs	r1, #0
   238c8:	0018      	movs	r0, r3
   238ca:	4b0b      	ldr	r3, [pc, #44]	; (238f8 <close+0x13c>)
   238cc:	4798      	blx	r3
	}
	return s8Ret;
   238ce:	230f      	movs	r3, #15
   238d0:	18fb      	adds	r3, r7, r3
   238d2:	781b      	ldrb	r3, [r3, #0]
   238d4:	b25b      	sxtb	r3, r3
}
   238d6:	0018      	movs	r0, r3
   238d8:	46bd      	mov	sp, r7
   238da:	b004      	add	sp, #16
   238dc:	bdb0      	pop	{r4, r5, r7, pc}
   238de:	46c0      	nop			; (mov r8, r8)
   238e0:	0003684c 	.word	0x0003684c
   238e4:	0001baed 	.word	0x0001baed
   238e8:	0003688c 	.word	0x0003688c
   238ec:	0003686c 	.word	0x0003686c
   238f0:	20005474 	.word	0x20005474
   238f4:	0001ea81 	.word	0x0001ea81
   238f8:	0001e821 	.word	0x0001e821

000238fc <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   238fc:	b580      	push	{r7, lr}
   238fe:	b086      	sub	sp, #24
   23900:	af00      	add	r7, sp, #0
   23902:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   23904:	2300      	movs	r3, #0
   23906:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   23908:	2317      	movs	r3, #23
   2390a:	18fb      	adds	r3, r7, r3
   2390c:	2200      	movs	r2, #0
   2390e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   23910:	2316      	movs	r3, #22
   23912:	18fb      	adds	r3, r7, r3
   23914:	2200      	movs	r2, #0
   23916:	701a      	strb	r2, [r3, #0]
   23918:	e060      	b.n	239dc <nmi_inet_addr+0xe0>
	{
		j = 0;
   2391a:	2315      	movs	r3, #21
   2391c:	18fb      	adds	r3, r7, r3
   2391e:	2200      	movs	r2, #0
   23920:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   23922:	2314      	movs	r3, #20
   23924:	18fb      	adds	r3, r7, r3
   23926:	687a      	ldr	r2, [r7, #4]
   23928:	7812      	ldrb	r2, [r2, #0]
   2392a:	701a      	strb	r2, [r3, #0]
			++j;
   2392c:	2315      	movs	r3, #21
   2392e:	18fb      	adds	r3, r7, r3
   23930:	2215      	movs	r2, #21
   23932:	18ba      	adds	r2, r7, r2
   23934:	7812      	ldrb	r2, [r2, #0]
   23936:	3201      	adds	r2, #1
   23938:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   2393a:	2315      	movs	r3, #21
   2393c:	18fb      	adds	r3, r7, r3
   2393e:	781b      	ldrb	r3, [r3, #0]
   23940:	2b04      	cmp	r3, #4
   23942:	d901      	bls.n	23948 <nmi_inet_addr+0x4c>
			{
				return 0;
   23944:	2300      	movs	r3, #0
   23946:	e057      	b.n	239f8 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   23948:	2314      	movs	r3, #20
   2394a:	18fb      	adds	r3, r7, r3
   2394c:	781b      	ldrb	r3, [r3, #0]
   2394e:	2b2e      	cmp	r3, #46	; 0x2e
   23950:	d004      	beq.n	2395c <nmi_inet_addr+0x60>
   23952:	2314      	movs	r3, #20
   23954:	18fb      	adds	r3, r7, r3
   23956:	781b      	ldrb	r3, [r3, #0]
   23958:	2b00      	cmp	r3, #0
   2395a:	d10d      	bne.n	23978 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   2395c:	2316      	movs	r3, #22
   2395e:	18fb      	adds	r3, r7, r3
   23960:	781b      	ldrb	r3, [r3, #0]
   23962:	220c      	movs	r2, #12
   23964:	18ba      	adds	r2, r7, r2
   23966:	2117      	movs	r1, #23
   23968:	1879      	adds	r1, r7, r1
   2396a:	7809      	ldrb	r1, [r1, #0]
   2396c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   2396e:	2317      	movs	r3, #23
   23970:	18fb      	adds	r3, r7, r3
   23972:	2200      	movs	r2, #0
   23974:	701a      	strb	r2, [r3, #0]
   23976:	e01d      	b.n	239b4 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   23978:	2314      	movs	r3, #20
   2397a:	18fb      	adds	r3, r7, r3
   2397c:	781b      	ldrb	r3, [r3, #0]
   2397e:	2b2f      	cmp	r3, #47	; 0x2f
   23980:	d916      	bls.n	239b0 <nmi_inet_addr+0xb4>
   23982:	2314      	movs	r3, #20
   23984:	18fb      	adds	r3, r7, r3
   23986:	781b      	ldrb	r3, [r3, #0]
   23988:	2b39      	cmp	r3, #57	; 0x39
   2398a:	d811      	bhi.n	239b0 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   2398c:	2317      	movs	r3, #23
   2398e:	18fb      	adds	r3, r7, r3
   23990:	781b      	ldrb	r3, [r3, #0]
   23992:	1c1a      	adds	r2, r3, #0
   23994:	0092      	lsls	r2, r2, #2
   23996:	18d3      	adds	r3, r2, r3
   23998:	18db      	adds	r3, r3, r3
   2399a:	b2da      	uxtb	r2, r3
   2399c:	2314      	movs	r3, #20
   2399e:	18fb      	adds	r3, r7, r3
   239a0:	781b      	ldrb	r3, [r3, #0]
   239a2:	18d3      	adds	r3, r2, r3
   239a4:	b2da      	uxtb	r2, r3
   239a6:	2317      	movs	r3, #23
   239a8:	18fb      	adds	r3, r7, r3
   239aa:	3a30      	subs	r2, #48	; 0x30
   239ac:	701a      	strb	r2, [r3, #0]
   239ae:	e001      	b.n	239b4 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   239b0:	2300      	movs	r3, #0
   239b2:	e021      	b.n	239f8 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   239b4:	687b      	ldr	r3, [r7, #4]
   239b6:	3301      	adds	r3, #1
   239b8:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   239ba:	2314      	movs	r3, #20
   239bc:	18fb      	adds	r3, r7, r3
   239be:	781b      	ldrb	r3, [r3, #0]
   239c0:	2b2e      	cmp	r3, #46	; 0x2e
   239c2:	d004      	beq.n	239ce <nmi_inet_addr+0xd2>
   239c4:	2314      	movs	r3, #20
   239c6:	18fb      	adds	r3, r7, r3
   239c8:	781b      	ldrb	r3, [r3, #0]
   239ca:	2b00      	cmp	r3, #0
   239cc:	d1a9      	bne.n	23922 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   239ce:	2316      	movs	r3, #22
   239d0:	18fb      	adds	r3, r7, r3
   239d2:	2216      	movs	r2, #22
   239d4:	18ba      	adds	r2, r7, r2
   239d6:	7812      	ldrb	r2, [r2, #0]
   239d8:	3201      	adds	r2, #1
   239da:	701a      	strb	r2, [r3, #0]
   239dc:	2316      	movs	r3, #22
   239de:	18fb      	adds	r3, r7, r3
   239e0:	781b      	ldrb	r3, [r3, #0]
   239e2:	2b03      	cmp	r3, #3
   239e4:	d999      	bls.n	2391a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   239e6:	230c      	movs	r3, #12
   239e8:	18f9      	adds	r1, r7, r3
   239ea:	2310      	movs	r3, #16
   239ec:	18fb      	adds	r3, r7, r3
   239ee:	2204      	movs	r2, #4
   239f0:	0018      	movs	r0, r3
   239f2:	4b03      	ldr	r3, [pc, #12]	; (23a00 <nmi_inet_addr+0x104>)
   239f4:	4798      	blx	r3
	return u32IP;
   239f6:	693b      	ldr	r3, [r7, #16]
}
   239f8:	0018      	movs	r0, r3
   239fa:	46bd      	mov	sp, r7
   239fc:	b006      	add	sp, #24
   239fe:	bd80      	pop	{r7, pc}
   23a00:	0001e7e5 	.word	0x0001e7e5

00023a04 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   23a04:	b5b0      	push	{r4, r5, r7, lr}
   23a06:	b088      	sub	sp, #32
   23a08:	af04      	add	r7, sp, #16
   23a0a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   23a0c:	230f      	movs	r3, #15
   23a0e:	18fb      	adds	r3, r7, r3
   23a10:	22fa      	movs	r2, #250	; 0xfa
   23a12:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   23a14:	687b      	ldr	r3, [r7, #4]
   23a16:	0018      	movs	r0, r3
   23a18:	4b14      	ldr	r3, [pc, #80]	; (23a6c <gethostbyname+0x68>)
   23a1a:	4798      	blx	r3
   23a1c:	0003      	movs	r3, r0
   23a1e:	001a      	movs	r2, r3
   23a20:	230e      	movs	r3, #14
   23a22:	18fb      	adds	r3, r7, r3
   23a24:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   23a26:	230e      	movs	r3, #14
   23a28:	18fb      	adds	r3, r7, r3
   23a2a:	781b      	ldrb	r3, [r3, #0]
   23a2c:	2b40      	cmp	r3, #64	; 0x40
   23a2e:	d815      	bhi.n	23a5c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   23a30:	230e      	movs	r3, #14
   23a32:	18fb      	adds	r3, r7, r3
   23a34:	781b      	ldrb	r3, [r3, #0]
   23a36:	b29b      	uxth	r3, r3
   23a38:	3301      	adds	r3, #1
   23a3a:	b299      	uxth	r1, r3
   23a3c:	230f      	movs	r3, #15
   23a3e:	18fc      	adds	r4, r7, r3
   23a40:	687a      	ldr	r2, [r7, #4]
   23a42:	2300      	movs	r3, #0
   23a44:	9302      	str	r3, [sp, #8]
   23a46:	2300      	movs	r3, #0
   23a48:	9301      	str	r3, [sp, #4]
   23a4a:	2300      	movs	r3, #0
   23a4c:	9300      	str	r3, [sp, #0]
   23a4e:	000b      	movs	r3, r1
   23a50:	214a      	movs	r1, #74	; 0x4a
   23a52:	2002      	movs	r0, #2
   23a54:	4d06      	ldr	r5, [pc, #24]	; (23a70 <gethostbyname+0x6c>)
   23a56:	47a8      	blx	r5
   23a58:	0003      	movs	r3, r0
   23a5a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   23a5c:	230f      	movs	r3, #15
   23a5e:	18fb      	adds	r3, r7, r3
   23a60:	781b      	ldrb	r3, [r3, #0]
   23a62:	b25b      	sxtb	r3, r3
}
   23a64:	0018      	movs	r0, r3
   23a66:	46bd      	mov	sp, r7
   23a68:	b004      	add	sp, #16
   23a6a:	bdb0      	pop	{r4, r5, r7, pc}
   23a6c:	0001e85f 	.word	0x0001e85f
   23a70:	0001ea81 	.word	0x0001ea81

00023a74 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   23a74:	b580      	push	{r7, lr}
   23a76:	b082      	sub	sp, #8
   23a78:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   23a7a:	003b      	movs	r3, r7
   23a7c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   23a7e:	687b      	ldr	r3, [r7, #4]
   23a80:	22b9      	movs	r2, #185	; 0xb9
   23a82:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   23a84:	4b13      	ldr	r3, [pc, #76]	; (23ad4 <spi_flash_enter_low_power_mode+0x60>)
   23a86:	2100      	movs	r1, #0
   23a88:	0018      	movs	r0, r3
   23a8a:	4b13      	ldr	r3, [pc, #76]	; (23ad8 <spi_flash_enter_low_power_mode+0x64>)
   23a8c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   23a8e:	687b      	ldr	r3, [r7, #4]
   23a90:	781b      	ldrb	r3, [r3, #0]
   23a92:	001a      	movs	r2, r3
   23a94:	4b11      	ldr	r3, [pc, #68]	; (23adc <spi_flash_enter_low_power_mode+0x68>)
   23a96:	0011      	movs	r1, r2
   23a98:	0018      	movs	r0, r3
   23a9a:	4b0f      	ldr	r3, [pc, #60]	; (23ad8 <spi_flash_enter_low_power_mode+0x64>)
   23a9c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   23a9e:	4b10      	ldr	r3, [pc, #64]	; (23ae0 <spi_flash_enter_low_power_mode+0x6c>)
   23aa0:	2101      	movs	r1, #1
   23aa2:	0018      	movs	r0, r3
   23aa4:	4b0c      	ldr	r3, [pc, #48]	; (23ad8 <spi_flash_enter_low_power_mode+0x64>)
   23aa6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   23aa8:	4b0e      	ldr	r3, [pc, #56]	; (23ae4 <spi_flash_enter_low_power_mode+0x70>)
   23aaa:	2100      	movs	r1, #0
   23aac:	0018      	movs	r0, r3
   23aae:	4b0a      	ldr	r3, [pc, #40]	; (23ad8 <spi_flash_enter_low_power_mode+0x64>)
   23ab0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   23ab2:	4b0d      	ldr	r3, [pc, #52]	; (23ae8 <spi_flash_enter_low_power_mode+0x74>)
   23ab4:	2181      	movs	r1, #129	; 0x81
   23ab6:	0018      	movs	r0, r3
   23ab8:	4b07      	ldr	r3, [pc, #28]	; (23ad8 <spi_flash_enter_low_power_mode+0x64>)
   23aba:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   23abc:	46c0      	nop			; (mov r8, r8)
   23abe:	4b0b      	ldr	r3, [pc, #44]	; (23aec <spi_flash_enter_low_power_mode+0x78>)
   23ac0:	0018      	movs	r0, r3
   23ac2:	4b0b      	ldr	r3, [pc, #44]	; (23af0 <spi_flash_enter_low_power_mode+0x7c>)
   23ac4:	4798      	blx	r3
   23ac6:	0003      	movs	r3, r0
   23ac8:	2b01      	cmp	r3, #1
   23aca:	d1f8      	bne.n	23abe <spi_flash_enter_low_power_mode+0x4a>
}
   23acc:	46c0      	nop			; (mov r8, r8)
   23ace:	46bd      	mov	sp, r7
   23ad0:	b002      	add	sp, #8
   23ad2:	bd80      	pop	{r7, pc}
   23ad4:	00010208 	.word	0x00010208
   23ad8:	000208d5 	.word	0x000208d5
   23adc:	0001020c 	.word	0x0001020c
   23ae0:	00010214 	.word	0x00010214
   23ae4:	0001021c 	.word	0x0001021c
   23ae8:	00010204 	.word	0x00010204
   23aec:	00010218 	.word	0x00010218
   23af0:	00020891 	.word	0x00020891

00023af4 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   23af4:	b580      	push	{r7, lr}
   23af6:	b082      	sub	sp, #8
   23af8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   23afa:	003b      	movs	r3, r7
   23afc:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   23afe:	687b      	ldr	r3, [r7, #4]
   23b00:	22ab      	movs	r2, #171	; 0xab
   23b02:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   23b04:	4b13      	ldr	r3, [pc, #76]	; (23b54 <spi_flash_leave_low_power_mode+0x60>)
   23b06:	2100      	movs	r1, #0
   23b08:	0018      	movs	r0, r3
   23b0a:	4b13      	ldr	r3, [pc, #76]	; (23b58 <spi_flash_leave_low_power_mode+0x64>)
   23b0c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   23b0e:	687b      	ldr	r3, [r7, #4]
   23b10:	781b      	ldrb	r3, [r3, #0]
   23b12:	001a      	movs	r2, r3
   23b14:	4b11      	ldr	r3, [pc, #68]	; (23b5c <spi_flash_leave_low_power_mode+0x68>)
   23b16:	0011      	movs	r1, r2
   23b18:	0018      	movs	r0, r3
   23b1a:	4b0f      	ldr	r3, [pc, #60]	; (23b58 <spi_flash_leave_low_power_mode+0x64>)
   23b1c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   23b1e:	4b10      	ldr	r3, [pc, #64]	; (23b60 <spi_flash_leave_low_power_mode+0x6c>)
   23b20:	2101      	movs	r1, #1
   23b22:	0018      	movs	r0, r3
   23b24:	4b0c      	ldr	r3, [pc, #48]	; (23b58 <spi_flash_leave_low_power_mode+0x64>)
   23b26:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   23b28:	4b0e      	ldr	r3, [pc, #56]	; (23b64 <spi_flash_leave_low_power_mode+0x70>)
   23b2a:	2100      	movs	r1, #0
   23b2c:	0018      	movs	r0, r3
   23b2e:	4b0a      	ldr	r3, [pc, #40]	; (23b58 <spi_flash_leave_low_power_mode+0x64>)
   23b30:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   23b32:	4b0d      	ldr	r3, [pc, #52]	; (23b68 <spi_flash_leave_low_power_mode+0x74>)
   23b34:	2181      	movs	r1, #129	; 0x81
   23b36:	0018      	movs	r0, r3
   23b38:	4b07      	ldr	r3, [pc, #28]	; (23b58 <spi_flash_leave_low_power_mode+0x64>)
   23b3a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   23b3c:	46c0      	nop			; (mov r8, r8)
   23b3e:	4b0b      	ldr	r3, [pc, #44]	; (23b6c <spi_flash_leave_low_power_mode+0x78>)
   23b40:	0018      	movs	r0, r3
   23b42:	4b0b      	ldr	r3, [pc, #44]	; (23b70 <spi_flash_leave_low_power_mode+0x7c>)
   23b44:	4798      	blx	r3
   23b46:	0003      	movs	r3, r0
   23b48:	2b01      	cmp	r3, #1
   23b4a:	d1f8      	bne.n	23b3e <spi_flash_leave_low_power_mode+0x4a>
}
   23b4c:	46c0      	nop			; (mov r8, r8)
   23b4e:	46bd      	mov	sp, r7
   23b50:	b002      	add	sp, #8
   23b52:	bd80      	pop	{r7, pc}
   23b54:	00010208 	.word	0x00010208
   23b58:	000208d5 	.word	0x000208d5
   23b5c:	0001020c 	.word	0x0001020c
   23b60:	00010214 	.word	0x00010214
   23b64:	0001021c 	.word	0x0001021c
   23b68:	00010204 	.word	0x00010204
   23b6c:	00010218 	.word	0x00010218
   23b70:	00020891 	.word	0x00020891

00023b74 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   23b74:	b590      	push	{r4, r7, lr}
   23b76:	b085      	sub	sp, #20
   23b78:	af00      	add	r7, sp, #0
   23b7a:	0002      	movs	r2, r0
   23b7c:	1dfb      	adds	r3, r7, #7
   23b7e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   23b80:	230f      	movs	r3, #15
   23b82:	18fb      	adds	r3, r7, r3
   23b84:	2200      	movs	r2, #0
   23b86:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   23b88:	4b24      	ldr	r3, [pc, #144]	; (23c1c <spi_flash_enable+0xa8>)
   23b8a:	4798      	blx	r3
   23b8c:	0003      	movs	r3, r0
   23b8e:	051b      	lsls	r3, r3, #20
   23b90:	0d1b      	lsrs	r3, r3, #20
   23b92:	4a23      	ldr	r2, [pc, #140]	; (23c20 <spi_flash_enable+0xac>)
   23b94:	4293      	cmp	r3, r2
   23b96:	d938      	bls.n	23c0a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   23b98:	230f      	movs	r3, #15
   23b9a:	18fc      	adds	r4, r7, r3
   23b9c:	2308      	movs	r3, #8
   23b9e:	18fb      	adds	r3, r7, r3
   23ba0:	4a20      	ldr	r2, [pc, #128]	; (23c24 <spi_flash_enable+0xb0>)
   23ba2:	0019      	movs	r1, r3
   23ba4:	0010      	movs	r0, r2
   23ba6:	4b20      	ldr	r3, [pc, #128]	; (23c28 <spi_flash_enable+0xb4>)
   23ba8:	4798      	blx	r3
   23baa:	0003      	movs	r3, r0
   23bac:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   23bae:	230f      	movs	r3, #15
   23bb0:	18fb      	adds	r3, r7, r3
   23bb2:	781b      	ldrb	r3, [r3, #0]
   23bb4:	b25b      	sxtb	r3, r3
   23bb6:	2b00      	cmp	r3, #0
   23bb8:	d126      	bne.n	23c08 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   23bba:	68bb      	ldr	r3, [r7, #8]
   23bbc:	4a1b      	ldr	r2, [pc, #108]	; (23c2c <spi_flash_enable+0xb8>)
   23bbe:	4013      	ands	r3, r2
   23bc0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   23bc2:	68bb      	ldr	r3, [r7, #8]
   23bc4:	4a1a      	ldr	r2, [pc, #104]	; (23c30 <spi_flash_enable+0xbc>)
   23bc6:	4313      	orrs	r3, r2
   23bc8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   23bca:	68bb      	ldr	r3, [r7, #8]
   23bcc:	4a15      	ldr	r2, [pc, #84]	; (23c24 <spi_flash_enable+0xb0>)
   23bce:	0019      	movs	r1, r3
   23bd0:	0010      	movs	r0, r2
   23bd2:	4b18      	ldr	r3, [pc, #96]	; (23c34 <spi_flash_enable+0xc0>)
   23bd4:	4798      	blx	r3
		if(enable) {
   23bd6:	1dfb      	adds	r3, r7, #7
   23bd8:	781b      	ldrb	r3, [r3, #0]
   23bda:	2b00      	cmp	r3, #0
   23bdc:	d002      	beq.n	23be4 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   23bde:	4b16      	ldr	r3, [pc, #88]	; (23c38 <spi_flash_enable+0xc4>)
   23be0:	4798      	blx	r3
   23be2:	e001      	b.n	23be8 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   23be4:	4b15      	ldr	r3, [pc, #84]	; (23c3c <spi_flash_enable+0xc8>)
   23be6:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   23be8:	68bb      	ldr	r3, [r7, #8]
   23bea:	4a10      	ldr	r2, [pc, #64]	; (23c2c <spi_flash_enable+0xb8>)
   23bec:	4013      	ands	r3, r2
   23bee:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   23bf0:	68bb      	ldr	r3, [r7, #8]
   23bf2:	2280      	movs	r2, #128	; 0x80
   23bf4:	0252      	lsls	r2, r2, #9
   23bf6:	4313      	orrs	r3, r2
   23bf8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   23bfa:	68bb      	ldr	r3, [r7, #8]
   23bfc:	4a09      	ldr	r2, [pc, #36]	; (23c24 <spi_flash_enable+0xb0>)
   23bfe:	0019      	movs	r1, r3
   23c00:	0010      	movs	r0, r2
   23c02:	4b0c      	ldr	r3, [pc, #48]	; (23c34 <spi_flash_enable+0xc0>)
   23c04:	4798      	blx	r3
   23c06:	e000      	b.n	23c0a <spi_flash_enable+0x96>
			goto ERR1;
   23c08:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   23c0a:	230f      	movs	r3, #15
   23c0c:	18fb      	adds	r3, r7, r3
   23c0e:	781b      	ldrb	r3, [r3, #0]
   23c10:	b25b      	sxtb	r3, r3
}
   23c12:	0018      	movs	r0, r3
   23c14:	46bd      	mov	sp, r7
   23c16:	b005      	add	sp, #20
   23c18:	bd90      	pop	{r4, r7, pc}
   23c1a:	46c0      	nop			; (mov r8, r8)
   23c1c:	000201b1 	.word	0x000201b1
   23c20:	0000039f 	.word	0x0000039f
   23c24:	00001410 	.word	0x00001410
   23c28:	000208b1 	.word	0x000208b1
   23c2c:	f8888fff 	.word	0xf8888fff
   23c30:	01111000 	.word	0x01111000
   23c34:	000208d5 	.word	0x000208d5
   23c38:	00023af5 	.word	0x00023af5
   23c3c:	00023a75 	.word	0x00023a75

00023c40 <mem_test_unit_ready>:
   23c40:	b580      	push	{r7, lr}
   23c42:	b084      	sub	sp, #16
   23c44:	af00      	add	r7, sp, #0
   23c46:	0002      	movs	r2, r0
   23c48:	1dfb      	adds	r3, r7, #7
   23c4a:	701a      	strb	r2, [r3, #0]
   23c4c:	1dfb      	adds	r3, r7, #7
   23c4e:	781b      	ldrb	r3, [r3, #0]
   23c50:	2b00      	cmp	r3, #0
   23c52:	d108      	bne.n	23c66 <mem_test_unit_ready+0x26>
   23c54:	1dfb      	adds	r3, r7, #7
   23c56:	781a      	ldrb	r2, [r3, #0]
   23c58:	4b08      	ldr	r3, [pc, #32]	; (23c7c <mem_test_unit_ready+0x3c>)
   23c5a:	0152      	lsls	r2, r2, #5
   23c5c:	58d3      	ldr	r3, [r2, r3]
   23c5e:	4798      	blx	r3
   23c60:	0003      	movs	r3, r0
   23c62:	001a      	movs	r2, r3
   23c64:	e000      	b.n	23c68 <mem_test_unit_ready+0x28>
   23c66:	2201      	movs	r2, #1
   23c68:	230f      	movs	r3, #15
   23c6a:	18fb      	adds	r3, r7, r3
   23c6c:	701a      	strb	r2, [r3, #0]
   23c6e:	230f      	movs	r3, #15
   23c70:	18fb      	adds	r3, r7, r3
   23c72:	781b      	ldrb	r3, [r3, #0]
   23c74:	0018      	movs	r0, r3
   23c76:	46bd      	mov	sp, r7
   23c78:	b004      	add	sp, #16
   23c7a:	bd80      	pop	{r7, pc}
   23c7c:	00036918 	.word	0x00036918

00023c80 <mem_read_capacity>:
   23c80:	b580      	push	{r7, lr}
   23c82:	b084      	sub	sp, #16
   23c84:	af00      	add	r7, sp, #0
   23c86:	0002      	movs	r2, r0
   23c88:	6039      	str	r1, [r7, #0]
   23c8a:	1dfb      	adds	r3, r7, #7
   23c8c:	701a      	strb	r2, [r3, #0]
   23c8e:	1dfb      	adds	r3, r7, #7
   23c90:	781b      	ldrb	r3, [r3, #0]
   23c92:	2b00      	cmp	r3, #0
   23c94:	d10c      	bne.n	23cb0 <mem_read_capacity+0x30>
   23c96:	1dfb      	adds	r3, r7, #7
   23c98:	781b      	ldrb	r3, [r3, #0]
   23c9a:	4a0b      	ldr	r2, [pc, #44]	; (23cc8 <mem_read_capacity+0x48>)
   23c9c:	015b      	lsls	r3, r3, #5
   23c9e:	18d3      	adds	r3, r2, r3
   23ca0:	3304      	adds	r3, #4
   23ca2:	681b      	ldr	r3, [r3, #0]
   23ca4:	683a      	ldr	r2, [r7, #0]
   23ca6:	0010      	movs	r0, r2
   23ca8:	4798      	blx	r3
   23caa:	0003      	movs	r3, r0
   23cac:	001a      	movs	r2, r3
   23cae:	e000      	b.n	23cb2 <mem_read_capacity+0x32>
   23cb0:	2201      	movs	r2, #1
   23cb2:	230f      	movs	r3, #15
   23cb4:	18fb      	adds	r3, r7, r3
   23cb6:	701a      	strb	r2, [r3, #0]
   23cb8:	230f      	movs	r3, #15
   23cba:	18fb      	adds	r3, r7, r3
   23cbc:	781b      	ldrb	r3, [r3, #0]
   23cbe:	0018      	movs	r0, r3
   23cc0:	46bd      	mov	sp, r7
   23cc2:	b004      	add	sp, #16
   23cc4:	bd80      	pop	{r7, pc}
   23cc6:	46c0      	nop			; (mov r8, r8)
   23cc8:	00036918 	.word	0x00036918

00023ccc <mem_sector_size>:
   23ccc:	b580      	push	{r7, lr}
   23cce:	b084      	sub	sp, #16
   23cd0:	af00      	add	r7, sp, #0
   23cd2:	0002      	movs	r2, r0
   23cd4:	1dfb      	adds	r3, r7, #7
   23cd6:	701a      	strb	r2, [r3, #0]
   23cd8:	1dfb      	adds	r3, r7, #7
   23cda:	781b      	ldrb	r3, [r3, #0]
   23cdc:	425a      	negs	r2, r3
   23cde:	4153      	adcs	r3, r2
   23ce0:	b2da      	uxtb	r2, r3
   23ce2:	230f      	movs	r3, #15
   23ce4:	18fb      	adds	r3, r7, r3
   23ce6:	701a      	strb	r2, [r3, #0]
   23ce8:	230f      	movs	r3, #15
   23cea:	18fb      	adds	r3, r7, r3
   23cec:	781b      	ldrb	r3, [r3, #0]
   23cee:	0018      	movs	r0, r3
   23cf0:	46bd      	mov	sp, r7
   23cf2:	b004      	add	sp, #16
   23cf4:	bd80      	pop	{r7, pc}
	...

00023cf8 <mem_wr_protect>:
   23cf8:	b580      	push	{r7, lr}
   23cfa:	b084      	sub	sp, #16
   23cfc:	af00      	add	r7, sp, #0
   23cfe:	0002      	movs	r2, r0
   23d00:	1dfb      	adds	r3, r7, #7
   23d02:	701a      	strb	r2, [r3, #0]
   23d04:	1dfb      	adds	r3, r7, #7
   23d06:	781b      	ldrb	r3, [r3, #0]
   23d08:	2b00      	cmp	r3, #0
   23d0a:	d109      	bne.n	23d20 <mem_wr_protect+0x28>
   23d0c:	1dfb      	adds	r3, r7, #7
   23d0e:	781b      	ldrb	r3, [r3, #0]
   23d10:	4a0a      	ldr	r2, [pc, #40]	; (23d3c <mem_wr_protect+0x44>)
   23d12:	015b      	lsls	r3, r3, #5
   23d14:	18d3      	adds	r3, r2, r3
   23d16:	330c      	adds	r3, #12
   23d18:	681b      	ldr	r3, [r3, #0]
   23d1a:	4798      	blx	r3
   23d1c:	1e03      	subs	r3, r0, #0
   23d1e:	d001      	beq.n	23d24 <mem_wr_protect+0x2c>
   23d20:	2201      	movs	r2, #1
   23d22:	e000      	b.n	23d26 <mem_wr_protect+0x2e>
   23d24:	2200      	movs	r2, #0
   23d26:	230f      	movs	r3, #15
   23d28:	18fb      	adds	r3, r7, r3
   23d2a:	701a      	strb	r2, [r3, #0]
   23d2c:	230f      	movs	r3, #15
   23d2e:	18fb      	adds	r3, r7, r3
   23d30:	781b      	ldrb	r3, [r3, #0]
   23d32:	0018      	movs	r0, r3
   23d34:	46bd      	mov	sp, r7
   23d36:	b004      	add	sp, #16
   23d38:	bd80      	pop	{r7, pc}
   23d3a:	46c0      	nop			; (mov r8, r8)
   23d3c:	00036918 	.word	0x00036918

00023d40 <memory_2_ram>:
   23d40:	b580      	push	{r7, lr}
   23d42:	b086      	sub	sp, #24
   23d44:	af00      	add	r7, sp, #0
   23d46:	60b9      	str	r1, [r7, #8]
   23d48:	607a      	str	r2, [r7, #4]
   23d4a:	230f      	movs	r3, #15
   23d4c:	18fb      	adds	r3, r7, r3
   23d4e:	1c02      	adds	r2, r0, #0
   23d50:	701a      	strb	r2, [r3, #0]
   23d52:	230f      	movs	r3, #15
   23d54:	18fb      	adds	r3, r7, r3
   23d56:	781b      	ldrb	r3, [r3, #0]
   23d58:	2b00      	cmp	r3, #0
   23d5a:	d10e      	bne.n	23d7a <memory_2_ram+0x3a>
   23d5c:	230f      	movs	r3, #15
   23d5e:	18fb      	adds	r3, r7, r3
   23d60:	781b      	ldrb	r3, [r3, #0]
   23d62:	4a0b      	ldr	r2, [pc, #44]	; (23d90 <memory_2_ram+0x50>)
   23d64:	015b      	lsls	r3, r3, #5
   23d66:	18d3      	adds	r3, r2, r3
   23d68:	3314      	adds	r3, #20
   23d6a:	681b      	ldr	r3, [r3, #0]
   23d6c:	6879      	ldr	r1, [r7, #4]
   23d6e:	68ba      	ldr	r2, [r7, #8]
   23d70:	0010      	movs	r0, r2
   23d72:	4798      	blx	r3
   23d74:	0003      	movs	r3, r0
   23d76:	001a      	movs	r2, r3
   23d78:	e000      	b.n	23d7c <memory_2_ram+0x3c>
   23d7a:	2201      	movs	r2, #1
   23d7c:	2317      	movs	r3, #23
   23d7e:	18fb      	adds	r3, r7, r3
   23d80:	701a      	strb	r2, [r3, #0]
   23d82:	2317      	movs	r3, #23
   23d84:	18fb      	adds	r3, r7, r3
   23d86:	781b      	ldrb	r3, [r3, #0]
   23d88:	0018      	movs	r0, r3
   23d8a:	46bd      	mov	sp, r7
   23d8c:	b006      	add	sp, #24
   23d8e:	bd80      	pop	{r7, pc}
   23d90:	00036918 	.word	0x00036918

00023d94 <ram_2_memory>:
   23d94:	b580      	push	{r7, lr}
   23d96:	b086      	sub	sp, #24
   23d98:	af00      	add	r7, sp, #0
   23d9a:	60b9      	str	r1, [r7, #8]
   23d9c:	607a      	str	r2, [r7, #4]
   23d9e:	230f      	movs	r3, #15
   23da0:	18fb      	adds	r3, r7, r3
   23da2:	1c02      	adds	r2, r0, #0
   23da4:	701a      	strb	r2, [r3, #0]
   23da6:	230f      	movs	r3, #15
   23da8:	18fb      	adds	r3, r7, r3
   23daa:	781b      	ldrb	r3, [r3, #0]
   23dac:	2b00      	cmp	r3, #0
   23dae:	d10e      	bne.n	23dce <ram_2_memory+0x3a>
   23db0:	230f      	movs	r3, #15
   23db2:	18fb      	adds	r3, r7, r3
   23db4:	781b      	ldrb	r3, [r3, #0]
   23db6:	4a0b      	ldr	r2, [pc, #44]	; (23de4 <ram_2_memory+0x50>)
   23db8:	015b      	lsls	r3, r3, #5
   23dba:	18d3      	adds	r3, r2, r3
   23dbc:	3318      	adds	r3, #24
   23dbe:	681b      	ldr	r3, [r3, #0]
   23dc0:	6879      	ldr	r1, [r7, #4]
   23dc2:	68ba      	ldr	r2, [r7, #8]
   23dc4:	0010      	movs	r0, r2
   23dc6:	4798      	blx	r3
   23dc8:	0003      	movs	r3, r0
   23dca:	001a      	movs	r2, r3
   23dcc:	e000      	b.n	23dd0 <ram_2_memory+0x3c>
   23dce:	2201      	movs	r2, #1
   23dd0:	2317      	movs	r3, #23
   23dd2:	18fb      	adds	r3, r7, r3
   23dd4:	701a      	strb	r2, [r3, #0]
   23dd6:	2317      	movs	r3, #23
   23dd8:	18fb      	adds	r3, r7, r3
   23dda:	781b      	ldrb	r3, [r3, #0]
   23ddc:	0018      	movs	r0, r3
   23dde:	46bd      	mov	sp, r7
   23de0:	b006      	add	sp, #24
   23de2:	bd80      	pop	{r7, pc}
   23de4:	00036918 	.word	0x00036918

00023de8 <cpu_irq_enter_critical>:
   23de8:	b580      	push	{r7, lr}
   23dea:	b082      	sub	sp, #8
   23dec:	af00      	add	r7, sp, #0
   23dee:	4b10      	ldr	r3, [pc, #64]	; (23e30 <cpu_irq_enter_critical+0x48>)
   23df0:	681b      	ldr	r3, [r3, #0]
   23df2:	2b00      	cmp	r3, #0
   23df4:	d112      	bne.n	23e1c <cpu_irq_enter_critical+0x34>
   23df6:	f3ef 8310 	mrs	r3, PRIMASK
   23dfa:	607b      	str	r3, [r7, #4]
   23dfc:	687b      	ldr	r3, [r7, #4]
   23dfe:	2b00      	cmp	r3, #0
   23e00:	d109      	bne.n	23e16 <cpu_irq_enter_critical+0x2e>
   23e02:	b672      	cpsid	i
   23e04:	f3bf 8f5f 	dmb	sy
   23e08:	4b0a      	ldr	r3, [pc, #40]	; (23e34 <cpu_irq_enter_critical+0x4c>)
   23e0a:	2200      	movs	r2, #0
   23e0c:	701a      	strb	r2, [r3, #0]
   23e0e:	4b0a      	ldr	r3, [pc, #40]	; (23e38 <cpu_irq_enter_critical+0x50>)
   23e10:	2201      	movs	r2, #1
   23e12:	701a      	strb	r2, [r3, #0]
   23e14:	e002      	b.n	23e1c <cpu_irq_enter_critical+0x34>
   23e16:	4b08      	ldr	r3, [pc, #32]	; (23e38 <cpu_irq_enter_critical+0x50>)
   23e18:	2200      	movs	r2, #0
   23e1a:	701a      	strb	r2, [r3, #0]
   23e1c:	4b04      	ldr	r3, [pc, #16]	; (23e30 <cpu_irq_enter_critical+0x48>)
   23e1e:	681b      	ldr	r3, [r3, #0]
   23e20:	1c5a      	adds	r2, r3, #1
   23e22:	4b03      	ldr	r3, [pc, #12]	; (23e30 <cpu_irq_enter_critical+0x48>)
   23e24:	601a      	str	r2, [r3, #0]
   23e26:	46c0      	nop			; (mov r8, r8)
   23e28:	46bd      	mov	sp, r7
   23e2a:	b002      	add	sp, #8
   23e2c:	bd80      	pop	{r7, pc}
   23e2e:	46c0      	nop			; (mov r8, r8)
   23e30:	20003d10 	.word	0x20003d10
   23e34:	20000106 	.word	0x20000106
   23e38:	20003d14 	.word	0x20003d14

00023e3c <cpu_irq_leave_critical>:
   23e3c:	b580      	push	{r7, lr}
   23e3e:	af00      	add	r7, sp, #0
   23e40:	4b0b      	ldr	r3, [pc, #44]	; (23e70 <cpu_irq_leave_critical+0x34>)
   23e42:	681b      	ldr	r3, [r3, #0]
   23e44:	1e5a      	subs	r2, r3, #1
   23e46:	4b0a      	ldr	r3, [pc, #40]	; (23e70 <cpu_irq_leave_critical+0x34>)
   23e48:	601a      	str	r2, [r3, #0]
   23e4a:	4b09      	ldr	r3, [pc, #36]	; (23e70 <cpu_irq_leave_critical+0x34>)
   23e4c:	681b      	ldr	r3, [r3, #0]
   23e4e:	2b00      	cmp	r3, #0
   23e50:	d10a      	bne.n	23e68 <cpu_irq_leave_critical+0x2c>
   23e52:	4b08      	ldr	r3, [pc, #32]	; (23e74 <cpu_irq_leave_critical+0x38>)
   23e54:	781b      	ldrb	r3, [r3, #0]
   23e56:	b2db      	uxtb	r3, r3
   23e58:	2b00      	cmp	r3, #0
   23e5a:	d005      	beq.n	23e68 <cpu_irq_leave_critical+0x2c>
   23e5c:	4b06      	ldr	r3, [pc, #24]	; (23e78 <cpu_irq_leave_critical+0x3c>)
   23e5e:	2201      	movs	r2, #1
   23e60:	701a      	strb	r2, [r3, #0]
   23e62:	f3bf 8f5f 	dmb	sy
   23e66:	b662      	cpsie	i
   23e68:	46c0      	nop			; (mov r8, r8)
   23e6a:	46bd      	mov	sp, r7
   23e6c:	bd80      	pop	{r7, pc}
   23e6e:	46c0      	nop			; (mov r8, r8)
   23e70:	20003d10 	.word	0x20003d10
   23e74:	20003d14 	.word	0x20003d14
   23e78:	20000106 	.word	0x20000106

00023e7c <system_pinmux_get_group_from_gpio_pin>:
{
   23e7c:	b580      	push	{r7, lr}
   23e7e:	b084      	sub	sp, #16
   23e80:	af00      	add	r7, sp, #0
   23e82:	0002      	movs	r2, r0
   23e84:	1dfb      	adds	r3, r7, #7
   23e86:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   23e88:	230f      	movs	r3, #15
   23e8a:	18fb      	adds	r3, r7, r3
   23e8c:	1dfa      	adds	r2, r7, #7
   23e8e:	7812      	ldrb	r2, [r2, #0]
   23e90:	09d2      	lsrs	r2, r2, #7
   23e92:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   23e94:	230e      	movs	r3, #14
   23e96:	18fb      	adds	r3, r7, r3
   23e98:	1dfa      	adds	r2, r7, #7
   23e9a:	7812      	ldrb	r2, [r2, #0]
   23e9c:	0952      	lsrs	r2, r2, #5
   23e9e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   23ea0:	4b0d      	ldr	r3, [pc, #52]	; (23ed8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   23ea2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   23ea4:	230f      	movs	r3, #15
   23ea6:	18fb      	adds	r3, r7, r3
   23ea8:	781b      	ldrb	r3, [r3, #0]
   23eaa:	2b00      	cmp	r3, #0
   23eac:	d10f      	bne.n	23ece <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   23eae:	230f      	movs	r3, #15
   23eb0:	18fb      	adds	r3, r7, r3
   23eb2:	781b      	ldrb	r3, [r3, #0]
   23eb4:	009b      	lsls	r3, r3, #2
   23eb6:	2210      	movs	r2, #16
   23eb8:	4694      	mov	ip, r2
   23eba:	44bc      	add	ip, r7
   23ebc:	4463      	add	r3, ip
   23ebe:	3b08      	subs	r3, #8
   23ec0:	681a      	ldr	r2, [r3, #0]
   23ec2:	230e      	movs	r3, #14
   23ec4:	18fb      	adds	r3, r7, r3
   23ec6:	781b      	ldrb	r3, [r3, #0]
   23ec8:	01db      	lsls	r3, r3, #7
   23eca:	18d3      	adds	r3, r2, r3
   23ecc:	e000      	b.n	23ed0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   23ece:	2300      	movs	r3, #0
}
   23ed0:	0018      	movs	r0, r3
   23ed2:	46bd      	mov	sp, r7
   23ed4:	b004      	add	sp, #16
   23ed6:	bd80      	pop	{r7, pc}
   23ed8:	41004400 	.word	0x41004400

00023edc <port_get_group_from_gpio_pin>:
{
   23edc:	b580      	push	{r7, lr}
   23ede:	b082      	sub	sp, #8
   23ee0:	af00      	add	r7, sp, #0
   23ee2:	0002      	movs	r2, r0
   23ee4:	1dfb      	adds	r3, r7, #7
   23ee6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   23ee8:	1dfb      	adds	r3, r7, #7
   23eea:	781b      	ldrb	r3, [r3, #0]
   23eec:	0018      	movs	r0, r3
   23eee:	4b03      	ldr	r3, [pc, #12]	; (23efc <port_get_group_from_gpio_pin+0x20>)
   23ef0:	4798      	blx	r3
   23ef2:	0003      	movs	r3, r0
}
   23ef4:	0018      	movs	r0, r3
   23ef6:	46bd      	mov	sp, r7
   23ef8:	b002      	add	sp, #8
   23efa:	bd80      	pop	{r7, pc}
   23efc:	00023e7d 	.word	0x00023e7d

00023f00 <port_get_config_defaults>:
{
   23f00:	b580      	push	{r7, lr}
   23f02:	b082      	sub	sp, #8
   23f04:	af00      	add	r7, sp, #0
   23f06:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   23f08:	687b      	ldr	r3, [r7, #4]
   23f0a:	2200      	movs	r2, #0
   23f0c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   23f0e:	687b      	ldr	r3, [r7, #4]
   23f10:	2201      	movs	r2, #1
   23f12:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   23f14:	687b      	ldr	r3, [r7, #4]
   23f16:	2200      	movs	r2, #0
   23f18:	709a      	strb	r2, [r3, #2]
}
   23f1a:	46c0      	nop			; (mov r8, r8)
   23f1c:	46bd      	mov	sp, r7
   23f1e:	b002      	add	sp, #8
   23f20:	bd80      	pop	{r7, pc}
	...

00023f24 <port_pin_set_output_level>:
{
   23f24:	b580      	push	{r7, lr}
   23f26:	b084      	sub	sp, #16
   23f28:	af00      	add	r7, sp, #0
   23f2a:	0002      	movs	r2, r0
   23f2c:	1dfb      	adds	r3, r7, #7
   23f2e:	701a      	strb	r2, [r3, #0]
   23f30:	1dbb      	adds	r3, r7, #6
   23f32:	1c0a      	adds	r2, r1, #0
   23f34:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   23f36:	1dfb      	adds	r3, r7, #7
   23f38:	781b      	ldrb	r3, [r3, #0]
   23f3a:	0018      	movs	r0, r3
   23f3c:	4b0d      	ldr	r3, [pc, #52]	; (23f74 <port_pin_set_output_level+0x50>)
   23f3e:	4798      	blx	r3
   23f40:	0003      	movs	r3, r0
   23f42:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   23f44:	1dfb      	adds	r3, r7, #7
   23f46:	781b      	ldrb	r3, [r3, #0]
   23f48:	221f      	movs	r2, #31
   23f4a:	4013      	ands	r3, r2
   23f4c:	2201      	movs	r2, #1
   23f4e:	409a      	lsls	r2, r3
   23f50:	0013      	movs	r3, r2
   23f52:	60bb      	str	r3, [r7, #8]
	if (level) {
   23f54:	1dbb      	adds	r3, r7, #6
   23f56:	781b      	ldrb	r3, [r3, #0]
   23f58:	2b00      	cmp	r3, #0
   23f5a:	d003      	beq.n	23f64 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   23f5c:	68fb      	ldr	r3, [r7, #12]
   23f5e:	68ba      	ldr	r2, [r7, #8]
   23f60:	619a      	str	r2, [r3, #24]
}
   23f62:	e002      	b.n	23f6a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   23f64:	68fb      	ldr	r3, [r7, #12]
   23f66:	68ba      	ldr	r2, [r7, #8]
   23f68:	615a      	str	r2, [r3, #20]
}
   23f6a:	46c0      	nop			; (mov r8, r8)
   23f6c:	46bd      	mov	sp, r7
   23f6e:	b004      	add	sp, #16
   23f70:	bd80      	pop	{r7, pc}
   23f72:	46c0      	nop			; (mov r8, r8)
   23f74:	00023edd 	.word	0x00023edd

00023f78 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   23f78:	b580      	push	{r7, lr}
   23f7a:	b082      	sub	sp, #8
   23f7c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   23f7e:	1d3b      	adds	r3, r7, #4
   23f80:	0018      	movs	r0, r3
   23f82:	4b0e      	ldr	r3, [pc, #56]	; (23fbc <system_board_init+0x44>)
   23f84:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   23f86:	1d3b      	adds	r3, r7, #4
   23f88:	2201      	movs	r2, #1
   23f8a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   23f8c:	1d3b      	adds	r3, r7, #4
   23f8e:	0019      	movs	r1, r3
   23f90:	2017      	movs	r0, #23
   23f92:	4b0b      	ldr	r3, [pc, #44]	; (23fc0 <system_board_init+0x48>)
   23f94:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   23f96:	2101      	movs	r1, #1
   23f98:	2017      	movs	r0, #23
   23f9a:	4b0a      	ldr	r3, [pc, #40]	; (23fc4 <system_board_init+0x4c>)
   23f9c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   23f9e:	1d3b      	adds	r3, r7, #4
   23fa0:	2200      	movs	r2, #0
   23fa2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   23fa4:	1d3b      	adds	r3, r7, #4
   23fa6:	2201      	movs	r2, #1
   23fa8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   23faa:	1d3b      	adds	r3, r7, #4
   23fac:	0019      	movs	r1, r3
   23fae:	2037      	movs	r0, #55	; 0x37
   23fb0:	4b03      	ldr	r3, [pc, #12]	; (23fc0 <system_board_init+0x48>)
   23fb2:	4798      	blx	r3
}
   23fb4:	46c0      	nop			; (mov r8, r8)
   23fb6:	46bd      	mov	sp, r7
   23fb8:	b002      	add	sp, #8
   23fba:	bd80      	pop	{r7, pc}
   23fbc:	00023f01 	.word	0x00023f01
   23fc0:	000245ed 	.word	0x000245ed
   23fc4:	00023f25 	.word	0x00023f25

00023fc8 <_extint_get_eic_from_channel>:
   23fc8:	b580      	push	{r7, lr}
   23fca:	b084      	sub	sp, #16
   23fcc:	af00      	add	r7, sp, #0
   23fce:	0002      	movs	r2, r0
   23fd0:	1dfb      	adds	r3, r7, #7
   23fd2:	701a      	strb	r2, [r3, #0]
   23fd4:	230f      	movs	r3, #15
   23fd6:	18fb      	adds	r3, r7, r3
   23fd8:	1dfa      	adds	r2, r7, #7
   23fda:	7812      	ldrb	r2, [r2, #0]
   23fdc:	0952      	lsrs	r2, r2, #5
   23fde:	701a      	strb	r2, [r3, #0]
   23fe0:	230f      	movs	r3, #15
   23fe2:	18fb      	adds	r3, r7, r3
   23fe4:	781b      	ldrb	r3, [r3, #0]
   23fe6:	2b00      	cmp	r3, #0
   23fe8:	d10c      	bne.n	24004 <_extint_get_eic_from_channel+0x3c>
   23fea:	4b09      	ldr	r3, [pc, #36]	; (24010 <_extint_get_eic_from_channel+0x48>)
   23fec:	60bb      	str	r3, [r7, #8]
   23fee:	230f      	movs	r3, #15
   23ff0:	18fb      	adds	r3, r7, r3
   23ff2:	781b      	ldrb	r3, [r3, #0]
   23ff4:	009b      	lsls	r3, r3, #2
   23ff6:	2210      	movs	r2, #16
   23ff8:	4694      	mov	ip, r2
   23ffa:	44bc      	add	ip, r7
   23ffc:	4463      	add	r3, ip
   23ffe:	3b08      	subs	r3, #8
   24000:	681b      	ldr	r3, [r3, #0]
   24002:	e000      	b.n	24006 <_extint_get_eic_from_channel+0x3e>
   24004:	2300      	movs	r3, #0
   24006:	0018      	movs	r0, r3
   24008:	46bd      	mov	sp, r7
   2400a:	b004      	add	sp, #16
   2400c:	bd80      	pop	{r7, pc}
   2400e:	46c0      	nop			; (mov r8, r8)
   24010:	40001800 	.word	0x40001800

00024014 <extint_chan_is_detected>:
   24014:	b580      	push	{r7, lr}
   24016:	b084      	sub	sp, #16
   24018:	af00      	add	r7, sp, #0
   2401a:	0002      	movs	r2, r0
   2401c:	1dfb      	adds	r3, r7, #7
   2401e:	701a      	strb	r2, [r3, #0]
   24020:	1dfb      	adds	r3, r7, #7
   24022:	781b      	ldrb	r3, [r3, #0]
   24024:	0018      	movs	r0, r3
   24026:	4b0b      	ldr	r3, [pc, #44]	; (24054 <extint_chan_is_detected+0x40>)
   24028:	4798      	blx	r3
   2402a:	0003      	movs	r3, r0
   2402c:	60fb      	str	r3, [r7, #12]
   2402e:	1dfb      	adds	r3, r7, #7
   24030:	781b      	ldrb	r3, [r3, #0]
   24032:	221f      	movs	r2, #31
   24034:	4013      	ands	r3, r2
   24036:	2201      	movs	r2, #1
   24038:	409a      	lsls	r2, r3
   2403a:	0013      	movs	r3, r2
   2403c:	60bb      	str	r3, [r7, #8]
   2403e:	68fb      	ldr	r3, [r7, #12]
   24040:	691b      	ldr	r3, [r3, #16]
   24042:	68ba      	ldr	r2, [r7, #8]
   24044:	4013      	ands	r3, r2
   24046:	1e5a      	subs	r2, r3, #1
   24048:	4193      	sbcs	r3, r2
   2404a:	b2db      	uxtb	r3, r3
   2404c:	0018      	movs	r0, r3
   2404e:	46bd      	mov	sp, r7
   24050:	b004      	add	sp, #16
   24052:	bd80      	pop	{r7, pc}
   24054:	00023fc9 	.word	0x00023fc9

00024058 <extint_chan_clear_detected>:
   24058:	b580      	push	{r7, lr}
   2405a:	b084      	sub	sp, #16
   2405c:	af00      	add	r7, sp, #0
   2405e:	0002      	movs	r2, r0
   24060:	1dfb      	adds	r3, r7, #7
   24062:	701a      	strb	r2, [r3, #0]
   24064:	1dfb      	adds	r3, r7, #7
   24066:	781b      	ldrb	r3, [r3, #0]
   24068:	0018      	movs	r0, r3
   2406a:	4b09      	ldr	r3, [pc, #36]	; (24090 <extint_chan_clear_detected+0x38>)
   2406c:	4798      	blx	r3
   2406e:	0003      	movs	r3, r0
   24070:	60fb      	str	r3, [r7, #12]
   24072:	1dfb      	adds	r3, r7, #7
   24074:	781b      	ldrb	r3, [r3, #0]
   24076:	221f      	movs	r2, #31
   24078:	4013      	ands	r3, r2
   2407a:	2201      	movs	r2, #1
   2407c:	409a      	lsls	r2, r3
   2407e:	0013      	movs	r3, r2
   24080:	60bb      	str	r3, [r7, #8]
   24082:	68fb      	ldr	r3, [r7, #12]
   24084:	68ba      	ldr	r2, [r7, #8]
   24086:	611a      	str	r2, [r3, #16]
   24088:	46c0      	nop			; (mov r8, r8)
   2408a:	46bd      	mov	sp, r7
   2408c:	b004      	add	sp, #16
   2408e:	bd80      	pop	{r7, pc}
   24090:	00023fc9 	.word	0x00023fc9

00024094 <extint_register_callback>:
   24094:	b580      	push	{r7, lr}
   24096:	b082      	sub	sp, #8
   24098:	af00      	add	r7, sp, #0
   2409a:	6078      	str	r0, [r7, #4]
   2409c:	0008      	movs	r0, r1
   2409e:	0011      	movs	r1, r2
   240a0:	1cfb      	adds	r3, r7, #3
   240a2:	1c02      	adds	r2, r0, #0
   240a4:	701a      	strb	r2, [r3, #0]
   240a6:	1cbb      	adds	r3, r7, #2
   240a8:	1c0a      	adds	r2, r1, #0
   240aa:	701a      	strb	r2, [r3, #0]
   240ac:	1cbb      	adds	r3, r7, #2
   240ae:	781b      	ldrb	r3, [r3, #0]
   240b0:	2b00      	cmp	r3, #0
   240b2:	d001      	beq.n	240b8 <extint_register_callback+0x24>
   240b4:	2317      	movs	r3, #23
   240b6:	e019      	b.n	240ec <extint_register_callback+0x58>
   240b8:	1cfb      	adds	r3, r7, #3
   240ba:	781a      	ldrb	r2, [r3, #0]
   240bc:	4b0d      	ldr	r3, [pc, #52]	; (240f4 <extint_register_callback+0x60>)
   240be:	0092      	lsls	r2, r2, #2
   240c0:	58d3      	ldr	r3, [r2, r3]
   240c2:	2b00      	cmp	r3, #0
   240c4:	d107      	bne.n	240d6 <extint_register_callback+0x42>
   240c6:	1cfb      	adds	r3, r7, #3
   240c8:	781a      	ldrb	r2, [r3, #0]
   240ca:	4b0a      	ldr	r3, [pc, #40]	; (240f4 <extint_register_callback+0x60>)
   240cc:	0092      	lsls	r2, r2, #2
   240ce:	6879      	ldr	r1, [r7, #4]
   240d0:	50d1      	str	r1, [r2, r3]
   240d2:	2300      	movs	r3, #0
   240d4:	e00a      	b.n	240ec <extint_register_callback+0x58>
   240d6:	1cfb      	adds	r3, r7, #3
   240d8:	781a      	ldrb	r2, [r3, #0]
   240da:	4b06      	ldr	r3, [pc, #24]	; (240f4 <extint_register_callback+0x60>)
   240dc:	0092      	lsls	r2, r2, #2
   240de:	58d2      	ldr	r2, [r2, r3]
   240e0:	687b      	ldr	r3, [r7, #4]
   240e2:	429a      	cmp	r2, r3
   240e4:	d101      	bne.n	240ea <extint_register_callback+0x56>
   240e6:	2300      	movs	r3, #0
   240e8:	e000      	b.n	240ec <extint_register_callback+0x58>
   240ea:	231d      	movs	r3, #29
   240ec:	0018      	movs	r0, r3
   240ee:	46bd      	mov	sp, r7
   240f0:	b002      	add	sp, #8
   240f2:	bd80      	pop	{r7, pc}
   240f4:	20005534 	.word	0x20005534

000240f8 <extint_chan_enable_callback>:
   240f8:	b580      	push	{r7, lr}
   240fa:	b084      	sub	sp, #16
   240fc:	af00      	add	r7, sp, #0
   240fe:	0002      	movs	r2, r0
   24100:	1dfb      	adds	r3, r7, #7
   24102:	701a      	strb	r2, [r3, #0]
   24104:	1dbb      	adds	r3, r7, #6
   24106:	1c0a      	adds	r2, r1, #0
   24108:	701a      	strb	r2, [r3, #0]
   2410a:	1dbb      	adds	r3, r7, #6
   2410c:	781b      	ldrb	r3, [r3, #0]
   2410e:	2b00      	cmp	r3, #0
   24110:	d10e      	bne.n	24130 <extint_chan_enable_callback+0x38>
   24112:	1dfb      	adds	r3, r7, #7
   24114:	781b      	ldrb	r3, [r3, #0]
   24116:	0018      	movs	r0, r3
   24118:	4b08      	ldr	r3, [pc, #32]	; (2413c <extint_chan_enable_callback+0x44>)
   2411a:	4798      	blx	r3
   2411c:	0003      	movs	r3, r0
   2411e:	60fb      	str	r3, [r7, #12]
   24120:	1dfb      	adds	r3, r7, #7
   24122:	781b      	ldrb	r3, [r3, #0]
   24124:	2201      	movs	r2, #1
   24126:	409a      	lsls	r2, r3
   24128:	68fb      	ldr	r3, [r7, #12]
   2412a:	60da      	str	r2, [r3, #12]
   2412c:	2300      	movs	r3, #0
   2412e:	e000      	b.n	24132 <extint_chan_enable_callback+0x3a>
   24130:	2317      	movs	r3, #23
   24132:	0018      	movs	r0, r3
   24134:	46bd      	mov	sp, r7
   24136:	b004      	add	sp, #16
   24138:	bd80      	pop	{r7, pc}
   2413a:	46c0      	nop			; (mov r8, r8)
   2413c:	00023fc9 	.word	0x00023fc9

00024140 <extint_chan_disable_callback>:
   24140:	b580      	push	{r7, lr}
   24142:	b084      	sub	sp, #16
   24144:	af00      	add	r7, sp, #0
   24146:	0002      	movs	r2, r0
   24148:	1dfb      	adds	r3, r7, #7
   2414a:	701a      	strb	r2, [r3, #0]
   2414c:	1dbb      	adds	r3, r7, #6
   2414e:	1c0a      	adds	r2, r1, #0
   24150:	701a      	strb	r2, [r3, #0]
   24152:	1dbb      	adds	r3, r7, #6
   24154:	781b      	ldrb	r3, [r3, #0]
   24156:	2b00      	cmp	r3, #0
   24158:	d10e      	bne.n	24178 <extint_chan_disable_callback+0x38>
   2415a:	1dfb      	adds	r3, r7, #7
   2415c:	781b      	ldrb	r3, [r3, #0]
   2415e:	0018      	movs	r0, r3
   24160:	4b08      	ldr	r3, [pc, #32]	; (24184 <extint_chan_disable_callback+0x44>)
   24162:	4798      	blx	r3
   24164:	0003      	movs	r3, r0
   24166:	60fb      	str	r3, [r7, #12]
   24168:	1dfb      	adds	r3, r7, #7
   2416a:	781b      	ldrb	r3, [r3, #0]
   2416c:	2201      	movs	r2, #1
   2416e:	409a      	lsls	r2, r3
   24170:	68fb      	ldr	r3, [r7, #12]
   24172:	609a      	str	r2, [r3, #8]
   24174:	2300      	movs	r3, #0
   24176:	e000      	b.n	2417a <extint_chan_disable_callback+0x3a>
   24178:	2317      	movs	r3, #23
   2417a:	0018      	movs	r0, r3
   2417c:	46bd      	mov	sp, r7
   2417e:	b004      	add	sp, #16
   24180:	bd80      	pop	{r7, pc}
   24182:	46c0      	nop			; (mov r8, r8)
   24184:	00023fc9 	.word	0x00023fc9

00024188 <EIC_Handler>:
   24188:	b580      	push	{r7, lr}
   2418a:	af00      	add	r7, sp, #0
   2418c:	4b15      	ldr	r3, [pc, #84]	; (241e4 <EIC_Handler+0x5c>)
   2418e:	2200      	movs	r2, #0
   24190:	701a      	strb	r2, [r3, #0]
   24192:	e020      	b.n	241d6 <EIC_Handler+0x4e>
   24194:	4b13      	ldr	r3, [pc, #76]	; (241e4 <EIC_Handler+0x5c>)
   24196:	781b      	ldrb	r3, [r3, #0]
   24198:	0018      	movs	r0, r3
   2419a:	4b13      	ldr	r3, [pc, #76]	; (241e8 <EIC_Handler+0x60>)
   2419c:	4798      	blx	r3
   2419e:	1e03      	subs	r3, r0, #0
   241a0:	d013      	beq.n	241ca <EIC_Handler+0x42>
   241a2:	4b10      	ldr	r3, [pc, #64]	; (241e4 <EIC_Handler+0x5c>)
   241a4:	781b      	ldrb	r3, [r3, #0]
   241a6:	0018      	movs	r0, r3
   241a8:	4b10      	ldr	r3, [pc, #64]	; (241ec <EIC_Handler+0x64>)
   241aa:	4798      	blx	r3
   241ac:	4b0d      	ldr	r3, [pc, #52]	; (241e4 <EIC_Handler+0x5c>)
   241ae:	781b      	ldrb	r3, [r3, #0]
   241b0:	001a      	movs	r2, r3
   241b2:	4b0f      	ldr	r3, [pc, #60]	; (241f0 <EIC_Handler+0x68>)
   241b4:	0092      	lsls	r2, r2, #2
   241b6:	58d3      	ldr	r3, [r2, r3]
   241b8:	2b00      	cmp	r3, #0
   241ba:	d006      	beq.n	241ca <EIC_Handler+0x42>
   241bc:	4b09      	ldr	r3, [pc, #36]	; (241e4 <EIC_Handler+0x5c>)
   241be:	781b      	ldrb	r3, [r3, #0]
   241c0:	001a      	movs	r2, r3
   241c2:	4b0b      	ldr	r3, [pc, #44]	; (241f0 <EIC_Handler+0x68>)
   241c4:	0092      	lsls	r2, r2, #2
   241c6:	58d3      	ldr	r3, [r2, r3]
   241c8:	4798      	blx	r3
   241ca:	4b06      	ldr	r3, [pc, #24]	; (241e4 <EIC_Handler+0x5c>)
   241cc:	781b      	ldrb	r3, [r3, #0]
   241ce:	3301      	adds	r3, #1
   241d0:	b2da      	uxtb	r2, r3
   241d2:	4b04      	ldr	r3, [pc, #16]	; (241e4 <EIC_Handler+0x5c>)
   241d4:	701a      	strb	r2, [r3, #0]
   241d6:	4b03      	ldr	r3, [pc, #12]	; (241e4 <EIC_Handler+0x5c>)
   241d8:	781b      	ldrb	r3, [r3, #0]
   241da:	2b0f      	cmp	r3, #15
   241dc:	d9da      	bls.n	24194 <EIC_Handler+0xc>
   241de:	46c0      	nop			; (mov r8, r8)
   241e0:	46bd      	mov	sp, r7
   241e2:	bd80      	pop	{r7, pc}
   241e4:	20005530 	.word	0x20005530
   241e8:	00024015 	.word	0x00024015
   241ec:	00024059 	.word	0x00024059
   241f0:	20005534 	.word	0x20005534

000241f4 <system_gclk_chan_get_config_defaults>:
   241f4:	b580      	push	{r7, lr}
   241f6:	b082      	sub	sp, #8
   241f8:	af00      	add	r7, sp, #0
   241fa:	6078      	str	r0, [r7, #4]
   241fc:	687b      	ldr	r3, [r7, #4]
   241fe:	2200      	movs	r2, #0
   24200:	701a      	strb	r2, [r3, #0]
   24202:	46c0      	nop			; (mov r8, r8)
   24204:	46bd      	mov	sp, r7
   24206:	b002      	add	sp, #8
   24208:	bd80      	pop	{r7, pc}
	...

0002420c <system_apb_clock_set_mask>:
   2420c:	b580      	push	{r7, lr}
   2420e:	b082      	sub	sp, #8
   24210:	af00      	add	r7, sp, #0
   24212:	0002      	movs	r2, r0
   24214:	6039      	str	r1, [r7, #0]
   24216:	1dfb      	adds	r3, r7, #7
   24218:	701a      	strb	r2, [r3, #0]
   2421a:	1dfb      	adds	r3, r7, #7
   2421c:	781b      	ldrb	r3, [r3, #0]
   2421e:	2b01      	cmp	r3, #1
   24220:	d00a      	beq.n	24238 <system_apb_clock_set_mask+0x2c>
   24222:	2b02      	cmp	r3, #2
   24224:	d00f      	beq.n	24246 <system_apb_clock_set_mask+0x3a>
   24226:	2b00      	cmp	r3, #0
   24228:	d114      	bne.n	24254 <system_apb_clock_set_mask+0x48>
   2422a:	4b0e      	ldr	r3, [pc, #56]	; (24264 <system_apb_clock_set_mask+0x58>)
   2422c:	4a0d      	ldr	r2, [pc, #52]	; (24264 <system_apb_clock_set_mask+0x58>)
   2422e:	6991      	ldr	r1, [r2, #24]
   24230:	683a      	ldr	r2, [r7, #0]
   24232:	430a      	orrs	r2, r1
   24234:	619a      	str	r2, [r3, #24]
   24236:	e00f      	b.n	24258 <system_apb_clock_set_mask+0x4c>
   24238:	4b0a      	ldr	r3, [pc, #40]	; (24264 <system_apb_clock_set_mask+0x58>)
   2423a:	4a0a      	ldr	r2, [pc, #40]	; (24264 <system_apb_clock_set_mask+0x58>)
   2423c:	69d1      	ldr	r1, [r2, #28]
   2423e:	683a      	ldr	r2, [r7, #0]
   24240:	430a      	orrs	r2, r1
   24242:	61da      	str	r2, [r3, #28]
   24244:	e008      	b.n	24258 <system_apb_clock_set_mask+0x4c>
   24246:	4b07      	ldr	r3, [pc, #28]	; (24264 <system_apb_clock_set_mask+0x58>)
   24248:	4a06      	ldr	r2, [pc, #24]	; (24264 <system_apb_clock_set_mask+0x58>)
   2424a:	6a11      	ldr	r1, [r2, #32]
   2424c:	683a      	ldr	r2, [r7, #0]
   2424e:	430a      	orrs	r2, r1
   24250:	621a      	str	r2, [r3, #32]
   24252:	e001      	b.n	24258 <system_apb_clock_set_mask+0x4c>
   24254:	2317      	movs	r3, #23
   24256:	e000      	b.n	2425a <system_apb_clock_set_mask+0x4e>
   24258:	2300      	movs	r3, #0
   2425a:	0018      	movs	r0, r3
   2425c:	46bd      	mov	sp, r7
   2425e:	b002      	add	sp, #8
   24260:	bd80      	pop	{r7, pc}
   24262:	46c0      	nop			; (mov r8, r8)
   24264:	40000400 	.word	0x40000400

00024268 <system_pinmux_get_config_defaults>:
   24268:	b580      	push	{r7, lr}
   2426a:	b082      	sub	sp, #8
   2426c:	af00      	add	r7, sp, #0
   2426e:	6078      	str	r0, [r7, #4]
   24270:	687b      	ldr	r3, [r7, #4]
   24272:	2280      	movs	r2, #128	; 0x80
   24274:	701a      	strb	r2, [r3, #0]
   24276:	687b      	ldr	r3, [r7, #4]
   24278:	2200      	movs	r2, #0
   2427a:	705a      	strb	r2, [r3, #1]
   2427c:	687b      	ldr	r3, [r7, #4]
   2427e:	2201      	movs	r2, #1
   24280:	709a      	strb	r2, [r3, #2]
   24282:	687b      	ldr	r3, [r7, #4]
   24284:	2200      	movs	r2, #0
   24286:	70da      	strb	r2, [r3, #3]
   24288:	46c0      	nop			; (mov r8, r8)
   2428a:	46bd      	mov	sp, r7
   2428c:	b002      	add	sp, #8
   2428e:	bd80      	pop	{r7, pc}

00024290 <system_interrupt_enable>:
   24290:	b580      	push	{r7, lr}
   24292:	b082      	sub	sp, #8
   24294:	af00      	add	r7, sp, #0
   24296:	0002      	movs	r2, r0
   24298:	1dfb      	adds	r3, r7, #7
   2429a:	701a      	strb	r2, [r3, #0]
   2429c:	4b06      	ldr	r3, [pc, #24]	; (242b8 <system_interrupt_enable+0x28>)
   2429e:	1dfa      	adds	r2, r7, #7
   242a0:	7812      	ldrb	r2, [r2, #0]
   242a2:	0011      	movs	r1, r2
   242a4:	221f      	movs	r2, #31
   242a6:	400a      	ands	r2, r1
   242a8:	2101      	movs	r1, #1
   242aa:	4091      	lsls	r1, r2
   242ac:	000a      	movs	r2, r1
   242ae:	601a      	str	r2, [r3, #0]
   242b0:	46c0      	nop			; (mov r8, r8)
   242b2:	46bd      	mov	sp, r7
   242b4:	b002      	add	sp, #8
   242b6:	bd80      	pop	{r7, pc}
   242b8:	e000e100 	.word	0xe000e100

000242bc <_extint_get_eic_from_channel>:
   242bc:	b580      	push	{r7, lr}
   242be:	b084      	sub	sp, #16
   242c0:	af00      	add	r7, sp, #0
   242c2:	0002      	movs	r2, r0
   242c4:	1dfb      	adds	r3, r7, #7
   242c6:	701a      	strb	r2, [r3, #0]
   242c8:	230f      	movs	r3, #15
   242ca:	18fb      	adds	r3, r7, r3
   242cc:	1dfa      	adds	r2, r7, #7
   242ce:	7812      	ldrb	r2, [r2, #0]
   242d0:	0952      	lsrs	r2, r2, #5
   242d2:	701a      	strb	r2, [r3, #0]
   242d4:	230f      	movs	r3, #15
   242d6:	18fb      	adds	r3, r7, r3
   242d8:	781b      	ldrb	r3, [r3, #0]
   242da:	2b00      	cmp	r3, #0
   242dc:	d10c      	bne.n	242f8 <_extint_get_eic_from_channel+0x3c>
   242de:	4b09      	ldr	r3, [pc, #36]	; (24304 <_extint_get_eic_from_channel+0x48>)
   242e0:	60bb      	str	r3, [r7, #8]
   242e2:	230f      	movs	r3, #15
   242e4:	18fb      	adds	r3, r7, r3
   242e6:	781b      	ldrb	r3, [r3, #0]
   242e8:	009b      	lsls	r3, r3, #2
   242ea:	2210      	movs	r2, #16
   242ec:	4694      	mov	ip, r2
   242ee:	44bc      	add	ip, r7
   242f0:	4463      	add	r3, ip
   242f2:	3b08      	subs	r3, #8
   242f4:	681b      	ldr	r3, [r3, #0]
   242f6:	e000      	b.n	242fa <_extint_get_eic_from_channel+0x3e>
   242f8:	2300      	movs	r3, #0
   242fa:	0018      	movs	r0, r3
   242fc:	46bd      	mov	sp, r7
   242fe:	b004      	add	sp, #16
   24300:	bd80      	pop	{r7, pc}
   24302:	46c0      	nop			; (mov r8, r8)
   24304:	40001800 	.word	0x40001800

00024308 <extint_is_syncing>:
   24308:	b580      	push	{r7, lr}
   2430a:	b082      	sub	sp, #8
   2430c:	af00      	add	r7, sp, #0
   2430e:	4b0f      	ldr	r3, [pc, #60]	; (2434c <extint_is_syncing+0x44>)
   24310:	603b      	str	r3, [r7, #0]
   24312:	2300      	movs	r3, #0
   24314:	607b      	str	r3, [r7, #4]
   24316:	e011      	b.n	2433c <extint_is_syncing+0x34>
   24318:	687b      	ldr	r3, [r7, #4]
   2431a:	009b      	lsls	r3, r3, #2
   2431c:	2208      	movs	r2, #8
   2431e:	4694      	mov	ip, r2
   24320:	44bc      	add	ip, r7
   24322:	4463      	add	r3, ip
   24324:	3b08      	subs	r3, #8
   24326:	681b      	ldr	r3, [r3, #0]
   24328:	785b      	ldrb	r3, [r3, #1]
   2432a:	b2db      	uxtb	r3, r3
   2432c:	b25b      	sxtb	r3, r3
   2432e:	2b00      	cmp	r3, #0
   24330:	da01      	bge.n	24336 <extint_is_syncing+0x2e>
   24332:	2301      	movs	r3, #1
   24334:	e006      	b.n	24344 <extint_is_syncing+0x3c>
   24336:	687b      	ldr	r3, [r7, #4]
   24338:	3301      	adds	r3, #1
   2433a:	607b      	str	r3, [r7, #4]
   2433c:	687b      	ldr	r3, [r7, #4]
   2433e:	2b00      	cmp	r3, #0
   24340:	d0ea      	beq.n	24318 <extint_is_syncing+0x10>
   24342:	2300      	movs	r3, #0
   24344:	0018      	movs	r0, r3
   24346:	46bd      	mov	sp, r7
   24348:	b002      	add	sp, #8
   2434a:	bd80      	pop	{r7, pc}
   2434c:	40001800 	.word	0x40001800

00024350 <_system_extint_init>:
   24350:	b580      	push	{r7, lr}
   24352:	b084      	sub	sp, #16
   24354:	af00      	add	r7, sp, #0
   24356:	4b2d      	ldr	r3, [pc, #180]	; (2440c <_system_extint_init+0xbc>)
   24358:	607b      	str	r3, [r7, #4]
   2435a:	2140      	movs	r1, #64	; 0x40
   2435c:	2000      	movs	r0, #0
   2435e:	4b2c      	ldr	r3, [pc, #176]	; (24410 <_system_extint_init+0xc0>)
   24360:	4798      	blx	r3
   24362:	003b      	movs	r3, r7
   24364:	0018      	movs	r0, r3
   24366:	4b2b      	ldr	r3, [pc, #172]	; (24414 <_system_extint_init+0xc4>)
   24368:	4798      	blx	r3
   2436a:	003b      	movs	r3, r7
   2436c:	2200      	movs	r2, #0
   2436e:	701a      	strb	r2, [r3, #0]
   24370:	003b      	movs	r3, r7
   24372:	0019      	movs	r1, r3
   24374:	2005      	movs	r0, #5
   24376:	4b28      	ldr	r3, [pc, #160]	; (24418 <_system_extint_init+0xc8>)
   24378:	4798      	blx	r3
   2437a:	2005      	movs	r0, #5
   2437c:	4b27      	ldr	r3, [pc, #156]	; (2441c <_system_extint_init+0xcc>)
   2437e:	4798      	blx	r3
   24380:	2300      	movs	r3, #0
   24382:	60fb      	str	r3, [r7, #12]
   24384:	e018      	b.n	243b8 <_system_extint_init+0x68>
   24386:	68fb      	ldr	r3, [r7, #12]
   24388:	009b      	lsls	r3, r3, #2
   2438a:	2210      	movs	r2, #16
   2438c:	4694      	mov	ip, r2
   2438e:	44bc      	add	ip, r7
   24390:	4463      	add	r3, ip
   24392:	3b0c      	subs	r3, #12
   24394:	681a      	ldr	r2, [r3, #0]
   24396:	68fb      	ldr	r3, [r7, #12]
   24398:	009b      	lsls	r3, r3, #2
   2439a:	2110      	movs	r1, #16
   2439c:	468c      	mov	ip, r1
   2439e:	44bc      	add	ip, r7
   243a0:	4463      	add	r3, ip
   243a2:	3b0c      	subs	r3, #12
   243a4:	681b      	ldr	r3, [r3, #0]
   243a6:	781b      	ldrb	r3, [r3, #0]
   243a8:	b2db      	uxtb	r3, r3
   243aa:	2101      	movs	r1, #1
   243ac:	430b      	orrs	r3, r1
   243ae:	b2db      	uxtb	r3, r3
   243b0:	7013      	strb	r3, [r2, #0]
   243b2:	68fb      	ldr	r3, [r7, #12]
   243b4:	3301      	adds	r3, #1
   243b6:	60fb      	str	r3, [r7, #12]
   243b8:	68fb      	ldr	r3, [r7, #12]
   243ba:	2b00      	cmp	r3, #0
   243bc:	d0e3      	beq.n	24386 <_system_extint_init+0x36>
   243be:	46c0      	nop			; (mov r8, r8)
   243c0:	4b17      	ldr	r3, [pc, #92]	; (24420 <_system_extint_init+0xd0>)
   243c2:	4798      	blx	r3
   243c4:	1e03      	subs	r3, r0, #0
   243c6:	d1fb      	bne.n	243c0 <_system_extint_init+0x70>
   243c8:	230b      	movs	r3, #11
   243ca:	18fb      	adds	r3, r7, r3
   243cc:	2200      	movs	r2, #0
   243ce:	701a      	strb	r2, [r3, #0]
   243d0:	e00d      	b.n	243ee <_system_extint_init+0x9e>
   243d2:	230b      	movs	r3, #11
   243d4:	18fb      	adds	r3, r7, r3
   243d6:	781a      	ldrb	r2, [r3, #0]
   243d8:	4b12      	ldr	r3, [pc, #72]	; (24424 <_system_extint_init+0xd4>)
   243da:	0092      	lsls	r2, r2, #2
   243dc:	2100      	movs	r1, #0
   243de:	50d1      	str	r1, [r2, r3]
   243e0:	230b      	movs	r3, #11
   243e2:	18fb      	adds	r3, r7, r3
   243e4:	781a      	ldrb	r2, [r3, #0]
   243e6:	230b      	movs	r3, #11
   243e8:	18fb      	adds	r3, r7, r3
   243ea:	3201      	adds	r2, #1
   243ec:	701a      	strb	r2, [r3, #0]
   243ee:	230b      	movs	r3, #11
   243f0:	18fb      	adds	r3, r7, r3
   243f2:	781b      	ldrb	r3, [r3, #0]
   243f4:	2b0f      	cmp	r3, #15
   243f6:	d9ec      	bls.n	243d2 <_system_extint_init+0x82>
   243f8:	2004      	movs	r0, #4
   243fa:	4b0b      	ldr	r3, [pc, #44]	; (24428 <_system_extint_init+0xd8>)
   243fc:	4798      	blx	r3
   243fe:	4b0b      	ldr	r3, [pc, #44]	; (2442c <_system_extint_init+0xdc>)
   24400:	4798      	blx	r3
   24402:	46c0      	nop			; (mov r8, r8)
   24404:	46bd      	mov	sp, r7
   24406:	b004      	add	sp, #16
   24408:	bd80      	pop	{r7, pc}
   2440a:	46c0      	nop			; (mov r8, r8)
   2440c:	40001800 	.word	0x40001800
   24410:	0002420d 	.word	0x0002420d
   24414:	000241f5 	.word	0x000241f5
   24418:	00027a7d 	.word	0x00027a7d
   2441c:	00027ac1 	.word	0x00027ac1
   24420:	00024309 	.word	0x00024309
   24424:	20005534 	.word	0x20005534
   24428:	00024291 	.word	0x00024291
   2442c:	00024431 	.word	0x00024431

00024430 <_extint_enable>:
   24430:	b580      	push	{r7, lr}
   24432:	b082      	sub	sp, #8
   24434:	af00      	add	r7, sp, #0
   24436:	4b15      	ldr	r3, [pc, #84]	; (2448c <_extint_enable+0x5c>)
   24438:	603b      	str	r3, [r7, #0]
   2443a:	2300      	movs	r3, #0
   2443c:	607b      	str	r3, [r7, #4]
   2443e:	e018      	b.n	24472 <_extint_enable+0x42>
   24440:	687b      	ldr	r3, [r7, #4]
   24442:	009b      	lsls	r3, r3, #2
   24444:	2208      	movs	r2, #8
   24446:	4694      	mov	ip, r2
   24448:	44bc      	add	ip, r7
   2444a:	4463      	add	r3, ip
   2444c:	3b08      	subs	r3, #8
   2444e:	681a      	ldr	r2, [r3, #0]
   24450:	687b      	ldr	r3, [r7, #4]
   24452:	009b      	lsls	r3, r3, #2
   24454:	2108      	movs	r1, #8
   24456:	468c      	mov	ip, r1
   24458:	44bc      	add	ip, r7
   2445a:	4463      	add	r3, ip
   2445c:	3b08      	subs	r3, #8
   2445e:	681b      	ldr	r3, [r3, #0]
   24460:	781b      	ldrb	r3, [r3, #0]
   24462:	b2db      	uxtb	r3, r3
   24464:	2102      	movs	r1, #2
   24466:	430b      	orrs	r3, r1
   24468:	b2db      	uxtb	r3, r3
   2446a:	7013      	strb	r3, [r2, #0]
   2446c:	687b      	ldr	r3, [r7, #4]
   2446e:	3301      	adds	r3, #1
   24470:	607b      	str	r3, [r7, #4]
   24472:	687b      	ldr	r3, [r7, #4]
   24474:	2b00      	cmp	r3, #0
   24476:	d0e3      	beq.n	24440 <_extint_enable+0x10>
   24478:	46c0      	nop			; (mov r8, r8)
   2447a:	4b05      	ldr	r3, [pc, #20]	; (24490 <_extint_enable+0x60>)
   2447c:	4798      	blx	r3
   2447e:	1e03      	subs	r3, r0, #0
   24480:	d1fb      	bne.n	2447a <_extint_enable+0x4a>
   24482:	46c0      	nop			; (mov r8, r8)
   24484:	46bd      	mov	sp, r7
   24486:	b002      	add	sp, #8
   24488:	bd80      	pop	{r7, pc}
   2448a:	46c0      	nop			; (mov r8, r8)
   2448c:	40001800 	.word	0x40001800
   24490:	00024309 	.word	0x00024309

00024494 <extint_chan_get_config_defaults>:
   24494:	b580      	push	{r7, lr}
   24496:	b082      	sub	sp, #8
   24498:	af00      	add	r7, sp, #0
   2449a:	6078      	str	r0, [r7, #4]
   2449c:	687b      	ldr	r3, [r7, #4]
   2449e:	2200      	movs	r2, #0
   244a0:	601a      	str	r2, [r3, #0]
   244a2:	687b      	ldr	r3, [r7, #4]
   244a4:	2200      	movs	r2, #0
   244a6:	605a      	str	r2, [r3, #4]
   244a8:	687b      	ldr	r3, [r7, #4]
   244aa:	2201      	movs	r2, #1
   244ac:	721a      	strb	r2, [r3, #8]
   244ae:	687b      	ldr	r3, [r7, #4]
   244b0:	2201      	movs	r2, #1
   244b2:	725a      	strb	r2, [r3, #9]
   244b4:	687b      	ldr	r3, [r7, #4]
   244b6:	2200      	movs	r2, #0
   244b8:	729a      	strb	r2, [r3, #10]
   244ba:	687b      	ldr	r3, [r7, #4]
   244bc:	2202      	movs	r2, #2
   244be:	72da      	strb	r2, [r3, #11]
   244c0:	46c0      	nop			; (mov r8, r8)
   244c2:	46bd      	mov	sp, r7
   244c4:	b002      	add	sp, #8
   244c6:	bd80      	pop	{r7, pc}

000244c8 <extint_chan_set_config>:
   244c8:	b580      	push	{r7, lr}
   244ca:	b086      	sub	sp, #24
   244cc:	af00      	add	r7, sp, #0
   244ce:	0002      	movs	r2, r0
   244d0:	6039      	str	r1, [r7, #0]
   244d2:	1dfb      	adds	r3, r7, #7
   244d4:	701a      	strb	r2, [r3, #0]
   244d6:	2308      	movs	r3, #8
   244d8:	18fb      	adds	r3, r7, r3
   244da:	0018      	movs	r0, r3
   244dc:	4b36      	ldr	r3, [pc, #216]	; (245b8 <extint_chan_set_config+0xf0>)
   244de:	4798      	blx	r3
   244e0:	683b      	ldr	r3, [r7, #0]
   244e2:	685b      	ldr	r3, [r3, #4]
   244e4:	b2da      	uxtb	r2, r3
   244e6:	2308      	movs	r3, #8
   244e8:	18fb      	adds	r3, r7, r3
   244ea:	701a      	strb	r2, [r3, #0]
   244ec:	2308      	movs	r3, #8
   244ee:	18fb      	adds	r3, r7, r3
   244f0:	2200      	movs	r2, #0
   244f2:	705a      	strb	r2, [r3, #1]
   244f4:	683b      	ldr	r3, [r7, #0]
   244f6:	7a1a      	ldrb	r2, [r3, #8]
   244f8:	2308      	movs	r3, #8
   244fa:	18fb      	adds	r3, r7, r3
   244fc:	709a      	strb	r2, [r3, #2]
   244fe:	683b      	ldr	r3, [r7, #0]
   24500:	681b      	ldr	r3, [r3, #0]
   24502:	b2db      	uxtb	r3, r3
   24504:	2208      	movs	r2, #8
   24506:	18ba      	adds	r2, r7, r2
   24508:	0011      	movs	r1, r2
   2450a:	0018      	movs	r0, r3
   2450c:	4b2b      	ldr	r3, [pc, #172]	; (245bc <extint_chan_set_config+0xf4>)
   2450e:	4798      	blx	r3
   24510:	1dfb      	adds	r3, r7, #7
   24512:	781b      	ldrb	r3, [r3, #0]
   24514:	0018      	movs	r0, r3
   24516:	4b2a      	ldr	r3, [pc, #168]	; (245c0 <extint_chan_set_config+0xf8>)
   24518:	4798      	blx	r3
   2451a:	0003      	movs	r3, r0
   2451c:	613b      	str	r3, [r7, #16]
   2451e:	1dfb      	adds	r3, r7, #7
   24520:	781b      	ldrb	r3, [r3, #0]
   24522:	2207      	movs	r2, #7
   24524:	4013      	ands	r3, r2
   24526:	009b      	lsls	r3, r3, #2
   24528:	60fb      	str	r3, [r7, #12]
   2452a:	683b      	ldr	r3, [r7, #0]
   2452c:	7adb      	ldrb	r3, [r3, #11]
   2452e:	617b      	str	r3, [r7, #20]
   24530:	683b      	ldr	r3, [r7, #0]
   24532:	7a9b      	ldrb	r3, [r3, #10]
   24534:	2b00      	cmp	r3, #0
   24536:	d003      	beq.n	24540 <extint_chan_set_config+0x78>
   24538:	697b      	ldr	r3, [r7, #20]
   2453a:	2208      	movs	r2, #8
   2453c:	4313      	orrs	r3, r2
   2453e:	617b      	str	r3, [r7, #20]
   24540:	1dfb      	adds	r3, r7, #7
   24542:	781b      	ldrb	r3, [r3, #0]
   24544:	08db      	lsrs	r3, r3, #3
   24546:	b2db      	uxtb	r3, r3
   24548:	0018      	movs	r0, r3
   2454a:	1dfb      	adds	r3, r7, #7
   2454c:	781b      	ldrb	r3, [r3, #0]
   2454e:	08db      	lsrs	r3, r3, #3
   24550:	b2db      	uxtb	r3, r3
   24552:	001a      	movs	r2, r3
   24554:	693b      	ldr	r3, [r7, #16]
   24556:	3206      	adds	r2, #6
   24558:	0092      	lsls	r2, r2, #2
   2455a:	58d3      	ldr	r3, [r2, r3]
   2455c:	210f      	movs	r1, #15
   2455e:	68fa      	ldr	r2, [r7, #12]
   24560:	4091      	lsls	r1, r2
   24562:	000a      	movs	r2, r1
   24564:	43d2      	mvns	r2, r2
   24566:	401a      	ands	r2, r3
   24568:	6979      	ldr	r1, [r7, #20]
   2456a:	68fb      	ldr	r3, [r7, #12]
   2456c:	4099      	lsls	r1, r3
   2456e:	000b      	movs	r3, r1
   24570:	431a      	orrs	r2, r3
   24572:	0011      	movs	r1, r2
   24574:	693b      	ldr	r3, [r7, #16]
   24576:	1d82      	adds	r2, r0, #6
   24578:	0092      	lsls	r2, r2, #2
   2457a:	50d1      	str	r1, [r2, r3]
   2457c:	683b      	ldr	r3, [r7, #0]
   2457e:	7a5b      	ldrb	r3, [r3, #9]
   24580:	2b00      	cmp	r3, #0
   24582:	d00a      	beq.n	2459a <extint_chan_set_config+0xd2>
   24584:	693b      	ldr	r3, [r7, #16]
   24586:	695a      	ldr	r2, [r3, #20]
   24588:	1dfb      	adds	r3, r7, #7
   2458a:	781b      	ldrb	r3, [r3, #0]
   2458c:	2101      	movs	r1, #1
   2458e:	4099      	lsls	r1, r3
   24590:	000b      	movs	r3, r1
   24592:	431a      	orrs	r2, r3
   24594:	693b      	ldr	r3, [r7, #16]
   24596:	615a      	str	r2, [r3, #20]
   24598:	e00a      	b.n	245b0 <extint_chan_set_config+0xe8>
   2459a:	693b      	ldr	r3, [r7, #16]
   2459c:	695b      	ldr	r3, [r3, #20]
   2459e:	1dfa      	adds	r2, r7, #7
   245a0:	7812      	ldrb	r2, [r2, #0]
   245a2:	2101      	movs	r1, #1
   245a4:	4091      	lsls	r1, r2
   245a6:	000a      	movs	r2, r1
   245a8:	43d2      	mvns	r2, r2
   245aa:	401a      	ands	r2, r3
   245ac:	693b      	ldr	r3, [r7, #16]
   245ae:	615a      	str	r2, [r3, #20]
   245b0:	46c0      	nop			; (mov r8, r8)
   245b2:	46bd      	mov	sp, r7
   245b4:	b006      	add	sp, #24
   245b6:	bd80      	pop	{r7, pc}
   245b8:	00024269 	.word	0x00024269
   245bc:	00027ddd 	.word	0x00027ddd
   245c0:	000242bd 	.word	0x000242bd

000245c4 <system_pinmux_get_config_defaults>:
   245c4:	b580      	push	{r7, lr}
   245c6:	b082      	sub	sp, #8
   245c8:	af00      	add	r7, sp, #0
   245ca:	6078      	str	r0, [r7, #4]
   245cc:	687b      	ldr	r3, [r7, #4]
   245ce:	2280      	movs	r2, #128	; 0x80
   245d0:	701a      	strb	r2, [r3, #0]
   245d2:	687b      	ldr	r3, [r7, #4]
   245d4:	2200      	movs	r2, #0
   245d6:	705a      	strb	r2, [r3, #1]
   245d8:	687b      	ldr	r3, [r7, #4]
   245da:	2201      	movs	r2, #1
   245dc:	709a      	strb	r2, [r3, #2]
   245de:	687b      	ldr	r3, [r7, #4]
   245e0:	2200      	movs	r2, #0
   245e2:	70da      	strb	r2, [r3, #3]
   245e4:	46c0      	nop			; (mov r8, r8)
   245e6:	46bd      	mov	sp, r7
   245e8:	b002      	add	sp, #8
   245ea:	bd80      	pop	{r7, pc}

000245ec <port_pin_set_config>:
   245ec:	b580      	push	{r7, lr}
   245ee:	b084      	sub	sp, #16
   245f0:	af00      	add	r7, sp, #0
   245f2:	0002      	movs	r2, r0
   245f4:	6039      	str	r1, [r7, #0]
   245f6:	1dfb      	adds	r3, r7, #7
   245f8:	701a      	strb	r2, [r3, #0]
   245fa:	230c      	movs	r3, #12
   245fc:	18fb      	adds	r3, r7, r3
   245fe:	0018      	movs	r0, r3
   24600:	4b10      	ldr	r3, [pc, #64]	; (24644 <port_pin_set_config+0x58>)
   24602:	4798      	blx	r3
   24604:	230c      	movs	r3, #12
   24606:	18fb      	adds	r3, r7, r3
   24608:	2280      	movs	r2, #128	; 0x80
   2460a:	701a      	strb	r2, [r3, #0]
   2460c:	683b      	ldr	r3, [r7, #0]
   2460e:	781a      	ldrb	r2, [r3, #0]
   24610:	230c      	movs	r3, #12
   24612:	18fb      	adds	r3, r7, r3
   24614:	705a      	strb	r2, [r3, #1]
   24616:	683b      	ldr	r3, [r7, #0]
   24618:	785a      	ldrb	r2, [r3, #1]
   2461a:	230c      	movs	r3, #12
   2461c:	18fb      	adds	r3, r7, r3
   2461e:	709a      	strb	r2, [r3, #2]
   24620:	683b      	ldr	r3, [r7, #0]
   24622:	789a      	ldrb	r2, [r3, #2]
   24624:	230c      	movs	r3, #12
   24626:	18fb      	adds	r3, r7, r3
   24628:	70da      	strb	r2, [r3, #3]
   2462a:	230c      	movs	r3, #12
   2462c:	18fa      	adds	r2, r7, r3
   2462e:	1dfb      	adds	r3, r7, #7
   24630:	781b      	ldrb	r3, [r3, #0]
   24632:	0011      	movs	r1, r2
   24634:	0018      	movs	r0, r3
   24636:	4b04      	ldr	r3, [pc, #16]	; (24648 <port_pin_set_config+0x5c>)
   24638:	4798      	blx	r3
   2463a:	46c0      	nop			; (mov r8, r8)
   2463c:	46bd      	mov	sp, r7
   2463e:	b004      	add	sp, #16
   24640:	bd80      	pop	{r7, pc}
   24642:	46c0      	nop			; (mov r8, r8)
   24644:	000245c5 	.word	0x000245c5
   24648:	00027ddd 	.word	0x00027ddd

0002464c <system_gclk_chan_get_config_defaults>:
   2464c:	b580      	push	{r7, lr}
   2464e:	b082      	sub	sp, #8
   24650:	af00      	add	r7, sp, #0
   24652:	6078      	str	r0, [r7, #4]
   24654:	687b      	ldr	r3, [r7, #4]
   24656:	2200      	movs	r2, #0
   24658:	701a      	strb	r2, [r3, #0]
   2465a:	46c0      	nop			; (mov r8, r8)
   2465c:	46bd      	mov	sp, r7
   2465e:	b002      	add	sp, #8
   24660:	bd80      	pop	{r7, pc}
	...

00024664 <system_apb_clock_set_mask>:
   24664:	b580      	push	{r7, lr}
   24666:	b082      	sub	sp, #8
   24668:	af00      	add	r7, sp, #0
   2466a:	0002      	movs	r2, r0
   2466c:	6039      	str	r1, [r7, #0]
   2466e:	1dfb      	adds	r3, r7, #7
   24670:	701a      	strb	r2, [r3, #0]
   24672:	1dfb      	adds	r3, r7, #7
   24674:	781b      	ldrb	r3, [r3, #0]
   24676:	2b01      	cmp	r3, #1
   24678:	d00a      	beq.n	24690 <system_apb_clock_set_mask+0x2c>
   2467a:	2b02      	cmp	r3, #2
   2467c:	d00f      	beq.n	2469e <system_apb_clock_set_mask+0x3a>
   2467e:	2b00      	cmp	r3, #0
   24680:	d114      	bne.n	246ac <system_apb_clock_set_mask+0x48>
   24682:	4b0e      	ldr	r3, [pc, #56]	; (246bc <system_apb_clock_set_mask+0x58>)
   24684:	4a0d      	ldr	r2, [pc, #52]	; (246bc <system_apb_clock_set_mask+0x58>)
   24686:	6991      	ldr	r1, [r2, #24]
   24688:	683a      	ldr	r2, [r7, #0]
   2468a:	430a      	orrs	r2, r1
   2468c:	619a      	str	r2, [r3, #24]
   2468e:	e00f      	b.n	246b0 <system_apb_clock_set_mask+0x4c>
   24690:	4b0a      	ldr	r3, [pc, #40]	; (246bc <system_apb_clock_set_mask+0x58>)
   24692:	4a0a      	ldr	r2, [pc, #40]	; (246bc <system_apb_clock_set_mask+0x58>)
   24694:	69d1      	ldr	r1, [r2, #28]
   24696:	683a      	ldr	r2, [r7, #0]
   24698:	430a      	orrs	r2, r1
   2469a:	61da      	str	r2, [r3, #28]
   2469c:	e008      	b.n	246b0 <system_apb_clock_set_mask+0x4c>
   2469e:	4b07      	ldr	r3, [pc, #28]	; (246bc <system_apb_clock_set_mask+0x58>)
   246a0:	4a06      	ldr	r2, [pc, #24]	; (246bc <system_apb_clock_set_mask+0x58>)
   246a2:	6a11      	ldr	r1, [r2, #32]
   246a4:	683a      	ldr	r2, [r7, #0]
   246a6:	430a      	orrs	r2, r1
   246a8:	621a      	str	r2, [r3, #32]
   246aa:	e001      	b.n	246b0 <system_apb_clock_set_mask+0x4c>
   246ac:	2317      	movs	r3, #23
   246ae:	e000      	b.n	246b2 <system_apb_clock_set_mask+0x4e>
   246b0:	2300      	movs	r3, #0
   246b2:	0018      	movs	r0, r3
   246b4:	46bd      	mov	sp, r7
   246b6:	b002      	add	sp, #8
   246b8:	bd80      	pop	{r7, pc}
   246ba:	46c0      	nop			; (mov r8, r8)
   246bc:	40000400 	.word	0x40000400

000246c0 <system_interrupt_enable>:
   246c0:	b580      	push	{r7, lr}
   246c2:	b082      	sub	sp, #8
   246c4:	af00      	add	r7, sp, #0
   246c6:	0002      	movs	r2, r0
   246c8:	1dfb      	adds	r3, r7, #7
   246ca:	701a      	strb	r2, [r3, #0]
   246cc:	4b06      	ldr	r3, [pc, #24]	; (246e8 <system_interrupt_enable+0x28>)
   246ce:	1dfa      	adds	r2, r7, #7
   246d0:	7812      	ldrb	r2, [r2, #0]
   246d2:	0011      	movs	r1, r2
   246d4:	221f      	movs	r2, #31
   246d6:	400a      	ands	r2, r1
   246d8:	2101      	movs	r1, #1
   246da:	4091      	lsls	r1, r2
   246dc:	000a      	movs	r2, r1
   246de:	601a      	str	r2, [r3, #0]
   246e0:	46c0      	nop			; (mov r8, r8)
   246e2:	46bd      	mov	sp, r7
   246e4:	b002      	add	sp, #8
   246e6:	bd80      	pop	{r7, pc}
   246e8:	e000e100 	.word	0xe000e100

000246ec <system_interrupt_disable>:
   246ec:	b580      	push	{r7, lr}
   246ee:	b082      	sub	sp, #8
   246f0:	af00      	add	r7, sp, #0
   246f2:	0002      	movs	r2, r0
   246f4:	1dfb      	adds	r3, r7, #7
   246f6:	701a      	strb	r2, [r3, #0]
   246f8:	4a07      	ldr	r2, [pc, #28]	; (24718 <system_interrupt_disable+0x2c>)
   246fa:	1dfb      	adds	r3, r7, #7
   246fc:	781b      	ldrb	r3, [r3, #0]
   246fe:	0019      	movs	r1, r3
   24700:	231f      	movs	r3, #31
   24702:	400b      	ands	r3, r1
   24704:	2101      	movs	r1, #1
   24706:	4099      	lsls	r1, r3
   24708:	000b      	movs	r3, r1
   2470a:	0019      	movs	r1, r3
   2470c:	2380      	movs	r3, #128	; 0x80
   2470e:	50d1      	str	r1, [r2, r3]
   24710:	46c0      	nop			; (mov r8, r8)
   24712:	46bd      	mov	sp, r7
   24714:	b002      	add	sp, #8
   24716:	bd80      	pop	{r7, pc}
   24718:	e000e100 	.word	0xe000e100

0002471c <rtc_calendar_is_syncing>:
   2471c:	b580      	push	{r7, lr}
   2471e:	b084      	sub	sp, #16
   24720:	af00      	add	r7, sp, #0
   24722:	6078      	str	r0, [r7, #4]
   24724:	687b      	ldr	r3, [r7, #4]
   24726:	681b      	ldr	r3, [r3, #0]
   24728:	60fb      	str	r3, [r7, #12]
   2472a:	68fb      	ldr	r3, [r7, #12]
   2472c:	7a9b      	ldrb	r3, [r3, #10]
   2472e:	b2db      	uxtb	r3, r3
   24730:	b25b      	sxtb	r3, r3
   24732:	2b00      	cmp	r3, #0
   24734:	da01      	bge.n	2473a <rtc_calendar_is_syncing+0x1e>
   24736:	2301      	movs	r3, #1
   24738:	e000      	b.n	2473c <rtc_calendar_is_syncing+0x20>
   2473a:	2300      	movs	r3, #0
   2473c:	0018      	movs	r0, r3
   2473e:	46bd      	mov	sp, r7
   24740:	b004      	add	sp, #16
   24742:	bd80      	pop	{r7, pc}

00024744 <rtc_calendar_enable>:
   24744:	b580      	push	{r7, lr}
   24746:	b084      	sub	sp, #16
   24748:	af00      	add	r7, sp, #0
   2474a:	6078      	str	r0, [r7, #4]
   2474c:	687b      	ldr	r3, [r7, #4]
   2474e:	681b      	ldr	r3, [r3, #0]
   24750:	60fb      	str	r3, [r7, #12]
   24752:	2003      	movs	r0, #3
   24754:	4b0a      	ldr	r3, [pc, #40]	; (24780 <rtc_calendar_enable+0x3c>)
   24756:	4798      	blx	r3
   24758:	46c0      	nop			; (mov r8, r8)
   2475a:	687b      	ldr	r3, [r7, #4]
   2475c:	0018      	movs	r0, r3
   2475e:	4b09      	ldr	r3, [pc, #36]	; (24784 <rtc_calendar_enable+0x40>)
   24760:	4798      	blx	r3
   24762:	1e03      	subs	r3, r0, #0
   24764:	d1f9      	bne.n	2475a <rtc_calendar_enable+0x16>
   24766:	68fb      	ldr	r3, [r7, #12]
   24768:	881b      	ldrh	r3, [r3, #0]
   2476a:	b29b      	uxth	r3, r3
   2476c:	2202      	movs	r2, #2
   2476e:	4313      	orrs	r3, r2
   24770:	b29a      	uxth	r2, r3
   24772:	68fb      	ldr	r3, [r7, #12]
   24774:	801a      	strh	r2, [r3, #0]
   24776:	46c0      	nop			; (mov r8, r8)
   24778:	46bd      	mov	sp, r7
   2477a:	b004      	add	sp, #16
   2477c:	bd80      	pop	{r7, pc}
   2477e:	46c0      	nop			; (mov r8, r8)
   24780:	000246c1 	.word	0x000246c1
   24784:	0002471d 	.word	0x0002471d

00024788 <rtc_calendar_disable>:
   24788:	b580      	push	{r7, lr}
   2478a:	b084      	sub	sp, #16
   2478c:	af00      	add	r7, sp, #0
   2478e:	6078      	str	r0, [r7, #4]
   24790:	687b      	ldr	r3, [r7, #4]
   24792:	681b      	ldr	r3, [r3, #0]
   24794:	60fb      	str	r3, [r7, #12]
   24796:	2003      	movs	r0, #3
   24798:	4b0d      	ldr	r3, [pc, #52]	; (247d0 <rtc_calendar_disable+0x48>)
   2479a:	4798      	blx	r3
   2479c:	46c0      	nop			; (mov r8, r8)
   2479e:	687b      	ldr	r3, [r7, #4]
   247a0:	0018      	movs	r0, r3
   247a2:	4b0c      	ldr	r3, [pc, #48]	; (247d4 <rtc_calendar_disable+0x4c>)
   247a4:	4798      	blx	r3
   247a6:	1e03      	subs	r3, r0, #0
   247a8:	d1f9      	bne.n	2479e <rtc_calendar_disable+0x16>
   247aa:	68fb      	ldr	r3, [r7, #12]
   247ac:	22c1      	movs	r2, #193	; 0xc1
   247ae:	719a      	strb	r2, [r3, #6]
   247b0:	68fb      	ldr	r3, [r7, #12]
   247b2:	22c1      	movs	r2, #193	; 0xc1
   247b4:	721a      	strb	r2, [r3, #8]
   247b6:	68fb      	ldr	r3, [r7, #12]
   247b8:	881b      	ldrh	r3, [r3, #0]
   247ba:	b29b      	uxth	r3, r3
   247bc:	2202      	movs	r2, #2
   247be:	4393      	bics	r3, r2
   247c0:	b29a      	uxth	r2, r3
   247c2:	68fb      	ldr	r3, [r7, #12]
   247c4:	801a      	strh	r2, [r3, #0]
   247c6:	46c0      	nop			; (mov r8, r8)
   247c8:	46bd      	mov	sp, r7
   247ca:	b004      	add	sp, #16
   247cc:	bd80      	pop	{r7, pc}
   247ce:	46c0      	nop			; (mov r8, r8)
   247d0:	000246ed 	.word	0x000246ed
   247d4:	0002471d 	.word	0x0002471d

000247d8 <rtc_calendar_reset>:
   247d8:	b580      	push	{r7, lr}
   247da:	b084      	sub	sp, #16
   247dc:	af00      	add	r7, sp, #0
   247de:	6078      	str	r0, [r7, #4]
   247e0:	687b      	ldr	r3, [r7, #4]
   247e2:	681b      	ldr	r3, [r3, #0]
   247e4:	60fb      	str	r3, [r7, #12]
   247e6:	687b      	ldr	r3, [r7, #4]
   247e8:	0018      	movs	r0, r3
   247ea:	4b0d      	ldr	r3, [pc, #52]	; (24820 <rtc_calendar_reset+0x48>)
   247ec:	4798      	blx	r3
   247ee:	687b      	ldr	r3, [r7, #4]
   247f0:	2200      	movs	r2, #0
   247f2:	821a      	strh	r2, [r3, #16]
   247f4:	687b      	ldr	r3, [r7, #4]
   247f6:	2200      	movs	r2, #0
   247f8:	825a      	strh	r2, [r3, #18]
   247fa:	46c0      	nop			; (mov r8, r8)
   247fc:	687b      	ldr	r3, [r7, #4]
   247fe:	0018      	movs	r0, r3
   24800:	4b08      	ldr	r3, [pc, #32]	; (24824 <rtc_calendar_reset+0x4c>)
   24802:	4798      	blx	r3
   24804:	1e03      	subs	r3, r0, #0
   24806:	d1f9      	bne.n	247fc <rtc_calendar_reset+0x24>
   24808:	68fb      	ldr	r3, [r7, #12]
   2480a:	881b      	ldrh	r3, [r3, #0]
   2480c:	b29b      	uxth	r3, r3
   2480e:	2201      	movs	r2, #1
   24810:	4313      	orrs	r3, r2
   24812:	b29a      	uxth	r2, r3
   24814:	68fb      	ldr	r3, [r7, #12]
   24816:	801a      	strh	r2, [r3, #0]
   24818:	46c0      	nop			; (mov r8, r8)
   2481a:	46bd      	mov	sp, r7
   2481c:	b004      	add	sp, #16
   2481e:	bd80      	pop	{r7, pc}
   24820:	00024789 	.word	0x00024789
   24824:	0002471d 	.word	0x0002471d

00024828 <rtc_calendar_time_to_register_value>:
   24828:	b580      	push	{r7, lr}
   2482a:	b084      	sub	sp, #16
   2482c:	af00      	add	r7, sp, #0
   2482e:	6078      	str	r0, [r7, #4]
   24830:	6039      	str	r1, [r7, #0]
   24832:	683b      	ldr	r3, [r7, #0]
   24834:	88db      	ldrh	r3, [r3, #6]
   24836:	001a      	movs	r2, r3
   24838:	687b      	ldr	r3, [r7, #4]
   2483a:	88db      	ldrh	r3, [r3, #6]
   2483c:	1ad3      	subs	r3, r2, r3
   2483e:	069b      	lsls	r3, r3, #26
   24840:	60fb      	str	r3, [r7, #12]
   24842:	683b      	ldr	r3, [r7, #0]
   24844:	795b      	ldrb	r3, [r3, #5]
   24846:	059b      	lsls	r3, r3, #22
   24848:	001a      	movs	r2, r3
   2484a:	68fb      	ldr	r3, [r7, #12]
   2484c:	4313      	orrs	r3, r2
   2484e:	60fb      	str	r3, [r7, #12]
   24850:	683b      	ldr	r3, [r7, #0]
   24852:	791b      	ldrb	r3, [r3, #4]
   24854:	045b      	lsls	r3, r3, #17
   24856:	001a      	movs	r2, r3
   24858:	68fb      	ldr	r3, [r7, #12]
   2485a:	4313      	orrs	r3, r2
   2485c:	60fb      	str	r3, [r7, #12]
   2485e:	683b      	ldr	r3, [r7, #0]
   24860:	789b      	ldrb	r3, [r3, #2]
   24862:	031b      	lsls	r3, r3, #12
   24864:	001a      	movs	r2, r3
   24866:	68fb      	ldr	r3, [r7, #12]
   24868:	4313      	orrs	r3, r2
   2486a:	60fb      	str	r3, [r7, #12]
   2486c:	687b      	ldr	r3, [r7, #4]
   2486e:	791b      	ldrb	r3, [r3, #4]
   24870:	2201      	movs	r2, #1
   24872:	4053      	eors	r3, r2
   24874:	b2db      	uxtb	r3, r3
   24876:	2b00      	cmp	r3, #0
   24878:	d008      	beq.n	2488c <rtc_calendar_time_to_register_value+0x64>
   2487a:	683b      	ldr	r3, [r7, #0]
   2487c:	78db      	ldrb	r3, [r3, #3]
   2487e:	2b00      	cmp	r3, #0
   24880:	d004      	beq.n	2488c <rtc_calendar_time_to_register_value+0x64>
   24882:	68fb      	ldr	r3, [r7, #12]
   24884:	2280      	movs	r2, #128	; 0x80
   24886:	0252      	lsls	r2, r2, #9
   24888:	4313      	orrs	r3, r2
   2488a:	60fb      	str	r3, [r7, #12]
   2488c:	683b      	ldr	r3, [r7, #0]
   2488e:	785b      	ldrb	r3, [r3, #1]
   24890:	019b      	lsls	r3, r3, #6
   24892:	001a      	movs	r2, r3
   24894:	68fb      	ldr	r3, [r7, #12]
   24896:	4313      	orrs	r3, r2
   24898:	60fb      	str	r3, [r7, #12]
   2489a:	683b      	ldr	r3, [r7, #0]
   2489c:	781b      	ldrb	r3, [r3, #0]
   2489e:	001a      	movs	r2, r3
   248a0:	68fb      	ldr	r3, [r7, #12]
   248a2:	4313      	orrs	r3, r2
   248a4:	60fb      	str	r3, [r7, #12]
   248a6:	68fb      	ldr	r3, [r7, #12]
   248a8:	0018      	movs	r0, r3
   248aa:	46bd      	mov	sp, r7
   248ac:	b004      	add	sp, #16
   248ae:	bd80      	pop	{r7, pc}

000248b0 <rtc_calendar_register_value_to_time>:
   248b0:	b580      	push	{r7, lr}
   248b2:	b084      	sub	sp, #16
   248b4:	af00      	add	r7, sp, #0
   248b6:	60f8      	str	r0, [r7, #12]
   248b8:	60b9      	str	r1, [r7, #8]
   248ba:	607a      	str	r2, [r7, #4]
   248bc:	68bb      	ldr	r3, [r7, #8]
   248be:	0e9b      	lsrs	r3, r3, #26
   248c0:	b29a      	uxth	r2, r3
   248c2:	68fb      	ldr	r3, [r7, #12]
   248c4:	88db      	ldrh	r3, [r3, #6]
   248c6:	18d3      	adds	r3, r2, r3
   248c8:	b29a      	uxth	r2, r3
   248ca:	687b      	ldr	r3, [r7, #4]
   248cc:	80da      	strh	r2, [r3, #6]
   248ce:	68bb      	ldr	r3, [r7, #8]
   248d0:	0d9b      	lsrs	r3, r3, #22
   248d2:	b2db      	uxtb	r3, r3
   248d4:	220f      	movs	r2, #15
   248d6:	4013      	ands	r3, r2
   248d8:	b2da      	uxtb	r2, r3
   248da:	687b      	ldr	r3, [r7, #4]
   248dc:	715a      	strb	r2, [r3, #5]
   248de:	68bb      	ldr	r3, [r7, #8]
   248e0:	0c5b      	lsrs	r3, r3, #17
   248e2:	b2db      	uxtb	r3, r3
   248e4:	221f      	movs	r2, #31
   248e6:	4013      	ands	r3, r2
   248e8:	b2da      	uxtb	r2, r3
   248ea:	687b      	ldr	r3, [r7, #4]
   248ec:	711a      	strb	r2, [r3, #4]
   248ee:	68fb      	ldr	r3, [r7, #12]
   248f0:	791b      	ldrb	r3, [r3, #4]
   248f2:	2b00      	cmp	r3, #0
   248f4:	d008      	beq.n	24908 <rtc_calendar_register_value_to_time+0x58>
   248f6:	68bb      	ldr	r3, [r7, #8]
   248f8:	0b1b      	lsrs	r3, r3, #12
   248fa:	b2db      	uxtb	r3, r3
   248fc:	221f      	movs	r2, #31
   248fe:	4013      	ands	r3, r2
   24900:	b2da      	uxtb	r2, r3
   24902:	687b      	ldr	r3, [r7, #4]
   24904:	709a      	strb	r2, [r3, #2]
   24906:	e010      	b.n	2492a <rtc_calendar_register_value_to_time+0x7a>
   24908:	68bb      	ldr	r3, [r7, #8]
   2490a:	0b1b      	lsrs	r3, r3, #12
   2490c:	b2db      	uxtb	r3, r3
   2490e:	220f      	movs	r2, #15
   24910:	4013      	ands	r3, r2
   24912:	b2da      	uxtb	r2, r3
   24914:	687b      	ldr	r3, [r7, #4]
   24916:	709a      	strb	r2, [r3, #2]
   24918:	68ba      	ldr	r2, [r7, #8]
   2491a:	2380      	movs	r3, #128	; 0x80
   2491c:	025b      	lsls	r3, r3, #9
   2491e:	4013      	ands	r3, r2
   24920:	1e5a      	subs	r2, r3, #1
   24922:	4193      	sbcs	r3, r2
   24924:	b2da      	uxtb	r2, r3
   24926:	687b      	ldr	r3, [r7, #4]
   24928:	70da      	strb	r2, [r3, #3]
   2492a:	68bb      	ldr	r3, [r7, #8]
   2492c:	099b      	lsrs	r3, r3, #6
   2492e:	b2db      	uxtb	r3, r3
   24930:	223f      	movs	r2, #63	; 0x3f
   24932:	4013      	ands	r3, r2
   24934:	b2da      	uxtb	r2, r3
   24936:	687b      	ldr	r3, [r7, #4]
   24938:	705a      	strb	r2, [r3, #1]
   2493a:	68bb      	ldr	r3, [r7, #8]
   2493c:	b2db      	uxtb	r3, r3
   2493e:	223f      	movs	r2, #63	; 0x3f
   24940:	4013      	ands	r3, r2
   24942:	b2da      	uxtb	r2, r3
   24944:	687b      	ldr	r3, [r7, #4]
   24946:	701a      	strb	r2, [r3, #0]
   24948:	46c0      	nop			; (mov r8, r8)
   2494a:	46bd      	mov	sp, r7
   2494c:	b004      	add	sp, #16
   2494e:	bd80      	pop	{r7, pc}

00024950 <_rtc_calendar_set_config>:
   24950:	b580      	push	{r7, lr}
   24952:	b084      	sub	sp, #16
   24954:	af00      	add	r7, sp, #0
   24956:	6078      	str	r0, [r7, #4]
   24958:	6039      	str	r1, [r7, #0]
   2495a:	687b      	ldr	r3, [r7, #4]
   2495c:	681b      	ldr	r3, [r3, #0]
   2495e:	60bb      	str	r3, [r7, #8]
   24960:	683b      	ldr	r3, [r7, #0]
   24962:	881a      	ldrh	r2, [r3, #0]
   24964:	230e      	movs	r3, #14
   24966:	18fb      	adds	r3, r7, r3
   24968:	2108      	movs	r1, #8
   2496a:	430a      	orrs	r2, r1
   2496c:	801a      	strh	r2, [r3, #0]
   2496e:	683b      	ldr	r3, [r7, #0]
   24970:	791b      	ldrb	r3, [r3, #4]
   24972:	2201      	movs	r2, #1
   24974:	4053      	eors	r3, r2
   24976:	b2db      	uxtb	r3, r3
   24978:	2b00      	cmp	r3, #0
   2497a:	d007      	beq.n	2498c <_rtc_calendar_set_config+0x3c>
   2497c:	230e      	movs	r3, #14
   2497e:	18fb      	adds	r3, r7, r3
   24980:	220e      	movs	r2, #14
   24982:	18ba      	adds	r2, r7, r2
   24984:	8812      	ldrh	r2, [r2, #0]
   24986:	2140      	movs	r1, #64	; 0x40
   24988:	430a      	orrs	r2, r1
   2498a:	801a      	strh	r2, [r3, #0]
   2498c:	683b      	ldr	r3, [r7, #0]
   2498e:	789b      	ldrb	r3, [r3, #2]
   24990:	2b00      	cmp	r3, #0
   24992:	d007      	beq.n	249a4 <_rtc_calendar_set_config+0x54>
   24994:	230e      	movs	r3, #14
   24996:	18fb      	adds	r3, r7, r3
   24998:	220e      	movs	r2, #14
   2499a:	18ba      	adds	r2, r7, r2
   2499c:	8812      	ldrh	r2, [r2, #0]
   2499e:	2180      	movs	r1, #128	; 0x80
   249a0:	430a      	orrs	r2, r1
   249a2:	801a      	strh	r2, [r3, #0]
   249a4:	68bb      	ldr	r3, [r7, #8]
   249a6:	220e      	movs	r2, #14
   249a8:	18ba      	adds	r2, r7, r2
   249aa:	8812      	ldrh	r2, [r2, #0]
   249ac:	801a      	strh	r2, [r3, #0]
   249ae:	683b      	ldr	r3, [r7, #0]
   249b0:	78db      	ldrb	r3, [r3, #3]
   249b2:	2b00      	cmp	r3, #0
   249b4:	d008      	beq.n	249c8 <_rtc_calendar_set_config+0x78>
   249b6:	68bb      	ldr	r3, [r7, #8]
   249b8:	885b      	ldrh	r3, [r3, #2]
   249ba:	b29b      	uxth	r3, r3
   249bc:	2280      	movs	r2, #128	; 0x80
   249be:	01d2      	lsls	r2, r2, #7
   249c0:	4313      	orrs	r3, r2
   249c2:	b29a      	uxth	r2, r3
   249c4:	68bb      	ldr	r3, [r7, #8]
   249c6:	805a      	strh	r2, [r3, #2]
   249c8:	230d      	movs	r3, #13
   249ca:	18fb      	adds	r3, r7, r3
   249cc:	2200      	movs	r2, #0
   249ce:	701a      	strb	r2, [r3, #0]
   249d0:	e017      	b.n	24a02 <_rtc_calendar_set_config+0xb2>
   249d2:	230d      	movs	r3, #13
   249d4:	18fb      	adds	r3, r7, r3
   249d6:	781a      	ldrb	r2, [r3, #0]
   249d8:	0013      	movs	r3, r2
   249da:	009b      	lsls	r3, r3, #2
   249dc:	189b      	adds	r3, r3, r2
   249de:	005b      	lsls	r3, r3, #1
   249e0:	3308      	adds	r3, #8
   249e2:	683a      	ldr	r2, [r7, #0]
   249e4:	18d1      	adds	r1, r2, r3
   249e6:	230d      	movs	r3, #13
   249e8:	18fb      	adds	r3, r7, r3
   249ea:	781a      	ldrb	r2, [r3, #0]
   249ec:	687b      	ldr	r3, [r7, #4]
   249ee:	0018      	movs	r0, r3
   249f0:	4b08      	ldr	r3, [pc, #32]	; (24a14 <_rtc_calendar_set_config+0xc4>)
   249f2:	4798      	blx	r3
   249f4:	230d      	movs	r3, #13
   249f6:	18fb      	adds	r3, r7, r3
   249f8:	781a      	ldrb	r2, [r3, #0]
   249fa:	230d      	movs	r3, #13
   249fc:	18fb      	adds	r3, r7, r3
   249fe:	3201      	adds	r2, #1
   24a00:	701a      	strb	r2, [r3, #0]
   24a02:	230d      	movs	r3, #13
   24a04:	18fb      	adds	r3, r7, r3
   24a06:	781b      	ldrb	r3, [r3, #0]
   24a08:	2b00      	cmp	r3, #0
   24a0a:	d0e2      	beq.n	249d2 <_rtc_calendar_set_config+0x82>
   24a0c:	46c0      	nop			; (mov r8, r8)
   24a0e:	46bd      	mov	sp, r7
   24a10:	b004      	add	sp, #16
   24a12:	bd80      	pop	{r7, pc}
   24a14:	00024b39 	.word	0x00024b39

00024a18 <rtc_calendar_init>:
   24a18:	b580      	push	{r7, lr}
   24a1a:	b086      	sub	sp, #24
   24a1c:	af00      	add	r7, sp, #0
   24a1e:	60f8      	str	r0, [r7, #12]
   24a20:	60b9      	str	r1, [r7, #8]
   24a22:	607a      	str	r2, [r7, #4]
   24a24:	68fb      	ldr	r3, [r7, #12]
   24a26:	68ba      	ldr	r2, [r7, #8]
   24a28:	601a      	str	r2, [r3, #0]
   24a2a:	2120      	movs	r1, #32
   24a2c:	2000      	movs	r0, #0
   24a2e:	4b18      	ldr	r3, [pc, #96]	; (24a90 <rtc_calendar_init+0x78>)
   24a30:	4798      	blx	r3
   24a32:	2314      	movs	r3, #20
   24a34:	18fb      	adds	r3, r7, r3
   24a36:	0018      	movs	r0, r3
   24a38:	4b16      	ldr	r3, [pc, #88]	; (24a94 <rtc_calendar_init+0x7c>)
   24a3a:	4798      	blx	r3
   24a3c:	2314      	movs	r3, #20
   24a3e:	18fb      	adds	r3, r7, r3
   24a40:	2202      	movs	r2, #2
   24a42:	701a      	strb	r2, [r3, #0]
   24a44:	2314      	movs	r3, #20
   24a46:	18fb      	adds	r3, r7, r3
   24a48:	0019      	movs	r1, r3
   24a4a:	2004      	movs	r0, #4
   24a4c:	4b12      	ldr	r3, [pc, #72]	; (24a98 <rtc_calendar_init+0x80>)
   24a4e:	4798      	blx	r3
   24a50:	2004      	movs	r0, #4
   24a52:	4b12      	ldr	r3, [pc, #72]	; (24a9c <rtc_calendar_init+0x84>)
   24a54:	4798      	blx	r3
   24a56:	68fb      	ldr	r3, [r7, #12]
   24a58:	0018      	movs	r0, r3
   24a5a:	4b11      	ldr	r3, [pc, #68]	; (24aa0 <rtc_calendar_init+0x88>)
   24a5c:	4798      	blx	r3
   24a5e:	687b      	ldr	r3, [r7, #4]
   24a60:	791a      	ldrb	r2, [r3, #4]
   24a62:	68fb      	ldr	r3, [r7, #12]
   24a64:	711a      	strb	r2, [r3, #4]
   24a66:	687b      	ldr	r3, [r7, #4]
   24a68:	78da      	ldrb	r2, [r3, #3]
   24a6a:	68fb      	ldr	r3, [r7, #12]
   24a6c:	715a      	strb	r2, [r3, #5]
   24a6e:	687b      	ldr	r3, [r7, #4]
   24a70:	88da      	ldrh	r2, [r3, #6]
   24a72:	68fb      	ldr	r3, [r7, #12]
   24a74:	80da      	strh	r2, [r3, #6]
   24a76:	4b0b      	ldr	r3, [pc, #44]	; (24aa4 <rtc_calendar_init+0x8c>)
   24a78:	68fa      	ldr	r2, [r7, #12]
   24a7a:	601a      	str	r2, [r3, #0]
   24a7c:	687a      	ldr	r2, [r7, #4]
   24a7e:	68fb      	ldr	r3, [r7, #12]
   24a80:	0011      	movs	r1, r2
   24a82:	0018      	movs	r0, r3
   24a84:	4b08      	ldr	r3, [pc, #32]	; (24aa8 <rtc_calendar_init+0x90>)
   24a86:	4798      	blx	r3
   24a88:	46c0      	nop			; (mov r8, r8)
   24a8a:	46bd      	mov	sp, r7
   24a8c:	b006      	add	sp, #24
   24a8e:	bd80      	pop	{r7, pc}
   24a90:	00024665 	.word	0x00024665
   24a94:	0002464d 	.word	0x0002464d
   24a98:	00027a7d 	.word	0x00027a7d
   24a9c:	00027ac1 	.word	0x00027ac1
   24aa0:	000247d9 	.word	0x000247d9
   24aa4:	20005574 	.word	0x20005574
   24aa8:	00024951 	.word	0x00024951

00024aac <rtc_calendar_get_time>:
   24aac:	b580      	push	{r7, lr}
   24aae:	b084      	sub	sp, #16
   24ab0:	af00      	add	r7, sp, #0
   24ab2:	6078      	str	r0, [r7, #4]
   24ab4:	6039      	str	r1, [r7, #0]
   24ab6:	687b      	ldr	r3, [r7, #4]
   24ab8:	681b      	ldr	r3, [r3, #0]
   24aba:	60fb      	str	r3, [r7, #12]
   24abc:	687b      	ldr	r3, [r7, #4]
   24abe:	795b      	ldrb	r3, [r3, #5]
   24ac0:	2201      	movs	r2, #1
   24ac2:	4053      	eors	r3, r2
   24ac4:	b2db      	uxtb	r3, r3
   24ac6:	2b00      	cmp	r3, #0
   24ac8:	d00a      	beq.n	24ae0 <rtc_calendar_get_time+0x34>
   24aca:	68fb      	ldr	r3, [r7, #12]
   24acc:	4a16      	ldr	r2, [pc, #88]	; (24b28 <rtc_calendar_get_time+0x7c>)
   24ace:	805a      	strh	r2, [r3, #2]
   24ad0:	46c0      	nop			; (mov r8, r8)
   24ad2:	687b      	ldr	r3, [r7, #4]
   24ad4:	0018      	movs	r0, r3
   24ad6:	4b15      	ldr	r3, [pc, #84]	; (24b2c <rtc_calendar_get_time+0x80>)
   24ad8:	4798      	blx	r3
   24ada:	1e03      	subs	r3, r0, #0
   24adc:	d1f9      	bne.n	24ad2 <rtc_calendar_get_time+0x26>
   24ade:	e016      	b.n	24b0e <rtc_calendar_get_time+0x62>
   24ae0:	68fb      	ldr	r3, [r7, #12]
   24ae2:	885b      	ldrh	r3, [r3, #2]
   24ae4:	b29b      	uxth	r3, r3
   24ae6:	001a      	movs	r2, r3
   24ae8:	2380      	movs	r3, #128	; 0x80
   24aea:	01db      	lsls	r3, r3, #7
   24aec:	4013      	ands	r3, r2
   24aee:	d10e      	bne.n	24b0e <rtc_calendar_get_time+0x62>
   24af0:	68fb      	ldr	r3, [r7, #12]
   24af2:	885b      	ldrh	r3, [r3, #2]
   24af4:	b29b      	uxth	r3, r3
   24af6:	4a0e      	ldr	r2, [pc, #56]	; (24b30 <rtc_calendar_get_time+0x84>)
   24af8:	4313      	orrs	r3, r2
   24afa:	b29a      	uxth	r2, r3
   24afc:	68fb      	ldr	r3, [r7, #12]
   24afe:	805a      	strh	r2, [r3, #2]
   24b00:	46c0      	nop			; (mov r8, r8)
   24b02:	687b      	ldr	r3, [r7, #4]
   24b04:	0018      	movs	r0, r3
   24b06:	4b09      	ldr	r3, [pc, #36]	; (24b2c <rtc_calendar_get_time+0x80>)
   24b08:	4798      	blx	r3
   24b0a:	1e03      	subs	r3, r0, #0
   24b0c:	d1f9      	bne.n	24b02 <rtc_calendar_get_time+0x56>
   24b0e:	68fb      	ldr	r3, [r7, #12]
   24b10:	691b      	ldr	r3, [r3, #16]
   24b12:	60bb      	str	r3, [r7, #8]
   24b14:	683a      	ldr	r2, [r7, #0]
   24b16:	68b9      	ldr	r1, [r7, #8]
   24b18:	687b      	ldr	r3, [r7, #4]
   24b1a:	0018      	movs	r0, r3
   24b1c:	4b05      	ldr	r3, [pc, #20]	; (24b34 <rtc_calendar_get_time+0x88>)
   24b1e:	4798      	blx	r3
   24b20:	46c0      	nop			; (mov r8, r8)
   24b22:	46bd      	mov	sp, r7
   24b24:	b004      	add	sp, #16
   24b26:	bd80      	pop	{r7, pc}
   24b28:	ffff8000 	.word	0xffff8000
   24b2c:	0002471d 	.word	0x0002471d
   24b30:	ffffc000 	.word	0xffffc000
   24b34:	000248b1 	.word	0x000248b1

00024b38 <rtc_calendar_set_alarm>:
   24b38:	b580      	push	{r7, lr}
   24b3a:	b086      	sub	sp, #24
   24b3c:	af00      	add	r7, sp, #0
   24b3e:	60f8      	str	r0, [r7, #12]
   24b40:	60b9      	str	r1, [r7, #8]
   24b42:	1dfb      	adds	r3, r7, #7
   24b44:	701a      	strb	r2, [r3, #0]
   24b46:	68fb      	ldr	r3, [r7, #12]
   24b48:	681b      	ldr	r3, [r3, #0]
   24b4a:	617b      	str	r3, [r7, #20]
   24b4c:	1dfb      	adds	r3, r7, #7
   24b4e:	781b      	ldrb	r3, [r3, #0]
   24b50:	2b01      	cmp	r3, #1
   24b52:	d901      	bls.n	24b58 <rtc_calendar_set_alarm+0x20>
   24b54:	2317      	movs	r3, #23
   24b56:	e021      	b.n	24b9c <rtc_calendar_set_alarm+0x64>
   24b58:	68ba      	ldr	r2, [r7, #8]
   24b5a:	68fb      	ldr	r3, [r7, #12]
   24b5c:	0011      	movs	r1, r2
   24b5e:	0018      	movs	r0, r3
   24b60:	4b10      	ldr	r3, [pc, #64]	; (24ba4 <rtc_calendar_set_alarm+0x6c>)
   24b62:	4798      	blx	r3
   24b64:	0003      	movs	r3, r0
   24b66:	613b      	str	r3, [r7, #16]
   24b68:	46c0      	nop			; (mov r8, r8)
   24b6a:	68fb      	ldr	r3, [r7, #12]
   24b6c:	0018      	movs	r0, r3
   24b6e:	4b0e      	ldr	r3, [pc, #56]	; (24ba8 <rtc_calendar_set_alarm+0x70>)
   24b70:	4798      	blx	r3
   24b72:	1e03      	subs	r3, r0, #0
   24b74:	d1f9      	bne.n	24b6a <rtc_calendar_set_alarm+0x32>
   24b76:	1dfb      	adds	r3, r7, #7
   24b78:	781a      	ldrb	r2, [r3, #0]
   24b7a:	697b      	ldr	r3, [r7, #20]
   24b7c:	3203      	adds	r2, #3
   24b7e:	00d2      	lsls	r2, r2, #3
   24b80:	6939      	ldr	r1, [r7, #16]
   24b82:	50d1      	str	r1, [r2, r3]
   24b84:	1dfb      	adds	r3, r7, #7
   24b86:	781b      	ldrb	r3, [r3, #0]
   24b88:	68ba      	ldr	r2, [r7, #8]
   24b8a:	7a11      	ldrb	r1, [r2, #8]
   24b8c:	697a      	ldr	r2, [r7, #20]
   24b8e:	3303      	adds	r3, #3
   24b90:	00db      	lsls	r3, r3, #3
   24b92:	18d3      	adds	r3, r2, r3
   24b94:	3304      	adds	r3, #4
   24b96:	1c0a      	adds	r2, r1, #0
   24b98:	701a      	strb	r2, [r3, #0]
   24b9a:	2300      	movs	r3, #0
   24b9c:	0018      	movs	r0, r3
   24b9e:	46bd      	mov	sp, r7
   24ba0:	b006      	add	sp, #24
   24ba2:	bd80      	pop	{r7, pc}
   24ba4:	00024829 	.word	0x00024829
   24ba8:	0002471d 	.word	0x0002471d

00024bac <_rtc_interrupt_handler>:
   24bac:	b580      	push	{r7, lr}
   24bae:	b086      	sub	sp, #24
   24bb0:	af00      	add	r7, sp, #0
   24bb2:	6078      	str	r0, [r7, #4]
   24bb4:	4b28      	ldr	r3, [pc, #160]	; (24c58 <_rtc_interrupt_handler+0xac>)
   24bb6:	687a      	ldr	r2, [r7, #4]
   24bb8:	0092      	lsls	r2, r2, #2
   24bba:	58d3      	ldr	r3, [r2, r3]
   24bbc:	617b      	str	r3, [r7, #20]
   24bbe:	697b      	ldr	r3, [r7, #20]
   24bc0:	681b      	ldr	r3, [r3, #0]
   24bc2:	613b      	str	r3, [r7, #16]
   24bc4:	230e      	movs	r3, #14
   24bc6:	18fb      	adds	r3, r7, r3
   24bc8:	697a      	ldr	r2, [r7, #20]
   24bca:	8a52      	ldrh	r2, [r2, #18]
   24bcc:	801a      	strh	r2, [r3, #0]
   24bce:	697b      	ldr	r3, [r7, #20]
   24bd0:	8a1b      	ldrh	r3, [r3, #16]
   24bd2:	b29a      	uxth	r2, r3
   24bd4:	230e      	movs	r3, #14
   24bd6:	18fb      	adds	r3, r7, r3
   24bd8:	210e      	movs	r1, #14
   24bda:	1879      	adds	r1, r7, r1
   24bdc:	8809      	ldrh	r1, [r1, #0]
   24bde:	400a      	ands	r2, r1
   24be0:	801a      	strh	r2, [r3, #0]
   24be2:	693b      	ldr	r3, [r7, #16]
   24be4:	7a1b      	ldrb	r3, [r3, #8]
   24be6:	b2da      	uxtb	r2, r3
   24be8:	230c      	movs	r3, #12
   24bea:	18fb      	adds	r3, r7, r3
   24bec:	801a      	strh	r2, [r3, #0]
   24bee:	693b      	ldr	r3, [r7, #16]
   24bf0:	79db      	ldrb	r3, [r3, #7]
   24bf2:	b2db      	uxtb	r3, r3
   24bf4:	b29a      	uxth	r2, r3
   24bf6:	230c      	movs	r3, #12
   24bf8:	18fb      	adds	r3, r7, r3
   24bfa:	210c      	movs	r1, #12
   24bfc:	1879      	adds	r1, r7, r1
   24bfe:	8809      	ldrh	r1, [r1, #0]
   24c00:	400a      	ands	r2, r1
   24c02:	801a      	strh	r2, [r3, #0]
   24c04:	230c      	movs	r3, #12
   24c06:	18fb      	adds	r3, r7, r3
   24c08:	881b      	ldrh	r3, [r3, #0]
   24c0a:	2280      	movs	r2, #128	; 0x80
   24c0c:	4013      	ands	r3, r2
   24c0e:	d00c      	beq.n	24c2a <_rtc_interrupt_handler+0x7e>
   24c10:	230e      	movs	r3, #14
   24c12:	18fb      	adds	r3, r7, r3
   24c14:	881b      	ldrh	r3, [r3, #0]
   24c16:	2202      	movs	r2, #2
   24c18:	4013      	ands	r3, r2
   24c1a:	d002      	beq.n	24c22 <_rtc_interrupt_handler+0x76>
   24c1c:	697b      	ldr	r3, [r7, #20]
   24c1e:	68db      	ldr	r3, [r3, #12]
   24c20:	4798      	blx	r3
   24c22:	693b      	ldr	r3, [r7, #16]
   24c24:	2280      	movs	r2, #128	; 0x80
   24c26:	721a      	strb	r2, [r3, #8]
   24c28:	e011      	b.n	24c4e <_rtc_interrupt_handler+0xa2>
   24c2a:	230c      	movs	r3, #12
   24c2c:	18fb      	adds	r3, r7, r3
   24c2e:	881b      	ldrh	r3, [r3, #0]
   24c30:	2201      	movs	r2, #1
   24c32:	4013      	ands	r3, r2
   24c34:	d00b      	beq.n	24c4e <_rtc_interrupt_handler+0xa2>
   24c36:	230e      	movs	r3, #14
   24c38:	18fb      	adds	r3, r7, r3
   24c3a:	881b      	ldrh	r3, [r3, #0]
   24c3c:	2201      	movs	r2, #1
   24c3e:	4013      	ands	r3, r2
   24c40:	d002      	beq.n	24c48 <_rtc_interrupt_handler+0x9c>
   24c42:	697b      	ldr	r3, [r7, #20]
   24c44:	689b      	ldr	r3, [r3, #8]
   24c46:	4798      	blx	r3
   24c48:	693b      	ldr	r3, [r7, #16]
   24c4a:	2201      	movs	r2, #1
   24c4c:	721a      	strb	r2, [r3, #8]
   24c4e:	46c0      	nop			; (mov r8, r8)
   24c50:	46bd      	mov	sp, r7
   24c52:	b006      	add	sp, #24
   24c54:	bd80      	pop	{r7, pc}
   24c56:	46c0      	nop			; (mov r8, r8)
   24c58:	20005574 	.word	0x20005574

00024c5c <RTC_Handler>:
   24c5c:	b580      	push	{r7, lr}
   24c5e:	af00      	add	r7, sp, #0
   24c60:	2000      	movs	r0, #0
   24c62:	4b02      	ldr	r3, [pc, #8]	; (24c6c <RTC_Handler+0x10>)
   24c64:	4798      	blx	r3
   24c66:	46c0      	nop			; (mov r8, r8)
   24c68:	46bd      	mov	sp, r7
   24c6a:	bd80      	pop	{r7, pc}
   24c6c:	00024bad 	.word	0x00024bad

00024c70 <system_gclk_chan_get_config_defaults>:
   24c70:	b580      	push	{r7, lr}
   24c72:	b082      	sub	sp, #8
   24c74:	af00      	add	r7, sp, #0
   24c76:	6078      	str	r0, [r7, #4]
   24c78:	687b      	ldr	r3, [r7, #4]
   24c7a:	2200      	movs	r2, #0
   24c7c:	701a      	strb	r2, [r3, #0]
   24c7e:	46c0      	nop			; (mov r8, r8)
   24c80:	46bd      	mov	sp, r7
   24c82:	b002      	add	sp, #8
   24c84:	bd80      	pop	{r7, pc}

00024c86 <long_division>:
   24c86:	b5f0      	push	{r4, r5, r6, r7, lr}
   24c88:	b08d      	sub	sp, #52	; 0x34
   24c8a:	af00      	add	r7, sp, #0
   24c8c:	60b8      	str	r0, [r7, #8]
   24c8e:	60f9      	str	r1, [r7, #12]
   24c90:	603a      	str	r2, [r7, #0]
   24c92:	607b      	str	r3, [r7, #4]
   24c94:	2300      	movs	r3, #0
   24c96:	2400      	movs	r4, #0
   24c98:	623b      	str	r3, [r7, #32]
   24c9a:	627c      	str	r4, [r7, #36]	; 0x24
   24c9c:	2300      	movs	r3, #0
   24c9e:	2400      	movs	r4, #0
   24ca0:	61bb      	str	r3, [r7, #24]
   24ca2:	61fc      	str	r4, [r7, #28]
   24ca4:	233f      	movs	r3, #63	; 0x3f
   24ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
   24ca8:	e053      	b.n	24d52 <long_division+0xcc>
   24caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24cac:	3b20      	subs	r3, #32
   24cae:	2b00      	cmp	r3, #0
   24cb0:	db04      	blt.n	24cbc <long_division+0x36>
   24cb2:	2201      	movs	r2, #1
   24cb4:	409a      	lsls	r2, r3
   24cb6:	0013      	movs	r3, r2
   24cb8:	617b      	str	r3, [r7, #20]
   24cba:	e00b      	b.n	24cd4 <long_division+0x4e>
   24cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24cbe:	2220      	movs	r2, #32
   24cc0:	1ad3      	subs	r3, r2, r3
   24cc2:	2201      	movs	r2, #1
   24cc4:	40da      	lsrs	r2, r3
   24cc6:	0013      	movs	r3, r2
   24cc8:	2100      	movs	r1, #0
   24cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   24ccc:	4091      	lsls	r1, r2
   24cce:	000a      	movs	r2, r1
   24cd0:	4313      	orrs	r3, r2
   24cd2:	617b      	str	r3, [r7, #20]
   24cd4:	2201      	movs	r2, #1
   24cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24cd8:	409a      	lsls	r2, r3
   24cda:	0013      	movs	r3, r2
   24cdc:	613b      	str	r3, [r7, #16]
   24cde:	69bb      	ldr	r3, [r7, #24]
   24ce0:	69fc      	ldr	r4, [r7, #28]
   24ce2:	18db      	adds	r3, r3, r3
   24ce4:	4164      	adcs	r4, r4
   24ce6:	61bb      	str	r3, [r7, #24]
   24ce8:	61fc      	str	r4, [r7, #28]
   24cea:	68bb      	ldr	r3, [r7, #8]
   24cec:	693a      	ldr	r2, [r7, #16]
   24cee:	401a      	ands	r2, r3
   24cf0:	0015      	movs	r5, r2
   24cf2:	68fb      	ldr	r3, [r7, #12]
   24cf4:	697a      	ldr	r2, [r7, #20]
   24cf6:	401a      	ands	r2, r3
   24cf8:	0016      	movs	r6, r2
   24cfa:	002b      	movs	r3, r5
   24cfc:	4333      	orrs	r3, r6
   24cfe:	d007      	beq.n	24d10 <long_division+0x8a>
   24d00:	69bb      	ldr	r3, [r7, #24]
   24d02:	2201      	movs	r2, #1
   24d04:	4313      	orrs	r3, r2
   24d06:	61bb      	str	r3, [r7, #24]
   24d08:	69fb      	ldr	r3, [r7, #28]
   24d0a:	2200      	movs	r2, #0
   24d0c:	4313      	orrs	r3, r2
   24d0e:	61fb      	str	r3, [r7, #28]
   24d10:	687a      	ldr	r2, [r7, #4]
   24d12:	69fb      	ldr	r3, [r7, #28]
   24d14:	429a      	cmp	r2, r3
   24d16:	d819      	bhi.n	24d4c <long_division+0xc6>
   24d18:	687a      	ldr	r2, [r7, #4]
   24d1a:	69fb      	ldr	r3, [r7, #28]
   24d1c:	429a      	cmp	r2, r3
   24d1e:	d103      	bne.n	24d28 <long_division+0xa2>
   24d20:	683a      	ldr	r2, [r7, #0]
   24d22:	69bb      	ldr	r3, [r7, #24]
   24d24:	429a      	cmp	r2, r3
   24d26:	d811      	bhi.n	24d4c <long_division+0xc6>
   24d28:	69b9      	ldr	r1, [r7, #24]
   24d2a:	69fa      	ldr	r2, [r7, #28]
   24d2c:	683b      	ldr	r3, [r7, #0]
   24d2e:	687c      	ldr	r4, [r7, #4]
   24d30:	1ac9      	subs	r1, r1, r3
   24d32:	41a2      	sbcs	r2, r4
   24d34:	000b      	movs	r3, r1
   24d36:	0014      	movs	r4, r2
   24d38:	61bb      	str	r3, [r7, #24]
   24d3a:	61fc      	str	r4, [r7, #28]
   24d3c:	6a3a      	ldr	r2, [r7, #32]
   24d3e:	693b      	ldr	r3, [r7, #16]
   24d40:	4313      	orrs	r3, r2
   24d42:	623b      	str	r3, [r7, #32]
   24d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   24d46:	697b      	ldr	r3, [r7, #20]
   24d48:	4313      	orrs	r3, r2
   24d4a:	627b      	str	r3, [r7, #36]	; 0x24
   24d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24d4e:	3b01      	subs	r3, #1
   24d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   24d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24d54:	2b00      	cmp	r3, #0
   24d56:	daa8      	bge.n	24caa <long_division+0x24>
   24d58:	6a3b      	ldr	r3, [r7, #32]
   24d5a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   24d5c:	0018      	movs	r0, r3
   24d5e:	0021      	movs	r1, r4
   24d60:	46bd      	mov	sp, r7
   24d62:	b00d      	add	sp, #52	; 0x34
   24d64:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024d66 <_sercom_get_sync_baud_val>:
   24d66:	b580      	push	{r7, lr}
   24d68:	b086      	sub	sp, #24
   24d6a:	af00      	add	r7, sp, #0
   24d6c:	60f8      	str	r0, [r7, #12]
   24d6e:	60b9      	str	r1, [r7, #8]
   24d70:	607a      	str	r2, [r7, #4]
   24d72:	2316      	movs	r3, #22
   24d74:	18fb      	adds	r3, r7, r3
   24d76:	2200      	movs	r2, #0
   24d78:	801a      	strh	r2, [r3, #0]
   24d7a:	68bb      	ldr	r3, [r7, #8]
   24d7c:	613b      	str	r3, [r7, #16]
   24d7e:	68bb      	ldr	r3, [r7, #8]
   24d80:	085a      	lsrs	r2, r3, #1
   24d82:	68fb      	ldr	r3, [r7, #12]
   24d84:	429a      	cmp	r2, r3
   24d86:	d201      	bcs.n	24d8c <_sercom_get_sync_baud_val+0x26>
   24d88:	2340      	movs	r3, #64	; 0x40
   24d8a:	e026      	b.n	24dda <_sercom_get_sync_baud_val+0x74>
   24d8c:	68bb      	ldr	r3, [r7, #8]
   24d8e:	085b      	lsrs	r3, r3, #1
   24d90:	613b      	str	r3, [r7, #16]
   24d92:	e00a      	b.n	24daa <_sercom_get_sync_baud_val+0x44>
   24d94:	693a      	ldr	r2, [r7, #16]
   24d96:	68fb      	ldr	r3, [r7, #12]
   24d98:	1ad3      	subs	r3, r2, r3
   24d9a:	613b      	str	r3, [r7, #16]
   24d9c:	2316      	movs	r3, #22
   24d9e:	18fb      	adds	r3, r7, r3
   24da0:	881a      	ldrh	r2, [r3, #0]
   24da2:	2316      	movs	r3, #22
   24da4:	18fb      	adds	r3, r7, r3
   24da6:	3201      	adds	r2, #1
   24da8:	801a      	strh	r2, [r3, #0]
   24daa:	693a      	ldr	r2, [r7, #16]
   24dac:	68fb      	ldr	r3, [r7, #12]
   24dae:	429a      	cmp	r2, r3
   24db0:	d2f0      	bcs.n	24d94 <_sercom_get_sync_baud_val+0x2e>
   24db2:	2316      	movs	r3, #22
   24db4:	18fb      	adds	r3, r7, r3
   24db6:	2216      	movs	r2, #22
   24db8:	18ba      	adds	r2, r7, r2
   24dba:	8812      	ldrh	r2, [r2, #0]
   24dbc:	3a01      	subs	r2, #1
   24dbe:	801a      	strh	r2, [r3, #0]
   24dc0:	2316      	movs	r3, #22
   24dc2:	18fb      	adds	r3, r7, r3
   24dc4:	881b      	ldrh	r3, [r3, #0]
   24dc6:	2bff      	cmp	r3, #255	; 0xff
   24dc8:	d901      	bls.n	24dce <_sercom_get_sync_baud_val+0x68>
   24dca:	2340      	movs	r3, #64	; 0x40
   24dcc:	e005      	b.n	24dda <_sercom_get_sync_baud_val+0x74>
   24dce:	687b      	ldr	r3, [r7, #4]
   24dd0:	2216      	movs	r2, #22
   24dd2:	18ba      	adds	r2, r7, r2
   24dd4:	8812      	ldrh	r2, [r2, #0]
   24dd6:	801a      	strh	r2, [r3, #0]
   24dd8:	2300      	movs	r3, #0
   24dda:	0018      	movs	r0, r3
   24ddc:	46bd      	mov	sp, r7
   24dde:	b006      	add	sp, #24
   24de0:	bd80      	pop	{r7, pc}
	...

00024de4 <_sercom_get_async_baud_val>:
   24de4:	b5f0      	push	{r4, r5, r6, r7, lr}
   24de6:	b0a1      	sub	sp, #132	; 0x84
   24de8:	af00      	add	r7, sp, #0
   24dea:	64f8      	str	r0, [r7, #76]	; 0x4c
   24dec:	64b9      	str	r1, [r7, #72]	; 0x48
   24dee:	647a      	str	r2, [r7, #68]	; 0x44
   24df0:	2243      	movs	r2, #67	; 0x43
   24df2:	18ba      	adds	r2, r7, r2
   24df4:	7013      	strb	r3, [r2, #0]
   24df6:	2300      	movs	r3, #0
   24df8:	2400      	movs	r4, #0
   24dfa:	673b      	str	r3, [r7, #112]	; 0x70
   24dfc:	677c      	str	r4, [r7, #116]	; 0x74
   24dfe:	2300      	movs	r3, #0
   24e00:	2400      	movs	r4, #0
   24e02:	66bb      	str	r3, [r7, #104]	; 0x68
   24e04:	66fc      	str	r4, [r7, #108]	; 0x6c
   24e06:	2300      	movs	r3, #0
   24e08:	2400      	movs	r4, #0
   24e0a:	67bb      	str	r3, [r7, #120]	; 0x78
   24e0c:	67fc      	str	r4, [r7, #124]	; 0x7c
   24e0e:	2300      	movs	r3, #0
   24e10:	667b      	str	r3, [r7, #100]	; 0x64
   24e12:	2358      	movs	r3, #88	; 0x58
   24e14:	2240      	movs	r2, #64	; 0x40
   24e16:	4694      	mov	ip, r2
   24e18:	44bc      	add	ip, r7
   24e1a:	4463      	add	r3, ip
   24e1c:	781a      	ldrb	r2, [r3, #0]
   24e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24e20:	435a      	muls	r2, r3
   24e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   24e24:	429a      	cmp	r2, r3
   24e26:	d901      	bls.n	24e2c <_sercom_get_async_baud_val+0x48>
   24e28:	2340      	movs	r3, #64	; 0x40
   24e2a:	e0b3      	b.n	24f94 <_sercom_get_async_baud_val+0x1b0>
   24e2c:	2343      	movs	r3, #67	; 0x43
   24e2e:	18fb      	adds	r3, r7, r3
   24e30:	781b      	ldrb	r3, [r3, #0]
   24e32:	2b00      	cmp	r3, #0
   24e34:	d13d      	bne.n	24eb2 <_sercom_get_async_baud_val+0xce>
   24e36:	2358      	movs	r3, #88	; 0x58
   24e38:	2240      	movs	r2, #64	; 0x40
   24e3a:	4694      	mov	ip, r2
   24e3c:	44bc      	add	ip, r7
   24e3e:	4463      	add	r3, ip
   24e40:	781b      	ldrb	r3, [r3, #0]
   24e42:	b2db      	uxtb	r3, r3
   24e44:	613b      	str	r3, [r7, #16]
   24e46:	2300      	movs	r3, #0
   24e48:	617b      	str	r3, [r7, #20]
   24e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24e4c:	60bb      	str	r3, [r7, #8]
   24e4e:	2300      	movs	r3, #0
   24e50:	60fb      	str	r3, [r7, #12]
   24e52:	4c52      	ldr	r4, [pc, #328]	; (24f9c <_sercom_get_async_baud_val+0x1b8>)
   24e54:	68ba      	ldr	r2, [r7, #8]
   24e56:	68fb      	ldr	r3, [r7, #12]
   24e58:	6938      	ldr	r0, [r7, #16]
   24e5a:	6979      	ldr	r1, [r7, #20]
   24e5c:	47a0      	blx	r4
   24e5e:	0003      	movs	r3, r0
   24e60:	000c      	movs	r4, r1
   24e62:	001b      	movs	r3, r3
   24e64:	65fb      	str	r3, [r7, #92]	; 0x5c
   24e66:	2300      	movs	r3, #0
   24e68:	65bb      	str	r3, [r7, #88]	; 0x58
   24e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   24e6c:	603b      	str	r3, [r7, #0]
   24e6e:	2300      	movs	r3, #0
   24e70:	607b      	str	r3, [r7, #4]
   24e72:	6db8      	ldr	r0, [r7, #88]	; 0x58
   24e74:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   24e76:	683a      	ldr	r2, [r7, #0]
   24e78:	687b      	ldr	r3, [r7, #4]
   24e7a:	4c49      	ldr	r4, [pc, #292]	; (24fa0 <_sercom_get_async_baud_val+0x1bc>)
   24e7c:	47a0      	blx	r4
   24e7e:	0003      	movs	r3, r0
   24e80:	000c      	movs	r4, r1
   24e82:	673b      	str	r3, [r7, #112]	; 0x70
   24e84:	677c      	str	r4, [r7, #116]	; 0x74
   24e86:	2100      	movs	r1, #0
   24e88:	2201      	movs	r2, #1
   24e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24e8c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   24e8e:	1ac9      	subs	r1, r1, r3
   24e90:	41a2      	sbcs	r2, r4
   24e92:	000b      	movs	r3, r1
   24e94:	0014      	movs	r4, r2
   24e96:	66bb      	str	r3, [r7, #104]	; 0x68
   24e98:	66fc      	str	r4, [r7, #108]	; 0x6c
   24e9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24e9c:	0c1b      	lsrs	r3, r3, #16
   24e9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24ea0:	0416      	lsls	r6, r2, #16
   24ea2:	431e      	orrs	r6, r3
   24ea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24ea6:	041d      	lsls	r5, r3, #16
   24ea8:	0033      	movs	r3, r6
   24eaa:	67bb      	str	r3, [r7, #120]	; 0x78
   24eac:	2300      	movs	r3, #0
   24eae:	67fb      	str	r3, [r7, #124]	; 0x7c
   24eb0:	e06a      	b.n	24f88 <_sercom_get_async_baud_val+0x1a4>
   24eb2:	2343      	movs	r3, #67	; 0x43
   24eb4:	18fb      	adds	r3, r7, r3
   24eb6:	781b      	ldrb	r3, [r3, #0]
   24eb8:	2b01      	cmp	r3, #1
   24eba:	d165      	bne.n	24f88 <_sercom_get_async_baud_val+0x1a4>
   24ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24ebe:	633b      	str	r3, [r7, #48]	; 0x30
   24ec0:	2300      	movs	r3, #0
   24ec2:	637b      	str	r3, [r7, #52]	; 0x34
   24ec4:	2358      	movs	r3, #88	; 0x58
   24ec6:	2240      	movs	r2, #64	; 0x40
   24ec8:	4694      	mov	ip, r2
   24eca:	44bc      	add	ip, r7
   24ecc:	4463      	add	r3, ip
   24ece:	781b      	ldrb	r3, [r3, #0]
   24ed0:	b2db      	uxtb	r3, r3
   24ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   24ed4:	2300      	movs	r3, #0
   24ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
   24ed8:	4c30      	ldr	r4, [pc, #192]	; (24f9c <_sercom_get_async_baud_val+0x1b8>)
   24eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
   24edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24ede:	6b38      	ldr	r0, [r7, #48]	; 0x30
   24ee0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   24ee2:	47a0      	blx	r4
   24ee4:	0003      	movs	r3, r0
   24ee6:	000c      	movs	r4, r1
   24ee8:	65bb      	str	r3, [r7, #88]	; 0x58
   24eea:	65fc      	str	r4, [r7, #92]	; 0x5c
   24eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   24eee:	623b      	str	r3, [r7, #32]
   24ef0:	2300      	movs	r3, #0
   24ef2:	627b      	str	r3, [r7, #36]	; 0x24
   24ef4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24ef6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   24ef8:	001a      	movs	r2, r3
   24efa:	0023      	movs	r3, r4
   24efc:	6a38      	ldr	r0, [r7, #32]
   24efe:	6a79      	ldr	r1, [r7, #36]	; 0x24
   24f00:	4c27      	ldr	r4, [pc, #156]	; (24fa0 <_sercom_get_async_baud_val+0x1bc>)
   24f02:	47a0      	blx	r4
   24f04:	0003      	movs	r3, r0
   24f06:	000c      	movs	r4, r1
   24f08:	667b      	str	r3, [r7, #100]	; 0x64
   24f0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   24f0c:	2380      	movs	r3, #128	; 0x80
   24f0e:	019b      	lsls	r3, r3, #6
   24f10:	429a      	cmp	r2, r3
   24f12:	d901      	bls.n	24f18 <_sercom_get_async_baud_val+0x134>
   24f14:	2340      	movs	r3, #64	; 0x40
   24f16:	e03d      	b.n	24f94 <_sercom_get_async_baud_val+0x1b0>
   24f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   24f1a:	61bb      	str	r3, [r7, #24]
   24f1c:	2300      	movs	r3, #0
   24f1e:	61fb      	str	r3, [r7, #28]
   24f20:	69b9      	ldr	r1, [r7, #24]
   24f22:	69fa      	ldr	r2, [r7, #28]
   24f24:	000b      	movs	r3, r1
   24f26:	0f5b      	lsrs	r3, r3, #29
   24f28:	0010      	movs	r0, r2
   24f2a:	00c0      	lsls	r0, r0, #3
   24f2c:	63f8      	str	r0, [r7, #60]	; 0x3c
   24f2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   24f30:	4318      	orrs	r0, r3
   24f32:	63f8      	str	r0, [r7, #60]	; 0x3c
   24f34:	000b      	movs	r3, r1
   24f36:	00db      	lsls	r3, r3, #3
   24f38:	63bb      	str	r3, [r7, #56]	; 0x38
   24f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24f3c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   24f3e:	001a      	movs	r2, r3
   24f40:	0023      	movs	r3, r4
   24f42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   24f44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   24f46:	4c16      	ldr	r4, [pc, #88]	; (24fa0 <_sercom_get_async_baud_val+0x1bc>)
   24f48:	47a0      	blx	r4
   24f4a:	0003      	movs	r3, r0
   24f4c:	000c      	movs	r4, r1
   24f4e:	65bb      	str	r3, [r7, #88]	; 0x58
   24f50:	65fc      	str	r4, [r7, #92]	; 0x5c
   24f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24f54:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   24f56:	b2d9      	uxtb	r1, r3
   24f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24f5a:	b2db      	uxtb	r3, r3
   24f5c:	00db      	lsls	r3, r3, #3
   24f5e:	b2da      	uxtb	r2, r3
   24f60:	2317      	movs	r3, #23
   24f62:	2040      	movs	r0, #64	; 0x40
   24f64:	4684      	mov	ip, r0
   24f66:	44bc      	add	ip, r7
   24f68:	4463      	add	r3, ip
   24f6a:	1a8a      	subs	r2, r1, r2
   24f6c:	701a      	strb	r2, [r3, #0]
   24f6e:	2317      	movs	r3, #23
   24f70:	2240      	movs	r2, #64	; 0x40
   24f72:	4694      	mov	ip, r2
   24f74:	44bc      	add	ip, r7
   24f76:	4463      	add	r3, ip
   24f78:	781b      	ldrb	r3, [r3, #0]
   24f7a:	035b      	lsls	r3, r3, #13
   24f7c:	001a      	movs	r2, r3
   24f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24f80:	4313      	orrs	r3, r2
   24f82:	67bb      	str	r3, [r7, #120]	; 0x78
   24f84:	2300      	movs	r3, #0
   24f86:	67fb      	str	r3, [r7, #124]	; 0x7c
   24f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   24f8a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   24f8c:	b29a      	uxth	r2, r3
   24f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   24f90:	801a      	strh	r2, [r3, #0]
   24f92:	2300      	movs	r3, #0
   24f94:	0018      	movs	r0, r3
   24f96:	46bd      	mov	sp, r7
   24f98:	b021      	add	sp, #132	; 0x84
   24f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24f9c:	000307d5 	.word	0x000307d5
   24fa0:	00024c87 	.word	0x00024c87

00024fa4 <sercom_set_gclk_generator>:
   24fa4:	b580      	push	{r7, lr}
   24fa6:	b084      	sub	sp, #16
   24fa8:	af00      	add	r7, sp, #0
   24faa:	0002      	movs	r2, r0
   24fac:	1dfb      	adds	r3, r7, #7
   24fae:	701a      	strb	r2, [r3, #0]
   24fb0:	1dbb      	adds	r3, r7, #6
   24fb2:	1c0a      	adds	r2, r1, #0
   24fb4:	701a      	strb	r2, [r3, #0]
   24fb6:	4b1a      	ldr	r3, [pc, #104]	; (25020 <sercom_set_gclk_generator+0x7c>)
   24fb8:	781b      	ldrb	r3, [r3, #0]
   24fba:	2201      	movs	r2, #1
   24fbc:	4053      	eors	r3, r2
   24fbe:	b2db      	uxtb	r3, r3
   24fc0:	2b00      	cmp	r3, #0
   24fc2:	d103      	bne.n	24fcc <sercom_set_gclk_generator+0x28>
   24fc4:	1dbb      	adds	r3, r7, #6
   24fc6:	781b      	ldrb	r3, [r3, #0]
   24fc8:	2b00      	cmp	r3, #0
   24fca:	d01b      	beq.n	25004 <sercom_set_gclk_generator+0x60>
   24fcc:	230c      	movs	r3, #12
   24fce:	18fb      	adds	r3, r7, r3
   24fd0:	0018      	movs	r0, r3
   24fd2:	4b14      	ldr	r3, [pc, #80]	; (25024 <sercom_set_gclk_generator+0x80>)
   24fd4:	4798      	blx	r3
   24fd6:	230c      	movs	r3, #12
   24fd8:	18fb      	adds	r3, r7, r3
   24fda:	1dfa      	adds	r2, r7, #7
   24fdc:	7812      	ldrb	r2, [r2, #0]
   24fde:	701a      	strb	r2, [r3, #0]
   24fe0:	230c      	movs	r3, #12
   24fe2:	18fb      	adds	r3, r7, r3
   24fe4:	0019      	movs	r1, r3
   24fe6:	2013      	movs	r0, #19
   24fe8:	4b0f      	ldr	r3, [pc, #60]	; (25028 <sercom_set_gclk_generator+0x84>)
   24fea:	4798      	blx	r3
   24fec:	2013      	movs	r0, #19
   24fee:	4b0f      	ldr	r3, [pc, #60]	; (2502c <sercom_set_gclk_generator+0x88>)
   24ff0:	4798      	blx	r3
   24ff2:	4b0b      	ldr	r3, [pc, #44]	; (25020 <sercom_set_gclk_generator+0x7c>)
   24ff4:	1dfa      	adds	r2, r7, #7
   24ff6:	7812      	ldrb	r2, [r2, #0]
   24ff8:	705a      	strb	r2, [r3, #1]
   24ffa:	4b09      	ldr	r3, [pc, #36]	; (25020 <sercom_set_gclk_generator+0x7c>)
   24ffc:	2201      	movs	r2, #1
   24ffe:	701a      	strb	r2, [r3, #0]
   25000:	2300      	movs	r3, #0
   25002:	e008      	b.n	25016 <sercom_set_gclk_generator+0x72>
   25004:	4b06      	ldr	r3, [pc, #24]	; (25020 <sercom_set_gclk_generator+0x7c>)
   25006:	785b      	ldrb	r3, [r3, #1]
   25008:	1dfa      	adds	r2, r7, #7
   2500a:	7812      	ldrb	r2, [r2, #0]
   2500c:	429a      	cmp	r2, r3
   2500e:	d101      	bne.n	25014 <sercom_set_gclk_generator+0x70>
   25010:	2300      	movs	r3, #0
   25012:	e000      	b.n	25016 <sercom_set_gclk_generator+0x72>
   25014:	231d      	movs	r3, #29
   25016:	0018      	movs	r0, r3
   25018:	46bd      	mov	sp, r7
   2501a:	b004      	add	sp, #16
   2501c:	bd80      	pop	{r7, pc}
   2501e:	46c0      	nop			; (mov r8, r8)
   25020:	20003d18 	.word	0x20003d18
   25024:	00024c71 	.word	0x00024c71
   25028:	00027a7d 	.word	0x00027a7d
   2502c:	00027ac1 	.word	0x00027ac1

00025030 <_sercom_get_default_pad>:
   25030:	b580      	push	{r7, lr}
   25032:	b082      	sub	sp, #8
   25034:	af00      	add	r7, sp, #0
   25036:	6078      	str	r0, [r7, #4]
   25038:	000a      	movs	r2, r1
   2503a:	1cfb      	adds	r3, r7, #3
   2503c:	701a      	strb	r2, [r3, #0]
   2503e:	687b      	ldr	r3, [r7, #4]
   25040:	4a4d      	ldr	r2, [pc, #308]	; (25178 <_sercom_get_default_pad+0x148>)
   25042:	4293      	cmp	r3, r2
   25044:	d03f      	beq.n	250c6 <_sercom_get_default_pad+0x96>
   25046:	4a4c      	ldr	r2, [pc, #304]	; (25178 <_sercom_get_default_pad+0x148>)
   25048:	4293      	cmp	r3, r2
   2504a:	d806      	bhi.n	2505a <_sercom_get_default_pad+0x2a>
   2504c:	4a4b      	ldr	r2, [pc, #300]	; (2517c <_sercom_get_default_pad+0x14c>)
   2504e:	4293      	cmp	r3, r2
   25050:	d00f      	beq.n	25072 <_sercom_get_default_pad+0x42>
   25052:	4a4b      	ldr	r2, [pc, #300]	; (25180 <_sercom_get_default_pad+0x150>)
   25054:	4293      	cmp	r3, r2
   25056:	d021      	beq.n	2509c <_sercom_get_default_pad+0x6c>
   25058:	e089      	b.n	2516e <_sercom_get_default_pad+0x13e>
   2505a:	4a4a      	ldr	r2, [pc, #296]	; (25184 <_sercom_get_default_pad+0x154>)
   2505c:	4293      	cmp	r3, r2
   2505e:	d100      	bne.n	25062 <_sercom_get_default_pad+0x32>
   25060:	e05b      	b.n	2511a <_sercom_get_default_pad+0xea>
   25062:	4a49      	ldr	r2, [pc, #292]	; (25188 <_sercom_get_default_pad+0x158>)
   25064:	4293      	cmp	r3, r2
   25066:	d100      	bne.n	2506a <_sercom_get_default_pad+0x3a>
   25068:	e06c      	b.n	25144 <_sercom_get_default_pad+0x114>
   2506a:	4a48      	ldr	r2, [pc, #288]	; (2518c <_sercom_get_default_pad+0x15c>)
   2506c:	4293      	cmp	r3, r2
   2506e:	d03f      	beq.n	250f0 <_sercom_get_default_pad+0xc0>
   25070:	e07d      	b.n	2516e <_sercom_get_default_pad+0x13e>
   25072:	1cfb      	adds	r3, r7, #3
   25074:	781b      	ldrb	r3, [r3, #0]
   25076:	2b01      	cmp	r3, #1
   25078:	d00a      	beq.n	25090 <_sercom_get_default_pad+0x60>
   2507a:	dc02      	bgt.n	25082 <_sercom_get_default_pad+0x52>
   2507c:	2b00      	cmp	r3, #0
   2507e:	d005      	beq.n	2508c <_sercom_get_default_pad+0x5c>
   25080:	e075      	b.n	2516e <_sercom_get_default_pad+0x13e>
   25082:	2b02      	cmp	r3, #2
   25084:	d006      	beq.n	25094 <_sercom_get_default_pad+0x64>
   25086:	2b03      	cmp	r3, #3
   25088:	d006      	beq.n	25098 <_sercom_get_default_pad+0x68>
   2508a:	e070      	b.n	2516e <_sercom_get_default_pad+0x13e>
   2508c:	4b40      	ldr	r3, [pc, #256]	; (25190 <_sercom_get_default_pad+0x160>)
   2508e:	e06f      	b.n	25170 <_sercom_get_default_pad+0x140>
   25090:	4b40      	ldr	r3, [pc, #256]	; (25194 <_sercom_get_default_pad+0x164>)
   25092:	e06d      	b.n	25170 <_sercom_get_default_pad+0x140>
   25094:	4b40      	ldr	r3, [pc, #256]	; (25198 <_sercom_get_default_pad+0x168>)
   25096:	e06b      	b.n	25170 <_sercom_get_default_pad+0x140>
   25098:	4b40      	ldr	r3, [pc, #256]	; (2519c <_sercom_get_default_pad+0x16c>)
   2509a:	e069      	b.n	25170 <_sercom_get_default_pad+0x140>
   2509c:	1cfb      	adds	r3, r7, #3
   2509e:	781b      	ldrb	r3, [r3, #0]
   250a0:	2b01      	cmp	r3, #1
   250a2:	d00a      	beq.n	250ba <_sercom_get_default_pad+0x8a>
   250a4:	dc02      	bgt.n	250ac <_sercom_get_default_pad+0x7c>
   250a6:	2b00      	cmp	r3, #0
   250a8:	d005      	beq.n	250b6 <_sercom_get_default_pad+0x86>
   250aa:	e060      	b.n	2516e <_sercom_get_default_pad+0x13e>
   250ac:	2b02      	cmp	r3, #2
   250ae:	d006      	beq.n	250be <_sercom_get_default_pad+0x8e>
   250b0:	2b03      	cmp	r3, #3
   250b2:	d006      	beq.n	250c2 <_sercom_get_default_pad+0x92>
   250b4:	e05b      	b.n	2516e <_sercom_get_default_pad+0x13e>
   250b6:	2303      	movs	r3, #3
   250b8:	e05a      	b.n	25170 <_sercom_get_default_pad+0x140>
   250ba:	4b39      	ldr	r3, [pc, #228]	; (251a0 <_sercom_get_default_pad+0x170>)
   250bc:	e058      	b.n	25170 <_sercom_get_default_pad+0x140>
   250be:	4b39      	ldr	r3, [pc, #228]	; (251a4 <_sercom_get_default_pad+0x174>)
   250c0:	e056      	b.n	25170 <_sercom_get_default_pad+0x140>
   250c2:	4b39      	ldr	r3, [pc, #228]	; (251a8 <_sercom_get_default_pad+0x178>)
   250c4:	e054      	b.n	25170 <_sercom_get_default_pad+0x140>
   250c6:	1cfb      	adds	r3, r7, #3
   250c8:	781b      	ldrb	r3, [r3, #0]
   250ca:	2b01      	cmp	r3, #1
   250cc:	d00a      	beq.n	250e4 <_sercom_get_default_pad+0xb4>
   250ce:	dc02      	bgt.n	250d6 <_sercom_get_default_pad+0xa6>
   250d0:	2b00      	cmp	r3, #0
   250d2:	d005      	beq.n	250e0 <_sercom_get_default_pad+0xb0>
   250d4:	e04b      	b.n	2516e <_sercom_get_default_pad+0x13e>
   250d6:	2b02      	cmp	r3, #2
   250d8:	d006      	beq.n	250e8 <_sercom_get_default_pad+0xb8>
   250da:	2b03      	cmp	r3, #3
   250dc:	d006      	beq.n	250ec <_sercom_get_default_pad+0xbc>
   250de:	e046      	b.n	2516e <_sercom_get_default_pad+0x13e>
   250e0:	4b32      	ldr	r3, [pc, #200]	; (251ac <_sercom_get_default_pad+0x17c>)
   250e2:	e045      	b.n	25170 <_sercom_get_default_pad+0x140>
   250e4:	4b32      	ldr	r3, [pc, #200]	; (251b0 <_sercom_get_default_pad+0x180>)
   250e6:	e043      	b.n	25170 <_sercom_get_default_pad+0x140>
   250e8:	4b32      	ldr	r3, [pc, #200]	; (251b4 <_sercom_get_default_pad+0x184>)
   250ea:	e041      	b.n	25170 <_sercom_get_default_pad+0x140>
   250ec:	4b32      	ldr	r3, [pc, #200]	; (251b8 <_sercom_get_default_pad+0x188>)
   250ee:	e03f      	b.n	25170 <_sercom_get_default_pad+0x140>
   250f0:	1cfb      	adds	r3, r7, #3
   250f2:	781b      	ldrb	r3, [r3, #0]
   250f4:	2b01      	cmp	r3, #1
   250f6:	d00a      	beq.n	2510e <_sercom_get_default_pad+0xde>
   250f8:	dc02      	bgt.n	25100 <_sercom_get_default_pad+0xd0>
   250fa:	2b00      	cmp	r3, #0
   250fc:	d005      	beq.n	2510a <_sercom_get_default_pad+0xda>
   250fe:	e036      	b.n	2516e <_sercom_get_default_pad+0x13e>
   25100:	2b02      	cmp	r3, #2
   25102:	d006      	beq.n	25112 <_sercom_get_default_pad+0xe2>
   25104:	2b03      	cmp	r3, #3
   25106:	d006      	beq.n	25116 <_sercom_get_default_pad+0xe6>
   25108:	e031      	b.n	2516e <_sercom_get_default_pad+0x13e>
   2510a:	4b2c      	ldr	r3, [pc, #176]	; (251bc <_sercom_get_default_pad+0x18c>)
   2510c:	e030      	b.n	25170 <_sercom_get_default_pad+0x140>
   2510e:	4b2c      	ldr	r3, [pc, #176]	; (251c0 <_sercom_get_default_pad+0x190>)
   25110:	e02e      	b.n	25170 <_sercom_get_default_pad+0x140>
   25112:	4b2c      	ldr	r3, [pc, #176]	; (251c4 <_sercom_get_default_pad+0x194>)
   25114:	e02c      	b.n	25170 <_sercom_get_default_pad+0x140>
   25116:	4b2c      	ldr	r3, [pc, #176]	; (251c8 <_sercom_get_default_pad+0x198>)
   25118:	e02a      	b.n	25170 <_sercom_get_default_pad+0x140>
   2511a:	1cfb      	adds	r3, r7, #3
   2511c:	781b      	ldrb	r3, [r3, #0]
   2511e:	2b01      	cmp	r3, #1
   25120:	d00a      	beq.n	25138 <_sercom_get_default_pad+0x108>
   25122:	dc02      	bgt.n	2512a <_sercom_get_default_pad+0xfa>
   25124:	2b00      	cmp	r3, #0
   25126:	d005      	beq.n	25134 <_sercom_get_default_pad+0x104>
   25128:	e021      	b.n	2516e <_sercom_get_default_pad+0x13e>
   2512a:	2b02      	cmp	r3, #2
   2512c:	d006      	beq.n	2513c <_sercom_get_default_pad+0x10c>
   2512e:	2b03      	cmp	r3, #3
   25130:	d006      	beq.n	25140 <_sercom_get_default_pad+0x110>
   25132:	e01c      	b.n	2516e <_sercom_get_default_pad+0x13e>
   25134:	4b25      	ldr	r3, [pc, #148]	; (251cc <_sercom_get_default_pad+0x19c>)
   25136:	e01b      	b.n	25170 <_sercom_get_default_pad+0x140>
   25138:	4b25      	ldr	r3, [pc, #148]	; (251d0 <_sercom_get_default_pad+0x1a0>)
   2513a:	e019      	b.n	25170 <_sercom_get_default_pad+0x140>
   2513c:	4b25      	ldr	r3, [pc, #148]	; (251d4 <_sercom_get_default_pad+0x1a4>)
   2513e:	e017      	b.n	25170 <_sercom_get_default_pad+0x140>
   25140:	4b25      	ldr	r3, [pc, #148]	; (251d8 <_sercom_get_default_pad+0x1a8>)
   25142:	e015      	b.n	25170 <_sercom_get_default_pad+0x140>
   25144:	1cfb      	adds	r3, r7, #3
   25146:	781b      	ldrb	r3, [r3, #0]
   25148:	2b01      	cmp	r3, #1
   2514a:	d00a      	beq.n	25162 <_sercom_get_default_pad+0x132>
   2514c:	dc02      	bgt.n	25154 <_sercom_get_default_pad+0x124>
   2514e:	2b00      	cmp	r3, #0
   25150:	d005      	beq.n	2515e <_sercom_get_default_pad+0x12e>
   25152:	e00c      	b.n	2516e <_sercom_get_default_pad+0x13e>
   25154:	2b02      	cmp	r3, #2
   25156:	d006      	beq.n	25166 <_sercom_get_default_pad+0x136>
   25158:	2b03      	cmp	r3, #3
   2515a:	d006      	beq.n	2516a <_sercom_get_default_pad+0x13a>
   2515c:	e007      	b.n	2516e <_sercom_get_default_pad+0x13e>
   2515e:	4b1f      	ldr	r3, [pc, #124]	; (251dc <_sercom_get_default_pad+0x1ac>)
   25160:	e006      	b.n	25170 <_sercom_get_default_pad+0x140>
   25162:	4b1f      	ldr	r3, [pc, #124]	; (251e0 <_sercom_get_default_pad+0x1b0>)
   25164:	e004      	b.n	25170 <_sercom_get_default_pad+0x140>
   25166:	4b1f      	ldr	r3, [pc, #124]	; (251e4 <_sercom_get_default_pad+0x1b4>)
   25168:	e002      	b.n	25170 <_sercom_get_default_pad+0x140>
   2516a:	4b1f      	ldr	r3, [pc, #124]	; (251e8 <_sercom_get_default_pad+0x1b8>)
   2516c:	e000      	b.n	25170 <_sercom_get_default_pad+0x140>
   2516e:	2300      	movs	r3, #0
   25170:	0018      	movs	r0, r3
   25172:	46bd      	mov	sp, r7
   25174:	b002      	add	sp, #8
   25176:	bd80      	pop	{r7, pc}
   25178:	42001000 	.word	0x42001000
   2517c:	42000800 	.word	0x42000800
   25180:	42000c00 	.word	0x42000c00
   25184:	42001800 	.word	0x42001800
   25188:	42001c00 	.word	0x42001c00
   2518c:	42001400 	.word	0x42001400
   25190:	00040003 	.word	0x00040003
   25194:	00050003 	.word	0x00050003
   25198:	00060003 	.word	0x00060003
   2519c:	00070003 	.word	0x00070003
   251a0:	00010003 	.word	0x00010003
   251a4:	001e0003 	.word	0x001e0003
   251a8:	001f0003 	.word	0x001f0003
   251ac:	00080003 	.word	0x00080003
   251b0:	00090003 	.word	0x00090003
   251b4:	000a0003 	.word	0x000a0003
   251b8:	000b0003 	.word	0x000b0003
   251bc:	00100003 	.word	0x00100003
   251c0:	00110003 	.word	0x00110003
   251c4:	00120003 	.word	0x00120003
   251c8:	00130003 	.word	0x00130003
   251cc:	000c0003 	.word	0x000c0003
   251d0:	000d0003 	.word	0x000d0003
   251d4:	000e0003 	.word	0x000e0003
   251d8:	000f0003 	.word	0x000f0003
   251dc:	00160003 	.word	0x00160003
   251e0:	00170003 	.word	0x00170003
   251e4:	00180003 	.word	0x00180003
   251e8:	00190003 	.word	0x00190003

000251ec <_sercom_get_sercom_inst_index>:
   251ec:	b590      	push	{r4, r7, lr}
   251ee:	b08b      	sub	sp, #44	; 0x2c
   251f0:	af00      	add	r7, sp, #0
   251f2:	6078      	str	r0, [r7, #4]
   251f4:	230c      	movs	r3, #12
   251f6:	18fb      	adds	r3, r7, r3
   251f8:	4a0f      	ldr	r2, [pc, #60]	; (25238 <_sercom_get_sercom_inst_index+0x4c>)
   251fa:	ca13      	ldmia	r2!, {r0, r1, r4}
   251fc:	c313      	stmia	r3!, {r0, r1, r4}
   251fe:	ca13      	ldmia	r2!, {r0, r1, r4}
   25200:	c313      	stmia	r3!, {r0, r1, r4}
   25202:	2300      	movs	r3, #0
   25204:	627b      	str	r3, [r7, #36]	; 0x24
   25206:	e00e      	b.n	25226 <_sercom_get_sercom_inst_index+0x3a>
   25208:	230c      	movs	r3, #12
   2520a:	18fb      	adds	r3, r7, r3
   2520c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2520e:	0092      	lsls	r2, r2, #2
   25210:	58d3      	ldr	r3, [r2, r3]
   25212:	001a      	movs	r2, r3
   25214:	687b      	ldr	r3, [r7, #4]
   25216:	429a      	cmp	r2, r3
   25218:	d102      	bne.n	25220 <_sercom_get_sercom_inst_index+0x34>
   2521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2521c:	b2db      	uxtb	r3, r3
   2521e:	e006      	b.n	2522e <_sercom_get_sercom_inst_index+0x42>
   25220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25222:	3301      	adds	r3, #1
   25224:	627b      	str	r3, [r7, #36]	; 0x24
   25226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25228:	2b05      	cmp	r3, #5
   2522a:	d9ed      	bls.n	25208 <_sercom_get_sercom_inst_index+0x1c>
   2522c:	2300      	movs	r3, #0
   2522e:	0018      	movs	r0, r3
   25230:	46bd      	mov	sp, r7
   25232:	b00b      	add	sp, #44	; 0x2c
   25234:	bd90      	pop	{r4, r7, pc}
   25236:	46c0      	nop			; (mov r8, r8)
   25238:	00036938 	.word	0x00036938

0002523c <_sercom_default_handler>:
   2523c:	b580      	push	{r7, lr}
   2523e:	b082      	sub	sp, #8
   25240:	af00      	add	r7, sp, #0
   25242:	0002      	movs	r2, r0
   25244:	1dfb      	adds	r3, r7, #7
   25246:	701a      	strb	r2, [r3, #0]
   25248:	46c0      	nop			; (mov r8, r8)
   2524a:	46bd      	mov	sp, r7
   2524c:	b002      	add	sp, #8
   2524e:	bd80      	pop	{r7, pc}

00025250 <_sercom_set_handler>:
   25250:	b580      	push	{r7, lr}
   25252:	b084      	sub	sp, #16
   25254:	af00      	add	r7, sp, #0
   25256:	0002      	movs	r2, r0
   25258:	6039      	str	r1, [r7, #0]
   2525a:	1dfb      	adds	r3, r7, #7
   2525c:	701a      	strb	r2, [r3, #0]
   2525e:	4b13      	ldr	r3, [pc, #76]	; (252ac <_sercom_set_handler+0x5c>)
   25260:	781b      	ldrb	r3, [r3, #0]
   25262:	2201      	movs	r2, #1
   25264:	4053      	eors	r3, r2
   25266:	b2db      	uxtb	r3, r3
   25268:	2b00      	cmp	r3, #0
   2526a:	d015      	beq.n	25298 <_sercom_set_handler+0x48>
   2526c:	2300      	movs	r3, #0
   2526e:	60fb      	str	r3, [r7, #12]
   25270:	e00c      	b.n	2528c <_sercom_set_handler+0x3c>
   25272:	4b0f      	ldr	r3, [pc, #60]	; (252b0 <_sercom_set_handler+0x60>)
   25274:	68fa      	ldr	r2, [r7, #12]
   25276:	0092      	lsls	r2, r2, #2
   25278:	490e      	ldr	r1, [pc, #56]	; (252b4 <_sercom_set_handler+0x64>)
   2527a:	50d1      	str	r1, [r2, r3]
   2527c:	4b0e      	ldr	r3, [pc, #56]	; (252b8 <_sercom_set_handler+0x68>)
   2527e:	68fa      	ldr	r2, [r7, #12]
   25280:	0092      	lsls	r2, r2, #2
   25282:	2100      	movs	r1, #0
   25284:	50d1      	str	r1, [r2, r3]
   25286:	68fb      	ldr	r3, [r7, #12]
   25288:	3301      	adds	r3, #1
   2528a:	60fb      	str	r3, [r7, #12]
   2528c:	68fb      	ldr	r3, [r7, #12]
   2528e:	2b05      	cmp	r3, #5
   25290:	d9ef      	bls.n	25272 <_sercom_set_handler+0x22>
   25292:	4b06      	ldr	r3, [pc, #24]	; (252ac <_sercom_set_handler+0x5c>)
   25294:	2201      	movs	r2, #1
   25296:	701a      	strb	r2, [r3, #0]
   25298:	1dfb      	adds	r3, r7, #7
   2529a:	781a      	ldrb	r2, [r3, #0]
   2529c:	4b04      	ldr	r3, [pc, #16]	; (252b0 <_sercom_set_handler+0x60>)
   2529e:	0092      	lsls	r2, r2, #2
   252a0:	6839      	ldr	r1, [r7, #0]
   252a2:	50d1      	str	r1, [r2, r3]
   252a4:	46c0      	nop			; (mov r8, r8)
   252a6:	46bd      	mov	sp, r7
   252a8:	b004      	add	sp, #16
   252aa:	bd80      	pop	{r7, pc}
   252ac:	20003d1a 	.word	0x20003d1a
   252b0:	20003d1c 	.word	0x20003d1c
   252b4:	0002523d 	.word	0x0002523d
   252b8:	20005578 	.word	0x20005578

000252bc <_sercom_get_interrupt_vector>:
   252bc:	b590      	push	{r4, r7, lr}
   252be:	b085      	sub	sp, #20
   252c0:	af00      	add	r7, sp, #0
   252c2:	6078      	str	r0, [r7, #4]
   252c4:	2308      	movs	r3, #8
   252c6:	18fb      	adds	r3, r7, r3
   252c8:	4a0b      	ldr	r2, [pc, #44]	; (252f8 <_sercom_get_interrupt_vector+0x3c>)
   252ca:	6811      	ldr	r1, [r2, #0]
   252cc:	6019      	str	r1, [r3, #0]
   252ce:	8892      	ldrh	r2, [r2, #4]
   252d0:	809a      	strh	r2, [r3, #4]
   252d2:	230f      	movs	r3, #15
   252d4:	18fc      	adds	r4, r7, r3
   252d6:	687b      	ldr	r3, [r7, #4]
   252d8:	0018      	movs	r0, r3
   252da:	4b08      	ldr	r3, [pc, #32]	; (252fc <_sercom_get_interrupt_vector+0x40>)
   252dc:	4798      	blx	r3
   252de:	0003      	movs	r3, r0
   252e0:	7023      	strb	r3, [r4, #0]
   252e2:	230f      	movs	r3, #15
   252e4:	18fb      	adds	r3, r7, r3
   252e6:	781b      	ldrb	r3, [r3, #0]
   252e8:	2208      	movs	r2, #8
   252ea:	18ba      	adds	r2, r7, r2
   252ec:	5cd3      	ldrb	r3, [r2, r3]
   252ee:	b25b      	sxtb	r3, r3
   252f0:	0018      	movs	r0, r3
   252f2:	46bd      	mov	sp, r7
   252f4:	b005      	add	sp, #20
   252f6:	bd90      	pop	{r4, r7, pc}
   252f8:	00036950 	.word	0x00036950
   252fc:	000251ed 	.word	0x000251ed

00025300 <SERCOM0_Handler>:
   25300:	b580      	push	{r7, lr}
   25302:	af00      	add	r7, sp, #0
   25304:	4b03      	ldr	r3, [pc, #12]	; (25314 <SERCOM0_Handler+0x14>)
   25306:	681b      	ldr	r3, [r3, #0]
   25308:	2000      	movs	r0, #0
   2530a:	4798      	blx	r3
   2530c:	46c0      	nop			; (mov r8, r8)
   2530e:	46bd      	mov	sp, r7
   25310:	bd80      	pop	{r7, pc}
   25312:	46c0      	nop			; (mov r8, r8)
   25314:	20003d1c 	.word	0x20003d1c

00025318 <SERCOM1_Handler>:
   25318:	b580      	push	{r7, lr}
   2531a:	af00      	add	r7, sp, #0
   2531c:	4b03      	ldr	r3, [pc, #12]	; (2532c <SERCOM1_Handler+0x14>)
   2531e:	685b      	ldr	r3, [r3, #4]
   25320:	2001      	movs	r0, #1
   25322:	4798      	blx	r3
   25324:	46c0      	nop			; (mov r8, r8)
   25326:	46bd      	mov	sp, r7
   25328:	bd80      	pop	{r7, pc}
   2532a:	46c0      	nop			; (mov r8, r8)
   2532c:	20003d1c 	.word	0x20003d1c

00025330 <SERCOM2_Handler>:
   25330:	b580      	push	{r7, lr}
   25332:	af00      	add	r7, sp, #0
   25334:	4b03      	ldr	r3, [pc, #12]	; (25344 <SERCOM2_Handler+0x14>)
   25336:	689b      	ldr	r3, [r3, #8]
   25338:	2002      	movs	r0, #2
   2533a:	4798      	blx	r3
   2533c:	46c0      	nop			; (mov r8, r8)
   2533e:	46bd      	mov	sp, r7
   25340:	bd80      	pop	{r7, pc}
   25342:	46c0      	nop			; (mov r8, r8)
   25344:	20003d1c 	.word	0x20003d1c

00025348 <SERCOM3_Handler>:
   25348:	b580      	push	{r7, lr}
   2534a:	af00      	add	r7, sp, #0
   2534c:	4b03      	ldr	r3, [pc, #12]	; (2535c <SERCOM3_Handler+0x14>)
   2534e:	68db      	ldr	r3, [r3, #12]
   25350:	2003      	movs	r0, #3
   25352:	4798      	blx	r3
   25354:	46c0      	nop			; (mov r8, r8)
   25356:	46bd      	mov	sp, r7
   25358:	bd80      	pop	{r7, pc}
   2535a:	46c0      	nop			; (mov r8, r8)
   2535c:	20003d1c 	.word	0x20003d1c

00025360 <SERCOM4_Handler>:
   25360:	b580      	push	{r7, lr}
   25362:	af00      	add	r7, sp, #0
   25364:	4b03      	ldr	r3, [pc, #12]	; (25374 <SERCOM4_Handler+0x14>)
   25366:	691b      	ldr	r3, [r3, #16]
   25368:	2004      	movs	r0, #4
   2536a:	4798      	blx	r3
   2536c:	46c0      	nop			; (mov r8, r8)
   2536e:	46bd      	mov	sp, r7
   25370:	bd80      	pop	{r7, pc}
   25372:	46c0      	nop			; (mov r8, r8)
   25374:	20003d1c 	.word	0x20003d1c

00025378 <SERCOM5_Handler>:
   25378:	b580      	push	{r7, lr}
   2537a:	af00      	add	r7, sp, #0
   2537c:	4b03      	ldr	r3, [pc, #12]	; (2538c <SERCOM5_Handler+0x14>)
   2537e:	695b      	ldr	r3, [r3, #20]
   25380:	2005      	movs	r0, #5
   25382:	4798      	blx	r3
   25384:	46c0      	nop			; (mov r8, r8)
   25386:	46bd      	mov	sp, r7
   25388:	bd80      	pop	{r7, pc}
   2538a:	46c0      	nop			; (mov r8, r8)
   2538c:	20003d1c 	.word	0x20003d1c

00025390 <system_pinmux_get_config_defaults>:
   25390:	b580      	push	{r7, lr}
   25392:	b082      	sub	sp, #8
   25394:	af00      	add	r7, sp, #0
   25396:	6078      	str	r0, [r7, #4]
   25398:	687b      	ldr	r3, [r7, #4]
   2539a:	2280      	movs	r2, #128	; 0x80
   2539c:	701a      	strb	r2, [r3, #0]
   2539e:	687b      	ldr	r3, [r7, #4]
   253a0:	2200      	movs	r2, #0
   253a2:	705a      	strb	r2, [r3, #1]
   253a4:	687b      	ldr	r3, [r7, #4]
   253a6:	2201      	movs	r2, #1
   253a8:	709a      	strb	r2, [r3, #2]
   253aa:	687b      	ldr	r3, [r7, #4]
   253ac:	2200      	movs	r2, #0
   253ae:	70da      	strb	r2, [r3, #3]
   253b0:	46c0      	nop			; (mov r8, r8)
   253b2:	46bd      	mov	sp, r7
   253b4:	b002      	add	sp, #8
   253b6:	bd80      	pop	{r7, pc}

000253b8 <system_pinmux_get_group_from_gpio_pin>:
   253b8:	b580      	push	{r7, lr}
   253ba:	b084      	sub	sp, #16
   253bc:	af00      	add	r7, sp, #0
   253be:	0002      	movs	r2, r0
   253c0:	1dfb      	adds	r3, r7, #7
   253c2:	701a      	strb	r2, [r3, #0]
   253c4:	230f      	movs	r3, #15
   253c6:	18fb      	adds	r3, r7, r3
   253c8:	1dfa      	adds	r2, r7, #7
   253ca:	7812      	ldrb	r2, [r2, #0]
   253cc:	09d2      	lsrs	r2, r2, #7
   253ce:	701a      	strb	r2, [r3, #0]
   253d0:	230e      	movs	r3, #14
   253d2:	18fb      	adds	r3, r7, r3
   253d4:	1dfa      	adds	r2, r7, #7
   253d6:	7812      	ldrb	r2, [r2, #0]
   253d8:	0952      	lsrs	r2, r2, #5
   253da:	701a      	strb	r2, [r3, #0]
   253dc:	4b0d      	ldr	r3, [pc, #52]	; (25414 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   253de:	60bb      	str	r3, [r7, #8]
   253e0:	230f      	movs	r3, #15
   253e2:	18fb      	adds	r3, r7, r3
   253e4:	781b      	ldrb	r3, [r3, #0]
   253e6:	2b00      	cmp	r3, #0
   253e8:	d10f      	bne.n	2540a <system_pinmux_get_group_from_gpio_pin+0x52>
   253ea:	230f      	movs	r3, #15
   253ec:	18fb      	adds	r3, r7, r3
   253ee:	781b      	ldrb	r3, [r3, #0]
   253f0:	009b      	lsls	r3, r3, #2
   253f2:	2210      	movs	r2, #16
   253f4:	4694      	mov	ip, r2
   253f6:	44bc      	add	ip, r7
   253f8:	4463      	add	r3, ip
   253fa:	3b08      	subs	r3, #8
   253fc:	681a      	ldr	r2, [r3, #0]
   253fe:	230e      	movs	r3, #14
   25400:	18fb      	adds	r3, r7, r3
   25402:	781b      	ldrb	r3, [r3, #0]
   25404:	01db      	lsls	r3, r3, #7
   25406:	18d3      	adds	r3, r2, r3
   25408:	e000      	b.n	2540c <system_pinmux_get_group_from_gpio_pin+0x54>
   2540a:	2300      	movs	r3, #0
   2540c:	0018      	movs	r0, r3
   2540e:	46bd      	mov	sp, r7
   25410:	b004      	add	sp, #16
   25412:	bd80      	pop	{r7, pc}
   25414:	41004400 	.word	0x41004400

00025418 <port_get_group_from_gpio_pin>:
   25418:	b580      	push	{r7, lr}
   2541a:	b082      	sub	sp, #8
   2541c:	af00      	add	r7, sp, #0
   2541e:	0002      	movs	r2, r0
   25420:	1dfb      	adds	r3, r7, #7
   25422:	701a      	strb	r2, [r3, #0]
   25424:	1dfb      	adds	r3, r7, #7
   25426:	781b      	ldrb	r3, [r3, #0]
   25428:	0018      	movs	r0, r3
   2542a:	4b03      	ldr	r3, [pc, #12]	; (25438 <port_get_group_from_gpio_pin+0x20>)
   2542c:	4798      	blx	r3
   2542e:	0003      	movs	r3, r0
   25430:	0018      	movs	r0, r3
   25432:	46bd      	mov	sp, r7
   25434:	b002      	add	sp, #8
   25436:	bd80      	pop	{r7, pc}
   25438:	000253b9 	.word	0x000253b9

0002543c <port_pin_set_output_level>:
   2543c:	b580      	push	{r7, lr}
   2543e:	b084      	sub	sp, #16
   25440:	af00      	add	r7, sp, #0
   25442:	0002      	movs	r2, r0
   25444:	1dfb      	adds	r3, r7, #7
   25446:	701a      	strb	r2, [r3, #0]
   25448:	1dbb      	adds	r3, r7, #6
   2544a:	1c0a      	adds	r2, r1, #0
   2544c:	701a      	strb	r2, [r3, #0]
   2544e:	1dfb      	adds	r3, r7, #7
   25450:	781b      	ldrb	r3, [r3, #0]
   25452:	0018      	movs	r0, r3
   25454:	4b0d      	ldr	r3, [pc, #52]	; (2548c <port_pin_set_output_level+0x50>)
   25456:	4798      	blx	r3
   25458:	0003      	movs	r3, r0
   2545a:	60fb      	str	r3, [r7, #12]
   2545c:	1dfb      	adds	r3, r7, #7
   2545e:	781b      	ldrb	r3, [r3, #0]
   25460:	221f      	movs	r2, #31
   25462:	4013      	ands	r3, r2
   25464:	2201      	movs	r2, #1
   25466:	409a      	lsls	r2, r3
   25468:	0013      	movs	r3, r2
   2546a:	60bb      	str	r3, [r7, #8]
   2546c:	1dbb      	adds	r3, r7, #6
   2546e:	781b      	ldrb	r3, [r3, #0]
   25470:	2b00      	cmp	r3, #0
   25472:	d003      	beq.n	2547c <port_pin_set_output_level+0x40>
   25474:	68fb      	ldr	r3, [r7, #12]
   25476:	68ba      	ldr	r2, [r7, #8]
   25478:	619a      	str	r2, [r3, #24]
   2547a:	e002      	b.n	25482 <port_pin_set_output_level+0x46>
   2547c:	68fb      	ldr	r3, [r7, #12]
   2547e:	68ba      	ldr	r2, [r7, #8]
   25480:	615a      	str	r2, [r3, #20]
   25482:	46c0      	nop			; (mov r8, r8)
   25484:	46bd      	mov	sp, r7
   25486:	b004      	add	sp, #16
   25488:	bd80      	pop	{r7, pc}
   2548a:	46c0      	nop			; (mov r8, r8)
   2548c:	00025419 	.word	0x00025419

00025490 <system_gclk_chan_get_config_defaults>:
   25490:	b580      	push	{r7, lr}
   25492:	b082      	sub	sp, #8
   25494:	af00      	add	r7, sp, #0
   25496:	6078      	str	r0, [r7, #4]
   25498:	687b      	ldr	r3, [r7, #4]
   2549a:	2200      	movs	r2, #0
   2549c:	701a      	strb	r2, [r3, #0]
   2549e:	46c0      	nop			; (mov r8, r8)
   254a0:	46bd      	mov	sp, r7
   254a2:	b002      	add	sp, #8
   254a4:	bd80      	pop	{r7, pc}
	...

000254a8 <system_apb_clock_set_mask>:
   254a8:	b580      	push	{r7, lr}
   254aa:	b082      	sub	sp, #8
   254ac:	af00      	add	r7, sp, #0
   254ae:	0002      	movs	r2, r0
   254b0:	6039      	str	r1, [r7, #0]
   254b2:	1dfb      	adds	r3, r7, #7
   254b4:	701a      	strb	r2, [r3, #0]
   254b6:	1dfb      	adds	r3, r7, #7
   254b8:	781b      	ldrb	r3, [r3, #0]
   254ba:	2b01      	cmp	r3, #1
   254bc:	d00a      	beq.n	254d4 <system_apb_clock_set_mask+0x2c>
   254be:	2b02      	cmp	r3, #2
   254c0:	d00f      	beq.n	254e2 <system_apb_clock_set_mask+0x3a>
   254c2:	2b00      	cmp	r3, #0
   254c4:	d114      	bne.n	254f0 <system_apb_clock_set_mask+0x48>
   254c6:	4b0e      	ldr	r3, [pc, #56]	; (25500 <system_apb_clock_set_mask+0x58>)
   254c8:	4a0d      	ldr	r2, [pc, #52]	; (25500 <system_apb_clock_set_mask+0x58>)
   254ca:	6991      	ldr	r1, [r2, #24]
   254cc:	683a      	ldr	r2, [r7, #0]
   254ce:	430a      	orrs	r2, r1
   254d0:	619a      	str	r2, [r3, #24]
   254d2:	e00f      	b.n	254f4 <system_apb_clock_set_mask+0x4c>
   254d4:	4b0a      	ldr	r3, [pc, #40]	; (25500 <system_apb_clock_set_mask+0x58>)
   254d6:	4a0a      	ldr	r2, [pc, #40]	; (25500 <system_apb_clock_set_mask+0x58>)
   254d8:	69d1      	ldr	r1, [r2, #28]
   254da:	683a      	ldr	r2, [r7, #0]
   254dc:	430a      	orrs	r2, r1
   254de:	61da      	str	r2, [r3, #28]
   254e0:	e008      	b.n	254f4 <system_apb_clock_set_mask+0x4c>
   254e2:	4b07      	ldr	r3, [pc, #28]	; (25500 <system_apb_clock_set_mask+0x58>)
   254e4:	4a06      	ldr	r2, [pc, #24]	; (25500 <system_apb_clock_set_mask+0x58>)
   254e6:	6a11      	ldr	r1, [r2, #32]
   254e8:	683a      	ldr	r2, [r7, #0]
   254ea:	430a      	orrs	r2, r1
   254ec:	621a      	str	r2, [r3, #32]
   254ee:	e001      	b.n	254f4 <system_apb_clock_set_mask+0x4c>
   254f0:	2317      	movs	r3, #23
   254f2:	e000      	b.n	254f6 <system_apb_clock_set_mask+0x4e>
   254f4:	2300      	movs	r3, #0
   254f6:	0018      	movs	r0, r3
   254f8:	46bd      	mov	sp, r7
   254fa:	b002      	add	sp, #8
   254fc:	bd80      	pop	{r7, pc}
   254fe:	46c0      	nop			; (mov r8, r8)
   25500:	40000400 	.word	0x40000400

00025504 <system_is_debugger_present>:
   25504:	b580      	push	{r7, lr}
   25506:	af00      	add	r7, sp, #0
   25508:	4b05      	ldr	r3, [pc, #20]	; (25520 <system_is_debugger_present+0x1c>)
   2550a:	789b      	ldrb	r3, [r3, #2]
   2550c:	b2db      	uxtb	r3, r3
   2550e:	001a      	movs	r2, r3
   25510:	2302      	movs	r3, #2
   25512:	4013      	ands	r3, r2
   25514:	1e5a      	subs	r2, r3, #1
   25516:	4193      	sbcs	r3, r2
   25518:	b2db      	uxtb	r3, r3
   2551a:	0018      	movs	r0, r3
   2551c:	46bd      	mov	sp, r7
   2551e:	bd80      	pop	{r7, pc}
   25520:	41002000 	.word	0x41002000

00025524 <system_interrupt_enable>:
   25524:	b580      	push	{r7, lr}
   25526:	b082      	sub	sp, #8
   25528:	af00      	add	r7, sp, #0
   2552a:	0002      	movs	r2, r0
   2552c:	1dfb      	adds	r3, r7, #7
   2552e:	701a      	strb	r2, [r3, #0]
   25530:	4b06      	ldr	r3, [pc, #24]	; (2554c <system_interrupt_enable+0x28>)
   25532:	1dfa      	adds	r2, r7, #7
   25534:	7812      	ldrb	r2, [r2, #0]
   25536:	0011      	movs	r1, r2
   25538:	221f      	movs	r2, #31
   2553a:	400a      	ands	r2, r1
   2553c:	2101      	movs	r1, #1
   2553e:	4091      	lsls	r1, r2
   25540:	000a      	movs	r2, r1
   25542:	601a      	str	r2, [r3, #0]
   25544:	46c0      	nop			; (mov r8, r8)
   25546:	46bd      	mov	sp, r7
   25548:	b002      	add	sp, #8
   2554a:	bd80      	pop	{r7, pc}
   2554c:	e000e100 	.word	0xe000e100

00025550 <system_interrupt_disable>:
   25550:	b580      	push	{r7, lr}
   25552:	b082      	sub	sp, #8
   25554:	af00      	add	r7, sp, #0
   25556:	0002      	movs	r2, r0
   25558:	1dfb      	adds	r3, r7, #7
   2555a:	701a      	strb	r2, [r3, #0]
   2555c:	4a07      	ldr	r2, [pc, #28]	; (2557c <system_interrupt_disable+0x2c>)
   2555e:	1dfb      	adds	r3, r7, #7
   25560:	781b      	ldrb	r3, [r3, #0]
   25562:	0019      	movs	r1, r3
   25564:	231f      	movs	r3, #31
   25566:	400b      	ands	r3, r1
   25568:	2101      	movs	r1, #1
   2556a:	4099      	lsls	r1, r3
   2556c:	000b      	movs	r3, r1
   2556e:	0019      	movs	r1, r3
   25570:	2380      	movs	r3, #128	; 0x80
   25572:	50d1      	str	r1, [r2, r3]
   25574:	46c0      	nop			; (mov r8, r8)
   25576:	46bd      	mov	sp, r7
   25578:	b002      	add	sp, #8
   2557a:	bd80      	pop	{r7, pc}
   2557c:	e000e100 	.word	0xe000e100

00025580 <spi_is_syncing>:
   25580:	b580      	push	{r7, lr}
   25582:	b084      	sub	sp, #16
   25584:	af00      	add	r7, sp, #0
   25586:	6078      	str	r0, [r7, #4]
   25588:	687b      	ldr	r3, [r7, #4]
   2558a:	681b      	ldr	r3, [r3, #0]
   2558c:	60fb      	str	r3, [r7, #12]
   2558e:	68fb      	ldr	r3, [r7, #12]
   25590:	69db      	ldr	r3, [r3, #28]
   25592:	1e5a      	subs	r2, r3, #1
   25594:	4193      	sbcs	r3, r2
   25596:	b2db      	uxtb	r3, r3
   25598:	0018      	movs	r0, r3
   2559a:	46bd      	mov	sp, r7
   2559c:	b004      	add	sp, #16
   2559e:	bd80      	pop	{r7, pc}

000255a0 <spi_enable>:
   255a0:	b580      	push	{r7, lr}
   255a2:	b084      	sub	sp, #16
   255a4:	af00      	add	r7, sp, #0
   255a6:	6078      	str	r0, [r7, #4]
   255a8:	687b      	ldr	r3, [r7, #4]
   255aa:	681b      	ldr	r3, [r3, #0]
   255ac:	60fb      	str	r3, [r7, #12]
   255ae:	687b      	ldr	r3, [r7, #4]
   255b0:	681b      	ldr	r3, [r3, #0]
   255b2:	0018      	movs	r0, r3
   255b4:	4b0b      	ldr	r3, [pc, #44]	; (255e4 <spi_enable+0x44>)
   255b6:	4798      	blx	r3
   255b8:	0003      	movs	r3, r0
   255ba:	0018      	movs	r0, r3
   255bc:	4b0a      	ldr	r3, [pc, #40]	; (255e8 <spi_enable+0x48>)
   255be:	4798      	blx	r3
   255c0:	46c0      	nop			; (mov r8, r8)
   255c2:	687b      	ldr	r3, [r7, #4]
   255c4:	0018      	movs	r0, r3
   255c6:	4b09      	ldr	r3, [pc, #36]	; (255ec <spi_enable+0x4c>)
   255c8:	4798      	blx	r3
   255ca:	1e03      	subs	r3, r0, #0
   255cc:	d1f9      	bne.n	255c2 <spi_enable+0x22>
   255ce:	68fb      	ldr	r3, [r7, #12]
   255d0:	681b      	ldr	r3, [r3, #0]
   255d2:	2202      	movs	r2, #2
   255d4:	431a      	orrs	r2, r3
   255d6:	68fb      	ldr	r3, [r7, #12]
   255d8:	601a      	str	r2, [r3, #0]
   255da:	46c0      	nop			; (mov r8, r8)
   255dc:	46bd      	mov	sp, r7
   255de:	b004      	add	sp, #16
   255e0:	bd80      	pop	{r7, pc}
   255e2:	46c0      	nop			; (mov r8, r8)
   255e4:	000252bd 	.word	0x000252bd
   255e8:	00025525 	.word	0x00025525
   255ec:	00025581 	.word	0x00025581

000255f0 <spi_disable>:
   255f0:	b580      	push	{r7, lr}
   255f2:	b084      	sub	sp, #16
   255f4:	af00      	add	r7, sp, #0
   255f6:	6078      	str	r0, [r7, #4]
   255f8:	687b      	ldr	r3, [r7, #4]
   255fa:	681b      	ldr	r3, [r3, #0]
   255fc:	60fb      	str	r3, [r7, #12]
   255fe:	687b      	ldr	r3, [r7, #4]
   25600:	681b      	ldr	r3, [r3, #0]
   25602:	0018      	movs	r0, r3
   25604:	4b0e      	ldr	r3, [pc, #56]	; (25640 <spi_disable+0x50>)
   25606:	4798      	blx	r3
   25608:	0003      	movs	r3, r0
   2560a:	0018      	movs	r0, r3
   2560c:	4b0d      	ldr	r3, [pc, #52]	; (25644 <spi_disable+0x54>)
   2560e:	4798      	blx	r3
   25610:	46c0      	nop			; (mov r8, r8)
   25612:	687b      	ldr	r3, [r7, #4]
   25614:	0018      	movs	r0, r3
   25616:	4b0c      	ldr	r3, [pc, #48]	; (25648 <spi_disable+0x58>)
   25618:	4798      	blx	r3
   2561a:	1e03      	subs	r3, r0, #0
   2561c:	d1f9      	bne.n	25612 <spi_disable+0x22>
   2561e:	68fb      	ldr	r3, [r7, #12]
   25620:	228f      	movs	r2, #143	; 0x8f
   25622:	751a      	strb	r2, [r3, #20]
   25624:	68fb      	ldr	r3, [r7, #12]
   25626:	228f      	movs	r2, #143	; 0x8f
   25628:	761a      	strb	r2, [r3, #24]
   2562a:	68fb      	ldr	r3, [r7, #12]
   2562c:	681b      	ldr	r3, [r3, #0]
   2562e:	2202      	movs	r2, #2
   25630:	4393      	bics	r3, r2
   25632:	001a      	movs	r2, r3
   25634:	68fb      	ldr	r3, [r7, #12]
   25636:	601a      	str	r2, [r3, #0]
   25638:	46c0      	nop			; (mov r8, r8)
   2563a:	46bd      	mov	sp, r7
   2563c:	b004      	add	sp, #16
   2563e:	bd80      	pop	{r7, pc}
   25640:	000252bd 	.word	0x000252bd
   25644:	00025551 	.word	0x00025551
   25648:	00025581 	.word	0x00025581

0002564c <spi_is_write_complete>:
   2564c:	b580      	push	{r7, lr}
   2564e:	b084      	sub	sp, #16
   25650:	af00      	add	r7, sp, #0
   25652:	6078      	str	r0, [r7, #4]
   25654:	687b      	ldr	r3, [r7, #4]
   25656:	681b      	ldr	r3, [r3, #0]
   25658:	60fb      	str	r3, [r7, #12]
   2565a:	68fb      	ldr	r3, [r7, #12]
   2565c:	7e1b      	ldrb	r3, [r3, #24]
   2565e:	b2db      	uxtb	r3, r3
   25660:	001a      	movs	r2, r3
   25662:	2302      	movs	r3, #2
   25664:	4013      	ands	r3, r2
   25666:	1e5a      	subs	r2, r3, #1
   25668:	4193      	sbcs	r3, r2
   2566a:	b2db      	uxtb	r3, r3
   2566c:	0018      	movs	r0, r3
   2566e:	46bd      	mov	sp, r7
   25670:	b004      	add	sp, #16
   25672:	bd80      	pop	{r7, pc}

00025674 <spi_is_ready_to_write>:
   25674:	b580      	push	{r7, lr}
   25676:	b084      	sub	sp, #16
   25678:	af00      	add	r7, sp, #0
   2567a:	6078      	str	r0, [r7, #4]
   2567c:	687b      	ldr	r3, [r7, #4]
   2567e:	681b      	ldr	r3, [r3, #0]
   25680:	60fb      	str	r3, [r7, #12]
   25682:	68fb      	ldr	r3, [r7, #12]
   25684:	7e1b      	ldrb	r3, [r3, #24]
   25686:	b2db      	uxtb	r3, r3
   25688:	001a      	movs	r2, r3
   2568a:	2301      	movs	r3, #1
   2568c:	4013      	ands	r3, r2
   2568e:	1e5a      	subs	r2, r3, #1
   25690:	4193      	sbcs	r3, r2
   25692:	b2db      	uxtb	r3, r3
   25694:	0018      	movs	r0, r3
   25696:	46bd      	mov	sp, r7
   25698:	b004      	add	sp, #16
   2569a:	bd80      	pop	{r7, pc}

0002569c <spi_is_ready_to_read>:
   2569c:	b580      	push	{r7, lr}
   2569e:	b084      	sub	sp, #16
   256a0:	af00      	add	r7, sp, #0
   256a2:	6078      	str	r0, [r7, #4]
   256a4:	687b      	ldr	r3, [r7, #4]
   256a6:	681b      	ldr	r3, [r3, #0]
   256a8:	60fb      	str	r3, [r7, #12]
   256aa:	68fb      	ldr	r3, [r7, #12]
   256ac:	7e1b      	ldrb	r3, [r3, #24]
   256ae:	b2db      	uxtb	r3, r3
   256b0:	001a      	movs	r2, r3
   256b2:	2304      	movs	r3, #4
   256b4:	4013      	ands	r3, r2
   256b6:	1e5a      	subs	r2, r3, #1
   256b8:	4193      	sbcs	r3, r2
   256ba:	b2db      	uxtb	r3, r3
   256bc:	0018      	movs	r0, r3
   256be:	46bd      	mov	sp, r7
   256c0:	b004      	add	sp, #16
   256c2:	bd80      	pop	{r7, pc}

000256c4 <spi_write>:
   256c4:	b580      	push	{r7, lr}
   256c6:	b084      	sub	sp, #16
   256c8:	af00      	add	r7, sp, #0
   256ca:	6078      	str	r0, [r7, #4]
   256cc:	000a      	movs	r2, r1
   256ce:	1cbb      	adds	r3, r7, #2
   256d0:	801a      	strh	r2, [r3, #0]
   256d2:	687b      	ldr	r3, [r7, #4]
   256d4:	681b      	ldr	r3, [r3, #0]
   256d6:	60fb      	str	r3, [r7, #12]
   256d8:	687b      	ldr	r3, [r7, #4]
   256da:	0018      	movs	r0, r3
   256dc:	4b0a      	ldr	r3, [pc, #40]	; (25708 <spi_write+0x44>)
   256de:	4798      	blx	r3
   256e0:	0003      	movs	r3, r0
   256e2:	001a      	movs	r2, r3
   256e4:	2301      	movs	r3, #1
   256e6:	4053      	eors	r3, r2
   256e8:	b2db      	uxtb	r3, r3
   256ea:	2b00      	cmp	r3, #0
   256ec:	d001      	beq.n	256f2 <spi_write+0x2e>
   256ee:	2305      	movs	r3, #5
   256f0:	e006      	b.n	25700 <spi_write+0x3c>
   256f2:	1cbb      	adds	r3, r7, #2
   256f4:	881b      	ldrh	r3, [r3, #0]
   256f6:	05db      	lsls	r3, r3, #23
   256f8:	0dda      	lsrs	r2, r3, #23
   256fa:	68fb      	ldr	r3, [r7, #12]
   256fc:	629a      	str	r2, [r3, #40]	; 0x28
   256fe:	2300      	movs	r3, #0
   25700:	0018      	movs	r0, r3
   25702:	46bd      	mov	sp, r7
   25704:	b004      	add	sp, #16
   25706:	bd80      	pop	{r7, pc}
   25708:	00025675 	.word	0x00025675

0002570c <spi_read>:
   2570c:	b580      	push	{r7, lr}
   2570e:	b084      	sub	sp, #16
   25710:	af00      	add	r7, sp, #0
   25712:	6078      	str	r0, [r7, #4]
   25714:	6039      	str	r1, [r7, #0]
   25716:	687b      	ldr	r3, [r7, #4]
   25718:	681b      	ldr	r3, [r3, #0]
   2571a:	60bb      	str	r3, [r7, #8]
   2571c:	687b      	ldr	r3, [r7, #4]
   2571e:	0018      	movs	r0, r3
   25720:	4b1b      	ldr	r3, [pc, #108]	; (25790 <spi_read+0x84>)
   25722:	4798      	blx	r3
   25724:	0003      	movs	r3, r0
   25726:	001a      	movs	r2, r3
   25728:	2301      	movs	r3, #1
   2572a:	4053      	eors	r3, r2
   2572c:	b2db      	uxtb	r3, r3
   2572e:	2b00      	cmp	r3, #0
   25730:	d001      	beq.n	25736 <spi_read+0x2a>
   25732:	2310      	movs	r3, #16
   25734:	e027      	b.n	25786 <spi_read+0x7a>
   25736:	230f      	movs	r3, #15
   25738:	18fb      	adds	r3, r7, r3
   2573a:	2200      	movs	r2, #0
   2573c:	701a      	strb	r2, [r3, #0]
   2573e:	68bb      	ldr	r3, [r7, #8]
   25740:	8b5b      	ldrh	r3, [r3, #26]
   25742:	b29b      	uxth	r3, r3
   25744:	001a      	movs	r2, r3
   25746:	2304      	movs	r3, #4
   25748:	4013      	ands	r3, r2
   2574a:	d006      	beq.n	2575a <spi_read+0x4e>
   2574c:	230f      	movs	r3, #15
   2574e:	18fb      	adds	r3, r7, r3
   25750:	221e      	movs	r2, #30
   25752:	701a      	strb	r2, [r3, #0]
   25754:	68bb      	ldr	r3, [r7, #8]
   25756:	2204      	movs	r2, #4
   25758:	835a      	strh	r2, [r3, #26]
   2575a:	687b      	ldr	r3, [r7, #4]
   2575c:	799b      	ldrb	r3, [r3, #6]
   2575e:	2b01      	cmp	r3, #1
   25760:	d108      	bne.n	25774 <spi_read+0x68>
   25762:	68bb      	ldr	r3, [r7, #8]
   25764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   25766:	b29b      	uxth	r3, r3
   25768:	05db      	lsls	r3, r3, #23
   2576a:	0ddb      	lsrs	r3, r3, #23
   2576c:	b29a      	uxth	r2, r3
   2576e:	683b      	ldr	r3, [r7, #0]
   25770:	801a      	strh	r2, [r3, #0]
   25772:	e005      	b.n	25780 <spi_read+0x74>
   25774:	68bb      	ldr	r3, [r7, #8]
   25776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   25778:	b2db      	uxtb	r3, r3
   2577a:	b29a      	uxth	r2, r3
   2577c:	683b      	ldr	r3, [r7, #0]
   2577e:	801a      	strh	r2, [r3, #0]
   25780:	230f      	movs	r3, #15
   25782:	18fb      	adds	r3, r7, r3
   25784:	781b      	ldrb	r3, [r3, #0]
   25786:	0018      	movs	r0, r3
   25788:	46bd      	mov	sp, r7
   2578a:	b004      	add	sp, #16
   2578c:	bd80      	pop	{r7, pc}
   2578e:	46c0      	nop			; (mov r8, r8)
   25790:	0002569d 	.word	0x0002569d

00025794 <spi_set_baudrate>:
   25794:	b590      	push	{r4, r7, lr}
   25796:	b089      	sub	sp, #36	; 0x24
   25798:	af00      	add	r7, sp, #0
   2579a:	6078      	str	r0, [r7, #4]
   2579c:	6039      	str	r1, [r7, #0]
   2579e:	230c      	movs	r3, #12
   257a0:	18fb      	adds	r3, r7, r3
   257a2:	2200      	movs	r2, #0
   257a4:	801a      	strh	r2, [r3, #0]
   257a6:	687b      	ldr	r3, [r7, #4]
   257a8:	681b      	ldr	r3, [r3, #0]
   257aa:	61fb      	str	r3, [r7, #28]
   257ac:	687b      	ldr	r3, [r7, #4]
   257ae:	0018      	movs	r0, r3
   257b0:	4b24      	ldr	r3, [pc, #144]	; (25844 <spi_set_baudrate+0xb0>)
   257b2:	4798      	blx	r3
   257b4:	46c0      	nop			; (mov r8, r8)
   257b6:	687b      	ldr	r3, [r7, #4]
   257b8:	0018      	movs	r0, r3
   257ba:	4b23      	ldr	r3, [pc, #140]	; (25848 <spi_set_baudrate+0xb4>)
   257bc:	4798      	blx	r3
   257be:	1e03      	subs	r3, r0, #0
   257c0:	d1f9      	bne.n	257b6 <spi_set_baudrate+0x22>
   257c2:	687b      	ldr	r3, [r7, #4]
   257c4:	681b      	ldr	r3, [r3, #0]
   257c6:	0018      	movs	r0, r3
   257c8:	4b20      	ldr	r3, [pc, #128]	; (2584c <spi_set_baudrate+0xb8>)
   257ca:	4798      	blx	r3
   257cc:	0003      	movs	r3, r0
   257ce:	61bb      	str	r3, [r7, #24]
   257d0:	69bb      	ldr	r3, [r7, #24]
   257d2:	3314      	adds	r3, #20
   257d4:	617b      	str	r3, [r7, #20]
   257d6:	697b      	ldr	r3, [r7, #20]
   257d8:	b2db      	uxtb	r3, r3
   257da:	0018      	movs	r0, r3
   257dc:	4b1c      	ldr	r3, [pc, #112]	; (25850 <spi_set_baudrate+0xbc>)
   257de:	4798      	blx	r3
   257e0:	0003      	movs	r3, r0
   257e2:	613b      	str	r3, [r7, #16]
   257e4:	230f      	movs	r3, #15
   257e6:	18fc      	adds	r4, r7, r3
   257e8:	230c      	movs	r3, #12
   257ea:	18fa      	adds	r2, r7, r3
   257ec:	6939      	ldr	r1, [r7, #16]
   257ee:	683b      	ldr	r3, [r7, #0]
   257f0:	0018      	movs	r0, r3
   257f2:	4b18      	ldr	r3, [pc, #96]	; (25854 <spi_set_baudrate+0xc0>)
   257f4:	4798      	blx	r3
   257f6:	0003      	movs	r3, r0
   257f8:	7023      	strb	r3, [r4, #0]
   257fa:	230f      	movs	r3, #15
   257fc:	18fb      	adds	r3, r7, r3
   257fe:	781b      	ldrb	r3, [r3, #0]
   25800:	2b00      	cmp	r3, #0
   25802:	d001      	beq.n	25808 <spi_set_baudrate+0x74>
   25804:	2317      	movs	r3, #23
   25806:	e018      	b.n	2583a <spi_set_baudrate+0xa6>
   25808:	230c      	movs	r3, #12
   2580a:	18fb      	adds	r3, r7, r3
   2580c:	881b      	ldrh	r3, [r3, #0]
   2580e:	b2da      	uxtb	r2, r3
   25810:	69fb      	ldr	r3, [r7, #28]
   25812:	731a      	strb	r2, [r3, #12]
   25814:	46c0      	nop			; (mov r8, r8)
   25816:	687b      	ldr	r3, [r7, #4]
   25818:	0018      	movs	r0, r3
   2581a:	4b0b      	ldr	r3, [pc, #44]	; (25848 <spi_set_baudrate+0xb4>)
   2581c:	4798      	blx	r3
   2581e:	1e03      	subs	r3, r0, #0
   25820:	d1f9      	bne.n	25816 <spi_set_baudrate+0x82>
   25822:	687b      	ldr	r3, [r7, #4]
   25824:	0018      	movs	r0, r3
   25826:	4b0c      	ldr	r3, [pc, #48]	; (25858 <spi_set_baudrate+0xc4>)
   25828:	4798      	blx	r3
   2582a:	46c0      	nop			; (mov r8, r8)
   2582c:	687b      	ldr	r3, [r7, #4]
   2582e:	0018      	movs	r0, r3
   25830:	4b05      	ldr	r3, [pc, #20]	; (25848 <spi_set_baudrate+0xb4>)
   25832:	4798      	blx	r3
   25834:	1e03      	subs	r3, r0, #0
   25836:	d1f9      	bne.n	2582c <spi_set_baudrate+0x98>
   25838:	2300      	movs	r3, #0
   2583a:	0018      	movs	r0, r3
   2583c:	46bd      	mov	sp, r7
   2583e:	b009      	add	sp, #36	; 0x24
   25840:	bd90      	pop	{r4, r7, pc}
   25842:	46c0      	nop			; (mov r8, r8)
   25844:	000255f1 	.word	0x000255f1
   25848:	00025581 	.word	0x00025581
   2584c:	000251ed 	.word	0x000251ed
   25850:	00027ba1 	.word	0x00027ba1
   25854:	00024d67 	.word	0x00024d67
   25858:	000255a1 	.word	0x000255a1

0002585c <_spi_set_config>:
   2585c:	b590      	push	{r4, r7, lr}
   2585e:	b093      	sub	sp, #76	; 0x4c
   25860:	af00      	add	r7, sp, #0
   25862:	6078      	str	r0, [r7, #4]
   25864:	6039      	str	r1, [r7, #0]
   25866:	687b      	ldr	r3, [r7, #4]
   25868:	681b      	ldr	r3, [r3, #0]
   2586a:	637b      	str	r3, [r7, #52]	; 0x34
   2586c:	687b      	ldr	r3, [r7, #4]
   2586e:	681b      	ldr	r3, [r3, #0]
   25870:	633b      	str	r3, [r7, #48]	; 0x30
   25872:	231c      	movs	r3, #28
   25874:	18fb      	adds	r3, r7, r3
   25876:	0018      	movs	r0, r3
   25878:	4b75      	ldr	r3, [pc, #468]	; (25a50 <_spi_set_config+0x1f4>)
   2587a:	4798      	blx	r3
   2587c:	231c      	movs	r3, #28
   2587e:	18fb      	adds	r3, r7, r3
   25880:	2200      	movs	r2, #0
   25882:	705a      	strb	r2, [r3, #1]
   25884:	683b      	ldr	r3, [r7, #0]
   25886:	781b      	ldrb	r3, [r3, #0]
   25888:	2b00      	cmp	r3, #0
   2588a:	d103      	bne.n	25894 <_spi_set_config+0x38>
   2588c:	231c      	movs	r3, #28
   2588e:	18fb      	adds	r3, r7, r3
   25890:	2200      	movs	r2, #0
   25892:	709a      	strb	r2, [r3, #2]
   25894:	683b      	ldr	r3, [r7, #0]
   25896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   25898:	230c      	movs	r3, #12
   2589a:	18fb      	adds	r3, r7, r3
   2589c:	601a      	str	r2, [r3, #0]
   2589e:	683b      	ldr	r3, [r7, #0]
   258a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   258a2:	230c      	movs	r3, #12
   258a4:	18fb      	adds	r3, r7, r3
   258a6:	605a      	str	r2, [r3, #4]
   258a8:	683b      	ldr	r3, [r7, #0]
   258aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   258ac:	230c      	movs	r3, #12
   258ae:	18fb      	adds	r3, r7, r3
   258b0:	609a      	str	r2, [r3, #8]
   258b2:	683b      	ldr	r3, [r7, #0]
   258b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   258b6:	230c      	movs	r3, #12
   258b8:	18fb      	adds	r3, r7, r3
   258ba:	60da      	str	r2, [r3, #12]
   258bc:	2347      	movs	r3, #71	; 0x47
   258be:	18fb      	adds	r3, r7, r3
   258c0:	2200      	movs	r2, #0
   258c2:	701a      	strb	r2, [r3, #0]
   258c4:	e02c      	b.n	25920 <_spi_set_config+0xc4>
   258c6:	2347      	movs	r3, #71	; 0x47
   258c8:	18fb      	adds	r3, r7, r3
   258ca:	781a      	ldrb	r2, [r3, #0]
   258cc:	230c      	movs	r3, #12
   258ce:	18fb      	adds	r3, r7, r3
   258d0:	0092      	lsls	r2, r2, #2
   258d2:	58d3      	ldr	r3, [r2, r3]
   258d4:	643b      	str	r3, [r7, #64]	; 0x40
   258d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   258d8:	2b00      	cmp	r3, #0
   258da:	d109      	bne.n	258f0 <_spi_set_config+0x94>
   258dc:	2347      	movs	r3, #71	; 0x47
   258de:	18fb      	adds	r3, r7, r3
   258e0:	781a      	ldrb	r2, [r3, #0]
   258e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   258e4:	0011      	movs	r1, r2
   258e6:	0018      	movs	r0, r3
   258e8:	4b5a      	ldr	r3, [pc, #360]	; (25a54 <_spi_set_config+0x1f8>)
   258ea:	4798      	blx	r3
   258ec:	0003      	movs	r3, r0
   258ee:	643b      	str	r3, [r7, #64]	; 0x40
   258f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   258f2:	3301      	adds	r3, #1
   258f4:	d00d      	beq.n	25912 <_spi_set_config+0xb6>
   258f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   258f8:	b2da      	uxtb	r2, r3
   258fa:	231c      	movs	r3, #28
   258fc:	18fb      	adds	r3, r7, r3
   258fe:	701a      	strb	r2, [r3, #0]
   25900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   25902:	0c1b      	lsrs	r3, r3, #16
   25904:	b2db      	uxtb	r3, r3
   25906:	221c      	movs	r2, #28
   25908:	18ba      	adds	r2, r7, r2
   2590a:	0011      	movs	r1, r2
   2590c:	0018      	movs	r0, r3
   2590e:	4b52      	ldr	r3, [pc, #328]	; (25a58 <_spi_set_config+0x1fc>)
   25910:	4798      	blx	r3
   25912:	2347      	movs	r3, #71	; 0x47
   25914:	18fb      	adds	r3, r7, r3
   25916:	781a      	ldrb	r2, [r3, #0]
   25918:	2347      	movs	r3, #71	; 0x47
   2591a:	18fb      	adds	r3, r7, r3
   2591c:	3201      	adds	r2, #1
   2591e:	701a      	strb	r2, [r3, #0]
   25920:	2347      	movs	r3, #71	; 0x47
   25922:	18fb      	adds	r3, r7, r3
   25924:	781b      	ldrb	r3, [r3, #0]
   25926:	2b03      	cmp	r3, #3
   25928:	d9cd      	bls.n	258c6 <_spi_set_config+0x6a>
   2592a:	683b      	ldr	r3, [r7, #0]
   2592c:	781a      	ldrb	r2, [r3, #0]
   2592e:	687b      	ldr	r3, [r7, #4]
   25930:	715a      	strb	r2, [r3, #5]
   25932:	683b      	ldr	r3, [r7, #0]
   25934:	7c1a      	ldrb	r2, [r3, #16]
   25936:	687b      	ldr	r3, [r7, #4]
   25938:	719a      	strb	r2, [r3, #6]
   2593a:	683b      	ldr	r3, [r7, #0]
   2593c:	7c9a      	ldrb	r2, [r3, #18]
   2593e:	687b      	ldr	r3, [r7, #4]
   25940:	71da      	strb	r2, [r3, #7]
   25942:	683b      	ldr	r3, [r7, #0]
   25944:	7d1a      	ldrb	r2, [r3, #20]
   25946:	687b      	ldr	r3, [r7, #4]
   25948:	721a      	strb	r2, [r3, #8]
   2594a:	230a      	movs	r3, #10
   2594c:	18fb      	adds	r3, r7, r3
   2594e:	2200      	movs	r2, #0
   25950:	801a      	strh	r2, [r3, #0]
   25952:	2300      	movs	r3, #0
   25954:	63fb      	str	r3, [r7, #60]	; 0x3c
   25956:	2300      	movs	r3, #0
   25958:	63bb      	str	r3, [r7, #56]	; 0x38
   2595a:	683b      	ldr	r3, [r7, #0]
   2595c:	781b      	ldrb	r3, [r3, #0]
   2595e:	2b01      	cmp	r3, #1
   25960:	d129      	bne.n	259b6 <_spi_set_config+0x15a>
   25962:	687b      	ldr	r3, [r7, #4]
   25964:	681b      	ldr	r3, [r3, #0]
   25966:	0018      	movs	r0, r3
   25968:	4b3c      	ldr	r3, [pc, #240]	; (25a5c <_spi_set_config+0x200>)
   2596a:	4798      	blx	r3
   2596c:	0003      	movs	r3, r0
   2596e:	62fb      	str	r3, [r7, #44]	; 0x2c
   25970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25972:	3314      	adds	r3, #20
   25974:	62bb      	str	r3, [r7, #40]	; 0x28
   25976:	6abb      	ldr	r3, [r7, #40]	; 0x28
   25978:	b2db      	uxtb	r3, r3
   2597a:	0018      	movs	r0, r3
   2597c:	4b38      	ldr	r3, [pc, #224]	; (25a60 <_spi_set_config+0x204>)
   2597e:	4798      	blx	r3
   25980:	0003      	movs	r3, r0
   25982:	627b      	str	r3, [r7, #36]	; 0x24
   25984:	683b      	ldr	r3, [r7, #0]
   25986:	699b      	ldr	r3, [r3, #24]
   25988:	2223      	movs	r2, #35	; 0x23
   2598a:	18bc      	adds	r4, r7, r2
   2598c:	220a      	movs	r2, #10
   2598e:	18ba      	adds	r2, r7, r2
   25990:	6a79      	ldr	r1, [r7, #36]	; 0x24
   25992:	0018      	movs	r0, r3
   25994:	4b33      	ldr	r3, [pc, #204]	; (25a64 <_spi_set_config+0x208>)
   25996:	4798      	blx	r3
   25998:	0003      	movs	r3, r0
   2599a:	7023      	strb	r3, [r4, #0]
   2599c:	2323      	movs	r3, #35	; 0x23
   2599e:	18fb      	adds	r3, r7, r3
   259a0:	781b      	ldrb	r3, [r3, #0]
   259a2:	2b00      	cmp	r3, #0
   259a4:	d001      	beq.n	259aa <_spi_set_config+0x14e>
   259a6:	2317      	movs	r3, #23
   259a8:	e04e      	b.n	25a48 <_spi_set_config+0x1ec>
   259aa:	230a      	movs	r3, #10
   259ac:	18fb      	adds	r3, r7, r3
   259ae:	881b      	ldrh	r3, [r3, #0]
   259b0:	b2da      	uxtb	r2, r3
   259b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   259b4:	731a      	strb	r2, [r3, #12]
   259b6:	683b      	ldr	r3, [r7, #0]
   259b8:	685b      	ldr	r3, [r3, #4]
   259ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   259bc:	4313      	orrs	r3, r2
   259be:	63fb      	str	r3, [r7, #60]	; 0x3c
   259c0:	683b      	ldr	r3, [r7, #0]
   259c2:	689b      	ldr	r3, [r3, #8]
   259c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   259c6:	4313      	orrs	r3, r2
   259c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   259ca:	683b      	ldr	r3, [r7, #0]
   259cc:	68db      	ldr	r3, [r3, #12]
   259ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   259d0:	4313      	orrs	r3, r2
   259d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   259d4:	683b      	ldr	r3, [r7, #0]
   259d6:	7c1b      	ldrb	r3, [r3, #16]
   259d8:	001a      	movs	r2, r3
   259da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   259dc:	4313      	orrs	r3, r2
   259de:	63bb      	str	r3, [r7, #56]	; 0x38
   259e0:	683b      	ldr	r3, [r7, #0]
   259e2:	7c5b      	ldrb	r3, [r3, #17]
   259e4:	2b00      	cmp	r3, #0
   259e6:	d103      	bne.n	259f0 <_spi_set_config+0x194>
   259e8:	4b1f      	ldr	r3, [pc, #124]	; (25a68 <_spi_set_config+0x20c>)
   259ea:	4798      	blx	r3
   259ec:	1e03      	subs	r3, r0, #0
   259ee:	d003      	beq.n	259f8 <_spi_set_config+0x19c>
   259f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   259f2:	2280      	movs	r2, #128	; 0x80
   259f4:	4313      	orrs	r3, r2
   259f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   259f8:	683b      	ldr	r3, [r7, #0]
   259fa:	7c9b      	ldrb	r3, [r3, #18]
   259fc:	2b00      	cmp	r3, #0
   259fe:	d004      	beq.n	25a0a <_spi_set_config+0x1ae>
   25a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   25a02:	2280      	movs	r2, #128	; 0x80
   25a04:	0292      	lsls	r2, r2, #10
   25a06:	4313      	orrs	r3, r2
   25a08:	63bb      	str	r3, [r7, #56]	; 0x38
   25a0a:	683b      	ldr	r3, [r7, #0]
   25a0c:	7cdb      	ldrb	r3, [r3, #19]
   25a0e:	2b00      	cmp	r3, #0
   25a10:	d004      	beq.n	25a1c <_spi_set_config+0x1c0>
   25a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   25a14:	2280      	movs	r2, #128	; 0x80
   25a16:	0092      	lsls	r2, r2, #2
   25a18:	4313      	orrs	r3, r2
   25a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   25a1c:	683b      	ldr	r3, [r7, #0]
   25a1e:	7d1b      	ldrb	r3, [r3, #20]
   25a20:	2b00      	cmp	r3, #0
   25a22:	d004      	beq.n	25a2e <_spi_set_config+0x1d2>
   25a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   25a26:	2280      	movs	r2, #128	; 0x80
   25a28:	0192      	lsls	r2, r2, #6
   25a2a:	4313      	orrs	r3, r2
   25a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   25a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   25a30:	681a      	ldr	r2, [r3, #0]
   25a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   25a34:	431a      	orrs	r2, r3
   25a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   25a38:	601a      	str	r2, [r3, #0]
   25a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   25a3c:	685a      	ldr	r2, [r3, #4]
   25a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   25a40:	431a      	orrs	r2, r3
   25a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   25a44:	605a      	str	r2, [r3, #4]
   25a46:	2300      	movs	r3, #0
   25a48:	0018      	movs	r0, r3
   25a4a:	46bd      	mov	sp, r7
   25a4c:	b013      	add	sp, #76	; 0x4c
   25a4e:	bd90      	pop	{r4, r7, pc}
   25a50:	00025391 	.word	0x00025391
   25a54:	00025031 	.word	0x00025031
   25a58:	00027ddd 	.word	0x00027ddd
   25a5c:	000251ed 	.word	0x000251ed
   25a60:	00027ba1 	.word	0x00027ba1
   25a64:	00024d67 	.word	0x00024d67
   25a68:	00025505 	.word	0x00025505

00025a6c <spi_init>:
   25a6c:	b590      	push	{r4, r7, lr}
   25a6e:	b08b      	sub	sp, #44	; 0x2c
   25a70:	af00      	add	r7, sp, #0
   25a72:	60f8      	str	r0, [r7, #12]
   25a74:	60b9      	str	r1, [r7, #8]
   25a76:	607a      	str	r2, [r7, #4]
   25a78:	68fb      	ldr	r3, [r7, #12]
   25a7a:	68ba      	ldr	r2, [r7, #8]
   25a7c:	601a      	str	r2, [r3, #0]
   25a7e:	68fb      	ldr	r3, [r7, #12]
   25a80:	681b      	ldr	r3, [r3, #0]
   25a82:	623b      	str	r3, [r7, #32]
   25a84:	6a3b      	ldr	r3, [r7, #32]
   25a86:	681b      	ldr	r3, [r3, #0]
   25a88:	2202      	movs	r2, #2
   25a8a:	4013      	ands	r3, r2
   25a8c:	d001      	beq.n	25a92 <spi_init+0x26>
   25a8e:	231c      	movs	r3, #28
   25a90:	e09c      	b.n	25bcc <spi_init+0x160>
   25a92:	6a3b      	ldr	r3, [r7, #32]
   25a94:	681b      	ldr	r3, [r3, #0]
   25a96:	2201      	movs	r2, #1
   25a98:	4013      	ands	r3, r2
   25a9a:	d001      	beq.n	25aa0 <spi_init+0x34>
   25a9c:	2305      	movs	r3, #5
   25a9e:	e095      	b.n	25bcc <spi_init+0x160>
   25aa0:	68fb      	ldr	r3, [r7, #12]
   25aa2:	681b      	ldr	r3, [r3, #0]
   25aa4:	0018      	movs	r0, r3
   25aa6:	4b4b      	ldr	r3, [pc, #300]	; (25bd4 <spi_init+0x168>)
   25aa8:	4798      	blx	r3
   25aaa:	0003      	movs	r3, r0
   25aac:	61fb      	str	r3, [r7, #28]
   25aae:	69fb      	ldr	r3, [r7, #28]
   25ab0:	3302      	adds	r3, #2
   25ab2:	61bb      	str	r3, [r7, #24]
   25ab4:	69fb      	ldr	r3, [r7, #28]
   25ab6:	3314      	adds	r3, #20
   25ab8:	617b      	str	r3, [r7, #20]
   25aba:	2201      	movs	r2, #1
   25abc:	69bb      	ldr	r3, [r7, #24]
   25abe:	409a      	lsls	r2, r3
   25ac0:	0013      	movs	r3, r2
   25ac2:	0019      	movs	r1, r3
   25ac4:	2002      	movs	r0, #2
   25ac6:	4b44      	ldr	r3, [pc, #272]	; (25bd8 <spi_init+0x16c>)
   25ac8:	4798      	blx	r3
   25aca:	2310      	movs	r3, #16
   25acc:	18fb      	adds	r3, r7, r3
   25ace:	0018      	movs	r0, r3
   25ad0:	4b42      	ldr	r3, [pc, #264]	; (25bdc <spi_init+0x170>)
   25ad2:	4798      	blx	r3
   25ad4:	687b      	ldr	r3, [r7, #4]
   25ad6:	2224      	movs	r2, #36	; 0x24
   25ad8:	5c9a      	ldrb	r2, [r3, r2]
   25ada:	2310      	movs	r3, #16
   25adc:	18fb      	adds	r3, r7, r3
   25ade:	701a      	strb	r2, [r3, #0]
   25ae0:	697b      	ldr	r3, [r7, #20]
   25ae2:	b2db      	uxtb	r3, r3
   25ae4:	2210      	movs	r2, #16
   25ae6:	18ba      	adds	r2, r7, r2
   25ae8:	0011      	movs	r1, r2
   25aea:	0018      	movs	r0, r3
   25aec:	4b3c      	ldr	r3, [pc, #240]	; (25be0 <spi_init+0x174>)
   25aee:	4798      	blx	r3
   25af0:	697b      	ldr	r3, [r7, #20]
   25af2:	b2db      	uxtb	r3, r3
   25af4:	0018      	movs	r0, r3
   25af6:	4b3b      	ldr	r3, [pc, #236]	; (25be4 <spi_init+0x178>)
   25af8:	4798      	blx	r3
   25afa:	687b      	ldr	r3, [r7, #4]
   25afc:	2224      	movs	r2, #36	; 0x24
   25afe:	5c9b      	ldrb	r3, [r3, r2]
   25b00:	2100      	movs	r1, #0
   25b02:	0018      	movs	r0, r3
   25b04:	4b38      	ldr	r3, [pc, #224]	; (25be8 <spi_init+0x17c>)
   25b06:	4798      	blx	r3
   25b08:	687b      	ldr	r3, [r7, #4]
   25b0a:	781b      	ldrb	r3, [r3, #0]
   25b0c:	2b01      	cmp	r3, #1
   25b0e:	d105      	bne.n	25b1c <spi_init+0xb0>
   25b10:	6a3b      	ldr	r3, [r7, #32]
   25b12:	681b      	ldr	r3, [r3, #0]
   25b14:	220c      	movs	r2, #12
   25b16:	431a      	orrs	r2, r3
   25b18:	6a3b      	ldr	r3, [r7, #32]
   25b1a:	601a      	str	r2, [r3, #0]
   25b1c:	2327      	movs	r3, #39	; 0x27
   25b1e:	18fb      	adds	r3, r7, r3
   25b20:	2200      	movs	r2, #0
   25b22:	701a      	strb	r2, [r3, #0]
   25b24:	e010      	b.n	25b48 <spi_init+0xdc>
   25b26:	2327      	movs	r3, #39	; 0x27
   25b28:	18fb      	adds	r3, r7, r3
   25b2a:	781b      	ldrb	r3, [r3, #0]
   25b2c:	68fa      	ldr	r2, [r7, #12]
   25b2e:	3302      	adds	r3, #2
   25b30:	009b      	lsls	r3, r3, #2
   25b32:	18d3      	adds	r3, r2, r3
   25b34:	3304      	adds	r3, #4
   25b36:	2200      	movs	r2, #0
   25b38:	601a      	str	r2, [r3, #0]
   25b3a:	2327      	movs	r3, #39	; 0x27
   25b3c:	18fb      	adds	r3, r7, r3
   25b3e:	781a      	ldrb	r2, [r3, #0]
   25b40:	2327      	movs	r3, #39	; 0x27
   25b42:	18fb      	adds	r3, r7, r3
   25b44:	3201      	adds	r2, #1
   25b46:	701a      	strb	r2, [r3, #0]
   25b48:	2327      	movs	r3, #39	; 0x27
   25b4a:	18fb      	adds	r3, r7, r3
   25b4c:	781b      	ldrb	r3, [r3, #0]
   25b4e:	2b06      	cmp	r3, #6
   25b50:	d9e9      	bls.n	25b26 <spi_init+0xba>
   25b52:	68fb      	ldr	r3, [r7, #12]
   25b54:	2200      	movs	r2, #0
   25b56:	62da      	str	r2, [r3, #44]	; 0x2c
   25b58:	68fb      	ldr	r3, [r7, #12]
   25b5a:	2200      	movs	r2, #0
   25b5c:	629a      	str	r2, [r3, #40]	; 0x28
   25b5e:	68fb      	ldr	r3, [r7, #12]
   25b60:	2200      	movs	r2, #0
   25b62:	869a      	strh	r2, [r3, #52]	; 0x34
   25b64:	68fb      	ldr	r3, [r7, #12]
   25b66:	2200      	movs	r2, #0
   25b68:	861a      	strh	r2, [r3, #48]	; 0x30
   25b6a:	68fb      	ldr	r3, [r7, #12]
   25b6c:	2236      	movs	r2, #54	; 0x36
   25b6e:	2100      	movs	r1, #0
   25b70:	5499      	strb	r1, [r3, r2]
   25b72:	68fb      	ldr	r3, [r7, #12]
   25b74:	2237      	movs	r2, #55	; 0x37
   25b76:	2100      	movs	r1, #0
   25b78:	5499      	strb	r1, [r3, r2]
   25b7a:	68fb      	ldr	r3, [r7, #12]
   25b7c:	2238      	movs	r2, #56	; 0x38
   25b7e:	2100      	movs	r1, #0
   25b80:	5499      	strb	r1, [r3, r2]
   25b82:	68fb      	ldr	r3, [r7, #12]
   25b84:	2203      	movs	r2, #3
   25b86:	725a      	strb	r2, [r3, #9]
   25b88:	68fb      	ldr	r3, [r7, #12]
   25b8a:	2200      	movs	r2, #0
   25b8c:	711a      	strb	r2, [r3, #4]
   25b8e:	68fb      	ldr	r3, [r7, #12]
   25b90:	681b      	ldr	r3, [r3, #0]
   25b92:	2213      	movs	r2, #19
   25b94:	18bc      	adds	r4, r7, r2
   25b96:	0018      	movs	r0, r3
   25b98:	4b0e      	ldr	r3, [pc, #56]	; (25bd4 <spi_init+0x168>)
   25b9a:	4798      	blx	r3
   25b9c:	0003      	movs	r3, r0
   25b9e:	7023      	strb	r3, [r4, #0]
   25ba0:	4a12      	ldr	r2, [pc, #72]	; (25bec <spi_init+0x180>)
   25ba2:	2313      	movs	r3, #19
   25ba4:	18fb      	adds	r3, r7, r3
   25ba6:	781b      	ldrb	r3, [r3, #0]
   25ba8:	0011      	movs	r1, r2
   25baa:	0018      	movs	r0, r3
   25bac:	4b10      	ldr	r3, [pc, #64]	; (25bf0 <spi_init+0x184>)
   25bae:	4798      	blx	r3
   25bb0:	2313      	movs	r3, #19
   25bb2:	18fb      	adds	r3, r7, r3
   25bb4:	781a      	ldrb	r2, [r3, #0]
   25bb6:	4b0f      	ldr	r3, [pc, #60]	; (25bf4 <spi_init+0x188>)
   25bb8:	0092      	lsls	r2, r2, #2
   25bba:	68f9      	ldr	r1, [r7, #12]
   25bbc:	50d1      	str	r1, [r2, r3]
   25bbe:	687a      	ldr	r2, [r7, #4]
   25bc0:	68fb      	ldr	r3, [r7, #12]
   25bc2:	0011      	movs	r1, r2
   25bc4:	0018      	movs	r0, r3
   25bc6:	4b0c      	ldr	r3, [pc, #48]	; (25bf8 <spi_init+0x18c>)
   25bc8:	4798      	blx	r3
   25bca:	0003      	movs	r3, r0
   25bcc:	0018      	movs	r0, r3
   25bce:	46bd      	mov	sp, r7
   25bd0:	b00b      	add	sp, #44	; 0x2c
   25bd2:	bd90      	pop	{r4, r7, pc}
   25bd4:	000251ed 	.word	0x000251ed
   25bd8:	000254a9 	.word	0x000254a9
   25bdc:	00025491 	.word	0x00025491
   25be0:	00027a7d 	.word	0x00027a7d
   25be4:	00027ac1 	.word	0x00027ac1
   25be8:	00024fa5 	.word	0x00024fa5
   25bec:	000260c5 	.word	0x000260c5
   25bf0:	00025251 	.word	0x00025251
   25bf4:	20005578 	.word	0x20005578
   25bf8:	0002585d 	.word	0x0002585d

00025bfc <spi_read_buffer_wait>:
   25bfc:	b590      	push	{r4, r7, lr}
   25bfe:	b087      	sub	sp, #28
   25c00:	af00      	add	r7, sp, #0
   25c02:	60f8      	str	r0, [r7, #12]
   25c04:	60b9      	str	r1, [r7, #8]
   25c06:	0019      	movs	r1, r3
   25c08:	1dbb      	adds	r3, r7, #6
   25c0a:	801a      	strh	r2, [r3, #0]
   25c0c:	1d3b      	adds	r3, r7, #4
   25c0e:	1c0a      	adds	r2, r1, #0
   25c10:	801a      	strh	r2, [r3, #0]
   25c12:	68fb      	ldr	r3, [r7, #12]
   25c14:	2238      	movs	r2, #56	; 0x38
   25c16:	5c9b      	ldrb	r3, [r3, r2]
   25c18:	b2db      	uxtb	r3, r3
   25c1a:	2b05      	cmp	r3, #5
   25c1c:	d101      	bne.n	25c22 <spi_read_buffer_wait+0x26>
   25c1e:	2305      	movs	r3, #5
   25c20:	e07a      	b.n	25d18 <spi_read_buffer_wait+0x11c>
   25c22:	1dbb      	adds	r3, r7, #6
   25c24:	881b      	ldrh	r3, [r3, #0]
   25c26:	2b00      	cmp	r3, #0
   25c28:	d101      	bne.n	25c2e <spi_read_buffer_wait+0x32>
   25c2a:	2317      	movs	r3, #23
   25c2c:	e074      	b.n	25d18 <spi_read_buffer_wait+0x11c>
   25c2e:	68fb      	ldr	r3, [r7, #12]
   25c30:	79db      	ldrb	r3, [r3, #7]
   25c32:	2201      	movs	r2, #1
   25c34:	4053      	eors	r3, r2
   25c36:	b2db      	uxtb	r3, r3
   25c38:	2b00      	cmp	r3, #0
   25c3a:	d001      	beq.n	25c40 <spi_read_buffer_wait+0x44>
   25c3c:	231c      	movs	r3, #28
   25c3e:	e06b      	b.n	25d18 <spi_read_buffer_wait+0x11c>
   25c40:	2316      	movs	r3, #22
   25c42:	18fb      	adds	r3, r7, r3
   25c44:	2200      	movs	r2, #0
   25c46:	801a      	strh	r2, [r3, #0]
   25c48:	e05e      	b.n	25d08 <spi_read_buffer_wait+0x10c>
   25c4a:	68fb      	ldr	r3, [r7, #12]
   25c4c:	795b      	ldrb	r3, [r3, #5]
   25c4e:	2b01      	cmp	r3, #1
   25c50:	d112      	bne.n	25c78 <spi_read_buffer_wait+0x7c>
   25c52:	46c0      	nop			; (mov r8, r8)
   25c54:	68fb      	ldr	r3, [r7, #12]
   25c56:	0018      	movs	r0, r3
   25c58:	4b31      	ldr	r3, [pc, #196]	; (25d20 <spi_read_buffer_wait+0x124>)
   25c5a:	4798      	blx	r3
   25c5c:	0003      	movs	r3, r0
   25c5e:	001a      	movs	r2, r3
   25c60:	2301      	movs	r3, #1
   25c62:	4053      	eors	r3, r2
   25c64:	b2db      	uxtb	r3, r3
   25c66:	2b00      	cmp	r3, #0
   25c68:	d1f4      	bne.n	25c54 <spi_read_buffer_wait+0x58>
   25c6a:	1d3b      	adds	r3, r7, #4
   25c6c:	881a      	ldrh	r2, [r3, #0]
   25c6e:	68fb      	ldr	r3, [r7, #12]
   25c70:	0011      	movs	r1, r2
   25c72:	0018      	movs	r0, r3
   25c74:	4b2b      	ldr	r3, [pc, #172]	; (25d24 <spi_read_buffer_wait+0x128>)
   25c76:	4798      	blx	r3
   25c78:	46c0      	nop			; (mov r8, r8)
   25c7a:	68fb      	ldr	r3, [r7, #12]
   25c7c:	0018      	movs	r0, r3
   25c7e:	4b2a      	ldr	r3, [pc, #168]	; (25d28 <spi_read_buffer_wait+0x12c>)
   25c80:	4798      	blx	r3
   25c82:	0003      	movs	r3, r0
   25c84:	001a      	movs	r2, r3
   25c86:	2301      	movs	r3, #1
   25c88:	4053      	eors	r3, r2
   25c8a:	b2db      	uxtb	r3, r3
   25c8c:	2b00      	cmp	r3, #0
   25c8e:	d1f4      	bne.n	25c7a <spi_read_buffer_wait+0x7e>
   25c90:	2312      	movs	r3, #18
   25c92:	18fb      	adds	r3, r7, r3
   25c94:	2200      	movs	r2, #0
   25c96:	801a      	strh	r2, [r3, #0]
   25c98:	2315      	movs	r3, #21
   25c9a:	18fc      	adds	r4, r7, r3
   25c9c:	2312      	movs	r3, #18
   25c9e:	18fa      	adds	r2, r7, r3
   25ca0:	68fb      	ldr	r3, [r7, #12]
   25ca2:	0011      	movs	r1, r2
   25ca4:	0018      	movs	r0, r3
   25ca6:	4b21      	ldr	r3, [pc, #132]	; (25d2c <spi_read_buffer_wait+0x130>)
   25ca8:	4798      	blx	r3
   25caa:	0003      	movs	r3, r0
   25cac:	7023      	strb	r3, [r4, #0]
   25cae:	2315      	movs	r3, #21
   25cb0:	18fb      	adds	r3, r7, r3
   25cb2:	781b      	ldrb	r3, [r3, #0]
   25cb4:	2b00      	cmp	r3, #0
   25cb6:	d003      	beq.n	25cc0 <spi_read_buffer_wait+0xc4>
   25cb8:	2315      	movs	r3, #21
   25cba:	18fb      	adds	r3, r7, r3
   25cbc:	781b      	ldrb	r3, [r3, #0]
   25cbe:	e02b      	b.n	25d18 <spi_read_buffer_wait+0x11c>
   25cc0:	2316      	movs	r3, #22
   25cc2:	18fb      	adds	r3, r7, r3
   25cc4:	881b      	ldrh	r3, [r3, #0]
   25cc6:	2216      	movs	r2, #22
   25cc8:	18ba      	adds	r2, r7, r2
   25cca:	1c59      	adds	r1, r3, #1
   25ccc:	8011      	strh	r1, [r2, #0]
   25cce:	001a      	movs	r2, r3
   25cd0:	68bb      	ldr	r3, [r7, #8]
   25cd2:	189b      	adds	r3, r3, r2
   25cd4:	2212      	movs	r2, #18
   25cd6:	18ba      	adds	r2, r7, r2
   25cd8:	8812      	ldrh	r2, [r2, #0]
   25cda:	b2d2      	uxtb	r2, r2
   25cdc:	701a      	strb	r2, [r3, #0]
   25cde:	68fb      	ldr	r3, [r7, #12]
   25ce0:	799b      	ldrb	r3, [r3, #6]
   25ce2:	2b01      	cmp	r3, #1
   25ce4:	d110      	bne.n	25d08 <spi_read_buffer_wait+0x10c>
   25ce6:	2316      	movs	r3, #22
   25ce8:	18fb      	adds	r3, r7, r3
   25cea:	881b      	ldrh	r3, [r3, #0]
   25cec:	2216      	movs	r2, #22
   25cee:	18ba      	adds	r2, r7, r2
   25cf0:	1c59      	adds	r1, r3, #1
   25cf2:	8011      	strh	r1, [r2, #0]
   25cf4:	001a      	movs	r2, r3
   25cf6:	68bb      	ldr	r3, [r7, #8]
   25cf8:	189b      	adds	r3, r3, r2
   25cfa:	2212      	movs	r2, #18
   25cfc:	18ba      	adds	r2, r7, r2
   25cfe:	8812      	ldrh	r2, [r2, #0]
   25d00:	0a12      	lsrs	r2, r2, #8
   25d02:	b292      	uxth	r2, r2
   25d04:	b2d2      	uxtb	r2, r2
   25d06:	701a      	strb	r2, [r3, #0]
   25d08:	1dbb      	adds	r3, r7, #6
   25d0a:	881b      	ldrh	r3, [r3, #0]
   25d0c:	1dba      	adds	r2, r7, #6
   25d0e:	1e59      	subs	r1, r3, #1
   25d10:	8011      	strh	r1, [r2, #0]
   25d12:	2b00      	cmp	r3, #0
   25d14:	d199      	bne.n	25c4a <spi_read_buffer_wait+0x4e>
   25d16:	2300      	movs	r3, #0
   25d18:	0018      	movs	r0, r3
   25d1a:	46bd      	mov	sp, r7
   25d1c:	b007      	add	sp, #28
   25d1e:	bd90      	pop	{r4, r7, pc}
   25d20:	00025675 	.word	0x00025675
   25d24:	000256c5 	.word	0x000256c5
   25d28:	0002569d 	.word	0x0002569d
   25d2c:	0002570d 	.word	0x0002570d

00025d30 <spi_select_slave>:
   25d30:	b580      	push	{r7, lr}
   25d32:	b086      	sub	sp, #24
   25d34:	af00      	add	r7, sp, #0
   25d36:	60f8      	str	r0, [r7, #12]
   25d38:	60b9      	str	r1, [r7, #8]
   25d3a:	1dfb      	adds	r3, r7, #7
   25d3c:	701a      	strb	r2, [r3, #0]
   25d3e:	68fb      	ldr	r3, [r7, #12]
   25d40:	795b      	ldrb	r3, [r3, #5]
   25d42:	2b01      	cmp	r3, #1
   25d44:	d001      	beq.n	25d4a <spi_select_slave+0x1a>
   25d46:	2315      	movs	r3, #21
   25d48:	e05c      	b.n	25e04 <spi_select_slave+0xd4>
   25d4a:	68fb      	ldr	r3, [r7, #12]
   25d4c:	7a1b      	ldrb	r3, [r3, #8]
   25d4e:	2201      	movs	r2, #1
   25d50:	4053      	eors	r3, r2
   25d52:	b2db      	uxtb	r3, r3
   25d54:	2b00      	cmp	r3, #0
   25d56:	d054      	beq.n	25e02 <spi_select_slave+0xd2>
   25d58:	1dfb      	adds	r3, r7, #7
   25d5a:	781b      	ldrb	r3, [r3, #0]
   25d5c:	2b00      	cmp	r3, #0
   25d5e:	d04a      	beq.n	25df6 <spi_select_slave+0xc6>
   25d60:	68bb      	ldr	r3, [r7, #8]
   25d62:	785b      	ldrb	r3, [r3, #1]
   25d64:	2b00      	cmp	r3, #0
   25d66:	d03f      	beq.n	25de8 <spi_select_slave+0xb8>
   25d68:	68fb      	ldr	r3, [r7, #12]
   25d6a:	0018      	movs	r0, r3
   25d6c:	4b27      	ldr	r3, [pc, #156]	; (25e0c <spi_select_slave+0xdc>)
   25d6e:	4798      	blx	r3
   25d70:	0003      	movs	r3, r0
   25d72:	001a      	movs	r2, r3
   25d74:	2301      	movs	r3, #1
   25d76:	4053      	eors	r3, r2
   25d78:	b2db      	uxtb	r3, r3
   25d7a:	2b00      	cmp	r3, #0
   25d7c:	d007      	beq.n	25d8e <spi_select_slave+0x5e>
   25d7e:	68bb      	ldr	r3, [r7, #8]
   25d80:	781b      	ldrb	r3, [r3, #0]
   25d82:	2101      	movs	r1, #1
   25d84:	0018      	movs	r0, r3
   25d86:	4b22      	ldr	r3, [pc, #136]	; (25e10 <spi_select_slave+0xe0>)
   25d88:	4798      	blx	r3
   25d8a:	2305      	movs	r3, #5
   25d8c:	e03a      	b.n	25e04 <spi_select_slave+0xd4>
   25d8e:	68bb      	ldr	r3, [r7, #8]
   25d90:	781b      	ldrb	r3, [r3, #0]
   25d92:	2100      	movs	r1, #0
   25d94:	0018      	movs	r0, r3
   25d96:	4b1e      	ldr	r3, [pc, #120]	; (25e10 <spi_select_slave+0xe0>)
   25d98:	4798      	blx	r3
   25d9a:	68bb      	ldr	r3, [r7, #8]
   25d9c:	789b      	ldrb	r3, [r3, #2]
   25d9e:	b29a      	uxth	r2, r3
   25da0:	68fb      	ldr	r3, [r7, #12]
   25da2:	0011      	movs	r1, r2
   25da4:	0018      	movs	r0, r3
   25da6:	4b1b      	ldr	r3, [pc, #108]	; (25e14 <spi_select_slave+0xe4>)
   25da8:	4798      	blx	r3
   25daa:	68fb      	ldr	r3, [r7, #12]
   25dac:	79db      	ldrb	r3, [r3, #7]
   25dae:	2201      	movs	r2, #1
   25db0:	4053      	eors	r3, r2
   25db2:	b2db      	uxtb	r3, r3
   25db4:	2b00      	cmp	r3, #0
   25db6:	d024      	beq.n	25e02 <spi_select_slave+0xd2>
   25db8:	46c0      	nop			; (mov r8, r8)
   25dba:	68fb      	ldr	r3, [r7, #12]
   25dbc:	0018      	movs	r0, r3
   25dbe:	4b16      	ldr	r3, [pc, #88]	; (25e18 <spi_select_slave+0xe8>)
   25dc0:	4798      	blx	r3
   25dc2:	0003      	movs	r3, r0
   25dc4:	001a      	movs	r2, r3
   25dc6:	2301      	movs	r3, #1
   25dc8:	4053      	eors	r3, r2
   25dca:	b2db      	uxtb	r3, r3
   25dcc:	2b00      	cmp	r3, #0
   25dce:	d1f4      	bne.n	25dba <spi_select_slave+0x8a>
   25dd0:	2316      	movs	r3, #22
   25dd2:	18fb      	adds	r3, r7, r3
   25dd4:	2200      	movs	r2, #0
   25dd6:	801a      	strh	r2, [r3, #0]
   25dd8:	2316      	movs	r3, #22
   25dda:	18fa      	adds	r2, r7, r3
   25ddc:	68fb      	ldr	r3, [r7, #12]
   25dde:	0011      	movs	r1, r2
   25de0:	0018      	movs	r0, r3
   25de2:	4b0e      	ldr	r3, [pc, #56]	; (25e1c <spi_select_slave+0xec>)
   25de4:	4798      	blx	r3
   25de6:	e00c      	b.n	25e02 <spi_select_slave+0xd2>
   25de8:	68bb      	ldr	r3, [r7, #8]
   25dea:	781b      	ldrb	r3, [r3, #0]
   25dec:	2100      	movs	r1, #0
   25dee:	0018      	movs	r0, r3
   25df0:	4b07      	ldr	r3, [pc, #28]	; (25e10 <spi_select_slave+0xe0>)
   25df2:	4798      	blx	r3
   25df4:	e005      	b.n	25e02 <spi_select_slave+0xd2>
   25df6:	68bb      	ldr	r3, [r7, #8]
   25df8:	781b      	ldrb	r3, [r3, #0]
   25dfa:	2101      	movs	r1, #1
   25dfc:	0018      	movs	r0, r3
   25dfe:	4b04      	ldr	r3, [pc, #16]	; (25e10 <spi_select_slave+0xe0>)
   25e00:	4798      	blx	r3
   25e02:	2300      	movs	r3, #0
   25e04:	0018      	movs	r0, r3
   25e06:	46bd      	mov	sp, r7
   25e08:	b006      	add	sp, #24
   25e0a:	bd80      	pop	{r7, pc}
   25e0c:	00025675 	.word	0x00025675
   25e10:	0002543d 	.word	0x0002543d
   25e14:	000256c5 	.word	0x000256c5
   25e18:	0002569d 	.word	0x0002569d
   25e1c:	0002570d 	.word	0x0002570d

00025e20 <spi_write_buffer_wait>:
   25e20:	b580      	push	{r7, lr}
   25e22:	b086      	sub	sp, #24
   25e24:	af00      	add	r7, sp, #0
   25e26:	60f8      	str	r0, [r7, #12]
   25e28:	60b9      	str	r1, [r7, #8]
   25e2a:	1dbb      	adds	r3, r7, #6
   25e2c:	801a      	strh	r2, [r3, #0]
   25e2e:	68fb      	ldr	r3, [r7, #12]
   25e30:	2238      	movs	r2, #56	; 0x38
   25e32:	5c9b      	ldrb	r3, [r3, r2]
   25e34:	b2db      	uxtb	r3, r3
   25e36:	2b05      	cmp	r3, #5
   25e38:	d101      	bne.n	25e3e <spi_write_buffer_wait+0x1e>
   25e3a:	2305      	movs	r3, #5
   25e3c:	e087      	b.n	25f4e <spi_write_buffer_wait+0x12e>
   25e3e:	1dbb      	adds	r3, r7, #6
   25e40:	881b      	ldrh	r3, [r3, #0]
   25e42:	2b00      	cmp	r3, #0
   25e44:	d101      	bne.n	25e4a <spi_write_buffer_wait+0x2a>
   25e46:	2317      	movs	r3, #23
   25e48:	e081      	b.n	25f4e <spi_write_buffer_wait+0x12e>
   25e4a:	2316      	movs	r3, #22
   25e4c:	18fb      	adds	r3, r7, r3
   25e4e:	2200      	movs	r2, #0
   25e50:	801a      	strh	r2, [r3, #0]
   25e52:	2314      	movs	r3, #20
   25e54:	18fb      	adds	r3, r7, r3
   25e56:	1dba      	adds	r2, r7, #6
   25e58:	8812      	ldrh	r2, [r2, #0]
   25e5a:	801a      	strh	r2, [r3, #0]
   25e5c:	e05f      	b.n	25f1e <spi_write_buffer_wait+0xfe>
   25e5e:	46c0      	nop			; (mov r8, r8)
   25e60:	68fb      	ldr	r3, [r7, #12]
   25e62:	0018      	movs	r0, r3
   25e64:	4b3c      	ldr	r3, [pc, #240]	; (25f58 <spi_write_buffer_wait+0x138>)
   25e66:	4798      	blx	r3
   25e68:	0003      	movs	r3, r0
   25e6a:	001a      	movs	r2, r3
   25e6c:	2301      	movs	r3, #1
   25e6e:	4053      	eors	r3, r2
   25e70:	b2db      	uxtb	r3, r3
   25e72:	2b00      	cmp	r3, #0
   25e74:	d1f4      	bne.n	25e60 <spi_write_buffer_wait+0x40>
   25e76:	2316      	movs	r3, #22
   25e78:	18fb      	adds	r3, r7, r3
   25e7a:	881b      	ldrh	r3, [r3, #0]
   25e7c:	2216      	movs	r2, #22
   25e7e:	18ba      	adds	r2, r7, r2
   25e80:	1c59      	adds	r1, r3, #1
   25e82:	8011      	strh	r1, [r2, #0]
   25e84:	001a      	movs	r2, r3
   25e86:	68bb      	ldr	r3, [r7, #8]
   25e88:	189b      	adds	r3, r3, r2
   25e8a:	781a      	ldrb	r2, [r3, #0]
   25e8c:	2312      	movs	r3, #18
   25e8e:	18fb      	adds	r3, r7, r3
   25e90:	801a      	strh	r2, [r3, #0]
   25e92:	68fb      	ldr	r3, [r7, #12]
   25e94:	799b      	ldrb	r3, [r3, #6]
   25e96:	2b01      	cmp	r3, #1
   25e98:	d115      	bne.n	25ec6 <spi_write_buffer_wait+0xa6>
   25e9a:	2316      	movs	r3, #22
   25e9c:	18fb      	adds	r3, r7, r3
   25e9e:	881b      	ldrh	r3, [r3, #0]
   25ea0:	2216      	movs	r2, #22
   25ea2:	18ba      	adds	r2, r7, r2
   25ea4:	1c59      	adds	r1, r3, #1
   25ea6:	8011      	strh	r1, [r2, #0]
   25ea8:	001a      	movs	r2, r3
   25eaa:	68bb      	ldr	r3, [r7, #8]
   25eac:	189b      	adds	r3, r3, r2
   25eae:	781b      	ldrb	r3, [r3, #0]
   25eb0:	021b      	lsls	r3, r3, #8
   25eb2:	b21a      	sxth	r2, r3
   25eb4:	2312      	movs	r3, #18
   25eb6:	18fb      	adds	r3, r7, r3
   25eb8:	2100      	movs	r1, #0
   25eba:	5e5b      	ldrsh	r3, [r3, r1]
   25ebc:	4313      	orrs	r3, r2
   25ebe:	b21a      	sxth	r2, r3
   25ec0:	2312      	movs	r3, #18
   25ec2:	18fb      	adds	r3, r7, r3
   25ec4:	801a      	strh	r2, [r3, #0]
   25ec6:	2312      	movs	r3, #18
   25ec8:	18fb      	adds	r3, r7, r3
   25eca:	881a      	ldrh	r2, [r3, #0]
   25ecc:	68fb      	ldr	r3, [r7, #12]
   25ece:	0011      	movs	r1, r2
   25ed0:	0018      	movs	r0, r3
   25ed2:	4b22      	ldr	r3, [pc, #136]	; (25f5c <spi_write_buffer_wait+0x13c>)
   25ed4:	4798      	blx	r3
   25ed6:	68fb      	ldr	r3, [r7, #12]
   25ed8:	79db      	ldrb	r3, [r3, #7]
   25eda:	2214      	movs	r2, #20
   25edc:	18ba      	adds	r2, r7, r2
   25ede:	2114      	movs	r1, #20
   25ee0:	1879      	adds	r1, r7, r1
   25ee2:	8809      	ldrh	r1, [r1, #0]
   25ee4:	8011      	strh	r1, [r2, #0]
   25ee6:	2b00      	cmp	r3, #0
   25ee8:	d019      	beq.n	25f1e <spi_write_buffer_wait+0xfe>
   25eea:	46c0      	nop			; (mov r8, r8)
   25eec:	68fb      	ldr	r3, [r7, #12]
   25eee:	0018      	movs	r0, r3
   25ef0:	4b1b      	ldr	r3, [pc, #108]	; (25f60 <spi_write_buffer_wait+0x140>)
   25ef2:	4798      	blx	r3
   25ef4:	0003      	movs	r3, r0
   25ef6:	001a      	movs	r2, r3
   25ef8:	2301      	movs	r3, #1
   25efa:	4053      	eors	r3, r2
   25efc:	b2db      	uxtb	r3, r3
   25efe:	2b00      	cmp	r3, #0
   25f00:	d1f4      	bne.n	25eec <spi_write_buffer_wait+0xcc>
   25f02:	2310      	movs	r3, #16
   25f04:	18fa      	adds	r2, r7, r3
   25f06:	68fb      	ldr	r3, [r7, #12]
   25f08:	0011      	movs	r1, r2
   25f0a:	0018      	movs	r0, r3
   25f0c:	4b15      	ldr	r3, [pc, #84]	; (25f64 <spi_write_buffer_wait+0x144>)
   25f0e:	4798      	blx	r3
   25f10:	2314      	movs	r3, #20
   25f12:	18fb      	adds	r3, r7, r3
   25f14:	881a      	ldrh	r2, [r3, #0]
   25f16:	2314      	movs	r3, #20
   25f18:	18fb      	adds	r3, r7, r3
   25f1a:	3a01      	subs	r2, #1
   25f1c:	801a      	strh	r2, [r3, #0]
   25f1e:	1dbb      	adds	r3, r7, #6
   25f20:	881b      	ldrh	r3, [r3, #0]
   25f22:	1dba      	adds	r2, r7, #6
   25f24:	1e59      	subs	r1, r3, #1
   25f26:	8011      	strh	r1, [r2, #0]
   25f28:	2b00      	cmp	r3, #0
   25f2a:	d198      	bne.n	25e5e <spi_write_buffer_wait+0x3e>
   25f2c:	68fb      	ldr	r3, [r7, #12]
   25f2e:	795b      	ldrb	r3, [r3, #5]
   25f30:	2b01      	cmp	r3, #1
   25f32:	d10b      	bne.n	25f4c <spi_write_buffer_wait+0x12c>
   25f34:	46c0      	nop			; (mov r8, r8)
   25f36:	68fb      	ldr	r3, [r7, #12]
   25f38:	0018      	movs	r0, r3
   25f3a:	4b0b      	ldr	r3, [pc, #44]	; (25f68 <spi_write_buffer_wait+0x148>)
   25f3c:	4798      	blx	r3
   25f3e:	0003      	movs	r3, r0
   25f40:	001a      	movs	r2, r3
   25f42:	2301      	movs	r3, #1
   25f44:	4053      	eors	r3, r2
   25f46:	b2db      	uxtb	r3, r3
   25f48:	2b00      	cmp	r3, #0
   25f4a:	d1f4      	bne.n	25f36 <spi_write_buffer_wait+0x116>
   25f4c:	2300      	movs	r3, #0
   25f4e:	0018      	movs	r0, r3
   25f50:	46bd      	mov	sp, r7
   25f52:	b006      	add	sp, #24
   25f54:	bd80      	pop	{r7, pc}
   25f56:	46c0      	nop			; (mov r8, r8)
   25f58:	00025675 	.word	0x00025675
   25f5c:	000256c5 	.word	0x000256c5
   25f60:	0002569d 	.word	0x0002569d
   25f64:	0002570d 	.word	0x0002570d
   25f68:	0002564d 	.word	0x0002564d

00025f6c <_spi_write>:
   25f6c:	b580      	push	{r7, lr}
   25f6e:	b084      	sub	sp, #16
   25f70:	af00      	add	r7, sp, #0
   25f72:	6078      	str	r0, [r7, #4]
   25f74:	687b      	ldr	r3, [r7, #4]
   25f76:	681b      	ldr	r3, [r3, #0]
   25f78:	60bb      	str	r3, [r7, #8]
   25f7a:	687b      	ldr	r3, [r7, #4]
   25f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25f7e:	781b      	ldrb	r3, [r3, #0]
   25f80:	b2da      	uxtb	r2, r3
   25f82:	230e      	movs	r3, #14
   25f84:	18fb      	adds	r3, r7, r3
   25f86:	801a      	strh	r2, [r3, #0]
   25f88:	687b      	ldr	r3, [r7, #4]
   25f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25f8c:	1c5a      	adds	r2, r3, #1
   25f8e:	687b      	ldr	r3, [r7, #4]
   25f90:	62da      	str	r2, [r3, #44]	; 0x2c
   25f92:	687b      	ldr	r3, [r7, #4]
   25f94:	799b      	ldrb	r3, [r3, #6]
   25f96:	2b01      	cmp	r3, #1
   25f98:	d113      	bne.n	25fc2 <_spi_write+0x56>
   25f9a:	687b      	ldr	r3, [r7, #4]
   25f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25f9e:	781b      	ldrb	r3, [r3, #0]
   25fa0:	b2db      	uxtb	r3, r3
   25fa2:	021b      	lsls	r3, r3, #8
   25fa4:	b21a      	sxth	r2, r3
   25fa6:	230e      	movs	r3, #14
   25fa8:	18fb      	adds	r3, r7, r3
   25faa:	2100      	movs	r1, #0
   25fac:	5e5b      	ldrsh	r3, [r3, r1]
   25fae:	4313      	orrs	r3, r2
   25fb0:	b21a      	sxth	r2, r3
   25fb2:	230e      	movs	r3, #14
   25fb4:	18fb      	adds	r3, r7, r3
   25fb6:	801a      	strh	r2, [r3, #0]
   25fb8:	687b      	ldr	r3, [r7, #4]
   25fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25fbc:	1c5a      	adds	r2, r3, #1
   25fbe:	687b      	ldr	r3, [r7, #4]
   25fc0:	62da      	str	r2, [r3, #44]	; 0x2c
   25fc2:	230e      	movs	r3, #14
   25fc4:	18fb      	adds	r3, r7, r3
   25fc6:	881b      	ldrh	r3, [r3, #0]
   25fc8:	05db      	lsls	r3, r3, #23
   25fca:	0dda      	lsrs	r2, r3, #23
   25fcc:	68bb      	ldr	r3, [r7, #8]
   25fce:	629a      	str	r2, [r3, #40]	; 0x28
   25fd0:	687b      	ldr	r3, [r7, #4]
   25fd2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   25fd4:	b29b      	uxth	r3, r3
   25fd6:	3b01      	subs	r3, #1
   25fd8:	b29a      	uxth	r2, r3
   25fda:	687b      	ldr	r3, [r7, #4]
   25fdc:	869a      	strh	r2, [r3, #52]	; 0x34
   25fde:	46c0      	nop			; (mov r8, r8)
   25fe0:	46bd      	mov	sp, r7
   25fe2:	b004      	add	sp, #16
   25fe4:	bd80      	pop	{r7, pc}
	...

00025fe8 <_spi_write_dummy>:
   25fe8:	b580      	push	{r7, lr}
   25fea:	b084      	sub	sp, #16
   25fec:	af00      	add	r7, sp, #0
   25fee:	6078      	str	r0, [r7, #4]
   25ff0:	687b      	ldr	r3, [r7, #4]
   25ff2:	681b      	ldr	r3, [r3, #0]
   25ff4:	60fb      	str	r3, [r7, #12]
   25ff6:	4b08      	ldr	r3, [pc, #32]	; (26018 <_spi_write_dummy+0x30>)
   25ff8:	881b      	ldrh	r3, [r3, #0]
   25ffa:	001a      	movs	r2, r3
   25ffc:	68fb      	ldr	r3, [r7, #12]
   25ffe:	629a      	str	r2, [r3, #40]	; 0x28
   26000:	687b      	ldr	r3, [r7, #4]
   26002:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   26004:	b29b      	uxth	r3, r3
   26006:	3b01      	subs	r3, #1
   26008:	b29a      	uxth	r2, r3
   2600a:	687b      	ldr	r3, [r7, #4]
   2600c:	865a      	strh	r2, [r3, #50]	; 0x32
   2600e:	46c0      	nop			; (mov r8, r8)
   26010:	46bd      	mov	sp, r7
   26012:	b004      	add	sp, #16
   26014:	bd80      	pop	{r7, pc}
   26016:	46c0      	nop			; (mov r8, r8)
   26018:	20005590 	.word	0x20005590

0002601c <_spi_read_dummy>:
   2601c:	b580      	push	{r7, lr}
   2601e:	b084      	sub	sp, #16
   26020:	af00      	add	r7, sp, #0
   26022:	6078      	str	r0, [r7, #4]
   26024:	687b      	ldr	r3, [r7, #4]
   26026:	681b      	ldr	r3, [r3, #0]
   26028:	60fb      	str	r3, [r7, #12]
   2602a:	230a      	movs	r3, #10
   2602c:	18fb      	adds	r3, r7, r3
   2602e:	2200      	movs	r2, #0
   26030:	801a      	strh	r2, [r3, #0]
   26032:	68fb      	ldr	r3, [r7, #12]
   26034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   26036:	230a      	movs	r3, #10
   26038:	18fb      	adds	r3, r7, r3
   2603a:	801a      	strh	r2, [r3, #0]
   2603c:	687b      	ldr	r3, [r7, #4]
   2603e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   26040:	b29b      	uxth	r3, r3
   26042:	3b01      	subs	r3, #1
   26044:	b29a      	uxth	r2, r3
   26046:	687b      	ldr	r3, [r7, #4]
   26048:	865a      	strh	r2, [r3, #50]	; 0x32
   2604a:	46c0      	nop			; (mov r8, r8)
   2604c:	46bd      	mov	sp, r7
   2604e:	b004      	add	sp, #16
   26050:	bd80      	pop	{r7, pc}

00026052 <_spi_read>:
   26052:	b580      	push	{r7, lr}
   26054:	b084      	sub	sp, #16
   26056:	af00      	add	r7, sp, #0
   26058:	6078      	str	r0, [r7, #4]
   2605a:	687b      	ldr	r3, [r7, #4]
   2605c:	681b      	ldr	r3, [r3, #0]
   2605e:	60fb      	str	r3, [r7, #12]
   26060:	68fb      	ldr	r3, [r7, #12]
   26062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26064:	b29a      	uxth	r2, r3
   26066:	230a      	movs	r3, #10
   26068:	18fb      	adds	r3, r7, r3
   2606a:	05d2      	lsls	r2, r2, #23
   2606c:	0dd2      	lsrs	r2, r2, #23
   2606e:	801a      	strh	r2, [r3, #0]
   26070:	687b      	ldr	r3, [r7, #4]
   26072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26074:	220a      	movs	r2, #10
   26076:	18ba      	adds	r2, r7, r2
   26078:	8812      	ldrh	r2, [r2, #0]
   2607a:	b2d2      	uxtb	r2, r2
   2607c:	701a      	strb	r2, [r3, #0]
   2607e:	687b      	ldr	r3, [r7, #4]
   26080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26082:	1c5a      	adds	r2, r3, #1
   26084:	687b      	ldr	r3, [r7, #4]
   26086:	629a      	str	r2, [r3, #40]	; 0x28
   26088:	687b      	ldr	r3, [r7, #4]
   2608a:	799b      	ldrb	r3, [r3, #6]
   2608c:	2b01      	cmp	r3, #1
   2608e:	d10d      	bne.n	260ac <_spi_read+0x5a>
   26090:	687b      	ldr	r3, [r7, #4]
   26092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26094:	220a      	movs	r2, #10
   26096:	18ba      	adds	r2, r7, r2
   26098:	8812      	ldrh	r2, [r2, #0]
   2609a:	0a12      	lsrs	r2, r2, #8
   2609c:	b292      	uxth	r2, r2
   2609e:	b2d2      	uxtb	r2, r2
   260a0:	701a      	strb	r2, [r3, #0]
   260a2:	687b      	ldr	r3, [r7, #4]
   260a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   260a6:	1c5a      	adds	r2, r3, #1
   260a8:	687b      	ldr	r3, [r7, #4]
   260aa:	629a      	str	r2, [r3, #40]	; 0x28
   260ac:	687b      	ldr	r3, [r7, #4]
   260ae:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   260b0:	b29b      	uxth	r3, r3
   260b2:	3b01      	subs	r3, #1
   260b4:	b29a      	uxth	r2, r3
   260b6:	687b      	ldr	r3, [r7, #4]
   260b8:	861a      	strh	r2, [r3, #48]	; 0x30
   260ba:	46c0      	nop			; (mov r8, r8)
   260bc:	46bd      	mov	sp, r7
   260be:	b004      	add	sp, #16
   260c0:	bd80      	pop	{r7, pc}
	...

000260c4 <_spi_interrupt_handler>:
   260c4:	b580      	push	{r7, lr}
   260c6:	b086      	sub	sp, #24
   260c8:	af00      	add	r7, sp, #0
   260ca:	0002      	movs	r2, r0
   260cc:	1dfb      	adds	r3, r7, #7
   260ce:	701a      	strb	r2, [r3, #0]
   260d0:	1dfb      	adds	r3, r7, #7
   260d2:	781a      	ldrb	r2, [r3, #0]
   260d4:	4b96      	ldr	r3, [pc, #600]	; (26330 <_spi_interrupt_handler+0x26c>)
   260d6:	0092      	lsls	r2, r2, #2
   260d8:	58d3      	ldr	r3, [r2, r3]
   260da:	617b      	str	r3, [r7, #20]
   260dc:	697b      	ldr	r3, [r7, #20]
   260de:	681b      	ldr	r3, [r3, #0]
   260e0:	613b      	str	r3, [r7, #16]
   260e2:	697b      	ldr	r3, [r7, #20]
   260e4:	2237      	movs	r2, #55	; 0x37
   260e6:	5c9a      	ldrb	r2, [r3, r2]
   260e8:	697b      	ldr	r3, [r7, #20]
   260ea:	2136      	movs	r1, #54	; 0x36
   260ec:	5c59      	ldrb	r1, [r3, r1]
   260ee:	230f      	movs	r3, #15
   260f0:	18fb      	adds	r3, r7, r3
   260f2:	400a      	ands	r2, r1
   260f4:	701a      	strb	r2, [r3, #0]
   260f6:	693b      	ldr	r3, [r7, #16]
   260f8:	7e1b      	ldrb	r3, [r3, #24]
   260fa:	b2da      	uxtb	r2, r3
   260fc:	230c      	movs	r3, #12
   260fe:	18fb      	adds	r3, r7, r3
   26100:	801a      	strh	r2, [r3, #0]
   26102:	693b      	ldr	r3, [r7, #16]
   26104:	7d9b      	ldrb	r3, [r3, #22]
   26106:	b2db      	uxtb	r3, r3
   26108:	b29a      	uxth	r2, r3
   2610a:	230c      	movs	r3, #12
   2610c:	18fb      	adds	r3, r7, r3
   2610e:	210c      	movs	r1, #12
   26110:	1879      	adds	r1, r7, r1
   26112:	8809      	ldrh	r1, [r1, #0]
   26114:	400a      	ands	r2, r1
   26116:	801a      	strh	r2, [r3, #0]
   26118:	230c      	movs	r3, #12
   2611a:	18fb      	adds	r3, r7, r3
   2611c:	881b      	ldrh	r3, [r3, #0]
   2611e:	2201      	movs	r2, #1
   26120:	4013      	ands	r3, r2
   26122:	d038      	beq.n	26196 <_spi_interrupt_handler+0xd2>
   26124:	697b      	ldr	r3, [r7, #20]
   26126:	795b      	ldrb	r3, [r3, #5]
   26128:	2b01      	cmp	r3, #1
   2612a:	d110      	bne.n	2614e <_spi_interrupt_handler+0x8a>
   2612c:	697b      	ldr	r3, [r7, #20]
   2612e:	7a5b      	ldrb	r3, [r3, #9]
   26130:	b2db      	uxtb	r3, r3
   26132:	2b00      	cmp	r3, #0
   26134:	d10b      	bne.n	2614e <_spi_interrupt_handler+0x8a>
   26136:	697b      	ldr	r3, [r7, #20]
   26138:	0018      	movs	r0, r3
   2613a:	4b7e      	ldr	r3, [pc, #504]	; (26334 <_spi_interrupt_handler+0x270>)
   2613c:	4798      	blx	r3
   2613e:	697b      	ldr	r3, [r7, #20]
   26140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   26142:	b29b      	uxth	r3, r3
   26144:	2b00      	cmp	r3, #0
   26146:	d102      	bne.n	2614e <_spi_interrupt_handler+0x8a>
   26148:	693b      	ldr	r3, [r7, #16]
   2614a:	2201      	movs	r2, #1
   2614c:	751a      	strb	r2, [r3, #20]
   2614e:	697b      	ldr	r3, [r7, #20]
   26150:	795b      	ldrb	r3, [r3, #5]
   26152:	2b01      	cmp	r3, #1
   26154:	d11f      	bne.n	26196 <_spi_interrupt_handler+0xd2>
   26156:	697b      	ldr	r3, [r7, #20]
   26158:	7a5b      	ldrb	r3, [r3, #9]
   2615a:	b2db      	uxtb	r3, r3
   2615c:	2b00      	cmp	r3, #0
   2615e:	d01a      	beq.n	26196 <_spi_interrupt_handler+0xd2>
   26160:	697b      	ldr	r3, [r7, #20]
   26162:	0018      	movs	r0, r3
   26164:	4b74      	ldr	r3, [pc, #464]	; (26338 <_spi_interrupt_handler+0x274>)
   26166:	4798      	blx	r3
   26168:	697b      	ldr	r3, [r7, #20]
   2616a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   2616c:	b29b      	uxth	r3, r3
   2616e:	2b00      	cmp	r3, #0
   26170:	d111      	bne.n	26196 <_spi_interrupt_handler+0xd2>
   26172:	693b      	ldr	r3, [r7, #16]
   26174:	2201      	movs	r2, #1
   26176:	751a      	strb	r2, [r3, #20]
   26178:	697b      	ldr	r3, [r7, #20]
   2617a:	7a5b      	ldrb	r3, [r3, #9]
   2617c:	b2db      	uxtb	r3, r3
   2617e:	2b01      	cmp	r3, #1
   26180:	d109      	bne.n	26196 <_spi_interrupt_handler+0xd2>
   26182:	697b      	ldr	r3, [r7, #20]
   26184:	79db      	ldrb	r3, [r3, #7]
   26186:	2201      	movs	r2, #1
   26188:	4053      	eors	r3, r2
   2618a:	b2db      	uxtb	r3, r3
   2618c:	2b00      	cmp	r3, #0
   2618e:	d002      	beq.n	26196 <_spi_interrupt_handler+0xd2>
   26190:	693b      	ldr	r3, [r7, #16]
   26192:	2202      	movs	r2, #2
   26194:	759a      	strb	r2, [r3, #22]
   26196:	230c      	movs	r3, #12
   26198:	18fb      	adds	r3, r7, r3
   2619a:	881b      	ldrh	r3, [r3, #0]
   2619c:	2204      	movs	r2, #4
   2619e:	4013      	ands	r3, r2
   261a0:	d100      	bne.n	261a4 <_spi_interrupt_handler+0xe0>
   261a2:	e07e      	b.n	262a2 <_spi_interrupt_handler+0x1de>
   261a4:	693b      	ldr	r3, [r7, #16]
   261a6:	8b5b      	ldrh	r3, [r3, #26]
   261a8:	b29b      	uxth	r3, r3
   261aa:	001a      	movs	r2, r3
   261ac:	2304      	movs	r3, #4
   261ae:	4013      	ands	r3, r2
   261b0:	d022      	beq.n	261f8 <_spi_interrupt_handler+0x134>
   261b2:	697b      	ldr	r3, [r7, #20]
   261b4:	7a5b      	ldrb	r3, [r3, #9]
   261b6:	b2db      	uxtb	r3, r3
   261b8:	2b01      	cmp	r3, #1
   261ba:	d014      	beq.n	261e6 <_spi_interrupt_handler+0x122>
   261bc:	697b      	ldr	r3, [r7, #20]
   261be:	2238      	movs	r2, #56	; 0x38
   261c0:	211e      	movs	r1, #30
   261c2:	5499      	strb	r1, [r3, r2]
   261c4:	697b      	ldr	r3, [r7, #20]
   261c6:	2203      	movs	r2, #3
   261c8:	725a      	strb	r2, [r3, #9]
   261ca:	693b      	ldr	r3, [r7, #16]
   261cc:	2205      	movs	r2, #5
   261ce:	751a      	strb	r2, [r3, #20]
   261d0:	230f      	movs	r3, #15
   261d2:	18fb      	adds	r3, r7, r3
   261d4:	781b      	ldrb	r3, [r3, #0]
   261d6:	2208      	movs	r2, #8
   261d8:	4013      	ands	r3, r2
   261da:	d004      	beq.n	261e6 <_spi_interrupt_handler+0x122>
   261dc:	697b      	ldr	r3, [r7, #20]
   261de:	699b      	ldr	r3, [r3, #24]
   261e0:	697a      	ldr	r2, [r7, #20]
   261e2:	0010      	movs	r0, r2
   261e4:	4798      	blx	r3
   261e6:	693b      	ldr	r3, [r7, #16]
   261e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   261ea:	230a      	movs	r3, #10
   261ec:	18fb      	adds	r3, r7, r3
   261ee:	801a      	strh	r2, [r3, #0]
   261f0:	693b      	ldr	r3, [r7, #16]
   261f2:	2204      	movs	r2, #4
   261f4:	835a      	strh	r2, [r3, #26]
   261f6:	e054      	b.n	262a2 <_spi_interrupt_handler+0x1de>
   261f8:	697b      	ldr	r3, [r7, #20]
   261fa:	7a5b      	ldrb	r3, [r3, #9]
   261fc:	b2db      	uxtb	r3, r3
   261fe:	2b01      	cmp	r3, #1
   26200:	d11e      	bne.n	26240 <_spi_interrupt_handler+0x17c>
   26202:	697b      	ldr	r3, [r7, #20]
   26204:	0018      	movs	r0, r3
   26206:	4b4d      	ldr	r3, [pc, #308]	; (2633c <_spi_interrupt_handler+0x278>)
   26208:	4798      	blx	r3
   2620a:	697b      	ldr	r3, [r7, #20]
   2620c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2620e:	b29b      	uxth	r3, r3
   26210:	2b00      	cmp	r3, #0
   26212:	d146      	bne.n	262a2 <_spi_interrupt_handler+0x1de>
   26214:	693b      	ldr	r3, [r7, #16]
   26216:	2204      	movs	r2, #4
   26218:	751a      	strb	r2, [r3, #20]
   2621a:	697b      	ldr	r3, [r7, #20]
   2621c:	2238      	movs	r2, #56	; 0x38
   2621e:	2100      	movs	r1, #0
   26220:	5499      	strb	r1, [r3, r2]
   26222:	697b      	ldr	r3, [r7, #20]
   26224:	2203      	movs	r2, #3
   26226:	725a      	strb	r2, [r3, #9]
   26228:	230f      	movs	r3, #15
   2622a:	18fb      	adds	r3, r7, r3
   2622c:	781b      	ldrb	r3, [r3, #0]
   2622e:	2201      	movs	r2, #1
   26230:	4013      	ands	r3, r2
   26232:	d036      	beq.n	262a2 <_spi_interrupt_handler+0x1de>
   26234:	697b      	ldr	r3, [r7, #20]
   26236:	68db      	ldr	r3, [r3, #12]
   26238:	697a      	ldr	r2, [r7, #20]
   2623a:	0010      	movs	r0, r2
   2623c:	4798      	blx	r3
   2623e:	e030      	b.n	262a2 <_spi_interrupt_handler+0x1de>
   26240:	697b      	ldr	r3, [r7, #20]
   26242:	0018      	movs	r0, r3
   26244:	4b3e      	ldr	r3, [pc, #248]	; (26340 <_spi_interrupt_handler+0x27c>)
   26246:	4798      	blx	r3
   26248:	697b      	ldr	r3, [r7, #20]
   2624a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2624c:	b29b      	uxth	r3, r3
   2624e:	2b00      	cmp	r3, #0
   26250:	d127      	bne.n	262a2 <_spi_interrupt_handler+0x1de>
   26252:	697b      	ldr	r3, [r7, #20]
   26254:	2238      	movs	r2, #56	; 0x38
   26256:	2100      	movs	r1, #0
   26258:	5499      	strb	r1, [r3, r2]
   2625a:	693b      	ldr	r3, [r7, #16]
   2625c:	2204      	movs	r2, #4
   2625e:	751a      	strb	r2, [r3, #20]
   26260:	697b      	ldr	r3, [r7, #20]
   26262:	7a5b      	ldrb	r3, [r3, #9]
   26264:	b2db      	uxtb	r3, r3
   26266:	2b02      	cmp	r3, #2
   26268:	d10b      	bne.n	26282 <_spi_interrupt_handler+0x1be>
   2626a:	230f      	movs	r3, #15
   2626c:	18fb      	adds	r3, r7, r3
   2626e:	781b      	ldrb	r3, [r3, #0]
   26270:	2204      	movs	r2, #4
   26272:	4013      	ands	r3, r2
   26274:	d015      	beq.n	262a2 <_spi_interrupt_handler+0x1de>
   26276:	697b      	ldr	r3, [r7, #20]
   26278:	695b      	ldr	r3, [r3, #20]
   2627a:	697a      	ldr	r2, [r7, #20]
   2627c:	0010      	movs	r0, r2
   2627e:	4798      	blx	r3
   26280:	e00f      	b.n	262a2 <_spi_interrupt_handler+0x1de>
   26282:	697b      	ldr	r3, [r7, #20]
   26284:	7a5b      	ldrb	r3, [r3, #9]
   26286:	b2db      	uxtb	r3, r3
   26288:	2b00      	cmp	r3, #0
   2628a:	d10a      	bne.n	262a2 <_spi_interrupt_handler+0x1de>
   2628c:	230f      	movs	r3, #15
   2628e:	18fb      	adds	r3, r7, r3
   26290:	781b      	ldrb	r3, [r3, #0]
   26292:	2202      	movs	r2, #2
   26294:	4013      	ands	r3, r2
   26296:	d004      	beq.n	262a2 <_spi_interrupt_handler+0x1de>
   26298:	697b      	ldr	r3, [r7, #20]
   2629a:	691b      	ldr	r3, [r3, #16]
   2629c:	697a      	ldr	r2, [r7, #20]
   2629e:	0010      	movs	r0, r2
   262a0:	4798      	blx	r3
   262a2:	230c      	movs	r3, #12
   262a4:	18fb      	adds	r3, r7, r3
   262a6:	881b      	ldrh	r3, [r3, #0]
   262a8:	2202      	movs	r2, #2
   262aa:	4013      	ands	r3, r2
   262ac:	d024      	beq.n	262f8 <_spi_interrupt_handler+0x234>
   262ae:	697b      	ldr	r3, [r7, #20]
   262b0:	795b      	ldrb	r3, [r3, #5]
   262b2:	2b01      	cmp	r3, #1
   262b4:	d120      	bne.n	262f8 <_spi_interrupt_handler+0x234>
   262b6:	697b      	ldr	r3, [r7, #20]
   262b8:	7a5b      	ldrb	r3, [r3, #9]
   262ba:	b2db      	uxtb	r3, r3
   262bc:	2b01      	cmp	r3, #1
   262be:	d11b      	bne.n	262f8 <_spi_interrupt_handler+0x234>
   262c0:	697b      	ldr	r3, [r7, #20]
   262c2:	79db      	ldrb	r3, [r3, #7]
   262c4:	2201      	movs	r2, #1
   262c6:	4053      	eors	r3, r2
   262c8:	b2db      	uxtb	r3, r3
   262ca:	2b00      	cmp	r3, #0
   262cc:	d014      	beq.n	262f8 <_spi_interrupt_handler+0x234>
   262ce:	693b      	ldr	r3, [r7, #16]
   262d0:	2202      	movs	r2, #2
   262d2:	751a      	strb	r2, [r3, #20]
   262d4:	697b      	ldr	r3, [r7, #20]
   262d6:	2203      	movs	r2, #3
   262d8:	725a      	strb	r2, [r3, #9]
   262da:	697b      	ldr	r3, [r7, #20]
   262dc:	2238      	movs	r2, #56	; 0x38
   262de:	2100      	movs	r1, #0
   262e0:	5499      	strb	r1, [r3, r2]
   262e2:	230f      	movs	r3, #15
   262e4:	18fb      	adds	r3, r7, r3
   262e6:	781b      	ldrb	r3, [r3, #0]
   262e8:	2201      	movs	r2, #1
   262ea:	4013      	ands	r3, r2
   262ec:	d004      	beq.n	262f8 <_spi_interrupt_handler+0x234>
   262ee:	697b      	ldr	r3, [r7, #20]
   262f0:	68db      	ldr	r3, [r3, #12]
   262f2:	697a      	ldr	r2, [r7, #20]
   262f4:	0010      	movs	r0, r2
   262f6:	4798      	blx	r3
   262f8:	230c      	movs	r3, #12
   262fa:	18fb      	adds	r3, r7, r3
   262fc:	881b      	ldrh	r3, [r3, #0]
   262fe:	2280      	movs	r2, #128	; 0x80
   26300:	4013      	ands	r3, r2
   26302:	d010      	beq.n	26326 <_spi_interrupt_handler+0x262>
   26304:	693b      	ldr	r3, [r7, #16]
   26306:	2280      	movs	r2, #128	; 0x80
   26308:	751a      	strb	r2, [r3, #20]
   2630a:	693b      	ldr	r3, [r7, #16]
   2630c:	2280      	movs	r2, #128	; 0x80
   2630e:	761a      	strb	r2, [r3, #24]
   26310:	230f      	movs	r3, #15
   26312:	18fb      	adds	r3, r7, r3
   26314:	781b      	ldrb	r3, [r3, #0]
   26316:	2240      	movs	r2, #64	; 0x40
   26318:	4013      	ands	r3, r2
   2631a:	d004      	beq.n	26326 <_spi_interrupt_handler+0x262>
   2631c:	697b      	ldr	r3, [r7, #20]
   2631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26320:	697a      	ldr	r2, [r7, #20]
   26322:	0010      	movs	r0, r2
   26324:	4798      	blx	r3
   26326:	46c0      	nop			; (mov r8, r8)
   26328:	46bd      	mov	sp, r7
   2632a:	b006      	add	sp, #24
   2632c:	bd80      	pop	{r7, pc}
   2632e:	46c0      	nop			; (mov r8, r8)
   26330:	20005578 	.word	0x20005578
   26334:	00025fe9 	.word	0x00025fe9
   26338:	00025f6d 	.word	0x00025f6d
   2633c:	0002601d 	.word	0x0002601d
   26340:	00026053 	.word	0x00026053

00026344 <system_gclk_chan_get_config_defaults>:
   26344:	b580      	push	{r7, lr}
   26346:	b082      	sub	sp, #8
   26348:	af00      	add	r7, sp, #0
   2634a:	6078      	str	r0, [r7, #4]
   2634c:	687b      	ldr	r3, [r7, #4]
   2634e:	2200      	movs	r2, #0
   26350:	701a      	strb	r2, [r3, #0]
   26352:	46c0      	nop			; (mov r8, r8)
   26354:	46bd      	mov	sp, r7
   26356:	b002      	add	sp, #8
   26358:	bd80      	pop	{r7, pc}
	...

0002635c <system_apb_clock_set_mask>:
   2635c:	b580      	push	{r7, lr}
   2635e:	b082      	sub	sp, #8
   26360:	af00      	add	r7, sp, #0
   26362:	0002      	movs	r2, r0
   26364:	6039      	str	r1, [r7, #0]
   26366:	1dfb      	adds	r3, r7, #7
   26368:	701a      	strb	r2, [r3, #0]
   2636a:	1dfb      	adds	r3, r7, #7
   2636c:	781b      	ldrb	r3, [r3, #0]
   2636e:	2b01      	cmp	r3, #1
   26370:	d00a      	beq.n	26388 <system_apb_clock_set_mask+0x2c>
   26372:	2b02      	cmp	r3, #2
   26374:	d00f      	beq.n	26396 <system_apb_clock_set_mask+0x3a>
   26376:	2b00      	cmp	r3, #0
   26378:	d114      	bne.n	263a4 <system_apb_clock_set_mask+0x48>
   2637a:	4b0e      	ldr	r3, [pc, #56]	; (263b4 <system_apb_clock_set_mask+0x58>)
   2637c:	4a0d      	ldr	r2, [pc, #52]	; (263b4 <system_apb_clock_set_mask+0x58>)
   2637e:	6991      	ldr	r1, [r2, #24]
   26380:	683a      	ldr	r2, [r7, #0]
   26382:	430a      	orrs	r2, r1
   26384:	619a      	str	r2, [r3, #24]
   26386:	e00f      	b.n	263a8 <system_apb_clock_set_mask+0x4c>
   26388:	4b0a      	ldr	r3, [pc, #40]	; (263b4 <system_apb_clock_set_mask+0x58>)
   2638a:	4a0a      	ldr	r2, [pc, #40]	; (263b4 <system_apb_clock_set_mask+0x58>)
   2638c:	69d1      	ldr	r1, [r2, #28]
   2638e:	683a      	ldr	r2, [r7, #0]
   26390:	430a      	orrs	r2, r1
   26392:	61da      	str	r2, [r3, #28]
   26394:	e008      	b.n	263a8 <system_apb_clock_set_mask+0x4c>
   26396:	4b07      	ldr	r3, [pc, #28]	; (263b4 <system_apb_clock_set_mask+0x58>)
   26398:	4a06      	ldr	r2, [pc, #24]	; (263b4 <system_apb_clock_set_mask+0x58>)
   2639a:	6a11      	ldr	r1, [r2, #32]
   2639c:	683a      	ldr	r2, [r7, #0]
   2639e:	430a      	orrs	r2, r1
   263a0:	621a      	str	r2, [r3, #32]
   263a2:	e001      	b.n	263a8 <system_apb_clock_set_mask+0x4c>
   263a4:	2317      	movs	r3, #23
   263a6:	e000      	b.n	263aa <system_apb_clock_set_mask+0x4e>
   263a8:	2300      	movs	r3, #0
   263aa:	0018      	movs	r0, r3
   263ac:	46bd      	mov	sp, r7
   263ae:	b002      	add	sp, #8
   263b0:	bd80      	pop	{r7, pc}
   263b2:	46c0      	nop			; (mov r8, r8)
   263b4:	40000400 	.word	0x40000400

000263b8 <system_pinmux_get_config_defaults>:
   263b8:	b580      	push	{r7, lr}
   263ba:	b082      	sub	sp, #8
   263bc:	af00      	add	r7, sp, #0
   263be:	6078      	str	r0, [r7, #4]
   263c0:	687b      	ldr	r3, [r7, #4]
   263c2:	2280      	movs	r2, #128	; 0x80
   263c4:	701a      	strb	r2, [r3, #0]
   263c6:	687b      	ldr	r3, [r7, #4]
   263c8:	2200      	movs	r2, #0
   263ca:	705a      	strb	r2, [r3, #1]
   263cc:	687b      	ldr	r3, [r7, #4]
   263ce:	2201      	movs	r2, #1
   263d0:	709a      	strb	r2, [r3, #2]
   263d2:	687b      	ldr	r3, [r7, #4]
   263d4:	2200      	movs	r2, #0
   263d6:	70da      	strb	r2, [r3, #3]
   263d8:	46c0      	nop			; (mov r8, r8)
   263da:	46bd      	mov	sp, r7
   263dc:	b002      	add	sp, #8
   263de:	bd80      	pop	{r7, pc}

000263e0 <system_is_debugger_present>:
   263e0:	b580      	push	{r7, lr}
   263e2:	af00      	add	r7, sp, #0
   263e4:	4b05      	ldr	r3, [pc, #20]	; (263fc <system_is_debugger_present+0x1c>)
   263e6:	789b      	ldrb	r3, [r3, #2]
   263e8:	b2db      	uxtb	r3, r3
   263ea:	001a      	movs	r2, r3
   263ec:	2302      	movs	r3, #2
   263ee:	4013      	ands	r3, r2
   263f0:	1e5a      	subs	r2, r3, #1
   263f2:	4193      	sbcs	r3, r2
   263f4:	b2db      	uxtb	r3, r3
   263f6:	0018      	movs	r0, r3
   263f8:	46bd      	mov	sp, r7
   263fa:	bd80      	pop	{r7, pc}
   263fc:	41002000 	.word	0x41002000

00026400 <usart_is_syncing>:
   26400:	b580      	push	{r7, lr}
   26402:	b084      	sub	sp, #16
   26404:	af00      	add	r7, sp, #0
   26406:	6078      	str	r0, [r7, #4]
   26408:	687b      	ldr	r3, [r7, #4]
   2640a:	681b      	ldr	r3, [r3, #0]
   2640c:	60fb      	str	r3, [r7, #12]
   2640e:	68fb      	ldr	r3, [r7, #12]
   26410:	69db      	ldr	r3, [r3, #28]
   26412:	1e5a      	subs	r2, r3, #1
   26414:	4193      	sbcs	r3, r2
   26416:	b2db      	uxtb	r3, r3
   26418:	0018      	movs	r0, r3
   2641a:	46bd      	mov	sp, r7
   2641c:	b004      	add	sp, #16
   2641e:	bd80      	pop	{r7, pc}

00026420 <_usart_wait_for_sync>:
   26420:	b580      	push	{r7, lr}
   26422:	b082      	sub	sp, #8
   26424:	af00      	add	r7, sp, #0
   26426:	6078      	str	r0, [r7, #4]
   26428:	46c0      	nop			; (mov r8, r8)
   2642a:	687b      	ldr	r3, [r7, #4]
   2642c:	0018      	movs	r0, r3
   2642e:	4b04      	ldr	r3, [pc, #16]	; (26440 <_usart_wait_for_sync+0x20>)
   26430:	4798      	blx	r3
   26432:	1e03      	subs	r3, r0, #0
   26434:	d1f9      	bne.n	2642a <_usart_wait_for_sync+0xa>
   26436:	46c0      	nop			; (mov r8, r8)
   26438:	46bd      	mov	sp, r7
   2643a:	b002      	add	sp, #8
   2643c:	bd80      	pop	{r7, pc}
   2643e:	46c0      	nop			; (mov r8, r8)
   26440:	00026401 	.word	0x00026401

00026444 <_usart_set_config>:
   26444:	b5b0      	push	{r4, r5, r7, lr}
   26446:	b08c      	sub	sp, #48	; 0x30
   26448:	af02      	add	r7, sp, #8
   2644a:	6078      	str	r0, [r7, #4]
   2644c:	6039      	str	r1, [r7, #0]
   2644e:	687b      	ldr	r3, [r7, #4]
   26450:	681b      	ldr	r3, [r3, #0]
   26452:	61bb      	str	r3, [r7, #24]
   26454:	687b      	ldr	r3, [r7, #4]
   26456:	681b      	ldr	r3, [r3, #0]
   26458:	0018      	movs	r0, r3
   2645a:	4bab      	ldr	r3, [pc, #684]	; (26708 <_usart_set_config+0x2c4>)
   2645c:	4798      	blx	r3
   2645e:	0003      	movs	r3, r0
   26460:	617b      	str	r3, [r7, #20]
   26462:	697b      	ldr	r3, [r7, #20]
   26464:	3314      	adds	r3, #20
   26466:	613b      	str	r3, [r7, #16]
   26468:	2300      	movs	r3, #0
   2646a:	627b      	str	r3, [r7, #36]	; 0x24
   2646c:	2300      	movs	r3, #0
   2646e:	623b      	str	r3, [r7, #32]
   26470:	230a      	movs	r3, #10
   26472:	18fb      	adds	r3, r7, r3
   26474:	2200      	movs	r2, #0
   26476:	801a      	strh	r2, [r3, #0]
   26478:	231f      	movs	r3, #31
   2647a:	18fb      	adds	r3, r7, r3
   2647c:	2200      	movs	r2, #0
   2647e:	701a      	strb	r2, [r3, #0]
   26480:	231e      	movs	r3, #30
   26482:	18fb      	adds	r3, r7, r3
   26484:	2210      	movs	r2, #16
   26486:	701a      	strb	r2, [r3, #0]
   26488:	683b      	ldr	r3, [r7, #0]
   2648a:	8a1b      	ldrh	r3, [r3, #16]
   2648c:	2280      	movs	r2, #128	; 0x80
   2648e:	01d2      	lsls	r2, r2, #7
   26490:	4293      	cmp	r3, r2
   26492:	d01c      	beq.n	264ce <_usart_set_config+0x8a>
   26494:	2280      	movs	r2, #128	; 0x80
   26496:	01d2      	lsls	r2, r2, #7
   26498:	4293      	cmp	r3, r2
   2649a:	dc06      	bgt.n	264aa <_usart_set_config+0x66>
   2649c:	2b00      	cmp	r3, #0
   2649e:	d00d      	beq.n	264bc <_usart_set_config+0x78>
   264a0:	2280      	movs	r2, #128	; 0x80
   264a2:	0192      	lsls	r2, r2, #6
   264a4:	4293      	cmp	r3, r2
   264a6:	d024      	beq.n	264f2 <_usart_set_config+0xae>
   264a8:	e035      	b.n	26516 <_usart_set_config+0xd2>
   264aa:	22c0      	movs	r2, #192	; 0xc0
   264ac:	01d2      	lsls	r2, r2, #7
   264ae:	4293      	cmp	r3, r2
   264b0:	d028      	beq.n	26504 <_usart_set_config+0xc0>
   264b2:	2280      	movs	r2, #128	; 0x80
   264b4:	0212      	lsls	r2, r2, #8
   264b6:	4293      	cmp	r3, r2
   264b8:	d012      	beq.n	264e0 <_usart_set_config+0x9c>
   264ba:	e02c      	b.n	26516 <_usart_set_config+0xd2>
   264bc:	231f      	movs	r3, #31
   264be:	18fb      	adds	r3, r7, r3
   264c0:	2200      	movs	r2, #0
   264c2:	701a      	strb	r2, [r3, #0]
   264c4:	231e      	movs	r3, #30
   264c6:	18fb      	adds	r3, r7, r3
   264c8:	2210      	movs	r2, #16
   264ca:	701a      	strb	r2, [r3, #0]
   264cc:	e023      	b.n	26516 <_usart_set_config+0xd2>
   264ce:	231f      	movs	r3, #31
   264d0:	18fb      	adds	r3, r7, r3
   264d2:	2200      	movs	r2, #0
   264d4:	701a      	strb	r2, [r3, #0]
   264d6:	231e      	movs	r3, #30
   264d8:	18fb      	adds	r3, r7, r3
   264da:	2208      	movs	r2, #8
   264dc:	701a      	strb	r2, [r3, #0]
   264de:	e01a      	b.n	26516 <_usart_set_config+0xd2>
   264e0:	231f      	movs	r3, #31
   264e2:	18fb      	adds	r3, r7, r3
   264e4:	2200      	movs	r2, #0
   264e6:	701a      	strb	r2, [r3, #0]
   264e8:	231e      	movs	r3, #30
   264ea:	18fb      	adds	r3, r7, r3
   264ec:	2203      	movs	r2, #3
   264ee:	701a      	strb	r2, [r3, #0]
   264f0:	e011      	b.n	26516 <_usart_set_config+0xd2>
   264f2:	231f      	movs	r3, #31
   264f4:	18fb      	adds	r3, r7, r3
   264f6:	2201      	movs	r2, #1
   264f8:	701a      	strb	r2, [r3, #0]
   264fa:	231e      	movs	r3, #30
   264fc:	18fb      	adds	r3, r7, r3
   264fe:	2210      	movs	r2, #16
   26500:	701a      	strb	r2, [r3, #0]
   26502:	e008      	b.n	26516 <_usart_set_config+0xd2>
   26504:	231f      	movs	r3, #31
   26506:	18fb      	adds	r3, r7, r3
   26508:	2201      	movs	r2, #1
   2650a:	701a      	strb	r2, [r3, #0]
   2650c:	231e      	movs	r3, #30
   2650e:	18fb      	adds	r3, r7, r3
   26510:	2208      	movs	r2, #8
   26512:	701a      	strb	r2, [r3, #0]
   26514:	46c0      	nop			; (mov r8, r8)
   26516:	683b      	ldr	r3, [r7, #0]
   26518:	681a      	ldr	r2, [r3, #0]
   2651a:	683b      	ldr	r3, [r7, #0]
   2651c:	68db      	ldr	r3, [r3, #12]
   2651e:	431a      	orrs	r2, r3
   26520:	683b      	ldr	r3, [r7, #0]
   26522:	695b      	ldr	r3, [r3, #20]
   26524:	4313      	orrs	r3, r2
   26526:	683a      	ldr	r2, [r7, #0]
   26528:	8a12      	ldrh	r2, [r2, #16]
   2652a:	4313      	orrs	r3, r2
   2652c:	683a      	ldr	r2, [r7, #0]
   2652e:	7e12      	ldrb	r2, [r2, #24]
   26530:	0212      	lsls	r2, r2, #8
   26532:	4313      	orrs	r3, r2
   26534:	683a      	ldr	r2, [r7, #0]
   26536:	2126      	movs	r1, #38	; 0x26
   26538:	5c52      	ldrb	r2, [r2, r1]
   2653a:	0752      	lsls	r2, r2, #29
   2653c:	4313      	orrs	r3, r2
   2653e:	627b      	str	r3, [r7, #36]	; 0x24
   26540:	231d      	movs	r3, #29
   26542:	18fb      	adds	r3, r7, r3
   26544:	2200      	movs	r2, #0
   26546:	701a      	strb	r2, [r3, #0]
   26548:	683b      	ldr	r3, [r7, #0]
   2654a:	685b      	ldr	r3, [r3, #4]
   2654c:	60fb      	str	r3, [r7, #12]
   2654e:	68fb      	ldr	r3, [r7, #12]
   26550:	2b00      	cmp	r3, #0
   26552:	d01e      	beq.n	26592 <_usart_set_config+0x14e>
   26554:	2280      	movs	r2, #128	; 0x80
   26556:	0552      	lsls	r2, r2, #21
   26558:	4293      	cmp	r3, r2
   2655a:	d14f      	bne.n	265fc <_usart_set_config+0x1b8>
   2655c:	683b      	ldr	r3, [r7, #0]
   2655e:	2227      	movs	r2, #39	; 0x27
   26560:	5c9b      	ldrb	r3, [r3, r2]
   26562:	2201      	movs	r2, #1
   26564:	4053      	eors	r3, r2
   26566:	b2db      	uxtb	r3, r3
   26568:	2b00      	cmp	r3, #0
   2656a:	d046      	beq.n	265fa <_usart_set_config+0x1b6>
   2656c:	683b      	ldr	r3, [r7, #0]
   2656e:	6a1d      	ldr	r5, [r3, #32]
   26570:	693b      	ldr	r3, [r7, #16]
   26572:	b2db      	uxtb	r3, r3
   26574:	0018      	movs	r0, r3
   26576:	4b65      	ldr	r3, [pc, #404]	; (2670c <_usart_set_config+0x2c8>)
   26578:	4798      	blx	r3
   2657a:	0001      	movs	r1, r0
   2657c:	231d      	movs	r3, #29
   2657e:	18fc      	adds	r4, r7, r3
   26580:	230a      	movs	r3, #10
   26582:	18fb      	adds	r3, r7, r3
   26584:	001a      	movs	r2, r3
   26586:	0028      	movs	r0, r5
   26588:	4b61      	ldr	r3, [pc, #388]	; (26710 <_usart_set_config+0x2cc>)
   2658a:	4798      	blx	r3
   2658c:	0003      	movs	r3, r0
   2658e:	7023      	strb	r3, [r4, #0]
   26590:	e033      	b.n	265fa <_usart_set_config+0x1b6>
   26592:	683b      	ldr	r3, [r7, #0]
   26594:	2227      	movs	r2, #39	; 0x27
   26596:	5c9b      	ldrb	r3, [r3, r2]
   26598:	2b00      	cmp	r3, #0
   2659a:	d014      	beq.n	265c6 <_usart_set_config+0x182>
   2659c:	683b      	ldr	r3, [r7, #0]
   2659e:	6a18      	ldr	r0, [r3, #32]
   265a0:	683b      	ldr	r3, [r7, #0]
   265a2:	6a99      	ldr	r1, [r3, #40]	; 0x28
   265a4:	231d      	movs	r3, #29
   265a6:	18fc      	adds	r4, r7, r3
   265a8:	231f      	movs	r3, #31
   265aa:	18fb      	adds	r3, r7, r3
   265ac:	781d      	ldrb	r5, [r3, #0]
   265ae:	230a      	movs	r3, #10
   265b0:	18fa      	adds	r2, r7, r3
   265b2:	231e      	movs	r3, #30
   265b4:	18fb      	adds	r3, r7, r3
   265b6:	781b      	ldrb	r3, [r3, #0]
   265b8:	9300      	str	r3, [sp, #0]
   265ba:	002b      	movs	r3, r5
   265bc:	4d55      	ldr	r5, [pc, #340]	; (26714 <_usart_set_config+0x2d0>)
   265be:	47a8      	blx	r5
   265c0:	0003      	movs	r3, r0
   265c2:	7023      	strb	r3, [r4, #0]
   265c4:	e01a      	b.n	265fc <_usart_set_config+0x1b8>
   265c6:	683b      	ldr	r3, [r7, #0]
   265c8:	6a1d      	ldr	r5, [r3, #32]
   265ca:	693b      	ldr	r3, [r7, #16]
   265cc:	b2db      	uxtb	r3, r3
   265ce:	0018      	movs	r0, r3
   265d0:	4b4e      	ldr	r3, [pc, #312]	; (2670c <_usart_set_config+0x2c8>)
   265d2:	4798      	blx	r3
   265d4:	231d      	movs	r3, #29
   265d6:	18fc      	adds	r4, r7, r3
   265d8:	231f      	movs	r3, #31
   265da:	18fb      	adds	r3, r7, r3
   265dc:	7819      	ldrb	r1, [r3, #0]
   265de:	230a      	movs	r3, #10
   265e0:	18fa      	adds	r2, r7, r3
   265e2:	231e      	movs	r3, #30
   265e4:	18fb      	adds	r3, r7, r3
   265e6:	781b      	ldrb	r3, [r3, #0]
   265e8:	9300      	str	r3, [sp, #0]
   265ea:	000b      	movs	r3, r1
   265ec:	0001      	movs	r1, r0
   265ee:	0028      	movs	r0, r5
   265f0:	4d48      	ldr	r5, [pc, #288]	; (26714 <_usart_set_config+0x2d0>)
   265f2:	47a8      	blx	r5
   265f4:	0003      	movs	r3, r0
   265f6:	7023      	strb	r3, [r4, #0]
   265f8:	e000      	b.n	265fc <_usart_set_config+0x1b8>
   265fa:	46c0      	nop			; (mov r8, r8)
   265fc:	231d      	movs	r3, #29
   265fe:	18fb      	adds	r3, r7, r3
   26600:	781b      	ldrb	r3, [r3, #0]
   26602:	2b00      	cmp	r3, #0
   26604:	d003      	beq.n	2660e <_usart_set_config+0x1ca>
   26606:	231d      	movs	r3, #29
   26608:	18fb      	adds	r3, r7, r3
   2660a:	781b      	ldrb	r3, [r3, #0]
   2660c:	e077      	b.n	266fe <_usart_set_config+0x2ba>
   2660e:	683b      	ldr	r3, [r7, #0]
   26610:	7e5b      	ldrb	r3, [r3, #25]
   26612:	2b00      	cmp	r3, #0
   26614:	d003      	beq.n	2661e <_usart_set_config+0x1da>
   26616:	683b      	ldr	r3, [r7, #0]
   26618:	7e9a      	ldrb	r2, [r3, #26]
   2661a:	69bb      	ldr	r3, [r7, #24]
   2661c:	739a      	strb	r2, [r3, #14]
   2661e:	687b      	ldr	r3, [r7, #4]
   26620:	0018      	movs	r0, r3
   26622:	4b3d      	ldr	r3, [pc, #244]	; (26718 <_usart_set_config+0x2d4>)
   26624:	4798      	blx	r3
   26626:	230a      	movs	r3, #10
   26628:	18fb      	adds	r3, r7, r3
   2662a:	881a      	ldrh	r2, [r3, #0]
   2662c:	69bb      	ldr	r3, [r7, #24]
   2662e:	819a      	strh	r2, [r3, #12]
   26630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26632:	68fb      	ldr	r3, [r7, #12]
   26634:	4313      	orrs	r3, r2
   26636:	627b      	str	r3, [r7, #36]	; 0x24
   26638:	683b      	ldr	r3, [r7, #0]
   2663a:	2227      	movs	r2, #39	; 0x27
   2663c:	5c9b      	ldrb	r3, [r3, r2]
   2663e:	2201      	movs	r2, #1
   26640:	4053      	eors	r3, r2
   26642:	b2db      	uxtb	r3, r3
   26644:	2b00      	cmp	r3, #0
   26646:	d003      	beq.n	26650 <_usart_set_config+0x20c>
   26648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2664a:	2204      	movs	r2, #4
   2664c:	4313      	orrs	r3, r2
   2664e:	627b      	str	r3, [r7, #36]	; 0x24
   26650:	683b      	ldr	r3, [r7, #0]
   26652:	7e5b      	ldrb	r3, [r3, #25]
   26654:	029a      	lsls	r2, r3, #10
   26656:	683b      	ldr	r3, [r7, #0]
   26658:	7f1b      	ldrb	r3, [r3, #28]
   2665a:	025b      	lsls	r3, r3, #9
   2665c:	431a      	orrs	r2, r3
   2665e:	683b      	ldr	r3, [r7, #0]
   26660:	7f5b      	ldrb	r3, [r3, #29]
   26662:	021b      	lsls	r3, r3, #8
   26664:	431a      	orrs	r2, r3
   26666:	683b      	ldr	r3, [r7, #0]
   26668:	2124      	movs	r1, #36	; 0x24
   2666a:	5c5b      	ldrb	r3, [r3, r1]
   2666c:	045b      	lsls	r3, r3, #17
   2666e:	431a      	orrs	r2, r3
   26670:	683b      	ldr	r3, [r7, #0]
   26672:	2125      	movs	r1, #37	; 0x25
   26674:	5c5b      	ldrb	r3, [r3, r1]
   26676:	041b      	lsls	r3, r3, #16
   26678:	4313      	orrs	r3, r2
   2667a:	623b      	str	r3, [r7, #32]
   2667c:	683b      	ldr	r3, [r7, #0]
   2667e:	7a9b      	ldrb	r3, [r3, #10]
   26680:	001a      	movs	r2, r3
   26682:	6a3b      	ldr	r3, [r7, #32]
   26684:	4313      	orrs	r3, r2
   26686:	623b      	str	r3, [r7, #32]
   26688:	683b      	ldr	r3, [r7, #0]
   2668a:	7adb      	ldrb	r3, [r3, #11]
   2668c:	001a      	movs	r2, r3
   2668e:	6a3b      	ldr	r3, [r7, #32]
   26690:	4313      	orrs	r3, r2
   26692:	623b      	str	r3, [r7, #32]
   26694:	683b      	ldr	r3, [r7, #0]
   26696:	891b      	ldrh	r3, [r3, #8]
   26698:	2bff      	cmp	r3, #255	; 0xff
   2669a:	d00b      	beq.n	266b4 <_usart_set_config+0x270>
   2669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2669e:	2280      	movs	r2, #128	; 0x80
   266a0:	0452      	lsls	r2, r2, #17
   266a2:	4313      	orrs	r3, r2
   266a4:	627b      	str	r3, [r7, #36]	; 0x24
   266a6:	683b      	ldr	r3, [r7, #0]
   266a8:	891b      	ldrh	r3, [r3, #8]
   266aa:	001a      	movs	r2, r3
   266ac:	6a3b      	ldr	r3, [r7, #32]
   266ae:	4313      	orrs	r3, r2
   266b0:	623b      	str	r3, [r7, #32]
   266b2:	e008      	b.n	266c6 <_usart_set_config+0x282>
   266b4:	683b      	ldr	r3, [r7, #0]
   266b6:	7edb      	ldrb	r3, [r3, #27]
   266b8:	2b00      	cmp	r3, #0
   266ba:	d004      	beq.n	266c6 <_usart_set_config+0x282>
   266bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   266be:	2280      	movs	r2, #128	; 0x80
   266c0:	04d2      	lsls	r2, r2, #19
   266c2:	4313      	orrs	r3, r2
   266c4:	627b      	str	r3, [r7, #36]	; 0x24
   266c6:	683b      	ldr	r3, [r7, #0]
   266c8:	222c      	movs	r2, #44	; 0x2c
   266ca:	5c9b      	ldrb	r3, [r3, r2]
   266cc:	2b00      	cmp	r3, #0
   266ce:	d103      	bne.n	266d8 <_usart_set_config+0x294>
   266d0:	4b12      	ldr	r3, [pc, #72]	; (2671c <_usart_set_config+0x2d8>)
   266d2:	4798      	blx	r3
   266d4:	1e03      	subs	r3, r0, #0
   266d6:	d003      	beq.n	266e0 <_usart_set_config+0x29c>
   266d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   266da:	2280      	movs	r2, #128	; 0x80
   266dc:	4313      	orrs	r3, r2
   266de:	627b      	str	r3, [r7, #36]	; 0x24
   266e0:	687b      	ldr	r3, [r7, #4]
   266e2:	0018      	movs	r0, r3
   266e4:	4b0c      	ldr	r3, [pc, #48]	; (26718 <_usart_set_config+0x2d4>)
   266e6:	4798      	blx	r3
   266e8:	69bb      	ldr	r3, [r7, #24]
   266ea:	6a3a      	ldr	r2, [r7, #32]
   266ec:	605a      	str	r2, [r3, #4]
   266ee:	687b      	ldr	r3, [r7, #4]
   266f0:	0018      	movs	r0, r3
   266f2:	4b09      	ldr	r3, [pc, #36]	; (26718 <_usart_set_config+0x2d4>)
   266f4:	4798      	blx	r3
   266f6:	69bb      	ldr	r3, [r7, #24]
   266f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   266fa:	601a      	str	r2, [r3, #0]
   266fc:	2300      	movs	r3, #0
   266fe:	0018      	movs	r0, r3
   26700:	46bd      	mov	sp, r7
   26702:	b00a      	add	sp, #40	; 0x28
   26704:	bdb0      	pop	{r4, r5, r7, pc}
   26706:	46c0      	nop			; (mov r8, r8)
   26708:	000251ed 	.word	0x000251ed
   2670c:	00027ba1 	.word	0x00027ba1
   26710:	00024d67 	.word	0x00024d67
   26714:	00024de5 	.word	0x00024de5
   26718:	00026421 	.word	0x00026421
   2671c:	000263e1 	.word	0x000263e1

00026720 <usart_init>:
   26720:	b590      	push	{r4, r7, lr}
   26722:	b093      	sub	sp, #76	; 0x4c
   26724:	af00      	add	r7, sp, #0
   26726:	60f8      	str	r0, [r7, #12]
   26728:	60b9      	str	r1, [r7, #8]
   2672a:	607a      	str	r2, [r7, #4]
   2672c:	233b      	movs	r3, #59	; 0x3b
   2672e:	18fb      	adds	r3, r7, r3
   26730:	2200      	movs	r2, #0
   26732:	701a      	strb	r2, [r3, #0]
   26734:	68fb      	ldr	r3, [r7, #12]
   26736:	68ba      	ldr	r2, [r7, #8]
   26738:	601a      	str	r2, [r3, #0]
   2673a:	68fb      	ldr	r3, [r7, #12]
   2673c:	681b      	ldr	r3, [r3, #0]
   2673e:	637b      	str	r3, [r7, #52]	; 0x34
   26740:	68fb      	ldr	r3, [r7, #12]
   26742:	681b      	ldr	r3, [r3, #0]
   26744:	0018      	movs	r0, r3
   26746:	4b86      	ldr	r3, [pc, #536]	; (26960 <usart_init+0x240>)
   26748:	4798      	blx	r3
   2674a:	0003      	movs	r3, r0
   2674c:	633b      	str	r3, [r7, #48]	; 0x30
   2674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   26750:	3302      	adds	r3, #2
   26752:	62fb      	str	r3, [r7, #44]	; 0x2c
   26754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   26756:	3314      	adds	r3, #20
   26758:	62bb      	str	r3, [r7, #40]	; 0x28
   2675a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2675c:	681b      	ldr	r3, [r3, #0]
   2675e:	2201      	movs	r2, #1
   26760:	4013      	ands	r3, r2
   26762:	d001      	beq.n	26768 <usart_init+0x48>
   26764:	2305      	movs	r3, #5
   26766:	e0f6      	b.n	26956 <usart_init+0x236>
   26768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2676a:	681b      	ldr	r3, [r3, #0]
   2676c:	2202      	movs	r2, #2
   2676e:	4013      	ands	r3, r2
   26770:	d001      	beq.n	26776 <usart_init+0x56>
   26772:	231c      	movs	r3, #28
   26774:	e0ef      	b.n	26956 <usart_init+0x236>
   26776:	2201      	movs	r2, #1
   26778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2677a:	409a      	lsls	r2, r3
   2677c:	0013      	movs	r3, r2
   2677e:	0019      	movs	r1, r3
   26780:	2002      	movs	r0, #2
   26782:	4b78      	ldr	r3, [pc, #480]	; (26964 <usart_init+0x244>)
   26784:	4798      	blx	r3
   26786:	2324      	movs	r3, #36	; 0x24
   26788:	18fb      	adds	r3, r7, r3
   2678a:	0018      	movs	r0, r3
   2678c:	4b76      	ldr	r3, [pc, #472]	; (26968 <usart_init+0x248>)
   2678e:	4798      	blx	r3
   26790:	687b      	ldr	r3, [r7, #4]
   26792:	222d      	movs	r2, #45	; 0x2d
   26794:	5c9a      	ldrb	r2, [r3, r2]
   26796:	2324      	movs	r3, #36	; 0x24
   26798:	18fb      	adds	r3, r7, r3
   2679a:	701a      	strb	r2, [r3, #0]
   2679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2679e:	b2db      	uxtb	r3, r3
   267a0:	2224      	movs	r2, #36	; 0x24
   267a2:	18ba      	adds	r2, r7, r2
   267a4:	0011      	movs	r1, r2
   267a6:	0018      	movs	r0, r3
   267a8:	4b70      	ldr	r3, [pc, #448]	; (2696c <usart_init+0x24c>)
   267aa:	4798      	blx	r3
   267ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   267ae:	b2db      	uxtb	r3, r3
   267b0:	0018      	movs	r0, r3
   267b2:	4b6f      	ldr	r3, [pc, #444]	; (26970 <usart_init+0x250>)
   267b4:	4798      	blx	r3
   267b6:	687b      	ldr	r3, [r7, #4]
   267b8:	222d      	movs	r2, #45	; 0x2d
   267ba:	5c9b      	ldrb	r3, [r3, r2]
   267bc:	2100      	movs	r1, #0
   267be:	0018      	movs	r0, r3
   267c0:	4b6c      	ldr	r3, [pc, #432]	; (26974 <usart_init+0x254>)
   267c2:	4798      	blx	r3
   267c4:	687b      	ldr	r3, [r7, #4]
   267c6:	7ada      	ldrb	r2, [r3, #11]
   267c8:	68fb      	ldr	r3, [r7, #12]
   267ca:	715a      	strb	r2, [r3, #5]
   267cc:	687b      	ldr	r3, [r7, #4]
   267ce:	2224      	movs	r2, #36	; 0x24
   267d0:	5c9a      	ldrb	r2, [r3, r2]
   267d2:	68fb      	ldr	r3, [r7, #12]
   267d4:	719a      	strb	r2, [r3, #6]
   267d6:	687b      	ldr	r3, [r7, #4]
   267d8:	2225      	movs	r2, #37	; 0x25
   267da:	5c9a      	ldrb	r2, [r3, r2]
   267dc:	68fb      	ldr	r3, [r7, #12]
   267de:	71da      	strb	r2, [r3, #7]
   267e0:	687b      	ldr	r3, [r7, #4]
   267e2:	7eda      	ldrb	r2, [r3, #27]
   267e4:	68fb      	ldr	r3, [r7, #12]
   267e6:	721a      	strb	r2, [r3, #8]
   267e8:	687b      	ldr	r3, [r7, #4]
   267ea:	7f1a      	ldrb	r2, [r3, #28]
   267ec:	68fb      	ldr	r3, [r7, #12]
   267ee:	725a      	strb	r2, [r3, #9]
   267f0:	233b      	movs	r3, #59	; 0x3b
   267f2:	18fc      	adds	r4, r7, r3
   267f4:	687a      	ldr	r2, [r7, #4]
   267f6:	68fb      	ldr	r3, [r7, #12]
   267f8:	0011      	movs	r1, r2
   267fa:	0018      	movs	r0, r3
   267fc:	4b5e      	ldr	r3, [pc, #376]	; (26978 <usart_init+0x258>)
   267fe:	4798      	blx	r3
   26800:	0003      	movs	r3, r0
   26802:	7023      	strb	r3, [r4, #0]
   26804:	233b      	movs	r3, #59	; 0x3b
   26806:	18fb      	adds	r3, r7, r3
   26808:	781b      	ldrb	r3, [r3, #0]
   2680a:	2b00      	cmp	r3, #0
   2680c:	d003      	beq.n	26816 <usart_init+0xf6>
   2680e:	233b      	movs	r3, #59	; 0x3b
   26810:	18fb      	adds	r3, r7, r3
   26812:	781b      	ldrb	r3, [r3, #0]
   26814:	e09f      	b.n	26956 <usart_init+0x236>
   26816:	2320      	movs	r3, #32
   26818:	18fb      	adds	r3, r7, r3
   2681a:	0018      	movs	r0, r3
   2681c:	4b57      	ldr	r3, [pc, #348]	; (2697c <usart_init+0x25c>)
   2681e:	4798      	blx	r3
   26820:	2320      	movs	r3, #32
   26822:	18fb      	adds	r3, r7, r3
   26824:	2200      	movs	r2, #0
   26826:	705a      	strb	r2, [r3, #1]
   26828:	2320      	movs	r3, #32
   2682a:	18fb      	adds	r3, r7, r3
   2682c:	2200      	movs	r2, #0
   2682e:	709a      	strb	r2, [r3, #2]
   26830:	687b      	ldr	r3, [r7, #4]
   26832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   26834:	2310      	movs	r3, #16
   26836:	18fb      	adds	r3, r7, r3
   26838:	601a      	str	r2, [r3, #0]
   2683a:	687b      	ldr	r3, [r7, #4]
   2683c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2683e:	2310      	movs	r3, #16
   26840:	18fb      	adds	r3, r7, r3
   26842:	605a      	str	r2, [r3, #4]
   26844:	687b      	ldr	r3, [r7, #4]
   26846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   26848:	2310      	movs	r3, #16
   2684a:	18fb      	adds	r3, r7, r3
   2684c:	609a      	str	r2, [r3, #8]
   2684e:	687b      	ldr	r3, [r7, #4]
   26850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   26852:	2310      	movs	r3, #16
   26854:	18fb      	adds	r3, r7, r3
   26856:	60da      	str	r2, [r3, #12]
   26858:	2347      	movs	r3, #71	; 0x47
   2685a:	18fb      	adds	r3, r7, r3
   2685c:	2200      	movs	r2, #0
   2685e:	701a      	strb	r2, [r3, #0]
   26860:	e02c      	b.n	268bc <usart_init+0x19c>
   26862:	2347      	movs	r3, #71	; 0x47
   26864:	18fb      	adds	r3, r7, r3
   26866:	781a      	ldrb	r2, [r3, #0]
   26868:	2310      	movs	r3, #16
   2686a:	18fb      	adds	r3, r7, r3
   2686c:	0092      	lsls	r2, r2, #2
   2686e:	58d3      	ldr	r3, [r2, r3]
   26870:	643b      	str	r3, [r7, #64]	; 0x40
   26872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26874:	2b00      	cmp	r3, #0
   26876:	d109      	bne.n	2688c <usart_init+0x16c>
   26878:	2347      	movs	r3, #71	; 0x47
   2687a:	18fb      	adds	r3, r7, r3
   2687c:	781a      	ldrb	r2, [r3, #0]
   2687e:	68bb      	ldr	r3, [r7, #8]
   26880:	0011      	movs	r1, r2
   26882:	0018      	movs	r0, r3
   26884:	4b3e      	ldr	r3, [pc, #248]	; (26980 <usart_init+0x260>)
   26886:	4798      	blx	r3
   26888:	0003      	movs	r3, r0
   2688a:	643b      	str	r3, [r7, #64]	; 0x40
   2688c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2688e:	3301      	adds	r3, #1
   26890:	d00d      	beq.n	268ae <usart_init+0x18e>
   26892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26894:	b2da      	uxtb	r2, r3
   26896:	2320      	movs	r3, #32
   26898:	18fb      	adds	r3, r7, r3
   2689a:	701a      	strb	r2, [r3, #0]
   2689c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2689e:	0c1b      	lsrs	r3, r3, #16
   268a0:	b2db      	uxtb	r3, r3
   268a2:	2220      	movs	r2, #32
   268a4:	18ba      	adds	r2, r7, r2
   268a6:	0011      	movs	r1, r2
   268a8:	0018      	movs	r0, r3
   268aa:	4b36      	ldr	r3, [pc, #216]	; (26984 <usart_init+0x264>)
   268ac:	4798      	blx	r3
   268ae:	2347      	movs	r3, #71	; 0x47
   268b0:	18fb      	adds	r3, r7, r3
   268b2:	781a      	ldrb	r2, [r3, #0]
   268b4:	2347      	movs	r3, #71	; 0x47
   268b6:	18fb      	adds	r3, r7, r3
   268b8:	3201      	adds	r2, #1
   268ba:	701a      	strb	r2, [r3, #0]
   268bc:	2347      	movs	r3, #71	; 0x47
   268be:	18fb      	adds	r3, r7, r3
   268c0:	781b      	ldrb	r3, [r3, #0]
   268c2:	2b03      	cmp	r3, #3
   268c4:	d9cd      	bls.n	26862 <usart_init+0x142>
   268c6:	2300      	movs	r3, #0
   268c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   268ca:	e00a      	b.n	268e2 <usart_init+0x1c2>
   268cc:	68fa      	ldr	r2, [r7, #12]
   268ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   268d0:	3302      	adds	r3, #2
   268d2:	009b      	lsls	r3, r3, #2
   268d4:	18d3      	adds	r3, r2, r3
   268d6:	3304      	adds	r3, #4
   268d8:	2200      	movs	r2, #0
   268da:	601a      	str	r2, [r3, #0]
   268dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   268de:	3301      	adds	r3, #1
   268e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   268e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   268e4:	2b05      	cmp	r3, #5
   268e6:	d9f1      	bls.n	268cc <usart_init+0x1ac>
   268e8:	68fb      	ldr	r3, [r7, #12]
   268ea:	2200      	movs	r2, #0
   268ec:	629a      	str	r2, [r3, #40]	; 0x28
   268ee:	68fb      	ldr	r3, [r7, #12]
   268f0:	2200      	movs	r2, #0
   268f2:	625a      	str	r2, [r3, #36]	; 0x24
   268f4:	68fb      	ldr	r3, [r7, #12]
   268f6:	2200      	movs	r2, #0
   268f8:	85da      	strh	r2, [r3, #46]	; 0x2e
   268fa:	68fb      	ldr	r3, [r7, #12]
   268fc:	2200      	movs	r2, #0
   268fe:	859a      	strh	r2, [r3, #44]	; 0x2c
   26900:	68fb      	ldr	r3, [r7, #12]
   26902:	2230      	movs	r2, #48	; 0x30
   26904:	2100      	movs	r1, #0
   26906:	5499      	strb	r1, [r3, r2]
   26908:	68fb      	ldr	r3, [r7, #12]
   2690a:	2231      	movs	r2, #49	; 0x31
   2690c:	2100      	movs	r1, #0
   2690e:	5499      	strb	r1, [r3, r2]
   26910:	68fb      	ldr	r3, [r7, #12]
   26912:	2232      	movs	r2, #50	; 0x32
   26914:	2100      	movs	r1, #0
   26916:	5499      	strb	r1, [r3, r2]
   26918:	68fb      	ldr	r3, [r7, #12]
   2691a:	2233      	movs	r2, #51	; 0x33
   2691c:	2100      	movs	r1, #0
   2691e:	5499      	strb	r1, [r3, r2]
   26920:	68fb      	ldr	r3, [r7, #12]
   26922:	681b      	ldr	r3, [r3, #0]
   26924:	2227      	movs	r2, #39	; 0x27
   26926:	18bc      	adds	r4, r7, r2
   26928:	0018      	movs	r0, r3
   2692a:	4b0d      	ldr	r3, [pc, #52]	; (26960 <usart_init+0x240>)
   2692c:	4798      	blx	r3
   2692e:	0003      	movs	r3, r0
   26930:	7023      	strb	r3, [r4, #0]
   26932:	4a15      	ldr	r2, [pc, #84]	; (26988 <usart_init+0x268>)
   26934:	2327      	movs	r3, #39	; 0x27
   26936:	18fb      	adds	r3, r7, r3
   26938:	781b      	ldrb	r3, [r3, #0]
   2693a:	0011      	movs	r1, r2
   2693c:	0018      	movs	r0, r3
   2693e:	4b13      	ldr	r3, [pc, #76]	; (2698c <usart_init+0x26c>)
   26940:	4798      	blx	r3
   26942:	2327      	movs	r3, #39	; 0x27
   26944:	18fb      	adds	r3, r7, r3
   26946:	781a      	ldrb	r2, [r3, #0]
   26948:	4b11      	ldr	r3, [pc, #68]	; (26990 <usart_init+0x270>)
   2694a:	0092      	lsls	r2, r2, #2
   2694c:	68f9      	ldr	r1, [r7, #12]
   2694e:	50d1      	str	r1, [r2, r3]
   26950:	233b      	movs	r3, #59	; 0x3b
   26952:	18fb      	adds	r3, r7, r3
   26954:	781b      	ldrb	r3, [r3, #0]
   26956:	0018      	movs	r0, r3
   26958:	46bd      	mov	sp, r7
   2695a:	b013      	add	sp, #76	; 0x4c
   2695c:	bd90      	pop	{r4, r7, pc}
   2695e:	46c0      	nop			; (mov r8, r8)
   26960:	000251ed 	.word	0x000251ed
   26964:	0002635d 	.word	0x0002635d
   26968:	00026345 	.word	0x00026345
   2696c:	00027a7d 	.word	0x00027a7d
   26970:	00027ac1 	.word	0x00027ac1
   26974:	00024fa5 	.word	0x00024fa5
   26978:	00026445 	.word	0x00026445
   2697c:	000263b9 	.word	0x000263b9
   26980:	00025031 	.word	0x00025031
   26984:	00027ddd 	.word	0x00027ddd
   26988:	00026bfd 	.word	0x00026bfd
   2698c:	00025251 	.word	0x00025251
   26990:	20005578 	.word	0x20005578

00026994 <system_interrupt_enter_critical_section>:
   26994:	b580      	push	{r7, lr}
   26996:	af00      	add	r7, sp, #0
   26998:	4b02      	ldr	r3, [pc, #8]	; (269a4 <system_interrupt_enter_critical_section+0x10>)
   2699a:	4798      	blx	r3
   2699c:	46c0      	nop			; (mov r8, r8)
   2699e:	46bd      	mov	sp, r7
   269a0:	bd80      	pop	{r7, pc}
   269a2:	46c0      	nop			; (mov r8, r8)
   269a4:	00023de9 	.word	0x00023de9

000269a8 <system_interrupt_leave_critical_section>:
   269a8:	b580      	push	{r7, lr}
   269aa:	af00      	add	r7, sp, #0
   269ac:	4b02      	ldr	r3, [pc, #8]	; (269b8 <system_interrupt_leave_critical_section+0x10>)
   269ae:	4798      	blx	r3
   269b0:	46c0      	nop			; (mov r8, r8)
   269b2:	46bd      	mov	sp, r7
   269b4:	bd80      	pop	{r7, pc}
   269b6:	46c0      	nop			; (mov r8, r8)
   269b8:	00023e3d 	.word	0x00023e3d

000269bc <usart_is_syncing>:
   269bc:	b580      	push	{r7, lr}
   269be:	b084      	sub	sp, #16
   269c0:	af00      	add	r7, sp, #0
   269c2:	6078      	str	r0, [r7, #4]
   269c4:	687b      	ldr	r3, [r7, #4]
   269c6:	681b      	ldr	r3, [r3, #0]
   269c8:	60fb      	str	r3, [r7, #12]
   269ca:	68fb      	ldr	r3, [r7, #12]
   269cc:	69db      	ldr	r3, [r3, #28]
   269ce:	1e5a      	subs	r2, r3, #1
   269d0:	4193      	sbcs	r3, r2
   269d2:	b2db      	uxtb	r3, r3
   269d4:	0018      	movs	r0, r3
   269d6:	46bd      	mov	sp, r7
   269d8:	b004      	add	sp, #16
   269da:	bd80      	pop	{r7, pc}

000269dc <_usart_wait_for_sync>:
   269dc:	b580      	push	{r7, lr}
   269de:	b082      	sub	sp, #8
   269e0:	af00      	add	r7, sp, #0
   269e2:	6078      	str	r0, [r7, #4]
   269e4:	46c0      	nop			; (mov r8, r8)
   269e6:	687b      	ldr	r3, [r7, #4]
   269e8:	0018      	movs	r0, r3
   269ea:	4b04      	ldr	r3, [pc, #16]	; (269fc <_usart_wait_for_sync+0x20>)
   269ec:	4798      	blx	r3
   269ee:	1e03      	subs	r3, r0, #0
   269f0:	d1f9      	bne.n	269e6 <_usart_wait_for_sync+0xa>
   269f2:	46c0      	nop			; (mov r8, r8)
   269f4:	46bd      	mov	sp, r7
   269f6:	b002      	add	sp, #8
   269f8:	bd80      	pop	{r7, pc}
   269fa:	46c0      	nop			; (mov r8, r8)
   269fc:	000269bd 	.word	0x000269bd

00026a00 <_usart_write_buffer>:
   26a00:	b580      	push	{r7, lr}
   26a02:	b086      	sub	sp, #24
   26a04:	af00      	add	r7, sp, #0
   26a06:	60f8      	str	r0, [r7, #12]
   26a08:	60b9      	str	r1, [r7, #8]
   26a0a:	1dbb      	adds	r3, r7, #6
   26a0c:	801a      	strh	r2, [r3, #0]
   26a0e:	68fb      	ldr	r3, [r7, #12]
   26a10:	681b      	ldr	r3, [r3, #0]
   26a12:	617b      	str	r3, [r7, #20]
   26a14:	4b0f      	ldr	r3, [pc, #60]	; (26a54 <_usart_write_buffer+0x54>)
   26a16:	4798      	blx	r3
   26a18:	68fb      	ldr	r3, [r7, #12]
   26a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   26a1c:	b29b      	uxth	r3, r3
   26a1e:	2b00      	cmp	r3, #0
   26a20:	d003      	beq.n	26a2a <_usart_write_buffer+0x2a>
   26a22:	4b0d      	ldr	r3, [pc, #52]	; (26a58 <_usart_write_buffer+0x58>)
   26a24:	4798      	blx	r3
   26a26:	2305      	movs	r3, #5
   26a28:	e010      	b.n	26a4c <_usart_write_buffer+0x4c>
   26a2a:	68fb      	ldr	r3, [r7, #12]
   26a2c:	1dba      	adds	r2, r7, #6
   26a2e:	8812      	ldrh	r2, [r2, #0]
   26a30:	85da      	strh	r2, [r3, #46]	; 0x2e
   26a32:	4b09      	ldr	r3, [pc, #36]	; (26a58 <_usart_write_buffer+0x58>)
   26a34:	4798      	blx	r3
   26a36:	68fb      	ldr	r3, [r7, #12]
   26a38:	68ba      	ldr	r2, [r7, #8]
   26a3a:	629a      	str	r2, [r3, #40]	; 0x28
   26a3c:	68fb      	ldr	r3, [r7, #12]
   26a3e:	2233      	movs	r2, #51	; 0x33
   26a40:	2105      	movs	r1, #5
   26a42:	5499      	strb	r1, [r3, r2]
   26a44:	697b      	ldr	r3, [r7, #20]
   26a46:	2201      	movs	r2, #1
   26a48:	759a      	strb	r2, [r3, #22]
   26a4a:	2300      	movs	r3, #0
   26a4c:	0018      	movs	r0, r3
   26a4e:	46bd      	mov	sp, r7
   26a50:	b006      	add	sp, #24
   26a52:	bd80      	pop	{r7, pc}
   26a54:	00026995 	.word	0x00026995
   26a58:	000269a9 	.word	0x000269a9

00026a5c <_usart_read_buffer>:
   26a5c:	b580      	push	{r7, lr}
   26a5e:	b086      	sub	sp, #24
   26a60:	af00      	add	r7, sp, #0
   26a62:	60f8      	str	r0, [r7, #12]
   26a64:	60b9      	str	r1, [r7, #8]
   26a66:	1dbb      	adds	r3, r7, #6
   26a68:	801a      	strh	r2, [r3, #0]
   26a6a:	68fb      	ldr	r3, [r7, #12]
   26a6c:	681b      	ldr	r3, [r3, #0]
   26a6e:	617b      	str	r3, [r7, #20]
   26a70:	4b16      	ldr	r3, [pc, #88]	; (26acc <_usart_read_buffer+0x70>)
   26a72:	4798      	blx	r3
   26a74:	68fb      	ldr	r3, [r7, #12]
   26a76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   26a78:	b29b      	uxth	r3, r3
   26a7a:	2b00      	cmp	r3, #0
   26a7c:	d003      	beq.n	26a86 <_usart_read_buffer+0x2a>
   26a7e:	4b14      	ldr	r3, [pc, #80]	; (26ad0 <_usart_read_buffer+0x74>)
   26a80:	4798      	blx	r3
   26a82:	2305      	movs	r3, #5
   26a84:	e01e      	b.n	26ac4 <_usart_read_buffer+0x68>
   26a86:	68fb      	ldr	r3, [r7, #12]
   26a88:	1dba      	adds	r2, r7, #6
   26a8a:	8812      	ldrh	r2, [r2, #0]
   26a8c:	859a      	strh	r2, [r3, #44]	; 0x2c
   26a8e:	4b10      	ldr	r3, [pc, #64]	; (26ad0 <_usart_read_buffer+0x74>)
   26a90:	4798      	blx	r3
   26a92:	68fb      	ldr	r3, [r7, #12]
   26a94:	68ba      	ldr	r2, [r7, #8]
   26a96:	625a      	str	r2, [r3, #36]	; 0x24
   26a98:	68fb      	ldr	r3, [r7, #12]
   26a9a:	2232      	movs	r2, #50	; 0x32
   26a9c:	2105      	movs	r1, #5
   26a9e:	5499      	strb	r1, [r3, r2]
   26aa0:	697b      	ldr	r3, [r7, #20]
   26aa2:	2204      	movs	r2, #4
   26aa4:	759a      	strb	r2, [r3, #22]
   26aa6:	68fb      	ldr	r3, [r7, #12]
   26aa8:	7a1b      	ldrb	r3, [r3, #8]
   26aaa:	2b00      	cmp	r3, #0
   26aac:	d002      	beq.n	26ab4 <_usart_read_buffer+0x58>
   26aae:	697b      	ldr	r3, [r7, #20]
   26ab0:	2220      	movs	r2, #32
   26ab2:	759a      	strb	r2, [r3, #22]
   26ab4:	68fb      	ldr	r3, [r7, #12]
   26ab6:	7a5b      	ldrb	r3, [r3, #9]
   26ab8:	2b00      	cmp	r3, #0
   26aba:	d002      	beq.n	26ac2 <_usart_read_buffer+0x66>
   26abc:	697b      	ldr	r3, [r7, #20]
   26abe:	2208      	movs	r2, #8
   26ac0:	759a      	strb	r2, [r3, #22]
   26ac2:	2300      	movs	r3, #0
   26ac4:	0018      	movs	r0, r3
   26ac6:	46bd      	mov	sp, r7
   26ac8:	b006      	add	sp, #24
   26aca:	bd80      	pop	{r7, pc}
   26acc:	00026995 	.word	0x00026995
   26ad0:	000269a9 	.word	0x000269a9

00026ad4 <usart_register_callback>:
   26ad4:	b580      	push	{r7, lr}
   26ad6:	b084      	sub	sp, #16
   26ad8:	af00      	add	r7, sp, #0
   26ada:	60f8      	str	r0, [r7, #12]
   26adc:	60b9      	str	r1, [r7, #8]
   26ade:	1dfb      	adds	r3, r7, #7
   26ae0:	701a      	strb	r2, [r3, #0]
   26ae2:	1dfb      	adds	r3, r7, #7
   26ae4:	781b      	ldrb	r3, [r3, #0]
   26ae6:	68fa      	ldr	r2, [r7, #12]
   26ae8:	3302      	adds	r3, #2
   26aea:	009b      	lsls	r3, r3, #2
   26aec:	18d3      	adds	r3, r2, r3
   26aee:	3304      	adds	r3, #4
   26af0:	68ba      	ldr	r2, [r7, #8]
   26af2:	601a      	str	r2, [r3, #0]
   26af4:	68fb      	ldr	r3, [r7, #12]
   26af6:	2230      	movs	r2, #48	; 0x30
   26af8:	5c9b      	ldrb	r3, [r3, r2]
   26afa:	b25a      	sxtb	r2, r3
   26afc:	1dfb      	adds	r3, r7, #7
   26afe:	781b      	ldrb	r3, [r3, #0]
   26b00:	2101      	movs	r1, #1
   26b02:	4099      	lsls	r1, r3
   26b04:	000b      	movs	r3, r1
   26b06:	b25b      	sxtb	r3, r3
   26b08:	4313      	orrs	r3, r2
   26b0a:	b25b      	sxtb	r3, r3
   26b0c:	b2d9      	uxtb	r1, r3
   26b0e:	68fb      	ldr	r3, [r7, #12]
   26b10:	2230      	movs	r2, #48	; 0x30
   26b12:	5499      	strb	r1, [r3, r2]
   26b14:	46c0      	nop			; (mov r8, r8)
   26b16:	46bd      	mov	sp, r7
   26b18:	b004      	add	sp, #16
   26b1a:	bd80      	pop	{r7, pc}

00026b1c <usart_write_buffer_job>:
   26b1c:	b580      	push	{r7, lr}
   26b1e:	b084      	sub	sp, #16
   26b20:	af00      	add	r7, sp, #0
   26b22:	60f8      	str	r0, [r7, #12]
   26b24:	60b9      	str	r1, [r7, #8]
   26b26:	1dbb      	adds	r3, r7, #6
   26b28:	801a      	strh	r2, [r3, #0]
   26b2a:	1dbb      	adds	r3, r7, #6
   26b2c:	881b      	ldrh	r3, [r3, #0]
   26b2e:	2b00      	cmp	r3, #0
   26b30:	d101      	bne.n	26b36 <usart_write_buffer_job+0x1a>
   26b32:	2317      	movs	r3, #23
   26b34:	e010      	b.n	26b58 <usart_write_buffer_job+0x3c>
   26b36:	68fb      	ldr	r3, [r7, #12]
   26b38:	79db      	ldrb	r3, [r3, #7]
   26b3a:	2201      	movs	r2, #1
   26b3c:	4053      	eors	r3, r2
   26b3e:	b2db      	uxtb	r3, r3
   26b40:	2b00      	cmp	r3, #0
   26b42:	d001      	beq.n	26b48 <usart_write_buffer_job+0x2c>
   26b44:	231c      	movs	r3, #28
   26b46:	e007      	b.n	26b58 <usart_write_buffer_job+0x3c>
   26b48:	1dbb      	adds	r3, r7, #6
   26b4a:	881a      	ldrh	r2, [r3, #0]
   26b4c:	68b9      	ldr	r1, [r7, #8]
   26b4e:	68fb      	ldr	r3, [r7, #12]
   26b50:	0018      	movs	r0, r3
   26b52:	4b03      	ldr	r3, [pc, #12]	; (26b60 <usart_write_buffer_job+0x44>)
   26b54:	4798      	blx	r3
   26b56:	0003      	movs	r3, r0
   26b58:	0018      	movs	r0, r3
   26b5a:	46bd      	mov	sp, r7
   26b5c:	b004      	add	sp, #16
   26b5e:	bd80      	pop	{r7, pc}
   26b60:	00026a01 	.word	0x00026a01

00026b64 <usart_read_buffer_job>:
   26b64:	b580      	push	{r7, lr}
   26b66:	b084      	sub	sp, #16
   26b68:	af00      	add	r7, sp, #0
   26b6a:	60f8      	str	r0, [r7, #12]
   26b6c:	60b9      	str	r1, [r7, #8]
   26b6e:	1dbb      	adds	r3, r7, #6
   26b70:	801a      	strh	r2, [r3, #0]
   26b72:	1dbb      	adds	r3, r7, #6
   26b74:	881b      	ldrh	r3, [r3, #0]
   26b76:	2b00      	cmp	r3, #0
   26b78:	d101      	bne.n	26b7e <usart_read_buffer_job+0x1a>
   26b7a:	2317      	movs	r3, #23
   26b7c:	e010      	b.n	26ba0 <usart_read_buffer_job+0x3c>
   26b7e:	68fb      	ldr	r3, [r7, #12]
   26b80:	799b      	ldrb	r3, [r3, #6]
   26b82:	2201      	movs	r2, #1
   26b84:	4053      	eors	r3, r2
   26b86:	b2db      	uxtb	r3, r3
   26b88:	2b00      	cmp	r3, #0
   26b8a:	d001      	beq.n	26b90 <usart_read_buffer_job+0x2c>
   26b8c:	231c      	movs	r3, #28
   26b8e:	e007      	b.n	26ba0 <usart_read_buffer_job+0x3c>
   26b90:	1dbb      	adds	r3, r7, #6
   26b92:	881a      	ldrh	r2, [r3, #0]
   26b94:	68b9      	ldr	r1, [r7, #8]
   26b96:	68fb      	ldr	r3, [r7, #12]
   26b98:	0018      	movs	r0, r3
   26b9a:	4b03      	ldr	r3, [pc, #12]	; (26ba8 <usart_read_buffer_job+0x44>)
   26b9c:	4798      	blx	r3
   26b9e:	0003      	movs	r3, r0
   26ba0:	0018      	movs	r0, r3
   26ba2:	46bd      	mov	sp, r7
   26ba4:	b004      	add	sp, #16
   26ba6:	bd80      	pop	{r7, pc}
   26ba8:	00026a5d 	.word	0x00026a5d

00026bac <usart_get_job_status>:
   26bac:	b580      	push	{r7, lr}
   26bae:	b084      	sub	sp, #16
   26bb0:	af00      	add	r7, sp, #0
   26bb2:	6078      	str	r0, [r7, #4]
   26bb4:	000a      	movs	r2, r1
   26bb6:	1cfb      	adds	r3, r7, #3
   26bb8:	701a      	strb	r2, [r3, #0]
   26bba:	1cfb      	adds	r3, r7, #3
   26bbc:	781b      	ldrb	r3, [r3, #0]
   26bbe:	2b00      	cmp	r3, #0
   26bc0:	d002      	beq.n	26bc8 <usart_get_job_status+0x1c>
   26bc2:	2b01      	cmp	r3, #1
   26bc4:	d007      	beq.n	26bd6 <usart_get_job_status+0x2a>
   26bc6:	e00d      	b.n	26be4 <usart_get_job_status+0x38>
   26bc8:	230f      	movs	r3, #15
   26bca:	18fb      	adds	r3, r7, r3
   26bcc:	687a      	ldr	r2, [r7, #4]
   26bce:	2132      	movs	r1, #50	; 0x32
   26bd0:	5c52      	ldrb	r2, [r2, r1]
   26bd2:	701a      	strb	r2, [r3, #0]
   26bd4:	e00b      	b.n	26bee <usart_get_job_status+0x42>
   26bd6:	230f      	movs	r3, #15
   26bd8:	18fb      	adds	r3, r7, r3
   26bda:	687a      	ldr	r2, [r7, #4]
   26bdc:	2133      	movs	r1, #51	; 0x33
   26bde:	5c52      	ldrb	r2, [r2, r1]
   26be0:	701a      	strb	r2, [r3, #0]
   26be2:	e004      	b.n	26bee <usart_get_job_status+0x42>
   26be4:	230f      	movs	r3, #15
   26be6:	18fb      	adds	r3, r7, r3
   26be8:	2217      	movs	r2, #23
   26bea:	701a      	strb	r2, [r3, #0]
   26bec:	46c0      	nop			; (mov r8, r8)
   26bee:	230f      	movs	r3, #15
   26bf0:	18fb      	adds	r3, r7, r3
   26bf2:	781b      	ldrb	r3, [r3, #0]
   26bf4:	0018      	movs	r0, r3
   26bf6:	46bd      	mov	sp, r7
   26bf8:	b004      	add	sp, #16
   26bfa:	bd80      	pop	{r7, pc}

00026bfc <_usart_interrupt_handler>:
   26bfc:	b580      	push	{r7, lr}
   26bfe:	b088      	sub	sp, #32
   26c00:	af00      	add	r7, sp, #0
   26c02:	0002      	movs	r2, r0
   26c04:	1dfb      	adds	r3, r7, #7
   26c06:	701a      	strb	r2, [r3, #0]
   26c08:	1dfb      	adds	r3, r7, #7
   26c0a:	781a      	ldrb	r2, [r3, #0]
   26c0c:	4ba3      	ldr	r3, [pc, #652]	; (26e9c <_usart_interrupt_handler+0x2a0>)
   26c0e:	0092      	lsls	r2, r2, #2
   26c10:	58d3      	ldr	r3, [r2, r3]
   26c12:	61bb      	str	r3, [r7, #24]
   26c14:	69bb      	ldr	r3, [r7, #24]
   26c16:	681b      	ldr	r3, [r3, #0]
   26c18:	617b      	str	r3, [r7, #20]
   26c1a:	69bb      	ldr	r3, [r7, #24]
   26c1c:	0018      	movs	r0, r3
   26c1e:	4ba0      	ldr	r3, [pc, #640]	; (26ea0 <_usart_interrupt_handler+0x2a4>)
   26c20:	4798      	blx	r3
   26c22:	697b      	ldr	r3, [r7, #20]
   26c24:	7e1b      	ldrb	r3, [r3, #24]
   26c26:	b2da      	uxtb	r2, r3
   26c28:	2312      	movs	r3, #18
   26c2a:	18fb      	adds	r3, r7, r3
   26c2c:	801a      	strh	r2, [r3, #0]
   26c2e:	697b      	ldr	r3, [r7, #20]
   26c30:	7d9b      	ldrb	r3, [r3, #22]
   26c32:	b2db      	uxtb	r3, r3
   26c34:	b29a      	uxth	r2, r3
   26c36:	2312      	movs	r3, #18
   26c38:	18fb      	adds	r3, r7, r3
   26c3a:	2112      	movs	r1, #18
   26c3c:	1879      	adds	r1, r7, r1
   26c3e:	8809      	ldrh	r1, [r1, #0]
   26c40:	400a      	ands	r2, r1
   26c42:	801a      	strh	r2, [r3, #0]
   26c44:	69bb      	ldr	r3, [r7, #24]
   26c46:	2230      	movs	r2, #48	; 0x30
   26c48:	5c9b      	ldrb	r3, [r3, r2]
   26c4a:	69ba      	ldr	r2, [r7, #24]
   26c4c:	2131      	movs	r1, #49	; 0x31
   26c4e:	5c52      	ldrb	r2, [r2, r1]
   26c50:	4013      	ands	r3, r2
   26c52:	b2da      	uxtb	r2, r3
   26c54:	2310      	movs	r3, #16
   26c56:	18fb      	adds	r3, r7, r3
   26c58:	801a      	strh	r2, [r3, #0]
   26c5a:	2312      	movs	r3, #18
   26c5c:	18fb      	adds	r3, r7, r3
   26c5e:	881b      	ldrh	r3, [r3, #0]
   26c60:	2201      	movs	r2, #1
   26c62:	4013      	ands	r3, r2
   26c64:	d044      	beq.n	26cf0 <_usart_interrupt_handler+0xf4>
   26c66:	69bb      	ldr	r3, [r7, #24]
   26c68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   26c6a:	b29b      	uxth	r3, r3
   26c6c:	2b00      	cmp	r3, #0
   26c6e:	d03c      	beq.n	26cea <_usart_interrupt_handler+0xee>
   26c70:	69bb      	ldr	r3, [r7, #24]
   26c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c74:	781b      	ldrb	r3, [r3, #0]
   26c76:	b2da      	uxtb	r2, r3
   26c78:	231c      	movs	r3, #28
   26c7a:	18fb      	adds	r3, r7, r3
   26c7c:	801a      	strh	r2, [r3, #0]
   26c7e:	69bb      	ldr	r3, [r7, #24]
   26c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c82:	1c5a      	adds	r2, r3, #1
   26c84:	69bb      	ldr	r3, [r7, #24]
   26c86:	629a      	str	r2, [r3, #40]	; 0x28
   26c88:	69bb      	ldr	r3, [r7, #24]
   26c8a:	795b      	ldrb	r3, [r3, #5]
   26c8c:	2b01      	cmp	r3, #1
   26c8e:	d113      	bne.n	26cb8 <_usart_interrupt_handler+0xbc>
   26c90:	69bb      	ldr	r3, [r7, #24]
   26c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c94:	781b      	ldrb	r3, [r3, #0]
   26c96:	b2db      	uxtb	r3, r3
   26c98:	021b      	lsls	r3, r3, #8
   26c9a:	b21a      	sxth	r2, r3
   26c9c:	231c      	movs	r3, #28
   26c9e:	18fb      	adds	r3, r7, r3
   26ca0:	2100      	movs	r1, #0
   26ca2:	5e5b      	ldrsh	r3, [r3, r1]
   26ca4:	4313      	orrs	r3, r2
   26ca6:	b21a      	sxth	r2, r3
   26ca8:	231c      	movs	r3, #28
   26caa:	18fb      	adds	r3, r7, r3
   26cac:	801a      	strh	r2, [r3, #0]
   26cae:	69bb      	ldr	r3, [r7, #24]
   26cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26cb2:	1c5a      	adds	r2, r3, #1
   26cb4:	69bb      	ldr	r3, [r7, #24]
   26cb6:	629a      	str	r2, [r3, #40]	; 0x28
   26cb8:	231c      	movs	r3, #28
   26cba:	18fb      	adds	r3, r7, r3
   26cbc:	881b      	ldrh	r3, [r3, #0]
   26cbe:	05db      	lsls	r3, r3, #23
   26cc0:	0ddb      	lsrs	r3, r3, #23
   26cc2:	b29a      	uxth	r2, r3
   26cc4:	697b      	ldr	r3, [r7, #20]
   26cc6:	851a      	strh	r2, [r3, #40]	; 0x28
   26cc8:	69bb      	ldr	r3, [r7, #24]
   26cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   26ccc:	b29b      	uxth	r3, r3
   26cce:	3b01      	subs	r3, #1
   26cd0:	b29b      	uxth	r3, r3
   26cd2:	69ba      	ldr	r2, [r7, #24]
   26cd4:	1c19      	adds	r1, r3, #0
   26cd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   26cd8:	2b00      	cmp	r3, #0
   26cda:	d109      	bne.n	26cf0 <_usart_interrupt_handler+0xf4>
   26cdc:	697b      	ldr	r3, [r7, #20]
   26cde:	2201      	movs	r2, #1
   26ce0:	751a      	strb	r2, [r3, #20]
   26ce2:	697b      	ldr	r3, [r7, #20]
   26ce4:	2202      	movs	r2, #2
   26ce6:	759a      	strb	r2, [r3, #22]
   26ce8:	e002      	b.n	26cf0 <_usart_interrupt_handler+0xf4>
   26cea:	697b      	ldr	r3, [r7, #20]
   26cec:	2201      	movs	r2, #1
   26cee:	751a      	strb	r2, [r3, #20]
   26cf0:	2312      	movs	r3, #18
   26cf2:	18fb      	adds	r3, r7, r3
   26cf4:	881b      	ldrh	r3, [r3, #0]
   26cf6:	2202      	movs	r2, #2
   26cf8:	4013      	ands	r3, r2
   26cfa:	d011      	beq.n	26d20 <_usart_interrupt_handler+0x124>
   26cfc:	697b      	ldr	r3, [r7, #20]
   26cfe:	2202      	movs	r2, #2
   26d00:	751a      	strb	r2, [r3, #20]
   26d02:	69bb      	ldr	r3, [r7, #24]
   26d04:	2233      	movs	r2, #51	; 0x33
   26d06:	2100      	movs	r1, #0
   26d08:	5499      	strb	r1, [r3, r2]
   26d0a:	2310      	movs	r3, #16
   26d0c:	18fb      	adds	r3, r7, r3
   26d0e:	881b      	ldrh	r3, [r3, #0]
   26d10:	2201      	movs	r2, #1
   26d12:	4013      	ands	r3, r2
   26d14:	d004      	beq.n	26d20 <_usart_interrupt_handler+0x124>
   26d16:	69bb      	ldr	r3, [r7, #24]
   26d18:	68db      	ldr	r3, [r3, #12]
   26d1a:	69ba      	ldr	r2, [r7, #24]
   26d1c:	0010      	movs	r0, r2
   26d1e:	4798      	blx	r3
   26d20:	2312      	movs	r3, #18
   26d22:	18fb      	adds	r3, r7, r3
   26d24:	881b      	ldrh	r3, [r3, #0]
   26d26:	2204      	movs	r2, #4
   26d28:	4013      	ands	r3, r2
   26d2a:	d100      	bne.n	26d2e <_usart_interrupt_handler+0x132>
   26d2c:	e0bd      	b.n	26eaa <_usart_interrupt_handler+0x2ae>
   26d2e:	69bb      	ldr	r3, [r7, #24]
   26d30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   26d32:	b29b      	uxth	r3, r3
   26d34:	2b00      	cmp	r3, #0
   26d36:	d100      	bne.n	26d3a <_usart_interrupt_handler+0x13e>
   26d38:	e0b4      	b.n	26ea4 <_usart_interrupt_handler+0x2a8>
   26d3a:	697b      	ldr	r3, [r7, #20]
   26d3c:	8b5b      	ldrh	r3, [r3, #26]
   26d3e:	b29b      	uxth	r3, r3
   26d40:	b2da      	uxtb	r2, r3
   26d42:	231f      	movs	r3, #31
   26d44:	18fb      	adds	r3, r7, r3
   26d46:	213f      	movs	r1, #63	; 0x3f
   26d48:	400a      	ands	r2, r1
   26d4a:	701a      	strb	r2, [r3, #0]
   26d4c:	231f      	movs	r3, #31
   26d4e:	18fb      	adds	r3, r7, r3
   26d50:	781b      	ldrb	r3, [r3, #0]
   26d52:	2208      	movs	r2, #8
   26d54:	4013      	ands	r3, r2
   26d56:	d007      	beq.n	26d68 <_usart_interrupt_handler+0x16c>
   26d58:	231f      	movs	r3, #31
   26d5a:	18fb      	adds	r3, r7, r3
   26d5c:	221f      	movs	r2, #31
   26d5e:	18ba      	adds	r2, r7, r2
   26d60:	7812      	ldrb	r2, [r2, #0]
   26d62:	2108      	movs	r1, #8
   26d64:	438a      	bics	r2, r1
   26d66:	701a      	strb	r2, [r3, #0]
   26d68:	231f      	movs	r3, #31
   26d6a:	18fb      	adds	r3, r7, r3
   26d6c:	781b      	ldrb	r3, [r3, #0]
   26d6e:	2b00      	cmp	r3, #0
   26d70:	d050      	beq.n	26e14 <_usart_interrupt_handler+0x218>
   26d72:	231f      	movs	r3, #31
   26d74:	18fb      	adds	r3, r7, r3
   26d76:	781b      	ldrb	r3, [r3, #0]
   26d78:	2202      	movs	r2, #2
   26d7a:	4013      	ands	r3, r2
   26d7c:	d007      	beq.n	26d8e <_usart_interrupt_handler+0x192>
   26d7e:	69bb      	ldr	r3, [r7, #24]
   26d80:	2232      	movs	r2, #50	; 0x32
   26d82:	211a      	movs	r1, #26
   26d84:	5499      	strb	r1, [r3, r2]
   26d86:	697b      	ldr	r3, [r7, #20]
   26d88:	2202      	movs	r2, #2
   26d8a:	835a      	strh	r2, [r3, #26]
   26d8c:	e036      	b.n	26dfc <_usart_interrupt_handler+0x200>
   26d8e:	231f      	movs	r3, #31
   26d90:	18fb      	adds	r3, r7, r3
   26d92:	781b      	ldrb	r3, [r3, #0]
   26d94:	2204      	movs	r2, #4
   26d96:	4013      	ands	r3, r2
   26d98:	d007      	beq.n	26daa <_usart_interrupt_handler+0x1ae>
   26d9a:	69bb      	ldr	r3, [r7, #24]
   26d9c:	2232      	movs	r2, #50	; 0x32
   26d9e:	211e      	movs	r1, #30
   26da0:	5499      	strb	r1, [r3, r2]
   26da2:	697b      	ldr	r3, [r7, #20]
   26da4:	2204      	movs	r2, #4
   26da6:	835a      	strh	r2, [r3, #26]
   26da8:	e028      	b.n	26dfc <_usart_interrupt_handler+0x200>
   26daa:	231f      	movs	r3, #31
   26dac:	18fb      	adds	r3, r7, r3
   26dae:	781b      	ldrb	r3, [r3, #0]
   26db0:	2201      	movs	r2, #1
   26db2:	4013      	ands	r3, r2
   26db4:	d007      	beq.n	26dc6 <_usart_interrupt_handler+0x1ca>
   26db6:	69bb      	ldr	r3, [r7, #24]
   26db8:	2232      	movs	r2, #50	; 0x32
   26dba:	2113      	movs	r1, #19
   26dbc:	5499      	strb	r1, [r3, r2]
   26dbe:	697b      	ldr	r3, [r7, #20]
   26dc0:	2201      	movs	r2, #1
   26dc2:	835a      	strh	r2, [r3, #26]
   26dc4:	e01a      	b.n	26dfc <_usart_interrupt_handler+0x200>
   26dc6:	231f      	movs	r3, #31
   26dc8:	18fb      	adds	r3, r7, r3
   26dca:	781b      	ldrb	r3, [r3, #0]
   26dcc:	2210      	movs	r2, #16
   26dce:	4013      	ands	r3, r2
   26dd0:	d007      	beq.n	26de2 <_usart_interrupt_handler+0x1e6>
   26dd2:	69bb      	ldr	r3, [r7, #24]
   26dd4:	2232      	movs	r2, #50	; 0x32
   26dd6:	2142      	movs	r1, #66	; 0x42
   26dd8:	5499      	strb	r1, [r3, r2]
   26dda:	697b      	ldr	r3, [r7, #20]
   26ddc:	2210      	movs	r2, #16
   26dde:	835a      	strh	r2, [r3, #26]
   26de0:	e00c      	b.n	26dfc <_usart_interrupt_handler+0x200>
   26de2:	231f      	movs	r3, #31
   26de4:	18fb      	adds	r3, r7, r3
   26de6:	781b      	ldrb	r3, [r3, #0]
   26de8:	2220      	movs	r2, #32
   26dea:	4013      	ands	r3, r2
   26dec:	d006      	beq.n	26dfc <_usart_interrupt_handler+0x200>
   26dee:	69bb      	ldr	r3, [r7, #24]
   26df0:	2232      	movs	r2, #50	; 0x32
   26df2:	2141      	movs	r1, #65	; 0x41
   26df4:	5499      	strb	r1, [r3, r2]
   26df6:	697b      	ldr	r3, [r7, #20]
   26df8:	2220      	movs	r2, #32
   26dfa:	835a      	strh	r2, [r3, #26]
   26dfc:	2310      	movs	r3, #16
   26dfe:	18fb      	adds	r3, r7, r3
   26e00:	881b      	ldrh	r3, [r3, #0]
   26e02:	2204      	movs	r2, #4
   26e04:	4013      	ands	r3, r2
   26e06:	d050      	beq.n	26eaa <_usart_interrupt_handler+0x2ae>
   26e08:	69bb      	ldr	r3, [r7, #24]
   26e0a:	695b      	ldr	r3, [r3, #20]
   26e0c:	69ba      	ldr	r2, [r7, #24]
   26e0e:	0010      	movs	r0, r2
   26e10:	4798      	blx	r3
   26e12:	e04a      	b.n	26eaa <_usart_interrupt_handler+0x2ae>
   26e14:	697b      	ldr	r3, [r7, #20]
   26e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   26e18:	b29a      	uxth	r2, r3
   26e1a:	230e      	movs	r3, #14
   26e1c:	18fb      	adds	r3, r7, r3
   26e1e:	05d2      	lsls	r2, r2, #23
   26e20:	0dd2      	lsrs	r2, r2, #23
   26e22:	801a      	strh	r2, [r3, #0]
   26e24:	69bb      	ldr	r3, [r7, #24]
   26e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26e28:	220e      	movs	r2, #14
   26e2a:	18ba      	adds	r2, r7, r2
   26e2c:	8812      	ldrh	r2, [r2, #0]
   26e2e:	b2d2      	uxtb	r2, r2
   26e30:	701a      	strb	r2, [r3, #0]
   26e32:	69bb      	ldr	r3, [r7, #24]
   26e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26e36:	1c5a      	adds	r2, r3, #1
   26e38:	69bb      	ldr	r3, [r7, #24]
   26e3a:	625a      	str	r2, [r3, #36]	; 0x24
   26e3c:	69bb      	ldr	r3, [r7, #24]
   26e3e:	795b      	ldrb	r3, [r3, #5]
   26e40:	2b01      	cmp	r3, #1
   26e42:	d10d      	bne.n	26e60 <_usart_interrupt_handler+0x264>
   26e44:	69bb      	ldr	r3, [r7, #24]
   26e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26e48:	220e      	movs	r2, #14
   26e4a:	18ba      	adds	r2, r7, r2
   26e4c:	8812      	ldrh	r2, [r2, #0]
   26e4e:	0a12      	lsrs	r2, r2, #8
   26e50:	b292      	uxth	r2, r2
   26e52:	b2d2      	uxtb	r2, r2
   26e54:	701a      	strb	r2, [r3, #0]
   26e56:	69bb      	ldr	r3, [r7, #24]
   26e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26e5a:	1c5a      	adds	r2, r3, #1
   26e5c:	69bb      	ldr	r3, [r7, #24]
   26e5e:	625a      	str	r2, [r3, #36]	; 0x24
   26e60:	69bb      	ldr	r3, [r7, #24]
   26e62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   26e64:	b29b      	uxth	r3, r3
   26e66:	3b01      	subs	r3, #1
   26e68:	b29b      	uxth	r3, r3
   26e6a:	69ba      	ldr	r2, [r7, #24]
   26e6c:	1c19      	adds	r1, r3, #0
   26e6e:	8591      	strh	r1, [r2, #44]	; 0x2c
   26e70:	2b00      	cmp	r3, #0
   26e72:	d11a      	bne.n	26eaa <_usart_interrupt_handler+0x2ae>
   26e74:	697b      	ldr	r3, [r7, #20]
   26e76:	2204      	movs	r2, #4
   26e78:	751a      	strb	r2, [r3, #20]
   26e7a:	69bb      	ldr	r3, [r7, #24]
   26e7c:	2232      	movs	r2, #50	; 0x32
   26e7e:	2100      	movs	r1, #0
   26e80:	5499      	strb	r1, [r3, r2]
   26e82:	2310      	movs	r3, #16
   26e84:	18fb      	adds	r3, r7, r3
   26e86:	881b      	ldrh	r3, [r3, #0]
   26e88:	2202      	movs	r2, #2
   26e8a:	4013      	ands	r3, r2
   26e8c:	d00d      	beq.n	26eaa <_usart_interrupt_handler+0x2ae>
   26e8e:	69bb      	ldr	r3, [r7, #24]
   26e90:	691b      	ldr	r3, [r3, #16]
   26e92:	69ba      	ldr	r2, [r7, #24]
   26e94:	0010      	movs	r0, r2
   26e96:	4798      	blx	r3
   26e98:	e007      	b.n	26eaa <_usart_interrupt_handler+0x2ae>
   26e9a:	46c0      	nop			; (mov r8, r8)
   26e9c:	20005578 	.word	0x20005578
   26ea0:	000269dd 	.word	0x000269dd
   26ea4:	697b      	ldr	r3, [r7, #20]
   26ea6:	2204      	movs	r2, #4
   26ea8:	751a      	strb	r2, [r3, #20]
   26eaa:	2312      	movs	r3, #18
   26eac:	18fb      	adds	r3, r7, r3
   26eae:	881b      	ldrh	r3, [r3, #0]
   26eb0:	2210      	movs	r2, #16
   26eb2:	4013      	ands	r3, r2
   26eb4:	d010      	beq.n	26ed8 <_usart_interrupt_handler+0x2dc>
   26eb6:	697b      	ldr	r3, [r7, #20]
   26eb8:	2210      	movs	r2, #16
   26eba:	751a      	strb	r2, [r3, #20]
   26ebc:	697b      	ldr	r3, [r7, #20]
   26ebe:	2210      	movs	r2, #16
   26ec0:	761a      	strb	r2, [r3, #24]
   26ec2:	2310      	movs	r3, #16
   26ec4:	18fb      	adds	r3, r7, r3
   26ec6:	881b      	ldrh	r3, [r3, #0]
   26ec8:	2210      	movs	r2, #16
   26eca:	4013      	ands	r3, r2
   26ecc:	d004      	beq.n	26ed8 <_usart_interrupt_handler+0x2dc>
   26ece:	69bb      	ldr	r3, [r7, #24]
   26ed0:	69db      	ldr	r3, [r3, #28]
   26ed2:	69ba      	ldr	r2, [r7, #24]
   26ed4:	0010      	movs	r0, r2
   26ed6:	4798      	blx	r3
   26ed8:	2312      	movs	r3, #18
   26eda:	18fb      	adds	r3, r7, r3
   26edc:	881b      	ldrh	r3, [r3, #0]
   26ede:	2220      	movs	r2, #32
   26ee0:	4013      	ands	r3, r2
   26ee2:	d010      	beq.n	26f06 <_usart_interrupt_handler+0x30a>
   26ee4:	697b      	ldr	r3, [r7, #20]
   26ee6:	2220      	movs	r2, #32
   26ee8:	751a      	strb	r2, [r3, #20]
   26eea:	697b      	ldr	r3, [r7, #20]
   26eec:	2220      	movs	r2, #32
   26eee:	761a      	strb	r2, [r3, #24]
   26ef0:	2310      	movs	r3, #16
   26ef2:	18fb      	adds	r3, r7, r3
   26ef4:	881b      	ldrh	r3, [r3, #0]
   26ef6:	2208      	movs	r2, #8
   26ef8:	4013      	ands	r3, r2
   26efa:	d004      	beq.n	26f06 <_usart_interrupt_handler+0x30a>
   26efc:	69bb      	ldr	r3, [r7, #24]
   26efe:	699b      	ldr	r3, [r3, #24]
   26f00:	69ba      	ldr	r2, [r7, #24]
   26f02:	0010      	movs	r0, r2
   26f04:	4798      	blx	r3
   26f06:	2312      	movs	r3, #18
   26f08:	18fb      	adds	r3, r7, r3
   26f0a:	881b      	ldrh	r3, [r3, #0]
   26f0c:	2208      	movs	r2, #8
   26f0e:	4013      	ands	r3, r2
   26f10:	d010      	beq.n	26f34 <_usart_interrupt_handler+0x338>
   26f12:	697b      	ldr	r3, [r7, #20]
   26f14:	2208      	movs	r2, #8
   26f16:	751a      	strb	r2, [r3, #20]
   26f18:	697b      	ldr	r3, [r7, #20]
   26f1a:	2208      	movs	r2, #8
   26f1c:	761a      	strb	r2, [r3, #24]
   26f1e:	2310      	movs	r3, #16
   26f20:	18fb      	adds	r3, r7, r3
   26f22:	881b      	ldrh	r3, [r3, #0]
   26f24:	2220      	movs	r2, #32
   26f26:	4013      	ands	r3, r2
   26f28:	d004      	beq.n	26f34 <_usart_interrupt_handler+0x338>
   26f2a:	69bb      	ldr	r3, [r7, #24]
   26f2c:	6a1b      	ldr	r3, [r3, #32]
   26f2e:	69ba      	ldr	r2, [r7, #24]
   26f30:	0010      	movs	r0, r2
   26f32:	4798      	blx	r3
   26f34:	46c0      	nop			; (mov r8, r8)
   26f36:	46bd      	mov	sp, r7
   26f38:	b008      	add	sp, #32
   26f3a:	bd80      	pop	{r7, pc}

00026f3c <system_gclk_gen_get_config_defaults>:
   26f3c:	b580      	push	{r7, lr}
   26f3e:	b082      	sub	sp, #8
   26f40:	af00      	add	r7, sp, #0
   26f42:	6078      	str	r0, [r7, #4]
   26f44:	687b      	ldr	r3, [r7, #4]
   26f46:	2201      	movs	r2, #1
   26f48:	605a      	str	r2, [r3, #4]
   26f4a:	687b      	ldr	r3, [r7, #4]
   26f4c:	2200      	movs	r2, #0
   26f4e:	705a      	strb	r2, [r3, #1]
   26f50:	687b      	ldr	r3, [r7, #4]
   26f52:	2206      	movs	r2, #6
   26f54:	701a      	strb	r2, [r3, #0]
   26f56:	687b      	ldr	r3, [r7, #4]
   26f58:	2200      	movs	r2, #0
   26f5a:	721a      	strb	r2, [r3, #8]
   26f5c:	687b      	ldr	r3, [r7, #4]
   26f5e:	2200      	movs	r2, #0
   26f60:	725a      	strb	r2, [r3, #9]
   26f62:	46c0      	nop			; (mov r8, r8)
   26f64:	46bd      	mov	sp, r7
   26f66:	b002      	add	sp, #8
   26f68:	bd80      	pop	{r7, pc}

00026f6a <system_gclk_chan_get_config_defaults>:
   26f6a:	b580      	push	{r7, lr}
   26f6c:	b082      	sub	sp, #8
   26f6e:	af00      	add	r7, sp, #0
   26f70:	6078      	str	r0, [r7, #4]
   26f72:	687b      	ldr	r3, [r7, #4]
   26f74:	2200      	movs	r2, #0
   26f76:	701a      	strb	r2, [r3, #0]
   26f78:	46c0      	nop			; (mov r8, r8)
   26f7a:	46bd      	mov	sp, r7
   26f7c:	b002      	add	sp, #8
   26f7e:	bd80      	pop	{r7, pc}

00026f80 <system_clock_source_osc8m_get_config_defaults>:
   26f80:	b580      	push	{r7, lr}
   26f82:	b082      	sub	sp, #8
   26f84:	af00      	add	r7, sp, #0
   26f86:	6078      	str	r0, [r7, #4]
   26f88:	687b      	ldr	r3, [r7, #4]
   26f8a:	2203      	movs	r2, #3
   26f8c:	701a      	strb	r2, [r3, #0]
   26f8e:	687b      	ldr	r3, [r7, #4]
   26f90:	2200      	movs	r2, #0
   26f92:	705a      	strb	r2, [r3, #1]
   26f94:	687b      	ldr	r3, [r7, #4]
   26f96:	2201      	movs	r2, #1
   26f98:	709a      	strb	r2, [r3, #2]
   26f9a:	46c0      	nop			; (mov r8, r8)
   26f9c:	46bd      	mov	sp, r7
   26f9e:	b002      	add	sp, #8
   26fa0:	bd80      	pop	{r7, pc}
	...

00026fa4 <system_cpu_clock_set_divider>:
   26fa4:	b580      	push	{r7, lr}
   26fa6:	b082      	sub	sp, #8
   26fa8:	af00      	add	r7, sp, #0
   26faa:	0002      	movs	r2, r0
   26fac:	1dfb      	adds	r3, r7, #7
   26fae:	701a      	strb	r2, [r3, #0]
   26fb0:	4a03      	ldr	r2, [pc, #12]	; (26fc0 <system_cpu_clock_set_divider+0x1c>)
   26fb2:	1dfb      	adds	r3, r7, #7
   26fb4:	781b      	ldrb	r3, [r3, #0]
   26fb6:	7213      	strb	r3, [r2, #8]
   26fb8:	46c0      	nop			; (mov r8, r8)
   26fba:	46bd      	mov	sp, r7
   26fbc:	b002      	add	sp, #8
   26fbe:	bd80      	pop	{r7, pc}
   26fc0:	40000400 	.word	0x40000400

00026fc4 <system_apb_clock_set_divider>:
   26fc4:	b580      	push	{r7, lr}
   26fc6:	b082      	sub	sp, #8
   26fc8:	af00      	add	r7, sp, #0
   26fca:	0002      	movs	r2, r0
   26fcc:	1dfb      	adds	r3, r7, #7
   26fce:	701a      	strb	r2, [r3, #0]
   26fd0:	1dbb      	adds	r3, r7, #6
   26fd2:	1c0a      	adds	r2, r1, #0
   26fd4:	701a      	strb	r2, [r3, #0]
   26fd6:	1dfb      	adds	r3, r7, #7
   26fd8:	781b      	ldrb	r3, [r3, #0]
   26fda:	2b01      	cmp	r3, #1
   26fdc:	d008      	beq.n	26ff0 <system_apb_clock_set_divider+0x2c>
   26fde:	2b02      	cmp	r3, #2
   26fe0:	d00b      	beq.n	26ffa <system_apb_clock_set_divider+0x36>
   26fe2:	2b00      	cmp	r3, #0
   26fe4:	d10e      	bne.n	27004 <system_apb_clock_set_divider+0x40>
   26fe6:	4a0b      	ldr	r2, [pc, #44]	; (27014 <system_apb_clock_set_divider+0x50>)
   26fe8:	1dbb      	adds	r3, r7, #6
   26fea:	781b      	ldrb	r3, [r3, #0]
   26fec:	7253      	strb	r3, [r2, #9]
   26fee:	e00b      	b.n	27008 <system_apb_clock_set_divider+0x44>
   26ff0:	4a08      	ldr	r2, [pc, #32]	; (27014 <system_apb_clock_set_divider+0x50>)
   26ff2:	1dbb      	adds	r3, r7, #6
   26ff4:	781b      	ldrb	r3, [r3, #0]
   26ff6:	7293      	strb	r3, [r2, #10]
   26ff8:	e006      	b.n	27008 <system_apb_clock_set_divider+0x44>
   26ffa:	4a06      	ldr	r2, [pc, #24]	; (27014 <system_apb_clock_set_divider+0x50>)
   26ffc:	1dbb      	adds	r3, r7, #6
   26ffe:	781b      	ldrb	r3, [r3, #0]
   27000:	72d3      	strb	r3, [r2, #11]
   27002:	e001      	b.n	27008 <system_apb_clock_set_divider+0x44>
   27004:	2317      	movs	r3, #23
   27006:	e000      	b.n	2700a <system_apb_clock_set_divider+0x46>
   27008:	2300      	movs	r3, #0
   2700a:	0018      	movs	r0, r3
   2700c:	46bd      	mov	sp, r7
   2700e:	b002      	add	sp, #8
   27010:	bd80      	pop	{r7, pc}
   27012:	46c0      	nop			; (mov r8, r8)
   27014:	40000400 	.word	0x40000400

00027018 <system_clock_source_dpll_get_config_defaults>:
   27018:	b580      	push	{r7, lr}
   2701a:	b082      	sub	sp, #8
   2701c:	af00      	add	r7, sp, #0
   2701e:	6078      	str	r0, [r7, #4]
   27020:	687b      	ldr	r3, [r7, #4]
   27022:	2201      	movs	r2, #1
   27024:	701a      	strb	r2, [r3, #0]
   27026:	687b      	ldr	r3, [r7, #4]
   27028:	2200      	movs	r2, #0
   2702a:	705a      	strb	r2, [r3, #1]
   2702c:	687b      	ldr	r3, [r7, #4]
   2702e:	2200      	movs	r2, #0
   27030:	709a      	strb	r2, [r3, #2]
   27032:	687b      	ldr	r3, [r7, #4]
   27034:	2200      	movs	r2, #0
   27036:	70da      	strb	r2, [r3, #3]
   27038:	687b      	ldr	r3, [r7, #4]
   2703a:	2200      	movs	r2, #0
   2703c:	711a      	strb	r2, [r3, #4]
   2703e:	687b      	ldr	r3, [r7, #4]
   27040:	4a0a      	ldr	r2, [pc, #40]	; (2706c <system_clock_source_dpll_get_config_defaults+0x54>)
   27042:	609a      	str	r2, [r3, #8]
   27044:	687b      	ldr	r3, [r7, #4]
   27046:	2280      	movs	r2, #128	; 0x80
   27048:	0212      	lsls	r2, r2, #8
   2704a:	60da      	str	r2, [r3, #12]
   2704c:	687b      	ldr	r3, [r7, #4]
   2704e:	2201      	movs	r2, #1
   27050:	821a      	strh	r2, [r3, #16]
   27052:	687b      	ldr	r3, [r7, #4]
   27054:	2200      	movs	r2, #0
   27056:	751a      	strb	r2, [r3, #20]
   27058:	687b      	ldr	r3, [r7, #4]
   2705a:	2200      	movs	r2, #0
   2705c:	74da      	strb	r2, [r3, #19]
   2705e:	687b      	ldr	r3, [r7, #4]
   27060:	2200      	movs	r2, #0
   27062:	749a      	strb	r2, [r3, #18]
   27064:	46c0      	nop			; (mov r8, r8)
   27066:	46bd      	mov	sp, r7
   27068:	b002      	add	sp, #8
   2706a:	bd80      	pop	{r7, pc}
   2706c:	02dc6c00 	.word	0x02dc6c00

00027070 <system_flash_set_waitstates>:
   27070:	b580      	push	{r7, lr}
   27072:	b082      	sub	sp, #8
   27074:	af00      	add	r7, sp, #0
   27076:	0002      	movs	r2, r0
   27078:	1dfb      	adds	r3, r7, #7
   2707a:	701a      	strb	r2, [r3, #0]
   2707c:	4a08      	ldr	r2, [pc, #32]	; (270a0 <system_flash_set_waitstates+0x30>)
   2707e:	1dfb      	adds	r3, r7, #7
   27080:	781b      	ldrb	r3, [r3, #0]
   27082:	210f      	movs	r1, #15
   27084:	400b      	ands	r3, r1
   27086:	b2d9      	uxtb	r1, r3
   27088:	6853      	ldr	r3, [r2, #4]
   2708a:	200f      	movs	r0, #15
   2708c:	4001      	ands	r1, r0
   2708e:	0049      	lsls	r1, r1, #1
   27090:	201e      	movs	r0, #30
   27092:	4383      	bics	r3, r0
   27094:	430b      	orrs	r3, r1
   27096:	6053      	str	r3, [r2, #4]
   27098:	46c0      	nop			; (mov r8, r8)
   2709a:	46bd      	mov	sp, r7
   2709c:	b002      	add	sp, #8
   2709e:	bd80      	pop	{r7, pc}
   270a0:	41004000 	.word	0x41004000

000270a4 <_system_dfll_wait_for_sync>:
   270a4:	b580      	push	{r7, lr}
   270a6:	af00      	add	r7, sp, #0
   270a8:	46c0      	nop			; (mov r8, r8)
   270aa:	4b04      	ldr	r3, [pc, #16]	; (270bc <_system_dfll_wait_for_sync+0x18>)
   270ac:	68db      	ldr	r3, [r3, #12]
   270ae:	2210      	movs	r2, #16
   270b0:	4013      	ands	r3, r2
   270b2:	d0fa      	beq.n	270aa <_system_dfll_wait_for_sync+0x6>
   270b4:	46c0      	nop			; (mov r8, r8)
   270b6:	46bd      	mov	sp, r7
   270b8:	bd80      	pop	{r7, pc}
   270ba:	46c0      	nop			; (mov r8, r8)
   270bc:	40000800 	.word	0x40000800

000270c0 <_system_clock_source_dfll_set_config_errata_9905>:
   270c0:	b580      	push	{r7, lr}
   270c2:	af00      	add	r7, sp, #0
   270c4:	4b0c      	ldr	r3, [pc, #48]	; (270f8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   270c6:	2202      	movs	r2, #2
   270c8:	849a      	strh	r2, [r3, #36]	; 0x24
   270ca:	4b0c      	ldr	r3, [pc, #48]	; (270fc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   270cc:	4798      	blx	r3
   270ce:	4a0a      	ldr	r2, [pc, #40]	; (270f8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   270d0:	4b0b      	ldr	r3, [pc, #44]	; (27100 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   270d2:	689b      	ldr	r3, [r3, #8]
   270d4:	62d3      	str	r3, [r2, #44]	; 0x2c
   270d6:	4a08      	ldr	r2, [pc, #32]	; (270f8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   270d8:	4b09      	ldr	r3, [pc, #36]	; (27100 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   270da:	685b      	ldr	r3, [r3, #4]
   270dc:	6293      	str	r3, [r2, #40]	; 0x28
   270de:	4b06      	ldr	r3, [pc, #24]	; (270f8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   270e0:	2200      	movs	r2, #0
   270e2:	849a      	strh	r2, [r3, #36]	; 0x24
   270e4:	4b05      	ldr	r3, [pc, #20]	; (270fc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   270e6:	4798      	blx	r3
   270e8:	4a03      	ldr	r2, [pc, #12]	; (270f8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   270ea:	4b05      	ldr	r3, [pc, #20]	; (27100 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   270ec:	681b      	ldr	r3, [r3, #0]
   270ee:	b29b      	uxth	r3, r3
   270f0:	8493      	strh	r3, [r2, #36]	; 0x24
   270f2:	46c0      	nop			; (mov r8, r8)
   270f4:	46bd      	mov	sp, r7
   270f6:	bd80      	pop	{r7, pc}
   270f8:	40000800 	.word	0x40000800
   270fc:	000270a5 	.word	0x000270a5
   27100:	20003d34 	.word	0x20003d34

00027104 <system_clock_source_get_hz>:
   27104:	b580      	push	{r7, lr}
   27106:	b082      	sub	sp, #8
   27108:	af00      	add	r7, sp, #0
   2710a:	0002      	movs	r2, r0
   2710c:	1dfb      	adds	r3, r7, #7
   2710e:	701a      	strb	r2, [r3, #0]
   27110:	1dfb      	adds	r3, r7, #7
   27112:	781b      	ldrb	r3, [r3, #0]
   27114:	2b08      	cmp	r3, #8
   27116:	d841      	bhi.n	2719c <system_clock_source_get_hz+0x98>
   27118:	009a      	lsls	r2, r3, #2
   2711a:	4b23      	ldr	r3, [pc, #140]	; (271a8 <system_clock_source_get_hz+0xa4>)
   2711c:	18d3      	adds	r3, r2, r3
   2711e:	681b      	ldr	r3, [r3, #0]
   27120:	469f      	mov	pc, r3
   27122:	4b22      	ldr	r3, [pc, #136]	; (271ac <system_clock_source_get_hz+0xa8>)
   27124:	691b      	ldr	r3, [r3, #16]
   27126:	e03a      	b.n	2719e <system_clock_source_get_hz+0x9a>
   27128:	4b21      	ldr	r3, [pc, #132]	; (271b0 <system_clock_source_get_hz+0xac>)
   2712a:	6a1b      	ldr	r3, [r3, #32]
   2712c:	059b      	lsls	r3, r3, #22
   2712e:	0f9b      	lsrs	r3, r3, #30
   27130:	b2db      	uxtb	r3, r3
   27132:	001a      	movs	r2, r3
   27134:	4b1f      	ldr	r3, [pc, #124]	; (271b4 <system_clock_source_get_hz+0xb0>)
   27136:	40d3      	lsrs	r3, r2
   27138:	e031      	b.n	2719e <system_clock_source_get_hz+0x9a>
   2713a:	2380      	movs	r3, #128	; 0x80
   2713c:	021b      	lsls	r3, r3, #8
   2713e:	e02e      	b.n	2719e <system_clock_source_get_hz+0x9a>
   27140:	2380      	movs	r3, #128	; 0x80
   27142:	021b      	lsls	r3, r3, #8
   27144:	e02b      	b.n	2719e <system_clock_source_get_hz+0x9a>
   27146:	4b19      	ldr	r3, [pc, #100]	; (271ac <system_clock_source_get_hz+0xa8>)
   27148:	695b      	ldr	r3, [r3, #20]
   2714a:	e028      	b.n	2719e <system_clock_source_get_hz+0x9a>
   2714c:	4b17      	ldr	r3, [pc, #92]	; (271ac <system_clock_source_get_hz+0xa8>)
   2714e:	681b      	ldr	r3, [r3, #0]
   27150:	2202      	movs	r2, #2
   27152:	4013      	ands	r3, r2
   27154:	d101      	bne.n	2715a <system_clock_source_get_hz+0x56>
   27156:	2300      	movs	r3, #0
   27158:	e021      	b.n	2719e <system_clock_source_get_hz+0x9a>
   2715a:	4b17      	ldr	r3, [pc, #92]	; (271b8 <system_clock_source_get_hz+0xb4>)
   2715c:	4798      	blx	r3
   2715e:	4b13      	ldr	r3, [pc, #76]	; (271ac <system_clock_source_get_hz+0xa8>)
   27160:	681b      	ldr	r3, [r3, #0]
   27162:	2224      	movs	r2, #36	; 0x24
   27164:	4013      	ands	r3, r2
   27166:	2b04      	cmp	r3, #4
   27168:	d109      	bne.n	2717e <system_clock_source_get_hz+0x7a>
   2716a:	2000      	movs	r0, #0
   2716c:	4b13      	ldr	r3, [pc, #76]	; (271bc <system_clock_source_get_hz+0xb8>)
   2716e:	4798      	blx	r3
   27170:	0002      	movs	r2, r0
   27172:	4b0e      	ldr	r3, [pc, #56]	; (271ac <system_clock_source_get_hz+0xa8>)
   27174:	689b      	ldr	r3, [r3, #8]
   27176:	041b      	lsls	r3, r3, #16
   27178:	0c1b      	lsrs	r3, r3, #16
   2717a:	4353      	muls	r3, r2
   2717c:	e00f      	b.n	2719e <system_clock_source_get_hz+0x9a>
   2717e:	4b10      	ldr	r3, [pc, #64]	; (271c0 <system_clock_source_get_hz+0xbc>)
   27180:	e00d      	b.n	2719e <system_clock_source_get_hz+0x9a>
   27182:	4a0b      	ldr	r2, [pc, #44]	; (271b0 <system_clock_source_get_hz+0xac>)
   27184:	2350      	movs	r3, #80	; 0x50
   27186:	5cd3      	ldrb	r3, [r2, r3]
   27188:	b2db      	uxtb	r3, r3
   2718a:	001a      	movs	r2, r3
   2718c:	2304      	movs	r3, #4
   2718e:	4013      	ands	r3, r2
   27190:	d101      	bne.n	27196 <system_clock_source_get_hz+0x92>
   27192:	2300      	movs	r3, #0
   27194:	e003      	b.n	2719e <system_clock_source_get_hz+0x9a>
   27196:	4b05      	ldr	r3, [pc, #20]	; (271ac <system_clock_source_get_hz+0xa8>)
   27198:	68db      	ldr	r3, [r3, #12]
   2719a:	e000      	b.n	2719e <system_clock_source_get_hz+0x9a>
   2719c:	2300      	movs	r3, #0
   2719e:	0018      	movs	r0, r3
   271a0:	46bd      	mov	sp, r7
   271a2:	b002      	add	sp, #8
   271a4:	bd80      	pop	{r7, pc}
   271a6:	46c0      	nop			; (mov r8, r8)
   271a8:	00036958 	.word	0x00036958
   271ac:	20003d34 	.word	0x20003d34
   271b0:	40000800 	.word	0x40000800
   271b4:	007a1200 	.word	0x007a1200
   271b8:	000270a5 	.word	0x000270a5
   271bc:	00027ba1 	.word	0x00027ba1
   271c0:	02dc6c00 	.word	0x02dc6c00

000271c4 <system_clock_source_osc8m_set_config>:
   271c4:	b580      	push	{r7, lr}
   271c6:	b084      	sub	sp, #16
   271c8:	af00      	add	r7, sp, #0
   271ca:	6078      	str	r0, [r7, #4]
   271cc:	4b1a      	ldr	r3, [pc, #104]	; (27238 <system_clock_source_osc8m_set_config+0x74>)
   271ce:	6a1b      	ldr	r3, [r3, #32]
   271d0:	60fb      	str	r3, [r7, #12]
   271d2:	687b      	ldr	r3, [r7, #4]
   271d4:	781b      	ldrb	r3, [r3, #0]
   271d6:	1c1a      	adds	r2, r3, #0
   271d8:	2303      	movs	r3, #3
   271da:	4013      	ands	r3, r2
   271dc:	b2da      	uxtb	r2, r3
   271de:	230d      	movs	r3, #13
   271e0:	18fb      	adds	r3, r7, r3
   271e2:	2103      	movs	r1, #3
   271e4:	400a      	ands	r2, r1
   271e6:	0010      	movs	r0, r2
   271e8:	781a      	ldrb	r2, [r3, #0]
   271ea:	2103      	movs	r1, #3
   271ec:	438a      	bics	r2, r1
   271ee:	1c11      	adds	r1, r2, #0
   271f0:	1c02      	adds	r2, r0, #0
   271f2:	430a      	orrs	r2, r1
   271f4:	701a      	strb	r2, [r3, #0]
   271f6:	687b      	ldr	r3, [r7, #4]
   271f8:	789a      	ldrb	r2, [r3, #2]
   271fa:	230c      	movs	r3, #12
   271fc:	18fb      	adds	r3, r7, r3
   271fe:	01d0      	lsls	r0, r2, #7
   27200:	781a      	ldrb	r2, [r3, #0]
   27202:	217f      	movs	r1, #127	; 0x7f
   27204:	400a      	ands	r2, r1
   27206:	1c11      	adds	r1, r2, #0
   27208:	1c02      	adds	r2, r0, #0
   2720a:	430a      	orrs	r2, r1
   2720c:	701a      	strb	r2, [r3, #0]
   2720e:	687b      	ldr	r3, [r7, #4]
   27210:	785a      	ldrb	r2, [r3, #1]
   27212:	230c      	movs	r3, #12
   27214:	18fb      	adds	r3, r7, r3
   27216:	2101      	movs	r1, #1
   27218:	400a      	ands	r2, r1
   2721a:	0190      	lsls	r0, r2, #6
   2721c:	781a      	ldrb	r2, [r3, #0]
   2721e:	2140      	movs	r1, #64	; 0x40
   27220:	438a      	bics	r2, r1
   27222:	1c11      	adds	r1, r2, #0
   27224:	1c02      	adds	r2, r0, #0
   27226:	430a      	orrs	r2, r1
   27228:	701a      	strb	r2, [r3, #0]
   2722a:	4b03      	ldr	r3, [pc, #12]	; (27238 <system_clock_source_osc8m_set_config+0x74>)
   2722c:	68fa      	ldr	r2, [r7, #12]
   2722e:	621a      	str	r2, [r3, #32]
   27230:	46c0      	nop			; (mov r8, r8)
   27232:	46bd      	mov	sp, r7
   27234:	b004      	add	sp, #16
   27236:	bd80      	pop	{r7, pc}
   27238:	40000800 	.word	0x40000800

0002723c <system_clock_source_dpll_set_config>:
   2723c:	b580      	push	{r7, lr}
   2723e:	b086      	sub	sp, #24
   27240:	af00      	add	r7, sp, #0
   27242:	6078      	str	r0, [r7, #4]
   27244:	687b      	ldr	r3, [r7, #4]
   27246:	68db      	ldr	r3, [r3, #12]
   27248:	617b      	str	r3, [r7, #20]
   2724a:	687b      	ldr	r3, [r7, #4]
   2724c:	7d1b      	ldrb	r3, [r3, #20]
   2724e:	2b01      	cmp	r3, #1
   27250:	d10a      	bne.n	27268 <system_clock_source_dpll_set_config+0x2c>
   27252:	687b      	ldr	r3, [r7, #4]
   27254:	8a1b      	ldrh	r3, [r3, #16]
   27256:	3301      	adds	r3, #1
   27258:	005b      	lsls	r3, r3, #1
   2725a:	001a      	movs	r2, r3
   2725c:	4b36      	ldr	r3, [pc, #216]	; (27338 <system_clock_source_dpll_set_config+0xfc>)
   2725e:	0011      	movs	r1, r2
   27260:	6978      	ldr	r0, [r7, #20]
   27262:	4798      	blx	r3
   27264:	0003      	movs	r3, r0
   27266:	617b      	str	r3, [r7, #20]
   27268:	687b      	ldr	r3, [r7, #4]
   2726a:	689b      	ldr	r3, [r3, #8]
   2726c:	011a      	lsls	r2, r3, #4
   2726e:	4b32      	ldr	r3, [pc, #200]	; (27338 <system_clock_source_dpll_set_config+0xfc>)
   27270:	6979      	ldr	r1, [r7, #20]
   27272:	0010      	movs	r0, r2
   27274:	4798      	blx	r3
   27276:	0003      	movs	r3, r0
   27278:	613b      	str	r3, [r7, #16]
   2727a:	693b      	ldr	r3, [r7, #16]
   2727c:	b2da      	uxtb	r2, r3
   2727e:	230f      	movs	r3, #15
   27280:	18fb      	adds	r3, r7, r3
   27282:	210f      	movs	r1, #15
   27284:	400a      	ands	r2, r1
   27286:	701a      	strb	r2, [r3, #0]
   27288:	693b      	ldr	r3, [r7, #16]
   2728a:	091b      	lsrs	r3, r3, #4
   2728c:	3b01      	subs	r3, #1
   2728e:	613b      	str	r3, [r7, #16]
   27290:	492a      	ldr	r1, [pc, #168]	; (2733c <system_clock_source_dpll_set_config+0x100>)
   27292:	687b      	ldr	r3, [r7, #4]
   27294:	781b      	ldrb	r3, [r3, #0]
   27296:	01db      	lsls	r3, r3, #7
   27298:	b2da      	uxtb	r2, r3
   2729a:	687b      	ldr	r3, [r7, #4]
   2729c:	785b      	ldrb	r3, [r3, #1]
   2729e:	019b      	lsls	r3, r3, #6
   272a0:	b2db      	uxtb	r3, r3
   272a2:	4313      	orrs	r3, r2
   272a4:	b2da      	uxtb	r2, r3
   272a6:	2344      	movs	r3, #68	; 0x44
   272a8:	54ca      	strb	r2, [r1, r3]
   272aa:	4b24      	ldr	r3, [pc, #144]	; (2733c <system_clock_source_dpll_set_config+0x100>)
   272ac:	220f      	movs	r2, #15
   272ae:	18ba      	adds	r2, r7, r2
   272b0:	7812      	ldrb	r2, [r2, #0]
   272b2:	0412      	lsls	r2, r2, #16
   272b4:	0011      	movs	r1, r2
   272b6:	22f0      	movs	r2, #240	; 0xf0
   272b8:	0312      	lsls	r2, r2, #12
   272ba:	4011      	ands	r1, r2
   272bc:	693a      	ldr	r2, [r7, #16]
   272be:	0512      	lsls	r2, r2, #20
   272c0:	0d12      	lsrs	r2, r2, #20
   272c2:	430a      	orrs	r2, r1
   272c4:	649a      	str	r2, [r3, #72]	; 0x48
   272c6:	4b1d      	ldr	r3, [pc, #116]	; (2733c <system_clock_source_dpll_set_config+0x100>)
   272c8:	687a      	ldr	r2, [r7, #4]
   272ca:	8a12      	ldrh	r2, [r2, #16]
   272cc:	0412      	lsls	r2, r2, #16
   272ce:	0011      	movs	r1, r2
   272d0:	4a1b      	ldr	r2, [pc, #108]	; (27340 <system_clock_source_dpll_set_config+0x104>)
   272d2:	4011      	ands	r1, r2
   272d4:	687a      	ldr	r2, [r7, #4]
   272d6:	7892      	ldrb	r2, [r2, #2]
   272d8:	0312      	lsls	r2, r2, #12
   272da:	4311      	orrs	r1, r2
   272dc:	687a      	ldr	r2, [r7, #4]
   272de:	7cd2      	ldrb	r2, [r2, #19]
   272e0:	0212      	lsls	r2, r2, #8
   272e2:	0010      	movs	r0, r2
   272e4:	22e0      	movs	r2, #224	; 0xe0
   272e6:	00d2      	lsls	r2, r2, #3
   272e8:	4002      	ands	r2, r0
   272ea:	4311      	orrs	r1, r2
   272ec:	687a      	ldr	r2, [r7, #4]
   272ee:	7d12      	ldrb	r2, [r2, #20]
   272f0:	0112      	lsls	r2, r2, #4
   272f2:	0010      	movs	r0, r2
   272f4:	2230      	movs	r2, #48	; 0x30
   272f6:	4002      	ands	r2, r0
   272f8:	4311      	orrs	r1, r2
   272fa:	687a      	ldr	r2, [r7, #4]
   272fc:	78d2      	ldrb	r2, [r2, #3]
   272fe:	00d2      	lsls	r2, r2, #3
   27300:	4311      	orrs	r1, r2
   27302:	687a      	ldr	r2, [r7, #4]
   27304:	7912      	ldrb	r2, [r2, #4]
   27306:	0092      	lsls	r2, r2, #2
   27308:	4311      	orrs	r1, r2
   2730a:	687a      	ldr	r2, [r7, #4]
   2730c:	7c92      	ldrb	r2, [r2, #18]
   2730e:	0010      	movs	r0, r2
   27310:	2203      	movs	r2, #3
   27312:	4002      	ands	r2, r0
   27314:	430a      	orrs	r2, r1
   27316:	64da      	str	r2, [r3, #76]	; 0x4c
   27318:	693b      	ldr	r3, [r7, #16]
   2731a:	3301      	adds	r3, #1
   2731c:	011a      	lsls	r2, r3, #4
   2731e:	230f      	movs	r3, #15
   27320:	18fb      	adds	r3, r7, r3
   27322:	781b      	ldrb	r3, [r3, #0]
   27324:	18d3      	adds	r3, r2, r3
   27326:	697a      	ldr	r2, [r7, #20]
   27328:	4353      	muls	r3, r2
   2732a:	091a      	lsrs	r2, r3, #4
   2732c:	4b05      	ldr	r3, [pc, #20]	; (27344 <system_clock_source_dpll_set_config+0x108>)
   2732e:	60da      	str	r2, [r3, #12]
   27330:	46c0      	nop			; (mov r8, r8)
   27332:	46bd      	mov	sp, r7
   27334:	b006      	add	sp, #24
   27336:	bd80      	pop	{r7, pc}
   27338:	000304e9 	.word	0x000304e9
   2733c:	40000800 	.word	0x40000800
   27340:	07ff0000 	.word	0x07ff0000
   27344:	20003d34 	.word	0x20003d34

00027348 <system_clock_source_enable>:
   27348:	b580      	push	{r7, lr}
   2734a:	b082      	sub	sp, #8
   2734c:	af00      	add	r7, sp, #0
   2734e:	0002      	movs	r2, r0
   27350:	1dfb      	adds	r3, r7, #7
   27352:	701a      	strb	r2, [r3, #0]
   27354:	1dfb      	adds	r3, r7, #7
   27356:	781b      	ldrb	r3, [r3, #0]
   27358:	2b08      	cmp	r3, #8
   2735a:	d83b      	bhi.n	273d4 <system_clock_source_enable+0x8c>
   2735c:	009a      	lsls	r2, r3, #2
   2735e:	4b21      	ldr	r3, [pc, #132]	; (273e4 <system_clock_source_enable+0x9c>)
   27360:	18d3      	adds	r3, r2, r3
   27362:	681b      	ldr	r3, [r3, #0]
   27364:	469f      	mov	pc, r3
   27366:	4b20      	ldr	r3, [pc, #128]	; (273e8 <system_clock_source_enable+0xa0>)
   27368:	4a1f      	ldr	r2, [pc, #124]	; (273e8 <system_clock_source_enable+0xa0>)
   2736a:	6a12      	ldr	r2, [r2, #32]
   2736c:	2102      	movs	r1, #2
   2736e:	430a      	orrs	r2, r1
   27370:	621a      	str	r2, [r3, #32]
   27372:	2300      	movs	r3, #0
   27374:	e031      	b.n	273da <system_clock_source_enable+0x92>
   27376:	4b1c      	ldr	r3, [pc, #112]	; (273e8 <system_clock_source_enable+0xa0>)
   27378:	4a1b      	ldr	r2, [pc, #108]	; (273e8 <system_clock_source_enable+0xa0>)
   2737a:	6992      	ldr	r2, [r2, #24]
   2737c:	2102      	movs	r1, #2
   2737e:	430a      	orrs	r2, r1
   27380:	619a      	str	r2, [r3, #24]
   27382:	e029      	b.n	273d8 <system_clock_source_enable+0x90>
   27384:	4a18      	ldr	r2, [pc, #96]	; (273e8 <system_clock_source_enable+0xa0>)
   27386:	4b18      	ldr	r3, [pc, #96]	; (273e8 <system_clock_source_enable+0xa0>)
   27388:	8a1b      	ldrh	r3, [r3, #16]
   2738a:	b29b      	uxth	r3, r3
   2738c:	2102      	movs	r1, #2
   2738e:	430b      	orrs	r3, r1
   27390:	b29b      	uxth	r3, r3
   27392:	8213      	strh	r3, [r2, #16]
   27394:	e020      	b.n	273d8 <system_clock_source_enable+0x90>
   27396:	4a14      	ldr	r2, [pc, #80]	; (273e8 <system_clock_source_enable+0xa0>)
   27398:	4b13      	ldr	r3, [pc, #76]	; (273e8 <system_clock_source_enable+0xa0>)
   2739a:	8a9b      	ldrh	r3, [r3, #20]
   2739c:	b29b      	uxth	r3, r3
   2739e:	2102      	movs	r1, #2
   273a0:	430b      	orrs	r3, r1
   273a2:	b29b      	uxth	r3, r3
   273a4:	8293      	strh	r3, [r2, #20]
   273a6:	e017      	b.n	273d8 <system_clock_source_enable+0x90>
   273a8:	4b10      	ldr	r3, [pc, #64]	; (273ec <system_clock_source_enable+0xa4>)
   273aa:	681b      	ldr	r3, [r3, #0]
   273ac:	2202      	movs	r2, #2
   273ae:	431a      	orrs	r2, r3
   273b0:	4b0e      	ldr	r3, [pc, #56]	; (273ec <system_clock_source_enable+0xa4>)
   273b2:	601a      	str	r2, [r3, #0]
   273b4:	4b0e      	ldr	r3, [pc, #56]	; (273f0 <system_clock_source_enable+0xa8>)
   273b6:	4798      	blx	r3
   273b8:	e00e      	b.n	273d8 <system_clock_source_enable+0x90>
   273ba:	4a0b      	ldr	r2, [pc, #44]	; (273e8 <system_clock_source_enable+0xa0>)
   273bc:	490a      	ldr	r1, [pc, #40]	; (273e8 <system_clock_source_enable+0xa0>)
   273be:	2344      	movs	r3, #68	; 0x44
   273c0:	5ccb      	ldrb	r3, [r1, r3]
   273c2:	b2db      	uxtb	r3, r3
   273c4:	2102      	movs	r1, #2
   273c6:	430b      	orrs	r3, r1
   273c8:	b2d9      	uxtb	r1, r3
   273ca:	2344      	movs	r3, #68	; 0x44
   273cc:	54d1      	strb	r1, [r2, r3]
   273ce:	e003      	b.n	273d8 <system_clock_source_enable+0x90>
   273d0:	2300      	movs	r3, #0
   273d2:	e002      	b.n	273da <system_clock_source_enable+0x92>
   273d4:	2317      	movs	r3, #23
   273d6:	e000      	b.n	273da <system_clock_source_enable+0x92>
   273d8:	2300      	movs	r3, #0
   273da:	0018      	movs	r0, r3
   273dc:	46bd      	mov	sp, r7
   273de:	b002      	add	sp, #8
   273e0:	bd80      	pop	{r7, pc}
   273e2:	46c0      	nop			; (mov r8, r8)
   273e4:	0003697c 	.word	0x0003697c
   273e8:	40000800 	.word	0x40000800
   273ec:	20003d34 	.word	0x20003d34
   273f0:	000270c1 	.word	0x000270c1

000273f4 <system_clock_source_is_ready>:
   273f4:	b580      	push	{r7, lr}
   273f6:	b084      	sub	sp, #16
   273f8:	af00      	add	r7, sp, #0
   273fa:	0002      	movs	r2, r0
   273fc:	1dfb      	adds	r3, r7, #7
   273fe:	701a      	strb	r2, [r3, #0]
   27400:	2300      	movs	r3, #0
   27402:	60fb      	str	r3, [r7, #12]
   27404:	1dfb      	adds	r3, r7, #7
   27406:	781b      	ldrb	r3, [r3, #0]
   27408:	2b08      	cmp	r3, #8
   2740a:	d821      	bhi.n	27450 <system_clock_source_is_ready+0x5c>
   2740c:	009a      	lsls	r2, r3, #2
   2740e:	4b18      	ldr	r3, [pc, #96]	; (27470 <system_clock_source_is_ready+0x7c>)
   27410:	18d3      	adds	r3, r2, r3
   27412:	681b      	ldr	r3, [r3, #0]
   27414:	469f      	mov	pc, r3
   27416:	2308      	movs	r3, #8
   27418:	60fb      	str	r3, [r7, #12]
   2741a:	e01b      	b.n	27454 <system_clock_source_is_ready+0x60>
   2741c:	2304      	movs	r3, #4
   2741e:	60fb      	str	r3, [r7, #12]
   27420:	e018      	b.n	27454 <system_clock_source_is_ready+0x60>
   27422:	2301      	movs	r3, #1
   27424:	60fb      	str	r3, [r7, #12]
   27426:	e015      	b.n	27454 <system_clock_source_is_ready+0x60>
   27428:	2302      	movs	r3, #2
   2742a:	60fb      	str	r3, [r7, #12]
   2742c:	e012      	b.n	27454 <system_clock_source_is_ready+0x60>
   2742e:	2310      	movs	r3, #16
   27430:	60fb      	str	r3, [r7, #12]
   27432:	e00f      	b.n	27454 <system_clock_source_is_ready+0x60>
   27434:	4a0f      	ldr	r2, [pc, #60]	; (27474 <system_clock_source_is_ready+0x80>)
   27436:	2350      	movs	r3, #80	; 0x50
   27438:	5cd3      	ldrb	r3, [r2, r3]
   2743a:	b2db      	uxtb	r3, r3
   2743c:	001a      	movs	r2, r3
   2743e:	2303      	movs	r3, #3
   27440:	4013      	ands	r3, r2
   27442:	3b03      	subs	r3, #3
   27444:	425a      	negs	r2, r3
   27446:	4153      	adcs	r3, r2
   27448:	b2db      	uxtb	r3, r3
   2744a:	e00c      	b.n	27466 <system_clock_source_is_ready+0x72>
   2744c:	2301      	movs	r3, #1
   2744e:	e00a      	b.n	27466 <system_clock_source_is_ready+0x72>
   27450:	2300      	movs	r3, #0
   27452:	e008      	b.n	27466 <system_clock_source_is_ready+0x72>
   27454:	4b07      	ldr	r3, [pc, #28]	; (27474 <system_clock_source_is_ready+0x80>)
   27456:	68db      	ldr	r3, [r3, #12]
   27458:	68fa      	ldr	r2, [r7, #12]
   2745a:	401a      	ands	r2, r3
   2745c:	68fb      	ldr	r3, [r7, #12]
   2745e:	1ad3      	subs	r3, r2, r3
   27460:	425a      	negs	r2, r3
   27462:	4153      	adcs	r3, r2
   27464:	b2db      	uxtb	r3, r3
   27466:	0018      	movs	r0, r3
   27468:	46bd      	mov	sp, r7
   2746a:	b004      	add	sp, #16
   2746c:	bd80      	pop	{r7, pc}
   2746e:	46c0      	nop			; (mov r8, r8)
   27470:	000369a0 	.word	0x000369a0
   27474:	40000800 	.word	0x40000800

00027478 <_switch_peripheral_gclk>:
   27478:	b580      	push	{r7, lr}
   2747a:	b082      	sub	sp, #8
   2747c:	af00      	add	r7, sp, #0
   2747e:	003b      	movs	r3, r7
   27480:	2203      	movs	r2, #3
   27482:	701a      	strb	r2, [r3, #0]
   27484:	2300      	movs	r3, #0
   27486:	607b      	str	r3, [r7, #4]
   27488:	e009      	b.n	2749e <_switch_peripheral_gclk+0x26>
   2748a:	687b      	ldr	r3, [r7, #4]
   2748c:	b2db      	uxtb	r3, r3
   2748e:	003a      	movs	r2, r7
   27490:	0011      	movs	r1, r2
   27492:	0018      	movs	r0, r3
   27494:	4b05      	ldr	r3, [pc, #20]	; (274ac <_switch_peripheral_gclk+0x34>)
   27496:	4798      	blx	r3
   27498:	687b      	ldr	r3, [r7, #4]
   2749a:	3301      	adds	r3, #1
   2749c:	607b      	str	r3, [r7, #4]
   2749e:	687b      	ldr	r3, [r7, #4]
   274a0:	2b24      	cmp	r3, #36	; 0x24
   274a2:	d9f2      	bls.n	2748a <_switch_peripheral_gclk+0x12>
   274a4:	46c0      	nop			; (mov r8, r8)
   274a6:	46bd      	mov	sp, r7
   274a8:	b002      	add	sp, #8
   274aa:	bd80      	pop	{r7, pc}
   274ac:	00027a7d 	.word	0x00027a7d

000274b0 <system_clock_init>:
   274b0:	b580      	push	{r7, lr}
   274b2:	b0a6      	sub	sp, #152	; 0x98
   274b4:	af00      	add	r7, sp, #0
   274b6:	4b92      	ldr	r3, [pc, #584]	; (27700 <system_clock_init+0x250>)
   274b8:	22c2      	movs	r2, #194	; 0xc2
   274ba:	00d2      	lsls	r2, r2, #3
   274bc:	609a      	str	r2, [r3, #8]
   274be:	2003      	movs	r0, #3
   274c0:	4b90      	ldr	r3, [pc, #576]	; (27704 <system_clock_init+0x254>)
   274c2:	4798      	blx	r3
   274c4:	4b90      	ldr	r3, [pc, #576]	; (27708 <system_clock_init+0x258>)
   274c6:	4798      	blx	r3
   274c8:	2394      	movs	r3, #148	; 0x94
   274ca:	18fb      	adds	r3, r7, r3
   274cc:	0018      	movs	r0, r3
   274ce:	4b8f      	ldr	r3, [pc, #572]	; (2770c <system_clock_init+0x25c>)
   274d0:	4798      	blx	r3
   274d2:	2394      	movs	r3, #148	; 0x94
   274d4:	18fb      	adds	r3, r7, r3
   274d6:	2200      	movs	r2, #0
   274d8:	701a      	strb	r2, [r3, #0]
   274da:	2394      	movs	r3, #148	; 0x94
   274dc:	18fb      	adds	r3, r7, r3
   274de:	2201      	movs	r2, #1
   274e0:	709a      	strb	r2, [r3, #2]
   274e2:	2394      	movs	r3, #148	; 0x94
   274e4:	18fb      	adds	r3, r7, r3
   274e6:	2200      	movs	r2, #0
   274e8:	705a      	strb	r2, [r3, #1]
   274ea:	2394      	movs	r3, #148	; 0x94
   274ec:	18fb      	adds	r3, r7, r3
   274ee:	0018      	movs	r0, r3
   274f0:	4b87      	ldr	r3, [pc, #540]	; (27710 <system_clock_init+0x260>)
   274f2:	4798      	blx	r3
   274f4:	2006      	movs	r0, #6
   274f6:	4b87      	ldr	r3, [pc, #540]	; (27714 <system_clock_init+0x264>)
   274f8:	4798      	blx	r3
   274fa:	4b87      	ldr	r3, [pc, #540]	; (27718 <system_clock_init+0x268>)
   274fc:	4798      	blx	r3
   274fe:	2360      	movs	r3, #96	; 0x60
   27500:	18fb      	adds	r3, r7, r3
   27502:	0018      	movs	r0, r3
   27504:	4b85      	ldr	r3, [pc, #532]	; (2771c <system_clock_init+0x26c>)
   27506:	4798      	blx	r3
   27508:	2360      	movs	r3, #96	; 0x60
   2750a:	18fb      	adds	r3, r7, r3
   2750c:	2206      	movs	r2, #6
   2750e:	701a      	strb	r2, [r3, #0]
   27510:	2360      	movs	r3, #96	; 0x60
   27512:	18fb      	adds	r3, r7, r3
   27514:	2208      	movs	r2, #8
   27516:	605a      	str	r2, [r3, #4]
   27518:	2360      	movs	r3, #96	; 0x60
   2751a:	18fb      	adds	r3, r7, r3
   2751c:	2200      	movs	r2, #0
   2751e:	721a      	strb	r2, [r3, #8]
   27520:	2360      	movs	r3, #96	; 0x60
   27522:	18fb      	adds	r3, r7, r3
   27524:	2200      	movs	r2, #0
   27526:	725a      	strb	r2, [r3, #9]
   27528:	2360      	movs	r3, #96	; 0x60
   2752a:	18fb      	adds	r3, r7, r3
   2752c:	0019      	movs	r1, r3
   2752e:	2001      	movs	r0, #1
   27530:	4b7b      	ldr	r3, [pc, #492]	; (27720 <system_clock_init+0x270>)
   27532:	4798      	blx	r3
   27534:	2001      	movs	r0, #1
   27536:	4b7b      	ldr	r3, [pc, #492]	; (27724 <system_clock_init+0x274>)
   27538:	4798      	blx	r3
   2753a:	2354      	movs	r3, #84	; 0x54
   2753c:	18fb      	adds	r3, r7, r3
   2753e:	0018      	movs	r0, r3
   27540:	4b76      	ldr	r3, [pc, #472]	; (2771c <system_clock_init+0x26c>)
   27542:	4798      	blx	r3
   27544:	2354      	movs	r3, #84	; 0x54
   27546:	18fb      	adds	r3, r7, r3
   27548:	2203      	movs	r2, #3
   2754a:	701a      	strb	r2, [r3, #0]
   2754c:	2354      	movs	r3, #84	; 0x54
   2754e:	18fb      	adds	r3, r7, r3
   27550:	2201      	movs	r2, #1
   27552:	605a      	str	r2, [r3, #4]
   27554:	2354      	movs	r3, #84	; 0x54
   27556:	18fb      	adds	r3, r7, r3
   27558:	2201      	movs	r2, #1
   2755a:	721a      	strb	r2, [r3, #8]
   2755c:	2354      	movs	r3, #84	; 0x54
   2755e:	18fb      	adds	r3, r7, r3
   27560:	2200      	movs	r2, #0
   27562:	725a      	strb	r2, [r3, #9]
   27564:	2354      	movs	r3, #84	; 0x54
   27566:	18fb      	adds	r3, r7, r3
   27568:	0019      	movs	r1, r3
   2756a:	2002      	movs	r0, #2
   2756c:	4b6c      	ldr	r3, [pc, #432]	; (27720 <system_clock_init+0x270>)
   2756e:	4798      	blx	r3
   27570:	2002      	movs	r0, #2
   27572:	4b6c      	ldr	r3, [pc, #432]	; (27724 <system_clock_init+0x274>)
   27574:	4798      	blx	r3
   27576:	233c      	movs	r3, #60	; 0x3c
   27578:	18fb      	adds	r3, r7, r3
   2757a:	0018      	movs	r0, r3
   2757c:	4b67      	ldr	r3, [pc, #412]	; (2771c <system_clock_init+0x26c>)
   2757e:	4798      	blx	r3
   27580:	233c      	movs	r3, #60	; 0x3c
   27582:	18fb      	adds	r3, r7, r3
   27584:	2203      	movs	r2, #3
   27586:	701a      	strb	r2, [r3, #0]
   27588:	233c      	movs	r3, #60	; 0x3c
   2758a:	18fb      	adds	r3, r7, r3
   2758c:	2220      	movs	r2, #32
   2758e:	605a      	str	r2, [r3, #4]
   27590:	233c      	movs	r3, #60	; 0x3c
   27592:	18fb      	adds	r3, r7, r3
   27594:	2200      	movs	r2, #0
   27596:	721a      	strb	r2, [r3, #8]
   27598:	233c      	movs	r3, #60	; 0x3c
   2759a:	18fb      	adds	r3, r7, r3
   2759c:	2200      	movs	r2, #0
   2759e:	725a      	strb	r2, [r3, #9]
   275a0:	233c      	movs	r3, #60	; 0x3c
   275a2:	18fb      	adds	r3, r7, r3
   275a4:	0019      	movs	r1, r3
   275a6:	2004      	movs	r0, #4
   275a8:	4b5d      	ldr	r3, [pc, #372]	; (27720 <system_clock_init+0x270>)
   275aa:	4798      	blx	r3
   275ac:	2004      	movs	r0, #4
   275ae:	4b5d      	ldr	r3, [pc, #372]	; (27724 <system_clock_init+0x274>)
   275b0:	4798      	blx	r3
   275b2:	2330      	movs	r3, #48	; 0x30
   275b4:	18fb      	adds	r3, r7, r3
   275b6:	0018      	movs	r0, r3
   275b8:	4b58      	ldr	r3, [pc, #352]	; (2771c <system_clock_init+0x26c>)
   275ba:	4798      	blx	r3
   275bc:	2330      	movs	r3, #48	; 0x30
   275be:	18fb      	adds	r3, r7, r3
   275c0:	2206      	movs	r2, #6
   275c2:	701a      	strb	r2, [r3, #0]
   275c4:	2330      	movs	r3, #48	; 0x30
   275c6:	18fb      	adds	r3, r7, r3
   275c8:	2201      	movs	r2, #1
   275ca:	605a      	str	r2, [r3, #4]
   275cc:	2330      	movs	r3, #48	; 0x30
   275ce:	18fb      	adds	r3, r7, r3
   275d0:	2200      	movs	r2, #0
   275d2:	721a      	strb	r2, [r3, #8]
   275d4:	2330      	movs	r3, #48	; 0x30
   275d6:	18fb      	adds	r3, r7, r3
   275d8:	2200      	movs	r2, #0
   275da:	725a      	strb	r2, [r3, #9]
   275dc:	2330      	movs	r3, #48	; 0x30
   275de:	18fb      	adds	r3, r7, r3
   275e0:	0019      	movs	r1, r3
   275e2:	2005      	movs	r0, #5
   275e4:	4b4e      	ldr	r3, [pc, #312]	; (27720 <system_clock_init+0x270>)
   275e6:	4798      	blx	r3
   275e8:	2005      	movs	r0, #5
   275ea:	4b4e      	ldr	r3, [pc, #312]	; (27724 <system_clock_init+0x274>)
   275ec:	4798      	blx	r3
   275ee:	2390      	movs	r3, #144	; 0x90
   275f0:	18fb      	adds	r3, r7, r3
   275f2:	0018      	movs	r0, r3
   275f4:	4b4c      	ldr	r3, [pc, #304]	; (27728 <system_clock_init+0x278>)
   275f6:	4798      	blx	r3
   275f8:	2390      	movs	r3, #144	; 0x90
   275fa:	18fb      	adds	r3, r7, r3
   275fc:	2201      	movs	r2, #1
   275fe:	701a      	strb	r2, [r3, #0]
   27600:	2390      	movs	r3, #144	; 0x90
   27602:	18fb      	adds	r3, r7, r3
   27604:	0019      	movs	r1, r3
   27606:	2001      	movs	r0, #1
   27608:	4b48      	ldr	r3, [pc, #288]	; (2772c <system_clock_init+0x27c>)
   2760a:	4798      	blx	r3
   2760c:	2001      	movs	r0, #1
   2760e:	4b48      	ldr	r3, [pc, #288]	; (27730 <system_clock_init+0x280>)
   27610:	4798      	blx	r3
   27612:	2378      	movs	r3, #120	; 0x78
   27614:	18fb      	adds	r3, r7, r3
   27616:	0018      	movs	r0, r3
   27618:	4b46      	ldr	r3, [pc, #280]	; (27734 <system_clock_init+0x284>)
   2761a:	4798      	blx	r3
   2761c:	2378      	movs	r3, #120	; 0x78
   2761e:	18fb      	adds	r3, r7, r3
   27620:	2200      	movs	r2, #0
   27622:	701a      	strb	r2, [r3, #0]
   27624:	2378      	movs	r3, #120	; 0x78
   27626:	18fb      	adds	r3, r7, r3
   27628:	2200      	movs	r2, #0
   2762a:	705a      	strb	r2, [r3, #1]
   2762c:	2378      	movs	r3, #120	; 0x78
   2762e:	18fb      	adds	r3, r7, r3
   27630:	2200      	movs	r2, #0
   27632:	709a      	strb	r2, [r3, #2]
   27634:	2378      	movs	r3, #120	; 0x78
   27636:	18fb      	adds	r3, r7, r3
   27638:	2200      	movs	r2, #0
   2763a:	70da      	strb	r2, [r3, #3]
   2763c:	2378      	movs	r3, #120	; 0x78
   2763e:	18fb      	adds	r3, r7, r3
   27640:	2200      	movs	r2, #0
   27642:	711a      	strb	r2, [r3, #4]
   27644:	2378      	movs	r3, #120	; 0x78
   27646:	18fb      	adds	r3, r7, r3
   27648:	2200      	movs	r2, #0
   2764a:	749a      	strb	r2, [r3, #18]
   2764c:	2378      	movs	r3, #120	; 0x78
   2764e:	18fb      	adds	r3, r7, r3
   27650:	2200      	movs	r2, #0
   27652:	74da      	strb	r2, [r3, #19]
   27654:	2378      	movs	r3, #120	; 0x78
   27656:	18fb      	adds	r3, r7, r3
   27658:	2202      	movs	r2, #2
   2765a:	751a      	strb	r2, [r3, #20]
   2765c:	2378      	movs	r3, #120	; 0x78
   2765e:	18fb      	adds	r3, r7, r3
   27660:	4a35      	ldr	r2, [pc, #212]	; (27738 <system_clock_init+0x288>)
   27662:	60da      	str	r2, [r3, #12]
   27664:	2378      	movs	r3, #120	; 0x78
   27666:	18fb      	adds	r3, r7, r3
   27668:	2201      	movs	r2, #1
   2766a:	821a      	strh	r2, [r3, #16]
   2766c:	2378      	movs	r3, #120	; 0x78
   2766e:	18fb      	adds	r3, r7, r3
   27670:	4a32      	ldr	r2, [pc, #200]	; (2773c <system_clock_init+0x28c>)
   27672:	609a      	str	r2, [r3, #8]
   27674:	2378      	movs	r3, #120	; 0x78
   27676:	18fb      	adds	r3, r7, r3
   27678:	0018      	movs	r0, r3
   2767a:	4b31      	ldr	r3, [pc, #196]	; (27740 <system_clock_init+0x290>)
   2767c:	4798      	blx	r3
   2767e:	2008      	movs	r0, #8
   27680:	4b24      	ldr	r3, [pc, #144]	; (27714 <system_clock_init+0x264>)
   27682:	4798      	blx	r3
   27684:	46c0      	nop			; (mov r8, r8)
   27686:	2008      	movs	r0, #8
   27688:	4b2e      	ldr	r3, [pc, #184]	; (27744 <system_clock_init+0x294>)
   2768a:	4798      	blx	r3
   2768c:	0003      	movs	r3, r0
   2768e:	001a      	movs	r2, r3
   27690:	2301      	movs	r3, #1
   27692:	4053      	eors	r3, r2
   27694:	b2db      	uxtb	r3, r3
   27696:	2b00      	cmp	r3, #0
   27698:	d1f5      	bne.n	27686 <system_clock_init+0x1d6>
   2769a:	4919      	ldr	r1, [pc, #100]	; (27700 <system_clock_init+0x250>)
   2769c:	2244      	movs	r2, #68	; 0x44
   2769e:	5c8b      	ldrb	r3, [r1, r2]
   276a0:	2080      	movs	r0, #128	; 0x80
   276a2:	4240      	negs	r0, r0
   276a4:	4303      	orrs	r3, r0
   276a6:	548b      	strb	r3, [r1, r2]
   276a8:	2000      	movs	r0, #0
   276aa:	4b27      	ldr	r3, [pc, #156]	; (27748 <system_clock_init+0x298>)
   276ac:	4798      	blx	r3
   276ae:	2100      	movs	r1, #0
   276b0:	2000      	movs	r0, #0
   276b2:	4b26      	ldr	r3, [pc, #152]	; (2774c <system_clock_init+0x29c>)
   276b4:	4798      	blx	r3
   276b6:	2100      	movs	r1, #0
   276b8:	2001      	movs	r0, #1
   276ba:	4b24      	ldr	r3, [pc, #144]	; (2774c <system_clock_init+0x29c>)
   276bc:	4798      	blx	r3
   276be:	2100      	movs	r1, #0
   276c0:	2002      	movs	r0, #2
   276c2:	4b22      	ldr	r3, [pc, #136]	; (2774c <system_clock_init+0x29c>)
   276c4:	4798      	blx	r3
   276c6:	003b      	movs	r3, r7
   276c8:	0018      	movs	r0, r3
   276ca:	4b14      	ldr	r3, [pc, #80]	; (2771c <system_clock_init+0x26c>)
   276cc:	4798      	blx	r3
   276ce:	003b      	movs	r3, r7
   276d0:	2208      	movs	r2, #8
   276d2:	701a      	strb	r2, [r3, #0]
   276d4:	003b      	movs	r3, r7
   276d6:	2201      	movs	r2, #1
   276d8:	605a      	str	r2, [r3, #4]
   276da:	003b      	movs	r3, r7
   276dc:	2200      	movs	r2, #0
   276de:	721a      	strb	r2, [r3, #8]
   276e0:	003b      	movs	r3, r7
   276e2:	2201      	movs	r2, #1
   276e4:	725a      	strb	r2, [r3, #9]
   276e6:	003b      	movs	r3, r7
   276e8:	0019      	movs	r1, r3
   276ea:	2000      	movs	r0, #0
   276ec:	4b0c      	ldr	r3, [pc, #48]	; (27720 <system_clock_init+0x270>)
   276ee:	4798      	blx	r3
   276f0:	2000      	movs	r0, #0
   276f2:	4b0c      	ldr	r3, [pc, #48]	; (27724 <system_clock_init+0x274>)
   276f4:	4798      	blx	r3
   276f6:	46c0      	nop			; (mov r8, r8)
   276f8:	46bd      	mov	sp, r7
   276fa:	b026      	add	sp, #152	; 0x98
   276fc:	bd80      	pop	{r7, pc}
   276fe:	46c0      	nop			; (mov r8, r8)
   27700:	40000800 	.word	0x40000800
   27704:	00027071 	.word	0x00027071
   27708:	00027479 	.word	0x00027479
   2770c:	00026f81 	.word	0x00026f81
   27710:	000271c5 	.word	0x000271c5
   27714:	00027349 	.word	0x00027349
   27718:	000277f5 	.word	0x000277f5
   2771c:	00026f3d 	.word	0x00026f3d
   27720:	00027825 	.word	0x00027825
   27724:	00027949 	.word	0x00027949
   27728:	00026f6b 	.word	0x00026f6b
   2772c:	00027a7d 	.word	0x00027a7d
   27730:	00027ac1 	.word	0x00027ac1
   27734:	00027019 	.word	0x00027019
   27738:	000f4240 	.word	0x000f4240
   2773c:	02dc6c00 	.word	0x02dc6c00
   27740:	0002723d 	.word	0x0002723d
   27744:	000273f5 	.word	0x000273f5
   27748:	00026fa5 	.word	0x00026fa5
   2774c:	00026fc5 	.word	0x00026fc5

00027750 <system_apb_clock_set_mask>:
   27750:	b580      	push	{r7, lr}
   27752:	b082      	sub	sp, #8
   27754:	af00      	add	r7, sp, #0
   27756:	0002      	movs	r2, r0
   27758:	6039      	str	r1, [r7, #0]
   2775a:	1dfb      	adds	r3, r7, #7
   2775c:	701a      	strb	r2, [r3, #0]
   2775e:	1dfb      	adds	r3, r7, #7
   27760:	781b      	ldrb	r3, [r3, #0]
   27762:	2b01      	cmp	r3, #1
   27764:	d00a      	beq.n	2777c <system_apb_clock_set_mask+0x2c>
   27766:	2b02      	cmp	r3, #2
   27768:	d00f      	beq.n	2778a <system_apb_clock_set_mask+0x3a>
   2776a:	2b00      	cmp	r3, #0
   2776c:	d114      	bne.n	27798 <system_apb_clock_set_mask+0x48>
   2776e:	4b0e      	ldr	r3, [pc, #56]	; (277a8 <system_apb_clock_set_mask+0x58>)
   27770:	4a0d      	ldr	r2, [pc, #52]	; (277a8 <system_apb_clock_set_mask+0x58>)
   27772:	6991      	ldr	r1, [r2, #24]
   27774:	683a      	ldr	r2, [r7, #0]
   27776:	430a      	orrs	r2, r1
   27778:	619a      	str	r2, [r3, #24]
   2777a:	e00f      	b.n	2779c <system_apb_clock_set_mask+0x4c>
   2777c:	4b0a      	ldr	r3, [pc, #40]	; (277a8 <system_apb_clock_set_mask+0x58>)
   2777e:	4a0a      	ldr	r2, [pc, #40]	; (277a8 <system_apb_clock_set_mask+0x58>)
   27780:	69d1      	ldr	r1, [r2, #28]
   27782:	683a      	ldr	r2, [r7, #0]
   27784:	430a      	orrs	r2, r1
   27786:	61da      	str	r2, [r3, #28]
   27788:	e008      	b.n	2779c <system_apb_clock_set_mask+0x4c>
   2778a:	4b07      	ldr	r3, [pc, #28]	; (277a8 <system_apb_clock_set_mask+0x58>)
   2778c:	4a06      	ldr	r2, [pc, #24]	; (277a8 <system_apb_clock_set_mask+0x58>)
   2778e:	6a11      	ldr	r1, [r2, #32]
   27790:	683a      	ldr	r2, [r7, #0]
   27792:	430a      	orrs	r2, r1
   27794:	621a      	str	r2, [r3, #32]
   27796:	e001      	b.n	2779c <system_apb_clock_set_mask+0x4c>
   27798:	2317      	movs	r3, #23
   2779a:	e000      	b.n	2779e <system_apb_clock_set_mask+0x4e>
   2779c:	2300      	movs	r3, #0
   2779e:	0018      	movs	r0, r3
   277a0:	46bd      	mov	sp, r7
   277a2:	b002      	add	sp, #8
   277a4:	bd80      	pop	{r7, pc}
   277a6:	46c0      	nop			; (mov r8, r8)
   277a8:	40000400 	.word	0x40000400

000277ac <system_interrupt_enter_critical_section>:
   277ac:	b580      	push	{r7, lr}
   277ae:	af00      	add	r7, sp, #0
   277b0:	4b02      	ldr	r3, [pc, #8]	; (277bc <system_interrupt_enter_critical_section+0x10>)
   277b2:	4798      	blx	r3
   277b4:	46c0      	nop			; (mov r8, r8)
   277b6:	46bd      	mov	sp, r7
   277b8:	bd80      	pop	{r7, pc}
   277ba:	46c0      	nop			; (mov r8, r8)
   277bc:	00023de9 	.word	0x00023de9

000277c0 <system_interrupt_leave_critical_section>:
   277c0:	b580      	push	{r7, lr}
   277c2:	af00      	add	r7, sp, #0
   277c4:	4b02      	ldr	r3, [pc, #8]	; (277d0 <system_interrupt_leave_critical_section+0x10>)
   277c6:	4798      	blx	r3
   277c8:	46c0      	nop			; (mov r8, r8)
   277ca:	46bd      	mov	sp, r7
   277cc:	bd80      	pop	{r7, pc}
   277ce:	46c0      	nop			; (mov r8, r8)
   277d0:	00023e3d 	.word	0x00023e3d

000277d4 <system_gclk_is_syncing>:
   277d4:	b580      	push	{r7, lr}
   277d6:	af00      	add	r7, sp, #0
   277d8:	4b05      	ldr	r3, [pc, #20]	; (277f0 <system_gclk_is_syncing+0x1c>)
   277da:	785b      	ldrb	r3, [r3, #1]
   277dc:	b2db      	uxtb	r3, r3
   277de:	b25b      	sxtb	r3, r3
   277e0:	2b00      	cmp	r3, #0
   277e2:	da01      	bge.n	277e8 <system_gclk_is_syncing+0x14>
   277e4:	2301      	movs	r3, #1
   277e6:	e000      	b.n	277ea <system_gclk_is_syncing+0x16>
   277e8:	2300      	movs	r3, #0
   277ea:	0018      	movs	r0, r3
   277ec:	46bd      	mov	sp, r7
   277ee:	bd80      	pop	{r7, pc}
   277f0:	40000c00 	.word	0x40000c00

000277f4 <system_gclk_init>:
   277f4:	b580      	push	{r7, lr}
   277f6:	af00      	add	r7, sp, #0
   277f8:	2108      	movs	r1, #8
   277fa:	2000      	movs	r0, #0
   277fc:	4b07      	ldr	r3, [pc, #28]	; (2781c <system_gclk_init+0x28>)
   277fe:	4798      	blx	r3
   27800:	4b07      	ldr	r3, [pc, #28]	; (27820 <system_gclk_init+0x2c>)
   27802:	2201      	movs	r2, #1
   27804:	701a      	strb	r2, [r3, #0]
   27806:	46c0      	nop			; (mov r8, r8)
   27808:	4b05      	ldr	r3, [pc, #20]	; (27820 <system_gclk_init+0x2c>)
   2780a:	781b      	ldrb	r3, [r3, #0]
   2780c:	b2db      	uxtb	r3, r3
   2780e:	001a      	movs	r2, r3
   27810:	2301      	movs	r3, #1
   27812:	4013      	ands	r3, r2
   27814:	d1f8      	bne.n	27808 <system_gclk_init+0x14>
   27816:	46c0      	nop			; (mov r8, r8)
   27818:	46bd      	mov	sp, r7
   2781a:	bd80      	pop	{r7, pc}
   2781c:	00027751 	.word	0x00027751
   27820:	40000c00 	.word	0x40000c00

00027824 <system_gclk_gen_set_config>:
   27824:	b580      	push	{r7, lr}
   27826:	b086      	sub	sp, #24
   27828:	af00      	add	r7, sp, #0
   2782a:	0002      	movs	r2, r0
   2782c:	6039      	str	r1, [r7, #0]
   2782e:	1dfb      	adds	r3, r7, #7
   27830:	701a      	strb	r2, [r3, #0]
   27832:	1dfb      	adds	r3, r7, #7
   27834:	781b      	ldrb	r3, [r3, #0]
   27836:	617b      	str	r3, [r7, #20]
   27838:	1dfb      	adds	r3, r7, #7
   2783a:	781b      	ldrb	r3, [r3, #0]
   2783c:	613b      	str	r3, [r7, #16]
   2783e:	683b      	ldr	r3, [r7, #0]
   27840:	781b      	ldrb	r3, [r3, #0]
   27842:	021b      	lsls	r3, r3, #8
   27844:	001a      	movs	r2, r3
   27846:	697b      	ldr	r3, [r7, #20]
   27848:	4313      	orrs	r3, r2
   2784a:	617b      	str	r3, [r7, #20]
   2784c:	683b      	ldr	r3, [r7, #0]
   2784e:	785b      	ldrb	r3, [r3, #1]
   27850:	2b00      	cmp	r3, #0
   27852:	d004      	beq.n	2785e <system_gclk_gen_set_config+0x3a>
   27854:	697b      	ldr	r3, [r7, #20]
   27856:	2280      	movs	r2, #128	; 0x80
   27858:	02d2      	lsls	r2, r2, #11
   2785a:	4313      	orrs	r3, r2
   2785c:	617b      	str	r3, [r7, #20]
   2785e:	683b      	ldr	r3, [r7, #0]
   27860:	7a5b      	ldrb	r3, [r3, #9]
   27862:	2b00      	cmp	r3, #0
   27864:	d004      	beq.n	27870 <system_gclk_gen_set_config+0x4c>
   27866:	697b      	ldr	r3, [r7, #20]
   27868:	2280      	movs	r2, #128	; 0x80
   2786a:	0312      	lsls	r2, r2, #12
   2786c:	4313      	orrs	r3, r2
   2786e:	617b      	str	r3, [r7, #20]
   27870:	683b      	ldr	r3, [r7, #0]
   27872:	685b      	ldr	r3, [r3, #4]
   27874:	2b01      	cmp	r3, #1
   27876:	d92c      	bls.n	278d2 <system_gclk_gen_set_config+0xae>
   27878:	683b      	ldr	r3, [r7, #0]
   2787a:	685a      	ldr	r2, [r3, #4]
   2787c:	683b      	ldr	r3, [r7, #0]
   2787e:	685b      	ldr	r3, [r3, #4]
   27880:	3b01      	subs	r3, #1
   27882:	4013      	ands	r3, r2
   27884:	d11a      	bne.n	278bc <system_gclk_gen_set_config+0x98>
   27886:	2300      	movs	r3, #0
   27888:	60fb      	str	r3, [r7, #12]
   2788a:	2302      	movs	r3, #2
   2788c:	60bb      	str	r3, [r7, #8]
   2788e:	e005      	b.n	2789c <system_gclk_gen_set_config+0x78>
   27890:	68fb      	ldr	r3, [r7, #12]
   27892:	3301      	adds	r3, #1
   27894:	60fb      	str	r3, [r7, #12]
   27896:	68bb      	ldr	r3, [r7, #8]
   27898:	005b      	lsls	r3, r3, #1
   2789a:	60bb      	str	r3, [r7, #8]
   2789c:	683b      	ldr	r3, [r7, #0]
   2789e:	685a      	ldr	r2, [r3, #4]
   278a0:	68bb      	ldr	r3, [r7, #8]
   278a2:	429a      	cmp	r2, r3
   278a4:	d8f4      	bhi.n	27890 <system_gclk_gen_set_config+0x6c>
   278a6:	68fb      	ldr	r3, [r7, #12]
   278a8:	021b      	lsls	r3, r3, #8
   278aa:	693a      	ldr	r2, [r7, #16]
   278ac:	4313      	orrs	r3, r2
   278ae:	613b      	str	r3, [r7, #16]
   278b0:	697b      	ldr	r3, [r7, #20]
   278b2:	2280      	movs	r2, #128	; 0x80
   278b4:	0352      	lsls	r2, r2, #13
   278b6:	4313      	orrs	r3, r2
   278b8:	617b      	str	r3, [r7, #20]
   278ba:	e00a      	b.n	278d2 <system_gclk_gen_set_config+0xae>
   278bc:	683b      	ldr	r3, [r7, #0]
   278be:	685b      	ldr	r3, [r3, #4]
   278c0:	021b      	lsls	r3, r3, #8
   278c2:	693a      	ldr	r2, [r7, #16]
   278c4:	4313      	orrs	r3, r2
   278c6:	613b      	str	r3, [r7, #16]
   278c8:	697b      	ldr	r3, [r7, #20]
   278ca:	2280      	movs	r2, #128	; 0x80
   278cc:	0292      	lsls	r2, r2, #10
   278ce:	4313      	orrs	r3, r2
   278d0:	617b      	str	r3, [r7, #20]
   278d2:	683b      	ldr	r3, [r7, #0]
   278d4:	7a1b      	ldrb	r3, [r3, #8]
   278d6:	2b00      	cmp	r3, #0
   278d8:	d004      	beq.n	278e4 <system_gclk_gen_set_config+0xc0>
   278da:	697b      	ldr	r3, [r7, #20]
   278dc:	2280      	movs	r2, #128	; 0x80
   278de:	0392      	lsls	r2, r2, #14
   278e0:	4313      	orrs	r3, r2
   278e2:	617b      	str	r3, [r7, #20]
   278e4:	46c0      	nop			; (mov r8, r8)
   278e6:	4b13      	ldr	r3, [pc, #76]	; (27934 <system_gclk_gen_set_config+0x110>)
   278e8:	4798      	blx	r3
   278ea:	1e03      	subs	r3, r0, #0
   278ec:	d1fb      	bne.n	278e6 <system_gclk_gen_set_config+0xc2>
   278ee:	4b12      	ldr	r3, [pc, #72]	; (27938 <system_gclk_gen_set_config+0x114>)
   278f0:	4798      	blx	r3
   278f2:	4a12      	ldr	r2, [pc, #72]	; (2793c <system_gclk_gen_set_config+0x118>)
   278f4:	1dfb      	adds	r3, r7, #7
   278f6:	781b      	ldrb	r3, [r3, #0]
   278f8:	7013      	strb	r3, [r2, #0]
   278fa:	46c0      	nop			; (mov r8, r8)
   278fc:	4b0d      	ldr	r3, [pc, #52]	; (27934 <system_gclk_gen_set_config+0x110>)
   278fe:	4798      	blx	r3
   27900:	1e03      	subs	r3, r0, #0
   27902:	d1fb      	bne.n	278fc <system_gclk_gen_set_config+0xd8>
   27904:	4b0e      	ldr	r3, [pc, #56]	; (27940 <system_gclk_gen_set_config+0x11c>)
   27906:	693a      	ldr	r2, [r7, #16]
   27908:	609a      	str	r2, [r3, #8]
   2790a:	46c0      	nop			; (mov r8, r8)
   2790c:	4b09      	ldr	r3, [pc, #36]	; (27934 <system_gclk_gen_set_config+0x110>)
   2790e:	4798      	blx	r3
   27910:	1e03      	subs	r3, r0, #0
   27912:	d1fb      	bne.n	2790c <system_gclk_gen_set_config+0xe8>
   27914:	4b0a      	ldr	r3, [pc, #40]	; (27940 <system_gclk_gen_set_config+0x11c>)
   27916:	4a0a      	ldr	r2, [pc, #40]	; (27940 <system_gclk_gen_set_config+0x11c>)
   27918:	6851      	ldr	r1, [r2, #4]
   2791a:	2280      	movs	r2, #128	; 0x80
   2791c:	0252      	lsls	r2, r2, #9
   2791e:	4011      	ands	r1, r2
   27920:	697a      	ldr	r2, [r7, #20]
   27922:	430a      	orrs	r2, r1
   27924:	605a      	str	r2, [r3, #4]
   27926:	4b07      	ldr	r3, [pc, #28]	; (27944 <system_gclk_gen_set_config+0x120>)
   27928:	4798      	blx	r3
   2792a:	46c0      	nop			; (mov r8, r8)
   2792c:	46bd      	mov	sp, r7
   2792e:	b006      	add	sp, #24
   27930:	bd80      	pop	{r7, pc}
   27932:	46c0      	nop			; (mov r8, r8)
   27934:	000277d5 	.word	0x000277d5
   27938:	000277ad 	.word	0x000277ad
   2793c:	40000c08 	.word	0x40000c08
   27940:	40000c00 	.word	0x40000c00
   27944:	000277c1 	.word	0x000277c1

00027948 <system_gclk_gen_enable>:
   27948:	b580      	push	{r7, lr}
   2794a:	b082      	sub	sp, #8
   2794c:	af00      	add	r7, sp, #0
   2794e:	0002      	movs	r2, r0
   27950:	1dfb      	adds	r3, r7, #7
   27952:	701a      	strb	r2, [r3, #0]
   27954:	46c0      	nop			; (mov r8, r8)
   27956:	4b0e      	ldr	r3, [pc, #56]	; (27990 <system_gclk_gen_enable+0x48>)
   27958:	4798      	blx	r3
   2795a:	1e03      	subs	r3, r0, #0
   2795c:	d1fb      	bne.n	27956 <system_gclk_gen_enable+0xe>
   2795e:	4b0d      	ldr	r3, [pc, #52]	; (27994 <system_gclk_gen_enable+0x4c>)
   27960:	4798      	blx	r3
   27962:	4a0d      	ldr	r2, [pc, #52]	; (27998 <system_gclk_gen_enable+0x50>)
   27964:	1dfb      	adds	r3, r7, #7
   27966:	781b      	ldrb	r3, [r3, #0]
   27968:	7013      	strb	r3, [r2, #0]
   2796a:	46c0      	nop			; (mov r8, r8)
   2796c:	4b08      	ldr	r3, [pc, #32]	; (27990 <system_gclk_gen_enable+0x48>)
   2796e:	4798      	blx	r3
   27970:	1e03      	subs	r3, r0, #0
   27972:	d1fb      	bne.n	2796c <system_gclk_gen_enable+0x24>
   27974:	4b09      	ldr	r3, [pc, #36]	; (2799c <system_gclk_gen_enable+0x54>)
   27976:	4a09      	ldr	r2, [pc, #36]	; (2799c <system_gclk_gen_enable+0x54>)
   27978:	6852      	ldr	r2, [r2, #4]
   2797a:	2180      	movs	r1, #128	; 0x80
   2797c:	0249      	lsls	r1, r1, #9
   2797e:	430a      	orrs	r2, r1
   27980:	605a      	str	r2, [r3, #4]
   27982:	4b07      	ldr	r3, [pc, #28]	; (279a0 <system_gclk_gen_enable+0x58>)
   27984:	4798      	blx	r3
   27986:	46c0      	nop			; (mov r8, r8)
   27988:	46bd      	mov	sp, r7
   2798a:	b002      	add	sp, #8
   2798c:	bd80      	pop	{r7, pc}
   2798e:	46c0      	nop			; (mov r8, r8)
   27990:	000277d5 	.word	0x000277d5
   27994:	000277ad 	.word	0x000277ad
   27998:	40000c04 	.word	0x40000c04
   2799c:	40000c00 	.word	0x40000c00
   279a0:	000277c1 	.word	0x000277c1

000279a4 <system_gclk_gen_get_hz>:
   279a4:	b580      	push	{r7, lr}
   279a6:	b086      	sub	sp, #24
   279a8:	af00      	add	r7, sp, #0
   279aa:	0002      	movs	r2, r0
   279ac:	1dfb      	adds	r3, r7, #7
   279ae:	701a      	strb	r2, [r3, #0]
   279b0:	46c0      	nop			; (mov r8, r8)
   279b2:	4b2a      	ldr	r3, [pc, #168]	; (27a5c <system_gclk_gen_get_hz+0xb8>)
   279b4:	4798      	blx	r3
   279b6:	1e03      	subs	r3, r0, #0
   279b8:	d1fb      	bne.n	279b2 <system_gclk_gen_get_hz+0xe>
   279ba:	4b29      	ldr	r3, [pc, #164]	; (27a60 <system_gclk_gen_get_hz+0xbc>)
   279bc:	4798      	blx	r3
   279be:	4a29      	ldr	r2, [pc, #164]	; (27a64 <system_gclk_gen_get_hz+0xc0>)
   279c0:	1dfb      	adds	r3, r7, #7
   279c2:	781b      	ldrb	r3, [r3, #0]
   279c4:	7013      	strb	r3, [r2, #0]
   279c6:	46c0      	nop			; (mov r8, r8)
   279c8:	4b24      	ldr	r3, [pc, #144]	; (27a5c <system_gclk_gen_get_hz+0xb8>)
   279ca:	4798      	blx	r3
   279cc:	1e03      	subs	r3, r0, #0
   279ce:	d1fb      	bne.n	279c8 <system_gclk_gen_get_hz+0x24>
   279d0:	4b25      	ldr	r3, [pc, #148]	; (27a68 <system_gclk_gen_get_hz+0xc4>)
   279d2:	685b      	ldr	r3, [r3, #4]
   279d4:	04db      	lsls	r3, r3, #19
   279d6:	0edb      	lsrs	r3, r3, #27
   279d8:	b2db      	uxtb	r3, r3
   279da:	0018      	movs	r0, r3
   279dc:	4b23      	ldr	r3, [pc, #140]	; (27a6c <system_gclk_gen_get_hz+0xc8>)
   279de:	4798      	blx	r3
   279e0:	0003      	movs	r3, r0
   279e2:	617b      	str	r3, [r7, #20]
   279e4:	4a1f      	ldr	r2, [pc, #124]	; (27a64 <system_gclk_gen_get_hz+0xc0>)
   279e6:	1dfb      	adds	r3, r7, #7
   279e8:	781b      	ldrb	r3, [r3, #0]
   279ea:	7013      	strb	r3, [r2, #0]
   279ec:	4b1e      	ldr	r3, [pc, #120]	; (27a68 <system_gclk_gen_get_hz+0xc4>)
   279ee:	685b      	ldr	r3, [r3, #4]
   279f0:	02db      	lsls	r3, r3, #11
   279f2:	0fdb      	lsrs	r3, r3, #31
   279f4:	b2da      	uxtb	r2, r3
   279f6:	2313      	movs	r3, #19
   279f8:	18fb      	adds	r3, r7, r3
   279fa:	701a      	strb	r2, [r3, #0]
   279fc:	4a1c      	ldr	r2, [pc, #112]	; (27a70 <system_gclk_gen_get_hz+0xcc>)
   279fe:	1dfb      	adds	r3, r7, #7
   27a00:	781b      	ldrb	r3, [r3, #0]
   27a02:	7013      	strb	r3, [r2, #0]
   27a04:	46c0      	nop			; (mov r8, r8)
   27a06:	4b15      	ldr	r3, [pc, #84]	; (27a5c <system_gclk_gen_get_hz+0xb8>)
   27a08:	4798      	blx	r3
   27a0a:	1e03      	subs	r3, r0, #0
   27a0c:	d1fb      	bne.n	27a06 <system_gclk_gen_get_hz+0x62>
   27a0e:	4b16      	ldr	r3, [pc, #88]	; (27a68 <system_gclk_gen_get_hz+0xc4>)
   27a10:	689b      	ldr	r3, [r3, #8]
   27a12:	021b      	lsls	r3, r3, #8
   27a14:	0c1b      	lsrs	r3, r3, #16
   27a16:	b29b      	uxth	r3, r3
   27a18:	60fb      	str	r3, [r7, #12]
   27a1a:	4b16      	ldr	r3, [pc, #88]	; (27a74 <system_gclk_gen_get_hz+0xd0>)
   27a1c:	4798      	blx	r3
   27a1e:	2313      	movs	r3, #19
   27a20:	18fb      	adds	r3, r7, r3
   27a22:	781b      	ldrb	r3, [r3, #0]
   27a24:	2b00      	cmp	r3, #0
   27a26:	d109      	bne.n	27a3c <system_gclk_gen_get_hz+0x98>
   27a28:	68fb      	ldr	r3, [r7, #12]
   27a2a:	2b01      	cmp	r3, #1
   27a2c:	d906      	bls.n	27a3c <system_gclk_gen_get_hz+0x98>
   27a2e:	4b12      	ldr	r3, [pc, #72]	; (27a78 <system_gclk_gen_get_hz+0xd4>)
   27a30:	68f9      	ldr	r1, [r7, #12]
   27a32:	6978      	ldr	r0, [r7, #20]
   27a34:	4798      	blx	r3
   27a36:	0003      	movs	r3, r0
   27a38:	617b      	str	r3, [r7, #20]
   27a3a:	e00a      	b.n	27a52 <system_gclk_gen_get_hz+0xae>
   27a3c:	2313      	movs	r3, #19
   27a3e:	18fb      	adds	r3, r7, r3
   27a40:	781b      	ldrb	r3, [r3, #0]
   27a42:	2b00      	cmp	r3, #0
   27a44:	d005      	beq.n	27a52 <system_gclk_gen_get_hz+0xae>
   27a46:	68fb      	ldr	r3, [r7, #12]
   27a48:	3301      	adds	r3, #1
   27a4a:	697a      	ldr	r2, [r7, #20]
   27a4c:	40da      	lsrs	r2, r3
   27a4e:	0013      	movs	r3, r2
   27a50:	617b      	str	r3, [r7, #20]
   27a52:	697b      	ldr	r3, [r7, #20]
   27a54:	0018      	movs	r0, r3
   27a56:	46bd      	mov	sp, r7
   27a58:	b006      	add	sp, #24
   27a5a:	bd80      	pop	{r7, pc}
   27a5c:	000277d5 	.word	0x000277d5
   27a60:	000277ad 	.word	0x000277ad
   27a64:	40000c04 	.word	0x40000c04
   27a68:	40000c00 	.word	0x40000c00
   27a6c:	00027105 	.word	0x00027105
   27a70:	40000c08 	.word	0x40000c08
   27a74:	000277c1 	.word	0x000277c1
   27a78:	000304e9 	.word	0x000304e9

00027a7c <system_gclk_chan_set_config>:
   27a7c:	b580      	push	{r7, lr}
   27a7e:	b084      	sub	sp, #16
   27a80:	af00      	add	r7, sp, #0
   27a82:	0002      	movs	r2, r0
   27a84:	6039      	str	r1, [r7, #0]
   27a86:	1dfb      	adds	r3, r7, #7
   27a88:	701a      	strb	r2, [r3, #0]
   27a8a:	1dfb      	adds	r3, r7, #7
   27a8c:	781b      	ldrb	r3, [r3, #0]
   27a8e:	60fb      	str	r3, [r7, #12]
   27a90:	683b      	ldr	r3, [r7, #0]
   27a92:	781b      	ldrb	r3, [r3, #0]
   27a94:	021b      	lsls	r3, r3, #8
   27a96:	001a      	movs	r2, r3
   27a98:	68fb      	ldr	r3, [r7, #12]
   27a9a:	4313      	orrs	r3, r2
   27a9c:	60fb      	str	r3, [r7, #12]
   27a9e:	1dfb      	adds	r3, r7, #7
   27aa0:	781b      	ldrb	r3, [r3, #0]
   27aa2:	0018      	movs	r0, r3
   27aa4:	4b04      	ldr	r3, [pc, #16]	; (27ab8 <system_gclk_chan_set_config+0x3c>)
   27aa6:	4798      	blx	r3
   27aa8:	4b04      	ldr	r3, [pc, #16]	; (27abc <system_gclk_chan_set_config+0x40>)
   27aaa:	68fa      	ldr	r2, [r7, #12]
   27aac:	b292      	uxth	r2, r2
   27aae:	805a      	strh	r2, [r3, #2]
   27ab0:	46c0      	nop			; (mov r8, r8)
   27ab2:	46bd      	mov	sp, r7
   27ab4:	b004      	add	sp, #16
   27ab6:	bd80      	pop	{r7, pc}
   27ab8:	00027b09 	.word	0x00027b09
   27abc:	40000c00 	.word	0x40000c00

00027ac0 <system_gclk_chan_enable>:
   27ac0:	b580      	push	{r7, lr}
   27ac2:	b082      	sub	sp, #8
   27ac4:	af00      	add	r7, sp, #0
   27ac6:	0002      	movs	r2, r0
   27ac8:	1dfb      	adds	r3, r7, #7
   27aca:	701a      	strb	r2, [r3, #0]
   27acc:	4b0a      	ldr	r3, [pc, #40]	; (27af8 <system_gclk_chan_enable+0x38>)
   27ace:	4798      	blx	r3
   27ad0:	4a0a      	ldr	r2, [pc, #40]	; (27afc <system_gclk_chan_enable+0x3c>)
   27ad2:	1dfb      	adds	r3, r7, #7
   27ad4:	781b      	ldrb	r3, [r3, #0]
   27ad6:	7013      	strb	r3, [r2, #0]
   27ad8:	4909      	ldr	r1, [pc, #36]	; (27b00 <system_gclk_chan_enable+0x40>)
   27ada:	4b09      	ldr	r3, [pc, #36]	; (27b00 <system_gclk_chan_enable+0x40>)
   27adc:	885b      	ldrh	r3, [r3, #2]
   27ade:	b29b      	uxth	r3, r3
   27ae0:	2280      	movs	r2, #128	; 0x80
   27ae2:	01d2      	lsls	r2, r2, #7
   27ae4:	4313      	orrs	r3, r2
   27ae6:	b29b      	uxth	r3, r3
   27ae8:	804b      	strh	r3, [r1, #2]
   27aea:	4b06      	ldr	r3, [pc, #24]	; (27b04 <system_gclk_chan_enable+0x44>)
   27aec:	4798      	blx	r3
   27aee:	46c0      	nop			; (mov r8, r8)
   27af0:	46bd      	mov	sp, r7
   27af2:	b002      	add	sp, #8
   27af4:	bd80      	pop	{r7, pc}
   27af6:	46c0      	nop			; (mov r8, r8)
   27af8:	000277ad 	.word	0x000277ad
   27afc:	40000c02 	.word	0x40000c02
   27b00:	40000c00 	.word	0x40000c00
   27b04:	000277c1 	.word	0x000277c1

00027b08 <system_gclk_chan_disable>:
   27b08:	b580      	push	{r7, lr}
   27b0a:	b084      	sub	sp, #16
   27b0c:	af00      	add	r7, sp, #0
   27b0e:	0002      	movs	r2, r0
   27b10:	1dfb      	adds	r3, r7, #7
   27b12:	701a      	strb	r2, [r3, #0]
   27b14:	4b1c      	ldr	r3, [pc, #112]	; (27b88 <system_gclk_chan_disable+0x80>)
   27b16:	4798      	blx	r3
   27b18:	4a1c      	ldr	r2, [pc, #112]	; (27b8c <system_gclk_chan_disable+0x84>)
   27b1a:	1dfb      	adds	r3, r7, #7
   27b1c:	781b      	ldrb	r3, [r3, #0]
   27b1e:	7013      	strb	r3, [r2, #0]
   27b20:	4b1b      	ldr	r3, [pc, #108]	; (27b90 <system_gclk_chan_disable+0x88>)
   27b22:	885b      	ldrh	r3, [r3, #2]
   27b24:	051b      	lsls	r3, r3, #20
   27b26:	0f1b      	lsrs	r3, r3, #28
   27b28:	b2db      	uxtb	r3, r3
   27b2a:	60fb      	str	r3, [r7, #12]
   27b2c:	4a18      	ldr	r2, [pc, #96]	; (27b90 <system_gclk_chan_disable+0x88>)
   27b2e:	8853      	ldrh	r3, [r2, #2]
   27b30:	4918      	ldr	r1, [pc, #96]	; (27b94 <system_gclk_chan_disable+0x8c>)
   27b32:	400b      	ands	r3, r1
   27b34:	8053      	strh	r3, [r2, #2]
   27b36:	4a16      	ldr	r2, [pc, #88]	; (27b90 <system_gclk_chan_disable+0x88>)
   27b38:	4b15      	ldr	r3, [pc, #84]	; (27b90 <system_gclk_chan_disable+0x88>)
   27b3a:	885b      	ldrh	r3, [r3, #2]
   27b3c:	b29b      	uxth	r3, r3
   27b3e:	4916      	ldr	r1, [pc, #88]	; (27b98 <system_gclk_chan_disable+0x90>)
   27b40:	400b      	ands	r3, r1
   27b42:	b29b      	uxth	r3, r3
   27b44:	8053      	strh	r3, [r2, #2]
   27b46:	46c0      	nop			; (mov r8, r8)
   27b48:	4b11      	ldr	r3, [pc, #68]	; (27b90 <system_gclk_chan_disable+0x88>)
   27b4a:	885b      	ldrh	r3, [r3, #2]
   27b4c:	b29b      	uxth	r3, r3
   27b4e:	001a      	movs	r2, r3
   27b50:	2380      	movs	r3, #128	; 0x80
   27b52:	01db      	lsls	r3, r3, #7
   27b54:	4013      	ands	r3, r2
   27b56:	d1f7      	bne.n	27b48 <system_gclk_chan_disable+0x40>
   27b58:	4a0d      	ldr	r2, [pc, #52]	; (27b90 <system_gclk_chan_disable+0x88>)
   27b5a:	68fb      	ldr	r3, [r7, #12]
   27b5c:	b2db      	uxtb	r3, r3
   27b5e:	1c19      	adds	r1, r3, #0
   27b60:	230f      	movs	r3, #15
   27b62:	400b      	ands	r3, r1
   27b64:	b2d9      	uxtb	r1, r3
   27b66:	8853      	ldrh	r3, [r2, #2]
   27b68:	1c08      	adds	r0, r1, #0
   27b6a:	210f      	movs	r1, #15
   27b6c:	4001      	ands	r1, r0
   27b6e:	0208      	lsls	r0, r1, #8
   27b70:	4908      	ldr	r1, [pc, #32]	; (27b94 <system_gclk_chan_disable+0x8c>)
   27b72:	400b      	ands	r3, r1
   27b74:	1c19      	adds	r1, r3, #0
   27b76:	1c03      	adds	r3, r0, #0
   27b78:	430b      	orrs	r3, r1
   27b7a:	8053      	strh	r3, [r2, #2]
   27b7c:	4b07      	ldr	r3, [pc, #28]	; (27b9c <system_gclk_chan_disable+0x94>)
   27b7e:	4798      	blx	r3
   27b80:	46c0      	nop			; (mov r8, r8)
   27b82:	46bd      	mov	sp, r7
   27b84:	b004      	add	sp, #16
   27b86:	bd80      	pop	{r7, pc}
   27b88:	000277ad 	.word	0x000277ad
   27b8c:	40000c02 	.word	0x40000c02
   27b90:	40000c00 	.word	0x40000c00
   27b94:	fffff0ff 	.word	0xfffff0ff
   27b98:	ffffbfff 	.word	0xffffbfff
   27b9c:	000277c1 	.word	0x000277c1

00027ba0 <system_gclk_chan_get_hz>:
   27ba0:	b580      	push	{r7, lr}
   27ba2:	b084      	sub	sp, #16
   27ba4:	af00      	add	r7, sp, #0
   27ba6:	0002      	movs	r2, r0
   27ba8:	1dfb      	adds	r3, r7, #7
   27baa:	701a      	strb	r2, [r3, #0]
   27bac:	4b0d      	ldr	r3, [pc, #52]	; (27be4 <system_gclk_chan_get_hz+0x44>)
   27bae:	4798      	blx	r3
   27bb0:	4a0d      	ldr	r2, [pc, #52]	; (27be8 <system_gclk_chan_get_hz+0x48>)
   27bb2:	1dfb      	adds	r3, r7, #7
   27bb4:	781b      	ldrb	r3, [r3, #0]
   27bb6:	7013      	strb	r3, [r2, #0]
   27bb8:	4b0c      	ldr	r3, [pc, #48]	; (27bec <system_gclk_chan_get_hz+0x4c>)
   27bba:	885b      	ldrh	r3, [r3, #2]
   27bbc:	051b      	lsls	r3, r3, #20
   27bbe:	0f1b      	lsrs	r3, r3, #28
   27bc0:	b2da      	uxtb	r2, r3
   27bc2:	230f      	movs	r3, #15
   27bc4:	18fb      	adds	r3, r7, r3
   27bc6:	701a      	strb	r2, [r3, #0]
   27bc8:	4b09      	ldr	r3, [pc, #36]	; (27bf0 <system_gclk_chan_get_hz+0x50>)
   27bca:	4798      	blx	r3
   27bcc:	230f      	movs	r3, #15
   27bce:	18fb      	adds	r3, r7, r3
   27bd0:	781b      	ldrb	r3, [r3, #0]
   27bd2:	0018      	movs	r0, r3
   27bd4:	4b07      	ldr	r3, [pc, #28]	; (27bf4 <system_gclk_chan_get_hz+0x54>)
   27bd6:	4798      	blx	r3
   27bd8:	0003      	movs	r3, r0
   27bda:	0018      	movs	r0, r3
   27bdc:	46bd      	mov	sp, r7
   27bde:	b004      	add	sp, #16
   27be0:	bd80      	pop	{r7, pc}
   27be2:	46c0      	nop			; (mov r8, r8)
   27be4:	000277ad 	.word	0x000277ad
   27be8:	40000c02 	.word	0x40000c02
   27bec:	40000c00 	.word	0x40000c00
   27bf0:	000277c1 	.word	0x000277c1
   27bf4:	000279a5 	.word	0x000279a5

00027bf8 <system_interrupt_clear_pending>:
   27bf8:	b580      	push	{r7, lr}
   27bfa:	b084      	sub	sp, #16
   27bfc:	af00      	add	r7, sp, #0
   27bfe:	0002      	movs	r2, r0
   27c00:	1dfb      	adds	r3, r7, #7
   27c02:	701a      	strb	r2, [r3, #0]
   27c04:	230f      	movs	r3, #15
   27c06:	18fb      	adds	r3, r7, r3
   27c08:	2200      	movs	r2, #0
   27c0a:	701a      	strb	r2, [r3, #0]
   27c0c:	1dfb      	adds	r3, r7, #7
   27c0e:	781b      	ldrb	r3, [r3, #0]
   27c10:	2b7f      	cmp	r3, #127	; 0x7f
   27c12:	d80b      	bhi.n	27c2c <system_interrupt_clear_pending+0x34>
   27c14:	4a13      	ldr	r2, [pc, #76]	; (27c64 <system_interrupt_clear_pending+0x6c>)
   27c16:	1dfb      	adds	r3, r7, #7
   27c18:	781b      	ldrb	r3, [r3, #0]
   27c1a:	b25b      	sxtb	r3, r3
   27c1c:	2101      	movs	r1, #1
   27c1e:	4099      	lsls	r1, r3
   27c20:	000b      	movs	r3, r1
   27c22:	0019      	movs	r1, r3
   27c24:	23c0      	movs	r3, #192	; 0xc0
   27c26:	005b      	lsls	r3, r3, #1
   27c28:	50d1      	str	r1, [r2, r3]
   27c2a:	e014      	b.n	27c56 <system_interrupt_clear_pending+0x5e>
   27c2c:	1dfb      	adds	r3, r7, #7
   27c2e:	781b      	ldrb	r3, [r3, #0]
   27c30:	b25b      	sxtb	r3, r3
   27c32:	330e      	adds	r3, #14
   27c34:	d101      	bne.n	27c3a <system_interrupt_clear_pending+0x42>
   27c36:	2317      	movs	r3, #23
   27c38:	e010      	b.n	27c5c <system_interrupt_clear_pending+0x64>
   27c3a:	1dfb      	adds	r3, r7, #7
   27c3c:	781b      	ldrb	r3, [r3, #0]
   27c3e:	b25b      	sxtb	r3, r3
   27c40:	3301      	adds	r3, #1
   27c42:	d104      	bne.n	27c4e <system_interrupt_clear_pending+0x56>
   27c44:	4b08      	ldr	r3, [pc, #32]	; (27c68 <system_interrupt_clear_pending+0x70>)
   27c46:	2280      	movs	r2, #128	; 0x80
   27c48:	0492      	lsls	r2, r2, #18
   27c4a:	605a      	str	r2, [r3, #4]
   27c4c:	e003      	b.n	27c56 <system_interrupt_clear_pending+0x5e>
   27c4e:	230f      	movs	r3, #15
   27c50:	18fb      	adds	r3, r7, r3
   27c52:	2217      	movs	r2, #23
   27c54:	701a      	strb	r2, [r3, #0]
   27c56:	230f      	movs	r3, #15
   27c58:	18fb      	adds	r3, r7, r3
   27c5a:	781b      	ldrb	r3, [r3, #0]
   27c5c:	0018      	movs	r0, r3
   27c5e:	46bd      	mov	sp, r7
   27c60:	b004      	add	sp, #16
   27c62:	bd80      	pop	{r7, pc}
   27c64:	e000e100 	.word	0xe000e100
   27c68:	e000ed00 	.word	0xe000ed00

00027c6c <system_pinmux_get_group_from_gpio_pin>:
   27c6c:	b580      	push	{r7, lr}
   27c6e:	b084      	sub	sp, #16
   27c70:	af00      	add	r7, sp, #0
   27c72:	0002      	movs	r2, r0
   27c74:	1dfb      	adds	r3, r7, #7
   27c76:	701a      	strb	r2, [r3, #0]
   27c78:	230f      	movs	r3, #15
   27c7a:	18fb      	adds	r3, r7, r3
   27c7c:	1dfa      	adds	r2, r7, #7
   27c7e:	7812      	ldrb	r2, [r2, #0]
   27c80:	09d2      	lsrs	r2, r2, #7
   27c82:	701a      	strb	r2, [r3, #0]
   27c84:	230e      	movs	r3, #14
   27c86:	18fb      	adds	r3, r7, r3
   27c88:	1dfa      	adds	r2, r7, #7
   27c8a:	7812      	ldrb	r2, [r2, #0]
   27c8c:	0952      	lsrs	r2, r2, #5
   27c8e:	701a      	strb	r2, [r3, #0]
   27c90:	4b0d      	ldr	r3, [pc, #52]	; (27cc8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   27c92:	60bb      	str	r3, [r7, #8]
   27c94:	230f      	movs	r3, #15
   27c96:	18fb      	adds	r3, r7, r3
   27c98:	781b      	ldrb	r3, [r3, #0]
   27c9a:	2b00      	cmp	r3, #0
   27c9c:	d10f      	bne.n	27cbe <system_pinmux_get_group_from_gpio_pin+0x52>
   27c9e:	230f      	movs	r3, #15
   27ca0:	18fb      	adds	r3, r7, r3
   27ca2:	781b      	ldrb	r3, [r3, #0]
   27ca4:	009b      	lsls	r3, r3, #2
   27ca6:	2210      	movs	r2, #16
   27ca8:	4694      	mov	ip, r2
   27caa:	44bc      	add	ip, r7
   27cac:	4463      	add	r3, ip
   27cae:	3b08      	subs	r3, #8
   27cb0:	681a      	ldr	r2, [r3, #0]
   27cb2:	230e      	movs	r3, #14
   27cb4:	18fb      	adds	r3, r7, r3
   27cb6:	781b      	ldrb	r3, [r3, #0]
   27cb8:	01db      	lsls	r3, r3, #7
   27cba:	18d3      	adds	r3, r2, r3
   27cbc:	e000      	b.n	27cc0 <system_pinmux_get_group_from_gpio_pin+0x54>
   27cbe:	2300      	movs	r3, #0
   27cc0:	0018      	movs	r0, r3
   27cc2:	46bd      	mov	sp, r7
   27cc4:	b004      	add	sp, #16
   27cc6:	bd80      	pop	{r7, pc}
   27cc8:	41004400 	.word	0x41004400

00027ccc <_system_pinmux_config>:
   27ccc:	b580      	push	{r7, lr}
   27cce:	b088      	sub	sp, #32
   27cd0:	af00      	add	r7, sp, #0
   27cd2:	60f8      	str	r0, [r7, #12]
   27cd4:	60b9      	str	r1, [r7, #8]
   27cd6:	607a      	str	r2, [r7, #4]
   27cd8:	2300      	movs	r3, #0
   27cda:	61fb      	str	r3, [r7, #28]
   27cdc:	687b      	ldr	r3, [r7, #4]
   27cde:	78db      	ldrb	r3, [r3, #3]
   27ce0:	2201      	movs	r2, #1
   27ce2:	4053      	eors	r3, r2
   27ce4:	b2db      	uxtb	r3, r3
   27ce6:	2b00      	cmp	r3, #0
   27ce8:	d035      	beq.n	27d56 <_system_pinmux_config+0x8a>
   27cea:	687b      	ldr	r3, [r7, #4]
   27cec:	781b      	ldrb	r3, [r3, #0]
   27cee:	2b80      	cmp	r3, #128	; 0x80
   27cf0:	d00b      	beq.n	27d0a <_system_pinmux_config+0x3e>
   27cf2:	69fb      	ldr	r3, [r7, #28]
   27cf4:	2280      	movs	r2, #128	; 0x80
   27cf6:	0252      	lsls	r2, r2, #9
   27cf8:	4313      	orrs	r3, r2
   27cfa:	61fb      	str	r3, [r7, #28]
   27cfc:	687b      	ldr	r3, [r7, #4]
   27cfe:	781b      	ldrb	r3, [r3, #0]
   27d00:	061b      	lsls	r3, r3, #24
   27d02:	001a      	movs	r2, r3
   27d04:	69fb      	ldr	r3, [r7, #28]
   27d06:	4313      	orrs	r3, r2
   27d08:	61fb      	str	r3, [r7, #28]
   27d0a:	687b      	ldr	r3, [r7, #4]
   27d0c:	785b      	ldrb	r3, [r3, #1]
   27d0e:	2b00      	cmp	r3, #0
   27d10:	d003      	beq.n	27d1a <_system_pinmux_config+0x4e>
   27d12:	687b      	ldr	r3, [r7, #4]
   27d14:	785b      	ldrb	r3, [r3, #1]
   27d16:	2b02      	cmp	r3, #2
   27d18:	d110      	bne.n	27d3c <_system_pinmux_config+0x70>
   27d1a:	69fb      	ldr	r3, [r7, #28]
   27d1c:	2280      	movs	r2, #128	; 0x80
   27d1e:	0292      	lsls	r2, r2, #10
   27d20:	4313      	orrs	r3, r2
   27d22:	61fb      	str	r3, [r7, #28]
   27d24:	687b      	ldr	r3, [r7, #4]
   27d26:	789b      	ldrb	r3, [r3, #2]
   27d28:	2b00      	cmp	r3, #0
   27d2a:	d004      	beq.n	27d36 <_system_pinmux_config+0x6a>
   27d2c:	69fb      	ldr	r3, [r7, #28]
   27d2e:	2280      	movs	r2, #128	; 0x80
   27d30:	02d2      	lsls	r2, r2, #11
   27d32:	4313      	orrs	r3, r2
   27d34:	61fb      	str	r3, [r7, #28]
   27d36:	68fb      	ldr	r3, [r7, #12]
   27d38:	68ba      	ldr	r2, [r7, #8]
   27d3a:	605a      	str	r2, [r3, #4]
   27d3c:	687b      	ldr	r3, [r7, #4]
   27d3e:	785b      	ldrb	r3, [r3, #1]
   27d40:	2b01      	cmp	r3, #1
   27d42:	d003      	beq.n	27d4c <_system_pinmux_config+0x80>
   27d44:	687b      	ldr	r3, [r7, #4]
   27d46:	785b      	ldrb	r3, [r3, #1]
   27d48:	2b02      	cmp	r3, #2
   27d4a:	d107      	bne.n	27d5c <_system_pinmux_config+0x90>
   27d4c:	69fb      	ldr	r3, [r7, #28]
   27d4e:	4a22      	ldr	r2, [pc, #136]	; (27dd8 <_system_pinmux_config+0x10c>)
   27d50:	4013      	ands	r3, r2
   27d52:	61fb      	str	r3, [r7, #28]
   27d54:	e002      	b.n	27d5c <_system_pinmux_config+0x90>
   27d56:	68fb      	ldr	r3, [r7, #12]
   27d58:	68ba      	ldr	r2, [r7, #8]
   27d5a:	605a      	str	r2, [r3, #4]
   27d5c:	68bb      	ldr	r3, [r7, #8]
   27d5e:	041b      	lsls	r3, r3, #16
   27d60:	0c1b      	lsrs	r3, r3, #16
   27d62:	61bb      	str	r3, [r7, #24]
   27d64:	68bb      	ldr	r3, [r7, #8]
   27d66:	0c1b      	lsrs	r3, r3, #16
   27d68:	617b      	str	r3, [r7, #20]
   27d6a:	69ba      	ldr	r2, [r7, #24]
   27d6c:	69fb      	ldr	r3, [r7, #28]
   27d6e:	4313      	orrs	r3, r2
   27d70:	22a0      	movs	r2, #160	; 0xa0
   27d72:	05d2      	lsls	r2, r2, #23
   27d74:	431a      	orrs	r2, r3
   27d76:	68fb      	ldr	r3, [r7, #12]
   27d78:	629a      	str	r2, [r3, #40]	; 0x28
   27d7a:	697a      	ldr	r2, [r7, #20]
   27d7c:	69fb      	ldr	r3, [r7, #28]
   27d7e:	4313      	orrs	r3, r2
   27d80:	22d0      	movs	r2, #208	; 0xd0
   27d82:	0612      	lsls	r2, r2, #24
   27d84:	431a      	orrs	r2, r3
   27d86:	68fb      	ldr	r3, [r7, #12]
   27d88:	629a      	str	r2, [r3, #40]	; 0x28
   27d8a:	687b      	ldr	r3, [r7, #4]
   27d8c:	78db      	ldrb	r3, [r3, #3]
   27d8e:	2201      	movs	r2, #1
   27d90:	4053      	eors	r3, r2
   27d92:	b2db      	uxtb	r3, r3
   27d94:	2b00      	cmp	r3, #0
   27d96:	d01a      	beq.n	27dce <_system_pinmux_config+0x102>
   27d98:	69fa      	ldr	r2, [r7, #28]
   27d9a:	2380      	movs	r3, #128	; 0x80
   27d9c:	02db      	lsls	r3, r3, #11
   27d9e:	4013      	ands	r3, r2
   27da0:	d00a      	beq.n	27db8 <_system_pinmux_config+0xec>
   27da2:	687b      	ldr	r3, [r7, #4]
   27da4:	789b      	ldrb	r3, [r3, #2]
   27da6:	2b01      	cmp	r3, #1
   27da8:	d103      	bne.n	27db2 <_system_pinmux_config+0xe6>
   27daa:	68fb      	ldr	r3, [r7, #12]
   27dac:	68ba      	ldr	r2, [r7, #8]
   27dae:	619a      	str	r2, [r3, #24]
   27db0:	e002      	b.n	27db8 <_system_pinmux_config+0xec>
   27db2:	68fb      	ldr	r3, [r7, #12]
   27db4:	68ba      	ldr	r2, [r7, #8]
   27db6:	615a      	str	r2, [r3, #20]
   27db8:	687b      	ldr	r3, [r7, #4]
   27dba:	785b      	ldrb	r3, [r3, #1]
   27dbc:	2b01      	cmp	r3, #1
   27dbe:	d003      	beq.n	27dc8 <_system_pinmux_config+0xfc>
   27dc0:	687b      	ldr	r3, [r7, #4]
   27dc2:	785b      	ldrb	r3, [r3, #1]
   27dc4:	2b02      	cmp	r3, #2
   27dc6:	d102      	bne.n	27dce <_system_pinmux_config+0x102>
   27dc8:	68fb      	ldr	r3, [r7, #12]
   27dca:	68ba      	ldr	r2, [r7, #8]
   27dcc:	609a      	str	r2, [r3, #8]
   27dce:	46c0      	nop			; (mov r8, r8)
   27dd0:	46bd      	mov	sp, r7
   27dd2:	b008      	add	sp, #32
   27dd4:	bd80      	pop	{r7, pc}
   27dd6:	46c0      	nop			; (mov r8, r8)
   27dd8:	fffbffff 	.word	0xfffbffff

00027ddc <system_pinmux_pin_set_config>:
   27ddc:	b580      	push	{r7, lr}
   27dde:	b084      	sub	sp, #16
   27de0:	af00      	add	r7, sp, #0
   27de2:	0002      	movs	r2, r0
   27de4:	6039      	str	r1, [r7, #0]
   27de6:	1dfb      	adds	r3, r7, #7
   27de8:	701a      	strb	r2, [r3, #0]
   27dea:	1dfb      	adds	r3, r7, #7
   27dec:	781b      	ldrb	r3, [r3, #0]
   27dee:	0018      	movs	r0, r3
   27df0:	4b0a      	ldr	r3, [pc, #40]	; (27e1c <system_pinmux_pin_set_config+0x40>)
   27df2:	4798      	blx	r3
   27df4:	0003      	movs	r3, r0
   27df6:	60fb      	str	r3, [r7, #12]
   27df8:	1dfb      	adds	r3, r7, #7
   27dfa:	781b      	ldrb	r3, [r3, #0]
   27dfc:	221f      	movs	r2, #31
   27dfe:	4013      	ands	r3, r2
   27e00:	2201      	movs	r2, #1
   27e02:	409a      	lsls	r2, r3
   27e04:	0013      	movs	r3, r2
   27e06:	60bb      	str	r3, [r7, #8]
   27e08:	683a      	ldr	r2, [r7, #0]
   27e0a:	68b9      	ldr	r1, [r7, #8]
   27e0c:	68fb      	ldr	r3, [r7, #12]
   27e0e:	0018      	movs	r0, r3
   27e10:	4b03      	ldr	r3, [pc, #12]	; (27e20 <system_pinmux_pin_set_config+0x44>)
   27e12:	4798      	blx	r3
   27e14:	46c0      	nop			; (mov r8, r8)
   27e16:	46bd      	mov	sp, r7
   27e18:	b004      	add	sp, #16
   27e1a:	bd80      	pop	{r7, pc}
   27e1c:	00027c6d 	.word	0x00027c6d
   27e20:	00027ccd 	.word	0x00027ccd

00027e24 <_system_dummy_init>:
   27e24:	b580      	push	{r7, lr}
   27e26:	af00      	add	r7, sp, #0
   27e28:	46c0      	nop			; (mov r8, r8)
   27e2a:	46bd      	mov	sp, r7
   27e2c:	bd80      	pop	{r7, pc}
	...

00027e30 <system_init>:
   27e30:	b580      	push	{r7, lr}
   27e32:	af00      	add	r7, sp, #0
   27e34:	4b06      	ldr	r3, [pc, #24]	; (27e50 <system_init+0x20>)
   27e36:	4798      	blx	r3
   27e38:	4b06      	ldr	r3, [pc, #24]	; (27e54 <system_init+0x24>)
   27e3a:	4798      	blx	r3
   27e3c:	4b06      	ldr	r3, [pc, #24]	; (27e58 <system_init+0x28>)
   27e3e:	4798      	blx	r3
   27e40:	4b06      	ldr	r3, [pc, #24]	; (27e5c <system_init+0x2c>)
   27e42:	4798      	blx	r3
   27e44:	4b06      	ldr	r3, [pc, #24]	; (27e60 <system_init+0x30>)
   27e46:	4798      	blx	r3
   27e48:	46c0      	nop			; (mov r8, r8)
   27e4a:	46bd      	mov	sp, r7
   27e4c:	bd80      	pop	{r7, pc}
   27e4e:	46c0      	nop			; (mov r8, r8)
   27e50:	000274b1 	.word	0x000274b1
   27e54:	00023f79 	.word	0x00023f79
   27e58:	00012669 	.word	0x00012669
   27e5c:	00024351 	.word	0x00024351
   27e60:	00027e25 	.word	0x00027e25

00027e64 <system_gclk_chan_get_config_defaults>:
   27e64:	b580      	push	{r7, lr}
   27e66:	b082      	sub	sp, #8
   27e68:	af00      	add	r7, sp, #0
   27e6a:	6078      	str	r0, [r7, #4]
   27e6c:	687b      	ldr	r3, [r7, #4]
   27e6e:	2200      	movs	r2, #0
   27e70:	701a      	strb	r2, [r3, #0]
   27e72:	46c0      	nop			; (mov r8, r8)
   27e74:	46bd      	mov	sp, r7
   27e76:	b002      	add	sp, #8
   27e78:	bd80      	pop	{r7, pc}
	...

00027e7c <system_apb_clock_set_mask>:
   27e7c:	b580      	push	{r7, lr}
   27e7e:	b082      	sub	sp, #8
   27e80:	af00      	add	r7, sp, #0
   27e82:	0002      	movs	r2, r0
   27e84:	6039      	str	r1, [r7, #0]
   27e86:	1dfb      	adds	r3, r7, #7
   27e88:	701a      	strb	r2, [r3, #0]
   27e8a:	1dfb      	adds	r3, r7, #7
   27e8c:	781b      	ldrb	r3, [r3, #0]
   27e8e:	2b01      	cmp	r3, #1
   27e90:	d00a      	beq.n	27ea8 <system_apb_clock_set_mask+0x2c>
   27e92:	2b02      	cmp	r3, #2
   27e94:	d00f      	beq.n	27eb6 <system_apb_clock_set_mask+0x3a>
   27e96:	2b00      	cmp	r3, #0
   27e98:	d114      	bne.n	27ec4 <system_apb_clock_set_mask+0x48>
   27e9a:	4b0e      	ldr	r3, [pc, #56]	; (27ed4 <system_apb_clock_set_mask+0x58>)
   27e9c:	4a0d      	ldr	r2, [pc, #52]	; (27ed4 <system_apb_clock_set_mask+0x58>)
   27e9e:	6991      	ldr	r1, [r2, #24]
   27ea0:	683a      	ldr	r2, [r7, #0]
   27ea2:	430a      	orrs	r2, r1
   27ea4:	619a      	str	r2, [r3, #24]
   27ea6:	e00f      	b.n	27ec8 <system_apb_clock_set_mask+0x4c>
   27ea8:	4b0a      	ldr	r3, [pc, #40]	; (27ed4 <system_apb_clock_set_mask+0x58>)
   27eaa:	4a0a      	ldr	r2, [pc, #40]	; (27ed4 <system_apb_clock_set_mask+0x58>)
   27eac:	69d1      	ldr	r1, [r2, #28]
   27eae:	683a      	ldr	r2, [r7, #0]
   27eb0:	430a      	orrs	r2, r1
   27eb2:	61da      	str	r2, [r3, #28]
   27eb4:	e008      	b.n	27ec8 <system_apb_clock_set_mask+0x4c>
   27eb6:	4b07      	ldr	r3, [pc, #28]	; (27ed4 <system_apb_clock_set_mask+0x58>)
   27eb8:	4a06      	ldr	r2, [pc, #24]	; (27ed4 <system_apb_clock_set_mask+0x58>)
   27eba:	6a11      	ldr	r1, [r2, #32]
   27ebc:	683a      	ldr	r2, [r7, #0]
   27ebe:	430a      	orrs	r2, r1
   27ec0:	621a      	str	r2, [r3, #32]
   27ec2:	e001      	b.n	27ec8 <system_apb_clock_set_mask+0x4c>
   27ec4:	2317      	movs	r3, #23
   27ec6:	e000      	b.n	27eca <system_apb_clock_set_mask+0x4e>
   27ec8:	2300      	movs	r3, #0
   27eca:	0018      	movs	r0, r3
   27ecc:	46bd      	mov	sp, r7
   27ece:	b002      	add	sp, #8
   27ed0:	bd80      	pop	{r7, pc}
   27ed2:	46c0      	nop			; (mov r8, r8)
   27ed4:	40000400 	.word	0x40000400

00027ed8 <system_pinmux_get_config_defaults>:
   27ed8:	b580      	push	{r7, lr}
   27eda:	b082      	sub	sp, #8
   27edc:	af00      	add	r7, sp, #0
   27ede:	6078      	str	r0, [r7, #4]
   27ee0:	687b      	ldr	r3, [r7, #4]
   27ee2:	2280      	movs	r2, #128	; 0x80
   27ee4:	701a      	strb	r2, [r3, #0]
   27ee6:	687b      	ldr	r3, [r7, #4]
   27ee8:	2200      	movs	r2, #0
   27eea:	705a      	strb	r2, [r3, #1]
   27eec:	687b      	ldr	r3, [r7, #4]
   27eee:	2201      	movs	r2, #1
   27ef0:	709a      	strb	r2, [r3, #2]
   27ef2:	687b      	ldr	r3, [r7, #4]
   27ef4:	2200      	movs	r2, #0
   27ef6:	70da      	strb	r2, [r3, #3]
   27ef8:	46c0      	nop			; (mov r8, r8)
   27efa:	46bd      	mov	sp, r7
   27efc:	b002      	add	sp, #8
   27efe:	bd80      	pop	{r7, pc}

00027f00 <_tcc_get_inst_index>:
   27f00:	b580      	push	{r7, lr}
   27f02:	b084      	sub	sp, #16
   27f04:	af00      	add	r7, sp, #0
   27f06:	6078      	str	r0, [r7, #4]
   27f08:	2300      	movs	r3, #0
   27f0a:	60fb      	str	r3, [r7, #12]
   27f0c:	e00c      	b.n	27f28 <_tcc_get_inst_index+0x28>
   27f0e:	4b0a      	ldr	r3, [pc, #40]	; (27f38 <_tcc_get_inst_index+0x38>)
   27f10:	68fa      	ldr	r2, [r7, #12]
   27f12:	0092      	lsls	r2, r2, #2
   27f14:	58d2      	ldr	r2, [r2, r3]
   27f16:	687b      	ldr	r3, [r7, #4]
   27f18:	429a      	cmp	r2, r3
   27f1a:	d102      	bne.n	27f22 <_tcc_get_inst_index+0x22>
   27f1c:	68fb      	ldr	r3, [r7, #12]
   27f1e:	b2db      	uxtb	r3, r3
   27f20:	e006      	b.n	27f30 <_tcc_get_inst_index+0x30>
   27f22:	68fb      	ldr	r3, [r7, #12]
   27f24:	3301      	adds	r3, #1
   27f26:	60fb      	str	r3, [r7, #12]
   27f28:	68fb      	ldr	r3, [r7, #12]
   27f2a:	2b02      	cmp	r3, #2
   27f2c:	d9ef      	bls.n	27f0e <_tcc_get_inst_index+0xe>
   27f2e:	2300      	movs	r3, #0
   27f30:	0018      	movs	r0, r3
   27f32:	46bd      	mov	sp, r7
   27f34:	b004      	add	sp, #16
   27f36:	bd80      	pop	{r7, pc}
   27f38:	000369c4 	.word	0x000369c4

00027f3c <tcc_get_config_defaults>:
   27f3c:	b590      	push	{r4, r7, lr}
   27f3e:	b085      	sub	sp, #20
   27f40:	af00      	add	r7, sp, #0
   27f42:	6078      	str	r0, [r7, #4]
   27f44:	6039      	str	r1, [r7, #0]
   27f46:	230f      	movs	r3, #15
   27f48:	18fc      	adds	r4, r7, r3
   27f4a:	683b      	ldr	r3, [r7, #0]
   27f4c:	0018      	movs	r0, r3
   27f4e:	4bad      	ldr	r3, [pc, #692]	; (28204 <tcc_get_config_defaults+0x2c8>)
   27f50:	4798      	blx	r3
   27f52:	0003      	movs	r3, r0
   27f54:	7023      	strb	r3, [r4, #0]
   27f56:	687b      	ldr	r3, [r7, #4]
   27f58:	2200      	movs	r2, #0
   27f5a:	601a      	str	r2, [r3, #0]
   27f5c:	230f      	movs	r3, #15
   27f5e:	18fb      	adds	r3, r7, r3
   27f60:	781a      	ldrb	r2, [r3, #0]
   27f62:	4ba9      	ldr	r3, [pc, #676]	; (28208 <tcc_get_config_defaults+0x2cc>)
   27f64:	0092      	lsls	r2, r2, #2
   27f66:	58d2      	ldr	r2, [r2, r3]
   27f68:	687b      	ldr	r3, [r7, #4]
   27f6a:	605a      	str	r2, [r3, #4]
   27f6c:	687b      	ldr	r3, [r7, #4]
   27f6e:	2200      	movs	r2, #0
   27f70:	729a      	strb	r2, [r3, #10]
   27f72:	687b      	ldr	r3, [r7, #4]
   27f74:	2200      	movs	r2, #0
   27f76:	72da      	strb	r2, [r3, #11]
   27f78:	687b      	ldr	r3, [r7, #4]
   27f7a:	2200      	movs	r2, #0
   27f7c:	731a      	strb	r2, [r3, #12]
   27f7e:	687b      	ldr	r3, [r7, #4]
   27f80:	2200      	movs	r2, #0
   27f82:	725a      	strb	r2, [r3, #9]
   27f84:	687b      	ldr	r3, [r7, #4]
   27f86:	2200      	movs	r2, #0
   27f88:	721a      	strb	r2, [r3, #8]
   27f8a:	687b      	ldr	r3, [r7, #4]
   27f8c:	2200      	movs	r2, #0
   27f8e:	61da      	str	r2, [r3, #28]
   27f90:	687b      	ldr	r3, [r7, #4]
   27f92:	2200      	movs	r2, #0
   27f94:	621a      	str	r2, [r3, #32]
   27f96:	687b      	ldr	r3, [r7, #4]
   27f98:	2200      	movs	r2, #0
   27f9a:	625a      	str	r2, [r3, #36]	; 0x24
   27f9c:	687b      	ldr	r3, [r7, #4]
   27f9e:	2200      	movs	r2, #0
   27fa0:	629a      	str	r2, [r3, #40]	; 0x28
   27fa2:	687b      	ldr	r3, [r7, #4]
   27fa4:	2200      	movs	r2, #0
   27fa6:	751a      	strb	r2, [r3, #20]
   27fa8:	687b      	ldr	r3, [r7, #4]
   27faa:	2200      	movs	r2, #0
   27fac:	755a      	strb	r2, [r3, #21]
   27fae:	687b      	ldr	r3, [r7, #4]
   27fb0:	2200      	movs	r2, #0
   27fb2:	759a      	strb	r2, [r3, #22]
   27fb4:	687b      	ldr	r3, [r7, #4]
   27fb6:	2200      	movs	r2, #0
   27fb8:	75da      	strb	r2, [r3, #23]
   27fba:	687b      	ldr	r3, [r7, #4]
   27fbc:	2200      	movs	r2, #0
   27fbe:	761a      	strb	r2, [r3, #24]
   27fc0:	687b      	ldr	r3, [r7, #4]
   27fc2:	2200      	movs	r2, #0
   27fc4:	765a      	strb	r2, [r3, #25]
   27fc6:	687b      	ldr	r3, [r7, #4]
   27fc8:	2200      	movs	r2, #0
   27fca:	741a      	strb	r2, [r3, #16]
   27fcc:	687b      	ldr	r3, [r7, #4]
   27fce:	2200      	movs	r2, #0
   27fd0:	745a      	strb	r2, [r3, #17]
   27fd2:	687b      	ldr	r3, [r7, #4]
   27fd4:	2200      	movs	r2, #0
   27fd6:	749a      	strb	r2, [r3, #18]
   27fd8:	687b      	ldr	r3, [r7, #4]
   27fda:	2200      	movs	r2, #0
   27fdc:	74da      	strb	r2, [r3, #19]
   27fde:	687b      	ldr	r3, [r7, #4]
   27fe0:	222c      	movs	r2, #44	; 0x2c
   27fe2:	2100      	movs	r1, #0
   27fe4:	5499      	strb	r1, [r3, r2]
   27fe6:	687b      	ldr	r3, [r7, #4]
   27fe8:	222d      	movs	r2, #45	; 0x2d
   27fea:	2100      	movs	r1, #0
   27fec:	5499      	strb	r1, [r3, r2]
   27fee:	687b      	ldr	r3, [r7, #4]
   27ff0:	222e      	movs	r2, #46	; 0x2e
   27ff2:	2100      	movs	r1, #0
   27ff4:	5499      	strb	r1, [r3, r2]
   27ff6:	687b      	ldr	r3, [r7, #4]
   27ff8:	222f      	movs	r2, #47	; 0x2f
   27ffa:	2100      	movs	r1, #0
   27ffc:	5499      	strb	r1, [r3, r2]
   27ffe:	687b      	ldr	r3, [r7, #4]
   28000:	2230      	movs	r2, #48	; 0x30
   28002:	2100      	movs	r1, #0
   28004:	5499      	strb	r1, [r3, r2]
   28006:	687b      	ldr	r3, [r7, #4]
   28008:	2231      	movs	r2, #49	; 0x31
   2800a:	2100      	movs	r1, #0
   2800c:	5499      	strb	r1, [r3, r2]
   2800e:	687b      	ldr	r3, [r7, #4]
   28010:	2232      	movs	r2, #50	; 0x32
   28012:	2100      	movs	r1, #0
   28014:	5499      	strb	r1, [r3, r2]
   28016:	687b      	ldr	r3, [r7, #4]
   28018:	2233      	movs	r2, #51	; 0x33
   2801a:	2100      	movs	r1, #0
   2801c:	5499      	strb	r1, [r3, r2]
   2801e:	687b      	ldr	r3, [r7, #4]
   28020:	2234      	movs	r2, #52	; 0x34
   28022:	2100      	movs	r1, #0
   28024:	5499      	strb	r1, [r3, r2]
   28026:	687b      	ldr	r3, [r7, #4]
   28028:	2235      	movs	r2, #53	; 0x35
   2802a:	2100      	movs	r1, #0
   2802c:	5499      	strb	r1, [r3, r2]
   2802e:	687b      	ldr	r3, [r7, #4]
   28030:	2236      	movs	r2, #54	; 0x36
   28032:	2100      	movs	r1, #0
   28034:	5499      	strb	r1, [r3, r2]
   28036:	687b      	ldr	r3, [r7, #4]
   28038:	2237      	movs	r2, #55	; 0x37
   2803a:	2100      	movs	r1, #0
   2803c:	5499      	strb	r1, [r3, r2]
   2803e:	687b      	ldr	r3, [r7, #4]
   28040:	2238      	movs	r2, #56	; 0x38
   28042:	2100      	movs	r1, #0
   28044:	5499      	strb	r1, [r3, r2]
   28046:	687b      	ldr	r3, [r7, #4]
   28048:	2239      	movs	r2, #57	; 0x39
   2804a:	2100      	movs	r1, #0
   2804c:	5499      	strb	r1, [r3, r2]
   2804e:	687b      	ldr	r3, [r7, #4]
   28050:	223a      	movs	r2, #58	; 0x3a
   28052:	2100      	movs	r1, #0
   28054:	5499      	strb	r1, [r3, r2]
   28056:	687b      	ldr	r3, [r7, #4]
   28058:	223b      	movs	r2, #59	; 0x3b
   2805a:	2100      	movs	r1, #0
   2805c:	5499      	strb	r1, [r3, r2]
   2805e:	687b      	ldr	r3, [r7, #4]
   28060:	223c      	movs	r2, #60	; 0x3c
   28062:	2100      	movs	r1, #0
   28064:	5499      	strb	r1, [r3, r2]
   28066:	687b      	ldr	r3, [r7, #4]
   28068:	223d      	movs	r2, #61	; 0x3d
   2806a:	2100      	movs	r1, #0
   2806c:	5499      	strb	r1, [r3, r2]
   2806e:	687b      	ldr	r3, [r7, #4]
   28070:	223e      	movs	r2, #62	; 0x3e
   28072:	2100      	movs	r1, #0
   28074:	5499      	strb	r1, [r3, r2]
   28076:	687b      	ldr	r3, [r7, #4]
   28078:	223f      	movs	r2, #63	; 0x3f
   2807a:	2100      	movs	r1, #0
   2807c:	5499      	strb	r1, [r3, r2]
   2807e:	687b      	ldr	r3, [r7, #4]
   28080:	2240      	movs	r2, #64	; 0x40
   28082:	2100      	movs	r1, #0
   28084:	5499      	strb	r1, [r3, r2]
   28086:	687b      	ldr	r3, [r7, #4]
   28088:	2241      	movs	r2, #65	; 0x41
   2808a:	2100      	movs	r1, #0
   2808c:	5499      	strb	r1, [r3, r2]
   2808e:	687b      	ldr	r3, [r7, #4]
   28090:	2242      	movs	r2, #66	; 0x42
   28092:	2100      	movs	r1, #0
   28094:	5499      	strb	r1, [r3, r2]
   28096:	687b      	ldr	r3, [r7, #4]
   28098:	2243      	movs	r2, #67	; 0x43
   2809a:	2100      	movs	r1, #0
   2809c:	5499      	strb	r1, [r3, r2]
   2809e:	687b      	ldr	r3, [r7, #4]
   280a0:	2244      	movs	r2, #68	; 0x44
   280a2:	2100      	movs	r1, #0
   280a4:	5499      	strb	r1, [r3, r2]
   280a6:	687b      	ldr	r3, [r7, #4]
   280a8:	2245      	movs	r2, #69	; 0x45
   280aa:	2100      	movs	r1, #0
   280ac:	5499      	strb	r1, [r3, r2]
   280ae:	687b      	ldr	r3, [r7, #4]
   280b0:	2246      	movs	r2, #70	; 0x46
   280b2:	2100      	movs	r1, #0
   280b4:	5499      	strb	r1, [r3, r2]
   280b6:	687b      	ldr	r3, [r7, #4]
   280b8:	2247      	movs	r2, #71	; 0x47
   280ba:	2100      	movs	r1, #0
   280bc:	5499      	strb	r1, [r3, r2]
   280be:	687b      	ldr	r3, [r7, #4]
   280c0:	2248      	movs	r2, #72	; 0x48
   280c2:	2100      	movs	r1, #0
   280c4:	5499      	strb	r1, [r3, r2]
   280c6:	687b      	ldr	r3, [r7, #4]
   280c8:	2249      	movs	r2, #73	; 0x49
   280ca:	2100      	movs	r1, #0
   280cc:	5499      	strb	r1, [r3, r2]
   280ce:	687b      	ldr	r3, [r7, #4]
   280d0:	224a      	movs	r2, #74	; 0x4a
   280d2:	2100      	movs	r1, #0
   280d4:	5499      	strb	r1, [r3, r2]
   280d6:	687b      	ldr	r3, [r7, #4]
   280d8:	224b      	movs	r2, #75	; 0x4b
   280da:	2100      	movs	r1, #0
   280dc:	5499      	strb	r1, [r3, r2]
   280de:	687b      	ldr	r3, [r7, #4]
   280e0:	224c      	movs	r2, #76	; 0x4c
   280e2:	2100      	movs	r1, #0
   280e4:	5499      	strb	r1, [r3, r2]
   280e6:	687b      	ldr	r3, [r7, #4]
   280e8:	224d      	movs	r2, #77	; 0x4d
   280ea:	2100      	movs	r1, #0
   280ec:	5499      	strb	r1, [r3, r2]
   280ee:	687b      	ldr	r3, [r7, #4]
   280f0:	224e      	movs	r2, #78	; 0x4e
   280f2:	2100      	movs	r1, #0
   280f4:	5499      	strb	r1, [r3, r2]
   280f6:	687b      	ldr	r3, [r7, #4]
   280f8:	224f      	movs	r2, #79	; 0x4f
   280fa:	2100      	movs	r1, #0
   280fc:	5499      	strb	r1, [r3, r2]
   280fe:	687b      	ldr	r3, [r7, #4]
   28100:	2250      	movs	r2, #80	; 0x50
   28102:	2100      	movs	r1, #0
   28104:	5499      	strb	r1, [r3, r2]
   28106:	687b      	ldr	r3, [r7, #4]
   28108:	2251      	movs	r2, #81	; 0x51
   2810a:	2100      	movs	r1, #0
   2810c:	5499      	strb	r1, [r3, r2]
   2810e:	687b      	ldr	r3, [r7, #4]
   28110:	2252      	movs	r2, #82	; 0x52
   28112:	2100      	movs	r1, #0
   28114:	5499      	strb	r1, [r3, r2]
   28116:	687b      	ldr	r3, [r7, #4]
   28118:	2253      	movs	r2, #83	; 0x53
   2811a:	2100      	movs	r1, #0
   2811c:	5499      	strb	r1, [r3, r2]
   2811e:	687b      	ldr	r3, [r7, #4]
   28120:	2254      	movs	r2, #84	; 0x54
   28122:	2100      	movs	r1, #0
   28124:	5499      	strb	r1, [r3, r2]
   28126:	687b      	ldr	r3, [r7, #4]
   28128:	2255      	movs	r2, #85	; 0x55
   2812a:	2100      	movs	r1, #0
   2812c:	5499      	strb	r1, [r3, r2]
   2812e:	687b      	ldr	r3, [r7, #4]
   28130:	2256      	movs	r2, #86	; 0x56
   28132:	2100      	movs	r1, #0
   28134:	5499      	strb	r1, [r3, r2]
   28136:	687b      	ldr	r3, [r7, #4]
   28138:	2257      	movs	r2, #87	; 0x57
   2813a:	2100      	movs	r1, #0
   2813c:	5499      	strb	r1, [r3, r2]
   2813e:	687b      	ldr	r3, [r7, #4]
   28140:	2298      	movs	r2, #152	; 0x98
   28142:	2100      	movs	r1, #0
   28144:	5499      	strb	r1, [r3, r2]
   28146:	687b      	ldr	r3, [r7, #4]
   28148:	2200      	movs	r2, #0
   2814a:	659a      	str	r2, [r3, #88]	; 0x58
   2814c:	687b      	ldr	r3, [r7, #4]
   2814e:	2200      	movs	r2, #0
   28150:	679a      	str	r2, [r3, #120]	; 0x78
   28152:	687b      	ldr	r3, [r7, #4]
   28154:	2299      	movs	r2, #153	; 0x99
   28156:	2100      	movs	r1, #0
   28158:	5499      	strb	r1, [r3, r2]
   2815a:	687b      	ldr	r3, [r7, #4]
   2815c:	2200      	movs	r2, #0
   2815e:	65da      	str	r2, [r3, #92]	; 0x5c
   28160:	687b      	ldr	r3, [r7, #4]
   28162:	2200      	movs	r2, #0
   28164:	67da      	str	r2, [r3, #124]	; 0x7c
   28166:	687b      	ldr	r3, [r7, #4]
   28168:	229a      	movs	r2, #154	; 0x9a
   2816a:	2100      	movs	r1, #0
   2816c:	5499      	strb	r1, [r3, r2]
   2816e:	687b      	ldr	r3, [r7, #4]
   28170:	2200      	movs	r2, #0
   28172:	661a      	str	r2, [r3, #96]	; 0x60
   28174:	687b      	ldr	r3, [r7, #4]
   28176:	2280      	movs	r2, #128	; 0x80
   28178:	2100      	movs	r1, #0
   2817a:	5099      	str	r1, [r3, r2]
   2817c:	687b      	ldr	r3, [r7, #4]
   2817e:	229b      	movs	r2, #155	; 0x9b
   28180:	2100      	movs	r1, #0
   28182:	5499      	strb	r1, [r3, r2]
   28184:	687b      	ldr	r3, [r7, #4]
   28186:	2200      	movs	r2, #0
   28188:	665a      	str	r2, [r3, #100]	; 0x64
   2818a:	687b      	ldr	r3, [r7, #4]
   2818c:	2284      	movs	r2, #132	; 0x84
   2818e:	2100      	movs	r1, #0
   28190:	5099      	str	r1, [r3, r2]
   28192:	687b      	ldr	r3, [r7, #4]
   28194:	229c      	movs	r2, #156	; 0x9c
   28196:	2100      	movs	r1, #0
   28198:	5499      	strb	r1, [r3, r2]
   2819a:	687b      	ldr	r3, [r7, #4]
   2819c:	2200      	movs	r2, #0
   2819e:	669a      	str	r2, [r3, #104]	; 0x68
   281a0:	687b      	ldr	r3, [r7, #4]
   281a2:	2288      	movs	r2, #136	; 0x88
   281a4:	2100      	movs	r1, #0
   281a6:	5099      	str	r1, [r3, r2]
   281a8:	687b      	ldr	r3, [r7, #4]
   281aa:	229d      	movs	r2, #157	; 0x9d
   281ac:	2100      	movs	r1, #0
   281ae:	5499      	strb	r1, [r3, r2]
   281b0:	687b      	ldr	r3, [r7, #4]
   281b2:	2200      	movs	r2, #0
   281b4:	66da      	str	r2, [r3, #108]	; 0x6c
   281b6:	687b      	ldr	r3, [r7, #4]
   281b8:	228c      	movs	r2, #140	; 0x8c
   281ba:	2100      	movs	r1, #0
   281bc:	5099      	str	r1, [r3, r2]
   281be:	687b      	ldr	r3, [r7, #4]
   281c0:	229e      	movs	r2, #158	; 0x9e
   281c2:	2100      	movs	r1, #0
   281c4:	5499      	strb	r1, [r3, r2]
   281c6:	687b      	ldr	r3, [r7, #4]
   281c8:	2200      	movs	r2, #0
   281ca:	671a      	str	r2, [r3, #112]	; 0x70
   281cc:	687b      	ldr	r3, [r7, #4]
   281ce:	2290      	movs	r2, #144	; 0x90
   281d0:	2100      	movs	r1, #0
   281d2:	5099      	str	r1, [r3, r2]
   281d4:	687b      	ldr	r3, [r7, #4]
   281d6:	229f      	movs	r2, #159	; 0x9f
   281d8:	2100      	movs	r1, #0
   281da:	5499      	strb	r1, [r3, r2]
   281dc:	687b      	ldr	r3, [r7, #4]
   281de:	2200      	movs	r2, #0
   281e0:	675a      	str	r2, [r3, #116]	; 0x74
   281e2:	687b      	ldr	r3, [r7, #4]
   281e4:	2294      	movs	r2, #148	; 0x94
   281e6:	2100      	movs	r1, #0
   281e8:	5099      	str	r1, [r3, r2]
   281ea:	687b      	ldr	r3, [r7, #4]
   281ec:	22a0      	movs	r2, #160	; 0xa0
   281ee:	2101      	movs	r1, #1
   281f0:	5499      	strb	r1, [r3, r2]
   281f2:	687b      	ldr	r3, [r7, #4]
   281f4:	22a1      	movs	r2, #161	; 0xa1
   281f6:	2100      	movs	r1, #0
   281f8:	5499      	strb	r1, [r3, r2]
   281fa:	46c0      	nop			; (mov r8, r8)
   281fc:	46bd      	mov	sp, r7
   281fe:	b005      	add	sp, #20
   28200:	bd90      	pop	{r4, r7, pc}
   28202:	46c0      	nop			; (mov r8, r8)
   28204:	00027f01 	.word	0x00027f01
   28208:	000369e0 	.word	0x000369e0

0002820c <_tcc_build_ctrla>:
   2820c:	b580      	push	{r7, lr}
   2820e:	b086      	sub	sp, #24
   28210:	af00      	add	r7, sp, #0
   28212:	60b9      	str	r1, [r7, #8]
   28214:	607a      	str	r2, [r7, #4]
   28216:	230f      	movs	r3, #15
   28218:	18fb      	adds	r3, r7, r3
   2821a:	1c02      	adds	r2, r0, #0
   2821c:	701a      	strb	r2, [r3, #0]
   2821e:	2300      	movs	r3, #0
   28220:	617b      	str	r3, [r7, #20]
   28222:	2300      	movs	r3, #0
   28224:	613b      	str	r3, [r7, #16]
   28226:	e01d      	b.n	28264 <_tcc_build_ctrla+0x58>
   28228:	68ba      	ldr	r2, [r7, #8]
   2822a:	693b      	ldr	r3, [r7, #16]
   2822c:	18d3      	adds	r3, r2, r3
   2822e:	3310      	adds	r3, #16
   28230:	781b      	ldrb	r3, [r3, #0]
   28232:	2b01      	cmp	r3, #1
   28234:	d113      	bne.n	2825e <_tcc_build_ctrla+0x52>
   28236:	230f      	movs	r3, #15
   28238:	18fb      	adds	r3, r7, r3
   2823a:	781b      	ldrb	r3, [r3, #0]
   2823c:	4a1b      	ldr	r2, [pc, #108]	; (282ac <_tcc_build_ctrla+0xa0>)
   2823e:	5cd3      	ldrb	r3, [r2, r3]
   28240:	001a      	movs	r2, r3
   28242:	693b      	ldr	r3, [r7, #16]
   28244:	429a      	cmp	r2, r3
   28246:	da01      	bge.n	2824c <_tcc_build_ctrla+0x40>
   28248:	2317      	movs	r3, #23
   2824a:	e02a      	b.n	282a2 <_tcc_build_ctrla+0x96>
   2824c:	2380      	movs	r3, #128	; 0x80
   2824e:	045a      	lsls	r2, r3, #17
   28250:	693b      	ldr	r3, [r7, #16]
   28252:	409a      	lsls	r2, r3
   28254:	0013      	movs	r3, r2
   28256:	001a      	movs	r2, r3
   28258:	697b      	ldr	r3, [r7, #20]
   2825a:	4313      	orrs	r3, r2
   2825c:	617b      	str	r3, [r7, #20]
   2825e:	693b      	ldr	r3, [r7, #16]
   28260:	3301      	adds	r3, #1
   28262:	613b      	str	r3, [r7, #16]
   28264:	693b      	ldr	r3, [r7, #16]
   28266:	2b03      	cmp	r3, #3
   28268:	ddde      	ble.n	28228 <_tcc_build_ctrla+0x1c>
   2826a:	68bb      	ldr	r3, [r7, #8]
   2826c:	22a1      	movs	r2, #161	; 0xa1
   2826e:	5c9b      	ldrb	r3, [r3, r2]
   28270:	2b00      	cmp	r3, #0
   28272:	d004      	beq.n	2827e <_tcc_build_ctrla+0x72>
   28274:	697b      	ldr	r3, [r7, #20]
   28276:	2280      	movs	r2, #128	; 0x80
   28278:	0112      	lsls	r2, r2, #4
   2827a:	4313      	orrs	r3, r2
   2827c:	617b      	str	r3, [r7, #20]
   2827e:	68bb      	ldr	r3, [r7, #8]
   28280:	7b1b      	ldrb	r3, [r3, #12]
   28282:	031b      	lsls	r3, r3, #12
   28284:	001a      	movs	r2, r3
   28286:	697b      	ldr	r3, [r7, #20]
   28288:	4313      	orrs	r3, r2
   2828a:	617b      	str	r3, [r7, #20]
   2828c:	68bb      	ldr	r3, [r7, #8]
   2828e:	7adb      	ldrb	r3, [r3, #11]
   28290:	021b      	lsls	r3, r3, #8
   28292:	001a      	movs	r2, r3
   28294:	697b      	ldr	r3, [r7, #20]
   28296:	4313      	orrs	r3, r2
   28298:	617b      	str	r3, [r7, #20]
   2829a:	687b      	ldr	r3, [r7, #4]
   2829c:	697a      	ldr	r2, [r7, #20]
   2829e:	601a      	str	r2, [r3, #0]
   282a0:	2300      	movs	r3, #0
   282a2:	0018      	movs	r0, r3
   282a4:	46bd      	mov	sp, r7
   282a6:	b006      	add	sp, #24
   282a8:	bd80      	pop	{r7, pc}
   282aa:	46c0      	nop			; (mov r8, r8)
   282ac:	000369ec 	.word	0x000369ec

000282b0 <_tcc_build_ctrlb>:
   282b0:	b580      	push	{r7, lr}
   282b2:	b086      	sub	sp, #24
   282b4:	af00      	add	r7, sp, #0
   282b6:	60b9      	str	r1, [r7, #8]
   282b8:	607a      	str	r2, [r7, #4]
   282ba:	230f      	movs	r3, #15
   282bc:	18fb      	adds	r3, r7, r3
   282be:	1c02      	adds	r2, r0, #0
   282c0:	701a      	strb	r2, [r3, #0]
   282c2:	2317      	movs	r3, #23
   282c4:	18fb      	adds	r3, r7, r3
   282c6:	2200      	movs	r2, #0
   282c8:	701a      	strb	r2, [r3, #0]
   282ca:	68bb      	ldr	r3, [r7, #8]
   282cc:	7a1b      	ldrb	r3, [r3, #8]
   282ce:	2b00      	cmp	r3, #0
   282d0:	d007      	beq.n	282e2 <_tcc_build_ctrlb+0x32>
   282d2:	2317      	movs	r3, #23
   282d4:	18fb      	adds	r3, r7, r3
   282d6:	2217      	movs	r2, #23
   282d8:	18ba      	adds	r2, r7, r2
   282da:	7812      	ldrb	r2, [r2, #0]
   282dc:	2104      	movs	r1, #4
   282de:	430a      	orrs	r2, r1
   282e0:	701a      	strb	r2, [r3, #0]
   282e2:	68bb      	ldr	r3, [r7, #8]
   282e4:	7a5b      	ldrb	r3, [r3, #9]
   282e6:	2b01      	cmp	r3, #1
   282e8:	d107      	bne.n	282fa <_tcc_build_ctrlb+0x4a>
   282ea:	2317      	movs	r3, #23
   282ec:	18fb      	adds	r3, r7, r3
   282ee:	2217      	movs	r2, #23
   282f0:	18ba      	adds	r2, r7, r2
   282f2:	7812      	ldrb	r2, [r2, #0]
   282f4:	2101      	movs	r1, #1
   282f6:	430a      	orrs	r2, r1
   282f8:	701a      	strb	r2, [r3, #0]
   282fa:	687b      	ldr	r3, [r7, #4]
   282fc:	2217      	movs	r2, #23
   282fe:	18ba      	adds	r2, r7, r2
   28300:	7812      	ldrb	r2, [r2, #0]
   28302:	701a      	strb	r2, [r3, #0]
   28304:	46c0      	nop			; (mov r8, r8)
   28306:	46bd      	mov	sp, r7
   28308:	b006      	add	sp, #24
   2830a:	bd80      	pop	{r7, pc}

0002830c <_tcc_build_faults>:
   2830c:	b580      	push	{r7, lr}
   2830e:	b088      	sub	sp, #32
   28310:	af00      	add	r7, sp, #0
   28312:	60b9      	str	r1, [r7, #8]
   28314:	607a      	str	r2, [r7, #4]
   28316:	230f      	movs	r3, #15
   28318:	18fb      	adds	r3, r7, r3
   2831a:	1c02      	adds	r2, r0, #0
   2831c:	701a      	strb	r2, [r3, #0]
   2831e:	230f      	movs	r3, #15
   28320:	18fb      	adds	r3, r7, r3
   28322:	781a      	ldrb	r2, [r3, #0]
   28324:	231b      	movs	r3, #27
   28326:	18fb      	adds	r3, r7, r3
   28328:	493e      	ldr	r1, [pc, #248]	; (28424 <_tcc_build_faults+0x118>)
   2832a:	5c8a      	ldrb	r2, [r1, r2]
   2832c:	701a      	strb	r2, [r3, #0]
   2832e:	2300      	movs	r3, #0
   28330:	61fb      	str	r3, [r7, #28]
   28332:	e06e      	b.n	28412 <_tcc_build_faults+0x106>
   28334:	69fa      	ldr	r2, [r7, #28]
   28336:	0013      	movs	r3, r2
   28338:	009b      	lsls	r3, r3, #2
   2833a:	189b      	adds	r3, r3, r2
   2833c:	005b      	lsls	r3, r3, #1
   2833e:	3328      	adds	r3, #40	; 0x28
   28340:	68ba      	ldr	r2, [r7, #8]
   28342:	18d3      	adds	r3, r2, r3
   28344:	3304      	adds	r3, #4
   28346:	617b      	str	r3, [r7, #20]
   28348:	697b      	ldr	r3, [r7, #20]
   2834a:	7a5b      	ldrb	r3, [r3, #9]
   2834c:	221b      	movs	r2, #27
   2834e:	18ba      	adds	r2, r7, r2
   28350:	7812      	ldrb	r2, [r2, #0]
   28352:	429a      	cmp	r2, r3
   28354:	d801      	bhi.n	2835a <_tcc_build_faults+0x4e>
   28356:	2317      	movs	r3, #23
   28358:	e05f      	b.n	2841a <_tcc_build_faults+0x10e>
   2835a:	697b      	ldr	r3, [r7, #20]
   2835c:	781b      	ldrb	r3, [r3, #0]
   2835e:	2b0f      	cmp	r3, #15
   28360:	d901      	bls.n	28366 <_tcc_build_faults+0x5a>
   28362:	2317      	movs	r3, #23
   28364:	e059      	b.n	2841a <_tcc_build_faults+0x10e>
   28366:	697b      	ldr	r3, [r7, #20]
   28368:	781b      	ldrb	r3, [r3, #0]
   2836a:	061b      	lsls	r3, r3, #24
   2836c:	001a      	movs	r2, r3
   2836e:	23f0      	movs	r3, #240	; 0xf0
   28370:	051b      	lsls	r3, r3, #20
   28372:	401a      	ands	r2, r3
   28374:	697b      	ldr	r3, [r7, #20]
   28376:	785b      	ldrb	r3, [r3, #1]
   28378:	041b      	lsls	r3, r3, #16
   2837a:	0019      	movs	r1, r3
   2837c:	23ff      	movs	r3, #255	; 0xff
   2837e:	041b      	lsls	r3, r3, #16
   28380:	400b      	ands	r3, r1
   28382:	431a      	orrs	r2, r3
   28384:	697b      	ldr	r3, [r7, #20]
   28386:	789b      	ldrb	r3, [r3, #2]
   28388:	2b00      	cmp	r3, #0
   2838a:	d001      	beq.n	28390 <_tcc_build_faults+0x84>
   2838c:	2380      	movs	r3, #128	; 0x80
   2838e:	e000      	b.n	28392 <_tcc_build_faults+0x86>
   28390:	2300      	movs	r3, #0
   28392:	431a      	orrs	r2, r3
   28394:	697b      	ldr	r3, [r7, #20]
   28396:	78db      	ldrb	r3, [r3, #3]
   28398:	2b00      	cmp	r3, #0
   2839a:	d001      	beq.n	283a0 <_tcc_build_faults+0x94>
   2839c:	2308      	movs	r3, #8
   2839e:	e000      	b.n	283a2 <_tcc_build_faults+0x96>
   283a0:	2300      	movs	r3, #0
   283a2:	431a      	orrs	r2, r3
   283a4:	697b      	ldr	r3, [r7, #20]
   283a6:	791b      	ldrb	r3, [r3, #4]
   283a8:	2b00      	cmp	r3, #0
   283aa:	d001      	beq.n	283b0 <_tcc_build_faults+0xa4>
   283ac:	2310      	movs	r3, #16
   283ae:	e000      	b.n	283b2 <_tcc_build_faults+0xa6>
   283b0:	2300      	movs	r3, #0
   283b2:	431a      	orrs	r2, r3
   283b4:	697b      	ldr	r3, [r7, #20]
   283b6:	795b      	ldrb	r3, [r3, #5]
   283b8:	0019      	movs	r1, r3
   283ba:	2303      	movs	r3, #3
   283bc:	400b      	ands	r3, r1
   283be:	431a      	orrs	r2, r3
   283c0:	697b      	ldr	r3, [r7, #20]
   283c2:	799b      	ldrb	r3, [r3, #6]
   283c4:	015b      	lsls	r3, r3, #5
   283c6:	0019      	movs	r1, r3
   283c8:	2360      	movs	r3, #96	; 0x60
   283ca:	400b      	ands	r3, r1
   283cc:	431a      	orrs	r2, r3
   283ce:	697b      	ldr	r3, [r7, #20]
   283d0:	79db      	ldrb	r3, [r3, #7]
   283d2:	021b      	lsls	r3, r3, #8
   283d4:	0019      	movs	r1, r3
   283d6:	23c0      	movs	r3, #192	; 0xc0
   283d8:	009b      	lsls	r3, r3, #2
   283da:	400b      	ands	r3, r1
   283dc:	431a      	orrs	r2, r3
   283de:	697b      	ldr	r3, [r7, #20]
   283e0:	7a1b      	ldrb	r3, [r3, #8]
   283e2:	031b      	lsls	r3, r3, #12
   283e4:	0019      	movs	r1, r3
   283e6:	23e0      	movs	r3, #224	; 0xe0
   283e8:	01db      	lsls	r3, r3, #7
   283ea:	400b      	ands	r3, r1
   283ec:	431a      	orrs	r2, r3
   283ee:	697b      	ldr	r3, [r7, #20]
   283f0:	7a5b      	ldrb	r3, [r3, #9]
   283f2:	029b      	lsls	r3, r3, #10
   283f4:	0019      	movs	r1, r3
   283f6:	23c0      	movs	r3, #192	; 0xc0
   283f8:	011b      	lsls	r3, r3, #4
   283fa:	400b      	ands	r3, r1
   283fc:	4313      	orrs	r3, r2
   283fe:	613b      	str	r3, [r7, #16]
   28400:	69fb      	ldr	r3, [r7, #28]
   28402:	009b      	lsls	r3, r3, #2
   28404:	687a      	ldr	r2, [r7, #4]
   28406:	18d3      	adds	r3, r2, r3
   28408:	693a      	ldr	r2, [r7, #16]
   2840a:	601a      	str	r2, [r3, #0]
   2840c:	69fb      	ldr	r3, [r7, #28]
   2840e:	3301      	adds	r3, #1
   28410:	61fb      	str	r3, [r7, #28]
   28412:	69fb      	ldr	r3, [r7, #28]
   28414:	2b01      	cmp	r3, #1
   28416:	dd8d      	ble.n	28334 <_tcc_build_faults+0x28>
   28418:	2300      	movs	r3, #0
   2841a:	0018      	movs	r0, r3
   2841c:	46bd      	mov	sp, r7
   2841e:	b008      	add	sp, #32
   28420:	bd80      	pop	{r7, pc}
   28422:	46c0      	nop			; (mov r8, r8)
   28424:	000369ec 	.word	0x000369ec

00028428 <_tcc_build_drvctrl>:
   28428:	b580      	push	{r7, lr}
   2842a:	b088      	sub	sp, #32
   2842c:	af00      	add	r7, sp, #0
   2842e:	60b9      	str	r1, [r7, #8]
   28430:	607a      	str	r2, [r7, #4]
   28432:	230f      	movs	r3, #15
   28434:	18fb      	adds	r3, r7, r3
   28436:	1c02      	adds	r2, r0, #0
   28438:	701a      	strb	r2, [r3, #0]
   2843a:	230f      	movs	r3, #15
   2843c:	18fb      	adds	r3, r7, r3
   2843e:	781a      	ldrb	r2, [r3, #0]
   28440:	2317      	movs	r3, #23
   28442:	18fb      	adds	r3, r7, r3
   28444:	492d      	ldr	r1, [pc, #180]	; (284fc <_tcc_build_drvctrl+0xd4>)
   28446:	5c8a      	ldrb	r2, [r1, r2]
   28448:	701a      	strb	r2, [r3, #0]
   2844a:	2300      	movs	r3, #0
   2844c:	61bb      	str	r3, [r7, #24]
   2844e:	2300      	movs	r3, #0
   28450:	61fb      	str	r3, [r7, #28]
   28452:	e048      	b.n	284e6 <_tcc_build_drvctrl+0xbe>
   28454:	68ba      	ldr	r2, [r7, #8]
   28456:	2150      	movs	r1, #80	; 0x50
   28458:	69fb      	ldr	r3, [r7, #28]
   2845a:	18d3      	adds	r3, r2, r3
   2845c:	185b      	adds	r3, r3, r1
   2845e:	781b      	ldrb	r3, [r3, #0]
   28460:	2b00      	cmp	r3, #0
   28462:	d010      	beq.n	28486 <_tcc_build_drvctrl+0x5e>
   28464:	2317      	movs	r3, #23
   28466:	18fb      	adds	r3, r7, r3
   28468:	781a      	ldrb	r2, [r3, #0]
   2846a:	69fb      	ldr	r3, [r7, #28]
   2846c:	429a      	cmp	r2, r3
   2846e:	d801      	bhi.n	28474 <_tcc_build_drvctrl+0x4c>
   28470:	2317      	movs	r3, #23
   28472:	e03f      	b.n	284f4 <_tcc_build_drvctrl+0xcc>
   28474:	2380      	movs	r3, #128	; 0x80
   28476:	025a      	lsls	r2, r3, #9
   28478:	69fb      	ldr	r3, [r7, #28]
   2847a:	409a      	lsls	r2, r3
   2847c:	0013      	movs	r3, r2
   2847e:	001a      	movs	r2, r3
   28480:	69bb      	ldr	r3, [r7, #24]
   28482:	4313      	orrs	r3, r2
   28484:	61bb      	str	r3, [r7, #24]
   28486:	68ba      	ldr	r2, [r7, #8]
   28488:	69fb      	ldr	r3, [r7, #28]
   2848a:	331c      	adds	r3, #28
   2848c:	005b      	lsls	r3, r3, #1
   2848e:	18d3      	adds	r3, r2, r3
   28490:	3309      	adds	r3, #9
   28492:	781b      	ldrb	r3, [r3, #0]
   28494:	2b00      	cmp	r3, #0
   28496:	d023      	beq.n	284e0 <_tcc_build_drvctrl+0xb8>
   28498:	2317      	movs	r3, #23
   2849a:	18fb      	adds	r3, r7, r3
   2849c:	781a      	ldrb	r2, [r3, #0]
   2849e:	69fb      	ldr	r3, [r7, #28]
   284a0:	429a      	cmp	r2, r3
   284a2:	d801      	bhi.n	284a8 <_tcc_build_drvctrl+0x80>
   284a4:	2317      	movs	r3, #23
   284a6:	e025      	b.n	284f4 <_tcc_build_drvctrl+0xcc>
   284a8:	68ba      	ldr	r2, [r7, #8]
   284aa:	69fb      	ldr	r3, [r7, #28]
   284ac:	331c      	adds	r3, #28
   284ae:	005b      	lsls	r3, r3, #1
   284b0:	18d3      	adds	r3, r2, r3
   284b2:	3309      	adds	r3, #9
   284b4:	781b      	ldrb	r3, [r3, #0]
   284b6:	2b02      	cmp	r3, #2
   284b8:	d10a      	bne.n	284d0 <_tcc_build_drvctrl+0xa8>
   284ba:	2302      	movs	r3, #2
   284bc:	33ff      	adds	r3, #255	; 0xff
   284be:	001a      	movs	r2, r3
   284c0:	69fb      	ldr	r3, [r7, #28]
   284c2:	409a      	lsls	r2, r3
   284c4:	0013      	movs	r3, r2
   284c6:	001a      	movs	r2, r3
   284c8:	69bb      	ldr	r3, [r7, #24]
   284ca:	4313      	orrs	r3, r2
   284cc:	61bb      	str	r3, [r7, #24]
   284ce:	e007      	b.n	284e0 <_tcc_build_drvctrl+0xb8>
   284d0:	2201      	movs	r2, #1
   284d2:	69fb      	ldr	r3, [r7, #28]
   284d4:	409a      	lsls	r2, r3
   284d6:	0013      	movs	r3, r2
   284d8:	001a      	movs	r2, r3
   284da:	69bb      	ldr	r3, [r7, #24]
   284dc:	4313      	orrs	r3, r2
   284de:	61bb      	str	r3, [r7, #24]
   284e0:	69fb      	ldr	r3, [r7, #28]
   284e2:	3301      	adds	r3, #1
   284e4:	61fb      	str	r3, [r7, #28]
   284e6:	69fb      	ldr	r3, [r7, #28]
   284e8:	2b07      	cmp	r3, #7
   284ea:	d9b3      	bls.n	28454 <_tcc_build_drvctrl+0x2c>
   284ec:	687b      	ldr	r3, [r7, #4]
   284ee:	69ba      	ldr	r2, [r7, #24]
   284f0:	601a      	str	r2, [r3, #0]
   284f2:	2300      	movs	r3, #0
   284f4:	0018      	movs	r0, r3
   284f6:	46bd      	mov	sp, r7
   284f8:	b008      	add	sp, #32
   284fa:	bd80      	pop	{r7, pc}
   284fc:	000369f0 	.word	0x000369f0

00028500 <_tcc_build_waves>:
   28500:	b580      	push	{r7, lr}
   28502:	b088      	sub	sp, #32
   28504:	af00      	add	r7, sp, #0
   28506:	60b9      	str	r1, [r7, #8]
   28508:	607a      	str	r2, [r7, #4]
   2850a:	230f      	movs	r3, #15
   2850c:	18fb      	adds	r3, r7, r3
   2850e:	1c02      	adds	r2, r0, #0
   28510:	701a      	strb	r2, [r3, #0]
   28512:	230f      	movs	r3, #15
   28514:	18fb      	adds	r3, r7, r3
   28516:	781a      	ldrb	r2, [r3, #0]
   28518:	2317      	movs	r3, #23
   2851a:	18fb      	adds	r3, r7, r3
   2851c:	491d      	ldr	r1, [pc, #116]	; (28594 <_tcc_build_waves+0x94>)
   2851e:	5c8a      	ldrb	r2, [r1, r2]
   28520:	701a      	strb	r2, [r3, #0]
   28522:	68bb      	ldr	r3, [r7, #8]
   28524:	3310      	adds	r3, #16
   28526:	613b      	str	r3, [r7, #16]
   28528:	693b      	ldr	r3, [r7, #16]
   2852a:	7a5b      	ldrb	r3, [r3, #9]
   2852c:	011b      	lsls	r3, r3, #4
   2852e:	001a      	movs	r2, r3
   28530:	2330      	movs	r3, #48	; 0x30
   28532:	401a      	ands	r2, r3
   28534:	693b      	ldr	r3, [r7, #16]
   28536:	7a1b      	ldrb	r3, [r3, #8]
   28538:	0019      	movs	r1, r3
   2853a:	2307      	movs	r3, #7
   2853c:	400b      	ands	r3, r1
   2853e:	4313      	orrs	r3, r2
   28540:	61bb      	str	r3, [r7, #24]
   28542:	2300      	movs	r3, #0
   28544:	61fb      	str	r3, [r7, #28]
   28546:	e01a      	b.n	2857e <_tcc_build_waves+0x7e>
   28548:	693a      	ldr	r2, [r7, #16]
   2854a:	69fb      	ldr	r3, [r7, #28]
   2854c:	18d3      	adds	r3, r2, r3
   2854e:	3304      	adds	r3, #4
   28550:	781b      	ldrb	r3, [r3, #0]
   28552:	2b00      	cmp	r3, #0
   28554:	d010      	beq.n	28578 <_tcc_build_waves+0x78>
   28556:	2317      	movs	r3, #23
   28558:	18fb      	adds	r3, r7, r3
   2855a:	781a      	ldrb	r2, [r3, #0]
   2855c:	69fb      	ldr	r3, [r7, #28]
   2855e:	429a      	cmp	r2, r3
   28560:	dc01      	bgt.n	28566 <_tcc_build_waves+0x66>
   28562:	2317      	movs	r3, #23
   28564:	e012      	b.n	2858c <_tcc_build_waves+0x8c>
   28566:	2380      	movs	r3, #128	; 0x80
   28568:	025a      	lsls	r2, r3, #9
   2856a:	69fb      	ldr	r3, [r7, #28]
   2856c:	409a      	lsls	r2, r3
   2856e:	0013      	movs	r3, r2
   28570:	001a      	movs	r2, r3
   28572:	69bb      	ldr	r3, [r7, #24]
   28574:	4313      	orrs	r3, r2
   28576:	61bb      	str	r3, [r7, #24]
   28578:	69fb      	ldr	r3, [r7, #28]
   2857a:	3301      	adds	r3, #1
   2857c:	61fb      	str	r3, [r7, #28]
   2857e:	69fb      	ldr	r3, [r7, #28]
   28580:	2b03      	cmp	r3, #3
   28582:	dde1      	ble.n	28548 <_tcc_build_waves+0x48>
   28584:	687b      	ldr	r3, [r7, #4]
   28586:	69ba      	ldr	r2, [r7, #24]
   28588:	601a      	str	r2, [r3, #0]
   2858a:	2300      	movs	r3, #0
   2858c:	0018      	movs	r0, r3
   2858e:	46bd      	mov	sp, r7
   28590:	b008      	add	sp, #32
   28592:	bd80      	pop	{r7, pc}
   28594:	000369ec 	.word	0x000369ec

00028598 <tcc_init>:
   28598:	b590      	push	{r4, r7, lr}
   2859a:	b091      	sub	sp, #68	; 0x44
   2859c:	af00      	add	r7, sp, #0
   2859e:	60f8      	str	r0, [r7, #12]
   285a0:	60b9      	str	r1, [r7, #8]
   285a2:	607a      	str	r2, [r7, #4]
   285a4:	233b      	movs	r3, #59	; 0x3b
   285a6:	18fc      	adds	r4, r7, r3
   285a8:	68bb      	ldr	r3, [r7, #8]
   285aa:	0018      	movs	r0, r3
   285ac:	4bc4      	ldr	r3, [pc, #784]	; (288c0 <tcc_init+0x328>)
   285ae:	4798      	blx	r3
   285b0:	0003      	movs	r3, r0
   285b2:	7023      	strb	r3, [r4, #0]
   285b4:	233b      	movs	r3, #59	; 0x3b
   285b6:	18fb      	adds	r3, r7, r3
   285b8:	781a      	ldrb	r2, [r3, #0]
   285ba:	4bc2      	ldr	r3, [pc, #776]	; (288c4 <tcc_init+0x32c>)
   285bc:	0092      	lsls	r2, r2, #2
   285be:	58d3      	ldr	r3, [r2, r3]
   285c0:	0019      	movs	r1, r3
   285c2:	2002      	movs	r0, #2
   285c4:	4bc0      	ldr	r3, [pc, #768]	; (288c8 <tcc_init+0x330>)
   285c6:	4798      	blx	r3
   285c8:	68bb      	ldr	r3, [r7, #8]
   285ca:	681b      	ldr	r3, [r3, #0]
   285cc:	2202      	movs	r2, #2
   285ce:	4013      	ands	r3, r2
   285d0:	d001      	beq.n	285d6 <tcc_init+0x3e>
   285d2:	231c      	movs	r3, #28
   285d4:	e1be      	b.n	28954 <tcc_init+0x3bc>
   285d6:	68bb      	ldr	r3, [r7, #8]
   285d8:	681b      	ldr	r3, [r3, #0]
   285da:	2201      	movs	r2, #1
   285dc:	4013      	ands	r3, r2
   285de:	d001      	beq.n	285e4 <tcc_init+0x4c>
   285e0:	231c      	movs	r3, #28
   285e2:	e1b7      	b.n	28954 <tcc_init+0x3bc>
   285e4:	233b      	movs	r3, #59	; 0x3b
   285e6:	18fb      	adds	r3, r7, r3
   285e8:	781a      	ldrb	r2, [r3, #0]
   285ea:	4bb8      	ldr	r3, [pc, #736]	; (288cc <tcc_init+0x334>)
   285ec:	0092      	lsls	r2, r2, #2
   285ee:	58d3      	ldr	r3, [r2, r3]
   285f0:	637b      	str	r3, [r7, #52]	; 0x34
   285f2:	687b      	ldr	r3, [r7, #4]
   285f4:	681a      	ldr	r2, [r3, #0]
   285f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   285f8:	429a      	cmp	r2, r3
   285fa:	d804      	bhi.n	28606 <tcc_init+0x6e>
   285fc:	687b      	ldr	r3, [r7, #4]
   285fe:	685a      	ldr	r2, [r3, #4]
   28600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28602:	429a      	cmp	r2, r3
   28604:	d901      	bls.n	2860a <tcc_init+0x72>
   28606:	2317      	movs	r3, #23
   28608:	e1a4      	b.n	28954 <tcc_init+0x3bc>
   2860a:	2300      	movs	r3, #0
   2860c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2860e:	e00e      	b.n	2862e <tcc_init+0x96>
   28610:	687a      	ldr	r2, [r7, #4]
   28612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28614:	3306      	adds	r3, #6
   28616:	009b      	lsls	r3, r3, #2
   28618:	18d3      	adds	r3, r2, r3
   2861a:	3304      	adds	r3, #4
   2861c:	681a      	ldr	r2, [r3, #0]
   2861e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28620:	429a      	cmp	r2, r3
   28622:	d901      	bls.n	28628 <tcc_init+0x90>
   28624:	2317      	movs	r3, #23
   28626:	e195      	b.n	28954 <tcc_init+0x3bc>
   28628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2862a:	3301      	adds	r3, #1
   2862c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2862e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28630:	2b03      	cmp	r3, #3
   28632:	dded      	ble.n	28610 <tcc_init+0x78>
   28634:	2300      	movs	r3, #0
   28636:	63fb      	str	r3, [r7, #60]	; 0x3c
   28638:	e019      	b.n	2866e <tcc_init+0xd6>
   2863a:	687a      	ldr	r2, [r7, #4]
   2863c:	2198      	movs	r1, #152	; 0x98
   2863e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28640:	18d3      	adds	r3, r2, r3
   28642:	185b      	adds	r3, r3, r1
   28644:	781b      	ldrb	r3, [r3, #0]
   28646:	2201      	movs	r2, #1
   28648:	4053      	eors	r3, r2
   2864a:	b2db      	uxtb	r3, r3
   2864c:	2b00      	cmp	r3, #0
   2864e:	d10a      	bne.n	28666 <tcc_init+0xce>
   28650:	233b      	movs	r3, #59	; 0x3b
   28652:	18fb      	adds	r3, r7, r3
   28654:	781b      	ldrb	r3, [r3, #0]
   28656:	4a9e      	ldr	r2, [pc, #632]	; (288d0 <tcc_init+0x338>)
   28658:	5cd3      	ldrb	r3, [r2, r3]
   2865a:	001a      	movs	r2, r3
   2865c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2865e:	429a      	cmp	r2, r3
   28660:	dc02      	bgt.n	28668 <tcc_init+0xd0>
   28662:	2317      	movs	r3, #23
   28664:	e176      	b.n	28954 <tcc_init+0x3bc>
   28666:	46c0      	nop			; (mov r8, r8)
   28668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2866a:	3301      	adds	r3, #1
   2866c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2866e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28670:	2b07      	cmp	r3, #7
   28672:	dde2      	ble.n	2863a <tcc_init+0xa2>
   28674:	2300      	movs	r3, #0
   28676:	62fb      	str	r3, [r7, #44]	; 0x2c
   28678:	2333      	movs	r3, #51	; 0x33
   2867a:	18fc      	adds	r4, r7, r3
   2867c:	232c      	movs	r3, #44	; 0x2c
   2867e:	18fa      	adds	r2, r7, r3
   28680:	6879      	ldr	r1, [r7, #4]
   28682:	233b      	movs	r3, #59	; 0x3b
   28684:	18fb      	adds	r3, r7, r3
   28686:	781b      	ldrb	r3, [r3, #0]
   28688:	0018      	movs	r0, r3
   2868a:	4b92      	ldr	r3, [pc, #584]	; (288d4 <tcc_init+0x33c>)
   2868c:	4798      	blx	r3
   2868e:	0003      	movs	r3, r0
   28690:	7023      	strb	r3, [r4, #0]
   28692:	2333      	movs	r3, #51	; 0x33
   28694:	18fb      	adds	r3, r7, r3
   28696:	781b      	ldrb	r3, [r3, #0]
   28698:	2b00      	cmp	r3, #0
   2869a:	d003      	beq.n	286a4 <tcc_init+0x10c>
   2869c:	2333      	movs	r3, #51	; 0x33
   2869e:	18fb      	adds	r3, r7, r3
   286a0:	781b      	ldrb	r3, [r3, #0]
   286a2:	e157      	b.n	28954 <tcc_init+0x3bc>
   286a4:	232b      	movs	r3, #43	; 0x2b
   286a6:	18fa      	adds	r2, r7, r3
   286a8:	6879      	ldr	r1, [r7, #4]
   286aa:	233b      	movs	r3, #59	; 0x3b
   286ac:	18fb      	adds	r3, r7, r3
   286ae:	781b      	ldrb	r3, [r3, #0]
   286b0:	0018      	movs	r0, r3
   286b2:	4b89      	ldr	r3, [pc, #548]	; (288d8 <tcc_init+0x340>)
   286b4:	4798      	blx	r3
   286b6:	2333      	movs	r3, #51	; 0x33
   286b8:	18fc      	adds	r4, r7, r3
   286ba:	2320      	movs	r3, #32
   286bc:	18fa      	adds	r2, r7, r3
   286be:	6879      	ldr	r1, [r7, #4]
   286c0:	233b      	movs	r3, #59	; 0x3b
   286c2:	18fb      	adds	r3, r7, r3
   286c4:	781b      	ldrb	r3, [r3, #0]
   286c6:	0018      	movs	r0, r3
   286c8:	4b84      	ldr	r3, [pc, #528]	; (288dc <tcc_init+0x344>)
   286ca:	4798      	blx	r3
   286cc:	0003      	movs	r3, r0
   286ce:	7023      	strb	r3, [r4, #0]
   286d0:	2333      	movs	r3, #51	; 0x33
   286d2:	18fb      	adds	r3, r7, r3
   286d4:	781b      	ldrb	r3, [r3, #0]
   286d6:	2b00      	cmp	r3, #0
   286d8:	d003      	beq.n	286e2 <tcc_init+0x14a>
   286da:	2333      	movs	r3, #51	; 0x33
   286dc:	18fb      	adds	r3, r7, r3
   286de:	781b      	ldrb	r3, [r3, #0]
   286e0:	e138      	b.n	28954 <tcc_init+0x3bc>
   286e2:	2300      	movs	r3, #0
   286e4:	61fb      	str	r3, [r7, #28]
   286e6:	2333      	movs	r3, #51	; 0x33
   286e8:	18fc      	adds	r4, r7, r3
   286ea:	231c      	movs	r3, #28
   286ec:	18fa      	adds	r2, r7, r3
   286ee:	6879      	ldr	r1, [r7, #4]
   286f0:	233b      	movs	r3, #59	; 0x3b
   286f2:	18fb      	adds	r3, r7, r3
   286f4:	781b      	ldrb	r3, [r3, #0]
   286f6:	0018      	movs	r0, r3
   286f8:	4b79      	ldr	r3, [pc, #484]	; (288e0 <tcc_init+0x348>)
   286fa:	4798      	blx	r3
   286fc:	0003      	movs	r3, r0
   286fe:	7023      	strb	r3, [r4, #0]
   28700:	2333      	movs	r3, #51	; 0x33
   28702:	18fb      	adds	r3, r7, r3
   28704:	781b      	ldrb	r3, [r3, #0]
   28706:	2b00      	cmp	r3, #0
   28708:	d003      	beq.n	28712 <tcc_init+0x17a>
   2870a:	2333      	movs	r3, #51	; 0x33
   2870c:	18fb      	adds	r3, r7, r3
   2870e:	781b      	ldrb	r3, [r3, #0]
   28710:	e120      	b.n	28954 <tcc_init+0x3bc>
   28712:	2333      	movs	r3, #51	; 0x33
   28714:	18fc      	adds	r4, r7, r3
   28716:	2318      	movs	r3, #24
   28718:	18fa      	adds	r2, r7, r3
   2871a:	6879      	ldr	r1, [r7, #4]
   2871c:	233b      	movs	r3, #59	; 0x3b
   2871e:	18fb      	adds	r3, r7, r3
   28720:	781b      	ldrb	r3, [r3, #0]
   28722:	0018      	movs	r0, r3
   28724:	4b6f      	ldr	r3, [pc, #444]	; (288e4 <tcc_init+0x34c>)
   28726:	4798      	blx	r3
   28728:	0003      	movs	r3, r0
   2872a:	7023      	strb	r3, [r4, #0]
   2872c:	2333      	movs	r3, #51	; 0x33
   2872e:	18fb      	adds	r3, r7, r3
   28730:	781b      	ldrb	r3, [r3, #0]
   28732:	2b00      	cmp	r3, #0
   28734:	d003      	beq.n	2873e <tcc_init+0x1a6>
   28736:	2333      	movs	r3, #51	; 0x33
   28738:	18fb      	adds	r3, r7, r3
   2873a:	781b      	ldrb	r3, [r3, #0]
   2873c:	e10a      	b.n	28954 <tcc_init+0x3bc>
   2873e:	2300      	movs	r3, #0
   28740:	63fb      	str	r3, [r7, #60]	; 0x3c
   28742:	e009      	b.n	28758 <tcc_init+0x1c0>
   28744:	68fa      	ldr	r2, [r7, #12]
   28746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28748:	009b      	lsls	r3, r3, #2
   2874a:	18d3      	adds	r3, r2, r3
   2874c:	3304      	adds	r3, #4
   2874e:	2200      	movs	r2, #0
   28750:	601a      	str	r2, [r3, #0]
   28752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28754:	3301      	adds	r3, #1
   28756:	63fb      	str	r3, [r7, #60]	; 0x3c
   28758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2875a:	2b0b      	cmp	r3, #11
   2875c:	ddf2      	ble.n	28744 <tcc_init+0x1ac>
   2875e:	68fb      	ldr	r3, [r7, #12]
   28760:	2200      	movs	r2, #0
   28762:	635a      	str	r2, [r3, #52]	; 0x34
   28764:	68fb      	ldr	r3, [r7, #12]
   28766:	2200      	movs	r2, #0
   28768:	639a      	str	r2, [r3, #56]	; 0x38
   2876a:	233b      	movs	r3, #59	; 0x3b
   2876c:	18fb      	adds	r3, r7, r3
   2876e:	781a      	ldrb	r2, [r3, #0]
   28770:	4b5d      	ldr	r3, [pc, #372]	; (288e8 <tcc_init+0x350>)
   28772:	0092      	lsls	r2, r2, #2
   28774:	68f9      	ldr	r1, [r7, #12]
   28776:	50d1      	str	r1, [r2, r3]
   28778:	68fb      	ldr	r3, [r7, #12]
   2877a:	68ba      	ldr	r2, [r7, #8]
   2877c:	601a      	str	r2, [r3, #0]
   2877e:	687b      	ldr	r3, [r7, #4]
   28780:	22a0      	movs	r2, #160	; 0xa0
   28782:	5c99      	ldrb	r1, [r3, r2]
   28784:	68fb      	ldr	r3, [r7, #12]
   28786:	223c      	movs	r2, #60	; 0x3c
   28788:	5499      	strb	r1, [r3, r2]
   2878a:	2314      	movs	r3, #20
   2878c:	18fb      	adds	r3, r7, r3
   2878e:	0018      	movs	r0, r3
   28790:	4b56      	ldr	r3, [pc, #344]	; (288ec <tcc_init+0x354>)
   28792:	4798      	blx	r3
   28794:	687b      	ldr	r3, [r7, #4]
   28796:	7a9a      	ldrb	r2, [r3, #10]
   28798:	2314      	movs	r3, #20
   2879a:	18fb      	adds	r3, r7, r3
   2879c:	701a      	strb	r2, [r3, #0]
   2879e:	233b      	movs	r3, #59	; 0x3b
   287a0:	18fb      	adds	r3, r7, r3
   287a2:	781b      	ldrb	r3, [r3, #0]
   287a4:	4a52      	ldr	r2, [pc, #328]	; (288f0 <tcc_init+0x358>)
   287a6:	5cd3      	ldrb	r3, [r2, r3]
   287a8:	2214      	movs	r2, #20
   287aa:	18ba      	adds	r2, r7, r2
   287ac:	0011      	movs	r1, r2
   287ae:	0018      	movs	r0, r3
   287b0:	4b50      	ldr	r3, [pc, #320]	; (288f4 <tcc_init+0x35c>)
   287b2:	4798      	blx	r3
   287b4:	233b      	movs	r3, #59	; 0x3b
   287b6:	18fb      	adds	r3, r7, r3
   287b8:	781b      	ldrb	r3, [r3, #0]
   287ba:	4a4d      	ldr	r2, [pc, #308]	; (288f0 <tcc_init+0x358>)
   287bc:	5cd3      	ldrb	r3, [r2, r3]
   287be:	0018      	movs	r0, r3
   287c0:	4b4d      	ldr	r3, [pc, #308]	; (288f8 <tcc_init+0x360>)
   287c2:	4798      	blx	r3
   287c4:	2300      	movs	r3, #0
   287c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   287c8:	e02d      	b.n	28826 <tcc_init+0x28e>
   287ca:	687a      	ldr	r2, [r7, #4]
   287cc:	2198      	movs	r1, #152	; 0x98
   287ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   287d0:	18d3      	adds	r3, r2, r3
   287d2:	185b      	adds	r3, r3, r1
   287d4:	781b      	ldrb	r3, [r3, #0]
   287d6:	2201      	movs	r2, #1
   287d8:	4053      	eors	r3, r2
   287da:	b2db      	uxtb	r3, r3
   287dc:	2b00      	cmp	r3, #0
   287de:	d11e      	bne.n	2881e <tcc_init+0x286>
   287e0:	2310      	movs	r3, #16
   287e2:	18fb      	adds	r3, r7, r3
   287e4:	0018      	movs	r0, r3
   287e6:	4b45      	ldr	r3, [pc, #276]	; (288fc <tcc_init+0x364>)
   287e8:	4798      	blx	r3
   287ea:	687b      	ldr	r3, [r7, #4]
   287ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   287ee:	321e      	adds	r2, #30
   287f0:	0092      	lsls	r2, r2, #2
   287f2:	58d3      	ldr	r3, [r2, r3]
   287f4:	b2da      	uxtb	r2, r3
   287f6:	2310      	movs	r3, #16
   287f8:	18fb      	adds	r3, r7, r3
   287fa:	701a      	strb	r2, [r3, #0]
   287fc:	2310      	movs	r3, #16
   287fe:	18fb      	adds	r3, r7, r3
   28800:	2201      	movs	r2, #1
   28802:	705a      	strb	r2, [r3, #1]
   28804:	687b      	ldr	r3, [r7, #4]
   28806:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28808:	3216      	adds	r2, #22
   2880a:	0092      	lsls	r2, r2, #2
   2880c:	58d3      	ldr	r3, [r2, r3]
   2880e:	b2db      	uxtb	r3, r3
   28810:	2210      	movs	r2, #16
   28812:	18ba      	adds	r2, r7, r2
   28814:	0011      	movs	r1, r2
   28816:	0018      	movs	r0, r3
   28818:	4b39      	ldr	r3, [pc, #228]	; (28900 <tcc_init+0x368>)
   2881a:	4798      	blx	r3
   2881c:	e000      	b.n	28820 <tcc_init+0x288>
   2881e:	46c0      	nop			; (mov r8, r8)
   28820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28822:	3301      	adds	r3, #1
   28824:	63fb      	str	r3, [r7, #60]	; 0x3c
   28826:	233b      	movs	r3, #59	; 0x3b
   28828:	18fb      	adds	r3, r7, r3
   2882a:	781b      	ldrb	r3, [r3, #0]
   2882c:	4a28      	ldr	r2, [pc, #160]	; (288d0 <tcc_init+0x338>)
   2882e:	5cd3      	ldrb	r3, [r2, r3]
   28830:	001a      	movs	r2, r3
   28832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28834:	429a      	cmp	r2, r3
   28836:	dcc8      	bgt.n	287ca <tcc_init+0x232>
   28838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2883a:	68bb      	ldr	r3, [r7, #8]
   2883c:	601a      	str	r2, [r3, #0]
   2883e:	46c0      	nop			; (mov r8, r8)
   28840:	68bb      	ldr	r3, [r7, #8]
   28842:	689b      	ldr	r3, [r3, #8]
   28844:	2204      	movs	r2, #4
   28846:	4013      	ands	r3, r2
   28848:	d1fa      	bne.n	28840 <tcc_init+0x2a8>
   2884a:	68bb      	ldr	r3, [r7, #8]
   2884c:	22ff      	movs	r2, #255	; 0xff
   2884e:	711a      	strb	r2, [r3, #4]
   28850:	46c0      	nop			; (mov r8, r8)
   28852:	68bb      	ldr	r3, [r7, #8]
   28854:	689b      	ldr	r3, [r3, #8]
   28856:	2204      	movs	r2, #4
   28858:	4013      	ands	r3, r2
   2885a:	d1fa      	bne.n	28852 <tcc_init+0x2ba>
   2885c:	232b      	movs	r3, #43	; 0x2b
   2885e:	18fb      	adds	r3, r7, r3
   28860:	781a      	ldrb	r2, [r3, #0]
   28862:	68bb      	ldr	r3, [r7, #8]
   28864:	715a      	strb	r2, [r3, #5]
   28866:	2320      	movs	r3, #32
   28868:	18fb      	adds	r3, r7, r3
   2886a:	681a      	ldr	r2, [r3, #0]
   2886c:	68bb      	ldr	r3, [r7, #8]
   2886e:	60da      	str	r2, [r3, #12]
   28870:	2320      	movs	r3, #32
   28872:	18fb      	adds	r3, r7, r3
   28874:	685a      	ldr	r2, [r3, #4]
   28876:	68bb      	ldr	r3, [r7, #8]
   28878:	611a      	str	r2, [r3, #16]
   2887a:	69fa      	ldr	r2, [r7, #28]
   2887c:	68bb      	ldr	r3, [r7, #8]
   2887e:	619a      	str	r2, [r3, #24]
   28880:	46c0      	nop			; (mov r8, r8)
   28882:	68bb      	ldr	r3, [r7, #8]
   28884:	689b      	ldr	r3, [r3, #8]
   28886:	4a1f      	ldr	r2, [pc, #124]	; (28904 <tcc_init+0x36c>)
   28888:	4013      	ands	r3, r2
   2888a:	d1fa      	bne.n	28882 <tcc_init+0x2ea>
   2888c:	69ba      	ldr	r2, [r7, #24]
   2888e:	68bb      	ldr	r3, [r7, #8]
   28890:	63da      	str	r2, [r3, #60]	; 0x3c
   28892:	46c0      	nop			; (mov r8, r8)
   28894:	68bb      	ldr	r3, [r7, #8]
   28896:	689b      	ldr	r3, [r3, #8]
   28898:	2210      	movs	r2, #16
   2889a:	4013      	ands	r3, r2
   2889c:	d1fa      	bne.n	28894 <tcc_init+0x2fc>
   2889e:	687b      	ldr	r3, [r7, #4]
   288a0:	681a      	ldr	r2, [r3, #0]
   288a2:	68bb      	ldr	r3, [r7, #8]
   288a4:	635a      	str	r2, [r3, #52]	; 0x34
   288a6:	46c0      	nop			; (mov r8, r8)
   288a8:	68bb      	ldr	r3, [r7, #8]
   288aa:	689b      	ldr	r3, [r3, #8]
   288ac:	4a16      	ldr	r2, [pc, #88]	; (28908 <tcc_init+0x370>)
   288ae:	4013      	ands	r3, r2
   288b0:	d1fa      	bne.n	288a8 <tcc_init+0x310>
   288b2:	687b      	ldr	r3, [r7, #4]
   288b4:	685a      	ldr	r2, [r3, #4]
   288b6:	68bb      	ldr	r3, [r7, #8]
   288b8:	641a      	str	r2, [r3, #64]	; 0x40
   288ba:	2300      	movs	r3, #0
   288bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   288be:	e03f      	b.n	28940 <tcc_init+0x3a8>
   288c0:	00027f01 	.word	0x00027f01
   288c4:	000369d4 	.word	0x000369d4
   288c8:	00027e7d 	.word	0x00027e7d
   288cc:	000369e0 	.word	0x000369e0
   288d0:	000369f0 	.word	0x000369f0
   288d4:	0002820d 	.word	0x0002820d
   288d8:	000282b1 	.word	0x000282b1
   288dc:	0002830d 	.word	0x0002830d
   288e0:	00028429 	.word	0x00028429
   288e4:	00028501 	.word	0x00028501
   288e8:	20005594 	.word	0x20005594
   288ec:	00027e65 	.word	0x00027e65
   288f0:	000369d0 	.word	0x000369d0
   288f4:	00027a7d 	.word	0x00027a7d
   288f8:	00027ac1 	.word	0x00027ac1
   288fc:	00027ed9 	.word	0x00027ed9
   28900:	00027ddd 	.word	0x00027ddd
   28904:	00020040 	.word	0x00020040
   28908:	00040080 	.word	0x00040080
   2890c:	46c0      	nop			; (mov r8, r8)
   2890e:	68bb      	ldr	r3, [r7, #8]
   28910:	689b      	ldr	r3, [r3, #8]
   28912:	4912      	ldr	r1, [pc, #72]	; (2895c <tcc_init+0x3c4>)
   28914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28916:	4091      	lsls	r1, r2
   28918:	000a      	movs	r2, r1
   2891a:	4013      	ands	r3, r2
   2891c:	d1f7      	bne.n	2890e <tcc_init+0x376>
   2891e:	687a      	ldr	r2, [r7, #4]
   28920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28922:	3306      	adds	r3, #6
   28924:	009b      	lsls	r3, r3, #2
   28926:	18d3      	adds	r3, r2, r3
   28928:	3304      	adds	r3, #4
   2892a:	681a      	ldr	r2, [r3, #0]
   2892c:	68b9      	ldr	r1, [r7, #8]
   2892e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28930:	3310      	adds	r3, #16
   28932:	009b      	lsls	r3, r3, #2
   28934:	18cb      	adds	r3, r1, r3
   28936:	3304      	adds	r3, #4
   28938:	601a      	str	r2, [r3, #0]
   2893a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2893c:	3301      	adds	r3, #1
   2893e:	63fb      	str	r3, [r7, #60]	; 0x3c
   28940:	233b      	movs	r3, #59	; 0x3b
   28942:	18fb      	adds	r3, r7, r3
   28944:	781b      	ldrb	r3, [r3, #0]
   28946:	4a06      	ldr	r2, [pc, #24]	; (28960 <tcc_init+0x3c8>)
   28948:	5cd3      	ldrb	r3, [r2, r3]
   2894a:	001a      	movs	r2, r3
   2894c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2894e:	429a      	cmp	r2, r3
   28950:	dcdc      	bgt.n	2890c <tcc_init+0x374>
   28952:	2300      	movs	r3, #0
   28954:	0018      	movs	r0, r3
   28956:	46bd      	mov	sp, r7
   28958:	b011      	add	sp, #68	; 0x44
   2895a:	bd90      	pop	{r4, r7, pc}
   2895c:	00080100 	.word	0x00080100
   28960:	000369ec 	.word	0x000369ec

00028964 <system_interrupt_enable>:
   28964:	b580      	push	{r7, lr}
   28966:	b082      	sub	sp, #8
   28968:	af00      	add	r7, sp, #0
   2896a:	0002      	movs	r2, r0
   2896c:	1dfb      	adds	r3, r7, #7
   2896e:	701a      	strb	r2, [r3, #0]
   28970:	4b06      	ldr	r3, [pc, #24]	; (2898c <system_interrupt_enable+0x28>)
   28972:	1dfa      	adds	r2, r7, #7
   28974:	7812      	ldrb	r2, [r2, #0]
   28976:	0011      	movs	r1, r2
   28978:	221f      	movs	r2, #31
   2897a:	400a      	ands	r2, r1
   2897c:	2101      	movs	r1, #1
   2897e:	4091      	lsls	r1, r2
   28980:	000a      	movs	r2, r1
   28982:	601a      	str	r2, [r3, #0]
   28984:	46c0      	nop			; (mov r8, r8)
   28986:	46bd      	mov	sp, r7
   28988:	b002      	add	sp, #8
   2898a:	bd80      	pop	{r7, pc}
   2898c:	e000e100 	.word	0xe000e100

00028990 <_tcc_interrupt_get_interrupt_vector>:
   28990:	b580      	push	{r7, lr}
   28992:	b082      	sub	sp, #8
   28994:	af00      	add	r7, sp, #0
   28996:	6078      	str	r0, [r7, #4]
   28998:	4a04      	ldr	r2, [pc, #16]	; (289ac <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2899a:	687b      	ldr	r3, [r7, #4]
   2899c:	18d3      	adds	r3, r2, r3
   2899e:	781b      	ldrb	r3, [r3, #0]
   289a0:	b25b      	sxtb	r3, r3
   289a2:	0018      	movs	r0, r3
   289a4:	46bd      	mov	sp, r7
   289a6:	b002      	add	sp, #8
   289a8:	bd80      	pop	{r7, pc}
   289aa:	46c0      	nop			; (mov r8, r8)
   289ac:	20000108 	.word	0x20000108

000289b0 <tcc_register_callback>:
   289b0:	b580      	push	{r7, lr}
   289b2:	b084      	sub	sp, #16
   289b4:	af00      	add	r7, sp, #0
   289b6:	60f8      	str	r0, [r7, #12]
   289b8:	60b9      	str	r1, [r7, #8]
   289ba:	1dfb      	adds	r3, r7, #7
   289bc:	701a      	strb	r2, [r3, #0]
   289be:	1dfb      	adds	r3, r7, #7
   289c0:	781b      	ldrb	r3, [r3, #0]
   289c2:	68fa      	ldr	r2, [r7, #12]
   289c4:	009b      	lsls	r3, r3, #2
   289c6:	18d3      	adds	r3, r2, r3
   289c8:	3304      	adds	r3, #4
   289ca:	68ba      	ldr	r2, [r7, #8]
   289cc:	601a      	str	r2, [r3, #0]
   289ce:	68fb      	ldr	r3, [r7, #12]
   289d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   289d2:	1dfb      	adds	r3, r7, #7
   289d4:	7819      	ldrb	r1, [r3, #0]
   289d6:	4b05      	ldr	r3, [pc, #20]	; (289ec <tcc_register_callback+0x3c>)
   289d8:	0089      	lsls	r1, r1, #2
   289da:	58cb      	ldr	r3, [r1, r3]
   289dc:	431a      	orrs	r2, r3
   289de:	68fb      	ldr	r3, [r7, #12]
   289e0:	635a      	str	r2, [r3, #52]	; 0x34
   289e2:	2300      	movs	r3, #0
   289e4:	0018      	movs	r0, r3
   289e6:	46bd      	mov	sp, r7
   289e8:	b004      	add	sp, #16
   289ea:	bd80      	pop	{r7, pc}
   289ec:	000369f4 	.word	0x000369f4

000289f0 <tcc_enable_callback>:
   289f0:	b580      	push	{r7, lr}
   289f2:	b082      	sub	sp, #8
   289f4:	af00      	add	r7, sp, #0
   289f6:	6078      	str	r0, [r7, #4]
   289f8:	000a      	movs	r2, r1
   289fa:	1cfb      	adds	r3, r7, #3
   289fc:	701a      	strb	r2, [r3, #0]
   289fe:	687b      	ldr	r3, [r7, #4]
   28a00:	681b      	ldr	r3, [r3, #0]
   28a02:	0018      	movs	r0, r3
   28a04:	4b0f      	ldr	r3, [pc, #60]	; (28a44 <tcc_enable_callback+0x54>)
   28a06:	4798      	blx	r3
   28a08:	0003      	movs	r3, r0
   28a0a:	0018      	movs	r0, r3
   28a0c:	4b0e      	ldr	r3, [pc, #56]	; (28a48 <tcc_enable_callback+0x58>)
   28a0e:	4798      	blx	r3
   28a10:	0003      	movs	r3, r0
   28a12:	0018      	movs	r0, r3
   28a14:	4b0d      	ldr	r3, [pc, #52]	; (28a4c <tcc_enable_callback+0x5c>)
   28a16:	4798      	blx	r3
   28a18:	687b      	ldr	r3, [r7, #4]
   28a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   28a1c:	1cfb      	adds	r3, r7, #3
   28a1e:	7819      	ldrb	r1, [r3, #0]
   28a20:	4b0b      	ldr	r3, [pc, #44]	; (28a50 <tcc_enable_callback+0x60>)
   28a22:	0089      	lsls	r1, r1, #2
   28a24:	58cb      	ldr	r3, [r1, r3]
   28a26:	431a      	orrs	r2, r3
   28a28:	687b      	ldr	r3, [r7, #4]
   28a2a:	639a      	str	r2, [r3, #56]	; 0x38
   28a2c:	687b      	ldr	r3, [r7, #4]
   28a2e:	681b      	ldr	r3, [r3, #0]
   28a30:	1cfa      	adds	r2, r7, #3
   28a32:	7811      	ldrb	r1, [r2, #0]
   28a34:	4a06      	ldr	r2, [pc, #24]	; (28a50 <tcc_enable_callback+0x60>)
   28a36:	0089      	lsls	r1, r1, #2
   28a38:	588a      	ldr	r2, [r1, r2]
   28a3a:	629a      	str	r2, [r3, #40]	; 0x28
   28a3c:	46c0      	nop			; (mov r8, r8)
   28a3e:	46bd      	mov	sp, r7
   28a40:	b002      	add	sp, #8
   28a42:	bd80      	pop	{r7, pc}
   28a44:	00027f01 	.word	0x00027f01
   28a48:	00028991 	.word	0x00028991
   28a4c:	00028965 	.word	0x00028965
   28a50:	000369f4 	.word	0x000369f4

00028a54 <TCC0_Handler>:
   28a54:	b580      	push	{r7, lr}
   28a56:	af00      	add	r7, sp, #0
   28a58:	2000      	movs	r0, #0
   28a5a:	4b02      	ldr	r3, [pc, #8]	; (28a64 <TCC0_Handler+0x10>)
   28a5c:	4798      	blx	r3
   28a5e:	46c0      	nop			; (mov r8, r8)
   28a60:	46bd      	mov	sp, r7
   28a62:	bd80      	pop	{r7, pc}
   28a64:	00028a91 	.word	0x00028a91

00028a68 <TCC1_Handler>:
   28a68:	b580      	push	{r7, lr}
   28a6a:	af00      	add	r7, sp, #0
   28a6c:	2001      	movs	r0, #1
   28a6e:	4b02      	ldr	r3, [pc, #8]	; (28a78 <TCC1_Handler+0x10>)
   28a70:	4798      	blx	r3
   28a72:	46c0      	nop			; (mov r8, r8)
   28a74:	46bd      	mov	sp, r7
   28a76:	bd80      	pop	{r7, pc}
   28a78:	00028a91 	.word	0x00028a91

00028a7c <TCC2_Handler>:
   28a7c:	b580      	push	{r7, lr}
   28a7e:	af00      	add	r7, sp, #0
   28a80:	2002      	movs	r0, #2
   28a82:	4b02      	ldr	r3, [pc, #8]	; (28a8c <TCC2_Handler+0x10>)
   28a84:	4798      	blx	r3
   28a86:	46c0      	nop			; (mov r8, r8)
   28a88:	46bd      	mov	sp, r7
   28a8a:	bd80      	pop	{r7, pc}
   28a8c:	00028a91 	.word	0x00028a91

00028a90 <_tcc_interrupt_handler>:
   28a90:	b580      	push	{r7, lr}
   28a92:	b086      	sub	sp, #24
   28a94:	af00      	add	r7, sp, #0
   28a96:	0002      	movs	r2, r0
   28a98:	1dfb      	adds	r3, r7, #7
   28a9a:	701a      	strb	r2, [r3, #0]
   28a9c:	1dfb      	adds	r3, r7, #7
   28a9e:	781a      	ldrb	r2, [r3, #0]
   28aa0:	4b18      	ldr	r3, [pc, #96]	; (28b04 <_tcc_interrupt_handler+0x74>)
   28aa2:	0092      	lsls	r2, r2, #2
   28aa4:	58d3      	ldr	r3, [r2, r3]
   28aa6:	613b      	str	r3, [r7, #16]
   28aa8:	693b      	ldr	r3, [r7, #16]
   28aaa:	681b      	ldr	r3, [r3, #0]
   28aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   28aae:	693b      	ldr	r3, [r7, #16]
   28ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   28ab2:	401a      	ands	r2, r3
   28ab4:	693b      	ldr	r3, [r7, #16]
   28ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   28ab8:	4013      	ands	r3, r2
   28aba:	60fb      	str	r3, [r7, #12]
   28abc:	2300      	movs	r3, #0
   28abe:	617b      	str	r3, [r7, #20]
   28ac0:	e019      	b.n	28af6 <_tcc_interrupt_handler+0x66>
   28ac2:	4b11      	ldr	r3, [pc, #68]	; (28b08 <_tcc_interrupt_handler+0x78>)
   28ac4:	697a      	ldr	r2, [r7, #20]
   28ac6:	0092      	lsls	r2, r2, #2
   28ac8:	58d3      	ldr	r3, [r2, r3]
   28aca:	68fa      	ldr	r2, [r7, #12]
   28acc:	4013      	ands	r3, r2
   28ace:	d00f      	beq.n	28af0 <_tcc_interrupt_handler+0x60>
   28ad0:	693a      	ldr	r2, [r7, #16]
   28ad2:	697b      	ldr	r3, [r7, #20]
   28ad4:	009b      	lsls	r3, r3, #2
   28ad6:	18d3      	adds	r3, r2, r3
   28ad8:	3304      	adds	r3, #4
   28ada:	681b      	ldr	r3, [r3, #0]
   28adc:	693a      	ldr	r2, [r7, #16]
   28ade:	0010      	movs	r0, r2
   28ae0:	4798      	blx	r3
   28ae2:	693b      	ldr	r3, [r7, #16]
   28ae4:	681b      	ldr	r3, [r3, #0]
   28ae6:	4a08      	ldr	r2, [pc, #32]	; (28b08 <_tcc_interrupt_handler+0x78>)
   28ae8:	6979      	ldr	r1, [r7, #20]
   28aea:	0089      	lsls	r1, r1, #2
   28aec:	588a      	ldr	r2, [r1, r2]
   28aee:	62da      	str	r2, [r3, #44]	; 0x2c
   28af0:	697b      	ldr	r3, [r7, #20]
   28af2:	3301      	adds	r3, #1
   28af4:	617b      	str	r3, [r7, #20]
   28af6:	697b      	ldr	r3, [r7, #20]
   28af8:	2b0b      	cmp	r3, #11
   28afa:	dde2      	ble.n	28ac2 <_tcc_interrupt_handler+0x32>
   28afc:	46c0      	nop			; (mov r8, r8)
   28afe:	46bd      	mov	sp, r7
   28b00:	b006      	add	sp, #24
   28b02:	bd80      	pop	{r7, pc}
   28b04:	20005594 	.word	0x20005594
   28b08:	000369f4 	.word	0x000369f4

00028b0c <Reset_Handler>:
   28b0c:	b580      	push	{r7, lr}
   28b0e:	b082      	sub	sp, #8
   28b10:	af00      	add	r7, sp, #0
   28b12:	4b2f      	ldr	r3, [pc, #188]	; (28bd0 <Reset_Handler+0xc4>)
   28b14:	607b      	str	r3, [r7, #4]
   28b16:	4b2f      	ldr	r3, [pc, #188]	; (28bd4 <Reset_Handler+0xc8>)
   28b18:	603b      	str	r3, [r7, #0]
   28b1a:	687a      	ldr	r2, [r7, #4]
   28b1c:	683b      	ldr	r3, [r7, #0]
   28b1e:	429a      	cmp	r2, r3
   28b20:	d00c      	beq.n	28b3c <Reset_Handler+0x30>
   28b22:	e007      	b.n	28b34 <Reset_Handler+0x28>
   28b24:	683b      	ldr	r3, [r7, #0]
   28b26:	1d1a      	adds	r2, r3, #4
   28b28:	603a      	str	r2, [r7, #0]
   28b2a:	687a      	ldr	r2, [r7, #4]
   28b2c:	1d11      	adds	r1, r2, #4
   28b2e:	6079      	str	r1, [r7, #4]
   28b30:	6812      	ldr	r2, [r2, #0]
   28b32:	601a      	str	r2, [r3, #0]
   28b34:	683a      	ldr	r2, [r7, #0]
   28b36:	4b28      	ldr	r3, [pc, #160]	; (28bd8 <Reset_Handler+0xcc>)
   28b38:	429a      	cmp	r2, r3
   28b3a:	d3f3      	bcc.n	28b24 <Reset_Handler+0x18>
   28b3c:	4b27      	ldr	r3, [pc, #156]	; (28bdc <Reset_Handler+0xd0>)
   28b3e:	603b      	str	r3, [r7, #0]
   28b40:	e004      	b.n	28b4c <Reset_Handler+0x40>
   28b42:	683b      	ldr	r3, [r7, #0]
   28b44:	1d1a      	adds	r2, r3, #4
   28b46:	603a      	str	r2, [r7, #0]
   28b48:	2200      	movs	r2, #0
   28b4a:	601a      	str	r2, [r3, #0]
   28b4c:	683a      	ldr	r2, [r7, #0]
   28b4e:	4b24      	ldr	r3, [pc, #144]	; (28be0 <Reset_Handler+0xd4>)
   28b50:	429a      	cmp	r2, r3
   28b52:	d3f6      	bcc.n	28b42 <Reset_Handler+0x36>
   28b54:	4b23      	ldr	r3, [pc, #140]	; (28be4 <Reset_Handler+0xd8>)
   28b56:	607b      	str	r3, [r7, #4]
   28b58:	4b23      	ldr	r3, [pc, #140]	; (28be8 <Reset_Handler+0xdc>)
   28b5a:	687a      	ldr	r2, [r7, #4]
   28b5c:	21ff      	movs	r1, #255	; 0xff
   28b5e:	438a      	bics	r2, r1
   28b60:	609a      	str	r2, [r3, #8]
   28b62:	4a22      	ldr	r2, [pc, #136]	; (28bec <Reset_Handler+0xe0>)
   28b64:	2390      	movs	r3, #144	; 0x90
   28b66:	005b      	lsls	r3, r3, #1
   28b68:	2102      	movs	r1, #2
   28b6a:	50d1      	str	r1, [r2, r3]
   28b6c:	4a20      	ldr	r2, [pc, #128]	; (28bf0 <Reset_Handler+0xe4>)
   28b6e:	78d3      	ldrb	r3, [r2, #3]
   28b70:	2103      	movs	r1, #3
   28b72:	438b      	bics	r3, r1
   28b74:	1c19      	adds	r1, r3, #0
   28b76:	2302      	movs	r3, #2
   28b78:	430b      	orrs	r3, r1
   28b7a:	70d3      	strb	r3, [r2, #3]
   28b7c:	4a1c      	ldr	r2, [pc, #112]	; (28bf0 <Reset_Handler+0xe4>)
   28b7e:	78d3      	ldrb	r3, [r2, #3]
   28b80:	210c      	movs	r1, #12
   28b82:	438b      	bics	r3, r1
   28b84:	1c19      	adds	r1, r3, #0
   28b86:	2308      	movs	r3, #8
   28b88:	430b      	orrs	r3, r1
   28b8a:	70d3      	strb	r3, [r2, #3]
   28b8c:	4a19      	ldr	r2, [pc, #100]	; (28bf4 <Reset_Handler+0xe8>)
   28b8e:	7b93      	ldrb	r3, [r2, #14]
   28b90:	2130      	movs	r1, #48	; 0x30
   28b92:	438b      	bics	r3, r1
   28b94:	1c19      	adds	r1, r3, #0
   28b96:	2320      	movs	r3, #32
   28b98:	430b      	orrs	r3, r1
   28b9a:	7393      	strb	r3, [r2, #14]
   28b9c:	4a15      	ldr	r2, [pc, #84]	; (28bf4 <Reset_Handler+0xe8>)
   28b9e:	7b93      	ldrb	r3, [r2, #14]
   28ba0:	210c      	movs	r1, #12
   28ba2:	438b      	bics	r3, r1
   28ba4:	1c19      	adds	r1, r3, #0
   28ba6:	2308      	movs	r3, #8
   28ba8:	430b      	orrs	r3, r1
   28baa:	7393      	strb	r3, [r2, #14]
   28bac:	4a11      	ldr	r2, [pc, #68]	; (28bf4 <Reset_Handler+0xe8>)
   28bae:	7b93      	ldrb	r3, [r2, #14]
   28bb0:	2103      	movs	r1, #3
   28bb2:	438b      	bics	r3, r1
   28bb4:	1c19      	adds	r1, r3, #0
   28bb6:	2302      	movs	r3, #2
   28bb8:	430b      	orrs	r3, r1
   28bba:	7393      	strb	r3, [r2, #14]
   28bbc:	4a0e      	ldr	r2, [pc, #56]	; (28bf8 <Reset_Handler+0xec>)
   28bbe:	6853      	ldr	r3, [r2, #4]
   28bc0:	2180      	movs	r1, #128	; 0x80
   28bc2:	430b      	orrs	r3, r1
   28bc4:	6053      	str	r3, [r2, #4]
   28bc6:	4b0d      	ldr	r3, [pc, #52]	; (28bfc <Reset_Handler+0xf0>)
   28bc8:	4798      	blx	r3
   28bca:	4b0d      	ldr	r3, [pc, #52]	; (28c00 <Reset_Handler+0xf4>)
   28bcc:	4798      	blx	r3
   28bce:	e7fe      	b.n	28bce <Reset_Handler+0xc2>
   28bd0:	00037620 	.word	0x00037620
   28bd4:	20000000 	.word	0x20000000
   28bd8:	200002e0 	.word	0x200002e0
   28bdc:	200002e0 	.word	0x200002e0
   28be0:	20005604 	.word	0x20005604
   28be4:	00012000 	.word	0x00012000
   28be8:	e000ed00 	.word	0xe000ed00
   28bec:	41007000 	.word	0x41007000
   28bf0:	41005000 	.word	0x41005000
   28bf4:	41004800 	.word	0x41004800
   28bf8:	41004000 	.word	0x41004000
   28bfc:	000320fd 	.word	0x000320fd
   28c00:	00030341 	.word	0x00030341

00028c04 <Dummy_Handler>:
   28c04:	b580      	push	{r7, lr}
   28c06:	af00      	add	r7, sp, #0
   28c08:	2004      	movs	r0, #4
   28c0a:	4671      	mov	r1, lr
   28c0c:	4208      	tst	r0, r1
   28c0e:	d002      	beq.n	28c16 <_MSP>
   28c10:	f3ef 8009 	mrs	r0, PSP
   28c14:	e001      	b.n	28c1a <_HALT>

00028c16 <_MSP>:
   28c16:	f3ef 8008 	mrs	r0, MSP

00028c1a <_HALT>:
   28c1a:	6941      	ldr	r1, [r0, #20]
   28c1c:	e004      	b.n	28c28 <HardFault_HandlerC>
   28c1e:	be00      	bkpt	0x0000
   28c20:	46c0      	nop			; (mov r8, r8)
   28c22:	46bd      	mov	sp, r7
   28c24:	bd80      	pop	{r7, pc}
	...

00028c28 <HardFault_HandlerC>:
   28c28:	b580      	push	{r7, lr}
   28c2a:	b090      	sub	sp, #64	; 0x40
   28c2c:	af00      	add	r7, sp, #0
   28c2e:	6078      	str	r0, [r7, #4]
   28c30:	687b      	ldr	r3, [r7, #4]
   28c32:	681b      	ldr	r3, [r3, #0]
   28c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   28c36:	687b      	ldr	r3, [r7, #4]
   28c38:	685b      	ldr	r3, [r3, #4]
   28c3a:	63bb      	str	r3, [r7, #56]	; 0x38
   28c3c:	687b      	ldr	r3, [r7, #4]
   28c3e:	689b      	ldr	r3, [r3, #8]
   28c40:	637b      	str	r3, [r7, #52]	; 0x34
   28c42:	687b      	ldr	r3, [r7, #4]
   28c44:	68db      	ldr	r3, [r3, #12]
   28c46:	633b      	str	r3, [r7, #48]	; 0x30
   28c48:	687b      	ldr	r3, [r7, #4]
   28c4a:	691b      	ldr	r3, [r3, #16]
   28c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   28c4e:	687b      	ldr	r3, [r7, #4]
   28c50:	695b      	ldr	r3, [r3, #20]
   28c52:	62bb      	str	r3, [r7, #40]	; 0x28
   28c54:	687b      	ldr	r3, [r7, #4]
   28c56:	699b      	ldr	r3, [r3, #24]
   28c58:	627b      	str	r3, [r7, #36]	; 0x24
   28c5a:	687b      	ldr	r3, [r7, #4]
   28c5c:	69db      	ldr	r3, [r3, #28]
   28c5e:	623b      	str	r3, [r7, #32]
   28c60:	4b0b      	ldr	r3, [pc, #44]	; (28c90 <HardFault_HandlerC+0x68>)
   28c62:	681b      	ldr	r3, [r3, #0]
   28c64:	61fb      	str	r3, [r7, #28]
   28c66:	4b0b      	ldr	r3, [pc, #44]	; (28c94 <HardFault_HandlerC+0x6c>)
   28c68:	681b      	ldr	r3, [r3, #0]
   28c6a:	61bb      	str	r3, [r7, #24]
   28c6c:	4b0a      	ldr	r3, [pc, #40]	; (28c98 <HardFault_HandlerC+0x70>)
   28c6e:	681b      	ldr	r3, [r3, #0]
   28c70:	617b      	str	r3, [r7, #20]
   28c72:	4b0a      	ldr	r3, [pc, #40]	; (28c9c <HardFault_HandlerC+0x74>)
   28c74:	681b      	ldr	r3, [r3, #0]
   28c76:	613b      	str	r3, [r7, #16]
   28c78:	4b09      	ldr	r3, [pc, #36]	; (28ca0 <HardFault_HandlerC+0x78>)
   28c7a:	681b      	ldr	r3, [r3, #0]
   28c7c:	60bb      	str	r3, [r7, #8]
   28c7e:	4b09      	ldr	r3, [pc, #36]	; (28ca4 <HardFault_HandlerC+0x7c>)
   28c80:	681b      	ldr	r3, [r3, #0]
   28c82:	60fb      	str	r3, [r7, #12]
   28c84:	be00      	bkpt	0x0000
   28c86:	46c0      	nop			; (mov r8, r8)
   28c88:	46bd      	mov	sp, r7
   28c8a:	b010      	add	sp, #64	; 0x40
   28c8c:	bd80      	pop	{r7, pc}
   28c8e:	46c0      	nop			; (mov r8, r8)
   28c90:	e000ed28 	.word	0xe000ed28
   28c94:	e000ed2c 	.word	0xe000ed2c
   28c98:	e000ed30 	.word	0xe000ed30
   28c9c:	e000ed3c 	.word	0xe000ed3c
   28ca0:	e000ed34 	.word	0xe000ed34
   28ca4:	e000ed38 	.word	0xe000ed38

00028ca8 <_read>:
   28ca8:	b580      	push	{r7, lr}
   28caa:	b086      	sub	sp, #24
   28cac:	af00      	add	r7, sp, #0
   28cae:	60f8      	str	r0, [r7, #12]
   28cb0:	60b9      	str	r1, [r7, #8]
   28cb2:	607a      	str	r2, [r7, #4]
   28cb4:	2300      	movs	r3, #0
   28cb6:	617b      	str	r3, [r7, #20]
   28cb8:	68fb      	ldr	r3, [r7, #12]
   28cba:	2b00      	cmp	r3, #0
   28cbc:	d012      	beq.n	28ce4 <_read+0x3c>
   28cbe:	2301      	movs	r3, #1
   28cc0:	425b      	negs	r3, r3
   28cc2:	e013      	b.n	28cec <_read+0x44>
   28cc4:	4b0b      	ldr	r3, [pc, #44]	; (28cf4 <_read+0x4c>)
   28cc6:	681a      	ldr	r2, [r3, #0]
   28cc8:	4b0b      	ldr	r3, [pc, #44]	; (28cf8 <_read+0x50>)
   28cca:	681b      	ldr	r3, [r3, #0]
   28ccc:	68b9      	ldr	r1, [r7, #8]
   28cce:	0018      	movs	r0, r3
   28cd0:	4790      	blx	r2
   28cd2:	68bb      	ldr	r3, [r7, #8]
   28cd4:	3301      	adds	r3, #1
   28cd6:	60bb      	str	r3, [r7, #8]
   28cd8:	697b      	ldr	r3, [r7, #20]
   28cda:	3301      	adds	r3, #1
   28cdc:	617b      	str	r3, [r7, #20]
   28cde:	687b      	ldr	r3, [r7, #4]
   28ce0:	3b01      	subs	r3, #1
   28ce2:	607b      	str	r3, [r7, #4]
   28ce4:	687b      	ldr	r3, [r7, #4]
   28ce6:	2b00      	cmp	r3, #0
   28ce8:	dcec      	bgt.n	28cc4 <_read+0x1c>
   28cea:	697b      	ldr	r3, [r7, #20]
   28cec:	0018      	movs	r0, r3
   28cee:	46bd      	mov	sp, r7
   28cf0:	b006      	add	sp, #24
   28cf2:	bd80      	pop	{r7, pc}
   28cf4:	200055a0 	.word	0x200055a0
   28cf8:	200055a8 	.word	0x200055a8

00028cfc <_write>:
   28cfc:	b580      	push	{r7, lr}
   28cfe:	b086      	sub	sp, #24
   28d00:	af00      	add	r7, sp, #0
   28d02:	60f8      	str	r0, [r7, #12]
   28d04:	60b9      	str	r1, [r7, #8]
   28d06:	607a      	str	r2, [r7, #4]
   28d08:	2300      	movs	r3, #0
   28d0a:	617b      	str	r3, [r7, #20]
   28d0c:	68fb      	ldr	r3, [r7, #12]
   28d0e:	2b01      	cmp	r3, #1
   28d10:	d01d      	beq.n	28d4e <_write+0x52>
   28d12:	68fb      	ldr	r3, [r7, #12]
   28d14:	2b02      	cmp	r3, #2
   28d16:	d01a      	beq.n	28d4e <_write+0x52>
   28d18:	68fb      	ldr	r3, [r7, #12]
   28d1a:	2b03      	cmp	r3, #3
   28d1c:	d017      	beq.n	28d4e <_write+0x52>
   28d1e:	2301      	movs	r3, #1
   28d20:	425b      	negs	r3, r3
   28d22:	e018      	b.n	28d56 <_write+0x5a>
   28d24:	4b0e      	ldr	r3, [pc, #56]	; (28d60 <_write+0x64>)
   28d26:	681a      	ldr	r2, [r3, #0]
   28d28:	4b0e      	ldr	r3, [pc, #56]	; (28d64 <_write+0x68>)
   28d2a:	6818      	ldr	r0, [r3, #0]
   28d2c:	68bb      	ldr	r3, [r7, #8]
   28d2e:	1c59      	adds	r1, r3, #1
   28d30:	60b9      	str	r1, [r7, #8]
   28d32:	781b      	ldrb	r3, [r3, #0]
   28d34:	0019      	movs	r1, r3
   28d36:	4790      	blx	r2
   28d38:	1e03      	subs	r3, r0, #0
   28d3a:	da02      	bge.n	28d42 <_write+0x46>
   28d3c:	2301      	movs	r3, #1
   28d3e:	425b      	negs	r3, r3
   28d40:	e009      	b.n	28d56 <_write+0x5a>
   28d42:	697b      	ldr	r3, [r7, #20]
   28d44:	3301      	adds	r3, #1
   28d46:	617b      	str	r3, [r7, #20]
   28d48:	687b      	ldr	r3, [r7, #4]
   28d4a:	3b01      	subs	r3, #1
   28d4c:	607b      	str	r3, [r7, #4]
   28d4e:	687b      	ldr	r3, [r7, #4]
   28d50:	2b00      	cmp	r3, #0
   28d52:	d1e7      	bne.n	28d24 <_write+0x28>
   28d54:	697b      	ldr	r3, [r7, #20]
   28d56:	0018      	movs	r0, r3
   28d58:	46bd      	mov	sp, r7
   28d5a:	b006      	add	sp, #24
   28d5c:	bd80      	pop	{r7, pc}
   28d5e:	46c0      	nop			; (mov r8, r8)
   28d60:	200055a4 	.word	0x200055a4
   28d64:	200055a8 	.word	0x200055a8

00028d68 <_sbrk>:
   28d68:	b580      	push	{r7, lr}
   28d6a:	b084      	sub	sp, #16
   28d6c:	af00      	add	r7, sp, #0
   28d6e:	6078      	str	r0, [r7, #4]
   28d70:	4b0a      	ldr	r3, [pc, #40]	; (28d9c <_sbrk+0x34>)
   28d72:	681b      	ldr	r3, [r3, #0]
   28d74:	2b00      	cmp	r3, #0
   28d76:	d102      	bne.n	28d7e <_sbrk+0x16>
   28d78:	4b08      	ldr	r3, [pc, #32]	; (28d9c <_sbrk+0x34>)
   28d7a:	4a09      	ldr	r2, [pc, #36]	; (28da0 <_sbrk+0x38>)
   28d7c:	601a      	str	r2, [r3, #0]
   28d7e:	4b07      	ldr	r3, [pc, #28]	; (28d9c <_sbrk+0x34>)
   28d80:	681b      	ldr	r3, [r3, #0]
   28d82:	60fb      	str	r3, [r7, #12]
   28d84:	4b05      	ldr	r3, [pc, #20]	; (28d9c <_sbrk+0x34>)
   28d86:	681a      	ldr	r2, [r3, #0]
   28d88:	687b      	ldr	r3, [r7, #4]
   28d8a:	18d2      	adds	r2, r2, r3
   28d8c:	4b03      	ldr	r3, [pc, #12]	; (28d9c <_sbrk+0x34>)
   28d8e:	601a      	str	r2, [r3, #0]
   28d90:	68fb      	ldr	r3, [r7, #12]
   28d92:	0018      	movs	r0, r3
   28d94:	46bd      	mov	sp, r7
   28d96:	b004      	add	sp, #16
   28d98:	bd80      	pop	{r7, pc}
   28d9a:	46c0      	nop			; (mov r8, r8)
   28d9c:	20003d4c 	.word	0x20003d4c
   28da0:	20007608 	.word	0x20007608

00028da4 <_close>:
   28da4:	b580      	push	{r7, lr}
   28da6:	b082      	sub	sp, #8
   28da8:	af00      	add	r7, sp, #0
   28daa:	6078      	str	r0, [r7, #4]
   28dac:	2301      	movs	r3, #1
   28dae:	425b      	negs	r3, r3
   28db0:	0018      	movs	r0, r3
   28db2:	46bd      	mov	sp, r7
   28db4:	b002      	add	sp, #8
   28db6:	bd80      	pop	{r7, pc}

00028db8 <_fstat>:
   28db8:	b580      	push	{r7, lr}
   28dba:	b082      	sub	sp, #8
   28dbc:	af00      	add	r7, sp, #0
   28dbe:	6078      	str	r0, [r7, #4]
   28dc0:	6039      	str	r1, [r7, #0]
   28dc2:	683b      	ldr	r3, [r7, #0]
   28dc4:	2280      	movs	r2, #128	; 0x80
   28dc6:	0192      	lsls	r2, r2, #6
   28dc8:	605a      	str	r2, [r3, #4]
   28dca:	2300      	movs	r3, #0
   28dcc:	0018      	movs	r0, r3
   28dce:	46bd      	mov	sp, r7
   28dd0:	b002      	add	sp, #8
   28dd2:	bd80      	pop	{r7, pc}

00028dd4 <_isatty>:
   28dd4:	b580      	push	{r7, lr}
   28dd6:	b082      	sub	sp, #8
   28dd8:	af00      	add	r7, sp, #0
   28dda:	6078      	str	r0, [r7, #4]
   28ddc:	2301      	movs	r3, #1
   28dde:	0018      	movs	r0, r3
   28de0:	46bd      	mov	sp, r7
   28de2:	b002      	add	sp, #8
   28de4:	bd80      	pop	{r7, pc}

00028de6 <_lseek>:
   28de6:	b580      	push	{r7, lr}
   28de8:	b084      	sub	sp, #16
   28dea:	af00      	add	r7, sp, #0
   28dec:	60f8      	str	r0, [r7, #12]
   28dee:	60b9      	str	r1, [r7, #8]
   28df0:	607a      	str	r2, [r7, #4]
   28df2:	2300      	movs	r3, #0
   28df4:	0018      	movs	r0, r3
   28df6:	46bd      	mov	sp, r7
   28df8:	b004      	add	sp, #16
   28dfa:	bd80      	pop	{r7, pc}

00028dfc <rtc_calendar_get_time_defaults>:
   28dfc:	b580      	push	{r7, lr}
   28dfe:	b082      	sub	sp, #8
   28e00:	af00      	add	r7, sp, #0
   28e02:	6078      	str	r0, [r7, #4]
   28e04:	687b      	ldr	r3, [r7, #4]
   28e06:	2200      	movs	r2, #0
   28e08:	701a      	strb	r2, [r3, #0]
   28e0a:	687b      	ldr	r3, [r7, #4]
   28e0c:	2200      	movs	r2, #0
   28e0e:	705a      	strb	r2, [r3, #1]
   28e10:	687b      	ldr	r3, [r7, #4]
   28e12:	2200      	movs	r2, #0
   28e14:	709a      	strb	r2, [r3, #2]
   28e16:	687b      	ldr	r3, [r7, #4]
   28e18:	2200      	movs	r2, #0
   28e1a:	70da      	strb	r2, [r3, #3]
   28e1c:	687b      	ldr	r3, [r7, #4]
   28e1e:	2201      	movs	r2, #1
   28e20:	711a      	strb	r2, [r3, #4]
   28e22:	687b      	ldr	r3, [r7, #4]
   28e24:	2201      	movs	r2, #1
   28e26:	715a      	strb	r2, [r3, #5]
   28e28:	687b      	ldr	r3, [r7, #4]
   28e2a:	22fa      	movs	r2, #250	; 0xfa
   28e2c:	00d2      	lsls	r2, r2, #3
   28e2e:	80da      	strh	r2, [r3, #6]
   28e30:	46c0      	nop			; (mov r8, r8)
   28e32:	46bd      	mov	sp, r7
   28e34:	b002      	add	sp, #8
   28e36:	bd80      	pop	{r7, pc}

00028e38 <rtc_calendar_get_config_defaults>:
   28e38:	b580      	push	{r7, lr}
   28e3a:	b086      	sub	sp, #24
   28e3c:	af00      	add	r7, sp, #0
   28e3e:	6078      	str	r0, [r7, #4]
   28e40:	230c      	movs	r3, #12
   28e42:	18fb      	adds	r3, r7, r3
   28e44:	0018      	movs	r0, r3
   28e46:	4b23      	ldr	r3, [pc, #140]	; (28ed4 <rtc_calendar_get_config_defaults+0x9c>)
   28e48:	4798      	blx	r3
   28e4a:	687b      	ldr	r3, [r7, #4]
   28e4c:	22a0      	movs	r2, #160	; 0xa0
   28e4e:	0112      	lsls	r2, r2, #4
   28e50:	801a      	strh	r2, [r3, #0]
   28e52:	687b      	ldr	r3, [r7, #4]
   28e54:	2200      	movs	r2, #0
   28e56:	709a      	strb	r2, [r3, #2]
   28e58:	687b      	ldr	r3, [r7, #4]
   28e5a:	2200      	movs	r2, #0
   28e5c:	70da      	strb	r2, [r3, #3]
   28e5e:	687b      	ldr	r3, [r7, #4]
   28e60:	2200      	movs	r2, #0
   28e62:	711a      	strb	r2, [r3, #4]
   28e64:	687b      	ldr	r3, [r7, #4]
   28e66:	22fa      	movs	r2, #250	; 0xfa
   28e68:	00d2      	lsls	r2, r2, #3
   28e6a:	80da      	strh	r2, [r3, #6]
   28e6c:	2317      	movs	r3, #23
   28e6e:	18fb      	adds	r3, r7, r3
   28e70:	2200      	movs	r2, #0
   28e72:	701a      	strb	r2, [r3, #0]
   28e74:	e025      	b.n	28ec2 <rtc_calendar_get_config_defaults+0x8a>
   28e76:	2317      	movs	r3, #23
   28e78:	18fb      	adds	r3, r7, r3
   28e7a:	781a      	ldrb	r2, [r3, #0]
   28e7c:	6879      	ldr	r1, [r7, #4]
   28e7e:	2008      	movs	r0, #8
   28e80:	0013      	movs	r3, r2
   28e82:	009b      	lsls	r3, r3, #2
   28e84:	189b      	adds	r3, r3, r2
   28e86:	005b      	lsls	r3, r3, #1
   28e88:	18cb      	adds	r3, r1, r3
   28e8a:	181a      	adds	r2, r3, r0
   28e8c:	230c      	movs	r3, #12
   28e8e:	18fb      	adds	r3, r7, r3
   28e90:	0010      	movs	r0, r2
   28e92:	0019      	movs	r1, r3
   28e94:	2308      	movs	r3, #8
   28e96:	001a      	movs	r2, r3
   28e98:	4b0f      	ldr	r3, [pc, #60]	; (28ed8 <rtc_calendar_get_config_defaults+0xa0>)
   28e9a:	4798      	blx	r3
   28e9c:	2317      	movs	r3, #23
   28e9e:	18fb      	adds	r3, r7, r3
   28ea0:	781a      	ldrb	r2, [r3, #0]
   28ea2:	6879      	ldr	r1, [r7, #4]
   28ea4:	0013      	movs	r3, r2
   28ea6:	009b      	lsls	r3, r3, #2
   28ea8:	189b      	adds	r3, r3, r2
   28eaa:	005b      	lsls	r3, r3, #1
   28eac:	18cb      	adds	r3, r1, r3
   28eae:	3310      	adds	r3, #16
   28eb0:	2206      	movs	r2, #6
   28eb2:	701a      	strb	r2, [r3, #0]
   28eb4:	2317      	movs	r3, #23
   28eb6:	18fb      	adds	r3, r7, r3
   28eb8:	781a      	ldrb	r2, [r3, #0]
   28eba:	2317      	movs	r3, #23
   28ebc:	18fb      	adds	r3, r7, r3
   28ebe:	3201      	adds	r2, #1
   28ec0:	701a      	strb	r2, [r3, #0]
   28ec2:	2317      	movs	r3, #23
   28ec4:	18fb      	adds	r3, r7, r3
   28ec6:	781b      	ldrb	r3, [r3, #0]
   28ec8:	2b00      	cmp	r3, #0
   28eca:	d0d4      	beq.n	28e76 <rtc_calendar_get_config_defaults+0x3e>
   28ecc:	46c0      	nop			; (mov r8, r8)
   28ece:	46bd      	mov	sp, r7
   28ed0:	b006      	add	sp, #24
   28ed2:	bd80      	pop	{r7, pc}
   28ed4:	00028dfd 	.word	0x00028dfd
   28ed8:	0003216d 	.word	0x0003216d

00028edc <configure_rtc_calendar>:
   28edc:	b580      	push	{r7, lr}
   28ede:	b088      	sub	sp, #32
   28ee0:	af00      	add	r7, sp, #0
   28ee2:	230c      	movs	r3, #12
   28ee4:	18fb      	adds	r3, r7, r3
   28ee6:	0018      	movs	r0, r3
   28ee8:	4b1a      	ldr	r3, [pc, #104]	; (28f54 <configure_rtc_calendar+0x78>)
   28eea:	4798      	blx	r3
   28eec:	1d3b      	adds	r3, r7, #4
   28eee:	0018      	movs	r0, r3
   28ef0:	4b19      	ldr	r3, [pc, #100]	; (28f58 <configure_rtc_calendar+0x7c>)
   28ef2:	4798      	blx	r3
   28ef4:	1d3b      	adds	r3, r7, #4
   28ef6:	4a19      	ldr	r2, [pc, #100]	; (28f5c <configure_rtc_calendar+0x80>)
   28ef8:	80da      	strh	r2, [r3, #6]
   28efa:	1d3b      	adds	r3, r7, #4
   28efc:	2201      	movs	r2, #1
   28efe:	715a      	strb	r2, [r3, #5]
   28f00:	1d3b      	adds	r3, r7, #4
   28f02:	2201      	movs	r2, #1
   28f04:	711a      	strb	r2, [r3, #4]
   28f06:	1d3b      	adds	r3, r7, #4
   28f08:	2200      	movs	r2, #0
   28f0a:	709a      	strb	r2, [r3, #2]
   28f0c:	1d3b      	adds	r3, r7, #4
   28f0e:	2200      	movs	r2, #0
   28f10:	705a      	strb	r2, [r3, #1]
   28f12:	1d3b      	adds	r3, r7, #4
   28f14:	2204      	movs	r2, #4
   28f16:	701a      	strb	r2, [r3, #0]
   28f18:	230c      	movs	r3, #12
   28f1a:	18fb      	adds	r3, r7, r3
   28f1c:	2201      	movs	r2, #1
   28f1e:	711a      	strb	r2, [r3, #4]
   28f20:	230c      	movs	r3, #12
   28f22:	18fb      	adds	r3, r7, r3
   28f24:	1d3a      	adds	r2, r7, #4
   28f26:	3308      	adds	r3, #8
   28f28:	ca03      	ldmia	r2!, {r0, r1}
   28f2a:	c303      	stmia	r3!, {r0, r1}
   28f2c:	230c      	movs	r3, #12
   28f2e:	18fb      	adds	r3, r7, r3
   28f30:	2206      	movs	r2, #6
   28f32:	741a      	strb	r2, [r3, #16]
   28f34:	230c      	movs	r3, #12
   28f36:	18fa      	adds	r2, r7, r3
   28f38:	4909      	ldr	r1, [pc, #36]	; (28f60 <configure_rtc_calendar+0x84>)
   28f3a:	4b0a      	ldr	r3, [pc, #40]	; (28f64 <configure_rtc_calendar+0x88>)
   28f3c:	0018      	movs	r0, r3
   28f3e:	4b0a      	ldr	r3, [pc, #40]	; (28f68 <configure_rtc_calendar+0x8c>)
   28f40:	4798      	blx	r3
   28f42:	4b08      	ldr	r3, [pc, #32]	; (28f64 <configure_rtc_calendar+0x88>)
   28f44:	0018      	movs	r0, r3
   28f46:	4b09      	ldr	r3, [pc, #36]	; (28f6c <configure_rtc_calendar+0x90>)
   28f48:	4798      	blx	r3
   28f4a:	46c0      	nop			; (mov r8, r8)
   28f4c:	46bd      	mov	sp, r7
   28f4e:	b008      	add	sp, #32
   28f50:	bd80      	pop	{r7, pc}
   28f52:	46c0      	nop			; (mov r8, r8)
   28f54:	00028e39 	.word	0x00028e39
   28f58:	00028dfd 	.word	0x00028dfd
   28f5c:	000007de 	.word	0x000007de
   28f60:	40001400 	.word	0x40001400
   28f64:	200055ac 	.word	0x200055ac
   28f68:	00024a19 	.word	0x00024a19
   28f6c:	00024745 	.word	0x00024745

00028f70 <disk_initialize>:
   28f70:	b590      	push	{r4, r7, lr}
   28f72:	b085      	sub	sp, #20
   28f74:	af00      	add	r7, sp, #0
   28f76:	0002      	movs	r2, r0
   28f78:	1dfb      	adds	r3, r7, #7
   28f7a:	701a      	strb	r2, [r3, #0]
   28f7c:	4b1a      	ldr	r3, [pc, #104]	; (28fe8 <disk_initialize+0x78>)
   28f7e:	4798      	blx	r3
   28f80:	1dfb      	adds	r3, r7, #7
   28f82:	781b      	ldrb	r3, [r3, #0]
   28f84:	2b01      	cmp	r3, #1
   28f86:	d901      	bls.n	28f8c <disk_initialize+0x1c>
   28f88:	2301      	movs	r3, #1
   28f8a:	e029      	b.n	28fe0 <disk_initialize+0x70>
   28f8c:	2300      	movs	r3, #0
   28f8e:	60fb      	str	r3, [r7, #12]
   28f90:	e010      	b.n	28fb4 <disk_initialize+0x44>
   28f92:	230b      	movs	r3, #11
   28f94:	18fc      	adds	r4, r7, r3
   28f96:	1dfb      	adds	r3, r7, #7
   28f98:	781b      	ldrb	r3, [r3, #0]
   28f9a:	0018      	movs	r0, r3
   28f9c:	4b13      	ldr	r3, [pc, #76]	; (28fec <disk_initialize+0x7c>)
   28f9e:	4798      	blx	r3
   28fa0:	0003      	movs	r3, r0
   28fa2:	7023      	strb	r3, [r4, #0]
   28fa4:	230b      	movs	r3, #11
   28fa6:	18fb      	adds	r3, r7, r3
   28fa8:	781b      	ldrb	r3, [r3, #0]
   28faa:	2b03      	cmp	r3, #3
   28fac:	d106      	bne.n	28fbc <disk_initialize+0x4c>
   28fae:	68fb      	ldr	r3, [r7, #12]
   28fb0:	3301      	adds	r3, #1
   28fb2:	60fb      	str	r3, [r7, #12]
   28fb4:	68fb      	ldr	r3, [r7, #12]
   28fb6:	2b01      	cmp	r3, #1
   28fb8:	ddeb      	ble.n	28f92 <disk_initialize+0x22>
   28fba:	e000      	b.n	28fbe <disk_initialize+0x4e>
   28fbc:	46c0      	nop			; (mov r8, r8)
   28fbe:	230b      	movs	r3, #11
   28fc0:	18fb      	adds	r3, r7, r3
   28fc2:	781b      	ldrb	r3, [r3, #0]
   28fc4:	2b00      	cmp	r3, #0
   28fc6:	d001      	beq.n	28fcc <disk_initialize+0x5c>
   28fc8:	2301      	movs	r3, #1
   28fca:	e009      	b.n	28fe0 <disk_initialize+0x70>
   28fcc:	1dfb      	adds	r3, r7, #7
   28fce:	781b      	ldrb	r3, [r3, #0]
   28fd0:	0018      	movs	r0, r3
   28fd2:	4b07      	ldr	r3, [pc, #28]	; (28ff0 <disk_initialize+0x80>)
   28fd4:	4798      	blx	r3
   28fd6:	1e03      	subs	r3, r0, #0
   28fd8:	d001      	beq.n	28fde <disk_initialize+0x6e>
   28fda:	2304      	movs	r3, #4
   28fdc:	e000      	b.n	28fe0 <disk_initialize+0x70>
   28fde:	2300      	movs	r3, #0
   28fe0:	0018      	movs	r0, r3
   28fe2:	46bd      	mov	sp, r7
   28fe4:	b005      	add	sp, #20
   28fe6:	bd90      	pop	{r4, r7, pc}
   28fe8:	00028edd 	.word	0x00028edd
   28fec:	00023c41 	.word	0x00023c41
   28ff0:	00023cf9 	.word	0x00023cf9

00028ff4 <disk_status>:
   28ff4:	b580      	push	{r7, lr}
   28ff6:	b082      	sub	sp, #8
   28ff8:	af00      	add	r7, sp, #0
   28ffa:	0002      	movs	r2, r0
   28ffc:	1dfb      	adds	r3, r7, #7
   28ffe:	701a      	strb	r2, [r3, #0]
   29000:	1dfb      	adds	r3, r7, #7
   29002:	781b      	ldrb	r3, [r3, #0]
   29004:	0018      	movs	r0, r3
   29006:	4b08      	ldr	r3, [pc, #32]	; (29028 <disk_status+0x34>)
   29008:	4798      	blx	r3
   2900a:	1e03      	subs	r3, r0, #0
   2900c:	d002      	beq.n	29014 <disk_status+0x20>
   2900e:	2b02      	cmp	r3, #2
   29010:	d002      	beq.n	29018 <disk_status+0x24>
   29012:	e003      	b.n	2901c <disk_status+0x28>
   29014:	2300      	movs	r3, #0
   29016:	e002      	b.n	2901e <disk_status+0x2a>
   29018:	2303      	movs	r3, #3
   2901a:	e000      	b.n	2901e <disk_status+0x2a>
   2901c:	2301      	movs	r3, #1
   2901e:	0018      	movs	r0, r3
   29020:	46bd      	mov	sp, r7
   29022:	b002      	add	sp, #8
   29024:	bd80      	pop	{r7, pc}
   29026:	46c0      	nop			; (mov r8, r8)
   29028:	00023c41 	.word	0x00023c41

0002902c <disk_read>:
   2902c:	b590      	push	{r4, r7, lr}
   2902e:	b089      	sub	sp, #36	; 0x24
   29030:	af00      	add	r7, sp, #0
   29032:	60b9      	str	r1, [r7, #8]
   29034:	607a      	str	r2, [r7, #4]
   29036:	0019      	movs	r1, r3
   29038:	230f      	movs	r3, #15
   2903a:	18fb      	adds	r3, r7, r3
   2903c:	1c02      	adds	r2, r0, #0
   2903e:	701a      	strb	r2, [r3, #0]
   29040:	230e      	movs	r3, #14
   29042:	18fb      	adds	r3, r7, r3
   29044:	1c0a      	adds	r2, r1, #0
   29046:	701a      	strb	r2, [r3, #0]
   29048:	231b      	movs	r3, #27
   2904a:	18fc      	adds	r4, r7, r3
   2904c:	230f      	movs	r3, #15
   2904e:	18fb      	adds	r3, r7, r3
   29050:	781b      	ldrb	r3, [r3, #0]
   29052:	0018      	movs	r0, r3
   29054:	4b28      	ldr	r3, [pc, #160]	; (290f8 <disk_read+0xcc>)
   29056:	4798      	blx	r3
   29058:	0003      	movs	r3, r0
   2905a:	7023      	strb	r3, [r4, #0]
   2905c:	231b      	movs	r3, #27
   2905e:	18fb      	adds	r3, r7, r3
   29060:	781b      	ldrb	r3, [r3, #0]
   29062:	2b00      	cmp	r3, #0
   29064:	d101      	bne.n	2906a <disk_read+0x3e>
   29066:	2301      	movs	r3, #1
   29068:	e042      	b.n	290f0 <disk_read+0xc4>
   2906a:	2314      	movs	r3, #20
   2906c:	18fa      	adds	r2, r7, r3
   2906e:	230f      	movs	r3, #15
   29070:	18fb      	adds	r3, r7, r3
   29072:	781b      	ldrb	r3, [r3, #0]
   29074:	0011      	movs	r1, r2
   29076:	0018      	movs	r0, r3
   29078:	4b20      	ldr	r3, [pc, #128]	; (290fc <disk_read+0xd0>)
   2907a:	4798      	blx	r3
   2907c:	230e      	movs	r3, #14
   2907e:	18fb      	adds	r3, r7, r3
   29080:	781b      	ldrb	r3, [r3, #0]
   29082:	221b      	movs	r2, #27
   29084:	18ba      	adds	r2, r7, r2
   29086:	7812      	ldrb	r2, [r2, #0]
   29088:	4353      	muls	r3, r2
   2908a:	001a      	movs	r2, r3
   2908c:	687b      	ldr	r3, [r7, #4]
   2908e:	18d2      	adds	r2, r2, r3
   29090:	697b      	ldr	r3, [r7, #20]
   29092:	3301      	adds	r3, #1
   29094:	211b      	movs	r1, #27
   29096:	1879      	adds	r1, r7, r1
   29098:	7809      	ldrb	r1, [r1, #0]
   2909a:	434b      	muls	r3, r1
   2909c:	429a      	cmp	r2, r3
   2909e:	d901      	bls.n	290a4 <disk_read+0x78>
   290a0:	2304      	movs	r3, #4
   290a2:	e025      	b.n	290f0 <disk_read+0xc4>
   290a4:	2300      	movs	r3, #0
   290a6:	61fb      	str	r3, [r7, #28]
   290a8:	e01b      	b.n	290e2 <disk_read+0xb6>
   290aa:	231b      	movs	r3, #27
   290ac:	18fb      	adds	r3, r7, r3
   290ae:	781b      	ldrb	r3, [r3, #0]
   290b0:	69fa      	ldr	r2, [r7, #28]
   290b2:	435a      	muls	r2, r3
   290b4:	687b      	ldr	r3, [r7, #4]
   290b6:	18d1      	adds	r1, r2, r3
   290b8:	231b      	movs	r3, #27
   290ba:	18fb      	adds	r3, r7, r3
   290bc:	781b      	ldrb	r3, [r3, #0]
   290be:	69fa      	ldr	r2, [r7, #28]
   290c0:	4353      	muls	r3, r2
   290c2:	025b      	lsls	r3, r3, #9
   290c4:	68ba      	ldr	r2, [r7, #8]
   290c6:	18d2      	adds	r2, r2, r3
   290c8:	230f      	movs	r3, #15
   290ca:	18fb      	adds	r3, r7, r3
   290cc:	781b      	ldrb	r3, [r3, #0]
   290ce:	0018      	movs	r0, r3
   290d0:	4b0b      	ldr	r3, [pc, #44]	; (29100 <disk_read+0xd4>)
   290d2:	4798      	blx	r3
   290d4:	1e03      	subs	r3, r0, #0
   290d6:	d001      	beq.n	290dc <disk_read+0xb0>
   290d8:	2301      	movs	r3, #1
   290da:	e009      	b.n	290f0 <disk_read+0xc4>
   290dc:	69fb      	ldr	r3, [r7, #28]
   290de:	3301      	adds	r3, #1
   290e0:	61fb      	str	r3, [r7, #28]
   290e2:	230e      	movs	r3, #14
   290e4:	18fb      	adds	r3, r7, r3
   290e6:	781a      	ldrb	r2, [r3, #0]
   290e8:	69fb      	ldr	r3, [r7, #28]
   290ea:	429a      	cmp	r2, r3
   290ec:	d8dd      	bhi.n	290aa <disk_read+0x7e>
   290ee:	2300      	movs	r3, #0
   290f0:	0018      	movs	r0, r3
   290f2:	46bd      	mov	sp, r7
   290f4:	b009      	add	sp, #36	; 0x24
   290f6:	bd90      	pop	{r4, r7, pc}
   290f8:	00023ccd 	.word	0x00023ccd
   290fc:	00023c81 	.word	0x00023c81
   29100:	00023d41 	.word	0x00023d41

00029104 <disk_write>:
   29104:	b590      	push	{r4, r7, lr}
   29106:	b089      	sub	sp, #36	; 0x24
   29108:	af00      	add	r7, sp, #0
   2910a:	60b9      	str	r1, [r7, #8]
   2910c:	607a      	str	r2, [r7, #4]
   2910e:	0019      	movs	r1, r3
   29110:	230f      	movs	r3, #15
   29112:	18fb      	adds	r3, r7, r3
   29114:	1c02      	adds	r2, r0, #0
   29116:	701a      	strb	r2, [r3, #0]
   29118:	230e      	movs	r3, #14
   2911a:	18fb      	adds	r3, r7, r3
   2911c:	1c0a      	adds	r2, r1, #0
   2911e:	701a      	strb	r2, [r3, #0]
   29120:	231b      	movs	r3, #27
   29122:	18fc      	adds	r4, r7, r3
   29124:	230f      	movs	r3, #15
   29126:	18fb      	adds	r3, r7, r3
   29128:	781b      	ldrb	r3, [r3, #0]
   2912a:	0018      	movs	r0, r3
   2912c:	4b28      	ldr	r3, [pc, #160]	; (291d0 <disk_write+0xcc>)
   2912e:	4798      	blx	r3
   29130:	0003      	movs	r3, r0
   29132:	7023      	strb	r3, [r4, #0]
   29134:	231b      	movs	r3, #27
   29136:	18fb      	adds	r3, r7, r3
   29138:	781b      	ldrb	r3, [r3, #0]
   2913a:	2b00      	cmp	r3, #0
   2913c:	d101      	bne.n	29142 <disk_write+0x3e>
   2913e:	2301      	movs	r3, #1
   29140:	e042      	b.n	291c8 <disk_write+0xc4>
   29142:	2314      	movs	r3, #20
   29144:	18fa      	adds	r2, r7, r3
   29146:	230f      	movs	r3, #15
   29148:	18fb      	adds	r3, r7, r3
   2914a:	781b      	ldrb	r3, [r3, #0]
   2914c:	0011      	movs	r1, r2
   2914e:	0018      	movs	r0, r3
   29150:	4b20      	ldr	r3, [pc, #128]	; (291d4 <disk_write+0xd0>)
   29152:	4798      	blx	r3
   29154:	230e      	movs	r3, #14
   29156:	18fb      	adds	r3, r7, r3
   29158:	781b      	ldrb	r3, [r3, #0]
   2915a:	221b      	movs	r2, #27
   2915c:	18ba      	adds	r2, r7, r2
   2915e:	7812      	ldrb	r2, [r2, #0]
   29160:	4353      	muls	r3, r2
   29162:	001a      	movs	r2, r3
   29164:	687b      	ldr	r3, [r7, #4]
   29166:	18d2      	adds	r2, r2, r3
   29168:	697b      	ldr	r3, [r7, #20]
   2916a:	3301      	adds	r3, #1
   2916c:	211b      	movs	r1, #27
   2916e:	1879      	adds	r1, r7, r1
   29170:	7809      	ldrb	r1, [r1, #0]
   29172:	434b      	muls	r3, r1
   29174:	429a      	cmp	r2, r3
   29176:	d901      	bls.n	2917c <disk_write+0x78>
   29178:	2304      	movs	r3, #4
   2917a:	e025      	b.n	291c8 <disk_write+0xc4>
   2917c:	2300      	movs	r3, #0
   2917e:	61fb      	str	r3, [r7, #28]
   29180:	e01b      	b.n	291ba <disk_write+0xb6>
   29182:	231b      	movs	r3, #27
   29184:	18fb      	adds	r3, r7, r3
   29186:	781b      	ldrb	r3, [r3, #0]
   29188:	69fa      	ldr	r2, [r7, #28]
   2918a:	435a      	muls	r2, r3
   2918c:	687b      	ldr	r3, [r7, #4]
   2918e:	18d1      	adds	r1, r2, r3
   29190:	231b      	movs	r3, #27
   29192:	18fb      	adds	r3, r7, r3
   29194:	781b      	ldrb	r3, [r3, #0]
   29196:	69fa      	ldr	r2, [r7, #28]
   29198:	4353      	muls	r3, r2
   2919a:	025b      	lsls	r3, r3, #9
   2919c:	68ba      	ldr	r2, [r7, #8]
   2919e:	18d2      	adds	r2, r2, r3
   291a0:	230f      	movs	r3, #15
   291a2:	18fb      	adds	r3, r7, r3
   291a4:	781b      	ldrb	r3, [r3, #0]
   291a6:	0018      	movs	r0, r3
   291a8:	4b0b      	ldr	r3, [pc, #44]	; (291d8 <disk_write+0xd4>)
   291aa:	4798      	blx	r3
   291ac:	1e03      	subs	r3, r0, #0
   291ae:	d001      	beq.n	291b4 <disk_write+0xb0>
   291b0:	2301      	movs	r3, #1
   291b2:	e009      	b.n	291c8 <disk_write+0xc4>
   291b4:	69fb      	ldr	r3, [r7, #28]
   291b6:	3301      	adds	r3, #1
   291b8:	61fb      	str	r3, [r7, #28]
   291ba:	230e      	movs	r3, #14
   291bc:	18fb      	adds	r3, r7, r3
   291be:	781a      	ldrb	r2, [r3, #0]
   291c0:	69fb      	ldr	r3, [r7, #28]
   291c2:	429a      	cmp	r2, r3
   291c4:	d8dd      	bhi.n	29182 <disk_write+0x7e>
   291c6:	2300      	movs	r3, #0
   291c8:	0018      	movs	r0, r3
   291ca:	46bd      	mov	sp, r7
   291cc:	b009      	add	sp, #36	; 0x24
   291ce:	bd90      	pop	{r4, r7, pc}
   291d0:	00023ccd 	.word	0x00023ccd
   291d4:	00023c81 	.word	0x00023c81
   291d8:	00023d95 	.word	0x00023d95

000291dc <disk_ioctl>:
   291dc:	b590      	push	{r4, r7, lr}
   291de:	b085      	sub	sp, #20
   291e0:	af00      	add	r7, sp, #0
   291e2:	603a      	str	r2, [r7, #0]
   291e4:	1dfb      	adds	r3, r7, #7
   291e6:	1c02      	adds	r2, r0, #0
   291e8:	701a      	strb	r2, [r3, #0]
   291ea:	1dbb      	adds	r3, r7, #6
   291ec:	1c0a      	adds	r2, r1, #0
   291ee:	701a      	strb	r2, [r3, #0]
   291f0:	230f      	movs	r3, #15
   291f2:	18fb      	adds	r3, r7, r3
   291f4:	2204      	movs	r2, #4
   291f6:	701a      	strb	r2, [r3, #0]
   291f8:	1dbb      	adds	r3, r7, #6
   291fa:	781b      	ldrb	r3, [r3, #0]
   291fc:	2b01      	cmp	r3, #1
   291fe:	d00f      	beq.n	29220 <disk_ioctl+0x44>
   29200:	dc02      	bgt.n	29208 <disk_ioctl+0x2c>
   29202:	2b00      	cmp	r3, #0
   29204:	d044      	beq.n	29290 <disk_ioctl+0xb4>
   29206:	e054      	b.n	292b2 <disk_ioctl+0xd6>
   29208:	2b02      	cmp	r3, #2
   2920a:	d01a      	beq.n	29242 <disk_ioctl+0x66>
   2920c:	2b03      	cmp	r3, #3
   2920e:	d150      	bne.n	292b2 <disk_ioctl+0xd6>
   29210:	683b      	ldr	r3, [r7, #0]
   29212:	2201      	movs	r2, #1
   29214:	601a      	str	r2, [r3, #0]
   29216:	230f      	movs	r3, #15
   29218:	18fb      	adds	r3, r7, r3
   2921a:	2200      	movs	r2, #0
   2921c:	701a      	strb	r2, [r3, #0]
   2921e:	e04c      	b.n	292ba <disk_ioctl+0xde>
   29220:	2308      	movs	r3, #8
   29222:	18fa      	adds	r2, r7, r3
   29224:	1dfb      	adds	r3, r7, #7
   29226:	781b      	ldrb	r3, [r3, #0]
   29228:	0011      	movs	r1, r2
   2922a:	0018      	movs	r0, r3
   2922c:	4b26      	ldr	r3, [pc, #152]	; (292c8 <disk_ioctl+0xec>)
   2922e:	4798      	blx	r3
   29230:	68bb      	ldr	r3, [r7, #8]
   29232:	1c5a      	adds	r2, r3, #1
   29234:	683b      	ldr	r3, [r7, #0]
   29236:	601a      	str	r2, [r3, #0]
   29238:	230f      	movs	r3, #15
   2923a:	18fb      	adds	r3, r7, r3
   2923c:	2200      	movs	r2, #0
   2923e:	701a      	strb	r2, [r3, #0]
   29240:	e03b      	b.n	292ba <disk_ioctl+0xde>
   29242:	230e      	movs	r3, #14
   29244:	18fc      	adds	r4, r7, r3
   29246:	1dfb      	adds	r3, r7, #7
   29248:	781b      	ldrb	r3, [r3, #0]
   2924a:	0018      	movs	r0, r3
   2924c:	4b1f      	ldr	r3, [pc, #124]	; (292cc <disk_ioctl+0xf0>)
   2924e:	4798      	blx	r3
   29250:	0003      	movs	r3, r0
   29252:	7023      	strb	r3, [r4, #0]
   29254:	230e      	movs	r3, #14
   29256:	18fb      	adds	r3, r7, r3
   29258:	781b      	ldrb	r3, [r3, #0]
   2925a:	2b01      	cmp	r3, #1
   2925c:	d010      	beq.n	29280 <disk_ioctl+0xa4>
   2925e:	230e      	movs	r3, #14
   29260:	18fb      	adds	r3, r7, r3
   29262:	781b      	ldrb	r3, [r3, #0]
   29264:	2b02      	cmp	r3, #2
   29266:	d00b      	beq.n	29280 <disk_ioctl+0xa4>
   29268:	230e      	movs	r3, #14
   2926a:	18fb      	adds	r3, r7, r3
   2926c:	781b      	ldrb	r3, [r3, #0]
   2926e:	2b04      	cmp	r3, #4
   29270:	d006      	beq.n	29280 <disk_ioctl+0xa4>
   29272:	230e      	movs	r3, #14
   29274:	18fb      	adds	r3, r7, r3
   29276:	781b      	ldrb	r3, [r3, #0]
   29278:	2b08      	cmp	r3, #8
   2927a:	d001      	beq.n	29280 <disk_ioctl+0xa4>
   2927c:	2301      	movs	r3, #1
   2927e:	e01f      	b.n	292c0 <disk_ioctl+0xe4>
   29280:	683b      	ldr	r3, [r7, #0]
   29282:	2200      	movs	r2, #0
   29284:	701a      	strb	r2, [r3, #0]
   29286:	230f      	movs	r3, #15
   29288:	18fb      	adds	r3, r7, r3
   2928a:	2200      	movs	r2, #0
   2928c:	701a      	strb	r2, [r3, #0]
   2928e:	e014      	b.n	292ba <disk_ioctl+0xde>
   29290:	1dfb      	adds	r3, r7, #7
   29292:	781b      	ldrb	r3, [r3, #0]
   29294:	0018      	movs	r0, r3
   29296:	4b0e      	ldr	r3, [pc, #56]	; (292d0 <disk_ioctl+0xf4>)
   29298:	4798      	blx	r3
   2929a:	1e03      	subs	r3, r0, #0
   2929c:	d104      	bne.n	292a8 <disk_ioctl+0xcc>
   2929e:	230f      	movs	r3, #15
   292a0:	18fb      	adds	r3, r7, r3
   292a2:	2200      	movs	r2, #0
   292a4:	701a      	strb	r2, [r3, #0]
   292a6:	e008      	b.n	292ba <disk_ioctl+0xde>
   292a8:	230f      	movs	r3, #15
   292aa:	18fb      	adds	r3, r7, r3
   292ac:	2203      	movs	r2, #3
   292ae:	701a      	strb	r2, [r3, #0]
   292b0:	e003      	b.n	292ba <disk_ioctl+0xde>
   292b2:	230f      	movs	r3, #15
   292b4:	18fb      	adds	r3, r7, r3
   292b6:	2204      	movs	r2, #4
   292b8:	701a      	strb	r2, [r3, #0]
   292ba:	230f      	movs	r3, #15
   292bc:	18fb      	adds	r3, r7, r3
   292be:	781b      	ldrb	r3, [r3, #0]
   292c0:	0018      	movs	r0, r3
   292c2:	46bd      	mov	sp, r7
   292c4:	b005      	add	sp, #20
   292c6:	bd90      	pop	{r4, r7, pc}
   292c8:	00023c81 	.word	0x00023c81
   292cc:	00023ccd 	.word	0x00023ccd
   292d0:	00023c41 	.word	0x00023c41

000292d4 <get_fattime>:
   292d4:	b580      	push	{r7, lr}
   292d6:	b084      	sub	sp, #16
   292d8:	af00      	add	r7, sp, #0
   292da:	1d3a      	adds	r2, r7, #4
   292dc:	4b12      	ldr	r3, [pc, #72]	; (29328 <get_fattime+0x54>)
   292de:	0011      	movs	r1, r2
   292e0:	0018      	movs	r0, r3
   292e2:	4b12      	ldr	r3, [pc, #72]	; (2932c <get_fattime+0x58>)
   292e4:	4798      	blx	r3
   292e6:	1d3b      	adds	r3, r7, #4
   292e8:	88db      	ldrh	r3, [r3, #6]
   292ea:	4a11      	ldr	r2, [pc, #68]	; (29330 <get_fattime+0x5c>)
   292ec:	4694      	mov	ip, r2
   292ee:	4463      	add	r3, ip
   292f0:	065a      	lsls	r2, r3, #25
   292f2:	1d3b      	adds	r3, r7, #4
   292f4:	795b      	ldrb	r3, [r3, #5]
   292f6:	055b      	lsls	r3, r3, #21
   292f8:	431a      	orrs	r2, r3
   292fa:	1d3b      	adds	r3, r7, #4
   292fc:	791b      	ldrb	r3, [r3, #4]
   292fe:	041b      	lsls	r3, r3, #16
   29300:	431a      	orrs	r2, r3
   29302:	1d3b      	adds	r3, r7, #4
   29304:	789b      	ldrb	r3, [r3, #2]
   29306:	02db      	lsls	r3, r3, #11
   29308:	431a      	orrs	r2, r3
   2930a:	1d3b      	adds	r3, r7, #4
   2930c:	785b      	ldrb	r3, [r3, #1]
   2930e:	015b      	lsls	r3, r3, #5
   29310:	4313      	orrs	r3, r2
   29312:	1d3a      	adds	r2, r7, #4
   29314:	7812      	ldrb	r2, [r2, #0]
   29316:	0852      	lsrs	r2, r2, #1
   29318:	b2d2      	uxtb	r2, r2
   2931a:	4313      	orrs	r3, r2
   2931c:	60fb      	str	r3, [r7, #12]
   2931e:	68fb      	ldr	r3, [r7, #12]
   29320:	0018      	movs	r0, r3
   29322:	46bd      	mov	sp, r7
   29324:	b004      	add	sp, #16
   29326:	bd80      	pop	{r7, pc}
   29328:	200055ac 	.word	0x200055ac
   2932c:	00024aad 	.word	0x00024aad
   29330:	fffff844 	.word	0xfffff844

00029334 <mem_cpy>:
   29334:	b580      	push	{r7, lr}
   29336:	b086      	sub	sp, #24
   29338:	af00      	add	r7, sp, #0
   2933a:	60f8      	str	r0, [r7, #12]
   2933c:	60b9      	str	r1, [r7, #8]
   2933e:	607a      	str	r2, [r7, #4]
   29340:	68fb      	ldr	r3, [r7, #12]
   29342:	617b      	str	r3, [r7, #20]
   29344:	68bb      	ldr	r3, [r7, #8]
   29346:	613b      	str	r3, [r7, #16]
   29348:	e007      	b.n	2935a <mem_cpy+0x26>
   2934a:	697b      	ldr	r3, [r7, #20]
   2934c:	1c5a      	adds	r2, r3, #1
   2934e:	617a      	str	r2, [r7, #20]
   29350:	693a      	ldr	r2, [r7, #16]
   29352:	1c51      	adds	r1, r2, #1
   29354:	6139      	str	r1, [r7, #16]
   29356:	7812      	ldrb	r2, [r2, #0]
   29358:	701a      	strb	r2, [r3, #0]
   2935a:	687b      	ldr	r3, [r7, #4]
   2935c:	1e5a      	subs	r2, r3, #1
   2935e:	607a      	str	r2, [r7, #4]
   29360:	2b00      	cmp	r3, #0
   29362:	d1f2      	bne.n	2934a <mem_cpy+0x16>
   29364:	46c0      	nop			; (mov r8, r8)
   29366:	46bd      	mov	sp, r7
   29368:	b006      	add	sp, #24
   2936a:	bd80      	pop	{r7, pc}

0002936c <mem_set>:
   2936c:	b580      	push	{r7, lr}
   2936e:	b086      	sub	sp, #24
   29370:	af00      	add	r7, sp, #0
   29372:	60f8      	str	r0, [r7, #12]
   29374:	60b9      	str	r1, [r7, #8]
   29376:	607a      	str	r2, [r7, #4]
   29378:	68fb      	ldr	r3, [r7, #12]
   2937a:	617b      	str	r3, [r7, #20]
   2937c:	e005      	b.n	2938a <mem_set+0x1e>
   2937e:	697b      	ldr	r3, [r7, #20]
   29380:	1c5a      	adds	r2, r3, #1
   29382:	617a      	str	r2, [r7, #20]
   29384:	68ba      	ldr	r2, [r7, #8]
   29386:	b2d2      	uxtb	r2, r2
   29388:	701a      	strb	r2, [r3, #0]
   2938a:	687b      	ldr	r3, [r7, #4]
   2938c:	1e5a      	subs	r2, r3, #1
   2938e:	607a      	str	r2, [r7, #4]
   29390:	2b00      	cmp	r3, #0
   29392:	d1f4      	bne.n	2937e <mem_set+0x12>
   29394:	46c0      	nop			; (mov r8, r8)
   29396:	46bd      	mov	sp, r7
   29398:	b006      	add	sp, #24
   2939a:	bd80      	pop	{r7, pc}

0002939c <mem_cmp>:
   2939c:	b580      	push	{r7, lr}
   2939e:	b088      	sub	sp, #32
   293a0:	af00      	add	r7, sp, #0
   293a2:	60f8      	str	r0, [r7, #12]
   293a4:	60b9      	str	r1, [r7, #8]
   293a6:	607a      	str	r2, [r7, #4]
   293a8:	68fb      	ldr	r3, [r7, #12]
   293aa:	61fb      	str	r3, [r7, #28]
   293ac:	68bb      	ldr	r3, [r7, #8]
   293ae:	61bb      	str	r3, [r7, #24]
   293b0:	2300      	movs	r3, #0
   293b2:	617b      	str	r3, [r7, #20]
   293b4:	46c0      	nop			; (mov r8, r8)
   293b6:	687b      	ldr	r3, [r7, #4]
   293b8:	1e5a      	subs	r2, r3, #1
   293ba:	607a      	str	r2, [r7, #4]
   293bc:	2b00      	cmp	r3, #0
   293be:	d00d      	beq.n	293dc <mem_cmp+0x40>
   293c0:	69fb      	ldr	r3, [r7, #28]
   293c2:	1c5a      	adds	r2, r3, #1
   293c4:	61fa      	str	r2, [r7, #28]
   293c6:	781b      	ldrb	r3, [r3, #0]
   293c8:	0019      	movs	r1, r3
   293ca:	69bb      	ldr	r3, [r7, #24]
   293cc:	1c5a      	adds	r2, r3, #1
   293ce:	61ba      	str	r2, [r7, #24]
   293d0:	781b      	ldrb	r3, [r3, #0]
   293d2:	1acb      	subs	r3, r1, r3
   293d4:	617b      	str	r3, [r7, #20]
   293d6:	697b      	ldr	r3, [r7, #20]
   293d8:	2b00      	cmp	r3, #0
   293da:	d0ec      	beq.n	293b6 <mem_cmp+0x1a>
   293dc:	697b      	ldr	r3, [r7, #20]
   293de:	0018      	movs	r0, r3
   293e0:	46bd      	mov	sp, r7
   293e2:	b008      	add	sp, #32
   293e4:	bd80      	pop	{r7, pc}

000293e6 <chk_chr>:
   293e6:	b580      	push	{r7, lr}
   293e8:	b082      	sub	sp, #8
   293ea:	af00      	add	r7, sp, #0
   293ec:	6078      	str	r0, [r7, #4]
   293ee:	6039      	str	r1, [r7, #0]
   293f0:	e002      	b.n	293f8 <chk_chr+0x12>
   293f2:	687b      	ldr	r3, [r7, #4]
   293f4:	3301      	adds	r3, #1
   293f6:	607b      	str	r3, [r7, #4]
   293f8:	687b      	ldr	r3, [r7, #4]
   293fa:	781b      	ldrb	r3, [r3, #0]
   293fc:	2b00      	cmp	r3, #0
   293fe:	d005      	beq.n	2940c <chk_chr+0x26>
   29400:	687b      	ldr	r3, [r7, #4]
   29402:	781b      	ldrb	r3, [r3, #0]
   29404:	001a      	movs	r2, r3
   29406:	683b      	ldr	r3, [r7, #0]
   29408:	429a      	cmp	r2, r3
   2940a:	d1f2      	bne.n	293f2 <chk_chr+0xc>
   2940c:	687b      	ldr	r3, [r7, #4]
   2940e:	781b      	ldrb	r3, [r3, #0]
   29410:	0018      	movs	r0, r3
   29412:	46bd      	mov	sp, r7
   29414:	b002      	add	sp, #8
   29416:	bd80      	pop	{r7, pc}

00029418 <move_window>:
   29418:	b590      	push	{r4, r7, lr}
   2941a:	b085      	sub	sp, #20
   2941c:	af00      	add	r7, sp, #0
   2941e:	6078      	str	r0, [r7, #4]
   29420:	6039      	str	r1, [r7, #0]
   29422:	687b      	ldr	r3, [r7, #4]
   29424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   29426:	60fb      	str	r3, [r7, #12]
   29428:	68fa      	ldr	r2, [r7, #12]
   2942a:	683b      	ldr	r3, [r7, #0]
   2942c:	429a      	cmp	r2, r3
   2942e:	d04e      	beq.n	294ce <move_window+0xb6>
   29430:	687b      	ldr	r3, [r7, #4]
   29432:	791b      	ldrb	r3, [r3, #4]
   29434:	2b00      	cmp	r3, #0
   29436:	d037      	beq.n	294a8 <move_window+0x90>
   29438:	687b      	ldr	r3, [r7, #4]
   2943a:	7858      	ldrb	r0, [r3, #1]
   2943c:	687b      	ldr	r3, [r7, #4]
   2943e:	3330      	adds	r3, #48	; 0x30
   29440:	0019      	movs	r1, r3
   29442:	68fa      	ldr	r2, [r7, #12]
   29444:	2301      	movs	r3, #1
   29446:	4c24      	ldr	r4, [pc, #144]	; (294d8 <move_window+0xc0>)
   29448:	47a0      	blx	r4
   2944a:	1e03      	subs	r3, r0, #0
   2944c:	d001      	beq.n	29452 <move_window+0x3a>
   2944e:	2301      	movs	r3, #1
   29450:	e03e      	b.n	294d0 <move_window+0xb8>
   29452:	687b      	ldr	r3, [r7, #4]
   29454:	2200      	movs	r2, #0
   29456:	711a      	strb	r2, [r3, #4]
   29458:	687b      	ldr	r3, [r7, #4]
   2945a:	6a1a      	ldr	r2, [r3, #32]
   2945c:	687b      	ldr	r3, [r7, #4]
   2945e:	69db      	ldr	r3, [r3, #28]
   29460:	18d2      	adds	r2, r2, r3
   29462:	68fb      	ldr	r3, [r7, #12]
   29464:	429a      	cmp	r2, r3
   29466:	d91f      	bls.n	294a8 <move_window+0x90>
   29468:	230b      	movs	r3, #11
   2946a:	18fb      	adds	r3, r7, r3
   2946c:	687a      	ldr	r2, [r7, #4]
   2946e:	78d2      	ldrb	r2, [r2, #3]
   29470:	701a      	strb	r2, [r3, #0]
   29472:	e014      	b.n	2949e <move_window+0x86>
   29474:	687b      	ldr	r3, [r7, #4]
   29476:	69db      	ldr	r3, [r3, #28]
   29478:	68fa      	ldr	r2, [r7, #12]
   2947a:	18d3      	adds	r3, r2, r3
   2947c:	60fb      	str	r3, [r7, #12]
   2947e:	687b      	ldr	r3, [r7, #4]
   29480:	7858      	ldrb	r0, [r3, #1]
   29482:	687b      	ldr	r3, [r7, #4]
   29484:	3330      	adds	r3, #48	; 0x30
   29486:	0019      	movs	r1, r3
   29488:	68fa      	ldr	r2, [r7, #12]
   2948a:	2301      	movs	r3, #1
   2948c:	4c12      	ldr	r4, [pc, #72]	; (294d8 <move_window+0xc0>)
   2948e:	47a0      	blx	r4
   29490:	230b      	movs	r3, #11
   29492:	18fb      	adds	r3, r7, r3
   29494:	781a      	ldrb	r2, [r3, #0]
   29496:	230b      	movs	r3, #11
   29498:	18fb      	adds	r3, r7, r3
   2949a:	3a01      	subs	r2, #1
   2949c:	701a      	strb	r2, [r3, #0]
   2949e:	230b      	movs	r3, #11
   294a0:	18fb      	adds	r3, r7, r3
   294a2:	781b      	ldrb	r3, [r3, #0]
   294a4:	2b01      	cmp	r3, #1
   294a6:	d8e5      	bhi.n	29474 <move_window+0x5c>
   294a8:	683b      	ldr	r3, [r7, #0]
   294aa:	2b00      	cmp	r3, #0
   294ac:	d00f      	beq.n	294ce <move_window+0xb6>
   294ae:	687b      	ldr	r3, [r7, #4]
   294b0:	7858      	ldrb	r0, [r3, #1]
   294b2:	687b      	ldr	r3, [r7, #4]
   294b4:	3330      	adds	r3, #48	; 0x30
   294b6:	0019      	movs	r1, r3
   294b8:	683a      	ldr	r2, [r7, #0]
   294ba:	2301      	movs	r3, #1
   294bc:	4c07      	ldr	r4, [pc, #28]	; (294dc <move_window+0xc4>)
   294be:	47a0      	blx	r4
   294c0:	1e03      	subs	r3, r0, #0
   294c2:	d001      	beq.n	294c8 <move_window+0xb0>
   294c4:	2301      	movs	r3, #1
   294c6:	e003      	b.n	294d0 <move_window+0xb8>
   294c8:	687b      	ldr	r3, [r7, #4]
   294ca:	683a      	ldr	r2, [r7, #0]
   294cc:	62da      	str	r2, [r3, #44]	; 0x2c
   294ce:	2300      	movs	r3, #0
   294d0:	0018      	movs	r0, r3
   294d2:	46bd      	mov	sp, r7
   294d4:	b005      	add	sp, #20
   294d6:	bd90      	pop	{r4, r7, pc}
   294d8:	00029105 	.word	0x00029105
   294dc:	0002902d 	.word	0x0002902d

000294e0 <sync>:
   294e0:	b590      	push	{r4, r7, lr}
   294e2:	b085      	sub	sp, #20
   294e4:	af00      	add	r7, sp, #0
   294e6:	6078      	str	r0, [r7, #4]
   294e8:	230f      	movs	r3, #15
   294ea:	18fc      	adds	r4, r7, r3
   294ec:	687b      	ldr	r3, [r7, #4]
   294ee:	2100      	movs	r1, #0
   294f0:	0018      	movs	r0, r3
   294f2:	4b52      	ldr	r3, [pc, #328]	; (2963c <sync+0x15c>)
   294f4:	4798      	blx	r3
   294f6:	0003      	movs	r3, r0
   294f8:	7023      	strb	r3, [r4, #0]
   294fa:	230f      	movs	r3, #15
   294fc:	18fb      	adds	r3, r7, r3
   294fe:	781b      	ldrb	r3, [r3, #0]
   29500:	2b00      	cmp	r3, #0
   29502:	d000      	beq.n	29506 <sync+0x26>
   29504:	e093      	b.n	2962e <sync+0x14e>
   29506:	687b      	ldr	r3, [r7, #4]
   29508:	781b      	ldrb	r3, [r3, #0]
   2950a:	2b03      	cmp	r3, #3
   2950c:	d000      	beq.n	29510 <sync+0x30>
   2950e:	e081      	b.n	29614 <sync+0x134>
   29510:	687b      	ldr	r3, [r7, #4]
   29512:	795b      	ldrb	r3, [r3, #5]
   29514:	2b00      	cmp	r3, #0
   29516:	d07d      	beq.n	29614 <sync+0x134>
   29518:	687b      	ldr	r3, [r7, #4]
   2951a:	2200      	movs	r2, #0
   2951c:	62da      	str	r2, [r3, #44]	; 0x2c
   2951e:	687b      	ldr	r3, [r7, #4]
   29520:	3330      	adds	r3, #48	; 0x30
   29522:	0018      	movs	r0, r3
   29524:	2380      	movs	r3, #128	; 0x80
   29526:	009b      	lsls	r3, r3, #2
   29528:	001a      	movs	r2, r3
   2952a:	2100      	movs	r1, #0
   2952c:	4b44      	ldr	r3, [pc, #272]	; (29640 <sync+0x160>)
   2952e:	4798      	blx	r3
   29530:	687b      	ldr	r3, [r7, #4]
   29532:	4a44      	ldr	r2, [pc, #272]	; (29644 <sync+0x164>)
   29534:	2155      	movs	r1, #85	; 0x55
   29536:	5499      	strb	r1, [r3, r2]
   29538:	687b      	ldr	r3, [r7, #4]
   2953a:	4a43      	ldr	r2, [pc, #268]	; (29648 <sync+0x168>)
   2953c:	21aa      	movs	r1, #170	; 0xaa
   2953e:	5499      	strb	r1, [r3, r2]
   29540:	687b      	ldr	r3, [r7, #4]
   29542:	2230      	movs	r2, #48	; 0x30
   29544:	2152      	movs	r1, #82	; 0x52
   29546:	5499      	strb	r1, [r3, r2]
   29548:	687b      	ldr	r3, [r7, #4]
   2954a:	2231      	movs	r2, #49	; 0x31
   2954c:	2152      	movs	r1, #82	; 0x52
   2954e:	5499      	strb	r1, [r3, r2]
   29550:	687b      	ldr	r3, [r7, #4]
   29552:	2232      	movs	r2, #50	; 0x32
   29554:	2161      	movs	r1, #97	; 0x61
   29556:	5499      	strb	r1, [r3, r2]
   29558:	687b      	ldr	r3, [r7, #4]
   2955a:	2233      	movs	r2, #51	; 0x33
   2955c:	2141      	movs	r1, #65	; 0x41
   2955e:	5499      	strb	r1, [r3, r2]
   29560:	687a      	ldr	r2, [r7, #4]
   29562:	2385      	movs	r3, #133	; 0x85
   29564:	009b      	lsls	r3, r3, #2
   29566:	2172      	movs	r1, #114	; 0x72
   29568:	54d1      	strb	r1, [r2, r3]
   2956a:	687b      	ldr	r3, [r7, #4]
   2956c:	4a37      	ldr	r2, [pc, #220]	; (2964c <sync+0x16c>)
   2956e:	2172      	movs	r1, #114	; 0x72
   29570:	5499      	strb	r1, [r3, r2]
   29572:	687b      	ldr	r3, [r7, #4]
   29574:	4a36      	ldr	r2, [pc, #216]	; (29650 <sync+0x170>)
   29576:	2141      	movs	r1, #65	; 0x41
   29578:	5499      	strb	r1, [r3, r2]
   2957a:	687b      	ldr	r3, [r7, #4]
   2957c:	4a35      	ldr	r2, [pc, #212]	; (29654 <sync+0x174>)
   2957e:	2161      	movs	r1, #97	; 0x61
   29580:	5499      	strb	r1, [r3, r2]
   29582:	687b      	ldr	r3, [r7, #4]
   29584:	691b      	ldr	r3, [r3, #16]
   29586:	b2d9      	uxtb	r1, r3
   29588:	687a      	ldr	r2, [r7, #4]
   2958a:	2386      	movs	r3, #134	; 0x86
   2958c:	009b      	lsls	r3, r3, #2
   2958e:	54d1      	strb	r1, [r2, r3]
   29590:	687b      	ldr	r3, [r7, #4]
   29592:	691b      	ldr	r3, [r3, #16]
   29594:	b29b      	uxth	r3, r3
   29596:	0a1b      	lsrs	r3, r3, #8
   29598:	b29b      	uxth	r3, r3
   2959a:	b2d9      	uxtb	r1, r3
   2959c:	687b      	ldr	r3, [r7, #4]
   2959e:	4a2e      	ldr	r2, [pc, #184]	; (29658 <sync+0x178>)
   295a0:	5499      	strb	r1, [r3, r2]
   295a2:	687b      	ldr	r3, [r7, #4]
   295a4:	691b      	ldr	r3, [r3, #16]
   295a6:	0c1b      	lsrs	r3, r3, #16
   295a8:	b2d9      	uxtb	r1, r3
   295aa:	687b      	ldr	r3, [r7, #4]
   295ac:	4a2b      	ldr	r2, [pc, #172]	; (2965c <sync+0x17c>)
   295ae:	5499      	strb	r1, [r3, r2]
   295b0:	687b      	ldr	r3, [r7, #4]
   295b2:	691b      	ldr	r3, [r3, #16]
   295b4:	0e1b      	lsrs	r3, r3, #24
   295b6:	b2d9      	uxtb	r1, r3
   295b8:	687b      	ldr	r3, [r7, #4]
   295ba:	4a29      	ldr	r2, [pc, #164]	; (29660 <sync+0x180>)
   295bc:	5499      	strb	r1, [r3, r2]
   295be:	687b      	ldr	r3, [r7, #4]
   295c0:	68db      	ldr	r3, [r3, #12]
   295c2:	b2d9      	uxtb	r1, r3
   295c4:	687a      	ldr	r2, [r7, #4]
   295c6:	2387      	movs	r3, #135	; 0x87
   295c8:	009b      	lsls	r3, r3, #2
   295ca:	54d1      	strb	r1, [r2, r3]
   295cc:	687b      	ldr	r3, [r7, #4]
   295ce:	68db      	ldr	r3, [r3, #12]
   295d0:	b29b      	uxth	r3, r3
   295d2:	0a1b      	lsrs	r3, r3, #8
   295d4:	b29b      	uxth	r3, r3
   295d6:	b2d9      	uxtb	r1, r3
   295d8:	687b      	ldr	r3, [r7, #4]
   295da:	4a22      	ldr	r2, [pc, #136]	; (29664 <sync+0x184>)
   295dc:	5499      	strb	r1, [r3, r2]
   295de:	687b      	ldr	r3, [r7, #4]
   295e0:	68db      	ldr	r3, [r3, #12]
   295e2:	0c1b      	lsrs	r3, r3, #16
   295e4:	b2d9      	uxtb	r1, r3
   295e6:	687b      	ldr	r3, [r7, #4]
   295e8:	4a1f      	ldr	r2, [pc, #124]	; (29668 <sync+0x188>)
   295ea:	5499      	strb	r1, [r3, r2]
   295ec:	687b      	ldr	r3, [r7, #4]
   295ee:	68db      	ldr	r3, [r3, #12]
   295f0:	0e1b      	lsrs	r3, r3, #24
   295f2:	b2d9      	uxtb	r1, r3
   295f4:	687b      	ldr	r3, [r7, #4]
   295f6:	4a1d      	ldr	r2, [pc, #116]	; (2966c <sync+0x18c>)
   295f8:	5499      	strb	r1, [r3, r2]
   295fa:	687b      	ldr	r3, [r7, #4]
   295fc:	7858      	ldrb	r0, [r3, #1]
   295fe:	687b      	ldr	r3, [r7, #4]
   29600:	3330      	adds	r3, #48	; 0x30
   29602:	0019      	movs	r1, r3
   29604:	687b      	ldr	r3, [r7, #4]
   29606:	695a      	ldr	r2, [r3, #20]
   29608:	2301      	movs	r3, #1
   2960a:	4c19      	ldr	r4, [pc, #100]	; (29670 <sync+0x190>)
   2960c:	47a0      	blx	r4
   2960e:	687b      	ldr	r3, [r7, #4]
   29610:	2200      	movs	r2, #0
   29612:	715a      	strb	r2, [r3, #5]
   29614:	687b      	ldr	r3, [r7, #4]
   29616:	785b      	ldrb	r3, [r3, #1]
   29618:	2200      	movs	r2, #0
   2961a:	2100      	movs	r1, #0
   2961c:	0018      	movs	r0, r3
   2961e:	4b15      	ldr	r3, [pc, #84]	; (29674 <sync+0x194>)
   29620:	4798      	blx	r3
   29622:	1e03      	subs	r3, r0, #0
   29624:	d003      	beq.n	2962e <sync+0x14e>
   29626:	230f      	movs	r3, #15
   29628:	18fb      	adds	r3, r7, r3
   2962a:	2201      	movs	r2, #1
   2962c:	701a      	strb	r2, [r3, #0]
   2962e:	230f      	movs	r3, #15
   29630:	18fb      	adds	r3, r7, r3
   29632:	781b      	ldrb	r3, [r3, #0]
   29634:	0018      	movs	r0, r3
   29636:	46bd      	mov	sp, r7
   29638:	b005      	add	sp, #20
   2963a:	bd90      	pop	{r4, r7, pc}
   2963c:	00029419 	.word	0x00029419
   29640:	0002936d 	.word	0x0002936d
   29644:	0000022e 	.word	0x0000022e
   29648:	0000022f 	.word	0x0000022f
   2964c:	00000215 	.word	0x00000215
   29650:	00000216 	.word	0x00000216
   29654:	00000217 	.word	0x00000217
   29658:	00000219 	.word	0x00000219
   2965c:	0000021a 	.word	0x0000021a
   29660:	0000021b 	.word	0x0000021b
   29664:	0000021d 	.word	0x0000021d
   29668:	0000021e 	.word	0x0000021e
   2966c:	0000021f 	.word	0x0000021f
   29670:	00029105 	.word	0x00029105
   29674:	000291dd 	.word	0x000291dd

00029678 <clust2sect>:
   29678:	b580      	push	{r7, lr}
   2967a:	b082      	sub	sp, #8
   2967c:	af00      	add	r7, sp, #0
   2967e:	6078      	str	r0, [r7, #4]
   29680:	6039      	str	r1, [r7, #0]
   29682:	683b      	ldr	r3, [r7, #0]
   29684:	3b02      	subs	r3, #2
   29686:	603b      	str	r3, [r7, #0]
   29688:	687b      	ldr	r3, [r7, #4]
   2968a:	699b      	ldr	r3, [r3, #24]
   2968c:	1e9a      	subs	r2, r3, #2
   2968e:	683b      	ldr	r3, [r7, #0]
   29690:	429a      	cmp	r2, r3
   29692:	d801      	bhi.n	29698 <clust2sect+0x20>
   29694:	2300      	movs	r3, #0
   29696:	e007      	b.n	296a8 <clust2sect+0x30>
   29698:	687b      	ldr	r3, [r7, #4]
   2969a:	789b      	ldrb	r3, [r3, #2]
   2969c:	001a      	movs	r2, r3
   2969e:	683b      	ldr	r3, [r7, #0]
   296a0:	435a      	muls	r2, r3
   296a2:	687b      	ldr	r3, [r7, #4]
   296a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   296a6:	18d3      	adds	r3, r2, r3
   296a8:	0018      	movs	r0, r3
   296aa:	46bd      	mov	sp, r7
   296ac:	b002      	add	sp, #8
   296ae:	bd80      	pop	{r7, pc}

000296b0 <get_fat>:
   296b0:	b580      	push	{r7, lr}
   296b2:	b086      	sub	sp, #24
   296b4:	af00      	add	r7, sp, #0
   296b6:	6078      	str	r0, [r7, #4]
   296b8:	6039      	str	r1, [r7, #0]
   296ba:	683b      	ldr	r3, [r7, #0]
   296bc:	2b01      	cmp	r3, #1
   296be:	d904      	bls.n	296ca <get_fat+0x1a>
   296c0:	687b      	ldr	r3, [r7, #4]
   296c2:	699a      	ldr	r2, [r3, #24]
   296c4:	683b      	ldr	r3, [r7, #0]
   296c6:	429a      	cmp	r2, r3
   296c8:	d801      	bhi.n	296ce <get_fat+0x1e>
   296ca:	2301      	movs	r3, #1
   296cc:	e09f      	b.n	2980e <get_fat+0x15e>
   296ce:	687b      	ldr	r3, [r7, #4]
   296d0:	781b      	ldrb	r3, [r3, #0]
   296d2:	2b02      	cmp	r3, #2
   296d4:	d048      	beq.n	29768 <get_fat+0xb8>
   296d6:	2b03      	cmp	r3, #3
   296d8:	d067      	beq.n	297aa <get_fat+0xfa>
   296da:	2b01      	cmp	r3, #1
   296dc:	d000      	beq.n	296e0 <get_fat+0x30>
   296de:	e094      	b.n	2980a <get_fat+0x15a>
   296e0:	683b      	ldr	r3, [r7, #0]
   296e2:	617b      	str	r3, [r7, #20]
   296e4:	697b      	ldr	r3, [r7, #20]
   296e6:	085b      	lsrs	r3, r3, #1
   296e8:	697a      	ldr	r2, [r7, #20]
   296ea:	18d3      	adds	r3, r2, r3
   296ec:	617b      	str	r3, [r7, #20]
   296ee:	687b      	ldr	r3, [r7, #4]
   296f0:	6a1a      	ldr	r2, [r3, #32]
   296f2:	697b      	ldr	r3, [r7, #20]
   296f4:	0a5b      	lsrs	r3, r3, #9
   296f6:	18d2      	adds	r2, r2, r3
   296f8:	687b      	ldr	r3, [r7, #4]
   296fa:	0011      	movs	r1, r2
   296fc:	0018      	movs	r0, r3
   296fe:	4b46      	ldr	r3, [pc, #280]	; (29818 <get_fat+0x168>)
   29700:	4798      	blx	r3
   29702:	1e03      	subs	r3, r0, #0
   29704:	d000      	beq.n	29708 <get_fat+0x58>
   29706:	e079      	b.n	297fc <get_fat+0x14c>
   29708:	697b      	ldr	r3, [r7, #20]
   2970a:	05db      	lsls	r3, r3, #23
   2970c:	0ddb      	lsrs	r3, r3, #23
   2970e:	687a      	ldr	r2, [r7, #4]
   29710:	2130      	movs	r1, #48	; 0x30
   29712:	18d3      	adds	r3, r2, r3
   29714:	185b      	adds	r3, r3, r1
   29716:	781b      	ldrb	r3, [r3, #0]
   29718:	613b      	str	r3, [r7, #16]
   2971a:	697b      	ldr	r3, [r7, #20]
   2971c:	3301      	adds	r3, #1
   2971e:	617b      	str	r3, [r7, #20]
   29720:	687b      	ldr	r3, [r7, #4]
   29722:	6a1a      	ldr	r2, [r3, #32]
   29724:	697b      	ldr	r3, [r7, #20]
   29726:	0a5b      	lsrs	r3, r3, #9
   29728:	18d2      	adds	r2, r2, r3
   2972a:	687b      	ldr	r3, [r7, #4]
   2972c:	0011      	movs	r1, r2
   2972e:	0018      	movs	r0, r3
   29730:	4b39      	ldr	r3, [pc, #228]	; (29818 <get_fat+0x168>)
   29732:	4798      	blx	r3
   29734:	1e03      	subs	r3, r0, #0
   29736:	d163      	bne.n	29800 <get_fat+0x150>
   29738:	697b      	ldr	r3, [r7, #20]
   2973a:	05db      	lsls	r3, r3, #23
   2973c:	0ddb      	lsrs	r3, r3, #23
   2973e:	687a      	ldr	r2, [r7, #4]
   29740:	2130      	movs	r1, #48	; 0x30
   29742:	18d3      	adds	r3, r2, r3
   29744:	185b      	adds	r3, r3, r1
   29746:	781b      	ldrb	r3, [r3, #0]
   29748:	021b      	lsls	r3, r3, #8
   2974a:	001a      	movs	r2, r3
   2974c:	693b      	ldr	r3, [r7, #16]
   2974e:	4313      	orrs	r3, r2
   29750:	613b      	str	r3, [r7, #16]
   29752:	683b      	ldr	r3, [r7, #0]
   29754:	2201      	movs	r2, #1
   29756:	4013      	ands	r3, r2
   29758:	d002      	beq.n	29760 <get_fat+0xb0>
   2975a:	693b      	ldr	r3, [r7, #16]
   2975c:	091b      	lsrs	r3, r3, #4
   2975e:	e056      	b.n	2980e <get_fat+0x15e>
   29760:	693b      	ldr	r3, [r7, #16]
   29762:	051b      	lsls	r3, r3, #20
   29764:	0d1b      	lsrs	r3, r3, #20
   29766:	e052      	b.n	2980e <get_fat+0x15e>
   29768:	687b      	ldr	r3, [r7, #4]
   2976a:	6a1a      	ldr	r2, [r3, #32]
   2976c:	683b      	ldr	r3, [r7, #0]
   2976e:	0a1b      	lsrs	r3, r3, #8
   29770:	18d2      	adds	r2, r2, r3
   29772:	687b      	ldr	r3, [r7, #4]
   29774:	0011      	movs	r1, r2
   29776:	0018      	movs	r0, r3
   29778:	4b27      	ldr	r3, [pc, #156]	; (29818 <get_fat+0x168>)
   2977a:	4798      	blx	r3
   2977c:	1e03      	subs	r3, r0, #0
   2977e:	d141      	bne.n	29804 <get_fat+0x154>
   29780:	683b      	ldr	r3, [r7, #0]
   29782:	005a      	lsls	r2, r3, #1
   29784:	23ff      	movs	r3, #255	; 0xff
   29786:	005b      	lsls	r3, r3, #1
   29788:	4013      	ands	r3, r2
   2978a:	3330      	adds	r3, #48	; 0x30
   2978c:	687a      	ldr	r2, [r7, #4]
   2978e:	18d3      	adds	r3, r2, r3
   29790:	60fb      	str	r3, [r7, #12]
   29792:	68fb      	ldr	r3, [r7, #12]
   29794:	3301      	adds	r3, #1
   29796:	781b      	ldrb	r3, [r3, #0]
   29798:	021b      	lsls	r3, r3, #8
   2979a:	b21a      	sxth	r2, r3
   2979c:	68fb      	ldr	r3, [r7, #12]
   2979e:	781b      	ldrb	r3, [r3, #0]
   297a0:	b21b      	sxth	r3, r3
   297a2:	4313      	orrs	r3, r2
   297a4:	b21b      	sxth	r3, r3
   297a6:	b29b      	uxth	r3, r3
   297a8:	e031      	b.n	2980e <get_fat+0x15e>
   297aa:	687b      	ldr	r3, [r7, #4]
   297ac:	6a1a      	ldr	r2, [r3, #32]
   297ae:	683b      	ldr	r3, [r7, #0]
   297b0:	09db      	lsrs	r3, r3, #7
   297b2:	18d2      	adds	r2, r2, r3
   297b4:	687b      	ldr	r3, [r7, #4]
   297b6:	0011      	movs	r1, r2
   297b8:	0018      	movs	r0, r3
   297ba:	4b17      	ldr	r3, [pc, #92]	; (29818 <get_fat+0x168>)
   297bc:	4798      	blx	r3
   297be:	1e03      	subs	r3, r0, #0
   297c0:	d122      	bne.n	29808 <get_fat+0x158>
   297c2:	683b      	ldr	r3, [r7, #0]
   297c4:	009a      	lsls	r2, r3, #2
   297c6:	23fe      	movs	r3, #254	; 0xfe
   297c8:	005b      	lsls	r3, r3, #1
   297ca:	4013      	ands	r3, r2
   297cc:	3330      	adds	r3, #48	; 0x30
   297ce:	687a      	ldr	r2, [r7, #4]
   297d0:	18d3      	adds	r3, r2, r3
   297d2:	60fb      	str	r3, [r7, #12]
   297d4:	68fb      	ldr	r3, [r7, #12]
   297d6:	3303      	adds	r3, #3
   297d8:	781b      	ldrb	r3, [r3, #0]
   297da:	061a      	lsls	r2, r3, #24
   297dc:	68fb      	ldr	r3, [r7, #12]
   297de:	3302      	adds	r3, #2
   297e0:	781b      	ldrb	r3, [r3, #0]
   297e2:	041b      	lsls	r3, r3, #16
   297e4:	4313      	orrs	r3, r2
   297e6:	68fa      	ldr	r2, [r7, #12]
   297e8:	3201      	adds	r2, #1
   297ea:	7812      	ldrb	r2, [r2, #0]
   297ec:	0212      	lsls	r2, r2, #8
   297ee:	4313      	orrs	r3, r2
   297f0:	68fa      	ldr	r2, [r7, #12]
   297f2:	7812      	ldrb	r2, [r2, #0]
   297f4:	4313      	orrs	r3, r2
   297f6:	011b      	lsls	r3, r3, #4
   297f8:	091b      	lsrs	r3, r3, #4
   297fa:	e008      	b.n	2980e <get_fat+0x15e>
   297fc:	46c0      	nop			; (mov r8, r8)
   297fe:	e004      	b.n	2980a <get_fat+0x15a>
   29800:	46c0      	nop			; (mov r8, r8)
   29802:	e002      	b.n	2980a <get_fat+0x15a>
   29804:	46c0      	nop			; (mov r8, r8)
   29806:	e000      	b.n	2980a <get_fat+0x15a>
   29808:	46c0      	nop			; (mov r8, r8)
   2980a:	2301      	movs	r3, #1
   2980c:	425b      	negs	r3, r3
   2980e:	0018      	movs	r0, r3
   29810:	46bd      	mov	sp, r7
   29812:	b006      	add	sp, #24
   29814:	bd80      	pop	{r7, pc}
   29816:	46c0      	nop			; (mov r8, r8)
   29818:	00029419 	.word	0x00029419

0002981c <put_fat>:
   2981c:	b590      	push	{r4, r7, lr}
   2981e:	b089      	sub	sp, #36	; 0x24
   29820:	af00      	add	r7, sp, #0
   29822:	60f8      	str	r0, [r7, #12]
   29824:	60b9      	str	r1, [r7, #8]
   29826:	607a      	str	r2, [r7, #4]
   29828:	68bb      	ldr	r3, [r7, #8]
   2982a:	2b01      	cmp	r3, #1
   2982c:	d904      	bls.n	29838 <put_fat+0x1c>
   2982e:	68fb      	ldr	r3, [r7, #12]
   29830:	699a      	ldr	r2, [r3, #24]
   29832:	68bb      	ldr	r3, [r7, #8]
   29834:	429a      	cmp	r2, r3
   29836:	d804      	bhi.n	29842 <put_fat+0x26>
   29838:	231f      	movs	r3, #31
   2983a:	18fb      	adds	r3, r7, r3
   2983c:	2202      	movs	r2, #2
   2983e:	701a      	strb	r2, [r3, #0]
   29840:	e100      	b.n	29a44 <put_fat+0x228>
   29842:	68fb      	ldr	r3, [r7, #12]
   29844:	781b      	ldrb	r3, [r3, #0]
   29846:	2b02      	cmp	r3, #2
   29848:	d100      	bne.n	2984c <put_fat+0x30>
   2984a:	e078      	b.n	2993e <put_fat+0x122>
   2984c:	2b03      	cmp	r3, #3
   2984e:	d100      	bne.n	29852 <put_fat+0x36>
   29850:	e09e      	b.n	29990 <put_fat+0x174>
   29852:	2b01      	cmp	r3, #1
   29854:	d000      	beq.n	29858 <put_fat+0x3c>
   29856:	e0e6      	b.n	29a26 <put_fat+0x20a>
   29858:	68bb      	ldr	r3, [r7, #8]
   2985a:	61bb      	str	r3, [r7, #24]
   2985c:	69bb      	ldr	r3, [r7, #24]
   2985e:	085b      	lsrs	r3, r3, #1
   29860:	69ba      	ldr	r2, [r7, #24]
   29862:	18d3      	adds	r3, r2, r3
   29864:	61bb      	str	r3, [r7, #24]
   29866:	68fb      	ldr	r3, [r7, #12]
   29868:	6a1a      	ldr	r2, [r3, #32]
   2986a:	69bb      	ldr	r3, [r7, #24]
   2986c:	0a5b      	lsrs	r3, r3, #9
   2986e:	18d2      	adds	r2, r2, r3
   29870:	231f      	movs	r3, #31
   29872:	18fc      	adds	r4, r7, r3
   29874:	68fb      	ldr	r3, [r7, #12]
   29876:	0011      	movs	r1, r2
   29878:	0018      	movs	r0, r3
   2987a:	4b76      	ldr	r3, [pc, #472]	; (29a54 <put_fat+0x238>)
   2987c:	4798      	blx	r3
   2987e:	0003      	movs	r3, r0
   29880:	7023      	strb	r3, [r4, #0]
   29882:	231f      	movs	r3, #31
   29884:	18fb      	adds	r3, r7, r3
   29886:	781b      	ldrb	r3, [r3, #0]
   29888:	2b00      	cmp	r3, #0
   2988a:	d000      	beq.n	2988e <put_fat+0x72>
   2988c:	e0d0      	b.n	29a30 <put_fat+0x214>
   2988e:	69bb      	ldr	r3, [r7, #24]
   29890:	05db      	lsls	r3, r3, #23
   29892:	0ddb      	lsrs	r3, r3, #23
   29894:	3330      	adds	r3, #48	; 0x30
   29896:	68fa      	ldr	r2, [r7, #12]
   29898:	18d3      	adds	r3, r2, r3
   2989a:	617b      	str	r3, [r7, #20]
   2989c:	68bb      	ldr	r3, [r7, #8]
   2989e:	2201      	movs	r2, #1
   298a0:	4013      	ands	r3, r2
   298a2:	d00d      	beq.n	298c0 <put_fat+0xa4>
   298a4:	697b      	ldr	r3, [r7, #20]
   298a6:	781b      	ldrb	r3, [r3, #0]
   298a8:	b25b      	sxtb	r3, r3
   298aa:	220f      	movs	r2, #15
   298ac:	4013      	ands	r3, r2
   298ae:	b25a      	sxtb	r2, r3
   298b0:	687b      	ldr	r3, [r7, #4]
   298b2:	b2db      	uxtb	r3, r3
   298b4:	011b      	lsls	r3, r3, #4
   298b6:	b25b      	sxtb	r3, r3
   298b8:	4313      	orrs	r3, r2
   298ba:	b25b      	sxtb	r3, r3
   298bc:	b2db      	uxtb	r3, r3
   298be:	e001      	b.n	298c4 <put_fat+0xa8>
   298c0:	687b      	ldr	r3, [r7, #4]
   298c2:	b2db      	uxtb	r3, r3
   298c4:	697a      	ldr	r2, [r7, #20]
   298c6:	7013      	strb	r3, [r2, #0]
   298c8:	69bb      	ldr	r3, [r7, #24]
   298ca:	3301      	adds	r3, #1
   298cc:	61bb      	str	r3, [r7, #24]
   298ce:	68fb      	ldr	r3, [r7, #12]
   298d0:	2201      	movs	r2, #1
   298d2:	711a      	strb	r2, [r3, #4]
   298d4:	68fb      	ldr	r3, [r7, #12]
   298d6:	6a1a      	ldr	r2, [r3, #32]
   298d8:	69bb      	ldr	r3, [r7, #24]
   298da:	0a5b      	lsrs	r3, r3, #9
   298dc:	18d2      	adds	r2, r2, r3
   298de:	231f      	movs	r3, #31
   298e0:	18fc      	adds	r4, r7, r3
   298e2:	68fb      	ldr	r3, [r7, #12]
   298e4:	0011      	movs	r1, r2
   298e6:	0018      	movs	r0, r3
   298e8:	4b5a      	ldr	r3, [pc, #360]	; (29a54 <put_fat+0x238>)
   298ea:	4798      	blx	r3
   298ec:	0003      	movs	r3, r0
   298ee:	7023      	strb	r3, [r4, #0]
   298f0:	231f      	movs	r3, #31
   298f2:	18fb      	adds	r3, r7, r3
   298f4:	781b      	ldrb	r3, [r3, #0]
   298f6:	2b00      	cmp	r3, #0
   298f8:	d000      	beq.n	298fc <put_fat+0xe0>
   298fa:	e09b      	b.n	29a34 <put_fat+0x218>
   298fc:	69bb      	ldr	r3, [r7, #24]
   298fe:	05db      	lsls	r3, r3, #23
   29900:	0ddb      	lsrs	r3, r3, #23
   29902:	3330      	adds	r3, #48	; 0x30
   29904:	68fa      	ldr	r2, [r7, #12]
   29906:	18d3      	adds	r3, r2, r3
   29908:	617b      	str	r3, [r7, #20]
   2990a:	68bb      	ldr	r3, [r7, #8]
   2990c:	2201      	movs	r2, #1
   2990e:	4013      	ands	r3, r2
   29910:	d003      	beq.n	2991a <put_fat+0xfe>
   29912:	687b      	ldr	r3, [r7, #4]
   29914:	091b      	lsrs	r3, r3, #4
   29916:	b2db      	uxtb	r3, r3
   29918:	e00e      	b.n	29938 <put_fat+0x11c>
   2991a:	697b      	ldr	r3, [r7, #20]
   2991c:	781b      	ldrb	r3, [r3, #0]
   2991e:	b25b      	sxtb	r3, r3
   29920:	220f      	movs	r2, #15
   29922:	4393      	bics	r3, r2
   29924:	b25a      	sxtb	r2, r3
   29926:	687b      	ldr	r3, [r7, #4]
   29928:	0a1b      	lsrs	r3, r3, #8
   2992a:	b25b      	sxtb	r3, r3
   2992c:	210f      	movs	r1, #15
   2992e:	400b      	ands	r3, r1
   29930:	b25b      	sxtb	r3, r3
   29932:	4313      	orrs	r3, r2
   29934:	b25b      	sxtb	r3, r3
   29936:	b2db      	uxtb	r3, r3
   29938:	697a      	ldr	r2, [r7, #20]
   2993a:	7013      	strb	r3, [r2, #0]
   2993c:	e07f      	b.n	29a3e <put_fat+0x222>
   2993e:	68fb      	ldr	r3, [r7, #12]
   29940:	6a1a      	ldr	r2, [r3, #32]
   29942:	68bb      	ldr	r3, [r7, #8]
   29944:	0a1b      	lsrs	r3, r3, #8
   29946:	18d2      	adds	r2, r2, r3
   29948:	231f      	movs	r3, #31
   2994a:	18fc      	adds	r4, r7, r3
   2994c:	68fb      	ldr	r3, [r7, #12]
   2994e:	0011      	movs	r1, r2
   29950:	0018      	movs	r0, r3
   29952:	4b40      	ldr	r3, [pc, #256]	; (29a54 <put_fat+0x238>)
   29954:	4798      	blx	r3
   29956:	0003      	movs	r3, r0
   29958:	7023      	strb	r3, [r4, #0]
   2995a:	231f      	movs	r3, #31
   2995c:	18fb      	adds	r3, r7, r3
   2995e:	781b      	ldrb	r3, [r3, #0]
   29960:	2b00      	cmp	r3, #0
   29962:	d169      	bne.n	29a38 <put_fat+0x21c>
   29964:	68bb      	ldr	r3, [r7, #8]
   29966:	005a      	lsls	r2, r3, #1
   29968:	23ff      	movs	r3, #255	; 0xff
   2996a:	005b      	lsls	r3, r3, #1
   2996c:	4013      	ands	r3, r2
   2996e:	3330      	adds	r3, #48	; 0x30
   29970:	68fa      	ldr	r2, [r7, #12]
   29972:	18d3      	adds	r3, r2, r3
   29974:	617b      	str	r3, [r7, #20]
   29976:	687b      	ldr	r3, [r7, #4]
   29978:	b2da      	uxtb	r2, r3
   2997a:	697b      	ldr	r3, [r7, #20]
   2997c:	701a      	strb	r2, [r3, #0]
   2997e:	697b      	ldr	r3, [r7, #20]
   29980:	3301      	adds	r3, #1
   29982:	687a      	ldr	r2, [r7, #4]
   29984:	b292      	uxth	r2, r2
   29986:	0a12      	lsrs	r2, r2, #8
   29988:	b292      	uxth	r2, r2
   2998a:	b2d2      	uxtb	r2, r2
   2998c:	701a      	strb	r2, [r3, #0]
   2998e:	e056      	b.n	29a3e <put_fat+0x222>
   29990:	68fb      	ldr	r3, [r7, #12]
   29992:	6a1a      	ldr	r2, [r3, #32]
   29994:	68bb      	ldr	r3, [r7, #8]
   29996:	09db      	lsrs	r3, r3, #7
   29998:	18d2      	adds	r2, r2, r3
   2999a:	231f      	movs	r3, #31
   2999c:	18fc      	adds	r4, r7, r3
   2999e:	68fb      	ldr	r3, [r7, #12]
   299a0:	0011      	movs	r1, r2
   299a2:	0018      	movs	r0, r3
   299a4:	4b2b      	ldr	r3, [pc, #172]	; (29a54 <put_fat+0x238>)
   299a6:	4798      	blx	r3
   299a8:	0003      	movs	r3, r0
   299aa:	7023      	strb	r3, [r4, #0]
   299ac:	231f      	movs	r3, #31
   299ae:	18fb      	adds	r3, r7, r3
   299b0:	781b      	ldrb	r3, [r3, #0]
   299b2:	2b00      	cmp	r3, #0
   299b4:	d142      	bne.n	29a3c <put_fat+0x220>
   299b6:	68bb      	ldr	r3, [r7, #8]
   299b8:	009a      	lsls	r2, r3, #2
   299ba:	23fe      	movs	r3, #254	; 0xfe
   299bc:	005b      	lsls	r3, r3, #1
   299be:	4013      	ands	r3, r2
   299c0:	3330      	adds	r3, #48	; 0x30
   299c2:	68fa      	ldr	r2, [r7, #12]
   299c4:	18d3      	adds	r3, r2, r3
   299c6:	617b      	str	r3, [r7, #20]
   299c8:	697b      	ldr	r3, [r7, #20]
   299ca:	3303      	adds	r3, #3
   299cc:	781b      	ldrb	r3, [r3, #0]
   299ce:	061a      	lsls	r2, r3, #24
   299d0:	697b      	ldr	r3, [r7, #20]
   299d2:	3302      	adds	r3, #2
   299d4:	781b      	ldrb	r3, [r3, #0]
   299d6:	041b      	lsls	r3, r3, #16
   299d8:	4313      	orrs	r3, r2
   299da:	697a      	ldr	r2, [r7, #20]
   299dc:	3201      	adds	r2, #1
   299de:	7812      	ldrb	r2, [r2, #0]
   299e0:	0212      	lsls	r2, r2, #8
   299e2:	4313      	orrs	r3, r2
   299e4:	697a      	ldr	r2, [r7, #20]
   299e6:	7812      	ldrb	r2, [r2, #0]
   299e8:	4313      	orrs	r3, r2
   299ea:	0f1b      	lsrs	r3, r3, #28
   299ec:	071b      	lsls	r3, r3, #28
   299ee:	687a      	ldr	r2, [r7, #4]
   299f0:	4313      	orrs	r3, r2
   299f2:	607b      	str	r3, [r7, #4]
   299f4:	687b      	ldr	r3, [r7, #4]
   299f6:	b2da      	uxtb	r2, r3
   299f8:	697b      	ldr	r3, [r7, #20]
   299fa:	701a      	strb	r2, [r3, #0]
   299fc:	697b      	ldr	r3, [r7, #20]
   299fe:	3301      	adds	r3, #1
   29a00:	687a      	ldr	r2, [r7, #4]
   29a02:	b292      	uxth	r2, r2
   29a04:	0a12      	lsrs	r2, r2, #8
   29a06:	b292      	uxth	r2, r2
   29a08:	b2d2      	uxtb	r2, r2
   29a0a:	701a      	strb	r2, [r3, #0]
   29a0c:	697b      	ldr	r3, [r7, #20]
   29a0e:	3302      	adds	r3, #2
   29a10:	687a      	ldr	r2, [r7, #4]
   29a12:	0c12      	lsrs	r2, r2, #16
   29a14:	b2d2      	uxtb	r2, r2
   29a16:	701a      	strb	r2, [r3, #0]
   29a18:	697b      	ldr	r3, [r7, #20]
   29a1a:	3303      	adds	r3, #3
   29a1c:	687a      	ldr	r2, [r7, #4]
   29a1e:	0e12      	lsrs	r2, r2, #24
   29a20:	b2d2      	uxtb	r2, r2
   29a22:	701a      	strb	r2, [r3, #0]
   29a24:	e00b      	b.n	29a3e <put_fat+0x222>
   29a26:	231f      	movs	r3, #31
   29a28:	18fb      	adds	r3, r7, r3
   29a2a:	2202      	movs	r2, #2
   29a2c:	701a      	strb	r2, [r3, #0]
   29a2e:	e006      	b.n	29a3e <put_fat+0x222>
   29a30:	46c0      	nop			; (mov r8, r8)
   29a32:	e004      	b.n	29a3e <put_fat+0x222>
   29a34:	46c0      	nop			; (mov r8, r8)
   29a36:	e002      	b.n	29a3e <put_fat+0x222>
   29a38:	46c0      	nop			; (mov r8, r8)
   29a3a:	e000      	b.n	29a3e <put_fat+0x222>
   29a3c:	46c0      	nop			; (mov r8, r8)
   29a3e:	68fb      	ldr	r3, [r7, #12]
   29a40:	2201      	movs	r2, #1
   29a42:	711a      	strb	r2, [r3, #4]
   29a44:	231f      	movs	r3, #31
   29a46:	18fb      	adds	r3, r7, r3
   29a48:	781b      	ldrb	r3, [r3, #0]
   29a4a:	0018      	movs	r0, r3
   29a4c:	46bd      	mov	sp, r7
   29a4e:	b009      	add	sp, #36	; 0x24
   29a50:	bd90      	pop	{r4, r7, pc}
   29a52:	46c0      	nop			; (mov r8, r8)
   29a54:	00029419 	.word	0x00029419

00029a58 <remove_chain>:
   29a58:	b590      	push	{r4, r7, lr}
   29a5a:	b085      	sub	sp, #20
   29a5c:	af00      	add	r7, sp, #0
   29a5e:	6078      	str	r0, [r7, #4]
   29a60:	6039      	str	r1, [r7, #0]
   29a62:	683b      	ldr	r3, [r7, #0]
   29a64:	2b01      	cmp	r3, #1
   29a66:	d904      	bls.n	29a72 <remove_chain+0x1a>
   29a68:	687b      	ldr	r3, [r7, #4]
   29a6a:	699a      	ldr	r2, [r3, #24]
   29a6c:	683b      	ldr	r3, [r7, #0]
   29a6e:	429a      	cmp	r2, r3
   29a70:	d804      	bhi.n	29a7c <remove_chain+0x24>
   29a72:	230f      	movs	r3, #15
   29a74:	18fb      	adds	r3, r7, r3
   29a76:	2202      	movs	r2, #2
   29a78:	701a      	strb	r2, [r3, #0]
   29a7a:	e045      	b.n	29b08 <remove_chain+0xb0>
   29a7c:	230f      	movs	r3, #15
   29a7e:	18fb      	adds	r3, r7, r3
   29a80:	2200      	movs	r2, #0
   29a82:	701a      	strb	r2, [r3, #0]
   29a84:	e037      	b.n	29af6 <remove_chain+0x9e>
   29a86:	683a      	ldr	r2, [r7, #0]
   29a88:	687b      	ldr	r3, [r7, #4]
   29a8a:	0011      	movs	r1, r2
   29a8c:	0018      	movs	r0, r3
   29a8e:	4b22      	ldr	r3, [pc, #136]	; (29b18 <remove_chain+0xc0>)
   29a90:	4798      	blx	r3
   29a92:	0003      	movs	r3, r0
   29a94:	60bb      	str	r3, [r7, #8]
   29a96:	68bb      	ldr	r3, [r7, #8]
   29a98:	2b00      	cmp	r3, #0
   29a9a:	d032      	beq.n	29b02 <remove_chain+0xaa>
   29a9c:	68bb      	ldr	r3, [r7, #8]
   29a9e:	2b01      	cmp	r3, #1
   29aa0:	d104      	bne.n	29aac <remove_chain+0x54>
   29aa2:	230f      	movs	r3, #15
   29aa4:	18fb      	adds	r3, r7, r3
   29aa6:	2202      	movs	r2, #2
   29aa8:	701a      	strb	r2, [r3, #0]
   29aaa:	e02d      	b.n	29b08 <remove_chain+0xb0>
   29aac:	68bb      	ldr	r3, [r7, #8]
   29aae:	3301      	adds	r3, #1
   29ab0:	d104      	bne.n	29abc <remove_chain+0x64>
   29ab2:	230f      	movs	r3, #15
   29ab4:	18fb      	adds	r3, r7, r3
   29ab6:	2201      	movs	r2, #1
   29ab8:	701a      	strb	r2, [r3, #0]
   29aba:	e025      	b.n	29b08 <remove_chain+0xb0>
   29abc:	230f      	movs	r3, #15
   29abe:	18fc      	adds	r4, r7, r3
   29ac0:	6839      	ldr	r1, [r7, #0]
   29ac2:	687b      	ldr	r3, [r7, #4]
   29ac4:	2200      	movs	r2, #0
   29ac6:	0018      	movs	r0, r3
   29ac8:	4b14      	ldr	r3, [pc, #80]	; (29b1c <remove_chain+0xc4>)
   29aca:	4798      	blx	r3
   29acc:	0003      	movs	r3, r0
   29ace:	7023      	strb	r3, [r4, #0]
   29ad0:	230f      	movs	r3, #15
   29ad2:	18fb      	adds	r3, r7, r3
   29ad4:	781b      	ldrb	r3, [r3, #0]
   29ad6:	2b00      	cmp	r3, #0
   29ad8:	d115      	bne.n	29b06 <remove_chain+0xae>
   29ada:	687b      	ldr	r3, [r7, #4]
   29adc:	691b      	ldr	r3, [r3, #16]
   29ade:	3301      	adds	r3, #1
   29ae0:	d007      	beq.n	29af2 <remove_chain+0x9a>
   29ae2:	687b      	ldr	r3, [r7, #4]
   29ae4:	691b      	ldr	r3, [r3, #16]
   29ae6:	1c5a      	adds	r2, r3, #1
   29ae8:	687b      	ldr	r3, [r7, #4]
   29aea:	611a      	str	r2, [r3, #16]
   29aec:	687b      	ldr	r3, [r7, #4]
   29aee:	2201      	movs	r2, #1
   29af0:	715a      	strb	r2, [r3, #5]
   29af2:	68bb      	ldr	r3, [r7, #8]
   29af4:	603b      	str	r3, [r7, #0]
   29af6:	687b      	ldr	r3, [r7, #4]
   29af8:	699a      	ldr	r2, [r3, #24]
   29afa:	683b      	ldr	r3, [r7, #0]
   29afc:	429a      	cmp	r2, r3
   29afe:	d8c2      	bhi.n	29a86 <remove_chain+0x2e>
   29b00:	e002      	b.n	29b08 <remove_chain+0xb0>
   29b02:	46c0      	nop			; (mov r8, r8)
   29b04:	e000      	b.n	29b08 <remove_chain+0xb0>
   29b06:	46c0      	nop			; (mov r8, r8)
   29b08:	230f      	movs	r3, #15
   29b0a:	18fb      	adds	r3, r7, r3
   29b0c:	781b      	ldrb	r3, [r3, #0]
   29b0e:	0018      	movs	r0, r3
   29b10:	46bd      	mov	sp, r7
   29b12:	b005      	add	sp, #20
   29b14:	bd90      	pop	{r4, r7, pc}
   29b16:	46c0      	nop			; (mov r8, r8)
   29b18:	000296b1 	.word	0x000296b1
   29b1c:	0002981d 	.word	0x0002981d

00029b20 <create_chain>:
   29b20:	b590      	push	{r4, r7, lr}
   29b22:	b087      	sub	sp, #28
   29b24:	af00      	add	r7, sp, #0
   29b26:	6078      	str	r0, [r7, #4]
   29b28:	6039      	str	r1, [r7, #0]
   29b2a:	683b      	ldr	r3, [r7, #0]
   29b2c:	2b00      	cmp	r3, #0
   29b2e:	d10d      	bne.n	29b4c <create_chain+0x2c>
   29b30:	687b      	ldr	r3, [r7, #4]
   29b32:	68db      	ldr	r3, [r3, #12]
   29b34:	613b      	str	r3, [r7, #16]
   29b36:	693b      	ldr	r3, [r7, #16]
   29b38:	2b00      	cmp	r3, #0
   29b3a:	d004      	beq.n	29b46 <create_chain+0x26>
   29b3c:	687b      	ldr	r3, [r7, #4]
   29b3e:	699a      	ldr	r2, [r3, #24]
   29b40:	693b      	ldr	r3, [r7, #16]
   29b42:	429a      	cmp	r2, r3
   29b44:	d818      	bhi.n	29b78 <create_chain+0x58>
   29b46:	2301      	movs	r3, #1
   29b48:	613b      	str	r3, [r7, #16]
   29b4a:	e015      	b.n	29b78 <create_chain+0x58>
   29b4c:	683a      	ldr	r2, [r7, #0]
   29b4e:	687b      	ldr	r3, [r7, #4]
   29b50:	0011      	movs	r1, r2
   29b52:	0018      	movs	r0, r3
   29b54:	4b3e      	ldr	r3, [pc, #248]	; (29c50 <create_chain+0x130>)
   29b56:	4798      	blx	r3
   29b58:	0003      	movs	r3, r0
   29b5a:	60bb      	str	r3, [r7, #8]
   29b5c:	68bb      	ldr	r3, [r7, #8]
   29b5e:	2b01      	cmp	r3, #1
   29b60:	d801      	bhi.n	29b66 <create_chain+0x46>
   29b62:	2301      	movs	r3, #1
   29b64:	e070      	b.n	29c48 <create_chain+0x128>
   29b66:	687b      	ldr	r3, [r7, #4]
   29b68:	699a      	ldr	r2, [r3, #24]
   29b6a:	68bb      	ldr	r3, [r7, #8]
   29b6c:	429a      	cmp	r2, r3
   29b6e:	d901      	bls.n	29b74 <create_chain+0x54>
   29b70:	68bb      	ldr	r3, [r7, #8]
   29b72:	e069      	b.n	29c48 <create_chain+0x128>
   29b74:	683b      	ldr	r3, [r7, #0]
   29b76:	613b      	str	r3, [r7, #16]
   29b78:	693b      	ldr	r3, [r7, #16]
   29b7a:	617b      	str	r3, [r7, #20]
   29b7c:	697b      	ldr	r3, [r7, #20]
   29b7e:	3301      	adds	r3, #1
   29b80:	617b      	str	r3, [r7, #20]
   29b82:	687b      	ldr	r3, [r7, #4]
   29b84:	699a      	ldr	r2, [r3, #24]
   29b86:	697b      	ldr	r3, [r7, #20]
   29b88:	429a      	cmp	r2, r3
   29b8a:	d807      	bhi.n	29b9c <create_chain+0x7c>
   29b8c:	2302      	movs	r3, #2
   29b8e:	617b      	str	r3, [r7, #20]
   29b90:	697a      	ldr	r2, [r7, #20]
   29b92:	693b      	ldr	r3, [r7, #16]
   29b94:	429a      	cmp	r2, r3
   29b96:	d901      	bls.n	29b9c <create_chain+0x7c>
   29b98:	2300      	movs	r3, #0
   29b9a:	e055      	b.n	29c48 <create_chain+0x128>
   29b9c:	697a      	ldr	r2, [r7, #20]
   29b9e:	687b      	ldr	r3, [r7, #4]
   29ba0:	0011      	movs	r1, r2
   29ba2:	0018      	movs	r0, r3
   29ba4:	4b2a      	ldr	r3, [pc, #168]	; (29c50 <create_chain+0x130>)
   29ba6:	4798      	blx	r3
   29ba8:	0003      	movs	r3, r0
   29baa:	60bb      	str	r3, [r7, #8]
   29bac:	68bb      	ldr	r3, [r7, #8]
   29bae:	2b00      	cmp	r3, #0
   29bb0:	d00d      	beq.n	29bce <create_chain+0xae>
   29bb2:	68bb      	ldr	r3, [r7, #8]
   29bb4:	3301      	adds	r3, #1
   29bb6:	d002      	beq.n	29bbe <create_chain+0x9e>
   29bb8:	68bb      	ldr	r3, [r7, #8]
   29bba:	2b01      	cmp	r3, #1
   29bbc:	d101      	bne.n	29bc2 <create_chain+0xa2>
   29bbe:	68bb      	ldr	r3, [r7, #8]
   29bc0:	e042      	b.n	29c48 <create_chain+0x128>
   29bc2:	697a      	ldr	r2, [r7, #20]
   29bc4:	693b      	ldr	r3, [r7, #16]
   29bc6:	429a      	cmp	r2, r3
   29bc8:	d1d8      	bne.n	29b7c <create_chain+0x5c>
   29bca:	2300      	movs	r3, #0
   29bcc:	e03c      	b.n	29c48 <create_chain+0x128>
   29bce:	46c0      	nop			; (mov r8, r8)
   29bd0:	230f      	movs	r3, #15
   29bd2:	18fc      	adds	r4, r7, r3
   29bd4:	4a1f      	ldr	r2, [pc, #124]	; (29c54 <create_chain+0x134>)
   29bd6:	6979      	ldr	r1, [r7, #20]
   29bd8:	687b      	ldr	r3, [r7, #4]
   29bda:	0018      	movs	r0, r3
   29bdc:	4b1e      	ldr	r3, [pc, #120]	; (29c58 <create_chain+0x138>)
   29bde:	4798      	blx	r3
   29be0:	0003      	movs	r3, r0
   29be2:	7023      	strb	r3, [r4, #0]
   29be4:	230f      	movs	r3, #15
   29be6:	18fb      	adds	r3, r7, r3
   29be8:	781b      	ldrb	r3, [r3, #0]
   29bea:	2b00      	cmp	r3, #0
   29bec:	d10c      	bne.n	29c08 <create_chain+0xe8>
   29bee:	683b      	ldr	r3, [r7, #0]
   29bf0:	2b00      	cmp	r3, #0
   29bf2:	d009      	beq.n	29c08 <create_chain+0xe8>
   29bf4:	230f      	movs	r3, #15
   29bf6:	18fc      	adds	r4, r7, r3
   29bf8:	697a      	ldr	r2, [r7, #20]
   29bfa:	6839      	ldr	r1, [r7, #0]
   29bfc:	687b      	ldr	r3, [r7, #4]
   29bfe:	0018      	movs	r0, r3
   29c00:	4b15      	ldr	r3, [pc, #84]	; (29c58 <create_chain+0x138>)
   29c02:	4798      	blx	r3
   29c04:	0003      	movs	r3, r0
   29c06:	7023      	strb	r3, [r4, #0]
   29c08:	230f      	movs	r3, #15
   29c0a:	18fb      	adds	r3, r7, r3
   29c0c:	781b      	ldrb	r3, [r3, #0]
   29c0e:	2b00      	cmp	r3, #0
   29c10:	d10f      	bne.n	29c32 <create_chain+0x112>
   29c12:	687b      	ldr	r3, [r7, #4]
   29c14:	697a      	ldr	r2, [r7, #20]
   29c16:	60da      	str	r2, [r3, #12]
   29c18:	687b      	ldr	r3, [r7, #4]
   29c1a:	691b      	ldr	r3, [r3, #16]
   29c1c:	3301      	adds	r3, #1
   29c1e:	d012      	beq.n	29c46 <create_chain+0x126>
   29c20:	687b      	ldr	r3, [r7, #4]
   29c22:	691b      	ldr	r3, [r3, #16]
   29c24:	1e5a      	subs	r2, r3, #1
   29c26:	687b      	ldr	r3, [r7, #4]
   29c28:	611a      	str	r2, [r3, #16]
   29c2a:	687b      	ldr	r3, [r7, #4]
   29c2c:	2201      	movs	r2, #1
   29c2e:	715a      	strb	r2, [r3, #5]
   29c30:	e009      	b.n	29c46 <create_chain+0x126>
   29c32:	230f      	movs	r3, #15
   29c34:	18fb      	adds	r3, r7, r3
   29c36:	781b      	ldrb	r3, [r3, #0]
   29c38:	2b01      	cmp	r3, #1
   29c3a:	d102      	bne.n	29c42 <create_chain+0x122>
   29c3c:	2301      	movs	r3, #1
   29c3e:	425b      	negs	r3, r3
   29c40:	e000      	b.n	29c44 <create_chain+0x124>
   29c42:	2301      	movs	r3, #1
   29c44:	617b      	str	r3, [r7, #20]
   29c46:	697b      	ldr	r3, [r7, #20]
   29c48:	0018      	movs	r0, r3
   29c4a:	46bd      	mov	sp, r7
   29c4c:	b007      	add	sp, #28
   29c4e:	bd90      	pop	{r4, r7, pc}
   29c50:	000296b1 	.word	0x000296b1
   29c54:	0fffffff 	.word	0x0fffffff
   29c58:	0002981d 	.word	0x0002981d

00029c5c <dir_sdi>:
   29c5c:	b580      	push	{r7, lr}
   29c5e:	b084      	sub	sp, #16
   29c60:	af00      	add	r7, sp, #0
   29c62:	6078      	str	r0, [r7, #4]
   29c64:	000a      	movs	r2, r1
   29c66:	1cbb      	adds	r3, r7, #2
   29c68:	801a      	strh	r2, [r3, #0]
   29c6a:	687b      	ldr	r3, [r7, #4]
   29c6c:	1cba      	adds	r2, r7, #2
   29c6e:	8812      	ldrh	r2, [r2, #0]
   29c70:	80da      	strh	r2, [r3, #6]
   29c72:	687b      	ldr	r3, [r7, #4]
   29c74:	689b      	ldr	r3, [r3, #8]
   29c76:	60fb      	str	r3, [r7, #12]
   29c78:	68fb      	ldr	r3, [r7, #12]
   29c7a:	2b01      	cmp	r3, #1
   29c7c:	d005      	beq.n	29c8a <dir_sdi+0x2e>
   29c7e:	687b      	ldr	r3, [r7, #4]
   29c80:	681b      	ldr	r3, [r3, #0]
   29c82:	699a      	ldr	r2, [r3, #24]
   29c84:	68fb      	ldr	r3, [r7, #12]
   29c86:	429a      	cmp	r2, r3
   29c88:	d801      	bhi.n	29c8e <dir_sdi+0x32>
   29c8a:	2302      	movs	r3, #2
   29c8c:	e075      	b.n	29d7a <dir_sdi+0x11e>
   29c8e:	68fb      	ldr	r3, [r7, #12]
   29c90:	2b00      	cmp	r3, #0
   29c92:	d108      	bne.n	29ca6 <dir_sdi+0x4a>
   29c94:	687b      	ldr	r3, [r7, #4]
   29c96:	681b      	ldr	r3, [r3, #0]
   29c98:	781b      	ldrb	r3, [r3, #0]
   29c9a:	2b03      	cmp	r3, #3
   29c9c:	d103      	bne.n	29ca6 <dir_sdi+0x4a>
   29c9e:	687b      	ldr	r3, [r7, #4]
   29ca0:	681b      	ldr	r3, [r3, #0]
   29ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29ca4:	60fb      	str	r3, [r7, #12]
   29ca6:	68fb      	ldr	r3, [r7, #12]
   29ca8:	2b00      	cmp	r3, #0
   29caa:	d116      	bne.n	29cda <dir_sdi+0x7e>
   29cac:	687b      	ldr	r3, [r7, #4]
   29cae:	68fa      	ldr	r2, [r7, #12]
   29cb0:	60da      	str	r2, [r3, #12]
   29cb2:	687b      	ldr	r3, [r7, #4]
   29cb4:	681b      	ldr	r3, [r3, #0]
   29cb6:	891b      	ldrh	r3, [r3, #8]
   29cb8:	1cba      	adds	r2, r7, #2
   29cba:	8812      	ldrh	r2, [r2, #0]
   29cbc:	429a      	cmp	r2, r3
   29cbe:	d301      	bcc.n	29cc4 <dir_sdi+0x68>
   29cc0:	2302      	movs	r3, #2
   29cc2:	e05a      	b.n	29d7a <dir_sdi+0x11e>
   29cc4:	687b      	ldr	r3, [r7, #4]
   29cc6:	681b      	ldr	r3, [r3, #0]
   29cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29cca:	1cba      	adds	r2, r7, #2
   29ccc:	8812      	ldrh	r2, [r2, #0]
   29cce:	0912      	lsrs	r2, r2, #4
   29cd0:	b292      	uxth	r2, r2
   29cd2:	189a      	adds	r2, r3, r2
   29cd4:	687b      	ldr	r3, [r7, #4]
   29cd6:	611a      	str	r2, [r3, #16]
   29cd8:	e042      	b.n	29d60 <dir_sdi+0x104>
   29cda:	687b      	ldr	r3, [r7, #4]
   29cdc:	681b      	ldr	r3, [r3, #0]
   29cde:	789b      	ldrb	r3, [r3, #2]
   29ce0:	b29a      	uxth	r2, r3
   29ce2:	230a      	movs	r3, #10
   29ce4:	18fb      	adds	r3, r7, r3
   29ce6:	0112      	lsls	r2, r2, #4
   29ce8:	801a      	strh	r2, [r3, #0]
   29cea:	e020      	b.n	29d2e <dir_sdi+0xd2>
   29cec:	687b      	ldr	r3, [r7, #4]
   29cee:	681b      	ldr	r3, [r3, #0]
   29cf0:	68fa      	ldr	r2, [r7, #12]
   29cf2:	0011      	movs	r1, r2
   29cf4:	0018      	movs	r0, r3
   29cf6:	4b23      	ldr	r3, [pc, #140]	; (29d84 <dir_sdi+0x128>)
   29cf8:	4798      	blx	r3
   29cfa:	0003      	movs	r3, r0
   29cfc:	60fb      	str	r3, [r7, #12]
   29cfe:	68fb      	ldr	r3, [r7, #12]
   29d00:	3301      	adds	r3, #1
   29d02:	d101      	bne.n	29d08 <dir_sdi+0xac>
   29d04:	2301      	movs	r3, #1
   29d06:	e038      	b.n	29d7a <dir_sdi+0x11e>
   29d08:	68fb      	ldr	r3, [r7, #12]
   29d0a:	2b01      	cmp	r3, #1
   29d0c:	d905      	bls.n	29d1a <dir_sdi+0xbe>
   29d0e:	687b      	ldr	r3, [r7, #4]
   29d10:	681b      	ldr	r3, [r3, #0]
   29d12:	699a      	ldr	r2, [r3, #24]
   29d14:	68fb      	ldr	r3, [r7, #12]
   29d16:	429a      	cmp	r2, r3
   29d18:	d801      	bhi.n	29d1e <dir_sdi+0xc2>
   29d1a:	2302      	movs	r3, #2
   29d1c:	e02d      	b.n	29d7a <dir_sdi+0x11e>
   29d1e:	1cbb      	adds	r3, r7, #2
   29d20:	1cb9      	adds	r1, r7, #2
   29d22:	220a      	movs	r2, #10
   29d24:	18ba      	adds	r2, r7, r2
   29d26:	8809      	ldrh	r1, [r1, #0]
   29d28:	8812      	ldrh	r2, [r2, #0]
   29d2a:	1a8a      	subs	r2, r1, r2
   29d2c:	801a      	strh	r2, [r3, #0]
   29d2e:	1cba      	adds	r2, r7, #2
   29d30:	230a      	movs	r3, #10
   29d32:	18fb      	adds	r3, r7, r3
   29d34:	8812      	ldrh	r2, [r2, #0]
   29d36:	881b      	ldrh	r3, [r3, #0]
   29d38:	429a      	cmp	r2, r3
   29d3a:	d2d7      	bcs.n	29cec <dir_sdi+0x90>
   29d3c:	687b      	ldr	r3, [r7, #4]
   29d3e:	68fa      	ldr	r2, [r7, #12]
   29d40:	60da      	str	r2, [r3, #12]
   29d42:	687b      	ldr	r3, [r7, #4]
   29d44:	681b      	ldr	r3, [r3, #0]
   29d46:	68fa      	ldr	r2, [r7, #12]
   29d48:	0011      	movs	r1, r2
   29d4a:	0018      	movs	r0, r3
   29d4c:	4b0e      	ldr	r3, [pc, #56]	; (29d88 <dir_sdi+0x12c>)
   29d4e:	4798      	blx	r3
   29d50:	0002      	movs	r2, r0
   29d52:	1cbb      	adds	r3, r7, #2
   29d54:	881b      	ldrh	r3, [r3, #0]
   29d56:	091b      	lsrs	r3, r3, #4
   29d58:	b29b      	uxth	r3, r3
   29d5a:	18d2      	adds	r2, r2, r3
   29d5c:	687b      	ldr	r3, [r7, #4]
   29d5e:	611a      	str	r2, [r3, #16]
   29d60:	687b      	ldr	r3, [r7, #4]
   29d62:	681b      	ldr	r3, [r3, #0]
   29d64:	3330      	adds	r3, #48	; 0x30
   29d66:	001a      	movs	r2, r3
   29d68:	1cbb      	adds	r3, r7, #2
   29d6a:	881b      	ldrh	r3, [r3, #0]
   29d6c:	210f      	movs	r1, #15
   29d6e:	400b      	ands	r3, r1
   29d70:	015b      	lsls	r3, r3, #5
   29d72:	18d2      	adds	r2, r2, r3
   29d74:	687b      	ldr	r3, [r7, #4]
   29d76:	615a      	str	r2, [r3, #20]
   29d78:	2300      	movs	r3, #0
   29d7a:	0018      	movs	r0, r3
   29d7c:	46bd      	mov	sp, r7
   29d7e:	b004      	add	sp, #16
   29d80:	bd80      	pop	{r7, pc}
   29d82:	46c0      	nop			; (mov r8, r8)
   29d84:	000296b1 	.word	0x000296b1
   29d88:	00029679 	.word	0x00029679

00029d8c <dir_next>:
   29d8c:	b590      	push	{r4, r7, lr}
   29d8e:	b085      	sub	sp, #20
   29d90:	af00      	add	r7, sp, #0
   29d92:	6078      	str	r0, [r7, #4]
   29d94:	6039      	str	r1, [r7, #0]
   29d96:	687b      	ldr	r3, [r7, #4]
   29d98:	88da      	ldrh	r2, [r3, #6]
   29d9a:	2308      	movs	r3, #8
   29d9c:	18fb      	adds	r3, r7, r3
   29d9e:	3201      	adds	r2, #1
   29da0:	801a      	strh	r2, [r3, #0]
   29da2:	2308      	movs	r3, #8
   29da4:	18fb      	adds	r3, r7, r3
   29da6:	881b      	ldrh	r3, [r3, #0]
   29da8:	2b00      	cmp	r3, #0
   29daa:	d003      	beq.n	29db4 <dir_next+0x28>
   29dac:	687b      	ldr	r3, [r7, #4]
   29dae:	691b      	ldr	r3, [r3, #16]
   29db0:	2b00      	cmp	r3, #0
   29db2:	d101      	bne.n	29db8 <dir_next+0x2c>
   29db4:	2304      	movs	r3, #4
   29db6:	e0d2      	b.n	29f5e <dir_next+0x1d2>
   29db8:	2308      	movs	r3, #8
   29dba:	18fb      	adds	r3, r7, r3
   29dbc:	881b      	ldrh	r3, [r3, #0]
   29dbe:	220f      	movs	r2, #15
   29dc0:	4013      	ands	r3, r2
   29dc2:	b29b      	uxth	r3, r3
   29dc4:	2b00      	cmp	r3, #0
   29dc6:	d000      	beq.n	29dca <dir_next+0x3e>
   29dc8:	e0b6      	b.n	29f38 <dir_next+0x1ac>
   29dca:	687b      	ldr	r3, [r7, #4]
   29dcc:	691b      	ldr	r3, [r3, #16]
   29dce:	1c5a      	adds	r2, r3, #1
   29dd0:	687b      	ldr	r3, [r7, #4]
   29dd2:	611a      	str	r2, [r3, #16]
   29dd4:	687b      	ldr	r3, [r7, #4]
   29dd6:	68db      	ldr	r3, [r3, #12]
   29dd8:	2b00      	cmp	r3, #0
   29dda:	d10a      	bne.n	29df2 <dir_next+0x66>
   29ddc:	687b      	ldr	r3, [r7, #4]
   29dde:	681b      	ldr	r3, [r3, #0]
   29de0:	891b      	ldrh	r3, [r3, #8]
   29de2:	2208      	movs	r2, #8
   29de4:	18ba      	adds	r2, r7, r2
   29de6:	8812      	ldrh	r2, [r2, #0]
   29de8:	429a      	cmp	r2, r3
   29dea:	d200      	bcs.n	29dee <dir_next+0x62>
   29dec:	e0a4      	b.n	29f38 <dir_next+0x1ac>
   29dee:	2304      	movs	r3, #4
   29df0:	e0b5      	b.n	29f5e <dir_next+0x1d2>
   29df2:	2308      	movs	r3, #8
   29df4:	18fb      	adds	r3, r7, r3
   29df6:	881b      	ldrh	r3, [r3, #0]
   29df8:	091b      	lsrs	r3, r3, #4
   29dfa:	b29b      	uxth	r3, r3
   29dfc:	001a      	movs	r2, r3
   29dfe:	687b      	ldr	r3, [r7, #4]
   29e00:	681b      	ldr	r3, [r3, #0]
   29e02:	789b      	ldrb	r3, [r3, #2]
   29e04:	3b01      	subs	r3, #1
   29e06:	4013      	ands	r3, r2
   29e08:	d000      	beq.n	29e0c <dir_next+0x80>
   29e0a:	e095      	b.n	29f38 <dir_next+0x1ac>
   29e0c:	687b      	ldr	r3, [r7, #4]
   29e0e:	681a      	ldr	r2, [r3, #0]
   29e10:	687b      	ldr	r3, [r7, #4]
   29e12:	68db      	ldr	r3, [r3, #12]
   29e14:	0019      	movs	r1, r3
   29e16:	0010      	movs	r0, r2
   29e18:	4b53      	ldr	r3, [pc, #332]	; (29f68 <dir_next+0x1dc>)
   29e1a:	4798      	blx	r3
   29e1c:	0003      	movs	r3, r0
   29e1e:	60fb      	str	r3, [r7, #12]
   29e20:	68fb      	ldr	r3, [r7, #12]
   29e22:	2b01      	cmp	r3, #1
   29e24:	d801      	bhi.n	29e2a <dir_next+0x9e>
   29e26:	2302      	movs	r3, #2
   29e28:	e099      	b.n	29f5e <dir_next+0x1d2>
   29e2a:	68fb      	ldr	r3, [r7, #12]
   29e2c:	3301      	adds	r3, #1
   29e2e:	d101      	bne.n	29e34 <dir_next+0xa8>
   29e30:	2301      	movs	r3, #1
   29e32:	e094      	b.n	29f5e <dir_next+0x1d2>
   29e34:	687b      	ldr	r3, [r7, #4]
   29e36:	681b      	ldr	r3, [r3, #0]
   29e38:	699a      	ldr	r2, [r3, #24]
   29e3a:	68fb      	ldr	r3, [r7, #12]
   29e3c:	429a      	cmp	r2, r3
   29e3e:	d900      	bls.n	29e42 <dir_next+0xb6>
   29e40:	e06d      	b.n	29f1e <dir_next+0x192>
   29e42:	683b      	ldr	r3, [r7, #0]
   29e44:	2b00      	cmp	r3, #0
   29e46:	d101      	bne.n	29e4c <dir_next+0xc0>
   29e48:	2304      	movs	r3, #4
   29e4a:	e088      	b.n	29f5e <dir_next+0x1d2>
   29e4c:	687b      	ldr	r3, [r7, #4]
   29e4e:	681a      	ldr	r2, [r3, #0]
   29e50:	687b      	ldr	r3, [r7, #4]
   29e52:	68db      	ldr	r3, [r3, #12]
   29e54:	0019      	movs	r1, r3
   29e56:	0010      	movs	r0, r2
   29e58:	4b44      	ldr	r3, [pc, #272]	; (29f6c <dir_next+0x1e0>)
   29e5a:	4798      	blx	r3
   29e5c:	0003      	movs	r3, r0
   29e5e:	60fb      	str	r3, [r7, #12]
   29e60:	68fb      	ldr	r3, [r7, #12]
   29e62:	2b00      	cmp	r3, #0
   29e64:	d101      	bne.n	29e6a <dir_next+0xde>
   29e66:	2307      	movs	r3, #7
   29e68:	e079      	b.n	29f5e <dir_next+0x1d2>
   29e6a:	68fb      	ldr	r3, [r7, #12]
   29e6c:	2b01      	cmp	r3, #1
   29e6e:	d101      	bne.n	29e74 <dir_next+0xe8>
   29e70:	2302      	movs	r3, #2
   29e72:	e074      	b.n	29f5e <dir_next+0x1d2>
   29e74:	68fb      	ldr	r3, [r7, #12]
   29e76:	3301      	adds	r3, #1
   29e78:	d101      	bne.n	29e7e <dir_next+0xf2>
   29e7a:	2301      	movs	r3, #1
   29e7c:	e06f      	b.n	29f5e <dir_next+0x1d2>
   29e7e:	687b      	ldr	r3, [r7, #4]
   29e80:	681b      	ldr	r3, [r3, #0]
   29e82:	2100      	movs	r1, #0
   29e84:	0018      	movs	r0, r3
   29e86:	4b3a      	ldr	r3, [pc, #232]	; (29f70 <dir_next+0x1e4>)
   29e88:	4798      	blx	r3
   29e8a:	1e03      	subs	r3, r0, #0
   29e8c:	d001      	beq.n	29e92 <dir_next+0x106>
   29e8e:	2301      	movs	r3, #1
   29e90:	e065      	b.n	29f5e <dir_next+0x1d2>
   29e92:	687b      	ldr	r3, [r7, #4]
   29e94:	681b      	ldr	r3, [r3, #0]
   29e96:	3330      	adds	r3, #48	; 0x30
   29e98:	0018      	movs	r0, r3
   29e9a:	2380      	movs	r3, #128	; 0x80
   29e9c:	009b      	lsls	r3, r3, #2
   29e9e:	001a      	movs	r2, r3
   29ea0:	2100      	movs	r1, #0
   29ea2:	4b34      	ldr	r3, [pc, #208]	; (29f74 <dir_next+0x1e8>)
   29ea4:	4798      	blx	r3
   29ea6:	687b      	ldr	r3, [r7, #4]
   29ea8:	681c      	ldr	r4, [r3, #0]
   29eaa:	687b      	ldr	r3, [r7, #4]
   29eac:	681b      	ldr	r3, [r3, #0]
   29eae:	68fa      	ldr	r2, [r7, #12]
   29eb0:	0011      	movs	r1, r2
   29eb2:	0018      	movs	r0, r3
   29eb4:	4b30      	ldr	r3, [pc, #192]	; (29f78 <dir_next+0x1ec>)
   29eb6:	4798      	blx	r3
   29eb8:	0003      	movs	r3, r0
   29eba:	62e3      	str	r3, [r4, #44]	; 0x2c
   29ebc:	230b      	movs	r3, #11
   29ebe:	18fb      	adds	r3, r7, r3
   29ec0:	2200      	movs	r2, #0
   29ec2:	701a      	strb	r2, [r3, #0]
   29ec4:	e019      	b.n	29efa <dir_next+0x16e>
   29ec6:	687b      	ldr	r3, [r7, #4]
   29ec8:	681b      	ldr	r3, [r3, #0]
   29eca:	2201      	movs	r2, #1
   29ecc:	711a      	strb	r2, [r3, #4]
   29ece:	687b      	ldr	r3, [r7, #4]
   29ed0:	681b      	ldr	r3, [r3, #0]
   29ed2:	2100      	movs	r1, #0
   29ed4:	0018      	movs	r0, r3
   29ed6:	4b26      	ldr	r3, [pc, #152]	; (29f70 <dir_next+0x1e4>)
   29ed8:	4798      	blx	r3
   29eda:	1e03      	subs	r3, r0, #0
   29edc:	d001      	beq.n	29ee2 <dir_next+0x156>
   29ede:	2301      	movs	r3, #1
   29ee0:	e03d      	b.n	29f5e <dir_next+0x1d2>
   29ee2:	687b      	ldr	r3, [r7, #4]
   29ee4:	681b      	ldr	r3, [r3, #0]
   29ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   29ee8:	3201      	adds	r2, #1
   29eea:	62da      	str	r2, [r3, #44]	; 0x2c
   29eec:	230b      	movs	r3, #11
   29eee:	18fb      	adds	r3, r7, r3
   29ef0:	781a      	ldrb	r2, [r3, #0]
   29ef2:	230b      	movs	r3, #11
   29ef4:	18fb      	adds	r3, r7, r3
   29ef6:	3201      	adds	r2, #1
   29ef8:	701a      	strb	r2, [r3, #0]
   29efa:	687b      	ldr	r3, [r7, #4]
   29efc:	681b      	ldr	r3, [r3, #0]
   29efe:	789b      	ldrb	r3, [r3, #2]
   29f00:	220b      	movs	r2, #11
   29f02:	18ba      	adds	r2, r7, r2
   29f04:	7812      	ldrb	r2, [r2, #0]
   29f06:	429a      	cmp	r2, r3
   29f08:	d3dd      	bcc.n	29ec6 <dir_next+0x13a>
   29f0a:	687b      	ldr	r3, [r7, #4]
   29f0c:	681b      	ldr	r3, [r3, #0]
   29f0e:	687a      	ldr	r2, [r7, #4]
   29f10:	6812      	ldr	r2, [r2, #0]
   29f12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   29f14:	220b      	movs	r2, #11
   29f16:	18ba      	adds	r2, r7, r2
   29f18:	7812      	ldrb	r2, [r2, #0]
   29f1a:	1a8a      	subs	r2, r1, r2
   29f1c:	62da      	str	r2, [r3, #44]	; 0x2c
   29f1e:	687b      	ldr	r3, [r7, #4]
   29f20:	68fa      	ldr	r2, [r7, #12]
   29f22:	60da      	str	r2, [r3, #12]
   29f24:	687b      	ldr	r3, [r7, #4]
   29f26:	681b      	ldr	r3, [r3, #0]
   29f28:	68fa      	ldr	r2, [r7, #12]
   29f2a:	0011      	movs	r1, r2
   29f2c:	0018      	movs	r0, r3
   29f2e:	4b12      	ldr	r3, [pc, #72]	; (29f78 <dir_next+0x1ec>)
   29f30:	4798      	blx	r3
   29f32:	0002      	movs	r2, r0
   29f34:	687b      	ldr	r3, [r7, #4]
   29f36:	611a      	str	r2, [r3, #16]
   29f38:	687b      	ldr	r3, [r7, #4]
   29f3a:	2208      	movs	r2, #8
   29f3c:	18ba      	adds	r2, r7, r2
   29f3e:	8812      	ldrh	r2, [r2, #0]
   29f40:	80da      	strh	r2, [r3, #6]
   29f42:	687b      	ldr	r3, [r7, #4]
   29f44:	681b      	ldr	r3, [r3, #0]
   29f46:	3330      	adds	r3, #48	; 0x30
   29f48:	001a      	movs	r2, r3
   29f4a:	2308      	movs	r3, #8
   29f4c:	18fb      	adds	r3, r7, r3
   29f4e:	881b      	ldrh	r3, [r3, #0]
   29f50:	210f      	movs	r1, #15
   29f52:	400b      	ands	r3, r1
   29f54:	015b      	lsls	r3, r3, #5
   29f56:	18d2      	adds	r2, r2, r3
   29f58:	687b      	ldr	r3, [r7, #4]
   29f5a:	615a      	str	r2, [r3, #20]
   29f5c:	2300      	movs	r3, #0
   29f5e:	0018      	movs	r0, r3
   29f60:	46bd      	mov	sp, r7
   29f62:	b005      	add	sp, #20
   29f64:	bd90      	pop	{r4, r7, pc}
   29f66:	46c0      	nop			; (mov r8, r8)
   29f68:	000296b1 	.word	0x000296b1
   29f6c:	00029b21 	.word	0x00029b21
   29f70:	00029419 	.word	0x00029419
   29f74:	0002936d 	.word	0x0002936d
   29f78:	00029679 	.word	0x00029679

00029f7c <cmp_lfn>:
   29f7c:	b590      	push	{r4, r7, lr}
   29f7e:	b087      	sub	sp, #28
   29f80:	af00      	add	r7, sp, #0
   29f82:	6078      	str	r0, [r7, #4]
   29f84:	6039      	str	r1, [r7, #0]
   29f86:	683b      	ldr	r3, [r7, #0]
   29f88:	781b      	ldrb	r3, [r3, #0]
   29f8a:	001a      	movs	r2, r3
   29f8c:	2340      	movs	r3, #64	; 0x40
   29f8e:	439a      	bics	r2, r3
   29f90:	0013      	movs	r3, r2
   29f92:	1e5a      	subs	r2, r3, #1
   29f94:	0013      	movs	r3, r2
   29f96:	005b      	lsls	r3, r3, #1
   29f98:	189b      	adds	r3, r3, r2
   29f9a:	009b      	lsls	r3, r3, #2
   29f9c:	189b      	adds	r3, r3, r2
   29f9e:	617b      	str	r3, [r7, #20]
   29fa0:	2300      	movs	r3, #0
   29fa2:	613b      	str	r3, [r7, #16]
   29fa4:	230e      	movs	r3, #14
   29fa6:	18fb      	adds	r3, r7, r3
   29fa8:	2201      	movs	r2, #1
   29faa:	801a      	strh	r2, [r3, #0]
   29fac:	4a31      	ldr	r2, [pc, #196]	; (2a074 <cmp_lfn+0xf8>)
   29fae:	693b      	ldr	r3, [r7, #16]
   29fb0:	18d3      	adds	r3, r2, r3
   29fb2:	781b      	ldrb	r3, [r3, #0]
   29fb4:	3301      	adds	r3, #1
   29fb6:	683a      	ldr	r2, [r7, #0]
   29fb8:	18d3      	adds	r3, r2, r3
   29fba:	781b      	ldrb	r3, [r3, #0]
   29fbc:	021b      	lsls	r3, r3, #8
   29fbe:	b21a      	sxth	r2, r3
   29fc0:	492c      	ldr	r1, [pc, #176]	; (2a074 <cmp_lfn+0xf8>)
   29fc2:	693b      	ldr	r3, [r7, #16]
   29fc4:	18cb      	adds	r3, r1, r3
   29fc6:	781b      	ldrb	r3, [r3, #0]
   29fc8:	0019      	movs	r1, r3
   29fca:	683b      	ldr	r3, [r7, #0]
   29fcc:	185b      	adds	r3, r3, r1
   29fce:	781b      	ldrb	r3, [r3, #0]
   29fd0:	b21b      	sxth	r3, r3
   29fd2:	4313      	orrs	r3, r2
   29fd4:	b21a      	sxth	r2, r3
   29fd6:	230c      	movs	r3, #12
   29fd8:	18fb      	adds	r3, r7, r3
   29fda:	801a      	strh	r2, [r3, #0]
   29fdc:	230e      	movs	r3, #14
   29fde:	18fb      	adds	r3, r7, r3
   29fe0:	881b      	ldrh	r3, [r3, #0]
   29fe2:	2b00      	cmp	r3, #0
   29fe4:	d01f      	beq.n	2a026 <cmp_lfn+0xaa>
   29fe6:	230e      	movs	r3, #14
   29fe8:	18fc      	adds	r4, r7, r3
   29fea:	230c      	movs	r3, #12
   29fec:	18fb      	adds	r3, r7, r3
   29fee:	881b      	ldrh	r3, [r3, #0]
   29ff0:	0018      	movs	r0, r3
   29ff2:	4b21      	ldr	r3, [pc, #132]	; (2a078 <cmp_lfn+0xfc>)
   29ff4:	4798      	blx	r3
   29ff6:	0003      	movs	r3, r0
   29ff8:	8023      	strh	r3, [r4, #0]
   29ffa:	697b      	ldr	r3, [r7, #20]
   29ffc:	2bfe      	cmp	r3, #254	; 0xfe
   29ffe:	d810      	bhi.n	2a022 <cmp_lfn+0xa6>
   2a000:	697b      	ldr	r3, [r7, #20]
   2a002:	1c5a      	adds	r2, r3, #1
   2a004:	617a      	str	r2, [r7, #20]
   2a006:	005b      	lsls	r3, r3, #1
   2a008:	687a      	ldr	r2, [r7, #4]
   2a00a:	18d3      	adds	r3, r2, r3
   2a00c:	881b      	ldrh	r3, [r3, #0]
   2a00e:	0018      	movs	r0, r3
   2a010:	4b19      	ldr	r3, [pc, #100]	; (2a078 <cmp_lfn+0xfc>)
   2a012:	4798      	blx	r3
   2a014:	0003      	movs	r3, r0
   2a016:	001a      	movs	r2, r3
   2a018:	230e      	movs	r3, #14
   2a01a:	18fb      	adds	r3, r7, r3
   2a01c:	881b      	ldrh	r3, [r3, #0]
   2a01e:	4293      	cmp	r3, r2
   2a020:	d009      	beq.n	2a036 <cmp_lfn+0xba>
   2a022:	2300      	movs	r3, #0
   2a024:	e022      	b.n	2a06c <cmp_lfn+0xf0>
   2a026:	230c      	movs	r3, #12
   2a028:	18fb      	adds	r3, r7, r3
   2a02a:	881b      	ldrh	r3, [r3, #0]
   2a02c:	4a13      	ldr	r2, [pc, #76]	; (2a07c <cmp_lfn+0x100>)
   2a02e:	4293      	cmp	r3, r2
   2a030:	d001      	beq.n	2a036 <cmp_lfn+0xba>
   2a032:	2300      	movs	r3, #0
   2a034:	e01a      	b.n	2a06c <cmp_lfn+0xf0>
   2a036:	693b      	ldr	r3, [r7, #16]
   2a038:	3301      	adds	r3, #1
   2a03a:	613b      	str	r3, [r7, #16]
   2a03c:	693b      	ldr	r3, [r7, #16]
   2a03e:	2b0c      	cmp	r3, #12
   2a040:	d9b4      	bls.n	29fac <cmp_lfn+0x30>
   2a042:	683b      	ldr	r3, [r7, #0]
   2a044:	781b      	ldrb	r3, [r3, #0]
   2a046:	001a      	movs	r2, r3
   2a048:	2340      	movs	r3, #64	; 0x40
   2a04a:	4013      	ands	r3, r2
   2a04c:	d00d      	beq.n	2a06a <cmp_lfn+0xee>
   2a04e:	230e      	movs	r3, #14
   2a050:	18fb      	adds	r3, r7, r3
   2a052:	881b      	ldrh	r3, [r3, #0]
   2a054:	2b00      	cmp	r3, #0
   2a056:	d008      	beq.n	2a06a <cmp_lfn+0xee>
   2a058:	697b      	ldr	r3, [r7, #20]
   2a05a:	005b      	lsls	r3, r3, #1
   2a05c:	687a      	ldr	r2, [r7, #4]
   2a05e:	18d3      	adds	r3, r2, r3
   2a060:	881b      	ldrh	r3, [r3, #0]
   2a062:	2b00      	cmp	r3, #0
   2a064:	d001      	beq.n	2a06a <cmp_lfn+0xee>
   2a066:	2300      	movs	r3, #0
   2a068:	e000      	b.n	2a06c <cmp_lfn+0xf0>
   2a06a:	2301      	movs	r3, #1
   2a06c:	0018      	movs	r0, r3
   2a06e:	46bd      	mov	sp, r7
   2a070:	b007      	add	sp, #28
   2a072:	bd90      	pop	{r4, r7, pc}
   2a074:	00036a24 	.word	0x00036a24
   2a078:	0002c029 	.word	0x0002c029
   2a07c:	0000ffff 	.word	0x0000ffff

0002a080 <fit_lfn>:
   2a080:	b580      	push	{r7, lr}
   2a082:	b088      	sub	sp, #32
   2a084:	af00      	add	r7, sp, #0
   2a086:	60f8      	str	r0, [r7, #12]
   2a088:	60b9      	str	r1, [r7, #8]
   2a08a:	0019      	movs	r1, r3
   2a08c:	1dfb      	adds	r3, r7, #7
   2a08e:	701a      	strb	r2, [r3, #0]
   2a090:	1dbb      	adds	r3, r7, #6
   2a092:	1c0a      	adds	r2, r1, #0
   2a094:	701a      	strb	r2, [r3, #0]
   2a096:	68bb      	ldr	r3, [r7, #8]
   2a098:	330d      	adds	r3, #13
   2a09a:	1dba      	adds	r2, r7, #6
   2a09c:	7812      	ldrb	r2, [r2, #0]
   2a09e:	701a      	strb	r2, [r3, #0]
   2a0a0:	68bb      	ldr	r3, [r7, #8]
   2a0a2:	330b      	adds	r3, #11
   2a0a4:	220f      	movs	r2, #15
   2a0a6:	701a      	strb	r2, [r3, #0]
   2a0a8:	68bb      	ldr	r3, [r7, #8]
   2a0aa:	330c      	adds	r3, #12
   2a0ac:	2200      	movs	r2, #0
   2a0ae:	701a      	strb	r2, [r3, #0]
   2a0b0:	68bb      	ldr	r3, [r7, #8]
   2a0b2:	331a      	adds	r3, #26
   2a0b4:	2200      	movs	r2, #0
   2a0b6:	701a      	strb	r2, [r3, #0]
   2a0b8:	68bb      	ldr	r3, [r7, #8]
   2a0ba:	331b      	adds	r3, #27
   2a0bc:	2200      	movs	r2, #0
   2a0be:	701a      	strb	r2, [r3, #0]
   2a0c0:	1dfb      	adds	r3, r7, #7
   2a0c2:	781b      	ldrb	r3, [r3, #0]
   2a0c4:	1e5a      	subs	r2, r3, #1
   2a0c6:	0013      	movs	r3, r2
   2a0c8:	005b      	lsls	r3, r3, #1
   2a0ca:	189b      	adds	r3, r3, r2
   2a0cc:	009b      	lsls	r3, r3, #2
   2a0ce:	189b      	adds	r3, r3, r2
   2a0d0:	61fb      	str	r3, [r7, #28]
   2a0d2:	2316      	movs	r3, #22
   2a0d4:	18fb      	adds	r3, r7, r3
   2a0d6:	2200      	movs	r2, #0
   2a0d8:	801a      	strh	r2, [r3, #0]
   2a0da:	2300      	movs	r3, #0
   2a0dc:	61bb      	str	r3, [r7, #24]
   2a0de:	2316      	movs	r3, #22
   2a0e0:	18fb      	adds	r3, r7, r3
   2a0e2:	881b      	ldrh	r3, [r3, #0]
   2a0e4:	4a28      	ldr	r2, [pc, #160]	; (2a188 <fit_lfn+0x108>)
   2a0e6:	4293      	cmp	r3, r2
   2a0e8:	d009      	beq.n	2a0fe <fit_lfn+0x7e>
   2a0ea:	69fb      	ldr	r3, [r7, #28]
   2a0ec:	1c5a      	adds	r2, r3, #1
   2a0ee:	61fa      	str	r2, [r7, #28]
   2a0f0:	005b      	lsls	r3, r3, #1
   2a0f2:	68fa      	ldr	r2, [r7, #12]
   2a0f4:	18d2      	adds	r2, r2, r3
   2a0f6:	2316      	movs	r3, #22
   2a0f8:	18fb      	adds	r3, r7, r3
   2a0fa:	8812      	ldrh	r2, [r2, #0]
   2a0fc:	801a      	strh	r2, [r3, #0]
   2a0fe:	4a23      	ldr	r2, [pc, #140]	; (2a18c <fit_lfn+0x10c>)
   2a100:	69bb      	ldr	r3, [r7, #24]
   2a102:	18d3      	adds	r3, r2, r3
   2a104:	781b      	ldrb	r3, [r3, #0]
   2a106:	001a      	movs	r2, r3
   2a108:	68bb      	ldr	r3, [r7, #8]
   2a10a:	189b      	adds	r3, r3, r2
   2a10c:	2216      	movs	r2, #22
   2a10e:	18ba      	adds	r2, r7, r2
   2a110:	8812      	ldrh	r2, [r2, #0]
   2a112:	b2d2      	uxtb	r2, r2
   2a114:	701a      	strb	r2, [r3, #0]
   2a116:	4a1d      	ldr	r2, [pc, #116]	; (2a18c <fit_lfn+0x10c>)
   2a118:	69bb      	ldr	r3, [r7, #24]
   2a11a:	18d3      	adds	r3, r2, r3
   2a11c:	781b      	ldrb	r3, [r3, #0]
   2a11e:	3301      	adds	r3, #1
   2a120:	68ba      	ldr	r2, [r7, #8]
   2a122:	18d3      	adds	r3, r2, r3
   2a124:	2216      	movs	r2, #22
   2a126:	18ba      	adds	r2, r7, r2
   2a128:	8812      	ldrh	r2, [r2, #0]
   2a12a:	0a12      	lsrs	r2, r2, #8
   2a12c:	b292      	uxth	r2, r2
   2a12e:	b2d2      	uxtb	r2, r2
   2a130:	701a      	strb	r2, [r3, #0]
   2a132:	2316      	movs	r3, #22
   2a134:	18fb      	adds	r3, r7, r3
   2a136:	881b      	ldrh	r3, [r3, #0]
   2a138:	2b00      	cmp	r3, #0
   2a13a:	d104      	bne.n	2a146 <fit_lfn+0xc6>
   2a13c:	2316      	movs	r3, #22
   2a13e:	18fb      	adds	r3, r7, r3
   2a140:	2201      	movs	r2, #1
   2a142:	4252      	negs	r2, r2
   2a144:	801a      	strh	r2, [r3, #0]
   2a146:	69bb      	ldr	r3, [r7, #24]
   2a148:	3301      	adds	r3, #1
   2a14a:	61bb      	str	r3, [r7, #24]
   2a14c:	69bb      	ldr	r3, [r7, #24]
   2a14e:	2b0c      	cmp	r3, #12
   2a150:	d9c5      	bls.n	2a0de <fit_lfn+0x5e>
   2a152:	2316      	movs	r3, #22
   2a154:	18fb      	adds	r3, r7, r3
   2a156:	881b      	ldrh	r3, [r3, #0]
   2a158:	4a0b      	ldr	r2, [pc, #44]	; (2a188 <fit_lfn+0x108>)
   2a15a:	4293      	cmp	r3, r2
   2a15c:	d006      	beq.n	2a16c <fit_lfn+0xec>
   2a15e:	69fb      	ldr	r3, [r7, #28]
   2a160:	005b      	lsls	r3, r3, #1
   2a162:	68fa      	ldr	r2, [r7, #12]
   2a164:	18d3      	adds	r3, r2, r3
   2a166:	881b      	ldrh	r3, [r3, #0]
   2a168:	2b00      	cmp	r3, #0
   2a16a:	d105      	bne.n	2a178 <fit_lfn+0xf8>
   2a16c:	1dfb      	adds	r3, r7, #7
   2a16e:	1dfa      	adds	r2, r7, #7
   2a170:	7812      	ldrb	r2, [r2, #0]
   2a172:	2140      	movs	r1, #64	; 0x40
   2a174:	430a      	orrs	r2, r1
   2a176:	701a      	strb	r2, [r3, #0]
   2a178:	68bb      	ldr	r3, [r7, #8]
   2a17a:	1dfa      	adds	r2, r7, #7
   2a17c:	7812      	ldrb	r2, [r2, #0]
   2a17e:	701a      	strb	r2, [r3, #0]
   2a180:	46c0      	nop			; (mov r8, r8)
   2a182:	46bd      	mov	sp, r7
   2a184:	b008      	add	sp, #32
   2a186:	bd80      	pop	{r7, pc}
   2a188:	0000ffff 	.word	0x0000ffff
   2a18c:	00036a24 	.word	0x00036a24

0002a190 <gen_numname>:
   2a190:	b580      	push	{r7, lr}
   2a192:	b08a      	sub	sp, #40	; 0x28
   2a194:	af00      	add	r7, sp, #0
   2a196:	60f8      	str	r0, [r7, #12]
   2a198:	60b9      	str	r1, [r7, #8]
   2a19a:	607a      	str	r2, [r7, #4]
   2a19c:	001a      	movs	r2, r3
   2a19e:	1cbb      	adds	r3, r7, #2
   2a1a0:	801a      	strh	r2, [r3, #0]
   2a1a2:	68b9      	ldr	r1, [r7, #8]
   2a1a4:	68fb      	ldr	r3, [r7, #12]
   2a1a6:	220b      	movs	r2, #11
   2a1a8:	0018      	movs	r0, r3
   2a1aa:	4b38      	ldr	r3, [pc, #224]	; (2a28c <gen_numname+0xfc>)
   2a1ac:	4798      	blx	r3
   2a1ae:	1cbb      	adds	r3, r7, #2
   2a1b0:	881b      	ldrh	r3, [r3, #0]
   2a1b2:	2b05      	cmp	r3, #5
   2a1b4:	d911      	bls.n	2a1da <gen_numname+0x4a>
   2a1b6:	1cbb      	adds	r3, r7, #2
   2a1b8:	881b      	ldrh	r3, [r3, #0]
   2a1ba:	b29a      	uxth	r2, r3
   2a1bc:	0852      	lsrs	r2, r2, #1
   2a1be:	03db      	lsls	r3, r3, #15
   2a1c0:	4313      	orrs	r3, r2
   2a1c2:	b299      	uxth	r1, r3
   2a1c4:	687b      	ldr	r3, [r7, #4]
   2a1c6:	1c9a      	adds	r2, r3, #2
   2a1c8:	607a      	str	r2, [r7, #4]
   2a1ca:	881a      	ldrh	r2, [r3, #0]
   2a1cc:	1cbb      	adds	r3, r7, #2
   2a1ce:	188a      	adds	r2, r1, r2
   2a1d0:	801a      	strh	r2, [r3, #0]
   2a1d2:	687b      	ldr	r3, [r7, #4]
   2a1d4:	881b      	ldrh	r3, [r3, #0]
   2a1d6:	2b00      	cmp	r3, #0
   2a1d8:	d1ed      	bne.n	2a1b6 <gen_numname+0x26>
   2a1da:	2307      	movs	r3, #7
   2a1dc:	623b      	str	r3, [r7, #32]
   2a1de:	1cbb      	adds	r3, r7, #2
   2a1e0:	881b      	ldrh	r3, [r3, #0]
   2a1e2:	b2db      	uxtb	r3, r3
   2a1e4:	220f      	movs	r2, #15
   2a1e6:	4013      	ands	r3, r2
   2a1e8:	b2da      	uxtb	r2, r3
   2a1ea:	2327      	movs	r3, #39	; 0x27
   2a1ec:	18fb      	adds	r3, r7, r3
   2a1ee:	3230      	adds	r2, #48	; 0x30
   2a1f0:	701a      	strb	r2, [r3, #0]
   2a1f2:	2327      	movs	r3, #39	; 0x27
   2a1f4:	18fb      	adds	r3, r7, r3
   2a1f6:	781b      	ldrb	r3, [r3, #0]
   2a1f8:	2b39      	cmp	r3, #57	; 0x39
   2a1fa:	d906      	bls.n	2a20a <gen_numname+0x7a>
   2a1fc:	2327      	movs	r3, #39	; 0x27
   2a1fe:	18fb      	adds	r3, r7, r3
   2a200:	2227      	movs	r2, #39	; 0x27
   2a202:	18ba      	adds	r2, r7, r2
   2a204:	7812      	ldrb	r2, [r2, #0]
   2a206:	3207      	adds	r2, #7
   2a208:	701a      	strb	r2, [r3, #0]
   2a20a:	6a3b      	ldr	r3, [r7, #32]
   2a20c:	1e5a      	subs	r2, r3, #1
   2a20e:	623a      	str	r2, [r7, #32]
   2a210:	2214      	movs	r2, #20
   2a212:	18ba      	adds	r2, r7, r2
   2a214:	2127      	movs	r1, #39	; 0x27
   2a216:	1879      	adds	r1, r7, r1
   2a218:	7809      	ldrb	r1, [r1, #0]
   2a21a:	54d1      	strb	r1, [r2, r3]
   2a21c:	1cbb      	adds	r3, r7, #2
   2a21e:	1cba      	adds	r2, r7, #2
   2a220:	8812      	ldrh	r2, [r2, #0]
   2a222:	0912      	lsrs	r2, r2, #4
   2a224:	801a      	strh	r2, [r3, #0]
   2a226:	1cbb      	adds	r3, r7, #2
   2a228:	881b      	ldrh	r3, [r3, #0]
   2a22a:	2b00      	cmp	r3, #0
   2a22c:	d1d7      	bne.n	2a1de <gen_numname+0x4e>
   2a22e:	2314      	movs	r3, #20
   2a230:	18fa      	adds	r2, r7, r3
   2a232:	6a3b      	ldr	r3, [r7, #32]
   2a234:	18d3      	adds	r3, r2, r3
   2a236:	227e      	movs	r2, #126	; 0x7e
   2a238:	701a      	strb	r2, [r3, #0]
   2a23a:	2300      	movs	r3, #0
   2a23c:	61fb      	str	r3, [r7, #28]
   2a23e:	e002      	b.n	2a246 <gen_numname+0xb6>
   2a240:	69fb      	ldr	r3, [r7, #28]
   2a242:	3301      	adds	r3, #1
   2a244:	61fb      	str	r3, [r7, #28]
   2a246:	69fa      	ldr	r2, [r7, #28]
   2a248:	6a3b      	ldr	r3, [r7, #32]
   2a24a:	429a      	cmp	r2, r3
   2a24c:	d205      	bcs.n	2a25a <gen_numname+0xca>
   2a24e:	68fa      	ldr	r2, [r7, #12]
   2a250:	69fb      	ldr	r3, [r7, #28]
   2a252:	18d3      	adds	r3, r2, r3
   2a254:	781b      	ldrb	r3, [r3, #0]
   2a256:	2b20      	cmp	r3, #32
   2a258:	d1f2      	bne.n	2a240 <gen_numname+0xb0>
   2a25a:	69fb      	ldr	r3, [r7, #28]
   2a25c:	1c5a      	adds	r2, r3, #1
   2a25e:	61fa      	str	r2, [r7, #28]
   2a260:	68fa      	ldr	r2, [r7, #12]
   2a262:	18d2      	adds	r2, r2, r3
   2a264:	6a3b      	ldr	r3, [r7, #32]
   2a266:	2b07      	cmp	r3, #7
   2a268:	d806      	bhi.n	2a278 <gen_numname+0xe8>
   2a26a:	6a3b      	ldr	r3, [r7, #32]
   2a26c:	1c59      	adds	r1, r3, #1
   2a26e:	6239      	str	r1, [r7, #32]
   2a270:	2114      	movs	r1, #20
   2a272:	1879      	adds	r1, r7, r1
   2a274:	5ccb      	ldrb	r3, [r1, r3]
   2a276:	e000      	b.n	2a27a <gen_numname+0xea>
   2a278:	2320      	movs	r3, #32
   2a27a:	7013      	strb	r3, [r2, #0]
   2a27c:	69fb      	ldr	r3, [r7, #28]
   2a27e:	2b07      	cmp	r3, #7
   2a280:	d9eb      	bls.n	2a25a <gen_numname+0xca>
   2a282:	46c0      	nop			; (mov r8, r8)
   2a284:	46bd      	mov	sp, r7
   2a286:	b00a      	add	sp, #40	; 0x28
   2a288:	bd80      	pop	{r7, pc}
   2a28a:	46c0      	nop			; (mov r8, r8)
   2a28c:	00029335 	.word	0x00029335

0002a290 <sum_sfn>:
   2a290:	b580      	push	{r7, lr}
   2a292:	b084      	sub	sp, #16
   2a294:	af00      	add	r7, sp, #0
   2a296:	6078      	str	r0, [r7, #4]
   2a298:	230f      	movs	r3, #15
   2a29a:	18fb      	adds	r3, r7, r3
   2a29c:	2200      	movs	r2, #0
   2a29e:	701a      	strb	r2, [r3, #0]
   2a2a0:	230b      	movs	r3, #11
   2a2a2:	60bb      	str	r3, [r7, #8]
   2a2a4:	230f      	movs	r3, #15
   2a2a6:	18fb      	adds	r3, r7, r3
   2a2a8:	781b      	ldrb	r3, [r3, #0]
   2a2aa:	b2da      	uxtb	r2, r3
   2a2ac:	0852      	lsrs	r2, r2, #1
   2a2ae:	01db      	lsls	r3, r3, #7
   2a2b0:	4313      	orrs	r3, r2
   2a2b2:	b2d9      	uxtb	r1, r3
   2a2b4:	687b      	ldr	r3, [r7, #4]
   2a2b6:	1c5a      	adds	r2, r3, #1
   2a2b8:	607a      	str	r2, [r7, #4]
   2a2ba:	781a      	ldrb	r2, [r3, #0]
   2a2bc:	230f      	movs	r3, #15
   2a2be:	18fb      	adds	r3, r7, r3
   2a2c0:	188a      	adds	r2, r1, r2
   2a2c2:	701a      	strb	r2, [r3, #0]
   2a2c4:	68bb      	ldr	r3, [r7, #8]
   2a2c6:	3b01      	subs	r3, #1
   2a2c8:	60bb      	str	r3, [r7, #8]
   2a2ca:	68bb      	ldr	r3, [r7, #8]
   2a2cc:	2b00      	cmp	r3, #0
   2a2ce:	d1e9      	bne.n	2a2a4 <sum_sfn+0x14>
   2a2d0:	230f      	movs	r3, #15
   2a2d2:	18fb      	adds	r3, r7, r3
   2a2d4:	781b      	ldrb	r3, [r3, #0]
   2a2d6:	0018      	movs	r0, r3
   2a2d8:	46bd      	mov	sp, r7
   2a2da:	b004      	add	sp, #16
   2a2dc:	bd80      	pop	{r7, pc}
	...

0002a2e0 <dir_find>:
   2a2e0:	b590      	push	{r4, r7, lr}
   2a2e2:	b087      	sub	sp, #28
   2a2e4:	af00      	add	r7, sp, #0
   2a2e6:	6078      	str	r0, [r7, #4]
   2a2e8:	2317      	movs	r3, #23
   2a2ea:	18fc      	adds	r4, r7, r3
   2a2ec:	687b      	ldr	r3, [r7, #4]
   2a2ee:	2100      	movs	r1, #0
   2a2f0:	0018      	movs	r0, r3
   2a2f2:	4b74      	ldr	r3, [pc, #464]	; (2a4c4 <dir_find+0x1e4>)
   2a2f4:	4798      	blx	r3
   2a2f6:	0003      	movs	r3, r0
   2a2f8:	7023      	strb	r3, [r4, #0]
   2a2fa:	2317      	movs	r3, #23
   2a2fc:	18fb      	adds	r3, r7, r3
   2a2fe:	781b      	ldrb	r3, [r3, #0]
   2a300:	2b00      	cmp	r3, #0
   2a302:	d003      	beq.n	2a30c <dir_find+0x2c>
   2a304:	2317      	movs	r3, #23
   2a306:	18fb      	adds	r3, r7, r3
   2a308:	781b      	ldrb	r3, [r3, #0]
   2a30a:	e0d6      	b.n	2a4ba <dir_find+0x1da>
   2a30c:	2314      	movs	r3, #20
   2a30e:	18fb      	adds	r3, r7, r3
   2a310:	22ff      	movs	r2, #255	; 0xff
   2a312:	701a      	strb	r2, [r3, #0]
   2a314:	2315      	movs	r3, #21
   2a316:	18fb      	adds	r3, r7, r3
   2a318:	2214      	movs	r2, #20
   2a31a:	18ba      	adds	r2, r7, r2
   2a31c:	7812      	ldrb	r2, [r2, #0]
   2a31e:	701a      	strb	r2, [r3, #0]
   2a320:	687b      	ldr	r3, [r7, #4]
   2a322:	681a      	ldr	r2, [r3, #0]
   2a324:	687b      	ldr	r3, [r7, #4]
   2a326:	691b      	ldr	r3, [r3, #16]
   2a328:	2117      	movs	r1, #23
   2a32a:	187c      	adds	r4, r7, r1
   2a32c:	0019      	movs	r1, r3
   2a32e:	0010      	movs	r0, r2
   2a330:	4b65      	ldr	r3, [pc, #404]	; (2a4c8 <dir_find+0x1e8>)
   2a332:	4798      	blx	r3
   2a334:	0003      	movs	r3, r0
   2a336:	7023      	strb	r3, [r4, #0]
   2a338:	2317      	movs	r3, #23
   2a33a:	18fb      	adds	r3, r7, r3
   2a33c:	781b      	ldrb	r3, [r3, #0]
   2a33e:	2b00      	cmp	r3, #0
   2a340:	d000      	beq.n	2a344 <dir_find+0x64>
   2a342:	e0b2      	b.n	2a4aa <dir_find+0x1ca>
   2a344:	687b      	ldr	r3, [r7, #4]
   2a346:	695b      	ldr	r3, [r3, #20]
   2a348:	613b      	str	r3, [r7, #16]
   2a34a:	2316      	movs	r3, #22
   2a34c:	18fb      	adds	r3, r7, r3
   2a34e:	693a      	ldr	r2, [r7, #16]
   2a350:	7812      	ldrb	r2, [r2, #0]
   2a352:	701a      	strb	r2, [r3, #0]
   2a354:	2316      	movs	r3, #22
   2a356:	18fb      	adds	r3, r7, r3
   2a358:	781b      	ldrb	r3, [r3, #0]
   2a35a:	2b00      	cmp	r3, #0
   2a35c:	d104      	bne.n	2a368 <dir_find+0x88>
   2a35e:	2317      	movs	r3, #23
   2a360:	18fb      	adds	r3, r7, r3
   2a362:	2204      	movs	r2, #4
   2a364:	701a      	strb	r2, [r3, #0]
   2a366:	e0a5      	b.n	2a4b4 <dir_find+0x1d4>
   2a368:	693b      	ldr	r3, [r7, #16]
   2a36a:	330b      	adds	r3, #11
   2a36c:	781a      	ldrb	r2, [r3, #0]
   2a36e:	230f      	movs	r3, #15
   2a370:	18fb      	adds	r3, r7, r3
   2a372:	213f      	movs	r1, #63	; 0x3f
   2a374:	400a      	ands	r2, r1
   2a376:	701a      	strb	r2, [r3, #0]
   2a378:	2316      	movs	r3, #22
   2a37a:	18fb      	adds	r3, r7, r3
   2a37c:	781b      	ldrb	r3, [r3, #0]
   2a37e:	2be5      	cmp	r3, #229	; 0xe5
   2a380:	d00a      	beq.n	2a398 <dir_find+0xb8>
   2a382:	230f      	movs	r3, #15
   2a384:	18fb      	adds	r3, r7, r3
   2a386:	781b      	ldrb	r3, [r3, #0]
   2a388:	2208      	movs	r2, #8
   2a38a:	4013      	ands	r3, r2
   2a38c:	d009      	beq.n	2a3a2 <dir_find+0xc2>
   2a38e:	230f      	movs	r3, #15
   2a390:	18fb      	adds	r3, r7, r3
   2a392:	781b      	ldrb	r3, [r3, #0]
   2a394:	2b0f      	cmp	r3, #15
   2a396:	d004      	beq.n	2a3a2 <dir_find+0xc2>
   2a398:	2315      	movs	r3, #21
   2a39a:	18fb      	adds	r3, r7, r3
   2a39c:	22ff      	movs	r2, #255	; 0xff
   2a39e:	701a      	strb	r2, [r3, #0]
   2a3a0:	e073      	b.n	2a48a <dir_find+0x1aa>
   2a3a2:	230f      	movs	r3, #15
   2a3a4:	18fb      	adds	r3, r7, r3
   2a3a6:	781b      	ldrb	r3, [r3, #0]
   2a3a8:	2b0f      	cmp	r3, #15
   2a3aa:	d145      	bne.n	2a438 <dir_find+0x158>
   2a3ac:	687b      	ldr	r3, [r7, #4]
   2a3ae:	69db      	ldr	r3, [r3, #28]
   2a3b0:	2b00      	cmp	r3, #0
   2a3b2:	d100      	bne.n	2a3b6 <dir_find+0xd6>
   2a3b4:	e069      	b.n	2a48a <dir_find+0x1aa>
   2a3b6:	2316      	movs	r3, #22
   2a3b8:	18fb      	adds	r3, r7, r3
   2a3ba:	781b      	ldrb	r3, [r3, #0]
   2a3bc:	2240      	movs	r2, #64	; 0x40
   2a3be:	4013      	ands	r3, r2
   2a3c0:	d016      	beq.n	2a3f0 <dir_find+0x110>
   2a3c2:	2314      	movs	r3, #20
   2a3c4:	18fb      	adds	r3, r7, r3
   2a3c6:	693a      	ldr	r2, [r7, #16]
   2a3c8:	7b52      	ldrb	r2, [r2, #13]
   2a3ca:	701a      	strb	r2, [r3, #0]
   2a3cc:	2316      	movs	r3, #22
   2a3ce:	18fb      	adds	r3, r7, r3
   2a3d0:	2216      	movs	r2, #22
   2a3d2:	18ba      	adds	r2, r7, r2
   2a3d4:	7812      	ldrb	r2, [r2, #0]
   2a3d6:	2140      	movs	r1, #64	; 0x40
   2a3d8:	438a      	bics	r2, r1
   2a3da:	701a      	strb	r2, [r3, #0]
   2a3dc:	2315      	movs	r3, #21
   2a3de:	18fb      	adds	r3, r7, r3
   2a3e0:	2216      	movs	r2, #22
   2a3e2:	18ba      	adds	r2, r7, r2
   2a3e4:	7812      	ldrb	r2, [r2, #0]
   2a3e6:	701a      	strb	r2, [r3, #0]
   2a3e8:	687b      	ldr	r3, [r7, #4]
   2a3ea:	88da      	ldrh	r2, [r3, #6]
   2a3ec:	687b      	ldr	r3, [r7, #4]
   2a3ee:	841a      	strh	r2, [r3, #32]
   2a3f0:	2316      	movs	r3, #22
   2a3f2:	18fa      	adds	r2, r7, r3
   2a3f4:	2315      	movs	r3, #21
   2a3f6:	18fb      	adds	r3, r7, r3
   2a3f8:	7812      	ldrb	r2, [r2, #0]
   2a3fa:	781b      	ldrb	r3, [r3, #0]
   2a3fc:	429a      	cmp	r2, r3
   2a3fe:	d116      	bne.n	2a42e <dir_find+0x14e>
   2a400:	693b      	ldr	r3, [r7, #16]
   2a402:	330d      	adds	r3, #13
   2a404:	781b      	ldrb	r3, [r3, #0]
   2a406:	2214      	movs	r2, #20
   2a408:	18ba      	adds	r2, r7, r2
   2a40a:	7812      	ldrb	r2, [r2, #0]
   2a40c:	429a      	cmp	r2, r3
   2a40e:	d10e      	bne.n	2a42e <dir_find+0x14e>
   2a410:	687b      	ldr	r3, [r7, #4]
   2a412:	69db      	ldr	r3, [r3, #28]
   2a414:	693a      	ldr	r2, [r7, #16]
   2a416:	0011      	movs	r1, r2
   2a418:	0018      	movs	r0, r3
   2a41a:	4b2c      	ldr	r3, [pc, #176]	; (2a4cc <dir_find+0x1ec>)
   2a41c:	4798      	blx	r3
   2a41e:	1e03      	subs	r3, r0, #0
   2a420:	d005      	beq.n	2a42e <dir_find+0x14e>
   2a422:	2315      	movs	r3, #21
   2a424:	18fb      	adds	r3, r7, r3
   2a426:	781b      	ldrb	r3, [r3, #0]
   2a428:	3b01      	subs	r3, #1
   2a42a:	b2da      	uxtb	r2, r3
   2a42c:	e000      	b.n	2a430 <dir_find+0x150>
   2a42e:	22ff      	movs	r2, #255	; 0xff
   2a430:	2315      	movs	r3, #21
   2a432:	18fb      	adds	r3, r7, r3
   2a434:	701a      	strb	r2, [r3, #0]
   2a436:	e028      	b.n	2a48a <dir_find+0x1aa>
   2a438:	2315      	movs	r3, #21
   2a43a:	18fb      	adds	r3, r7, r3
   2a43c:	781b      	ldrb	r3, [r3, #0]
   2a43e:	2b00      	cmp	r3, #0
   2a440:	d10a      	bne.n	2a458 <dir_find+0x178>
   2a442:	693b      	ldr	r3, [r7, #16]
   2a444:	0018      	movs	r0, r3
   2a446:	4b22      	ldr	r3, [pc, #136]	; (2a4d0 <dir_find+0x1f0>)
   2a448:	4798      	blx	r3
   2a44a:	0003      	movs	r3, r0
   2a44c:	001a      	movs	r2, r3
   2a44e:	2314      	movs	r3, #20
   2a450:	18fb      	adds	r3, r7, r3
   2a452:	781b      	ldrb	r3, [r3, #0]
   2a454:	4293      	cmp	r3, r2
   2a456:	d02a      	beq.n	2a4ae <dir_find+0x1ce>
   2a458:	2315      	movs	r3, #21
   2a45a:	18fb      	adds	r3, r7, r3
   2a45c:	22ff      	movs	r2, #255	; 0xff
   2a45e:	701a      	strb	r2, [r3, #0]
   2a460:	687b      	ldr	r3, [r7, #4]
   2a462:	2201      	movs	r2, #1
   2a464:	4252      	negs	r2, r2
   2a466:	841a      	strh	r2, [r3, #32]
   2a468:	687b      	ldr	r3, [r7, #4]
   2a46a:	699b      	ldr	r3, [r3, #24]
   2a46c:	330b      	adds	r3, #11
   2a46e:	781b      	ldrb	r3, [r3, #0]
   2a470:	001a      	movs	r2, r3
   2a472:	2301      	movs	r3, #1
   2a474:	4013      	ands	r3, r2
   2a476:	d108      	bne.n	2a48a <dir_find+0x1aa>
   2a478:	687b      	ldr	r3, [r7, #4]
   2a47a:	6999      	ldr	r1, [r3, #24]
   2a47c:	693b      	ldr	r3, [r7, #16]
   2a47e:	220b      	movs	r2, #11
   2a480:	0018      	movs	r0, r3
   2a482:	4b14      	ldr	r3, [pc, #80]	; (2a4d4 <dir_find+0x1f4>)
   2a484:	4798      	blx	r3
   2a486:	1e03      	subs	r3, r0, #0
   2a488:	d013      	beq.n	2a4b2 <dir_find+0x1d2>
   2a48a:	2317      	movs	r3, #23
   2a48c:	18fc      	adds	r4, r7, r3
   2a48e:	687b      	ldr	r3, [r7, #4]
   2a490:	2100      	movs	r1, #0
   2a492:	0018      	movs	r0, r3
   2a494:	4b10      	ldr	r3, [pc, #64]	; (2a4d8 <dir_find+0x1f8>)
   2a496:	4798      	blx	r3
   2a498:	0003      	movs	r3, r0
   2a49a:	7023      	strb	r3, [r4, #0]
   2a49c:	2317      	movs	r3, #23
   2a49e:	18fb      	adds	r3, r7, r3
   2a4a0:	781b      	ldrb	r3, [r3, #0]
   2a4a2:	2b00      	cmp	r3, #0
   2a4a4:	d100      	bne.n	2a4a8 <dir_find+0x1c8>
   2a4a6:	e73b      	b.n	2a320 <dir_find+0x40>
   2a4a8:	e004      	b.n	2a4b4 <dir_find+0x1d4>
   2a4aa:	46c0      	nop			; (mov r8, r8)
   2a4ac:	e002      	b.n	2a4b4 <dir_find+0x1d4>
   2a4ae:	46c0      	nop			; (mov r8, r8)
   2a4b0:	e000      	b.n	2a4b4 <dir_find+0x1d4>
   2a4b2:	46c0      	nop			; (mov r8, r8)
   2a4b4:	2317      	movs	r3, #23
   2a4b6:	18fb      	adds	r3, r7, r3
   2a4b8:	781b      	ldrb	r3, [r3, #0]
   2a4ba:	0018      	movs	r0, r3
   2a4bc:	46bd      	mov	sp, r7
   2a4be:	b007      	add	sp, #28
   2a4c0:	bd90      	pop	{r4, r7, pc}
   2a4c2:	46c0      	nop			; (mov r8, r8)
   2a4c4:	00029c5d 	.word	0x00029c5d
   2a4c8:	00029419 	.word	0x00029419
   2a4cc:	00029f7d 	.word	0x00029f7d
   2a4d0:	0002a291 	.word	0x0002a291
   2a4d4:	0002939d 	.word	0x0002939d
   2a4d8:	00029d8d 	.word	0x00029d8d

0002a4dc <dir_register>:
   2a4dc:	b590      	push	{r4, r7, lr}
   2a4de:	b08d      	sub	sp, #52	; 0x34
   2a4e0:	af00      	add	r7, sp, #0
   2a4e2:	6078      	str	r0, [r7, #4]
   2a4e4:	687b      	ldr	r3, [r7, #4]
   2a4e6:	699b      	ldr	r3, [r3, #24]
   2a4e8:	627b      	str	r3, [r7, #36]	; 0x24
   2a4ea:	687b      	ldr	r3, [r7, #4]
   2a4ec:	69db      	ldr	r3, [r3, #28]
   2a4ee:	623b      	str	r3, [r7, #32]
   2a4f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2a4f2:	230c      	movs	r3, #12
   2a4f4:	18fb      	adds	r3, r7, r3
   2a4f6:	220c      	movs	r2, #12
   2a4f8:	0018      	movs	r0, r3
   2a4fa:	4bc8      	ldr	r3, [pc, #800]	; (2a81c <dir_register+0x340>)
   2a4fc:	4798      	blx	r3
   2a4fe:	230c      	movs	r3, #12
   2a500:	18fb      	adds	r3, r7, r3
   2a502:	7adb      	ldrb	r3, [r3, #11]
   2a504:	001a      	movs	r2, r3
   2a506:	2301      	movs	r3, #1
   2a508:	4013      	ands	r3, r2
   2a50a:	d048      	beq.n	2a59e <dir_register+0xc2>
   2a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a50e:	330b      	adds	r3, #11
   2a510:	2200      	movs	r2, #0
   2a512:	701a      	strb	r2, [r3, #0]
   2a514:	687b      	ldr	r3, [r7, #4]
   2a516:	2200      	movs	r2, #0
   2a518:	61da      	str	r2, [r3, #28]
   2a51a:	232c      	movs	r3, #44	; 0x2c
   2a51c:	18fb      	adds	r3, r7, r3
   2a51e:	2201      	movs	r2, #1
   2a520:	801a      	strh	r2, [r3, #0]
   2a522:	e01c      	b.n	2a55e <dir_register+0x82>
   2a524:	232c      	movs	r3, #44	; 0x2c
   2a526:	18fb      	adds	r3, r7, r3
   2a528:	881b      	ldrh	r3, [r3, #0]
   2a52a:	6a3a      	ldr	r2, [r7, #32]
   2a52c:	210c      	movs	r1, #12
   2a52e:	1879      	adds	r1, r7, r1
   2a530:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2a532:	4cbb      	ldr	r4, [pc, #748]	; (2a820 <dir_register+0x344>)
   2a534:	47a0      	blx	r4
   2a536:	232f      	movs	r3, #47	; 0x2f
   2a538:	18fc      	adds	r4, r7, r3
   2a53a:	687b      	ldr	r3, [r7, #4]
   2a53c:	0018      	movs	r0, r3
   2a53e:	4bb9      	ldr	r3, [pc, #740]	; (2a824 <dir_register+0x348>)
   2a540:	4798      	blx	r3
   2a542:	0003      	movs	r3, r0
   2a544:	7023      	strb	r3, [r4, #0]
   2a546:	232f      	movs	r3, #47	; 0x2f
   2a548:	18fb      	adds	r3, r7, r3
   2a54a:	781b      	ldrb	r3, [r3, #0]
   2a54c:	2b00      	cmp	r3, #0
   2a54e:	d10c      	bne.n	2a56a <dir_register+0x8e>
   2a550:	232c      	movs	r3, #44	; 0x2c
   2a552:	18fb      	adds	r3, r7, r3
   2a554:	881a      	ldrh	r2, [r3, #0]
   2a556:	232c      	movs	r3, #44	; 0x2c
   2a558:	18fb      	adds	r3, r7, r3
   2a55a:	3201      	adds	r2, #1
   2a55c:	801a      	strh	r2, [r3, #0]
   2a55e:	232c      	movs	r3, #44	; 0x2c
   2a560:	18fb      	adds	r3, r7, r3
   2a562:	881b      	ldrh	r3, [r3, #0]
   2a564:	2b63      	cmp	r3, #99	; 0x63
   2a566:	d9dd      	bls.n	2a524 <dir_register+0x48>
   2a568:	e000      	b.n	2a56c <dir_register+0x90>
   2a56a:	46c0      	nop			; (mov r8, r8)
   2a56c:	232c      	movs	r3, #44	; 0x2c
   2a56e:	18fb      	adds	r3, r7, r3
   2a570:	881b      	ldrh	r3, [r3, #0]
   2a572:	2b64      	cmp	r3, #100	; 0x64
   2a574:	d101      	bne.n	2a57a <dir_register+0x9e>
   2a576:	2307      	movs	r3, #7
   2a578:	e14c      	b.n	2a814 <dir_register+0x338>
   2a57a:	232f      	movs	r3, #47	; 0x2f
   2a57c:	18fb      	adds	r3, r7, r3
   2a57e:	781b      	ldrb	r3, [r3, #0]
   2a580:	2b04      	cmp	r3, #4
   2a582:	d003      	beq.n	2a58c <dir_register+0xb0>
   2a584:	232f      	movs	r3, #47	; 0x2f
   2a586:	18fb      	adds	r3, r7, r3
   2a588:	781b      	ldrb	r3, [r3, #0]
   2a58a:	e143      	b.n	2a814 <dir_register+0x338>
   2a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a58e:	330b      	adds	r3, #11
   2a590:	220c      	movs	r2, #12
   2a592:	18ba      	adds	r2, r7, r2
   2a594:	7ad2      	ldrb	r2, [r2, #11]
   2a596:	701a      	strb	r2, [r3, #0]
   2a598:	687b      	ldr	r3, [r7, #4]
   2a59a:	6a3a      	ldr	r2, [r7, #32]
   2a59c:	61da      	str	r2, [r3, #28]
   2a59e:	230c      	movs	r3, #12
   2a5a0:	18fb      	adds	r3, r7, r3
   2a5a2:	7adb      	ldrb	r3, [r3, #11]
   2a5a4:	001a      	movs	r2, r3
   2a5a6:	2302      	movs	r3, #2
   2a5a8:	4013      	ands	r3, r2
   2a5aa:	d023      	beq.n	2a5f4 <dir_register+0x118>
   2a5ac:	232a      	movs	r3, #42	; 0x2a
   2a5ae:	18fb      	adds	r3, r7, r3
   2a5b0:	2200      	movs	r2, #0
   2a5b2:	801a      	strh	r2, [r3, #0]
   2a5b4:	e006      	b.n	2a5c4 <dir_register+0xe8>
   2a5b6:	232a      	movs	r3, #42	; 0x2a
   2a5b8:	18fb      	adds	r3, r7, r3
   2a5ba:	881a      	ldrh	r2, [r3, #0]
   2a5bc:	232a      	movs	r3, #42	; 0x2a
   2a5be:	18fb      	adds	r3, r7, r3
   2a5c0:	3201      	adds	r2, #1
   2a5c2:	801a      	strh	r2, [r3, #0]
   2a5c4:	232a      	movs	r3, #42	; 0x2a
   2a5c6:	18fb      	adds	r3, r7, r3
   2a5c8:	881b      	ldrh	r3, [r3, #0]
   2a5ca:	005b      	lsls	r3, r3, #1
   2a5cc:	6a3a      	ldr	r2, [r7, #32]
   2a5ce:	18d3      	adds	r3, r2, r3
   2a5d0:	881b      	ldrh	r3, [r3, #0]
   2a5d2:	2b00      	cmp	r3, #0
   2a5d4:	d1ef      	bne.n	2a5b6 <dir_register+0xda>
   2a5d6:	232a      	movs	r3, #42	; 0x2a
   2a5d8:	18fb      	adds	r3, r7, r3
   2a5da:	881b      	ldrh	r3, [r3, #0]
   2a5dc:	3319      	adds	r3, #25
   2a5de:	001a      	movs	r2, r3
   2a5e0:	4b91      	ldr	r3, [pc, #580]	; (2a828 <dir_register+0x34c>)
   2a5e2:	210d      	movs	r1, #13
   2a5e4:	0010      	movs	r0, r2
   2a5e6:	4798      	blx	r3
   2a5e8:	0003      	movs	r3, r0
   2a5ea:	001a      	movs	r2, r3
   2a5ec:	232a      	movs	r3, #42	; 0x2a
   2a5ee:	18fb      	adds	r3, r7, r3
   2a5f0:	801a      	strh	r2, [r3, #0]
   2a5f2:	e003      	b.n	2a5fc <dir_register+0x120>
   2a5f4:	232a      	movs	r3, #42	; 0x2a
   2a5f6:	18fb      	adds	r3, r7, r3
   2a5f8:	2201      	movs	r2, #1
   2a5fa:	801a      	strh	r2, [r3, #0]
   2a5fc:	232f      	movs	r3, #47	; 0x2f
   2a5fe:	18fc      	adds	r4, r7, r3
   2a600:	687b      	ldr	r3, [r7, #4]
   2a602:	2100      	movs	r1, #0
   2a604:	0018      	movs	r0, r3
   2a606:	4b89      	ldr	r3, [pc, #548]	; (2a82c <dir_register+0x350>)
   2a608:	4798      	blx	r3
   2a60a:	0003      	movs	r3, r0
   2a60c:	7023      	strb	r3, [r4, #0]
   2a60e:	232f      	movs	r3, #47	; 0x2f
   2a610:	18fb      	adds	r3, r7, r3
   2a612:	781b      	ldrb	r3, [r3, #0]
   2a614:	2b00      	cmp	r3, #0
   2a616:	d003      	beq.n	2a620 <dir_register+0x144>
   2a618:	232f      	movs	r3, #47	; 0x2f
   2a61a:	18fb      	adds	r3, r7, r3
   2a61c:	781b      	ldrb	r3, [r3, #0]
   2a61e:	e0f9      	b.n	2a814 <dir_register+0x338>
   2a620:	2328      	movs	r3, #40	; 0x28
   2a622:	18fb      	adds	r3, r7, r3
   2a624:	2200      	movs	r2, #0
   2a626:	801a      	strh	r2, [r3, #0]
   2a628:	232c      	movs	r3, #44	; 0x2c
   2a62a:	18fb      	adds	r3, r7, r3
   2a62c:	2228      	movs	r2, #40	; 0x28
   2a62e:	18ba      	adds	r2, r7, r2
   2a630:	8812      	ldrh	r2, [r2, #0]
   2a632:	801a      	strh	r2, [r3, #0]
   2a634:	687b      	ldr	r3, [r7, #4]
   2a636:	681a      	ldr	r2, [r3, #0]
   2a638:	687b      	ldr	r3, [r7, #4]
   2a63a:	691b      	ldr	r3, [r3, #16]
   2a63c:	212f      	movs	r1, #47	; 0x2f
   2a63e:	187c      	adds	r4, r7, r1
   2a640:	0019      	movs	r1, r3
   2a642:	0010      	movs	r0, r2
   2a644:	4b7a      	ldr	r3, [pc, #488]	; (2a830 <dir_register+0x354>)
   2a646:	4798      	blx	r3
   2a648:	0003      	movs	r3, r0
   2a64a:	7023      	strb	r3, [r4, #0]
   2a64c:	232f      	movs	r3, #47	; 0x2f
   2a64e:	18fb      	adds	r3, r7, r3
   2a650:	781b      	ldrb	r3, [r3, #0]
   2a652:	2b00      	cmp	r3, #0
   2a654:	d13c      	bne.n	2a6d0 <dir_register+0x1f4>
   2a656:	687b      	ldr	r3, [r7, #4]
   2a658:	695a      	ldr	r2, [r3, #20]
   2a65a:	231f      	movs	r3, #31
   2a65c:	18fb      	adds	r3, r7, r3
   2a65e:	7812      	ldrb	r2, [r2, #0]
   2a660:	701a      	strb	r2, [r3, #0]
   2a662:	231f      	movs	r3, #31
   2a664:	18fb      	adds	r3, r7, r3
   2a666:	781b      	ldrb	r3, [r3, #0]
   2a668:	2be5      	cmp	r3, #229	; 0xe5
   2a66a:	d004      	beq.n	2a676 <dir_register+0x19a>
   2a66c:	231f      	movs	r3, #31
   2a66e:	18fb      	adds	r3, r7, r3
   2a670:	781b      	ldrb	r3, [r3, #0]
   2a672:	2b00      	cmp	r3, #0
   2a674:	d119      	bne.n	2a6aa <dir_register+0x1ce>
   2a676:	232c      	movs	r3, #44	; 0x2c
   2a678:	18fb      	adds	r3, r7, r3
   2a67a:	881b      	ldrh	r3, [r3, #0]
   2a67c:	2b00      	cmp	r3, #0
   2a67e:	d104      	bne.n	2a68a <dir_register+0x1ae>
   2a680:	2328      	movs	r3, #40	; 0x28
   2a682:	18fb      	adds	r3, r7, r3
   2a684:	687a      	ldr	r2, [r7, #4]
   2a686:	88d2      	ldrh	r2, [r2, #6]
   2a688:	801a      	strh	r2, [r3, #0]
   2a68a:	232c      	movs	r3, #44	; 0x2c
   2a68c:	18fb      	adds	r3, r7, r3
   2a68e:	222c      	movs	r2, #44	; 0x2c
   2a690:	18ba      	adds	r2, r7, r2
   2a692:	8812      	ldrh	r2, [r2, #0]
   2a694:	3201      	adds	r2, #1
   2a696:	801a      	strh	r2, [r3, #0]
   2a698:	232c      	movs	r3, #44	; 0x2c
   2a69a:	18fa      	adds	r2, r7, r3
   2a69c:	232a      	movs	r3, #42	; 0x2a
   2a69e:	18fb      	adds	r3, r7, r3
   2a6a0:	8812      	ldrh	r2, [r2, #0]
   2a6a2:	881b      	ldrh	r3, [r3, #0]
   2a6a4:	429a      	cmp	r2, r3
   2a6a6:	d104      	bne.n	2a6b2 <dir_register+0x1d6>
   2a6a8:	e013      	b.n	2a6d2 <dir_register+0x1f6>
   2a6aa:	232c      	movs	r3, #44	; 0x2c
   2a6ac:	18fb      	adds	r3, r7, r3
   2a6ae:	2200      	movs	r2, #0
   2a6b0:	801a      	strh	r2, [r3, #0]
   2a6b2:	232f      	movs	r3, #47	; 0x2f
   2a6b4:	18fc      	adds	r4, r7, r3
   2a6b6:	687b      	ldr	r3, [r7, #4]
   2a6b8:	2101      	movs	r1, #1
   2a6ba:	0018      	movs	r0, r3
   2a6bc:	4b5d      	ldr	r3, [pc, #372]	; (2a834 <dir_register+0x358>)
   2a6be:	4798      	blx	r3
   2a6c0:	0003      	movs	r3, r0
   2a6c2:	7023      	strb	r3, [r4, #0]
   2a6c4:	232f      	movs	r3, #47	; 0x2f
   2a6c6:	18fb      	adds	r3, r7, r3
   2a6c8:	781b      	ldrb	r3, [r3, #0]
   2a6ca:	2b00      	cmp	r3, #0
   2a6cc:	d0b2      	beq.n	2a634 <dir_register+0x158>
   2a6ce:	e000      	b.n	2a6d2 <dir_register+0x1f6>
   2a6d0:	46c0      	nop			; (mov r8, r8)
   2a6d2:	232f      	movs	r3, #47	; 0x2f
   2a6d4:	18fb      	adds	r3, r7, r3
   2a6d6:	781b      	ldrb	r3, [r3, #0]
   2a6d8:	2b00      	cmp	r3, #0
   2a6da:	d163      	bne.n	2a7a4 <dir_register+0x2c8>
   2a6dc:	232a      	movs	r3, #42	; 0x2a
   2a6de:	18fb      	adds	r3, r7, r3
   2a6e0:	881b      	ldrh	r3, [r3, #0]
   2a6e2:	2b01      	cmp	r3, #1
   2a6e4:	d95e      	bls.n	2a7a4 <dir_register+0x2c8>
   2a6e6:	232f      	movs	r3, #47	; 0x2f
   2a6e8:	18fc      	adds	r4, r7, r3
   2a6ea:	2328      	movs	r3, #40	; 0x28
   2a6ec:	18fb      	adds	r3, r7, r3
   2a6ee:	881a      	ldrh	r2, [r3, #0]
   2a6f0:	687b      	ldr	r3, [r7, #4]
   2a6f2:	0011      	movs	r1, r2
   2a6f4:	0018      	movs	r0, r3
   2a6f6:	4b4d      	ldr	r3, [pc, #308]	; (2a82c <dir_register+0x350>)
   2a6f8:	4798      	blx	r3
   2a6fa:	0003      	movs	r3, r0
   2a6fc:	7023      	strb	r3, [r4, #0]
   2a6fe:	232f      	movs	r3, #47	; 0x2f
   2a700:	18fb      	adds	r3, r7, r3
   2a702:	781b      	ldrb	r3, [r3, #0]
   2a704:	2b00      	cmp	r3, #0
   2a706:	d14d      	bne.n	2a7a4 <dir_register+0x2c8>
   2a708:	687b      	ldr	r3, [r7, #4]
   2a70a:	699b      	ldr	r3, [r3, #24]
   2a70c:	221e      	movs	r2, #30
   2a70e:	18bc      	adds	r4, r7, r2
   2a710:	0018      	movs	r0, r3
   2a712:	4b49      	ldr	r3, [pc, #292]	; (2a838 <dir_register+0x35c>)
   2a714:	4798      	blx	r3
   2a716:	0003      	movs	r3, r0
   2a718:	7023      	strb	r3, [r4, #0]
   2a71a:	232a      	movs	r3, #42	; 0x2a
   2a71c:	18fb      	adds	r3, r7, r3
   2a71e:	881a      	ldrh	r2, [r3, #0]
   2a720:	232a      	movs	r3, #42	; 0x2a
   2a722:	18fb      	adds	r3, r7, r3
   2a724:	3a01      	subs	r2, #1
   2a726:	801a      	strh	r2, [r3, #0]
   2a728:	687b      	ldr	r3, [r7, #4]
   2a72a:	681a      	ldr	r2, [r3, #0]
   2a72c:	687b      	ldr	r3, [r7, #4]
   2a72e:	691b      	ldr	r3, [r3, #16]
   2a730:	212f      	movs	r1, #47	; 0x2f
   2a732:	187c      	adds	r4, r7, r1
   2a734:	0019      	movs	r1, r3
   2a736:	0010      	movs	r0, r2
   2a738:	4b3d      	ldr	r3, [pc, #244]	; (2a830 <dir_register+0x354>)
   2a73a:	4798      	blx	r3
   2a73c:	0003      	movs	r3, r0
   2a73e:	7023      	strb	r3, [r4, #0]
   2a740:	232f      	movs	r3, #47	; 0x2f
   2a742:	18fb      	adds	r3, r7, r3
   2a744:	781b      	ldrb	r3, [r3, #0]
   2a746:	2b00      	cmp	r3, #0
   2a748:	d12b      	bne.n	2a7a2 <dir_register+0x2c6>
   2a74a:	687b      	ldr	r3, [r7, #4]
   2a74c:	69d8      	ldr	r0, [r3, #28]
   2a74e:	687b      	ldr	r3, [r7, #4]
   2a750:	6959      	ldr	r1, [r3, #20]
   2a752:	232a      	movs	r3, #42	; 0x2a
   2a754:	18fb      	adds	r3, r7, r3
   2a756:	881b      	ldrh	r3, [r3, #0]
   2a758:	b2da      	uxtb	r2, r3
   2a75a:	231e      	movs	r3, #30
   2a75c:	18fb      	adds	r3, r7, r3
   2a75e:	781b      	ldrb	r3, [r3, #0]
   2a760:	4c36      	ldr	r4, [pc, #216]	; (2a83c <dir_register+0x360>)
   2a762:	47a0      	blx	r4
   2a764:	687b      	ldr	r3, [r7, #4]
   2a766:	681b      	ldr	r3, [r3, #0]
   2a768:	2201      	movs	r2, #1
   2a76a:	711a      	strb	r2, [r3, #4]
   2a76c:	232f      	movs	r3, #47	; 0x2f
   2a76e:	18fc      	adds	r4, r7, r3
   2a770:	687b      	ldr	r3, [r7, #4]
   2a772:	2100      	movs	r1, #0
   2a774:	0018      	movs	r0, r3
   2a776:	4b2f      	ldr	r3, [pc, #188]	; (2a834 <dir_register+0x358>)
   2a778:	4798      	blx	r3
   2a77a:	0003      	movs	r3, r0
   2a77c:	7023      	strb	r3, [r4, #0]
   2a77e:	232f      	movs	r3, #47	; 0x2f
   2a780:	18fb      	adds	r3, r7, r3
   2a782:	781b      	ldrb	r3, [r3, #0]
   2a784:	2b00      	cmp	r3, #0
   2a786:	d10d      	bne.n	2a7a4 <dir_register+0x2c8>
   2a788:	232a      	movs	r3, #42	; 0x2a
   2a78a:	18fb      	adds	r3, r7, r3
   2a78c:	222a      	movs	r2, #42	; 0x2a
   2a78e:	18ba      	adds	r2, r7, r2
   2a790:	8812      	ldrh	r2, [r2, #0]
   2a792:	3a01      	subs	r2, #1
   2a794:	801a      	strh	r2, [r3, #0]
   2a796:	232a      	movs	r3, #42	; 0x2a
   2a798:	18fb      	adds	r3, r7, r3
   2a79a:	881b      	ldrh	r3, [r3, #0]
   2a79c:	2b00      	cmp	r3, #0
   2a79e:	d1c3      	bne.n	2a728 <dir_register+0x24c>
   2a7a0:	e000      	b.n	2a7a4 <dir_register+0x2c8>
   2a7a2:	46c0      	nop			; (mov r8, r8)
   2a7a4:	232f      	movs	r3, #47	; 0x2f
   2a7a6:	18fb      	adds	r3, r7, r3
   2a7a8:	781b      	ldrb	r3, [r3, #0]
   2a7aa:	2b00      	cmp	r3, #0
   2a7ac:	d12f      	bne.n	2a80e <dir_register+0x332>
   2a7ae:	687b      	ldr	r3, [r7, #4]
   2a7b0:	681a      	ldr	r2, [r3, #0]
   2a7b2:	687b      	ldr	r3, [r7, #4]
   2a7b4:	691b      	ldr	r3, [r3, #16]
   2a7b6:	212f      	movs	r1, #47	; 0x2f
   2a7b8:	187c      	adds	r4, r7, r1
   2a7ba:	0019      	movs	r1, r3
   2a7bc:	0010      	movs	r0, r2
   2a7be:	4b1c      	ldr	r3, [pc, #112]	; (2a830 <dir_register+0x354>)
   2a7c0:	4798      	blx	r3
   2a7c2:	0003      	movs	r3, r0
   2a7c4:	7023      	strb	r3, [r4, #0]
   2a7c6:	232f      	movs	r3, #47	; 0x2f
   2a7c8:	18fb      	adds	r3, r7, r3
   2a7ca:	781b      	ldrb	r3, [r3, #0]
   2a7cc:	2b00      	cmp	r3, #0
   2a7ce:	d11e      	bne.n	2a80e <dir_register+0x332>
   2a7d0:	687b      	ldr	r3, [r7, #4]
   2a7d2:	695b      	ldr	r3, [r3, #20]
   2a7d4:	61bb      	str	r3, [r7, #24]
   2a7d6:	69bb      	ldr	r3, [r7, #24]
   2a7d8:	2220      	movs	r2, #32
   2a7da:	2100      	movs	r1, #0
   2a7dc:	0018      	movs	r0, r3
   2a7de:	4b18      	ldr	r3, [pc, #96]	; (2a840 <dir_register+0x364>)
   2a7e0:	4798      	blx	r3
   2a7e2:	687b      	ldr	r3, [r7, #4]
   2a7e4:	6999      	ldr	r1, [r3, #24]
   2a7e6:	69bb      	ldr	r3, [r7, #24]
   2a7e8:	220b      	movs	r2, #11
   2a7ea:	0018      	movs	r0, r3
   2a7ec:	4b0b      	ldr	r3, [pc, #44]	; (2a81c <dir_register+0x340>)
   2a7ee:	4798      	blx	r3
   2a7f0:	69bb      	ldr	r3, [r7, #24]
   2a7f2:	330c      	adds	r3, #12
   2a7f4:	001a      	movs	r2, r3
   2a7f6:	687b      	ldr	r3, [r7, #4]
   2a7f8:	699b      	ldr	r3, [r3, #24]
   2a7fa:	330b      	adds	r3, #11
   2a7fc:	781b      	ldrb	r3, [r3, #0]
   2a7fe:	2118      	movs	r1, #24
   2a800:	400b      	ands	r3, r1
   2a802:	b2db      	uxtb	r3, r3
   2a804:	7013      	strb	r3, [r2, #0]
   2a806:	687b      	ldr	r3, [r7, #4]
   2a808:	681b      	ldr	r3, [r3, #0]
   2a80a:	2201      	movs	r2, #1
   2a80c:	711a      	strb	r2, [r3, #4]
   2a80e:	232f      	movs	r3, #47	; 0x2f
   2a810:	18fb      	adds	r3, r7, r3
   2a812:	781b      	ldrb	r3, [r3, #0]
   2a814:	0018      	movs	r0, r3
   2a816:	46bd      	mov	sp, r7
   2a818:	b00d      	add	sp, #52	; 0x34
   2a81a:	bd90      	pop	{r4, r7, pc}
   2a81c:	00029335 	.word	0x00029335
   2a820:	0002a191 	.word	0x0002a191
   2a824:	0002a2e1 	.word	0x0002a2e1
   2a828:	000305fd 	.word	0x000305fd
   2a82c:	00029c5d 	.word	0x00029c5d
   2a830:	00029419 	.word	0x00029419
   2a834:	00029d8d 	.word	0x00029d8d
   2a838:	0002a291 	.word	0x0002a291
   2a83c:	0002a081 	.word	0x0002a081
   2a840:	0002936d 	.word	0x0002936d

0002a844 <create_name>:
   2a844:	b590      	push	{r4, r7, lr}
   2a846:	b08b      	sub	sp, #44	; 0x2c
   2a848:	af00      	add	r7, sp, #0
   2a84a:	6078      	str	r0, [r7, #4]
   2a84c:	6039      	str	r1, [r7, #0]
   2a84e:	683b      	ldr	r3, [r7, #0]
   2a850:	681b      	ldr	r3, [r3, #0]
   2a852:	613b      	str	r3, [r7, #16]
   2a854:	e002      	b.n	2a85c <create_name+0x18>
   2a856:	693b      	ldr	r3, [r7, #16]
   2a858:	3301      	adds	r3, #1
   2a85a:	613b      	str	r3, [r7, #16]
   2a85c:	693b      	ldr	r3, [r7, #16]
   2a85e:	781b      	ldrb	r3, [r3, #0]
   2a860:	2b2f      	cmp	r3, #47	; 0x2f
   2a862:	d0f8      	beq.n	2a856 <create_name+0x12>
   2a864:	693b      	ldr	r3, [r7, #16]
   2a866:	781b      	ldrb	r3, [r3, #0]
   2a868:	2b5c      	cmp	r3, #92	; 0x5c
   2a86a:	d0f4      	beq.n	2a856 <create_name+0x12>
   2a86c:	687b      	ldr	r3, [r7, #4]
   2a86e:	69db      	ldr	r3, [r3, #28]
   2a870:	60fb      	str	r3, [r7, #12]
   2a872:	2300      	movs	r3, #0
   2a874:	617b      	str	r3, [r7, #20]
   2a876:	697b      	ldr	r3, [r7, #20]
   2a878:	61bb      	str	r3, [r7, #24]
   2a87a:	69bb      	ldr	r3, [r7, #24]
   2a87c:	1c5a      	adds	r2, r3, #1
   2a87e:	61ba      	str	r2, [r7, #24]
   2a880:	693a      	ldr	r2, [r7, #16]
   2a882:	18d3      	adds	r3, r2, r3
   2a884:	781a      	ldrb	r2, [r3, #0]
   2a886:	2324      	movs	r3, #36	; 0x24
   2a888:	18fb      	adds	r3, r7, r3
   2a88a:	801a      	strh	r2, [r3, #0]
   2a88c:	2324      	movs	r3, #36	; 0x24
   2a88e:	18fb      	adds	r3, r7, r3
   2a890:	881b      	ldrh	r3, [r3, #0]
   2a892:	2b1f      	cmp	r3, #31
   2a894:	d944      	bls.n	2a920 <create_name+0xdc>
   2a896:	2324      	movs	r3, #36	; 0x24
   2a898:	18fb      	adds	r3, r7, r3
   2a89a:	881b      	ldrh	r3, [r3, #0]
   2a89c:	2b2f      	cmp	r3, #47	; 0x2f
   2a89e:	d03f      	beq.n	2a920 <create_name+0xdc>
   2a8a0:	2324      	movs	r3, #36	; 0x24
   2a8a2:	18fb      	adds	r3, r7, r3
   2a8a4:	881b      	ldrh	r3, [r3, #0]
   2a8a6:	2b5c      	cmp	r3, #92	; 0x5c
   2a8a8:	d03a      	beq.n	2a920 <create_name+0xdc>
   2a8aa:	697b      	ldr	r3, [r7, #20]
   2a8ac:	2bfe      	cmp	r3, #254	; 0xfe
   2a8ae:	d901      	bls.n	2a8b4 <create_name+0x70>
   2a8b0:	2306      	movs	r3, #6
   2a8b2:	e1e7      	b.n	2ac84 <create_name+0x440>
   2a8b4:	2324      	movs	r3, #36	; 0x24
   2a8b6:	18fb      	adds	r3, r7, r3
   2a8b8:	2224      	movs	r2, #36	; 0x24
   2a8ba:	18ba      	adds	r2, r7, r2
   2a8bc:	8812      	ldrh	r2, [r2, #0]
   2a8be:	21ff      	movs	r1, #255	; 0xff
   2a8c0:	400a      	ands	r2, r1
   2a8c2:	801a      	strh	r2, [r3, #0]
   2a8c4:	2324      	movs	r3, #36	; 0x24
   2a8c6:	18fc      	adds	r4, r7, r3
   2a8c8:	2324      	movs	r3, #36	; 0x24
   2a8ca:	18fb      	adds	r3, r7, r3
   2a8cc:	881b      	ldrh	r3, [r3, #0]
   2a8ce:	2101      	movs	r1, #1
   2a8d0:	0018      	movs	r0, r3
   2a8d2:	4bba      	ldr	r3, [pc, #744]	; (2abbc <create_name+0x378>)
   2a8d4:	4798      	blx	r3
   2a8d6:	0003      	movs	r3, r0
   2a8d8:	8023      	strh	r3, [r4, #0]
   2a8da:	2324      	movs	r3, #36	; 0x24
   2a8dc:	18fb      	adds	r3, r7, r3
   2a8de:	881b      	ldrh	r3, [r3, #0]
   2a8e0:	2b00      	cmp	r3, #0
   2a8e2:	d101      	bne.n	2a8e8 <create_name+0xa4>
   2a8e4:	2306      	movs	r3, #6
   2a8e6:	e1cd      	b.n	2ac84 <create_name+0x440>
   2a8e8:	2324      	movs	r3, #36	; 0x24
   2a8ea:	18fb      	adds	r3, r7, r3
   2a8ec:	881b      	ldrh	r3, [r3, #0]
   2a8ee:	2b7f      	cmp	r3, #127	; 0x7f
   2a8f0:	d80b      	bhi.n	2a90a <create_name+0xc6>
   2a8f2:	2324      	movs	r3, #36	; 0x24
   2a8f4:	18fb      	adds	r3, r7, r3
   2a8f6:	881a      	ldrh	r2, [r3, #0]
   2a8f8:	4bb1      	ldr	r3, [pc, #708]	; (2abc0 <create_name+0x37c>)
   2a8fa:	0011      	movs	r1, r2
   2a8fc:	0018      	movs	r0, r3
   2a8fe:	4bb1      	ldr	r3, [pc, #708]	; (2abc4 <create_name+0x380>)
   2a900:	4798      	blx	r3
   2a902:	1e03      	subs	r3, r0, #0
   2a904:	d001      	beq.n	2a90a <create_name+0xc6>
   2a906:	2306      	movs	r3, #6
   2a908:	e1bc      	b.n	2ac84 <create_name+0x440>
   2a90a:	697b      	ldr	r3, [r7, #20]
   2a90c:	1c5a      	adds	r2, r3, #1
   2a90e:	617a      	str	r2, [r7, #20]
   2a910:	005b      	lsls	r3, r3, #1
   2a912:	68fa      	ldr	r2, [r7, #12]
   2a914:	18d3      	adds	r3, r2, r3
   2a916:	2224      	movs	r2, #36	; 0x24
   2a918:	18ba      	adds	r2, r7, r2
   2a91a:	8812      	ldrh	r2, [r2, #0]
   2a91c:	801a      	strh	r2, [r3, #0]
   2a91e:	e7ac      	b.n	2a87a <create_name+0x36>
   2a920:	693a      	ldr	r2, [r7, #16]
   2a922:	69bb      	ldr	r3, [r7, #24]
   2a924:	18d2      	adds	r2, r2, r3
   2a926:	683b      	ldr	r3, [r7, #0]
   2a928:	601a      	str	r2, [r3, #0]
   2a92a:	2324      	movs	r3, #36	; 0x24
   2a92c:	18fb      	adds	r3, r7, r3
   2a92e:	881b      	ldrh	r3, [r3, #0]
   2a930:	2b1f      	cmp	r3, #31
   2a932:	d801      	bhi.n	2a938 <create_name+0xf4>
   2a934:	2204      	movs	r2, #4
   2a936:	e000      	b.n	2a93a <create_name+0xf6>
   2a938:	2200      	movs	r2, #0
   2a93a:	2326      	movs	r3, #38	; 0x26
   2a93c:	18fb      	adds	r3, r7, r3
   2a93e:	701a      	strb	r2, [r3, #0]
   2a940:	e017      	b.n	2a972 <create_name+0x12e>
   2a942:	697b      	ldr	r3, [r7, #20]
   2a944:	4aa0      	ldr	r2, [pc, #640]	; (2abc8 <create_name+0x384>)
   2a946:	4694      	mov	ip, r2
   2a948:	4463      	add	r3, ip
   2a94a:	005b      	lsls	r3, r3, #1
   2a94c:	68fa      	ldr	r2, [r7, #12]
   2a94e:	18d2      	adds	r2, r2, r3
   2a950:	2324      	movs	r3, #36	; 0x24
   2a952:	18fb      	adds	r3, r7, r3
   2a954:	8812      	ldrh	r2, [r2, #0]
   2a956:	801a      	strh	r2, [r3, #0]
   2a958:	2324      	movs	r3, #36	; 0x24
   2a95a:	18fb      	adds	r3, r7, r3
   2a95c:	881b      	ldrh	r3, [r3, #0]
   2a95e:	2b20      	cmp	r3, #32
   2a960:	d004      	beq.n	2a96c <create_name+0x128>
   2a962:	2324      	movs	r3, #36	; 0x24
   2a964:	18fb      	adds	r3, r7, r3
   2a966:	881b      	ldrh	r3, [r3, #0]
   2a968:	2b2e      	cmp	r3, #46	; 0x2e
   2a96a:	d106      	bne.n	2a97a <create_name+0x136>
   2a96c:	697b      	ldr	r3, [r7, #20]
   2a96e:	3b01      	subs	r3, #1
   2a970:	617b      	str	r3, [r7, #20]
   2a972:	697b      	ldr	r3, [r7, #20]
   2a974:	2b00      	cmp	r3, #0
   2a976:	d1e4      	bne.n	2a942 <create_name+0xfe>
   2a978:	e000      	b.n	2a97c <create_name+0x138>
   2a97a:	46c0      	nop			; (mov r8, r8)
   2a97c:	697b      	ldr	r3, [r7, #20]
   2a97e:	2b00      	cmp	r3, #0
   2a980:	d101      	bne.n	2a986 <create_name+0x142>
   2a982:	2306      	movs	r3, #6
   2a984:	e17e      	b.n	2ac84 <create_name+0x440>
   2a986:	697b      	ldr	r3, [r7, #20]
   2a988:	005b      	lsls	r3, r3, #1
   2a98a:	68fa      	ldr	r2, [r7, #12]
   2a98c:	18d3      	adds	r3, r2, r3
   2a98e:	2200      	movs	r2, #0
   2a990:	801a      	strh	r2, [r3, #0]
   2a992:	687b      	ldr	r3, [r7, #4]
   2a994:	699b      	ldr	r3, [r3, #24]
   2a996:	220b      	movs	r2, #11
   2a998:	2120      	movs	r1, #32
   2a99a:	0018      	movs	r0, r3
   2a99c:	4b8b      	ldr	r3, [pc, #556]	; (2abcc <create_name+0x388>)
   2a99e:	4798      	blx	r3
   2a9a0:	2300      	movs	r3, #0
   2a9a2:	61bb      	str	r3, [r7, #24]
   2a9a4:	e002      	b.n	2a9ac <create_name+0x168>
   2a9a6:	69bb      	ldr	r3, [r7, #24]
   2a9a8:	3301      	adds	r3, #1
   2a9aa:	61bb      	str	r3, [r7, #24]
   2a9ac:	69bb      	ldr	r3, [r7, #24]
   2a9ae:	005b      	lsls	r3, r3, #1
   2a9b0:	68fa      	ldr	r2, [r7, #12]
   2a9b2:	18d3      	adds	r3, r2, r3
   2a9b4:	881b      	ldrh	r3, [r3, #0]
   2a9b6:	2b20      	cmp	r3, #32
   2a9b8:	d0f5      	beq.n	2a9a6 <create_name+0x162>
   2a9ba:	69bb      	ldr	r3, [r7, #24]
   2a9bc:	005b      	lsls	r3, r3, #1
   2a9be:	68fa      	ldr	r2, [r7, #12]
   2a9c0:	18d3      	adds	r3, r2, r3
   2a9c2:	881b      	ldrh	r3, [r3, #0]
   2a9c4:	2b2e      	cmp	r3, #46	; 0x2e
   2a9c6:	d0ee      	beq.n	2a9a6 <create_name+0x162>
   2a9c8:	69bb      	ldr	r3, [r7, #24]
   2a9ca:	2b00      	cmp	r3, #0
   2a9cc:	d00b      	beq.n	2a9e6 <create_name+0x1a2>
   2a9ce:	2326      	movs	r3, #38	; 0x26
   2a9d0:	18fb      	adds	r3, r7, r3
   2a9d2:	2226      	movs	r2, #38	; 0x26
   2a9d4:	18ba      	adds	r2, r7, r2
   2a9d6:	7812      	ldrb	r2, [r2, #0]
   2a9d8:	2103      	movs	r1, #3
   2a9da:	430a      	orrs	r2, r1
   2a9dc:	701a      	strb	r2, [r3, #0]
   2a9de:	e002      	b.n	2a9e6 <create_name+0x1a2>
   2a9e0:	697b      	ldr	r3, [r7, #20]
   2a9e2:	3b01      	subs	r3, #1
   2a9e4:	617b      	str	r3, [r7, #20]
   2a9e6:	697b      	ldr	r3, [r7, #20]
   2a9e8:	2b00      	cmp	r3, #0
   2a9ea:	d009      	beq.n	2aa00 <create_name+0x1bc>
   2a9ec:	697b      	ldr	r3, [r7, #20]
   2a9ee:	4a76      	ldr	r2, [pc, #472]	; (2abc8 <create_name+0x384>)
   2a9f0:	4694      	mov	ip, r2
   2a9f2:	4463      	add	r3, ip
   2a9f4:	005b      	lsls	r3, r3, #1
   2a9f6:	68fa      	ldr	r2, [r7, #12]
   2a9f8:	18d3      	adds	r3, r2, r3
   2a9fa:	881b      	ldrh	r3, [r3, #0]
   2a9fc:	2b2e      	cmp	r3, #46	; 0x2e
   2a9fe:	d1ef      	bne.n	2a9e0 <create_name+0x19c>
   2aa00:	2300      	movs	r3, #0
   2aa02:	623b      	str	r3, [r7, #32]
   2aa04:	2327      	movs	r3, #39	; 0x27
   2aa06:	18fb      	adds	r3, r7, r3
   2aa08:	2200      	movs	r2, #0
   2aa0a:	701a      	strb	r2, [r3, #0]
   2aa0c:	2308      	movs	r3, #8
   2aa0e:	61fb      	str	r3, [r7, #28]
   2aa10:	69bb      	ldr	r3, [r7, #24]
   2aa12:	1c5a      	adds	r2, r3, #1
   2aa14:	61ba      	str	r2, [r7, #24]
   2aa16:	005b      	lsls	r3, r3, #1
   2aa18:	68fa      	ldr	r2, [r7, #12]
   2aa1a:	18d2      	adds	r2, r2, r3
   2aa1c:	2324      	movs	r3, #36	; 0x24
   2aa1e:	18fb      	adds	r3, r7, r3
   2aa20:	8812      	ldrh	r2, [r2, #0]
   2aa22:	801a      	strh	r2, [r3, #0]
   2aa24:	2324      	movs	r3, #36	; 0x24
   2aa26:	18fb      	adds	r3, r7, r3
   2aa28:	881b      	ldrh	r3, [r3, #0]
   2aa2a:	2b00      	cmp	r3, #0
   2aa2c:	d100      	bne.n	2aa30 <create_name+0x1ec>
   2aa2e:	e0c3      	b.n	2abb8 <create_name+0x374>
   2aa30:	2324      	movs	r3, #36	; 0x24
   2aa32:	18fb      	adds	r3, r7, r3
   2aa34:	881b      	ldrh	r3, [r3, #0]
   2aa36:	2b20      	cmp	r3, #32
   2aa38:	d008      	beq.n	2aa4c <create_name+0x208>
   2aa3a:	2324      	movs	r3, #36	; 0x24
   2aa3c:	18fb      	adds	r3, r7, r3
   2aa3e:	881b      	ldrh	r3, [r3, #0]
   2aa40:	2b2e      	cmp	r3, #46	; 0x2e
   2aa42:	d10c      	bne.n	2aa5e <create_name+0x21a>
   2aa44:	69ba      	ldr	r2, [r7, #24]
   2aa46:	697b      	ldr	r3, [r7, #20]
   2aa48:	429a      	cmp	r2, r3
   2aa4a:	d008      	beq.n	2aa5e <create_name+0x21a>
   2aa4c:	2326      	movs	r3, #38	; 0x26
   2aa4e:	18fb      	adds	r3, r7, r3
   2aa50:	2226      	movs	r2, #38	; 0x26
   2aa52:	18ba      	adds	r2, r7, r2
   2aa54:	7812      	ldrb	r2, [r2, #0]
   2aa56:	2103      	movs	r1, #3
   2aa58:	430a      	orrs	r2, r1
   2aa5a:	701a      	strb	r2, [r3, #0]
   2aa5c:	e0ab      	b.n	2abb6 <create_name+0x372>
   2aa5e:	6a3a      	ldr	r2, [r7, #32]
   2aa60:	69fb      	ldr	r3, [r7, #28]
   2aa62:	429a      	cmp	r2, r3
   2aa64:	d203      	bcs.n	2aa6e <create_name+0x22a>
   2aa66:	69ba      	ldr	r2, [r7, #24]
   2aa68:	697b      	ldr	r3, [r7, #20]
   2aa6a:	429a      	cmp	r2, r3
   2aa6c:	d12a      	bne.n	2aac4 <create_name+0x280>
   2aa6e:	69fb      	ldr	r3, [r7, #28]
   2aa70:	2b0b      	cmp	r3, #11
   2aa72:	d108      	bne.n	2aa86 <create_name+0x242>
   2aa74:	2326      	movs	r3, #38	; 0x26
   2aa76:	18fb      	adds	r3, r7, r3
   2aa78:	2226      	movs	r2, #38	; 0x26
   2aa7a:	18ba      	adds	r2, r7, r2
   2aa7c:	7812      	ldrb	r2, [r2, #0]
   2aa7e:	2103      	movs	r1, #3
   2aa80:	430a      	orrs	r2, r1
   2aa82:	701a      	strb	r2, [r3, #0]
   2aa84:	e0a9      	b.n	2abda <create_name+0x396>
   2aa86:	69ba      	ldr	r2, [r7, #24]
   2aa88:	697b      	ldr	r3, [r7, #20]
   2aa8a:	429a      	cmp	r2, r3
   2aa8c:	d007      	beq.n	2aa9e <create_name+0x25a>
   2aa8e:	2326      	movs	r3, #38	; 0x26
   2aa90:	18fb      	adds	r3, r7, r3
   2aa92:	2226      	movs	r2, #38	; 0x26
   2aa94:	18ba      	adds	r2, r7, r2
   2aa96:	7812      	ldrb	r2, [r2, #0]
   2aa98:	2103      	movs	r1, #3
   2aa9a:	430a      	orrs	r2, r1
   2aa9c:	701a      	strb	r2, [r3, #0]
   2aa9e:	69ba      	ldr	r2, [r7, #24]
   2aaa0:	697b      	ldr	r3, [r7, #20]
   2aaa2:	429a      	cmp	r2, r3
   2aaa4:	d900      	bls.n	2aaa8 <create_name+0x264>
   2aaa6:	e097      	b.n	2abd8 <create_name+0x394>
   2aaa8:	697b      	ldr	r3, [r7, #20]
   2aaaa:	61bb      	str	r3, [r7, #24]
   2aaac:	2308      	movs	r3, #8
   2aaae:	623b      	str	r3, [r7, #32]
   2aab0:	230b      	movs	r3, #11
   2aab2:	61fb      	str	r3, [r7, #28]
   2aab4:	2327      	movs	r3, #39	; 0x27
   2aab6:	18fb      	adds	r3, r7, r3
   2aab8:	2227      	movs	r2, #39	; 0x27
   2aaba:	18ba      	adds	r2, r7, r2
   2aabc:	7812      	ldrb	r2, [r2, #0]
   2aabe:	0092      	lsls	r2, r2, #2
   2aac0:	701a      	strb	r2, [r3, #0]
   2aac2:	e078      	b.n	2abb6 <create_name+0x372>
   2aac4:	2324      	movs	r3, #36	; 0x24
   2aac6:	18fb      	adds	r3, r7, r3
   2aac8:	881b      	ldrh	r3, [r3, #0]
   2aaca:	2b7f      	cmp	r3, #127	; 0x7f
   2aacc:	d920      	bls.n	2ab10 <create_name+0x2cc>
   2aace:	2324      	movs	r3, #36	; 0x24
   2aad0:	18fc      	adds	r4, r7, r3
   2aad2:	2324      	movs	r3, #36	; 0x24
   2aad4:	18fb      	adds	r3, r7, r3
   2aad6:	881b      	ldrh	r3, [r3, #0]
   2aad8:	2100      	movs	r1, #0
   2aada:	0018      	movs	r0, r3
   2aadc:	4b37      	ldr	r3, [pc, #220]	; (2abbc <create_name+0x378>)
   2aade:	4798      	blx	r3
   2aae0:	0003      	movs	r3, r0
   2aae2:	8023      	strh	r3, [r4, #0]
   2aae4:	2324      	movs	r3, #36	; 0x24
   2aae6:	18fb      	adds	r3, r7, r3
   2aae8:	881b      	ldrh	r3, [r3, #0]
   2aaea:	2b00      	cmp	r3, #0
   2aaec:	d008      	beq.n	2ab00 <create_name+0x2bc>
   2aaee:	2324      	movs	r3, #36	; 0x24
   2aaf0:	18fb      	adds	r3, r7, r3
   2aaf2:	881b      	ldrh	r3, [r3, #0]
   2aaf4:	3b80      	subs	r3, #128	; 0x80
   2aaf6:	4a36      	ldr	r2, [pc, #216]	; (2abd0 <create_name+0x38c>)
   2aaf8:	5cd2      	ldrb	r2, [r2, r3]
   2aafa:	2324      	movs	r3, #36	; 0x24
   2aafc:	18fb      	adds	r3, r7, r3
   2aafe:	801a      	strh	r2, [r3, #0]
   2ab00:	2326      	movs	r3, #38	; 0x26
   2ab02:	18fb      	adds	r3, r7, r3
   2ab04:	2226      	movs	r2, #38	; 0x26
   2ab06:	18ba      	adds	r2, r7, r2
   2ab08:	7812      	ldrb	r2, [r2, #0]
   2ab0a:	2102      	movs	r1, #2
   2ab0c:	430a      	orrs	r2, r1
   2ab0e:	701a      	strb	r2, [r3, #0]
   2ab10:	2324      	movs	r3, #36	; 0x24
   2ab12:	18fb      	adds	r3, r7, r3
   2ab14:	881b      	ldrh	r3, [r3, #0]
   2ab16:	2b00      	cmp	r3, #0
   2ab18:	d009      	beq.n	2ab2e <create_name+0x2ea>
   2ab1a:	2324      	movs	r3, #36	; 0x24
   2ab1c:	18fb      	adds	r3, r7, r3
   2ab1e:	881a      	ldrh	r2, [r3, #0]
   2ab20:	4b2c      	ldr	r3, [pc, #176]	; (2abd4 <create_name+0x390>)
   2ab22:	0011      	movs	r1, r2
   2ab24:	0018      	movs	r0, r3
   2ab26:	4b27      	ldr	r3, [pc, #156]	; (2abc4 <create_name+0x380>)
   2ab28:	4798      	blx	r3
   2ab2a:	1e03      	subs	r3, r0, #0
   2ab2c:	d00c      	beq.n	2ab48 <create_name+0x304>
   2ab2e:	2324      	movs	r3, #36	; 0x24
   2ab30:	18fb      	adds	r3, r7, r3
   2ab32:	225f      	movs	r2, #95	; 0x5f
   2ab34:	801a      	strh	r2, [r3, #0]
   2ab36:	2326      	movs	r3, #38	; 0x26
   2ab38:	18fb      	adds	r3, r7, r3
   2ab3a:	2226      	movs	r2, #38	; 0x26
   2ab3c:	18ba      	adds	r2, r7, r2
   2ab3e:	7812      	ldrb	r2, [r2, #0]
   2ab40:	2103      	movs	r1, #3
   2ab42:	430a      	orrs	r2, r1
   2ab44:	701a      	strb	r2, [r3, #0]
   2ab46:	e02b      	b.n	2aba0 <create_name+0x35c>
   2ab48:	2324      	movs	r3, #36	; 0x24
   2ab4a:	18fb      	adds	r3, r7, r3
   2ab4c:	881b      	ldrh	r3, [r3, #0]
   2ab4e:	2b40      	cmp	r3, #64	; 0x40
   2ab50:	d90d      	bls.n	2ab6e <create_name+0x32a>
   2ab52:	2324      	movs	r3, #36	; 0x24
   2ab54:	18fb      	adds	r3, r7, r3
   2ab56:	881b      	ldrh	r3, [r3, #0]
   2ab58:	2b5a      	cmp	r3, #90	; 0x5a
   2ab5a:	d808      	bhi.n	2ab6e <create_name+0x32a>
   2ab5c:	2327      	movs	r3, #39	; 0x27
   2ab5e:	18fb      	adds	r3, r7, r3
   2ab60:	2227      	movs	r2, #39	; 0x27
   2ab62:	18ba      	adds	r2, r7, r2
   2ab64:	7812      	ldrb	r2, [r2, #0]
   2ab66:	2102      	movs	r1, #2
   2ab68:	430a      	orrs	r2, r1
   2ab6a:	701a      	strb	r2, [r3, #0]
   2ab6c:	e018      	b.n	2aba0 <create_name+0x35c>
   2ab6e:	2324      	movs	r3, #36	; 0x24
   2ab70:	18fb      	adds	r3, r7, r3
   2ab72:	881b      	ldrh	r3, [r3, #0]
   2ab74:	2b60      	cmp	r3, #96	; 0x60
   2ab76:	d913      	bls.n	2aba0 <create_name+0x35c>
   2ab78:	2324      	movs	r3, #36	; 0x24
   2ab7a:	18fb      	adds	r3, r7, r3
   2ab7c:	881b      	ldrh	r3, [r3, #0]
   2ab7e:	2b7a      	cmp	r3, #122	; 0x7a
   2ab80:	d80e      	bhi.n	2aba0 <create_name+0x35c>
   2ab82:	2327      	movs	r3, #39	; 0x27
   2ab84:	18fb      	adds	r3, r7, r3
   2ab86:	2227      	movs	r2, #39	; 0x27
   2ab88:	18ba      	adds	r2, r7, r2
   2ab8a:	7812      	ldrb	r2, [r2, #0]
   2ab8c:	2101      	movs	r1, #1
   2ab8e:	430a      	orrs	r2, r1
   2ab90:	701a      	strb	r2, [r3, #0]
   2ab92:	2324      	movs	r3, #36	; 0x24
   2ab94:	18fb      	adds	r3, r7, r3
   2ab96:	2224      	movs	r2, #36	; 0x24
   2ab98:	18ba      	adds	r2, r7, r2
   2ab9a:	8812      	ldrh	r2, [r2, #0]
   2ab9c:	3a20      	subs	r2, #32
   2ab9e:	801a      	strh	r2, [r3, #0]
   2aba0:	687b      	ldr	r3, [r7, #4]
   2aba2:	699a      	ldr	r2, [r3, #24]
   2aba4:	6a3b      	ldr	r3, [r7, #32]
   2aba6:	1c59      	adds	r1, r3, #1
   2aba8:	6239      	str	r1, [r7, #32]
   2abaa:	18d3      	adds	r3, r2, r3
   2abac:	2224      	movs	r2, #36	; 0x24
   2abae:	18ba      	adds	r2, r7, r2
   2abb0:	8812      	ldrh	r2, [r2, #0]
   2abb2:	b2d2      	uxtb	r2, r2
   2abb4:	701a      	strb	r2, [r3, #0]
   2abb6:	e72b      	b.n	2aa10 <create_name+0x1cc>
   2abb8:	46c0      	nop			; (mov r8, r8)
   2abba:	e00e      	b.n	2abda <create_name+0x396>
   2abbc:	0002bf7d 	.word	0x0002bf7d
   2abc0:	00036a34 	.word	0x00036a34
   2abc4:	000293e7 	.word	0x000293e7
   2abc8:	7fffffff 	.word	0x7fffffff
   2abcc:	0002936d 	.word	0x0002936d
   2abd0:	00036a7c 	.word	0x00036a7c
   2abd4:	00036a40 	.word	0x00036a40
   2abd8:	46c0      	nop			; (mov r8, r8)
   2abda:	687b      	ldr	r3, [r7, #4]
   2abdc:	699b      	ldr	r3, [r3, #24]
   2abde:	781b      	ldrb	r3, [r3, #0]
   2abe0:	2be5      	cmp	r3, #229	; 0xe5
   2abe2:	d103      	bne.n	2abec <create_name+0x3a8>
   2abe4:	687b      	ldr	r3, [r7, #4]
   2abe6:	699b      	ldr	r3, [r3, #24]
   2abe8:	2205      	movs	r2, #5
   2abea:	701a      	strb	r2, [r3, #0]
   2abec:	69fb      	ldr	r3, [r7, #28]
   2abee:	2b08      	cmp	r3, #8
   2abf0:	d106      	bne.n	2ac00 <create_name+0x3bc>
   2abf2:	2327      	movs	r3, #39	; 0x27
   2abf4:	18fb      	adds	r3, r7, r3
   2abf6:	2227      	movs	r2, #39	; 0x27
   2abf8:	18ba      	adds	r2, r7, r2
   2abfa:	7812      	ldrb	r2, [r2, #0]
   2abfc:	0092      	lsls	r2, r2, #2
   2abfe:	701a      	strb	r2, [r3, #0]
   2ac00:	2327      	movs	r3, #39	; 0x27
   2ac02:	18fb      	adds	r3, r7, r3
   2ac04:	781b      	ldrb	r3, [r3, #0]
   2ac06:	220c      	movs	r2, #12
   2ac08:	4013      	ands	r3, r2
   2ac0a:	2b0c      	cmp	r3, #12
   2ac0c:	d006      	beq.n	2ac1c <create_name+0x3d8>
   2ac0e:	2327      	movs	r3, #39	; 0x27
   2ac10:	18fb      	adds	r3, r7, r3
   2ac12:	781b      	ldrb	r3, [r3, #0]
   2ac14:	2203      	movs	r2, #3
   2ac16:	4013      	ands	r3, r2
   2ac18:	2b03      	cmp	r3, #3
   2ac1a:	d107      	bne.n	2ac2c <create_name+0x3e8>
   2ac1c:	2326      	movs	r3, #38	; 0x26
   2ac1e:	18fb      	adds	r3, r7, r3
   2ac20:	2226      	movs	r2, #38	; 0x26
   2ac22:	18ba      	adds	r2, r7, r2
   2ac24:	7812      	ldrb	r2, [r2, #0]
   2ac26:	2102      	movs	r1, #2
   2ac28:	430a      	orrs	r2, r1
   2ac2a:	701a      	strb	r2, [r3, #0]
   2ac2c:	2326      	movs	r3, #38	; 0x26
   2ac2e:	18fb      	adds	r3, r7, r3
   2ac30:	781b      	ldrb	r3, [r3, #0]
   2ac32:	2202      	movs	r2, #2
   2ac34:	4013      	ands	r3, r2
   2ac36:	d11d      	bne.n	2ac74 <create_name+0x430>
   2ac38:	2327      	movs	r3, #39	; 0x27
   2ac3a:	18fb      	adds	r3, r7, r3
   2ac3c:	781b      	ldrb	r3, [r3, #0]
   2ac3e:	2203      	movs	r2, #3
   2ac40:	4013      	ands	r3, r2
   2ac42:	2b01      	cmp	r3, #1
   2ac44:	d107      	bne.n	2ac56 <create_name+0x412>
   2ac46:	2326      	movs	r3, #38	; 0x26
   2ac48:	18fb      	adds	r3, r7, r3
   2ac4a:	2226      	movs	r2, #38	; 0x26
   2ac4c:	18ba      	adds	r2, r7, r2
   2ac4e:	7812      	ldrb	r2, [r2, #0]
   2ac50:	2110      	movs	r1, #16
   2ac52:	430a      	orrs	r2, r1
   2ac54:	701a      	strb	r2, [r3, #0]
   2ac56:	2327      	movs	r3, #39	; 0x27
   2ac58:	18fb      	adds	r3, r7, r3
   2ac5a:	781b      	ldrb	r3, [r3, #0]
   2ac5c:	220c      	movs	r2, #12
   2ac5e:	4013      	ands	r3, r2
   2ac60:	2b04      	cmp	r3, #4
   2ac62:	d107      	bne.n	2ac74 <create_name+0x430>
   2ac64:	2326      	movs	r3, #38	; 0x26
   2ac66:	18fb      	adds	r3, r7, r3
   2ac68:	2226      	movs	r2, #38	; 0x26
   2ac6a:	18ba      	adds	r2, r7, r2
   2ac6c:	7812      	ldrb	r2, [r2, #0]
   2ac6e:	2108      	movs	r1, #8
   2ac70:	430a      	orrs	r2, r1
   2ac72:	701a      	strb	r2, [r3, #0]
   2ac74:	687b      	ldr	r3, [r7, #4]
   2ac76:	699b      	ldr	r3, [r3, #24]
   2ac78:	330b      	adds	r3, #11
   2ac7a:	2226      	movs	r2, #38	; 0x26
   2ac7c:	18ba      	adds	r2, r7, r2
   2ac7e:	7812      	ldrb	r2, [r2, #0]
   2ac80:	701a      	strb	r2, [r3, #0]
   2ac82:	2300      	movs	r3, #0
   2ac84:	0018      	movs	r0, r3
   2ac86:	46bd      	mov	sp, r7
   2ac88:	b00b      	add	sp, #44	; 0x2c
   2ac8a:	bd90      	pop	{r4, r7, pc}

0002ac8c <follow_path>:
   2ac8c:	b590      	push	{r4, r7, lr}
   2ac8e:	b085      	sub	sp, #20
   2ac90:	af00      	add	r7, sp, #0
   2ac92:	6078      	str	r0, [r7, #4]
   2ac94:	6039      	str	r1, [r7, #0]
   2ac96:	683b      	ldr	r3, [r7, #0]
   2ac98:	781b      	ldrb	r3, [r3, #0]
   2ac9a:	2b2f      	cmp	r3, #47	; 0x2f
   2ac9c:	d003      	beq.n	2aca6 <follow_path+0x1a>
   2ac9e:	683b      	ldr	r3, [r7, #0]
   2aca0:	781b      	ldrb	r3, [r3, #0]
   2aca2:	2b5c      	cmp	r3, #92	; 0x5c
   2aca4:	d102      	bne.n	2acac <follow_path+0x20>
   2aca6:	683b      	ldr	r3, [r7, #0]
   2aca8:	3301      	adds	r3, #1
   2acaa:	603b      	str	r3, [r7, #0]
   2acac:	687b      	ldr	r3, [r7, #4]
   2acae:	2200      	movs	r2, #0
   2acb0:	609a      	str	r2, [r3, #8]
   2acb2:	683b      	ldr	r3, [r7, #0]
   2acb4:	781b      	ldrb	r3, [r3, #0]
   2acb6:	2b1f      	cmp	r3, #31
   2acb8:	d80c      	bhi.n	2acd4 <follow_path+0x48>
   2acba:	230f      	movs	r3, #15
   2acbc:	18fc      	adds	r4, r7, r3
   2acbe:	687b      	ldr	r3, [r7, #4]
   2acc0:	2100      	movs	r1, #0
   2acc2:	0018      	movs	r0, r3
   2acc4:	4b3c      	ldr	r3, [pc, #240]	; (2adb8 <follow_path+0x12c>)
   2acc6:	4798      	blx	r3
   2acc8:	0003      	movs	r3, r0
   2acca:	7023      	strb	r3, [r4, #0]
   2accc:	687b      	ldr	r3, [r7, #4]
   2acce:	2200      	movs	r2, #0
   2acd0:	615a      	str	r2, [r3, #20]
   2acd2:	e06a      	b.n	2adaa <follow_path+0x11e>
   2acd4:	230f      	movs	r3, #15
   2acd6:	18fc      	adds	r4, r7, r3
   2acd8:	003a      	movs	r2, r7
   2acda:	687b      	ldr	r3, [r7, #4]
   2acdc:	0011      	movs	r1, r2
   2acde:	0018      	movs	r0, r3
   2ace0:	4b36      	ldr	r3, [pc, #216]	; (2adbc <follow_path+0x130>)
   2ace2:	4798      	blx	r3
   2ace4:	0003      	movs	r3, r0
   2ace6:	7023      	strb	r3, [r4, #0]
   2ace8:	230f      	movs	r3, #15
   2acea:	18fb      	adds	r3, r7, r3
   2acec:	781b      	ldrb	r3, [r3, #0]
   2acee:	2b00      	cmp	r3, #0
   2acf0:	d154      	bne.n	2ad9c <follow_path+0x110>
   2acf2:	230f      	movs	r3, #15
   2acf4:	18fc      	adds	r4, r7, r3
   2acf6:	687b      	ldr	r3, [r7, #4]
   2acf8:	0018      	movs	r0, r3
   2acfa:	4b31      	ldr	r3, [pc, #196]	; (2adc0 <follow_path+0x134>)
   2acfc:	4798      	blx	r3
   2acfe:	0003      	movs	r3, r0
   2ad00:	7023      	strb	r3, [r4, #0]
   2ad02:	687b      	ldr	r3, [r7, #4]
   2ad04:	699a      	ldr	r2, [r3, #24]
   2ad06:	230e      	movs	r3, #14
   2ad08:	18fb      	adds	r3, r7, r3
   2ad0a:	7ad2      	ldrb	r2, [r2, #11]
   2ad0c:	701a      	strb	r2, [r3, #0]
   2ad0e:	230f      	movs	r3, #15
   2ad10:	18fb      	adds	r3, r7, r3
   2ad12:	781b      	ldrb	r3, [r3, #0]
   2ad14:	2b00      	cmp	r3, #0
   2ad16:	d00f      	beq.n	2ad38 <follow_path+0xac>
   2ad18:	230f      	movs	r3, #15
   2ad1a:	18fb      	adds	r3, r7, r3
   2ad1c:	781b      	ldrb	r3, [r3, #0]
   2ad1e:	2b04      	cmp	r3, #4
   2ad20:	d13e      	bne.n	2ada0 <follow_path+0x114>
   2ad22:	230e      	movs	r3, #14
   2ad24:	18fb      	adds	r3, r7, r3
   2ad26:	781b      	ldrb	r3, [r3, #0]
   2ad28:	2204      	movs	r2, #4
   2ad2a:	4013      	ands	r3, r2
   2ad2c:	d13a      	bne.n	2ada4 <follow_path+0x118>
   2ad2e:	230f      	movs	r3, #15
   2ad30:	18fb      	adds	r3, r7, r3
   2ad32:	2205      	movs	r2, #5
   2ad34:	701a      	strb	r2, [r3, #0]
   2ad36:	e035      	b.n	2ada4 <follow_path+0x118>
   2ad38:	230e      	movs	r3, #14
   2ad3a:	18fb      	adds	r3, r7, r3
   2ad3c:	781b      	ldrb	r3, [r3, #0]
   2ad3e:	2204      	movs	r2, #4
   2ad40:	4013      	ands	r3, r2
   2ad42:	d131      	bne.n	2ada8 <follow_path+0x11c>
   2ad44:	687b      	ldr	r3, [r7, #4]
   2ad46:	695b      	ldr	r3, [r3, #20]
   2ad48:	60bb      	str	r3, [r7, #8]
   2ad4a:	68bb      	ldr	r3, [r7, #8]
   2ad4c:	330b      	adds	r3, #11
   2ad4e:	781b      	ldrb	r3, [r3, #0]
   2ad50:	001a      	movs	r2, r3
   2ad52:	2310      	movs	r3, #16
   2ad54:	4013      	ands	r3, r2
   2ad56:	d104      	bne.n	2ad62 <follow_path+0xd6>
   2ad58:	230f      	movs	r3, #15
   2ad5a:	18fb      	adds	r3, r7, r3
   2ad5c:	2205      	movs	r2, #5
   2ad5e:	701a      	strb	r2, [r3, #0]
   2ad60:	e023      	b.n	2adaa <follow_path+0x11e>
   2ad62:	68bb      	ldr	r3, [r7, #8]
   2ad64:	3315      	adds	r3, #21
   2ad66:	781b      	ldrb	r3, [r3, #0]
   2ad68:	021b      	lsls	r3, r3, #8
   2ad6a:	b21a      	sxth	r2, r3
   2ad6c:	68bb      	ldr	r3, [r7, #8]
   2ad6e:	3314      	adds	r3, #20
   2ad70:	781b      	ldrb	r3, [r3, #0]
   2ad72:	b21b      	sxth	r3, r3
   2ad74:	4313      	orrs	r3, r2
   2ad76:	b21b      	sxth	r3, r3
   2ad78:	b29b      	uxth	r3, r3
   2ad7a:	041b      	lsls	r3, r3, #16
   2ad7c:	68ba      	ldr	r2, [r7, #8]
   2ad7e:	321b      	adds	r2, #27
   2ad80:	7812      	ldrb	r2, [r2, #0]
   2ad82:	0212      	lsls	r2, r2, #8
   2ad84:	b211      	sxth	r1, r2
   2ad86:	68ba      	ldr	r2, [r7, #8]
   2ad88:	321a      	adds	r2, #26
   2ad8a:	7812      	ldrb	r2, [r2, #0]
   2ad8c:	b212      	sxth	r2, r2
   2ad8e:	430a      	orrs	r2, r1
   2ad90:	b212      	sxth	r2, r2
   2ad92:	b292      	uxth	r2, r2
   2ad94:	431a      	orrs	r2, r3
   2ad96:	687b      	ldr	r3, [r7, #4]
   2ad98:	609a      	str	r2, [r3, #8]
   2ad9a:	e79b      	b.n	2acd4 <follow_path+0x48>
   2ad9c:	46c0      	nop			; (mov r8, r8)
   2ad9e:	e004      	b.n	2adaa <follow_path+0x11e>
   2ada0:	46c0      	nop			; (mov r8, r8)
   2ada2:	e002      	b.n	2adaa <follow_path+0x11e>
   2ada4:	46c0      	nop			; (mov r8, r8)
   2ada6:	e000      	b.n	2adaa <follow_path+0x11e>
   2ada8:	46c0      	nop			; (mov r8, r8)
   2adaa:	230f      	movs	r3, #15
   2adac:	18fb      	adds	r3, r7, r3
   2adae:	781b      	ldrb	r3, [r3, #0]
   2adb0:	0018      	movs	r0, r3
   2adb2:	46bd      	mov	sp, r7
   2adb4:	b005      	add	sp, #20
   2adb6:	bd90      	pop	{r4, r7, pc}
   2adb8:	00029c5d 	.word	0x00029c5d
   2adbc:	0002a845 	.word	0x0002a845
   2adc0:	0002a2e1 	.word	0x0002a2e1

0002adc4 <check_fs>:
   2adc4:	b590      	push	{r4, r7, lr}
   2adc6:	b083      	sub	sp, #12
   2adc8:	af00      	add	r7, sp, #0
   2adca:	6078      	str	r0, [r7, #4]
   2adcc:	6039      	str	r1, [r7, #0]
   2adce:	687b      	ldr	r3, [r7, #4]
   2add0:	7858      	ldrb	r0, [r3, #1]
   2add2:	687b      	ldr	r3, [r7, #4]
   2add4:	3330      	adds	r3, #48	; 0x30
   2add6:	0019      	movs	r1, r3
   2add8:	683a      	ldr	r2, [r7, #0]
   2adda:	2301      	movs	r3, #1
   2addc:	4c2a      	ldr	r4, [pc, #168]	; (2ae88 <check_fs+0xc4>)
   2adde:	47a0      	blx	r4
   2ade0:	1e03      	subs	r3, r0, #0
   2ade2:	d001      	beq.n	2ade8 <check_fs+0x24>
   2ade4:	2303      	movs	r3, #3
   2ade6:	e04b      	b.n	2ae80 <check_fs+0xbc>
   2ade8:	687b      	ldr	r3, [r7, #4]
   2adea:	4a28      	ldr	r2, [pc, #160]	; (2ae8c <check_fs+0xc8>)
   2adec:	4694      	mov	ip, r2
   2adee:	4463      	add	r3, ip
   2adf0:	3301      	adds	r3, #1
   2adf2:	781b      	ldrb	r3, [r3, #0]
   2adf4:	021b      	lsls	r3, r3, #8
   2adf6:	b21a      	sxth	r2, r3
   2adf8:	687b      	ldr	r3, [r7, #4]
   2adfa:	4924      	ldr	r1, [pc, #144]	; (2ae8c <check_fs+0xc8>)
   2adfc:	5c5b      	ldrb	r3, [r3, r1]
   2adfe:	b21b      	sxth	r3, r3
   2ae00:	4313      	orrs	r3, r2
   2ae02:	b21b      	sxth	r3, r3
   2ae04:	4a22      	ldr	r2, [pc, #136]	; (2ae90 <check_fs+0xcc>)
   2ae06:	4293      	cmp	r3, r2
   2ae08:	d001      	beq.n	2ae0e <check_fs+0x4a>
   2ae0a:	2302      	movs	r3, #2
   2ae0c:	e038      	b.n	2ae80 <check_fs+0xbc>
   2ae0e:	687b      	ldr	r3, [r7, #4]
   2ae10:	3366      	adds	r3, #102	; 0x66
   2ae12:	3303      	adds	r3, #3
   2ae14:	781b      	ldrb	r3, [r3, #0]
   2ae16:	061a      	lsls	r2, r3, #24
   2ae18:	687b      	ldr	r3, [r7, #4]
   2ae1a:	3366      	adds	r3, #102	; 0x66
   2ae1c:	3302      	adds	r3, #2
   2ae1e:	781b      	ldrb	r3, [r3, #0]
   2ae20:	041b      	lsls	r3, r3, #16
   2ae22:	4313      	orrs	r3, r2
   2ae24:	687a      	ldr	r2, [r7, #4]
   2ae26:	3266      	adds	r2, #102	; 0x66
   2ae28:	3201      	adds	r2, #1
   2ae2a:	7812      	ldrb	r2, [r2, #0]
   2ae2c:	0212      	lsls	r2, r2, #8
   2ae2e:	4313      	orrs	r3, r2
   2ae30:	687a      	ldr	r2, [r7, #4]
   2ae32:	2166      	movs	r1, #102	; 0x66
   2ae34:	5c52      	ldrb	r2, [r2, r1]
   2ae36:	4313      	orrs	r3, r2
   2ae38:	021b      	lsls	r3, r3, #8
   2ae3a:	0a1b      	lsrs	r3, r3, #8
   2ae3c:	4a15      	ldr	r2, [pc, #84]	; (2ae94 <check_fs+0xd0>)
   2ae3e:	4293      	cmp	r3, r2
   2ae40:	d101      	bne.n	2ae46 <check_fs+0x82>
   2ae42:	2300      	movs	r3, #0
   2ae44:	e01c      	b.n	2ae80 <check_fs+0xbc>
   2ae46:	687b      	ldr	r3, [r7, #4]
   2ae48:	3382      	adds	r3, #130	; 0x82
   2ae4a:	3303      	adds	r3, #3
   2ae4c:	781b      	ldrb	r3, [r3, #0]
   2ae4e:	061a      	lsls	r2, r3, #24
   2ae50:	687b      	ldr	r3, [r7, #4]
   2ae52:	3382      	adds	r3, #130	; 0x82
   2ae54:	3302      	adds	r3, #2
   2ae56:	781b      	ldrb	r3, [r3, #0]
   2ae58:	041b      	lsls	r3, r3, #16
   2ae5a:	4313      	orrs	r3, r2
   2ae5c:	687a      	ldr	r2, [r7, #4]
   2ae5e:	3282      	adds	r2, #130	; 0x82
   2ae60:	3201      	adds	r2, #1
   2ae62:	7812      	ldrb	r2, [r2, #0]
   2ae64:	0212      	lsls	r2, r2, #8
   2ae66:	4313      	orrs	r3, r2
   2ae68:	687a      	ldr	r2, [r7, #4]
   2ae6a:	2182      	movs	r1, #130	; 0x82
   2ae6c:	5c52      	ldrb	r2, [r2, r1]
   2ae6e:	4313      	orrs	r3, r2
   2ae70:	021b      	lsls	r3, r3, #8
   2ae72:	0a1b      	lsrs	r3, r3, #8
   2ae74:	4a07      	ldr	r2, [pc, #28]	; (2ae94 <check_fs+0xd0>)
   2ae76:	4293      	cmp	r3, r2
   2ae78:	d101      	bne.n	2ae7e <check_fs+0xba>
   2ae7a:	2300      	movs	r3, #0
   2ae7c:	e000      	b.n	2ae80 <check_fs+0xbc>
   2ae7e:	2301      	movs	r3, #1
   2ae80:	0018      	movs	r0, r3
   2ae82:	46bd      	mov	sp, r7
   2ae84:	b003      	add	sp, #12
   2ae86:	bd90      	pop	{r4, r7, pc}
   2ae88:	0002902d 	.word	0x0002902d
   2ae8c:	0000022e 	.word	0x0000022e
   2ae90:	ffffaa55 	.word	0xffffaa55
   2ae94:	00544146 	.word	0x00544146

0002ae98 <chk_mounted>:
   2ae98:	b590      	push	{r4, r7, lr}
   2ae9a:	b093      	sub	sp, #76	; 0x4c
   2ae9c:	af00      	add	r7, sp, #0
   2ae9e:	60f8      	str	r0, [r7, #12]
   2aea0:	60b9      	str	r1, [r7, #8]
   2aea2:	1dfb      	adds	r3, r7, #7
   2aea4:	701a      	strb	r2, [r3, #0]
   2aea6:	68fb      	ldr	r3, [r7, #12]
   2aea8:	681b      	ldr	r3, [r3, #0]
   2aeaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   2aeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2aeae:	781b      	ldrb	r3, [r3, #0]
   2aeb0:	3b30      	subs	r3, #48	; 0x30
   2aeb2:	643b      	str	r3, [r7, #64]	; 0x40
   2aeb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2aeb6:	2b09      	cmp	r3, #9
   2aeb8:	d80b      	bhi.n	2aed2 <chk_mounted+0x3a>
   2aeba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2aebc:	3301      	adds	r3, #1
   2aebe:	781b      	ldrb	r3, [r3, #0]
   2aec0:	2b3a      	cmp	r3, #58	; 0x3a
   2aec2:	d106      	bne.n	2aed2 <chk_mounted+0x3a>
   2aec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2aec6:	3302      	adds	r3, #2
   2aec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   2aeca:	68fb      	ldr	r3, [r7, #12]
   2aecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2aece:	601a      	str	r2, [r3, #0]
   2aed0:	e001      	b.n	2aed6 <chk_mounted+0x3e>
   2aed2:	2300      	movs	r3, #0
   2aed4:	643b      	str	r3, [r7, #64]	; 0x40
   2aed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2aed8:	2b07      	cmp	r3, #7
   2aeda:	d901      	bls.n	2aee0 <chk_mounted+0x48>
   2aedc:	230b      	movs	r3, #11
   2aede:	e2af      	b.n	2b440 <chk_mounted+0x5a8>
   2aee0:	4bc5      	ldr	r3, [pc, #788]	; (2b1f8 <chk_mounted+0x360>)
   2aee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2aee4:	0092      	lsls	r2, r2, #2
   2aee6:	58d3      	ldr	r3, [r2, r3]
   2aee8:	62bb      	str	r3, [r7, #40]	; 0x28
   2aeea:	68bb      	ldr	r3, [r7, #8]
   2aeec:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2aeee:	601a      	str	r2, [r3, #0]
   2aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2aef2:	2b00      	cmp	r3, #0
   2aef4:	d101      	bne.n	2aefa <chk_mounted+0x62>
   2aef6:	230c      	movs	r3, #12
   2aef8:	e2a2      	b.n	2b440 <chk_mounted+0x5a8>
   2aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2aefc:	781b      	ldrb	r3, [r3, #0]
   2aefe:	2b00      	cmp	r3, #0
   2af00:	d01c      	beq.n	2af3c <chk_mounted+0xa4>
   2af02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2af04:	785b      	ldrb	r3, [r3, #1]
   2af06:	2227      	movs	r2, #39	; 0x27
   2af08:	18bc      	adds	r4, r7, r2
   2af0a:	0018      	movs	r0, r3
   2af0c:	4bbb      	ldr	r3, [pc, #748]	; (2b1fc <chk_mounted+0x364>)
   2af0e:	4798      	blx	r3
   2af10:	0003      	movs	r3, r0
   2af12:	7023      	strb	r3, [r4, #0]
   2af14:	2327      	movs	r3, #39	; 0x27
   2af16:	18fb      	adds	r3, r7, r3
   2af18:	781b      	ldrb	r3, [r3, #0]
   2af1a:	2201      	movs	r2, #1
   2af1c:	4013      	ands	r3, r2
   2af1e:	d10d      	bne.n	2af3c <chk_mounted+0xa4>
   2af20:	1dfb      	adds	r3, r7, #7
   2af22:	781b      	ldrb	r3, [r3, #0]
   2af24:	2b00      	cmp	r3, #0
   2af26:	d007      	beq.n	2af38 <chk_mounted+0xa0>
   2af28:	2327      	movs	r3, #39	; 0x27
   2af2a:	18fb      	adds	r3, r7, r3
   2af2c:	781b      	ldrb	r3, [r3, #0]
   2af2e:	2204      	movs	r2, #4
   2af30:	4013      	ands	r3, r2
   2af32:	d001      	beq.n	2af38 <chk_mounted+0xa0>
   2af34:	230a      	movs	r3, #10
   2af36:	e283      	b.n	2b440 <chk_mounted+0x5a8>
   2af38:	2300      	movs	r3, #0
   2af3a:	e281      	b.n	2b440 <chk_mounted+0x5a8>
   2af3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2af3e:	2200      	movs	r2, #0
   2af40:	701a      	strb	r2, [r3, #0]
   2af42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2af44:	b2da      	uxtb	r2, r3
   2af46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2af48:	705a      	strb	r2, [r3, #1]
   2af4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2af4c:	785b      	ldrb	r3, [r3, #1]
   2af4e:	2227      	movs	r2, #39	; 0x27
   2af50:	18bc      	adds	r4, r7, r2
   2af52:	0018      	movs	r0, r3
   2af54:	4baa      	ldr	r3, [pc, #680]	; (2b200 <chk_mounted+0x368>)
   2af56:	4798      	blx	r3
   2af58:	0003      	movs	r3, r0
   2af5a:	7023      	strb	r3, [r4, #0]
   2af5c:	2327      	movs	r3, #39	; 0x27
   2af5e:	18fb      	adds	r3, r7, r3
   2af60:	781b      	ldrb	r3, [r3, #0]
   2af62:	2201      	movs	r2, #1
   2af64:	4013      	ands	r3, r2
   2af66:	d001      	beq.n	2af6c <chk_mounted+0xd4>
   2af68:	2303      	movs	r3, #3
   2af6a:	e269      	b.n	2b440 <chk_mounted+0x5a8>
   2af6c:	1dfb      	adds	r3, r7, #7
   2af6e:	781b      	ldrb	r3, [r3, #0]
   2af70:	2b00      	cmp	r3, #0
   2af72:	d007      	beq.n	2af84 <chk_mounted+0xec>
   2af74:	2327      	movs	r3, #39	; 0x27
   2af76:	18fb      	adds	r3, r7, r3
   2af78:	781b      	ldrb	r3, [r3, #0]
   2af7a:	2204      	movs	r2, #4
   2af7c:	4013      	ands	r3, r2
   2af7e:	d001      	beq.n	2af84 <chk_mounted+0xec>
   2af80:	230a      	movs	r3, #10
   2af82:	e25d      	b.n	2b440 <chk_mounted+0x5a8>
   2af84:	2300      	movs	r3, #0
   2af86:	63fb      	str	r3, [r7, #60]	; 0x3c
   2af88:	2347      	movs	r3, #71	; 0x47
   2af8a:	18fc      	adds	r4, r7, r3
   2af8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2af90:	0011      	movs	r1, r2
   2af92:	0018      	movs	r0, r3
   2af94:	4b9b      	ldr	r3, [pc, #620]	; (2b204 <chk_mounted+0x36c>)
   2af96:	4798      	blx	r3
   2af98:	0003      	movs	r3, r0
   2af9a:	7023      	strb	r3, [r4, #0]
   2af9c:	2347      	movs	r3, #71	; 0x47
   2af9e:	18fb      	adds	r3, r7, r3
   2afa0:	781b      	ldrb	r3, [r3, #0]
   2afa2:	2b01      	cmp	r3, #1
   2afa4:	d13b      	bne.n	2b01e <chk_mounted+0x186>
   2afa6:	2346      	movs	r3, #70	; 0x46
   2afa8:	18fb      	adds	r3, r7, r3
   2afaa:	2200      	movs	r2, #0
   2afac:	701a      	strb	r2, [r3, #0]
   2afae:	2346      	movs	r3, #70	; 0x46
   2afb0:	18fb      	adds	r3, r7, r3
   2afb2:	781b      	ldrb	r3, [r3, #0]
   2afb4:	2b00      	cmp	r3, #0
   2afb6:	d006      	beq.n	2afc6 <chk_mounted+0x12e>
   2afb8:	2346      	movs	r3, #70	; 0x46
   2afba:	18fb      	adds	r3, r7, r3
   2afbc:	781a      	ldrb	r2, [r3, #0]
   2afbe:	2346      	movs	r3, #70	; 0x46
   2afc0:	18fb      	adds	r3, r7, r3
   2afc2:	3a01      	subs	r2, #1
   2afc4:	701a      	strb	r2, [r3, #0]
   2afc6:	2346      	movs	r3, #70	; 0x46
   2afc8:	18fb      	adds	r3, r7, r3
   2afca:	781b      	ldrb	r3, [r3, #0]
   2afcc:	011b      	lsls	r3, r3, #4
   2afce:	33bf      	adds	r3, #191	; 0xbf
   2afd0:	33ff      	adds	r3, #255	; 0xff
   2afd2:	3330      	adds	r3, #48	; 0x30
   2afd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2afd6:	18d3      	adds	r3, r2, r3
   2afd8:	623b      	str	r3, [r7, #32]
   2afda:	6a3b      	ldr	r3, [r7, #32]
   2afdc:	3304      	adds	r3, #4
   2afde:	781b      	ldrb	r3, [r3, #0]
   2afe0:	2b00      	cmp	r3, #0
   2afe2:	d01c      	beq.n	2b01e <chk_mounted+0x186>
   2afe4:	6a3b      	ldr	r3, [r7, #32]
   2afe6:	330b      	adds	r3, #11
   2afe8:	781b      	ldrb	r3, [r3, #0]
   2afea:	061a      	lsls	r2, r3, #24
   2afec:	6a3b      	ldr	r3, [r7, #32]
   2afee:	330a      	adds	r3, #10
   2aff0:	781b      	ldrb	r3, [r3, #0]
   2aff2:	041b      	lsls	r3, r3, #16
   2aff4:	4313      	orrs	r3, r2
   2aff6:	6a3a      	ldr	r2, [r7, #32]
   2aff8:	3209      	adds	r2, #9
   2affa:	7812      	ldrb	r2, [r2, #0]
   2affc:	0212      	lsls	r2, r2, #8
   2affe:	4313      	orrs	r3, r2
   2b000:	6a3a      	ldr	r2, [r7, #32]
   2b002:	3208      	adds	r2, #8
   2b004:	7812      	ldrb	r2, [r2, #0]
   2b006:	4313      	orrs	r3, r2
   2b008:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b00a:	2347      	movs	r3, #71	; 0x47
   2b00c:	18fc      	adds	r4, r7, r3
   2b00e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b010:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b012:	0011      	movs	r1, r2
   2b014:	0018      	movs	r0, r3
   2b016:	4b7b      	ldr	r3, [pc, #492]	; (2b204 <chk_mounted+0x36c>)
   2b018:	4798      	blx	r3
   2b01a:	0003      	movs	r3, r0
   2b01c:	7023      	strb	r3, [r4, #0]
   2b01e:	2347      	movs	r3, #71	; 0x47
   2b020:	18fb      	adds	r3, r7, r3
   2b022:	781b      	ldrb	r3, [r3, #0]
   2b024:	2b03      	cmp	r3, #3
   2b026:	d101      	bne.n	2b02c <chk_mounted+0x194>
   2b028:	2301      	movs	r3, #1
   2b02a:	e209      	b.n	2b440 <chk_mounted+0x5a8>
   2b02c:	2347      	movs	r3, #71	; 0x47
   2b02e:	18fb      	adds	r3, r7, r3
   2b030:	781b      	ldrb	r3, [r3, #0]
   2b032:	2b00      	cmp	r3, #0
   2b034:	d001      	beq.n	2b03a <chk_mounted+0x1a2>
   2b036:	230d      	movs	r3, #13
   2b038:	e202      	b.n	2b440 <chk_mounted+0x5a8>
   2b03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b03c:	223c      	movs	r2, #60	; 0x3c
   2b03e:	5c9b      	ldrb	r3, [r3, r2]
   2b040:	021b      	lsls	r3, r3, #8
   2b042:	b21a      	sxth	r2, r3
   2b044:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b046:	213b      	movs	r1, #59	; 0x3b
   2b048:	5c5b      	ldrb	r3, [r3, r1]
   2b04a:	b21b      	sxth	r3, r3
   2b04c:	4313      	orrs	r3, r2
   2b04e:	b21a      	sxth	r2, r3
   2b050:	2380      	movs	r3, #128	; 0x80
   2b052:	009b      	lsls	r3, r3, #2
   2b054:	429a      	cmp	r2, r3
   2b056:	d001      	beq.n	2b05c <chk_mounted+0x1c4>
   2b058:	230d      	movs	r3, #13
   2b05a:	e1f1      	b.n	2b440 <chk_mounted+0x5a8>
   2b05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b05e:	2247      	movs	r2, #71	; 0x47
   2b060:	5c9b      	ldrb	r3, [r3, r2]
   2b062:	021b      	lsls	r3, r3, #8
   2b064:	b21a      	sxth	r2, r3
   2b066:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b068:	2146      	movs	r1, #70	; 0x46
   2b06a:	5c5b      	ldrb	r3, [r3, r1]
   2b06c:	b21b      	sxth	r3, r3
   2b06e:	4313      	orrs	r3, r2
   2b070:	b21b      	sxth	r3, r3
   2b072:	b29b      	uxth	r3, r3
   2b074:	63bb      	str	r3, [r7, #56]	; 0x38
   2b076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2b078:	2b00      	cmp	r3, #0
   2b07a:	d112      	bne.n	2b0a2 <chk_mounted+0x20a>
   2b07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b07e:	2257      	movs	r2, #87	; 0x57
   2b080:	5c9b      	ldrb	r3, [r3, r2]
   2b082:	061a      	lsls	r2, r3, #24
   2b084:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b086:	2156      	movs	r1, #86	; 0x56
   2b088:	5c5b      	ldrb	r3, [r3, r1]
   2b08a:	041b      	lsls	r3, r3, #16
   2b08c:	4313      	orrs	r3, r2
   2b08e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b090:	2155      	movs	r1, #85	; 0x55
   2b092:	5c52      	ldrb	r2, [r2, r1]
   2b094:	0212      	lsls	r2, r2, #8
   2b096:	4313      	orrs	r3, r2
   2b098:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b09a:	2154      	movs	r1, #84	; 0x54
   2b09c:	5c52      	ldrb	r2, [r2, r1]
   2b09e:	4313      	orrs	r3, r2
   2b0a0:	63bb      	str	r3, [r7, #56]	; 0x38
   2b0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b0a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2b0a6:	61da      	str	r2, [r3, #28]
   2b0a8:	231f      	movs	r3, #31
   2b0aa:	18fb      	adds	r3, r7, r3
   2b0ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b0ae:	2140      	movs	r1, #64	; 0x40
   2b0b0:	5c52      	ldrb	r2, [r2, r1]
   2b0b2:	701a      	strb	r2, [r3, #0]
   2b0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b0b6:	221f      	movs	r2, #31
   2b0b8:	18ba      	adds	r2, r7, r2
   2b0ba:	7812      	ldrb	r2, [r2, #0]
   2b0bc:	70da      	strb	r2, [r3, #3]
   2b0be:	231f      	movs	r3, #31
   2b0c0:	18fb      	adds	r3, r7, r3
   2b0c2:	781b      	ldrb	r3, [r3, #0]
   2b0c4:	2b01      	cmp	r3, #1
   2b0c6:	d006      	beq.n	2b0d6 <chk_mounted+0x23e>
   2b0c8:	231f      	movs	r3, #31
   2b0ca:	18fb      	adds	r3, r7, r3
   2b0cc:	781b      	ldrb	r3, [r3, #0]
   2b0ce:	2b02      	cmp	r3, #2
   2b0d0:	d001      	beq.n	2b0d6 <chk_mounted+0x23e>
   2b0d2:	230d      	movs	r3, #13
   2b0d4:	e1b4      	b.n	2b440 <chk_mounted+0x5a8>
   2b0d6:	231f      	movs	r3, #31
   2b0d8:	18fb      	adds	r3, r7, r3
   2b0da:	781a      	ldrb	r2, [r3, #0]
   2b0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2b0de:	4353      	muls	r3, r2
   2b0e0:	63bb      	str	r3, [r7, #56]	; 0x38
   2b0e2:	231f      	movs	r3, #31
   2b0e4:	18fb      	adds	r3, r7, r3
   2b0e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b0e8:	213d      	movs	r1, #61	; 0x3d
   2b0ea:	5c52      	ldrb	r2, [r2, r1]
   2b0ec:	701a      	strb	r2, [r3, #0]
   2b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b0f0:	221f      	movs	r2, #31
   2b0f2:	18ba      	adds	r2, r7, r2
   2b0f4:	7812      	ldrb	r2, [r2, #0]
   2b0f6:	709a      	strb	r2, [r3, #2]
   2b0f8:	231f      	movs	r3, #31
   2b0fa:	18fb      	adds	r3, r7, r3
   2b0fc:	781b      	ldrb	r3, [r3, #0]
   2b0fe:	2b00      	cmp	r3, #0
   2b100:	d008      	beq.n	2b114 <chk_mounted+0x27c>
   2b102:	231f      	movs	r3, #31
   2b104:	18fb      	adds	r3, r7, r3
   2b106:	781b      	ldrb	r3, [r3, #0]
   2b108:	221f      	movs	r2, #31
   2b10a:	18ba      	adds	r2, r7, r2
   2b10c:	7812      	ldrb	r2, [r2, #0]
   2b10e:	3a01      	subs	r2, #1
   2b110:	4013      	ands	r3, r2
   2b112:	d001      	beq.n	2b118 <chk_mounted+0x280>
   2b114:	230d      	movs	r3, #13
   2b116:	e193      	b.n	2b440 <chk_mounted+0x5a8>
   2b118:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b11a:	2242      	movs	r2, #66	; 0x42
   2b11c:	5c9b      	ldrb	r3, [r3, r2]
   2b11e:	021b      	lsls	r3, r3, #8
   2b120:	b21a      	sxth	r2, r3
   2b122:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b124:	2141      	movs	r1, #65	; 0x41
   2b126:	5c5b      	ldrb	r3, [r3, r1]
   2b128:	b21b      	sxth	r3, r3
   2b12a:	4313      	orrs	r3, r2
   2b12c:	b21b      	sxth	r3, r3
   2b12e:	b29a      	uxth	r2, r3
   2b130:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b132:	811a      	strh	r2, [r3, #8]
   2b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b136:	891b      	ldrh	r3, [r3, #8]
   2b138:	220f      	movs	r2, #15
   2b13a:	4013      	ands	r3, r2
   2b13c:	b29b      	uxth	r3, r3
   2b13e:	2b00      	cmp	r3, #0
   2b140:	d001      	beq.n	2b146 <chk_mounted+0x2ae>
   2b142:	230d      	movs	r3, #13
   2b144:	e17c      	b.n	2b440 <chk_mounted+0x5a8>
   2b146:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b148:	2244      	movs	r2, #68	; 0x44
   2b14a:	5c9b      	ldrb	r3, [r3, r2]
   2b14c:	021b      	lsls	r3, r3, #8
   2b14e:	b21a      	sxth	r2, r3
   2b150:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b152:	2143      	movs	r1, #67	; 0x43
   2b154:	5c5b      	ldrb	r3, [r3, r1]
   2b156:	b21b      	sxth	r3, r3
   2b158:	4313      	orrs	r3, r2
   2b15a:	b21b      	sxth	r3, r3
   2b15c:	b29b      	uxth	r3, r3
   2b15e:	637b      	str	r3, [r7, #52]	; 0x34
   2b160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b162:	2b00      	cmp	r3, #0
   2b164:	d112      	bne.n	2b18c <chk_mounted+0x2f4>
   2b166:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b168:	2253      	movs	r2, #83	; 0x53
   2b16a:	5c9b      	ldrb	r3, [r3, r2]
   2b16c:	061a      	lsls	r2, r3, #24
   2b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b170:	2152      	movs	r1, #82	; 0x52
   2b172:	5c5b      	ldrb	r3, [r3, r1]
   2b174:	041b      	lsls	r3, r3, #16
   2b176:	4313      	orrs	r3, r2
   2b178:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b17a:	2151      	movs	r1, #81	; 0x51
   2b17c:	5c52      	ldrb	r2, [r2, r1]
   2b17e:	0212      	lsls	r2, r2, #8
   2b180:	4313      	orrs	r3, r2
   2b182:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b184:	2150      	movs	r1, #80	; 0x50
   2b186:	5c52      	ldrb	r2, [r2, r1]
   2b188:	4313      	orrs	r3, r2
   2b18a:	637b      	str	r3, [r7, #52]	; 0x34
   2b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b18e:	223f      	movs	r2, #63	; 0x3f
   2b190:	5c9b      	ldrb	r3, [r3, r2]
   2b192:	021b      	lsls	r3, r3, #8
   2b194:	b21a      	sxth	r2, r3
   2b196:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b198:	213e      	movs	r1, #62	; 0x3e
   2b19a:	5c5b      	ldrb	r3, [r3, r1]
   2b19c:	b21b      	sxth	r3, r3
   2b19e:	4313      	orrs	r3, r2
   2b1a0:	b21a      	sxth	r2, r3
   2b1a2:	231c      	movs	r3, #28
   2b1a4:	18fb      	adds	r3, r7, r3
   2b1a6:	801a      	strh	r2, [r3, #0]
   2b1a8:	231c      	movs	r3, #28
   2b1aa:	18fb      	adds	r3, r7, r3
   2b1ac:	881b      	ldrh	r3, [r3, #0]
   2b1ae:	2b00      	cmp	r3, #0
   2b1b0:	d101      	bne.n	2b1b6 <chk_mounted+0x31e>
   2b1b2:	230d      	movs	r3, #13
   2b1b4:	e144      	b.n	2b440 <chk_mounted+0x5a8>
   2b1b6:	231c      	movs	r3, #28
   2b1b8:	18fb      	adds	r3, r7, r3
   2b1ba:	881a      	ldrh	r2, [r3, #0]
   2b1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2b1be:	18d3      	adds	r3, r2, r3
   2b1c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b1c2:	8912      	ldrh	r2, [r2, #8]
   2b1c4:	0912      	lsrs	r2, r2, #4
   2b1c6:	b292      	uxth	r2, r2
   2b1c8:	189b      	adds	r3, r3, r2
   2b1ca:	61bb      	str	r3, [r7, #24]
   2b1cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2b1ce:	69bb      	ldr	r3, [r7, #24]
   2b1d0:	429a      	cmp	r2, r3
   2b1d2:	d201      	bcs.n	2b1d8 <chk_mounted+0x340>
   2b1d4:	230d      	movs	r3, #13
   2b1d6:	e133      	b.n	2b440 <chk_mounted+0x5a8>
   2b1d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2b1da:	69bb      	ldr	r3, [r7, #24]
   2b1dc:	1ad2      	subs	r2, r2, r3
   2b1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b1e0:	789b      	ldrb	r3, [r3, #2]
   2b1e2:	0019      	movs	r1, r3
   2b1e4:	4b08      	ldr	r3, [pc, #32]	; (2b208 <chk_mounted+0x370>)
   2b1e6:	0010      	movs	r0, r2
   2b1e8:	4798      	blx	r3
   2b1ea:	0003      	movs	r3, r0
   2b1ec:	617b      	str	r3, [r7, #20]
   2b1ee:	697b      	ldr	r3, [r7, #20]
   2b1f0:	2b00      	cmp	r3, #0
   2b1f2:	d10b      	bne.n	2b20c <chk_mounted+0x374>
   2b1f4:	230d      	movs	r3, #13
   2b1f6:	e123      	b.n	2b440 <chk_mounted+0x5a8>
   2b1f8:	20003d50 	.word	0x20003d50
   2b1fc:	00028ff5 	.word	0x00028ff5
   2b200:	00028f71 	.word	0x00028f71
   2b204:	0002adc5 	.word	0x0002adc5
   2b208:	000304e9 	.word	0x000304e9
   2b20c:	2347      	movs	r3, #71	; 0x47
   2b20e:	18fb      	adds	r3, r7, r3
   2b210:	2201      	movs	r2, #1
   2b212:	701a      	strb	r2, [r3, #0]
   2b214:	697b      	ldr	r3, [r7, #20]
   2b216:	4a8c      	ldr	r2, [pc, #560]	; (2b448 <chk_mounted+0x5b0>)
   2b218:	4293      	cmp	r3, r2
   2b21a:	d903      	bls.n	2b224 <chk_mounted+0x38c>
   2b21c:	2347      	movs	r3, #71	; 0x47
   2b21e:	18fb      	adds	r3, r7, r3
   2b220:	2202      	movs	r2, #2
   2b222:	701a      	strb	r2, [r3, #0]
   2b224:	697b      	ldr	r3, [r7, #20]
   2b226:	4a89      	ldr	r2, [pc, #548]	; (2b44c <chk_mounted+0x5b4>)
   2b228:	4293      	cmp	r3, r2
   2b22a:	d903      	bls.n	2b234 <chk_mounted+0x39c>
   2b22c:	2347      	movs	r3, #71	; 0x47
   2b22e:	18fb      	adds	r3, r7, r3
   2b230:	2203      	movs	r2, #3
   2b232:	701a      	strb	r2, [r3, #0]
   2b234:	697b      	ldr	r3, [r7, #20]
   2b236:	1c9a      	adds	r2, r3, #2
   2b238:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b23a:	619a      	str	r2, [r3, #24]
   2b23c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b23e:	69bb      	ldr	r3, [r7, #24]
   2b240:	18d2      	adds	r2, r2, r3
   2b242:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b244:	629a      	str	r2, [r3, #40]	; 0x28
   2b246:	231c      	movs	r3, #28
   2b248:	18fb      	adds	r3, r7, r3
   2b24a:	881a      	ldrh	r2, [r3, #0]
   2b24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b24e:	18d2      	adds	r2, r2, r3
   2b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b252:	621a      	str	r2, [r3, #32]
   2b254:	2347      	movs	r3, #71	; 0x47
   2b256:	18fb      	adds	r3, r7, r3
   2b258:	781b      	ldrb	r3, [r3, #0]
   2b25a:	2b03      	cmp	r3, #3
   2b25c:	d11e      	bne.n	2b29c <chk_mounted+0x404>
   2b25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b260:	891b      	ldrh	r3, [r3, #8]
   2b262:	2b00      	cmp	r3, #0
   2b264:	d001      	beq.n	2b26a <chk_mounted+0x3d2>
   2b266:	230d      	movs	r3, #13
   2b268:	e0ea      	b.n	2b440 <chk_mounted+0x5a8>
   2b26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b26c:	225f      	movs	r2, #95	; 0x5f
   2b26e:	5c9b      	ldrb	r3, [r3, r2]
   2b270:	061a      	lsls	r2, r3, #24
   2b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b274:	215e      	movs	r1, #94	; 0x5e
   2b276:	5c5b      	ldrb	r3, [r3, r1]
   2b278:	041b      	lsls	r3, r3, #16
   2b27a:	4313      	orrs	r3, r2
   2b27c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b27e:	215d      	movs	r1, #93	; 0x5d
   2b280:	5c52      	ldrb	r2, [r2, r1]
   2b282:	0212      	lsls	r2, r2, #8
   2b284:	4313      	orrs	r3, r2
   2b286:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b288:	215c      	movs	r1, #92	; 0x5c
   2b28a:	5c52      	ldrb	r2, [r2, r1]
   2b28c:	431a      	orrs	r2, r3
   2b28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b290:	625a      	str	r2, [r3, #36]	; 0x24
   2b292:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b294:	699b      	ldr	r3, [r3, #24]
   2b296:	009b      	lsls	r3, r3, #2
   2b298:	633b      	str	r3, [r7, #48]	; 0x30
   2b29a:	e020      	b.n	2b2de <chk_mounted+0x446>
   2b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b29e:	891b      	ldrh	r3, [r3, #8]
   2b2a0:	2b00      	cmp	r3, #0
   2b2a2:	d101      	bne.n	2b2a8 <chk_mounted+0x410>
   2b2a4:	230d      	movs	r3, #13
   2b2a6:	e0cb      	b.n	2b440 <chk_mounted+0x5a8>
   2b2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2aa:	6a1a      	ldr	r2, [r3, #32]
   2b2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2b2ae:	18d2      	adds	r2, r2, r3
   2b2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2b2:	625a      	str	r2, [r3, #36]	; 0x24
   2b2b4:	2347      	movs	r3, #71	; 0x47
   2b2b6:	18fb      	adds	r3, r7, r3
   2b2b8:	781b      	ldrb	r3, [r3, #0]
   2b2ba:	2b02      	cmp	r3, #2
   2b2bc:	d103      	bne.n	2b2c6 <chk_mounted+0x42e>
   2b2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2c0:	699b      	ldr	r3, [r3, #24]
   2b2c2:	005b      	lsls	r3, r3, #1
   2b2c4:	e00a      	b.n	2b2dc <chk_mounted+0x444>
   2b2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2c8:	699a      	ldr	r2, [r3, #24]
   2b2ca:	0013      	movs	r3, r2
   2b2cc:	005b      	lsls	r3, r3, #1
   2b2ce:	189b      	adds	r3, r3, r2
   2b2d0:	085a      	lsrs	r2, r3, #1
   2b2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2d4:	699b      	ldr	r3, [r3, #24]
   2b2d6:	2101      	movs	r1, #1
   2b2d8:	400b      	ands	r3, r1
   2b2da:	18d3      	adds	r3, r2, r3
   2b2dc:	633b      	str	r3, [r7, #48]	; 0x30
   2b2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2e0:	69da      	ldr	r2, [r3, #28]
   2b2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2b2e4:	495a      	ldr	r1, [pc, #360]	; (2b450 <chk_mounted+0x5b8>)
   2b2e6:	468c      	mov	ip, r1
   2b2e8:	4463      	add	r3, ip
   2b2ea:	0a5b      	lsrs	r3, r3, #9
   2b2ec:	429a      	cmp	r2, r3
   2b2ee:	d201      	bcs.n	2b2f4 <chk_mounted+0x45c>
   2b2f0:	230d      	movs	r3, #13
   2b2f2:	e0a5      	b.n	2b440 <chk_mounted+0x5a8>
   2b2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2f6:	2201      	movs	r2, #1
   2b2f8:	4252      	negs	r2, r2
   2b2fa:	611a      	str	r2, [r3, #16]
   2b2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b2fe:	2200      	movs	r2, #0
   2b300:	60da      	str	r2, [r3, #12]
   2b302:	2347      	movs	r3, #71	; 0x47
   2b304:	18fb      	adds	r3, r7, r3
   2b306:	781b      	ldrb	r3, [r3, #0]
   2b308:	2b03      	cmp	r3, #3
   2b30a:	d000      	beq.n	2b30e <chk_mounted+0x476>
   2b30c:	e082      	b.n	2b414 <chk_mounted+0x57c>
   2b30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b310:	2200      	movs	r2, #0
   2b312:	715a      	strb	r2, [r3, #5]
   2b314:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b316:	2261      	movs	r2, #97	; 0x61
   2b318:	5c9b      	ldrb	r3, [r3, r2]
   2b31a:	021b      	lsls	r3, r3, #8
   2b31c:	b21a      	sxth	r2, r3
   2b31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b320:	2160      	movs	r1, #96	; 0x60
   2b322:	5c5b      	ldrb	r3, [r3, r1]
   2b324:	b21b      	sxth	r3, r3
   2b326:	4313      	orrs	r3, r2
   2b328:	b21b      	sxth	r3, r3
   2b32a:	b29b      	uxth	r3, r3
   2b32c:	001a      	movs	r2, r3
   2b32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b330:	18d2      	adds	r2, r2, r3
   2b332:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b334:	615a      	str	r2, [r3, #20]
   2b336:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b338:	7858      	ldrb	r0, [r3, #1]
   2b33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b33c:	3330      	adds	r3, #48	; 0x30
   2b33e:	0019      	movs	r1, r3
   2b340:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b342:	695a      	ldr	r2, [r3, #20]
   2b344:	2301      	movs	r3, #1
   2b346:	4c43      	ldr	r4, [pc, #268]	; (2b454 <chk_mounted+0x5bc>)
   2b348:	47a0      	blx	r4
   2b34a:	1e03      	subs	r3, r0, #0
   2b34c:	d162      	bne.n	2b414 <chk_mounted+0x57c>
   2b34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b350:	4a41      	ldr	r2, [pc, #260]	; (2b458 <chk_mounted+0x5c0>)
   2b352:	5c9b      	ldrb	r3, [r3, r2]
   2b354:	021b      	lsls	r3, r3, #8
   2b356:	b21a      	sxth	r2, r3
   2b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b35a:	4940      	ldr	r1, [pc, #256]	; (2b45c <chk_mounted+0x5c4>)
   2b35c:	5c5b      	ldrb	r3, [r3, r1]
   2b35e:	b21b      	sxth	r3, r3
   2b360:	4313      	orrs	r3, r2
   2b362:	b21b      	sxth	r3, r3
   2b364:	4a3e      	ldr	r2, [pc, #248]	; (2b460 <chk_mounted+0x5c8>)
   2b366:	4293      	cmp	r3, r2
   2b368:	d154      	bne.n	2b414 <chk_mounted+0x57c>
   2b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b36c:	2233      	movs	r2, #51	; 0x33
   2b36e:	5c9b      	ldrb	r3, [r3, r2]
   2b370:	061a      	lsls	r2, r3, #24
   2b372:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b374:	2132      	movs	r1, #50	; 0x32
   2b376:	5c5b      	ldrb	r3, [r3, r1]
   2b378:	041b      	lsls	r3, r3, #16
   2b37a:	4313      	orrs	r3, r2
   2b37c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b37e:	2131      	movs	r1, #49	; 0x31
   2b380:	5c52      	ldrb	r2, [r2, r1]
   2b382:	0212      	lsls	r2, r2, #8
   2b384:	4313      	orrs	r3, r2
   2b386:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b388:	2130      	movs	r1, #48	; 0x30
   2b38a:	5c52      	ldrb	r2, [r2, r1]
   2b38c:	4313      	orrs	r3, r2
   2b38e:	4a35      	ldr	r2, [pc, #212]	; (2b464 <chk_mounted+0x5cc>)
   2b390:	4293      	cmp	r3, r2
   2b392:	d13f      	bne.n	2b414 <chk_mounted+0x57c>
   2b394:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b396:	4a34      	ldr	r2, [pc, #208]	; (2b468 <chk_mounted+0x5d0>)
   2b398:	5c9b      	ldrb	r3, [r3, r2]
   2b39a:	061a      	lsls	r2, r3, #24
   2b39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b39e:	4933      	ldr	r1, [pc, #204]	; (2b46c <chk_mounted+0x5d4>)
   2b3a0:	5c5b      	ldrb	r3, [r3, r1]
   2b3a2:	041b      	lsls	r3, r3, #16
   2b3a4:	4313      	orrs	r3, r2
   2b3a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b3a8:	4931      	ldr	r1, [pc, #196]	; (2b470 <chk_mounted+0x5d8>)
   2b3aa:	5c52      	ldrb	r2, [r2, r1]
   2b3ac:	0212      	lsls	r2, r2, #8
   2b3ae:	4313      	orrs	r3, r2
   2b3b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2b3b2:	2285      	movs	r2, #133	; 0x85
   2b3b4:	0092      	lsls	r2, r2, #2
   2b3b6:	5c8a      	ldrb	r2, [r1, r2]
   2b3b8:	4313      	orrs	r3, r2
   2b3ba:	4a2e      	ldr	r2, [pc, #184]	; (2b474 <chk_mounted+0x5dc>)
   2b3bc:	4293      	cmp	r3, r2
   2b3be:	d129      	bne.n	2b414 <chk_mounted+0x57c>
   2b3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b3c2:	4a2d      	ldr	r2, [pc, #180]	; (2b478 <chk_mounted+0x5e0>)
   2b3c4:	5c9b      	ldrb	r3, [r3, r2]
   2b3c6:	061a      	lsls	r2, r3, #24
   2b3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b3ca:	492c      	ldr	r1, [pc, #176]	; (2b47c <chk_mounted+0x5e4>)
   2b3cc:	5c5b      	ldrb	r3, [r3, r1]
   2b3ce:	041b      	lsls	r3, r3, #16
   2b3d0:	4313      	orrs	r3, r2
   2b3d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b3d4:	492a      	ldr	r1, [pc, #168]	; (2b480 <chk_mounted+0x5e8>)
   2b3d6:	5c52      	ldrb	r2, [r2, r1]
   2b3d8:	0212      	lsls	r2, r2, #8
   2b3da:	4313      	orrs	r3, r2
   2b3dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2b3de:	2287      	movs	r2, #135	; 0x87
   2b3e0:	0092      	lsls	r2, r2, #2
   2b3e2:	5c8a      	ldrb	r2, [r1, r2]
   2b3e4:	431a      	orrs	r2, r3
   2b3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b3e8:	60da      	str	r2, [r3, #12]
   2b3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b3ec:	4a25      	ldr	r2, [pc, #148]	; (2b484 <chk_mounted+0x5ec>)
   2b3ee:	5c9b      	ldrb	r3, [r3, r2]
   2b3f0:	061a      	lsls	r2, r3, #24
   2b3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b3f4:	4924      	ldr	r1, [pc, #144]	; (2b488 <chk_mounted+0x5f0>)
   2b3f6:	5c5b      	ldrb	r3, [r3, r1]
   2b3f8:	041b      	lsls	r3, r3, #16
   2b3fa:	4313      	orrs	r3, r2
   2b3fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b3fe:	4923      	ldr	r1, [pc, #140]	; (2b48c <chk_mounted+0x5f4>)
   2b400:	5c52      	ldrb	r2, [r2, r1]
   2b402:	0212      	lsls	r2, r2, #8
   2b404:	4313      	orrs	r3, r2
   2b406:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2b408:	2286      	movs	r2, #134	; 0x86
   2b40a:	0092      	lsls	r2, r2, #2
   2b40c:	5c8a      	ldrb	r2, [r1, r2]
   2b40e:	431a      	orrs	r2, r3
   2b410:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b412:	611a      	str	r2, [r3, #16]
   2b414:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b416:	2247      	movs	r2, #71	; 0x47
   2b418:	18ba      	adds	r2, r7, r2
   2b41a:	7812      	ldrb	r2, [r2, #0]
   2b41c:	701a      	strb	r2, [r3, #0]
   2b41e:	4b1c      	ldr	r3, [pc, #112]	; (2b490 <chk_mounted+0x5f8>)
   2b420:	881b      	ldrh	r3, [r3, #0]
   2b422:	3301      	adds	r3, #1
   2b424:	b29a      	uxth	r2, r3
   2b426:	4b1a      	ldr	r3, [pc, #104]	; (2b490 <chk_mounted+0x5f8>)
   2b428:	801a      	strh	r2, [r3, #0]
   2b42a:	4b19      	ldr	r3, [pc, #100]	; (2b490 <chk_mounted+0x5f8>)
   2b42c:	881a      	ldrh	r2, [r3, #0]
   2b42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b430:	80da      	strh	r2, [r3, #6]
   2b432:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b434:	2200      	movs	r2, #0
   2b436:	62da      	str	r2, [r3, #44]	; 0x2c
   2b438:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b43a:	2200      	movs	r2, #0
   2b43c:	711a      	strb	r2, [r3, #4]
   2b43e:	2300      	movs	r3, #0
   2b440:	0018      	movs	r0, r3
   2b442:	46bd      	mov	sp, r7
   2b444:	b013      	add	sp, #76	; 0x4c
   2b446:	bd90      	pop	{r4, r7, pc}
   2b448:	00000ff5 	.word	0x00000ff5
   2b44c:	0000fff5 	.word	0x0000fff5
   2b450:	000001ff 	.word	0x000001ff
   2b454:	0002902d 	.word	0x0002902d
   2b458:	0000022f 	.word	0x0000022f
   2b45c:	0000022e 	.word	0x0000022e
   2b460:	ffffaa55 	.word	0xffffaa55
   2b464:	41615252 	.word	0x41615252
   2b468:	00000217 	.word	0x00000217
   2b46c:	00000216 	.word	0x00000216
   2b470:	00000215 	.word	0x00000215
   2b474:	61417272 	.word	0x61417272
   2b478:	0000021f 	.word	0x0000021f
   2b47c:	0000021e 	.word	0x0000021e
   2b480:	0000021d 	.word	0x0000021d
   2b484:	0000021b 	.word	0x0000021b
   2b488:	0000021a 	.word	0x0000021a
   2b48c:	00000219 	.word	0x00000219
   2b490:	20003d70 	.word	0x20003d70

0002b494 <validate>:
   2b494:	b580      	push	{r7, lr}
   2b496:	b082      	sub	sp, #8
   2b498:	af00      	add	r7, sp, #0
   2b49a:	6078      	str	r0, [r7, #4]
   2b49c:	000a      	movs	r2, r1
   2b49e:	1cbb      	adds	r3, r7, #2
   2b4a0:	801a      	strh	r2, [r3, #0]
   2b4a2:	687b      	ldr	r3, [r7, #4]
   2b4a4:	2b00      	cmp	r3, #0
   2b4a6:	d009      	beq.n	2b4bc <validate+0x28>
   2b4a8:	687b      	ldr	r3, [r7, #4]
   2b4aa:	781b      	ldrb	r3, [r3, #0]
   2b4ac:	2b00      	cmp	r3, #0
   2b4ae:	d005      	beq.n	2b4bc <validate+0x28>
   2b4b0:	687b      	ldr	r3, [r7, #4]
   2b4b2:	88db      	ldrh	r3, [r3, #6]
   2b4b4:	1cba      	adds	r2, r7, #2
   2b4b6:	8812      	ldrh	r2, [r2, #0]
   2b4b8:	429a      	cmp	r2, r3
   2b4ba:	d001      	beq.n	2b4c0 <validate+0x2c>
   2b4bc:	2309      	movs	r3, #9
   2b4be:	e00c      	b.n	2b4da <validate+0x46>
   2b4c0:	687b      	ldr	r3, [r7, #4]
   2b4c2:	785b      	ldrb	r3, [r3, #1]
   2b4c4:	0018      	movs	r0, r3
   2b4c6:	4b07      	ldr	r3, [pc, #28]	; (2b4e4 <validate+0x50>)
   2b4c8:	4798      	blx	r3
   2b4ca:	0003      	movs	r3, r0
   2b4cc:	001a      	movs	r2, r3
   2b4ce:	2301      	movs	r3, #1
   2b4d0:	4013      	ands	r3, r2
   2b4d2:	d001      	beq.n	2b4d8 <validate+0x44>
   2b4d4:	2303      	movs	r3, #3
   2b4d6:	e000      	b.n	2b4da <validate+0x46>
   2b4d8:	2300      	movs	r3, #0
   2b4da:	0018      	movs	r0, r3
   2b4dc:	46bd      	mov	sp, r7
   2b4de:	b002      	add	sp, #8
   2b4e0:	bd80      	pop	{r7, pc}
   2b4e2:	46c0      	nop			; (mov r8, r8)
   2b4e4:	00028ff5 	.word	0x00028ff5

0002b4e8 <f_mount>:
   2b4e8:	b580      	push	{r7, lr}
   2b4ea:	b084      	sub	sp, #16
   2b4ec:	af00      	add	r7, sp, #0
   2b4ee:	0002      	movs	r2, r0
   2b4f0:	6039      	str	r1, [r7, #0]
   2b4f2:	1dfb      	adds	r3, r7, #7
   2b4f4:	701a      	strb	r2, [r3, #0]
   2b4f6:	1dfb      	adds	r3, r7, #7
   2b4f8:	781b      	ldrb	r3, [r3, #0]
   2b4fa:	2b07      	cmp	r3, #7
   2b4fc:	d901      	bls.n	2b502 <f_mount+0x1a>
   2b4fe:	230b      	movs	r3, #11
   2b500:	e018      	b.n	2b534 <f_mount+0x4c>
   2b502:	1dfb      	adds	r3, r7, #7
   2b504:	781a      	ldrb	r2, [r3, #0]
   2b506:	4b0d      	ldr	r3, [pc, #52]	; (2b53c <f_mount+0x54>)
   2b508:	0092      	lsls	r2, r2, #2
   2b50a:	58d3      	ldr	r3, [r2, r3]
   2b50c:	60fb      	str	r3, [r7, #12]
   2b50e:	68fb      	ldr	r3, [r7, #12]
   2b510:	2b00      	cmp	r3, #0
   2b512:	d002      	beq.n	2b51a <f_mount+0x32>
   2b514:	68fb      	ldr	r3, [r7, #12]
   2b516:	2200      	movs	r2, #0
   2b518:	701a      	strb	r2, [r3, #0]
   2b51a:	683b      	ldr	r3, [r7, #0]
   2b51c:	2b00      	cmp	r3, #0
   2b51e:	d002      	beq.n	2b526 <f_mount+0x3e>
   2b520:	683b      	ldr	r3, [r7, #0]
   2b522:	2200      	movs	r2, #0
   2b524:	701a      	strb	r2, [r3, #0]
   2b526:	1dfb      	adds	r3, r7, #7
   2b528:	781a      	ldrb	r2, [r3, #0]
   2b52a:	4b04      	ldr	r3, [pc, #16]	; (2b53c <f_mount+0x54>)
   2b52c:	0092      	lsls	r2, r2, #2
   2b52e:	6839      	ldr	r1, [r7, #0]
   2b530:	50d1      	str	r1, [r2, r3]
   2b532:	2300      	movs	r3, #0
   2b534:	0018      	movs	r0, r3
   2b536:	46bd      	mov	sp, r7
   2b538:	b004      	add	sp, #16
   2b53a:	bd80      	pop	{r7, pc}
   2b53c:	20003d50 	.word	0x20003d50

0002b540 <f_open>:
   2b540:	b590      	push	{r4, r7, lr}
   2b542:	4ce5      	ldr	r4, [pc, #916]	; (2b8d8 <f_open+0x398>)
   2b544:	44a5      	add	sp, r4
   2b546:	af00      	add	r7, sp, #0
   2b548:	60f8      	str	r0, [r7, #12]
   2b54a:	60b9      	str	r1, [r7, #8]
   2b54c:	4be3      	ldr	r3, [pc, #908]	; (2b8dc <f_open+0x39c>)
   2b54e:	2194      	movs	r1, #148	; 0x94
   2b550:	0089      	lsls	r1, r1, #2
   2b552:	468c      	mov	ip, r1
   2b554:	44bc      	add	ip, r7
   2b556:	4463      	add	r3, ip
   2b558:	701a      	strb	r2, [r3, #0]
   2b55a:	68fb      	ldr	r3, [r7, #12]
   2b55c:	2200      	movs	r2, #0
   2b55e:	601a      	str	r2, [r3, #0]
   2b560:	4bde      	ldr	r3, [pc, #888]	; (2b8dc <f_open+0x39c>)
   2b562:	2294      	movs	r2, #148	; 0x94
   2b564:	0092      	lsls	r2, r2, #2
   2b566:	4694      	mov	ip, r2
   2b568:	44bc      	add	ip, r7
   2b56a:	4463      	add	r3, ip
   2b56c:	4adb      	ldr	r2, [pc, #876]	; (2b8dc <f_open+0x39c>)
   2b56e:	2194      	movs	r1, #148	; 0x94
   2b570:	0089      	lsls	r1, r1, #2
   2b572:	468c      	mov	ip, r1
   2b574:	44bc      	add	ip, r7
   2b576:	4462      	add	r2, ip
   2b578:	7812      	ldrb	r2, [r2, #0]
   2b57a:	211f      	movs	r1, #31
   2b57c:	400a      	ands	r2, r1
   2b57e:	701a      	strb	r2, [r3, #0]
   2b580:	4bd6      	ldr	r3, [pc, #856]	; (2b8dc <f_open+0x39c>)
   2b582:	2294      	movs	r2, #148	; 0x94
   2b584:	0092      	lsls	r2, r2, #2
   2b586:	4694      	mov	ip, r2
   2b588:	44bc      	add	ip, r7
   2b58a:	4463      	add	r3, ip
   2b58c:	781b      	ldrb	r3, [r3, #0]
   2b58e:	2201      	movs	r2, #1
   2b590:	4393      	bics	r3, r2
   2b592:	b2da      	uxtb	r2, r3
   2b594:	4bd2      	ldr	r3, [pc, #840]	; (2b8e0 <f_open+0x3a0>)
   2b596:	18fc      	adds	r4, r7, r3
   2b598:	2387      	movs	r3, #135	; 0x87
   2b59a:	009b      	lsls	r3, r3, #2
   2b59c:	18f9      	adds	r1, r7, r3
   2b59e:	2308      	movs	r3, #8
   2b5a0:	18fb      	adds	r3, r7, r3
   2b5a2:	0018      	movs	r0, r3
   2b5a4:	4bcf      	ldr	r3, [pc, #828]	; (2b8e4 <f_open+0x3a4>)
   2b5a6:	4798      	blx	r3
   2b5a8:	0003      	movs	r3, r0
   2b5aa:	7023      	strb	r3, [r4, #0]
   2b5ac:	2387      	movs	r3, #135	; 0x87
   2b5ae:	009b      	lsls	r3, r3, #2
   2b5b0:	18fb      	adds	r3, r7, r3
   2b5b2:	2284      	movs	r2, #132	; 0x84
   2b5b4:	0092      	lsls	r2, r2, #2
   2b5b6:	18ba      	adds	r2, r7, r2
   2b5b8:	619a      	str	r2, [r3, #24]
   2b5ba:	2387      	movs	r3, #135	; 0x87
   2b5bc:	009b      	lsls	r3, r3, #2
   2b5be:	18fb      	adds	r3, r7, r3
   2b5c0:	2210      	movs	r2, #16
   2b5c2:	18ba      	adds	r2, r7, r2
   2b5c4:	61da      	str	r2, [r3, #28]
   2b5c6:	4bc6      	ldr	r3, [pc, #792]	; (2b8e0 <f_open+0x3a0>)
   2b5c8:	18fb      	adds	r3, r7, r3
   2b5ca:	781b      	ldrb	r3, [r3, #0]
   2b5cc:	2b00      	cmp	r3, #0
   2b5ce:	d10b      	bne.n	2b5e8 <f_open+0xa8>
   2b5d0:	68ba      	ldr	r2, [r7, #8]
   2b5d2:	4bc3      	ldr	r3, [pc, #780]	; (2b8e0 <f_open+0x3a0>)
   2b5d4:	18fc      	adds	r4, r7, r3
   2b5d6:	2387      	movs	r3, #135	; 0x87
   2b5d8:	009b      	lsls	r3, r3, #2
   2b5da:	18fb      	adds	r3, r7, r3
   2b5dc:	0011      	movs	r1, r2
   2b5de:	0018      	movs	r0, r3
   2b5e0:	4bc1      	ldr	r3, [pc, #772]	; (2b8e8 <f_open+0x3a8>)
   2b5e2:	4798      	blx	r3
   2b5e4:	0003      	movs	r3, r0
   2b5e6:	7023      	strb	r3, [r4, #0]
   2b5e8:	2387      	movs	r3, #135	; 0x87
   2b5ea:	009b      	lsls	r3, r3, #2
   2b5ec:	18fb      	adds	r3, r7, r3
   2b5ee:	695b      	ldr	r3, [r3, #20]
   2b5f0:	2292      	movs	r2, #146	; 0x92
   2b5f2:	0092      	lsls	r2, r2, #2
   2b5f4:	18ba      	adds	r2, r7, r2
   2b5f6:	6013      	str	r3, [r2, #0]
   2b5f8:	4bb9      	ldr	r3, [pc, #740]	; (2b8e0 <f_open+0x3a0>)
   2b5fa:	18fb      	adds	r3, r7, r3
   2b5fc:	781b      	ldrb	r3, [r3, #0]
   2b5fe:	2b00      	cmp	r3, #0
   2b600:	d109      	bne.n	2b616 <f_open+0xd6>
   2b602:	2392      	movs	r3, #146	; 0x92
   2b604:	009b      	lsls	r3, r3, #2
   2b606:	18fb      	adds	r3, r7, r3
   2b608:	681b      	ldr	r3, [r3, #0]
   2b60a:	2b00      	cmp	r3, #0
   2b60c:	d103      	bne.n	2b616 <f_open+0xd6>
   2b60e:	4bb4      	ldr	r3, [pc, #720]	; (2b8e0 <f_open+0x3a0>)
   2b610:	18fb      	adds	r3, r7, r3
   2b612:	2206      	movs	r2, #6
   2b614:	701a      	strb	r2, [r3, #0]
   2b616:	4bb1      	ldr	r3, [pc, #708]	; (2b8dc <f_open+0x39c>)
   2b618:	2294      	movs	r2, #148	; 0x94
   2b61a:	0092      	lsls	r2, r2, #2
   2b61c:	4694      	mov	ip, r2
   2b61e:	44bc      	add	ip, r7
   2b620:	4463      	add	r3, ip
   2b622:	781b      	ldrb	r3, [r3, #0]
   2b624:	221c      	movs	r2, #28
   2b626:	4013      	ands	r3, r2
   2b628:	d100      	bne.n	2b62c <f_open+0xec>
   2b62a:	e141      	b.n	2b8b0 <f_open+0x370>
   2b62c:	4bac      	ldr	r3, [pc, #688]	; (2b8e0 <f_open+0x3a0>)
   2b62e:	18fb      	adds	r3, r7, r3
   2b630:	781b      	ldrb	r3, [r3, #0]
   2b632:	2b00      	cmp	r3, #0
   2b634:	d027      	beq.n	2b686 <f_open+0x146>
   2b636:	4baa      	ldr	r3, [pc, #680]	; (2b8e0 <f_open+0x3a0>)
   2b638:	18fb      	adds	r3, r7, r3
   2b63a:	781b      	ldrb	r3, [r3, #0]
   2b63c:	2b04      	cmp	r3, #4
   2b63e:	d109      	bne.n	2b654 <f_open+0x114>
   2b640:	4ba7      	ldr	r3, [pc, #668]	; (2b8e0 <f_open+0x3a0>)
   2b642:	18fc      	adds	r4, r7, r3
   2b644:	2387      	movs	r3, #135	; 0x87
   2b646:	009b      	lsls	r3, r3, #2
   2b648:	18fb      	adds	r3, r7, r3
   2b64a:	0018      	movs	r0, r3
   2b64c:	4ba7      	ldr	r3, [pc, #668]	; (2b8ec <f_open+0x3ac>)
   2b64e:	4798      	blx	r3
   2b650:	0003      	movs	r3, r0
   2b652:	7023      	strb	r3, [r4, #0]
   2b654:	4ba1      	ldr	r3, [pc, #644]	; (2b8dc <f_open+0x39c>)
   2b656:	2294      	movs	r2, #148	; 0x94
   2b658:	0092      	lsls	r2, r2, #2
   2b65a:	4694      	mov	ip, r2
   2b65c:	44bc      	add	ip, r7
   2b65e:	4463      	add	r3, ip
   2b660:	4a9e      	ldr	r2, [pc, #632]	; (2b8dc <f_open+0x39c>)
   2b662:	2194      	movs	r1, #148	; 0x94
   2b664:	0089      	lsls	r1, r1, #2
   2b666:	468c      	mov	ip, r1
   2b668:	44bc      	add	ip, r7
   2b66a:	4462      	add	r2, ip
   2b66c:	7812      	ldrb	r2, [r2, #0]
   2b66e:	2108      	movs	r1, #8
   2b670:	430a      	orrs	r2, r1
   2b672:	701a      	strb	r2, [r3, #0]
   2b674:	2387      	movs	r3, #135	; 0x87
   2b676:	009b      	lsls	r3, r3, #2
   2b678:	18fb      	adds	r3, r7, r3
   2b67a:	695b      	ldr	r3, [r3, #20]
   2b67c:	2292      	movs	r2, #146	; 0x92
   2b67e:	0092      	lsls	r2, r2, #2
   2b680:	18ba      	adds	r2, r7, r2
   2b682:	6013      	str	r3, [r2, #0]
   2b684:	e01c      	b.n	2b6c0 <f_open+0x180>
   2b686:	2392      	movs	r3, #146	; 0x92
   2b688:	009b      	lsls	r3, r3, #2
   2b68a:	18fb      	adds	r3, r7, r3
   2b68c:	681b      	ldr	r3, [r3, #0]
   2b68e:	330b      	adds	r3, #11
   2b690:	781b      	ldrb	r3, [r3, #0]
   2b692:	001a      	movs	r2, r3
   2b694:	2311      	movs	r3, #17
   2b696:	4013      	ands	r3, r2
   2b698:	d004      	beq.n	2b6a4 <f_open+0x164>
   2b69a:	4b91      	ldr	r3, [pc, #580]	; (2b8e0 <f_open+0x3a0>)
   2b69c:	18fb      	adds	r3, r7, r3
   2b69e:	2207      	movs	r2, #7
   2b6a0:	701a      	strb	r2, [r3, #0]
   2b6a2:	e00d      	b.n	2b6c0 <f_open+0x180>
   2b6a4:	4b8d      	ldr	r3, [pc, #564]	; (2b8dc <f_open+0x39c>)
   2b6a6:	2294      	movs	r2, #148	; 0x94
   2b6a8:	0092      	lsls	r2, r2, #2
   2b6aa:	4694      	mov	ip, r2
   2b6ac:	44bc      	add	ip, r7
   2b6ae:	4463      	add	r3, ip
   2b6b0:	781b      	ldrb	r3, [r3, #0]
   2b6b2:	2204      	movs	r2, #4
   2b6b4:	4013      	ands	r3, r2
   2b6b6:	d003      	beq.n	2b6c0 <f_open+0x180>
   2b6b8:	4b89      	ldr	r3, [pc, #548]	; (2b8e0 <f_open+0x3a0>)
   2b6ba:	18fb      	adds	r3, r7, r3
   2b6bc:	2208      	movs	r2, #8
   2b6be:	701a      	strb	r2, [r3, #0]
   2b6c0:	4b87      	ldr	r3, [pc, #540]	; (2b8e0 <f_open+0x3a0>)
   2b6c2:	18fb      	adds	r3, r7, r3
   2b6c4:	781b      	ldrb	r3, [r3, #0]
   2b6c6:	2b00      	cmp	r3, #0
   2b6c8:	d000      	beq.n	2b6cc <f_open+0x18c>
   2b6ca:	e12f      	b.n	2b92c <f_open+0x3ec>
   2b6cc:	4b83      	ldr	r3, [pc, #524]	; (2b8dc <f_open+0x39c>)
   2b6ce:	2294      	movs	r2, #148	; 0x94
   2b6d0:	0092      	lsls	r2, r2, #2
   2b6d2:	4694      	mov	ip, r2
   2b6d4:	44bc      	add	ip, r7
   2b6d6:	4463      	add	r3, ip
   2b6d8:	781b      	ldrb	r3, [r3, #0]
   2b6da:	2208      	movs	r2, #8
   2b6dc:	4013      	ands	r3, r2
   2b6de:	d100      	bne.n	2b6e2 <f_open+0x1a2>
   2b6e0:	e124      	b.n	2b92c <f_open+0x3ec>
   2b6e2:	4b83      	ldr	r3, [pc, #524]	; (2b8f0 <f_open+0x3b0>)
   2b6e4:	4798      	blx	r3
   2b6e6:	0003      	movs	r3, r0
   2b6e8:	2291      	movs	r2, #145	; 0x91
   2b6ea:	0092      	lsls	r2, r2, #2
   2b6ec:	18ba      	adds	r2, r7, r2
   2b6ee:	6013      	str	r3, [r2, #0]
   2b6f0:	2392      	movs	r3, #146	; 0x92
   2b6f2:	009b      	lsls	r3, r3, #2
   2b6f4:	18fb      	adds	r3, r7, r3
   2b6f6:	681b      	ldr	r3, [r3, #0]
   2b6f8:	330e      	adds	r3, #14
   2b6fa:	2291      	movs	r2, #145	; 0x91
   2b6fc:	0092      	lsls	r2, r2, #2
   2b6fe:	18ba      	adds	r2, r7, r2
   2b700:	6812      	ldr	r2, [r2, #0]
   2b702:	b2d2      	uxtb	r2, r2
   2b704:	701a      	strb	r2, [r3, #0]
   2b706:	2392      	movs	r3, #146	; 0x92
   2b708:	009b      	lsls	r3, r3, #2
   2b70a:	18fb      	adds	r3, r7, r3
   2b70c:	681b      	ldr	r3, [r3, #0]
   2b70e:	330f      	adds	r3, #15
   2b710:	2291      	movs	r2, #145	; 0x91
   2b712:	0092      	lsls	r2, r2, #2
   2b714:	18ba      	adds	r2, r7, r2
   2b716:	6812      	ldr	r2, [r2, #0]
   2b718:	b292      	uxth	r2, r2
   2b71a:	0a12      	lsrs	r2, r2, #8
   2b71c:	b292      	uxth	r2, r2
   2b71e:	b2d2      	uxtb	r2, r2
   2b720:	701a      	strb	r2, [r3, #0]
   2b722:	2392      	movs	r3, #146	; 0x92
   2b724:	009b      	lsls	r3, r3, #2
   2b726:	18fb      	adds	r3, r7, r3
   2b728:	681b      	ldr	r3, [r3, #0]
   2b72a:	3310      	adds	r3, #16
   2b72c:	2291      	movs	r2, #145	; 0x91
   2b72e:	0092      	lsls	r2, r2, #2
   2b730:	18ba      	adds	r2, r7, r2
   2b732:	6812      	ldr	r2, [r2, #0]
   2b734:	0c12      	lsrs	r2, r2, #16
   2b736:	b2d2      	uxtb	r2, r2
   2b738:	701a      	strb	r2, [r3, #0]
   2b73a:	2392      	movs	r3, #146	; 0x92
   2b73c:	009b      	lsls	r3, r3, #2
   2b73e:	18fb      	adds	r3, r7, r3
   2b740:	681b      	ldr	r3, [r3, #0]
   2b742:	3311      	adds	r3, #17
   2b744:	2291      	movs	r2, #145	; 0x91
   2b746:	0092      	lsls	r2, r2, #2
   2b748:	18ba      	adds	r2, r7, r2
   2b74a:	6812      	ldr	r2, [r2, #0]
   2b74c:	0e12      	lsrs	r2, r2, #24
   2b74e:	b2d2      	uxtb	r2, r2
   2b750:	701a      	strb	r2, [r3, #0]
   2b752:	2392      	movs	r3, #146	; 0x92
   2b754:	009b      	lsls	r3, r3, #2
   2b756:	18fb      	adds	r3, r7, r3
   2b758:	681b      	ldr	r3, [r3, #0]
   2b75a:	330b      	adds	r3, #11
   2b75c:	2200      	movs	r2, #0
   2b75e:	701a      	strb	r2, [r3, #0]
   2b760:	2392      	movs	r3, #146	; 0x92
   2b762:	009b      	lsls	r3, r3, #2
   2b764:	18fb      	adds	r3, r7, r3
   2b766:	681b      	ldr	r3, [r3, #0]
   2b768:	331c      	adds	r3, #28
   2b76a:	2200      	movs	r2, #0
   2b76c:	701a      	strb	r2, [r3, #0]
   2b76e:	2392      	movs	r3, #146	; 0x92
   2b770:	009b      	lsls	r3, r3, #2
   2b772:	18fb      	adds	r3, r7, r3
   2b774:	681b      	ldr	r3, [r3, #0]
   2b776:	331d      	adds	r3, #29
   2b778:	2200      	movs	r2, #0
   2b77a:	701a      	strb	r2, [r3, #0]
   2b77c:	2392      	movs	r3, #146	; 0x92
   2b77e:	009b      	lsls	r3, r3, #2
   2b780:	18fb      	adds	r3, r7, r3
   2b782:	681b      	ldr	r3, [r3, #0]
   2b784:	331e      	adds	r3, #30
   2b786:	2200      	movs	r2, #0
   2b788:	701a      	strb	r2, [r3, #0]
   2b78a:	2392      	movs	r3, #146	; 0x92
   2b78c:	009b      	lsls	r3, r3, #2
   2b78e:	18fb      	adds	r3, r7, r3
   2b790:	681b      	ldr	r3, [r3, #0]
   2b792:	331f      	adds	r3, #31
   2b794:	2200      	movs	r2, #0
   2b796:	701a      	strb	r2, [r3, #0]
   2b798:	2392      	movs	r3, #146	; 0x92
   2b79a:	009b      	lsls	r3, r3, #2
   2b79c:	18fb      	adds	r3, r7, r3
   2b79e:	681b      	ldr	r3, [r3, #0]
   2b7a0:	3315      	adds	r3, #21
   2b7a2:	781b      	ldrb	r3, [r3, #0]
   2b7a4:	021b      	lsls	r3, r3, #8
   2b7a6:	b21a      	sxth	r2, r3
   2b7a8:	2392      	movs	r3, #146	; 0x92
   2b7aa:	009b      	lsls	r3, r3, #2
   2b7ac:	18fb      	adds	r3, r7, r3
   2b7ae:	681b      	ldr	r3, [r3, #0]
   2b7b0:	3314      	adds	r3, #20
   2b7b2:	781b      	ldrb	r3, [r3, #0]
   2b7b4:	b21b      	sxth	r3, r3
   2b7b6:	4313      	orrs	r3, r2
   2b7b8:	b21b      	sxth	r3, r3
   2b7ba:	b29b      	uxth	r3, r3
   2b7bc:	041b      	lsls	r3, r3, #16
   2b7be:	2292      	movs	r2, #146	; 0x92
   2b7c0:	0092      	lsls	r2, r2, #2
   2b7c2:	18ba      	adds	r2, r7, r2
   2b7c4:	6812      	ldr	r2, [r2, #0]
   2b7c6:	321b      	adds	r2, #27
   2b7c8:	7812      	ldrb	r2, [r2, #0]
   2b7ca:	0212      	lsls	r2, r2, #8
   2b7cc:	b211      	sxth	r1, r2
   2b7ce:	2292      	movs	r2, #146	; 0x92
   2b7d0:	0092      	lsls	r2, r2, #2
   2b7d2:	18ba      	adds	r2, r7, r2
   2b7d4:	6812      	ldr	r2, [r2, #0]
   2b7d6:	321a      	adds	r2, #26
   2b7d8:	7812      	ldrb	r2, [r2, #0]
   2b7da:	b212      	sxth	r2, r2
   2b7dc:	430a      	orrs	r2, r1
   2b7de:	b212      	sxth	r2, r2
   2b7e0:	b292      	uxth	r2, r2
   2b7e2:	4313      	orrs	r3, r2
   2b7e4:	2290      	movs	r2, #144	; 0x90
   2b7e6:	0092      	lsls	r2, r2, #2
   2b7e8:	18ba      	adds	r2, r7, r2
   2b7ea:	6013      	str	r3, [r2, #0]
   2b7ec:	2392      	movs	r3, #146	; 0x92
   2b7ee:	009b      	lsls	r3, r3, #2
   2b7f0:	18fb      	adds	r3, r7, r3
   2b7f2:	681b      	ldr	r3, [r3, #0]
   2b7f4:	331a      	adds	r3, #26
   2b7f6:	2200      	movs	r2, #0
   2b7f8:	701a      	strb	r2, [r3, #0]
   2b7fa:	2392      	movs	r3, #146	; 0x92
   2b7fc:	009b      	lsls	r3, r3, #2
   2b7fe:	18fb      	adds	r3, r7, r3
   2b800:	681b      	ldr	r3, [r3, #0]
   2b802:	331b      	adds	r3, #27
   2b804:	2200      	movs	r2, #0
   2b806:	701a      	strb	r2, [r3, #0]
   2b808:	2392      	movs	r3, #146	; 0x92
   2b80a:	009b      	lsls	r3, r3, #2
   2b80c:	18fb      	adds	r3, r7, r3
   2b80e:	681b      	ldr	r3, [r3, #0]
   2b810:	3314      	adds	r3, #20
   2b812:	2200      	movs	r2, #0
   2b814:	701a      	strb	r2, [r3, #0]
   2b816:	2392      	movs	r3, #146	; 0x92
   2b818:	009b      	lsls	r3, r3, #2
   2b81a:	18fb      	adds	r3, r7, r3
   2b81c:	681b      	ldr	r3, [r3, #0]
   2b81e:	3315      	adds	r3, #21
   2b820:	2200      	movs	r2, #0
   2b822:	701a      	strb	r2, [r3, #0]
   2b824:	2387      	movs	r3, #135	; 0x87
   2b826:	009b      	lsls	r3, r3, #2
   2b828:	18fb      	adds	r3, r7, r3
   2b82a:	681b      	ldr	r3, [r3, #0]
   2b82c:	2201      	movs	r2, #1
   2b82e:	711a      	strb	r2, [r3, #4]
   2b830:	2390      	movs	r3, #144	; 0x90
   2b832:	009b      	lsls	r3, r3, #2
   2b834:	18fb      	adds	r3, r7, r3
   2b836:	681b      	ldr	r3, [r3, #0]
   2b838:	2b00      	cmp	r3, #0
   2b83a:	d100      	bne.n	2b83e <f_open+0x2fe>
   2b83c:	e076      	b.n	2b92c <f_open+0x3ec>
   2b83e:	2387      	movs	r3, #135	; 0x87
   2b840:	009b      	lsls	r3, r3, #2
   2b842:	18fb      	adds	r3, r7, r3
   2b844:	681b      	ldr	r3, [r3, #0]
   2b846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b848:	2291      	movs	r2, #145	; 0x91
   2b84a:	0092      	lsls	r2, r2, #2
   2b84c:	18ba      	adds	r2, r7, r2
   2b84e:	6013      	str	r3, [r2, #0]
   2b850:	2387      	movs	r3, #135	; 0x87
   2b852:	009b      	lsls	r3, r3, #2
   2b854:	18fb      	adds	r3, r7, r3
   2b856:	681b      	ldr	r3, [r3, #0]
   2b858:	4a21      	ldr	r2, [pc, #132]	; (2b8e0 <f_open+0x3a0>)
   2b85a:	18bc      	adds	r4, r7, r2
   2b85c:	2290      	movs	r2, #144	; 0x90
   2b85e:	0092      	lsls	r2, r2, #2
   2b860:	18ba      	adds	r2, r7, r2
   2b862:	6812      	ldr	r2, [r2, #0]
   2b864:	0011      	movs	r1, r2
   2b866:	0018      	movs	r0, r3
   2b868:	4b22      	ldr	r3, [pc, #136]	; (2b8f4 <f_open+0x3b4>)
   2b86a:	4798      	blx	r3
   2b86c:	0003      	movs	r3, r0
   2b86e:	7023      	strb	r3, [r4, #0]
   2b870:	4b1b      	ldr	r3, [pc, #108]	; (2b8e0 <f_open+0x3a0>)
   2b872:	18fb      	adds	r3, r7, r3
   2b874:	781b      	ldrb	r3, [r3, #0]
   2b876:	2b00      	cmp	r3, #0
   2b878:	d158      	bne.n	2b92c <f_open+0x3ec>
   2b87a:	2387      	movs	r3, #135	; 0x87
   2b87c:	009b      	lsls	r3, r3, #2
   2b87e:	18fb      	adds	r3, r7, r3
   2b880:	681b      	ldr	r3, [r3, #0]
   2b882:	2290      	movs	r2, #144	; 0x90
   2b884:	0092      	lsls	r2, r2, #2
   2b886:	18ba      	adds	r2, r7, r2
   2b888:	6812      	ldr	r2, [r2, #0]
   2b88a:	3a01      	subs	r2, #1
   2b88c:	60da      	str	r2, [r3, #12]
   2b88e:	2387      	movs	r3, #135	; 0x87
   2b890:	009b      	lsls	r3, r3, #2
   2b892:	18fb      	adds	r3, r7, r3
   2b894:	681b      	ldr	r3, [r3, #0]
   2b896:	4a12      	ldr	r2, [pc, #72]	; (2b8e0 <f_open+0x3a0>)
   2b898:	18bc      	adds	r4, r7, r2
   2b89a:	2291      	movs	r2, #145	; 0x91
   2b89c:	0092      	lsls	r2, r2, #2
   2b89e:	18ba      	adds	r2, r7, r2
   2b8a0:	6812      	ldr	r2, [r2, #0]
   2b8a2:	0011      	movs	r1, r2
   2b8a4:	0018      	movs	r0, r3
   2b8a6:	4b14      	ldr	r3, [pc, #80]	; (2b8f8 <f_open+0x3b8>)
   2b8a8:	4798      	blx	r3
   2b8aa:	0003      	movs	r3, r0
   2b8ac:	7023      	strb	r3, [r4, #0]
   2b8ae:	e03d      	b.n	2b92c <f_open+0x3ec>
   2b8b0:	4b0b      	ldr	r3, [pc, #44]	; (2b8e0 <f_open+0x3a0>)
   2b8b2:	18fb      	adds	r3, r7, r3
   2b8b4:	781b      	ldrb	r3, [r3, #0]
   2b8b6:	2b00      	cmp	r3, #0
   2b8b8:	d138      	bne.n	2b92c <f_open+0x3ec>
   2b8ba:	2392      	movs	r3, #146	; 0x92
   2b8bc:	009b      	lsls	r3, r3, #2
   2b8be:	18fb      	adds	r3, r7, r3
   2b8c0:	681b      	ldr	r3, [r3, #0]
   2b8c2:	330b      	adds	r3, #11
   2b8c4:	781b      	ldrb	r3, [r3, #0]
   2b8c6:	001a      	movs	r2, r3
   2b8c8:	2310      	movs	r3, #16
   2b8ca:	4013      	ands	r3, r2
   2b8cc:	d016      	beq.n	2b8fc <f_open+0x3bc>
   2b8ce:	4b04      	ldr	r3, [pc, #16]	; (2b8e0 <f_open+0x3a0>)
   2b8d0:	18fb      	adds	r3, r7, r3
   2b8d2:	2204      	movs	r2, #4
   2b8d4:	701a      	strb	r2, [r3, #0]
   2b8d6:	e029      	b.n	2b92c <f_open+0x3ec>
   2b8d8:	fffffdac 	.word	0xfffffdac
   2b8dc:	fffffdb7 	.word	0xfffffdb7
   2b8e0:	0000024f 	.word	0x0000024f
   2b8e4:	0002ae99 	.word	0x0002ae99
   2b8e8:	0002ac8d 	.word	0x0002ac8d
   2b8ec:	0002a4dd 	.word	0x0002a4dd
   2b8f0:	000292d5 	.word	0x000292d5
   2b8f4:	00029a59 	.word	0x00029a59
   2b8f8:	00029419 	.word	0x00029419
   2b8fc:	4b5a      	ldr	r3, [pc, #360]	; (2ba68 <f_open+0x528>)
   2b8fe:	2294      	movs	r2, #148	; 0x94
   2b900:	0092      	lsls	r2, r2, #2
   2b902:	4694      	mov	ip, r2
   2b904:	44bc      	add	ip, r7
   2b906:	4463      	add	r3, ip
   2b908:	781b      	ldrb	r3, [r3, #0]
   2b90a:	2202      	movs	r2, #2
   2b90c:	4013      	ands	r3, r2
   2b90e:	d00d      	beq.n	2b92c <f_open+0x3ec>
   2b910:	2392      	movs	r3, #146	; 0x92
   2b912:	009b      	lsls	r3, r3, #2
   2b914:	18fb      	adds	r3, r7, r3
   2b916:	681b      	ldr	r3, [r3, #0]
   2b918:	330b      	adds	r3, #11
   2b91a:	781b      	ldrb	r3, [r3, #0]
   2b91c:	001a      	movs	r2, r3
   2b91e:	2301      	movs	r3, #1
   2b920:	4013      	ands	r3, r2
   2b922:	d003      	beq.n	2b92c <f_open+0x3ec>
   2b924:	4b51      	ldr	r3, [pc, #324]	; (2ba6c <f_open+0x52c>)
   2b926:	18fb      	adds	r3, r7, r3
   2b928:	2207      	movs	r2, #7
   2b92a:	701a      	strb	r2, [r3, #0]
   2b92c:	4b4f      	ldr	r3, [pc, #316]	; (2ba6c <f_open+0x52c>)
   2b92e:	18fb      	adds	r3, r7, r3
   2b930:	781b      	ldrb	r3, [r3, #0]
   2b932:	2b00      	cmp	r3, #0
   2b934:	d126      	bne.n	2b984 <f_open+0x444>
   2b936:	4b4c      	ldr	r3, [pc, #304]	; (2ba68 <f_open+0x528>)
   2b938:	2294      	movs	r2, #148	; 0x94
   2b93a:	0092      	lsls	r2, r2, #2
   2b93c:	4694      	mov	ip, r2
   2b93e:	44bc      	add	ip, r7
   2b940:	4463      	add	r3, ip
   2b942:	781b      	ldrb	r3, [r3, #0]
   2b944:	2208      	movs	r2, #8
   2b946:	4013      	ands	r3, r2
   2b948:	d00f      	beq.n	2b96a <f_open+0x42a>
   2b94a:	4b47      	ldr	r3, [pc, #284]	; (2ba68 <f_open+0x528>)
   2b94c:	2294      	movs	r2, #148	; 0x94
   2b94e:	0092      	lsls	r2, r2, #2
   2b950:	4694      	mov	ip, r2
   2b952:	44bc      	add	ip, r7
   2b954:	4463      	add	r3, ip
   2b956:	4a44      	ldr	r2, [pc, #272]	; (2ba68 <f_open+0x528>)
   2b958:	2194      	movs	r1, #148	; 0x94
   2b95a:	0089      	lsls	r1, r1, #2
   2b95c:	468c      	mov	ip, r1
   2b95e:	44bc      	add	ip, r7
   2b960:	4462      	add	r2, ip
   2b962:	7812      	ldrb	r2, [r2, #0]
   2b964:	2120      	movs	r1, #32
   2b966:	430a      	orrs	r2, r1
   2b968:	701a      	strb	r2, [r3, #0]
   2b96a:	2387      	movs	r3, #135	; 0x87
   2b96c:	009b      	lsls	r3, r3, #2
   2b96e:	18fb      	adds	r3, r7, r3
   2b970:	681b      	ldr	r3, [r3, #0]
   2b972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2b974:	68fb      	ldr	r3, [r7, #12]
   2b976:	61da      	str	r2, [r3, #28]
   2b978:	68fb      	ldr	r3, [r7, #12]
   2b97a:	2292      	movs	r2, #146	; 0x92
   2b97c:	0092      	lsls	r2, r2, #2
   2b97e:	18ba      	adds	r2, r7, r2
   2b980:	6812      	ldr	r2, [r2, #0]
   2b982:	621a      	str	r2, [r3, #32]
   2b984:	4b39      	ldr	r3, [pc, #228]	; (2ba6c <f_open+0x52c>)
   2b986:	18fb      	adds	r3, r7, r3
   2b988:	781b      	ldrb	r3, [r3, #0]
   2b98a:	2b00      	cmp	r3, #0
   2b98c:	d163      	bne.n	2ba56 <f_open+0x516>
   2b98e:	68fb      	ldr	r3, [r7, #12]
   2b990:	4a35      	ldr	r2, [pc, #212]	; (2ba68 <f_open+0x528>)
   2b992:	2194      	movs	r1, #148	; 0x94
   2b994:	0089      	lsls	r1, r1, #2
   2b996:	468c      	mov	ip, r1
   2b998:	44bc      	add	ip, r7
   2b99a:	4462      	add	r2, ip
   2b99c:	7812      	ldrb	r2, [r2, #0]
   2b99e:	719a      	strb	r2, [r3, #6]
   2b9a0:	2392      	movs	r3, #146	; 0x92
   2b9a2:	009b      	lsls	r3, r3, #2
   2b9a4:	18fb      	adds	r3, r7, r3
   2b9a6:	681b      	ldr	r3, [r3, #0]
   2b9a8:	3315      	adds	r3, #21
   2b9aa:	781b      	ldrb	r3, [r3, #0]
   2b9ac:	021b      	lsls	r3, r3, #8
   2b9ae:	b21a      	sxth	r2, r3
   2b9b0:	2392      	movs	r3, #146	; 0x92
   2b9b2:	009b      	lsls	r3, r3, #2
   2b9b4:	18fb      	adds	r3, r7, r3
   2b9b6:	681b      	ldr	r3, [r3, #0]
   2b9b8:	3314      	adds	r3, #20
   2b9ba:	781b      	ldrb	r3, [r3, #0]
   2b9bc:	b21b      	sxth	r3, r3
   2b9be:	4313      	orrs	r3, r2
   2b9c0:	b21b      	sxth	r3, r3
   2b9c2:	b29b      	uxth	r3, r3
   2b9c4:	041b      	lsls	r3, r3, #16
   2b9c6:	2292      	movs	r2, #146	; 0x92
   2b9c8:	0092      	lsls	r2, r2, #2
   2b9ca:	18ba      	adds	r2, r7, r2
   2b9cc:	6812      	ldr	r2, [r2, #0]
   2b9ce:	321b      	adds	r2, #27
   2b9d0:	7812      	ldrb	r2, [r2, #0]
   2b9d2:	0212      	lsls	r2, r2, #8
   2b9d4:	b211      	sxth	r1, r2
   2b9d6:	2292      	movs	r2, #146	; 0x92
   2b9d8:	0092      	lsls	r2, r2, #2
   2b9da:	18ba      	adds	r2, r7, r2
   2b9dc:	6812      	ldr	r2, [r2, #0]
   2b9de:	321a      	adds	r2, #26
   2b9e0:	7812      	ldrb	r2, [r2, #0]
   2b9e2:	b212      	sxth	r2, r2
   2b9e4:	430a      	orrs	r2, r1
   2b9e6:	b212      	sxth	r2, r2
   2b9e8:	b292      	uxth	r2, r2
   2b9ea:	431a      	orrs	r2, r3
   2b9ec:	68fb      	ldr	r3, [r7, #12]
   2b9ee:	611a      	str	r2, [r3, #16]
   2b9f0:	2392      	movs	r3, #146	; 0x92
   2b9f2:	009b      	lsls	r3, r3, #2
   2b9f4:	18fb      	adds	r3, r7, r3
   2b9f6:	681b      	ldr	r3, [r3, #0]
   2b9f8:	331f      	adds	r3, #31
   2b9fa:	781b      	ldrb	r3, [r3, #0]
   2b9fc:	061a      	lsls	r2, r3, #24
   2b9fe:	2392      	movs	r3, #146	; 0x92
   2ba00:	009b      	lsls	r3, r3, #2
   2ba02:	18fb      	adds	r3, r7, r3
   2ba04:	681b      	ldr	r3, [r3, #0]
   2ba06:	331e      	adds	r3, #30
   2ba08:	781b      	ldrb	r3, [r3, #0]
   2ba0a:	041b      	lsls	r3, r3, #16
   2ba0c:	4313      	orrs	r3, r2
   2ba0e:	2292      	movs	r2, #146	; 0x92
   2ba10:	0092      	lsls	r2, r2, #2
   2ba12:	18ba      	adds	r2, r7, r2
   2ba14:	6812      	ldr	r2, [r2, #0]
   2ba16:	321d      	adds	r2, #29
   2ba18:	7812      	ldrb	r2, [r2, #0]
   2ba1a:	0212      	lsls	r2, r2, #8
   2ba1c:	4313      	orrs	r3, r2
   2ba1e:	2292      	movs	r2, #146	; 0x92
   2ba20:	0092      	lsls	r2, r2, #2
   2ba22:	18ba      	adds	r2, r7, r2
   2ba24:	6812      	ldr	r2, [r2, #0]
   2ba26:	321c      	adds	r2, #28
   2ba28:	7812      	ldrb	r2, [r2, #0]
   2ba2a:	431a      	orrs	r2, r3
   2ba2c:	68fb      	ldr	r3, [r7, #12]
   2ba2e:	60da      	str	r2, [r3, #12]
   2ba30:	68fb      	ldr	r3, [r7, #12]
   2ba32:	2200      	movs	r2, #0
   2ba34:	609a      	str	r2, [r3, #8]
   2ba36:	68fb      	ldr	r3, [r7, #12]
   2ba38:	2200      	movs	r2, #0
   2ba3a:	619a      	str	r2, [r3, #24]
   2ba3c:	2387      	movs	r3, #135	; 0x87
   2ba3e:	009b      	lsls	r3, r3, #2
   2ba40:	18fb      	adds	r3, r7, r3
   2ba42:	681a      	ldr	r2, [r3, #0]
   2ba44:	68fb      	ldr	r3, [r7, #12]
   2ba46:	601a      	str	r2, [r3, #0]
   2ba48:	2387      	movs	r3, #135	; 0x87
   2ba4a:	009b      	lsls	r3, r3, #2
   2ba4c:	18fb      	adds	r3, r7, r3
   2ba4e:	681b      	ldr	r3, [r3, #0]
   2ba50:	88da      	ldrh	r2, [r3, #6]
   2ba52:	68fb      	ldr	r3, [r7, #12]
   2ba54:	809a      	strh	r2, [r3, #4]
   2ba56:	4b05      	ldr	r3, [pc, #20]	; (2ba6c <f_open+0x52c>)
   2ba58:	18fb      	adds	r3, r7, r3
   2ba5a:	781b      	ldrb	r3, [r3, #0]
   2ba5c:	0018      	movs	r0, r3
   2ba5e:	46bd      	mov	sp, r7
   2ba60:	2395      	movs	r3, #149	; 0x95
   2ba62:	009b      	lsls	r3, r3, #2
   2ba64:	449d      	add	sp, r3
   2ba66:	bd90      	pop	{r4, r7, pc}
   2ba68:	fffffdb7 	.word	0xfffffdb7
   2ba6c:	0000024f 	.word	0x0000024f

0002ba70 <f_write>:
   2ba70:	b590      	push	{r4, r7, lr}
   2ba72:	b08b      	sub	sp, #44	; 0x2c
   2ba74:	af00      	add	r7, sp, #0
   2ba76:	60f8      	str	r0, [r7, #12]
   2ba78:	60b9      	str	r1, [r7, #8]
   2ba7a:	607a      	str	r2, [r7, #4]
   2ba7c:	603b      	str	r3, [r7, #0]
   2ba7e:	68bb      	ldr	r3, [r7, #8]
   2ba80:	61bb      	str	r3, [r7, #24]
   2ba82:	683b      	ldr	r3, [r7, #0]
   2ba84:	2200      	movs	r2, #0
   2ba86:	601a      	str	r2, [r3, #0]
   2ba88:	68fb      	ldr	r3, [r7, #12]
   2ba8a:	681a      	ldr	r2, [r3, #0]
   2ba8c:	68fb      	ldr	r3, [r7, #12]
   2ba8e:	889b      	ldrh	r3, [r3, #4]
   2ba90:	2117      	movs	r1, #23
   2ba92:	187c      	adds	r4, r7, r1
   2ba94:	0019      	movs	r1, r3
   2ba96:	0010      	movs	r0, r2
   2ba98:	4bc3      	ldr	r3, [pc, #780]	; (2bda8 <f_write+0x338>)
   2ba9a:	4798      	blx	r3
   2ba9c:	0003      	movs	r3, r0
   2ba9e:	7023      	strb	r3, [r4, #0]
   2baa0:	2317      	movs	r3, #23
   2baa2:	18fb      	adds	r3, r7, r3
   2baa4:	781b      	ldrb	r3, [r3, #0]
   2baa6:	2b00      	cmp	r3, #0
   2baa8:	d003      	beq.n	2bab2 <f_write+0x42>
   2baaa:	2317      	movs	r3, #23
   2baac:	18fb      	adds	r3, r7, r3
   2baae:	781b      	ldrb	r3, [r3, #0]
   2bab0:	e176      	b.n	2bda0 <f_write+0x330>
   2bab2:	68fb      	ldr	r3, [r7, #12]
   2bab4:	799b      	ldrb	r3, [r3, #6]
   2bab6:	b25b      	sxtb	r3, r3
   2bab8:	2b00      	cmp	r3, #0
   2baba:	da01      	bge.n	2bac0 <f_write+0x50>
   2babc:	2302      	movs	r3, #2
   2babe:	e16f      	b.n	2bda0 <f_write+0x330>
   2bac0:	68fb      	ldr	r3, [r7, #12]
   2bac2:	799b      	ldrb	r3, [r3, #6]
   2bac4:	001a      	movs	r2, r3
   2bac6:	2302      	movs	r3, #2
   2bac8:	4013      	ands	r3, r2
   2baca:	d101      	bne.n	2bad0 <f_write+0x60>
   2bacc:	2307      	movs	r3, #7
   2bace:	e167      	b.n	2bda0 <f_write+0x330>
   2bad0:	68fb      	ldr	r3, [r7, #12]
   2bad2:	68da      	ldr	r2, [r3, #12]
   2bad4:	687b      	ldr	r3, [r7, #4]
   2bad6:	18d2      	adds	r2, r2, r3
   2bad8:	68fb      	ldr	r3, [r7, #12]
   2bada:	68db      	ldr	r3, [r3, #12]
   2badc:	429a      	cmp	r2, r3
   2bade:	d300      	bcc.n	2bae2 <f_write+0x72>
   2bae0:	e146      	b.n	2bd70 <f_write+0x300>
   2bae2:	2300      	movs	r3, #0
   2bae4:	607b      	str	r3, [r7, #4]
   2bae6:	e143      	b.n	2bd70 <f_write+0x300>
   2bae8:	68fb      	ldr	r3, [r7, #12]
   2baea:	689b      	ldr	r3, [r3, #8]
   2baec:	05db      	lsls	r3, r3, #23
   2baee:	0ddb      	lsrs	r3, r3, #23
   2baf0:	d000      	beq.n	2baf4 <f_write+0x84>
   2baf2:	e0f6      	b.n	2bce2 <f_write+0x272>
   2baf4:	68fb      	ldr	r3, [r7, #12]
   2baf6:	689b      	ldr	r3, [r3, #8]
   2baf8:	0a5b      	lsrs	r3, r3, #9
   2bafa:	b2da      	uxtb	r2, r3
   2bafc:	68fb      	ldr	r3, [r7, #12]
   2bafe:	681b      	ldr	r3, [r3, #0]
   2bb00:	789b      	ldrb	r3, [r3, #2]
   2bb02:	3b01      	subs	r3, #1
   2bb04:	b2d9      	uxtb	r1, r3
   2bb06:	2316      	movs	r3, #22
   2bb08:	18fb      	adds	r3, r7, r3
   2bb0a:	400a      	ands	r2, r1
   2bb0c:	701a      	strb	r2, [r3, #0]
   2bb0e:	2316      	movs	r3, #22
   2bb10:	18fb      	adds	r3, r7, r3
   2bb12:	781b      	ldrb	r3, [r3, #0]
   2bb14:	2b00      	cmp	r3, #0
   2bb16:	d140      	bne.n	2bb9a <f_write+0x12a>
   2bb18:	68fb      	ldr	r3, [r7, #12]
   2bb1a:	689b      	ldr	r3, [r3, #8]
   2bb1c:	2b00      	cmp	r3, #0
   2bb1e:	d111      	bne.n	2bb44 <f_write+0xd4>
   2bb20:	68fb      	ldr	r3, [r7, #12]
   2bb22:	691b      	ldr	r3, [r3, #16]
   2bb24:	627b      	str	r3, [r7, #36]	; 0x24
   2bb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bb28:	2b00      	cmp	r3, #0
   2bb2a:	d115      	bne.n	2bb58 <f_write+0xe8>
   2bb2c:	68fb      	ldr	r3, [r7, #12]
   2bb2e:	681b      	ldr	r3, [r3, #0]
   2bb30:	2100      	movs	r1, #0
   2bb32:	0018      	movs	r0, r3
   2bb34:	4b9d      	ldr	r3, [pc, #628]	; (2bdac <f_write+0x33c>)
   2bb36:	4798      	blx	r3
   2bb38:	0003      	movs	r3, r0
   2bb3a:	627b      	str	r3, [r7, #36]	; 0x24
   2bb3c:	68fb      	ldr	r3, [r7, #12]
   2bb3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2bb40:	611a      	str	r2, [r3, #16]
   2bb42:	e009      	b.n	2bb58 <f_write+0xe8>
   2bb44:	68fb      	ldr	r3, [r7, #12]
   2bb46:	681a      	ldr	r2, [r3, #0]
   2bb48:	68fb      	ldr	r3, [r7, #12]
   2bb4a:	695b      	ldr	r3, [r3, #20]
   2bb4c:	0019      	movs	r1, r3
   2bb4e:	0010      	movs	r0, r2
   2bb50:	4b96      	ldr	r3, [pc, #600]	; (2bdac <f_write+0x33c>)
   2bb52:	4798      	blx	r3
   2bb54:	0003      	movs	r3, r0
   2bb56:	627b      	str	r3, [r7, #36]	; 0x24
   2bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bb5a:	2b00      	cmp	r3, #0
   2bb5c:	d100      	bne.n	2bb60 <f_write+0xf0>
   2bb5e:	e10c      	b.n	2bd7a <f_write+0x30a>
   2bb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bb62:	2b01      	cmp	r3, #1
   2bb64:	d109      	bne.n	2bb7a <f_write+0x10a>
   2bb66:	68fb      	ldr	r3, [r7, #12]
   2bb68:	799b      	ldrb	r3, [r3, #6]
   2bb6a:	2280      	movs	r2, #128	; 0x80
   2bb6c:	4252      	negs	r2, r2
   2bb6e:	4313      	orrs	r3, r2
   2bb70:	b2da      	uxtb	r2, r3
   2bb72:	68fb      	ldr	r3, [r7, #12]
   2bb74:	719a      	strb	r2, [r3, #6]
   2bb76:	2302      	movs	r3, #2
   2bb78:	e112      	b.n	2bda0 <f_write+0x330>
   2bb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bb7c:	3301      	adds	r3, #1
   2bb7e:	d109      	bne.n	2bb94 <f_write+0x124>
   2bb80:	68fb      	ldr	r3, [r7, #12]
   2bb82:	799b      	ldrb	r3, [r3, #6]
   2bb84:	2280      	movs	r2, #128	; 0x80
   2bb86:	4252      	negs	r2, r2
   2bb88:	4313      	orrs	r3, r2
   2bb8a:	b2da      	uxtb	r2, r3
   2bb8c:	68fb      	ldr	r3, [r7, #12]
   2bb8e:	719a      	strb	r2, [r3, #6]
   2bb90:	2301      	movs	r3, #1
   2bb92:	e105      	b.n	2bda0 <f_write+0x330>
   2bb94:	68fb      	ldr	r3, [r7, #12]
   2bb96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2bb98:	615a      	str	r2, [r3, #20]
   2bb9a:	68fb      	ldr	r3, [r7, #12]
   2bb9c:	681b      	ldr	r3, [r3, #0]
   2bb9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2bba0:	68fb      	ldr	r3, [r7, #12]
   2bba2:	699b      	ldr	r3, [r3, #24]
   2bba4:	429a      	cmp	r2, r3
   2bba6:	d111      	bne.n	2bbcc <f_write+0x15c>
   2bba8:	68fb      	ldr	r3, [r7, #12]
   2bbaa:	681b      	ldr	r3, [r3, #0]
   2bbac:	2100      	movs	r1, #0
   2bbae:	0018      	movs	r0, r3
   2bbb0:	4b7f      	ldr	r3, [pc, #508]	; (2bdb0 <f_write+0x340>)
   2bbb2:	4798      	blx	r3
   2bbb4:	1e03      	subs	r3, r0, #0
   2bbb6:	d009      	beq.n	2bbcc <f_write+0x15c>
   2bbb8:	68fb      	ldr	r3, [r7, #12]
   2bbba:	799b      	ldrb	r3, [r3, #6]
   2bbbc:	2280      	movs	r2, #128	; 0x80
   2bbbe:	4252      	negs	r2, r2
   2bbc0:	4313      	orrs	r3, r2
   2bbc2:	b2da      	uxtb	r2, r3
   2bbc4:	68fb      	ldr	r3, [r7, #12]
   2bbc6:	719a      	strb	r2, [r3, #6]
   2bbc8:	2301      	movs	r3, #1
   2bbca:	e0e9      	b.n	2bda0 <f_write+0x330>
   2bbcc:	68fb      	ldr	r3, [r7, #12]
   2bbce:	681a      	ldr	r2, [r3, #0]
   2bbd0:	68fb      	ldr	r3, [r7, #12]
   2bbd2:	695b      	ldr	r3, [r3, #20]
   2bbd4:	0019      	movs	r1, r3
   2bbd6:	0010      	movs	r0, r2
   2bbd8:	4b76      	ldr	r3, [pc, #472]	; (2bdb4 <f_write+0x344>)
   2bbda:	4798      	blx	r3
   2bbdc:	0003      	movs	r3, r0
   2bbde:	613b      	str	r3, [r7, #16]
   2bbe0:	693b      	ldr	r3, [r7, #16]
   2bbe2:	2b00      	cmp	r3, #0
   2bbe4:	d109      	bne.n	2bbfa <f_write+0x18a>
   2bbe6:	68fb      	ldr	r3, [r7, #12]
   2bbe8:	799b      	ldrb	r3, [r3, #6]
   2bbea:	2280      	movs	r2, #128	; 0x80
   2bbec:	4252      	negs	r2, r2
   2bbee:	4313      	orrs	r3, r2
   2bbf0:	b2da      	uxtb	r2, r3
   2bbf2:	68fb      	ldr	r3, [r7, #12]
   2bbf4:	719a      	strb	r2, [r3, #6]
   2bbf6:	2302      	movs	r3, #2
   2bbf8:	e0d2      	b.n	2bda0 <f_write+0x330>
   2bbfa:	2316      	movs	r3, #22
   2bbfc:	18fb      	adds	r3, r7, r3
   2bbfe:	781b      	ldrb	r3, [r3, #0]
   2bc00:	693a      	ldr	r2, [r7, #16]
   2bc02:	18d3      	adds	r3, r2, r3
   2bc04:	613b      	str	r3, [r7, #16]
   2bc06:	687b      	ldr	r3, [r7, #4]
   2bc08:	0a5b      	lsrs	r3, r3, #9
   2bc0a:	61fb      	str	r3, [r7, #28]
   2bc0c:	69fb      	ldr	r3, [r7, #28]
   2bc0e:	2b00      	cmp	r3, #0
   2bc10:	d048      	beq.n	2bca4 <f_write+0x234>
   2bc12:	2316      	movs	r3, #22
   2bc14:	18fb      	adds	r3, r7, r3
   2bc16:	781a      	ldrb	r2, [r3, #0]
   2bc18:	69fb      	ldr	r3, [r7, #28]
   2bc1a:	18d2      	adds	r2, r2, r3
   2bc1c:	68fb      	ldr	r3, [r7, #12]
   2bc1e:	681b      	ldr	r3, [r3, #0]
   2bc20:	789b      	ldrb	r3, [r3, #2]
   2bc22:	429a      	cmp	r2, r3
   2bc24:	d908      	bls.n	2bc38 <f_write+0x1c8>
   2bc26:	68fb      	ldr	r3, [r7, #12]
   2bc28:	681b      	ldr	r3, [r3, #0]
   2bc2a:	789b      	ldrb	r3, [r3, #2]
   2bc2c:	001a      	movs	r2, r3
   2bc2e:	2316      	movs	r3, #22
   2bc30:	18fb      	adds	r3, r7, r3
   2bc32:	781b      	ldrb	r3, [r3, #0]
   2bc34:	1ad3      	subs	r3, r2, r3
   2bc36:	61fb      	str	r3, [r7, #28]
   2bc38:	68fb      	ldr	r3, [r7, #12]
   2bc3a:	681b      	ldr	r3, [r3, #0]
   2bc3c:	7858      	ldrb	r0, [r3, #1]
   2bc3e:	69fb      	ldr	r3, [r7, #28]
   2bc40:	b2db      	uxtb	r3, r3
   2bc42:	693a      	ldr	r2, [r7, #16]
   2bc44:	69b9      	ldr	r1, [r7, #24]
   2bc46:	4c5c      	ldr	r4, [pc, #368]	; (2bdb8 <f_write+0x348>)
   2bc48:	47a0      	blx	r4
   2bc4a:	1e03      	subs	r3, r0, #0
   2bc4c:	d009      	beq.n	2bc62 <f_write+0x1f2>
   2bc4e:	68fb      	ldr	r3, [r7, #12]
   2bc50:	799b      	ldrb	r3, [r3, #6]
   2bc52:	2280      	movs	r2, #128	; 0x80
   2bc54:	4252      	negs	r2, r2
   2bc56:	4313      	orrs	r3, r2
   2bc58:	b2da      	uxtb	r2, r3
   2bc5a:	68fb      	ldr	r3, [r7, #12]
   2bc5c:	719a      	strb	r2, [r3, #6]
   2bc5e:	2301      	movs	r3, #1
   2bc60:	e09e      	b.n	2bda0 <f_write+0x330>
   2bc62:	68fb      	ldr	r3, [r7, #12]
   2bc64:	681b      	ldr	r3, [r3, #0]
   2bc66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2bc68:	693b      	ldr	r3, [r7, #16]
   2bc6a:	1ad2      	subs	r2, r2, r3
   2bc6c:	69fb      	ldr	r3, [r7, #28]
   2bc6e:	429a      	cmp	r2, r3
   2bc70:	d214      	bcs.n	2bc9c <f_write+0x22c>
   2bc72:	68fb      	ldr	r3, [r7, #12]
   2bc74:	681b      	ldr	r3, [r3, #0]
   2bc76:	3330      	adds	r3, #48	; 0x30
   2bc78:	0018      	movs	r0, r3
   2bc7a:	68fb      	ldr	r3, [r7, #12]
   2bc7c:	681b      	ldr	r3, [r3, #0]
   2bc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2bc80:	693b      	ldr	r3, [r7, #16]
   2bc82:	1ad3      	subs	r3, r2, r3
   2bc84:	025b      	lsls	r3, r3, #9
   2bc86:	69ba      	ldr	r2, [r7, #24]
   2bc88:	18d1      	adds	r1, r2, r3
   2bc8a:	2380      	movs	r3, #128	; 0x80
   2bc8c:	009b      	lsls	r3, r3, #2
   2bc8e:	001a      	movs	r2, r3
   2bc90:	4b4a      	ldr	r3, [pc, #296]	; (2bdbc <f_write+0x34c>)
   2bc92:	4798      	blx	r3
   2bc94:	68fb      	ldr	r3, [r7, #12]
   2bc96:	681b      	ldr	r3, [r3, #0]
   2bc98:	2200      	movs	r2, #0
   2bc9a:	711a      	strb	r2, [r3, #4]
   2bc9c:	69fb      	ldr	r3, [r7, #28]
   2bc9e:	025b      	lsls	r3, r3, #9
   2bca0:	623b      	str	r3, [r7, #32]
   2bca2:	e051      	b.n	2bd48 <f_write+0x2d8>
   2bca4:	68fb      	ldr	r3, [r7, #12]
   2bca6:	689a      	ldr	r2, [r3, #8]
   2bca8:	68fb      	ldr	r3, [r7, #12]
   2bcaa:	68db      	ldr	r3, [r3, #12]
   2bcac:	429a      	cmp	r2, r3
   2bcae:	d315      	bcc.n	2bcdc <f_write+0x26c>
   2bcb0:	68fb      	ldr	r3, [r7, #12]
   2bcb2:	681b      	ldr	r3, [r3, #0]
   2bcb4:	2100      	movs	r1, #0
   2bcb6:	0018      	movs	r0, r3
   2bcb8:	4b3d      	ldr	r3, [pc, #244]	; (2bdb0 <f_write+0x340>)
   2bcba:	4798      	blx	r3
   2bcbc:	1e03      	subs	r3, r0, #0
   2bcbe:	d009      	beq.n	2bcd4 <f_write+0x264>
   2bcc0:	68fb      	ldr	r3, [r7, #12]
   2bcc2:	799b      	ldrb	r3, [r3, #6]
   2bcc4:	2280      	movs	r2, #128	; 0x80
   2bcc6:	4252      	negs	r2, r2
   2bcc8:	4313      	orrs	r3, r2
   2bcca:	b2da      	uxtb	r2, r3
   2bccc:	68fb      	ldr	r3, [r7, #12]
   2bcce:	719a      	strb	r2, [r3, #6]
   2bcd0:	2301      	movs	r3, #1
   2bcd2:	e065      	b.n	2bda0 <f_write+0x330>
   2bcd4:	68fb      	ldr	r3, [r7, #12]
   2bcd6:	681b      	ldr	r3, [r3, #0]
   2bcd8:	693a      	ldr	r2, [r7, #16]
   2bcda:	62da      	str	r2, [r3, #44]	; 0x2c
   2bcdc:	68fb      	ldr	r3, [r7, #12]
   2bcde:	693a      	ldr	r2, [r7, #16]
   2bce0:	619a      	str	r2, [r3, #24]
   2bce2:	68fb      	ldr	r3, [r7, #12]
   2bce4:	689b      	ldr	r3, [r3, #8]
   2bce6:	05db      	lsls	r3, r3, #23
   2bce8:	0ddb      	lsrs	r3, r3, #23
   2bcea:	2280      	movs	r2, #128	; 0x80
   2bcec:	0092      	lsls	r2, r2, #2
   2bcee:	1ad3      	subs	r3, r2, r3
   2bcf0:	623b      	str	r3, [r7, #32]
   2bcf2:	6a3a      	ldr	r2, [r7, #32]
   2bcf4:	687b      	ldr	r3, [r7, #4]
   2bcf6:	429a      	cmp	r2, r3
   2bcf8:	d901      	bls.n	2bcfe <f_write+0x28e>
   2bcfa:	687b      	ldr	r3, [r7, #4]
   2bcfc:	623b      	str	r3, [r7, #32]
   2bcfe:	68fb      	ldr	r3, [r7, #12]
   2bd00:	681a      	ldr	r2, [r3, #0]
   2bd02:	68fb      	ldr	r3, [r7, #12]
   2bd04:	699b      	ldr	r3, [r3, #24]
   2bd06:	0019      	movs	r1, r3
   2bd08:	0010      	movs	r0, r2
   2bd0a:	4b29      	ldr	r3, [pc, #164]	; (2bdb0 <f_write+0x340>)
   2bd0c:	4798      	blx	r3
   2bd0e:	1e03      	subs	r3, r0, #0
   2bd10:	d009      	beq.n	2bd26 <f_write+0x2b6>
   2bd12:	68fb      	ldr	r3, [r7, #12]
   2bd14:	799b      	ldrb	r3, [r3, #6]
   2bd16:	2280      	movs	r2, #128	; 0x80
   2bd18:	4252      	negs	r2, r2
   2bd1a:	4313      	orrs	r3, r2
   2bd1c:	b2da      	uxtb	r2, r3
   2bd1e:	68fb      	ldr	r3, [r7, #12]
   2bd20:	719a      	strb	r2, [r3, #6]
   2bd22:	2301      	movs	r3, #1
   2bd24:	e03c      	b.n	2bda0 <f_write+0x330>
   2bd26:	68fb      	ldr	r3, [r7, #12]
   2bd28:	681a      	ldr	r2, [r3, #0]
   2bd2a:	68fb      	ldr	r3, [r7, #12]
   2bd2c:	689b      	ldr	r3, [r3, #8]
   2bd2e:	05db      	lsls	r3, r3, #23
   2bd30:	0ddb      	lsrs	r3, r3, #23
   2bd32:	3330      	adds	r3, #48	; 0x30
   2bd34:	18d3      	adds	r3, r2, r3
   2bd36:	6a3a      	ldr	r2, [r7, #32]
   2bd38:	69b9      	ldr	r1, [r7, #24]
   2bd3a:	0018      	movs	r0, r3
   2bd3c:	4b1f      	ldr	r3, [pc, #124]	; (2bdbc <f_write+0x34c>)
   2bd3e:	4798      	blx	r3
   2bd40:	68fb      	ldr	r3, [r7, #12]
   2bd42:	681b      	ldr	r3, [r3, #0]
   2bd44:	2201      	movs	r2, #1
   2bd46:	711a      	strb	r2, [r3, #4]
   2bd48:	69ba      	ldr	r2, [r7, #24]
   2bd4a:	6a3b      	ldr	r3, [r7, #32]
   2bd4c:	18d3      	adds	r3, r2, r3
   2bd4e:	61bb      	str	r3, [r7, #24]
   2bd50:	68fb      	ldr	r3, [r7, #12]
   2bd52:	689a      	ldr	r2, [r3, #8]
   2bd54:	6a3b      	ldr	r3, [r7, #32]
   2bd56:	18d2      	adds	r2, r2, r3
   2bd58:	68fb      	ldr	r3, [r7, #12]
   2bd5a:	609a      	str	r2, [r3, #8]
   2bd5c:	683b      	ldr	r3, [r7, #0]
   2bd5e:	681a      	ldr	r2, [r3, #0]
   2bd60:	6a3b      	ldr	r3, [r7, #32]
   2bd62:	18d2      	adds	r2, r2, r3
   2bd64:	683b      	ldr	r3, [r7, #0]
   2bd66:	601a      	str	r2, [r3, #0]
   2bd68:	687a      	ldr	r2, [r7, #4]
   2bd6a:	6a3b      	ldr	r3, [r7, #32]
   2bd6c:	1ad3      	subs	r3, r2, r3
   2bd6e:	607b      	str	r3, [r7, #4]
   2bd70:	687b      	ldr	r3, [r7, #4]
   2bd72:	2b00      	cmp	r3, #0
   2bd74:	d000      	beq.n	2bd78 <f_write+0x308>
   2bd76:	e6b7      	b.n	2bae8 <f_write+0x78>
   2bd78:	e000      	b.n	2bd7c <f_write+0x30c>
   2bd7a:	46c0      	nop			; (mov r8, r8)
   2bd7c:	68fb      	ldr	r3, [r7, #12]
   2bd7e:	689a      	ldr	r2, [r3, #8]
   2bd80:	68fb      	ldr	r3, [r7, #12]
   2bd82:	68db      	ldr	r3, [r3, #12]
   2bd84:	429a      	cmp	r2, r3
   2bd86:	d903      	bls.n	2bd90 <f_write+0x320>
   2bd88:	68fb      	ldr	r3, [r7, #12]
   2bd8a:	689a      	ldr	r2, [r3, #8]
   2bd8c:	68fb      	ldr	r3, [r7, #12]
   2bd8e:	60da      	str	r2, [r3, #12]
   2bd90:	68fb      	ldr	r3, [r7, #12]
   2bd92:	799b      	ldrb	r3, [r3, #6]
   2bd94:	2220      	movs	r2, #32
   2bd96:	4313      	orrs	r3, r2
   2bd98:	b2da      	uxtb	r2, r3
   2bd9a:	68fb      	ldr	r3, [r7, #12]
   2bd9c:	719a      	strb	r2, [r3, #6]
   2bd9e:	2300      	movs	r3, #0
   2bda0:	0018      	movs	r0, r3
   2bda2:	46bd      	mov	sp, r7
   2bda4:	b00b      	add	sp, #44	; 0x2c
   2bda6:	bd90      	pop	{r4, r7, pc}
   2bda8:	0002b495 	.word	0x0002b495
   2bdac:	00029b21 	.word	0x00029b21
   2bdb0:	00029419 	.word	0x00029419
   2bdb4:	00029679 	.word	0x00029679
   2bdb8:	00029105 	.word	0x00029105
   2bdbc:	00029335 	.word	0x00029335

0002bdc0 <f_sync>:
   2bdc0:	b590      	push	{r4, r7, lr}
   2bdc2:	b087      	sub	sp, #28
   2bdc4:	af00      	add	r7, sp, #0
   2bdc6:	6078      	str	r0, [r7, #4]
   2bdc8:	687b      	ldr	r3, [r7, #4]
   2bdca:	681a      	ldr	r2, [r3, #0]
   2bdcc:	687b      	ldr	r3, [r7, #4]
   2bdce:	889b      	ldrh	r3, [r3, #4]
   2bdd0:	2117      	movs	r1, #23
   2bdd2:	187c      	adds	r4, r7, r1
   2bdd4:	0019      	movs	r1, r3
   2bdd6:	0010      	movs	r0, r2
   2bdd8:	4b55      	ldr	r3, [pc, #340]	; (2bf30 <f_sync+0x170>)
   2bdda:	4798      	blx	r3
   2bddc:	0003      	movs	r3, r0
   2bdde:	7023      	strb	r3, [r4, #0]
   2bde0:	2317      	movs	r3, #23
   2bde2:	18fb      	adds	r3, r7, r3
   2bde4:	781b      	ldrb	r3, [r3, #0]
   2bde6:	2b00      	cmp	r3, #0
   2bde8:	d000      	beq.n	2bdec <f_sync+0x2c>
   2bdea:	e09a      	b.n	2bf22 <f_sync+0x162>
   2bdec:	687b      	ldr	r3, [r7, #4]
   2bdee:	799b      	ldrb	r3, [r3, #6]
   2bdf0:	001a      	movs	r2, r3
   2bdf2:	2320      	movs	r3, #32
   2bdf4:	4013      	ands	r3, r2
   2bdf6:	d100      	bne.n	2bdfa <f_sync+0x3a>
   2bdf8:	e093      	b.n	2bf22 <f_sync+0x162>
   2bdfa:	687b      	ldr	r3, [r7, #4]
   2bdfc:	681a      	ldr	r2, [r3, #0]
   2bdfe:	687b      	ldr	r3, [r7, #4]
   2be00:	69db      	ldr	r3, [r3, #28]
   2be02:	2117      	movs	r1, #23
   2be04:	187c      	adds	r4, r7, r1
   2be06:	0019      	movs	r1, r3
   2be08:	0010      	movs	r0, r2
   2be0a:	4b4a      	ldr	r3, [pc, #296]	; (2bf34 <f_sync+0x174>)
   2be0c:	4798      	blx	r3
   2be0e:	0003      	movs	r3, r0
   2be10:	7023      	strb	r3, [r4, #0]
   2be12:	2317      	movs	r3, #23
   2be14:	18fb      	adds	r3, r7, r3
   2be16:	781b      	ldrb	r3, [r3, #0]
   2be18:	2b00      	cmp	r3, #0
   2be1a:	d000      	beq.n	2be1e <f_sync+0x5e>
   2be1c:	e081      	b.n	2bf22 <f_sync+0x162>
   2be1e:	687b      	ldr	r3, [r7, #4]
   2be20:	6a1b      	ldr	r3, [r3, #32]
   2be22:	613b      	str	r3, [r7, #16]
   2be24:	693b      	ldr	r3, [r7, #16]
   2be26:	330b      	adds	r3, #11
   2be28:	693a      	ldr	r2, [r7, #16]
   2be2a:	320b      	adds	r2, #11
   2be2c:	7812      	ldrb	r2, [r2, #0]
   2be2e:	2120      	movs	r1, #32
   2be30:	430a      	orrs	r2, r1
   2be32:	b2d2      	uxtb	r2, r2
   2be34:	701a      	strb	r2, [r3, #0]
   2be36:	693b      	ldr	r3, [r7, #16]
   2be38:	331c      	adds	r3, #28
   2be3a:	001a      	movs	r2, r3
   2be3c:	687b      	ldr	r3, [r7, #4]
   2be3e:	68db      	ldr	r3, [r3, #12]
   2be40:	b2db      	uxtb	r3, r3
   2be42:	7013      	strb	r3, [r2, #0]
   2be44:	693b      	ldr	r3, [r7, #16]
   2be46:	331d      	adds	r3, #29
   2be48:	001a      	movs	r2, r3
   2be4a:	687b      	ldr	r3, [r7, #4]
   2be4c:	68db      	ldr	r3, [r3, #12]
   2be4e:	b29b      	uxth	r3, r3
   2be50:	0a1b      	lsrs	r3, r3, #8
   2be52:	b29b      	uxth	r3, r3
   2be54:	b2db      	uxtb	r3, r3
   2be56:	7013      	strb	r3, [r2, #0]
   2be58:	693b      	ldr	r3, [r7, #16]
   2be5a:	331e      	adds	r3, #30
   2be5c:	001a      	movs	r2, r3
   2be5e:	687b      	ldr	r3, [r7, #4]
   2be60:	68db      	ldr	r3, [r3, #12]
   2be62:	0c1b      	lsrs	r3, r3, #16
   2be64:	b2db      	uxtb	r3, r3
   2be66:	7013      	strb	r3, [r2, #0]
   2be68:	693b      	ldr	r3, [r7, #16]
   2be6a:	331f      	adds	r3, #31
   2be6c:	001a      	movs	r2, r3
   2be6e:	687b      	ldr	r3, [r7, #4]
   2be70:	68db      	ldr	r3, [r3, #12]
   2be72:	0e1b      	lsrs	r3, r3, #24
   2be74:	b2db      	uxtb	r3, r3
   2be76:	7013      	strb	r3, [r2, #0]
   2be78:	693b      	ldr	r3, [r7, #16]
   2be7a:	331a      	adds	r3, #26
   2be7c:	001a      	movs	r2, r3
   2be7e:	687b      	ldr	r3, [r7, #4]
   2be80:	691b      	ldr	r3, [r3, #16]
   2be82:	b2db      	uxtb	r3, r3
   2be84:	7013      	strb	r3, [r2, #0]
   2be86:	693b      	ldr	r3, [r7, #16]
   2be88:	331b      	adds	r3, #27
   2be8a:	001a      	movs	r2, r3
   2be8c:	687b      	ldr	r3, [r7, #4]
   2be8e:	691b      	ldr	r3, [r3, #16]
   2be90:	b29b      	uxth	r3, r3
   2be92:	0a1b      	lsrs	r3, r3, #8
   2be94:	b29b      	uxth	r3, r3
   2be96:	b2db      	uxtb	r3, r3
   2be98:	7013      	strb	r3, [r2, #0]
   2be9a:	693b      	ldr	r3, [r7, #16]
   2be9c:	3314      	adds	r3, #20
   2be9e:	001a      	movs	r2, r3
   2bea0:	687b      	ldr	r3, [r7, #4]
   2bea2:	691b      	ldr	r3, [r3, #16]
   2bea4:	0c1b      	lsrs	r3, r3, #16
   2bea6:	b2db      	uxtb	r3, r3
   2bea8:	7013      	strb	r3, [r2, #0]
   2beaa:	693b      	ldr	r3, [r7, #16]
   2beac:	3315      	adds	r3, #21
   2beae:	001a      	movs	r2, r3
   2beb0:	687b      	ldr	r3, [r7, #4]
   2beb2:	691b      	ldr	r3, [r3, #16]
   2beb4:	0c1b      	lsrs	r3, r3, #16
   2beb6:	b29b      	uxth	r3, r3
   2beb8:	0a1b      	lsrs	r3, r3, #8
   2beba:	b29b      	uxth	r3, r3
   2bebc:	b2db      	uxtb	r3, r3
   2bebe:	7013      	strb	r3, [r2, #0]
   2bec0:	4b1d      	ldr	r3, [pc, #116]	; (2bf38 <f_sync+0x178>)
   2bec2:	4798      	blx	r3
   2bec4:	0003      	movs	r3, r0
   2bec6:	60fb      	str	r3, [r7, #12]
   2bec8:	693b      	ldr	r3, [r7, #16]
   2beca:	3316      	adds	r3, #22
   2becc:	68fa      	ldr	r2, [r7, #12]
   2bece:	b2d2      	uxtb	r2, r2
   2bed0:	701a      	strb	r2, [r3, #0]
   2bed2:	693b      	ldr	r3, [r7, #16]
   2bed4:	3317      	adds	r3, #23
   2bed6:	68fa      	ldr	r2, [r7, #12]
   2bed8:	b292      	uxth	r2, r2
   2beda:	0a12      	lsrs	r2, r2, #8
   2bedc:	b292      	uxth	r2, r2
   2bede:	b2d2      	uxtb	r2, r2
   2bee0:	701a      	strb	r2, [r3, #0]
   2bee2:	693b      	ldr	r3, [r7, #16]
   2bee4:	3318      	adds	r3, #24
   2bee6:	68fa      	ldr	r2, [r7, #12]
   2bee8:	0c12      	lsrs	r2, r2, #16
   2beea:	b2d2      	uxtb	r2, r2
   2beec:	701a      	strb	r2, [r3, #0]
   2beee:	693b      	ldr	r3, [r7, #16]
   2bef0:	3319      	adds	r3, #25
   2bef2:	68fa      	ldr	r2, [r7, #12]
   2bef4:	0e12      	lsrs	r2, r2, #24
   2bef6:	b2d2      	uxtb	r2, r2
   2bef8:	701a      	strb	r2, [r3, #0]
   2befa:	687b      	ldr	r3, [r7, #4]
   2befc:	799b      	ldrb	r3, [r3, #6]
   2befe:	2220      	movs	r2, #32
   2bf00:	4393      	bics	r3, r2
   2bf02:	b2da      	uxtb	r2, r3
   2bf04:	687b      	ldr	r3, [r7, #4]
   2bf06:	719a      	strb	r2, [r3, #6]
   2bf08:	687b      	ldr	r3, [r7, #4]
   2bf0a:	681b      	ldr	r3, [r3, #0]
   2bf0c:	2201      	movs	r2, #1
   2bf0e:	711a      	strb	r2, [r3, #4]
   2bf10:	687b      	ldr	r3, [r7, #4]
   2bf12:	681b      	ldr	r3, [r3, #0]
   2bf14:	2217      	movs	r2, #23
   2bf16:	18bc      	adds	r4, r7, r2
   2bf18:	0018      	movs	r0, r3
   2bf1a:	4b08      	ldr	r3, [pc, #32]	; (2bf3c <f_sync+0x17c>)
   2bf1c:	4798      	blx	r3
   2bf1e:	0003      	movs	r3, r0
   2bf20:	7023      	strb	r3, [r4, #0]
   2bf22:	2317      	movs	r3, #23
   2bf24:	18fb      	adds	r3, r7, r3
   2bf26:	781b      	ldrb	r3, [r3, #0]
   2bf28:	0018      	movs	r0, r3
   2bf2a:	46bd      	mov	sp, r7
   2bf2c:	b007      	add	sp, #28
   2bf2e:	bd90      	pop	{r4, r7, pc}
   2bf30:	0002b495 	.word	0x0002b495
   2bf34:	00029419 	.word	0x00029419
   2bf38:	000292d5 	.word	0x000292d5
   2bf3c:	000294e1 	.word	0x000294e1

0002bf40 <f_close>:
   2bf40:	b590      	push	{r4, r7, lr}
   2bf42:	b085      	sub	sp, #20
   2bf44:	af00      	add	r7, sp, #0
   2bf46:	6078      	str	r0, [r7, #4]
   2bf48:	230f      	movs	r3, #15
   2bf4a:	18fc      	adds	r4, r7, r3
   2bf4c:	687b      	ldr	r3, [r7, #4]
   2bf4e:	0018      	movs	r0, r3
   2bf50:	4b09      	ldr	r3, [pc, #36]	; (2bf78 <f_close+0x38>)
   2bf52:	4798      	blx	r3
   2bf54:	0003      	movs	r3, r0
   2bf56:	7023      	strb	r3, [r4, #0]
   2bf58:	230f      	movs	r3, #15
   2bf5a:	18fb      	adds	r3, r7, r3
   2bf5c:	781b      	ldrb	r3, [r3, #0]
   2bf5e:	2b00      	cmp	r3, #0
   2bf60:	d102      	bne.n	2bf68 <f_close+0x28>
   2bf62:	687b      	ldr	r3, [r7, #4]
   2bf64:	2200      	movs	r2, #0
   2bf66:	601a      	str	r2, [r3, #0]
   2bf68:	230f      	movs	r3, #15
   2bf6a:	18fb      	adds	r3, r7, r3
   2bf6c:	781b      	ldrb	r3, [r3, #0]
   2bf6e:	0018      	movs	r0, r3
   2bf70:	46bd      	mov	sp, r7
   2bf72:	b005      	add	sp, #20
   2bf74:	bd90      	pop	{r4, r7, pc}
   2bf76:	46c0      	nop			; (mov r8, r8)
   2bf78:	0002bdc1 	.word	0x0002bdc1

0002bf7c <ff_convert>:
   2bf7c:	b580      	push	{r7, lr}
   2bf7e:	b084      	sub	sp, #16
   2bf80:	af00      	add	r7, sp, #0
   2bf82:	0002      	movs	r2, r0
   2bf84:	6039      	str	r1, [r7, #0]
   2bf86:	1dbb      	adds	r3, r7, #6
   2bf88:	801a      	strh	r2, [r3, #0]
   2bf8a:	1dbb      	adds	r3, r7, #6
   2bf8c:	881b      	ldrh	r3, [r3, #0]
   2bf8e:	2b7f      	cmp	r3, #127	; 0x7f
   2bf90:	d805      	bhi.n	2bf9e <ff_convert+0x22>
   2bf92:	230e      	movs	r3, #14
   2bf94:	18fb      	adds	r3, r7, r3
   2bf96:	1dba      	adds	r2, r7, #6
   2bf98:	8812      	ldrh	r2, [r2, #0]
   2bf9a:	801a      	strh	r2, [r3, #0]
   2bf9c:	e03a      	b.n	2c014 <ff_convert+0x98>
   2bf9e:	683b      	ldr	r3, [r7, #0]
   2bfa0:	2b00      	cmp	r3, #0
   2bfa2:	d010      	beq.n	2bfc6 <ff_convert+0x4a>
   2bfa4:	1dbb      	adds	r3, r7, #6
   2bfa6:	881b      	ldrh	r3, [r3, #0]
   2bfa8:	2bff      	cmp	r3, #255	; 0xff
   2bfaa:	d807      	bhi.n	2bfbc <ff_convert+0x40>
   2bfac:	1dbb      	adds	r3, r7, #6
   2bfae:	881b      	ldrh	r3, [r3, #0]
   2bfb0:	3b80      	subs	r3, #128	; 0x80
   2bfb2:	001a      	movs	r2, r3
   2bfb4:	4b1b      	ldr	r3, [pc, #108]	; (2c024 <ff_convert+0xa8>)
   2bfb6:	0052      	lsls	r2, r2, #1
   2bfb8:	5ad2      	ldrh	r2, [r2, r3]
   2bfba:	e000      	b.n	2bfbe <ff_convert+0x42>
   2bfbc:	2200      	movs	r2, #0
   2bfbe:	230e      	movs	r3, #14
   2bfc0:	18fb      	adds	r3, r7, r3
   2bfc2:	801a      	strh	r2, [r3, #0]
   2bfc4:	e026      	b.n	2c014 <ff_convert+0x98>
   2bfc6:	230e      	movs	r3, #14
   2bfc8:	18fb      	adds	r3, r7, r3
   2bfca:	2200      	movs	r2, #0
   2bfcc:	801a      	strh	r2, [r3, #0]
   2bfce:	e010      	b.n	2bff2 <ff_convert+0x76>
   2bfd0:	230e      	movs	r3, #14
   2bfd2:	18fb      	adds	r3, r7, r3
   2bfd4:	881a      	ldrh	r2, [r3, #0]
   2bfd6:	4b13      	ldr	r3, [pc, #76]	; (2c024 <ff_convert+0xa8>)
   2bfd8:	0052      	lsls	r2, r2, #1
   2bfda:	5ad3      	ldrh	r3, [r2, r3]
   2bfdc:	1dba      	adds	r2, r7, #6
   2bfde:	8812      	ldrh	r2, [r2, #0]
   2bfe0:	429a      	cmp	r2, r3
   2bfe2:	d00c      	beq.n	2bffe <ff_convert+0x82>
   2bfe4:	230e      	movs	r3, #14
   2bfe6:	18fb      	adds	r3, r7, r3
   2bfe8:	881a      	ldrh	r2, [r3, #0]
   2bfea:	230e      	movs	r3, #14
   2bfec:	18fb      	adds	r3, r7, r3
   2bfee:	3201      	adds	r2, #1
   2bff0:	801a      	strh	r2, [r3, #0]
   2bff2:	230e      	movs	r3, #14
   2bff4:	18fb      	adds	r3, r7, r3
   2bff6:	881b      	ldrh	r3, [r3, #0]
   2bff8:	2b7f      	cmp	r3, #127	; 0x7f
   2bffa:	d9e9      	bls.n	2bfd0 <ff_convert+0x54>
   2bffc:	e000      	b.n	2c000 <ff_convert+0x84>
   2bffe:	46c0      	nop			; (mov r8, r8)
   2c000:	230e      	movs	r3, #14
   2c002:	18fb      	adds	r3, r7, r3
   2c004:	881b      	ldrh	r3, [r3, #0]
   2c006:	3380      	adds	r3, #128	; 0x80
   2c008:	b29a      	uxth	r2, r3
   2c00a:	230e      	movs	r3, #14
   2c00c:	18fb      	adds	r3, r7, r3
   2c00e:	21ff      	movs	r1, #255	; 0xff
   2c010:	400a      	ands	r2, r1
   2c012:	801a      	strh	r2, [r3, #0]
   2c014:	230e      	movs	r3, #14
   2c016:	18fb      	adds	r3, r7, r3
   2c018:	881b      	ldrh	r3, [r3, #0]
   2c01a:	0018      	movs	r0, r3
   2c01c:	46bd      	mov	sp, r7
   2c01e:	b004      	add	sp, #16
   2c020:	bd80      	pop	{r7, pc}
   2c022:	46c0      	nop			; (mov r8, r8)
   2c024:	00036afc 	.word	0x00036afc

0002c028 <ff_wtoupper>:
   2c028:	b580      	push	{r7, lr}
   2c02a:	b084      	sub	sp, #16
   2c02c:	af00      	add	r7, sp, #0
   2c02e:	0002      	movs	r2, r0
   2c030:	1dbb      	adds	r3, r7, #6
   2c032:	801a      	strh	r2, [r3, #0]
   2c034:	2300      	movs	r3, #0
   2c036:	60fb      	str	r3, [r7, #12]
   2c038:	e002      	b.n	2c040 <ff_wtoupper+0x18>
   2c03a:	68fb      	ldr	r3, [r7, #12]
   2c03c:	3301      	adds	r3, #1
   2c03e:	60fb      	str	r3, [r7, #12]
   2c040:	4b0f      	ldr	r3, [pc, #60]	; (2c080 <ff_wtoupper+0x58>)
   2c042:	68fa      	ldr	r2, [r7, #12]
   2c044:	0052      	lsls	r2, r2, #1
   2c046:	5ad3      	ldrh	r3, [r2, r3]
   2c048:	2b00      	cmp	r3, #0
   2c04a:	d007      	beq.n	2c05c <ff_wtoupper+0x34>
   2c04c:	4b0c      	ldr	r3, [pc, #48]	; (2c080 <ff_wtoupper+0x58>)
   2c04e:	68fa      	ldr	r2, [r7, #12]
   2c050:	0052      	lsls	r2, r2, #1
   2c052:	5ad3      	ldrh	r3, [r2, r3]
   2c054:	1dba      	adds	r2, r7, #6
   2c056:	8812      	ldrh	r2, [r2, #0]
   2c058:	429a      	cmp	r2, r3
   2c05a:	d1ee      	bne.n	2c03a <ff_wtoupper+0x12>
   2c05c:	4b08      	ldr	r3, [pc, #32]	; (2c080 <ff_wtoupper+0x58>)
   2c05e:	68fa      	ldr	r2, [r7, #12]
   2c060:	0052      	lsls	r2, r2, #1
   2c062:	5ad3      	ldrh	r3, [r2, r3]
   2c064:	2b00      	cmp	r3, #0
   2c066:	d004      	beq.n	2c072 <ff_wtoupper+0x4a>
   2c068:	4b06      	ldr	r3, [pc, #24]	; (2c084 <ff_wtoupper+0x5c>)
   2c06a:	68fa      	ldr	r2, [r7, #12]
   2c06c:	0052      	lsls	r2, r2, #1
   2c06e:	5ad3      	ldrh	r3, [r2, r3]
   2c070:	e001      	b.n	2c076 <ff_wtoupper+0x4e>
   2c072:	1dbb      	adds	r3, r7, #6
   2c074:	881b      	ldrh	r3, [r3, #0]
   2c076:	0018      	movs	r0, r3
   2c078:	46bd      	mov	sp, r7
   2c07a:	b004      	add	sp, #16
   2c07c:	bd80      	pop	{r7, pc}
   2c07e:	46c0      	nop			; (mov r8, r8)
   2c080:	00036bfc 	.word	0x00036bfc
   2c084:	00036ddc 	.word	0x00036ddc

0002c088 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2c088:	b580      	push	{r7, lr}
   2c08a:	b084      	sub	sp, #16
   2c08c:	af00      	add	r7, sp, #0
   2c08e:	60f8      	str	r0, [r7, #12]
   2c090:	60b9      	str	r1, [r7, #8]
   2c092:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2c094:	68fb      	ldr	r3, [r7, #12]
   2c096:	68ba      	ldr	r2, [r7, #8]
   2c098:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2c09a:	68fb      	ldr	r3, [r7, #12]
   2c09c:	687a      	ldr	r2, [r7, #4]
   2c09e:	601a      	str	r2, [r3, #0]
}
   2c0a0:	46c0      	nop			; (mov r8, r8)
   2c0a2:	46bd      	mov	sp, r7
   2c0a4:	b004      	add	sp, #16
   2c0a6:	bd80      	pop	{r7, pc}

0002c0a8 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2c0a8:	b580      	push	{r7, lr}
   2c0aa:	b082      	sub	sp, #8
   2c0ac:	af00      	add	r7, sp, #0
   2c0ae:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2c0b0:	687b      	ldr	r3, [r7, #4]
   2c0b2:	681b      	ldr	r3, [r3, #0]
   2c0b4:	4a07      	ldr	r2, [pc, #28]	; (2c0d4 <getNextPacketId+0x2c>)
   2c0b6:	4293      	cmp	r3, r2
   2c0b8:	d003      	beq.n	2c0c2 <getNextPacketId+0x1a>
   2c0ba:	687b      	ldr	r3, [r7, #4]
   2c0bc:	681b      	ldr	r3, [r3, #0]
   2c0be:	1c5a      	adds	r2, r3, #1
   2c0c0:	e000      	b.n	2c0c4 <getNextPacketId+0x1c>
   2c0c2:	2201      	movs	r2, #1
   2c0c4:	687b      	ldr	r3, [r7, #4]
   2c0c6:	601a      	str	r2, [r3, #0]
   2c0c8:	687b      	ldr	r3, [r7, #4]
   2c0ca:	681b      	ldr	r3, [r3, #0]
}
   2c0cc:	0018      	movs	r0, r3
   2c0ce:	46bd      	mov	sp, r7
   2c0d0:	b002      	add	sp, #8
   2c0d2:	bd80      	pop	{r7, pc}
   2c0d4:	0000ffff 	.word	0x0000ffff

0002c0d8 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2c0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c0da:	b087      	sub	sp, #28
   2c0dc:	af00      	add	r7, sp, #0
   2c0de:	60f8      	str	r0, [r7, #12]
   2c0e0:	60b9      	str	r1, [r7, #8]
   2c0e2:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2c0e4:	2301      	movs	r3, #1
   2c0e6:	425b      	negs	r3, r3
   2c0e8:	617b      	str	r3, [r7, #20]
        sent = 0;
   2c0ea:	2300      	movs	r3, #0
   2c0ec:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2c0ee:	e01a      	b.n	2c126 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2c0f0:	68fb      	ldr	r3, [r7, #12]
   2c0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2c0f4:	68dc      	ldr	r4, [r3, #12]
   2c0f6:	68fb      	ldr	r3, [r7, #12]
   2c0f8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2c0fa:	68fb      	ldr	r3, [r7, #12]
   2c0fc:	691a      	ldr	r2, [r3, #16]
   2c0fe:	693b      	ldr	r3, [r7, #16]
   2c100:	18d6      	adds	r6, r2, r3
   2c102:	687b      	ldr	r3, [r7, #4]
   2c104:	0018      	movs	r0, r3
   2c106:	4b1a      	ldr	r3, [pc, #104]	; (2c170 <sendPacket+0x98>)
   2c108:	4798      	blx	r3
   2c10a:	0003      	movs	r3, r0
   2c10c:	68ba      	ldr	r2, [r7, #8]
   2c10e:	0031      	movs	r1, r6
   2c110:	0028      	movs	r0, r5
   2c112:	47a0      	blx	r4
   2c114:	0003      	movs	r3, r0
   2c116:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2c118:	697b      	ldr	r3, [r7, #20]
   2c11a:	2b00      	cmp	r3, #0
   2c11c:	db0e      	blt.n	2c13c <sendPacket+0x64>
            break;
        sent += rc;
   2c11e:	693a      	ldr	r2, [r7, #16]
   2c120:	697b      	ldr	r3, [r7, #20]
   2c122:	18d3      	adds	r3, r2, r3
   2c124:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2c126:	693a      	ldr	r2, [r7, #16]
   2c128:	68bb      	ldr	r3, [r7, #8]
   2c12a:	429a      	cmp	r2, r3
   2c12c:	da07      	bge.n	2c13e <sendPacket+0x66>
   2c12e:	687b      	ldr	r3, [r7, #4]
   2c130:	0018      	movs	r0, r3
   2c132:	4b10      	ldr	r3, [pc, #64]	; (2c174 <sendPacket+0x9c>)
   2c134:	4798      	blx	r3
   2c136:	1e03      	subs	r3, r0, #0
   2c138:	d0da      	beq.n	2c0f0 <sendPacket+0x18>
   2c13a:	e000      	b.n	2c13e <sendPacket+0x66>
            break;
   2c13c:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2c13e:	693a      	ldr	r2, [r7, #16]
   2c140:	68bb      	ldr	r3, [r7, #8]
   2c142:	429a      	cmp	r2, r3
   2c144:	d10b      	bne.n	2c15e <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2c146:	68fb      	ldr	r3, [r7, #12]
   2c148:	3354      	adds	r3, #84	; 0x54
   2c14a:	001a      	movs	r2, r3
   2c14c:	68fb      	ldr	r3, [r7, #12]
   2c14e:	699b      	ldr	r3, [r3, #24]
   2c150:	0019      	movs	r1, r3
   2c152:	0010      	movs	r0, r2
   2c154:	4b08      	ldr	r3, [pc, #32]	; (2c178 <sendPacket+0xa0>)
   2c156:	4798      	blx	r3
        rc = SUCCESS;
   2c158:	2300      	movs	r3, #0
   2c15a:	617b      	str	r3, [r7, #20]
   2c15c:	e002      	b.n	2c164 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2c15e:	2301      	movs	r3, #1
   2c160:	425b      	negs	r3, r3
   2c162:	617b      	str	r3, [r7, #20]
    return rc;
   2c164:	697b      	ldr	r3, [r7, #20]
}
   2c166:	0018      	movs	r0, r3
   2c168:	46bd      	mov	sp, r7
   2c16a:	b007      	add	sp, #28
   2c16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c16e:	46c0      	nop			; (mov r8, r8)
   2c170:	0002cf39 	.word	0x0002cf39
   2c174:	0002cebd 	.word	0x0002cebd
   2c178:	0002cf11 	.word	0x0002cf11

0002c17c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2c17c:	b580      	push	{r7, lr}
   2c17e:	b086      	sub	sp, #24
   2c180:	af00      	add	r7, sp, #0
   2c182:	60f8      	str	r0, [r7, #12]
   2c184:	60b9      	str	r1, [r7, #8]
   2c186:	607a      	str	r2, [r7, #4]
   2c188:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2c18a:	68fb      	ldr	r3, [r7, #12]
   2c18c:	68ba      	ldr	r2, [r7, #8]
   2c18e:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2c190:	2300      	movs	r3, #0
   2c192:	617b      	str	r3, [r7, #20]
   2c194:	e00a      	b.n	2c1ac <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2c196:	68fa      	ldr	r2, [r7, #12]
   2c198:	697b      	ldr	r3, [r7, #20]
   2c19a:	3304      	adds	r3, #4
   2c19c:	00db      	lsls	r3, r3, #3
   2c19e:	18d3      	adds	r3, r2, r3
   2c1a0:	3304      	adds	r3, #4
   2c1a2:	2200      	movs	r2, #0
   2c1a4:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2c1a6:	697b      	ldr	r3, [r7, #20]
   2c1a8:	3301      	adds	r3, #1
   2c1aa:	617b      	str	r3, [r7, #20]
   2c1ac:	697b      	ldr	r3, [r7, #20]
   2c1ae:	2b04      	cmp	r3, #4
   2c1b0:	ddf1      	ble.n	2c196 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2c1b2:	68fb      	ldr	r3, [r7, #12]
   2c1b4:	687a      	ldr	r2, [r7, #4]
   2c1b6:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2c1b8:	68fb      	ldr	r3, [r7, #12]
   2c1ba:	683a      	ldr	r2, [r7, #0]
   2c1bc:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2c1be:	68fb      	ldr	r3, [r7, #12]
   2c1c0:	6a3a      	ldr	r2, [r7, #32]
   2c1c2:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2c1c4:	68fb      	ldr	r3, [r7, #12]
   2c1c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2c1c8:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2c1ca:	68fb      	ldr	r3, [r7, #12]
   2c1cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c1ce:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2c1d0:	68fb      	ldr	r3, [r7, #12]
   2c1d2:	2200      	movs	r2, #0
   2c1d4:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2c1d6:	68fb      	ldr	r3, [r7, #12]
   2c1d8:	2200      	movs	r2, #0
   2c1da:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2c1dc:	68fb      	ldr	r3, [r7, #12]
   2c1de:	2200      	movs	r2, #0
   2c1e0:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2c1e2:	68fb      	ldr	r3, [r7, #12]
   2c1e4:	2201      	movs	r2, #1
   2c1e6:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2c1e8:	68fb      	ldr	r3, [r7, #12]
   2c1ea:	3354      	adds	r3, #84	; 0x54
   2c1ec:	0018      	movs	r0, r3
   2c1ee:	4b03      	ldr	r3, [pc, #12]	; (2c1fc <MQTTClientInit+0x80>)
   2c1f0:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2c1f2:	46c0      	nop			; (mov r8, r8)
   2c1f4:	46bd      	mov	sp, r7
   2c1f6:	b006      	add	sp, #24
   2c1f8:	bd80      	pop	{r7, pc}
   2c1fa:	46c0      	nop			; (mov r8, r8)
   2c1fc:	0002cf61 	.word	0x0002cf61

0002c200 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2c200:	b590      	push	{r4, r7, lr}
   2c202:	b08b      	sub	sp, #44	; 0x2c
   2c204:	af00      	add	r7, sp, #0
   2c206:	60f8      	str	r0, [r7, #12]
   2c208:	60b9      	str	r1, [r7, #8]
   2c20a:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2c20c:	2301      	movs	r3, #1
   2c20e:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2c210:	2300      	movs	r3, #0
   2c212:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2c214:	2304      	movs	r3, #4
   2c216:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2c218:	68bb      	ldr	r3, [r7, #8]
   2c21a:	2200      	movs	r2, #0
   2c21c:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2c21e:	2301      	movs	r3, #1
   2c220:	425b      	negs	r3, r3
   2c222:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2c224:	6a3b      	ldr	r3, [r7, #32]
   2c226:	3301      	adds	r3, #1
   2c228:	623b      	str	r3, [r7, #32]
   2c22a:	6a3a      	ldr	r2, [r7, #32]
   2c22c:	69fb      	ldr	r3, [r7, #28]
   2c22e:	429a      	cmp	r2, r3
   2c230:	dd03      	ble.n	2c23a <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2c232:	2301      	movs	r3, #1
   2c234:	425b      	negs	r3, r3
   2c236:	61bb      	str	r3, [r7, #24]
            goto exit;
   2c238:	e026      	b.n	2c288 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2c23a:	68fb      	ldr	r3, [r7, #12]
   2c23c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2c23e:	689c      	ldr	r4, [r3, #8]
   2c240:	68fb      	ldr	r3, [r7, #12]
   2c242:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2c244:	687b      	ldr	r3, [r7, #4]
   2c246:	2217      	movs	r2, #23
   2c248:	18b9      	adds	r1, r7, r2
   2c24a:	2201      	movs	r2, #1
   2c24c:	47a0      	blx	r4
   2c24e:	0003      	movs	r3, r0
   2c250:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2c252:	69bb      	ldr	r3, [r7, #24]
   2c254:	2b01      	cmp	r3, #1
   2c256:	d116      	bne.n	2c286 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2c258:	68bb      	ldr	r3, [r7, #8]
   2c25a:	681a      	ldr	r2, [r3, #0]
   2c25c:	2317      	movs	r3, #23
   2c25e:	18fb      	adds	r3, r7, r3
   2c260:	781b      	ldrb	r3, [r3, #0]
   2c262:	0019      	movs	r1, r3
   2c264:	237f      	movs	r3, #127	; 0x7f
   2c266:	400b      	ands	r3, r1
   2c268:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2c26a:	434b      	muls	r3, r1
   2c26c:	18d2      	adds	r2, r2, r3
   2c26e:	68bb      	ldr	r3, [r7, #8]
   2c270:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2c272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c274:	01db      	lsls	r3, r3, #7
   2c276:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2c278:	2317      	movs	r3, #23
   2c27a:	18fb      	adds	r3, r7, r3
   2c27c:	781b      	ldrb	r3, [r3, #0]
   2c27e:	b25b      	sxtb	r3, r3
   2c280:	2b00      	cmp	r3, #0
   2c282:	dbcc      	blt.n	2c21e <decodePacket+0x1e>
   2c284:	e000      	b.n	2c288 <decodePacket+0x88>
            goto exit;
   2c286:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2c288:	6a3b      	ldr	r3, [r7, #32]
}
   2c28a:	0018      	movs	r0, r3
   2c28c:	46bd      	mov	sp, r7
   2c28e:	b00b      	add	sp, #44	; 0x2c
   2c290:	bd90      	pop	{r4, r7, pc}
	...

0002c294 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2c294:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c296:	46c6      	mov	lr, r8
   2c298:	b500      	push	{lr}
   2c29a:	b086      	sub	sp, #24
   2c29c:	af00      	add	r7, sp, #0
   2c29e:	6078      	str	r0, [r7, #4]
   2c2a0:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2c2a2:	2301      	movs	r3, #1
   2c2a4:	425b      	negs	r3, r3
   2c2a6:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2c2a8:	2300      	movs	r3, #0
   2c2aa:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2c2ac:	2300      	movs	r3, #0
   2c2ae:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2c2b0:	2300      	movs	r3, #0
   2c2b2:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2c2b4:	687b      	ldr	r3, [r7, #4]
   2c2b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2c2b8:	689c      	ldr	r4, [r3, #8]
   2c2ba:	687b      	ldr	r3, [r7, #4]
   2c2bc:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2c2be:	687b      	ldr	r3, [r7, #4]
   2c2c0:	695e      	ldr	r6, [r3, #20]
   2c2c2:	683b      	ldr	r3, [r7, #0]
   2c2c4:	0018      	movs	r0, r3
   2c2c6:	4b2b      	ldr	r3, [pc, #172]	; (2c374 <readPacket+0xe0>)
   2c2c8:	4798      	blx	r3
   2c2ca:	0003      	movs	r3, r0
   2c2cc:	2201      	movs	r2, #1
   2c2ce:	0031      	movs	r1, r6
   2c2d0:	0028      	movs	r0, r5
   2c2d2:	47a0      	blx	r4
   2c2d4:	0003      	movs	r3, r0
   2c2d6:	2b01      	cmp	r3, #1
   2c2d8:	d141      	bne.n	2c35e <readPacket+0xca>
        goto exit;

    len = 1;
   2c2da:	2301      	movs	r3, #1
   2c2dc:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2c2de:	683b      	ldr	r3, [r7, #0]
   2c2e0:	0018      	movs	r0, r3
   2c2e2:	4b24      	ldr	r3, [pc, #144]	; (2c374 <readPacket+0xe0>)
   2c2e4:	4798      	blx	r3
   2c2e6:	0002      	movs	r2, r0
   2c2e8:	2308      	movs	r3, #8
   2c2ea:	18f9      	adds	r1, r7, r3
   2c2ec:	687b      	ldr	r3, [r7, #4]
   2c2ee:	0018      	movs	r0, r3
   2c2f0:	4b21      	ldr	r3, [pc, #132]	; (2c378 <readPacket+0xe4>)
   2c2f2:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2c2f4:	687b      	ldr	r3, [r7, #4]
   2c2f6:	695b      	ldr	r3, [r3, #20]
   2c2f8:	3301      	adds	r3, #1
   2c2fa:	68ba      	ldr	r2, [r7, #8]
   2c2fc:	0011      	movs	r1, r2
   2c2fe:	0018      	movs	r0, r3
   2c300:	4b1e      	ldr	r3, [pc, #120]	; (2c37c <readPacket+0xe8>)
   2c302:	4798      	blx	r3
   2c304:	0002      	movs	r2, r0
   2c306:	693b      	ldr	r3, [r7, #16]
   2c308:	189b      	adds	r3, r3, r2
   2c30a:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2c30c:	68bb      	ldr	r3, [r7, #8]
   2c30e:	2b00      	cmp	r3, #0
   2c310:	dd17      	ble.n	2c342 <readPacket+0xae>
   2c312:	687b      	ldr	r3, [r7, #4]
   2c314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2c316:	689c      	ldr	r4, [r3, #8]
   2c318:	687b      	ldr	r3, [r7, #4]
   2c31a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2c31c:	687b      	ldr	r3, [r7, #4]
   2c31e:	695a      	ldr	r2, [r3, #20]
   2c320:	693b      	ldr	r3, [r7, #16]
   2c322:	18d6      	adds	r6, r2, r3
   2c324:	68bb      	ldr	r3, [r7, #8]
   2c326:	4698      	mov	r8, r3
   2c328:	683b      	ldr	r3, [r7, #0]
   2c32a:	0018      	movs	r0, r3
   2c32c:	4b11      	ldr	r3, [pc, #68]	; (2c374 <readPacket+0xe0>)
   2c32e:	4798      	blx	r3
   2c330:	0003      	movs	r3, r0
   2c332:	4642      	mov	r2, r8
   2c334:	0031      	movs	r1, r6
   2c336:	0028      	movs	r0, r5
   2c338:	47a0      	blx	r4
   2c33a:	0002      	movs	r2, r0
   2c33c:	68bb      	ldr	r3, [r7, #8]
   2c33e:	429a      	cmp	r2, r3
   2c340:	d10f      	bne.n	2c362 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2c342:	687b      	ldr	r3, [r7, #4]
   2c344:	695b      	ldr	r3, [r3, #20]
   2c346:	781a      	ldrb	r2, [r3, #0]
   2c348:	230c      	movs	r3, #12
   2c34a:	18fb      	adds	r3, r7, r3
   2c34c:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2c34e:	230c      	movs	r3, #12
   2c350:	18fb      	adds	r3, r7, r3
   2c352:	781b      	ldrb	r3, [r3, #0]
   2c354:	061b      	lsls	r3, r3, #24
   2c356:	0f1b      	lsrs	r3, r3, #28
   2c358:	b2db      	uxtb	r3, r3
   2c35a:	617b      	str	r3, [r7, #20]
   2c35c:	e002      	b.n	2c364 <readPacket+0xd0>
        goto exit;
   2c35e:	46c0      	nop			; (mov r8, r8)
   2c360:	e000      	b.n	2c364 <readPacket+0xd0>
        goto exit;
   2c362:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2c364:	697b      	ldr	r3, [r7, #20]
}
   2c366:	0018      	movs	r0, r3
   2c368:	46bd      	mov	sp, r7
   2c36a:	b006      	add	sp, #24
   2c36c:	bc04      	pop	{r2}
   2c36e:	4690      	mov	r8, r2
   2c370:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c372:	46c0      	nop			; (mov r8, r8)
   2c374:	0002cf39 	.word	0x0002cf39
   2c378:	0002c201 	.word	0x0002c201
   2c37c:	0002dd11 	.word	0x0002dd11

0002c380 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2c380:	b580      	push	{r7, lr}
   2c382:	b086      	sub	sp, #24
   2c384:	af00      	add	r7, sp, #0
   2c386:	6078      	str	r0, [r7, #4]
   2c388:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2c38a:	687b      	ldr	r3, [r7, #4]
   2c38c:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2c38e:	683b      	ldr	r3, [r7, #0]
   2c390:	689b      	ldr	r3, [r3, #8]
   2c392:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2c394:	683b      	ldr	r3, [r7, #0]
   2c396:	685b      	ldr	r3, [r3, #4]
   2c398:	001a      	movs	r2, r3
   2c39a:	693b      	ldr	r3, [r7, #16]
   2c39c:	189b      	adds	r3, r3, r2
   2c39e:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2c3a0:	e039      	b.n	2c416 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2c3a2:	693b      	ldr	r3, [r7, #16]
   2c3a4:	781b      	ldrb	r3, [r3, #0]
   2c3a6:	2b2f      	cmp	r3, #47	; 0x2f
   2c3a8:	d103      	bne.n	2c3b2 <isTopicMatched+0x32>
   2c3aa:	697b      	ldr	r3, [r7, #20]
   2c3ac:	781b      	ldrb	r3, [r3, #0]
   2c3ae:	2b2f      	cmp	r3, #47	; 0x2f
   2c3b0:	d13a      	bne.n	2c428 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2c3b2:	697b      	ldr	r3, [r7, #20]
   2c3b4:	781b      	ldrb	r3, [r3, #0]
   2c3b6:	2b2b      	cmp	r3, #43	; 0x2b
   2c3b8:	d009      	beq.n	2c3ce <isTopicMatched+0x4e>
   2c3ba:	697b      	ldr	r3, [r7, #20]
   2c3bc:	781b      	ldrb	r3, [r3, #0]
   2c3be:	2b23      	cmp	r3, #35	; 0x23
   2c3c0:	d005      	beq.n	2c3ce <isTopicMatched+0x4e>
   2c3c2:	697b      	ldr	r3, [r7, #20]
   2c3c4:	781a      	ldrb	r2, [r3, #0]
   2c3c6:	693b      	ldr	r3, [r7, #16]
   2c3c8:	781b      	ldrb	r3, [r3, #0]
   2c3ca:	429a      	cmp	r2, r3
   2c3cc:	d12e      	bne.n	2c42c <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2c3ce:	697b      	ldr	r3, [r7, #20]
   2c3d0:	781b      	ldrb	r3, [r3, #0]
   2c3d2:	2b2b      	cmp	r3, #43	; 0x2b
   2c3d4:	d112      	bne.n	2c3fc <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2c3d6:	693b      	ldr	r3, [r7, #16]
   2c3d8:	3301      	adds	r3, #1
   2c3da:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2c3dc:	e005      	b.n	2c3ea <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2c3de:	693b      	ldr	r3, [r7, #16]
   2c3e0:	3301      	adds	r3, #1
   2c3e2:	613b      	str	r3, [r7, #16]
   2c3e4:	693b      	ldr	r3, [r7, #16]
   2c3e6:	3301      	adds	r3, #1
   2c3e8:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2c3ea:	68fa      	ldr	r2, [r7, #12]
   2c3ec:	68bb      	ldr	r3, [r7, #8]
   2c3ee:	429a      	cmp	r2, r3
   2c3f0:	d20b      	bcs.n	2c40a <isTopicMatched+0x8a>
   2c3f2:	68fb      	ldr	r3, [r7, #12]
   2c3f4:	781b      	ldrb	r3, [r3, #0]
   2c3f6:	2b2f      	cmp	r3, #47	; 0x2f
   2c3f8:	d1f1      	bne.n	2c3de <isTopicMatched+0x5e>
   2c3fa:	e006      	b.n	2c40a <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2c3fc:	697b      	ldr	r3, [r7, #20]
   2c3fe:	781b      	ldrb	r3, [r3, #0]
   2c400:	2b23      	cmp	r3, #35	; 0x23
   2c402:	d102      	bne.n	2c40a <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2c404:	68bb      	ldr	r3, [r7, #8]
   2c406:	3b01      	subs	r3, #1
   2c408:	613b      	str	r3, [r7, #16]
        curf++;
   2c40a:	697b      	ldr	r3, [r7, #20]
   2c40c:	3301      	adds	r3, #1
   2c40e:	617b      	str	r3, [r7, #20]
        curn++;
   2c410:	693b      	ldr	r3, [r7, #16]
   2c412:	3301      	adds	r3, #1
   2c414:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2c416:	697b      	ldr	r3, [r7, #20]
   2c418:	781b      	ldrb	r3, [r3, #0]
   2c41a:	2b00      	cmp	r3, #0
   2c41c:	d007      	beq.n	2c42e <isTopicMatched+0xae>
   2c41e:	693a      	ldr	r2, [r7, #16]
   2c420:	68bb      	ldr	r3, [r7, #8]
   2c422:	429a      	cmp	r2, r3
   2c424:	d3bd      	bcc.n	2c3a2 <isTopicMatched+0x22>
   2c426:	e002      	b.n	2c42e <isTopicMatched+0xae>
            break;
   2c428:	46c0      	nop			; (mov r8, r8)
   2c42a:	e000      	b.n	2c42e <isTopicMatched+0xae>
            break;
   2c42c:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2c42e:	693a      	ldr	r2, [r7, #16]
   2c430:	68bb      	ldr	r3, [r7, #8]
   2c432:	429a      	cmp	r2, r3
   2c434:	d105      	bne.n	2c442 <isTopicMatched+0xc2>
   2c436:	697b      	ldr	r3, [r7, #20]
   2c438:	781b      	ldrb	r3, [r3, #0]
   2c43a:	2b00      	cmp	r3, #0
   2c43c:	d101      	bne.n	2c442 <isTopicMatched+0xc2>
   2c43e:	2301      	movs	r3, #1
   2c440:	e000      	b.n	2c444 <isTopicMatched+0xc4>
   2c442:	2300      	movs	r3, #0
   2c444:	b2db      	uxtb	r3, r3
}
   2c446:	0018      	movs	r0, r3
   2c448:	46bd      	mov	sp, r7
   2c44a:	b006      	add	sp, #24
   2c44c:	bd80      	pop	{r7, pc}
	...

0002c450 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2c450:	b580      	push	{r7, lr}
   2c452:	b08a      	sub	sp, #40	; 0x28
   2c454:	af00      	add	r7, sp, #0
   2c456:	60f8      	str	r0, [r7, #12]
   2c458:	60b9      	str	r1, [r7, #8]
   2c45a:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2c45c:	2301      	movs	r3, #1
   2c45e:	425b      	negs	r3, r3
   2c460:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2c462:	2300      	movs	r3, #0
   2c464:	627b      	str	r3, [r7, #36]	; 0x24
   2c466:	e044      	b.n	2c4f2 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2c468:	68fa      	ldr	r2, [r7, #12]
   2c46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c46c:	3304      	adds	r3, #4
   2c46e:	00db      	lsls	r3, r3, #3
   2c470:	18d3      	adds	r3, r2, r3
   2c472:	3304      	adds	r3, #4
   2c474:	681b      	ldr	r3, [r3, #0]
   2c476:	2b00      	cmp	r3, #0
   2c478:	d038      	beq.n	2c4ec <deliverMessage+0x9c>
   2c47a:	68fa      	ldr	r2, [r7, #12]
   2c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c47e:	3304      	adds	r3, #4
   2c480:	00db      	lsls	r3, r3, #3
   2c482:	18d3      	adds	r3, r2, r3
   2c484:	3304      	adds	r3, #4
   2c486:	681a      	ldr	r2, [r3, #0]
   2c488:	68bb      	ldr	r3, [r7, #8]
   2c48a:	0011      	movs	r1, r2
   2c48c:	0018      	movs	r0, r3
   2c48e:	4b28      	ldr	r3, [pc, #160]	; (2c530 <deliverMessage+0xe0>)
   2c490:	4798      	blx	r3
   2c492:	1e03      	subs	r3, r0, #0
   2c494:	d10d      	bne.n	2c4b2 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2c496:	68fa      	ldr	r2, [r7, #12]
   2c498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c49a:	3304      	adds	r3, #4
   2c49c:	00db      	lsls	r3, r3, #3
   2c49e:	18d3      	adds	r3, r2, r3
   2c4a0:	3304      	adds	r3, #4
   2c4a2:	681b      	ldr	r3, [r3, #0]
   2c4a4:	68ba      	ldr	r2, [r7, #8]
   2c4a6:	0011      	movs	r1, r2
   2c4a8:	0018      	movs	r0, r3
   2c4aa:	4b22      	ldr	r3, [pc, #136]	; (2c534 <deliverMessage+0xe4>)
   2c4ac:	4798      	blx	r3
   2c4ae:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2c4b0:	d01c      	beq.n	2c4ec <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2c4b2:	68fa      	ldr	r2, [r7, #12]
   2c4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c4b6:	3304      	adds	r3, #4
   2c4b8:	00db      	lsls	r3, r3, #3
   2c4ba:	18d3      	adds	r3, r2, r3
   2c4bc:	3308      	adds	r3, #8
   2c4be:	681b      	ldr	r3, [r3, #0]
   2c4c0:	2b00      	cmp	r3, #0
   2c4c2:	d013      	beq.n	2c4ec <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2c4c4:	687a      	ldr	r2, [r7, #4]
   2c4c6:	68b9      	ldr	r1, [r7, #8]
   2c4c8:	2318      	movs	r3, #24
   2c4ca:	18fb      	adds	r3, r7, r3
   2c4cc:	0018      	movs	r0, r3
   2c4ce:	4b1a      	ldr	r3, [pc, #104]	; (2c538 <deliverMessage+0xe8>)
   2c4d0:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2c4d2:	68fa      	ldr	r2, [r7, #12]
   2c4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c4d6:	3304      	adds	r3, #4
   2c4d8:	00db      	lsls	r3, r3, #3
   2c4da:	18d3      	adds	r3, r2, r3
   2c4dc:	3308      	adds	r3, #8
   2c4de:	681b      	ldr	r3, [r3, #0]
   2c4e0:	2218      	movs	r2, #24
   2c4e2:	18ba      	adds	r2, r7, r2
   2c4e4:	0010      	movs	r0, r2
   2c4e6:	4798      	blx	r3
                rc = SUCCESS;
   2c4e8:	2300      	movs	r3, #0
   2c4ea:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2c4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c4ee:	3301      	adds	r3, #1
   2c4f0:	627b      	str	r3, [r7, #36]	; 0x24
   2c4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c4f4:	2b04      	cmp	r3, #4
   2c4f6:	ddb7      	ble.n	2c468 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2c4f8:	6a3b      	ldr	r3, [r7, #32]
   2c4fa:	3301      	adds	r3, #1
   2c4fc:	d112      	bne.n	2c524 <deliverMessage+0xd4>
   2c4fe:	68fb      	ldr	r3, [r7, #12]
   2c500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2c502:	2b00      	cmp	r3, #0
   2c504:	d00e      	beq.n	2c524 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2c506:	687a      	ldr	r2, [r7, #4]
   2c508:	68b9      	ldr	r1, [r7, #8]
   2c50a:	2310      	movs	r3, #16
   2c50c:	18fb      	adds	r3, r7, r3
   2c50e:	0018      	movs	r0, r3
   2c510:	4b09      	ldr	r3, [pc, #36]	; (2c538 <deliverMessage+0xe8>)
   2c512:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2c514:	68fb      	ldr	r3, [r7, #12]
   2c516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2c518:	2210      	movs	r2, #16
   2c51a:	18ba      	adds	r2, r7, r2
   2c51c:	0010      	movs	r0, r2
   2c51e:	4798      	blx	r3
        rc = SUCCESS;
   2c520:	2300      	movs	r3, #0
   2c522:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2c524:	6a3b      	ldr	r3, [r7, #32]
}
   2c526:	0018      	movs	r0, r3
   2c528:	46bd      	mov	sp, r7
   2c52a:	b00a      	add	sp, #40	; 0x28
   2c52c:	bd80      	pop	{r7, pc}
   2c52e:	46c0      	nop			; (mov r8, r8)
   2c530:	0002e125 	.word	0x0002e125
   2c534:	0002c381 	.word	0x0002c381
   2c538:	0002c089 	.word	0x0002c089

0002c53c <keepalive>:


int keepalive(MQTTClient* c)
{
   2c53c:	b580      	push	{r7, lr}
   2c53e:	b088      	sub	sp, #32
   2c540:	af00      	add	r7, sp, #0
   2c542:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2c544:	2301      	movs	r3, #1
   2c546:	425b      	negs	r3, r3
   2c548:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2c54a:	687b      	ldr	r3, [r7, #4]
   2c54c:	699b      	ldr	r3, [r3, #24]
   2c54e:	2b00      	cmp	r3, #0
   2c550:	d102      	bne.n	2c558 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2c552:	2300      	movs	r3, #0
   2c554:	61fb      	str	r3, [r7, #28]
        goto exit;
   2c556:	e033      	b.n	2c5c0 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2c558:	687b      	ldr	r3, [r7, #4]
   2c55a:	3354      	adds	r3, #84	; 0x54
   2c55c:	0018      	movs	r0, r3
   2c55e:	4b1b      	ldr	r3, [pc, #108]	; (2c5cc <keepalive+0x90>)
   2c560:	4798      	blx	r3
   2c562:	1e03      	subs	r3, r0, #0
   2c564:	d02c      	beq.n	2c5c0 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2c566:	687b      	ldr	r3, [r7, #4]
   2c568:	7f1b      	ldrb	r3, [r3, #28]
   2c56a:	2b00      	cmp	r3, #0
   2c56c:	d128      	bne.n	2c5c0 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2c56e:	230c      	movs	r3, #12
   2c570:	18fb      	adds	r3, r7, r3
   2c572:	0018      	movs	r0, r3
   2c574:	4b16      	ldr	r3, [pc, #88]	; (2c5d0 <keepalive+0x94>)
   2c576:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2c578:	23fa      	movs	r3, #250	; 0xfa
   2c57a:	009a      	lsls	r2, r3, #2
   2c57c:	230c      	movs	r3, #12
   2c57e:	18fb      	adds	r3, r7, r3
   2c580:	0011      	movs	r1, r2
   2c582:	0018      	movs	r0, r3
   2c584:	4b13      	ldr	r3, [pc, #76]	; (2c5d4 <keepalive+0x98>)
   2c586:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2c588:	687b      	ldr	r3, [r7, #4]
   2c58a:	691a      	ldr	r2, [r3, #16]
   2c58c:	687b      	ldr	r3, [r7, #4]
   2c58e:	689b      	ldr	r3, [r3, #8]
   2c590:	0019      	movs	r1, r3
   2c592:	0010      	movs	r0, r2
   2c594:	4b10      	ldr	r3, [pc, #64]	; (2c5d8 <keepalive+0x9c>)
   2c596:	4798      	blx	r3
   2c598:	0003      	movs	r3, r0
   2c59a:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2c59c:	69bb      	ldr	r3, [r7, #24]
   2c59e:	2b00      	cmp	r3, #0
   2c5a0:	dd0e      	ble.n	2c5c0 <keepalive+0x84>
   2c5a2:	230c      	movs	r3, #12
   2c5a4:	18fa      	adds	r2, r7, r3
   2c5a6:	69b9      	ldr	r1, [r7, #24]
   2c5a8:	687b      	ldr	r3, [r7, #4]
   2c5aa:	0018      	movs	r0, r3
   2c5ac:	4b0b      	ldr	r3, [pc, #44]	; (2c5dc <keepalive+0xa0>)
   2c5ae:	4798      	blx	r3
   2c5b0:	0003      	movs	r3, r0
   2c5b2:	61fb      	str	r3, [r7, #28]
   2c5b4:	69fb      	ldr	r3, [r7, #28]
   2c5b6:	2b00      	cmp	r3, #0
   2c5b8:	d102      	bne.n	2c5c0 <keepalive+0x84>
                c->ping_outstanding = 1;
   2c5ba:	687b      	ldr	r3, [r7, #4]
   2c5bc:	2201      	movs	r2, #1
   2c5be:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2c5c0:	69fb      	ldr	r3, [r7, #28]
}
   2c5c2:	0018      	movs	r0, r3
   2c5c4:	46bd      	mov	sp, r7
   2c5c6:	b008      	add	sp, #32
   2c5c8:	bd80      	pop	{r7, pc}
   2c5ca:	46c0      	nop			; (mov r8, r8)
   2c5cc:	0002cebd 	.word	0x0002cebd
   2c5d0:	0002cf61 	.word	0x0002cf61
   2c5d4:	0002cee9 	.word	0x0002cee9
   2c5d8:	0002db35 	.word	0x0002db35
   2c5dc:	0002c0d9 	.word	0x0002c0d9

0002c5e0 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2c5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c5e2:	b095      	sub	sp, #84	; 0x54
   2c5e4:	af06      	add	r7, sp, #24
   2c5e6:	6078      	str	r0, [r7, #4]
   2c5e8:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2c5ea:	683a      	ldr	r2, [r7, #0]
   2c5ec:	687b      	ldr	r3, [r7, #4]
   2c5ee:	0011      	movs	r1, r2
   2c5f0:	0018      	movs	r0, r3
   2c5f2:	4b70      	ldr	r3, [pc, #448]	; (2c7b4 <cycle+0x1d4>)
   2c5f4:	4798      	blx	r3
   2c5f6:	0002      	movs	r2, r0
   2c5f8:	232e      	movs	r3, #46	; 0x2e
   2c5fa:	18fb      	adds	r3, r7, r3
   2c5fc:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2c5fe:	2300      	movs	r3, #0
   2c600:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2c602:	2300      	movs	r3, #0
   2c604:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2c606:	232e      	movs	r3, #46	; 0x2e
   2c608:	18fb      	adds	r3, r7, r3
   2c60a:	881b      	ldrh	r3, [r3, #0]
   2c60c:	2b0d      	cmp	r3, #13
   2c60e:	d900      	bls.n	2c612 <cycle+0x32>
   2c610:	e0bd      	b.n	2c78e <cycle+0x1ae>
   2c612:	009a      	lsls	r2, r3, #2
   2c614:	4b68      	ldr	r3, [pc, #416]	; (2c7b8 <cycle+0x1d8>)
   2c616:	18d3      	adds	r3, r2, r3
   2c618:	681b      	ldr	r3, [r3, #0]
   2c61a:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2c61c:	687b      	ldr	r3, [r7, #4]
   2c61e:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2c620:	687b      	ldr	r3, [r7, #4]
   2c622:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2c624:	001e      	movs	r6, r3
   2c626:	2310      	movs	r3, #16
   2c628:	18fb      	adds	r3, r7, r3
   2c62a:	1d1d      	adds	r5, r3, #4
   2c62c:	2310      	movs	r3, #16
   2c62e:	18fb      	adds	r3, r7, r3
   2c630:	1c5c      	adds	r4, r3, #1
   2c632:	230c      	movs	r3, #12
   2c634:	18f9      	adds	r1, r7, r3
   2c636:	2310      	movs	r3, #16
   2c638:	18fb      	adds	r3, r7, r3
   2c63a:	1c98      	adds	r0, r3, #2
   2c63c:	9604      	str	r6, [sp, #16]
   2c63e:	9203      	str	r2, [sp, #12]
   2c640:	2310      	movs	r3, #16
   2c642:	18fb      	adds	r3, r7, r3
   2c644:	330c      	adds	r3, #12
   2c646:	9302      	str	r3, [sp, #8]
   2c648:	2310      	movs	r3, #16
   2c64a:	18fb      	adds	r3, r7, r3
   2c64c:	3308      	adds	r3, #8
   2c64e:	9301      	str	r3, [sp, #4]
   2c650:	2320      	movs	r3, #32
   2c652:	18fb      	adds	r3, r7, r3
   2c654:	9300      	str	r3, [sp, #0]
   2c656:	002b      	movs	r3, r5
   2c658:	0022      	movs	r2, r4
   2c65a:	4c58      	ldr	r4, [pc, #352]	; (2c7bc <cycle+0x1dc>)
   2c65c:	47a0      	blx	r4
   2c65e:	0003      	movs	r3, r0
   2c660:	2b01      	cmp	r3, #1
   2c662:	d000      	beq.n	2c666 <cycle+0x86>
   2c664:	e098      	b.n	2c798 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2c666:	68fb      	ldr	r3, [r7, #12]
   2c668:	b2da      	uxtb	r2, r3
   2c66a:	2310      	movs	r3, #16
   2c66c:	18fb      	adds	r3, r7, r3
   2c66e:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2c670:	2310      	movs	r3, #16
   2c672:	18fa      	adds	r2, r7, r3
   2c674:	2320      	movs	r3, #32
   2c676:	18f9      	adds	r1, r7, r3
   2c678:	687b      	ldr	r3, [r7, #4]
   2c67a:	0018      	movs	r0, r3
   2c67c:	4b50      	ldr	r3, [pc, #320]	; (2c7c0 <cycle+0x1e0>)
   2c67e:	4798      	blx	r3
            if (msg.qos != QOS0)
   2c680:	2310      	movs	r3, #16
   2c682:	18fb      	adds	r3, r7, r3
   2c684:	781b      	ldrb	r3, [r3, #0]
   2c686:	2b00      	cmp	r3, #0
   2c688:	d100      	bne.n	2c68c <cycle+0xac>
   2c68a:	e07d      	b.n	2c788 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2c68c:	2310      	movs	r3, #16
   2c68e:	18fb      	adds	r3, r7, r3
   2c690:	781b      	ldrb	r3, [r3, #0]
   2c692:	2b01      	cmp	r3, #1
   2c694:	d10f      	bne.n	2c6b6 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2c696:	687b      	ldr	r3, [r7, #4]
   2c698:	6918      	ldr	r0, [r3, #16]
   2c69a:	687b      	ldr	r3, [r7, #4]
   2c69c:	689b      	ldr	r3, [r3, #8]
   2c69e:	0019      	movs	r1, r3
   2c6a0:	2310      	movs	r3, #16
   2c6a2:	18fb      	adds	r3, r7, r3
   2c6a4:	889b      	ldrh	r3, [r3, #4]
   2c6a6:	9300      	str	r3, [sp, #0]
   2c6a8:	2300      	movs	r3, #0
   2c6aa:	2204      	movs	r2, #4
   2c6ac:	4c45      	ldr	r4, [pc, #276]	; (2c7c4 <cycle+0x1e4>)
   2c6ae:	47a0      	blx	r4
   2c6b0:	0003      	movs	r3, r0
   2c6b2:	637b      	str	r3, [r7, #52]	; 0x34
   2c6b4:	e013      	b.n	2c6de <cycle+0xfe>
                else if (msg.qos == QOS2)
   2c6b6:	2310      	movs	r3, #16
   2c6b8:	18fb      	adds	r3, r7, r3
   2c6ba:	781b      	ldrb	r3, [r3, #0]
   2c6bc:	2b02      	cmp	r3, #2
   2c6be:	d10e      	bne.n	2c6de <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2c6c0:	687b      	ldr	r3, [r7, #4]
   2c6c2:	6918      	ldr	r0, [r3, #16]
   2c6c4:	687b      	ldr	r3, [r7, #4]
   2c6c6:	689b      	ldr	r3, [r3, #8]
   2c6c8:	0019      	movs	r1, r3
   2c6ca:	2310      	movs	r3, #16
   2c6cc:	18fb      	adds	r3, r7, r3
   2c6ce:	889b      	ldrh	r3, [r3, #4]
   2c6d0:	9300      	str	r3, [sp, #0]
   2c6d2:	2300      	movs	r3, #0
   2c6d4:	2205      	movs	r2, #5
   2c6d6:	4c3b      	ldr	r4, [pc, #236]	; (2c7c4 <cycle+0x1e4>)
   2c6d8:	47a0      	blx	r4
   2c6da:	0003      	movs	r3, r0
   2c6dc:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2c6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2c6e0:	2b00      	cmp	r3, #0
   2c6e2:	dc03      	bgt.n	2c6ec <cycle+0x10c>
                    rc = FAILURE;
   2c6e4:	2301      	movs	r3, #1
   2c6e6:	425b      	negs	r3, r3
   2c6e8:	633b      	str	r3, [r7, #48]	; 0x30
   2c6ea:	e007      	b.n	2c6fc <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2c6ec:	683a      	ldr	r2, [r7, #0]
   2c6ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2c6f0:	687b      	ldr	r3, [r7, #4]
   2c6f2:	0018      	movs	r0, r3
   2c6f4:	4b34      	ldr	r3, [pc, #208]	; (2c7c8 <cycle+0x1e8>)
   2c6f6:	4798      	blx	r3
   2c6f8:	0003      	movs	r3, r0
   2c6fa:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2c6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2c6fe:	3301      	adds	r3, #1
   2c700:	d142      	bne.n	2c788 <cycle+0x1a8>
                    goto exit; // there was a problem
   2c702:	46c0      	nop			; (mov r8, r8)
   2c704:	e049      	b.n	2c79a <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2c706:	687b      	ldr	r3, [r7, #4]
   2c708:	695c      	ldr	r4, [r3, #20]
   2c70a:	687b      	ldr	r3, [r7, #4]
   2c70c:	68db      	ldr	r3, [r3, #12]
   2c70e:	220a      	movs	r2, #10
   2c710:	18ba      	adds	r2, r7, r2
   2c712:	2109      	movs	r1, #9
   2c714:	1879      	adds	r1, r7, r1
   2c716:	2008      	movs	r0, #8
   2c718:	1838      	adds	r0, r7, r0
   2c71a:	9300      	str	r3, [sp, #0]
   2c71c:	0023      	movs	r3, r4
   2c71e:	4c2b      	ldr	r4, [pc, #172]	; (2c7cc <cycle+0x1ec>)
   2c720:	47a0      	blx	r4
   2c722:	0003      	movs	r3, r0
   2c724:	2b01      	cmp	r3, #1
   2c726:	d003      	beq.n	2c730 <cycle+0x150>
                rc = FAILURE;
   2c728:	2301      	movs	r3, #1
   2c72a:	425b      	negs	r3, r3
   2c72c:	633b      	str	r3, [r7, #48]	; 0x30
   2c72e:	e023      	b.n	2c778 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2c730:	687b      	ldr	r3, [r7, #4]
   2c732:	6918      	ldr	r0, [r3, #16]
   2c734:	687b      	ldr	r3, [r7, #4]
   2c736:	689b      	ldr	r3, [r3, #8]
   2c738:	0019      	movs	r1, r3
   2c73a:	230a      	movs	r3, #10
   2c73c:	18fb      	adds	r3, r7, r3
   2c73e:	881b      	ldrh	r3, [r3, #0]
   2c740:	9300      	str	r3, [sp, #0]
   2c742:	2300      	movs	r3, #0
   2c744:	2206      	movs	r2, #6
   2c746:	4c1f      	ldr	r4, [pc, #124]	; (2c7c4 <cycle+0x1e4>)
   2c748:	47a0      	blx	r4
   2c74a:	0003      	movs	r3, r0
   2c74c:	637b      	str	r3, [r7, #52]	; 0x34
   2c74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2c750:	2b00      	cmp	r3, #0
   2c752:	dc03      	bgt.n	2c75c <cycle+0x17c>
                rc = FAILURE;
   2c754:	2301      	movs	r3, #1
   2c756:	425b      	negs	r3, r3
   2c758:	633b      	str	r3, [r7, #48]	; 0x30
   2c75a:	e00d      	b.n	2c778 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2c75c:	683a      	ldr	r2, [r7, #0]
   2c75e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2c760:	687b      	ldr	r3, [r7, #4]
   2c762:	0018      	movs	r0, r3
   2c764:	4b18      	ldr	r3, [pc, #96]	; (2c7c8 <cycle+0x1e8>)
   2c766:	4798      	blx	r3
   2c768:	0003      	movs	r3, r0
   2c76a:	633b      	str	r3, [r7, #48]	; 0x30
   2c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2c76e:	2b00      	cmp	r3, #0
   2c770:	d002      	beq.n	2c778 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2c772:	2301      	movs	r3, #1
   2c774:	425b      	negs	r3, r3
   2c776:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2c778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2c77a:	3301      	adds	r3, #1
   2c77c:	d106      	bne.n	2c78c <cycle+0x1ac>
                goto exit; // there was a problem
   2c77e:	e00c      	b.n	2c79a <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2c780:	687b      	ldr	r3, [r7, #4]
   2c782:	2200      	movs	r2, #0
   2c784:	771a      	strb	r2, [r3, #28]
            break;
   2c786:	e002      	b.n	2c78e <cycle+0x1ae>
            break;
   2c788:	46c0      	nop			; (mov r8, r8)
   2c78a:	e000      	b.n	2c78e <cycle+0x1ae>
            break;
   2c78c:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2c78e:	687b      	ldr	r3, [r7, #4]
   2c790:	0018      	movs	r0, r3
   2c792:	4b0f      	ldr	r3, [pc, #60]	; (2c7d0 <cycle+0x1f0>)
   2c794:	4798      	blx	r3
   2c796:	e000      	b.n	2c79a <cycle+0x1ba>
                goto exit;
   2c798:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2c79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2c79c:	2b00      	cmp	r3, #0
   2c79e:	d103      	bne.n	2c7a8 <cycle+0x1c8>
        rc = packet_type;
   2c7a0:	232e      	movs	r3, #46	; 0x2e
   2c7a2:	18fb      	adds	r3, r7, r3
   2c7a4:	881b      	ldrh	r3, [r3, #0]
   2c7a6:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2c7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2c7aa:	0018      	movs	r0, r3
   2c7ac:	46bd      	mov	sp, r7
   2c7ae:	b00f      	add	sp, #60	; 0x3c
   2c7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c7b2:	46c0      	nop			; (mov r8, r8)
   2c7b4:	0002c295 	.word	0x0002c295
   2c7b8:	00036fbc 	.word	0x00036fbc
   2c7bc:	0002db59 	.word	0x0002db59
   2c7c0:	0002c451 	.word	0x0002c451
   2c7c4:	0002e351 	.word	0x0002e351
   2c7c8:	0002c0d9 	.word	0x0002c0d9
   2c7cc:	0002dc5d 	.word	0x0002dc5d
   2c7d0:	0002c53d 	.word	0x0002c53d

0002c7d4 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2c7d4:	b580      	push	{r7, lr}
   2c7d6:	b086      	sub	sp, #24
   2c7d8:	af00      	add	r7, sp, #0
   2c7da:	6078      	str	r0, [r7, #4]
   2c7dc:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2c7de:	2300      	movs	r3, #0
   2c7e0:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2c7e2:	2308      	movs	r3, #8
   2c7e4:	18fb      	adds	r3, r7, r3
   2c7e6:	0018      	movs	r0, r3
   2c7e8:	4b11      	ldr	r3, [pc, #68]	; (2c830 <MQTTYield+0x5c>)
   2c7ea:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2c7ec:	683a      	ldr	r2, [r7, #0]
   2c7ee:	2308      	movs	r3, #8
   2c7f0:	18fb      	adds	r3, r7, r3
   2c7f2:	0011      	movs	r1, r2
   2c7f4:	0018      	movs	r0, r3
   2c7f6:	4b0f      	ldr	r3, [pc, #60]	; (2c834 <MQTTYield+0x60>)
   2c7f8:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2c7fa:	2308      	movs	r3, #8
   2c7fc:	18fa      	adds	r2, r7, r3
   2c7fe:	687b      	ldr	r3, [r7, #4]
   2c800:	0011      	movs	r1, r2
   2c802:	0018      	movs	r0, r3
   2c804:	4b0c      	ldr	r3, [pc, #48]	; (2c838 <MQTTYield+0x64>)
   2c806:	4798      	blx	r3
   2c808:	0003      	movs	r3, r0
   2c80a:	3301      	adds	r3, #1
   2c80c:	d103      	bne.n	2c816 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2c80e:	2301      	movs	r3, #1
   2c810:	425b      	negs	r3, r3
   2c812:	617b      	str	r3, [r7, #20]
            break;
   2c814:	e006      	b.n	2c824 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2c816:	2308      	movs	r3, #8
   2c818:	18fb      	adds	r3, r7, r3
   2c81a:	0018      	movs	r0, r3
   2c81c:	4b07      	ldr	r3, [pc, #28]	; (2c83c <MQTTYield+0x68>)
   2c81e:	4798      	blx	r3
   2c820:	1e03      	subs	r3, r0, #0
   2c822:	d0ea      	beq.n	2c7fa <MQTTYield+0x26>
        
    return rc;
   2c824:	697b      	ldr	r3, [r7, #20]
}
   2c826:	0018      	movs	r0, r3
   2c828:	46bd      	mov	sp, r7
   2c82a:	b006      	add	sp, #24
   2c82c:	bd80      	pop	{r7, pc}
   2c82e:	46c0      	nop			; (mov r8, r8)
   2c830:	0002cf61 	.word	0x0002cf61
   2c834:	0002cee9 	.word	0x0002cee9
   2c838:	0002c5e1 	.word	0x0002c5e1
   2c83c:	0002cebd 	.word	0x0002cebd

0002c840 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2c840:	b580      	push	{r7, lr}
   2c842:	b086      	sub	sp, #24
   2c844:	af00      	add	r7, sp, #0
   2c846:	60f8      	str	r0, [r7, #12]
   2c848:	60b9      	str	r1, [r7, #8]
   2c84a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2c84c:	2301      	movs	r3, #1
   2c84e:	425b      	negs	r3, r3
   2c850:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2c852:	687b      	ldr	r3, [r7, #4]
   2c854:	0018      	movs	r0, r3
   2c856:	4b0b      	ldr	r3, [pc, #44]	; (2c884 <waitfor+0x44>)
   2c858:	4798      	blx	r3
   2c85a:	1e03      	subs	r3, r0, #0
   2c85c:	d10c      	bne.n	2c878 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2c85e:	687a      	ldr	r2, [r7, #4]
   2c860:	68fb      	ldr	r3, [r7, #12]
   2c862:	0011      	movs	r1, r2
   2c864:	0018      	movs	r0, r3
   2c866:	4b08      	ldr	r3, [pc, #32]	; (2c888 <waitfor+0x48>)
   2c868:	4798      	blx	r3
   2c86a:	0003      	movs	r3, r0
   2c86c:	617b      	str	r3, [r7, #20]
   2c86e:	697a      	ldr	r2, [r7, #20]
   2c870:	68bb      	ldr	r3, [r7, #8]
   2c872:	429a      	cmp	r2, r3
   2c874:	d1ed      	bne.n	2c852 <waitfor+0x12>
   2c876:	e000      	b.n	2c87a <waitfor+0x3a>
            break; // we timed out
   2c878:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2c87a:	697b      	ldr	r3, [r7, #20]
}
   2c87c:	0018      	movs	r0, r3
   2c87e:	46bd      	mov	sp, r7
   2c880:	b006      	add	sp, #24
   2c882:	bd80      	pop	{r7, pc}
   2c884:	0002cebd 	.word	0x0002cebd
   2c888:	0002c5e1 	.word	0x0002c5e1

0002c88c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2c88c:	b590      	push	{r4, r7, lr}
   2c88e:	b09f      	sub	sp, #124	; 0x7c
   2c890:	af00      	add	r7, sp, #0
   2c892:	6078      	str	r0, [r7, #4]
   2c894:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2c896:	2301      	movs	r3, #1
   2c898:	425b      	negs	r3, r3
   2c89a:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2c89c:	230c      	movs	r3, #12
   2c89e:	18fa      	adds	r2, r7, r3
   2c8a0:	4b41      	ldr	r3, [pc, #260]	; (2c9a8 <MQTTConnect+0x11c>)
   2c8a2:	0010      	movs	r0, r2
   2c8a4:	0019      	movs	r1, r3
   2c8a6:	2358      	movs	r3, #88	; 0x58
   2c8a8:	001a      	movs	r2, r3
   2c8aa:	4b40      	ldr	r3, [pc, #256]	; (2c9ac <MQTTConnect+0x120>)
   2c8ac:	4798      	blx	r3
    int len = 0;
   2c8ae:	2300      	movs	r3, #0
   2c8b0:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2c8b2:	687b      	ldr	r3, [r7, #4]
   2c8b4:	6a1b      	ldr	r3, [r3, #32]
   2c8b6:	2b00      	cmp	r3, #0
   2c8b8:	d166      	bne.n	2c988 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2c8ba:	2364      	movs	r3, #100	; 0x64
   2c8bc:	18fb      	adds	r3, r7, r3
   2c8be:	0018      	movs	r0, r3
   2c8c0:	4b3b      	ldr	r3, [pc, #236]	; (2c9b0 <MQTTConnect+0x124>)
   2c8c2:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2c8c4:	687b      	ldr	r3, [r7, #4]
   2c8c6:	685a      	ldr	r2, [r3, #4]
   2c8c8:	2364      	movs	r3, #100	; 0x64
   2c8ca:	18fb      	adds	r3, r7, r3
   2c8cc:	0011      	movs	r1, r2
   2c8ce:	0018      	movs	r0, r3
   2c8d0:	4b38      	ldr	r3, [pc, #224]	; (2c9b4 <MQTTConnect+0x128>)
   2c8d2:	4798      	blx	r3

    if (options == 0)
   2c8d4:	683b      	ldr	r3, [r7, #0]
   2c8d6:	2b00      	cmp	r3, #0
   2c8d8:	d102      	bne.n	2c8e0 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2c8da:	230c      	movs	r3, #12
   2c8dc:	18fb      	adds	r3, r7, r3
   2c8de:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2c8e0:	683b      	ldr	r3, [r7, #0]
   2c8e2:	8b1b      	ldrh	r3, [r3, #24]
   2c8e4:	001a      	movs	r2, r3
   2c8e6:	687b      	ldr	r3, [r7, #4]
   2c8e8:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2c8ea:	687b      	ldr	r3, [r7, #4]
   2c8ec:	3354      	adds	r3, #84	; 0x54
   2c8ee:	001a      	movs	r2, r3
   2c8f0:	687b      	ldr	r3, [r7, #4]
   2c8f2:	699b      	ldr	r3, [r3, #24]
   2c8f4:	0019      	movs	r1, r3
   2c8f6:	0010      	movs	r0, r2
   2c8f8:	4b2f      	ldr	r3, [pc, #188]	; (2c9b8 <MQTTConnect+0x12c>)
   2c8fa:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2c8fc:	687b      	ldr	r3, [r7, #4]
   2c8fe:	6918      	ldr	r0, [r3, #16]
   2c900:	687b      	ldr	r3, [r7, #4]
   2c902:	689b      	ldr	r3, [r3, #8]
   2c904:	0019      	movs	r1, r3
   2c906:	683b      	ldr	r3, [r7, #0]
   2c908:	001a      	movs	r2, r3
   2c90a:	4b2c      	ldr	r3, [pc, #176]	; (2c9bc <MQTTConnect+0x130>)
   2c90c:	4798      	blx	r3
   2c90e:	0003      	movs	r3, r0
   2c910:	673b      	str	r3, [r7, #112]	; 0x70
   2c912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2c914:	2b00      	cmp	r3, #0
   2c916:	dd39      	ble.n	2c98c <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2c918:	2364      	movs	r3, #100	; 0x64
   2c91a:	18fa      	adds	r2, r7, r3
   2c91c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2c91e:	687b      	ldr	r3, [r7, #4]
   2c920:	0018      	movs	r0, r3
   2c922:	4b27      	ldr	r3, [pc, #156]	; (2c9c0 <MQTTConnect+0x134>)
   2c924:	4798      	blx	r3
   2c926:	0003      	movs	r3, r0
   2c928:	677b      	str	r3, [r7, #116]	; 0x74
   2c92a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2c92c:	2b00      	cmp	r3, #0
   2c92e:	d12f      	bne.n	2c990 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2c930:	2364      	movs	r3, #100	; 0x64
   2c932:	18fa      	adds	r2, r7, r3
   2c934:	687b      	ldr	r3, [r7, #4]
   2c936:	2102      	movs	r1, #2
   2c938:	0018      	movs	r0, r3
   2c93a:	4b22      	ldr	r3, [pc, #136]	; (2c9c4 <MQTTConnect+0x138>)
   2c93c:	4798      	blx	r3
   2c93e:	0003      	movs	r3, r0
   2c940:	2b02      	cmp	r3, #2
   2c942:	d11d      	bne.n	2c980 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2c944:	230b      	movs	r3, #11
   2c946:	18fb      	adds	r3, r7, r3
   2c948:	22ff      	movs	r2, #255	; 0xff
   2c94a:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2c94c:	230a      	movs	r3, #10
   2c94e:	18fb      	adds	r3, r7, r3
   2c950:	2200      	movs	r2, #0
   2c952:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2c954:	687b      	ldr	r3, [r7, #4]
   2c956:	695a      	ldr	r2, [r3, #20]
   2c958:	687b      	ldr	r3, [r7, #4]
   2c95a:	68db      	ldr	r3, [r3, #12]
   2c95c:	210b      	movs	r1, #11
   2c95e:	1879      	adds	r1, r7, r1
   2c960:	200a      	movs	r0, #10
   2c962:	1838      	adds	r0, r7, r0
   2c964:	4c18      	ldr	r4, [pc, #96]	; (2c9c8 <MQTTConnect+0x13c>)
   2c966:	47a0      	blx	r4
   2c968:	0003      	movs	r3, r0
   2c96a:	2b01      	cmp	r3, #1
   2c96c:	d104      	bne.n	2c978 <MQTTConnect+0xec>
            rc = connack_rc;
   2c96e:	230b      	movs	r3, #11
   2c970:	18fb      	adds	r3, r7, r3
   2c972:	781b      	ldrb	r3, [r3, #0]
   2c974:	677b      	str	r3, [r7, #116]	; 0x74
   2c976:	e00c      	b.n	2c992 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2c978:	2301      	movs	r3, #1
   2c97a:	425b      	negs	r3, r3
   2c97c:	677b      	str	r3, [r7, #116]	; 0x74
   2c97e:	e008      	b.n	2c992 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2c980:	2301      	movs	r3, #1
   2c982:	425b      	negs	r3, r3
   2c984:	677b      	str	r3, [r7, #116]	; 0x74
   2c986:	e004      	b.n	2c992 <MQTTConnect+0x106>
		goto exit;
   2c988:	46c0      	nop			; (mov r8, r8)
   2c98a:	e002      	b.n	2c992 <MQTTConnect+0x106>
        goto exit;
   2c98c:	46c0      	nop			; (mov r8, r8)
   2c98e:	e000      	b.n	2c992 <MQTTConnect+0x106>
        goto exit; // there was a problem
   2c990:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2c992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2c994:	2b00      	cmp	r3, #0
   2c996:	d102      	bne.n	2c99e <MQTTConnect+0x112>
        c->isconnected = 1;
   2c998:	687b      	ldr	r3, [r7, #4]
   2c99a:	2201      	movs	r2, #1
   2c99c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2c99e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2c9a0:	0018      	movs	r0, r3
   2c9a2:	46bd      	mov	sp, r7
   2c9a4:	b01f      	add	sp, #124	; 0x7c
   2c9a6:	bd90      	pop	{r4, r7, pc}
   2c9a8:	00036ff4 	.word	0x00036ff4
   2c9ac:	0003216d 	.word	0x0003216d
   2c9b0:	0002cf61 	.word	0x0002cf61
   2c9b4:	0002cee9 	.word	0x0002cee9
   2c9b8:	0002cf11 	.word	0x0002cf11
   2c9bc:	0002d73d 	.word	0x0002d73d
   2c9c0:	0002c0d9 	.word	0x0002c0d9
   2c9c4:	0002c841 	.word	0x0002c841
   2c9c8:	0002d9b9 	.word	0x0002d9b9

0002c9cc <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2c9cc:	b5b0      	push	{r4, r5, r7, lr}
   2c9ce:	b096      	sub	sp, #88	; 0x58
   2c9d0:	af04      	add	r7, sp, #16
   2c9d2:	60f8      	str	r0, [r7, #12]
   2c9d4:	60b9      	str	r1, [r7, #8]
   2c9d6:	603b      	str	r3, [r7, #0]
   2c9d8:	1dfb      	adds	r3, r7, #7
   2c9da:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2c9dc:	2301      	movs	r3, #1
   2c9de:	425b      	negs	r3, r3
   2c9e0:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2c9e2:	2300      	movs	r3, #0
   2c9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2c9e6:	2324      	movs	r3, #36	; 0x24
   2c9e8:	18fb      	adds	r3, r7, r3
   2c9ea:	2200      	movs	r2, #0
   2c9ec:	601a      	str	r2, [r3, #0]
   2c9ee:	2324      	movs	r3, #36	; 0x24
   2c9f0:	18fb      	adds	r3, r7, r3
   2c9f2:	2200      	movs	r2, #0
   2c9f4:	605a      	str	r2, [r3, #4]
   2c9f6:	2324      	movs	r3, #36	; 0x24
   2c9f8:	18fb      	adds	r3, r7, r3
   2c9fa:	2200      	movs	r2, #0
   2c9fc:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2c9fe:	1dfb      	adds	r3, r7, #7
   2ca00:	781b      	ldrb	r3, [r3, #0]
   2ca02:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2ca04:	2324      	movs	r3, #36	; 0x24
   2ca06:	18fb      	adds	r3, r7, r3
   2ca08:	68ba      	ldr	r2, [r7, #8]
   2ca0a:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2ca0c:	68fb      	ldr	r3, [r7, #12]
   2ca0e:	6a1b      	ldr	r3, [r3, #32]
   2ca10:	2b00      	cmp	r3, #0
   2ca12:	d100      	bne.n	2ca16 <MQTTSubscribe+0x4a>
   2ca14:	e088      	b.n	2cb28 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2ca16:	2330      	movs	r3, #48	; 0x30
   2ca18:	18fb      	adds	r3, r7, r3
   2ca1a:	0018      	movs	r0, r3
   2ca1c:	4b47      	ldr	r3, [pc, #284]	; (2cb3c <MQTTSubscribe+0x170>)
   2ca1e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2ca20:	68fb      	ldr	r3, [r7, #12]
   2ca22:	685a      	ldr	r2, [r3, #4]
   2ca24:	2330      	movs	r3, #48	; 0x30
   2ca26:	18fb      	adds	r3, r7, r3
   2ca28:	0011      	movs	r1, r2
   2ca2a:	0018      	movs	r0, r3
   2ca2c:	4b44      	ldr	r3, [pc, #272]	; (2cb40 <MQTTSubscribe+0x174>)
   2ca2e:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2ca30:	68fb      	ldr	r3, [r7, #12]
   2ca32:	691c      	ldr	r4, [r3, #16]
   2ca34:	68fb      	ldr	r3, [r7, #12]
   2ca36:	689b      	ldr	r3, [r3, #8]
   2ca38:	001d      	movs	r5, r3
   2ca3a:	68fb      	ldr	r3, [r7, #12]
   2ca3c:	0018      	movs	r0, r3
   2ca3e:	4b41      	ldr	r3, [pc, #260]	; (2cb44 <MQTTSubscribe+0x178>)
   2ca40:	4798      	blx	r3
   2ca42:	0003      	movs	r3, r0
   2ca44:	b29a      	uxth	r2, r3
   2ca46:	2320      	movs	r3, #32
   2ca48:	18fb      	adds	r3, r7, r3
   2ca4a:	9302      	str	r3, [sp, #8]
   2ca4c:	2324      	movs	r3, #36	; 0x24
   2ca4e:	18fb      	adds	r3, r7, r3
   2ca50:	9301      	str	r3, [sp, #4]
   2ca52:	2301      	movs	r3, #1
   2ca54:	9300      	str	r3, [sp, #0]
   2ca56:	0013      	movs	r3, r2
   2ca58:	2200      	movs	r2, #0
   2ca5a:	0029      	movs	r1, r5
   2ca5c:	0020      	movs	r0, r4
   2ca5e:	4c3a      	ldr	r4, [pc, #232]	; (2cb48 <MQTTSubscribe+0x17c>)
   2ca60:	47a0      	blx	r4
   2ca62:	0003      	movs	r3, r0
   2ca64:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2ca66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ca68:	2b00      	cmp	r3, #0
   2ca6a:	dd5f      	ble.n	2cb2c <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2ca6c:	2330      	movs	r3, #48	; 0x30
   2ca6e:	18fa      	adds	r2, r7, r3
   2ca70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2ca72:	68fb      	ldr	r3, [r7, #12]
   2ca74:	0018      	movs	r0, r3
   2ca76:	4b35      	ldr	r3, [pc, #212]	; (2cb4c <MQTTSubscribe+0x180>)
   2ca78:	4798      	blx	r3
   2ca7a:	0003      	movs	r3, r0
   2ca7c:	647b      	str	r3, [r7, #68]	; 0x44
   2ca7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2ca80:	2b00      	cmp	r3, #0
   2ca82:	d155      	bne.n	2cb30 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2ca84:	2330      	movs	r3, #48	; 0x30
   2ca86:	18fa      	adds	r2, r7, r3
   2ca88:	68fb      	ldr	r3, [r7, #12]
   2ca8a:	2109      	movs	r1, #9
   2ca8c:	0018      	movs	r0, r3
   2ca8e:	4b30      	ldr	r3, [pc, #192]	; (2cb50 <MQTTSubscribe+0x184>)
   2ca90:	4798      	blx	r3
   2ca92:	0003      	movs	r3, r0
   2ca94:	2b09      	cmp	r3, #9
   2ca96:	d143      	bne.n	2cb20 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2ca98:	2300      	movs	r3, #0
   2ca9a:	61fb      	str	r3, [r7, #28]
   2ca9c:	2301      	movs	r3, #1
   2ca9e:	425b      	negs	r3, r3
   2caa0:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2caa2:	68fb      	ldr	r3, [r7, #12]
   2caa4:	695a      	ldr	r2, [r3, #20]
   2caa6:	68fb      	ldr	r3, [r7, #12]
   2caa8:	68db      	ldr	r3, [r3, #12]
   2caaa:	001c      	movs	r4, r3
   2caac:	2318      	movs	r3, #24
   2caae:	18fb      	adds	r3, r7, r3
   2cab0:	211c      	movs	r1, #28
   2cab2:	1879      	adds	r1, r7, r1
   2cab4:	2016      	movs	r0, #22
   2cab6:	1838      	adds	r0, r7, r0
   2cab8:	9401      	str	r4, [sp, #4]
   2caba:	9200      	str	r2, [sp, #0]
   2cabc:	000a      	movs	r2, r1
   2cabe:	2101      	movs	r1, #1
   2cac0:	4c24      	ldr	r4, [pc, #144]	; (2cb54 <MQTTSubscribe+0x188>)
   2cac2:	47a0      	blx	r4
   2cac4:	0003      	movs	r3, r0
   2cac6:	2b01      	cmp	r3, #1
   2cac8:	d101      	bne.n	2cace <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2caca:	69bb      	ldr	r3, [r7, #24]
   2cacc:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2cace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2cad0:	2b80      	cmp	r3, #128	; 0x80
   2cad2:	d02e      	beq.n	2cb32 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2cad4:	2300      	movs	r3, #0
   2cad6:	643b      	str	r3, [r7, #64]	; 0x40
   2cad8:	e01e      	b.n	2cb18 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2cada:	68fa      	ldr	r2, [r7, #12]
   2cadc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cade:	3304      	adds	r3, #4
   2cae0:	00db      	lsls	r3, r3, #3
   2cae2:	18d3      	adds	r3, r2, r3
   2cae4:	3304      	adds	r3, #4
   2cae6:	681b      	ldr	r3, [r3, #0]
   2cae8:	2b00      	cmp	r3, #0
   2caea:	d112      	bne.n	2cb12 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2caec:	68fa      	ldr	r2, [r7, #12]
   2caee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2caf0:	3304      	adds	r3, #4
   2caf2:	00db      	lsls	r3, r3, #3
   2caf4:	18d3      	adds	r3, r2, r3
   2caf6:	3304      	adds	r3, #4
   2caf8:	68ba      	ldr	r2, [r7, #8]
   2cafa:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2cafc:	68fa      	ldr	r2, [r7, #12]
   2cafe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cb00:	3304      	adds	r3, #4
   2cb02:	00db      	lsls	r3, r3, #3
   2cb04:	18d3      	adds	r3, r2, r3
   2cb06:	3308      	adds	r3, #8
   2cb08:	683a      	ldr	r2, [r7, #0]
   2cb0a:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2cb0c:	2300      	movs	r3, #0
   2cb0e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2cb10:	e00f      	b.n	2cb32 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2cb12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cb14:	3301      	adds	r3, #1
   2cb16:	643b      	str	r3, [r7, #64]	; 0x40
   2cb18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cb1a:	2b04      	cmp	r3, #4
   2cb1c:	dddd      	ble.n	2cada <MQTTSubscribe+0x10e>
   2cb1e:	e008      	b.n	2cb32 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2cb20:	2301      	movs	r3, #1
   2cb22:	425b      	negs	r3, r3
   2cb24:	647b      	str	r3, [r7, #68]	; 0x44
   2cb26:	e004      	b.n	2cb32 <MQTTSubscribe+0x166>
		goto exit;
   2cb28:	46c0      	nop			; (mov r8, r8)
   2cb2a:	e002      	b.n	2cb32 <MQTTSubscribe+0x166>
        goto exit;
   2cb2c:	46c0      	nop			; (mov r8, r8)
   2cb2e:	e000      	b.n	2cb32 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2cb30:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2cb32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2cb34:	0018      	movs	r0, r3
   2cb36:	46bd      	mov	sp, r7
   2cb38:	b012      	add	sp, #72	; 0x48
   2cb3a:	bdb0      	pop	{r4, r5, r7, pc}
   2cb3c:	0002cf61 	.word	0x0002cf61
   2cb40:	0002cee9 	.word	0x0002cee9
   2cb44:	0002c0a9 	.word	0x0002c0a9
   2cb48:	0002e499 	.word	0x0002e499
   2cb4c:	0002c0d9 	.word	0x0002c0d9
   2cb50:	0002c841 	.word	0x0002c841
   2cb54:	0002e5e9 	.word	0x0002e5e9

0002cb58 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2cb58:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cb5a:	46ce      	mov	lr, r9
   2cb5c:	4647      	mov	r7, r8
   2cb5e:	b580      	push	{r7, lr}
   2cb60:	b097      	sub	sp, #92	; 0x5c
   2cb62:	af08      	add	r7, sp, #32
   2cb64:	60f8      	str	r0, [r7, #12]
   2cb66:	60b9      	str	r1, [r7, #8]
   2cb68:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2cb6a:	2301      	movs	r3, #1
   2cb6c:	425b      	negs	r3, r3
   2cb6e:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2cb70:	2318      	movs	r3, #24
   2cb72:	18fb      	adds	r3, r7, r3
   2cb74:	2200      	movs	r2, #0
   2cb76:	601a      	str	r2, [r3, #0]
   2cb78:	2318      	movs	r3, #24
   2cb7a:	18fb      	adds	r3, r7, r3
   2cb7c:	2200      	movs	r2, #0
   2cb7e:	605a      	str	r2, [r3, #4]
   2cb80:	2318      	movs	r3, #24
   2cb82:	18fb      	adds	r3, r7, r3
   2cb84:	2200      	movs	r2, #0
   2cb86:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2cb88:	2318      	movs	r3, #24
   2cb8a:	18fb      	adds	r3, r7, r3
   2cb8c:	68ba      	ldr	r2, [r7, #8]
   2cb8e:	601a      	str	r2, [r3, #0]
    int len = 0;
   2cb90:	2300      	movs	r3, #0
   2cb92:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2cb94:	68fb      	ldr	r3, [r7, #12]
   2cb96:	6a1b      	ldr	r3, [r3, #32]
   2cb98:	2b00      	cmp	r3, #0
   2cb9a:	d100      	bne.n	2cb9e <MQTTPublish+0x46>
   2cb9c:	e0a0      	b.n	2cce0 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2cb9e:	2324      	movs	r3, #36	; 0x24
   2cba0:	18fb      	adds	r3, r7, r3
   2cba2:	0018      	movs	r0, r3
   2cba4:	4b55      	ldr	r3, [pc, #340]	; (2ccfc <MQTTPublish+0x1a4>)
   2cba6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2cba8:	68fb      	ldr	r3, [r7, #12]
   2cbaa:	685a      	ldr	r2, [r3, #4]
   2cbac:	2324      	movs	r3, #36	; 0x24
   2cbae:	18fb      	adds	r3, r7, r3
   2cbb0:	0011      	movs	r1, r2
   2cbb2:	0018      	movs	r0, r3
   2cbb4:	4b52      	ldr	r3, [pc, #328]	; (2cd00 <MQTTPublish+0x1a8>)
   2cbb6:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2cbb8:	687b      	ldr	r3, [r7, #4]
   2cbba:	781b      	ldrb	r3, [r3, #0]
   2cbbc:	2b01      	cmp	r3, #1
   2cbbe:	d003      	beq.n	2cbc8 <MQTTPublish+0x70>
   2cbc0:	687b      	ldr	r3, [r7, #4]
   2cbc2:	781b      	ldrb	r3, [r3, #0]
   2cbc4:	2b02      	cmp	r3, #2
   2cbc6:	d107      	bne.n	2cbd8 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2cbc8:	68fb      	ldr	r3, [r7, #12]
   2cbca:	0018      	movs	r0, r3
   2cbcc:	4b4d      	ldr	r3, [pc, #308]	; (2cd04 <MQTTPublish+0x1ac>)
   2cbce:	4798      	blx	r3
   2cbd0:	0003      	movs	r3, r0
   2cbd2:	b29a      	uxth	r2, r3
   2cbd4:	687b      	ldr	r3, [r7, #4]
   2cbd6:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2cbd8:	68fb      	ldr	r3, [r7, #12]
   2cbda:	691b      	ldr	r3, [r3, #16]
   2cbdc:	469c      	mov	ip, r3
   2cbde:	68fb      	ldr	r3, [r7, #12]
   2cbe0:	689b      	ldr	r3, [r3, #8]
   2cbe2:	001d      	movs	r5, r3
   2cbe4:	687b      	ldr	r3, [r7, #4]
   2cbe6:	781b      	ldrb	r3, [r3, #0]
   2cbe8:	001e      	movs	r6, r3
   2cbea:	687b      	ldr	r3, [r7, #4]
   2cbec:	785b      	ldrb	r3, [r3, #1]
   2cbee:	4698      	mov	r8, r3
   2cbf0:	687b      	ldr	r3, [r7, #4]
   2cbf2:	889b      	ldrh	r3, [r3, #4]
   2cbf4:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2cbf6:	687b      	ldr	r3, [r7, #4]
   2cbf8:	689a      	ldr	r2, [r3, #8]
   2cbfa:	687b      	ldr	r3, [r7, #4]
   2cbfc:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2cbfe:	9306      	str	r3, [sp, #24]
   2cc00:	9205      	str	r2, [sp, #20]
   2cc02:	2318      	movs	r3, #24
   2cc04:	18fa      	adds	r2, r7, r3
   2cc06:	2308      	movs	r3, #8
   2cc08:	446b      	add	r3, sp
   2cc0a:	ca13      	ldmia	r2!, {r0, r1, r4}
   2cc0c:	c313      	stmia	r3!, {r0, r1, r4}
   2cc0e:	464b      	mov	r3, r9
   2cc10:	9301      	str	r3, [sp, #4]
   2cc12:	4643      	mov	r3, r8
   2cc14:	9300      	str	r3, [sp, #0]
   2cc16:	0033      	movs	r3, r6
   2cc18:	2200      	movs	r2, #0
   2cc1a:	0029      	movs	r1, r5
   2cc1c:	4660      	mov	r0, ip
   2cc1e:	4c3a      	ldr	r4, [pc, #232]	; (2cd08 <MQTTPublish+0x1b0>)
   2cc20:	47a0      	blx	r4
   2cc22:	0003      	movs	r3, r0
   2cc24:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2cc28:	2b00      	cmp	r3, #0
   2cc2a:	dd5b      	ble.n	2cce4 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2cc2c:	2324      	movs	r3, #36	; 0x24
   2cc2e:	18fa      	adds	r2, r7, r3
   2cc30:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2cc32:	68fb      	ldr	r3, [r7, #12]
   2cc34:	0018      	movs	r0, r3
   2cc36:	4b35      	ldr	r3, [pc, #212]	; (2cd0c <MQTTPublish+0x1b4>)
   2cc38:	4798      	blx	r3
   2cc3a:	0003      	movs	r3, r0
   2cc3c:	637b      	str	r3, [r7, #52]	; 0x34
   2cc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2cc40:	2b00      	cmp	r3, #0
   2cc42:	d151      	bne.n	2cce8 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2cc44:	687b      	ldr	r3, [r7, #4]
   2cc46:	781b      	ldrb	r3, [r3, #0]
   2cc48:	2b01      	cmp	r3, #1
   2cc4a:	d122      	bne.n	2cc92 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2cc4c:	2324      	movs	r3, #36	; 0x24
   2cc4e:	18fa      	adds	r2, r7, r3
   2cc50:	68fb      	ldr	r3, [r7, #12]
   2cc52:	2104      	movs	r1, #4
   2cc54:	0018      	movs	r0, r3
   2cc56:	4b2e      	ldr	r3, [pc, #184]	; (2cd10 <MQTTPublish+0x1b8>)
   2cc58:	4798      	blx	r3
   2cc5a:	0003      	movs	r3, r0
   2cc5c:	2b04      	cmp	r3, #4
   2cc5e:	d114      	bne.n	2cc8a <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2cc60:	68fb      	ldr	r3, [r7, #12]
   2cc62:	695c      	ldr	r4, [r3, #20]
   2cc64:	68fb      	ldr	r3, [r7, #12]
   2cc66:	68db      	ldr	r3, [r3, #12]
   2cc68:	2216      	movs	r2, #22
   2cc6a:	18ba      	adds	r2, r7, r2
   2cc6c:	2115      	movs	r1, #21
   2cc6e:	1879      	adds	r1, r7, r1
   2cc70:	2014      	movs	r0, #20
   2cc72:	1838      	adds	r0, r7, r0
   2cc74:	9300      	str	r3, [sp, #0]
   2cc76:	0023      	movs	r3, r4
   2cc78:	4c26      	ldr	r4, [pc, #152]	; (2cd14 <MQTTPublish+0x1bc>)
   2cc7a:	47a0      	blx	r4
   2cc7c:	0003      	movs	r3, r0
   2cc7e:	2b01      	cmp	r3, #1
   2cc80:	d033      	beq.n	2ccea <MQTTPublish+0x192>
                rc = FAILURE;
   2cc82:	2301      	movs	r3, #1
   2cc84:	425b      	negs	r3, r3
   2cc86:	637b      	str	r3, [r7, #52]	; 0x34
   2cc88:	e02f      	b.n	2ccea <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2cc8a:	2301      	movs	r3, #1
   2cc8c:	425b      	negs	r3, r3
   2cc8e:	637b      	str	r3, [r7, #52]	; 0x34
   2cc90:	e02b      	b.n	2ccea <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2cc92:	687b      	ldr	r3, [r7, #4]
   2cc94:	781b      	ldrb	r3, [r3, #0]
   2cc96:	2b02      	cmp	r3, #2
   2cc98:	d127      	bne.n	2ccea <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2cc9a:	2324      	movs	r3, #36	; 0x24
   2cc9c:	18fa      	adds	r2, r7, r3
   2cc9e:	68fb      	ldr	r3, [r7, #12]
   2cca0:	2107      	movs	r1, #7
   2cca2:	0018      	movs	r0, r3
   2cca4:	4b1a      	ldr	r3, [pc, #104]	; (2cd10 <MQTTPublish+0x1b8>)
   2cca6:	4798      	blx	r3
   2cca8:	0003      	movs	r3, r0
   2ccaa:	2b07      	cmp	r3, #7
   2ccac:	d114      	bne.n	2ccd8 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2ccae:	68fb      	ldr	r3, [r7, #12]
   2ccb0:	695c      	ldr	r4, [r3, #20]
   2ccb2:	68fb      	ldr	r3, [r7, #12]
   2ccb4:	68db      	ldr	r3, [r3, #12]
   2ccb6:	2212      	movs	r2, #18
   2ccb8:	18ba      	adds	r2, r7, r2
   2ccba:	2111      	movs	r1, #17
   2ccbc:	1879      	adds	r1, r7, r1
   2ccbe:	2010      	movs	r0, #16
   2ccc0:	1838      	adds	r0, r7, r0
   2ccc2:	9300      	str	r3, [sp, #0]
   2ccc4:	0023      	movs	r3, r4
   2ccc6:	4c13      	ldr	r4, [pc, #76]	; (2cd14 <MQTTPublish+0x1bc>)
   2ccc8:	47a0      	blx	r4
   2ccca:	0003      	movs	r3, r0
   2cccc:	2b01      	cmp	r3, #1
   2ccce:	d00c      	beq.n	2ccea <MQTTPublish+0x192>
                rc = FAILURE;
   2ccd0:	2301      	movs	r3, #1
   2ccd2:	425b      	negs	r3, r3
   2ccd4:	637b      	str	r3, [r7, #52]	; 0x34
   2ccd6:	e008      	b.n	2ccea <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2ccd8:	2301      	movs	r3, #1
   2ccda:	425b      	negs	r3, r3
   2ccdc:	637b      	str	r3, [r7, #52]	; 0x34
   2ccde:	e004      	b.n	2ccea <MQTTPublish+0x192>
		goto exit;
   2cce0:	46c0      	nop			; (mov r8, r8)
   2cce2:	e002      	b.n	2ccea <MQTTPublish+0x192>
        goto exit;
   2cce4:	46c0      	nop			; (mov r8, r8)
   2cce6:	e000      	b.n	2ccea <MQTTPublish+0x192>
        goto exit; // there was a problem
   2cce8:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ccea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2ccec:	0018      	movs	r0, r3
   2ccee:	46bd      	mov	sp, r7
   2ccf0:	b00f      	add	sp, #60	; 0x3c
   2ccf2:	bc0c      	pop	{r2, r3}
   2ccf4:	4690      	mov	r8, r2
   2ccf6:	4699      	mov	r9, r3
   2ccf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ccfa:	46c0      	nop			; (mov r8, r8)
   2ccfc:	0002cf61 	.word	0x0002cf61
   2cd00:	0002cee9 	.word	0x0002cee9
   2cd04:	0002c0a9 	.word	0x0002c0a9
   2cd08:	0002e1e5 	.word	0x0002e1e5
   2cd0c:	0002c0d9 	.word	0x0002c0d9
   2cd10:	0002c841 	.word	0x0002c841
   2cd14:	0002dc5d 	.word	0x0002dc5d

0002cd18 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2cd18:	b580      	push	{r7, lr}
   2cd1a:	b088      	sub	sp, #32
   2cd1c:	af00      	add	r7, sp, #0
   2cd1e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2cd20:	2301      	movs	r3, #1
   2cd22:	425b      	negs	r3, r3
   2cd24:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2cd26:	2300      	movs	r3, #0
   2cd28:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2cd2a:	230c      	movs	r3, #12
   2cd2c:	18fb      	adds	r3, r7, r3
   2cd2e:	0018      	movs	r0, r3
   2cd30:	4b13      	ldr	r3, [pc, #76]	; (2cd80 <MQTTDisconnect+0x68>)
   2cd32:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2cd34:	687b      	ldr	r3, [r7, #4]
   2cd36:	685a      	ldr	r2, [r3, #4]
   2cd38:	230c      	movs	r3, #12
   2cd3a:	18fb      	adds	r3, r7, r3
   2cd3c:	0011      	movs	r1, r2
   2cd3e:	0018      	movs	r0, r3
   2cd40:	4b10      	ldr	r3, [pc, #64]	; (2cd84 <MQTTDisconnect+0x6c>)
   2cd42:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2cd44:	687b      	ldr	r3, [r7, #4]
   2cd46:	691a      	ldr	r2, [r3, #16]
   2cd48:	687b      	ldr	r3, [r7, #4]
   2cd4a:	689b      	ldr	r3, [r3, #8]
   2cd4c:	0019      	movs	r1, r3
   2cd4e:	0010      	movs	r0, r2
   2cd50:	4b0d      	ldr	r3, [pc, #52]	; (2cd88 <MQTTDisconnect+0x70>)
   2cd52:	4798      	blx	r3
   2cd54:	0003      	movs	r3, r0
   2cd56:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2cd58:	69bb      	ldr	r3, [r7, #24]
   2cd5a:	2b00      	cmp	r3, #0
   2cd5c:	dd08      	ble.n	2cd70 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2cd5e:	230c      	movs	r3, #12
   2cd60:	18fa      	adds	r2, r7, r3
   2cd62:	69b9      	ldr	r1, [r7, #24]
   2cd64:	687b      	ldr	r3, [r7, #4]
   2cd66:	0018      	movs	r0, r3
   2cd68:	4b08      	ldr	r3, [pc, #32]	; (2cd8c <MQTTDisconnect+0x74>)
   2cd6a:	4798      	blx	r3
   2cd6c:	0003      	movs	r3, r0
   2cd6e:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2cd70:	687b      	ldr	r3, [r7, #4]
   2cd72:	2200      	movs	r2, #0
   2cd74:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2cd76:	69fb      	ldr	r3, [r7, #28]
}
   2cd78:	0018      	movs	r0, r3
   2cd7a:	46bd      	mov	sp, r7
   2cd7c:	b008      	add	sp, #32
   2cd7e:	bd80      	pop	{r7, pc}
   2cd80:	0002cf61 	.word	0x0002cf61
   2cd84:	0002cee9 	.word	0x0002cee9
   2cd88:	0002db11 	.word	0x0002db11
   2cd8c:	0002c0d9 	.word	0x0002c0d9

0002cd90 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2cd90:	b580      	push	{r7, lr}
   2cd92:	b084      	sub	sp, #16
   2cd94:	af00      	add	r7, sp, #0
   2cd96:	0002      	movs	r2, r0
   2cd98:	1dfb      	adds	r3, r7, #7
   2cd9a:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2cd9c:	2300      	movs	r3, #0
   2cd9e:	60fb      	str	r3, [r7, #12]
   2cda0:	e01c      	b.n	2cddc <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2cda2:	4a12      	ldr	r2, [pc, #72]	; (2cdec <isMQTTSocket+0x5c>)
   2cda4:	68fb      	ldr	r3, [r7, #12]
   2cda6:	2164      	movs	r1, #100	; 0x64
   2cda8:	434b      	muls	r3, r1
   2cdaa:	18d3      	adds	r3, r2, r3
   2cdac:	3360      	adds	r3, #96	; 0x60
   2cdae:	681b      	ldr	r3, [r3, #0]
   2cdb0:	2b00      	cmp	r3, #0
   2cdb2:	d010      	beq.n	2cdd6 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2cdb4:	4a0d      	ldr	r2, [pc, #52]	; (2cdec <isMQTTSocket+0x5c>)
   2cdb6:	68fb      	ldr	r3, [r7, #12]
   2cdb8:	2164      	movs	r1, #100	; 0x64
   2cdba:	434b      	muls	r3, r1
   2cdbc:	18d3      	adds	r3, r2, r3
   2cdbe:	3360      	adds	r3, #96	; 0x60
   2cdc0:	681b      	ldr	r3, [r3, #0]
   2cdc2:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2cdc4:	68bb      	ldr	r3, [r7, #8]
   2cdc6:	6a1a      	ldr	r2, [r3, #32]
   2cdc8:	1dfb      	adds	r3, r7, #7
   2cdca:	781b      	ldrb	r3, [r3, #0]
   2cdcc:	b25b      	sxtb	r3, r3
   2cdce:	429a      	cmp	r2, r3
   2cdd0:	d101      	bne.n	2cdd6 <isMQTTSocket+0x46>
				return true;
   2cdd2:	2301      	movs	r3, #1
   2cdd4:	e006      	b.n	2cde4 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2cdd6:	68fb      	ldr	r3, [r7, #12]
   2cdd8:	3301      	adds	r3, #1
   2cdda:	60fb      	str	r3, [r7, #12]
   2cddc:	68fb      	ldr	r3, [r7, #12]
   2cdde:	2b06      	cmp	r3, #6
   2cde0:	d9df      	bls.n	2cda2 <isMQTTSocket+0x12>
		}
	}
	return false;
   2cde2:	2300      	movs	r3, #0
}
   2cde4:	0018      	movs	r0, r3
   2cde6:	46bd      	mov	sp, r7
   2cde8:	b004      	add	sp, #16
   2cdea:	bd80      	pop	{r7, pc}
   2cdec:	20003e8c 	.word	0x20003e8c

0002cdf0 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2cdf0:	b580      	push	{r7, lr}
   2cdf2:	b082      	sub	sp, #8
   2cdf4:	af00      	add	r7, sp, #0
   2cdf6:	6078      	str	r0, [r7, #4]
   2cdf8:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2cdfa:	4b0d      	ldr	r3, [pc, #52]	; (2ce30 <dnsResolveCallback+0x40>)
   2cdfc:	781b      	ldrb	r3, [r3, #0]
   2cdfe:	2201      	movs	r2, #1
   2ce00:	4053      	eors	r3, r2
   2ce02:	b2db      	uxtb	r3, r3
   2ce04:	2b00      	cmp	r3, #0
   2ce06:	d00e      	beq.n	2ce26 <dnsResolveCallback+0x36>
   2ce08:	4b0a      	ldr	r3, [pc, #40]	; (2ce34 <dnsResolveCallback+0x44>)
   2ce0a:	681b      	ldr	r3, [r3, #0]
   2ce0c:	687a      	ldr	r2, [r7, #4]
   2ce0e:	0011      	movs	r1, r2
   2ce10:	0018      	movs	r0, r3
   2ce12:	4b09      	ldr	r3, [pc, #36]	; (2ce38 <dnsResolveCallback+0x48>)
   2ce14:	4798      	blx	r3
   2ce16:	1e03      	subs	r3, r0, #0
   2ce18:	d105      	bne.n	2ce26 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2ce1a:	683a      	ldr	r2, [r7, #0]
   2ce1c:	4b07      	ldr	r3, [pc, #28]	; (2ce3c <dnsResolveCallback+0x4c>)
   2ce1e:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2ce20:	4b03      	ldr	r3, [pc, #12]	; (2ce30 <dnsResolveCallback+0x40>)
   2ce22:	2201      	movs	r2, #1
   2ce24:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2ce26:	46c0      	nop			; (mov r8, r8)
   2ce28:	46bd      	mov	sp, r7
   2ce2a:	b002      	add	sp, #8
   2ce2c:	bd80      	pop	{r7, pc}
   2ce2e:	46c0      	nop			; (mov r8, r8)
   2ce30:	20003d7c 	.word	0x20003d7c
   2ce34:	20003e88 	.word	0x20003e88
   2ce38:	000324fb 	.word	0x000324fb
   2ce3c:	20003d74 	.word	0x20003d74

0002ce40 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2ce40:	b580      	push	{r7, lr}
   2ce42:	b084      	sub	sp, #16
   2ce44:	af00      	add	r7, sp, #0
   2ce46:	603a      	str	r2, [r7, #0]
   2ce48:	1dfb      	adds	r3, r7, #7
   2ce4a:	1c02      	adds	r2, r0, #0
   2ce4c:	701a      	strb	r2, [r3, #0]
   2ce4e:	1dbb      	adds	r3, r7, #6
   2ce50:	1c0a      	adds	r2, r1, #0
   2ce52:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2ce54:	1dfb      	adds	r3, r7, #7
   2ce56:	781b      	ldrb	r3, [r3, #0]
   2ce58:	b25b      	sxtb	r3, r3
   2ce5a:	0018      	movs	r0, r3
   2ce5c:	4b12      	ldr	r3, [pc, #72]	; (2cea8 <tcpClientSocketEventHandler+0x68>)
   2ce5e:	4798      	blx	r3
   2ce60:	1e03      	subs	r3, r0, #0
   2ce62:	d01c      	beq.n	2ce9e <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2ce64:	1dbb      	adds	r3, r7, #6
   2ce66:	781b      	ldrb	r3, [r3, #0]
   2ce68:	2b06      	cmp	r3, #6
   2ce6a:	d00c      	beq.n	2ce86 <tcpClientSocketEventHandler+0x46>
   2ce6c:	2b07      	cmp	r3, #7
   2ce6e:	d006      	beq.n	2ce7e <tcpClientSocketEventHandler+0x3e>
   2ce70:	2b05      	cmp	r3, #5
   2ce72:	d000      	beq.n	2ce76 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2ce74:	e013      	b.n	2ce9e <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2ce76:	4b0d      	ldr	r3, [pc, #52]	; (2ceac <tcpClientSocketEventHandler+0x6c>)
   2ce78:	2201      	movs	r2, #1
   2ce7a:	701a      	strb	r2, [r3, #0]
			break;
   2ce7c:	e00f      	b.n	2ce9e <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2ce7e:	4b0c      	ldr	r3, [pc, #48]	; (2ceb0 <tcpClientSocketEventHandler+0x70>)
   2ce80:	2201      	movs	r2, #1
   2ce82:	701a      	strb	r2, [r3, #0]
			break;
   2ce84:	e00b      	b.n	2ce9e <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2ce86:	683b      	ldr	r3, [r7, #0]
   2ce88:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2ce8a:	68fb      	ldr	r3, [r7, #12]
   2ce8c:	2204      	movs	r2, #4
   2ce8e:	5e9b      	ldrsh	r3, [r3, r2]
   2ce90:	001a      	movs	r2, r3
   2ce92:	4b08      	ldr	r3, [pc, #32]	; (2ceb4 <tcpClientSocketEventHandler+0x74>)
   2ce94:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2ce96:	4b08      	ldr	r3, [pc, #32]	; (2ceb8 <tcpClientSocketEventHandler+0x78>)
   2ce98:	2201      	movs	r2, #1
   2ce9a:	701a      	strb	r2, [r3, #0]
			break;
   2ce9c:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2ce9e:	46c0      	nop			; (mov r8, r8)
   2cea0:	46bd      	mov	sp, r7
   2cea2:	b004      	add	sp, #16
   2cea4:	bd80      	pop	{r7, pc}
   2cea6:	46c0      	nop			; (mov r8, r8)
   2cea8:	0002cd91 	.word	0x0002cd91
   2ceac:	20003d7d 	.word	0x20003d7d
   2ceb0:	20003d7e 	.word	0x20003d7e
   2ceb4:	20003d78 	.word	0x20003d78
   2ceb8:	20003d7f 	.word	0x20003d7f

0002cebc <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2cebc:	b580      	push	{r7, lr}
   2cebe:	b082      	sub	sp, #8
   2cec0:	af00      	add	r7, sp, #0
   2cec2:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2cec4:	687b      	ldr	r3, [r7, #4]
   2cec6:	3304      	adds	r3, #4
   2cec8:	687a      	ldr	r2, [r7, #4]
   2ceca:	0011      	movs	r1, r2
   2cecc:	0018      	movs	r0, r3
   2cece:	4b05      	ldr	r3, [pc, #20]	; (2cee4 <TimerIsExpired+0x28>)
   2ced0:	4798      	blx	r3
   2ced2:	0003      	movs	r3, r0
   2ced4:	3b01      	subs	r3, #1
   2ced6:	425a      	negs	r2, r3
   2ced8:	4153      	adcs	r3, r2
   2ceda:	b2db      	uxtb	r3, r3
}
   2cedc:	0018      	movs	r0, r3
   2cede:	46bd      	mov	sp, r7
   2cee0:	b002      	add	sp, #8
   2cee2:	bd80      	pop	{r7, pc}
   2cee4:	0001a755 	.word	0x0001a755

0002cee8 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2cee8:	b580      	push	{r7, lr}
   2ceea:	b082      	sub	sp, #8
   2ceec:	af00      	add	r7, sp, #0
   2ceee:	6078      	str	r0, [r7, #4]
   2cef0:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2cef2:	687b      	ldr	r3, [r7, #4]
   2cef4:	683a      	ldr	r2, [r7, #0]
   2cef6:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2cef8:	687b      	ldr	r3, [r7, #4]
   2cefa:	3304      	adds	r3, #4
   2cefc:	0018      	movs	r0, r3
   2cefe:	4b03      	ldr	r3, [pc, #12]	; (2cf0c <TimerCountdownMS+0x24>)
   2cf00:	4798      	blx	r3
}
   2cf02:	46c0      	nop			; (mov r8, r8)
   2cf04:	46bd      	mov	sp, r7
   2cf06:	b002      	add	sp, #8
   2cf08:	bd80      	pop	{r7, pc}
   2cf0a:	46c0      	nop			; (mov r8, r8)
   2cf0c:	0001a6e9 	.word	0x0001a6e9

0002cf10 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2cf10:	b580      	push	{r7, lr}
   2cf12:	b082      	sub	sp, #8
   2cf14:	af00      	add	r7, sp, #0
   2cf16:	6078      	str	r0, [r7, #4]
   2cf18:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2cf1a:	683b      	ldr	r3, [r7, #0]
   2cf1c:	22fa      	movs	r2, #250	; 0xfa
   2cf1e:	0092      	lsls	r2, r2, #2
   2cf20:	435a      	muls	r2, r3
   2cf22:	687b      	ldr	r3, [r7, #4]
   2cf24:	0011      	movs	r1, r2
   2cf26:	0018      	movs	r0, r3
   2cf28:	4b02      	ldr	r3, [pc, #8]	; (2cf34 <TimerCountdown+0x24>)
   2cf2a:	4798      	blx	r3
}
   2cf2c:	46c0      	nop			; (mov r8, r8)
   2cf2e:	46bd      	mov	sp, r7
   2cf30:	b002      	add	sp, #8
   2cf32:	bd80      	pop	{r7, pc}
   2cf34:	0002cee9 	.word	0x0002cee9

0002cf38 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2cf38:	b580      	push	{r7, lr}
   2cf3a:	b082      	sub	sp, #8
   2cf3c:	af00      	add	r7, sp, #0
   2cf3e:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2cf40:	687b      	ldr	r3, [r7, #4]
   2cf42:	3304      	adds	r3, #4
   2cf44:	687a      	ldr	r2, [r7, #4]
   2cf46:	0011      	movs	r1, r2
   2cf48:	0018      	movs	r0, r3
   2cf4a:	4b04      	ldr	r3, [pc, #16]	; (2cf5c <TimerLeftMS+0x24>)
   2cf4c:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2cf4e:	687b      	ldr	r3, [r7, #4]
   2cf50:	681b      	ldr	r3, [r3, #0]
}
   2cf52:	0018      	movs	r0, r3
   2cf54:	46bd      	mov	sp, r7
   2cf56:	b002      	add	sp, #8
   2cf58:	bd80      	pop	{r7, pc}
   2cf5a:	46c0      	nop			; (mov r8, r8)
   2cf5c:	0001a755 	.word	0x0001a755

0002cf60 <TimerInit>:


void TimerInit(Timer* timer) {
   2cf60:	b580      	push	{r7, lr}
   2cf62:	b082      	sub	sp, #8
   2cf64:	af00      	add	r7, sp, #0
   2cf66:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2cf68:	687b      	ldr	r3, [r7, #4]
   2cf6a:	2200      	movs	r2, #0
   2cf6c:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2cf6e:	687b      	ldr	r3, [r7, #4]
   2cf70:	3304      	adds	r3, #4
   2cf72:	2208      	movs	r2, #8
   2cf74:	2100      	movs	r1, #0
   2cf76:	0018      	movs	r0, r3
   2cf78:	4b02      	ldr	r3, [pc, #8]	; (2cf84 <TimerInit+0x24>)
   2cf7a:	4798      	blx	r3
}
   2cf7c:	46c0      	nop			; (mov r8, r8)
   2cf7e:	46bd      	mov	sp, r7
   2cf80:	b002      	add	sp, #8
   2cf82:	bd80      	pop	{r7, pc}
   2cf84:	000321a3 	.word	0x000321a3

0002cf88 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2cf88:	b590      	push	{r4, r7, lr}
   2cf8a:	b085      	sub	sp, #20
   2cf8c:	af00      	add	r7, sp, #0
   2cf8e:	60f8      	str	r0, [r7, #12]
   2cf90:	60b9      	str	r1, [r7, #8]
   2cf92:	607a      	str	r2, [r7, #4]
   2cf94:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2cf96:	683b      	ldr	r3, [r7, #0]
   2cf98:	2b00      	cmp	r3, #0
   2cf9a:	d101      	bne.n	2cfa0 <WINC1500_read+0x18>
   2cf9c:	230a      	movs	r3, #10
   2cf9e:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2cfa0:	4b2c      	ldr	r3, [pc, #176]	; (2d054 <WINC1500_read+0xcc>)
   2cfa2:	681b      	ldr	r3, [r3, #0]
   2cfa4:	2b00      	cmp	r3, #0
   2cfa6:	d131      	bne.n	2d00c <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2cfa8:	4b2b      	ldr	r3, [pc, #172]	; (2d058 <WINC1500_read+0xd0>)
   2cfaa:	2200      	movs	r2, #0
   2cfac:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2cfae:	68fb      	ldr	r3, [r7, #12]
   2cfb0:	681b      	ldr	r3, [r3, #0]
   2cfb2:	b258      	sxtb	r0, r3
   2cfb4:	683c      	ldr	r4, [r7, #0]
   2cfb6:	2380      	movs	r3, #128	; 0x80
   2cfb8:	005a      	lsls	r2, r3, #1
   2cfba:	4928      	ldr	r1, [pc, #160]	; (2d05c <WINC1500_read+0xd4>)
   2cfbc:	0023      	movs	r3, r4
   2cfbe:	4c28      	ldr	r4, [pc, #160]	; (2d060 <WINC1500_read+0xd8>)
   2cfc0:	47a0      	blx	r4
   2cfc2:	1e03      	subs	r3, r0, #0
   2cfc4:	d005      	beq.n	2cfd2 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2cfc6:	2301      	movs	r3, #1
   2cfc8:	425b      	negs	r3, r3
   2cfca:	e03e      	b.n	2d04a <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2cfcc:	2000      	movs	r0, #0
   2cfce:	4b25      	ldr	r3, [pc, #148]	; (2d064 <WINC1500_read+0xdc>)
   2cfd0:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2cfd2:	4b21      	ldr	r3, [pc, #132]	; (2d058 <WINC1500_read+0xd0>)
   2cfd4:	781b      	ldrb	r3, [r3, #0]
   2cfd6:	2201      	movs	r2, #1
   2cfd8:	4053      	eors	r3, r2
   2cfda:	b2db      	uxtb	r3, r3
   2cfdc:	2b00      	cmp	r3, #0
   2cfde:	d1f5      	bne.n	2cfcc <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2cfe0:	4b21      	ldr	r3, [pc, #132]	; (2d068 <WINC1500_read+0xe0>)
   2cfe2:	681b      	ldr	r3, [r3, #0]
   2cfe4:	2b00      	cmp	r3, #0
   2cfe6:	dd08      	ble.n	2cffa <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2cfe8:	4b1f      	ldr	r3, [pc, #124]	; (2d068 <WINC1500_read+0xe0>)
   2cfea:	681b      	ldr	r3, [r3, #0]
   2cfec:	001a      	movs	r2, r3
   2cfee:	4b19      	ldr	r3, [pc, #100]	; (2d054 <WINC1500_read+0xcc>)
   2cff0:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2cff2:	4b1e      	ldr	r3, [pc, #120]	; (2d06c <WINC1500_read+0xe4>)
   2cff4:	2200      	movs	r2, #0
   2cff6:	601a      	str	r2, [r3, #0]
   2cff8:	e008      	b.n	2d00c <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2cffa:	4b16      	ldr	r3, [pc, #88]	; (2d054 <WINC1500_read+0xcc>)
   2cffc:	2200      	movs	r2, #0
   2cffe:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2d000:	4b1a      	ldr	r3, [pc, #104]	; (2d06c <WINC1500_read+0xe4>)
   2d002:	2200      	movs	r2, #0
   2d004:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2d006:	4b18      	ldr	r3, [pc, #96]	; (2d068 <WINC1500_read+0xe0>)
   2d008:	681b      	ldr	r3, [r3, #0]
   2d00a:	e01e      	b.n	2d04a <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2d00c:	4b11      	ldr	r3, [pc, #68]	; (2d054 <WINC1500_read+0xcc>)
   2d00e:	681b      	ldr	r3, [r3, #0]
   2d010:	001a      	movs	r2, r3
   2d012:	687b      	ldr	r3, [r7, #4]
   2d014:	4293      	cmp	r3, r2
   2d016:	dd02      	ble.n	2d01e <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2d018:	2301      	movs	r3, #1
   2d01a:	425b      	negs	r3, r3
   2d01c:	e015      	b.n	2d04a <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2d01e:	4b13      	ldr	r3, [pc, #76]	; (2d06c <WINC1500_read+0xe4>)
   2d020:	681a      	ldr	r2, [r3, #0]
   2d022:	4b0e      	ldr	r3, [pc, #56]	; (2d05c <WINC1500_read+0xd4>)
   2d024:	18d1      	adds	r1, r2, r3
   2d026:	687a      	ldr	r2, [r7, #4]
   2d028:	68bb      	ldr	r3, [r7, #8]
   2d02a:	0018      	movs	r0, r3
   2d02c:	4b10      	ldr	r3, [pc, #64]	; (2d070 <WINC1500_read+0xe8>)
   2d02e:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2d030:	4b08      	ldr	r3, [pc, #32]	; (2d054 <WINC1500_read+0xcc>)
   2d032:	681a      	ldr	r2, [r3, #0]
   2d034:	687b      	ldr	r3, [r7, #4]
   2d036:	1ad2      	subs	r2, r2, r3
   2d038:	4b06      	ldr	r3, [pc, #24]	; (2d054 <WINC1500_read+0xcc>)
   2d03a:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2d03c:	4b0b      	ldr	r3, [pc, #44]	; (2d06c <WINC1500_read+0xe4>)
   2d03e:	681a      	ldr	r2, [r3, #0]
   2d040:	687b      	ldr	r3, [r7, #4]
   2d042:	18d2      	adds	r2, r2, r3
   2d044:	4b09      	ldr	r3, [pc, #36]	; (2d06c <WINC1500_read+0xe4>)
   2d046:	601a      	str	r2, [r3, #0]
  
  return len;
   2d048:	687b      	ldr	r3, [r7, #4]
}
   2d04a:	0018      	movs	r0, r3
   2d04c:	46bd      	mov	sp, r7
   2d04e:	b005      	add	sp, #20
   2d050:	bd90      	pop	{r4, r7, pc}
   2d052:	46c0      	nop			; (mov r8, r8)
   2d054:	20003e84 	.word	0x20003e84
   2d058:	20003d7f 	.word	0x20003d7f
   2d05c:	20003d80 	.word	0x20003d80
   2d060:	0002363d 	.word	0x0002363d
   2d064:	0001fb85 	.word	0x0001fb85
   2d068:	20003d78 	.word	0x20003d78
   2d06c:	20003e80 	.word	0x20003e80
   2d070:	0003216d 	.word	0x0003216d

0002d074 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2d074:	b590      	push	{r4, r7, lr}
   2d076:	b085      	sub	sp, #20
   2d078:	af00      	add	r7, sp, #0
   2d07a:	60f8      	str	r0, [r7, #12]
   2d07c:	60b9      	str	r1, [r7, #8]
   2d07e:	607a      	str	r2, [r7, #4]
   2d080:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2d082:	4b10      	ldr	r3, [pc, #64]	; (2d0c4 <WINC1500_write+0x50>)
   2d084:	2200      	movs	r2, #0
   2d086:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2d088:	68fb      	ldr	r3, [r7, #12]
   2d08a:	681b      	ldr	r3, [r3, #0]
   2d08c:	b258      	sxtb	r0, r3
   2d08e:	687b      	ldr	r3, [r7, #4]
   2d090:	b29a      	uxth	r2, r3
   2d092:	68b9      	ldr	r1, [r7, #8]
   2d094:	2300      	movs	r3, #0
   2d096:	4c0c      	ldr	r4, [pc, #48]	; (2d0c8 <WINC1500_write+0x54>)
   2d098:	47a0      	blx	r4
   2d09a:	1e03      	subs	r3, r0, #0
   2d09c:	d005      	beq.n	2d0aa <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2d09e:	2301      	movs	r3, #1
   2d0a0:	425b      	negs	r3, r3
   2d0a2:	e00a      	b.n	2d0ba <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2d0a4:	2000      	movs	r0, #0
   2d0a6:	4b09      	ldr	r3, [pc, #36]	; (2d0cc <WINC1500_write+0x58>)
   2d0a8:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2d0aa:	4b06      	ldr	r3, [pc, #24]	; (2d0c4 <WINC1500_write+0x50>)
   2d0ac:	781b      	ldrb	r3, [r3, #0]
   2d0ae:	2201      	movs	r2, #1
   2d0b0:	4053      	eors	r3, r2
   2d0b2:	b2db      	uxtb	r3, r3
   2d0b4:	2b00      	cmp	r3, #0
   2d0b6:	d1f5      	bne.n	2d0a4 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2d0b8:	687b      	ldr	r3, [r7, #4]
}
   2d0ba:	0018      	movs	r0, r3
   2d0bc:	46bd      	mov	sp, r7
   2d0be:	b005      	add	sp, #20
   2d0c0:	bd90      	pop	{r4, r7, pc}
   2d0c2:	46c0      	nop			; (mov r8, r8)
   2d0c4:	20003d7e 	.word	0x20003d7e
   2d0c8:	000234d9 	.word	0x000234d9
   2d0cc:	0001fb85 	.word	0x0001fb85

0002d0d0 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2d0d0:	b580      	push	{r7, lr}
   2d0d2:	b082      	sub	sp, #8
   2d0d4:	af00      	add	r7, sp, #0
   2d0d6:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2d0d8:	687b      	ldr	r3, [r7, #4]
   2d0da:	681b      	ldr	r3, [r3, #0]
   2d0dc:	b25b      	sxtb	r3, r3
   2d0de:	0018      	movs	r0, r3
   2d0e0:	4b06      	ldr	r3, [pc, #24]	; (2d0fc <WINC1500_disconnect+0x2c>)
   2d0e2:	4798      	blx	r3
	n->socket=-1;
   2d0e4:	687b      	ldr	r3, [r7, #4]
   2d0e6:	2201      	movs	r2, #1
   2d0e8:	4252      	negs	r2, r2
   2d0ea:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2d0ec:	4b04      	ldr	r3, [pc, #16]	; (2d100 <WINC1500_disconnect+0x30>)
   2d0ee:	2200      	movs	r2, #0
   2d0f0:	701a      	strb	r2, [r3, #0]
}
   2d0f2:	46c0      	nop			; (mov r8, r8)
   2d0f4:	46bd      	mov	sp, r7
   2d0f6:	b002      	add	sp, #8
   2d0f8:	bd80      	pop	{r7, pc}
   2d0fa:	46c0      	nop			; (mov r8, r8)
   2d0fc:	000237bd 	.word	0x000237bd
   2d100:	20003d7d 	.word	0x20003d7d

0002d104 <NetworkInit>:


void NetworkInit(Network* n) {
   2d104:	b580      	push	{r7, lr}
   2d106:	b082      	sub	sp, #8
   2d108:	af00      	add	r7, sp, #0
   2d10a:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2d10c:	687b      	ldr	r3, [r7, #4]
   2d10e:	2201      	movs	r2, #1
   2d110:	4252      	negs	r2, r2
   2d112:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2d114:	687b      	ldr	r3, [r7, #4]
   2d116:	4a06      	ldr	r2, [pc, #24]	; (2d130 <NetworkInit+0x2c>)
   2d118:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2d11a:	687b      	ldr	r3, [r7, #4]
   2d11c:	4a05      	ldr	r2, [pc, #20]	; (2d134 <NetworkInit+0x30>)
   2d11e:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2d120:	687b      	ldr	r3, [r7, #4]
   2d122:	4a05      	ldr	r2, [pc, #20]	; (2d138 <NetworkInit+0x34>)
   2d124:	611a      	str	r2, [r3, #16]
}
   2d126:	46c0      	nop			; (mov r8, r8)
   2d128:	46bd      	mov	sp, r7
   2d12a:	b002      	add	sp, #8
   2d12c:	bd80      	pop	{r7, pc}
   2d12e:	46c0      	nop			; (mov r8, r8)
   2d130:	0002cf89 	.word	0x0002cf89
   2d134:	0002d075 	.word	0x0002d075
   2d138:	0002d0d1 	.word	0x0002d0d1

0002d13c <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2d13c:	b580      	push	{r7, lr}
   2d13e:	b088      	sub	sp, #32
   2d140:	af00      	add	r7, sp, #0
   2d142:	60f8      	str	r0, [r7, #12]
   2d144:	60b9      	str	r1, [r7, #8]
   2d146:	607a      	str	r2, [r7, #4]
   2d148:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2d14a:	4b37      	ldr	r3, [pc, #220]	; (2d228 <ConnectNetwork+0xec>)
   2d14c:	2200      	movs	r2, #0
   2d14e:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2d150:	4b36      	ldr	r3, [pc, #216]	; (2d22c <ConnectNetwork+0xf0>)
   2d152:	68ba      	ldr	r2, [r7, #8]
   2d154:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2d156:	68bb      	ldr	r3, [r7, #8]
   2d158:	0018      	movs	r0, r3
   2d15a:	4b35      	ldr	r3, [pc, #212]	; (2d230 <ConnectNetwork+0xf4>)
   2d15c:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2d15e:	e002      	b.n	2d166 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2d160:	2000      	movs	r0, #0
   2d162:	4b34      	ldr	r3, [pc, #208]	; (2d234 <ConnectNetwork+0xf8>)
   2d164:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2d166:	4b30      	ldr	r3, [pc, #192]	; (2d228 <ConnectNetwork+0xec>)
   2d168:	781b      	ldrb	r3, [r3, #0]
   2d16a:	2201      	movs	r2, #1
   2d16c:	4053      	eors	r3, r2
   2d16e:	b2db      	uxtb	r3, r3
   2d170:	2b00      	cmp	r3, #0
   2d172:	d1f5      	bne.n	2d160 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2d174:	4b30      	ldr	r3, [pc, #192]	; (2d238 <ConnectNetwork+0xfc>)
   2d176:	681a      	ldr	r2, [r3, #0]
   2d178:	68fb      	ldr	r3, [r7, #12]
   2d17a:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2d17c:	2310      	movs	r3, #16
   2d17e:	18fb      	adds	r3, r7, r3
   2d180:	2202      	movs	r2, #2
   2d182:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2d184:	687b      	ldr	r3, [r7, #4]
   2d186:	b29b      	uxth	r3, r3
   2d188:	021b      	lsls	r3, r3, #8
   2d18a:	b21a      	sxth	r2, r3
   2d18c:	687b      	ldr	r3, [r7, #4]
   2d18e:	b29b      	uxth	r3, r3
   2d190:	0a1b      	lsrs	r3, r3, #8
   2d192:	b29b      	uxth	r3, r3
   2d194:	b21b      	sxth	r3, r3
   2d196:	4313      	orrs	r3, r2
   2d198:	b21b      	sxth	r3, r3
   2d19a:	b29a      	uxth	r2, r3
   2d19c:	2310      	movs	r3, #16
   2d19e:	18fb      	adds	r3, r7, r3
   2d1a0:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2d1a2:	4b25      	ldr	r3, [pc, #148]	; (2d238 <ConnectNetwork+0xfc>)
   2d1a4:	681b      	ldr	r3, [r3, #0]
   2d1a6:	001a      	movs	r2, r3
   2d1a8:	2310      	movs	r3, #16
   2d1aa:	18fb      	adds	r3, r7, r3
   2d1ac:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2d1ae:	68fb      	ldr	r3, [r7, #12]
   2d1b0:	681b      	ldr	r3, [r3, #0]
   2d1b2:	2b00      	cmp	r3, #0
   2d1b4:	da0a      	bge.n	2d1cc <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2d1b6:	683b      	ldr	r3, [r7, #0]
   2d1b8:	b2db      	uxtb	r3, r3
   2d1ba:	001a      	movs	r2, r3
   2d1bc:	2101      	movs	r1, #1
   2d1be:	2002      	movs	r0, #2
   2d1c0:	4b1e      	ldr	r3, [pc, #120]	; (2d23c <ConnectNetwork+0x100>)
   2d1c2:	4798      	blx	r3
   2d1c4:	0003      	movs	r3, r0
   2d1c6:	001a      	movs	r2, r3
   2d1c8:	68fb      	ldr	r3, [r7, #12]
   2d1ca:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2d1cc:	68fb      	ldr	r3, [r7, #12]
   2d1ce:	681b      	ldr	r3, [r3, #0]
   2d1d0:	3301      	adds	r3, #1
   2d1d2:	d108      	bne.n	2d1e6 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2d1d4:	68fb      	ldr	r3, [r7, #12]
   2d1d6:	681b      	ldr	r3, [r3, #0]
   2d1d8:	b25b      	sxtb	r3, r3
   2d1da:	0018      	movs	r0, r3
   2d1dc:	4b18      	ldr	r3, [pc, #96]	; (2d240 <ConnectNetwork+0x104>)
   2d1de:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2d1e0:	2309      	movs	r3, #9
   2d1e2:	425b      	negs	r3, r3
   2d1e4:	e01c      	b.n	2d220 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2d1e6:	68fb      	ldr	r3, [r7, #12]
   2d1e8:	681b      	ldr	r3, [r3, #0]
   2d1ea:	b25b      	sxtb	r3, r3
   2d1ec:	2210      	movs	r2, #16
   2d1ee:	18b9      	adds	r1, r7, r2
   2d1f0:	2210      	movs	r2, #16
   2d1f2:	0018      	movs	r0, r3
   2d1f4:	4b13      	ldr	r3, [pc, #76]	; (2d244 <ConnectNetwork+0x108>)
   2d1f6:	4798      	blx	r3
   2d1f8:	1e03      	subs	r3, r0, #0
   2d1fa:	d002      	beq.n	2d202 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2d1fc:	2309      	movs	r3, #9
   2d1fe:	425b      	negs	r3, r3
   2d200:	e00e      	b.n	2d220 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2d202:	4b11      	ldr	r3, [pc, #68]	; (2d248 <ConnectNetwork+0x10c>)
   2d204:	2200      	movs	r2, #0
   2d206:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2d208:	e002      	b.n	2d210 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2d20a:	2000      	movs	r0, #0
   2d20c:	4b09      	ldr	r3, [pc, #36]	; (2d234 <ConnectNetwork+0xf8>)
   2d20e:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2d210:	4b0d      	ldr	r3, [pc, #52]	; (2d248 <ConnectNetwork+0x10c>)
   2d212:	781b      	ldrb	r3, [r3, #0]
   2d214:	2201      	movs	r2, #1
   2d216:	4053      	eors	r3, r2
   2d218:	b2db      	uxtb	r3, r3
   2d21a:	2b00      	cmp	r3, #0
   2d21c:	d1f5      	bne.n	2d20a <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2d21e:	2300      	movs	r3, #0
   2d220:	0018      	movs	r0, r3
   2d222:	46bd      	mov	sp, r7
   2d224:	b008      	add	sp, #32
   2d226:	bd80      	pop	{r7, pc}
   2d228:	20003d7c 	.word	0x20003d7c
   2d22c:	20003e88 	.word	0x20003e88
   2d230:	00023a05 	.word	0x00023a05
   2d234:	0001fb85 	.word	0x0001fb85
   2d238:	20003d74 	.word	0x20003d74
   2d23c:	000231b1 	.word	0x000231b1
   2d240:	000237bd 	.word	0x000237bd
   2d244:	000233c5 	.word	0x000233c5
   2d248:	20003d7d 	.word	0x20003d7d

0002d24c <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2d24c:	b580      	push	{r7, lr}
   2d24e:	b084      	sub	sp, #16
   2d250:	af00      	add	r7, sp, #0
   2d252:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2d254:	687b      	ldr	r3, [r7, #4]
   2d256:	2b00      	cmp	r3, #0
   2d258:	d022      	beq.n	2d2a0 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2d25a:	2300      	movs	r3, #0
   2d25c:	60fb      	str	r3, [r7, #12]
   2d25e:	e01b      	b.n	2d298 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2d260:	4a11      	ldr	r2, [pc, #68]	; (2d2a8 <allocateClient+0x5c>)
   2d262:	68fb      	ldr	r3, [r7, #12]
   2d264:	2164      	movs	r1, #100	; 0x64
   2d266:	434b      	muls	r3, r1
   2d268:	18d3      	adds	r3, r2, r3
   2d26a:	3360      	adds	r3, #96	; 0x60
   2d26c:	681b      	ldr	r3, [r3, #0]
   2d26e:	2b00      	cmp	r3, #0
   2d270:	d10f      	bne.n	2d292 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2d272:	4a0d      	ldr	r2, [pc, #52]	; (2d2a8 <allocateClient+0x5c>)
   2d274:	68fb      	ldr	r3, [r7, #12]
   2d276:	2164      	movs	r1, #100	; 0x64
   2d278:	434b      	muls	r3, r1
   2d27a:	18d3      	adds	r3, r2, r3
   2d27c:	3360      	adds	r3, #96	; 0x60
   2d27e:	687a      	ldr	r2, [r7, #4]
   2d280:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2d282:	68fb      	ldr	r3, [r7, #12]
   2d284:	2264      	movs	r2, #100	; 0x64
   2d286:	435a      	muls	r2, r3
   2d288:	4b07      	ldr	r3, [pc, #28]	; (2d2a8 <allocateClient+0x5c>)
   2d28a:	18d2      	adds	r2, r2, r3
   2d28c:	687b      	ldr	r3, [r7, #4]
   2d28e:	61da      	str	r2, [r3, #28]
			return;
   2d290:	e007      	b.n	2d2a2 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2d292:	68fb      	ldr	r3, [r7, #12]
   2d294:	3301      	adds	r3, #1
   2d296:	60fb      	str	r3, [r7, #12]
   2d298:	68fb      	ldr	r3, [r7, #12]
   2d29a:	2b06      	cmp	r3, #6
   2d29c:	d9e0      	bls.n	2d260 <allocateClient+0x14>
   2d29e:	e000      	b.n	2d2a2 <allocateClient+0x56>
		return;
   2d2a0:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2d2a2:	46bd      	mov	sp, r7
   2d2a4:	b004      	add	sp, #16
   2d2a6:	bd80      	pop	{r7, pc}
   2d2a8:	20003e8c 	.word	0x20003e8c

0002d2ac <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2d2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d2ae:	b089      	sub	sp, #36	; 0x24
   2d2b0:	af04      	add	r7, sp, #16
   2d2b2:	6078      	str	r0, [r7, #4]
   2d2b4:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2d2b6:	687b      	ldr	r3, [r7, #4]
   2d2b8:	2b00      	cmp	r3, #0
   2d2ba:	d00a      	beq.n	2d2d2 <mqtt_init+0x26>
   2d2bc:	683b      	ldr	r3, [r7, #0]
   2d2be:	2b00      	cmp	r3, #0
   2d2c0:	d007      	beq.n	2d2d2 <mqtt_init+0x26>
   2d2c2:	683b      	ldr	r3, [r7, #0]
   2d2c4:	691b      	ldr	r3, [r3, #16]
   2d2c6:	2b00      	cmp	r3, #0
   2d2c8:	d003      	beq.n	2d2d2 <mqtt_init+0x26>
   2d2ca:	683b      	ldr	r3, [r7, #0]
   2d2cc:	689b      	ldr	r3, [r3, #8]
   2d2ce:	2b00      	cmp	r3, #0
   2d2d0:	d102      	bne.n	2d2d8 <mqtt_init+0x2c>
		return FAILURE;
   2d2d2:	2301      	movs	r3, #1
   2d2d4:	425b      	negs	r3, r3
   2d2d6:	e034      	b.n	2d342 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2d2d8:	683b      	ldr	r3, [r7, #0]
   2d2da:	889b      	ldrh	r3, [r3, #4]
   2d2dc:	001a      	movs	r2, r3
   2d2de:	23fa      	movs	r3, #250	; 0xfa
   2d2e0:	009b      	lsls	r3, r3, #2
   2d2e2:	4353      	muls	r3, r2
   2d2e4:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2d2e6:	687b      	ldr	r3, [r7, #4]
   2d2e8:	3320      	adds	r3, #32
   2d2ea:	0018      	movs	r0, r3
   2d2ec:	4b17      	ldr	r3, [pc, #92]	; (2d34c <mqtt_init+0xa0>)
   2d2ee:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2d2f0:	687b      	ldr	r3, [r7, #4]
   2d2f2:	3304      	adds	r3, #4
   2d2f4:	6839      	ldr	r1, [r7, #0]
   2d2f6:	2218      	movs	r2, #24
   2d2f8:	0018      	movs	r0, r3
   2d2fa:	4b15      	ldr	r3, [pc, #84]	; (2d350 <mqtt_init+0xa4>)
   2d2fc:	4798      	blx	r3
	allocateClient(module);
   2d2fe:	687b      	ldr	r3, [r7, #4]
   2d300:	0018      	movs	r0, r3
   2d302:	4b14      	ldr	r3, [pc, #80]	; (2d354 <mqtt_init+0xa8>)
   2d304:	4798      	blx	r3
	
	if(module->client)
   2d306:	687b      	ldr	r3, [r7, #4]
   2d308:	69db      	ldr	r3, [r3, #28]
   2d30a:	2b00      	cmp	r3, #0
   2d30c:	d017      	beq.n	2d33e <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2d30e:	687b      	ldr	r3, [r7, #4]
   2d310:	69d8      	ldr	r0, [r3, #28]
   2d312:	687b      	ldr	r3, [r7, #4]
   2d314:	3320      	adds	r3, #32
   2d316:	001c      	movs	r4, r3
   2d318:	683b      	ldr	r3, [r7, #0]
   2d31a:	691e      	ldr	r6, [r3, #16]
   2d31c:	683b      	ldr	r3, [r7, #0]
   2d31e:	695a      	ldr	r2, [r3, #20]
   2d320:	683b      	ldr	r3, [r7, #0]
   2d322:	6899      	ldr	r1, [r3, #8]
   2d324:	683b      	ldr	r3, [r7, #0]
   2d326:	68db      	ldr	r3, [r3, #12]
   2d328:	68fd      	ldr	r5, [r7, #12]
   2d32a:	9302      	str	r3, [sp, #8]
   2d32c:	9101      	str	r1, [sp, #4]
   2d32e:	9200      	str	r2, [sp, #0]
   2d330:	0033      	movs	r3, r6
   2d332:	002a      	movs	r2, r5
   2d334:	0021      	movs	r1, r4
   2d336:	4c08      	ldr	r4, [pc, #32]	; (2d358 <mqtt_init+0xac>)
   2d338:	47a0      	blx	r4
		return SUCCESS;
   2d33a:	2300      	movs	r3, #0
   2d33c:	e001      	b.n	2d342 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2d33e:	2301      	movs	r3, #1
   2d340:	425b      	negs	r3, r3
}
   2d342:	0018      	movs	r0, r3
   2d344:	46bd      	mov	sp, r7
   2d346:	b005      	add	sp, #20
   2d348:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d34a:	46c0      	nop			; (mov r8, r8)
   2d34c:	0002d105 	.word	0x0002d105
   2d350:	0003216d 	.word	0x0003216d
   2d354:	0002d24d 	.word	0x0002d24d
   2d358:	0002c17d 	.word	0x0002c17d

0002d35c <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2d35c:	b580      	push	{r7, lr}
   2d35e:	b082      	sub	sp, #8
   2d360:	af00      	add	r7, sp, #0
   2d362:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2d364:	687b      	ldr	r3, [r7, #4]
   2d366:	4a0c      	ldr	r2, [pc, #48]	; (2d398 <mqtt_get_config_defaults+0x3c>)
   2d368:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2d36a:	687b      	ldr	r3, [r7, #4]
   2d36c:	2200      	movs	r2, #0
   2d36e:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2d370:	687b      	ldr	r3, [r7, #4]
   2d372:	223c      	movs	r2, #60	; 0x3c
   2d374:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2d376:	687b      	ldr	r3, [r7, #4]
   2d378:	2200      	movs	r2, #0
   2d37a:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2d37c:	687b      	ldr	r3, [r7, #4]
   2d37e:	2200      	movs	r2, #0
   2d380:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2d382:	687b      	ldr	r3, [r7, #4]
   2d384:	2200      	movs	r2, #0
   2d386:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2d388:	687b      	ldr	r3, [r7, #4]
   2d38a:	2200      	movs	r2, #0
   2d38c:	615a      	str	r2, [r3, #20]
}
   2d38e:	46c0      	nop			; (mov r8, r8)
   2d390:	46bd      	mov	sp, r7
   2d392:	b002      	add	sp, #8
   2d394:	bd80      	pop	{r7, pc}
   2d396:	46c0      	nop			; (mov r8, r8)
   2d398:	0000075b 	.word	0x0000075b

0002d39c <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2d39c:	b580      	push	{r7, lr}
   2d39e:	b082      	sub	sp, #8
   2d3a0:	af00      	add	r7, sp, #0
   2d3a2:	6078      	str	r0, [r7, #4]
   2d3a4:	6039      	str	r1, [r7, #0]
	if(module)
   2d3a6:	687b      	ldr	r3, [r7, #4]
   2d3a8:	2b00      	cmp	r3, #0
   2d3aa:	d004      	beq.n	2d3b6 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2d3ac:	687b      	ldr	r3, [r7, #4]
   2d3ae:	683a      	ldr	r2, [r7, #0]
   2d3b0:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2d3b2:	2300      	movs	r3, #0
   2d3b4:	e001      	b.n	2d3ba <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2d3b6:	2301      	movs	r3, #1
   2d3b8:	425b      	negs	r3, r3
}
   2d3ba:	0018      	movs	r0, r3
   2d3bc:	46bd      	mov	sp, r7
   2d3be:	b002      	add	sp, #8
   2d3c0:	bd80      	pop	{r7, pc}
	...

0002d3c4 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2d3c4:	b580      	push	{r7, lr}
   2d3c6:	b082      	sub	sp, #8
   2d3c8:	af00      	add	r7, sp, #0
   2d3ca:	603a      	str	r2, [r7, #0]
   2d3cc:	1dfb      	adds	r3, r7, #7
   2d3ce:	1c02      	adds	r2, r0, #0
   2d3d0:	701a      	strb	r2, [r3, #0]
   2d3d2:	1dbb      	adds	r3, r7, #6
   2d3d4:	1c0a      	adds	r2, r1, #0
   2d3d6:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2d3d8:	683a      	ldr	r2, [r7, #0]
   2d3da:	1dbb      	adds	r3, r7, #6
   2d3dc:	7819      	ldrb	r1, [r3, #0]
   2d3de:	1dfb      	adds	r3, r7, #7
   2d3e0:	781b      	ldrb	r3, [r3, #0]
   2d3e2:	b25b      	sxtb	r3, r3
   2d3e4:	0018      	movs	r0, r3
   2d3e6:	4b03      	ldr	r3, [pc, #12]	; (2d3f4 <mqtt_socket_event_handler+0x30>)
   2d3e8:	4798      	blx	r3
}
   2d3ea:	46c0      	nop			; (mov r8, r8)
   2d3ec:	46bd      	mov	sp, r7
   2d3ee:	b002      	add	sp, #8
   2d3f0:	bd80      	pop	{r7, pc}
   2d3f2:	46c0      	nop			; (mov r8, r8)
   2d3f4:	0002ce41 	.word	0x0002ce41

0002d3f8 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2d3f8:	b580      	push	{r7, lr}
   2d3fa:	b082      	sub	sp, #8
   2d3fc:	af00      	add	r7, sp, #0
   2d3fe:	6078      	str	r0, [r7, #4]
   2d400:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2d402:	683a      	ldr	r2, [r7, #0]
   2d404:	687b      	ldr	r3, [r7, #4]
   2d406:	0011      	movs	r1, r2
   2d408:	0018      	movs	r0, r3
   2d40a:	4b03      	ldr	r3, [pc, #12]	; (2d418 <mqtt_socket_resolve_handler+0x20>)
   2d40c:	4798      	blx	r3
}
   2d40e:	46c0      	nop			; (mov r8, r8)
   2d410:	46bd      	mov	sp, r7
   2d412:	b002      	add	sp, #8
   2d414:	bd80      	pop	{r7, pc}
   2d416:	46c0      	nop			; (mov r8, r8)
   2d418:	0002cdf1 	.word	0x0002cdf1

0002d41c <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2d41c:	b590      	push	{r4, r7, lr}
   2d41e:	b085      	sub	sp, #20
   2d420:	af00      	add	r7, sp, #0
   2d422:	6078      	str	r0, [r7, #4]
   2d424:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2d426:	687b      	ldr	r3, [r7, #4]
   2d428:	3320      	adds	r3, #32
   2d42a:	0018      	movs	r0, r3
   2d42c:	687b      	ldr	r3, [r7, #4]
   2d42e:	889b      	ldrh	r3, [r3, #4]
   2d430:	001a      	movs	r2, r3
   2d432:	687b      	ldr	r3, [r7, #4]
   2d434:	799b      	ldrb	r3, [r3, #6]
   2d436:	6839      	ldr	r1, [r7, #0]
   2d438:	4c09      	ldr	r4, [pc, #36]	; (2d460 <mqtt_connect+0x44>)
   2d43a:	47a0      	blx	r4
   2d43c:	0003      	movs	r3, r0
   2d43e:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2d440:	687b      	ldr	r3, [r7, #4]
   2d442:	681b      	ldr	r3, [r3, #0]
   2d444:	2b00      	cmp	r3, #0
   2d446:	d006      	beq.n	2d456 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2d448:	687b      	ldr	r3, [r7, #4]
   2d44a:	681b      	ldr	r3, [r3, #0]
   2d44c:	220c      	movs	r2, #12
   2d44e:	18ba      	adds	r2, r7, r2
   2d450:	6878      	ldr	r0, [r7, #4]
   2d452:	2100      	movs	r1, #0
   2d454:	4798      	blx	r3
	return connResult.sock_connected.result;
   2d456:	68fb      	ldr	r3, [r7, #12]
}
   2d458:	0018      	movs	r0, r3
   2d45a:	46bd      	mov	sp, r7
   2d45c:	b005      	add	sp, #20
   2d45e:	bd90      	pop	{r4, r7, pc}
   2d460:	0002d13d 	.word	0x0002d13d

0002d464 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2d464:	b580      	push	{r7, lr}
   2d466:	b09c      	sub	sp, #112	; 0x70
   2d468:	af00      	add	r7, sp, #0
   2d46a:	60f8      	str	r0, [r7, #12]
   2d46c:	607a      	str	r2, [r7, #4]
   2d46e:	603b      	str	r3, [r7, #0]
   2d470:	230b      	movs	r3, #11
   2d472:	18fb      	adds	r3, r7, r3
   2d474:	1c0a      	adds	r2, r1, #0
   2d476:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2d478:	2310      	movs	r3, #16
   2d47a:	18fa      	adds	r2, r7, r3
   2d47c:	4b31      	ldr	r3, [pc, #196]	; (2d544 <mqtt_connect_broker+0xe0>)
   2d47e:	0010      	movs	r0, r2
   2d480:	0019      	movs	r1, r3
   2d482:	2358      	movs	r3, #88	; 0x58
   2d484:	001a      	movs	r2, r3
   2d486:	4b30      	ldr	r3, [pc, #192]	; (2d548 <mqtt_connect_broker+0xe4>)
   2d488:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2d48a:	2310      	movs	r3, #16
   2d48c:	18fb      	adds	r3, r7, r3
   2d48e:	2204      	movs	r2, #4
   2d490:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2d492:	2310      	movs	r3, #16
   2d494:	18fb      	adds	r3, r7, r3
   2d496:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2d498:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2d49a:	2310      	movs	r3, #16
   2d49c:	18fb      	adds	r3, r7, r3
   2d49e:	687a      	ldr	r2, [r7, #4]
   2d4a0:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2d4a2:	2310      	movs	r3, #16
   2d4a4:	18fb      	adds	r3, r7, r3
   2d4a6:	683a      	ldr	r2, [r7, #0]
   2d4a8:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2d4aa:	2310      	movs	r3, #16
   2d4ac:	18fb      	adds	r3, r7, r3
   2d4ae:	220b      	movs	r2, #11
   2d4b0:	18ba      	adds	r2, r7, r2
   2d4b2:	7812      	ldrb	r2, [r2, #0]
   2d4b4:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2d4b6:	2310      	movs	r3, #16
   2d4b8:	18fb      	adds	r3, r7, r3
   2d4ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2d4bc:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2d4be:	2310      	movs	r3, #16
   2d4c0:	18fb      	adds	r3, r7, r3
   2d4c2:	2280      	movs	r2, #128	; 0x80
   2d4c4:	18ba      	adds	r2, r7, r2
   2d4c6:	6812      	ldr	r2, [r2, #0]
   2d4c8:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2d4ca:	2310      	movs	r3, #16
   2d4cc:	18fb      	adds	r3, r7, r3
   2d4ce:	228c      	movs	r2, #140	; 0x8c
   2d4d0:	18ba      	adds	r2, r7, r2
   2d4d2:	213c      	movs	r1, #60	; 0x3c
   2d4d4:	7812      	ldrb	r2, [r2, #0]
   2d4d6:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2d4d8:	2310      	movs	r3, #16
   2d4da:	18fb      	adds	r3, r7, r3
   2d4dc:	2288      	movs	r2, #136	; 0x88
   2d4de:	18ba      	adds	r2, r7, r2
   2d4e0:	213d      	movs	r1, #61	; 0x3d
   2d4e2:	7812      	ldrb	r2, [r2, #0]
   2d4e4:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2d4e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2d4e8:	2b00      	cmp	r3, #0
   2d4ea:	d008      	beq.n	2d4fe <mqtt_connect_broker+0x9a>
   2d4ec:	2380      	movs	r3, #128	; 0x80
   2d4ee:	18fb      	adds	r3, r7, r3
   2d4f0:	681b      	ldr	r3, [r3, #0]
   2d4f2:	2b00      	cmp	r3, #0
   2d4f4:	d003      	beq.n	2d4fe <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2d4f6:	2310      	movs	r3, #16
   2d4f8:	18fb      	adds	r3, r7, r3
   2d4fa:	2201      	movs	r2, #1
   2d4fc:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2d4fe:	68fb      	ldr	r3, [r7, #12]
   2d500:	69db      	ldr	r3, [r3, #28]
   2d502:	2210      	movs	r2, #16
   2d504:	18ba      	adds	r2, r7, r2
   2d506:	0011      	movs	r1, r2
   2d508:	0018      	movs	r0, r3
   2d50a:	4b10      	ldr	r3, [pc, #64]	; (2d54c <mqtt_connect_broker+0xe8>)
   2d50c:	4798      	blx	r3
   2d50e:	0003      	movs	r3, r0
   2d510:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2d512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2d514:	b2da      	uxtb	r2, r3
   2d516:	2368      	movs	r3, #104	; 0x68
   2d518:	18fb      	adds	r3, r7, r3
   2d51a:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2d51c:	68fb      	ldr	r3, [r7, #12]
   2d51e:	681b      	ldr	r3, [r3, #0]
   2d520:	2b00      	cmp	r3, #0
   2d522:	d006      	beq.n	2d532 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2d524:	68fb      	ldr	r3, [r7, #12]
   2d526:	681b      	ldr	r3, [r3, #0]
   2d528:	2268      	movs	r2, #104	; 0x68
   2d52a:	18ba      	adds	r2, r7, r2
   2d52c:	68f8      	ldr	r0, [r7, #12]
   2d52e:	2101      	movs	r1, #1
   2d530:	4798      	blx	r3
	
	module->isConnected = true;
   2d532:	68fb      	ldr	r3, [r7, #12]
   2d534:	2234      	movs	r2, #52	; 0x34
   2d536:	2101      	movs	r1, #1
   2d538:	5499      	strb	r1, [r3, r2]
	return rc;
   2d53a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2d53c:	0018      	movs	r0, r3
   2d53e:	46bd      	mov	sp, r7
   2d540:	b01c      	add	sp, #112	; 0x70
   2d542:	bd80      	pop	{r7, pc}
   2d544:	0003704c 	.word	0x0003704c
   2d548:	0003216d 	.word	0x0003216d
   2d54c:	0002c88d 	.word	0x0002c88d

0002d550 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2d550:	b580      	push	{r7, lr}
   2d552:	b084      	sub	sp, #16
   2d554:	af00      	add	r7, sp, #0
   2d556:	6078      	str	r0, [r7, #4]
   2d558:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2d55a:	687b      	ldr	r3, [r7, #4]
   2d55c:	69db      	ldr	r3, [r3, #28]
   2d55e:	0018      	movs	r0, r3
   2d560:	4b0c      	ldr	r3, [pc, #48]	; (2d594 <mqtt_disconnect+0x44>)
   2d562:	4798      	blx	r3
   2d564:	0003      	movs	r3, r0
   2d566:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2d568:	68fb      	ldr	r3, [r7, #12]
   2d56a:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2d56c:	687b      	ldr	r3, [r7, #4]
   2d56e:	681b      	ldr	r3, [r3, #0]
   2d570:	2b00      	cmp	r3, #0
   2d572:	d006      	beq.n	2d582 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2d574:	687b      	ldr	r3, [r7, #4]
   2d576:	681b      	ldr	r3, [r3, #0]
   2d578:	2208      	movs	r2, #8
   2d57a:	18ba      	adds	r2, r7, r2
   2d57c:	6878      	ldr	r0, [r7, #4]
   2d57e:	2105      	movs	r1, #5
   2d580:	4798      	blx	r3
	
	module->isConnected = false;
   2d582:	687b      	ldr	r3, [r7, #4]
   2d584:	2234      	movs	r2, #52	; 0x34
   2d586:	2100      	movs	r1, #0
   2d588:	5499      	strb	r1, [r3, r2]
	return rc;
   2d58a:	68fb      	ldr	r3, [r7, #12]
}
   2d58c:	0018      	movs	r0, r3
   2d58e:	46bd      	mov	sp, r7
   2d590:	b004      	add	sp, #16
   2d592:	bd80      	pop	{r7, pc}
   2d594:	0002cd19 	.word	0x0002cd19

0002d598 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2d598:	b580      	push	{r7, lr}
   2d59a:	b08a      	sub	sp, #40	; 0x28
   2d59c:	af00      	add	r7, sp, #0
   2d59e:	60f8      	str	r0, [r7, #12]
   2d5a0:	60b9      	str	r1, [r7, #8]
   2d5a2:	607a      	str	r2, [r7, #4]
   2d5a4:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2d5a6:	2314      	movs	r3, #20
   2d5a8:	18fb      	adds	r3, r7, r3
   2d5aa:	2230      	movs	r2, #48	; 0x30
   2d5ac:	18ba      	adds	r2, r7, r2
   2d5ae:	7812      	ldrb	r2, [r2, #0]
   2d5b0:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2d5b2:	2314      	movs	r3, #20
   2d5b4:	18fb      	adds	r3, r7, r3
   2d5b6:	687a      	ldr	r2, [r7, #4]
   2d5b8:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2d5ba:	2314      	movs	r3, #20
   2d5bc:	18fb      	adds	r3, r7, r3
   2d5be:	683a      	ldr	r2, [r7, #0]
   2d5c0:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2d5c2:	2314      	movs	r3, #20
   2d5c4:	18fb      	adds	r3, r7, r3
   2d5c6:	2234      	movs	r2, #52	; 0x34
   2d5c8:	18ba      	adds	r2, r7, r2
   2d5ca:	7812      	ldrb	r2, [r2, #0]
   2d5cc:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2d5ce:	68fb      	ldr	r3, [r7, #12]
   2d5d0:	69db      	ldr	r3, [r3, #28]
   2d5d2:	2214      	movs	r2, #20
   2d5d4:	18ba      	adds	r2, r7, r2
   2d5d6:	68b9      	ldr	r1, [r7, #8]
   2d5d8:	0018      	movs	r0, r3
   2d5da:	4b09      	ldr	r3, [pc, #36]	; (2d600 <mqtt_publish+0x68>)
   2d5dc:	4798      	blx	r3
   2d5de:	0003      	movs	r3, r0
   2d5e0:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2d5e2:	68fb      	ldr	r3, [r7, #12]
   2d5e4:	681b      	ldr	r3, [r3, #0]
   2d5e6:	2b00      	cmp	r3, #0
   2d5e8:	d005      	beq.n	2d5f6 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2d5ea:	68fb      	ldr	r3, [r7, #12]
   2d5ec:	681b      	ldr	r3, [r3, #0]
   2d5ee:	68f8      	ldr	r0, [r7, #12]
   2d5f0:	2200      	movs	r2, #0
   2d5f2:	2102      	movs	r1, #2
   2d5f4:	4798      	blx	r3
	
	return rc;
   2d5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2d5f8:	0018      	movs	r0, r3
   2d5fa:	46bd      	mov	sp, r7
   2d5fc:	b00a      	add	sp, #40	; 0x28
   2d5fe:	bd80      	pop	{r7, pc}
   2d600:	0002cb59 	.word	0x0002cb59

0002d604 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2d604:	b590      	push	{r4, r7, lr}
   2d606:	b087      	sub	sp, #28
   2d608:	af00      	add	r7, sp, #0
   2d60a:	60f8      	str	r0, [r7, #12]
   2d60c:	60b9      	str	r1, [r7, #8]
   2d60e:	603b      	str	r3, [r7, #0]
   2d610:	1dfb      	adds	r3, r7, #7
   2d612:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2d614:	68fb      	ldr	r3, [r7, #12]
   2d616:	69d8      	ldr	r0, [r3, #28]
   2d618:	683c      	ldr	r4, [r7, #0]
   2d61a:	1dfb      	adds	r3, r7, #7
   2d61c:	781a      	ldrb	r2, [r3, #0]
   2d61e:	68b9      	ldr	r1, [r7, #8]
   2d620:	0023      	movs	r3, r4
   2d622:	4c09      	ldr	r4, [pc, #36]	; (2d648 <mqtt_subscribe+0x44>)
   2d624:	47a0      	blx	r4
   2d626:	0003      	movs	r3, r0
   2d628:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2d62a:	68fb      	ldr	r3, [r7, #12]
   2d62c:	681b      	ldr	r3, [r3, #0]
   2d62e:	2b00      	cmp	r3, #0
   2d630:	d005      	beq.n	2d63e <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2d632:	68fb      	ldr	r3, [r7, #12]
   2d634:	681b      	ldr	r3, [r3, #0]
   2d636:	68f8      	ldr	r0, [r7, #12]
   2d638:	2200      	movs	r2, #0
   2d63a:	2103      	movs	r1, #3
   2d63c:	4798      	blx	r3
	
	return rc;
   2d63e:	697b      	ldr	r3, [r7, #20]
}
   2d640:	0018      	movs	r0, r3
   2d642:	46bd      	mov	sp, r7
   2d644:	b007      	add	sp, #28
   2d646:	bd90      	pop	{r4, r7, pc}
   2d648:	0002c9cd 	.word	0x0002c9cd

0002d64c <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2d64c:	b580      	push	{r7, lr}
   2d64e:	b082      	sub	sp, #8
   2d650:	af00      	add	r7, sp, #0
   2d652:	6078      	str	r0, [r7, #4]
   2d654:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2d656:	687b      	ldr	r3, [r7, #4]
   2d658:	69db      	ldr	r3, [r3, #28]
   2d65a:	683a      	ldr	r2, [r7, #0]
   2d65c:	0011      	movs	r1, r2
   2d65e:	0018      	movs	r0, r3
   2d660:	4b03      	ldr	r3, [pc, #12]	; (2d670 <mqtt_yield+0x24>)
   2d662:	4798      	blx	r3
   2d664:	0003      	movs	r3, r0
   2d666:	0018      	movs	r0, r3
   2d668:	46bd      	mov	sp, r7
   2d66a:	b002      	add	sp, #8
   2d66c:	bd80      	pop	{r7, pc}
   2d66e:	46c0      	nop			; (mov r8, r8)
   2d670:	0002c7d5 	.word	0x0002c7d5

0002d674 <MQTTSerialize_connectLength>:
   2d674:	b590      	push	{r4, r7, lr}
   2d676:	b085      	sub	sp, #20
   2d678:	af00      	add	r7, sp, #0
   2d67a:	6078      	str	r0, [r7, #4]
   2d67c:	2300      	movs	r3, #0
   2d67e:	60fb      	str	r3, [r7, #12]
   2d680:	687b      	ldr	r3, [r7, #4]
   2d682:	7a1b      	ldrb	r3, [r3, #8]
   2d684:	2b03      	cmp	r3, #3
   2d686:	d102      	bne.n	2d68e <MQTTSerialize_connectLength+0x1a>
   2d688:	230c      	movs	r3, #12
   2d68a:	60fb      	str	r3, [r7, #12]
   2d68c:	e005      	b.n	2d69a <MQTTSerialize_connectLength+0x26>
   2d68e:	687b      	ldr	r3, [r7, #4]
   2d690:	7a1b      	ldrb	r3, [r3, #8]
   2d692:	2b04      	cmp	r3, #4
   2d694:	d101      	bne.n	2d69a <MQTTSerialize_connectLength+0x26>
   2d696:	230a      	movs	r3, #10
   2d698:	60fb      	str	r3, [r7, #12]
   2d69a:	687b      	ldr	r3, [r7, #4]
   2d69c:	68d8      	ldr	r0, [r3, #12]
   2d69e:	6919      	ldr	r1, [r3, #16]
   2d6a0:	695a      	ldr	r2, [r3, #20]
   2d6a2:	4b25      	ldr	r3, [pc, #148]	; (2d738 <MQTTSerialize_connectLength+0xc4>)
   2d6a4:	4798      	blx	r3
   2d6a6:	0003      	movs	r3, r0
   2d6a8:	3302      	adds	r3, #2
   2d6aa:	68fa      	ldr	r2, [r7, #12]
   2d6ac:	18d3      	adds	r3, r2, r3
   2d6ae:	60fb      	str	r3, [r7, #12]
   2d6b0:	687b      	ldr	r3, [r7, #4]
   2d6b2:	7edb      	ldrb	r3, [r3, #27]
   2d6b4:	2b00      	cmp	r3, #0
   2d6b6:	d013      	beq.n	2d6e0 <MQTTSerialize_connectLength+0x6c>
   2d6b8:	687b      	ldr	r3, [r7, #4]
   2d6ba:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2d6bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2d6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d6c0:	4b1d      	ldr	r3, [pc, #116]	; (2d738 <MQTTSerialize_connectLength+0xc4>)
   2d6c2:	4798      	blx	r3
   2d6c4:	0003      	movs	r3, r0
   2d6c6:	1c9c      	adds	r4, r3, #2
   2d6c8:	687b      	ldr	r3, [r7, #4]
   2d6ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2d6cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2d6ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2d6d0:	4b19      	ldr	r3, [pc, #100]	; (2d738 <MQTTSerialize_connectLength+0xc4>)
   2d6d2:	4798      	blx	r3
   2d6d4:	0003      	movs	r3, r0
   2d6d6:	18e3      	adds	r3, r4, r3
   2d6d8:	3302      	adds	r3, #2
   2d6da:	68fa      	ldr	r2, [r7, #12]
   2d6dc:	18d3      	adds	r3, r2, r3
   2d6de:	60fb      	str	r3, [r7, #12]
   2d6e0:	687b      	ldr	r3, [r7, #4]
   2d6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2d6e4:	2b00      	cmp	r3, #0
   2d6e6:	d103      	bne.n	2d6f0 <MQTTSerialize_connectLength+0x7c>
   2d6e8:	687b      	ldr	r3, [r7, #4]
   2d6ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2d6ec:	2b00      	cmp	r3, #0
   2d6ee:	d00a      	beq.n	2d706 <MQTTSerialize_connectLength+0x92>
   2d6f0:	687b      	ldr	r3, [r7, #4]
   2d6f2:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2d6f4:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2d6f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2d6f8:	4b0f      	ldr	r3, [pc, #60]	; (2d738 <MQTTSerialize_connectLength+0xc4>)
   2d6fa:	4798      	blx	r3
   2d6fc:	0003      	movs	r3, r0
   2d6fe:	3302      	adds	r3, #2
   2d700:	68fa      	ldr	r2, [r7, #12]
   2d702:	18d3      	adds	r3, r2, r3
   2d704:	60fb      	str	r3, [r7, #12]
   2d706:	687b      	ldr	r3, [r7, #4]
   2d708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2d70a:	2b00      	cmp	r3, #0
   2d70c:	d103      	bne.n	2d716 <MQTTSerialize_connectLength+0xa2>
   2d70e:	687b      	ldr	r3, [r7, #4]
   2d710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2d712:	2b00      	cmp	r3, #0
   2d714:	d00a      	beq.n	2d72c <MQTTSerialize_connectLength+0xb8>
   2d716:	687b      	ldr	r3, [r7, #4]
   2d718:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2d71a:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2d71c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2d71e:	4b06      	ldr	r3, [pc, #24]	; (2d738 <MQTTSerialize_connectLength+0xc4>)
   2d720:	4798      	blx	r3
   2d722:	0003      	movs	r3, r0
   2d724:	3302      	adds	r3, #2
   2d726:	68fa      	ldr	r2, [r7, #12]
   2d728:	18d3      	adds	r3, r2, r3
   2d72a:	60fb      	str	r3, [r7, #12]
   2d72c:	68fb      	ldr	r3, [r7, #12]
   2d72e:	0018      	movs	r0, r3
   2d730:	46bd      	mov	sp, r7
   2d732:	b005      	add	sp, #20
   2d734:	bd90      	pop	{r4, r7, pc}
   2d736:	46c0      	nop			; (mov r8, r8)
   2d738:	0002e0e5 	.word	0x0002e0e5

0002d73c <MQTTSerialize_connect>:
   2d73c:	b590      	push	{r4, r7, lr}
   2d73e:	b08b      	sub	sp, #44	; 0x2c
   2d740:	af00      	add	r7, sp, #0
   2d742:	60f8      	str	r0, [r7, #12]
   2d744:	60b9      	str	r1, [r7, #8]
   2d746:	607a      	str	r2, [r7, #4]
   2d748:	68fb      	ldr	r3, [r7, #12]
   2d74a:	61fb      	str	r3, [r7, #28]
   2d74c:	2300      	movs	r3, #0
   2d74e:	61bb      	str	r3, [r7, #24]
   2d750:	2300      	movs	r3, #0
   2d752:	617b      	str	r3, [r7, #20]
   2d754:	2300      	movs	r3, #0
   2d756:	623b      	str	r3, [r7, #32]
   2d758:	2301      	movs	r3, #1
   2d75a:	425b      	negs	r3, r3
   2d75c:	627b      	str	r3, [r7, #36]	; 0x24
   2d75e:	687b      	ldr	r3, [r7, #4]
   2d760:	0018      	movs	r0, r3
   2d762:	4b8c      	ldr	r3, [pc, #560]	; (2d994 <MQTTSerialize_connect+0x258>)
   2d764:	4798      	blx	r3
   2d766:	0003      	movs	r3, r0
   2d768:	623b      	str	r3, [r7, #32]
   2d76a:	6a3b      	ldr	r3, [r7, #32]
   2d76c:	0018      	movs	r0, r3
   2d76e:	4b8a      	ldr	r3, [pc, #552]	; (2d998 <MQTTSerialize_connect+0x25c>)
   2d770:	4798      	blx	r3
   2d772:	0002      	movs	r2, r0
   2d774:	68bb      	ldr	r3, [r7, #8]
   2d776:	429a      	cmp	r2, r3
   2d778:	dd03      	ble.n	2d782 <MQTTSerialize_connect+0x46>
   2d77a:	2302      	movs	r3, #2
   2d77c:	425b      	negs	r3, r3
   2d77e:	627b      	str	r3, [r7, #36]	; 0x24
   2d780:	e103      	b.n	2d98a <MQTTSerialize_connect+0x24e>
   2d782:	2318      	movs	r3, #24
   2d784:	18fb      	adds	r3, r7, r3
   2d786:	2200      	movs	r2, #0
   2d788:	701a      	strb	r2, [r3, #0]
   2d78a:	2318      	movs	r3, #24
   2d78c:	18fb      	adds	r3, r7, r3
   2d78e:	781a      	ldrb	r2, [r3, #0]
   2d790:	210f      	movs	r1, #15
   2d792:	400a      	ands	r2, r1
   2d794:	1c11      	adds	r1, r2, #0
   2d796:	2210      	movs	r2, #16
   2d798:	430a      	orrs	r2, r1
   2d79a:	701a      	strb	r2, [r3, #0]
   2d79c:	2318      	movs	r3, #24
   2d79e:	18fb      	adds	r3, r7, r3
   2d7a0:	781a      	ldrb	r2, [r3, #0]
   2d7a2:	231c      	movs	r3, #28
   2d7a4:	18fb      	adds	r3, r7, r3
   2d7a6:	0011      	movs	r1, r2
   2d7a8:	0018      	movs	r0, r3
   2d7aa:	4b7c      	ldr	r3, [pc, #496]	; (2d99c <MQTTSerialize_connect+0x260>)
   2d7ac:	4798      	blx	r3
   2d7ae:	69fb      	ldr	r3, [r7, #28]
   2d7b0:	6a3a      	ldr	r2, [r7, #32]
   2d7b2:	0011      	movs	r1, r2
   2d7b4:	0018      	movs	r0, r3
   2d7b6:	4b7a      	ldr	r3, [pc, #488]	; (2d9a0 <MQTTSerialize_connect+0x264>)
   2d7b8:	4798      	blx	r3
   2d7ba:	0002      	movs	r2, r0
   2d7bc:	69fb      	ldr	r3, [r7, #28]
   2d7be:	189b      	adds	r3, r3, r2
   2d7c0:	61fb      	str	r3, [r7, #28]
   2d7c2:	687b      	ldr	r3, [r7, #4]
   2d7c4:	7a1b      	ldrb	r3, [r3, #8]
   2d7c6:	2b04      	cmp	r3, #4
   2d7c8:	d10d      	bne.n	2d7e6 <MQTTSerialize_connect+0xaa>
   2d7ca:	4a76      	ldr	r2, [pc, #472]	; (2d9a4 <MQTTSerialize_connect+0x268>)
   2d7cc:	231c      	movs	r3, #28
   2d7ce:	18fb      	adds	r3, r7, r3
   2d7d0:	0011      	movs	r1, r2
   2d7d2:	0018      	movs	r0, r3
   2d7d4:	4b74      	ldr	r3, [pc, #464]	; (2d9a8 <MQTTSerialize_connect+0x26c>)
   2d7d6:	4798      	blx	r3
   2d7d8:	231c      	movs	r3, #28
   2d7da:	18fb      	adds	r3, r7, r3
   2d7dc:	2104      	movs	r1, #4
   2d7de:	0018      	movs	r0, r3
   2d7e0:	4b6e      	ldr	r3, [pc, #440]	; (2d99c <MQTTSerialize_connect+0x260>)
   2d7e2:	4798      	blx	r3
   2d7e4:	e00c      	b.n	2d800 <MQTTSerialize_connect+0xc4>
   2d7e6:	4a71      	ldr	r2, [pc, #452]	; (2d9ac <MQTTSerialize_connect+0x270>)
   2d7e8:	231c      	movs	r3, #28
   2d7ea:	18fb      	adds	r3, r7, r3
   2d7ec:	0011      	movs	r1, r2
   2d7ee:	0018      	movs	r0, r3
   2d7f0:	4b6d      	ldr	r3, [pc, #436]	; (2d9a8 <MQTTSerialize_connect+0x26c>)
   2d7f2:	4798      	blx	r3
   2d7f4:	231c      	movs	r3, #28
   2d7f6:	18fb      	adds	r3, r7, r3
   2d7f8:	2103      	movs	r1, #3
   2d7fa:	0018      	movs	r0, r3
   2d7fc:	4b67      	ldr	r3, [pc, #412]	; (2d99c <MQTTSerialize_connect+0x260>)
   2d7fe:	4798      	blx	r3
   2d800:	2314      	movs	r3, #20
   2d802:	18fb      	adds	r3, r7, r3
   2d804:	2200      	movs	r2, #0
   2d806:	701a      	strb	r2, [r3, #0]
   2d808:	687b      	ldr	r3, [r7, #4]
   2d80a:	7e9b      	ldrb	r3, [r3, #26]
   2d80c:	1c1a      	adds	r2, r3, #0
   2d80e:	2301      	movs	r3, #1
   2d810:	4013      	ands	r3, r2
   2d812:	b2da      	uxtb	r2, r3
   2d814:	2314      	movs	r3, #20
   2d816:	18fb      	adds	r3, r7, r3
   2d818:	2101      	movs	r1, #1
   2d81a:	400a      	ands	r2, r1
   2d81c:	1890      	adds	r0, r2, r2
   2d81e:	781a      	ldrb	r2, [r3, #0]
   2d820:	2102      	movs	r1, #2
   2d822:	438a      	bics	r2, r1
   2d824:	1c11      	adds	r1, r2, #0
   2d826:	1c02      	adds	r2, r0, #0
   2d828:	430a      	orrs	r2, r1
   2d82a:	701a      	strb	r2, [r3, #0]
   2d82c:	687b      	ldr	r3, [r7, #4]
   2d82e:	7edb      	ldrb	r3, [r3, #27]
   2d830:	1e5a      	subs	r2, r3, #1
   2d832:	4193      	sbcs	r3, r2
   2d834:	b2da      	uxtb	r2, r3
   2d836:	2314      	movs	r3, #20
   2d838:	18fb      	adds	r3, r7, r3
   2d83a:	2101      	movs	r1, #1
   2d83c:	400a      	ands	r2, r1
   2d83e:	0090      	lsls	r0, r2, #2
   2d840:	781a      	ldrb	r2, [r3, #0]
   2d842:	2104      	movs	r1, #4
   2d844:	438a      	bics	r2, r1
   2d846:	1c11      	adds	r1, r2, #0
   2d848:	1c02      	adds	r2, r0, #0
   2d84a:	430a      	orrs	r2, r1
   2d84c:	701a      	strb	r2, [r3, #0]
   2d84e:	2314      	movs	r3, #20
   2d850:	18fb      	adds	r3, r7, r3
   2d852:	781b      	ldrb	r3, [r3, #0]
   2d854:	2204      	movs	r2, #4
   2d856:	4013      	ands	r3, r2
   2d858:	b2db      	uxtb	r3, r3
   2d85a:	2b00      	cmp	r3, #0
   2d85c:	d025      	beq.n	2d8aa <MQTTSerialize_connect+0x16e>
   2d85e:	687b      	ldr	r3, [r7, #4]
   2d860:	223d      	movs	r2, #61	; 0x3d
   2d862:	5c9b      	ldrb	r3, [r3, r2]
   2d864:	1c1a      	adds	r2, r3, #0
   2d866:	2303      	movs	r3, #3
   2d868:	4013      	ands	r3, r2
   2d86a:	b2da      	uxtb	r2, r3
   2d86c:	2314      	movs	r3, #20
   2d86e:	18fb      	adds	r3, r7, r3
   2d870:	2103      	movs	r1, #3
   2d872:	400a      	ands	r2, r1
   2d874:	00d0      	lsls	r0, r2, #3
   2d876:	781a      	ldrb	r2, [r3, #0]
   2d878:	2118      	movs	r1, #24
   2d87a:	438a      	bics	r2, r1
   2d87c:	1c11      	adds	r1, r2, #0
   2d87e:	1c02      	adds	r2, r0, #0
   2d880:	430a      	orrs	r2, r1
   2d882:	701a      	strb	r2, [r3, #0]
   2d884:	687b      	ldr	r3, [r7, #4]
   2d886:	223c      	movs	r2, #60	; 0x3c
   2d888:	5c9b      	ldrb	r3, [r3, r2]
   2d88a:	1c1a      	adds	r2, r3, #0
   2d88c:	2301      	movs	r3, #1
   2d88e:	4013      	ands	r3, r2
   2d890:	b2da      	uxtb	r2, r3
   2d892:	2314      	movs	r3, #20
   2d894:	18fb      	adds	r3, r7, r3
   2d896:	2101      	movs	r1, #1
   2d898:	400a      	ands	r2, r1
   2d89a:	0150      	lsls	r0, r2, #5
   2d89c:	781a      	ldrb	r2, [r3, #0]
   2d89e:	2120      	movs	r1, #32
   2d8a0:	438a      	bics	r2, r1
   2d8a2:	1c11      	adds	r1, r2, #0
   2d8a4:	1c02      	adds	r2, r0, #0
   2d8a6:	430a      	orrs	r2, r1
   2d8a8:	701a      	strb	r2, [r3, #0]
   2d8aa:	687b      	ldr	r3, [r7, #4]
   2d8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2d8ae:	2b00      	cmp	r3, #0
   2d8b0:	d103      	bne.n	2d8ba <MQTTSerialize_connect+0x17e>
   2d8b2:	687b      	ldr	r3, [r7, #4]
   2d8b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2d8b6:	2b00      	cmp	r3, #0
   2d8b8:	d006      	beq.n	2d8c8 <MQTTSerialize_connect+0x18c>
   2d8ba:	2314      	movs	r3, #20
   2d8bc:	18fb      	adds	r3, r7, r3
   2d8be:	781a      	ldrb	r2, [r3, #0]
   2d8c0:	2180      	movs	r1, #128	; 0x80
   2d8c2:	4249      	negs	r1, r1
   2d8c4:	430a      	orrs	r2, r1
   2d8c6:	701a      	strb	r2, [r3, #0]
   2d8c8:	687b      	ldr	r3, [r7, #4]
   2d8ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2d8cc:	2b00      	cmp	r3, #0
   2d8ce:	d103      	bne.n	2d8d8 <MQTTSerialize_connect+0x19c>
   2d8d0:	687b      	ldr	r3, [r7, #4]
   2d8d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2d8d4:	2b00      	cmp	r3, #0
   2d8d6:	d005      	beq.n	2d8e4 <MQTTSerialize_connect+0x1a8>
   2d8d8:	2314      	movs	r3, #20
   2d8da:	18fb      	adds	r3, r7, r3
   2d8dc:	781a      	ldrb	r2, [r3, #0]
   2d8de:	2140      	movs	r1, #64	; 0x40
   2d8e0:	430a      	orrs	r2, r1
   2d8e2:	701a      	strb	r2, [r3, #0]
   2d8e4:	2314      	movs	r3, #20
   2d8e6:	18fb      	adds	r3, r7, r3
   2d8e8:	781a      	ldrb	r2, [r3, #0]
   2d8ea:	231c      	movs	r3, #28
   2d8ec:	18fb      	adds	r3, r7, r3
   2d8ee:	0011      	movs	r1, r2
   2d8f0:	0018      	movs	r0, r3
   2d8f2:	4b2a      	ldr	r3, [pc, #168]	; (2d99c <MQTTSerialize_connect+0x260>)
   2d8f4:	4798      	blx	r3
   2d8f6:	687b      	ldr	r3, [r7, #4]
   2d8f8:	8b1b      	ldrh	r3, [r3, #24]
   2d8fa:	001a      	movs	r2, r3
   2d8fc:	231c      	movs	r3, #28
   2d8fe:	18fb      	adds	r3, r7, r3
   2d900:	0011      	movs	r1, r2
   2d902:	0018      	movs	r0, r3
   2d904:	4b2a      	ldr	r3, [pc, #168]	; (2d9b0 <MQTTSerialize_connect+0x274>)
   2d906:	4798      	blx	r3
   2d908:	687b      	ldr	r3, [r7, #4]
   2d90a:	221c      	movs	r2, #28
   2d90c:	18b8      	adds	r0, r7, r2
   2d90e:	68d9      	ldr	r1, [r3, #12]
   2d910:	691a      	ldr	r2, [r3, #16]
   2d912:	695b      	ldr	r3, [r3, #20]
   2d914:	4c27      	ldr	r4, [pc, #156]	; (2d9b4 <MQTTSerialize_connect+0x278>)
   2d916:	47a0      	blx	r4
   2d918:	687b      	ldr	r3, [r7, #4]
   2d91a:	7edb      	ldrb	r3, [r3, #27]
   2d91c:	2b00      	cmp	r3, #0
   2d91e:	d00f      	beq.n	2d940 <MQTTSerialize_connect+0x204>
   2d920:	687b      	ldr	r3, [r7, #4]
   2d922:	221c      	movs	r2, #28
   2d924:	18b8      	adds	r0, r7, r2
   2d926:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2d928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2d92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2d92c:	4c21      	ldr	r4, [pc, #132]	; (2d9b4 <MQTTSerialize_connect+0x278>)
   2d92e:	47a0      	blx	r4
   2d930:	687b      	ldr	r3, [r7, #4]
   2d932:	221c      	movs	r2, #28
   2d934:	18b8      	adds	r0, r7, r2
   2d936:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2d938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2d93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2d93c:	4c1d      	ldr	r4, [pc, #116]	; (2d9b4 <MQTTSerialize_connect+0x278>)
   2d93e:	47a0      	blx	r4
   2d940:	2314      	movs	r3, #20
   2d942:	18fb      	adds	r3, r7, r3
   2d944:	781b      	ldrb	r3, [r3, #0]
   2d946:	227f      	movs	r2, #127	; 0x7f
   2d948:	4393      	bics	r3, r2
   2d94a:	b2db      	uxtb	r3, r3
   2d94c:	2b00      	cmp	r3, #0
   2d94e:	d007      	beq.n	2d960 <MQTTSerialize_connect+0x224>
   2d950:	687b      	ldr	r3, [r7, #4]
   2d952:	221c      	movs	r2, #28
   2d954:	18b8      	adds	r0, r7, r2
   2d956:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2d958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2d95a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2d95c:	4c15      	ldr	r4, [pc, #84]	; (2d9b4 <MQTTSerialize_connect+0x278>)
   2d95e:	47a0      	blx	r4
   2d960:	2314      	movs	r3, #20
   2d962:	18fb      	adds	r3, r7, r3
   2d964:	781b      	ldrb	r3, [r3, #0]
   2d966:	2240      	movs	r2, #64	; 0x40
   2d968:	4013      	ands	r3, r2
   2d96a:	b2db      	uxtb	r3, r3
   2d96c:	2b00      	cmp	r3, #0
   2d96e:	d007      	beq.n	2d980 <MQTTSerialize_connect+0x244>
   2d970:	687b      	ldr	r3, [r7, #4]
   2d972:	221c      	movs	r2, #28
   2d974:	18b8      	adds	r0, r7, r2
   2d976:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2d978:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2d97a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2d97c:	4c0d      	ldr	r4, [pc, #52]	; (2d9b4 <MQTTSerialize_connect+0x278>)
   2d97e:	47a0      	blx	r4
   2d980:	69fb      	ldr	r3, [r7, #28]
   2d982:	001a      	movs	r2, r3
   2d984:	68fb      	ldr	r3, [r7, #12]
   2d986:	1ad3      	subs	r3, r2, r3
   2d988:	627b      	str	r3, [r7, #36]	; 0x24
   2d98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d98c:	0018      	movs	r0, r3
   2d98e:	46bd      	mov	sp, r7
   2d990:	b00b      	add	sp, #44	; 0x2c
   2d992:	bd90      	pop	{r4, r7, pc}
   2d994:	0002d675 	.word	0x0002d675
   2d998:	0002de09 	.word	0x0002de09
   2d99c:	0002df2b 	.word	0x0002df2b
   2d9a0:	0002dd11 	.word	0x0002dd11
   2d9a4:	000370a4 	.word	0x000370a4
   2d9a8:	0002dfad 	.word	0x0002dfad
   2d9ac:	000370ac 	.word	0x000370ac
   2d9b0:	0002df55 	.word	0x0002df55
   2d9b4:	0002dffd 	.word	0x0002dffd

0002d9b8 <MQTTDeserialize_connack>:
   2d9b8:	b580      	push	{r7, lr}
   2d9ba:	b08a      	sub	sp, #40	; 0x28
   2d9bc:	af00      	add	r7, sp, #0
   2d9be:	60f8      	str	r0, [r7, #12]
   2d9c0:	60b9      	str	r1, [r7, #8]
   2d9c2:	607a      	str	r2, [r7, #4]
   2d9c4:	603b      	str	r3, [r7, #0]
   2d9c6:	2300      	movs	r3, #0
   2d9c8:	61fb      	str	r3, [r7, #28]
   2d9ca:	687b      	ldr	r3, [r7, #4]
   2d9cc:	61bb      	str	r3, [r7, #24]
   2d9ce:	2300      	movs	r3, #0
   2d9d0:	623b      	str	r3, [r7, #32]
   2d9d2:	2300      	movs	r3, #0
   2d9d4:	627b      	str	r3, [r7, #36]	; 0x24
   2d9d6:	2300      	movs	r3, #0
   2d9d8:	613b      	str	r3, [r7, #16]
   2d9da:	2318      	movs	r3, #24
   2d9dc:	18fb      	adds	r3, r7, r3
   2d9de:	0018      	movs	r0, r3
   2d9e0:	4b25      	ldr	r3, [pc, #148]	; (2da78 <MQTTDeserialize_connack+0xc0>)
   2d9e2:	4798      	blx	r3
   2d9e4:	0003      	movs	r3, r0
   2d9e6:	001a      	movs	r2, r3
   2d9e8:	231c      	movs	r3, #28
   2d9ea:	18fb      	adds	r3, r7, r3
   2d9ec:	701a      	strb	r2, [r3, #0]
   2d9ee:	231c      	movs	r3, #28
   2d9f0:	18fb      	adds	r3, r7, r3
   2d9f2:	781b      	ldrb	r3, [r3, #0]
   2d9f4:	220f      	movs	r2, #15
   2d9f6:	4393      	bics	r3, r2
   2d9f8:	b2db      	uxtb	r3, r3
   2d9fa:	2b20      	cmp	r3, #32
   2d9fc:	d134      	bne.n	2da68 <MQTTDeserialize_connack+0xb0>
   2d9fe:	69bb      	ldr	r3, [r7, #24]
   2da00:	2214      	movs	r2, #20
   2da02:	18ba      	adds	r2, r7, r2
   2da04:	0011      	movs	r1, r2
   2da06:	0018      	movs	r0, r3
   2da08:	4b1c      	ldr	r3, [pc, #112]	; (2da7c <MQTTDeserialize_connack+0xc4>)
   2da0a:	4798      	blx	r3
   2da0c:	0003      	movs	r3, r0
   2da0e:	627b      	str	r3, [r7, #36]	; 0x24
   2da10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2da12:	69bb      	ldr	r3, [r7, #24]
   2da14:	189b      	adds	r3, r3, r2
   2da16:	61bb      	str	r3, [r7, #24]
   2da18:	69bb      	ldr	r3, [r7, #24]
   2da1a:	697a      	ldr	r2, [r7, #20]
   2da1c:	189b      	adds	r3, r3, r2
   2da1e:	623b      	str	r3, [r7, #32]
   2da20:	6a3b      	ldr	r3, [r7, #32]
   2da22:	69ba      	ldr	r2, [r7, #24]
   2da24:	1a9b      	subs	r3, r3, r2
   2da26:	2b01      	cmp	r3, #1
   2da28:	dd20      	ble.n	2da6c <MQTTDeserialize_connack+0xb4>
   2da2a:	2318      	movs	r3, #24
   2da2c:	18fb      	adds	r3, r7, r3
   2da2e:	0018      	movs	r0, r3
   2da30:	4b11      	ldr	r3, [pc, #68]	; (2da78 <MQTTDeserialize_connack+0xc0>)
   2da32:	4798      	blx	r3
   2da34:	0003      	movs	r3, r0
   2da36:	001a      	movs	r2, r3
   2da38:	2310      	movs	r3, #16
   2da3a:	18fb      	adds	r3, r7, r3
   2da3c:	701a      	strb	r2, [r3, #0]
   2da3e:	2310      	movs	r3, #16
   2da40:	18fb      	adds	r3, r7, r3
   2da42:	781b      	ldrb	r3, [r3, #0]
   2da44:	061b      	lsls	r3, r3, #24
   2da46:	0fdb      	lsrs	r3, r3, #31
   2da48:	b2db      	uxtb	r3, r3
   2da4a:	001a      	movs	r2, r3
   2da4c:	68fb      	ldr	r3, [r7, #12]
   2da4e:	701a      	strb	r2, [r3, #0]
   2da50:	2318      	movs	r3, #24
   2da52:	18fb      	adds	r3, r7, r3
   2da54:	0018      	movs	r0, r3
   2da56:	4b08      	ldr	r3, [pc, #32]	; (2da78 <MQTTDeserialize_connack+0xc0>)
   2da58:	4798      	blx	r3
   2da5a:	0003      	movs	r3, r0
   2da5c:	001a      	movs	r2, r3
   2da5e:	68bb      	ldr	r3, [r7, #8]
   2da60:	701a      	strb	r2, [r3, #0]
   2da62:	2301      	movs	r3, #1
   2da64:	627b      	str	r3, [r7, #36]	; 0x24
   2da66:	e002      	b.n	2da6e <MQTTDeserialize_connack+0xb6>
   2da68:	46c0      	nop			; (mov r8, r8)
   2da6a:	e000      	b.n	2da6e <MQTTDeserialize_connack+0xb6>
   2da6c:	46c0      	nop			; (mov r8, r8)
   2da6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da70:	0018      	movs	r0, r3
   2da72:	46bd      	mov	sp, r7
   2da74:	b00a      	add	sp, #40	; 0x28
   2da76:	bd80      	pop	{r7, pc}
   2da78:	0002deff 	.word	0x0002deff
   2da7c:	0002de99 	.word	0x0002de99

0002da80 <MQTTSerialize_zero>:
   2da80:	b580      	push	{r7, lr}
   2da82:	b088      	sub	sp, #32
   2da84:	af00      	add	r7, sp, #0
   2da86:	60f8      	str	r0, [r7, #12]
   2da88:	60b9      	str	r1, [r7, #8]
   2da8a:	1dfb      	adds	r3, r7, #7
   2da8c:	701a      	strb	r2, [r3, #0]
   2da8e:	2300      	movs	r3, #0
   2da90:	61bb      	str	r3, [r7, #24]
   2da92:	2301      	movs	r3, #1
   2da94:	425b      	negs	r3, r3
   2da96:	61fb      	str	r3, [r7, #28]
   2da98:	68fb      	ldr	r3, [r7, #12]
   2da9a:	617b      	str	r3, [r7, #20]
   2da9c:	68bb      	ldr	r3, [r7, #8]
   2da9e:	2b01      	cmp	r3, #1
   2daa0:	dc03      	bgt.n	2daaa <MQTTSerialize_zero+0x2a>
   2daa2:	2302      	movs	r3, #2
   2daa4:	425b      	negs	r3, r3
   2daa6:	61fb      	str	r3, [r7, #28]
   2daa8:	e029      	b.n	2dafe <MQTTSerialize_zero+0x7e>
   2daaa:	2318      	movs	r3, #24
   2daac:	18fb      	adds	r3, r7, r3
   2daae:	2200      	movs	r2, #0
   2dab0:	701a      	strb	r2, [r3, #0]
   2dab2:	1dfb      	adds	r3, r7, #7
   2dab4:	781b      	ldrb	r3, [r3, #0]
   2dab6:	220f      	movs	r2, #15
   2dab8:	4013      	ands	r3, r2
   2daba:	b2da      	uxtb	r2, r3
   2dabc:	2318      	movs	r3, #24
   2dabe:	18fb      	adds	r3, r7, r3
   2dac0:	0110      	lsls	r0, r2, #4
   2dac2:	781a      	ldrb	r2, [r3, #0]
   2dac4:	210f      	movs	r1, #15
   2dac6:	400a      	ands	r2, r1
   2dac8:	1c11      	adds	r1, r2, #0
   2daca:	1c02      	adds	r2, r0, #0
   2dacc:	430a      	orrs	r2, r1
   2dace:	701a      	strb	r2, [r3, #0]
   2dad0:	2318      	movs	r3, #24
   2dad2:	18fb      	adds	r3, r7, r3
   2dad4:	781a      	ldrb	r2, [r3, #0]
   2dad6:	2314      	movs	r3, #20
   2dad8:	18fb      	adds	r3, r7, r3
   2dada:	0011      	movs	r1, r2
   2dadc:	0018      	movs	r0, r3
   2dade:	4b0a      	ldr	r3, [pc, #40]	; (2db08 <MQTTSerialize_zero+0x88>)
   2dae0:	4798      	blx	r3
   2dae2:	697b      	ldr	r3, [r7, #20]
   2dae4:	2100      	movs	r1, #0
   2dae6:	0018      	movs	r0, r3
   2dae8:	4b08      	ldr	r3, [pc, #32]	; (2db0c <MQTTSerialize_zero+0x8c>)
   2daea:	4798      	blx	r3
   2daec:	0002      	movs	r2, r0
   2daee:	697b      	ldr	r3, [r7, #20]
   2daf0:	189b      	adds	r3, r3, r2
   2daf2:	617b      	str	r3, [r7, #20]
   2daf4:	697b      	ldr	r3, [r7, #20]
   2daf6:	001a      	movs	r2, r3
   2daf8:	68fb      	ldr	r3, [r7, #12]
   2dafa:	1ad3      	subs	r3, r2, r3
   2dafc:	61fb      	str	r3, [r7, #28]
   2dafe:	69fb      	ldr	r3, [r7, #28]
   2db00:	0018      	movs	r0, r3
   2db02:	46bd      	mov	sp, r7
   2db04:	b008      	add	sp, #32
   2db06:	bd80      	pop	{r7, pc}
   2db08:	0002df2b 	.word	0x0002df2b
   2db0c:	0002dd11 	.word	0x0002dd11

0002db10 <MQTTSerialize_disconnect>:
   2db10:	b580      	push	{r7, lr}
   2db12:	b082      	sub	sp, #8
   2db14:	af00      	add	r7, sp, #0
   2db16:	6078      	str	r0, [r7, #4]
   2db18:	6039      	str	r1, [r7, #0]
   2db1a:	6839      	ldr	r1, [r7, #0]
   2db1c:	687b      	ldr	r3, [r7, #4]
   2db1e:	220e      	movs	r2, #14
   2db20:	0018      	movs	r0, r3
   2db22:	4b03      	ldr	r3, [pc, #12]	; (2db30 <MQTTSerialize_disconnect+0x20>)
   2db24:	4798      	blx	r3
   2db26:	0003      	movs	r3, r0
   2db28:	0018      	movs	r0, r3
   2db2a:	46bd      	mov	sp, r7
   2db2c:	b002      	add	sp, #8
   2db2e:	bd80      	pop	{r7, pc}
   2db30:	0002da81 	.word	0x0002da81

0002db34 <MQTTSerialize_pingreq>:
   2db34:	b580      	push	{r7, lr}
   2db36:	b082      	sub	sp, #8
   2db38:	af00      	add	r7, sp, #0
   2db3a:	6078      	str	r0, [r7, #4]
   2db3c:	6039      	str	r1, [r7, #0]
   2db3e:	6839      	ldr	r1, [r7, #0]
   2db40:	687b      	ldr	r3, [r7, #4]
   2db42:	220c      	movs	r2, #12
   2db44:	0018      	movs	r0, r3
   2db46:	4b03      	ldr	r3, [pc, #12]	; (2db54 <MQTTSerialize_pingreq+0x20>)
   2db48:	4798      	blx	r3
   2db4a:	0003      	movs	r3, r0
   2db4c:	0018      	movs	r0, r3
   2db4e:	46bd      	mov	sp, r7
   2db50:	b002      	add	sp, #8
   2db52:	bd80      	pop	{r7, pc}
   2db54:	0002da81 	.word	0x0002da81

0002db58 <MQTTDeserialize_publish>:
   2db58:	b580      	push	{r7, lr}
   2db5a:	b08a      	sub	sp, #40	; 0x28
   2db5c:	af00      	add	r7, sp, #0
   2db5e:	60f8      	str	r0, [r7, #12]
   2db60:	60b9      	str	r1, [r7, #8]
   2db62:	607a      	str	r2, [r7, #4]
   2db64:	603b      	str	r3, [r7, #0]
   2db66:	2300      	movs	r3, #0
   2db68:	61fb      	str	r3, [r7, #28]
   2db6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2db6c:	61bb      	str	r3, [r7, #24]
   2db6e:	2300      	movs	r3, #0
   2db70:	623b      	str	r3, [r7, #32]
   2db72:	2300      	movs	r3, #0
   2db74:	627b      	str	r3, [r7, #36]	; 0x24
   2db76:	2300      	movs	r3, #0
   2db78:	617b      	str	r3, [r7, #20]
   2db7a:	2318      	movs	r3, #24
   2db7c:	18fb      	adds	r3, r7, r3
   2db7e:	0018      	movs	r0, r3
   2db80:	4b32      	ldr	r3, [pc, #200]	; (2dc4c <MQTTDeserialize_publish+0xf4>)
   2db82:	4798      	blx	r3
   2db84:	0003      	movs	r3, r0
   2db86:	001a      	movs	r2, r3
   2db88:	231c      	movs	r3, #28
   2db8a:	18fb      	adds	r3, r7, r3
   2db8c:	701a      	strb	r2, [r3, #0]
   2db8e:	231c      	movs	r3, #28
   2db90:	18fb      	adds	r3, r7, r3
   2db92:	781b      	ldrb	r3, [r3, #0]
   2db94:	220f      	movs	r2, #15
   2db96:	4393      	bics	r3, r2
   2db98:	b2db      	uxtb	r3, r3
   2db9a:	2b30      	cmp	r3, #48	; 0x30
   2db9c:	d150      	bne.n	2dc40 <MQTTDeserialize_publish+0xe8>
   2db9e:	231c      	movs	r3, #28
   2dba0:	18fb      	adds	r3, r7, r3
   2dba2:	781b      	ldrb	r3, [r3, #0]
   2dba4:	071b      	lsls	r3, r3, #28
   2dba6:	0fdb      	lsrs	r3, r3, #31
   2dba8:	b2db      	uxtb	r3, r3
   2dbaa:	001a      	movs	r2, r3
   2dbac:	68fb      	ldr	r3, [r7, #12]
   2dbae:	701a      	strb	r2, [r3, #0]
   2dbb0:	231c      	movs	r3, #28
   2dbb2:	18fb      	adds	r3, r7, r3
   2dbb4:	781b      	ldrb	r3, [r3, #0]
   2dbb6:	075b      	lsls	r3, r3, #29
   2dbb8:	0f9b      	lsrs	r3, r3, #30
   2dbba:	b2db      	uxtb	r3, r3
   2dbbc:	001a      	movs	r2, r3
   2dbbe:	68bb      	ldr	r3, [r7, #8]
   2dbc0:	601a      	str	r2, [r3, #0]
   2dbc2:	231c      	movs	r3, #28
   2dbc4:	18fb      	adds	r3, r7, r3
   2dbc6:	781b      	ldrb	r3, [r3, #0]
   2dbc8:	07db      	lsls	r3, r3, #31
   2dbca:	0fdb      	lsrs	r3, r3, #31
   2dbcc:	b2db      	uxtb	r3, r3
   2dbce:	001a      	movs	r2, r3
   2dbd0:	687b      	ldr	r3, [r7, #4]
   2dbd2:	701a      	strb	r2, [r3, #0]
   2dbd4:	69bb      	ldr	r3, [r7, #24]
   2dbd6:	2214      	movs	r2, #20
   2dbd8:	18ba      	adds	r2, r7, r2
   2dbda:	0011      	movs	r1, r2
   2dbdc:	0018      	movs	r0, r3
   2dbde:	4b1c      	ldr	r3, [pc, #112]	; (2dc50 <MQTTDeserialize_publish+0xf8>)
   2dbe0:	4798      	blx	r3
   2dbe2:	0003      	movs	r3, r0
   2dbe4:	627b      	str	r3, [r7, #36]	; 0x24
   2dbe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2dbe8:	69bb      	ldr	r3, [r7, #24]
   2dbea:	189b      	adds	r3, r3, r2
   2dbec:	61bb      	str	r3, [r7, #24]
   2dbee:	69bb      	ldr	r3, [r7, #24]
   2dbf0:	697a      	ldr	r2, [r7, #20]
   2dbf2:	189b      	adds	r3, r3, r2
   2dbf4:	623b      	str	r3, [r7, #32]
   2dbf6:	6a3a      	ldr	r2, [r7, #32]
   2dbf8:	2318      	movs	r3, #24
   2dbfa:	18f9      	adds	r1, r7, r3
   2dbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dbfe:	0018      	movs	r0, r3
   2dc00:	4b14      	ldr	r3, [pc, #80]	; (2dc54 <MQTTDeserialize_publish+0xfc>)
   2dc02:	4798      	blx	r3
   2dc04:	1e03      	subs	r3, r0, #0
   2dc06:	d01c      	beq.n	2dc42 <MQTTDeserialize_publish+0xea>
   2dc08:	6a3b      	ldr	r3, [r7, #32]
   2dc0a:	69ba      	ldr	r2, [r7, #24]
   2dc0c:	1a9b      	subs	r3, r3, r2
   2dc0e:	d418      	bmi.n	2dc42 <MQTTDeserialize_publish+0xea>
   2dc10:	68bb      	ldr	r3, [r7, #8]
   2dc12:	681b      	ldr	r3, [r3, #0]
   2dc14:	2b00      	cmp	r3, #0
   2dc16:	dd08      	ble.n	2dc2a <MQTTDeserialize_publish+0xd2>
   2dc18:	2318      	movs	r3, #24
   2dc1a:	18fb      	adds	r3, r7, r3
   2dc1c:	0018      	movs	r0, r3
   2dc1e:	4b0e      	ldr	r3, [pc, #56]	; (2dc58 <MQTTDeserialize_publish+0x100>)
   2dc20:	4798      	blx	r3
   2dc22:	0003      	movs	r3, r0
   2dc24:	b29a      	uxth	r2, r3
   2dc26:	683b      	ldr	r3, [r7, #0]
   2dc28:	801a      	strh	r2, [r3, #0]
   2dc2a:	6a3b      	ldr	r3, [r7, #32]
   2dc2c:	69ba      	ldr	r2, [r7, #24]
   2dc2e:	1a9a      	subs	r2, r3, r2
   2dc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2dc32:	601a      	str	r2, [r3, #0]
   2dc34:	69ba      	ldr	r2, [r7, #24]
   2dc36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2dc38:	601a      	str	r2, [r3, #0]
   2dc3a:	2301      	movs	r3, #1
   2dc3c:	627b      	str	r3, [r7, #36]	; 0x24
   2dc3e:	e000      	b.n	2dc42 <MQTTDeserialize_publish+0xea>
   2dc40:	46c0      	nop			; (mov r8, r8)
   2dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc44:	0018      	movs	r0, r3
   2dc46:	46bd      	mov	sp, r7
   2dc48:	b00a      	add	sp, #40	; 0x28
   2dc4a:	bd80      	pop	{r7, pc}
   2dc4c:	0002deff 	.word	0x0002deff
   2dc50:	0002de99 	.word	0x0002de99
   2dc54:	0002e07d 	.word	0x0002e07d
   2dc58:	0002decd 	.word	0x0002decd

0002dc5c <MQTTDeserialize_ack>:
   2dc5c:	b580      	push	{r7, lr}
   2dc5e:	b08a      	sub	sp, #40	; 0x28
   2dc60:	af00      	add	r7, sp, #0
   2dc62:	60f8      	str	r0, [r7, #12]
   2dc64:	60b9      	str	r1, [r7, #8]
   2dc66:	607a      	str	r2, [r7, #4]
   2dc68:	603b      	str	r3, [r7, #0]
   2dc6a:	2300      	movs	r3, #0
   2dc6c:	61fb      	str	r3, [r7, #28]
   2dc6e:	683b      	ldr	r3, [r7, #0]
   2dc70:	61bb      	str	r3, [r7, #24]
   2dc72:	2300      	movs	r3, #0
   2dc74:	623b      	str	r3, [r7, #32]
   2dc76:	2300      	movs	r3, #0
   2dc78:	627b      	str	r3, [r7, #36]	; 0x24
   2dc7a:	2318      	movs	r3, #24
   2dc7c:	18fb      	adds	r3, r7, r3
   2dc7e:	0018      	movs	r0, r3
   2dc80:	4b20      	ldr	r3, [pc, #128]	; (2dd04 <MQTTDeserialize_ack+0xa8>)
   2dc82:	4798      	blx	r3
   2dc84:	0003      	movs	r3, r0
   2dc86:	001a      	movs	r2, r3
   2dc88:	231c      	movs	r3, #28
   2dc8a:	18fb      	adds	r3, r7, r3
   2dc8c:	701a      	strb	r2, [r3, #0]
   2dc8e:	231c      	movs	r3, #28
   2dc90:	18fb      	adds	r3, r7, r3
   2dc92:	781b      	ldrb	r3, [r3, #0]
   2dc94:	071b      	lsls	r3, r3, #28
   2dc96:	0fdb      	lsrs	r3, r3, #31
   2dc98:	b2db      	uxtb	r3, r3
   2dc9a:	001a      	movs	r2, r3
   2dc9c:	68bb      	ldr	r3, [r7, #8]
   2dc9e:	701a      	strb	r2, [r3, #0]
   2dca0:	231c      	movs	r3, #28
   2dca2:	18fb      	adds	r3, r7, r3
   2dca4:	781b      	ldrb	r3, [r3, #0]
   2dca6:	061b      	lsls	r3, r3, #24
   2dca8:	0f1b      	lsrs	r3, r3, #28
   2dcaa:	b2db      	uxtb	r3, r3
   2dcac:	001a      	movs	r2, r3
   2dcae:	68fb      	ldr	r3, [r7, #12]
   2dcb0:	701a      	strb	r2, [r3, #0]
   2dcb2:	69bb      	ldr	r3, [r7, #24]
   2dcb4:	2214      	movs	r2, #20
   2dcb6:	18ba      	adds	r2, r7, r2
   2dcb8:	0011      	movs	r1, r2
   2dcba:	0018      	movs	r0, r3
   2dcbc:	4b12      	ldr	r3, [pc, #72]	; (2dd08 <MQTTDeserialize_ack+0xac>)
   2dcbe:	4798      	blx	r3
   2dcc0:	0003      	movs	r3, r0
   2dcc2:	627b      	str	r3, [r7, #36]	; 0x24
   2dcc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2dcc6:	69bb      	ldr	r3, [r7, #24]
   2dcc8:	189b      	adds	r3, r3, r2
   2dcca:	61bb      	str	r3, [r7, #24]
   2dccc:	69bb      	ldr	r3, [r7, #24]
   2dcce:	697a      	ldr	r2, [r7, #20]
   2dcd0:	189b      	adds	r3, r3, r2
   2dcd2:	623b      	str	r3, [r7, #32]
   2dcd4:	6a3b      	ldr	r3, [r7, #32]
   2dcd6:	69ba      	ldr	r2, [r7, #24]
   2dcd8:	1a9b      	subs	r3, r3, r2
   2dcda:	2b01      	cmp	r3, #1
   2dcdc:	dd0b      	ble.n	2dcf6 <MQTTDeserialize_ack+0x9a>
   2dcde:	2318      	movs	r3, #24
   2dce0:	18fb      	adds	r3, r7, r3
   2dce2:	0018      	movs	r0, r3
   2dce4:	4b09      	ldr	r3, [pc, #36]	; (2dd0c <MQTTDeserialize_ack+0xb0>)
   2dce6:	4798      	blx	r3
   2dce8:	0003      	movs	r3, r0
   2dcea:	b29a      	uxth	r2, r3
   2dcec:	687b      	ldr	r3, [r7, #4]
   2dcee:	801a      	strh	r2, [r3, #0]
   2dcf0:	2301      	movs	r3, #1
   2dcf2:	627b      	str	r3, [r7, #36]	; 0x24
   2dcf4:	e000      	b.n	2dcf8 <MQTTDeserialize_ack+0x9c>
   2dcf6:	46c0      	nop			; (mov r8, r8)
   2dcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dcfa:	0018      	movs	r0, r3
   2dcfc:	46bd      	mov	sp, r7
   2dcfe:	b00a      	add	sp, #40	; 0x28
   2dd00:	bd80      	pop	{r7, pc}
   2dd02:	46c0      	nop			; (mov r8, r8)
   2dd04:	0002deff 	.word	0x0002deff
   2dd08:	0002de99 	.word	0x0002de99
   2dd0c:	0002decd 	.word	0x0002decd

0002dd10 <MQTTPacket_encode>:
   2dd10:	b580      	push	{r7, lr}
   2dd12:	b084      	sub	sp, #16
   2dd14:	af00      	add	r7, sp, #0
   2dd16:	6078      	str	r0, [r7, #4]
   2dd18:	6039      	str	r1, [r7, #0]
   2dd1a:	2300      	movs	r3, #0
   2dd1c:	60fb      	str	r3, [r7, #12]
   2dd1e:	683b      	ldr	r3, [r7, #0]
   2dd20:	4a17      	ldr	r2, [pc, #92]	; (2dd80 <MQTTPacket_encode+0x70>)
   2dd22:	4013      	ands	r3, r2
   2dd24:	d504      	bpl.n	2dd30 <MQTTPacket_encode+0x20>
   2dd26:	3b01      	subs	r3, #1
   2dd28:	2280      	movs	r2, #128	; 0x80
   2dd2a:	4252      	negs	r2, r2
   2dd2c:	4313      	orrs	r3, r2
   2dd2e:	3301      	adds	r3, #1
   2dd30:	001a      	movs	r2, r3
   2dd32:	230b      	movs	r3, #11
   2dd34:	18fb      	adds	r3, r7, r3
   2dd36:	701a      	strb	r2, [r3, #0]
   2dd38:	683b      	ldr	r3, [r7, #0]
   2dd3a:	2b00      	cmp	r3, #0
   2dd3c:	da00      	bge.n	2dd40 <MQTTPacket_encode+0x30>
   2dd3e:	337f      	adds	r3, #127	; 0x7f
   2dd40:	11db      	asrs	r3, r3, #7
   2dd42:	603b      	str	r3, [r7, #0]
   2dd44:	683b      	ldr	r3, [r7, #0]
   2dd46:	2b00      	cmp	r3, #0
   2dd48:	dd08      	ble.n	2dd5c <MQTTPacket_encode+0x4c>
   2dd4a:	230b      	movs	r3, #11
   2dd4c:	18fb      	adds	r3, r7, r3
   2dd4e:	220b      	movs	r2, #11
   2dd50:	18ba      	adds	r2, r7, r2
   2dd52:	7812      	ldrb	r2, [r2, #0]
   2dd54:	2180      	movs	r1, #128	; 0x80
   2dd56:	4249      	negs	r1, r1
   2dd58:	430a      	orrs	r2, r1
   2dd5a:	701a      	strb	r2, [r3, #0]
   2dd5c:	68fb      	ldr	r3, [r7, #12]
   2dd5e:	1c5a      	adds	r2, r3, #1
   2dd60:	60fa      	str	r2, [r7, #12]
   2dd62:	001a      	movs	r2, r3
   2dd64:	687b      	ldr	r3, [r7, #4]
   2dd66:	189b      	adds	r3, r3, r2
   2dd68:	220b      	movs	r2, #11
   2dd6a:	18ba      	adds	r2, r7, r2
   2dd6c:	7812      	ldrb	r2, [r2, #0]
   2dd6e:	701a      	strb	r2, [r3, #0]
   2dd70:	683b      	ldr	r3, [r7, #0]
   2dd72:	2b00      	cmp	r3, #0
   2dd74:	dcd3      	bgt.n	2dd1e <MQTTPacket_encode+0xe>
   2dd76:	68fb      	ldr	r3, [r7, #12]
   2dd78:	0018      	movs	r0, r3
   2dd7a:	46bd      	mov	sp, r7
   2dd7c:	b004      	add	sp, #16
   2dd7e:	bd80      	pop	{r7, pc}
   2dd80:	8000007f 	.word	0x8000007f

0002dd84 <MQTTPacket_decode>:
   2dd84:	b580      	push	{r7, lr}
   2dd86:	b086      	sub	sp, #24
   2dd88:	af00      	add	r7, sp, #0
   2dd8a:	6078      	str	r0, [r7, #4]
   2dd8c:	6039      	str	r1, [r7, #0]
   2dd8e:	2301      	movs	r3, #1
   2dd90:	617b      	str	r3, [r7, #20]
   2dd92:	2300      	movs	r3, #0
   2dd94:	613b      	str	r3, [r7, #16]
   2dd96:	683b      	ldr	r3, [r7, #0]
   2dd98:	2200      	movs	r2, #0
   2dd9a:	601a      	str	r2, [r3, #0]
   2dd9c:	2301      	movs	r3, #1
   2dd9e:	425b      	negs	r3, r3
   2dda0:	60fb      	str	r3, [r7, #12]
   2dda2:	693b      	ldr	r3, [r7, #16]
   2dda4:	3301      	adds	r3, #1
   2dda6:	613b      	str	r3, [r7, #16]
   2dda8:	693b      	ldr	r3, [r7, #16]
   2ddaa:	2b04      	cmp	r3, #4
   2ddac:	dd03      	ble.n	2ddb6 <MQTTPacket_decode+0x32>
   2ddae:	2301      	movs	r3, #1
   2ddb0:	425b      	negs	r3, r3
   2ddb2:	60fb      	str	r3, [r7, #12]
   2ddb4:	e022      	b.n	2ddfc <MQTTPacket_decode+0x78>
   2ddb6:	230b      	movs	r3, #11
   2ddb8:	18fa      	adds	r2, r7, r3
   2ddba:	687b      	ldr	r3, [r7, #4]
   2ddbc:	2101      	movs	r1, #1
   2ddbe:	0010      	movs	r0, r2
   2ddc0:	4798      	blx	r3
   2ddc2:	0003      	movs	r3, r0
   2ddc4:	60fb      	str	r3, [r7, #12]
   2ddc6:	68fb      	ldr	r3, [r7, #12]
   2ddc8:	2b01      	cmp	r3, #1
   2ddca:	d116      	bne.n	2ddfa <MQTTPacket_decode+0x76>
   2ddcc:	683b      	ldr	r3, [r7, #0]
   2ddce:	681a      	ldr	r2, [r3, #0]
   2ddd0:	230b      	movs	r3, #11
   2ddd2:	18fb      	adds	r3, r7, r3
   2ddd4:	781b      	ldrb	r3, [r3, #0]
   2ddd6:	0019      	movs	r1, r3
   2ddd8:	237f      	movs	r3, #127	; 0x7f
   2ddda:	400b      	ands	r3, r1
   2dddc:	6979      	ldr	r1, [r7, #20]
   2ddde:	434b      	muls	r3, r1
   2dde0:	18d2      	adds	r2, r2, r3
   2dde2:	683b      	ldr	r3, [r7, #0]
   2dde4:	601a      	str	r2, [r3, #0]
   2dde6:	697b      	ldr	r3, [r7, #20]
   2dde8:	01db      	lsls	r3, r3, #7
   2ddea:	617b      	str	r3, [r7, #20]
   2ddec:	230b      	movs	r3, #11
   2ddee:	18fb      	adds	r3, r7, r3
   2ddf0:	781b      	ldrb	r3, [r3, #0]
   2ddf2:	b25b      	sxtb	r3, r3
   2ddf4:	2b00      	cmp	r3, #0
   2ddf6:	dbd1      	blt.n	2dd9c <MQTTPacket_decode+0x18>
   2ddf8:	e000      	b.n	2ddfc <MQTTPacket_decode+0x78>
   2ddfa:	46c0      	nop			; (mov r8, r8)
   2ddfc:	693b      	ldr	r3, [r7, #16]
   2ddfe:	0018      	movs	r0, r3
   2de00:	46bd      	mov	sp, r7
   2de02:	b006      	add	sp, #24
   2de04:	bd80      	pop	{r7, pc}
	...

0002de08 <MQTTPacket_len>:
   2de08:	b580      	push	{r7, lr}
   2de0a:	b082      	sub	sp, #8
   2de0c:	af00      	add	r7, sp, #0
   2de0e:	6078      	str	r0, [r7, #4]
   2de10:	687b      	ldr	r3, [r7, #4]
   2de12:	3301      	adds	r3, #1
   2de14:	607b      	str	r3, [r7, #4]
   2de16:	687b      	ldr	r3, [r7, #4]
   2de18:	2b7f      	cmp	r3, #127	; 0x7f
   2de1a:	dc03      	bgt.n	2de24 <MQTTPacket_len+0x1c>
   2de1c:	687b      	ldr	r3, [r7, #4]
   2de1e:	3301      	adds	r3, #1
   2de20:	607b      	str	r3, [r7, #4]
   2de22:	e012      	b.n	2de4a <MQTTPacket_len+0x42>
   2de24:	687b      	ldr	r3, [r7, #4]
   2de26:	4a0b      	ldr	r2, [pc, #44]	; (2de54 <MQTTPacket_len+0x4c>)
   2de28:	4293      	cmp	r3, r2
   2de2a:	dc03      	bgt.n	2de34 <MQTTPacket_len+0x2c>
   2de2c:	687b      	ldr	r3, [r7, #4]
   2de2e:	3302      	adds	r3, #2
   2de30:	607b      	str	r3, [r7, #4]
   2de32:	e00a      	b.n	2de4a <MQTTPacket_len+0x42>
   2de34:	687b      	ldr	r3, [r7, #4]
   2de36:	4a08      	ldr	r2, [pc, #32]	; (2de58 <MQTTPacket_len+0x50>)
   2de38:	4293      	cmp	r3, r2
   2de3a:	dc03      	bgt.n	2de44 <MQTTPacket_len+0x3c>
   2de3c:	687b      	ldr	r3, [r7, #4]
   2de3e:	3303      	adds	r3, #3
   2de40:	607b      	str	r3, [r7, #4]
   2de42:	e002      	b.n	2de4a <MQTTPacket_len+0x42>
   2de44:	687b      	ldr	r3, [r7, #4]
   2de46:	3304      	adds	r3, #4
   2de48:	607b      	str	r3, [r7, #4]
   2de4a:	687b      	ldr	r3, [r7, #4]
   2de4c:	0018      	movs	r0, r3
   2de4e:	46bd      	mov	sp, r7
   2de50:	b002      	add	sp, #8
   2de52:	bd80      	pop	{r7, pc}
   2de54:	00003fff 	.word	0x00003fff
   2de58:	001ffffe 	.word	0x001ffffe

0002de5c <bufchar>:
   2de5c:	b580      	push	{r7, lr}
   2de5e:	b084      	sub	sp, #16
   2de60:	af00      	add	r7, sp, #0
   2de62:	6078      	str	r0, [r7, #4]
   2de64:	6039      	str	r1, [r7, #0]
   2de66:	2300      	movs	r3, #0
   2de68:	60fb      	str	r3, [r7, #12]
   2de6a:	e00a      	b.n	2de82 <bufchar+0x26>
   2de6c:	4b09      	ldr	r3, [pc, #36]	; (2de94 <bufchar+0x38>)
   2de6e:	681b      	ldr	r3, [r3, #0]
   2de70:	1c59      	adds	r1, r3, #1
   2de72:	4a08      	ldr	r2, [pc, #32]	; (2de94 <bufchar+0x38>)
   2de74:	6011      	str	r1, [r2, #0]
   2de76:	781a      	ldrb	r2, [r3, #0]
   2de78:	687b      	ldr	r3, [r7, #4]
   2de7a:	701a      	strb	r2, [r3, #0]
   2de7c:	68fb      	ldr	r3, [r7, #12]
   2de7e:	3301      	adds	r3, #1
   2de80:	60fb      	str	r3, [r7, #12]
   2de82:	68fa      	ldr	r2, [r7, #12]
   2de84:	683b      	ldr	r3, [r7, #0]
   2de86:	429a      	cmp	r2, r3
   2de88:	dbf0      	blt.n	2de6c <bufchar+0x10>
   2de8a:	683b      	ldr	r3, [r7, #0]
   2de8c:	0018      	movs	r0, r3
   2de8e:	46bd      	mov	sp, r7
   2de90:	b004      	add	sp, #16
   2de92:	bd80      	pop	{r7, pc}
   2de94:	20004148 	.word	0x20004148

0002de98 <MQTTPacket_decodeBuf>:
   2de98:	b580      	push	{r7, lr}
   2de9a:	b082      	sub	sp, #8
   2de9c:	af00      	add	r7, sp, #0
   2de9e:	6078      	str	r0, [r7, #4]
   2dea0:	6039      	str	r1, [r7, #0]
   2dea2:	4b07      	ldr	r3, [pc, #28]	; (2dec0 <MQTTPacket_decodeBuf+0x28>)
   2dea4:	687a      	ldr	r2, [r7, #4]
   2dea6:	601a      	str	r2, [r3, #0]
   2dea8:	683a      	ldr	r2, [r7, #0]
   2deaa:	4b06      	ldr	r3, [pc, #24]	; (2dec4 <MQTTPacket_decodeBuf+0x2c>)
   2deac:	0011      	movs	r1, r2
   2deae:	0018      	movs	r0, r3
   2deb0:	4b05      	ldr	r3, [pc, #20]	; (2dec8 <MQTTPacket_decodeBuf+0x30>)
   2deb2:	4798      	blx	r3
   2deb4:	0003      	movs	r3, r0
   2deb6:	0018      	movs	r0, r3
   2deb8:	46bd      	mov	sp, r7
   2deba:	b002      	add	sp, #8
   2debc:	bd80      	pop	{r7, pc}
   2debe:	46c0      	nop			; (mov r8, r8)
   2dec0:	20004148 	.word	0x20004148
   2dec4:	0002de5d 	.word	0x0002de5d
   2dec8:	0002dd85 	.word	0x0002dd85

0002decc <readInt>:
   2decc:	b580      	push	{r7, lr}
   2dece:	b084      	sub	sp, #16
   2ded0:	af00      	add	r7, sp, #0
   2ded2:	6078      	str	r0, [r7, #4]
   2ded4:	687b      	ldr	r3, [r7, #4]
   2ded6:	681b      	ldr	r3, [r3, #0]
   2ded8:	60fb      	str	r3, [r7, #12]
   2deda:	68fb      	ldr	r3, [r7, #12]
   2dedc:	781b      	ldrb	r3, [r3, #0]
   2dede:	021b      	lsls	r3, r3, #8
   2dee0:	68fa      	ldr	r2, [r7, #12]
   2dee2:	3201      	adds	r2, #1
   2dee4:	7812      	ldrb	r2, [r2, #0]
   2dee6:	189b      	adds	r3, r3, r2
   2dee8:	60bb      	str	r3, [r7, #8]
   2deea:	687b      	ldr	r3, [r7, #4]
   2deec:	681b      	ldr	r3, [r3, #0]
   2deee:	1c9a      	adds	r2, r3, #2
   2def0:	687b      	ldr	r3, [r7, #4]
   2def2:	601a      	str	r2, [r3, #0]
   2def4:	68bb      	ldr	r3, [r7, #8]
   2def6:	0018      	movs	r0, r3
   2def8:	46bd      	mov	sp, r7
   2defa:	b004      	add	sp, #16
   2defc:	bd80      	pop	{r7, pc}

0002defe <readChar>:
   2defe:	b580      	push	{r7, lr}
   2df00:	b084      	sub	sp, #16
   2df02:	af00      	add	r7, sp, #0
   2df04:	6078      	str	r0, [r7, #4]
   2df06:	687b      	ldr	r3, [r7, #4]
   2df08:	681a      	ldr	r2, [r3, #0]
   2df0a:	230f      	movs	r3, #15
   2df0c:	18fb      	adds	r3, r7, r3
   2df0e:	7812      	ldrb	r2, [r2, #0]
   2df10:	701a      	strb	r2, [r3, #0]
   2df12:	687b      	ldr	r3, [r7, #4]
   2df14:	681b      	ldr	r3, [r3, #0]
   2df16:	1c5a      	adds	r2, r3, #1
   2df18:	687b      	ldr	r3, [r7, #4]
   2df1a:	601a      	str	r2, [r3, #0]
   2df1c:	230f      	movs	r3, #15
   2df1e:	18fb      	adds	r3, r7, r3
   2df20:	781b      	ldrb	r3, [r3, #0]
   2df22:	0018      	movs	r0, r3
   2df24:	46bd      	mov	sp, r7
   2df26:	b004      	add	sp, #16
   2df28:	bd80      	pop	{r7, pc}

0002df2a <writeChar>:
   2df2a:	b580      	push	{r7, lr}
   2df2c:	b082      	sub	sp, #8
   2df2e:	af00      	add	r7, sp, #0
   2df30:	6078      	str	r0, [r7, #4]
   2df32:	000a      	movs	r2, r1
   2df34:	1cfb      	adds	r3, r7, #3
   2df36:	701a      	strb	r2, [r3, #0]
   2df38:	687b      	ldr	r3, [r7, #4]
   2df3a:	681b      	ldr	r3, [r3, #0]
   2df3c:	1cfa      	adds	r2, r7, #3
   2df3e:	7812      	ldrb	r2, [r2, #0]
   2df40:	701a      	strb	r2, [r3, #0]
   2df42:	687b      	ldr	r3, [r7, #4]
   2df44:	681b      	ldr	r3, [r3, #0]
   2df46:	1c5a      	adds	r2, r3, #1
   2df48:	687b      	ldr	r3, [r7, #4]
   2df4a:	601a      	str	r2, [r3, #0]
   2df4c:	46c0      	nop			; (mov r8, r8)
   2df4e:	46bd      	mov	sp, r7
   2df50:	b002      	add	sp, #8
   2df52:	bd80      	pop	{r7, pc}

0002df54 <writeInt>:
   2df54:	b580      	push	{r7, lr}
   2df56:	b082      	sub	sp, #8
   2df58:	af00      	add	r7, sp, #0
   2df5a:	6078      	str	r0, [r7, #4]
   2df5c:	6039      	str	r1, [r7, #0]
   2df5e:	687b      	ldr	r3, [r7, #4]
   2df60:	681a      	ldr	r2, [r3, #0]
   2df62:	683b      	ldr	r3, [r7, #0]
   2df64:	2b00      	cmp	r3, #0
   2df66:	da00      	bge.n	2df6a <writeInt+0x16>
   2df68:	33ff      	adds	r3, #255	; 0xff
   2df6a:	121b      	asrs	r3, r3, #8
   2df6c:	b2db      	uxtb	r3, r3
   2df6e:	7013      	strb	r3, [r2, #0]
   2df70:	687b      	ldr	r3, [r7, #4]
   2df72:	681b      	ldr	r3, [r3, #0]
   2df74:	1c5a      	adds	r2, r3, #1
   2df76:	687b      	ldr	r3, [r7, #4]
   2df78:	601a      	str	r2, [r3, #0]
   2df7a:	687b      	ldr	r3, [r7, #4]
   2df7c:	681a      	ldr	r2, [r3, #0]
   2df7e:	683b      	ldr	r3, [r7, #0]
   2df80:	4908      	ldr	r1, [pc, #32]	; (2dfa4 <writeInt+0x50>)
   2df82:	400b      	ands	r3, r1
   2df84:	d503      	bpl.n	2df8e <writeInt+0x3a>
   2df86:	3b01      	subs	r3, #1
   2df88:	4907      	ldr	r1, [pc, #28]	; (2dfa8 <writeInt+0x54>)
   2df8a:	430b      	orrs	r3, r1
   2df8c:	3301      	adds	r3, #1
   2df8e:	b2db      	uxtb	r3, r3
   2df90:	7013      	strb	r3, [r2, #0]
   2df92:	687b      	ldr	r3, [r7, #4]
   2df94:	681b      	ldr	r3, [r3, #0]
   2df96:	1c5a      	adds	r2, r3, #1
   2df98:	687b      	ldr	r3, [r7, #4]
   2df9a:	601a      	str	r2, [r3, #0]
   2df9c:	46c0      	nop			; (mov r8, r8)
   2df9e:	46bd      	mov	sp, r7
   2dfa0:	b002      	add	sp, #8
   2dfa2:	bd80      	pop	{r7, pc}
   2dfa4:	800000ff 	.word	0x800000ff
   2dfa8:	ffffff00 	.word	0xffffff00

0002dfac <writeCString>:
   2dfac:	b580      	push	{r7, lr}
   2dfae:	b084      	sub	sp, #16
   2dfb0:	af00      	add	r7, sp, #0
   2dfb2:	6078      	str	r0, [r7, #4]
   2dfb4:	6039      	str	r1, [r7, #0]
   2dfb6:	683b      	ldr	r3, [r7, #0]
   2dfb8:	0018      	movs	r0, r3
   2dfba:	4b0d      	ldr	r3, [pc, #52]	; (2dff0 <writeCString+0x44>)
   2dfbc:	4798      	blx	r3
   2dfbe:	0003      	movs	r3, r0
   2dfc0:	60fb      	str	r3, [r7, #12]
   2dfc2:	68fa      	ldr	r2, [r7, #12]
   2dfc4:	687b      	ldr	r3, [r7, #4]
   2dfc6:	0011      	movs	r1, r2
   2dfc8:	0018      	movs	r0, r3
   2dfca:	4b0a      	ldr	r3, [pc, #40]	; (2dff4 <writeCString+0x48>)
   2dfcc:	4798      	blx	r3
   2dfce:	687b      	ldr	r3, [r7, #4]
   2dfd0:	681b      	ldr	r3, [r3, #0]
   2dfd2:	68fa      	ldr	r2, [r7, #12]
   2dfd4:	6839      	ldr	r1, [r7, #0]
   2dfd6:	0018      	movs	r0, r3
   2dfd8:	4b07      	ldr	r3, [pc, #28]	; (2dff8 <writeCString+0x4c>)
   2dfda:	4798      	blx	r3
   2dfdc:	687b      	ldr	r3, [r7, #4]
   2dfde:	681a      	ldr	r2, [r3, #0]
   2dfe0:	68fb      	ldr	r3, [r7, #12]
   2dfe2:	18d2      	adds	r2, r2, r3
   2dfe4:	687b      	ldr	r3, [r7, #4]
   2dfe6:	601a      	str	r2, [r3, #0]
   2dfe8:	46c0      	nop			; (mov r8, r8)
   2dfea:	46bd      	mov	sp, r7
   2dfec:	b004      	add	sp, #16
   2dfee:	bd80      	pop	{r7, pc}
   2dff0:	0003255b 	.word	0x0003255b
   2dff4:	0002df55 	.word	0x0002df55
   2dff8:	0003216d 	.word	0x0003216d

0002dffc <writeMQTTString>:
   2dffc:	b580      	push	{r7, lr}
   2dffe:	b084      	sub	sp, #16
   2e000:	af00      	add	r7, sp, #0
   2e002:	60f8      	str	r0, [r7, #12]
   2e004:	0038      	movs	r0, r7
   2e006:	6001      	str	r1, [r0, #0]
   2e008:	6042      	str	r2, [r0, #4]
   2e00a:	6083      	str	r3, [r0, #8]
   2e00c:	003b      	movs	r3, r7
   2e00e:	685b      	ldr	r3, [r3, #4]
   2e010:	2b00      	cmp	r3, #0
   2e012:	dd17      	ble.n	2e044 <writeMQTTString+0x48>
   2e014:	003b      	movs	r3, r7
   2e016:	685a      	ldr	r2, [r3, #4]
   2e018:	68fb      	ldr	r3, [r7, #12]
   2e01a:	0011      	movs	r1, r2
   2e01c:	0018      	movs	r0, r3
   2e01e:	4b14      	ldr	r3, [pc, #80]	; (2e070 <writeMQTTString+0x74>)
   2e020:	4798      	blx	r3
   2e022:	68fb      	ldr	r3, [r7, #12]
   2e024:	6818      	ldr	r0, [r3, #0]
   2e026:	003b      	movs	r3, r7
   2e028:	6899      	ldr	r1, [r3, #8]
   2e02a:	003b      	movs	r3, r7
   2e02c:	685b      	ldr	r3, [r3, #4]
   2e02e:	001a      	movs	r2, r3
   2e030:	4b10      	ldr	r3, [pc, #64]	; (2e074 <writeMQTTString+0x78>)
   2e032:	4798      	blx	r3
   2e034:	68fb      	ldr	r3, [r7, #12]
   2e036:	681a      	ldr	r2, [r3, #0]
   2e038:	003b      	movs	r3, r7
   2e03a:	685b      	ldr	r3, [r3, #4]
   2e03c:	18d2      	adds	r2, r2, r3
   2e03e:	68fb      	ldr	r3, [r7, #12]
   2e040:	601a      	str	r2, [r3, #0]
   2e042:	e010      	b.n	2e066 <writeMQTTString+0x6a>
   2e044:	003b      	movs	r3, r7
   2e046:	681b      	ldr	r3, [r3, #0]
   2e048:	2b00      	cmp	r3, #0
   2e04a:	d007      	beq.n	2e05c <writeMQTTString+0x60>
   2e04c:	003b      	movs	r3, r7
   2e04e:	681a      	ldr	r2, [r3, #0]
   2e050:	68fb      	ldr	r3, [r7, #12]
   2e052:	0011      	movs	r1, r2
   2e054:	0018      	movs	r0, r3
   2e056:	4b08      	ldr	r3, [pc, #32]	; (2e078 <writeMQTTString+0x7c>)
   2e058:	4798      	blx	r3
   2e05a:	e004      	b.n	2e066 <writeMQTTString+0x6a>
   2e05c:	68fb      	ldr	r3, [r7, #12]
   2e05e:	2100      	movs	r1, #0
   2e060:	0018      	movs	r0, r3
   2e062:	4b03      	ldr	r3, [pc, #12]	; (2e070 <writeMQTTString+0x74>)
   2e064:	4798      	blx	r3
   2e066:	46c0      	nop			; (mov r8, r8)
   2e068:	46bd      	mov	sp, r7
   2e06a:	b004      	add	sp, #16
   2e06c:	bd80      	pop	{r7, pc}
   2e06e:	46c0      	nop			; (mov r8, r8)
   2e070:	0002df55 	.word	0x0002df55
   2e074:	0003216d 	.word	0x0003216d
   2e078:	0002dfad 	.word	0x0002dfad

0002e07c <readMQTTLenString>:
   2e07c:	b580      	push	{r7, lr}
   2e07e:	b086      	sub	sp, #24
   2e080:	af00      	add	r7, sp, #0
   2e082:	60f8      	str	r0, [r7, #12]
   2e084:	60b9      	str	r1, [r7, #8]
   2e086:	607a      	str	r2, [r7, #4]
   2e088:	2300      	movs	r3, #0
   2e08a:	617b      	str	r3, [r7, #20]
   2e08c:	687a      	ldr	r2, [r7, #4]
   2e08e:	68bb      	ldr	r3, [r7, #8]
   2e090:	681b      	ldr	r3, [r3, #0]
   2e092:	1ad3      	subs	r3, r2, r3
   2e094:	2b01      	cmp	r3, #1
   2e096:	dd1b      	ble.n	2e0d0 <readMQTTLenString+0x54>
   2e098:	68bb      	ldr	r3, [r7, #8]
   2e09a:	0018      	movs	r0, r3
   2e09c:	4b10      	ldr	r3, [pc, #64]	; (2e0e0 <readMQTTLenString+0x64>)
   2e09e:	4798      	blx	r3
   2e0a0:	0002      	movs	r2, r0
   2e0a2:	68fb      	ldr	r3, [r7, #12]
   2e0a4:	605a      	str	r2, [r3, #4]
   2e0a6:	68bb      	ldr	r3, [r7, #8]
   2e0a8:	681a      	ldr	r2, [r3, #0]
   2e0aa:	68fb      	ldr	r3, [r7, #12]
   2e0ac:	685b      	ldr	r3, [r3, #4]
   2e0ae:	18d2      	adds	r2, r2, r3
   2e0b0:	687b      	ldr	r3, [r7, #4]
   2e0b2:	429a      	cmp	r2, r3
   2e0b4:	d80c      	bhi.n	2e0d0 <readMQTTLenString+0x54>
   2e0b6:	68bb      	ldr	r3, [r7, #8]
   2e0b8:	681a      	ldr	r2, [r3, #0]
   2e0ba:	68fb      	ldr	r3, [r7, #12]
   2e0bc:	609a      	str	r2, [r3, #8]
   2e0be:	68bb      	ldr	r3, [r7, #8]
   2e0c0:	681a      	ldr	r2, [r3, #0]
   2e0c2:	68fb      	ldr	r3, [r7, #12]
   2e0c4:	685b      	ldr	r3, [r3, #4]
   2e0c6:	18d2      	adds	r2, r2, r3
   2e0c8:	68bb      	ldr	r3, [r7, #8]
   2e0ca:	601a      	str	r2, [r3, #0]
   2e0cc:	2301      	movs	r3, #1
   2e0ce:	617b      	str	r3, [r7, #20]
   2e0d0:	68fb      	ldr	r3, [r7, #12]
   2e0d2:	2200      	movs	r2, #0
   2e0d4:	601a      	str	r2, [r3, #0]
   2e0d6:	697b      	ldr	r3, [r7, #20]
   2e0d8:	0018      	movs	r0, r3
   2e0da:	46bd      	mov	sp, r7
   2e0dc:	b006      	add	sp, #24
   2e0de:	bd80      	pop	{r7, pc}
   2e0e0:	0002decd 	.word	0x0002decd

0002e0e4 <MQTTstrlen>:
   2e0e4:	b580      	push	{r7, lr}
   2e0e6:	b086      	sub	sp, #24
   2e0e8:	af00      	add	r7, sp, #0
   2e0ea:	1d3b      	adds	r3, r7, #4
   2e0ec:	6018      	str	r0, [r3, #0]
   2e0ee:	6059      	str	r1, [r3, #4]
   2e0f0:	609a      	str	r2, [r3, #8]
   2e0f2:	2300      	movs	r3, #0
   2e0f4:	617b      	str	r3, [r7, #20]
   2e0f6:	1d3b      	adds	r3, r7, #4
   2e0f8:	681b      	ldr	r3, [r3, #0]
   2e0fa:	2b00      	cmp	r3, #0
   2e0fc:	d007      	beq.n	2e10e <MQTTstrlen+0x2a>
   2e0fe:	1d3b      	adds	r3, r7, #4
   2e100:	681b      	ldr	r3, [r3, #0]
   2e102:	0018      	movs	r0, r3
   2e104:	4b06      	ldr	r3, [pc, #24]	; (2e120 <MQTTstrlen+0x3c>)
   2e106:	4798      	blx	r3
   2e108:	0003      	movs	r3, r0
   2e10a:	617b      	str	r3, [r7, #20]
   2e10c:	e002      	b.n	2e114 <MQTTstrlen+0x30>
   2e10e:	1d3b      	adds	r3, r7, #4
   2e110:	685b      	ldr	r3, [r3, #4]
   2e112:	617b      	str	r3, [r7, #20]
   2e114:	697b      	ldr	r3, [r7, #20]
   2e116:	0018      	movs	r0, r3
   2e118:	46bd      	mov	sp, r7
   2e11a:	b006      	add	sp, #24
   2e11c:	bd80      	pop	{r7, pc}
   2e11e:	46c0      	nop			; (mov r8, r8)
   2e120:	0003255b 	.word	0x0003255b

0002e124 <MQTTPacket_equals>:
   2e124:	b580      	push	{r7, lr}
   2e126:	b086      	sub	sp, #24
   2e128:	af00      	add	r7, sp, #0
   2e12a:	6078      	str	r0, [r7, #4]
   2e12c:	6039      	str	r1, [r7, #0]
   2e12e:	2300      	movs	r3, #0
   2e130:	617b      	str	r3, [r7, #20]
   2e132:	2300      	movs	r3, #0
   2e134:	60fb      	str	r3, [r7, #12]
   2e136:	687b      	ldr	r3, [r7, #4]
   2e138:	681b      	ldr	r3, [r3, #0]
   2e13a:	2b00      	cmp	r3, #0
   2e13c:	d00a      	beq.n	2e154 <MQTTPacket_equals+0x30>
   2e13e:	687b      	ldr	r3, [r7, #4]
   2e140:	681b      	ldr	r3, [r3, #0]
   2e142:	613b      	str	r3, [r7, #16]
   2e144:	687b      	ldr	r3, [r7, #4]
   2e146:	681b      	ldr	r3, [r3, #0]
   2e148:	0018      	movs	r0, r3
   2e14a:	4b12      	ldr	r3, [pc, #72]	; (2e194 <MQTTPacket_equals+0x70>)
   2e14c:	4798      	blx	r3
   2e14e:	0003      	movs	r3, r0
   2e150:	617b      	str	r3, [r7, #20]
   2e152:	e005      	b.n	2e160 <MQTTPacket_equals+0x3c>
   2e154:	687b      	ldr	r3, [r7, #4]
   2e156:	689b      	ldr	r3, [r3, #8]
   2e158:	613b      	str	r3, [r7, #16]
   2e15a:	687b      	ldr	r3, [r7, #4]
   2e15c:	685b      	ldr	r3, [r3, #4]
   2e15e:	617b      	str	r3, [r7, #20]
   2e160:	683b      	ldr	r3, [r7, #0]
   2e162:	0018      	movs	r0, r3
   2e164:	4b0b      	ldr	r3, [pc, #44]	; (2e194 <MQTTPacket_equals+0x70>)
   2e166:	4798      	blx	r3
   2e168:	0003      	movs	r3, r0
   2e16a:	60fb      	str	r3, [r7, #12]
   2e16c:	697a      	ldr	r2, [r7, #20]
   2e16e:	68fb      	ldr	r3, [r7, #12]
   2e170:	429a      	cmp	r2, r3
   2e172:	d109      	bne.n	2e188 <MQTTPacket_equals+0x64>
   2e174:	697a      	ldr	r2, [r7, #20]
   2e176:	6839      	ldr	r1, [r7, #0]
   2e178:	693b      	ldr	r3, [r7, #16]
   2e17a:	0018      	movs	r0, r3
   2e17c:	4b06      	ldr	r3, [pc, #24]	; (2e198 <MQTTPacket_equals+0x74>)
   2e17e:	4798      	blx	r3
   2e180:	1e03      	subs	r3, r0, #0
   2e182:	d101      	bne.n	2e188 <MQTTPacket_equals+0x64>
   2e184:	2301      	movs	r3, #1
   2e186:	e000      	b.n	2e18a <MQTTPacket_equals+0x66>
   2e188:	2300      	movs	r3, #0
   2e18a:	0018      	movs	r0, r3
   2e18c:	46bd      	mov	sp, r7
   2e18e:	b006      	add	sp, #24
   2e190:	bd80      	pop	{r7, pc}
   2e192:	46c0      	nop			; (mov r8, r8)
   2e194:	0003255b 	.word	0x0003255b
   2e198:	00032569 	.word	0x00032569

0002e19c <MQTTSerialize_publishLength>:
   2e19c:	b580      	push	{r7, lr}
   2e19e:	b086      	sub	sp, #24
   2e1a0:	af00      	add	r7, sp, #0
   2e1a2:	60f8      	str	r0, [r7, #12]
   2e1a4:	0038      	movs	r0, r7
   2e1a6:	6001      	str	r1, [r0, #0]
   2e1a8:	6042      	str	r2, [r0, #4]
   2e1aa:	6083      	str	r3, [r0, #8]
   2e1ac:	2300      	movs	r3, #0
   2e1ae:	617b      	str	r3, [r7, #20]
   2e1b0:	003b      	movs	r3, r7
   2e1b2:	6818      	ldr	r0, [r3, #0]
   2e1b4:	6859      	ldr	r1, [r3, #4]
   2e1b6:	689a      	ldr	r2, [r3, #8]
   2e1b8:	4b09      	ldr	r3, [pc, #36]	; (2e1e0 <MQTTSerialize_publishLength+0x44>)
   2e1ba:	4798      	blx	r3
   2e1bc:	0003      	movs	r3, r0
   2e1be:	1c9a      	adds	r2, r3, #2
   2e1c0:	6a3b      	ldr	r3, [r7, #32]
   2e1c2:	18d3      	adds	r3, r2, r3
   2e1c4:	697a      	ldr	r2, [r7, #20]
   2e1c6:	18d3      	adds	r3, r2, r3
   2e1c8:	617b      	str	r3, [r7, #20]
   2e1ca:	68fb      	ldr	r3, [r7, #12]
   2e1cc:	2b00      	cmp	r3, #0
   2e1ce:	dd02      	ble.n	2e1d6 <MQTTSerialize_publishLength+0x3a>
   2e1d0:	697b      	ldr	r3, [r7, #20]
   2e1d2:	3302      	adds	r3, #2
   2e1d4:	617b      	str	r3, [r7, #20]
   2e1d6:	697b      	ldr	r3, [r7, #20]
   2e1d8:	0018      	movs	r0, r3
   2e1da:	46bd      	mov	sp, r7
   2e1dc:	b006      	add	sp, #24
   2e1de:	bd80      	pop	{r7, pc}
   2e1e0:	0002e0e5 	.word	0x0002e0e5

0002e1e4 <MQTTSerialize_publish>:
   2e1e4:	b590      	push	{r4, r7, lr}
   2e1e6:	b08b      	sub	sp, #44	; 0x2c
   2e1e8:	af02      	add	r7, sp, #8
   2e1ea:	60f8      	str	r0, [r7, #12]
   2e1ec:	60b9      	str	r1, [r7, #8]
   2e1ee:	603b      	str	r3, [r7, #0]
   2e1f0:	1dfb      	adds	r3, r7, #7
   2e1f2:	701a      	strb	r2, [r3, #0]
   2e1f4:	68fb      	ldr	r3, [r7, #12]
   2e1f6:	617b      	str	r3, [r7, #20]
   2e1f8:	2300      	movs	r3, #0
   2e1fa:	613b      	str	r3, [r7, #16]
   2e1fc:	2300      	movs	r3, #0
   2e1fe:	61bb      	str	r3, [r7, #24]
   2e200:	2300      	movs	r3, #0
   2e202:	61fb      	str	r3, [r7, #28]
   2e204:	2308      	movs	r3, #8
   2e206:	2230      	movs	r2, #48	; 0x30
   2e208:	4694      	mov	ip, r2
   2e20a:	44bc      	add	ip, r7
   2e20c:	4463      	add	r3, ip
   2e20e:	6838      	ldr	r0, [r7, #0]
   2e210:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2e212:	9200      	str	r2, [sp, #0]
   2e214:	6819      	ldr	r1, [r3, #0]
   2e216:	685a      	ldr	r2, [r3, #4]
   2e218:	689b      	ldr	r3, [r3, #8]
   2e21a:	4c46      	ldr	r4, [pc, #280]	; (2e334 <MQTTSerialize_publish+0x150>)
   2e21c:	47a0      	blx	r4
   2e21e:	0003      	movs	r3, r0
   2e220:	61bb      	str	r3, [r7, #24]
   2e222:	69bb      	ldr	r3, [r7, #24]
   2e224:	0018      	movs	r0, r3
   2e226:	4b44      	ldr	r3, [pc, #272]	; (2e338 <MQTTSerialize_publish+0x154>)
   2e228:	4798      	blx	r3
   2e22a:	0002      	movs	r2, r0
   2e22c:	68bb      	ldr	r3, [r7, #8]
   2e22e:	429a      	cmp	r2, r3
   2e230:	dd03      	ble.n	2e23a <MQTTSerialize_publish+0x56>
   2e232:	2302      	movs	r3, #2
   2e234:	425b      	negs	r3, r3
   2e236:	61fb      	str	r3, [r7, #28]
   2e238:	e077      	b.n	2e32a <MQTTSerialize_publish+0x146>
   2e23a:	2310      	movs	r3, #16
   2e23c:	18fb      	adds	r3, r7, r3
   2e23e:	781a      	ldrb	r2, [r3, #0]
   2e240:	210f      	movs	r1, #15
   2e242:	400a      	ands	r2, r1
   2e244:	1c11      	adds	r1, r2, #0
   2e246:	2230      	movs	r2, #48	; 0x30
   2e248:	430a      	orrs	r2, r1
   2e24a:	701a      	strb	r2, [r3, #0]
   2e24c:	1dfb      	adds	r3, r7, #7
   2e24e:	781b      	ldrb	r3, [r3, #0]
   2e250:	2201      	movs	r2, #1
   2e252:	4013      	ands	r3, r2
   2e254:	b2da      	uxtb	r2, r3
   2e256:	2310      	movs	r3, #16
   2e258:	18fb      	adds	r3, r7, r3
   2e25a:	2101      	movs	r1, #1
   2e25c:	400a      	ands	r2, r1
   2e25e:	00d0      	lsls	r0, r2, #3
   2e260:	781a      	ldrb	r2, [r3, #0]
   2e262:	2108      	movs	r1, #8
   2e264:	438a      	bics	r2, r1
   2e266:	1c11      	adds	r1, r2, #0
   2e268:	1c02      	adds	r2, r0, #0
   2e26a:	430a      	orrs	r2, r1
   2e26c:	701a      	strb	r2, [r3, #0]
   2e26e:	683b      	ldr	r3, [r7, #0]
   2e270:	b2db      	uxtb	r3, r3
   2e272:	1c1a      	adds	r2, r3, #0
   2e274:	2303      	movs	r3, #3
   2e276:	4013      	ands	r3, r2
   2e278:	b2da      	uxtb	r2, r3
   2e27a:	2310      	movs	r3, #16
   2e27c:	18fb      	adds	r3, r7, r3
   2e27e:	2103      	movs	r1, #3
   2e280:	400a      	ands	r2, r1
   2e282:	1890      	adds	r0, r2, r2
   2e284:	781a      	ldrb	r2, [r3, #0]
   2e286:	2106      	movs	r1, #6
   2e288:	438a      	bics	r2, r1
   2e28a:	1c11      	adds	r1, r2, #0
   2e28c:	1c02      	adds	r2, r0, #0
   2e28e:	430a      	orrs	r2, r1
   2e290:	701a      	strb	r2, [r3, #0]
   2e292:	2330      	movs	r3, #48	; 0x30
   2e294:	18fb      	adds	r3, r7, r3
   2e296:	781b      	ldrb	r3, [r3, #0]
   2e298:	2201      	movs	r2, #1
   2e29a:	4013      	ands	r3, r2
   2e29c:	b2da      	uxtb	r2, r3
   2e29e:	2310      	movs	r3, #16
   2e2a0:	18fb      	adds	r3, r7, r3
   2e2a2:	2101      	movs	r1, #1
   2e2a4:	400a      	ands	r2, r1
   2e2a6:	0010      	movs	r0, r2
   2e2a8:	781a      	ldrb	r2, [r3, #0]
   2e2aa:	2101      	movs	r1, #1
   2e2ac:	438a      	bics	r2, r1
   2e2ae:	1c11      	adds	r1, r2, #0
   2e2b0:	1c02      	adds	r2, r0, #0
   2e2b2:	430a      	orrs	r2, r1
   2e2b4:	701a      	strb	r2, [r3, #0]
   2e2b6:	2310      	movs	r3, #16
   2e2b8:	18fb      	adds	r3, r7, r3
   2e2ba:	781a      	ldrb	r2, [r3, #0]
   2e2bc:	2314      	movs	r3, #20
   2e2be:	18fb      	adds	r3, r7, r3
   2e2c0:	0011      	movs	r1, r2
   2e2c2:	0018      	movs	r0, r3
   2e2c4:	4b1d      	ldr	r3, [pc, #116]	; (2e33c <MQTTSerialize_publish+0x158>)
   2e2c6:	4798      	blx	r3
   2e2c8:	697b      	ldr	r3, [r7, #20]
   2e2ca:	69ba      	ldr	r2, [r7, #24]
   2e2cc:	0011      	movs	r1, r2
   2e2ce:	0018      	movs	r0, r3
   2e2d0:	4b1b      	ldr	r3, [pc, #108]	; (2e340 <MQTTSerialize_publish+0x15c>)
   2e2d2:	4798      	blx	r3
   2e2d4:	0002      	movs	r2, r0
   2e2d6:	697b      	ldr	r3, [r7, #20]
   2e2d8:	189b      	adds	r3, r3, r2
   2e2da:	617b      	str	r3, [r7, #20]
   2e2dc:	2308      	movs	r3, #8
   2e2de:	2230      	movs	r2, #48	; 0x30
   2e2e0:	4694      	mov	ip, r2
   2e2e2:	44bc      	add	ip, r7
   2e2e4:	4463      	add	r3, ip
   2e2e6:	2214      	movs	r2, #20
   2e2e8:	18b8      	adds	r0, r7, r2
   2e2ea:	6819      	ldr	r1, [r3, #0]
   2e2ec:	685a      	ldr	r2, [r3, #4]
   2e2ee:	689b      	ldr	r3, [r3, #8]
   2e2f0:	4c14      	ldr	r4, [pc, #80]	; (2e344 <MQTTSerialize_publish+0x160>)
   2e2f2:	47a0      	blx	r4
   2e2f4:	683b      	ldr	r3, [r7, #0]
   2e2f6:	2b00      	cmp	r3, #0
   2e2f8:	dd08      	ble.n	2e30c <MQTTSerialize_publish+0x128>
   2e2fa:	2334      	movs	r3, #52	; 0x34
   2e2fc:	18fb      	adds	r3, r7, r3
   2e2fe:	881a      	ldrh	r2, [r3, #0]
   2e300:	2314      	movs	r3, #20
   2e302:	18fb      	adds	r3, r7, r3
   2e304:	0011      	movs	r1, r2
   2e306:	0018      	movs	r0, r3
   2e308:	4b0f      	ldr	r3, [pc, #60]	; (2e348 <MQTTSerialize_publish+0x164>)
   2e30a:	4798      	blx	r3
   2e30c:	697b      	ldr	r3, [r7, #20]
   2e30e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2e310:	6c79      	ldr	r1, [r7, #68]	; 0x44
   2e312:	0018      	movs	r0, r3
   2e314:	4b0d      	ldr	r3, [pc, #52]	; (2e34c <MQTTSerialize_publish+0x168>)
   2e316:	4798      	blx	r3
   2e318:	697a      	ldr	r2, [r7, #20]
   2e31a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2e31c:	18d3      	adds	r3, r2, r3
   2e31e:	617b      	str	r3, [r7, #20]
   2e320:	697b      	ldr	r3, [r7, #20]
   2e322:	001a      	movs	r2, r3
   2e324:	68fb      	ldr	r3, [r7, #12]
   2e326:	1ad3      	subs	r3, r2, r3
   2e328:	61fb      	str	r3, [r7, #28]
   2e32a:	69fb      	ldr	r3, [r7, #28]
   2e32c:	0018      	movs	r0, r3
   2e32e:	46bd      	mov	sp, r7
   2e330:	b009      	add	sp, #36	; 0x24
   2e332:	bd90      	pop	{r4, r7, pc}
   2e334:	0002e19d 	.word	0x0002e19d
   2e338:	0002de09 	.word	0x0002de09
   2e33c:	0002df2b 	.word	0x0002df2b
   2e340:	0002dd11 	.word	0x0002dd11
   2e344:	0002dffd 	.word	0x0002dffd
   2e348:	0002df55 	.word	0x0002df55
   2e34c:	0003216d 	.word	0x0003216d

0002e350 <MQTTSerialize_ack>:
   2e350:	b580      	push	{r7, lr}
   2e352:	b088      	sub	sp, #32
   2e354:	af00      	add	r7, sp, #0
   2e356:	60f8      	str	r0, [r7, #12]
   2e358:	60b9      	str	r1, [r7, #8]
   2e35a:	0019      	movs	r1, r3
   2e35c:	1dfb      	adds	r3, r7, #7
   2e35e:	701a      	strb	r2, [r3, #0]
   2e360:	1dbb      	adds	r3, r7, #6
   2e362:	1c0a      	adds	r2, r1, #0
   2e364:	701a      	strb	r2, [r3, #0]
   2e366:	2300      	movs	r3, #0
   2e368:	61bb      	str	r3, [r7, #24]
   2e36a:	2300      	movs	r3, #0
   2e36c:	61fb      	str	r3, [r7, #28]
   2e36e:	68fb      	ldr	r3, [r7, #12]
   2e370:	617b      	str	r3, [r7, #20]
   2e372:	68bb      	ldr	r3, [r7, #8]
   2e374:	2b03      	cmp	r3, #3
   2e376:	dc03      	bgt.n	2e380 <MQTTSerialize_ack+0x30>
   2e378:	2302      	movs	r3, #2
   2e37a:	425b      	negs	r3, r3
   2e37c:	61fb      	str	r3, [r7, #28]
   2e37e:	e055      	b.n	2e42c <MQTTSerialize_ack+0xdc>
   2e380:	1dfb      	adds	r3, r7, #7
   2e382:	781b      	ldrb	r3, [r3, #0]
   2e384:	220f      	movs	r2, #15
   2e386:	4013      	ands	r3, r2
   2e388:	b2da      	uxtb	r2, r3
   2e38a:	2318      	movs	r3, #24
   2e38c:	18fb      	adds	r3, r7, r3
   2e38e:	0110      	lsls	r0, r2, #4
   2e390:	781a      	ldrb	r2, [r3, #0]
   2e392:	210f      	movs	r1, #15
   2e394:	400a      	ands	r2, r1
   2e396:	1c11      	adds	r1, r2, #0
   2e398:	1c02      	adds	r2, r0, #0
   2e39a:	430a      	orrs	r2, r1
   2e39c:	701a      	strb	r2, [r3, #0]
   2e39e:	1dbb      	adds	r3, r7, #6
   2e3a0:	781b      	ldrb	r3, [r3, #0]
   2e3a2:	2201      	movs	r2, #1
   2e3a4:	4013      	ands	r3, r2
   2e3a6:	b2da      	uxtb	r2, r3
   2e3a8:	2318      	movs	r3, #24
   2e3aa:	18fb      	adds	r3, r7, r3
   2e3ac:	2101      	movs	r1, #1
   2e3ae:	400a      	ands	r2, r1
   2e3b0:	00d0      	lsls	r0, r2, #3
   2e3b2:	781a      	ldrb	r2, [r3, #0]
   2e3b4:	2108      	movs	r1, #8
   2e3b6:	438a      	bics	r2, r1
   2e3b8:	1c11      	adds	r1, r2, #0
   2e3ba:	1c02      	adds	r2, r0, #0
   2e3bc:	430a      	orrs	r2, r1
   2e3be:	701a      	strb	r2, [r3, #0]
   2e3c0:	1dfb      	adds	r3, r7, #7
   2e3c2:	781b      	ldrb	r3, [r3, #0]
   2e3c4:	3b06      	subs	r3, #6
   2e3c6:	425a      	negs	r2, r3
   2e3c8:	4153      	adcs	r3, r2
   2e3ca:	b2db      	uxtb	r3, r3
   2e3cc:	1c1a      	adds	r2, r3, #0
   2e3ce:	2303      	movs	r3, #3
   2e3d0:	4013      	ands	r3, r2
   2e3d2:	b2da      	uxtb	r2, r3
   2e3d4:	2318      	movs	r3, #24
   2e3d6:	18fb      	adds	r3, r7, r3
   2e3d8:	2103      	movs	r1, #3
   2e3da:	400a      	ands	r2, r1
   2e3dc:	1890      	adds	r0, r2, r2
   2e3de:	781a      	ldrb	r2, [r3, #0]
   2e3e0:	2106      	movs	r1, #6
   2e3e2:	438a      	bics	r2, r1
   2e3e4:	1c11      	adds	r1, r2, #0
   2e3e6:	1c02      	adds	r2, r0, #0
   2e3e8:	430a      	orrs	r2, r1
   2e3ea:	701a      	strb	r2, [r3, #0]
   2e3ec:	2318      	movs	r3, #24
   2e3ee:	18fb      	adds	r3, r7, r3
   2e3f0:	781a      	ldrb	r2, [r3, #0]
   2e3f2:	2314      	movs	r3, #20
   2e3f4:	18fb      	adds	r3, r7, r3
   2e3f6:	0011      	movs	r1, r2
   2e3f8:	0018      	movs	r0, r3
   2e3fa:	4b0f      	ldr	r3, [pc, #60]	; (2e438 <MQTTSerialize_ack+0xe8>)
   2e3fc:	4798      	blx	r3
   2e3fe:	697b      	ldr	r3, [r7, #20]
   2e400:	2102      	movs	r1, #2
   2e402:	0018      	movs	r0, r3
   2e404:	4b0d      	ldr	r3, [pc, #52]	; (2e43c <MQTTSerialize_ack+0xec>)
   2e406:	4798      	blx	r3
   2e408:	0002      	movs	r2, r0
   2e40a:	697b      	ldr	r3, [r7, #20]
   2e40c:	189b      	adds	r3, r3, r2
   2e40e:	617b      	str	r3, [r7, #20]
   2e410:	2328      	movs	r3, #40	; 0x28
   2e412:	18fb      	adds	r3, r7, r3
   2e414:	881a      	ldrh	r2, [r3, #0]
   2e416:	2314      	movs	r3, #20
   2e418:	18fb      	adds	r3, r7, r3
   2e41a:	0011      	movs	r1, r2
   2e41c:	0018      	movs	r0, r3
   2e41e:	4b08      	ldr	r3, [pc, #32]	; (2e440 <MQTTSerialize_ack+0xf0>)
   2e420:	4798      	blx	r3
   2e422:	697b      	ldr	r3, [r7, #20]
   2e424:	001a      	movs	r2, r3
   2e426:	68fb      	ldr	r3, [r7, #12]
   2e428:	1ad3      	subs	r3, r2, r3
   2e42a:	61fb      	str	r3, [r7, #28]
   2e42c:	69fb      	ldr	r3, [r7, #28]
   2e42e:	0018      	movs	r0, r3
   2e430:	46bd      	mov	sp, r7
   2e432:	b008      	add	sp, #32
   2e434:	bd80      	pop	{r7, pc}
   2e436:	46c0      	nop			; (mov r8, r8)
   2e438:	0002df2b 	.word	0x0002df2b
   2e43c:	0002dd11 	.word	0x0002dd11
   2e440:	0002df55 	.word	0x0002df55

0002e444 <MQTTSerialize_subscribeLength>:
   2e444:	b580      	push	{r7, lr}
   2e446:	b084      	sub	sp, #16
   2e448:	af00      	add	r7, sp, #0
   2e44a:	6078      	str	r0, [r7, #4]
   2e44c:	6039      	str	r1, [r7, #0]
   2e44e:	2302      	movs	r3, #2
   2e450:	60bb      	str	r3, [r7, #8]
   2e452:	2300      	movs	r3, #0
   2e454:	60fb      	str	r3, [r7, #12]
   2e456:	e014      	b.n	2e482 <MQTTSerialize_subscribeLength+0x3e>
   2e458:	68fa      	ldr	r2, [r7, #12]
   2e45a:	0013      	movs	r3, r2
   2e45c:	005b      	lsls	r3, r3, #1
   2e45e:	189b      	adds	r3, r3, r2
   2e460:	009b      	lsls	r3, r3, #2
   2e462:	001a      	movs	r2, r3
   2e464:	683b      	ldr	r3, [r7, #0]
   2e466:	189b      	adds	r3, r3, r2
   2e468:	6818      	ldr	r0, [r3, #0]
   2e46a:	6859      	ldr	r1, [r3, #4]
   2e46c:	689a      	ldr	r2, [r3, #8]
   2e46e:	4b09      	ldr	r3, [pc, #36]	; (2e494 <MQTTSerialize_subscribeLength+0x50>)
   2e470:	4798      	blx	r3
   2e472:	0003      	movs	r3, r0
   2e474:	3303      	adds	r3, #3
   2e476:	68ba      	ldr	r2, [r7, #8]
   2e478:	18d3      	adds	r3, r2, r3
   2e47a:	60bb      	str	r3, [r7, #8]
   2e47c:	68fb      	ldr	r3, [r7, #12]
   2e47e:	3301      	adds	r3, #1
   2e480:	60fb      	str	r3, [r7, #12]
   2e482:	68fa      	ldr	r2, [r7, #12]
   2e484:	687b      	ldr	r3, [r7, #4]
   2e486:	429a      	cmp	r2, r3
   2e488:	dbe6      	blt.n	2e458 <MQTTSerialize_subscribeLength+0x14>
   2e48a:	68bb      	ldr	r3, [r7, #8]
   2e48c:	0018      	movs	r0, r3
   2e48e:	46bd      	mov	sp, r7
   2e490:	b004      	add	sp, #16
   2e492:	bd80      	pop	{r7, pc}
   2e494:	0002e0e5 	.word	0x0002e0e5

0002e498 <MQTTSerialize_subscribe>:
   2e498:	b590      	push	{r4, r7, lr}
   2e49a:	b08b      	sub	sp, #44	; 0x2c
   2e49c:	af00      	add	r7, sp, #0
   2e49e:	60f8      	str	r0, [r7, #12]
   2e4a0:	60b9      	str	r1, [r7, #8]
   2e4a2:	0019      	movs	r1, r3
   2e4a4:	1dfb      	adds	r3, r7, #7
   2e4a6:	701a      	strb	r2, [r3, #0]
   2e4a8:	1d3b      	adds	r3, r7, #4
   2e4aa:	1c0a      	adds	r2, r1, #0
   2e4ac:	801a      	strh	r2, [r3, #0]
   2e4ae:	68fb      	ldr	r3, [r7, #12]
   2e4b0:	61bb      	str	r3, [r7, #24]
   2e4b2:	2300      	movs	r3, #0
   2e4b4:	617b      	str	r3, [r7, #20]
   2e4b6:	2300      	movs	r3, #0
   2e4b8:	61fb      	str	r3, [r7, #28]
   2e4ba:	2300      	movs	r3, #0
   2e4bc:	627b      	str	r3, [r7, #36]	; 0x24
   2e4be:	2300      	movs	r3, #0
   2e4c0:	623b      	str	r3, [r7, #32]
   2e4c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e4c6:	0011      	movs	r1, r2
   2e4c8:	0018      	movs	r0, r3
   2e4ca:	4b41      	ldr	r3, [pc, #260]	; (2e5d0 <MQTTSerialize_subscribe+0x138>)
   2e4cc:	4798      	blx	r3
   2e4ce:	0003      	movs	r3, r0
   2e4d0:	61fb      	str	r3, [r7, #28]
   2e4d2:	69fb      	ldr	r3, [r7, #28]
   2e4d4:	0018      	movs	r0, r3
   2e4d6:	4b3f      	ldr	r3, [pc, #252]	; (2e5d4 <MQTTSerialize_subscribe+0x13c>)
   2e4d8:	4798      	blx	r3
   2e4da:	0002      	movs	r2, r0
   2e4dc:	68bb      	ldr	r3, [r7, #8]
   2e4de:	429a      	cmp	r2, r3
   2e4e0:	dd03      	ble.n	2e4ea <MQTTSerialize_subscribe+0x52>
   2e4e2:	2302      	movs	r3, #2
   2e4e4:	425b      	negs	r3, r3
   2e4e6:	627b      	str	r3, [r7, #36]	; 0x24
   2e4e8:	e06c      	b.n	2e5c4 <MQTTSerialize_subscribe+0x12c>
   2e4ea:	2314      	movs	r3, #20
   2e4ec:	18fb      	adds	r3, r7, r3
   2e4ee:	2200      	movs	r2, #0
   2e4f0:	701a      	strb	r2, [r3, #0]
   2e4f2:	2314      	movs	r3, #20
   2e4f4:	18fb      	adds	r3, r7, r3
   2e4f6:	781a      	ldrb	r2, [r3, #0]
   2e4f8:	210f      	movs	r1, #15
   2e4fa:	400a      	ands	r2, r1
   2e4fc:	1c11      	adds	r1, r2, #0
   2e4fe:	2280      	movs	r2, #128	; 0x80
   2e500:	4252      	negs	r2, r2
   2e502:	430a      	orrs	r2, r1
   2e504:	701a      	strb	r2, [r3, #0]
   2e506:	1dfb      	adds	r3, r7, #7
   2e508:	781b      	ldrb	r3, [r3, #0]
   2e50a:	2201      	movs	r2, #1
   2e50c:	4013      	ands	r3, r2
   2e50e:	b2da      	uxtb	r2, r3
   2e510:	2314      	movs	r3, #20
   2e512:	18fb      	adds	r3, r7, r3
   2e514:	2101      	movs	r1, #1
   2e516:	400a      	ands	r2, r1
   2e518:	00d0      	lsls	r0, r2, #3
   2e51a:	781a      	ldrb	r2, [r3, #0]
   2e51c:	2108      	movs	r1, #8
   2e51e:	438a      	bics	r2, r1
   2e520:	1c11      	adds	r1, r2, #0
   2e522:	1c02      	adds	r2, r0, #0
   2e524:	430a      	orrs	r2, r1
   2e526:	701a      	strb	r2, [r3, #0]
   2e528:	2314      	movs	r3, #20
   2e52a:	18fb      	adds	r3, r7, r3
   2e52c:	781a      	ldrb	r2, [r3, #0]
   2e52e:	2106      	movs	r1, #6
   2e530:	438a      	bics	r2, r1
   2e532:	1c11      	adds	r1, r2, #0
   2e534:	2202      	movs	r2, #2
   2e536:	430a      	orrs	r2, r1
   2e538:	701a      	strb	r2, [r3, #0]
   2e53a:	2314      	movs	r3, #20
   2e53c:	18fb      	adds	r3, r7, r3
   2e53e:	781a      	ldrb	r2, [r3, #0]
   2e540:	2318      	movs	r3, #24
   2e542:	18fb      	adds	r3, r7, r3
   2e544:	0011      	movs	r1, r2
   2e546:	0018      	movs	r0, r3
   2e548:	4b23      	ldr	r3, [pc, #140]	; (2e5d8 <MQTTSerialize_subscribe+0x140>)
   2e54a:	4798      	blx	r3
   2e54c:	69bb      	ldr	r3, [r7, #24]
   2e54e:	69fa      	ldr	r2, [r7, #28]
   2e550:	0011      	movs	r1, r2
   2e552:	0018      	movs	r0, r3
   2e554:	4b21      	ldr	r3, [pc, #132]	; (2e5dc <MQTTSerialize_subscribe+0x144>)
   2e556:	4798      	blx	r3
   2e558:	0002      	movs	r2, r0
   2e55a:	69bb      	ldr	r3, [r7, #24]
   2e55c:	189b      	adds	r3, r3, r2
   2e55e:	61bb      	str	r3, [r7, #24]
   2e560:	1d3b      	adds	r3, r7, #4
   2e562:	881a      	ldrh	r2, [r3, #0]
   2e564:	2318      	movs	r3, #24
   2e566:	18fb      	adds	r3, r7, r3
   2e568:	0011      	movs	r1, r2
   2e56a:	0018      	movs	r0, r3
   2e56c:	4b1c      	ldr	r3, [pc, #112]	; (2e5e0 <MQTTSerialize_subscribe+0x148>)
   2e56e:	4798      	blx	r3
   2e570:	2300      	movs	r3, #0
   2e572:	623b      	str	r3, [r7, #32]
   2e574:	e01d      	b.n	2e5b2 <MQTTSerialize_subscribe+0x11a>
   2e576:	6a3a      	ldr	r2, [r7, #32]
   2e578:	0013      	movs	r3, r2
   2e57a:	005b      	lsls	r3, r3, #1
   2e57c:	189b      	adds	r3, r3, r2
   2e57e:	009b      	lsls	r3, r3, #2
   2e580:	001a      	movs	r2, r3
   2e582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e584:	189b      	adds	r3, r3, r2
   2e586:	2218      	movs	r2, #24
   2e588:	18b8      	adds	r0, r7, r2
   2e58a:	6819      	ldr	r1, [r3, #0]
   2e58c:	685a      	ldr	r2, [r3, #4]
   2e58e:	689b      	ldr	r3, [r3, #8]
   2e590:	4c14      	ldr	r4, [pc, #80]	; (2e5e4 <MQTTSerialize_subscribe+0x14c>)
   2e592:	47a0      	blx	r4
   2e594:	6a3b      	ldr	r3, [r7, #32]
   2e596:	009b      	lsls	r3, r3, #2
   2e598:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2e59a:	18d3      	adds	r3, r2, r3
   2e59c:	681b      	ldr	r3, [r3, #0]
   2e59e:	b2da      	uxtb	r2, r3
   2e5a0:	2318      	movs	r3, #24
   2e5a2:	18fb      	adds	r3, r7, r3
   2e5a4:	0011      	movs	r1, r2
   2e5a6:	0018      	movs	r0, r3
   2e5a8:	4b0b      	ldr	r3, [pc, #44]	; (2e5d8 <MQTTSerialize_subscribe+0x140>)
   2e5aa:	4798      	blx	r3
   2e5ac:	6a3b      	ldr	r3, [r7, #32]
   2e5ae:	3301      	adds	r3, #1
   2e5b0:	623b      	str	r3, [r7, #32]
   2e5b2:	6a3a      	ldr	r2, [r7, #32]
   2e5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e5b6:	429a      	cmp	r2, r3
   2e5b8:	dbdd      	blt.n	2e576 <MQTTSerialize_subscribe+0xde>
   2e5ba:	69bb      	ldr	r3, [r7, #24]
   2e5bc:	001a      	movs	r2, r3
   2e5be:	68fb      	ldr	r3, [r7, #12]
   2e5c0:	1ad3      	subs	r3, r2, r3
   2e5c2:	627b      	str	r3, [r7, #36]	; 0x24
   2e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e5c6:	0018      	movs	r0, r3
   2e5c8:	46bd      	mov	sp, r7
   2e5ca:	b00b      	add	sp, #44	; 0x2c
   2e5cc:	bd90      	pop	{r4, r7, pc}
   2e5ce:	46c0      	nop			; (mov r8, r8)
   2e5d0:	0002e445 	.word	0x0002e445
   2e5d4:	0002de09 	.word	0x0002de09
   2e5d8:	0002df2b 	.word	0x0002df2b
   2e5dc:	0002dd11 	.word	0x0002dd11
   2e5e0:	0002df55 	.word	0x0002df55
   2e5e4:	0002dffd 	.word	0x0002dffd

0002e5e8 <MQTTDeserialize_suback>:
   2e5e8:	b590      	push	{r4, r7, lr}
   2e5ea:	b08b      	sub	sp, #44	; 0x2c
   2e5ec:	af00      	add	r7, sp, #0
   2e5ee:	60f8      	str	r0, [r7, #12]
   2e5f0:	60b9      	str	r1, [r7, #8]
   2e5f2:	607a      	str	r2, [r7, #4]
   2e5f4:	603b      	str	r3, [r7, #0]
   2e5f6:	2300      	movs	r3, #0
   2e5f8:	61fb      	str	r3, [r7, #28]
   2e5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e5fc:	61bb      	str	r3, [r7, #24]
   2e5fe:	2300      	movs	r3, #0
   2e600:	623b      	str	r3, [r7, #32]
   2e602:	2300      	movs	r3, #0
   2e604:	627b      	str	r3, [r7, #36]	; 0x24
   2e606:	2318      	movs	r3, #24
   2e608:	18fb      	adds	r3, r7, r3
   2e60a:	0018      	movs	r0, r3
   2e60c:	4b2c      	ldr	r3, [pc, #176]	; (2e6c0 <MQTTDeserialize_suback+0xd8>)
   2e60e:	4798      	blx	r3
   2e610:	0003      	movs	r3, r0
   2e612:	001a      	movs	r2, r3
   2e614:	231c      	movs	r3, #28
   2e616:	18fb      	adds	r3, r7, r3
   2e618:	701a      	strb	r2, [r3, #0]
   2e61a:	231c      	movs	r3, #28
   2e61c:	18fb      	adds	r3, r7, r3
   2e61e:	781b      	ldrb	r3, [r3, #0]
   2e620:	220f      	movs	r2, #15
   2e622:	4393      	bics	r3, r2
   2e624:	b2db      	uxtb	r3, r3
   2e626:	2b90      	cmp	r3, #144	; 0x90
   2e628:	d142      	bne.n	2e6b0 <MQTTDeserialize_suback+0xc8>
   2e62a:	69bb      	ldr	r3, [r7, #24]
   2e62c:	2214      	movs	r2, #20
   2e62e:	18ba      	adds	r2, r7, r2
   2e630:	0011      	movs	r1, r2
   2e632:	0018      	movs	r0, r3
   2e634:	4b23      	ldr	r3, [pc, #140]	; (2e6c4 <MQTTDeserialize_suback+0xdc>)
   2e636:	4798      	blx	r3
   2e638:	0003      	movs	r3, r0
   2e63a:	627b      	str	r3, [r7, #36]	; 0x24
   2e63c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e63e:	69bb      	ldr	r3, [r7, #24]
   2e640:	189b      	adds	r3, r3, r2
   2e642:	61bb      	str	r3, [r7, #24]
   2e644:	69bb      	ldr	r3, [r7, #24]
   2e646:	697a      	ldr	r2, [r7, #20]
   2e648:	189b      	adds	r3, r3, r2
   2e64a:	623b      	str	r3, [r7, #32]
   2e64c:	6a3b      	ldr	r3, [r7, #32]
   2e64e:	69ba      	ldr	r2, [r7, #24]
   2e650:	1a9b      	subs	r3, r3, r2
   2e652:	2b01      	cmp	r3, #1
   2e654:	dd2e      	ble.n	2e6b4 <MQTTDeserialize_suback+0xcc>
   2e656:	2318      	movs	r3, #24
   2e658:	18fb      	adds	r3, r7, r3
   2e65a:	0018      	movs	r0, r3
   2e65c:	4b1a      	ldr	r3, [pc, #104]	; (2e6c8 <MQTTDeserialize_suback+0xe0>)
   2e65e:	4798      	blx	r3
   2e660:	0003      	movs	r3, r0
   2e662:	b29a      	uxth	r2, r3
   2e664:	68fb      	ldr	r3, [r7, #12]
   2e666:	801a      	strh	r2, [r3, #0]
   2e668:	687b      	ldr	r3, [r7, #4]
   2e66a:	2200      	movs	r2, #0
   2e66c:	601a      	str	r2, [r3, #0]
   2e66e:	e018      	b.n	2e6a2 <MQTTDeserialize_suback+0xba>
   2e670:	687b      	ldr	r3, [r7, #4]
   2e672:	681a      	ldr	r2, [r3, #0]
   2e674:	68bb      	ldr	r3, [r7, #8]
   2e676:	429a      	cmp	r2, r3
   2e678:	dd03      	ble.n	2e682 <MQTTDeserialize_suback+0x9a>
   2e67a:	2301      	movs	r3, #1
   2e67c:	425b      	negs	r3, r3
   2e67e:	627b      	str	r3, [r7, #36]	; 0x24
   2e680:	e019      	b.n	2e6b6 <MQTTDeserialize_suback+0xce>
   2e682:	687b      	ldr	r3, [r7, #4]
   2e684:	681a      	ldr	r2, [r3, #0]
   2e686:	1c51      	adds	r1, r2, #1
   2e688:	687b      	ldr	r3, [r7, #4]
   2e68a:	6019      	str	r1, [r3, #0]
   2e68c:	0013      	movs	r3, r2
   2e68e:	009b      	lsls	r3, r3, #2
   2e690:	683a      	ldr	r2, [r7, #0]
   2e692:	18d4      	adds	r4, r2, r3
   2e694:	2318      	movs	r3, #24
   2e696:	18fb      	adds	r3, r7, r3
   2e698:	0018      	movs	r0, r3
   2e69a:	4b09      	ldr	r3, [pc, #36]	; (2e6c0 <MQTTDeserialize_suback+0xd8>)
   2e69c:	4798      	blx	r3
   2e69e:	0003      	movs	r3, r0
   2e6a0:	6023      	str	r3, [r4, #0]
   2e6a2:	69ba      	ldr	r2, [r7, #24]
   2e6a4:	6a3b      	ldr	r3, [r7, #32]
   2e6a6:	429a      	cmp	r2, r3
   2e6a8:	d3e2      	bcc.n	2e670 <MQTTDeserialize_suback+0x88>
   2e6aa:	2301      	movs	r3, #1
   2e6ac:	627b      	str	r3, [r7, #36]	; 0x24
   2e6ae:	e002      	b.n	2e6b6 <MQTTDeserialize_suback+0xce>
   2e6b0:	46c0      	nop			; (mov r8, r8)
   2e6b2:	e000      	b.n	2e6b6 <MQTTDeserialize_suback+0xce>
   2e6b4:	46c0      	nop			; (mov r8, r8)
   2e6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e6b8:	0018      	movs	r0, r3
   2e6ba:	46bd      	mov	sp, r7
   2e6bc:	b00b      	add	sp, #44	; 0x2c
   2e6be:	bd90      	pop	{r4, r7, pc}
   2e6c0:	0002deff 	.word	0x0002deff
   2e6c4:	0002de99 	.word	0x0002de99
   2e6c8:	0002decd 	.word	0x0002decd

0002e6cc <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   2e6cc:	b580      	push	{r7, lr}
   2e6ce:	b082      	sub	sp, #8
   2e6d0:	af00      	add	r7, sp, #0
   2e6d2:	6078      	str	r0, [r7, #4]
	config->port = 80;
   2e6d4:	687b      	ldr	r3, [r7, #4]
   2e6d6:	2250      	movs	r2, #80	; 0x50
   2e6d8:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2e6da:	687b      	ldr	r3, [r7, #4]
   2e6dc:	2200      	movs	r2, #0
   2e6de:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   2e6e0:	687b      	ldr	r3, [r7, #4]
   2e6e2:	4a0b      	ldr	r2, [pc, #44]	; (2e710 <http_client_get_config_defaults+0x44>)
   2e6e4:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   2e6e6:	687b      	ldr	r3, [r7, #4]
   2e6e8:	2200      	movs	r2, #0
   2e6ea:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   2e6ec:	687b      	ldr	r3, [r7, #4]
   2e6ee:	2200      	movs	r2, #0
   2e6f0:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   2e6f2:	687b      	ldr	r3, [r7, #4]
   2e6f4:	2280      	movs	r2, #128	; 0x80
   2e6f6:	0052      	lsls	r2, r2, #1
   2e6f8:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   2e6fa:	687b      	ldr	r3, [r7, #4]
   2e6fc:	2252      	movs	r2, #82	; 0x52
   2e6fe:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   2e700:	687b      	ldr	r3, [r7, #4]
   2e702:	4a04      	ldr	r2, [pc, #16]	; (2e714 <http_client_get_config_defaults+0x48>)
   2e704:	619a      	str	r2, [r3, #24]
}
   2e706:	46c0      	nop			; (mov r8, r8)
   2e708:	46bd      	mov	sp, r7
   2e70a:	b002      	add	sp, #8
   2e70c:	bd80      	pop	{r7, pc}
   2e70e:	46c0      	nop			; (mov r8, r8)
   2e710:	00004e20 	.word	0x00004e20
   2e714:	000370b4 	.word	0x000370b4

0002e718 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   2e718:	b590      	push	{r4, r7, lr}
   2e71a:	b083      	sub	sp, #12
   2e71c:	af00      	add	r7, sp, #0
   2e71e:	6078      	str	r0, [r7, #4]
   2e720:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   2e722:	687b      	ldr	r3, [r7, #4]
   2e724:	2b00      	cmp	r3, #0
   2e726:	d002      	beq.n	2e72e <http_client_init+0x16>
   2e728:	683b      	ldr	r3, [r7, #0]
   2e72a:	2b00      	cmp	r3, #0
   2e72c:	d102      	bne.n	2e734 <http_client_init+0x1c>
		return -EINVAL;
   2e72e:	2316      	movs	r3, #22
   2e730:	425b      	negs	r3, r3
   2e732:	e058      	b.n	2e7e6 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   2e734:	683b      	ldr	r3, [r7, #0]
   2e736:	691b      	ldr	r3, [r3, #16]
   2e738:	2b00      	cmp	r3, #0
   2e73a:	d102      	bne.n	2e742 <http_client_init+0x2a>
		return -EINVAL;
   2e73c:	2316      	movs	r3, #22
   2e73e:	425b      	negs	r3, r3
   2e740:	e051      	b.n	2e7e6 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   2e742:	683b      	ldr	r3, [r7, #0]
   2e744:	685b      	ldr	r3, [r3, #4]
   2e746:	2b00      	cmp	r3, #0
   2e748:	d102      	bne.n	2e750 <http_client_init+0x38>
		return -EINVAL;
   2e74a:	2316      	movs	r3, #22
   2e74c:	425b      	negs	r3, r3
   2e74e:	e04a      	b.n	2e7e6 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   2e750:	683b      	ldr	r3, [r7, #0]
   2e752:	695b      	ldr	r3, [r3, #20]
   2e754:	2b51      	cmp	r3, #81	; 0x51
   2e756:	d802      	bhi.n	2e75e <http_client_init+0x46>
		return -EINVAL;
   2e758:	2316      	movs	r3, #22
   2e75a:	425b      	negs	r3, r3
   2e75c:	e043      	b.n	2e7e6 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   2e75e:	687b      	ldr	r3, [r7, #4]
   2e760:	22e8      	movs	r2, #232	; 0xe8
   2e762:	2100      	movs	r1, #0
   2e764:	0018      	movs	r0, r3
   2e766:	4b22      	ldr	r3, [pc, #136]	; (2e7f0 <http_client_init+0xd8>)
   2e768:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   2e76a:	687b      	ldr	r3, [r7, #4]
   2e76c:	3350      	adds	r3, #80	; 0x50
   2e76e:	6839      	ldr	r1, [r7, #0]
   2e770:	221c      	movs	r2, #28
   2e772:	0018      	movs	r0, r3
   2e774:	4b1f      	ldr	r3, [pc, #124]	; (2e7f4 <http_client_init+0xdc>)
   2e776:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   2e778:	687b      	ldr	r3, [r7, #4]
   2e77a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2e77c:	2b00      	cmp	r3, #0
   2e77e:	d115      	bne.n	2e7ac <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   2e780:	683b      	ldr	r3, [r7, #0]
   2e782:	691b      	ldr	r3, [r3, #16]
   2e784:	0018      	movs	r0, r3
   2e786:	4b1c      	ldr	r3, [pc, #112]	; (2e7f8 <http_client_init+0xe0>)
   2e788:	4798      	blx	r3
   2e78a:	0003      	movs	r3, r0
   2e78c:	001a      	movs	r2, r3
   2e78e:	687b      	ldr	r3, [r7, #4]
   2e790:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   2e792:	687b      	ldr	r3, [r7, #4]
   2e794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2e796:	2b00      	cmp	r3, #0
   2e798:	d102      	bne.n	2e7a0 <http_client_init+0x88>
			return -ENOMEM;
   2e79a:	230c      	movs	r3, #12
   2e79c:	425b      	negs	r3, r3
   2e79e:	e022      	b.n	2e7e6 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   2e7a0:	687b      	ldr	r3, [r7, #4]
   2e7a2:	2241      	movs	r2, #65	; 0x41
   2e7a4:	5c99      	ldrb	r1, [r3, r2]
   2e7a6:	2004      	movs	r0, #4
   2e7a8:	4301      	orrs	r1, r0
   2e7aa:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   2e7ac:	683b      	ldr	r3, [r7, #0]
   2e7ae:	891b      	ldrh	r3, [r3, #8]
   2e7b0:	2b00      	cmp	r3, #0
   2e7b2:	d010      	beq.n	2e7d6 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   2e7b4:	683b      	ldr	r3, [r7, #0]
   2e7b6:	6858      	ldr	r0, [r3, #4]
   2e7b8:	687a      	ldr	r2, [r7, #4]
   2e7ba:	4910      	ldr	r1, [pc, #64]	; (2e7fc <http_client_init+0xe4>)
   2e7bc:	2300      	movs	r3, #0
   2e7be:	4c10      	ldr	r4, [pc, #64]	; (2e800 <http_client_init+0xe8>)
   2e7c0:	47a0      	blx	r4
   2e7c2:	0002      	movs	r2, r0
   2e7c4:	687b      	ldr	r3, [r7, #4]
   2e7c6:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   2e7c8:	687b      	ldr	r3, [r7, #4]
   2e7ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2e7cc:	2b00      	cmp	r3, #0
   2e7ce:	da02      	bge.n	2e7d6 <http_client_init+0xbe>
			return -ENOSPC;
   2e7d0:	231c      	movs	r3, #28
   2e7d2:	425b      	negs	r3, r3
   2e7d4:	e007      	b.n	2e7e6 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   2e7d6:	687b      	ldr	r3, [r7, #4]
   2e7d8:	2200      	movs	r2, #0
   2e7da:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   2e7dc:	687b      	ldr	r3, [r7, #4]
   2e7de:	22d8      	movs	r2, #216	; 0xd8
   2e7e0:	2100      	movs	r1, #0
   2e7e2:	5099      	str	r1, [r3, r2]

	return 0;
   2e7e4:	2300      	movs	r3, #0
}
   2e7e6:	0018      	movs	r0, r3
   2e7e8:	46bd      	mov	sp, r7
   2e7ea:	b003      	add	sp, #12
   2e7ec:	bd90      	pop	{r4, r7, pc}
   2e7ee:	46c0      	nop			; (mov r8, r8)
   2e7f0:	000321a3 	.word	0x000321a3
   2e7f4:	0003216d 	.word	0x0003216d
   2e7f8:	00032145 	.word	0x00032145
   2e7fc:	0002eac9 	.word	0x0002eac9
   2e800:	0003016d 	.word	0x0003016d

0002e804 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   2e804:	b580      	push	{r7, lr}
   2e806:	b082      	sub	sp, #8
   2e808:	af00      	add	r7, sp, #0
   2e80a:	6078      	str	r0, [r7, #4]
   2e80c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   2e80e:	687b      	ldr	r3, [r7, #4]
   2e810:	2b00      	cmp	r3, #0
   2e812:	d102      	bne.n	2e81a <http_client_register_callback+0x16>
		return -EINVAL;
   2e814:	2316      	movs	r3, #22
   2e816:	425b      	negs	r3, r3
   2e818:	e003      	b.n	2e822 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   2e81a:	687b      	ldr	r3, [r7, #4]
   2e81c:	683a      	ldr	r2, [r7, #0]
   2e81e:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   2e820:	2300      	movs	r3, #0
}
   2e822:	0018      	movs	r0, r3
   2e824:	46bd      	mov	sp, r7
   2e826:	b002      	add	sp, #8
   2e828:	bd80      	pop	{r7, pc}
	...

0002e82c <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   2e82c:	b580      	push	{r7, lr}
   2e82e:	b082      	sub	sp, #8
   2e830:	af00      	add	r7, sp, #0
   2e832:	6078      	str	r0, [r7, #4]
	switch (err) {
   2e834:	687b      	ldr	r3, [r7, #4]
   2e836:	330e      	adds	r3, #14
   2e838:	2b0e      	cmp	r3, #14
   2e83a:	d825      	bhi.n	2e888 <_hwerr_to_stderr+0x5c>
   2e83c:	009a      	lsls	r2, r3, #2
   2e83e:	4b18      	ldr	r3, [pc, #96]	; (2e8a0 <_hwerr_to_stderr+0x74>)
   2e840:	18d3      	adds	r3, r2, r3
   2e842:	681b      	ldr	r3, [r3, #0]
   2e844:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   2e846:	2305      	movs	r3, #5
   2e848:	425b      	negs	r3, r3
   2e84a:	e024      	b.n	2e896 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   2e84c:	2302      	movs	r3, #2
   2e84e:	425b      	negs	r3, r3
   2e850:	e021      	b.n	2e896 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   2e852:	2370      	movs	r3, #112	; 0x70
   2e854:	425b      	negs	r3, r3
   2e856:	e01e      	b.n	2e896 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   2e858:	230c      	movs	r3, #12
   2e85a:	425b      	negs	r3, r3
   2e85c:	e01b      	b.n	2e896 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   2e85e:	2316      	movs	r3, #22
   2e860:	425b      	negs	r3, r3
   2e862:	e018      	b.n	2e896 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   2e864:	230c      	movs	r3, #12
   2e866:	425b      	negs	r3, r3
   2e868:	e015      	b.n	2e896 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   2e86a:	2305      	movs	r3, #5
   2e86c:	425b      	negs	r3, r3
   2e86e:	e012      	b.n	2e896 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   2e870:	2379      	movs	r3, #121	; 0x79
   2e872:	425b      	negs	r3, r3
   2e874:	e00f      	b.n	2e896 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   2e876:	2368      	movs	r3, #104	; 0x68
   2e878:	425b      	negs	r3, r3
   2e87a:	e00c      	b.n	2e896 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   2e87c:	230b      	movs	r3, #11
   2e87e:	425b      	negs	r3, r3
   2e880:	e009      	b.n	2e896 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   2e882:	2310      	movs	r3, #16
   2e884:	425b      	negs	r3, r3
   2e886:	e006      	b.n	2e896 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   2e888:	687b      	ldr	r3, [r7, #4]
   2e88a:	2b00      	cmp	r3, #0
   2e88c:	da02      	bge.n	2e894 <_hwerr_to_stderr+0x68>
				return -EIO;
   2e88e:	2305      	movs	r3, #5
   2e890:	425b      	negs	r3, r3
   2e892:	e000      	b.n	2e896 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   2e894:	2300      	movs	r3, #0
	}
}
   2e896:	0018      	movs	r0, r3
   2e898:	46bd      	mov	sp, r7
   2e89a:	b002      	add	sp, #8
   2e89c:	bd80      	pop	{r7, pc}
   2e89e:	46c0      	nop			; (mov r8, r8)
   2e8a0:	000371f0 	.word	0x000371f0

0002e8a4 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2e8a4:	b580      	push	{r7, lr}
   2e8a6:	b08a      	sub	sp, #40	; 0x28
   2e8a8:	af00      	add	r7, sp, #0
   2e8aa:	603a      	str	r2, [r7, #0]
   2e8ac:	1dfb      	adds	r3, r7, #7
   2e8ae:	1c02      	adds	r2, r0, #0
   2e8b0:	701a      	strb	r2, [r3, #0]
   2e8b2:	1dbb      	adds	r3, r7, #6
   2e8b4:	1c0a      	adds	r2, r1, #0
   2e8b6:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   2e8b8:	1dfb      	adds	r3, r7, #7
   2e8ba:	2200      	movs	r2, #0
   2e8bc:	569a      	ldrsb	r2, [r3, r2]
   2e8be:	4b4b      	ldr	r3, [pc, #300]	; (2e9ec <http_client_socket_event_handler+0x148>)
   2e8c0:	0092      	lsls	r2, r2, #2
   2e8c2:	58d3      	ldr	r3, [r2, r3]
   2e8c4:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   2e8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e8c8:	2b00      	cmp	r3, #0
   2e8ca:	d100      	bne.n	2e8ce <http_client_socket_event_handler+0x2a>
   2e8cc:	e08a      	b.n	2e9e4 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   2e8ce:	1dbb      	adds	r3, r7, #6
   2e8d0:	781b      	ldrb	r3, [r3, #0]
   2e8d2:	2b06      	cmp	r3, #6
   2e8d4:	d040      	beq.n	2e958 <http_client_socket_event_handler+0xb4>
   2e8d6:	2b07      	cmp	r3, #7
   2e8d8:	d060      	beq.n	2e99c <http_client_socket_event_handler+0xf8>
   2e8da:	2b05      	cmp	r3, #5
   2e8dc:	d000      	beq.n	2e8e0 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   2e8de:	e082      	b.n	2e9e6 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   2e8e0:	683b      	ldr	r3, [r7, #0]
   2e8e2:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   2e8e4:	6a3b      	ldr	r3, [r7, #32]
   2e8e6:	785b      	ldrb	r3, [r3, #1]
   2e8e8:	b25b      	sxtb	r3, r3
   2e8ea:	001a      	movs	r2, r3
   2e8ec:	230c      	movs	r3, #12
   2e8ee:	18fb      	adds	r3, r7, r3
   2e8f0:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   2e8f2:	6a3b      	ldr	r3, [r7, #32]
   2e8f4:	785b      	ldrb	r3, [r3, #1]
   2e8f6:	b25b      	sxtb	r3, r3
   2e8f8:	2b00      	cmp	r3, #0
   2e8fa:	da0c      	bge.n	2e916 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   2e8fc:	6a3b      	ldr	r3, [r7, #32]
   2e8fe:	785b      	ldrb	r3, [r3, #1]
   2e900:	b25b      	sxtb	r3, r3
   2e902:	0018      	movs	r0, r3
   2e904:	4b3a      	ldr	r3, [pc, #232]	; (2e9f0 <http_client_socket_event_handler+0x14c>)
   2e906:	4798      	blx	r3
   2e908:	0002      	movs	r2, r0
   2e90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e90c:	0011      	movs	r1, r2
   2e90e:	0018      	movs	r0, r3
   2e910:	4b38      	ldr	r3, [pc, #224]	; (2e9f4 <http_client_socket_event_handler+0x150>)
   2e912:	4798      	blx	r3
    	break;
   2e914:	e067      	b.n	2e9e6 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   2e916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e91a:	2b00      	cmp	r3, #0
   2e91c:	d006      	beq.n	2e92c <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   2e91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e922:	220c      	movs	r2, #12
   2e924:	18ba      	adds	r2, r7, r2
   2e926:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2e928:	2100      	movs	r1, #0
   2e92a:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   2e92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e92e:	2203      	movs	r2, #3
   2e930:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   2e932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e934:	6d58      	ldr	r0, [r3, #84]	; 0x54
   2e936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e938:	6c99      	ldr	r1, [r3, #72]	; 0x48
   2e93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e93c:	2258      	movs	r2, #88	; 0x58
   2e93e:	5a9b      	ldrh	r3, [r3, r2]
   2e940:	001a      	movs	r2, r3
   2e942:	4b2d      	ldr	r3, [pc, #180]	; (2e9f8 <http_client_socket_event_handler+0x154>)
   2e944:	4798      	blx	r3
    		_http_client_recv_packet(module);
   2e946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e948:	0018      	movs	r0, r3
   2e94a:	4b2c      	ldr	r3, [pc, #176]	; (2e9fc <http_client_socket_event_handler+0x158>)
   2e94c:	4798      	blx	r3
			_http_client_request(module);
   2e94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e950:	0018      	movs	r0, r3
   2e952:	4b2b      	ldr	r3, [pc, #172]	; (2ea00 <http_client_socket_event_handler+0x15c>)
   2e954:	4798      	blx	r3
    	break;
   2e956:	e046      	b.n	2e9e6 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   2e958:	683b      	ldr	r3, [r7, #0]
   2e95a:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   2e95c:	69fb      	ldr	r3, [r7, #28]
   2e95e:	2204      	movs	r2, #4
   2e960:	5e9b      	ldrsh	r3, [r3, r2]
   2e962:	2b00      	cmp	r3, #0
   2e964:	dd09      	ble.n	2e97a <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   2e966:	69fb      	ldr	r3, [r7, #28]
   2e968:	2204      	movs	r2, #4
   2e96a:	5e9b      	ldrsh	r3, [r3, r2]
   2e96c:	001a      	movs	r2, r3
   2e96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e970:	0011      	movs	r1, r2
   2e972:	0018      	movs	r0, r3
   2e974:	4b23      	ldr	r3, [pc, #140]	; (2ea04 <http_client_socket_event_handler+0x160>)
   2e976:	4798      	blx	r3
   2e978:	e00b      	b.n	2e992 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   2e97a:	69fb      	ldr	r3, [r7, #28]
   2e97c:	2204      	movs	r2, #4
   2e97e:	5e9b      	ldrsh	r3, [r3, r2]
   2e980:	0018      	movs	r0, r3
   2e982:	4b1b      	ldr	r3, [pc, #108]	; (2e9f0 <http_client_socket_event_handler+0x14c>)
   2e984:	4798      	blx	r3
   2e986:	0002      	movs	r2, r0
   2e988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e98a:	0011      	movs	r1, r2
   2e98c:	0018      	movs	r0, r3
   2e98e:	4b19      	ldr	r3, [pc, #100]	; (2e9f4 <http_client_socket_event_handler+0x150>)
   2e990:	4798      	blx	r3
		_http_client_recv_packet(module);
   2e992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e994:	0018      	movs	r0, r3
   2e996:	4b19      	ldr	r3, [pc, #100]	; (2e9fc <http_client_socket_event_handler+0x158>)
   2e998:	4798      	blx	r3
		break;
   2e99a:	e024      	b.n	2e9e6 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   2e99c:	231a      	movs	r3, #26
   2e99e:	18fb      	adds	r3, r7, r3
   2e9a0:	683a      	ldr	r2, [r7, #0]
   2e9a2:	8812      	ldrh	r2, [r2, #0]
   2e9a4:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   2e9a6:	231a      	movs	r3, #26
   2e9a8:	18fb      	adds	r3, r7, r3
   2e9aa:	2200      	movs	r2, #0
   2e9ac:	5e9b      	ldrsh	r3, [r3, r2]
   2e9ae:	2b00      	cmp	r3, #0
   2e9b0:	da0d      	bge.n	2e9ce <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   2e9b2:	231a      	movs	r3, #26
   2e9b4:	18fb      	adds	r3, r7, r3
   2e9b6:	2200      	movs	r2, #0
   2e9b8:	5e9b      	ldrsh	r3, [r3, r2]
   2e9ba:	0018      	movs	r0, r3
   2e9bc:	4b0c      	ldr	r3, [pc, #48]	; (2e9f0 <http_client_socket_event_handler+0x14c>)
   2e9be:	4798      	blx	r3
   2e9c0:	0002      	movs	r2, r0
   2e9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e9c4:	0011      	movs	r1, r2
   2e9c6:	0018      	movs	r0, r3
   2e9c8:	4b0a      	ldr	r3, [pc, #40]	; (2e9f4 <http_client_socket_event_handler+0x150>)
   2e9ca:	4798      	blx	r3
   2e9cc:	e003      	b.n	2e9d6 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   2e9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e9d0:	0018      	movs	r0, r3
   2e9d2:	4b0b      	ldr	r3, [pc, #44]	; (2ea00 <http_client_socket_event_handler+0x15c>)
   2e9d4:	4798      	blx	r3
		module->sending = 0;
   2e9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e9d8:	2241      	movs	r2, #65	; 0x41
   2e9da:	5c99      	ldrb	r1, [r3, r2]
   2e9dc:	2001      	movs	r0, #1
   2e9de:	4381      	bics	r1, r0
   2e9e0:	5499      	strb	r1, [r3, r2]
    	break;
   2e9e2:	e000      	b.n	2e9e6 <http_client_socket_event_handler+0x142>
		return;
   2e9e4:	46c0      	nop			; (mov r8, r8)
	}

}
   2e9e6:	46bd      	mov	sp, r7
   2e9e8:	b00a      	add	sp, #40	; 0x28
   2e9ea:	bd80      	pop	{r7, pc}
   2e9ec:	2000414c 	.word	0x2000414c
   2e9f0:	0002e82d 	.word	0x0002e82d
   2e9f4:	0002eea1 	.word	0x0002eea1
   2e9f8:	000301fd 	.word	0x000301fd
   2e9fc:	0002f72d 	.word	0x0002f72d
   2ea00:	0002eff5 	.word	0x0002eff5
   2ea04:	0002f791 	.word	0x0002f791

0002ea08 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   2ea08:	b580      	push	{r7, lr}
   2ea0a:	b088      	sub	sp, #32
   2ea0c:	af00      	add	r7, sp, #0
   2ea0e:	6078      	str	r0, [r7, #4]
   2ea10:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   2ea12:	2300      	movs	r3, #0
   2ea14:	61fb      	str	r3, [r7, #28]
   2ea16:	e048      	b.n	2eaaa <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   2ea18:	4b27      	ldr	r3, [pc, #156]	; (2eab8 <http_client_socket_resolve_handler+0xb0>)
   2ea1a:	69fa      	ldr	r2, [r7, #28]
   2ea1c:	0092      	lsls	r2, r2, #2
   2ea1e:	58d3      	ldr	r3, [r2, r3]
   2ea20:	2b00      	cmp	r3, #0
   2ea22:	d03f      	beq.n	2eaa4 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   2ea24:	4b24      	ldr	r3, [pc, #144]	; (2eab8 <http_client_socket_resolve_handler+0xb0>)
   2ea26:	69fa      	ldr	r2, [r7, #28]
   2ea28:	0092      	lsls	r2, r2, #2
   2ea2a:	58d3      	ldr	r3, [r2, r3]
   2ea2c:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   2ea2e:	69bb      	ldr	r3, [r7, #24]
   2ea30:	1c5a      	adds	r2, r3, #1
   2ea32:	687b      	ldr	r3, [r7, #4]
   2ea34:	0011      	movs	r1, r2
   2ea36:	0018      	movs	r0, r3
   2ea38:	4b20      	ldr	r3, [pc, #128]	; (2eabc <http_client_socket_resolve_handler+0xb4>)
   2ea3a:	4798      	blx	r3
   2ea3c:	1e03      	subs	r3, r0, #0
   2ea3e:	d131      	bne.n	2eaa4 <http_client_socket_resolve_handler+0x9c>
   2ea40:	69bb      	ldr	r3, [r7, #24]
   2ea42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2ea44:	2b01      	cmp	r3, #1
   2ea46:	d12d      	bne.n	2eaa4 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   2ea48:	683b      	ldr	r3, [r7, #0]
   2ea4a:	2b00      	cmp	r3, #0
   2ea4c:	d107      	bne.n	2ea5e <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   2ea4e:	2376      	movs	r3, #118	; 0x76
   2ea50:	425a      	negs	r2, r3
   2ea52:	69bb      	ldr	r3, [r7, #24]
   2ea54:	0011      	movs	r1, r2
   2ea56:	0018      	movs	r0, r3
   2ea58:	4b19      	ldr	r3, [pc, #100]	; (2eac0 <http_client_socket_resolve_handler+0xb8>)
   2ea5a:	4798      	blx	r3
					return;
   2ea5c:	e028      	b.n	2eab0 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   2ea5e:	2308      	movs	r3, #8
   2ea60:	18fb      	adds	r3, r7, r3
   2ea62:	2202      	movs	r2, #2
   2ea64:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   2ea66:	69bb      	ldr	r3, [r7, #24]
   2ea68:	2250      	movs	r2, #80	; 0x50
   2ea6a:	5a9b      	ldrh	r3, [r3, r2]
   2ea6c:	021b      	lsls	r3, r3, #8
   2ea6e:	b21a      	sxth	r2, r3
   2ea70:	69bb      	ldr	r3, [r7, #24]
   2ea72:	2150      	movs	r1, #80	; 0x50
   2ea74:	5a5b      	ldrh	r3, [r3, r1]
   2ea76:	0a1b      	lsrs	r3, r3, #8
   2ea78:	b29b      	uxth	r3, r3
   2ea7a:	b21b      	sxth	r3, r3
   2ea7c:	4313      	orrs	r3, r2
   2ea7e:	b21b      	sxth	r3, r3
   2ea80:	b29a      	uxth	r2, r3
   2ea82:	2308      	movs	r3, #8
   2ea84:	18fb      	adds	r3, r7, r3
   2ea86:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   2ea88:	2308      	movs	r3, #8
   2ea8a:	18fb      	adds	r3, r7, r3
   2ea8c:	683a      	ldr	r2, [r7, #0]
   2ea8e:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   2ea90:	69bb      	ldr	r3, [r7, #24]
   2ea92:	781b      	ldrb	r3, [r3, #0]
   2ea94:	b25b      	sxtb	r3, r3
   2ea96:	2208      	movs	r2, #8
   2ea98:	18b9      	adds	r1, r7, r2
   2ea9a:	2210      	movs	r2, #16
   2ea9c:	0018      	movs	r0, r3
   2ea9e:	4b09      	ldr	r3, [pc, #36]	; (2eac4 <http_client_socket_resolve_handler+0xbc>)
   2eaa0:	4798      	blx	r3
				return;
   2eaa2:	e005      	b.n	2eab0 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   2eaa4:	69fb      	ldr	r3, [r7, #28]
   2eaa6:	3301      	adds	r3, #1
   2eaa8:	61fb      	str	r3, [r7, #28]
   2eaaa:	69fb      	ldr	r3, [r7, #28]
   2eaac:	2b06      	cmp	r3, #6
   2eaae:	ddb3      	ble.n	2ea18 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   2eab0:	46bd      	mov	sp, r7
   2eab2:	b008      	add	sp, #32
   2eab4:	bd80      	pop	{r7, pc}
   2eab6:	46c0      	nop			; (mov r8, r8)
   2eab8:	2000414c 	.word	0x2000414c
   2eabc:	000324fb 	.word	0x000324fb
   2eac0:	0002eea1 	.word	0x0002eea1
   2eac4:	000233c5 	.word	0x000233c5

0002eac8 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   2eac8:	b580      	push	{r7, lr}
   2eaca:	b086      	sub	sp, #24
   2eacc:	af00      	add	r7, sp, #0
   2eace:	60f8      	str	r0, [r7, #12]
   2ead0:	60b9      	str	r1, [r7, #8]
   2ead2:	607a      	str	r2, [r7, #4]
   2ead4:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   2ead6:	687b      	ldr	r3, [r7, #4]
   2ead8:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   2eada:	697b      	ldr	r3, [r7, #20]
   2eadc:	2b00      	cmp	r3, #0
   2eade:	d007      	beq.n	2eaf0 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   2eae0:	233e      	movs	r3, #62	; 0x3e
   2eae2:	425a      	negs	r2, r3
   2eae4:	697b      	ldr	r3, [r7, #20]
   2eae6:	0011      	movs	r1, r2
   2eae8:	0018      	movs	r0, r3
   2eaea:	4b03      	ldr	r3, [pc, #12]	; (2eaf8 <http_client_timer_callback+0x30>)
   2eaec:	4798      	blx	r3
   2eaee:	e000      	b.n	2eaf2 <http_client_timer_callback+0x2a>
		return;
   2eaf0:	46c0      	nop			; (mov r8, r8)
}
   2eaf2:	46bd      	mov	sp, r7
   2eaf4:	b006      	add	sp, #24
   2eaf6:	bd80      	pop	{r7, pc}
   2eaf8:	0002eea1 	.word	0x0002eea1

0002eafc <_is_ip>:

static int _is_ip(const char *host)
{
   2eafc:	b580      	push	{r7, lr}
   2eafe:	b084      	sub	sp, #16
   2eb00:	af00      	add	r7, sp, #0
   2eb02:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   2eb04:	2300      	movs	r3, #0
   2eb06:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   2eb08:	e03a      	b.n	2eb80 <_is_ip+0x84>
		ch = *host++;
   2eb0a:	687b      	ldr	r3, [r7, #4]
   2eb0c:	1c5a      	adds	r2, r3, #1
   2eb0e:	607a      	str	r2, [r7, #4]
   2eb10:	220b      	movs	r2, #11
   2eb12:	18ba      	adds	r2, r7, r2
   2eb14:	781b      	ldrb	r3, [r3, #0]
   2eb16:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   2eb18:	230b      	movs	r3, #11
   2eb1a:	18fb      	adds	r3, r7, r3
   2eb1c:	781b      	ldrb	r3, [r3, #0]
   2eb1e:	2b60      	cmp	r3, #96	; 0x60
   2eb20:	d904      	bls.n	2eb2c <_is_ip+0x30>
   2eb22:	230b      	movs	r3, #11
   2eb24:	18fb      	adds	r3, r7, r3
   2eb26:	781b      	ldrb	r3, [r3, #0]
   2eb28:	2b66      	cmp	r3, #102	; 0x66
   2eb2a:	d913      	bls.n	2eb54 <_is_ip+0x58>
   2eb2c:	230b      	movs	r3, #11
   2eb2e:	18fb      	adds	r3, r7, r3
   2eb30:	781b      	ldrb	r3, [r3, #0]
   2eb32:	2b40      	cmp	r3, #64	; 0x40
   2eb34:	d904      	bls.n	2eb40 <_is_ip+0x44>
   2eb36:	230b      	movs	r3, #11
   2eb38:	18fb      	adds	r3, r7, r3
   2eb3a:	781b      	ldrb	r3, [r3, #0]
   2eb3c:	2b46      	cmp	r3, #70	; 0x46
   2eb3e:	d909      	bls.n	2eb54 <_is_ip+0x58>
   2eb40:	230b      	movs	r3, #11
   2eb42:	18fb      	adds	r3, r7, r3
   2eb44:	781b      	ldrb	r3, [r3, #0]
   2eb46:	2b3a      	cmp	r3, #58	; 0x3a
   2eb48:	d004      	beq.n	2eb54 <_is_ip+0x58>
   2eb4a:	230b      	movs	r3, #11
   2eb4c:	18fb      	adds	r3, r7, r3
   2eb4e:	781b      	ldrb	r3, [r3, #0]
   2eb50:	2b2f      	cmp	r3, #47	; 0x2f
   2eb52:	d102      	bne.n	2eb5a <_is_ip+0x5e>
			isv6 = 1;
   2eb54:	2301      	movs	r3, #1
   2eb56:	60fb      	str	r3, [r7, #12]
   2eb58:	e012      	b.n	2eb80 <_is_ip+0x84>
		} else if (ch == '.') {
   2eb5a:	230b      	movs	r3, #11
   2eb5c:	18fb      	adds	r3, r7, r3
   2eb5e:	781b      	ldrb	r3, [r3, #0]
   2eb60:	2b2e      	cmp	r3, #46	; 0x2e
   2eb62:	d104      	bne.n	2eb6e <_is_ip+0x72>
			if (isv6) {
   2eb64:	68fb      	ldr	r3, [r7, #12]
   2eb66:	2b00      	cmp	r3, #0
   2eb68:	d00a      	beq.n	2eb80 <_is_ip+0x84>
				return 0;
   2eb6a:	2300      	movs	r3, #0
   2eb6c:	e00d      	b.n	2eb8a <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   2eb6e:	230b      	movs	r3, #11
   2eb70:	18fb      	adds	r3, r7, r3
   2eb72:	781b      	ldrb	r3, [r3, #0]
   2eb74:	2230      	movs	r2, #48	; 0x30
   2eb76:	4013      	ands	r3, r2
   2eb78:	2b30      	cmp	r3, #48	; 0x30
   2eb7a:	d001      	beq.n	2eb80 <_is_ip+0x84>
			return 0;
   2eb7c:	2300      	movs	r3, #0
   2eb7e:	e004      	b.n	2eb8a <_is_ip+0x8e>
	while (*host != '\0') {
   2eb80:	687b      	ldr	r3, [r7, #4]
   2eb82:	781b      	ldrb	r3, [r3, #0]
   2eb84:	2b00      	cmp	r3, #0
   2eb86:	d1c0      	bne.n	2eb0a <_is_ip+0xe>
		}
	}
	return 1;
   2eb88:	2301      	movs	r3, #1
}
   2eb8a:	0018      	movs	r0, r3
   2eb8c:	46bd      	mov	sp, r7
   2eb8e:	b004      	add	sp, #16
   2eb90:	bd80      	pop	{r7, pc}
	...

0002eb94 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   2eb94:	b5b0      	push	{r4, r5, r7, lr}
   2eb96:	b08e      	sub	sp, #56	; 0x38
   2eb98:	af00      	add	r7, sp, #0
   2eb9a:	60f8      	str	r0, [r7, #12]
   2eb9c:	60b9      	str	r1, [r7, #8]
   2eb9e:	603b      	str	r3, [r7, #0]
   2eba0:	1dfb      	adds	r3, r7, #7
   2eba2:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   2eba4:	2337      	movs	r3, #55	; 0x37
   2eba6:	18fb      	adds	r3, r7, r3
   2eba8:	2200      	movs	r2, #0
   2ebaa:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   2ebac:	2300      	movs	r3, #0
   2ebae:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   2ebb0:	2300      	movs	r3, #0
   2ebb2:	633b      	str	r3, [r7, #48]	; 0x30
   2ebb4:	2300      	movs	r3, #0
   2ebb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   2ebb8:	2300      	movs	r3, #0
   2ebba:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   2ebbc:	68fb      	ldr	r3, [r7, #12]
   2ebbe:	2b00      	cmp	r3, #0
   2ebc0:	d102      	bne.n	2ebc8 <http_client_send_request+0x34>
		return -EINVAL;
   2ebc2:	2316      	movs	r3, #22
   2ebc4:	425b      	negs	r3, r3
   2ebc6:	e145      	b.n	2ee54 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   2ebc8:	68fb      	ldr	r3, [r7, #12]
   2ebca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2ebcc:	2b02      	cmp	r3, #2
   2ebce:	d902      	bls.n	2ebd6 <http_client_send_request+0x42>
		return -EBUSY;
   2ebd0:	2310      	movs	r3, #16
   2ebd2:	425b      	negs	r3, r3
   2ebd4:	e13e      	b.n	2ee54 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   2ebd6:	49a1      	ldr	r1, [pc, #644]	; (2ee5c <http_client_send_request+0x2c8>)
   2ebd8:	68bb      	ldr	r3, [r7, #8]
   2ebda:	2207      	movs	r2, #7
   2ebdc:	0018      	movs	r0, r3
   2ebde:	4ba0      	ldr	r3, [pc, #640]	; (2ee60 <http_client_send_request+0x2cc>)
   2ebe0:	4798      	blx	r3
   2ebe2:	1e03      	subs	r3, r0, #0
   2ebe4:	d102      	bne.n	2ebec <http_client_send_request+0x58>
		i = 7;
   2ebe6:	2307      	movs	r3, #7
   2ebe8:	633b      	str	r3, [r7, #48]	; 0x30
   2ebea:	e009      	b.n	2ec00 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   2ebec:	499d      	ldr	r1, [pc, #628]	; (2ee64 <http_client_send_request+0x2d0>)
   2ebee:	68bb      	ldr	r3, [r7, #8]
   2ebf0:	2208      	movs	r2, #8
   2ebf2:	0018      	movs	r0, r3
   2ebf4:	4b9a      	ldr	r3, [pc, #616]	; (2ee60 <http_client_send_request+0x2cc>)
   2ebf6:	4798      	blx	r3
   2ebf8:	1e03      	subs	r3, r0, #0
   2ebfa:	d101      	bne.n	2ec00 <http_client_send_request+0x6c>
		i = 8;
   2ebfc:	2308      	movs	r3, #8
   2ebfe:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   2ec00:	68fb      	ldr	r3, [r7, #12]
   2ec02:	1c5c      	adds	r4, r3, #1
   2ec04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ec06:	68ba      	ldr	r2, [r7, #8]
   2ec08:	18d5      	adds	r5, r2, r3
   2ec0a:	68fb      	ldr	r3, [r7, #12]
   2ec0c:	3301      	adds	r3, #1
   2ec0e:	0018      	movs	r0, r3
   2ec10:	4b95      	ldr	r3, [pc, #596]	; (2ee68 <http_client_send_request+0x2d4>)
   2ec12:	4798      	blx	r3
   2ec14:	0003      	movs	r3, r0
   2ec16:	001a      	movs	r2, r3
   2ec18:	0029      	movs	r1, r5
   2ec1a:	0020      	movs	r0, r4
   2ec1c:	4b90      	ldr	r3, [pc, #576]	; (2ee60 <http_client_send_request+0x2cc>)
   2ec1e:	4798      	blx	r3
   2ec20:	0003      	movs	r3, r0
   2ec22:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   2ec24:	e00d      	b.n	2ec42 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   2ec26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ec28:	1c5a      	adds	r2, r3, #1
   2ec2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   2ec2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   2ec2e:	68b9      	ldr	r1, [r7, #8]
   2ec30:	188a      	adds	r2, r1, r2
   2ec32:	7811      	ldrb	r1, [r2, #0]
   2ec34:	68fa      	ldr	r2, [r7, #12]
   2ec36:	18d3      	adds	r3, r2, r3
   2ec38:	1c0a      	adds	r2, r1, #0
   2ec3a:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   2ec3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ec3e:	3301      	adds	r3, #1
   2ec40:	633b      	str	r3, [r7, #48]	; 0x30
   2ec42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ec44:	68ba      	ldr	r2, [r7, #8]
   2ec46:	18d3      	adds	r3, r2, r3
   2ec48:	781b      	ldrb	r3, [r3, #0]
   2ec4a:	2b00      	cmp	r3, #0
   2ec4c:	d005      	beq.n	2ec5a <http_client_send_request+0xc6>
   2ec4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ec50:	68ba      	ldr	r2, [r7, #8]
   2ec52:	18d3      	adds	r3, r2, r3
   2ec54:	781b      	ldrb	r3, [r3, #0]
   2ec56:	2b2f      	cmp	r3, #47	; 0x2f
   2ec58:	d1e5      	bne.n	2ec26 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   2ec5a:	68fa      	ldr	r2, [r7, #12]
   2ec5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ec5e:	18d3      	adds	r3, r2, r3
   2ec60:	3301      	adds	r3, #1
   2ec62:	2200      	movs	r2, #0
   2ec64:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   2ec66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ec68:	68ba      	ldr	r2, [r7, #8]
   2ec6a:	18d3      	adds	r3, r2, r3
   2ec6c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   2ec6e:	68fb      	ldr	r3, [r7, #12]
   2ec70:	3301      	adds	r3, #1
   2ec72:	781b      	ldrb	r3, [r3, #0]
   2ec74:	2b00      	cmp	r3, #0
   2ec76:	d102      	bne.n	2ec7e <http_client_send_request+0xea>
		return -EINVAL;
   2ec78:	2316      	movs	r3, #22
   2ec7a:	425b      	negs	r3, r3
   2ec7c:	e0ea      	b.n	2ee54 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   2ec7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ec80:	0018      	movs	r0, r3
   2ec82:	4b79      	ldr	r3, [pc, #484]	; (2ee68 <http_client_send_request+0x2d4>)
   2ec84:	4798      	blx	r3
   2ec86:	0003      	movs	r3, r0
   2ec88:	2b3f      	cmp	r3, #63	; 0x3f
   2ec8a:	d902      	bls.n	2ec92 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   2ec8c:	235b      	movs	r3, #91	; 0x5b
   2ec8e:	425b      	negs	r3, r3
   2ec90:	e0e0      	b.n	2ee54 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   2ec92:	68fb      	ldr	r3, [r7, #12]
   2ec94:	22d4      	movs	r2, #212	; 0xd4
   2ec96:	589b      	ldr	r3, [r3, r2]
   2ec98:	2b00      	cmp	r3, #0
   2ec9a:	d005      	beq.n	2eca8 <http_client_send_request+0x114>
		free(module->req.ext_header);
   2ec9c:	68fb      	ldr	r3, [r7, #12]
   2ec9e:	22d4      	movs	r2, #212	; 0xd4
   2eca0:	589b      	ldr	r3, [r3, r2]
   2eca2:	0018      	movs	r0, r3
   2eca4:	4b71      	ldr	r3, [pc, #452]	; (2ee6c <http_client_send_request+0x2d8>)
   2eca6:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   2eca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2ecaa:	2b00      	cmp	r3, #0
   2ecac:	d010      	beq.n	2ecd0 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   2ecae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2ecb0:	0018      	movs	r0, r3
   2ecb2:	4b6f      	ldr	r3, [pc, #444]	; (2ee70 <http_client_send_request+0x2dc>)
   2ecb4:	4798      	blx	r3
   2ecb6:	0003      	movs	r3, r0
   2ecb8:	0019      	movs	r1, r3
   2ecba:	68fb      	ldr	r3, [r7, #12]
   2ecbc:	22d4      	movs	r2, #212	; 0xd4
   2ecbe:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   2ecc0:	68fb      	ldr	r3, [r7, #12]
   2ecc2:	22d4      	movs	r2, #212	; 0xd4
   2ecc4:	589b      	ldr	r3, [r3, r2]
   2ecc6:	2b00      	cmp	r3, #0
   2ecc8:	d106      	bne.n	2ecd8 <http_client_send_request+0x144>
			return -ENOMEM;
   2ecca:	230c      	movs	r3, #12
   2eccc:	425b      	negs	r3, r3
   2ecce:	e0c1      	b.n	2ee54 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   2ecd0:	68fb      	ldr	r3, [r7, #12]
   2ecd2:	22d4      	movs	r2, #212	; 0xd4
   2ecd4:	2100      	movs	r1, #0
   2ecd6:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   2ecd8:	68fb      	ldr	r3, [r7, #12]
   2ecda:	2241      	movs	r2, #65	; 0x41
   2ecdc:	5c99      	ldrb	r1, [r3, r2]
   2ecde:	2001      	movs	r0, #1
   2ece0:	4381      	bics	r1, r0
   2ece2:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   2ece4:	68fb      	ldr	r3, [r7, #12]
   2ece6:	2200      	movs	r2, #0
   2ece8:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   2ecea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ecec:	781b      	ldrb	r3, [r3, #0]
   2ecee:	2b2f      	cmp	r3, #47	; 0x2f
   2ecf0:	d107      	bne.n	2ed02 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   2ecf2:	68fb      	ldr	r3, [r7, #12]
   2ecf4:	3370      	adds	r3, #112	; 0x70
   2ecf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ecf8:	0011      	movs	r1, r2
   2ecfa:	0018      	movs	r0, r3
   2ecfc:	4b5d      	ldr	r3, [pc, #372]	; (2ee74 <http_client_send_request+0x2e0>)
   2ecfe:	4798      	blx	r3
   2ed00:	e00f      	b.n	2ed22 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   2ed02:	68fb      	ldr	r3, [r7, #12]
   2ed04:	2270      	movs	r2, #112	; 0x70
   2ed06:	212f      	movs	r1, #47	; 0x2f
   2ed08:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   2ed0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ed0c:	781b      	ldrb	r3, [r3, #0]
   2ed0e:	2b00      	cmp	r3, #0
   2ed10:	d007      	beq.n	2ed22 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   2ed12:	68fb      	ldr	r3, [r7, #12]
   2ed14:	3370      	adds	r3, #112	; 0x70
   2ed16:	3301      	adds	r3, #1
   2ed18:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ed1a:	0011      	movs	r1, r2
   2ed1c:	0018      	movs	r0, r3
   2ed1e:	4b55      	ldr	r3, [pc, #340]	; (2ee74 <http_client_send_request+0x2e0>)
   2ed20:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   2ed22:	683b      	ldr	r3, [r7, #0]
   2ed24:	2b00      	cmp	r3, #0
   2ed26:	d007      	beq.n	2ed38 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   2ed28:	68fb      	ldr	r3, [r7, #12]
   2ed2a:	33b0      	adds	r3, #176	; 0xb0
   2ed2c:	6839      	ldr	r1, [r7, #0]
   2ed2e:	2218      	movs	r2, #24
   2ed30:	0018      	movs	r0, r3
   2ed32:	4b51      	ldr	r3, [pc, #324]	; (2ee78 <http_client_send_request+0x2e4>)
   2ed34:	4798      	blx	r3
   2ed36:	e006      	b.n	2ed46 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   2ed38:	68fb      	ldr	r3, [r7, #12]
   2ed3a:	33b0      	adds	r3, #176	; 0xb0
   2ed3c:	2218      	movs	r2, #24
   2ed3e:	2100      	movs	r1, #0
   2ed40:	0018      	movs	r0, r3
   2ed42:	4b4e      	ldr	r3, [pc, #312]	; (2ee7c <http_client_send_request+0x2e8>)
   2ed44:	4798      	blx	r3
	}

	module->req.method = method;
   2ed46:	68fb      	ldr	r3, [r7, #12]
   2ed48:	1dfa      	adds	r2, r7, #7
   2ed4a:	21c8      	movs	r1, #200	; 0xc8
   2ed4c:	7812      	ldrb	r2, [r2, #0]
   2ed4e:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   2ed50:	68fb      	ldr	r3, [r7, #12]
   2ed52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2ed54:	2b01      	cmp	r3, #1
   2ed56:	d003      	beq.n	2ed60 <http_client_send_request+0x1cc>
   2ed58:	d316      	bcc.n	2ed88 <http_client_send_request+0x1f4>
   2ed5a:	2b02      	cmp	r3, #2
   2ed5c:	d004      	beq.n	2ed68 <http_client_send_request+0x1d4>
   2ed5e:	e074      	b.n	2ee4a <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   2ed60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ed62:	2b00      	cmp	r3, #0
   2ed64:	d100      	bne.n	2ed68 <http_client_send_request+0x1d4>
   2ed66:	e073      	b.n	2ee50 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   2ed68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ed6a:	2b00      	cmp	r3, #0
   2ed6c:	d107      	bne.n	2ed7e <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   2ed6e:	68fb      	ldr	r3, [r7, #12]
   2ed70:	2203      	movs	r2, #3
   2ed72:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   2ed74:	68fb      	ldr	r3, [r7, #12]
   2ed76:	0018      	movs	r0, r3
   2ed78:	4b41      	ldr	r3, [pc, #260]	; (2ee80 <http_client_send_request+0x2ec>)
   2ed7a:	4798      	blx	r3
			break;
   2ed7c:	e069      	b.n	2ee52 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   2ed7e:	68fb      	ldr	r3, [r7, #12]
   2ed80:	2100      	movs	r1, #0
   2ed82:	0018      	movs	r0, r3
   2ed84:	4b3f      	ldr	r3, [pc, #252]	; (2ee84 <http_client_send_request+0x2f0>)
   2ed86:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   2ed88:	68fb      	ldr	r3, [r7, #12]
   2ed8a:	2252      	movs	r2, #82	; 0x52
   2ed8c:	5c9b      	ldrb	r3, [r3, r2]
   2ed8e:	2b00      	cmp	r3, #0
   2ed90:	d007      	beq.n	2eda2 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   2ed92:	2337      	movs	r3, #55	; 0x37
   2ed94:	18fb      	adds	r3, r7, r3
   2ed96:	2237      	movs	r2, #55	; 0x37
   2ed98:	18ba      	adds	r2, r7, r2
   2ed9a:	7812      	ldrb	r2, [r2, #0]
   2ed9c:	2101      	movs	r1, #1
   2ed9e:	430a      	orrs	r2, r1
   2eda0:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   2eda2:	2337      	movs	r3, #55	; 0x37
   2eda4:	18fb      	adds	r3, r7, r3
   2eda6:	781b      	ldrb	r3, [r3, #0]
   2eda8:	001a      	movs	r2, r3
   2edaa:	2101      	movs	r1, #1
   2edac:	2002      	movs	r0, #2
   2edae:	4b36      	ldr	r3, [pc, #216]	; (2ee88 <http_client_send_request+0x2f4>)
   2edb0:	4798      	blx	r3
   2edb2:	0003      	movs	r3, r0
   2edb4:	001a      	movs	r2, r3
   2edb6:	68fb      	ldr	r3, [r7, #12]
   2edb8:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   2edba:	68fb      	ldr	r3, [r7, #12]
   2edbc:	781b      	ldrb	r3, [r3, #0]
   2edbe:	b25b      	sxtb	r3, r3
   2edc0:	2b00      	cmp	r3, #0
   2edc2:	db3f      	blt.n	2ee44 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   2edc4:	68fb      	ldr	r3, [r7, #12]
   2edc6:	781b      	ldrb	r3, [r3, #0]
   2edc8:	b25b      	sxtb	r3, r3
   2edca:	001a      	movs	r2, r3
   2edcc:	4b2f      	ldr	r3, [pc, #188]	; (2ee8c <http_client_send_request+0x2f8>)
   2edce:	0092      	lsls	r2, r2, #2
   2edd0:	68f9      	ldr	r1, [r7, #12]
   2edd2:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   2edd4:	68fb      	ldr	r3, [r7, #12]
   2edd6:	3301      	adds	r3, #1
   2edd8:	0018      	movs	r0, r3
   2edda:	4b2d      	ldr	r3, [pc, #180]	; (2ee90 <http_client_send_request+0x2fc>)
   2eddc:	4798      	blx	r3
   2edde:	1e03      	subs	r3, r0, #0
   2ede0:	d027      	beq.n	2ee32 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   2ede2:	2314      	movs	r3, #20
   2ede4:	18fb      	adds	r3, r7, r3
   2ede6:	2202      	movs	r2, #2
   2ede8:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   2edea:	68fb      	ldr	r3, [r7, #12]
   2edec:	2250      	movs	r2, #80	; 0x50
   2edee:	5a9b      	ldrh	r3, [r3, r2]
   2edf0:	021b      	lsls	r3, r3, #8
   2edf2:	b21a      	sxth	r2, r3
   2edf4:	68fb      	ldr	r3, [r7, #12]
   2edf6:	2150      	movs	r1, #80	; 0x50
   2edf8:	5a5b      	ldrh	r3, [r3, r1]
   2edfa:	0a1b      	lsrs	r3, r3, #8
   2edfc:	b29b      	uxth	r3, r3
   2edfe:	b21b      	sxth	r3, r3
   2ee00:	4313      	orrs	r3, r2
   2ee02:	b21b      	sxth	r3, r3
   2ee04:	b29a      	uxth	r2, r3
   2ee06:	2314      	movs	r3, #20
   2ee08:	18fb      	adds	r3, r7, r3
   2ee0a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   2ee0c:	68fb      	ldr	r3, [r7, #12]
   2ee0e:	3301      	adds	r3, #1
   2ee10:	0018      	movs	r0, r3
   2ee12:	4b20      	ldr	r3, [pc, #128]	; (2ee94 <http_client_send_request+0x300>)
   2ee14:	4798      	blx	r3
   2ee16:	0002      	movs	r2, r0
   2ee18:	2314      	movs	r3, #20
   2ee1a:	18fb      	adds	r3, r7, r3
   2ee1c:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   2ee1e:	68fb      	ldr	r3, [r7, #12]
   2ee20:	781b      	ldrb	r3, [r3, #0]
   2ee22:	b25b      	sxtb	r3, r3
   2ee24:	2214      	movs	r2, #20
   2ee26:	18b9      	adds	r1, r7, r2
   2ee28:	2210      	movs	r2, #16
   2ee2a:	0018      	movs	r0, r3
   2ee2c:	4b1a      	ldr	r3, [pc, #104]	; (2ee98 <http_client_send_request+0x304>)
   2ee2e:	4798      	blx	r3
   2ee30:	e004      	b.n	2ee3c <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   2ee32:	68fb      	ldr	r3, [r7, #12]
   2ee34:	3301      	adds	r3, #1
   2ee36:	0018      	movs	r0, r3
   2ee38:	4b18      	ldr	r3, [pc, #96]	; (2ee9c <http_client_send_request+0x308>)
   2ee3a:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   2ee3c:	68fb      	ldr	r3, [r7, #12]
   2ee3e:	2201      	movs	r2, #1
   2ee40:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   2ee42:	e006      	b.n	2ee52 <http_client_send_request+0x2be>
			return -ENOSPC;
   2ee44:	231c      	movs	r3, #28
   2ee46:	425b      	negs	r3, r3
   2ee48:	e004      	b.n	2ee54 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   2ee4a:	230b      	movs	r3, #11
   2ee4c:	425b      	negs	r3, r3
   2ee4e:	e001      	b.n	2ee54 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   2ee50:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   2ee52:	2300      	movs	r3, #0
}
   2ee54:	0018      	movs	r0, r3
   2ee56:	46bd      	mov	sp, r7
   2ee58:	b00e      	add	sp, #56	; 0x38
   2ee5a:	bdb0      	pop	{r4, r5, r7, pc}
   2ee5c:	000370c0 	.word	0x000370c0
   2ee60:	00032569 	.word	0x00032569
   2ee64:	000370c8 	.word	0x000370c8
   2ee68:	0003255b 	.word	0x0003255b
   2ee6c:	00032159 	.word	0x00032159
   2ee70:	00032521 	.word	0x00032521
   2ee74:	0003250f 	.word	0x0003250f
   2ee78:	0003216d 	.word	0x0003216d
   2ee7c:	000321a3 	.word	0x000321a3
   2ee80:	0002eff5 	.word	0x0002eff5
   2ee84:	0002eea1 	.word	0x0002eea1
   2ee88:	000231b1 	.word	0x000231b1
   2ee8c:	2000414c 	.word	0x2000414c
   2ee90:	0002eafd 	.word	0x0002eafd
   2ee94:	000238fd 	.word	0x000238fd
   2ee98:	000233c5 	.word	0x000233c5
   2ee9c:	00023a05 	.word	0x00023a05

0002eea0 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   2eea0:	b580      	push	{r7, lr}
   2eea2:	b086      	sub	sp, #24
   2eea4:	af00      	add	r7, sp, #0
   2eea6:	6078      	str	r0, [r7, #4]
   2eea8:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   2eeaa:	687b      	ldr	r3, [r7, #4]
   2eeac:	22c0      	movs	r2, #192	; 0xc0
   2eeae:	589b      	ldr	r3, [r3, r2]
   2eeb0:	2b00      	cmp	r3, #0
   2eeb2:	d007      	beq.n	2eec4 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   2eeb4:	687b      	ldr	r3, [r7, #4]
   2eeb6:	22c0      	movs	r2, #192	; 0xc0
   2eeb8:	589b      	ldr	r3, [r3, r2]
   2eeba:	687a      	ldr	r2, [r7, #4]
   2eebc:	21c4      	movs	r1, #196	; 0xc4
   2eebe:	5852      	ldr	r2, [r2, r1]
   2eec0:	0010      	movs	r0, r2
   2eec2:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   2eec4:	687b      	ldr	r3, [r7, #4]
   2eec6:	33b0      	adds	r3, #176	; 0xb0
   2eec8:	2218      	movs	r2, #24
   2eeca:	2100      	movs	r1, #0
   2eecc:	0018      	movs	r0, r3
   2eece:	4b24      	ldr	r3, [pc, #144]	; (2ef60 <_http_client_clear_conn+0xc0>)
   2eed0:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   2eed2:	687b      	ldr	r3, [r7, #4]
   2eed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2eed6:	2b00      	cmp	r3, #0
   2eed8:	d005      	beq.n	2eee6 <_http_client_clear_conn+0x46>
		close(module->sock);
   2eeda:	687b      	ldr	r3, [r7, #4]
   2eedc:	781b      	ldrb	r3, [r3, #0]
   2eede:	b25b      	sxtb	r3, r3
   2eee0:	0018      	movs	r0, r3
   2eee2:	4b20      	ldr	r3, [pc, #128]	; (2ef64 <_http_client_clear_conn+0xc4>)
   2eee4:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   2eee6:	687b      	ldr	r3, [r7, #4]
   2eee8:	781b      	ldrb	r3, [r3, #0]
   2eeea:	b25b      	sxtb	r3, r3
   2eeec:	001a      	movs	r2, r3
   2eeee:	4b1e      	ldr	r3, [pc, #120]	; (2ef68 <_http_client_clear_conn+0xc8>)
   2eef0:	0092      	lsls	r2, r2, #2
   2eef2:	2100      	movs	r1, #0
   2eef4:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   2eef6:	687b      	ldr	r3, [r7, #4]
   2eef8:	336c      	adds	r3, #108	; 0x6c
   2eefa:	226c      	movs	r2, #108	; 0x6c
   2eefc:	2100      	movs	r1, #0
   2eefe:	0018      	movs	r0, r3
   2ef00:	4b17      	ldr	r3, [pc, #92]	; (2ef60 <_http_client_clear_conn+0xc0>)
   2ef02:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   2ef04:	687b      	ldr	r3, [r7, #4]
   2ef06:	33d8      	adds	r3, #216	; 0xd8
   2ef08:	2210      	movs	r2, #16
   2ef0a:	2100      	movs	r1, #0
   2ef0c:	0018      	movs	r0, r3
   2ef0e:	4b14      	ldr	r3, [pc, #80]	; (2ef60 <_http_client_clear_conn+0xc0>)
   2ef10:	4798      	blx	r3
	module->req.state = STATE_INIT;
   2ef12:	687b      	ldr	r3, [r7, #4]
   2ef14:	2200      	movs	r2, #0
   2ef16:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   2ef18:	687b      	ldr	r3, [r7, #4]
   2ef1a:	22d8      	movs	r2, #216	; 0xd8
   2ef1c:	2100      	movs	r1, #0
   2ef1e:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   2ef20:	687b      	ldr	r3, [r7, #4]
   2ef22:	2241      	movs	r2, #65	; 0x41
   2ef24:	5c99      	ldrb	r1, [r3, r2]
   2ef26:	2001      	movs	r0, #1
   2ef28:	4381      	bics	r1, r0
   2ef2a:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   2ef2c:	687b      	ldr	r3, [r7, #4]
   2ef2e:	2241      	movs	r2, #65	; 0x41
   2ef30:	5c99      	ldrb	r1, [r3, r2]
   2ef32:	2002      	movs	r0, #2
   2ef34:	4381      	bics	r1, r0
   2ef36:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   2ef38:	230c      	movs	r3, #12
   2ef3a:	18fb      	adds	r3, r7, r3
   2ef3c:	683a      	ldr	r2, [r7, #0]
   2ef3e:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   2ef40:	687b      	ldr	r3, [r7, #4]
   2ef42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ef44:	2b00      	cmp	r3, #0
   2ef46:	d006      	beq.n	2ef56 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   2ef48:	687b      	ldr	r3, [r7, #4]
   2ef4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ef4c:	220c      	movs	r2, #12
   2ef4e:	18ba      	adds	r2, r7, r2
   2ef50:	6878      	ldr	r0, [r7, #4]
   2ef52:	2104      	movs	r1, #4
   2ef54:	4798      	blx	r3
	}
}
   2ef56:	46c0      	nop			; (mov r8, r8)
   2ef58:	46bd      	mov	sp, r7
   2ef5a:	b006      	add	sp, #24
   2ef5c:	bd80      	pop	{r7, pc}
   2ef5e:	46c0      	nop			; (mov r8, r8)
   2ef60:	000321a3 	.word	0x000321a3
   2ef64:	000237bd 	.word	0x000237bd
   2ef68:	2000414c 	.word	0x2000414c

0002ef6c <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   2ef6c:	b590      	push	{r4, r7, lr}
   2ef6e:	b087      	sub	sp, #28
   2ef70:	af00      	add	r7, sp, #0
   2ef72:	60f8      	str	r0, [r7, #12]
   2ef74:	60b9      	str	r1, [r7, #8]
   2ef76:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   2ef78:	68fb      	ldr	r3, [r7, #12]
   2ef7a:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   2ef7c:	697b      	ldr	r3, [r7, #20]
   2ef7e:	2241      	movs	r2, #65	; 0x41
   2ef80:	5c99      	ldrb	r1, [r3, r2]
   2ef82:	2001      	movs	r0, #1
   2ef84:	4301      	orrs	r1, r0
   2ef86:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   2ef88:	697b      	ldr	r3, [r7, #20]
   2ef8a:	2000      	movs	r0, #0
   2ef8c:	5618      	ldrsb	r0, [r3, r0]
   2ef8e:	687b      	ldr	r3, [r7, #4]
   2ef90:	b29a      	uxth	r2, r3
   2ef92:	68b9      	ldr	r1, [r7, #8]
   2ef94:	2300      	movs	r3, #0
   2ef96:	4c14      	ldr	r4, [pc, #80]	; (2efe8 <_http_client_send_wait+0x7c>)
   2ef98:	47a0      	blx	r4
   2ef9a:	0003      	movs	r3, r0
   2ef9c:	613b      	str	r3, [r7, #16]
   2ef9e:	693b      	ldr	r3, [r7, #16]
   2efa0:	2b00      	cmp	r3, #0
   2efa2:	da0f      	bge.n	2efc4 <_http_client_send_wait+0x58>
		module->sending = 0;
   2efa4:	697b      	ldr	r3, [r7, #20]
   2efa6:	2241      	movs	r2, #65	; 0x41
   2efa8:	5c99      	ldrb	r1, [r3, r2]
   2efaa:	2001      	movs	r0, #1
   2efac:	4381      	bics	r1, r0
   2efae:	5499      	strb	r1, [r3, r2]
		return result;
   2efb0:	693b      	ldr	r3, [r7, #16]
   2efb2:	e014      	b.n	2efde <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   2efb4:	2000      	movs	r0, #0
   2efb6:	4b0d      	ldr	r3, [pc, #52]	; (2efec <_http_client_send_wait+0x80>)
   2efb8:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   2efba:	697b      	ldr	r3, [r7, #20]
   2efbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2efbe:	0018      	movs	r0, r3
   2efc0:	4b0b      	ldr	r3, [pc, #44]	; (2eff0 <_http_client_send_wait+0x84>)
   2efc2:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   2efc4:	697b      	ldr	r3, [r7, #20]
   2efc6:	2241      	movs	r2, #65	; 0x41
   2efc8:	5c9b      	ldrb	r3, [r3, r2]
   2efca:	2201      	movs	r2, #1
   2efcc:	4013      	ands	r3, r2
   2efce:	b2db      	uxtb	r3, r3
   2efd0:	2b00      	cmp	r3, #0
   2efd2:	d003      	beq.n	2efdc <_http_client_send_wait+0x70>
   2efd4:	697b      	ldr	r3, [r7, #20]
   2efd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2efd8:	2b02      	cmp	r3, #2
   2efda:	d8eb      	bhi.n	2efb4 <_http_client_send_wait+0x48>
	}

	return 0;
   2efdc:	2300      	movs	r3, #0
}
   2efde:	0018      	movs	r0, r3
   2efe0:	46bd      	mov	sp, r7
   2efe2:	b007      	add	sp, #28
   2efe4:	bd90      	pop	{r4, r7, pc}
   2efe6:	46c0      	nop			; (mov r8, r8)
   2efe8:	000234d9 	.word	0x000234d9
   2efec:	0001fb85 	.word	0x0001fb85
   2eff0:	00030279 	.word	0x00030279

0002eff4 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   2eff4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2eff6:	46c6      	mov	lr, r8
   2eff8:	b500      	push	{lr}
   2effa:	b0a0      	sub	sp, #128	; 0x80
   2effc:	af02      	add	r7, sp, #8
   2effe:	61f8      	str	r0, [r7, #28]
   2f000:	4668      	mov	r0, sp
   2f002:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   2f004:	2318      	movs	r3, #24
   2f006:	2218      	movs	r2, #24
   2f008:	18ba      	adds	r2, r7, r2
   2f00a:	18d0      	adds	r0, r2, r3
   2f00c:	4bbd      	ldr	r3, [pc, #756]	; (2f304 <_http_client_request+0x310>)
   2f00e:	469c      	mov	ip, r3
   2f010:	4663      	mov	r3, ip
   2f012:	cb16      	ldmia	r3!, {r1, r2, r4}
   2f014:	c016      	stmia	r0!, {r1, r2, r4}
   2f016:	469c      	mov	ip, r3
   2f018:	4663      	mov	r3, ip
   2f01a:	681b      	ldr	r3, [r3, #0]
   2f01c:	469c      	mov	ip, r3
   2f01e:	4663      	mov	r3, ip
   2f020:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   2f022:	69f8      	ldr	r0, [r7, #28]
   2f024:	6e40      	ldr	r0, [r0, #100]	; 0x64
   2f026:	4684      	mov	ip, r0
   2f028:	2301      	movs	r3, #1
   2f02a:	425b      	negs	r3, r3
   2f02c:	4698      	mov	r8, r3
   2f02e:	44c4      	add	ip, r8
   2f030:	4663      	mov	r3, ip
   2f032:	66fb      	str	r3, [r7, #108]	; 0x6c
   2f034:	6038      	str	r0, [r7, #0]
   2f036:	2300      	movs	r3, #0
   2f038:	607b      	str	r3, [r7, #4]
   2f03a:	6839      	ldr	r1, [r7, #0]
   2f03c:	687a      	ldr	r2, [r7, #4]
   2f03e:	000b      	movs	r3, r1
   2f040:	0f5b      	lsrs	r3, r3, #29
   2f042:	469c      	mov	ip, r3
   2f044:	0013      	movs	r3, r2
   2f046:	00db      	lsls	r3, r3, #3
   2f048:	617b      	str	r3, [r7, #20]
   2f04a:	4663      	mov	r3, ip
   2f04c:	697c      	ldr	r4, [r7, #20]
   2f04e:	431c      	orrs	r4, r3
   2f050:	617c      	str	r4, [r7, #20]
   2f052:	000b      	movs	r3, r1
   2f054:	00db      	lsls	r3, r3, #3
   2f056:	613b      	str	r3, [r7, #16]
   2f058:	0005      	movs	r5, r0
   2f05a:	2200      	movs	r2, #0
   2f05c:	0016      	movs	r6, r2
   2f05e:	0f6a      	lsrs	r2, r5, #29
   2f060:	00f3      	lsls	r3, r6, #3
   2f062:	60fb      	str	r3, [r7, #12]
   2f064:	68fb      	ldr	r3, [r7, #12]
   2f066:	4313      	orrs	r3, r2
   2f068:	60fb      	str	r3, [r7, #12]
   2f06a:	00eb      	lsls	r3, r5, #3
   2f06c:	60bb      	str	r3, [r7, #8]
   2f06e:	1dc3      	adds	r3, r0, #7
   2f070:	08db      	lsrs	r3, r3, #3
   2f072:	00db      	lsls	r3, r3, #3
   2f074:	466a      	mov	r2, sp
   2f076:	1ad3      	subs	r3, r2, r3
   2f078:	469d      	mov	sp, r3
   2f07a:	ab02      	add	r3, sp, #8
   2f07c:	3300      	adds	r3, #0
   2f07e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   2f080:	69fb      	ldr	r3, [r7, #28]
   2f082:	2b00      	cmp	r3, #0
   2f084:	d100      	bne.n	2f088 <_http_client_request+0x94>
   2f086:	e346      	b.n	2f716 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   2f088:	69fb      	ldr	r3, [r7, #28]
   2f08a:	2241      	movs	r2, #65	; 0x41
   2f08c:	5c9b      	ldrb	r3, [r3, r2]
   2f08e:	2201      	movs	r2, #1
   2f090:	4013      	ands	r3, r2
   2f092:	b2db      	uxtb	r3, r3
   2f094:	2b00      	cmp	r3, #0
   2f096:	d000      	beq.n	2f09a <_http_client_request+0xa6>
   2f098:	e33f      	b.n	2f71a <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   2f09a:	69fb      	ldr	r3, [r7, #28]
   2f09c:	33b0      	adds	r3, #176	; 0xb0
   2f09e:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   2f0a0:	69fb      	ldr	r3, [r7, #28]
   2f0a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2f0a4:	2b03      	cmp	r3, #3
   2f0a6:	d003      	beq.n	2f0b0 <_http_client_request+0xbc>
   2f0a8:	2b04      	cmp	r3, #4
   2f0aa:	d100      	bne.n	2f0ae <_http_client_request+0xba>
   2f0ac:	e1b3      	b.n	2f416 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   2f0ae:	e32f      	b.n	2f710 <_http_client_request+0x71c>
		module->req.content_length = 0;
   2f0b0:	69fb      	ldr	r3, [r7, #28]
   2f0b2:	22cc      	movs	r2, #204	; 0xcc
   2f0b4:	2100      	movs	r1, #0
   2f0b6:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   2f0b8:	69fb      	ldr	r3, [r7, #28]
   2f0ba:	22d0      	movs	r2, #208	; 0xd0
   2f0bc:	2100      	movs	r1, #0
   2f0be:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   2f0c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   2f0c2:	69fb      	ldr	r3, [r7, #28]
   2f0c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   2f0c6:	4c90      	ldr	r4, [pc, #576]	; (2f308 <_http_client_request+0x314>)
   2f0c8:	2334      	movs	r3, #52	; 0x34
   2f0ca:	2018      	movs	r0, #24
   2f0cc:	1838      	adds	r0, r7, r0
   2f0ce:	18c0      	adds	r0, r0, r3
   2f0d0:	69fb      	ldr	r3, [r7, #28]
   2f0d2:	9300      	str	r3, [sp, #0]
   2f0d4:	0023      	movs	r3, r4
   2f0d6:	4c8d      	ldr	r4, [pc, #564]	; (2f30c <_http_client_request+0x318>)
   2f0d8:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   2f0da:	69fb      	ldr	r3, [r7, #28]
   2f0dc:	22c8      	movs	r2, #200	; 0xc8
   2f0de:	5c9b      	ldrb	r3, [r3, r2]
   2f0e0:	2b01      	cmp	r3, #1
   2f0e2:	d10a      	bne.n	2f0fa <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   2f0e4:	498a      	ldr	r1, [pc, #552]	; (2f310 <_http_client_request+0x31c>)
   2f0e6:	2334      	movs	r3, #52	; 0x34
   2f0e8:	2218      	movs	r2, #24
   2f0ea:	4694      	mov	ip, r2
   2f0ec:	44bc      	add	ip, r7
   2f0ee:	4463      	add	r3, ip
   2f0f0:	2204      	movs	r2, #4
   2f0f2:	0018      	movs	r0, r3
   2f0f4:	4b87      	ldr	r3, [pc, #540]	; (2f314 <_http_client_request+0x320>)
   2f0f6:	4798      	blx	r3
   2f0f8:	e04e      	b.n	2f198 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   2f0fa:	69fb      	ldr	r3, [r7, #28]
   2f0fc:	22c8      	movs	r2, #200	; 0xc8
   2f0fe:	5c9b      	ldrb	r3, [r3, r2]
   2f100:	2b02      	cmp	r3, #2
   2f102:	d10a      	bne.n	2f11a <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   2f104:	4984      	ldr	r1, [pc, #528]	; (2f318 <_http_client_request+0x324>)
   2f106:	2334      	movs	r3, #52	; 0x34
   2f108:	2218      	movs	r2, #24
   2f10a:	4694      	mov	ip, r2
   2f10c:	44bc      	add	ip, r7
   2f10e:	4463      	add	r3, ip
   2f110:	2205      	movs	r2, #5
   2f112:	0018      	movs	r0, r3
   2f114:	4b7f      	ldr	r3, [pc, #508]	; (2f314 <_http_client_request+0x320>)
   2f116:	4798      	blx	r3
   2f118:	e03e      	b.n	2f198 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   2f11a:	69fb      	ldr	r3, [r7, #28]
   2f11c:	22c8      	movs	r2, #200	; 0xc8
   2f11e:	5c9b      	ldrb	r3, [r3, r2]
   2f120:	2b03      	cmp	r3, #3
   2f122:	d10a      	bne.n	2f13a <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   2f124:	497d      	ldr	r1, [pc, #500]	; (2f31c <_http_client_request+0x328>)
   2f126:	2334      	movs	r3, #52	; 0x34
   2f128:	2218      	movs	r2, #24
   2f12a:	4694      	mov	ip, r2
   2f12c:	44bc      	add	ip, r7
   2f12e:	4463      	add	r3, ip
   2f130:	2207      	movs	r2, #7
   2f132:	0018      	movs	r0, r3
   2f134:	4b77      	ldr	r3, [pc, #476]	; (2f314 <_http_client_request+0x320>)
   2f136:	4798      	blx	r3
   2f138:	e02e      	b.n	2f198 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   2f13a:	69fb      	ldr	r3, [r7, #28]
   2f13c:	22c8      	movs	r2, #200	; 0xc8
   2f13e:	5c9b      	ldrb	r3, [r3, r2]
   2f140:	2b04      	cmp	r3, #4
   2f142:	d10a      	bne.n	2f15a <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   2f144:	4976      	ldr	r1, [pc, #472]	; (2f320 <_http_client_request+0x32c>)
   2f146:	2334      	movs	r3, #52	; 0x34
   2f148:	2218      	movs	r2, #24
   2f14a:	4694      	mov	ip, r2
   2f14c:	44bc      	add	ip, r7
   2f14e:	4463      	add	r3, ip
   2f150:	2204      	movs	r2, #4
   2f152:	0018      	movs	r0, r3
   2f154:	4b6f      	ldr	r3, [pc, #444]	; (2f314 <_http_client_request+0x320>)
   2f156:	4798      	blx	r3
   2f158:	e01e      	b.n	2f198 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   2f15a:	69fb      	ldr	r3, [r7, #28]
   2f15c:	22c8      	movs	r2, #200	; 0xc8
   2f15e:	5c9b      	ldrb	r3, [r3, r2]
   2f160:	2b05      	cmp	r3, #5
   2f162:	d10a      	bne.n	2f17a <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   2f164:	496f      	ldr	r1, [pc, #444]	; (2f324 <_http_client_request+0x330>)
   2f166:	2334      	movs	r3, #52	; 0x34
   2f168:	2218      	movs	r2, #24
   2f16a:	4694      	mov	ip, r2
   2f16c:	44bc      	add	ip, r7
   2f16e:	4463      	add	r3, ip
   2f170:	2208      	movs	r2, #8
   2f172:	0018      	movs	r0, r3
   2f174:	4b67      	ldr	r3, [pc, #412]	; (2f314 <_http_client_request+0x320>)
   2f176:	4798      	blx	r3
   2f178:	e00e      	b.n	2f198 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   2f17a:	69fb      	ldr	r3, [r7, #28]
   2f17c:	22c8      	movs	r2, #200	; 0xc8
   2f17e:	5c9b      	ldrb	r3, [r3, r2]
   2f180:	2b06      	cmp	r3, #6
   2f182:	d109      	bne.n	2f198 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   2f184:	4968      	ldr	r1, [pc, #416]	; (2f328 <_http_client_request+0x334>)
   2f186:	2334      	movs	r3, #52	; 0x34
   2f188:	2218      	movs	r2, #24
   2f18a:	4694      	mov	ip, r2
   2f18c:	44bc      	add	ip, r7
   2f18e:	4463      	add	r3, ip
   2f190:	2205      	movs	r2, #5
   2f192:	0018      	movs	r0, r3
   2f194:	4b5f      	ldr	r3, [pc, #380]	; (2f314 <_http_client_request+0x320>)
   2f196:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   2f198:	69fb      	ldr	r3, [r7, #28]
   2f19a:	3370      	adds	r3, #112	; 0x70
   2f19c:	001c      	movs	r4, r3
   2f19e:	69fb      	ldr	r3, [r7, #28]
   2f1a0:	3370      	adds	r3, #112	; 0x70
   2f1a2:	0018      	movs	r0, r3
   2f1a4:	4b61      	ldr	r3, [pc, #388]	; (2f32c <_http_client_request+0x338>)
   2f1a6:	4798      	blx	r3
   2f1a8:	0002      	movs	r2, r0
   2f1aa:	2334      	movs	r3, #52	; 0x34
   2f1ac:	2118      	movs	r1, #24
   2f1ae:	468c      	mov	ip, r1
   2f1b0:	44bc      	add	ip, r7
   2f1b2:	4463      	add	r3, ip
   2f1b4:	0021      	movs	r1, r4
   2f1b6:	0018      	movs	r0, r3
   2f1b8:	4b56      	ldr	r3, [pc, #344]	; (2f314 <_http_client_request+0x320>)
   2f1ba:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   2f1bc:	495c      	ldr	r1, [pc, #368]	; (2f330 <_http_client_request+0x33c>)
   2f1be:	2334      	movs	r3, #52	; 0x34
   2f1c0:	2218      	movs	r2, #24
   2f1c2:	4694      	mov	ip, r2
   2f1c4:	44bc      	add	ip, r7
   2f1c6:	4463      	add	r3, ip
   2f1c8:	220b      	movs	r2, #11
   2f1ca:	0018      	movs	r0, r3
   2f1cc:	4b51      	ldr	r3, [pc, #324]	; (2f314 <_http_client_request+0x320>)
   2f1ce:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   2f1d0:	4958      	ldr	r1, [pc, #352]	; (2f334 <_http_client_request+0x340>)
   2f1d2:	2334      	movs	r3, #52	; 0x34
   2f1d4:	2218      	movs	r2, #24
   2f1d6:	4694      	mov	ip, r2
   2f1d8:	44bc      	add	ip, r7
   2f1da:	4463      	add	r3, ip
   2f1dc:	220c      	movs	r2, #12
   2f1de:	0018      	movs	r0, r3
   2f1e0:	4b4c      	ldr	r3, [pc, #304]	; (2f314 <_http_client_request+0x320>)
   2f1e2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   2f1e4:	69fb      	ldr	r3, [r7, #28]
   2f1e6:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   2f1e8:	69fb      	ldr	r3, [r7, #28]
   2f1ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   2f1ec:	0018      	movs	r0, r3
   2f1ee:	4b4f      	ldr	r3, [pc, #316]	; (2f32c <_http_client_request+0x338>)
   2f1f0:	4798      	blx	r3
   2f1f2:	0002      	movs	r2, r0
   2f1f4:	2334      	movs	r3, #52	; 0x34
   2f1f6:	2118      	movs	r1, #24
   2f1f8:	468c      	mov	ip, r1
   2f1fa:	44bc      	add	ip, r7
   2f1fc:	4463      	add	r3, ip
   2f1fe:	0021      	movs	r1, r4
   2f200:	0018      	movs	r0, r3
   2f202:	4b44      	ldr	r3, [pc, #272]	; (2f314 <_http_client_request+0x320>)
   2f204:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2f206:	494c      	ldr	r1, [pc, #304]	; (2f338 <_http_client_request+0x344>)
   2f208:	2334      	movs	r3, #52	; 0x34
   2f20a:	2218      	movs	r2, #24
   2f20c:	4694      	mov	ip, r2
   2f20e:	44bc      	add	ip, r7
   2f210:	4463      	add	r3, ip
   2f212:	2202      	movs	r2, #2
   2f214:	0018      	movs	r0, r3
   2f216:	4b3f      	ldr	r3, [pc, #252]	; (2f314 <_http_client_request+0x320>)
   2f218:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   2f21a:	4948      	ldr	r1, [pc, #288]	; (2f33c <_http_client_request+0x348>)
   2f21c:	2334      	movs	r3, #52	; 0x34
   2f21e:	2218      	movs	r2, #24
   2f220:	4694      	mov	ip, r2
   2f222:	44bc      	add	ip, r7
   2f224:	4463      	add	r3, ip
   2f226:	2206      	movs	r2, #6
   2f228:	0018      	movs	r0, r3
   2f22a:	4b3a      	ldr	r3, [pc, #232]	; (2f314 <_http_client_request+0x320>)
   2f22c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   2f22e:	69fb      	ldr	r3, [r7, #28]
   2f230:	1c5c      	adds	r4, r3, #1
   2f232:	69fb      	ldr	r3, [r7, #28]
   2f234:	3301      	adds	r3, #1
   2f236:	0018      	movs	r0, r3
   2f238:	4b3c      	ldr	r3, [pc, #240]	; (2f32c <_http_client_request+0x338>)
   2f23a:	4798      	blx	r3
   2f23c:	0002      	movs	r2, r0
   2f23e:	2334      	movs	r3, #52	; 0x34
   2f240:	2118      	movs	r1, #24
   2f242:	468c      	mov	ip, r1
   2f244:	44bc      	add	ip, r7
   2f246:	4463      	add	r3, ip
   2f248:	0021      	movs	r1, r4
   2f24a:	0018      	movs	r0, r3
   2f24c:	4b31      	ldr	r3, [pc, #196]	; (2f314 <_http_client_request+0x320>)
   2f24e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2f250:	4939      	ldr	r1, [pc, #228]	; (2f338 <_http_client_request+0x344>)
   2f252:	2334      	movs	r3, #52	; 0x34
   2f254:	2218      	movs	r2, #24
   2f256:	4694      	mov	ip, r2
   2f258:	44bc      	add	ip, r7
   2f25a:	4463      	add	r3, ip
   2f25c:	2202      	movs	r2, #2
   2f25e:	0018      	movs	r0, r3
   2f260:	4b2c      	ldr	r3, [pc, #176]	; (2f314 <_http_client_request+0x320>)
   2f262:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   2f264:	4936      	ldr	r1, [pc, #216]	; (2f340 <_http_client_request+0x34c>)
   2f266:	2334      	movs	r3, #52	; 0x34
   2f268:	2218      	movs	r2, #24
   2f26a:	4694      	mov	ip, r2
   2f26c:	44bc      	add	ip, r7
   2f26e:	4463      	add	r3, ip
   2f270:	2218      	movs	r2, #24
   2f272:	0018      	movs	r0, r3
   2f274:	4b27      	ldr	r3, [pc, #156]	; (2f314 <_http_client_request+0x320>)
   2f276:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   2f278:	4932      	ldr	r1, [pc, #200]	; (2f344 <_http_client_request+0x350>)
   2f27a:	2334      	movs	r3, #52	; 0x34
   2f27c:	2218      	movs	r2, #24
   2f27e:	4694      	mov	ip, r2
   2f280:	44bc      	add	ip, r7
   2f282:	4463      	add	r3, ip
   2f284:	2213      	movs	r2, #19
   2f286:	0018      	movs	r0, r3
   2f288:	4b22      	ldr	r3, [pc, #136]	; (2f314 <_http_client_request+0x320>)
   2f28a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   2f28c:	492e      	ldr	r1, [pc, #184]	; (2f348 <_http_client_request+0x354>)
   2f28e:	2334      	movs	r3, #52	; 0x34
   2f290:	2218      	movs	r2, #24
   2f292:	4694      	mov	ip, r2
   2f294:	44bc      	add	ip, r7
   2f296:	4463      	add	r3, ip
   2f298:	2217      	movs	r2, #23
   2f29a:	0018      	movs	r0, r3
   2f29c:	4b1d      	ldr	r3, [pc, #116]	; (2f314 <_http_client_request+0x320>)
   2f29e:	4798      	blx	r3
		if (entity->read != NULL) {
   2f2a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f2a2:	68db      	ldr	r3, [r3, #12]
   2f2a4:	2b00      	cmp	r3, #0
   2f2a6:	d100      	bne.n	2f2aa <_http_client_request+0x2b6>
   2f2a8:	e088      	b.n	2f3bc <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   2f2aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f2ac:	781b      	ldrb	r3, [r3, #0]
   2f2ae:	2b00      	cmp	r3, #0
   2f2b0:	d00f      	beq.n	2f2d2 <_http_client_request+0x2de>
				module->req.content_length = -1;
   2f2b2:	69fb      	ldr	r3, [r7, #28]
   2f2b4:	21cc      	movs	r1, #204	; 0xcc
   2f2b6:	2201      	movs	r2, #1
   2f2b8:	4252      	negs	r2, r2
   2f2ba:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   2f2bc:	4923      	ldr	r1, [pc, #140]	; (2f34c <_http_client_request+0x358>)
   2f2be:	2334      	movs	r3, #52	; 0x34
   2f2c0:	2218      	movs	r2, #24
   2f2c2:	4694      	mov	ip, r2
   2f2c4:	44bc      	add	ip, r7
   2f2c6:	4463      	add	r3, ip
   2f2c8:	221c      	movs	r2, #28
   2f2ca:	0018      	movs	r0, r3
   2f2cc:	4b11      	ldr	r3, [pc, #68]	; (2f314 <_http_client_request+0x320>)
   2f2ce:	4798      	blx	r3
   2f2d0:	e074      	b.n	2f3bc <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   2f2d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f2d4:	689b      	ldr	r3, [r3, #8]
   2f2d6:	2b00      	cmp	r3, #0
   2f2d8:	d070      	beq.n	2f3bc <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   2f2da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f2dc:	689a      	ldr	r2, [r3, #8]
   2f2de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f2e0:	695b      	ldr	r3, [r3, #20]
   2f2e2:	0018      	movs	r0, r3
   2f2e4:	4790      	blx	r2
   2f2e6:	0001      	movs	r1, r0
   2f2e8:	69fb      	ldr	r3, [r7, #28]
   2f2ea:	22cc      	movs	r2, #204	; 0xcc
   2f2ec:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   2f2ee:	69fb      	ldr	r3, [r7, #28]
   2f2f0:	22cc      	movs	r2, #204	; 0xcc
   2f2f2:	589b      	ldr	r3, [r3, r2]
   2f2f4:	2b00      	cmp	r3, #0
   2f2f6:	da2b      	bge.n	2f350 <_http_client_request+0x35c>
					module->req.content_length = 0;
   2f2f8:	69fb      	ldr	r3, [r7, #28]
   2f2fa:	22cc      	movs	r2, #204	; 0xcc
   2f2fc:	2100      	movs	r1, #0
   2f2fe:	5099      	str	r1, [r3, r2]
   2f300:	e05c      	b.n	2f3bc <_http_client_request+0x3c8>
   2f302:	46c0      	nop			; (mov r8, r8)
   2f304:	000371b0 	.word	0x000371b0
   2f308:	0002ef6d 	.word	0x0002ef6d
   2f30c:	0002fed5 	.word	0x0002fed5
   2f310:	000370d4 	.word	0x000370d4
   2f314:	0002ff55 	.word	0x0002ff55
   2f318:	000370dc 	.word	0x000370dc
   2f31c:	000370e4 	.word	0x000370e4
   2f320:	000370ec 	.word	0x000370ec
   2f324:	000370f4 	.word	0x000370f4
   2f328:	00037100 	.word	0x00037100
   2f32c:	0003255b 	.word	0x0003255b
   2f330:	00037108 	.word	0x00037108
   2f334:	00037114 	.word	0x00037114
   2f338:	00037124 	.word	0x00037124
   2f33c:	00037128 	.word	0x00037128
   2f340:	00037130 	.word	0x00037130
   2f344:	0003714c 	.word	0x0003714c
   2f348:	00037160 	.word	0x00037160
   2f34c:	00037178 	.word	0x00037178
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   2f350:	69fb      	ldr	r3, [r7, #28]
   2f352:	22cc      	movs	r2, #204	; 0xcc
   2f354:	589b      	ldr	r3, [r3, r2]
   2f356:	001a      	movs	r2, r3
   2f358:	49e0      	ldr	r1, [pc, #896]	; (2f6dc <_http_client_request+0x6e8>)
   2f35a:	2328      	movs	r3, #40	; 0x28
   2f35c:	2018      	movs	r0, #24
   2f35e:	4684      	mov	ip, r0
   2f360:	44bc      	add	ip, r7
   2f362:	4463      	add	r3, ip
   2f364:	0018      	movs	r0, r3
   2f366:	4bde      	ldr	r3, [pc, #888]	; (2f6e0 <_http_client_request+0x6ec>)
   2f368:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   2f36a:	49de      	ldr	r1, [pc, #888]	; (2f6e4 <_http_client_request+0x6f0>)
   2f36c:	2334      	movs	r3, #52	; 0x34
   2f36e:	2218      	movs	r2, #24
   2f370:	4694      	mov	ip, r2
   2f372:	44bc      	add	ip, r7
   2f374:	4463      	add	r3, ip
   2f376:	2210      	movs	r2, #16
   2f378:	0018      	movs	r0, r3
   2f37a:	4bdb      	ldr	r3, [pc, #876]	; (2f6e8 <_http_client_request+0x6f4>)
   2f37c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   2f37e:	2328      	movs	r3, #40	; 0x28
   2f380:	2218      	movs	r2, #24
   2f382:	4694      	mov	ip, r2
   2f384:	44bc      	add	ip, r7
   2f386:	4463      	add	r3, ip
   2f388:	0018      	movs	r0, r3
   2f38a:	4bd8      	ldr	r3, [pc, #864]	; (2f6ec <_http_client_request+0x6f8>)
   2f38c:	4798      	blx	r3
   2f38e:	0002      	movs	r2, r0
   2f390:	2328      	movs	r3, #40	; 0x28
   2f392:	2118      	movs	r1, #24
   2f394:	1879      	adds	r1, r7, r1
   2f396:	18c9      	adds	r1, r1, r3
   2f398:	2334      	movs	r3, #52	; 0x34
   2f39a:	2018      	movs	r0, #24
   2f39c:	4684      	mov	ip, r0
   2f39e:	44bc      	add	ip, r7
   2f3a0:	4463      	add	r3, ip
   2f3a2:	0018      	movs	r0, r3
   2f3a4:	4bd0      	ldr	r3, [pc, #832]	; (2f6e8 <_http_client_request+0x6f4>)
   2f3a6:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2f3a8:	49d1      	ldr	r1, [pc, #836]	; (2f6f0 <_http_client_request+0x6fc>)
   2f3aa:	2334      	movs	r3, #52	; 0x34
   2f3ac:	2218      	movs	r2, #24
   2f3ae:	4694      	mov	ip, r2
   2f3b0:	44bc      	add	ip, r7
   2f3b2:	4463      	add	r3, ip
   2f3b4:	2202      	movs	r2, #2
   2f3b6:	0018      	movs	r0, r3
   2f3b8:	4bcb      	ldr	r3, [pc, #812]	; (2f6e8 <_http_client_request+0x6f4>)
   2f3ba:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   2f3bc:	69fb      	ldr	r3, [r7, #28]
   2f3be:	22d4      	movs	r2, #212	; 0xd4
   2f3c0:	589b      	ldr	r3, [r3, r2]
   2f3c2:	2b00      	cmp	r3, #0
   2f3c4:	d012      	beq.n	2f3ec <_http_client_request+0x3f8>
				module->req.ext_header,
   2f3c6:	69fb      	ldr	r3, [r7, #28]
   2f3c8:	22d4      	movs	r2, #212	; 0xd4
   2f3ca:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   2f3cc:	69fb      	ldr	r3, [r7, #28]
   2f3ce:	22d4      	movs	r2, #212	; 0xd4
   2f3d0:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   2f3d2:	0018      	movs	r0, r3
   2f3d4:	4bc5      	ldr	r3, [pc, #788]	; (2f6ec <_http_client_request+0x6f8>)
   2f3d6:	4798      	blx	r3
   2f3d8:	0002      	movs	r2, r0
   2f3da:	2334      	movs	r3, #52	; 0x34
   2f3dc:	2118      	movs	r1, #24
   2f3de:	468c      	mov	ip, r1
   2f3e0:	44bc      	add	ip, r7
   2f3e2:	4463      	add	r3, ip
   2f3e4:	0021      	movs	r1, r4
   2f3e6:	0018      	movs	r0, r3
   2f3e8:	4bbf      	ldr	r3, [pc, #764]	; (2f6e8 <_http_client_request+0x6f4>)
   2f3ea:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2f3ec:	49c0      	ldr	r1, [pc, #768]	; (2f6f0 <_http_client_request+0x6fc>)
   2f3ee:	2334      	movs	r3, #52	; 0x34
   2f3f0:	2218      	movs	r2, #24
   2f3f2:	4694      	mov	ip, r2
   2f3f4:	44bc      	add	ip, r7
   2f3f6:	4463      	add	r3, ip
   2f3f8:	2202      	movs	r2, #2
   2f3fa:	0018      	movs	r0, r3
   2f3fc:	4bba      	ldr	r3, [pc, #744]	; (2f6e8 <_http_client_request+0x6f4>)
   2f3fe:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   2f400:	2334      	movs	r3, #52	; 0x34
   2f402:	2218      	movs	r2, #24
   2f404:	4694      	mov	ip, r2
   2f406:	44bc      	add	ip, r7
   2f408:	4463      	add	r3, ip
   2f40a:	0018      	movs	r0, r3
   2f40c:	4bb9      	ldr	r3, [pc, #740]	; (2f6f4 <_http_client_request+0x700>)
   2f40e:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   2f410:	69fb      	ldr	r3, [r7, #28]
   2f412:	2204      	movs	r2, #4
   2f414:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   2f416:	69fb      	ldr	r3, [r7, #28]
   2f418:	22cc      	movs	r2, #204	; 0xcc
   2f41a:	589b      	ldr	r3, [r3, r2]
   2f41c:	2b00      	cmp	r3, #0
   2f41e:	db00      	blt.n	2f422 <_http_client_request+0x42e>
   2f420:	e0c6      	b.n	2f5b0 <_http_client_request+0x5bc>
   2f422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f424:	68db      	ldr	r3, [r3, #12]
   2f426:	2b00      	cmp	r3, #0
   2f428:	d100      	bne.n	2f42c <_http_client_request+0x438>
   2f42a:	e0c1      	b.n	2f5b0 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   2f42c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f42e:	68dc      	ldr	r4, [r3, #12]
   2f430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f432:	6958      	ldr	r0, [r3, #20]
   2f434:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f436:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   2f438:	69fb      	ldr	r3, [r7, #28]
   2f43a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   2f43c:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   2f43e:	69fb      	ldr	r3, [r7, #28]
   2f440:	22d0      	movs	r2, #208	; 0xd0
   2f442:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   2f444:	002a      	movs	r2, r5
   2f446:	47a0      	blx	r4
   2f448:	0003      	movs	r3, r0
   2f44a:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   2f44c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f44e:	2b00      	cmp	r3, #0
   2f450:	da01      	bge.n	2f456 <_http_client_request+0x462>
				size = 0;
   2f452:	2300      	movs	r3, #0
   2f454:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   2f456:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f458:	220a      	movs	r2, #10
   2f45a:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   2f45c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f45e:	220d      	movs	r2, #13
   2f460:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   2f462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f464:	3305      	adds	r3, #5
   2f466:	6eba      	ldr	r2, [r7, #104]	; 0x68
   2f468:	210d      	movs	r1, #13
   2f46a:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   2f46c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f46e:	3306      	adds	r3, #6
   2f470:	6eba      	ldr	r2, [r7, #104]	; 0x68
   2f472:	210a      	movs	r1, #10
   2f474:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   2f476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f478:	2b00      	cmp	r3, #0
   2f47a:	db14      	blt.n	2f4a6 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   2f47c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f47e:	3302      	adds	r3, #2
   2f480:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   2f482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f484:	4a9c      	ldr	r2, [pc, #624]	; (2f6f8 <_http_client_request+0x704>)
   2f486:	4013      	ands	r3, r2
   2f488:	d504      	bpl.n	2f494 <_http_client_request+0x4a0>
   2f48a:	3b01      	subs	r3, #1
   2f48c:	2210      	movs	r2, #16
   2f48e:	4252      	negs	r2, r2
   2f490:	4313      	orrs	r3, r2
   2f492:	3301      	adds	r3, #1
   2f494:	001a      	movs	r2, r3
   2f496:	2318      	movs	r3, #24
   2f498:	2118      	movs	r1, #24
   2f49a:	468c      	mov	ip, r1
   2f49c:	44bc      	add	ip, r7
   2f49e:	4463      	add	r3, ip
   2f4a0:	5c9a      	ldrb	r2, [r3, r2]
   2f4a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2f4a4:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   2f4a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f4a8:	2b0f      	cmp	r3, #15
   2f4aa:	dd19      	ble.n	2f4e0 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   2f4ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f4ae:	3301      	adds	r3, #1
   2f4b0:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   2f4b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f4b4:	2b00      	cmp	r3, #0
   2f4b6:	da00      	bge.n	2f4ba <_http_client_request+0x4c6>
   2f4b8:	330f      	adds	r3, #15
   2f4ba:	111b      	asrs	r3, r3, #4
   2f4bc:	001a      	movs	r2, r3
   2f4be:	4b8e      	ldr	r3, [pc, #568]	; (2f6f8 <_http_client_request+0x704>)
   2f4c0:	4013      	ands	r3, r2
   2f4c2:	d504      	bpl.n	2f4ce <_http_client_request+0x4da>
   2f4c4:	3b01      	subs	r3, #1
   2f4c6:	2210      	movs	r2, #16
   2f4c8:	4252      	negs	r2, r2
   2f4ca:	4313      	orrs	r3, r2
   2f4cc:	3301      	adds	r3, #1
   2f4ce:	001a      	movs	r2, r3
   2f4d0:	2318      	movs	r3, #24
   2f4d2:	2118      	movs	r1, #24
   2f4d4:	468c      	mov	ip, r1
   2f4d6:	44bc      	add	ip, r7
   2f4d8:	4463      	add	r3, ip
   2f4da:	5c9a      	ldrb	r2, [r3, r2]
   2f4dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2f4de:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   2f4e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f4e2:	2bff      	cmp	r3, #255	; 0xff
   2f4e4:	dd18      	ble.n	2f518 <_http_client_request+0x524>
				ptr = buffer;
   2f4e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f4e8:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   2f4ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f4ec:	2b00      	cmp	r3, #0
   2f4ee:	da00      	bge.n	2f4f2 <_http_client_request+0x4fe>
   2f4f0:	33ff      	adds	r3, #255	; 0xff
   2f4f2:	121b      	asrs	r3, r3, #8
   2f4f4:	001a      	movs	r2, r3
   2f4f6:	4b80      	ldr	r3, [pc, #512]	; (2f6f8 <_http_client_request+0x704>)
   2f4f8:	4013      	ands	r3, r2
   2f4fa:	d504      	bpl.n	2f506 <_http_client_request+0x512>
   2f4fc:	3b01      	subs	r3, #1
   2f4fe:	2210      	movs	r2, #16
   2f500:	4252      	negs	r2, r2
   2f502:	4313      	orrs	r3, r2
   2f504:	3301      	adds	r3, #1
   2f506:	001a      	movs	r2, r3
   2f508:	2318      	movs	r3, #24
   2f50a:	2118      	movs	r1, #24
   2f50c:	468c      	mov	ip, r1
   2f50e:	44bc      	add	ip, r7
   2f510:	4463      	add	r3, ip
   2f512:	5c9a      	ldrb	r2, [r3, r2]
   2f514:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2f516:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   2f518:	69fb      	ldr	r3, [r7, #28]
   2f51a:	2000      	movs	r0, #0
   2f51c:	5618      	ldrsb	r0, [r3, r0]
   2f51e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2f520:	3303      	adds	r3, #3
   2f522:	001a      	movs	r2, r3
   2f524:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f526:	1ad3      	subs	r3, r2, r3
   2f528:	b29a      	uxth	r2, r3
   2f52a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f52c:	b29b      	uxth	r3, r3
   2f52e:	18d3      	adds	r3, r2, r3
   2f530:	b29b      	uxth	r3, r3
   2f532:	3304      	adds	r3, #4
   2f534:	b29a      	uxth	r2, r3
   2f536:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2f538:	2300      	movs	r3, #0
   2f53a:	4c70      	ldr	r4, [pc, #448]	; (2f6fc <_http_client_request+0x708>)
   2f53c:	47a0      	blx	r4
   2f53e:	0003      	movs	r3, r0
   2f540:	663b      	str	r3, [r7, #96]	; 0x60
   2f542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2f544:	2b00      	cmp	r3, #0
   2f546:	da07      	bge.n	2f558 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   2f548:	2305      	movs	r3, #5
   2f54a:	425a      	negs	r2, r3
   2f54c:	69fb      	ldr	r3, [r7, #28]
   2f54e:	0011      	movs	r1, r2
   2f550:	0018      	movs	r0, r3
   2f552:	4b6b      	ldr	r3, [pc, #428]	; (2f700 <_http_client_request+0x70c>)
   2f554:	4798      	blx	r3
				return;
   2f556:	e0e1      	b.n	2f71c <_http_client_request+0x728>
			module->req.sent_length += size;
   2f558:	69fb      	ldr	r3, [r7, #28]
   2f55a:	22d0      	movs	r2, #208	; 0xd0
   2f55c:	589a      	ldr	r2, [r3, r2]
   2f55e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f560:	18d2      	adds	r2, r2, r3
   2f562:	69fb      	ldr	r3, [r7, #28]
   2f564:	21d0      	movs	r1, #208	; 0xd0
   2f566:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   2f568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f56a:	2b00      	cmp	r3, #0
   2f56c:	d000      	beq.n	2f570 <_http_client_request+0x57c>
   2f56e:	e0c9      	b.n	2f704 <_http_client_request+0x710>
				if (module->req.entity.close) {
   2f570:	69fb      	ldr	r3, [r7, #28]
   2f572:	22c0      	movs	r2, #192	; 0xc0
   2f574:	589b      	ldr	r3, [r3, r2]
   2f576:	2b00      	cmp	r3, #0
   2f578:	d007      	beq.n	2f58a <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   2f57a:	69fb      	ldr	r3, [r7, #28]
   2f57c:	22c0      	movs	r2, #192	; 0xc0
   2f57e:	589b      	ldr	r3, [r3, r2]
   2f580:	69fa      	ldr	r2, [r7, #28]
   2f582:	21c4      	movs	r1, #196	; 0xc4
   2f584:	5852      	ldr	r2, [r2, r1]
   2f586:	0010      	movs	r0, r2
   2f588:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   2f58a:	69fb      	ldr	r3, [r7, #28]
   2f58c:	2202      	movs	r2, #2
   2f58e:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   2f590:	69fb      	ldr	r3, [r7, #28]
   2f592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f594:	2b00      	cmp	r3, #0
   2f596:	d100      	bne.n	2f59a <_http_client_request+0x5a6>
   2f598:	e0b5      	b.n	2f706 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   2f59a:	69fb      	ldr	r3, [r7, #28]
   2f59c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f59e:	220c      	movs	r2, #12
   2f5a0:	2118      	movs	r1, #24
   2f5a2:	468c      	mov	ip, r1
   2f5a4:	44bc      	add	ip, r7
   2f5a6:	4462      	add	r2, ip
   2f5a8:	69f8      	ldr	r0, [r7, #28]
   2f5aa:	2101      	movs	r1, #1
   2f5ac:	4798      	blx	r3
				break;
   2f5ae:	e0aa      	b.n	2f706 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   2f5b0:	69fb      	ldr	r3, [r7, #28]
   2f5b2:	22cc      	movs	r2, #204	; 0xcc
   2f5b4:	589b      	ldr	r3, [r3, r2]
   2f5b6:	2b00      	cmp	r3, #0
   2f5b8:	dc00      	bgt.n	2f5bc <_http_client_request+0x5c8>
   2f5ba:	e07c      	b.n	2f6b6 <_http_client_request+0x6c2>
   2f5bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f5be:	68db      	ldr	r3, [r3, #12]
   2f5c0:	2b00      	cmp	r3, #0
   2f5c2:	d100      	bne.n	2f5c6 <_http_client_request+0x5d2>
   2f5c4:	e077      	b.n	2f6b6 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   2f5c6:	69fb      	ldr	r3, [r7, #28]
   2f5c8:	22d0      	movs	r2, #208	; 0xd0
   2f5ca:	589a      	ldr	r2, [r3, r2]
   2f5cc:	69fb      	ldr	r3, [r7, #28]
   2f5ce:	21cc      	movs	r1, #204	; 0xcc
   2f5d0:	585b      	ldr	r3, [r3, r1]
   2f5d2:	429a      	cmp	r2, r3
   2f5d4:	db1f      	blt.n	2f616 <_http_client_request+0x622>
				if (module->req.entity.close) {
   2f5d6:	69fb      	ldr	r3, [r7, #28]
   2f5d8:	22c0      	movs	r2, #192	; 0xc0
   2f5da:	589b      	ldr	r3, [r3, r2]
   2f5dc:	2b00      	cmp	r3, #0
   2f5de:	d007      	beq.n	2f5f0 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   2f5e0:	69fb      	ldr	r3, [r7, #28]
   2f5e2:	22c0      	movs	r2, #192	; 0xc0
   2f5e4:	589b      	ldr	r3, [r3, r2]
   2f5e6:	69fa      	ldr	r2, [r7, #28]
   2f5e8:	21c4      	movs	r1, #196	; 0xc4
   2f5ea:	5852      	ldr	r2, [r2, r1]
   2f5ec:	0010      	movs	r0, r2
   2f5ee:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   2f5f0:	69fb      	ldr	r3, [r7, #28]
   2f5f2:	2202      	movs	r2, #2
   2f5f4:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   2f5f6:	69fb      	ldr	r3, [r7, #28]
   2f5f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f5fa:	2b00      	cmp	r3, #0
   2f5fc:	d100      	bne.n	2f600 <_http_client_request+0x60c>
   2f5fe:	e084      	b.n	2f70a <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   2f600:	69fb      	ldr	r3, [r7, #28]
   2f602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f604:	220c      	movs	r2, #12
   2f606:	2118      	movs	r1, #24
   2f608:	468c      	mov	ip, r1
   2f60a:	44bc      	add	ip, r7
   2f60c:	4462      	add	r2, ip
   2f60e:	69f8      	ldr	r0, [r7, #28]
   2f610:	2101      	movs	r1, #1
   2f612:	4798      	blx	r3
				break;
   2f614:	e079      	b.n	2f70a <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   2f616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f618:	68dc      	ldr	r4, [r3, #12]
   2f61a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f61c:	6958      	ldr	r0, [r3, #20]
   2f61e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   2f620:	69fb      	ldr	r3, [r7, #28]
   2f622:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   2f624:	69fb      	ldr	r3, [r7, #28]
   2f626:	22d0      	movs	r2, #208	; 0xd0
   2f628:	589b      	ldr	r3, [r3, r2]
   2f62a:	002a      	movs	r2, r5
   2f62c:	47a0      	blx	r4
   2f62e:	0003      	movs	r3, r0
   2f630:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   2f632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f634:	2b00      	cmp	r3, #0
   2f636:	da0d      	bge.n	2f654 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   2f638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f63a:	2b00      	cmp	r3, #0
   2f63c:	d102      	bne.n	2f644 <_http_client_request+0x650>
   2f63e:	234d      	movs	r3, #77	; 0x4d
   2f640:	425b      	negs	r3, r3
   2f642:	e001      	b.n	2f648 <_http_client_request+0x654>
   2f644:	2305      	movs	r3, #5
   2f646:	425b      	negs	r3, r3
   2f648:	69fa      	ldr	r2, [r7, #28]
   2f64a:	0019      	movs	r1, r3
   2f64c:	0010      	movs	r0, r2
   2f64e:	4b2c      	ldr	r3, [pc, #176]	; (2f700 <_http_client_request+0x70c>)
   2f650:	4798      	blx	r3
			if (size < 0) {
   2f652:	e057      	b.n	2f704 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   2f654:	69fb      	ldr	r3, [r7, #28]
   2f656:	22cc      	movs	r2, #204	; 0xcc
   2f658:	589a      	ldr	r2, [r3, r2]
   2f65a:	69fb      	ldr	r3, [r7, #28]
   2f65c:	21d0      	movs	r1, #208	; 0xd0
   2f65e:	585b      	ldr	r3, [r3, r1]
   2f660:	1ad2      	subs	r2, r2, r3
   2f662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f664:	429a      	cmp	r2, r3
   2f666:	da07      	bge.n	2f678 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   2f668:	69fb      	ldr	r3, [r7, #28]
   2f66a:	22cc      	movs	r2, #204	; 0xcc
   2f66c:	589a      	ldr	r2, [r3, r2]
   2f66e:	69fb      	ldr	r3, [r7, #28]
   2f670:	21d0      	movs	r1, #208	; 0xd0
   2f672:	585b      	ldr	r3, [r3, r1]
   2f674:	1ad3      	subs	r3, r2, r3
   2f676:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   2f678:	69fb      	ldr	r3, [r7, #28]
   2f67a:	2000      	movs	r0, #0
   2f67c:	5618      	ldrsb	r0, [r3, r0]
   2f67e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   2f680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f682:	b29a      	uxth	r2, r3
   2f684:	2300      	movs	r3, #0
   2f686:	4c1d      	ldr	r4, [pc, #116]	; (2f6fc <_http_client_request+0x708>)
   2f688:	47a0      	blx	r4
   2f68a:	0003      	movs	r3, r0
   2f68c:	663b      	str	r3, [r7, #96]	; 0x60
   2f68e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2f690:	2b00      	cmp	r3, #0
   2f692:	da07      	bge.n	2f6a4 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   2f694:	2305      	movs	r3, #5
   2f696:	425a      	negs	r2, r3
   2f698:	69fb      	ldr	r3, [r7, #28]
   2f69a:	0011      	movs	r1, r2
   2f69c:	0018      	movs	r0, r3
   2f69e:	4b18      	ldr	r3, [pc, #96]	; (2f700 <_http_client_request+0x70c>)
   2f6a0:	4798      	blx	r3
					return;
   2f6a2:	e03b      	b.n	2f71c <_http_client_request+0x728>
				module->req.sent_length += size;
   2f6a4:	69fb      	ldr	r3, [r7, #28]
   2f6a6:	22d0      	movs	r2, #208	; 0xd0
   2f6a8:	589a      	ldr	r2, [r3, r2]
   2f6aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f6ac:	18d2      	adds	r2, r2, r3
   2f6ae:	69fb      	ldr	r3, [r7, #28]
   2f6b0:	21d0      	movs	r1, #208	; 0xd0
   2f6b2:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   2f6b4:	e026      	b.n	2f704 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   2f6b6:	69fb      	ldr	r3, [r7, #28]
   2f6b8:	2202      	movs	r2, #2
   2f6ba:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   2f6bc:	69fb      	ldr	r3, [r7, #28]
   2f6be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f6c0:	2b00      	cmp	r3, #0
   2f6c2:	d024      	beq.n	2f70e <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   2f6c4:	69fb      	ldr	r3, [r7, #28]
   2f6c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f6c8:	220c      	movs	r2, #12
   2f6ca:	2118      	movs	r1, #24
   2f6cc:	468c      	mov	ip, r1
   2f6ce:	44bc      	add	ip, r7
   2f6d0:	4462      	add	r2, ip
   2f6d2:	69f8      	ldr	r0, [r7, #28]
   2f6d4:	2101      	movs	r1, #1
   2f6d6:	4798      	blx	r3
			break;
   2f6d8:	e019      	b.n	2f70e <_http_client_request+0x71a>
   2f6da:	46c0      	nop			; (mov r8, r8)
   2f6dc:	00037198 	.word	0x00037198
   2f6e0:	00032461 	.word	0x00032461
   2f6e4:	0003719c 	.word	0x0003719c
   2f6e8:	0002ff55 	.word	0x0002ff55
   2f6ec:	0003255b 	.word	0x0003255b
   2f6f0:	00037124 	.word	0x00037124
   2f6f4:	0002ff91 	.word	0x0002ff91
   2f6f8:	8000000f 	.word	0x8000000f
   2f6fc:	000234d9 	.word	0x000234d9
   2f700:	0002eea1 	.word	0x0002eea1
		break;
   2f704:	e004      	b.n	2f710 <_http_client_request+0x71c>
				break;
   2f706:	46c0      	nop			; (mov r8, r8)
   2f708:	e002      	b.n	2f710 <_http_client_request+0x71c>
				break;
   2f70a:	46c0      	nop			; (mov r8, r8)
   2f70c:	e000      	b.n	2f710 <_http_client_request+0x71c>
			break;
   2f70e:	46c0      	nop			; (mov r8, r8)
   2f710:	69bb      	ldr	r3, [r7, #24]
   2f712:	469d      	mov	sp, r3
   2f714:	e004      	b.n	2f720 <_http_client_request+0x72c>
		return;
   2f716:	46c0      	nop			; (mov r8, r8)
   2f718:	e000      	b.n	2f71c <_http_client_request+0x728>
		return;
   2f71a:	46c0      	nop			; (mov r8, r8)
   2f71c:	69bb      	ldr	r3, [r7, #24]
   2f71e:	469d      	mov	sp, r3
	}
}
   2f720:	46bd      	mov	sp, r7
   2f722:	b01e      	add	sp, #120	; 0x78
   2f724:	bc04      	pop	{r2}
   2f726:	4690      	mov	r8, r2
   2f728:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f72a:	46c0      	nop			; (mov r8, r8)

0002f72c <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   2f72c:	b590      	push	{r4, r7, lr}
   2f72e:	b083      	sub	sp, #12
   2f730:	af00      	add	r7, sp, #0
   2f732:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   2f734:	687b      	ldr	r3, [r7, #4]
   2f736:	2b00      	cmp	r3, #0
   2f738:	d021      	beq.n	2f77e <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   2f73a:	687b      	ldr	r3, [r7, #4]
   2f73c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2f73e:	687b      	ldr	r3, [r7, #4]
   2f740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2f742:	429a      	cmp	r2, r3
   2f744:	d307      	bcc.n	2f756 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   2f746:	238b      	movs	r3, #139	; 0x8b
   2f748:	425a      	negs	r2, r3
   2f74a:	687b      	ldr	r3, [r7, #4]
   2f74c:	0011      	movs	r1, r2
   2f74e:	0018      	movs	r0, r3
   2f750:	4b0d      	ldr	r3, [pc, #52]	; (2f788 <_http_client_recv_packet+0x5c>)
   2f752:	4798      	blx	r3
		return;
   2f754:	e014      	b.n	2f780 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   2f756:	687b      	ldr	r3, [r7, #4]
   2f758:	2000      	movs	r0, #0
   2f75a:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   2f75c:	687b      	ldr	r3, [r7, #4]
   2f75e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   2f760:	687b      	ldr	r3, [r7, #4]
   2f762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2f764:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   2f766:	687b      	ldr	r3, [r7, #4]
   2f768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   2f76a:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   2f76c:	687b      	ldr	r3, [r7, #4]
   2f76e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   2f770:	b29b      	uxth	r3, r3
   2f772:	1ad3      	subs	r3, r2, r3
   2f774:	b29a      	uxth	r2, r3
   2f776:	2300      	movs	r3, #0
   2f778:	4c04      	ldr	r4, [pc, #16]	; (2f78c <_http_client_recv_packet+0x60>)
   2f77a:	47a0      	blx	r4
   2f77c:	e000      	b.n	2f780 <_http_client_recv_packet+0x54>
		return;
   2f77e:	46c0      	nop			; (mov r8, r8)
}
   2f780:	46bd      	mov	sp, r7
   2f782:	b003      	add	sp, #12
   2f784:	bd90      	pop	{r4, r7, pc}
   2f786:	46c0      	nop			; (mov r8, r8)
   2f788:	0002eea1 	.word	0x0002eea1
   2f78c:	0002363d 	.word	0x0002363d

0002f790 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   2f790:	b580      	push	{r7, lr}
   2f792:	b082      	sub	sp, #8
   2f794:	af00      	add	r7, sp, #0
   2f796:	6078      	str	r0, [r7, #4]
   2f798:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   2f79a:	687b      	ldr	r3, [r7, #4]
   2f79c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2f79e:	683b      	ldr	r3, [r7, #0]
   2f7a0:	18d2      	adds	r2, r2, r3
   2f7a2:	687b      	ldr	r3, [r7, #4]
   2f7a4:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   2f7a6:	687b      	ldr	r3, [r7, #4]
   2f7a8:	2258      	movs	r2, #88	; 0x58
   2f7aa:	5a9b      	ldrh	r3, [r3, r2]
   2f7ac:	2b00      	cmp	r3, #0
   2f7ae:	d007      	beq.n	2f7c0 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   2f7b0:	687b      	ldr	r3, [r7, #4]
   2f7b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2f7b4:	687b      	ldr	r3, [r7, #4]
   2f7b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f7b8:	0019      	movs	r1, r3
   2f7ba:	0010      	movs	r0, r2
   2f7bc:	4b06      	ldr	r3, [pc, #24]	; (2f7d8 <_http_client_recved_packet+0x48>)
   2f7be:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   2f7c0:	46c0      	nop			; (mov r8, r8)
   2f7c2:	687b      	ldr	r3, [r7, #4]
   2f7c4:	0018      	movs	r0, r3
   2f7c6:	4b05      	ldr	r3, [pc, #20]	; (2f7dc <_http_client_recved_packet+0x4c>)
   2f7c8:	4798      	blx	r3
   2f7ca:	1e03      	subs	r3, r0, #0
   2f7cc:	d1f9      	bne.n	2f7c2 <_http_client_recved_packet+0x32>
}
   2f7ce:	46c0      	nop			; (mov r8, r8)
   2f7d0:	46bd      	mov	sp, r7
   2f7d2:	b002      	add	sp, #8
   2f7d4:	bd80      	pop	{r7, pc}
   2f7d6:	46c0      	nop			; (mov r8, r8)
   2f7d8:	0003024d 	.word	0x0003024d
   2f7dc:	0002f7e1 	.word	0x0002f7e1

0002f7e0 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   2f7e0:	b580      	push	{r7, lr}
   2f7e2:	b082      	sub	sp, #8
   2f7e4:	af00      	add	r7, sp, #0
   2f7e6:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   2f7e8:	687b      	ldr	r3, [r7, #4]
   2f7ea:	22d8      	movs	r2, #216	; 0xd8
   2f7ec:	589b      	ldr	r3, [r3, r2]
   2f7ee:	2b00      	cmp	r3, #0
   2f7f0:	d002      	beq.n	2f7f8 <_http_client_handle_response+0x18>
   2f7f2:	2b01      	cmp	r3, #1
   2f7f4:	d006      	beq.n	2f804 <_http_client_handle_response+0x24>
   2f7f6:	e00b      	b.n	2f810 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   2f7f8:	687b      	ldr	r3, [r7, #4]
   2f7fa:	0018      	movs	r0, r3
   2f7fc:	4b07      	ldr	r3, [pc, #28]	; (2f81c <_http_client_handle_response+0x3c>)
   2f7fe:	4798      	blx	r3
   2f800:	0003      	movs	r3, r0
   2f802:	e006      	b.n	2f812 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   2f804:	687b      	ldr	r3, [r7, #4]
   2f806:	0018      	movs	r0, r3
   2f808:	4b05      	ldr	r3, [pc, #20]	; (2f820 <_http_client_handle_response+0x40>)
   2f80a:	4798      	blx	r3
   2f80c:	0003      	movs	r3, r0
   2f80e:	e000      	b.n	2f812 <_http_client_handle_response+0x32>
	}
	return 0;
   2f810:	2300      	movs	r3, #0
}
   2f812:	0018      	movs	r0, r3
   2f814:	46bd      	mov	sp, r7
   2f816:	b002      	add	sp, #8
   2f818:	bd80      	pop	{r7, pc}
   2f81a:	46c0      	nop			; (mov r8, r8)
   2f81c:	0002f825 	.word	0x0002f825
   2f820:	0002fcdd 	.word	0x0002fcdd

0002f824 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   2f824:	b590      	push	{r4, r7, lr}
   2f826:	b08b      	sub	sp, #44	; 0x2c
   2f828:	af00      	add	r7, sp, #0
   2f82a:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   2f82c:	687b      	ldr	r3, [r7, #4]
   2f82e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2f830:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   2f832:	4b9a      	ldr	r3, [pc, #616]	; (2fa9c <_http_client_handle_header+0x278>)
   2f834:	681a      	ldr	r2, [r3, #0]
   2f836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f838:	0011      	movs	r1, r2
   2f83a:	0018      	movs	r0, r3
   2f83c:	4b98      	ldr	r3, [pc, #608]	; (2faa0 <_http_client_handle_header+0x27c>)
   2f83e:	4798      	blx	r3
   2f840:	0003      	movs	r3, r0
   2f842:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   2f844:	69bb      	ldr	r3, [r7, #24]
   2f846:	2b00      	cmp	r3, #0
   2f848:	d007      	beq.n	2f85a <_http_client_handle_header+0x36>
   2f84a:	687b      	ldr	r3, [r7, #4]
   2f84c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   2f84e:	687b      	ldr	r3, [r7, #4]
   2f850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2f852:	18d2      	adds	r2, r2, r3
   2f854:	69bb      	ldr	r3, [r7, #24]
   2f856:	429a      	cmp	r2, r3
   2f858:	d807      	bhi.n	2f86a <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   2f85a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f85c:	687b      	ldr	r3, [r7, #4]
   2f85e:	0011      	movs	r1, r2
   2f860:	0018      	movs	r0, r3
   2f862:	4b90      	ldr	r3, [pc, #576]	; (2faa4 <_http_client_handle_header+0x280>)
   2f864:	4798      	blx	r3
			return 0;
   2f866:	2300      	movs	r3, #0
   2f868:	e114      	b.n	2fa94 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   2f86a:	4b8c      	ldr	r3, [pc, #560]	; (2fa9c <_http_client_handle_header+0x278>)
   2f86c:	681c      	ldr	r4, [r3, #0]
   2f86e:	4b8b      	ldr	r3, [pc, #556]	; (2fa9c <_http_client_handle_header+0x278>)
   2f870:	681b      	ldr	r3, [r3, #0]
   2f872:	0018      	movs	r0, r3
   2f874:	4b8c      	ldr	r3, [pc, #560]	; (2faa8 <_http_client_handle_header+0x284>)
   2f876:	4798      	blx	r3
   2f878:	0002      	movs	r2, r0
   2f87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f87c:	0021      	movs	r1, r4
   2f87e:	0018      	movs	r0, r3
   2f880:	4b8a      	ldr	r3, [pc, #552]	; (2faac <_http_client_handle_header+0x288>)
   2f882:	4798      	blx	r3
   2f884:	1e03      	subs	r3, r0, #0
   2f886:	d15d      	bne.n	2f944 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   2f888:	4b84      	ldr	r3, [pc, #528]	; (2fa9c <_http_client_handle_header+0x278>)
   2f88a:	681b      	ldr	r3, [r3, #0]
   2f88c:	0018      	movs	r0, r3
   2f88e:	4b86      	ldr	r3, [pc, #536]	; (2faa8 <_http_client_handle_header+0x284>)
   2f890:	4798      	blx	r3
   2f892:	0002      	movs	r2, r0
   2f894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f896:	189a      	adds	r2, r3, r2
   2f898:	687b      	ldr	r3, [r7, #4]
   2f89a:	0011      	movs	r1, r2
   2f89c:	0018      	movs	r0, r3
   2f89e:	4b81      	ldr	r3, [pc, #516]	; (2faa4 <_http_client_handle_header+0x280>)
   2f8a0:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   2f8a2:	687b      	ldr	r3, [r7, #4]
   2f8a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f8a6:	2b00      	cmp	r3, #0
   2f8a8:	d046      	beq.n	2f938 <_http_client_handle_header+0x114>
   2f8aa:	687b      	ldr	r3, [r7, #4]
   2f8ac:	22e4      	movs	r2, #228	; 0xe4
   2f8ae:	5a9b      	ldrh	r3, [r3, r2]
   2f8b0:	2b00      	cmp	r3, #0
   2f8b2:	d041      	beq.n	2f938 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   2f8b4:	687b      	ldr	r3, [r7, #4]
   2f8b6:	22dc      	movs	r2, #220	; 0xdc
   2f8b8:	589b      	ldr	r3, [r3, r2]
   2f8ba:	2b00      	cmp	r3, #0
   2f8bc:	da19      	bge.n	2f8f2 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   2f8be:	687b      	ldr	r3, [r7, #4]
   2f8c0:	22e4      	movs	r2, #228	; 0xe4
   2f8c2:	5a9a      	ldrh	r2, [r3, r2]
   2f8c4:	230c      	movs	r3, #12
   2f8c6:	18fb      	adds	r3, r7, r3
   2f8c8:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   2f8ca:	230c      	movs	r3, #12
   2f8cc:	18fb      	adds	r3, r7, r3
   2f8ce:	2201      	movs	r2, #1
   2f8d0:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   2f8d2:	687b      	ldr	r3, [r7, #4]
   2f8d4:	22e0      	movs	r2, #224	; 0xe0
   2f8d6:	2100      	movs	r1, #0
   2f8d8:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   2f8da:	230c      	movs	r3, #12
   2f8dc:	18fb      	adds	r3, r7, r3
   2f8de:	2200      	movs	r2, #0
   2f8e0:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   2f8e2:	687b      	ldr	r3, [r7, #4]
   2f8e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f8e6:	220c      	movs	r2, #12
   2f8e8:	18ba      	adds	r2, r7, r2
   2f8ea:	6878      	ldr	r0, [r7, #4]
   2f8ec:	2102      	movs	r1, #2
   2f8ee:	4798      	blx	r3
   2f8f0:	e022      	b.n	2f938 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   2f8f2:	687b      	ldr	r3, [r7, #4]
   2f8f4:	22dc      	movs	r2, #220	; 0xdc
   2f8f6:	589a      	ldr	r2, [r3, r2]
   2f8f8:	687b      	ldr	r3, [r7, #4]
   2f8fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2f8fc:	429a      	cmp	r2, r3
   2f8fe:	dd1b      	ble.n	2f938 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   2f900:	687b      	ldr	r3, [r7, #4]
   2f902:	22e4      	movs	r2, #228	; 0xe4
   2f904:	5a9a      	ldrh	r2, [r3, r2]
   2f906:	230c      	movs	r3, #12
   2f908:	18fb      	adds	r3, r7, r3
   2f90a:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   2f90c:	687b      	ldr	r3, [r7, #4]
   2f90e:	22dc      	movs	r2, #220	; 0xdc
   2f910:	589b      	ldr	r3, [r3, r2]
   2f912:	001a      	movs	r2, r3
   2f914:	230c      	movs	r3, #12
   2f916:	18fb      	adds	r3, r7, r3
   2f918:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   2f91a:	230c      	movs	r3, #12
   2f91c:	18fb      	adds	r3, r7, r3
   2f91e:	2200      	movs	r2, #0
   2f920:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   2f922:	687b      	ldr	r3, [r7, #4]
   2f924:	22e0      	movs	r2, #224	; 0xe0
   2f926:	2100      	movs	r1, #0
   2f928:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   2f92a:	687b      	ldr	r3, [r7, #4]
   2f92c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f92e:	220c      	movs	r2, #12
   2f930:	18ba      	adds	r2, r7, r2
   2f932:	6878      	ldr	r0, [r7, #4]
   2f934:	2102      	movs	r1, #2
   2f936:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   2f938:	687b      	ldr	r3, [r7, #4]
   2f93a:	22d8      	movs	r2, #216	; 0xd8
   2f93c:	2101      	movs	r1, #1
   2f93e:	5099      	str	r1, [r3, r2]
			return 1;
   2f940:	2301      	movs	r3, #1
   2f942:	e0a7      	b.n	2fa94 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   2f944:	495a      	ldr	r1, [pc, #360]	; (2fab0 <_http_client_handle_header+0x28c>)
   2f946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f948:	2210      	movs	r2, #16
   2f94a:	0018      	movs	r0, r3
   2f94c:	4b57      	ldr	r3, [pc, #348]	; (2faac <_http_client_handle_header+0x288>)
   2f94e:	4798      	blx	r3
   2f950:	1e03      	subs	r3, r0, #0
   2f952:	d109      	bne.n	2f968 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   2f954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f956:	3310      	adds	r3, #16
   2f958:	0018      	movs	r0, r3
   2f95a:	4b56      	ldr	r3, [pc, #344]	; (2fab4 <_http_client_handle_header+0x290>)
   2f95c:	4798      	blx	r3
   2f95e:	0001      	movs	r1, r0
   2f960:	687b      	ldr	r3, [r7, #4]
   2f962:	22dc      	movs	r2, #220	; 0xdc
   2f964:	5099      	str	r1, [r3, r2]
   2f966:	e08b      	b.n	2fa80 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   2f968:	4953      	ldr	r1, [pc, #332]	; (2fab8 <_http_client_handle_header+0x294>)
   2f96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f96c:	2213      	movs	r2, #19
   2f96e:	0018      	movs	r0, r3
   2f970:	4b4e      	ldr	r3, [pc, #312]	; (2faac <_http_client_handle_header+0x288>)
   2f972:	4798      	blx	r3
   2f974:	1e03      	subs	r3, r0, #0
   2f976:	d127      	bne.n	2f9c8 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   2f978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f97a:	3313      	adds	r3, #19
   2f97c:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f97e:	e01e      	b.n	2f9be <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   2f980:	6a3b      	ldr	r3, [r7, #32]
   2f982:	781b      	ldrb	r3, [r3, #0]
   2f984:	2b20      	cmp	r3, #32
   2f986:	d103      	bne.n	2f990 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f988:	6a3b      	ldr	r3, [r7, #32]
   2f98a:	3301      	adds	r3, #1
   2f98c:	623b      	str	r3, [r7, #32]
   2f98e:	e016      	b.n	2f9be <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   2f990:	6a3b      	ldr	r3, [r7, #32]
   2f992:	781b      	ldrb	r3, [r3, #0]
   2f994:	2b43      	cmp	r3, #67	; 0x43
   2f996:	d003      	beq.n	2f9a0 <_http_client_handle_header+0x17c>
   2f998:	6a3b      	ldr	r3, [r7, #32]
   2f99a:	781b      	ldrb	r3, [r3, #0]
   2f99c:	2b63      	cmp	r3, #99	; 0x63
   2f99e:	d105      	bne.n	2f9ac <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   2f9a0:	687b      	ldr	r3, [r7, #4]
   2f9a2:	21cc      	movs	r1, #204	; 0xcc
   2f9a4:	2201      	movs	r2, #1
   2f9a6:	4252      	negs	r2, r2
   2f9a8:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   2f9aa:	e069      	b.n	2fa80 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   2f9ac:	2386      	movs	r3, #134	; 0x86
   2f9ae:	425a      	negs	r2, r3
   2f9b0:	687b      	ldr	r3, [r7, #4]
   2f9b2:	0011      	movs	r1, r2
   2f9b4:	0018      	movs	r0, r3
   2f9b6:	4b41      	ldr	r3, [pc, #260]	; (2fabc <_http_client_handle_header+0x298>)
   2f9b8:	4798      	blx	r3
					return 0;
   2f9ba:	2300      	movs	r3, #0
   2f9bc:	e06a      	b.n	2fa94 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f9be:	69ba      	ldr	r2, [r7, #24]
   2f9c0:	6a3b      	ldr	r3, [r7, #32]
   2f9c2:	429a      	cmp	r2, r3
   2f9c4:	d8dc      	bhi.n	2f980 <_http_client_handle_header+0x15c>
   2f9c6:	e05b      	b.n	2fa80 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   2f9c8:	493d      	ldr	r1, [pc, #244]	; (2fac0 <_http_client_handle_header+0x29c>)
   2f9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f9cc:	220c      	movs	r2, #12
   2f9ce:	0018      	movs	r0, r3
   2f9d0:	4b36      	ldr	r3, [pc, #216]	; (2faac <_http_client_handle_header+0x288>)
   2f9d2:	4798      	blx	r3
   2f9d4:	1e03      	subs	r3, r0, #0
   2f9d6:	d126      	bne.n	2fa26 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   2f9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f9da:	330c      	adds	r3, #12
   2f9dc:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f9de:	e01d      	b.n	2fa1c <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   2f9e0:	69fb      	ldr	r3, [r7, #28]
   2f9e2:	781b      	ldrb	r3, [r3, #0]
   2f9e4:	2b20      	cmp	r3, #32
   2f9e6:	d103      	bne.n	2f9f0 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f9e8:	69fb      	ldr	r3, [r7, #28]
   2f9ea:	3301      	adds	r3, #1
   2f9ec:	61fb      	str	r3, [r7, #28]
   2f9ee:	e015      	b.n	2fa1c <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   2f9f0:	69fb      	ldr	r3, [r7, #28]
   2f9f2:	781b      	ldrb	r3, [r3, #0]
   2f9f4:	2b4b      	cmp	r3, #75	; 0x4b
   2f9f6:	d003      	beq.n	2fa00 <_http_client_handle_header+0x1dc>
   2f9f8:	69fb      	ldr	r3, [r7, #28]
   2f9fa:	781b      	ldrb	r3, [r3, #0]
   2f9fc:	2b6b      	cmp	r3, #107	; 0x6b
   2f9fe:	d106      	bne.n	2fa0e <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   2fa00:	687b      	ldr	r3, [r7, #4]
   2fa02:	2241      	movs	r2, #65	; 0x41
   2fa04:	5c99      	ldrb	r1, [r3, r2]
   2fa06:	2002      	movs	r0, #2
   2fa08:	4301      	orrs	r1, r0
   2fa0a:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   2fa0c:	e038      	b.n	2fa80 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   2fa0e:	687b      	ldr	r3, [r7, #4]
   2fa10:	2241      	movs	r2, #65	; 0x41
   2fa12:	5c99      	ldrb	r1, [r3, r2]
   2fa14:	2002      	movs	r0, #2
   2fa16:	4381      	bics	r1, r0
   2fa18:	5499      	strb	r1, [r3, r2]
				break;
   2fa1a:	e031      	b.n	2fa80 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2fa1c:	69ba      	ldr	r2, [r7, #24]
   2fa1e:	69fb      	ldr	r3, [r7, #28]
   2fa20:	429a      	cmp	r2, r3
   2fa22:	d8dd      	bhi.n	2f9e0 <_http_client_handle_header+0x1bc>
   2fa24:	e02c      	b.n	2fa80 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   2fa26:	4927      	ldr	r1, [pc, #156]	; (2fac4 <_http_client_handle_header+0x2a0>)
   2fa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fa2a:	2205      	movs	r2, #5
   2fa2c:	0018      	movs	r0, r3
   2fa2e:	4b1f      	ldr	r3, [pc, #124]	; (2faac <_http_client_handle_header+0x288>)
   2fa30:	4798      	blx	r3
   2fa32:	1e03      	subs	r3, r0, #0
   2fa34:	d124      	bne.n	2fa80 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   2fa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fa38:	3309      	adds	r3, #9
   2fa3a:	0018      	movs	r0, r3
   2fa3c:	4b1d      	ldr	r3, [pc, #116]	; (2fab4 <_http_client_handle_header+0x290>)
   2fa3e:	4798      	blx	r3
   2fa40:	0003      	movs	r3, r0
   2fa42:	b299      	uxth	r1, r3
   2fa44:	687b      	ldr	r3, [r7, #4]
   2fa46:	22e4      	movs	r2, #228	; 0xe4
   2fa48:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   2fa4a:	687b      	ldr	r3, [r7, #4]
   2fa4c:	22dc      	movs	r2, #220	; 0xdc
   2fa4e:	2100      	movs	r1, #0
   2fa50:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   2fa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fa54:	3305      	adds	r3, #5
   2fa56:	781b      	ldrb	r3, [r3, #0]
   2fa58:	2b31      	cmp	r3, #49	; 0x31
   2fa5a:	d804      	bhi.n	2fa66 <_http_client_handle_header+0x242>
   2fa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fa5e:	3307      	adds	r3, #7
   2fa60:	781b      	ldrb	r3, [r3, #0]
   2fa62:	2b30      	cmp	r3, #48	; 0x30
   2fa64:	d906      	bls.n	2fa74 <_http_client_handle_header+0x250>
				module->permanent = 1;
   2fa66:	687b      	ldr	r3, [r7, #4]
   2fa68:	2241      	movs	r2, #65	; 0x41
   2fa6a:	5c99      	ldrb	r1, [r3, r2]
   2fa6c:	2002      	movs	r0, #2
   2fa6e:	4301      	orrs	r1, r0
   2fa70:	5499      	strb	r1, [r3, r2]
   2fa72:	e005      	b.n	2fa80 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   2fa74:	687b      	ldr	r3, [r7, #4]
   2fa76:	2241      	movs	r2, #65	; 0x41
   2fa78:	5c99      	ldrb	r1, [r3, r2]
   2fa7a:	2002      	movs	r0, #2
   2fa7c:	4381      	bics	r1, r0
   2fa7e:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   2fa80:	4b06      	ldr	r3, [pc, #24]	; (2fa9c <_http_client_handle_header+0x278>)
   2fa82:	681b      	ldr	r3, [r3, #0]
   2fa84:	0018      	movs	r0, r3
   2fa86:	4b08      	ldr	r3, [pc, #32]	; (2faa8 <_http_client_handle_header+0x284>)
   2fa88:	4798      	blx	r3
   2fa8a:	0002      	movs	r2, r0
   2fa8c:	69bb      	ldr	r3, [r7, #24]
   2fa8e:	189b      	adds	r3, r3, r2
   2fa90:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   2fa92:	e6ce      	b.n	2f832 <_http_client_handle_header+0xe>
	}
}
   2fa94:	0018      	movs	r0, r3
   2fa96:	46bd      	mov	sp, r7
   2fa98:	b00b      	add	sp, #44	; 0x2c
   2fa9a:	bd90      	pop	{r4, r7, pc}
   2fa9c:	2000010c 	.word	0x2000010c
   2faa0:	000325d9 	.word	0x000325d9
   2faa4:	0002fe89 	.word	0x0002fe89
   2faa8:	0003255b 	.word	0x0003255b
   2faac:	00032569 	.word	0x00032569
   2fab0:	0003719c 	.word	0x0003719c
   2fab4:	000320f1 	.word	0x000320f1
   2fab8:	000371c0 	.word	0x000371c0
   2fabc:	0002eea1 	.word	0x0002eea1
   2fac0:	000371d4 	.word	0x000371d4
   2fac4:	000371e4 	.word	0x000371e4

0002fac8 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   2fac8:	b580      	push	{r7, lr}
   2faca:	b088      	sub	sp, #32
   2facc:	af00      	add	r7, sp, #0
   2face:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   2fad0:	687b      	ldr	r3, [r7, #4]
   2fad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2fad4:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   2fad6:	2300      	movs	r3, #0
   2fad8:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   2fada:	687b      	ldr	r3, [r7, #4]
   2fadc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2fade:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   2fae0:	687b      	ldr	r3, [r7, #4]
   2fae2:	22e0      	movs	r2, #224	; 0xe0
   2fae4:	589b      	ldr	r3, [r3, r2]
   2fae6:	2b00      	cmp	r3, #0
   2fae8:	db71      	blt.n	2fbce <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   2faea:	687b      	ldr	r3, [r7, #4]
   2faec:	22e0      	movs	r2, #224	; 0xe0
   2faee:	589b      	ldr	r3, [r3, r2]
   2faf0:	2b00      	cmp	r3, #0
   2faf2:	d134      	bne.n	2fb5e <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   2faf4:	687b      	ldr	r3, [r7, #4]
   2faf6:	22d8      	movs	r2, #216	; 0xd8
   2faf8:	2100      	movs	r1, #0
   2fafa:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   2fafc:	687b      	ldr	r3, [r7, #4]
   2fafe:	22e4      	movs	r2, #228	; 0xe4
   2fb00:	2100      	movs	r1, #0
   2fb02:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   2fb04:	2308      	movs	r3, #8
   2fb06:	18fb      	adds	r3, r7, r3
   2fb08:	2201      	movs	r2, #1
   2fb0a:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   2fb0c:	2308      	movs	r3, #8
   2fb0e:	18fb      	adds	r3, r7, r3
   2fb10:	2200      	movs	r2, #0
   2fb12:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   2fb14:	2308      	movs	r3, #8
   2fb16:	18fb      	adds	r3, r7, r3
   2fb18:	2200      	movs	r2, #0
   2fb1a:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   2fb1c:	687b      	ldr	r3, [r7, #4]
   2fb1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fb20:	2b00      	cmp	r3, #0
   2fb22:	d006      	beq.n	2fb32 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   2fb24:	687b      	ldr	r3, [r7, #4]
   2fb26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fb28:	2208      	movs	r2, #8
   2fb2a:	18ba      	adds	r2, r7, r2
   2fb2c:	6878      	ldr	r0, [r7, #4]
   2fb2e:	2103      	movs	r1, #3
   2fb30:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   2fb32:	687b      	ldr	r3, [r7, #4]
   2fb34:	2241      	movs	r2, #65	; 0x41
   2fb36:	5c9b      	ldrb	r3, [r3, r2]
   2fb38:	2202      	movs	r2, #2
   2fb3a:	4013      	ands	r3, r2
   2fb3c:	b2db      	uxtb	r3, r3
   2fb3e:	2b00      	cmp	r3, #0
   2fb40:	d105      	bne.n	2fb4e <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   2fb42:	687b      	ldr	r3, [r7, #4]
   2fb44:	2100      	movs	r1, #0
   2fb46:	0018      	movs	r0, r3
   2fb48:	4b62      	ldr	r3, [pc, #392]	; (2fcd4 <_http_client_read_chuked_entity+0x20c>)
   2fb4a:	4798      	blx	r3
					return;
   2fb4c:	e0bf      	b.n	2fcce <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   2fb4e:	697b      	ldr	r3, [r7, #20]
   2fb50:	1c9a      	adds	r2, r3, #2
   2fb52:	687b      	ldr	r3, [r7, #4]
   2fb54:	0011      	movs	r1, r2
   2fb56:	0018      	movs	r0, r3
   2fb58:	4b5f      	ldr	r3, [pc, #380]	; (2fcd8 <_http_client_read_chuked_entity+0x210>)
   2fb5a:	4798      	blx	r3
   2fb5c:	e0b2      	b.n	2fcc4 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   2fb5e:	687b      	ldr	r3, [r7, #4]
   2fb60:	22e0      	movs	r2, #224	; 0xe0
   2fb62:	589a      	ldr	r2, [r3, r2]
   2fb64:	69fb      	ldr	r3, [r7, #28]
   2fb66:	429a      	cmp	r2, r3
   2fb68:	dd00      	ble.n	2fb6c <_http_client_read_chuked_entity+0xa4>
   2fb6a:	e0ab      	b.n	2fcc4 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   2fb6c:	687b      	ldr	r3, [r7, #4]
   2fb6e:	22e0      	movs	r2, #224	; 0xe0
   2fb70:	589b      	ldr	r3, [r3, r2]
   2fb72:	001a      	movs	r2, r3
   2fb74:	2308      	movs	r3, #8
   2fb76:	18fb      	adds	r3, r7, r3
   2fb78:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   2fb7a:	2308      	movs	r3, #8
   2fb7c:	18fb      	adds	r3, r7, r3
   2fb7e:	697a      	ldr	r2, [r7, #20]
   2fb80:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   2fb82:	2308      	movs	r3, #8
   2fb84:	18fb      	adds	r3, r7, r3
   2fb86:	2200      	movs	r2, #0
   2fb88:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   2fb8a:	687b      	ldr	r3, [r7, #4]
   2fb8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fb8e:	2b00      	cmp	r3, #0
   2fb90:	d006      	beq.n	2fba0 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   2fb92:	687b      	ldr	r3, [r7, #4]
   2fb94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fb96:	2208      	movs	r2, #8
   2fb98:	18ba      	adds	r2, r7, r2
   2fb9a:	6878      	ldr	r0, [r7, #4]
   2fb9c:	2103      	movs	r1, #3
   2fb9e:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   2fba0:	687b      	ldr	r3, [r7, #4]
   2fba2:	22e0      	movs	r2, #224	; 0xe0
   2fba4:	589b      	ldr	r3, [r3, r2]
   2fba6:	3302      	adds	r3, #2
   2fba8:	697a      	ldr	r2, [r7, #20]
   2fbaa:	18d2      	adds	r2, r2, r3
   2fbac:	687b      	ldr	r3, [r7, #4]
   2fbae:	0011      	movs	r1, r2
   2fbb0:	0018      	movs	r0, r3
   2fbb2:	4b49      	ldr	r3, [pc, #292]	; (2fcd8 <_http_client_read_chuked_entity+0x210>)
   2fbb4:	4798      	blx	r3
				length = (int)module->recved_size;
   2fbb6:	687b      	ldr	r3, [r7, #4]
   2fbb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2fbba:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   2fbbc:	687b      	ldr	r3, [r7, #4]
   2fbbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2fbc0:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   2fbc2:	687b      	ldr	r3, [r7, #4]
   2fbc4:	21e0      	movs	r1, #224	; 0xe0
   2fbc6:	2201      	movs	r2, #1
   2fbc8:	4252      	negs	r2, r2
   2fbca:	505a      	str	r2, [r3, r1]
   2fbcc:	e07a      	b.n	2fcc4 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   2fbce:	687b      	ldr	r3, [r7, #4]
   2fbd0:	22e0      	movs	r2, #224	; 0xe0
   2fbd2:	2100      	movs	r1, #0
   2fbd4:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   2fbd6:	e05a      	b.n	2fc8e <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   2fbd8:	697b      	ldr	r3, [r7, #20]
   2fbda:	781b      	ldrb	r3, [r3, #0]
   2fbdc:	2b0a      	cmp	r3, #10
   2fbde:	d106      	bne.n	2fbee <_http_client_read_chuked_entity+0x126>
					buffer++;
   2fbe0:	697b      	ldr	r3, [r7, #20]
   2fbe2:	3301      	adds	r3, #1
   2fbe4:	617b      	str	r3, [r7, #20]
					length--;
   2fbe6:	69fb      	ldr	r3, [r7, #28]
   2fbe8:	3b01      	subs	r3, #1
   2fbea:	61fb      	str	r3, [r7, #28]
					break;
   2fbec:	e052      	b.n	2fc94 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   2fbee:	69bb      	ldr	r3, [r7, #24]
   2fbf0:	2b00      	cmp	r3, #0
   2fbf2:	d145      	bne.n	2fc80 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   2fbf4:	697b      	ldr	r3, [r7, #20]
   2fbf6:	781b      	ldrb	r3, [r3, #0]
   2fbf8:	2b2f      	cmp	r3, #47	; 0x2f
   2fbfa:	d910      	bls.n	2fc1e <_http_client_read_chuked_entity+0x156>
   2fbfc:	697b      	ldr	r3, [r7, #20]
   2fbfe:	781b      	ldrb	r3, [r3, #0]
   2fc00:	2b39      	cmp	r3, #57	; 0x39
   2fc02:	d80c      	bhi.n	2fc1e <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   2fc04:	687b      	ldr	r3, [r7, #4]
   2fc06:	22e0      	movs	r2, #224	; 0xe0
   2fc08:	589b      	ldr	r3, [r3, r2]
   2fc0a:	011b      	lsls	r3, r3, #4
   2fc0c:	697a      	ldr	r2, [r7, #20]
   2fc0e:	7812      	ldrb	r2, [r2, #0]
   2fc10:	189b      	adds	r3, r3, r2
   2fc12:	3b30      	subs	r3, #48	; 0x30
   2fc14:	001a      	movs	r2, r3
   2fc16:	687b      	ldr	r3, [r7, #4]
   2fc18:	21e0      	movs	r1, #224	; 0xe0
   2fc1a:	505a      	str	r2, [r3, r1]
   2fc1c:	e031      	b.n	2fc82 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   2fc1e:	697b      	ldr	r3, [r7, #20]
   2fc20:	781b      	ldrb	r3, [r3, #0]
   2fc22:	2b60      	cmp	r3, #96	; 0x60
   2fc24:	d910      	bls.n	2fc48 <_http_client_read_chuked_entity+0x180>
   2fc26:	697b      	ldr	r3, [r7, #20]
   2fc28:	781b      	ldrb	r3, [r3, #0]
   2fc2a:	2b66      	cmp	r3, #102	; 0x66
   2fc2c:	d80c      	bhi.n	2fc48 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   2fc2e:	687b      	ldr	r3, [r7, #4]
   2fc30:	22e0      	movs	r2, #224	; 0xe0
   2fc32:	589b      	ldr	r3, [r3, r2]
   2fc34:	011b      	lsls	r3, r3, #4
   2fc36:	697a      	ldr	r2, [r7, #20]
   2fc38:	7812      	ldrb	r2, [r2, #0]
   2fc3a:	189b      	adds	r3, r3, r2
   2fc3c:	3b61      	subs	r3, #97	; 0x61
   2fc3e:	001a      	movs	r2, r3
   2fc40:	687b      	ldr	r3, [r7, #4]
   2fc42:	21e0      	movs	r1, #224	; 0xe0
   2fc44:	505a      	str	r2, [r3, r1]
   2fc46:	e01c      	b.n	2fc82 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   2fc48:	697b      	ldr	r3, [r7, #20]
   2fc4a:	781b      	ldrb	r3, [r3, #0]
   2fc4c:	2b40      	cmp	r3, #64	; 0x40
   2fc4e:	d910      	bls.n	2fc72 <_http_client_read_chuked_entity+0x1aa>
   2fc50:	697b      	ldr	r3, [r7, #20]
   2fc52:	781b      	ldrb	r3, [r3, #0]
   2fc54:	2b46      	cmp	r3, #70	; 0x46
   2fc56:	d80c      	bhi.n	2fc72 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   2fc58:	687b      	ldr	r3, [r7, #4]
   2fc5a:	22e0      	movs	r2, #224	; 0xe0
   2fc5c:	589b      	ldr	r3, [r3, r2]
   2fc5e:	011b      	lsls	r3, r3, #4
   2fc60:	697a      	ldr	r2, [r7, #20]
   2fc62:	7812      	ldrb	r2, [r2, #0]
   2fc64:	189b      	adds	r3, r3, r2
   2fc66:	3b41      	subs	r3, #65	; 0x41
   2fc68:	001a      	movs	r2, r3
   2fc6a:	687b      	ldr	r3, [r7, #4]
   2fc6c:	21e0      	movs	r1, #224	; 0xe0
   2fc6e:	505a      	str	r2, [r3, r1]
   2fc70:	e007      	b.n	2fc82 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   2fc72:	697b      	ldr	r3, [r7, #20]
   2fc74:	781b      	ldrb	r3, [r3, #0]
   2fc76:	2b3b      	cmp	r3, #59	; 0x3b
   2fc78:	d103      	bne.n	2fc82 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   2fc7a:	2301      	movs	r3, #1
   2fc7c:	61bb      	str	r3, [r7, #24]
   2fc7e:	e000      	b.n	2fc82 <_http_client_read_chuked_entity+0x1ba>
					continue;
   2fc80:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   2fc82:	697b      	ldr	r3, [r7, #20]
   2fc84:	3301      	adds	r3, #1
   2fc86:	617b      	str	r3, [r7, #20]
   2fc88:	69fb      	ldr	r3, [r7, #28]
   2fc8a:	3b01      	subs	r3, #1
   2fc8c:	61fb      	str	r3, [r7, #28]
   2fc8e:	69fb      	ldr	r3, [r7, #28]
   2fc90:	2b00      	cmp	r3, #0
   2fc92:	dca1      	bgt.n	2fbd8 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   2fc94:	687b      	ldr	r3, [r7, #4]
   2fc96:	22e0      	movs	r2, #224	; 0xe0
   2fc98:	589a      	ldr	r2, [r3, r2]
   2fc9a:	687b      	ldr	r3, [r7, #4]
   2fc9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2fc9e:	429a      	cmp	r2, r3
   2fca0:	dd07      	ble.n	2fcb2 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   2fca2:	238b      	movs	r3, #139	; 0x8b
   2fca4:	425a      	negs	r2, r3
   2fca6:	687b      	ldr	r3, [r7, #4]
   2fca8:	0011      	movs	r1, r2
   2fcaa:	0018      	movs	r0, r3
   2fcac:	4b09      	ldr	r3, [pc, #36]	; (2fcd4 <_http_client_read_chuked_entity+0x20c>)
   2fcae:	4798      	blx	r3
				return;
   2fcb0:	e00d      	b.n	2fcce <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   2fcb2:	69fb      	ldr	r3, [r7, #28]
   2fcb4:	2b00      	cmp	r3, #0
   2fcb6:	d105      	bne.n	2fcc4 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   2fcb8:	687b      	ldr	r3, [r7, #4]
   2fcba:	21e0      	movs	r1, #224	; 0xe0
   2fcbc:	2201      	movs	r2, #1
   2fcbe:	4252      	negs	r2, r2
   2fcc0:	505a      	str	r2, [r3, r1]
				return;
   2fcc2:	e004      	b.n	2fcce <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   2fcc4:	687b      	ldr	r3, [r7, #4]
   2fcc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2fcc8:	2b00      	cmp	r3, #0
   2fcca:	d000      	beq.n	2fcce <_http_client_read_chuked_entity+0x206>
   2fccc:	e708      	b.n	2fae0 <_http_client_read_chuked_entity+0x18>
}
   2fcce:	46bd      	mov	sp, r7
   2fcd0:	b008      	add	sp, #32
   2fcd2:	bd80      	pop	{r7, pc}
   2fcd4:	0002eea1 	.word	0x0002eea1
   2fcd8:	0002fe89 	.word	0x0002fe89

0002fcdc <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   2fcdc:	b580      	push	{r7, lr}
   2fcde:	b086      	sub	sp, #24
   2fce0:	af00      	add	r7, sp, #0
   2fce2:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   2fce4:	687b      	ldr	r3, [r7, #4]
   2fce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2fce8:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   2fcea:	687b      	ldr	r3, [r7, #4]
   2fcec:	22dc      	movs	r2, #220	; 0xdc
   2fcee:	589b      	ldr	r3, [r3, r2]
   2fcf0:	2b00      	cmp	r3, #0
   2fcf2:	db58      	blt.n	2fda6 <_http_client_handle_entity+0xca>
   2fcf4:	687b      	ldr	r3, [r7, #4]
   2fcf6:	22dc      	movs	r2, #220	; 0xdc
   2fcf8:	589a      	ldr	r2, [r3, r2]
   2fcfa:	687b      	ldr	r3, [r7, #4]
   2fcfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2fcfe:	429a      	cmp	r2, r3
   2fd00:	dc51      	bgt.n	2fda6 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   2fd02:	687b      	ldr	r3, [r7, #4]
   2fd04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2fd06:	0019      	movs	r1, r3
   2fd08:	687b      	ldr	r3, [r7, #4]
   2fd0a:	22dc      	movs	r2, #220	; 0xdc
   2fd0c:	589b      	ldr	r3, [r3, r2]
   2fd0e:	4299      	cmp	r1, r3
   2fd10:	da00      	bge.n	2fd14 <_http_client_handle_entity+0x38>
   2fd12:	e0a9      	b.n	2fe68 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   2fd14:	687b      	ldr	r3, [r7, #4]
   2fd16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fd18:	2b00      	cmp	r3, #0
   2fd1a:	d020      	beq.n	2fd5e <_http_client_handle_entity+0x82>
   2fd1c:	687b      	ldr	r3, [r7, #4]
   2fd1e:	22e4      	movs	r2, #228	; 0xe4
   2fd20:	5a9b      	ldrh	r3, [r3, r2]
   2fd22:	2b00      	cmp	r3, #0
   2fd24:	d01b      	beq.n	2fd5e <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   2fd26:	687b      	ldr	r3, [r7, #4]
   2fd28:	22e4      	movs	r2, #228	; 0xe4
   2fd2a:	5a9a      	ldrh	r2, [r3, r2]
   2fd2c:	2308      	movs	r3, #8
   2fd2e:	18fb      	adds	r3, r7, r3
   2fd30:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   2fd32:	2308      	movs	r3, #8
   2fd34:	18fb      	adds	r3, r7, r3
   2fd36:	2200      	movs	r2, #0
   2fd38:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   2fd3a:	687b      	ldr	r3, [r7, #4]
   2fd3c:	22dc      	movs	r2, #220	; 0xdc
   2fd3e:	589b      	ldr	r3, [r3, r2]
   2fd40:	001a      	movs	r2, r3
   2fd42:	2308      	movs	r3, #8
   2fd44:	18fb      	adds	r3, r7, r3
   2fd46:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   2fd48:	2308      	movs	r3, #8
   2fd4a:	18fb      	adds	r3, r7, r3
   2fd4c:	697a      	ldr	r2, [r7, #20]
   2fd4e:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   2fd50:	687b      	ldr	r3, [r7, #4]
   2fd52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fd54:	2208      	movs	r2, #8
   2fd56:	18ba      	adds	r2, r7, r2
   2fd58:	6878      	ldr	r0, [r7, #4]
   2fd5a:	2102      	movs	r1, #2
   2fd5c:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   2fd5e:	687b      	ldr	r3, [r7, #4]
   2fd60:	22d8      	movs	r2, #216	; 0xd8
   2fd62:	2100      	movs	r1, #0
   2fd64:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   2fd66:	687b      	ldr	r3, [r7, #4]
   2fd68:	22e4      	movs	r2, #228	; 0xe4
   2fd6a:	2100      	movs	r1, #0
   2fd6c:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   2fd6e:	687b      	ldr	r3, [r7, #4]
   2fd70:	2241      	movs	r2, #65	; 0x41
   2fd72:	5c9b      	ldrb	r3, [r3, r2]
   2fd74:	2202      	movs	r2, #2
   2fd76:	4013      	ands	r3, r2
   2fd78:	b2db      	uxtb	r3, r3
   2fd7a:	2b00      	cmp	r3, #0
   2fd7c:	d105      	bne.n	2fd8a <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   2fd7e:	687b      	ldr	r3, [r7, #4]
   2fd80:	2100      	movs	r1, #0
   2fd82:	0018      	movs	r0, r3
   2fd84:	4b3b      	ldr	r3, [pc, #236]	; (2fe74 <_http_client_handle_entity+0x198>)
   2fd86:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   2fd88:	e06e      	b.n	2fe68 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   2fd8a:	687b      	ldr	r3, [r7, #4]
   2fd8c:	22dc      	movs	r2, #220	; 0xdc
   2fd8e:	589b      	ldr	r3, [r3, r2]
   2fd90:	001a      	movs	r2, r3
   2fd92:	697b      	ldr	r3, [r7, #20]
   2fd94:	189a      	adds	r2, r3, r2
   2fd96:	687b      	ldr	r3, [r7, #4]
   2fd98:	0011      	movs	r1, r2
   2fd9a:	0018      	movs	r0, r3
   2fd9c:	4b36      	ldr	r3, [pc, #216]	; (2fe78 <_http_client_handle_entity+0x19c>)
   2fd9e:	4798      	blx	r3
				return module->recved_size;
   2fda0:	687b      	ldr	r3, [r7, #4]
   2fda2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2fda4:	e061      	b.n	2fe6a <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   2fda6:	687b      	ldr	r3, [r7, #4]
   2fda8:	22dc      	movs	r2, #220	; 0xdc
   2fdaa:	589b      	ldr	r3, [r3, r2]
   2fdac:	2b00      	cmp	r3, #0
   2fdae:	db57      	blt.n	2fe60 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   2fdb0:	687b      	ldr	r3, [r7, #4]
   2fdb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2fdb4:	2308      	movs	r3, #8
   2fdb6:	18fb      	adds	r3, r7, r3
   2fdb8:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   2fdba:	2308      	movs	r3, #8
   2fdbc:	18fb      	adds	r3, r7, r3
   2fdbe:	697a      	ldr	r2, [r7, #20]
   2fdc0:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   2fdc2:	687b      	ldr	r3, [r7, #4]
   2fdc4:	22e0      	movs	r2, #224	; 0xe0
   2fdc6:	589a      	ldr	r2, [r3, r2]
   2fdc8:	687b      	ldr	r3, [r7, #4]
   2fdca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2fdcc:	18d2      	adds	r2, r2, r3
   2fdce:	687b      	ldr	r3, [r7, #4]
   2fdd0:	21e0      	movs	r1, #224	; 0xe0
   2fdd2:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   2fdd4:	687b      	ldr	r3, [r7, #4]
   2fdd6:	22dc      	movs	r2, #220	; 0xdc
   2fdd8:	589a      	ldr	r2, [r3, r2]
   2fdda:	687b      	ldr	r3, [r7, #4]
   2fddc:	21e0      	movs	r1, #224	; 0xe0
   2fdde:	585b      	ldr	r3, [r3, r1]
   2fde0:	429a      	cmp	r2, r3
   2fde2:	dc0c      	bgt.n	2fdfe <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   2fde4:	687b      	ldr	r3, [r7, #4]
   2fde6:	22d8      	movs	r2, #216	; 0xd8
   2fde8:	2100      	movs	r1, #0
   2fdea:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   2fdec:	687b      	ldr	r3, [r7, #4]
   2fdee:	22e4      	movs	r2, #228	; 0xe4
   2fdf0:	2100      	movs	r1, #0
   2fdf2:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   2fdf4:	2308      	movs	r3, #8
   2fdf6:	18fb      	adds	r3, r7, r3
   2fdf8:	2201      	movs	r2, #1
   2fdfa:	721a      	strb	r2, [r3, #8]
   2fdfc:	e003      	b.n	2fe06 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   2fdfe:	2308      	movs	r3, #8
   2fe00:	18fb      	adds	r3, r7, r3
   2fe02:	2200      	movs	r2, #0
   2fe04:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   2fe06:	687b      	ldr	r3, [r7, #4]
   2fe08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fe0a:	2b00      	cmp	r3, #0
   2fe0c:	d006      	beq.n	2fe1c <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   2fe0e:	687b      	ldr	r3, [r7, #4]
   2fe10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fe12:	2208      	movs	r2, #8
   2fe14:	18ba      	adds	r2, r7, r2
   2fe16:	6878      	ldr	r0, [r7, #4]
   2fe18:	2103      	movs	r1, #3
   2fe1a:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   2fe1c:	2308      	movs	r3, #8
   2fe1e:	18fb      	adds	r3, r7, r3
   2fe20:	7a1b      	ldrb	r3, [r3, #8]
   2fe22:	2b01      	cmp	r3, #1
   2fe24:	d112      	bne.n	2fe4c <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   2fe26:	687b      	ldr	r3, [r7, #4]
   2fe28:	2241      	movs	r2, #65	; 0x41
   2fe2a:	5c9b      	ldrb	r3, [r3, r2]
   2fe2c:	2202      	movs	r2, #2
   2fe2e:	4013      	ands	r3, r2
   2fe30:	b2db      	uxtb	r3, r3
   2fe32:	2b00      	cmp	r3, #0
   2fe34:	d10a      	bne.n	2fe4c <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   2fe36:	4b11      	ldr	r3, [pc, #68]	; (2fe7c <_http_client_handle_entity+0x1a0>)
   2fe38:	0018      	movs	r0, r3
   2fe3a:	4b11      	ldr	r3, [pc, #68]	; (2fe80 <_http_client_handle_entity+0x1a4>)
   2fe3c:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   2fe3e:	687b      	ldr	r3, [r7, #4]
   2fe40:	2100      	movs	r1, #0
   2fe42:	0018      	movs	r0, r3
   2fe44:	4b0b      	ldr	r3, [pc, #44]	; (2fe74 <_http_client_handle_entity+0x198>)
   2fe46:	4798      	blx	r3
					return 0;
   2fe48:	2300      	movs	r3, #0
   2fe4a:	e00e      	b.n	2fe6a <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   2fe4c:	687b      	ldr	r3, [r7, #4]
   2fe4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2fe50:	697a      	ldr	r2, [r7, #20]
   2fe52:	18d2      	adds	r2, r2, r3
   2fe54:	687b      	ldr	r3, [r7, #4]
   2fe56:	0011      	movs	r1, r2
   2fe58:	0018      	movs	r0, r3
   2fe5a:	4b07      	ldr	r3, [pc, #28]	; (2fe78 <_http_client_handle_entity+0x19c>)
   2fe5c:	4798      	blx	r3
   2fe5e:	e003      	b.n	2fe68 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   2fe60:	687b      	ldr	r3, [r7, #4]
   2fe62:	0018      	movs	r0, r3
   2fe64:	4b07      	ldr	r3, [pc, #28]	; (2fe84 <_http_client_handle_entity+0x1a8>)
   2fe66:	4798      	blx	r3
		}
	}

	return 0;
   2fe68:	2300      	movs	r3, #0
}
   2fe6a:	0018      	movs	r0, r3
   2fe6c:	46bd      	mov	sp, r7
   2fe6e:	b006      	add	sp, #24
   2fe70:	bd80      	pop	{r7, pc}
   2fe72:	46c0      	nop			; (mov r8, r8)
   2fe74:	0002eea1 	.word	0x0002eea1
   2fe78:	0002fe89 	.word	0x0002fe89
   2fe7c:	000371ec 	.word	0x000371ec
   2fe80:	000323c5 	.word	0x000323c5
   2fe84:	0002fac9 	.word	0x0002fac9

0002fe88 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   2fe88:	b580      	push	{r7, lr}
   2fe8a:	b084      	sub	sp, #16
   2fe8c:	af00      	add	r7, sp, #0
   2fe8e:	6078      	str	r0, [r7, #4]
   2fe90:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   2fe92:	687b      	ldr	r3, [r7, #4]
   2fe94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2fe96:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   2fe98:	687b      	ldr	r3, [r7, #4]
   2fe9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2fe9c:	001a      	movs	r2, r3
   2fe9e:	683b      	ldr	r3, [r7, #0]
   2fea0:	1ad2      	subs	r2, r2, r3
   2fea2:	68fb      	ldr	r3, [r7, #12]
   2fea4:	18d3      	adds	r3, r2, r3
   2fea6:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   2fea8:	68bb      	ldr	r3, [r7, #8]
   2feaa:	2b00      	cmp	r3, #0
   2feac:	dd09      	ble.n	2fec2 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   2feae:	68ba      	ldr	r2, [r7, #8]
   2feb0:	6839      	ldr	r1, [r7, #0]
   2feb2:	68fb      	ldr	r3, [r7, #12]
   2feb4:	0018      	movs	r0, r3
   2feb6:	4b06      	ldr	r3, [pc, #24]	; (2fed0 <_http_client_move_buffer+0x48>)
   2feb8:	4798      	blx	r3
		module->recved_size = remain;
   2feba:	68ba      	ldr	r2, [r7, #8]
   2febc:	687b      	ldr	r3, [r7, #4]
   2febe:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   2fec0:	e002      	b.n	2fec8 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   2fec2:	687b      	ldr	r3, [r7, #4]
   2fec4:	2200      	movs	r2, #0
   2fec6:	645a      	str	r2, [r3, #68]	; 0x44
}
   2fec8:	46c0      	nop			; (mov r8, r8)
   2feca:	46bd      	mov	sp, r7
   2fecc:	b004      	add	sp, #16
   2fece:	bd80      	pop	{r7, pc}
   2fed0:	0003217f 	.word	0x0003217f

0002fed4 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   2fed4:	b580      	push	{r7, lr}
   2fed6:	b084      	sub	sp, #16
   2fed8:	af00      	add	r7, sp, #0
   2feda:	60f8      	str	r0, [r7, #12]
   2fedc:	60b9      	str	r1, [r7, #8]
   2fede:	607a      	str	r2, [r7, #4]
   2fee0:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   2fee2:	68fb      	ldr	r3, [r7, #12]
   2fee4:	687a      	ldr	r2, [r7, #4]
   2fee6:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   2fee8:	68fb      	ldr	r3, [r7, #12]
   2feea:	68ba      	ldr	r2, [r7, #8]
   2feec:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   2feee:	68fb      	ldr	r3, [r7, #12]
   2fef0:	2200      	movs	r2, #0
   2fef2:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   2fef4:	68fb      	ldr	r3, [r7, #12]
   2fef6:	683a      	ldr	r2, [r7, #0]
   2fef8:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   2fefa:	68fb      	ldr	r3, [r7, #12]
   2fefc:	69ba      	ldr	r2, [r7, #24]
   2fefe:	60da      	str	r2, [r3, #12]
}
   2ff00:	46c0      	nop			; (mov r8, r8)
   2ff02:	46bd      	mov	sp, r7
   2ff04:	b004      	add	sp, #16
   2ff06:	bd80      	pop	{r7, pc}

0002ff08 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   2ff08:	b580      	push	{r7, lr}
   2ff0a:	b084      	sub	sp, #16
   2ff0c:	af00      	add	r7, sp, #0
   2ff0e:	6078      	str	r0, [r7, #4]
   2ff10:	000a      	movs	r2, r1
   2ff12:	1cfb      	adds	r3, r7, #3
   2ff14:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   2ff16:	687b      	ldr	r3, [r7, #4]
   2ff18:	681a      	ldr	r2, [r3, #0]
   2ff1a:	687b      	ldr	r3, [r7, #4]
   2ff1c:	685b      	ldr	r3, [r3, #4]
   2ff1e:	1ad3      	subs	r3, r2, r3
   2ff20:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   2ff22:	68fb      	ldr	r3, [r7, #12]
   2ff24:	2b00      	cmp	r3, #0
   2ff26:	dc03      	bgt.n	2ff30 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   2ff28:	687b      	ldr	r3, [r7, #4]
   2ff2a:	0018      	movs	r0, r3
   2ff2c:	4b08      	ldr	r3, [pc, #32]	; (2ff50 <stream_writer_send_8+0x48>)
   2ff2e:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   2ff30:	687b      	ldr	r3, [r7, #4]
   2ff32:	6919      	ldr	r1, [r3, #16]
   2ff34:	687b      	ldr	r3, [r7, #4]
   2ff36:	685b      	ldr	r3, [r3, #4]
   2ff38:	1c58      	adds	r0, r3, #1
   2ff3a:	687a      	ldr	r2, [r7, #4]
   2ff3c:	6050      	str	r0, [r2, #4]
   2ff3e:	18cb      	adds	r3, r1, r3
   2ff40:	1cfa      	adds	r2, r7, #3
   2ff42:	7812      	ldrb	r2, [r2, #0]
   2ff44:	701a      	strb	r2, [r3, #0]
}
   2ff46:	46c0      	nop			; (mov r8, r8)
   2ff48:	46bd      	mov	sp, r7
   2ff4a:	b004      	add	sp, #16
   2ff4c:	bd80      	pop	{r7, pc}
   2ff4e:	46c0      	nop			; (mov r8, r8)
   2ff50:	0002ff91 	.word	0x0002ff91

0002ff54 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   2ff54:	b580      	push	{r7, lr}
   2ff56:	b084      	sub	sp, #16
   2ff58:	af00      	add	r7, sp, #0
   2ff5a:	60f8      	str	r0, [r7, #12]
   2ff5c:	60b9      	str	r1, [r7, #8]
   2ff5e:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   2ff60:	e00d      	b.n	2ff7e <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   2ff62:	68bb      	ldr	r3, [r7, #8]
   2ff64:	781b      	ldrb	r3, [r3, #0]
   2ff66:	b25a      	sxtb	r2, r3
   2ff68:	68fb      	ldr	r3, [r7, #12]
   2ff6a:	0011      	movs	r1, r2
   2ff6c:	0018      	movs	r0, r3
   2ff6e:	4b07      	ldr	r3, [pc, #28]	; (2ff8c <stream_writer_send_buffer+0x38>)
   2ff70:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   2ff72:	687b      	ldr	r3, [r7, #4]
   2ff74:	3b01      	subs	r3, #1
   2ff76:	607b      	str	r3, [r7, #4]
   2ff78:	68bb      	ldr	r3, [r7, #8]
   2ff7a:	3301      	adds	r3, #1
   2ff7c:	60bb      	str	r3, [r7, #8]
   2ff7e:	687b      	ldr	r3, [r7, #4]
   2ff80:	2b00      	cmp	r3, #0
   2ff82:	d1ee      	bne.n	2ff62 <stream_writer_send_buffer+0xe>
	}
}
   2ff84:	46c0      	nop			; (mov r8, r8)
   2ff86:	46bd      	mov	sp, r7
   2ff88:	b004      	add	sp, #16
   2ff8a:	bd80      	pop	{r7, pc}
   2ff8c:	0002ff09 	.word	0x0002ff09

0002ff90 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   2ff90:	b590      	push	{r4, r7, lr}
   2ff92:	b083      	sub	sp, #12
   2ff94:	af00      	add	r7, sp, #0
   2ff96:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   2ff98:	687b      	ldr	r3, [r7, #4]
   2ff9a:	685b      	ldr	r3, [r3, #4]
   2ff9c:	2b00      	cmp	r3, #0
   2ff9e:	d00c      	beq.n	2ffba <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   2ffa0:	687b      	ldr	r3, [r7, #4]
   2ffa2:	689c      	ldr	r4, [r3, #8]
   2ffa4:	687b      	ldr	r3, [r7, #4]
   2ffa6:	68d8      	ldr	r0, [r3, #12]
   2ffa8:	687b      	ldr	r3, [r7, #4]
   2ffaa:	6919      	ldr	r1, [r3, #16]
   2ffac:	687b      	ldr	r3, [r7, #4]
   2ffae:	685b      	ldr	r3, [r3, #4]
   2ffb0:	001a      	movs	r2, r3
   2ffb2:	47a0      	blx	r4
		writer->written = 0;
   2ffb4:	687b      	ldr	r3, [r7, #4]
   2ffb6:	2200      	movs	r2, #0
   2ffb8:	605a      	str	r2, [r3, #4]
	}
}
   2ffba:	46c0      	nop			; (mov r8, r8)
   2ffbc:	46bd      	mov	sp, r7
   2ffbe:	b003      	add	sp, #12
   2ffc0:	bd90      	pop	{r4, r7, pc}
	...

0002ffc4 <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
   2ffc4:	b580      	push	{r7, lr}
   2ffc6:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   2ffc8:	2000      	movs	r0, #0
   2ffca:	4b05      	ldr	r3, [pc, #20]	; (2ffe0 <system_cpu_clock_get_hz+0x1c>)
   2ffcc:	4798      	blx	r3
   2ffce:	0002      	movs	r2, r0
   2ffd0:	4b04      	ldr	r3, [pc, #16]	; (2ffe4 <system_cpu_clock_get_hz+0x20>)
   2ffd2:	7a1b      	ldrb	r3, [r3, #8]
   2ffd4:	b2db      	uxtb	r3, r3
   2ffd6:	40da      	lsrs	r2, r3
   2ffd8:	0013      	movs	r3, r2
}
   2ffda:	0018      	movs	r0, r3
   2ffdc:	46bd      	mov	sp, r7
   2ffde:	bd80      	pop	{r7, pc}
   2ffe0:	000279a5 	.word	0x000279a5
   2ffe4:	40000400 	.word	0x40000400

0002ffe8 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   2ffe8:	b580      	push	{r7, lr}
   2ffea:	b084      	sub	sp, #16
   2ffec:	af00      	add	r7, sp, #0
   2ffee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   2fff0:	687b      	ldr	r3, [r7, #4]
   2fff2:	681b      	ldr	r3, [r3, #0]
   2fff4:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   2fff6:	46c0      	nop			; (mov r8, r8)
   2fff8:	68fb      	ldr	r3, [r7, #12]
   2fffa:	689b      	ldr	r3, [r3, #8]
   2fffc:	2202      	movs	r2, #2
   2fffe:	4013      	ands	r3, r2
   30000:	d1fa      	bne.n	2fff8 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   30002:	68fb      	ldr	r3, [r7, #12]
   30004:	681b      	ldr	r3, [r3, #0]
   30006:	2202      	movs	r2, #2
   30008:	431a      	orrs	r2, r3
   3000a:	68fb      	ldr	r3, [r7, #12]
   3000c:	601a      	str	r2, [r3, #0]
}
   3000e:	46c0      	nop			; (mov r8, r8)
   30010:	46bd      	mov	sp, r7
   30012:	b004      	add	sp, #16
   30014:	bd80      	pop	{r7, pc}
	...

00030018 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   30018:	b580      	push	{r7, lr}
   3001a:	b082      	sub	sp, #8
   3001c:	af00      	add	r7, sp, #0
   3001e:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   30020:	4b04      	ldr	r3, [pc, #16]	; (30034 <sw_timer_tcc_callback+0x1c>)
   30022:	681b      	ldr	r3, [r3, #0]
   30024:	1c5a      	adds	r2, r3, #1
   30026:	4b03      	ldr	r3, [pc, #12]	; (30034 <sw_timer_tcc_callback+0x1c>)
   30028:	601a      	str	r2, [r3, #0]
}
   3002a:	46c0      	nop			; (mov r8, r8)
   3002c:	46bd      	mov	sp, r7
   3002e:	b002      	add	sp, #8
   30030:	bd80      	pop	{r7, pc}
   30032:	46c0      	nop			; (mov r8, r8)
   30034:	20004168 	.word	0x20004168

00030038 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   30038:	b580      	push	{r7, lr}
   3003a:	b082      	sub	sp, #8
   3003c:	af00      	add	r7, sp, #0
   3003e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   30040:	687b      	ldr	r3, [r7, #4]
   30042:	2264      	movs	r2, #100	; 0x64
   30044:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   30046:	687b      	ldr	r3, [r7, #4]
   30048:	2200      	movs	r2, #0
   3004a:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   3004c:	687b      	ldr	r3, [r7, #4]
   3004e:	2200      	movs	r2, #0
   30050:	705a      	strb	r2, [r3, #1]
}
   30052:	46c0      	nop			; (mov r8, r8)
   30054:	46bd      	mov	sp, r7
   30056:	b002      	add	sp, #8
   30058:	bd80      	pop	{r7, pc}
	...

0003005c <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   3005c:	b590      	push	{r4, r7, lr}
   3005e:	b0b1      	sub	sp, #196	; 0xc4
   30060:	af00      	add	r7, sp, #0
   30062:	6078      	str	r0, [r7, #4]
   30064:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   30066:	230c      	movs	r3, #12
   30068:	18fb      	adds	r3, r7, r3
   3006a:	4a2e      	ldr	r2, [pc, #184]	; (30124 <sw_timer_init+0xc8>)
   3006c:	ca13      	ldmia	r2!, {r0, r1, r4}
   3006e:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   30070:	683b      	ldr	r3, [r7, #0]
   30072:	885b      	ldrh	r3, [r3, #2]
   30074:	001a      	movs	r2, r3
   30076:	687b      	ldr	r3, [r7, #4]
   30078:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   3007a:	687b      	ldr	r3, [r7, #4]
   3007c:	3314      	adds	r3, #20
   3007e:	22bc      	movs	r2, #188	; 0xbc
   30080:	18ba      	adds	r2, r7, r2
   30082:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   30084:	683b      	ldr	r3, [r7, #0]
   30086:	781b      	ldrb	r3, [r3, #0]
   30088:	001a      	movs	r2, r3
   3008a:	230c      	movs	r3, #12
   3008c:	18fb      	adds	r3, r7, r3
   3008e:	0092      	lsls	r2, r2, #2
   30090:	58d2      	ldr	r2, [r2, r3]
   30092:	2318      	movs	r3, #24
   30094:	18fb      	adds	r3, r7, r3
   30096:	0011      	movs	r1, r2
   30098:	0018      	movs	r0, r3
   3009a:	4b23      	ldr	r3, [pc, #140]	; (30128 <sw_timer_init+0xcc>)
   3009c:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   3009e:	4b23      	ldr	r3, [pc, #140]	; (3012c <sw_timer_init+0xd0>)
   300a0:	4798      	blx	r3
   300a2:	0004      	movs	r4, r0
   300a4:	683b      	ldr	r3, [r7, #0]
   300a6:	885b      	ldrh	r3, [r3, #2]
   300a8:	001a      	movs	r2, r3
   300aa:	4b21      	ldr	r3, [pc, #132]	; (30130 <sw_timer_init+0xd4>)
   300ac:	0011      	movs	r1, r2
   300ae:	22fa      	movs	r2, #250	; 0xfa
   300b0:	0210      	lsls	r0, r2, #8
   300b2:	4798      	blx	r3
   300b4:	0003      	movs	r3, r0
   300b6:	001a      	movs	r2, r3
   300b8:	4b1e      	ldr	r3, [pc, #120]	; (30134 <sw_timer_init+0xd8>)
   300ba:	0011      	movs	r1, r2
   300bc:	0020      	movs	r0, r4
   300be:	4798      	blx	r3
   300c0:	0003      	movs	r3, r0
   300c2:	001a      	movs	r2, r3
   300c4:	2318      	movs	r3, #24
   300c6:	18fb      	adds	r3, r7, r3
   300c8:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   300ca:	2318      	movs	r3, #24
   300cc:	18fb      	adds	r3, r7, r3
   300ce:	2205      	movs	r2, #5
   300d0:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   300d2:	683b      	ldr	r3, [r7, #0]
   300d4:	781b      	ldrb	r3, [r3, #0]
   300d6:	001a      	movs	r2, r3
   300d8:	230c      	movs	r3, #12
   300da:	18fb      	adds	r3, r7, r3
   300dc:	0092      	lsls	r2, r2, #2
   300de:	58d1      	ldr	r1, [r2, r3]
   300e0:	2318      	movs	r3, #24
   300e2:	18fa      	adds	r2, r7, r3
   300e4:	23bc      	movs	r3, #188	; 0xbc
   300e6:	18fb      	adds	r3, r7, r3
   300e8:	681b      	ldr	r3, [r3, #0]
   300ea:	0018      	movs	r0, r3
   300ec:	4b12      	ldr	r3, [pc, #72]	; (30138 <sw_timer_init+0xdc>)
   300ee:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   300f0:	683b      	ldr	r3, [r7, #0]
   300f2:	785b      	ldrb	r3, [r3, #1]
   300f4:	3308      	adds	r3, #8
   300f6:	b2da      	uxtb	r2, r3
   300f8:	4910      	ldr	r1, [pc, #64]	; (3013c <sw_timer_init+0xe0>)
   300fa:	23bc      	movs	r3, #188	; 0xbc
   300fc:	18fb      	adds	r3, r7, r3
   300fe:	681b      	ldr	r3, [r3, #0]
   30100:	0018      	movs	r0, r3
   30102:	4b0f      	ldr	r3, [pc, #60]	; (30140 <sw_timer_init+0xe4>)
   30104:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   30106:	683b      	ldr	r3, [r7, #0]
   30108:	785b      	ldrb	r3, [r3, #1]
   3010a:	3308      	adds	r3, #8
   3010c:	b2da      	uxtb	r2, r3
   3010e:	23bc      	movs	r3, #188	; 0xbc
   30110:	18fb      	adds	r3, r7, r3
   30112:	681b      	ldr	r3, [r3, #0]
   30114:	0011      	movs	r1, r2
   30116:	0018      	movs	r0, r3
   30118:	4b0a      	ldr	r3, [pc, #40]	; (30144 <sw_timer_init+0xe8>)
   3011a:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   3011c:	46c0      	nop			; (mov r8, r8)
   3011e:	46bd      	mov	sp, r7
   30120:	b031      	add	sp, #196	; 0xc4
   30122:	bd90      	pop	{r4, r7, pc}
   30124:	0003722c 	.word	0x0003722c
   30128:	00027f3d 	.word	0x00027f3d
   3012c:	0002ffc5 	.word	0x0002ffc5
   30130:	000305fd 	.word	0x000305fd
   30134:	000304e9 	.word	0x000304e9
   30138:	00028599 	.word	0x00028599
   3013c:	00030019 	.word	0x00030019
   30140:	000289b1 	.word	0x000289b1
   30144:	000289f1 	.word	0x000289f1

00030148 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   30148:	b580      	push	{r7, lr}
   3014a:	b084      	sub	sp, #16
   3014c:	af00      	add	r7, sp, #0
   3014e:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   30150:	687b      	ldr	r3, [r7, #4]
   30152:	3314      	adds	r3, #20
   30154:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   30156:	68fb      	ldr	r3, [r7, #12]
   30158:	0018      	movs	r0, r3
   3015a:	4b03      	ldr	r3, [pc, #12]	; (30168 <sw_timer_enable+0x20>)
   3015c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   3015e:	46c0      	nop			; (mov r8, r8)
   30160:	46bd      	mov	sp, r7
   30162:	b004      	add	sp, #16
   30164:	bd80      	pop	{r7, pc}
   30166:	46c0      	nop			; (mov r8, r8)
   30168:	0002ffe9 	.word	0x0002ffe9

0003016c <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   3016c:	b580      	push	{r7, lr}
   3016e:	b086      	sub	sp, #24
   30170:	af00      	add	r7, sp, #0
   30172:	60f8      	str	r0, [r7, #12]
   30174:	60b9      	str	r1, [r7, #8]
   30176:	607a      	str	r2, [r7, #4]
   30178:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3017a:	2300      	movs	r3, #0
   3017c:	617b      	str	r3, [r7, #20]
   3017e:	e032      	b.n	301e6 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   30180:	68f9      	ldr	r1, [r7, #12]
   30182:	697a      	ldr	r2, [r7, #20]
   30184:	0013      	movs	r3, r2
   30186:	009b      	lsls	r3, r3, #2
   30188:	189b      	adds	r3, r3, r2
   3018a:	009b      	lsls	r3, r3, #2
   3018c:	5c5b      	ldrb	r3, [r3, r1]
   3018e:	07db      	lsls	r3, r3, #31
   30190:	0fdb      	lsrs	r3, r3, #31
   30192:	b2db      	uxtb	r3, r3
   30194:	2b00      	cmp	r3, #0
   30196:	d123      	bne.n	301e0 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   30198:	697a      	ldr	r2, [r7, #20]
   3019a:	0013      	movs	r3, r2
   3019c:	009b      	lsls	r3, r3, #2
   3019e:	189b      	adds	r3, r3, r2
   301a0:	009b      	lsls	r3, r3, #2
   301a2:	68fa      	ldr	r2, [r7, #12]
   301a4:	18d3      	adds	r3, r2, r3
   301a6:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   301a8:	693b      	ldr	r3, [r7, #16]
   301aa:	68ba      	ldr	r2, [r7, #8]
   301ac:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   301ae:	693b      	ldr	r3, [r7, #16]
   301b0:	781a      	ldrb	r2, [r3, #0]
   301b2:	2102      	movs	r1, #2
   301b4:	438a      	bics	r2, r1
   301b6:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   301b8:	693b      	ldr	r3, [r7, #16]
   301ba:	687a      	ldr	r2, [r7, #4]
   301bc:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   301be:	68fb      	ldr	r3, [r7, #12]
   301c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   301c2:	4b0d      	ldr	r3, [pc, #52]	; (301f8 <sw_timer_register_callback+0x8c>)
   301c4:	0011      	movs	r1, r2
   301c6:	6838      	ldr	r0, [r7, #0]
   301c8:	4798      	blx	r3
   301ca:	0003      	movs	r3, r0
   301cc:	001a      	movs	r2, r3
   301ce:	693b      	ldr	r3, [r7, #16]
   301d0:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   301d2:	693b      	ldr	r3, [r7, #16]
   301d4:	781a      	ldrb	r2, [r3, #0]
   301d6:	2101      	movs	r1, #1
   301d8:	430a      	orrs	r2, r1
   301da:	701a      	strb	r2, [r3, #0]
			return index;
   301dc:	697b      	ldr	r3, [r7, #20]
   301de:	e007      	b.n	301f0 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   301e0:	697b      	ldr	r3, [r7, #20]
   301e2:	3301      	adds	r3, #1
   301e4:	617b      	str	r3, [r7, #20]
   301e6:	697b      	ldr	r3, [r7, #20]
   301e8:	2b00      	cmp	r3, #0
   301ea:	ddc9      	ble.n	30180 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   301ec:	2301      	movs	r3, #1
   301ee:	425b      	negs	r3, r3
}
   301f0:	0018      	movs	r0, r3
   301f2:	46bd      	mov	sp, r7
   301f4:	b006      	add	sp, #24
   301f6:	bd80      	pop	{r7, pc}
   301f8:	000304e9 	.word	0x000304e9

000301fc <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   301fc:	b580      	push	{r7, lr}
   301fe:	b086      	sub	sp, #24
   30200:	af00      	add	r7, sp, #0
   30202:	60f8      	str	r0, [r7, #12]
   30204:	60b9      	str	r1, [r7, #8]
   30206:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   30208:	68ba      	ldr	r2, [r7, #8]
   3020a:	0013      	movs	r3, r2
   3020c:	009b      	lsls	r3, r3, #2
   3020e:	189b      	adds	r3, r3, r2
   30210:	009b      	lsls	r3, r3, #2
   30212:	68fa      	ldr	r2, [r7, #12]
   30214:	18d3      	adds	r3, r2, r3
   30216:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   30218:	697b      	ldr	r3, [r7, #20]
   3021a:	781a      	ldrb	r2, [r3, #0]
   3021c:	2102      	movs	r1, #2
   3021e:	430a      	orrs	r2, r1
   30220:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   30222:	68fb      	ldr	r3, [r7, #12]
   30224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30226:	4b07      	ldr	r3, [pc, #28]	; (30244 <sw_timer_enable_callback+0x48>)
   30228:	0011      	movs	r1, r2
   3022a:	6878      	ldr	r0, [r7, #4]
   3022c:	4798      	blx	r3
   3022e:	0003      	movs	r3, r0
   30230:	001a      	movs	r2, r3
   30232:	4b05      	ldr	r3, [pc, #20]	; (30248 <sw_timer_enable_callback+0x4c>)
   30234:	681b      	ldr	r3, [r3, #0]
   30236:	18d2      	adds	r2, r2, r3
   30238:	697b      	ldr	r3, [r7, #20]
   3023a:	611a      	str	r2, [r3, #16]
}
   3023c:	46c0      	nop			; (mov r8, r8)
   3023e:	46bd      	mov	sp, r7
   30240:	b006      	add	sp, #24
   30242:	bd80      	pop	{r7, pc}
   30244:	000304e9 	.word	0x000304e9
   30248:	20004168 	.word	0x20004168

0003024c <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   3024c:	b580      	push	{r7, lr}
   3024e:	b084      	sub	sp, #16
   30250:	af00      	add	r7, sp, #0
   30252:	6078      	str	r0, [r7, #4]
   30254:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   30256:	683a      	ldr	r2, [r7, #0]
   30258:	0013      	movs	r3, r2
   3025a:	009b      	lsls	r3, r3, #2
   3025c:	189b      	adds	r3, r3, r2
   3025e:	009b      	lsls	r3, r3, #2
   30260:	687a      	ldr	r2, [r7, #4]
   30262:	18d3      	adds	r3, r2, r3
   30264:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   30266:	68fb      	ldr	r3, [r7, #12]
   30268:	781a      	ldrb	r2, [r3, #0]
   3026a:	2102      	movs	r1, #2
   3026c:	438a      	bics	r2, r1
   3026e:	701a      	strb	r2, [r3, #0]
}
   30270:	46c0      	nop			; (mov r8, r8)
   30272:	46bd      	mov	sp, r7
   30274:	b004      	add	sp, #16
   30276:	bd80      	pop	{r7, pc}

00030278 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   30278:	b590      	push	{r4, r7, lr}
   3027a:	b085      	sub	sp, #20
   3027c:	af00      	add	r7, sp, #0
   3027e:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   30280:	2300      	movs	r3, #0
   30282:	60fb      	str	r3, [r7, #12]
   30284:	e053      	b.n	3032e <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   30286:	6879      	ldr	r1, [r7, #4]
   30288:	68fa      	ldr	r2, [r7, #12]
   3028a:	0013      	movs	r3, r2
   3028c:	009b      	lsls	r3, r3, #2
   3028e:	189b      	adds	r3, r3, r2
   30290:	009b      	lsls	r3, r3, #2
   30292:	5c5b      	ldrb	r3, [r3, r1]
   30294:	07db      	lsls	r3, r3, #31
   30296:	0fdb      	lsrs	r3, r3, #31
   30298:	b2db      	uxtb	r3, r3
   3029a:	2b00      	cmp	r3, #0
   3029c:	d044      	beq.n	30328 <sw_timer_task+0xb0>
   3029e:	6879      	ldr	r1, [r7, #4]
   302a0:	68fa      	ldr	r2, [r7, #12]
   302a2:	0013      	movs	r3, r2
   302a4:	009b      	lsls	r3, r3, #2
   302a6:	189b      	adds	r3, r3, r2
   302a8:	009b      	lsls	r3, r3, #2
   302aa:	5c5b      	ldrb	r3, [r3, r1]
   302ac:	079b      	lsls	r3, r3, #30
   302ae:	0fdb      	lsrs	r3, r3, #31
   302b0:	b2db      	uxtb	r3, r3
   302b2:	2b00      	cmp	r3, #0
   302b4:	d038      	beq.n	30328 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   302b6:	68fa      	ldr	r2, [r7, #12]
   302b8:	0013      	movs	r3, r2
   302ba:	009b      	lsls	r3, r3, #2
   302bc:	189b      	adds	r3, r3, r2
   302be:	009b      	lsls	r3, r3, #2
   302c0:	687a      	ldr	r2, [r7, #4]
   302c2:	18d3      	adds	r3, r2, r3
   302c4:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   302c6:	68bb      	ldr	r3, [r7, #8]
   302c8:	691a      	ldr	r2, [r3, #16]
   302ca:	4b1c      	ldr	r3, [pc, #112]	; (3033c <sw_timer_task+0xc4>)
   302cc:	681b      	ldr	r3, [r3, #0]
   302ce:	1ad3      	subs	r3, r2, r3
   302d0:	d52a      	bpl.n	30328 <sw_timer_task+0xb0>
   302d2:	68bb      	ldr	r3, [r7, #8]
   302d4:	781b      	ldrb	r3, [r3, #0]
   302d6:	2204      	movs	r2, #4
   302d8:	4013      	ands	r3, r2
   302da:	b2db      	uxtb	r3, r3
   302dc:	2b00      	cmp	r3, #0
   302de:	d123      	bne.n	30328 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   302e0:	68bb      	ldr	r3, [r7, #8]
   302e2:	781a      	ldrb	r2, [r3, #0]
   302e4:	2104      	movs	r1, #4
   302e6:	430a      	orrs	r2, r1
   302e8:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   302ea:	68bb      	ldr	r3, [r7, #8]
   302ec:	68db      	ldr	r3, [r3, #12]
   302ee:	2b00      	cmp	r3, #0
   302f0:	d007      	beq.n	30302 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   302f2:	68bb      	ldr	r3, [r7, #8]
   302f4:	68da      	ldr	r2, [r3, #12]
   302f6:	4b11      	ldr	r3, [pc, #68]	; (3033c <sw_timer_task+0xc4>)
   302f8:	681b      	ldr	r3, [r3, #0]
   302fa:	18d2      	adds	r2, r2, r3
   302fc:	68bb      	ldr	r3, [r7, #8]
   302fe:	611a      	str	r2, [r3, #16]
   30300:	e004      	b.n	3030c <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   30302:	68bb      	ldr	r3, [r7, #8]
   30304:	781a      	ldrb	r2, [r3, #0]
   30306:	2102      	movs	r1, #2
   30308:	438a      	bics	r2, r1
   3030a:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   3030c:	68bb      	ldr	r3, [r7, #8]
   3030e:	685c      	ldr	r4, [r3, #4]
   30310:	68bb      	ldr	r3, [r7, #8]
   30312:	689a      	ldr	r2, [r3, #8]
   30314:	68bb      	ldr	r3, [r7, #8]
   30316:	68db      	ldr	r3, [r3, #12]
   30318:	68f9      	ldr	r1, [r7, #12]
   3031a:	6878      	ldr	r0, [r7, #4]
   3031c:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   3031e:	68bb      	ldr	r3, [r7, #8]
   30320:	781a      	ldrb	r2, [r3, #0]
   30322:	2104      	movs	r1, #4
   30324:	438a      	bics	r2, r1
   30326:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   30328:	68fb      	ldr	r3, [r7, #12]
   3032a:	3301      	adds	r3, #1
   3032c:	60fb      	str	r3, [r7, #12]
   3032e:	68fb      	ldr	r3, [r7, #12]
   30330:	2b00      	cmp	r3, #0
   30332:	dda8      	ble.n	30286 <sw_timer_task+0xe>
			}
		}
	}
}
   30334:	46c0      	nop			; (mov r8, r8)
   30336:	46bd      	mov	sp, r7
   30338:	b005      	add	sp, #20
   3033a:	bd90      	pop	{r4, r7, pc}
   3033c:	20004168 	.word	0x20004168

00030340 <main>:
/**
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void) {
   30340:	b580      	push	{r7, lr}
   30342:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   30344:	4b06      	ldr	r3, [pc, #24]	; (30360 <main+0x20>)
   30346:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   30348:	4b06      	ldr	r3, [pc, #24]	; (30364 <main+0x24>)
   3034a:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   3034c:	2001      	movs	r0, #1
   3034e:	4b06      	ldr	r3, [pc, #24]	; (30368 <main+0x28>)
   30350:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   30352:	4b06      	ldr	r3, [pc, #24]	; (3036c <main+0x2c>)
   30354:	4798      	blx	r3

    return 0;   // Will not get here
   30356:	2300      	movs	r3, #0
}
   30358:	0018      	movs	r0, r3
   3035a:	46bd      	mov	sp, r7
   3035c:	bd80      	pop	{r7, pc}
   3035e:	46c0      	nop			; (mov r8, r8)
   30360:	00027e31 	.word	0x00027e31
   30364:	0001b939 	.word	0x0001b939
   30368:	00016009 	.word	0x00016009
   3036c:	00019f91 	.word	0x00019f91

00030370 <vApplicationDaemonTaskStartupHook>:
 * @details			This function is called from the FreeRToS timer task. Any code
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void) {
   30370:	b580      	push	{r7, lr}
   30372:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   30374:	4b0f      	ldr	r3, [pc, #60]	; (303b4 <vApplicationDaemonTaskStartupHook+0x44>)
   30376:	0018      	movs	r0, r3
   30378:	4b0f      	ldr	r3, [pc, #60]	; (303b8 <vApplicationDaemonTaskStartupHook+0x48>)
   3037a:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   3037c:	4b0f      	ldr	r3, [pc, #60]	; (303bc <vApplicationDaemonTaskStartupHook+0x4c>)
   3037e:	0018      	movs	r0, r3
   30380:	4b0d      	ldr	r3, [pc, #52]	; (303b8 <vApplicationDaemonTaskStartupHook+0x48>)
   30382:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   30384:	4b0e      	ldr	r3, [pc, #56]	; (303c0 <vApplicationDaemonTaskStartupHook+0x50>)
   30386:	4798      	blx	r3
   30388:	1e03      	subs	r3, r0, #0
   3038a:	d004      	beq.n	30396 <vApplicationDaemonTaskStartupHook+0x26>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   3038c:	4b0d      	ldr	r3, [pc, #52]	; (303c4 <vApplicationDaemonTaskStartupHook+0x54>)
   3038e:	0018      	movs	r0, r3
   30390:	4b09      	ldr	r3, [pc, #36]	; (303b8 <vApplicationDaemonTaskStartupHook+0x48>)
   30392:	4798      	blx	r3
   30394:	e003      	b.n	3039e <vApplicationDaemonTaskStartupHook+0x2e>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   30396:	4b0c      	ldr	r3, [pc, #48]	; (303c8 <vApplicationDaemonTaskStartupHook+0x58>)
   30398:	0018      	movs	r0, r3
   3039a:	4b07      	ldr	r3, [pc, #28]	; (303b8 <vApplicationDaemonTaskStartupHook+0x48>)
   3039c:	4798      	blx	r3
    }

    StartTasks();
   3039e:	4b0b      	ldr	r3, [pc, #44]	; (303cc <vApplicationDaemonTaskStartupHook+0x5c>)
   303a0:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   303a2:	4b0b      	ldr	r3, [pc, #44]	; (303d0 <vApplicationDaemonTaskStartupHook+0x60>)
   303a4:	681b      	ldr	r3, [r3, #0]
   303a6:	0018      	movs	r0, r3
   303a8:	4b0a      	ldr	r3, [pc, #40]	; (303d4 <vApplicationDaemonTaskStartupHook+0x64>)
   303aa:	4798      	blx	r3
}
   303ac:	46c0      	nop			; (mov r8, r8)
   303ae:	46bd      	mov	sp, r7
   303b0:	bd80      	pop	{r7, pc}
   303b2:	46c0      	nop			; (mov r8, r8)
   303b4:	00037238 	.word	0x00037238
   303b8:	0001b9a9 	.word	0x0001b9a9
   303bc:	0003725c 	.word	0x0003725c
   303c0:	00013665 	.word	0x00013665
   303c4:	00037274 	.word	0x00037274
   303c8:	00037298 	.word	0x00037298
   303cc:	000303d9 	.word	0x000303d9
   303d0:	20004170 	.word	0x20004170
   303d4:	00019e35 	.word	0x00019e35

000303d8 <StartTasks>:
 * @brief            Initialize application tasks
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void) {
   303d8:	b590      	push	{r4, r7, lr}
   303da:	b083      	sub	sp, #12
   303dc:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   303de:	4b26      	ldr	r3, [pc, #152]	; (30478 <StartTasks+0xa0>)
   303e0:	4798      	blx	r3
   303e2:	0003      	movs	r3, r0
   303e4:	4a25      	ldr	r2, [pc, #148]	; (3047c <StartTasks+0xa4>)
   303e6:	4826      	ldr	r0, [pc, #152]	; (30480 <StartTasks+0xa8>)
   303e8:	2140      	movs	r1, #64	; 0x40
   303ea:	4c26      	ldr	r4, [pc, #152]	; (30484 <StartTasks+0xac>)
   303ec:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   303ee:	4b24      	ldr	r3, [pc, #144]	; (30480 <StartTasks+0xa8>)
   303f0:	0018      	movs	r0, r3
   303f2:	4b25      	ldr	r3, [pc, #148]	; (30488 <StartTasks+0xb0>)
   303f4:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   303f6:	23c8      	movs	r3, #200	; 0xc8
   303f8:	005a      	lsls	r2, r3, #1
   303fa:	4924      	ldr	r1, [pc, #144]	; (3048c <StartTasks+0xb4>)
   303fc:	4824      	ldr	r0, [pc, #144]	; (30490 <StartTasks+0xb8>)
   303fe:	4b25      	ldr	r3, [pc, #148]	; (30494 <StartTasks+0xbc>)
   30400:	9301      	str	r3, [sp, #4]
   30402:	2304      	movs	r3, #4
   30404:	9300      	str	r3, [sp, #0]
   30406:	2300      	movs	r3, #0
   30408:	4c23      	ldr	r4, [pc, #140]	; (30498 <StartTasks+0xc0>)
   3040a:	47a0      	blx	r4
   3040c:	0003      	movs	r3, r0
   3040e:	2b01      	cmp	r3, #1
   30410:	d003      	beq.n	3041a <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   30412:	4b22      	ldr	r3, [pc, #136]	; (3049c <StartTasks+0xc4>)
   30414:	0018      	movs	r0, r3
   30416:	4b1c      	ldr	r3, [pc, #112]	; (30488 <StartTasks+0xb0>)
   30418:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   3041a:	4b17      	ldr	r3, [pc, #92]	; (30478 <StartTasks+0xa0>)
   3041c:	4798      	blx	r3
   3041e:	0003      	movs	r3, r0
   30420:	4a1f      	ldr	r2, [pc, #124]	; (304a0 <StartTasks+0xc8>)
   30422:	4817      	ldr	r0, [pc, #92]	; (30480 <StartTasks+0xa8>)
   30424:	2140      	movs	r1, #64	; 0x40
   30426:	4c17      	ldr	r4, [pc, #92]	; (30484 <StartTasks+0xac>)
   30428:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3042a:	4b15      	ldr	r3, [pc, #84]	; (30480 <StartTasks+0xa8>)
   3042c:	0018      	movs	r0, r3
   3042e:	4b16      	ldr	r3, [pc, #88]	; (30488 <StartTasks+0xb0>)
   30430:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
	SerialConsoleWriteString(bufferPrint);*/

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   30432:	2396      	movs	r3, #150	; 0x96
   30434:	009a      	lsls	r2, r3, #2
   30436:	491b      	ldr	r1, [pc, #108]	; (304a4 <StartTasks+0xcc>)
   30438:	481b      	ldr	r0, [pc, #108]	; (304a8 <StartTasks+0xd0>)
   3043a:	4b1c      	ldr	r3, [pc, #112]	; (304ac <StartTasks+0xd4>)
   3043c:	9301      	str	r3, [sp, #4]
   3043e:	2303      	movs	r3, #3
   30440:	9300      	str	r3, [sp, #0]
   30442:	2300      	movs	r3, #0
   30444:	4c14      	ldr	r4, [pc, #80]	; (30498 <StartTasks+0xc0>)
   30446:	47a0      	blx	r4
   30448:	0003      	movs	r3, r0
   3044a:	2b01      	cmp	r3, #1
   3044c:	d003      	beq.n	30456 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   3044e:	4b18      	ldr	r3, [pc, #96]	; (304b0 <StartTasks+0xd8>)
   30450:	0018      	movs	r0, r3
   30452:	4b0d      	ldr	r3, [pc, #52]	; (30488 <StartTasks+0xb0>)
   30454:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   30456:	4b08      	ldr	r3, [pc, #32]	; (30478 <StartTasks+0xa0>)
   30458:	4798      	blx	r3
   3045a:	0003      	movs	r3, r0
   3045c:	4a15      	ldr	r2, [pc, #84]	; (304b4 <StartTasks+0xdc>)
   3045e:	4808      	ldr	r0, [pc, #32]	; (30480 <StartTasks+0xa8>)
   30460:	2140      	movs	r1, #64	; 0x40
   30462:	4c08      	ldr	r4, [pc, #32]	; (30484 <StartTasks+0xac>)
   30464:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   30466:	4b06      	ldr	r3, [pc, #24]	; (30480 <StartTasks+0xa8>)
   30468:	0018      	movs	r0, r3
   3046a:	4b07      	ldr	r3, [pc, #28]	; (30488 <StartTasks+0xb0>)
   3046c:	4798      	blx	r3
		SerialConsoleWriteString("ERR: ADC SPI task could not be initialized!\r\n");
	}
	snprintf(bufferPrint, 64, "Heap after starting SPI: %d\r\n", xPortGetFreeHeapSize());
	SerialConsoleWriteString(bufferPrint);*/
	
}
   3046e:	46c0      	nop			; (mov r8, r8)
   30470:	46bd      	mov	sp, r7
   30472:	b001      	add	sp, #4
   30474:	bd90      	pop	{r4, r7, pc}
   30476:	46c0      	nop			; (mov r8, r8)
   30478:	00017f71 	.word	0x00017f71
   3047c:	000372b4 	.word	0x000372b4
   30480:	200055c0 	.word	0x200055c0
   30484:	000323fd 	.word	0x000323fd
   30488:	0001b9a9 	.word	0x0001b9a9
   3048c:	000372d8 	.word	0x000372d8
   30490:	00012cd9 	.word	0x00012cd9
   30494:	2000416c 	.word	0x2000416c
   30498:	000199b9 	.word	0x000199b9
   3049c:	000372e4 	.word	0x000372e4
   304a0:	00037310 	.word	0x00037310
   304a4:	00037330 	.word	0x00037330
   304a8:	00014ead 	.word	0x00014ead
   304ac:	20004174 	.word	0x20004174
   304b0:	0003733c 	.word	0x0003733c
   304b4:	00037368 	.word	0x00037368

000304b8 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void) {
   304b8:	b580      	push	{r7, lr}
   304ba:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   304bc:	4b02      	ldr	r3, [pc, #8]	; (304c8 <vApplicationMallocFailedHook+0x10>)
   304be:	0018      	movs	r0, r3
   304c0:	4b02      	ldr	r3, [pc, #8]	; (304cc <vApplicationMallocFailedHook+0x14>)
   304c2:	4798      	blx	r3
    while (1)
   304c4:	e7fe      	b.n	304c4 <vApplicationMallocFailedHook+0xc>
   304c6:	46c0      	nop			; (mov r8, r8)
   304c8:	00037388 	.word	0x00037388
   304cc:	0001b9a9 	.word	0x0001b9a9

000304d0 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void) {
   304d0:	b580      	push	{r7, lr}
   304d2:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   304d4:	4b02      	ldr	r3, [pc, #8]	; (304e0 <vApplicationStackOverflowHook+0x10>)
   304d6:	0018      	movs	r0, r3
   304d8:	4b02      	ldr	r3, [pc, #8]	; (304e4 <vApplicationStackOverflowHook+0x14>)
   304da:	4798      	blx	r3
    while (1)
   304dc:	e7fe      	b.n	304dc <vApplicationStackOverflowHook+0xc>
   304de:	46c0      	nop			; (mov r8, r8)
   304e0:	000373b4 	.word	0x000373b4
   304e4:	0001b9a9 	.word	0x0001b9a9

000304e8 <__udivsi3>:
   304e8:	2200      	movs	r2, #0
   304ea:	0843      	lsrs	r3, r0, #1
   304ec:	428b      	cmp	r3, r1
   304ee:	d374      	bcc.n	305da <__udivsi3+0xf2>
   304f0:	0903      	lsrs	r3, r0, #4
   304f2:	428b      	cmp	r3, r1
   304f4:	d35f      	bcc.n	305b6 <__udivsi3+0xce>
   304f6:	0a03      	lsrs	r3, r0, #8
   304f8:	428b      	cmp	r3, r1
   304fa:	d344      	bcc.n	30586 <__udivsi3+0x9e>
   304fc:	0b03      	lsrs	r3, r0, #12
   304fe:	428b      	cmp	r3, r1
   30500:	d328      	bcc.n	30554 <__udivsi3+0x6c>
   30502:	0c03      	lsrs	r3, r0, #16
   30504:	428b      	cmp	r3, r1
   30506:	d30d      	bcc.n	30524 <__udivsi3+0x3c>
   30508:	22ff      	movs	r2, #255	; 0xff
   3050a:	0209      	lsls	r1, r1, #8
   3050c:	ba12      	rev	r2, r2
   3050e:	0c03      	lsrs	r3, r0, #16
   30510:	428b      	cmp	r3, r1
   30512:	d302      	bcc.n	3051a <__udivsi3+0x32>
   30514:	1212      	asrs	r2, r2, #8
   30516:	0209      	lsls	r1, r1, #8
   30518:	d065      	beq.n	305e6 <__udivsi3+0xfe>
   3051a:	0b03      	lsrs	r3, r0, #12
   3051c:	428b      	cmp	r3, r1
   3051e:	d319      	bcc.n	30554 <__udivsi3+0x6c>
   30520:	e000      	b.n	30524 <__udivsi3+0x3c>
   30522:	0a09      	lsrs	r1, r1, #8
   30524:	0bc3      	lsrs	r3, r0, #15
   30526:	428b      	cmp	r3, r1
   30528:	d301      	bcc.n	3052e <__udivsi3+0x46>
   3052a:	03cb      	lsls	r3, r1, #15
   3052c:	1ac0      	subs	r0, r0, r3
   3052e:	4152      	adcs	r2, r2
   30530:	0b83      	lsrs	r3, r0, #14
   30532:	428b      	cmp	r3, r1
   30534:	d301      	bcc.n	3053a <__udivsi3+0x52>
   30536:	038b      	lsls	r3, r1, #14
   30538:	1ac0      	subs	r0, r0, r3
   3053a:	4152      	adcs	r2, r2
   3053c:	0b43      	lsrs	r3, r0, #13
   3053e:	428b      	cmp	r3, r1
   30540:	d301      	bcc.n	30546 <__udivsi3+0x5e>
   30542:	034b      	lsls	r3, r1, #13
   30544:	1ac0      	subs	r0, r0, r3
   30546:	4152      	adcs	r2, r2
   30548:	0b03      	lsrs	r3, r0, #12
   3054a:	428b      	cmp	r3, r1
   3054c:	d301      	bcc.n	30552 <__udivsi3+0x6a>
   3054e:	030b      	lsls	r3, r1, #12
   30550:	1ac0      	subs	r0, r0, r3
   30552:	4152      	adcs	r2, r2
   30554:	0ac3      	lsrs	r3, r0, #11
   30556:	428b      	cmp	r3, r1
   30558:	d301      	bcc.n	3055e <__udivsi3+0x76>
   3055a:	02cb      	lsls	r3, r1, #11
   3055c:	1ac0      	subs	r0, r0, r3
   3055e:	4152      	adcs	r2, r2
   30560:	0a83      	lsrs	r3, r0, #10
   30562:	428b      	cmp	r3, r1
   30564:	d301      	bcc.n	3056a <__udivsi3+0x82>
   30566:	028b      	lsls	r3, r1, #10
   30568:	1ac0      	subs	r0, r0, r3
   3056a:	4152      	adcs	r2, r2
   3056c:	0a43      	lsrs	r3, r0, #9
   3056e:	428b      	cmp	r3, r1
   30570:	d301      	bcc.n	30576 <__udivsi3+0x8e>
   30572:	024b      	lsls	r3, r1, #9
   30574:	1ac0      	subs	r0, r0, r3
   30576:	4152      	adcs	r2, r2
   30578:	0a03      	lsrs	r3, r0, #8
   3057a:	428b      	cmp	r3, r1
   3057c:	d301      	bcc.n	30582 <__udivsi3+0x9a>
   3057e:	020b      	lsls	r3, r1, #8
   30580:	1ac0      	subs	r0, r0, r3
   30582:	4152      	adcs	r2, r2
   30584:	d2cd      	bcs.n	30522 <__udivsi3+0x3a>
   30586:	09c3      	lsrs	r3, r0, #7
   30588:	428b      	cmp	r3, r1
   3058a:	d301      	bcc.n	30590 <__udivsi3+0xa8>
   3058c:	01cb      	lsls	r3, r1, #7
   3058e:	1ac0      	subs	r0, r0, r3
   30590:	4152      	adcs	r2, r2
   30592:	0983      	lsrs	r3, r0, #6
   30594:	428b      	cmp	r3, r1
   30596:	d301      	bcc.n	3059c <__udivsi3+0xb4>
   30598:	018b      	lsls	r3, r1, #6
   3059a:	1ac0      	subs	r0, r0, r3
   3059c:	4152      	adcs	r2, r2
   3059e:	0943      	lsrs	r3, r0, #5
   305a0:	428b      	cmp	r3, r1
   305a2:	d301      	bcc.n	305a8 <__udivsi3+0xc0>
   305a4:	014b      	lsls	r3, r1, #5
   305a6:	1ac0      	subs	r0, r0, r3
   305a8:	4152      	adcs	r2, r2
   305aa:	0903      	lsrs	r3, r0, #4
   305ac:	428b      	cmp	r3, r1
   305ae:	d301      	bcc.n	305b4 <__udivsi3+0xcc>
   305b0:	010b      	lsls	r3, r1, #4
   305b2:	1ac0      	subs	r0, r0, r3
   305b4:	4152      	adcs	r2, r2
   305b6:	08c3      	lsrs	r3, r0, #3
   305b8:	428b      	cmp	r3, r1
   305ba:	d301      	bcc.n	305c0 <__udivsi3+0xd8>
   305bc:	00cb      	lsls	r3, r1, #3
   305be:	1ac0      	subs	r0, r0, r3
   305c0:	4152      	adcs	r2, r2
   305c2:	0883      	lsrs	r3, r0, #2
   305c4:	428b      	cmp	r3, r1
   305c6:	d301      	bcc.n	305cc <__udivsi3+0xe4>
   305c8:	008b      	lsls	r3, r1, #2
   305ca:	1ac0      	subs	r0, r0, r3
   305cc:	4152      	adcs	r2, r2
   305ce:	0843      	lsrs	r3, r0, #1
   305d0:	428b      	cmp	r3, r1
   305d2:	d301      	bcc.n	305d8 <__udivsi3+0xf0>
   305d4:	004b      	lsls	r3, r1, #1
   305d6:	1ac0      	subs	r0, r0, r3
   305d8:	4152      	adcs	r2, r2
   305da:	1a41      	subs	r1, r0, r1
   305dc:	d200      	bcs.n	305e0 <__udivsi3+0xf8>
   305de:	4601      	mov	r1, r0
   305e0:	4152      	adcs	r2, r2
   305e2:	4610      	mov	r0, r2
   305e4:	4770      	bx	lr
   305e6:	e7ff      	b.n	305e8 <__udivsi3+0x100>
   305e8:	b501      	push	{r0, lr}
   305ea:	2000      	movs	r0, #0
   305ec:	f000 f8f0 	bl	307d0 <__aeabi_idiv0>
   305f0:	bd02      	pop	{r1, pc}
   305f2:	46c0      	nop			; (mov r8, r8)

000305f4 <__aeabi_uidivmod>:
   305f4:	2900      	cmp	r1, #0
   305f6:	d0f7      	beq.n	305e8 <__udivsi3+0x100>
   305f8:	e776      	b.n	304e8 <__udivsi3>
   305fa:	4770      	bx	lr

000305fc <__divsi3>:
   305fc:	4603      	mov	r3, r0
   305fe:	430b      	orrs	r3, r1
   30600:	d47f      	bmi.n	30702 <__divsi3+0x106>
   30602:	2200      	movs	r2, #0
   30604:	0843      	lsrs	r3, r0, #1
   30606:	428b      	cmp	r3, r1
   30608:	d374      	bcc.n	306f4 <__divsi3+0xf8>
   3060a:	0903      	lsrs	r3, r0, #4
   3060c:	428b      	cmp	r3, r1
   3060e:	d35f      	bcc.n	306d0 <__divsi3+0xd4>
   30610:	0a03      	lsrs	r3, r0, #8
   30612:	428b      	cmp	r3, r1
   30614:	d344      	bcc.n	306a0 <__divsi3+0xa4>
   30616:	0b03      	lsrs	r3, r0, #12
   30618:	428b      	cmp	r3, r1
   3061a:	d328      	bcc.n	3066e <__divsi3+0x72>
   3061c:	0c03      	lsrs	r3, r0, #16
   3061e:	428b      	cmp	r3, r1
   30620:	d30d      	bcc.n	3063e <__divsi3+0x42>
   30622:	22ff      	movs	r2, #255	; 0xff
   30624:	0209      	lsls	r1, r1, #8
   30626:	ba12      	rev	r2, r2
   30628:	0c03      	lsrs	r3, r0, #16
   3062a:	428b      	cmp	r3, r1
   3062c:	d302      	bcc.n	30634 <__divsi3+0x38>
   3062e:	1212      	asrs	r2, r2, #8
   30630:	0209      	lsls	r1, r1, #8
   30632:	d065      	beq.n	30700 <__divsi3+0x104>
   30634:	0b03      	lsrs	r3, r0, #12
   30636:	428b      	cmp	r3, r1
   30638:	d319      	bcc.n	3066e <__divsi3+0x72>
   3063a:	e000      	b.n	3063e <__divsi3+0x42>
   3063c:	0a09      	lsrs	r1, r1, #8
   3063e:	0bc3      	lsrs	r3, r0, #15
   30640:	428b      	cmp	r3, r1
   30642:	d301      	bcc.n	30648 <__divsi3+0x4c>
   30644:	03cb      	lsls	r3, r1, #15
   30646:	1ac0      	subs	r0, r0, r3
   30648:	4152      	adcs	r2, r2
   3064a:	0b83      	lsrs	r3, r0, #14
   3064c:	428b      	cmp	r3, r1
   3064e:	d301      	bcc.n	30654 <__divsi3+0x58>
   30650:	038b      	lsls	r3, r1, #14
   30652:	1ac0      	subs	r0, r0, r3
   30654:	4152      	adcs	r2, r2
   30656:	0b43      	lsrs	r3, r0, #13
   30658:	428b      	cmp	r3, r1
   3065a:	d301      	bcc.n	30660 <__divsi3+0x64>
   3065c:	034b      	lsls	r3, r1, #13
   3065e:	1ac0      	subs	r0, r0, r3
   30660:	4152      	adcs	r2, r2
   30662:	0b03      	lsrs	r3, r0, #12
   30664:	428b      	cmp	r3, r1
   30666:	d301      	bcc.n	3066c <__divsi3+0x70>
   30668:	030b      	lsls	r3, r1, #12
   3066a:	1ac0      	subs	r0, r0, r3
   3066c:	4152      	adcs	r2, r2
   3066e:	0ac3      	lsrs	r3, r0, #11
   30670:	428b      	cmp	r3, r1
   30672:	d301      	bcc.n	30678 <__divsi3+0x7c>
   30674:	02cb      	lsls	r3, r1, #11
   30676:	1ac0      	subs	r0, r0, r3
   30678:	4152      	adcs	r2, r2
   3067a:	0a83      	lsrs	r3, r0, #10
   3067c:	428b      	cmp	r3, r1
   3067e:	d301      	bcc.n	30684 <__divsi3+0x88>
   30680:	028b      	lsls	r3, r1, #10
   30682:	1ac0      	subs	r0, r0, r3
   30684:	4152      	adcs	r2, r2
   30686:	0a43      	lsrs	r3, r0, #9
   30688:	428b      	cmp	r3, r1
   3068a:	d301      	bcc.n	30690 <__divsi3+0x94>
   3068c:	024b      	lsls	r3, r1, #9
   3068e:	1ac0      	subs	r0, r0, r3
   30690:	4152      	adcs	r2, r2
   30692:	0a03      	lsrs	r3, r0, #8
   30694:	428b      	cmp	r3, r1
   30696:	d301      	bcc.n	3069c <__divsi3+0xa0>
   30698:	020b      	lsls	r3, r1, #8
   3069a:	1ac0      	subs	r0, r0, r3
   3069c:	4152      	adcs	r2, r2
   3069e:	d2cd      	bcs.n	3063c <__divsi3+0x40>
   306a0:	09c3      	lsrs	r3, r0, #7
   306a2:	428b      	cmp	r3, r1
   306a4:	d301      	bcc.n	306aa <__divsi3+0xae>
   306a6:	01cb      	lsls	r3, r1, #7
   306a8:	1ac0      	subs	r0, r0, r3
   306aa:	4152      	adcs	r2, r2
   306ac:	0983      	lsrs	r3, r0, #6
   306ae:	428b      	cmp	r3, r1
   306b0:	d301      	bcc.n	306b6 <__divsi3+0xba>
   306b2:	018b      	lsls	r3, r1, #6
   306b4:	1ac0      	subs	r0, r0, r3
   306b6:	4152      	adcs	r2, r2
   306b8:	0943      	lsrs	r3, r0, #5
   306ba:	428b      	cmp	r3, r1
   306bc:	d301      	bcc.n	306c2 <__divsi3+0xc6>
   306be:	014b      	lsls	r3, r1, #5
   306c0:	1ac0      	subs	r0, r0, r3
   306c2:	4152      	adcs	r2, r2
   306c4:	0903      	lsrs	r3, r0, #4
   306c6:	428b      	cmp	r3, r1
   306c8:	d301      	bcc.n	306ce <__divsi3+0xd2>
   306ca:	010b      	lsls	r3, r1, #4
   306cc:	1ac0      	subs	r0, r0, r3
   306ce:	4152      	adcs	r2, r2
   306d0:	08c3      	lsrs	r3, r0, #3
   306d2:	428b      	cmp	r3, r1
   306d4:	d301      	bcc.n	306da <__divsi3+0xde>
   306d6:	00cb      	lsls	r3, r1, #3
   306d8:	1ac0      	subs	r0, r0, r3
   306da:	4152      	adcs	r2, r2
   306dc:	0883      	lsrs	r3, r0, #2
   306de:	428b      	cmp	r3, r1
   306e0:	d301      	bcc.n	306e6 <__divsi3+0xea>
   306e2:	008b      	lsls	r3, r1, #2
   306e4:	1ac0      	subs	r0, r0, r3
   306e6:	4152      	adcs	r2, r2
   306e8:	0843      	lsrs	r3, r0, #1
   306ea:	428b      	cmp	r3, r1
   306ec:	d301      	bcc.n	306f2 <__divsi3+0xf6>
   306ee:	004b      	lsls	r3, r1, #1
   306f0:	1ac0      	subs	r0, r0, r3
   306f2:	4152      	adcs	r2, r2
   306f4:	1a41      	subs	r1, r0, r1
   306f6:	d200      	bcs.n	306fa <__divsi3+0xfe>
   306f8:	4601      	mov	r1, r0
   306fa:	4152      	adcs	r2, r2
   306fc:	4610      	mov	r0, r2
   306fe:	4770      	bx	lr
   30700:	e05d      	b.n	307be <__divsi3+0x1c2>
   30702:	0fca      	lsrs	r2, r1, #31
   30704:	d000      	beq.n	30708 <__divsi3+0x10c>
   30706:	4249      	negs	r1, r1
   30708:	1003      	asrs	r3, r0, #32
   3070a:	d300      	bcc.n	3070e <__divsi3+0x112>
   3070c:	4240      	negs	r0, r0
   3070e:	4053      	eors	r3, r2
   30710:	2200      	movs	r2, #0
   30712:	469c      	mov	ip, r3
   30714:	0903      	lsrs	r3, r0, #4
   30716:	428b      	cmp	r3, r1
   30718:	d32d      	bcc.n	30776 <__divsi3+0x17a>
   3071a:	0a03      	lsrs	r3, r0, #8
   3071c:	428b      	cmp	r3, r1
   3071e:	d312      	bcc.n	30746 <__divsi3+0x14a>
   30720:	22fc      	movs	r2, #252	; 0xfc
   30722:	0189      	lsls	r1, r1, #6
   30724:	ba12      	rev	r2, r2
   30726:	0a03      	lsrs	r3, r0, #8
   30728:	428b      	cmp	r3, r1
   3072a:	d30c      	bcc.n	30746 <__divsi3+0x14a>
   3072c:	0189      	lsls	r1, r1, #6
   3072e:	1192      	asrs	r2, r2, #6
   30730:	428b      	cmp	r3, r1
   30732:	d308      	bcc.n	30746 <__divsi3+0x14a>
   30734:	0189      	lsls	r1, r1, #6
   30736:	1192      	asrs	r2, r2, #6
   30738:	428b      	cmp	r3, r1
   3073a:	d304      	bcc.n	30746 <__divsi3+0x14a>
   3073c:	0189      	lsls	r1, r1, #6
   3073e:	d03a      	beq.n	307b6 <__divsi3+0x1ba>
   30740:	1192      	asrs	r2, r2, #6
   30742:	e000      	b.n	30746 <__divsi3+0x14a>
   30744:	0989      	lsrs	r1, r1, #6
   30746:	09c3      	lsrs	r3, r0, #7
   30748:	428b      	cmp	r3, r1
   3074a:	d301      	bcc.n	30750 <__divsi3+0x154>
   3074c:	01cb      	lsls	r3, r1, #7
   3074e:	1ac0      	subs	r0, r0, r3
   30750:	4152      	adcs	r2, r2
   30752:	0983      	lsrs	r3, r0, #6
   30754:	428b      	cmp	r3, r1
   30756:	d301      	bcc.n	3075c <__divsi3+0x160>
   30758:	018b      	lsls	r3, r1, #6
   3075a:	1ac0      	subs	r0, r0, r3
   3075c:	4152      	adcs	r2, r2
   3075e:	0943      	lsrs	r3, r0, #5
   30760:	428b      	cmp	r3, r1
   30762:	d301      	bcc.n	30768 <__divsi3+0x16c>
   30764:	014b      	lsls	r3, r1, #5
   30766:	1ac0      	subs	r0, r0, r3
   30768:	4152      	adcs	r2, r2
   3076a:	0903      	lsrs	r3, r0, #4
   3076c:	428b      	cmp	r3, r1
   3076e:	d301      	bcc.n	30774 <__divsi3+0x178>
   30770:	010b      	lsls	r3, r1, #4
   30772:	1ac0      	subs	r0, r0, r3
   30774:	4152      	adcs	r2, r2
   30776:	08c3      	lsrs	r3, r0, #3
   30778:	428b      	cmp	r3, r1
   3077a:	d301      	bcc.n	30780 <__divsi3+0x184>
   3077c:	00cb      	lsls	r3, r1, #3
   3077e:	1ac0      	subs	r0, r0, r3
   30780:	4152      	adcs	r2, r2
   30782:	0883      	lsrs	r3, r0, #2
   30784:	428b      	cmp	r3, r1
   30786:	d301      	bcc.n	3078c <__divsi3+0x190>
   30788:	008b      	lsls	r3, r1, #2
   3078a:	1ac0      	subs	r0, r0, r3
   3078c:	4152      	adcs	r2, r2
   3078e:	d2d9      	bcs.n	30744 <__divsi3+0x148>
   30790:	0843      	lsrs	r3, r0, #1
   30792:	428b      	cmp	r3, r1
   30794:	d301      	bcc.n	3079a <__divsi3+0x19e>
   30796:	004b      	lsls	r3, r1, #1
   30798:	1ac0      	subs	r0, r0, r3
   3079a:	4152      	adcs	r2, r2
   3079c:	1a41      	subs	r1, r0, r1
   3079e:	d200      	bcs.n	307a2 <__divsi3+0x1a6>
   307a0:	4601      	mov	r1, r0
   307a2:	4663      	mov	r3, ip
   307a4:	4152      	adcs	r2, r2
   307a6:	105b      	asrs	r3, r3, #1
   307a8:	4610      	mov	r0, r2
   307aa:	d301      	bcc.n	307b0 <__divsi3+0x1b4>
   307ac:	4240      	negs	r0, r0
   307ae:	2b00      	cmp	r3, #0
   307b0:	d500      	bpl.n	307b4 <__divsi3+0x1b8>
   307b2:	4249      	negs	r1, r1
   307b4:	4770      	bx	lr
   307b6:	4663      	mov	r3, ip
   307b8:	105b      	asrs	r3, r3, #1
   307ba:	d300      	bcc.n	307be <__divsi3+0x1c2>
   307bc:	4240      	negs	r0, r0
   307be:	b501      	push	{r0, lr}
   307c0:	2000      	movs	r0, #0
   307c2:	f000 f805 	bl	307d0 <__aeabi_idiv0>
   307c6:	bd02      	pop	{r1, pc}

000307c8 <__aeabi_idivmod>:
   307c8:	2900      	cmp	r1, #0
   307ca:	d0f8      	beq.n	307be <__divsi3+0x1c2>
   307cc:	e716      	b.n	305fc <__divsi3>
   307ce:	4770      	bx	lr

000307d0 <__aeabi_idiv0>:
   307d0:	4770      	bx	lr
   307d2:	46c0      	nop			; (mov r8, r8)

000307d4 <__aeabi_lmul>:
   307d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   307d6:	46ce      	mov	lr, r9
   307d8:	4647      	mov	r7, r8
   307da:	0415      	lsls	r5, r2, #16
   307dc:	0c2d      	lsrs	r5, r5, #16
   307de:	002e      	movs	r6, r5
   307e0:	b580      	push	{r7, lr}
   307e2:	0407      	lsls	r7, r0, #16
   307e4:	0c14      	lsrs	r4, r2, #16
   307e6:	0c3f      	lsrs	r7, r7, #16
   307e8:	4699      	mov	r9, r3
   307ea:	0c03      	lsrs	r3, r0, #16
   307ec:	437e      	muls	r6, r7
   307ee:	435d      	muls	r5, r3
   307f0:	4367      	muls	r7, r4
   307f2:	4363      	muls	r3, r4
   307f4:	197f      	adds	r7, r7, r5
   307f6:	0c34      	lsrs	r4, r6, #16
   307f8:	19e4      	adds	r4, r4, r7
   307fa:	469c      	mov	ip, r3
   307fc:	42a5      	cmp	r5, r4
   307fe:	d903      	bls.n	30808 <__aeabi_lmul+0x34>
   30800:	2380      	movs	r3, #128	; 0x80
   30802:	025b      	lsls	r3, r3, #9
   30804:	4698      	mov	r8, r3
   30806:	44c4      	add	ip, r8
   30808:	464b      	mov	r3, r9
   3080a:	4351      	muls	r1, r2
   3080c:	4343      	muls	r3, r0
   3080e:	0436      	lsls	r6, r6, #16
   30810:	0c36      	lsrs	r6, r6, #16
   30812:	0c25      	lsrs	r5, r4, #16
   30814:	0424      	lsls	r4, r4, #16
   30816:	4465      	add	r5, ip
   30818:	19a4      	adds	r4, r4, r6
   3081a:	1859      	adds	r1, r3, r1
   3081c:	1949      	adds	r1, r1, r5
   3081e:	0020      	movs	r0, r4
   30820:	bc0c      	pop	{r2, r3}
   30822:	4690      	mov	r8, r2
   30824:	4699      	mov	r9, r3
   30826:	bdf0      	pop	{r4, r5, r6, r7, pc}

00030828 <__aeabi_dadd>:
   30828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3082a:	4645      	mov	r5, r8
   3082c:	46de      	mov	lr, fp
   3082e:	4657      	mov	r7, sl
   30830:	464e      	mov	r6, r9
   30832:	030c      	lsls	r4, r1, #12
   30834:	b5e0      	push	{r5, r6, r7, lr}
   30836:	004e      	lsls	r6, r1, #1
   30838:	0fc9      	lsrs	r1, r1, #31
   3083a:	4688      	mov	r8, r1
   3083c:	000d      	movs	r5, r1
   3083e:	0a61      	lsrs	r1, r4, #9
   30840:	0f44      	lsrs	r4, r0, #29
   30842:	430c      	orrs	r4, r1
   30844:	00c7      	lsls	r7, r0, #3
   30846:	0319      	lsls	r1, r3, #12
   30848:	0058      	lsls	r0, r3, #1
   3084a:	0fdb      	lsrs	r3, r3, #31
   3084c:	469b      	mov	fp, r3
   3084e:	0a4b      	lsrs	r3, r1, #9
   30850:	0f51      	lsrs	r1, r2, #29
   30852:	430b      	orrs	r3, r1
   30854:	0d76      	lsrs	r6, r6, #21
   30856:	0d40      	lsrs	r0, r0, #21
   30858:	0019      	movs	r1, r3
   3085a:	00d2      	lsls	r2, r2, #3
   3085c:	45d8      	cmp	r8, fp
   3085e:	d100      	bne.n	30862 <__aeabi_dadd+0x3a>
   30860:	e0ae      	b.n	309c0 <__aeabi_dadd+0x198>
   30862:	1a35      	subs	r5, r6, r0
   30864:	2d00      	cmp	r5, #0
   30866:	dc00      	bgt.n	3086a <__aeabi_dadd+0x42>
   30868:	e0f6      	b.n	30a58 <__aeabi_dadd+0x230>
   3086a:	2800      	cmp	r0, #0
   3086c:	d10f      	bne.n	3088e <__aeabi_dadd+0x66>
   3086e:	4313      	orrs	r3, r2
   30870:	d100      	bne.n	30874 <__aeabi_dadd+0x4c>
   30872:	e0db      	b.n	30a2c <__aeabi_dadd+0x204>
   30874:	1e6b      	subs	r3, r5, #1
   30876:	2b00      	cmp	r3, #0
   30878:	d000      	beq.n	3087c <__aeabi_dadd+0x54>
   3087a:	e137      	b.n	30aec <__aeabi_dadd+0x2c4>
   3087c:	1aba      	subs	r2, r7, r2
   3087e:	4297      	cmp	r7, r2
   30880:	41bf      	sbcs	r7, r7
   30882:	1a64      	subs	r4, r4, r1
   30884:	427f      	negs	r7, r7
   30886:	1be4      	subs	r4, r4, r7
   30888:	2601      	movs	r6, #1
   3088a:	0017      	movs	r7, r2
   3088c:	e024      	b.n	308d8 <__aeabi_dadd+0xb0>
   3088e:	4bc6      	ldr	r3, [pc, #792]	; (30ba8 <__aeabi_dadd+0x380>)
   30890:	429e      	cmp	r6, r3
   30892:	d04d      	beq.n	30930 <__aeabi_dadd+0x108>
   30894:	2380      	movs	r3, #128	; 0x80
   30896:	041b      	lsls	r3, r3, #16
   30898:	4319      	orrs	r1, r3
   3089a:	2d38      	cmp	r5, #56	; 0x38
   3089c:	dd00      	ble.n	308a0 <__aeabi_dadd+0x78>
   3089e:	e107      	b.n	30ab0 <__aeabi_dadd+0x288>
   308a0:	2d1f      	cmp	r5, #31
   308a2:	dd00      	ble.n	308a6 <__aeabi_dadd+0x7e>
   308a4:	e138      	b.n	30b18 <__aeabi_dadd+0x2f0>
   308a6:	2020      	movs	r0, #32
   308a8:	1b43      	subs	r3, r0, r5
   308aa:	469a      	mov	sl, r3
   308ac:	000b      	movs	r3, r1
   308ae:	4650      	mov	r0, sl
   308b0:	4083      	lsls	r3, r0
   308b2:	4699      	mov	r9, r3
   308b4:	0013      	movs	r3, r2
   308b6:	4648      	mov	r0, r9
   308b8:	40eb      	lsrs	r3, r5
   308ba:	4318      	orrs	r0, r3
   308bc:	0003      	movs	r3, r0
   308be:	4650      	mov	r0, sl
   308c0:	4082      	lsls	r2, r0
   308c2:	1e50      	subs	r0, r2, #1
   308c4:	4182      	sbcs	r2, r0
   308c6:	40e9      	lsrs	r1, r5
   308c8:	431a      	orrs	r2, r3
   308ca:	1aba      	subs	r2, r7, r2
   308cc:	1a61      	subs	r1, r4, r1
   308ce:	4297      	cmp	r7, r2
   308d0:	41a4      	sbcs	r4, r4
   308d2:	0017      	movs	r7, r2
   308d4:	4264      	negs	r4, r4
   308d6:	1b0c      	subs	r4, r1, r4
   308d8:	0223      	lsls	r3, r4, #8
   308da:	d562      	bpl.n	309a2 <__aeabi_dadd+0x17a>
   308dc:	0264      	lsls	r4, r4, #9
   308de:	0a65      	lsrs	r5, r4, #9
   308e0:	2d00      	cmp	r5, #0
   308e2:	d100      	bne.n	308e6 <__aeabi_dadd+0xbe>
   308e4:	e0df      	b.n	30aa6 <__aeabi_dadd+0x27e>
   308e6:	0028      	movs	r0, r5
   308e8:	f001 fbe4 	bl	320b4 <__clzsi2>
   308ec:	0003      	movs	r3, r0
   308ee:	3b08      	subs	r3, #8
   308f0:	2b1f      	cmp	r3, #31
   308f2:	dd00      	ble.n	308f6 <__aeabi_dadd+0xce>
   308f4:	e0d2      	b.n	30a9c <__aeabi_dadd+0x274>
   308f6:	2220      	movs	r2, #32
   308f8:	003c      	movs	r4, r7
   308fa:	1ad2      	subs	r2, r2, r3
   308fc:	409d      	lsls	r5, r3
   308fe:	40d4      	lsrs	r4, r2
   30900:	409f      	lsls	r7, r3
   30902:	4325      	orrs	r5, r4
   30904:	429e      	cmp	r6, r3
   30906:	dd00      	ble.n	3090a <__aeabi_dadd+0xe2>
   30908:	e0c4      	b.n	30a94 <__aeabi_dadd+0x26c>
   3090a:	1b9e      	subs	r6, r3, r6
   3090c:	1c73      	adds	r3, r6, #1
   3090e:	2b1f      	cmp	r3, #31
   30910:	dd00      	ble.n	30914 <__aeabi_dadd+0xec>
   30912:	e0f1      	b.n	30af8 <__aeabi_dadd+0x2d0>
   30914:	2220      	movs	r2, #32
   30916:	0038      	movs	r0, r7
   30918:	0029      	movs	r1, r5
   3091a:	1ad2      	subs	r2, r2, r3
   3091c:	40d8      	lsrs	r0, r3
   3091e:	4091      	lsls	r1, r2
   30920:	4097      	lsls	r7, r2
   30922:	002c      	movs	r4, r5
   30924:	4301      	orrs	r1, r0
   30926:	1e78      	subs	r0, r7, #1
   30928:	4187      	sbcs	r7, r0
   3092a:	40dc      	lsrs	r4, r3
   3092c:	2600      	movs	r6, #0
   3092e:	430f      	orrs	r7, r1
   30930:	077b      	lsls	r3, r7, #29
   30932:	d009      	beq.n	30948 <__aeabi_dadd+0x120>
   30934:	230f      	movs	r3, #15
   30936:	403b      	ands	r3, r7
   30938:	2b04      	cmp	r3, #4
   3093a:	d005      	beq.n	30948 <__aeabi_dadd+0x120>
   3093c:	1d3b      	adds	r3, r7, #4
   3093e:	42bb      	cmp	r3, r7
   30940:	41bf      	sbcs	r7, r7
   30942:	427f      	negs	r7, r7
   30944:	19e4      	adds	r4, r4, r7
   30946:	001f      	movs	r7, r3
   30948:	0223      	lsls	r3, r4, #8
   3094a:	d52c      	bpl.n	309a6 <__aeabi_dadd+0x17e>
   3094c:	4b96      	ldr	r3, [pc, #600]	; (30ba8 <__aeabi_dadd+0x380>)
   3094e:	3601      	adds	r6, #1
   30950:	429e      	cmp	r6, r3
   30952:	d100      	bne.n	30956 <__aeabi_dadd+0x12e>
   30954:	e09a      	b.n	30a8c <__aeabi_dadd+0x264>
   30956:	4645      	mov	r5, r8
   30958:	4b94      	ldr	r3, [pc, #592]	; (30bac <__aeabi_dadd+0x384>)
   3095a:	08ff      	lsrs	r7, r7, #3
   3095c:	401c      	ands	r4, r3
   3095e:	0760      	lsls	r0, r4, #29
   30960:	0576      	lsls	r6, r6, #21
   30962:	0264      	lsls	r4, r4, #9
   30964:	4307      	orrs	r7, r0
   30966:	0b24      	lsrs	r4, r4, #12
   30968:	0d76      	lsrs	r6, r6, #21
   3096a:	2100      	movs	r1, #0
   3096c:	0324      	lsls	r4, r4, #12
   3096e:	0b23      	lsrs	r3, r4, #12
   30970:	0d0c      	lsrs	r4, r1, #20
   30972:	4a8f      	ldr	r2, [pc, #572]	; (30bb0 <__aeabi_dadd+0x388>)
   30974:	0524      	lsls	r4, r4, #20
   30976:	431c      	orrs	r4, r3
   30978:	4014      	ands	r4, r2
   3097a:	0533      	lsls	r3, r6, #20
   3097c:	4323      	orrs	r3, r4
   3097e:	005b      	lsls	r3, r3, #1
   30980:	07ed      	lsls	r5, r5, #31
   30982:	085b      	lsrs	r3, r3, #1
   30984:	432b      	orrs	r3, r5
   30986:	0038      	movs	r0, r7
   30988:	0019      	movs	r1, r3
   3098a:	bc3c      	pop	{r2, r3, r4, r5}
   3098c:	4690      	mov	r8, r2
   3098e:	4699      	mov	r9, r3
   30990:	46a2      	mov	sl, r4
   30992:	46ab      	mov	fp, r5
   30994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30996:	4664      	mov	r4, ip
   30998:	4304      	orrs	r4, r0
   3099a:	d100      	bne.n	3099e <__aeabi_dadd+0x176>
   3099c:	e211      	b.n	30dc2 <__aeabi_dadd+0x59a>
   3099e:	0004      	movs	r4, r0
   309a0:	4667      	mov	r7, ip
   309a2:	077b      	lsls	r3, r7, #29
   309a4:	d1c6      	bne.n	30934 <__aeabi_dadd+0x10c>
   309a6:	4645      	mov	r5, r8
   309a8:	0760      	lsls	r0, r4, #29
   309aa:	08ff      	lsrs	r7, r7, #3
   309ac:	4307      	orrs	r7, r0
   309ae:	08e4      	lsrs	r4, r4, #3
   309b0:	4b7d      	ldr	r3, [pc, #500]	; (30ba8 <__aeabi_dadd+0x380>)
   309b2:	429e      	cmp	r6, r3
   309b4:	d030      	beq.n	30a18 <__aeabi_dadd+0x1f0>
   309b6:	0324      	lsls	r4, r4, #12
   309b8:	0576      	lsls	r6, r6, #21
   309ba:	0b24      	lsrs	r4, r4, #12
   309bc:	0d76      	lsrs	r6, r6, #21
   309be:	e7d4      	b.n	3096a <__aeabi_dadd+0x142>
   309c0:	1a33      	subs	r3, r6, r0
   309c2:	469a      	mov	sl, r3
   309c4:	2b00      	cmp	r3, #0
   309c6:	dd78      	ble.n	30aba <__aeabi_dadd+0x292>
   309c8:	2800      	cmp	r0, #0
   309ca:	d031      	beq.n	30a30 <__aeabi_dadd+0x208>
   309cc:	4876      	ldr	r0, [pc, #472]	; (30ba8 <__aeabi_dadd+0x380>)
   309ce:	4286      	cmp	r6, r0
   309d0:	d0ae      	beq.n	30930 <__aeabi_dadd+0x108>
   309d2:	2080      	movs	r0, #128	; 0x80
   309d4:	0400      	lsls	r0, r0, #16
   309d6:	4301      	orrs	r1, r0
   309d8:	4653      	mov	r3, sl
   309da:	2b38      	cmp	r3, #56	; 0x38
   309dc:	dc00      	bgt.n	309e0 <__aeabi_dadd+0x1b8>
   309de:	e0e9      	b.n	30bb4 <__aeabi_dadd+0x38c>
   309e0:	430a      	orrs	r2, r1
   309e2:	1e51      	subs	r1, r2, #1
   309e4:	418a      	sbcs	r2, r1
   309e6:	2100      	movs	r1, #0
   309e8:	19d2      	adds	r2, r2, r7
   309ea:	42ba      	cmp	r2, r7
   309ec:	41bf      	sbcs	r7, r7
   309ee:	1909      	adds	r1, r1, r4
   309f0:	427c      	negs	r4, r7
   309f2:	0017      	movs	r7, r2
   309f4:	190c      	adds	r4, r1, r4
   309f6:	0223      	lsls	r3, r4, #8
   309f8:	d5d3      	bpl.n	309a2 <__aeabi_dadd+0x17a>
   309fa:	4b6b      	ldr	r3, [pc, #428]	; (30ba8 <__aeabi_dadd+0x380>)
   309fc:	3601      	adds	r6, #1
   309fe:	429e      	cmp	r6, r3
   30a00:	d100      	bne.n	30a04 <__aeabi_dadd+0x1dc>
   30a02:	e13a      	b.n	30c7a <__aeabi_dadd+0x452>
   30a04:	2001      	movs	r0, #1
   30a06:	4b69      	ldr	r3, [pc, #420]	; (30bac <__aeabi_dadd+0x384>)
   30a08:	401c      	ands	r4, r3
   30a0a:	087b      	lsrs	r3, r7, #1
   30a0c:	4007      	ands	r7, r0
   30a0e:	431f      	orrs	r7, r3
   30a10:	07e0      	lsls	r0, r4, #31
   30a12:	4307      	orrs	r7, r0
   30a14:	0864      	lsrs	r4, r4, #1
   30a16:	e78b      	b.n	30930 <__aeabi_dadd+0x108>
   30a18:	0023      	movs	r3, r4
   30a1a:	433b      	orrs	r3, r7
   30a1c:	d100      	bne.n	30a20 <__aeabi_dadd+0x1f8>
   30a1e:	e1cb      	b.n	30db8 <__aeabi_dadd+0x590>
   30a20:	2280      	movs	r2, #128	; 0x80
   30a22:	0312      	lsls	r2, r2, #12
   30a24:	4314      	orrs	r4, r2
   30a26:	0324      	lsls	r4, r4, #12
   30a28:	0b24      	lsrs	r4, r4, #12
   30a2a:	e79e      	b.n	3096a <__aeabi_dadd+0x142>
   30a2c:	002e      	movs	r6, r5
   30a2e:	e77f      	b.n	30930 <__aeabi_dadd+0x108>
   30a30:	0008      	movs	r0, r1
   30a32:	4310      	orrs	r0, r2
   30a34:	d100      	bne.n	30a38 <__aeabi_dadd+0x210>
   30a36:	e0b4      	b.n	30ba2 <__aeabi_dadd+0x37a>
   30a38:	1e58      	subs	r0, r3, #1
   30a3a:	2800      	cmp	r0, #0
   30a3c:	d000      	beq.n	30a40 <__aeabi_dadd+0x218>
   30a3e:	e0de      	b.n	30bfe <__aeabi_dadd+0x3d6>
   30a40:	18ba      	adds	r2, r7, r2
   30a42:	42ba      	cmp	r2, r7
   30a44:	419b      	sbcs	r3, r3
   30a46:	1864      	adds	r4, r4, r1
   30a48:	425b      	negs	r3, r3
   30a4a:	18e4      	adds	r4, r4, r3
   30a4c:	0017      	movs	r7, r2
   30a4e:	2601      	movs	r6, #1
   30a50:	0223      	lsls	r3, r4, #8
   30a52:	d5a6      	bpl.n	309a2 <__aeabi_dadd+0x17a>
   30a54:	2602      	movs	r6, #2
   30a56:	e7d5      	b.n	30a04 <__aeabi_dadd+0x1dc>
   30a58:	2d00      	cmp	r5, #0
   30a5a:	d16e      	bne.n	30b3a <__aeabi_dadd+0x312>
   30a5c:	1c70      	adds	r0, r6, #1
   30a5e:	0540      	lsls	r0, r0, #21
   30a60:	0d40      	lsrs	r0, r0, #21
   30a62:	2801      	cmp	r0, #1
   30a64:	dc00      	bgt.n	30a68 <__aeabi_dadd+0x240>
   30a66:	e0f9      	b.n	30c5c <__aeabi_dadd+0x434>
   30a68:	1ab8      	subs	r0, r7, r2
   30a6a:	4684      	mov	ip, r0
   30a6c:	4287      	cmp	r7, r0
   30a6e:	4180      	sbcs	r0, r0
   30a70:	1ae5      	subs	r5, r4, r3
   30a72:	4240      	negs	r0, r0
   30a74:	1a2d      	subs	r5, r5, r0
   30a76:	0228      	lsls	r0, r5, #8
   30a78:	d400      	bmi.n	30a7c <__aeabi_dadd+0x254>
   30a7a:	e089      	b.n	30b90 <__aeabi_dadd+0x368>
   30a7c:	1bd7      	subs	r7, r2, r7
   30a7e:	42ba      	cmp	r2, r7
   30a80:	4192      	sbcs	r2, r2
   30a82:	1b1c      	subs	r4, r3, r4
   30a84:	4252      	negs	r2, r2
   30a86:	1aa5      	subs	r5, r4, r2
   30a88:	46d8      	mov	r8, fp
   30a8a:	e729      	b.n	308e0 <__aeabi_dadd+0xb8>
   30a8c:	4645      	mov	r5, r8
   30a8e:	2400      	movs	r4, #0
   30a90:	2700      	movs	r7, #0
   30a92:	e76a      	b.n	3096a <__aeabi_dadd+0x142>
   30a94:	4c45      	ldr	r4, [pc, #276]	; (30bac <__aeabi_dadd+0x384>)
   30a96:	1af6      	subs	r6, r6, r3
   30a98:	402c      	ands	r4, r5
   30a9a:	e749      	b.n	30930 <__aeabi_dadd+0x108>
   30a9c:	003d      	movs	r5, r7
   30a9e:	3828      	subs	r0, #40	; 0x28
   30aa0:	4085      	lsls	r5, r0
   30aa2:	2700      	movs	r7, #0
   30aa4:	e72e      	b.n	30904 <__aeabi_dadd+0xdc>
   30aa6:	0038      	movs	r0, r7
   30aa8:	f001 fb04 	bl	320b4 <__clzsi2>
   30aac:	3020      	adds	r0, #32
   30aae:	e71d      	b.n	308ec <__aeabi_dadd+0xc4>
   30ab0:	430a      	orrs	r2, r1
   30ab2:	1e51      	subs	r1, r2, #1
   30ab4:	418a      	sbcs	r2, r1
   30ab6:	2100      	movs	r1, #0
   30ab8:	e707      	b.n	308ca <__aeabi_dadd+0xa2>
   30aba:	2b00      	cmp	r3, #0
   30abc:	d000      	beq.n	30ac0 <__aeabi_dadd+0x298>
   30abe:	e0f3      	b.n	30ca8 <__aeabi_dadd+0x480>
   30ac0:	1c70      	adds	r0, r6, #1
   30ac2:	0543      	lsls	r3, r0, #21
   30ac4:	0d5b      	lsrs	r3, r3, #21
   30ac6:	2b01      	cmp	r3, #1
   30ac8:	dc00      	bgt.n	30acc <__aeabi_dadd+0x2a4>
   30aca:	e0ad      	b.n	30c28 <__aeabi_dadd+0x400>
   30acc:	4b36      	ldr	r3, [pc, #216]	; (30ba8 <__aeabi_dadd+0x380>)
   30ace:	4298      	cmp	r0, r3
   30ad0:	d100      	bne.n	30ad4 <__aeabi_dadd+0x2ac>
   30ad2:	e0d1      	b.n	30c78 <__aeabi_dadd+0x450>
   30ad4:	18ba      	adds	r2, r7, r2
   30ad6:	42ba      	cmp	r2, r7
   30ad8:	41bf      	sbcs	r7, r7
   30ada:	1864      	adds	r4, r4, r1
   30adc:	427f      	negs	r7, r7
   30ade:	19e4      	adds	r4, r4, r7
   30ae0:	07e7      	lsls	r7, r4, #31
   30ae2:	0852      	lsrs	r2, r2, #1
   30ae4:	4317      	orrs	r7, r2
   30ae6:	0864      	lsrs	r4, r4, #1
   30ae8:	0006      	movs	r6, r0
   30aea:	e721      	b.n	30930 <__aeabi_dadd+0x108>
   30aec:	482e      	ldr	r0, [pc, #184]	; (30ba8 <__aeabi_dadd+0x380>)
   30aee:	4285      	cmp	r5, r0
   30af0:	d100      	bne.n	30af4 <__aeabi_dadd+0x2cc>
   30af2:	e093      	b.n	30c1c <__aeabi_dadd+0x3f4>
   30af4:	001d      	movs	r5, r3
   30af6:	e6d0      	b.n	3089a <__aeabi_dadd+0x72>
   30af8:	0029      	movs	r1, r5
   30afa:	3e1f      	subs	r6, #31
   30afc:	40f1      	lsrs	r1, r6
   30afe:	2b20      	cmp	r3, #32
   30b00:	d100      	bne.n	30b04 <__aeabi_dadd+0x2dc>
   30b02:	e08d      	b.n	30c20 <__aeabi_dadd+0x3f8>
   30b04:	2240      	movs	r2, #64	; 0x40
   30b06:	1ad3      	subs	r3, r2, r3
   30b08:	409d      	lsls	r5, r3
   30b0a:	432f      	orrs	r7, r5
   30b0c:	1e7d      	subs	r5, r7, #1
   30b0e:	41af      	sbcs	r7, r5
   30b10:	2400      	movs	r4, #0
   30b12:	430f      	orrs	r7, r1
   30b14:	2600      	movs	r6, #0
   30b16:	e744      	b.n	309a2 <__aeabi_dadd+0x17a>
   30b18:	002b      	movs	r3, r5
   30b1a:	0008      	movs	r0, r1
   30b1c:	3b20      	subs	r3, #32
   30b1e:	40d8      	lsrs	r0, r3
   30b20:	0003      	movs	r3, r0
   30b22:	2d20      	cmp	r5, #32
   30b24:	d100      	bne.n	30b28 <__aeabi_dadd+0x300>
   30b26:	e07d      	b.n	30c24 <__aeabi_dadd+0x3fc>
   30b28:	2040      	movs	r0, #64	; 0x40
   30b2a:	1b45      	subs	r5, r0, r5
   30b2c:	40a9      	lsls	r1, r5
   30b2e:	430a      	orrs	r2, r1
   30b30:	1e51      	subs	r1, r2, #1
   30b32:	418a      	sbcs	r2, r1
   30b34:	2100      	movs	r1, #0
   30b36:	431a      	orrs	r2, r3
   30b38:	e6c7      	b.n	308ca <__aeabi_dadd+0xa2>
   30b3a:	2e00      	cmp	r6, #0
   30b3c:	d050      	beq.n	30be0 <__aeabi_dadd+0x3b8>
   30b3e:	4e1a      	ldr	r6, [pc, #104]	; (30ba8 <__aeabi_dadd+0x380>)
   30b40:	42b0      	cmp	r0, r6
   30b42:	d057      	beq.n	30bf4 <__aeabi_dadd+0x3cc>
   30b44:	2680      	movs	r6, #128	; 0x80
   30b46:	426b      	negs	r3, r5
   30b48:	4699      	mov	r9, r3
   30b4a:	0436      	lsls	r6, r6, #16
   30b4c:	4334      	orrs	r4, r6
   30b4e:	464b      	mov	r3, r9
   30b50:	2b38      	cmp	r3, #56	; 0x38
   30b52:	dd00      	ble.n	30b56 <__aeabi_dadd+0x32e>
   30b54:	e0d6      	b.n	30d04 <__aeabi_dadd+0x4dc>
   30b56:	2b1f      	cmp	r3, #31
   30b58:	dd00      	ble.n	30b5c <__aeabi_dadd+0x334>
   30b5a:	e135      	b.n	30dc8 <__aeabi_dadd+0x5a0>
   30b5c:	2620      	movs	r6, #32
   30b5e:	1af5      	subs	r5, r6, r3
   30b60:	0026      	movs	r6, r4
   30b62:	40ae      	lsls	r6, r5
   30b64:	46b2      	mov	sl, r6
   30b66:	003e      	movs	r6, r7
   30b68:	40de      	lsrs	r6, r3
   30b6a:	46ac      	mov	ip, r5
   30b6c:	0035      	movs	r5, r6
   30b6e:	4656      	mov	r6, sl
   30b70:	432e      	orrs	r6, r5
   30b72:	4665      	mov	r5, ip
   30b74:	40af      	lsls	r7, r5
   30b76:	1e7d      	subs	r5, r7, #1
   30b78:	41af      	sbcs	r7, r5
   30b7a:	40dc      	lsrs	r4, r3
   30b7c:	4337      	orrs	r7, r6
   30b7e:	1bd7      	subs	r7, r2, r7
   30b80:	42ba      	cmp	r2, r7
   30b82:	4192      	sbcs	r2, r2
   30b84:	1b0c      	subs	r4, r1, r4
   30b86:	4252      	negs	r2, r2
   30b88:	1aa4      	subs	r4, r4, r2
   30b8a:	0006      	movs	r6, r0
   30b8c:	46d8      	mov	r8, fp
   30b8e:	e6a3      	b.n	308d8 <__aeabi_dadd+0xb0>
   30b90:	4664      	mov	r4, ip
   30b92:	4667      	mov	r7, ip
   30b94:	432c      	orrs	r4, r5
   30b96:	d000      	beq.n	30b9a <__aeabi_dadd+0x372>
   30b98:	e6a2      	b.n	308e0 <__aeabi_dadd+0xb8>
   30b9a:	2500      	movs	r5, #0
   30b9c:	2600      	movs	r6, #0
   30b9e:	2700      	movs	r7, #0
   30ba0:	e706      	b.n	309b0 <__aeabi_dadd+0x188>
   30ba2:	001e      	movs	r6, r3
   30ba4:	e6c4      	b.n	30930 <__aeabi_dadd+0x108>
   30ba6:	46c0      	nop			; (mov r8, r8)
   30ba8:	000007ff 	.word	0x000007ff
   30bac:	ff7fffff 	.word	0xff7fffff
   30bb0:	800fffff 	.word	0x800fffff
   30bb4:	2b1f      	cmp	r3, #31
   30bb6:	dc63      	bgt.n	30c80 <__aeabi_dadd+0x458>
   30bb8:	2020      	movs	r0, #32
   30bba:	1ac3      	subs	r3, r0, r3
   30bbc:	0008      	movs	r0, r1
   30bbe:	4098      	lsls	r0, r3
   30bc0:	469c      	mov	ip, r3
   30bc2:	4683      	mov	fp, r0
   30bc4:	4653      	mov	r3, sl
   30bc6:	0010      	movs	r0, r2
   30bc8:	40d8      	lsrs	r0, r3
   30bca:	0003      	movs	r3, r0
   30bcc:	4658      	mov	r0, fp
   30bce:	4318      	orrs	r0, r3
   30bd0:	4663      	mov	r3, ip
   30bd2:	409a      	lsls	r2, r3
   30bd4:	1e53      	subs	r3, r2, #1
   30bd6:	419a      	sbcs	r2, r3
   30bd8:	4653      	mov	r3, sl
   30bda:	4302      	orrs	r2, r0
   30bdc:	40d9      	lsrs	r1, r3
   30bde:	e703      	b.n	309e8 <__aeabi_dadd+0x1c0>
   30be0:	0026      	movs	r6, r4
   30be2:	433e      	orrs	r6, r7
   30be4:	d006      	beq.n	30bf4 <__aeabi_dadd+0x3cc>
   30be6:	43eb      	mvns	r3, r5
   30be8:	4699      	mov	r9, r3
   30bea:	2b00      	cmp	r3, #0
   30bec:	d0c7      	beq.n	30b7e <__aeabi_dadd+0x356>
   30bee:	4e94      	ldr	r6, [pc, #592]	; (30e40 <__aeabi_dadd+0x618>)
   30bf0:	42b0      	cmp	r0, r6
   30bf2:	d1ac      	bne.n	30b4e <__aeabi_dadd+0x326>
   30bf4:	000c      	movs	r4, r1
   30bf6:	0017      	movs	r7, r2
   30bf8:	0006      	movs	r6, r0
   30bfa:	46d8      	mov	r8, fp
   30bfc:	e698      	b.n	30930 <__aeabi_dadd+0x108>
   30bfe:	4b90      	ldr	r3, [pc, #576]	; (30e40 <__aeabi_dadd+0x618>)
   30c00:	459a      	cmp	sl, r3
   30c02:	d00b      	beq.n	30c1c <__aeabi_dadd+0x3f4>
   30c04:	4682      	mov	sl, r0
   30c06:	e6e7      	b.n	309d8 <__aeabi_dadd+0x1b0>
   30c08:	2800      	cmp	r0, #0
   30c0a:	d000      	beq.n	30c0e <__aeabi_dadd+0x3e6>
   30c0c:	e09e      	b.n	30d4c <__aeabi_dadd+0x524>
   30c0e:	0018      	movs	r0, r3
   30c10:	4310      	orrs	r0, r2
   30c12:	d100      	bne.n	30c16 <__aeabi_dadd+0x3ee>
   30c14:	e0e9      	b.n	30dea <__aeabi_dadd+0x5c2>
   30c16:	001c      	movs	r4, r3
   30c18:	0017      	movs	r7, r2
   30c1a:	46d8      	mov	r8, fp
   30c1c:	4e88      	ldr	r6, [pc, #544]	; (30e40 <__aeabi_dadd+0x618>)
   30c1e:	e687      	b.n	30930 <__aeabi_dadd+0x108>
   30c20:	2500      	movs	r5, #0
   30c22:	e772      	b.n	30b0a <__aeabi_dadd+0x2e2>
   30c24:	2100      	movs	r1, #0
   30c26:	e782      	b.n	30b2e <__aeabi_dadd+0x306>
   30c28:	0023      	movs	r3, r4
   30c2a:	433b      	orrs	r3, r7
   30c2c:	2e00      	cmp	r6, #0
   30c2e:	d000      	beq.n	30c32 <__aeabi_dadd+0x40a>
   30c30:	e0ab      	b.n	30d8a <__aeabi_dadd+0x562>
   30c32:	2b00      	cmp	r3, #0
   30c34:	d100      	bne.n	30c38 <__aeabi_dadd+0x410>
   30c36:	e0e7      	b.n	30e08 <__aeabi_dadd+0x5e0>
   30c38:	000b      	movs	r3, r1
   30c3a:	4313      	orrs	r3, r2
   30c3c:	d100      	bne.n	30c40 <__aeabi_dadd+0x418>
   30c3e:	e677      	b.n	30930 <__aeabi_dadd+0x108>
   30c40:	18ba      	adds	r2, r7, r2
   30c42:	42ba      	cmp	r2, r7
   30c44:	41bf      	sbcs	r7, r7
   30c46:	1864      	adds	r4, r4, r1
   30c48:	427f      	negs	r7, r7
   30c4a:	19e4      	adds	r4, r4, r7
   30c4c:	0223      	lsls	r3, r4, #8
   30c4e:	d400      	bmi.n	30c52 <__aeabi_dadd+0x42a>
   30c50:	e0f2      	b.n	30e38 <__aeabi_dadd+0x610>
   30c52:	4b7c      	ldr	r3, [pc, #496]	; (30e44 <__aeabi_dadd+0x61c>)
   30c54:	0017      	movs	r7, r2
   30c56:	401c      	ands	r4, r3
   30c58:	0006      	movs	r6, r0
   30c5a:	e669      	b.n	30930 <__aeabi_dadd+0x108>
   30c5c:	0020      	movs	r0, r4
   30c5e:	4338      	orrs	r0, r7
   30c60:	2e00      	cmp	r6, #0
   30c62:	d1d1      	bne.n	30c08 <__aeabi_dadd+0x3e0>
   30c64:	2800      	cmp	r0, #0
   30c66:	d15b      	bne.n	30d20 <__aeabi_dadd+0x4f8>
   30c68:	001c      	movs	r4, r3
   30c6a:	4314      	orrs	r4, r2
   30c6c:	d100      	bne.n	30c70 <__aeabi_dadd+0x448>
   30c6e:	e0a8      	b.n	30dc2 <__aeabi_dadd+0x59a>
   30c70:	001c      	movs	r4, r3
   30c72:	0017      	movs	r7, r2
   30c74:	46d8      	mov	r8, fp
   30c76:	e65b      	b.n	30930 <__aeabi_dadd+0x108>
   30c78:	0006      	movs	r6, r0
   30c7a:	2400      	movs	r4, #0
   30c7c:	2700      	movs	r7, #0
   30c7e:	e697      	b.n	309b0 <__aeabi_dadd+0x188>
   30c80:	4650      	mov	r0, sl
   30c82:	000b      	movs	r3, r1
   30c84:	3820      	subs	r0, #32
   30c86:	40c3      	lsrs	r3, r0
   30c88:	4699      	mov	r9, r3
   30c8a:	4653      	mov	r3, sl
   30c8c:	2b20      	cmp	r3, #32
   30c8e:	d100      	bne.n	30c92 <__aeabi_dadd+0x46a>
   30c90:	e095      	b.n	30dbe <__aeabi_dadd+0x596>
   30c92:	2340      	movs	r3, #64	; 0x40
   30c94:	4650      	mov	r0, sl
   30c96:	1a1b      	subs	r3, r3, r0
   30c98:	4099      	lsls	r1, r3
   30c9a:	430a      	orrs	r2, r1
   30c9c:	1e51      	subs	r1, r2, #1
   30c9e:	418a      	sbcs	r2, r1
   30ca0:	464b      	mov	r3, r9
   30ca2:	2100      	movs	r1, #0
   30ca4:	431a      	orrs	r2, r3
   30ca6:	e69f      	b.n	309e8 <__aeabi_dadd+0x1c0>
   30ca8:	2e00      	cmp	r6, #0
   30caa:	d130      	bne.n	30d0e <__aeabi_dadd+0x4e6>
   30cac:	0026      	movs	r6, r4
   30cae:	433e      	orrs	r6, r7
   30cb0:	d067      	beq.n	30d82 <__aeabi_dadd+0x55a>
   30cb2:	43db      	mvns	r3, r3
   30cb4:	469a      	mov	sl, r3
   30cb6:	2b00      	cmp	r3, #0
   30cb8:	d01c      	beq.n	30cf4 <__aeabi_dadd+0x4cc>
   30cba:	4e61      	ldr	r6, [pc, #388]	; (30e40 <__aeabi_dadd+0x618>)
   30cbc:	42b0      	cmp	r0, r6
   30cbe:	d060      	beq.n	30d82 <__aeabi_dadd+0x55a>
   30cc0:	4653      	mov	r3, sl
   30cc2:	2b38      	cmp	r3, #56	; 0x38
   30cc4:	dd00      	ble.n	30cc8 <__aeabi_dadd+0x4a0>
   30cc6:	e096      	b.n	30df6 <__aeabi_dadd+0x5ce>
   30cc8:	2b1f      	cmp	r3, #31
   30cca:	dd00      	ble.n	30cce <__aeabi_dadd+0x4a6>
   30ccc:	e09f      	b.n	30e0e <__aeabi_dadd+0x5e6>
   30cce:	2620      	movs	r6, #32
   30cd0:	1af3      	subs	r3, r6, r3
   30cd2:	0026      	movs	r6, r4
   30cd4:	409e      	lsls	r6, r3
   30cd6:	469c      	mov	ip, r3
   30cd8:	46b3      	mov	fp, r6
   30cda:	4653      	mov	r3, sl
   30cdc:	003e      	movs	r6, r7
   30cde:	40de      	lsrs	r6, r3
   30ce0:	0033      	movs	r3, r6
   30ce2:	465e      	mov	r6, fp
   30ce4:	431e      	orrs	r6, r3
   30ce6:	4663      	mov	r3, ip
   30ce8:	409f      	lsls	r7, r3
   30cea:	1e7b      	subs	r3, r7, #1
   30cec:	419f      	sbcs	r7, r3
   30cee:	4653      	mov	r3, sl
   30cf0:	40dc      	lsrs	r4, r3
   30cf2:	4337      	orrs	r7, r6
   30cf4:	18bf      	adds	r7, r7, r2
   30cf6:	4297      	cmp	r7, r2
   30cf8:	4192      	sbcs	r2, r2
   30cfa:	1864      	adds	r4, r4, r1
   30cfc:	4252      	negs	r2, r2
   30cfe:	18a4      	adds	r4, r4, r2
   30d00:	0006      	movs	r6, r0
   30d02:	e678      	b.n	309f6 <__aeabi_dadd+0x1ce>
   30d04:	4327      	orrs	r7, r4
   30d06:	1e7c      	subs	r4, r7, #1
   30d08:	41a7      	sbcs	r7, r4
   30d0a:	2400      	movs	r4, #0
   30d0c:	e737      	b.n	30b7e <__aeabi_dadd+0x356>
   30d0e:	4e4c      	ldr	r6, [pc, #304]	; (30e40 <__aeabi_dadd+0x618>)
   30d10:	42b0      	cmp	r0, r6
   30d12:	d036      	beq.n	30d82 <__aeabi_dadd+0x55a>
   30d14:	2680      	movs	r6, #128	; 0x80
   30d16:	425b      	negs	r3, r3
   30d18:	0436      	lsls	r6, r6, #16
   30d1a:	469a      	mov	sl, r3
   30d1c:	4334      	orrs	r4, r6
   30d1e:	e7cf      	b.n	30cc0 <__aeabi_dadd+0x498>
   30d20:	0018      	movs	r0, r3
   30d22:	4310      	orrs	r0, r2
   30d24:	d100      	bne.n	30d28 <__aeabi_dadd+0x500>
   30d26:	e603      	b.n	30930 <__aeabi_dadd+0x108>
   30d28:	1ab8      	subs	r0, r7, r2
   30d2a:	4684      	mov	ip, r0
   30d2c:	4567      	cmp	r7, ip
   30d2e:	41ad      	sbcs	r5, r5
   30d30:	1ae0      	subs	r0, r4, r3
   30d32:	426d      	negs	r5, r5
   30d34:	1b40      	subs	r0, r0, r5
   30d36:	0205      	lsls	r5, r0, #8
   30d38:	d400      	bmi.n	30d3c <__aeabi_dadd+0x514>
   30d3a:	e62c      	b.n	30996 <__aeabi_dadd+0x16e>
   30d3c:	1bd7      	subs	r7, r2, r7
   30d3e:	42ba      	cmp	r2, r7
   30d40:	4192      	sbcs	r2, r2
   30d42:	1b1c      	subs	r4, r3, r4
   30d44:	4252      	negs	r2, r2
   30d46:	1aa4      	subs	r4, r4, r2
   30d48:	46d8      	mov	r8, fp
   30d4a:	e5f1      	b.n	30930 <__aeabi_dadd+0x108>
   30d4c:	0018      	movs	r0, r3
   30d4e:	4310      	orrs	r0, r2
   30d50:	d100      	bne.n	30d54 <__aeabi_dadd+0x52c>
   30d52:	e763      	b.n	30c1c <__aeabi_dadd+0x3f4>
   30d54:	08f8      	lsrs	r0, r7, #3
   30d56:	0767      	lsls	r7, r4, #29
   30d58:	4307      	orrs	r7, r0
   30d5a:	2080      	movs	r0, #128	; 0x80
   30d5c:	08e4      	lsrs	r4, r4, #3
   30d5e:	0300      	lsls	r0, r0, #12
   30d60:	4204      	tst	r4, r0
   30d62:	d008      	beq.n	30d76 <__aeabi_dadd+0x54e>
   30d64:	08dd      	lsrs	r5, r3, #3
   30d66:	4205      	tst	r5, r0
   30d68:	d105      	bne.n	30d76 <__aeabi_dadd+0x54e>
   30d6a:	08d2      	lsrs	r2, r2, #3
   30d6c:	0759      	lsls	r1, r3, #29
   30d6e:	4311      	orrs	r1, r2
   30d70:	000f      	movs	r7, r1
   30d72:	002c      	movs	r4, r5
   30d74:	46d8      	mov	r8, fp
   30d76:	0f7b      	lsrs	r3, r7, #29
   30d78:	00e4      	lsls	r4, r4, #3
   30d7a:	431c      	orrs	r4, r3
   30d7c:	00ff      	lsls	r7, r7, #3
   30d7e:	4e30      	ldr	r6, [pc, #192]	; (30e40 <__aeabi_dadd+0x618>)
   30d80:	e5d6      	b.n	30930 <__aeabi_dadd+0x108>
   30d82:	000c      	movs	r4, r1
   30d84:	0017      	movs	r7, r2
   30d86:	0006      	movs	r6, r0
   30d88:	e5d2      	b.n	30930 <__aeabi_dadd+0x108>
   30d8a:	2b00      	cmp	r3, #0
   30d8c:	d038      	beq.n	30e00 <__aeabi_dadd+0x5d8>
   30d8e:	000b      	movs	r3, r1
   30d90:	4313      	orrs	r3, r2
   30d92:	d100      	bne.n	30d96 <__aeabi_dadd+0x56e>
   30d94:	e742      	b.n	30c1c <__aeabi_dadd+0x3f4>
   30d96:	08f8      	lsrs	r0, r7, #3
   30d98:	0767      	lsls	r7, r4, #29
   30d9a:	4307      	orrs	r7, r0
   30d9c:	2080      	movs	r0, #128	; 0x80
   30d9e:	08e4      	lsrs	r4, r4, #3
   30da0:	0300      	lsls	r0, r0, #12
   30da2:	4204      	tst	r4, r0
   30da4:	d0e7      	beq.n	30d76 <__aeabi_dadd+0x54e>
   30da6:	08cb      	lsrs	r3, r1, #3
   30da8:	4203      	tst	r3, r0
   30daa:	d1e4      	bne.n	30d76 <__aeabi_dadd+0x54e>
   30dac:	08d2      	lsrs	r2, r2, #3
   30dae:	0749      	lsls	r1, r1, #29
   30db0:	4311      	orrs	r1, r2
   30db2:	000f      	movs	r7, r1
   30db4:	001c      	movs	r4, r3
   30db6:	e7de      	b.n	30d76 <__aeabi_dadd+0x54e>
   30db8:	2700      	movs	r7, #0
   30dba:	2400      	movs	r4, #0
   30dbc:	e5d5      	b.n	3096a <__aeabi_dadd+0x142>
   30dbe:	2100      	movs	r1, #0
   30dc0:	e76b      	b.n	30c9a <__aeabi_dadd+0x472>
   30dc2:	2500      	movs	r5, #0
   30dc4:	2700      	movs	r7, #0
   30dc6:	e5f3      	b.n	309b0 <__aeabi_dadd+0x188>
   30dc8:	464e      	mov	r6, r9
   30dca:	0025      	movs	r5, r4
   30dcc:	3e20      	subs	r6, #32
   30dce:	40f5      	lsrs	r5, r6
   30dd0:	464b      	mov	r3, r9
   30dd2:	002e      	movs	r6, r5
   30dd4:	2b20      	cmp	r3, #32
   30dd6:	d02d      	beq.n	30e34 <__aeabi_dadd+0x60c>
   30dd8:	2540      	movs	r5, #64	; 0x40
   30dda:	1aed      	subs	r5, r5, r3
   30ddc:	40ac      	lsls	r4, r5
   30dde:	4327      	orrs	r7, r4
   30de0:	1e7c      	subs	r4, r7, #1
   30de2:	41a7      	sbcs	r7, r4
   30de4:	2400      	movs	r4, #0
   30de6:	4337      	orrs	r7, r6
   30de8:	e6c9      	b.n	30b7e <__aeabi_dadd+0x356>
   30dea:	2480      	movs	r4, #128	; 0x80
   30dec:	2500      	movs	r5, #0
   30dee:	0324      	lsls	r4, r4, #12
   30df0:	4e13      	ldr	r6, [pc, #76]	; (30e40 <__aeabi_dadd+0x618>)
   30df2:	2700      	movs	r7, #0
   30df4:	e5dc      	b.n	309b0 <__aeabi_dadd+0x188>
   30df6:	4327      	orrs	r7, r4
   30df8:	1e7c      	subs	r4, r7, #1
   30dfa:	41a7      	sbcs	r7, r4
   30dfc:	2400      	movs	r4, #0
   30dfe:	e779      	b.n	30cf4 <__aeabi_dadd+0x4cc>
   30e00:	000c      	movs	r4, r1
   30e02:	0017      	movs	r7, r2
   30e04:	4e0e      	ldr	r6, [pc, #56]	; (30e40 <__aeabi_dadd+0x618>)
   30e06:	e593      	b.n	30930 <__aeabi_dadd+0x108>
   30e08:	000c      	movs	r4, r1
   30e0a:	0017      	movs	r7, r2
   30e0c:	e590      	b.n	30930 <__aeabi_dadd+0x108>
   30e0e:	4656      	mov	r6, sl
   30e10:	0023      	movs	r3, r4
   30e12:	3e20      	subs	r6, #32
   30e14:	40f3      	lsrs	r3, r6
   30e16:	4699      	mov	r9, r3
   30e18:	4653      	mov	r3, sl
   30e1a:	2b20      	cmp	r3, #32
   30e1c:	d00e      	beq.n	30e3c <__aeabi_dadd+0x614>
   30e1e:	2340      	movs	r3, #64	; 0x40
   30e20:	4656      	mov	r6, sl
   30e22:	1b9b      	subs	r3, r3, r6
   30e24:	409c      	lsls	r4, r3
   30e26:	4327      	orrs	r7, r4
   30e28:	1e7c      	subs	r4, r7, #1
   30e2a:	41a7      	sbcs	r7, r4
   30e2c:	464b      	mov	r3, r9
   30e2e:	2400      	movs	r4, #0
   30e30:	431f      	orrs	r7, r3
   30e32:	e75f      	b.n	30cf4 <__aeabi_dadd+0x4cc>
   30e34:	2400      	movs	r4, #0
   30e36:	e7d2      	b.n	30dde <__aeabi_dadd+0x5b6>
   30e38:	0017      	movs	r7, r2
   30e3a:	e5b2      	b.n	309a2 <__aeabi_dadd+0x17a>
   30e3c:	2400      	movs	r4, #0
   30e3e:	e7f2      	b.n	30e26 <__aeabi_dadd+0x5fe>
   30e40:	000007ff 	.word	0x000007ff
   30e44:	ff7fffff 	.word	0xff7fffff

00030e48 <__aeabi_ddiv>:
   30e48:	b5f0      	push	{r4, r5, r6, r7, lr}
   30e4a:	4657      	mov	r7, sl
   30e4c:	4645      	mov	r5, r8
   30e4e:	46de      	mov	lr, fp
   30e50:	464e      	mov	r6, r9
   30e52:	b5e0      	push	{r5, r6, r7, lr}
   30e54:	004c      	lsls	r4, r1, #1
   30e56:	030e      	lsls	r6, r1, #12
   30e58:	b087      	sub	sp, #28
   30e5a:	4683      	mov	fp, r0
   30e5c:	4692      	mov	sl, r2
   30e5e:	001d      	movs	r5, r3
   30e60:	4680      	mov	r8, r0
   30e62:	0b36      	lsrs	r6, r6, #12
   30e64:	0d64      	lsrs	r4, r4, #21
   30e66:	0fcf      	lsrs	r7, r1, #31
   30e68:	2c00      	cmp	r4, #0
   30e6a:	d04f      	beq.n	30f0c <__aeabi_ddiv+0xc4>
   30e6c:	4b6f      	ldr	r3, [pc, #444]	; (3102c <__aeabi_ddiv+0x1e4>)
   30e6e:	429c      	cmp	r4, r3
   30e70:	d035      	beq.n	30ede <__aeabi_ddiv+0x96>
   30e72:	2380      	movs	r3, #128	; 0x80
   30e74:	0f42      	lsrs	r2, r0, #29
   30e76:	041b      	lsls	r3, r3, #16
   30e78:	00f6      	lsls	r6, r6, #3
   30e7a:	4313      	orrs	r3, r2
   30e7c:	4333      	orrs	r3, r6
   30e7e:	4699      	mov	r9, r3
   30e80:	00c3      	lsls	r3, r0, #3
   30e82:	4698      	mov	r8, r3
   30e84:	4b6a      	ldr	r3, [pc, #424]	; (31030 <__aeabi_ddiv+0x1e8>)
   30e86:	2600      	movs	r6, #0
   30e88:	469c      	mov	ip, r3
   30e8a:	2300      	movs	r3, #0
   30e8c:	4464      	add	r4, ip
   30e8e:	9303      	str	r3, [sp, #12]
   30e90:	032b      	lsls	r3, r5, #12
   30e92:	0b1b      	lsrs	r3, r3, #12
   30e94:	469b      	mov	fp, r3
   30e96:	006b      	lsls	r3, r5, #1
   30e98:	0fed      	lsrs	r5, r5, #31
   30e9a:	4650      	mov	r0, sl
   30e9c:	0d5b      	lsrs	r3, r3, #21
   30e9e:	9501      	str	r5, [sp, #4]
   30ea0:	d05e      	beq.n	30f60 <__aeabi_ddiv+0x118>
   30ea2:	4a62      	ldr	r2, [pc, #392]	; (3102c <__aeabi_ddiv+0x1e4>)
   30ea4:	4293      	cmp	r3, r2
   30ea6:	d053      	beq.n	30f50 <__aeabi_ddiv+0x108>
   30ea8:	465a      	mov	r2, fp
   30eaa:	00d1      	lsls	r1, r2, #3
   30eac:	2280      	movs	r2, #128	; 0x80
   30eae:	0f40      	lsrs	r0, r0, #29
   30eb0:	0412      	lsls	r2, r2, #16
   30eb2:	4302      	orrs	r2, r0
   30eb4:	430a      	orrs	r2, r1
   30eb6:	4693      	mov	fp, r2
   30eb8:	4652      	mov	r2, sl
   30eba:	00d1      	lsls	r1, r2, #3
   30ebc:	4a5c      	ldr	r2, [pc, #368]	; (31030 <__aeabi_ddiv+0x1e8>)
   30ebe:	4694      	mov	ip, r2
   30ec0:	2200      	movs	r2, #0
   30ec2:	4463      	add	r3, ip
   30ec4:	0038      	movs	r0, r7
   30ec6:	4068      	eors	r0, r5
   30ec8:	4684      	mov	ip, r0
   30eca:	9002      	str	r0, [sp, #8]
   30ecc:	1ae4      	subs	r4, r4, r3
   30ece:	4316      	orrs	r6, r2
   30ed0:	2e0f      	cmp	r6, #15
   30ed2:	d900      	bls.n	30ed6 <__aeabi_ddiv+0x8e>
   30ed4:	e0b4      	b.n	31040 <__aeabi_ddiv+0x1f8>
   30ed6:	4b57      	ldr	r3, [pc, #348]	; (31034 <__aeabi_ddiv+0x1ec>)
   30ed8:	00b6      	lsls	r6, r6, #2
   30eda:	599b      	ldr	r3, [r3, r6]
   30edc:	469f      	mov	pc, r3
   30ede:	0003      	movs	r3, r0
   30ee0:	4333      	orrs	r3, r6
   30ee2:	4699      	mov	r9, r3
   30ee4:	d16c      	bne.n	30fc0 <__aeabi_ddiv+0x178>
   30ee6:	2300      	movs	r3, #0
   30ee8:	4698      	mov	r8, r3
   30eea:	3302      	adds	r3, #2
   30eec:	2608      	movs	r6, #8
   30eee:	9303      	str	r3, [sp, #12]
   30ef0:	e7ce      	b.n	30e90 <__aeabi_ddiv+0x48>
   30ef2:	46cb      	mov	fp, r9
   30ef4:	4641      	mov	r1, r8
   30ef6:	9a03      	ldr	r2, [sp, #12]
   30ef8:	9701      	str	r7, [sp, #4]
   30efa:	2a02      	cmp	r2, #2
   30efc:	d165      	bne.n	30fca <__aeabi_ddiv+0x182>
   30efe:	9b01      	ldr	r3, [sp, #4]
   30f00:	4c4a      	ldr	r4, [pc, #296]	; (3102c <__aeabi_ddiv+0x1e4>)
   30f02:	469c      	mov	ip, r3
   30f04:	2300      	movs	r3, #0
   30f06:	2200      	movs	r2, #0
   30f08:	4698      	mov	r8, r3
   30f0a:	e06b      	b.n	30fe4 <__aeabi_ddiv+0x19c>
   30f0c:	0003      	movs	r3, r0
   30f0e:	4333      	orrs	r3, r6
   30f10:	4699      	mov	r9, r3
   30f12:	d04e      	beq.n	30fb2 <__aeabi_ddiv+0x16a>
   30f14:	2e00      	cmp	r6, #0
   30f16:	d100      	bne.n	30f1a <__aeabi_ddiv+0xd2>
   30f18:	e1bc      	b.n	31294 <__aeabi_ddiv+0x44c>
   30f1a:	0030      	movs	r0, r6
   30f1c:	f001 f8ca 	bl	320b4 <__clzsi2>
   30f20:	0003      	movs	r3, r0
   30f22:	3b0b      	subs	r3, #11
   30f24:	2b1c      	cmp	r3, #28
   30f26:	dd00      	ble.n	30f2a <__aeabi_ddiv+0xe2>
   30f28:	e1ac      	b.n	31284 <__aeabi_ddiv+0x43c>
   30f2a:	221d      	movs	r2, #29
   30f2c:	1ad3      	subs	r3, r2, r3
   30f2e:	465a      	mov	r2, fp
   30f30:	0001      	movs	r1, r0
   30f32:	40da      	lsrs	r2, r3
   30f34:	3908      	subs	r1, #8
   30f36:	408e      	lsls	r6, r1
   30f38:	0013      	movs	r3, r2
   30f3a:	4333      	orrs	r3, r6
   30f3c:	4699      	mov	r9, r3
   30f3e:	465b      	mov	r3, fp
   30f40:	408b      	lsls	r3, r1
   30f42:	4698      	mov	r8, r3
   30f44:	2300      	movs	r3, #0
   30f46:	4c3c      	ldr	r4, [pc, #240]	; (31038 <__aeabi_ddiv+0x1f0>)
   30f48:	2600      	movs	r6, #0
   30f4a:	1a24      	subs	r4, r4, r0
   30f4c:	9303      	str	r3, [sp, #12]
   30f4e:	e79f      	b.n	30e90 <__aeabi_ddiv+0x48>
   30f50:	4651      	mov	r1, sl
   30f52:	465a      	mov	r2, fp
   30f54:	4311      	orrs	r1, r2
   30f56:	d129      	bne.n	30fac <__aeabi_ddiv+0x164>
   30f58:	2200      	movs	r2, #0
   30f5a:	4693      	mov	fp, r2
   30f5c:	3202      	adds	r2, #2
   30f5e:	e7b1      	b.n	30ec4 <__aeabi_ddiv+0x7c>
   30f60:	4659      	mov	r1, fp
   30f62:	4301      	orrs	r1, r0
   30f64:	d01e      	beq.n	30fa4 <__aeabi_ddiv+0x15c>
   30f66:	465b      	mov	r3, fp
   30f68:	2b00      	cmp	r3, #0
   30f6a:	d100      	bne.n	30f6e <__aeabi_ddiv+0x126>
   30f6c:	e19e      	b.n	312ac <__aeabi_ddiv+0x464>
   30f6e:	4658      	mov	r0, fp
   30f70:	f001 f8a0 	bl	320b4 <__clzsi2>
   30f74:	0003      	movs	r3, r0
   30f76:	3b0b      	subs	r3, #11
   30f78:	2b1c      	cmp	r3, #28
   30f7a:	dd00      	ble.n	30f7e <__aeabi_ddiv+0x136>
   30f7c:	e18f      	b.n	3129e <__aeabi_ddiv+0x456>
   30f7e:	0002      	movs	r2, r0
   30f80:	4659      	mov	r1, fp
   30f82:	3a08      	subs	r2, #8
   30f84:	4091      	lsls	r1, r2
   30f86:	468b      	mov	fp, r1
   30f88:	211d      	movs	r1, #29
   30f8a:	1acb      	subs	r3, r1, r3
   30f8c:	4651      	mov	r1, sl
   30f8e:	40d9      	lsrs	r1, r3
   30f90:	000b      	movs	r3, r1
   30f92:	4659      	mov	r1, fp
   30f94:	430b      	orrs	r3, r1
   30f96:	4651      	mov	r1, sl
   30f98:	469b      	mov	fp, r3
   30f9a:	4091      	lsls	r1, r2
   30f9c:	4b26      	ldr	r3, [pc, #152]	; (31038 <__aeabi_ddiv+0x1f0>)
   30f9e:	2200      	movs	r2, #0
   30fa0:	1a1b      	subs	r3, r3, r0
   30fa2:	e78f      	b.n	30ec4 <__aeabi_ddiv+0x7c>
   30fa4:	2300      	movs	r3, #0
   30fa6:	2201      	movs	r2, #1
   30fa8:	469b      	mov	fp, r3
   30faa:	e78b      	b.n	30ec4 <__aeabi_ddiv+0x7c>
   30fac:	4651      	mov	r1, sl
   30fae:	2203      	movs	r2, #3
   30fb0:	e788      	b.n	30ec4 <__aeabi_ddiv+0x7c>
   30fb2:	2300      	movs	r3, #0
   30fb4:	4698      	mov	r8, r3
   30fb6:	3301      	adds	r3, #1
   30fb8:	2604      	movs	r6, #4
   30fba:	2400      	movs	r4, #0
   30fbc:	9303      	str	r3, [sp, #12]
   30fbe:	e767      	b.n	30e90 <__aeabi_ddiv+0x48>
   30fc0:	2303      	movs	r3, #3
   30fc2:	46b1      	mov	r9, r6
   30fc4:	9303      	str	r3, [sp, #12]
   30fc6:	260c      	movs	r6, #12
   30fc8:	e762      	b.n	30e90 <__aeabi_ddiv+0x48>
   30fca:	2a03      	cmp	r2, #3
   30fcc:	d100      	bne.n	30fd0 <__aeabi_ddiv+0x188>
   30fce:	e25c      	b.n	3148a <__aeabi_ddiv+0x642>
   30fd0:	9b01      	ldr	r3, [sp, #4]
   30fd2:	2a01      	cmp	r2, #1
   30fd4:	d000      	beq.n	30fd8 <__aeabi_ddiv+0x190>
   30fd6:	e1e4      	b.n	313a2 <__aeabi_ddiv+0x55a>
   30fd8:	4013      	ands	r3, r2
   30fda:	469c      	mov	ip, r3
   30fdc:	2300      	movs	r3, #0
   30fde:	2400      	movs	r4, #0
   30fe0:	2200      	movs	r2, #0
   30fe2:	4698      	mov	r8, r3
   30fe4:	2100      	movs	r1, #0
   30fe6:	0312      	lsls	r2, r2, #12
   30fe8:	0b13      	lsrs	r3, r2, #12
   30fea:	0d0a      	lsrs	r2, r1, #20
   30fec:	0512      	lsls	r2, r2, #20
   30fee:	431a      	orrs	r2, r3
   30ff0:	0523      	lsls	r3, r4, #20
   30ff2:	4c12      	ldr	r4, [pc, #72]	; (3103c <__aeabi_ddiv+0x1f4>)
   30ff4:	4640      	mov	r0, r8
   30ff6:	4022      	ands	r2, r4
   30ff8:	4313      	orrs	r3, r2
   30ffa:	4662      	mov	r2, ip
   30ffc:	005b      	lsls	r3, r3, #1
   30ffe:	07d2      	lsls	r2, r2, #31
   31000:	085b      	lsrs	r3, r3, #1
   31002:	4313      	orrs	r3, r2
   31004:	0019      	movs	r1, r3
   31006:	b007      	add	sp, #28
   31008:	bc3c      	pop	{r2, r3, r4, r5}
   3100a:	4690      	mov	r8, r2
   3100c:	4699      	mov	r9, r3
   3100e:	46a2      	mov	sl, r4
   31010:	46ab      	mov	fp, r5
   31012:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31014:	2300      	movs	r3, #0
   31016:	2280      	movs	r2, #128	; 0x80
   31018:	469c      	mov	ip, r3
   3101a:	0312      	lsls	r2, r2, #12
   3101c:	4698      	mov	r8, r3
   3101e:	4c03      	ldr	r4, [pc, #12]	; (3102c <__aeabi_ddiv+0x1e4>)
   31020:	e7e0      	b.n	30fe4 <__aeabi_ddiv+0x19c>
   31022:	2300      	movs	r3, #0
   31024:	4c01      	ldr	r4, [pc, #4]	; (3102c <__aeabi_ddiv+0x1e4>)
   31026:	2200      	movs	r2, #0
   31028:	4698      	mov	r8, r3
   3102a:	e7db      	b.n	30fe4 <__aeabi_ddiv+0x19c>
   3102c:	000007ff 	.word	0x000007ff
   31030:	fffffc01 	.word	0xfffffc01
   31034:	000373dc 	.word	0x000373dc
   31038:	fffffc0d 	.word	0xfffffc0d
   3103c:	800fffff 	.word	0x800fffff
   31040:	45d9      	cmp	r9, fp
   31042:	d900      	bls.n	31046 <__aeabi_ddiv+0x1fe>
   31044:	e139      	b.n	312ba <__aeabi_ddiv+0x472>
   31046:	d100      	bne.n	3104a <__aeabi_ddiv+0x202>
   31048:	e134      	b.n	312b4 <__aeabi_ddiv+0x46c>
   3104a:	2300      	movs	r3, #0
   3104c:	4646      	mov	r6, r8
   3104e:	464d      	mov	r5, r9
   31050:	469a      	mov	sl, r3
   31052:	3c01      	subs	r4, #1
   31054:	465b      	mov	r3, fp
   31056:	0e0a      	lsrs	r2, r1, #24
   31058:	021b      	lsls	r3, r3, #8
   3105a:	431a      	orrs	r2, r3
   3105c:	020b      	lsls	r3, r1, #8
   3105e:	0c17      	lsrs	r7, r2, #16
   31060:	9303      	str	r3, [sp, #12]
   31062:	0413      	lsls	r3, r2, #16
   31064:	0c1b      	lsrs	r3, r3, #16
   31066:	0039      	movs	r1, r7
   31068:	0028      	movs	r0, r5
   3106a:	4690      	mov	r8, r2
   3106c:	9301      	str	r3, [sp, #4]
   3106e:	f7ff fa3b 	bl	304e8 <__udivsi3>
   31072:	0002      	movs	r2, r0
   31074:	9b01      	ldr	r3, [sp, #4]
   31076:	4683      	mov	fp, r0
   31078:	435a      	muls	r2, r3
   3107a:	0028      	movs	r0, r5
   3107c:	0039      	movs	r1, r7
   3107e:	4691      	mov	r9, r2
   31080:	f7ff fab8 	bl	305f4 <__aeabi_uidivmod>
   31084:	0c35      	lsrs	r5, r6, #16
   31086:	0409      	lsls	r1, r1, #16
   31088:	430d      	orrs	r5, r1
   3108a:	45a9      	cmp	r9, r5
   3108c:	d90d      	bls.n	310aa <__aeabi_ddiv+0x262>
   3108e:	465b      	mov	r3, fp
   31090:	4445      	add	r5, r8
   31092:	3b01      	subs	r3, #1
   31094:	45a8      	cmp	r8, r5
   31096:	d900      	bls.n	3109a <__aeabi_ddiv+0x252>
   31098:	e13a      	b.n	31310 <__aeabi_ddiv+0x4c8>
   3109a:	45a9      	cmp	r9, r5
   3109c:	d800      	bhi.n	310a0 <__aeabi_ddiv+0x258>
   3109e:	e137      	b.n	31310 <__aeabi_ddiv+0x4c8>
   310a0:	2302      	movs	r3, #2
   310a2:	425b      	negs	r3, r3
   310a4:	469c      	mov	ip, r3
   310a6:	4445      	add	r5, r8
   310a8:	44e3      	add	fp, ip
   310aa:	464b      	mov	r3, r9
   310ac:	1aeb      	subs	r3, r5, r3
   310ae:	0039      	movs	r1, r7
   310b0:	0018      	movs	r0, r3
   310b2:	9304      	str	r3, [sp, #16]
   310b4:	f7ff fa18 	bl	304e8 <__udivsi3>
   310b8:	9b01      	ldr	r3, [sp, #4]
   310ba:	0005      	movs	r5, r0
   310bc:	4343      	muls	r3, r0
   310be:	0039      	movs	r1, r7
   310c0:	9804      	ldr	r0, [sp, #16]
   310c2:	4699      	mov	r9, r3
   310c4:	f7ff fa96 	bl	305f4 <__aeabi_uidivmod>
   310c8:	0433      	lsls	r3, r6, #16
   310ca:	0409      	lsls	r1, r1, #16
   310cc:	0c1b      	lsrs	r3, r3, #16
   310ce:	430b      	orrs	r3, r1
   310d0:	4599      	cmp	r9, r3
   310d2:	d909      	bls.n	310e8 <__aeabi_ddiv+0x2a0>
   310d4:	4443      	add	r3, r8
   310d6:	1e6a      	subs	r2, r5, #1
   310d8:	4598      	cmp	r8, r3
   310da:	d900      	bls.n	310de <__aeabi_ddiv+0x296>
   310dc:	e11a      	b.n	31314 <__aeabi_ddiv+0x4cc>
   310de:	4599      	cmp	r9, r3
   310e0:	d800      	bhi.n	310e4 <__aeabi_ddiv+0x29c>
   310e2:	e117      	b.n	31314 <__aeabi_ddiv+0x4cc>
   310e4:	3d02      	subs	r5, #2
   310e6:	4443      	add	r3, r8
   310e8:	464a      	mov	r2, r9
   310ea:	1a9b      	subs	r3, r3, r2
   310ec:	465a      	mov	r2, fp
   310ee:	0412      	lsls	r2, r2, #16
   310f0:	432a      	orrs	r2, r5
   310f2:	9903      	ldr	r1, [sp, #12]
   310f4:	4693      	mov	fp, r2
   310f6:	0c10      	lsrs	r0, r2, #16
   310f8:	0c0a      	lsrs	r2, r1, #16
   310fa:	4691      	mov	r9, r2
   310fc:	0409      	lsls	r1, r1, #16
   310fe:	465a      	mov	r2, fp
   31100:	0c09      	lsrs	r1, r1, #16
   31102:	464e      	mov	r6, r9
   31104:	000d      	movs	r5, r1
   31106:	0412      	lsls	r2, r2, #16
   31108:	0c12      	lsrs	r2, r2, #16
   3110a:	4345      	muls	r5, r0
   3110c:	9105      	str	r1, [sp, #20]
   3110e:	4351      	muls	r1, r2
   31110:	4372      	muls	r2, r6
   31112:	4370      	muls	r0, r6
   31114:	1952      	adds	r2, r2, r5
   31116:	0c0e      	lsrs	r6, r1, #16
   31118:	18b2      	adds	r2, r6, r2
   3111a:	4295      	cmp	r5, r2
   3111c:	d903      	bls.n	31126 <__aeabi_ddiv+0x2de>
   3111e:	2580      	movs	r5, #128	; 0x80
   31120:	026d      	lsls	r5, r5, #9
   31122:	46ac      	mov	ip, r5
   31124:	4460      	add	r0, ip
   31126:	0c15      	lsrs	r5, r2, #16
   31128:	0409      	lsls	r1, r1, #16
   3112a:	0412      	lsls	r2, r2, #16
   3112c:	0c09      	lsrs	r1, r1, #16
   3112e:	1828      	adds	r0, r5, r0
   31130:	1852      	adds	r2, r2, r1
   31132:	4283      	cmp	r3, r0
   31134:	d200      	bcs.n	31138 <__aeabi_ddiv+0x2f0>
   31136:	e0ce      	b.n	312d6 <__aeabi_ddiv+0x48e>
   31138:	d100      	bne.n	3113c <__aeabi_ddiv+0x2f4>
   3113a:	e0c8      	b.n	312ce <__aeabi_ddiv+0x486>
   3113c:	1a1d      	subs	r5, r3, r0
   3113e:	4653      	mov	r3, sl
   31140:	1a9e      	subs	r6, r3, r2
   31142:	45b2      	cmp	sl, r6
   31144:	4192      	sbcs	r2, r2
   31146:	4252      	negs	r2, r2
   31148:	1aab      	subs	r3, r5, r2
   3114a:	469a      	mov	sl, r3
   3114c:	4598      	cmp	r8, r3
   3114e:	d100      	bne.n	31152 <__aeabi_ddiv+0x30a>
   31150:	e117      	b.n	31382 <__aeabi_ddiv+0x53a>
   31152:	0039      	movs	r1, r7
   31154:	0018      	movs	r0, r3
   31156:	f7ff f9c7 	bl	304e8 <__udivsi3>
   3115a:	9b01      	ldr	r3, [sp, #4]
   3115c:	0005      	movs	r5, r0
   3115e:	4343      	muls	r3, r0
   31160:	0039      	movs	r1, r7
   31162:	4650      	mov	r0, sl
   31164:	9304      	str	r3, [sp, #16]
   31166:	f7ff fa45 	bl	305f4 <__aeabi_uidivmod>
   3116a:	9804      	ldr	r0, [sp, #16]
   3116c:	040b      	lsls	r3, r1, #16
   3116e:	0c31      	lsrs	r1, r6, #16
   31170:	4319      	orrs	r1, r3
   31172:	4288      	cmp	r0, r1
   31174:	d909      	bls.n	3118a <__aeabi_ddiv+0x342>
   31176:	4441      	add	r1, r8
   31178:	1e6b      	subs	r3, r5, #1
   3117a:	4588      	cmp	r8, r1
   3117c:	d900      	bls.n	31180 <__aeabi_ddiv+0x338>
   3117e:	e107      	b.n	31390 <__aeabi_ddiv+0x548>
   31180:	4288      	cmp	r0, r1
   31182:	d800      	bhi.n	31186 <__aeabi_ddiv+0x33e>
   31184:	e104      	b.n	31390 <__aeabi_ddiv+0x548>
   31186:	3d02      	subs	r5, #2
   31188:	4441      	add	r1, r8
   3118a:	9b04      	ldr	r3, [sp, #16]
   3118c:	1acb      	subs	r3, r1, r3
   3118e:	0018      	movs	r0, r3
   31190:	0039      	movs	r1, r7
   31192:	9304      	str	r3, [sp, #16]
   31194:	f7ff f9a8 	bl	304e8 <__udivsi3>
   31198:	9b01      	ldr	r3, [sp, #4]
   3119a:	4682      	mov	sl, r0
   3119c:	4343      	muls	r3, r0
   3119e:	0039      	movs	r1, r7
   311a0:	9804      	ldr	r0, [sp, #16]
   311a2:	9301      	str	r3, [sp, #4]
   311a4:	f7ff fa26 	bl	305f4 <__aeabi_uidivmod>
   311a8:	9801      	ldr	r0, [sp, #4]
   311aa:	040b      	lsls	r3, r1, #16
   311ac:	0431      	lsls	r1, r6, #16
   311ae:	0c09      	lsrs	r1, r1, #16
   311b0:	4319      	orrs	r1, r3
   311b2:	4288      	cmp	r0, r1
   311b4:	d90d      	bls.n	311d2 <__aeabi_ddiv+0x38a>
   311b6:	4653      	mov	r3, sl
   311b8:	4441      	add	r1, r8
   311ba:	3b01      	subs	r3, #1
   311bc:	4588      	cmp	r8, r1
   311be:	d900      	bls.n	311c2 <__aeabi_ddiv+0x37a>
   311c0:	e0e8      	b.n	31394 <__aeabi_ddiv+0x54c>
   311c2:	4288      	cmp	r0, r1
   311c4:	d800      	bhi.n	311c8 <__aeabi_ddiv+0x380>
   311c6:	e0e5      	b.n	31394 <__aeabi_ddiv+0x54c>
   311c8:	2302      	movs	r3, #2
   311ca:	425b      	negs	r3, r3
   311cc:	469c      	mov	ip, r3
   311ce:	4441      	add	r1, r8
   311d0:	44e2      	add	sl, ip
   311d2:	9b01      	ldr	r3, [sp, #4]
   311d4:	042d      	lsls	r5, r5, #16
   311d6:	1ace      	subs	r6, r1, r3
   311d8:	4651      	mov	r1, sl
   311da:	4329      	orrs	r1, r5
   311dc:	9d05      	ldr	r5, [sp, #20]
   311de:	464f      	mov	r7, r9
   311e0:	002a      	movs	r2, r5
   311e2:	040b      	lsls	r3, r1, #16
   311e4:	0c08      	lsrs	r0, r1, #16
   311e6:	0c1b      	lsrs	r3, r3, #16
   311e8:	435a      	muls	r2, r3
   311ea:	4345      	muls	r5, r0
   311ec:	437b      	muls	r3, r7
   311ee:	4378      	muls	r0, r7
   311f0:	195b      	adds	r3, r3, r5
   311f2:	0c17      	lsrs	r7, r2, #16
   311f4:	18fb      	adds	r3, r7, r3
   311f6:	429d      	cmp	r5, r3
   311f8:	d903      	bls.n	31202 <__aeabi_ddiv+0x3ba>
   311fa:	2580      	movs	r5, #128	; 0x80
   311fc:	026d      	lsls	r5, r5, #9
   311fe:	46ac      	mov	ip, r5
   31200:	4460      	add	r0, ip
   31202:	0c1d      	lsrs	r5, r3, #16
   31204:	0412      	lsls	r2, r2, #16
   31206:	041b      	lsls	r3, r3, #16
   31208:	0c12      	lsrs	r2, r2, #16
   3120a:	1828      	adds	r0, r5, r0
   3120c:	189b      	adds	r3, r3, r2
   3120e:	4286      	cmp	r6, r0
   31210:	d200      	bcs.n	31214 <__aeabi_ddiv+0x3cc>
   31212:	e093      	b.n	3133c <__aeabi_ddiv+0x4f4>
   31214:	d100      	bne.n	31218 <__aeabi_ddiv+0x3d0>
   31216:	e08e      	b.n	31336 <__aeabi_ddiv+0x4ee>
   31218:	2301      	movs	r3, #1
   3121a:	4319      	orrs	r1, r3
   3121c:	4ba0      	ldr	r3, [pc, #640]	; (314a0 <__aeabi_ddiv+0x658>)
   3121e:	18e3      	adds	r3, r4, r3
   31220:	2b00      	cmp	r3, #0
   31222:	dc00      	bgt.n	31226 <__aeabi_ddiv+0x3de>
   31224:	e099      	b.n	3135a <__aeabi_ddiv+0x512>
   31226:	074a      	lsls	r2, r1, #29
   31228:	d000      	beq.n	3122c <__aeabi_ddiv+0x3e4>
   3122a:	e09e      	b.n	3136a <__aeabi_ddiv+0x522>
   3122c:	465a      	mov	r2, fp
   3122e:	01d2      	lsls	r2, r2, #7
   31230:	d506      	bpl.n	31240 <__aeabi_ddiv+0x3f8>
   31232:	465a      	mov	r2, fp
   31234:	4b9b      	ldr	r3, [pc, #620]	; (314a4 <__aeabi_ddiv+0x65c>)
   31236:	401a      	ands	r2, r3
   31238:	2380      	movs	r3, #128	; 0x80
   3123a:	4693      	mov	fp, r2
   3123c:	00db      	lsls	r3, r3, #3
   3123e:	18e3      	adds	r3, r4, r3
   31240:	4a99      	ldr	r2, [pc, #612]	; (314a8 <__aeabi_ddiv+0x660>)
   31242:	4293      	cmp	r3, r2
   31244:	dd68      	ble.n	31318 <__aeabi_ddiv+0x4d0>
   31246:	2301      	movs	r3, #1
   31248:	9a02      	ldr	r2, [sp, #8]
   3124a:	4c98      	ldr	r4, [pc, #608]	; (314ac <__aeabi_ddiv+0x664>)
   3124c:	401a      	ands	r2, r3
   3124e:	2300      	movs	r3, #0
   31250:	4694      	mov	ip, r2
   31252:	4698      	mov	r8, r3
   31254:	2200      	movs	r2, #0
   31256:	e6c5      	b.n	30fe4 <__aeabi_ddiv+0x19c>
   31258:	2280      	movs	r2, #128	; 0x80
   3125a:	464b      	mov	r3, r9
   3125c:	0312      	lsls	r2, r2, #12
   3125e:	4213      	tst	r3, r2
   31260:	d00a      	beq.n	31278 <__aeabi_ddiv+0x430>
   31262:	465b      	mov	r3, fp
   31264:	4213      	tst	r3, r2
   31266:	d106      	bne.n	31276 <__aeabi_ddiv+0x42e>
   31268:	431a      	orrs	r2, r3
   3126a:	0312      	lsls	r2, r2, #12
   3126c:	0b12      	lsrs	r2, r2, #12
   3126e:	46ac      	mov	ip, r5
   31270:	4688      	mov	r8, r1
   31272:	4c8e      	ldr	r4, [pc, #568]	; (314ac <__aeabi_ddiv+0x664>)
   31274:	e6b6      	b.n	30fe4 <__aeabi_ddiv+0x19c>
   31276:	464b      	mov	r3, r9
   31278:	431a      	orrs	r2, r3
   3127a:	0312      	lsls	r2, r2, #12
   3127c:	0b12      	lsrs	r2, r2, #12
   3127e:	46bc      	mov	ip, r7
   31280:	4c8a      	ldr	r4, [pc, #552]	; (314ac <__aeabi_ddiv+0x664>)
   31282:	e6af      	b.n	30fe4 <__aeabi_ddiv+0x19c>
   31284:	0003      	movs	r3, r0
   31286:	465a      	mov	r2, fp
   31288:	3b28      	subs	r3, #40	; 0x28
   3128a:	409a      	lsls	r2, r3
   3128c:	2300      	movs	r3, #0
   3128e:	4691      	mov	r9, r2
   31290:	4698      	mov	r8, r3
   31292:	e657      	b.n	30f44 <__aeabi_ddiv+0xfc>
   31294:	4658      	mov	r0, fp
   31296:	f000 ff0d 	bl	320b4 <__clzsi2>
   3129a:	3020      	adds	r0, #32
   3129c:	e640      	b.n	30f20 <__aeabi_ddiv+0xd8>
   3129e:	0003      	movs	r3, r0
   312a0:	4652      	mov	r2, sl
   312a2:	3b28      	subs	r3, #40	; 0x28
   312a4:	409a      	lsls	r2, r3
   312a6:	2100      	movs	r1, #0
   312a8:	4693      	mov	fp, r2
   312aa:	e677      	b.n	30f9c <__aeabi_ddiv+0x154>
   312ac:	f000 ff02 	bl	320b4 <__clzsi2>
   312b0:	3020      	adds	r0, #32
   312b2:	e65f      	b.n	30f74 <__aeabi_ddiv+0x12c>
   312b4:	4588      	cmp	r8, r1
   312b6:	d200      	bcs.n	312ba <__aeabi_ddiv+0x472>
   312b8:	e6c7      	b.n	3104a <__aeabi_ddiv+0x202>
   312ba:	464b      	mov	r3, r9
   312bc:	07de      	lsls	r6, r3, #31
   312be:	085d      	lsrs	r5, r3, #1
   312c0:	4643      	mov	r3, r8
   312c2:	085b      	lsrs	r3, r3, #1
   312c4:	431e      	orrs	r6, r3
   312c6:	4643      	mov	r3, r8
   312c8:	07db      	lsls	r3, r3, #31
   312ca:	469a      	mov	sl, r3
   312cc:	e6c2      	b.n	31054 <__aeabi_ddiv+0x20c>
   312ce:	2500      	movs	r5, #0
   312d0:	4592      	cmp	sl, r2
   312d2:	d300      	bcc.n	312d6 <__aeabi_ddiv+0x48e>
   312d4:	e733      	b.n	3113e <__aeabi_ddiv+0x2f6>
   312d6:	9e03      	ldr	r6, [sp, #12]
   312d8:	4659      	mov	r1, fp
   312da:	46b4      	mov	ip, r6
   312dc:	44e2      	add	sl, ip
   312de:	45b2      	cmp	sl, r6
   312e0:	41ad      	sbcs	r5, r5
   312e2:	426d      	negs	r5, r5
   312e4:	4445      	add	r5, r8
   312e6:	18eb      	adds	r3, r5, r3
   312e8:	3901      	subs	r1, #1
   312ea:	4598      	cmp	r8, r3
   312ec:	d207      	bcs.n	312fe <__aeabi_ddiv+0x4b6>
   312ee:	4298      	cmp	r0, r3
   312f0:	d900      	bls.n	312f4 <__aeabi_ddiv+0x4ac>
   312f2:	e07f      	b.n	313f4 <__aeabi_ddiv+0x5ac>
   312f4:	d100      	bne.n	312f8 <__aeabi_ddiv+0x4b0>
   312f6:	e0bc      	b.n	31472 <__aeabi_ddiv+0x62a>
   312f8:	1a1d      	subs	r5, r3, r0
   312fa:	468b      	mov	fp, r1
   312fc:	e71f      	b.n	3113e <__aeabi_ddiv+0x2f6>
   312fe:	4598      	cmp	r8, r3
   31300:	d1fa      	bne.n	312f8 <__aeabi_ddiv+0x4b0>
   31302:	9d03      	ldr	r5, [sp, #12]
   31304:	4555      	cmp	r5, sl
   31306:	d9f2      	bls.n	312ee <__aeabi_ddiv+0x4a6>
   31308:	4643      	mov	r3, r8
   3130a:	468b      	mov	fp, r1
   3130c:	1a1d      	subs	r5, r3, r0
   3130e:	e716      	b.n	3113e <__aeabi_ddiv+0x2f6>
   31310:	469b      	mov	fp, r3
   31312:	e6ca      	b.n	310aa <__aeabi_ddiv+0x262>
   31314:	0015      	movs	r5, r2
   31316:	e6e7      	b.n	310e8 <__aeabi_ddiv+0x2a0>
   31318:	465a      	mov	r2, fp
   3131a:	08c9      	lsrs	r1, r1, #3
   3131c:	0752      	lsls	r2, r2, #29
   3131e:	430a      	orrs	r2, r1
   31320:	055b      	lsls	r3, r3, #21
   31322:	4690      	mov	r8, r2
   31324:	0d5c      	lsrs	r4, r3, #21
   31326:	465a      	mov	r2, fp
   31328:	2301      	movs	r3, #1
   3132a:	9902      	ldr	r1, [sp, #8]
   3132c:	0252      	lsls	r2, r2, #9
   3132e:	4019      	ands	r1, r3
   31330:	0b12      	lsrs	r2, r2, #12
   31332:	468c      	mov	ip, r1
   31334:	e656      	b.n	30fe4 <__aeabi_ddiv+0x19c>
   31336:	2b00      	cmp	r3, #0
   31338:	d100      	bne.n	3133c <__aeabi_ddiv+0x4f4>
   3133a:	e76f      	b.n	3121c <__aeabi_ddiv+0x3d4>
   3133c:	4446      	add	r6, r8
   3133e:	1e4a      	subs	r2, r1, #1
   31340:	45b0      	cmp	r8, r6
   31342:	d929      	bls.n	31398 <__aeabi_ddiv+0x550>
   31344:	0011      	movs	r1, r2
   31346:	4286      	cmp	r6, r0
   31348:	d000      	beq.n	3134c <__aeabi_ddiv+0x504>
   3134a:	e765      	b.n	31218 <__aeabi_ddiv+0x3d0>
   3134c:	9a03      	ldr	r2, [sp, #12]
   3134e:	4293      	cmp	r3, r2
   31350:	d000      	beq.n	31354 <__aeabi_ddiv+0x50c>
   31352:	e761      	b.n	31218 <__aeabi_ddiv+0x3d0>
   31354:	e762      	b.n	3121c <__aeabi_ddiv+0x3d4>
   31356:	2101      	movs	r1, #1
   31358:	4249      	negs	r1, r1
   3135a:	2001      	movs	r0, #1
   3135c:	1ac2      	subs	r2, r0, r3
   3135e:	2a38      	cmp	r2, #56	; 0x38
   31360:	dd21      	ble.n	313a6 <__aeabi_ddiv+0x55e>
   31362:	9b02      	ldr	r3, [sp, #8]
   31364:	4003      	ands	r3, r0
   31366:	469c      	mov	ip, r3
   31368:	e638      	b.n	30fdc <__aeabi_ddiv+0x194>
   3136a:	220f      	movs	r2, #15
   3136c:	400a      	ands	r2, r1
   3136e:	2a04      	cmp	r2, #4
   31370:	d100      	bne.n	31374 <__aeabi_ddiv+0x52c>
   31372:	e75b      	b.n	3122c <__aeabi_ddiv+0x3e4>
   31374:	000a      	movs	r2, r1
   31376:	1d11      	adds	r1, r2, #4
   31378:	4291      	cmp	r1, r2
   3137a:	4192      	sbcs	r2, r2
   3137c:	4252      	negs	r2, r2
   3137e:	4493      	add	fp, r2
   31380:	e754      	b.n	3122c <__aeabi_ddiv+0x3e4>
   31382:	4b47      	ldr	r3, [pc, #284]	; (314a0 <__aeabi_ddiv+0x658>)
   31384:	18e3      	adds	r3, r4, r3
   31386:	2b00      	cmp	r3, #0
   31388:	dde5      	ble.n	31356 <__aeabi_ddiv+0x50e>
   3138a:	2201      	movs	r2, #1
   3138c:	4252      	negs	r2, r2
   3138e:	e7f2      	b.n	31376 <__aeabi_ddiv+0x52e>
   31390:	001d      	movs	r5, r3
   31392:	e6fa      	b.n	3118a <__aeabi_ddiv+0x342>
   31394:	469a      	mov	sl, r3
   31396:	e71c      	b.n	311d2 <__aeabi_ddiv+0x38a>
   31398:	42b0      	cmp	r0, r6
   3139a:	d839      	bhi.n	31410 <__aeabi_ddiv+0x5c8>
   3139c:	d06e      	beq.n	3147c <__aeabi_ddiv+0x634>
   3139e:	0011      	movs	r1, r2
   313a0:	e73a      	b.n	31218 <__aeabi_ddiv+0x3d0>
   313a2:	9302      	str	r3, [sp, #8]
   313a4:	e73a      	b.n	3121c <__aeabi_ddiv+0x3d4>
   313a6:	2a1f      	cmp	r2, #31
   313a8:	dc3c      	bgt.n	31424 <__aeabi_ddiv+0x5dc>
   313aa:	2320      	movs	r3, #32
   313ac:	1a9b      	subs	r3, r3, r2
   313ae:	000c      	movs	r4, r1
   313b0:	4658      	mov	r0, fp
   313b2:	4099      	lsls	r1, r3
   313b4:	4098      	lsls	r0, r3
   313b6:	1e4b      	subs	r3, r1, #1
   313b8:	4199      	sbcs	r1, r3
   313ba:	465b      	mov	r3, fp
   313bc:	40d4      	lsrs	r4, r2
   313be:	40d3      	lsrs	r3, r2
   313c0:	4320      	orrs	r0, r4
   313c2:	4308      	orrs	r0, r1
   313c4:	001a      	movs	r2, r3
   313c6:	0743      	lsls	r3, r0, #29
   313c8:	d009      	beq.n	313de <__aeabi_ddiv+0x596>
   313ca:	230f      	movs	r3, #15
   313cc:	4003      	ands	r3, r0
   313ce:	2b04      	cmp	r3, #4
   313d0:	d005      	beq.n	313de <__aeabi_ddiv+0x596>
   313d2:	0001      	movs	r1, r0
   313d4:	1d08      	adds	r0, r1, #4
   313d6:	4288      	cmp	r0, r1
   313d8:	419b      	sbcs	r3, r3
   313da:	425b      	negs	r3, r3
   313dc:	18d2      	adds	r2, r2, r3
   313de:	0213      	lsls	r3, r2, #8
   313e0:	d53a      	bpl.n	31458 <__aeabi_ddiv+0x610>
   313e2:	2301      	movs	r3, #1
   313e4:	9a02      	ldr	r2, [sp, #8]
   313e6:	2401      	movs	r4, #1
   313e8:	401a      	ands	r2, r3
   313ea:	2300      	movs	r3, #0
   313ec:	4694      	mov	ip, r2
   313ee:	4698      	mov	r8, r3
   313f0:	2200      	movs	r2, #0
   313f2:	e5f7      	b.n	30fe4 <__aeabi_ddiv+0x19c>
   313f4:	2102      	movs	r1, #2
   313f6:	4249      	negs	r1, r1
   313f8:	468c      	mov	ip, r1
   313fa:	9d03      	ldr	r5, [sp, #12]
   313fc:	44e3      	add	fp, ip
   313fe:	46ac      	mov	ip, r5
   31400:	44e2      	add	sl, ip
   31402:	45aa      	cmp	sl, r5
   31404:	41ad      	sbcs	r5, r5
   31406:	426d      	negs	r5, r5
   31408:	4445      	add	r5, r8
   3140a:	18ed      	adds	r5, r5, r3
   3140c:	1a2d      	subs	r5, r5, r0
   3140e:	e696      	b.n	3113e <__aeabi_ddiv+0x2f6>
   31410:	1e8a      	subs	r2, r1, #2
   31412:	9903      	ldr	r1, [sp, #12]
   31414:	004d      	lsls	r5, r1, #1
   31416:	428d      	cmp	r5, r1
   31418:	4189      	sbcs	r1, r1
   3141a:	4249      	negs	r1, r1
   3141c:	4441      	add	r1, r8
   3141e:	1876      	adds	r6, r6, r1
   31420:	9503      	str	r5, [sp, #12]
   31422:	e78f      	b.n	31344 <__aeabi_ddiv+0x4fc>
   31424:	201f      	movs	r0, #31
   31426:	4240      	negs	r0, r0
   31428:	1ac3      	subs	r3, r0, r3
   3142a:	4658      	mov	r0, fp
   3142c:	40d8      	lsrs	r0, r3
   3142e:	0003      	movs	r3, r0
   31430:	2a20      	cmp	r2, #32
   31432:	d028      	beq.n	31486 <__aeabi_ddiv+0x63e>
   31434:	2040      	movs	r0, #64	; 0x40
   31436:	465d      	mov	r5, fp
   31438:	1a82      	subs	r2, r0, r2
   3143a:	4095      	lsls	r5, r2
   3143c:	4329      	orrs	r1, r5
   3143e:	1e4a      	subs	r2, r1, #1
   31440:	4191      	sbcs	r1, r2
   31442:	4319      	orrs	r1, r3
   31444:	2307      	movs	r3, #7
   31446:	2200      	movs	r2, #0
   31448:	400b      	ands	r3, r1
   3144a:	d009      	beq.n	31460 <__aeabi_ddiv+0x618>
   3144c:	230f      	movs	r3, #15
   3144e:	2200      	movs	r2, #0
   31450:	400b      	ands	r3, r1
   31452:	0008      	movs	r0, r1
   31454:	2b04      	cmp	r3, #4
   31456:	d1bd      	bne.n	313d4 <__aeabi_ddiv+0x58c>
   31458:	0001      	movs	r1, r0
   3145a:	0753      	lsls	r3, r2, #29
   3145c:	0252      	lsls	r2, r2, #9
   3145e:	0b12      	lsrs	r2, r2, #12
   31460:	08c9      	lsrs	r1, r1, #3
   31462:	4319      	orrs	r1, r3
   31464:	2301      	movs	r3, #1
   31466:	4688      	mov	r8, r1
   31468:	9902      	ldr	r1, [sp, #8]
   3146a:	2400      	movs	r4, #0
   3146c:	4019      	ands	r1, r3
   3146e:	468c      	mov	ip, r1
   31470:	e5b8      	b.n	30fe4 <__aeabi_ddiv+0x19c>
   31472:	4552      	cmp	r2, sl
   31474:	d8be      	bhi.n	313f4 <__aeabi_ddiv+0x5ac>
   31476:	468b      	mov	fp, r1
   31478:	2500      	movs	r5, #0
   3147a:	e660      	b.n	3113e <__aeabi_ddiv+0x2f6>
   3147c:	9d03      	ldr	r5, [sp, #12]
   3147e:	429d      	cmp	r5, r3
   31480:	d3c6      	bcc.n	31410 <__aeabi_ddiv+0x5c8>
   31482:	0011      	movs	r1, r2
   31484:	e762      	b.n	3134c <__aeabi_ddiv+0x504>
   31486:	2500      	movs	r5, #0
   31488:	e7d8      	b.n	3143c <__aeabi_ddiv+0x5f4>
   3148a:	2280      	movs	r2, #128	; 0x80
   3148c:	465b      	mov	r3, fp
   3148e:	0312      	lsls	r2, r2, #12
   31490:	431a      	orrs	r2, r3
   31492:	9b01      	ldr	r3, [sp, #4]
   31494:	0312      	lsls	r2, r2, #12
   31496:	0b12      	lsrs	r2, r2, #12
   31498:	469c      	mov	ip, r3
   3149a:	4688      	mov	r8, r1
   3149c:	4c03      	ldr	r4, [pc, #12]	; (314ac <__aeabi_ddiv+0x664>)
   3149e:	e5a1      	b.n	30fe4 <__aeabi_ddiv+0x19c>
   314a0:	000003ff 	.word	0x000003ff
   314a4:	feffffff 	.word	0xfeffffff
   314a8:	000007fe 	.word	0x000007fe
   314ac:	000007ff 	.word	0x000007ff

000314b0 <__aeabi_dmul>:
   314b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   314b2:	4657      	mov	r7, sl
   314b4:	4645      	mov	r5, r8
   314b6:	46de      	mov	lr, fp
   314b8:	464e      	mov	r6, r9
   314ba:	b5e0      	push	{r5, r6, r7, lr}
   314bc:	030c      	lsls	r4, r1, #12
   314be:	4698      	mov	r8, r3
   314c0:	004e      	lsls	r6, r1, #1
   314c2:	0b23      	lsrs	r3, r4, #12
   314c4:	b087      	sub	sp, #28
   314c6:	0007      	movs	r7, r0
   314c8:	4692      	mov	sl, r2
   314ca:	469b      	mov	fp, r3
   314cc:	0d76      	lsrs	r6, r6, #21
   314ce:	0fcd      	lsrs	r5, r1, #31
   314d0:	2e00      	cmp	r6, #0
   314d2:	d06b      	beq.n	315ac <__aeabi_dmul+0xfc>
   314d4:	4b6d      	ldr	r3, [pc, #436]	; (3168c <__aeabi_dmul+0x1dc>)
   314d6:	429e      	cmp	r6, r3
   314d8:	d035      	beq.n	31546 <__aeabi_dmul+0x96>
   314da:	2480      	movs	r4, #128	; 0x80
   314dc:	465b      	mov	r3, fp
   314de:	0f42      	lsrs	r2, r0, #29
   314e0:	0424      	lsls	r4, r4, #16
   314e2:	00db      	lsls	r3, r3, #3
   314e4:	4314      	orrs	r4, r2
   314e6:	431c      	orrs	r4, r3
   314e8:	00c3      	lsls	r3, r0, #3
   314ea:	4699      	mov	r9, r3
   314ec:	4b68      	ldr	r3, [pc, #416]	; (31690 <__aeabi_dmul+0x1e0>)
   314ee:	46a3      	mov	fp, r4
   314f0:	469c      	mov	ip, r3
   314f2:	2300      	movs	r3, #0
   314f4:	2700      	movs	r7, #0
   314f6:	4466      	add	r6, ip
   314f8:	9302      	str	r3, [sp, #8]
   314fa:	4643      	mov	r3, r8
   314fc:	031c      	lsls	r4, r3, #12
   314fe:	005a      	lsls	r2, r3, #1
   31500:	0fdb      	lsrs	r3, r3, #31
   31502:	4650      	mov	r0, sl
   31504:	0b24      	lsrs	r4, r4, #12
   31506:	0d52      	lsrs	r2, r2, #21
   31508:	4698      	mov	r8, r3
   3150a:	d100      	bne.n	3150e <__aeabi_dmul+0x5e>
   3150c:	e076      	b.n	315fc <__aeabi_dmul+0x14c>
   3150e:	4b5f      	ldr	r3, [pc, #380]	; (3168c <__aeabi_dmul+0x1dc>)
   31510:	429a      	cmp	r2, r3
   31512:	d06d      	beq.n	315f0 <__aeabi_dmul+0x140>
   31514:	2380      	movs	r3, #128	; 0x80
   31516:	0f41      	lsrs	r1, r0, #29
   31518:	041b      	lsls	r3, r3, #16
   3151a:	430b      	orrs	r3, r1
   3151c:	495c      	ldr	r1, [pc, #368]	; (31690 <__aeabi_dmul+0x1e0>)
   3151e:	00e4      	lsls	r4, r4, #3
   31520:	468c      	mov	ip, r1
   31522:	431c      	orrs	r4, r3
   31524:	00c3      	lsls	r3, r0, #3
   31526:	2000      	movs	r0, #0
   31528:	4462      	add	r2, ip
   3152a:	4641      	mov	r1, r8
   3152c:	18b6      	adds	r6, r6, r2
   3152e:	4069      	eors	r1, r5
   31530:	1c72      	adds	r2, r6, #1
   31532:	9101      	str	r1, [sp, #4]
   31534:	4694      	mov	ip, r2
   31536:	4307      	orrs	r7, r0
   31538:	2f0f      	cmp	r7, #15
   3153a:	d900      	bls.n	3153e <__aeabi_dmul+0x8e>
   3153c:	e0b0      	b.n	316a0 <__aeabi_dmul+0x1f0>
   3153e:	4a55      	ldr	r2, [pc, #340]	; (31694 <__aeabi_dmul+0x1e4>)
   31540:	00bf      	lsls	r7, r7, #2
   31542:	59d2      	ldr	r2, [r2, r7]
   31544:	4697      	mov	pc, r2
   31546:	465b      	mov	r3, fp
   31548:	4303      	orrs	r3, r0
   3154a:	4699      	mov	r9, r3
   3154c:	d000      	beq.n	31550 <__aeabi_dmul+0xa0>
   3154e:	e087      	b.n	31660 <__aeabi_dmul+0x1b0>
   31550:	2300      	movs	r3, #0
   31552:	469b      	mov	fp, r3
   31554:	3302      	adds	r3, #2
   31556:	2708      	movs	r7, #8
   31558:	9302      	str	r3, [sp, #8]
   3155a:	e7ce      	b.n	314fa <__aeabi_dmul+0x4a>
   3155c:	4642      	mov	r2, r8
   3155e:	9201      	str	r2, [sp, #4]
   31560:	2802      	cmp	r0, #2
   31562:	d067      	beq.n	31634 <__aeabi_dmul+0x184>
   31564:	2803      	cmp	r0, #3
   31566:	d100      	bne.n	3156a <__aeabi_dmul+0xba>
   31568:	e20e      	b.n	31988 <__aeabi_dmul+0x4d8>
   3156a:	2801      	cmp	r0, #1
   3156c:	d000      	beq.n	31570 <__aeabi_dmul+0xc0>
   3156e:	e162      	b.n	31836 <__aeabi_dmul+0x386>
   31570:	2300      	movs	r3, #0
   31572:	2400      	movs	r4, #0
   31574:	2200      	movs	r2, #0
   31576:	4699      	mov	r9, r3
   31578:	9901      	ldr	r1, [sp, #4]
   3157a:	4001      	ands	r1, r0
   3157c:	b2cd      	uxtb	r5, r1
   3157e:	2100      	movs	r1, #0
   31580:	0312      	lsls	r2, r2, #12
   31582:	0d0b      	lsrs	r3, r1, #20
   31584:	0b12      	lsrs	r2, r2, #12
   31586:	051b      	lsls	r3, r3, #20
   31588:	4313      	orrs	r3, r2
   3158a:	4a43      	ldr	r2, [pc, #268]	; (31698 <__aeabi_dmul+0x1e8>)
   3158c:	0524      	lsls	r4, r4, #20
   3158e:	4013      	ands	r3, r2
   31590:	431c      	orrs	r4, r3
   31592:	0064      	lsls	r4, r4, #1
   31594:	07ed      	lsls	r5, r5, #31
   31596:	0864      	lsrs	r4, r4, #1
   31598:	432c      	orrs	r4, r5
   3159a:	4648      	mov	r0, r9
   3159c:	0021      	movs	r1, r4
   3159e:	b007      	add	sp, #28
   315a0:	bc3c      	pop	{r2, r3, r4, r5}
   315a2:	4690      	mov	r8, r2
   315a4:	4699      	mov	r9, r3
   315a6:	46a2      	mov	sl, r4
   315a8:	46ab      	mov	fp, r5
   315aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   315ac:	4303      	orrs	r3, r0
   315ae:	4699      	mov	r9, r3
   315b0:	d04f      	beq.n	31652 <__aeabi_dmul+0x1a2>
   315b2:	465b      	mov	r3, fp
   315b4:	2b00      	cmp	r3, #0
   315b6:	d100      	bne.n	315ba <__aeabi_dmul+0x10a>
   315b8:	e189      	b.n	318ce <__aeabi_dmul+0x41e>
   315ba:	4658      	mov	r0, fp
   315bc:	f000 fd7a 	bl	320b4 <__clzsi2>
   315c0:	0003      	movs	r3, r0
   315c2:	3b0b      	subs	r3, #11
   315c4:	2b1c      	cmp	r3, #28
   315c6:	dd00      	ble.n	315ca <__aeabi_dmul+0x11a>
   315c8:	e17a      	b.n	318c0 <__aeabi_dmul+0x410>
   315ca:	221d      	movs	r2, #29
   315cc:	1ad3      	subs	r3, r2, r3
   315ce:	003a      	movs	r2, r7
   315d0:	0001      	movs	r1, r0
   315d2:	465c      	mov	r4, fp
   315d4:	40da      	lsrs	r2, r3
   315d6:	3908      	subs	r1, #8
   315d8:	408c      	lsls	r4, r1
   315da:	0013      	movs	r3, r2
   315dc:	408f      	lsls	r7, r1
   315de:	4323      	orrs	r3, r4
   315e0:	469b      	mov	fp, r3
   315e2:	46b9      	mov	r9, r7
   315e4:	2300      	movs	r3, #0
   315e6:	4e2d      	ldr	r6, [pc, #180]	; (3169c <__aeabi_dmul+0x1ec>)
   315e8:	2700      	movs	r7, #0
   315ea:	1a36      	subs	r6, r6, r0
   315ec:	9302      	str	r3, [sp, #8]
   315ee:	e784      	b.n	314fa <__aeabi_dmul+0x4a>
   315f0:	4653      	mov	r3, sl
   315f2:	4323      	orrs	r3, r4
   315f4:	d12a      	bne.n	3164c <__aeabi_dmul+0x19c>
   315f6:	2400      	movs	r4, #0
   315f8:	2002      	movs	r0, #2
   315fa:	e796      	b.n	3152a <__aeabi_dmul+0x7a>
   315fc:	4653      	mov	r3, sl
   315fe:	4323      	orrs	r3, r4
   31600:	d020      	beq.n	31644 <__aeabi_dmul+0x194>
   31602:	2c00      	cmp	r4, #0
   31604:	d100      	bne.n	31608 <__aeabi_dmul+0x158>
   31606:	e157      	b.n	318b8 <__aeabi_dmul+0x408>
   31608:	0020      	movs	r0, r4
   3160a:	f000 fd53 	bl	320b4 <__clzsi2>
   3160e:	0003      	movs	r3, r0
   31610:	3b0b      	subs	r3, #11
   31612:	2b1c      	cmp	r3, #28
   31614:	dd00      	ble.n	31618 <__aeabi_dmul+0x168>
   31616:	e149      	b.n	318ac <__aeabi_dmul+0x3fc>
   31618:	211d      	movs	r1, #29
   3161a:	1acb      	subs	r3, r1, r3
   3161c:	4651      	mov	r1, sl
   3161e:	0002      	movs	r2, r0
   31620:	40d9      	lsrs	r1, r3
   31622:	4653      	mov	r3, sl
   31624:	3a08      	subs	r2, #8
   31626:	4094      	lsls	r4, r2
   31628:	4093      	lsls	r3, r2
   3162a:	430c      	orrs	r4, r1
   3162c:	4a1b      	ldr	r2, [pc, #108]	; (3169c <__aeabi_dmul+0x1ec>)
   3162e:	1a12      	subs	r2, r2, r0
   31630:	2000      	movs	r0, #0
   31632:	e77a      	b.n	3152a <__aeabi_dmul+0x7a>
   31634:	2501      	movs	r5, #1
   31636:	9b01      	ldr	r3, [sp, #4]
   31638:	4c14      	ldr	r4, [pc, #80]	; (3168c <__aeabi_dmul+0x1dc>)
   3163a:	401d      	ands	r5, r3
   3163c:	2300      	movs	r3, #0
   3163e:	2200      	movs	r2, #0
   31640:	4699      	mov	r9, r3
   31642:	e79c      	b.n	3157e <__aeabi_dmul+0xce>
   31644:	2400      	movs	r4, #0
   31646:	2200      	movs	r2, #0
   31648:	2001      	movs	r0, #1
   3164a:	e76e      	b.n	3152a <__aeabi_dmul+0x7a>
   3164c:	4653      	mov	r3, sl
   3164e:	2003      	movs	r0, #3
   31650:	e76b      	b.n	3152a <__aeabi_dmul+0x7a>
   31652:	2300      	movs	r3, #0
   31654:	469b      	mov	fp, r3
   31656:	3301      	adds	r3, #1
   31658:	2704      	movs	r7, #4
   3165a:	2600      	movs	r6, #0
   3165c:	9302      	str	r3, [sp, #8]
   3165e:	e74c      	b.n	314fa <__aeabi_dmul+0x4a>
   31660:	2303      	movs	r3, #3
   31662:	4681      	mov	r9, r0
   31664:	270c      	movs	r7, #12
   31666:	9302      	str	r3, [sp, #8]
   31668:	e747      	b.n	314fa <__aeabi_dmul+0x4a>
   3166a:	2280      	movs	r2, #128	; 0x80
   3166c:	2300      	movs	r3, #0
   3166e:	2500      	movs	r5, #0
   31670:	0312      	lsls	r2, r2, #12
   31672:	4699      	mov	r9, r3
   31674:	4c05      	ldr	r4, [pc, #20]	; (3168c <__aeabi_dmul+0x1dc>)
   31676:	e782      	b.n	3157e <__aeabi_dmul+0xce>
   31678:	465c      	mov	r4, fp
   3167a:	464b      	mov	r3, r9
   3167c:	9802      	ldr	r0, [sp, #8]
   3167e:	e76f      	b.n	31560 <__aeabi_dmul+0xb0>
   31680:	465c      	mov	r4, fp
   31682:	464b      	mov	r3, r9
   31684:	9501      	str	r5, [sp, #4]
   31686:	9802      	ldr	r0, [sp, #8]
   31688:	e76a      	b.n	31560 <__aeabi_dmul+0xb0>
   3168a:	46c0      	nop			; (mov r8, r8)
   3168c:	000007ff 	.word	0x000007ff
   31690:	fffffc01 	.word	0xfffffc01
   31694:	0003741c 	.word	0x0003741c
   31698:	800fffff 	.word	0x800fffff
   3169c:	fffffc0d 	.word	0xfffffc0d
   316a0:	464a      	mov	r2, r9
   316a2:	4649      	mov	r1, r9
   316a4:	0c17      	lsrs	r7, r2, #16
   316a6:	0c1a      	lsrs	r2, r3, #16
   316a8:	041b      	lsls	r3, r3, #16
   316aa:	0c1b      	lsrs	r3, r3, #16
   316ac:	0408      	lsls	r0, r1, #16
   316ae:	0019      	movs	r1, r3
   316b0:	0c00      	lsrs	r0, r0, #16
   316b2:	4341      	muls	r1, r0
   316b4:	0015      	movs	r5, r2
   316b6:	4688      	mov	r8, r1
   316b8:	0019      	movs	r1, r3
   316ba:	437d      	muls	r5, r7
   316bc:	4379      	muls	r1, r7
   316be:	9503      	str	r5, [sp, #12]
   316c0:	4689      	mov	r9, r1
   316c2:	0029      	movs	r1, r5
   316c4:	0015      	movs	r5, r2
   316c6:	4345      	muls	r5, r0
   316c8:	444d      	add	r5, r9
   316ca:	9502      	str	r5, [sp, #8]
   316cc:	4645      	mov	r5, r8
   316ce:	0c2d      	lsrs	r5, r5, #16
   316d0:	46aa      	mov	sl, r5
   316d2:	9d02      	ldr	r5, [sp, #8]
   316d4:	4455      	add	r5, sl
   316d6:	45a9      	cmp	r9, r5
   316d8:	d906      	bls.n	316e8 <__aeabi_dmul+0x238>
   316da:	468a      	mov	sl, r1
   316dc:	2180      	movs	r1, #128	; 0x80
   316de:	0249      	lsls	r1, r1, #9
   316e0:	4689      	mov	r9, r1
   316e2:	44ca      	add	sl, r9
   316e4:	4651      	mov	r1, sl
   316e6:	9103      	str	r1, [sp, #12]
   316e8:	0c29      	lsrs	r1, r5, #16
   316ea:	9104      	str	r1, [sp, #16]
   316ec:	4641      	mov	r1, r8
   316ee:	0409      	lsls	r1, r1, #16
   316f0:	042d      	lsls	r5, r5, #16
   316f2:	0c09      	lsrs	r1, r1, #16
   316f4:	4688      	mov	r8, r1
   316f6:	0029      	movs	r1, r5
   316f8:	0c25      	lsrs	r5, r4, #16
   316fa:	0424      	lsls	r4, r4, #16
   316fc:	4441      	add	r1, r8
   316fe:	0c24      	lsrs	r4, r4, #16
   31700:	9105      	str	r1, [sp, #20]
   31702:	0021      	movs	r1, r4
   31704:	4341      	muls	r1, r0
   31706:	4688      	mov	r8, r1
   31708:	0021      	movs	r1, r4
   3170a:	4379      	muls	r1, r7
   3170c:	468a      	mov	sl, r1
   3170e:	4368      	muls	r0, r5
   31710:	4641      	mov	r1, r8
   31712:	4450      	add	r0, sl
   31714:	4681      	mov	r9, r0
   31716:	0c08      	lsrs	r0, r1, #16
   31718:	4448      	add	r0, r9
   3171a:	436f      	muls	r7, r5
   3171c:	4582      	cmp	sl, r0
   3171e:	d903      	bls.n	31728 <__aeabi_dmul+0x278>
   31720:	2180      	movs	r1, #128	; 0x80
   31722:	0249      	lsls	r1, r1, #9
   31724:	4689      	mov	r9, r1
   31726:	444f      	add	r7, r9
   31728:	0c01      	lsrs	r1, r0, #16
   3172a:	4689      	mov	r9, r1
   3172c:	0039      	movs	r1, r7
   3172e:	4449      	add	r1, r9
   31730:	9102      	str	r1, [sp, #8]
   31732:	4641      	mov	r1, r8
   31734:	040f      	lsls	r7, r1, #16
   31736:	9904      	ldr	r1, [sp, #16]
   31738:	0c3f      	lsrs	r7, r7, #16
   3173a:	4688      	mov	r8, r1
   3173c:	0400      	lsls	r0, r0, #16
   3173e:	19c0      	adds	r0, r0, r7
   31740:	4480      	add	r8, r0
   31742:	4641      	mov	r1, r8
   31744:	9104      	str	r1, [sp, #16]
   31746:	4659      	mov	r1, fp
   31748:	0c0f      	lsrs	r7, r1, #16
   3174a:	0409      	lsls	r1, r1, #16
   3174c:	0c09      	lsrs	r1, r1, #16
   3174e:	4688      	mov	r8, r1
   31750:	4359      	muls	r1, r3
   31752:	468a      	mov	sl, r1
   31754:	0039      	movs	r1, r7
   31756:	4351      	muls	r1, r2
   31758:	4689      	mov	r9, r1
   3175a:	4641      	mov	r1, r8
   3175c:	434a      	muls	r2, r1
   3175e:	4651      	mov	r1, sl
   31760:	0c09      	lsrs	r1, r1, #16
   31762:	468b      	mov	fp, r1
   31764:	437b      	muls	r3, r7
   31766:	18d2      	adds	r2, r2, r3
   31768:	445a      	add	r2, fp
   3176a:	4293      	cmp	r3, r2
   3176c:	d903      	bls.n	31776 <__aeabi_dmul+0x2c6>
   3176e:	2380      	movs	r3, #128	; 0x80
   31770:	025b      	lsls	r3, r3, #9
   31772:	469b      	mov	fp, r3
   31774:	44d9      	add	r9, fp
   31776:	4651      	mov	r1, sl
   31778:	0409      	lsls	r1, r1, #16
   3177a:	0c09      	lsrs	r1, r1, #16
   3177c:	468a      	mov	sl, r1
   3177e:	4641      	mov	r1, r8
   31780:	4361      	muls	r1, r4
   31782:	437c      	muls	r4, r7
   31784:	0c13      	lsrs	r3, r2, #16
   31786:	0412      	lsls	r2, r2, #16
   31788:	444b      	add	r3, r9
   3178a:	4452      	add	r2, sl
   3178c:	46a1      	mov	r9, r4
   3178e:	468a      	mov	sl, r1
   31790:	003c      	movs	r4, r7
   31792:	4641      	mov	r1, r8
   31794:	436c      	muls	r4, r5
   31796:	434d      	muls	r5, r1
   31798:	4651      	mov	r1, sl
   3179a:	444d      	add	r5, r9
   3179c:	0c0f      	lsrs	r7, r1, #16
   3179e:	197d      	adds	r5, r7, r5
   317a0:	45a9      	cmp	r9, r5
   317a2:	d903      	bls.n	317ac <__aeabi_dmul+0x2fc>
   317a4:	2180      	movs	r1, #128	; 0x80
   317a6:	0249      	lsls	r1, r1, #9
   317a8:	4688      	mov	r8, r1
   317aa:	4444      	add	r4, r8
   317ac:	9f04      	ldr	r7, [sp, #16]
   317ae:	9903      	ldr	r1, [sp, #12]
   317b0:	46b8      	mov	r8, r7
   317b2:	4441      	add	r1, r8
   317b4:	468b      	mov	fp, r1
   317b6:	4583      	cmp	fp, r0
   317b8:	4180      	sbcs	r0, r0
   317ba:	4241      	negs	r1, r0
   317bc:	4688      	mov	r8, r1
   317be:	4651      	mov	r1, sl
   317c0:	0408      	lsls	r0, r1, #16
   317c2:	042f      	lsls	r7, r5, #16
   317c4:	0c00      	lsrs	r0, r0, #16
   317c6:	183f      	adds	r7, r7, r0
   317c8:	4658      	mov	r0, fp
   317ca:	9902      	ldr	r1, [sp, #8]
   317cc:	1810      	adds	r0, r2, r0
   317ce:	4689      	mov	r9, r1
   317d0:	4290      	cmp	r0, r2
   317d2:	4192      	sbcs	r2, r2
   317d4:	444f      	add	r7, r9
   317d6:	46ba      	mov	sl, r7
   317d8:	4252      	negs	r2, r2
   317da:	4699      	mov	r9, r3
   317dc:	4693      	mov	fp, r2
   317de:	44c2      	add	sl, r8
   317e0:	44d1      	add	r9, sl
   317e2:	44cb      	add	fp, r9
   317e4:	428f      	cmp	r7, r1
   317e6:	41bf      	sbcs	r7, r7
   317e8:	45c2      	cmp	sl, r8
   317ea:	4189      	sbcs	r1, r1
   317ec:	4599      	cmp	r9, r3
   317ee:	419b      	sbcs	r3, r3
   317f0:	4593      	cmp	fp, r2
   317f2:	4192      	sbcs	r2, r2
   317f4:	427f      	negs	r7, r7
   317f6:	4249      	negs	r1, r1
   317f8:	0c2d      	lsrs	r5, r5, #16
   317fa:	4252      	negs	r2, r2
   317fc:	430f      	orrs	r7, r1
   317fe:	425b      	negs	r3, r3
   31800:	4313      	orrs	r3, r2
   31802:	197f      	adds	r7, r7, r5
   31804:	18ff      	adds	r7, r7, r3
   31806:	465b      	mov	r3, fp
   31808:	193c      	adds	r4, r7, r4
   3180a:	0ddb      	lsrs	r3, r3, #23
   3180c:	9a05      	ldr	r2, [sp, #20]
   3180e:	0264      	lsls	r4, r4, #9
   31810:	431c      	orrs	r4, r3
   31812:	0243      	lsls	r3, r0, #9
   31814:	4313      	orrs	r3, r2
   31816:	1e5d      	subs	r5, r3, #1
   31818:	41ab      	sbcs	r3, r5
   3181a:	465a      	mov	r2, fp
   3181c:	0dc0      	lsrs	r0, r0, #23
   3181e:	4303      	orrs	r3, r0
   31820:	0252      	lsls	r2, r2, #9
   31822:	4313      	orrs	r3, r2
   31824:	01e2      	lsls	r2, r4, #7
   31826:	d556      	bpl.n	318d6 <__aeabi_dmul+0x426>
   31828:	2001      	movs	r0, #1
   3182a:	085a      	lsrs	r2, r3, #1
   3182c:	4003      	ands	r3, r0
   3182e:	4313      	orrs	r3, r2
   31830:	07e2      	lsls	r2, r4, #31
   31832:	4313      	orrs	r3, r2
   31834:	0864      	lsrs	r4, r4, #1
   31836:	485a      	ldr	r0, [pc, #360]	; (319a0 <__aeabi_dmul+0x4f0>)
   31838:	4460      	add	r0, ip
   3183a:	2800      	cmp	r0, #0
   3183c:	dd4d      	ble.n	318da <__aeabi_dmul+0x42a>
   3183e:	075a      	lsls	r2, r3, #29
   31840:	d009      	beq.n	31856 <__aeabi_dmul+0x3a6>
   31842:	220f      	movs	r2, #15
   31844:	401a      	ands	r2, r3
   31846:	2a04      	cmp	r2, #4
   31848:	d005      	beq.n	31856 <__aeabi_dmul+0x3a6>
   3184a:	1d1a      	adds	r2, r3, #4
   3184c:	429a      	cmp	r2, r3
   3184e:	419b      	sbcs	r3, r3
   31850:	425b      	negs	r3, r3
   31852:	18e4      	adds	r4, r4, r3
   31854:	0013      	movs	r3, r2
   31856:	01e2      	lsls	r2, r4, #7
   31858:	d504      	bpl.n	31864 <__aeabi_dmul+0x3b4>
   3185a:	2080      	movs	r0, #128	; 0x80
   3185c:	4a51      	ldr	r2, [pc, #324]	; (319a4 <__aeabi_dmul+0x4f4>)
   3185e:	00c0      	lsls	r0, r0, #3
   31860:	4014      	ands	r4, r2
   31862:	4460      	add	r0, ip
   31864:	4a50      	ldr	r2, [pc, #320]	; (319a8 <__aeabi_dmul+0x4f8>)
   31866:	4290      	cmp	r0, r2
   31868:	dd00      	ble.n	3186c <__aeabi_dmul+0x3bc>
   3186a:	e6e3      	b.n	31634 <__aeabi_dmul+0x184>
   3186c:	2501      	movs	r5, #1
   3186e:	08db      	lsrs	r3, r3, #3
   31870:	0762      	lsls	r2, r4, #29
   31872:	431a      	orrs	r2, r3
   31874:	0264      	lsls	r4, r4, #9
   31876:	9b01      	ldr	r3, [sp, #4]
   31878:	4691      	mov	r9, r2
   3187a:	0b22      	lsrs	r2, r4, #12
   3187c:	0544      	lsls	r4, r0, #21
   3187e:	0d64      	lsrs	r4, r4, #21
   31880:	401d      	ands	r5, r3
   31882:	e67c      	b.n	3157e <__aeabi_dmul+0xce>
   31884:	2280      	movs	r2, #128	; 0x80
   31886:	4659      	mov	r1, fp
   31888:	0312      	lsls	r2, r2, #12
   3188a:	4211      	tst	r1, r2
   3188c:	d008      	beq.n	318a0 <__aeabi_dmul+0x3f0>
   3188e:	4214      	tst	r4, r2
   31890:	d106      	bne.n	318a0 <__aeabi_dmul+0x3f0>
   31892:	4322      	orrs	r2, r4
   31894:	0312      	lsls	r2, r2, #12
   31896:	0b12      	lsrs	r2, r2, #12
   31898:	4645      	mov	r5, r8
   3189a:	4699      	mov	r9, r3
   3189c:	4c43      	ldr	r4, [pc, #268]	; (319ac <__aeabi_dmul+0x4fc>)
   3189e:	e66e      	b.n	3157e <__aeabi_dmul+0xce>
   318a0:	465b      	mov	r3, fp
   318a2:	431a      	orrs	r2, r3
   318a4:	0312      	lsls	r2, r2, #12
   318a6:	0b12      	lsrs	r2, r2, #12
   318a8:	4c40      	ldr	r4, [pc, #256]	; (319ac <__aeabi_dmul+0x4fc>)
   318aa:	e668      	b.n	3157e <__aeabi_dmul+0xce>
   318ac:	0003      	movs	r3, r0
   318ae:	4654      	mov	r4, sl
   318b0:	3b28      	subs	r3, #40	; 0x28
   318b2:	409c      	lsls	r4, r3
   318b4:	2300      	movs	r3, #0
   318b6:	e6b9      	b.n	3162c <__aeabi_dmul+0x17c>
   318b8:	f000 fbfc 	bl	320b4 <__clzsi2>
   318bc:	3020      	adds	r0, #32
   318be:	e6a6      	b.n	3160e <__aeabi_dmul+0x15e>
   318c0:	0003      	movs	r3, r0
   318c2:	3b28      	subs	r3, #40	; 0x28
   318c4:	409f      	lsls	r7, r3
   318c6:	2300      	movs	r3, #0
   318c8:	46bb      	mov	fp, r7
   318ca:	4699      	mov	r9, r3
   318cc:	e68a      	b.n	315e4 <__aeabi_dmul+0x134>
   318ce:	f000 fbf1 	bl	320b4 <__clzsi2>
   318d2:	3020      	adds	r0, #32
   318d4:	e674      	b.n	315c0 <__aeabi_dmul+0x110>
   318d6:	46b4      	mov	ip, r6
   318d8:	e7ad      	b.n	31836 <__aeabi_dmul+0x386>
   318da:	2501      	movs	r5, #1
   318dc:	1a2a      	subs	r2, r5, r0
   318de:	2a38      	cmp	r2, #56	; 0x38
   318e0:	dd06      	ble.n	318f0 <__aeabi_dmul+0x440>
   318e2:	9b01      	ldr	r3, [sp, #4]
   318e4:	2400      	movs	r4, #0
   318e6:	401d      	ands	r5, r3
   318e8:	2300      	movs	r3, #0
   318ea:	2200      	movs	r2, #0
   318ec:	4699      	mov	r9, r3
   318ee:	e646      	b.n	3157e <__aeabi_dmul+0xce>
   318f0:	2a1f      	cmp	r2, #31
   318f2:	dc21      	bgt.n	31938 <__aeabi_dmul+0x488>
   318f4:	2520      	movs	r5, #32
   318f6:	0020      	movs	r0, r4
   318f8:	1aad      	subs	r5, r5, r2
   318fa:	001e      	movs	r6, r3
   318fc:	40ab      	lsls	r3, r5
   318fe:	40a8      	lsls	r0, r5
   31900:	40d6      	lsrs	r6, r2
   31902:	1e5d      	subs	r5, r3, #1
   31904:	41ab      	sbcs	r3, r5
   31906:	4330      	orrs	r0, r6
   31908:	4318      	orrs	r0, r3
   3190a:	40d4      	lsrs	r4, r2
   3190c:	0743      	lsls	r3, r0, #29
   3190e:	d009      	beq.n	31924 <__aeabi_dmul+0x474>
   31910:	230f      	movs	r3, #15
   31912:	4003      	ands	r3, r0
   31914:	2b04      	cmp	r3, #4
   31916:	d005      	beq.n	31924 <__aeabi_dmul+0x474>
   31918:	0003      	movs	r3, r0
   3191a:	1d18      	adds	r0, r3, #4
   3191c:	4298      	cmp	r0, r3
   3191e:	419b      	sbcs	r3, r3
   31920:	425b      	negs	r3, r3
   31922:	18e4      	adds	r4, r4, r3
   31924:	0223      	lsls	r3, r4, #8
   31926:	d521      	bpl.n	3196c <__aeabi_dmul+0x4bc>
   31928:	2501      	movs	r5, #1
   3192a:	9b01      	ldr	r3, [sp, #4]
   3192c:	2401      	movs	r4, #1
   3192e:	401d      	ands	r5, r3
   31930:	2300      	movs	r3, #0
   31932:	2200      	movs	r2, #0
   31934:	4699      	mov	r9, r3
   31936:	e622      	b.n	3157e <__aeabi_dmul+0xce>
   31938:	251f      	movs	r5, #31
   3193a:	0021      	movs	r1, r4
   3193c:	426d      	negs	r5, r5
   3193e:	1a28      	subs	r0, r5, r0
   31940:	40c1      	lsrs	r1, r0
   31942:	0008      	movs	r0, r1
   31944:	2a20      	cmp	r2, #32
   31946:	d01d      	beq.n	31984 <__aeabi_dmul+0x4d4>
   31948:	355f      	adds	r5, #95	; 0x5f
   3194a:	1aaa      	subs	r2, r5, r2
   3194c:	4094      	lsls	r4, r2
   3194e:	4323      	orrs	r3, r4
   31950:	1e5c      	subs	r4, r3, #1
   31952:	41a3      	sbcs	r3, r4
   31954:	2507      	movs	r5, #7
   31956:	4303      	orrs	r3, r0
   31958:	401d      	ands	r5, r3
   3195a:	2200      	movs	r2, #0
   3195c:	2d00      	cmp	r5, #0
   3195e:	d009      	beq.n	31974 <__aeabi_dmul+0x4c4>
   31960:	220f      	movs	r2, #15
   31962:	2400      	movs	r4, #0
   31964:	401a      	ands	r2, r3
   31966:	0018      	movs	r0, r3
   31968:	2a04      	cmp	r2, #4
   3196a:	d1d6      	bne.n	3191a <__aeabi_dmul+0x46a>
   3196c:	0003      	movs	r3, r0
   3196e:	0765      	lsls	r5, r4, #29
   31970:	0264      	lsls	r4, r4, #9
   31972:	0b22      	lsrs	r2, r4, #12
   31974:	08db      	lsrs	r3, r3, #3
   31976:	432b      	orrs	r3, r5
   31978:	2501      	movs	r5, #1
   3197a:	4699      	mov	r9, r3
   3197c:	9b01      	ldr	r3, [sp, #4]
   3197e:	2400      	movs	r4, #0
   31980:	401d      	ands	r5, r3
   31982:	e5fc      	b.n	3157e <__aeabi_dmul+0xce>
   31984:	2400      	movs	r4, #0
   31986:	e7e2      	b.n	3194e <__aeabi_dmul+0x49e>
   31988:	2280      	movs	r2, #128	; 0x80
   3198a:	2501      	movs	r5, #1
   3198c:	0312      	lsls	r2, r2, #12
   3198e:	4322      	orrs	r2, r4
   31990:	9901      	ldr	r1, [sp, #4]
   31992:	0312      	lsls	r2, r2, #12
   31994:	0b12      	lsrs	r2, r2, #12
   31996:	400d      	ands	r5, r1
   31998:	4699      	mov	r9, r3
   3199a:	4c04      	ldr	r4, [pc, #16]	; (319ac <__aeabi_dmul+0x4fc>)
   3199c:	e5ef      	b.n	3157e <__aeabi_dmul+0xce>
   3199e:	46c0      	nop			; (mov r8, r8)
   319a0:	000003ff 	.word	0x000003ff
   319a4:	feffffff 	.word	0xfeffffff
   319a8:	000007fe 	.word	0x000007fe
   319ac:	000007ff 	.word	0x000007ff

000319b0 <__aeabi_dsub>:
   319b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   319b2:	4646      	mov	r6, r8
   319b4:	46d6      	mov	lr, sl
   319b6:	464f      	mov	r7, r9
   319b8:	030c      	lsls	r4, r1, #12
   319ba:	b5c0      	push	{r6, r7, lr}
   319bc:	0fcd      	lsrs	r5, r1, #31
   319be:	004e      	lsls	r6, r1, #1
   319c0:	0a61      	lsrs	r1, r4, #9
   319c2:	0f44      	lsrs	r4, r0, #29
   319c4:	430c      	orrs	r4, r1
   319c6:	00c1      	lsls	r1, r0, #3
   319c8:	0058      	lsls	r0, r3, #1
   319ca:	0d40      	lsrs	r0, r0, #21
   319cc:	4684      	mov	ip, r0
   319ce:	468a      	mov	sl, r1
   319d0:	000f      	movs	r7, r1
   319d2:	0319      	lsls	r1, r3, #12
   319d4:	0f50      	lsrs	r0, r2, #29
   319d6:	0a49      	lsrs	r1, r1, #9
   319d8:	4301      	orrs	r1, r0
   319da:	48c6      	ldr	r0, [pc, #792]	; (31cf4 <__aeabi_dsub+0x344>)
   319dc:	0d76      	lsrs	r6, r6, #21
   319de:	46a8      	mov	r8, r5
   319e0:	0fdb      	lsrs	r3, r3, #31
   319e2:	00d2      	lsls	r2, r2, #3
   319e4:	4584      	cmp	ip, r0
   319e6:	d100      	bne.n	319ea <__aeabi_dsub+0x3a>
   319e8:	e0d8      	b.n	31b9c <__aeabi_dsub+0x1ec>
   319ea:	2001      	movs	r0, #1
   319ec:	4043      	eors	r3, r0
   319ee:	42ab      	cmp	r3, r5
   319f0:	d100      	bne.n	319f4 <__aeabi_dsub+0x44>
   319f2:	e0a6      	b.n	31b42 <__aeabi_dsub+0x192>
   319f4:	4660      	mov	r0, ip
   319f6:	1a35      	subs	r5, r6, r0
   319f8:	2d00      	cmp	r5, #0
   319fa:	dc00      	bgt.n	319fe <__aeabi_dsub+0x4e>
   319fc:	e105      	b.n	31c0a <__aeabi_dsub+0x25a>
   319fe:	2800      	cmp	r0, #0
   31a00:	d110      	bne.n	31a24 <__aeabi_dsub+0x74>
   31a02:	000b      	movs	r3, r1
   31a04:	4313      	orrs	r3, r2
   31a06:	d100      	bne.n	31a0a <__aeabi_dsub+0x5a>
   31a08:	e0d7      	b.n	31bba <__aeabi_dsub+0x20a>
   31a0a:	1e6b      	subs	r3, r5, #1
   31a0c:	2b00      	cmp	r3, #0
   31a0e:	d000      	beq.n	31a12 <__aeabi_dsub+0x62>
   31a10:	e14b      	b.n	31caa <__aeabi_dsub+0x2fa>
   31a12:	4653      	mov	r3, sl
   31a14:	1a9f      	subs	r7, r3, r2
   31a16:	45ba      	cmp	sl, r7
   31a18:	4180      	sbcs	r0, r0
   31a1a:	1a64      	subs	r4, r4, r1
   31a1c:	4240      	negs	r0, r0
   31a1e:	1a24      	subs	r4, r4, r0
   31a20:	2601      	movs	r6, #1
   31a22:	e01e      	b.n	31a62 <__aeabi_dsub+0xb2>
   31a24:	4bb3      	ldr	r3, [pc, #716]	; (31cf4 <__aeabi_dsub+0x344>)
   31a26:	429e      	cmp	r6, r3
   31a28:	d048      	beq.n	31abc <__aeabi_dsub+0x10c>
   31a2a:	2380      	movs	r3, #128	; 0x80
   31a2c:	041b      	lsls	r3, r3, #16
   31a2e:	4319      	orrs	r1, r3
   31a30:	2d38      	cmp	r5, #56	; 0x38
   31a32:	dd00      	ble.n	31a36 <__aeabi_dsub+0x86>
   31a34:	e119      	b.n	31c6a <__aeabi_dsub+0x2ba>
   31a36:	2d1f      	cmp	r5, #31
   31a38:	dd00      	ble.n	31a3c <__aeabi_dsub+0x8c>
   31a3a:	e14c      	b.n	31cd6 <__aeabi_dsub+0x326>
   31a3c:	2320      	movs	r3, #32
   31a3e:	000f      	movs	r7, r1
   31a40:	1b5b      	subs	r3, r3, r5
   31a42:	0010      	movs	r0, r2
   31a44:	409a      	lsls	r2, r3
   31a46:	409f      	lsls	r7, r3
   31a48:	40e8      	lsrs	r0, r5
   31a4a:	1e53      	subs	r3, r2, #1
   31a4c:	419a      	sbcs	r2, r3
   31a4e:	40e9      	lsrs	r1, r5
   31a50:	4307      	orrs	r7, r0
   31a52:	4317      	orrs	r7, r2
   31a54:	4653      	mov	r3, sl
   31a56:	1bdf      	subs	r7, r3, r7
   31a58:	1a61      	subs	r1, r4, r1
   31a5a:	45ba      	cmp	sl, r7
   31a5c:	41a4      	sbcs	r4, r4
   31a5e:	4264      	negs	r4, r4
   31a60:	1b0c      	subs	r4, r1, r4
   31a62:	0223      	lsls	r3, r4, #8
   31a64:	d400      	bmi.n	31a68 <__aeabi_dsub+0xb8>
   31a66:	e0c5      	b.n	31bf4 <__aeabi_dsub+0x244>
   31a68:	0264      	lsls	r4, r4, #9
   31a6a:	0a65      	lsrs	r5, r4, #9
   31a6c:	2d00      	cmp	r5, #0
   31a6e:	d100      	bne.n	31a72 <__aeabi_dsub+0xc2>
   31a70:	e0f6      	b.n	31c60 <__aeabi_dsub+0x2b0>
   31a72:	0028      	movs	r0, r5
   31a74:	f000 fb1e 	bl	320b4 <__clzsi2>
   31a78:	0003      	movs	r3, r0
   31a7a:	3b08      	subs	r3, #8
   31a7c:	2b1f      	cmp	r3, #31
   31a7e:	dd00      	ble.n	31a82 <__aeabi_dsub+0xd2>
   31a80:	e0e9      	b.n	31c56 <__aeabi_dsub+0x2a6>
   31a82:	2220      	movs	r2, #32
   31a84:	003c      	movs	r4, r7
   31a86:	1ad2      	subs	r2, r2, r3
   31a88:	409d      	lsls	r5, r3
   31a8a:	40d4      	lsrs	r4, r2
   31a8c:	409f      	lsls	r7, r3
   31a8e:	4325      	orrs	r5, r4
   31a90:	429e      	cmp	r6, r3
   31a92:	dd00      	ble.n	31a96 <__aeabi_dsub+0xe6>
   31a94:	e0db      	b.n	31c4e <__aeabi_dsub+0x29e>
   31a96:	1b9e      	subs	r6, r3, r6
   31a98:	1c73      	adds	r3, r6, #1
   31a9a:	2b1f      	cmp	r3, #31
   31a9c:	dd00      	ble.n	31aa0 <__aeabi_dsub+0xf0>
   31a9e:	e10a      	b.n	31cb6 <__aeabi_dsub+0x306>
   31aa0:	2220      	movs	r2, #32
   31aa2:	0038      	movs	r0, r7
   31aa4:	1ad2      	subs	r2, r2, r3
   31aa6:	0029      	movs	r1, r5
   31aa8:	4097      	lsls	r7, r2
   31aaa:	002c      	movs	r4, r5
   31aac:	4091      	lsls	r1, r2
   31aae:	40d8      	lsrs	r0, r3
   31ab0:	1e7a      	subs	r2, r7, #1
   31ab2:	4197      	sbcs	r7, r2
   31ab4:	40dc      	lsrs	r4, r3
   31ab6:	2600      	movs	r6, #0
   31ab8:	4301      	orrs	r1, r0
   31aba:	430f      	orrs	r7, r1
   31abc:	077b      	lsls	r3, r7, #29
   31abe:	d009      	beq.n	31ad4 <__aeabi_dsub+0x124>
   31ac0:	230f      	movs	r3, #15
   31ac2:	403b      	ands	r3, r7
   31ac4:	2b04      	cmp	r3, #4
   31ac6:	d005      	beq.n	31ad4 <__aeabi_dsub+0x124>
   31ac8:	1d3b      	adds	r3, r7, #4
   31aca:	42bb      	cmp	r3, r7
   31acc:	41bf      	sbcs	r7, r7
   31ace:	427f      	negs	r7, r7
   31ad0:	19e4      	adds	r4, r4, r7
   31ad2:	001f      	movs	r7, r3
   31ad4:	0223      	lsls	r3, r4, #8
   31ad6:	d525      	bpl.n	31b24 <__aeabi_dsub+0x174>
   31ad8:	4b86      	ldr	r3, [pc, #536]	; (31cf4 <__aeabi_dsub+0x344>)
   31ada:	3601      	adds	r6, #1
   31adc:	429e      	cmp	r6, r3
   31ade:	d100      	bne.n	31ae2 <__aeabi_dsub+0x132>
   31ae0:	e0af      	b.n	31c42 <__aeabi_dsub+0x292>
   31ae2:	4b85      	ldr	r3, [pc, #532]	; (31cf8 <__aeabi_dsub+0x348>)
   31ae4:	2501      	movs	r5, #1
   31ae6:	401c      	ands	r4, r3
   31ae8:	4643      	mov	r3, r8
   31aea:	0762      	lsls	r2, r4, #29
   31aec:	08ff      	lsrs	r7, r7, #3
   31aee:	0264      	lsls	r4, r4, #9
   31af0:	0576      	lsls	r6, r6, #21
   31af2:	4317      	orrs	r7, r2
   31af4:	0b24      	lsrs	r4, r4, #12
   31af6:	0d76      	lsrs	r6, r6, #21
   31af8:	401d      	ands	r5, r3
   31afa:	2100      	movs	r1, #0
   31afc:	0324      	lsls	r4, r4, #12
   31afe:	0b23      	lsrs	r3, r4, #12
   31b00:	0d0c      	lsrs	r4, r1, #20
   31b02:	4a7e      	ldr	r2, [pc, #504]	; (31cfc <__aeabi_dsub+0x34c>)
   31b04:	0524      	lsls	r4, r4, #20
   31b06:	431c      	orrs	r4, r3
   31b08:	4014      	ands	r4, r2
   31b0a:	0533      	lsls	r3, r6, #20
   31b0c:	4323      	orrs	r3, r4
   31b0e:	005b      	lsls	r3, r3, #1
   31b10:	07ed      	lsls	r5, r5, #31
   31b12:	085b      	lsrs	r3, r3, #1
   31b14:	432b      	orrs	r3, r5
   31b16:	0038      	movs	r0, r7
   31b18:	0019      	movs	r1, r3
   31b1a:	bc1c      	pop	{r2, r3, r4}
   31b1c:	4690      	mov	r8, r2
   31b1e:	4699      	mov	r9, r3
   31b20:	46a2      	mov	sl, r4
   31b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31b24:	2501      	movs	r5, #1
   31b26:	4643      	mov	r3, r8
   31b28:	0762      	lsls	r2, r4, #29
   31b2a:	08ff      	lsrs	r7, r7, #3
   31b2c:	4317      	orrs	r7, r2
   31b2e:	08e4      	lsrs	r4, r4, #3
   31b30:	401d      	ands	r5, r3
   31b32:	4b70      	ldr	r3, [pc, #448]	; (31cf4 <__aeabi_dsub+0x344>)
   31b34:	429e      	cmp	r6, r3
   31b36:	d036      	beq.n	31ba6 <__aeabi_dsub+0x1f6>
   31b38:	0324      	lsls	r4, r4, #12
   31b3a:	0576      	lsls	r6, r6, #21
   31b3c:	0b24      	lsrs	r4, r4, #12
   31b3e:	0d76      	lsrs	r6, r6, #21
   31b40:	e7db      	b.n	31afa <__aeabi_dsub+0x14a>
   31b42:	4663      	mov	r3, ip
   31b44:	1af3      	subs	r3, r6, r3
   31b46:	2b00      	cmp	r3, #0
   31b48:	dc00      	bgt.n	31b4c <__aeabi_dsub+0x19c>
   31b4a:	e094      	b.n	31c76 <__aeabi_dsub+0x2c6>
   31b4c:	4660      	mov	r0, ip
   31b4e:	2800      	cmp	r0, #0
   31b50:	d035      	beq.n	31bbe <__aeabi_dsub+0x20e>
   31b52:	4868      	ldr	r0, [pc, #416]	; (31cf4 <__aeabi_dsub+0x344>)
   31b54:	4286      	cmp	r6, r0
   31b56:	d0b1      	beq.n	31abc <__aeabi_dsub+0x10c>
   31b58:	2780      	movs	r7, #128	; 0x80
   31b5a:	043f      	lsls	r7, r7, #16
   31b5c:	4339      	orrs	r1, r7
   31b5e:	2b38      	cmp	r3, #56	; 0x38
   31b60:	dc00      	bgt.n	31b64 <__aeabi_dsub+0x1b4>
   31b62:	e0fd      	b.n	31d60 <__aeabi_dsub+0x3b0>
   31b64:	430a      	orrs	r2, r1
   31b66:	0017      	movs	r7, r2
   31b68:	2100      	movs	r1, #0
   31b6a:	1e7a      	subs	r2, r7, #1
   31b6c:	4197      	sbcs	r7, r2
   31b6e:	4457      	add	r7, sl
   31b70:	4557      	cmp	r7, sl
   31b72:	4180      	sbcs	r0, r0
   31b74:	1909      	adds	r1, r1, r4
   31b76:	4244      	negs	r4, r0
   31b78:	190c      	adds	r4, r1, r4
   31b7a:	0223      	lsls	r3, r4, #8
   31b7c:	d53a      	bpl.n	31bf4 <__aeabi_dsub+0x244>
   31b7e:	4b5d      	ldr	r3, [pc, #372]	; (31cf4 <__aeabi_dsub+0x344>)
   31b80:	3601      	adds	r6, #1
   31b82:	429e      	cmp	r6, r3
   31b84:	d100      	bne.n	31b88 <__aeabi_dsub+0x1d8>
   31b86:	e14b      	b.n	31e20 <__aeabi_dsub+0x470>
   31b88:	2201      	movs	r2, #1
   31b8a:	4b5b      	ldr	r3, [pc, #364]	; (31cf8 <__aeabi_dsub+0x348>)
   31b8c:	401c      	ands	r4, r3
   31b8e:	087b      	lsrs	r3, r7, #1
   31b90:	4017      	ands	r7, r2
   31b92:	431f      	orrs	r7, r3
   31b94:	07e2      	lsls	r2, r4, #31
   31b96:	4317      	orrs	r7, r2
   31b98:	0864      	lsrs	r4, r4, #1
   31b9a:	e78f      	b.n	31abc <__aeabi_dsub+0x10c>
   31b9c:	0008      	movs	r0, r1
   31b9e:	4310      	orrs	r0, r2
   31ba0:	d000      	beq.n	31ba4 <__aeabi_dsub+0x1f4>
   31ba2:	e724      	b.n	319ee <__aeabi_dsub+0x3e>
   31ba4:	e721      	b.n	319ea <__aeabi_dsub+0x3a>
   31ba6:	0023      	movs	r3, r4
   31ba8:	433b      	orrs	r3, r7
   31baa:	d100      	bne.n	31bae <__aeabi_dsub+0x1fe>
   31bac:	e1b9      	b.n	31f22 <__aeabi_dsub+0x572>
   31bae:	2280      	movs	r2, #128	; 0x80
   31bb0:	0312      	lsls	r2, r2, #12
   31bb2:	4314      	orrs	r4, r2
   31bb4:	0324      	lsls	r4, r4, #12
   31bb6:	0b24      	lsrs	r4, r4, #12
   31bb8:	e79f      	b.n	31afa <__aeabi_dsub+0x14a>
   31bba:	002e      	movs	r6, r5
   31bbc:	e77e      	b.n	31abc <__aeabi_dsub+0x10c>
   31bbe:	0008      	movs	r0, r1
   31bc0:	4310      	orrs	r0, r2
   31bc2:	d100      	bne.n	31bc6 <__aeabi_dsub+0x216>
   31bc4:	e0ca      	b.n	31d5c <__aeabi_dsub+0x3ac>
   31bc6:	1e58      	subs	r0, r3, #1
   31bc8:	4684      	mov	ip, r0
   31bca:	2800      	cmp	r0, #0
   31bcc:	d000      	beq.n	31bd0 <__aeabi_dsub+0x220>
   31bce:	e0e7      	b.n	31da0 <__aeabi_dsub+0x3f0>
   31bd0:	4452      	add	r2, sl
   31bd2:	4552      	cmp	r2, sl
   31bd4:	4180      	sbcs	r0, r0
   31bd6:	1864      	adds	r4, r4, r1
   31bd8:	4240      	negs	r0, r0
   31bda:	1824      	adds	r4, r4, r0
   31bdc:	0017      	movs	r7, r2
   31bde:	2601      	movs	r6, #1
   31be0:	0223      	lsls	r3, r4, #8
   31be2:	d507      	bpl.n	31bf4 <__aeabi_dsub+0x244>
   31be4:	2602      	movs	r6, #2
   31be6:	e7cf      	b.n	31b88 <__aeabi_dsub+0x1d8>
   31be8:	4664      	mov	r4, ip
   31bea:	432c      	orrs	r4, r5
   31bec:	d100      	bne.n	31bf0 <__aeabi_dsub+0x240>
   31bee:	e1b3      	b.n	31f58 <__aeabi_dsub+0x5a8>
   31bf0:	002c      	movs	r4, r5
   31bf2:	4667      	mov	r7, ip
   31bf4:	077b      	lsls	r3, r7, #29
   31bf6:	d000      	beq.n	31bfa <__aeabi_dsub+0x24a>
   31bf8:	e762      	b.n	31ac0 <__aeabi_dsub+0x110>
   31bfa:	0763      	lsls	r3, r4, #29
   31bfc:	08ff      	lsrs	r7, r7, #3
   31bfe:	431f      	orrs	r7, r3
   31c00:	2501      	movs	r5, #1
   31c02:	4643      	mov	r3, r8
   31c04:	08e4      	lsrs	r4, r4, #3
   31c06:	401d      	ands	r5, r3
   31c08:	e793      	b.n	31b32 <__aeabi_dsub+0x182>
   31c0a:	2d00      	cmp	r5, #0
   31c0c:	d178      	bne.n	31d00 <__aeabi_dsub+0x350>
   31c0e:	1c75      	adds	r5, r6, #1
   31c10:	056d      	lsls	r5, r5, #21
   31c12:	0d6d      	lsrs	r5, r5, #21
   31c14:	2d01      	cmp	r5, #1
   31c16:	dc00      	bgt.n	31c1a <__aeabi_dsub+0x26a>
   31c18:	e0f2      	b.n	31e00 <__aeabi_dsub+0x450>
   31c1a:	4650      	mov	r0, sl
   31c1c:	1a80      	subs	r0, r0, r2
   31c1e:	4582      	cmp	sl, r0
   31c20:	41bf      	sbcs	r7, r7
   31c22:	1a65      	subs	r5, r4, r1
   31c24:	427f      	negs	r7, r7
   31c26:	1bed      	subs	r5, r5, r7
   31c28:	4684      	mov	ip, r0
   31c2a:	0228      	lsls	r0, r5, #8
   31c2c:	d400      	bmi.n	31c30 <__aeabi_dsub+0x280>
   31c2e:	e08c      	b.n	31d4a <__aeabi_dsub+0x39a>
   31c30:	4650      	mov	r0, sl
   31c32:	1a17      	subs	r7, r2, r0
   31c34:	42ba      	cmp	r2, r7
   31c36:	4192      	sbcs	r2, r2
   31c38:	1b0c      	subs	r4, r1, r4
   31c3a:	4255      	negs	r5, r2
   31c3c:	1b65      	subs	r5, r4, r5
   31c3e:	4698      	mov	r8, r3
   31c40:	e714      	b.n	31a6c <__aeabi_dsub+0xbc>
   31c42:	2501      	movs	r5, #1
   31c44:	4643      	mov	r3, r8
   31c46:	2400      	movs	r4, #0
   31c48:	401d      	ands	r5, r3
   31c4a:	2700      	movs	r7, #0
   31c4c:	e755      	b.n	31afa <__aeabi_dsub+0x14a>
   31c4e:	4c2a      	ldr	r4, [pc, #168]	; (31cf8 <__aeabi_dsub+0x348>)
   31c50:	1af6      	subs	r6, r6, r3
   31c52:	402c      	ands	r4, r5
   31c54:	e732      	b.n	31abc <__aeabi_dsub+0x10c>
   31c56:	003d      	movs	r5, r7
   31c58:	3828      	subs	r0, #40	; 0x28
   31c5a:	4085      	lsls	r5, r0
   31c5c:	2700      	movs	r7, #0
   31c5e:	e717      	b.n	31a90 <__aeabi_dsub+0xe0>
   31c60:	0038      	movs	r0, r7
   31c62:	f000 fa27 	bl	320b4 <__clzsi2>
   31c66:	3020      	adds	r0, #32
   31c68:	e706      	b.n	31a78 <__aeabi_dsub+0xc8>
   31c6a:	430a      	orrs	r2, r1
   31c6c:	0017      	movs	r7, r2
   31c6e:	2100      	movs	r1, #0
   31c70:	1e7a      	subs	r2, r7, #1
   31c72:	4197      	sbcs	r7, r2
   31c74:	e6ee      	b.n	31a54 <__aeabi_dsub+0xa4>
   31c76:	2b00      	cmp	r3, #0
   31c78:	d000      	beq.n	31c7c <__aeabi_dsub+0x2cc>
   31c7a:	e0e5      	b.n	31e48 <__aeabi_dsub+0x498>
   31c7c:	1c73      	adds	r3, r6, #1
   31c7e:	469c      	mov	ip, r3
   31c80:	055b      	lsls	r3, r3, #21
   31c82:	0d5b      	lsrs	r3, r3, #21
   31c84:	2b01      	cmp	r3, #1
   31c86:	dc00      	bgt.n	31c8a <__aeabi_dsub+0x2da>
   31c88:	e09f      	b.n	31dca <__aeabi_dsub+0x41a>
   31c8a:	4b1a      	ldr	r3, [pc, #104]	; (31cf4 <__aeabi_dsub+0x344>)
   31c8c:	459c      	cmp	ip, r3
   31c8e:	d100      	bne.n	31c92 <__aeabi_dsub+0x2e2>
   31c90:	e0c5      	b.n	31e1e <__aeabi_dsub+0x46e>
   31c92:	4452      	add	r2, sl
   31c94:	4552      	cmp	r2, sl
   31c96:	4180      	sbcs	r0, r0
   31c98:	1864      	adds	r4, r4, r1
   31c9a:	4240      	negs	r0, r0
   31c9c:	1824      	adds	r4, r4, r0
   31c9e:	07e7      	lsls	r7, r4, #31
   31ca0:	0852      	lsrs	r2, r2, #1
   31ca2:	4317      	orrs	r7, r2
   31ca4:	0864      	lsrs	r4, r4, #1
   31ca6:	4666      	mov	r6, ip
   31ca8:	e708      	b.n	31abc <__aeabi_dsub+0x10c>
   31caa:	4812      	ldr	r0, [pc, #72]	; (31cf4 <__aeabi_dsub+0x344>)
   31cac:	4285      	cmp	r5, r0
   31cae:	d100      	bne.n	31cb2 <__aeabi_dsub+0x302>
   31cb0:	e085      	b.n	31dbe <__aeabi_dsub+0x40e>
   31cb2:	001d      	movs	r5, r3
   31cb4:	e6bc      	b.n	31a30 <__aeabi_dsub+0x80>
   31cb6:	0029      	movs	r1, r5
   31cb8:	3e1f      	subs	r6, #31
   31cba:	40f1      	lsrs	r1, r6
   31cbc:	2b20      	cmp	r3, #32
   31cbe:	d100      	bne.n	31cc2 <__aeabi_dsub+0x312>
   31cc0:	e07f      	b.n	31dc2 <__aeabi_dsub+0x412>
   31cc2:	2240      	movs	r2, #64	; 0x40
   31cc4:	1ad3      	subs	r3, r2, r3
   31cc6:	409d      	lsls	r5, r3
   31cc8:	432f      	orrs	r7, r5
   31cca:	1e7d      	subs	r5, r7, #1
   31ccc:	41af      	sbcs	r7, r5
   31cce:	2400      	movs	r4, #0
   31cd0:	430f      	orrs	r7, r1
   31cd2:	2600      	movs	r6, #0
   31cd4:	e78e      	b.n	31bf4 <__aeabi_dsub+0x244>
   31cd6:	002b      	movs	r3, r5
   31cd8:	000f      	movs	r7, r1
   31cda:	3b20      	subs	r3, #32
   31cdc:	40df      	lsrs	r7, r3
   31cde:	2d20      	cmp	r5, #32
   31ce0:	d071      	beq.n	31dc6 <__aeabi_dsub+0x416>
   31ce2:	2340      	movs	r3, #64	; 0x40
   31ce4:	1b5d      	subs	r5, r3, r5
   31ce6:	40a9      	lsls	r1, r5
   31ce8:	430a      	orrs	r2, r1
   31cea:	1e51      	subs	r1, r2, #1
   31cec:	418a      	sbcs	r2, r1
   31cee:	2100      	movs	r1, #0
   31cf0:	4317      	orrs	r7, r2
   31cf2:	e6af      	b.n	31a54 <__aeabi_dsub+0xa4>
   31cf4:	000007ff 	.word	0x000007ff
   31cf8:	ff7fffff 	.word	0xff7fffff
   31cfc:	800fffff 	.word	0x800fffff
   31d00:	2e00      	cmp	r6, #0
   31d02:	d03e      	beq.n	31d82 <__aeabi_dsub+0x3d2>
   31d04:	4eb3      	ldr	r6, [pc, #716]	; (31fd4 <__aeabi_dsub+0x624>)
   31d06:	45b4      	cmp	ip, r6
   31d08:	d045      	beq.n	31d96 <__aeabi_dsub+0x3e6>
   31d0a:	2680      	movs	r6, #128	; 0x80
   31d0c:	0436      	lsls	r6, r6, #16
   31d0e:	426d      	negs	r5, r5
   31d10:	4334      	orrs	r4, r6
   31d12:	2d38      	cmp	r5, #56	; 0x38
   31d14:	dd00      	ble.n	31d18 <__aeabi_dsub+0x368>
   31d16:	e0a8      	b.n	31e6a <__aeabi_dsub+0x4ba>
   31d18:	2d1f      	cmp	r5, #31
   31d1a:	dd00      	ble.n	31d1e <__aeabi_dsub+0x36e>
   31d1c:	e11f      	b.n	31f5e <__aeabi_dsub+0x5ae>
   31d1e:	2620      	movs	r6, #32
   31d20:	0027      	movs	r7, r4
   31d22:	4650      	mov	r0, sl
   31d24:	1b76      	subs	r6, r6, r5
   31d26:	40b7      	lsls	r7, r6
   31d28:	40e8      	lsrs	r0, r5
   31d2a:	4307      	orrs	r7, r0
   31d2c:	4650      	mov	r0, sl
   31d2e:	40b0      	lsls	r0, r6
   31d30:	1e46      	subs	r6, r0, #1
   31d32:	41b0      	sbcs	r0, r6
   31d34:	40ec      	lsrs	r4, r5
   31d36:	4338      	orrs	r0, r7
   31d38:	1a17      	subs	r7, r2, r0
   31d3a:	42ba      	cmp	r2, r7
   31d3c:	4192      	sbcs	r2, r2
   31d3e:	1b0c      	subs	r4, r1, r4
   31d40:	4252      	negs	r2, r2
   31d42:	1aa4      	subs	r4, r4, r2
   31d44:	4666      	mov	r6, ip
   31d46:	4698      	mov	r8, r3
   31d48:	e68b      	b.n	31a62 <__aeabi_dsub+0xb2>
   31d4a:	4664      	mov	r4, ip
   31d4c:	4667      	mov	r7, ip
   31d4e:	432c      	orrs	r4, r5
   31d50:	d000      	beq.n	31d54 <__aeabi_dsub+0x3a4>
   31d52:	e68b      	b.n	31a6c <__aeabi_dsub+0xbc>
   31d54:	2500      	movs	r5, #0
   31d56:	2600      	movs	r6, #0
   31d58:	2700      	movs	r7, #0
   31d5a:	e6ea      	b.n	31b32 <__aeabi_dsub+0x182>
   31d5c:	001e      	movs	r6, r3
   31d5e:	e6ad      	b.n	31abc <__aeabi_dsub+0x10c>
   31d60:	2b1f      	cmp	r3, #31
   31d62:	dc60      	bgt.n	31e26 <__aeabi_dsub+0x476>
   31d64:	2720      	movs	r7, #32
   31d66:	1af8      	subs	r0, r7, r3
   31d68:	000f      	movs	r7, r1
   31d6a:	4684      	mov	ip, r0
   31d6c:	4087      	lsls	r7, r0
   31d6e:	0010      	movs	r0, r2
   31d70:	40d8      	lsrs	r0, r3
   31d72:	4307      	orrs	r7, r0
   31d74:	4660      	mov	r0, ip
   31d76:	4082      	lsls	r2, r0
   31d78:	1e50      	subs	r0, r2, #1
   31d7a:	4182      	sbcs	r2, r0
   31d7c:	40d9      	lsrs	r1, r3
   31d7e:	4317      	orrs	r7, r2
   31d80:	e6f5      	b.n	31b6e <__aeabi_dsub+0x1be>
   31d82:	0026      	movs	r6, r4
   31d84:	4650      	mov	r0, sl
   31d86:	4306      	orrs	r6, r0
   31d88:	d005      	beq.n	31d96 <__aeabi_dsub+0x3e6>
   31d8a:	43ed      	mvns	r5, r5
   31d8c:	2d00      	cmp	r5, #0
   31d8e:	d0d3      	beq.n	31d38 <__aeabi_dsub+0x388>
   31d90:	4e90      	ldr	r6, [pc, #576]	; (31fd4 <__aeabi_dsub+0x624>)
   31d92:	45b4      	cmp	ip, r6
   31d94:	d1bd      	bne.n	31d12 <__aeabi_dsub+0x362>
   31d96:	000c      	movs	r4, r1
   31d98:	0017      	movs	r7, r2
   31d9a:	4666      	mov	r6, ip
   31d9c:	4698      	mov	r8, r3
   31d9e:	e68d      	b.n	31abc <__aeabi_dsub+0x10c>
   31da0:	488c      	ldr	r0, [pc, #560]	; (31fd4 <__aeabi_dsub+0x624>)
   31da2:	4283      	cmp	r3, r0
   31da4:	d00b      	beq.n	31dbe <__aeabi_dsub+0x40e>
   31da6:	4663      	mov	r3, ip
   31da8:	e6d9      	b.n	31b5e <__aeabi_dsub+0x1ae>
   31daa:	2d00      	cmp	r5, #0
   31dac:	d000      	beq.n	31db0 <__aeabi_dsub+0x400>
   31dae:	e096      	b.n	31ede <__aeabi_dsub+0x52e>
   31db0:	0008      	movs	r0, r1
   31db2:	4310      	orrs	r0, r2
   31db4:	d100      	bne.n	31db8 <__aeabi_dsub+0x408>
   31db6:	e0e2      	b.n	31f7e <__aeabi_dsub+0x5ce>
   31db8:	000c      	movs	r4, r1
   31dba:	0017      	movs	r7, r2
   31dbc:	4698      	mov	r8, r3
   31dbe:	4e85      	ldr	r6, [pc, #532]	; (31fd4 <__aeabi_dsub+0x624>)
   31dc0:	e67c      	b.n	31abc <__aeabi_dsub+0x10c>
   31dc2:	2500      	movs	r5, #0
   31dc4:	e780      	b.n	31cc8 <__aeabi_dsub+0x318>
   31dc6:	2100      	movs	r1, #0
   31dc8:	e78e      	b.n	31ce8 <__aeabi_dsub+0x338>
   31dca:	0023      	movs	r3, r4
   31dcc:	4650      	mov	r0, sl
   31dce:	4303      	orrs	r3, r0
   31dd0:	2e00      	cmp	r6, #0
   31dd2:	d000      	beq.n	31dd6 <__aeabi_dsub+0x426>
   31dd4:	e0a8      	b.n	31f28 <__aeabi_dsub+0x578>
   31dd6:	2b00      	cmp	r3, #0
   31dd8:	d100      	bne.n	31ddc <__aeabi_dsub+0x42c>
   31dda:	e0de      	b.n	31f9a <__aeabi_dsub+0x5ea>
   31ddc:	000b      	movs	r3, r1
   31dde:	4313      	orrs	r3, r2
   31de0:	d100      	bne.n	31de4 <__aeabi_dsub+0x434>
   31de2:	e66b      	b.n	31abc <__aeabi_dsub+0x10c>
   31de4:	4452      	add	r2, sl
   31de6:	4552      	cmp	r2, sl
   31de8:	4180      	sbcs	r0, r0
   31dea:	1864      	adds	r4, r4, r1
   31dec:	4240      	negs	r0, r0
   31dee:	1824      	adds	r4, r4, r0
   31df0:	0017      	movs	r7, r2
   31df2:	0223      	lsls	r3, r4, #8
   31df4:	d400      	bmi.n	31df8 <__aeabi_dsub+0x448>
   31df6:	e6fd      	b.n	31bf4 <__aeabi_dsub+0x244>
   31df8:	4b77      	ldr	r3, [pc, #476]	; (31fd8 <__aeabi_dsub+0x628>)
   31dfa:	4666      	mov	r6, ip
   31dfc:	401c      	ands	r4, r3
   31dfe:	e65d      	b.n	31abc <__aeabi_dsub+0x10c>
   31e00:	0025      	movs	r5, r4
   31e02:	4650      	mov	r0, sl
   31e04:	4305      	orrs	r5, r0
   31e06:	2e00      	cmp	r6, #0
   31e08:	d1cf      	bne.n	31daa <__aeabi_dsub+0x3fa>
   31e0a:	2d00      	cmp	r5, #0
   31e0c:	d14f      	bne.n	31eae <__aeabi_dsub+0x4fe>
   31e0e:	000c      	movs	r4, r1
   31e10:	4314      	orrs	r4, r2
   31e12:	d100      	bne.n	31e16 <__aeabi_dsub+0x466>
   31e14:	e0a0      	b.n	31f58 <__aeabi_dsub+0x5a8>
   31e16:	000c      	movs	r4, r1
   31e18:	0017      	movs	r7, r2
   31e1a:	4698      	mov	r8, r3
   31e1c:	e64e      	b.n	31abc <__aeabi_dsub+0x10c>
   31e1e:	4666      	mov	r6, ip
   31e20:	2400      	movs	r4, #0
   31e22:	2700      	movs	r7, #0
   31e24:	e685      	b.n	31b32 <__aeabi_dsub+0x182>
   31e26:	001f      	movs	r7, r3
   31e28:	0008      	movs	r0, r1
   31e2a:	3f20      	subs	r7, #32
   31e2c:	40f8      	lsrs	r0, r7
   31e2e:	0007      	movs	r7, r0
   31e30:	2b20      	cmp	r3, #32
   31e32:	d100      	bne.n	31e36 <__aeabi_dsub+0x486>
   31e34:	e08e      	b.n	31f54 <__aeabi_dsub+0x5a4>
   31e36:	2040      	movs	r0, #64	; 0x40
   31e38:	1ac3      	subs	r3, r0, r3
   31e3a:	4099      	lsls	r1, r3
   31e3c:	430a      	orrs	r2, r1
   31e3e:	1e51      	subs	r1, r2, #1
   31e40:	418a      	sbcs	r2, r1
   31e42:	2100      	movs	r1, #0
   31e44:	4317      	orrs	r7, r2
   31e46:	e692      	b.n	31b6e <__aeabi_dsub+0x1be>
   31e48:	2e00      	cmp	r6, #0
   31e4a:	d114      	bne.n	31e76 <__aeabi_dsub+0x4c6>
   31e4c:	0026      	movs	r6, r4
   31e4e:	4650      	mov	r0, sl
   31e50:	4306      	orrs	r6, r0
   31e52:	d062      	beq.n	31f1a <__aeabi_dsub+0x56a>
   31e54:	43db      	mvns	r3, r3
   31e56:	2b00      	cmp	r3, #0
   31e58:	d15c      	bne.n	31f14 <__aeabi_dsub+0x564>
   31e5a:	1887      	adds	r7, r0, r2
   31e5c:	4297      	cmp	r7, r2
   31e5e:	4192      	sbcs	r2, r2
   31e60:	1864      	adds	r4, r4, r1
   31e62:	4252      	negs	r2, r2
   31e64:	18a4      	adds	r4, r4, r2
   31e66:	4666      	mov	r6, ip
   31e68:	e687      	b.n	31b7a <__aeabi_dsub+0x1ca>
   31e6a:	4650      	mov	r0, sl
   31e6c:	4320      	orrs	r0, r4
   31e6e:	1e44      	subs	r4, r0, #1
   31e70:	41a0      	sbcs	r0, r4
   31e72:	2400      	movs	r4, #0
   31e74:	e760      	b.n	31d38 <__aeabi_dsub+0x388>
   31e76:	4e57      	ldr	r6, [pc, #348]	; (31fd4 <__aeabi_dsub+0x624>)
   31e78:	45b4      	cmp	ip, r6
   31e7a:	d04e      	beq.n	31f1a <__aeabi_dsub+0x56a>
   31e7c:	2680      	movs	r6, #128	; 0x80
   31e7e:	0436      	lsls	r6, r6, #16
   31e80:	425b      	negs	r3, r3
   31e82:	4334      	orrs	r4, r6
   31e84:	2b38      	cmp	r3, #56	; 0x38
   31e86:	dd00      	ble.n	31e8a <__aeabi_dsub+0x4da>
   31e88:	e07f      	b.n	31f8a <__aeabi_dsub+0x5da>
   31e8a:	2b1f      	cmp	r3, #31
   31e8c:	dd00      	ble.n	31e90 <__aeabi_dsub+0x4e0>
   31e8e:	e08b      	b.n	31fa8 <__aeabi_dsub+0x5f8>
   31e90:	2620      	movs	r6, #32
   31e92:	0027      	movs	r7, r4
   31e94:	4650      	mov	r0, sl
   31e96:	1af6      	subs	r6, r6, r3
   31e98:	40b7      	lsls	r7, r6
   31e9a:	40d8      	lsrs	r0, r3
   31e9c:	4307      	orrs	r7, r0
   31e9e:	4650      	mov	r0, sl
   31ea0:	40b0      	lsls	r0, r6
   31ea2:	1e46      	subs	r6, r0, #1
   31ea4:	41b0      	sbcs	r0, r6
   31ea6:	4307      	orrs	r7, r0
   31ea8:	40dc      	lsrs	r4, r3
   31eaa:	18bf      	adds	r7, r7, r2
   31eac:	e7d6      	b.n	31e5c <__aeabi_dsub+0x4ac>
   31eae:	000d      	movs	r5, r1
   31eb0:	4315      	orrs	r5, r2
   31eb2:	d100      	bne.n	31eb6 <__aeabi_dsub+0x506>
   31eb4:	e602      	b.n	31abc <__aeabi_dsub+0x10c>
   31eb6:	4650      	mov	r0, sl
   31eb8:	1a80      	subs	r0, r0, r2
   31eba:	4582      	cmp	sl, r0
   31ebc:	41bf      	sbcs	r7, r7
   31ebe:	1a65      	subs	r5, r4, r1
   31ec0:	427f      	negs	r7, r7
   31ec2:	1bed      	subs	r5, r5, r7
   31ec4:	4684      	mov	ip, r0
   31ec6:	0228      	lsls	r0, r5, #8
   31ec8:	d400      	bmi.n	31ecc <__aeabi_dsub+0x51c>
   31eca:	e68d      	b.n	31be8 <__aeabi_dsub+0x238>
   31ecc:	4650      	mov	r0, sl
   31ece:	1a17      	subs	r7, r2, r0
   31ed0:	42ba      	cmp	r2, r7
   31ed2:	4192      	sbcs	r2, r2
   31ed4:	1b0c      	subs	r4, r1, r4
   31ed6:	4252      	negs	r2, r2
   31ed8:	1aa4      	subs	r4, r4, r2
   31eda:	4698      	mov	r8, r3
   31edc:	e5ee      	b.n	31abc <__aeabi_dsub+0x10c>
   31ede:	000d      	movs	r5, r1
   31ee0:	4315      	orrs	r5, r2
   31ee2:	d100      	bne.n	31ee6 <__aeabi_dsub+0x536>
   31ee4:	e76b      	b.n	31dbe <__aeabi_dsub+0x40e>
   31ee6:	4650      	mov	r0, sl
   31ee8:	0767      	lsls	r7, r4, #29
   31eea:	08c0      	lsrs	r0, r0, #3
   31eec:	4307      	orrs	r7, r0
   31eee:	2080      	movs	r0, #128	; 0x80
   31ef0:	08e4      	lsrs	r4, r4, #3
   31ef2:	0300      	lsls	r0, r0, #12
   31ef4:	4204      	tst	r4, r0
   31ef6:	d007      	beq.n	31f08 <__aeabi_dsub+0x558>
   31ef8:	08cd      	lsrs	r5, r1, #3
   31efa:	4205      	tst	r5, r0
   31efc:	d104      	bne.n	31f08 <__aeabi_dsub+0x558>
   31efe:	002c      	movs	r4, r5
   31f00:	4698      	mov	r8, r3
   31f02:	08d7      	lsrs	r7, r2, #3
   31f04:	0749      	lsls	r1, r1, #29
   31f06:	430f      	orrs	r7, r1
   31f08:	0f7b      	lsrs	r3, r7, #29
   31f0a:	00e4      	lsls	r4, r4, #3
   31f0c:	431c      	orrs	r4, r3
   31f0e:	00ff      	lsls	r7, r7, #3
   31f10:	4e30      	ldr	r6, [pc, #192]	; (31fd4 <__aeabi_dsub+0x624>)
   31f12:	e5d3      	b.n	31abc <__aeabi_dsub+0x10c>
   31f14:	4e2f      	ldr	r6, [pc, #188]	; (31fd4 <__aeabi_dsub+0x624>)
   31f16:	45b4      	cmp	ip, r6
   31f18:	d1b4      	bne.n	31e84 <__aeabi_dsub+0x4d4>
   31f1a:	000c      	movs	r4, r1
   31f1c:	0017      	movs	r7, r2
   31f1e:	4666      	mov	r6, ip
   31f20:	e5cc      	b.n	31abc <__aeabi_dsub+0x10c>
   31f22:	2700      	movs	r7, #0
   31f24:	2400      	movs	r4, #0
   31f26:	e5e8      	b.n	31afa <__aeabi_dsub+0x14a>
   31f28:	2b00      	cmp	r3, #0
   31f2a:	d039      	beq.n	31fa0 <__aeabi_dsub+0x5f0>
   31f2c:	000b      	movs	r3, r1
   31f2e:	4313      	orrs	r3, r2
   31f30:	d100      	bne.n	31f34 <__aeabi_dsub+0x584>
   31f32:	e744      	b.n	31dbe <__aeabi_dsub+0x40e>
   31f34:	08c0      	lsrs	r0, r0, #3
   31f36:	0767      	lsls	r7, r4, #29
   31f38:	4307      	orrs	r7, r0
   31f3a:	2080      	movs	r0, #128	; 0x80
   31f3c:	08e4      	lsrs	r4, r4, #3
   31f3e:	0300      	lsls	r0, r0, #12
   31f40:	4204      	tst	r4, r0
   31f42:	d0e1      	beq.n	31f08 <__aeabi_dsub+0x558>
   31f44:	08cb      	lsrs	r3, r1, #3
   31f46:	4203      	tst	r3, r0
   31f48:	d1de      	bne.n	31f08 <__aeabi_dsub+0x558>
   31f4a:	08d7      	lsrs	r7, r2, #3
   31f4c:	0749      	lsls	r1, r1, #29
   31f4e:	430f      	orrs	r7, r1
   31f50:	001c      	movs	r4, r3
   31f52:	e7d9      	b.n	31f08 <__aeabi_dsub+0x558>
   31f54:	2100      	movs	r1, #0
   31f56:	e771      	b.n	31e3c <__aeabi_dsub+0x48c>
   31f58:	2500      	movs	r5, #0
   31f5a:	2700      	movs	r7, #0
   31f5c:	e5e9      	b.n	31b32 <__aeabi_dsub+0x182>
   31f5e:	002e      	movs	r6, r5
   31f60:	0027      	movs	r7, r4
   31f62:	3e20      	subs	r6, #32
   31f64:	40f7      	lsrs	r7, r6
   31f66:	2d20      	cmp	r5, #32
   31f68:	d02f      	beq.n	31fca <__aeabi_dsub+0x61a>
   31f6a:	2640      	movs	r6, #64	; 0x40
   31f6c:	1b75      	subs	r5, r6, r5
   31f6e:	40ac      	lsls	r4, r5
   31f70:	4650      	mov	r0, sl
   31f72:	4320      	orrs	r0, r4
   31f74:	1e44      	subs	r4, r0, #1
   31f76:	41a0      	sbcs	r0, r4
   31f78:	2400      	movs	r4, #0
   31f7a:	4338      	orrs	r0, r7
   31f7c:	e6dc      	b.n	31d38 <__aeabi_dsub+0x388>
   31f7e:	2480      	movs	r4, #128	; 0x80
   31f80:	2500      	movs	r5, #0
   31f82:	0324      	lsls	r4, r4, #12
   31f84:	4e13      	ldr	r6, [pc, #76]	; (31fd4 <__aeabi_dsub+0x624>)
   31f86:	2700      	movs	r7, #0
   31f88:	e5d3      	b.n	31b32 <__aeabi_dsub+0x182>
   31f8a:	4650      	mov	r0, sl
   31f8c:	4320      	orrs	r0, r4
   31f8e:	0007      	movs	r7, r0
   31f90:	1e78      	subs	r0, r7, #1
   31f92:	4187      	sbcs	r7, r0
   31f94:	2400      	movs	r4, #0
   31f96:	18bf      	adds	r7, r7, r2
   31f98:	e760      	b.n	31e5c <__aeabi_dsub+0x4ac>
   31f9a:	000c      	movs	r4, r1
   31f9c:	0017      	movs	r7, r2
   31f9e:	e58d      	b.n	31abc <__aeabi_dsub+0x10c>
   31fa0:	000c      	movs	r4, r1
   31fa2:	0017      	movs	r7, r2
   31fa4:	4e0b      	ldr	r6, [pc, #44]	; (31fd4 <__aeabi_dsub+0x624>)
   31fa6:	e589      	b.n	31abc <__aeabi_dsub+0x10c>
   31fa8:	001e      	movs	r6, r3
   31faa:	0027      	movs	r7, r4
   31fac:	3e20      	subs	r6, #32
   31fae:	40f7      	lsrs	r7, r6
   31fb0:	2b20      	cmp	r3, #32
   31fb2:	d00c      	beq.n	31fce <__aeabi_dsub+0x61e>
   31fb4:	2640      	movs	r6, #64	; 0x40
   31fb6:	1af3      	subs	r3, r6, r3
   31fb8:	409c      	lsls	r4, r3
   31fba:	4650      	mov	r0, sl
   31fbc:	4320      	orrs	r0, r4
   31fbe:	1e44      	subs	r4, r0, #1
   31fc0:	41a0      	sbcs	r0, r4
   31fc2:	4307      	orrs	r7, r0
   31fc4:	2400      	movs	r4, #0
   31fc6:	18bf      	adds	r7, r7, r2
   31fc8:	e748      	b.n	31e5c <__aeabi_dsub+0x4ac>
   31fca:	2400      	movs	r4, #0
   31fcc:	e7d0      	b.n	31f70 <__aeabi_dsub+0x5c0>
   31fce:	2400      	movs	r4, #0
   31fd0:	e7f3      	b.n	31fba <__aeabi_dsub+0x60a>
   31fd2:	46c0      	nop			; (mov r8, r8)
   31fd4:	000007ff 	.word	0x000007ff
   31fd8:	ff7fffff 	.word	0xff7fffff

00031fdc <__aeabi_d2iz>:
   31fdc:	b530      	push	{r4, r5, lr}
   31fde:	4d13      	ldr	r5, [pc, #76]	; (3202c <__aeabi_d2iz+0x50>)
   31fe0:	030a      	lsls	r2, r1, #12
   31fe2:	004b      	lsls	r3, r1, #1
   31fe4:	0b12      	lsrs	r2, r2, #12
   31fe6:	0d5b      	lsrs	r3, r3, #21
   31fe8:	0fc9      	lsrs	r1, r1, #31
   31fea:	2400      	movs	r4, #0
   31fec:	42ab      	cmp	r3, r5
   31fee:	dd10      	ble.n	32012 <__aeabi_d2iz+0x36>
   31ff0:	4c0f      	ldr	r4, [pc, #60]	; (32030 <__aeabi_d2iz+0x54>)
   31ff2:	42a3      	cmp	r3, r4
   31ff4:	dc0f      	bgt.n	32016 <__aeabi_d2iz+0x3a>
   31ff6:	2480      	movs	r4, #128	; 0x80
   31ff8:	4d0e      	ldr	r5, [pc, #56]	; (32034 <__aeabi_d2iz+0x58>)
   31ffa:	0364      	lsls	r4, r4, #13
   31ffc:	4322      	orrs	r2, r4
   31ffe:	1aed      	subs	r5, r5, r3
   32000:	2d1f      	cmp	r5, #31
   32002:	dd0b      	ble.n	3201c <__aeabi_d2iz+0x40>
   32004:	480c      	ldr	r0, [pc, #48]	; (32038 <__aeabi_d2iz+0x5c>)
   32006:	1ac3      	subs	r3, r0, r3
   32008:	40da      	lsrs	r2, r3
   3200a:	4254      	negs	r4, r2
   3200c:	2900      	cmp	r1, #0
   3200e:	d100      	bne.n	32012 <__aeabi_d2iz+0x36>
   32010:	0014      	movs	r4, r2
   32012:	0020      	movs	r0, r4
   32014:	bd30      	pop	{r4, r5, pc}
   32016:	4b09      	ldr	r3, [pc, #36]	; (3203c <__aeabi_d2iz+0x60>)
   32018:	18cc      	adds	r4, r1, r3
   3201a:	e7fa      	b.n	32012 <__aeabi_d2iz+0x36>
   3201c:	4c08      	ldr	r4, [pc, #32]	; (32040 <__aeabi_d2iz+0x64>)
   3201e:	40e8      	lsrs	r0, r5
   32020:	46a4      	mov	ip, r4
   32022:	4463      	add	r3, ip
   32024:	409a      	lsls	r2, r3
   32026:	4302      	orrs	r2, r0
   32028:	e7ef      	b.n	3200a <__aeabi_d2iz+0x2e>
   3202a:	46c0      	nop			; (mov r8, r8)
   3202c:	000003fe 	.word	0x000003fe
   32030:	0000041d 	.word	0x0000041d
   32034:	00000433 	.word	0x00000433
   32038:	00000413 	.word	0x00000413
   3203c:	7fffffff 	.word	0x7fffffff
   32040:	fffffbed 	.word	0xfffffbed

00032044 <__aeabi_ui2d>:
   32044:	b510      	push	{r4, lr}
   32046:	1e04      	subs	r4, r0, #0
   32048:	d028      	beq.n	3209c <__aeabi_ui2d+0x58>
   3204a:	f000 f833 	bl	320b4 <__clzsi2>
   3204e:	4b15      	ldr	r3, [pc, #84]	; (320a4 <__aeabi_ui2d+0x60>)
   32050:	4a15      	ldr	r2, [pc, #84]	; (320a8 <__aeabi_ui2d+0x64>)
   32052:	1a1b      	subs	r3, r3, r0
   32054:	1ad2      	subs	r2, r2, r3
   32056:	2a1f      	cmp	r2, #31
   32058:	dd15      	ble.n	32086 <__aeabi_ui2d+0x42>
   3205a:	4a14      	ldr	r2, [pc, #80]	; (320ac <__aeabi_ui2d+0x68>)
   3205c:	1ad2      	subs	r2, r2, r3
   3205e:	4094      	lsls	r4, r2
   32060:	2200      	movs	r2, #0
   32062:	0324      	lsls	r4, r4, #12
   32064:	055b      	lsls	r3, r3, #21
   32066:	0b24      	lsrs	r4, r4, #12
   32068:	0d5b      	lsrs	r3, r3, #21
   3206a:	2100      	movs	r1, #0
   3206c:	0010      	movs	r0, r2
   3206e:	0324      	lsls	r4, r4, #12
   32070:	0d0a      	lsrs	r2, r1, #20
   32072:	0b24      	lsrs	r4, r4, #12
   32074:	0512      	lsls	r2, r2, #20
   32076:	4322      	orrs	r2, r4
   32078:	4c0d      	ldr	r4, [pc, #52]	; (320b0 <__aeabi_ui2d+0x6c>)
   3207a:	051b      	lsls	r3, r3, #20
   3207c:	4022      	ands	r2, r4
   3207e:	4313      	orrs	r3, r2
   32080:	005b      	lsls	r3, r3, #1
   32082:	0859      	lsrs	r1, r3, #1
   32084:	bd10      	pop	{r4, pc}
   32086:	0021      	movs	r1, r4
   32088:	4091      	lsls	r1, r2
   3208a:	000a      	movs	r2, r1
   3208c:	210b      	movs	r1, #11
   3208e:	1a08      	subs	r0, r1, r0
   32090:	40c4      	lsrs	r4, r0
   32092:	055b      	lsls	r3, r3, #21
   32094:	0324      	lsls	r4, r4, #12
   32096:	0b24      	lsrs	r4, r4, #12
   32098:	0d5b      	lsrs	r3, r3, #21
   3209a:	e7e6      	b.n	3206a <__aeabi_ui2d+0x26>
   3209c:	2300      	movs	r3, #0
   3209e:	2400      	movs	r4, #0
   320a0:	2200      	movs	r2, #0
   320a2:	e7e2      	b.n	3206a <__aeabi_ui2d+0x26>
   320a4:	0000041e 	.word	0x0000041e
   320a8:	00000433 	.word	0x00000433
   320ac:	00000413 	.word	0x00000413
   320b0:	800fffff 	.word	0x800fffff

000320b4 <__clzsi2>:
   320b4:	211c      	movs	r1, #28
   320b6:	2301      	movs	r3, #1
   320b8:	041b      	lsls	r3, r3, #16
   320ba:	4298      	cmp	r0, r3
   320bc:	d301      	bcc.n	320c2 <__clzsi2+0xe>
   320be:	0c00      	lsrs	r0, r0, #16
   320c0:	3910      	subs	r1, #16
   320c2:	0a1b      	lsrs	r3, r3, #8
   320c4:	4298      	cmp	r0, r3
   320c6:	d301      	bcc.n	320cc <__clzsi2+0x18>
   320c8:	0a00      	lsrs	r0, r0, #8
   320ca:	3908      	subs	r1, #8
   320cc:	091b      	lsrs	r3, r3, #4
   320ce:	4298      	cmp	r0, r3
   320d0:	d301      	bcc.n	320d6 <__clzsi2+0x22>
   320d2:	0900      	lsrs	r0, r0, #4
   320d4:	3904      	subs	r1, #4
   320d6:	a202      	add	r2, pc, #8	; (adr r2, 320e0 <__clzsi2+0x2c>)
   320d8:	5c10      	ldrb	r0, [r2, r0]
   320da:	1840      	adds	r0, r0, r1
   320dc:	4770      	bx	lr
   320de:	46c0      	nop			; (mov r8, r8)
   320e0:	02020304 	.word	0x02020304
   320e4:	01010101 	.word	0x01010101
	...

000320f0 <atoi>:
   320f0:	b510      	push	{r4, lr}
   320f2:	220a      	movs	r2, #10
   320f4:	2100      	movs	r1, #0
   320f6:	f000 fb0d 	bl	32714 <strtol>
   320fa:	bd10      	pop	{r4, pc}

000320fc <__libc_init_array>:
   320fc:	b570      	push	{r4, r5, r6, lr}
   320fe:	2600      	movs	r6, #0
   32100:	4d0c      	ldr	r5, [pc, #48]	; (32134 <__libc_init_array+0x38>)
   32102:	4c0d      	ldr	r4, [pc, #52]	; (32138 <__libc_init_array+0x3c>)
   32104:	1b64      	subs	r4, r4, r5
   32106:	10a4      	asrs	r4, r4, #2
   32108:	42a6      	cmp	r6, r4
   3210a:	d109      	bne.n	32120 <__libc_init_array+0x24>
   3210c:	2600      	movs	r6, #0
   3210e:	f005 fa77 	bl	37600 <_init>
   32112:	4d0a      	ldr	r5, [pc, #40]	; (3213c <__libc_init_array+0x40>)
   32114:	4c0a      	ldr	r4, [pc, #40]	; (32140 <__libc_init_array+0x44>)
   32116:	1b64      	subs	r4, r4, r5
   32118:	10a4      	asrs	r4, r4, #2
   3211a:	42a6      	cmp	r6, r4
   3211c:	d105      	bne.n	3212a <__libc_init_array+0x2e>
   3211e:	bd70      	pop	{r4, r5, r6, pc}
   32120:	00b3      	lsls	r3, r6, #2
   32122:	58eb      	ldr	r3, [r5, r3]
   32124:	4798      	blx	r3
   32126:	3601      	adds	r6, #1
   32128:	e7ee      	b.n	32108 <__libc_init_array+0xc>
   3212a:	00b3      	lsls	r3, r6, #2
   3212c:	58eb      	ldr	r3, [r5, r3]
   3212e:	4798      	blx	r3
   32130:	3601      	adds	r6, #1
   32132:	e7f2      	b.n	3211a <__libc_init_array+0x1e>
   32134:	0003760c 	.word	0x0003760c
   32138:	0003760c 	.word	0x0003760c
   3213c:	0003760c 	.word	0x0003760c
   32140:	00037610 	.word	0x00037610

00032144 <malloc>:
   32144:	b510      	push	{r4, lr}
   32146:	4b03      	ldr	r3, [pc, #12]	; (32154 <malloc+0x10>)
   32148:	0001      	movs	r1, r0
   3214a:	6818      	ldr	r0, [r3, #0]
   3214c:	f000 f87c 	bl	32248 <_malloc_r>
   32150:	bd10      	pop	{r4, pc}
   32152:	46c0      	nop			; (mov r8, r8)
   32154:	20000110 	.word	0x20000110

00032158 <free>:
   32158:	b510      	push	{r4, lr}
   3215a:	4b03      	ldr	r3, [pc, #12]	; (32168 <free+0x10>)
   3215c:	0001      	movs	r1, r0
   3215e:	6818      	ldr	r0, [r3, #0]
   32160:	f000 f828 	bl	321b4 <_free_r>
   32164:	bd10      	pop	{r4, pc}
   32166:	46c0      	nop			; (mov r8, r8)
   32168:	20000110 	.word	0x20000110

0003216c <memcpy>:
   3216c:	2300      	movs	r3, #0
   3216e:	b510      	push	{r4, lr}
   32170:	429a      	cmp	r2, r3
   32172:	d100      	bne.n	32176 <memcpy+0xa>
   32174:	bd10      	pop	{r4, pc}
   32176:	5ccc      	ldrb	r4, [r1, r3]
   32178:	54c4      	strb	r4, [r0, r3]
   3217a:	3301      	adds	r3, #1
   3217c:	e7f8      	b.n	32170 <memcpy+0x4>

0003217e <memmove>:
   3217e:	b510      	push	{r4, lr}
   32180:	4288      	cmp	r0, r1
   32182:	d902      	bls.n	3218a <memmove+0xc>
   32184:	188b      	adds	r3, r1, r2
   32186:	4298      	cmp	r0, r3
   32188:	d308      	bcc.n	3219c <memmove+0x1e>
   3218a:	2300      	movs	r3, #0
   3218c:	429a      	cmp	r2, r3
   3218e:	d007      	beq.n	321a0 <memmove+0x22>
   32190:	5ccc      	ldrb	r4, [r1, r3]
   32192:	54c4      	strb	r4, [r0, r3]
   32194:	3301      	adds	r3, #1
   32196:	e7f9      	b.n	3218c <memmove+0xe>
   32198:	5c8b      	ldrb	r3, [r1, r2]
   3219a:	5483      	strb	r3, [r0, r2]
   3219c:	3a01      	subs	r2, #1
   3219e:	d2fb      	bcs.n	32198 <memmove+0x1a>
   321a0:	bd10      	pop	{r4, pc}

000321a2 <memset>:
   321a2:	0003      	movs	r3, r0
   321a4:	1882      	adds	r2, r0, r2
   321a6:	4293      	cmp	r3, r2
   321a8:	d100      	bne.n	321ac <memset+0xa>
   321aa:	4770      	bx	lr
   321ac:	7019      	strb	r1, [r3, #0]
   321ae:	3301      	adds	r3, #1
   321b0:	e7f9      	b.n	321a6 <memset+0x4>
	...

000321b4 <_free_r>:
   321b4:	b570      	push	{r4, r5, r6, lr}
   321b6:	0005      	movs	r5, r0
   321b8:	2900      	cmp	r1, #0
   321ba:	d010      	beq.n	321de <_free_r+0x2a>
   321bc:	1f0c      	subs	r4, r1, #4
   321be:	6823      	ldr	r3, [r4, #0]
   321c0:	2b00      	cmp	r3, #0
   321c2:	da00      	bge.n	321c6 <_free_r+0x12>
   321c4:	18e4      	adds	r4, r4, r3
   321c6:	0028      	movs	r0, r5
   321c8:	f000 fdd8 	bl	32d7c <__malloc_lock>
   321cc:	4a1d      	ldr	r2, [pc, #116]	; (32244 <_free_r+0x90>)
   321ce:	6813      	ldr	r3, [r2, #0]
   321d0:	2b00      	cmp	r3, #0
   321d2:	d105      	bne.n	321e0 <_free_r+0x2c>
   321d4:	6063      	str	r3, [r4, #4]
   321d6:	6014      	str	r4, [r2, #0]
   321d8:	0028      	movs	r0, r5
   321da:	f000 fdd0 	bl	32d7e <__malloc_unlock>
   321de:	bd70      	pop	{r4, r5, r6, pc}
   321e0:	42a3      	cmp	r3, r4
   321e2:	d909      	bls.n	321f8 <_free_r+0x44>
   321e4:	6821      	ldr	r1, [r4, #0]
   321e6:	1860      	adds	r0, r4, r1
   321e8:	4283      	cmp	r3, r0
   321ea:	d1f3      	bne.n	321d4 <_free_r+0x20>
   321ec:	6818      	ldr	r0, [r3, #0]
   321ee:	685b      	ldr	r3, [r3, #4]
   321f0:	1841      	adds	r1, r0, r1
   321f2:	6021      	str	r1, [r4, #0]
   321f4:	e7ee      	b.n	321d4 <_free_r+0x20>
   321f6:	0013      	movs	r3, r2
   321f8:	685a      	ldr	r2, [r3, #4]
   321fa:	2a00      	cmp	r2, #0
   321fc:	d001      	beq.n	32202 <_free_r+0x4e>
   321fe:	42a2      	cmp	r2, r4
   32200:	d9f9      	bls.n	321f6 <_free_r+0x42>
   32202:	6819      	ldr	r1, [r3, #0]
   32204:	1858      	adds	r0, r3, r1
   32206:	42a0      	cmp	r0, r4
   32208:	d10b      	bne.n	32222 <_free_r+0x6e>
   3220a:	6820      	ldr	r0, [r4, #0]
   3220c:	1809      	adds	r1, r1, r0
   3220e:	1858      	adds	r0, r3, r1
   32210:	6019      	str	r1, [r3, #0]
   32212:	4282      	cmp	r2, r0
   32214:	d1e0      	bne.n	321d8 <_free_r+0x24>
   32216:	6810      	ldr	r0, [r2, #0]
   32218:	6852      	ldr	r2, [r2, #4]
   3221a:	1841      	adds	r1, r0, r1
   3221c:	6019      	str	r1, [r3, #0]
   3221e:	605a      	str	r2, [r3, #4]
   32220:	e7da      	b.n	321d8 <_free_r+0x24>
   32222:	42a0      	cmp	r0, r4
   32224:	d902      	bls.n	3222c <_free_r+0x78>
   32226:	230c      	movs	r3, #12
   32228:	602b      	str	r3, [r5, #0]
   3222a:	e7d5      	b.n	321d8 <_free_r+0x24>
   3222c:	6821      	ldr	r1, [r4, #0]
   3222e:	1860      	adds	r0, r4, r1
   32230:	4282      	cmp	r2, r0
   32232:	d103      	bne.n	3223c <_free_r+0x88>
   32234:	6810      	ldr	r0, [r2, #0]
   32236:	6852      	ldr	r2, [r2, #4]
   32238:	1841      	adds	r1, r0, r1
   3223a:	6021      	str	r1, [r4, #0]
   3223c:	6062      	str	r2, [r4, #4]
   3223e:	605c      	str	r4, [r3, #4]
   32240:	e7ca      	b.n	321d8 <_free_r+0x24>
   32242:	46c0      	nop			; (mov r8, r8)
   32244:	20004178 	.word	0x20004178

00032248 <_malloc_r>:
   32248:	2303      	movs	r3, #3
   3224a:	b570      	push	{r4, r5, r6, lr}
   3224c:	1ccd      	adds	r5, r1, #3
   3224e:	439d      	bics	r5, r3
   32250:	3508      	adds	r5, #8
   32252:	0006      	movs	r6, r0
   32254:	2d0c      	cmp	r5, #12
   32256:	d21e      	bcs.n	32296 <_malloc_r+0x4e>
   32258:	250c      	movs	r5, #12
   3225a:	42a9      	cmp	r1, r5
   3225c:	d81d      	bhi.n	3229a <_malloc_r+0x52>
   3225e:	0030      	movs	r0, r6
   32260:	f000 fd8c 	bl	32d7c <__malloc_lock>
   32264:	4a25      	ldr	r2, [pc, #148]	; (322fc <_malloc_r+0xb4>)
   32266:	6814      	ldr	r4, [r2, #0]
   32268:	0021      	movs	r1, r4
   3226a:	2900      	cmp	r1, #0
   3226c:	d119      	bne.n	322a2 <_malloc_r+0x5a>
   3226e:	4c24      	ldr	r4, [pc, #144]	; (32300 <_malloc_r+0xb8>)
   32270:	6823      	ldr	r3, [r4, #0]
   32272:	2b00      	cmp	r3, #0
   32274:	d103      	bne.n	3227e <_malloc_r+0x36>
   32276:	0030      	movs	r0, r6
   32278:	f000 f8ae 	bl	323d8 <_sbrk_r>
   3227c:	6020      	str	r0, [r4, #0]
   3227e:	0029      	movs	r1, r5
   32280:	0030      	movs	r0, r6
   32282:	f000 f8a9 	bl	323d8 <_sbrk_r>
   32286:	1c43      	adds	r3, r0, #1
   32288:	d12c      	bne.n	322e4 <_malloc_r+0x9c>
   3228a:	230c      	movs	r3, #12
   3228c:	0030      	movs	r0, r6
   3228e:	6033      	str	r3, [r6, #0]
   32290:	f000 fd75 	bl	32d7e <__malloc_unlock>
   32294:	e003      	b.n	3229e <_malloc_r+0x56>
   32296:	2d00      	cmp	r5, #0
   32298:	dadf      	bge.n	3225a <_malloc_r+0x12>
   3229a:	230c      	movs	r3, #12
   3229c:	6033      	str	r3, [r6, #0]
   3229e:	2000      	movs	r0, #0
   322a0:	bd70      	pop	{r4, r5, r6, pc}
   322a2:	680b      	ldr	r3, [r1, #0]
   322a4:	1b5b      	subs	r3, r3, r5
   322a6:	d41a      	bmi.n	322de <_malloc_r+0x96>
   322a8:	2b0b      	cmp	r3, #11
   322aa:	d903      	bls.n	322b4 <_malloc_r+0x6c>
   322ac:	600b      	str	r3, [r1, #0]
   322ae:	18cc      	adds	r4, r1, r3
   322b0:	6025      	str	r5, [r4, #0]
   322b2:	e003      	b.n	322bc <_malloc_r+0x74>
   322b4:	428c      	cmp	r4, r1
   322b6:	d10e      	bne.n	322d6 <_malloc_r+0x8e>
   322b8:	6863      	ldr	r3, [r4, #4]
   322ba:	6013      	str	r3, [r2, #0]
   322bc:	0030      	movs	r0, r6
   322be:	f000 fd5e 	bl	32d7e <__malloc_unlock>
   322c2:	0020      	movs	r0, r4
   322c4:	2207      	movs	r2, #7
   322c6:	300b      	adds	r0, #11
   322c8:	1d23      	adds	r3, r4, #4
   322ca:	4390      	bics	r0, r2
   322cc:	1ac3      	subs	r3, r0, r3
   322ce:	d0e7      	beq.n	322a0 <_malloc_r+0x58>
   322d0:	425a      	negs	r2, r3
   322d2:	50e2      	str	r2, [r4, r3]
   322d4:	e7e4      	b.n	322a0 <_malloc_r+0x58>
   322d6:	684b      	ldr	r3, [r1, #4]
   322d8:	6063      	str	r3, [r4, #4]
   322da:	000c      	movs	r4, r1
   322dc:	e7ee      	b.n	322bc <_malloc_r+0x74>
   322de:	000c      	movs	r4, r1
   322e0:	6849      	ldr	r1, [r1, #4]
   322e2:	e7c2      	b.n	3226a <_malloc_r+0x22>
   322e4:	2303      	movs	r3, #3
   322e6:	1cc4      	adds	r4, r0, #3
   322e8:	439c      	bics	r4, r3
   322ea:	42a0      	cmp	r0, r4
   322ec:	d0e0      	beq.n	322b0 <_malloc_r+0x68>
   322ee:	1a21      	subs	r1, r4, r0
   322f0:	0030      	movs	r0, r6
   322f2:	f000 f871 	bl	323d8 <_sbrk_r>
   322f6:	1c43      	adds	r3, r0, #1
   322f8:	d1da      	bne.n	322b0 <_malloc_r+0x68>
   322fa:	e7c6      	b.n	3228a <_malloc_r+0x42>
   322fc:	20004178 	.word	0x20004178
   32300:	2000417c 	.word	0x2000417c

00032304 <_puts_r>:
   32304:	b570      	push	{r4, r5, r6, lr}
   32306:	0005      	movs	r5, r0
   32308:	000e      	movs	r6, r1
   3230a:	2800      	cmp	r0, #0
   3230c:	d004      	beq.n	32318 <_puts_r+0x14>
   3230e:	6983      	ldr	r3, [r0, #24]
   32310:	2b00      	cmp	r3, #0
   32312:	d101      	bne.n	32318 <_puts_r+0x14>
   32314:	f000 fc0e 	bl	32b34 <__sinit>
   32318:	69ab      	ldr	r3, [r5, #24]
   3231a:	68ac      	ldr	r4, [r5, #8]
   3231c:	2b00      	cmp	r3, #0
   3231e:	d102      	bne.n	32326 <_puts_r+0x22>
   32320:	0028      	movs	r0, r5
   32322:	f000 fc07 	bl	32b34 <__sinit>
   32326:	4b24      	ldr	r3, [pc, #144]	; (323b8 <_puts_r+0xb4>)
   32328:	429c      	cmp	r4, r3
   3232a:	d10f      	bne.n	3234c <_puts_r+0x48>
   3232c:	686c      	ldr	r4, [r5, #4]
   3232e:	89a3      	ldrh	r3, [r4, #12]
   32330:	071b      	lsls	r3, r3, #28
   32332:	d502      	bpl.n	3233a <_puts_r+0x36>
   32334:	6923      	ldr	r3, [r4, #16]
   32336:	2b00      	cmp	r3, #0
   32338:	d120      	bne.n	3237c <_puts_r+0x78>
   3233a:	0021      	movs	r1, r4
   3233c:	0028      	movs	r0, r5
   3233e:	f000 fa8b 	bl	32858 <__swsetup_r>
   32342:	2800      	cmp	r0, #0
   32344:	d01a      	beq.n	3237c <_puts_r+0x78>
   32346:	2001      	movs	r0, #1
   32348:	4240      	negs	r0, r0
   3234a:	bd70      	pop	{r4, r5, r6, pc}
   3234c:	4b1b      	ldr	r3, [pc, #108]	; (323bc <_puts_r+0xb8>)
   3234e:	429c      	cmp	r4, r3
   32350:	d101      	bne.n	32356 <_puts_r+0x52>
   32352:	68ac      	ldr	r4, [r5, #8]
   32354:	e7eb      	b.n	3232e <_puts_r+0x2a>
   32356:	4b1a      	ldr	r3, [pc, #104]	; (323c0 <_puts_r+0xbc>)
   32358:	429c      	cmp	r4, r3
   3235a:	d1e8      	bne.n	3232e <_puts_r+0x2a>
   3235c:	68ec      	ldr	r4, [r5, #12]
   3235e:	e7e6      	b.n	3232e <_puts_r+0x2a>
   32360:	3b01      	subs	r3, #1
   32362:	3601      	adds	r6, #1
   32364:	60a3      	str	r3, [r4, #8]
   32366:	2b00      	cmp	r3, #0
   32368:	da04      	bge.n	32374 <_puts_r+0x70>
   3236a:	69a2      	ldr	r2, [r4, #24]
   3236c:	4293      	cmp	r3, r2
   3236e:	db16      	blt.n	3239e <_puts_r+0x9a>
   32370:	290a      	cmp	r1, #10
   32372:	d014      	beq.n	3239e <_puts_r+0x9a>
   32374:	6823      	ldr	r3, [r4, #0]
   32376:	1c5a      	adds	r2, r3, #1
   32378:	6022      	str	r2, [r4, #0]
   3237a:	7019      	strb	r1, [r3, #0]
   3237c:	7831      	ldrb	r1, [r6, #0]
   3237e:	68a3      	ldr	r3, [r4, #8]
   32380:	2900      	cmp	r1, #0
   32382:	d1ed      	bne.n	32360 <_puts_r+0x5c>
   32384:	3b01      	subs	r3, #1
   32386:	60a3      	str	r3, [r4, #8]
   32388:	2b00      	cmp	r3, #0
   3238a:	da0f      	bge.n	323ac <_puts_r+0xa8>
   3238c:	0022      	movs	r2, r4
   3238e:	310a      	adds	r1, #10
   32390:	0028      	movs	r0, r5
   32392:	f000 fa0b 	bl	327ac <__swbuf_r>
   32396:	1c43      	adds	r3, r0, #1
   32398:	d0d5      	beq.n	32346 <_puts_r+0x42>
   3239a:	200a      	movs	r0, #10
   3239c:	e7d5      	b.n	3234a <_puts_r+0x46>
   3239e:	0022      	movs	r2, r4
   323a0:	0028      	movs	r0, r5
   323a2:	f000 fa03 	bl	327ac <__swbuf_r>
   323a6:	1c43      	adds	r3, r0, #1
   323a8:	d1e8      	bne.n	3237c <_puts_r+0x78>
   323aa:	e7cc      	b.n	32346 <_puts_r+0x42>
   323ac:	200a      	movs	r0, #10
   323ae:	6823      	ldr	r3, [r4, #0]
   323b0:	1c5a      	adds	r2, r3, #1
   323b2:	6022      	str	r2, [r4, #0]
   323b4:	7018      	strb	r0, [r3, #0]
   323b6:	e7c8      	b.n	3234a <_puts_r+0x46>
   323b8:	00037480 	.word	0x00037480
   323bc:	000374a0 	.word	0x000374a0
   323c0:	00037460 	.word	0x00037460

000323c4 <puts>:
   323c4:	b510      	push	{r4, lr}
   323c6:	4b03      	ldr	r3, [pc, #12]	; (323d4 <puts+0x10>)
   323c8:	0001      	movs	r1, r0
   323ca:	6818      	ldr	r0, [r3, #0]
   323cc:	f7ff ff9a 	bl	32304 <_puts_r>
   323d0:	bd10      	pop	{r4, pc}
   323d2:	46c0      	nop			; (mov r8, r8)
   323d4:	20000110 	.word	0x20000110

000323d8 <_sbrk_r>:
   323d8:	2300      	movs	r3, #0
   323da:	b570      	push	{r4, r5, r6, lr}
   323dc:	4c06      	ldr	r4, [pc, #24]	; (323f8 <_sbrk_r+0x20>)
   323de:	0005      	movs	r5, r0
   323e0:	0008      	movs	r0, r1
   323e2:	6023      	str	r3, [r4, #0]
   323e4:	f7f6 fcc0 	bl	28d68 <_sbrk>
   323e8:	1c43      	adds	r3, r0, #1
   323ea:	d103      	bne.n	323f4 <_sbrk_r+0x1c>
   323ec:	6823      	ldr	r3, [r4, #0]
   323ee:	2b00      	cmp	r3, #0
   323f0:	d000      	beq.n	323f4 <_sbrk_r+0x1c>
   323f2:	602b      	str	r3, [r5, #0]
   323f4:	bd70      	pop	{r4, r5, r6, pc}
   323f6:	46c0      	nop			; (mov r8, r8)
   323f8:	20005600 	.word	0x20005600

000323fc <sniprintf>:
   323fc:	b40c      	push	{r2, r3}
   323fe:	b530      	push	{r4, r5, lr}
   32400:	4b16      	ldr	r3, [pc, #88]	; (3245c <sniprintf+0x60>)
   32402:	b09d      	sub	sp, #116	; 0x74
   32404:	1e0c      	subs	r4, r1, #0
   32406:	681d      	ldr	r5, [r3, #0]
   32408:	da08      	bge.n	3241c <sniprintf+0x20>
   3240a:	238b      	movs	r3, #139	; 0x8b
   3240c:	2001      	movs	r0, #1
   3240e:	602b      	str	r3, [r5, #0]
   32410:	4240      	negs	r0, r0
   32412:	b01d      	add	sp, #116	; 0x74
   32414:	bc30      	pop	{r4, r5}
   32416:	bc08      	pop	{r3}
   32418:	b002      	add	sp, #8
   3241a:	4718      	bx	r3
   3241c:	2382      	movs	r3, #130	; 0x82
   3241e:	a902      	add	r1, sp, #8
   32420:	009b      	lsls	r3, r3, #2
   32422:	818b      	strh	r3, [r1, #12]
   32424:	2300      	movs	r3, #0
   32426:	9002      	str	r0, [sp, #8]
   32428:	6108      	str	r0, [r1, #16]
   3242a:	429c      	cmp	r4, r3
   3242c:	d000      	beq.n	32430 <sniprintf+0x34>
   3242e:	1e63      	subs	r3, r4, #1
   32430:	608b      	str	r3, [r1, #8]
   32432:	614b      	str	r3, [r1, #20]
   32434:	2301      	movs	r3, #1
   32436:	425b      	negs	r3, r3
   32438:	81cb      	strh	r3, [r1, #14]
   3243a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3243c:	ab21      	add	r3, sp, #132	; 0x84
   3243e:	0028      	movs	r0, r5
   32440:	9301      	str	r3, [sp, #4]
   32442:	f000 fcff 	bl	32e44 <_svfiprintf_r>
   32446:	1c43      	adds	r3, r0, #1
   32448:	da01      	bge.n	3244e <sniprintf+0x52>
   3244a:	238b      	movs	r3, #139	; 0x8b
   3244c:	602b      	str	r3, [r5, #0]
   3244e:	2c00      	cmp	r4, #0
   32450:	d0df      	beq.n	32412 <sniprintf+0x16>
   32452:	2300      	movs	r3, #0
   32454:	9a02      	ldr	r2, [sp, #8]
   32456:	7013      	strb	r3, [r2, #0]
   32458:	e7db      	b.n	32412 <sniprintf+0x16>
   3245a:	46c0      	nop			; (mov r8, r8)
   3245c:	20000110 	.word	0x20000110

00032460 <siprintf>:
   32460:	b40e      	push	{r1, r2, r3}
   32462:	b510      	push	{r4, lr}
   32464:	b09d      	sub	sp, #116	; 0x74
   32466:	a902      	add	r1, sp, #8
   32468:	9002      	str	r0, [sp, #8]
   3246a:	6108      	str	r0, [r1, #16]
   3246c:	480b      	ldr	r0, [pc, #44]	; (3249c <siprintf+0x3c>)
   3246e:	2482      	movs	r4, #130	; 0x82
   32470:	6088      	str	r0, [r1, #8]
   32472:	6148      	str	r0, [r1, #20]
   32474:	2001      	movs	r0, #1
   32476:	4240      	negs	r0, r0
   32478:	ab1f      	add	r3, sp, #124	; 0x7c
   3247a:	81c8      	strh	r0, [r1, #14]
   3247c:	4808      	ldr	r0, [pc, #32]	; (324a0 <siprintf+0x40>)
   3247e:	cb04      	ldmia	r3!, {r2}
   32480:	00a4      	lsls	r4, r4, #2
   32482:	6800      	ldr	r0, [r0, #0]
   32484:	9301      	str	r3, [sp, #4]
   32486:	818c      	strh	r4, [r1, #12]
   32488:	f000 fcdc 	bl	32e44 <_svfiprintf_r>
   3248c:	2300      	movs	r3, #0
   3248e:	9a02      	ldr	r2, [sp, #8]
   32490:	7013      	strb	r3, [r2, #0]
   32492:	b01d      	add	sp, #116	; 0x74
   32494:	bc10      	pop	{r4}
   32496:	bc08      	pop	{r3}
   32498:	b003      	add	sp, #12
   3249a:	4718      	bx	r3
   3249c:	7fffffff 	.word	0x7fffffff
   324a0:	20000110 	.word	0x20000110

000324a4 <strcasecmp>:
   324a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   324a6:	0007      	movs	r7, r0
   324a8:	000e      	movs	r6, r1
   324aa:	783c      	ldrb	r4, [r7, #0]
   324ac:	f000 fbda 	bl	32c64 <__locale_ctype_ptr>
   324b0:	2203      	movs	r2, #3
   324b2:	1900      	adds	r0, r0, r4
   324b4:	7843      	ldrb	r3, [r0, #1]
   324b6:	4013      	ands	r3, r2
   324b8:	2b01      	cmp	r3, #1
   324ba:	d100      	bne.n	324be <strcasecmp+0x1a>
   324bc:	3420      	adds	r4, #32
   324be:	7835      	ldrb	r5, [r6, #0]
   324c0:	f000 fbd0 	bl	32c64 <__locale_ctype_ptr>
   324c4:	2203      	movs	r2, #3
   324c6:	1940      	adds	r0, r0, r5
   324c8:	7843      	ldrb	r3, [r0, #1]
   324ca:	4013      	ands	r3, r2
   324cc:	2b01      	cmp	r3, #1
   324ce:	d100      	bne.n	324d2 <strcasecmp+0x2e>
   324d0:	3520      	adds	r5, #32
   324d2:	1b60      	subs	r0, r4, r5
   324d4:	d103      	bne.n	324de <strcasecmp+0x3a>
   324d6:	3701      	adds	r7, #1
   324d8:	3601      	adds	r6, #1
   324da:	2d00      	cmp	r5, #0
   324dc:	d1e5      	bne.n	324aa <strcasecmp+0x6>
   324de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000324e0 <strcat>:
   324e0:	0002      	movs	r2, r0
   324e2:	b510      	push	{r4, lr}
   324e4:	7813      	ldrb	r3, [r2, #0]
   324e6:	2b00      	cmp	r3, #0
   324e8:	d105      	bne.n	324f6 <strcat+0x16>
   324ea:	5ccc      	ldrb	r4, [r1, r3]
   324ec:	54d4      	strb	r4, [r2, r3]
   324ee:	3301      	adds	r3, #1
   324f0:	2c00      	cmp	r4, #0
   324f2:	d1fa      	bne.n	324ea <strcat+0xa>
   324f4:	bd10      	pop	{r4, pc}
   324f6:	3201      	adds	r2, #1
   324f8:	e7f4      	b.n	324e4 <strcat+0x4>

000324fa <strcmp>:
   324fa:	7802      	ldrb	r2, [r0, #0]
   324fc:	780b      	ldrb	r3, [r1, #0]
   324fe:	2a00      	cmp	r2, #0
   32500:	d003      	beq.n	3250a <strcmp+0x10>
   32502:	3001      	adds	r0, #1
   32504:	3101      	adds	r1, #1
   32506:	429a      	cmp	r2, r3
   32508:	d0f7      	beq.n	324fa <strcmp>
   3250a:	1ad0      	subs	r0, r2, r3
   3250c:	4770      	bx	lr

0003250e <strcpy>:
   3250e:	1c03      	adds	r3, r0, #0
   32510:	780a      	ldrb	r2, [r1, #0]
   32512:	3101      	adds	r1, #1
   32514:	701a      	strb	r2, [r3, #0]
   32516:	3301      	adds	r3, #1
   32518:	2a00      	cmp	r2, #0
   3251a:	d1f9      	bne.n	32510 <strcpy+0x2>
   3251c:	4770      	bx	lr
	...

00032520 <strdup>:
   32520:	b510      	push	{r4, lr}
   32522:	4b03      	ldr	r3, [pc, #12]	; (32530 <strdup+0x10>)
   32524:	0001      	movs	r1, r0
   32526:	6818      	ldr	r0, [r3, #0]
   32528:	f000 f804 	bl	32534 <_strdup_r>
   3252c:	bd10      	pop	{r4, pc}
   3252e:	46c0      	nop			; (mov r8, r8)
   32530:	20000110 	.word	0x20000110

00032534 <_strdup_r>:
   32534:	b570      	push	{r4, r5, r6, lr}
   32536:	0005      	movs	r5, r0
   32538:	0008      	movs	r0, r1
   3253a:	000e      	movs	r6, r1
   3253c:	f000 f80d 	bl	3255a <strlen>
   32540:	1c44      	adds	r4, r0, #1
   32542:	0021      	movs	r1, r4
   32544:	0028      	movs	r0, r5
   32546:	f7ff fe7f 	bl	32248 <_malloc_r>
   3254a:	1e05      	subs	r5, r0, #0
   3254c:	d003      	beq.n	32556 <_strdup_r+0x22>
   3254e:	0022      	movs	r2, r4
   32550:	0031      	movs	r1, r6
   32552:	f7ff fe0b 	bl	3216c <memcpy>
   32556:	0028      	movs	r0, r5
   32558:	bd70      	pop	{r4, r5, r6, pc}

0003255a <strlen>:
   3255a:	2300      	movs	r3, #0
   3255c:	5cc2      	ldrb	r2, [r0, r3]
   3255e:	3301      	adds	r3, #1
   32560:	2a00      	cmp	r2, #0
   32562:	d1fb      	bne.n	3255c <strlen+0x2>
   32564:	1e58      	subs	r0, r3, #1
   32566:	4770      	bx	lr

00032568 <strncmp>:
   32568:	2300      	movs	r3, #0
   3256a:	b530      	push	{r4, r5, lr}
   3256c:	429a      	cmp	r2, r3
   3256e:	d00a      	beq.n	32586 <strncmp+0x1e>
   32570:	3a01      	subs	r2, #1
   32572:	5cc4      	ldrb	r4, [r0, r3]
   32574:	5ccd      	ldrb	r5, [r1, r3]
   32576:	42ac      	cmp	r4, r5
   32578:	d104      	bne.n	32584 <strncmp+0x1c>
   3257a:	429a      	cmp	r2, r3
   3257c:	d002      	beq.n	32584 <strncmp+0x1c>
   3257e:	3301      	adds	r3, #1
   32580:	2c00      	cmp	r4, #0
   32582:	d1f6      	bne.n	32572 <strncmp+0xa>
   32584:	1b63      	subs	r3, r4, r5
   32586:	0018      	movs	r0, r3
   32588:	bd30      	pop	{r4, r5, pc}

0003258a <strncpy>:
   3258a:	b570      	push	{r4, r5, r6, lr}
   3258c:	0004      	movs	r4, r0
   3258e:	2a00      	cmp	r2, #0
   32590:	d100      	bne.n	32594 <strncpy+0xa>
   32592:	bd70      	pop	{r4, r5, r6, pc}
   32594:	780d      	ldrb	r5, [r1, #0]
   32596:	1e56      	subs	r6, r2, #1
   32598:	1c63      	adds	r3, r4, #1
   3259a:	7025      	strb	r5, [r4, #0]
   3259c:	3101      	adds	r1, #1
   3259e:	2d00      	cmp	r5, #0
   325a0:	d105      	bne.n	325ae <strncpy+0x24>
   325a2:	18a4      	adds	r4, r4, r2
   325a4:	429c      	cmp	r4, r3
   325a6:	d0f4      	beq.n	32592 <strncpy+0x8>
   325a8:	701d      	strb	r5, [r3, #0]
   325aa:	3301      	adds	r3, #1
   325ac:	e7fa      	b.n	325a4 <strncpy+0x1a>
   325ae:	001c      	movs	r4, r3
   325b0:	0032      	movs	r2, r6
   325b2:	e7ec      	b.n	3258e <strncpy+0x4>

000325b4 <strrchr>:
   325b4:	b570      	push	{r4, r5, r6, lr}
   325b6:	000d      	movs	r5, r1
   325b8:	2400      	movs	r4, #0
   325ba:	2900      	cmp	r1, #0
   325bc:	d105      	bne.n	325ca <strrchr+0x16>
   325be:	f000 ff19 	bl	333f4 <strchr>
   325c2:	0004      	movs	r4, r0
   325c4:	e006      	b.n	325d4 <strrchr+0x20>
   325c6:	001c      	movs	r4, r3
   325c8:	1c58      	adds	r0, r3, #1
   325ca:	0029      	movs	r1, r5
   325cc:	f000 ff12 	bl	333f4 <strchr>
   325d0:	1e03      	subs	r3, r0, #0
   325d2:	d1f8      	bne.n	325c6 <strrchr+0x12>
   325d4:	0020      	movs	r0, r4
   325d6:	bd70      	pop	{r4, r5, r6, pc}

000325d8 <strstr>:
   325d8:	b510      	push	{r4, lr}
   325da:	0002      	movs	r2, r0
   325dc:	7800      	ldrb	r0, [r0, #0]
   325de:	2800      	cmp	r0, #0
   325e0:	d104      	bne.n	325ec <strstr+0x14>
   325e2:	7809      	ldrb	r1, [r1, #0]
   325e4:	2900      	cmp	r1, #0
   325e6:	d00d      	beq.n	32604 <strstr+0x2c>
   325e8:	bd10      	pop	{r4, pc}
   325ea:	3201      	adds	r2, #1
   325ec:	7810      	ldrb	r0, [r2, #0]
   325ee:	2800      	cmp	r0, #0
   325f0:	d0fa      	beq.n	325e8 <strstr+0x10>
   325f2:	2300      	movs	r3, #0
   325f4:	5cc8      	ldrb	r0, [r1, r3]
   325f6:	2800      	cmp	r0, #0
   325f8:	d004      	beq.n	32604 <strstr+0x2c>
   325fa:	5cd4      	ldrb	r4, [r2, r3]
   325fc:	4284      	cmp	r4, r0
   325fe:	d1f4      	bne.n	325ea <strstr+0x12>
   32600:	3301      	adds	r3, #1
   32602:	e7f7      	b.n	325f4 <strstr+0x1c>
   32604:	0010      	movs	r0, r2
   32606:	e7ef      	b.n	325e8 <strstr+0x10>

00032608 <_strtol_l.isra.0>:
   32608:	b5f0      	push	{r4, r5, r6, r7, lr}
   3260a:	001f      	movs	r7, r3
   3260c:	000e      	movs	r6, r1
   3260e:	b087      	sub	sp, #28
   32610:	9005      	str	r0, [sp, #20]
   32612:	9103      	str	r1, [sp, #12]
   32614:	9202      	str	r2, [sp, #8]
   32616:	980c      	ldr	r0, [sp, #48]	; 0x30
   32618:	7834      	ldrb	r4, [r6, #0]
   3261a:	f000 fb20 	bl	32c5e <__locale_ctype_ptr_l>
   3261e:	2208      	movs	r2, #8
   32620:	1900      	adds	r0, r0, r4
   32622:	7843      	ldrb	r3, [r0, #1]
   32624:	1c75      	adds	r5, r6, #1
   32626:	4013      	ands	r3, r2
   32628:	d10c      	bne.n	32644 <_strtol_l.isra.0+0x3c>
   3262a:	2c2d      	cmp	r4, #45	; 0x2d
   3262c:	d10c      	bne.n	32648 <_strtol_l.isra.0+0x40>
   3262e:	3301      	adds	r3, #1
   32630:	782c      	ldrb	r4, [r5, #0]
   32632:	9301      	str	r3, [sp, #4]
   32634:	1cb5      	adds	r5, r6, #2
   32636:	2f00      	cmp	r7, #0
   32638:	d00c      	beq.n	32654 <_strtol_l.isra.0+0x4c>
   3263a:	2f10      	cmp	r7, #16
   3263c:	d114      	bne.n	32668 <_strtol_l.isra.0+0x60>
   3263e:	2c30      	cmp	r4, #48	; 0x30
   32640:	d00a      	beq.n	32658 <_strtol_l.isra.0+0x50>
   32642:	e011      	b.n	32668 <_strtol_l.isra.0+0x60>
   32644:	002e      	movs	r6, r5
   32646:	e7e6      	b.n	32616 <_strtol_l.isra.0+0xe>
   32648:	9301      	str	r3, [sp, #4]
   3264a:	2c2b      	cmp	r4, #43	; 0x2b
   3264c:	d1f3      	bne.n	32636 <_strtol_l.isra.0+0x2e>
   3264e:	782c      	ldrb	r4, [r5, #0]
   32650:	1cb5      	adds	r5, r6, #2
   32652:	e7f0      	b.n	32636 <_strtol_l.isra.0+0x2e>
   32654:	2c30      	cmp	r4, #48	; 0x30
   32656:	d12f      	bne.n	326b8 <_strtol_l.isra.0+0xb0>
   32658:	2220      	movs	r2, #32
   3265a:	782b      	ldrb	r3, [r5, #0]
   3265c:	4393      	bics	r3, r2
   3265e:	2b58      	cmp	r3, #88	; 0x58
   32660:	d151      	bne.n	32706 <_strtol_l.isra.0+0xfe>
   32662:	2710      	movs	r7, #16
   32664:	786c      	ldrb	r4, [r5, #1]
   32666:	3502      	adds	r5, #2
   32668:	9b01      	ldr	r3, [sp, #4]
   3266a:	4a29      	ldr	r2, [pc, #164]	; (32710 <_strtol_l.isra.0+0x108>)
   3266c:	0039      	movs	r1, r7
   3266e:	189e      	adds	r6, r3, r2
   32670:	0030      	movs	r0, r6
   32672:	f7fd ffbf 	bl	305f4 <__aeabi_uidivmod>
   32676:	0030      	movs	r0, r6
   32678:	9104      	str	r1, [sp, #16]
   3267a:	0039      	movs	r1, r7
   3267c:	f7fd ff34 	bl	304e8 <__udivsi3>
   32680:	2101      	movs	r1, #1
   32682:	2300      	movs	r3, #0
   32684:	4249      	negs	r1, r1
   32686:	0002      	movs	r2, r0
   32688:	468c      	mov	ip, r1
   3268a:	0018      	movs	r0, r3
   3268c:	0021      	movs	r1, r4
   3268e:	3930      	subs	r1, #48	; 0x30
   32690:	2909      	cmp	r1, #9
   32692:	d813      	bhi.n	326bc <_strtol_l.isra.0+0xb4>
   32694:	000c      	movs	r4, r1
   32696:	42a7      	cmp	r7, r4
   32698:	dd1c      	ble.n	326d4 <_strtol_l.isra.0+0xcc>
   3269a:	1c59      	adds	r1, r3, #1
   3269c:	d009      	beq.n	326b2 <_strtol_l.isra.0+0xaa>
   3269e:	4663      	mov	r3, ip
   326a0:	4282      	cmp	r2, r0
   326a2:	d306      	bcc.n	326b2 <_strtol_l.isra.0+0xaa>
   326a4:	d102      	bne.n	326ac <_strtol_l.isra.0+0xa4>
   326a6:	9904      	ldr	r1, [sp, #16]
   326a8:	42a1      	cmp	r1, r4
   326aa:	db02      	blt.n	326b2 <_strtol_l.isra.0+0xaa>
   326ac:	2301      	movs	r3, #1
   326ae:	4378      	muls	r0, r7
   326b0:	1820      	adds	r0, r4, r0
   326b2:	782c      	ldrb	r4, [r5, #0]
   326b4:	3501      	adds	r5, #1
   326b6:	e7e9      	b.n	3268c <_strtol_l.isra.0+0x84>
   326b8:	270a      	movs	r7, #10
   326ba:	e7d5      	b.n	32668 <_strtol_l.isra.0+0x60>
   326bc:	0021      	movs	r1, r4
   326be:	3941      	subs	r1, #65	; 0x41
   326c0:	2919      	cmp	r1, #25
   326c2:	d801      	bhi.n	326c8 <_strtol_l.isra.0+0xc0>
   326c4:	3c37      	subs	r4, #55	; 0x37
   326c6:	e7e6      	b.n	32696 <_strtol_l.isra.0+0x8e>
   326c8:	0021      	movs	r1, r4
   326ca:	3961      	subs	r1, #97	; 0x61
   326cc:	2919      	cmp	r1, #25
   326ce:	d801      	bhi.n	326d4 <_strtol_l.isra.0+0xcc>
   326d0:	3c57      	subs	r4, #87	; 0x57
   326d2:	e7e0      	b.n	32696 <_strtol_l.isra.0+0x8e>
   326d4:	1c5a      	adds	r2, r3, #1
   326d6:	d108      	bne.n	326ea <_strtol_l.isra.0+0xe2>
   326d8:	9a05      	ldr	r2, [sp, #20]
   326da:	3323      	adds	r3, #35	; 0x23
   326dc:	6013      	str	r3, [r2, #0]
   326de:	9b02      	ldr	r3, [sp, #8]
   326e0:	0030      	movs	r0, r6
   326e2:	2b00      	cmp	r3, #0
   326e4:	d10b      	bne.n	326fe <_strtol_l.isra.0+0xf6>
   326e6:	b007      	add	sp, #28
   326e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   326ea:	9a01      	ldr	r2, [sp, #4]
   326ec:	2a00      	cmp	r2, #0
   326ee:	d000      	beq.n	326f2 <_strtol_l.isra.0+0xea>
   326f0:	4240      	negs	r0, r0
   326f2:	9a02      	ldr	r2, [sp, #8]
   326f4:	2a00      	cmp	r2, #0
   326f6:	d0f6      	beq.n	326e6 <_strtol_l.isra.0+0xde>
   326f8:	9a03      	ldr	r2, [sp, #12]
   326fa:	2b00      	cmp	r3, #0
   326fc:	d000      	beq.n	32700 <_strtol_l.isra.0+0xf8>
   326fe:	1e6a      	subs	r2, r5, #1
   32700:	9b02      	ldr	r3, [sp, #8]
   32702:	601a      	str	r2, [r3, #0]
   32704:	e7ef      	b.n	326e6 <_strtol_l.isra.0+0xde>
   32706:	2430      	movs	r4, #48	; 0x30
   32708:	2f00      	cmp	r7, #0
   3270a:	d1ad      	bne.n	32668 <_strtol_l.isra.0+0x60>
   3270c:	3708      	adds	r7, #8
   3270e:	e7ab      	b.n	32668 <_strtol_l.isra.0+0x60>
   32710:	7fffffff 	.word	0x7fffffff

00032714 <strtol>:
   32714:	b537      	push	{r0, r1, r2, r4, r5, lr}
   32716:	0013      	movs	r3, r2
   32718:	4a06      	ldr	r2, [pc, #24]	; (32734 <strtol+0x20>)
   3271a:	0005      	movs	r5, r0
   3271c:	6810      	ldr	r0, [r2, #0]
   3271e:	6a04      	ldr	r4, [r0, #32]
   32720:	2c00      	cmp	r4, #0
   32722:	d100      	bne.n	32726 <strtol+0x12>
   32724:	4c04      	ldr	r4, [pc, #16]	; (32738 <strtol+0x24>)
   32726:	000a      	movs	r2, r1
   32728:	9400      	str	r4, [sp, #0]
   3272a:	0029      	movs	r1, r5
   3272c:	f7ff ff6c 	bl	32608 <_strtol_l.isra.0>
   32730:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   32732:	46c0      	nop			; (mov r8, r8)
   32734:	20000110 	.word	0x20000110
   32738:	20000174 	.word	0x20000174

0003273c <_vsniprintf_r>:
   3273c:	b530      	push	{r4, r5, lr}
   3273e:	0014      	movs	r4, r2
   32740:	b09b      	sub	sp, #108	; 0x6c
   32742:	0005      	movs	r5, r0
   32744:	001a      	movs	r2, r3
   32746:	2c00      	cmp	r4, #0
   32748:	da05      	bge.n	32756 <_vsniprintf_r+0x1a>
   3274a:	238b      	movs	r3, #139	; 0x8b
   3274c:	6003      	str	r3, [r0, #0]
   3274e:	2001      	movs	r0, #1
   32750:	4240      	negs	r0, r0
   32752:	b01b      	add	sp, #108	; 0x6c
   32754:	bd30      	pop	{r4, r5, pc}
   32756:	2382      	movs	r3, #130	; 0x82
   32758:	4668      	mov	r0, sp
   3275a:	009b      	lsls	r3, r3, #2
   3275c:	8183      	strh	r3, [r0, #12]
   3275e:	2300      	movs	r3, #0
   32760:	9100      	str	r1, [sp, #0]
   32762:	9104      	str	r1, [sp, #16]
   32764:	429c      	cmp	r4, r3
   32766:	d000      	beq.n	3276a <_vsniprintf_r+0x2e>
   32768:	1e63      	subs	r3, r4, #1
   3276a:	9302      	str	r3, [sp, #8]
   3276c:	9305      	str	r3, [sp, #20]
   3276e:	2301      	movs	r3, #1
   32770:	4669      	mov	r1, sp
   32772:	425b      	negs	r3, r3
   32774:	81cb      	strh	r3, [r1, #14]
   32776:	0028      	movs	r0, r5
   32778:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   3277a:	f000 fb63 	bl	32e44 <_svfiprintf_r>
   3277e:	1c43      	adds	r3, r0, #1
   32780:	da01      	bge.n	32786 <_vsniprintf_r+0x4a>
   32782:	238b      	movs	r3, #139	; 0x8b
   32784:	602b      	str	r3, [r5, #0]
   32786:	2c00      	cmp	r4, #0
   32788:	d0e3      	beq.n	32752 <_vsniprintf_r+0x16>
   3278a:	2300      	movs	r3, #0
   3278c:	9a00      	ldr	r2, [sp, #0]
   3278e:	7013      	strb	r3, [r2, #0]
   32790:	e7df      	b.n	32752 <_vsniprintf_r+0x16>
	...

00032794 <vsniprintf>:
   32794:	b507      	push	{r0, r1, r2, lr}
   32796:	9300      	str	r3, [sp, #0]
   32798:	0013      	movs	r3, r2
   3279a:	000a      	movs	r2, r1
   3279c:	0001      	movs	r1, r0
   3279e:	4802      	ldr	r0, [pc, #8]	; (327a8 <vsniprintf+0x14>)
   327a0:	6800      	ldr	r0, [r0, #0]
   327a2:	f7ff ffcb 	bl	3273c <_vsniprintf_r>
   327a6:	bd0e      	pop	{r1, r2, r3, pc}
   327a8:	20000110 	.word	0x20000110

000327ac <__swbuf_r>:
   327ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   327ae:	0005      	movs	r5, r0
   327b0:	000e      	movs	r6, r1
   327b2:	0014      	movs	r4, r2
   327b4:	2800      	cmp	r0, #0
   327b6:	d004      	beq.n	327c2 <__swbuf_r+0x16>
   327b8:	6983      	ldr	r3, [r0, #24]
   327ba:	2b00      	cmp	r3, #0
   327bc:	d101      	bne.n	327c2 <__swbuf_r+0x16>
   327be:	f000 f9b9 	bl	32b34 <__sinit>
   327c2:	4b22      	ldr	r3, [pc, #136]	; (3284c <__swbuf_r+0xa0>)
   327c4:	429c      	cmp	r4, r3
   327c6:	d12d      	bne.n	32824 <__swbuf_r+0x78>
   327c8:	686c      	ldr	r4, [r5, #4]
   327ca:	69a3      	ldr	r3, [r4, #24]
   327cc:	60a3      	str	r3, [r4, #8]
   327ce:	89a3      	ldrh	r3, [r4, #12]
   327d0:	071b      	lsls	r3, r3, #28
   327d2:	d531      	bpl.n	32838 <__swbuf_r+0x8c>
   327d4:	6923      	ldr	r3, [r4, #16]
   327d6:	2b00      	cmp	r3, #0
   327d8:	d02e      	beq.n	32838 <__swbuf_r+0x8c>
   327da:	6823      	ldr	r3, [r4, #0]
   327dc:	6922      	ldr	r2, [r4, #16]
   327de:	b2f7      	uxtb	r7, r6
   327e0:	1a98      	subs	r0, r3, r2
   327e2:	6963      	ldr	r3, [r4, #20]
   327e4:	b2f6      	uxtb	r6, r6
   327e6:	4298      	cmp	r0, r3
   327e8:	db05      	blt.n	327f6 <__swbuf_r+0x4a>
   327ea:	0021      	movs	r1, r4
   327ec:	0028      	movs	r0, r5
   327ee:	f000 f933 	bl	32a58 <_fflush_r>
   327f2:	2800      	cmp	r0, #0
   327f4:	d126      	bne.n	32844 <__swbuf_r+0x98>
   327f6:	68a3      	ldr	r3, [r4, #8]
   327f8:	3001      	adds	r0, #1
   327fa:	3b01      	subs	r3, #1
   327fc:	60a3      	str	r3, [r4, #8]
   327fe:	6823      	ldr	r3, [r4, #0]
   32800:	1c5a      	adds	r2, r3, #1
   32802:	6022      	str	r2, [r4, #0]
   32804:	701f      	strb	r7, [r3, #0]
   32806:	6963      	ldr	r3, [r4, #20]
   32808:	4298      	cmp	r0, r3
   3280a:	d004      	beq.n	32816 <__swbuf_r+0x6a>
   3280c:	89a3      	ldrh	r3, [r4, #12]
   3280e:	07db      	lsls	r3, r3, #31
   32810:	d51a      	bpl.n	32848 <__swbuf_r+0x9c>
   32812:	2e0a      	cmp	r6, #10
   32814:	d118      	bne.n	32848 <__swbuf_r+0x9c>
   32816:	0021      	movs	r1, r4
   32818:	0028      	movs	r0, r5
   3281a:	f000 f91d 	bl	32a58 <_fflush_r>
   3281e:	2800      	cmp	r0, #0
   32820:	d012      	beq.n	32848 <__swbuf_r+0x9c>
   32822:	e00f      	b.n	32844 <__swbuf_r+0x98>
   32824:	4b0a      	ldr	r3, [pc, #40]	; (32850 <__swbuf_r+0xa4>)
   32826:	429c      	cmp	r4, r3
   32828:	d101      	bne.n	3282e <__swbuf_r+0x82>
   3282a:	68ac      	ldr	r4, [r5, #8]
   3282c:	e7cd      	b.n	327ca <__swbuf_r+0x1e>
   3282e:	4b09      	ldr	r3, [pc, #36]	; (32854 <__swbuf_r+0xa8>)
   32830:	429c      	cmp	r4, r3
   32832:	d1ca      	bne.n	327ca <__swbuf_r+0x1e>
   32834:	68ec      	ldr	r4, [r5, #12]
   32836:	e7c8      	b.n	327ca <__swbuf_r+0x1e>
   32838:	0021      	movs	r1, r4
   3283a:	0028      	movs	r0, r5
   3283c:	f000 f80c 	bl	32858 <__swsetup_r>
   32840:	2800      	cmp	r0, #0
   32842:	d0ca      	beq.n	327da <__swbuf_r+0x2e>
   32844:	2601      	movs	r6, #1
   32846:	4276      	negs	r6, r6
   32848:	0030      	movs	r0, r6
   3284a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3284c:	00037480 	.word	0x00037480
   32850:	000374a0 	.word	0x000374a0
   32854:	00037460 	.word	0x00037460

00032858 <__swsetup_r>:
   32858:	4b36      	ldr	r3, [pc, #216]	; (32934 <__swsetup_r+0xdc>)
   3285a:	b570      	push	{r4, r5, r6, lr}
   3285c:	681d      	ldr	r5, [r3, #0]
   3285e:	0006      	movs	r6, r0
   32860:	000c      	movs	r4, r1
   32862:	2d00      	cmp	r5, #0
   32864:	d005      	beq.n	32872 <__swsetup_r+0x1a>
   32866:	69ab      	ldr	r3, [r5, #24]
   32868:	2b00      	cmp	r3, #0
   3286a:	d102      	bne.n	32872 <__swsetup_r+0x1a>
   3286c:	0028      	movs	r0, r5
   3286e:	f000 f961 	bl	32b34 <__sinit>
   32872:	4b31      	ldr	r3, [pc, #196]	; (32938 <__swsetup_r+0xe0>)
   32874:	429c      	cmp	r4, r3
   32876:	d10f      	bne.n	32898 <__swsetup_r+0x40>
   32878:	686c      	ldr	r4, [r5, #4]
   3287a:	230c      	movs	r3, #12
   3287c:	5ee2      	ldrsh	r2, [r4, r3]
   3287e:	b293      	uxth	r3, r2
   32880:	0719      	lsls	r1, r3, #28
   32882:	d42d      	bmi.n	328e0 <__swsetup_r+0x88>
   32884:	06d9      	lsls	r1, r3, #27
   32886:	d411      	bmi.n	328ac <__swsetup_r+0x54>
   32888:	2309      	movs	r3, #9
   3288a:	2001      	movs	r0, #1
   3288c:	6033      	str	r3, [r6, #0]
   3288e:	3337      	adds	r3, #55	; 0x37
   32890:	4313      	orrs	r3, r2
   32892:	81a3      	strh	r3, [r4, #12]
   32894:	4240      	negs	r0, r0
   32896:	bd70      	pop	{r4, r5, r6, pc}
   32898:	4b28      	ldr	r3, [pc, #160]	; (3293c <__swsetup_r+0xe4>)
   3289a:	429c      	cmp	r4, r3
   3289c:	d101      	bne.n	328a2 <__swsetup_r+0x4a>
   3289e:	68ac      	ldr	r4, [r5, #8]
   328a0:	e7eb      	b.n	3287a <__swsetup_r+0x22>
   328a2:	4b27      	ldr	r3, [pc, #156]	; (32940 <__swsetup_r+0xe8>)
   328a4:	429c      	cmp	r4, r3
   328a6:	d1e8      	bne.n	3287a <__swsetup_r+0x22>
   328a8:	68ec      	ldr	r4, [r5, #12]
   328aa:	e7e6      	b.n	3287a <__swsetup_r+0x22>
   328ac:	075b      	lsls	r3, r3, #29
   328ae:	d513      	bpl.n	328d8 <__swsetup_r+0x80>
   328b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   328b2:	2900      	cmp	r1, #0
   328b4:	d008      	beq.n	328c8 <__swsetup_r+0x70>
   328b6:	0023      	movs	r3, r4
   328b8:	3344      	adds	r3, #68	; 0x44
   328ba:	4299      	cmp	r1, r3
   328bc:	d002      	beq.n	328c4 <__swsetup_r+0x6c>
   328be:	0030      	movs	r0, r6
   328c0:	f7ff fc78 	bl	321b4 <_free_r>
   328c4:	2300      	movs	r3, #0
   328c6:	6363      	str	r3, [r4, #52]	; 0x34
   328c8:	2224      	movs	r2, #36	; 0x24
   328ca:	89a3      	ldrh	r3, [r4, #12]
   328cc:	4393      	bics	r3, r2
   328ce:	81a3      	strh	r3, [r4, #12]
   328d0:	2300      	movs	r3, #0
   328d2:	6063      	str	r3, [r4, #4]
   328d4:	6923      	ldr	r3, [r4, #16]
   328d6:	6023      	str	r3, [r4, #0]
   328d8:	2308      	movs	r3, #8
   328da:	89a2      	ldrh	r2, [r4, #12]
   328dc:	4313      	orrs	r3, r2
   328de:	81a3      	strh	r3, [r4, #12]
   328e0:	6923      	ldr	r3, [r4, #16]
   328e2:	2b00      	cmp	r3, #0
   328e4:	d10b      	bne.n	328fe <__swsetup_r+0xa6>
   328e6:	21a0      	movs	r1, #160	; 0xa0
   328e8:	2280      	movs	r2, #128	; 0x80
   328ea:	89a3      	ldrh	r3, [r4, #12]
   328ec:	0089      	lsls	r1, r1, #2
   328ee:	0092      	lsls	r2, r2, #2
   328f0:	400b      	ands	r3, r1
   328f2:	4293      	cmp	r3, r2
   328f4:	d003      	beq.n	328fe <__swsetup_r+0xa6>
   328f6:	0021      	movs	r1, r4
   328f8:	0030      	movs	r0, r6
   328fa:	f000 f9e9 	bl	32cd0 <__smakebuf_r>
   328fe:	2301      	movs	r3, #1
   32900:	89a2      	ldrh	r2, [r4, #12]
   32902:	4013      	ands	r3, r2
   32904:	d011      	beq.n	3292a <__swsetup_r+0xd2>
   32906:	2300      	movs	r3, #0
   32908:	60a3      	str	r3, [r4, #8]
   3290a:	6963      	ldr	r3, [r4, #20]
   3290c:	425b      	negs	r3, r3
   3290e:	61a3      	str	r3, [r4, #24]
   32910:	2000      	movs	r0, #0
   32912:	6923      	ldr	r3, [r4, #16]
   32914:	4283      	cmp	r3, r0
   32916:	d1be      	bne.n	32896 <__swsetup_r+0x3e>
   32918:	230c      	movs	r3, #12
   3291a:	5ee2      	ldrsh	r2, [r4, r3]
   3291c:	0613      	lsls	r3, r2, #24
   3291e:	d5ba      	bpl.n	32896 <__swsetup_r+0x3e>
   32920:	2340      	movs	r3, #64	; 0x40
   32922:	4313      	orrs	r3, r2
   32924:	81a3      	strh	r3, [r4, #12]
   32926:	3801      	subs	r0, #1
   32928:	e7b5      	b.n	32896 <__swsetup_r+0x3e>
   3292a:	0792      	lsls	r2, r2, #30
   3292c:	d400      	bmi.n	32930 <__swsetup_r+0xd8>
   3292e:	6963      	ldr	r3, [r4, #20]
   32930:	60a3      	str	r3, [r4, #8]
   32932:	e7ed      	b.n	32910 <__swsetup_r+0xb8>
   32934:	20000110 	.word	0x20000110
   32938:	00037480 	.word	0x00037480
   3293c:	000374a0 	.word	0x000374a0
   32940:	00037460 	.word	0x00037460

00032944 <__sflush_r>:
   32944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   32946:	898a      	ldrh	r2, [r1, #12]
   32948:	0005      	movs	r5, r0
   3294a:	000c      	movs	r4, r1
   3294c:	0713      	lsls	r3, r2, #28
   3294e:	d460      	bmi.n	32a12 <__sflush_r+0xce>
   32950:	684b      	ldr	r3, [r1, #4]
   32952:	2b00      	cmp	r3, #0
   32954:	dc04      	bgt.n	32960 <__sflush_r+0x1c>
   32956:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   32958:	2b00      	cmp	r3, #0
   3295a:	dc01      	bgt.n	32960 <__sflush_r+0x1c>
   3295c:	2000      	movs	r0, #0
   3295e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   32960:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   32962:	2f00      	cmp	r7, #0
   32964:	d0fa      	beq.n	3295c <__sflush_r+0x18>
   32966:	2300      	movs	r3, #0
   32968:	682e      	ldr	r6, [r5, #0]
   3296a:	602b      	str	r3, [r5, #0]
   3296c:	2380      	movs	r3, #128	; 0x80
   3296e:	015b      	lsls	r3, r3, #5
   32970:	401a      	ands	r2, r3
   32972:	d034      	beq.n	329de <__sflush_r+0x9a>
   32974:	6d60      	ldr	r0, [r4, #84]	; 0x54
   32976:	89a3      	ldrh	r3, [r4, #12]
   32978:	075b      	lsls	r3, r3, #29
   3297a:	d506      	bpl.n	3298a <__sflush_r+0x46>
   3297c:	6863      	ldr	r3, [r4, #4]
   3297e:	1ac0      	subs	r0, r0, r3
   32980:	6b63      	ldr	r3, [r4, #52]	; 0x34
   32982:	2b00      	cmp	r3, #0
   32984:	d001      	beq.n	3298a <__sflush_r+0x46>
   32986:	6c23      	ldr	r3, [r4, #64]	; 0x40
   32988:	1ac0      	subs	r0, r0, r3
   3298a:	0002      	movs	r2, r0
   3298c:	6a21      	ldr	r1, [r4, #32]
   3298e:	2300      	movs	r3, #0
   32990:	0028      	movs	r0, r5
   32992:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   32994:	47b8      	blx	r7
   32996:	89a1      	ldrh	r1, [r4, #12]
   32998:	1c43      	adds	r3, r0, #1
   3299a:	d106      	bne.n	329aa <__sflush_r+0x66>
   3299c:	682b      	ldr	r3, [r5, #0]
   3299e:	2b1d      	cmp	r3, #29
   329a0:	d831      	bhi.n	32a06 <__sflush_r+0xc2>
   329a2:	4a2c      	ldr	r2, [pc, #176]	; (32a54 <__sflush_r+0x110>)
   329a4:	40da      	lsrs	r2, r3
   329a6:	07d3      	lsls	r3, r2, #31
   329a8:	d52d      	bpl.n	32a06 <__sflush_r+0xc2>
   329aa:	2300      	movs	r3, #0
   329ac:	6063      	str	r3, [r4, #4]
   329ae:	6923      	ldr	r3, [r4, #16]
   329b0:	6023      	str	r3, [r4, #0]
   329b2:	04cb      	lsls	r3, r1, #19
   329b4:	d505      	bpl.n	329c2 <__sflush_r+0x7e>
   329b6:	1c43      	adds	r3, r0, #1
   329b8:	d102      	bne.n	329c0 <__sflush_r+0x7c>
   329ba:	682b      	ldr	r3, [r5, #0]
   329bc:	2b00      	cmp	r3, #0
   329be:	d100      	bne.n	329c2 <__sflush_r+0x7e>
   329c0:	6560      	str	r0, [r4, #84]	; 0x54
   329c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   329c4:	602e      	str	r6, [r5, #0]
   329c6:	2900      	cmp	r1, #0
   329c8:	d0c8      	beq.n	3295c <__sflush_r+0x18>
   329ca:	0023      	movs	r3, r4
   329cc:	3344      	adds	r3, #68	; 0x44
   329ce:	4299      	cmp	r1, r3
   329d0:	d002      	beq.n	329d8 <__sflush_r+0x94>
   329d2:	0028      	movs	r0, r5
   329d4:	f7ff fbee 	bl	321b4 <_free_r>
   329d8:	2000      	movs	r0, #0
   329da:	6360      	str	r0, [r4, #52]	; 0x34
   329dc:	e7bf      	b.n	3295e <__sflush_r+0x1a>
   329de:	2301      	movs	r3, #1
   329e0:	6a21      	ldr	r1, [r4, #32]
   329e2:	0028      	movs	r0, r5
   329e4:	47b8      	blx	r7
   329e6:	1c43      	adds	r3, r0, #1
   329e8:	d1c5      	bne.n	32976 <__sflush_r+0x32>
   329ea:	682b      	ldr	r3, [r5, #0]
   329ec:	2b00      	cmp	r3, #0
   329ee:	d0c2      	beq.n	32976 <__sflush_r+0x32>
   329f0:	2b1d      	cmp	r3, #29
   329f2:	d001      	beq.n	329f8 <__sflush_r+0xb4>
   329f4:	2b16      	cmp	r3, #22
   329f6:	d101      	bne.n	329fc <__sflush_r+0xb8>
   329f8:	602e      	str	r6, [r5, #0]
   329fa:	e7af      	b.n	3295c <__sflush_r+0x18>
   329fc:	2340      	movs	r3, #64	; 0x40
   329fe:	89a2      	ldrh	r2, [r4, #12]
   32a00:	4313      	orrs	r3, r2
   32a02:	81a3      	strh	r3, [r4, #12]
   32a04:	e7ab      	b.n	3295e <__sflush_r+0x1a>
   32a06:	2340      	movs	r3, #64	; 0x40
   32a08:	430b      	orrs	r3, r1
   32a0a:	2001      	movs	r0, #1
   32a0c:	81a3      	strh	r3, [r4, #12]
   32a0e:	4240      	negs	r0, r0
   32a10:	e7a5      	b.n	3295e <__sflush_r+0x1a>
   32a12:	690f      	ldr	r7, [r1, #16]
   32a14:	2f00      	cmp	r7, #0
   32a16:	d0a1      	beq.n	3295c <__sflush_r+0x18>
   32a18:	680b      	ldr	r3, [r1, #0]
   32a1a:	600f      	str	r7, [r1, #0]
   32a1c:	1bdb      	subs	r3, r3, r7
   32a1e:	9301      	str	r3, [sp, #4]
   32a20:	2300      	movs	r3, #0
   32a22:	0792      	lsls	r2, r2, #30
   32a24:	d100      	bne.n	32a28 <__sflush_r+0xe4>
   32a26:	694b      	ldr	r3, [r1, #20]
   32a28:	60a3      	str	r3, [r4, #8]
   32a2a:	9b01      	ldr	r3, [sp, #4]
   32a2c:	2b00      	cmp	r3, #0
   32a2e:	dc00      	bgt.n	32a32 <__sflush_r+0xee>
   32a30:	e794      	b.n	3295c <__sflush_r+0x18>
   32a32:	9b01      	ldr	r3, [sp, #4]
   32a34:	003a      	movs	r2, r7
   32a36:	6a21      	ldr	r1, [r4, #32]
   32a38:	0028      	movs	r0, r5
   32a3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   32a3c:	47b0      	blx	r6
   32a3e:	2800      	cmp	r0, #0
   32a40:	dc03      	bgt.n	32a4a <__sflush_r+0x106>
   32a42:	2340      	movs	r3, #64	; 0x40
   32a44:	89a2      	ldrh	r2, [r4, #12]
   32a46:	4313      	orrs	r3, r2
   32a48:	e7df      	b.n	32a0a <__sflush_r+0xc6>
   32a4a:	9b01      	ldr	r3, [sp, #4]
   32a4c:	183f      	adds	r7, r7, r0
   32a4e:	1a1b      	subs	r3, r3, r0
   32a50:	9301      	str	r3, [sp, #4]
   32a52:	e7ea      	b.n	32a2a <__sflush_r+0xe6>
   32a54:	20400001 	.word	0x20400001

00032a58 <_fflush_r>:
   32a58:	690b      	ldr	r3, [r1, #16]
   32a5a:	b570      	push	{r4, r5, r6, lr}
   32a5c:	0005      	movs	r5, r0
   32a5e:	000c      	movs	r4, r1
   32a60:	2b00      	cmp	r3, #0
   32a62:	d101      	bne.n	32a68 <_fflush_r+0x10>
   32a64:	2000      	movs	r0, #0
   32a66:	bd70      	pop	{r4, r5, r6, pc}
   32a68:	2800      	cmp	r0, #0
   32a6a:	d004      	beq.n	32a76 <_fflush_r+0x1e>
   32a6c:	6983      	ldr	r3, [r0, #24]
   32a6e:	2b00      	cmp	r3, #0
   32a70:	d101      	bne.n	32a76 <_fflush_r+0x1e>
   32a72:	f000 f85f 	bl	32b34 <__sinit>
   32a76:	4b0b      	ldr	r3, [pc, #44]	; (32aa4 <_fflush_r+0x4c>)
   32a78:	429c      	cmp	r4, r3
   32a7a:	d109      	bne.n	32a90 <_fflush_r+0x38>
   32a7c:	686c      	ldr	r4, [r5, #4]
   32a7e:	220c      	movs	r2, #12
   32a80:	5ea3      	ldrsh	r3, [r4, r2]
   32a82:	2b00      	cmp	r3, #0
   32a84:	d0ee      	beq.n	32a64 <_fflush_r+0xc>
   32a86:	0021      	movs	r1, r4
   32a88:	0028      	movs	r0, r5
   32a8a:	f7ff ff5b 	bl	32944 <__sflush_r>
   32a8e:	e7ea      	b.n	32a66 <_fflush_r+0xe>
   32a90:	4b05      	ldr	r3, [pc, #20]	; (32aa8 <_fflush_r+0x50>)
   32a92:	429c      	cmp	r4, r3
   32a94:	d101      	bne.n	32a9a <_fflush_r+0x42>
   32a96:	68ac      	ldr	r4, [r5, #8]
   32a98:	e7f1      	b.n	32a7e <_fflush_r+0x26>
   32a9a:	4b04      	ldr	r3, [pc, #16]	; (32aac <_fflush_r+0x54>)
   32a9c:	429c      	cmp	r4, r3
   32a9e:	d1ee      	bne.n	32a7e <_fflush_r+0x26>
   32aa0:	68ec      	ldr	r4, [r5, #12]
   32aa2:	e7ec      	b.n	32a7e <_fflush_r+0x26>
   32aa4:	00037480 	.word	0x00037480
   32aa8:	000374a0 	.word	0x000374a0
   32aac:	00037460 	.word	0x00037460

00032ab0 <_cleanup_r>:
   32ab0:	b510      	push	{r4, lr}
   32ab2:	4902      	ldr	r1, [pc, #8]	; (32abc <_cleanup_r+0xc>)
   32ab4:	f000 f8b2 	bl	32c1c <_fwalk_reent>
   32ab8:	bd10      	pop	{r4, pc}
   32aba:	46c0      	nop			; (mov r8, r8)
   32abc:	00032a59 	.word	0x00032a59

00032ac0 <std.isra.0>:
   32ac0:	2300      	movs	r3, #0
   32ac2:	b510      	push	{r4, lr}
   32ac4:	0004      	movs	r4, r0
   32ac6:	6003      	str	r3, [r0, #0]
   32ac8:	6043      	str	r3, [r0, #4]
   32aca:	6083      	str	r3, [r0, #8]
   32acc:	8181      	strh	r1, [r0, #12]
   32ace:	6643      	str	r3, [r0, #100]	; 0x64
   32ad0:	81c2      	strh	r2, [r0, #14]
   32ad2:	6103      	str	r3, [r0, #16]
   32ad4:	6143      	str	r3, [r0, #20]
   32ad6:	6183      	str	r3, [r0, #24]
   32ad8:	0019      	movs	r1, r3
   32ada:	2208      	movs	r2, #8
   32adc:	305c      	adds	r0, #92	; 0x5c
   32ade:	f7ff fb60 	bl	321a2 <memset>
   32ae2:	4b05      	ldr	r3, [pc, #20]	; (32af8 <std.isra.0+0x38>)
   32ae4:	6224      	str	r4, [r4, #32]
   32ae6:	6263      	str	r3, [r4, #36]	; 0x24
   32ae8:	4b04      	ldr	r3, [pc, #16]	; (32afc <std.isra.0+0x3c>)
   32aea:	62a3      	str	r3, [r4, #40]	; 0x28
   32aec:	4b04      	ldr	r3, [pc, #16]	; (32b00 <std.isra.0+0x40>)
   32aee:	62e3      	str	r3, [r4, #44]	; 0x2c
   32af0:	4b04      	ldr	r3, [pc, #16]	; (32b04 <std.isra.0+0x44>)
   32af2:	6323      	str	r3, [r4, #48]	; 0x30
   32af4:	bd10      	pop	{r4, pc}
   32af6:	46c0      	nop			; (mov r8, r8)
   32af8:	0003335d 	.word	0x0003335d
   32afc:	00033385 	.word	0x00033385
   32b00:	000333bd 	.word	0x000333bd
   32b04:	000333e9 	.word	0x000333e9

00032b08 <__sfmoreglue>:
   32b08:	b570      	push	{r4, r5, r6, lr}
   32b0a:	2568      	movs	r5, #104	; 0x68
   32b0c:	1e4a      	subs	r2, r1, #1
   32b0e:	4355      	muls	r5, r2
   32b10:	000e      	movs	r6, r1
   32b12:	0029      	movs	r1, r5
   32b14:	3174      	adds	r1, #116	; 0x74
   32b16:	f7ff fb97 	bl	32248 <_malloc_r>
   32b1a:	1e04      	subs	r4, r0, #0
   32b1c:	d008      	beq.n	32b30 <__sfmoreglue+0x28>
   32b1e:	2100      	movs	r1, #0
   32b20:	002a      	movs	r2, r5
   32b22:	6001      	str	r1, [r0, #0]
   32b24:	6046      	str	r6, [r0, #4]
   32b26:	300c      	adds	r0, #12
   32b28:	60a0      	str	r0, [r4, #8]
   32b2a:	3268      	adds	r2, #104	; 0x68
   32b2c:	f7ff fb39 	bl	321a2 <memset>
   32b30:	0020      	movs	r0, r4
   32b32:	bd70      	pop	{r4, r5, r6, pc}

00032b34 <__sinit>:
   32b34:	6983      	ldr	r3, [r0, #24]
   32b36:	b513      	push	{r0, r1, r4, lr}
   32b38:	0004      	movs	r4, r0
   32b3a:	2b00      	cmp	r3, #0
   32b3c:	d128      	bne.n	32b90 <__sinit+0x5c>
   32b3e:	6483      	str	r3, [r0, #72]	; 0x48
   32b40:	64c3      	str	r3, [r0, #76]	; 0x4c
   32b42:	6503      	str	r3, [r0, #80]	; 0x50
   32b44:	4b13      	ldr	r3, [pc, #76]	; (32b94 <__sinit+0x60>)
   32b46:	4a14      	ldr	r2, [pc, #80]	; (32b98 <__sinit+0x64>)
   32b48:	681b      	ldr	r3, [r3, #0]
   32b4a:	6282      	str	r2, [r0, #40]	; 0x28
   32b4c:	9301      	str	r3, [sp, #4]
   32b4e:	4298      	cmp	r0, r3
   32b50:	d101      	bne.n	32b56 <__sinit+0x22>
   32b52:	2301      	movs	r3, #1
   32b54:	6183      	str	r3, [r0, #24]
   32b56:	0020      	movs	r0, r4
   32b58:	f000 f820 	bl	32b9c <__sfp>
   32b5c:	6060      	str	r0, [r4, #4]
   32b5e:	0020      	movs	r0, r4
   32b60:	f000 f81c 	bl	32b9c <__sfp>
   32b64:	60a0      	str	r0, [r4, #8]
   32b66:	0020      	movs	r0, r4
   32b68:	f000 f818 	bl	32b9c <__sfp>
   32b6c:	2200      	movs	r2, #0
   32b6e:	60e0      	str	r0, [r4, #12]
   32b70:	2104      	movs	r1, #4
   32b72:	6860      	ldr	r0, [r4, #4]
   32b74:	f7ff ffa4 	bl	32ac0 <std.isra.0>
   32b78:	2201      	movs	r2, #1
   32b7a:	2109      	movs	r1, #9
   32b7c:	68a0      	ldr	r0, [r4, #8]
   32b7e:	f7ff ff9f 	bl	32ac0 <std.isra.0>
   32b82:	2202      	movs	r2, #2
   32b84:	2112      	movs	r1, #18
   32b86:	68e0      	ldr	r0, [r4, #12]
   32b88:	f7ff ff9a 	bl	32ac0 <std.isra.0>
   32b8c:	2301      	movs	r3, #1
   32b8e:	61a3      	str	r3, [r4, #24]
   32b90:	bd13      	pop	{r0, r1, r4, pc}
   32b92:	46c0      	nop			; (mov r8, r8)
   32b94:	0003745c 	.word	0x0003745c
   32b98:	00032ab1 	.word	0x00032ab1

00032b9c <__sfp>:
   32b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32b9e:	4b1e      	ldr	r3, [pc, #120]	; (32c18 <__sfp+0x7c>)
   32ba0:	0007      	movs	r7, r0
   32ba2:	681e      	ldr	r6, [r3, #0]
   32ba4:	69b3      	ldr	r3, [r6, #24]
   32ba6:	2b00      	cmp	r3, #0
   32ba8:	d102      	bne.n	32bb0 <__sfp+0x14>
   32baa:	0030      	movs	r0, r6
   32bac:	f7ff ffc2 	bl	32b34 <__sinit>
   32bb0:	3648      	adds	r6, #72	; 0x48
   32bb2:	68b4      	ldr	r4, [r6, #8]
   32bb4:	6873      	ldr	r3, [r6, #4]
   32bb6:	3b01      	subs	r3, #1
   32bb8:	d504      	bpl.n	32bc4 <__sfp+0x28>
   32bba:	6833      	ldr	r3, [r6, #0]
   32bbc:	2b00      	cmp	r3, #0
   32bbe:	d007      	beq.n	32bd0 <__sfp+0x34>
   32bc0:	6836      	ldr	r6, [r6, #0]
   32bc2:	e7f6      	b.n	32bb2 <__sfp+0x16>
   32bc4:	220c      	movs	r2, #12
   32bc6:	5ea5      	ldrsh	r5, [r4, r2]
   32bc8:	2d00      	cmp	r5, #0
   32bca:	d00d      	beq.n	32be8 <__sfp+0x4c>
   32bcc:	3468      	adds	r4, #104	; 0x68
   32bce:	e7f2      	b.n	32bb6 <__sfp+0x1a>
   32bd0:	2104      	movs	r1, #4
   32bd2:	0038      	movs	r0, r7
   32bd4:	f7ff ff98 	bl	32b08 <__sfmoreglue>
   32bd8:	6030      	str	r0, [r6, #0]
   32bda:	2800      	cmp	r0, #0
   32bdc:	d1f0      	bne.n	32bc0 <__sfp+0x24>
   32bde:	230c      	movs	r3, #12
   32be0:	0004      	movs	r4, r0
   32be2:	603b      	str	r3, [r7, #0]
   32be4:	0020      	movs	r0, r4
   32be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32be8:	2301      	movs	r3, #1
   32bea:	0020      	movs	r0, r4
   32bec:	425b      	negs	r3, r3
   32bee:	81e3      	strh	r3, [r4, #14]
   32bf0:	3302      	adds	r3, #2
   32bf2:	81a3      	strh	r3, [r4, #12]
   32bf4:	6665      	str	r5, [r4, #100]	; 0x64
   32bf6:	6025      	str	r5, [r4, #0]
   32bf8:	60a5      	str	r5, [r4, #8]
   32bfa:	6065      	str	r5, [r4, #4]
   32bfc:	6125      	str	r5, [r4, #16]
   32bfe:	6165      	str	r5, [r4, #20]
   32c00:	61a5      	str	r5, [r4, #24]
   32c02:	2208      	movs	r2, #8
   32c04:	0029      	movs	r1, r5
   32c06:	305c      	adds	r0, #92	; 0x5c
   32c08:	f7ff facb 	bl	321a2 <memset>
   32c0c:	6365      	str	r5, [r4, #52]	; 0x34
   32c0e:	63a5      	str	r5, [r4, #56]	; 0x38
   32c10:	64a5      	str	r5, [r4, #72]	; 0x48
   32c12:	64e5      	str	r5, [r4, #76]	; 0x4c
   32c14:	e7e6      	b.n	32be4 <__sfp+0x48>
   32c16:	46c0      	nop			; (mov r8, r8)
   32c18:	0003745c 	.word	0x0003745c

00032c1c <_fwalk_reent>:
   32c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   32c1e:	0004      	movs	r4, r0
   32c20:	0007      	movs	r7, r0
   32c22:	2600      	movs	r6, #0
   32c24:	9101      	str	r1, [sp, #4]
   32c26:	3448      	adds	r4, #72	; 0x48
   32c28:	2c00      	cmp	r4, #0
   32c2a:	d101      	bne.n	32c30 <_fwalk_reent+0x14>
   32c2c:	0030      	movs	r0, r6
   32c2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   32c30:	6863      	ldr	r3, [r4, #4]
   32c32:	68a5      	ldr	r5, [r4, #8]
   32c34:	9300      	str	r3, [sp, #0]
   32c36:	9b00      	ldr	r3, [sp, #0]
   32c38:	3b01      	subs	r3, #1
   32c3a:	9300      	str	r3, [sp, #0]
   32c3c:	d501      	bpl.n	32c42 <_fwalk_reent+0x26>
   32c3e:	6824      	ldr	r4, [r4, #0]
   32c40:	e7f2      	b.n	32c28 <_fwalk_reent+0xc>
   32c42:	89ab      	ldrh	r3, [r5, #12]
   32c44:	2b01      	cmp	r3, #1
   32c46:	d908      	bls.n	32c5a <_fwalk_reent+0x3e>
   32c48:	220e      	movs	r2, #14
   32c4a:	5eab      	ldrsh	r3, [r5, r2]
   32c4c:	3301      	adds	r3, #1
   32c4e:	d004      	beq.n	32c5a <_fwalk_reent+0x3e>
   32c50:	0029      	movs	r1, r5
   32c52:	0038      	movs	r0, r7
   32c54:	9b01      	ldr	r3, [sp, #4]
   32c56:	4798      	blx	r3
   32c58:	4306      	orrs	r6, r0
   32c5a:	3568      	adds	r5, #104	; 0x68
   32c5c:	e7eb      	b.n	32c36 <_fwalk_reent+0x1a>

00032c5e <__locale_ctype_ptr_l>:
   32c5e:	30ec      	adds	r0, #236	; 0xec
   32c60:	6800      	ldr	r0, [r0, #0]
   32c62:	4770      	bx	lr

00032c64 <__locale_ctype_ptr>:
   32c64:	4b04      	ldr	r3, [pc, #16]	; (32c78 <__locale_ctype_ptr+0x14>)
   32c66:	681b      	ldr	r3, [r3, #0]
   32c68:	6a1b      	ldr	r3, [r3, #32]
   32c6a:	2b00      	cmp	r3, #0
   32c6c:	d100      	bne.n	32c70 <__locale_ctype_ptr+0xc>
   32c6e:	4b03      	ldr	r3, [pc, #12]	; (32c7c <__locale_ctype_ptr+0x18>)
   32c70:	33ec      	adds	r3, #236	; 0xec
   32c72:	6818      	ldr	r0, [r3, #0]
   32c74:	4770      	bx	lr
   32c76:	46c0      	nop			; (mov r8, r8)
   32c78:	20000110 	.word	0x20000110
   32c7c:	20000174 	.word	0x20000174

00032c80 <__swhatbuf_r>:
   32c80:	b570      	push	{r4, r5, r6, lr}
   32c82:	000e      	movs	r6, r1
   32c84:	001d      	movs	r5, r3
   32c86:	230e      	movs	r3, #14
   32c88:	5ec9      	ldrsh	r1, [r1, r3]
   32c8a:	b090      	sub	sp, #64	; 0x40
   32c8c:	0014      	movs	r4, r2
   32c8e:	2900      	cmp	r1, #0
   32c90:	da07      	bge.n	32ca2 <__swhatbuf_r+0x22>
   32c92:	2300      	movs	r3, #0
   32c94:	602b      	str	r3, [r5, #0]
   32c96:	89b3      	ldrh	r3, [r6, #12]
   32c98:	061b      	lsls	r3, r3, #24
   32c9a:	d411      	bmi.n	32cc0 <__swhatbuf_r+0x40>
   32c9c:	2380      	movs	r3, #128	; 0x80
   32c9e:	00db      	lsls	r3, r3, #3
   32ca0:	e00f      	b.n	32cc2 <__swhatbuf_r+0x42>
   32ca2:	aa01      	add	r2, sp, #4
   32ca4:	f000 fbe6 	bl	33474 <_fstat_r>
   32ca8:	2800      	cmp	r0, #0
   32caa:	dbf2      	blt.n	32c92 <__swhatbuf_r+0x12>
   32cac:	22f0      	movs	r2, #240	; 0xf0
   32cae:	9b02      	ldr	r3, [sp, #8]
   32cb0:	0212      	lsls	r2, r2, #8
   32cb2:	4013      	ands	r3, r2
   32cb4:	4a05      	ldr	r2, [pc, #20]	; (32ccc <__swhatbuf_r+0x4c>)
   32cb6:	189b      	adds	r3, r3, r2
   32cb8:	425a      	negs	r2, r3
   32cba:	4153      	adcs	r3, r2
   32cbc:	602b      	str	r3, [r5, #0]
   32cbe:	e7ed      	b.n	32c9c <__swhatbuf_r+0x1c>
   32cc0:	2340      	movs	r3, #64	; 0x40
   32cc2:	2000      	movs	r0, #0
   32cc4:	6023      	str	r3, [r4, #0]
   32cc6:	b010      	add	sp, #64	; 0x40
   32cc8:	bd70      	pop	{r4, r5, r6, pc}
   32cca:	46c0      	nop			; (mov r8, r8)
   32ccc:	ffffe000 	.word	0xffffe000

00032cd0 <__smakebuf_r>:
   32cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   32cd2:	2602      	movs	r6, #2
   32cd4:	898b      	ldrh	r3, [r1, #12]
   32cd6:	0005      	movs	r5, r0
   32cd8:	000c      	movs	r4, r1
   32cda:	4233      	tst	r3, r6
   32cdc:	d006      	beq.n	32cec <__smakebuf_r+0x1c>
   32cde:	0023      	movs	r3, r4
   32ce0:	3347      	adds	r3, #71	; 0x47
   32ce2:	6023      	str	r3, [r4, #0]
   32ce4:	6123      	str	r3, [r4, #16]
   32ce6:	2301      	movs	r3, #1
   32ce8:	6163      	str	r3, [r4, #20]
   32cea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   32cec:	ab01      	add	r3, sp, #4
   32cee:	466a      	mov	r2, sp
   32cf0:	f7ff ffc6 	bl	32c80 <__swhatbuf_r>
   32cf4:	9900      	ldr	r1, [sp, #0]
   32cf6:	0007      	movs	r7, r0
   32cf8:	0028      	movs	r0, r5
   32cfa:	f7ff faa5 	bl	32248 <_malloc_r>
   32cfe:	2800      	cmp	r0, #0
   32d00:	d108      	bne.n	32d14 <__smakebuf_r+0x44>
   32d02:	220c      	movs	r2, #12
   32d04:	5ea3      	ldrsh	r3, [r4, r2]
   32d06:	059a      	lsls	r2, r3, #22
   32d08:	d4ef      	bmi.n	32cea <__smakebuf_r+0x1a>
   32d0a:	2203      	movs	r2, #3
   32d0c:	4393      	bics	r3, r2
   32d0e:	431e      	orrs	r6, r3
   32d10:	81a6      	strh	r6, [r4, #12]
   32d12:	e7e4      	b.n	32cde <__smakebuf_r+0xe>
   32d14:	4b0f      	ldr	r3, [pc, #60]	; (32d54 <__smakebuf_r+0x84>)
   32d16:	62ab      	str	r3, [r5, #40]	; 0x28
   32d18:	2380      	movs	r3, #128	; 0x80
   32d1a:	89a2      	ldrh	r2, [r4, #12]
   32d1c:	6020      	str	r0, [r4, #0]
   32d1e:	4313      	orrs	r3, r2
   32d20:	81a3      	strh	r3, [r4, #12]
   32d22:	9b00      	ldr	r3, [sp, #0]
   32d24:	6120      	str	r0, [r4, #16]
   32d26:	6163      	str	r3, [r4, #20]
   32d28:	9b01      	ldr	r3, [sp, #4]
   32d2a:	2b00      	cmp	r3, #0
   32d2c:	d00d      	beq.n	32d4a <__smakebuf_r+0x7a>
   32d2e:	230e      	movs	r3, #14
   32d30:	5ee1      	ldrsh	r1, [r4, r3]
   32d32:	0028      	movs	r0, r5
   32d34:	f000 fbb0 	bl	33498 <_isatty_r>
   32d38:	2800      	cmp	r0, #0
   32d3a:	d006      	beq.n	32d4a <__smakebuf_r+0x7a>
   32d3c:	2203      	movs	r2, #3
   32d3e:	89a3      	ldrh	r3, [r4, #12]
   32d40:	4393      	bics	r3, r2
   32d42:	001a      	movs	r2, r3
   32d44:	2301      	movs	r3, #1
   32d46:	4313      	orrs	r3, r2
   32d48:	81a3      	strh	r3, [r4, #12]
   32d4a:	89a0      	ldrh	r0, [r4, #12]
   32d4c:	4338      	orrs	r0, r7
   32d4e:	81a0      	strh	r0, [r4, #12]
   32d50:	e7cb      	b.n	32cea <__smakebuf_r+0x1a>
   32d52:	46c0      	nop			; (mov r8, r8)
   32d54:	00032ab1 	.word	0x00032ab1

00032d58 <__ascii_mbtowc>:
   32d58:	b082      	sub	sp, #8
   32d5a:	2900      	cmp	r1, #0
   32d5c:	d100      	bne.n	32d60 <__ascii_mbtowc+0x8>
   32d5e:	a901      	add	r1, sp, #4
   32d60:	1e10      	subs	r0, r2, #0
   32d62:	d006      	beq.n	32d72 <__ascii_mbtowc+0x1a>
   32d64:	2b00      	cmp	r3, #0
   32d66:	d006      	beq.n	32d76 <__ascii_mbtowc+0x1e>
   32d68:	7813      	ldrb	r3, [r2, #0]
   32d6a:	600b      	str	r3, [r1, #0]
   32d6c:	7810      	ldrb	r0, [r2, #0]
   32d6e:	1e43      	subs	r3, r0, #1
   32d70:	4198      	sbcs	r0, r3
   32d72:	b002      	add	sp, #8
   32d74:	4770      	bx	lr
   32d76:	2002      	movs	r0, #2
   32d78:	4240      	negs	r0, r0
   32d7a:	e7fa      	b.n	32d72 <__ascii_mbtowc+0x1a>

00032d7c <__malloc_lock>:
   32d7c:	4770      	bx	lr

00032d7e <__malloc_unlock>:
   32d7e:	4770      	bx	lr

00032d80 <__ssputs_r>:
   32d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   32d82:	688e      	ldr	r6, [r1, #8]
   32d84:	b085      	sub	sp, #20
   32d86:	0007      	movs	r7, r0
   32d88:	000c      	movs	r4, r1
   32d8a:	9203      	str	r2, [sp, #12]
   32d8c:	9301      	str	r3, [sp, #4]
   32d8e:	429e      	cmp	r6, r3
   32d90:	d839      	bhi.n	32e06 <__ssputs_r+0x86>
   32d92:	2390      	movs	r3, #144	; 0x90
   32d94:	898a      	ldrh	r2, [r1, #12]
   32d96:	00db      	lsls	r3, r3, #3
   32d98:	421a      	tst	r2, r3
   32d9a:	d034      	beq.n	32e06 <__ssputs_r+0x86>
   32d9c:	2503      	movs	r5, #3
   32d9e:	6909      	ldr	r1, [r1, #16]
   32da0:	6823      	ldr	r3, [r4, #0]
   32da2:	1a5b      	subs	r3, r3, r1
   32da4:	9302      	str	r3, [sp, #8]
   32da6:	6963      	ldr	r3, [r4, #20]
   32da8:	9802      	ldr	r0, [sp, #8]
   32daa:	435d      	muls	r5, r3
   32dac:	0feb      	lsrs	r3, r5, #31
   32dae:	195d      	adds	r5, r3, r5
   32db0:	9b01      	ldr	r3, [sp, #4]
   32db2:	106d      	asrs	r5, r5, #1
   32db4:	3301      	adds	r3, #1
   32db6:	181b      	adds	r3, r3, r0
   32db8:	42ab      	cmp	r3, r5
   32dba:	d900      	bls.n	32dbe <__ssputs_r+0x3e>
   32dbc:	001d      	movs	r5, r3
   32dbe:	0553      	lsls	r3, r2, #21
   32dc0:	d532      	bpl.n	32e28 <__ssputs_r+0xa8>
   32dc2:	0029      	movs	r1, r5
   32dc4:	0038      	movs	r0, r7
   32dc6:	f7ff fa3f 	bl	32248 <_malloc_r>
   32dca:	1e06      	subs	r6, r0, #0
   32dcc:	d109      	bne.n	32de2 <__ssputs_r+0x62>
   32dce:	230c      	movs	r3, #12
   32dd0:	603b      	str	r3, [r7, #0]
   32dd2:	2340      	movs	r3, #64	; 0x40
   32dd4:	2001      	movs	r0, #1
   32dd6:	89a2      	ldrh	r2, [r4, #12]
   32dd8:	4240      	negs	r0, r0
   32dda:	4313      	orrs	r3, r2
   32ddc:	81a3      	strh	r3, [r4, #12]
   32dde:	b005      	add	sp, #20
   32de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32de2:	9a02      	ldr	r2, [sp, #8]
   32de4:	6921      	ldr	r1, [r4, #16]
   32de6:	f7ff f9c1 	bl	3216c <memcpy>
   32dea:	89a3      	ldrh	r3, [r4, #12]
   32dec:	4a14      	ldr	r2, [pc, #80]	; (32e40 <__ssputs_r+0xc0>)
   32dee:	401a      	ands	r2, r3
   32df0:	2380      	movs	r3, #128	; 0x80
   32df2:	4313      	orrs	r3, r2
   32df4:	81a3      	strh	r3, [r4, #12]
   32df6:	9b02      	ldr	r3, [sp, #8]
   32df8:	6126      	str	r6, [r4, #16]
   32dfa:	18f6      	adds	r6, r6, r3
   32dfc:	6026      	str	r6, [r4, #0]
   32dfe:	6165      	str	r5, [r4, #20]
   32e00:	9e01      	ldr	r6, [sp, #4]
   32e02:	1aed      	subs	r5, r5, r3
   32e04:	60a5      	str	r5, [r4, #8]
   32e06:	9b01      	ldr	r3, [sp, #4]
   32e08:	42b3      	cmp	r3, r6
   32e0a:	d200      	bcs.n	32e0e <__ssputs_r+0x8e>
   32e0c:	001e      	movs	r6, r3
   32e0e:	0032      	movs	r2, r6
   32e10:	9903      	ldr	r1, [sp, #12]
   32e12:	6820      	ldr	r0, [r4, #0]
   32e14:	f7ff f9b3 	bl	3217e <memmove>
   32e18:	68a3      	ldr	r3, [r4, #8]
   32e1a:	2000      	movs	r0, #0
   32e1c:	1b9b      	subs	r3, r3, r6
   32e1e:	60a3      	str	r3, [r4, #8]
   32e20:	6823      	ldr	r3, [r4, #0]
   32e22:	199e      	adds	r6, r3, r6
   32e24:	6026      	str	r6, [r4, #0]
   32e26:	e7da      	b.n	32dde <__ssputs_r+0x5e>
   32e28:	002a      	movs	r2, r5
   32e2a:	0038      	movs	r0, r7
   32e2c:	f000 fb65 	bl	334fa <_realloc_r>
   32e30:	1e06      	subs	r6, r0, #0
   32e32:	d1e0      	bne.n	32df6 <__ssputs_r+0x76>
   32e34:	6921      	ldr	r1, [r4, #16]
   32e36:	0038      	movs	r0, r7
   32e38:	f7ff f9bc 	bl	321b4 <_free_r>
   32e3c:	e7c7      	b.n	32dce <__ssputs_r+0x4e>
   32e3e:	46c0      	nop			; (mov r8, r8)
   32e40:	fffffb7f 	.word	0xfffffb7f

00032e44 <_svfiprintf_r>:
   32e44:	b5f0      	push	{r4, r5, r6, r7, lr}
   32e46:	b09f      	sub	sp, #124	; 0x7c
   32e48:	9002      	str	r0, [sp, #8]
   32e4a:	9305      	str	r3, [sp, #20]
   32e4c:	898b      	ldrh	r3, [r1, #12]
   32e4e:	000f      	movs	r7, r1
   32e50:	0016      	movs	r6, r2
   32e52:	061b      	lsls	r3, r3, #24
   32e54:	d511      	bpl.n	32e7a <_svfiprintf_r+0x36>
   32e56:	690b      	ldr	r3, [r1, #16]
   32e58:	2b00      	cmp	r3, #0
   32e5a:	d10e      	bne.n	32e7a <_svfiprintf_r+0x36>
   32e5c:	2140      	movs	r1, #64	; 0x40
   32e5e:	f7ff f9f3 	bl	32248 <_malloc_r>
   32e62:	6038      	str	r0, [r7, #0]
   32e64:	6138      	str	r0, [r7, #16]
   32e66:	2800      	cmp	r0, #0
   32e68:	d105      	bne.n	32e76 <_svfiprintf_r+0x32>
   32e6a:	230c      	movs	r3, #12
   32e6c:	9a02      	ldr	r2, [sp, #8]
   32e6e:	3801      	subs	r0, #1
   32e70:	6013      	str	r3, [r2, #0]
   32e72:	b01f      	add	sp, #124	; 0x7c
   32e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32e76:	2340      	movs	r3, #64	; 0x40
   32e78:	617b      	str	r3, [r7, #20]
   32e7a:	2300      	movs	r3, #0
   32e7c:	ad06      	add	r5, sp, #24
   32e7e:	616b      	str	r3, [r5, #20]
   32e80:	3320      	adds	r3, #32
   32e82:	766b      	strb	r3, [r5, #25]
   32e84:	3310      	adds	r3, #16
   32e86:	76ab      	strb	r3, [r5, #26]
   32e88:	0034      	movs	r4, r6
   32e8a:	7823      	ldrb	r3, [r4, #0]
   32e8c:	2b00      	cmp	r3, #0
   32e8e:	d147      	bne.n	32f20 <_svfiprintf_r+0xdc>
   32e90:	1ba3      	subs	r3, r4, r6
   32e92:	9304      	str	r3, [sp, #16]
   32e94:	d00d      	beq.n	32eb2 <_svfiprintf_r+0x6e>
   32e96:	1ba3      	subs	r3, r4, r6
   32e98:	0032      	movs	r2, r6
   32e9a:	0039      	movs	r1, r7
   32e9c:	9802      	ldr	r0, [sp, #8]
   32e9e:	f7ff ff6f 	bl	32d80 <__ssputs_r>
   32ea2:	1c43      	adds	r3, r0, #1
   32ea4:	d100      	bne.n	32ea8 <_svfiprintf_r+0x64>
   32ea6:	e0b5      	b.n	33014 <_svfiprintf_r+0x1d0>
   32ea8:	696a      	ldr	r2, [r5, #20]
   32eaa:	9b04      	ldr	r3, [sp, #16]
   32eac:	4694      	mov	ip, r2
   32eae:	4463      	add	r3, ip
   32eb0:	616b      	str	r3, [r5, #20]
   32eb2:	7823      	ldrb	r3, [r4, #0]
   32eb4:	2b00      	cmp	r3, #0
   32eb6:	d100      	bne.n	32eba <_svfiprintf_r+0x76>
   32eb8:	e0ac      	b.n	33014 <_svfiprintf_r+0x1d0>
   32eba:	2201      	movs	r2, #1
   32ebc:	2300      	movs	r3, #0
   32ebe:	4252      	negs	r2, r2
   32ec0:	606a      	str	r2, [r5, #4]
   32ec2:	a902      	add	r1, sp, #8
   32ec4:	3254      	adds	r2, #84	; 0x54
   32ec6:	1852      	adds	r2, r2, r1
   32ec8:	3401      	adds	r4, #1
   32eca:	602b      	str	r3, [r5, #0]
   32ecc:	60eb      	str	r3, [r5, #12]
   32ece:	60ab      	str	r3, [r5, #8]
   32ed0:	7013      	strb	r3, [r2, #0]
   32ed2:	65ab      	str	r3, [r5, #88]	; 0x58
   32ed4:	4e58      	ldr	r6, [pc, #352]	; (33038 <_svfiprintf_r+0x1f4>)
   32ed6:	2205      	movs	r2, #5
   32ed8:	7821      	ldrb	r1, [r4, #0]
   32eda:	0030      	movs	r0, r6
   32edc:	f000 fb02 	bl	334e4 <memchr>
   32ee0:	1c62      	adds	r2, r4, #1
   32ee2:	2800      	cmp	r0, #0
   32ee4:	d120      	bne.n	32f28 <_svfiprintf_r+0xe4>
   32ee6:	6829      	ldr	r1, [r5, #0]
   32ee8:	06cb      	lsls	r3, r1, #27
   32eea:	d504      	bpl.n	32ef6 <_svfiprintf_r+0xb2>
   32eec:	2353      	movs	r3, #83	; 0x53
   32eee:	ae02      	add	r6, sp, #8
   32ef0:	3020      	adds	r0, #32
   32ef2:	199b      	adds	r3, r3, r6
   32ef4:	7018      	strb	r0, [r3, #0]
   32ef6:	070b      	lsls	r3, r1, #28
   32ef8:	d504      	bpl.n	32f04 <_svfiprintf_r+0xc0>
   32efa:	2353      	movs	r3, #83	; 0x53
   32efc:	202b      	movs	r0, #43	; 0x2b
   32efe:	ae02      	add	r6, sp, #8
   32f00:	199b      	adds	r3, r3, r6
   32f02:	7018      	strb	r0, [r3, #0]
   32f04:	7823      	ldrb	r3, [r4, #0]
   32f06:	2b2a      	cmp	r3, #42	; 0x2a
   32f08:	d016      	beq.n	32f38 <_svfiprintf_r+0xf4>
   32f0a:	2000      	movs	r0, #0
   32f0c:	210a      	movs	r1, #10
   32f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   32f10:	7822      	ldrb	r2, [r4, #0]
   32f12:	3a30      	subs	r2, #48	; 0x30
   32f14:	2a09      	cmp	r2, #9
   32f16:	d955      	bls.n	32fc4 <_svfiprintf_r+0x180>
   32f18:	2800      	cmp	r0, #0
   32f1a:	d015      	beq.n	32f48 <_svfiprintf_r+0x104>
   32f1c:	9309      	str	r3, [sp, #36]	; 0x24
   32f1e:	e013      	b.n	32f48 <_svfiprintf_r+0x104>
   32f20:	2b25      	cmp	r3, #37	; 0x25
   32f22:	d0b5      	beq.n	32e90 <_svfiprintf_r+0x4c>
   32f24:	3401      	adds	r4, #1
   32f26:	e7b0      	b.n	32e8a <_svfiprintf_r+0x46>
   32f28:	2301      	movs	r3, #1
   32f2a:	1b80      	subs	r0, r0, r6
   32f2c:	4083      	lsls	r3, r0
   32f2e:	6829      	ldr	r1, [r5, #0]
   32f30:	0014      	movs	r4, r2
   32f32:	430b      	orrs	r3, r1
   32f34:	602b      	str	r3, [r5, #0]
   32f36:	e7cd      	b.n	32ed4 <_svfiprintf_r+0x90>
   32f38:	9b05      	ldr	r3, [sp, #20]
   32f3a:	1d18      	adds	r0, r3, #4
   32f3c:	681b      	ldr	r3, [r3, #0]
   32f3e:	9005      	str	r0, [sp, #20]
   32f40:	2b00      	cmp	r3, #0
   32f42:	db39      	blt.n	32fb8 <_svfiprintf_r+0x174>
   32f44:	9309      	str	r3, [sp, #36]	; 0x24
   32f46:	0014      	movs	r4, r2
   32f48:	7823      	ldrb	r3, [r4, #0]
   32f4a:	2b2e      	cmp	r3, #46	; 0x2e
   32f4c:	d10b      	bne.n	32f66 <_svfiprintf_r+0x122>
   32f4e:	7863      	ldrb	r3, [r4, #1]
   32f50:	1c62      	adds	r2, r4, #1
   32f52:	2b2a      	cmp	r3, #42	; 0x2a
   32f54:	d13e      	bne.n	32fd4 <_svfiprintf_r+0x190>
   32f56:	9b05      	ldr	r3, [sp, #20]
   32f58:	3402      	adds	r4, #2
   32f5a:	1d1a      	adds	r2, r3, #4
   32f5c:	681b      	ldr	r3, [r3, #0]
   32f5e:	9205      	str	r2, [sp, #20]
   32f60:	2b00      	cmp	r3, #0
   32f62:	db34      	blt.n	32fce <_svfiprintf_r+0x18a>
   32f64:	9307      	str	r3, [sp, #28]
   32f66:	4e35      	ldr	r6, [pc, #212]	; (3303c <_svfiprintf_r+0x1f8>)
   32f68:	7821      	ldrb	r1, [r4, #0]
   32f6a:	2203      	movs	r2, #3
   32f6c:	0030      	movs	r0, r6
   32f6e:	f000 fab9 	bl	334e4 <memchr>
   32f72:	2800      	cmp	r0, #0
   32f74:	d006      	beq.n	32f84 <_svfiprintf_r+0x140>
   32f76:	2340      	movs	r3, #64	; 0x40
   32f78:	1b80      	subs	r0, r0, r6
   32f7a:	4083      	lsls	r3, r0
   32f7c:	682a      	ldr	r2, [r5, #0]
   32f7e:	3401      	adds	r4, #1
   32f80:	4313      	orrs	r3, r2
   32f82:	602b      	str	r3, [r5, #0]
   32f84:	7821      	ldrb	r1, [r4, #0]
   32f86:	2206      	movs	r2, #6
   32f88:	482d      	ldr	r0, [pc, #180]	; (33040 <_svfiprintf_r+0x1fc>)
   32f8a:	1c66      	adds	r6, r4, #1
   32f8c:	7629      	strb	r1, [r5, #24]
   32f8e:	f000 faa9 	bl	334e4 <memchr>
   32f92:	2800      	cmp	r0, #0
   32f94:	d046      	beq.n	33024 <_svfiprintf_r+0x1e0>
   32f96:	4b2b      	ldr	r3, [pc, #172]	; (33044 <_svfiprintf_r+0x200>)
   32f98:	2b00      	cmp	r3, #0
   32f9a:	d12f      	bne.n	32ffc <_svfiprintf_r+0x1b8>
   32f9c:	6829      	ldr	r1, [r5, #0]
   32f9e:	9b05      	ldr	r3, [sp, #20]
   32fa0:	2207      	movs	r2, #7
   32fa2:	05c9      	lsls	r1, r1, #23
   32fa4:	d528      	bpl.n	32ff8 <_svfiprintf_r+0x1b4>
   32fa6:	189b      	adds	r3, r3, r2
   32fa8:	4393      	bics	r3, r2
   32faa:	3308      	adds	r3, #8
   32fac:	9305      	str	r3, [sp, #20]
   32fae:	696b      	ldr	r3, [r5, #20]
   32fb0:	9a03      	ldr	r2, [sp, #12]
   32fb2:	189b      	adds	r3, r3, r2
   32fb4:	616b      	str	r3, [r5, #20]
   32fb6:	e767      	b.n	32e88 <_svfiprintf_r+0x44>
   32fb8:	425b      	negs	r3, r3
   32fba:	60eb      	str	r3, [r5, #12]
   32fbc:	2302      	movs	r3, #2
   32fbe:	430b      	orrs	r3, r1
   32fc0:	602b      	str	r3, [r5, #0]
   32fc2:	e7c0      	b.n	32f46 <_svfiprintf_r+0x102>
   32fc4:	434b      	muls	r3, r1
   32fc6:	3401      	adds	r4, #1
   32fc8:	189b      	adds	r3, r3, r2
   32fca:	2001      	movs	r0, #1
   32fcc:	e7a0      	b.n	32f10 <_svfiprintf_r+0xcc>
   32fce:	2301      	movs	r3, #1
   32fd0:	425b      	negs	r3, r3
   32fd2:	e7c7      	b.n	32f64 <_svfiprintf_r+0x120>
   32fd4:	2300      	movs	r3, #0
   32fd6:	0014      	movs	r4, r2
   32fd8:	200a      	movs	r0, #10
   32fda:	001a      	movs	r2, r3
   32fdc:	606b      	str	r3, [r5, #4]
   32fde:	7821      	ldrb	r1, [r4, #0]
   32fe0:	3930      	subs	r1, #48	; 0x30
   32fe2:	2909      	cmp	r1, #9
   32fe4:	d903      	bls.n	32fee <_svfiprintf_r+0x1aa>
   32fe6:	2b00      	cmp	r3, #0
   32fe8:	d0bd      	beq.n	32f66 <_svfiprintf_r+0x122>
   32fea:	9207      	str	r2, [sp, #28]
   32fec:	e7bb      	b.n	32f66 <_svfiprintf_r+0x122>
   32fee:	4342      	muls	r2, r0
   32ff0:	3401      	adds	r4, #1
   32ff2:	1852      	adds	r2, r2, r1
   32ff4:	2301      	movs	r3, #1
   32ff6:	e7f2      	b.n	32fde <_svfiprintf_r+0x19a>
   32ff8:	3307      	adds	r3, #7
   32ffa:	e7d5      	b.n	32fa8 <_svfiprintf_r+0x164>
   32ffc:	ab05      	add	r3, sp, #20
   32ffe:	9300      	str	r3, [sp, #0]
   33000:	003a      	movs	r2, r7
   33002:	4b11      	ldr	r3, [pc, #68]	; (33048 <_svfiprintf_r+0x204>)
   33004:	0029      	movs	r1, r5
   33006:	9802      	ldr	r0, [sp, #8]
   33008:	e000      	b.n	3300c <_svfiprintf_r+0x1c8>
   3300a:	bf00      	nop
   3300c:	9003      	str	r0, [sp, #12]
   3300e:	9b03      	ldr	r3, [sp, #12]
   33010:	3301      	adds	r3, #1
   33012:	d1cc      	bne.n	32fae <_svfiprintf_r+0x16a>
   33014:	89bb      	ldrh	r3, [r7, #12]
   33016:	980b      	ldr	r0, [sp, #44]	; 0x2c
   33018:	065b      	lsls	r3, r3, #25
   3301a:	d400      	bmi.n	3301e <_svfiprintf_r+0x1da>
   3301c:	e729      	b.n	32e72 <_svfiprintf_r+0x2e>
   3301e:	2001      	movs	r0, #1
   33020:	4240      	negs	r0, r0
   33022:	e726      	b.n	32e72 <_svfiprintf_r+0x2e>
   33024:	ab05      	add	r3, sp, #20
   33026:	9300      	str	r3, [sp, #0]
   33028:	003a      	movs	r2, r7
   3302a:	4b07      	ldr	r3, [pc, #28]	; (33048 <_svfiprintf_r+0x204>)
   3302c:	0029      	movs	r1, r5
   3302e:	9802      	ldr	r0, [sp, #8]
   33030:	f000 f87a 	bl	33128 <_printf_i>
   33034:	e7ea      	b.n	3300c <_svfiprintf_r+0x1c8>
   33036:	46c0      	nop			; (mov r8, r8)
   33038:	000374ca 	.word	0x000374ca
   3303c:	000374d0 	.word	0x000374d0
   33040:	000374d4 	.word	0x000374d4
   33044:	00000000 	.word	0x00000000
   33048:	00032d81 	.word	0x00032d81

0003304c <_printf_common>:
   3304c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3304e:	0015      	movs	r5, r2
   33050:	9301      	str	r3, [sp, #4]
   33052:	688a      	ldr	r2, [r1, #8]
   33054:	690b      	ldr	r3, [r1, #16]
   33056:	9000      	str	r0, [sp, #0]
   33058:	000c      	movs	r4, r1
   3305a:	4293      	cmp	r3, r2
   3305c:	da00      	bge.n	33060 <_printf_common+0x14>
   3305e:	0013      	movs	r3, r2
   33060:	0022      	movs	r2, r4
   33062:	602b      	str	r3, [r5, #0]
   33064:	3243      	adds	r2, #67	; 0x43
   33066:	7812      	ldrb	r2, [r2, #0]
   33068:	2a00      	cmp	r2, #0
   3306a:	d001      	beq.n	33070 <_printf_common+0x24>
   3306c:	3301      	adds	r3, #1
   3306e:	602b      	str	r3, [r5, #0]
   33070:	6823      	ldr	r3, [r4, #0]
   33072:	069b      	lsls	r3, r3, #26
   33074:	d502      	bpl.n	3307c <_printf_common+0x30>
   33076:	682b      	ldr	r3, [r5, #0]
   33078:	3302      	adds	r3, #2
   3307a:	602b      	str	r3, [r5, #0]
   3307c:	2706      	movs	r7, #6
   3307e:	6823      	ldr	r3, [r4, #0]
   33080:	401f      	ands	r7, r3
   33082:	d027      	beq.n	330d4 <_printf_common+0x88>
   33084:	0023      	movs	r3, r4
   33086:	3343      	adds	r3, #67	; 0x43
   33088:	781b      	ldrb	r3, [r3, #0]
   3308a:	1e5a      	subs	r2, r3, #1
   3308c:	4193      	sbcs	r3, r2
   3308e:	6822      	ldr	r2, [r4, #0]
   33090:	0692      	lsls	r2, r2, #26
   33092:	d430      	bmi.n	330f6 <_printf_common+0xaa>
   33094:	0022      	movs	r2, r4
   33096:	9901      	ldr	r1, [sp, #4]
   33098:	3243      	adds	r2, #67	; 0x43
   3309a:	9800      	ldr	r0, [sp, #0]
   3309c:	9e08      	ldr	r6, [sp, #32]
   3309e:	47b0      	blx	r6
   330a0:	1c43      	adds	r3, r0, #1
   330a2:	d025      	beq.n	330f0 <_printf_common+0xa4>
   330a4:	2306      	movs	r3, #6
   330a6:	6820      	ldr	r0, [r4, #0]
   330a8:	682a      	ldr	r2, [r5, #0]
   330aa:	68e1      	ldr	r1, [r4, #12]
   330ac:	4003      	ands	r3, r0
   330ae:	2500      	movs	r5, #0
   330b0:	2b04      	cmp	r3, #4
   330b2:	d103      	bne.n	330bc <_printf_common+0x70>
   330b4:	1a8d      	subs	r5, r1, r2
   330b6:	43eb      	mvns	r3, r5
   330b8:	17db      	asrs	r3, r3, #31
   330ba:	401d      	ands	r5, r3
   330bc:	68a3      	ldr	r3, [r4, #8]
   330be:	6922      	ldr	r2, [r4, #16]
   330c0:	4293      	cmp	r3, r2
   330c2:	dd01      	ble.n	330c8 <_printf_common+0x7c>
   330c4:	1a9b      	subs	r3, r3, r2
   330c6:	18ed      	adds	r5, r5, r3
   330c8:	2700      	movs	r7, #0
   330ca:	42bd      	cmp	r5, r7
   330cc:	d120      	bne.n	33110 <_printf_common+0xc4>
   330ce:	2000      	movs	r0, #0
   330d0:	e010      	b.n	330f4 <_printf_common+0xa8>
   330d2:	3701      	adds	r7, #1
   330d4:	68e3      	ldr	r3, [r4, #12]
   330d6:	682a      	ldr	r2, [r5, #0]
   330d8:	1a9b      	subs	r3, r3, r2
   330da:	429f      	cmp	r7, r3
   330dc:	dad2      	bge.n	33084 <_printf_common+0x38>
   330de:	0022      	movs	r2, r4
   330e0:	2301      	movs	r3, #1
   330e2:	3219      	adds	r2, #25
   330e4:	9901      	ldr	r1, [sp, #4]
   330e6:	9800      	ldr	r0, [sp, #0]
   330e8:	9e08      	ldr	r6, [sp, #32]
   330ea:	47b0      	blx	r6
   330ec:	1c43      	adds	r3, r0, #1
   330ee:	d1f0      	bne.n	330d2 <_printf_common+0x86>
   330f0:	2001      	movs	r0, #1
   330f2:	4240      	negs	r0, r0
   330f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   330f6:	2030      	movs	r0, #48	; 0x30
   330f8:	18e1      	adds	r1, r4, r3
   330fa:	3143      	adds	r1, #67	; 0x43
   330fc:	7008      	strb	r0, [r1, #0]
   330fe:	0021      	movs	r1, r4
   33100:	1c5a      	adds	r2, r3, #1
   33102:	3145      	adds	r1, #69	; 0x45
   33104:	7809      	ldrb	r1, [r1, #0]
   33106:	18a2      	adds	r2, r4, r2
   33108:	3243      	adds	r2, #67	; 0x43
   3310a:	3302      	adds	r3, #2
   3310c:	7011      	strb	r1, [r2, #0]
   3310e:	e7c1      	b.n	33094 <_printf_common+0x48>
   33110:	0022      	movs	r2, r4
   33112:	2301      	movs	r3, #1
   33114:	321a      	adds	r2, #26
   33116:	9901      	ldr	r1, [sp, #4]
   33118:	9800      	ldr	r0, [sp, #0]
   3311a:	9e08      	ldr	r6, [sp, #32]
   3311c:	47b0      	blx	r6
   3311e:	1c43      	adds	r3, r0, #1
   33120:	d0e6      	beq.n	330f0 <_printf_common+0xa4>
   33122:	3701      	adds	r7, #1
   33124:	e7d1      	b.n	330ca <_printf_common+0x7e>
	...

00033128 <_printf_i>:
   33128:	b5f0      	push	{r4, r5, r6, r7, lr}
   3312a:	b08b      	sub	sp, #44	; 0x2c
   3312c:	9206      	str	r2, [sp, #24]
   3312e:	000a      	movs	r2, r1
   33130:	3243      	adds	r2, #67	; 0x43
   33132:	9307      	str	r3, [sp, #28]
   33134:	9005      	str	r0, [sp, #20]
   33136:	9204      	str	r2, [sp, #16]
   33138:	7e0a      	ldrb	r2, [r1, #24]
   3313a:	000c      	movs	r4, r1
   3313c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3313e:	2a6e      	cmp	r2, #110	; 0x6e
   33140:	d100      	bne.n	33144 <_printf_i+0x1c>
   33142:	e08f      	b.n	33264 <_printf_i+0x13c>
   33144:	d817      	bhi.n	33176 <_printf_i+0x4e>
   33146:	2a63      	cmp	r2, #99	; 0x63
   33148:	d02c      	beq.n	331a4 <_printf_i+0x7c>
   3314a:	d808      	bhi.n	3315e <_printf_i+0x36>
   3314c:	2a00      	cmp	r2, #0
   3314e:	d100      	bne.n	33152 <_printf_i+0x2a>
   33150:	e099      	b.n	33286 <_printf_i+0x15e>
   33152:	2a58      	cmp	r2, #88	; 0x58
   33154:	d054      	beq.n	33200 <_printf_i+0xd8>
   33156:	0026      	movs	r6, r4
   33158:	3642      	adds	r6, #66	; 0x42
   3315a:	7032      	strb	r2, [r6, #0]
   3315c:	e029      	b.n	331b2 <_printf_i+0x8a>
   3315e:	2a64      	cmp	r2, #100	; 0x64
   33160:	d001      	beq.n	33166 <_printf_i+0x3e>
   33162:	2a69      	cmp	r2, #105	; 0x69
   33164:	d1f7      	bne.n	33156 <_printf_i+0x2e>
   33166:	6821      	ldr	r1, [r4, #0]
   33168:	681a      	ldr	r2, [r3, #0]
   3316a:	0608      	lsls	r0, r1, #24
   3316c:	d523      	bpl.n	331b6 <_printf_i+0x8e>
   3316e:	1d11      	adds	r1, r2, #4
   33170:	6019      	str	r1, [r3, #0]
   33172:	6815      	ldr	r5, [r2, #0]
   33174:	e025      	b.n	331c2 <_printf_i+0x9a>
   33176:	2a73      	cmp	r2, #115	; 0x73
   33178:	d100      	bne.n	3317c <_printf_i+0x54>
   3317a:	e088      	b.n	3328e <_printf_i+0x166>
   3317c:	d808      	bhi.n	33190 <_printf_i+0x68>
   3317e:	2a6f      	cmp	r2, #111	; 0x6f
   33180:	d029      	beq.n	331d6 <_printf_i+0xae>
   33182:	2a70      	cmp	r2, #112	; 0x70
   33184:	d1e7      	bne.n	33156 <_printf_i+0x2e>
   33186:	2220      	movs	r2, #32
   33188:	6809      	ldr	r1, [r1, #0]
   3318a:	430a      	orrs	r2, r1
   3318c:	6022      	str	r2, [r4, #0]
   3318e:	e003      	b.n	33198 <_printf_i+0x70>
   33190:	2a75      	cmp	r2, #117	; 0x75
   33192:	d020      	beq.n	331d6 <_printf_i+0xae>
   33194:	2a78      	cmp	r2, #120	; 0x78
   33196:	d1de      	bne.n	33156 <_printf_i+0x2e>
   33198:	0022      	movs	r2, r4
   3319a:	2178      	movs	r1, #120	; 0x78
   3319c:	3245      	adds	r2, #69	; 0x45
   3319e:	7011      	strb	r1, [r2, #0]
   331a0:	4a6c      	ldr	r2, [pc, #432]	; (33354 <_printf_i+0x22c>)
   331a2:	e030      	b.n	33206 <_printf_i+0xde>
   331a4:	000e      	movs	r6, r1
   331a6:	681a      	ldr	r2, [r3, #0]
   331a8:	3642      	adds	r6, #66	; 0x42
   331aa:	1d11      	adds	r1, r2, #4
   331ac:	6019      	str	r1, [r3, #0]
   331ae:	6813      	ldr	r3, [r2, #0]
   331b0:	7033      	strb	r3, [r6, #0]
   331b2:	2301      	movs	r3, #1
   331b4:	e079      	b.n	332aa <_printf_i+0x182>
   331b6:	0649      	lsls	r1, r1, #25
   331b8:	d5d9      	bpl.n	3316e <_printf_i+0x46>
   331ba:	1d11      	adds	r1, r2, #4
   331bc:	6019      	str	r1, [r3, #0]
   331be:	2300      	movs	r3, #0
   331c0:	5ed5      	ldrsh	r5, [r2, r3]
   331c2:	2d00      	cmp	r5, #0
   331c4:	da03      	bge.n	331ce <_printf_i+0xa6>
   331c6:	232d      	movs	r3, #45	; 0x2d
   331c8:	9a04      	ldr	r2, [sp, #16]
   331ca:	426d      	negs	r5, r5
   331cc:	7013      	strb	r3, [r2, #0]
   331ce:	4b62      	ldr	r3, [pc, #392]	; (33358 <_printf_i+0x230>)
   331d0:	270a      	movs	r7, #10
   331d2:	9303      	str	r3, [sp, #12]
   331d4:	e02f      	b.n	33236 <_printf_i+0x10e>
   331d6:	6820      	ldr	r0, [r4, #0]
   331d8:	6819      	ldr	r1, [r3, #0]
   331da:	0605      	lsls	r5, r0, #24
   331dc:	d503      	bpl.n	331e6 <_printf_i+0xbe>
   331de:	1d08      	adds	r0, r1, #4
   331e0:	6018      	str	r0, [r3, #0]
   331e2:	680d      	ldr	r5, [r1, #0]
   331e4:	e005      	b.n	331f2 <_printf_i+0xca>
   331e6:	0640      	lsls	r0, r0, #25
   331e8:	d5f9      	bpl.n	331de <_printf_i+0xb6>
   331ea:	680d      	ldr	r5, [r1, #0]
   331ec:	1d08      	adds	r0, r1, #4
   331ee:	6018      	str	r0, [r3, #0]
   331f0:	b2ad      	uxth	r5, r5
   331f2:	4b59      	ldr	r3, [pc, #356]	; (33358 <_printf_i+0x230>)
   331f4:	2708      	movs	r7, #8
   331f6:	9303      	str	r3, [sp, #12]
   331f8:	2a6f      	cmp	r2, #111	; 0x6f
   331fa:	d018      	beq.n	3322e <_printf_i+0x106>
   331fc:	270a      	movs	r7, #10
   331fe:	e016      	b.n	3322e <_printf_i+0x106>
   33200:	3145      	adds	r1, #69	; 0x45
   33202:	700a      	strb	r2, [r1, #0]
   33204:	4a54      	ldr	r2, [pc, #336]	; (33358 <_printf_i+0x230>)
   33206:	9203      	str	r2, [sp, #12]
   33208:	681a      	ldr	r2, [r3, #0]
   3320a:	6821      	ldr	r1, [r4, #0]
   3320c:	1d10      	adds	r0, r2, #4
   3320e:	6018      	str	r0, [r3, #0]
   33210:	6815      	ldr	r5, [r2, #0]
   33212:	0608      	lsls	r0, r1, #24
   33214:	d522      	bpl.n	3325c <_printf_i+0x134>
   33216:	07cb      	lsls	r3, r1, #31
   33218:	d502      	bpl.n	33220 <_printf_i+0xf8>
   3321a:	2320      	movs	r3, #32
   3321c:	4319      	orrs	r1, r3
   3321e:	6021      	str	r1, [r4, #0]
   33220:	2710      	movs	r7, #16
   33222:	2d00      	cmp	r5, #0
   33224:	d103      	bne.n	3322e <_printf_i+0x106>
   33226:	2320      	movs	r3, #32
   33228:	6822      	ldr	r2, [r4, #0]
   3322a:	439a      	bics	r2, r3
   3322c:	6022      	str	r2, [r4, #0]
   3322e:	0023      	movs	r3, r4
   33230:	2200      	movs	r2, #0
   33232:	3343      	adds	r3, #67	; 0x43
   33234:	701a      	strb	r2, [r3, #0]
   33236:	6863      	ldr	r3, [r4, #4]
   33238:	60a3      	str	r3, [r4, #8]
   3323a:	2b00      	cmp	r3, #0
   3323c:	db5c      	blt.n	332f8 <_printf_i+0x1d0>
   3323e:	2204      	movs	r2, #4
   33240:	6821      	ldr	r1, [r4, #0]
   33242:	4391      	bics	r1, r2
   33244:	6021      	str	r1, [r4, #0]
   33246:	2d00      	cmp	r5, #0
   33248:	d158      	bne.n	332fc <_printf_i+0x1d4>
   3324a:	9e04      	ldr	r6, [sp, #16]
   3324c:	2b00      	cmp	r3, #0
   3324e:	d064      	beq.n	3331a <_printf_i+0x1f2>
   33250:	0026      	movs	r6, r4
   33252:	9b03      	ldr	r3, [sp, #12]
   33254:	3642      	adds	r6, #66	; 0x42
   33256:	781b      	ldrb	r3, [r3, #0]
   33258:	7033      	strb	r3, [r6, #0]
   3325a:	e05e      	b.n	3331a <_printf_i+0x1f2>
   3325c:	0648      	lsls	r0, r1, #25
   3325e:	d5da      	bpl.n	33216 <_printf_i+0xee>
   33260:	b2ad      	uxth	r5, r5
   33262:	e7d8      	b.n	33216 <_printf_i+0xee>
   33264:	6809      	ldr	r1, [r1, #0]
   33266:	681a      	ldr	r2, [r3, #0]
   33268:	0608      	lsls	r0, r1, #24
   3326a:	d505      	bpl.n	33278 <_printf_i+0x150>
   3326c:	1d11      	adds	r1, r2, #4
   3326e:	6019      	str	r1, [r3, #0]
   33270:	6813      	ldr	r3, [r2, #0]
   33272:	6962      	ldr	r2, [r4, #20]
   33274:	601a      	str	r2, [r3, #0]
   33276:	e006      	b.n	33286 <_printf_i+0x15e>
   33278:	0649      	lsls	r1, r1, #25
   3327a:	d5f7      	bpl.n	3326c <_printf_i+0x144>
   3327c:	1d11      	adds	r1, r2, #4
   3327e:	6019      	str	r1, [r3, #0]
   33280:	6813      	ldr	r3, [r2, #0]
   33282:	8aa2      	ldrh	r2, [r4, #20]
   33284:	801a      	strh	r2, [r3, #0]
   33286:	2300      	movs	r3, #0
   33288:	9e04      	ldr	r6, [sp, #16]
   3328a:	6123      	str	r3, [r4, #16]
   3328c:	e054      	b.n	33338 <_printf_i+0x210>
   3328e:	681a      	ldr	r2, [r3, #0]
   33290:	1d11      	adds	r1, r2, #4
   33292:	6019      	str	r1, [r3, #0]
   33294:	6816      	ldr	r6, [r2, #0]
   33296:	2100      	movs	r1, #0
   33298:	6862      	ldr	r2, [r4, #4]
   3329a:	0030      	movs	r0, r6
   3329c:	f000 f922 	bl	334e4 <memchr>
   332a0:	2800      	cmp	r0, #0
   332a2:	d001      	beq.n	332a8 <_printf_i+0x180>
   332a4:	1b80      	subs	r0, r0, r6
   332a6:	6060      	str	r0, [r4, #4]
   332a8:	6863      	ldr	r3, [r4, #4]
   332aa:	6123      	str	r3, [r4, #16]
   332ac:	2300      	movs	r3, #0
   332ae:	9a04      	ldr	r2, [sp, #16]
   332b0:	7013      	strb	r3, [r2, #0]
   332b2:	e041      	b.n	33338 <_printf_i+0x210>
   332b4:	6923      	ldr	r3, [r4, #16]
   332b6:	0032      	movs	r2, r6
   332b8:	9906      	ldr	r1, [sp, #24]
   332ba:	9805      	ldr	r0, [sp, #20]
   332bc:	9d07      	ldr	r5, [sp, #28]
   332be:	47a8      	blx	r5
   332c0:	1c43      	adds	r3, r0, #1
   332c2:	d043      	beq.n	3334c <_printf_i+0x224>
   332c4:	6823      	ldr	r3, [r4, #0]
   332c6:	2500      	movs	r5, #0
   332c8:	079b      	lsls	r3, r3, #30
   332ca:	d40f      	bmi.n	332ec <_printf_i+0x1c4>
   332cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   332ce:	68e0      	ldr	r0, [r4, #12]
   332d0:	4298      	cmp	r0, r3
   332d2:	da3d      	bge.n	33350 <_printf_i+0x228>
   332d4:	0018      	movs	r0, r3
   332d6:	e03b      	b.n	33350 <_printf_i+0x228>
   332d8:	0022      	movs	r2, r4
   332da:	2301      	movs	r3, #1
   332dc:	3219      	adds	r2, #25
   332de:	9906      	ldr	r1, [sp, #24]
   332e0:	9805      	ldr	r0, [sp, #20]
   332e2:	9e07      	ldr	r6, [sp, #28]
   332e4:	47b0      	blx	r6
   332e6:	1c43      	adds	r3, r0, #1
   332e8:	d030      	beq.n	3334c <_printf_i+0x224>
   332ea:	3501      	adds	r5, #1
   332ec:	68e3      	ldr	r3, [r4, #12]
   332ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   332f0:	1a9b      	subs	r3, r3, r2
   332f2:	429d      	cmp	r5, r3
   332f4:	dbf0      	blt.n	332d8 <_printf_i+0x1b0>
   332f6:	e7e9      	b.n	332cc <_printf_i+0x1a4>
   332f8:	2d00      	cmp	r5, #0
   332fa:	d0a9      	beq.n	33250 <_printf_i+0x128>
   332fc:	9e04      	ldr	r6, [sp, #16]
   332fe:	0028      	movs	r0, r5
   33300:	0039      	movs	r1, r7
   33302:	f7fd f977 	bl	305f4 <__aeabi_uidivmod>
   33306:	9b03      	ldr	r3, [sp, #12]
   33308:	3e01      	subs	r6, #1
   3330a:	5c5b      	ldrb	r3, [r3, r1]
   3330c:	0028      	movs	r0, r5
   3330e:	7033      	strb	r3, [r6, #0]
   33310:	0039      	movs	r1, r7
   33312:	f7fd f8e9 	bl	304e8 <__udivsi3>
   33316:	1e05      	subs	r5, r0, #0
   33318:	d1f1      	bne.n	332fe <_printf_i+0x1d6>
   3331a:	2f08      	cmp	r7, #8
   3331c:	d109      	bne.n	33332 <_printf_i+0x20a>
   3331e:	6823      	ldr	r3, [r4, #0]
   33320:	07db      	lsls	r3, r3, #31
   33322:	d506      	bpl.n	33332 <_printf_i+0x20a>
   33324:	6863      	ldr	r3, [r4, #4]
   33326:	6922      	ldr	r2, [r4, #16]
   33328:	4293      	cmp	r3, r2
   3332a:	dc02      	bgt.n	33332 <_printf_i+0x20a>
   3332c:	2330      	movs	r3, #48	; 0x30
   3332e:	3e01      	subs	r6, #1
   33330:	7033      	strb	r3, [r6, #0]
   33332:	9b04      	ldr	r3, [sp, #16]
   33334:	1b9b      	subs	r3, r3, r6
   33336:	6123      	str	r3, [r4, #16]
   33338:	9b07      	ldr	r3, [sp, #28]
   3333a:	aa09      	add	r2, sp, #36	; 0x24
   3333c:	9300      	str	r3, [sp, #0]
   3333e:	0021      	movs	r1, r4
   33340:	9b06      	ldr	r3, [sp, #24]
   33342:	9805      	ldr	r0, [sp, #20]
   33344:	f7ff fe82 	bl	3304c <_printf_common>
   33348:	1c43      	adds	r3, r0, #1
   3334a:	d1b3      	bne.n	332b4 <_printf_i+0x18c>
   3334c:	2001      	movs	r0, #1
   3334e:	4240      	negs	r0, r0
   33350:	b00b      	add	sp, #44	; 0x2c
   33352:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33354:	000374ec 	.word	0x000374ec
   33358:	000374db 	.word	0x000374db

0003335c <__sread>:
   3335c:	b570      	push	{r4, r5, r6, lr}
   3335e:	000c      	movs	r4, r1
   33360:	250e      	movs	r5, #14
   33362:	5f49      	ldrsh	r1, [r1, r5]
   33364:	f000 f8f0 	bl	33548 <_read_r>
   33368:	2800      	cmp	r0, #0
   3336a:	db03      	blt.n	33374 <__sread+0x18>
   3336c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   3336e:	181b      	adds	r3, r3, r0
   33370:	6563      	str	r3, [r4, #84]	; 0x54
   33372:	bd70      	pop	{r4, r5, r6, pc}
   33374:	89a3      	ldrh	r3, [r4, #12]
   33376:	4a02      	ldr	r2, [pc, #8]	; (33380 <__sread+0x24>)
   33378:	4013      	ands	r3, r2
   3337a:	81a3      	strh	r3, [r4, #12]
   3337c:	e7f9      	b.n	33372 <__sread+0x16>
   3337e:	46c0      	nop			; (mov r8, r8)
   33380:	ffffefff 	.word	0xffffefff

00033384 <__swrite>:
   33384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33386:	001f      	movs	r7, r3
   33388:	898b      	ldrh	r3, [r1, #12]
   3338a:	0005      	movs	r5, r0
   3338c:	000c      	movs	r4, r1
   3338e:	0016      	movs	r6, r2
   33390:	05db      	lsls	r3, r3, #23
   33392:	d505      	bpl.n	333a0 <__swrite+0x1c>
   33394:	230e      	movs	r3, #14
   33396:	5ec9      	ldrsh	r1, [r1, r3]
   33398:	2200      	movs	r2, #0
   3339a:	2302      	movs	r3, #2
   3339c:	f000 f88e 	bl	334bc <_lseek_r>
   333a0:	89a3      	ldrh	r3, [r4, #12]
   333a2:	4a05      	ldr	r2, [pc, #20]	; (333b8 <__swrite+0x34>)
   333a4:	0028      	movs	r0, r5
   333a6:	4013      	ands	r3, r2
   333a8:	81a3      	strh	r3, [r4, #12]
   333aa:	0032      	movs	r2, r6
   333ac:	230e      	movs	r3, #14
   333ae:	5ee1      	ldrsh	r1, [r4, r3]
   333b0:	003b      	movs	r3, r7
   333b2:	f000 f839 	bl	33428 <_write_r>
   333b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   333b8:	ffffefff 	.word	0xffffefff

000333bc <__sseek>:
   333bc:	b570      	push	{r4, r5, r6, lr}
   333be:	000c      	movs	r4, r1
   333c0:	250e      	movs	r5, #14
   333c2:	5f49      	ldrsh	r1, [r1, r5]
   333c4:	f000 f87a 	bl	334bc <_lseek_r>
   333c8:	89a3      	ldrh	r3, [r4, #12]
   333ca:	1c42      	adds	r2, r0, #1
   333cc:	d103      	bne.n	333d6 <__sseek+0x1a>
   333ce:	4a05      	ldr	r2, [pc, #20]	; (333e4 <__sseek+0x28>)
   333d0:	4013      	ands	r3, r2
   333d2:	81a3      	strh	r3, [r4, #12]
   333d4:	bd70      	pop	{r4, r5, r6, pc}
   333d6:	2280      	movs	r2, #128	; 0x80
   333d8:	0152      	lsls	r2, r2, #5
   333da:	4313      	orrs	r3, r2
   333dc:	81a3      	strh	r3, [r4, #12]
   333de:	6560      	str	r0, [r4, #84]	; 0x54
   333e0:	e7f8      	b.n	333d4 <__sseek+0x18>
   333e2:	46c0      	nop			; (mov r8, r8)
   333e4:	ffffefff 	.word	0xffffefff

000333e8 <__sclose>:
   333e8:	b510      	push	{r4, lr}
   333ea:	230e      	movs	r3, #14
   333ec:	5ec9      	ldrsh	r1, [r1, r3]
   333ee:	f000 f82f 	bl	33450 <_close_r>
   333f2:	bd10      	pop	{r4, pc}

000333f4 <strchr>:
   333f4:	b2c9      	uxtb	r1, r1
   333f6:	7803      	ldrb	r3, [r0, #0]
   333f8:	2b00      	cmp	r3, #0
   333fa:	d004      	beq.n	33406 <strchr+0x12>
   333fc:	4299      	cmp	r1, r3
   333fe:	d100      	bne.n	33402 <strchr+0xe>
   33400:	4770      	bx	lr
   33402:	3001      	adds	r0, #1
   33404:	e7f7      	b.n	333f6 <strchr+0x2>
   33406:	424b      	negs	r3, r1
   33408:	4159      	adcs	r1, r3
   3340a:	4249      	negs	r1, r1
   3340c:	4008      	ands	r0, r1
   3340e:	e7f7      	b.n	33400 <strchr+0xc>

00033410 <__ascii_wctomb>:
   33410:	1e0b      	subs	r3, r1, #0
   33412:	d004      	beq.n	3341e <__ascii_wctomb+0xe>
   33414:	2aff      	cmp	r2, #255	; 0xff
   33416:	d904      	bls.n	33422 <__ascii_wctomb+0x12>
   33418:	238a      	movs	r3, #138	; 0x8a
   3341a:	6003      	str	r3, [r0, #0]
   3341c:	3b8b      	subs	r3, #139	; 0x8b
   3341e:	0018      	movs	r0, r3
   33420:	4770      	bx	lr
   33422:	700a      	strb	r2, [r1, #0]
   33424:	2301      	movs	r3, #1
   33426:	e7fa      	b.n	3341e <__ascii_wctomb+0xe>

00033428 <_write_r>:
   33428:	b570      	push	{r4, r5, r6, lr}
   3342a:	0005      	movs	r5, r0
   3342c:	0008      	movs	r0, r1
   3342e:	0011      	movs	r1, r2
   33430:	2200      	movs	r2, #0
   33432:	4c06      	ldr	r4, [pc, #24]	; (3344c <_write_r+0x24>)
   33434:	6022      	str	r2, [r4, #0]
   33436:	001a      	movs	r2, r3
   33438:	f7f5 fc60 	bl	28cfc <_write>
   3343c:	1c43      	adds	r3, r0, #1
   3343e:	d103      	bne.n	33448 <_write_r+0x20>
   33440:	6823      	ldr	r3, [r4, #0]
   33442:	2b00      	cmp	r3, #0
   33444:	d000      	beq.n	33448 <_write_r+0x20>
   33446:	602b      	str	r3, [r5, #0]
   33448:	bd70      	pop	{r4, r5, r6, pc}
   3344a:	46c0      	nop			; (mov r8, r8)
   3344c:	20005600 	.word	0x20005600

00033450 <_close_r>:
   33450:	2300      	movs	r3, #0
   33452:	b570      	push	{r4, r5, r6, lr}
   33454:	4c06      	ldr	r4, [pc, #24]	; (33470 <_close_r+0x20>)
   33456:	0005      	movs	r5, r0
   33458:	0008      	movs	r0, r1
   3345a:	6023      	str	r3, [r4, #0]
   3345c:	f7f5 fca2 	bl	28da4 <_close>
   33460:	1c43      	adds	r3, r0, #1
   33462:	d103      	bne.n	3346c <_close_r+0x1c>
   33464:	6823      	ldr	r3, [r4, #0]
   33466:	2b00      	cmp	r3, #0
   33468:	d000      	beq.n	3346c <_close_r+0x1c>
   3346a:	602b      	str	r3, [r5, #0]
   3346c:	bd70      	pop	{r4, r5, r6, pc}
   3346e:	46c0      	nop			; (mov r8, r8)
   33470:	20005600 	.word	0x20005600

00033474 <_fstat_r>:
   33474:	2300      	movs	r3, #0
   33476:	b570      	push	{r4, r5, r6, lr}
   33478:	4c06      	ldr	r4, [pc, #24]	; (33494 <_fstat_r+0x20>)
   3347a:	0005      	movs	r5, r0
   3347c:	0008      	movs	r0, r1
   3347e:	0011      	movs	r1, r2
   33480:	6023      	str	r3, [r4, #0]
   33482:	f7f5 fc99 	bl	28db8 <_fstat>
   33486:	1c43      	adds	r3, r0, #1
   33488:	d103      	bne.n	33492 <_fstat_r+0x1e>
   3348a:	6823      	ldr	r3, [r4, #0]
   3348c:	2b00      	cmp	r3, #0
   3348e:	d000      	beq.n	33492 <_fstat_r+0x1e>
   33490:	602b      	str	r3, [r5, #0]
   33492:	bd70      	pop	{r4, r5, r6, pc}
   33494:	20005600 	.word	0x20005600

00033498 <_isatty_r>:
   33498:	2300      	movs	r3, #0
   3349a:	b570      	push	{r4, r5, r6, lr}
   3349c:	4c06      	ldr	r4, [pc, #24]	; (334b8 <_isatty_r+0x20>)
   3349e:	0005      	movs	r5, r0
   334a0:	0008      	movs	r0, r1
   334a2:	6023      	str	r3, [r4, #0]
   334a4:	f7f5 fc96 	bl	28dd4 <_isatty>
   334a8:	1c43      	adds	r3, r0, #1
   334aa:	d103      	bne.n	334b4 <_isatty_r+0x1c>
   334ac:	6823      	ldr	r3, [r4, #0]
   334ae:	2b00      	cmp	r3, #0
   334b0:	d000      	beq.n	334b4 <_isatty_r+0x1c>
   334b2:	602b      	str	r3, [r5, #0]
   334b4:	bd70      	pop	{r4, r5, r6, pc}
   334b6:	46c0      	nop			; (mov r8, r8)
   334b8:	20005600 	.word	0x20005600

000334bc <_lseek_r>:
   334bc:	b570      	push	{r4, r5, r6, lr}
   334be:	0005      	movs	r5, r0
   334c0:	0008      	movs	r0, r1
   334c2:	0011      	movs	r1, r2
   334c4:	2200      	movs	r2, #0
   334c6:	4c06      	ldr	r4, [pc, #24]	; (334e0 <_lseek_r+0x24>)
   334c8:	6022      	str	r2, [r4, #0]
   334ca:	001a      	movs	r2, r3
   334cc:	f7f5 fc8b 	bl	28de6 <_lseek>
   334d0:	1c43      	adds	r3, r0, #1
   334d2:	d103      	bne.n	334dc <_lseek_r+0x20>
   334d4:	6823      	ldr	r3, [r4, #0]
   334d6:	2b00      	cmp	r3, #0
   334d8:	d000      	beq.n	334dc <_lseek_r+0x20>
   334da:	602b      	str	r3, [r5, #0]
   334dc:	bd70      	pop	{r4, r5, r6, pc}
   334de:	46c0      	nop			; (mov r8, r8)
   334e0:	20005600 	.word	0x20005600

000334e4 <memchr>:
   334e4:	b2c9      	uxtb	r1, r1
   334e6:	1882      	adds	r2, r0, r2
   334e8:	4290      	cmp	r0, r2
   334ea:	d101      	bne.n	334f0 <memchr+0xc>
   334ec:	2000      	movs	r0, #0
   334ee:	4770      	bx	lr
   334f0:	7803      	ldrb	r3, [r0, #0]
   334f2:	428b      	cmp	r3, r1
   334f4:	d0fb      	beq.n	334ee <memchr+0xa>
   334f6:	3001      	adds	r0, #1
   334f8:	e7f6      	b.n	334e8 <memchr+0x4>

000334fa <_realloc_r>:
   334fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   334fc:	0007      	movs	r7, r0
   334fe:	000d      	movs	r5, r1
   33500:	0016      	movs	r6, r2
   33502:	2900      	cmp	r1, #0
   33504:	d105      	bne.n	33512 <_realloc_r+0x18>
   33506:	0011      	movs	r1, r2
   33508:	f7fe fe9e 	bl	32248 <_malloc_r>
   3350c:	0004      	movs	r4, r0
   3350e:	0020      	movs	r0, r4
   33510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33512:	2a00      	cmp	r2, #0
   33514:	d103      	bne.n	3351e <_realloc_r+0x24>
   33516:	f7fe fe4d 	bl	321b4 <_free_r>
   3351a:	0034      	movs	r4, r6
   3351c:	e7f7      	b.n	3350e <_realloc_r+0x14>
   3351e:	f000 f827 	bl	33570 <_malloc_usable_size_r>
   33522:	002c      	movs	r4, r5
   33524:	4286      	cmp	r6, r0
   33526:	d9f2      	bls.n	3350e <_realloc_r+0x14>
   33528:	0031      	movs	r1, r6
   3352a:	0038      	movs	r0, r7
   3352c:	f7fe fe8c 	bl	32248 <_malloc_r>
   33530:	1e04      	subs	r4, r0, #0
   33532:	d0ec      	beq.n	3350e <_realloc_r+0x14>
   33534:	0029      	movs	r1, r5
   33536:	0032      	movs	r2, r6
   33538:	f7fe fe18 	bl	3216c <memcpy>
   3353c:	0029      	movs	r1, r5
   3353e:	0038      	movs	r0, r7
   33540:	f7fe fe38 	bl	321b4 <_free_r>
   33544:	e7e3      	b.n	3350e <_realloc_r+0x14>
	...

00033548 <_read_r>:
   33548:	b570      	push	{r4, r5, r6, lr}
   3354a:	0005      	movs	r5, r0
   3354c:	0008      	movs	r0, r1
   3354e:	0011      	movs	r1, r2
   33550:	2200      	movs	r2, #0
   33552:	4c06      	ldr	r4, [pc, #24]	; (3356c <_read_r+0x24>)
   33554:	6022      	str	r2, [r4, #0]
   33556:	001a      	movs	r2, r3
   33558:	f7f5 fba6 	bl	28ca8 <_read>
   3355c:	1c43      	adds	r3, r0, #1
   3355e:	d103      	bne.n	33568 <_read_r+0x20>
   33560:	6823      	ldr	r3, [r4, #0]
   33562:	2b00      	cmp	r3, #0
   33564:	d000      	beq.n	33568 <_read_r+0x20>
   33566:	602b      	str	r3, [r5, #0]
   33568:	bd70      	pop	{r4, r5, r6, pc}
   3356a:	46c0      	nop			; (mov r8, r8)
   3356c:	20005600 	.word	0x20005600

00033570 <_malloc_usable_size_r>:
   33570:	1f0b      	subs	r3, r1, #4
   33572:	681b      	ldr	r3, [r3, #0]
   33574:	1f18      	subs	r0, r3, #4
   33576:	2b00      	cmp	r3, #0
   33578:	da01      	bge.n	3357e <_malloc_usable_size_r+0xe>
   3357a:	580b      	ldr	r3, [r1, r0]
   3357c:	18c0      	adds	r0, r0, r3
   3357e:	4770      	bx	lr

00033580 <pcWelcomeMessage>:
   33580:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   33590:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   335a0:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   335b0:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   335c0:	000a 0000 7766 0000 7766 203a 6f44 6e77     ....fw..fw: Down
   335d0:	6f6c 6461 6120 6620 6c69 2065 6e61 2064     load a file and 
   335e0:	6570 6672 726f 206d 6e61 4620 2057 7075     perform an FW up
   335f0:	6164 6574 0a0d 0000 6572 6573 0074 0000     date....reset...
   33600:	6572 6573 3a74 5220 7365 7465 2073 6874     reset: Resets th
   33610:	2065 6564 6976 6563 0a0d 0000 3269 0063     e device....i2c.
   33620:	3269 3a63 5320 6163 736e 4920 4332 6220     i2c: Scans I2C b
   33630:	7375 0a0d 0000 0000 6576 7372 6f69 006e     us......version.
   33640:	6576 7372 6f69 3a6e 5020 6972 746e 2073     version: Prints 
   33650:	2061 6966 6d72 6177 6572 7620 7265 6973     a firmware versi
   33660:	6e6f 0a0d 0000 0000 6974 6b63 0073 0000     on......ticks...
   33670:	6974 6b63 3a73 5020 6972 746e 2073 6874     ticks: Prints th
   33680:	2065 756e 626d 7265 6f20 2066 6974 6b63     e number of tick
   33690:	2073 6973 636e 2065 6874 2065 6373 6568     s since the sche
   336a0:	7564 656c 2072 6177 2073 7473 7261 6574     duler was starte
   336b0:	0d64 000a 6c63 0073 6c63 3a73 4320 656c     d...cls.cls: Cle
   336c0:	7261 2073 6874 2065 6574 6d72 6e69 6c61     ars the terminal
   336d0:	7320 7263 6565 0d6e 000a 0000 6f43 6c75      screen.....Coul
   336e0:	2064 6f6e 2074 6c61 6f6c 6163 6574 7320     d not allocate s
   336f0:	6d65 7061 6f68 6572 0a0d 0000 0a0d 0000     emaphore........
   33700:	616f 0000 6325 325b 0d4b 003e 2008 0008     oa..%c[2K.>.. ..
   33710:	6325 325b 004a 0000 0a0d 6556 7372 6f69     %c[2J.....Versio
   33720:	206e 754e 626d 7265 203a 0000 2e30 2e35     n Number: ..0.5.
   33730:	2e31 2e36 0030 0000 0a0d 0a0d 0000 0000     1.6.0...........
   33740:	0a0d 6954 6b63 2073 6973 636e 2065 7473     ..Ticks since st
   33750:	7261 2074 666f 7320 6863 6465 6c75 7265     art of scheduler
   33760:	203a 0000 6c25 0d75 000a 0000 2030 3120     : ..%lu.....0  1
   33770:	2020 2032 3320 2020 2034 3520 2020 2036       2  3  4  5  6 
   33780:	3720 2020 2038 3920 2020 2061 6220 2020      7  8  9  a  b  
   33790:	2063 6420 2020 2065 6620 0a0d 0000 0000     c  d  e  f......
   337a0:	3025 7832 203a 0000 2058 0000               %02x: ..X ..

000337ac <xOTAUCommand>:
   337ac:	35c4 0003 35c8 0003 3085 0001 0000 0000     .5...5...0......

000337bc <xResetCommand>:
   337bc:	35f8 0003 3600 0003 30bd 0001 0000 0000     .5...6...0......

000337cc <xI2cScan>:
   337cc:	361c 0003 3620 0003 3171 0001 0000 0000     .6.. 6..q1......

000337dc <xVersion>:
   337dc:	3638 0003 3640 0003 30dd 0001 0000 0000     86..@6...0......

000337ec <xTicks>:
   337ec:	3668 0003 3670 0003 311d 0001 0000 0000     h6..p6...1......

000337fc <xClearScreen>:
   337fc:	36b4 0003 36b8 0003 303d 0001 0000 0000     .6...6..=0......

0003380c <main_mqtt_broker>:
   3380c:	3331 392e 2e30 3331 2e36 3631 0032 0000     13.90.136.162...
   3381c:	3025 6433 0000 0000 7473 7261 5f74 6f64     %03d....start_do
   3382c:	6e77 6f6c 6461 203a 4d4d 2043 7473 726f     wnload: MMC stor
   3383c:	6761 2065 6f6e 2074 6572 6461 2e79 0a0d     age not ready...
   3384c:	0000 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   3385c:	6461 203a 6957 462d 2069 7369 6e20 746f     ad: Wi-Fi is not
   3386c:	6320 6e6f 656e 7463 6465 0d2e 000a 0000      connected......
   3387c:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   3388c:	6572 7571 7365 2074 7369 7320 6e65 2074     request is sent 
   3389c:	6c61 6572 6461 2e79 0a0d 0000 7473 7261     already.....star
   338ac:	5f74 6f64 6e77 6f6c 6461 203a 7572 6e6e     t_download: runn
   338bc:	6e69 2067 6f64 6e77 6f6c 6461 6120 726c     ing download alr
   338cc:	6165 7964 0d2e 000a 7473 7261 5f74 6f64     eady....start_do
   338dc:	6e77 6f6c 6461 203a 6573 646e 6e69 2067     wnload: sending 
   338ec:	5448 5054 7220 7165 6575 7473 2e2e 0d2e     HTTP request....
   338fc:	000a 0000 7468 7074 2f3a 312f 2e33 3039     ....http://13.90
   3390c:	312e 3633 312e 3236 542f 7365 4174 622e     .136.162/TestA.b
   3391c:	6e69 0000 7473 726f 5f65 6966 656c 705f     in..store_file_p
   3392c:	6361 656b 3a74 6520 706d 7974 6420 7461     acket: empty dat
   3393c:	2e61 0a0d 0000 0000 7473 726f 5f65 6966     a.......store_fi
   3394c:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   3395c:	616e 656d 6920 2073 6e69 6176 696c 2e64     name is invalid.
   3396c:	4420 776f 6c6e 616f 2064 6163 636e 6c65      Download cancel
   3397c:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   3398c:	656c 705f 6361 656b 3a74 6320 6572 7461     le_packet: creat
   3399c:	6e69 2067 6966 656c 5b20 7325 0d5d 000a     ing file [%s]...
   339ac:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   339bc:	3a74 6620 6c69 2065 7263 6165 6974 6e6f     t: file creation
   339cc:	6520 7272 726f 2021 6572 3a74 6425 0a0d      error! ret:%d..
   339dc:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   339ec:	6361 656b 3a74 6620 6c69 2065 7277 7469     acket: file writ
   339fc:	2065 7265 6f72 2c72 6420 776f 6c6e 616f     e error, downloa
   33a0c:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   33a1c:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   33a2c:	3a74 7220 6365 6965 6576 5b64 6c25 5d75     t: received[%lu]
   33a3c:	202c 6966 656c 7320 7a69 5b65 6c25 5d75     , file size[%lu]
   33a4c:	0a0d 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   33a5c:	6361 656b 3a74 6620 6c69 2065 6f64 6e77     acket: file down
   33a6c:	6f6c 6461 6465 7320 6375 6563 7373 7566     loaded successfu
   33a7c:	6c6c 2e79 0a0d 0000 7468 7074 635f 696c     lly.....http_cli
   33a8c:	6e65 5f74 6163 6c6c 6162 6b63 203a 5448     ent_callback: HT
   33a9c:	5054 6320 696c 6e65 2074 6f73 6b63 7465     TP client socket
   33aac:	6320 6e6f 656e 7463 6465 0d2e 000a 0000      connected......
   33abc:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   33acc:	6162 6b63 203a 6572 7571 7365 2074 6f63     back: request co
   33adc:	706d 656c 6574 2e64 0a0d 0000 7468 7074     mpleted.....http
   33aec:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   33afc:	203a 6572 6563 7669 6465 7220 7365 6f70     : received respo
   33b0c:	736e 2065 7525 6420 7461 2061 6973 657a     nse %u data size
   33b1c:	2520 0d75 000a 0000 7468 7074 635f 696c      %u.....http_cli
   33b2c:	6e65 5f74 6163 6c6c 6162 6b63 203a 6964     ent_callback: di
   33b3c:	6373 6e6f 656e 7463 6f69 206e 6572 7361     sconnection reas
   33b4c:	6e6f 253a 0d64 000a 6572 6f73 766c 5f65     on:%d...resolve_
   33b5c:	6263 203a 7325 4920 2050 6461 7264 7365     cb: %s IP addres
   33b6c:	2073 7369 2520 2e64 6425 252e 2e64 6425     s is %d.%d.%d.%d
   33b7c:	0a0d 0a0d 0000 0000 6977 6966 635f 3a62     ........wifi_cb:
   33b8c:	4d20 4d32 575f 4649 5f49 4f43 4e4e 4345      M2M_WIFI_CONNEC
   33b9c:	4554 0d44 000a 0000 6977 6966 635f 3a62     TED.....wifi_cb:
   33bac:	4d20 4d32 575f 4649 5f49 4944 4353 4e4f      M2M_WIFI_DISCON
   33bbc:	454e 5443 4445 0a0d 0000 0000 6570 6e6e     NECTED......penn
   33bcc:	3731 3034 6977 6966 0000 0000 6941 5072     1740wifi....AirP
   33bdc:	6e65 4e6e 7465 442d 7665 6369 0065 0000     ennNet-Device...
   33bec:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
   33bfc:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
   33c0c:	7525 0a0d 0000 0000 7245 6f72 2072 6f63     %u......Error co
   33c1c:	6e6e 6365 6974 676e 7420 206f 514d 5454     nnecting to MQTT
   33c2c:	4220 6f72 656b 2172 0a0d 0000 6e69 7469      Broker!....init
   33c3c:	735f 6f74 6172 6567 203a 6c70 6165 6573     _storage: please
   33c4c:	7020 756c 2067 6e61 5320 2f44 4d4d 2043      plug an SD/MMC 
   33c5c:	6163 6472 6920 206e 6c73 746f 2e2e 0d2e     card in slot....
   33c6c:	000a 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   33c7c:	203a 4453 4320 7261 2064 6e69 7473 6c61     : SD Card instal
   33c8c:	206c 6166 6c69 6465 0d2e 000a 6e69 7469     l failed....init
   33c9c:	735f 6f74 6172 6567 203a 7274 2079 6e75     _storage: try un
   33cac:	6c70 6775 6120 646e 7220 2d65 6c70 6775     plug and re-plug
   33cbc:	7420 6568 6320 7261 2e64 0a0d 0000 0000      the card.......
   33ccc:	6e69 7469 735f 6f74 6172 6567 203a 6f6d     init_storage: mo
   33cdc:	6e75 6974 676e 5320 2044 6163 6472 2e2e     unting SD card..
   33cec:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   33cfc:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   33d0c:	6166 6c69 6465 2021 7228 7365 2520 2964     failed! (res %d)
   33d1c:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   33d2c:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   33d3c:	4b4f 0d2e 000a 0000 6f63 666e 6769 7275     OK......configur
   33d4c:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
   33d5c:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
   33d6c:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
   33d7c:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
   33d8c:	0a0d 2520 2a2e 0073 6772 2862 0000 0000     .. %.*s.rgb(....
   33d9c:	0a0d 4752 2042 6425 2520 2064 6425 0a0d     ..RGB %d %d %d..
   33dac:	0000 0000 227b 6167 656d 3a22 005b 0000     ....{"game":[...
   33dbc:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   33dcc:	6365 6965 6576 2164 0a0d 0000 2e25 732a     eceived!....%.*s
   33ddc:	0000 0000 0a0d 6150 7372 6465 4320 6d6f     ......Parsed Com
   33dec:	616d 646e 203a 0000 6425 002c 0a0d 6147     mand: ..%d,...Ga
   33dfc:	656d 6d20 7365 6173 6567 7220 6365 6965     me message recei
   33e0c:	6576 2064 7562 2074 6f6e 2074 6e75 6564     ved but not unde
   33e1c:	7372 6f74 646f 0d21 000a 0000 0a0d 4d49     rstood!.......IM
   33e2c:	2055 6f74 6970 2063 6572 6563 7669 6465     U topic received
   33e3c:	0d21 000a 0a0d 6944 7473 6e61 6563 7420     !.....Distance t
   33e4c:	706f 6369 7220 6365 6965 6576 2164 0a0d     opic received!..
   33e5c:	0000 0000 3e20 203e 0000 0000 3150 4c5f     .... >> ....P1_L
   33e6c:	4445 455f 4553 3135 5f36 3054 0000 0000     ED_ESE516_T0....
   33e7c:	6166 736c 0065 0000 7274 6575 0000 0000     false...true....
   33e8c:	0a0d 6f43 6e6e 6365 6974 676e 7420 206f     ..Connecting to 
   33e9c:	7242 6b6f 7265 2e2e 002e 0000 7242 4a73     Broker......BrsJ
   33eac:	4e42 6f56 4251 376c 0000 0000 7472 7974     BNVoQBl7....rtty
   33ebc:	626f 6a65 0000 0000 514d 5454 2020 7245     obej....MQTT  Er
   33ecc:	6f72 2072 202d 4f4e 2054 6f43 6e6e 6365     ror - NOT Connec
   33edc:	6574 2064 6f74 6220 6f72 656b 0d72 000a     ted to broker...
   33eec:	514d 5454 4320 6e6f 656e 7463 6465 7420     MQTT Connected t
   33efc:	206f 7262 6b6f 7265 0a0d 0000 6f43 6e6e     o broker....Conn
   33f0c:	6365 2074 6166 6c69 7420 206f 6573 7672     ect fail to serv
   33f1c:	7265 2528 2973 2021 6572 7274 2079 7469     er(%s)! retry it
   33f2c:	6120 7475 6d6f 7461 6369 6c61 796c 0d2e      automatically..
   33f3c:	000a 0000 3150 475f 4d41 5f45 5345 3545     ....P1_GAME_ESE5
   33f4c:	3631 545f 0030 0000 3150 495f 554d 455f     16_T0...P1_IMU_E
   33f5c:	4553 3135 5f36 3054 0000 0000 4544 5542     SE516_T0....DEBU
   33f6c:	5f47 3154 0000 0000 514d 5454 4320 6e6f     G_T1....MQTT Con
   33f7c:	656e 7463 6465 0a0d 0000 0000 514d 5454     nected......MQTT
   33f8c:	6220 6f72 656b 2072 6564 6c63 6e69 2065      broker decline 
   33f9c:	6f79 7275 6120 6363 7365 2173 6520 7272     your access! err
   33fac:	726f 6320 646f 2065 6425 0a0d 0000 0000     or code %d......
   33fbc:	514d 5454 6420 7369 6f63 6e6e 6365 6574     MQTT disconnecte
   33fcc:	0d64 000a 514d 5454 6920 696e 6974 6c61     d...MQTT initial
   33fdc:	7a69 7461 6f69 206e 6166 6c69 6465 202e     ization failed. 
   33fec:	7245 6f72 2072 6f63 6564 6920 2073 2528     Error code is (%
   33ffc:	2964 0a0d 0000 0000 514d 5454 7220 6765     d)......MQTT reg
   3400c:	7369 6574 2072 6163 6c6c 6162 6b63 6620     ister callback f
   3401c:	6961 656c 2e64 4520 7272 726f 6320 646f     ailed. Error cod
   3402c:	2065 7369 2820 6425 0d29 000a 227b 2264     e is (%d)...{"d"
   3403c:	7b3a 7422 6d65 2270 253a 7d64 007d 0000     :{"temp":%d}}...
   3404c:	465b 4941 5d4c 7220 7365 2520 0d64 000a     [FAIL] res %d...
   3405c:	6c46 6761 2e41 7874 2074 6461 6564 2164     FlagA.txt added!
   3406c:	0a0d 0000 3a30 6c46 6761 2e41 7874 0074     ....0:FlagA.txt.
   3407c:	6f43 6e6e 6365 6574 2064 6f74 4d20 5451     Connected to MQT
   3408c:	2054 7242 6b6f 7265 0d21 000a 227b 6d69     T Broker!...{"im
   3409c:	7875 3a22 6425 202c 6922 756d 2279 203a     ux":%d, "imuy": 
   340ac:	6425 202c 6922 756d 227a 203a 6425 007d     %d, "imuz": %d}.
   340bc:	6425 0000 7d5d 0000 0a0d 0000 3250 475f     %d..]}......P2_G
   340cc:	4d41 5f45 5345 3545 3631 545f 0030 0000     AME_ESE516_T0...
   340dc:	4544 5542 5f47 3054 0000 0000 5245 4f52     DEBUG_T0....ERRO
   340ec:	2052 6e49 7469 6169 696c 697a 676e 5720     R Initializing W
   340fc:	6669 2069 6144 6174 7120 6575 6575 2173     ifi Data queues!
   3410c:	0a0d 0000 5345 3545 3631 2d20 5720 6669     ....ESE516 - Wif
   3411c:	2069 6e49 7469 4320 646f 0d65 000a 0000     i Init Code.....
   3412c:	616d 6e69 203a 326d 5f6d 6977 6966 695f     main: m2m_wifi_i
   3413c:	696e 2074 6163 6c6c 6520 7272 726f 2021     nit call error! 
   3414c:	7228 7365 2520 2964 0a0d 0000 616d 6e69     (res %d)....main
   3415c:	203a 6f63 6e6e 6365 6974 676e 7420 206f     : connecting to 
   3416c:	6957 6946 4120 2050 7325 2e2e 0d2e 000a     WiFi AP %s......
   3417c:	3150 545f 4d45 4550 4152 5554 4552 455f     P1_TEMPERATURE_E
   3418c:	4553 3135 5f36 3054 0000 0000 514d 5454     SE516_T0....MQTT
   3419c:	7320 6e65 2064 7325 0a0d 0000 4094 0001      send %s.....@..
   341ac:	40a0 0001 40b2 0001 4108 0001 4128 0001     .@...@...A..(A..
   341bc:	6568 706c 0000 0000 0a0d 6568 706c 0d3a     help......help:.
   341cc:	200a 694c 7473 2073 6c61 206c 6874 2065     . Lists all the 
   341dc:	6572 6967 7473 7265 6465 6320 6d6f 616d     registered comma
   341ec:	646e 0d73 0d0a 000a 6e49 6f63 7272 6365     nds.....Incorrec
   341fc:	2074 6f63 6d6d 6e61 2064 6170 6172 656d     t command parame
   3420c:	6574 2872 2973 202e 4520 746e 7265 2220     ter(s).  Enter "
   3421c:	6568 706c 2022 6f74 7620 6569 2077 2061     help" to view a 
   3422c:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   3423c:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......
   3424c:	6f43 6d6d 6e61 2064 6f6e 2074 6572 6f63     Command not reco
   3425c:	6e67 7369 6465 202e 4520 746e 7265 2720     gnised.  Enter '
   3426c:	6568 706c 2027 6f74 7620 6569 2077 2061     help' to view a 
   3427c:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   3428c:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......

0003429c <xHelpCommand>:
   3429c:	41bc 0003 41c4 0003 5c1d 0001 0000 0000     .A...A...\......
   342ac:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   342bc:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   342cc:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   342dc:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   342ec:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   342fc:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   3430c:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   3431c:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   3432c:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   3433c:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   3434c:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   3435c:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   3436c:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   3437c:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   3438c:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   3439c:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   343ac:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   343bc:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   343cc:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   343dc:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   343ec:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   343fc:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   3440c:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   3441c:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   3442c:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   3443c:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   3444c:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   3445c:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   3446c:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   3447c:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   3448c:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   3449c:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   344ac:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   344bc:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   344cc:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   344dc:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   344ec:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   344fc:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   3450c:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   3451c:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   3452c:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   3453c:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   3454c:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   3455c:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   3456c:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   3457c:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   3458c:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   3459c:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   345ac:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   345bc:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   345cc:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   345dc:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   345ec:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   345fc:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   3460c:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   3461c:	6365 6374 616c 7373 0021 0000 6342 0001     ectclass!...Bc..
   3462c:	633a 0001 633e 0001 6332 0001 6336 0001     :c..>c..2c..6c..
   3463c:	6346 0001 634a 0001 634e 0001 6352 0001     Fc..Jc..Nc..Rc..
   3464c:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   3465c:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   3466c:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   3467c:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   3468c:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   3469c:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   346ac:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   346bc:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   346cc:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   346dc:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   346ec:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   346fc:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   3470c:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   3471c:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   3472c:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   3473c:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   3474c:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   3475c:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   3476c:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   3477c:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   3478c:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   3479c:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   347ac:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   347bc:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   347cc:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   347dc:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   347ec:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   347fc:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   3480c:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   3481c:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   3482c:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   3483c:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   3484c:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   3485c:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   3486c:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   3487c:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   3488c:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   3489c:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   348ac:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   348bc:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   348cc:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   348dc:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   348ec:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   348fc:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   3490c:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   3491c:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   3492c:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   3493c:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   3494c:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   3495c:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   3496c:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   3497c:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   3498c:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   3499c:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   349ac:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   349bc:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   349cc:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   349dc:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   349ec:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   349fc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   34a0c:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   34a1c:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   34a2c:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   34a3c:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   34a4c:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   34a5c:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   34a6c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   34a7c:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   34a8c:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   34a9c:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   34aac:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   34abc:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   34acc:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   34adc:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   34aec:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   34afc:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   34b0c:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   34b1c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   34b2c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   34b3c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   34b4c:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   34b5c:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   34b6c:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   34b7c:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   34b8c:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   34b9c:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   34bac:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   34bbc:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   34bcc:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   34bdc:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   34bec:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   34bfc:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   34c0c:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   34c1c:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   34c2c:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   34c3c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   34c4c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   34c5c:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   34c6c:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   34c7c:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   34c8c:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   34c9c:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   34cac:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   34cbc:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   34ccc:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   34cdc:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   34cec:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   34cfc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   34d0c:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   34d1c:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   34d2c:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   34d3c:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   34d4c:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   34d5c:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   34d6c:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   34d7c:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   34d8c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   34d9c:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   34dac:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   34dbc:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   34dcc:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   34ddc:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   34dec:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   34dfc:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   34e0c:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   34e1c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   34e2c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   34e3c:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   34e4c:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   34e5c:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   34e6c:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   34e7c:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   34e8c:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   34e9c:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   34eac:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   34ebc:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   34ecc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   34edc:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   34eec:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   34efc:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   34f0c:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   34f1c:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   34f2c:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   34f3c:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   34f4c:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   34f5c:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   34f6c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   34f7c:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   34f8c:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   34f9c:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   34fac:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   34fbc:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   34fcc:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   34fdc:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   34fec:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   34ffc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3500c:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   3501c:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   3502c:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   3503c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3504c:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   3505c:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   3506c:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   3507c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3508c:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   3509c:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   350ac:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   350bc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   350cc:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   350dc:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   350ec:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   350fc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3510c:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   3511c:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   3512c:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   3513c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3514c:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   3515c:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   3516c:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   3517c:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   3518c:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   3519c:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   351ac:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   351bc:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   351cc:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   351dc:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   351ec:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   351fc:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   3520c:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   3521c:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   3522c:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   3523c:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   3524c:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   3525c:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   3526c:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   3527c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3528c:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   3529c:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   352ac:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   352bc:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   352cc:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   352dc:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   352ec:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   352fc:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   3530c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3531c:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   3532c:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   3533c:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   3534c:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   3535c:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   3536c:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   3537c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3538c:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   3539c:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   353ac:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   353bc:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   353cc:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   353dc:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   353ec:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   353fc:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   3540c:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   3541c:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   3542c:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   3543c:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   3544c:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   3545c:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   3546c:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   3547c:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   3548c:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   3549c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   354ac:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   354bc:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   354cc:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   354dc:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   354ec:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   354fc:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   3550c:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   3551c:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   3552c:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   3553c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3554c:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   3555c:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   3556c:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   3557c:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   3558c:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   3559c:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   355ac:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   355bc:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   355cc:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   355dc:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   355ec:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   355fc:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   3560c:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   3561c:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   3562c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3563c:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   3564c:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   3565c:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   3566c:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   3567c:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   3568c:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   3569c:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   356ac:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   356bc:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   356cc:	0000 0000 6d54 2072 7653 0063 b3dc 0001     ....Tmr Svc.....
   356dc:	b3dc 0001 b3dc 0001 b46a 0001 b434 0001     ........j...4...
   356ec:	b45e 0001 b3dc 0001 b3dc 0001 b46a 0001     ^...........j...
   356fc:	b434 0001                                   4...

00035700 <sd_mmc_trans_units>:
   35700:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0003571c <sd_trans_multipliers>:
   3571c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   3572c:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   3573c:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   3574c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0003575c <mmc_trans_multipliers>:
   3575c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   3576c:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   3577c:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   3578c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   3579c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   357ac:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   357bc:	746c 6320 646d 000a 000d 0000               lt cmd......

000357c8 <__FUNCTION__.16824>:
   357c8:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   357d8:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   357e8:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   357f8:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   35808:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   35818:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   35828:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   35838:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   35848:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   35858:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   35868:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   35878:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   35888:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   35898:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   358a8:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   358b8:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   358c8:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   358d8:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   358e8:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   358f8:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   35908:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   35918:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   35928:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   35938:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   35948:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   35958:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   35968:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   35978:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   35988:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   35998:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   359a8:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   359b8:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   359c8:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   359d8:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   359e8:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   359f8:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   35a08:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   35a18:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   35a28:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   35a38:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   35a48:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   35a58:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   35a68:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   35a78:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   35a88:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   35a98:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   35aa8:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   35ab8:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   35ac8:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   35ad8:	203f 6425 000a 0000 f57c 0001 f54c 0001     ? %d....|...L...
   35ae8:	f544 0001 f55c 0001 f554 0001 f574 0001     D...\...T...t...
   35af8:	f564 0001 f56c 0001                         d...l...

00035b00 <__FUNCTION__.17692>:
   35b00:	6968 5f66 6573 646e 0000 0000               hif_send....

00035b0c <__FUNCTION__.17702>:
   35b0c:	6968 5f66 7369 0072                         hif_isr.

00035b14 <__FUNCTION__.17711>:
   35b14:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00035b24 <__FUNCTION__.17723>:
   35b24:	6968 5f66 6572 6563 7669 0065               hif_receive.

00035b30 <__FUNCTION__.17739>:
   35b30:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   35b40:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   35b50:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   35b60:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   35b70:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   35b80:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   35b90:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   35ba0:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   35bb0:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   35bc0:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   35bd0:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   35be0:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   35bf0:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   35c00:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   35c10:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   35c20:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   35c30:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   35c40:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   35c50:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   35c60:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   35c70:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   35c80:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   35c90:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   35ca0:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   35cb0:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   35cc0:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   35cd0:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   35ce0:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   35cf0:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   35d00:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   35d10:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   35d20:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   35d30:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   35d40:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   35d50:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   35d60:	000a 0000 3830 353a 3a35 3735 0000 0000     ....08:55:57....
   35d70:	7041 2072 3532 3220 3230 0034 7244 7669     Apr 25 2024.Driv
   35d80:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   35d90:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   35da0:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   35db0:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   35dc0:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   35dd0:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   35de0:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   35df0:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   35e00:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   35e10:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   35e20:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   35e30:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   35e40:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   35e50:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   35e60:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   35e70:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   35e80:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   35e90:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   35ea0:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   35eb0:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   35ec0:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   35ed0:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   35ee0:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   35ef0:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   35f00:	4220 6675 6566 0a72 0000 0000                Buffer.....

00035f0c <__FUNCTION__.17674>:
   35f0c:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00035f18 <__FUNCTION__.17703>:
   35f18:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00035f28 <__FUNCTION__.17734>:
   35f28:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   35f38:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   35f48:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   35f58:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   35f68:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   35f78:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   35f88:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   35f98:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   35fa8:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   35fb8:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00035fc8 <__FUNCTION__.17531>:
   35fc8:	6863 7069 775f 6b61 0065 0000               chip_wake...

00035fd4 <__FUNCTION__.17580>:
   35fd4:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   35fe4:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   35ff4:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   36004:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   36014:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   36024:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   36034:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   36044:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   36054:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   36064:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   36074:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   36084:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   36094:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   360a4:	6920 696e 2074 7562 0a73 0000                init bus...

000360b0 <__FUNCTION__.17578>:
   360b0:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

000360bc <__FUNCTION__.17585>:
   360bc:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

000360cc <crc7_syndrome_table>:
   360cc:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   360dc:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   360ec:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   360fc:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   3610c:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   3611c:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   3612c:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   3613c:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   3614c:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   3615c:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   3616c:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   3617c:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   3618c:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   3619c:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   361ac:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   361bc:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   361cc:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   361dc:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   361ec:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   361fc:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   3620c:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3621c:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   3622c:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3623c:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   3624c:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   3625c:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   3626c:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   3627c:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   3628c:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   3629c:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   362ac:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   362bc:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   362cc:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   362dc:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   362ec:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   362fc:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3630c:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   3631c:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   3632c:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3633c:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   3634c:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   3635c:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   3636c:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3637c:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   3638c:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   3639c:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   363ac:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   363bc:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   363cc:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   363dc:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   363ec:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   363fc:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   3640c:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   3641c:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   3642c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3643c:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   3644c:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   3645c:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   3646c:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   3647c:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   3648c:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3649c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   364ac:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   364bc:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   364cc:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   364dc:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   364ec:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   364fc:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3650c:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   3651c:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   3652c:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   3653c:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3654c:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   3655c:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   3656c:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   3657c:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   3658c:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   3659c:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   365ac:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   365bc:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   365cc:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   365dc:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   365ec:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   365fc:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   3660c:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   3661c:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   3662c:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   3663c:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3664c:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   3665c:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   3666c:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3667c:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3668c:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   3669c:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   366ac:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   366bc:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   366cc:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   366dc:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   366ec:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   366fc:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   3670c:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   3671c:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   3672c:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   3673c:	2e2e 0a2e 0000 0000 11a4 0002 11a4 0002     ................
   3674c:	1234 0002 10f8 0002 113e 0002 1160 0002     4.......>...`...
   3675c:	11e6 0002 11e6 0002 12a0 0002 10cc 0002     ................
   3676c:	12fa 0002 12fa 0002 12fa 0002 12fa 0002     ................
   3677c:	1182 0002 1704 0002 1704 0002 178c 0002     ................
   3678c:	1668 0002 16aa 0002 16c8 0002 1742 0002     h...........B...
   3679c:	1742 0002 17ee 0002 1640 0002 183e 0002     B.......@...>...
   367ac:	183e 0002 183e 0002 183e 0002 16e6 0002     >...>...>.......

000367bc <__FUNCTION__.16853>:
   367bc:	7073 5f69 6d63 0064                         spi_cmd.

000367c4 <__FUNCTION__.16860>:
   367c4:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

000367d4 <__FUNCTION__.16869>:
   367d4:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

000367e0 <__FUNCTION__.16902>:
   367e0:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   367f0:	0000 0000                                   ....

000367f4 <__FUNCTION__.16948>:
   367f4:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00036804 <__FUNCTION__.16960>:
   36804:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00036814 <__FUNCTION__.16971>:
   36814:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00036824 <__FUNCTION__.16983>:
   36824:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00036834 <__FUNCTION__.16994>:
   36834:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00036840 <__FUNCTION__.17015>:
   36840:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   36850:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   36860:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   36870:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   36880:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   36890:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   368a0:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   368b0:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   368c0:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   368d0:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   368e0:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   368f0:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   36900:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   36910:	2074 2230 0000 0000                         t 0"....

00036918 <lun_desc>:
   36918:	ce01 0001 ce59 0001 cea5 0001 cef1 0001     ....Y...........
   36928:	cf21 0001 cfa5 0001 d035 0001 6900 0003     !.......5....i..
   36938:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   36948:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   36958:	7122 0002 719c 0002 719c 0002 7140 0002     "q...q...q..@q..
   36968:	713a 0002 7146 0002 7128 0002 714c 0002     :q..Fq..(q..Lq..
   36978:	7182 0002 7384 0002 73d4 0002 73d4 0002     .q...s...s...s..
   36988:	73d0 0002 7376 0002 7396 0002 7366 0002     .s..vs...s..fs..
   36998:	73a8 0002 73ba 0002 7422 0002 7450 0002     .s...s.."t..Pt..
   369a8:	7450 0002 744c 0002 741c 0002 7428 0002     Pt..Lt...t..(t..
   369b8:	7416 0002 742e 0002 7434 0002               .t...t..4t..

000369c4 <tcc_modules>:
   369c4:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

000369d0 <_tcc_gclk_ids>:
   369d0:	1a1a 001b                                   ....

000369d4 <_tcc_apbcmasks>:
   369d4:	0100 0000 0200 0000 0400 0000               ............

000369e0 <_tcc_maxs>:
   369e0:	ffff 00ff ffff 00ff ffff 0000               ............

000369ec <_tcc_cc_nums>:
   369ec:	0204 0002                                   ....

000369f0 <_tcc_ow_nums>:
   369f0:	0408 0002                                   ....

000369f4 <_tcc_intflag>:
   369f4:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   36a04:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   36a14:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00036a24 <LfnOfs>:
   36a24:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   36a34:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   36a44:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   36a54:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   36a64:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   36a74:	5441 2020 2020 0020                         AT     .

00036a7c <excvt.4558>:
   36a7c:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   36a8c:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   36a9c:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   36aac:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   36abc:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   36acc:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   36adc:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   36aec:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00036afc <Tbl>:
   36afc:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   36b0c:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   36b1c:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   36b2c:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   36b3c:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   36b4c:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   36b5c:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   36b6c:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   36b7c:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   36b8c:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   36b9c:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   36bac:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   36bbc:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   36bcc:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   36bdc:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   36bec:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00036bfc <tbl_lower.4308>:
   36bfc:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   36c0c:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   36c1c:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   36c2c:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   36c3c:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   36c4c:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   36c5c:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   36c6c:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   36c7c:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   36c8c:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   36c9c:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   36cac:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   36cbc:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   36ccc:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   36cdc:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   36cec:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   36cfc:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   36d0c:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   36d1c:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   36d2c:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   36d3c:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   36d4c:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   36d5c:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   36d6c:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   36d7c:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   36d8c:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   36d9c:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   36dac:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   36dbc:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   36dcc:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00036ddc <tbl_upper.4309>:
   36ddc:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   36dec:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   36dfc:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   36e0c:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   36e1c:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   36e2c:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   36e3c:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   36e4c:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   36e5c:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   36e6c:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   36e7c:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   36e8c:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   36e9c:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   36eac:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   36ebc:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   36ecc:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   36edc:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   36eec:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   36efc:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   36f0c:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   36f1c:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   36f2c:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   36f3c:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   36f4c:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   36f5c:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   36f6c:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   36f7c:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   36f8c:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   36f9c:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   36fac:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   36fbc:	c78e 0002 c78e 0002 c78e 0002 c61c 0002     ................
   36fcc:	c78e 0002 c706 0002 c78e 0002 c78e 0002     ................
   36fdc:	c78e 0002 c78e 0002 c78e 0002 c78e 0002     ................
   36fec:	c78e 0002 c780 0002 514d 4354 0000 0000     ........MQTC....
   36ffc:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   3700c:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3704c:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   37064:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   370a4:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   370b4:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   370c4:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   370d4:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   370e4:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   370f4:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   37104:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   37114:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   37124:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   37134:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   37144:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   37154:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   37164:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   37174:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   37184:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   37194:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   371a4:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   371b4:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   371c4:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   371d4:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   371e4:	5448 5054 002f 0000 0d31 0000 e882 0002     HTTP/...1.......
   371f4:	e87c 0002 e876 0002 e870 0002 e888 0002     |...v...p.......
   37204:	e86a 0002 e888 0002 e864 0002 e85e 0002     j.......d...^...
   37214:	e888 0002 e858 0002 e858 0002 e852 0002     ....X...X...R...
   37224:	e84c 0002 e846 0002 2000 4200 2400 4200     L...F.... .B.$.B
   37234:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   37244:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   37254:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   37264:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   37274:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   37284:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   37294:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   372a4:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   372b4:	6548 7061 6220 6665 726f 2065 7473 7261     Heap before star
   372c4:	6974 676e 7420 7361 736b 203a 6425 0a0d     ting tasks: %d..
   372d4:	0000 0000 4c43 5f49 4154 4b53 0000 0000     ....CLI_TASK....
   372e4:	5245 3a52 4320 494c 7420 7361 206b 6f63     ERR: CLI task co
   372f4:	6c75 2064 6f6e 2074 6562 6920 696e 6974     uld not be initi
   37304:	6c61 7a69 6465 0d21 000a 0000 6548 7061     alized!.....Heap
   37314:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   37324:	4c43 3a49 2520 0d64 000a 0000 4957 4946     CLI: %d.....WIFI
   37334:	545f 5341 004b 0000 5245 3a52 5720 4649     _TASK...ERR: WIF
   37344:	2049 6174 6b73 6320 756f 646c 6e20 746f     I task could not
   37354:	6220 2065 6e69 7469 6169 696c 657a 2164      be initialized!
   37364:	0a0d 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   37374:	6174 7472 6e69 2067 4957 4946 203a 6425     tarting WIFI: %d
   37384:	0a0d 0000 7245 6f72 2072 6e6f 6d20 6d65     ....Error on mem
   37394:	726f 2079 6c61 6f6c 6163 6974 6e6f 6f20     ory allocation o
   373a4:	206e 5246 4545 5452 534f 0d21 000a 0000     n FREERTOS!.....
   373b4:	7245 6f72 2072 6e6f 7320 6174 6b63 6f20     Error on stack o
   373c4:	6576 6672 6f6c 2077 6e6f 4620 4552 5245     verflow on FREER
   373d4:	4f54 2153 0a0d 0000 1040 0003 1022 0003     TOS!....@..."...
   373e4:	0fdc 0003 0efa 0003 0fdc 0003 1014 0003     ................
   373f4:	0fdc 0003 0efa 0003 1022 0003 1022 0003     ........"..."...
   37404:	1014 0003 0efa 0003 0ef2 0003 0ef2 0003     ................
   37414:	0ef2 0003 1258 0003 16a0 0003 1560 0003     ....X.......`...
   37424:	1560 0003 155c 0003 1678 0003 1678 0003     `...\...x...x...
   37434:	166a 0003 155c 0003 1678 0003 166a 0003     j...\...x...j...
   37444:	1678 0003 155c 0003 1680 0003 1680 0003     x...\...........
   37454:	1680 0003 1884 0003                         ........

0003745c <_global_impure_ptr>:
   3745c:	0114 2000                                   ... 

00037460 <__sf_fake_stderr>:
	...

00037480 <__sf_fake_stdin>:
	...

000374a0 <__sf_fake_stdout>:
	...
   374c0:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   374d0:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   374e0:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   374f0:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

000374fd <_ctype_>:
   374fd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3750d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3751d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3752d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3753d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3754d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3755d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3756d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3757d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00037600 <_init>:
   37600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37602:	46c0      	nop			; (mov r8, r8)
   37604:	bcf8      	pop	{r3, r4, r5, r6, r7}
   37606:	bc08      	pop	{r3}
   37608:	469e      	mov	lr, r3
   3760a:	4770      	bx	lr

0003760c <__init_array_start>:
   3760c:	000120dd 	.word	0x000120dd

00037610 <_fini>:
   37610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37612:	46c0      	nop			; (mov r8, r8)
   37614:	bcf8      	pop	{r3, r4, r5, r6, r7}
   37616:	bc08      	pop	{r3}
   37618:	469e      	mov	lr, r3
   3761a:	4770      	bx	lr

0003761c <__fini_array_start>:
   3761c:	000120b5 	.word	0x000120b5
